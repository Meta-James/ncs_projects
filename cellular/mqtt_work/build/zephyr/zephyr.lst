
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20029338 	.word	0x20029338
    c004:	00014961 	.word	0x00014961
    c008:	0002d071 	.word	0x0002d071
    c00c:	00014991 	.word	0x00014991
    c010:	00014991 	.word	0x00014991
    c014:	00014991 	.word	0x00014991
    c018:	00014991 	.word	0x00014991
    c01c:	00014991 	.word	0x00014991
	...
    c02c:	00014635 	.word	0x00014635
    c030:	00014991 	.word	0x00014991
    c034:	00000000 	.word	0x00000000
    c038:	00014585 	.word	0x00014585
    c03c:	00014271 	.word	0x00014271

0000c040 <_irq_vector_table>:
    c040:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c050:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c060:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c070:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c080:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c090:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c0a0:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c0b0:	000169c1 0002df89 00014921 00014921     .i......!I..!I..
    c0c0:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c0d0:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c0e0:	00014921 00014921 0002dfa7 00014921     !I..!I......!I..
    c0f0:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c100:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c110:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c120:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c130:	00014921 00014921 00014921 00014921     !I..!I..!I..!I..
    c140:	00014921                                !I..

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00028124 00000001 0000c000 0000c000     $...............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__gedf2>:
    c5b8:	f04f 3cff 	mov.w	ip, #4294967295
    c5bc:	e006      	b.n	c5cc <__cmpdf2+0x4>
    c5be:	bf00      	nop

0000c5c0 <__ledf2>:
    c5c0:	f04f 0c01 	mov.w	ip, #1
    c5c4:	e002      	b.n	c5cc <__cmpdf2+0x4>
    c5c6:	bf00      	nop

0000c5c8 <__cmpdf2>:
    c5c8:	f04f 0c01 	mov.w	ip, #1
    c5cc:	f84d cd04 	str.w	ip, [sp, #-4]!
    c5d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c5d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c5dc:	bf18      	it	ne
    c5de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c5e2:	d01b      	beq.n	c61c <__cmpdf2+0x54>
    c5e4:	b001      	add	sp, #4
    c5e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c5ea:	bf0c      	ite	eq
    c5ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c5f0:	ea91 0f03 	teqne	r1, r3
    c5f4:	bf02      	ittt	eq
    c5f6:	ea90 0f02 	teqeq	r0, r2
    c5fa:	2000      	moveq	r0, #0
    c5fc:	4770      	bxeq	lr
    c5fe:	f110 0f00 	cmn.w	r0, #0
    c602:	ea91 0f03 	teq	r1, r3
    c606:	bf58      	it	pl
    c608:	4299      	cmppl	r1, r3
    c60a:	bf08      	it	eq
    c60c:	4290      	cmpeq	r0, r2
    c60e:	bf2c      	ite	cs
    c610:	17d8      	asrcs	r0, r3, #31
    c612:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c616:	f040 0001 	orr.w	r0, r0, #1
    c61a:	4770      	bx	lr
    c61c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c624:	d102      	bne.n	c62c <__cmpdf2+0x64>
    c626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c62a:	d107      	bne.n	c63c <__cmpdf2+0x74>
    c62c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c634:	d1d6      	bne.n	c5e4 <__cmpdf2+0x1c>
    c636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c63a:	d0d3      	beq.n	c5e4 <__cmpdf2+0x1c>
    c63c:	f85d 0b04 	ldr.w	r0, [sp], #4
    c640:	4770      	bx	lr
    c642:	bf00      	nop

0000c644 <__aeabi_cdrcmple>:
    c644:	4684      	mov	ip, r0
    c646:	4610      	mov	r0, r2
    c648:	4662      	mov	r2, ip
    c64a:	468c      	mov	ip, r1
    c64c:	4619      	mov	r1, r3
    c64e:	4663      	mov	r3, ip
    c650:	e000      	b.n	c654 <__aeabi_cdcmpeq>
    c652:	bf00      	nop

0000c654 <__aeabi_cdcmpeq>:
    c654:	b501      	push	{r0, lr}
    c656:	f7ff ffb7 	bl	c5c8 <__cmpdf2>
    c65a:	2800      	cmp	r0, #0
    c65c:	bf48      	it	mi
    c65e:	f110 0f00 	cmnmi.w	r0, #0
    c662:	bd01      	pop	{r0, pc}

0000c664 <__aeabi_dcmpeq>:
    c664:	f84d ed08 	str.w	lr, [sp, #-8]!
    c668:	f7ff fff4 	bl	c654 <__aeabi_cdcmpeq>
    c66c:	bf0c      	ite	eq
    c66e:	2001      	moveq	r0, #1
    c670:	2000      	movne	r0, #0
    c672:	f85d fb08 	ldr.w	pc, [sp], #8
    c676:	bf00      	nop

0000c678 <__aeabi_dcmplt>:
    c678:	f84d ed08 	str.w	lr, [sp, #-8]!
    c67c:	f7ff ffea 	bl	c654 <__aeabi_cdcmpeq>
    c680:	bf34      	ite	cc
    c682:	2001      	movcc	r0, #1
    c684:	2000      	movcs	r0, #0
    c686:	f85d fb08 	ldr.w	pc, [sp], #8
    c68a:	bf00      	nop

0000c68c <__aeabi_dcmple>:
    c68c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c690:	f7ff ffe0 	bl	c654 <__aeabi_cdcmpeq>
    c694:	bf94      	ite	ls
    c696:	2001      	movls	r0, #1
    c698:	2000      	movhi	r0, #0
    c69a:	f85d fb08 	ldr.w	pc, [sp], #8
    c69e:	bf00      	nop

0000c6a0 <__aeabi_dcmpge>:
    c6a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6a4:	f7ff ffce 	bl	c644 <__aeabi_cdrcmple>
    c6a8:	bf94      	ite	ls
    c6aa:	2001      	movls	r0, #1
    c6ac:	2000      	movhi	r0, #0
    c6ae:	f85d fb08 	ldr.w	pc, [sp], #8
    c6b2:	bf00      	nop

0000c6b4 <__aeabi_dcmpgt>:
    c6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6b8:	f7ff ffc4 	bl	c644 <__aeabi_cdrcmple>
    c6bc:	bf34      	ite	cc
    c6be:	2001      	movcc	r0, #1
    c6c0:	2000      	movcs	r0, #0
    c6c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c6c6:	bf00      	nop

0000c6c8 <__aeabi_d2iz>:
    c6c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c6cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c6d0:	d215      	bcs.n	c6fe <__aeabi_d2iz+0x36>
    c6d2:	d511      	bpl.n	c6f8 <__aeabi_d2iz+0x30>
    c6d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c6d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c6dc:	d912      	bls.n	c704 <__aeabi_d2iz+0x3c>
    c6de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c6e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c6e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c6ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c6ee:	fa23 f002 	lsr.w	r0, r3, r2
    c6f2:	bf18      	it	ne
    c6f4:	4240      	negne	r0, r0
    c6f6:	4770      	bx	lr
    c6f8:	f04f 0000 	mov.w	r0, #0
    c6fc:	4770      	bx	lr
    c6fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c702:	d105      	bne.n	c710 <__aeabi_d2iz+0x48>
    c704:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c708:	bf08      	it	eq
    c70a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c70e:	4770      	bx	lr
    c710:	f04f 0000 	mov.w	r0, #0
    c714:	4770      	bx	lr
    c716:	bf00      	nop

0000c718 <__aeabi_d2f>:
    c718:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c71c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c720:	bf24      	itt	cs
    c722:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c726:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c72a:	d90d      	bls.n	c748 <__aeabi_d2f+0x30>
    c72c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c730:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c734:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c738:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c73c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c740:	bf08      	it	eq
    c742:	f020 0001 	biceq.w	r0, r0, #1
    c746:	4770      	bx	lr
    c748:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c74c:	d121      	bne.n	c792 <__aeabi_d2f+0x7a>
    c74e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c752:	bfbc      	itt	lt
    c754:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c758:	4770      	bxlt	lr
    c75a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c75e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c762:	f1c2 0218 	rsb	r2, r2, #24
    c766:	f1c2 0c20 	rsb	ip, r2, #32
    c76a:	fa10 f30c 	lsls.w	r3, r0, ip
    c76e:	fa20 f002 	lsr.w	r0, r0, r2
    c772:	bf18      	it	ne
    c774:	f040 0001 	orrne.w	r0, r0, #1
    c778:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c77c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c780:	fa03 fc0c 	lsl.w	ip, r3, ip
    c784:	ea40 000c 	orr.w	r0, r0, ip
    c788:	fa23 f302 	lsr.w	r3, r3, r2
    c78c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c790:	e7cc      	b.n	c72c <__aeabi_d2f+0x14>
    c792:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c796:	d107      	bne.n	c7a8 <__aeabi_d2f+0x90>
    c798:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c79c:	bf1e      	ittt	ne
    c79e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c7a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c7a6:	4770      	bxne	lr
    c7a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c7ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c7b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop

0000c7b8 <__aeabi_ldivmod>:
    c7b8:	b97b      	cbnz	r3, c7da <__aeabi_ldivmod+0x22>
    c7ba:	b972      	cbnz	r2, c7da <__aeabi_ldivmod+0x22>
    c7bc:	2900      	cmp	r1, #0
    c7be:	bfbe      	ittt	lt
    c7c0:	2000      	movlt	r0, #0
    c7c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c7c6:	e006      	blt.n	c7d6 <__aeabi_ldivmod+0x1e>
    c7c8:	bf08      	it	eq
    c7ca:	2800      	cmpeq	r0, #0
    c7cc:	bf1c      	itt	ne
    c7ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c7d2:	f04f 30ff 	movne.w	r0, #4294967295
    c7d6:	f000 b9b7 	b.w	cb48 <__aeabi_idiv0>
    c7da:	f1ad 0c08 	sub.w	ip, sp, #8
    c7de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c7e2:	2900      	cmp	r1, #0
    c7e4:	db09      	blt.n	c7fa <__aeabi_ldivmod+0x42>
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	db1a      	blt.n	c820 <__aeabi_ldivmod+0x68>
    c7ea:	f000 f84d 	bl	c888 <__udivmoddi4>
    c7ee:	f8dd e004 	ldr.w	lr, [sp, #4]
    c7f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7f6:	b004      	add	sp, #16
    c7f8:	4770      	bx	lr
    c7fa:	4240      	negs	r0, r0
    c7fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c800:	2b00      	cmp	r3, #0
    c802:	db1b      	blt.n	c83c <__aeabi_ldivmod+0x84>
    c804:	f000 f840 	bl	c888 <__udivmoddi4>
    c808:	f8dd e004 	ldr.w	lr, [sp, #4]
    c80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c810:	b004      	add	sp, #16
    c812:	4240      	negs	r0, r0
    c814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c818:	4252      	negs	r2, r2
    c81a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c81e:	4770      	bx	lr
    c820:	4252      	negs	r2, r2
    c822:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c826:	f000 f82f 	bl	c888 <__udivmoddi4>
    c82a:	f8dd e004 	ldr.w	lr, [sp, #4]
    c82e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c832:	b004      	add	sp, #16
    c834:	4240      	negs	r0, r0
    c836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c83a:	4770      	bx	lr
    c83c:	4252      	negs	r2, r2
    c83e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c842:	f000 f821 	bl	c888 <__udivmoddi4>
    c846:	f8dd e004 	ldr.w	lr, [sp, #4]
    c84a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c84e:	b004      	add	sp, #16
    c850:	4252      	negs	r2, r2
    c852:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c856:	4770      	bx	lr

0000c858 <__aeabi_uldivmod>:
    c858:	b953      	cbnz	r3, c870 <__aeabi_uldivmod+0x18>
    c85a:	b94a      	cbnz	r2, c870 <__aeabi_uldivmod+0x18>
    c85c:	2900      	cmp	r1, #0
    c85e:	bf08      	it	eq
    c860:	2800      	cmpeq	r0, #0
    c862:	bf1c      	itt	ne
    c864:	f04f 31ff 	movne.w	r1, #4294967295
    c868:	f04f 30ff 	movne.w	r0, #4294967295
    c86c:	f000 b96c 	b.w	cb48 <__aeabi_idiv0>
    c870:	f1ad 0c08 	sub.w	ip, sp, #8
    c874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c878:	f000 f806 	bl	c888 <__udivmoddi4>
    c87c:	f8dd e004 	ldr.w	lr, [sp, #4]
    c880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c884:	b004      	add	sp, #16
    c886:	4770      	bx	lr

0000c888 <__udivmoddi4>:
    c888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c88c:	9d08      	ldr	r5, [sp, #32]
    c88e:	4604      	mov	r4, r0
    c890:	4688      	mov	r8, r1
    c892:	2b00      	cmp	r3, #0
    c894:	d17d      	bne.n	c992 <__udivmoddi4+0x10a>
    c896:	428a      	cmp	r2, r1
    c898:	4617      	mov	r7, r2
    c89a:	d93f      	bls.n	c91c <__udivmoddi4+0x94>
    c89c:	fab2 f282 	clz	r2, r2
    c8a0:	b142      	cbz	r2, c8b4 <__udivmoddi4+0x2c>
    c8a2:	f1c2 0020 	rsb	r0, r2, #32
    c8a6:	4091      	lsls	r1, r2
    c8a8:	4097      	lsls	r7, r2
    c8aa:	fa24 f000 	lsr.w	r0, r4, r0
    c8ae:	4094      	lsls	r4, r2
    c8b0:	ea40 0801 	orr.w	r8, r0, r1
    c8b4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c8b8:	0c23      	lsrs	r3, r4, #16
    c8ba:	fa1f fe87 	uxth.w	lr, r7
    c8be:	fbb8 f6fc 	udiv	r6, r8, ip
    c8c2:	fb0c 8116 	mls	r1, ip, r6, r8
    c8c6:	fb06 f00e 	mul.w	r0, r6, lr
    c8ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c8ce:	4298      	cmp	r0, r3
    c8d0:	d905      	bls.n	c8de <__udivmoddi4+0x56>
    c8d2:	18fb      	adds	r3, r7, r3
    c8d4:	d202      	bcs.n	c8dc <__udivmoddi4+0x54>
    c8d6:	4298      	cmp	r0, r3
    c8d8:	f200 8124 	bhi.w	cb24 <__udivmoddi4+0x29c>
    c8dc:	3e01      	subs	r6, #1
    c8de:	1a19      	subs	r1, r3, r0
    c8e0:	b2a3      	uxth	r3, r4
    c8e2:	fbb1 f0fc 	udiv	r0, r1, ip
    c8e6:	fb0c 1110 	mls	r1, ip, r0, r1
    c8ea:	fb00 fe0e 	mul.w	lr, r0, lr
    c8ee:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c8f2:	45a6      	cmp	lr, r4
    c8f4:	d905      	bls.n	c902 <__udivmoddi4+0x7a>
    c8f6:	193c      	adds	r4, r7, r4
    c8f8:	d202      	bcs.n	c900 <__udivmoddi4+0x78>
    c8fa:	45a6      	cmp	lr, r4
    c8fc:	f200 810f 	bhi.w	cb1e <__udivmoddi4+0x296>
    c900:	3801      	subs	r0, #1
    c902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c906:	eba4 040e 	sub.w	r4, r4, lr
    c90a:	2600      	movs	r6, #0
    c90c:	b11d      	cbz	r5, c916 <__udivmoddi4+0x8e>
    c90e:	40d4      	lsrs	r4, r2
    c910:	2300      	movs	r3, #0
    c912:	e9c5 4300 	strd	r4, r3, [r5]
    c916:	4631      	mov	r1, r6
    c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c91c:	b902      	cbnz	r2, c920 <__udivmoddi4+0x98>
    c91e:	deff      	udf	#255	; 0xff
    c920:	fab2 f282 	clz	r2, r2
    c924:	2a00      	cmp	r2, #0
    c926:	d150      	bne.n	c9ca <__udivmoddi4+0x142>
    c928:	1bcb      	subs	r3, r1, r7
    c92a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c92e:	fa1f f887 	uxth.w	r8, r7
    c932:	2601      	movs	r6, #1
    c934:	0c21      	lsrs	r1, r4, #16
    c936:	fbb3 fcfe 	udiv	ip, r3, lr
    c93a:	fb0e 301c 	mls	r0, lr, ip, r3
    c93e:	460b      	mov	r3, r1
    c940:	fb08 f90c 	mul.w	r9, r8, ip
    c944:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c948:	4589      	cmp	r9, r1
    c94a:	d90a      	bls.n	c962 <__udivmoddi4+0xda>
    c94c:	1879      	adds	r1, r7, r1
    c94e:	bf2c      	ite	cs
    c950:	2301      	movcs	r3, #1
    c952:	2300      	movcc	r3, #0
    c954:	4589      	cmp	r9, r1
    c956:	d902      	bls.n	c95e <__udivmoddi4+0xd6>
    c958:	2b00      	cmp	r3, #0
    c95a:	f000 80d9 	beq.w	cb10 <__udivmoddi4+0x288>
    c95e:	f10c 3cff 	add.w	ip, ip, #4294967295
    c962:	eba1 0109 	sub.w	r1, r1, r9
    c966:	b2a3      	uxth	r3, r4
    c968:	fbb1 f0fe 	udiv	r0, r1, lr
    c96c:	fb0e 1110 	mls	r1, lr, r0, r1
    c970:	fb08 f800 	mul.w	r8, r8, r0
    c974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c978:	45a0      	cmp	r8, r4
    c97a:	d905      	bls.n	c988 <__udivmoddi4+0x100>
    c97c:	193c      	adds	r4, r7, r4
    c97e:	d202      	bcs.n	c986 <__udivmoddi4+0xfe>
    c980:	45a0      	cmp	r8, r4
    c982:	f200 80c9 	bhi.w	cb18 <__udivmoddi4+0x290>
    c986:	3801      	subs	r0, #1
    c988:	eba4 0408 	sub.w	r4, r4, r8
    c98c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c990:	e7bc      	b.n	c90c <__udivmoddi4+0x84>
    c992:	428b      	cmp	r3, r1
    c994:	d909      	bls.n	c9aa <__udivmoddi4+0x122>
    c996:	2d00      	cmp	r5, #0
    c998:	f000 80b1 	beq.w	cafe <__udivmoddi4+0x276>
    c99c:	2600      	movs	r6, #0
    c99e:	e9c5 0100 	strd	r0, r1, [r5]
    c9a2:	4630      	mov	r0, r6
    c9a4:	4631      	mov	r1, r6
    c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9aa:	fab3 f683 	clz	r6, r3
    c9ae:	2e00      	cmp	r6, #0
    c9b0:	d146      	bne.n	ca40 <__udivmoddi4+0x1b8>
    c9b2:	428b      	cmp	r3, r1
    c9b4:	f0c0 80a6 	bcc.w	cb04 <__udivmoddi4+0x27c>
    c9b8:	4282      	cmp	r2, r0
    c9ba:	f240 80a3 	bls.w	cb04 <__udivmoddi4+0x27c>
    c9be:	4630      	mov	r0, r6
    c9c0:	2d00      	cmp	r5, #0
    c9c2:	d0a8      	beq.n	c916 <__udivmoddi4+0x8e>
    c9c4:	e9c5 4800 	strd	r4, r8, [r5]
    c9c8:	e7a5      	b.n	c916 <__udivmoddi4+0x8e>
    c9ca:	4097      	lsls	r7, r2
    c9cc:	f1c2 0320 	rsb	r3, r2, #32
    c9d0:	fa01 f002 	lsl.w	r0, r1, r2
    c9d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c9d8:	40d9      	lsrs	r1, r3
    c9da:	fa24 f303 	lsr.w	r3, r4, r3
    c9de:	fa1f f887 	uxth.w	r8, r7
    c9e2:	4094      	lsls	r4, r2
    c9e4:	4303      	orrs	r3, r0
    c9e6:	fbb1 f0fe 	udiv	r0, r1, lr
    c9ea:	0c1e      	lsrs	r6, r3, #16
    c9ec:	fb0e 1110 	mls	r1, lr, r0, r1
    c9f0:	fb00 fc08 	mul.w	ip, r0, r8
    c9f4:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    c9f8:	458c      	cmp	ip, r1
    c9fa:	d909      	bls.n	ca10 <__udivmoddi4+0x188>
    c9fc:	1879      	adds	r1, r7, r1
    c9fe:	bf2c      	ite	cs
    ca00:	2601      	movcs	r6, #1
    ca02:	2600      	movcc	r6, #0
    ca04:	458c      	cmp	ip, r1
    ca06:	d902      	bls.n	ca0e <__udivmoddi4+0x186>
    ca08:	2e00      	cmp	r6, #0
    ca0a:	f000 8093 	beq.w	cb34 <__udivmoddi4+0x2ac>
    ca0e:	3801      	subs	r0, #1
    ca10:	eba1 010c 	sub.w	r1, r1, ip
    ca14:	b29b      	uxth	r3, r3
    ca16:	fbb1 f6fe 	udiv	r6, r1, lr
    ca1a:	fb0e 1116 	mls	r1, lr, r6, r1
    ca1e:	fb06 fc08 	mul.w	ip, r6, r8
    ca22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    ca26:	458c      	cmp	ip, r1
    ca28:	d905      	bls.n	ca36 <__udivmoddi4+0x1ae>
    ca2a:	1879      	adds	r1, r7, r1
    ca2c:	d202      	bcs.n	ca34 <__udivmoddi4+0x1ac>
    ca2e:	458c      	cmp	ip, r1
    ca30:	f200 8087 	bhi.w	cb42 <__udivmoddi4+0x2ba>
    ca34:	3e01      	subs	r6, #1
    ca36:	eba1 030c 	sub.w	r3, r1, ip
    ca3a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    ca3e:	e779      	b.n	c934 <__udivmoddi4+0xac>
    ca40:	f1c6 0720 	rsb	r7, r6, #32
    ca44:	fa03 f406 	lsl.w	r4, r3, r6
    ca48:	fa02 fc06 	lsl.w	ip, r2, r6
    ca4c:	fa01 fe06 	lsl.w	lr, r1, r6
    ca50:	40fa      	lsrs	r2, r7
    ca52:	fa20 f807 	lsr.w	r8, r0, r7
    ca56:	40f9      	lsrs	r1, r7
    ca58:	fa00 f306 	lsl.w	r3, r0, r6
    ca5c:	4322      	orrs	r2, r4
    ca5e:	ea48 040e 	orr.w	r4, r8, lr
    ca62:	ea4f 4812 	mov.w	r8, r2, lsr #16
    ca66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    ca6a:	fa1f f982 	uxth.w	r9, r2
    ca6e:	fbb1 faf8 	udiv	sl, r1, r8
    ca72:	fb08 111a 	mls	r1, r8, sl, r1
    ca76:	fb0a f009 	mul.w	r0, sl, r9
    ca7a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    ca7e:	4570      	cmp	r0, lr
    ca80:	d90a      	bls.n	ca98 <__udivmoddi4+0x210>
    ca82:	eb12 0e0e 	adds.w	lr, r2, lr
    ca86:	bf2c      	ite	cs
    ca88:	2101      	movcs	r1, #1
    ca8a:	2100      	movcc	r1, #0
    ca8c:	4570      	cmp	r0, lr
    ca8e:	d901      	bls.n	ca94 <__udivmoddi4+0x20c>
    ca90:	2900      	cmp	r1, #0
    ca92:	d052      	beq.n	cb3a <__udivmoddi4+0x2b2>
    ca94:	f10a 3aff 	add.w	sl, sl, #4294967295
    ca98:	ebae 0e00 	sub.w	lr, lr, r0
    ca9c:	b2a4      	uxth	r4, r4
    ca9e:	fbbe f0f8 	udiv	r0, lr, r8
    caa2:	fb08 ee10 	mls	lr, r8, r0, lr
    caa6:	fb00 f909 	mul.w	r9, r0, r9
    caaa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    caae:	45f1      	cmp	r9, lr
    cab0:	d905      	bls.n	cabe <__udivmoddi4+0x236>
    cab2:	eb12 0e0e 	adds.w	lr, r2, lr
    cab6:	d201      	bcs.n	cabc <__udivmoddi4+0x234>
    cab8:	45f1      	cmp	r9, lr
    caba:	d838      	bhi.n	cb2e <__udivmoddi4+0x2a6>
    cabc:	3801      	subs	r0, #1
    cabe:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    cac2:	ebae 0e09 	sub.w	lr, lr, r9
    cac6:	fba0 890c 	umull	r8, r9, r0, ip
    caca:	45ce      	cmp	lr, r9
    cacc:	4641      	mov	r1, r8
    cace:	464c      	mov	r4, r9
    cad0:	d302      	bcc.n	cad8 <__udivmoddi4+0x250>
    cad2:	d106      	bne.n	cae2 <__udivmoddi4+0x25a>
    cad4:	4543      	cmp	r3, r8
    cad6:	d204      	bcs.n	cae2 <__udivmoddi4+0x25a>
    cad8:	3801      	subs	r0, #1
    cada:	ebb8 010c 	subs.w	r1, r8, ip
    cade:	eb69 0402 	sbc.w	r4, r9, r2
    cae2:	b315      	cbz	r5, cb2a <__udivmoddi4+0x2a2>
    cae4:	1a5a      	subs	r2, r3, r1
    cae6:	eb6e 0e04 	sbc.w	lr, lr, r4
    caea:	40f2      	lsrs	r2, r6
    caec:	fa0e f707 	lsl.w	r7, lr, r7
    caf0:	fa2e f306 	lsr.w	r3, lr, r6
    caf4:	2600      	movs	r6, #0
    caf6:	4317      	orrs	r7, r2
    caf8:	e9c5 7300 	strd	r7, r3, [r5]
    cafc:	e70b      	b.n	c916 <__udivmoddi4+0x8e>
    cafe:	462e      	mov	r6, r5
    cb00:	4628      	mov	r0, r5
    cb02:	e708      	b.n	c916 <__udivmoddi4+0x8e>
    cb04:	1a84      	subs	r4, r0, r2
    cb06:	eb61 0103 	sbc.w	r1, r1, r3
    cb0a:	2001      	movs	r0, #1
    cb0c:	4688      	mov	r8, r1
    cb0e:	e757      	b.n	c9c0 <__udivmoddi4+0x138>
    cb10:	f1ac 0c02 	sub.w	ip, ip, #2
    cb14:	4439      	add	r1, r7
    cb16:	e724      	b.n	c962 <__udivmoddi4+0xda>
    cb18:	3802      	subs	r0, #2
    cb1a:	443c      	add	r4, r7
    cb1c:	e734      	b.n	c988 <__udivmoddi4+0x100>
    cb1e:	3802      	subs	r0, #2
    cb20:	443c      	add	r4, r7
    cb22:	e6ee      	b.n	c902 <__udivmoddi4+0x7a>
    cb24:	3e02      	subs	r6, #2
    cb26:	443b      	add	r3, r7
    cb28:	e6d9      	b.n	c8de <__udivmoddi4+0x56>
    cb2a:	462e      	mov	r6, r5
    cb2c:	e6f3      	b.n	c916 <__udivmoddi4+0x8e>
    cb2e:	3802      	subs	r0, #2
    cb30:	4496      	add	lr, r2
    cb32:	e7c4      	b.n	cabe <__udivmoddi4+0x236>
    cb34:	3802      	subs	r0, #2
    cb36:	4439      	add	r1, r7
    cb38:	e76a      	b.n	ca10 <__udivmoddi4+0x188>
    cb3a:	f1aa 0a02 	sub.w	sl, sl, #2
    cb3e:	4496      	add	lr, r2
    cb40:	e7aa      	b.n	ca98 <__udivmoddi4+0x210>
    cb42:	3e02      	subs	r6, #2
    cb44:	4439      	add	r1, r7
    cb46:	e776      	b.n	ca36 <__udivmoddi4+0x1ae>

0000cb48 <__aeabi_idiv0>:
    cb48:	4770      	bx	lr
    cb4a:	bf00      	nop

0000cb4c <memcpy>:
    cb4c:	4684      	mov	ip, r0
    cb4e:	ea41 0300 	orr.w	r3, r1, r0
    cb52:	f013 0303 	ands.w	r3, r3, #3
    cb56:	d149      	bne.n	cbec <memcpy+0xa0>
    cb58:	3a40      	subs	r2, #64	; 0x40
    cb5a:	d323      	bcc.n	cba4 <memcpy+0x58>
    cb5c:	680b      	ldr	r3, [r1, #0]
    cb5e:	6003      	str	r3, [r0, #0]
    cb60:	684b      	ldr	r3, [r1, #4]
    cb62:	6043      	str	r3, [r0, #4]
    cb64:	688b      	ldr	r3, [r1, #8]
    cb66:	6083      	str	r3, [r0, #8]
    cb68:	68cb      	ldr	r3, [r1, #12]
    cb6a:	60c3      	str	r3, [r0, #12]
    cb6c:	690b      	ldr	r3, [r1, #16]
    cb6e:	6103      	str	r3, [r0, #16]
    cb70:	694b      	ldr	r3, [r1, #20]
    cb72:	6143      	str	r3, [r0, #20]
    cb74:	698b      	ldr	r3, [r1, #24]
    cb76:	6183      	str	r3, [r0, #24]
    cb78:	69cb      	ldr	r3, [r1, #28]
    cb7a:	61c3      	str	r3, [r0, #28]
    cb7c:	6a0b      	ldr	r3, [r1, #32]
    cb7e:	6203      	str	r3, [r0, #32]
    cb80:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    cb82:	6243      	str	r3, [r0, #36]	; 0x24
    cb84:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    cb86:	6283      	str	r3, [r0, #40]	; 0x28
    cb88:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    cb8a:	62c3      	str	r3, [r0, #44]	; 0x2c
    cb8c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    cb8e:	6303      	str	r3, [r0, #48]	; 0x30
    cb90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    cb92:	6343      	str	r3, [r0, #52]	; 0x34
    cb94:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    cb96:	6383      	str	r3, [r0, #56]	; 0x38
    cb98:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    cb9a:	63c3      	str	r3, [r0, #60]	; 0x3c
    cb9c:	3040      	adds	r0, #64	; 0x40
    cb9e:	3140      	adds	r1, #64	; 0x40
    cba0:	3a40      	subs	r2, #64	; 0x40
    cba2:	d2db      	bcs.n	cb5c <memcpy+0x10>
    cba4:	3230      	adds	r2, #48	; 0x30
    cba6:	d30b      	bcc.n	cbc0 <memcpy+0x74>
    cba8:	680b      	ldr	r3, [r1, #0]
    cbaa:	6003      	str	r3, [r0, #0]
    cbac:	684b      	ldr	r3, [r1, #4]
    cbae:	6043      	str	r3, [r0, #4]
    cbb0:	688b      	ldr	r3, [r1, #8]
    cbb2:	6083      	str	r3, [r0, #8]
    cbb4:	68cb      	ldr	r3, [r1, #12]
    cbb6:	60c3      	str	r3, [r0, #12]
    cbb8:	3010      	adds	r0, #16
    cbba:	3110      	adds	r1, #16
    cbbc:	3a10      	subs	r2, #16
    cbbe:	d2f3      	bcs.n	cba8 <memcpy+0x5c>
    cbc0:	320c      	adds	r2, #12
    cbc2:	d305      	bcc.n	cbd0 <memcpy+0x84>
    cbc4:	f851 3b04 	ldr.w	r3, [r1], #4
    cbc8:	f840 3b04 	str.w	r3, [r0], #4
    cbcc:	3a04      	subs	r2, #4
    cbce:	d2f9      	bcs.n	cbc4 <memcpy+0x78>
    cbd0:	3204      	adds	r2, #4
    cbd2:	d008      	beq.n	cbe6 <memcpy+0x9a>
    cbd4:	07d2      	lsls	r2, r2, #31
    cbd6:	bf1c      	itt	ne
    cbd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cbdc:	f800 3b01 	strbne.w	r3, [r0], #1
    cbe0:	d301      	bcc.n	cbe6 <memcpy+0x9a>
    cbe2:	880b      	ldrh	r3, [r1, #0]
    cbe4:	8003      	strh	r3, [r0, #0]
    cbe6:	4660      	mov	r0, ip
    cbe8:	4770      	bx	lr
    cbea:	bf00      	nop
    cbec:	2a08      	cmp	r2, #8
    cbee:	d313      	bcc.n	cc18 <memcpy+0xcc>
    cbf0:	078b      	lsls	r3, r1, #30
    cbf2:	d0b1      	beq.n	cb58 <memcpy+0xc>
    cbf4:	f010 0303 	ands.w	r3, r0, #3
    cbf8:	d0ae      	beq.n	cb58 <memcpy+0xc>
    cbfa:	f1c3 0304 	rsb	r3, r3, #4
    cbfe:	1ad2      	subs	r2, r2, r3
    cc00:	07db      	lsls	r3, r3, #31
    cc02:	bf1c      	itt	ne
    cc04:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cc08:	f800 3b01 	strbne.w	r3, [r0], #1
    cc0c:	d3a4      	bcc.n	cb58 <memcpy+0xc>
    cc0e:	f831 3b02 	ldrh.w	r3, [r1], #2
    cc12:	f820 3b02 	strh.w	r3, [r0], #2
    cc16:	e79f      	b.n	cb58 <memcpy+0xc>
    cc18:	3a04      	subs	r2, #4
    cc1a:	d3d9      	bcc.n	cbd0 <memcpy+0x84>
    cc1c:	3a01      	subs	r2, #1
    cc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
    cc22:	f800 3b01 	strb.w	r3, [r0], #1
    cc26:	d2f9      	bcs.n	cc1c <memcpy+0xd0>
    cc28:	780b      	ldrb	r3, [r1, #0]
    cc2a:	7003      	strb	r3, [r0, #0]
    cc2c:	784b      	ldrb	r3, [r1, #1]
    cc2e:	7043      	strb	r3, [r0, #1]
    cc30:	788b      	ldrb	r3, [r1, #2]
    cc32:	7083      	strb	r3, [r0, #2]
    cc34:	4660      	mov	r0, ip
    cc36:	4770      	bx	lr

0000cc38 <strcmp>:
    cc38:	ea80 0c01 	eor.w	ip, r0, r1
    cc3c:	f01c 0f03 	tst.w	ip, #3
    cc40:	d137      	bne.n	ccb2 <strcmp+0x7a>
    cc42:	f010 0c03 	ands.w	ip, r0, #3
    cc46:	f020 0003 	bic.w	r0, r0, #3
    cc4a:	f021 0103 	bic.w	r1, r1, #3
    cc4e:	f850 2b04 	ldr.w	r2, [r0], #4
    cc52:	bf08      	it	eq
    cc54:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc58:	d00e      	beq.n	cc78 <strcmp+0x40>
    cc5a:	f08c 0c03 	eor.w	ip, ip, #3
    cc5e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    cc62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    cc66:	fa23 fc0c 	lsr.w	ip, r3, ip
    cc6a:	f851 3b04 	ldr.w	r3, [r1], #4
    cc6e:	ea42 020c 	orr.w	r2, r2, ip
    cc72:	ea43 030c 	orr.w	r3, r3, ip
    cc76:	bf00      	nop
    cc78:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cc7c:	429a      	cmp	r2, r3
    cc7e:	bf01      	itttt	eq
    cc80:	ea2c 0c02 	biceq.w	ip, ip, r2
    cc84:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
    cc88:	f850 2b04 	ldreq.w	r2, [r0], #4
    cc8c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc90:	d0f2      	beq.n	cc78 <strcmp+0x40>
    cc92:	ea4f 6002 	mov.w	r0, r2, lsl #24
    cc96:	ea4f 2212 	mov.w	r2, r2, lsr #8
    cc9a:	2801      	cmp	r0, #1
    cc9c:	bf28      	it	cs
    cc9e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
    cca2:	bf08      	it	eq
    cca4:	0a1b      	lsreq	r3, r3, #8
    cca6:	d0f4      	beq.n	cc92 <strcmp+0x5a>
    cca8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ccac:	0e00      	lsrs	r0, r0, #24
    ccae:	1ac0      	subs	r0, r0, r3
    ccb0:	4770      	bx	lr
    ccb2:	f010 0f03 	tst.w	r0, #3
    ccb6:	d00a      	beq.n	ccce <strcmp+0x96>
    ccb8:	f810 2b01 	ldrb.w	r2, [r0], #1
    ccbc:	f811 3b01 	ldrb.w	r3, [r1], #1
    ccc0:	2a01      	cmp	r2, #1
    ccc2:	bf28      	it	cs
    ccc4:	429a      	cmpcs	r2, r3
    ccc6:	d0f4      	beq.n	ccb2 <strcmp+0x7a>
    ccc8:	eba2 0003 	sub.w	r0, r2, r3
    cccc:	4770      	bx	lr
    ccce:	f84d 5d04 	str.w	r5, [sp, #-4]!
    ccd2:	f850 2b04 	ldr.w	r2, [r0], #4
    ccd6:	f001 0503 	and.w	r5, r1, #3
    ccda:	f021 0103 	bic.w	r1, r1, #3
    ccde:	f851 3b04 	ldr.w	r3, [r1], #4
    cce2:	2d02      	cmp	r5, #2
    cce4:	d026      	beq.n	cd34 <strcmp+0xfc>
    cce6:	d84d      	bhi.n	cd84 <strcmp+0x14c>
    cce8:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
    ccec:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
    ccf0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    ccf4:	ea2c 0c02 	bic.w	ip, ip, r2
    ccf8:	d10d      	bne.n	cd16 <strcmp+0xde>
    ccfa:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    ccfe:	bf08      	it	eq
    cd00:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd04:	d10a      	bne.n	cd1c <strcmp+0xe4>
    cd06:	ea85 0502 	eor.w	r5, r5, r2
    cd0a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
    cd0e:	d10c      	bne.n	cd2a <strcmp+0xf2>
    cd10:	f850 2b04 	ldr.w	r2, [r0], #4
    cd14:	e7e8      	b.n	cce8 <strcmp+0xb0>
    cd16:	ea4f 2313 	mov.w	r3, r3, lsr #8
    cd1a:	e05b      	b.n	cdd4 <strcmp+0x19c>
    cd1c:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
    cd20:	d154      	bne.n	cdcc <strcmp+0x194>
    cd22:	780b      	ldrb	r3, [r1, #0]
    cd24:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd28:	e054      	b.n	cdd4 <strcmp+0x19c>
    cd2a:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cd32:	e04f      	b.n	cdd4 <strcmp+0x19c>
    cd34:	ea4f 4502 	mov.w	r5, r2, lsl #16
    cd38:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd3c:	ea4f 4515 	mov.w	r5, r5, lsr #16
    cd40:	ea2c 0c02 	bic.w	ip, ip, r2
    cd44:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
    cd48:	d118      	bne.n	cd7c <strcmp+0x144>
    cd4a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd4e:	bf08      	it	eq
    cd50:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd54:	d107      	bne.n	cd66 <strcmp+0x12e>
    cd56:	ea85 0502 	eor.w	r5, r5, r2
    cd5a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
    cd5e:	d109      	bne.n	cd74 <strcmp+0x13c>
    cd60:	f850 2b04 	ldr.w	r2, [r0], #4
    cd64:	e7e6      	b.n	cd34 <strcmp+0xfc>
    cd66:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
    cd6a:	d12f      	bne.n	cdcc <strcmp+0x194>
    cd6c:	880b      	ldrh	r3, [r1, #0]
    cd6e:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd72:	e02f      	b.n	cdd4 <strcmp+0x19c>
    cd74:	ea4f 4303 	mov.w	r3, r3, lsl #16
    cd78:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd7c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cd80:	e028      	b.n	cdd4 <strcmp+0x19c>
    cd82:	bf00      	nop
    cd84:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    cd88:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
    cd8c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd90:	ea2c 0c02 	bic.w	ip, ip, r2
    cd94:	d10d      	bne.n	cdb2 <strcmp+0x17a>
    cd96:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd9a:	bf08      	it	eq
    cd9c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cda0:	d10a      	bne.n	cdb8 <strcmp+0x180>
    cda2:	ea85 0502 	eor.w	r5, r5, r2
    cda6:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
    cdaa:	d10a      	bne.n	cdc2 <strcmp+0x18a>
    cdac:	f850 2b04 	ldr.w	r2, [r0], #4
    cdb0:	e7e8      	b.n	cd84 <strcmp+0x14c>
    cdb2:	ea4f 6313 	mov.w	r3, r3, lsr #24
    cdb6:	e00d      	b.n	cdd4 <strcmp+0x19c>
    cdb8:	f012 0fff 	tst.w	r2, #255	; 0xff
    cdbc:	d006      	beq.n	cdcc <strcmp+0x194>
    cdbe:	f851 3b04 	ldr.w	r3, [r1], #4
    cdc2:	ea4f 2512 	mov.w	r5, r2, lsr #8
    cdc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdca:	e003      	b.n	cdd4 <strcmp+0x19c>
    cdcc:	f04f 0000 	mov.w	r0, #0
    cdd0:	bc20      	pop	{r5}
    cdd2:	4770      	bx	lr
    cdd4:	f005 02ff 	and.w	r2, r5, #255	; 0xff
    cdd8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cddc:	2801      	cmp	r0, #1
    cdde:	bf28      	it	cs
    cde0:	4290      	cmpcs	r0, r2
    cde2:	bf04      	itt	eq
    cde4:	0a2d      	lsreq	r5, r5, #8
    cde6:	0a1b      	lsreq	r3, r3, #8
    cde8:	d0f4      	beq.n	cdd4 <strcmp+0x19c>
    cdea:	eba2 0000 	sub.w	r0, r2, r0
    cdee:	bc20      	pop	{r5}
    cdf0:	4770      	bx	lr
    cdf2:	bf00      	nop

0000cdf4 <__aeabi_dmul>:
    cdf4:	b570      	push	{r4, r5, r6, lr}
    cdf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cdfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cdfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ce02:	bf1d      	ittte	ne
    ce04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ce08:	ea94 0f0c 	teqne	r4, ip
    ce0c:	ea95 0f0c 	teqne	r5, ip
    ce10:	f000 f8de 	bleq	cfd0 <__aeabi_dmul+0x1dc>
    ce14:	442c      	add	r4, r5
    ce16:	ea81 0603 	eor.w	r6, r1, r3
    ce1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ce1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ce22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ce26:	bf18      	it	ne
    ce28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ce2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ce30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ce34:	d038      	beq.n	cea8 <__aeabi_dmul+0xb4>
    ce36:	fba0 ce02 	umull	ip, lr, r0, r2
    ce3a:	f04f 0500 	mov.w	r5, #0
    ce3e:	fbe1 e502 	umlal	lr, r5, r1, r2
    ce42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ce46:	fbe0 e503 	umlal	lr, r5, r0, r3
    ce4a:	f04f 0600 	mov.w	r6, #0
    ce4e:	fbe1 5603 	umlal	r5, r6, r1, r3
    ce52:	f09c 0f00 	teq	ip, #0
    ce56:	bf18      	it	ne
    ce58:	f04e 0e01 	orrne.w	lr, lr, #1
    ce5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ce60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ce64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ce68:	d204      	bcs.n	ce74 <__aeabi_dmul+0x80>
    ce6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ce6e:	416d      	adcs	r5, r5
    ce70:	eb46 0606 	adc.w	r6, r6, r6
    ce74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    ce78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    ce7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    ce80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    ce84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    ce88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ce8c:	bf88      	it	hi
    ce8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ce92:	d81e      	bhi.n	ced2 <__aeabi_dmul+0xde>
    ce94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    ce98:	bf08      	it	eq
    ce9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    ce9e:	f150 0000 	adcs.w	r0, r0, #0
    cea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cea6:	bd70      	pop	{r4, r5, r6, pc}
    cea8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    ceac:	ea46 0101 	orr.w	r1, r6, r1
    ceb0:	ea40 0002 	orr.w	r0, r0, r2
    ceb4:	ea81 0103 	eor.w	r1, r1, r3
    ceb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cebc:	bfc2      	ittt	gt
    cebe:	ebd4 050c 	rsbsgt	r5, r4, ip
    cec2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cec6:	bd70      	popgt	{r4, r5, r6, pc}
    cec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cecc:	f04f 0e00 	mov.w	lr, #0
    ced0:	3c01      	subs	r4, #1
    ced2:	f300 80ab 	bgt.w	d02c <__aeabi_dmul+0x238>
    ced6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    ceda:	bfde      	ittt	le
    cedc:	2000      	movle	r0, #0
    cede:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cee2:	bd70      	pople	{r4, r5, r6, pc}
    cee4:	f1c4 0400 	rsb	r4, r4, #0
    cee8:	3c20      	subs	r4, #32
    ceea:	da35      	bge.n	cf58 <__aeabi_dmul+0x164>
    ceec:	340c      	adds	r4, #12
    ceee:	dc1b      	bgt.n	cf28 <__aeabi_dmul+0x134>
    cef0:	f104 0414 	add.w	r4, r4, #20
    cef4:	f1c4 0520 	rsb	r5, r4, #32
    cef8:	fa00 f305 	lsl.w	r3, r0, r5
    cefc:	fa20 f004 	lsr.w	r0, r0, r4
    cf00:	fa01 f205 	lsl.w	r2, r1, r5
    cf04:	ea40 0002 	orr.w	r0, r0, r2
    cf08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cf0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cf10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf14:	fa21 f604 	lsr.w	r6, r1, r4
    cf18:	eb42 0106 	adc.w	r1, r2, r6
    cf1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf20:	bf08      	it	eq
    cf22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf26:	bd70      	pop	{r4, r5, r6, pc}
    cf28:	f1c4 040c 	rsb	r4, r4, #12
    cf2c:	f1c4 0520 	rsb	r5, r4, #32
    cf30:	fa00 f304 	lsl.w	r3, r0, r4
    cf34:	fa20 f005 	lsr.w	r0, r0, r5
    cf38:	fa01 f204 	lsl.w	r2, r1, r4
    cf3c:	ea40 0002 	orr.w	r0, r0, r2
    cf40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf48:	f141 0100 	adc.w	r1, r1, #0
    cf4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf50:	bf08      	it	eq
    cf52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf56:	bd70      	pop	{r4, r5, r6, pc}
    cf58:	f1c4 0520 	rsb	r5, r4, #32
    cf5c:	fa00 f205 	lsl.w	r2, r0, r5
    cf60:	ea4e 0e02 	orr.w	lr, lr, r2
    cf64:	fa20 f304 	lsr.w	r3, r0, r4
    cf68:	fa01 f205 	lsl.w	r2, r1, r5
    cf6c:	ea43 0302 	orr.w	r3, r3, r2
    cf70:	fa21 f004 	lsr.w	r0, r1, r4
    cf74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf78:	fa21 f204 	lsr.w	r2, r1, r4
    cf7c:	ea20 0002 	bic.w	r0, r0, r2
    cf80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cf84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf88:	bf08      	it	eq
    cf8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf8e:	bd70      	pop	{r4, r5, r6, pc}
    cf90:	f094 0f00 	teq	r4, #0
    cf94:	d10f      	bne.n	cfb6 <__aeabi_dmul+0x1c2>
    cf96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cf9a:	0040      	lsls	r0, r0, #1
    cf9c:	eb41 0101 	adc.w	r1, r1, r1
    cfa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cfa4:	bf08      	it	eq
    cfa6:	3c01      	subeq	r4, #1
    cfa8:	d0f7      	beq.n	cf9a <__aeabi_dmul+0x1a6>
    cfaa:	ea41 0106 	orr.w	r1, r1, r6
    cfae:	f095 0f00 	teq	r5, #0
    cfb2:	bf18      	it	ne
    cfb4:	4770      	bxne	lr
    cfb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cfba:	0052      	lsls	r2, r2, #1
    cfbc:	eb43 0303 	adc.w	r3, r3, r3
    cfc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cfc4:	bf08      	it	eq
    cfc6:	3d01      	subeq	r5, #1
    cfc8:	d0f7      	beq.n	cfba <__aeabi_dmul+0x1c6>
    cfca:	ea43 0306 	orr.w	r3, r3, r6
    cfce:	4770      	bx	lr
    cfd0:	ea94 0f0c 	teq	r4, ip
    cfd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cfd8:	bf18      	it	ne
    cfda:	ea95 0f0c 	teqne	r5, ip
    cfde:	d00c      	beq.n	cffa <__aeabi_dmul+0x206>
    cfe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cfe4:	bf18      	it	ne
    cfe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cfea:	d1d1      	bne.n	cf90 <__aeabi_dmul+0x19c>
    cfec:	ea81 0103 	eor.w	r1, r1, r3
    cff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cff4:	f04f 0000 	mov.w	r0, #0
    cff8:	bd70      	pop	{r4, r5, r6, pc}
    cffa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cffe:	bf06      	itte	eq
    d000:	4610      	moveq	r0, r2
    d002:	4619      	moveq	r1, r3
    d004:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d008:	d019      	beq.n	d03e <__aeabi_dmul+0x24a>
    d00a:	ea94 0f0c 	teq	r4, ip
    d00e:	d102      	bne.n	d016 <__aeabi_dmul+0x222>
    d010:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d014:	d113      	bne.n	d03e <__aeabi_dmul+0x24a>
    d016:	ea95 0f0c 	teq	r5, ip
    d01a:	d105      	bne.n	d028 <__aeabi_dmul+0x234>
    d01c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d020:	bf1c      	itt	ne
    d022:	4610      	movne	r0, r2
    d024:	4619      	movne	r1, r3
    d026:	d10a      	bne.n	d03e <__aeabi_dmul+0x24a>
    d028:	ea81 0103 	eor.w	r1, r1, r3
    d02c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d030:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d038:	f04f 0000 	mov.w	r0, #0
    d03c:	bd70      	pop	{r4, r5, r6, pc}
    d03e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d042:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d046:	bd70      	pop	{r4, r5, r6, pc}

0000d048 <__aeabi_ddiv>:
    d048:	b570      	push	{r4, r5, r6, lr}
    d04a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d04e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d052:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d056:	bf1d      	ittte	ne
    d058:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d05c:	ea94 0f0c 	teqne	r4, ip
    d060:	ea95 0f0c 	teqne	r5, ip
    d064:	f000 f8a7 	bleq	d1b6 <__aeabi_ddiv+0x16e>
    d068:	eba4 0405 	sub.w	r4, r4, r5
    d06c:	ea81 0e03 	eor.w	lr, r1, r3
    d070:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d074:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d078:	f000 8088 	beq.w	d18c <__aeabi_ddiv+0x144>
    d07c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d080:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d084:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d088:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d08c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d090:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d094:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d098:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d09c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d0a0:	429d      	cmp	r5, r3
    d0a2:	bf08      	it	eq
    d0a4:	4296      	cmpeq	r6, r2
    d0a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d0aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d0ae:	d202      	bcs.n	d0b6 <__aeabi_ddiv+0x6e>
    d0b0:	085b      	lsrs	r3, r3, #1
    d0b2:	ea4f 0232 	mov.w	r2, r2, rrx
    d0b6:	1ab6      	subs	r6, r6, r2
    d0b8:	eb65 0503 	sbc.w	r5, r5, r3
    d0bc:	085b      	lsrs	r3, r3, #1
    d0be:	ea4f 0232 	mov.w	r2, r2, rrx
    d0c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d0c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d0ca:	ebb6 0e02 	subs.w	lr, r6, r2
    d0ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0d2:	bf22      	ittt	cs
    d0d4:	1ab6      	subcs	r6, r6, r2
    d0d6:	4675      	movcs	r5, lr
    d0d8:	ea40 000c 	orrcs.w	r0, r0, ip
    d0dc:	085b      	lsrs	r3, r3, #1
    d0de:	ea4f 0232 	mov.w	r2, r2, rrx
    d0e2:	ebb6 0e02 	subs.w	lr, r6, r2
    d0e6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0ea:	bf22      	ittt	cs
    d0ec:	1ab6      	subcs	r6, r6, r2
    d0ee:	4675      	movcs	r5, lr
    d0f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d0f4:	085b      	lsrs	r3, r3, #1
    d0f6:	ea4f 0232 	mov.w	r2, r2, rrx
    d0fa:	ebb6 0e02 	subs.w	lr, r6, r2
    d0fe:	eb75 0e03 	sbcs.w	lr, r5, r3
    d102:	bf22      	ittt	cs
    d104:	1ab6      	subcs	r6, r6, r2
    d106:	4675      	movcs	r5, lr
    d108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d10c:	085b      	lsrs	r3, r3, #1
    d10e:	ea4f 0232 	mov.w	r2, r2, rrx
    d112:	ebb6 0e02 	subs.w	lr, r6, r2
    d116:	eb75 0e03 	sbcs.w	lr, r5, r3
    d11a:	bf22      	ittt	cs
    d11c:	1ab6      	subcs	r6, r6, r2
    d11e:	4675      	movcs	r5, lr
    d120:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d124:	ea55 0e06 	orrs.w	lr, r5, r6
    d128:	d018      	beq.n	d15c <__aeabi_ddiv+0x114>
    d12a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d12e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d132:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d136:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d13a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d13e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d142:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d146:	d1c0      	bne.n	d0ca <__aeabi_ddiv+0x82>
    d148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d14c:	d10b      	bne.n	d166 <__aeabi_ddiv+0x11e>
    d14e:	ea41 0100 	orr.w	r1, r1, r0
    d152:	f04f 0000 	mov.w	r0, #0
    d156:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d15a:	e7b6      	b.n	d0ca <__aeabi_ddiv+0x82>
    d15c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d160:	bf04      	itt	eq
    d162:	4301      	orreq	r1, r0
    d164:	2000      	moveq	r0, #0
    d166:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d16a:	bf88      	it	hi
    d16c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d170:	f63f aeaf 	bhi.w	ced2 <__aeabi_dmul+0xde>
    d174:	ebb5 0c03 	subs.w	ip, r5, r3
    d178:	bf04      	itt	eq
    d17a:	ebb6 0c02 	subseq.w	ip, r6, r2
    d17e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d182:	f150 0000 	adcs.w	r0, r0, #0
    d186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d18a:	bd70      	pop	{r4, r5, r6, pc}
    d18c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d190:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d194:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d198:	bfc2      	ittt	gt
    d19a:	ebd4 050c 	rsbsgt	r5, r4, ip
    d19e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d1a2:	bd70      	popgt	{r4, r5, r6, pc}
    d1a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d1a8:	f04f 0e00 	mov.w	lr, #0
    d1ac:	3c01      	subs	r4, #1
    d1ae:	e690      	b.n	ced2 <__aeabi_dmul+0xde>
    d1b0:	ea45 0e06 	orr.w	lr, r5, r6
    d1b4:	e68d      	b.n	ced2 <__aeabi_dmul+0xde>
    d1b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d1ba:	ea94 0f0c 	teq	r4, ip
    d1be:	bf08      	it	eq
    d1c0:	ea95 0f0c 	teqeq	r5, ip
    d1c4:	f43f af3b 	beq.w	d03e <__aeabi_dmul+0x24a>
    d1c8:	ea94 0f0c 	teq	r4, ip
    d1cc:	d10a      	bne.n	d1e4 <__aeabi_ddiv+0x19c>
    d1ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d1d2:	f47f af34 	bne.w	d03e <__aeabi_dmul+0x24a>
    d1d6:	ea95 0f0c 	teq	r5, ip
    d1da:	f47f af25 	bne.w	d028 <__aeabi_dmul+0x234>
    d1de:	4610      	mov	r0, r2
    d1e0:	4619      	mov	r1, r3
    d1e2:	e72c      	b.n	d03e <__aeabi_dmul+0x24a>
    d1e4:	ea95 0f0c 	teq	r5, ip
    d1e8:	d106      	bne.n	d1f8 <__aeabi_ddiv+0x1b0>
    d1ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d1ee:	f43f aefd 	beq.w	cfec <__aeabi_dmul+0x1f8>
    d1f2:	4610      	mov	r0, r2
    d1f4:	4619      	mov	r1, r3
    d1f6:	e722      	b.n	d03e <__aeabi_dmul+0x24a>
    d1f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d1fc:	bf18      	it	ne
    d1fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d202:	f47f aec5 	bne.w	cf90 <__aeabi_dmul+0x19c>
    d206:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d20a:	f47f af0d 	bne.w	d028 <__aeabi_dmul+0x234>
    d20e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d212:	f47f aeeb 	bne.w	cfec <__aeabi_dmul+0x1f8>
    d216:	e712      	b.n	d03e <__aeabi_dmul+0x24a>

0000d218 <__aeabi_dcmpun>:
    d218:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d21c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d220:	d102      	bne.n	d228 <__aeabi_dcmpun+0x10>
    d222:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d226:	d10a      	bne.n	d23e <__aeabi_dcmpun+0x26>
    d228:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d22c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d230:	d102      	bne.n	d238 <__aeabi_dcmpun+0x20>
    d232:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d236:	d102      	bne.n	d23e <__aeabi_dcmpun+0x26>
    d238:	f04f 0000 	mov.w	r0, #0
    d23c:	4770      	bx	lr
    d23e:	f04f 0001 	mov.w	r0, #1
    d242:	4770      	bx	lr

0000d244 <__aeabi_d2uiz>:
    d244:	004a      	lsls	r2, r1, #1
    d246:	d211      	bcs.n	d26c <__aeabi_d2uiz+0x28>
    d248:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d24c:	d211      	bcs.n	d272 <__aeabi_d2uiz+0x2e>
    d24e:	d50d      	bpl.n	d26c <__aeabi_d2uiz+0x28>
    d250:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d254:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d258:	d40e      	bmi.n	d278 <__aeabi_d2uiz+0x34>
    d25a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d25e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d262:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d266:	fa23 f002 	lsr.w	r0, r3, r2
    d26a:	4770      	bx	lr
    d26c:	f04f 0000 	mov.w	r0, #0
    d270:	4770      	bx	lr
    d272:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d276:	d102      	bne.n	d27e <__aeabi_d2uiz+0x3a>
    d278:	f04f 30ff 	mov.w	r0, #4294967295
    d27c:	4770      	bx	lr
    d27e:	f04f 0000 	mov.w	r0, #0
    d282:	4770      	bx	lr

0000d284 <__aeabi_d2lz>:
    d284:	b538      	push	{r3, r4, r5, lr}
    d286:	2200      	movs	r2, #0
    d288:	2300      	movs	r3, #0
    d28a:	4604      	mov	r4, r0
    d28c:	460d      	mov	r5, r1
    d28e:	f7ff f9f3 	bl	c678 <__aeabi_dcmplt>
    d292:	b928      	cbnz	r0, d2a0 <__aeabi_d2lz+0x1c>
    d294:	4620      	mov	r0, r4
    d296:	4629      	mov	r1, r5
    d298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d29c:	f000 b80a 	b.w	d2b4 <__aeabi_d2ulz>
    d2a0:	4620      	mov	r0, r4
    d2a2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    d2a6:	f000 f805 	bl	d2b4 <__aeabi_d2ulz>
    d2aa:	4240      	negs	r0, r0
    d2ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d2b0:	bd38      	pop	{r3, r4, r5, pc}
    d2b2:	bf00      	nop

0000d2b4 <__aeabi_d2ulz>:
    d2b4:	b5d0      	push	{r4, r6, r7, lr}
    d2b6:	2200      	movs	r2, #0
    d2b8:	4b0b      	ldr	r3, [pc, #44]	; (d2e8 <__aeabi_d2ulz+0x34>)
    d2ba:	4606      	mov	r6, r0
    d2bc:	460f      	mov	r7, r1
    d2be:	f7ff fd99 	bl	cdf4 <__aeabi_dmul>
    d2c2:	f7ff ffbf 	bl	d244 <__aeabi_d2uiz>
    d2c6:	4604      	mov	r4, r0
    d2c8:	f7ff f8fc 	bl	c4c4 <__aeabi_ui2d>
    d2cc:	2200      	movs	r2, #0
    d2ce:	4b07      	ldr	r3, [pc, #28]	; (d2ec <__aeabi_d2ulz+0x38>)
    d2d0:	f7ff fd90 	bl	cdf4 <__aeabi_dmul>
    d2d4:	4602      	mov	r2, r0
    d2d6:	460b      	mov	r3, r1
    d2d8:	4630      	mov	r0, r6
    d2da:	4639      	mov	r1, r7
    d2dc:	f7fe ffb4 	bl	c248 <__aeabi_dsub>
    d2e0:	f7ff ffb0 	bl	d244 <__aeabi_d2uiz>
    d2e4:	4621      	mov	r1, r4
    d2e6:	bdd0      	pop	{r4, r6, r7, pc}
    d2e8:	3df00000 	.word	0x3df00000
    d2ec:	41f00000 	.word	0x41f00000

0000d2f0 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
    d2f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    d2f4:	4604      	mov	r4, r0
    d2f6:	b09a      	sub	sp, #104	; 0x68
    d2f8:	460f      	mov	r7, r1
    d2fa:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
    d2fc:	2100      	movs	r1, #0
    d2fe:	2230      	movs	r2, #48	; 0x30
    d300:	a802      	add	r0, sp, #8
    d302:	f019 f899 	bl	26438 <memset>
	int ret = 0;

	if (!ctx || !time) {
    d306:	2c00      	cmp	r4, #0
    d308:	f000 8087 	beq.w	d41a <sntp_query+0x12a>
    d30c:	2e00      	cmp	r6, #0
    d30e:	f000 8084 	beq.w	d41a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
    d312:	231b      	movs	r3, #27
    d314:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    d318:	f021 fc42 	bl	2eba0 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d31c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d320:	2500      	movs	r5, #0
    d322:	fba0 bc03 	umull	fp, ip, r0, r3
    d326:	fb03 cc01 	mla	ip, r3, r1, ip
    d32a:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
    d32e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d332:	2300      	movs	r3, #0
    d334:	4629      	mov	r1, r5
    d336:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
    d33a:	f7ff fa8d 	bl	c858 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d33e:	4a3c      	ldr	r2, [pc, #240]	; (d430 <sntp_query+0x140>)
    d340:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d342:	0a13      	lsrs	r3, r2, #8
    d344:	0211      	lsls	r1, r2, #8
    d346:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d34a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d34e:	430b      	orrs	r3, r1
    d350:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    d354:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
    d358:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d35a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d35c:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    d35e:	2230      	movs	r2, #48	; 0x30
    d360:	462b      	mov	r3, r5
    d362:	e9cd 5500 	strd	r5, r5, [sp]
    d366:	a902      	add	r1, sp, #8
    d368:	f01f fdbd 	bl	2cee6 <z_impl_zsock_sendto>
	if (ret < 0) {
    d36c:	2800      	cmp	r0, #0
    d36e:	db0f      	blt.n	d390 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
    d370:	4629      	mov	r1, r5
    d372:	2230      	movs	r2, #48	; 0x30
    d374:	a80e      	add	r0, sp, #56	; 0x38
    d376:	f019 f85f 	bl	26438 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
    d37a:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    d37c:	463a      	mov	r2, r7
    d37e:	4620      	mov	r0, r4
    d380:	f006 fbaa 	bl	13ad8 <z_impl_zsock_poll>
	if (status < 0) {
    d384:	42a8      	cmp	r0, r5
    d386:	da06      	bge.n	d396 <sntp_query+0xa6>
		return -errno;
    d388:	f01f fec1 	bl	2d10e <__errno>
    d38c:	6800      	ldr	r0, [r0, #0]
    d38e:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
    d390:	b01a      	add	sp, #104	; 0x68
    d392:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
    d396:	d037      	beq.n	d408 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
    d398:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    d39a:	2230      	movs	r2, #48	; 0x30
    d39c:	462b      	mov	r3, r5
    d39e:	e9cd 5500 	strd	r5, r5, [sp]
    d3a2:	a90e      	add	r1, sp, #56	; 0x38
    d3a4:	f01f fdd2 	bl	2cf4c <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
    d3a8:	2800      	cmp	r0, #0
    d3aa:	dbed      	blt.n	d388 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
    d3ac:	2830      	cmp	r0, #48	; 0x30
    d3ae:	d12e      	bne.n	d40e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
    d3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d3b2:	6922      	ldr	r2, [r4, #16]
    d3b4:	ba1b      	rev	r3, r3
    d3b6:	429a      	cmp	r2, r3
    d3b8:	d002      	beq.n	d3c0 <sntp_query+0xd0>
		return -EINVAL;
    d3ba:	f06f 0015 	mvn.w	r0, #21
    d3be:	e7e7      	b.n	d390 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
    d3c0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    d3c4:	f003 0307 	and.w	r3, r3, #7
    d3c8:	2b04      	cmp	r3, #4
    d3ca:	d1f6      	bne.n	d3ba <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
    d3cc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    d3d0:	b303      	cbz	r3, d414 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
    d3d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d3d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d3d6:	ba1b      	rev	r3, r3
    d3d8:	ba12      	rev	r2, r2
    d3da:	ea53 0102 	orrs.w	r1, r3, r2
    d3de:	d0ec      	beq.n	d3ba <sntp_query+0xca>
	if (ts & 0x80000000) {
    d3e0:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
    d3e2:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
    d3e4:	da0c      	bge.n	d400 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
    d3e6:	4a13      	ldr	r2, [pc, #76]	; (d434 <sntp_query+0x144>)
    d3e8:	4293      	cmp	r3, r2
    d3ea:	d9e6      	bls.n	d3ba <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
    d3ec:	a10c      	add	r1, pc, #48	; (adr r1, d420 <sntp_query+0x130>)
    d3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d3f2:	18c0      	adds	r0, r0, r3
    d3f4:	f141 0100 	adc.w	r1, r1, #0
    d3f8:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
    d3fc:	2000      	movs	r0, #0
    d3fe:	e7c7      	b.n	d390 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d400:	a109      	add	r1, pc, #36	; (adr r1, d428 <sntp_query+0x138>)
    d402:	e9d1 0100 	ldrd	r0, r1, [r1]
    d406:	e7f4      	b.n	d3f2 <sntp_query+0x102>
		return -ETIMEDOUT;
    d408:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d40c:	e7c0      	b.n	d390 <sntp_query+0xa0>
		return -EMSGSIZE;
    d40e:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d412:	e7bd      	b.n	d390 <sntp_query+0xa0>
		return -EBUSY;
    d414:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
    d418:	e7ba      	b.n	d390 <sntp_query+0xa0>
		return -EFAULT;
    d41a:	f06f 000d 	mvn.w	r0, #13
    d41e:	e7b7      	b.n	d390 <sntp_query+0xa0>
    d420:	7c558180 	.word	0x7c558180
    d424:	ffffffff 	.word	0xffffffff
    d428:	7c558180 	.word	0x7c558180
    d42c:	00000000 	.word	0x00000000
    d430:	83aa7e80 	.word	0x83aa7e80
    d434:	83aa7e7f 	.word	0x83aa7e7f

0000d438 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d43c:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    d440:	460e      	mov	r6, r1
{
    d442:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
    d444:	b971      	cbnz	r1, d464 <at_handler+0x2c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d446:	49b2      	ldr	r1, [pc, #712]	; (d710 <at_handler+0x2d8>)
    d448:	4bb2      	ldr	r3, [pc, #712]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Response buffer is NULL-pointer");
    d44a:	48b3      	ldr	r0, [pc, #716]	; (d718 <at_handler+0x2e0>)
    d44c:	1ac9      	subs	r1, r1, r3
    d44e:	08c9      	lsrs	r1, r1, #3
    d450:	0189      	lsls	r1, r1, #6
    d452:	f041 0101 	orr.w	r1, r1, #1
    d456:	f01f fa59 	bl	2c90c <log_0>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    d45a:	b00c      	add	sp, #48	; 0x30
    d45c:	ecbd 8b02 	vpop	{d8}
    d460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d464:	2700      	movs	r7, #0
    d466:	4cad      	ldr	r4, [pc, #692]	; (d71c <at_handler+0x2e4>)
		if (strncmp(at_notifs[i], notif,
    d468:	f854 5b04 	ldr.w	r5, [r4], #4
    d46c:	4628      	mov	r0, r5
    d46e:	f019 fbf3 	bl	26c58 <strlen>
    d472:	4631      	mov	r1, r6
    d474:	4602      	mov	r2, r0
    d476:	4628      	mov	r0, r5
    d478:	f019 fc1c 	bl	26cb4 <strncmp>
    d47c:	4605      	mov	r5, r0
    d47e:	bb60      	cbnz	r0, d4da <at_handler+0xa2>
	switch (notif_type) {
    d480:	2f01      	cmp	r7, #1
			*type = i;
    d482:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    d484:	f000 8107 	beq.w	d696 <at_handler+0x25e>
    d488:	2b02      	cmp	r3, #2
    d48a:	f000 818d 	beq.w	d7a8 <at_handler+0x370>
	size_t len = sizeof(str_buf) - 1;
    d48e:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d492:	210a      	movs	r1, #10
    d494:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    d496:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d49a:	f021 f902 	bl	2e6a2 <at_params_list_init>
	if (err) {
    d49e:	4604      	mov	r4, r0
    d4a0:	b1f8      	cbz	r0, d4e2 <at_handler+0xaa>
    d4a2:	4a9b      	ldr	r2, [pc, #620]	; (d710 <at_handler+0x2d8>)
    d4a4:	4b9b      	ldr	r3, [pc, #620]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d4a6:	4601      	mov	r1, r0
    d4a8:	1ad2      	subs	r2, r2, r3
    d4aa:	08d2      	lsrs	r2, r2, #3
    d4ac:	0192      	lsls	r2, r2, #6
    d4ae:	489c      	ldr	r0, [pc, #624]	; (d720 <at_handler+0x2e8>)
    d4b0:	f042 0201 	orr.w	r2, r2, #1
    d4b4:	f01f fa39 	bl	2c92a <log_1>
    d4b8:	4b96      	ldr	r3, [pc, #600]	; (d714 <at_handler+0x2dc>)
    d4ba:	4d95      	ldr	r5, [pc, #596]	; (d710 <at_handler+0x2d8>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    d4bc:	4630      	mov	r0, r6
    d4be:	1aed      	subs	r5, r5, r3
    d4c0:	f005 fd88 	bl	12fd4 <log_strdup>
    d4c4:	08ed      	lsrs	r5, r5, #3
    d4c6:	01ad      	lsls	r5, r5, #6
    d4c8:	f045 0501 	orr.w	r5, r5, #1
    d4cc:	4602      	mov	r2, r0
    d4ce:	462b      	mov	r3, r5
    d4d0:	4621      	mov	r1, r4
    d4d2:	4894      	ldr	r0, [pc, #592]	; (d724 <at_handler+0x2ec>)
    d4d4:	f01f fa40 	bl	2c958 <log_2>
			return;
    d4d8:	e7bf      	b.n	d45a <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d4da:	3701      	adds	r7, #1
    d4dc:	2f03      	cmp	r7, #3
    d4de:	d1c3      	bne.n	d468 <at_handler+0x30>
    d4e0:	e7bb      	b.n	d45a <at_handler+0x22>
	err = at_parser_params_from_str(notification,
    d4e2:	4601      	mov	r1, r0
    d4e4:	aa07      	add	r2, sp, #28
    d4e6:	4630      	mov	r0, r6
    d4e8:	f021 f8d8 	bl	2e69c <at_parser_params_from_str>
	if (err) {
    d4ec:	4604      	mov	r4, r0
    d4ee:	2800      	cmp	r0, #0
    d4f0:	d05c      	beq.n	d5ac <at_handler+0x174>
    d4f2:	4a87      	ldr	r2, [pc, #540]	; (d710 <at_handler+0x2d8>)
    d4f4:	4b87      	ldr	r3, [pc, #540]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    d4f6:	4601      	mov	r1, r0
    d4f8:	1ad2      	subs	r2, r2, r3
    d4fa:	08d2      	lsrs	r2, r2, #3
    d4fc:	0192      	lsls	r2, r2, #6
    d4fe:	488a      	ldr	r0, [pc, #552]	; (d728 <at_handler+0x2f0>)
    d500:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get registration status, error: %d", err);
    d504:	f01f fa11 	bl	2c92a <log_1>
	at_params_list_free(&resp_list);
    d508:	a807      	add	r0, sp, #28
    d50a:	f021 f8dd 	bl	2e6c8 <at_params_list_free>
		if (err) {
    d50e:	2c00      	cmp	r4, #0
    d510:	d1d2      	bne.n	d4b8 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d512:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d516:	2b01      	cmp	r3, #1
    d518:	d102      	bne.n	d520 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d51a:	4884      	ldr	r0, [pc, #528]	; (d72c <at_handler+0x2f4>)
    d51c:	f017 f9f2 	bl	24904 <z_impl_k_sem_give>
		if (!evt_handler) {
    d520:	4c83      	ldr	r4, [pc, #524]	; (d730 <at_handler+0x2f8>)
    d522:	6823      	ldr	r3, [r4, #0]
    d524:	2b00      	cmp	r3, #0
    d526:	d098      	beq.n	d45a <at_handler+0x22>
		if (reg_status != prev_reg_status) {
    d528:	4a82      	ldr	r2, [pc, #520]	; (d734 <at_handler+0x2fc>)
    d52a:	7811      	ldrb	r1, [r2, #0]
    d52c:	42a9      	cmp	r1, r5
    d52e:	d007      	beq.n	d540 <at_handler+0x108>
			prev_reg_status = reg_status;
    d530:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d532:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d534:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d538:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    d53c:	a809      	add	r0, sp, #36	; 0x24
    d53e:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d540:	4e7d      	ldr	r6, [pc, #500]	; (d738 <at_handler+0x300>)
    d542:	ad03      	add	r5, sp, #12
    d544:	2208      	movs	r2, #8
    d546:	4631      	mov	r1, r6
    d548:	4628      	mov	r0, r5
    d54a:	f018 ff47 	bl	263dc <memcmp>
    d54e:	b160      	cbz	r0, d56a <at_handler+0x132>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d550:	e895 0003 	ldmia.w	r5, {r0, r1}
    d554:	2304      	movs	r3, #4
    d556:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d55a:	ab0c      	add	r3, sp, #48	; 0x30
    d55c:	e903 0003 	stmdb	r3, {r0, r1}
    d560:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d564:	6823      	ldr	r3, [r4, #0]
    d566:	a809      	add	r0, sp, #36	; 0x24
    d568:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d56a:	4e74      	ldr	r6, [pc, #464]	; (d73c <at_handler+0x304>)
    d56c:	ad05      	add	r5, sp, #20
    d56e:	2208      	movs	r2, #8
    d570:	4631      	mov	r1, r6
    d572:	4628      	mov	r0, r5
    d574:	f018 ff32 	bl	263dc <memcmp>
    d578:	b160      	cbz	r0, d594 <at_handler+0x15c>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d57a:	e895 0003 	ldmia.w	r5, {r0, r1}
    d57e:	2301      	movs	r3, #1
    d580:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    d584:	ab0c      	add	r3, sp, #48	; 0x30
    d586:	e903 0003 	stmdb	r3, {r0, r1}
    d58a:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d58e:	6823      	ldr	r3, [r4, #0]
    d590:	a809      	add	r0, sp, #36	; 0x24
    d592:	4798      	blx	r3
	bool notify = false;
    d594:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    d596:	4a66      	ldr	r2, [pc, #408]	; (d730 <at_handler+0x2f8>)
    d598:	6812      	ldr	r2, [r2, #0]
    d59a:	2a00      	cmp	r2, #0
    d59c:	f43f af5d 	beq.w	d45a <at_handler+0x22>
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	f43f af5a 	beq.w	d45a <at_handler+0x22>
		evt_handler(&evt);
    d5a6:	a809      	add	r0, sp, #36	; 0x24
    d5a8:	4790      	blx	r2
    d5aa:	e756      	b.n	d45a <at_handler+0x22>
	err = at_params_int_get(&resp_list,
    d5ac:	2101      	movs	r1, #1
    d5ae:	aa01      	add	r2, sp, #4
    d5b0:	a807      	add	r0, sp, #28
    d5b2:	f021 f937 	bl	2e824 <at_params_int_get>
	if (err) {
    d5b6:	4604      	mov	r4, r0
    d5b8:	b148      	cbz	r0, d5ce <at_handler+0x196>
    d5ba:	4a55      	ldr	r2, [pc, #340]	; (d710 <at_handler+0x2d8>)
    d5bc:	4b55      	ldr	r3, [pc, #340]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not get registration status, error: %d", err);
    d5be:	4601      	mov	r1, r0
    d5c0:	1ad2      	subs	r2, r2, r3
    d5c2:	08d2      	lsrs	r2, r2, #3
    d5c4:	0192      	lsls	r2, r2, #6
    d5c6:	485e      	ldr	r0, [pc, #376]	; (d740 <at_handler+0x308>)
    d5c8:	f042 0201 	orr.w	r2, r2, #1
    d5cc:	e79a      	b.n	d504 <at_handler+0xcc>
	*reg_status = status;
    d5ce:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
    d5d2:	2d5a      	cmp	r5, #90	; 0x5a
    d5d4:	d047      	beq.n	d666 <at_handler+0x22e>
		err = at_params_string_get(&resp_list,
    d5d6:	2102      	movs	r1, #2
    d5d8:	ab02      	add	r3, sp, #8
    d5da:	aa09      	add	r2, sp, #36	; 0x24
    d5dc:	a807      	add	r0, sp, #28
    d5de:	f021 f938 	bl	2e852 <at_params_string_get>
		if (err) {
    d5e2:	4607      	mov	r7, r0
    d5e4:	b160      	cbz	r0, d600 <at_handler+0x1c8>
    d5e6:	4a4a      	ldr	r2, [pc, #296]	; (d710 <at_handler+0x2d8>)
    d5e8:	4b4a      	ldr	r3, [pc, #296]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
    d5ea:	4601      	mov	r1, r0
    d5ec:	1ad2      	subs	r2, r2, r3
    d5ee:	08d2      	lsrs	r2, r2, #3
    d5f0:	0192      	lsls	r2, r2, #6
    d5f2:	4854      	ldr	r0, [pc, #336]	; (d744 <at_handler+0x30c>)
    d5f4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
    d5f8:	f01f f997 	bl	2c92a <log_1>
			goto clean_exit;
    d5fc:	463c      	mov	r4, r7
    d5fe:	e783      	b.n	d508 <at_handler+0xd0>
		str_buf[len] = '\0';
    d600:	9b02      	ldr	r3, [sp, #8]
    d602:	aa0c      	add	r2, sp, #48	; 0x30
    d604:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    d606:	4621      	mov	r1, r4
    d608:	2210      	movs	r2, #16
    d60a:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d60c:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    d610:	f019 ff0e 	bl	27430 <strtoul>
		err = at_params_string_get(&resp_list,
    d614:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    d616:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    d618:	ab02      	add	r3, sp, #8
    d61a:	aa09      	add	r2, sp, #36	; 0x24
    d61c:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    d61e:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
    d622:	f021 f916 	bl	2e852 <at_params_string_get>
		if (err) {
    d626:	4607      	mov	r7, r0
    d628:	b148      	cbz	r0, d63e <at_handler+0x206>
    d62a:	4a39      	ldr	r2, [pc, #228]	; (d710 <at_handler+0x2d8>)
    d62c:	4b39      	ldr	r3, [pc, #228]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Could not get cell ID, error: %d", err);
    d62e:	4601      	mov	r1, r0
    d630:	1ad2      	subs	r2, r2, r3
    d632:	08d2      	lsrs	r2, r2, #3
    d634:	0192      	lsls	r2, r2, #6
    d636:	4844      	ldr	r0, [pc, #272]	; (d748 <at_handler+0x310>)
    d638:	f042 0201 	orr.w	r2, r2, #1
    d63c:	e7dc      	b.n	d5f8 <at_handler+0x1c0>
		str_buf[len] = '\0';
    d63e:	9b02      	ldr	r3, [sp, #8]
    d640:	aa0c      	add	r2, sp, #48	; 0x30
    d642:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    d644:	4621      	mov	r1, r4
    d646:	2210      	movs	r2, #16
    d648:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d64a:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    d64e:	f019 feef 	bl	27430 <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d652:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d656:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
    d658:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d65a:	d009      	beq.n	d670 <at_handler+0x238>
		psm_cfg->tau = -1;
    d65c:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    d660:	e9cd 3305 	strd	r3, r3, [sp, #20]
    d664:	e750      	b.n	d508 <at_handler+0xd0>
		cell->tac = UINT32_MAX;
    d666:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    d66a:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d66e:	e7f5      	b.n	d65c <at_handler+0x224>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d670:	2101      	movs	r1, #1
    d672:	aa05      	add	r2, sp, #20
    d674:	a807      	add	r0, sp, #28
    d676:	f00b faf3 	bl	18c60 <parse_psm_cfg>
		if (err) {
    d67a:	4604      	mov	r4, r0
    d67c:	2800      	cmp	r0, #0
    d67e:	f43f af43 	beq.w	d508 <at_handler+0xd0>
    d682:	4a23      	ldr	r2, [pc, #140]	; (d710 <at_handler+0x2d8>)
    d684:	4b23      	ldr	r3, [pc, #140]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
    d686:	4601      	mov	r1, r0
    d688:	1ad2      	subs	r2, r2, r3
    d68a:	08d2      	lsrs	r2, r2, #3
    d68c:	0192      	lsls	r2, r2, #6
    d68e:	482f      	ldr	r0, [pc, #188]	; (d74c <at_handler+0x314>)
    d690:	f042 0201 	orr.w	r2, r2, #1
    d694:	e736      	b.n	d504 <at_handler+0xcc>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    d696:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d69a:	2104      	movs	r1, #4
    d69c:	a807      	add	r0, sp, #28
    d69e:	f021 f800 	bl	2e6a2 <at_params_list_init>
	if (err) {
    d6a2:	4604      	mov	r4, r0
    d6a4:	b1b0      	cbz	r0, d6d4 <at_handler+0x29c>
    d6a6:	4a1a      	ldr	r2, [pc, #104]	; (d710 <at_handler+0x2d8>)
    d6a8:	4b1a      	ldr	r3, [pc, #104]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d6aa:	4601      	mov	r1, r0
    d6ac:	1ad2      	subs	r2, r2, r3
    d6ae:	08d2      	lsrs	r2, r2, #3
    d6b0:	0192      	lsls	r2, r2, #6
    d6b2:	481b      	ldr	r0, [pc, #108]	; (d720 <at_handler+0x2e8>)
    d6b4:	f042 0201 	orr.w	r2, r2, #1
    d6b8:	f01f f937 	bl	2c92a <log_1>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    d6bc:	4621      	mov	r1, r4
    d6be:	4a14      	ldr	r2, [pc, #80]	; (d710 <at_handler+0x2d8>)
    d6c0:	4b14      	ldr	r3, [pc, #80]	; (d714 <at_handler+0x2dc>)
    d6c2:	4823      	ldr	r0, [pc, #140]	; (d750 <at_handler+0x318>)
    d6c4:	1ad2      	subs	r2, r2, r3
    d6c6:	08d2      	lsrs	r2, r2, #3
    d6c8:	0192      	lsls	r2, r2, #6
    d6ca:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d6ce:	f01f f92c 	bl	2c92a <log_1>
			return;
    d6d2:	e6c2      	b.n	d45a <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d6d4:	4601      	mov	r1, r0
    d6d6:	aa07      	add	r2, sp, #28
    d6d8:	4630      	mov	r0, r6
    d6da:	f020 ffdf 	bl	2e69c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d6de:	4604      	mov	r4, r0
    d6e0:	2800      	cmp	r0, #0
    d6e2:	d039      	beq.n	d758 <at_handler+0x320>
    d6e4:	4a0a      	ldr	r2, [pc, #40]	; (d710 <at_handler+0x2d8>)
    d6e6:	4b0b      	ldr	r3, [pc, #44]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    d6e8:	4601      	mov	r1, r0
    d6ea:	1ad2      	subs	r2, r2, r3
    d6ec:	08d2      	lsrs	r2, r2, #3
    d6ee:	0192      	lsls	r2, r2, #6
    d6f0:	4818      	ldr	r0, [pc, #96]	; (d754 <at_handler+0x31c>)
    d6f2:	f042 0201 	orr.w	r2, r2, #1
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d6f6:	f01f f918 	bl	2c92a <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d6fa:	a807      	add	r0, sp, #28
    d6fc:	f020 ffe4 	bl	2e6c8 <at_params_list_free>
		if (err) {
    d700:	2c00      	cmp	r4, #0
    d702:	d1db      	bne.n	d6bc <at_handler+0x284>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d704:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d706:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d70a:	2301      	movs	r3, #1
		break;
    d70c:	e743      	b.n	d596 <at_handler+0x15e>
    d70e:	bf00      	nop
    d710:	0002f07c 	.word	0x0002f07c
    d714:	0002f034 	.word	0x0002f034
    d718:	000320b8 	.word	0x000320b8
    d71c:	0002f450 	.word	0x0002f450
    d720:	000320d8 	.word	0x000320d8
    d724:	000321d5 	.word	0x000321d5
    d728:	00032101 	.word	0x00032101
    d72c:	20021744 	.word	0x20021744
    d730:	20021740 	.word	0x20021740
    d734:	20026290 	.word	0x20026290
    d738:	2002175c 	.word	0x2002175c
    d73c:	20021764 	.word	0x20021764
    d740:	0003212e 	.word	0x0003212e
    d744:	0003215b 	.word	0x0003215b
    d748:	00032187 	.word	0x00032187
    d74c:	000321a8 	.word	0x000321a8
    d750:	00032271 	.word	0x00032271
    d754:	00032201 	.word	0x00032201
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d758:	4639      	mov	r1, r7
    d75a:	aa05      	add	r2, sp, #20
    d75c:	a807      	add	r0, sp, #28
    d75e:	f021 f861 	bl	2e824 <at_params_int_get>
	if (err) {
    d762:	4604      	mov	r4, r0
    d764:	b148      	cbz	r0, d77a <at_handler+0x342>
    d766:	4a82      	ldr	r2, [pc, #520]	; (d970 <at_handler+0x538>)
    d768:	4b82      	ldr	r3, [pc, #520]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d76a:	4601      	mov	r1, r0
    d76c:	1ad2      	subs	r2, r2, r3
    d76e:	08d2      	lsrs	r2, r2, #3
    d770:	0192      	lsls	r2, r2, #6
    d772:	4881      	ldr	r0, [pc, #516]	; (d978 <at_handler+0x540>)
    d774:	f042 0201 	orr.w	r2, r2, #1
    d778:	e7bd      	b.n	d6f6 <at_handler+0x2be>
	if (temp_mode == 0) {
    d77a:	9905      	ldr	r1, [sp, #20]
    d77c:	b911      	cbnz	r1, d784 <at_handler+0x34c>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d77e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    d782:	e7ba      	b.n	d6fa <at_handler+0x2c2>
	} else if (temp_mode == 1) {
    d784:	2901      	cmp	r1, #1
    d786:	d102      	bne.n	d78e <at_handler+0x356>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d788:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    d78c:	e7b5      	b.n	d6fa <at_handler+0x2c2>
    d78e:	4b79      	ldr	r3, [pc, #484]	; (d974 <at_handler+0x53c>)
    d790:	4a77      	ldr	r2, [pc, #476]	; (d970 <at_handler+0x538>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    d792:	487a      	ldr	r0, [pc, #488]	; (d97c <at_handler+0x544>)
    d794:	1ad2      	subs	r2, r2, r3
    d796:	08d2      	lsrs	r2, r2, #3
    d798:	0192      	lsls	r2, r2, #6
    d79a:	f042 0201 	orr.w	r2, r2, #1
    d79e:	f01f f8c4 	bl	2c92a <log_1>
		err = -EINVAL;
    d7a2:	f06f 0415 	mvn.w	r4, #21
    d7a6:	e7a8      	b.n	d6fa <at_handler+0x2c2>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d7a8:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    d7aa:	4d75      	ldr	r5, [pc, #468]	; (d980 <at_handler+0x548>)
	size_t len = sizeof(tmp_buf) - 1;
    d7ac:	9303      	str	r3, [sp, #12]
    d7ae:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    d7b0:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    d7b4:	3b01      	subs	r3, #1
    d7b6:	2b04      	cmp	r3, #4
    d7b8:	d804      	bhi.n	d7c4 <at_handler+0x38c>
    d7ba:	e8df f003 	tbb	[pc, r3]
    d7be:	2d19      	.short	0x2d19
    d7c0:	1903      	.short	0x1903
    d7c2:	2d          	.byte	0x2d
    d7c3:	00          	.byte	0x00
    d7c4:	4b6b      	ldr	r3, [pc, #428]	; (d974 <at_handler+0x53c>)
    d7c6:	496a      	ldr	r1, [pc, #424]	; (d970 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d7c8:	486e      	ldr	r0, [pc, #440]	; (d984 <at_handler+0x54c>)
    d7ca:	1ac9      	subs	r1, r1, r3
    d7cc:	08c9      	lsrs	r1, r1, #3
    d7ce:	0189      	lsls	r1, r1, #6
    d7d0:	f041 0101 	orr.w	r1, r1, #1
    d7d4:	f01f f89a 	bl	2c90c <log_0>
		return -ENOTCONN;
    d7d8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d7dc:	4a64      	ldr	r2, [pc, #400]	; (d970 <at_handler+0x538>)
    d7de:	4b65      	ldr	r3, [pc, #404]	; (d974 <at_handler+0x53c>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d7e0:	4621      	mov	r1, r4
    d7e2:	1ad2      	subs	r2, r2, r3
    d7e4:	08d2      	lsrs	r2, r2, #3
    d7e6:	0192      	lsls	r2, r2, #6
    d7e8:	4867      	ldr	r0, [pc, #412]	; (d988 <at_handler+0x550>)
    d7ea:	f042 0201 	orr.w	r2, r2, #1
    d7ee:	e76e      	b.n	d6ce <at_handler+0x296>
	switch (sys_mode_current) {
    d7f0:	ed9f 8a66 	vldr	s16, [pc, #408]	; d98c <at_handler+0x554>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d7f4:	2105      	movs	r1, #5
    d7f6:	a807      	add	r0, sp, #28
    d7f8:	f020 ff53 	bl	2e6a2 <at_params_list_init>
	if (err) {
    d7fc:	4604      	mov	r4, r0
    d7fe:	b170      	cbz	r0, d81e <at_handler+0x3e6>
    d800:	4b5c      	ldr	r3, [pc, #368]	; (d974 <at_handler+0x53c>)
    d802:	4a5b      	ldr	r2, [pc, #364]	; (d970 <at_handler+0x538>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d804:	4601      	mov	r1, r0
    d806:	1ad2      	subs	r2, r2, r3
    d808:	08d2      	lsrs	r2, r2, #3
    d80a:	0192      	lsls	r2, r2, #6
    d80c:	4860      	ldr	r0, [pc, #384]	; (d990 <at_handler+0x558>)
    d80e:	f042 0201 	orr.w	r2, r2, #1
    d812:	f01f f88a 	bl	2c92a <log_1>
		return err;
    d816:	e7e1      	b.n	d7dc <at_handler+0x3a4>
		*ptw_multiplier = 2.56;
    d818:	ed9f 8a5e 	vldr	s16, [pc, #376]	; d994 <at_handler+0x55c>
    d81c:	e7ea      	b.n	d7f4 <at_handler+0x3bc>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d81e:	4601      	mov	r1, r0
    d820:	aa07      	add	r2, sp, #28
    d822:	4630      	mov	r0, r6
    d824:	f020 ff3a 	bl	2e69c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d828:	4604      	mov	r4, r0
    d82a:	b188      	cbz	r0, d850 <at_handler+0x418>
    d82c:	4a50      	ldr	r2, [pc, #320]	; (d970 <at_handler+0x538>)
    d82e:	4b51      	ldr	r3, [pc, #324]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    d830:	4601      	mov	r1, r0
    d832:	1ad2      	subs	r2, r2, r3
    d834:	08d2      	lsrs	r2, r2, #3
    d836:	0192      	lsls	r2, r2, #6
    d838:	4857      	ldr	r0, [pc, #348]	; (d998 <at_handler+0x560>)
    d83a:	f042 0201 	orr.w	r2, r2, #1
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d83e:	f01f f874 	bl	2c92a <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d842:	a807      	add	r0, sp, #28
    d844:	f020 ff40 	bl	2e6c8 <at_params_list_free>
		if (err) {
    d848:	2c00      	cmp	r4, #0
    d84a:	d1c7      	bne.n	d7dc <at_handler+0x3a4>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d84c:	2302      	movs	r3, #2
    d84e:	e75a      	b.n	d706 <at_handler+0x2ce>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d850:	2103      	movs	r1, #3
    d852:	ab03      	add	r3, sp, #12
    d854:	aa05      	add	r2, sp, #20
    d856:	a807      	add	r0, sp, #28
    d858:	f020 fffb 	bl	2e852 <at_params_string_get>
	if (err) {
    d85c:	4604      	mov	r4, r0
    d85e:	b148      	cbz	r0, d874 <at_handler+0x43c>
    d860:	4a43      	ldr	r2, [pc, #268]	; (d970 <at_handler+0x538>)
    d862:	4b44      	ldr	r3, [pc, #272]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d864:	4601      	mov	r1, r0
    d866:	1ad2      	subs	r2, r2, r3
    d868:	08d2      	lsrs	r2, r2, #3
    d86a:	0192      	lsls	r2, r2, #6
    d86c:	484b      	ldr	r0, [pc, #300]	; (d99c <at_handler+0x564>)
    d86e:	f042 0201 	orr.w	r2, r2, #1
    d872:	e7e4      	b.n	d83e <at_handler+0x406>
	tmp_buf[len] = '\0';
    d874:	9b03      	ldr	r3, [sp, #12]
    d876:	aa0c      	add	r2, sp, #48	; 0x30
    d878:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d87a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d87c:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d880:	2202      	movs	r2, #2
    d882:	a805      	add	r0, sp, #20
    d884:	f019 fdd4 	bl	27430 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d888:	b2c0      	uxtb	r0, r0
    d88a:	280f      	cmp	r0, #15
    d88c:	d844      	bhi.n	d918 <at_handler+0x4e0>
	switch (sys_mode_current) {
    d88e:	782b      	ldrb	r3, [r5, #0]
    d890:	3b01      	subs	r3, #1
    d892:	2b04      	cmp	r3, #4
    d894:	d828      	bhi.n	d8e8 <at_handler+0x4b0>
    d896:	e8df f003 	tbb	[pc, r3]
    d89a:	2503      	.short	0x2503
    d89c:	0327      	.short	0x0327
    d89e:	25          	.byte	0x25
    d89f:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d8a0:	4b3f      	ldr	r3, [pc, #252]	; (d9a0 <at_handler+0x568>)
		multiplier = edrx_lookup_nbiot[idx];
    d8a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8a6:	2800      	cmp	r0, #0
    d8a8:	d034      	beq.n	d914 <at_handler+0x4dc>
    d8aa:	f7fe fe1b 	bl	c4e4 <__aeabi_i2d>
    d8ae:	a32e      	add	r3, pc, #184	; (adr r3, d968 <at_handler+0x530>)
    d8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d8b4:	f7ff fa9e 	bl	cdf4 <__aeabi_dmul>
    d8b8:	f7fe ff2e 	bl	c718 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d8bc:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8be:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8c0:	ab03      	add	r3, sp, #12
    d8c2:	aa05      	add	r2, sp, #20
    d8c4:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d8c6:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8c8:	f020 ffc3 	bl	2e852 <at_params_string_get>
	if (err) {
    d8cc:	4604      	mov	r4, r0
    d8ce:	b330      	cbz	r0, d91e <at_handler+0x4e6>
    d8d0:	4a27      	ldr	r2, [pc, #156]	; (d970 <at_handler+0x538>)
    d8d2:	4b28      	ldr	r3, [pc, #160]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d8d4:	4601      	mov	r1, r0
    d8d6:	1ad2      	subs	r2, r2, r3
    d8d8:	08d2      	lsrs	r2, r2, #3
    d8da:	0192      	lsls	r2, r2, #6
    d8dc:	4831      	ldr	r0, [pc, #196]	; (d9a4 <at_handler+0x56c>)
    d8de:	f042 0201 	orr.w	r2, r2, #1
    d8e2:	e7ac      	b.n	d83e <at_handler+0x406>
		multiplier = edrx_lookup_nbiot[idx];
    d8e4:	4b30      	ldr	r3, [pc, #192]	; (d9a8 <at_handler+0x570>)
    d8e6:	e7dc      	b.n	d8a2 <at_handler+0x46a>
    d8e8:	4b22      	ldr	r3, [pc, #136]	; (d974 <at_handler+0x53c>)
    d8ea:	4921      	ldr	r1, [pc, #132]	; (d970 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d8ec:	4825      	ldr	r0, [pc, #148]	; (d984 <at_handler+0x54c>)
    d8ee:	1ac9      	subs	r1, r1, r3
    d8f0:	08c9      	lsrs	r1, r1, #3
    d8f2:	0189      	lsls	r1, r1, #6
    d8f4:	f041 0101 	orr.w	r1, r1, #1
    d8f8:	f01f f808 	bl	2c90c <log_0>
		return -ENOTCONN;
    d8fc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d900:	4a1b      	ldr	r2, [pc, #108]	; (d970 <at_handler+0x538>)
    d902:	4b1c      	ldr	r3, [pc, #112]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d904:	4621      	mov	r1, r4
    d906:	1ad2      	subs	r2, r2, r3
    d908:	08d2      	lsrs	r2, r2, #3
    d90a:	0192      	lsls	r2, r2, #6
    d90c:	4827      	ldr	r0, [pc, #156]	; (d9ac <at_handler+0x574>)
    d90e:	f042 0201 	orr.w	r2, r2, #1
    d912:	e794      	b.n	d83e <at_handler+0x406>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d914:	4826      	ldr	r0, [pc, #152]	; (d9b0 <at_handler+0x578>)
    d916:	e7d1      	b.n	d8bc <at_handler+0x484>
		return -EINVAL;
    d918:	f06f 0415 	mvn.w	r4, #21
    d91c:	e7f0      	b.n	d900 <at_handler+0x4c8>
	tmp_buf[len] = '\0';
    d91e:	9b03      	ldr	r3, [sp, #12]
    d920:	aa0c      	add	r2, sp, #48	; 0x30
    d922:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d924:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d926:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d92a:	2202      	movs	r2, #2
    d92c:	a805      	add	r0, sp, #20
    d92e:	f019 fd7f 	bl	27430 <strtoul>
	if (idx > 15) {
    d932:	b2c1      	uxtb	r1, r0
    d934:	290f      	cmp	r1, #15
    d936:	d90c      	bls.n	d952 <at_handler+0x51a>
    d938:	4b0e      	ldr	r3, [pc, #56]	; (d974 <at_handler+0x53c>)
    d93a:	4a0d      	ldr	r2, [pc, #52]	; (d970 <at_handler+0x538>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d93c:	481d      	ldr	r0, [pc, #116]	; (d9b4 <at_handler+0x57c>)
    d93e:	1ad2      	subs	r2, r2, r3
    d940:	08d2      	lsrs	r2, r2, #3
    d942:	0192      	lsls	r2, r2, #6
    d944:	f042 0201 	orr.w	r2, r2, #1
    d948:	f01e ffef 	bl	2c92a <log_1>
		err = -EINVAL;
    d94c:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d950:	e777      	b.n	d842 <at_handler+0x40a>
	idx += 1;
    d952:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d954:	b2c0      	uxtb	r0, r0
    d956:	ee07 0a90 	vmov	s15, r0
    d95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d95e:	ee67 7a88 	vmul.f32	s15, s15, s16
    d962:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d966:	e76c      	b.n	d842 <at_handler+0x40a>
    d968:	47ae147b 	.word	0x47ae147b
    d96c:	40247ae1 	.word	0x40247ae1
    d970:	0002f07c 	.word	0x0002f07c
    d974:	0002f034 	.word	0x0002f034
    d978:	0003222c 	.word	0x0003222c
    d97c:	00032255 	.word	0x00032255
    d980:	20026291 	.word	0x20026291
    d984:	00032298 	.word	0x00032298
    d988:	0003238c 	.word	0x0003238c
    d98c:	3fa3d70a 	.word	0x3fa3d70a
    d990:	000320d8 	.word	0x000320d8
    d994:	4023d70a 	.word	0x4023d70a
    d998:	000322c8 	.word	0x000322c8
    d99c:	000322f4 	.word	0x000322f4
    d9a0:	0002fcc4 	.word	0x0002fcc4
    d9a4:	00032344 	.word	0x00032344
    d9a8:	0002fce4 	.word	0x0002fce4
    d9ac:	00032320 	.word	0x00032320
    d9b0:	40a3d70a 	.word	0x40a3d70a
    d9b4:	0003236f 	.word	0x0003236f

0000d9b8 <_strtod_l>:
    d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9bc:	4c25      	ldr	r4, [pc, #148]	; (da54 <_strtod_l+0x9c>)
    d9be:	460f      	mov	r7, r1
    d9c0:	2500      	movs	r5, #0
    d9c2:	4683      	mov	fp, r0
    d9c4:	6824      	ldr	r4, [r4, #0]
    d9c6:	ed2d 8b02 	vpush	{d8}
    d9ca:	b0a3      	sub	sp, #140	; 0x8c
    d9cc:	4620      	mov	r0, r4
    d9ce:	9408      	str	r4, [sp, #32]
    d9d0:	461c      	mov	r4, r3
    d9d2:	9207      	str	r2, [sp, #28]
    d9d4:	951e      	str	r5, [sp, #120]	; 0x78
    d9d6:	f019 f93f 	bl	26c58 <strlen>
    d9da:	2100      	movs	r1, #0
    d9dc:	2200      	movs	r2, #0
    d9de:	463b      	mov	r3, r7
    d9e0:	4680      	mov	r8, r0
    d9e2:	971d      	str	r7, [sp, #116]	; 0x74
    d9e4:	e9cd 1204 	strd	r1, r2, [sp, #16]
    d9e8:	469a      	mov	sl, r3
    d9ea:	f813 6b01 	ldrb.w	r6, [r3], #1
    d9ee:	2e2d      	cmp	r6, #45	; 0x2d
    d9f0:	d832      	bhi.n	da58 <_strtod_l+0xa0>
    d9f2:	e8df f016 	tbh	[pc, r6, lsl #1]
    d9f6:	01e4      	.short	0x01e4
    d9f8:	00310031 	.word	0x00310031
    d9fc:	00310031 	.word	0x00310031
    da00:	00310031 	.word	0x00310031
    da04:	00310031 	.word	0x00310031
    da08:	01f201f2 	.word	0x01f201f2
    da0c:	01f201f2 	.word	0x01f201f2
    da10:	003101f2 	.word	0x003101f2
    da14:	00310031 	.word	0x00310031
    da18:	00310031 	.word	0x00310031
    da1c:	00310031 	.word	0x00310031
    da20:	00310031 	.word	0x00310031
    da24:	00310031 	.word	0x00310031
    da28:	00310031 	.word	0x00310031
    da2c:	00310031 	.word	0x00310031
    da30:	00310031 	.word	0x00310031
    da34:	01f20031 	.word	0x01f20031
    da38:	00310031 	.word	0x00310031
    da3c:	00310031 	.word	0x00310031
    da40:	00310031 	.word	0x00310031
    da44:	00310031 	.word	0x00310031
    da48:	00310031 	.word	0x00310031
    da4c:	00310423 	.word	0x00310423
    da50:	0417      	.short	0x0417
    da52:	bf00      	nop
    da54:	0002fca0 	.word	0x0002fca0
    da58:	2300      	movs	r3, #0
    da5a:	930a      	str	r3, [sp, #40]	; 0x28
    da5c:	2e30      	cmp	r6, #48	; 0x30
    da5e:	f000 81d9 	beq.w	de14 <_strtod_l+0x45c>
    da62:	2300      	movs	r3, #0
    da64:	930b      	str	r3, [sp, #44]	; 0x2c
    da66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da6a:	2b09      	cmp	r3, #9
    da6c:	f200 8460 	bhi.w	e330 <_strtod_l+0x978>
    da70:	2500      	movs	r5, #0
    da72:	4650      	mov	r0, sl
    da74:	46a9      	mov	r9, r5
    da76:	462c      	mov	r4, r5
    da78:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    da7c:	3001      	adds	r0, #1
    da7e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
    da82:	2c08      	cmp	r4, #8
    da84:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    da88:	901d      	str	r0, [sp, #116]	; 0x74
    da8a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    da8e:	7806      	ldrb	r6, [r0, #0]
    da90:	bfc8      	it	gt
    da92:	f1a3 0530 	subgt.w	r5, r3, #48	; 0x30
    da96:	f104 0401 	add.w	r4, r4, #1
    da9a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da9e:	bfd8      	it	le
    daa0:	f1a2 0930 	suble.w	r9, r2, #48	; 0x30
    daa4:	2b09      	cmp	r3, #9
    daa6:	d9e7      	bls.n	da78 <_strtod_l+0xc0>
    daa8:	9908      	ldr	r1, [sp, #32]
    daaa:	4642      	mov	r2, r8
    daac:	f019 f902 	bl	26cb4 <strncmp>
    dab0:	2800      	cmp	r0, #0
    dab2:	f000 82a8 	beq.w	e006 <_strtod_l+0x64e>
    dab6:	f026 0620 	bic.w	r6, r6, #32
    daba:	2e45      	cmp	r6, #69	; 0x45
    dabc:	f000 81be 	beq.w	de3c <_strtod_l+0x484>
    dac0:	2300      	movs	r3, #0
    dac2:	46a0      	mov	r8, r4
    dac4:	930c      	str	r3, [sp, #48]	; 0x30
    dac6:	9308      	str	r3, [sp, #32]
    dac8:	4648      	mov	r0, r9
    daca:	4646      	mov	r6, r8
    dacc:	f7fe fcfa 	bl	c4c4 <__aeabi_ui2d>
    dad0:	4602      	mov	r2, r0
    dad2:	460b      	mov	r3, r1
    dad4:	2c00      	cmp	r4, #0
    dad6:	bf08      	it	eq
    dad8:	4644      	moveq	r4, r8
    dada:	2e10      	cmp	r6, #16
    dadc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dae2:	bfa8      	it	ge
    dae4:	2610      	movge	r6, #16
    dae6:	9a08      	ldr	r2, [sp, #32]
    dae8:	f1b8 0f09 	cmp.w	r8, #9
    daec:	eba3 0302 	sub.w	r3, r3, r2
    daf0:	930e      	str	r3, [sp, #56]	; 0x38
    daf2:	dd13      	ble.n	db1c <_strtod_l+0x164>
    daf4:	4bc2      	ldr	r3, [pc, #776]	; (de00 <_strtod_l+0x448>)
    daf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    dafa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    dafe:	f7ff f979 	bl	cdf4 <__aeabi_dmul>
    db02:	ec41 0b18 	vmov	d8, r0, r1
    db06:	4628      	mov	r0, r5
    db08:	f7fe fcdc 	bl	c4c4 <__aeabi_ui2d>
    db0c:	4602      	mov	r2, r0
    db0e:	460b      	mov	r3, r1
    db10:	ec51 0b18 	vmov	r0, r1, d8
    db14:	f7fe fb9a 	bl	c24c <__adddf3>
    db18:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db1c:	f1b8 0f0f 	cmp.w	r8, #15
    db20:	f300 8200 	bgt.w	df24 <_strtod_l+0x56c>
    db24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db26:	2b00      	cmp	r3, #0
    db28:	f000 8449 	beq.w	e3be <_strtod_l+0xa06>
    db2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db2e:	f340 83c6 	ble.w	e2be <_strtod_l+0x906>
    db32:	2b16      	cmp	r3, #22
    db34:	f340 8567 	ble.w	e606 <_strtod_l+0xc4e>
    db38:	f1c8 0325 	rsb	r3, r8, #37	; 0x25
    db3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db3e:	4293      	cmp	r3, r2
    db40:	f280 85b5 	bge.w	e6ae <_strtod_l+0xcf6>
    db44:	eba8 0306 	sub.w	r3, r8, r6
    db48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db4a:	189d      	adds	r5, r3, r2
    db4c:	f015 030f 	ands.w	r3, r5, #15
    db50:	d00a      	beq.n	db68 <_strtod_l+0x1b0>
    db52:	49ab      	ldr	r1, [pc, #684]	; (de00 <_strtod_l+0x448>)
    db54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    db58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    db5c:	e9d1 0100 	ldrd	r0, r1, [r1]
    db60:	f7ff f948 	bl	cdf4 <__aeabi_dmul>
    db64:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db68:	f035 030f 	bics.w	r3, r5, #15
    db6c:	f040 8380 	bne.w	e270 <_strtod_l+0x8b8>
    db70:	2300      	movs	r3, #0
    db72:	930b      	str	r3, [sp, #44]	; 0x2c
    db74:	4643      	mov	r3, r8
    db76:	4622      	mov	r2, r4
    db78:	4651      	mov	r1, sl
    db7a:	4658      	mov	r0, fp
    db7c:	f8cd 9000 	str.w	r9, [sp]
    db80:	f01d fadc 	bl	2b13c <__s2b>
    db84:	9014      	str	r0, [sp, #80]	; 0x50
    db86:	2800      	cmp	r0, #0
    db88:	f000 84ff 	beq.w	e58a <_strtod_l+0xbd2>
    db8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db8e:	2600      	movs	r6, #0
    db90:	9b08      	ldr	r3, [sp, #32]
    db92:	4637      	mov	r7, r6
    db94:	46b2      	mov	sl, r6
    db96:	1a9b      	subs	r3, r3, r2
    db98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db9a:	2a00      	cmp	r2, #0
    db9c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dba0:	bfa8      	it	ge
    dba2:	4633      	movge	r3, r6
    dba4:	9211      	str	r2, [sp, #68]	; 0x44
    dba6:	930f      	str	r3, [sp, #60]	; 0x3c
    dba8:	9c14      	ldr	r4, [sp, #80]	; 0x50
    dbaa:	4658      	mov	r0, fp
    dbac:	6861      	ldr	r1, [r4, #4]
    dbae:	f01d fa51 	bl	2b054 <_Balloc>
    dbb2:	4681      	mov	r9, r0
    dbb4:	2800      	cmp	r0, #0
    dbb6:	f000 8288 	beq.w	e0ca <_strtod_l+0x712>
    dbba:	6922      	ldr	r2, [r4, #16]
    dbbc:	f104 010c 	add.w	r1, r4, #12
    dbc0:	300c      	adds	r0, #12
    dbc2:	3202      	adds	r2, #2
    dbc4:	ed9d 7b04 	vldr	d7, [sp, #16]
    dbc8:	0092      	lsls	r2, r2, #2
    dbca:	ed8d 7b08 	vstr	d7, [sp, #32]
    dbce:	f7fe ffbd 	bl	cb4c <memcpy>
    dbd2:	aa20      	add	r2, sp, #128	; 0x80
    dbd4:	a91f      	add	r1, sp, #124	; 0x7c
    dbd6:	4658      	mov	r0, fp
    dbd8:	ed9d 0b08 	vldr	d0, [sp, #32]
    dbdc:	f01d fe04 	bl	2b7e8 <__d2b>
    dbe0:	901e      	str	r0, [sp, #120]	; 0x78
    dbe2:	2800      	cmp	r0, #0
    dbe4:	f000 8261 	beq.w	e0aa <_strtod_l+0x6f2>
    dbe8:	2101      	movs	r1, #1
    dbea:	4658      	mov	r0, fp
    dbec:	f01d fb46 	bl	2b27c <__i2b>
    dbf0:	4607      	mov	r7, r0
    dbf2:	2800      	cmp	r0, #0
    dbf4:	f000 8269 	beq.w	e0ca <_strtod_l+0x712>
    dbf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	f2c0 8258 	blt.w	e0b0 <_strtod_l+0x6f8>
    dc00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dc02:	9d11      	ldr	r5, [sp, #68]	; 0x44
    dc04:	189e      	adds	r6, r3, r2
    dc06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc08:	9c20      	ldr	r4, [sp, #128]	; 0x80
    dc0a:	1a9b      	subs	r3, r3, r2
    dc0c:	4a7d      	ldr	r2, [pc, #500]	; (de04 <_strtod_l+0x44c>)
    dc0e:	4423      	add	r3, r4
    dc10:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
    dc14:	3b01      	subs	r3, #1
    dc16:	4293      	cmp	r3, r2
    dc18:	f280 820c 	bge.w	e034 <_strtod_l+0x67c>
    dc1c:	1ad2      	subs	r2, r2, r3
    dc1e:	2a1f      	cmp	r2, #31
    dc20:	eba4 0402 	sub.w	r4, r4, r2
    dc24:	f300 827c 	bgt.w	e120 <_strtod_l+0x768>
    dc28:	2301      	movs	r3, #1
    dc2a:	2100      	movs	r1, #0
    dc2c:	4093      	lsls	r3, r2
    dc2e:	9115      	str	r1, [sp, #84]	; 0x54
    dc30:	930c      	str	r3, [sp, #48]	; 0x30
    dc32:	4425      	add	r5, r4
    dc34:	4434      	add	r4, r6
    dc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc38:	42a6      	cmp	r6, r4
    dc3a:	441d      	add	r5, r3
    dc3c:	4633      	mov	r3, r6
    dc3e:	bfa8      	it	ge
    dc40:	4623      	movge	r3, r4
    dc42:	42ab      	cmp	r3, r5
    dc44:	bfa8      	it	ge
    dc46:	462b      	movge	r3, r5
    dc48:	2b00      	cmp	r3, #0
    dc4a:	dd02      	ble.n	dc52 <_strtod_l+0x29a>
    dc4c:	1ae4      	subs	r4, r4, r3
    dc4e:	1aed      	subs	r5, r5, r3
    dc50:	1af6      	subs	r6, r6, r3
    dc52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc54:	2b00      	cmp	r3, #0
    dc56:	f300 8208 	bgt.w	e06a <_strtod_l+0x6b2>
    dc5a:	2c00      	cmp	r4, #0
    dc5c:	f300 821c 	bgt.w	e098 <_strtod_l+0x6e0>
    dc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc62:	2b00      	cmp	r3, #0
    dc64:	f300 8228 	bgt.w	e0b8 <_strtod_l+0x700>
    dc68:	2d00      	cmp	r5, #0
    dc6a:	f300 824f 	bgt.w	e10c <_strtod_l+0x754>
    dc6e:	2e00      	cmp	r6, #0
    dc70:	dd08      	ble.n	dc84 <_strtod_l+0x2cc>
    dc72:	4639      	mov	r1, r7
    dc74:	4632      	mov	r2, r6
    dc76:	4658      	mov	r0, fp
    dc78:	f01d fbfc 	bl	2b474 <__lshift>
    dc7c:	4607      	mov	r7, r0
    dc7e:	2800      	cmp	r0, #0
    dc80:	f000 8223 	beq.w	e0ca <_strtod_l+0x712>
    dc84:	464a      	mov	r2, r9
    dc86:	991e      	ldr	r1, [sp, #120]	; 0x78
    dc88:	4658      	mov	r0, fp
    dc8a:	f01d fc79 	bl	2b580 <__mdiff>
    dc8e:	4682      	mov	sl, r0
    dc90:	2800      	cmp	r0, #0
    dc92:	f000 821a 	beq.w	e0ca <_strtod_l+0x712>
    dc96:	2300      	movs	r3, #0
    dc98:	68c2      	ldr	r2, [r0, #12]
    dc9a:	4639      	mov	r1, r7
    dc9c:	60c3      	str	r3, [r0, #12]
    dc9e:	9210      	str	r2, [sp, #64]	; 0x40
    dca0:	f01d fc50 	bl	2b544 <__mcmp>
    dca4:	2800      	cmp	r0, #0
    dca6:	f2c0 853c 	blt.w	e722 <_strtod_l+0xd6a>
    dcaa:	f000 84bf 	beq.w	e62c <_strtod_l+0xc74>
    dcae:	4639      	mov	r1, r7
    dcb0:	4650      	mov	r0, sl
    dcb2:	f01d fdf5 	bl	2b8a0 <__ratio>
    dcb6:	2200      	movs	r2, #0
    dcb8:	ee10 0a10 	vmov	r0, s0
    dcbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dcc0:	ec55 4b10 	vmov	r4, r5, d0
    dcc4:	4629      	mov	r1, r5
    dcc6:	f7fe fce1 	bl	c68c <__aeabi_dcmple>
    dcca:	2800      	cmp	r0, #0
    dccc:	f000 81b7 	beq.w	e03e <_strtod_l+0x686>
    dcd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	f000 822f 	beq.w	e136 <_strtod_l+0x77e>
    dcd8:	2300      	movs	r3, #0
    dcda:	4c4b      	ldr	r4, [pc, #300]	; (de08 <_strtod_l+0x450>)
    dcdc:	4d4a      	ldr	r5, [pc, #296]	; (de08 <_strtod_l+0x450>)
    dcde:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    dce2:	9b05      	ldr	r3, [sp, #20]
    dce4:	2400      	movs	r4, #0
    dce6:	4698      	mov	r8, r3
    dce8:	4e48      	ldr	r6, [pc, #288]	; (de0c <_strtod_l+0x454>)
    dcea:	4b49      	ldr	r3, [pc, #292]	; (de10 <_strtod_l+0x458>)
    dcec:	ea08 0606 	and.w	r6, r8, r6
    dcf0:	429e      	cmp	r6, r3
    dcf2:	f000 825f 	beq.w	e1b4 <_strtod_l+0x7fc>
    dcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dcf8:	b323      	cbz	r3, dd44 <_strtod_l+0x38c>
    dcfa:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
    dcfe:	d821      	bhi.n	dd44 <_strtod_l+0x38c>
    dd00:	4620      	mov	r0, r4
    dd02:	4629      	mov	r1, r5
    dd04:	a33c      	add	r3, pc, #240	; (adr r3, ddf8 <_strtod_l+0x440>)
    dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd0a:	f7fe fcbf 	bl	c68c <__aeabi_dcmple>
    dd0e:	b1a0      	cbz	r0, dd3a <_strtod_l+0x382>
    dd10:	4629      	mov	r1, r5
    dd12:	4620      	mov	r0, r4
    dd14:	f7ff fa96 	bl	d244 <__aeabi_d2uiz>
    dd18:	2801      	cmp	r0, #1
    dd1a:	bf38      	it	cc
    dd1c:	2001      	movcc	r0, #1
    dd1e:	f7fe fbd1 	bl	c4c4 <__aeabi_ui2d>
    dd22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dd24:	4604      	mov	r4, r0
    dd26:	460d      	mov	r5, r1
    dd28:	2b00      	cmp	r3, #0
    dd2a:	f000 829c 	beq.w	e266 <_strtod_l+0x8ae>
    dd2e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    dd32:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    dd36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    dd3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
    dd40:	1b9b      	subs	r3, r3, r6
    dd42:	930d      	str	r3, [sp, #52]	; 0x34
    dd44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    dd48:	ed9d 0b08 	vldr	d0, [sp, #32]
    dd4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dd50:	f01d fcb6 	bl	2b6c0 <__ulp>
    dd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dd58:	ec53 2b10 	vmov	r2, r3, d0
    dd5c:	f7ff f84a 	bl	cdf4 <__aeabi_dmul>
    dd60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    dd64:	f7fe fa72 	bl	c24c <__adddf3>
    dd68:	4602      	mov	r2, r0
    dd6a:	460b      	mov	r3, r1
    dd6c:	4688      	mov	r8, r1
    dd6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dd72:	4b26      	ldr	r3, [pc, #152]	; (de0c <_strtod_l+0x454>)
    dd74:	ea08 0303 	and.w	r3, r8, r3
    dd78:	42b3      	cmp	r3, r6
    dd7a:	d103      	bne.n	dd84 <_strtod_l+0x3cc>
    dd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd7e:	2b00      	cmp	r3, #0
    dd80:	f000 82af 	beq.w	e2e2 <_strtod_l+0x92a>
    dd84:	991e      	ldr	r1, [sp, #120]	; 0x78
    dd86:	4658      	mov	r0, fp
    dd88:	f01d f98a 	bl	2b0a0 <_Bfree>
    dd8c:	4649      	mov	r1, r9
    dd8e:	4658      	mov	r0, fp
    dd90:	f01d f986 	bl	2b0a0 <_Bfree>
    dd94:	4639      	mov	r1, r7
    dd96:	4658      	mov	r0, fp
    dd98:	f01d f982 	bl	2b0a0 <_Bfree>
    dd9c:	4651      	mov	r1, sl
    dd9e:	4658      	mov	r0, fp
    dda0:	f01d f97e 	bl	2b0a0 <_Bfree>
    dda4:	e700      	b.n	dba8 <_strtod_l+0x1f0>
    dda6:	f04f 0c01 	mov.w	ip, #1
    ddaa:	f026 0320 	bic.w	r3, r6, #32
    ddae:	2b45      	cmp	r3, #69	; 0x45
    ddb0:	f040 80b2 	bne.w	df18 <_strtod_l+0x560>
    ddb4:	ea44 0300 	orr.w	r3, r4, r0
    ddb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ddba:	4313      	orrs	r3, r2
    ddbc:	d142      	bne.n	de44 <_strtod_l+0x48c>
    ddbe:	9b07      	ldr	r3, [sp, #28]
    ddc0:	b16b      	cbz	r3, ddde <_strtod_l+0x426>
    ddc2:	f04f 0800 	mov.w	r8, #0
    ddc6:	f04f 0900 	mov.w	r9, #0
    ddca:	601f      	str	r7, [r3, #0]
    ddcc:	ec49 8b10 	vmov	d0, r8, r9
    ddd0:	b023      	add	sp, #140	; 0x8c
    ddd2:	ecbd 8b02 	vpop	{d8}
    ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddda:	931d      	str	r3, [sp, #116]	; 0x74
    dddc:	e604      	b.n	d9e8 <_strtod_l+0x30>
    ddde:	f04f 0800 	mov.w	r8, #0
    dde2:	f04f 0900 	mov.w	r9, #0
    dde6:	ec49 8b10 	vmov	d0, r8, r9
    ddea:	b023      	add	sp, #140	; 0x8c
    ddec:	ecbd 8b02 	vpop	{d8}
    ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddf4:	f3af 8000 	nop.w
    ddf8:	ffc00000 	.word	0xffc00000
    ddfc:	41dfffff 	.word	0x41dfffff
    de00:	0002f198 	.word	0x0002f198
    de04:	fffffc02 	.word	0xfffffc02
    de08:	3ff00000 	.word	0x3ff00000
    de0c:	7ff00000 	.word	0x7ff00000
    de10:	7fe00000 	.word	0x7fe00000
    de14:	f89a 3001 	ldrb.w	r3, [sl, #1]
    de18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    de1c:	2b58      	cmp	r3, #88	; 0x58
    de1e:	f000 82e3 	beq.w	e3e8 <_strtod_l+0xa30>
    de22:	4653      	mov	r3, sl
    de24:	3301      	adds	r3, #1
    de26:	931d      	str	r3, [sp, #116]	; 0x74
    de28:	781e      	ldrb	r6, [r3, #0]
    de2a:	2e30      	cmp	r6, #48	; 0x30
    de2c:	d0fa      	beq.n	de24 <_strtod_l+0x46c>
    de2e:	469a      	mov	sl, r3
    de30:	2e00      	cmp	r6, #0
    de32:	f000 80d2 	beq.w	dfda <_strtod_l+0x622>
    de36:	2301      	movs	r3, #1
    de38:	930b      	str	r3, [sp, #44]	; 0x2c
    de3a:	e614      	b.n	da66 <_strtod_l+0xae>
    de3c:	2000      	movs	r0, #0
    de3e:	46a6      	mov	lr, r4
    de40:	4684      	mov	ip, r0
    de42:	9008      	str	r0, [sp, #32]
    de44:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    de46:	1c7b      	adds	r3, r7, #1
    de48:	931d      	str	r3, [sp, #116]	; 0x74
    de4a:	787e      	ldrb	r6, [r7, #1]
    de4c:	2e2b      	cmp	r6, #43	; 0x2b
    de4e:	f000 826c 	beq.w	e32a <_strtod_l+0x972>
    de52:	2e2d      	cmp	r6, #45	; 0x2d
    de54:	f000 8194 	beq.w	e180 <_strtod_l+0x7c8>
    de58:	f04f 0800 	mov.w	r8, #0
    de5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de60:	2b09      	cmp	r3, #9
    de62:	f200 8193 	bhi.w	e18c <_strtod_l+0x7d4>
    de66:	2e30      	cmp	r6, #48	; 0x30
    de68:	d105      	bne.n	de76 <_strtod_l+0x4be>
    de6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    de6c:	3301      	adds	r3, #1
    de6e:	931d      	str	r3, [sp, #116]	; 0x74
    de70:	781e      	ldrb	r6, [r3, #0]
    de72:	2e30      	cmp	r6, #48	; 0x30
    de74:	d0fa      	beq.n	de6c <_strtod_l+0x4b4>
    de76:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    de7a:	2b08      	cmp	r3, #8
    de7c:	d84c      	bhi.n	df18 <_strtod_l+0x560>
    de7e:	991d      	ldr	r1, [sp, #116]	; 0x74
    de80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de84:	1c4a      	adds	r2, r1, #1
    de86:	910c      	str	r1, [sp, #48]	; 0x30
    de88:	921d      	str	r2, [sp, #116]	; 0x74
    de8a:	784e      	ldrb	r6, [r1, #1]
    de8c:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    de90:	2909      	cmp	r1, #9
    de92:	f200 8307 	bhi.w	e4a4 <_strtod_l+0xaec>
    de96:	3201      	adds	r2, #1
    de98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    de9c:	921d      	str	r2, [sp, #116]	; 0x74
    de9e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    dea2:	7816      	ldrb	r6, [r2, #0]
    dea4:	3b30      	subs	r3, #48	; 0x30
    dea6:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    deaa:	2909      	cmp	r1, #9
    deac:	d9f3      	bls.n	de96 <_strtod_l+0x4de>
    deae:	990c      	ldr	r1, [sp, #48]	; 0x30
    deb0:	1a52      	subs	r2, r2, r1
    deb2:	2a08      	cmp	r2, #8
    deb4:	f340 82f6 	ble.w	e4a4 <_strtod_l+0xaec>
    deb8:	f644 631f 	movw	r3, #19999	; 0x4e1f
    debc:	930c      	str	r3, [sp, #48]	; 0x30
    debe:	f1b8 0f00 	cmp.w	r8, #0
    dec2:	d002      	beq.n	deca <_strtod_l+0x512>
    dec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dec6:	425b      	negs	r3, r3
    dec8:	930c      	str	r3, [sp, #48]	; 0x30
    deca:	2c00      	cmp	r4, #0
    decc:	f040 82d5 	bne.w	e47a <_strtod_l+0xac2>
    ded0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ded2:	4303      	orrs	r3, r0
    ded4:	f040 8081 	bne.w	dfda <_strtod_l+0x622>
    ded8:	f1bc 0f00 	cmp.w	ip, #0
    dedc:	f47f af6f 	bne.w	ddbe <_strtod_l+0x406>
    dee0:	2e69      	cmp	r6, #105	; 0x69
    dee2:	f000 81d3 	beq.w	e28c <_strtod_l+0x8d4>
    dee6:	dc1a      	bgt.n	df1e <_strtod_l+0x566>
    dee8:	2e49      	cmp	r6, #73	; 0x49
    deea:	f000 81cf 	beq.w	e28c <_strtod_l+0x8d4>
    deee:	2e4e      	cmp	r6, #78	; 0x4e
    def0:	f47f af65 	bne.w	ddbe <_strtod_l+0x406>
    def4:	49a7      	ldr	r1, [pc, #668]	; (e194 <_strtod_l+0x7dc>)
    def6:	a81d      	add	r0, sp, #116	; 0x74
    def8:	f01c fe6c 	bl	2abd4 <__match>
    defc:	2800      	cmp	r0, #0
    defe:	f43f af5e 	beq.w	ddbe <_strtod_l+0x406>
    df02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	2b28      	cmp	r3, #40	; 0x28
    df08:	f000 83f8 	beq.w	e6fc <_strtod_l+0xd44>
    df0c:	48a2      	ldr	r0, [pc, #648]	; (e198 <_strtod_l+0x7e0>)
    df0e:	f003 fa2f 	bl	11370 <nan>
    df12:	ec59 8b10 	vmov	r8, r9, d0
    df16:	e064      	b.n	dfe2 <_strtod_l+0x62a>
    df18:	2300      	movs	r3, #0
    df1a:	930c      	str	r3, [sp, #48]	; 0x30
    df1c:	e7d5      	b.n	deca <_strtod_l+0x512>
    df1e:	2e6e      	cmp	r6, #110	; 0x6e
    df20:	d0e8      	beq.n	def4 <_strtod_l+0x53c>
    df22:	e74c      	b.n	ddbe <_strtod_l+0x406>
    df24:	eba8 0306 	sub.w	r3, r8, r6
    df28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    df2a:	189d      	adds	r5, r3, r2
    df2c:	2d00      	cmp	r5, #0
    df2e:	f73f ae0d 	bgt.w	db4c <_strtod_l+0x194>
    df32:	f43f ae1d 	beq.w	db70 <_strtod_l+0x1b8>
    df36:	426d      	negs	r5, r5
    df38:	f015 020f 	ands.w	r2, r5, #15
    df3c:	d00a      	beq.n	df54 <_strtod_l+0x59c>
    df3e:	4b97      	ldr	r3, [pc, #604]	; (e19c <_strtod_l+0x7e4>)
    df40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    df44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    df48:	e9d3 2300 	ldrd	r2, r3, [r3]
    df4c:	f7ff f87c 	bl	d048 <__aeabi_ddiv>
    df50:	e9cd 0104 	strd	r0, r1, [sp, #16]
    df54:	112d      	asrs	r5, r5, #4
    df56:	f43f ae0b 	beq.w	db70 <_strtod_l+0x1b8>
    df5a:	2d1f      	cmp	r5, #31
    df5c:	dc3a      	bgt.n	dfd4 <_strtod_l+0x61c>
    df5e:	f015 0310 	ands.w	r3, r5, #16
    df62:	4e8f      	ldr	r6, [pc, #572]	; (e1a0 <_strtod_l+0x7e8>)
    df64:	f04f 0700 	mov.w	r7, #0
    df68:	bf18      	it	ne
    df6a:	236a      	movne	r3, #106	; 0x6a
    df6c:	930b      	str	r3, [sp, #44]	; 0x2c
    df6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    df72:	f015 0f01 	tst.w	r5, #1
    df76:	4610      	mov	r0, r2
    df78:	4619      	mov	r1, r3
    df7a:	d006      	beq.n	df8a <_strtod_l+0x5d2>
    df7c:	2701      	movs	r7, #1
    df7e:	e9d6 2300 	ldrd	r2, r3, [r6]
    df82:	f7fe ff37 	bl	cdf4 <__aeabi_dmul>
    df86:	4602      	mov	r2, r0
    df88:	460b      	mov	r3, r1
    df8a:	106d      	asrs	r5, r5, #1
    df8c:	f106 0608 	add.w	r6, r6, #8
    df90:	d1ef      	bne.n	df72 <_strtod_l+0x5ba>
    df92:	b10f      	cbz	r7, df98 <_strtod_l+0x5e0>
    df94:	e9cd 2304 	strd	r2, r3, [sp, #16]
    df98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df9a:	b193      	cbz	r3, dfc2 <_strtod_l+0x60a>
    df9c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    dfa0:	f3c2 530a 	ubfx	r3, r2, #20, #11
    dfa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	dd0a      	ble.n	dfc2 <_strtod_l+0x60a>
    dfac:	2b1f      	cmp	r3, #31
    dfae:	f340 8450 	ble.w	e852 <_strtod_l+0xe9a>
    dfb2:	2100      	movs	r1, #0
    dfb4:	2b34      	cmp	r3, #52	; 0x34
    dfb6:	9104      	str	r1, [sp, #16]
    dfb8:	f340 8457 	ble.w	e86a <_strtod_l+0xeb2>
    dfbc:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    dfc0:	9305      	str	r3, [sp, #20]
    dfc2:	2200      	movs	r2, #0
    dfc4:	2300      	movs	r3, #0
    dfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dfca:	f7fe fb4b 	bl	c664 <__aeabi_dcmpeq>
    dfce:	2800      	cmp	r0, #0
    dfd0:	f43f add0 	beq.w	db74 <_strtod_l+0x1bc>
    dfd4:	2322      	movs	r3, #34	; 0x22
    dfd6:	f8cb 3000 	str.w	r3, [fp]
    dfda:	f04f 0800 	mov.w	r8, #0
    dfde:	f04f 0900 	mov.w	r9, #0
    dfe2:	9a07      	ldr	r2, [sp, #28]
    dfe4:	b10a      	cbz	r2, dfea <_strtod_l+0x632>
    dfe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    dfe8:	6013      	str	r3, [r2, #0]
    dfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dfec:	2b00      	cmp	r3, #0
    dfee:	f43f aeed 	beq.w	ddcc <_strtod_l+0x414>
    dff2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    dff6:	4699      	mov	r9, r3
    dff8:	ec49 8b10 	vmov	d0, r8, r9
    dffc:	b023      	add	sp, #140	; 0x8c
    dffe:	ecbd 8b02 	vpop	{d8}
    e002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e008:	46a6      	mov	lr, r4
    e00a:	9008      	str	r0, [sp, #32]
    e00c:	eb03 0208 	add.w	r2, r3, r8
    e010:	921d      	str	r2, [sp, #116]	; 0x74
    e012:	f813 6008 	ldrb.w	r6, [r3, r8]
    e016:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
    e01a:	2a09      	cmp	r2, #9
    e01c:	f63f aec3 	bhi.w	dda6 <_strtod_l+0x3ee>
    e020:	3001      	adds	r0, #1
    e022:	4690      	mov	r8, r2
    e024:	2a00      	cmp	r2, #0
    e026:	f040 81fe 	bne.w	e426 <_strtod_l+0xa6e>
    e02a:	991d      	ldr	r1, [sp, #116]	; 0x74
    e02c:	1c4b      	adds	r3, r1, #1
    e02e:	931d      	str	r3, [sp, #116]	; 0x74
    e030:	784e      	ldrb	r6, [r1, #1]
    e032:	e7f0      	b.n	e016 <_strtod_l+0x65e>
    e034:	2300      	movs	r3, #0
    e036:	9315      	str	r3, [sp, #84]	; 0x54
    e038:	2301      	movs	r3, #1
    e03a:	930c      	str	r3, [sp, #48]	; 0x30
    e03c:	e5f9      	b.n	dc32 <_strtod_l+0x27a>
    e03e:	4620      	mov	r0, r4
    e040:	4629      	mov	r1, r5
    e042:	4b58      	ldr	r3, [pc, #352]	; (e1a4 <_strtod_l+0x7ec>)
    e044:	2200      	movs	r2, #0
    e046:	f7fe fed5 	bl	cdf4 <__aeabi_dmul>
    e04a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e04c:	4604      	mov	r4, r0
    e04e:	460d      	mov	r5, r1
    e050:	2b00      	cmp	r3, #0
    e052:	d16d      	bne.n	e130 <_strtod_l+0x778>
    e054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e058:	9012      	str	r0, [sp, #72]	; 0x48
    e05a:	9313      	str	r3, [sp, #76]	; 0x4c
    e05c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e060:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e064:	9b05      	ldr	r3, [sp, #20]
    e066:	4698      	mov	r8, r3
    e068:	e63e      	b.n	dce8 <_strtod_l+0x330>
    e06a:	4639      	mov	r1, r7
    e06c:	461a      	mov	r2, r3
    e06e:	4658      	mov	r0, fp
    e070:	f01d f9b0 	bl	2b3d4 <__pow5mult>
    e074:	4607      	mov	r7, r0
    e076:	b340      	cbz	r0, e0ca <_strtod_l+0x712>
    e078:	4601      	mov	r1, r0
    e07a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e07c:	4658      	mov	r0, fp
    e07e:	f01d f907 	bl	2b290 <__multiply>
    e082:	b310      	cbz	r0, e0ca <_strtod_l+0x712>
    e084:	9010      	str	r0, [sp, #64]	; 0x40
    e086:	4658      	mov	r0, fp
    e088:	991e      	ldr	r1, [sp, #120]	; 0x78
    e08a:	f01d f809 	bl	2b0a0 <_Bfree>
    e08e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e090:	2c00      	cmp	r4, #0
    e092:	931e      	str	r3, [sp, #120]	; 0x78
    e094:	f77f ade4 	ble.w	dc60 <_strtod_l+0x2a8>
    e098:	4622      	mov	r2, r4
    e09a:	991e      	ldr	r1, [sp, #120]	; 0x78
    e09c:	4658      	mov	r0, fp
    e09e:	f01d f9e9 	bl	2b474 <__lshift>
    e0a2:	901e      	str	r0, [sp, #120]	; 0x78
    e0a4:	2800      	cmp	r0, #0
    e0a6:	f47f addb 	bne.w	dc60 <_strtod_l+0x2a8>
    e0aa:	4656      	mov	r6, sl
    e0ac:	46ca      	mov	sl, r9
    e0ae:	e00f      	b.n	e0d0 <_strtod_l+0x718>
    e0b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    e0b4:	1ad5      	subs	r5, r2, r3
    e0b6:	e5a6      	b.n	dc06 <_strtod_l+0x24e>
    e0b8:	4649      	mov	r1, r9
    e0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0bc:	4658      	mov	r0, fp
    e0be:	f01d f989 	bl	2b3d4 <__pow5mult>
    e0c2:	4681      	mov	r9, r0
    e0c4:	2800      	cmp	r0, #0
    e0c6:	f47f adcf 	bne.w	dc68 <_strtod_l+0x2b0>
    e0ca:	4656      	mov	r6, sl
    e0cc:	46ca      	mov	sl, r9
    e0ce:	981e      	ldr	r0, [sp, #120]	; 0x78
    e0d0:	4b35      	ldr	r3, [pc, #212]	; (e1a8 <_strtod_l+0x7f0>)
    e0d2:	2200      	movs	r2, #0
    e0d4:	9305      	str	r3, [sp, #20]
    e0d6:	2322      	movs	r3, #34	; 0x22
    e0d8:	9204      	str	r2, [sp, #16]
    e0da:	f8cb 3000 	str.w	r3, [fp]
    e0de:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e0e2:	4601      	mov	r1, r0
    e0e4:	4658      	mov	r0, fp
    e0e6:	f01c ffdb 	bl	2b0a0 <_Bfree>
    e0ea:	4651      	mov	r1, sl
    e0ec:	4658      	mov	r0, fp
    e0ee:	f01c ffd7 	bl	2b0a0 <_Bfree>
    e0f2:	4639      	mov	r1, r7
    e0f4:	4658      	mov	r0, fp
    e0f6:	f01c ffd3 	bl	2b0a0 <_Bfree>
    e0fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    e0fc:	4658      	mov	r0, fp
    e0fe:	f01c ffcf 	bl	2b0a0 <_Bfree>
    e102:	4631      	mov	r1, r6
    e104:	4658      	mov	r0, fp
    e106:	f01c ffcb 	bl	2b0a0 <_Bfree>
    e10a:	e76a      	b.n	dfe2 <_strtod_l+0x62a>
    e10c:	4649      	mov	r1, r9
    e10e:	462a      	mov	r2, r5
    e110:	4658      	mov	r0, fp
    e112:	f01d f9af 	bl	2b474 <__lshift>
    e116:	4681      	mov	r9, r0
    e118:	2800      	cmp	r0, #0
    e11a:	f47f ada8 	bne.w	dc6e <_strtod_l+0x2b6>
    e11e:	e7d4      	b.n	e0ca <_strtod_l+0x712>
    e120:	4922      	ldr	r1, [pc, #136]	; (e1ac <_strtod_l+0x7f4>)
    e122:	2201      	movs	r2, #1
    e124:	1acb      	subs	r3, r1, r3
    e126:	920c      	str	r2, [sp, #48]	; 0x30
    e128:	fa02 f303 	lsl.w	r3, r2, r3
    e12c:	9315      	str	r3, [sp, #84]	; 0x54
    e12e:	e580      	b.n	dc32 <_strtod_l+0x27a>
    e130:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    e134:	e792      	b.n	e05c <_strtod_l+0x6a4>
    e136:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e13a:	2900      	cmp	r1, #0
    e13c:	f040 8081 	bne.w	e242 <_strtod_l+0x88a>
    e140:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e144:	4690      	mov	r8, r2
    e146:	2b00      	cmp	r3, #0
    e148:	f040 8081 	bne.w	e24e <_strtod_l+0x896>
    e14c:	2200      	movs	r2, #0
    e14e:	4b18      	ldr	r3, [pc, #96]	; (e1b0 <_strtod_l+0x7f8>)
    e150:	4620      	mov	r0, r4
    e152:	4629      	mov	r1, r5
    e154:	f7fe fa90 	bl	c678 <__aeabi_dcmplt>
    e158:	2800      	cmp	r0, #0
    e15a:	f040 8260 	bne.w	e61e <_strtod_l+0xc66>
    e15e:	4620      	mov	r0, r4
    e160:	4629      	mov	r1, r5
    e162:	4b10      	ldr	r3, [pc, #64]	; (e1a4 <_strtod_l+0x7ec>)
    e164:	2200      	movs	r2, #0
    e166:	f7fe fe45 	bl	cdf4 <__aeabi_dmul>
    e16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e16e:	4604      	mov	r4, r0
    e170:	460d      	mov	r5, r1
    e172:	901a      	str	r0, [sp, #104]	; 0x68
    e174:	931b      	str	r3, [sp, #108]	; 0x6c
    e176:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    e17a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e17e:	e5b3      	b.n	dce8 <_strtod_l+0x330>
    e180:	f04f 0801 	mov.w	r8, #1
    e184:	1cbb      	adds	r3, r7, #2
    e186:	931d      	str	r3, [sp, #116]	; 0x74
    e188:	78be      	ldrb	r6, [r7, #2]
    e18a:	e667      	b.n	de5c <_strtod_l+0x4a4>
    e18c:	2300      	movs	r3, #0
    e18e:	971d      	str	r7, [sp, #116]	; 0x74
    e190:	930c      	str	r3, [sp, #48]	; 0x30
    e192:	e69a      	b.n	deca <_strtod_l+0x512>
    e194:	0002fab0 	.word	0x0002fab0
    e198:	0002f96c 	.word	0x0002f96c
    e19c:	0002f198 	.word	0x0002f198
    e1a0:	0002f148 	.word	0x0002f148
    e1a4:	3fe00000 	.word	0x3fe00000
    e1a8:	7ff00000 	.word	0x7ff00000
    e1ac:	fffffbe2 	.word	0xfffffbe2
    e1b0:	3ff00000 	.word	0x3ff00000
    e1b4:	f1a8 7354 	sub.w	r3, r8, #55574528	; 0x3500000
    e1b8:	9305      	str	r3, [sp, #20]
    e1ba:	ed9d 7b04 	vldr	d7, [sp, #16]
    e1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e1c2:	eeb0 8a47 	vmov.f32	s16, s14
    e1c6:	eef0 8a67 	vmov.f32	s17, s15
    e1ca:	eeb0 0a47 	vmov.f32	s0, s14
    e1ce:	eef0 0a67 	vmov.f32	s1, s15
    e1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1d6:	f01d fa73 	bl	2b6c0 <__ulp>
    e1da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e1de:	ec53 2b10 	vmov	r2, r3, d0
    e1e2:	f7fe fe07 	bl	cdf4 <__aeabi_dmul>
    e1e6:	ec53 2b18 	vmov	r2, r3, d8
    e1ea:	f7fe f82f 	bl	c24c <__adddf3>
    e1ee:	460a      	mov	r2, r1
    e1f0:	4bb7      	ldr	r3, [pc, #732]	; (e4d0 <_strtod_l+0xb18>)
    e1f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e1fa:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    e1fe:	49b5      	ldr	r1, [pc, #724]	; (e4d4 <_strtod_l+0xb1c>)
    e200:	4011      	ands	r1, r2
    e202:	4299      	cmp	r1, r3
    e204:	d92a      	bls.n	e25c <_strtod_l+0x8a4>
    e206:	4ab4      	ldr	r2, [pc, #720]	; (e4d8 <_strtod_l+0xb20>)
    e208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e20c:	4291      	cmp	r1, r2
    e20e:	d103      	bne.n	e218 <_strtod_l+0x860>
    e210:	f1b0 3fff 	cmp.w	r0, #4294967295
    e214:	f43f af59 	beq.w	e0ca <_strtod_l+0x712>
    e218:	f04f 33ff 	mov.w	r3, #4294967295
    e21c:	49ae      	ldr	r1, [pc, #696]	; (e4d8 <_strtod_l+0xb20>)
    e21e:	e9cd 3104 	strd	r3, r1, [sp, #16]
    e222:	e5af      	b.n	dd84 <_strtod_l+0x3cc>
    e224:	2301      	movs	r3, #1
    e226:	930a      	str	r3, [sp, #40]	; 0x28
    e228:	f10a 0301 	add.w	r3, sl, #1
    e22c:	931d      	str	r3, [sp, #116]	; 0x74
    e22e:	f89a 6001 	ldrb.w	r6, [sl, #1]
    e232:	2e00      	cmp	r6, #0
    e234:	f43f adc3 	beq.w	ddbe <_strtod_l+0x406>
    e238:	469a      	mov	sl, r3
    e23a:	e40f      	b.n	da5c <_strtod_l+0xa4>
    e23c:	2300      	movs	r3, #0
    e23e:	930a      	str	r3, [sp, #40]	; 0x28
    e240:	e7f2      	b.n	e228 <_strtod_l+0x870>
    e242:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e246:	2901      	cmp	r1, #1
    e248:	f000 811b 	beq.w	e482 <_strtod_l+0xaca>
    e24c:	4690      	mov	r8, r2
    e24e:	4ca3      	ldr	r4, [pc, #652]	; (e4dc <_strtod_l+0xb24>)
    e250:	2300      	movs	r3, #0
    e252:	4da3      	ldr	r5, [pc, #652]	; (e4e0 <_strtod_l+0xb28>)
    e254:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    e258:	2400      	movs	r4, #0
    e25a:	e545      	b.n	dce8 <_strtod_l+0x330>
    e25c:	f102 7854 	add.w	r8, r2, #55574528	; 0x3500000
    e260:	f8cd 8014 	str.w	r8, [sp, #20]
    e264:	e585      	b.n	dd72 <_strtod_l+0x3ba>
    e266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e26a:	9016      	str	r0, [sp, #88]	; 0x58
    e26c:	9317      	str	r3, [sp, #92]	; 0x5c
    e26e:	e560      	b.n	dd32 <_strtod_l+0x37a>
    e270:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
    e274:	f340 813e 	ble.w	e4f4 <_strtod_l+0xb3c>
    e278:	4b96      	ldr	r3, [pc, #600]	; (e4d4 <_strtod_l+0xb1c>)
    e27a:	2200      	movs	r2, #0
    e27c:	9305      	str	r3, [sp, #20]
    e27e:	2322      	movs	r3, #34	; 0x22
    e280:	9204      	str	r2, [sp, #16]
    e282:	f8cb 3000 	str.w	r3, [fp]
    e286:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e28a:	e6aa      	b.n	dfe2 <_strtod_l+0x62a>
    e28c:	4995      	ldr	r1, [pc, #596]	; (e4e4 <_strtod_l+0xb2c>)
    e28e:	a81d      	add	r0, sp, #116	; 0x74
    e290:	f01c fca0 	bl	2abd4 <__match>
    e294:	2800      	cmp	r0, #0
    e296:	f43f ad92 	beq.w	ddbe <_strtod_l+0x406>
    e29a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e29c:	a81d      	add	r0, sp, #116	; 0x74
    e29e:	4992      	ldr	r1, [pc, #584]	; (e4e8 <_strtod_l+0xb30>)
    e2a0:	3b01      	subs	r3, #1
    e2a2:	931d      	str	r3, [sp, #116]	; 0x74
    e2a4:	f01c fc96 	bl	2abd4 <__match>
    e2a8:	b910      	cbnz	r0, e2b0 <_strtod_l+0x8f8>
    e2aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e2ac:	3301      	adds	r3, #1
    e2ae:	931d      	str	r3, [sp, #116]	; 0x74
    e2b0:	2300      	movs	r3, #0
    e2b2:	4888      	ldr	r0, [pc, #544]	; (e4d4 <_strtod_l+0xb1c>)
    e2b4:	e9cd 3004 	strd	r3, r0, [sp, #16]
    e2b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e2bc:	e691      	b.n	dfe2 <_strtod_l+0x62a>
    e2be:	3316      	adds	r3, #22
    e2c0:	f6ff ae30 	blt.w	df24 <_strtod_l+0x56c>
    e2c4:	9b08      	ldr	r3, [sp, #32]
    e2c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e2c8:	1a9a      	subs	r2, r3, r2
    e2ca:	4b88      	ldr	r3, [pc, #544]	; (e4ec <_strtod_l+0xb34>)
    e2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    e2d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e2d8:	f7fe feb6 	bl	d048 <__aeabi_ddiv>
    e2dc:	4680      	mov	r8, r0
    e2de:	4689      	mov	r9, r1
    e2e0:	e67f      	b.n	dfe2 <_strtod_l+0x62a>
    e2e2:	4620      	mov	r0, r4
    e2e4:	4629      	mov	r1, r5
    e2e6:	f7fe ffcd 	bl	d284 <__aeabi_d2lz>
    e2ea:	f7fe f937 	bl	c55c <__aeabi_l2d>
    e2ee:	460b      	mov	r3, r1
    e2f0:	4602      	mov	r2, r0
    e2f2:	4629      	mov	r1, r5
    e2f4:	4620      	mov	r0, r4
    e2f6:	f7fd ffa7 	bl	c248 <__aeabi_dsub>
    e2fa:	9c04      	ldr	r4, [sp, #16]
    e2fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e2fe:	f3c8 0c13 	ubfx	ip, r8, #0, #20
    e302:	460d      	mov	r5, r1
    e304:	4326      	orrs	r6, r4
    e306:	4604      	mov	r4, r0
    e308:	ea56 030c 	orrs.w	r3, r6, ip
    e30c:	d15a      	bne.n	e3c4 <_strtod_l+0xa0c>
    e30e:	a36a      	add	r3, pc, #424	; (adr r3, e4b8 <_strtod_l+0xb00>)
    e310:	e9d3 2300 	ldrd	r2, r3, [r3]
    e314:	f7fe f9b0 	bl	c678 <__aeabi_dcmplt>
    e318:	2800      	cmp	r0, #0
    e31a:	f43f ad33 	beq.w	dd84 <_strtod_l+0x3cc>
    e31e:	4656      	mov	r6, sl
    e320:	981e      	ldr	r0, [sp, #120]	; 0x78
    e322:	46ca      	mov	sl, r9
    e324:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e328:	e6db      	b.n	e0e2 <_strtod_l+0x72a>
    e32a:	f04f 0800 	mov.w	r8, #0
    e32e:	e729      	b.n	e184 <_strtod_l+0x7cc>
    e330:	9908      	ldr	r1, [sp, #32]
    e332:	4642      	mov	r2, r8
    e334:	4650      	mov	r0, sl
    e336:	f018 fcbd 	bl	26cb4 <strncmp>
    e33a:	4686      	mov	lr, r0
    e33c:	2800      	cmp	r0, #0
    e33e:	f040 82ab 	bne.w	e898 <_strtod_l+0xee0>
    e342:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e344:	eb02 0308 	add.w	r3, r2, r8
    e348:	931d      	str	r3, [sp, #116]	; 0x74
    e34a:	f812 6008 	ldrb.w	r6, [r2, r8]
    e34e:	2e30      	cmp	r6, #48	; 0x30
    e350:	f040 8157 	bne.w	e602 <_strtod_l+0xc4a>
    e354:	f1c3 0201 	rsb	r2, r3, #1
    e358:	1898      	adds	r0, r3, r2
    e35a:	3301      	adds	r3, #1
    e35c:	931d      	str	r3, [sp, #116]	; 0x74
    e35e:	781e      	ldrb	r6, [r3, #0]
    e360:	2e30      	cmp	r6, #48	; 0x30
    e362:	d0f9      	beq.n	e358 <_strtod_l+0x9a0>
    e364:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    e368:	2b08      	cmp	r3, #8
    e36a:	d80f      	bhi.n	e38c <_strtod_l+0x9d4>
    e36c:	991d      	ldr	r1, [sp, #116]	; 0x74
    e36e:	f04f 0900 	mov.w	r9, #0
    e372:	1c43      	adds	r3, r0, #1
    e374:	f1a6 0830 	sub.w	r8, r6, #48	; 0x30
    e378:	468a      	mov	sl, r1
    e37a:	464d      	mov	r5, r9
    e37c:	2401      	movs	r4, #1
    e37e:	9308      	str	r3, [sp, #32]
    e380:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    e384:	2000      	movs	r0, #0
    e386:	eb08 0949 	add.w	r9, r8, r9, lsl #1
    e38a:	e64f      	b.n	e02c <_strtod_l+0x674>
    e38c:	2300      	movs	r3, #0
    e38e:	f04f 0c01 	mov.w	ip, #1
    e392:	461c      	mov	r4, r3
    e394:	4699      	mov	r9, r3
    e396:	461d      	mov	r5, r3
    e398:	9308      	str	r3, [sp, #32]
    e39a:	e506      	b.n	ddaa <_strtod_l+0x3f2>
    e39c:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
    e3a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    e3a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    e3a6:	9104      	str	r1, [sp, #16]
    e3a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
    e3ac:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e3b0:	9305      	str	r3, [sp, #20]
    e3b2:	0724      	lsls	r4, r4, #28
    e3b4:	d503      	bpl.n	e3be <_strtod_l+0xa06>
    e3b6:	9b05      	ldr	r3, [sp, #20]
    e3b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e3bc:	9305      	str	r3, [sp, #20]
    e3be:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e3c2:	e60e      	b.n	dfe2 <_strtod_l+0x62a>
    e3c4:	a33e      	add	r3, pc, #248	; (adr r3, e4c0 <_strtod_l+0xb08>)
    e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3ca:	f7fe f955 	bl	c678 <__aeabi_dcmplt>
    e3ce:	2800      	cmp	r0, #0
    e3d0:	d1a5      	bne.n	e31e <_strtod_l+0x966>
    e3d2:	4620      	mov	r0, r4
    e3d4:	4629      	mov	r1, r5
    e3d6:	a33c      	add	r3, pc, #240	; (adr r3, e4c8 <_strtod_l+0xb10>)
    e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3dc:	f7fe f96a 	bl	c6b4 <__aeabi_dcmpgt>
    e3e0:	2800      	cmp	r0, #0
    e3e2:	f43f accf 	beq.w	dd84 <_strtod_l+0x3cc>
    e3e6:	e79a      	b.n	e31e <_strtod_l+0x966>
    e3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e3ea:	aa1e      	add	r2, sp, #120	; 0x78
    e3ec:	9402      	str	r4, [sp, #8]
    e3ee:	a91d      	add	r1, sp, #116	; 0x74
    e3f0:	9301      	str	r3, [sp, #4]
    e3f2:	4658      	mov	r0, fp
    e3f4:	9200      	str	r2, [sp, #0]
    e3f6:	ab1f      	add	r3, sp, #124	; 0x7c
    e3f8:	4a3d      	ldr	r2, [pc, #244]	; (e4f0 <_strtod_l+0xb38>)
    e3fa:	f01c f941 	bl	2a680 <__gethex>
    e3fe:	f010 0507 	ands.w	r5, r0, #7
    e402:	4604      	mov	r4, r0
    e404:	f43f ade9 	beq.w	dfda <_strtod_l+0x622>
    e408:	2d06      	cmp	r5, #6
    e40a:	f040 80c8 	bne.w	e59e <_strtod_l+0xbe6>
    e40e:	9a07      	ldr	r2, [sp, #28]
    e410:	f10a 0301 	add.w	r3, sl, #1
    e414:	2a00      	cmp	r2, #0
    e416:	f43f ace2 	beq.w	ddde <_strtod_l+0x426>
    e41a:	f04f 0800 	mov.w	r8, #0
    e41e:	f04f 0900 	mov.w	r9, #0
    e422:	6013      	str	r3, [r2, #0]
    e424:	e4d2      	b.n	ddcc <_strtod_l+0x414>
    e426:	9b08      	ldr	r3, [sp, #32]
    e428:	2801      	cmp	r0, #1
    e42a:	991d      	ldr	r1, [sp, #116]	; 0x74
    e42c:	f104 0601 	add.w	r6, r4, #1
    e430:	4403      	add	r3, r0
    e432:	9308      	str	r3, [sp, #32]
    e434:	f000 822d 	beq.w	e892 <_strtod_l+0xeda>
    e438:	4420      	add	r0, r4
    e43a:	f100 3cff 	add.w	ip, r0, #4294967295
    e43e:	e004      	b.n	e44a <_strtod_l+0xa92>
    e440:	ea4f 0946 	mov.w	r9, r6, lsl #1
    e444:	4563      	cmp	r3, ip
    e446:	461c      	mov	r4, r3
    e448:	d00b      	beq.n	e462 <_strtod_l+0xaaa>
    e44a:	2c08      	cmp	r4, #8
    e44c:	f104 0301 	add.w	r3, r4, #1
    e450:	eb09 0689 	add.w	r6, r9, r9, lsl #2
    e454:	ddf4      	ble.n	e440 <_strtod_l+0xa88>
    e456:	eb05 0485 	add.w	r4, r5, r5, lsl #2
    e45a:	2b10      	cmp	r3, #16
    e45c:	bfd8      	it	le
    e45e:	0065      	lslle	r5, r4, #1
    e460:	e7f0      	b.n	e444 <_strtod_l+0xa8c>
    e462:	4604      	mov	r4, r0
    e464:	2b08      	cmp	r3, #8
    e466:	dd8b      	ble.n	e380 <_strtod_l+0x9c8>
    e468:	2c10      	cmp	r4, #16
    e46a:	f300 8137 	bgt.w	e6dc <_strtod_l+0xd24>
    e46e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e472:	2000      	movs	r0, #0
    e474:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    e478:	e5d8      	b.n	e02c <_strtod_l+0x674>
    e47a:	46a0      	mov	r8, r4
    e47c:	4674      	mov	r4, lr
    e47e:	f7ff bb23 	b.w	dac8 <_strtod_l+0x110>
    e482:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e486:	4690      	mov	r8, r2
    e488:	2a00      	cmp	r2, #0
    e48a:	f47f aee0 	bne.w	e24e <_strtod_l+0x896>
    e48e:	4656      	mov	r6, sl
    e490:	46ca      	mov	sl, r9
    e492:	2322      	movs	r3, #34	; 0x22
    e494:	981e      	ldr	r0, [sp, #120]	; 0x78
    e496:	f04f 0800 	mov.w	r8, #0
    e49a:	f04f 0900 	mov.w	r9, #0
    e49e:	f8cb 3000 	str.w	r3, [fp]
    e4a2:	e61e      	b.n	e0e2 <_strtod_l+0x72a>
    e4a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
    e4a8:	4293      	cmp	r3, r2
    e4aa:	bfa8      	it	ge
    e4ac:	4613      	movge	r3, r2
    e4ae:	930c      	str	r3, [sp, #48]	; 0x30
    e4b0:	e505      	b.n	debe <_strtod_l+0x506>
    e4b2:	bf00      	nop
    e4b4:	f3af 8000 	nop.w
    e4b8:	94a03595 	.word	0x94a03595
    e4bc:	3fcfffff 	.word	0x3fcfffff
    e4c0:	94a03595 	.word	0x94a03595
    e4c4:	3fdfffff 	.word	0x3fdfffff
    e4c8:	35afe535 	.word	0x35afe535
    e4cc:	3fe00000 	.word	0x3fe00000
    e4d0:	7c9fffff 	.word	0x7c9fffff
    e4d4:	7ff00000 	.word	0x7ff00000
    e4d8:	7fefffff 	.word	0x7fefffff
    e4dc:	bff00000 	.word	0xbff00000
    e4e0:	3ff00000 	.word	0x3ff00000
    e4e4:	0002faa4 	.word	0x0002faa4
    e4e8:	0002faa8 	.word	0x0002faa8
    e4ec:	0002f198 	.word	0x0002f198
    e4f0:	0002fab4 	.word	0x0002fab4
    e4f4:	2b10      	cmp	r3, #16
    e4f6:	ea4f 1523 	mov.w	r5, r3, asr #4
    e4fa:	f340 8159 	ble.w	e7b0 <_strtod_l+0xdf8>
    e4fe:	4bb0      	ldr	r3, [pc, #704]	; (e7c0 <_strtod_l+0xe08>)
    e500:	f04f 0c00 	mov.w	ip, #0
    e504:	461e      	mov	r6, r3
    e506:	930b      	str	r3, [sp, #44]	; 0x2c
    e508:	4667      	mov	r7, ip
    e50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e50e:	f015 0f01 	tst.w	r5, #1
    e512:	4610      	mov	r0, r2
    e514:	4619      	mov	r1, r3
    e516:	ea4f 0565 	mov.w	r5, r5, asr #1
    e51a:	f107 0701 	add.w	r7, r7, #1
    e51e:	d007      	beq.n	e530 <_strtod_l+0xb78>
    e520:	e9d6 2300 	ldrd	r2, r3, [r6]
    e524:	f7fe fc66 	bl	cdf4 <__aeabi_dmul>
    e528:	f04f 0c01 	mov.w	ip, #1
    e52c:	4602      	mov	r2, r0
    e52e:	460b      	mov	r3, r1
    e530:	2d01      	cmp	r5, #1
    e532:	f106 0608 	add.w	r6, r6, #8
    e536:	d1ea      	bne.n	e50e <_strtod_l+0xb56>
    e538:	f1bc 0f00 	cmp.w	ip, #0
    e53c:	d001      	beq.n	e542 <_strtod_l+0xb8a>
    e53e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e542:	9b05      	ldr	r3, [sp, #20]
    e544:	4d9f      	ldr	r5, [pc, #636]	; (e7c4 <_strtod_l+0xe0c>)
    e546:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    e54a:	4e9f      	ldr	r6, [pc, #636]	; (e7c8 <_strtod_l+0xe10>)
    e54c:	9305      	str	r3, [sp, #20]
    e54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e550:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    e554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e558:	e9d7 0100 	ldrd	r0, r1, [r7]
    e55c:	f7fe fc4a 	bl	cdf4 <__aeabi_dmul>
    e560:	ea01 0305 	and.w	r3, r1, r5
    e564:	460a      	mov	r2, r1
    e566:	42b3      	cmp	r3, r6
    e568:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e56c:	f200 80bf 	bhi.w	e6ee <_strtod_l+0xd36>
    e570:	4996      	ldr	r1, [pc, #600]	; (e7cc <_strtod_l+0xe14>)
    e572:	428b      	cmp	r3, r1
    e574:	f240 80b4 	bls.w	e6e0 <_strtod_l+0xd28>
    e578:	4b95      	ldr	r3, [pc, #596]	; (e7d0 <_strtod_l+0xe18>)
    e57a:	9305      	str	r3, [sp, #20]
    e57c:	2300      	movs	r3, #0
    e57e:	930b      	str	r3, [sp, #44]	; 0x2c
    e580:	f04f 33ff 	mov.w	r3, #4294967295
    e584:	9304      	str	r3, [sp, #16]
    e586:	f7ff baf5 	b.w	db74 <_strtod_l+0x1bc>
    e58a:	4b8e      	ldr	r3, [pc, #568]	; (e7c4 <_strtod_l+0xe0c>)
    e58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e58e:	9305      	str	r3, [sp, #20]
    e590:	2322      	movs	r3, #34	; 0x22
    e592:	9204      	str	r2, [sp, #16]
    e594:	f8cb 3000 	str.w	r3, [fp]
    e598:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e59c:	e521      	b.n	dfe2 <_strtod_l+0x62a>
    e59e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e5a0:	b13a      	cbz	r2, e5b2 <_strtod_l+0xbfa>
    e5a2:	2135      	movs	r1, #53	; 0x35
    e5a4:	a820      	add	r0, sp, #128	; 0x80
    e5a6:	f01d f9ab 	bl	2b900 <__copybits>
    e5aa:	4658      	mov	r0, fp
    e5ac:	991e      	ldr	r1, [sp, #120]	; 0x78
    e5ae:	f01c fd77 	bl	2b0a0 <_Bfree>
    e5b2:	3d01      	subs	r5, #1
    e5b4:	2d05      	cmp	r5, #5
    e5b6:	f63f aefc 	bhi.w	e3b2 <_strtod_l+0x9fa>
    e5ba:	a301      	add	r3, pc, #4	; (adr r3, e5c0 <_strtod_l+0xc08>)
    e5bc:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    e5c0:	0000e39d 	.word	0x0000e39d
    e5c4:	0000e5f9 	.word	0x0000e5f9
    e5c8:	0000e5ef 	.word	0x0000e5ef
    e5cc:	0000e5e1 	.word	0x0000e5e1
    e5d0:	0000e39d 	.word	0x0000e39d
    e5d4:	0000e5d9 	.word	0x0000e5d9
    e5d8:	2300      	movs	r3, #0
    e5da:	e9cd 3304 	strd	r3, r3, [sp, #16]
    e5de:	e6e8      	b.n	e3b2 <_strtod_l+0x9fa>
    e5e0:	f04f 33ff 	mov.w	r3, #4294967295
    e5e4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e5e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
    e5ec:	e6e1      	b.n	e3b2 <_strtod_l+0x9fa>
    e5ee:	2300      	movs	r3, #0
    e5f0:	4e74      	ldr	r6, [pc, #464]	; (e7c4 <_strtod_l+0xe0c>)
    e5f2:	e9cd 3604 	strd	r3, r6, [sp, #16]
    e5f6:	e6dc      	b.n	e3b2 <_strtod_l+0x9fa>
    e5f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e5fa:	9304      	str	r3, [sp, #16]
    e5fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e5fe:	9305      	str	r3, [sp, #20]
    e600:	e6d7      	b.n	e3b2 <_strtod_l+0x9fa>
    e602:	4670      	mov	r0, lr
    e604:	e6ae      	b.n	e364 <_strtod_l+0x9ac>
    e606:	4973      	ldr	r1, [pc, #460]	; (e7d4 <_strtod_l+0xe1c>)
    e608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e610:	e9d1 0100 	ldrd	r0, r1, [r1]
    e614:	f7fe fbee 	bl	cdf4 <__aeabi_dmul>
    e618:	4680      	mov	r8, r0
    e61a:	4689      	mov	r9, r1
    e61c:	e4e1      	b.n	dfe2 <_strtod_l+0x62a>
    e61e:	ed9f 7b66 	vldr	d7, [pc, #408]	; e7b8 <_strtod_l+0xe00>
    e622:	2400      	movs	r4, #0
    e624:	4d6c      	ldr	r5, [pc, #432]	; (e7d8 <_strtod_l+0xe20>)
    e626:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
    e62a:	e5a4      	b.n	e176 <_strtod_l+0x7be>
    e62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e62e:	4656      	mov	r6, sl
    e630:	46ca      	mov	sl, r9
    e632:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e636:	2b00      	cmp	r3, #0
    e638:	f000 80ab 	beq.w	e792 <_strtod_l+0xdda>
    e63c:	4b67      	ldr	r3, [pc, #412]	; (e7dc <_strtod_l+0xe24>)
    e63e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    e642:	f3c5 0113 	ubfx	r1, r5, #0, #20
    e646:	462a      	mov	r2, r5
    e648:	4299      	cmp	r1, r3
    e64a:	f000 80cd 	beq.w	e7e8 <_strtod_l+0xe30>
    e64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e650:	2b00      	cmp	r3, #0
    e652:	f000 80a7 	beq.w	e7a4 <_strtod_l+0xdec>
    e656:	9a05      	ldr	r2, [sp, #20]
    e658:	4213      	tst	r3, r2
    e65a:	d010      	beq.n	e67e <_strtod_l+0xcc6>
    e65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e65e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e664:	2b00      	cmp	r3, #0
    e666:	f000 80e2 	beq.w	e82e <_strtod_l+0xe76>
    e66a:	f018 fdab 	bl	271c4 <sulp>
    e66e:	4602      	mov	r2, r0
    e670:	460b      	mov	r3, r1
    e672:	4640      	mov	r0, r8
    e674:	4649      	mov	r1, r9
    e676:	f7fd fde9 	bl	c24c <__adddf3>
    e67a:	4680      	mov	r8, r0
    e67c:	4689      	mov	r9, r1
    e67e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e680:	b19b      	cbz	r3, e6aa <_strtod_l+0xcf2>
    e682:	2300      	movs	r3, #0
    e684:	4a56      	ldr	r2, [pc, #344]	; (e7e0 <_strtod_l+0xe28>)
    e686:	4640      	mov	r0, r8
    e688:	4649      	mov	r1, r9
    e68a:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
    e68e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    e692:	f7fe fbaf 	bl	cdf4 <__aeabi_dmul>
    e696:	4603      	mov	r3, r0
    e698:	4680      	mov	r8, r0
    e69a:	4689      	mov	r9, r1
    e69c:	430b      	orrs	r3, r1
    e69e:	d104      	bne.n	e6aa <_strtod_l+0xcf2>
    e6a0:	2322      	movs	r3, #34	; 0x22
    e6a2:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6a4:	f8cb 3000 	str.w	r3, [fp]
    e6a8:	e51b      	b.n	e0e2 <_strtod_l+0x72a>
    e6aa:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6ac:	e519      	b.n	e0e2 <_strtod_l+0x72a>
    e6ae:	f1c8 080f 	rsb	r8, r8, #15
    e6b2:	4c48      	ldr	r4, [pc, #288]	; (e7d4 <_strtod_l+0xe1c>)
    e6b4:	eb04 01c8 	add.w	r1, r4, r8, lsl #3
    e6b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
    e6c0:	f7fe fb98 	bl	cdf4 <__aeabi_dmul>
    e6c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6c6:	eba3 0808 	sub.w	r8, r3, r8
    e6ca:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
    e6ce:	e9d4 2300 	ldrd	r2, r3, [r4]
    e6d2:	f7fe fb8f 	bl	cdf4 <__aeabi_dmul>
    e6d6:	4680      	mov	r8, r0
    e6d8:	4689      	mov	r9, r1
    e6da:	e482      	b.n	dfe2 <_strtod_l+0x62a>
    e6dc:	2000      	movs	r0, #0
    e6de:	e4a5      	b.n	e02c <_strtod_l+0x674>
    e6e0:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    e6e4:	9305      	str	r3, [sp, #20]
    e6e6:	2300      	movs	r3, #0
    e6e8:	930b      	str	r3, [sp, #44]	; 0x2c
    e6ea:	f7ff ba43 	b.w	db74 <_strtod_l+0x1bc>
    e6ee:	2322      	movs	r3, #34	; 0x22
    e6f0:	2200      	movs	r2, #0
    e6f2:	9505      	str	r5, [sp, #20]
    e6f4:	9204      	str	r2, [sp, #16]
    e6f6:	f8cb 3000 	str.w	r3, [fp]
    e6fa:	e660      	b.n	e3be <_strtod_l+0xa06>
    e6fc:	a81d      	add	r0, sp, #116	; 0x74
    e6fe:	aa20      	add	r2, sp, #128	; 0x80
    e700:	4938      	ldr	r1, [pc, #224]	; (e7e4 <_strtod_l+0xe2c>)
    e702:	f01c fa81 	bl	2ac08 <__hexnan>
    e706:	2805      	cmp	r0, #5
    e708:	f47f ac00 	bne.w	df0c <_strtod_l+0x554>
    e70c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e70e:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    e712:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    e716:	9305      	str	r3, [sp, #20]
    e718:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e71a:	9304      	str	r3, [sp, #16]
    e71c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e720:	e45f      	b.n	dfe2 <_strtod_l+0x62a>
    e722:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e724:	4656      	mov	r6, sl
    e726:	46ca      	mov	sl, r9
    e728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e72c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e730:	4303      	orrs	r3, r0
    e732:	d1a4      	bne.n	e67e <_strtod_l+0xcc6>
    e734:	f3c1 0313 	ubfx	r3, r1, #0, #20
    e738:	460c      	mov	r4, r1
    e73a:	2b00      	cmp	r3, #0
    e73c:	d19f      	bne.n	e67e <_strtod_l+0xcc6>
    e73e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    e742:	0d1b      	lsrs	r3, r3, #20
    e744:	051b      	lsls	r3, r3, #20
    e746:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e74a:	d998      	bls.n	e67e <_strtod_l+0xcc6>
    e74c:	6973      	ldr	r3, [r6, #20]
    e74e:	b913      	cbnz	r3, e756 <_strtod_l+0xd9e>
    e750:	6933      	ldr	r3, [r6, #16]
    e752:	2b01      	cmp	r3, #1
    e754:	dd93      	ble.n	e67e <_strtod_l+0xcc6>
    e756:	4631      	mov	r1, r6
    e758:	2201      	movs	r2, #1
    e75a:	4658      	mov	r0, fp
    e75c:	f01c fe8a 	bl	2b474 <__lshift>
    e760:	4639      	mov	r1, r7
    e762:	4606      	mov	r6, r0
    e764:	f01c feee 	bl	2b544 <__mcmp>
    e768:	2800      	cmp	r0, #0
    e76a:	dd88      	ble.n	e67e <_strtod_l+0xcc6>
    e76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e76e:	2b00      	cmp	r3, #0
    e770:	f040 8084 	bne.w	e87c <_strtod_l+0xec4>
    e774:	4b13      	ldr	r3, [pc, #76]	; (e7c4 <_strtod_l+0xe0c>)
    e776:	4023      	ands	r3, r4
    e778:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    e77c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    e780:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    e784:	9305      	str	r3, [sp, #20]
    e786:	f04f 33ff 	mov.w	r3, #4294967295
    e78a:	9304      	str	r3, [sp, #16]
    e78c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e790:	e775      	b.n	e67e <_strtod_l+0xcc6>
    e792:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e796:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e79a:	4614      	mov	r4, r2
    e79c:	430b      	orrs	r3, r1
    e79e:	f47f af56 	bne.w	e64e <_strtod_l+0xc96>
    e7a2:	e7e3      	b.n	e76c <_strtod_l+0xdb4>
    e7a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a6:	9a04      	ldr	r2, [sp, #16]
    e7a8:	4213      	tst	r3, r2
    e7aa:	f43f af68 	beq.w	e67e <_strtod_l+0xcc6>
    e7ae:	e755      	b.n	e65c <_strtod_l+0xca4>
    e7b0:	4b03      	ldr	r3, [pc, #12]	; (e7c0 <_strtod_l+0xe08>)
    e7b2:	2700      	movs	r7, #0
    e7b4:	930b      	str	r3, [sp, #44]	; 0x2c
    e7b6:	e6c4      	b.n	e542 <_strtod_l+0xb8a>
    e7b8:	00000000 	.word	0x00000000
    e7bc:	bfe00000 	.word	0xbfe00000
    e7c0:	0002f170 	.word	0x0002f170
    e7c4:	7ff00000 	.word	0x7ff00000
    e7c8:	7ca00000 	.word	0x7ca00000
    e7cc:	7c900000 	.word	0x7c900000
    e7d0:	7fefffff 	.word	0x7fefffff
    e7d4:	0002f198 	.word	0x0002f198
    e7d8:	3fe00000 	.word	0x3fe00000
    e7dc:	000fffff 	.word	0x000fffff
    e7e0:	39500000 	.word	0x39500000
    e7e4:	0002fac8 	.word	0x0002fac8
    e7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7ea:	9904      	ldr	r1, [sp, #16]
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d039      	beq.n	e864 <_strtod_l+0xeac>
    e7f0:	4b2f      	ldr	r3, [pc, #188]	; (e8b0 <_strtod_l+0xef8>)
    e7f2:	402b      	ands	r3, r5
    e7f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    e7f8:	d834      	bhi.n	e864 <_strtod_l+0xeac>
    e7fa:	0d1b      	lsrs	r3, r3, #20
    e7fc:	f04f 30ff 	mov.w	r0, #4294967295
    e800:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    e804:	fa00 f303 	lsl.w	r3, r0, r3
    e808:	4299      	cmp	r1, r3
    e80a:	f47f af20 	bne.w	e64e <_strtod_l+0xc96>
    e80e:	4b29      	ldr	r3, [pc, #164]	; (e8b4 <_strtod_l+0xefc>)
    e810:	429a      	cmp	r2, r3
    e812:	d102      	bne.n	e81a <_strtod_l+0xe62>
    e814:	3101      	adds	r1, #1
    e816:	f43f ac5a 	beq.w	e0ce <_strtod_l+0x716>
    e81a:	4b25      	ldr	r3, [pc, #148]	; (e8b0 <_strtod_l+0xef8>)
    e81c:	4013      	ands	r3, r2
    e81e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    e822:	9305      	str	r3, [sp, #20]
    e824:	2300      	movs	r3, #0
    e826:	9304      	str	r3, [sp, #16]
    e828:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e82c:	e727      	b.n	e67e <_strtod_l+0xcc6>
    e82e:	f018 fcc9 	bl	271c4 <sulp>
    e832:	4602      	mov	r2, r0
    e834:	460b      	mov	r3, r1
    e836:	4640      	mov	r0, r8
    e838:	4649      	mov	r1, r9
    e83a:	f7fd fd05 	bl	c248 <__aeabi_dsub>
    e83e:	2200      	movs	r2, #0
    e840:	2300      	movs	r3, #0
    e842:	4680      	mov	r8, r0
    e844:	4689      	mov	r9, r1
    e846:	f7fd ff0d 	bl	c664 <__aeabi_dcmpeq>
    e84a:	2800      	cmp	r0, #0
    e84c:	f43f af17 	beq.w	e67e <_strtod_l+0xcc6>
    e850:	e61f      	b.n	e492 <_strtod_l+0xada>
    e852:	f04f 32ff 	mov.w	r2, #4294967295
    e856:	fa02 f303 	lsl.w	r3, r2, r3
    e85a:	9a04      	ldr	r2, [sp, #16]
    e85c:	401a      	ands	r2, r3
    e85e:	9204      	str	r2, [sp, #16]
    e860:	f7ff bbaf 	b.w	dfc2 <_strtod_l+0x60a>
    e864:	f04f 33ff 	mov.w	r3, #4294967295
    e868:	e7ce      	b.n	e808 <_strtod_l+0xe50>
    e86a:	3b20      	subs	r3, #32
    e86c:	f04f 31ff 	mov.w	r1, #4294967295
    e870:	fa01 f303 	lsl.w	r3, r1, r3
    e874:	4013      	ands	r3, r2
    e876:	9305      	str	r3, [sp, #20]
    e878:	f7ff bba3 	b.w	dfc2 <_strtod_l+0x60a>
    e87c:	4b0c      	ldr	r3, [pc, #48]	; (e8b0 <_strtod_l+0xef8>)
    e87e:	4023      	ands	r3, r4
    e880:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e884:	f73f af78 	bgt.w	e778 <_strtod_l+0xdc0>
    e888:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    e88c:	f73f aef9 	bgt.w	e682 <_strtod_l+0xcca>
    e890:	e5ff      	b.n	e492 <_strtod_l+0xada>
    e892:	4623      	mov	r3, r4
    e894:	4634      	mov	r4, r6
    e896:	e5e5      	b.n	e464 <_strtod_l+0xaac>
    e898:	f04f 0e00 	mov.w	lr, #0
    e89c:	4675      	mov	r5, lr
    e89e:	46f1      	mov	r9, lr
    e8a0:	4670      	mov	r0, lr
    e8a2:	4674      	mov	r4, lr
    e8a4:	46f4      	mov	ip, lr
    e8a6:	f8cd e020 	str.w	lr, [sp, #32]
    e8aa:	f7ff ba7e 	b.w	ddaa <_strtod_l+0x3f2>
    e8ae:	bf00      	nop
    e8b0:	7ff00000 	.word	0x7ff00000
    e8b4:	7fefffff 	.word	0x7fefffff

0000e8b8 <_svfprintf_r>:
    e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8bc:	ed2d 8b08 	vpush	{d8-d11}
    e8c0:	b0d1      	sub	sp, #324	; 0x144
    e8c2:	468b      	mov	fp, r1
    e8c4:	4617      	mov	r7, r2
    e8c6:	4681      	mov	r9, r0
    e8c8:	9309      	str	r3, [sp, #36]	; 0x24
    e8ca:	f01c fa83 	bl	2add4 <_localeconv_r>
    e8ce:	6803      	ldr	r3, [r0, #0]
    e8d0:	4618      	mov	r0, r3
    e8d2:	9311      	str	r3, [sp, #68]	; 0x44
    e8d4:	f018 f9c0 	bl	26c58 <strlen>
    e8d8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    e8dc:	9010      	str	r0, [sp, #64]	; 0x40
    e8de:	061c      	lsls	r4, r3, #24
    e8e0:	d504      	bpl.n	e8ec <_svfprintf_r+0x34>
    e8e2:	f8db 3010 	ldr.w	r3, [fp, #16]
    e8e6:	2b00      	cmp	r3, #0
    e8e8:	f000 87f2 	beq.w	f8d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe70>
    e8ec:	2300      	movs	r3, #0
    e8ee:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    e8f2:	ee09 9a10 	vmov	s18, r9
    e8f6:	ee09 ba90 	vmov	s19, fp
    e8fa:	930c      	str	r3, [sp, #48]	; 0x30
    e8fc:	9326      	str	r3, [sp, #152]	; 0x98
    e8fe:	9312      	str	r3, [sp, #72]	; 0x48
    e900:	9314      	str	r3, [sp, #80]	; 0x50
    e902:	9317      	str	r3, [sp, #92]	; 0x5c
    e904:	9305      	str	r3, [sp, #20]
    e906:	9325      	str	r3, [sp, #148]	; 0x94
    e908:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    e90c:	ed9f 7b9c 	vldr	d7, [pc, #624]	; eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    e910:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e914:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    e918:	783b      	ldrb	r3, [r7, #0]
    e91a:	463c      	mov	r4, r7
    e91c:	b1e3      	cbz	r3, e958 <_svfprintf_r+0xa0>
    e91e:	2b25      	cmp	r3, #37	; 0x25
    e920:	d01a      	beq.n	e958 <_svfprintf_r+0xa0>
    e922:	4625      	mov	r5, r4
    e924:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e928:	b10b      	cbz	r3, e92e <_svfprintf_r+0x76>
    e92a:	2b25      	cmp	r3, #37	; 0x25
    e92c:	d1f9      	bne.n	e922 <_svfprintf_r+0x6a>
    e92e:	1be6      	subs	r6, r4, r7
    e930:	d012      	beq.n	e958 <_svfprintf_r+0xa0>
    e932:	f8c8 7000 	str.w	r7, [r8]
    e936:	f8c8 6004 	str.w	r6, [r8, #4]
    e93a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e93e:	3301      	adds	r3, #1
    e940:	4432      	add	r2, r6
    e942:	2b07      	cmp	r3, #7
    e944:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e948:	f300 810b 	bgt.w	eb62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x102>
    e94c:	f108 0808 	add.w	r8, r8, #8
    e950:	9b05      	ldr	r3, [sp, #20]
    e952:	4433      	add	r3, r6
    e954:	9305      	str	r3, [sp, #20]
    e956:	786b      	ldrb	r3, [r5, #1]
    e958:	2b00      	cmp	r3, #0
    e95a:	f001 819e 	beq.w	fc9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123a>
    e95e:	2300      	movs	r3, #0
    e960:	1c67      	adds	r7, r4, #1
    e962:	f894 9001 	ldrb.w	r9, [r4, #1]
    e966:	f04f 3aff 	mov.w	sl, #4294967295
    e96a:	242b      	movs	r4, #43	; 0x2b
    e96c:	9306      	str	r3, [sp, #24]
    e96e:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    e972:	9303      	str	r3, [sp, #12]
    e974:	3701      	adds	r7, #1
    e976:	f1a9 0320 	sub.w	r3, r9, #32
    e97a:	2b5a      	cmp	r3, #90	; 0x5a
    e97c:	f200 8104 	bhi.w	eb88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x128>
    e980:	e8df f013 	tbh	[pc, r3, lsl #1]
    e984:	0102006a 	.word	0x0102006a
    e988:	02820102 	.word	0x02820102
    e98c:	01020102 	.word	0x01020102
    e990:	025e0102 	.word	0x025e0102
    e994:	01020102 	.word	0x01020102
    e998:	02380226 	.word	0x02380226
    e99c:	02310102 	.word	0x02310102
    e9a0:	01020244 	.word	0x01020244
    e9a4:	005b023d 	.word	0x005b023d
    e9a8:	005b005b 	.word	0x005b005b
    e9ac:	005b005b 	.word	0x005b005b
    e9b0:	005b005b 	.word	0x005b005b
    e9b4:	005b005b 	.word	0x005b005b
    e9b8:	01020102 	.word	0x01020102
    e9bc:	01020102 	.word	0x01020102
    e9c0:	01020102 	.word	0x01020102
    e9c4:	01890102 	.word	0x01890102
    e9c8:	01f10102 	.word	0x01f10102
    e9cc:	01890079 	.word	0x01890079
    e9d0:	01890189 	.word	0x01890189
    e9d4:	01020102 	.word	0x01020102
    e9d8:	01020102 	.word	0x01020102
    e9dc:	01020299 	.word	0x01020299
    e9e0:	00a70102 	.word	0x00a70102
    e9e4:	01020102 	.word	0x01020102
    e9e8:	02010102 	.word	0x02010102
    e9ec:	02890102 	.word	0x02890102
    e9f0:	01020102 	.word	0x01020102
    e9f4:	01020784 	.word	0x01020784
    e9f8:	01020102 	.word	0x01020102
    e9fc:	01020102 	.word	0x01020102
    ea00:	01020102 	.word	0x01020102
    ea04:	01890102 	.word	0x01890102
    ea08:	01f10102 	.word	0x01f10102
    ea0c:	0189007d 	.word	0x0189007d
    ea10:	01890189 	.word	0x01890189
    ea14:	007d02d4 	.word	0x007d02d4
    ea18:	01020072 	.word	0x01020072
    ea1c:	010202c9 	.word	0x010202c9
    ea20:	00ab02b2 	.word	0x00ab02b2
    ea24:	007202a0 	.word	0x007202a0
    ea28:	02010102 	.word	0x02010102
    ea2c:	0780006f 	.word	0x0780006f
    ea30:	01020102 	.word	0x01020102
    ea34:	0102075f 	.word	0x0102075f
    ea38:	006f      	.short	0x006f
    ea3a:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea3e:	2200      	movs	r2, #0
    ea40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ea44:	f817 9b01 	ldrb.w	r9, [r7], #1
    ea48:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    ea4c:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea50:	2b09      	cmp	r3, #9
    ea52:	d9f5      	bls.n	ea40 <_svfprintf_r+0x188>
    ea54:	9206      	str	r2, [sp, #24]
    ea56:	e78e      	b.n	e976 <_svfprintf_r+0xbe>
    ea58:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	f000 862b 	beq.w	f6b8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc58>
    ea62:	f897 9000 	ldrb.w	r9, [r7]
    ea66:	e785      	b.n	e974 <_svfprintf_r+0xbc>
    ea68:	9b03      	ldr	r3, [sp, #12]
    ea6a:	f897 9000 	ldrb.w	r9, [r7]
    ea6e:	f043 0320 	orr.w	r3, r3, #32
    ea72:	9303      	str	r3, [sp, #12]
    ea74:	e77e      	b.n	e974 <_svfprintf_r+0xbc>
    ea76:	9b03      	ldr	r3, [sp, #12]
    ea78:	f043 0310 	orr.w	r3, r3, #16
    ea7c:	9303      	str	r3, [sp, #12]
    ea7e:	9b03      	ldr	r3, [sp, #12]
    ea80:	0698      	lsls	r0, r3, #26
    ea82:	f140 815f 	bpl.w	ed44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e4>
    ea86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea88:	3307      	adds	r3, #7
    ea8a:	f023 0307 	bic.w	r3, r3, #7
    ea8e:	4619      	mov	r1, r3
    ea90:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    ea94:	4614      	mov	r4, r2
    ea96:	461d      	mov	r5, r3
    ea98:	9109      	str	r1, [sp, #36]	; 0x24
    ea9a:	2a00      	cmp	r2, #0
    ea9c:	f173 0300 	sbcs.w	r3, r3, #0
    eaa0:	f2c0 85c9 	blt.w	f636 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd6>
    eaa4:	f1ba 3fff 	cmp.w	sl, #4294967295
    eaa8:	f000 8496 	beq.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eaac:	9b03      	ldr	r3, [sp, #12]
    eaae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    eab2:	9303      	str	r3, [sp, #12]
    eab4:	f1ba 0f00 	cmp.w	sl, #0
    eab8:	f040 848e 	bne.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eabc:	ea54 0305 	orrs.w	r3, r4, r5
    eac0:	bf14      	ite	ne
    eac2:	2301      	movne	r3, #1
    eac4:	2300      	moveq	r3, #0
    eac6:	f040 8487 	bne.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eaca:	469a      	mov	sl, r3
    eacc:	ae50      	add	r6, sp, #320	; 0x140
    eace:	9307      	str	r3, [sp, #28]
    ead0:	e036      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    ead2:	9b03      	ldr	r3, [sp, #12]
    ead4:	f043 0310 	orr.w	r3, r3, #16
    ead8:	9303      	str	r3, [sp, #12]
    eada:	9b03      	ldr	r3, [sp, #12]
    eadc:	069d      	lsls	r5, r3, #26
    eade:	f140 8122 	bpl.w	ed26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c6>
    eae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eae4:	3307      	adds	r3, #7
    eae6:	f023 0307 	bic.w	r3, r3, #7
    eaea:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    eaee:	9309      	str	r3, [sp, #36]	; 0x24
    eaf0:	9b03      	ldr	r3, [sp, #12]
    eaf2:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    eaf6:	2300      	movs	r3, #0
    eaf8:	2200      	movs	r2, #0
    eafa:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    eafe:	f1ba 3fff 	cmp.w	sl, #4294967295
    eb02:	f000 8319 	beq.w	f138 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d8>
    eb06:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
    eb0a:	9203      	str	r2, [sp, #12]
    eb0c:	ea54 0205 	orrs.w	r2, r4, r5
    eb10:	f040 8310 	bne.w	f134 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d4>
    eb14:	f1ba 0200 	subs.w	r2, sl, #0
    eb18:	bf18      	it	ne
    eb1a:	2201      	movne	r2, #1
    eb1c:	f1ba 0f00 	cmp.w	sl, #0
    eb20:	f040 8308 	bne.w	f134 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d4>
    eb24:	2b00      	cmp	r3, #0
    eb26:	f040 8452 	bne.w	f3ce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x96e>
    eb2a:	f01b 0201 	ands.w	r2, fp, #1
    eb2e:	9207      	str	r2, [sp, #28]
    eb30:	f000 8504 	beq.w	f53c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xadc>
    eb34:	2230      	movs	r2, #48	; 0x30
    eb36:	469a      	mov	sl, r3
    eb38:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    eb3c:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    eb40:	9907      	ldr	r1, [sp, #28]
    eb42:	2300      	movs	r3, #0
    eb44:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    eb48:	4551      	cmp	r1, sl
    eb4a:	9308      	str	r3, [sp, #32]
    eb4c:	930d      	str	r3, [sp, #52]	; 0x34
    eb4e:	bfb8      	it	lt
    eb50:	4651      	movlt	r1, sl
    eb52:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    eb56:	9104      	str	r1, [sp, #16]
    eb58:	b352      	cbz	r2, ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    eb5a:	9b04      	ldr	r3, [sp, #16]
    eb5c:	3301      	adds	r3, #1
    eb5e:	9304      	str	r3, [sp, #16]
    eb60:	e026      	b.n	ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    eb62:	aa24      	add	r2, sp, #144	; 0x90
    eb64:	ee19 1a90 	vmov	r1, s19
    eb68:	ee19 0a10 	vmov	r0, s18
    eb6c:	f01d f9b6 	bl	2bedc <__ssprint_r>
    eb70:	2800      	cmp	r0, #0
    eb72:	f041 83eb 	bne.w	1034c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x34c>
    eb76:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    eb7a:	e6e9      	b.n	e950 <_svfprintf_r+0x98>
    eb7c:	f3af 8000 	nop.w
	...
    eb88:	f1b9 0f00 	cmp.w	r9, #0
    eb8c:	f001 8085 	beq.w	fc9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123a>
    eb90:	2201      	movs	r2, #1
    eb92:	2300      	movs	r3, #0
    eb94:	ae37      	add	r6, sp, #220	; 0xdc
    eb96:	f88d 90dc 	strb.w	r9, [sp, #220]	; 0xdc
    eb9a:	4611      	mov	r1, r2
    eb9c:	9204      	str	r2, [sp, #16]
    eb9e:	461a      	mov	r2, r3
    eba0:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    eba4:	9107      	str	r1, [sp, #28]
    eba6:	4692      	mov	sl, r2
    eba8:	9208      	str	r2, [sp, #32]
    ebaa:	920d      	str	r2, [sp, #52]	; 0x34
    ebac:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    ebb0:	9b03      	ldr	r3, [sp, #12]
    ebb2:	f013 0302 	ands.w	r3, r3, #2
    ebb6:	d002      	beq.n	ebbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15e>
    ebb8:	9904      	ldr	r1, [sp, #16]
    ebba:	3102      	adds	r1, #2
    ebbc:	9104      	str	r1, [sp, #16]
    ebbe:	9903      	ldr	r1, [sp, #12]
    ebc0:	f011 0b84 	ands.w	fp, r1, #132	; 0x84
    ebc4:	d105      	bne.n	ebd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x172>
    ebc6:	9906      	ldr	r1, [sp, #24]
    ebc8:	9804      	ldr	r0, [sp, #16]
    ebca:	1a0d      	subs	r5, r1, r0
    ebcc:	2d00      	cmp	r5, #0
    ebce:	f300 8356 	bgt.w	f27e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x81e>
    ebd2:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ebd4:	b182      	cbz	r2, ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>
    ebd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
    ebd8:	2101      	movs	r1, #1
    ebda:	3401      	adds	r4, #1
    ebdc:	f10d 0073 	add.w	r0, sp, #115	; 0x73
    ebe0:	440a      	add	r2, r1
    ebe2:	f8c8 1004 	str.w	r1, [r8, #4]
    ebe6:	9426      	str	r4, [sp, #152]	; 0x98
    ebe8:	2a07      	cmp	r2, #7
    ebea:	f8c8 0000 	str.w	r0, [r8]
    ebee:	9225      	str	r2, [sp, #148]	; 0x94
    ebf0:	f300 838f 	bgt.w	f312 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8b2>
    ebf4:	f108 0808 	add.w	r8, r8, #8
    ebf8:	b17b      	cbz	r3, ec1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ba>
    ebfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ebfc:	3402      	adds	r4, #2
    ebfe:	a91d      	add	r1, sp, #116	; 0x74
    ec00:	2202      	movs	r2, #2
    ec02:	3301      	adds	r3, #1
    ec04:	9426      	str	r4, [sp, #152]	; 0x98
    ec06:	f8c8 1000 	str.w	r1, [r8]
    ec0a:	2b07      	cmp	r3, #7
    ec0c:	9325      	str	r3, [sp, #148]	; 0x94
    ec0e:	f8c8 2004 	str.w	r2, [r8, #4]
    ec12:	f300 838e 	bgt.w	f332 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8d2>
    ec16:	f108 0808 	add.w	r8, r8, #8
    ec1a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
    ec1e:	f000 81f9 	beq.w	f014 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5b4>
    ec22:	9b07      	ldr	r3, [sp, #28]
    ec24:	ebaa 0a03 	sub.w	sl, sl, r3
    ec28:	f1ba 0f00 	cmp.w	sl, #0
    ec2c:	f300 8241 	bgt.w	f0b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x652>
    ec30:	9b03      	ldr	r3, [sp, #12]
    ec32:	05d8      	lsls	r0, r3, #23
    ec34:	f100 818e 	bmi.w	ef54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f4>
    ec38:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec3a:	9a07      	ldr	r2, [sp, #28]
    ec3c:	3301      	adds	r3, #1
    ec3e:	f8c8 6000 	str.w	r6, [r8]
    ec42:	4414      	add	r4, r2
    ec44:	f8c8 2004 	str.w	r2, [r8, #4]
    ec48:	2b07      	cmp	r3, #7
    ec4a:	9325      	str	r3, [sp, #148]	; 0x94
    ec4c:	9426      	str	r4, [sp, #152]	; 0x98
    ec4e:	f300 8309 	bgt.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    ec52:	f108 0808 	add.w	r8, r8, #8
    ec56:	9b03      	ldr	r3, [sp, #12]
    ec58:	0759      	lsls	r1, r3, #29
    ec5a:	d505      	bpl.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    ec5c:	9b06      	ldr	r3, [sp, #24]
    ec5e:	9a04      	ldr	r2, [sp, #16]
    ec60:	1a9d      	subs	r5, r3, r2
    ec62:	2d00      	cmp	r5, #0
    ec64:	f300 8373 	bgt.w	f34e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8ee>
    ec68:	9904      	ldr	r1, [sp, #16]
    ec6a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    ec6e:	428a      	cmp	r2, r1
    ec70:	bfac      	ite	ge
    ec72:	189b      	addge	r3, r3, r2
    ec74:	185b      	addlt	r3, r3, r1
    ec76:	9305      	str	r3, [sp, #20]
    ec78:	2c00      	cmp	r4, #0
    ec7a:	f040 8297 	bne.w	f1ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74c>
    ec7e:	2300      	movs	r3, #0
    ec80:	9325      	str	r3, [sp, #148]	; 0x94
    ec82:	9b08      	ldr	r3, [sp, #32]
    ec84:	b123      	cbz	r3, ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    ec86:	9908      	ldr	r1, [sp, #32]
    ec88:	ee19 0a10 	vmov	r0, s18
    ec8c:	f01b fa04 	bl	2a098 <_free_r>
    ec90:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ec94:	e640      	b.n	e918 <_svfprintf_r+0x60>
    ec96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec98:	f04f 32ff 	mov.w	r2, #4294967295
    ec9c:	3307      	adds	r3, #7
    ec9e:	f023 0307 	bic.w	r3, r3, #7
    eca2:	ecb3 7b02 	vldmia	r3!, {d7}
    eca6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    ecaa:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    ecae:	9309      	str	r3, [sp, #36]	; 0x24
    ecb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    ecb4:	ee0a 4a10 	vmov	s20, r4
    ecb8:	ee0a 3a90 	vmov	s21, r3
    ecbc:	4ba1      	ldr	r3, [pc, #644]	; (ef44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e4>)
    ecbe:	eeb0 8a4a 	vmov.f32	s16, s20
    ecc2:	eef0 8a6a 	vmov.f32	s17, s21
    ecc6:	ec51 0b18 	vmov	r0, r1, d8
    ecca:	f7fe faa5 	bl	d218 <__aeabi_dcmpun>
    ecce:	2800      	cmp	r0, #0
    ecd0:	f040 8509 	bne.w	f6e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc86>
    ecd4:	f04f 32ff 	mov.w	r2, #4294967295
    ecd8:	4b9a      	ldr	r3, [pc, #616]	; (ef44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e4>)
    ecda:	ec51 0b18 	vmov	r0, r1, d8
    ecde:	f7fd fcd5 	bl	c68c <__aeabi_dcmple>
    ece2:	2800      	cmp	r0, #0
    ece4:	f040 84ff 	bne.w	f6e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc86>
    ece8:	2200      	movs	r2, #0
    ecea:	2300      	movs	r3, #0
    ecec:	4620      	mov	r0, r4
    ecee:	4629      	mov	r1, r5
    ecf0:	f7fd fcc2 	bl	c678 <__aeabi_dcmplt>
    ecf4:	2800      	cmp	r0, #0
    ecf6:	f041 80de 	bne.w	feb6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1456>
    ecfa:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    ecfe:	2103      	movs	r1, #3
    ed00:	4e91      	ldr	r6, [pc, #580]	; (ef48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e8>)
    ed02:	4b92      	ldr	r3, [pc, #584]	; (ef4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4ec>)
    ed04:	9104      	str	r1, [sp, #16]
    ed06:	9c03      	ldr	r4, [sp, #12]
    ed08:	2000      	movs	r0, #0
    ed0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    ed0e:	bfc8      	it	gt
    ed10:	461e      	movgt	r6, r3
    ed12:	9107      	str	r1, [sp, #28]
    ed14:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    ed18:	4682      	mov	sl, r0
    ed1a:	9008      	str	r0, [sp, #32]
    ed1c:	9403      	str	r4, [sp, #12]
    ed1e:	900d      	str	r0, [sp, #52]	; 0x34
    ed20:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    ed24:	e718      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    ed26:	9b03      	ldr	r3, [sp, #12]
    ed28:	06dc      	lsls	r4, r3, #27
    ed2a:	f100 84d5 	bmi.w	f6d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc78>
    ed2e:	9b03      	ldr	r3, [sp, #12]
    ed30:	0658      	lsls	r0, r3, #25
    ed32:	f140 87ef 	bpl.w	fd14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12b4>
    ed36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed38:	2500      	movs	r5, #0
    ed3a:	f853 4b04 	ldr.w	r4, [r3], #4
    ed3e:	b2a4      	uxth	r4, r4
    ed40:	9309      	str	r3, [sp, #36]	; 0x24
    ed42:	e6d5      	b.n	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    ed44:	9b03      	ldr	r3, [sp, #12]
    ed46:	06d9      	lsls	r1, r3, #27
    ed48:	f100 84bd 	bmi.w	f6c6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc66>
    ed4c:	9b03      	ldr	r3, [sp, #12]
    ed4e:	065a      	lsls	r2, r3, #25
    ed50:	f140 87d2 	bpl.w	fcf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1298>
    ed54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed56:	f853 4b04 	ldr.w	r4, [r3], #4
    ed5a:	b224      	sxth	r4, r4
    ed5c:	9309      	str	r3, [sp, #36]	; 0x24
    ed5e:	17e5      	asrs	r5, r4, #31
    ed60:	4622      	mov	r2, r4
    ed62:	462b      	mov	r3, r5
    ed64:	e699      	b.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ed66:	2201      	movs	r2, #1
    ed68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed6a:	2100      	movs	r1, #0
    ed6c:	ae37      	add	r6, sp, #220	; 0xdc
    ed6e:	4614      	mov	r4, r2
    ed70:	f853 0b04 	ldr.w	r0, [r3], #4
    ed74:	9204      	str	r2, [sp, #16]
    ed76:	460a      	mov	r2, r1
    ed78:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
    ed7c:	9407      	str	r4, [sp, #28]
    ed7e:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
    ed82:	9309      	str	r3, [sp, #36]	; 0x24
    ed84:	e70f      	b.n	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    ed86:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ed88:	2500      	movs	r5, #0
    ed8a:	f854 6b04 	ldr.w	r6, [r4], #4
    ed8e:	f88d 5073 	strb.w	r5, [sp, #115]	; 0x73
    ed92:	2e00      	cmp	r6, #0
    ed94:	f000 8791 	beq.w	fcba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x125a>
    ed98:	f1ba 3fff 	cmp.w	sl, #4294967295
    ed9c:	f000 85a8 	beq.w	f8f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe90>
    eda0:	4652      	mov	r2, sl
    eda2:	4629      	mov	r1, r5
    eda4:	4630      	mov	r0, r6
    eda6:	f017 fadb 	bl	26360 <memchr>
    edaa:	9008      	str	r0, [sp, #32]
    edac:	2800      	cmp	r0, #0
    edae:	f001 81eb 	beq.w	10188 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x188>
    edb2:	9b08      	ldr	r3, [sp, #32]
    edb4:	46aa      	mov	sl, r5
    edb6:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    edba:	1b9b      	subs	r3, r3, r6
    edbc:	9409      	str	r4, [sp, #36]	; 0x24
    edbe:	9508      	str	r5, [sp, #32]
    edc0:	9307      	str	r3, [sp, #28]
    edc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    edc6:	950d      	str	r5, [sp, #52]	; 0x34
    edc8:	9304      	str	r3, [sp, #16]
    edca:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    edce:	e6c3      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    edd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edd2:	f853 2b04 	ldr.w	r2, [r3], #4
    edd6:	2a00      	cmp	r2, #0
    edd8:	9206      	str	r2, [sp, #24]
    edda:	f280 845c 	bge.w	f696 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc36>
    edde:	9a06      	ldr	r2, [sp, #24]
    ede0:	9309      	str	r3, [sp, #36]	; 0x24
    ede2:	4252      	negs	r2, r2
    ede4:	9206      	str	r2, [sp, #24]
    ede6:	9b03      	ldr	r3, [sp, #12]
    ede8:	f897 9000 	ldrb.w	r9, [r7]
    edec:	f043 0304 	orr.w	r3, r3, #4
    edf0:	9303      	str	r3, [sp, #12]
    edf2:	e5bf      	b.n	e974 <_svfprintf_r+0xbc>
    edf4:	f897 9000 	ldrb.w	r9, [r7]
    edf8:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
    edfc:	e5ba      	b.n	e974 <_svfprintf_r+0xbc>
    edfe:	9b03      	ldr	r3, [sp, #12]
    ee00:	f897 9000 	ldrb.w	r9, [r7]
    ee04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ee08:	9303      	str	r3, [sp, #12]
    ee0a:	e5b3      	b.n	e974 <_svfprintf_r+0xbc>
    ee0c:	463a      	mov	r2, r7
    ee0e:	f812 9b01 	ldrb.w	r9, [r2], #1
    ee12:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    ee16:	f001 82d3 	beq.w	103c0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3c0>
    ee1a:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee1e:	4617      	mov	r7, r2
    ee20:	f04f 0a00 	mov.w	sl, #0
    ee24:	2b09      	cmp	r3, #9
    ee26:	f63f ada6 	bhi.w	e976 <_svfprintf_r+0xbe>
    ee2a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    ee2e:	f817 9b01 	ldrb.w	r9, [r7], #1
    ee32:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
    ee36:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee3a:	2b09      	cmp	r3, #9
    ee3c:	d9f5      	bls.n	ee2a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ca>
    ee3e:	e59a      	b.n	e976 <_svfprintf_r+0xbe>
    ee40:	ee19 0a10 	vmov	r0, s18
    ee44:	f01b ffc6 	bl	2add4 <_localeconv_r>
    ee48:	6843      	ldr	r3, [r0, #4]
    ee4a:	4618      	mov	r0, r3
    ee4c:	9316      	str	r3, [sp, #88]	; 0x58
    ee4e:	f017 ff03 	bl	26c58 <strlen>
    ee52:	4603      	mov	r3, r0
    ee54:	ee19 0a10 	vmov	r0, s18
    ee58:	461d      	mov	r5, r3
    ee5a:	9315      	str	r3, [sp, #84]	; 0x54
    ee5c:	f01b ffba 	bl	2add4 <_localeconv_r>
    ee60:	6882      	ldr	r2, [r0, #8]
    ee62:	9217      	str	r2, [sp, #92]	; 0x5c
    ee64:	2d00      	cmp	r5, #0
    ee66:	f43f adfc 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee6a:	2a00      	cmp	r2, #0
    ee6c:	f43f adf9 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ee72:	781b      	ldrb	r3, [r3, #0]
    ee74:	2b00      	cmp	r3, #0
    ee76:	f43f adf4 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee7a:	9b03      	ldr	r3, [sp, #12]
    ee7c:	f897 9000 	ldrb.w	r9, [r7]
    ee80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ee84:	9303      	str	r3, [sp, #12]
    ee86:	e575      	b.n	e974 <_svfprintf_r+0xbc>
    ee88:	9b03      	ldr	r3, [sp, #12]
    ee8a:	f897 9000 	ldrb.w	r9, [r7]
    ee8e:	f043 0301 	orr.w	r3, r3, #1
    ee92:	9303      	str	r3, [sp, #12]
    ee94:	e56e      	b.n	e974 <_svfprintf_r+0xbc>
    ee96:	9b03      	ldr	r3, [sp, #12]
    ee98:	f043 0b10 	orr.w	fp, r3, #16
    ee9c:	f01b 0f20 	tst.w	fp, #32
    eea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eea2:	f000 83b2 	beq.w	f60a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbaa>
    eea6:	3207      	adds	r2, #7
    eea8:	2301      	movs	r3, #1
    eeaa:	f022 0207 	bic.w	r2, r2, #7
    eeae:	e8f2 4502 	ldrd	r4, r5, [r2], #8
    eeb2:	9209      	str	r2, [sp, #36]	; 0x24
    eeb4:	e620      	b.n	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eeb6:	9b03      	ldr	r3, [sp, #12]
    eeb8:	f897 9000 	ldrb.w	r9, [r7]
    eebc:	f043 0308 	orr.w	r3, r3, #8
    eec0:	9303      	str	r3, [sp, #12]
    eec2:	e557      	b.n	e974 <_svfprintf_r+0xbc>
    eec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eec6:	f647 0130 	movw	r1, #30768	; 0x7830
    eeca:	9b03      	ldr	r3, [sp, #12]
    eecc:	f04f 0978 	mov.w	r9, #120	; 0x78
    eed0:	f852 4b04 	ldr.w	r4, [r2], #4
    eed4:	2500      	movs	r5, #0
    eed6:	f043 0b02 	orr.w	fp, r3, #2
    eeda:	4b1d      	ldr	r3, [pc, #116]	; (ef50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f0>)
    eedc:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    eee0:	9312      	str	r3, [sp, #72]	; 0x48
    eee2:	2302      	movs	r3, #2
    eee4:	9209      	str	r2, [sp, #36]	; 0x24
    eee6:	e607      	b.n	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eee8:	9b03      	ldr	r3, [sp, #12]
    eeea:	0699      	lsls	r1, r3, #26
    eeec:	f100 83d8 	bmi.w	f6a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc40>
    eef0:	9b03      	ldr	r3, [sp, #12]
    eef2:	06da      	lsls	r2, r3, #27
    eef4:	f100 86c9 	bmi.w	fc8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122a>
    eef8:	9b03      	ldr	r3, [sp, #12]
    eefa:	065b      	lsls	r3, r3, #25
    eefc:	f101 8009 	bmi.w	ff12 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14b2>
    ef00:	9b03      	ldr	r3, [sp, #12]
    ef02:	059e      	lsls	r6, r3, #22
    ef04:	f140 86c1 	bpl.w	fc8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122a>
    ef08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef0a:	9905      	ldr	r1, [sp, #20]
    ef0c:	f853 2b04 	ldr.w	r2, [r3], #4
    ef10:	7011      	strb	r1, [r2, #0]
    ef12:	9309      	str	r3, [sp, #36]	; 0x24
    ef14:	e500      	b.n	e918 <_svfprintf_r+0x60>
    ef16:	f897 9000 	ldrb.w	r9, [r7]
    ef1a:	9b03      	ldr	r3, [sp, #12]
    ef1c:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    ef20:	f000 84b7 	beq.w	f892 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe32>
    ef24:	f043 0310 	orr.w	r3, r3, #16
    ef28:	9303      	str	r3, [sp, #12]
    ef2a:	e523      	b.n	e974 <_svfprintf_r+0xbc>
    ef2c:	f897 9000 	ldrb.w	r9, [r7]
    ef30:	9b03      	ldr	r3, [sp, #12]
    ef32:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    ef36:	f000 84b4 	beq.w	f8a2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe42>
    ef3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef3e:	9303      	str	r3, [sp, #12]
    ef40:	e518      	b.n	e974 <_svfprintf_r+0xbc>
    ef42:	bf00      	nop
    ef44:	7fefffff 	.word	0x7fefffff
    ef48:	0002fadc 	.word	0x0002fadc
    ef4c:	0002fae0 	.word	0x0002fae0
    ef50:	0002faec 	.word	0x0002faec
    ef54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    ef58:	f340 8137 	ble.w	f1ca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76a>
    ef5c:	2200      	movs	r2, #0
    ef5e:	2300      	movs	r3, #0
    ef60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ef64:	f7fd fb7e 	bl	c664 <__aeabi_dcmpeq>
    ef68:	2800      	cmp	r0, #0
    ef6a:	f000 8247 	beq.w	f3fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x99c>
    ef6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef70:	2201      	movs	r2, #1
    ef72:	3401      	adds	r4, #1
    ef74:	49ca      	ldr	r1, [pc, #808]	; (f2a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x840>)
    ef76:	4413      	add	r3, r2
    ef78:	f8c8 2004 	str.w	r2, [r8, #4]
    ef7c:	9426      	str	r4, [sp, #152]	; 0x98
    ef7e:	2b07      	cmp	r3, #7
    ef80:	f8c8 1000 	str.w	r1, [r8]
    ef84:	9325      	str	r3, [sp, #148]	; 0x94
    ef86:	f300 85fe 	bgt.w	fb86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1126>
    ef8a:	f108 0808 	add.w	r8, r8, #8
    ef8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ef90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ef92:	4293      	cmp	r3, r2
    ef94:	f280 837a 	bge.w	f68c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc2c>
    ef98:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ef9c:	3301      	adds	r3, #1
    ef9e:	9911      	ldr	r1, [sp, #68]	; 0x44
    efa0:	4414      	add	r4, r2
    efa2:	f8c8 2004 	str.w	r2, [r8, #4]
    efa6:	2b07      	cmp	r3, #7
    efa8:	f8c8 1000 	str.w	r1, [r8]
    efac:	9426      	str	r4, [sp, #152]	; 0x98
    efae:	9325      	str	r3, [sp, #148]	; 0x94
    efb0:	f300 847f 	bgt.w	f8b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe52>
    efb4:	f108 0808 	add.w	r8, r8, #8
    efb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    efba:	1e5e      	subs	r6, r3, #1
    efbc:	2e00      	cmp	r6, #0
    efbe:	f77f ae4a 	ble.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    efc2:	2e10      	cmp	r6, #16
    efc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efc6:	f340 85ef 	ble.w	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    efca:	f04f 0910 	mov.w	r9, #16
    efce:	4db5      	ldr	r5, [pc, #724]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    efd0:	ee19 aa10 	vmov	sl, s18
    efd4:	ee19 ba90 	vmov	fp, s19
    efd8:	e003      	b.n	efe2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x582>
    efda:	3e10      	subs	r6, #16
    efdc:	2e10      	cmp	r6, #16
    efde:	f340 85e4 	ble.w	fbaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114a>
    efe2:	3301      	adds	r3, #1
    efe4:	3410      	adds	r4, #16
    efe6:	f8c8 5000 	str.w	r5, [r8]
    efea:	f108 0808 	add.w	r8, r8, #8
    efee:	2b07      	cmp	r3, #7
    eff0:	f848 9c04 	str.w	r9, [r8, #-4]
    eff4:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    eff8:	ddef      	ble.n	efda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x57a>
    effa:	aa24      	add	r2, sp, #144	; 0x90
    effc:	4659      	mov	r1, fp
    effe:	4650      	mov	r0, sl
    f000:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f004:	f01c ff6a 	bl	2bedc <__ssprint_r>
    f008:	2800      	cmp	r0, #0
    f00a:	f041 804e 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
    f00e:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f012:	e7e2      	b.n	efda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x57a>
    f014:	9b06      	ldr	r3, [sp, #24]
    f016:	9a04      	ldr	r2, [sp, #16]
    f018:	eba3 0b02 	sub.w	fp, r3, r2
    f01c:	f1bb 0f00 	cmp.w	fp, #0
    f020:	f77f adff 	ble.w	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    f024:	f1bb 0f10 	cmp.w	fp, #16
    f028:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f02a:	f341 8118 	ble.w	1025e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x25e>
    f02e:	4620      	mov	r0, r4
    f030:	9613      	str	r6, [sp, #76]	; 0x4c
    f032:	2310      	movs	r3, #16
    f034:	4d9b      	ldr	r5, [pc, #620]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    f036:	ee19 4a10 	vmov	r4, s18
    f03a:	ee19 6a90 	vmov	r6, s19
    f03e:	e004      	b.n	f04a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ea>
    f040:	f1ab 0b10 	sub.w	fp, fp, #16
    f044:	f1bb 0f10 	cmp.w	fp, #16
    f048:	dd1d      	ble.n	f086 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x626>
    f04a:	3201      	adds	r2, #1
    f04c:	3010      	adds	r0, #16
    f04e:	f8c8 5000 	str.w	r5, [r8]
    f052:	f108 0808 	add.w	r8, r8, #8
    f056:	2a07      	cmp	r2, #7
    f058:	f848 3c04 	str.w	r3, [r8, #-4]
    f05c:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f060:	ddee      	ble.n	f040 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5e0>
    f062:	aa24      	add	r2, sp, #144	; 0x90
    f064:	4631      	mov	r1, r6
    f066:	4620      	mov	r0, r4
    f068:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f06c:	f01c ff36 	bl	2bedc <__ssprint_r>
    f070:	2800      	cmp	r0, #0
    f072:	f040 824c 	bne.w	f50e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaae>
    f076:	f1ab 0b10 	sub.w	fp, fp, #16
    f07a:	2310      	movs	r3, #16
    f07c:	f1bb 0f10 	cmp.w	fp, #16
    f080:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f084:	dce1      	bgt.n	f04a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ea>
    f086:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f088:	4604      	mov	r4, r0
    f08a:	3201      	adds	r2, #1
    f08c:	445c      	add	r4, fp
    f08e:	f8c8 5000 	str.w	r5, [r8]
    f092:	2a07      	cmp	r2, #7
    f094:	f8c8 b004 	str.w	fp, [r8, #4]
    f098:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f09c:	f300 85d8 	bgt.w	fc50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11f0>
    f0a0:	9b07      	ldr	r3, [sp, #28]
    f0a2:	f108 0808 	add.w	r8, r8, #8
    f0a6:	ebaa 0a03 	sub.w	sl, sl, r3
    f0aa:	f1ba 0f00 	cmp.w	sl, #0
    f0ae:	f77f adbf 	ble.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f0b2:	f1ba 0f10 	cmp.w	sl, #16
    f0b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0b8:	f340 8643 	ble.w	fd42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e2>
    f0bc:	4622      	mov	r2, r4
    f0be:	9613      	str	r6, [sp, #76]	; 0x4c
    f0c0:	f04f 0b10 	mov.w	fp, #16
    f0c4:	4d77      	ldr	r5, [pc, #476]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    f0c6:	ee19 4a10 	vmov	r4, s18
    f0ca:	ee19 6a90 	vmov	r6, s19
    f0ce:	e004      	b.n	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    f0d0:	f1aa 0a10 	sub.w	sl, sl, #16
    f0d4:	f1ba 0f10 	cmp.w	sl, #16
    f0d8:	dd1c      	ble.n	f114 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b4>
    f0da:	3301      	adds	r3, #1
    f0dc:	3210      	adds	r2, #16
    f0de:	f8c8 5000 	str.w	r5, [r8]
    f0e2:	f108 0808 	add.w	r8, r8, #8
    f0e6:	2b07      	cmp	r3, #7
    f0e8:	f848 bc04 	str.w	fp, [r8, #-4]
    f0ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f0f0:	ddee      	ble.n	f0d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x670>
    f0f2:	aa24      	add	r2, sp, #144	; 0x90
    f0f4:	4631      	mov	r1, r6
    f0f6:	4620      	mov	r0, r4
    f0f8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f0fc:	f01c feee 	bl	2bedc <__ssprint_r>
    f100:	2800      	cmp	r0, #0
    f102:	f040 8204 	bne.w	f50e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaae>
    f106:	f1aa 0a10 	sub.w	sl, sl, #16
    f10a:	f1ba 0f10 	cmp.w	sl, #16
    f10e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f112:	dce2      	bgt.n	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    f114:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f116:	4614      	mov	r4, r2
    f118:	3301      	adds	r3, #1
    f11a:	4454      	add	r4, sl
    f11c:	f8c8 5000 	str.w	r5, [r8]
    f120:	2b07      	cmp	r3, #7
    f122:	f8c8 a004 	str.w	sl, [r8, #4]
    f126:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f12a:	f300 825f 	bgt.w	f5ec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8c>
    f12e:	f108 0808 	add.w	r8, r8, #8
    f132:	e57d      	b.n	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f134:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f138:	2b01      	cmp	r3, #1
    f13a:	f000 814f 	beq.w	f3dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x97c>
    f13e:	2b02      	cmp	r3, #2
    f140:	ae50      	add	r6, sp, #320	; 0x140
    f142:	d114      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f144:	9812      	ldr	r0, [sp, #72]	; 0x48
    f146:	0923      	lsrs	r3, r4, #4
    f148:	f004 010f 	and.w	r1, r4, #15
    f14c:	092a      	lsrs	r2, r5, #4
    f14e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    f152:	4615      	mov	r5, r2
    f154:	461c      	mov	r4, r3
    f156:	5c43      	ldrb	r3, [r0, r1]
    f158:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f15c:	ea54 0305 	orrs.w	r3, r4, r5
    f160:	d1f1      	bne.n	f146 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e6>
    f162:	ab50      	add	r3, sp, #320	; 0x140
    f164:	f8cd b00c 	str.w	fp, [sp, #12]
    f168:	1b9b      	subs	r3, r3, r6
    f16a:	9307      	str	r3, [sp, #28]
    f16c:	e4e8      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f16e:	08e2      	lsrs	r2, r4, #3
    f170:	f004 0307 	and.w	r3, r4, #7
    f174:	08e9      	lsrs	r1, r5, #3
    f176:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    f17a:	3330      	adds	r3, #48	; 0x30
    f17c:	460d      	mov	r5, r1
    f17e:	4614      	mov	r4, r2
    f180:	4632      	mov	r2, r6
    f182:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f186:	ea54 0105 	orrs.w	r1, r4, r5
    f18a:	d1f0      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f18c:	2b30      	cmp	r3, #48	; 0x30
    f18e:	d0e8      	beq.n	f162 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x702>
    f190:	f01b 0f01 	tst.w	fp, #1
    f194:	d0e5      	beq.n	f162 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x702>
    f196:	2330      	movs	r3, #48	; 0x30
    f198:	3a02      	subs	r2, #2
    f19a:	f8cd b00c 	str.w	fp, [sp, #12]
    f19e:	f806 3c01 	strb.w	r3, [r6, #-1]
    f1a2:	ab50      	add	r3, sp, #320	; 0x140
    f1a4:	4616      	mov	r6, r2
    f1a6:	1a9b      	subs	r3, r3, r2
    f1a8:	9307      	str	r3, [sp, #28]
    f1aa:	e4c9      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f1ac:	aa24      	add	r2, sp, #144	; 0x90
    f1ae:	ee19 1a90 	vmov	r1, s19
    f1b2:	ee19 0a10 	vmov	r0, s18
    f1b6:	f01c fe91 	bl	2bedc <__ssprint_r>
    f1ba:	2800      	cmp	r0, #0
    f1bc:	f43f ad5f 	beq.w	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
    f1c0:	ee19 9a10 	vmov	r9, s18
    f1c4:	ee19 ba90 	vmov	fp, s19
    f1c8:	e1a3      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    f1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1cc:	2b01      	cmp	r3, #1
    f1ce:	f340 81b9 	ble.w	f544 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xae4>
    f1d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1d4:	2201      	movs	r2, #1
    f1d6:	3401      	adds	r4, #1
    f1d8:	f8c8 6000 	str.w	r6, [r8]
    f1dc:	4413      	add	r3, r2
    f1de:	f8c8 2004 	str.w	r2, [r8, #4]
    f1e2:	9426      	str	r4, [sp, #152]	; 0x98
    f1e4:	2b07      	cmp	r3, #7
    f1e6:	9325      	str	r3, [sp, #148]	; 0x94
    f1e8:	f300 8241 	bgt.w	f66e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0e>
    f1ec:	f108 0808 	add.w	r8, r8, #8
    f1f0:	f103 0901 	add.w	r9, r3, #1
    f1f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f1f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f1f8:	4414      	add	r4, r2
    f1fa:	f1b9 0f07 	cmp.w	r9, #7
    f1fe:	f8c8 3000 	str.w	r3, [r8]
    f202:	f8c8 2004 	str.w	r2, [r8, #4]
    f206:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f20a:	f300 8220 	bgt.w	f64e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbee>
    f20e:	f108 0808 	add.w	r8, r8, #8
    f212:	2300      	movs	r3, #0
    f214:	2200      	movs	r2, #0
    f216:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f21a:	f7fd fa23 	bl	c664 <__aeabi_dcmpeq>
    f21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f220:	2800      	cmp	r0, #0
    f222:	f040 81b3 	bne.w	f58c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb2c>
    f226:	3b01      	subs	r3, #1
    f228:	f109 0901 	add.w	r9, r9, #1
    f22c:	3601      	adds	r6, #1
    f22e:	441c      	add	r4, r3
    f230:	f1b9 0f07 	cmp.w	r9, #7
    f234:	f8c8 6000 	str.w	r6, [r8]
    f238:	f8c8 3004 	str.w	r3, [r8, #4]
    f23c:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f240:	f300 8194 	bgt.w	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    f244:	f108 0808 	add.w	r8, r8, #8
    f248:	9914      	ldr	r1, [sp, #80]	; 0x50
    f24a:	f109 0301 	add.w	r3, r9, #1
    f24e:	aa20      	add	r2, sp, #128	; 0x80
    f250:	440c      	add	r4, r1
    f252:	2b07      	cmp	r3, #7
    f254:	f8c8 1004 	str.w	r1, [r8, #4]
    f258:	f8c8 2000 	str.w	r2, [r8]
    f25c:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f260:	f77f acf7 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    f264:	aa24      	add	r2, sp, #144	; 0x90
    f266:	ee19 1a90 	vmov	r1, s19
    f26a:	ee19 0a10 	vmov	r0, s18
    f26e:	f01c fe35 	bl	2bedc <__ssprint_r>
    f272:	2800      	cmp	r0, #0
    f274:	d1a4      	bne.n	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f276:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f278:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f27c:	e4eb      	b.n	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f27e:	2d10      	cmp	r5, #16
    f280:	9926      	ldr	r1, [sp, #152]	; 0x98
    f282:	f340 87a0 	ble.w	101c6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1c6>
    f286:	9618      	str	r6, [sp, #96]	; 0x60
    f288:	2410      	movs	r4, #16
    f28a:	462e      	mov	r6, r5
    f28c:	9719      	str	r7, [sp, #100]	; 0x64
    f28e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f290:	4608      	mov	r0, r1
    f292:	ee19 5a10 	vmov	r5, s18
    f296:	ee19 7a90 	vmov	r7, s19
    f29a:	9313      	str	r3, [sp, #76]	; 0x4c
    f29c:	e007      	b.n	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f29e:	bf00      	nop
    f2a0:	0002fb1c 	.word	0x0002fb1c
    f2a4:	0002fb30 	.word	0x0002fb30
    f2a8:	3e10      	subs	r6, #16
    f2aa:	2e10      	cmp	r6, #16
    f2ac:	dd1b      	ble.n	f2e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x886>
    f2ae:	3201      	adds	r2, #1
    f2b0:	3010      	adds	r0, #16
    f2b2:	4bbe      	ldr	r3, [pc, #760]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f2b4:	f108 0808 	add.w	r8, r8, #8
    f2b8:	2a07      	cmp	r2, #7
    f2ba:	f848 4c04 	str.w	r4, [r8, #-4]
    f2be:	f848 3c08 	str.w	r3, [r8, #-8]
    f2c2:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f2c6:	ddef      	ble.n	f2a8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x848>
    f2c8:	aa24      	add	r2, sp, #144	; 0x90
    f2ca:	4639      	mov	r1, r7
    f2cc:	4628      	mov	r0, r5
    f2ce:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f2d2:	f01c fe03 	bl	2bedc <__ssprint_r>
    f2d6:	2800      	cmp	r0, #0
    f2d8:	f040 8447 	bne.w	fb6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110a>
    f2dc:	3e10      	subs	r6, #16
    f2de:	2e10      	cmp	r6, #16
    f2e0:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f2e4:	dce3      	bgt.n	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f2e6:	4635      	mov	r5, r6
    f2e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f2ea:	9e18      	ldr	r6, [sp, #96]	; 0x60
    f2ec:	4601      	mov	r1, r0
    f2ee:	9f19      	ldr	r7, [sp, #100]	; 0x64
    f2f0:	3201      	adds	r2, #1
    f2f2:	186c      	adds	r4, r5, r1
    f2f4:	49ad      	ldr	r1, [pc, #692]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f2f6:	2a07      	cmp	r2, #7
    f2f8:	f8c8 5004 	str.w	r5, [r8, #4]
    f2fc:	f8c8 1000 	str.w	r1, [r8]
    f300:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f304:	f300 841e 	bgt.w	fb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10e4>
    f308:	f108 0808 	add.w	r8, r8, #8
    f30c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f310:	e460      	b.n	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    f312:	aa24      	add	r2, sp, #144	; 0x90
    f314:	ee19 1a90 	vmov	r1, s19
    f318:	ee19 0a10 	vmov	r0, s18
    f31c:	9313      	str	r3, [sp, #76]	; 0x4c
    f31e:	f01c fddd 	bl	2bedc <__ssprint_r>
    f322:	2800      	cmp	r0, #0
    f324:	f47f af4c 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f328:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f32a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f32e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f330:	e462      	b.n	ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>
    f332:	aa24      	add	r2, sp, #144	; 0x90
    f334:	ee19 1a90 	vmov	r1, s19
    f338:	ee19 0a10 	vmov	r0, s18
    f33c:	f01c fdce 	bl	2bedc <__ssprint_r>
    f340:	2800      	cmp	r0, #0
    f342:	f47f af3d 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f346:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f348:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f34c:	e465      	b.n	ec1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ba>
    f34e:	2d10      	cmp	r5, #16
    f350:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f352:	dd24      	ble.n	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    f354:	2610      	movs	r6, #16
    f356:	ee19 9a10 	vmov	r9, s18
    f35a:	ee19 aa90 	vmov	sl, s19
    f35e:	e002      	b.n	f366 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x906>
    f360:	3d10      	subs	r5, #16
    f362:	2d10      	cmp	r5, #16
    f364:	dd1b      	ble.n	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    f366:	3301      	adds	r3, #1
    f368:	3410      	adds	r4, #16
    f36a:	4a90      	ldr	r2, [pc, #576]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f36c:	f108 0808 	add.w	r8, r8, #8
    f370:	2b07      	cmp	r3, #7
    f372:	f848 6c04 	str.w	r6, [r8, #-4]
    f376:	f848 2c08 	str.w	r2, [r8, #-8]
    f37a:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f37e:	ddef      	ble.n	f360 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x900>
    f380:	aa24      	add	r2, sp, #144	; 0x90
    f382:	4651      	mov	r1, sl
    f384:	4648      	mov	r0, r9
    f386:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f38a:	f01c fda7 	bl	2bedc <__ssprint_r>
    f38e:	2800      	cmp	r0, #0
    f390:	f040 8408 	bne.w	fba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1144>
    f394:	3d10      	subs	r5, #16
    f396:	2d10      	cmp	r5, #16
    f398:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f39c:	dce3      	bgt.n	f366 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x906>
    f39e:	3301      	adds	r3, #1
    f3a0:	442c      	add	r4, r5
    f3a2:	4a82      	ldr	r2, [pc, #520]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f3a4:	2b07      	cmp	r3, #7
    f3a6:	f8c8 5004 	str.w	r5, [r8, #4]
    f3aa:	f8c8 2000 	str.w	r2, [r8]
    f3ae:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f3b2:	f77f ac59 	ble.w	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    f3b6:	aa24      	add	r2, sp, #144	; 0x90
    f3b8:	ee19 1a90 	vmov	r1, s19
    f3bc:	ee19 0a10 	vmov	r0, s18
    f3c0:	f01c fd8c 	bl	2bedc <__ssprint_r>
    f3c4:	2800      	cmp	r0, #0
    f3c6:	f47f aefb 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f3ca:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f3cc:	e44c      	b.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    f3ce:	4692      	mov	sl, r2
    f3d0:	ae50      	add	r6, sp, #320	; 0x140
    f3d2:	9207      	str	r2, [sp, #28]
    f3d4:	f7ff bbb4 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f3d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f3dc:	2d00      	cmp	r5, #0
    f3de:	bf08      	it	eq
    f3e0:	2c0a      	cmpeq	r4, #10
    f3e2:	f080 83ef 	bcs.w	fbc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1164>
    f3e6:	3430      	adds	r4, #48	; 0x30
    f3e8:	2301      	movs	r3, #1
    f3ea:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    f3ee:	f8cd b00c 	str.w	fp, [sp, #12]
    f3f2:	9307      	str	r3, [sp, #28]
    f3f4:	f88d 413f 	strb.w	r4, [sp, #319]	; 0x13f
    f3f8:	f7ff bba2 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f3fc:	991e      	ldr	r1, [sp, #120]	; 0x78
    f3fe:	2900      	cmp	r1, #0
    f400:	f340 836b 	ble.w	fada <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x107a>
    f404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f408:	4293      	cmp	r3, r2
    f40a:	bfa8      	it	ge
    f40c:	4613      	movge	r3, r2
    f40e:	2b00      	cmp	r3, #0
    f410:	461d      	mov	r5, r3
    f412:	dd0d      	ble.n	f430 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9d0>
    f414:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f416:	442c      	add	r4, r5
    f418:	f8c8 6000 	str.w	r6, [r8]
    f41c:	3301      	adds	r3, #1
    f41e:	9426      	str	r4, [sp, #152]	; 0x98
    f420:	f8c8 5004 	str.w	r5, [r8, #4]
    f424:	2b07      	cmp	r3, #7
    f426:	9325      	str	r3, [sp, #148]	; 0x94
    f428:	f300 8630 	bgt.w	1008c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x8c>
    f42c:	f108 0808 	add.w	r8, r8, #8
    f430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f432:	2d00      	cmp	r5, #0
    f434:	bfa8      	it	ge
    f436:	1b5b      	subge	r3, r3, r5
    f438:	2b00      	cmp	r3, #0
    f43a:	4699      	mov	r9, r3
    f43c:	f300 8269 	bgt.w	f912 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeb2>
    f440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f442:	4433      	add	r3, r6
    f444:	469b      	mov	fp, r3
    f446:	9b03      	ldr	r3, [sp, #12]
    f448:	055b      	lsls	r3, r3, #21
    f44a:	f100 828f 	bmi.w	f96c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0c>
    f44e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f452:	4293      	cmp	r3, r2
    f454:	db03      	blt.n	f45e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9fe>
    f456:	9a03      	ldr	r2, [sp, #12]
    f458:	07d5      	lsls	r5, r2, #31
    f45a:	f140 8550 	bpl.w	fefe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x149e>
    f45e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f460:	9910      	ldr	r1, [sp, #64]	; 0x40
    f462:	3201      	adds	r2, #1
    f464:	9811      	ldr	r0, [sp, #68]	; 0x44
    f466:	440c      	add	r4, r1
    f468:	f8c8 1004 	str.w	r1, [r8, #4]
    f46c:	2a07      	cmp	r2, #7
    f46e:	f8c8 0000 	str.w	r0, [r8]
    f472:	9426      	str	r4, [sp, #152]	; 0x98
    f474:	9225      	str	r2, [sp, #148]	; 0x94
    f476:	f300 861e 	bgt.w	100b6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb6>
    f47a:	f108 0808 	add.w	r8, r8, #8
    f47e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f480:	4416      	add	r6, r2
    f482:	1ad3      	subs	r3, r2, r3
    f484:	eba6 060b 	sub.w	r6, r6, fp
    f488:	429e      	cmp	r6, r3
    f48a:	bfa8      	it	ge
    f48c:	461e      	movge	r6, r3
    f48e:	2e00      	cmp	r6, #0
    f490:	dd0d      	ble.n	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
    f492:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f494:	4434      	add	r4, r6
    f496:	f8c8 b000 	str.w	fp, [r8]
    f49a:	3201      	adds	r2, #1
    f49c:	9426      	str	r4, [sp, #152]	; 0x98
    f49e:	f8c8 6004 	str.w	r6, [r8, #4]
    f4a2:	2a07      	cmp	r2, #7
    f4a4:	9225      	str	r2, [sp, #148]	; 0x94
    f4a6:	f300 867c 	bgt.w	101a2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1a2>
    f4aa:	f108 0808 	add.w	r8, r8, #8
    f4ae:	2e00      	cmp	r6, #0
    f4b0:	bfac      	ite	ge
    f4b2:	1b9e      	subge	r6, r3, r6
    f4b4:	461e      	movlt	r6, r3
    f4b6:	2e00      	cmp	r6, #0
    f4b8:	f77f abcd 	ble.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f4bc:	2e10      	cmp	r6, #16
    f4be:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4c0:	f340 8372 	ble.w	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    f4c4:	f04f 0910 	mov.w	r9, #16
    f4c8:	4d39      	ldr	r5, [pc, #228]	; (f5b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb50>)
    f4ca:	ee19 aa10 	vmov	sl, s18
    f4ce:	ee19 ba90 	vmov	fp, s19
    f4d2:	e003      	b.n	f4dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa7c>
    f4d4:	3e10      	subs	r6, #16
    f4d6:	2e10      	cmp	r6, #16
    f4d8:	f340 8367 	ble.w	fbaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114a>
    f4dc:	3301      	adds	r3, #1
    f4de:	3410      	adds	r4, #16
    f4e0:	f8c8 5000 	str.w	r5, [r8]
    f4e4:	f108 0808 	add.w	r8, r8, #8
    f4e8:	2b07      	cmp	r3, #7
    f4ea:	f848 9c04 	str.w	r9, [r8, #-4]
    f4ee:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f4f2:	ddef      	ble.n	f4d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa74>
    f4f4:	aa24      	add	r2, sp, #144	; 0x90
    f4f6:	4659      	mov	r1, fp
    f4f8:	4650      	mov	r0, sl
    f4fa:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f4fe:	f01c fced 	bl	2bedc <__ssprint_r>
    f502:	2800      	cmp	r0, #0
    f504:	f040 85d1 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
    f508:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f50c:	e7e2      	b.n	f4d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa74>
    f50e:	46a1      	mov	r9, r4
    f510:	46b3      	mov	fp, r6
    f512:	9b08      	ldr	r3, [sp, #32]
    f514:	b11b      	cbz	r3, f51e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xabe>
    f516:	9908      	ldr	r1, [sp, #32]
    f518:	4648      	mov	r0, r9
    f51a:	f01a fdbd 	bl	2a098 <_free_r>
    f51e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f522:	f013 0f40 	tst.w	r3, #64	; 0x40
    f526:	9b05      	ldr	r3, [sp, #20]
    f528:	bf18      	it	ne
    f52a:	f04f 33ff 	movne.w	r3, #4294967295
    f52e:	9305      	str	r3, [sp, #20]
    f530:	9805      	ldr	r0, [sp, #20]
    f532:	b051      	add	sp, #324	; 0x144
    f534:	ecbd 8b08 	vpop	{d8-d11}
    f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f53c:	469a      	mov	sl, r3
    f53e:	ae50      	add	r6, sp, #320	; 0x140
    f540:	f7ff bafe 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f544:	9b03      	ldr	r3, [sp, #12]
    f546:	07d8      	lsls	r0, r3, #31
    f548:	f53f ae43 	bmi.w	f1d2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x772>
    f54c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f54e:	2301      	movs	r3, #1
    f550:	3401      	adds	r4, #1
    f552:	f8c8 6000 	str.w	r6, [r8]
    f556:	eb02 0903 	add.w	r9, r2, r3
    f55a:	f8c8 3004 	str.w	r3, [r8, #4]
    f55e:	9426      	str	r4, [sp, #152]	; 0x98
    f560:	f1b9 0f07 	cmp.w	r9, #7
    f564:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
    f568:	f77f ae6c 	ble.w	f244 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e4>
    f56c:	aa24      	add	r2, sp, #144	; 0x90
    f56e:	ee19 1a90 	vmov	r1, s19
    f572:	ee19 0a10 	vmov	r0, s18
    f576:	f01c fcb1 	bl	2bedc <__ssprint_r>
    f57a:	2800      	cmp	r0, #0
    f57c:	f47f ae20 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f580:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f582:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f586:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f58a:	e65d      	b.n	f248 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e8>
    f58c:	1e5e      	subs	r6, r3, #1
    f58e:	2e00      	cmp	r6, #0
    f590:	f77f ae5a 	ble.w	f248 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e8>
    f594:	2e10      	cmp	r6, #16
    f596:	4d06      	ldr	r5, [pc, #24]	; (f5b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb50>)
    f598:	f340 83a0 	ble.w	fcdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x127c>
    f59c:	464b      	mov	r3, r9
    f59e:	f04f 0a10 	mov.w	sl, #16
    f5a2:	ee19 9a10 	vmov	r9, s18
    f5a6:	ee19 ba90 	vmov	fp, s19
    f5aa:	e007      	b.n	f5bc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb5c>
    f5ac:	0002fb20 	.word	0x0002fb20
    f5b0:	0002fb30 	.word	0x0002fb30
    f5b4:	3e10      	subs	r6, #16
    f5b6:	2e10      	cmp	r6, #16
    f5b8:	f340 838f 	ble.w	fcda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x127a>
    f5bc:	3301      	adds	r3, #1
    f5be:	3410      	adds	r4, #16
    f5c0:	f8c8 5000 	str.w	r5, [r8]
    f5c4:	f108 0808 	add.w	r8, r8, #8
    f5c8:	2b07      	cmp	r3, #7
    f5ca:	f848 ac04 	str.w	sl, [r8, #-4]
    f5ce:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f5d2:	ddef      	ble.n	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f5d4:	aa24      	add	r2, sp, #144	; 0x90
    f5d6:	4659      	mov	r1, fp
    f5d8:	4648      	mov	r0, r9
    f5da:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f5de:	f01c fc7d 	bl	2bedc <__ssprint_r>
    f5e2:	2800      	cmp	r0, #0
    f5e4:	d195      	bne.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    f5e6:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f5ea:	e7e3      	b.n	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f5ec:	aa24      	add	r2, sp, #144	; 0x90
    f5ee:	ee19 1a90 	vmov	r1, s19
    f5f2:	ee19 0a10 	vmov	r0, s18
    f5f6:	f01c fc71 	bl	2bedc <__ssprint_r>
    f5fa:	2800      	cmp	r0, #0
    f5fc:	f47f ade0 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f600:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f602:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f606:	f7ff bb13 	b.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f60a:	f852 4b04 	ldr.w	r4, [r2], #4
    f60e:	f01b 0f10 	tst.w	fp, #16
    f612:	f04f 0301 	mov.w	r3, #1
    f616:	9209      	str	r2, [sp, #36]	; 0x24
    f618:	d10a      	bne.n	f630 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd0>
    f61a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f61e:	d003      	beq.n	f628 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbc8>
    f620:	b2a4      	uxth	r4, r4
    f622:	2500      	movs	r5, #0
    f624:	f7ff ba68 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f628:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f62c:	bf18      	it	ne
    f62e:	b2e4      	uxtbne	r4, r4
    f630:	2500      	movs	r5, #0
    f632:	f7ff ba61 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f636:	222d      	movs	r2, #45	; 0x2d
    f638:	4264      	negs	r4, r4
    f63a:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f63e:	f04f 0301 	mov.w	r3, #1
    f642:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    f646:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    f64a:	f7ff ba58 	b.w	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
    f64e:	aa24      	add	r2, sp, #144	; 0x90
    f650:	ee19 1a90 	vmov	r1, s19
    f654:	ee19 0a10 	vmov	r0, s18
    f658:	f01c fc40 	bl	2bedc <__ssprint_r>
    f65c:	2800      	cmp	r0, #0
    f65e:	f47f adaf 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f662:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f664:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f668:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f66c:	e5d1      	b.n	f212 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7b2>
    f66e:	aa24      	add	r2, sp, #144	; 0x90
    f670:	ee19 1a90 	vmov	r1, s19
    f674:	ee19 0a10 	vmov	r0, s18
    f678:	f01c fc30 	bl	2bedc <__ssprint_r>
    f67c:	2800      	cmp	r0, #0
    f67e:	f47f ad9f 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f682:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f684:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f688:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f68a:	e5b1      	b.n	f1f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x790>
    f68c:	9b03      	ldr	r3, [sp, #12]
    f68e:	07d9      	lsls	r1, r3, #31
    f690:	f57f aae1 	bpl.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f694:	e480      	b.n	ef98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x538>
    f696:	f897 9000 	ldrb.w	r9, [r7]
    f69a:	9309      	str	r3, [sp, #36]	; 0x24
    f69c:	f7ff b96a 	b.w	e974 <_svfprintf_r+0xbc>
    f6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6a2:	f853 1b04 	ldr.w	r1, [r3], #4
    f6a6:	9309      	str	r3, [sp, #36]	; 0x24
    f6a8:	9b05      	ldr	r3, [sp, #20]
    f6aa:	17dd      	asrs	r5, r3, #31
    f6ac:	461a      	mov	r2, r3
    f6ae:	462b      	mov	r3, r5
    f6b0:	e9c1 2300 	strd	r2, r3, [r1]
    f6b4:	f7ff b930 	b.w	e918 <_svfprintf_r+0x60>
    f6b8:	2320      	movs	r3, #32
    f6ba:	f897 9000 	ldrb.w	r9, [r7]
    f6be:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    f6c2:	f7ff b957 	b.w	e974 <_svfprintf_r+0xbc>
    f6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6c8:	f853 4b04 	ldr.w	r4, [r3], #4
    f6cc:	17e5      	asrs	r5, r4, #31
    f6ce:	9309      	str	r3, [sp, #36]	; 0x24
    f6d0:	4622      	mov	r2, r4
    f6d2:	462b      	mov	r3, r5
    f6d4:	f7ff b9e1 	b.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    f6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6da:	2500      	movs	r5, #0
    f6dc:	f853 4b04 	ldr.w	r4, [r3], #4
    f6e0:	9309      	str	r3, [sp, #36]	; 0x24
    f6e2:	f7ff ba05 	b.w	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    f6e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f6ea:	4602      	mov	r2, r0
    f6ec:	460b      	mov	r3, r1
    f6ee:	f7fd fd93 	bl	d218 <__aeabi_dcmpun>
    f6f2:	2800      	cmp	r0, #0
    f6f4:	f040 85e5 	bne.w	102c2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2c2>
    f6f8:	f029 0320 	bic.w	r3, r9, #32
    f6fc:	2b41      	cmp	r3, #65	; 0x41
    f6fe:	9304      	str	r3, [sp, #16]
    f700:	f040 8328 	bne.w	fd54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f4>
    f704:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f708:	f04f 0230 	mov.w	r2, #48	; 0x30
    f70c:	bf0c      	ite	eq
    f70e:	2378      	moveq	r3, #120	; 0x78
    f710:	2358      	movne	r3, #88	; 0x58
    f712:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
    f716:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
    f71a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    f71e:	f300 8400 	bgt.w	ff22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c2>
    f722:	ae37      	add	r6, sp, #220	; 0xdc
    f724:	9008      	str	r0, [sp, #32]
    f726:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f72a:	2a00      	cmp	r2, #0
    f72c:	f280 8577 	bge.w	1021e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x21e>
    f730:	232d      	movs	r3, #45	; 0x2d
    f732:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f736:	9313      	str	r3, [sp, #76]	; 0x4c
    f738:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    f73c:	911a      	str	r1, [sp, #104]	; 0x68
    f73e:	931b      	str	r3, [sp, #108]	; 0x6c
    f740:	a81e      	add	r0, sp, #120	; 0x78
    f742:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
    f746:	f01c f947 	bl	2b9d8 <frexp>
    f74a:	2200      	movs	r2, #0
    f74c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f750:	ec51 0b10 	vmov	r0, r1, d0
    f754:	f7fd fb4e 	bl	cdf4 <__aeabi_dmul>
    f758:	2200      	movs	r2, #0
    f75a:	2300      	movs	r3, #0
    f75c:	4604      	mov	r4, r0
    f75e:	460d      	mov	r5, r1
    f760:	f7fc ff80 	bl	c664 <__aeabi_dcmpeq>
    f764:	b108      	cbz	r0, f76a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0a>
    f766:	2301      	movs	r3, #1
    f768:	931e      	str	r3, [sp, #120]	; 0x78
    f76a:	4ab9      	ldr	r2, [pc, #740]	; (fa50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff0>)
    f76c:	f10a 3aff 	add.w	sl, sl, #4294967295
    f770:	4bb8      	ldr	r3, [pc, #736]	; (fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>)
    f772:	46b3      	mov	fp, r6
    f774:	9714      	str	r7, [sp, #80]	; 0x50
    f776:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f77a:	bf18      	it	ne
    f77c:	461a      	movne	r2, r3
    f77e:	f8cd 801c 	str.w	r8, [sp, #28]
    f782:	4617      	mov	r7, r2
    f784:	920a      	str	r2, [sp, #40]	; 0x28
    f786:	e9cd 960c 	strd	r9, r6, [sp, #48]	; 0x30
    f78a:	e002      	b.n	f792 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd32>
    f78c:	f7fc ff6a 	bl	c664 <__aeabi_dcmpeq>
    f790:	bb18      	cbnz	r0, f7da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd7a>
    f792:	2200      	movs	r2, #0
    f794:	4bb0      	ldr	r3, [pc, #704]	; (fa58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff8>)
    f796:	4620      	mov	r0, r4
    f798:	4629      	mov	r1, r5
    f79a:	f7fd fb2b 	bl	cdf4 <__aeabi_dmul>
    f79e:	460d      	mov	r5, r1
    f7a0:	4604      	mov	r4, r0
    f7a2:	f7fc ff91 	bl	c6c8 <__aeabi_d2iz>
    f7a6:	4606      	mov	r6, r0
    f7a8:	f7fc fe9c 	bl	c4e4 <__aeabi_i2d>
    f7ac:	4602      	mov	r2, r0
    f7ae:	460b      	mov	r3, r1
    f7b0:	4620      	mov	r0, r4
    f7b2:	4629      	mov	r1, r5
    f7b4:	f7fc fd48 	bl	c248 <__aeabi_dsub>
    f7b8:	f817 c006 	ldrb.w	ip, [r7, r6]
    f7bc:	f1ba 3fff 	cmp.w	sl, #4294967295
    f7c0:	46d8      	mov	r8, fp
    f7c2:	46d1      	mov	r9, sl
    f7c4:	4604      	mov	r4, r0
    f7c6:	460d      	mov	r5, r1
    f7c8:	f04f 0200 	mov.w	r2, #0
    f7cc:	f04f 0300 	mov.w	r3, #0
    f7d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    f7d4:	f80b cb01 	strb.w	ip, [fp], #1
    f7d8:	d1d8      	bne.n	f78c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2c>
    f7da:	2200      	movs	r2, #0
    f7dc:	4b9f      	ldr	r3, [pc, #636]	; (fa5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffc>)
    f7de:	4620      	mov	r0, r4
    f7e0:	4629      	mov	r1, r5
    f7e2:	46b2      	mov	sl, r6
    f7e4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    f7e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f7ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f7ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
    f7f0:	f8cd 901c 	str.w	r9, [sp, #28]
    f7f4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    f7f8:	f7fc ff5c 	bl	c6b4 <__aeabi_dcmpgt>
    f7fc:	2800      	cmp	r0, #0
    f7fe:	f040 858a 	bne.w	10316 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x316>
    f802:	4620      	mov	r0, r4
    f804:	4629      	mov	r1, r5
    f806:	2200      	movs	r2, #0
    f808:	4b94      	ldr	r3, [pc, #592]	; (fa5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffc>)
    f80a:	f7fc ff2b 	bl	c664 <__aeabi_dcmpeq>
    f80e:	b118      	cbz	r0, f818 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdb8>
    f810:	4653      	mov	r3, sl
    f812:	07db      	lsls	r3, r3, #31
    f814:	f100 857f 	bmi.w	10316 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x316>
    f818:	9b07      	ldr	r3, [sp, #28]
    f81a:	2b00      	cmp	r3, #0
    f81c:	db07      	blt.n	f82e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdce>
    f81e:	9b07      	ldr	r3, [sp, #28]
    f820:	2230      	movs	r2, #48	; 0x30
    f822:	3301      	adds	r3, #1
    f824:	445b      	add	r3, fp
    f826:	f80b 2b01 	strb.w	r2, [fp], #1
    f82a:	455b      	cmp	r3, fp
    f82c:	d1fb      	bne.n	f826 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc6>
    f82e:	9b03      	ldr	r3, [sp, #12]
    f830:	f043 0302 	orr.w	r3, r3, #2
    f834:	9303      	str	r3, [sp, #12]
    f836:	ebab 0306 	sub.w	r3, fp, r6
    f83a:	930c      	str	r3, [sp, #48]	; 0x30
    f83c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f83e:	930a      	str	r3, [sp, #40]	; 0x28
    f840:	e2d0      	b.n	fde4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1384>
    f842:	4b83      	ldr	r3, [pc, #524]	; (fa50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff0>)
    f844:	9312      	str	r3, [sp, #72]	; 0x48
    f846:	9b03      	ldr	r3, [sp, #12]
    f848:	0699      	lsls	r1, r3, #26
    f84a:	f140 80ea 	bpl.w	fa22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc2>
    f84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f850:	3307      	adds	r3, #7
    f852:	f023 0307 	bic.w	r3, r3, #7
    f856:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    f85a:	9309      	str	r3, [sp, #36]	; 0x24
    f85c:	ea54 0305 	orrs.w	r3, r4, r5
    f860:	d00a      	beq.n	f878 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe18>
    f862:	9b03      	ldr	r3, [sp, #12]
    f864:	07de      	lsls	r6, r3, #31
    f866:	d507      	bpl.n	f878 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe18>
    f868:	f043 0302 	orr.w	r3, r3, #2
    f86c:	f88d 9075 	strb.w	r9, [sp, #117]	; 0x75
    f870:	9303      	str	r3, [sp, #12]
    f872:	2330      	movs	r3, #48	; 0x30
    f874:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    f878:	9b03      	ldr	r3, [sp, #12]
    f87a:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    f87e:	2302      	movs	r3, #2
    f880:	f7ff b93a 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f884:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f888:	f7ff bb08 	b.w	ee9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43c>
    f88c:	4b71      	ldr	r3, [pc, #452]	; (fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>)
    f88e:	9312      	str	r3, [sp, #72]	; 0x48
    f890:	e7d9      	b.n	f846 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde6>
    f892:	f043 0320 	orr.w	r3, r3, #32
    f896:	f897 9001 	ldrb.w	r9, [r7, #1]
    f89a:	3701      	adds	r7, #1
    f89c:	9303      	str	r3, [sp, #12]
    f89e:	f7ff b869 	b.w	e974 <_svfprintf_r+0xbc>
    f8a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f8a6:	f897 9001 	ldrb.w	r9, [r7, #1]
    f8aa:	3701      	adds	r7, #1
    f8ac:	9303      	str	r3, [sp, #12]
    f8ae:	f7ff b861 	b.w	e974 <_svfprintf_r+0xbc>
    f8b2:	aa24      	add	r2, sp, #144	; 0x90
    f8b4:	ee19 1a90 	vmov	r1, s19
    f8b8:	ee19 0a10 	vmov	r0, s18
    f8bc:	f01c fb0e 	bl	2bedc <__ssprint_r>
    f8c0:	2800      	cmp	r0, #0
    f8c2:	f47f ac7d 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f8c6:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f8c8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f8cc:	f7ff bb74 	b.w	efb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x558>
    f8d0:	2140      	movs	r1, #64	; 0x40
    f8d2:	4648      	mov	r0, r9
    f8d4:	f016 fa76 	bl	25dc4 <_malloc_r>
    f8d8:	f8cb 0000 	str.w	r0, [fp]
    f8dc:	f8cb 0010 	str.w	r0, [fp, #16]
    f8e0:	2800      	cmp	r0, #0
    f8e2:	f000 858d 	beq.w	10400 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x400>
    f8e6:	2340      	movs	r3, #64	; 0x40
    f8e8:	f8cb 3014 	str.w	r3, [fp, #20]
    f8ec:	f7fe bffe 	b.w	e8ec <_svfprintf_r+0x34>
    f8f0:	4630      	mov	r0, r6
    f8f2:	46aa      	mov	sl, r5
    f8f4:	f017 f9b0 	bl	26c58 <strlen>
    f8f8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    f8fc:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f900:	9007      	str	r0, [sp, #28]
    f902:	950d      	str	r5, [sp, #52]	; 0x34
    f904:	9304      	str	r3, [sp, #16]
    f906:	e9cd 5408 	strd	r5, r4, [sp, #32]
    f90a:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    f90e:	f7ff b923 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    f912:	f1b9 0f10 	cmp.w	r9, #16
    f916:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f918:	f340 8564 	ble.w	103e4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e4>
    f91c:	4622      	mov	r2, r4
    f91e:	f04f 0a10 	mov.w	sl, #16
    f922:	4d4f      	ldr	r5, [pc, #316]	; (fa60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1000>)
    f924:	ee19 ba10 	vmov	fp, s18
    f928:	ee19 4a90 	vmov	r4, s19
    f92c:	e005      	b.n	f93a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeda>
    f92e:	f1a9 0910 	sub.w	r9, r9, #16
    f932:	f1b9 0f10 	cmp.w	r9, #16
    f936:	f340 82c4 	ble.w	fec2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1462>
    f93a:	3301      	adds	r3, #1
    f93c:	3210      	adds	r2, #16
    f93e:	f8c8 5000 	str.w	r5, [r8]
    f942:	f108 0808 	add.w	r8, r8, #8
    f946:	2b07      	cmp	r3, #7
    f948:	f848 ac04 	str.w	sl, [r8, #-4]
    f94c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f950:	dded      	ble.n	f92e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xece>
    f952:	aa24      	add	r2, sp, #144	; 0x90
    f954:	4621      	mov	r1, r4
    f956:	4658      	mov	r0, fp
    f958:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f95c:	f01c fabe 	bl	2bedc <__ssprint_r>
    f960:	2800      	cmp	r0, #0
    f962:	f040 847f 	bne.w	10264 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x264>
    f966:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f96a:	e7e0      	b.n	f92e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xece>
    f96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f96e:	2b00      	cmp	r3, #0
    f970:	dc0a      	bgt.n	f988 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf28>
    f972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f974:	2b00      	cmp	r3, #0
    f976:	dc07      	bgt.n	f988 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf28>
    f978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f97a:	18f3      	adds	r3, r6, r3
    f97c:	9307      	str	r3, [sp, #28]
    f97e:	9b07      	ldr	r3, [sp, #28]
    f980:	459b      	cmp	fp, r3
    f982:	bf28      	it	cs
    f984:	469b      	movcs	fp, r3
    f986:	e562      	b.n	f44e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9ee>
    f988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f98a:	4622      	mov	r2, r4
    f98c:	9613      	str	r6, [sp, #76]	; 0x4c
    f98e:	ee19 9a10 	vmov	r9, s18
    f992:	18f3      	adds	r3, r6, r3
    f994:	9718      	str	r7, [sp, #96]	; 0x60
    f996:	465e      	mov	r6, fp
    f998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; fa60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1000>
    f99c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f9a0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    f9a2:	930a      	str	r3, [sp, #40]	; 0x28
    f9a4:	f1bb 0f00 	cmp.w	fp, #0
    f9a8:	d045      	beq.n	fa36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfd6>
    f9aa:	f10b 3bff 	add.w	fp, fp, #4294967295
    f9ae:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f9b2:	3001      	adds	r0, #1
    f9b4:	9916      	ldr	r1, [sp, #88]	; 0x58
    f9b6:	441a      	add	r2, r3
    f9b8:	f8c8 3004 	str.w	r3, [r8, #4]
    f9bc:	2807      	cmp	r0, #7
    f9be:	f8c8 1000 	str.w	r1, [r8]
    f9c2:	9226      	str	r2, [sp, #152]	; 0x98
    f9c4:	9025      	str	r0, [sp, #148]	; 0x94
    f9c6:	dc7b      	bgt.n	fac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1060>
    f9c8:	f108 0808 	add.w	r8, r8, #8
    f9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9ce:	7838      	ldrb	r0, [r7, #0]
    f9d0:	1b9d      	subs	r5, r3, r6
    f9d2:	9307      	str	r3, [sp, #28]
    f9d4:	4285      	cmp	r5, r0
    f9d6:	bfa8      	it	ge
    f9d8:	4605      	movge	r5, r0
    f9da:	2d00      	cmp	r5, #0
    f9dc:	dd0e      	ble.n	f9fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf9c>
    f9de:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9e0:	442a      	add	r2, r5
    f9e2:	f8c8 6000 	str.w	r6, [r8]
    f9e6:	3001      	adds	r0, #1
    f9e8:	9226      	str	r2, [sp, #152]	; 0x98
    f9ea:	f8c8 5004 	str.w	r5, [r8, #4]
    f9ee:	2807      	cmp	r0, #7
    f9f0:	9025      	str	r0, [sp, #148]	; 0x94
    f9f2:	f300 813c 	bgt.w	fc6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120e>
    f9f6:	f108 0808 	add.w	r8, r8, #8
    f9fa:	7838      	ldrb	r0, [r7, #0]
    f9fc:	2d00      	cmp	r5, #0
    f9fe:	bfac      	ite	ge
    fa00:	1b45      	subge	r5, r0, r5
    fa02:	4605      	movlt	r5, r0
    fa04:	2d00      	cmp	r5, #0
    fa06:	dc1b      	bgt.n	fa40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe0>
    fa08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa0a:	4406      	add	r6, r0
    fa0c:	2b00      	cmp	r3, #0
    fa0e:	dcc9      	bgt.n	f9a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf44>
    fa10:	f1bb 0f00 	cmp.w	fp, #0
    fa14:	dcc6      	bgt.n	f9a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf44>
    fa16:	46b3      	mov	fp, r6
    fa18:	9717      	str	r7, [sp, #92]	; 0x5c
    fa1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    fa1c:	4614      	mov	r4, r2
    fa1e:	9f18      	ldr	r7, [sp, #96]	; 0x60
    fa20:	e7ad      	b.n	f97e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf1e>
    fa22:	9b03      	ldr	r3, [sp, #12]
    fa24:	06da      	lsls	r2, r3, #27
    fa26:	f140 80a3 	bpl.w	fb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1110>
    fa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa2c:	2500      	movs	r5, #0
    fa2e:	f853 4b04 	ldr.w	r4, [r3], #4
    fa32:	9309      	str	r3, [sp, #36]	; 0x24
    fa34:	e712      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fa36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa38:	3f01      	subs	r7, #1
    fa3a:	3b01      	subs	r3, #1
    fa3c:	930b      	str	r3, [sp, #44]	; 0x2c
    fa3e:	e7b6      	b.n	f9ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4e>
    fa40:	2d10      	cmp	r5, #16
    fa42:	9825      	ldr	r0, [sp, #148]	; 0x94
    fa44:	dd2d      	ble.n	faa2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1042>
    fa46:	960d      	str	r6, [sp, #52]	; 0x34
    fa48:	2410      	movs	r4, #16
    fa4a:	ee19 6a90 	vmov	r6, s19
    fa4e:	e00c      	b.n	fa6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100a>
    fa50:	0002faec 	.word	0x0002faec
    fa54:	0002fb00 	.word	0x0002fb00
    fa58:	40300000 	.word	0x40300000
    fa5c:	3fe00000 	.word	0x3fe00000
    fa60:	0002fb30 	.word	0x0002fb30
    fa64:	3d10      	subs	r5, #16
    fa66:	2d10      	cmp	r5, #16
    fa68:	dd1a      	ble.n	faa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1040>
    fa6a:	3001      	adds	r0, #1
    fa6c:	3210      	adds	r2, #16
    fa6e:	f8c8 a000 	str.w	sl, [r8]
    fa72:	f108 0808 	add.w	r8, r8, #8
    fa76:	2807      	cmp	r0, #7
    fa78:	f848 4c04 	str.w	r4, [r8, #-4]
    fa7c:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fa80:	ddf0      	ble.n	fa64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1004>
    fa82:	aa24      	add	r2, sp, #144	; 0x90
    fa84:	4631      	mov	r1, r6
    fa86:	4648      	mov	r0, r9
    fa88:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fa8c:	f01c fa26 	bl	2bedc <__ssprint_r>
    fa90:	2800      	cmp	r0, #0
    fa92:	f040 830d 	bne.w	100b0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb0>
    fa96:	3d10      	subs	r5, #16
    fa98:	2d10      	cmp	r5, #16
    fa9a:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    fa9e:	dce4      	bgt.n	fa6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100a>
    faa0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    faa2:	3001      	adds	r0, #1
    faa4:	442a      	add	r2, r5
    faa6:	f8c8 a000 	str.w	sl, [r8]
    faaa:	2807      	cmp	r0, #7
    faac:	f8c8 5004 	str.w	r5, [r8, #4]
    fab0:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fab4:	f300 8323 	bgt.w	100fe <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xfe>
    fab8:	f108 0808 	add.w	r8, r8, #8
    fabc:	7838      	ldrb	r0, [r7, #0]
    fabe:	e7a3      	b.n	fa08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa8>
    fac0:	aa24      	add	r2, sp, #144	; 0x90
    fac2:	ee19 1a90 	vmov	r1, s19
    fac6:	4648      	mov	r0, r9
    fac8:	f01c fa08 	bl	2bedc <__ssprint_r>
    facc:	2800      	cmp	r0, #0
    face:	f47f ab79 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
    fad2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fad4:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fad8:	e778      	b.n	f9cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf6c>
    fada:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fadc:	2201      	movs	r2, #1
    fade:	3401      	adds	r4, #1
    fae0:	4899      	ldr	r0, [pc, #612]	; (fd48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e8>)
    fae2:	4413      	add	r3, r2
    fae4:	f8c8 2004 	str.w	r2, [r8, #4]
    fae8:	9426      	str	r4, [sp, #152]	; 0x98
    faea:	2b07      	cmp	r3, #7
    faec:	f8c8 0000 	str.w	r0, [r8]
    faf0:	9325      	str	r3, [sp, #148]	; 0x94
    faf2:	f300 81f5 	bgt.w	fee0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1480>
    faf6:	f108 0808 	add.w	r8, r8, #8
    fafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fafc:	430b      	orrs	r3, r1
    fafe:	f000 82ea 	beq.w	100d6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xd6>
    fb02:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb04:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb06:	3301      	adds	r3, #1
    fb08:	1902      	adds	r2, r0, r4
    fb0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    fb0c:	2b07      	cmp	r3, #7
    fb0e:	f8c8 0004 	str.w	r0, [r8, #4]
    fb12:	f8c8 4000 	str.w	r4, [r8]
    fb16:	9226      	str	r2, [sp, #152]	; 0x98
    fb18:	9325      	str	r3, [sp, #148]	; 0x94
    fb1a:	f300 82a7 	bgt.w	1006c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6c>
    fb1e:	f108 0808 	add.w	r8, r8, #8
    fb22:	2900      	cmp	r1, #0
    fb24:	f2c0 8352 	blt.w	101cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1cc>
    fb28:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb2a:	3301      	adds	r3, #1
    fb2c:	f8c8 6000 	str.w	r6, [r8]
    fb30:	188c      	adds	r4, r1, r2
    fb32:	2b07      	cmp	r3, #7
    fb34:	f8c8 1004 	str.w	r1, [r8, #4]
    fb38:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fb3c:	f77f a889 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    fb40:	f7ff bb90 	b.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    fb44:	aa24      	add	r2, sp, #144	; 0x90
    fb46:	ee19 1a90 	vmov	r1, s19
    fb4a:	ee19 0a10 	vmov	r0, s18
    fb4e:	9313      	str	r3, [sp, #76]	; 0x4c
    fb50:	f01c f9c4 	bl	2bedc <__ssprint_r>
    fb54:	2800      	cmp	r0, #0
    fb56:	f47f ab33 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fb5a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    fb5e:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fb62:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fb66:	f7ff b835 	b.w	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    fb6a:	46a9      	mov	r9, r5
    fb6c:	46bb      	mov	fp, r7
    fb6e:	e4d0      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    fb70:	9b03      	ldr	r3, [sp, #12]
    fb72:	065b      	lsls	r3, r3, #25
    fb74:	f140 80da 	bpl.w	fd2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12cc>
    fb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb7a:	2500      	movs	r5, #0
    fb7c:	f853 4b04 	ldr.w	r4, [r3], #4
    fb80:	b2a4      	uxth	r4, r4
    fb82:	9309      	str	r3, [sp, #36]	; 0x24
    fb84:	e66a      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fb86:	aa24      	add	r2, sp, #144	; 0x90
    fb88:	ee19 1a90 	vmov	r1, s19
    fb8c:	ee19 0a10 	vmov	r0, s18
    fb90:	f01c f9a4 	bl	2bedc <__ssprint_r>
    fb94:	2800      	cmp	r0, #0
    fb96:	f47f ab13 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fb9a:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb9c:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fba0:	f7ff b9f5 	b.w	ef8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52e>
    fba4:	46d3      	mov	fp, sl
    fba6:	e4b4      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    fba8:	4d68      	ldr	r5, [pc, #416]	; (fd4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ec>)
    fbaa:	3301      	adds	r3, #1
    fbac:	4434      	add	r4, r6
    fbae:	f8c8 5000 	str.w	r5, [r8]
    fbb2:	2b07      	cmp	r3, #7
    fbb4:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fbb8:	f8c8 6004 	str.w	r6, [r8, #4]
    fbbc:	f77f a849 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    fbc0:	f7ff bb50 	b.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    fbc4:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
    fbc8:	2200      	movs	r2, #0
    fbca:	f8cd 900c 	str.w	r9, [sp, #12]
    fbce:	ae50      	add	r6, sp, #320	; 0x140
    fbd0:	f8cd 8010 	str.w	r8, [sp, #16]
    fbd4:	4691      	mov	r9, r2
    fbd6:	9707      	str	r7, [sp, #28]
    fbd8:	461f      	mov	r7, r3
    fbda:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    fbde:	e007      	b.n	fbf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1190>
    fbe0:	f7fc fe3a 	bl	c858 <__aeabi_uldivmod>
    fbe4:	2d00      	cmp	r5, #0
    fbe6:	bf08      	it	eq
    fbe8:	2c0a      	cmpeq	r4, #10
    fbea:	d321      	bcc.n	fc30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11d0>
    fbec:	4604      	mov	r4, r0
    fbee:	460d      	mov	r5, r1
    fbf0:	220a      	movs	r2, #10
    fbf2:	2300      	movs	r3, #0
    fbf4:	4620      	mov	r0, r4
    fbf6:	4629      	mov	r1, r5
    fbf8:	f7fc fe2e 	bl	c858 <__aeabi_uldivmod>
    fbfc:	4694      	mov	ip, r2
    fbfe:	4620      	mov	r0, r4
    fc00:	4629      	mov	r1, r5
    fc02:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    fc06:	220a      	movs	r2, #10
    fc08:	2300      	movs	r3, #0
    fc0a:	f109 0901 	add.w	r9, r9, #1
    fc0e:	f806 cc01 	strb.w	ip, [r6, #-1]
    fc12:	3e01      	subs	r6, #1
    fc14:	2f00      	cmp	r7, #0
    fc16:	d0e3      	beq.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc18:	f898 c000 	ldrb.w	ip, [r8]
    fc1c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fc20:	d0de      	beq.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc22:	45cc      	cmp	ip, r9
    fc24:	d1dc      	bne.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc26:	429d      	cmp	r5, r3
    fc28:	bf08      	it	eq
    fc2a:	4294      	cmpeq	r4, r2
    fc2c:	f080 8275 	bcs.w	1011a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x11a>
    fc30:	ab50      	add	r3, sp, #320	; 0x140
    fc32:	9f07      	ldr	r7, [sp, #28]
    fc34:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    fc38:	1b9b      	subs	r3, r3, r6
    fc3a:	f8dd 900c 	ldr.w	r9, [sp, #12]
    fc3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    fc42:	f8cd b00c 	str.w	fp, [sp, #12]
    fc46:	f8dd 8010 	ldr.w	r8, [sp, #16]
    fc4a:	9307      	str	r3, [sp, #28]
    fc4c:	f7fe bf78 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    fc50:	aa24      	add	r2, sp, #144	; 0x90
    fc52:	ee19 1a90 	vmov	r1, s19
    fc56:	ee19 0a10 	vmov	r0, s18
    fc5a:	f01c f93f 	bl	2bedc <__ssprint_r>
    fc5e:	2800      	cmp	r0, #0
    fc60:	f47f aaae 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fc64:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fc66:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc6a:	f7fe bfda 	b.w	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    fc6e:	aa24      	add	r2, sp, #144	; 0x90
    fc70:	ee19 1a90 	vmov	r1, s19
    fc74:	4648      	mov	r0, r9
    fc76:	f01c f931 	bl	2bedc <__ssprint_r>
    fc7a:	2800      	cmp	r0, #0
    fc7c:	f47f aaa2 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
    fc80:	7838      	ldrb	r0, [r7, #0]
    fc82:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc86:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc88:	e6b8      	b.n	f9fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf9c>
    fc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc8c:	9905      	ldr	r1, [sp, #20]
    fc8e:	f853 2b04 	ldr.w	r2, [r3], #4
    fc92:	6011      	str	r1, [r2, #0]
    fc94:	9309      	str	r3, [sp, #36]	; 0x24
    fc96:	f7fe be3f 	b.w	e918 <_svfprintf_r+0x60>
    fc9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fc9c:	ee19 ba90 	vmov	fp, s19
    fca0:	2b00      	cmp	r3, #0
    fca2:	f43f ac3c 	beq.w	f51e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xabe>
    fca6:	ee19 0a10 	vmov	r0, s18
    fcaa:	aa24      	add	r2, sp, #144	; 0x90
    fcac:	ee19 1a90 	vmov	r1, s19
    fcb0:	f01c f914 	bl	2bedc <__ssprint_r>
    fcb4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    fcb8:	e433      	b.n	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
    fcba:	4653      	mov	r3, sl
    fcbc:	4632      	mov	r2, r6
    fcbe:	46b2      	mov	sl, r6
    fcc0:	960d      	str	r6, [sp, #52]	; 0x34
    fcc2:	2b06      	cmp	r3, #6
    fcc4:	bf28      	it	cs
    fcc6:	2306      	movcs	r3, #6
    fcc8:	e9cd 6408 	strd	r6, r4, [sp, #32]
    fccc:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    fcd0:	9304      	str	r3, [sp, #16]
    fcd2:	4e1f      	ldr	r6, [pc, #124]	; (fd50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f0>)
    fcd4:	9307      	str	r3, [sp, #28]
    fcd6:	f7fe bf3f 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    fcda:	4699      	mov	r9, r3
    fcdc:	f109 0901 	add.w	r9, r9, #1
    fce0:	4434      	add	r4, r6
    fce2:	f8c8 5000 	str.w	r5, [r8]
    fce6:	f1b9 0f07 	cmp.w	r9, #7
    fcea:	f8c8 6004 	str.w	r6, [r8, #4]
    fcee:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    fcf2:	f77f aaa7 	ble.w	f244 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e4>
    fcf6:	e439      	b.n	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    fcf8:	9b03      	ldr	r3, [sp, #12]
    fcfa:	f413 7f00 	tst.w	r3, #512	; 0x200
    fcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd00:	f853 4b04 	ldr.w	r4, [r3], #4
    fd04:	bf18      	it	ne
    fd06:	b264      	sxtbne	r4, r4
    fd08:	9309      	str	r3, [sp, #36]	; 0x24
    fd0a:	17e5      	asrs	r5, r4, #31
    fd0c:	4622      	mov	r2, r4
    fd0e:	462b      	mov	r3, r5
    fd10:	f7fe bec3 	b.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    fd14:	9b03      	ldr	r3, [sp, #12]
    fd16:	2500      	movs	r5, #0
    fd18:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd1e:	f853 4b04 	ldr.w	r4, [r3], #4
    fd22:	bf18      	it	ne
    fd24:	b2e4      	uxtbne	r4, r4
    fd26:	9309      	str	r3, [sp, #36]	; 0x24
    fd28:	f7fe bee2 	b.w	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    fd2c:	9b03      	ldr	r3, [sp, #12]
    fd2e:	2500      	movs	r5, #0
    fd30:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd36:	f853 4b04 	ldr.w	r4, [r3], #4
    fd3a:	bf18      	it	ne
    fd3c:	b2e4      	uxtbne	r4, r4
    fd3e:	9309      	str	r3, [sp, #36]	; 0x24
    fd40:	e58c      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fd42:	4d02      	ldr	r5, [pc, #8]	; (fd4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ec>)
    fd44:	f7ff b9e8 	b.w	f118 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b8>
    fd48:	0002fb1c 	.word	0x0002fb1c
    fd4c:	0002fb30 	.word	0x0002fb30
    fd50:	0002fb14 	.word	0x0002fb14
    fd54:	f1ba 3fff 	cmp.w	sl, #4294967295
    fd58:	f000 80f0 	beq.w	ff3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14dc>
    fd5c:	f1ba 0f00 	cmp.w	sl, #0
    fd60:	f040 80ee 	bne.w	ff40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e0>
    fd64:	9b04      	ldr	r3, [sp, #16]
    fd66:	2b47      	cmp	r3, #71	; 0x47
    fd68:	f040 80ea 	bne.w	ff40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e0>
    fd6c:	9a03      	ldr	r2, [sp, #12]
    fd6e:	f04f 0a01 	mov.w	sl, #1
    fd72:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
    fd76:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    fd7a:	4663      	mov	r3, ip
    fd7c:	2b00      	cmp	r3, #0
    fd7e:	f2c0 82b5 	blt.w	102ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ec>
    fd82:	4654      	mov	r4, sl
    fd84:	9013      	str	r0, [sp, #76]	; 0x4c
    fd86:	ec4c bb1b 	vmov	d11, fp, ip
    fd8a:	a922      	add	r1, sp, #136	; 0x88
    fd8c:	a81f      	add	r0, sp, #124	; 0x7c
    fd8e:	ab1e      	add	r3, sp, #120	; 0x78
    fd90:	eeb0 0a4b 	vmov.f32	s0, s22
    fd94:	eef0 0a6b 	vmov.f32	s1, s23
    fd98:	9101      	str	r1, [sp, #4]
    fd9a:	4622      	mov	r2, r4
    fd9c:	9000      	str	r0, [sp, #0]
    fd9e:	2102      	movs	r1, #2
    fda0:	ee19 0a10 	vmov	r0, s18
    fda4:	f000 fb4c 	bl	10440 <_dtoa_r>
    fda8:	9b04      	ldr	r3, [sp, #16]
    fdaa:	4606      	mov	r6, r0
    fdac:	2b47      	cmp	r3, #71	; 0x47
    fdae:	f040 81de 	bne.w	1016e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16e>
    fdb2:	9b03      	ldr	r3, [sp, #12]
    fdb4:	07db      	lsls	r3, r3, #31
    fdb6:	f100 81da 	bmi.w	1016e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16e>
    fdba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fdbc:	1b9b      	subs	r3, r3, r6
    fdbe:	930c      	str	r3, [sp, #48]	; 0x30
    fdc0:	9b04      	ldr	r3, [sp, #16]
    fdc2:	2b47      	cmp	r3, #71	; 0x47
    fdc4:	f040 810f 	bne.w	ffe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1586>
    fdc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fdca:	4553      	cmp	r3, sl
    fdcc:	930a      	str	r3, [sp, #40]	; 0x28
    fdce:	dc02      	bgt.n	fdd6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1376>
    fdd0:	3303      	adds	r3, #3
    fdd2:	f280 812a 	bge.w	1002a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2a>
    fdd6:	2300      	movs	r3, #0
    fdd8:	f1a9 0902 	sub.w	r9, r9, #2
    fddc:	9308      	str	r3, [sp, #32]
    fdde:	f029 0320 	bic.w	r3, r9, #32
    fde2:	9304      	str	r3, [sp, #16]
    fde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fde6:	9a04      	ldr	r2, [sp, #16]
    fde8:	3b01      	subs	r3, #1
    fdea:	2a41      	cmp	r2, #65	; 0x41
    fdec:	931e      	str	r3, [sp, #120]	; 0x78
    fdee:	f040 8273 	bne.w	102d8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2d8>
    fdf2:	f109 020f 	add.w	r2, r9, #15
    fdf6:	b2d2      	uxtb	r2, r2
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    fdfe:	f2c0 82c2 	blt.w	10386 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x386>
    fe02:	222b      	movs	r2, #43	; 0x2b
    fe04:	2b09      	cmp	r3, #9
    fe06:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    fe0a:	f340 82a8 	ble.w	1035e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x35e>
    fe0e:	f10d 0e8f 	add.w	lr, sp, #143	; 0x8f
    fe12:	f8df c624 	ldr.w	ip, [pc, #1572]	; 10438 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x438>
    fe16:	4670      	mov	r0, lr
    fe18:	fb8c 1203 	smull	r1, r2, ip, r3
    fe1c:	17d9      	asrs	r1, r3, #31
    fe1e:	461d      	mov	r5, r3
    fe20:	4604      	mov	r4, r0
    fe22:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
    fe26:	3801      	subs	r0, #1
    fe28:	2d63      	cmp	r5, #99	; 0x63
    fe2a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    fe2e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    fe32:	460b      	mov	r3, r1
    fe34:	f102 0230 	add.w	r2, r2, #48	; 0x30
    fe38:	f804 2c01 	strb.w	r2, [r4, #-1]
    fe3c:	dcec      	bgt.n	fe18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13b8>
    fe3e:	3330      	adds	r3, #48	; 0x30
    fe40:	1ea2      	subs	r2, r4, #2
    fe42:	b2db      	uxtb	r3, r3
    fe44:	4596      	cmp	lr, r2
    fe46:	f800 3c01 	strb.w	r3, [r0, #-1]
    fe4a:	f240 82d6 	bls.w	103fa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3fa>
    fe4e:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    fe52:	e001      	b.n	fe58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13f8>
    fe54:	f810 3b01 	ldrb.w	r3, [r0], #1
    fe58:	4586      	cmp	lr, r0
    fe5a:	f802 3b01 	strb.w	r3, [r2], #1
    fe5e:	d1f9      	bne.n	fe54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13f4>
    fe60:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    fe64:	f10d 0182 	add.w	r1, sp, #130	; 0x82
    fe68:	aa20      	add	r2, sp, #128	; 0x80
    fe6a:	1b1b      	subs	r3, r3, r4
    fe6c:	440b      	add	r3, r1
    fe6e:	1a9b      	subs	r3, r3, r2
    fe70:	9314      	str	r3, [sp, #80]	; 0x50
    fe72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe74:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fe76:	2b01      	cmp	r3, #1
    fe78:	441a      	add	r2, r3
    fe7a:	9207      	str	r2, [sp, #28]
    fe7c:	f340 827e 	ble.w	1037c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x37c>
    fe80:	9b07      	ldr	r3, [sp, #28]
    fe82:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fe84:	4413      	add	r3, r2
    fe86:	9307      	str	r3, [sp, #28]
    fe88:	9b03      	ldr	r3, [sp, #12]
    fe8a:	2200      	movs	r2, #0
    fe8c:	9907      	ldr	r1, [sp, #28]
    fe8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    fe92:	920d      	str	r2, [sp, #52]	; 0x34
    fe94:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    fe98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fe9c:	9104      	str	r1, [sp, #16]
    fe9e:	9303      	str	r3, [sp, #12]
    fea0:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    fea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fea6:	2b00      	cmp	r3, #0
    fea8:	f040 80d9 	bne.w	1005e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x5e>
    feac:	469a      	mov	sl, r3
    feae:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    feb2:	f7fe be51 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    feb6:	232d      	movs	r3, #45	; 0x2d
    feb8:	461a      	mov	r2, r3
    feba:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    febe:	f7fe bf1e 	b.w	ecfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29e>
    fec2:	4614      	mov	r4, r2
    fec4:	3301      	adds	r3, #1
    fec6:	444c      	add	r4, r9
    fec8:	f8c8 5000 	str.w	r5, [r8]
    fecc:	2b07      	cmp	r3, #7
    fece:	f8c8 9004 	str.w	r9, [r8, #4]
    fed2:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fed6:	dc6b      	bgt.n	ffb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1550>
    fed8:	f108 0808 	add.w	r8, r8, #8
    fedc:	f7ff bab0 	b.w	f440 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e0>
    fee0:	aa24      	add	r2, sp, #144	; 0x90
    fee2:	ee19 1a90 	vmov	r1, s19
    fee6:	ee19 0a10 	vmov	r0, s18
    feea:	f01b fff7 	bl	2bedc <__ssprint_r>
    feee:	2800      	cmp	r0, #0
    fef0:	f47f a966 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fef4:	991e      	ldr	r1, [sp, #120]	; 0x78
    fef6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fefa:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fefc:	e5fd      	b.n	fafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x109a>
    fefe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ff00:	4416      	add	r6, r2
    ff02:	1ad3      	subs	r3, r2, r3
    ff04:	eba6 060b 	sub.w	r6, r6, fp
    ff08:	429e      	cmp	r6, r3
    ff0a:	bfa8      	it	ge
    ff0c:	461e      	movge	r6, r3
    ff0e:	f7ff bace 	b.w	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
    ff12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ff14:	9905      	ldr	r1, [sp, #20]
    ff16:	f853 2b04 	ldr.w	r2, [r3], #4
    ff1a:	8011      	strh	r1, [r2, #0]
    ff1c:	9309      	str	r3, [sp, #36]	; 0x24
    ff1e:	f7fe bcfb 	b.w	e918 <_svfprintf_r+0x60>
    ff22:	f10a 0101 	add.w	r1, sl, #1
    ff26:	ee19 0a10 	vmov	r0, s18
    ff2a:	f015 ff4b 	bl	25dc4 <_malloc_r>
    ff2e:	4606      	mov	r6, r0
    ff30:	2800      	cmp	r0, #0
    ff32:	f000 8271 	beq.w	10418 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x418>
    ff36:	9008      	str	r0, [sp, #32]
    ff38:	f7ff bbf5 	b.w	f726 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc6>
    ff3c:	f04f 0a06 	mov.w	sl, #6
    ff40:	9a03      	ldr	r2, [sp, #12]
    ff42:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ff46:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    ff4a:	2900      	cmp	r1, #0
    ff4c:	f2c0 81ce 	blt.w	102ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ec>
    ff50:	2300      	movs	r3, #0
    ff52:	ec41 0b1b 	vmov	d11, r0, r1
    ff56:	9313      	str	r3, [sp, #76]	; 0x4c
    ff58:	9b04      	ldr	r3, [sp, #16]
    ff5a:	2b46      	cmp	r3, #70	; 0x46
    ff5c:	f040 80f2 	bne.w	10144 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x144>
    ff60:	a922      	add	r1, sp, #136	; 0x88
    ff62:	a81f      	add	r0, sp, #124	; 0x7c
    ff64:	ab1e      	add	r3, sp, #120	; 0x78
    ff66:	eeb0 0a4b 	vmov.f32	s0, s22
    ff6a:	eef0 0a6b 	vmov.f32	s1, s23
    ff6e:	9101      	str	r1, [sp, #4]
    ff70:	4652      	mov	r2, sl
    ff72:	9000      	str	r0, [sp, #0]
    ff74:	2103      	movs	r1, #3
    ff76:	ee19 0a10 	vmov	r0, s18
    ff7a:	f000 fa61 	bl	10440 <_dtoa_r>
    ff7e:	7803      	ldrb	r3, [r0, #0]
    ff80:	4606      	mov	r6, r0
    ff82:	2b30      	cmp	r3, #48	; 0x30
    ff84:	d108      	bne.n	ff98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1538>
    ff86:	2200      	movs	r2, #0
    ff88:	2300      	movs	r3, #0
    ff8a:	ec51 0b1b 	vmov	r0, r1, d11
    ff8e:	f7fc fb69 	bl	c664 <__aeabi_dcmpeq>
    ff92:	2800      	cmp	r0, #0
    ff94:	f000 821f 	beq.w	103d6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3d6>
    ff98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ff9a:	4453      	add	r3, sl
    ff9c:	18f4      	adds	r4, r6, r3
    ff9e:	2200      	movs	r2, #0
    ffa0:	2300      	movs	r3, #0
    ffa2:	ec51 0b1b 	vmov	r0, r1, d11
    ffa6:	f7fc fb5d 	bl	c664 <__aeabi_dcmpeq>
    ffaa:	b180      	cbz	r0, ffce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x156e>
    ffac:	4623      	mov	r3, r4
    ffae:	e705      	b.n	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffb0:	aa24      	add	r2, sp, #144	; 0x90
    ffb2:	ee19 1a90 	vmov	r1, s19
    ffb6:	ee19 0a10 	vmov	r0, s18
    ffba:	f01b ff8f 	bl	2bedc <__ssprint_r>
    ffbe:	2800      	cmp	r0, #0
    ffc0:	f47f a8fe 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    ffc4:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ffc6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ffca:	f7ff ba39 	b.w	f440 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e0>
    ffce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffd0:	42a3      	cmp	r3, r4
    ffd2:	f4bf aef3 	bcs.w	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffd6:	2130      	movs	r1, #48	; 0x30
    ffd8:	1c5a      	adds	r2, r3, #1
    ffda:	9222      	str	r2, [sp, #136]	; 0x88
    ffdc:	7019      	strb	r1, [r3, #0]
    ffde:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffe0:	429c      	cmp	r4, r3
    ffe2:	d8f9      	bhi.n	ffd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1578>
    ffe4:	e6ea      	b.n	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffe6:	9b04      	ldr	r3, [sp, #16]
    ffe8:	2b46      	cmp	r3, #70	; 0x46
    ffea:	f040 8200 	bne.w	103ee <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ee>
    ffee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    fff0:	9b03      	ldr	r3, [sp, #12]
    fff2:	2a00      	cmp	r2, #0
    fff4:	920a      	str	r2, [sp, #40]	; 0x28
    fff6:	f003 0301 	and.w	r3, r3, #1
    fffa:	f340 81ce 	ble.w	1039a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x39a>
    fffe:	ea53 030a 	orrs.w	r3, r3, sl
   10002:	f040 816c 	bne.w	102de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2de>
   10006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10008:	f04f 0966 	mov.w	r9, #102	; 0x66
   1000c:	9307      	str	r3, [sp, #28]
   1000e:	9b03      	ldr	r3, [sp, #12]
   10010:	055a      	lsls	r2, r3, #21
   10012:	f100 812d 	bmi.w	10270 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x270>
   10016:	9b07      	ldr	r3, [sp, #28]
   10018:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1001c:	9304      	str	r3, [sp, #16]
   1001e:	2300      	movs	r3, #0
   10020:	9503      	str	r5, [sp, #12]
   10022:	9308      	str	r3, [sp, #32]
   10024:	930d      	str	r3, [sp, #52]	; 0x34
   10026:	930b      	str	r3, [sp, #44]	; 0x2c
   10028:	e73c      	b.n	fea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1444>
   1002a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1002c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1002e:	428b      	cmp	r3, r1
   10030:	f2c0 809f 	blt.w	10172 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x172>
   10034:	9a03      	ldr	r2, [sp, #12]
   10036:	07d4      	lsls	r4, r2, #31
   10038:	f140 818e 	bpl.w	10358 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x358>
   1003c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1003e:	4413      	add	r3, r2
   10040:	9307      	str	r3, [sp, #28]
   10042:	9b03      	ldr	r3, [sp, #12]
   10044:	0558      	lsls	r0, r3, #21
   10046:	d503      	bpl.n	10050 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x50>
   10048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1004a:	2b00      	cmp	r3, #0
   1004c:	f300 810e 	bgt.w	1026c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x26c>
   10050:	9b07      	ldr	r3, [sp, #28]
   10052:	f04f 0967 	mov.w	r9, #103	; 0x67
   10056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1005a:	9304      	str	r3, [sp, #16]
   1005c:	e7df      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   1005e:	222d      	movs	r2, #45	; 0x2d
   10060:	f04f 0a00 	mov.w	sl, #0
   10064:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
   10068:	f7fe bd77 	b.w	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
   1006c:	aa24      	add	r2, sp, #144	; 0x90
   1006e:	ee19 1a90 	vmov	r1, s19
   10072:	ee19 0a10 	vmov	r0, s18
   10076:	f01b ff31 	bl	2bedc <__ssprint_r>
   1007a:	2800      	cmp	r0, #0
   1007c:	f47f a8a0 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   10080:	991e      	ldr	r1, [sp, #120]	; 0x78
   10082:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10086:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1008a:	e54a      	b.n	fb22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c2>
   1008c:	aa24      	add	r2, sp, #144	; 0x90
   1008e:	ee19 1a90 	vmov	r1, s19
   10092:	ee19 0a10 	vmov	r0, s18
   10096:	f01b ff21 	bl	2bedc <__ssprint_r>
   1009a:	2800      	cmp	r0, #0
   1009c:	f47f a890 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   100a0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100a2:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100a6:	f7ff b9c3 	b.w	f430 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9d0>
   100aa:	46d1      	mov	r9, sl
   100ac:	f7ff ba31 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   100b0:	46b3      	mov	fp, r6
   100b2:	f7ff ba2e 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   100b6:	aa24      	add	r2, sp, #144	; 0x90
   100b8:	ee19 1a90 	vmov	r1, s19
   100bc:	ee19 0a10 	vmov	r0, s18
   100c0:	f01b ff0c 	bl	2bedc <__ssprint_r>
   100c4:	2800      	cmp	r0, #0
   100c6:	f47f a87b 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   100ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   100cc:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100d0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100d2:	f7ff b9d4 	b.w	f47e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa1e>
   100d6:	9b03      	ldr	r3, [sp, #12]
   100d8:	07da      	lsls	r2, r3, #31
   100da:	f57e adbc 	bpl.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
   100de:	9b25      	ldr	r3, [sp, #148]	; 0x94
   100e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   100e2:	3301      	adds	r3, #1
   100e4:	9811      	ldr	r0, [sp, #68]	; 0x44
   100e6:	190a      	adds	r2, r1, r4
   100e8:	f8c8 1004 	str.w	r1, [r8, #4]
   100ec:	2b07      	cmp	r3, #7
   100ee:	f8c8 0000 	str.w	r0, [r8]
   100f2:	9226      	str	r2, [sp, #152]	; 0x98
   100f4:	9325      	str	r3, [sp, #148]	; 0x94
   100f6:	dcb9      	bgt.n	1006c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6c>
   100f8:	f108 0808 	add.w	r8, r8, #8
   100fc:	e514      	b.n	fb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c8>
   100fe:	aa24      	add	r2, sp, #144	; 0x90
   10100:	ee19 1a90 	vmov	r1, s19
   10104:	4648      	mov	r0, r9
   10106:	f01b fee9 	bl	2bedc <__ssprint_r>
   1010a:	2800      	cmp	r0, #0
   1010c:	f47f a85a 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
   10110:	7838      	ldrb	r0, [r7, #0]
   10112:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10116:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10118:	e476      	b.n	fa08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa8>
   1011a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1011c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1011e:	1af6      	subs	r6, r6, r3
   10120:	461a      	mov	r2, r3
   10122:	4630      	mov	r0, r6
   10124:	f016 fe00 	bl	26d28 <strncpy>
   10128:	f898 3001 	ldrb.w	r3, [r8, #1]
   1012c:	b10b      	cbz	r3, 10132 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x132>
   1012e:	f108 0801 	add.w	r8, r8, #1
   10132:	4620      	mov	r0, r4
   10134:	4629      	mov	r1, r5
   10136:	220a      	movs	r2, #10
   10138:	2300      	movs	r3, #0
   1013a:	f04f 0900 	mov.w	r9, #0
   1013e:	f7fc fb8b 	bl	c858 <__aeabi_uldivmod>
   10142:	e553      	b.n	fbec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118c>
   10144:	2b45      	cmp	r3, #69	; 0x45
   10146:	f040 8156 	bne.w	103f6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3f6>
   1014a:	a822      	add	r0, sp, #136	; 0x88
   1014c:	a91f      	add	r1, sp, #124	; 0x7c
   1014e:	f10a 0401 	add.w	r4, sl, #1
   10152:	eeb0 0a4b 	vmov.f32	s0, s22
   10156:	eef0 0a6b 	vmov.f32	s1, s23
   1015a:	ab1e      	add	r3, sp, #120	; 0x78
   1015c:	4622      	mov	r2, r4
   1015e:	e9cd 1000 	strd	r1, r0, [sp]
   10162:	2102      	movs	r1, #2
   10164:	ee19 0a10 	vmov	r0, s18
   10168:	f000 f96a 	bl	10440 <_dtoa_r>
   1016c:	4606      	mov	r6, r0
   1016e:	4434      	add	r4, r6
   10170:	e715      	b.n	ff9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x153e>
   10172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10174:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10176:	189a      	adds	r2, r3, r2
   10178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1017a:	2b00      	cmp	r3, #0
   1017c:	9207      	str	r2, [sp, #28]
   1017e:	f340 80c0 	ble.w	10302 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x302>
   10182:	f04f 0967 	mov.w	r9, #103	; 0x67
   10186:	e742      	b.n	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
   10188:	f8cd a010 	str.w	sl, [sp, #16]
   1018c:	f8cd a01c 	str.w	sl, [sp, #28]
   10190:	4682      	mov	sl, r0
   10192:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   10196:	9409      	str	r4, [sp, #36]	; 0x24
   10198:	900d      	str	r0, [sp, #52]	; 0x34
   1019a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
   1019e:	f7fe bcdb 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
   101a2:	aa24      	add	r2, sp, #144	; 0x90
   101a4:	ee19 1a90 	vmov	r1, s19
   101a8:	ee19 0a10 	vmov	r0, s18
   101ac:	f01b fe96 	bl	2bedc <__ssprint_r>
   101b0:	2800      	cmp	r0, #0
   101b2:	f47f a805 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   101b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   101b8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   101bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   101be:	9c26      	ldr	r4, [sp, #152]	; 0x98
   101c0:	1ad3      	subs	r3, r2, r3
   101c2:	f7ff b974 	b.w	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
   101c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   101c8:	f7ff b892 	b.w	f2f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x890>
   101cc:	f1c1 0900 	rsb	r9, r1, #0
   101d0:	3110      	adds	r1, #16
   101d2:	4d96      	ldr	r5, [pc, #600]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   101d4:	da29      	bge.n	1022a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22a>
   101d6:	2410      	movs	r4, #16
   101d8:	ee19 aa10 	vmov	sl, s18
   101dc:	ee19 ba90 	vmov	fp, s19
   101e0:	e004      	b.n	101ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1ec>
   101e2:	f1a9 0910 	sub.w	r9, r9, #16
   101e6:	f1b9 0f10 	cmp.w	r9, #16
   101ea:	dd1e      	ble.n	1022a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22a>
   101ec:	3301      	adds	r3, #1
   101ee:	3210      	adds	r2, #16
   101f0:	f8c8 5000 	str.w	r5, [r8]
   101f4:	f108 0808 	add.w	r8, r8, #8
   101f8:	2b07      	cmp	r3, #7
   101fa:	f848 4c04 	str.w	r4, [r8, #-4]
   101fe:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10202:	ddee      	ble.n	101e2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e2>
   10204:	aa24      	add	r2, sp, #144	; 0x90
   10206:	4659      	mov	r1, fp
   10208:	4650      	mov	r0, sl
   1020a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1020e:	f01b fe65 	bl	2bedc <__ssprint_r>
   10212:	2800      	cmp	r0, #0
   10214:	f47f af49 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
   10218:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1021c:	e7e1      	b.n	101e2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e2>
   1021e:	2300      	movs	r3, #0
   10220:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
   10224:	9313      	str	r3, [sp, #76]	; 0x4c
   10226:	f7ff ba8b 	b.w	f740 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xce0>
   1022a:	3301      	adds	r3, #1
   1022c:	444a      	add	r2, r9
   1022e:	f8c8 5000 	str.w	r5, [r8]
   10232:	2b07      	cmp	r3, #7
   10234:	f8c8 9004 	str.w	r9, [r8, #4]
   10238:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1023c:	f77f af5c 	ble.w	100f8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xf8>
   10240:	aa24      	add	r2, sp, #144	; 0x90
   10242:	ee19 1a90 	vmov	r1, s19
   10246:	ee19 0a10 	vmov	r0, s18
   1024a:	f01b fe47 	bl	2bedc <__ssprint_r>
   1024e:	2800      	cmp	r0, #0
   10250:	f47e afb6 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   10254:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10256:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1025a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1025c:	e464      	b.n	fb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c8>
   1025e:	4d73      	ldr	r5, [pc, #460]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   10260:	f7fe bf13 	b.w	f08a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62a>
   10264:	46d9      	mov	r9, fp
   10266:	46a3      	mov	fp, r4
   10268:	f7ff b953 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   1026c:	f04f 0967 	mov.w	r9, #103	; 0x67
   10270:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10272:	780b      	ldrb	r3, [r1, #0]
   10274:	2bff      	cmp	r3, #255	; 0xff
   10276:	f000 80cb 	beq.w	10410 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x410>
   1027a:	2400      	movs	r4, #0
   1027c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1027e:	4620      	mov	r0, r4
   10280:	e003      	b.n	1028a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x28a>
   10282:	3001      	adds	r0, #1
   10284:	3101      	adds	r1, #1
   10286:	2bff      	cmp	r3, #255	; 0xff
   10288:	d008      	beq.n	1029c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x29c>
   1028a:	4293      	cmp	r3, r2
   1028c:	da06      	bge.n	1029c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x29c>
   1028e:	1ad2      	subs	r2, r2, r3
   10290:	784b      	ldrb	r3, [r1, #1]
   10292:	2b00      	cmp	r3, #0
   10294:	d1f5      	bne.n	10282 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x282>
   10296:	3401      	adds	r4, #1
   10298:	780b      	ldrb	r3, [r1, #0]
   1029a:	e7f4      	b.n	10286 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x286>
   1029c:	920a      	str	r2, [sp, #40]	; 0x28
   1029e:	9117      	str	r1, [sp, #92]	; 0x5c
   102a0:	900b      	str	r0, [sp, #44]	; 0x2c
   102a2:	940d      	str	r4, [sp, #52]	; 0x34
   102a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   102a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102a8:	9907      	ldr	r1, [sp, #28]
   102aa:	4413      	add	r3, r2
   102ac:	2200      	movs	r2, #0
   102ae:	9503      	str	r5, [sp, #12]
   102b0:	9208      	str	r2, [sp, #32]
   102b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   102b4:	fb02 1303 	mla	r3, r2, r3, r1
   102b8:	9307      	str	r3, [sp, #28]
   102ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   102be:	9304      	str	r3, [sp, #16]
   102c0:	e5f0      	b.n	fea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1444>
   102c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   102c4:	2b00      	cmp	r3, #0
   102c6:	db63      	blt.n	10390 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x390>
   102c8:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   102cc:	2103      	movs	r1, #3
   102ce:	4e58      	ldr	r6, [pc, #352]	; (10430 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x430>)
   102d0:	4b58      	ldr	r3, [pc, #352]	; (10434 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x434>)
   102d2:	9104      	str	r1, [sp, #16]
   102d4:	f7fe bd17 	b.w	ed06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a6>
   102d8:	fa5f f289 	uxtb.w	r2, r9
   102dc:	e58c      	b.n	fdf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1398>
   102de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   102e0:	f04f 0966 	mov.w	r9, #102	; 0x66
   102e4:	18d3      	adds	r3, r2, r3
   102e6:	4453      	add	r3, sl
   102e8:	9307      	str	r3, [sp, #28]
   102ea:	e690      	b.n	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
   102ec:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
   102f0:	232d      	movs	r3, #45	; 0x2d
   102f2:	ee0b 1a10 	vmov	s22, r1
   102f6:	9313      	str	r3, [sp, #76]	; 0x4c
   102f8:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   102fc:	ee0b 3a90 	vmov	s23, r3
   10300:	e62a      	b.n	ff58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14f8>
   10302:	f1c3 0301 	rsb	r3, r3, #1
   10306:	f04f 0967 	mov.w	r9, #103	; 0x67
   1030a:	441a      	add	r2, r3
   1030c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10310:	9207      	str	r2, [sp, #28]
   10312:	9304      	str	r3, [sp, #16]
   10314:	e683      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   10316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10318:	9322      	str	r3, [sp, #136]	; 0x88
   1031a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1031c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   10320:	7bd9      	ldrb	r1, [r3, #15]
   10322:	465b      	mov	r3, fp
   10324:	428a      	cmp	r2, r1
   10326:	d109      	bne.n	1033c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x33c>
   10328:	2030      	movs	r0, #48	; 0x30
   1032a:	f803 0c01 	strb.w	r0, [r3, #-1]
   1032e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10330:	1e5a      	subs	r2, r3, #1
   10332:	9222      	str	r2, [sp, #136]	; 0x88
   10334:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   10338:	4291      	cmp	r1, r2
   1033a:	d0f6      	beq.n	1032a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x32a>
   1033c:	2a39      	cmp	r2, #57	; 0x39
   1033e:	d053      	beq.n	103e8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e8>
   10340:	3201      	adds	r2, #1
   10342:	b2d2      	uxtb	r2, r2
   10344:	f803 2c01 	strb.w	r2, [r3, #-1]
   10348:	f7ff ba71 	b.w	f82e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdce>
   1034c:	ee19 ba90 	vmov	fp, s19
   10350:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10354:	f7ff b8e5 	b.w	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
   10358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1035a:	9307      	str	r3, [sp, #28]
   1035c:	e671      	b.n	10042 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42>
   1035e:	9a04      	ldr	r2, [sp, #16]
   10360:	2a41      	cmp	r2, #65	; 0x41
   10362:	d03c      	beq.n	103de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3de>
   10364:	2130      	movs	r1, #48	; 0x30
   10366:	f10d 0283 	add.w	r2, sp, #131	; 0x83
   1036a:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
   1036e:	3330      	adds	r3, #48	; 0x30
   10370:	a920      	add	r1, sp, #128	; 0x80
   10372:	f802 3b01 	strb.w	r3, [r2], #1
   10376:	1a53      	subs	r3, r2, r1
   10378:	9314      	str	r3, [sp, #80]	; 0x50
   1037a:	e57a      	b.n	fe72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1412>
   1037c:	9b03      	ldr	r3, [sp, #12]
   1037e:	07dd      	lsls	r5, r3, #31
   10380:	f57f ad82 	bpl.w	fe88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1428>
   10384:	e57c      	b.n	fe80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1420>
   10386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10388:	222d      	movs	r2, #45	; 0x2d
   1038a:	f1c3 0301 	rsb	r3, r3, #1
   1038e:	e539      	b.n	fe04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13a4>
   10390:	232d      	movs	r3, #45	; 0x2d
   10392:	461a      	mov	r2, r3
   10394:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
   10398:	e798      	b.n	102cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2cc>
   1039a:	ea53 030a 	orrs.w	r3, r3, sl
   1039e:	d105      	bne.n	103ac <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ac>
   103a0:	2301      	movs	r3, #1
   103a2:	f04f 0966 	mov.w	r9, #102	; 0x66
   103a6:	9304      	str	r3, [sp, #16]
   103a8:	9307      	str	r3, [sp, #28]
   103aa:	e638      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   103ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   103ae:	f04f 0966 	mov.w	r9, #102	; 0x66
   103b2:	3301      	adds	r3, #1
   103b4:	4453      	add	r3, sl
   103b6:	9307      	str	r3, [sp, #28]
   103b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103bc:	9304      	str	r3, [sp, #16]
   103be:	e62e      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   103c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103c2:	f897 9001 	ldrb.w	r9, [r7, #1]
   103c6:	4617      	mov	r7, r2
   103c8:	f853 2b04 	ldr.w	r2, [r3], #4
   103cc:	ea42 7ae2 	orr.w	sl, r2, r2, asr #31
   103d0:	9309      	str	r3, [sp, #36]	; 0x24
   103d2:	f7fe bacf 	b.w	e974 <_svfprintf_r+0xbc>
   103d6:	f1ca 0301 	rsb	r3, sl, #1
   103da:	931e      	str	r3, [sp, #120]	; 0x78
   103dc:	e5dd      	b.n	ff9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x153a>
   103de:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   103e2:	e7c4      	b.n	1036e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x36e>
   103e4:	4d11      	ldr	r5, [pc, #68]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   103e6:	e56d      	b.n	fec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1464>
   103e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103ea:	7a92      	ldrb	r2, [r2, #10]
   103ec:	e7aa      	b.n	10344 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x344>
   103ee:	2300      	movs	r3, #0
   103f0:	9308      	str	r3, [sp, #32]
   103f2:	f7ff ba23 	b.w	f83c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xddc>
   103f6:	4654      	mov	r4, sl
   103f8:	e4c7      	b.n	fd8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x132a>
   103fa:	2302      	movs	r3, #2
   103fc:	9314      	str	r3, [sp, #80]	; 0x50
   103fe:	e538      	b.n	fe72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1412>
   10400:	230c      	movs	r3, #12
   10402:	f04f 32ff 	mov.w	r2, #4294967295
   10406:	f8c9 3000 	str.w	r3, [r9]
   1040a:	9205      	str	r2, [sp, #20]
   1040c:	f7ff b890 	b.w	f530 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xad0>
   10410:	2300      	movs	r3, #0
   10412:	930d      	str	r3, [sp, #52]	; 0x34
   10414:	930b      	str	r3, [sp, #44]	; 0x2c
   10416:	e745      	b.n	102a4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2a4>
   10418:	ee19 ba90 	vmov	fp, s19
   1041c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10424:	f8ab 300c 	strh.w	r3, [fp, #12]
   10428:	f7ff b87b 	b.w	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
   1042c:	0002fb30 	.word	0x0002fb30
   10430:	0002fae4 	.word	0x0002fae4
   10434:	0002fae8 	.word	0x0002fae8
   10438:	66666667 	.word	0x66666667
   1043c:	00000000 	.word	0x00000000

00010440 <_dtoa_r>:
   10440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10444:	ed2d 8b04 	vpush	{d8-d9}
   10448:	b099      	sub	sp, #100	; 0x64
   1044a:	4604      	mov	r4, r0
   1044c:	9101      	str	r1, [sp, #4]
   1044e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   10450:	9d26      	ldr	r5, [sp, #152]	; 0x98
   10452:	920b      	str	r2, [sp, #44]	; 0x2c
   10454:	9307      	str	r3, [sp, #28]
   10456:	ec57 6b10 	vmov	r6, r7, d0
   1045a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1045e:	b141      	cbz	r1, 10472 <_dtoa_r+0x32>
   10460:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10462:	2301      	movs	r3, #1
   10464:	4093      	lsls	r3, r2
   10466:	e9c1 2301 	strd	r2, r3, [r1, #4]
   1046a:	f01a fe19 	bl	2b0a0 <_Bfree>
   1046e:	2300      	movs	r3, #0
   10470:	6423      	str	r3, [r4, #64]	; 0x40
   10472:	f1b7 0900 	subs.w	r9, r7, #0
   10476:	f2c0 80b4 	blt.w	105e2 <_dtoa_r+0x1a2>
   1047a:	2300      	movs	r3, #0
   1047c:	602b      	str	r3, [r5, #0]
   1047e:	4b7e      	ldr	r3, [pc, #504]	; (10678 <_dtoa_r+0x238>)
   10480:	ea33 0309 	bics.w	r3, r3, r9
   10484:	f000 80b8 	beq.w	105f8 <_dtoa_r+0x1b8>
   10488:	2200      	movs	r2, #0
   1048a:	2300      	movs	r3, #0
   1048c:	ed9d 7b04 	vldr	d7, [sp, #16]
   10490:	ec51 0b17 	vmov	r0, r1, d7
   10494:	ed8d 7b02 	vstr	d7, [sp, #8]
   10498:	f7fc f8e4 	bl	c664 <__aeabi_dcmpeq>
   1049c:	4680      	mov	r8, r0
   1049e:	b188      	cbz	r0, 104c4 <_dtoa_r+0x84>
   104a0:	2301      	movs	r3, #1
   104a2:	9a07      	ldr	r2, [sp, #28]
   104a4:	6013      	str	r3, [r2, #0]
   104a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   104a8:	2b00      	cmp	r3, #0
   104aa:	f000 8251 	beq.w	10950 <_dtoa_r+0x510>
   104ae:	4b73      	ldr	r3, [pc, #460]	; (1067c <_dtoa_r+0x23c>)
   104b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   104b2:	f103 39ff 	add.w	r9, r3, #4294967295
   104b6:	6013      	str	r3, [r2, #0]
   104b8:	4648      	mov	r0, r9
   104ba:	b019      	add	sp, #100	; 0x64
   104bc:	ecbd 8b04 	vpop	{d8-d9}
   104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104c4:	ed9d 0b02 	vldr	d0, [sp, #8]
   104c8:	aa16      	add	r2, sp, #88	; 0x58
   104ca:	a917      	add	r1, sp, #92	; 0x5c
   104cc:	4620      	mov	r0, r4
   104ce:	f01b f98b 	bl	2b7e8 <__d2b>
   104d2:	4682      	mov	sl, r0
   104d4:	ea5f 5519 	movs.w	r5, r9, lsr #20
   104d8:	f040 80a7 	bne.w	1062a <_dtoa_r+0x1ea>
   104dc:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   104e0:	4445      	add	r5, r8
   104e2:	f205 4032 	addw	r0, r5, #1074	; 0x432
   104e6:	2820      	cmp	r0, #32
   104e8:	f340 823a 	ble.w	10960 <_dtoa_r+0x520>
   104ec:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   104f0:	f205 4012 	addw	r0, r5, #1042	; 0x412
   104f4:	fa09 f903 	lsl.w	r9, r9, r3
   104f8:	fa26 f000 	lsr.w	r0, r6, r0
   104fc:	ea49 0000 	orr.w	r0, r9, r0
   10500:	f7fb ffe0 	bl	c4c4 <__aeabi_ui2d>
   10504:	3d01      	subs	r5, #1
   10506:	2201      	movs	r2, #1
   10508:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   1050c:	9210      	str	r2, [sp, #64]	; 0x40
   1050e:	2200      	movs	r2, #0
   10510:	4b5b      	ldr	r3, [pc, #364]	; (10680 <_dtoa_r+0x240>)
   10512:	f7fb fe99 	bl	c248 <__aeabi_dsub>
   10516:	a352      	add	r3, pc, #328	; (adr r3, 10660 <_dtoa_r+0x220>)
   10518:	e9d3 2300 	ldrd	r2, r3, [r3]
   1051c:	f7fc fc6a 	bl	cdf4 <__aeabi_dmul>
   10520:	a351      	add	r3, pc, #324	; (adr r3, 10668 <_dtoa_r+0x228>)
   10522:	e9d3 2300 	ldrd	r2, r3, [r3]
   10526:	f7fb fe91 	bl	c24c <__adddf3>
   1052a:	4606      	mov	r6, r0
   1052c:	460f      	mov	r7, r1
   1052e:	4628      	mov	r0, r5
   10530:	f7fb ffd8 	bl	c4e4 <__aeabi_i2d>
   10534:	a34e      	add	r3, pc, #312	; (adr r3, 10670 <_dtoa_r+0x230>)
   10536:	e9d3 2300 	ldrd	r2, r3, [r3]
   1053a:	f7fc fc5b 	bl	cdf4 <__aeabi_dmul>
   1053e:	4602      	mov	r2, r0
   10540:	460b      	mov	r3, r1
   10542:	4630      	mov	r0, r6
   10544:	4639      	mov	r1, r7
   10546:	f7fb fe81 	bl	c24c <__adddf3>
   1054a:	4606      	mov	r6, r0
   1054c:	460f      	mov	r7, r1
   1054e:	f7fc f8bb 	bl	c6c8 <__aeabi_d2iz>
   10552:	2200      	movs	r2, #0
   10554:	4683      	mov	fp, r0
   10556:	2300      	movs	r3, #0
   10558:	4630      	mov	r0, r6
   1055a:	4639      	mov	r1, r7
   1055c:	f7fc f88c 	bl	c678 <__aeabi_dcmplt>
   10560:	2800      	cmp	r0, #0
   10562:	f040 81e8 	bne.w	10936 <_dtoa_r+0x4f6>
   10566:	f1bb 0f16 	cmp.w	fp, #22
   1056a:	f200 81d6 	bhi.w	1091a <_dtoa_r+0x4da>
   1056e:	4b45      	ldr	r3, [pc, #276]	; (10684 <_dtoa_r+0x244>)
   10570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10578:	e9d3 2300 	ldrd	r2, r3, [r3]
   1057c:	f7fc f87c 	bl	c678 <__aeabi_dcmplt>
   10580:	2800      	cmp	r0, #0
   10582:	f000 8085 	beq.w	10690 <_dtoa_r+0x250>
   10586:	2300      	movs	r3, #0
   10588:	eba8 0505 	sub.w	r5, r8, r5
   1058c:	f10b 3bff 	add.w	fp, fp, #4294967295
   10590:	930f      	str	r3, [sp, #60]	; 0x3c
   10592:	1e6b      	subs	r3, r5, #1
   10594:	9308      	str	r3, [sp, #32]
   10596:	f100 81c8 	bmi.w	1092a <_dtoa_r+0x4ea>
   1059a:	2300      	movs	r3, #0
   1059c:	930c      	str	r3, [sp, #48]	; 0x30
   1059e:	f1bb 0f00 	cmp.w	fp, #0
   105a2:	da7d      	bge.n	106a0 <_dtoa_r+0x260>
   105a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   105a6:	f8cd b018 	str.w	fp, [sp, #24]
   105aa:	eba3 030b 	sub.w	r3, r3, fp
   105ae:	930c      	str	r3, [sp, #48]	; 0x30
   105b0:	f1cb 0300 	rsb	r3, fp, #0
   105b4:	f04f 0b00 	mov.w	fp, #0
   105b8:	930e      	str	r3, [sp, #56]	; 0x38
   105ba:	9b01      	ldr	r3, [sp, #4]
   105bc:	2b09      	cmp	r3, #9
   105be:	d879      	bhi.n	106b4 <_dtoa_r+0x274>
   105c0:	2b05      	cmp	r3, #5
   105c2:	f340 81d2 	ble.w	1096a <_dtoa_r+0x52a>
   105c6:	3b04      	subs	r3, #4
   105c8:	2500      	movs	r5, #0
   105ca:	9301      	str	r3, [sp, #4]
   105cc:	9b01      	ldr	r3, [sp, #4]
   105ce:	3b02      	subs	r3, #2
   105d0:	2b03      	cmp	r3, #3
   105d2:	f200 8563 	bhi.w	1109c <_dtoa_r+0xc5c>
   105d6:	e8df f013 	tbh	[pc, r3, lsl #1]
   105da:	03f3      	.short	0x03f3
   105dc:	03e703f0 	.word	0x03e703f0
   105e0:	03c5      	.short	0x03c5
   105e2:	2301      	movs	r3, #1
   105e4:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
   105e8:	602b      	str	r3, [r5, #0]
   105ea:	4b23      	ldr	r3, [pc, #140]	; (10678 <_dtoa_r+0x238>)
   105ec:	f8cd 9014 	str.w	r9, [sp, #20]
   105f0:	ea33 0309 	bics.w	r3, r3, r9
   105f4:	f47f af48 	bne.w	10488 <_dtoa_r+0x48>
   105f8:	f242 730f 	movw	r3, #9999	; 0x270f
   105fc:	f3c9 0913 	ubfx	r9, r9, #0, #20
   10600:	9a07      	ldr	r2, [sp, #28]
   10602:	6013      	str	r3, [r2, #0]
   10604:	ea59 0306 	orrs.w	r3, r9, r6
   10608:	d01f      	beq.n	1064a <_dtoa_r+0x20a>
   1060a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1060c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 10688 <_dtoa_r+0x248>
   10610:	2b00      	cmp	r3, #0
   10612:	f43f af51 	beq.w	104b8 <_dtoa_r+0x78>
   10616:	f109 0303 	add.w	r3, r9, #3
   1061a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1061c:	4648      	mov	r0, r9
   1061e:	6013      	str	r3, [r2, #0]
   10620:	b019      	add	sp, #100	; 0x64
   10622:	ecbd 8b04 	vpop	{d8-d9}
   10626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1062a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1062e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   10632:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   10636:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1063a:	4608      	mov	r0, r1
   1063c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   10640:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10644:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   10648:	e761      	b.n	1050e <_dtoa_r+0xce>
   1064a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1064c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1068c <_dtoa_r+0x24c>
   10650:	2b00      	cmp	r3, #0
   10652:	f43f af31 	beq.w	104b8 <_dtoa_r+0x78>
   10656:	f109 0308 	add.w	r3, r9, #8
   1065a:	e7de      	b.n	1061a <_dtoa_r+0x1da>
   1065c:	f3af 8000 	nop.w
   10660:	636f4361 	.word	0x636f4361
   10664:	3fd287a7 	.word	0x3fd287a7
   10668:	8b60c8b3 	.word	0x8b60c8b3
   1066c:	3fc68a28 	.word	0x3fc68a28
   10670:	509f79fb 	.word	0x509f79fb
   10674:	3fd34413 	.word	0x3fd34413
   10678:	7ff00000 	.word	0x7ff00000
   1067c:	0002fb1d 	.word	0x0002fb1d
   10680:	3ff80000 	.word	0x3ff80000
   10684:	0002f198 	.word	0x0002f198
   10688:	0002fb8c 	.word	0x0002fb8c
   1068c:	0002fb90 	.word	0x0002fb90
   10690:	eba8 0505 	sub.w	r5, r8, r5
   10694:	1e6b      	subs	r3, r5, #1
   10696:	9308      	str	r3, [sp, #32]
   10698:	f100 84ee 	bmi.w	11078 <_dtoa_r+0xc38>
   1069c:	900f      	str	r0, [sp, #60]	; 0x3c
   1069e:	900c      	str	r0, [sp, #48]	; 0x30
   106a0:	9b08      	ldr	r3, [sp, #32]
   106a2:	f8cd b018 	str.w	fp, [sp, #24]
   106a6:	445b      	add	r3, fp
   106a8:	9308      	str	r3, [sp, #32]
   106aa:	2300      	movs	r3, #0
   106ac:	930e      	str	r3, [sp, #56]	; 0x38
   106ae:	9b01      	ldr	r3, [sp, #4]
   106b0:	2b09      	cmp	r3, #9
   106b2:	d985      	bls.n	105c0 <_dtoa_r+0x180>
   106b4:	2300      	movs	r3, #0
   106b6:	2201      	movs	r2, #1
   106b8:	461d      	mov	r5, r3
   106ba:	920d      	str	r2, [sp, #52]	; 0x34
   106bc:	f04f 32ff 	mov.w	r2, #4294967295
   106c0:	9301      	str	r3, [sp, #4]
   106c2:	930b      	str	r3, [sp, #44]	; 0x2c
   106c4:	920a      	str	r2, [sp, #40]	; 0x28
   106c6:	2100      	movs	r1, #0
   106c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   106ca:	6461      	str	r1, [r4, #68]	; 0x44
   106cc:	9314      	str	r3, [sp, #80]	; 0x50
   106ce:	4620      	mov	r0, r4
   106d0:	f01a fcc0 	bl	2b054 <_Balloc>
   106d4:	9009      	str	r0, [sp, #36]	; 0x24
   106d6:	6420      	str	r0, [r4, #64]	; 0x40
   106d8:	2d00      	cmp	r5, #0
   106da:	f000 80f2 	beq.w	108c2 <_dtoa_r+0x482>
   106de:	9906      	ldr	r1, [sp, #24]
   106e0:	2900      	cmp	r1, #0
   106e2:	f340 829e 	ble.w	10c22 <_dtoa_r+0x7e2>
   106e6:	4ac8      	ldr	r2, [pc, #800]	; (10a08 <_dtoa_r+0x5c8>)
   106e8:	f001 030f 	and.w	r3, r1, #15
   106ec:	110d      	asrs	r5, r1, #4
   106ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   106f2:	05ca      	lsls	r2, r1, #23
   106f4:	e9d3 6700 	ldrd	r6, r7, [r3]
   106f8:	f140 832b 	bpl.w	10d52 <_dtoa_r+0x912>
   106fc:	4bc3      	ldr	r3, [pc, #780]	; (10a0c <_dtoa_r+0x5cc>)
   106fe:	f005 050f 	and.w	r5, r5, #15
   10702:	f04f 0803 	mov.w	r8, #3
   10706:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1070a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1070e:	f7fc fc9b 	bl	d048 <__aeabi_ddiv>
   10712:	ec41 0b18 	vmov	d8, r0, r1
   10716:	b18d      	cbz	r5, 1073c <_dtoa_r+0x2fc>
   10718:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 10a0c <_dtoa_r+0x5cc>
   1071c:	07eb      	lsls	r3, r5, #31
   1071e:	4630      	mov	r0, r6
   10720:	4639      	mov	r1, r7
   10722:	d507      	bpl.n	10734 <_dtoa_r+0x2f4>
   10724:	f108 0801 	add.w	r8, r8, #1
   10728:	e9d9 2300 	ldrd	r2, r3, [r9]
   1072c:	f7fc fb62 	bl	cdf4 <__aeabi_dmul>
   10730:	4606      	mov	r6, r0
   10732:	460f      	mov	r7, r1
   10734:	106d      	asrs	r5, r5, #1
   10736:	f109 0908 	add.w	r9, r9, #8
   1073a:	d1ef      	bne.n	1071c <_dtoa_r+0x2dc>
   1073c:	4632      	mov	r2, r6
   1073e:	463b      	mov	r3, r7
   10740:	ec51 0b18 	vmov	r0, r1, d8
   10744:	f7fc fc80 	bl	d048 <__aeabi_ddiv>
   10748:	4606      	mov	r6, r0
   1074a:	460f      	mov	r7, r1
   1074c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1074e:	b143      	cbz	r3, 10762 <_dtoa_r+0x322>
   10750:	2200      	movs	r2, #0
   10752:	4baf      	ldr	r3, [pc, #700]	; (10a10 <_dtoa_r+0x5d0>)
   10754:	4630      	mov	r0, r6
   10756:	4639      	mov	r1, r7
   10758:	f7fb ff8e 	bl	c678 <__aeabi_dcmplt>
   1075c:	2800      	cmp	r0, #0
   1075e:	f040 8466 	bne.w	1102e <_dtoa_r+0xbee>
   10762:	4640      	mov	r0, r8
   10764:	f7fb febe 	bl	c4e4 <__aeabi_i2d>
   10768:	4632      	mov	r2, r6
   1076a:	463b      	mov	r3, r7
   1076c:	f7fc fb42 	bl	cdf4 <__aeabi_dmul>
   10770:	4ba8      	ldr	r3, [pc, #672]	; (10a14 <_dtoa_r+0x5d4>)
   10772:	2200      	movs	r2, #0
   10774:	f7fb fd6a 	bl	c24c <__adddf3>
   10778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1077a:	4680      	mov	r8, r0
   1077c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   10780:	2b00      	cmp	r3, #0
   10782:	f000 8102 	beq.w	1098a <_dtoa_r+0x54a>
   10786:	9b06      	ldr	r3, [sp, #24]
   10788:	9312      	str	r3, [sp, #72]	; 0x48
   1078a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1078c:	9311      	str	r3, [sp, #68]	; 0x44
   1078e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10790:	2b00      	cmp	r3, #0
   10792:	f000 8318 	beq.w	10dc6 <_dtoa_r+0x986>
   10796:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10798:	2000      	movs	r0, #0
   1079a:	4b9b      	ldr	r3, [pc, #620]	; (10a08 <_dtoa_r+0x5c8>)
   1079c:	499e      	ldr	r1, [pc, #632]	; (10a18 <_dtoa_r+0x5d8>)
   1079e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   107a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   107a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   107a8:	f7fc fc4e 	bl	d048 <__aeabi_ddiv>
   107ac:	4642      	mov	r2, r8
   107ae:	464b      	mov	r3, r9
   107b0:	f7fb fd4a 	bl	c248 <__aeabi_dsub>
   107b4:	4680      	mov	r8, r0
   107b6:	4689      	mov	r9, r1
   107b8:	4630      	mov	r0, r6
   107ba:	4639      	mov	r1, r7
   107bc:	f7fb ff84 	bl	c6c8 <__aeabi_d2iz>
   107c0:	ec49 8b18 	vmov	d8, r8, r9
   107c4:	4680      	mov	r8, r0
   107c6:	f7fb fe8d 	bl	c4e4 <__aeabi_i2d>
   107ca:	4602      	mov	r2, r0
   107cc:	460b      	mov	r3, r1
   107ce:	f108 0830 	add.w	r8, r8, #48	; 0x30
   107d2:	4630      	mov	r0, r6
   107d4:	4639      	mov	r1, r7
   107d6:	f7fb fd37 	bl	c248 <__aeabi_dsub>
   107da:	f805 8b01 	strb.w	r8, [r5], #1
   107de:	4606      	mov	r6, r0
   107e0:	460f      	mov	r7, r1
   107e2:	4602      	mov	r2, r0
   107e4:	460b      	mov	r3, r1
   107e6:	ec51 0b18 	vmov	r0, r1, d8
   107ea:	f7fb ff63 	bl	c6b4 <__aeabi_dcmpgt>
   107ee:	2800      	cmp	r0, #0
   107f0:	f040 851a 	bne.w	11228 <_dtoa_r+0xde8>
   107f4:	f04f 0900 	mov.w	r9, #0
   107f8:	ee09 aa10 	vmov	s18, sl
   107fc:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   10800:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10804:	46cb      	mov	fp, r9
   10806:	ec59 8b18 	vmov	r8, r9, d8
   1080a:	ee08 4a10 	vmov	s16, r4
   1080e:	462c      	mov	r4, r5
   10810:	e024      	b.n	1085c <_dtoa_r+0x41c>
   10812:	45d3      	cmp	fp, sl
   10814:	da4f      	bge.n	108b6 <_dtoa_r+0x476>
   10816:	f7fc faed 	bl	cdf4 <__aeabi_dmul>
   1081a:	2200      	movs	r2, #0
   1081c:	4b7f      	ldr	r3, [pc, #508]	; (10a1c <_dtoa_r+0x5dc>)
   1081e:	4680      	mov	r8, r0
   10820:	4689      	mov	r9, r1
   10822:	4630      	mov	r0, r6
   10824:	4639      	mov	r1, r7
   10826:	f7fc fae5 	bl	cdf4 <__aeabi_dmul>
   1082a:	460f      	mov	r7, r1
   1082c:	4606      	mov	r6, r0
   1082e:	f7fb ff4b 	bl	c6c8 <__aeabi_d2iz>
   10832:	4605      	mov	r5, r0
   10834:	f7fb fe56 	bl	c4e4 <__aeabi_i2d>
   10838:	4602      	mov	r2, r0
   1083a:	460b      	mov	r3, r1
   1083c:	3530      	adds	r5, #48	; 0x30
   1083e:	4630      	mov	r0, r6
   10840:	4639      	mov	r1, r7
   10842:	f7fb fd01 	bl	c248 <__aeabi_dsub>
   10846:	4642      	mov	r2, r8
   10848:	464b      	mov	r3, r9
   1084a:	f804 5b01 	strb.w	r5, [r4], #1
   1084e:	4606      	mov	r6, r0
   10850:	460f      	mov	r7, r1
   10852:	f7fb ff11 	bl	c678 <__aeabi_dcmplt>
   10856:	2800      	cmp	r0, #0
   10858:	f040 84e1 	bne.w	1121e <_dtoa_r+0xdde>
   1085c:	4632      	mov	r2, r6
   1085e:	463b      	mov	r3, r7
   10860:	2000      	movs	r0, #0
   10862:	496b      	ldr	r1, [pc, #428]	; (10a10 <_dtoa_r+0x5d0>)
   10864:	f7fb fcf0 	bl	c248 <__aeabi_dsub>
   10868:	4642      	mov	r2, r8
   1086a:	464b      	mov	r3, r9
   1086c:	f10b 0b01 	add.w	fp, fp, #1
   10870:	f7fb ff02 	bl	c678 <__aeabi_dcmplt>
   10874:	4605      	mov	r5, r0
   10876:	2200      	movs	r2, #0
   10878:	4b68      	ldr	r3, [pc, #416]	; (10a1c <_dtoa_r+0x5dc>)
   1087a:	4640      	mov	r0, r8
   1087c:	4649      	mov	r1, r9
   1087e:	2d00      	cmp	r5, #0
   10880:	d0c7      	beq.n	10812 <_dtoa_r+0x3d2>
   10882:	4625      	mov	r5, r4
   10884:	9909      	ldr	r1, [sp, #36]	; 0x24
   10886:	ee19 aa10 	vmov	sl, s18
   1088a:	ee18 4a10 	vmov	r4, s16
   1088e:	e002      	b.n	10896 <_dtoa_r+0x456>
   10890:	428d      	cmp	r5, r1
   10892:	f000 849c 	beq.w	111ce <_dtoa_r+0xd8e>
   10896:	462a      	mov	r2, r5
   10898:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   1089c:	2b39      	cmp	r3, #57	; 0x39
   1089e:	d0f7      	beq.n	10890 <_dtoa_r+0x450>
   108a0:	3301      	adds	r3, #1
   108a2:	9109      	str	r1, [sp, #36]	; 0x24
   108a4:	b2db      	uxtb	r3, r3
   108a6:	702b      	strb	r3, [r5, #0]
   108a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   108aa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   108ae:	3301      	adds	r3, #1
   108b0:	9209      	str	r2, [sp, #36]	; 0x24
   108b2:	9306      	str	r3, [sp, #24]
   108b4:	e092      	b.n	109dc <_dtoa_r+0x59c>
   108b6:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   108ba:	ee19 aa10 	vmov	sl, s18
   108be:	ee18 4a10 	vmov	r4, s16
   108c2:	9a06      	ldr	r2, [sp, #24]
   108c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   108c6:	2a0e      	cmp	r2, #14
   108c8:	dc02      	bgt.n	108d0 <_dtoa_r+0x490>
   108ca:	2b00      	cmp	r3, #0
   108cc:	f280 81e4 	bge.w	10c98 <_dtoa_r+0x858>
   108d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   108d2:	2a00      	cmp	r2, #0
   108d4:	f000 80a8 	beq.w	10a28 <_dtoa_r+0x5e8>
   108d8:	9a01      	ldr	r2, [sp, #4]
   108da:	2a01      	cmp	r2, #1
   108dc:	f340 83ce 	ble.w	1107c <_dtoa_r+0xc3c>
   108e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108e2:	1e5f      	subs	r7, r3, #1
   108e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108e6:	42bb      	cmp	r3, r7
   108e8:	f280 837a 	bge.w	10fe0 <_dtoa_r+0xba0>
   108ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108ee:	970e      	str	r7, [sp, #56]	; 0x38
   108f0:	1afb      	subs	r3, r7, r3
   108f2:	2700      	movs	r7, #0
   108f4:	449b      	add	fp, r3
   108f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108f8:	2b00      	cmp	r3, #0
   108fa:	f2c0 8463 	blt.w	111c4 <_dtoa_r+0xd84>
   108fe:	9a08      	ldr	r2, [sp, #32]
   10900:	4611      	mov	r1, r2
   10902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10904:	4419      	add	r1, r3
   10906:	4616      	mov	r6, r2
   10908:	441a      	add	r2, r3
   1090a:	9108      	str	r1, [sp, #32]
   1090c:	920c      	str	r2, [sp, #48]	; 0x30
   1090e:	2101      	movs	r1, #1
   10910:	4620      	mov	r0, r4
   10912:	f01a fcb3 	bl	2b27c <__i2b>
   10916:	4605      	mov	r5, r0
   10918:	e089      	b.n	10a2e <_dtoa_r+0x5ee>
   1091a:	2301      	movs	r3, #1
   1091c:	eba8 0505 	sub.w	r5, r8, r5
   10920:	930f      	str	r3, [sp, #60]	; 0x3c
   10922:	1e6b      	subs	r3, r5, #1
   10924:	9308      	str	r3, [sp, #32]
   10926:	f57f ae38 	bpl.w	1059a <_dtoa_r+0x15a>
   1092a:	f1c5 0301 	rsb	r3, r5, #1
   1092e:	930c      	str	r3, [sp, #48]	; 0x30
   10930:	2300      	movs	r3, #0
   10932:	9308      	str	r3, [sp, #32]
   10934:	e633      	b.n	1059e <_dtoa_r+0x15e>
   10936:	4658      	mov	r0, fp
   10938:	f7fb fdd4 	bl	c4e4 <__aeabi_i2d>
   1093c:	4632      	mov	r2, r6
   1093e:	463b      	mov	r3, r7
   10940:	f7fb fe90 	bl	c664 <__aeabi_dcmpeq>
   10944:	2800      	cmp	r0, #0
   10946:	f47f ae0e 	bne.w	10566 <_dtoa_r+0x126>
   1094a:	f10b 3bff 	add.w	fp, fp, #4294967295
   1094e:	e60a      	b.n	10566 <_dtoa_r+0x126>
   10950:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 10a24 <_dtoa_r+0x5e4>
   10954:	4648      	mov	r0, r9
   10956:	b019      	add	sp, #100	; 0x64
   10958:	ecbd 8b04 	vpop	{d8-d9}
   1095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10960:	f1c0 0020 	rsb	r0, r0, #32
   10964:	fa06 f000 	lsl.w	r0, r6, r0
   10968:	e5ca      	b.n	10500 <_dtoa_r+0xc0>
   1096a:	2501      	movs	r5, #1
   1096c:	e62e      	b.n	105cc <_dtoa_r+0x18c>
   1096e:	4640      	mov	r0, r8
   10970:	f7fb fdb8 	bl	c4e4 <__aeabi_i2d>
   10974:	4632      	mov	r2, r6
   10976:	463b      	mov	r3, r7
   10978:	f7fc fa3c 	bl	cdf4 <__aeabi_dmul>
   1097c:	2200      	movs	r2, #0
   1097e:	4b25      	ldr	r3, [pc, #148]	; (10a14 <_dtoa_r+0x5d4>)
   10980:	f7fb fc64 	bl	c24c <__adddf3>
   10984:	4680      	mov	r8, r0
   10986:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   1098a:	4630      	mov	r0, r6
   1098c:	4639      	mov	r1, r7
   1098e:	2200      	movs	r2, #0
   10990:	4b23      	ldr	r3, [pc, #140]	; (10a20 <_dtoa_r+0x5e0>)
   10992:	f7fb fc59 	bl	c248 <__aeabi_dsub>
   10996:	4642      	mov	r2, r8
   10998:	464b      	mov	r3, r9
   1099a:	4606      	mov	r6, r0
   1099c:	460f      	mov	r7, r1
   1099e:	f7fb fe89 	bl	c6b4 <__aeabi_dcmpgt>
   109a2:	2800      	cmp	r0, #0
   109a4:	f040 8335 	bne.w	11012 <_dtoa_r+0xbd2>
   109a8:	4630      	mov	r0, r6
   109aa:	4639      	mov	r1, r7
   109ac:	4642      	mov	r2, r8
   109ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   109b2:	f7fb fe61 	bl	c678 <__aeabi_dcmplt>
   109b6:	2800      	cmp	r0, #0
   109b8:	d083      	beq.n	108c2 <_dtoa_r+0x482>
   109ba:	2700      	movs	r7, #0
   109bc:	463d      	mov	r5, r7
   109be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   109c4:	43de      	mvns	r6, r3
   109c6:	4639      	mov	r1, r7
   109c8:	4620      	mov	r0, r4
   109ca:	f01a fb69 	bl	2b0a0 <_Bfree>
   109ce:	1c73      	adds	r3, r6, #1
   109d0:	9306      	str	r3, [sp, #24]
   109d2:	b11d      	cbz	r5, 109dc <_dtoa_r+0x59c>
   109d4:	4629      	mov	r1, r5
   109d6:	4620      	mov	r0, r4
   109d8:	f01a fb62 	bl	2b0a0 <_Bfree>
   109dc:	4651      	mov	r1, sl
   109de:	4620      	mov	r0, r4
   109e0:	f01a fb5e 	bl	2b0a0 <_Bfree>
   109e4:	2300      	movs	r3, #0
   109e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109e8:	7013      	strb	r3, [r2, #0]
   109ea:	9b07      	ldr	r3, [sp, #28]
   109ec:	4619      	mov	r1, r3
   109ee:	9b06      	ldr	r3, [sp, #24]
   109f0:	600b      	str	r3, [r1, #0]
   109f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   109f4:	2b00      	cmp	r3, #0
   109f6:	f43f ad5f 	beq.w	104b8 <_dtoa_r+0x78>
   109fa:	4648      	mov	r0, r9
   109fc:	601a      	str	r2, [r3, #0]
   109fe:	b019      	add	sp, #100	; 0x64
   10a00:	ecbd 8b04 	vpop	{d8-d9}
   10a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a08:	0002f198 	.word	0x0002f198
   10a0c:	0002f170 	.word	0x0002f170
   10a10:	3ff00000 	.word	0x3ff00000
   10a14:	401c0000 	.word	0x401c0000
   10a18:	3fe00000 	.word	0x3fe00000
   10a1c:	40240000 	.word	0x40240000
   10a20:	40140000 	.word	0x40140000
   10a24:	0002fb1c 	.word	0x0002fb1c
   10a28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10a2a:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
   10a2e:	2e00      	cmp	r6, #0
   10a30:	dd0c      	ble.n	10a4c <_dtoa_r+0x60c>
   10a32:	9a08      	ldr	r2, [sp, #32]
   10a34:	2a00      	cmp	r2, #0
   10a36:	dd09      	ble.n	10a4c <_dtoa_r+0x60c>
   10a38:	42b2      	cmp	r2, r6
   10a3a:	4613      	mov	r3, r2
   10a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a3e:	bfa8      	it	ge
   10a40:	4633      	movge	r3, r6
   10a42:	1ac9      	subs	r1, r1, r3
   10a44:	1af6      	subs	r6, r6, r3
   10a46:	1ad3      	subs	r3, r2, r3
   10a48:	910c      	str	r1, [sp, #48]	; 0x30
   10a4a:	9308      	str	r3, [sp, #32]
   10a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a4e:	b143      	cbz	r3, 10a62 <_dtoa_r+0x622>
   10a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a52:	2b00      	cmp	r3, #0
   10a54:	d061      	beq.n	10b1a <_dtoa_r+0x6da>
   10a56:	2f00      	cmp	r7, #0
   10a58:	f300 82b0 	bgt.w	10fbc <_dtoa_r+0xb7c>
   10a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a5e:	1bda      	subs	r2, r3, r7
   10a60:	d15c      	bne.n	10b1c <_dtoa_r+0x6dc>
   10a62:	2101      	movs	r1, #1
   10a64:	4620      	mov	r0, r4
   10a66:	f01a fc09 	bl	2b27c <__i2b>
   10a6a:	f1bb 0f00 	cmp.w	fp, #0
   10a6e:	4607      	mov	r7, r0
   10a70:	f300 8138 	bgt.w	10ce4 <_dtoa_r+0x8a4>
   10a74:	9b01      	ldr	r3, [sp, #4]
   10a76:	2b01      	cmp	r3, #1
   10a78:	f340 82ce 	ble.w	11018 <_dtoa_r+0xbd8>
   10a7c:	f04f 0800 	mov.w	r8, #0
   10a80:	f1bb 0f00 	cmp.w	fp, #0
   10a84:	f040 813a 	bne.w	10cfc <_dtoa_r+0x8bc>
   10a88:	2301      	movs	r3, #1
   10a8a:	9908      	ldr	r1, [sp, #32]
   10a8c:	440b      	add	r3, r1
   10a8e:	f013 031f 	ands.w	r3, r3, #31
   10a92:	d049      	beq.n	10b28 <_dtoa_r+0x6e8>
   10a94:	f1c3 0220 	rsb	r2, r3, #32
   10a98:	2a04      	cmp	r2, #4
   10a9a:	f340 8458 	ble.w	1134e <_dtoa_r+0xf0e>
   10a9e:	f1c3 031c 	rsb	r3, r3, #28
   10aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10aa4:	4419      	add	r1, r3
   10aa6:	441a      	add	r2, r3
   10aa8:	441e      	add	r6, r3
   10aaa:	920c      	str	r2, [sp, #48]	; 0x30
   10aac:	9108      	str	r1, [sp, #32]
   10aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	dd05      	ble.n	10ac0 <_dtoa_r+0x680>
   10ab4:	4651      	mov	r1, sl
   10ab6:	461a      	mov	r2, r3
   10ab8:	4620      	mov	r0, r4
   10aba:	f01a fcdb 	bl	2b474 <__lshift>
   10abe:	4682      	mov	sl, r0
   10ac0:	9b08      	ldr	r3, [sp, #32]
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	dd05      	ble.n	10ad2 <_dtoa_r+0x692>
   10ac6:	4639      	mov	r1, r7
   10ac8:	461a      	mov	r2, r3
   10aca:	4620      	mov	r0, r4
   10acc:	f01a fcd2 	bl	2b474 <__lshift>
   10ad0:	4607      	mov	r7, r0
   10ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	f040 811a 	bne.w	10d0e <_dtoa_r+0x8ce>
   10ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10adc:	2b00      	cmp	r3, #0
   10ade:	dc2c      	bgt.n	10b3a <_dtoa_r+0x6fa>
   10ae0:	9b01      	ldr	r3, [sp, #4]
   10ae2:	2b02      	cmp	r3, #2
   10ae4:	dd29      	ble.n	10b3a <_dtoa_r+0x6fa>
   10ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ae8:	2b00      	cmp	r3, #0
   10aea:	f47f af68 	bne.w	109be <_dtoa_r+0x57e>
   10aee:	4639      	mov	r1, r7
   10af0:	2205      	movs	r2, #5
   10af2:	4620      	mov	r0, r4
   10af4:	f01a fade 	bl	2b0b4 <__multadd>
   10af8:	4607      	mov	r7, r0
   10afa:	4650      	mov	r0, sl
   10afc:	4639      	mov	r1, r7
   10afe:	f01a fd21 	bl	2b544 <__mcmp>
   10b02:	2800      	cmp	r0, #0
   10b04:	f77f af5b 	ble.w	109be <_dtoa_r+0x57e>
   10b08:	9809      	ldr	r0, [sp, #36]	; 0x24
   10b0a:	2331      	movs	r3, #49	; 0x31
   10b0c:	9e06      	ldr	r6, [sp, #24]
   10b0e:	4681      	mov	r9, r0
   10b10:	f800 3b01 	strb.w	r3, [r0], #1
   10b14:	3601      	adds	r6, #1
   10b16:	9009      	str	r0, [sp, #36]	; 0x24
   10b18:	e755      	b.n	109c6 <_dtoa_r+0x586>
   10b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10b1c:	4651      	mov	r1, sl
   10b1e:	4620      	mov	r0, r4
   10b20:	f01a fc58 	bl	2b3d4 <__pow5mult>
   10b24:	4682      	mov	sl, r0
   10b26:	e79c      	b.n	10a62 <_dtoa_r+0x622>
   10b28:	231c      	movs	r3, #28
   10b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b2c:	441e      	add	r6, r3
   10b2e:	441a      	add	r2, r3
   10b30:	920c      	str	r2, [sp, #48]	; 0x30
   10b32:	9a08      	ldr	r2, [sp, #32]
   10b34:	441a      	add	r2, r3
   10b36:	9208      	str	r2, [sp, #32]
   10b38:	e7b9      	b.n	10aae <_dtoa_r+0x66e>
   10b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	f000 81b8 	beq.w	10eb2 <_dtoa_r+0xa72>
   10b42:	9b06      	ldr	r3, [sp, #24]
   10b44:	3301      	adds	r3, #1
   10b46:	9306      	str	r3, [sp, #24]
   10b48:	2e00      	cmp	r6, #0
   10b4a:	f300 824b 	bgt.w	10fe4 <_dtoa_r+0xba4>
   10b4e:	f1b8 0f00 	cmp.w	r8, #0
   10b52:	f040 8374 	bne.w	1123e <_dtoa_r+0xdfe>
   10b56:	46a9      	mov	r9, r5
   10b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b5a:	9904      	ldr	r1, [sp, #16]
   10b5c:	1e53      	subs	r3, r2, #1
   10b5e:	4690      	mov	r8, r2
   10b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10b62:	f001 0101 	and.w	r1, r1, #1
   10b66:	441a      	add	r2, r3
   10b68:	9104      	str	r1, [sp, #16]
   10b6a:	920a      	str	r2, [sp, #40]	; 0x28
   10b6c:	4639      	mov	r1, r7
   10b6e:	4650      	mov	r0, sl
   10b70:	f018 ffe8 	bl	29b44 <quorem>
   10b74:	4629      	mov	r1, r5
   10b76:	4683      	mov	fp, r0
   10b78:	4650      	mov	r0, sl
   10b7a:	f01a fce3 	bl	2b544 <__mcmp>
   10b7e:	4639      	mov	r1, r7
   10b80:	4606      	mov	r6, r0
   10b82:	464a      	mov	r2, r9
   10b84:	4620      	mov	r0, r4
   10b86:	f01a fcfb 	bl	2b580 <__mdiff>
   10b8a:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   10b8e:	4601      	mov	r1, r0
   10b90:	9302      	str	r3, [sp, #8]
   10b92:	68c3      	ldr	r3, [r0, #12]
   10b94:	2b00      	cmp	r3, #0
   10b96:	f040 822c 	bne.w	10ff2 <_dtoa_r+0xbb2>
   10b9a:	9008      	str	r0, [sp, #32]
   10b9c:	4650      	mov	r0, sl
   10b9e:	f01a fcd1 	bl	2b544 <__mcmp>
   10ba2:	4603      	mov	r3, r0
   10ba4:	9908      	ldr	r1, [sp, #32]
   10ba6:	4620      	mov	r0, r4
   10ba8:	9308      	str	r3, [sp, #32]
   10baa:	f01a fa79 	bl	2b0a0 <_Bfree>
   10bae:	9b01      	ldr	r3, [sp, #4]
   10bb0:	9904      	ldr	r1, [sp, #16]
   10bb2:	461a      	mov	r2, r3
   10bb4:	9b08      	ldr	r3, [sp, #32]
   10bb6:	431a      	orrs	r2, r3
   10bb8:	430a      	orrs	r2, r1
   10bba:	f000 8396 	beq.w	112ea <_dtoa_r+0xeaa>
   10bbe:	2e00      	cmp	r6, #0
   10bc0:	f2c0 8313 	blt.w	111ea <_dtoa_r+0xdaa>
   10bc4:	9a01      	ldr	r2, [sp, #4]
   10bc6:	4316      	orrs	r6, r2
   10bc8:	9a04      	ldr	r2, [sp, #16]
   10bca:	4332      	orrs	r2, r6
   10bcc:	f000 830d 	beq.w	111ea <_dtoa_r+0xdaa>
   10bd0:	2b00      	cmp	r3, #0
   10bd2:	f300 836a 	bgt.w	112aa <_dtoa_r+0xe6a>
   10bd6:	9b02      	ldr	r3, [sp, #8]
   10bd8:	f108 0601 	add.w	r6, r8, #1
   10bdc:	f888 3000 	strb.w	r3, [r8]
   10be0:	46b3      	mov	fp, r6
   10be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10be4:	4543      	cmp	r3, r8
   10be6:	f000 836a 	beq.w	112be <_dtoa_r+0xe7e>
   10bea:	4651      	mov	r1, sl
   10bec:	2300      	movs	r3, #0
   10bee:	220a      	movs	r2, #10
   10bf0:	4620      	mov	r0, r4
   10bf2:	f01a fa5f 	bl	2b0b4 <__multadd>
   10bf6:	454d      	cmp	r5, r9
   10bf8:	4682      	mov	sl, r0
   10bfa:	4629      	mov	r1, r5
   10bfc:	f04f 0300 	mov.w	r3, #0
   10c00:	f04f 020a 	mov.w	r2, #10
   10c04:	4620      	mov	r0, r4
   10c06:	f000 81f9 	beq.w	10ffc <_dtoa_r+0xbbc>
   10c0a:	f01a fa53 	bl	2b0b4 <__multadd>
   10c0e:	4649      	mov	r1, r9
   10c10:	4605      	mov	r5, r0
   10c12:	2300      	movs	r3, #0
   10c14:	220a      	movs	r2, #10
   10c16:	4620      	mov	r0, r4
   10c18:	f01a fa4c 	bl	2b0b4 <__multadd>
   10c1c:	46b0      	mov	r8, r6
   10c1e:	4681      	mov	r9, r0
   10c20:	e7a4      	b.n	10b6c <_dtoa_r+0x72c>
   10c22:	f000 81ad 	beq.w	10f80 <_dtoa_r+0xb40>
   10c26:	9b06      	ldr	r3, [sp, #24]
   10c28:	f1c3 0900 	rsb	r9, r3, #0
   10c2c:	4bbe      	ldr	r3, [pc, #760]	; (10f28 <_dtoa_r+0xae8>)
   10c2e:	f009 020f 	and.w	r2, r9, #15
   10c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c3e:	f7fc f8d9 	bl	cdf4 <__aeabi_dmul>
   10c42:	ea5f 1929 	movs.w	r9, r9, asr #4
   10c46:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   10c4a:	f000 836f 	beq.w	1132c <_dtoa_r+0xeec>
   10c4e:	4ab7      	ldr	r2, [pc, #732]	; (10f2c <_dtoa_r+0xaec>)
   10c50:	2300      	movs	r3, #0
   10c52:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   10c56:	f04f 0802 	mov.w	r8, #2
   10c5a:	46ab      	mov	fp, r5
   10c5c:	4606      	mov	r6, r0
   10c5e:	460f      	mov	r7, r1
   10c60:	4615      	mov	r5, r2
   10c62:	f019 0f01 	tst.w	r9, #1
   10c66:	4630      	mov	r0, r6
   10c68:	4639      	mov	r1, r7
   10c6a:	d008      	beq.n	10c7e <_dtoa_r+0x83e>
   10c6c:	f108 0801 	add.w	r8, r8, #1
   10c70:	e9d5 2300 	ldrd	r2, r3, [r5]
   10c74:	f7fc f8be 	bl	cdf4 <__aeabi_dmul>
   10c78:	465b      	mov	r3, fp
   10c7a:	4606      	mov	r6, r0
   10c7c:	460f      	mov	r7, r1
   10c7e:	ea5f 0969 	movs.w	r9, r9, asr #1
   10c82:	f105 0508 	add.w	r5, r5, #8
   10c86:	d1ec      	bne.n	10c62 <_dtoa_r+0x822>
   10c88:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10c8c:	2b00      	cmp	r3, #0
   10c8e:	f47f ad5d 	bne.w	1074c <_dtoa_r+0x30c>
   10c92:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
   10c96:	e559      	b.n	1074c <_dtoa_r+0x30c>
   10c98:	4ba3      	ldr	r3, [pc, #652]	; (10f28 <_dtoa_r+0xae8>)
   10c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c9e:	ed93 7b00 	vldr	d7, [r3]
   10ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	eeb0 8a47 	vmov.f32	s16, s14
   10caa:	eef0 8a67 	vmov.f32	s17, s15
   10cae:	f280 8211 	bge.w	110d4 <_dtoa_r+0xc94>
   10cb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10cb4:	2f00      	cmp	r7, #0
   10cb6:	f300 820d 	bgt.w	110d4 <_dtoa_r+0xc94>
   10cba:	2f00      	cmp	r7, #0
   10cbc:	f47f ae7d 	bne.w	109ba <_dtoa_r+0x57a>
   10cc0:	2200      	movs	r2, #0
   10cc2:	4b9b      	ldr	r3, [pc, #620]	; (10f30 <_dtoa_r+0xaf0>)
   10cc4:	ec51 0b17 	vmov	r0, r1, d7
   10cc8:	f7fc f894 	bl	cdf4 <__aeabi_dmul>
   10ccc:	4602      	mov	r2, r0
   10cce:	460b      	mov	r3, r1
   10cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10cd4:	f7fb fcda 	bl	c68c <__aeabi_dcmple>
   10cd8:	2800      	cmp	r0, #0
   10cda:	f000 819b 	beq.w	11014 <_dtoa_r+0xbd4>
   10cde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10ce0:	463d      	mov	r5, r7
   10ce2:	e66c      	b.n	109be <_dtoa_r+0x57e>
   10ce4:	4601      	mov	r1, r0
   10ce6:	465a      	mov	r2, fp
   10ce8:	4620      	mov	r0, r4
   10cea:	f01a fb73 	bl	2b3d4 <__pow5mult>
   10cee:	9b01      	ldr	r3, [sp, #4]
   10cf0:	4607      	mov	r7, r0
   10cf2:	2b01      	cmp	r3, #1
   10cf4:	f340 814a 	ble.w	10f8c <_dtoa_r+0xb4c>
   10cf8:	f04f 0800 	mov.w	r8, #0
   10cfc:	693b      	ldr	r3, [r7, #16]
   10cfe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10d02:	6918      	ldr	r0, [r3, #16]
   10d04:	f01a fa68 	bl	2b1d8 <__hi0bits>
   10d08:	f1c0 0320 	rsb	r3, r0, #32
   10d0c:	e6bd      	b.n	10a8a <_dtoa_r+0x64a>
   10d0e:	4639      	mov	r1, r7
   10d10:	4650      	mov	r0, sl
   10d12:	f01a fc17 	bl	2b544 <__mcmp>
   10d16:	2800      	cmp	r0, #0
   10d18:	f6bf aedf 	bge.w	10ada <_dtoa_r+0x69a>
   10d1c:	4651      	mov	r1, sl
   10d1e:	2300      	movs	r3, #0
   10d20:	220a      	movs	r2, #10
   10d22:	4620      	mov	r0, r4
   10d24:	f01a f9c6 	bl	2b0b4 <__multadd>
   10d28:	9b06      	ldr	r3, [sp, #24]
   10d2a:	4682      	mov	sl, r0
   10d2c:	f103 39ff 	add.w	r9, r3, #4294967295
   10d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d32:	2b00      	cmp	r3, #0
   10d34:	f040 82e2 	bne.w	112fc <_dtoa_r+0xebc>
   10d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	f300 82db 	bgt.w	112f6 <_dtoa_r+0xeb6>
   10d40:	9b01      	ldr	r3, [sp, #4]
   10d42:	2b02      	cmp	r3, #2
   10d44:	f340 82d7 	ble.w	112f6 <_dtoa_r+0xeb6>
   10d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d4a:	f8cd 9018 	str.w	r9, [sp, #24]
   10d4e:	930a      	str	r3, [sp, #40]	; 0x28
   10d50:	e6c9      	b.n	10ae6 <_dtoa_r+0x6a6>
   10d52:	ed9d 7b02 	vldr	d7, [sp, #8]
   10d56:	f04f 0802 	mov.w	r8, #2
   10d5a:	eeb0 8a47 	vmov.f32	s16, s14
   10d5e:	eef0 8a67 	vmov.f32	s17, s15
   10d62:	e4d8      	b.n	10716 <_dtoa_r+0x2d6>
   10d64:	2301      	movs	r3, #1
   10d66:	930d      	str	r3, [sp, #52]	; 0x34
   10d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d6a:	9a06      	ldr	r2, [sp, #24]
   10d6c:	4413      	add	r3, r2
   10d6e:	9314      	str	r3, [sp, #80]	; 0x50
   10d70:	3301      	adds	r3, #1
   10d72:	2b01      	cmp	r3, #1
   10d74:	461e      	mov	r6, r3
   10d76:	930a      	str	r3, [sp, #40]	; 0x28
   10d78:	bfb8      	it	lt
   10d7a:	2601      	movlt	r6, #1
   10d7c:	2100      	movs	r1, #0
   10d7e:	2e17      	cmp	r6, #23
   10d80:	6461      	str	r1, [r4, #68]	; 0x44
   10d82:	f340 82d6 	ble.w	11332 <_dtoa_r+0xef2>
   10d86:	2201      	movs	r2, #1
   10d88:	2304      	movs	r3, #4
   10d8a:	005b      	lsls	r3, r3, #1
   10d8c:	4611      	mov	r1, r2
   10d8e:	3201      	adds	r2, #1
   10d90:	f103 0014 	add.w	r0, r3, #20
   10d94:	42b0      	cmp	r0, r6
   10d96:	d9f8      	bls.n	10d8a <_dtoa_r+0x94a>
   10d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d9a:	6461      	str	r1, [r4, #68]	; 0x44
   10d9c:	2b0e      	cmp	r3, #14
   10d9e:	bf8c      	ite	hi
   10da0:	2500      	movhi	r5, #0
   10da2:	f005 0501 	andls.w	r5, r5, #1
   10da6:	e492      	b.n	106ce <_dtoa_r+0x28e>
   10da8:	2301      	movs	r3, #1
   10daa:	930d      	str	r3, [sp, #52]	; 0x34
   10dac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10dae:	2e00      	cmp	r6, #0
   10db0:	f340 812a 	ble.w	11008 <_dtoa_r+0xbc8>
   10db4:	9614      	str	r6, [sp, #80]	; 0x50
   10db6:	960a      	str	r6, [sp, #40]	; 0x28
   10db8:	e7e0      	b.n	10d7c <_dtoa_r+0x93c>
   10dba:	2300      	movs	r3, #0
   10dbc:	930d      	str	r3, [sp, #52]	; 0x34
   10dbe:	e7d3      	b.n	10d68 <_dtoa_r+0x928>
   10dc0:	2300      	movs	r3, #0
   10dc2:	930d      	str	r3, [sp, #52]	; 0x34
   10dc4:	e7f2      	b.n	10dac <_dtoa_r+0x96c>
   10dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10dc8:	4642      	mov	r2, r8
   10dca:	4957      	ldr	r1, [pc, #348]	; (10f28 <_dtoa_r+0xae8>)
   10dcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10dce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   10dd2:	464b      	mov	r3, r9
   10dd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   10dd8:	f7fc f80c 	bl	cdf4 <__aeabi_dmul>
   10ddc:	4602      	mov	r2, r0
   10dde:	460b      	mov	r3, r1
   10de0:	4630      	mov	r0, r6
   10de2:	4639      	mov	r1, r7
   10de4:	ec43 2b18 	vmov	d8, r2, r3
   10de8:	f7fb fc6e 	bl	c6c8 <__aeabi_d2iz>
   10dec:	4680      	mov	r8, r0
   10dee:	f7fb fb79 	bl	c4e4 <__aeabi_i2d>
   10df2:	460b      	mov	r3, r1
   10df4:	4602      	mov	r2, r0
   10df6:	4639      	mov	r1, r7
   10df8:	4630      	mov	r0, r6
   10dfa:	f108 0830 	add.w	r8, r8, #48	; 0x30
   10dfe:	f7fb fa23 	bl	c248 <__aeabi_dsub>
   10e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e04:	4606      	mov	r6, r0
   10e06:	460f      	mov	r7, r1
   10e08:	2b01      	cmp	r3, #1
   10e0a:	f805 8b01 	strb.w	r8, [r5], #1
   10e0e:	d022      	beq.n	10e56 <_dtoa_r+0xa16>
   10e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   10e18:	4413      	add	r3, r2
   10e1a:	469b      	mov	fp, r3
   10e1c:	2200      	movs	r2, #0
   10e1e:	4b45      	ldr	r3, [pc, #276]	; (10f34 <_dtoa_r+0xaf4>)
   10e20:	4630      	mov	r0, r6
   10e22:	4639      	mov	r1, r7
   10e24:	f7fb ffe6 	bl	cdf4 <__aeabi_dmul>
   10e28:	4689      	mov	r9, r1
   10e2a:	4680      	mov	r8, r0
   10e2c:	f7fb fc4c 	bl	c6c8 <__aeabi_d2iz>
   10e30:	4607      	mov	r7, r0
   10e32:	f7fb fb57 	bl	c4e4 <__aeabi_i2d>
   10e36:	460b      	mov	r3, r1
   10e38:	4602      	mov	r2, r0
   10e3a:	4649      	mov	r1, r9
   10e3c:	4640      	mov	r0, r8
   10e3e:	f7fb fa03 	bl	c248 <__aeabi_dsub>
   10e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
   10e46:	4606      	mov	r6, r0
   10e48:	460f      	mov	r7, r1
   10e4a:	f805 3b01 	strb.w	r3, [r5], #1
   10e4e:	455d      	cmp	r5, fp
   10e50:	d1e4      	bne.n	10e1c <_dtoa_r+0x9dc>
   10e52:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10e56:	2200      	movs	r2, #0
   10e58:	4b37      	ldr	r3, [pc, #220]	; (10f38 <_dtoa_r+0xaf8>)
   10e5a:	ee18 0a10 	vmov	r0, s16
   10e5e:	ec59 8b18 	vmov	r8, r9, d8
   10e62:	4649      	mov	r1, r9
   10e64:	f7fb f9f2 	bl	c24c <__adddf3>
   10e68:	4602      	mov	r2, r0
   10e6a:	460b      	mov	r3, r1
   10e6c:	4630      	mov	r0, r6
   10e6e:	4639      	mov	r1, r7
   10e70:	f7fb fc20 	bl	c6b4 <__aeabi_dcmpgt>
   10e74:	2800      	cmp	r0, #0
   10e76:	f040 81df 	bne.w	11238 <_dtoa_r+0xdf8>
   10e7a:	ee18 2a10 	vmov	r2, s16
   10e7e:	464b      	mov	r3, r9
   10e80:	2000      	movs	r0, #0
   10e82:	492d      	ldr	r1, [pc, #180]	; (10f38 <_dtoa_r+0xaf8>)
   10e84:	f7fb f9e0 	bl	c248 <__aeabi_dsub>
   10e88:	4602      	mov	r2, r0
   10e8a:	460b      	mov	r3, r1
   10e8c:	4630      	mov	r0, r6
   10e8e:	4639      	mov	r1, r7
   10e90:	f7fb fbf2 	bl	c678 <__aeabi_dcmplt>
   10e94:	2800      	cmp	r0, #0
   10e96:	f43f ad14 	beq.w	108c2 <_dtoa_r+0x482>
   10e9a:	462a      	mov	r2, r5
   10e9c:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   10ea0:	2b30      	cmp	r3, #48	; 0x30
   10ea2:	d0fa      	beq.n	10e9a <_dtoa_r+0xa5a>
   10ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10ea6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10eaa:	3301      	adds	r3, #1
   10eac:	9209      	str	r2, [sp, #36]	; 0x24
   10eae:	9306      	str	r3, [sp, #24]
   10eb0:	e594      	b.n	109dc <_dtoa_r+0x59c>
   10eb2:	9b06      	ldr	r3, [sp, #24]
   10eb4:	3301      	adds	r3, #1
   10eb6:	9306      	str	r3, [sp, #24]
   10eb8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10ebc:	2601      	movs	r6, #1
   10ebe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   10ec2:	e002      	b.n	10eca <_dtoa_r+0xa8a>
   10ec4:	f01a f8f6 	bl	2b0b4 <__multadd>
   10ec8:	4682      	mov	sl, r0
   10eca:	4639      	mov	r1, r7
   10ecc:	4650      	mov	r0, sl
   10ece:	f018 fe39 	bl	29b44 <quorem>
   10ed2:	454e      	cmp	r6, r9
   10ed4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   10ed8:	4651      	mov	r1, sl
   10eda:	f04f 0300 	mov.w	r3, #0
   10ede:	f04f 020a 	mov.w	r2, #10
   10ee2:	4620      	mov	r0, r4
   10ee4:	f106 0601 	add.w	r6, r6, #1
   10ee8:	f808 cb01 	strb.w	ip, [r8], #1
   10eec:	dbea      	blt.n	10ec4 <_dtoa_r+0xa84>
   10eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ef0:	2600      	movs	r6, #0
   10ef2:	f8cd c008 	str.w	ip, [sp, #8]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	bfcc      	ite	gt
   10efa:	469b      	movgt	fp, r3
   10efc:	f04f 0b01 	movle.w	fp, #1
   10f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f02:	449b      	add	fp, r3
   10f04:	4651      	mov	r1, sl
   10f06:	2201      	movs	r2, #1
   10f08:	4620      	mov	r0, r4
   10f0a:	f01a fab3 	bl	2b474 <__lshift>
   10f0e:	4639      	mov	r1, r7
   10f10:	4682      	mov	sl, r0
   10f12:	f01a fb17 	bl	2b544 <__mcmp>
   10f16:	2800      	cmp	r0, #0
   10f18:	f340 813d 	ble.w	11196 <_dtoa_r+0xd56>
   10f1c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   10f20:	f10b 3bff 	add.w	fp, fp, #4294967295
   10f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10f26:	e00e      	b.n	10f46 <_dtoa_r+0xb06>
   10f28:	0002f198 	.word	0x0002f198
   10f2c:	0002f170 	.word	0x0002f170
   10f30:	40140000 	.word	0x40140000
   10f34:	40240000 	.word	0x40240000
   10f38:	3fe00000 	.word	0x3fe00000
   10f3c:	455a      	cmp	r2, fp
   10f3e:	f000 8135 	beq.w	111ac <_dtoa_r+0xd6c>
   10f42:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   10f46:	2b39      	cmp	r3, #57	; 0x39
   10f48:	f10b 0801 	add.w	r8, fp, #1
   10f4c:	d0f6      	beq.n	10f3c <_dtoa_r+0xafc>
   10f4e:	3301      	adds	r3, #1
   10f50:	f88b 3000 	strb.w	r3, [fp]
   10f54:	4639      	mov	r1, r7
   10f56:	4620      	mov	r0, r4
   10f58:	f01a f8a2 	bl	2b0a0 <_Bfree>
   10f5c:	2d00      	cmp	r5, #0
   10f5e:	f000 812c 	beq.w	111ba <_dtoa_r+0xd7a>
   10f62:	2e00      	cmp	r6, #0
   10f64:	f000 81ed 	beq.w	11342 <_dtoa_r+0xf02>
   10f68:	42ae      	cmp	r6, r5
   10f6a:	f000 81ea 	beq.w	11342 <_dtoa_r+0xf02>
   10f6e:	4631      	mov	r1, r6
   10f70:	4620      	mov	r0, r4
   10f72:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10f76:	f01a f893 	bl	2b0a0 <_Bfree>
   10f7a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   10f7e:	e529      	b.n	109d4 <_dtoa_r+0x594>
   10f80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   10f84:	f04f 0802 	mov.w	r8, #2
   10f88:	f7ff bbe0 	b.w	1074c <_dtoa_r+0x30c>
   10f8c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10f90:	2900      	cmp	r1, #0
   10f92:	f47f aeb1 	bne.w	10cf8 <_dtoa_r+0x8b8>
   10f96:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	f47f aeac 	bne.w	10cf8 <_dtoa_r+0x8b8>
   10fa0:	4bca      	ldr	r3, [pc, #808]	; (112cc <_dtoa_r+0xe8c>)
   10fa2:	4013      	ands	r3, r2
   10fa4:	2b00      	cmp	r3, #0
   10fa6:	f000 818d 	beq.w	112c4 <_dtoa_r+0xe84>
   10faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10fac:	f04f 0801 	mov.w	r8, #1
   10fb0:	3301      	adds	r3, #1
   10fb2:	930c      	str	r3, [sp, #48]	; 0x30
   10fb4:	9b08      	ldr	r3, [sp, #32]
   10fb6:	3301      	adds	r3, #1
   10fb8:	9308      	str	r3, [sp, #32]
   10fba:	e561      	b.n	10a80 <_dtoa_r+0x640>
   10fbc:	4629      	mov	r1, r5
   10fbe:	463a      	mov	r2, r7
   10fc0:	4620      	mov	r0, r4
   10fc2:	f01a fa07 	bl	2b3d4 <__pow5mult>
   10fc6:	4605      	mov	r5, r0
   10fc8:	4652      	mov	r2, sl
   10fca:	4620      	mov	r0, r4
   10fcc:	4629      	mov	r1, r5
   10fce:	f01a f95f 	bl	2b290 <__multiply>
   10fd2:	4680      	mov	r8, r0
   10fd4:	4651      	mov	r1, sl
   10fd6:	4620      	mov	r0, r4
   10fd8:	46c2      	mov	sl, r8
   10fda:	f01a f861 	bl	2b0a0 <_Bfree>
   10fde:	e53d      	b.n	10a5c <_dtoa_r+0x61c>
   10fe0:	1bdf      	subs	r7, r3, r7
   10fe2:	e488      	b.n	108f6 <_dtoa_r+0x4b6>
   10fe4:	4629      	mov	r1, r5
   10fe6:	4632      	mov	r2, r6
   10fe8:	4620      	mov	r0, r4
   10fea:	f01a fa43 	bl	2b474 <__lshift>
   10fee:	4605      	mov	r5, r0
   10ff0:	e5ad      	b.n	10b4e <_dtoa_r+0x70e>
   10ff2:	4620      	mov	r0, r4
   10ff4:	f01a f854 	bl	2b0a0 <_Bfree>
   10ff8:	2301      	movs	r3, #1
   10ffa:	e5e0      	b.n	10bbe <_dtoa_r+0x77e>
   10ffc:	f01a f85a 	bl	2b0b4 <__multadd>
   11000:	46b0      	mov	r8, r6
   11002:	4605      	mov	r5, r0
   11004:	4681      	mov	r9, r0
   11006:	e5b1      	b.n	10b6c <_dtoa_r+0x72c>
   11008:	2301      	movs	r3, #1
   1100a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1100e:	f7ff bb5a 	b.w	106c6 <_dtoa_r+0x286>
   11012:	2700      	movs	r7, #0
   11014:	463d      	mov	r5, r7
   11016:	e577      	b.n	10b08 <_dtoa_r+0x6c8>
   11018:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1101c:	2900      	cmp	r1, #0
   1101e:	f47f ad2d 	bne.w	10a7c <_dtoa_r+0x63c>
   11022:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11026:	2b00      	cmp	r3, #0
   11028:	f47f ad28 	bne.w	10a7c <_dtoa_r+0x63c>
   1102c:	e7b8      	b.n	10fa0 <_dtoa_r+0xb60>
   1102e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11030:	2b00      	cmp	r3, #0
   11032:	f43f ac9c 	beq.w	1096e <_dtoa_r+0x52e>
   11036:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11038:	2d00      	cmp	r5, #0
   1103a:	f77f ac42 	ble.w	108c2 <_dtoa_r+0x482>
   1103e:	9b06      	ldr	r3, [sp, #24]
   11040:	2200      	movs	r2, #0
   11042:	4630      	mov	r0, r6
   11044:	4639      	mov	r1, r7
   11046:	3b01      	subs	r3, #1
   11048:	9312      	str	r3, [sp, #72]	; 0x48
   1104a:	4ba1      	ldr	r3, [pc, #644]	; (112d0 <_dtoa_r+0xe90>)
   1104c:	f7fb fed2 	bl	cdf4 <__aeabi_dmul>
   11050:	4606      	mov	r6, r0
   11052:	460f      	mov	r7, r1
   11054:	f108 0001 	add.w	r0, r8, #1
   11058:	f7fb fa44 	bl	c4e4 <__aeabi_i2d>
   1105c:	4632      	mov	r2, r6
   1105e:	463b      	mov	r3, r7
   11060:	f7fb fec8 	bl	cdf4 <__aeabi_dmul>
   11064:	2200      	movs	r2, #0
   11066:	4b9b      	ldr	r3, [pc, #620]	; (112d4 <_dtoa_r+0xe94>)
   11068:	f7fb f8f0 	bl	c24c <__adddf3>
   1106c:	9511      	str	r5, [sp, #68]	; 0x44
   1106e:	4680      	mov	r8, r0
   11070:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   11074:	f7ff bb8b 	b.w	1078e <_dtoa_r+0x34e>
   11078:	900f      	str	r0, [sp, #60]	; 0x3c
   1107a:	e456      	b.n	1092a <_dtoa_r+0x4ea>
   1107c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1107e:	2a00      	cmp	r2, #0
   11080:	f000 80ac 	beq.w	111dc <_dtoa_r+0xd9c>
   11084:	990c      	ldr	r1, [sp, #48]	; 0x30
   11086:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1108a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1108c:	460e      	mov	r6, r1
   1108e:	9a08      	ldr	r2, [sp, #32]
   11090:	441a      	add	r2, r3
   11092:	9208      	str	r2, [sp, #32]
   11094:	460a      	mov	r2, r1
   11096:	441a      	add	r2, r3
   11098:	920c      	str	r2, [sp, #48]	; 0x30
   1109a:	e438      	b.n	1090e <_dtoa_r+0x4ce>
   1109c:	2100      	movs	r1, #0
   1109e:	4620      	mov	r0, r4
   110a0:	6461      	str	r1, [r4, #68]	; 0x44
   110a2:	f019 ffd7 	bl	2b054 <_Balloc>
   110a6:	9a06      	ldr	r2, [sp, #24]
   110a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   110aa:	2a0e      	cmp	r2, #14
   110ac:	9009      	str	r0, [sp, #36]	; 0x24
   110ae:	6420      	str	r0, [r4, #64]	; 0x40
   110b0:	f300 8153 	bgt.w	1135a <_dtoa_r+0xf1a>
   110b4:	2b00      	cmp	r3, #0
   110b6:	f2c0 8150 	blt.w	1135a <_dtoa_r+0xf1a>
   110ba:	f04f 32ff 	mov.w	r2, #4294967295
   110be:	4b86      	ldr	r3, [pc, #536]	; (112d8 <_dtoa_r+0xe98>)
   110c0:	920a      	str	r2, [sp, #40]	; 0x28
   110c2:	9a06      	ldr	r2, [sp, #24]
   110c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   110c8:	ed93 7b00 	vldr	d7, [r3]
   110cc:	eeb0 8a47 	vmov.f32	s16, s14
   110d0:	eef0 8a67 	vmov.f32	s17, s15
   110d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   110d8:	ec53 2b18 	vmov	r2, r3, d8
   110dc:	4630      	mov	r0, r6
   110de:	4639      	mov	r1, r7
   110e0:	f7fb ffb2 	bl	d048 <__aeabi_ddiv>
   110e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   110e6:	f7fb faef 	bl	c6c8 <__aeabi_d2iz>
   110ea:	4681      	mov	r9, r0
   110ec:	f7fb f9fa 	bl	c4e4 <__aeabi_i2d>
   110f0:	ec53 2b18 	vmov	r2, r3, d8
   110f4:	f7fb fe7e 	bl	cdf4 <__aeabi_dmul>
   110f8:	460b      	mov	r3, r1
   110fa:	4602      	mov	r2, r0
   110fc:	4639      	mov	r1, r7
   110fe:	4630      	mov	r0, r6
   11100:	f7fb f8a2 	bl	c248 <__aeabi_dsub>
   11104:	f109 0330 	add.w	r3, r9, #48	; 0x30
   11108:	f805 3b01 	strb.w	r3, [r5], #1
   1110c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1110e:	2b01      	cmp	r3, #1
   11110:	f000 80ae 	beq.w	11270 <_dtoa_r+0xe30>
   11114:	ee09 aa10 	vmov	s18, sl
   11118:	f04f 0801 	mov.w	r8, #1
   1111c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   11120:	ee09 4a90 	vmov	s19, r4
   11124:	ec5a 9b18 	vmov	r9, sl, d8
   11128:	e017      	b.n	1115a <_dtoa_r+0xd1a>
   1112a:	f7fb ff8d 	bl	d048 <__aeabi_ddiv>
   1112e:	f7fb facb 	bl	c6c8 <__aeabi_d2iz>
   11132:	4604      	mov	r4, r0
   11134:	f7fb f9d6 	bl	c4e4 <__aeabi_i2d>
   11138:	464a      	mov	r2, r9
   1113a:	4653      	mov	r3, sl
   1113c:	f7fb fe5a 	bl	cdf4 <__aeabi_dmul>
   11140:	460b      	mov	r3, r1
   11142:	4602      	mov	r2, r0
   11144:	4639      	mov	r1, r7
   11146:	4630      	mov	r0, r6
   11148:	f7fb f87e 	bl	c248 <__aeabi_dsub>
   1114c:	f104 0330 	add.w	r3, r4, #48	; 0x30
   11150:	45d8      	cmp	r8, fp
   11152:	f805 3b01 	strb.w	r3, [r5], #1
   11156:	f000 8086 	beq.w	11266 <_dtoa_r+0xe26>
   1115a:	2200      	movs	r2, #0
   1115c:	4b5c      	ldr	r3, [pc, #368]	; (112d0 <_dtoa_r+0xe90>)
   1115e:	f7fb fe49 	bl	cdf4 <__aeabi_dmul>
   11162:	2200      	movs	r2, #0
   11164:	2300      	movs	r3, #0
   11166:	4606      	mov	r6, r0
   11168:	460f      	mov	r7, r1
   1116a:	f7fb fa7b 	bl	c664 <__aeabi_dcmpeq>
   1116e:	4604      	mov	r4, r0
   11170:	f108 0801 	add.w	r8, r8, #1
   11174:	464a      	mov	r2, r9
   11176:	4653      	mov	r3, sl
   11178:	4630      	mov	r0, r6
   1117a:	4639      	mov	r1, r7
   1117c:	2c00      	cmp	r4, #0
   1117e:	d0d4      	beq.n	1112a <_dtoa_r+0xcea>
   11180:	ee19 aa10 	vmov	sl, s18
   11184:	ee19 4a90 	vmov	r4, s19
   11188:	9b06      	ldr	r3, [sp, #24]
   1118a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1118e:	3301      	adds	r3, #1
   11190:	9509      	str	r5, [sp, #36]	; 0x24
   11192:	9306      	str	r3, [sp, #24]
   11194:	e422      	b.n	109dc <_dtoa_r+0x59c>
   11196:	d103      	bne.n	111a0 <_dtoa_r+0xd60>
   11198:	9b02      	ldr	r3, [sp, #8]
   1119a:	07d8      	lsls	r0, r3, #31
   1119c:	f53f aebe 	bmi.w	10f1c <_dtoa_r+0xadc>
   111a0:	46d8      	mov	r8, fp
   111a2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   111a6:	2b30      	cmp	r3, #48	; 0x30
   111a8:	d0fa      	beq.n	111a0 <_dtoa_r+0xd60>
   111aa:	e6d3      	b.n	10f54 <_dtoa_r+0xb14>
   111ac:	9a06      	ldr	r2, [sp, #24]
   111ae:	2331      	movs	r3, #49	; 0x31
   111b0:	3201      	adds	r2, #1
   111b2:	9206      	str	r2, [sp, #24]
   111b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111b6:	7013      	strb	r3, [r2, #0]
   111b8:	e6cc      	b.n	10f54 <_dtoa_r+0xb14>
   111ba:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   111be:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   111c2:	e40b      	b.n	109dc <_dtoa_r+0x59c>
   111c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   111c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   111c8:	1a9e      	subs	r6, r3, r2
   111ca:	f7ff bba0 	b.w	1090e <_dtoa_r+0x4ce>
   111ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111d0:	9109      	str	r1, [sp, #36]	; 0x24
   111d2:	3301      	adds	r3, #1
   111d4:	9312      	str	r3, [sp, #72]	; 0x48
   111d6:	2331      	movs	r3, #49	; 0x31
   111d8:	f7ff bb65 	b.w	108a6 <_dtoa_r+0x466>
   111dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   111de:	990c      	ldr	r1, [sp, #48]	; 0x30
   111e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   111e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   111e6:	460e      	mov	r6, r1
   111e8:	e751      	b.n	1108e <_dtoa_r+0xc4e>
   111ea:	2b00      	cmp	r3, #0
   111ec:	dd11      	ble.n	11212 <_dtoa_r+0xdd2>
   111ee:	4651      	mov	r1, sl
   111f0:	2201      	movs	r2, #1
   111f2:	4620      	mov	r0, r4
   111f4:	f01a f93e 	bl	2b474 <__lshift>
   111f8:	4639      	mov	r1, r7
   111fa:	4682      	mov	sl, r0
   111fc:	f01a f9a2 	bl	2b544 <__mcmp>
   11200:	2800      	cmp	r0, #0
   11202:	f340 808c 	ble.w	1131e <_dtoa_r+0xede>
   11206:	9b02      	ldr	r3, [sp, #8]
   11208:	2b39      	cmp	r3, #57	; 0x39
   1120a:	d067      	beq.n	112dc <_dtoa_r+0xe9c>
   1120c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11210:	9302      	str	r3, [sp, #8]
   11212:	9b02      	ldr	r3, [sp, #8]
   11214:	462e      	mov	r6, r5
   11216:	464d      	mov	r5, r9
   11218:	f808 3b01 	strb.w	r3, [r8], #1
   1121c:	e69a      	b.n	10f54 <_dtoa_r+0xb14>
   1121e:	4625      	mov	r5, r4
   11220:	ee19 aa10 	vmov	sl, s18
   11224:	ee18 4a10 	vmov	r4, s16
   11228:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1122a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1122e:	3301      	adds	r3, #1
   11230:	9509      	str	r5, [sp, #36]	; 0x24
   11232:	9306      	str	r3, [sp, #24]
   11234:	f7ff bbd2 	b.w	109dc <_dtoa_r+0x59c>
   11238:	9909      	ldr	r1, [sp, #36]	; 0x24
   1123a:	f7ff bb2c 	b.w	10896 <_dtoa_r+0x456>
   1123e:	6869      	ldr	r1, [r5, #4]
   11240:	4620      	mov	r0, r4
   11242:	f019 ff07 	bl	2b054 <_Balloc>
   11246:	692b      	ldr	r3, [r5, #16]
   11248:	4606      	mov	r6, r0
   1124a:	f105 010c 	add.w	r1, r5, #12
   1124e:	3302      	adds	r3, #2
   11250:	300c      	adds	r0, #12
   11252:	009a      	lsls	r2, r3, #2
   11254:	f7fb fc7a 	bl	cb4c <memcpy>
   11258:	4631      	mov	r1, r6
   1125a:	2201      	movs	r2, #1
   1125c:	4620      	mov	r0, r4
   1125e:	f01a f909 	bl	2b474 <__lshift>
   11262:	4681      	mov	r9, r0
   11264:	e478      	b.n	10b58 <_dtoa_r+0x718>
   11266:	46a1      	mov	r9, r4
   11268:	ee19 aa10 	vmov	sl, s18
   1126c:	ee19 4a90 	vmov	r4, s19
   11270:	4602      	mov	r2, r0
   11272:	460b      	mov	r3, r1
   11274:	f7fa ffea 	bl	c24c <__adddf3>
   11278:	4606      	mov	r6, r0
   1127a:	460f      	mov	r7, r1
   1127c:	ec53 2b18 	vmov	r2, r3, d8
   11280:	f7fb fa18 	bl	c6b4 <__aeabi_dcmpgt>
   11284:	b960      	cbnz	r0, 112a0 <_dtoa_r+0xe60>
   11286:	4630      	mov	r0, r6
   11288:	4639      	mov	r1, r7
   1128a:	ec53 2b18 	vmov	r2, r3, d8
   1128e:	f7fb f9e9 	bl	c664 <__aeabi_dcmpeq>
   11292:	2800      	cmp	r0, #0
   11294:	f43f af78 	beq.w	11188 <_dtoa_r+0xd48>
   11298:	f019 0f01 	tst.w	r9, #1
   1129c:	f43f af74 	beq.w	11188 <_dtoa_r+0xd48>
   112a0:	9b06      	ldr	r3, [sp, #24]
   112a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   112a4:	9312      	str	r3, [sp, #72]	; 0x48
   112a6:	f7ff baf6 	b.w	10896 <_dtoa_r+0x456>
   112aa:	9b02      	ldr	r3, [sp, #8]
   112ac:	2b39      	cmp	r3, #57	; 0x39
   112ae:	d015      	beq.n	112dc <_dtoa_r+0xe9c>
   112b0:	9b02      	ldr	r3, [sp, #8]
   112b2:	462e      	mov	r6, r5
   112b4:	464d      	mov	r5, r9
   112b6:	3301      	adds	r3, #1
   112b8:	f808 3b01 	strb.w	r3, [r8], #1
   112bc:	e64a      	b.n	10f54 <_dtoa_r+0xb14>
   112be:	462e      	mov	r6, r5
   112c0:	464d      	mov	r5, r9
   112c2:	e61f      	b.n	10f04 <_dtoa_r+0xac4>
   112c4:	4698      	mov	r8, r3
   112c6:	f7ff bbdb 	b.w	10a80 <_dtoa_r+0x640>
   112ca:	bf00      	nop
   112cc:	7ff00000 	.word	0x7ff00000
   112d0:	40240000 	.word	0x40240000
   112d4:	401c0000 	.word	0x401c0000
   112d8:	0002f198 	.word	0x0002f198
   112dc:	46c3      	mov	fp, r8
   112de:	2339      	movs	r3, #57	; 0x39
   112e0:	462e      	mov	r6, r5
   112e2:	464d      	mov	r5, r9
   112e4:	f80b 3b01 	strb.w	r3, [fp], #1
   112e8:	e61a      	b.n	10f20 <_dtoa_r+0xae0>
   112ea:	9b02      	ldr	r3, [sp, #8]
   112ec:	2b39      	cmp	r3, #57	; 0x39
   112ee:	d0f5      	beq.n	112dc <_dtoa_r+0xe9c>
   112f0:	2e00      	cmp	r6, #0
   112f2:	dc8b      	bgt.n	1120c <_dtoa_r+0xdcc>
   112f4:	e78d      	b.n	11212 <_dtoa_r+0xdd2>
   112f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   112f8:	930a      	str	r3, [sp, #40]	; 0x28
   112fa:	e5dd      	b.n	10eb8 <_dtoa_r+0xa78>
   112fc:	4629      	mov	r1, r5
   112fe:	2300      	movs	r3, #0
   11300:	220a      	movs	r2, #10
   11302:	4620      	mov	r0, r4
   11304:	f019 fed6 	bl	2b0b4 <__multadd>
   11308:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1130a:	4605      	mov	r5, r0
   1130c:	2b00      	cmp	r3, #0
   1130e:	dc03      	bgt.n	11318 <_dtoa_r+0xed8>
   11310:	9b01      	ldr	r3, [sp, #4]
   11312:	2b02      	cmp	r3, #2
   11314:	f73f ad18 	bgt.w	10d48 <_dtoa_r+0x908>
   11318:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1131a:	930a      	str	r3, [sp, #40]	; 0x28
   1131c:	e414      	b.n	10b48 <_dtoa_r+0x708>
   1131e:	f47f af78 	bne.w	11212 <_dtoa_r+0xdd2>
   11322:	9b02      	ldr	r3, [sp, #8]
   11324:	07de      	lsls	r6, r3, #31
   11326:	f57f af74 	bpl.w	11212 <_dtoa_r+0xdd2>
   1132a:	e76c      	b.n	11206 <_dtoa_r+0xdc6>
   1132c:	f04f 0802 	mov.w	r8, #2
   11330:	e4af      	b.n	10c92 <_dtoa_r+0x852>
   11332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11334:	2b0e      	cmp	r3, #14
   11336:	bf8c      	ite	hi
   11338:	2500      	movhi	r5, #0
   1133a:	f005 0501 	andls.w	r5, r5, #1
   1133e:	f7ff b9c6 	b.w	106ce <_dtoa_r+0x28e>
   11342:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   11346:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   1134a:	f7ff bb43 	b.w	109d4 <_dtoa_r+0x594>
   1134e:	f43f abae 	beq.w	10aae <_dtoa_r+0x66e>
   11352:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   11356:	f7ff bbe8 	b.w	10b2a <_dtoa_r+0x6ea>
   1135a:	f04f 32ff 	mov.w	r2, #4294967295
   1135e:	2100      	movs	r1, #0
   11360:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
   11364:	2101      	movs	r1, #1
   11366:	9214      	str	r2, [sp, #80]	; 0x50
   11368:	910d      	str	r1, [sp, #52]	; 0x34
   1136a:	f7ff bab5 	b.w	108d8 <_dtoa_r+0x498>
   1136e:	bf00      	nop

00011370 <nan>:
   11370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 11378 <nan+0x8>
   11374:	4770      	bx	lr
   11376:	bf00      	nop
   11378:	00000000 	.word	0x00000000
   1137c:	7ff80000 	.word	0x7ff80000

00011380 <data_publish.constprop.0>:
	uint8_t *data, size_t len)
{
	
	struct mqtt_publish_param param;

	param.message.topic.qos = qos;
   11380:	2301      	movs	r3, #1
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11382:	b5f0      	push	{r4, r5, r6, r7, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11384:	4d1e      	ldr	r5, [pc, #120]	; (11400 <data_publish.constprop.0+0x80>)
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11386:	b08b      	sub	sp, #44	; 0x2c
   11388:	4606      	mov	r6, r0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1138a:	4628      	mov	r0, r5
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   1138c:	460c      	mov	r4, r1
	param.message.topic.qos = qos;
   1138e:	f88d 3018 	strb.w	r3, [sp, #24]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11392:	9504      	str	r5, [sp, #16]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   11394:	f015 fc60 	bl	26c58 <strlen>
	param.message.payload.data = data;
	param.message.payload.len = len;
   11398:	e9cd 6407 	strd	r6, r4, [sp, #28]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1139c:	9005      	str	r0, [sp, #20]
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1139e:	f003 f885 	bl	144ac <z_timer_cycle_get_32>
	param.message_id = k_cycle_get_32();
	param.dup_flag = 0;
   113a2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   113a6:	4c17      	ldr	r4, [pc, #92]	; (11404 <data_publish.constprop.0+0x84>)
   113a8:	f023 0303 	bic.w	r3, r3, #3
   113ac:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   113b0:	4b15      	ldr	r3, [pc, #84]	; (11408 <data_publish.constprop.0+0x88>)
	param.message_id = k_cycle_get_32();
   113b2:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
	param.retain_flag = 0;

	//("Publishing: %s", data, len);
	LOG_INF("Publishing: %s", log_strdup(data));
   113b6:	4630      	mov	r0, r6
   113b8:	1ae4      	subs	r4, r4, r3
   113ba:	f001 fe0b 	bl	12fd4 <log_strdup>
   113be:	08e4      	lsrs	r4, r4, #3
   113c0:	01a4      	lsls	r4, r4, #6
   113c2:	f044 0703 	orr.w	r7, r4, #3
   113c6:	4601      	mov	r1, r0
   113c8:	463a      	mov	r2, r7
   113ca:	4810      	ldr	r0, [pc, #64]	; (1140c <data_publish.constprop.0+0x8c>)
   113cc:	f01b faad 	bl	2c92a <log_1>
	LOG_DBG("to topic: %s len: %u",
   113d0:	4628      	mov	r0, r5
   113d2:	f001 fdff 	bl	12fd4 <log_strdup>
   113d6:	9003      	str	r0, [sp, #12]
   113d8:	4628      	mov	r0, r5
   113da:	f015 fc3d 	bl	26c58 <strlen>
   113de:	f044 0404 	orr.w	r4, r4, #4
   113e2:	4603      	mov	r3, r0
   113e4:	9a03      	ldr	r2, [sp, #12]
   113e6:	490a      	ldr	r1, [pc, #40]	; (11410 <data_publish.constprop.0+0x90>)
   113e8:	480a      	ldr	r0, [pc, #40]	; (11414 <data_publish.constprop.0+0x94>)
   113ea:	f8ad 4000 	strh.w	r4, [sp]
   113ee:	f01b facc 	bl	2c98a <log_3>
		log_strdup(CONFIG_MQTT_PUB_TOPIC),
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));

	return mqtt_publish(c, &param);
   113f2:	a904      	add	r1, sp, #16
   113f4:	4808      	ldr	r0, [pc, #32]	; (11418 <data_publish.constprop.0+0x98>)
   113f6:	f01c fa6b 	bl	2d8d0 <mqtt_publish>
}
   113fa:	b00b      	add	sp, #44	; 0x2c
   113fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113fe:	bf00      	nop
   11400:	0002fd04 	.word	0x0002fd04
   11404:	0002f0a4 	.word	0x0002f0a4
   11408:	0002f034 	.word	0x0002f034
   1140c:	0002fd1f 	.word	0x0002fd1f
   11410:	00030408 	.word	0x00030408
   11414:	0002fd2e 	.word	0x0002fd2e
   11418:	20021444 	.word	0x20021444

0001141c <k_work_submit_to_queue.constprop.0>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   1141c:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1141e:	f100 0308 	add.w	r3, r0, #8
   11422:	e8d3 2fef 	ldaex	r2, [r3]
   11426:	f042 0001 	orr.w	r0, r2, #1
   1142a:	e8c3 0fec 	stlex	ip, r0, [r3]
   1142e:	f1bc 0f00 	cmp.w	ip, #0
   11432:	d1f6      	bne.n	11422 <k_work_submit_to_queue.constprop.0+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11434:	07d3      	lsls	r3, r2, #31
   11436:	d402      	bmi.n	1143e <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
   11438:	4801      	ldr	r0, [pc, #4]	; (11440 <k_work_submit_to_queue.constprop.0+0x24>)
   1143a:	f01d badf 	b.w	2e9fc <k_queue_append>
	}
}
   1143e:	4770      	bx	lr
   11440:	20020cd8 	.word	0x20020cd8

00011444 <button_handler>:
*  Can be used to simulate alarm events.
*/

static void button_handler(uint32_t button_states, uint32_t has_changed)
{
	if (has_changed & button_states & DK_BTN1_MSK) {
   11444:	4008      	ands	r0, r1
{
   11446:	b508      	push	{r3, lr}
	if (has_changed & button_states & DK_BTN1_MSK) {
   11448:	07c3      	lsls	r3, r0, #31
   1144a:	d50f      	bpl.n	1146c <button_handler+0x28>
   1144c:	4b08      	ldr	r3, [pc, #32]	; (11470 <button_handler+0x2c>)
   1144e:	4a09      	ldr	r2, [pc, #36]	; (11474 <button_handler+0x30>)
		LOG_DBG("DEV_DBG: button 1 pressed");
   11450:	4809      	ldr	r0, [pc, #36]	; (11478 <button_handler+0x34>)
   11452:	1ad2      	subs	r2, r2, r3
   11454:	08d2      	lsrs	r2, r2, #3
   11456:	0192      	lsls	r2, r2, #6
   11458:	4908      	ldr	r1, [pc, #32]	; (1147c <button_handler+0x38>)
   1145a:	f042 0204 	orr.w	r2, r2, #4
   1145e:	f01b fa64 	bl	2c92a <log_1>
	else if (has_changed & button_states & DK_BTN2_MSK) {
	
	}

	return;
}
   11462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(&app_work_q, &alarm_work);
   11466:	4806      	ldr	r0, [pc, #24]	; (11480 <button_handler+0x3c>)
   11468:	f7ff bfd8 	b.w	1141c <k_work_submit_to_queue.constprop.0>
}
   1146c:	bd08      	pop	{r3, pc}
   1146e:	bf00      	nop
   11470:	0002f034 	.word	0x0002f034
   11474:	0002f0a4 	.word	0x0002f0a4
   11478:	0002fd47 	.word	0x0002fd47
   1147c:	00030426 	.word	0x00030426
   11480:	20021438 	.word	0x20021438

00011484 <app_timer_handler>:
	}
}

/* @brief triggers every minute. Publish work if one period has passed */ 
void app_timer_handler(struct k_timer *dummy)
{
   11484:	b510      	push	{r4, lr}
	static uint32_t minutes;

	minutes++;
   11486:	4c0a      	ldr	r4, [pc, #40]	; (114b0 <app_timer_handler+0x2c>)
   11488:	490a      	ldr	r1, [pc, #40]	; (114b4 <app_timer_handler+0x30>)
   1148a:	6822      	ldr	r2, [r4, #0]
   1148c:	3201      	adds	r2, #1
   1148e:	6022      	str	r2, [r4, #0]
   11490:	434a      	muls	r2, r1
	/* This shall match the PSM interval*/
	if (minutes % TRANSMISSION_INTERVAL == 0) {
   11492:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   11496:	d805      	bhi.n	114a4 <app_timer_handler+0x20>
		printk("Timer: fired sample interval\n");
   11498:	4807      	ldr	r0, [pc, #28]	; (114b8 <app_timer_handler+0x34>)
   1149a:	f01a ffea 	bl	2c472 <printk>
		k_work_submit_to_queue(&app_work_q, &periodic_work);
   1149e:	4807      	ldr	r0, [pc, #28]	; (114bc <app_timer_handler+0x38>)
   114a0:	f7ff ffbc 	bl	1141c <k_work_submit_to_queue.constprop.0>
	}
	printk("Elapsed time: %d\n", minutes);
   114a4:	6821      	ldr	r1, [r4, #0]
   114a6:	4806      	ldr	r0, [pc, #24]	; (114c0 <app_timer_handler+0x3c>)
}
   114a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Elapsed time: %d\n", minutes);
   114ac:	f01a bfe1 	b.w	2c472 <printk>
   114b0:	200214b0 	.word	0x200214b0
   114b4:	cccccccd 	.word	0xcccccccd
   114b8:	0002fd65 	.word	0x0002fd65
   114bc:	200214b4 	.word	0x200214b4
   114c0:	0002fd83 	.word	0x0002fd83

000114c4 <date_time_handler>:

	k_work_init(&alarm_work, publish_alarm);
	k_work_init(&periodic_work, publish_samples);
}

void date_time_handler(const struct date_time_evt *evt) {
   114c4:	b508      	push	{r3, lr}
   114c6:	7803      	ldrb	r3, [r0, #0]
   114c8:	2b03      	cmp	r3, #3
   114ca:	d831      	bhi.n	11530 <date_time_handler+0x6c>
   114cc:	e8df f003 	tbb	[pc, r3]
   114d0:	261c1202 	.word	0x261c1202
   114d4:	4a17      	ldr	r2, [pc, #92]	; (11534 <date_time_handler+0x70>)
   114d6:	4b18      	ldr	r3, [pc, #96]	; (11538 <date_time_handler+0x74>)

	switch (evt->type)
	{
	case DATE_TIME_OBTAINED_MODEM:
		LOG_DBG("DATE_TIME: got time from modem.\n");
   114d8:	4918      	ldr	r1, [pc, #96]	; (1153c <date_time_handler+0x78>)
   114da:	1ad2      	subs	r2, r2, r3
   114dc:	08d2      	lsrs	r2, r2, #3
   114de:	0192      	lsls	r2, r2, #6
   114e0:	4817      	ldr	r0, [pc, #92]	; (11540 <date_time_handler+0x7c>)
   114e2:	f042 0204 	orr.w	r2, r2, #4
	case DATE_TIME_OBTAINED_EXT:
		LOG_DBG("DATE_TIME: got time from external.\n");
		k_sem_give(&date_time_ok);
		break;
	case DATE_TIME_NOT_OBTAINED:
		LOG_DBG("DATE_TIME: failed to get time.\n");
   114e6:	f01b fa20 	bl	2c92a <log_1>
		k_sem_give(&date_time_ok);
		break;
	default:
		break;
	}
}
   114ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   114ee:	4815      	ldr	r0, [pc, #84]	; (11544 <date_time_handler+0x80>)
   114f0:	f013 ba08 	b.w	24904 <z_impl_k_sem_give>
   114f4:	4a0f      	ldr	r2, [pc, #60]	; (11534 <date_time_handler+0x70>)
   114f6:	4b10      	ldr	r3, [pc, #64]	; (11538 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from NTP.\n");
   114f8:	4910      	ldr	r1, [pc, #64]	; (1153c <date_time_handler+0x78>)
   114fa:	1ad2      	subs	r2, r2, r3
   114fc:	08d2      	lsrs	r2, r2, #3
   114fe:	0192      	lsls	r2, r2, #6
   11500:	4811      	ldr	r0, [pc, #68]	; (11548 <date_time_handler+0x84>)
   11502:	f042 0204 	orr.w	r2, r2, #4
   11506:	e7ee      	b.n	114e6 <date_time_handler+0x22>
   11508:	4a0a      	ldr	r2, [pc, #40]	; (11534 <date_time_handler+0x70>)
   1150a:	4b0b      	ldr	r3, [pc, #44]	; (11538 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from external.\n");
   1150c:	490b      	ldr	r1, [pc, #44]	; (1153c <date_time_handler+0x78>)
   1150e:	1ad2      	subs	r2, r2, r3
   11510:	08d2      	lsrs	r2, r2, #3
   11512:	0192      	lsls	r2, r2, #6
   11514:	480d      	ldr	r0, [pc, #52]	; (1154c <date_time_handler+0x88>)
   11516:	f042 0204 	orr.w	r2, r2, #4
   1151a:	e7e4      	b.n	114e6 <date_time_handler+0x22>
   1151c:	4a05      	ldr	r2, [pc, #20]	; (11534 <date_time_handler+0x70>)
   1151e:	4b06      	ldr	r3, [pc, #24]	; (11538 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: failed to get time.\n");
   11520:	4906      	ldr	r1, [pc, #24]	; (1153c <date_time_handler+0x78>)
   11522:	1ad2      	subs	r2, r2, r3
   11524:	08d2      	lsrs	r2, r2, #3
   11526:	0192      	lsls	r2, r2, #6
   11528:	4809      	ldr	r0, [pc, #36]	; (11550 <date_time_handler+0x8c>)
   1152a:	f042 0204 	orr.w	r2, r2, #4
   1152e:	e7da      	b.n	114e6 <date_time_handler+0x22>
}
   11530:	bd08      	pop	{r3, pc}
   11532:	bf00      	nop
   11534:	0002f0a4 	.word	0x0002f0a4
   11538:	0002f034 	.word	0x0002f034
   1153c:	00030465 	.word	0x00030465
   11540:	0002fd95 	.word	0x0002fd95
   11544:	20020c24 	.word	0x20020c24
   11548:	0002fdba 	.word	0x0002fdba
   1154c:	0002fddd 	.word	0x0002fddd
   11550:	0002fe05 	.word	0x0002fe05

00011554 <mqtt_evt_handler>:
{
   11554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11558:	b089      	sub	sp, #36	; 0x24
   1155a:	4b74      	ldr	r3, [pc, #464]	; (1172c <mqtt_evt_handler+0x1d8>)
   1155c:	4c74      	ldr	r4, [pc, #464]	; (11730 <mqtt_evt_handler+0x1dc>)
   1155e:	4606      	mov	r6, r0
   11560:	1ae4      	subs	r4, r4, r3
   11562:	780b      	ldrb	r3, [r1, #0]
   11564:	08e4      	lsrs	r4, r4, #3
   11566:	460d      	mov	r5, r1
   11568:	af02      	add	r7, sp, #8
   1156a:	01a4      	lsls	r4, r4, #6
   1156c:	2b07      	cmp	r3, #7
   1156e:	f200 80d0 	bhi.w	11712 <mqtt_evt_handler+0x1be>
   11572:	e8df f003 	tbb	[pc, r3]
   11576:	1e04      	.short	0x1e04
   11578:	cecea52c 	.word	0xcecea52c
   1157c:	bbce      	.short	0xbbce
		if (evt->result != 0) {
   1157e:	69c9      	ldr	r1, [r1, #28]
   11580:	b129      	cbz	r1, 1158e <mqtt_evt_handler+0x3a>
			LOG_ERR("MQTT connect failed %d", evt->result);
   11582:	486c      	ldr	r0, [pc, #432]	; (11734 <mqtt_evt_handler+0x1e0>)
   11584:	f044 0201 	orr.w	r2, r4, #1
				LOG_ERR("Could not app_disconnect: %d", err);
   11588:	f01b f9cf 	bl	2c92a <log_1>
   1158c:	e00d      	b.n	115aa <mqtt_evt_handler+0x56>
   1158e:	486a      	ldr	r0, [pc, #424]	; (11738 <mqtt_evt_handler+0x1e4>)
   11590:	f013 f9b8 	bl	24904 <z_impl_k_sem_give>
		LOG_INF("[%s:%d] MQTT client connected!", log_strdup(__func__), __LINE__);
   11594:	4869      	ldr	r0, [pc, #420]	; (1173c <mqtt_evt_handler+0x1e8>)
   11596:	f001 fd1d 	bl	12fd4 <log_strdup>
   1159a:	f044 0403 	orr.w	r4, r4, #3
   1159e:	4601      	mov	r1, r0
   115a0:	4623      	mov	r3, r4
   115a2:	22db      	movs	r2, #219	; 0xdb
   115a4:	4866      	ldr	r0, [pc, #408]	; (11740 <mqtt_evt_handler+0x1ec>)
   115a6:	f01b f9d7 	bl	2c958 <log_2>
}
   115aa:	371c      	adds	r7, #28
   115ac:	46bd      	mov	sp, r7
   115ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("[%s:%d] MQTT client disconnected %d", log_strdup(__func__),
   115b2:	4862      	ldr	r0, [pc, #392]	; (1173c <mqtt_evt_handler+0x1e8>)
   115b4:	f001 fd0e 	bl	12fd4 <log_strdup>
   115b8:	22e1      	movs	r2, #225	; 0xe1
   115ba:	f044 0403 	orr.w	r4, r4, #3
   115be:	f8ad 4000 	strh.w	r4, [sp]
   115c2:	4601      	mov	r1, r0
   115c4:	69eb      	ldr	r3, [r5, #28]
   115c6:	485f      	ldr	r0, [pc, #380]	; (11744 <mqtt_evt_handler+0x1f0>)
		LOG_INF("[%s:%d] default: %d", log_strdup(__func__), __LINE__,
   115c8:	f01b f9df 	bl	2c98a <log_3>
}
   115cc:	e7ed      	b.n	115aa <mqtt_evt_handler+0x56>
		LOG_INF("[%s:%d] MQTT PUBLISH result=%d len=%d", log_strdup(__func__),
   115ce:	485b      	ldr	r0, [pc, #364]	; (1173c <mqtt_evt_handler+0x1e8>)
   115d0:	f001 fd00 	bl	12fd4 <log_strdup>
   115d4:	23e9      	movs	r3, #233	; 0xe9
   115d6:	60fb      	str	r3, [r7, #12]
   115d8:	69eb      	ldr	r3, [r5, #28]
   115da:	f044 0803 	orr.w	r8, r4, #3
   115de:	613b      	str	r3, [r7, #16]
   115e0:	696b      	ldr	r3, [r5, #20]
   115e2:	2204      	movs	r2, #4
   115e4:	60b8      	str	r0, [r7, #8]
   115e6:	617b      	str	r3, [r7, #20]
   115e8:	4857      	ldr	r0, [pc, #348]	; (11748 <mqtt_evt_handler+0x1f4>)
   115ea:	4643      	mov	r3, r8
   115ec:	f107 0108 	add.w	r1, r7, #8
   115f0:	f01b f9ea 	bl	2c9c8 <log_n>
		err = publish_get_payload(c, p->message.payload.len);
   115f4:	696a      	ldr	r2, [r5, #20]
	uint8_t *end = buf + length;
   115f6:	4b55      	ldr	r3, [pc, #340]	; (1174c <mqtt_evt_handler+0x1f8>)
	if (length > sizeof(payload_buf)) {
   115f8:	2a80      	cmp	r2, #128	; 0x80
	uint8_t *end = buf + length;
   115fa:	eb03 0802 	add.w	r8, r3, r2
	if (length > sizeof(payload_buf)) {
   115fe:	d85c      	bhi.n	116ba <mqtt_evt_handler+0x166>
	uint8_t *buf = payload_buf;
   11600:	469a      	mov	sl, r3
			LOG_ERR("mqtt_read_publish_payload: EAGAIN");
   11602:	f8df 917c 	ldr.w	r9, [pc, #380]	; 11780 <mqtt_evt_handler+0x22c>
	return z_impl_zsock_poll(fds, nfds, timeout);
   11606:	f8df b17c 	ldr.w	fp, [pc, #380]	; 11784 <mqtt_evt_handler+0x230>
	while (buf < end) {
   1160a:	45d0      	cmp	r8, sl
   1160c:	d820      	bhi.n	11650 <mqtt_evt_handler+0xfc>
			data_print("Received: ", payload_buf,
   1160e:	696e      	ldr	r6, [r5, #20]
{
   11610:	46e8      	mov	r8, sp
	char buf[len + 1];
   11612:	f106 0308 	add.w	r3, r6, #8
   11616:	f023 0307 	bic.w	r3, r3, #7
   1161a:	ebad 0d03 	sub.w	sp, sp, r3
   1161e:	ad02      	add	r5, sp, #8
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11620:	4632      	mov	r2, r6
   11622:	494a      	ldr	r1, [pc, #296]	; (1174c <mqtt_evt_handler+0x1f8>)
   11624:	4628      	mov	r0, r5
   11626:	f7fb fa91 	bl	cb4c <memcpy>
	buf[len] = 0;
   1162a:	2300      	movs	r3, #0
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   1162c:	4848      	ldr	r0, [pc, #288]	; (11750 <mqtt_evt_handler+0x1fc>)
	buf[len] = 0;
   1162e:	55ab      	strb	r3, [r5, r6]
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   11630:	f001 fcd0 	bl	12fd4 <log_strdup>
   11634:	6078      	str	r0, [r7, #4]
   11636:	4628      	mov	r0, r5
   11638:	f001 fccc 	bl	12fd4 <log_strdup>
   1163c:	f044 0403 	orr.w	r4, r4, #3
   11640:	4602      	mov	r2, r0
   11642:	4623      	mov	r3, r4
   11644:	6879      	ldr	r1, [r7, #4]
   11646:	4843      	ldr	r0, [pc, #268]	; (11754 <mqtt_evt_handler+0x200>)
   11648:	f01b f986 	bl	2c958 <log_2>
   1164c:	46c5      	mov	sp, r8
}
   1164e:	e7ac      	b.n	115aa <mqtt_evt_handler+0x56>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
   11650:	4651      	mov	r1, sl
   11652:	4630      	mov	r0, r6
   11654:	eba8 020a 	sub.w	r2, r8, sl
   11658:	f01c fa46 	bl	2dae8 <mqtt_read_publish_payload>
		if (ret < 0) {
   1165c:	1e01      	subs	r1, r0, #0
   1165e:	da29      	bge.n	116b4 <mqtt_evt_handler+0x160>
			if (ret != -EAGAIN) {
   11660:	f111 0f0b 	cmn.w	r1, #11
   11664:	d10d      	bne.n	11682 <mqtt_evt_handler+0x12e>
			LOG_ERR("mqtt_read_publish_payload: EAGAIN");
   11666:	4648      	mov	r0, r9
   11668:	f044 0101 	orr.w	r1, r4, #1
   1166c:	f01b f94e 	bl	2c90c <log_0>
   11670:	2101      	movs	r1, #1
   11672:	465a      	mov	r2, fp
   11674:	4838      	ldr	r0, [pc, #224]	; (11758 <mqtt_evt_handler+0x204>)
   11676:	f002 fa2f 	bl	13ad8 <z_impl_zsock_poll>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   1167a:	2800      	cmp	r0, #0
   1167c:	dc15      	bgt.n	116aa <mqtt_evt_handler+0x156>
				return -EIO;
   1167e:	f06f 0104 	mvn.w	r1, #4
			LOG_ERR("mqtt_read_publish_payload: Failed! %d", err);
   11682:	f044 0501 	orr.w	r5, r4, #1
   11686:	462a      	mov	r2, r5
   11688:	4834      	ldr	r0, [pc, #208]	; (1175c <mqtt_evt_handler+0x208>)
   1168a:	f01b f94e 	bl	2c92a <log_1>
			LOG_INF("Disconnecting MQTT client...");
   1168e:	f044 0103 	orr.w	r1, r4, #3
   11692:	4833      	ldr	r0, [pc, #204]	; (11760 <mqtt_evt_handler+0x20c>)
   11694:	f01b f93a 	bl	2c90c <log_0>
			err = mqtt_disconnect(c);
   11698:	4630      	mov	r0, r6
   1169a:	f01c f95e 	bl	2d95a <mqtt_disconnect>
			if (err) {
   1169e:	4601      	mov	r1, r0
   116a0:	2800      	cmp	r0, #0
   116a2:	d082      	beq.n	115aa <mqtt_evt_handler+0x56>
				LOG_ERR("Could not app_disconnect: %d", err);
   116a4:	462a      	mov	r2, r5
   116a6:	482f      	ldr	r0, [pc, #188]	; (11764 <mqtt_evt_handler+0x210>)
   116a8:	e76e      	b.n	11588 <mqtt_evt_handler+0x34>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   116aa:	4b2b      	ldr	r3, [pc, #172]	; (11758 <mqtt_evt_handler+0x204>)
   116ac:	88da      	ldrh	r2, [r3, #6]
   116ae:	07d3      	lsls	r3, r2, #31
   116b0:	d4ab      	bmi.n	1160a <mqtt_evt_handler+0xb6>
   116b2:	e7e4      	b.n	1167e <mqtt_evt_handler+0x12a>
		if (ret == 0) {
   116b4:	d0e3      	beq.n	1167e <mqtt_evt_handler+0x12a>
		buf += ret;
   116b6:	448a      	add	sl, r1
   116b8:	e7a7      	b.n	1160a <mqtt_evt_handler+0xb6>
		return -EMSGSIZE;
   116ba:	f06f 0179 	mvn.w	r1, #121	; 0x79
   116be:	e7e0      	b.n	11682 <mqtt_evt_handler+0x12e>
		if (evt->result != 0) {
   116c0:	69c9      	ldr	r1, [r1, #28]
   116c2:	b119      	cbz	r1, 116cc <mqtt_evt_handler+0x178>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   116c4:	4828      	ldr	r0, [pc, #160]	; (11768 <mqtt_evt_handler+0x214>)
   116c6:	f044 0201 	orr.w	r2, r4, #1
   116ca:	e75d      	b.n	11588 <mqtt_evt_handler+0x34>
   116cc:	4827      	ldr	r0, [pc, #156]	; (1176c <mqtt_evt_handler+0x218>)
   116ce:	f013 f919 	bl	24904 <z_impl_k_sem_give>
		LOG_INF("[%s:%d] PUBACK packet id: %u", log_strdup(__func__), __LINE__,
   116d2:	481a      	ldr	r0, [pc, #104]	; (1173c <mqtt_evt_handler+0x1e8>)
   116d4:	f001 fc7e 	bl	12fd4 <log_strdup>
   116d8:	f044 0403 	orr.w	r4, r4, #3
   116dc:	4601      	mov	r1, r0
   116de:	88ab      	ldrh	r3, [r5, #4]
   116e0:	f240 1201 	movw	r2, #257	; 0x101
   116e4:	4822      	ldr	r0, [pc, #136]	; (11770 <mqtt_evt_handler+0x21c>)
   116e6:	f8ad 4000 	strh.w	r4, [sp]
   116ea:	e76d      	b.n	115c8 <mqtt_evt_handler+0x74>
		if (evt->result != 0) {
   116ec:	69c9      	ldr	r1, [r1, #28]
   116ee:	b119      	cbz	r1, 116f8 <mqtt_evt_handler+0x1a4>
			LOG_ERR("MQTT SUBACK error %d", evt->result);
   116f0:	4820      	ldr	r0, [pc, #128]	; (11774 <mqtt_evt_handler+0x220>)
   116f2:	f044 0201 	orr.w	r2, r4, #1
   116f6:	e747      	b.n	11588 <mqtt_evt_handler+0x34>
		LOG_INF("[%s:%d] SUBACK packet id: %u", log_strdup(__func__), __LINE__,
   116f8:	4810      	ldr	r0, [pc, #64]	; (1173c <mqtt_evt_handler+0x1e8>)
   116fa:	f001 fc6b 	bl	12fd4 <log_strdup>
   116fe:	f044 0403 	orr.w	r4, r4, #3
   11702:	4601      	mov	r1, r0
   11704:	88ab      	ldrh	r3, [r5, #4]
   11706:	f240 120b 	movw	r2, #267	; 0x10b
   1170a:	481b      	ldr	r0, [pc, #108]	; (11778 <mqtt_evt_handler+0x224>)
   1170c:	f8ad 4000 	strh.w	r4, [sp]
   11710:	e75a      	b.n	115c8 <mqtt_evt_handler+0x74>
		LOG_INF("[%s:%d] default: %d", log_strdup(__func__), __LINE__,
   11712:	480a      	ldr	r0, [pc, #40]	; (1173c <mqtt_evt_handler+0x1e8>)
   11714:	f001 fc5e 	bl	12fd4 <log_strdup>
   11718:	f044 0403 	orr.w	r4, r4, #3
   1171c:	4601      	mov	r1, r0
   1171e:	782b      	ldrb	r3, [r5, #0]
   11720:	f44f 7288 	mov.w	r2, #272	; 0x110
   11724:	4815      	ldr	r0, [pc, #84]	; (1177c <mqtt_evt_handler+0x228>)
   11726:	f8ad 4000 	strh.w	r4, [sp]
   1172a:	e74d      	b.n	115c8 <mqtt_evt_handler+0x74>
   1172c:	0002f034 	.word	0x0002f034
   11730:	0002f0a4 	.word	0x0002f0a4
   11734:	0002fe29 	.word	0x0002fe29
   11738:	20020c6c 	.word	0x20020c6c
   1173c:	00030415 	.word	0x00030415
   11740:	0002fe40 	.word	0x0002fe40
   11744:	0002fe5f 	.word	0x0002fe5f
   11748:	0002fe83 	.word	0x0002fe83
   1174c:	200242cf 	.word	0x200242cf
   11750:	0002ffa3 	.word	0x0002ffa3
   11754:	0002ffae 	.word	0x0002ffae
   11758:	200214a8 	.word	0x200214a8
   1175c:	0002fecb 	.word	0x0002fecb
   11760:	0002fef1 	.word	0x0002fef1
   11764:	0002ff0e 	.word	0x0002ff0e
   11768:	0002ff2b 	.word	0x0002ff2b
   1176c:	20020c84 	.word	0x20020c84
   11770:	0002ff40 	.word	0x0002ff40
   11774:	0002ff5d 	.word	0x0002ff5d
   11778:	0002ff72 	.word	0x0002ff72
   1177c:	0002ff8f 	.word	0x0002ff8f
   11780:	0002fea9 	.word	0x0002fea9
   11784:	006ddd00 	.word	0x006ddd00

00011788 <bsd_recoverable_error_handler>:
   11788:	4a05      	ldr	r2, [pc, #20]	; (117a0 <bsd_recoverable_error_handler+0x18>)
   1178a:	4b06      	ldr	r3, [pc, #24]	; (117a4 <bsd_recoverable_error_handler+0x1c>)
{
   1178c:	4601      	mov	r1, r0
   1178e:	1ad2      	subs	r2, r2, r3
   11790:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", (unsigned int)err);
   11792:	0192      	lsls	r2, r2, #6
   11794:	4804      	ldr	r0, [pc, #16]	; (117a8 <bsd_recoverable_error_handler+0x20>)
   11796:	f042 0201 	orr.w	r2, r2, #1
   1179a:	f01b b8c6 	b.w	2c92a <log_1>
   1179e:	bf00      	nop
   117a0:	0002f0a4 	.word	0x0002f0a4
   117a4:	0002f034 	.word	0x0002f034
   117a8:	0002ffb3 	.word	0x0002ffb3

000117ac <timer_init>:
{
   117ac:	b507      	push	{r0, r1, r2, lr}
   117ae:	2300      	movs	r3, #0
	compiler_barrier();
   117b0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	z_impl_k_timer_start(timer, duration, period);
   117b4:	4803      	ldr	r0, [pc, #12]	; (117c4 <timer_init+0x18>)
   117b6:	e9cd 2300 	strd	r2, r3, [sp]
   117ba:	f013 fee1 	bl	25580 <z_impl_k_timer_start>
}
   117be:	b003      	add	sp, #12
   117c0:	f85d fb04 	ldr.w	pc, [sp], #4
   117c4:	20020b18 	.word	0x20020b18

000117c8 <app_connect>:
int app_connect(void) {
   117c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117cc:	4b34      	ldr	r3, [pc, #208]	; (118a0 <app_connect+0xd8>)
   117ce:	4c35      	ldr	r4, [pc, #212]	; (118a4 <app_connect+0xdc>)
	LOG_INF("Connecting");
   117d0:	4835      	ldr	r0, [pc, #212]	; (118a8 <app_connect+0xe0>)
   117d2:	1ae4      	subs	r4, r4, r3
   117d4:	08e4      	lsrs	r4, r4, #3
   117d6:	01a4      	lsls	r4, r4, #6
int app_connect(void) {
   117d8:	b0a0      	sub	sp, #128	; 0x80
	LOG_INF("Connecting");
   117da:	f044 0103 	orr.w	r1, r4, #3
   117de:	f01b f895 	bl	2c90c <log_0>
		LOG_WRN("Failed to establish LTE connection.");
   117e2:	4e32      	ldr	r6, [pc, #200]	; (118ac <app_connect+0xe4>)
		LOG_WRN("Will retry in %d seconds.",
   117e4:	4f32      	ldr	r7, [pc, #200]	; (118b0 <app_connect+0xe8>)
		LOG_WRN("Failed to establish LTE connection.");
   117e6:	f044 0502 	orr.w	r5, r4, #2
	while(lte_lc_connect() != 0) {
   117ea:	f01d f885 	bl	2e8f8 <lte_lc_connect>
   117ee:	b990      	cbnz	r0, 11816 <app_connect+0x4e>
	err = mqtt_connect(&client);
   117f0:	4e30      	ldr	r6, [pc, #192]	; (118b4 <app_connect+0xec>)
	LOG_INF("LTE: Link connected");
   117f2:	f044 0703 	orr.w	r7, r4, #3
   117f6:	4639      	mov	r1, r7
   117f8:	482f      	ldr	r0, [pc, #188]	; (118b8 <app_connect+0xf0>)
   117fa:	f01b f887 	bl	2c90c <log_0>
	err = mqtt_connect(&client);
   117fe:	4630      	mov	r0, r6
   11800:	f01c f823 	bl	2d84a <mqtt_connect>
	if (err != 0) {
   11804:	4605      	mov	r5, r0
   11806:	b1a8      	cbz	r0, 11834 <app_connect+0x6c>
		LOG_ERR("mqtt_connect %d", err);
   11808:	4601      	mov	r1, r0
   1180a:	482c      	ldr	r0, [pc, #176]	; (118bc <app_connect+0xf4>)
   1180c:	f044 0201 	orr.w	r2, r4, #1
	LOG_INF("RSRP: %s", log_strdup(rsrp_res));
   11810:	f01b f88b 	bl	2c92a <log_1>
	return 0;
   11814:	e01c      	b.n	11850 <app_connect+0x88>
		LOG_WRN("Failed to establish LTE connection.");
   11816:	4629      	mov	r1, r5
   11818:	4630      	mov	r0, r6
   1181a:	f01b f877 	bl	2c90c <log_0>
		LOG_WRN("Will retry in %d seconds.",
   1181e:	462a      	mov	r2, r5
   11820:	210a      	movs	r1, #10
   11822:	4638      	mov	r0, r7
   11824:	f01b f881 	bl	2c92a <log_1>
	return z_impl_k_sleep(timeout);
   11828:	2100      	movs	r1, #0
   1182a:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   1182e:	f013 f82d 	bl	2488c <z_impl_k_sleep>
   11832:	e7da      	b.n	117ea <app_connect+0x22>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   11834:	f896 8024 	ldrb.w	r8, [r6, #36]	; 0x24
   11838:	f1b8 0f00 	cmp.w	r8, #0
   1183c:	d00c      	beq.n	11858 <app_connect+0x90>
		LOG_ERR("fds_init %d", err);
   1183e:	f06f 0185 	mvn.w	r1, #133	; 0x85
   11842:	481f      	ldr	r0, [pc, #124]	; (118c0 <app_connect+0xf8>)
   11844:	f044 0201 	orr.w	r2, r4, #1
   11848:	f01b f86f 	bl	2c92a <log_1>
		return -ENOTSUP;
   1184c:	f06f 0585 	mvn.w	r5, #133	; 0x85
}
   11850:	4628      	mov	r0, r5
   11852:	b020      	add	sp, #128	; 0x80
   11854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fds.fd = c->transport.tcp.sock;
   11858:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1185a:	4a1a      	ldr	r2, [pc, #104]	; (118c4 <app_connect+0xfc>)
	app_connected = true;
   1185c:	4e1a      	ldr	r6, [pc, #104]	; (118c8 <app_connect+0x100>)
		fds.fd = c->transport.tcp.sock;
   1185e:	6013      	str	r3, [r2, #0]
	fds.events = POLLIN;
   11860:	2301      	movs	r3, #1
   11862:	8093      	strh	r3, [r2, #4]
	app_connected = true;
   11864:	7033      	strb	r3, [r6, #0]
	return z_impl_k_sem_take(sem, timeout);
   11866:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1186a:	2300      	movs	r3, #0
   1186c:	4817      	ldr	r0, [pc, #92]	; (118cc <app_connect+0x104>)
   1186e:	f013 f88d 	bl	2498c <z_impl_k_sem_take>
	if(err) {
   11872:	4605      	mov	r5, r0
   11874:	b148      	cbz	r0, 1188a <app_connect+0xc2>
		LOG_ERR("MQTT connection timed out\n");
   11876:	4816      	ldr	r0, [pc, #88]	; (118d0 <app_connect+0x108>)
   11878:	f044 0101 	orr.w	r1, r4, #1
   1187c:	f01b f846 	bl	2c90c <log_0>
		return -ENOTCONN;
   11880:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		app_connected = false;
   11884:	f886 8000 	strb.w	r8, [r6]
		return -ENOTCONN;
   11888:	e7e2      	b.n	11850 <app_connect+0x88>
	modem_info_string_get(MODEM_INFO_RSRP, rsrp_res, sizeof(rsrp_res));
   1188a:	2280      	movs	r2, #128	; 0x80
   1188c:	4669      	mov	r1, sp
   1188e:	f007 fcdd 	bl	1924c <modem_info_string_get>
	LOG_INF("RSRP: %s", log_strdup(rsrp_res));
   11892:	4668      	mov	r0, sp
   11894:	f001 fb9e 	bl	12fd4 <log_strdup>
   11898:	463a      	mov	r2, r7
   1189a:	4601      	mov	r1, r0
   1189c:	480d      	ldr	r0, [pc, #52]	; (118d4 <app_connect+0x10c>)
   1189e:	e7b7      	b.n	11810 <app_connect+0x48>
   118a0:	0002f034 	.word	0x0002f034
   118a4:	0002f0a4 	.word	0x0002f0a4
   118a8:	0002ffd0 	.word	0x0002ffd0
   118ac:	0002ffdb 	.word	0x0002ffdb
   118b0:	0002ffff 	.word	0x0002ffff
   118b4:	20021444 	.word	0x20021444
   118b8:	00030019 	.word	0x00030019
   118bc:	0003002d 	.word	0x0003002d
   118c0:	0003003d 	.word	0x0003003d
   118c4:	200214a8 	.word	0x200214a8
   118c8:	200242ce 	.word	0x200242ce
   118cc:	20020c6c 	.word	0x20020c6c
   118d0:	00030049 	.word	0x00030049
   118d4:	00030064 	.word	0x00030064

000118d8 <app_disconnect>:
void app_disconnect(void) {
   118d8:	b538      	push	{r3, r4, r5, lr}
   118da:	4b1c      	ldr	r3, [pc, #112]	; (1194c <app_disconnect+0x74>)
   118dc:	4c1c      	ldr	r4, [pc, #112]	; (11950 <app_disconnect+0x78>)
	LOG_INF("Disconnecting");
   118de:	481d      	ldr	r0, [pc, #116]	; (11954 <app_disconnect+0x7c>)
   118e0:	1ae4      	subs	r4, r4, r3
   118e2:	08e4      	lsrs	r4, r4, #3
   118e4:	01a4      	lsls	r4, r4, #6
   118e6:	f044 0503 	orr.w	r5, r4, #3
   118ea:	4629      	mov	r1, r5
   118ec:	f01b f80e 	bl	2c90c <log_0>
	if(!app_connected) {
   118f0:	4b19      	ldr	r3, [pc, #100]	; (11958 <app_disconnect+0x80>)
   118f2:	781a      	ldrb	r2, [r3, #0]
   118f4:	b9d2      	cbnz	r2, 1192c <app_disconnect+0x54>
		LOG_INF("Aborting mqtt connection");
   118f6:	4819      	ldr	r0, [pc, #100]	; (1195c <app_disconnect+0x84>)
   118f8:	4629      	mov	r1, r5
   118fa:	f01b f807 	bl	2c90c <log_0>
		mqtt_abort(&client);
   118fe:	4818      	ldr	r0, [pc, #96]	; (11960 <app_disconnect+0x88>)
   11900:	f01c f87f 	bl	2da02 <mqtt_abort>
	LOG_INF("MQTT: disconnected");
   11904:	4817      	ldr	r0, [pc, #92]	; (11964 <app_disconnect+0x8c>)
   11906:	f044 0103 	orr.w	r1, r4, #3
   1190a:	f01a ffff 	bl	2c90c <log_0>
	err = lte_lc_offline();
   1190e:	f007 fa37 	bl	18d80 <lte_lc_offline>
	if(err) {
   11912:	b120      	cbz	r0, 1191e <app_disconnect+0x46>
		LOG_ERR("LTE: Offline mode failed\n");
   11914:	4814      	ldr	r0, [pc, #80]	; (11968 <app_disconnect+0x90>)
   11916:	f044 0101 	orr.w	r1, r4, #1
   1191a:	f01a fff7 	bl	2c90c <log_0>
	LOG_INF("LTE: offline");
   1191e:	f044 0103 	orr.w	r1, r4, #3
   11922:	4812      	ldr	r0, [pc, #72]	; (1196c <app_disconnect+0x94>)
}
   11924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("LTE: offline");
   11928:	f01a bff0 	b.w	2c90c <log_0>
		app_connected = 0;
   1192c:	2200      	movs	r2, #0
		err = mqtt_disconnect(&client);
   1192e:	480c      	ldr	r0, [pc, #48]	; (11960 <app_disconnect+0x88>)
		app_connected = 0;
   11930:	701a      	strb	r2, [r3, #0]
		err = mqtt_disconnect(&client);
   11932:	f01c f812 	bl	2d95a <mqtt_disconnect>
		if (err != 0) {
   11936:	4601      	mov	r1, r0
   11938:	2800      	cmp	r0, #0
   1193a:	d0e3      	beq.n	11904 <app_disconnect+0x2c>
			LOG_ERR("mqtt_disconnect %d", err);
   1193c:	f044 0201 	orr.w	r2, r4, #1
   11940:	480b      	ldr	r0, [pc, #44]	; (11970 <app_disconnect+0x98>)
}
   11942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_ERR("mqtt_disconnect %d", err);
   11946:	f01a bff0 	b.w	2c92a <log_1>
   1194a:	bf00      	nop
   1194c:	0002f034 	.word	0x0002f034
   11950:	0002f0a4 	.word	0x0002f0a4
   11954:	0003006d 	.word	0x0003006d
   11958:	200242ce 	.word	0x200242ce
   1195c:	0003007b 	.word	0x0003007b
   11960:	20021444 	.word	0x20021444
   11964:	000300a7 	.word	0x000300a7
   11968:	000300ba 	.word	0x000300ba
   1196c:	000300d4 	.word	0x000300d4
   11970:	00030094 	.word	0x00030094

00011974 <init_work>:
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   11974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
void init_work(void) {
   11978:	b508      	push	{r3, lr}
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   1197a:	4908      	ldr	r1, [pc, #32]	; (1199c <init_work+0x28>)
   1197c:	2305      	movs	r3, #5
   1197e:	4808      	ldr	r0, [pc, #32]	; (119a0 <init_work+0x2c>)
   11980:	f013 fa06 	bl	24d90 <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11984:	2300      	movs	r3, #0
   11986:	4a07      	ldr	r2, [pc, #28]	; (119a4 <init_work+0x30>)
   11988:	4907      	ldr	r1, [pc, #28]	; (119a8 <init_work+0x34>)
   1198a:	6013      	str	r3, [r2, #0]
   1198c:	e9c2 1301 	strd	r1, r3, [r2, #4]
   11990:	4a06      	ldr	r2, [pc, #24]	; (119ac <init_work+0x38>)
   11992:	4907      	ldr	r1, [pc, #28]	; (119b0 <init_work+0x3c>)
   11994:	6013      	str	r3, [r2, #0]
   11996:	e9c2 1301 	strd	r1, r3, [r2, #4]
}
   1199a:	bd08      	pop	{r3, pc}
   1199c:	20026438 	.word	0x20026438
   119a0:	20020cd8 	.word	0x20020cd8
   119a4:	20021438 	.word	0x20021438
   119a8:	00011b99 	.word	0x00011b99
   119ac:	200214b4 	.word	0x200214b4
   119b0:	00011ae1 	.word	0x00011ae1

000119b4 <create_message>:

void create_message(struct app_message* destination, enum app_msg_type type, uint8_t *data, size_t len, int64_t *timestamp) {
   119b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119b8:	b087      	sub	sp, #28
   119ba:	af02      	add	r7, sp, #8
   119bc:	4605      	mov	r5, r0
   119be:	4689      	mov	r9, r1
   119c0:	4616      	mov	r6, r2
   119c2:	4698      	mov	r8, r3

	cJSON *message;

	message = cJSON_CreateObject();
   119c4:	f004 ff42 	bl	1684c <cJSON_CreateObject>
   119c8:	4604      	mov	r4, r0
	
	if(type == SENSOR_ALARM) {
   119ca:	f1b9 0f00 	cmp.w	r9, #0
   119ce:	d138      	bne.n	11a42 <create_message+0x8e>
		cJSON_AddStringToObject(message, "type", "alarm");
   119d0:	4a1d      	ldr	r2, [pc, #116]	; (11a48 <create_message+0x94>)
	} else {
		cJSON_AddStringToObject(message, "type", "periodic sample");
   119d2:	491e      	ldr	r1, [pc, #120]	; (11a4c <create_message+0x98>)
   119d4:	f01c fac2 	bl	2df5c <cJSON_AddStringToObject>
	}

	char time_str[16];
	snprintf(time_str, 16, "%lld", *timestamp);
   119d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   119da:	2110      	movs	r1, #16
   119dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   119e0:	4638      	mov	r0, r7
   119e2:	e9cd 2300 	strd	r2, r3, [sp]
   119e6:	4a1a      	ldr	r2, [pc, #104]	; (11a50 <create_message+0x9c>)
   119e8:	f014 ff96 	bl	26918 <snprintf>

	char data_str[len];
   119ec:	f108 0307 	add.w	r3, r8, #7
   119f0:	f023 0307 	bic.w	r3, r3, #7
   119f4:	ebad 0d03 	sub.w	sp, sp, r3
	snprintf(data_str, len, "%s", data);
   119f8:	4641      	mov	r1, r8
   119fa:	4633      	mov	r3, r6
   119fc:	4a15      	ldr	r2, [pc, #84]	; (11a54 <create_message+0xa0>)
   119fe:	a802      	add	r0, sp, #8
   11a00:	f014 ff8a 	bl	26918 <snprintf>

	cJSON_AddStringToObject(message, "timestamp", time_str);
   11a04:	463a      	mov	r2, r7
   11a06:	4620      	mov	r0, r4
   11a08:	4913      	ldr	r1, [pc, #76]	; (11a58 <create_message+0xa4>)
   11a0a:	f01c faa7 	bl	2df5c <cJSON_AddStringToObject>
	cJSON_AddStringToObject(message, "data", data);
   11a0e:	4632      	mov	r2, r6
   11a10:	4912      	ldr	r1, [pc, #72]	; (11a5c <create_message+0xa8>)
   11a12:	4620      	mov	r0, r4
   11a14:	f01c faa2 	bl	2df5c <cJSON_AddStringToObject>

	destination->len = strlen(cJSON_Print(message));
   11a18:	4620      	mov	r0, r4
   11a1a:	f01c fa9c 	bl	2df56 <cJSON_Print>
   11a1e:	f015 f91b 	bl	26c58 <strlen>
   11a22:	f8c5 01f4 	str.w	r0, [r5, #500]	; 0x1f4

	strcpy(destination->data, cJSON_Print(message));
   11a26:	4620      	mov	r0, r4
   11a28:	f01c fa95 	bl	2df56 <cJSON_Print>
   11a2c:	4601      	mov	r1, r0
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   11a2e:	4628      	mov	r0, r5
   11a30:	f015 f8b4 	bl	26b9c <strcpy>

	cJSON_Delete(message);
   11a34:	4620      	mov	r0, r4
   11a36:	f004 fecd 	bl	167d4 <cJSON_Delete>
}
   11a3a:	3714      	adds	r7, #20
   11a3c:	46bd      	mov	sp, r7
   11a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_AddStringToObject(message, "type", "periodic sample");
   11a42:	4a07      	ldr	r2, [pc, #28]	; (11a60 <create_message+0xac>)
   11a44:	e7c5      	b.n	119d2 <create_message+0x1e>
   11a46:	bf00      	nop
   11a48:	00030153 	.word	0x00030153
   11a4c:	000300e1 	.word	0x000300e1
   11a50:	000300f6 	.word	0x000300f6
   11a54:	000321fe 	.word	0x000321fe
   11a58:	000300fb 	.word	0x000300fb
   11a5c:	00032c57 	.word	0x00032c57
   11a60:	000300e6 	.word	0x000300e6

00011a64 <publish_samples.part.0>:
void publish_samples(struct k_work *item) {
   11a64:	b510      	push	{r4, lr}
   11a66:	4b18      	ldr	r3, [pc, #96]	; (11ac8 <publish_samples.part.0+0x64>)
   11a68:	4a18      	ldr	r2, [pc, #96]	; (11acc <publish_samples.part.0+0x68>)
   11a6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   11a6e:	1ad2      	subs	r2, r2, r3
   11a70:	08d2      	lsrs	r2, r2, #3
	LOG_DBG("Publish Samples");
   11a72:	0192      	lsls	r2, r2, #6
   11a74:	f042 0204 	orr.w	r2, r2, #4
   11a78:	4915      	ldr	r1, [pc, #84]	; (11ad0 <publish_samples.part.0+0x6c>)
   11a7a:	4816      	ldr	r0, [pc, #88]	; (11ad4 <publish_samples.part.0+0x70>)
   11a7c:	f01a ff55 	bl	2c92a <log_1>
	date_time_now(&curr_time);
   11a80:	ac02      	add	r4, sp, #8
	dk_set_led(DK_LED2, 0);
   11a82:	2100      	movs	r1, #0
   11a84:	2001      	movs	r0, #1
   11a86:	f006 f8a1 	bl	17bcc <dk_set_led>
	date_time_now(&curr_time);
   11a8a:	4620      	mov	r0, r4
   11a8c:	f007 fe8c 	bl	197a8 <date_time_now>
	create_message(&message, SENSOR_SAMPLE, testData, sizeof(testData), &curr_time);
   11a90:	4a11      	ldr	r2, [pc, #68]	; (11ad8 <publish_samples.part.0+0x74>)
   11a92:	9400      	str	r4, [sp, #0]
   11a94:	2304      	movs	r3, #4
   11a96:	6812      	ldr	r2, [r2, #0]
   11a98:	a804      	add	r0, sp, #16
   11a9a:	2101      	movs	r1, #1
   11a9c:	f7ff ff8a 	bl	119b4 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message.data, message.len);
   11aa0:	9981      	ldr	r1, [sp, #516]	; 0x204
   11aa2:	a804      	add	r0, sp, #16
   11aa4:	f7ff fc6c 	bl	11380 <data_publish.constprop.0>
   11aa8:	f04f 32ff 	mov.w	r2, #4294967295
   11aac:	f04f 33ff 	mov.w	r3, #4294967295
   11ab0:	480a      	ldr	r0, [pc, #40]	; (11adc <publish_samples.part.0+0x78>)
   11ab2:	f012 ff6b 	bl	2498c <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
   11ab6:	2101      	movs	r1, #1
   11ab8:	4608      	mov	r0, r1
   11aba:	f006 f887 	bl	17bcc <dk_set_led>
	app_disconnect();
   11abe:	f7ff ff0b 	bl	118d8 <app_disconnect>
}
   11ac2:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   11ac6:	bd10      	pop	{r4, pc}
   11ac8:	0002f034 	.word	0x0002f034
   11acc:	0002f0a4 	.word	0x0002f0a4
   11ad0:	00030447 	.word	0x00030447
   11ad4:	00030105 	.word	0x00030105
   11ad8:	20020428 	.word	0x20020428
   11adc:	20020c84 	.word	0x20020c84

00011ae0 <publish_samples>:
void publish_samples(struct k_work *item) {
   11ae0:	b508      	push	{r3, lr}
	err = app_connect();
   11ae2:	f7ff fe71 	bl	117c8 <app_connect>
	if(err) {
   11ae6:	4601      	mov	r1, r0
   11ae8:	b168      	cbz	r0, 11b06 <publish_samples+0x26>
   11aea:	4b09      	ldr	r3, [pc, #36]	; (11b10 <publish_samples+0x30>)
   11aec:	4a09      	ldr	r2, [pc, #36]	; (11b14 <publish_samples+0x34>)
		LOG_ERR("PUBLISH_SAMPLES: connect failed with error %d", err);
   11aee:	480a      	ldr	r0, [pc, #40]	; (11b18 <publish_samples+0x38>)
   11af0:	1ad2      	subs	r2, r2, r3
   11af2:	08d2      	lsrs	r2, r2, #3
   11af4:	0192      	lsls	r2, r2, #6
   11af6:	f042 0201 	orr.w	r2, r2, #1
   11afa:	f01a ff16 	bl	2c92a <log_1>
}
   11afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_disconnect();
   11b02:	f7ff bee9 	b.w	118d8 <app_disconnect>
}
   11b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11b0a:	f7ff bfab 	b.w	11a64 <publish_samples.part.0>
   11b0e:	bf00      	nop
   11b10:	0002f034 	.word	0x0002f034
   11b14:	0002f0a4 	.word	0x0002f0a4
   11b18:	00030119 	.word	0x00030119

00011b1c <publish_alarm.part.0>:
void publish_alarm(struct k_work *item) {	
   11b1c:	b510      	push	{r4, lr}
   11b1e:	4b18      	ldr	r3, [pc, #96]	; (11b80 <publish_alarm.part.0+0x64>)
   11b20:	4a18      	ldr	r2, [pc, #96]	; (11b84 <publish_alarm.part.0+0x68>)
   11b22:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   11b26:	1ad2      	subs	r2, r2, r3
   11b28:	08d2      	lsrs	r2, r2, #3
	LOG_DBG("Publish alarm");
   11b2a:	0192      	lsls	r2, r2, #6
   11b2c:	f042 0204 	orr.w	r2, r2, #4
   11b30:	4915      	ldr	r1, [pc, #84]	; (11b88 <publish_alarm.part.0+0x6c>)
   11b32:	4816      	ldr	r0, [pc, #88]	; (11b8c <publish_alarm.part.0+0x70>)
   11b34:	f01a fef9 	bl	2c92a <log_1>
	date_time_now(&curr_time);
   11b38:	ac02      	add	r4, sp, #8
	dk_set_led(DK_LED2, 0);
   11b3a:	2100      	movs	r1, #0
   11b3c:	2001      	movs	r0, #1
   11b3e:	f006 f845 	bl	17bcc <dk_set_led>
	date_time_now(&curr_time);
   11b42:	4620      	mov	r0, r4
   11b44:	f007 fe30 	bl	197a8 <date_time_now>
	create_message(&message, SENSOR_ALARM, curr_sample, 1, &curr_time);
   11b48:	2301      	movs	r3, #1
   11b4a:	4a11      	ldr	r2, [pc, #68]	; (11b90 <publish_alarm.part.0+0x74>)
   11b4c:	a804      	add	r0, sp, #16
   11b4e:	2100      	movs	r1, #0
   11b50:	9400      	str	r4, [sp, #0]
   11b52:	f7ff ff2f 	bl	119b4 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message.data, message.len);
   11b56:	9981      	ldr	r1, [sp, #516]	; 0x204
   11b58:	a804      	add	r0, sp, #16
   11b5a:	f7ff fc11 	bl	11380 <data_publish.constprop.0>
   11b5e:	f04f 32ff 	mov.w	r2, #4294967295
   11b62:	f04f 33ff 	mov.w	r3, #4294967295
   11b66:	480b      	ldr	r0, [pc, #44]	; (11b94 <publish_alarm.part.0+0x78>)
   11b68:	f012 ff10 	bl	2498c <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
   11b6c:	2101      	movs	r1, #1
   11b6e:	4608      	mov	r0, r1
   11b70:	f006 f82c 	bl	17bcc <dk_set_led>
	app_disconnect();
   11b74:	f7ff feb0 	bl	118d8 <app_disconnect>
}
   11b78:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   11b7c:	bd10      	pop	{r4, pc}
   11b7e:	bf00      	nop
   11b80:	0002f034 	.word	0x0002f034
   11b84:	0002f0a4 	.word	0x0002f0a4
   11b88:	00030457 	.word	0x00030457
   11b8c:	00030147 	.word	0x00030147
   11b90:	000310ce 	.word	0x000310ce
   11b94:	20020c84 	.word	0x20020c84

00011b98 <publish_alarm>:
void publish_alarm(struct k_work *item) {	
   11b98:	b508      	push	{r3, lr}
	err = app_connect();
   11b9a:	f7ff fe15 	bl	117c8 <app_connect>
	if(err) {
   11b9e:	4601      	mov	r1, r0
   11ba0:	b168      	cbz	r0, 11bbe <publish_alarm+0x26>
   11ba2:	4b09      	ldr	r3, [pc, #36]	; (11bc8 <publish_alarm+0x30>)
   11ba4:	4a09      	ldr	r2, [pc, #36]	; (11bcc <publish_alarm+0x34>)
		LOG_ERR("PUBLISH_ALARM: connect failed with error %d", err);
   11ba6:	480a      	ldr	r0, [pc, #40]	; (11bd0 <publish_alarm+0x38>)
   11ba8:	1ad2      	subs	r2, r2, r3
   11baa:	08d2      	lsrs	r2, r2, #3
   11bac:	0192      	lsls	r2, r2, #6
   11bae:	f042 0201 	orr.w	r2, r2, #1
   11bb2:	f01a feba 	bl	2c92a <log_1>
}
   11bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_disconnect();
   11bba:	f7ff be8d 	b.w	118d8 <app_disconnect>
}
   11bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11bc2:	f7ff bfab 	b.w	11b1c <publish_alarm.part.0>
   11bc6:	bf00      	nop
   11bc8:	0002f034 	.word	0x0002f034
   11bcc:	0002f0a4 	.word	0x0002f0a4
   11bd0:	00030159 	.word	0x00030159

00011bd4 <main>:

/**** Application code - End ****/

void main(void)
{
   11bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11bd8:	4b97      	ldr	r3, [pc, #604]	; (11e38 <main+0x264>)
   11bda:	4c98      	ldr	r4, [pc, #608]	; (11e3c <main+0x268>)
	int err;

    LOG_INF("MQTT sensor application example started");
   11bdc:	4898      	ldr	r0, [pc, #608]	; (11e40 <main+0x26c>)
   11bde:	1ae4      	subs	r4, r4, r3
   11be0:	08e4      	lsrs	r4, r4, #3
   11be2:	01a4      	lsls	r4, r4, #6
{
   11be4:	b09c      	sub	sp, #112	; 0x70
    LOG_INF("MQTT sensor application example started");
   11be6:	f044 0103 	orr.w	r1, r4, #3
   11bea:	f01a fe8f 	bl	2c90c <log_0>
		LOG_INF("LTE Link Connecting ...");
   11bee:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 11ec0 <main+0x2ec>
			LOG_ERR("LTE link could not be established.");
   11bf2:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 11ec4 <main+0x2f0>

	while(modem_configure() != 0) {
		LOG_WRN("Failed to establish LTE connection.");
   11bf6:	4e93      	ldr	r6, [pc, #588]	; (11e44 <main+0x270>)
		LOG_INF("LTE Link Connecting ...");
   11bf8:	f044 0903 	orr.w	r9, r4, #3
   11bfc:	4649      	mov	r1, r9
   11bfe:	4650      	mov	r0, sl
   11c00:	f01a fe84 	bl	2c90c <log_0>
		err = lte_lc_init_and_connect();
   11c04:	f01c fe7b 	bl	2e8fe <lte_lc_init_and_connect>
		LOG_INF("LTE Link Connecting ...");
   11c08:	4627      	mov	r7, r4
		if(err) {
   11c0a:	4605      	mov	r5, r0
   11c0c:	b1a8      	cbz	r0, 11c3a <main+0x66>
			LOG_ERR("LTE link could not be established.");
   11c0e:	4640      	mov	r0, r8
   11c10:	f044 0101 	orr.w	r1, r4, #1
		LOG_WRN("Failed to establish LTE connection.");
   11c14:	f044 0502 	orr.w	r5, r4, #2
			LOG_ERR("LTE link could not be established.");
   11c18:	f01a fe78 	bl	2c90c <log_0>
		LOG_WRN("Failed to establish LTE connection.");
   11c1c:	4629      	mov	r1, r5
   11c1e:	4630      	mov	r0, r6
   11c20:	f01a fe74 	bl	2c90c <log_0>
		LOG_WRN("Will retry in %d seconds.",
   11c24:	462a      	mov	r2, r5
   11c26:	210a      	movs	r1, #10
   11c28:	4887      	ldr	r0, [pc, #540]	; (11e48 <main+0x274>)
   11c2a:	f01a fe7e 	bl	2c92a <log_1>
	return z_impl_k_sleep(timeout);
   11c2e:	2100      	movs	r1, #0
   11c30:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   11c34:	f012 fe2a 	bl	2488c <z_impl_k_sleep>
   11c38:	e7de      	b.n	11bf8 <main+0x24>
		LOG_INF("LTE Link Connected!");
   11c3a:	4649      	mov	r1, r9
   11c3c:	4883      	ldr	r0, [pc, #524]	; (11e4c <main+0x278>)
   11c3e:	f01a fe65 	bl	2c90c <log_0>
				CONFIG_APP_CONNECT_RETRY_DELAY);
		k_sleep(K_SECONDS(CONFIG_APP_CONNECT_RETRY_DELAY));
	}
	
	
	date_time_update_async(date_time_handler);
   11c42:	4883      	ldr	r0, [pc, #524]	; (11e50 <main+0x27c>)
   11c44:	f007 fdd2 	bl	197ec <date_time_update_async>
	struct addrinfo hints = {
   11c48:	f04f 0801 	mov.w	r8, #1
	return z_impl_k_sem_take(sem, timeout);
   11c4c:	f04f 33ff 	mov.w	r3, #4294967295
   11c50:	f04f 32ff 	mov.w	r2, #4294967295
   11c54:	487f      	ldr	r0, [pc, #508]	; (11e54 <main+0x280>)
   11c56:	f012 fe99 	bl	2498c <z_impl_k_sem_take>
	mqtt_client_init(client);
   11c5a:	487f      	ldr	r0, [pc, #508]	; (11e58 <main+0x284>)
   11c5c:	f01b fddb 	bl	2d816 <mqtt_client_init>
	struct addrinfo hints = {
   11c60:	2250      	movs	r2, #80	; 0x50
   11c62:	4629      	mov	r1, r5
   11c64:	a808      	add	r0, sp, #32
   11c66:	f014 fbe7 	bl	26438 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   11c6a:	4629      	mov	r1, r5
   11c6c:	487b      	ldr	r0, [pc, #492]	; (11e5c <main+0x288>)
   11c6e:	ab03      	add	r3, sp, #12
   11c70:	aa08      	add	r2, sp, #32
   11c72:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
   11c76:	f01b f8f6 	bl	2ce66 <zsock_getaddrinfo>
	if (err) {
   11c7a:	4e79      	ldr	r6, [pc, #484]	; (11e60 <main+0x28c>)
   11c7c:	4601      	mov	r1, r0
   11c7e:	2800      	cmp	r0, #0
   11c80:	d07a      	beq.n	11d78 <main+0x1a4>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
   11c82:	4878      	ldr	r0, [pc, #480]	; (11e64 <main+0x290>)
   11c84:	ea47 0208 	orr.w	r2, r7, r8
   11c88:	f01a fe4f 	bl	2c92a <log_1>
	client->broker = &broker;
   11c8c:	4d72      	ldr	r5, [pc, #456]	; (11e58 <main+0x284>)
	client->evt_cb = mqtt_evt_handler;
   11c8e:	4b76      	ldr	r3, [pc, #472]	; (11e68 <main+0x294>)
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   11c90:	4876      	ldr	r0, [pc, #472]	; (11e6c <main+0x298>)
	client->evt_cb = mqtt_evt_handler;
   11c92:	64ab      	str	r3, [r5, #72]	; 0x48
	client->broker = &broker;
   11c94:	636e      	str	r6, [r5, #52]	; 0x34
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   11c96:	62e8      	str	r0, [r5, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   11c98:	f014 ffde 	bl	26c58 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
   11c9c:	2204      	movs	r2, #4
   11c9e:	f885 205e 	strb.w	r2, [r5, #94]	; 0x5e
	client->rx_buf = rx_buffer;
   11ca2:	4a73      	ldr	r2, [pc, #460]	; (11e70 <main+0x29c>)
	client->password = NULL;
   11ca4:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
   11ca6:	64ea      	str	r2, [r5, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
   11ca8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	client->tx_buf = tx_buffer;
   11cac:	4971      	ldr	r1, [pc, #452]	; (11e74 <main+0x2a0>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   11cae:	6328      	str	r0, [r5, #48]	; 0x30
	client->tx_buf_size = sizeof(tx_buffer);
   11cb0:	e9c5 1215 	strd	r1, r2, [r5, #84]	; 0x54
	LOG_DBG("Initalizing buttons and leds.");
   11cb4:	4870      	ldr	r0, [pc, #448]	; (11e78 <main+0x2a4>)
   11cb6:	4971      	ldr	r1, [pc, #452]	; (11e7c <main+0x2a8>)
	client->rx_buf_size = sizeof(rx_buffer);
   11cb8:	652a      	str	r2, [r5, #80]	; 0x50
	LOG_DBG("Initalizing buttons and leds.");
   11cba:	f044 0204 	orr.w	r2, r4, #4
	client->user_name = NULL;
   11cbe:	e9c5 330e 	strd	r3, r3, [r5, #56]	; 0x38
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
   11cc2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	LOG_DBG("Initalizing buttons and leds.");
   11cc6:	f01a fe30 	bl	2c92a <log_1>
	err = dk_buttons_init(button_handler);
   11cca:	486d      	ldr	r0, [pc, #436]	; (11e80 <main+0x2ac>)
   11ccc:	f005 fec8 	bl	17a60 <dk_buttons_init>
	if (err) {
   11cd0:	4601      	mov	r1, r0
   11cd2:	b120      	cbz	r0, 11cde <main+0x10a>
		LOG_ERR("Could not initialize buttons, err code: %d", err);
   11cd4:	486b      	ldr	r0, [pc, #428]	; (11e84 <main+0x2b0>)
   11cd6:	f044 0201 	orr.w	r2, r4, #1
   11cda:	f01a fe26 	bl	2c92a <log_1>
	err = dk_leds_init();
   11cde:	f005 fe6f 	bl	179c0 <dk_leds_init>
	if (err) {
   11ce2:	4601      	mov	r1, r0
   11ce4:	b120      	cbz	r0, 11cf0 <main+0x11c>
		LOG_ERR("Could not initialize leds, err code: %d", err);
   11ce6:	4868      	ldr	r0, [pc, #416]	; (11e88 <main+0x2b4>)
   11ce8:	f044 0201 	orr.w	r2, r4, #1
   11cec:	f01a fe1d 	bl	2c92a <log_1>
	err = dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   11cf0:	2100      	movs	r1, #0
   11cf2:	200f      	movs	r0, #15
   11cf4:	f01c fca9 	bl	2e64a <dk_set_leds_state>
	if (err) {
   11cf8:	4601      	mov	r1, r0
   11cfa:	b120      	cbz	r0, 11d06 <main+0x132>
		LOG_ERR("Could not set leds state, err code: %d", err);
   11cfc:	4863      	ldr	r0, [pc, #396]	; (11e8c <main+0x2b8>)
   11cfe:	f044 0201 	orr.w	r2, r4, #1
   11d02:	f01a fe12 	bl	2c92a <log_1>
	k_sem_take(&date_time_ok,K_FOREVER);

	client_init(&client);

	buttons_leds_init(); /* Button for "alarm simulation" and leds for control */
	timer_init(); /* Periodic sample timer */
   11d06:	f7ff fd51 	bl	117ac <timer_init>
	init_work();  /* Work queue and items for sampling and alarm */
   11d0a:	f7ff fe33 	bl	11974 <init_work>
	modem_info_init();
   11d0e:	f007 fbaf 	bl	19470 <modem_info_init>
	
	err = lte_lc_offline();
   11d12:	f007 f835 	bl	18d80 <lte_lc_offline>
	if(err) {
   11d16:	b120      	cbz	r0, 11d22 <main+0x14e>
		LOG_ERR("LTE: Offline mode failed");
   11d18:	485d      	ldr	r0, [pc, #372]	; (11e90 <main+0x2bc>)
   11d1a:	f044 0101 	orr.w	r1, r4, #1
   11d1e:	f01a fdf5 	bl	2c90c <log_0>
	}


	//Lighting LED1 to indicate that the application entering main loop.
	dk_set_led(DK_LED1, 0);
   11d22:	2100      	movs	r1, #0
   11d24:	4608      	mov	r0, r1
   11d26:	f005 ff51 	bl	17bcc <dk_set_led>

	while (1) {
		if(app_connected) {
   11d2a:	4e5a      	ldr	r6, [pc, #360]	; (11e94 <main+0x2c0>)
   11d2c:	4d5a      	ldr	r5, [pc, #360]	; (11e98 <main+0x2c4>)
   11d2e:	7833      	ldrb	r3, [r6, #0]
   11d30:	2b00      	cmp	r3, #0
   11d32:	d07b      	beq.n	11e2c <main+0x258>
			err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   11d34:	4848      	ldr	r0, [pc, #288]	; (11e58 <main+0x284>)
   11d36:	f01b fe9f 	bl	2da78 <mqtt_keepalive_time_left>
   11d3a:	4602      	mov	r2, r0
   11d3c:	2101      	movs	r1, #1
   11d3e:	4628      	mov	r0, r5
   11d40:	f001 feca 	bl	13ad8 <z_impl_zsock_poll>
			if (err < 0) {
   11d44:	2800      	cmp	r0, #0
   11d46:	da41      	bge.n	11dcc <main+0x1f8>
				printk("ERROR: poll %d\n", errno);
   11d48:	f01b f9e1 	bl	2d10e <__errno>
   11d4c:	6801      	ldr	r1, [r0, #0]
   11d4e:	4853      	ldr	r0, [pc, #332]	; (11e9c <main+0x2c8>)
   11d50:	f01a fb8f 	bl	2c472 <printk>
		{
			k_sleep(K_SECONDS(SAMPLE_INTERVAL));
		}
	}

	LOG_INF("Disconnecting MQTT client...");
   11d54:	f044 0103 	orr.w	r1, r4, #3
   11d58:	4851      	ldr	r0, [pc, #324]	; (11ea0 <main+0x2cc>)
   11d5a:	f01a fdd7 	bl	2c90c <log_0>

	err = mqtt_disconnect(&client);
   11d5e:	483e      	ldr	r0, [pc, #248]	; (11e58 <main+0x284>)
   11d60:	f01b fdfb 	bl	2d95a <mqtt_disconnect>
	if (err) {
   11d64:	4601      	mov	r1, r0
   11d66:	b120      	cbz	r0, 11d72 <main+0x19e>
		LOG_ERR("Could not disconnect MQTT client. Error: %d", err);
   11d68:	484e      	ldr	r0, [pc, #312]	; (11ea4 <main+0x2d0>)
   11d6a:	f044 0201 	orr.w	r2, r4, #1
   11d6e:	f01a fddc 	bl	2c92a <log_1>
	}
}
   11d72:	b01c      	add	sp, #112	; 0x70
   11d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	addr = result;
   11d78:	9b03      	ldr	r3, [sp, #12]
	while (addr != NULL) {
   11d7a:	b1cb      	cbz	r3, 11db0 <main+0x1dc>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   11d7c:	6959      	ldr	r1, [r3, #20]
   11d7e:	2908      	cmp	r1, #8
   11d80:	d11a      	bne.n	11db8 <main+0x1e4>
				->sin_addr.s_addr;
   11d82:	699b      	ldr	r3, [r3, #24]
			broker4->sin_family = AF_INET;
   11d84:	f8a6 8000 	strh.w	r8, [r6]
				->sin_addr.s_addr;
   11d88:	685b      	ldr	r3, [r3, #4]
			broker4->sin_addr.s_addr =
   11d8a:	6073      	str	r3, [r6, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   11d8c:	f645 3307 	movw	r3, #23303	; 0x5b07
   11d90:	8073      	strh	r3, [r6, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   11d92:	2310      	movs	r3, #16
   11d94:	1d31      	adds	r1, r6, #4
   11d96:	eb0d 0203 	add.w	r2, sp, r3
   11d9a:	4640      	mov	r0, r8
   11d9c:	f003 fc12 	bl	155c4 <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", log_strdup(ipv4_addr));
   11da0:	a804      	add	r0, sp, #16
   11da2:	f001 f917 	bl	12fd4 <log_strdup>
   11da6:	464a      	mov	r2, r9
   11da8:	4601      	mov	r1, r0
   11daa:	483f      	ldr	r0, [pc, #252]	; (11ea8 <main+0x2d4>)
   11dac:	f01a fdbd 	bl	2c92a <log_1>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   11db0:	9803      	ldr	r0, [sp, #12]
   11db2:	f01b f85a 	bl	2ce6a <zsock_freeaddrinfo>
   11db6:	e769      	b.n	11c8c <main+0xb8>
			LOG_WRN("ai_addrlen = %u should be %u or %u",
   11db8:	f047 0702 	orr.w	r7, r7, #2
   11dbc:	2318      	movs	r3, #24
   11dbe:	2208      	movs	r2, #8
   11dc0:	483a      	ldr	r0, [pc, #232]	; (11eac <main+0x2d8>)
   11dc2:	f8ad 7000 	strh.w	r7, [sp]
   11dc6:	f01a fde0 	bl	2c98a <log_3>
		break;
   11dca:	e7f1      	b.n	11db0 <main+0x1dc>
			if(app_connected) { 
   11dcc:	7833      	ldrb	r3, [r6, #0]
   11dce:	2b00      	cmp	r3, #0
   11dd0:	d0ad      	beq.n	11d2e <main+0x15a>
				err = mqtt_live(&client);
   11dd2:	4821      	ldr	r0, [pc, #132]	; (11e58 <main+0x284>)
   11dd4:	f01b fe29 	bl	2da2a <mqtt_live>
				if ((err != 0) && (err != -EAGAIN)) {
   11dd8:	4601      	mov	r1, r0
   11dda:	b140      	cbz	r0, 11dee <main+0x21a>
   11ddc:	f110 0f0b 	cmn.w	r0, #11
   11de0:	d005      	beq.n	11dee <main+0x21a>
					LOG_ERR("ERROR: mqtt_live %d", err);
   11de2:	4833      	ldr	r0, [pc, #204]	; (11eb0 <main+0x2dc>)
   11de4:	f044 0201 	orr.w	r2, r4, #1
   11de8:	f01a fd9f 	bl	2c92a <log_1>
   11dec:	e7b2      	b.n	11d54 <main+0x180>
				if ((fds.revents & POLLIN) == POLLIN) {
   11dee:	88eb      	ldrh	r3, [r5, #6]
   11df0:	07d9      	lsls	r1, r3, #31
   11df2:	d50a      	bpl.n	11e0a <main+0x236>
					err = mqtt_input(&client);
   11df4:	4818      	ldr	r0, [pc, #96]	; (11e58 <main+0x284>)
   11df6:	f01b fe56 	bl	2daa6 <mqtt_input>
					if (err != 0) {
   11dfa:	4601      	mov	r1, r0
   11dfc:	b128      	cbz	r0, 11e0a <main+0x236>
						LOG_ERR("ERROR: mqtt_input %d", err);
   11dfe:	482d      	ldr	r0, [pc, #180]	; (11eb4 <main+0x2e0>)
   11e00:	f044 0201 	orr.w	r2, r4, #1
   11e04:	f01a fd91 	bl	2c92a <log_1>
						continue;
   11e08:	e791      	b.n	11d2e <main+0x15a>
				if ((fds.revents & POLLERR) == POLLERR) {
   11e0a:	88eb      	ldrh	r3, [r5, #6]
   11e0c:	071a      	lsls	r2, r3, #28
   11e0e:	d505      	bpl.n	11e1c <main+0x248>
					LOG_ERR("POLLERR");
   11e10:	4829      	ldr	r0, [pc, #164]	; (11eb8 <main+0x2e4>)
   11e12:	f044 0101 	orr.w	r1, r4, #1
   11e16:	f01a fd79 	bl	2c90c <log_0>
   11e1a:	e79b      	b.n	11d54 <main+0x180>
				if ((fds.revents & POLLNVAL) == POLLNVAL) {
   11e1c:	069b      	lsls	r3, r3, #26
   11e1e:	d586      	bpl.n	11d2e <main+0x15a>
					LOG_ERR("POLLNVAL");
   11e20:	4826      	ldr	r0, [pc, #152]	; (11ebc <main+0x2e8>)
   11e22:	f044 0101 	orr.w	r1, r4, #1
   11e26:	f01a fd71 	bl	2c90c <log_0>
					continue;
   11e2a:	e780      	b.n	11d2e <main+0x15a>
	return z_impl_k_sleep(timeout);
   11e2c:	2100      	movs	r1, #0
   11e2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11e32:	f012 fd2b 	bl	2488c <z_impl_k_sleep>
   11e36:	e77a      	b.n	11d2e <main+0x15a>
   11e38:	0002f034 	.word	0x0002f034
   11e3c:	0002f0a4 	.word	0x0002f0a4
   11e40:	00030185 	.word	0x00030185
   11e44:	0002ffdb 	.word	0x0002ffdb
   11e48:	0002ffff 	.word	0x0002ffff
   11e4c:	000301e8 	.word	0x000301e8
   11e50:	000114c5 	.word	0x000114c5
   11e54:	20020c24 	.word	0x20020c24
   11e58:	20021444 	.word	0x20021444
   11e5c:	000301fc 	.word	0x000301fc
   11e60:	200242ac 	.word	0x200242ac
   11e64:	0003020d 	.word	0x0003020d
   11e68:	00011555 	.word	0x00011555
   11e6c:	00030263 	.word	0x00030263
   11e70:	2002434f 	.word	0x2002434f
   11e74:	20024543 	.word	0x20024543
   11e78:	0003026f 	.word	0x0003026f
   11e7c:	00030435 	.word	0x00030435
   11e80:	00011445 	.word	0x00011445
   11e84:	00030291 	.word	0x00030291
   11e88:	000302bc 	.word	0x000302bc
   11e8c:	000302e4 	.word	0x000302e4
   11e90:	0003030b 	.word	0x0003030b
   11e94:	200242ce 	.word	0x200242ce
   11e98:	200214a8 	.word	0x200214a8
   11e9c:	00030324 	.word	0x00030324
   11ea0:	0002fef1 	.word	0x0002fef1
   11ea4:	0003036e 	.word	0x0003036e
   11ea8:	0003022a 	.word	0x0003022a
   11eac:	00030240 	.word	0x00030240
   11eb0:	00030334 	.word	0x00030334
   11eb4:	00030348 	.word	0x00030348
   11eb8:	0003035d 	.word	0x0003035d
   11ebc:	00030365 	.word	0x00030365
   11ec0:	000301ad 	.word	0x000301ad
   11ec4:	000301c5 	.word	0x000301c5

00011ec8 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11ec8:	2803      	cmp	r0, #3
{
   11eca:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11ecc:	d906      	bls.n	11edc <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   11ece:	f01b f91e 	bl	2d10e <__errno>
   11ed2:	2309      	movs	r3, #9
   11ed4:	6003      	str	r3, [r0, #0]
   11ed6:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   11eda:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11edc:	220c      	movs	r2, #12
   11ede:	4b05      	ldr	r3, [pc, #20]	; (11ef4 <_check_fd+0x2c>)
   11ee0:	fb02 3000 	mla	r0, r2, r0, r3
   11ee4:	3008      	adds	r0, #8
   11ee6:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   11eea:	2b00      	cmp	r3, #0
   11eec:	d0ef      	beq.n	11ece <_check_fd+0x6>
	return 0;
   11eee:	2000      	movs	r0, #0
   11ef0:	e7f3      	b.n	11eda <_check_fd+0x12>
   11ef2:	bf00      	nop
   11ef4:	200214c0 	.word	0x200214c0

00011ef8 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   11ef8:	b570      	push	{r4, r5, r6, lr}
   11efa:	4604      	mov	r4, r0
   11efc:	460d      	mov	r5, r1
   11efe:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11f00:	f7ff ffe2 	bl	11ec8 <_check_fd>
   11f04:	2800      	cmp	r0, #0
   11f06:	db0a      	blt.n	11f1e <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   11f08:	4a08      	ldr	r2, [pc, #32]	; (11f2c <z_get_fd_obj+0x34>)
   11f0a:	b155      	cbz	r5, 11f22 <z_get_fd_obj+0x2a>
   11f0c:	230c      	movs	r3, #12
   11f0e:	fb03 2304 	mla	r3, r3, r4, r2
   11f12:	685b      	ldr	r3, [r3, #4]
   11f14:	42ab      	cmp	r3, r5
   11f16:	d004      	beq.n	11f22 <z_get_fd_obj+0x2a>
		errno = err;
   11f18:	f01b f8f9 	bl	2d10e <__errno>
   11f1c:	6006      	str	r6, [r0, #0]
		return NULL;
   11f1e:	2000      	movs	r0, #0
   11f20:	e002      	b.n	11f28 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   11f22:	200c      	movs	r0, #12
   11f24:	4344      	muls	r4, r0
   11f26:	5910      	ldr	r0, [r2, r4]
}
   11f28:	bd70      	pop	{r4, r5, r6, pc}
   11f2a:	bf00      	nop
   11f2c:	200214c0 	.word	0x200214c0

00011f30 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   11f30:	b538      	push	{r3, r4, r5, lr}
   11f32:	4605      	mov	r5, r0
   11f34:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11f36:	f7ff ffc7 	bl	11ec8 <_check_fd>
   11f3a:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   11f3c:	bfa3      	ittte	ge
   11f3e:	230c      	movge	r3, #12
   11f40:	fb03 f005 	mulge.w	r0, r3, r5
   11f44:	4a03      	ldrge	r2, [pc, #12]	; (11f54 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   11f46:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   11f48:	bfa1      	itttt	ge
   11f4a:	1813      	addge	r3, r2, r0
   11f4c:	685b      	ldrge	r3, [r3, #4]
   11f4e:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   11f50:	5810      	ldrge	r0, [r2, r0]
}
   11f52:	bd38      	pop	{r3, r4, r5, pc}
   11f54:	200214c0 	.word	0x200214c0

00011f58 <z_reserve_fd>:

int z_reserve_fd(void)
{
   11f58:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11f5a:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   11f5c:	f04f 33ff 	mov.w	r3, #4294967295
   11f60:	f04f 32ff 	mov.w	r2, #4294967295
   11f64:	4812      	ldr	r0, [pc, #72]	; (11fb0 <z_reserve_fd+0x58>)
   11f66:	f011 f853 	bl	23010 <z_impl_k_mutex_lock>
   11f6a:	4b12      	ldr	r3, [pc, #72]	; (11fb4 <z_reserve_fd+0x5c>)
   11f6c:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   11f70:	b17a      	cbz	r2, 11f92 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11f72:	3401      	adds	r4, #1
   11f74:	2c04      	cmp	r4, #4
   11f76:	f103 030c 	add.w	r3, r3, #12
   11f7a:	d1f7      	bne.n	11f6c <z_reserve_fd+0x14>
	errno = ENFILE;
   11f7c:	f01b f8c7 	bl	2d10e <__errno>
   11f80:	2317      	movs	r3, #23
	return -1;
   11f82:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   11f86:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   11f88:	4809      	ldr	r0, [pc, #36]	; (11fb0 <z_reserve_fd+0x58>)
   11f8a:	f011 f93b 	bl	23204 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   11f8e:	4620      	mov	r0, r4
   11f90:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11f92:	e8d3 1fef 	ldaex	r1, [r3]
   11f96:	3101      	adds	r1, #1
   11f98:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11f9c:	2800      	cmp	r0, #0
   11f9e:	d1f8      	bne.n	11f92 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   11fa0:	230c      	movs	r3, #12
   11fa2:	4363      	muls	r3, r4
   11fa4:	4904      	ldr	r1, [pc, #16]	; (11fb8 <z_reserve_fd+0x60>)
   11fa6:	18c8      	adds	r0, r1, r3
   11fa8:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   11faa:	6042      	str	r2, [r0, #4]
   11fac:	e7ec      	b.n	11f88 <z_reserve_fd+0x30>
   11fae:	bf00      	nop
   11fb0:	20020b7c 	.word	0x20020b7c
   11fb4:	200214c8 	.word	0x200214c8
   11fb8:	200214c0 	.word	0x200214c0

00011fbc <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   11fbc:	230c      	movs	r3, #12
{
   11fbe:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   11fc0:	4358      	muls	r0, r3
   11fc2:	4c02      	ldr	r4, [pc, #8]	; (11fcc <z_finalize_fd+0x10>)
   11fc4:	1823      	adds	r3, r4, r0
   11fc6:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   11fc8:	605a      	str	r2, [r3, #4]
}
   11fca:	bd10      	pop	{r4, pc}
   11fcc:	200214c0 	.word	0x200214c0

00011fd0 <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   11fd0:	230c      	movs	r3, #12
   11fd2:	4a0e      	ldr	r2, [pc, #56]	; (1200c <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   11fd4:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   11fd6:	fb03 2300 	mla	r3, r3, r0, r2
   11fda:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11fdc:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   11fe0:	b191      	cbz	r1, 12008 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   11fe2:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11fe4:	e8d3 5fef 	ldaex	r5, [r3]
   11fe8:	428d      	cmp	r5, r1
   11fea:	d104      	bne.n	11ff6 <z_free_fd+0x26>
   11fec:	e8c3 4fec 	stlex	ip, r4, [r3]
   11ff0:	f1bc 0f00 	cmp.w	ip, #0
   11ff4:	d1f6      	bne.n	11fe4 <z_free_fd+0x14>
   11ff6:	d1f1      	bne.n	11fdc <z_free_fd+0xc>
	if (old_rc != 1) {
   11ff8:	2901      	cmp	r1, #1
   11ffa:	d105      	bne.n	12008 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   11ffc:	230c      	movs	r3, #12
   11ffe:	4358      	muls	r0, r3
   12000:	2300      	movs	r3, #0
   12002:	1811      	adds	r1, r2, r0
   12004:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   12006:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   12008:	bd30      	pop	{r4, r5, pc}
   1200a:	bf00      	nop
   1200c:	200214c0 	.word	0x200214c0

00012010 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   12010:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   12012:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   12014:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   12018:	2b02      	cmp	r3, #2
{
   1201a:	4604      	mov	r4, r0
   1201c:	460e      	mov	r6, r1
	notify->result = res;
   1201e:	6081      	str	r1, [r0, #8]
	switch (method) {
   12020:	d010      	beq.n	12044 <sys_notify_finalize+0x34>
   12022:	2b03      	cmp	r3, #3
   12024:	d004      	beq.n	12030 <sys_notify_finalize+0x20>
   12026:	2b01      	cmp	r3, #1
   12028:	d10f      	bne.n	1204a <sys_notify_finalize+0x3a>
   1202a:	2500      	movs	r5, #0
   1202c:	4628      	mov	r0, r5
   1202e:	e001      	b.n	12034 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   12030:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   12032:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12034:	2300      	movs	r3, #0
   12036:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12038:	b110      	cbz	r0, 12040 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   1203a:	4631      	mov	r1, r6
   1203c:	f013 fe00 	bl	25c40 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12040:	4628      	mov	r0, r5
   12042:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
   12044:	2500      	movs	r5, #0
		sig = notify->method.signal;
   12046:	6800      	ldr	r0, [r0, #0]
		break;
   12048:	e7f4      	b.n	12034 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1204a:	2345      	movs	r3, #69	; 0x45
   1204c:	4a05      	ldr	r2, [pc, #20]	; (12064 <sys_notify_finalize+0x54>)
   1204e:	4906      	ldr	r1, [pc, #24]	; (12068 <sys_notify_finalize+0x58>)
   12050:	4806      	ldr	r0, [pc, #24]	; (1206c <sys_notify_finalize+0x5c>)
   12052:	f01a fa0e 	bl	2c472 <printk>
   12056:	2145      	movs	r1, #69	; 0x45
   12058:	4802      	ldr	r0, [pc, #8]	; (12064 <sys_notify_finalize+0x54>)
   1205a:	f01a fc27 	bl	2c8ac <assert_post_action>
	sys_notify_generic_callback rv = 0;
   1205e:	2500      	movs	r5, #0
   12060:	e7e7      	b.n	12032 <sys_notify_finalize+0x22>
   12062:	bf00      	nop
   12064:	00030477 	.word	0x00030477
   12068:	00033086 	.word	0x00033086
   1206c:	0003049a 	.word	0x0003049a

00012070 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
   12070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12074:	b087      	sub	sp, #28
   12076:	460f      	mov	r7, r1
   12078:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
   1207a:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
   1207c:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   1207e:	2514      	movs	r5, #20
{
   12080:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   12082:	4698      	mov	r8, r3
{
   12084:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   12088:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   1208c:	4c1e      	ldr	r4, [pc, #120]	; (12108 <print_digits+0x98>)
   1208e:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   12092:	ea50 0301 	orrs.w	r3, r0, r1
   12096:	d11a      	bne.n	120ce <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
   12098:	2d14      	cmp	r5, #20
		buf[i] = '0';
   1209a:	bf08      	it	eq
   1209c:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   1209e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   120a0:	bf18      	it	ne
   120a2:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   120a4:	442c      	add	r4, r5
		buf[i] = '0';
   120a6:	bf08      	it	eq
   120a8:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   120ac:	2c15      	cmp	r4, #21
   120ae:	d01b      	beq.n	120e8 <print_digits+0x78>
   120b0:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
   120b2:	2c00      	cmp	r4, #0
   120b4:	dc1a      	bgt.n	120ec <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
   120b6:	f81d 0005 	ldrb.w	r0, [sp, r5]
   120ba:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   120bc:	3501      	adds	r5, #1
		out(buf[i], ctx);
   120be:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   120c0:	2d15      	cmp	r5, #21
   120c2:	d1f8      	bne.n	120b6 <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
   120c4:	2c00      	cmp	r4, #0
   120c6:	dc19      	bgt.n	120fc <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
   120c8:	b007      	add	sp, #28
   120ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   120ce:	4642      	mov	r2, r8
   120d0:	464b      	mov	r3, r9
   120d2:	f7fa fbc1 	bl	c858 <__aeabi_uldivmod>
   120d6:	4684      	mov	ip, r0
   120d8:	460b      	mov	r3, r1
   120da:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
   120dc:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
   120de:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
   120e2:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   120e4:	3d01      	subs	r5, #1
   120e6:	e7d4      	b.n	12092 <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   120e8:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
   120ea:	e7e4      	b.n	120b6 <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   120ec:	f1bb 0f00 	cmp.w	fp, #0
   120f0:	d0e1      	beq.n	120b6 <print_digits+0x46>
		out(pad_char, ctx);
   120f2:	4639      	mov	r1, r7
   120f4:	4650      	mov	r0, sl
   120f6:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   120f8:	3c01      	subs	r4, #1
   120fa:	e7da      	b.n	120b2 <print_digits+0x42>
		out(pad_char, ctx);
   120fc:	4639      	mov	r1, r7
   120fe:	4650      	mov	r0, sl
   12100:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   12102:	3c01      	subs	r4, #1
   12104:	e7de      	b.n	120c4 <print_digits+0x54>
   12106:	bf00      	nop
   12108:	000304b7 	.word	0x000304b7

0001210c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1210c:	680b      	ldr	r3, [r1, #0]
   1210e:	3301      	adds	r3, #1
   12110:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   12112:	4b01      	ldr	r3, [pc, #4]	; (12118 <char_out+0xc>)
   12114:	681b      	ldr	r3, [r3, #0]
   12116:	4718      	bx	r3
   12118:	2002042c 	.word	0x2002042c

0001211c <__printk_hook_install>:
	_char_out = fn;
   1211c:	4b01      	ldr	r3, [pc, #4]	; (12124 <__printk_hook_install+0x8>)
   1211e:	6018      	str	r0, [r3, #0]
}
   12120:	4770      	bx	lr
   12122:	bf00      	nop
   12124:	2002042c 	.word	0x2002042c

00012128 <z_vprintk>:
{
   12128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1212c:	2600      	movs	r6, #0
{
   1212e:	4605      	mov	r5, r0
   12130:	468b      	mov	fp, r1
   12132:	461c      	mov	r4, r3
	int min_width = -1;
   12134:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
   12138:	4637      	mov	r7, r6
{
   1213a:	b087      	sub	sp, #28
   1213c:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
   12140:	f04f 0900 	mov.w	r9, #0
					break;
   12144:	e007      	b.n	12156 <z_vprintk+0x2e>
		if (!might_format) {
   12146:	f1b9 0f00 	cmp.w	r9, #0
   1214a:	d10b      	bne.n	12164 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1214c:	2825      	cmp	r0, #37	; 0x25
   1214e:	f000 810a 	beq.w	12366 <z_vprintk+0x23e>
				out((int)*fmt, ctx);
   12152:	4659      	mov	r1, fp
   12154:	47a8      	blx	r5
	while (*fmt) {
   12156:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   1215a:	2800      	cmp	r0, #0
   1215c:	d1f3      	bne.n	12146 <z_vprintk+0x1e>
}
   1215e:	b007      	add	sp, #28
   12160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   12164:	287a      	cmp	r0, #122	; 0x7a
   12166:	d80a      	bhi.n	1217e <z_vprintk+0x56>
   12168:	2862      	cmp	r0, #98	; 0x62
   1216a:	d810      	bhi.n	1218e <z_vprintk+0x66>
   1216c:	2830      	cmp	r0, #48	; 0x30
   1216e:	d051      	beq.n	12214 <z_vprintk+0xec>
   12170:	d844      	bhi.n	121fc <z_vprintk+0xd4>
   12172:	2825      	cmp	r0, #37	; 0x25
   12174:	f000 80f5 	beq.w	12362 <z_vprintk+0x23a>
   12178:	282d      	cmp	r0, #45	; 0x2d
   1217a:	f000 80fb 	beq.w	12374 <z_vprintk+0x24c>
					out((int)'%', ctx);
   1217e:	4659      	mov	r1, fp
   12180:	2025      	movs	r0, #37	; 0x25
   12182:	47a8      	blx	r5
					out((int)*fmt, ctx);
   12184:	4659      	mov	r1, fp
   12186:	f89a 0000 	ldrb.w	r0, [sl]
   1218a:	47a8      	blx	r5
   1218c:	e7d8      	b.n	12140 <z_vprintk+0x18>
   1218e:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   12192:	2b17      	cmp	r3, #23
   12194:	d8f3      	bhi.n	1217e <z_vprintk+0x56>
   12196:	a201      	add	r2, pc, #4	; (adr r2, 1219c <z_vprintk+0x74>)
   12198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1219c:	0001235b 	.word	0x0001235b
   121a0:	0001225d 	.word	0x0001225d
   121a4:	0001217f 	.word	0x0001217f
   121a8:	0001217f 	.word	0x0001217f
   121ac:	0001217f 	.word	0x0001217f
   121b0:	0001223f 	.word	0x0001223f
   121b4:	0001225d 	.word	0x0001225d
   121b8:	0001217f 	.word	0x0001217f
   121bc:	0001217f 	.word	0x0001217f
   121c0:	0001223f 	.word	0x0001223f
   121c4:	0001217f 	.word	0x0001217f
   121c8:	0001217f 	.word	0x0001217f
   121cc:	0001217f 	.word	0x0001217f
   121d0:	000122d7 	.word	0x000122d7
   121d4:	0001217f 	.word	0x0001217f
   121d8:	0001217f 	.word	0x0001217f
   121dc:	00012323 	.word	0x00012323
   121e0:	0001217f 	.word	0x0001217f
   121e4:	0001225d 	.word	0x0001225d
   121e8:	0001217f 	.word	0x0001217f
   121ec:	0001217f 	.word	0x0001217f
   121f0:	00012205 	.word	0x00012205
   121f4:	0001217f 	.word	0x0001217f
   121f8:	0001223f 	.word	0x0001223f
			switch (*fmt) {
   121fc:	2839      	cmp	r0, #57	; 0x39
   121fe:	d915      	bls.n	1222c <z_vprintk+0x104>
   12200:	2858      	cmp	r0, #88	; 0x58
   12202:	d1bc      	bne.n	1217e <z_vprintk+0x56>
				if (*fmt == 'p') {
   12204:	f89a 3000 	ldrb.w	r3, [sl]
   12208:	2b70      	cmp	r3, #112	; 0x70
   1220a:	d16e      	bne.n	122ea <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
   1220c:	2300      	movs	r3, #0
   1220e:	f854 2b04 	ldr.w	r2, [r4], #4
   12212:	e075      	b.n	12300 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
   12214:	f1b8 0f00 	cmp.w	r8, #0
   12218:	da0b      	bge.n	12232 <z_vprintk+0x10a>
   1221a:	2f00      	cmp	r7, #0
   1221c:	f000 80ac 	beq.w	12378 <z_vprintk+0x250>
					min_width = *fmt - '0';
   12220:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   12224:	2f00      	cmp	r7, #0
   12226:	bf08      	it	eq
   12228:	2702      	moveq	r7, #2
   1222a:	e794      	b.n	12156 <z_vprintk+0x2e>
				if (min_width < 0) {
   1222c:	f1b8 0f00 	cmp.w	r8, #0
   12230:	dbf6      	blt.n	12220 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   12232:	230a      	movs	r3, #10
   12234:	fb03 0808 	mla	r8, r3, r8, r0
   12238:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1223c:	e7f2      	b.n	12224 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
   1223e:	2868      	cmp	r0, #104	; 0x68
   12240:	d103      	bne.n	1224a <z_vprintk+0x122>
   12242:	2e68      	cmp	r6, #104	; 0x68
   12244:	d106      	bne.n	12254 <z_vprintk+0x12c>
					length_mod = 'H';
   12246:	2648      	movs	r6, #72	; 0x48
   12248:	e785      	b.n	12156 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1224a:	286c      	cmp	r0, #108	; 0x6c
   1224c:	d102      	bne.n	12254 <z_vprintk+0x12c>
   1224e:	2e6c      	cmp	r6, #108	; 0x6c
   12250:	f000 8094 	beq.w	1237c <z_vprintk+0x254>
				} else if (length_mod == 0) {
   12254:	2e00      	cmp	r6, #0
   12256:	d192      	bne.n	1217e <z_vprintk+0x56>
   12258:	4606      	mov	r6, r0
   1225a:	e77c      	b.n	12156 <z_vprintk+0x2e>
				if (length_mod == 'z') {
   1225c:	2e7a      	cmp	r6, #122	; 0x7a
   1225e:	d106      	bne.n	1226e <z_vprintk+0x146>
					d = va_arg(ap, long);
   12260:	46a1      	mov	r9, r4
   12262:	f859 2b04 	ldr.w	r2, [r9], #4
   12266:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   12268:	2875      	cmp	r0, #117	; 0x75
   1226a:	d123      	bne.n	122b4 <z_vprintk+0x18c>
   1226c:	e00f      	b.n	1228e <z_vprintk+0x166>
				} else if (length_mod == 'l') {
   1226e:	2e6c      	cmp	r6, #108	; 0x6c
   12270:	d0f6      	beq.n	12260 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
   12272:	2e4c      	cmp	r6, #76	; 0x4c
   12274:	d105      	bne.n	12282 <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
   12276:	3407      	adds	r4, #7
   12278:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
   1227c:	e8f9 2302 	ldrd	r2, r3, [r9], #8
   12280:	e7f2      	b.n	12268 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
   12282:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
   12284:	6822      	ldr	r2, [r4, #0]
   12286:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
   1228a:	d112      	bne.n	122b2 <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
   1228c:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   1228e:	1ef8      	subs	r0, r7, #3
   12290:	bf18      	it	ne
   12292:	2001      	movne	r0, #1
   12294:	2f01      	cmp	r7, #1
   12296:	bf0c      	ite	eq
   12298:	2430      	moveq	r4, #48	; 0x30
   1229a:	2420      	movne	r4, #32
   1229c:	9001      	str	r0, [sp, #4]
   1229e:	200a      	movs	r0, #10
   122a0:	e9cd 4802 	strd	r4, r8, [sp, #8]
   122a4:	9000      	str	r0, [sp, #0]
   122a6:	4659      	mov	r1, fp
   122a8:	4628      	mov	r0, r5
   122aa:	f7ff fee1 	bl	12070 <print_digits>
}
   122ae:	464c      	mov	r4, r9
   122b0:	e746      	b.n	12140 <z_vprintk+0x18>
					d = va_arg(ap, int);
   122b2:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   122b4:	2a00      	cmp	r2, #0
   122b6:	f173 0100 	sbcs.w	r1, r3, #0
   122ba:	dae8      	bge.n	1228e <z_vprintk+0x166>
					out((int)'-', ctx);
   122bc:	4659      	mov	r1, fp
   122be:	202d      	movs	r0, #45	; 0x2d
   122c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   122c4:	47a8      	blx	r5
					d = -d;
   122c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   122ca:	4252      	negs	r2, r2
   122cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   122d0:	f108 38ff 	add.w	r8, r8, #4294967295
   122d4:	e7db      	b.n	1228e <z_vprintk+0x166>
				out('0', ctx);
   122d6:	4659      	mov	r1, fp
   122d8:	2030      	movs	r0, #48	; 0x30
   122da:	47a8      	blx	r5
				out('x', ctx);
   122dc:	4659      	mov	r1, fp
   122de:	2078      	movs	r0, #120	; 0x78
   122e0:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
   122e2:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
   122e6:	2701      	movs	r7, #1
   122e8:	e78c      	b.n	12204 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   122ea:	2e6c      	cmp	r6, #108	; 0x6c
   122ec:	d08e      	beq.n	1220c <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
   122ee:	2e4c      	cmp	r6, #76	; 0x4c
   122f0:	d18c      	bne.n	1220c <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
   122f2:	1de3      	adds	r3, r4, #7
   122f4:	f023 0307 	bic.w	r3, r3, #7
   122f8:	461c      	mov	r4, r3
   122fa:	685b      	ldr	r3, [r3, #4]
   122fc:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   12300:	1ef8      	subs	r0, r7, #3
   12302:	bf18      	it	ne
   12304:	2001      	movne	r0, #1
   12306:	2f01      	cmp	r7, #1
   12308:	bf0c      	ite	eq
   1230a:	2130      	moveq	r1, #48	; 0x30
   1230c:	2120      	movne	r1, #32
   1230e:	e9cd 1802 	strd	r1, r8, [sp, #8]
   12312:	2110      	movs	r1, #16
   12314:	9001      	str	r0, [sp, #4]
   12316:	9100      	str	r1, [sp, #0]
   12318:	4628      	mov	r0, r5
   1231a:	4659      	mov	r1, fp
   1231c:	f7ff fea8 	bl	12070 <print_digits>
   12320:	e70e      	b.n	12140 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
   12322:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   12326:	4699      	mov	r9, r3
   12328:	464a      	mov	r2, r9
   1232a:	f819 0b01 	ldrb.w	r0, [r9], #1
   1232e:	b978      	cbnz	r0, 12350 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
   12330:	2f03      	cmp	r7, #3
   12332:	d125      	bne.n	12380 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
   12334:	eba2 0903 	sub.w	r9, r2, r3
   12338:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
   1233c:	f1b9 0f00 	cmp.w	r9, #0
   12340:	f77f aefe 	ble.w	12140 <z_vprintk+0x18>
						out(' ', ctx);
   12344:	4659      	mov	r1, fp
   12346:	2020      	movs	r0, #32
   12348:	47a8      	blx	r5
   1234a:	f109 39ff 	add.w	r9, r9, #4294967295
   1234e:	e7f5      	b.n	1233c <z_vprintk+0x214>
					out((int)(*s++), ctx);
   12350:	4659      	mov	r1, fp
   12352:	9304      	str	r3, [sp, #16]
   12354:	47a8      	blx	r5
   12356:	9b04      	ldr	r3, [sp, #16]
   12358:	e7e6      	b.n	12328 <z_vprintk+0x200>
				out(c, ctx);
   1235a:	4659      	mov	r1, fp
   1235c:	f854 0b04 	ldr.w	r0, [r4], #4
   12360:	e713      	b.n	1218a <z_vprintk+0x62>
				out((int)'%', ctx);
   12362:	4659      	mov	r1, fp
   12364:	e711      	b.n	1218a <z_vprintk+0x62>
				length_mod = 0;
   12366:	464e      	mov	r6, r9
				padding = PAD_NONE;
   12368:	464f      	mov	r7, r9
				min_width = -1;
   1236a:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
   1236e:	f04f 0901 	mov.w	r9, #1
   12372:	e6f0      	b.n	12156 <z_vprintk+0x2e>
			switch (*fmt) {
   12374:	2703      	movs	r7, #3
   12376:	e6ee      	b.n	12156 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   12378:	2701      	movs	r7, #1
   1237a:	e6ec      	b.n	12156 <z_vprintk+0x2e>
					length_mod = 'L';
   1237c:	264c      	movs	r6, #76	; 0x4c
   1237e:	e6ea      	b.n	12156 <z_vprintk+0x2e>
			might_format = 0;
   12380:	4681      	mov	r9, r0
   12382:	e6e8      	b.n	12156 <z_vprintk+0x2e>

00012384 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12384:	b507      	push	{r0, r1, r2, lr}
   12386:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12388:	2100      	movs	r1, #0
{
   1238a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1238c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   1238e:	4803      	ldr	r0, [pc, #12]	; (1239c <vprintk+0x18>)
   12390:	a901      	add	r1, sp, #4
   12392:	f7ff fec9 	bl	12128 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12396:	b003      	add	sp, #12
   12398:	f85d fb04 	ldr.w	pc, [sp], #4
   1239c:	0001210d 	.word	0x0001210d

000123a0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   123a0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   123a2:	2500      	movs	r5, #0
{
   123a4:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   123a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   123aa:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   123ac:	a901      	add	r1, sp, #4
   123ae:	4805      	ldr	r0, [pc, #20]	; (123c4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   123b0:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   123b2:	f7ff feb9 	bl	12128 <z_vprintk>

	if (ctx.count < ctx.max) {
   123b6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   123ba:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   123bc:	bfb8      	it	lt
   123be:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   123c0:	b005      	add	sp, #20
   123c2:	bd30      	pop	{r4, r5, pc}
   123c4:	0002c44d 	.word	0x0002c44d

000123c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   123c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123cc:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   123d0:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   123d4:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   123d6:	f019 0f08 	tst.w	r9, #8
{
   123da:	4604      	mov	r4, r0
   123dc:	9201      	str	r2, [sp, #4]
	if (processing) {
   123de:	d024      	beq.n	1242a <process_event+0x62>
		if (evt == EVT_COMPLETE) {
   123e0:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   123e2:	bf0c      	ite	eq
   123e4:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   123e8:	f049 0920 	orrne.w	r9, r9, #32
   123ec:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   123f0:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   123f2:	4620      	mov	r0, r4
   123f4:	f012 fcb4 	bl	24d60 <z_spin_unlock_valid>
   123f8:	b968      	cbnz	r0, 12416 <process_event+0x4e>
   123fa:	2384      	movs	r3, #132	; 0x84
   123fc:	4aa2      	ldr	r2, [pc, #648]	; (12688 <process_event+0x2c0>)
   123fe:	49a3      	ldr	r1, [pc, #652]	; (1268c <process_event+0x2c4>)
   12400:	48a3      	ldr	r0, [pc, #652]	; (12690 <process_event+0x2c8>)
   12402:	f01a f836 	bl	2c472 <printk>
   12406:	4621      	mov	r1, r4
   12408:	48a2      	ldr	r0, [pc, #648]	; (12694 <process_event+0x2cc>)
   1240a:	f01a f832 	bl	2c472 <printk>
   1240e:	2184      	movs	r1, #132	; 0x84
   12410:	489d      	ldr	r0, [pc, #628]	; (12688 <process_event+0x2c0>)
   12412:	f01a fa4b 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12416:	9b01      	ldr	r3, [sp, #4]
   12418:	f383 8811 	msr	BASEPRI, r3
   1241c:	f3bf 8f6f 	isb	sy
}
   12420:	b003      	add	sp, #12
   12422:	ecbd 8b02 	vpop	{d8}
   12426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1242a:	4f9b      	ldr	r7, [pc, #620]	; (12698 <process_event+0x2d0>)
   1242c:	f8df 8260 	ldr.w	r8, [pc, #608]	; 12690 <process_event+0x2c8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12430:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   12434:	2902      	cmp	r1, #2
   12436:	d106      	bne.n	12446 <process_event+0x7e>
			evt = process_recheck(mgr);
   12438:	4620      	mov	r0, r4
   1243a:	f01a f834 	bl	2c4a6 <process_recheck>
		if (evt == EVT_NOP) {
   1243e:	2800      	cmp	r0, #0
   12440:	d0d6      	beq.n	123f0 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   12442:	2801      	cmp	r0, #1
   12444:	d16a      	bne.n	1251c <process_event+0x154>
			res = mgr->last_res;
   12446:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1244a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1244c:	f1bb 0f00 	cmp.w	fp, #0
   12450:	da1c      	bge.n	1248c <process_event+0xc4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12452:	2600      	movs	r6, #0
		*clients = mgr->clients;
   12454:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12456:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1245a:	e9c4 6600 	strd	r6, r6, [r4]
   1245e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12462:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   12464:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12466:	8ba3      	ldrh	r3, [r4, #28]
   12468:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1246c:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1246e:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   12472:	d003      	beq.n	1247c <process_event+0xb4>
		if (do_monitors
   12474:	68a2      	ldr	r2, [r4, #8]
   12476:	2a00      	cmp	r2, #0
   12478:	f040 811e 	bne.w	126b8 <process_event+0x2f0>
		    || !sys_slist_is_empty(&clients)
   1247c:	b91d      	cbnz	r5, 12486 <process_event+0xbe>
		    || (transit != NULL)) {
   1247e:	9a00      	ldr	r2, [sp, #0]
   12480:	2a00      	cmp	r2, #0
   12482:	f000 8164 	beq.w	1274e <process_event+0x386>
   12486:	f04f 0900 	mov.w	r9, #0
   1248a:	e117      	b.n	126bc <process_event+0x2f4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1248c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12490:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12492:	2901      	cmp	r1, #1
   12494:	d823      	bhi.n	124de <process_event+0x116>
	list->head = NULL;
   12496:	2100      	movs	r1, #0
   12498:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   1249c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1249e:	6825      	ldr	r5, [r4, #0]
   124a0:	b29b      	uxth	r3, r3
	list->tail = NULL;
   124a2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   124a6:	d10c      	bne.n	124c2 <process_event+0xfa>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   124a8:	428d      	cmp	r5, r1
   124aa:	462a      	mov	r2, r5
   124ac:	bf38      	it	cc
   124ae:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   124b0:	b12a      	cbz	r2, 124be <process_event+0xf6>
				mgr->refs += 1U;
   124b2:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   124b4:	6812      	ldr	r2, [r2, #0]
   124b6:	3101      	adds	r1, #1
   124b8:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   124ba:	2a00      	cmp	r2, #0
   124bc:	d1f8      	bne.n	124b0 <process_event+0xe8>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124be:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   124c2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   124c4:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   124c6:	f019 ffee 	bl	2c4a6 <process_recheck>
   124ca:	2800      	cmp	r0, #0
   124cc:	f000 80d7 	beq.w	1267e <process_event+0x2b6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   124d0:	8ba3      	ldrh	r3, [r4, #28]
   124d2:	f043 0320 	orr.w	r3, r3, #32
   124d6:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   124d8:	2300      	movs	r3, #0
   124da:	9300      	str	r3, [sp, #0]
   124dc:	e7c3      	b.n	12466 <process_event+0x9e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   124de:	2a04      	cmp	r2, #4
   124e0:	d10f      	bne.n	12502 <process_event+0x13a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124e2:	f023 0307 	bic.w	r3, r3, #7
   124e6:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   124e8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   124ea:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   124ec:	f019 ffdb 	bl	2c4a6 <process_recheck>
   124f0:	2800      	cmp	r0, #0
   124f2:	f000 80c6 	beq.w	12682 <process_event+0x2ba>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   124f6:	f042 0220 	orr.w	r2, r2, #32
   124fa:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   124fc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   124fe:	9500      	str	r5, [sp, #0]
   12500:	e7b1      	b.n	12466 <process_event+0x9e>
		__ASSERT_NO_MSG(false);
   12502:	4640      	mov	r0, r8
   12504:	f240 1319 	movw	r3, #281	; 0x119
   12508:	463a      	mov	r2, r7
   1250a:	4964      	ldr	r1, [pc, #400]	; (1269c <process_event+0x2d4>)
   1250c:	f019 ffb1 	bl	2c472 <printk>
   12510:	f240 1119 	movw	r1, #281	; 0x119
   12514:	4638      	mov	r0, r7
   12516:	f01a f9c9 	bl	2c8ac <assert_post_action>
   1251a:	e7ef      	b.n	124fc <process_event+0x134>
		} else if (evt == EVT_START) {
   1251c:	2803      	cmp	r0, #3
   1251e:	d135      	bne.n	1258c <process_event+0x1c4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   12520:	f1b9 0f00 	cmp.w	r9, #0
   12524:	d00b      	beq.n	1253e <process_event+0x176>
   12526:	4640      	mov	r0, r8
   12528:	495d      	ldr	r1, [pc, #372]	; (126a0 <process_event+0x2d8>)
   1252a:	f44f 73aa 	mov.w	r3, #340	; 0x154
   1252e:	463a      	mov	r2, r7
   12530:	f019 ff9f 	bl	2c472 <printk>
   12534:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12538:	4638      	mov	r0, r7
   1253a:	f01a f9b7 	bl	2c8ac <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1253e:	6823      	ldr	r3, [r4, #0]
   12540:	b95b      	cbnz	r3, 1255a <process_event+0x192>
   12542:	4640      	mov	r0, r8
   12544:	4957      	ldr	r1, [pc, #348]	; (126a4 <process_event+0x2dc>)
   12546:	f240 1355 	movw	r3, #341	; 0x155
   1254a:	463a      	mov	r2, r7
   1254c:	f019 ff91 	bl	2c472 <printk>
   12550:	f240 1155 	movw	r1, #341	; 0x155
   12554:	4638      	mov	r0, r7
   12556:	f01a f9a9 	bl	2c8ac <assert_post_action>
			transit = mgr->transitions->start;
   1255a:	6923      	ldr	r3, [r4, #16]
   1255c:	681b      	ldr	r3, [r3, #0]
   1255e:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12560:	b95b      	cbnz	r3, 1257a <process_event+0x1b2>
   12562:	4640      	mov	r0, r8
   12564:	4950      	ldr	r1, [pc, #320]	; (126a8 <process_event+0x2e0>)
   12566:	f44f 73ac 	mov.w	r3, #344	; 0x158
   1256a:	463a      	mov	r2, r7
   1256c:	f019 ff81 	bl	2c472 <printk>
   12570:	f44f 71ac 	mov.w	r1, #344	; 0x158
   12574:	4638      	mov	r0, r7
   12576:	f01a f999 	bl	2c8ac <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1257a:	8ba3      	ldrh	r3, [r4, #28]
   1257c:	f023 0307 	bic.w	r3, r3, #7
   12580:	f043 0306 	orr.w	r3, r3, #6
}
   12584:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   12586:	83a3      	strh	r3, [r4, #28]
		res = 0;
   12588:	46ab      	mov	fp, r5
}
   1258a:	e76c      	b.n	12466 <process_event+0x9e>
		} else if (evt == EVT_STOP) {
   1258c:	2804      	cmp	r0, #4
   1258e:	d132      	bne.n	125f6 <process_event+0x22e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12590:	f1b9 0f02 	cmp.w	r9, #2
   12594:	d00b      	beq.n	125ae <process_event+0x1e6>
   12596:	4640      	mov	r0, r8
   12598:	4944      	ldr	r1, [pc, #272]	; (126ac <process_event+0x2e4>)
   1259a:	f240 135b 	movw	r3, #347	; 0x15b
   1259e:	463a      	mov	r2, r7
   125a0:	f019 ff67 	bl	2c472 <printk>
   125a4:	f240 115b 	movw	r1, #347	; 0x15b
   125a8:	4638      	mov	r0, r7
   125aa:	f01a f97f 	bl	2c8ac <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   125ae:	8be3      	ldrh	r3, [r4, #30]
   125b0:	b15b      	cbz	r3, 125ca <process_event+0x202>
   125b2:	4640      	mov	r0, r8
   125b4:	493e      	ldr	r1, [pc, #248]	; (126b0 <process_event+0x2e8>)
   125b6:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   125ba:	463a      	mov	r2, r7
   125bc:	f019 ff59 	bl	2c472 <printk>
   125c0:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   125c4:	4638      	mov	r0, r7
   125c6:	f01a f971 	bl	2c8ac <assert_post_action>
			transit = mgr->transitions->stop;
   125ca:	6923      	ldr	r3, [r4, #16]
   125cc:	685b      	ldr	r3, [r3, #4]
   125ce:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   125d0:	b95b      	cbnz	r3, 125ea <process_event+0x222>
   125d2:	4640      	mov	r0, r8
   125d4:	4934      	ldr	r1, [pc, #208]	; (126a8 <process_event+0x2e0>)
   125d6:	f240 135f 	movw	r3, #351	; 0x15f
   125da:	463a      	mov	r2, r7
   125dc:	f019 ff49 	bl	2c472 <printk>
   125e0:	f240 115f 	movw	r1, #351	; 0x15f
   125e4:	4638      	mov	r0, r7
   125e6:	f01a f961 	bl	2c8ac <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   125ea:	8ba3      	ldrh	r3, [r4, #28]
   125ec:	f023 0307 	bic.w	r3, r3, #7
   125f0:	f043 0304 	orr.w	r3, r3, #4
   125f4:	e7c6      	b.n	12584 <process_event+0x1bc>
		} else if (evt == EVT_RESET) {
   125f6:	2805      	cmp	r0, #5
   125f8:	d132      	bne.n	12660 <process_event+0x298>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   125fa:	f1b9 0f01 	cmp.w	r9, #1
   125fe:	d00b      	beq.n	12618 <process_event+0x250>
   12600:	4640      	mov	r0, r8
   12602:	492c      	ldr	r1, [pc, #176]	; (126b4 <process_event+0x2ec>)
   12604:	f44f 73b1 	mov.w	r3, #354	; 0x162
   12608:	463a      	mov	r2, r7
   1260a:	f019 ff32 	bl	2c472 <printk>
   1260e:	f44f 71b1 	mov.w	r1, #354	; 0x162
   12612:	4638      	mov	r0, r7
   12614:	f01a f94a 	bl	2c8ac <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   12618:	6823      	ldr	r3, [r4, #0]
   1261a:	b95b      	cbnz	r3, 12634 <process_event+0x26c>
   1261c:	4640      	mov	r0, r8
   1261e:	4921      	ldr	r1, [pc, #132]	; (126a4 <process_event+0x2dc>)
   12620:	f240 1363 	movw	r3, #355	; 0x163
   12624:	463a      	mov	r2, r7
   12626:	f019 ff24 	bl	2c472 <printk>
   1262a:	f240 1163 	movw	r1, #355	; 0x163
   1262e:	4638      	mov	r0, r7
   12630:	f01a f93c 	bl	2c8ac <assert_post_action>
			transit = mgr->transitions->reset;
   12634:	6923      	ldr	r3, [r4, #16]
   12636:	689b      	ldr	r3, [r3, #8]
   12638:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1263a:	b95b      	cbnz	r3, 12654 <process_event+0x28c>
   1263c:	4640      	mov	r0, r8
   1263e:	491a      	ldr	r1, [pc, #104]	; (126a8 <process_event+0x2e0>)
   12640:	f44f 73b3 	mov.w	r3, #358	; 0x166
   12644:	463a      	mov	r2, r7
   12646:	f019 ff14 	bl	2c472 <printk>
   1264a:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1264e:	4638      	mov	r0, r7
   12650:	f01a f92c 	bl	2c8ac <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12654:	8ba3      	ldrh	r3, [r4, #28]
   12656:	f023 0307 	bic.w	r3, r3, #7
   1265a:	f043 0305 	orr.w	r3, r3, #5
   1265e:	e791      	b.n	12584 <process_event+0x1bc>
			__ASSERT_NO_MSG(false);
   12660:	2500      	movs	r5, #0
   12662:	f240 1369 	movw	r3, #361	; 0x169
   12666:	463a      	mov	r2, r7
   12668:	4640      	mov	r0, r8
   1266a:	490c      	ldr	r1, [pc, #48]	; (1269c <process_event+0x2d4>)
   1266c:	f019 ff01 	bl	2c472 <printk>
   12670:	f240 1169 	movw	r1, #361	; 0x169
   12674:	4638      	mov	r0, r7
   12676:	f01a f919 	bl	2c8ac <assert_post_action>
		onoff_transition_fn transit = NULL;
   1267a:	9500      	str	r5, [sp, #0]
   1267c:	e784      	b.n	12588 <process_event+0x1c0>
   1267e:	9000      	str	r0, [sp, #0]
   12680:	e6f1      	b.n	12466 <process_event+0x9e>
   12682:	4605      	mov	r5, r0
   12684:	e73b      	b.n	124fe <process_event+0x136>
   12686:	bf00      	nop
   12688:	0003056a 	.word	0x0003056a
   1268c:	00030590 	.word	0x00030590
   12690:	0003049a 	.word	0x0003049a
   12694:	000305a7 	.word	0x000305a7
   12698:	000304c8 	.word	0x000304c8
   1269c:	00033086 	.word	0x00033086
   126a0:	000304ea 	.word	0x000304ea
   126a4:	000304f5 	.word	0x000304f5
   126a8:	00030518 	.word	0x00030518
   126ac:	0003052f 	.word	0x0003052f
   126b0:	00030545 	.word	0x00030545
   126b4:	00030554 	.word	0x00030554
				   && !sys_slist_is_empty(&mgr->monitors);
   126b8:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   126bc:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   126c0:	f104 0a14 	add.w	sl, r4, #20
   126c4:	4650      	mov	r0, sl
			mgr->flags = flags;
   126c6:	83a3      	strh	r3, [r4, #28]
   126c8:	f012 fb4a 	bl	24d60 <z_spin_unlock_valid>
   126cc:	b968      	cbnz	r0, 126ea <process_event+0x322>
   126ce:	2384      	movs	r3, #132	; 0x84
   126d0:	4640      	mov	r0, r8
   126d2:	4a3a      	ldr	r2, [pc, #232]	; (127bc <process_event+0x3f4>)
   126d4:	493a      	ldr	r1, [pc, #232]	; (127c0 <process_event+0x3f8>)
   126d6:	f019 fecc 	bl	2c472 <printk>
   126da:	4651      	mov	r1, sl
   126dc:	4839      	ldr	r0, [pc, #228]	; (127c4 <process_event+0x3fc>)
   126de:	f019 fec8 	bl	2c472 <printk>
   126e2:	2184      	movs	r1, #132	; 0x84
   126e4:	4835      	ldr	r0, [pc, #212]	; (127bc <process_event+0x3f4>)
   126e6:	f01a f8e1 	bl	2c8ac <assert_post_action>
   126ea:	9b01      	ldr	r3, [sp, #4]
   126ec:	f383 8811 	msr	BASEPRI, r3
   126f0:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   126f4:	f1b9 0f00 	cmp.w	r9, #0
   126f8:	d138      	bne.n	1276c <process_event+0x3a4>
	while (!sys_slist_is_empty(list)) {
   126fa:	2d00      	cmp	r5, #0
   126fc:	d14c      	bne.n	12798 <process_event+0x3d0>
			if (transit != NULL) {
   126fe:	9b00      	ldr	r3, [sp, #0]
   12700:	b113      	cbz	r3, 12708 <process_event+0x340>
				transit(mgr, transition_complete);
   12702:	4620      	mov	r0, r4
   12704:	4930      	ldr	r1, [pc, #192]	; (127c8 <process_event+0x400>)
   12706:	4798      	blx	r3
	__asm__ volatile(
   12708:	f04f 0320 	mov.w	r3, #32
   1270c:	f3ef 8b11 	mrs	fp, BASEPRI
   12710:	f383 8811 	msr	BASEPRI, r3
   12714:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12718:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   1271a:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1271e:	f012 fb11 	bl	24d44 <z_spin_lock_valid>
   12722:	b968      	cbnz	r0, 12740 <process_event+0x378>
   12724:	235c      	movs	r3, #92	; 0x5c
   12726:	4640      	mov	r0, r8
   12728:	4a24      	ldr	r2, [pc, #144]	; (127bc <process_event+0x3f4>)
   1272a:	4928      	ldr	r1, [pc, #160]	; (127cc <process_event+0x404>)
   1272c:	f019 fea1 	bl	2c472 <printk>
   12730:	4651      	mov	r1, sl
   12732:	4827      	ldr	r0, [pc, #156]	; (127d0 <process_event+0x408>)
   12734:	f019 fe9d 	bl	2c472 <printk>
   12738:	215c      	movs	r1, #92	; 0x5c
   1273a:	4820      	ldr	r0, [pc, #128]	; (127bc <process_event+0x3f4>)
   1273c:	f01a f8b6 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   12740:	4650      	mov	r0, sl
   12742:	f012 fb1d 	bl	24d80 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12746:	8ba3      	ldrh	r3, [r4, #28]
   12748:	f023 0308 	bic.w	r3, r3, #8
   1274c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1274e:	8ba3      	ldrh	r3, [r4, #28]
   12750:	06da      	lsls	r2, r3, #27
   12752:	d52a      	bpl.n	127aa <process_event+0x3e2>
			evt = EVT_COMPLETE;
   12754:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12756:	f023 0310 	bic.w	r3, r3, #16
   1275a:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1275c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   12760:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   12764:	2900      	cmp	r1, #0
   12766:	f47f ae65 	bne.w	12434 <process_event+0x6c>
out:
   1276a:	e641      	b.n	123f0 <process_event+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1276c:	68a1      	ldr	r1, [r4, #8]
   1276e:	2900      	cmp	r1, #0
   12770:	d0c3      	beq.n	126fa <process_event+0x332>
	return node->next;
   12772:	680b      	ldr	r3, [r1, #0]
   12774:	2b00      	cmp	r3, #0
   12776:	bf38      	it	cc
   12778:	2300      	movcc	r3, #0
   1277a:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   1277c:	684b      	ldr	r3, [r1, #4]
   1277e:	ee18 2a10 	vmov	r2, s16
   12782:	461e      	mov	r6, r3
   12784:	4620      	mov	r0, r4
   12786:	465b      	mov	r3, fp
   12788:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1278a:	f1b9 0f00 	cmp.w	r9, #0
   1278e:	d0b4      	beq.n	126fa <process_event+0x332>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12790:	4649      	mov	r1, r9
   12792:	f8d9 3000 	ldr.w	r3, [r9]
   12796:	e7ed      	b.n	12774 <process_event+0x3ac>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12798:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1279a:	465b      	mov	r3, fp
   1279c:	ee18 2a10 	vmov	r2, s16
   127a0:	4620      	mov	r0, r4
   127a2:	682d      	ldr	r5, [r5, #0]
   127a4:	f019 fe9b 	bl	2c4de <notify_one>
   127a8:	e7a7      	b.n	126fa <process_event+0x332>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   127aa:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   127ae:	bf1e      	ittt	ne
   127b0:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   127b4:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   127b6:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   127b8:	e7d0      	b.n	1275c <process_event+0x394>
   127ba:	bf00      	nop
   127bc:	0003056a 	.word	0x0003056a
   127c0:	00030590 	.word	0x00030590
   127c4:	000305a7 	.word	0x000305a7
   127c8:	000127d5 	.word	0x000127d5
   127cc:	000305bc 	.word	0x000305bc
   127d0:	000305d1 	.word	0x000305d1

000127d4 <transition_complete>:
{
   127d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127d6:	4604      	mov	r4, r0
   127d8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   127da:	f100 0614 	add.w	r6, r0, #20
   127de:	f04f 0320 	mov.w	r3, #32
   127e2:	f3ef 8711 	mrs	r7, BASEPRI
   127e6:	f383 8811 	msr	BASEPRI, r3
   127ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   127ee:	4630      	mov	r0, r6
   127f0:	f012 faa8 	bl	24d44 <z_spin_lock_valid>
   127f4:	b968      	cbnz	r0, 12812 <transition_complete+0x3e>
   127f6:	235c      	movs	r3, #92	; 0x5c
   127f8:	4a0b      	ldr	r2, [pc, #44]	; (12828 <transition_complete+0x54>)
   127fa:	490c      	ldr	r1, [pc, #48]	; (1282c <transition_complete+0x58>)
   127fc:	480c      	ldr	r0, [pc, #48]	; (12830 <transition_complete+0x5c>)
   127fe:	f019 fe38 	bl	2c472 <printk>
   12802:	4631      	mov	r1, r6
   12804:	480b      	ldr	r0, [pc, #44]	; (12834 <transition_complete+0x60>)
   12806:	f019 fe34 	bl	2c472 <printk>
   1280a:	215c      	movs	r1, #92	; 0x5c
   1280c:	4806      	ldr	r0, [pc, #24]	; (12828 <transition_complete+0x54>)
   1280e:	f01a f84d 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   12812:	4630      	mov	r0, r6
   12814:	f012 fab4 	bl	24d80 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   12818:	463a      	mov	r2, r7
   1281a:	4620      	mov	r0, r4
	mgr->last_res = res;
   1281c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1281e:	2101      	movs	r1, #1
}
   12820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   12824:	f7ff bdd0 	b.w	123c8 <process_event>
   12828:	0003056a 	.word	0x0003056a
   1282c:	000305bc 	.word	0x000305bc
   12830:	0003049a 	.word	0x0003049a
   12834:	000305d1 	.word	0x000305d1

00012838 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1283c:	4604      	mov	r4, r0
   1283e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12840:	f019 fe63 	bl	2c50a <validate_args>

	if (rv < 0) {
   12844:	1e05      	subs	r5, r0, #0
   12846:	db5e      	blt.n	12906 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12848:	f104 0914 	add.w	r9, r4, #20
   1284c:	f04f 0320 	mov.w	r3, #32
   12850:	f3ef 8a11 	mrs	sl, BASEPRI
   12854:	f383 8811 	msr	BASEPRI, r3
   12858:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1285c:	4648      	mov	r0, r9
   1285e:	f012 fa71 	bl	24d44 <z_spin_lock_valid>
   12862:	b968      	cbnz	r0, 12880 <onoff_request+0x48>
   12864:	235c      	movs	r3, #92	; 0x5c
   12866:	4a38      	ldr	r2, [pc, #224]	; (12948 <onoff_request+0x110>)
   12868:	4938      	ldr	r1, [pc, #224]	; (1294c <onoff_request+0x114>)
   1286a:	4839      	ldr	r0, [pc, #228]	; (12950 <onoff_request+0x118>)
   1286c:	f019 fe01 	bl	2c472 <printk>
   12870:	4649      	mov	r1, r9
   12872:	4838      	ldr	r0, [pc, #224]	; (12954 <onoff_request+0x11c>)
   12874:	f019 fdfd 	bl	2c472 <printk>
   12878:	215c      	movs	r1, #92	; 0x5c
   1287a:	4833      	ldr	r0, [pc, #204]	; (12948 <onoff_request+0x110>)
   1287c:	f01a f816 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   12880:	4648      	mov	r0, r9
   12882:	f012 fa7d 	bl	24d80 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   12886:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1288a:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1288c:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1288e:	428b      	cmp	r3, r1
   12890:	f002 0607 	and.w	r6, r2, #7
   12894:	d050      	beq.n	12938 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   12896:	2e02      	cmp	r6, #2
   12898:	d124      	bne.n	128e4 <onoff_request+0xac>
	rv = state;
   1289a:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   1289c:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   128a0:	3301      	adds	r3, #1
   128a2:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   128a4:	4648      	mov	r0, r9
   128a6:	f012 fa5b 	bl	24d60 <z_spin_unlock_valid>
   128aa:	b968      	cbnz	r0, 128c8 <onoff_request+0x90>
   128ac:	2384      	movs	r3, #132	; 0x84
   128ae:	4a26      	ldr	r2, [pc, #152]	; (12948 <onoff_request+0x110>)
   128b0:	4929      	ldr	r1, [pc, #164]	; (12958 <onoff_request+0x120>)
   128b2:	4827      	ldr	r0, [pc, #156]	; (12950 <onoff_request+0x118>)
   128b4:	f019 fddd 	bl	2c472 <printk>
   128b8:	4649      	mov	r1, r9
   128ba:	4828      	ldr	r0, [pc, #160]	; (1295c <onoff_request+0x124>)
   128bc:	f019 fdd9 	bl	2c472 <printk>
   128c0:	2184      	movs	r1, #132	; 0x84
   128c2:	4821      	ldr	r0, [pc, #132]	; (12948 <onoff_request+0x110>)
   128c4:	f019 fff2 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   128c8:	f38a 8811 	msr	BASEPRI, sl
   128cc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   128d0:	f1b8 0f00 	cmp.w	r8, #0
   128d4:	d017      	beq.n	12906 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   128d6:	2300      	movs	r3, #0
   128d8:	4632      	mov	r2, r6
   128da:	4639      	mov	r1, r7
   128dc:	4620      	mov	r0, r4
   128de:	f019 fdfe 	bl	2c4de <notify_one>
   128e2:	e010      	b.n	12906 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   128e4:	0793      	lsls	r3, r2, #30
   128e6:	d001      	beq.n	128ec <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   128e8:	2e06      	cmp	r6, #6
   128ea:	d10f      	bne.n	1290c <onoff_request+0xd4>
	parent->next = child;
   128ec:	2300      	movs	r3, #0
   128ee:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   128f0:	6863      	ldr	r3, [r4, #4]
   128f2:	b9f3      	cbnz	r3, 12932 <onoff_request+0xfa>
	list->head = node;
   128f4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   128f8:	4635      	mov	r5, r6
   128fa:	b9fe      	cbnz	r6, 1293c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   128fc:	4652      	mov	r2, sl
   128fe:	2102      	movs	r1, #2
   12900:	4620      	mov	r0, r4
   12902:	f7ff fd61 	bl	123c8 <process_event>
		}
	}

	return rv;
}
   12906:	4628      	mov	r0, r5
   12908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   1290c:	2e05      	cmp	r6, #5
   1290e:	d018      	beq.n	12942 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   12910:	2e01      	cmp	r6, #1
   12912:	d00b      	beq.n	1292c <onoff_request+0xf4>
   12914:	4912      	ldr	r1, [pc, #72]	; (12960 <onoff_request+0x128>)
   12916:	480e      	ldr	r0, [pc, #56]	; (12950 <onoff_request+0x118>)
   12918:	f240 13c5 	movw	r3, #453	; 0x1c5
   1291c:	4a11      	ldr	r2, [pc, #68]	; (12964 <onoff_request+0x12c>)
   1291e:	f019 fda8 	bl	2c472 <printk>
   12922:	f240 11c5 	movw	r1, #453	; 0x1c5
   12926:	480f      	ldr	r0, [pc, #60]	; (12964 <onoff_request+0x12c>)
   12928:	f019 ffc0 	bl	2c8ac <assert_post_action>
		rv = -EIO;
   1292c:	f06f 0504 	mvn.w	r5, #4
   12930:	e004      	b.n	1293c <onoff_request+0x104>
	parent->next = child;
   12932:	601f      	str	r7, [r3, #0]
	list->tail = node;
   12934:	6067      	str	r7, [r4, #4]
}
   12936:	e7df      	b.n	128f8 <onoff_request+0xc0>
		rv = -EAGAIN;
   12938:	f06f 050a 	mvn.w	r5, #10
   1293c:	f04f 0800 	mov.w	r8, #0
   12940:	e7b0      	b.n	128a4 <onoff_request+0x6c>
		rv = -ENOTSUP;
   12942:	f06f 0585 	mvn.w	r5, #133	; 0x85
   12946:	e7f9      	b.n	1293c <onoff_request+0x104>
   12948:	0003056a 	.word	0x0003056a
   1294c:	000305bc 	.word	0x000305bc
   12950:	0003049a 	.word	0x0003049a
   12954:	000305d1 	.word	0x000305d1
   12958:	00030590 	.word	0x00030590
   1295c:	000305a7 	.word	0x000305a7
   12960:	00030554 	.word	0x00030554
   12964:	000304c8 	.word	0x000304c8

00012968 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   12968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1296c:	f240 746c 	movw	r4, #1900	; 0x76c
   12970:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
   12972:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   12974:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   12976:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   1297a:	1e53      	subs	r3, r2, #1
   1297c:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1297e:	6943      	ldr	r3, [r0, #20]
{
   12980:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   12982:	18e4      	adds	r4, r4, r3
   12984:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   12988:	f1b9 0f02 	cmp.w	r9, #2
   1298c:	bf8c      	ite	hi
   1298e:	2300      	movhi	r3, #0
   12990:	2301      	movls	r3, #1
   12992:	1ae4      	subs	r4, r4, r3
   12994:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   12998:	2c00      	cmp	r4, #0
   1299a:	f175 0300 	sbcs.w	r3, r5, #0
   1299e:	da54      	bge.n	12a4a <timeutil_timegm64+0xe2>
   129a0:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   129a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   129a8:	2300      	movs	r3, #0
   129aa:	1820      	adds	r0, r4, r0
   129ac:	f145 31ff 	adc.w	r1, r5, #4294967295
   129b0:	f7f9 ff02 	bl	c7b8 <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   129b4:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   129b8:	4a27      	ldr	r2, [pc, #156]	; (12a58 <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   129ba:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
   129bc:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   129c0:	e9d8 0400 	ldrd	r0, r4, [r8]
   129c4:	f8d8 8008 	ldr.w	r8, [r8, #8]
   129c8:	17e5      	asrs	r5, r4, #31
   129ca:	fbcc 4508 	smlal	r4, r5, ip, r8
   129ce:	fba4 ab0c 	umull	sl, fp, r4, ip
   129d2:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   129d6:	f1b9 0f02 	cmp.w	r9, #2
   129da:	bf8c      	ite	hi
   129dc:	f06f 0e02 	mvnhi.w	lr, #2
   129e0:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   129e4:	eb1a 0a00 	adds.w	sl, sl, r0
   129e8:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   129ec:	f240 106d 	movw	r0, #365	; 0x16d
   129f0:	0894      	lsrs	r4, r2, #2
   129f2:	fb00 4002 	mla	r0, r0, r2, r4
   129f6:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   129f8:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   129fa:	4420      	add	r0, r4
   129fc:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   129fe:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12a02:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12a06:	2205      	movs	r2, #5
   12a08:	fb0e fe09 	mul.w	lr, lr, r9
   12a0c:	f10e 0e02 	add.w	lr, lr, #2
   12a10:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12a14:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
   12a16:	4811      	ldr	r0, [pc, #68]	; (12a5c <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12a18:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   12a1a:	fba3 2300 	umull	r2, r3, r3, r0
   12a1e:	fb00 3301 	mla	r3, r0, r1, r3
   12a22:	490f      	ldr	r1, [pc, #60]	; (12a60 <timeutil_timegm64+0xf8>)
   12a24:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
   12a26:	490f      	ldr	r1, [pc, #60]	; (12a64 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   12a28:	f143 37ff 	adc.w	r7, r3, #4294967295
   12a2c:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   12a30:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   12a34:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   12a38:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
   12a3c:	eb12 000a 	adds.w	r0, r2, sl
   12a40:	eb43 010b 	adc.w	r1, r3, fp
   12a44:	b003      	add	sp, #12
   12a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   12a4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   12a4e:	2300      	movs	r3, #0
   12a50:	4620      	mov	r0, r4
   12a52:	4629      	mov	r1, r5
   12a54:	e7ac      	b.n	129b0 <timeutil_timegm64+0x48>
   12a56:	bf00      	nop
   12a58:	fffffe70 	.word	0xfffffe70
   12a5c:	00023ab1 	.word	0x00023ab1
   12a60:	fff50594 	.word	0xfff50594
   12a64:	00015180 	.word	0x00015180

00012a68 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   12a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12a6c:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   12a6e:	4e17      	ldr	r6, [pc, #92]	; (12acc <z_work_q_main+0x64>)
   12a70:	f8df 8060 	ldr.w	r8, [pc, #96]	; 12ad4 <z_work_q_main+0x6c>
   12a74:	f8df 9060 	ldr.w	r9, [pc, #96]	; 12ad8 <z_work_q_main+0x70>
	return z_impl_k_queue_get(queue, timeout);
   12a78:	f04f 32ff 	mov.w	r2, #4294967295
   12a7c:	f04f 33ff 	mov.w	r3, #4294967295
   12a80:	4628      	mov	r0, r5
   12a82:	f010 fd1f 	bl	234c4 <z_impl_k_queue_get>
		if (work == NULL) {
   12a86:	4604      	mov	r4, r0
   12a88:	2800      	cmp	r0, #0
   12a8a:	d0f5      	beq.n	12a78 <z_work_q_main+0x10>
		handler = work->handler;
   12a8c:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   12a8e:	b967      	cbnz	r7, 12aaa <z_work_q_main+0x42>
   12a90:	4641      	mov	r1, r8
   12a92:	231c      	movs	r3, #28
   12a94:	4632      	mov	r2, r6
   12a96:	4648      	mov	r0, r9
   12a98:	f019 fceb 	bl	2c472 <printk>
   12a9c:	480c      	ldr	r0, [pc, #48]	; (12ad0 <z_work_q_main+0x68>)
   12a9e:	f019 fce8 	bl	2c472 <printk>
   12aa2:	211c      	movs	r1, #28
   12aa4:	4630      	mov	r0, r6
   12aa6:	f019 ff01 	bl	2c8ac <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12aaa:	f104 0308 	add.w	r3, r4, #8
   12aae:	e8d3 2fef 	ldaex	r2, [r3]
   12ab2:	f022 0101 	bic.w	r1, r2, #1
   12ab6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12aba:	2800      	cmp	r0, #0
   12abc:	d1f7      	bne.n	12aae <z_work_q_main+0x46>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   12abe:	07d3      	lsls	r3, r2, #31
   12ac0:	d501      	bpl.n	12ac6 <z_work_q_main+0x5e>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   12ac2:	4620      	mov	r0, r4
   12ac4:	47b8      	blx	r7
	z_impl_k_yield();
   12ac6:	f011 fd99 	bl	245fc <z_impl_k_yield>
   12aca:	e7d5      	b.n	12a78 <z_work_q_main+0x10>
   12acc:	000305e9 	.word	0x000305e9
   12ad0:	00030623 	.word	0x00030623
   12ad4:	0003060c 	.word	0x0003060c
   12ad8:	0003049a 	.word	0x0003049a

00012adc <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   12ade:	460e      	mov	r6, r1
   12ae0:	2900      	cmp	r1, #0
   12ae2:	f000 8083 	beq.w	12bec <sys_heap_free+0x110>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12ae6:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12ae8:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   12aea:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12aec:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   12aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12af2:	bf2c      	ite	cs
   12af4:	2408      	movcs	r4, #8
   12af6:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12af8:	1b0c      	subs	r4, r1, r4
   12afa:	1b64      	subs	r4, r4, r5
   12afc:	bf48      	it	mi
   12afe:	3407      	addmi	r4, #7
   12b00:	10e4      	asrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b02:	4621      	mov	r1, r4
   12b04:	f019 fd41 	bl	2c58a <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12b08:	07c3      	lsls	r3, r0, #31
   12b0a:	d40d      	bmi.n	12b28 <sys_heap_free+0x4c>
   12b0c:	2399      	movs	r3, #153	; 0x99
   12b0e:	4a38      	ldr	r2, [pc, #224]	; (12bf0 <sys_heap_free+0x114>)
   12b10:	4938      	ldr	r1, [pc, #224]	; (12bf4 <sys_heap_free+0x118>)
   12b12:	4839      	ldr	r0, [pc, #228]	; (12bf8 <sys_heap_free+0x11c>)
   12b14:	f019 fcad 	bl	2c472 <printk>
   12b18:	4631      	mov	r1, r6
   12b1a:	4838      	ldr	r0, [pc, #224]	; (12bfc <sys_heap_free+0x120>)
   12b1c:	f019 fca9 	bl	2c472 <printk>
   12b20:	2199      	movs	r1, #153	; 0x99
   12b22:	4833      	ldr	r0, [pc, #204]	; (12bf0 <sys_heap_free+0x114>)
   12b24:	f019 fec2 	bl	2c8ac <assert_post_action>
	return c + chunk_size(h, c);
   12b28:	4621      	mov	r1, r4
   12b2a:	4628      	mov	r0, r5
   12b2c:	f019 fd43 	bl	2c5b6 <chunk_size>
   12b30:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   12b32:	2200      	movs	r2, #0
   12b34:	4639      	mov	r1, r7
   12b36:	4628      	mov	r0, r5
   12b38:	f019 fd27 	bl	2c58a <chunk_field>
   12b3c:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12b3e:	4284      	cmp	r4, r0
   12b40:	d00d      	beq.n	12b5e <sys_heap_free+0x82>
   12b42:	23a1      	movs	r3, #161	; 0xa1
   12b44:	4a2a      	ldr	r2, [pc, #168]	; (12bf0 <sys_heap_free+0x114>)
   12b46:	492e      	ldr	r1, [pc, #184]	; (12c00 <sys_heap_free+0x124>)
   12b48:	482b      	ldr	r0, [pc, #172]	; (12bf8 <sys_heap_free+0x11c>)
   12b4a:	f019 fc92 	bl	2c472 <printk>
   12b4e:	4631      	mov	r1, r6
   12b50:	482c      	ldr	r0, [pc, #176]	; (12c04 <sys_heap_free+0x128>)
   12b52:	f019 fc8e 	bl	2c472 <printk>
   12b56:	21a1      	movs	r1, #161	; 0xa1
   12b58:	4825      	ldr	r0, [pc, #148]	; (12bf0 <sys_heap_free+0x114>)
   12b5a:	f019 fea7 	bl	2c8ac <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   12b5e:	2200      	movs	r2, #0
   12b60:	4621      	mov	r1, r4
   12b62:	4628      	mov	r0, r5
   12b64:	f019 fd2d 	bl	2c5c2 <set_chunk_used>
	return c + chunk_size(h, c);
   12b68:	4621      	mov	r1, r4
   12b6a:	f019 fd24 	bl	2c5b6 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b6e:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   12b70:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b72:	4628      	mov	r0, r5
   12b74:	9101      	str	r1, [sp, #4]
   12b76:	f019 fd08 	bl	2c58a <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   12b7a:	f010 0f01 	tst.w	r0, #1
   12b7e:	9901      	ldr	r1, [sp, #4]
   12b80:	d10b      	bne.n	12b9a <sys_heap_free+0xbe>
		free_list_remove(h, right_chunk(h, c));
   12b82:	4628      	mov	r0, r5
   12b84:	f019 fdc4 	bl	2c710 <free_list_remove>
	return c + chunk_size(h, c);
   12b88:	4621      	mov	r1, r4
   12b8a:	4628      	mov	r0, r5
   12b8c:	f019 fd13 	bl	2c5b6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   12b90:	4621      	mov	r1, r4
   12b92:	1822      	adds	r2, r4, r0
   12b94:	4628      	mov	r0, r5
   12b96:	f019 fd46 	bl	2c626 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   12b9a:	2200      	movs	r2, #0
   12b9c:	4621      	mov	r1, r4
   12b9e:	4628      	mov	r0, r5
   12ba0:	f019 fcf3 	bl	2c58a <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12ba4:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   12ba6:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12ba8:	4628      	mov	r0, r5
   12baa:	9101      	str	r1, [sp, #4]
   12bac:	f019 fced 	bl	2c58a <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   12bb0:	f010 0601 	ands.w	r6, r0, #1
   12bb4:	9901      	ldr	r1, [sp, #4]
   12bb6:	d112      	bne.n	12bde <sys_heap_free+0x102>
		free_list_remove(h, left_chunk(h, c));
   12bb8:	4628      	mov	r0, r5
   12bba:	f019 fda9 	bl	2c710 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   12bbe:	4621      	mov	r1, r4
   12bc0:	4632      	mov	r2, r6
   12bc2:	4628      	mov	r0, r5
   12bc4:	f019 fce1 	bl	2c58a <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   12bc8:	4622      	mov	r2, r4
   12bca:	1a21      	subs	r1, r4, r0
   12bcc:	4628      	mov	r0, r5
   12bce:	f019 fd2a 	bl	2c626 <merge_chunks>
   12bd2:	4621      	mov	r1, r4
   12bd4:	4632      	mov	r2, r6
   12bd6:	4628      	mov	r0, r5
   12bd8:	f019 fcd7 	bl	2c58a <chunk_field>
   12bdc:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   12bde:	4621      	mov	r1, r4
   12be0:	4628      	mov	r0, r5
	free_chunk(h, c);
}
   12be2:	b003      	add	sp, #12
   12be4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	free_list_add(h, c);
   12be8:	f019 bdec 	b.w	2c7c4 <free_list_add>
}
   12bec:	b003      	add	sp, #12
   12bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bf0:	0003063e 	.word	0x0003063e
   12bf4:	0003065f 	.word	0x0003065f
   12bf8:	0003049a 	.word	0x0003049a
   12bfc:	00030670 	.word	0x00030670
   12c00:	000306a8 	.word	0x000306a8
   12c04:	000306ce 	.word	0x000306ce

00012c08 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   12c08:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   12c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c0e:	4607      	mov	r7, r0
   12c10:	460d      	mov	r5, r1
   12c12:	4616      	mov	r6, r2
   12c14:	d212      	bcs.n	12c3c <sys_heap_init+0x34>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12c16:	2a04      	cmp	r2, #4
   12c18:	d80e      	bhi.n	12c38 <sys_heap_init+0x30>
   12c1a:	4943      	ldr	r1, [pc, #268]	; (12d28 <sys_heap_init+0x120>)
   12c1c:	f44f 7397 	mov.w	r3, #302	; 0x12e
   12c20:	4a42      	ldr	r2, [pc, #264]	; (12d2c <sys_heap_init+0x124>)
   12c22:	4843      	ldr	r0, [pc, #268]	; (12d30 <sys_heap_init+0x128>)
   12c24:	f019 fc25 	bl	2c472 <printk>
   12c28:	4842      	ldr	r0, [pc, #264]	; (12d34 <sys_heap_init+0x12c>)
   12c2a:	f019 fc22 	bl	2c472 <printk>
   12c2e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   12c32:	483e      	ldr	r0, [pc, #248]	; (12d2c <sys_heap_init+0x124>)
   12c34:	f019 fe3a 	bl	2c8ac <assert_post_action>
   12c38:	2204      	movs	r2, #4
   12c3a:	e000      	b.n	12c3e <sys_heap_init+0x36>
   12c3c:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   12c3e:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12c40:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12c42:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12c44:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12c48:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12c4c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12c4e:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12c50:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12c54:	d80e      	bhi.n	12c74 <sys_heap_init+0x6c>
   12c56:	4938      	ldr	r1, [pc, #224]	; (12d38 <sys_heap_init+0x130>)
   12c58:	f240 1337 	movw	r3, #311	; 0x137
   12c5c:	4a33      	ldr	r2, [pc, #204]	; (12d2c <sys_heap_init+0x124>)
   12c5e:	4834      	ldr	r0, [pc, #208]	; (12d30 <sys_heap_init+0x128>)
   12c60:	f019 fc07 	bl	2c472 <printk>
   12c64:	4833      	ldr	r0, [pc, #204]	; (12d34 <sys_heap_init+0x12c>)
   12c66:	f019 fc04 	bl	2c472 <printk>
   12c6a:	f240 1137 	movw	r1, #311	; 0x137
   12c6e:	482f      	ldr	r0, [pc, #188]	; (12d2c <sys_heap_init+0x124>)
   12c70:	f019 fe1c 	bl	2c8ac <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   12c74:	2200      	movs	r2, #0
   12c76:	2300      	movs	r3, #0
	heap->heap = h;
   12c78:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   12c7a:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   12c7e:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12c80:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   12c82:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12c84:	4620      	mov	r0, r4
	h->len = buf_sz;
   12c86:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12c88:	f019 fcc1 	bl	2c60e <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   12c8c:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12c8e:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12c90:	1c47      	adds	r7, r0, #1
   12c92:	4620      	mov	r0, r4
   12c94:	f019 fcb1 	bl	2c5fa <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12c98:	351b      	adds	r5, #27
   12c9a:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   12c9c:	4428      	add	r0, r5
   12c9e:	42b0      	cmp	r0, r6
   12ca0:	d30e      	bcc.n	12cc0 <sys_heap_init+0xb8>
   12ca2:	4926      	ldr	r1, [pc, #152]	; (12d3c <sys_heap_init+0x134>)
   12ca4:	f240 1343 	movw	r3, #323	; 0x143
   12ca8:	4a20      	ldr	r2, [pc, #128]	; (12d2c <sys_heap_init+0x124>)
   12caa:	4821      	ldr	r0, [pc, #132]	; (12d30 <sys_heap_init+0x128>)
   12cac:	f019 fbe1 	bl	2c472 <printk>
   12cb0:	4820      	ldr	r0, [pc, #128]	; (12d34 <sys_heap_init+0x12c>)
   12cb2:	f019 fbde 	bl	2c472 <printk>
   12cb6:	f240 1143 	movw	r1, #323	; 0x143
   12cba:	481c      	ldr	r0, [pc, #112]	; (12d2c <sys_heap_init+0x124>)
   12cbc:	f019 fdf6 	bl	2c8ac <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   12cc0:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12cc2:	4619      	mov	r1, r3
   12cc4:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   12cc8:	42bb      	cmp	r3, r7
   12cca:	db29      	blt.n	12d20 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   12ccc:	462a      	mov	r2, r5
   12cce:	4620      	mov	r0, r4
   12cd0:	2100      	movs	r1, #0
   12cd2:	f019 fc8e 	bl	2c5f2 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   12cd6:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   12cd8:	4620      	mov	r0, r4
   12cda:	2201      	movs	r2, #1
   12cdc:	2100      	movs	r1, #0
   12cde:	f019 fc70 	bl	2c5c2 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   12ce2:	463a      	mov	r2, r7
   12ce4:	4629      	mov	r1, r5
   12ce6:	f019 fc84 	bl	2c5f2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   12cea:	462b      	mov	r3, r5
   12cec:	4629      	mov	r1, r5
   12cee:	4620      	mov	r0, r4
   12cf0:	2200      	movs	r2, #0
   12cf2:	f019 fc55 	bl	2c5a0 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   12cf6:	4631      	mov	r1, r6
   12cf8:	4620      	mov	r0, r4
   12cfa:	2200      	movs	r2, #0
   12cfc:	f019 fc79 	bl	2c5f2 <set_chunk_size>
   12d00:	463b      	mov	r3, r7
   12d02:	4631      	mov	r1, r6
   12d04:	4620      	mov	r0, r4
   12d06:	2200      	movs	r2, #0
   12d08:	f019 fc4a 	bl	2c5a0 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   12d0c:	4631      	mov	r1, r6
   12d0e:	4620      	mov	r0, r4
   12d10:	2201      	movs	r2, #1
   12d12:	f019 fc56 	bl	2c5c2 <set_chunk_used>

	free_list_add(h, chunk0_size);
   12d16:	4629      	mov	r1, r5
}
   12d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   12d1c:	f019 bd52 	b.w	2c7c4 <free_list_add>
		h->buckets[i].next = 0;
   12d20:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   12d24:	3301      	adds	r3, #1
   12d26:	e7cf      	b.n	12cc8 <sys_heap_init+0xc0>
   12d28:	0003070a 	.word	0x0003070a
   12d2c:	0003063e 	.word	0x0003063e
   12d30:	0003049a 	.word	0x0003049a
   12d34:	0003072b 	.word	0x0003072b
   12d38:	00030744 	.word	0x00030744
   12d3c:	0003076c 	.word	0x0003076c

00012d40 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   12d40:	f04f 0220 	mov.w	r2, #32
   12d44:	f3ef 8311 	mrs	r3, BASEPRI
   12d48:	f382 8811 	msr	BASEPRI, r2
   12d4c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12d50:	2101      	movs	r1, #1
   12d52:	4a04      	ldr	r2, [pc, #16]	; (12d64 <nordicsemi_nrf91_init+0x24>)
   12d54:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12d58:	f383 8811 	msr	BASEPRI, r3
   12d5c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12d60:	2000      	movs	r0, #0
   12d62:	4770      	bx	lr
   12d64:	40039000 	.word	0x40039000

00012d68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12d68:	b120      	cbz	r0, 12d74 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12d6a:	4b03      	ldr	r3, [pc, #12]	; (12d78 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12d6c:	0180      	lsls	r0, r0, #6
   12d6e:	f043 0301 	orr.w	r3, r3, #1
   12d72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12d74:	4770      	bx	lr
   12d76:	bf00      	nop
   12d78:	0002f140 	.word	0x0002f140

00012d7c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12d7c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12d7e:	2200      	movs	r2, #0
{
   12d80:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12d82:	490f      	ldr	r1, [pc, #60]	; (12dc0 <enable_logger+0x44>)
   12d84:	480f      	ldr	r0, [pc, #60]	; (12dc4 <enable_logger+0x48>)
   12d86:	f01b ff36 	bl	2ebf6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12d8a:	2200      	movs	r2, #0
   12d8c:	2300      	movs	r3, #0
   12d8e:	2400      	movs	r4, #0
   12d90:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12d94:	230e      	movs	r3, #14
   12d96:	4d0c      	ldr	r5, [pc, #48]	; (12dc8 <enable_logger+0x4c>)
   12d98:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12d9c:	f44f 7240 	mov.w	r2, #768	; 0x300
   12da0:	4628      	mov	r0, r5
   12da2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12da6:	4b09      	ldr	r3, [pc, #36]	; (12dcc <enable_logger+0x50>)
   12da8:	4909      	ldr	r1, [pc, #36]	; (12dd0 <enable_logger+0x54>)
   12daa:	9400      	str	r4, [sp, #0]
   12dac:	f011 feec 	bl	24b88 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12db0:	4908      	ldr	r1, [pc, #32]	; (12dd4 <enable_logger+0x58>)
   12db2:	4628      	mov	r0, r5
   12db4:	f01b fe87 	bl	2eac6 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12db8:	4620      	mov	r0, r4
   12dba:	b009      	add	sp, #36	; 0x24
   12dbc:	bd30      	pop	{r4, r5, pc}
   12dbe:	bf00      	nop
   12dc0:	00012dd9 	.word	0x00012dd9
   12dc4:	20020dc0 	.word	0x20020dc0
   12dc8:	20020df8 	.word	0x20020df8
   12dcc:	0001328d 	.word	0x0001328d
   12dd0:	20027438 	.word	0x20027438
   12dd4:	00030799 	.word	0x00030799

00012dd8 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   12dd8:	4801      	ldr	r0, [pc, #4]	; (12de0 <log_process_thread_timer_expiry_fn+0x8>)
   12dda:	f011 bd93 	b.w	24904 <z_impl_k_sem_give>
   12dde:	bf00      	nop
   12de0:	20020c54 	.word	0x20020c54

00012de4 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12de4:	2920      	cmp	r1, #32
{
   12de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12de8:	4605      	mov	r5, r0
   12dea:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12dec:	d909      	bls.n	12e02 <z_log_get_s_mask+0x1e>
   12dee:	4914      	ldr	r1, [pc, #80]	; (12e40 <z_log_get_s_mask+0x5c>)
   12df0:	4814      	ldr	r0, [pc, #80]	; (12e44 <z_log_get_s_mask+0x60>)
   12df2:	235b      	movs	r3, #91	; 0x5b
   12df4:	4a14      	ldr	r2, [pc, #80]	; (12e48 <z_log_get_s_mask+0x64>)
   12df6:	f019 fb3c 	bl	2c472 <printk>
   12dfa:	215b      	movs	r1, #91	; 0x5b
   12dfc:	4812      	ldr	r0, [pc, #72]	; (12e48 <z_log_get_s_mask+0x64>)
   12dfe:	f019 fd55 	bl	2c8ac <assert_post_action>
			arm = false;
   12e02:	2000      	movs	r0, #0
				mask |= BIT(arg);
   12e04:	2701      	movs	r7, #1
			arm = false;
   12e06:	4603      	mov	r3, r0
   12e08:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   12e0a:	4e10      	ldr	r6, [pc, #64]	; (12e4c <z_log_get_s_mask+0x68>)
	while ((curr = *str++) && arg < nargs) {
   12e0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   12e10:	b109      	cbz	r1, 12e16 <z_log_get_s_mask+0x32>
   12e12:	42a3      	cmp	r3, r4
   12e14:	d300      	bcc.n	12e18 <z_log_get_s_mask+0x34>
}
   12e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   12e18:	2925      	cmp	r1, #37	; 0x25
   12e1a:	d102      	bne.n	12e22 <z_log_get_s_mask+0x3e>
			arm = !arm;
   12e1c:	f082 0201 	eor.w	r2, r2, #1
   12e20:	e7f4      	b.n	12e0c <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   12e22:	2a00      	cmp	r2, #0
   12e24:	d0f2      	beq.n	12e0c <z_log_get_s_mask+0x28>
   12e26:	f811 c006 	ldrb.w	ip, [r1, r6]
   12e2a:	f01c 0f03 	tst.w	ip, #3
   12e2e:	d0ed      	beq.n	12e0c <z_log_get_s_mask+0x28>
			if (curr == 's') {
   12e30:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   12e32:	bf04      	itt	eq
   12e34:	fa07 f203 	lsleq.w	r2, r7, r3
   12e38:	4310      	orreq	r0, r2
			arg++;
   12e3a:	3301      	adds	r3, #1
			arm = false;
   12e3c:	2200      	movs	r2, #0
   12e3e:	e7e5      	b.n	12e0c <z_log_get_s_mask+0x28>
   12e40:	000307ce 	.word	0x000307ce
   12e44:	0003049a 	.word	0x0003049a
   12e48:	000307a1 	.word	0x000307a1
   12e4c:	0002f9a1 	.word	0x0002f9a1

00012e50 <log_core_init>:
{
   12e50:	b508      	push	{r3, lr}
		log_msg_pool_init();
   12e52:	f000 fa95 	bl	13380 <log_msg_pool_init>
		log_list_init(&list);
   12e56:	4809      	ldr	r0, [pc, #36]	; (12e7c <log_core_init+0x2c>)
   12e58:	f019 fd32 	bl	2c8c0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12e5c:	2304      	movs	r3, #4
   12e5e:	f44f 7284 	mov.w	r2, #264	; 0x108
   12e62:	4907      	ldr	r1, [pc, #28]	; (12e80 <log_core_init+0x30>)
   12e64:	4807      	ldr	r0, [pc, #28]	; (12e84 <log_core_init+0x34>)
   12e66:	f01b fd8e 	bl	2e986 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   12e6a:	4b07      	ldr	r3, [pc, #28]	; (12e88 <log_core_init+0x38>)
   12e6c:	4a07      	ldr	r2, [pc, #28]	; (12e8c <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   12e6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   12e72:	601a      	str	r2, [r3, #0]
}
   12e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   12e78:	f000 bd78 	b.w	1396c <log_output_timestamp_freq_set>
   12e7c:	200214fc 	.word	0x200214fc
   12e80:	2002a078 	.word	0x2002a078
   12e84:	20021504 	.word	0x20021504
   12e88:	20020430 	.word	0x20020430
   12e8c:	0002c905 	.word	0x0002c905

00012e90 <dropped_notify>:
{
   12e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12e92:	2500      	movs	r5, #0
   12e94:	4b0d      	ldr	r3, [pc, #52]	; (12ecc <dropped_notify+0x3c>)
   12e96:	e8d3 7fef 	ldaex	r7, [r3]
   12e9a:	e8c3 5fe2 	stlex	r2, r5, [r3]
   12e9e:	2a00      	cmp	r2, #0
   12ea0:	d1f9      	bne.n	12e96 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12ea2:	4c0b      	ldr	r4, [pc, #44]	; (12ed0 <dropped_notify+0x40>)
   12ea4:	4e0b      	ldr	r6, [pc, #44]	; (12ed4 <dropped_notify+0x44>)
   12ea6:	1b36      	subs	r6, r6, r4
   12ea8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12eaa:	42b5      	cmp	r5, r6
   12eac:	db00      	blt.n	12eb0 <dropped_notify+0x20>
}
   12eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   12eb0:	4620      	mov	r0, r4
   12eb2:	f019 fd1b 	bl	2c8ec <log_backend_is_active>
   12eb6:	b128      	cbz	r0, 12ec4 <dropped_notify+0x34>
	if (backend->api->dropped != NULL) {
   12eb8:	6823      	ldr	r3, [r4, #0]
   12eba:	68db      	ldr	r3, [r3, #12]
   12ebc:	b113      	cbz	r3, 12ec4 <dropped_notify+0x34>
		backend->api->dropped(backend, cnt);
   12ebe:	4639      	mov	r1, r7
   12ec0:	4620      	mov	r0, r4
   12ec2:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12ec4:	3501      	adds	r5, #1
   12ec6:	3410      	adds	r4, #16
   12ec8:	e7ef      	b.n	12eaa <dropped_notify+0x1a>
   12eca:	bf00      	nop
   12ecc:	200214f4 	.word	0x200214f4
   12ed0:	0002f0d4 	.word	0x0002f0d4
   12ed4:	0002f0e4 	.word	0x0002f0e4

00012ed8 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12ed8:	4b04      	ldr	r3, [pc, #16]	; (12eec <log_dropped+0x14>)
   12eda:	e8d3 2fef 	ldaex	r2, [r3]
   12ede:	3201      	adds	r2, #1
   12ee0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12ee4:	2900      	cmp	r1, #0
   12ee6:	d1f8      	bne.n	12eda <log_dropped+0x2>
}
   12ee8:	4770      	bx	lr
   12eea:	bf00      	nop
   12eec:	200214f4 	.word	0x200214f4

00012ef0 <log_source_name_get>:
   12ef0:	4a04      	ldr	r2, [pc, #16]	; (12f04 <log_source_name_get+0x14>)
   12ef2:	4b05      	ldr	r3, [pc, #20]	; (12f08 <log_source_name_get+0x18>)
   12ef4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12ef6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   12efa:	bf34      	ite	cc
   12efc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   12f00:	2000      	movcs	r0, #0
}
   12f02:	4770      	bx	lr
   12f04:	0002f034 	.word	0x0002f034
   12f08:	0002f0d4 	.word	0x0002f0d4

00012f0c <log_backend_enable>:
{
   12f0c:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   12f0e:	4c10      	ldr	r4, [pc, #64]	; (12f50 <log_backend_enable+0x44>)
{
   12f10:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   12f12:	1b04      	subs	r4, r0, r4
   12f14:	1124      	asrs	r4, r4, #4
   12f16:	3401      	adds	r4, #1
{
   12f18:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
   12f1a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   12f1c:	b948      	cbnz	r0, 12f32 <log_backend_enable+0x26>
   12f1e:	490d      	ldr	r1, [pc, #52]	; (12f54 <log_backend_enable+0x48>)
   12f20:	480d      	ldr	r0, [pc, #52]	; (12f58 <log_backend_enable+0x4c>)
   12f22:	23c0      	movs	r3, #192	; 0xc0
   12f24:	4a0d      	ldr	r2, [pc, #52]	; (12f5c <log_backend_enable+0x50>)
   12f26:	f019 faa4 	bl	2c472 <printk>
   12f2a:	21c0      	movs	r1, #192	; 0xc0
   12f2c:	480b      	ldr	r0, [pc, #44]	; (12f5c <log_backend_enable+0x50>)
   12f2e:	f019 fcbd 	bl	2c8ac <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   12f32:	2201      	movs	r2, #1
	backend->cb->id = id;
   12f34:	686b      	ldr	r3, [r5, #4]
   12f36:	711c      	strb	r4, [r3, #4]
	if (!backend_attached) {
   12f38:	4c09      	ldr	r4, [pc, #36]	; (12f60 <log_backend_enable+0x54>)
	backend->cb->active = true;
   12f3a:	715a      	strb	r2, [r3, #5]
   12f3c:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   12f3e:	601e      	str	r6, [r3, #0]
   12f40:	b912      	cbnz	r2, 12f48 <log_backend_enable+0x3c>
   12f42:	4808      	ldr	r0, [pc, #32]	; (12f64 <log_backend_enable+0x58>)
   12f44:	f011 fcde 	bl	24904 <z_impl_k_sem_give>
	backend_attached = true;
   12f48:	2301      	movs	r3, #1
   12f4a:	7023      	strb	r3, [r4, #0]
}
   12f4c:	bd70      	pop	{r4, r5, r6, pc}
   12f4e:	bf00      	nop
   12f50:	0002f0d4 	.word	0x0002f0d4
   12f54:	00030817 	.word	0x00030817
   12f58:	0003049a 	.word	0x0003049a
   12f5c:	000307e6 	.word	0x000307e6
   12f60:	20024737 	.word	0x20024737
   12f64:	20020c54 	.word	0x20020c54

00012f68 <log_init>:
{
   12f68:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   12f6a:	4b14      	ldr	r3, [pc, #80]	; (12fbc <log_init+0x54>)
   12f6c:	4c14      	ldr	r4, [pc, #80]	; (12fc0 <log_init+0x58>)
   12f6e:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12f70:	2b9f      	cmp	r3, #159	; 0x9f
   12f72:	ea4f 1623 	mov.w	r6, r3, asr #4
   12f76:	d906      	bls.n	12f86 <log_init+0x1e>
   12f78:	f240 210b 	movw	r1, #523	; 0x20b
   12f7c:	4b11      	ldr	r3, [pc, #68]	; (12fc4 <log_init+0x5c>)
   12f7e:	4a12      	ldr	r2, [pc, #72]	; (12fc8 <log_init+0x60>)
   12f80:	4812      	ldr	r0, [pc, #72]	; (12fcc <log_init+0x64>)
   12f82:	f012 fed9 	bl	25d38 <__assert_func>
   12f86:	4b12      	ldr	r3, [pc, #72]	; (12fd0 <log_init+0x68>)
   12f88:	e8d3 5fef 	ldaex	r5, [r3]
   12f8c:	1c6a      	adds	r2, r5, #1
   12f8e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12f92:	2900      	cmp	r1, #0
   12f94:	d1f8      	bne.n	12f88 <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   12f96:	b90d      	cbnz	r5, 12f9c <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   12f98:	42b5      	cmp	r5, r6
   12f9a:	d100      	bne.n	12f9e <log_init+0x36>
}
   12f9c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   12f9e:	7b23      	ldrb	r3, [r4, #12]
   12fa0:	b143      	cbz	r3, 12fb4 <log_init+0x4c>
			if (backend->api->init != NULL) {
   12fa2:	6823      	ldr	r3, [r4, #0]
   12fa4:	695b      	ldr	r3, [r3, #20]
   12fa6:	b103      	cbz	r3, 12faa <log_init+0x42>
				backend->api->init();
   12fa8:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   12faa:	2204      	movs	r2, #4
   12fac:	2100      	movs	r1, #0
   12fae:	4620      	mov	r0, r4
   12fb0:	f7ff ffac 	bl	12f0c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12fb4:	3501      	adds	r5, #1
   12fb6:	3410      	adds	r4, #16
   12fb8:	e7ee      	b.n	12f98 <log_init+0x30>
   12fba:	bf00      	nop
   12fbc:	0002f0e4 	.word	0x0002f0e4
   12fc0:	0002f0d4 	.word	0x0002f0d4
   12fc4:	0003082e 	.word	0x0003082e
   12fc8:	000308dc 	.word	0x000308dc
   12fcc:	000307a1 	.word	0x000307a1
   12fd0:	200214f8 	.word	0x200214f8

00012fd4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   12fd4:	4b15      	ldr	r3, [pc, #84]	; (1302c <log_strdup+0x58>)
{
   12fd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   12fd8:	4298      	cmp	r0, r3
{
   12fda:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12fdc:	d302      	bcc.n	12fe4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   12fde:	4b14      	ldr	r3, [pc, #80]	; (13030 <log_strdup+0x5c>)
   12fe0:	4298      	cmp	r0, r3
   12fe2:	d31d      	bcc.n	13020 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12fe4:	2200      	movs	r2, #0
   12fe6:	2300      	movs	r3, #0
   12fe8:	4812      	ldr	r0, [pc, #72]	; (13034 <log_strdup+0x60>)
   12fea:	a901      	add	r1, sp, #4
   12fec:	f00f fdf6 	bl	22bdc <k_mem_slab_alloc>
	if (err != 0) {
   12ff0:	4605      	mov	r5, r0
   12ff2:	b9c0      	cbnz	r0, 13026 <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12ff4:	2201      	movs	r2, #1
   12ff6:	9b01      	ldr	r3, [sp, #4]
   12ff8:	e8d3 1fef 	ldaex	r1, [r3]
   12ffc:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13000:	2800      	cmp	r0, #0
   13002:	d1f9      	bne.n	12ff8 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   13004:	9e01      	ldr	r6, [sp, #4]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   13006:	22ff      	movs	r2, #255	; 0xff
   13008:	1d33      	adds	r3, r6, #4
   1300a:	4618      	mov	r0, r3
   1300c:	4621      	mov	r1, r4
   1300e:	f013 fe8b 	bl	26d28 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   13012:	227e      	movs	r2, #126	; 0x7e
   13014:	4603      	mov	r3, r0
   13016:	f886 2103 	strb.w	r2, [r6, #259]	; 0x103
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1301a:	f886 5104 	strb.w	r5, [r6, #260]	; 0x104
	return dup->buf;
   1301e:	461c      	mov	r4, r3
}
   13020:	4620      	mov	r0, r4
   13022:	b002      	add	sp, #8
   13024:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   13026:	4b04      	ldr	r3, [pc, #16]	; (13038 <log_strdup+0x64>)
   13028:	e7f9      	b.n	1301e <log_strdup+0x4a>
   1302a:	bf00      	nop
   1302c:	0002ed78 	.word	0x0002ed78
   13030:	00033450 	.word	0x00033450
   13034:	20021504 	.word	0x20021504
   13038:	00030861 	.word	0x00030861

0001303c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   1303c:	b150      	cbz	r0, 13054 <log_is_strdup+0x18>
   1303e:	4b06      	ldr	r3, [pc, #24]	; (13058 <log_is_strdup+0x1c>)
   13040:	4298      	cmp	r0, r3
   13042:	d306      	bcc.n	13052 <log_is_strdup+0x16>
   13044:	f503 6384 	add.w	r3, r3, #1056	; 0x420
   13048:	4298      	cmp	r0, r3
   1304a:	bf2c      	ite	cs
   1304c:	2000      	movcs	r0, #0
   1304e:	2001      	movcc	r0, #1
   13050:	4770      	bx	lr
   13052:	2000      	movs	r0, #0
}
   13054:	4770      	bx	lr
   13056:	bf00      	nop
   13058:	2002a078 	.word	0x2002a078

0001305c <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   1305c:	4b4c      	ldr	r3, [pc, #304]	; (13190 <z_impl_log_process+0x134>)
{
   1305e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   13062:	781b      	ldrb	r3, [r3, #0]
{
   13064:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   13066:	b903      	cbnz	r3, 1306a <z_impl_log_process+0xe>
   13068:	b340      	cbz	r0, 130bc <z_impl_log_process+0x60>
	__asm__ volatile(
   1306a:	f04f 0320 	mov.w	r3, #32
   1306e:	f3ef 8611 	mrs	r6, BASEPRI
   13072:	f383 8811 	msr	BASEPRI, r3
   13076:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   1307a:	4846      	ldr	r0, [pc, #280]	; (13194 <z_impl_log_process+0x138>)
   1307c:	f019 fc30 	bl	2c8e0 <log_list_head_get>
   13080:	4605      	mov	r5, r0
	__asm__ volatile(
   13082:	f386 8811 	msr	BASEPRI, r6
   13086:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   1308a:	b158      	cbz	r0, 130a4 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1308c:	4b42      	ldr	r3, [pc, #264]	; (13198 <z_impl_log_process+0x13c>)
   1308e:	e8d3 2fef 	ldaex	r2, [r3]
   13092:	3a01      	subs	r2, #1
   13094:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13098:	2900      	cmp	r1, #0
   1309a:	d1f8      	bne.n	1308e <z_impl_log_process+0x32>
	if (!bypass) {
   1309c:	b194      	cbz	r4, 130c4 <z_impl_log_process+0x68>
	log_msg_put(msg);
   1309e:	4628      	mov	r0, r5
   130a0:	f019 fd1e 	bl	2cae0 <log_msg_put>
	if (!bypass && dropped_cnt) {
   130a4:	b924      	cbnz	r4, 130b0 <z_impl_log_process+0x54>
   130a6:	4b3d      	ldr	r3, [pc, #244]	; (1319c <z_impl_log_process+0x140>)
   130a8:	681b      	ldr	r3, [r3, #0]
   130aa:	b10b      	cbz	r3, 130b0 <z_impl_log_process+0x54>
		dropped_notify();
   130ac:	f7ff fef0 	bl	12e90 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   130b0:	4838      	ldr	r0, [pc, #224]	; (13194 <z_impl_log_process+0x138>)
   130b2:	f019 fc13 	bl	2c8dc <log_list_head_peek>
   130b6:	1e04      	subs	r4, r0, #0
   130b8:	bf18      	it	ne
   130ba:	2401      	movne	r4, #1
}
   130bc:	4620      	mov	r0, r4
   130be:	b003      	add	sp, #12
   130c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   130c4:	4b36      	ldr	r3, [pc, #216]	; (131a0 <z_impl_log_process+0x144>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   130c6:	781b      	ldrb	r3, [r3, #0]
   130c8:	b9b3      	cbnz	r3, 130f8 <z_impl_log_process+0x9c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   130ca:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   130cc:	07db      	lsls	r3, r3, #31
   130ce:	d413      	bmi.n	130f8 <z_impl_log_process+0x9c>
	msg_str = log_msg_str_get(msg);
   130d0:	f019 fd15 	bl	2cafe <log_msg_str_get>
   130d4:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   130d6:	4628      	mov	r0, r5
   130d8:	f019 fce0 	bl	2ca9c <log_msg_nargs_get>
   130dc:	4601      	mov	r1, r0
   130de:	4648      	mov	r0, r9
   130e0:	f7ff fe80 	bl	12de4 <z_log_get_s_mask>
   130e4:	4607      	mov	r7, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   130e6:	4a2f      	ldr	r2, [pc, #188]	; (131a4 <z_impl_log_process+0x148>)
   130e8:	4b2f      	ldr	r3, [pc, #188]	; (131a8 <z_impl_log_process+0x14c>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   130ea:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 131cc <z_impl_log_process+0x170>
   130ee:	1a9b      	subs	r3, r3, r2
   130f0:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
   130f4:	9201      	str	r2, [sp, #4]
	while (mask) {
   130f6:	b937      	cbnz	r7, 13106 <z_impl_log_process+0xaa>
   130f8:	4e2c      	ldr	r6, [pc, #176]	; (131ac <z_impl_log_process+0x150>)
   130fa:	4f2d      	ldr	r7, [pc, #180]	; (131b0 <z_impl_log_process+0x154>)
   130fc:	f04f 0800 	mov.w	r8, #0
   13100:	1bbf      	subs	r7, r7, r6
   13102:	113f      	asrs	r7, r7, #4
   13104:	e041      	b.n	1318a <z_impl_log_process+0x12e>
		idx = 31 - __builtin_clz(mask);
   13106:	fab7 f887 	clz	r8, r7
   1310a:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1310e:	4641      	mov	r1, r8
   13110:	4628      	mov	r0, r5
   13112:	f019 fcc6 	bl	2caa2 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   13116:	4b27      	ldr	r3, [pc, #156]	; (131b4 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   13118:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1311a:	4298      	cmp	r0, r3
   1311c:	d302      	bcc.n	13124 <z_impl_log_process+0xc8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1311e:	4b26      	ldr	r3, [pc, #152]	; (131b8 <z_impl_log_process+0x15c>)
   13120:	4298      	cmp	r0, r3
   13122:	d320      	bcc.n	13166 <z_impl_log_process+0x10a>
   13124:	4610      	mov	r0, r2
   13126:	f7ff ff89 	bl	1303c <log_is_strdup>
   1312a:	b9e0      	cbnz	r0, 13166 <z_impl_log_process+0x10a>
   1312c:	4b23      	ldr	r3, [pc, #140]	; (131bc <z_impl_log_process+0x160>)
   1312e:	429a      	cmp	r2, r3
   13130:	d019      	beq.n	13166 <z_impl_log_process+0x10a>
	return msg->hdr.ids.source_id;
   13132:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   13134:	4922      	ldr	r1, [pc, #136]	; (131c0 <z_impl_log_process+0x164>)
   13136:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1313a:	455b      	cmp	r3, fp
   1313c:	bf2c      	ite	cs
   1313e:	4606      	movcs	r6, r0
	return __log_const_start[source_id].name;
   13140:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   13142:	4820      	ldr	r0, [pc, #128]	; (131c4 <z_impl_log_process+0x168>)
   13144:	bf38      	it	cc
   13146:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
   1314a:	23ad      	movs	r3, #173	; 0xad
   1314c:	4652      	mov	r2, sl
   1314e:	f019 f990 	bl	2c472 <printk>
   13152:	4641      	mov	r1, r8
   13154:	481c      	ldr	r0, [pc, #112]	; (131c8 <z_impl_log_process+0x16c>)
   13156:	464b      	mov	r3, r9
   13158:	4632      	mov	r2, r6
   1315a:	f019 f98a 	bl	2c472 <printk>
   1315e:	21ad      	movs	r1, #173	; 0xad
   13160:	4650      	mov	r0, sl
   13162:	f019 fba3 	bl	2c8ac <assert_post_action>
		mask &= ~BIT(idx);
   13166:	2301      	movs	r3, #1
   13168:	fa03 f808 	lsl.w	r8, r3, r8
   1316c:	ea27 0708 	bic.w	r7, r7, r8
   13170:	e7c1      	b.n	130f6 <z_impl_log_process+0x9a>
			if (log_backend_is_active(backend) &&
   13172:	4630      	mov	r0, r6
   13174:	f019 fbba 	bl	2c8ec <log_backend_is_active>
   13178:	b120      	cbz	r0, 13184 <z_impl_log_process+0x128>
	backend->api->put(backend, msg);
   1317a:	6833      	ldr	r3, [r6, #0]
   1317c:	4629      	mov	r1, r5
   1317e:	4630      	mov	r0, r6
   13180:	681b      	ldr	r3, [r3, #0]
   13182:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   13184:	f108 0801 	add.w	r8, r8, #1
   13188:	3610      	adds	r6, #16
   1318a:	45b8      	cmp	r8, r7
   1318c:	dbf1      	blt.n	13172 <z_impl_log_process+0x116>
   1318e:	e786      	b.n	1309e <z_impl_log_process+0x42>
   13190:	20024737 	.word	0x20024737
   13194:	200214fc 	.word	0x200214fc
   13198:	200214f0 	.word	0x200214f0
   1319c:	200214f4 	.word	0x200214f4
   131a0:	20024738 	.word	0x20024738
   131a4:	0002f034 	.word	0x0002f034
   131a8:	0002f0d4 	.word	0x0002f0d4
   131ac:	0002f0d4 	.word	0x0002f0d4
   131b0:	0002f0e4 	.word	0x0002f0e4
   131b4:	0002ed78 	.word	0x0002ed78
   131b8:	00033450 	.word	0x00033450
   131bc:	00030861 	.word	0x00030861
   131c0:	00033086 	.word	0x00033086
   131c4:	0003049a 	.word	0x0003049a
   131c8:	0003087b 	.word	0x0003087b
   131cc:	000307a1 	.word	0x000307a1

000131d0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   131d0:	4b27      	ldr	r3, [pc, #156]	; (13270 <msg_finalize+0xa0>)
{
   131d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   131d4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   131d6:	8141      	strh	r1, [r0, #10]
{
   131d8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   131da:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   131dc:	4d25      	ldr	r5, [pc, #148]	; (13274 <msg_finalize+0xa4>)
   131de:	60e0      	str	r0, [r4, #12]
   131e0:	e8d5 3fef 	ldaex	r3, [r5]
   131e4:	3301      	adds	r3, #1
   131e6:	e8c5 3fe2 	stlex	r2, r3, [r5]
   131ea:	2a00      	cmp	r2, #0
   131ec:	d1f8      	bne.n	131e0 <msg_finalize+0x10>
	__asm__ volatile(
   131ee:	f04f 0320 	mov.w	r3, #32
   131f2:	f3ef 8611 	mrs	r6, BASEPRI
   131f6:	f383 8811 	msr	BASEPRI, r3
   131fa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   131fe:	481e      	ldr	r0, [pc, #120]	; (13278 <msg_finalize+0xa8>)
   13200:	4621      	mov	r1, r4
   13202:	f019 fb61 	bl	2c8c8 <log_list_add_tail>
	__asm__ volatile(
   13206:	f386 8811 	msr	BASEPRI, r6
   1320a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   1320e:	4b1b      	ldr	r3, [pc, #108]	; (1327c <msg_finalize+0xac>)
   13210:	781b      	ldrb	r3, [r3, #0]
   13212:	b183      	cbz	r3, 13236 <msg_finalize+0x66>
	__asm__ volatile(
   13214:	f04f 0320 	mov.w	r3, #32
   13218:	f3ef 8411 	mrs	r4, BASEPRI
   1321c:	f383 8811 	msr	BASEPRI, r3
   13220:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   13224:	2000      	movs	r0, #0
   13226:	f7ff ff19 	bl	1305c <z_impl_log_process>
	__asm__ volatile(
   1322a:	f384 8811 	msr	BASEPRI, r4
   1322e:	f3bf 8f6f 	isb	sy
}
   13232:	b002      	add	sp, #8
   13234:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   13236:	4a12      	ldr	r2, [pc, #72]	; (13280 <msg_finalize+0xb0>)
   13238:	682b      	ldr	r3, [r5, #0]
   1323a:	6812      	ldr	r2, [r2, #0]
   1323c:	2a00      	cmp	r2, #0
   1323e:	d0f8      	beq.n	13232 <msg_finalize+0x62>
   13240:	2b01      	cmp	r3, #1
   13242:	d10a      	bne.n	1325a <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   13244:	2200      	movs	r2, #0
   13246:	2300      	movs	r3, #0
   13248:	480e      	ldr	r0, [pc, #56]	; (13284 <msg_finalize+0xb4>)
   1324a:	e9cd 2300 	strd	r2, r3, [sp]
   1324e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13252:	2300      	movs	r3, #0
   13254:	f012 f994 	bl	25580 <z_impl_k_timer_start>
   13258:	e7eb      	b.n	13232 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1325a:	2b0a      	cmp	r3, #10
   1325c:	d1e9      	bne.n	13232 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   1325e:	4809      	ldr	r0, [pc, #36]	; (13284 <msg_finalize+0xb4>)
   13260:	f01b fcd5 	bl	2ec0e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13264:	4808      	ldr	r0, [pc, #32]	; (13288 <msg_finalize+0xb8>)
}
   13266:	b002      	add	sp, #8
   13268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1326c:	f011 bb4a 	b.w	24904 <z_impl_k_sem_give>
   13270:	20020430 	.word	0x20020430
   13274:	200214f0 	.word	0x200214f0
   13278:	200214fc 	.word	0x200214fc
   1327c:	20024738 	.word	0x20024738
   13280:	20021520 	.word	0x20021520
   13284:	20020dc0 	.word	0x20020dc0
   13288:	20020c54 	.word	0x20020c54

0001328c <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   1328c:	4b16      	ldr	r3, [pc, #88]	; (132e8 <log_process_thread_func+0x5c>)
   1328e:	4a17      	ldr	r2, [pc, #92]	; (132ec <log_process_thread_func+0x60>)
{
   13290:	b510      	push	{r4, lr}
   13292:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13294:	2b00      	cmp	r3, #0
   13296:	dc0b      	bgt.n	132b0 <log_process_thread_func+0x24>
   13298:	4915      	ldr	r1, [pc, #84]	; (132f0 <log_process_thread_func+0x64>)
   1329a:	4816      	ldr	r0, [pc, #88]	; (132f4 <log_process_thread_func+0x68>)
   1329c:	f240 4399 	movw	r3, #1177	; 0x499
   132a0:	4a15      	ldr	r2, [pc, #84]	; (132f8 <log_process_thread_func+0x6c>)
   132a2:	f019 f8e6 	bl	2c472 <printk>
   132a6:	f240 4199 	movw	r1, #1177	; 0x499
   132aa:	4813      	ldr	r0, [pc, #76]	; (132f8 <log_process_thread_func+0x6c>)
   132ac:	f019 fafe 	bl	2c8ac <assert_post_action>
	log_init();
   132b0:	f7ff fe5a 	bl	12f68 <log_init>
	return z_impl_k_current_get();
   132b4:	f011 fb20 	bl	248f8 <z_impl_k_current_get>
	proc_tid = process_tid;
   132b8:	4b10      	ldr	r3, [pc, #64]	; (132fc <log_process_thread_func+0x70>)
   132ba:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   132bc:	b130      	cbz	r0, 132cc <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   132be:	4b10      	ldr	r3, [pc, #64]	; (13300 <log_process_thread_func+0x74>)
	    process_tid &&
   132c0:	681b      	ldr	r3, [r3, #0]
   132c2:	2b09      	cmp	r3, #9
   132c4:	dd02      	ble.n	132cc <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   132c6:	480f      	ldr	r0, [pc, #60]	; (13304 <log_process_thread_func+0x78>)
   132c8:	f011 fb1c 	bl	24904 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   132cc:	4c0d      	ldr	r4, [pc, #52]	; (13304 <log_process_thread_func+0x78>)
   132ce:	2000      	movs	r0, #0
   132d0:	f7ff fec4 	bl	1305c <z_impl_log_process>
		if (log_process(false) == false) {
   132d4:	2800      	cmp	r0, #0
   132d6:	d1fa      	bne.n	132ce <log_process_thread_func+0x42>
   132d8:	f04f 32ff 	mov.w	r2, #4294967295
   132dc:	f04f 33ff 	mov.w	r3, #4294967295
   132e0:	4620      	mov	r0, r4
   132e2:	f011 fb53 	bl	2498c <z_impl_k_sem_take>
   132e6:	e7f2      	b.n	132ce <log_process_thread_func+0x42>
   132e8:	0002f0e4 	.word	0x0002f0e4
   132ec:	0002f0d4 	.word	0x0002f0d4
   132f0:	000308bc 	.word	0x000308bc
   132f4:	0003049a 	.word	0x0003049a
   132f8:	000307a1 	.word	0x000307a1
   132fc:	20021520 	.word	0x20021520
   13300:	200214f0 	.word	0x200214f0
   13304:	20020c54 	.word	0x20020c54

00013308 <z_impl_log_panic>:
{
   13308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1330a:	4f0f      	ldr	r7, [pc, #60]	; (13348 <z_impl_log_panic+0x40>)
   1330c:	783d      	ldrb	r5, [r7, #0]
   1330e:	b975      	cbnz	r5, 1332e <z_impl_log_panic+0x26>
	log_init();
   13310:	f7ff fe2a 	bl	12f68 <log_init>
   13314:	4c0d      	ldr	r4, [pc, #52]	; (1334c <z_impl_log_panic+0x44>)
   13316:	4e0e      	ldr	r6, [pc, #56]	; (13350 <z_impl_log_panic+0x48>)
   13318:	1b36      	subs	r6, r6, r4
   1331a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1331c:	42b5      	cmp	r5, r6
   1331e:	db07      	blt.n	13330 <z_impl_log_panic+0x28>
   13320:	2000      	movs	r0, #0
   13322:	f7ff fe9b 	bl	1305c <z_impl_log_process>
		while (log_process(false) == true) {
   13326:	2800      	cmp	r0, #0
   13328:	d1fa      	bne.n	13320 <z_impl_log_panic+0x18>
	panic_mode = true;
   1332a:	2301      	movs	r3, #1
   1332c:	703b      	strb	r3, [r7, #0]
}
   1332e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   13330:	4620      	mov	r0, r4
   13332:	f019 fadb 	bl	2c8ec <log_backend_is_active>
   13336:	b118      	cbz	r0, 13340 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   13338:	6823      	ldr	r3, [r4, #0]
   1333a:	4620      	mov	r0, r4
   1333c:	691b      	ldr	r3, [r3, #16]
   1333e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   13340:	3501      	adds	r5, #1
   13342:	3410      	adds	r4, #16
   13344:	e7ea      	b.n	1331c <z_impl_log_panic+0x14>
   13346:	bf00      	nop
   13348:	20024738 	.word	0x20024738
   1334c:	0002f0d4 	.word	0x0002f0d4
   13350:	0002f0e4 	.word	0x0002f0e4

00013354 <log_free>:
{
   13354:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   13356:	3804      	subs	r0, #4
   13358:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1335a:	e8d0 3fef 	ldaex	r3, [r0]
   1335e:	1e5a      	subs	r2, r3, #1
   13360:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13364:	2900      	cmp	r1, #0
   13366:	d1f8      	bne.n	1335a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   13368:	2b01      	cmp	r3, #1
   1336a:	d103      	bne.n	13374 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1336c:	4803      	ldr	r0, [pc, #12]	; (1337c <log_free+0x28>)
   1336e:	a901      	add	r1, sp, #4
   13370:	f00f fca0 	bl	22cb4 <k_mem_slab_free>
}
   13374:	b003      	add	sp, #12
   13376:	f85d fb04 	ldr.w	pc, [sp], #4
   1337a:	bf00      	nop
   1337c:	20021504 	.word	0x20021504

00013380 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   13380:	2320      	movs	r3, #32
   13382:	4902      	ldr	r1, [pc, #8]	; (1338c <log_msg_pool_init+0xc>)
   13384:	461a      	mov	r2, r3
   13386:	4802      	ldr	r0, [pc, #8]	; (13390 <log_msg_pool_init+0x10>)
   13388:	f01b bafd 	b.w	2e986 <k_mem_slab_init>
   1338c:	2002a498 	.word	0x2002a498
   13390:	20021524 	.word	0x20021524

00013394 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   13394:	2300      	movs	r3, #0
{
   13396:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   13398:	4d09      	ldr	r5, [pc, #36]	; (133c0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   1339a:	9301      	str	r3, [sp, #4]
   1339c:	2001      	movs	r0, #1
   1339e:	f7ff fe5d 	bl	1305c <z_impl_log_process>
   133a2:	4604      	mov	r4, r0
			log_dropped();
   133a4:	f7ff fd98 	bl	12ed8 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   133a8:	2200      	movs	r2, #0
   133aa:	2300      	movs	r3, #0
   133ac:	4628      	mov	r0, r5
   133ae:	a901      	add	r1, sp, #4
   133b0:	f00f fc14 	bl	22bdc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   133b4:	b108      	cbz	r0, 133ba <log_msg_no_space_handle+0x26>
   133b6:	2c00      	cmp	r4, #0
   133b8:	d1f0      	bne.n	1339c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   133ba:	9801      	ldr	r0, [sp, #4]
   133bc:	b003      	add	sp, #12
   133be:	bd30      	pop	{r4, r5, pc}
   133c0:	20021524 	.word	0x20021524

000133c4 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   133c4:	2300      	movs	r3, #0
{
   133c6:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   133c8:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   133ca:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   133cc:	4806      	ldr	r0, [pc, #24]	; (133e8 <log_msg_chunk_alloc+0x24>)
   133ce:	2300      	movs	r3, #0
   133d0:	a901      	add	r1, sp, #4
   133d2:	f00f fc03 	bl	22bdc <k_mem_slab_alloc>
	if (err != 0) {
   133d6:	b110      	cbz	r0, 133de <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   133d8:	f7ff ffdc 	bl	13394 <log_msg_no_space_handle>
   133dc:	9001      	str	r0, [sp, #4]
}
   133de:	9801      	ldr	r0, [sp, #4]
   133e0:	b003      	add	sp, #12
   133e2:	f85d fb04 	ldr.w	pc, [sp], #4
   133e6:	bf00      	nop
   133e8:	20021524 	.word	0x20021524

000133ec <msg_free>:
{
   133ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   133ee:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   133f0:	7a45      	ldrb	r5, [r0, #9]
{
   133f2:	b085      	sub	sp, #20
   133f4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   133f6:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   133f8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   133fc:	d41c      	bmi.n	13438 <msg_free+0x4c>
   133fe:	b1dd      	cbz	r5, 13438 <msg_free+0x4c>
		uint32_t smask = 0;
   13400:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   13402:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   13404:	4631      	mov	r1, r6
   13406:	9801      	ldr	r0, [sp, #4]
   13408:	f019 fb4b 	bl	2caa2 <log_msg_arg_get>
   1340c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   1340e:	f7ff fe15 	bl	1303c <log_is_strdup>
   13412:	b170      	cbz	r0, 13432 <msg_free+0x46>
				if (smask == 0) {
   13414:	b934      	cbnz	r4, 13424 <msg_free+0x38>
					smask = z_log_get_s_mask(
   13416:	9b01      	ldr	r3, [sp, #4]
   13418:	4629      	mov	r1, r5
   1341a:	6918      	ldr	r0, [r3, #16]
   1341c:	f7ff fce2 	bl	12de4 <z_log_get_s_mask>
					if (smask == 0) {
   13420:	4604      	mov	r4, r0
   13422:	b148      	cbz	r0, 13438 <msg_free+0x4c>
				if (smask & BIT(i)) {
   13424:	fa24 f306 	lsr.w	r3, r4, r6
   13428:	07d9      	lsls	r1, r3, #31
   1342a:	d502      	bpl.n	13432 <msg_free+0x46>
					log_free(buf);
   1342c:	4638      	mov	r0, r7
   1342e:	f7ff ff91 	bl	13354 <log_free>
		for (i = 0; i < nargs; i++) {
   13432:	3601      	adds	r6, #1
   13434:	42ae      	cmp	r6, r5
   13436:	d3e5      	bcc.n	13404 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   13438:	9b01      	ldr	r3, [sp, #4]
   1343a:	7a1a      	ldrb	r2, [r3, #8]
   1343c:	0792      	lsls	r2, r2, #30
   1343e:	d504      	bpl.n	1344a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   13440:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13442:	4c08      	ldr	r4, [pc, #32]	; (13464 <msg_free+0x78>)
   13444:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   13446:	9b03      	ldr	r3, [sp, #12]
   13448:	b92b      	cbnz	r3, 13456 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1344a:	4806      	ldr	r0, [pc, #24]	; (13464 <msg_free+0x78>)
   1344c:	a901      	add	r1, sp, #4
   1344e:	f00f fc31 	bl	22cb4 <k_mem_slab_free>
}
   13452:	b005      	add	sp, #20
   13454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   13456:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13458:	4620      	mov	r0, r4
   1345a:	a903      	add	r1, sp, #12
   1345c:	f00f fc2a 	bl	22cb4 <k_mem_slab_free>
		cont = next;
   13460:	9503      	str	r5, [sp, #12]
   13462:	e7f0      	b.n	13446 <msg_free+0x5a>
   13464:	20021524 	.word	0x20021524

00013468 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   13468:	2a0e      	cmp	r2, #14
{
   1346a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1346e:	4681      	mov	r9, r0
   13470:	4688      	mov	r8, r1
   13472:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   13474:	d90b      	bls.n	1348e <log_msg_create_n+0x26>
   13476:	492d      	ldr	r1, [pc, #180]	; (1352c <log_msg_create_n+0xc4>)
   13478:	482d      	ldr	r0, [pc, #180]	; (13530 <log_msg_create_n+0xc8>)
   1347a:	f44f 739b 	mov.w	r3, #310	; 0x136
   1347e:	4a2d      	ldr	r2, [pc, #180]	; (13534 <log_msg_create_n+0xcc>)
   13480:	f018 fff7 	bl	2c472 <printk>
   13484:	f44f 719b 	mov.w	r1, #310	; 0x136
   13488:	482a      	ldr	r0, [pc, #168]	; (13534 <log_msg_create_n+0xcc>)
   1348a:	f019 fa0f 	bl	2c8ac <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1348e:	f7ff ff99 	bl	133c4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   13492:	4604      	mov	r4, r0
   13494:	b330      	cbz	r0, 134e4 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   13496:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   13498:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1349a:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1349c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1349e:	8107      	strh	r7, [r0, #8]
   134a0:	d909      	bls.n	134b6 <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   134a2:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   134a4:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   134a8:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   134aa:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   134ae:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   134b0:	f1ba 0f00 	cmp.w	sl, #0
   134b4:	dc0e      	bgt.n	134d4 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   134b6:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   134b8:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   134ba:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   134be:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   134c2:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   134c4:	d818      	bhi.n	134f8 <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   134c6:	4641      	mov	r1, r8
   134c8:	00aa      	lsls	r2, r5, #2
   134ca:	f104 0014 	add.w	r0, r4, #20
   134ce:	f7f9 fb3d 	bl	cb4c <memcpy>
	while (nargs != 0U) {
   134d2:	e007      	b.n	134e4 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   134d4:	f7ff ff76 	bl	133c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   134d8:	4606      	mov	r6, r0
   134da:	b930      	cbnz	r0, 134ea <log_msg_create_n+0x82>
			msg_free(msg);
   134dc:	4620      	mov	r0, r4
   134de:	f7ff ff85 	bl	133ec <msg_free>
			return NULL;
   134e2:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   134e4:	4620      	mov	r0, r4
   134e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   134ea:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   134ee:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   134f2:	4683      	mov	fp, r0
		cont->next = NULL;
   134f4:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   134f6:	e7db      	b.n	134b0 <log_msg_create_n+0x48>
   134f8:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   134fc:	6967      	ldr	r7, [r4, #20]
   134fe:	61a3      	str	r3, [r4, #24]
   13500:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   13504:	3d02      	subs	r5, #2
   13506:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   13508:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1350c:	2d07      	cmp	r5, #7
   1350e:	462e      	mov	r6, r5
   13510:	bf28      	it	cs
   13512:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   13514:	ea4f 0986 	mov.w	r9, r6, lsl #2
   13518:	4641      	mov	r1, r8
   1351a:	1d38      	adds	r0, r7, #4
   1351c:	464a      	mov	r2, r9
   1351e:	f7f9 fb15 	bl	cb4c <memcpy>
	while (nargs != 0U) {
   13522:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   13524:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   13526:	44c8      	add	r8, r9
	while (nargs != 0U) {
   13528:	d1f0      	bne.n	1350c <log_msg_create_n+0xa4>
   1352a:	e7db      	b.n	134e4 <log_msg_create_n+0x7c>
   1352c:	00030911 	.word	0x00030911
   13530:	0003049a 	.word	0x0003049a
   13534:	000308e5 	.word	0x000308e5

00013538 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   13538:	b40e      	push	{r1, r2, r3}
   1353a:	b503      	push	{r0, r1, lr}
   1353c:	ab03      	add	r3, sp, #12
   1353e:	f853 2b04 	ldr.w	r2, [r3], #4
   13542:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   13544:	4804      	ldr	r0, [pc, #16]	; (13558 <print_formatted+0x20>)
	va_start(args, fmt);
   13546:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   13548:	f7fe fdee 	bl	12128 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   1354c:	2000      	movs	r0, #0
   1354e:	b002      	add	sp, #8
   13550:	f85d eb04 	ldr.w	lr, [sp], #4
   13554:	b003      	add	sp, #12
   13556:	4770      	bx	lr
   13558:	00013799 	.word	0x00013799

0001355c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   1355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   13560:	f011 0402 	ands.w	r4, r1, #2
{
   13564:	b085      	sub	sp, #20
   13566:	4606      	mov	r6, r0
   13568:	4690      	mov	r8, r2
   1356a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1356e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13572:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   13576:	d007      	beq.n	13588 <prefix_print+0x2c>
	if (!format) {
   13578:	f011 0f44 	tst.w	r1, #68	; 0x44
   1357c:	d137      	bne.n	135ee <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   1357e:	461a      	mov	r2, r3
   13580:	4932      	ldr	r1, [pc, #200]	; (1364c <prefix_print+0xf0>)
   13582:	f7ff ffd9 	bl	13538 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   13586:	4604      	mov	r4, r0
	if (color) {
   13588:	f1b9 0f00 	cmp.w	r9, #0
   1358c:	d00a      	beq.n	135a4 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   1358e:	4b30      	ldr	r3, [pc, #192]	; (13650 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   13590:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   13592:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   13596:	4b2f      	ldr	r3, [pc, #188]	; (13654 <prefix_print+0xf8>)
   13598:	492f      	ldr	r1, [pc, #188]	; (13658 <prefix_print+0xfc>)
   1359a:	2a00      	cmp	r2, #0
   1359c:	bf08      	it	eq
   1359e:	461a      	moveq	r2, r3
   135a0:	f7ff ffca 	bl	13538 <print_formatted>
	if (level_on) {
   135a4:	b13d      	cbz	r5, 135b6 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   135a6:	4b2d      	ldr	r3, [pc, #180]	; (1365c <prefix_print+0x100>)
   135a8:	4630      	mov	r0, r6
   135aa:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   135ae:	492c      	ldr	r1, [pc, #176]	; (13660 <prefix_print+0x104>)
   135b0:	f7ff ffc2 	bl	13538 <print_formatted>
   135b4:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   135b6:	f1b8 0f00 	cmp.w	r8, #0
   135ba:	d044      	beq.n	13646 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   135bc:	2301      	movs	r3, #1
   135be:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   135c2:	4b28      	ldr	r3, [pc, #160]	; (13664 <prefix_print+0x108>)
   135c4:	f017 0f10 	tst.w	r7, #16
   135c8:	4f27      	ldr	r7, [pc, #156]	; (13668 <prefix_print+0x10c>)
   135ca:	bf18      	it	ne
   135cc:	461f      	movne	r7, r3
   135ce:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   135d2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   135d6:	f7ff fc8b 	bl	12ef0 <log_source_name_get>
   135da:	4639      	mov	r1, r7
   135dc:	4602      	mov	r2, r0
   135de:	4630      	mov	r0, r6
   135e0:	f7ff ffaa 	bl	13538 <print_formatted>
   135e4:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   135e6:	4420      	add	r0, r4
   135e8:	b005      	add	sp, #20
   135ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   135ee:	4a1f      	ldr	r2, [pc, #124]	; (1366c <prefix_print+0x110>)
   135f0:	6811      	ldr	r1, [r2, #0]
   135f2:	b331      	cbz	r1, 13642 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   135f4:	4a1e      	ldr	r2, [pc, #120]	; (13670 <prefix_print+0x114>)
   135f6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   135fa:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   135fc:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13600:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   13604:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   13608:	fbb4 f2fe 	udiv	r2, r4, lr
   1360c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   13610:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   13614:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13618:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1361c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13620:	fb01 441b 	mls	r4, r1, fp, r4
   13624:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   13628:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1362c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   13630:	e9cd b101 	strd	fp, r1, [sp, #4]
   13634:	fb0a e113 	mls	r1, sl, r3, lr
   13638:	9100      	str	r1, [sp, #0]
   1363a:	490e      	ldr	r1, [pc, #56]	; (13674 <prefix_print+0x118>)
   1363c:	f7ff ff7c 	bl	13538 <print_formatted>
   13640:	e7a1      	b.n	13586 <prefix_print+0x2a>
		length = 0;
   13642:	4608      	mov	r0, r1
   13644:	e79f      	b.n	13586 <prefix_print+0x2a>
	total += print_formatted(log_output,
   13646:	4f08      	ldr	r7, [pc, #32]	; (13668 <prefix_print+0x10c>)
   13648:	e7c1      	b.n	135ce <prefix_print+0x72>
   1364a:	bf00      	nop
   1364c:	0003092a 	.word	0x0003092a
   13650:	0002f260 	.word	0x0002f260
   13654:	0003091c 	.word	0x0003091c
   13658:	000321fe 	.word	0x000321fe
   1365c:	0002f274 	.word	0x0002f274
   13660:	0003094f 	.word	0x0003094f
   13664:	00030926 	.word	0x00030926
   13668:	00030921 	.word	0x00030921
   1366c:	20021540 	.word	0x20021540
   13670:	20021544 	.word	0x20021544
   13674:	00030933 	.word	0x00030933

00013678 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   13678:	b538      	push	{r3, r4, r5, lr}
   1367a:	460c      	mov	r4, r1
	if (color) {
   1367c:	07e1      	lsls	r1, r4, #31
{
   1367e:	4605      	mov	r5, r0
	if (color) {
   13680:	d503      	bpl.n	1368a <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   13682:	4a08      	ldr	r2, [pc, #32]	; (136a4 <postfix_print+0x2c>)
   13684:	4908      	ldr	r1, [pc, #32]	; (136a8 <postfix_print+0x30>)
   13686:	f7ff ff57 	bl	13538 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1368a:	06e2      	lsls	r2, r4, #27
   1368c:	d408      	bmi.n	136a0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1368e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   13690:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   13692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   13696:	bf4c      	ite	mi
   13698:	4904      	ldrmi	r1, [pc, #16]	; (136ac <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1369a:	4905      	ldrpl	r1, [pc, #20]	; (136b0 <postfix_print+0x38>)
   1369c:	f7ff bf4c 	b.w	13538 <print_formatted>
}
   136a0:	bd38      	pop	{r3, r4, r5, pc}
   136a2:	bf00      	nop
   136a4:	0003091c 	.word	0x0003091c
   136a8:	000321fe 	.word	0x000321fe
   136ac:	00030ac8 	.word	0x00030ac8
   136b0:	00032b45 	.word	0x00032b45

000136b4 <hexdump_line_print>:
{
   136b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136b8:	461d      	mov	r5, r3
   136ba:	9b08      	ldr	r3, [sp, #32]
   136bc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   136be:	06da      	lsls	r2, r3, #27
{
   136c0:	4604      	mov	r4, r0
   136c2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   136c4:	d405      	bmi.n	136d2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   136c6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   136c8:	bf4c      	ite	mi
   136ca:	492b      	ldrmi	r1, [pc, #172]	; (13778 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   136cc:	492b      	ldrpl	r1, [pc, #172]	; (1377c <hexdump_line_print+0xc8>)
   136ce:	f7ff ff33 	bl	13538 <print_formatted>
{
   136d2:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   136d6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 13784 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   136da:	45a8      	cmp	r8, r5
   136dc:	db2d      	blt.n	1373a <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   136de:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   136e0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13788 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   136e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1378c <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   136e8:	f8df a098 	ldr.w	sl, [pc, #152]	; 13784 <hexdump_line_print+0xd0>
		if (i < length) {
   136ec:	42bd      	cmp	r5, r7
   136ee:	d232      	bcs.n	13756 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   136f0:	4649      	mov	r1, r9
   136f2:	4620      	mov	r0, r4
   136f4:	5d72      	ldrb	r2, [r6, r5]
   136f6:	f7ff ff1f 	bl	13538 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   136fa:	3501      	adds	r5, #1
   136fc:	2d10      	cmp	r5, #16
   136fe:	d123      	bne.n	13748 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   13700:	4620      	mov	r0, r4
   13702:	491f      	ldr	r1, [pc, #124]	; (13780 <hexdump_line_print+0xcc>)
   13704:	f7ff ff18 	bl	13538 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13708:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   1370a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 13784 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   1370e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 13790 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   13712:	f8df a080 	ldr.w	sl, [pc, #128]	; 13794 <hexdump_line_print+0xe0>
		if (i < length) {
   13716:	42af      	cmp	r7, r5
   13718:	d929      	bls.n	1376e <hexdump_line_print+0xba>
			char c = (char)data[i];
   1371a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   1371c:	4651      	mov	r1, sl
   1371e:	f812 3009 	ldrb.w	r3, [r2, r9]
   13722:	4620      	mov	r0, r4
   13724:	f013 0f97 	tst.w	r3, #151	; 0x97
   13728:	bf08      	it	eq
   1372a:	222e      	moveq	r2, #46	; 0x2e
   1372c:	f7ff ff04 	bl	13538 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13730:	3501      	adds	r5, #1
   13732:	2d10      	cmp	r5, #16
   13734:	d114      	bne.n	13760 <hexdump_line_print+0xac>
}
   13736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   1373a:	4649      	mov	r1, r9
   1373c:	4620      	mov	r0, r4
   1373e:	f7ff fefb 	bl	13538 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13742:	f108 0801 	add.w	r8, r8, #1
   13746:	e7c8      	b.n	136da <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   13748:	076a      	lsls	r2, r5, #29
   1374a:	d1cf      	bne.n	136ec <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   1374c:	4651      	mov	r1, sl
   1374e:	4620      	mov	r0, r4
   13750:	f7ff fef2 	bl	13538 <print_formatted>
   13754:	e7ca      	b.n	136ec <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   13756:	4641      	mov	r1, r8
   13758:	4620      	mov	r0, r4
   1375a:	f7ff feed 	bl	13538 <print_formatted>
   1375e:	e7cc      	b.n	136fa <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   13760:	076b      	lsls	r3, r5, #29
   13762:	d1d8      	bne.n	13716 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   13764:	4641      	mov	r1, r8
   13766:	4620      	mov	r0, r4
   13768:	f7ff fee6 	bl	13538 <print_formatted>
   1376c:	e7d3      	b.n	13716 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   1376e:	4641      	mov	r1, r8
   13770:	4620      	mov	r0, r4
   13772:	f7ff fee1 	bl	13538 <print_formatted>
   13776:	e7db      	b.n	13730 <hexdump_line_print+0x7c>
   13778:	00030ac8 	.word	0x00030ac8
   1377c:	00032b45 	.word	0x00032b45
   13780:	0003095f 	.word	0x0003095f
   13784:	0003095d 	.word	0x0003095d
   13788:	0003095b 	.word	0x0003095b
   1378c:	00030955 	.word	0x00030955
   13790:	0002f9a1 	.word	0x0002f9a1
   13794:	00030961 	.word	0x00030961

00013798 <out_func>:
{
   13798:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1379a:	684b      	ldr	r3, [r1, #4]
{
   1379c:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1379e:	681a      	ldr	r2, [r3, #0]
   137a0:	68cb      	ldr	r3, [r1, #12]
{
   137a2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   137a4:	429a      	cmp	r2, r3
   137a6:	d102      	bne.n	137ae <out_func+0x16>
		log_output_flush(out_ctx);
   137a8:	4608      	mov	r0, r1
   137aa:	f019 fb1b 	bl	2cde4 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   137ae:	6863      	ldr	r3, [r4, #4]
   137b0:	e8d3 2fef 	ldaex	r2, [r3]
   137b4:	1c51      	adds	r1, r2, #1
   137b6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   137ba:	2800      	cmp	r0, #0
   137bc:	d1f8      	bne.n	137b0 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   137be:	68a3      	ldr	r3, [r4, #8]
   137c0:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   137c2:	6863      	ldr	r3, [r4, #4]
   137c4:	681a      	ldr	r2, [r3, #0]
   137c6:	68e3      	ldr	r3, [r4, #12]
   137c8:	429a      	cmp	r2, r3
   137ca:	d909      	bls.n	137e0 <out_func+0x48>
   137cc:	4905      	ldr	r1, [pc, #20]	; (137e4 <out_func+0x4c>)
   137ce:	4806      	ldr	r0, [pc, #24]	; (137e8 <out_func+0x50>)
   137d0:	2378      	movs	r3, #120	; 0x78
   137d2:	4a06      	ldr	r2, [pc, #24]	; (137ec <out_func+0x54>)
   137d4:	f018 fe4d 	bl	2c472 <printk>
   137d8:	2178      	movs	r1, #120	; 0x78
   137da:	4804      	ldr	r0, [pc, #16]	; (137ec <out_func+0x54>)
   137dc:	f019 f866 	bl	2c8ac <assert_post_action>
}
   137e0:	2000      	movs	r0, #0
   137e2:	bd38      	pop	{r3, r4, r5, pc}
   137e4:	00030993 	.word	0x00030993
   137e8:	0003049a 	.word	0x0003049a
   137ec:	00030964 	.word	0x00030964

000137f0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   137f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   137f4:	7a8b      	ldrb	r3, [r1, #10]
   137f6:	4616      	mov	r6, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   137f8:	f013 0707 	ands.w	r7, r3, #7
{
   137fc:	4604      	mov	r4, r0
   137fe:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13800:	7a0a      	ldrb	r2, [r1, #8]
   13802:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13804:	d020      	beq.n	13848 <log_output_msg_process+0x58>
   13806:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   13808:	8949      	ldrh	r1, [r1, #10]
   1380a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1380e:	f3c1 1189 	ubfx	r1, r1, #6, #10
   13812:	e9cd 7300 	strd	r7, r3, [sp]
   13816:	9102      	str	r1, [sp, #8]
   13818:	68eb      	ldr	r3, [r5, #12]
   1381a:	4631      	mov	r1, r6
   1381c:	f002 0201 	and.w	r2, r2, #1
   13820:	f7ff fe9c 	bl	1355c <prefix_print>
   13824:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13826:	7a2b      	ldrb	r3, [r5, #8]
   13828:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1382a:	f013 0801 	ands.w	r8, r3, #1
   1382e:	d00d      	beq.n	1384c <log_output_msg_process+0x5c>
		std_print(msg, log_output);
   13830:	4621      	mov	r1, r4
   13832:	4628      	mov	r0, r5
   13834:	f019 f979 	bl	2cb2a <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   13838:	2f00      	cmp	r7, #0
   1383a:	d03c      	beq.n	138b6 <log_output_msg_process+0xc6>
		postfix_print(log_output, flags, level);
   1383c:	463a      	mov	r2, r7
   1383e:	4631      	mov	r1, r6
   13840:	4620      	mov	r0, r4
   13842:	f7ff ff19 	bl	13678 <postfix_print>
   13846:	e036      	b.n	138b6 <log_output_msg_process+0xc6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13848:	46b9      	mov	r9, r7
   1384a:	e7ec      	b.n	13826 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1384c:	2f00      	cmp	r7, #0
   1384e:	d138      	bne.n	138c2 <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(log_output->size);
   13850:	68e3      	ldr	r3, [r4, #12]
   13852:	b95b      	cbnz	r3, 1386c <log_output_msg_process+0x7c>
   13854:	492a      	ldr	r1, [pc, #168]	; (13900 <log_output_msg_process+0x110>)
   13856:	482b      	ldr	r0, [pc, #172]	; (13904 <log_output_msg_process+0x114>)
   13858:	f240 13bb 	movw	r3, #443	; 0x1bb
   1385c:	4a2a      	ldr	r2, [pc, #168]	; (13908 <log_output_msg_process+0x118>)
   1385e:	f018 fe08 	bl	2c472 <printk>
   13862:	f240 11bb 	movw	r1, #443	; 0x1bb
   13866:	4828      	ldr	r0, [pc, #160]	; (13908 <log_output_msg_process+0x118>)
   13868:	f019 f820 	bl	2c8ac <assert_post_action>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   1386c:	2600      	movs	r6, #0
		length = log_output->size;
   1386e:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   13870:	aa06      	add	r2, sp, #24
		length = log_output->size;
   13872:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   13874:	4628      	mov	r0, r5
   13876:	4633      	mov	r3, r6
   13878:	68a1      	ldr	r1, [r4, #8]
   1387a:	f019 f942 	bl	2cb02 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   1387e:	9a06      	ldr	r2, [sp, #24]
   13880:	6863      	ldr	r3, [r4, #4]
   13882:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   13884:	b14a      	cbz	r2, 1389a <log_output_msg_process+0xaa>
			eol = (log_output->buf[length - 1] == '\n');
   13886:	68a3      	ldr	r3, [r4, #8]
   13888:	4413      	add	r3, r2
   1388a:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   1388e:	f1a8 030a 	sub.w	r3, r8, #10
   13892:	f1d3 0800 	rsbs	r8, r3, #0
   13896:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(log_output);
   1389a:	4620      	mov	r0, r4
   1389c:	f019 faa2 	bl	2cde4 <log_output_flush>
		offset += length;
   138a0:	9b06      	ldr	r3, [sp, #24]
   138a2:	441e      	add	r6, r3
	} while (length > 0);
   138a4:	2b00      	cmp	r3, #0
   138a6:	d1e2      	bne.n	1386e <log_output_msg_process+0x7e>
	if (eol) {
   138a8:	f1b8 0f00 	cmp.w	r8, #0
   138ac:	d003      	beq.n	138b6 <log_output_msg_process+0xc6>
		print_formatted(log_output, "\r");
   138ae:	4620      	mov	r0, r4
   138b0:	4916      	ldr	r1, [pc, #88]	; (1390c <log_output_msg_process+0x11c>)
   138b2:	f7ff fe41 	bl	13538 <print_formatted>
	}

	log_output_flush(log_output);
   138b6:	4620      	mov	r0, r4
   138b8:	f019 fa94 	bl	2cde4 <log_output_flush>
}
   138bc:	b00a      	add	sp, #40	; 0x28
   138be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   138c2:	4628      	mov	r0, r5
   138c4:	f019 f91b 	bl	2cafe <log_msg_str_get>
   138c8:	4911      	ldr	r1, [pc, #68]	; (13910 <log_output_msg_process+0x120>)
   138ca:	4602      	mov	r2, r0
   138cc:	4620      	mov	r0, r4
   138ce:	f7ff fe33 	bl	13538 <print_formatted>
		length = sizeof(buf);
   138d2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   138d6:	aa05      	add	r2, sp, #20
   138d8:	4643      	mov	r3, r8
   138da:	4628      	mov	r0, r5
   138dc:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   138de:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   138e2:	f019 f90e 	bl	2cb02 <log_msg_hexdump_data_get>
		if (length) {
   138e6:	9a05      	ldr	r2, [sp, #20]
   138e8:	2a00      	cmp	r2, #0
   138ea:	d0a7      	beq.n	1383c <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
   138ec:	464b      	mov	r3, r9
   138ee:	4620      	mov	r0, r4
   138f0:	9600      	str	r6, [sp, #0]
   138f2:	a906      	add	r1, sp, #24
   138f4:	f7ff fede 	bl	136b4 <hexdump_line_print>
			offset += length;
   138f8:	9b05      	ldr	r3, [sp, #20]
   138fa:	4498      	add	r8, r3
		length = sizeof(buf);
   138fc:	e7eb      	b.n	138d6 <log_output_msg_process+0xe6>
   138fe:	bf00      	nop
   13900:	000309c3 	.word	0x000309c3
   13904:	0003049a 	.word	0x0003049a
   13908:	00030964 	.word	0x00030964
   1390c:	000309d4 	.word	0x000309d4
   13910:	000321fe 	.word	0x000321fe

00013914 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13914:	f242 730f 	movw	r3, #9999	; 0x270f
{
   13918:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1391a:	428b      	cmp	r3, r1
   1391c:	bf28      	it	cs
   1391e:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   13920:	6805      	ldr	r5, [r0, #0]
{
   13922:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13924:	2105      	movs	r1, #5
   13926:	4668      	mov	r0, sp
   13928:	4a0d      	ldr	r2, [pc, #52]	; (13960 <log_output_dropped_process+0x4c>)
   1392a:	f018 fdaf 	bl	2c48c <snprintk>
   1392e:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13930:	6863      	ldr	r3, [r4, #4]
   13932:	4628      	mov	r0, r5
   13934:	220b      	movs	r2, #11
   13936:	685b      	ldr	r3, [r3, #4]
   13938:	490a      	ldr	r1, [pc, #40]	; (13964 <log_output_dropped_process+0x50>)
   1393a:	f019 f8e9 	bl	2cb10 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   1393e:	6863      	ldr	r3, [r4, #4]
   13940:	4632      	mov	r2, r6
   13942:	4669      	mov	r1, sp
   13944:	4628      	mov	r0, r5
   13946:	685b      	ldr	r3, [r3, #4]
   13948:	f019 f8e2 	bl	2cb10 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1394c:	6863      	ldr	r3, [r4, #4]
   1394e:	221b      	movs	r2, #27
   13950:	4628      	mov	r0, r5
   13952:	685b      	ldr	r3, [r3, #4]
   13954:	4904      	ldr	r1, [pc, #16]	; (13968 <log_output_dropped_process+0x54>)
   13956:	f019 f8db 	bl	2cb10 <buffer_write>
		     log_output->control_block->ctx);
}
   1395a:	b002      	add	sp, #8
   1395c:	bd70      	pop	{r4, r5, r6, pc}
   1395e:	bf00      	nop
   13960:	0002feee 	.word	0x0002feee
   13964:	00030a12 	.word	0x00030a12
   13968:	000309f6 	.word	0x000309f6

0001396c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1396c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1396e:	2100      	movs	r1, #0
	timestamp_div = 1U;
   13970:	4a07      	ldr	r2, [pc, #28]	; (13990 <log_output_timestamp_freq_set+0x24>)
{
   13972:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   13974:	4c07      	ldr	r4, [pc, #28]	; (13994 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   13976:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13978:	42a0      	cmp	r0, r4
   1397a:	d804      	bhi.n	13986 <log_output_timestamp_freq_set+0x1a>
   1397c:	b101      	cbz	r1, 13980 <log_output_timestamp_freq_set+0x14>
   1397e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   13980:	4b05      	ldr	r3, [pc, #20]	; (13998 <log_output_timestamp_freq_set+0x2c>)
   13982:	6018      	str	r0, [r3, #0]
}
   13984:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   13986:	2101      	movs	r1, #1
		frequency /= 2U;
   13988:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1398a:	005b      	lsls	r3, r3, #1
   1398c:	e7f4      	b.n	13978 <log_output_timestamp_freq_set+0xc>
   1398e:	bf00      	nop
   13990:	20021544 	.word	0x20021544
   13994:	000f4240 	.word	0x000f4240
   13998:	20021540 	.word	0x20021540

0001399c <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   1399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1399e:	460d      	mov	r5, r1
   139a0:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   139a2:	4f06      	ldr	r7, [pc, #24]	; (139bc <char_out+0x20>)
   139a4:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   139a6:	42b4      	cmp	r4, r6
   139a8:	d101      	bne.n	139ae <char_out+0x12>
	}

	return length;
}
   139aa:	4628      	mov	r0, r5
   139ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   139ae:	6838      	ldr	r0, [r7, #0]
   139b0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   139b4:	6883      	ldr	r3, [r0, #8]
   139b6:	685b      	ldr	r3, [r3, #4]
   139b8:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   139ba:	e7f4      	b.n	139a6 <char_out+0xa>
   139bc:	2002155c 	.word	0x2002155c

000139c0 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   139c0:	4801      	ldr	r0, [pc, #4]	; (139c8 <panic+0x8>)
   139c2:	f019 ba0f 	b.w	2cde4 <log_output_flush>
   139c6:	bf00      	nop
   139c8:	0002f2a0 	.word	0x0002f2a0

000139cc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   139cc:	4801      	ldr	r0, [pc, #4]	; (139d4 <dropped+0x8>)
   139ce:	f7ff bfa1 	b.w	13914 <log_output_dropped_process>
   139d2:	bf00      	nop
   139d4:	0002f2a0 	.word	0x0002f2a0

000139d8 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   139d8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   139da:	4806      	ldr	r0, [pc, #24]	; (139f4 <log_backend_uart_init+0x1c>)
   139dc:	f00e fe06 	bl	225ec <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   139e0:	4b05      	ldr	r3, [pc, #20]	; (139f8 <log_backend_uart_init+0x20>)
   139e2:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
   139e4:	b928      	cbnz	r0, 139f2 <log_backend_uart_init+0x1a>
   139e6:	212d      	movs	r1, #45	; 0x2d
   139e8:	4b04      	ldr	r3, [pc, #16]	; (139fc <log_backend_uart_init+0x24>)
   139ea:	4a05      	ldr	r2, [pc, #20]	; (13a00 <log_backend_uart_init+0x28>)
   139ec:	4805      	ldr	r0, [pc, #20]	; (13a04 <log_backend_uart_init+0x2c>)
   139ee:	f012 f9a3 	bl	25d38 <__assert_func>
}
   139f2:	bd08      	pop	{r3, pc}
   139f4:	00030a1e 	.word	0x00030a1e
   139f8:	2002155c 	.word	0x2002155c
   139fc:	00030a25 	.word	0x00030a25
   13a00:	00030a7c 	.word	0x00030a7c
   13a04:	00030a36 	.word	0x00030a36

00013a08 <put>:
{
   13a08:	b510      	push	{r4, lr}
   13a0a:	460c      	mov	r4, r1
	log_msg_get(msg);
   13a0c:	4608      	mov	r0, r1
   13a0e:	f019 f83c 	bl	2ca8a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   13a12:	4621      	mov	r1, r4
   13a14:	4804      	ldr	r0, [pc, #16]	; (13a28 <put+0x20>)
   13a16:	220f      	movs	r2, #15
   13a18:	f7ff feea 	bl	137f0 <log_output_msg_process>
	log_msg_put(msg);
   13a1c:	4620      	mov	r0, r4
}
   13a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13a22:	f019 b85d 	b.w	2cae0 <log_msg_put>
   13a26:	bf00      	nop
   13a28:	0002f2a0 	.word	0x0002f2a0

00013a2c <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   13a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13a30:	f8df 909c 	ldr.w	r9, [pc, #156]	; 13ad0 <z_impl_zsock_socket+0xa4>
{
   13a34:	4605      	mov	r5, r0
   13a36:	460e      	mov	r6, r1
   13a38:	4617      	mov	r7, r2
   13a3a:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13a3c:	4c1e      	ldr	r4, [pc, #120]	; (13ab8 <z_impl_zsock_socket+0x8c>)
   13a3e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13ad4 <z_impl_zsock_socket+0xa8>
   13a42:	454c      	cmp	r4, r9
   13a44:	d90c      	bls.n	13a60 <z_impl_zsock_socket+0x34>
   13a46:	491d      	ldr	r1, [pc, #116]	; (13abc <z_impl_zsock_socket+0x90>)
   13a48:	23c0      	movs	r3, #192	; 0xc0
   13a4a:	4642      	mov	r2, r8
   13a4c:	481c      	ldr	r0, [pc, #112]	; (13ac0 <z_impl_zsock_socket+0x94>)
   13a4e:	f018 fd10 	bl	2c472 <printk>
   13a52:	481c      	ldr	r0, [pc, #112]	; (13ac4 <z_impl_zsock_socket+0x98>)
   13a54:	f018 fd0d 	bl	2c472 <printk>
   13a58:	21c0      	movs	r1, #192	; 0xc0
   13a5a:	4640      	mov	r0, r8
   13a5c:	f018 ff26 	bl	2c8ac <assert_post_action>
   13a60:	4554      	cmp	r4, sl
   13a62:	d307      	bcc.n	13a74 <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   13a64:	f019 fb53 	bl	2d10e <__errno>
   13a68:	236a      	movs	r3, #106	; 0x6a
   13a6a:	6003      	str	r3, [r0, #0]
	return -1;
}
   13a6c:	f04f 30ff 	mov.w	r0, #4294967295
   13a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   13a74:	6823      	ldr	r3, [r4, #0]
   13a76:	42ab      	cmp	r3, r5
   13a78:	d000      	beq.n	13a7c <z_impl_zsock_socket+0x50>
   13a7a:	b9db      	cbnz	r3, 13ab4 <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   13a7c:	6863      	ldr	r3, [r4, #4]
   13a7e:	b963      	cbnz	r3, 13a9a <z_impl_zsock_socket+0x6e>
   13a80:	4911      	ldr	r1, [pc, #68]	; (13ac8 <z_impl_zsock_socket+0x9c>)
   13a82:	23c6      	movs	r3, #198	; 0xc6
   13a84:	4642      	mov	r2, r8
   13a86:	480e      	ldr	r0, [pc, #56]	; (13ac0 <z_impl_zsock_socket+0x94>)
   13a88:	f018 fcf3 	bl	2c472 <printk>
   13a8c:	480f      	ldr	r0, [pc, #60]	; (13acc <z_impl_zsock_socket+0xa0>)
   13a8e:	f018 fcf0 	bl	2c472 <printk>
   13a92:	21c6      	movs	r1, #198	; 0xc6
   13a94:	4640      	mov	r0, r8
   13a96:	f018 ff09 	bl	2c8ac <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   13a9a:	463a      	mov	r2, r7
   13a9c:	4631      	mov	r1, r6
   13a9e:	4628      	mov	r0, r5
   13aa0:	6863      	ldr	r3, [r4, #4]
   13aa2:	4798      	blx	r3
   13aa4:	b130      	cbz	r0, 13ab4 <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   13aa6:	463a      	mov	r2, r7
   13aa8:	4631      	mov	r1, r6
   13aaa:	4628      	mov	r0, r5
   13aac:	68a3      	ldr	r3, [r4, #8]
}
   13aae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   13ab2:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13ab4:	340c      	adds	r4, #12
   13ab6:	e7c4      	b.n	13a42 <z_impl_zsock_socket+0x16>
   13ab8:	0002f028 	.word	0x0002f028
   13abc:	00030b18 	.word	0x00030b18
   13ac0:	0003049a 	.word	0x0003049a
   13ac4:	00030b45 	.word	0x00030b45
   13ac8:	00030afe 	.word	0x00030afe
   13acc:	00030ac7 	.word	0x00030ac7
   13ad0:	0002f034 	.word	0x0002f034
   13ad4:	00030aca 	.word	0x00030aca

00013ad8 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   13ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   13adc:	1e14      	subs	r4, r2, #0
{
   13ade:	b09b      	sub	sp, #108	; 0x6c
   13ae0:	4606      	mov	r6, r0
   13ae2:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   13ae4:	db30      	blt.n	13b48 <z_impl_zsock_poll+0x70>
   13ae6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   13aea:	f240 30e7 	movw	r0, #999	; 0x3e7
   13aee:	2100      	movs	r1, #0
   13af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13af4:	2300      	movs	r3, #0
   13af6:	fbc5 0104 	smlal	r0, r1, r5, r4
   13afa:	f7f8 fead 	bl	c858 <__aeabi_uldivmod>
   13afe:	4682      	mov	sl, r0
   13b00:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   13b02:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   13b04:	4650      	mov	r0, sl
   13b06:	4659      	mov	r1, fp
   13b08:	f01b f84c 	bl	2eba4 <z_timeout_end_calc>

	pev = poll_events;
   13b0c:	ab0b      	add	r3, sp, #44	; 0x2c
   13b0e:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   13b10:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   13b12:	4633      	mov	r3, r6
	bool offload = false;
   13b14:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   13b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   13b1a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   13b1e:	f1b9 0f00 	cmp.w	r9, #0
   13b22:	d118      	bne.n	13b56 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   13b24:	f1b8 0f00 	cmp.w	r8, #0
   13b28:	d049      	beq.n	13bbe <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   13b2a:	9b03      	ldr	r3, [sp, #12]
   13b2c:	9401      	str	r4, [sp, #4]
   13b2e:	9300      	str	r3, [sp, #0]
   13b30:	f44f 7282 	mov.w	r2, #260	; 0x104
   13b34:	4633      	mov	r3, r6
   13b36:	4629      	mov	r1, r5
   13b38:	4638      	mov	r0, r7
   13b3a:	f019 f998 	bl	2ce6e <z_fdtable_call_ioctl>
   13b3e:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   13b40:	4620      	mov	r0, r4
   13b42:	b01b      	add	sp, #108	; 0x6c
   13b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   13b48:	f04f 3aff 	mov.w	sl, #4294967295
   13b4c:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   13b50:	f04f 34ff 	mov.w	r4, #4294967295
   13b54:	e7d5      	b.n	13b02 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   13b56:	6818      	ldr	r0, [r3, #0]
   13b58:	2800      	cmp	r0, #0
   13b5a:	db2c      	blt.n	13bb6 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   13b5c:	a90a      	add	r1, sp, #40	; 0x28
   13b5e:	9306      	str	r3, [sp, #24]
   13b60:	f7fe f9e6 	bl	11f30 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   13b64:	9b06      	ldr	r3, [sp, #24]
   13b66:	4601      	mov	r1, r0
   13b68:	b328      	cbz	r0, 13bb6 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   13b6a:	aa1a      	add	r2, sp, #104	; 0x68
   13b6c:	9201      	str	r2, [sp, #4]
   13b6e:	aa09      	add	r2, sp, #36	; 0x24
   13b70:	9200      	str	r2, [sp, #0]
   13b72:	9006      	str	r0, [sp, #24]
   13b74:	f44f 7281 	mov.w	r2, #258	; 0x102
   13b78:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b7a:	9307      	str	r3, [sp, #28]
   13b7c:	f019 f977 	bl	2ce6e <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   13b80:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   13b84:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   13b86:	9b07      	ldr	r3, [sp, #28]
   13b88:	d011      	beq.n	13bae <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   13b8a:	f110 0f12 	cmn.w	r0, #18
   13b8e:	9906      	ldr	r1, [sp, #24]
   13b90:	d105      	bne.n	13b9e <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   13b92:	b90f      	cbnz	r7, 13b98 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   13b94:	460d      	mov	r5, r1
   13b96:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   13b98:	f04f 0801 	mov.w	r8, #1
   13b9c:	e00b      	b.n	13bb6 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   13b9e:	b150      	cbz	r0, 13bb6 <z_impl_zsock_poll+0xde>
   13ba0:	9203      	str	r2, [sp, #12]
				errno = -result;
   13ba2:	f019 fab4 	bl	2d10e <__errno>
   13ba6:	9a03      	ldr	r2, [sp, #12]
   13ba8:	4252      	negs	r2, r2
   13baa:	6002      	str	r2, [r0, #0]
				return -1;
   13bac:	e03e      	b.n	13c2c <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   13bae:	f04f 0a00 	mov.w	sl, #0
   13bb2:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   13bb6:	3308      	adds	r3, #8
   13bb8:	f109 39ff 	add.w	r9, r9, #4294967295
   13bbc:	e7af      	b.n	13b1e <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13bbe:	ea5a 030b 	orrs.w	r3, sl, fp
   13bc2:	d016      	beq.n	13bf2 <z_impl_zsock_poll+0x11a>
   13bc4:	f1bb 3fff 	cmp.w	fp, #4294967295
   13bc8:	bf08      	it	eq
   13bca:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13bce:	d010      	beq.n	13bf2 <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   13bd0:	f011 fc60 	bl	25494 <z_tick_get>
   13bd4:	9b04      	ldr	r3, [sp, #16]
   13bd6:	ebb3 0a00 	subs.w	sl, r3, r0
   13bda:	9b05      	ldr	r3, [sp, #20]
   13bdc:	eb63 0b01 	sbc.w	fp, r3, r1
   13be0:	f1ba 0f00 	cmp.w	sl, #0
   13be4:	f17b 0300 	sbcs.w	r3, fp, #0
   13be8:	bfbc      	itt	lt
   13bea:	f04f 0a00 	movlt.w	sl, #0
   13bee:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   13bf2:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   13bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
   13bf8:	ac0b      	add	r4, sp, #44	; 0x2c
   13bfa:	4b34      	ldr	r3, [pc, #208]	; (13ccc <z_impl_zsock_poll+0x1f4>)
   13bfc:	1b09      	subs	r1, r1, r4
   13bfe:	1089      	asrs	r1, r1, #2
   13c00:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   13c02:	465b      	mov	r3, fp
   13c04:	4652      	mov	r2, sl
   13c06:	4620      	mov	r0, r4
   13c08:	f011 ff0c 	bl	25a24 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   13c0c:	f100 030b 	add.w	r3, r0, #11
   13c10:	2b0b      	cmp	r3, #11
   13c12:	4607      	mov	r7, r0
   13c14:	d806      	bhi.n	13c24 <z_impl_zsock_poll+0x14c>
   13c16:	f640 0581 	movw	r5, #2177	; 0x881
   13c1a:	40dd      	lsrs	r5, r3
   13c1c:	43ed      	mvns	r5, r5
   13c1e:	f015 0501 	ands.w	r5, r5, #1
   13c22:	d006      	beq.n	13c32 <z_impl_zsock_poll+0x15a>
			errno = -ret;
   13c24:	f019 fa73 	bl	2d10e <__errno>
   13c28:	427f      	negs	r7, r7
   13c2a:	6007      	str	r7, [r0, #0]
			return -1;
   13c2c:	f04f 34ff 	mov.w	r4, #4294967295
   13c30:	e786      	b.n	13b40 <z_impl_zsock_poll+0x68>
		pev = poll_events;
   13c32:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   13c34:	46b0      	mov	r8, r6
		ret = 0;
   13c36:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   13c38:	9f03      	ldr	r7, [sp, #12]
   13c3a:	b9ef      	cbnz	r7, 13c78 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   13c3c:	2d00      	cmp	r5, #0
   13c3e:	f43f af7f 	beq.w	13b40 <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   13c42:	2c00      	cmp	r4, #0
   13c44:	f73f af7c 	bgt.w	13b40 <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13c48:	ea5a 030b 	orrs.w	r3, sl, fp
   13c4c:	f43f af78 	beq.w	13b40 <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13c50:	f1bb 3fff 	cmp.w	fp, #4294967295
   13c54:	bf08      	it	eq
   13c56:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13c5a:	d0cc      	beq.n	13bf6 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   13c5c:	f011 fc1a 	bl	25494 <z_tick_get>
   13c60:	9b04      	ldr	r3, [sp, #16]
   13c62:	ebb3 0a00 	subs.w	sl, r3, r0
   13c66:	9b05      	ldr	r3, [sp, #20]
   13c68:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   13c6c:	f1ba 0f01 	cmp.w	sl, #1
   13c70:	f17b 0300 	sbcs.w	r3, fp, #0
   13c74:	dabf      	bge.n	13bf6 <z_impl_zsock_poll+0x11e>
   13c76:	e763      	b.n	13b40 <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   13c78:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   13c7c:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   13c80:	2800      	cmp	r0, #0
   13c82:	db1c      	blt.n	13cbe <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   13c84:	a90a      	add	r1, sp, #40	; 0x28
   13c86:	f7fe f953 	bl	11f30 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   13c8a:	4601      	mov	r1, r0
   13c8c:	b920      	cbnz	r0, 13c98 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   13c8e:	2220      	movs	r2, #32
   13c90:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   13c94:	3401      	adds	r4, #1
   13c96:	e012      	b.n	13cbe <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   13c98:	ab09      	add	r3, sp, #36	; 0x24
   13c9a:	f240 1203 	movw	r2, #259	; 0x103
   13c9e:	9300      	str	r3, [sp, #0]
   13ca0:	980a      	ldr	r0, [sp, #40]	; 0x28
   13ca2:	4643      	mov	r3, r8
   13ca4:	f019 f8e3 	bl	2ce6e <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   13ca8:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   13cac:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   13cae:	d00a      	beq.n	13cc6 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   13cb0:	2800      	cmp	r0, #0
   13cb2:	f47f af75 	bne.w	13ba0 <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   13cb6:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   13cba:	2a00      	cmp	r2, #0
   13cbc:	d1ea      	bne.n	13c94 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   13cbe:	f108 0808 	add.w	r8, r8, #8
   13cc2:	3f01      	subs	r7, #1
   13cc4:	e7b9      	b.n	13c3a <z_impl_zsock_poll+0x162>
				retry = true;
   13cc6:	2501      	movs	r5, #1
   13cc8:	e7f9      	b.n	13cbe <z_impl_zsock_poll+0x1e6>
   13cca:	bf00      	nop
   13ccc:	cccccccd 	.word	0xcccccccd

00013cd0 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   13cd0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   13cd2:	4605      	mov	r5, r0
   13cd4:	b948      	cbnz	r0, 13cea <socket_offload_dns_register+0x1a>
   13cd6:	490c      	ldr	r1, [pc, #48]	; (13d08 <socket_offload_dns_register+0x38>)
   13cd8:	480c      	ldr	r0, [pc, #48]	; (13d0c <socket_offload_dns_register+0x3c>)
   13cda:	2313      	movs	r3, #19
   13cdc:	4a0c      	ldr	r2, [pc, #48]	; (13d10 <socket_offload_dns_register+0x40>)
   13cde:	f018 fbc8 	bl	2c472 <printk>
   13ce2:	2113      	movs	r1, #19
   13ce4:	480a      	ldr	r0, [pc, #40]	; (13d10 <socket_offload_dns_register+0x40>)
   13ce6:	f018 fde1 	bl	2c8ac <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   13cea:	4c0a      	ldr	r4, [pc, #40]	; (13d14 <socket_offload_dns_register+0x44>)
   13cec:	6822      	ldr	r2, [r4, #0]
   13cee:	b14a      	cbz	r2, 13d04 <socket_offload_dns_register+0x34>
   13cf0:	4909      	ldr	r1, [pc, #36]	; (13d18 <socket_offload_dns_register+0x48>)
   13cf2:	4806      	ldr	r0, [pc, #24]	; (13d0c <socket_offload_dns_register+0x3c>)
   13cf4:	2314      	movs	r3, #20
   13cf6:	4a06      	ldr	r2, [pc, #24]	; (13d10 <socket_offload_dns_register+0x40>)
   13cf8:	f018 fbbb 	bl	2c472 <printk>
   13cfc:	2114      	movs	r1, #20
   13cfe:	4804      	ldr	r0, [pc, #16]	; (13d10 <socket_offload_dns_register+0x40>)
   13d00:	f018 fdd4 	bl	2c8ac <assert_post_action>

	dns_offload = ops;
   13d04:	6025      	str	r5, [r4, #0]
}
   13d06:	bd38      	pop	{r3, r4, r5, pc}
   13d08:	00032e06 	.word	0x00032e06
   13d0c:	0003049a 	.word	0x0003049a
   13d10:	00030b64 	.word	0x00030b64
   13d14:	20021560 	.word	0x20021560
   13d18:	00030b9f 	.word	0x00030b9f

00013d1c <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   13d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   13d20:	4c13      	ldr	r4, [pc, #76]	; (13d70 <socket_offload_getaddrinfo+0x54>)
{
   13d22:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   13d24:	6823      	ldr	r3, [r4, #0]
{
   13d26:	4605      	mov	r5, r0
   13d28:	460e      	mov	r6, r1
   13d2a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   13d2c:	b94b      	cbnz	r3, 13d42 <socket_offload_getaddrinfo+0x26>
   13d2e:	4911      	ldr	r1, [pc, #68]	; (13d74 <socket_offload_getaddrinfo+0x58>)
   13d30:	4811      	ldr	r0, [pc, #68]	; (13d78 <socket_offload_getaddrinfo+0x5c>)
   13d32:	231d      	movs	r3, #29
   13d34:	4a11      	ldr	r2, [pc, #68]	; (13d7c <socket_offload_getaddrinfo+0x60>)
   13d36:	f018 fb9c 	bl	2c472 <printk>
   13d3a:	211d      	movs	r1, #29
   13d3c:	480f      	ldr	r0, [pc, #60]	; (13d7c <socket_offload_getaddrinfo+0x60>)
   13d3e:	f018 fdb5 	bl	2c8ac <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   13d42:	6823      	ldr	r3, [r4, #0]
   13d44:	681b      	ldr	r3, [r3, #0]
   13d46:	b94b      	cbnz	r3, 13d5c <socket_offload_getaddrinfo+0x40>
   13d48:	490d      	ldr	r1, [pc, #52]	; (13d80 <socket_offload_getaddrinfo+0x64>)
   13d4a:	480b      	ldr	r0, [pc, #44]	; (13d78 <socket_offload_getaddrinfo+0x5c>)
   13d4c:	231e      	movs	r3, #30
   13d4e:	4a0b      	ldr	r2, [pc, #44]	; (13d7c <socket_offload_getaddrinfo+0x60>)
   13d50:	f018 fb8f 	bl	2c472 <printk>
   13d54:	211e      	movs	r1, #30
   13d56:	4809      	ldr	r0, [pc, #36]	; (13d7c <socket_offload_getaddrinfo+0x60>)
   13d58:	f018 fda8 	bl	2c8ac <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   13d5c:	6823      	ldr	r3, [r4, #0]
   13d5e:	463a      	mov	r2, r7
   13d60:	681c      	ldr	r4, [r3, #0]
   13d62:	4631      	mov	r1, r6
   13d64:	4643      	mov	r3, r8
   13d66:	4628      	mov	r0, r5
   13d68:	46a4      	mov	ip, r4
}
   13d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   13d6e:	4760      	bx	ip
   13d70:	20021560 	.word	0x20021560
   13d74:	00030bba 	.word	0x00030bba
   13d78:	0003049a 	.word	0x0003049a
   13d7c:	00030b64 	.word	0x00030b64
   13d80:	00030bc6 	.word	0x00030bc6

00013d84 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   13d84:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   13d86:	4c10      	ldr	r4, [pc, #64]	; (13dc8 <socket_offload_freeaddrinfo+0x44>)
{
   13d88:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   13d8a:	6823      	ldr	r3, [r4, #0]
   13d8c:	b94b      	cbnz	r3, 13da2 <socket_offload_freeaddrinfo+0x1e>
   13d8e:	490f      	ldr	r1, [pc, #60]	; (13dcc <socket_offload_freeaddrinfo+0x48>)
   13d90:	480f      	ldr	r0, [pc, #60]	; (13dd0 <socket_offload_freeaddrinfo+0x4c>)
   13d92:	2325      	movs	r3, #37	; 0x25
   13d94:	4a0f      	ldr	r2, [pc, #60]	; (13dd4 <socket_offload_freeaddrinfo+0x50>)
   13d96:	f018 fb6c 	bl	2c472 <printk>
   13d9a:	2125      	movs	r1, #37	; 0x25
   13d9c:	480d      	ldr	r0, [pc, #52]	; (13dd4 <socket_offload_freeaddrinfo+0x50>)
   13d9e:	f018 fd85 	bl	2c8ac <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   13da2:	6823      	ldr	r3, [r4, #0]
   13da4:	685b      	ldr	r3, [r3, #4]
   13da6:	b94b      	cbnz	r3, 13dbc <socket_offload_freeaddrinfo+0x38>
   13da8:	490b      	ldr	r1, [pc, #44]	; (13dd8 <socket_offload_freeaddrinfo+0x54>)
   13daa:	4809      	ldr	r0, [pc, #36]	; (13dd0 <socket_offload_freeaddrinfo+0x4c>)
   13dac:	2326      	movs	r3, #38	; 0x26
   13dae:	4a09      	ldr	r2, [pc, #36]	; (13dd4 <socket_offload_freeaddrinfo+0x50>)
   13db0:	f018 fb5f 	bl	2c472 <printk>
   13db4:	2126      	movs	r1, #38	; 0x26
   13db6:	4807      	ldr	r0, [pc, #28]	; (13dd4 <socket_offload_freeaddrinfo+0x50>)
   13db8:	f018 fd78 	bl	2c8ac <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   13dbc:	6823      	ldr	r3, [r4, #0]
   13dbe:	4628      	mov	r0, r5
}
   13dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   13dc4:	685b      	ldr	r3, [r3, #4]
   13dc6:	4718      	bx	r3
   13dc8:	20021560 	.word	0x20021560
   13dcc:	00030bba 	.word	0x00030bba
   13dd0:	0003049a 	.word	0x0003049a
   13dd4:	00030b64 	.word	0x00030b64
   13dd8:	00030bdf 	.word	0x00030bdf

00013ddc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13ddc:	b508      	push	{r3, lr}
   13dde:	4806      	ldr	r0, [pc, #24]	; (13df8 <uart_console_init+0x1c>)
   13de0:	f00e fc04 	bl	225ec <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13de4:	4b05      	ldr	r3, [pc, #20]	; (13dfc <uart_console_init+0x20>)
   13de6:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   13de8:	4805      	ldr	r0, [pc, #20]	; (13e00 <uart_console_init+0x24>)
   13dea:	f001 fa97 	bl	1531c <__stdout_hook_install>
	__printk_hook_install(console_out);
   13dee:	4804      	ldr	r0, [pc, #16]	; (13e00 <uart_console_init+0x24>)
   13df0:	f7fe f994 	bl	1211c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   13df4:	2000      	movs	r0, #0
   13df6:	bd08      	pop	{r3, pc}
   13df8:	00030a1e 	.word	0x00030a1e
   13dfc:	20021564 	.word	0x20021564
   13e00:	00013e05 	.word	0x00013e05

00013e04 <console_out>:
	if ('\n' == c) {
   13e04:	280a      	cmp	r0, #10
{
   13e06:	b538      	push	{r3, r4, r5, lr}
   13e08:	4604      	mov	r4, r0
   13e0a:	4d07      	ldr	r5, [pc, #28]	; (13e28 <console_out+0x24>)
	if ('\n' == c) {
   13e0c:	d104      	bne.n	13e18 <console_out+0x14>
   13e0e:	6828      	ldr	r0, [r5, #0]
   13e10:	6883      	ldr	r3, [r0, #8]
   13e12:	210d      	movs	r1, #13
   13e14:	685b      	ldr	r3, [r3, #4]
   13e16:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   13e18:	6828      	ldr	r0, [r5, #0]
   13e1a:	6883      	ldr	r3, [r0, #8]
   13e1c:	b2e1      	uxtb	r1, r4
   13e1e:	685b      	ldr	r3, [r3, #4]
   13e20:	4798      	blx	r3
}
   13e22:	4620      	mov	r0, r4
   13e24:	bd38      	pop	{r3, r4, r5, pc}
   13e26:	bf00      	nop
   13e28:	20021564 	.word	0x20021564

00013e2c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13e30:	4c0e      	ldr	r4, [pc, #56]	; (13e6c <onoff_start+0x40>)
{
   13e32:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13e34:	1b05      	subs	r5, r0, r4
   13e36:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   13e3a:	250c      	movs	r5, #12
   13e3c:	435d      	muls	r5, r3
   13e3e:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   13e42:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   13e44:	4420      	add	r0, r4
   13e46:	2140      	movs	r1, #64	; 0x40
   13e48:	f019 f89d 	bl	2cf86 <set_starting_state>
	if (err < 0) {
   13e4c:	1e01      	subs	r1, r0, #0
   13e4e:	db08      	blt.n	13e62 <onoff_start+0x36>
	subdata->cb = data->cb;
   13e50:	4b07      	ldr	r3, [pc, #28]	; (13e70 <onoff_start+0x44>)
   13e52:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
   13e54:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   13e58:	4b06      	ldr	r3, [pc, #24]	; (13e74 <onoff_start+0x48>)
   13e5a:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   13e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   13e60:	4718      	bx	r3
		notify(mgr, err);
   13e62:	4638      	mov	r0, r7
   13e64:	4633      	mov	r3, r6
}
   13e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   13e6a:	4718      	bx	r3
   13e6c:	20021578 	.word	0x20021578
   13e70:	0002cfe9 	.word	0x0002cfe9
   13e74:	0002f2c4 	.word	0x0002f2c4

00013e78 <get_status>:
{
   13e78:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e7a:	b2cc      	uxtb	r4, r1
   13e7c:	2c01      	cmp	r4, #1
{
   13e7e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e80:	d909      	bls.n	13e96 <get_status+0x1e>
   13e82:	4909      	ldr	r1, [pc, #36]	; (13ea8 <get_status+0x30>)
   13e84:	4809      	ldr	r0, [pc, #36]	; (13eac <get_status+0x34>)
   13e86:	237d      	movs	r3, #125	; 0x7d
   13e88:	4a09      	ldr	r2, [pc, #36]	; (13eb0 <get_status+0x38>)
   13e8a:	f018 faf2 	bl	2c472 <printk>
   13e8e:	217d      	movs	r1, #125	; 0x7d
   13e90:	4807      	ldr	r0, [pc, #28]	; (13eb0 <get_status+0x38>)
   13e92:	f018 fd0b 	bl	2c8ac <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13e96:	210c      	movs	r1, #12
   13e98:	68eb      	ldr	r3, [r5, #12]
   13e9a:	fb04 3401 	mla	r4, r4, r1, r3
   13e9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   13ea0:	f000 0007 	and.w	r0, r0, #7
   13ea4:	bd38      	pop	{r3, r4, r5, pc}
   13ea6:	bf00      	nop
   13ea8:	00030c3c 	.word	0x00030c3c
   13eac:	0003049a 	.word	0x0003049a
   13eb0:	00030bff 	.word	0x00030bff

00013eb4 <stop>:
{
   13eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13eb6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13eb8:	2c01      	cmp	r4, #1
{
   13eba:	4605      	mov	r5, r0
   13ebc:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13ebe:	68c7      	ldr	r7, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13ec0:	d90b      	bls.n	13eda <stop+0x26>
   13ec2:	4919      	ldr	r1, [pc, #100]	; (13f28 <stop+0x74>)
   13ec4:	4819      	ldr	r0, [pc, #100]	; (13f2c <stop+0x78>)
   13ec6:	f240 1345 	movw	r3, #325	; 0x145
   13eca:	4a19      	ldr	r2, [pc, #100]	; (13f30 <stop+0x7c>)
   13ecc:	f018 fad1 	bl	2c472 <printk>
   13ed0:	f240 1145 	movw	r1, #325	; 0x145
   13ed4:	4816      	ldr	r0, [pc, #88]	; (13f30 <stop+0x7c>)
   13ed6:	f018 fce9 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   13eda:	f04f 0320 	mov.w	r3, #32
   13ede:	f3ef 8211 	mrs	r2, BASEPRI
   13ee2:	f383 8811 	msr	BASEPRI, r3
   13ee6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13eea:	230c      	movs	r3, #12
   13eec:	fb03 7104 	mla	r1, r3, r4, r7
   13ef0:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13ef2:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   13ef6:	d001      	beq.n	13efc <stop+0x48>
   13ef8:	428e      	cmp	r6, r1
   13efa:	d111      	bne.n	13f20 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13efc:	2101      	movs	r1, #1
	int err = 0;
   13efe:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13f00:	fb03 7304 	mla	r3, r3, r4, r7
   13f04:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   13f06:	f382 8811 	msr	BASEPRI, r2
   13f0a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   13f0e:	b930      	cbnz	r0, 13f1e <stop+0x6a>
	get_sub_config(dev, type)->stop();
   13f10:	230c      	movs	r3, #12
   13f12:	6869      	ldr	r1, [r5, #4]
   13f14:	fb03 1404 	mla	r4, r3, r4, r1
   13f18:	6863      	ldr	r3, [r4, #4]
   13f1a:	4798      	blx	r3
	return 0;
   13f1c:	2000      	movs	r0, #0
}
   13f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   13f20:	f04f 30ff 	mov.w	r0, #4294967295
   13f24:	e7ef      	b.n	13f06 <stop+0x52>
   13f26:	bf00      	nop
   13f28:	00030c3c 	.word	0x00030c3c
   13f2c:	0003049a 	.word	0x0003049a
   13f30:	00030bff 	.word	0x00030bff

00013f34 <onoff_stop>:
{
   13f34:	b570      	push	{r4, r5, r6, lr}
   13f36:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13f38:	4906      	ldr	r1, [pc, #24]	; (13f54 <onoff_stop+0x20>)
{
   13f3a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13f3c:	1a41      	subs	r1, r0, r1
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   13f3e:	1149      	asrs	r1, r1, #5
   13f40:	2240      	movs	r2, #64	; 0x40
   13f42:	4805      	ldr	r0, [pc, #20]	; (13f58 <onoff_stop+0x24>)
   13f44:	f7ff ffb6 	bl	13eb4 <stop>
	notify(mgr, res);
   13f48:	462b      	mov	r3, r5
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   13f4a:	4601      	mov	r1, r0
	notify(mgr, res);
   13f4c:	4620      	mov	r0, r4
}
   13f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13f52:	4718      	bx	r3
   13f54:	20021578 	.word	0x20021578
   13f58:	20020a60 	.word	0x20020a60

00013f5c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   13f5c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13f5e:	2200      	movs	r2, #0
   13f60:	2101      	movs	r1, #1
{
   13f62:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13f64:	2005      	movs	r0, #5
   13f66:	f000 fb93 	bl	14690 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   13f6a:	2005      	movs	r0, #5
   13f6c:	f000 fb72 	bl	14654 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   13f70:	480f      	ldr	r0, [pc, #60]	; (13fb0 <clk_init+0x54>)
   13f72:	f00e f809 	bl	21f88 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13f76:	4b0f      	ldr	r3, [pc, #60]	; (13fb4 <clk_init+0x58>)
   13f78:	4298      	cmp	r0, r3
   13f7a:	d115      	bne.n	13fa8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13f7c:	f00e f828 	bl	21fd0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   13f80:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   13f82:	490d      	ldr	r1, [pc, #52]	; (13fb8 <clk_init+0x5c>)
   13f84:	4630      	mov	r0, r6
   13f86:	f018 facf 	bl	2c528 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   13f8a:	2800      	cmp	r0, #0
   13f8c:	db0b      	blt.n	13fa6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13f8e:	2501      	movs	r5, #1
   13f90:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   13f92:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13f94:	4908      	ldr	r1, [pc, #32]	; (13fb8 <clk_init+0x5c>)
   13f96:	f104 0020 	add.w	r0, r4, #32
   13f9a:	f018 fac5 	bl	2c528 <onoff_manager_init>
		if (err < 0) {
   13f9e:	2800      	cmp	r0, #0
   13fa0:	db01      	blt.n	13fa6 <clk_init+0x4a>
	}

	return 0;
   13fa2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13fa4:	6565      	str	r5, [r4, #84]	; 0x54
}
   13fa6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   13fa8:	f06f 0004 	mvn.w	r0, #4
   13fac:	e7fb      	b.n	13fa6 <clk_init+0x4a>
   13fae:	bf00      	nop
   13fb0:	00013ff9 	.word	0x00013ff9
   13fb4:	0bad0000 	.word	0x0bad0000
   13fb8:	0002f2dc 	.word	0x0002f2dc

00013fbc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   13fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   13fbe:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   13fc0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   13fc2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   13fc4:	434b      	muls	r3, r1
   13fc6:	480a      	ldr	r0, [pc, #40]	; (13ff0 <clkstarted_handle.constprop.0+0x34>)
   13fc8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   13fca:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   13fcc:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   13fd0:	4418      	add	r0, r3
	sub_data->cb = NULL;
   13fd2:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   13fd4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   13fd6:	f018 fff4 	bl	2cfc2 <set_on_state>
	if (callback) {
   13fda:	b135      	cbz	r5, 13fea <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   13fdc:	462b      	mov	r3, r5
   13fde:	9a01      	ldr	r2, [sp, #4]
   13fe0:	4804      	ldr	r0, [pc, #16]	; (13ff4 <clkstarted_handle.constprop.0+0x38>)
}
   13fe2:	b002      	add	sp, #8
   13fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13fe8:	4718      	bx	r3
}
   13fea:	b002      	add	sp, #8
   13fec:	bd70      	pop	{r4, r5, r6, pc}
   13fee:	bf00      	nop
   13ff0:	20021578 	.word	0x20021578
   13ff4:	20020a60 	.word	0x20020a60

00013ff8 <clock_event_handler>:
	switch (event) {
   13ff8:	2801      	cmp	r0, #1
{
   13ffa:	b508      	push	{r3, lr}
	switch (event) {
   13ffc:	d006      	beq.n	1400c <clock_event_handler+0x14>
   13ffe:	2803      	cmp	r0, #3
   14000:	d008      	beq.n	14014 <clock_event_handler+0x1c>
   14002:	b9a8      	cbnz	r0, 14030 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   14004:	4b10      	ldr	r3, [pc, #64]	; (14048 <clock_event_handler+0x50>)
   14006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14008:	075b      	lsls	r3, r3, #29
   1400a:	d11b      	bne.n	14044 <clock_event_handler+0x4c>
}
   1400c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14010:	f7ff bfd4 	b.w	13fbc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   14014:	490d      	ldr	r1, [pc, #52]	; (1404c <clock_event_handler+0x54>)
   14016:	f240 2356 	movw	r3, #598	; 0x256
   1401a:	4a0d      	ldr	r2, [pc, #52]	; (14050 <clock_event_handler+0x58>)
   1401c:	480d      	ldr	r0, [pc, #52]	; (14054 <clock_event_handler+0x5c>)
   1401e:	f018 fa28 	bl	2c472 <printk>
   14022:	f240 2156 	movw	r1, #598	; 0x256
}
   14026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1402a:	4809      	ldr	r0, [pc, #36]	; (14050 <clock_event_handler+0x58>)
   1402c:	f018 bc3e 	b.w	2c8ac <assert_post_action>
   14030:	4906      	ldr	r1, [pc, #24]	; (1404c <clock_event_handler+0x54>)
   14032:	f240 235a 	movw	r3, #602	; 0x25a
   14036:	4a06      	ldr	r2, [pc, #24]	; (14050 <clock_event_handler+0x58>)
   14038:	4806      	ldr	r0, [pc, #24]	; (14054 <clock_event_handler+0x5c>)
   1403a:	f018 fa1a 	bl	2c472 <printk>
   1403e:	f240 215a 	movw	r1, #602	; 0x25a
   14042:	e7f0      	b.n	14026 <clock_event_handler+0x2e>
}
   14044:	bd08      	pop	{r3, pc}
   14046:	bf00      	nop
   14048:	20021578 	.word	0x20021578
   1404c:	00033086 	.word	0x00033086
   14050:	00030bff 	.word	0x00030bff
   14054:	0003049a 	.word	0x0003049a

00014058 <generic_hfclk_start>:
{
   14058:	b508      	push	{r3, lr}
	__asm__ volatile(
   1405a:	f04f 0320 	mov.w	r3, #32
   1405e:	f3ef 8111 	mrs	r1, BASEPRI
   14062:	f383 8811 	msr	BASEPRI, r3
   14066:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1406a:	4a11      	ldr	r2, [pc, #68]	; (140b0 <generic_hfclk_start+0x58>)
   1406c:	6813      	ldr	r3, [r2, #0]
   1406e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   14072:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   14076:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14078:	d00b      	beq.n	14092 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1407a:	4a0e      	ldr	r2, [pc, #56]	; (140b4 <generic_hfclk_start+0x5c>)
   1407c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14080:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   14084:	f013 0301 	ands.w	r3, r3, #1
   14088:	d003      	beq.n	14092 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   1408a:	480b      	ldr	r0, [pc, #44]	; (140b8 <generic_hfclk_start+0x60>)
   1408c:	f018 ff99 	bl	2cfc2 <set_on_state>
			already_started = true;
   14090:	2301      	movs	r3, #1
	__asm__ volatile(
   14092:	f381 8811 	msr	BASEPRI, r1
   14096:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1409a:	b123      	cbz	r3, 140a6 <generic_hfclk_start+0x4e>
}
   1409c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   140a0:	2000      	movs	r0, #0
   140a2:	f7ff bf8b 	b.w	13fbc <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   140a6:	2001      	movs	r0, #1
}
   140a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   140ac:	f00d bfb0 	b.w	22010 <nrfx_clock_start>
   140b0:	200215d0 	.word	0x200215d0
   140b4:	40005000 	.word	0x40005000
   140b8:	200215c0 	.word	0x200215c0

000140bc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   140bc:	4b07      	ldr	r3, [pc, #28]	; (140dc <generic_hfclk_stop+0x20>)
   140be:	e8d3 2fef 	ldaex	r2, [r3]
   140c2:	f022 0102 	bic.w	r1, r2, #2
   140c6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   140ca:	2800      	cmp	r0, #0
   140cc:	d1f7      	bne.n	140be <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   140ce:	07d3      	lsls	r3, r2, #31
   140d0:	d402      	bmi.n	140d8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   140d2:	2001      	movs	r0, #1
   140d4:	f00d bff2 	b.w	220bc <nrfx_clock_stop>
}
   140d8:	4770      	bx	lr
   140da:	bf00      	nop
   140dc:	200215d0 	.word	0x200215d0

000140e0 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   140e0:	2300      	movs	r3, #0
   140e2:	2201      	movs	r2, #1
{
   140e4:	b510      	push	{r4, lr}
   140e6:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   140e8:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   140ec:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   140ee:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
   140f0:	4b0a      	ldr	r3, [pc, #40]	; (1411c <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   140f2:	e9cd 2208 	strd	r2, r2, [sp, #32]
   140f6:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
   140f8:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   140fa:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   140fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   14102:	f018 ff83 	bl	2d00c <api_start>
	if (err < 0) {
   14106:	2800      	cmp	r0, #0
   14108:	db05      	blt.n	14116 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
   1410a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1410e:	2300      	movs	r3, #0
   14110:	4620      	mov	r0, r4
   14112:	f010 fc3b 	bl	2498c <z_impl_k_sem_take>
}
   14116:	b00a      	add	sp, #40	; 0x28
   14118:	bd10      	pop	{r4, pc}
   1411a:	bf00      	nop
   1411c:	0002cffb 	.word	0x0002cffb

00014120 <z_nrf_clock_control_lf_on>:
{
   14120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14124:	2201      	movs	r2, #1
   14126:	4606      	mov	r6, r0
   14128:	4945      	ldr	r1, [pc, #276]	; (14240 <z_nrf_clock_control_lf_on+0x120>)
   1412a:	e8d1 3fef 	ldaex	r3, [r1]
   1412e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   14132:	2800      	cmp	r0, #0
   14134:	d1f9      	bne.n	1412a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   14136:	b9a3      	cbnz	r3, 14162 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   14138:	4942      	ldr	r1, [pc, #264]	; (14244 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   1413a:	4843      	ldr	r0, [pc, #268]	; (14248 <z_nrf_clock_control_lf_on+0x128>)
   1413c:	604b      	str	r3, [r1, #4]
   1413e:	60cb      	str	r3, [r1, #12]
   14140:	608a      	str	r2, [r1, #8]
   14142:	f7fe fb79 	bl	12838 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   14146:	2800      	cmp	r0, #0
   14148:	da0b      	bge.n	14162 <z_nrf_clock_control_lf_on+0x42>
   1414a:	4940      	ldr	r1, [pc, #256]	; (1424c <z_nrf_clock_control_lf_on+0x12c>)
   1414c:	4840      	ldr	r0, [pc, #256]	; (14250 <z_nrf_clock_control_lf_on+0x130>)
   1414e:	f240 2321 	movw	r3, #545	; 0x221
   14152:	4a40      	ldr	r2, [pc, #256]	; (14254 <z_nrf_clock_control_lf_on+0x134>)
   14154:	f018 f98d 	bl	2c472 <printk>
   14158:	f240 2121 	movw	r1, #545	; 0x221
   1415c:	483d      	ldr	r0, [pc, #244]	; (14254 <z_nrf_clock_control_lf_on+0x134>)
   1415e:	f018 fba5 	bl	2c8ac <assert_post_action>
	switch (start_mode) {
   14162:	b38e      	cbz	r6, 141c8 <z_nrf_clock_control_lf_on+0xa8>
   14164:	1e73      	subs	r3, r6, #1
   14166:	2b01      	cmp	r3, #1
   14168:	d855      	bhi.n	14216 <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1416a:	2e01      	cmp	r6, #1
   1416c:	d106      	bne.n	1417c <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1416e:	4b3a      	ldr	r3, [pc, #232]	; (14258 <z_nrf_clock_control_lf_on+0x138>)
   14170:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14174:	f003 0303 	and.w	r3, r3, #3
   14178:	2b02      	cmp	r3, #2
   1417a:	d025      	beq.n	141c8 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1417c:	f01a fc9b 	bl	2eab6 <k_is_in_isr>
   14180:	4604      	mov	r4, r0
   14182:	b918      	cbnz	r0, 1418c <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   14184:	4b35      	ldr	r3, [pc, #212]	; (1425c <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   14186:	781b      	ldrb	r3, [r3, #0]
   14188:	2b00      	cmp	r3, #0
   1418a:	d152      	bne.n	14232 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   1418c:	f04f 0320 	mov.w	r3, #32
   14190:	f3ef 8711 	mrs	r7, BASEPRI
   14194:	f383 8811 	msr	BASEPRI, r3
   14198:	f3bf 8f6f 	isb	sy
   1419c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1419e:	4d2e      	ldr	r5, [pc, #184]	; (14258 <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   141a0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1426c <z_nrf_clock_control_lf_on+0x14c>
   141a4:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   141a6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   141aa:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   141ae:	03d2      	lsls	r2, r2, #15
   141b0:	d50c      	bpl.n	141cc <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   141b2:	f003 0303 	and.w	r3, r3, #3
   141b6:	2b02      	cmp	r3, #2
   141b8:	d001      	beq.n	141be <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   141ba:	2e01      	cmp	r6, #1
   141bc:	d106      	bne.n	141cc <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   141be:	b334      	cbz	r4, 1420e <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   141c0:	f387 8811 	msr	BASEPRI, r7
   141c4:	f3bf 8f6f 	isb	sy
}
   141c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   141cc:	b1d4      	cbz	r4, 14204 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   141ce:	4638      	mov	r0, r7
   141d0:	f000 faf6 	bl	147c0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   141d4:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   141d8:	b2db      	uxtb	r3, r3
   141da:	2b01      	cmp	r3, #1
   141dc:	d1e3      	bne.n	141a6 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   141de:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   141e2:	2a00      	cmp	r2, #0
   141e4:	d0df      	beq.n	141a6 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   141e6:	2200      	movs	r2, #0
   141e8:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   141ec:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   141f0:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   141f2:	2120      	movs	r1, #32
   141f4:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   141f8:	4a19      	ldr	r2, [pc, #100]	; (14260 <z_nrf_clock_control_lf_on+0x140>)
   141fa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   141fe:	4a19      	ldr	r2, [pc, #100]	; (14264 <z_nrf_clock_control_lf_on+0x144>)
   14200:	6013      	str	r3, [r2, #0]
}
   14202:	e7d0      	b.n	141a6 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   14204:	2100      	movs	r1, #0
   14206:	2021      	movs	r0, #33	; 0x21
   14208:	f010 fb40 	bl	2488c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1420c:	e7e2      	b.n	141d4 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   1420e:	2302      	movs	r3, #2
   14210:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   14214:	e7d8      	b.n	141c8 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   14216:	f240 2333 	movw	r3, #563	; 0x233
   1421a:	4913      	ldr	r1, [pc, #76]	; (14268 <z_nrf_clock_control_lf_on+0x148>)
   1421c:	480c      	ldr	r0, [pc, #48]	; (14250 <z_nrf_clock_control_lf_on+0x130>)
   1421e:	4a0d      	ldr	r2, [pc, #52]	; (14254 <z_nrf_clock_control_lf_on+0x134>)
   14220:	f018 f927 	bl	2c472 <printk>
}
   14224:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   14228:	f240 2133 	movw	r1, #563	; 0x233
   1422c:	4809      	ldr	r0, [pc, #36]	; (14254 <z_nrf_clock_control_lf_on+0x134>)
   1422e:	f018 bb3d 	b.w	2c8ac <assert_post_action>
    p_reg->INTENCLR = mask;
   14232:	2202      	movs	r2, #2
   14234:	4b08      	ldr	r3, [pc, #32]	; (14258 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   14236:	4607      	mov	r7, r0
   14238:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1423c:	e7af      	b.n	1419e <z_nrf_clock_control_lf_on+0x7e>
   1423e:	bf00      	nop
   14240:	200215d4 	.word	0x200215d4
   14244:	20021568 	.word	0x20021568
   14248:	20021598 	.word	0x20021598
   1424c:	00030c60 	.word	0x00030c60
   14250:	0003049a 	.word	0x0003049a
   14254:	00030bff 	.word	0x00030bff
   14258:	40005000 	.word	0x40005000
   1425c:	200262a1 	.word	0x200262a1
   14260:	e000e100 	.word	0xe000e100
   14264:	40005008 	.word	0x40005008
   14268:	00033086 	.word	0x00033086
   1426c:	40005104 	.word	0x40005104

00014270 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   14270:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   14272:	4c06      	ldr	r4, [pc, #24]	; (1428c <z_clock_isr+0x1c>)
   14274:	4906      	ldr	r1, [pc, #24]	; (14290 <z_clock_isr+0x20>)
   14276:	4622      	mov	r2, r4
   14278:	4806      	ldr	r0, [pc, #24]	; (14294 <z_clock_isr+0x24>)
   1427a:	2317      	movs	r3, #23
   1427c:	f018 f8f9 	bl	2c472 <printk>
   14280:	4620      	mov	r0, r4
}
   14282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   14286:	2117      	movs	r1, #23
   14288:	f018 bb10 	b.w	2c8ac <assert_post_action>
   1428c:	00030c89 	.word	0x00030c89
   14290:	00033086 	.word	0x00033086
   14294:	0003049a 	.word	0x0003049a

00014298 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   14298:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1429a:	4b08      	ldr	r3, [pc, #32]	; (142bc <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1429c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   142a0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   142a4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   142a8:	4290      	cmp	r0, r2
   142aa:	d100      	bne.n	142ae <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   142ac:	4770      	bx	lr
   142ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   142b2:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   142b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   142b8:	e7f2      	b.n	142a0 <handle_next_cycle_case+0x8>
   142ba:	bf00      	nop
   142bc:	40015000 	.word	0x40015000

000142c0 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   142c0:	2200      	movs	r2, #0
   142c2:	4b07      	ldr	r3, [pc, #28]	; (142e0 <rtc_nrf_isr+0x20>)
   142c4:	601a      	str	r2, [r3, #0]
   142c6:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   142c8:	4a06      	ldr	r2, [pc, #24]	; (142e4 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   142ca:	4b07      	ldr	r3, [pc, #28]	; (142e8 <rtc_nrf_isr+0x28>)
   142cc:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   142d0:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   142d2:	1ac0      	subs	r0, r0, r3
   142d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   142d8:	4403      	add	r3, r0
   142da:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   142dc:	f011 b810 	b.w	25300 <z_clock_announce>
   142e0:	40015140 	.word	0x40015140
   142e4:	200215d8 	.word	0x200215d8
   142e8:	40015000 	.word	0x40015000

000142ec <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   142ec:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   142ee:	2400      	movs	r4, #0
   142f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   142f4:	4d0e      	ldr	r5, [pc, #56]	; (14330 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   142f6:	4b0f      	ldr	r3, [pc, #60]	; (14334 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   142f8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   142fc:	601c      	str	r4, [r3, #0]
   142fe:	681b      	ldr	r3, [r3, #0]
   14300:	4b0d      	ldr	r3, [pc, #52]	; (14338 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   14302:	2101      	movs	r1, #1
   14304:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   14308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1430c:	4622      	mov	r2, r4
   1430e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   14312:	2015      	movs	r0, #21
   14314:	f000 f9bc 	bl	14690 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   14318:	2015      	movs	r0, #21
   1431a:	f000 f99b 	bl	14654 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1431e:	2301      	movs	r3, #1
   14320:	4a06      	ldr	r2, [pc, #24]	; (1433c <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   14322:	2002      	movs	r0, #2
   14324:	6013      	str	r3, [r2, #0]
   14326:	602b      	str	r3, [r5, #0]
   14328:	f7ff fefa 	bl	14120 <z_nrf_clock_control_lf_on>

	return 0;
}
   1432c:	4620      	mov	r0, r4
   1432e:	bd38      	pop	{r3, r4, r5, pc}
   14330:	40015000 	.word	0x40015000
   14334:	40015140 	.word	0x40015140
   14338:	e000e100 	.word	0xe000e100
   1433c:	40015008 	.word	0x40015008

00014340 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   14340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   14342:	4b2d      	ldr	r3, [pc, #180]	; (143f8 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14344:	4c2d      	ldr	r4, [pc, #180]	; (143fc <z_clock_set_timeout+0xbc>)
   14346:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   1434a:	4b2d      	ldr	r3, [pc, #180]	; (14400 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1434c:	f1b0 3fff 	cmp.w	r0, #4294967295
   14350:	bf08      	it	eq
   14352:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   14354:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   14356:	1a52      	subs	r2, r2, r1
   14358:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   1435c:	0212      	lsls	r2, r2, #8
   1435e:	d438      	bmi.n	143d2 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   14360:	3801      	subs	r0, #1
   14362:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   14366:	42a0      	cmp	r0, r4
   14368:	bfa8      	it	ge
   1436a:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1436c:	3301      	adds	r3, #1
   1436e:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   14370:	42a0      	cmp	r0, r4
   14372:	bf94      	ite	ls
   14374:	180c      	addls	r4, r1, r0
   14376:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   14378:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1437c:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   1437e:	4a1e      	ldr	r2, [pc, #120]	; (143f8 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14380:	4d20      	ldr	r5, [pc, #128]	; (14404 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   14382:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   14386:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   1438a:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1438e:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   14390:	1a5b      	subs	r3, r3, r1
   14392:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14396:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   14398:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1439a:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1439e:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   143a2:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   143a6:	d104      	bne.n	143b2 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   143a8:	200f      	movs	r0, #15
   143aa:	f01a fb8a 	bl	2eac2 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   143ae:	602e      	str	r6, [r5, #0]
   143b0:	682b      	ldr	r3, [r5, #0]
   143b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   143b6:	4b14      	ldr	r3, [pc, #80]	; (14408 <z_clock_set_timeout+0xc8>)
   143b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   143bc:	4b0e      	ldr	r3, [pc, #56]	; (143f8 <z_clock_set_timeout+0xb8>)
   143be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   143c2:	1a22      	subs	r2, r4, r0
   143c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   143c8:	2a01      	cmp	r2, #1
   143ca:	d104      	bne.n	143d6 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   143cc:	f7ff ff64 	bl	14298 <handle_next_cycle_case>
   143d0:	e00b      	b.n	143ea <z_clock_set_timeout+0xaa>
		ticks = 0;
   143d2:	2000      	movs	r0, #0
   143d4:	e7ca      	b.n	1436c <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   143d6:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   143da:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   143de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   143e2:	1a24      	subs	r4, r4, r0
   143e4:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   143e6:	0223      	lsls	r3, r4, #8
   143e8:	d4f0      	bmi.n	143cc <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   143ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   143ee:	4b02      	ldr	r3, [pc, #8]	; (143f8 <z_clock_set_timeout+0xb8>)
   143f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   143f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143f6:	bf00      	nop
   143f8:	40015000 	.word	0x40015000
   143fc:	007fffff 	.word	0x007fffff
   14400:	200215d8 	.word	0x200215d8
   14404:	40015140 	.word	0x40015140
   14408:	e000e100 	.word	0xe000e100

0001440c <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
   1440c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1440e:	f04f 0320 	mov.w	r3, #32
   14412:	f3ef 8511 	mrs	r5, BASEPRI
   14416:	f383 8811 	msr	BASEPRI, r3
   1441a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1441e:	481a      	ldr	r0, [pc, #104]	; (14488 <z_clock_elapsed+0x7c>)
   14420:	f010 fc90 	bl	24d44 <z_spin_lock_valid>
   14424:	b968      	cbnz	r0, 14442 <z_clock_elapsed+0x36>
   14426:	235c      	movs	r3, #92	; 0x5c
   14428:	4a18      	ldr	r2, [pc, #96]	; (1448c <z_clock_elapsed+0x80>)
   1442a:	4919      	ldr	r1, [pc, #100]	; (14490 <z_clock_elapsed+0x84>)
   1442c:	4819      	ldr	r0, [pc, #100]	; (14494 <z_clock_elapsed+0x88>)
   1442e:	f018 f820 	bl	2c472 <printk>
   14432:	4915      	ldr	r1, [pc, #84]	; (14488 <z_clock_elapsed+0x7c>)
   14434:	4818      	ldr	r0, [pc, #96]	; (14498 <z_clock_elapsed+0x8c>)
   14436:	f018 f81c 	bl	2c472 <printk>
   1443a:	215c      	movs	r1, #92	; 0x5c
   1443c:	4813      	ldr	r0, [pc, #76]	; (1448c <z_clock_elapsed+0x80>)
   1443e:	f018 fa35 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   14442:	4811      	ldr	r0, [pc, #68]	; (14488 <z_clock_elapsed+0x7c>)
   14444:	f010 fc9c 	bl	24d80 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   14448:	4b14      	ldr	r3, [pc, #80]	; (1449c <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1444a:	480f      	ldr	r0, [pc, #60]	; (14488 <z_clock_elapsed+0x7c>)
   1444c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   14450:	4b13      	ldr	r3, [pc, #76]	; (144a0 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   14452:	681b      	ldr	r3, [r3, #0]
   14454:	1ae4      	subs	r4, r4, r3
   14456:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1445a:	f010 fc81 	bl	24d60 <z_spin_unlock_valid>
   1445e:	b968      	cbnz	r0, 1447c <z_clock_elapsed+0x70>
   14460:	2384      	movs	r3, #132	; 0x84
   14462:	4a0a      	ldr	r2, [pc, #40]	; (1448c <z_clock_elapsed+0x80>)
   14464:	490f      	ldr	r1, [pc, #60]	; (144a4 <z_clock_elapsed+0x98>)
   14466:	480b      	ldr	r0, [pc, #44]	; (14494 <z_clock_elapsed+0x88>)
   14468:	f018 f803 	bl	2c472 <printk>
   1446c:	4906      	ldr	r1, [pc, #24]	; (14488 <z_clock_elapsed+0x7c>)
   1446e:	480e      	ldr	r0, [pc, #56]	; (144a8 <z_clock_elapsed+0x9c>)
   14470:	f017 ffff 	bl	2c472 <printk>
   14474:	2184      	movs	r1, #132	; 0x84
   14476:	4805      	ldr	r0, [pc, #20]	; (1448c <z_clock_elapsed+0x80>)
   14478:	f018 fa18 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   1447c:	f385 8811 	msr	BASEPRI, r5
   14480:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   14484:	4620      	mov	r0, r4
   14486:	bd38      	pop	{r3, r4, r5, pc}
   14488:	200215dc 	.word	0x200215dc
   1448c:	0003056a 	.word	0x0003056a
   14490:	000305bc 	.word	0x000305bc
   14494:	0003049a 	.word	0x0003049a
   14498:	000305d1 	.word	0x000305d1
   1449c:	40015000 	.word	0x40015000
   144a0:	200215d8 	.word	0x200215d8
   144a4:	00030590 	.word	0x00030590
   144a8:	000305a7 	.word	0x000305a7

000144ac <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
   144ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   144ae:	f04f 0320 	mov.w	r3, #32
   144b2:	f3ef 8511 	mrs	r5, BASEPRI
   144b6:	f383 8811 	msr	BASEPRI, r3
   144ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   144be:	481b      	ldr	r0, [pc, #108]	; (1452c <z_timer_cycle_get_32+0x80>)
   144c0:	f010 fc40 	bl	24d44 <z_spin_lock_valid>
   144c4:	b968      	cbnz	r0, 144e2 <z_timer_cycle_get_32+0x36>
   144c6:	235c      	movs	r3, #92	; 0x5c
   144c8:	4a19      	ldr	r2, [pc, #100]	; (14530 <z_timer_cycle_get_32+0x84>)
   144ca:	491a      	ldr	r1, [pc, #104]	; (14534 <z_timer_cycle_get_32+0x88>)
   144cc:	481a      	ldr	r0, [pc, #104]	; (14538 <z_timer_cycle_get_32+0x8c>)
   144ce:	f017 ffd0 	bl	2c472 <printk>
   144d2:	4916      	ldr	r1, [pc, #88]	; (1452c <z_timer_cycle_get_32+0x80>)
   144d4:	4819      	ldr	r0, [pc, #100]	; (1453c <z_timer_cycle_get_32+0x90>)
   144d6:	f017 ffcc 	bl	2c472 <printk>
   144da:	215c      	movs	r1, #92	; 0x5c
   144dc:	4814      	ldr	r0, [pc, #80]	; (14530 <z_timer_cycle_get_32+0x84>)
   144de:	f018 f9e5 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   144e2:	4812      	ldr	r0, [pc, #72]	; (1452c <z_timer_cycle_get_32+0x80>)
   144e4:	f010 fc4c 	bl	24d80 <z_spin_lock_set_owner>
   144e8:	4b15      	ldr	r3, [pc, #84]	; (14540 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   144ea:	4810      	ldr	r0, [pc, #64]	; (1452c <z_timer_cycle_get_32+0x80>)
   144ec:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   144f0:	4b14      	ldr	r3, [pc, #80]	; (14544 <z_timer_cycle_get_32+0x98>)
   144f2:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   144f4:	1ae4      	subs	r4, r4, r3
   144f6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   144fa:	441c      	add	r4, r3
   144fc:	f010 fc30 	bl	24d60 <z_spin_unlock_valid>
   14500:	b968      	cbnz	r0, 1451e <z_timer_cycle_get_32+0x72>
   14502:	2384      	movs	r3, #132	; 0x84
   14504:	4a0a      	ldr	r2, [pc, #40]	; (14530 <z_timer_cycle_get_32+0x84>)
   14506:	4910      	ldr	r1, [pc, #64]	; (14548 <z_timer_cycle_get_32+0x9c>)
   14508:	480b      	ldr	r0, [pc, #44]	; (14538 <z_timer_cycle_get_32+0x8c>)
   1450a:	f017 ffb2 	bl	2c472 <printk>
   1450e:	4907      	ldr	r1, [pc, #28]	; (1452c <z_timer_cycle_get_32+0x80>)
   14510:	480e      	ldr	r0, [pc, #56]	; (1454c <z_timer_cycle_get_32+0xa0>)
   14512:	f017 ffae 	bl	2c472 <printk>
   14516:	2184      	movs	r1, #132	; 0x84
   14518:	4805      	ldr	r0, [pc, #20]	; (14530 <z_timer_cycle_get_32+0x84>)
   1451a:	f018 f9c7 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   1451e:	f385 8811 	msr	BASEPRI, r5
   14522:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   14526:	4620      	mov	r0, r4
   14528:	bd38      	pop	{r3, r4, r5, pc}
   1452a:	bf00      	nop
   1452c:	200215dc 	.word	0x200215dc
   14530:	0003056a 	.word	0x0003056a
   14534:	000305bc 	.word	0x000305bc
   14538:	0003049a 	.word	0x0003049a
   1453c:	000305d1 	.word	0x000305d1
   14540:	40015000 	.word	0x40015000
   14544:	200215d8 	.word	0x200215d8
   14548:	00030590 	.word	0x00030590
   1454c:	000305a7 	.word	0x000305a7

00014550 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14550:	4a09      	ldr	r2, [pc, #36]	; (14578 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14552:	490a      	ldr	r1, [pc, #40]	; (1457c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14554:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14556:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   14558:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1455a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1455c:	4908      	ldr	r1, [pc, #32]	; (14580 <arch_swap+0x30>)
   1455e:	684b      	ldr	r3, [r1, #4]
   14560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14564:	604b      	str	r3, [r1, #4]
   14566:	2300      	movs	r3, #0
   14568:	f383 8811 	msr	BASEPRI, r3
   1456c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14570:	6893      	ldr	r3, [r2, #8]
}
   14572:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14574:	4770      	bx	lr
   14576:	bf00      	nop
   14578:	20021de0 	.word	0x20021de0
   1457c:	0002f948 	.word	0x0002f948
   14580:	e000ed00 	.word	0xe000ed00

00014584 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14584:	4929      	ldr	r1, [pc, #164]	; (1462c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14586:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14588:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   1458c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1458e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14592:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   14596:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1459a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   1459e:	d004      	beq.n	145aa <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   145a0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   145a4:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   145a8:	e007      	b.n	145ba <out_fp_endif>

000145aa <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   145aa:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   145ae:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   145b2:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   145b6:	f050 0004 	orrs.w	r0, r0, #4

000145ba <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   145ba:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   145be:	2020      	movs	r0, #32
    msr BASEPRI, r0
   145c0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   145c4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   145c8:	4f19      	ldr	r7, [pc, #100]	; (14630 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   145ca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   145ce:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   145d0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   145d2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   145d4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   145d6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   145d8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   145da:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   145de:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   145e2:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   145e6:	d105      	bne.n	145f4 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   145e8:	2300      	movs	r3, #0
    vmsr fpscr, r3
   145ea:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   145ee:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   145f2:	e005      	b.n	14600 <in_fp_endif>

000145f4 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   145f4:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   145f8:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   145fc:	ec90 8a10 	vldmia	r0, {s16-s31}

00014600 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   14600:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   14604:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   14608:	f383 8814 	msr	CONTROL, r3
    isb
   1460c:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14610:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   14614:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14618:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1461c:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   14620:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   14622:	f018 fd1d 	bl	2d060 <configure_builtin_stack_guard>
    pop {r2, lr}
   14626:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1462a:	4770      	bx	lr
    ldr r1, =_kernel
   1462c:	20021de0 	.word	0x20021de0
    ldr v4, =_SCS_ICSR
   14630:	e000ed04 	.word	0xe000ed04

00014634 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   14634:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14638:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1463a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1463e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14642:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14644:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14648:	2902      	cmp	r1, #2
    beq _oops
   1464a:	d0ff      	beq.n	1464c <_oops>

0001464c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1464c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1464e:	f018 fd0b 	bl	2d068 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   14652:	bd01      	pop	{r0, pc}

00014654 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14654:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   14656:	2b00      	cmp	r3, #0
   14658:	db08      	blt.n	1466c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1465a:	2201      	movs	r2, #1
   1465c:	f000 001f 	and.w	r0, r0, #31
   14660:	fa02 f000 	lsl.w	r0, r2, r0
   14664:	4a02      	ldr	r2, [pc, #8]	; (14670 <arch_irq_enable+0x1c>)
   14666:	095b      	lsrs	r3, r3, #5
   14668:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1466c:	4770      	bx	lr
   1466e:	bf00      	nop
   14670:	e000e100 	.word	0xe000e100

00014674 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14674:	4b05      	ldr	r3, [pc, #20]	; (1468c <arch_irq_is_enabled+0x18>)
   14676:	0942      	lsrs	r2, r0, #5
   14678:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1467c:	2301      	movs	r3, #1
   1467e:	f000 001f 	and.w	r0, r0, #31
   14682:	fa03 f000 	lsl.w	r0, r3, r0
}
   14686:	4010      	ands	r0, r2
   14688:	4770      	bx	lr
   1468a:	bf00      	nop
   1468c:	e000e100 	.word	0xe000e100

00014690 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   14690:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   14692:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14694:	2c07      	cmp	r4, #7
{
   14696:	4605      	mov	r5, r0
   14698:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1469a:	d90e      	bls.n	146ba <z_arm_irq_priority_set+0x2a>
   1469c:	235b      	movs	r3, #91	; 0x5b
   1469e:	4a10      	ldr	r2, [pc, #64]	; (146e0 <z_arm_irq_priority_set+0x50>)
   146a0:	4910      	ldr	r1, [pc, #64]	; (146e4 <z_arm_irq_priority_set+0x54>)
   146a2:	4811      	ldr	r0, [pc, #68]	; (146e8 <z_arm_irq_priority_set+0x58>)
   146a4:	f017 fee5 	bl	2c472 <printk>
   146a8:	4631      	mov	r1, r6
   146aa:	4810      	ldr	r0, [pc, #64]	; (146ec <z_arm_irq_priority_set+0x5c>)
   146ac:	2207      	movs	r2, #7
   146ae:	f017 fee0 	bl	2c472 <printk>
   146b2:	215b      	movs	r1, #91	; 0x5b
   146b4:	480a      	ldr	r0, [pc, #40]	; (146e0 <z_arm_irq_priority_set+0x50>)
   146b6:	f018 f8f9 	bl	2c8ac <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   146ba:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   146bc:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   146be:	bfac      	ite	ge
   146c0:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   146c4:	4b0a      	ldrlt	r3, [pc, #40]	; (146f0 <z_arm_irq_priority_set+0x60>)
   146c6:	ea4f 1444 	mov.w	r4, r4, lsl #5
   146ca:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   146cc:	bfab      	itete	ge
   146ce:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   146d2:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   146d6:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   146da:	555c      	strblt	r4, [r3, r5]
}
   146dc:	bd70      	pop	{r4, r5, r6, pc}
   146de:	bf00      	nop
   146e0:	00030cc5 	.word	0x00030cc5
   146e4:	00030cfb 	.word	0x00030cfb
   146e8:	0003049a 	.word	0x0003049a
   146ec:	00030d16 	.word	0x00030d16
   146f0:	e000ed14 	.word	0xe000ed14

000146f4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   146f4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   146f6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   146f8:	4b04      	ldr	r3, [pc, #16]	; (1470c <_arch_isr_direct_pm+0x18>)
   146fa:	6a18      	ldr	r0, [r3, #32]
   146fc:	b118      	cbz	r0, 14706 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   146fe:	2200      	movs	r2, #0
   14700:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   14702:	f01a f918 	bl	2e936 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14706:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14708:	bd08      	pop	{r3, pc}
   1470a:	bf00      	nop
   1470c:	20021de0 	.word	0x20021de0

00014710 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14710:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14714:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   14716:	490c      	ldr	r1, [pc, #48]	; (14748 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   14718:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1471c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1471e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   14722:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14726:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   14728:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1472c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14734:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14738:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1473a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1473c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1473e:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   14740:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14744:	4770      	bx	lr
   14746:	bf00      	nop
   14748:	0002c577 	.word	0x0002c577

0001474c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1474c:	b508      	push	{r3, lr}
   1474e:	4604      	mov	r4, r0
   14750:	460e      	mov	r6, r1
   14752:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   14754:	2300      	movs	r3, #0
   14756:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1475a:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1475e:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   14762:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   14766:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   1476a:	f000 fbc3 	bl	14ef4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1476e:	4b09      	ldr	r3, [pc, #36]	; (14794 <arch_switch_to_main_thread+0x48>)
   14770:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   14772:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14774:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14778:	4628      	mov	r0, r5
   1477a:	f386 8809 	msr	PSP, r6
   1477e:	2100      	movs	r1, #0
   14780:	b663      	cpsie	if
   14782:	f381 8811 	msr	BASEPRI, r1
   14786:	f3bf 8f6f 	isb	sy
   1478a:	2200      	movs	r2, #0
   1478c:	2300      	movs	r3, #0
   1478e:	f017 fef2 	bl	2c576 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14792:	bf00      	nop
   14794:	20021de0 	.word	0x20021de0

00014798 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14798:	4901      	ldr	r1, [pc, #4]	; (147a0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1479a:	2210      	movs	r2, #16
	str	r2, [r1]
   1479c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1479e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   147a0:	e000ed10 	.word	0xe000ed10

000147a4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   147a4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   147a6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   147a8:	f380 8811 	msr	BASEPRI, r0
	isb
   147ac:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   147b0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   147b4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   147b6:	b662      	cpsie	i
	isb
   147b8:	f3bf 8f6f 	isb	sy

	bx	lr
   147bc:	4770      	bx	lr
   147be:	bf00      	nop

000147c0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   147c0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   147c2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   147c4:	f381 8811 	msr	BASEPRI, r1

	wfe
   147c8:	bf20      	wfe

	msr	BASEPRI, r0
   147ca:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   147ce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   147d0:	4770      	bx	lr
   147d2:	bf00      	nop

000147d4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   147d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   147d8:	4606      	mov	r6, r0

	if (esf != NULL) {
   147da:	460d      	mov	r5, r1
{
   147dc:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   147de:	2900      	cmp	r1, #0
   147e0:	d054      	beq.n	1488c <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   147e2:	4b2e      	ldr	r3, [pc, #184]	; (1489c <z_arm_fatal_error+0xc8>)
   147e4:	4c2e      	ldr	r4, [pc, #184]	; (148a0 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   147e6:	482f      	ldr	r0, [pc, #188]	; (148a4 <z_arm_fatal_error+0xd0>)
   147e8:	1ae4      	subs	r4, r4, r3
   147ea:	08e4      	lsrs	r4, r4, #3
   147ec:	01a4      	lsls	r4, r4, #6
   147ee:	f044 0401 	orr.w	r4, r4, #1
   147f2:	f8ad 4000 	strh.w	r4, [sp]
   147f6:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   147fa:	6809      	ldr	r1, [r1, #0]
   147fc:	f018 f8c5 	bl	2c98a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14800:	f8ad 4000 	strh.w	r4, [sp]
   14804:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   14808:	68e9      	ldr	r1, [r5, #12]
   1480a:	4827      	ldr	r0, [pc, #156]	; (148a8 <z_arm_fatal_error+0xd4>)
   1480c:	f018 f8bd 	bl	2c98a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14810:	4622      	mov	r2, r4
   14812:	69e9      	ldr	r1, [r5, #28]
   14814:	4825      	ldr	r0, [pc, #148]	; (148ac <z_arm_fatal_error+0xd8>)
   14816:	f018 f888 	bl	2c92a <log_1>
	for (int i = 0; i < 16; i += 4) {
   1481a:	46a8      	mov	r8, r5
   1481c:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1481e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 148b8 <z_arm_fatal_error+0xe4>
   14822:	edd8 7a08 	vldr	s15, [r8, #32]
   14826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1482a:	edcd 7a03 	vstr	s15, [sp, #12]
   1482e:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   14832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14836:	edcd 7a05 	vstr	s15, [sp, #20]
   1483a:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   1483e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14842:	edcd 7a07 	vstr	s15, [sp, #28]
   14846:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   1484a:	2208      	movs	r2, #8
   1484c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14850:	1c7b      	adds	r3, r7, #1
   14852:	9304      	str	r3, [sp, #16]
   14854:	1cbb      	adds	r3, r7, #2
   14856:	9306      	str	r3, [sp, #24]
   14858:	1cfb      	adds	r3, r7, #3
   1485a:	9702      	str	r7, [sp, #8]
   1485c:	9308      	str	r3, [sp, #32]
   1485e:	4648      	mov	r0, r9
   14860:	4623      	mov	r3, r4
   14862:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   14866:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14868:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   1486c:	f018 f8ac 	bl	2c9c8 <log_n>
	for (int i = 0; i < 16; i += 4) {
   14870:	2f10      	cmp	r7, #16
   14872:	f108 0810 	add.w	r8, r8, #16
   14876:	d1d4      	bne.n	14822 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   14878:	4622      	mov	r2, r4
   1487a:	6e29      	ldr	r1, [r5, #96]	; 0x60
   1487c:	480c      	ldr	r0, [pc, #48]	; (148b0 <z_arm_fatal_error+0xdc>)
   1487e:	f018 f854 	bl	2c92a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14882:	4622      	mov	r2, r4
   14884:	69a9      	ldr	r1, [r5, #24]
   14886:	480b      	ldr	r0, [pc, #44]	; (148b4 <z_arm_fatal_error+0xe0>)
   14888:	f018 f84f 	bl	2c92a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1488c:	4629      	mov	r1, r5
   1488e:	4630      	mov	r0, r6
   14890:	f00d feda 	bl	22648 <z_fatal_error>
}
   14894:	b00b      	add	sp, #44	; 0x2c
   14896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1489a:	bf00      	nop
   1489c:	0002f034 	.word	0x0002f034
   148a0:	0002f0b4 	.word	0x0002f0b4
   148a4:	00030d4b 	.word	0x00030d4b
   148a8:	00030d7a 	.word	0x00030d7a
   148ac:	00030da9 	.word	0x00030da9
   148b0:	00030dfb 	.word	0x00030dfb
   148b4:	00030e0a 	.word	0x00030e0a
   148b8:	00030db8 	.word	0x00030db8

000148bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   148bc:	bf30      	wfi
    b z_SysNmiOnReset
   148be:	f7ff bffd 	b.w	148bc <z_SysNmiOnReset>
   148c2:	bf00      	nop

000148c4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   148c4:	4a14      	ldr	r2, [pc, #80]	; (14918 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   148c6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   148c8:	4b14      	ldr	r3, [pc, #80]	; (1491c <z_arm_prep_c+0x58>)
   148ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   148ce:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   148d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   148d4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   148d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   148dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   148e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   148e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   148e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   148ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   148f0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   148f4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   148f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   148fc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   14900:	2300      	movs	r3, #0
   14902:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14906:	f00d ff35 	bl	22774 <z_bss_zero>
	z_data_copy();
   1490a:	f00d ff3d 	bl	22788 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1490e:	f000 fab9 	bl	14e84 <z_arm_interrupt_init>
	z_cstart();
   14912:	f00d ff77 	bl	22804 <z_cstart>
   14916:	bf00      	nop
   14918:	0000c000 	.word	0x0000c000
   1491c:	e000ed00 	.word	0xe000ed00

00014920 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14920:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14922:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14924:	4a0b      	ldr	r2, [pc, #44]	; (14954 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14926:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   14928:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1492a:	bf1e      	ittt	ne
	movne	r1, #0
   1492c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1492e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   14930:	f01a f801 	blne	2e936 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14934:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14936:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1493a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1493e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14942:	4905      	ldr	r1, [pc, #20]	; (14958 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14944:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14946:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14948:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1494a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1494e:	4903      	ldr	r1, [pc, #12]	; (1495c <_isr_wrapper+0x3c>)
	bx r1
   14950:	4708      	bx	r1
   14952:	0000      	.short	0x0000
	ldr r2, =_kernel
   14954:	20021de0 	.word	0x20021de0
	ldr r1, =_sw_isr_table
   14958:	0002ee20 	.word	0x0002ee20
	ldr r1, =z_arm_int_exit
   1495c:	00014e45 	.word	0x00014e45

00014960 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   14960:	f017 ffac 	bl	2c8bc <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14964:	2020      	movs	r0, #32
    msr BASEPRI, r0
   14966:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1496a:	4808      	ldr	r0, [pc, #32]	; (1498c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1496c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   14970:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14972:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14976:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1497a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1497c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1497e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14982:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14986:	f7ff ff9d 	bl	148c4 <z_arm_prep_c>
   1498a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1498c:	20029478 	.word	0x20029478

00014990 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14990:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14994:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14998:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1499a:	4672      	mov	r2, lr
	bl z_arm_fault
   1499c:	f000 f958 	bl	14c50 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   149a0:	bd01      	pop	{r0, pc}
   149a2:	bf00      	nop

000149a4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   149a4:	b570      	push	{r4, r5, r6, lr}
   149a6:	4b28      	ldr	r3, [pc, #160]	; (14a48 <usage_fault.isra.0+0xa4>)
   149a8:	4c28      	ldr	r4, [pc, #160]	; (14a4c <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   149aa:	4d29      	ldr	r5, [pc, #164]	; (14a50 <usage_fault.isra.0+0xac>)
   149ac:	1ae4      	subs	r4, r4, r3
   149ae:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   149b0:	01a4      	lsls	r4, r4, #6
   149b2:	f044 0601 	orr.w	r6, r4, #1
   149b6:	4631      	mov	r1, r6
   149b8:	4826      	ldr	r0, [pc, #152]	; (14a54 <usage_fault.isra.0+0xb0>)
   149ba:	f017 ffa7 	bl	2c90c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   149be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   149c0:	0193      	lsls	r3, r2, #6
   149c2:	d503      	bpl.n	149cc <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   149c4:	4631      	mov	r1, r6
   149c6:	4824      	ldr	r0, [pc, #144]	; (14a58 <usage_fault.isra.0+0xb4>)
   149c8:	f017 ffa0 	bl	2c90c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   149cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149ce:	01dd      	lsls	r5, r3, #7
   149d0:	d504      	bpl.n	149dc <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   149d2:	4822      	ldr	r0, [pc, #136]	; (14a5c <usage_fault.isra.0+0xb8>)
   149d4:	f044 0101 	orr.w	r1, r4, #1
   149d8:	f017 ff98 	bl	2c90c <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   149dc:	4d1c      	ldr	r5, [pc, #112]	; (14a50 <usage_fault.isra.0+0xac>)
   149de:	6aae      	ldr	r6, [r5, #40]	; 0x28
   149e0:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   149e4:	d005      	beq.n	149f2 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   149e6:	481e      	ldr	r0, [pc, #120]	; (14a60 <usage_fault.isra.0+0xbc>)
   149e8:	f044 0101 	orr.w	r1, r4, #1
   149ec:	f017 ff8e 	bl	2c90c <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   149f0:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   149f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149f4:	0318      	lsls	r0, r3, #12
   149f6:	d504      	bpl.n	14a02 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   149f8:	481a      	ldr	r0, [pc, #104]	; (14a64 <usage_fault.isra.0+0xc0>)
   149fa:	f044 0101 	orr.w	r1, r4, #1
   149fe:	f017 ff85 	bl	2c90c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14a02:	4d13      	ldr	r5, [pc, #76]	; (14a50 <usage_fault.isra.0+0xac>)
   14a04:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a06:	0351      	lsls	r1, r2, #13
   14a08:	d504      	bpl.n	14a14 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14a0a:	4817      	ldr	r0, [pc, #92]	; (14a68 <usage_fault.isra.0+0xc4>)
   14a0c:	f044 0101 	orr.w	r1, r4, #1
   14a10:	f017 ff7c 	bl	2c90c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14a14:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a16:	039a      	lsls	r2, r3, #14
   14a18:	d504      	bpl.n	14a24 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14a1a:	4814      	ldr	r0, [pc, #80]	; (14a6c <usage_fault.isra.0+0xc8>)
   14a1c:	f044 0101 	orr.w	r1, r4, #1
   14a20:	f017 ff74 	bl	2c90c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14a24:	4d0a      	ldr	r5, [pc, #40]	; (14a50 <usage_fault.isra.0+0xac>)
   14a26:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a28:	03db      	lsls	r3, r3, #15
   14a2a:	d504      	bpl.n	14a36 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14a2c:	4810      	ldr	r0, [pc, #64]	; (14a70 <usage_fault.isra.0+0xcc>)
   14a2e:	f044 0101 	orr.w	r1, r4, #1
   14a32:	f017 ff6b 	bl	2c90c <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14a36:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   14a38:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14a3a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14a3e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14a42:	62ab      	str	r3, [r5, #40]	; 0x28
}
   14a44:	bd70      	pop	{r4, r5, r6, pc}
   14a46:	bf00      	nop
   14a48:	0002f034 	.word	0x0002f034
   14a4c:	0002f0b4 	.word	0x0002f0b4
   14a50:	e000ed00 	.word	0xe000ed00
   14a54:	00030e38 	.word	0x00030e38
   14a58:	00030e50 	.word	0x00030e50
   14a5c:	00030e63 	.word	0x00030e63
   14a60:	00030e7d 	.word	0x00030e7d
   14a64:	00030ea7 	.word	0x00030ea7
   14a68:	00030ec5 	.word	0x00030ec5
   14a6c:	00030eea 	.word	0x00030eea
   14a70:	00030f04 	.word	0x00030f04

00014a74 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a78:	4b30      	ldr	r3, [pc, #192]	; (14b3c <mem_manage_fault.isra.0+0xc8>)
   14a7a:	4c31      	ldr	r4, [pc, #196]	; (14b40 <mem_manage_fault.isra.0+0xcc>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14a7c:	4d31      	ldr	r5, [pc, #196]	; (14b44 <mem_manage_fault.isra.0+0xd0>)
   14a7e:	1ae4      	subs	r4, r4, r3
   14a80:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   14a82:	01a4      	lsls	r4, r4, #6
   14a84:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14a88:	4607      	mov	r7, r0
   14a8a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14a8c:	482e      	ldr	r0, [pc, #184]	; (14b48 <mem_manage_fault.isra.0+0xd4>)
   14a8e:	4641      	mov	r1, r8
   14a90:	f017 ff3c 	bl	2c90c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14a94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a96:	06d1      	lsls	r1, r2, #27
   14a98:	d503      	bpl.n	14aa2 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14a9a:	4641      	mov	r1, r8
   14a9c:	482b      	ldr	r0, [pc, #172]	; (14b4c <mem_manage_fault.isra.0+0xd8>)
   14a9e:	f017 ff35 	bl	2c90c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14aa2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14aa4:	071a      	lsls	r2, r3, #28
   14aa6:	d504      	bpl.n	14ab2 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14aa8:	4829      	ldr	r0, [pc, #164]	; (14b50 <mem_manage_fault.isra.0+0xdc>)
   14aaa:	f044 0101 	orr.w	r1, r4, #1
   14aae:	f017 ff2d 	bl	2c90c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14ab2:	4d24      	ldr	r5, [pc, #144]	; (14b44 <mem_manage_fault.isra.0+0xd0>)
   14ab4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ab6:	079b      	lsls	r3, r3, #30
   14ab8:	d512      	bpl.n	14ae0 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   14aba:	f044 0801 	orr.w	r8, r4, #1
   14abe:	4641      	mov	r1, r8
   14ac0:	4824      	ldr	r0, [pc, #144]	; (14b54 <mem_manage_fault.isra.0+0xe0>)
   14ac2:	f017 ff23 	bl	2c90c <log_0>
		mmfar = SCB->MMFAR;
   14ac6:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14ac8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14aca:	0618      	lsls	r0, r3, #24
   14acc:	d508      	bpl.n	14ae0 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14ace:	4642      	mov	r2, r8
   14ad0:	4821      	ldr	r0, [pc, #132]	; (14b58 <mem_manage_fault.isra.0+0xe4>)
   14ad2:	f017 ff2a 	bl	2c92a <log_1>
			if (from_hard_fault) {
   14ad6:	b11f      	cbz	r7, 14ae0 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14ad8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14ade:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14ae0:	4d18      	ldr	r5, [pc, #96]	; (14b44 <mem_manage_fault.isra.0+0xd0>)
   14ae2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14ae4:	07d1      	lsls	r1, r2, #31
   14ae6:	d504      	bpl.n	14af2 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   14ae8:	481c      	ldr	r0, [pc, #112]	; (14b5c <mem_manage_fault.isra.0+0xe8>)
   14aea:	f044 0101 	orr.w	r1, r4, #1
   14aee:	f017 ff0d 	bl	2c90c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14af2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14af4:	069a      	lsls	r2, r3, #26
   14af6:	d504      	bpl.n	14b02 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   14af8:	4819      	ldr	r0, [pc, #100]	; (14b60 <mem_manage_fault.isra.0+0xec>)
   14afa:	f044 0101 	orr.w	r1, r4, #1
   14afe:	f017 ff05 	bl	2c90c <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   14b02:	4b10      	ldr	r3, [pc, #64]	; (14b44 <mem_manage_fault.isra.0+0xd0>)
   14b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14b06:	06db      	lsls	r3, r3, #27
   14b08:	d50e      	bpl.n	14b28 <mem_manage_fault.isra.0+0xb4>
	__ASSERT(0,
   14b0a:	4916      	ldr	r1, [pc, #88]	; (14b64 <mem_manage_fault.isra.0+0xf0>)
   14b0c:	f44f 739f 	mov.w	r3, #318	; 0x13e
   14b10:	4a15      	ldr	r2, [pc, #84]	; (14b68 <mem_manage_fault.isra.0+0xf4>)
   14b12:	4816      	ldr	r0, [pc, #88]	; (14b6c <mem_manage_fault.isra.0+0xf8>)
   14b14:	f017 fcad 	bl	2c472 <printk>
   14b18:	4815      	ldr	r0, [pc, #84]	; (14b70 <mem_manage_fault.isra.0+0xfc>)
   14b1a:	f017 fcaa 	bl	2c472 <printk>
   14b1e:	f44f 719f 	mov.w	r1, #318	; 0x13e
   14b22:	4811      	ldr	r0, [pc, #68]	; (14b68 <mem_manage_fault.isra.0+0xf4>)
   14b24:	f017 fec2 	bl	2c8ac <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   14b28:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14b2a:	4a06      	ldr	r2, [pc, #24]	; (14b44 <mem_manage_fault.isra.0+0xd0>)
   14b2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14b2e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14b32:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14b34:	7030      	strb	r0, [r6, #0]
}
   14b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b3a:	bf00      	nop
   14b3c:	0002f034 	.word	0x0002f034
   14b40:	0002f0b4 	.word	0x0002f0b4
   14b44:	e000ed00 	.word	0xe000ed00
   14b48:	00030f2f 	.word	0x00030f2f
   14b4c:	00030f45 	.word	0x00030f45
   14b50:	00030f78 	.word	0x00030f78
   14b54:	00030f8b 	.word	0x00030f8b
   14b58:	00030fa3 	.word	0x00030fa3
   14b5c:	00030fb9 	.word	0x00030fb9
   14b60:	00030fd8 	.word	0x00030fd8
   14b64:	00033086 	.word	0x00033086
   14b68:	00031007 	.word	0x00031007
   14b6c:	0003049a 	.word	0x0003049a
   14b70:	00031041 	.word	0x00031041

00014b74 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b78:	4b2a      	ldr	r3, [pc, #168]	; (14c24 <bus_fault.isra.0+0xb0>)
   14b7a:	4c2b      	ldr	r4, [pc, #172]	; (14c28 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14b7c:	4d2b      	ldr	r5, [pc, #172]	; (14c2c <bus_fault.isra.0+0xb8>)
   14b7e:	1ae4      	subs	r4, r4, r3
   14b80:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   14b82:	01a4      	lsls	r4, r4, #6
   14b84:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14b88:	4607      	mov	r7, r0
   14b8a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14b8c:	4828      	ldr	r0, [pc, #160]	; (14c30 <bus_fault.isra.0+0xbc>)
   14b8e:	4641      	mov	r1, r8
   14b90:	f017 febc 	bl	2c90c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14b94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14b96:	04d1      	lsls	r1, r2, #19
   14b98:	d503      	bpl.n	14ba2 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   14b9a:	4641      	mov	r1, r8
   14b9c:	4825      	ldr	r0, [pc, #148]	; (14c34 <bus_fault.isra.0+0xc0>)
   14b9e:	f017 feb5 	bl	2c90c <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14ba2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ba4:	051a      	lsls	r2, r3, #20
   14ba6:	d504      	bpl.n	14bb2 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14ba8:	4823      	ldr	r0, [pc, #140]	; (14c38 <bus_fault.isra.0+0xc4>)
   14baa:	f044 0101 	orr.w	r1, r4, #1
   14bae:	f017 fead 	bl	2c90c <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14bb2:	4d1e      	ldr	r5, [pc, #120]	; (14c2c <bus_fault.isra.0+0xb8>)
   14bb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bb6:	059b      	lsls	r3, r3, #22
   14bb8:	d512      	bpl.n	14be0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   14bba:	f044 0801 	orr.w	r8, r4, #1
   14bbe:	4641      	mov	r1, r8
   14bc0:	481e      	ldr	r0, [pc, #120]	; (14c3c <bus_fault.isra.0+0xc8>)
   14bc2:	f017 fea3 	bl	2c90c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14bc6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14bc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bca:	0418      	lsls	r0, r3, #16
   14bcc:	d508      	bpl.n	14be0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14bce:	4642      	mov	r2, r8
   14bd0:	481b      	ldr	r0, [pc, #108]	; (14c40 <bus_fault.isra.0+0xcc>)
   14bd2:	f017 feaa 	bl	2c92a <log_1>
			if (from_hard_fault) {
   14bd6:	b11f      	cbz	r7, 14be0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14bd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14bde:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14be0:	4d12      	ldr	r5, [pc, #72]	; (14c2c <bus_fault.isra.0+0xb8>)
   14be2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14be4:	0559      	lsls	r1, r3, #21
   14be6:	d504      	bpl.n	14bf2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   14be8:	4816      	ldr	r0, [pc, #88]	; (14c44 <bus_fault.isra.0+0xd0>)
   14bea:	f044 0101 	orr.w	r1, r4, #1
   14bee:	f017 fe8d 	bl	2c90c <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14bf2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bf4:	05da      	lsls	r2, r3, #23
   14bf6:	d50d      	bpl.n	14c14 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   14bf8:	4813      	ldr	r0, [pc, #76]	; (14c48 <bus_fault.isra.0+0xd4>)
   14bfa:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14bfe:	f017 fe85 	bl	2c90c <log_0>
	*recoverable = memory_fault_recoverable(esf);
   14c02:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14c04:	4a09      	ldr	r2, [pc, #36]	; (14c2c <bus_fault.isra.0+0xb8>)
   14c06:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14c08:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14c0c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14c0e:	7030      	strb	r0, [r6, #0]
}
   14c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14c14:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c16:	049b      	lsls	r3, r3, #18
   14c18:	d5f3      	bpl.n	14c02 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14c1a:	480c      	ldr	r0, [pc, #48]	; (14c4c <bus_fault.isra.0+0xd8>)
   14c1c:	f044 0101 	orr.w	r1, r4, #1
   14c20:	e7ed      	b.n	14bfe <bus_fault.isra.0+0x8a>
   14c22:	bf00      	nop
   14c24:	0002f034 	.word	0x0002f034
   14c28:	0002f0b4 	.word	0x0002f0b4
   14c2c:	e000ed00 	.word	0xe000ed00
   14c30:	0003107b 	.word	0x0003107b
   14c34:	00031091 	.word	0x00031091
   14c38:	00030f78 	.word	0x00030f78
   14c3c:	000310a2 	.word	0x000310a2
   14c40:	000310bb 	.word	0x000310bb
   14c44:	000310d0 	.word	0x000310d0
   14c48:	000310eb 	.word	0x000310eb
   14c4c:	00030fd8 	.word	0x00030fd8

00014c50 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14c54:	4b63      	ldr	r3, [pc, #396]	; (14de4 <z_arm_fault+0x194>)
{
   14c56:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14c58:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   14c5c:	460e      	mov	r6, r1
   14c5e:	4614      	mov	r4, r2
   14c60:	2700      	movs	r7, #0
   14c62:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14c64:	f3c8 0508 	ubfx	r5, r8, #0, #9
   14c68:	f387 8811 	msr	BASEPRI, r7
   14c6c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14c70:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14c74:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14c78:	d117      	bne.n	14caa <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   14c7a:	07d0      	lsls	r0, r2, #31
   14c7c:	d415      	bmi.n	14caa <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   14c7e:	0651      	lsls	r1, r2, #25
   14c80:	d404      	bmi.n	14c8c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14c82:	0722      	lsls	r2, r4, #28
   14c84:	d40f      	bmi.n	14ca6 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)msp;
   14c86:	464e      	mov	r6, r9
			*nested_exc = true;
   14c88:	2701      	movs	r7, #1
   14c8a:	e00d      	b.n	14ca8 <z_arm_fault+0x58>
   14c8c:	4956      	ldr	r1, [pc, #344]	; (14de8 <z_arm_fault+0x198>)
   14c8e:	4b57      	ldr	r3, [pc, #348]	; (14dec <z_arm_fault+0x19c>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   14c90:	4857      	ldr	r0, [pc, #348]	; (14df0 <z_arm_fault+0x1a0>)
   14c92:	1a5b      	subs	r3, r3, r1
   14c94:	08db      	lsrs	r3, r3, #3
   14c96:	019b      	lsls	r3, r3, #6
   14c98:	f043 0101 	orr.w	r1, r3, #1
   14c9c:	f017 fe36 	bl	2c90c <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   14ca0:	f014 0704 	ands.w	r7, r4, #4
   14ca4:	d01e      	beq.n	14ce4 <z_arm_fault+0x94>
	*nested_exc = false;
   14ca6:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14ca8:	b97e      	cbnz	r6, 14cca <z_arm_fault+0x7a>
   14caa:	f240 33bb 	movw	r3, #955	; 0x3bb
   14cae:	4a51      	ldr	r2, [pc, #324]	; (14df4 <z_arm_fault+0x1a4>)
   14cb0:	4951      	ldr	r1, [pc, #324]	; (14df8 <z_arm_fault+0x1a8>)
   14cb2:	4852      	ldr	r0, [pc, #328]	; (14dfc <z_arm_fault+0x1ac>)
   14cb4:	f017 fbdd 	bl	2c472 <printk>
   14cb8:	4851      	ldr	r0, [pc, #324]	; (14e00 <z_arm_fault+0x1b0>)
   14cba:	f017 fbda 	bl	2c472 <printk>
   14cbe:	f240 31bb 	movw	r1, #955	; 0x3bb
   14cc2:	484c      	ldr	r0, [pc, #304]	; (14df4 <z_arm_fault+0x1a4>)
   14cc4:	f017 fdf2 	bl	2c8ac <assert_post_action>
   14cc8:	2600      	movs	r6, #0
	*recoverable = false;
   14cca:	2300      	movs	r3, #0
   14ccc:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   14cd0:	1eeb      	subs	r3, r5, #3
   14cd2:	2b09      	cmp	r3, #9
   14cd4:	d86c      	bhi.n	14db0 <z_arm_fault+0x160>
   14cd6:	e8df f003 	tbb	[pc, r3]
   14cda:	5a07      	.short	0x5a07
   14cdc:	6b6b3e5e 	.word	0x6b6b3e5e
   14ce0:	626b6b6b 	.word	0x626b6b6b
			ptr_esf = (z_arch_esf_t *)msp;
   14ce4:	464e      	mov	r6, r9
	if (!alternative_state_exc) {
   14ce6:	e7df      	b.n	14ca8 <z_arm_fault+0x58>
	*recoverable = false;
   14ce8:	f04f 0800 	mov.w	r8, #0
   14cec:	4b3e      	ldr	r3, [pc, #248]	; (14de8 <z_arm_fault+0x198>)
   14cee:	4d3f      	ldr	r5, [pc, #252]	; (14dec <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   14cf0:	4844      	ldr	r0, [pc, #272]	; (14e04 <z_arm_fault+0x1b4>)
   14cf2:	1aed      	subs	r5, r5, r3
   14cf4:	08ed      	lsrs	r5, r5, #3
   14cf6:	01ad      	lsls	r5, r5, #6
   14cf8:	f045 0501 	orr.w	r5, r5, #1
   14cfc:	4629      	mov	r1, r5
   14cfe:	f017 fe05 	bl	2c90c <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14d02:	4b38      	ldr	r3, [pc, #224]	; (14de4 <z_arm_fault+0x194>)
	*recoverable = false;
   14d04:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14d08:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   14d0a:	f014 0402 	ands.w	r4, r4, #2
   14d0e:	d005      	beq.n	14d1c <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   14d10:	4629      	mov	r1, r5
   14d12:	483d      	ldr	r0, [pc, #244]	; (14e08 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO(
   14d14:	f017 fdfa 	bl	2c90c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14d18:	2400      	movs	r4, #0
}
   14d1a:	e01f      	b.n	14d5c <z_arm_fault+0x10c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14d1e:	005b      	lsls	r3, r3, #1
   14d20:	d51c      	bpl.n	14d5c <z_arm_fault+0x10c>
		PR_EXC("  Fault escalation (see below)");
   14d22:	4629      	mov	r1, r5
   14d24:	4839      	ldr	r0, [pc, #228]	; (14e0c <z_arm_fault+0x1bc>)
   14d26:	f017 fdf1 	bl	2c90c <log_0>
		if (SCB_MMFSR != 0) {
   14d2a:	4b39      	ldr	r3, [pc, #228]	; (14e10 <z_arm_fault+0x1c0>)
   14d2c:	781b      	ldrb	r3, [r3, #0]
   14d2e:	b12b      	cbz	r3, 14d3c <z_arm_fault+0xec>
			reason = mem_manage_fault(esf, 1, recoverable);
   14d30:	2001      	movs	r0, #1
   14d32:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   14d36:	f7ff fe9d 	bl	14a74 <mem_manage_fault.isra.0>
   14d3a:	e00e      	b.n	14d5a <z_arm_fault+0x10a>
		} else if (SCB_BFSR != 0) {
   14d3c:	4b35      	ldr	r3, [pc, #212]	; (14e14 <z_arm_fault+0x1c4>)
   14d3e:	781b      	ldrb	r3, [r3, #0]
   14d40:	b12b      	cbz	r3, 14d4e <z_arm_fault+0xfe>
			reason = bus_fault(esf, 1, recoverable);
   14d42:	2001      	movs	r0, #1
   14d44:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   14d48:	f7ff ff14 	bl	14b74 <bus_fault.isra.0>
   14d4c:	e005      	b.n	14d5a <z_arm_fault+0x10a>
		} else if (SCB_UFSR != 0) {
   14d4e:	4b32      	ldr	r3, [pc, #200]	; (14e18 <z_arm_fault+0x1c8>)
   14d50:	881b      	ldrh	r3, [r3, #0]
   14d52:	b29b      	uxth	r3, r3
   14d54:	b113      	cbz	r3, 14d5c <z_arm_fault+0x10c>
			reason = usage_fault(esf);
   14d56:	f7ff fe25 	bl	149a4 <usage_fault.isra.0>
   14d5a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14d60:	b993      	cbnz	r3, 14d88 <z_arm_fault+0x138>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14d62:	2268      	movs	r2, #104	; 0x68
   14d64:	4631      	mov	r1, r6
   14d66:	a802      	add	r0, sp, #8
   14d68:	f7f7 fef0 	bl	cb4c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14d6e:	b39f      	cbz	r7, 14dd8 <z_arm_fault+0x188>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14d70:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14d74:	b922      	cbnz	r2, 14d80 <z_arm_fault+0x130>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14d76:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14d7a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14d7e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14d80:	4620      	mov	r0, r4
   14d82:	a902      	add	r1, sp, #8
   14d84:	f7ff fd26 	bl	147d4 <z_arm_fatal_error>
}
   14d88:	b01d      	add	sp, #116	; 0x74
   14d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   14d8e:	2000      	movs	r0, #0
   14d90:	f10d 0107 	add.w	r1, sp, #7
   14d94:	e7cf      	b.n	14d36 <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
   14d96:	2000      	movs	r0, #0
   14d98:	f10d 0107 	add.w	r1, sp, #7
   14d9c:	e7d4      	b.n	14d48 <z_arm_fault+0xf8>
   14d9e:	4913      	ldr	r1, [pc, #76]	; (14dec <z_arm_fault+0x19c>)
   14da0:	4b11      	ldr	r3, [pc, #68]	; (14de8 <z_arm_fault+0x198>)
	PR_FAULT_INFO(
   14da2:	481e      	ldr	r0, [pc, #120]	; (14e1c <z_arm_fault+0x1cc>)
   14da4:	1ac9      	subs	r1, r1, r3
   14da6:	08c9      	lsrs	r1, r1, #3
   14da8:	0189      	lsls	r1, r1, #6
   14daa:	f041 0101 	orr.w	r1, r1, #1
   14dae:	e7b1      	b.n	14d14 <z_arm_fault+0xc4>
   14db0:	4a0d      	ldr	r2, [pc, #52]	; (14de8 <z_arm_fault+0x198>)
   14db2:	4b0e      	ldr	r3, [pc, #56]	; (14dec <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** %s %d) *****",
   14db4:	481a      	ldr	r0, [pc, #104]	; (14e20 <z_arm_fault+0x1d0>)
   14db6:	1a9b      	subs	r3, r3, r2
   14db8:	08db      	lsrs	r3, r3, #3
   14dba:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   14dbe:	ea4f 1383 	mov.w	r3, r3, lsl #6
   14dc2:	4918      	ldr	r1, [pc, #96]	; (14e24 <z_arm_fault+0x1d4>)
   14dc4:	f043 0301 	orr.w	r3, r3, #1
   14dc8:	bf18      	it	ne
   14dca:	4601      	movne	r1, r0
   14dcc:	f1a5 0210 	sub.w	r2, r5, #16
   14dd0:	4815      	ldr	r0, [pc, #84]	; (14e28 <z_arm_fault+0x1d8>)
   14dd2:	f017 fdc1 	bl	2c958 <log_2>
   14dd6:	e79f      	b.n	14d18 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14dd8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14ddc:	f023 0301 	bic.w	r3, r3, #1
   14de0:	e7cd      	b.n	14d7e <z_arm_fault+0x12e>
   14de2:	bf00      	nop
   14de4:	e000ed00 	.word	0xe000ed00
   14de8:	0002f034 	.word	0x0002f034
   14dec:	0002f0b4 	.word	0x0002f0b4
   14df0:	00031103 	.word	0x00031103
   14df4:	00031007 	.word	0x00031007
   14df8:	00031126 	.word	0x00031126
   14dfc:	0003049a 	.word	0x0003049a
   14e00:	00031139 	.word	0x00031139
   14e04:	00031177 	.word	0x00031177
   14e08:	0003118e 	.word	0x0003118e
   14e0c:	000311af 	.word	0x000311af
   14e10:	e000ed28 	.word	0xe000ed28
   14e14:	e000ed29 	.word	0xe000ed29
   14e18:	e000ed2a 	.word	0xe000ed2a
   14e1c:	000311ce 	.word	0x000311ce
   14e20:	00031219 	.word	0x00031219
   14e24:	00031204 	.word	0x00031204
   14e28:	00031232 	.word	0x00031232

00014e2c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14e2c:	4b04      	ldr	r3, [pc, #16]	; (14e40 <z_arm_fault_init+0x14>)
   14e2e:	695a      	ldr	r2, [r3, #20]
   14e30:	f042 0210 	orr.w	r2, r2, #16
   14e34:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   14e36:	695a      	ldr	r2, [r3, #20]
   14e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   14e3c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   14e3e:	4770      	bx	lr
   14e40:	e000ed00 	.word	0xe000ed00

00014e44 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14e44:	4b04      	ldr	r3, [pc, #16]	; (14e58 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14e46:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14e48:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   14e4a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14e4c:	d003      	beq.n	14e56 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14e4e:	4903      	ldr	r1, [pc, #12]	; (14e5c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14e54:	600a      	str	r2, [r1, #0]

00014e56 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14e56:	4770      	bx	lr
	ldr r3, =_kernel
   14e58:	20021de0 	.word	0x20021de0
	ldr r1, =_SCS_ICSR
   14e5c:	e000ed04 	.word	0xe000ed04

00014e60 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   14e60:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14e64:	4905      	ldr	r1, [pc, #20]	; (14e7c <sys_arch_reboot+0x1c>)
   14e66:	4b06      	ldr	r3, [pc, #24]	; (14e80 <sys_arch_reboot+0x20>)
   14e68:	68ca      	ldr	r2, [r1, #12]
   14e6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14e6e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14e70:	60cb      	str	r3, [r1, #12]
   14e72:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14e76:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14e78:	e7fd      	b.n	14e76 <sys_arch_reboot+0x16>
   14e7a:	bf00      	nop
   14e7c:	e000ed00 	.word	0xe000ed00
   14e80:	05fa0004 	.word	0x05fa0004

00014e84 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14e84:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e86:	2120      	movs	r1, #32
   14e88:	4803      	ldr	r0, [pc, #12]	; (14e98 <z_arm_interrupt_init+0x14>)
   14e8a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14e8c:	3301      	adds	r3, #1
   14e8e:	2b41      	cmp	r3, #65	; 0x41
   14e90:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14e94:	d1f9      	bne.n	14e8a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14e96:	4770      	bx	lr
   14e98:	e000e100 	.word	0xe000e100

00014e9c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   14e9c:	b510      	push	{r4, lr}
   14e9e:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   14ea0:	f00f f8e8 	bl	24074 <z_thread_single_abort>

	if (_current == thread) {
   14ea4:	4b11      	ldr	r3, [pc, #68]	; (14eec <z_impl_k_thread_abort+0x50>)
   14ea6:	689b      	ldr	r3, [r3, #8]
   14ea8:	42a3      	cmp	r3, r4
   14eaa:	d107      	bne.n	14ebc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14eac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14eb0:	b183      	cbz	r3, 14ed4 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14eb2:	4a0f      	ldr	r2, [pc, #60]	; (14ef0 <z_impl_k_thread_abort+0x54>)
   14eb4:	6853      	ldr	r3, [r2, #4]
   14eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14eba:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   14ebc:	f04f 0320 	mov.w	r3, #32
   14ec0:	f3ef 8011 	mrs	r0, BASEPRI
   14ec4:	f383 8811 	msr	BASEPRI, r3
   14ec8:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   14ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   14ed0:	f019 bda2 	b.w	2ea18 <z_reschedule_irqlock>
   14ed4:	f04f 0320 	mov.w	r3, #32
   14ed8:	f3ef 8011 	mrs	r0, BASEPRI
   14edc:	f383 8811 	msr	BASEPRI, r3
   14ee0:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   14ee4:	f7ff fb34 	bl	14550 <arch_swap>
	return ret;
   14ee8:	e7e8      	b.n	14ebc <z_impl_k_thread_abort+0x20>
   14eea:	bf00      	nop
   14eec:	20021de0 	.word	0x20021de0
   14ef0:	e000ed00 	.word	0xe000ed00

00014ef4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14ef4:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   14ef6:	4b0e      	ldr	r3, [pc, #56]	; (14f30 <z_arm_configure_static_mpu_regions+0x3c>)
{
   14ef8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   14efa:	9302      	str	r3, [sp, #8]
   14efc:	4b0d      	ldr	r3, [pc, #52]	; (14f34 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14efe:	4c0e      	ldr	r4, [pc, #56]	; (14f38 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   14f00:	9303      	str	r3, [sp, #12]
   14f02:	4b0e      	ldr	r3, [pc, #56]	; (14f3c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14f04:	4a0e      	ldr	r2, [pc, #56]	; (14f40 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   14f06:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   14f08:	ab02      	add	r3, sp, #8
   14f0a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14f0c:	a801      	add	r0, sp, #4
   14f0e:	4623      	mov	r3, r4
   14f10:	2101      	movs	r1, #1
   14f12:	f000 f96d 	bl	151f0 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   14f16:	2300      	movs	r3, #0
   14f18:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   14f1a:	4b0a      	ldr	r3, [pc, #40]	; (14f44 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14f1c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   14f1e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14f20:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   14f22:	9305      	str	r3, [sp, #20]
   14f24:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14f26:	f000 f989 	bl	1523c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   14f2a:	b008      	add	sp, #32
   14f2c:	bd10      	pop	{r4, pc}
   14f2e:	bf00      	nop
   14f30:	20020000 	.word	0x20020000
   14f34:	00000000 	.word	0x00000000
   14f38:	20040000 	.word	0x20040000
   14f3c:	00010006 	.word	0x00010006
   14f40:	20020000 	.word	0x20020000
   14f44:	20020cd8 	.word	0x20020cd8

00014f48 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   14f48:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   14f4a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   14f4c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   14f4e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   14f52:	f004 031f 	and.w	r3, r4, #31
   14f56:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14f58:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14f5a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14f5c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   14f60:	4904      	ldr	r1, [pc, #16]	; (14f74 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14f62:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   14f66:	f043 0301 	orr.w	r3, r3, #1
   14f6a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   14f6c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   14f6e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   14f70:	bd10      	pop	{r4, pc}
   14f72:	bf00      	nop
   14f74:	e000ed90 	.word	0xe000ed90

00014f78 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   14f78:	b508      	push	{r3, lr}
   14f7a:	4a07      	ldr	r2, [pc, #28]	; (14f98 <region_allocate_and_init.part.0+0x20>)
   14f7c:	4b07      	ldr	r3, [pc, #28]	; (14f9c <region_allocate_and_init.part.0+0x24>)
   14f7e:	4601      	mov	r1, r0
   14f80:	1ad2      	subs	r2, r2, r3
   14f82:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14f84:	0192      	lsls	r2, r2, #6
   14f86:	4806      	ldr	r0, [pc, #24]	; (14fa0 <region_allocate_and_init.part.0+0x28>)
   14f88:	f042 0201 	orr.w	r2, r2, #1
   14f8c:	f017 fccd 	bl	2c92a <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   14f90:	f06f 0015 	mvn.w	r0, #21
   14f94:	bd08      	pop	{r3, pc}
   14f96:	bf00      	nop
   14f98:	0002f09c 	.word	0x0002f09c
   14f9c:	0002f034 	.word	0x0002f034
   14fa0:	00031249 	.word	0x00031249

00014fa4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   14fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa8:	4607      	mov	r7, r0
   14faa:	4688      	mov	r8, r1
   14fac:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   14fae:	2600      	movs	r6, #0
	MPU->RNR = index;
   14fb0:	4d56      	ldr	r5, [pc, #344]	; (1510c <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   14fb2:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   14fb4:	4546      	cmp	r6, r8
   14fb6:	da35      	bge.n	15024 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   14fb8:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   14fbc:	f8d3 9004 	ldr.w	r9, [r3, #4]
   14fc0:	f1b9 0f00 	cmp.w	r9, #0
   14fc4:	d051      	beq.n	1506a <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   14fc6:	f1b9 0f1f 	cmp.w	r9, #31
   14fca:	d91e      	bls.n	1500a <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   14fcc:	f019 0f1f 	tst.w	r9, #31
   14fd0:	d11b      	bne.n	1500a <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   14fd2:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   14fd6:	f01a 0f1f 	tst.w	sl, #31
   14fda:	d116      	bne.n	1500a <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14fdc:	4650      	mov	r0, sl
   14fde:	f018 f86f 	bl	2d0c0 <arm_cmse_mpu_region_get>
   14fe2:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14fe4:	eb09 000a 	add.w	r0, r9, sl
   14fe8:	3801      	subs	r0, #1
   14fea:	f018 f869 	bl	2d0c0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   14fee:	4583      	cmp	fp, r0
   14ff0:	d01c      	beq.n	1502c <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   14ff2:	f06f 0b15 	mvn.w	fp, #21
   14ff6:	4a46      	ldr	r2, [pc, #280]	; (15110 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   14ff8:	4b46      	ldr	r3, [pc, #280]	; (15114 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   14ffa:	4659      	mov	r1, fp
   14ffc:	1ad2      	subs	r2, r2, r3
   14ffe:	08d2      	lsrs	r2, r2, #3
   15000:	0192      	lsls	r2, r2, #6
   15002:	4845      	ldr	r0, [pc, #276]	; (15118 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   15004:	f042 0201 	orr.w	r2, r2, #1
   15008:	e008      	b.n	1501c <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1500a:	4631      	mov	r1, r6
   1500c:	4a40      	ldr	r2, [pc, #256]	; (15110 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   1500e:	4b41      	ldr	r3, [pc, #260]	; (15114 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   15010:	4842      	ldr	r0, [pc, #264]	; (1511c <mpu_configure_regions_and_partition.constprop.0+0x178>)
   15012:	1ad2      	subs	r2, r2, r3
   15014:	08d2      	lsrs	r2, r2, #3
   15016:	0192      	lsls	r2, r2, #6
   15018:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   1501c:	f017 fc85 	bl	2c92a <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   15020:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   15024:	4620      	mov	r0, r4
   15026:	b005      	add	sp, #20
   15028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1502c:	f11b 0f16 	cmn.w	fp, #22
   15030:	d0e1      	beq.n	14ff6 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   15032:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   15034:	455b      	cmp	r3, fp
   15036:	dbde      	blt.n	14ff6 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   15038:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1503c:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1503e:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   15042:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   15044:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   15048:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1504c:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   15050:	e9d1 3200 	ldrd	r3, r2, [r1]
   15054:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   15056:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   15058:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   1505c:	d118      	bne.n	15090 <mpu_configure_regions_and_partition.constprop.0+0xec>
   1505e:	45ca      	cmp	sl, r9
   15060:	d105      	bne.n	1506e <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   15062:	fa5f f08b 	uxtb.w	r0, fp
   15066:	f018 f80a 	bl	2d07e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1506a:	3601      	adds	r6, #1
   1506c:	e7a2      	b.n	14fb4 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   1506e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   15072:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   15074:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   15078:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1507c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1507e:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   15080:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   15082:	f017 fffc 	bl	2d07e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   15086:	f110 0f16 	cmn.w	r0, #22
   1508a:	d0c9      	beq.n	15020 <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   1508c:	1c44      	adds	r4, r0, #1
   1508e:	e7ec      	b.n	1506a <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   15090:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   15094:	692a      	ldr	r2, [r5, #16]
   15096:	3b01      	subs	r3, #1
   15098:	f023 031f 	bic.w	r3, r3, #31
   1509c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   150a0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   150a2:	45ca      	cmp	sl, r9
   150a4:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   150a6:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   150a8:	d0eb      	beq.n	15082 <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   150aa:	f017 ffe8 	bl	2d07e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   150ae:	f110 0f16 	cmn.w	r0, #22
   150b2:	d0b5      	beq.n	15020 <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   150b4:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   150b8:	68ea      	ldr	r2, [r5, #12]
   150ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   150be:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   150c2:	f362 0304 	bfi	r3, r2, #0, #5
   150c6:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   150ca:	692b      	ldr	r3, [r5, #16]
   150cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   150d0:	085b      	lsrs	r3, r3, #1
   150d2:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   150d6:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   150da:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   150de:	e9d3 1300 	ldrd	r1, r3, [r3]
   150e2:	440b      	add	r3, r1
   150e4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   150e6:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   150ea:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   150ec:	4453      	add	r3, sl
   150ee:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   150f2:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   150f4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   150f8:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   150fa:	9303      	str	r3, [sp, #12]
   150fc:	d902      	bls.n	15104 <mpu_configure_regions_and_partition.constprop.0+0x160>
   150fe:	f7ff ff3b 	bl	14f78 <region_allocate_and_init.part.0>
   15102:	e7c0      	b.n	15086 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   15104:	4669      	mov	r1, sp
   15106:	f7ff ff1f 	bl	14f48 <region_init>
			if (reg_index == -EINVAL) {
   1510a:	e7bf      	b.n	1508c <mpu_configure_regions_and_partition.constprop.0+0xe8>
   1510c:	e000ed90 	.word	0xe000ed90
   15110:	0002f09c 	.word	0x0002f09c
   15114:	0002f034 	.word	0x0002f034
   15118:	00031292 	.word	0x00031292
   1511c:	0003126f 	.word	0x0003126f

00015120 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15120:	2205      	movs	r2, #5
   15122:	4b03      	ldr	r3, [pc, #12]	; (15130 <arm_core_mpu_enable+0x10>)
   15124:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   15126:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1512a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1512e:	4770      	bx	lr
   15130:	e000ed90 	.word	0xe000ed90

00015134 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   15134:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15138:	2200      	movs	r2, #0
   1513a:	4b01      	ldr	r3, [pc, #4]	; (15140 <arm_core_mpu_disable+0xc>)
   1513c:	605a      	str	r2, [r3, #4]
}
   1513e:	4770      	bx	lr
   15140:	e000ed90 	.word	0xe000ed90

00015144 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   15144:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15146:	4e20      	ldr	r6, [pc, #128]	; (151c8 <arm_mpu_init+0x84>)
   15148:	6835      	ldr	r5, [r6, #0]
   1514a:	2d10      	cmp	r5, #16
   1514c:	d913      	bls.n	15176 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1514e:	f44f 739d 	mov.w	r3, #314	; 0x13a
   15152:	4a1e      	ldr	r2, [pc, #120]	; (151cc <arm_mpu_init+0x88>)
   15154:	491e      	ldr	r1, [pc, #120]	; (151d0 <arm_mpu_init+0x8c>)
   15156:	481f      	ldr	r0, [pc, #124]	; (151d4 <arm_mpu_init+0x90>)
   15158:	f017 f98b 	bl	2c472 <printk>
   1515c:	2210      	movs	r2, #16
   1515e:	4629      	mov	r1, r5
   15160:	481d      	ldr	r0, [pc, #116]	; (151d8 <arm_mpu_init+0x94>)
   15162:	f017 f986 	bl	2c472 <printk>
   15166:	4819      	ldr	r0, [pc, #100]	; (151cc <arm_mpu_init+0x88>)
   15168:	f44f 719d 	mov.w	r1, #314	; 0x13a
   1516c:	f017 fb9e 	bl	2c8ac <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   15170:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   15174:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   15176:	f7ff ffdd 	bl	15134 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1517a:	2000      	movs	r0, #0
	MPU->MAIR0 =
   1517c:	4c17      	ldr	r4, [pc, #92]	; (151dc <arm_mpu_init+0x98>)
   1517e:	4a18      	ldr	r2, [pc, #96]	; (151e0 <arm_mpu_init+0x9c>)
   15180:	6322      	str	r2, [r4, #48]	; 0x30
   15182:	4285      	cmp	r5, r0
   15184:	d119      	bne.n	151ba <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   15186:	4b17      	ldr	r3, [pc, #92]	; (151e4 <arm_mpu_init+0xa0>)
   15188:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   1518a:	f7ff ffc9 	bl	15120 <arm_core_mpu_enable>
	__ASSERT(
   1518e:	6823      	ldr	r3, [r4, #0]
   15190:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15194:	2b10      	cmp	r3, #16
   15196:	d00e      	beq.n	151b6 <arm_mpu_init+0x72>
   15198:	4913      	ldr	r1, [pc, #76]	; (151e8 <arm_mpu_init+0xa4>)
   1519a:	f44f 73b0 	mov.w	r3, #352	; 0x160
   1519e:	4a0b      	ldr	r2, [pc, #44]	; (151cc <arm_mpu_init+0x88>)
   151a0:	480c      	ldr	r0, [pc, #48]	; (151d4 <arm_mpu_init+0x90>)
   151a2:	f017 f966 	bl	2c472 <printk>
   151a6:	4811      	ldr	r0, [pc, #68]	; (151ec <arm_mpu_init+0xa8>)
   151a8:	f017 f963 	bl	2c472 <printk>
   151ac:	f44f 71b0 	mov.w	r1, #352	; 0x160
   151b0:	4806      	ldr	r0, [pc, #24]	; (151cc <arm_mpu_init+0x88>)
   151b2:	f017 fb7b 	bl	2c8ac <assert_post_action>
	return 0;
   151b6:	2000      	movs	r0, #0
   151b8:	e7dc      	b.n	15174 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   151ba:	6871      	ldr	r1, [r6, #4]
   151bc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   151c0:	f7ff fec2 	bl	14f48 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   151c4:	3001      	adds	r0, #1
   151c6:	e7dc      	b.n	15182 <arm_mpu_init+0x3e>
   151c8:	0002f2e8 	.word	0x0002f2e8
   151cc:	000312b5 	.word	0x000312b5
   151d0:	00033086 	.word	0x00033086
   151d4:	0003049a 	.word	0x0003049a
   151d8:	000312f5 	.word	0x000312f5
   151dc:	e000ed90 	.word	0xe000ed90
   151e0:	0044ffaa 	.word	0x0044ffaa
   151e4:	2002473a 	.word	0x2002473a
   151e8:	00031329 	.word	0x00031329
   151ec:	0003137a 	.word	0x0003137a

000151f0 <arm_core_mpu_configure_static_mpu_regions>:
{
   151f0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   151f2:	4d0d      	ldr	r5, [pc, #52]	; (15228 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   151f4:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   151f6:	782a      	ldrb	r2, [r5, #0]
   151f8:	f7ff fed4 	bl	14fa4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   151fc:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   151fe:	3016      	adds	r0, #22
   15200:	d111      	bne.n	15226 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15202:	f240 1303 	movw	r3, #259	; 0x103
   15206:	4a09      	ldr	r2, [pc, #36]	; (1522c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15208:	4909      	ldr	r1, [pc, #36]	; (15230 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1520a:	480a      	ldr	r0, [pc, #40]	; (15234 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   1520c:	f017 f931 	bl	2c472 <printk>
   15210:	4621      	mov	r1, r4
   15212:	4809      	ldr	r0, [pc, #36]	; (15238 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   15214:	f017 f92d 	bl	2c472 <printk>
}
   15218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1521c:	f240 1103 	movw	r1, #259	; 0x103
   15220:	4802      	ldr	r0, [pc, #8]	; (1522c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15222:	f017 bb43 	b.w	2c8ac <assert_post_action>
}
   15226:	bd38      	pop	{r3, r4, r5, pc}
   15228:	2002473a 	.word	0x2002473a
   1522c:	000312b5 	.word	0x000312b5
   15230:	00033086 	.word	0x00033086
   15234:	0003049a 	.word	0x0003049a
   15238:	0003139b 	.word	0x0003139b

0001523c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1523c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15240:	4e2f      	ldr	r6, [pc, #188]	; (15300 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   15242:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   15244:	4605      	mov	r5, r0
   15246:	f04f 0800 	mov.w	r8, #0
   1524a:	46b3      	mov	fp, r6
	MPU->RNR = index;
   1524c:	4f2d      	ldr	r7, [pc, #180]	; (15304 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1524e:	45c8      	cmp	r8, r9
   15250:	db02      	blt.n	15258 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
   15252:	b003      	add	sp, #12
   15254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   15258:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1525c:	f1ba 0f00 	cmp.w	sl, #0
   15260:	d049      	beq.n	152f6 <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   15262:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   15264:	4608      	mov	r0, r1
   15266:	9101      	str	r1, [sp, #4]
   15268:	f017 ff2a 	bl	2d0c0 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1526c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1526e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   15270:	eb0a 0001 	add.w	r0, sl, r1
   15274:	3801      	subs	r0, #1
   15276:	f017 ff23 	bl	2d0c0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1527a:	4284      	cmp	r4, r0
   1527c:	f04f 0214 	mov.w	r2, #20
   15280:	4b21      	ldr	r3, [pc, #132]	; (15308 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   15282:	d018      	beq.n	152b6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   15284:	f06f 0315 	mvn.w	r3, #21
   15288:	fb02 f808 	mul.w	r8, r2, r8
   1528c:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   15290:	f240 1313 	movw	r3, #275	; 0x113
   15294:	4a1d      	ldr	r2, [pc, #116]	; (1530c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   15296:	491e      	ldr	r1, [pc, #120]	; (15310 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   15298:	481e      	ldr	r0, [pc, #120]	; (15314 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1529a:	f017 f8ea 	bl	2c472 <printk>
   1529e:	4649      	mov	r1, r9
   152a0:	481d      	ldr	r0, [pc, #116]	; (15318 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   152a2:	f017 f8e6 	bl	2c472 <printk>
   152a6:	f240 1113 	movw	r1, #275	; 0x113
   152aa:	4818      	ldr	r0, [pc, #96]	; (1530c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   152ac:	b003      	add	sp, #12
   152ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   152b2:	f017 bafb 	b.w	2c8ac <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   152b6:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   152ba:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   152bc:	d0e8      	beq.n	15290 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   152be:	7819      	ldrb	r1, [r3, #0]
   152c0:	42a1      	cmp	r1, r4
   152c2:	dde5      	ble.n	15290 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   152c4:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   152c8:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   152ca:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   152cc:	68fc      	ldr	r4, [r7, #12]
   152ce:	f100 0108 	add.w	r1, r0, #8
   152d2:	7b00      	ldrb	r0, [r0, #12]
   152d4:	f364 0004 	bfi	r0, r4, #0, #5
   152d8:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   152da:	6938      	ldr	r0, [r7, #16]
   152dc:	790c      	ldrb	r4, [r1, #4]
   152de:	0840      	lsrs	r0, r0, #1
   152e0:	f360 1447 	bfi	r4, r0, #5, #3
   152e4:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   152e6:	68f9      	ldr	r1, [r7, #12]
   152e8:	f021 011f 	bic.w	r1, r1, #31
   152ec:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   152ee:	6939      	ldr	r1, [r7, #16]
   152f0:	f021 011f 	bic.w	r1, r1, #31
   152f4:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   152f6:	f108 0801 	add.w	r8, r8, #1
   152fa:	3614      	adds	r6, #20
   152fc:	350c      	adds	r5, #12
   152fe:	e7a6      	b.n	1524e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   15300:	200215e0 	.word	0x200215e0
   15304:	e000ed90 	.word	0xe000ed90
   15308:	2002473a 	.word	0x2002473a
   1530c:	000312b5 	.word	0x000312b5
   15310:	00033086 	.word	0x00033086
   15314:	0003049a 	.word	0x0003049a
   15318:	000313c7 	.word	0x000313c7

0001531c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1531c:	4b01      	ldr	r3, [pc, #4]	; (15324 <__stdout_hook_install+0x8>)
   1531e:	6018      	str	r0, [r3, #0]
}
   15320:	4770      	bx	lr
   15322:	bf00      	nop
   15324:	20020438 	.word	0x20020438

00015328 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   15328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1532a:	4606      	mov	r6, r0
   1532c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1532e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   15330:	4f06      	ldr	r7, [pc, #24]	; (1534c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   15332:	42ac      	cmp	r4, r5
   15334:	da08      	bge.n	15348 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   15336:	683b      	ldr	r3, [r7, #0]
   15338:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1533a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1533c:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1533e:	f104 0401 	add.w	r4, r4, #1
   15342:	d001      	beq.n	15348 <z_impl_zephyr_read_stdin+0x20>
   15344:	280d      	cmp	r0, #13
   15346:	d1f4      	bne.n	15332 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   15348:	4620      	mov	r0, r4
   1534a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1534c:	20020434 	.word	0x20020434

00015350 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   15350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15352:	460d      	mov	r5, r1
   15354:	4f09      	ldr	r7, [pc, #36]	; (1537c <z_impl_zephyr_write_stdout+0x2c>)
   15356:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   15358:	f1c0 0401 	rsb	r4, r0, #1
   1535c:	19a3      	adds	r3, r4, r6
   1535e:	429d      	cmp	r5, r3
   15360:	dc01      	bgt.n	15366 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   15362:	4628      	mov	r0, r5
   15364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   15366:	7873      	ldrb	r3, [r6, #1]
   15368:	2b0a      	cmp	r3, #10
   1536a:	d102      	bne.n	15372 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1536c:	200d      	movs	r0, #13
   1536e:	683b      	ldr	r3, [r7, #0]
   15370:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   15372:	683b      	ldr	r3, [r7, #0]
   15374:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   15378:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1537a:	e7ef      	b.n	1535c <z_impl_zephyr_write_stdout+0xc>
   1537c:	20020438 	.word	0x20020438

00015380 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   15380:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   15382:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15384:	4801      	ldr	r0, [pc, #4]	; (1538c <_exit+0xc>)
   15386:	f7ff ffe3 	bl	15350 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   1538a:	e7fe      	b.n	1538a <_exit+0xa>
   1538c:	000313f6 	.word	0x000313f6

00015390 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   15390:	b510      	push	{r4, lr}
   15392:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   15394:	f04f 32ff 	mov.w	r2, #4294967295
   15398:	f04f 33ff 	mov.w	r3, #4294967295
   1539c:	480a      	ldr	r0, [pc, #40]	; (153c8 <_sbrk+0x38>)
   1539e:	f017 f8db 	bl	2c558 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   153a2:	490a      	ldr	r1, [pc, #40]	; (153cc <_sbrk+0x3c>)
   153a4:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   153a6:	18e0      	adds	r0, r4, r3
   153a8:	4c09      	ldr	r4, [pc, #36]	; (153d0 <_sbrk+0x40>)
   153aa:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   153ae:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   153b2:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   153b4:	bf2e      	itee	cs
   153b6:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   153ba:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   153bc:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   153be:	4802      	ldr	r0, [pc, #8]	; (153c8 <_sbrk+0x38>)
   153c0:	f017 f8c5 	bl	2c54e <sys_sem_give>

	return ret;
}
   153c4:	4620      	mov	r0, r4
   153c6:	bd10      	pop	{r4, pc}
   153c8:	20020c3c 	.word	0x20020c3c
   153cc:	200215f4 	.word	0x200215f4
   153d0:	2002a9e0 	.word	0x2002a9e0

000153d4 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   153d4:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   153d6:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   153d8:	4804      	ldr	r0, [pc, #16]	; (153ec <__chk_fail+0x18>)
   153da:	f7ff ffb9 	bl	15350 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   153de:	4040      	eors	r0, r0
   153e0:	f380 8811 	msr	BASEPRI, r0
   153e4:	f04f 0003 	mov.w	r0, #3
   153e8:	df02      	svc	2
	CODE_UNREACHABLE;
   153ea:	bf00      	nop
   153ec:	000313fc 	.word	0x000313fc

000153f0 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   153f0:	b538      	push	{r3, r4, r5, lr}
   153f2:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   153f4:	4604      	mov	r4, r0
   153f6:	b970      	cbnz	r0, 15416 <net_if_flag_is_set+0x26>
   153f8:	490b      	ldr	r1, [pc, #44]	; (15428 <net_if_flag_is_set+0x38>)
   153fa:	f240 2312 	movw	r3, #530	; 0x212
   153fe:	4a0b      	ldr	r2, [pc, #44]	; (1542c <net_if_flag_is_set+0x3c>)
   15400:	480b      	ldr	r0, [pc, #44]	; (15430 <net_if_flag_is_set+0x40>)
   15402:	f017 f836 	bl	2c472 <printk>
   15406:	480b      	ldr	r0, [pc, #44]	; (15434 <net_if_flag_is_set+0x44>)
   15408:	f017 f833 	bl	2c472 <printk>
   1540c:	f240 2112 	movw	r1, #530	; 0x212
   15410:	4806      	ldr	r0, [pc, #24]	; (1542c <net_if_flag_is_set+0x3c>)
   15412:	f017 fa4b 	bl	2c8ac <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15416:	6823      	ldr	r3, [r4, #0]
   15418:	330c      	adds	r3, #12
   1541a:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1541e:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   15420:	f000 0001 	and.w	r0, r0, #1
   15424:	bd38      	pop	{r3, r4, r5, pc}
   15426:	bf00      	nop
   15428:	00031459 	.word	0x00031459
   1542c:	00031431 	.word	0x00031431
   15430:	0003049a 	.word	0x0003049a
   15434:	00030ac7 	.word	0x00030ac7

00015438 <net_if_flag_set.constprop.0>:
static inline void net_if_flag_set(struct net_if *iface,
   15438:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   1543a:	4604      	mov	r4, r0
   1543c:	b970      	cbnz	r0, 1545c <net_if_flag_set.constprop.0+0x24>
   1543e:	490d      	ldr	r1, [pc, #52]	; (15474 <net_if_flag_set.constprop.0+0x3c>)
   15440:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   15444:	4a0c      	ldr	r2, [pc, #48]	; (15478 <net_if_flag_set.constprop.0+0x40>)
   15446:	480d      	ldr	r0, [pc, #52]	; (1547c <net_if_flag_set.constprop.0+0x44>)
   15448:	f017 f813 	bl	2c472 <printk>
   1544c:	480c      	ldr	r0, [pc, #48]	; (15480 <net_if_flag_set.constprop.0+0x48>)
   1544e:	f017 f810 	bl	2c472 <printk>
   15452:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   15456:	4808      	ldr	r0, [pc, #32]	; (15478 <net_if_flag_set.constprop.0+0x40>)
   15458:	f017 fa28 	bl	2c8ac <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1545c:	6823      	ldr	r3, [r4, #0]
   1545e:	330c      	adds	r3, #12
   15460:	e8d3 2fef 	ldaex	r2, [r3]
   15464:	f042 0201 	orr.w	r2, r2, #1
   15468:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1546c:	2900      	cmp	r1, #0
   1546e:	d1f7      	bne.n	15460 <net_if_flag_set.constprop.0+0x28>
}
   15470:	bd10      	pop	{r4, pc}
   15472:	bf00      	nop
   15474:	00031459 	.word	0x00031459
   15478:	00031431 	.word	0x00031431
   1547c:	0003049a 	.word	0x0003049a
   15480:	00030ac7 	.word	0x00030ac7

00015484 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   15484:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   15486:	2100      	movs	r1, #0
{
   15488:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1548a:	f7ff ffb1 	bl	153f0 <net_if_flag_is_set>
   1548e:	b928      	cbnz	r0, 1549c <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   15490:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   15492:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   15494:	7e9b      	ldrb	r3, [r3, #26]
   15496:	b11b      	cbz	r3, 154a0 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   15498:	f7ff ffce 	bl	15438 <net_if_flag_set.constprop.0>
		return 0;
   1549c:	2000      	movs	r0, #0
   1549e:	e023      	b.n	154e8 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   154a0:	f017 fe3e 	bl	2d120 <net_if_l2>
   154a4:	b9c0      	cbnz	r0, 154d8 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   154a6:	682b      	ldr	r3, [r5, #0]
   154a8:	691b      	ldr	r3, [r3, #16]
   154aa:	b973      	cbnz	r3, 154ca <net_if_up+0x46>
   154ac:	490f      	ldr	r1, [pc, #60]	; (154ec <net_if_up+0x68>)
   154ae:	f640 53fd 	movw	r3, #3581	; 0xdfd
   154b2:	4a0f      	ldr	r2, [pc, #60]	; (154f0 <net_if_up+0x6c>)
   154b4:	480f      	ldr	r0, [pc, #60]	; (154f4 <net_if_up+0x70>)
   154b6:	f016 ffdc 	bl	2c472 <printk>
   154ba:	480f      	ldr	r0, [pc, #60]	; (154f8 <net_if_up+0x74>)
   154bc:	f016 ffd9 	bl	2c472 <printk>
   154c0:	f640 51fd 	movw	r1, #3581	; 0xdfd
   154c4:	480a      	ldr	r0, [pc, #40]	; (154f0 <net_if_up+0x6c>)
   154c6:	f017 f9f1 	bl	2c8ac <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   154ca:	4628      	mov	r0, r5
   154cc:	f7ff ffb4 	bl	15438 <net_if_flag_set.constprop.0>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   154d0:	4628      	mov	r0, r5
   154d2:	f017 fe2a 	bl	2d12a <l2_flags_get>
   154d6:	e7e1      	b.n	1549c <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   154d8:	6883      	ldr	r3, [r0, #8]
   154da:	2b00      	cmp	r3, #0
   154dc:	d0e3      	beq.n	154a6 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   154de:	2101      	movs	r1, #1
   154e0:	4628      	mov	r0, r5
   154e2:	4798      	blx	r3
	if (status < 0) {
   154e4:	2800      	cmp	r0, #0
   154e6:	dade      	bge.n	154a6 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   154e8:	bd38      	pop	{r3, r4, r5, pc}
   154ea:	bf00      	nop
   154ec:	000314a3 	.word	0x000314a3
   154f0:	0003145f 	.word	0x0003145f
   154f4:	0003049a 	.word	0x0003049a
   154f8:	00030ac7 	.word	0x00030ac7

000154fc <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   154fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   15500:	4e12      	ldr	r6, [pc, #72]	; (1554c <net_if_init+0x50>)
   15502:	4c13      	ldr	r4, [pc, #76]	; (15550 <net_if_init+0x54>)
   15504:	46b0      	mov	r8, r6
   15506:	4f13      	ldr	r7, [pc, #76]	; (15554 <net_if_init+0x58>)
   15508:	42b4      	cmp	r4, r6
   1550a:	4625      	mov	r5, r4
   1550c:	d90e      	bls.n	1552c <net_if_init+0x30>
   1550e:	4912      	ldr	r1, [pc, #72]	; (15558 <net_if_init+0x5c>)
   15510:	f640 63dc 	movw	r3, #3804	; 0xedc
   15514:	463a      	mov	r2, r7
   15516:	4811      	ldr	r0, [pc, #68]	; (1555c <net_if_init+0x60>)
   15518:	f016 ffab 	bl	2c472 <printk>
   1551c:	4810      	ldr	r0, [pc, #64]	; (15560 <net_if_init+0x64>)
   1551e:	f016 ffa8 	bl	2c472 <printk>
   15522:	f640 61dc 	movw	r1, #3804	; 0xedc
   15526:	4638      	mov	r0, r7
   15528:	f017 f9c0 	bl	2c8ac <assert_post_action>
   1552c:	4544      	cmp	r4, r8
   1552e:	d301      	bcc.n	15534 <net_if_init+0x38>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   15530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return iface->if_dev->dev;
   15534:	682b      	ldr	r3, [r5, #0]
   15536:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   15538:	681b      	ldr	r3, [r3, #0]
   1553a:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1553c:	2b00      	cmp	r3, #0
   1553e:	d0e3      	beq.n	15508 <net_if_init+0xc>
   15540:	681b      	ldr	r3, [r3, #0]
   15542:	2b00      	cmp	r3, #0
   15544:	d0e0      	beq.n	15508 <net_if_init+0xc>
	api->init(iface);
   15546:	4628      	mov	r0, r5
   15548:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1554a:	e7dd      	b.n	15508 <net_if_init+0xc>
   1554c:	20020cb8 	.word	0x20020cb8
   15550:	20020cb4 	.word	0x20020cb4
   15554:	0003145f 	.word	0x0003145f
   15558:	00031489 	.word	0x00031489
   1555c:	0003049a 	.word	0x0003049a
   15560:	00030b45 	.word	0x00030b45

00015564 <net_if_post_init>:

void net_if_post_init(void)
{
   15564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   15566:	4d11      	ldr	r5, [pc, #68]	; (155ac <net_if_post_init+0x48>)
   15568:	4c11      	ldr	r4, [pc, #68]	; (155b0 <net_if_post_init+0x4c>)
   1556a:	462f      	mov	r7, r5
   1556c:	4e11      	ldr	r6, [pc, #68]	; (155b4 <net_if_post_init+0x50>)
   1556e:	42ac      	cmp	r4, r5
   15570:	d90e      	bls.n	15590 <net_if_post_init+0x2c>
   15572:	4911      	ldr	r1, [pc, #68]	; (155b8 <net_if_post_init+0x54>)
   15574:	f640 730b 	movw	r3, #3851	; 0xf0b
   15578:	4632      	mov	r2, r6
   1557a:	4810      	ldr	r0, [pc, #64]	; (155bc <net_if_post_init+0x58>)
   1557c:	f016 ff79 	bl	2c472 <printk>
   15580:	480f      	ldr	r0, [pc, #60]	; (155c0 <net_if_post_init+0x5c>)
   15582:	f016 ff76 	bl	2c472 <printk>
   15586:	f640 710b 	movw	r1, #3851	; 0xf0b
   1558a:	4630      	mov	r0, r6
   1558c:	f017 f98e 	bl	2c8ac <assert_post_action>
   15590:	42bc      	cmp	r4, r7
   15592:	d300      	bcc.n	15596 <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   15594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   15596:	2103      	movs	r1, #3
   15598:	4620      	mov	r0, r4
   1559a:	f7ff ff29 	bl	153f0 <net_if_flag_is_set>
   1559e:	b910      	cbnz	r0, 155a6 <net_if_post_init+0x42>
			net_if_up(iface);
   155a0:	4620      	mov	r0, r4
   155a2:	f7ff ff6f 	bl	15484 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   155a6:	3404      	adds	r4, #4
   155a8:	e7e1      	b.n	1556e <net_if_post_init+0xa>
   155aa:	bf00      	nop
   155ac:	20020cb8 	.word	0x20020cb8
   155b0:	20020cb4 	.word	0x20020cb4
   155b4:	0003145f 	.word	0x0003145f
   155b8:	00031489 	.word	0x00031489
   155bc:	0003049a 	.word	0x0003049a
   155c0:	00030b45 	.word	0x00030b45

000155c4 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   155c4:	2300      	movs	r3, #0
{
   155c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   155ca:	2802      	cmp	r0, #2
{
   155cc:	b089      	sub	sp, #36	; 0x24
   155ce:	4607      	mov	r7, r0
   155d0:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   155d2:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   155d6:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   155d8:	d13e      	bne.n	15658 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   155da:	a806      	add	r0, sp, #24
   155dc:	9105      	str	r1, [sp, #20]
   155de:	4601      	mov	r1, r0
{
   155e0:	461a      	mov	r2, r3
   155e2:	e006      	b.n	155f2 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   155e4:	780c      	ldrb	r4, [r1, #0]
   155e6:	3201      	adds	r2, #1
   155e8:	3401      	adds	r4, #1
   155ea:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   155ec:	b2d4      	uxtb	r4, r2
   155ee:	2c07      	cmp	r4, #7
   155f0:	d804      	bhi.n	155fc <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   155f2:	9c04      	ldr	r4, [sp, #16]
   155f4:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   155f8:	2c00      	cmp	r4, #0
   155fa:	d0f3      	beq.n	155e4 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   155fc:	3301      	adds	r3, #1
   155fe:	2b08      	cmp	r3, #8
   15600:	f101 0101 	add.w	r1, r1, #1
   15604:	d1ec      	bne.n	155e0 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   15606:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1560a:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1560e:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   15610:	f810 2b01 	ldrb.w	r2, [r0], #1
   15614:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   15616:	bf88      	it	hi
   15618:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   1561c:	f103 0301 	add.w	r3, r3, #1
   15620:	b2db      	uxtb	r3, r3
				pos = i;
   15622:	bf88      	it	hi
   15624:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   15626:	2b08      	cmp	r3, #8
   15628:	d1f2      	bne.n	15610 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   1562a:	469b      	mov	fp, r3
   1562c:	f1b9 0f01 	cmp.w	r9, #1
   15630:	f04f 033a 	mov.w	r3, #58	; 0x3a
   15634:	bf08      	it	eq
   15636:	f04f 38ff 	moveq.w	r8, #4294967295
   1563a:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   1563c:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1563e:	4634      	mov	r4, r6
   15640:	460d      	mov	r5, r1
   15642:	455d      	cmp	r5, fp
   15644:	db17      	blt.n	15676 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   15646:	42b4      	cmp	r4, r6
   15648:	d008      	beq.n	1565c <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   1564a:	2300      	movs	r3, #0
   1564c:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   1564e:	bf0c      	ite	eq
   15650:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   15654:	7023      	strbne	r3, [r4, #0]
   15656:	e002      	b.n	1565e <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   15658:	2801      	cmp	r0, #1
   1565a:	d004      	beq.n	15666 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   1565c:	2600      	movs	r6, #0
	}

	return dst;
}
   1565e:	4630      	mov	r0, r6
   15660:	b009      	add	sp, #36	; 0x24
   15662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   15666:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   15668:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   1566c:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   15670:	4681      	mov	r9, r0
		delim = '.';
   15672:	9303      	str	r3, [sp, #12]
   15674:	e7e2      	b.n	1563c <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   15676:	f1bb 0f04 	cmp.w	fp, #4
   1567a:	d13b      	bne.n	156f4 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   1567c:	9b04      	ldr	r3, [sp, #16]
   1567e:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   15680:	b94a      	cbnz	r2, 15696 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   15682:	2330      	movs	r3, #48	; 0x30
   15684:	4620      	mov	r0, r4
   15686:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   1568a:	9b03      	ldr	r3, [sp, #12]
   1568c:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   1568e:	3501      	adds	r5, #1
   15690:	4604      	mov	r4, r0
   15692:	b2ed      	uxtb	r5, r5
   15694:	e7d5      	b.n	15642 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   15696:	f04f 0e09 	mov.w	lr, #9
   1569a:	f04f 0a00 	mov.w	sl, #0
   1569e:	e9cd 2401 	strd	r2, r4, [sp, #4]
   156a2:	483a      	ldr	r0, [pc, #232]	; (1578c <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   156a4:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   156a8:	45f2      	cmp	sl, lr
		value = value % divisor;
   156aa:	fbbc f2f0 	udiv	r2, ip, r0
   156ae:	fb00 c212 	mls	r2, r0, r2, ip
   156b2:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   156b4:	dc01      	bgt.n	156ba <z_impl_net_addr_ntop+0xf6>
   156b6:	4584      	cmp	ip, r0
   156b8:	d308      	bcc.n	156cc <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   156ba:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   156be:	46f2      	mov	sl, lr
   156c0:	9b02      	ldr	r3, [sp, #8]
   156c2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   156c6:	f803 cb01 	strb.w	ip, [r3], #1
   156ca:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   156cc:	220a      	movs	r2, #10
   156ce:	f10e 3eff 	add.w	lr, lr, #4294967295
   156d2:	f1be 3fff 	cmp.w	lr, #4294967295
   156d6:	fbb0 f0f2 	udiv	r0, r0, r2
   156da:	d1e3      	bne.n	156a4 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   156dc:	f04f 0200 	mov.w	r2, #0
   156e0:	9b02      	ldr	r3, [sp, #8]
   156e2:	701a      	strb	r2, [r3, #0]
	return buf - start;
   156e4:	1b1b      	subs	r3, r3, r4
			ptr += l;
   156e6:	b2da      	uxtb	r2, r3
   156e8:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   156ec:	1c58      	adds	r0, r3, #1
   156ee:	9b03      	ldr	r3, [sp, #12]
   156f0:	54a3      	strb	r3, [r4, r2]
			continue;
   156f2:	e7cc      	b.n	1568e <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   156f4:	45a8      	cmp	r8, r5
   156f6:	d110      	bne.n	1571a <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   156f8:	b911      	cbnz	r1, 15700 <z_impl_net_addr_ntop+0x13c>
   156fa:	f1b8 0f00 	cmp.w	r8, #0
   156fe:	d102      	bne.n	15706 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   15700:	233a      	movs	r3, #58	; 0x3a
   15702:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   15706:	233a      	movs	r3, #58	; 0x3a
   15708:	4620      	mov	r0, r4
   1570a:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1570e:	f109 33ff 	add.w	r3, r9, #4294967295
   15712:	441d      	add	r5, r3
			needcolon = false;
   15714:	2100      	movs	r1, #0
			i += longest - 1U;
   15716:	b2ed      	uxtb	r5, r5
			continue;
   15718:	e7b9      	b.n	1568e <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   1571a:	b111      	cbz	r1, 15722 <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   1571c:	233a      	movs	r3, #58	; 0x3a
   1571e:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   15722:	9b05      	ldr	r3, [sp, #20]
   15724:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   15728:	0219      	lsls	r1, r3, #8
   1572a:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   1572e:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   15732:	b20a      	sxth	r2, r1
		bh = value >> 8;
   15734:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   15738:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   1573c:	d016      	beq.n	1576c <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   1573e:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   15740:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   15742:	d90b      	bls.n	1575c <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   15744:	2300      	movs	r3, #0
   15746:	2261      	movs	r2, #97	; 0x61
   15748:	4620      	mov	r0, r4
   1574a:	f017 fcfb 	bl	2d144 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1574e:	2301      	movs	r3, #1
   15750:	2261      	movs	r2, #97	; 0x61
   15752:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   15754:	f017 fcf6 	bl	2d144 <net_byte_to_hex>
		needcolon = true;
   15758:	2101      	movs	r1, #1
   1575a:	e798      	b.n	1568e <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   1575c:	b25b      	sxtb	r3, r3
   1575e:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   15760:	bf94      	ite	ls
   15762:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   15764:	3357      	addhi	r3, #87	; 0x57
   15766:	1c60      	adds	r0, r4, #1
   15768:	7023      	strb	r3, [r4, #0]
   1576a:	e7f0      	b.n	1574e <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   1576c:	f1ba 0f0f 	cmp.w	sl, #15
   15770:	d903      	bls.n	1577a <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   15772:	2261      	movs	r2, #97	; 0x61
   15774:	4651      	mov	r1, sl
   15776:	4620      	mov	r0, r4
   15778:	e7ec      	b.n	15754 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   1577a:	b253      	sxtb	r3, r2
   1577c:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   15780:	bf94      	ite	ls
   15782:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   15784:	3357      	addhi	r3, #87	; 0x57
   15786:	1c60      	adds	r0, r4, #1
   15788:	7023      	strb	r3, [r4, #0]
   1578a:	e7e5      	b.n	15758 <z_impl_net_addr_ntop+0x194>
   1578c:	3b9aca00 	.word	0x3b9aca00

00015790 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   15790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   15794:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   15796:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1579a:	4b3b      	ldr	r3, [pc, #236]	; (15888 <connect_request_encode+0xf8>)
   1579c:	4a3b      	ldr	r2, [pc, #236]	; (1588c <connect_request_encode+0xfc>)
{
   1579e:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   157a0:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   157a4:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   157a6:	2804      	cmp	r0, #4
   157a8:	bf0c      	ite	eq
   157aa:	4610      	moveq	r0, r2
   157ac:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   157ae:	600d      	str	r5, [r1, #0]
{
   157b0:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   157b2:	f017 fdae 	bl	2d312 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   157b6:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   157ba:	4603      	mov	r3, r0
   157bc:	b938      	cbnz	r0, 157ce <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   157be:	e9d8 2000 	ldrd	r2, r0, [r8]
   157c2:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   157c4:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   157c8:	d104      	bne.n	157d4 <connect_request_encode+0x44>
		return -ENOMEM;
   157ca:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   157ce:	4618      	mov	r0, r3
   157d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   157d4:	1c50      	adds	r0, r2, #1
   157d6:	f8c8 0000 	str.w	r0, [r8]
   157da:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   157dc:	e9d8 6200 	ldrd	r6, r2, [r8]
   157e0:	4296      	cmp	r6, r2
   157e2:	d0f2      	beq.n	157ca <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   157e4:	1c72      	adds	r2, r6, #1
   157e6:	f8c8 2000 	str.w	r2, [r8]
   157ea:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   157ec:	4641      	mov	r1, r8
   157ee:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
   157f2:	f017 fd7c 	bl	2d2ee <pack_uint16>
	if (err_code != 0) {
   157f6:	4603      	mov	r3, r0
   157f8:	2800      	cmp	r0, #0
   157fa:	d1e8      	bne.n	157ce <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   157fc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15800:	f017 fd87 	bl	2d312 <pack_utf8_str>
	if (err_code != 0) {
   15804:	4603      	mov	r3, r0
   15806:	2800      	cmp	r0, #0
   15808:	d1e1      	bne.n	157ce <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1580a:	6c38      	ldr	r0, [r7, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   1580c:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   1580e:	b1d8      	cbz	r0, 15848 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   15810:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   15814:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   15818:	f003 0301 	and.w	r3, r3, #1
   1581c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   15820:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   15822:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   15824:	00db      	lsls	r3, r3, #3
   15826:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1582a:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1582c:	f017 fd71 	bl	2d312 <pack_utf8_str>
		if (err_code != 0) {
   15830:	4603      	mov	r3, r0
   15832:	2800      	cmp	r0, #0
   15834:	d1cb      	bne.n	157ce <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   15836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   15838:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   1583a:	b30b      	cbz	r3, 15880 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   1583c:	4618      	mov	r0, r3
   1583e:	f017 fd68 	bl	2d312 <pack_utf8_str>
			if (err_code != 0) {
   15842:	4603      	mov	r3, r0
   15844:	2800      	cmp	r0, #0
   15846:	d1c2      	bne.n	157ce <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   15848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1584a:	b138      	cbz	r0, 1585c <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   1584c:	4641      	mov	r1, r8
   1584e:	f017 fd60 	bl	2d312 <pack_utf8_str>
		if (err_code != 0) {
   15852:	4603      	mov	r3, r0
   15854:	2800      	cmp	r0, #0
   15856:	d1ba      	bne.n	157ce <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   15858:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   1585c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1585e:	b138      	cbz	r0, 15870 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   15860:	4641      	mov	r1, r8
   15862:	f017 fd56 	bl	2d312 <pack_utf8_str>
		if (err_code != 0) {
   15866:	4603      	mov	r3, r0
   15868:	2800      	cmp	r0, #0
   1586a:	d1b0      	bne.n	157ce <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1586c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   15870:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   15872:	4642      	mov	r2, r8
   15874:	4629      	mov	r1, r5
}
   15876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1587a:	2010      	movs	r0, #16
   1587c:	f017 bd64 	b.w	2d348 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   15880:	f017 fd35 	bl	2d2ee <pack_uint16>
   15884:	e7dd      	b.n	15842 <connect_request_encode+0xb2>
   15886:	bf00      	nop
   15888:	0002f310 	.word	0x0002f310
   1588c:	0002f318 	.word	0x0002f318

00015890 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   15890:	e9d0 2300 	ldrd	r2, r3, [r0]
   15894:	1a9b      	subs	r3, r3, r2
   15896:	2b01      	cmp	r3, #1
   15898:	bf81      	itttt	hi
   1589a:	4b05      	ldrhi	r3, [pc, #20]	; (158b0 <disconnect_encode+0x20>)
   1589c:	881b      	ldrhhi	r3, [r3, #0]
   1589e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   158a0:	6803      	ldrhi	r3, [r0, #0]
   158a2:	bf83      	ittte	hi
   158a4:	3302      	addhi	r3, #2
   158a6:	6043      	strhi	r3, [r0, #4]

	return 0;
   158a8:	2000      	movhi	r0, #0
		return -ENOMEM;
   158aa:	f06f 000b 	mvnls.w	r0, #11
}
   158ae:	4770      	bx	lr
   158b0:	000314d4 	.word	0x000314d4

000158b4 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   158b4:	e9d0 2300 	ldrd	r2, r3, [r0]
   158b8:	1a9b      	subs	r3, r3, r2
   158ba:	2b01      	cmp	r3, #1
   158bc:	bf81      	itttt	hi
   158be:	4b05      	ldrhi	r3, [pc, #20]	; (158d4 <ping_request_encode+0x20>)
   158c0:	881b      	ldrhhi	r3, [r3, #0]
   158c2:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   158c4:	6803      	ldrhi	r3, [r0, #0]
   158c6:	bf83      	ittte	hi
   158c8:	3302      	addhi	r3, #2
   158ca:	6043      	strhi	r3, [r0, #4]

	return 0;
   158cc:	2000      	movhi	r0, #0
		return -ENOMEM;
   158ce:	f06f 000b 	mvnls.w	r0, #11
}
   158d2:	4770      	bx	lr
   158d4:	000314d6 	.word	0x000314d6

000158d8 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   158d8:	2314      	movs	r3, #20
   158da:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   158de:	4353      	muls	r3, r2
   158e0:	4a01      	ldr	r2, [pc, #4]	; (158e8 <mqtt_transport_connect+0x10>)
   158e2:	58d3      	ldr	r3, [r2, r3]
   158e4:	4718      	bx	r3
   158e6:	bf00      	nop
   158e8:	0002f320 	.word	0x0002f320

000158ec <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   158ec:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   158ee:	2514      	movs	r5, #20
   158f0:	4c03      	ldr	r4, [pc, #12]	; (15900 <mqtt_transport_write+0x14>)
   158f2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   158f6:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   158fa:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   158fc:	685b      	ldr	r3, [r3, #4]
   158fe:	4718      	bx	r3
   15900:	0002f320 	.word	0x0002f320

00015904 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   15904:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   15906:	2414      	movs	r4, #20
   15908:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1590c:	4a03      	ldr	r2, [pc, #12]	; (1591c <mqtt_transport_write_msg+0x18>)
   1590e:	fb04 2303 	mla	r3, r4, r3, r2
}
   15912:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   15916:	689b      	ldr	r3, [r3, #8]
   15918:	4718      	bx	r3
   1591a:	bf00      	nop
   1591c:	0002f320 	.word	0x0002f320

00015920 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   15920:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   15922:	2614      	movs	r6, #20
   15924:	4d04      	ldr	r5, [pc, #16]	; (15938 <mqtt_transport_read+0x18>)
   15926:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1592a:	fb06 5404 	mla	r4, r6, r4, r5
   1592e:	68e4      	ldr	r4, [r4, #12]
   15930:	46a4      	mov	ip, r4
							 shall_block);
}
   15932:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   15934:	4760      	bx	ip
   15936:	bf00      	nop
   15938:	0002f320 	.word	0x0002f320

0001593c <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   1593c:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1593e:	b510      	push	{r4, lr}
   15940:	b142      	cbz	r2, 15954 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   15942:	4b0f      	ldr	r3, [pc, #60]	; (15980 <mqtt_mutex_unlock+0x44>)
   15944:	6882      	ldr	r2, [r0, #8]
   15946:	689b      	ldr	r3, [r3, #8]
   15948:	429a      	cmp	r2, r3
   1594a:	d115      	bne.n	15978 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   1594c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   15950:	f00d bc58 	b.w	23204 <z_impl_k_mutex_unlock>
		return -EINVAL;
   15954:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   15958:	2343      	movs	r3, #67	; 0x43
   1595a:	4a0a      	ldr	r2, [pc, #40]	; (15984 <mqtt_mutex_unlock+0x48>)
   1595c:	490a      	ldr	r1, [pc, #40]	; (15988 <mqtt_mutex_unlock+0x4c>)
   1595e:	480b      	ldr	r0, [pc, #44]	; (1598c <mqtt_mutex_unlock+0x50>)
   15960:	f016 fd87 	bl	2c472 <printk>
   15964:	4621      	mov	r1, r4
   15966:	480a      	ldr	r0, [pc, #40]	; (15990 <mqtt_mutex_unlock+0x54>)
   15968:	f016 fd83 	bl	2c472 <printk>
}
   1596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   15970:	2143      	movs	r1, #67	; 0x43
   15972:	4804      	ldr	r0, [pc, #16]	; (15984 <mqtt_mutex_unlock+0x48>)
   15974:	f016 bf9a 	b.w	2c8ac <assert_post_action>
		return -EPERM;
   15978:	f04f 34ff 	mov.w	r4, #4294967295
   1597c:	e7ec      	b.n	15958 <mqtt_mutex_unlock+0x1c>
   1597e:	bf00      	nop
   15980:	20021de0 	.word	0x20021de0
   15984:	000314e4 	.word	0x000314e4
   15988:	00031515 	.word	0x00031515
   1598c:	0003049a 	.word	0x0003049a
   15990:	0003151e 	.word	0x0003151e

00015994 <mqtt_mutex_lock>:
{
   15994:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   15996:	f04f 32ff 	mov.w	r2, #4294967295
   1599a:	f04f 33ff 	mov.w	r3, #4294967295
   1599e:	f00d fb37 	bl	23010 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   159a2:	4604      	mov	r4, r0
   159a4:	b178      	cbz	r0, 159c6 <mqtt_mutex_lock+0x32>
   159a6:	2339      	movs	r3, #57	; 0x39
   159a8:	4a07      	ldr	r2, [pc, #28]	; (159c8 <mqtt_mutex_lock+0x34>)
   159aa:	4908      	ldr	r1, [pc, #32]	; (159cc <mqtt_mutex_lock+0x38>)
   159ac:	4808      	ldr	r0, [pc, #32]	; (159d0 <mqtt_mutex_lock+0x3c>)
   159ae:	f016 fd60 	bl	2c472 <printk>
   159b2:	4621      	mov	r1, r4
   159b4:	4807      	ldr	r0, [pc, #28]	; (159d4 <mqtt_mutex_lock+0x40>)
   159b6:	f016 fd5c 	bl	2c472 <printk>
}
   159ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   159be:	2139      	movs	r1, #57	; 0x39
   159c0:	4801      	ldr	r0, [pc, #4]	; (159c8 <mqtt_mutex_lock+0x34>)
   159c2:	f016 bf73 	b.w	2c8ac <assert_post_action>
}
   159c6:	bd10      	pop	{r4, pc}
   159c8:	000314e4 	.word	0x000314e4
   159cc:	00031515 	.word	0x00031515
   159d0:	0003049a 	.word	0x0003049a
   159d4:	00031540 	.word	0x00031540

000159d8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   159d8:	b570      	push	{r4, r5, r6, lr}
   159da:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   159dc:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   159de:	68c5      	ldr	r5, [r0, #12]
   159e0:	b961      	cbnz	r1, 159fc <gpio_nrfx_manage_callback+0x24>
   159e2:	4922      	ldr	r1, [pc, #136]	; (15a6c <gpio_nrfx_manage_callback+0x94>)
   159e4:	2324      	movs	r3, #36	; 0x24
   159e6:	4a22      	ldr	r2, [pc, #136]	; (15a70 <gpio_nrfx_manage_callback+0x98>)
   159e8:	4822      	ldr	r0, [pc, #136]	; (15a74 <gpio_nrfx_manage_callback+0x9c>)
   159ea:	f016 fd42 	bl	2c472 <printk>
   159ee:	4822      	ldr	r0, [pc, #136]	; (15a78 <gpio_nrfx_manage_callback+0xa0>)
   159f0:	f016 fd3f 	bl	2c472 <printk>
   159f4:	2124      	movs	r1, #36	; 0x24
   159f6:	481e      	ldr	r0, [pc, #120]	; (15a70 <gpio_nrfx_manage_callback+0x98>)
   159f8:	f016 ff58 	bl	2c8ac <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   159fc:	6863      	ldr	r3, [r4, #4]
   159fe:	b963      	cbnz	r3, 15a1a <gpio_nrfx_manage_callback+0x42>
   15a00:	491e      	ldr	r1, [pc, #120]	; (15a7c <gpio_nrfx_manage_callback+0xa4>)
   15a02:	2325      	movs	r3, #37	; 0x25
   15a04:	4a1a      	ldr	r2, [pc, #104]	; (15a70 <gpio_nrfx_manage_callback+0x98>)
   15a06:	481b      	ldr	r0, [pc, #108]	; (15a74 <gpio_nrfx_manage_callback+0x9c>)
   15a08:	f016 fd33 	bl	2c472 <printk>
   15a0c:	481c      	ldr	r0, [pc, #112]	; (15a80 <gpio_nrfx_manage_callback+0xa8>)
   15a0e:	f016 fd30 	bl	2c472 <printk>
   15a12:	2125      	movs	r1, #37	; 0x25
   15a14:	4816      	ldr	r0, [pc, #88]	; (15a70 <gpio_nrfx_manage_callback+0x98>)
   15a16:	f016 ff49 	bl	2c8ac <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   15a1a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   15a1c:	b15b      	cbz	r3, 15a36 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a1e:	2200      	movs	r2, #0
   15a20:	429c      	cmp	r4, r3
   15a22:	d113      	bne.n	15a4c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   15a24:	6823      	ldr	r3, [r4, #0]
   15a26:	b95a      	cbnz	r2, 15a40 <gpio_nrfx_manage_callback+0x68>
   15a28:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   15a2a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   15a2c:	4294      	cmp	r4, r2
   15a2e:	d100      	bne.n	15a32 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   15a30:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   15a32:	2300      	movs	r3, #0
   15a34:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   15a36:	b976      	cbnz	r6, 15a56 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15a38:	2000      	movs	r0, #0
				     callback, set);
}
   15a3a:	bd70      	pop	{r4, r5, r6, pc}
   15a3c:	460b      	mov	r3, r1
   15a3e:	e7ef      	b.n	15a20 <gpio_nrfx_manage_callback+0x48>
   15a40:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15a42:	68ab      	ldr	r3, [r5, #8]
   15a44:	429c      	cmp	r4, r3
	list->tail = node;
   15a46:	bf08      	it	eq
   15a48:	60aa      	streq	r2, [r5, #8]
}
   15a4a:	e7f2      	b.n	15a32 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15a4c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a4e:	461a      	mov	r2, r3
   15a50:	2900      	cmp	r1, #0
   15a52:	d1f3      	bne.n	15a3c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   15a54:	b13e      	cbz	r6, 15a66 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   15a56:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   15a58:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   15a5a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   15a5c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15a5e:	2800      	cmp	r0, #0
   15a60:	d1ea      	bne.n	15a38 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   15a62:	60ac      	str	r4, [r5, #8]
}
   15a64:	e7e9      	b.n	15a3a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   15a66:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15a6a:	e7e6      	b.n	15a3a <gpio_nrfx_manage_callback+0x62>
   15a6c:	00031b27 	.word	0x00031b27
   15a70:	00031560 	.word	0x00031560
   15a74:	0003049a 	.word	0x0003049a
   15a78:	0003158d 	.word	0x0003158d
   15a7c:	0003159c 	.word	0x0003159c
   15a80:	000315ae 	.word	0x000315ae

00015a84 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15a84:	6803      	ldr	r3, [r0, #0]
{
   15a86:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15a88:	095a      	lsrs	r2, r3, #5
   15a8a:	bf0c      	ite	eq
   15a8c:	f04f 32ff 	moveq.w	r2, #4294967295
   15a90:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15a92:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   15a96:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15a9a:	07db      	lsls	r3, r3, #31
{
   15a9c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15a9e:	d40b      	bmi.n	15ab8 <nrf_gpio_pin_port_decode+0x34>
   15aa0:	490f      	ldr	r1, [pc, #60]	; (15ae0 <nrf_gpio_pin_port_decode+0x5c>)
   15aa2:	4810      	ldr	r0, [pc, #64]	; (15ae4 <nrf_gpio_pin_port_decode+0x60>)
   15aa4:	f240 231a 	movw	r3, #538	; 0x21a
   15aa8:	4a0f      	ldr	r2, [pc, #60]	; (15ae8 <nrf_gpio_pin_port_decode+0x64>)
   15aaa:	f016 fce2 	bl	2c472 <printk>
   15aae:	f240 211a 	movw	r1, #538	; 0x21a
   15ab2:	480d      	ldr	r0, [pc, #52]	; (15ae8 <nrf_gpio_pin_port_decode+0x64>)
   15ab4:	f016 fefa 	bl	2c8ac <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15ab8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15aba:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15abe:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15ac0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15ac2:	d00b      	beq.n	15adc <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   15ac4:	4909      	ldr	r1, [pc, #36]	; (15aec <nrf_gpio_pin_port_decode+0x68>)
   15ac6:	4807      	ldr	r0, [pc, #28]	; (15ae4 <nrf_gpio_pin_port_decode+0x60>)
   15ac8:	f240 231f 	movw	r3, #543	; 0x21f
   15acc:	4a06      	ldr	r2, [pc, #24]	; (15ae8 <nrf_gpio_pin_port_decode+0x64>)
   15ace:	f016 fcd0 	bl	2c472 <printk>
   15ad2:	f240 211f 	movw	r1, #543	; 0x21f
   15ad6:	4804      	ldr	r0, [pc, #16]	; (15ae8 <nrf_gpio_pin_port_decode+0x64>)
   15ad8:	f016 fee8 	bl	2c8ac <assert_post_action>
}
   15adc:	4804      	ldr	r0, [pc, #16]	; (15af0 <nrf_gpio_pin_port_decode+0x6c>)
   15ade:	bd10      	pop	{r4, pc}
   15ae0:	000315f8 	.word	0x000315f8
   15ae4:	0003049a 	.word	0x0003049a
   15ae8:	000315c5 	.word	0x000315c5
   15aec:	00033086 	.word	0x00033086
   15af0:	40842500 	.word	0x40842500

00015af4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15af4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15af6:	4b09      	ldr	r3, [pc, #36]	; (15b1c <gpio_nrfx_init+0x28>)
   15af8:	781a      	ldrb	r2, [r3, #0]
   15afa:	b96a      	cbnz	r2, 15b18 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15afc:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15afe:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   15b00:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15b02:	2105      	movs	r1, #5
   15b04:	f7fe fdc4 	bl	14690 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15b08:	2031      	movs	r0, #49	; 0x31
   15b0a:	f7fe fda3 	bl	14654 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15b12:	4b03      	ldr	r3, [pc, #12]	; (15b20 <gpio_nrfx_init+0x2c>)
   15b14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15b18:	2000      	movs	r0, #0
   15b1a:	bd08      	pop	{r3, pc}
   15b1c:	2002473b 	.word	0x2002473b
   15b20:	40031000 	.word	0x40031000

00015b24 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b24:	4b2e      	ldr	r3, [pc, #184]	; (15be0 <gpio_nrfx_config+0xbc>)
{
   15b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b28:	4c2e      	ldr	r4, [pc, #184]	; (15be4 <gpio_nrfx_config+0xc0>)
   15b2a:	4013      	ands	r3, r2
   15b2c:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15b2e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b30:	d044      	beq.n	15bbc <gpio_nrfx_config+0x98>
   15b32:	d80e      	bhi.n	15b52 <gpio_nrfx_config+0x2e>
   15b34:	2b06      	cmp	r3, #6
   15b36:	d043      	beq.n	15bc0 <gpio_nrfx_config+0x9c>
   15b38:	d806      	bhi.n	15b48 <gpio_nrfx_config+0x24>
   15b3a:	2b00      	cmp	r3, #0
   15b3c:	d040      	beq.n	15bc0 <gpio_nrfx_config+0x9c>
   15b3e:	2b02      	cmp	r3, #2
   15b40:	d040      	beq.n	15bc4 <gpio_nrfx_config+0xa0>
   15b42:	f06f 0015 	mvn.w	r0, #21
   15b46:	e037      	b.n	15bb8 <gpio_nrfx_config+0x94>
   15b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15b4c:	d1f9      	bne.n	15b42 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15b4e:	2401      	movs	r4, #1
   15b50:	e009      	b.n	15b66 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b52:	4c25      	ldr	r4, [pc, #148]	; (15be8 <gpio_nrfx_config+0xc4>)
   15b54:	42a3      	cmp	r3, r4
   15b56:	d037      	beq.n	15bc8 <gpio_nrfx_config+0xa4>
   15b58:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15b5c:	d036      	beq.n	15bcc <gpio_nrfx_config+0xa8>
   15b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15b62:	d1ee      	bne.n	15b42 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15b64:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15b66:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15b68:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15b6c:	bf4c      	ite	mi
   15b6e:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15b70:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15b74:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15b78:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15b7a:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15b7e:	d507      	bpl.n	15b90 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15b80:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15b82:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15b86:	d523      	bpl.n	15bd0 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15b88:	2301      	movs	r3, #1
   15b8a:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15b8c:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15b90:	7a03      	ldrb	r3, [r0, #8]
   15b92:	f001 011f 	and.w	r1, r1, #31
   15b96:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15b9a:	a801      	add	r0, sp, #4
   15b9c:	9101      	str	r1, [sp, #4]
   15b9e:	f7ff ff71 	bl	15a84 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15ba2:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15ba4:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15ba8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15bac:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15bb0:	3280      	adds	r2, #128	; 0x80
   15bb2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15bb6:	2000      	movs	r0, #0
}
   15bb8:	b003      	add	sp, #12
   15bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15bbc:	2407      	movs	r4, #7
   15bbe:	e7d2      	b.n	15b66 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15bc0:	461c      	mov	r4, r3
   15bc2:	e7d0      	b.n	15b66 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15bc4:	2404      	movs	r4, #4
   15bc6:	e7ce      	b.n	15b66 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15bc8:	2405      	movs	r4, #5
   15bca:	e7cc      	b.n	15b66 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15bcc:	2403      	movs	r4, #3
   15bce:	e7ca      	b.n	15b66 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15bd0:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15bd2:	bf42      	ittt	mi
   15bd4:	2301      	movmi	r3, #1
   15bd6:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15bd8:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15bdc:	e7d8      	b.n	15b90 <gpio_nrfx_config+0x6c>
   15bde:	bf00      	nop
   15be0:	00f00006 	.word	0x00f00006
   15be4:	00100006 	.word	0x00100006
   15be8:	00400002 	.word	0x00400002

00015bec <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15bec:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15bf4:	4606      	mov	r6, r0
   15bf6:	460d      	mov	r5, r1
   15bf8:	4690      	mov	r8, r2
   15bfa:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   15bfc:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   15bfe:	f001 071f 	and.w	r7, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15c02:	f040 80bc 	bne.w	15d7e <gpio_nrfx_pin_interrupt_configure+0x192>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15c06:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c08:	a801      	add	r0, sp, #4
   15c0a:	7a1b      	ldrb	r3, [r3, #8]
   15c0c:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   15c10:	9301      	str	r3, [sp, #4]
   15c12:	f7ff ff37 	bl	15a84 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15c16:	9b01      	ldr	r3, [sp, #4]
   15c18:	3380      	adds	r3, #128	; 0x80
   15c1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15c1e:	07d8      	lsls	r0, r3, #31
   15c20:	f100 80d2 	bmi.w	15dc8 <gpio_nrfx_pin_interrupt_configure+0x1dc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15c24:	2101      	movs	r1, #1
   15c26:	68e3      	ldr	r3, [r4, #12]
   15c28:	40a9      	lsls	r1, r5
   15c2a:	4319      	orrs	r1, r3
   15c2c:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15c2e:	2101      	movs	r1, #1
   15c30:	6963      	ldr	r3, [r4, #20]
   15c32:	40a9      	lsls	r1, r5
   15c34:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   15c38:	bf0c      	ite	eq
   15c3a:	430b      	orreq	r3, r1
   15c3c:	438b      	bicne	r3, r1
   15c3e:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15c40:	69a3      	ldr	r3, [r4, #24]
   15c42:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15c46:	bf0c      	ite	eq
   15c48:	430b      	orreq	r3, r1
   15c4a:	438b      	bicne	r3, r1
   15c4c:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15c4e:	6923      	ldr	r3, [r4, #16]
   15c50:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15c54:	bf0c      	ite	eq
   15c56:	4319      	orreq	r1, r3
   15c58:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15c5c:	6873      	ldr	r3, [r6, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15c5e:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15c60:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15c62:	2300      	movs	r3, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   15c64:	f8d6 800c 	ldr.w	r8, [r6, #12]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15c68:	4e59      	ldr	r6, [pc, #356]	; (15dd0 <gpio_nrfx_pin_interrupt_configure+0x1e4>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15c6a:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   15c6e:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   15c72:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15c74:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   15c78:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   15c7c:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15c80:	428f      	cmp	r7, r1
   15c82:	f040 8087 	bne.w	15d94 <gpio_nrfx_pin_interrupt_configure+0x1a8>
		    && (intenset & BIT(i))) {
   15c86:	fa22 f103 	lsr.w	r1, r2, r3
   15c8a:	07c9      	lsls	r1, r1, #31
   15c8c:	f140 8082 	bpl.w	15d94 <gpio_nrfx_pin_interrupt_configure+0x1a8>
			(void)atomic_and(mask, ~BIT(i));
   15c90:	2201      	movs	r2, #1
   15c92:	409a      	lsls	r2, r3
   15c94:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c96:	494f      	ldr	r1, [pc, #316]	; (15dd4 <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   15c98:	e8d1 4fef 	ldaex	r4, [r1]
   15c9c:	4004      	ands	r4, r0
   15c9e:	e8c1 4fec 	stlex	ip, r4, [r1]
   15ca2:	f1bc 0f00 	cmp.w	ip, #0
   15ca6:	d1f7      	bne.n	15c98 <gpio_nrfx_pin_interrupt_configure+0xac>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15ca8:	009b      	lsls	r3, r3, #2
   15caa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15cae:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   15cb2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15cb6:	f021 0101 	bic.w	r1, r1, #1
   15cba:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   15cbe:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15cc2:	2100      	movs	r1, #0
   15cc4:	4638      	mov	r0, r7
   15cc6:	f017 ff32 	bl	2db2e <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15cca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   15cce:	40eb      	lsrs	r3, r5
   15cd0:	f013 0301 	ands.w	r3, r3, #1
   15cd4:	d051      	beq.n	15d7a <gpio_nrfx_pin_interrupt_configure+0x18e>
		if (data->trig_edge & BIT(pin)) {
   15cd6:	f8d8 3014 	ldr.w	r3, [r8, #20]
   15cda:	40eb      	lsrs	r3, r5
   15cdc:	f013 0401 	ands.w	r4, r3, #1
   15ce0:	d065      	beq.n	15dae <gpio_nrfx_pin_interrupt_configure+0x1c2>
			if (data->double_edge & BIT(pin)) {
   15ce2:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15ce6:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   15ce8:	40eb      	lsrs	r3, r5
   15cea:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15cec:	bf48      	it	mi
   15cee:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   15cf0:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15cf4:	bf5f      	itttt	pl
   15cf6:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   15cfa:	fa21 f505 	lsrpl.w	r5, r1, r5
   15cfe:	f005 0501 	andpl.w	r5, r5, #1
   15d02:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15d06:	4933      	ldr	r1, [pc, #204]	; (15dd4 <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   15d08:	bf58      	it	pl
   15d0a:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   15d0c:	fa0c f402 	lsl.w	r4, ip, r2
   15d10:	e8d1 0fef 	ldaex	r0, [r1]
   15d14:	ea40 0304 	orr.w	r3, r0, r4
   15d18:	e8c1 3fee 	stlex	lr, r3, [r1]
   15d1c:	f1be 0f00 	cmp.w	lr, #0
   15d20:	d1f6      	bne.n	15d10 <gpio_nrfx_pin_interrupt_configure+0x124>
		if ((prev & BIT(channel)) == 0) {
   15d22:	40d0      	lsrs	r0, r2
   15d24:	f010 0301 	ands.w	r3, r0, #1
   15d28:	d139      	bne.n	15d9e <gpio_nrfx_pin_interrupt_configure+0x1b2>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15d2a:	0091      	lsls	r1, r2, #2
   15d2c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   15d30:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   15d34:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   15d38:	3240      	adds	r2, #64	; 0x40
   15d3a:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   15d3e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   15d42:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15d46:	023f      	lsls	r7, r7, #8
   15d48:	0092      	lsls	r2, r2, #2
   15d4a:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   15d4e:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   15d52:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15d54:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   15d58:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15d5c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15d60:	4307      	orrs	r7, r0
   15d62:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15d66:	6013      	str	r3, [r2, #0]
   15d68:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15d6a:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   15d6e:	f042 0201 	orr.w	r2, r2, #1
   15d72:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   15d76:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   15d7a:	4618      	mov	r0, r3
   15d7c:	e014      	b.n	15da8 <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15d7e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15d82:	f47f af4f 	bne.w	15c24 <gpio_nrfx_pin_interrupt_configure+0x38>
   15d86:	2101      	movs	r1, #1
   15d88:	fa01 f305 	lsl.w	r3, r1, r5
   15d8c:	68e1      	ldr	r1, [r4, #12]
   15d8e:	ea21 0103 	bic.w	r1, r1, r3
   15d92:	e74b      	b.n	15c2c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15d94:	3301      	adds	r3, #1
   15d96:	2b08      	cmp	r3, #8
   15d98:	f47f af6c 	bne.w	15c74 <gpio_nrfx_pin_interrupt_configure+0x88>
   15d9c:	e791      	b.n	15cc2 <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   15d9e:	3201      	adds	r2, #1
   15da0:	2a08      	cmp	r2, #8
   15da2:	d1b3      	bne.n	15d0c <gpio_nrfx_pin_interrupt_configure+0x120>
	return -ENODEV;
   15da4:	f06f 0012 	mvn.w	r0, #18
}
   15da8:	b003      	add	sp, #12
   15daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15dae:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15db2:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15db4:	40e9      	lsrs	r1, r5
   15db6:	f001 0101 	and.w	r1, r1, #1
   15dba:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15dbe:	b2c9      	uxtb	r1, r1
   15dc0:	f017 feb5 	bl	2db2e <nrf_gpio_cfg_sense_set>
	int res = 0;
   15dc4:	4620      	mov	r0, r4
   15dc6:	e7ef      	b.n	15da8 <gpio_nrfx_pin_interrupt_configure+0x1bc>
		return -ENOTSUP;
   15dc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15dcc:	e7ec      	b.n	15da8 <gpio_nrfx_pin_interrupt_configure+0x1bc>
   15dce:	bf00      	nop
   15dd0:	40031000 	.word	0x40031000
   15dd4:	20021614 	.word	0x20021614

00015dd8 <gpiote_event_handler>:
{
   15dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15ddc:	4e4b      	ldr	r6, [pc, #300]	; (15f0c <gpiote_event_handler+0x134>)
   15dde:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   15de0:	2f00      	cmp	r7, #0
   15de2:	d050      	beq.n	15e86 <gpiote_event_handler+0xae>
	uint32_t bit = 1U << pin;
   15de4:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   15de8:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   15dec:	4b48      	ldr	r3, [pc, #288]	; (15f10 <gpiote_event_handler+0x138>)
   15dee:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15df0:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   15df4:	430a      	orrs	r2, r1
   15df6:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   15dfa:	4a46      	ldr	r2, [pc, #280]	; (15f14 <gpiote_event_handler+0x13c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   15dfc:	691b      	ldr	r3, [r3, #16]
   15dfe:	6914      	ldr	r4, [r2, #16]
   15e00:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   15e02:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   15e06:	bb7d      	cbnz	r5, 15e68 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e08:	6035      	str	r5, [r6, #0]
   15e0a:	6833      	ldr	r3, [r6, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15e0c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15e0e:	2501      	movs	r5, #1
   15e10:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   15e12:	4841      	ldr	r0, [pc, #260]	; (15f18 <gpiote_event_handler+0x140>)
   15e14:	4941      	ldr	r1, [pc, #260]	; (15f1c <gpiote_event_handler+0x144>)
   15e16:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   15e1a:	fa05 fc03 	lsl.w	ip, r5, r3
   15e1e:	ea1c 0f02 	tst.w	ip, r2
   15e22:	d00f      	beq.n	15e44 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e24:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   15e28:	b162      	cbz	r2, 15e44 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15e2a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   15e2e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e32:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15e36:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15e3a:	fa05 f202 	lsl.w	r2, r5, r2
   15e3e:	4314      	orrs	r4, r2
   15e40:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15e44:	3301      	adds	r3, #1
   15e46:	2b08      	cmp	r3, #8
   15e48:	d1e5      	bne.n	15e16 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   15e4a:	b9f4      	cbnz	r4, 15e8a <gpiote_event_handler+0xb2>
	if (port_event) {
   15e4c:	b157      	cbz	r7, 15e64 <gpiote_event_handler+0x8c>
	uint32_t bit = 1U << pin;
   15e4e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   15e50:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   15e52:	4d2f      	ldr	r5, [pc, #188]	; (15f10 <gpiote_event_handler+0x138>)
   15e54:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15e56:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   15e5a:	430a      	orrs	r2, r1
   15e5c:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   15e60:	2c00      	cmp	r4, #0
   15e62:	d141      	bne.n	15ee8 <gpiote_event_handler+0x110>
}
   15e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   15e68:	ea15 0f08 	tst.w	r5, r8
   15e6c:	d006      	beq.n	15e7c <gpiote_event_handler+0xa4>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15e6e:	2100      	movs	r1, #0
   15e70:	f009 001f 	and.w	r0, r9, #31
   15e74:	f017 fe5b 	bl	2db2e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15e78:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   15e7c:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   15e80:	ea4f 0848 	mov.w	r8, r8, lsl #1
   15e84:	e7bf      	b.n	15e06 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15e86:	463c      	mov	r4, r7
   15e88:	e7c0      	b.n	15e0c <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15e8a:	4b21      	ldr	r3, [pc, #132]	; (15f10 <gpiote_event_handler+0x138>)
   15e8c:	685d      	ldr	r5, [r3, #4]
   15e8e:	2d00      	cmp	r5, #0
   15e90:	d0dc      	beq.n	15e4c <gpiote_event_handler+0x74>
	return node->next;
   15e92:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15e94:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15f28 <gpiote_event_handler+0x150>
   15e98:	2e00      	cmp	r6, #0
   15e9a:	bf38      	it	cc
   15e9c:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   15e9e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 15f2c <gpiote_event_handler+0x154>
   15ea2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15f30 <gpiote_event_handler+0x158>
		if (cb->pin_mask & pins) {
   15ea6:	68ab      	ldr	r3, [r5, #8]
   15ea8:	421c      	tst	r4, r3
   15eaa:	d014      	beq.n	15ed6 <gpiote_event_handler+0xfe>
			__ASSERT(cb->handler, "No callback handler!");
   15eac:	686b      	ldr	r3, [r5, #4]
   15eae:	b963      	cbnz	r3, 15eca <gpiote_event_handler+0xf2>
   15eb0:	4651      	mov	r1, sl
   15eb2:	2345      	movs	r3, #69	; 0x45
   15eb4:	4642      	mov	r2, r8
   15eb6:	481a      	ldr	r0, [pc, #104]	; (15f20 <gpiote_event_handler+0x148>)
   15eb8:	f016 fadb 	bl	2c472 <printk>
   15ebc:	4819      	ldr	r0, [pc, #100]	; (15f24 <gpiote_event_handler+0x14c>)
   15ebe:	f016 fad8 	bl	2c472 <printk>
   15ec2:	2145      	movs	r1, #69	; 0x45
   15ec4:	4640      	mov	r0, r8
   15ec6:	f016 fcf1 	bl	2c8ac <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15eca:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   15ece:	4629      	mov	r1, r5
   15ed0:	4648      	mov	r0, r9
   15ed2:	4022      	ands	r2, r4
   15ed4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15ed6:	2e00      	cmp	r6, #0
   15ed8:	d0b8      	beq.n	15e4c <gpiote_event_handler+0x74>
   15eda:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15edc:	4635      	mov	r5, r6
   15ede:	2b00      	cmp	r3, #0
   15ee0:	bf38      	it	cc
   15ee2:	2300      	movcc	r3, #0
   15ee4:	461e      	mov	r6, r3
   15ee6:	e7de      	b.n	15ea6 <gpiote_event_handler+0xce>
		if (level_pins & bit) {
   15ee8:	4226      	tst	r6, r4
   15eea:	d00c      	beq.n	15f06 <gpiote_event_handler+0x12e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15eec:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15eee:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15ef2:	40f9      	lsrs	r1, r7
   15ef4:	f001 0101 	and.w	r1, r1, #1
   15ef8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15efc:	b2c9      	uxtb	r1, r1
   15efe:	f017 fe16 	bl	2db2e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15f02:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   15f06:	3701      	adds	r7, #1
		bit <<= 1;
   15f08:	0076      	lsls	r6, r6, #1
   15f0a:	e7a9      	b.n	15e60 <gpiote_event_handler+0x88>
   15f0c:	4003117c 	.word	0x4003117c
   15f10:	200215f8 	.word	0x200215f8
   15f14:	40842500 	.word	0x40842500
   15f18:	40031000 	.word	0x40031000
   15f1c:	40031100 	.word	0x40031100
   15f20:	0003049a 	.word	0x0003049a
   15f24:	000315ae 	.word	0x000315ae
   15f28:	20020ab0 	.word	0x20020ab0
   15f2c:	00031560 	.word	0x00031560
   15f30:	0003161b 	.word	0x0003161b

00015f34 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15f34:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   15f36:	794b      	ldrb	r3, [r1, #5]
   15f38:	2b01      	cmp	r3, #1
   15f3a:	d029      	beq.n	15f90 <uarte_nrfx_configure+0x5c>
   15f3c:	2b03      	cmp	r3, #3
   15f3e:	d124      	bne.n	15f8a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15f40:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15f42:	798b      	ldrb	r3, [r1, #6]
   15f44:	2b03      	cmp	r3, #3
   15f46:	d120      	bne.n	15f8a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15f48:	79cc      	ldrb	r4, [r1, #7]
   15f4a:	b124      	cbz	r4, 15f56 <uarte_nrfx_configure+0x22>
   15f4c:	2c01      	cmp	r4, #1
   15f4e:	d11c      	bne.n	15f8a <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15f50:	6843      	ldr	r3, [r0, #4]
   15f52:	791b      	ldrb	r3, [r3, #4]
   15f54:	b1cb      	cbz	r3, 15f8a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   15f56:	790a      	ldrb	r2, [r1, #4]
   15f58:	b112      	cbz	r2, 15f60 <uarte_nrfx_configure+0x2c>
   15f5a:	2a02      	cmp	r2, #2
   15f5c:	d115      	bne.n	15f8a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15f5e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15f60:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   15f62:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   15f64:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15f68:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   15f6a:	d065      	beq.n	16038 <uarte_nrfx_configure+0x104>
   15f6c:	d82d      	bhi.n	15fca <uarte_nrfx_configure+0x96>
   15f6e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f72:	d064      	beq.n	1603e <uarte_nrfx_configure+0x10a>
   15f74:	d816      	bhi.n	15fa4 <uarte_nrfx_configure+0x70>
   15f76:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15f7a:	d062      	beq.n	16042 <uarte_nrfx_configure+0x10e>
   15f7c:	d80a      	bhi.n	15f94 <uarte_nrfx_configure+0x60>
   15f7e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15f82:	d061      	beq.n	16048 <uarte_nrfx_configure+0x114>
   15f84:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15f88:	d061      	beq.n	1604e <uarte_nrfx_configure+0x11a>
   15f8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15f8e:	e052      	b.n	16036 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   15f90:	2600      	movs	r6, #0
   15f92:	e7d6      	b.n	15f42 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   15f94:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15f98:	d05c      	beq.n	16054 <uarte_nrfx_configure+0x120>
   15f9a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15f9e:	d1f4      	bne.n	15f8a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15fa0:	4b37      	ldr	r3, [pc, #220]	; (16080 <uarte_nrfx_configure+0x14c>)
   15fa2:	e03c      	b.n	1601e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15fa4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15fa8:	d057      	beq.n	1605a <uarte_nrfx_configure+0x126>
   15faa:	d807      	bhi.n	15fbc <uarte_nrfx_configure+0x88>
   15fac:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15fb0:	d055      	beq.n	1605e <uarte_nrfx_configure+0x12a>
   15fb2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15fb6:	d1e8      	bne.n	15f8a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15fb8:	4b32      	ldr	r3, [pc, #200]	; (16084 <uarte_nrfx_configure+0x150>)
   15fba:	e030      	b.n	1601e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15fbc:	f647 2712 	movw	r7, #31250	; 0x7a12
   15fc0:	42bb      	cmp	r3, r7
   15fc2:	d1e2      	bne.n	15f8a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15fc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15fc8:	e029      	b.n	1601e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15fca:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15fce:	d048      	beq.n	16062 <uarte_nrfx_configure+0x12e>
   15fd0:	d813      	bhi.n	15ffa <uarte_nrfx_configure+0xc6>
   15fd2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   15fd6:	d047      	beq.n	16068 <uarte_nrfx_configure+0x134>
   15fd8:	d809      	bhi.n	15fee <uarte_nrfx_configure+0xba>
   15fda:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   15fde:	42bb      	cmp	r3, r7
   15fe0:	d044      	beq.n	1606c <uarte_nrfx_configure+0x138>
   15fe2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15fe6:	d1d0      	bne.n	15f8a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15fe8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15fec:	e017      	b.n	1601e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15fee:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15ff2:	d1ca      	bne.n	15f8a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15ff4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15ff8:	e011      	b.n	1601e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15ffa:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15ffe:	d038      	beq.n	16072 <uarte_nrfx_configure+0x13e>
   16000:	d808      	bhi.n	16014 <uarte_nrfx_configure+0xe0>
   16002:	4f21      	ldr	r7, [pc, #132]	; (16088 <uarte_nrfx_configure+0x154>)
   16004:	42bb      	cmp	r3, r7
   16006:	d037      	beq.n	16078 <uarte_nrfx_configure+0x144>
   16008:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1600c:	d1bd      	bne.n	15f8a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1600e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16012:	e004      	b.n	1601e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   16014:	4f1d      	ldr	r7, [pc, #116]	; (1608c <uarte_nrfx_configure+0x158>)
   16016:	42bb      	cmp	r3, r7
   16018:	d1b7      	bne.n	15f8a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1601a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1601e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16022:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   16024:	4334      	orrs	r4, r6
   16026:	4322      	orrs	r2, r4
   16028:	3304      	adds	r3, #4
   1602a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1602c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   16030:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16034:	2000      	movs	r0, #0
}
   16036:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16038:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1603c:	e7ef      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1603e:	4b14      	ldr	r3, [pc, #80]	; (16090 <uarte_nrfx_configure+0x15c>)
   16040:	e7ed      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16042:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16046:	e7ea      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   16048:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1604c:	e7e7      	b.n	1601e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1604e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16052:	e7e4      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   16054:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16058:	e7e1      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1605a:	4b0e      	ldr	r3, [pc, #56]	; (16094 <uarte_nrfx_configure+0x160>)
   1605c:	e7df      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1605e:	4b0e      	ldr	r3, [pc, #56]	; (16098 <uarte_nrfx_configure+0x164>)
   16060:	e7dd      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   16062:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16066:	e7da      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16068:	4b0c      	ldr	r3, [pc, #48]	; (1609c <uarte_nrfx_configure+0x168>)
   1606a:	e7d8      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1606c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16070:	e7d5      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   16072:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16076:	e7d2      	b.n	1601e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16078:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1607c:	e7cf      	b.n	1601e <uarte_nrfx_configure+0xea>
   1607e:	bf00      	nop
   16080:	0013b000 	.word	0x0013b000
   16084:	004ea000 	.word	0x004ea000
   16088:	0003d090 	.word	0x0003d090
   1608c:	000f4240 	.word	0x000f4240
   16090:	00275000 	.word	0x00275000
   16094:	0075c000 	.word	0x0075c000
   16098:	003af000 	.word	0x003af000
   1609c:	013a9000 	.word	0x013a9000

000160a0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   160a0:	6803      	ldr	r3, [r0, #0]
{
   160a2:	b510      	push	{r4, lr}
    switch (port)
   160a4:	095a      	lsrs	r2, r3, #5
   160a6:	bf0c      	ite	eq
   160a8:	f04f 32ff 	moveq.w	r2, #4294967295
   160ac:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   160ae:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   160b2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   160b6:	07db      	lsls	r3, r3, #31
{
   160b8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   160ba:	d40b      	bmi.n	160d4 <nrf_gpio_pin_port_decode+0x34>
   160bc:	490f      	ldr	r1, [pc, #60]	; (160fc <nrf_gpio_pin_port_decode+0x5c>)
   160be:	4810      	ldr	r0, [pc, #64]	; (16100 <nrf_gpio_pin_port_decode+0x60>)
   160c0:	f240 231a 	movw	r3, #538	; 0x21a
   160c4:	4a0f      	ldr	r2, [pc, #60]	; (16104 <nrf_gpio_pin_port_decode+0x64>)
   160c6:	f016 f9d4 	bl	2c472 <printk>
   160ca:	f240 211a 	movw	r1, #538	; 0x21a
   160ce:	480d      	ldr	r0, [pc, #52]	; (16104 <nrf_gpio_pin_port_decode+0x64>)
   160d0:	f016 fbec 	bl	2c8ac <assert_post_action>
    uint32_t pin_number = *p_pin;
   160d4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   160d6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   160da:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   160dc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   160de:	d00b      	beq.n	160f8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   160e0:	4909      	ldr	r1, [pc, #36]	; (16108 <nrf_gpio_pin_port_decode+0x68>)
   160e2:	4807      	ldr	r0, [pc, #28]	; (16100 <nrf_gpio_pin_port_decode+0x60>)
   160e4:	f240 231f 	movw	r3, #543	; 0x21f
   160e8:	4a06      	ldr	r2, [pc, #24]	; (16104 <nrf_gpio_pin_port_decode+0x64>)
   160ea:	f016 f9c2 	bl	2c472 <printk>
   160ee:	f240 211f 	movw	r1, #543	; 0x21f
   160f2:	4804      	ldr	r0, [pc, #16]	; (16104 <nrf_gpio_pin_port_decode+0x64>)
   160f4:	f016 fbda 	bl	2c8ac <assert_post_action>
}
   160f8:	4804      	ldr	r0, [pc, #16]	; (1610c <nrf_gpio_pin_port_decode+0x6c>)
   160fa:	bd10      	pop	{r4, pc}
   160fc:	000315f8 	.word	0x000315f8
   16100:	0003049a 	.word	0x0003049a
   16104:	000315c5 	.word	0x000315c5
   16108:	00033086 	.word	0x00033086
   1610c:	40842500 	.word	0x40842500

00016110 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   16110:	b530      	push	{r4, r5, lr}
   16112:	b085      	sub	sp, #20
   16114:	466c      	mov	r4, sp
   16116:	4605      	mov	r5, r0
   16118:	4b08      	ldr	r3, [pc, #32]	; (1613c <uarte_1_init+0x2c>)
   1611a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1611c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   16120:	2200      	movs	r2, #0
   16122:	2101      	movs	r1, #1
   16124:	2009      	movs	r0, #9
   16126:	f7fe fab3 	bl	14690 <z_arm_irq_priority_set>
   1612a:	2009      	movs	r0, #9
   1612c:	f7fe fa92 	bl	14654 <arch_irq_enable>
   16130:	4621      	mov	r1, r4
   16132:	4628      	mov	r0, r5
   16134:	f017 fe27 	bl	2dd86 <uarte_instance_init.constprop.0>
   16138:	b005      	add	sp, #20
   1613a:	bd30      	pop	{r4, r5, pc}
   1613c:	0002f0f0 	.word	0x0002f0f0

00016140 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   16140:	b530      	push	{r4, r5, lr}
   16142:	b085      	sub	sp, #20
   16144:	466c      	mov	r4, sp
   16146:	4605      	mov	r5, r0
   16148:	4b08      	ldr	r3, [pc, #32]	; (1616c <uarte_0_init+0x2c>)
   1614a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1614c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   16150:	2200      	movs	r2, #0
   16152:	2101      	movs	r1, #1
   16154:	2008      	movs	r0, #8
   16156:	f7fe fa9b 	bl	14690 <z_arm_irq_priority_set>
   1615a:	2008      	movs	r0, #8
   1615c:	f7fe fa7a 	bl	14654 <arch_irq_enable>
   16160:	4621      	mov	r1, r4
   16162:	4628      	mov	r0, r5
   16164:	f017 fe0f 	bl	2dd86 <uarte_instance_init.constprop.0>
   16168:	b005      	add	sp, #20
   1616a:	bd30      	pop	{r4, r5, pc}
   1616c:	0002f100 	.word	0x0002f100

00016170 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   16170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16174:	460e      	mov	r6, r1
   16176:	4614      	mov	r4, r2
   16178:	b0a6      	sub	sp, #152	; 0x98
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   1617a:	b948      	cbnz	r0, 16190 <entropy_cc3xx_rng_get_entropy+0x20>
   1617c:	491c      	ldr	r1, [pc, #112]	; (161f0 <entropy_cc3xx_rng_get_entropy+0x80>)
   1617e:	481d      	ldr	r0, [pc, #116]	; (161f4 <entropy_cc3xx_rng_get_entropy+0x84>)
   16180:	231f      	movs	r3, #31
   16182:	4a1d      	ldr	r2, [pc, #116]	; (161f8 <entropy_cc3xx_rng_get_entropy+0x88>)
   16184:	f016 f975 	bl	2c472 <printk>
   16188:	211f      	movs	r1, #31
   1618a:	481b      	ldr	r0, [pc, #108]	; (161f8 <entropy_cc3xx_rng_get_entropy+0x88>)
   1618c:	f016 fb8e 	bl	2c8ac <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   16190:	b94e      	cbnz	r6, 161a6 <entropy_cc3xx_rng_get_entropy+0x36>
   16192:	491a      	ldr	r1, [pc, #104]	; (161fc <entropy_cc3xx_rng_get_entropy+0x8c>)
   16194:	4817      	ldr	r0, [pc, #92]	; (161f4 <entropy_cc3xx_rng_get_entropy+0x84>)
   16196:	2320      	movs	r3, #32
   16198:	4a17      	ldr	r2, [pc, #92]	; (161f8 <entropy_cc3xx_rng_get_entropy+0x88>)
   1619a:	f016 f96a 	bl	2c472 <printk>
   1619e:	2120      	movs	r1, #32
   161a0:	4815      	ldr	r0, [pc, #84]	; (161f8 <entropy_cc3xx_rng_get_entropy+0x88>)
   161a2:	f016 fb83 	bl	2c8ac <assert_post_action>
{
   161a6:	2700      	movs	r7, #0
   161a8:	f06f 0515 	mvn.w	r5, #21
			       */

	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	while (length > 0) {
   161ac:	b91c      	cbnz	r4, 161b6 <entropy_cc3xx_rng_get_entropy+0x46>
		return -EINVAL;
	}
#endif

	return res;
}
   161ae:	4628      	mov	r0, r5
   161b0:	b026      	add	sp, #152	; 0x98
   161b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   161b6:	2190      	movs	r1, #144	; 0x90
   161b8:	aa01      	add	r2, sp, #4
   161ba:	a802      	add	r0, sp, #8
   161bc:	f016 ff40 	bl	2d040 <spm_request_random_number>
		if (res < 0) {
   161c0:	1e05      	subs	r5, r0, #0
   161c2:	dbf4      	blt.n	161ae <entropy_cc3xx_rng_get_entropy+0x3e>
		if (olen != sizeof(spm_buf)) {
   161c4:	9b01      	ldr	r3, [sp, #4]
   161c6:	2b90      	cmp	r3, #144	; 0x90
   161c8:	d10e      	bne.n	161e8 <entropy_cc3xx_rng_get_entropy+0x78>
		to_copy = MIN(length, sizeof(spm_buf));
   161ca:	2c90      	cmp	r4, #144	; 0x90
   161cc:	46a0      	mov	r8, r4
   161ce:	bf28      	it	cs
   161d0:	f04f 0890 	movcs.w	r8, #144	; 0x90
   161d4:	19f0      	adds	r0, r6, r7
   161d6:	4642      	mov	r2, r8
   161d8:	a902      	add	r1, sp, #8
		length -= to_copy;
   161da:	eba4 0408 	sub.w	r4, r4, r8
   161de:	f7f6 fcb5 	bl	cb4c <memcpy>
   161e2:	b2a4      	uxth	r4, r4
		offset += to_copy;
   161e4:	4447      	add	r7, r8
   161e6:	e7e1      	b.n	161ac <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   161e8:	f06f 0515 	mvn.w	r5, #21
   161ec:	e7df      	b.n	161ae <entropy_cc3xx_rng_get_entropy+0x3e>
   161ee:	bf00      	nop
   161f0:	00031675 	.word	0x00031675
   161f4:	0003049a 	.word	0x0003049a
   161f8:	00031645 	.word	0x00031645
   161fc:	00031688 	.word	0x00031688

00016200 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   16200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16204:	4605      	mov	r5, r0
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;

    if (output_buffer == NULL)
   16206:	460f      	mov	r7, r1
{
   16208:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   1620a:	b919      	cbnz	r1, 16214 <print_string_ptr+0x14>
    {
        return false;
   1620c:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   1620e:	b005      	add	sp, #20
   16210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   16214:	4b4e      	ldr	r3, [pc, #312]	; (16350 <print_string_ptr+0x150>)
   16216:	881a      	ldrh	r2, [r3, #0]
   16218:	789b      	ldrb	r3, [r3, #2]
   1621a:	f8ad 200c 	strh.w	r2, [sp, #12]
   1621e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   16222:	b340      	cbz	r0, 16276 <print_string_ptr+0x76>
   16224:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   16226:	f04f 0b00 	mov.w	fp, #0
   1622a:	2001      	movs	r0, #1
   1622c:	4c49      	ldr	r4, [pc, #292]	; (16354 <print_string_ptr+0x154>)
   1622e:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   16230:	f811 3b01 	ldrb.w	r3, [r1], #1
   16234:	bb6b      	cbnz	r3, 16292 <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   16236:	ebaa 0a05 	sub.w	sl, sl, r5
   1623a:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   1623c:	4638      	mov	r0, r7
   1623e:	f10a 0103 	add.w	r1, sl, #3
   16242:	f017 fe47 	bl	2ded4 <ensure>
    if (output == NULL)
   16246:	4606      	mov	r6, r0
   16248:	2800      	cmp	r0, #0
   1624a:	d0df      	beq.n	1620c <print_string_ptr+0xc>
    if (escape_characters == 0)
   1624c:	2322      	movs	r3, #34	; 0x22
   1624e:	1c44      	adds	r4, r0, #1
   16250:	f10a 0901 	add.w	r9, sl, #1
   16254:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   16258:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   1625a:	f1bb 0f00 	cmp.w	fp, #0
   1625e:	d12e      	bne.n	162be <print_string_ptr+0xbe>
   16260:	4652      	mov	r2, sl
   16262:	4629      	mov	r1, r5
   16264:	4620      	mov	r0, r4
   16266:	f7f6 fc71 	bl	cb4c <memcpy>
        output[output_length + 1] = '\"';
   1626a:	2322      	movs	r3, #34	; 0x22
   1626c:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   16270:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   16274:	e00b      	b.n	1628e <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   16276:	2103      	movs	r1, #3
   16278:	4638      	mov	r0, r7
   1627a:	f017 fe2b 	bl	2ded4 <ensure>
        if (output == NULL)
   1627e:	2800      	cmp	r0, #0
   16280:	d0c4      	beq.n	1620c <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   16282:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   16286:	a903      	add	r1, sp, #12
   16288:	1ad2      	subs	r2, r2, r3
   1628a:	f010 fd4d 	bl	26d28 <strncpy>
    return true;
   1628e:	2001      	movs	r0, #1
   16290:	e7bd      	b.n	1620e <print_string_ptr+0xe>
        switch (*input_pointer)
   16292:	2b22      	cmp	r3, #34	; 0x22
   16294:	d80b      	bhi.n	162ae <print_string_ptr+0xae>
   16296:	2b07      	cmp	r3, #7
   16298:	d90c      	bls.n	162b4 <print_string_ptr+0xb4>
   1629a:	f1a3 0208 	sub.w	r2, r3, #8
   1629e:	b2d2      	uxtb	r2, r2
   162a0:	fa00 f202 	lsl.w	r2, r0, r2
   162a4:	4222      	tst	r2, r4
   162a6:	d005      	beq.n	162b4 <print_string_ptr+0xb4>
                escape_characters++;
   162a8:	f10b 0b01 	add.w	fp, fp, #1
                break;
   162ac:	e7bf      	b.n	1622e <print_string_ptr+0x2e>
        switch (*input_pointer)
   162ae:	2b5c      	cmp	r3, #92	; 0x5c
   162b0:	d1bd      	bne.n	1622e <print_string_ptr+0x2e>
   162b2:	e7f9      	b.n	162a8 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   162b4:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   162b6:	bf98      	it	ls
   162b8:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   162bc:	e7b7      	b.n	1622e <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   162be:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   162c2:	f04f 0b74 	mov.w	fp, #116	; 0x74
   162c6:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   162c8:	4a23      	ldr	r2, [pc, #140]	; (16358 <print_string_ptr+0x158>)
   162ca:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   162cc:	9901      	ldr	r1, [sp, #4]
   162ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   162d2:	9101      	str	r1, [sp, #4]
   162d4:	b92b      	cbnz	r3, 162e2 <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   162d6:	2222      	movs	r2, #34	; 0x22
   162d8:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   162dc:	f806 3008 	strb.w	r3, [r6, r8]
   162e0:	e7d5      	b.n	1628e <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   162e2:	2b1f      	cmp	r3, #31
   162e4:	d907      	bls.n	162f6 <print_string_ptr+0xf6>
   162e6:	2b22      	cmp	r3, #34	; 0x22
   162e8:	d005      	beq.n	162f6 <print_string_ptr+0xf6>
   162ea:	2b5c      	cmp	r3, #92	; 0x5c
   162ec:	d003      	beq.n	162f6 <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   162ee:	4620      	mov	r0, r4
   162f0:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   162f2:	1c44      	adds	r4, r0, #1
   162f4:	e7ea      	b.n	162cc <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   162f6:	4620      	mov	r0, r4
            switch (*input_pointer)
   162f8:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   162fa:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   162fe:	781b      	ldrb	r3, [r3, #0]
   16300:	2b0d      	cmp	r3, #13
   16302:	d80a      	bhi.n	1631a <print_string_ptr+0x11a>
   16304:	2b07      	cmp	r3, #7
   16306:	d919      	bls.n	1633c <print_string_ptr+0x13c>
   16308:	f1a3 0108 	sub.w	r1, r3, #8
   1630c:	2905      	cmp	r1, #5
   1630e:	d815      	bhi.n	1633c <print_string_ptr+0x13c>
   16310:	e8df f001 	tbb	[pc, r1]
   16314:	140d1109 	.word	0x140d1109
   16318:	0f0b      	.short	0x0f0b
   1631a:	2b22      	cmp	r3, #34	; 0x22
   1631c:	d001      	beq.n	16322 <print_string_ptr+0x122>
   1631e:	2b5c      	cmp	r3, #92	; 0x5c
   16320:	d10c      	bne.n	1633c <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   16322:	7063      	strb	r3, [r4, #1]
                    break;
   16324:	e7e5      	b.n	162f2 <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   16326:	2362      	movs	r3, #98	; 0x62
   16328:	e7fb      	b.n	16322 <print_string_ptr+0x122>
                    *output_pointer = 'f';
   1632a:	2366      	movs	r3, #102	; 0x66
   1632c:	e7f9      	b.n	16322 <print_string_ptr+0x122>
                    *output_pointer = 'n';
   1632e:	236e      	movs	r3, #110	; 0x6e
   16330:	e7f7      	b.n	16322 <print_string_ptr+0x122>
                    *output_pointer = 'r';
   16332:	2372      	movs	r3, #114	; 0x72
   16334:	e7f5      	b.n	16322 <print_string_ptr+0x122>
                    *output_pointer = 't';
   16336:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   1633a:	e7da      	b.n	162f2 <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   1633c:	6839      	ldr	r1, [r7, #0]
   1633e:	687d      	ldr	r5, [r7, #4]
   16340:	1a41      	subs	r1, r0, r1
   16342:	1a69      	subs	r1, r5, r1
   16344:	f010 fae8 	bl	26918 <snprintf>
                    output_pointer += 4;
   16348:	4a03      	ldr	r2, [pc, #12]	; (16358 <print_string_ptr+0x158>)
   1634a:	1d60      	adds	r0, r4, #5
                    break;
   1634c:	e7d1      	b.n	162f2 <print_string_ptr+0xf2>
   1634e:	bf00      	nop
   16350:	000316b2 	.word	0x000316b2
   16354:	04000037 	.word	0x04000037
   16358:	000316ac 	.word	0x000316ac

0001635c <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   1635c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16360:	460c      	mov	r4, r1
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   16362:	4606      	mov	r6, r0
{
   16364:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   16366:	b908      	cbnz	r0, 1636c <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   16368:	2500      	movs	r5, #0
   1636a:	e06f      	b.n	1644c <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   1636c:	2900      	cmp	r1, #0
   1636e:	d0fb      	beq.n	16368 <print_value+0xc>
    switch ((item->type) & 0xFF)
   16370:	7b05      	ldrb	r5, [r0, #12]
   16372:	2d10      	cmp	r5, #16
   16374:	f000 80cc 	beq.w	16510 <print_value+0x1b4>
   16378:	dc18      	bgt.n	163ac <print_value+0x50>
   1637a:	1e6b      	subs	r3, r5, #1
   1637c:	2b07      	cmp	r3, #7
   1637e:	d8f3      	bhi.n	16368 <print_value+0xc>
   16380:	2b07      	cmp	r3, #7
   16382:	d8f1      	bhi.n	16368 <print_value+0xc>
   16384:	a201      	add	r2, pc, #4	; (adr r2, 1638c <print_value+0x30>)
   16386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1638a:	bf00      	nop
   1638c:	00016429 	.word	0x00016429
   16390:	00016455 	.word	0x00016455
   16394:	00016369 	.word	0x00016369
   16398:	00016401 	.word	0x00016401
   1639c:	00016369 	.word	0x00016369
   163a0:	00016369 	.word	0x00016369
   163a4:	00016369 	.word	0x00016369
   163a8:	00016459 	.word	0x00016459
   163ac:	2d40      	cmp	r5, #64	; 0x40
   163ae:	f000 80dd 	beq.w	1656c <print_value+0x210>
   163b2:	2d80      	cmp	r5, #128	; 0x80
   163b4:	f000 8098 	beq.w	164e8 <print_value+0x18c>
   163b8:	2d20      	cmp	r5, #32
   163ba:	d1d5      	bne.n	16368 <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   163bc:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   163be:	2101      	movs	r1, #1
   163c0:	4620      	mov	r0, r4
   163c2:	f017 fd87 	bl	2ded4 <ensure>
    if (output_pointer == NULL)
   163c6:	2800      	cmp	r0, #0
   163c8:	d0ce      	beq.n	16368 <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   163ca:	235b      	movs	r3, #91	; 0x5b
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   163cc:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   163ce:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   163d2:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   163d4:	68a3      	ldr	r3, [r4, #8]
   163d6:	3301      	adds	r3, #1
   163d8:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   163da:	68e3      	ldr	r3, [r4, #12]
   163dc:	3301      	adds	r3, #1
   163de:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   163e0:	2e00      	cmp	r6, #0
   163e2:	f040 809a 	bne.w	1651a <print_value+0x1be>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   163e6:	2102      	movs	r1, #2
   163e8:	4620      	mov	r0, r4
   163ea:	f017 fd73 	bl	2ded4 <ensure>
    if (output_pointer == NULL)
   163ee:	2800      	cmp	r0, #0
   163f0:	d0ba      	beq.n	16368 <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   163f2:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   163f4:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   163f6:	7003      	strb	r3, [r0, #0]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   163f8:	68e3      	ldr	r3, [r4, #12]
   163fa:	3b01      	subs	r3, #1
   163fc:	60e3      	str	r3, [r4, #12]
   163fe:	e011      	b.n	16424 <print_value+0xc8>
            const char buff[] = "null";
   16400:	4ba8      	ldr	r3, [pc, #672]	; (166a4 <print_value+0x348>)
            const char buff[] = "true";
   16402:	6818      	ldr	r0, [r3, #0]
   16404:	791b      	ldrb	r3, [r3, #4]
   16406:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   16408:	2105      	movs	r1, #5
   1640a:	4620      	mov	r0, r4
            const char buff[] = "true";
   1640c:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   16410:	f017 fd60 	bl	2ded4 <ensure>
            if (output == NULL)
   16414:	4605      	mov	r5, r0
   16416:	b1c8      	cbz	r0, 1644c <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   16418:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1641c:	a907      	add	r1, sp, #28
   1641e:	1ad2      	subs	r2, r2, r3
   16420:	f010 fc82 	bl	26d28 <strncpy>

    return true;
   16424:	2501      	movs	r5, #1
   16426:	e011      	b.n	1644c <print_value+0xf0>
            const char buff[] = "false";
   16428:	4b9f      	ldr	r3, [pc, #636]	; (166a8 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   1642a:	2106      	movs	r1, #6
            const char buff[] = "false";
   1642c:	6818      	ldr	r0, [r3, #0]
   1642e:	889b      	ldrh	r3, [r3, #4]
   16430:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   16432:	4620      	mov	r0, r4
            const char buff[] = "false";
   16434:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   16438:	f017 fd4c 	bl	2ded4 <ensure>
            if (output == NULL)
   1643c:	2800      	cmp	r0, #0
   1643e:	d093      	beq.n	16368 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   16440:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   16444:	a907      	add	r1, sp, #28
   16446:	1ad2      	subs	r2, r2, r3
   16448:	f010 fc6e 	bl	26d28 <strncpy>
}
   1644c:	4628      	mov	r0, r5
   1644e:	b00f      	add	sp, #60	; 0x3c
   16450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   16454:	4b95      	ldr	r3, [pc, #596]	; (166ac <print_value+0x350>)
   16456:	e7d4      	b.n	16402 <print_value+0xa6>
    if ((d * 0) != 0)
   16458:	2200      	movs	r2, #0
    double d = item->valuedouble;
   1645a:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   1645e:	2300      	movs	r3, #0
   16460:	4640      	mov	r0, r8
   16462:	4649      	mov	r1, r9
   16464:	f7f6 fcc6 	bl	cdf4 <__aeabi_dmul>
   16468:	2200      	movs	r2, #0
   1646a:	2300      	movs	r3, #0
   1646c:	f7f6 f8fa 	bl	c664 <__aeabi_dcmpeq>
   16470:	ae07      	add	r6, sp, #28
   16472:	b9b8      	cbnz	r0, 164a4 <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   16474:	4630      	mov	r0, r6
   16476:	498b      	ldr	r1, [pc, #556]	; (166a4 <print_value+0x348>)
   16478:	f010 fb90 	bl	26b9c <strcpy>
   1647c:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   1647e:	4620      	mov	r0, r4
   16480:	1c69      	adds	r1, r5, #1
   16482:	f017 fd27 	bl	2ded4 <ensure>
    if (output_pointer == NULL)
   16486:	2800      	cmp	r0, #0
   16488:	f43f af6e 	beq.w	16368 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   1648c:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   1648e:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   16490:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   16492:	3301      	adds	r3, #1
   16494:	429d      	cmp	r5, r3
   16496:	d1fa      	bne.n	1648e <print_value+0x132>
    output_pointer[i] = '\0';
   16498:	2300      	movs	r3, #0
   1649a:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   1649c:	68a0      	ldr	r0, [r4, #8]
   1649e:	4428      	add	r0, r5
   164a0:	60a0      	str	r0, [r4, #8]
    return true;
   164a2:	e7bf      	b.n	16424 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   164a4:	211a      	movs	r1, #26
   164a6:	4a82      	ldr	r2, [pc, #520]	; (166b0 <print_value+0x354>)
   164a8:	4630      	mov	r0, r6
   164aa:	e9cd 8900 	strd	r8, r9, [sp]
   164ae:	f010 fa33 	bl	26918 <snprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   164b2:	4980      	ldr	r1, [pc, #512]	; (166b4 <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   164b4:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   164b6:	aa04      	add	r2, sp, #16
   164b8:	4630      	mov	r0, r6
   164ba:	f010 fa91 	bl	269e0 <sscanf>
   164be:	2801      	cmp	r0, #1
   164c0:	d106      	bne.n	164d0 <print_value+0x174>
   164c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   164c6:	4640      	mov	r0, r8
   164c8:	4649      	mov	r1, r9
   164ca:	f7f6 f8cb 	bl	c664 <__aeabi_dcmpeq>
   164ce:	b938      	cbnz	r0, 164e0 <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   164d0:	211a      	movs	r1, #26
   164d2:	4630      	mov	r0, r6
   164d4:	e9cd 8900 	strd	r8, r9, [sp]
   164d8:	4a77      	ldr	r2, [pc, #476]	; (166b8 <print_value+0x35c>)
   164da:	f010 fa1d 	bl	26918 <snprintf>
   164de:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   164e0:	2d19      	cmp	r5, #25
   164e2:	f73f af41 	bgt.w	16368 <print_value+0xc>
   164e6:	e7ca      	b.n	1647e <print_value+0x122>
            if (item->valuestring == NULL)
   164e8:	6900      	ldr	r0, [r0, #16]
   164ea:	2800      	cmp	r0, #0
   164ec:	f43f af3c 	beq.w	16368 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   164f0:	f010 fbb2 	bl	26c58 <strlen>
   164f4:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   164f6:	4611      	mov	r1, r2
   164f8:	4620      	mov	r0, r4
   164fa:	9203      	str	r2, [sp, #12]
   164fc:	f017 fcea 	bl	2ded4 <ensure>
            if (output == NULL)
   16500:	2800      	cmp	r0, #0
   16502:	f43f af31 	beq.w	16368 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16506:	9a03      	ldr	r2, [sp, #12]
   16508:	6931      	ldr	r1, [r6, #16]
   1650a:	f7f6 fb1f 	bl	cb4c <memcpy>
   1650e:	e789      	b.n	16424 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   16510:	6900      	ldr	r0, [r0, #16]
   16512:	f7ff fe75 	bl	16200 <print_string_ptr>
   16516:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   16518:	e798      	b.n	1644c <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   1651a:	4621      	mov	r1, r4
   1651c:	4630      	mov	r0, r6
   1651e:	f7ff ff1d 	bl	1635c <print_value>
   16522:	2800      	cmp	r0, #0
   16524:	f43f af20 	beq.w	16368 <print_value+0xc>
        update_offset(output_buffer);
   16528:	4620      	mov	r0, r4
   1652a:	f017 fcaa 	bl	2de82 <update_offset>
        if (current_element->next)
   1652e:	6833      	ldr	r3, [r6, #0]
   16530:	b1bb      	cbz	r3, 16562 <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   16532:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   16534:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   16536:	2b00      	cmp	r3, #0
   16538:	bf14      	ite	ne
   1653a:	f04f 0902 	movne.w	r9, #2
   1653e:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   16542:	f109 0101 	add.w	r1, r9, #1
   16546:	f017 fcc5 	bl	2ded4 <ensure>
            if (output_pointer == NULL)
   1654a:	2800      	cmp	r0, #0
   1654c:	f43f af0c 	beq.w	16368 <print_value+0xc>
            *output_pointer++ = ',';
   16550:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   16552:	6963      	ldr	r3, [r4, #20]
   16554:	b93b      	cbnz	r3, 16566 <print_value+0x20a>
            *output_pointer++ = ',';
   16556:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   16558:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   1655c:	68a3      	ldr	r3, [r4, #8]
   1655e:	444b      	add	r3, r9
   16560:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   16562:	6836      	ldr	r6, [r6, #0]
   16564:	e73c      	b.n	163e0 <print_value+0x84>
                *output_pointer++ = ' ';
   16566:	1c83      	adds	r3, r0, #2
   16568:	7045      	strb	r5, [r0, #1]
   1656a:	e7f5      	b.n	16558 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   1656c:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   1656e:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   16570:	2b00      	cmp	r3, #0
   16572:	bf14      	ite	ne
   16574:	2702      	movne	r7, #2
   16576:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   16578:	4620      	mov	r0, r4
   1657a:	1c79      	adds	r1, r7, #1
   1657c:	f017 fcaa 	bl	2ded4 <ensure>
    if (output_pointer == NULL)
   16580:	2800      	cmp	r0, #0
   16582:	f43f aef1 	beq.w	16368 <print_value+0xc>
    *output_pointer++ = '{';
   16586:	237b      	movs	r3, #123	; 0x7b
   16588:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   1658a:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   1658c:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   1658e:	3201      	adds	r2, #1
   16590:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   16592:	b10b      	cbz	r3, 16598 <print_value+0x23c>
        *output_pointer++ = '\n';
   16594:	230a      	movs	r3, #10
   16596:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   16598:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   1659a:	2609      	movs	r6, #9
    output_buffer->offset += length;
   1659c:	443b      	add	r3, r7
        *output_pointer++ = ':';
   1659e:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   165a0:	60a3      	str	r3, [r4, #8]
    while (current_item)
   165a2:	6963      	ldr	r3, [r4, #20]
   165a4:	b995      	cbnz	r5, 165cc <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   165a6:	2b00      	cmp	r3, #0
   165a8:	d06f      	beq.n	1668a <print_value+0x32e>
   165aa:	68e1      	ldr	r1, [r4, #12]
   165ac:	3101      	adds	r1, #1
   165ae:	4620      	mov	r0, r4
   165b0:	f017 fc90 	bl	2ded4 <ensure>
    if (output_pointer == NULL)
   165b4:	2800      	cmp	r0, #0
   165b6:	f43f aed7 	beq.w	16368 <print_value+0xc>
    if (output_buffer->format)
   165ba:	6963      	ldr	r3, [r4, #20]
   165bc:	2b00      	cmp	r3, #0
   165be:	d16e      	bne.n	1669e <print_value+0x342>
   165c0:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   165c2:	227d      	movs	r2, #125	; 0x7d
   165c4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   165c6:	2200      	movs	r2, #0
   165c8:	705a      	strb	r2, [r3, #1]
   165ca:	e715      	b.n	163f8 <print_value+0x9c>
        if (output_buffer->format)
   165cc:	b173      	cbz	r3, 165ec <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   165ce:	4620      	mov	r0, r4
   165d0:	68e1      	ldr	r1, [r4, #12]
   165d2:	f017 fc7f 	bl	2ded4 <ensure>
            if (output_pointer == NULL)
   165d6:	2800      	cmp	r0, #0
   165d8:	f43f aec6 	beq.w	16368 <print_value+0xc>
   165dc:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   165de:	68e1      	ldr	r1, [r4, #12]
   165e0:	1a13      	subs	r3, r2, r0
   165e2:	428b      	cmp	r3, r1
   165e4:	d34e      	bcc.n	16684 <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   165e6:	68a3      	ldr	r3, [r4, #8]
   165e8:	440b      	add	r3, r1
   165ea:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   165ec:	4621      	mov	r1, r4
   165ee:	6a28      	ldr	r0, [r5, #32]
   165f0:	f7ff fe06 	bl	16200 <print_string_ptr>
   165f4:	2800      	cmp	r0, #0
   165f6:	f43f aeb7 	beq.w	16368 <print_value+0xc>
        update_offset(output_buffer);
   165fa:	4620      	mov	r0, r4
   165fc:	f017 fc41 	bl	2de82 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   16600:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   16602:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   16604:	2b00      	cmp	r3, #0
   16606:	bf14      	ite	ne
   16608:	f04f 0802 	movne.w	r8, #2
   1660c:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   16610:	4641      	mov	r1, r8
   16612:	f017 fc5f 	bl	2ded4 <ensure>
        if (output_pointer == NULL)
   16616:	2800      	cmp	r0, #0
   16618:	f43f aea6 	beq.w	16368 <print_value+0xc>
        *output_pointer++ = ':';
   1661c:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   1661e:	6963      	ldr	r3, [r4, #20]
   16620:	b103      	cbz	r3, 16624 <print_value+0x2c8>
            *output_pointer++ = '\t';
   16622:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   16624:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   16626:	4621      	mov	r1, r4
        output_buffer->offset += length;
   16628:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   1662a:	4628      	mov	r0, r5
        output_buffer->offset += length;
   1662c:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   1662e:	f7ff fe95 	bl	1635c <print_value>
   16632:	2800      	cmp	r0, #0
   16634:	f43f ae98 	beq.w	16368 <print_value+0xc>
        update_offset(output_buffer);
   16638:	4620      	mov	r0, r4
   1663a:	f017 fc22 	bl	2de82 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   1663e:	682b      	ldr	r3, [r5, #0]
   16640:	6962      	ldr	r2, [r4, #20]
   16642:	3b00      	subs	r3, #0
   16644:	bf18      	it	ne
   16646:	2301      	movne	r3, #1
   16648:	2a00      	cmp	r2, #0
   1664a:	bf0c      	ite	eq
   1664c:	4698      	moveq	r8, r3
   1664e:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   16652:	4620      	mov	r0, r4
   16654:	f108 0101 	add.w	r1, r8, #1
   16658:	f017 fc3c 	bl	2ded4 <ensure>
        if (output_pointer == NULL)
   1665c:	2800      	cmp	r0, #0
   1665e:	f43f ae83 	beq.w	16368 <print_value+0xc>
        if (current_item->next)
   16662:	682b      	ldr	r3, [r5, #0]
   16664:	b113      	cbz	r3, 1666c <print_value+0x310>
            *output_pointer++ = ',';
   16666:	232c      	movs	r3, #44	; 0x2c
   16668:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   1666c:	6963      	ldr	r3, [r4, #20]
   1666e:	b113      	cbz	r3, 16676 <print_value+0x31a>
            *output_pointer++ = '\n';
   16670:	230a      	movs	r3, #10
   16672:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   16676:	2300      	movs	r3, #0
   16678:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   1667a:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   1667c:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   1667e:	4443      	add	r3, r8
   16680:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   16682:	e78e      	b.n	165a2 <print_value+0x246>
                *output_pointer++ = '\t';
   16684:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   16688:	e7a9      	b.n	165de <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   1668a:	2102      	movs	r1, #2
   1668c:	e78f      	b.n	165ae <print_value+0x252>
            *output_pointer++ = '\t';
   1668e:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   16692:	68e2      	ldr	r2, [r4, #12]
   16694:	1a19      	subs	r1, r3, r0
   16696:	3a01      	subs	r2, #1
   16698:	4291      	cmp	r1, r2
   1669a:	d3f8      	bcc.n	1668e <print_value+0x332>
   1669c:	e791      	b.n	165c2 <print_value+0x266>
   1669e:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   166a0:	2509      	movs	r5, #9
   166a2:	e7f6      	b.n	16692 <print_value+0x336>
   166a4:	000316b5 	.word	0x000316b5
   166a8:	000316cc 	.word	0x000316cc
   166ac:	000316d2 	.word	0x000316d2
   166b0:	000316ba 	.word	0x000316ba
   166b4:	000316c1 	.word	0x000316c1
   166b8:	000316c5 	.word	0x000316c5

000166bc <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   166bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   166be:	4605      	mov	r5, r0
   166c0:	b180      	cbz	r0, 166e4 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   166c2:	f010 fac9 	bl	26c58 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   166c6:	4b08      	ldr	r3, [pc, #32]	; (166e8 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   166c8:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   166ca:	4610      	mov	r0, r2
   166cc:	681b      	ldr	r3, [r3, #0]
   166ce:	9201      	str	r2, [sp, #4]
   166d0:	4798      	blx	r3
    if (copy == NULL)
   166d2:	4604      	mov	r4, r0
   166d4:	b118      	cbz	r0, 166de <cJSON_strdup.isra.0.constprop.0+0x22>
   166d6:	4629      	mov	r1, r5
   166d8:	9a01      	ldr	r2, [sp, #4]
   166da:	f7f6 fa37 	bl	cb4c <memcpy>
}
   166de:	4620      	mov	r0, r4
   166e0:	b003      	add	sp, #12
   166e2:	bd30      	pop	{r4, r5, pc}
        return NULL;
   166e4:	4604      	mov	r4, r0
   166e6:	e7fa      	b.n	166de <cJSON_strdup.isra.0.constprop.0+0x22>
   166e8:	2002048c 	.word	0x2002048c

000166ec <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   166ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   166ee:	460d      	mov	r5, r1
   166f0:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   166f2:	4607      	mov	r7, r0
   166f4:	b1f0      	cbz	r0, 16734 <add_item_to_object.constprop.0+0x48>
   166f6:	b1e9      	cbz	r1, 16734 <add_item_to_object.constprop.0+0x48>
   166f8:	b1e2      	cbz	r2, 16734 <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   166fa:	b193      	cbz	r3, 16722 <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   166fc:	68d6      	ldr	r6, [r2, #12]
   166fe:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   16702:	68e3      	ldr	r3, [r4, #12]
   16704:	059b      	lsls	r3, r3, #22
   16706:	d404      	bmi.n	16712 <add_item_to_object.constprop.0+0x26>
   16708:	6a20      	ldr	r0, [r4, #32]
   1670a:	b110      	cbz	r0, 16712 <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   1670c:	4b0a      	ldr	r3, [pc, #40]	; (16738 <add_item_to_object.constprop.0+0x4c>)
   1670e:	685b      	ldr	r3, [r3, #4]
   16710:	4798      	blx	r3
    }

    item->string = new_key;
    item->type = new_type;

    return add_item_to_array(object, item);
   16712:	4621      	mov	r1, r4
   16714:	4638      	mov	r0, r7
    item->string = new_key;
   16716:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   16718:	60e6      	str	r6, [r4, #12]
}
   1671a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   1671e:	f017 bbbd 	b.w	2de9c <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   16722:	4608      	mov	r0, r1
   16724:	f7ff ffca 	bl	166bc <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   16728:	4605      	mov	r5, r0
   1672a:	b118      	cbz	r0, 16734 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   1672c:	68e6      	ldr	r6, [r4, #12]
   1672e:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   16732:	e7e6      	b.n	16702 <add_item_to_object.constprop.0+0x16>
}
   16734:	2000      	movs	r0, #0
   16736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16738:	2002048c 	.word	0x2002048c

0001673c <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   1673c:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1673e:	4d24      	ldr	r5, [pc, #144]	; (167d0 <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   16740:	b08b      	sub	sp, #44	; 0x2c
   16742:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   16744:	2224      	movs	r2, #36	; 0x24
   16746:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   16748:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   1674a:	a801      	add	r0, sp, #4
   1674c:	f00f fe74 	bl	26438 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   16750:	682b      	ldr	r3, [r5, #0]
   16752:	f44f 7080 	mov.w	r0, #256	; 0x100
   16756:	4798      	blx	r3
    buffer->length = default_buffer_size;
   16758:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1675c:	4603      	mov	r3, r0
    buffer->format = format;
   1675e:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   16760:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   16762:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   16764:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   16766:	462f      	mov	r7, r5
   16768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1676c:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   16770:	b17b      	cbz	r3, 16792 <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   16772:	4620      	mov	r0, r4
   16774:	a901      	add	r1, sp, #4
   16776:	f7ff fdf1 	bl	1635c <print_value>
   1677a:	b150      	cbz	r0, 16792 <print.constprop.0+0x56>
    update_offset(buffer);
   1677c:	a801      	add	r0, sp, #4
   1677e:	f017 fb80 	bl	2de82 <update_offset>
    if (hooks->reallocate != NULL)
   16782:	68ae      	ldr	r6, [r5, #8]
   16784:	9903      	ldr	r1, [sp, #12]
   16786:	b15e      	cbz	r6, 167a0 <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   16788:	9801      	ldr	r0, [sp, #4]
   1678a:	3101      	adds	r1, #1
   1678c:	47b0      	blx	r6
        if (printed == NULL) {
   1678e:	4604      	mov	r4, r0
   16790:	b9d0      	cbnz	r0, 167c8 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   16792:	9c01      	ldr	r4, [sp, #4]
   16794:	b1c4      	cbz	r4, 167c8 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   16796:	4620      	mov	r0, r4
   16798:	687b      	ldr	r3, [r7, #4]
   1679a:	4798      	blx	r3
    return NULL;
   1679c:	2400      	movs	r4, #0
   1679e:	e013      	b.n	167c8 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   167a0:	682b      	ldr	r3, [r5, #0]
   167a2:	1c48      	adds	r0, r1, #1
   167a4:	4798      	blx	r3
        if (printed == NULL)
   167a6:	4604      	mov	r4, r0
   167a8:	2800      	cmp	r0, #0
   167aa:	d0f2      	beq.n	16792 <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   167ac:	9a03      	ldr	r2, [sp, #12]
   167ae:	9b02      	ldr	r3, [sp, #8]
   167b0:	3201      	adds	r2, #1
   167b2:	429a      	cmp	r2, r3
   167b4:	bf28      	it	cs
   167b6:	461a      	movcs	r2, r3
   167b8:	9901      	ldr	r1, [sp, #4]
   167ba:	f7f6 f9c7 	bl	cb4c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   167be:	9b03      	ldr	r3, [sp, #12]
   167c0:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   167c2:	686b      	ldr	r3, [r5, #4]
   167c4:	9801      	ldr	r0, [sp, #4]
   167c6:	4798      	blx	r3
}
   167c8:	4620      	mov	r0, r4
   167ca:	b00b      	add	sp, #44	; 0x2c
   167cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167ce:	bf00      	nop
   167d0:	2002048c 	.word	0x2002048c

000167d4 <cJSON_Delete>:
{
   167d4:	b570      	push	{r4, r5, r6, lr}
   167d6:	4604      	mov	r4, r0
   167d8:	4d0f      	ldr	r5, [pc, #60]	; (16818 <cJSON_Delete+0x44>)
    while (item != NULL)
   167da:	b904      	cbnz	r4, 167de <cJSON_Delete+0xa>
}
   167dc:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   167de:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   167e0:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   167e2:	05d9      	lsls	r1, r3, #23
   167e4:	d403      	bmi.n	167ee <cJSON_Delete+0x1a>
   167e6:	68a0      	ldr	r0, [r4, #8]
   167e8:	b968      	cbnz	r0, 16806 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   167ea:	6920      	ldr	r0, [r4, #16]
   167ec:	b988      	cbnz	r0, 16812 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   167ee:	68e3      	ldr	r3, [r4, #12]
   167f0:	059b      	lsls	r3, r3, #22
   167f2:	d403      	bmi.n	167fc <cJSON_Delete+0x28>
   167f4:	6a20      	ldr	r0, [r4, #32]
   167f6:	b108      	cbz	r0, 167fc <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   167f8:	686b      	ldr	r3, [r5, #4]
   167fa:	4798      	blx	r3
        global_hooks.deallocate(item);
   167fc:	4620      	mov	r0, r4
   167fe:	686b      	ldr	r3, [r5, #4]
   16800:	4798      	blx	r3
        item = next;
   16802:	4634      	mov	r4, r6
   16804:	e7e9      	b.n	167da <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   16806:	f7ff ffe5 	bl	167d4 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   1680a:	68e3      	ldr	r3, [r4, #12]
   1680c:	05da      	lsls	r2, r3, #23
   1680e:	d5ec      	bpl.n	167ea <cJSON_Delete+0x16>
   16810:	e7ed      	b.n	167ee <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   16812:	686b      	ldr	r3, [r5, #4]
   16814:	4798      	blx	r3
   16816:	e7ea      	b.n	167ee <cJSON_Delete+0x1a>
   16818:	2002048c 	.word	0x2002048c

0001681c <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   1681c:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1681e:	4b0a      	ldr	r3, [pc, #40]	; (16848 <cJSON_CreateString+0x2c>)
{
   16820:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   16822:	6818      	ldr	r0, [r3, #0]
   16824:	f017 fb4a 	bl	2debc <cJSON_New_Item.isra.0>
    if(item)
   16828:	4604      	mov	r4, r0
   1682a:	b158      	cbz	r0, 16844 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   1682c:	2310      	movs	r3, #16
   1682e:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   16830:	4628      	mov	r0, r5
   16832:	f7ff ff43 	bl	166bc <cJSON_strdup.isra.0.constprop.0>
   16836:	4605      	mov	r5, r0
   16838:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   1683a:	b918      	cbnz	r0, 16844 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   1683c:	4620      	mov	r0, r4
   1683e:	f7ff ffc9 	bl	167d4 <cJSON_Delete>
            return NULL;
   16842:	462c      	mov	r4, r5
        }
    }

    return item;
}
   16844:	4620      	mov	r0, r4
   16846:	bd38      	pop	{r3, r4, r5, pc}
   16848:	2002048c 	.word	0x2002048c

0001684c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   1684c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1684e:	4b04      	ldr	r3, [pc, #16]	; (16860 <cJSON_CreateObject+0x14>)
   16850:	6818      	ldr	r0, [r3, #0]
   16852:	f017 fb33 	bl	2debc <cJSON_New_Item.isra.0>
    if (item)
   16856:	b108      	cbz	r0, 1685c <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   16858:	2340      	movs	r3, #64	; 0x40
   1685a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   1685c:	bd08      	pop	{r3, pc}
   1685e:	bf00      	nop
   16860:	2002048c 	.word	0x2002048c

00016864 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   16864:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   16866:	4d1c      	ldr	r5, [pc, #112]	; (168d8 <_bsdlib_init+0x74>)
   16868:	4c1c      	ldr	r4, [pc, #112]	; (168dc <_bsdlib_init+0x78>)
   1686a:	782b      	ldrb	r3, [r5, #0]
{
   1686c:	b085      	sub	sp, #20
	if (!first_time_init) {
   1686e:	b933      	cbnz	r3, 1687e <_bsdlib_init+0x1a>
	list->tail = NULL;
   16870:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   16874:	481a      	ldr	r0, [pc, #104]	; (168e0 <_bsdlib_init+0x7c>)
   16876:	f018 f8a1 	bl	2e9bc <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1687a:	2301      	movs	r3, #1
   1687c:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1687e:	2200      	movs	r2, #0
   16880:	202a      	movs	r0, #42	; 0x2a
   16882:	4611      	mov	r1, r2
   16884:	f7fd ff04 	bl	14690 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   16888:	4a16      	ldr	r2, [pc, #88]	; (168e4 <_bsdlib_init+0x80>)
   1688a:	ab01      	add	r3, sp, #4
   1688c:	ca07      	ldmia	r2, {r0, r1, r2}
   1688e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   16892:	4618      	mov	r0, r3
   16894:	f009 faa0 	bl	1fdd8 <bsd_init>
   16898:	4b13      	ldr	r3, [pc, #76]	; (168e8 <_bsdlib_init+0x84>)
   1689a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1689c:	f04f 32ff 	mov.w	r2, #4294967295
   168a0:	f04f 33ff 	mov.w	r3, #4294967295
   168a4:	480e      	ldr	r0, [pc, #56]	; (168e0 <_bsdlib_init+0x7c>)
   168a6:	f00c fbb3 	bl	23010 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   168aa:	6820      	ldr	r0, [r4, #0]
   168ac:	b170      	cbz	r0, 168cc <_bsdlib_init+0x68>
	return node->next;
   168ae:	6804      	ldr	r4, [r0, #0]
   168b0:	2c00      	cmp	r4, #0
   168b2:	bf38      	it	cc
   168b4:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   168b6:	3004      	adds	r0, #4
   168b8:	f00e f824 	bl	24904 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   168bc:	b134      	cbz	r4, 168cc <_bsdlib_init+0x68>
   168be:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   168c0:	4620      	mov	r0, r4
   168c2:	2b00      	cmp	r3, #0
   168c4:	bf38      	it	cc
   168c6:	2300      	movcc	r3, #0
   168c8:	461c      	mov	r4, r3
   168ca:	e7f4      	b.n	168b6 <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   168cc:	4804      	ldr	r0, [pc, #16]	; (168e0 <_bsdlib_init+0x7c>)
   168ce:	f00c fc99 	bl	23204 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   168d2:	2000      	movs	r0, #0
   168d4:	b005      	add	sp, #20
   168d6:	bd30      	pop	{r4, r5, pc}
   168d8:	2002477c 	.word	0x2002477c
   168dc:	2002161c 	.word	0x2002161c
   168e0:	20021624 	.word	0x20021624
   168e4:	0002f110 	.word	0x0002f110
   168e8:	20021618 	.word	0x20021618

000168ec <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   168ec:	b530      	push	{r4, r5, lr}
   168ee:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   168f0:	2201      	movs	r2, #1
   168f2:	2100      	movs	r1, #0
   168f4:	a802      	add	r0, sp, #8
   168f6:	f018 f8ce 	bl	2ea96 <z_impl_k_sem_init>
   168fa:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   168fc:	f04f 33ff 	mov.w	r3, #4294967295
   16900:	f04f 32ff 	mov.w	r2, #4294967295
   16904:	481c      	ldr	r0, [pc, #112]	; (16978 <bsdlib_shutdown_wait+0x8c>)
   16906:	f00c fb83 	bl	23010 <z_impl_k_mutex_lock>
	parent->next = child;
   1690a:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   1690c:	4c1b      	ldr	r4, [pc, #108]	; (1697c <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   1690e:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   16910:	6863      	ldr	r3, [r4, #4]
   16912:	bb2b      	cbnz	r3, 16960 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   16914:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   16918:	4817      	ldr	r0, [pc, #92]	; (16978 <bsdlib_shutdown_wait+0x8c>)
   1691a:	f00c fc73 	bl	23204 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1691e:	f04f 32ff 	mov.w	r2, #4294967295
   16922:	f04f 33ff 	mov.w	r3, #4294967295
   16926:	a802      	add	r0, sp, #8
   16928:	f00e f830 	bl	2498c <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   1692c:	f04f 32ff 	mov.w	r2, #4294967295
   16930:	f04f 33ff 	mov.w	r3, #4294967295
   16934:	4810      	ldr	r0, [pc, #64]	; (16978 <bsdlib_shutdown_wait+0x8c>)
   16936:	f00c fb6b 	bl	23010 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1693a:	2200      	movs	r2, #0
   1693c:	6823      	ldr	r3, [r4, #0]
   1693e:	b153      	cbz	r3, 16956 <bsdlib_shutdown_wait+0x6a>
   16940:	42ab      	cmp	r3, r5
   16942:	d116      	bne.n	16972 <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   16944:	9901      	ldr	r1, [sp, #4]
   16946:	b972      	cbnz	r2, 16966 <bsdlib_shutdown_wait+0x7a>
   16948:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1694a:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1694c:	429a      	cmp	r2, r3
   1694e:	d100      	bne.n	16952 <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   16950:	6061      	str	r1, [r4, #4]
	parent->next = child;
   16952:	2300      	movs	r3, #0
   16954:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   16956:	4808      	ldr	r0, [pc, #32]	; (16978 <bsdlib_shutdown_wait+0x8c>)
   16958:	f00c fc54 	bl	23204 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   1695c:	b009      	add	sp, #36	; 0x24
   1695e:	bd30      	pop	{r4, r5, pc}
   16960:	601d      	str	r5, [r3, #0]
	list->tail = node;
   16962:	6065      	str	r5, [r4, #4]
}
   16964:	e7d8      	b.n	16918 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   16966:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   16968:	6861      	ldr	r1, [r4, #4]
   1696a:	4299      	cmp	r1, r3
	list->tail = node;
   1696c:	bf08      	it	eq
   1696e:	6062      	streq	r2, [r4, #4]
}
   16970:	e7ef      	b.n	16952 <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16972:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16974:	681b      	ldr	r3, [r3, #0]
   16976:	e7e2      	b.n	1693e <bsdlib_shutdown_wait+0x52>
   16978:	20021624 	.word	0x20021624
   1697c:	2002161c 	.word	0x2002161c

00016980 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   16980:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   16982:	4c0d      	ldr	r4, [pc, #52]	; (169b8 <thread_monitor_entry_get+0x38>)
{
   16984:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   16986:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   16988:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1698a:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   1698c:	4b0b      	ldr	r3, [pc, #44]	; (169bc <thread_monitor_entry_get+0x3c>)
   1698e:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   16990:	6801      	ldr	r1, [r0, #0]
   16992:	4291      	cmp	r1, r2
   16994:	d00e      	beq.n	169b4 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   16996:	b151      	cbz	r1, 169ae <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   16998:	6841      	ldr	r1, [r0, #4]
   1699a:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   1699c:	42b1      	cmp	r1, r6
   1699e:	bfc4      	itt	gt
   169a0:	4604      	movgt	r4, r0
   169a2:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   169a4:	3d01      	subs	r5, #1
   169a6:	f100 0008 	add.w	r0, r0, #8
   169aa:	d1f1      	bne.n	16990 <thread_monitor_entry_get+0x10>
   169ac:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   169ae:	3b01      	subs	r3, #1
	new_entry->id = id;
   169b0:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   169b2:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   169b4:	bd70      	pop	{r4, r5, r6, pc}
   169b6:	bf00      	nop
   169b8:	20021644 	.word	0x20021644
   169bc:	20021638 	.word	0x20021638

000169c0 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   169c0:	4668      	mov	r0, sp
   169c2:	f020 0107 	bic.w	r1, r0, #7
   169c6:	468d      	mov	sp, r1
   169c8:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   169ca:	4b0f      	ldr	r3, [pc, #60]	; (16a08 <rpc_proxy_irq_handler+0x48>)
   169cc:	e8d3 2fef 	ldaex	r2, [r3]
   169d0:	3201      	adds	r2, #1
   169d2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   169d6:	2900      	cmp	r1, #0
   169d8:	d1f8      	bne.n	169cc <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   169da:	f003 fe5f 	bl	1a69c <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   169de:	4b0b      	ldr	r3, [pc, #44]	; (16a0c <rpc_proxy_irq_handler+0x4c>)
   169e0:	681c      	ldr	r4, [r3, #0]
   169e2:	2c00      	cmp	r4, #0
   169e4:	bf38      	it	cc
   169e6:	2400      	movcc	r4, #0
   169e8:	b12c      	cbz	r4, 169f6 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   169ea:	1d20      	adds	r0, r4, #4
   169ec:	f00d ff8a 	bl	24904 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   169f0:	6824      	ldr	r4, [r4, #0]
   169f2:	2c00      	cmp	r4, #0
   169f4:	d1f8      	bne.n	169e8 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   169f6:	f7fd fe7d 	bl	146f4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   169fa:	f7fe fa23 	bl	14e44 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   169fe:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   16a02:	4685      	mov	sp, r0
   16a04:	4770      	bx	lr
   16a06:	bf00      	nop
   16a08:	20021638 	.word	0x20021638
   16a0c:	2002163c 	.word	0x2002163c

00016a10 <bsd_os_timedwait>:
{
   16a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a14:	460c      	mov	r4, r1
   16a16:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   16a18:	f018 f8c2 	bl	2eba0 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   16a1c:	6823      	ldr	r3, [r4, #0]
   16a1e:	4680      	mov	r8, r0
   16a20:	2b00      	cmp	r3, #0
   16a22:	468a      	mov	sl, r1
   16a24:	d103      	bne.n	16a2e <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   16a26:	f00d fde9 	bl	245fc <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   16a2a:	203c      	movs	r0, #60	; 0x3c
   16a2c:	e091      	b.n	16b52 <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   16a2e:	bfbc      	itt	lt
   16a30:	f04f 33ff 	movlt.w	r3, #4294967295
   16a34:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16a36:	2201      	movs	r2, #1
   16a38:	2100      	movs	r1, #0
   16a3a:	a802      	add	r0, sp, #8
   16a3c:	f018 f82b 	bl	2ea96 <z_impl_k_sem_init>
   16a40:	ad01      	add	r5, sp, #4
   16a42:	f04f 0320 	mov.w	r3, #32
   16a46:	f3ef 8b11 	mrs	fp, BASEPRI
   16a4a:	f383 8811 	msr	BASEPRI, r3
   16a4e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   16a52:	f00d ff51 	bl	248f8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   16a56:	f7ff ff93 	bl	16980 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   16a5a:	4947      	ldr	r1, [pc, #284]	; (16b78 <bsd_os_timedwait+0x168>)
   16a5c:	6843      	ldr	r3, [r0, #4]
   16a5e:	680a      	ldr	r2, [r1, #0]
   16a60:	4689      	mov	r9, r1
   16a62:	4293      	cmp	r3, r2
   16a64:	f04f 0300 	mov.w	r3, #0
   16a68:	d108      	bne.n	16a7c <bsd_os_timedwait+0x6c>
	parent->next = child;
   16a6a:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   16a6c:	4b43      	ldr	r3, [pc, #268]	; (16b7c <bsd_os_timedwait+0x16c>)
   16a6e:	685a      	ldr	r2, [r3, #4]
   16a70:	2a00      	cmp	r2, #0
   16a72:	d171      	bne.n	16b58 <bsd_os_timedwait+0x148>
	list->head = node;
   16a74:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   16a78:	2301      	movs	r3, #1
}
   16a7a:	e000      	b.n	16a7e <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   16a7c:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   16a7e:	f38b 8811 	msr	BASEPRI, fp
   16a82:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   16a86:	2b00      	cmp	r3, #0
   16a88:	d062      	beq.n	16b50 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   16a8a:	6823      	ldr	r3, [r4, #0]
   16a8c:	1c5a      	adds	r2, r3, #1
   16a8e:	d066      	beq.n	16b5e <bsd_os_timedwait+0x14e>
   16a90:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   16a94:	f240 30e7 	movw	r0, #999	; 0x3e7
   16a98:	2100      	movs	r1, #0
   16a9a:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   16a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16aa2:	2300      	movs	r3, #0
   16aa4:	fbce 010c 	smlal	r0, r1, lr, ip
   16aa8:	f7f5 fed6 	bl	c858 <__aeabi_uldivmod>
   16aac:	4602      	mov	r2, r0
   16aae:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   16ab0:	a802      	add	r0, sp, #8
   16ab2:	f00d ff6b 	bl	2498c <z_impl_k_sem_take>
	__asm__ volatile(
   16ab6:	f04f 0320 	mov.w	r3, #32
   16aba:	f3ef 8b11 	mrs	fp, BASEPRI
   16abe:	f383 8811 	msr	BASEPRI, r3
   16ac2:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16ac6:	2000      	movs	r0, #0
   16ac8:	4b2c      	ldr	r3, [pc, #176]	; (16b7c <bsd_os_timedwait+0x16c>)
   16aca:	681a      	ldr	r2, [r3, #0]
   16acc:	b15a      	cbz	r2, 16ae6 <bsd_os_timedwait+0xd6>
   16ace:	42aa      	cmp	r2, r5
   16ad0:	d14f      	bne.n	16b72 <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   16ad2:	9d01      	ldr	r5, [sp, #4]
   16ad4:	2800      	cmp	r0, #0
   16ad6:	d146      	bne.n	16b66 <bsd_os_timedwait+0x156>
   16ad8:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   16ada:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   16adc:	4291      	cmp	r1, r2
   16ade:	d100      	bne.n	16ae2 <bsd_os_timedwait+0xd2>
	list->tail = node;
   16ae0:	605d      	str	r5, [r3, #4]
	parent->next = child;
   16ae2:	2300      	movs	r3, #0
   16ae4:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   16ae6:	f00d ff07 	bl	248f8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   16aea:	f7ff ff49 	bl	16980 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   16aee:	f8d9 3000 	ldr.w	r3, [r9]
   16af2:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   16af4:	f38b 8811 	msr	BASEPRI, fp
   16af8:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   16afc:	6825      	ldr	r5, [r4, #0]
   16afe:	1c6b      	adds	r3, r5, #1
   16b00:	d026      	beq.n	16b50 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   16b02:	f018 f84d 	bl	2eba0 <z_impl_k_uptime_ticks>
   16b06:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   16b0a:	468e      	mov	lr, r1
   16b0c:	fba8 890c 	umull	r8, r9, r8, ip
   16b10:	fba0 010c 	umull	r0, r1, r0, ip
   16b14:	fb0c 990a 	mla	r9, ip, sl, r9
   16b18:	fb0c 110e 	mla	r1, ip, lr, r1
   16b1c:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   16b20:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   16b24:	1952      	adds	r2, r2, r5
   16b26:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   16b2a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   16b2e:	0bc5      	lsrs	r5, r0, #15
   16b30:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   16b34:	1b56      	subs	r6, r2, r5
   16b36:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   16b3a:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   16b3e:	2e00      	cmp	r6, #0
   16b40:	f177 0300 	sbcs.w	r3, r7, #0
   16b44:	bfb8      	it	lt
   16b46:	2600      	movlt	r6, #0
   16b48:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   16b4a:	2e00      	cmp	r6, #0
   16b4c:	f43f af6d 	beq.w	16a2a <bsd_os_timedwait+0x1a>
	return 0;
   16b50:	2000      	movs	r0, #0
}
   16b52:	b009      	add	sp, #36	; 0x24
   16b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b58:	6015      	str	r5, [r2, #0]
	list->tail = node;
   16b5a:	605d      	str	r5, [r3, #4]
   16b5c:	e78c      	b.n	16a78 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   16b5e:	f04f 32ff 	mov.w	r2, #4294967295
   16b62:	4613      	mov	r3, r2
   16b64:	e7a4      	b.n	16ab0 <bsd_os_timedwait+0xa0>
	parent->next = child;
   16b66:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   16b68:	6859      	ldr	r1, [r3, #4]
   16b6a:	4291      	cmp	r1, r2
	list->tail = node;
   16b6c:	bf08      	it	eq
   16b6e:	6058      	streq	r0, [r3, #4]
}
   16b70:	e7b7      	b.n	16ae2 <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16b72:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16b74:	6812      	ldr	r2, [r2, #0]
   16b76:	e7a9      	b.n	16acc <bsd_os_timedwait+0xbc>
   16b78:	20021638 	.word	0x20021638
   16b7c:	2002163c 	.word	0x2002163c

00016b80 <bsd_os_errno_set>:
	switch (err_code) {
   16b80:	283c      	cmp	r0, #60	; 0x3c
{
   16b82:	b510      	push	{r4, lr}
   16b84:	4604      	mov	r4, r0
	switch (err_code) {
   16b86:	f300 809f 	bgt.w	16cc8 <bsd_os_errno_set+0x148>
   16b8a:	2800      	cmp	r0, #0
   16b8c:	dc1e      	bgt.n	16bcc <bsd_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   16b8e:	f240 134d 	movw	r3, #333	; 0x14d
   16b92:	4ab9      	ldr	r2, [pc, #740]	; (16e78 <bsd_os_errno_set+0x2f8>)
   16b94:	49b9      	ldr	r1, [pc, #740]	; (16e7c <bsd_os_errno_set+0x2fc>)
   16b96:	48ba      	ldr	r0, [pc, #744]	; (16e80 <bsd_os_errno_set+0x300>)
   16b98:	f015 fc6b 	bl	2c472 <printk>
   16b9c:	4621      	mov	r1, r4
   16b9e:	48b9      	ldr	r0, [pc, #740]	; (16e84 <bsd_os_errno_set+0x304>)
   16ba0:	f015 fc67 	bl	2c472 <printk>
   16ba4:	f240 114d 	movw	r1, #333	; 0x14d
   16ba8:	48b3      	ldr	r0, [pc, #716]	; (16e78 <bsd_os_errno_set+0x2f8>)
   16baa:	f015 fe7f 	bl	2c8ac <assert_post_action>
   16bae:	4bb6      	ldr	r3, [pc, #728]	; (16e88 <bsd_os_errno_set+0x308>)
   16bb0:	4ab6      	ldr	r2, [pc, #728]	; (16e8c <bsd_os_errno_set+0x30c>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   16bb2:	4621      	mov	r1, r4
   16bb4:	1ad2      	subs	r2, r2, r3
   16bb6:	08d2      	lsrs	r2, r2, #3
   16bb8:	0192      	lsls	r2, r2, #6
   16bba:	48b5      	ldr	r0, [pc, #724]	; (16e90 <bsd_os_errno_set+0x310>)
   16bbc:	f042 0201 	orr.w	r2, r2, #1
   16bc0:	f015 feb3 	bl	2c92a <log_1>
		errno = 0xBAADBAAD;
   16bc4:	f016 faa3 	bl	2d10e <__errno>
   16bc8:	4bb2      	ldr	r3, [pc, #712]	; (16e94 <bsd_os_errno_set+0x314>)
   16bca:	e0be      	b.n	16d4a <bsd_os_errno_set+0x1ca>
   16bcc:	1e43      	subs	r3, r0, #1
   16bce:	2b3b      	cmp	r3, #59	; 0x3b
   16bd0:	d8dd      	bhi.n	16b8e <bsd_os_errno_set+0xe>
   16bd2:	a201      	add	r2, pc, #4	; (adr r2, 16bd8 <bsd_os_errno_set+0x58>)
   16bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16bd8:	00016d45 	.word	0x00016d45
   16bdc:	00016d4f 	.word	0x00016d4f
   16be0:	00016b8f 	.word	0x00016b8f
   16be4:	00016b8f 	.word	0x00016b8f
   16be8:	00016d57 	.word	0x00016d57
   16bec:	00016b8f 	.word	0x00016b8f
   16bf0:	00016b8f 	.word	0x00016b8f
   16bf4:	00016d5f 	.word	0x00016d5f
   16bf8:	00016d67 	.word	0x00016d67
   16bfc:	00016b8f 	.word	0x00016b8f
   16c00:	00016b8f 	.word	0x00016b8f
   16c04:	00016d6f 	.word	0x00016d6f
   16c08:	00016d77 	.word	0x00016d77
   16c0c:	00016d7f 	.word	0x00016d7f
   16c10:	00016b8f 	.word	0x00016b8f
   16c14:	00016b8f 	.word	0x00016b8f
   16c18:	00016b8f 	.word	0x00016b8f
   16c1c:	00016b8f 	.word	0x00016b8f
   16c20:	00016b8f 	.word	0x00016b8f
   16c24:	00016b8f 	.word	0x00016b8f
   16c28:	00016b8f 	.word	0x00016b8f
   16c2c:	00016d87 	.word	0x00016d87
   16c30:	00016b8f 	.word	0x00016b8f
   16c34:	00016d8f 	.word	0x00016d8f
   16c38:	00016b8f 	.word	0x00016b8f
   16c3c:	00016b8f 	.word	0x00016b8f
   16c40:	00016b8f 	.word	0x00016b8f
   16c44:	00016b8f 	.word	0x00016b8f
   16c48:	00016b8f 	.word	0x00016b8f
   16c4c:	00016b8f 	.word	0x00016b8f
   16c50:	00016b8f 	.word	0x00016b8f
   16c54:	00016b8f 	.word	0x00016b8f
   16c58:	00016b8f 	.word	0x00016b8f
   16c5c:	00016b8f 	.word	0x00016b8f
   16c60:	00016d97 	.word	0x00016d97
   16c64:	00016b8f 	.word	0x00016b8f
   16c68:	00016d9f 	.word	0x00016d9f
   16c6c:	00016b8f 	.word	0x00016b8f
   16c70:	00016b8f 	.word	0x00016b8f
   16c74:	00016e67 	.word	0x00016e67
   16c78:	00016da7 	.word	0x00016da7
   16c7c:	00016daf 	.word	0x00016daf
   16c80:	00016db7 	.word	0x00016db7
   16c84:	00016dbf 	.word	0x00016dbf
   16c88:	00016dc7 	.word	0x00016dc7
   16c8c:	00016b8f 	.word	0x00016b8f
   16c90:	00016dcf 	.word	0x00016dcf
   16c94:	00016dd7 	.word	0x00016dd7
   16c98:	00016b8f 	.word	0x00016b8f
   16c9c:	00016ddf 	.word	0x00016ddf
   16ca0:	00016de7 	.word	0x00016de7
   16ca4:	00016def 	.word	0x00016def
   16ca8:	00016e6f 	.word	0x00016e6f
   16cac:	00016df7 	.word	0x00016df7
   16cb0:	00016b8f 	.word	0x00016b8f
   16cb4:	00016dff 	.word	0x00016dff
   16cb8:	00016e07 	.word	0x00016e07
   16cbc:	00016b8f 	.word	0x00016b8f
   16cc0:	00016b8f 	.word	0x00016b8f
   16cc4:	00016e0f 	.word	0x00016e0f
	switch (err_code) {
   16cc8:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   16ccc:	2b18      	cmp	r3, #24
   16cce:	f63f af5e 	bhi.w	16b8e <bsd_os_errno_set+0xe>
   16cd2:	2b18      	cmp	r3, #24
   16cd4:	f63f af5b 	bhi.w	16b8e <bsd_os_errno_set+0xe>
   16cd8:	a201      	add	r2, pc, #4	; (adr r2, 16ce0 <bsd_os_errno_set+0x160>)
   16cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16cde:	bf00      	nop
   16ce0:	00016e17 	.word	0x00016e17
   16ce4:	00016b8f 	.word	0x00016b8f
   16ce8:	00016b8f 	.word	0x00016b8f
   16cec:	00016b8f 	.word	0x00016b8f
   16cf0:	00016b8f 	.word	0x00016b8f
   16cf4:	00016b8f 	.word	0x00016b8f
   16cf8:	00016b8f 	.word	0x00016b8f
   16cfc:	00016e1f 	.word	0x00016e1f
   16d00:	00016b8f 	.word	0x00016b8f
   16d04:	00016e2f 	.word	0x00016e2f
   16d08:	00016e27 	.word	0x00016e27
   16d0c:	00016b8f 	.word	0x00016b8f
   16d10:	00016b8f 	.word	0x00016b8f
   16d14:	00016b8f 	.word	0x00016b8f
   16d18:	00016b8f 	.word	0x00016b8f
   16d1c:	00016b8f 	.word	0x00016b8f
   16d20:	00016b8f 	.word	0x00016b8f
   16d24:	00016b8f 	.word	0x00016b8f
   16d28:	00016b8f 	.word	0x00016b8f
   16d2c:	00016b8f 	.word	0x00016b8f
   16d30:	00016e37 	.word	0x00016e37
   16d34:	00016e3f 	.word	0x00016e3f
   16d38:	00016e49 	.word	0x00016e49
   16d3c:	00016e53 	.word	0x00016e53
   16d40:	00016e5d 	.word	0x00016e5d
		errno = EPERM;
   16d44:	f016 f9e3 	bl	2d10e <__errno>
   16d48:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   16d4a:	6003      	str	r3, [r0, #0]
}
   16d4c:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   16d4e:	f016 f9de 	bl	2d10e <__errno>
   16d52:	2302      	movs	r3, #2
   16d54:	e7f9      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EIO;
   16d56:	f016 f9da 	bl	2d10e <__errno>
   16d5a:	2305      	movs	r3, #5
   16d5c:	e7f5      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENOEXEC;
   16d5e:	f016 f9d6 	bl	2d10e <__errno>
   16d62:	2308      	movs	r3, #8
   16d64:	e7f1      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EBADF;
   16d66:	f016 f9d2 	bl	2d10e <__errno>
   16d6a:	2309      	movs	r3, #9
   16d6c:	e7ed      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENOMEM;
   16d6e:	f016 f9ce 	bl	2d10e <__errno>
   16d72:	230c      	movs	r3, #12
   16d74:	e7e9      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EACCES;
   16d76:	f016 f9ca 	bl	2d10e <__errno>
   16d7a:	230d      	movs	r3, #13
   16d7c:	e7e5      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EFAULT;
   16d7e:	f016 f9c6 	bl	2d10e <__errno>
   16d82:	230e      	movs	r3, #14
   16d84:	e7e1      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EINVAL;
   16d86:	f016 f9c2 	bl	2d10e <__errno>
   16d8a:	2316      	movs	r3, #22
   16d8c:	e7dd      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EMFILE;
   16d8e:	f016 f9be 	bl	2d10e <__errno>
   16d92:	2318      	movs	r3, #24
   16d94:	e7d9      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EAGAIN;
   16d96:	f016 f9ba 	bl	2d10e <__errno>
   16d9a:	230b      	movs	r3, #11
   16d9c:	e7d5      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EDOM;
   16d9e:	f016 f9b6 	bl	2d10e <__errno>
   16da2:	2321      	movs	r3, #33	; 0x21
   16da4:	e7d1      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EPROTOTYPE;
   16da6:	f016 f9b2 	bl	2d10e <__errno>
   16daa:	236b      	movs	r3, #107	; 0x6b
   16dac:	e7cd      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENOPROTOOPT;
   16dae:	f016 f9ae 	bl	2d10e <__errno>
   16db2:	236d      	movs	r3, #109	; 0x6d
   16db4:	e7c9      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EPROTONOSUPPORT;
   16db6:	f016 f9aa 	bl	2d10e <__errno>
   16dba:	237b      	movs	r3, #123	; 0x7b
   16dbc:	e7c5      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ESOCKTNOSUPPORT;
   16dbe:	f016 f9a6 	bl	2d10e <__errno>
   16dc2:	237c      	movs	r3, #124	; 0x7c
   16dc4:	e7c1      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EOPNOTSUPP;
   16dc6:	f016 f9a2 	bl	2d10e <__errno>
   16dca:	235f      	movs	r3, #95	; 0x5f
   16dcc:	e7bd      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EAFNOSUPPORT;
   16dce:	f016 f99e 	bl	2d10e <__errno>
   16dd2:	236a      	movs	r3, #106	; 0x6a
   16dd4:	e7b9      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EADDRINUSE;
   16dd6:	f016 f99a 	bl	2d10e <__errno>
   16dda:	2370      	movs	r3, #112	; 0x70
   16ddc:	e7b5      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENETDOWN;
   16dde:	f016 f996 	bl	2d10e <__errno>
   16de2:	2373      	movs	r3, #115	; 0x73
   16de4:	e7b1      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENETUNREACH;
   16de6:	f016 f992 	bl	2d10e <__errno>
   16dea:	2372      	movs	r3, #114	; 0x72
   16dec:	e7ad      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENETRESET;
   16dee:	f016 f98e 	bl	2d10e <__errno>
   16df2:	237e      	movs	r3, #126	; 0x7e
   16df4:	e7a9      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ECONNRESET;
   16df6:	f016 f98a 	bl	2d10e <__errno>
   16dfa:	2368      	movs	r3, #104	; 0x68
   16dfc:	e7a5      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EISCONN;
   16dfe:	f016 f986 	bl	2d10e <__errno>
   16e02:	237f      	movs	r3, #127	; 0x7f
   16e04:	e7a1      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENOTCONN;
   16e06:	f016 f982 	bl	2d10e <__errno>
   16e0a:	2380      	movs	r3, #128	; 0x80
   16e0c:	e79d      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ETIMEDOUT;
   16e0e:	f016 f97e 	bl	2d10e <__errno>
   16e12:	2374      	movs	r3, #116	; 0x74
   16e14:	e799      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENOBUFS;
   16e16:	f016 f97a 	bl	2d10e <__errno>
   16e1a:	2369      	movs	r3, #105	; 0x69
   16e1c:	e795      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EHOSTDOWN;
   16e1e:	f016 f976 	bl	2d10e <__errno>
   16e22:	2375      	movs	r3, #117	; 0x75
   16e24:	e791      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EINPROGRESS;
   16e26:	f016 f972 	bl	2d10e <__errno>
   16e2a:	2377      	movs	r3, #119	; 0x77
   16e2c:	e78d      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EALREADY;
   16e2e:	f016 f96e 	bl	2d10e <__errno>
   16e32:	2378      	movs	r3, #120	; 0x78
   16e34:	e789      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ECANCELED;
   16e36:	f016 f96a 	bl	2d10e <__errno>
   16e3a:	238c      	movs	r3, #140	; 0x8c
   16e3c:	e785      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ENOKEY;
   16e3e:	f016 f966 	bl	2d10e <__errno>
   16e42:	f240 73d1 	movw	r3, #2001	; 0x7d1
   16e46:	e780      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EKEYEXPIRED;
   16e48:	f016 f961 	bl	2d10e <__errno>
   16e4c:	f240 73d2 	movw	r3, #2002	; 0x7d2
   16e50:	e77b      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EKEYREVOKED;
   16e52:	f016 f95c 	bl	2d10e <__errno>
   16e56:	f240 73d3 	movw	r3, #2003	; 0x7d3
   16e5a:	e776      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EKEYREJECTED;
   16e5c:	f016 f957 	bl	2d10e <__errno>
   16e60:	f240 73d4 	movw	r3, #2004	; 0x7d4
   16e64:	e771      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = EMSGSIZE;
   16e66:	f016 f952 	bl	2d10e <__errno>
   16e6a:	237a      	movs	r3, #122	; 0x7a
   16e6c:	e76d      	b.n	16d4a <bsd_os_errno_set+0x1ca>
		errno = ECONNABORTED;
   16e6e:	f016 f94e 	bl	2d10e <__errno>
   16e72:	2371      	movs	r3, #113	; 0x71
   16e74:	e769      	b.n	16d4a <bsd_os_errno_set+0x1ca>
   16e76:	bf00      	nop
   16e78:	000316d7 	.word	0x000316d7
   16e7c:	00033086 	.word	0x00033086
   16e80:	0003049a 	.word	0x0003049a
   16e84:	000316fb 	.word	0x000316fb
   16e88:	0002f034 	.word	0x0002f034
   16e8c:	0002f04c 	.word	0x0002f04c
   16e90:	00031722 	.word	0x00031722
   16e94:	baadbaad 	.word	0xbaadbaad

00016e98 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16e9c:	4b01      	ldr	r3, [pc, #4]	; (16ea4 <bsd_os_application_irq_set+0xc>)
   16e9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16ea2:	4770      	bx	lr
   16ea4:	e000e100 	.word	0xe000e100

00016ea8 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16eac:	4b01      	ldr	r3, [pc, #4]	; (16eb4 <bsd_os_application_irq_clear+0xc>)
   16eae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16eb2:	4770      	bx	lr
   16eb4:	e000e100 	.word	0xe000e100

00016eb8 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16eb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   16ebc:	4b01      	ldr	r3, [pc, #4]	; (16ec4 <bsd_os_trace_irq_set+0xc>)
   16ebe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16ec2:	4770      	bx	lr
   16ec4:	e000e100 	.word	0xe000e100

00016ec8 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ec8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   16ecc:	4b01      	ldr	r3, [pc, #4]	; (16ed4 <bsd_os_trace_irq_clear+0xc>)
   16ece:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16ed2:	4770      	bx	lr
   16ed4:	e000e100 	.word	0xe000e100

00016ed8 <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   16ed8:	b500      	push	{lr}
   16eda:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160dk_nrf9160.dts". */
	const nrfx_uarte_config_t config = {
   16edc:	2218      	movs	r2, #24
   16ede:	2100      	movs	r1, #0
   16ee0:	a802      	add	r0, sp, #8
   16ee2:	f00f faa9 	bl	26438 <memset>
   16ee6:	2301      	movs	r3, #1
   16ee8:	9301      	str	r3, [sp, #4]
   16eea:	f04f 33ff 	mov.w	r3, #4294967295
   16eee:	e9cd 3303 	strd	r3, r3, [sp, #12]
   16ef2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16ef6:	9306      	str	r3, [sp, #24]
   16ef8:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   16efa:	2200      	movs	r2, #0
   16efc:	a901      	add	r1, sp, #4
   16efe:	4804      	ldr	r0, [pc, #16]	; (16f10 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   16f00:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   16f04:	f00b f9b2 	bl	2226c <nrfx_uarte_init>
#endif
}
   16f08:	b009      	add	sp, #36	; 0x24
   16f0a:	f85d fb04 	ldr.w	pc, [sp], #4
   16f0e:	bf00      	nop
   16f10:	0002f3c8 	.word	0x0002f3c8

00016f14 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   16f14:	b508      	push	{r3, lr}
	list->head = NULL;
   16f16:	2300      	movs	r3, #0
   16f18:	4a08      	ldr	r2, [pc, #32]	; (16f3c <bsd_os_init+0x28>)
	list->tail = NULL;
   16f1a:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16f1e:	4a08      	ldr	r2, [pc, #32]	; (16f40 <bsd_os_init+0x2c>)
   16f20:	e8d2 1fef 	ldaex	r1, [r2]
   16f24:	e8c2 3fe0 	stlex	r0, r3, [r2]
   16f28:	2800      	cmp	r0, #0
   16f2a:	d1f9      	bne.n	16f20 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   16f2c:	f017 f855 	bl	2dfda <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   16f30:	f7ff ffd2 	bl	16ed8 <trace_uart_init>
	trace_task_create();
}
   16f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   16f38:	f017 b844 	b.w	2dfc4 <trace_task_create>
   16f3c:	2002163c 	.word	0x2002163c
   16f40:	20021638 	.word	0x20021638

00016f44 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   16f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f48:	4606      	mov	r6, r0
   16f4a:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	uint32_t remaining_bytes = len;
   16f4c:	460c      	mov	r4, r1

	while (remaining_bytes) {
		uint8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		uint32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   16f4e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 16f74 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   16f52:	b914      	cbnz	r4, 16f5a <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   16f54:	4620      	mov	r0, r4
   16f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   16f5a:	2cff      	cmp	r4, #255	; 0xff
   16f5c:	4627      	mov	r7, r4
   16f5e:	bf28      	it	cs
   16f60:	27ff      	movcs	r7, #255	; 0xff
		uint32_t idx = len - remaining_bytes;
   16f62:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   16f64:	463a      	mov	r2, r7
   16f66:	4640      	mov	r0, r8
   16f68:	4431      	add	r1, r6
   16f6a:	f00b fa61 	bl	22430 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   16f6e:	1be4      	subs	r4, r4, r7
   16f70:	e7ef      	b.n	16f52 <bsd_os_trace_put+0xe>
   16f72:	bf00      	nop
   16f74:	0002f3c8 	.word	0x0002f3c8

00016f78 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   16f78:	f240 2302 	movw	r3, #514	; 0x202
   16f7c:	4298      	cmp	r0, r3
   16f7e:	f000 8087 	beq.w	17090 <z_to_nrf_optname+0x118>
   16f82:	dc07      	bgt.n	16f94 <z_to_nrf_optname+0x1c>
   16f84:	2801      	cmp	r0, #1
   16f86:	d040      	beq.n	1700a <z_to_nrf_optname+0x92>
   16f88:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   16f8c:	d034      	beq.n	16ff8 <z_to_nrf_optname+0x80>
   16f8e:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   16f92:	4770      	bx	lr
	switch (z_in_level) {
   16f94:	f240 2303 	movw	r3, #515	; 0x203
   16f98:	4298      	cmp	r0, r3
   16f9a:	d1f8      	bne.n	16f8e <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   16f9c:	3901      	subs	r1, #1
   16f9e:	2913      	cmp	r1, #19
   16fa0:	d8f5      	bhi.n	16f8e <z_to_nrf_optname+0x16>
   16fa2:	a301      	add	r3, pc, #4	; (adr r3, 16fa8 <z_to_nrf_optname+0x30>)
   16fa4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   16fa8:	0001709f 	.word	0x0001709f
   16fac:	00017079 	.word	0x00017079
   16fb0:	0001707d 	.word	0x0001707d
   16fb4:	0001701b 	.word	0x0001701b
   16fb8:	00017081 	.word	0x00017081
   16fbc:	00017085 	.word	0x00017085
   16fc0:	00017089 	.word	0x00017089
   16fc4:	00016f8f 	.word	0x00016f8f
   16fc8:	00016f8f 	.word	0x00016f8f
   16fcc:	00016f8f 	.word	0x00016f8f
   16fd0:	00016f8f 	.word	0x00016f8f
   16fd4:	00016f8f 	.word	0x00016f8f
   16fd8:	00016f8f 	.word	0x00016f8f
   16fdc:	00016f8f 	.word	0x00016f8f
   16fe0:	00016f8f 	.word	0x00016f8f
   16fe4:	00016f8f 	.word	0x00016f8f
   16fe8:	00016f8f 	.word	0x00016f8f
   16fec:	00016f8f 	.word	0x00016f8f
   16ff0:	00016f8f 	.word	0x00016f8f
   16ff4:	0001708d 	.word	0x0001708d
		switch (z_in_optname) {
   16ff8:	3901      	subs	r1, #1
   16ffa:	2906      	cmp	r1, #6
   16ffc:	d8c7      	bhi.n	16f8e <z_to_nrf_optname+0x16>
   16ffe:	e8df f001 	tbb	[pc, r1]
   17002:	3f3b      	.short	0x3f3b
   17004:	4e0c4341 	.word	0x4e0c4341
   17008:	3d          	.byte	0x3d
   17009:	00          	.byte	0x00
		switch (z_in_optname) {
   1700a:	2920      	cmp	r1, #32
   1700c:	dcbf      	bgt.n	16f8e <z_to_nrf_optname+0x16>
   1700e:	2913      	cmp	r1, #19
   17010:	dc05      	bgt.n	1701e <z_to_nrf_optname+0xa6>
   17012:	2902      	cmp	r1, #2
   17014:	d028      	beq.n	17068 <z_to_nrf_optname+0xf0>
   17016:	2904      	cmp	r1, #4
   17018:	d1b9      	bne.n	16f8e <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   1701a:	2304      	movs	r3, #4
   1701c:	e040      	b.n	170a0 <z_to_nrf_optname+0x128>
   1701e:	3914      	subs	r1, #20
   17020:	290c      	cmp	r1, #12
   17022:	d8b4      	bhi.n	16f8e <z_to_nrf_optname+0x16>
   17024:	a301      	add	r3, pc, #4	; (adr r3, 1702c <z_to_nrf_optname+0xb4>)
   17026:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1702a:	bf00      	nop
   1702c:	0001708d 	.word	0x0001708d
   17030:	00017061 	.word	0x00017061
   17034:	00016f8f 	.word	0x00016f8f
   17038:	00016f8f 	.word	0x00016f8f
   1703c:	00016f8f 	.word	0x00016f8f
   17040:	00017065 	.word	0x00017065
   17044:	00016f8f 	.word	0x00016f8f
   17048:	00016f8f 	.word	0x00016f8f
   1704c:	00016f8f 	.word	0x00016f8f
   17050:	00016f8f 	.word	0x00016f8f
   17054:	0001706d 	.word	0x0001706d
   17058:	00017071 	.word	0x00017071
   1705c:	00017075 	.word	0x00017075
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   17060:	2315      	movs	r3, #21
   17062:	e01d      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   17064:	2319      	movs	r3, #25
   17066:	e01b      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   17068:	2328      	movs	r3, #40	; 0x28
   1706a:	e019      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   1706c:	231e      	movs	r3, #30
   1706e:	e017      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   17070:	231f      	movs	r3, #31
   17072:	e015      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   17074:	2320      	movs	r3, #32
   17076:	e013      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   17078:	2302      	movs	r3, #2
   1707a:	e011      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   1707c:	2303      	movs	r3, #3
   1707e:	e00f      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   17080:	2305      	movs	r3, #5
   17082:	e00d      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   17084:	2306      	movs	r3, #6
   17086:	e00b      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   17088:	2307      	movs	r3, #7
   1708a:	e009      	b.n	170a0 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1708c:	2314      	movs	r3, #20
   1708e:	e007      	b.n	170a0 <z_to_nrf_optname+0x128>
		switch (z_in_optname) {
   17090:	2902      	cmp	r1, #2
   17092:	d0f1      	beq.n	17078 <z_to_nrf_optname+0x100>
   17094:	2903      	cmp	r1, #3
   17096:	d0f1      	beq.n	1707c <z_to_nrf_optname+0x104>
   17098:	2901      	cmp	r1, #1
   1709a:	f47f af78 	bne.w	16f8e <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1709e:	2301      	movs	r3, #1
	int retval = 0;
   170a0:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   170a2:	6013      	str	r3, [r2, #0]
			break;
   170a4:	4770      	bx	lr
   170a6:	bf00      	nop

000170a8 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   170a8:	f240 1303 	movw	r3, #259	; 0x103
{
   170ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   170b0:	4299      	cmp	r1, r3
{
   170b2:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   170b4:	f000 8097 	beq.w	171e6 <nrf91_socket_offload_ioctl+0x13e>
   170b8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   170bc:	d005      	beq.n	170ca <nrf91_socket_offload_ioctl+0x22>
   170be:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   170c2:	d171      	bne.n	171a8 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   170c4:	f06f 0411 	mvn.w	r4, #17
   170c8:	e01d      	b.n	17106 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   170ca:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   170ce:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   170d2:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   170d4:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   170d8:	4668      	mov	r0, sp
   170da:	2240      	movs	r2, #64	; 0x40
   170dc:	f00f f9ac 	bl	26438 <memset>
	for (int i = 0; i < nfds; i++) {
   170e0:	466e      	mov	r6, sp
   170e2:	4655      	mov	r5, sl
   170e4:	4657      	mov	r7, sl
	int retval = 0;
   170e6:	4644      	mov	r4, r8
		tmp[i].events = 0;
   170e8:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   170ea:	4940      	ldr	r1, [pc, #256]	; (171ec <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   170ec:	45c1      	cmp	r9, r8
   170ee:	dc0e      	bgt.n	1710e <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   170f0:	2c00      	cmp	r4, #0
   170f2:	dc08      	bgt.n	17106 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   170f4:	465a      	mov	r2, fp
   170f6:	4649      	mov	r1, r9
   170f8:	4668      	mov	r0, sp
   170fa:	f009 f961 	bl	203c0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   170fe:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   17100:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   17102:	4599      	cmp	r9, r3
   17104:	dc28      	bgt.n	17158 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   17106:	4620      	mov	r0, r4
   17108:	b011      	add	sp, #68	; 0x44
   1710a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   1710e:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   17110:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   17112:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   17114:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   17116:	da05      	bge.n	17124 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   17118:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1711a:	f108 0801 	add.w	r8, r8, #1
   1711e:	3608      	adds	r6, #8
   17120:	3708      	adds	r7, #8
   17122:	e7e3      	b.n	170ec <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   17124:	2286      	movs	r2, #134	; 0x86
   17126:	f7fa fee7 	bl	11ef8 <z_get_fd_obj>
			if (obj != NULL) {
   1712a:	2300      	movs	r3, #0
   1712c:	492f      	ldr	r1, [pc, #188]	; (171ec <nrf91_socket_offload_ioctl+0x144>)
   1712e:	b178      	cbz	r0, 17150 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   17130:	3801      	subs	r0, #1
   17132:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   17134:	88b8      	ldrh	r0, [r7, #4]
   17136:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   17138:	bf42      	ittt	mi
   1713a:	88b2      	ldrhmi	r2, [r6, #4]
   1713c:	f042 0201 	orrmi.w	r2, r2, #1
   17140:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   17142:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   17144:	bf42      	ittt	mi
   17146:	88b2      	ldrhmi	r2, [r6, #4]
   17148:	f042 0202 	orrmi.w	r2, r2, #2
   1714c:	80b2      	strhmi	r2, [r6, #4]
   1714e:	e7e4      	b.n	1711a <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   17150:	2220      	movs	r2, #32
				retval++;
   17152:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   17154:	80fa      	strh	r2, [r7, #6]
				retval++;
   17156:	e7ed      	b.n	17134 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   17158:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   1715c:	2a00      	cmp	r2, #0
   1715e:	db20      	blt.n	171a2 <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   17160:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   17164:	88d2      	ldrh	r2, [r2, #6]
   17166:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   17168:	bf42      	ittt	mi
   1716a:	88e9      	ldrhmi	r1, [r5, #6]
   1716c:	f041 0101 	orrmi.w	r1, r1, #1
   17170:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   17172:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   17174:	bf42      	ittt	mi
   17176:	88e9      	ldrhmi	r1, [r5, #6]
   17178:	f041 0104 	orrmi.w	r1, r1, #4
   1717c:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1717e:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   17180:	bf42      	ittt	mi
   17182:	88e9      	ldrhmi	r1, [r5, #6]
   17184:	f041 0108 	orrmi.w	r1, r1, #8
   17188:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   1718a:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   1718c:	bf42      	ittt	mi
   1718e:	88e9      	ldrhmi	r1, [r5, #6]
   17190:	f041 0120 	orrmi.w	r1, r1, #32
   17194:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   17196:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   17198:	bf42      	ittt	mi
   1719a:	88ea      	ldrhmi	r2, [r5, #6]
   1719c:	f042 0210 	orrmi.w	r2, r2, #16
   171a0:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   171a2:	3301      	adds	r3, #1
   171a4:	3508      	adds	r5, #8
   171a6:	e7ac      	b.n	17102 <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   171a8:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   171aa:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   171ae:	d00b      	beq.n	171c8 <nrf91_socket_offload_ioctl+0x120>
   171b0:	2904      	cmp	r1, #4
   171b2:	d111      	bne.n	171d8 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   171b4:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   171b6:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   171ba:	d10d      	bne.n	171d8 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   171bc:	2101      	movs	r1, #1
   171be:	1392      	asrs	r2, r2, #14
   171c0:	f009 f900 	bl	203c4 <nrf_fcntl>
   171c4:	4604      	mov	r4, r0
		break;
   171c6:	e79e      	b.n	17106 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   171c8:	2200      	movs	r2, #0
   171ca:	2102      	movs	r1, #2
   171cc:	f009 f8fa 	bl	203c4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   171d0:	0380      	lsls	r0, r0, #14
   171d2:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   171d6:	e796      	b.n	17106 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   171d8:	f015 ff99 	bl	2d10e <__errno>
   171dc:	2316      	movs	r3, #22
	return retval;
   171de:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   171e2:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   171e4:	e78f      	b.n	17106 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   171e6:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   171ea:	e78c      	b.n	17106 <nrf91_socket_offload_ioctl+0x5e>
   171ec:	0002f3d8 	.word	0x0002f3d8

000171f0 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   171f0:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   171f2:	4b03      	ldr	r3, [pc, #12]	; (17200 <nrf91_socket_iface_init+0x10>)
   171f4:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   171f6:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   171f8:	4802      	ldr	r0, [pc, #8]	; (17204 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   171fa:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   171fc:	f7fc bd68 	b.w	13cd0 <socket_offload_dns_register>
   17200:	20021694 	.word	0x20021694
   17204:	0002f3d0 	.word	0x0002f3d0

00017208 <nrf91_socket_offload_accept>:
{
   17208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1720c:	b08a      	sub	sp, #40	; 0x28
   1720e:	4607      	mov	r7, r0
   17210:	460c      	mov	r4, r1
   17212:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   17214:	f7fa fea0 	bl	11f58 <z_reserve_fd>
   17218:	4606      	mov	r6, r0
	if (fd < 0) {
   1721a:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1721c:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   17220:	da05      	bge.n	1722e <nrf91_socket_offload_accept+0x26>
	return -1;
   17222:	f04f 36ff 	mov.w	r6, #4294967295
}
   17226:	4630      	mov	r0, r6
   17228:	b00a      	add	sp, #40	; 0x28
   1722a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   1722e:	b31c      	cbz	r4, 17278 <nrf91_socket_offload_accept+0x70>
   17230:	b32d      	cbz	r5, 1727e <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   17232:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   17234:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   17236:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   17238:	bf0c      	ite	eq
   1723a:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1723c:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1723e:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   17240:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   17242:	4639      	mov	r1, r7
   17244:	f009 f858 	bl	202f8 <nrf_accept>
	if (new_sd < 0) {
   17248:	f1b0 0800 	subs.w	r8, r0, #0
   1724c:	dbe9      	blt.n	17222 <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   1724e:	b164      	cbz	r4, 1726a <nrf91_socket_offload_accept+0x62>
   17250:	b15d      	cbz	r5, 1726a <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   17252:	687b      	ldr	r3, [r7, #4]
   17254:	2b02      	cmp	r3, #2
   17256:	d115      	bne.n	17284 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   17258:	2308      	movs	r3, #8
   1725a:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1725c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   17260:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   17262:	2301      	movs	r3, #1
   17264:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   17266:	9b04      	ldr	r3, [sp, #16]
   17268:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   1726a:	4630      	mov	r0, r6
   1726c:	4a0c      	ldr	r2, [pc, #48]	; (172a0 <nrf91_socket_offload_accept+0x98>)
   1726e:	f108 0101 	add.w	r1, r8, #1
   17272:	f7fa fea3 	bl	11fbc <z_finalize_fd>
	return fd;
   17276:	e7d6      	b.n	17226 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   17278:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1727a:	4627      	mov	r7, r4
   1727c:	e7e1      	b.n	17242 <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1727e:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   17280:	462f      	mov	r7, r5
   17282:	e7de      	b.n	17242 <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   17284:	2b0a      	cmp	r3, #10
   17286:	d106      	bne.n	17296 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   17288:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1728a:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1728c:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1728e:	a901      	add	r1, sp, #4
   17290:	f016 ff9f 	bl	2e1d2 <nrf_to_z_ipv6>
   17294:	e7e9      	b.n	1726a <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   17296:	4630      	mov	r0, r6
   17298:	f7fa fe9a 	bl	11fd0 <z_free_fd>
   1729c:	e7c1      	b.n	17222 <nrf91_socket_offload_accept+0x1a>
   1729e:	bf00      	nop
   172a0:	0002f3d8 	.word	0x0002f3d8

000172a4 <nrf91_socket_offload_sendmsg>:
{
   172a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   172a8:	4607      	mov	r7, r0
   172aa:	4690      	mov	r8, r2
	if (msg == NULL) {
   172ac:	460c      	mov	r4, r1
   172ae:	b319      	cbz	r1, 172f8 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   172b0:	2300      	movs	r3, #0
	ssize_t len = 0;
   172b2:	461a      	mov	r2, r3
   172b4:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   172b6:	4283      	cmp	r3, r0
   172b8:	d128      	bne.n	1730c <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   172ba:	2a80      	cmp	r2, #128	; 0x80
   172bc:	d857      	bhi.n	1736e <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   172be:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   172c0:	f04f 32ff 	mov.w	r2, #4294967295
   172c4:	f04f 33ff 	mov.w	r3, #4294967295
   172c8:	482a      	ldr	r0, [pc, #168]	; (17374 <nrf91_socket_offload_sendmsg+0xd0>)
   172ca:	f00b fea1 	bl	23010 <z_impl_k_mutex_lock>
		len = 0;
   172ce:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   172d0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 17378 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   172d4:	68e3      	ldr	r3, [r4, #12]
   172d6:	42ab      	cmp	r3, r5
   172d8:	d81f      	bhi.n	1731a <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   172da:	6863      	ldr	r3, [r4, #4]
   172dc:	4632      	mov	r2, r6
   172de:	9301      	str	r3, [sp, #4]
   172e0:	6823      	ldr	r3, [r4, #0]
   172e2:	4638      	mov	r0, r7
   172e4:	9300      	str	r3, [sp, #0]
   172e6:	4924      	ldr	r1, [pc, #144]	; (17378 <nrf91_socket_offload_sendmsg+0xd4>)
   172e8:	4643      	mov	r3, r8
   172ea:	f017 f8ce 	bl	2e48a <nrf91_socket_offload_sendto>
   172ee:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   172f0:	4820      	ldr	r0, [pc, #128]	; (17374 <nrf91_socket_offload_sendmsg+0xd0>)
   172f2:	f00b ff87 	bl	23204 <z_impl_k_mutex_unlock>
		return ret;
   172f6:	e005      	b.n	17304 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   172f8:	f015 ff09 	bl	2d10e <__errno>
   172fc:	2316      	movs	r3, #22
		return -1;
   172fe:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   17302:	6003      	str	r3, [r0, #0]
}
   17304:	4628      	mov	r0, r5
   17306:	b002      	add	sp, #8
   17308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1730c:	68a1      	ldr	r1, [r4, #8]
   1730e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   17312:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   17314:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   17316:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   17318:	e7cd      	b.n	172b6 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1731a:	68a1      	ldr	r1, [r4, #8]
   1731c:	eb09 0006 	add.w	r0, r9, r6
   17320:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   17324:	685a      	ldr	r2, [r3, #4]
   17326:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   1732a:	f7f5 fc0f 	bl	cb4c <memcpy>
			len += msg->msg_iov[i].iov_len;
   1732e:	68a3      	ldr	r3, [r4, #8]
   17330:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   17334:	4453      	add	r3, sl
   17336:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   17338:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1733a:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1733c:	e7ca      	b.n	172d4 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   1733e:	68a1      	ldr	r1, [r4, #8]
   17340:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   17344:	685a      	ldr	r2, [r3, #4]
   17346:	b162      	cbz	r2, 17362 <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   17348:	6863      	ldr	r3, [r4, #4]
   1734a:	4638      	mov	r0, r7
   1734c:	9301      	str	r3, [sp, #4]
   1734e:	6823      	ldr	r3, [r4, #0]
   17350:	9300      	str	r3, [sp, #0]
   17352:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   17356:	4643      	mov	r3, r8
   17358:	f017 f897 	bl	2e48a <nrf91_socket_offload_sendto>
		if (ret < 0) {
   1735c:	1e05      	subs	r5, r0, #0
   1735e:	dbd1      	blt.n	17304 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   17360:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   17362:	3601      	adds	r6, #1
   17364:	68e3      	ldr	r3, [r4, #12]
   17366:	42b3      	cmp	r3, r6
   17368:	d8e9      	bhi.n	1733e <nrf91_socket_offload_sendmsg+0x9a>
   1736a:	464d      	mov	r5, r9
   1736c:	e7ca      	b.n	17304 <nrf91_socket_offload_sendmsg+0x60>
   1736e:	2600      	movs	r6, #0
	len = 0;
   17370:	46b1      	mov	r9, r6
   17372:	e7f7      	b.n	17364 <nrf91_socket_offload_sendmsg+0xc0>
   17374:	20020bb8 	.word	0x20020bb8
   17378:	2002477d 	.word	0x2002477d

0001737c <nrf91_socket_create>:
{
   1737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1737e:	4606      	mov	r6, r0
   17380:	460d      	mov	r5, r1
   17382:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   17384:	f7fa fde8 	bl	11f58 <z_reserve_fd>
	if (fd < 0) {
   17388:	1e04      	subs	r4, r0, #0
   1738a:	db0d      	blt.n	173a8 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   1738c:	b2b0      	uxth	r0, r6
   1738e:	f016 fe3d 	bl	2e00c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   17392:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   17396:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   17398:	d109      	bne.n	173ae <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   1739a:	f015 feb8 	bl	2d10e <__errno>
   1739e:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   173a0:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   173a2:	4620      	mov	r0, r4
   173a4:	f7fa fe14 	bl	11fd0 <z_free_fd>
		return -1;
   173a8:	f04f 34ff 	mov.w	r4, #4294967295
   173ac:	e01b      	b.n	173e6 <nrf91_socket_create+0x6a>
	switch (socktype) {
   173ae:	2d03      	cmp	r5, #3
   173b0:	d003      	beq.n	173ba <nrf91_socket_create+0x3e>
   173b2:	2d04      	cmp	r5, #4
   173b4:	bf08      	it	eq
   173b6:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   173ba:	4638      	mov	r0, r7
   173bc:	f016 fe42 	bl	2e044 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   173c0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   173c4:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   173c6:	d103      	bne.n	173d0 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   173c8:	f015 fea1 	bl	2d10e <__errno>
   173cc:	237b      	movs	r3, #123	; 0x7b
   173ce:	e7e7      	b.n	173a0 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   173d0:	4629      	mov	r1, r5
   173d2:	4630      	mov	r0, r6
   173d4:	f008 ff16 	bl	20204 <nrf_socket>
	if (sd < 0) {
   173d8:	1e01      	subs	r1, r0, #0
   173da:	dbe2      	blt.n	173a2 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   173dc:	4620      	mov	r0, r4
   173de:	4a03      	ldr	r2, [pc, #12]	; (173ec <nrf91_socket_create+0x70>)
   173e0:	3101      	adds	r1, #1
   173e2:	f7fa fdeb 	bl	11fbc <z_finalize_fd>
}
   173e6:	4620      	mov	r0, r4
   173e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   173ea:	bf00      	nop
   173ec:	0002f3d8 	.word	0x0002f3d8

000173f0 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   173f0:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   173f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   173f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   173fc:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   17400:	4605      	mov	r5, r0
   17402:	460e      	mov	r6, r1
   17404:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   17406:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1740a:	d15f      	bne.n	174cc <z_impl_gpio_pin_interrupt_configure+0xdc>
   1740c:	4937      	ldr	r1, [pc, #220]	; (174ec <z_impl_gpio_pin_interrupt_configure+0xfc>)
   1740e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   17412:	4a37      	ldr	r2, [pc, #220]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   17414:	4837      	ldr	r0, [pc, #220]	; (174f4 <z_impl_gpio_pin_interrupt_configure+0x104>)
   17416:	f015 f82c 	bl	2c472 <printk>
   1741a:	4837      	ldr	r0, [pc, #220]	; (174f8 <z_impl_gpio_pin_interrupt_configure+0x108>)
   1741c:	f015 f829 	bl	2c472 <printk>
   17420:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   17424:	4832      	ldr	r0, [pc, #200]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   17426:	f015 fa41 	bl	2c8ac <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1742a:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1742e:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   17432:	d10e      	bne.n	17452 <z_impl_gpio_pin_interrupt_configure+0x62>
   17434:	4931      	ldr	r1, [pc, #196]	; (174fc <z_impl_gpio_pin_interrupt_configure+0x10c>)
   17436:	f240 13f1 	movw	r3, #497	; 0x1f1
   1743a:	4a2d      	ldr	r2, [pc, #180]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   1743c:	482d      	ldr	r0, [pc, #180]	; (174f4 <z_impl_gpio_pin_interrupt_configure+0x104>)
   1743e:	f015 f818 	bl	2c472 <printk>
   17442:	482f      	ldr	r0, [pc, #188]	; (17500 <z_impl_gpio_pin_interrupt_configure+0x110>)
   17444:	f015 f815 	bl	2c472 <printk>
   17448:	f240 11f1 	movw	r1, #497	; 0x1f1
   1744c:	4828      	ldr	r0, [pc, #160]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   1744e:	f015 fa2d 	bl	2c8ac <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   17452:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   17456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1745a:	d10e      	bne.n	1747a <z_impl_gpio_pin_interrupt_configure+0x8a>
   1745c:	4929      	ldr	r1, [pc, #164]	; (17504 <z_impl_gpio_pin_interrupt_configure+0x114>)
   1745e:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   17462:	4a23      	ldr	r2, [pc, #140]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   17464:	4823      	ldr	r0, [pc, #140]	; (174f4 <z_impl_gpio_pin_interrupt_configure+0x104>)
   17466:	f015 f804 	bl	2c472 <printk>
   1746a:	4827      	ldr	r0, [pc, #156]	; (17508 <z_impl_gpio_pin_interrupt_configure+0x118>)
   1746c:	f015 f801 	bl	2c472 <printk>
   17470:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   17474:	481e      	ldr	r0, [pc, #120]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   17476:	f015 fa19 	bl	2c8ac <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1747a:	2701      	movs	r7, #1
   1747c:	f8da 3000 	ldr.w	r3, [sl]
   17480:	40b7      	lsls	r7, r6
   17482:	421f      	tst	r7, r3
   17484:	d10e      	bne.n	174a4 <z_impl_gpio_pin_interrupt_configure+0xb4>
   17486:	4921      	ldr	r1, [pc, #132]	; (1750c <z_impl_gpio_pin_interrupt_configure+0x11c>)
   17488:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1748c:	4a18      	ldr	r2, [pc, #96]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   1748e:	4819      	ldr	r0, [pc, #100]	; (174f4 <z_impl_gpio_pin_interrupt_configure+0x104>)
   17490:	f014 ffef 	bl	2c472 <printk>
   17494:	481e      	ldr	r0, [pc, #120]	; (17510 <z_impl_gpio_pin_interrupt_configure+0x120>)
   17496:	f014 ffec 	bl	2c472 <printk>
   1749a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1749e:	4814      	ldr	r0, [pc, #80]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   174a0:	f015 fa04 	bl	2c8ac <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   174a4:	0423      	lsls	r3, r4, #16
   174a6:	d505      	bpl.n	174b4 <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   174a8:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   174ac:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   174ae:	bf18      	it	ne
   174b0:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   174b4:	f8d8 7018 	ldr.w	r7, [r8, #24]
   174b8:	4631      	mov	r1, r6
   174ba:	4628      	mov	r0, r5
   174bc:	46bc      	mov	ip, r7
   174be:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   174c2:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   174c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   174ca:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   174cc:	2b00      	cmp	r3, #0
   174ce:	d1ac      	bne.n	1742a <z_impl_gpio_pin_interrupt_configure+0x3a>
   174d0:	4910      	ldr	r1, [pc, #64]	; (17514 <z_impl_gpio_pin_interrupt_configure+0x124>)
   174d2:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   174d6:	4a06      	ldr	r2, [pc, #24]	; (174f0 <z_impl_gpio_pin_interrupt_configure+0x100>)
   174d8:	4806      	ldr	r0, [pc, #24]	; (174f4 <z_impl_gpio_pin_interrupt_configure+0x104>)
   174da:	f014 ffca 	bl	2c472 <printk>
   174de:	480e      	ldr	r0, [pc, #56]	; (17518 <z_impl_gpio_pin_interrupt_configure+0x128>)
   174e0:	f014 ffc7 	bl	2c472 <printk>
   174e4:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   174e8:	e79c      	b.n	17424 <z_impl_gpio_pin_interrupt_configure+0x34>
   174ea:	bf00      	nop
   174ec:	00031785 	.word	0x00031785
   174f0:	0003175b 	.word	0x0003175b
   174f4:	0003049a 	.word	0x0003049a
   174f8:	000317c6 	.word	0x000317c6
   174fc:	00031847 	.word	0x00031847
   17500:	000318c8 	.word	0x000318c8
   17504:	0003191c 	.word	0x0003191c
   17508:	00031966 	.word	0x00031966
   1750c:	000319ab 	.word	0x000319ab
   17510:	000319e9 	.word	0x000319e9
   17514:	000317f2 	.word	0x000317f2
   17518:	0003181c 	.word	0x0003181c

0001751c <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
   1751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17520:	2501      	movs	r5, #1
   17522:	6843      	ldr	r3, [r0, #4]
   17524:	408d      	lsls	r5, r1
   17526:	681b      	ldr	r3, [r3, #0]
{
   17528:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1752a:	421d      	tst	r5, r3
{
   1752c:	460e      	mov	r6, r1
   1752e:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
   17530:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17532:	d10e      	bne.n	17552 <gpio_pin_configure+0x36>
   17534:	490d      	ldr	r1, [pc, #52]	; (1756c <gpio_pin_configure+0x50>)
   17536:	f44f 7311 	mov.w	r3, #580	; 0x244
   1753a:	4a0d      	ldr	r2, [pc, #52]	; (17570 <gpio_pin_configure+0x54>)
   1753c:	480d      	ldr	r0, [pc, #52]	; (17574 <gpio_pin_configure+0x58>)
   1753e:	f014 ff98 	bl	2c472 <printk>
   17542:	480d      	ldr	r0, [pc, #52]	; (17578 <gpio_pin_configure+0x5c>)
   17544:	f014 ff95 	bl	2c472 <printk>
   17548:	f44f 7111 	mov.w	r1, #580	; 0x244
   1754c:	4808      	ldr	r0, [pc, #32]	; (17570 <gpio_pin_configure+0x54>)
   1754e:	f015 f9ad 	bl	2c8ac <assert_post_action>
	return api->pin_configure(port, pin, flags);
   17552:	68a3      	ldr	r3, [r4, #8]
   17554:	4642      	mov	r2, r8
   17556:	4631      	mov	r1, r6
   17558:	4620      	mov	r0, r4
   1755a:	681b      	ldr	r3, [r3, #0]
   1755c:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1755e:	b918      	cbnz	r0, 17568 <gpio_pin_configure+0x4c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   17560:	683b      	ldr	r3, [r7, #0]
   17562:	ea23 0505 	bic.w	r5, r3, r5
   17566:	603d      	str	r5, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   17568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1756c:	000319ab 	.word	0x000319ab
   17570:	0003175b 	.word	0x0003175b
   17574:	0003049a 	.word	0x0003049a
   17578:	000319e9 	.word	0x000319e9

0001757c <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   1757c:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1757e:	2501      	movs	r5, #1
   17580:	6843      	ldr	r3, [r0, #4]
   17582:	408d      	lsls	r5, r1
   17584:	681b      	ldr	r3, [r3, #0]
{
   17586:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17588:	421d      	tst	r5, r3
{
   1758a:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1758c:	d10e      	bne.n	175ac <gpio_pin_set_raw+0x30>
   1758e:	490d      	ldr	r1, [pc, #52]	; (175c4 <gpio_pin_set_raw+0x48>)
   17590:	f44f 7370 	mov.w	r3, #960	; 0x3c0
   17594:	4a0c      	ldr	r2, [pc, #48]	; (175c8 <gpio_pin_set_raw+0x4c>)
   17596:	480d      	ldr	r0, [pc, #52]	; (175cc <gpio_pin_set_raw+0x50>)
   17598:	f014 ff6b 	bl	2c472 <printk>
   1759c:	480c      	ldr	r0, [pc, #48]	; (175d0 <gpio_pin_set_raw+0x54>)
   1759e:	f014 ff68 	bl	2c472 <printk>
   175a2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   175a6:	4808      	ldr	r0, [pc, #32]	; (175c8 <gpio_pin_set_raw+0x4c>)
   175a8:	f015 f980 	bl	2c8ac <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   175ac:	b136      	cbz	r6, 175bc <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   175ae:	68a3      	ldr	r3, [r4, #8]
   175b0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   175b2:	4629      	mov	r1, r5
   175b4:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   175b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   175ba:	4718      	bx	r3
   175bc:	68a3      	ldr	r3, [r4, #8]
   175be:	691b      	ldr	r3, [r3, #16]
   175c0:	e7f7      	b.n	175b2 <gpio_pin_set_raw+0x36>
   175c2:	bf00      	nop
   175c4:	000319ab 	.word	0x000319ab
   175c8:	0003175b 	.word	0x0003175b
   175cc:	0003049a 	.word	0x0003049a
   175d0:	000319e9 	.word	0x000319e9

000175d4 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   175d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   175d8:	4606      	mov	r6, r0
   175da:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   175dc:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   175de:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1763c <dk_set_leds_state.part.0+0x68>
   175e2:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17640 <dk_set_leds_state.part.0+0x6c>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   175e6:	fa26 f204 	lsr.w	r2, r6, r4
   175ea:	fa27 f304 	lsr.w	r3, r7, r4
   175ee:	4313      	orrs	r3, r2
   175f0:	07db      	lsls	r3, r3, #31
   175f2:	d518      	bpl.n	17626 <dk_set_leds_state.part.0+0x52>
			int err = gpio_pin_set_raw(led_devs[i],
   175f4:	43d2      	mvns	r2, r2
   175f6:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   175fa:	7919      	ldrb	r1, [r3, #4]
   175fc:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   17600:	f002 0201 	and.w	r2, r2, #1
   17604:	f7ff ffba 	bl	1757c <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   17608:	4605      	mov	r5, r0
   1760a:	b160      	cbz	r0, 17626 <dk_set_leds_state.part.0+0x52>
   1760c:	4908      	ldr	r1, [pc, #32]	; (17630 <dk_set_leds_state.part.0+0x5c>)
   1760e:	4b09      	ldr	r3, [pc, #36]	; (17634 <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   17610:	4809      	ldr	r0, [pc, #36]	; (17638 <dk_set_leds_state.part.0+0x64>)
   17612:	1ac9      	subs	r1, r1, r3
   17614:	08c9      	lsrs	r1, r1, #3
   17616:	0189      	lsls	r1, r1, #6
   17618:	f041 0101 	orr.w	r1, r1, #1
   1761c:	f015 f976 	bl	2c90c <log_0>
			}
		}
	}

	return 0;
}
   17620:	4628      	mov	r0, r5
   17622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   17626:	3401      	adds	r4, #1
   17628:	2c04      	cmp	r4, #4
   1762a:	d1dc      	bne.n	175e6 <dk_set_leds_state.part.0+0x12>
	return 0;
   1762c:	2500      	movs	r5, #0
   1762e:	e7f7      	b.n	17620 <dk_set_leds_state.part.0+0x4c>
   17630:	0002f064 	.word	0x0002f064
   17634:	0002f034 	.word	0x0002f034
   17638:	000319fb 	.word	0x000319fb
   1763c:	0002f430 	.word	0x0002f430
   17640:	200216dc 	.word	0x200216dc

00017644 <button_pressed>:
{
   17644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   17646:	f04f 0320 	mov.w	r3, #32
   1764a:	f3ef 8511 	mrs	r5, BASEPRI
   1764e:	f383 8811 	msr	BASEPRI, r3
   17652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17656:	4830      	ldr	r0, [pc, #192]	; (17718 <button_pressed+0xd4>)
   17658:	f00d fb74 	bl	24d44 <z_spin_lock_valid>
   1765c:	b968      	cbnz	r0, 1767a <button_pressed+0x36>
   1765e:	235c      	movs	r3, #92	; 0x5c
   17660:	4a2e      	ldr	r2, [pc, #184]	; (1771c <button_pressed+0xd8>)
   17662:	492f      	ldr	r1, [pc, #188]	; (17720 <button_pressed+0xdc>)
   17664:	482f      	ldr	r0, [pc, #188]	; (17724 <button_pressed+0xe0>)
   17666:	f014 ff04 	bl	2c472 <printk>
   1766a:	492b      	ldr	r1, [pc, #172]	; (17718 <button_pressed+0xd4>)
   1766c:	482e      	ldr	r0, [pc, #184]	; (17728 <button_pressed+0xe4>)
   1766e:	f014 ff00 	bl	2c472 <printk>
   17672:	215c      	movs	r1, #92	; 0x5c
   17674:	4829      	ldr	r0, [pc, #164]	; (1771c <button_pressed+0xd8>)
   17676:	f015 f919 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   1767a:	4827      	ldr	r0, [pc, #156]	; (17718 <button_pressed+0xd4>)
   1767c:	f00d fb80 	bl	24d80 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   17680:	2400      	movs	r4, #0
   17682:	4e2a      	ldr	r6, [pc, #168]	; (1772c <button_pressed+0xe8>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   17684:	4f2a      	ldr	r7, [pc, #168]	; (17730 <button_pressed+0xec>)
   17686:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1768a:	f856 0b04 	ldr.w	r0, [r6], #4
   1768e:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   17690:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   17694:	3401      	adds	r4, #1
   17696:	f7ff feab 	bl	173f0 <z_impl_gpio_pin_interrupt_configure>
   1769a:	2c04      	cmp	r4, #4
   1769c:	d00c      	beq.n	176b8 <button_pressed+0x74>
   1769e:	2800      	cmp	r0, #0
   176a0:	d0f1      	beq.n	17686 <button_pressed+0x42>
   176a2:	4b24      	ldr	r3, [pc, #144]	; (17734 <button_pressed+0xf0>)
   176a4:	4924      	ldr	r1, [pc, #144]	; (17738 <button_pressed+0xf4>)
		LOG_ERR("Cannot disable callbacks");
   176a6:	4825      	ldr	r0, [pc, #148]	; (1773c <button_pressed+0xf8>)
   176a8:	1ac9      	subs	r1, r1, r3
   176aa:	08c9      	lsrs	r1, r1, #3
   176ac:	0189      	lsls	r1, r1, #6
   176ae:	f041 0101 	orr.w	r1, r1, #1
   176b2:	f015 f92b 	bl	2c90c <log_0>
   176b6:	e001      	b.n	176bc <button_pressed+0x78>
	if (err) {
   176b8:	2800      	cmp	r0, #0
   176ba:	d1f2      	bne.n	176a2 <button_pressed+0x5e>
	switch (state) {
   176bc:	4b20      	ldr	r3, [pc, #128]	; (17740 <button_pressed+0xfc>)
   176be:	781a      	ldrb	r2, [r3, #0]
   176c0:	b9f2      	cbnz	r2, 17700 <button_pressed+0xbc>
		state = STATE_SCANNING;
   176c2:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   176c4:	491f      	ldr	r1, [pc, #124]	; (17744 <button_pressed+0x100>)
   176c6:	701a      	strb	r2, [r3, #0]
   176c8:	481f      	ldr	r0, [pc, #124]	; (17748 <button_pressed+0x104>)
   176ca:	2221      	movs	r2, #33	; 0x21
   176cc:	2300      	movs	r3, #0
   176ce:	f00d fb87 	bl	24de0 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176d2:	4811      	ldr	r0, [pc, #68]	; (17718 <button_pressed+0xd4>)
   176d4:	f00d fb44 	bl	24d60 <z_spin_unlock_valid>
   176d8:	b968      	cbnz	r0, 176f6 <button_pressed+0xb2>
   176da:	2384      	movs	r3, #132	; 0x84
   176dc:	4a0f      	ldr	r2, [pc, #60]	; (1771c <button_pressed+0xd8>)
   176de:	491b      	ldr	r1, [pc, #108]	; (1774c <button_pressed+0x108>)
   176e0:	4810      	ldr	r0, [pc, #64]	; (17724 <button_pressed+0xe0>)
   176e2:	f014 fec6 	bl	2c472 <printk>
   176e6:	490c      	ldr	r1, [pc, #48]	; (17718 <button_pressed+0xd4>)
   176e8:	4819      	ldr	r0, [pc, #100]	; (17750 <button_pressed+0x10c>)
   176ea:	f014 fec2 	bl	2c472 <printk>
   176ee:	2184      	movs	r1, #132	; 0x84
   176f0:	480a      	ldr	r0, [pc, #40]	; (1771c <button_pressed+0xd8>)
   176f2:	f015 f8db 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   176f6:	f385 8811 	msr	BASEPRI, r5
   176fa:	f3bf 8f6f 	isb	sy
}
   176fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   17700:	23eb      	movs	r3, #235	; 0xeb
   17702:	4a14      	ldr	r2, [pc, #80]	; (17754 <button_pressed+0x110>)
   17704:	4914      	ldr	r1, [pc, #80]	; (17758 <button_pressed+0x114>)
   17706:	4807      	ldr	r0, [pc, #28]	; (17724 <button_pressed+0xe0>)
   17708:	f014 feb3 	bl	2c472 <printk>
   1770c:	21eb      	movs	r1, #235	; 0xeb
   1770e:	4811      	ldr	r0, [pc, #68]	; (17754 <button_pressed+0x110>)
   17710:	f015 f8cc 	bl	2c8ac <assert_post_action>
		break;
   17714:	e7dd      	b.n	176d2 <button_pressed+0x8e>
   17716:	bf00      	nop
   17718:	200216ec 	.word	0x200216ec
   1771c:	0003056a 	.word	0x0003056a
   17720:	000305bc 	.word	0x000305bc
   17724:	0003049a 	.word	0x0003049a
   17728:	000305d1 	.word	0x000305d1
   1772c:	20021698 	.word	0x20021698
   17730:	0002f410 	.word	0x0002f410
   17734:	0002f034 	.word	0x0002f034
   17738:	0002f064 	.word	0x0002f064
   1773c:	00031a11 	.word	0x00031a11
   17740:	200247fd 	.word	0x200247fd
   17744:	20020ec0 	.word	0x20020ec0
   17748:	20021348 	.word	0x20021348
   1774c:	00030590 	.word	0x00030590
   17750:	000305a7 	.word	0x000305a7
   17754:	00031a2a 	.word	0x00031a2a
   17758:	00033086 	.word	0x00033086

0001775c <buttons_scan_fn>:
{
   1775c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   17760:	2400      	movs	r4, #0
   17762:	4e7b      	ldr	r6, [pc, #492]	; (17950 <buttons_scan_fn+0x1f4>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17764:	4625      	mov	r5, r4
{
   17766:	46b2      	mov	sl, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   17768:	f8df b20c 	ldr.w	fp, [pc, #524]	; 17978 <buttons_scan_fn+0x21c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1776c:	4f79      	ldr	r7, [pc, #484]	; (17954 <buttons_scan_fn+0x1f8>)
   1776e:	f04f 0801 	mov.w	r8, #1
   17772:	eb0b 03c5 	add.w	r3, fp, r5, lsl #3
   17776:	791b      	ldrb	r3, [r3, #4]
   17778:	f85a 9b04 	ldr.w	r9, [sl], #4
   1777c:	fa08 f803 	lsl.w	r8, r8, r3
   17780:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17784:	681b      	ldr	r3, [r3, #0]
   17786:	ea18 0f03 	tst.w	r8, r3
   1778a:	d10e      	bne.n	177aa <buttons_scan_fn+0x4e>
   1778c:	4972      	ldr	r1, [pc, #456]	; (17958 <buttons_scan_fn+0x1fc>)
   1778e:	f44f 735e 	mov.w	r3, #888	; 0x378
   17792:	463a      	mov	r2, r7
   17794:	4871      	ldr	r0, [pc, #452]	; (1795c <buttons_scan_fn+0x200>)
   17796:	f014 fe6c 	bl	2c472 <printk>
   1779a:	4871      	ldr	r0, [pc, #452]	; (17960 <buttons_scan_fn+0x204>)
   1779c:	f014 fe69 	bl	2c472 <printk>
   177a0:	f44f 715e 	mov.w	r1, #888	; 0x378
   177a4:	4638      	mov	r0, r7
   177a6:	f015 f881 	bl	2c8ac <assert_post_action>
	return api->port_get_raw(port, value);
   177aa:	f8d9 3008 	ldr.w	r3, [r9, #8]
   177ae:	4648      	mov	r0, r9
   177b0:	685b      	ldr	r3, [r3, #4]
   177b2:	a901      	add	r1, sp, #4
   177b4:	4798      	blx	r3
	if (ret == 0) {
   177b6:	2800      	cmp	r0, #0
   177b8:	d17e      	bne.n	178b8 <buttons_scan_fn+0x15c>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   177ba:	9b01      	ldr	r3, [sp, #4]
   177bc:	ea18 0f03 	tst.w	r8, r3
   177c0:	d003      	beq.n	177ca <buttons_scan_fn+0x6e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   177c2:	3501      	adds	r5, #1
   177c4:	2d04      	cmp	r5, #4
   177c6:	d1d2      	bne.n	1776e <buttons_scan_fn+0x12>
   177c8:	e082      	b.n	178d0 <buttons_scan_fn+0x174>
			ret |= 1U << i;
   177ca:	2301      	movs	r3, #1
   177cc:	40ab      	lsls	r3, r5
   177ce:	431c      	orrs	r4, r3
   177d0:	e7f7      	b.n	177c2 <buttons_scan_fn+0x66>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   177d2:	3d04      	subs	r5, #4
   177d4:	2d00      	cmp	r5, #0
   177d6:	f000 809e 	beq.w	17916 <buttons_scan_fn+0x1ba>
			handler->cb(button_state, has_changed);
   177da:	46aa      	mov	sl, r5
   177dc:	f85a 3b04 	ldr.w	r3, [sl], #4
   177e0:	4641      	mov	r1, r8
   177e2:	4620      	mov	r0, r4
   177e4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   177e6:	f1ba 0f00 	cmp.w	sl, #0
   177ea:	f000 8094 	beq.w	17916 <buttons_scan_fn+0x1ba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   177ee:	686d      	ldr	r5, [r5, #4]
	return node->next;
   177f0:	e08e      	b.n	17910 <buttons_scan_fn+0x1b4>
		initial_run = false;
   177f2:	2200      	movs	r2, #0
   177f4:	701a      	strb	r2, [r3, #0]
   177f6:	e091      	b.n	1791c <buttons_scan_fn+0x1c0>
	__asm__ volatile(
   177f8:	f04f 0320 	mov.w	r3, #32
   177fc:	f3ef 8811 	mrs	r8, BASEPRI
   17800:	f383 8811 	msr	BASEPRI, r3
   17804:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17808:	4856      	ldr	r0, [pc, #344]	; (17964 <buttons_scan_fn+0x208>)
   1780a:	f00d fa9b 	bl	24d44 <z_spin_lock_valid>
   1780e:	b968      	cbnz	r0, 1782c <buttons_scan_fn+0xd0>
   17810:	235c      	movs	r3, #92	; 0x5c
   17812:	4a55      	ldr	r2, [pc, #340]	; (17968 <buttons_scan_fn+0x20c>)
   17814:	4955      	ldr	r1, [pc, #340]	; (1796c <buttons_scan_fn+0x210>)
   17816:	4851      	ldr	r0, [pc, #324]	; (1795c <buttons_scan_fn+0x200>)
   17818:	f014 fe2b 	bl	2c472 <printk>
   1781c:	4951      	ldr	r1, [pc, #324]	; (17964 <buttons_scan_fn+0x208>)
   1781e:	4854      	ldr	r0, [pc, #336]	; (17970 <buttons_scan_fn+0x214>)
   17820:	f014 fe27 	bl	2c472 <printk>
   17824:	215c      	movs	r1, #92	; 0x5c
   17826:	4850      	ldr	r0, [pc, #320]	; (17968 <buttons_scan_fn+0x20c>)
   17828:	f015 f840 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   1782c:	484d      	ldr	r0, [pc, #308]	; (17964 <buttons_scan_fn+0x208>)
   1782e:	f00d faa7 	bl	24d80 <z_spin_lock_set_owner>
		switch (state) {
   17832:	4b50      	ldr	r3, [pc, #320]	; (17974 <buttons_scan_fn+0x218>)
   17834:	781a      	ldrb	r2, [r3, #0]
   17836:	2a01      	cmp	r2, #1
   17838:	d132      	bne.n	178a0 <buttons_scan_fn+0x144>
			state = STATE_WAITING;
   1783a:	2200      	movs	r2, #0
   1783c:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1783e:	4b4e      	ldr	r3, [pc, #312]	; (17978 <buttons_scan_fn+0x21c>)
   17840:	f856 0b04 	ldr.w	r0, [r6], #4
   17844:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   17848:	7919      	ldrb	r1, [r3, #4]
   1784a:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   1784e:	f7ff fdcf 	bl	173f0 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   17852:	3401      	adds	r4, #1
   17854:	2c04      	cmp	r4, #4
   17856:	4605      	mov	r5, r0
   17858:	d001      	beq.n	1785e <buttons_scan_fn+0x102>
   1785a:	2800      	cmp	r0, #0
   1785c:	d0ef      	beq.n	1783e <buttons_scan_fn+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1785e:	4841      	ldr	r0, [pc, #260]	; (17964 <buttons_scan_fn+0x208>)
   17860:	f00d fa7e 	bl	24d60 <z_spin_unlock_valid>
   17864:	b968      	cbnz	r0, 17882 <buttons_scan_fn+0x126>
   17866:	2384      	movs	r3, #132	; 0x84
   17868:	4a3f      	ldr	r2, [pc, #252]	; (17968 <buttons_scan_fn+0x20c>)
   1786a:	4944      	ldr	r1, [pc, #272]	; (1797c <buttons_scan_fn+0x220>)
   1786c:	483b      	ldr	r0, [pc, #236]	; (1795c <buttons_scan_fn+0x200>)
   1786e:	f014 fe00 	bl	2c472 <printk>
   17872:	493c      	ldr	r1, [pc, #240]	; (17964 <buttons_scan_fn+0x208>)
   17874:	4842      	ldr	r0, [pc, #264]	; (17980 <buttons_scan_fn+0x224>)
   17876:	f014 fdfc 	bl	2c472 <printk>
   1787a:	2184      	movs	r1, #132	; 0x84
   1787c:	483a      	ldr	r0, [pc, #232]	; (17968 <buttons_scan_fn+0x20c>)
   1787e:	f015 f815 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   17882:	f388 8811 	msr	BASEPRI, r8
   17886:	f3bf 8f6f 	isb	sy
		if (err) {
   1788a:	2d00      	cmp	r5, #0
   1788c:	d05c      	beq.n	17948 <buttons_scan_fn+0x1ec>
   1788e:	493d      	ldr	r1, [pc, #244]	; (17984 <buttons_scan_fn+0x228>)
   17890:	4b3d      	ldr	r3, [pc, #244]	; (17988 <buttons_scan_fn+0x22c>)
			LOG_ERR("Cannot enable callbacks");
   17892:	483e      	ldr	r0, [pc, #248]	; (1798c <buttons_scan_fn+0x230>)
   17894:	1ac9      	subs	r1, r1, r3
   17896:	08c9      	lsrs	r1, r1, #3
   17898:	0189      	lsls	r1, r1, #6
   1789a:	f041 0101 	orr.w	r1, r1, #1
   1789e:	e051      	b.n	17944 <buttons_scan_fn+0x1e8>
			__ASSERT_NO_MSG(false);
   178a0:	23b4      	movs	r3, #180	; 0xb4
   178a2:	4a3b      	ldr	r2, [pc, #236]	; (17990 <buttons_scan_fn+0x234>)
   178a4:	493b      	ldr	r1, [pc, #236]	; (17994 <buttons_scan_fn+0x238>)
   178a6:	482d      	ldr	r0, [pc, #180]	; (1795c <buttons_scan_fn+0x200>)
   178a8:	f014 fde3 	bl	2c472 <printk>
   178ac:	21b4      	movs	r1, #180	; 0xb4
   178ae:	4838      	ldr	r0, [pc, #224]	; (17990 <buttons_scan_fn+0x234>)
   178b0:	f014 fffc 	bl	2c8ac <assert_post_action>
		int err = 0;
   178b4:	2500      	movs	r5, #0
			break;
   178b6:	e7d2      	b.n	1785e <buttons_scan_fn+0x102>
		if (val < 0) {
   178b8:	da83      	bge.n	177c2 <buttons_scan_fn+0x66>
   178ba:	4b33      	ldr	r3, [pc, #204]	; (17988 <buttons_scan_fn+0x22c>)
   178bc:	4931      	ldr	r1, [pc, #196]	; (17984 <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot read gpio pin");
   178be:	4836      	ldr	r0, [pc, #216]	; (17998 <buttons_scan_fn+0x23c>)
   178c0:	1ac9      	subs	r1, r1, r3
   178c2:	08c9      	lsrs	r1, r1, #3
   178c4:	0189      	lsls	r1, r1, #6
   178c6:	f041 0101 	orr.w	r1, r1, #1
   178ca:	f015 f81f 	bl	2c90c <log_0>
			return 0;
   178ce:	2400      	movs	r4, #0
   178d0:	4b32      	ldr	r3, [pc, #200]	; (1799c <buttons_scan_fn+0x240>)
   178d2:	e8d3 2fef 	ldaex	r2, [r3]
   178d6:	e8c3 4fe1 	stlex	r1, r4, [r3]
   178da:	2900      	cmp	r1, #0
   178dc:	d1f9      	bne.n	178d2 <buttons_scan_fn+0x176>
	if (!initial_run) {
   178de:	4b30      	ldr	r3, [pc, #192]	; (179a0 <buttons_scan_fn+0x244>)
   178e0:	4f30      	ldr	r7, [pc, #192]	; (179a4 <buttons_scan_fn+0x248>)
   178e2:	781a      	ldrb	r2, [r3, #0]
   178e4:	2a00      	cmp	r2, #0
   178e6:	d184      	bne.n	177f2 <buttons_scan_fn+0x96>
		if (button_scan != last_button_scan) {
   178e8:	6839      	ldr	r1, [r7, #0]
   178ea:	42a1      	cmp	r1, r4
   178ec:	d016      	beq.n	1791c <buttons_scan_fn+0x1c0>
	if (button_handler_cb != NULL) {
   178ee:	4b2e      	ldr	r3, [pc, #184]	; (179a8 <buttons_scan_fn+0x24c>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   178f0:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   178f4:	681b      	ldr	r3, [r3, #0]
   178f6:	b113      	cbz	r3, 178fe <buttons_scan_fn+0x1a2>
		button_handler_cb(button_state, has_changed);
   178f8:	4641      	mov	r1, r8
   178fa:	4620      	mov	r0, r4
   178fc:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   178fe:	f04f 33ff 	mov.w	r3, #4294967295
   17902:	f04f 32ff 	mov.w	r2, #4294967295
   17906:	4829      	ldr	r0, [pc, #164]	; (179ac <buttons_scan_fn+0x250>)
   17908:	f00b fb82 	bl	23010 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1790c:	4b28      	ldr	r3, [pc, #160]	; (179b0 <buttons_scan_fn+0x254>)
   1790e:	681d      	ldr	r5, [r3, #0]
   17910:	2d00      	cmp	r5, #0
   17912:	f47f af5e 	bne.w	177d2 <buttons_scan_fn+0x76>
	return z_impl_k_mutex_unlock(mutex);
   17916:	4825      	ldr	r0, [pc, #148]	; (179ac <buttons_scan_fn+0x250>)
   17918:	f00b fc74 	bl	23204 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1791c:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   1791e:	2c00      	cmp	r4, #0
   17920:	f43f af6a 	beq.w	177f8 <buttons_scan_fn+0x9c>
   17924:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17928:	2300      	movs	r3, #0
   1792a:	4922      	ldr	r1, [pc, #136]	; (179b4 <buttons_scan_fn+0x258>)
   1792c:	4822      	ldr	r0, [pc, #136]	; (179b8 <buttons_scan_fn+0x25c>)
   1792e:	f00d fa57 	bl	24de0 <k_delayed_work_submit_to_queue>
		if (err) {
   17932:	b148      	cbz	r0, 17948 <buttons_scan_fn+0x1ec>
   17934:	4913      	ldr	r1, [pc, #76]	; (17984 <buttons_scan_fn+0x228>)
   17936:	4b14      	ldr	r3, [pc, #80]	; (17988 <buttons_scan_fn+0x22c>)
			LOG_ERR("Cannot add work to workqueue");
   17938:	4820      	ldr	r0, [pc, #128]	; (179bc <buttons_scan_fn+0x260>)
   1793a:	1ac9      	subs	r1, r1, r3
   1793c:	08c9      	lsrs	r1, r1, #3
   1793e:	0189      	lsls	r1, r1, #6
   17940:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Cannot enable callbacks");
   17944:	f014 ffe2 	bl	2c90c <log_0>
}
   17948:	b003      	add	sp, #12
   1794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1794e:	bf00      	nop
   17950:	20021698 	.word	0x20021698
   17954:	0003175b 	.word	0x0003175b
   17958:	000319ab 	.word	0x000319ab
   1795c:	0003049a 	.word	0x0003049a
   17960:	000319e9 	.word	0x000319e9
   17964:	200216ec 	.word	0x200216ec
   17968:	0003056a 	.word	0x0003056a
   1796c:	000305bc 	.word	0x000305bc
   17970:	000305d1 	.word	0x000305d1
   17974:	200247fd 	.word	0x200247fd
   17978:	0002f410 	.word	0x0002f410
   1797c:	00030590 	.word	0x00030590
   17980:	000305a7 	.word	0x000305a7
   17984:	0002f064 	.word	0x0002f064
   17988:	0002f034 	.word	0x0002f034
   1798c:	00031a9a 	.word	0x00031a9a
   17990:	00031a2a 	.word	0x00031a2a
   17994:	00033086 	.word	0x00033086
   17998:	00031a68 	.word	0x00031a68
   1799c:	200216f0 	.word	0x200216f0
   179a0:	20020a5c 	.word	0x20020a5c
   179a4:	200216d4 	.word	0x200216d4
   179a8:	200216a8 	.word	0x200216a8
   179ac:	200216ac 	.word	0x200216ac
   179b0:	200216c0 	.word	0x200216c0
   179b4:	20020ec0 	.word	0x20020ec0
   179b8:	20021348 	.word	0x20021348
   179bc:	00031a7d 	.word	0x00031a7d

000179c0 <dk_leds_init>:
{
   179c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   179c2:	2600      	movs	r6, #0
   179c4:	4d18      	ldr	r5, [pc, #96]	; (17a28 <dk_leds_init+0x68>)
   179c6:	4f19      	ldr	r7, [pc, #100]	; (17a2c <dk_leds_init+0x6c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   179c8:	6828      	ldr	r0, [r5, #0]
   179ca:	f00a fe0f 	bl	225ec <z_impl_device_get_binding>
   179ce:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   179d2:	b968      	cbnz	r0, 179f0 <dk_leds_init+0x30>
   179d4:	4b16      	ldr	r3, [pc, #88]	; (17a30 <dk_leds_init+0x70>)
   179d6:	4917      	ldr	r1, [pc, #92]	; (17a34 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   179d8:	4817      	ldr	r0, [pc, #92]	; (17a38 <dk_leds_init+0x78>)
   179da:	1ac9      	subs	r1, r1, r3
   179dc:	08c9      	lsrs	r1, r1, #3
   179de:	0189      	lsls	r1, r1, #6
   179e0:	f041 0101 	orr.w	r1, r1, #1
   179e4:	f014 ff92 	bl	2c90c <log_0>
			return -ENODEV;
   179e8:	f06f 0412 	mvn.w	r4, #18
}
   179ec:	4620      	mov	r0, r4
   179ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   179f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   179f4:	7929      	ldrb	r1, [r5, #4]
   179f6:	f7ff fd91 	bl	1751c <gpio_pin_configure>
		if (err) {
   179fa:	4604      	mov	r4, r0
   179fc:	b150      	cbz	r0, 17a14 <dk_leds_init+0x54>
   179fe:	4b0c      	ldr	r3, [pc, #48]	; (17a30 <dk_leds_init+0x70>)
   17a00:	490c      	ldr	r1, [pc, #48]	; (17a34 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   17a02:	480e      	ldr	r0, [pc, #56]	; (17a3c <dk_leds_init+0x7c>)
   17a04:	1ac9      	subs	r1, r1, r3
   17a06:	08c9      	lsrs	r1, r1, #3
   17a08:	0189      	lsls	r1, r1, #6
   17a0a:	f041 0101 	orr.w	r1, r1, #1
   17a0e:	f014 ff7d 	bl	2c90c <log_0>
			return err;
   17a12:	e7eb      	b.n	179ec <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   17a14:	3601      	adds	r6, #1
   17a16:	2e04      	cmp	r6, #4
   17a18:	f105 0508 	add.w	r5, r5, #8
   17a1c:	d1d4      	bne.n	179c8 <dk_leds_init+0x8>
}
   17a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   17a22:	210f      	movs	r1, #15
   17a24:	f7ff bdd6 	b.w	175d4 <dk_set_leds_state.part.0>
   17a28:	0002f430 	.word	0x0002f430
   17a2c:	200216dc 	.word	0x200216dc
   17a30:	0002f034 	.word	0x0002f034
   17a34:	0002f064 	.word	0x0002f064
   17a38:	00031ab2 	.word	0x00031ab2
   17a3c:	00031aca 	.word	0x00031aca

00017a40 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17a40:	4b05      	ldr	r3, [pc, #20]	; (17a58 <dk_read_buttons+0x18>)
   17a42:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   17a46:	b100      	cbz	r0, 17a4a <dk_read_buttons+0xa>
		*button_state = current_state;
   17a48:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   17a4a:	4804      	ldr	r0, [pc, #16]	; (17a5c <dk_read_buttons+0x1c>)
   17a4c:	b111      	cbz	r1, 17a54 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   17a4e:	6802      	ldr	r2, [r0, #0]
   17a50:	405a      	eors	r2, r3
   17a52:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   17a54:	6003      	str	r3, [r0, #0]
}
   17a56:	4770      	bx	lr
   17a58:	200216f0 	.word	0x200216f0
   17a5c:	200216d8 	.word	0x200216d8

00017a60 <dk_buttons_init>:
{
   17a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   17a64:	4b48      	ldr	r3, [pc, #288]	; (17b88 <dk_buttons_init+0x128>)
   17a66:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   17a68:	4d48      	ldr	r5, [pc, #288]	; (17b8c <dk_buttons_init+0x12c>)
   17a6a:	4f49      	ldr	r7, [pc, #292]	; (17b90 <dk_buttons_init+0x130>)
   17a6c:	4849      	ldr	r0, [pc, #292]	; (17b94 <dk_buttons_init+0x134>)
   17a6e:	f016 ffa5 	bl	2e9bc <z_impl_k_mutex_init>
   17a72:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a74:	2600      	movs	r6, #0
   17a76:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   17a78:	6828      	ldr	r0, [r5, #0]
   17a7a:	f00a fdb7 	bl	225ec <z_impl_device_get_binding>
   17a7e:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   17a82:	b970      	cbnz	r0, 17aa2 <dk_buttons_init+0x42>
   17a84:	4b44      	ldr	r3, [pc, #272]	; (17b98 <dk_buttons_init+0x138>)
   17a86:	4945      	ldr	r1, [pc, #276]	; (17b9c <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot bind gpio device");
   17a88:	4845      	ldr	r0, [pc, #276]	; (17ba0 <dk_buttons_init+0x140>)
   17a8a:	1ac9      	subs	r1, r1, r3
   17a8c:	08c9      	lsrs	r1, r1, #3
   17a8e:	0189      	lsls	r1, r1, #6
   17a90:	f041 0101 	orr.w	r1, r1, #1
   17a94:	f014 ff3a 	bl	2c90c <log_0>
			return -ENODEV;
   17a98:	f06f 0412 	mvn.w	r4, #18
}
   17a9c:	4620      	mov	r0, r4
   17a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   17aa2:	f44f 7288 	mov.w	r2, #272	; 0x110
   17aa6:	7929      	ldrb	r1, [r5, #4]
   17aa8:	f7ff fd38 	bl	1751c <gpio_pin_configure>
		if (err) {
   17aac:	4604      	mov	r4, r0
   17aae:	b150      	cbz	r0, 17ac6 <dk_buttons_init+0x66>
   17ab0:	493a      	ldr	r1, [pc, #232]	; (17b9c <dk_buttons_init+0x13c>)
   17ab2:	4b39      	ldr	r3, [pc, #228]	; (17b98 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot configure button gpio");
   17ab4:	483b      	ldr	r0, [pc, #236]	; (17ba4 <dk_buttons_init+0x144>)
   17ab6:	1ac9      	subs	r1, r1, r3
   17ab8:	08c9      	lsrs	r1, r1, #3
   17aba:	0189      	lsls	r1, r1, #6
   17abc:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Cannot add work to workqueue");
   17ac0:	f014 ff24 	bl	2c90c <log_0>
		return err;
   17ac4:	e7ea      	b.n	17a9c <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17ac6:	3601      	adds	r6, #1
   17ac8:	2e04      	cmp	r6, #4
   17aca:	f105 0508 	add.w	r5, r5, #8
   17ace:	d1d3      	bne.n	17a78 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17ad0:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   17ad2:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   17ad4:	f04f 0b01 	mov.w	fp, #1
   17ad8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 17b90 <dk_buttons_init+0x130>
		err = gpio_pin_interrupt_configure(button_devs[i],
   17adc:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   17ae0:	f85a 0b04 	ldr.w	r0, [sl], #4
   17ae4:	791e      	ldrb	r6, [r3, #4]
   17ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17aea:	4631      	mov	r1, r6
   17aec:	f7ff fc80 	bl	173f0 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   17af0:	4604      	mov	r4, r0
   17af2:	b140      	cbz	r0, 17b06 <dk_buttons_init+0xa6>
   17af4:	4929      	ldr	r1, [pc, #164]	; (17b9c <dk_buttons_init+0x13c>)
   17af6:	4b28      	ldr	r3, [pc, #160]	; (17b98 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot disable callbacks()");
   17af8:	482b      	ldr	r0, [pc, #172]	; (17ba8 <dk_buttons_init+0x148>)
   17afa:	1ac9      	subs	r1, r1, r3
   17afc:	08c9      	lsrs	r1, r1, #3
   17afe:	0189      	lsls	r1, r1, #6
   17b00:	f041 0101 	orr.w	r1, r1, #1
   17b04:	e7dc      	b.n	17ac0 <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b06:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   17b08:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b0c:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   17b0e:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b12:	d1e3      	bne.n	17adc <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b14:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   17b16:	4e25      	ldr	r6, [pc, #148]	; (17bac <dk_buttons_init+0x14c>)
   17b18:	4b25      	ldr	r3, [pc, #148]	; (17bb0 <dk_buttons_init+0x150>)
	callback->pin_mask = pin_mask;
   17b1a:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   17b1e:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   17b22:	6883      	ldr	r3, [r0, #8]
   17b24:	69db      	ldr	r3, [r3, #28]
   17b26:	b16b      	cbz	r3, 17b44 <dk_buttons_init+0xe4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   17b28:	2201      	movs	r2, #1
   17b2a:	4631      	mov	r1, r6
   17b2c:	4798      	blx	r3
		if (err) {
   17b2e:	4604      	mov	r4, r0
   17b30:	b158      	cbz	r0, 17b4a <dk_buttons_init+0xea>
   17b32:	491a      	ldr	r1, [pc, #104]	; (17b9c <dk_buttons_init+0x13c>)
   17b34:	4b18      	ldr	r3, [pc, #96]	; (17b98 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot add callback");
   17b36:	481f      	ldr	r0, [pc, #124]	; (17bb4 <dk_buttons_init+0x154>)
   17b38:	1ac9      	subs	r1, r1, r3
   17b3a:	08c9      	lsrs	r1, r1, #3
   17b3c:	0189      	lsls	r1, r1, #6
   17b3e:	f041 0101 	orr.w	r1, r1, #1
   17b42:	e7bd      	b.n	17ac0 <dk_buttons_init+0x60>
		return -ENOTSUP;
   17b44:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17b48:	e7f3      	b.n	17b32 <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b4a:	3501      	adds	r5, #1
   17b4c:	2d04      	cmp	r5, #4
   17b4e:	d1e6      	bne.n	17b1e <dk_buttons_init+0xbe>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   17b50:	4919      	ldr	r1, [pc, #100]	; (17bb8 <dk_buttons_init+0x158>)
   17b52:	481a      	ldr	r0, [pc, #104]	; (17bbc <dk_buttons_init+0x15c>)
   17b54:	f017 f818 	bl	2eb88 <k_delayed_work_init>
	state = STATE_SCANNING;
   17b58:	2201      	movs	r2, #1
   17b5a:	4b19      	ldr	r3, [pc, #100]	; (17bc0 <dk_buttons_init+0x160>)
   17b5c:	4917      	ldr	r1, [pc, #92]	; (17bbc <dk_buttons_init+0x15c>)
   17b5e:	701a      	strb	r2, [r3, #0]
   17b60:	4818      	ldr	r0, [pc, #96]	; (17bc4 <dk_buttons_init+0x164>)
   17b62:	2200      	movs	r2, #0
   17b64:	2300      	movs	r3, #0
   17b66:	f00d f93b 	bl	24de0 <k_delayed_work_submit_to_queue>
	if (err) {
   17b6a:	4604      	mov	r4, r0
   17b6c:	b140      	cbz	r0, 17b80 <dk_buttons_init+0x120>
   17b6e:	490b      	ldr	r1, [pc, #44]	; (17b9c <dk_buttons_init+0x13c>)
   17b70:	4b09      	ldr	r3, [pc, #36]	; (17b98 <dk_buttons_init+0x138>)
		LOG_ERR("Cannot add work to workqueue");
   17b72:	4815      	ldr	r0, [pc, #84]	; (17bc8 <dk_buttons_init+0x168>)
   17b74:	1ac9      	subs	r1, r1, r3
   17b76:	08c9      	lsrs	r1, r1, #3
   17b78:	0189      	lsls	r1, r1, #6
   17b7a:	f041 0101 	orr.w	r1, r1, #1
   17b7e:	e79f      	b.n	17ac0 <dk_buttons_init+0x60>
	dk_read_buttons(NULL, NULL);
   17b80:	4601      	mov	r1, r0
   17b82:	f7ff ff5d 	bl	17a40 <dk_read_buttons>
	return 0;
   17b86:	e789      	b.n	17a9c <dk_buttons_init+0x3c>
   17b88:	200216a8 	.word	0x200216a8
   17b8c:	0002f410 	.word	0x0002f410
   17b90:	20021698 	.word	0x20021698
   17b94:	200216ac 	.word	0x200216ac
   17b98:	0002f034 	.word	0x0002f034
   17b9c:	0002f064 	.word	0x0002f064
   17ba0:	00031ab2 	.word	0x00031ab2
   17ba4:	00031ae4 	.word	0x00031ae4
   17ba8:	00031b01 	.word	0x00031b01
   17bac:	200216c8 	.word	0x200216c8
   17bb0:	00017645 	.word	0x00017645
   17bb4:	00031b1c 	.word	0x00031b1c
   17bb8:	0001775d 	.word	0x0001775d
   17bbc:	20020ec0 	.word	0x20020ec0
   17bc0:	200247fd 	.word	0x200247fd
   17bc4:	20021348 	.word	0x20021348
   17bc8:	00031a7d 	.word	0x00031a7d

00017bcc <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   17bcc:	2804      	cmp	r0, #4
{
   17bce:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   17bd0:	d90d      	bls.n	17bee <dk_set_led+0x22>
   17bd2:	4b14      	ldr	r3, [pc, #80]	; (17c24 <dk_set_led+0x58>)
   17bd4:	4914      	ldr	r1, [pc, #80]	; (17c28 <dk_set_led+0x5c>)
		LOG_ERR("LED index out of the range");
   17bd6:	4815      	ldr	r0, [pc, #84]	; (17c2c <dk_set_led+0x60>)
   17bd8:	1ac9      	subs	r1, r1, r3
   17bda:	08c9      	lsrs	r1, r1, #3
   17bdc:	0189      	lsls	r1, r1, #6
   17bde:	f041 0101 	orr.w	r1, r1, #1
   17be2:	f014 fe93 	bl	2c90c <log_0>
		return -EINVAL;
   17be6:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   17bea:	4620      	mov	r0, r4
   17bec:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   17bee:	fab1 f281 	clz	r2, r1
   17bf2:	4b0f      	ldr	r3, [pc, #60]	; (17c30 <dk_set_led+0x64>)
   17bf4:	0952      	lsrs	r2, r2, #5
   17bf6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   17bfa:	7919      	ldrb	r1, [r3, #4]
   17bfc:	4b0d      	ldr	r3, [pc, #52]	; (17c34 <dk_set_led+0x68>)
   17bfe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17c02:	f7ff fcbb 	bl	1757c <gpio_pin_set_raw>
	if (err) {
   17c06:	4604      	mov	r4, r0
   17c08:	2800      	cmp	r0, #0
   17c0a:	d0ee      	beq.n	17bea <dk_set_led+0x1e>
   17c0c:	4b05      	ldr	r3, [pc, #20]	; (17c24 <dk_set_led+0x58>)
   17c0e:	4906      	ldr	r1, [pc, #24]	; (17c28 <dk_set_led+0x5c>)
		LOG_ERR("Cannot write LED gpio");
   17c10:	4809      	ldr	r0, [pc, #36]	; (17c38 <dk_set_led+0x6c>)
   17c12:	1ac9      	subs	r1, r1, r3
   17c14:	08c9      	lsrs	r1, r1, #3
   17c16:	0189      	lsls	r1, r1, #6
   17c18:	f041 0101 	orr.w	r1, r1, #1
   17c1c:	f014 fe76 	bl	2c90c <log_0>
   17c20:	e7e3      	b.n	17bea <dk_set_led+0x1e>
   17c22:	bf00      	nop
   17c24:	0002f034 	.word	0x0002f034
   17c28:	0002f064 	.word	0x0002f064
   17c2c:	00031b30 	.word	0x00031b30
   17c30:	0002f430 	.word	0x0002f430
   17c34:	200216dc 	.word	0x200216dc
   17c38:	000319fb 	.word	0x000319fb

00017c3c <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   17c3c:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   17c3e:	f240 2201 	movw	r2, #513	; 0x201
   17c42:	2102      	movs	r1, #2
   17c44:	2066      	movs	r0, #102	; 0x66
   17c46:	f7fb fef1 	bl	13a2c <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   17c4a:	4b05      	ldr	r3, [pc, #20]	; (17c60 <open_socket+0x24>)
   17c4c:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   17c4e:	3001      	adds	r0, #1
   17c50:	d104      	bne.n	17c5c <open_socket+0x20>
		return -errno;
   17c52:	f015 fa5c 	bl	2d10e <__errno>
   17c56:	6800      	ldr	r0, [r0, #0]
   17c58:	4240      	negs	r0, r0
	}

	return 0;
}
   17c5a:	bd08      	pop	{r3, pc}
	return 0;
   17c5c:	2000      	movs	r0, #0
   17c5e:	e7fc      	b.n	17c5a <open_socket+0x1e>
   17c60:	200216f8 	.word	0x200216f8

00017c64 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   17c64:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   17c66:	4d18      	ldr	r5, [pc, #96]	; (17cc8 <at_cmd_driver_init+0x64>)
{
   17c68:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   17c6a:	782b      	ldrb	r3, [r5, #0]
   17c6c:	bb53      	cbnz	r3, 17cc4 <at_cmd_driver_init+0x60>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   17c6e:	f7ff ffe5 	bl	17c3c <open_socket>
	if (err) {
   17c72:	4604      	mov	r4, r0
   17c74:	b168      	cbz	r0, 17c92 <at_cmd_driver_init+0x2e>
   17c76:	4a15      	ldr	r2, [pc, #84]	; (17ccc <at_cmd_driver_init+0x68>)
   17c78:	4b15      	ldr	r3, [pc, #84]	; (17cd0 <at_cmd_driver_init+0x6c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   17c7a:	4601      	mov	r1, r0
   17c7c:	1ad2      	subs	r2, r2, r3
   17c7e:	08d2      	lsrs	r2, r2, #3
   17c80:	0192      	lsls	r2, r2, #6
   17c82:	4814      	ldr	r0, [pc, #80]	; (17cd4 <at_cmd_driver_init+0x70>)
   17c84:	f042 0201 	orr.w	r2, r2, #1
   17c88:	f014 fe4f 	bl	2c92a <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   17c8c:	4620      	mov	r0, r4
   17c8e:	b009      	add	sp, #36	; 0x24
   17c90:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17c92:	2200      	movs	r2, #0
   17c94:	2300      	movs	r3, #0
   17c96:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17c9a:	230a      	movs	r3, #10
   17c9c:	e9cd 0000 	strd	r0, r0, [sp]
   17ca0:	e9cd 0302 	strd	r0, r3, [sp, #8]
   17ca4:	9004      	str	r0, [sp, #16]
   17ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17caa:	4b0b      	ldr	r3, [pc, #44]	; (17cd8 <at_cmd_driver_init+0x74>)
   17cac:	490b      	ldr	r1, [pc, #44]	; (17cdc <at_cmd_driver_init+0x78>)
   17cae:	480c      	ldr	r0, [pc, #48]	; (17ce0 <at_cmd_driver_init+0x7c>)
   17cb0:	f00c ff6a 	bl	24b88 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   17cb4:	4b0b      	ldr	r3, [pc, #44]	; (17ce4 <at_cmd_driver_init+0x80>)
   17cb6:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread_id, value);
   17cb8:	490b      	ldr	r1, [pc, #44]	; (17ce8 <at_cmd_driver_init+0x84>)
   17cba:	f016 ff04 	bl	2eac6 <z_impl_k_thread_name_set>
	initialized = true;
   17cbe:	2301      	movs	r3, #1
   17cc0:	702b      	strb	r3, [r5, #0]
	return 0;
   17cc2:	e7e3      	b.n	17c8c <at_cmd_driver_init+0x28>
		return 0;
   17cc4:	2400      	movs	r4, #0
   17cc6:	e7e1      	b.n	17c8c <at_cmd_driver_init+0x28>
   17cc8:	2002528a 	.word	0x2002528a
   17ccc:	0002f034 	.word	0x0002f034
   17cd0:	0002f034 	.word	0x0002f034
   17cd4:	00031b5f 	.word	0x00031b5f
   17cd8:	00017e0d 	.word	0x00017e0d
   17cdc:	20027738 	.word	0x20027738
   17ce0:	20020ef0 	.word	0x20020ef0
   17ce4:	20021720 	.word	0x20021720
   17ce8:	00031b81 	.word	0x00031b81

00017cec <complete_cmd>:
{
   17cec:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   17cee:	4c08      	ldr	r4, [pc, #32]	; (17d10 <complete_cmd+0x24>)
   17cf0:	f04f 32ff 	mov.w	r2, #4294967295
   17cf4:	f04f 33ff 	mov.w	r3, #4294967295
   17cf8:	4620      	mov	r0, r4
   17cfa:	f00b f989 	bl	23010 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   17cfe:	2200      	movs	r2, #0
   17d00:	4b04      	ldr	r3, [pc, #16]	; (17d14 <complete_cmd+0x28>)
   17d02:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   17d04:	4620      	mov	r0, r4
}
   17d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17d0a:	f00b ba7b 	b.w	23204 <z_impl_k_mutex_unlock>
   17d0e:	bf00      	nop
   17d10:	20020b68 	.word	0x20020b68
   17d14:	200216fc 	.word	0x200216fc

00017d18 <load_cmd_and_write>:
{
   17d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d1c:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   17d1e:	4e32      	ldr	r6, [pc, #200]	; (17de8 <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   17d20:	f04f 33ff 	mov.w	r3, #4294967295
   17d24:	4637      	mov	r7, r6
   17d26:	f04f 32ff 	mov.w	r2, #4294967295
   17d2a:	4830      	ldr	r0, [pc, #192]	; (17dec <load_cmd_and_write+0xd4>)
   17d2c:	f00b f970 	bl	23010 <z_impl_k_mutex_lock>
   17d30:	4d2f      	ldr	r5, [pc, #188]	; (17df0 <load_cmd_and_write+0xd8>)
   17d32:	4b30      	ldr	r3, [pc, #192]	; (17df4 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   17d34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 17e08 <load_cmd_and_write+0xf0>
   17d38:	1aed      	subs	r5, r5, r3
   17d3a:	08ed      	lsrs	r5, r5, #3
   17d3c:	6833      	ldr	r3, [r6, #0]
   17d3e:	2b00      	cmp	r3, #0
   17d40:	d14b      	bne.n	17dda <load_cmd_and_write+0xc2>
   17d42:	2200      	movs	r2, #0
   17d44:	2300      	movs	r3, #0
   17d46:	4631      	mov	r1, r6
   17d48:	4640      	mov	r0, r8
   17d4a:	f00b f8b3 	bl	22eb4 <z_impl_k_msgq_get>
   17d4e:	4604      	mov	r4, r0
   17d50:	2800      	cmp	r0, #0
   17d52:	d142      	bne.n	17dda <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   17d54:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   17d56:	4608      	mov	r0, r1
   17d58:	9103      	str	r1, [sp, #12]
   17d5a:	f00e ff7d 	bl	26c58 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   17d5e:	4b26      	ldr	r3, [pc, #152]	; (17df8 <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   17d60:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   17d62:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   17d64:	9903      	ldr	r1, [sp, #12]
   17d66:	4623      	mov	r3, r4
   17d68:	e9cd 4400 	strd	r4, r4, [sp]
   17d6c:	9202      	str	r2, [sp, #8]
   17d6e:	f015 f8ba 	bl	2cee6 <z_impl_zsock_sendto>
   17d72:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   17d74:	1c48      	adds	r0, r1, #1
   17d76:	9a02      	ldr	r2, [sp, #8]
   17d78:	d126      	bne.n	17dc8 <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   17d7a:	f015 f9c8 	bl	2d10e <__errno>
   17d7e:	01ac      	lsls	r4, r5, #6
   17d80:	f044 0401 	orr.w	r4, r4, #1
   17d84:	4622      	mov	r2, r4
   17d86:	6801      	ldr	r1, [r0, #0]
   17d88:	481c      	ldr	r0, [pc, #112]	; (17dfc <load_cmd_and_write+0xe4>)
   17d8a:	f014 fdce 	bl	2c92a <log_1>
		return -errno;
   17d8e:	f015 f9be 	bl	2d10e <__errno>
   17d92:	6804      	ldr	r4, [r0, #0]
   17d94:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   17d96:	7c3b      	ldrb	r3, [r7, #16]
   17d98:	07da      	lsls	r2, r3, #31
   17d9a:	d502      	bpl.n	17da2 <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   17d9c:	6838      	ldr	r0, [r7, #0]
   17d9e:	f016 ffca 	bl	2ed36 <k_free>
		if (ret != 0) {
   17da2:	b1d4      	cbz	r4, 17dda <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   17da4:	2305      	movs	r3, #5
   17da6:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   17daa:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   17dac:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   17dae:	079b      	lsls	r3, r3, #30
   17db0:	d507      	bpl.n	17dc2 <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   17db2:	f04f 32ff 	mov.w	r2, #4294967295
   17db6:	f04f 33ff 	mov.w	r3, #4294967295
   17dba:	4811      	ldr	r0, [pc, #68]	; (17e00 <load_cmd_and_write+0xe8>)
   17dbc:	a904      	add	r1, sp, #16
   17dbe:	f00a ffd7 	bl	22d70 <z_impl_k_msgq_put>
			complete_cmd();
   17dc2:	f7ff ff93 	bl	17cec <complete_cmd>
	} while (ret != 0);
   17dc6:	e7b9      	b.n	17d3c <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   17dc8:	428a      	cmp	r2, r1
   17dca:	d0e4      	beq.n	17d96 <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   17dcc:	01ab      	lsls	r3, r5, #6
   17dce:	480d      	ldr	r0, [pc, #52]	; (17e04 <load_cmd_and_write+0xec>)
   17dd0:	f043 0302 	orr.w	r3, r3, #2
   17dd4:	f014 fdc0 	bl	2c958 <log_2>
   17dd8:	e7dd      	b.n	17d96 <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   17dda:	4804      	ldr	r0, [pc, #16]	; (17dec <load_cmd_and_write+0xd4>)
   17ddc:	f00b fa12 	bl	23204 <z_impl_k_mutex_unlock>
}
   17de0:	b006      	add	sp, #24
   17de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17de6:	bf00      	nop
   17de8:	200216fc 	.word	0x200216fc
   17dec:	20020b68 	.word	0x20020b68
   17df0:	0002f034 	.word	0x0002f034
   17df4:	0002f034 	.word	0x0002f034
   17df8:	200216f8 	.word	0x200216f8
   17dfc:	00031b96 	.word	0x00031b96
   17e00:	20020bf8 	.word	0x20020bf8
   17e04:	00031bb9 	.word	0x00031bb9
   17e08:	20020bcc 	.word	0x20020bcc

00017e0c <socket_thread_fn>:
{
   17e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e10:	f8df 9260 	ldr.w	r9, [pc, #608]	; 18074 <socket_thread_fn+0x268>
   17e14:	4f83      	ldr	r7, [pc, #524]	; (18024 <socket_thread_fn+0x218>)
   17e16:	46ca      	mov	sl, r9
   17e18:	4b83      	ldr	r3, [pc, #524]	; (18028 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   17e1a:	4e84      	ldr	r6, [pc, #528]	; (1802c <socket_thread_fn+0x220>)
   17e1c:	1aff      	subs	r7, r7, r3
   17e1e:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   17e20:	f7ff ff7a 	bl	17d18 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e24:	f8d9 0000 	ldr.w	r0, [r9]
   17e28:	2500      	movs	r5, #0
   17e2a:	f640 228c 	movw	r2, #2700	; 0xa8c
   17e2e:	462b      	mov	r3, r5
   17e30:	e9cd 5500 	strd	r5, r5, [sp]
   17e34:	497d      	ldr	r1, [pc, #500]	; (1802c <socket_thread_fn+0x220>)
   17e36:	f015 f889 	bl	2cf4c <z_impl_zsock_recvfrom>
		ret.code  = 0;
   17e3a:	4c7d      	ldr	r4, [pc, #500]	; (18030 <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e3c:	f8df b238 	ldr.w	fp, [pc, #568]	; 18078 <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   17e40:	42a8      	cmp	r0, r5
   17e42:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e44:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   17e48:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   17e4a:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   17e4c:	da6a      	bge.n	17f24 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   17e4e:	f015 f95e 	bl	2d10e <__errno>
   17e52:	6803      	ldr	r3, [r0, #0]
   17e54:	2b75      	cmp	r3, #117	; 0x75
   17e56:	d122      	bne.n	17e9e <socket_thread_fn+0x92>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17e58:	2301      	movs	r3, #1
   17e5a:	4c76      	ldr	r4, [pc, #472]	; (18034 <socket_thread_fn+0x228>)
   17e5c:	e8d4 2fef 	ldaex	r2, [r4]
   17e60:	e8c4 3fe1 	stlex	r1, r3, [r4]
   17e64:	2900      	cmp	r1, #0
   17e66:	d1f9      	bne.n	17e5c <socket_thread_fn+0x50>
				close(common_socket_fd);
   17e68:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   17e6c:	f015 f80e 	bl	2ce8c <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   17e70:	f7fe fd3c 	bl	168ec <bsdlib_shutdown_wait>
   17e74:	e8d4 3fef 	ldaex	r3, [r4]
   17e78:	e8c4 5fe2 	stlex	r2, r5, [r4]
   17e7c:	2a00      	cmp	r2, #0
   17e7e:	d1f9      	bne.n	17e74 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   17e80:	f7ff fedc 	bl	17c3c <open_socket>
   17e84:	2800      	cmp	r0, #0
   17e86:	d0cb      	beq.n	17e20 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   17e88:	f015 f941 	bl	2d10e <__errno>
   17e8c:	01bc      	lsls	r4, r7, #6
   17e8e:	f044 0401 	orr.w	r4, r4, #1
   17e92:	6801      	ldr	r1, [r0, #0]
   17e94:	4622      	mov	r2, r4
   17e96:	4868      	ldr	r0, [pc, #416]	; (18038 <socket_thread_fn+0x22c>)
   17e98:	f014 fd47 	bl	2c92a <log_1>
   17e9c:	e7c0      	b.n	17e20 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   17e9e:	01bd      	lsls	r5, r7, #6
   17ea0:	f8db 1000 	ldr.w	r1, [fp]
   17ea4:	4865      	ldr	r0, [pc, #404]	; (1803c <socket_thread_fn+0x230>)
   17ea6:	f045 0201 	orr.w	r2, r5, #1
   17eaa:	f014 fd3e 	bl	2c92a <log_1>
			if ((close(common_socket_fd) == 0) &&
   17eae:	f8d9 0000 	ldr.w	r0, [r9]
   17eb2:	f014 ffeb 	bl	2ce8c <z_impl_zsock_close>
   17eb6:	bb28      	cbnz	r0, 17f04 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   17eb8:	f7ff fec0 	bl	17c3c <open_socket>
			if ((close(common_socket_fd) == 0) &&
   17ebc:	bb10      	cbnz	r0, 17f04 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   17ebe:	4860      	ldr	r0, [pc, #384]	; (18040 <socket_thread_fn+0x234>)
   17ec0:	f045 0103 	orr.w	r1, r5, #3
   17ec4:	f014 fd22 	bl	2c90c <log_0>
				ret.state = AT_CMD_ERROR_READ;
   17ec8:	2306      	movs	r3, #6
   17eca:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   17ecc:	f015 f91f 	bl	2d10e <__errno>
   17ed0:	6803      	ldr	r3, [r0, #0]
   17ed2:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   17ed4:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   17ed6:	4b5b      	ldr	r3, [pc, #364]	; (18044 <socket_thread_fn+0x238>)
   17ed8:	681a      	ldr	r2, [r3, #0]
   17eda:	b16a      	cbz	r2, 17ef8 <socket_thread_fn+0xec>
   17edc:	7c1b      	ldrb	r3, [r3, #16]
   17ede:	079b      	lsls	r3, r3, #30
   17ee0:	d50a      	bpl.n	17ef8 <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   17ee2:	7923      	ldrb	r3, [r4, #4]
   17ee4:	2b07      	cmp	r3, #7
   17ee6:	d09b      	beq.n	17e20 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   17ee8:	f04f 32ff 	mov.w	r2, #4294967295
   17eec:	f04f 33ff 	mov.w	r3, #4294967295
   17ef0:	494f      	ldr	r1, [pc, #316]	; (18030 <socket_thread_fn+0x224>)
   17ef2:	4855      	ldr	r0, [pc, #340]	; (18048 <socket_thread_fn+0x23c>)
   17ef4:	f00a ff3c 	bl	22d70 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   17ef8:	7923      	ldrb	r3, [r4, #4]
   17efa:	2b07      	cmp	r3, #7
   17efc:	d090      	beq.n	17e20 <socket_thread_fn+0x14>
			complete_cmd();
   17efe:	f7ff fef5 	bl	17cec <complete_cmd>
   17f02:	e78d      	b.n	17e20 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   17f04:	f015 f903 	bl	2d10e <__errno>
   17f08:	f045 0501 	orr.w	r5, r5, #1
   17f0c:	6801      	ldr	r1, [r0, #0]
   17f0e:	462a      	mov	r2, r5
   17f10:	484e      	ldr	r0, [pc, #312]	; (1804c <socket_thread_fn+0x240>)
   17f12:	f014 fd0a 	bl	2c92a <log_1>
			close(common_socket_fd);
   17f16:	f8da 0000 	ldr.w	r0, [sl]
}
   17f1a:	b003      	add	sp, #12
   17f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f20:	f014 bfb4 	b.w	2ce8c <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   17f24:	d10a      	bne.n	17f3c <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   17f26:	01b9      	lsls	r1, r7, #6
   17f28:	4849      	ldr	r0, [pc, #292]	; (18050 <socket_thread_fn+0x244>)
   17f2a:	f041 0101 	orr.w	r1, r1, #1
   17f2e:	f014 fced 	bl	2c90c <log_0>
			ret.state = AT_CMD_ERROR_READ;
   17f32:	2306      	movs	r3, #6
   17f34:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   17f36:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   17f3a:	e7cb      	b.n	17ed4 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   17f3c:	1833      	adds	r3, r6, r0
   17f3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   17f42:	b153      	cbz	r3, 17f5a <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   17f44:	01b9      	lsls	r1, r7, #6
   17f46:	4843      	ldr	r0, [pc, #268]	; (18054 <socket_thread_fn+0x248>)
   17f48:	f041 0101 	orr.w	r1, r1, #1
   17f4c:	f014 fcde 	bl	2c90c <log_0>
			ret.state = AT_CMD_ERROR_READ;
   17f50:	2306      	movs	r3, #6
   17f52:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   17f54:	f06f 0368 	mvn.w	r3, #104	; 0x68
   17f58:	e7bc      	b.n	17ed4 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   17f5a:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   17f5c:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17f5e:	483e      	ldr	r0, [pc, #248]	; (18058 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   17f60:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17f62:	f00e fe79 	bl	26c58 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   17f66:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17f68:	4602      	mov	r2, r0
   17f6a:	493b      	ldr	r1, [pc, #236]	; (18058 <socket_thread_fn+0x24c>)
   17f6c:	4628      	mov	r0, r5
   17f6e:	f00e fea1 	bl	26cb4 <strncmp>
		if (match) {
   17f72:	b9c0      	cbnz	r0, 17fa6 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   17f74:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17f76:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   17f78:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   17f7a:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   17f7c:	3201      	adds	r2, #1
   17f7e:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   17f80:	4d30      	ldr	r5, [pc, #192]	; (18044 <socket_thread_fn+0x238>)
   17f82:	682b      	ldr	r3, [r5, #0]
   17f84:	2b00      	cmp	r3, #0
   17f86:	d043      	beq.n	18010 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   17f88:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   17f8a:	2800      	cmp	r0, #0
   17f8c:	d040      	beq.n	18010 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   17f8e:	7923      	ldrb	r3, [r4, #4]
   17f90:	2b07      	cmp	r3, #7
   17f92:	d12e      	bne.n	17ff2 <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   17f94:	4b31      	ldr	r3, [pc, #196]	; (1805c <socket_thread_fn+0x250>)
   17f96:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   17f98:	b913      	cbnz	r3, 17fa0 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   17f9a:	68ab      	ldr	r3, [r5, #8]
   17f9c:	2b00      	cmp	r3, #0
   17f9e:	d09a      	beq.n	17ed6 <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   17fa0:	4630      	mov	r0, r6
   17fa2:	4798      	blx	r3
   17fa4:	e797      	b.n	17ed6 <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   17fa6:	4630      	mov	r0, r6
   17fa8:	492d      	ldr	r1, [pc, #180]	; (18060 <socket_thread_fn+0x254>)
   17faa:	f00f f84f 	bl	2704c <strstr>
		if (tmpstr) {
   17fae:	4605      	mov	r5, r0
   17fb0:	b128      	cbz	r0, 17fbe <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   17fb2:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17fb4:	482b      	ldr	r0, [pc, #172]	; (18064 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   17fb6:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17fb8:	f00d fedc 	bl	25d74 <atoi>
   17fbc:	e7db      	b.n	17f76 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   17fbe:	4630      	mov	r0, r6
   17fc0:	4929      	ldr	r1, [pc, #164]	; (18068 <socket_thread_fn+0x25c>)
   17fc2:	f00f f843 	bl	2704c <strstr>
		if (tmpstr) {
   17fc6:	4605      	mov	r5, r0
   17fc8:	b108      	cbz	r0, 17fce <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   17fca:	2303      	movs	r3, #3
   17fcc:	e7f2      	b.n	17fb4 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   17fce:	4827      	ldr	r0, [pc, #156]	; (1806c <socket_thread_fn+0x260>)
   17fd0:	f00e fe42 	bl	26c58 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   17fd4:	f1a8 0508 	sub.w	r5, r8, #8
   17fd8:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   17fda:	4602      	mov	r2, r0
   17fdc:	4923      	ldr	r1, [pc, #140]	; (1806c <socket_thread_fn+0x260>)
   17fde:	4628      	mov	r0, r5
   17fe0:	f00e fe68 	bl	26cb4 <strncmp>
		if (match) {
   17fe4:	b9c0      	cbnz	r0, 18018 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   17fe6:	2301      	movs	r3, #1
   17fe8:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   17fea:	f06f 0307 	mvn.w	r3, #7
   17fee:	6023      	str	r3, [r4, #0]
			break;
   17ff0:	e7c2      	b.n	17f78 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   17ff2:	68eb      	ldr	r3, [r5, #12]
   17ff4:	429a      	cmp	r2, r3
   17ff6:	d908      	bls.n	1800a <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   17ff8:	01b9      	lsls	r1, r7, #6
   17ffa:	481d      	ldr	r0, [pc, #116]	; (18070 <socket_thread_fn+0x264>)
   17ffc:	f041 0101 	orr.w	r1, r1, #1
   18000:	f014 fc84 	bl	2c90c <log_0>
				ret.code  = -EMSGSIZE;
   18004:	f06f 0379 	mvn.w	r3, #121	; 0x79
   18008:	e764      	b.n	17ed4 <socket_thread_fn+0xc8>
   1800a:	4631      	mov	r1, r6
   1800c:	f7f4 fd9e 	bl	cb4c <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   18010:	7923      	ldrb	r3, [r4, #4]
   18012:	2b07      	cmp	r3, #7
   18014:	d1c1      	bne.n	17f9a <socket_thread_fn+0x18e>
   18016:	e7bd      	b.n	17f94 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   18018:	4630      	mov	r0, r6
   1801a:	f00e fe1d 	bl	26c58 <strlen>
   1801e:	1c42      	adds	r2, r0, #1
   18020:	e7ae      	b.n	17f80 <socket_thread_fn+0x174>
   18022:	bf00      	nop
   18024:	0002f034 	.word	0x0002f034
   18028:	0002f034 	.word	0x0002f034
   1802c:	200247fe 	.word	0x200247fe
   18030:	20021714 	.word	0x20021714
   18034:	2002171c 	.word	0x2002171c
   18038:	00031beb 	.word	0x00031beb
   1803c:	00031c1f 	.word	0x00031c1f
   18040:	00031c41 	.word	0x00031c41
   18044:	200216fc 	.word	0x200216fc
   18048:	20020bf8 	.word	0x20020bf8
   1804c:	00031c55 	.word	0x00031c55
   18050:	00031c8c 	.word	0x00031c8c
   18054:	00031c9d 	.word	0x00031c9d
   18058:	00031ce8 	.word	0x00031ce8
   1805c:	20021710 	.word	0x20021710
   18060:	00031ced 	.word	0x00031ced
   18064:	20024809 	.word	0x20024809
   18068:	00031cf9 	.word	0x00031cf9
   1806c:	00031d05 	.word	0x00031d05
   18070:	00031d0d 	.word	0x00031d0d
   18074:	200216f8 	.word	0x200216f8
   18078:	200216f4 	.word	0x200216f4

0001807c <at_cmd_write>:
{
   1807c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1807e:	4605      	mov	r5, r0
   18080:	460f      	mov	r7, r1
   18082:	4616      	mov	r6, r2
   18084:	461c      	mov	r4, r3
   18086:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18088:	4b3c      	ldr	r3, [pc, #240]	; (1817c <at_cmd_write+0x100>)
   1808a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   1808e:	2b01      	cmp	r3, #1
   18090:	d071      	beq.n	18176 <at_cmd_write+0xfa>
	return z_impl_k_current_get();
   18092:	f00c fc31 	bl	248f8 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   18096:	4b3a      	ldr	r3, [pc, #232]	; (18180 <at_cmd_write+0x104>)
   18098:	681b      	ldr	r3, [r3, #0]
   1809a:	4283      	cmp	r3, r0
   1809c:	d10e      	bne.n	180bc <at_cmd_write+0x40>
   1809e:	4939      	ldr	r1, [pc, #228]	; (18184 <at_cmd_write+0x108>)
   180a0:	f44f 73c1 	mov.w	r3, #386	; 0x182
   180a4:	4a38      	ldr	r2, [pc, #224]	; (18188 <at_cmd_write+0x10c>)
   180a6:	4839      	ldr	r0, [pc, #228]	; (1818c <at_cmd_write+0x110>)
   180a8:	f014 f9e3 	bl	2c472 <printk>
   180ac:	4838      	ldr	r0, [pc, #224]	; (18190 <at_cmd_write+0x114>)
   180ae:	f014 f9e0 	bl	2c472 <printk>
   180b2:	f44f 71c1 	mov.w	r1, #386	; 0x182
   180b6:	4834      	ldr	r0, [pc, #208]	; (18188 <at_cmd_write+0x10c>)
   180b8:	f014 fbf8 	bl	2c8ac <assert_post_action>
	if (cmd == NULL) {
   180bc:	b165      	cbz	r5, 180d8 <at_cmd_write+0x5c>
   180be:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   180c0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   180c4:	b9d3      	cbnz	r3, 180fc <at_cmd_write+0x80>
   180c6:	4933      	ldr	r1, [pc, #204]	; (18194 <at_cmd_write+0x118>)
   180c8:	4b33      	ldr	r3, [pc, #204]	; (18198 <at_cmd_write+0x11c>)
		LOG_ERR("Invalid command");
   180ca:	4834      	ldr	r0, [pc, #208]	; (1819c <at_cmd_write+0x120>)
   180cc:	1ac9      	subs	r1, r1, r3
   180ce:	08c9      	lsrs	r1, r1, #3
   180d0:	0189      	lsls	r1, r1, #6
   180d2:	f041 0101 	orr.w	r1, r1, #1
   180d6:	e007      	b.n	180e8 <at_cmd_write+0x6c>
   180d8:	492e      	ldr	r1, [pc, #184]	; (18194 <at_cmd_write+0x118>)
   180da:	4b2f      	ldr	r3, [pc, #188]	; (18198 <at_cmd_write+0x11c>)
		LOG_ERR("cmd is NULL");
   180dc:	4830      	ldr	r0, [pc, #192]	; (181a0 <at_cmd_write+0x124>)
   180de:	1ac9      	subs	r1, r1, r3
   180e0:	08c9      	lsrs	r1, r1, #3
   180e2:	0189      	lsls	r1, r1, #6
   180e4:	f041 0101 	orr.w	r1, r1, #1
   180e8:	f014 fc10 	bl	2c90c <log_0>
		if (state) {
   180ec:	b91c      	cbnz	r4, 180f6 <at_cmd_write+0x7a>
		return -EINVAL;
   180ee:	f06f 0015 	mvn.w	r0, #21
}
   180f2:	b009      	add	sp, #36	; 0x24
   180f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   180f6:	2304      	movs	r3, #4
   180f8:	7023      	strb	r3, [r4, #0]
   180fa:	e7f8      	b.n	180ee <at_cmd_write+0x72>
		if (*c > ' ') {
   180fc:	2b20      	cmp	r3, #32
   180fe:	d9df      	bls.n	180c0 <at_cmd_write+0x44>
	command.callback = NULL;
   18100:	2300      	movs	r3, #0
   18102:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   18104:	2302      	movs	r3, #2
	command.resp = buf;
   18106:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   1810a:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   1810c:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   18110:	f04f 32ff 	mov.w	r2, #4294967295
   18114:	f04f 33ff 	mov.w	r3, #4294967295
   18118:	4822      	ldr	r0, [pc, #136]	; (181a4 <at_cmd_write+0x128>)
   1811a:	f00a ff79 	bl	23010 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   1811e:	f04f 32ff 	mov.w	r2, #4294967295
   18122:	a903      	add	r1, sp, #12
   18124:	f04f 33ff 	mov.w	r3, #4294967295
   18128:	481f      	ldr	r0, [pc, #124]	; (181a8 <at_cmd_write+0x12c>)
   1812a:	f00a fe21 	bl	22d70 <z_impl_k_msgq_put>
   1812e:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   18130:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   18132:	b170      	cbz	r0, 18152 <at_cmd_write+0xd6>
   18134:	4a17      	ldr	r2, [pc, #92]	; (18194 <at_cmd_write+0x118>)
   18136:	4b18      	ldr	r3, [pc, #96]	; (18198 <at_cmd_write+0x11c>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   18138:	481c      	ldr	r0, [pc, #112]	; (181ac <at_cmd_write+0x130>)
   1813a:	1ad2      	subs	r2, r2, r3
   1813c:	08d2      	lsrs	r2, r2, #3
   1813e:	0192      	lsls	r2, r2, #6
   18140:	f042 0201 	orr.w	r2, r2, #1
   18144:	f014 fbf1 	bl	2c92a <log_1>
		if (state) {
   18148:	b10c      	cbz	r4, 1814e <at_cmd_write+0xd2>
			*state = AT_CMD_ERROR_QUEUE;
   1814a:	2304      	movs	r3, #4
		*state = ret.state;
   1814c:	7023      	strb	r3, [r4, #0]
	return ret.code;
   1814e:	9801      	ldr	r0, [sp, #4]
   18150:	e7cf      	b.n	180f2 <at_cmd_write+0x76>
	load_cmd_and_write();
   18152:	f7ff fde1 	bl	17d18 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   18156:	f04f 32ff 	mov.w	r2, #4294967295
   1815a:	f04f 33ff 	mov.w	r3, #4294967295
   1815e:	a901      	add	r1, sp, #4
   18160:	4813      	ldr	r0, [pc, #76]	; (181b0 <at_cmd_write+0x134>)
   18162:	f00a fea7 	bl	22eb4 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   18166:	480f      	ldr	r0, [pc, #60]	; (181a4 <at_cmd_write+0x128>)
   18168:	f00b f84c 	bl	23204 <z_impl_k_mutex_unlock>
	if (state) {
   1816c:	2c00      	cmp	r4, #0
   1816e:	d0ee      	beq.n	1814e <at_cmd_write+0xd2>
		*state = ret.state;
   18170:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18174:	e7ea      	b.n	1814c <at_cmd_write+0xd0>
		return -EHOSTDOWN;
   18176:	f06f 0074 	mvn.w	r0, #116	; 0x74
   1817a:	e7ba      	b.n	180f2 <at_cmd_write+0x76>
   1817c:	2002171c 	.word	0x2002171c
   18180:	20021720 	.word	0x20021720
   18184:	00031d6e 	.word	0x00031d6e
   18188:	00031d4a 	.word	0x00031d4a
   1818c:	0003049a 	.word	0x0003049a
   18190:	00031d8c 	.word	0x00031d8c
   18194:	0002f034 	.word	0x0002f034
   18198:	0002f034 	.word	0x0002f034
   1819c:	00031d3a 	.word	0x00031d3a
   181a0:	00031d2e 	.word	0x00031d2e
   181a4:	20020ba4 	.word	0x20020ba4
   181a8:	20020bcc 	.word	0x20020bcc
   181ac:	00031dbc 	.word	0x00031dbc
   181b0:	20020bf8 	.word	0x20020bf8

000181b4 <at_cmd_set_notification_handler>:
{
   181b4:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   181b6:	4c09      	ldr	r4, [pc, #36]	; (181dc <at_cmd_set_notification_handler+0x28>)
{
   181b8:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   181ba:	6821      	ldr	r1, [r4, #0]
   181bc:	b159      	cbz	r1, 181d6 <at_cmd_set_notification_handler+0x22>
   181be:	4281      	cmp	r1, r0
   181c0:	d009      	beq.n	181d6 <at_cmd_set_notification_handler+0x22>
   181c2:	4a07      	ldr	r2, [pc, #28]	; (181e0 <at_cmd_set_notification_handler+0x2c>)
   181c4:	4b07      	ldr	r3, [pc, #28]	; (181e4 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   181c6:	4808      	ldr	r0, [pc, #32]	; (181e8 <at_cmd_set_notification_handler+0x34>)
   181c8:	1ad2      	subs	r2, r2, r3
   181ca:	08d2      	lsrs	r2, r2, #3
   181cc:	0192      	lsls	r2, r2, #6
   181ce:	f042 0202 	orr.w	r2, r2, #2
   181d2:	f014 fbaa 	bl	2c92a <log_1>
	notification_handler = handler;
   181d6:	6025      	str	r5, [r4, #0]
}
   181d8:	bd38      	pop	{r3, r4, r5, pc}
   181da:	bf00      	nop
   181dc:	20021710 	.word	0x20021710
   181e0:	0002f034 	.word	0x0002f034
   181e4:	0002f034 	.word	0x0002f034
   181e8:	00031ddc 	.word	0x00031ddc

000181ec <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   181ec:	4b0f      	ldr	r3, [pc, #60]	; (1822c <find_node+0x40>)
{
   181ee:	b570      	push	{r4, r5, r6, lr}
   181f0:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   181f2:	6818      	ldr	r0, [r3, #0]
   181f4:	b170      	cbz	r0, 18214 <find_node+0x28>
   181f6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   181f8:	4603      	mov	r3, r0
   181fa:	2d00      	cmp	r5, #0
   181fc:	4628      	mov	r0, r5
   181fe:	bf38      	it	cc
   18200:	2000      	movcc	r0, #0
   18202:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   18204:	685e      	ldr	r6, [r3, #4]
   18206:	428e      	cmp	r6, r1
   18208:	d105      	bne.n	18216 <find_node+0x2a>
   1820a:	689e      	ldr	r6, [r3, #8]
   1820c:	4296      	cmp	r6, r2
   1820e:	d102      	bne.n	18216 <find_node+0x2a>
			*prev_out = prev;
			return curr;
   18210:	4618      	mov	r0, r3
			*prev_out = prev;
   18212:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   18214:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18216:	2800      	cmp	r0, #0
   18218:	d0fc      	beq.n	18214 <find_node+0x28>
	return node->next;
   1821a:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1821c:	461d      	mov	r5, r3
   1821e:	2e00      	cmp	r6, #0
   18220:	4603      	mov	r3, r0
   18222:	4630      	mov	r0, r6
   18224:	bf38      	it	cc
   18226:	2000      	movcc	r0, #0
   18228:	e7ec      	b.n	18204 <find_node+0x18>
   1822a:	bf00      	nop
   1822c:	20021724 	.word	0x20021724

00018230 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   18230:	4a0c      	ldr	r2, [pc, #48]	; (18264 <module_init+0x34>)
{
   18232:	b508      	push	{r3, lr}
	if (initialized) {
   18234:	7813      	ldrb	r3, [r2, #0]
   18236:	b15b      	cbz	r3, 18250 <module_init+0x20>
   18238:	490b      	ldr	r1, [pc, #44]	; (18268 <module_init+0x38>)
   1823a:	4b0c      	ldr	r3, [pc, #48]	; (1826c <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   1823c:	480c      	ldr	r0, [pc, #48]	; (18270 <module_init+0x40>)
   1823e:	1ac9      	subs	r1, r1, r3
   18240:	08c9      	lsrs	r1, r1, #3
   18242:	0189      	lsls	r1, r1, #6
   18244:	f041 0102 	orr.w	r1, r1, #2
   18248:	f014 fb60 	bl	2c90c <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   1824c:	2000      	movs	r0, #0
   1824e:	bd08      	pop	{r3, pc}
	initialized = true;
   18250:	2101      	movs	r1, #1
   18252:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   18254:	4a07      	ldr	r2, [pc, #28]	; (18274 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   18256:	4808      	ldr	r0, [pc, #32]	; (18278 <module_init+0x48>)
	list->tail = NULL;
   18258:	e9c2 3300 	strd	r3, r3, [r2]
   1825c:	f7ff ffaa 	bl	181b4 <at_cmd_set_notification_handler>
	return 0;
   18260:	e7f4      	b.n	1824c <module_init+0x1c>
   18262:	bf00      	nop
   18264:	2002528b 	.word	0x2002528b
   18268:	0002f044 	.word	0x0002f044
   1826c:	0002f034 	.word	0x0002f034
   18270:	00031e0c 	.word	0x00031e0c
   18274:	20021724 	.word	0x20021724
   18278:	00018289 	.word	0x00018289

0001827c <k_mutex_unlock.constprop.0>:
   1827c:	4801      	ldr	r0, [pc, #4]	; (18284 <k_mutex_unlock.constprop.0+0x8>)
   1827e:	f00a bfc1 	b.w	23204 <z_impl_k_mutex_unlock>
   18282:	bf00      	nop
   18284:	20020b90 	.word	0x20020b90

00018288 <notif_dispatch>:
{
   18288:	b538      	push	{r3, r4, r5, lr}
   1828a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   1828c:	f04f 33ff 	mov.w	r3, #4294967295
   18290:	f04f 32ff 	mov.w	r2, #4294967295
   18294:	480d      	ldr	r0, [pc, #52]	; (182cc <notif_dispatch+0x44>)
   18296:	f00a febb 	bl	23010 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1829a:	4b0d      	ldr	r3, [pc, #52]	; (182d0 <notif_dispatch+0x48>)
   1829c:	681b      	ldr	r3, [r3, #0]
   1829e:	b91b      	cbnz	r3, 182a8 <notif_dispatch+0x20>
}
   182a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   182a4:	f7ff bfea 	b.w	1827c <k_mutex_unlock.constprop.0>
	return node->next;
   182a8:	681c      	ldr	r4, [r3, #0]
   182aa:	2c00      	cmp	r4, #0
   182ac:	bf38      	it	cc
   182ae:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   182b0:	4629      	mov	r1, r5
   182b2:	689a      	ldr	r2, [r3, #8]
   182b4:	6858      	ldr	r0, [r3, #4]
   182b6:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   182b8:	2c00      	cmp	r4, #0
   182ba:	d0f1      	beq.n	182a0 <notif_dispatch+0x18>
   182bc:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   182be:	4623      	mov	r3, r4
   182c0:	2a00      	cmp	r2, #0
   182c2:	bf38      	it	cc
   182c4:	2200      	movcc	r2, #0
   182c6:	4614      	mov	r4, r2
   182c8:	e7f2      	b.n	182b0 <notif_dispatch+0x28>
   182ca:	bf00      	nop
   182cc:	20020b90 	.word	0x20020b90
   182d0:	20021724 	.word	0x20021724

000182d4 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   182d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   182d6:	4606      	mov	r6, r0
	if (handler == NULL) {
   182d8:	460d      	mov	r5, r1
   182da:	b979      	cbnz	r1, 182fc <at_notif_register_handler+0x28>
   182dc:	4a1d      	ldr	r2, [pc, #116]	; (18354 <at_notif_register_handler+0x80>)
   182de:	4b1e      	ldr	r3, [pc, #120]	; (18358 <at_notif_register_handler+0x84>)
   182e0:	1a9b      	subs	r3, r3, r2
   182e2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   182e4:	019b      	lsls	r3, r3, #6
   182e6:	460a      	mov	r2, r1
   182e8:	f043 0301 	orr.w	r3, r3, #1
   182ec:	4601      	mov	r1, r0
   182ee:	481b      	ldr	r0, [pc, #108]	; (1835c <at_notif_register_handler+0x88>)
   182f0:	f014 fb32 	bl	2c958 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   182f4:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   182f8:	b002      	add	sp, #8
   182fa:	bd70      	pop	{r4, r5, r6, pc}
   182fc:	f04f 32ff 	mov.w	r2, #4294967295
   18300:	f04f 33ff 	mov.w	r3, #4294967295
   18304:	4816      	ldr	r0, [pc, #88]	; (18360 <at_notif_register_handler+0x8c>)
   18306:	f00a fe83 	bl	23010 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1830a:	462a      	mov	r2, r5
   1830c:	4631      	mov	r1, r6
   1830e:	a801      	add	r0, sp, #4
   18310:	f7ff ff6c 	bl	181ec <find_node>
   18314:	4604      	mov	r4, r0
   18316:	b118      	cbz	r0, 18320 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   18318:	f7ff ffb0 	bl	1827c <k_mutex_unlock.constprop.0>
		return 0;
   1831c:	2000      	movs	r0, #0
   1831e:	e7eb      	b.n	182f8 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   18320:	200c      	movs	r0, #12
   18322:	f00d fce9 	bl	25cf8 <k_malloc>
   18326:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   18328:	b920      	cbnz	r0, 18334 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   1832a:	f7ff ffa7 	bl	1827c <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   1832e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18332:	e7e1      	b.n	182f8 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   18334:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   18336:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   18338:	4a0a      	ldr	r2, [pc, #40]	; (18364 <at_notif_register_handler+0x90>)
   1833a:	6044      	str	r4, [r0, #4]
   1833c:	6084      	str	r4, [r0, #8]
	parent->next = child;
   1833e:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   18340:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   18342:	e9c3 6501 	strd	r6, r5, [r3, #4]
   18346:	b911      	cbnz	r1, 1834e <at_notif_register_handler+0x7a>
	list->head = node;
   18348:	e9c2 3300 	strd	r3, r3, [r2]
}
   1834c:	e7e4      	b.n	18318 <at_notif_register_handler+0x44>
	parent->next = child;
   1834e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   18350:	6053      	str	r3, [r2, #4]
}
   18352:	e7e1      	b.n	18318 <at_notif_register_handler+0x44>
   18354:	0002f034 	.word	0x0002f034
   18358:	0002f044 	.word	0x0002f044
   1835c:	00031e2f 	.word	0x00031e2f
   18360:	20020b90 	.word	0x20020b90
   18364:	20021724 	.word	0x20021724

00018368 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   18368:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   1836a:	4d05      	ldr	r5, [pc, #20]	; (18380 <write_uart_string+0x18>)
   1836c:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   1836e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   18372:	b901      	cbnz	r1, 18376 <write_uart_string+0xe>
	}
}
   18374:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   18376:	6828      	ldr	r0, [r5, #0]
   18378:	6883      	ldr	r3, [r0, #8]
   1837a:	685b      	ldr	r3, [r3, #4]
   1837c:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   1837e:	e7f6      	b.n	1836e <write_uart_string+0x6>
   18380:	2002173c 	.word	0x2002173c

00018384 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   18384:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   18386:	4921      	ldr	r1, [pc, #132]	; (1840c <cmd_send+0x88>)
{
   18388:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   1838a:	4608      	mov	r0, r1
   1838c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   18390:	f10d 030b 	add.w	r3, sp, #11
   18394:	f7ff fe72 	bl	1807c <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   18398:	1e01      	subs	r1, r0, #0
   1839a:	da0e      	bge.n	183ba <cmd_send+0x36>
   1839c:	4b1c      	ldr	r3, [pc, #112]	; (18410 <cmd_send+0x8c>)
   1839e:	4a1d      	ldr	r2, [pc, #116]	; (18414 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   183a0:	481d      	ldr	r0, [pc, #116]	; (18418 <cmd_send+0x94>)
   183a2:	1ad2      	subs	r2, r2, r3
   183a4:	08d2      	lsrs	r2, r2, #3
   183a6:	0192      	lsls	r2, r2, #6
   183a8:	f042 0201 	orr.w	r2, r2, #1
   183ac:	f014 fabd 	bl	2c92a <log_1>
		state = AT_CMD_ERROR;
   183b0:	2301      	movs	r3, #1
   183b2:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   183b6:	4819      	ldr	r0, [pc, #100]	; (1841c <cmd_send+0x98>)
   183b8:	e012      	b.n	183e0 <cmd_send+0x5c>
	switch (state) {
   183ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
   183be:	2b03      	cmp	r3, #3
   183c0:	d810      	bhi.n	183e4 <cmd_send+0x60>
   183c2:	a201      	add	r2, pc, #4	; (adr r2, 183c8 <cmd_send+0x44>)
   183c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   183c8:	000183d9 	.word	0x000183d9
   183cc:	000183b7 	.word	0x000183b7
   183d0:	000183f3 	.word	0x000183f3
   183d4:	00018405 	.word	0x00018405
		write_uart_string(at_buf);
   183d8:	480c      	ldr	r0, [pc, #48]	; (1840c <cmd_send+0x88>)
   183da:	f7ff ffc5 	bl	18368 <write_uart_string>
		write_uart_string(OK_STR);
   183de:	4810      	ldr	r0, [pc, #64]	; (18420 <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   183e0:	f7ff ffc2 	bl	18368 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   183e4:	4b0f      	ldr	r3, [pc, #60]	; (18424 <cmd_send+0xa0>)
   183e6:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   183e8:	f016 f939 	bl	2e65e <z_impl_uart_irq_rx_enable>
}
   183ec:	b00b      	add	sp, #44	; 0x2c
   183ee:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   183f2:	4b0d      	ldr	r3, [pc, #52]	; (18428 <cmd_send+0xa4>)
   183f4:	9100      	str	r1, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   183f6:	2219      	movs	r2, #25
   183f8:	2100      	movs	r1, #0
   183fa:	a803      	add	r0, sp, #12
   183fc:	f00e fad0 	bl	269a0 <__sprintf_chk>
		write_uart_string(str);
   18400:	a803      	add	r0, sp, #12
   18402:	e7ed      	b.n	183e0 <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   18404:	4b09      	ldr	r3, [pc, #36]	; (1842c <cmd_send+0xa8>)
   18406:	9100      	str	r1, [sp, #0]
   18408:	e7f5      	b.n	183f6 <cmd_send+0x72>
   1840a:	bf00      	nop
   1840c:	2002528c 	.word	0x2002528c
   18410:	0002f034 	.word	0x0002f034
   18414:	0002f03c 	.word	0x0002f03c
   18418:	00031e69 	.word	0x00031e69
   1841c:	00031d05 	.word	0x00031d05
   18420:	00031ce8 	.word	0x00031ce8
   18424:	2002173c 	.word	0x2002173c
   18428:	00031e8f 	.word	0x00031e8f
   1842c:	00031ea0 	.word	0x00031ea0

00018430 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   18430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18434:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   18436:	6883      	ldr	r3, [r0, #8]
   18438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1843a:	b103      	cbz	r3, 1843e <isr+0xe>
		return api->irq_update(dev);
   1843c:	4798      	blx	r3
	if (api->irq_rx_ready) {
   1843e:	68a3      	ldr	r3, [r4, #8]
   18440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18442:	b1bb      	cbz	r3, 18474 <isr+0x44>
		return api->irq_rx_ready(dev);
   18444:	4620      	mov	r0, r4
   18446:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   18448:	b1a0      	cbz	r0, 18474 <isr+0x44>
   1844a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1858c <isr+0x15c>
   1844e:	4e44      	ldr	r6, [pc, #272]	; (18560 <isr+0x130>)
   18450:	4647      	mov	r7, r8
   18452:	4b44      	ldr	r3, [pc, #272]	; (18564 <isr+0x134>)
		if (at_cmd_len > 0) {
   18454:	4d44      	ldr	r5, [pc, #272]	; (18568 <isr+0x138>)
   18456:	1af6      	subs	r6, r6, r3
   18458:	08f6      	lsrs	r6, r6, #3
   1845a:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   1845e:	07db      	lsls	r3, r3, #31
   18460:	d408      	bmi.n	18474 <isr+0x44>
	if (api->fifo_read) {
   18462:	68a3      	ldr	r3, [r4, #8]
   18464:	699b      	ldr	r3, [r3, #24]
   18466:	b12b      	cbz	r3, 18474 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   18468:	2201      	movs	r2, #1
   1846a:	4620      	mov	r0, r4
   1846c:	f10d 0107 	add.w	r1, sp, #7
   18470:	4798      	blx	r3
   18472:	b910      	cbnz	r0, 1847a <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   18474:	b002      	add	sp, #8
   18476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   1847a:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   1847e:	2908      	cmp	r1, #8
   18480:	d001      	beq.n	18486 <isr+0x56>
   18482:	297f      	cmp	r1, #127	; 0x7f
   18484:	d105      	bne.n	18492 <isr+0x62>
		if (at_cmd_len > 0) {
   18486:	682b      	ldr	r3, [r5, #0]
   18488:	2b00      	cmp	r3, #0
   1848a:	d0e6      	beq.n	1845a <isr+0x2a>
			at_cmd_len--;
   1848c:	3b01      	subs	r3, #1
   1848e:	602b      	str	r3, [r5, #0]
   18490:	e7e3      	b.n	1845a <isr+0x2a>
	if (!inside_quotes) {
   18492:	4836      	ldr	r0, [pc, #216]	; (1856c <isr+0x13c>)
   18494:	7803      	ldrb	r3, [r0, #0]
   18496:	b993      	cbnz	r3, 184be <isr+0x8e>
		switch (character) {
   18498:	290a      	cmp	r1, #10
   1849a:	d01e      	beq.n	184da <isr+0xaa>
   1849c:	290d      	cmp	r1, #13
   1849e:	d00a      	beq.n	184b6 <isr+0x86>
   184a0:	b969      	cbnz	r1, 184be <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   184a2:	4b33      	ldr	r3, [pc, #204]	; (18570 <isr+0x140>)
   184a4:	781b      	ldrb	r3, [r3, #0]
   184a6:	b3a3      	cbz	r3, 18512 <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   184a8:	01b1      	lsls	r1, r6, #6
   184aa:	4832      	ldr	r0, [pc, #200]	; (18574 <isr+0x144>)
   184ac:	f041 0102 	orr.w	r1, r1, #2
   184b0:	f014 fa2c 	bl	2c90c <log_0>
			return;
   184b4:	e7d1      	b.n	1845a <isr+0x2a>
			if (term_mode == MODE_CR) {
   184b6:	4a2e      	ldr	r2, [pc, #184]	; (18570 <isr+0x140>)
   184b8:	7812      	ldrb	r2, [r2, #0]
   184ba:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   184bc:	d029      	beq.n	18512 <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   184be:	f8d5 c000 	ldr.w	ip, [r5]
   184c2:	f10c 0201 	add.w	r2, ip, #1
   184c6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   184ca:	d317      	bcc.n	184fc <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   184cc:	01b2      	lsls	r2, r6, #6
   184ce:	482a      	ldr	r0, [pc, #168]	; (18578 <isr+0x148>)
   184d0:	f042 0201 	orr.w	r2, r2, #1
   184d4:	f014 fa29 	bl	2c92a <log_1>
		return;
   184d8:	e7bf      	b.n	1845a <isr+0x2a>
			if (term_mode == MODE_LF) {
   184da:	4a25      	ldr	r2, [pc, #148]	; (18570 <isr+0x140>)
   184dc:	7812      	ldrb	r2, [r2, #0]
   184de:	2a02      	cmp	r2, #2
   184e0:	d017      	beq.n	18512 <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   184e2:	2a03      	cmp	r2, #3
   184e4:	d1eb      	bne.n	184be <isr+0x8e>
   184e6:	f8d5 c000 	ldr.w	ip, [r5]
   184ea:	f1bc 0f00 	cmp.w	ip, #0
   184ee:	d0e6      	beq.n	184be <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   184f0:	4a22      	ldr	r2, [pc, #136]	; (1857c <isr+0x14c>)
   184f2:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   184f4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   184f8:	2a0d      	cmp	r2, #13
   184fa:	e7df      	b.n	184bc <isr+0x8c>
	at_buf[at_cmd_len] = character;
   184fc:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1857c <isr+0x14c>
	if (character == '"') {
   18500:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   18502:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   18506:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   18508:	d1a7      	bne.n	1845a <isr+0x2a>
	if (!inside_quotes) {
   1850a:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   1850e:	7003      	strb	r3, [r0, #0]
   18510:	e7a3      	b.n	1845a <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   18512:	2200      	movs	r2, #0
   18514:	6829      	ldr	r1, [r5, #0]
   18516:	4b19      	ldr	r3, [pc, #100]	; (1857c <isr+0x14c>)
	inside_quotes = false;
   18518:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1851a:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   1851c:	4619      	mov	r1, r3
   1851e:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   18520:	f813 2b01 	ldrb.w	r2, [r3], #1
   18524:	2a20      	cmp	r2, #32
   18526:	d802      	bhi.n	1852e <isr+0xfe>
		} else if (*c == '\0') {
   18528:	2a00      	cmp	r2, #0
   1852a:	d1f9      	bne.n	18520 <isr+0xf0>
   1852c:	e795      	b.n	1845a <isr+0x2a>
	if (at_buf[0]) {
   1852e:	780b      	ldrb	r3, [r1, #0]
   18530:	2b00      	cmp	r3, #0
   18532:	d092      	beq.n	1845a <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   18534:	4b12      	ldr	r3, [pc, #72]	; (18580 <isr+0x150>)
   18536:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   18538:	6883      	ldr	r3, [r0, #8]
   1853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1853c:	b103      	cbz	r3, 18540 <isr+0x110>
		api->irq_rx_disable(dev);
   1853e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18540:	e8d7 3fef 	ldaex	r3, [r7]
   18544:	f043 0201 	orr.w	r2, r3, #1
   18548:	e8c7 2fe1 	stlex	r1, r2, [r7]
   1854c:	2900      	cmp	r1, #0
   1854e:	d1f7      	bne.n	18540 <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   18550:	07da      	lsls	r2, r3, #31
   18552:	d482      	bmi.n	1845a <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   18554:	490b      	ldr	r1, [pc, #44]	; (18584 <isr+0x154>)
   18556:	480c      	ldr	r0, [pc, #48]	; (18588 <isr+0x158>)
   18558:	f016 fa50 	bl	2e9fc <k_queue_append>
   1855c:	e77d      	b.n	1845a <isr+0x2a>
   1855e:	bf00      	nop
   18560:	0002f03c 	.word	0x0002f03c
   18564:	0002f034 	.word	0x0002f034
   18568:	2002172c 	.word	0x2002172c
   1856c:	2002628c 	.word	0x2002628c
   18570:	2002628d 	.word	0x2002628d
   18574:	00031eb1 	.word	0x00031eb1
   18578:	00031edd 	.word	0x00031edd
   1857c:	2002528c 	.word	0x2002528c
   18580:	2002173c 	.word	0x2002173c
   18584:	20021730 	.word	0x20021730
   18588:	20020fb8 	.word	0x20020fb8
   1858c:	20021738 	.word	0x20021738

00018590 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   18590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   18594:	2201      	movs	r2, #1
   18596:	4b49      	ldr	r3, [pc, #292]	; (186bc <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   18598:	2000      	movs	r0, #0
   1859a:	4949      	ldr	r1, [pc, #292]	; (186c0 <at_host_init+0x130>)
		term_mode = mode;
   1859c:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   1859e:	f7ff fe99 	bl	182d4 <at_notif_register_handler>
	if (err != 0) {
   185a2:	4c48      	ldr	r4, [pc, #288]	; (186c4 <at_host_init+0x134>)
   185a4:	4a48      	ldr	r2, [pc, #288]	; (186c8 <at_host_init+0x138>)
   185a6:	4606      	mov	r6, r0
   185a8:	1aa4      	subs	r4, r4, r2
   185aa:	08e4      	lsrs	r4, r4, #3
   185ac:	b150      	cbz	r0, 185c4 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   185ae:	01a2      	lsls	r2, r4, #6
   185b0:	4601      	mov	r1, r0
   185b2:	f042 0201 	orr.w	r2, r2, #1
   185b6:	4845      	ldr	r0, [pc, #276]	; (186cc <at_host_init+0x13c>)
   185b8:	f014 f9b7 	bl	2c92a <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   185bc:	4630      	mov	r0, r6
   185be:	b003      	add	sp, #12
   185c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185c4:	4842      	ldr	r0, [pc, #264]	; (186d0 <at_host_init+0x140>)
   185c6:	f00a f811 	bl	225ec <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   185ca:	4d42      	ldr	r5, [pc, #264]	; (186d4 <at_host_init+0x144>)
   185cc:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   185ce:	b988      	cbnz	r0, 185f4 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   185d0:	01a2      	lsls	r2, r4, #6
   185d2:	493f      	ldr	r1, [pc, #252]	; (186d0 <at_host_init+0x140>)
   185d4:	4840      	ldr	r0, [pc, #256]	; (186d8 <at_host_init+0x148>)
   185d6:	f042 0201 	orr.w	r2, r2, #1
   185da:	f014 f9a6 	bl	2c92a <log_1>
		return -EINVAL;
   185de:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   185e2:	01a2      	lsls	r2, r4, #6
   185e4:	483d      	ldr	r0, [pc, #244]	; (186dc <at_host_init+0x14c>)
   185e6:	f042 0201 	orr.w	r2, r2, #1
   185ea:	f014 f99e 	bl	2c92a <log_1>
		return -EFAULT;
   185ee:	f06f 060d 	mvn.w	r6, #13
   185f2:	e7e3      	b.n	185bc <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   185f4:	f016 fad4 	bl	2eba0 <z_impl_k_uptime_ticks>
   185f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   185fc:	460a      	mov	r2, r1
   185fe:	fba0 0103 	umull	r0, r1, r0, r3
   18602:	fb03 1102 	mla	r1, r3, r2, r1
   18606:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   1860a:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   1860e:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 186f8 <at_host_init+0x168>
   18612:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   18616:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   1861a:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   1861c:	6883      	ldr	r3, [r0, #8]
   1861e:	689b      	ldr	r3, [r3, #8]
   18620:	b393      	cbz	r3, 18688 <at_host_init+0xf8>
		return api->err_check(dev);
   18622:	4798      	blx	r3
		if (err) {
   18624:	4607      	mov	r7, r0
   18626:	b378      	cbz	r0, 18688 <at_host_init+0xf8>
   18628:	f016 faba 	bl	2eba0 <z_impl_k_uptime_ticks>
   1862c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18630:	460a      	mov	r2, r1
   18632:	fba0 0103 	umull	r0, r1, r0, r3
   18636:	fb03 1102 	mla	r1, r3, r2, r1
   1863a:	0bc3      	lsrs	r3, r0, #15
   1863c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   18640:	eba3 0308 	sub.w	r3, r3, r8
   18644:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   18648:	d908      	bls.n	1865c <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   1864a:	4639      	mov	r1, r7
   1864c:	4824      	ldr	r0, [pc, #144]	; (186e0 <at_host_init+0x150>)
   1864e:	f049 0201 	orr.w	r2, r9, #1
   18652:	f014 f96a 	bl	2c92a <log_1>
				return -EIO;
   18656:	f06f 0104 	mvn.w	r1, #4
   1865a:	e7c2      	b.n	185e2 <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   1865c:	4652      	mov	r2, sl
   1865e:	4639      	mov	r1, r7
   18660:	4658      	mov	r0, fp
   18662:	f014 f962 	bl	2c92a <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   18666:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   18668:	6883      	ldr	r3, [r0, #8]
   1866a:	699b      	ldr	r3, [r3, #24]
   1866c:	b92b      	cbnz	r3, 1867a <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   1866e:	2100      	movs	r1, #0
   18670:	f44f 70a4 	mov.w	r0, #328	; 0x148
   18674:	f00c f90a 	bl	2488c <z_impl_k_sleep>
	} while (err);
   18678:	e7cf      	b.n	1861a <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   1867a:	2201      	movs	r2, #1
   1867c:	f10d 0107 	add.w	r1, sp, #7
   18680:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   18682:	2800      	cmp	r0, #0
   18684:	d1ef      	bne.n	18666 <at_host_init+0xd6>
   18686:	e7f2      	b.n	1866e <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   18688:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1868a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1868c:	b123      	cbz	r3, 18698 <at_host_init+0x108>
   1868e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18690:	b113      	cbz	r3, 18698 <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   18692:	2200      	movs	r2, #0
   18694:	4913      	ldr	r1, [pc, #76]	; (186e4 <at_host_init+0x154>)
   18696:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18698:	2200      	movs	r2, #0
   1869a:	4b13      	ldr	r3, [pc, #76]	; (186e8 <at_host_init+0x158>)
   1869c:	4913      	ldr	r1, [pc, #76]	; (186ec <at_host_init+0x15c>)
   1869e:	601a      	str	r2, [r3, #0]
   186a0:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   186a4:	4812      	ldr	r0, [pc, #72]	; (186f0 <at_host_init+0x160>)
   186a6:	230a      	movs	r3, #10
   186a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   186ac:	4911      	ldr	r1, [pc, #68]	; (186f4 <at_host_init+0x164>)
   186ae:	f00c fb6f 	bl	24d90 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   186b2:	6828      	ldr	r0, [r5, #0]
   186b4:	f015 ffd3 	bl	2e65e <z_impl_uart_irq_rx_enable>
	return err;
   186b8:	e780      	b.n	185bc <at_host_init+0x2c>
   186ba:	bf00      	nop
   186bc:	2002628d 	.word	0x2002628d
   186c0:	0002e669 	.word	0x0002e669
   186c4:	0002f03c 	.word	0x0002f03c
   186c8:	0002f034 	.word	0x0002f034
   186cc:	00031efd 	.word	0x00031efd
   186d0:	00030a1e 	.word	0x00030a1e
   186d4:	2002173c 	.word	0x2002173c
   186d8:	00031f1b 	.word	0x00031f1b
   186dc:	00031f96 	.word	0x00031f96
   186e0:	00031f2b 	.word	0x00031f2b
   186e4:	00018431 	.word	0x00018431
   186e8:	20021730 	.word	0x20021730
   186ec:	00018385 	.word	0x00018385
   186f0:	20020fb8 	.word	0x20020fb8
   186f4:	20027b38 	.word	0x20027b38
   186f8:	00031f61 	.word	0x00031f61

000186fc <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   186fc:	4b06      	ldr	r3, [pc, #24]	; (18718 <is_valid_notification_char+0x1c>)
   186fe:	5cc3      	ldrb	r3, [r0, r3]
   18700:	f003 0303 	and.w	r3, r3, #3
   18704:	2b02      	cmp	r3, #2
   18706:	bf08      	it	eq
   18708:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   1870a:	3841      	subs	r0, #65	; 0x41
   1870c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   1870e:	2819      	cmp	r0, #25
   18710:	bf8c      	ite	hi
   18712:	2000      	movhi	r0, #0
   18714:	2001      	movls	r0, #1
   18716:	4770      	bx	lr
   18718:	0002f9a1 	.word	0x0002f9a1

0001871c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1871c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   18720:	6805      	ldr	r5, [r0, #0]
{
   18722:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   18724:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18726:	782b      	ldrb	r3, [r5, #0]
{
   18728:	4680      	mov	r8, r0
   1872a:	460f      	mov	r7, r1
   1872c:	4616      	mov	r6, r2
   1872e:	2b00      	cmp	r3, #0
   18730:	f000 80c8 	beq.w	188c4 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   18734:	4b65      	ldr	r3, [pc, #404]	; (188cc <at_parse_process_element+0x1b0>)
   18736:	781c      	ldrb	r4, [r3, #0]
   18738:	2c06      	cmp	r4, #6
   1873a:	d110      	bne.n	1875e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1873c:	1c6b      	adds	r3, r5, #1
   1873e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   18740:	9a00      	ldr	r2, [sp, #0]
   18742:	7810      	ldrb	r0, [r2, #0]
   18744:	f7ff ffda 	bl	186fc <is_valid_notification_char>
   18748:	b930      	cbnz	r0, 18758 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1874a:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1874c:	462a      	mov	r2, r5
   1874e:	4639      	mov	r1, r7
   18750:	4630      	mov	r0, r6
   18752:	f016 f805 	bl	2e760 <at_params_string_put>
   18756:	e01b      	b.n	18790 <at_parse_process_element+0x74>
			tmpstr++;
   18758:	3201      	adds	r2, #1
   1875a:	9200      	str	r2, [sp, #0]
   1875c:	e7f0      	b.n	18740 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1875e:	2c07      	cmp	r4, #7
   18760:	d124      	bne.n	187ac <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   18762:	4668      	mov	r0, sp
   18764:	f015 ff8c 	bl	2e680 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   18768:	9a00      	ldr	r2, [sp, #0]
   1876a:	7810      	ldrb	r0, [r2, #0]
   1876c:	f7ff ffc6 	bl	186fc <is_valid_notification_char>
   18770:	b9a8      	cbnz	r0, 1879e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   18772:	1b53      	subs	r3, r2, r5
   18774:	4639      	mov	r1, r7
   18776:	462a      	mov	r2, r5
   18778:	4630      	mov	r0, r6
   1877a:	f015 fff1 	bl	2e760 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1877e:	9b00      	ldr	r3, [sp, #0]
   18780:	781a      	ldrb	r2, [r3, #0]
   18782:	2a3d      	cmp	r2, #61	; 0x3d
   18784:	d10e      	bne.n	187a4 <at_parse_process_element+0x88>
   18786:	785a      	ldrb	r2, [r3, #1]
   18788:	2a3f      	cmp	r2, #63	; 0x3f
   1878a:	d101      	bne.n	18790 <at_parse_process_element+0x74>
			tmpstr += 2;
   1878c:	3302      	adds	r3, #2
			tmpstr++;
   1878e:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   18790:	2000      	movs	r0, #0
	*str = tmpstr;
   18792:	9b00      	ldr	r3, [sp, #0]
   18794:	f8c8 3000 	str.w	r3, [r8]
}
   18798:	b023      	add	sp, #140	; 0x8c
   1879a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1879e:	3201      	adds	r2, #1
   187a0:	9200      	str	r2, [sp, #0]
   187a2:	e7e1      	b.n	18768 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   187a4:	2a3f      	cmp	r2, #63	; 0x3f
   187a6:	d1f3      	bne.n	18790 <at_parse_process_element+0x74>
			tmpstr++;
   187a8:	3301      	adds	r3, #1
   187aa:	e7f0      	b.n	1878e <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   187ac:	2c08      	cmp	r4, #8
   187ae:	d103      	bne.n	187b8 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   187b0:	4610      	mov	r0, r2
   187b2:	f015 ffac 	bl	2e70e <at_params_empty_put>
   187b6:	e7eb      	b.n	18790 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   187b8:	2c02      	cmp	r4, #2
   187ba:	d111      	bne.n	187e0 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   187bc:	9a00      	ldr	r2, [sp, #0]
   187be:	7811      	ldrb	r1, [r2, #0]
   187c0:	4608      	mov	r0, r1
   187c2:	f015 ff54 	bl	2e66e <is_lfcr>
   187c6:	b918      	cbnz	r0, 187d0 <at_parse_process_element+0xb4>
   187c8:	b111      	cbz	r1, 187d0 <at_parse_process_element+0xb4>
			tmpstr++;
   187ca:	3201      	adds	r2, #1
   187cc:	9200      	str	r2, [sp, #0]
   187ce:	e7f5      	b.n	187bc <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   187d0:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   187d2:	462a      	mov	r2, r5
   187d4:	4639      	mov	r1, r7
   187d6:	4630      	mov	r0, r6
   187d8:	f015 ffc2 	bl	2e760 <at_params_string_put>
		tmpstr++;
   187dc:	9b00      	ldr	r3, [sp, #0]
   187de:	e7e3      	b.n	187a8 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   187e0:	2c03      	cmp	r4, #3
   187e2:	d109      	bne.n	187f8 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   187e4:	9b00      	ldr	r3, [sp, #0]
   187e6:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   187e8:	2a22      	cmp	r2, #34	; 0x22
   187ea:	d003      	beq.n	187f4 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   187ec:	b112      	cbz	r2, 187f4 <at_parse_process_element+0xd8>
			tmpstr++;
   187ee:	3301      	adds	r3, #1
   187f0:	9300      	str	r3, [sp, #0]
   187f2:	e7f7      	b.n	187e4 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   187f4:	1b5b      	subs	r3, r3, r5
   187f6:	e7ec      	b.n	187d2 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   187f8:	2c01      	cmp	r4, #1
   187fa:	d13c      	bne.n	18876 <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   187fc:	4628      	mov	r0, r5
   187fe:	220a      	movs	r2, #10
   18800:	a901      	add	r1, sp, #4
   18802:	f00e fe15 	bl	27430 <strtoul>
		tmpstr = next;
   18806:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18808:	4d31      	ldr	r5, [pc, #196]	; (188d0 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1880a:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1880c:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1880e:	9800      	ldr	r0, [sp, #0]
   18810:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   18812:	2b29      	cmp	r3, #41	; 0x29
   18814:	d028      	beq.n	18868 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18816:	b33b      	cbz	r3, 18868 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18818:	3b2c      	subs	r3, #44	; 0x2c
   1881a:	b2db      	uxtb	r3, r3
   1881c:	3001      	adds	r0, #1
   1881e:	2b11      	cmp	r3, #17
				tmparray[i++] =
   18820:	9000      	str	r0, [sp, #0]
   18822:	d803      	bhi.n	1882c <at_parse_process_element+0x110>
   18824:	fa25 f303 	lsr.w	r3, r5, r3
   18828:	07db      	lsls	r3, r3, #31
   1882a:	d408      	bmi.n	1883e <at_parse_process_element+0x122>
				tmpstr++;
   1882c:	46a1      	mov	r9, r4
   1882e:	e004      	b.n	1883a <at_parse_process_element+0x11e>
					tmpstr = next;
   18830:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   18832:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   18836:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   18838:	d015      	beq.n	18866 <at_parse_process_element+0x14a>
				tmpstr++;
   1883a:	464c      	mov	r4, r9
   1883c:	e7e7      	b.n	1880e <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1883e:	220a      	movs	r2, #10
   18840:	a901      	add	r1, sp, #4
   18842:	f00e fdf5 	bl	27430 <strtoul>
				tmparray[i++] =
   18846:	ab22      	add	r3, sp, #136	; 0x88
   18848:	f104 0901 	add.w	r9, r4, #1
   1884c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   18850:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   18854:	9800      	ldr	r0, [sp, #0]
   18856:	f00e f9ff 	bl	26c58 <strlen>
   1885a:	4604      	mov	r4, r0
   1885c:	9801      	ldr	r0, [sp, #4]
   1885e:	f00e f9fb 	bl	26c58 <strlen>
   18862:	4284      	cmp	r4, r0
   18864:	d1e4      	bne.n	18830 <at_parse_process_element+0x114>
   18866:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   18868:	4639      	mov	r1, r7
   1886a:	4630      	mov	r0, r6
   1886c:	00a3      	lsls	r3, r4, #2
   1886e:	aa02      	add	r2, sp, #8
   18870:	f015 ff9c 	bl	2e7ac <at_params_array_put>
   18874:	e7b2      	b.n	187dc <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   18876:	2c04      	cmp	r4, #4
   18878:	d115      	bne.n	188a6 <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   1887a:	220a      	movs	r2, #10
   1887c:	4628      	mov	r0, r5
   1887e:	a902      	add	r1, sp, #8
   18880:	f00e fdd6 	bl	27430 <strtoul>
		tmpstr = next;
   18884:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   18886:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   1888a:	4602      	mov	r2, r0
		tmpstr = next;
   1888c:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   1888e:	da05      	bge.n	1889c <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   18890:	b282      	uxth	r2, r0
   18892:	4639      	mov	r1, r7
   18894:	4630      	mov	r0, r6
   18896:	f015 ff25 	bl	2e6e4 <at_params_short_put>
   1889a:	e779      	b.n	18790 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   1889c:	4639      	mov	r1, r7
   1889e:	4630      	mov	r0, r6
   188a0:	f015 ff49 	bl	2e736 <at_params_int_put>
   188a4:	e774      	b.n	18790 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   188a6:	2c05      	cmp	r4, #5
   188a8:	f47f af72 	bne.w	18790 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   188ac:	4909      	ldr	r1, [pc, #36]	; (188d4 <at_parse_process_element+0x1b8>)
   188ae:	9b00      	ldr	r3, [sp, #0]
   188b0:	781a      	ldrb	r2, [r3, #0]
   188b2:	5c52      	ldrb	r2, [r2, r1]
   188b4:	f012 0f44 	tst.w	r2, #68	; 0x44
   188b8:	d101      	bne.n	188be <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   188ba:	1b5b      	subs	r3, r3, r5
   188bc:	e746      	b.n	1874c <at_parse_process_element+0x30>
			tmpstr++;
   188be:	3301      	adds	r3, #1
   188c0:	9300      	str	r3, [sp, #0]
   188c2:	e7f4      	b.n	188ae <at_parse_process_element+0x192>
		return -1;
   188c4:	f04f 30ff 	mov.w	r0, #4294967295
   188c8:	e766      	b.n	18798 <at_parse_process_element+0x7c>
   188ca:	bf00      	nop
   188cc:	2002628e 	.word	0x2002628e
   188d0:	00024001 	.word	0x00024001
   188d4:	0002f9a1 	.word	0x0002f9a1

000188d8 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   188d8:	b510      	push	{r4, lr}
   188da:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   188dc:	f00e f9bc 	bl	26c58 <strlen>
   188e0:	2801      	cmp	r0, #1
   188e2:	d922      	bls.n	1892a <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   188e4:	7821      	ldrb	r1, [r4, #0]
   188e6:	4b13      	ldr	r3, [pc, #76]	; (18934 <is_command+0x5c>)
   188e8:	5cca      	ldrb	r2, [r1, r3]
   188ea:	f002 0203 	and.w	r2, r2, #3
   188ee:	2a02      	cmp	r2, #2
   188f0:	bf08      	it	eq
   188f2:	3920      	subeq	r1, #32
   188f4:	2941      	cmp	r1, #65	; 0x41
   188f6:	461a      	mov	r2, r3
   188f8:	d117      	bne.n	1892a <is_command+0x52>
   188fa:	7863      	ldrb	r3, [r4, #1]
   188fc:	5cd2      	ldrb	r2, [r2, r3]
   188fe:	f002 0203 	and.w	r2, r2, #3
   18902:	2a02      	cmp	r2, #2
   18904:	bf08      	it	eq
   18906:	3b20      	subeq	r3, #32
   18908:	2b54      	cmp	r3, #84	; 0x54
   1890a:	d10e      	bne.n	1892a <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1890c:	78a2      	ldrb	r2, [r4, #2]
   1890e:	2a25      	cmp	r2, #37	; 0x25
   18910:	d00d      	beq.n	1892e <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   18912:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   18916:	2b23      	cmp	r3, #35	; 0x23
   18918:	d009      	beq.n	1892e <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1891a:	4610      	mov	r0, r2
   1891c:	f015 fea7 	bl	2e66e <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   18920:	b910      	cbnz	r0, 18928 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18922:	fab2 f082 	clz	r0, r2
   18926:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   18928:	bd10      	pop	{r4, pc}
		return false;
   1892a:	2000      	movs	r0, #0
   1892c:	e7fc      	b.n	18928 <is_command+0x50>
		return true;
   1892e:	2001      	movs	r0, #1
   18930:	e7fa      	b.n	18928 <is_command+0x50>
   18932:	bf00      	nop
   18934:	0002f9a1 	.word	0x0002f9a1

00018938 <at_parse_detect_type>:
{
   18938:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1893a:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1893c:	2900      	cmp	r1, #0
{
   1893e:	4605      	mov	r5, r0
   18940:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   18942:	d141      	bne.n	189c8 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18944:	2a2b      	cmp	r2, #43	; 0x2b
   18946:	4e29      	ldr	r6, [pc, #164]	; (189ec <at_parse_detect_type+0xb4>)
   18948:	d001      	beq.n	1894e <at_parse_detect_type+0x16>
   1894a:	2a25      	cmp	r2, #37	; 0x25
   1894c:	d104      	bne.n	18958 <at_parse_detect_type+0x20>
	state = new_state;
   1894e:	2306      	movs	r3, #6
   18950:	7033      	strb	r3, [r6, #0]
	return 0;
   18952:	2000      	movs	r0, #0
	*str = tmpstr;
   18954:	602c      	str	r4, [r5, #0]
}
   18956:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   18958:	4620      	mov	r0, r4
   1895a:	f7ff ffbd 	bl	188d8 <is_command>
   1895e:	b388      	cbz	r0, 189c4 <at_parse_detect_type+0x8c>
	state = new_state;
   18960:	2307      	movs	r3, #7
   18962:	e7f5      	b.n	18950 <at_parse_detect_type+0x18>
	if (chr == '"') {
   18964:	2a22      	cmp	r2, #34	; 0x22
   18966:	d006      	beq.n	18976 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   18968:	2a28      	cmp	r2, #40	; 0x28
   1896a:	d109      	bne.n	18980 <at_parse_detect_type+0x48>
   1896c:	2201      	movs	r2, #1
   1896e:	4b1f      	ldr	r3, [pc, #124]	; (189ec <at_parse_detect_type+0xb4>)
		tmpstr++;
   18970:	4414      	add	r4, r2
	state = new_state;
   18972:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   18974:	e7ed      	b.n	18952 <at_parse_detect_type+0x1a>
	state = new_state;
   18976:	2203      	movs	r2, #3
   18978:	4b1c      	ldr	r3, [pc, #112]	; (189ec <at_parse_detect_type+0xb4>)
		tmpstr++;
   1897a:	3401      	adds	r4, #1
	state = new_state;
   1897c:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1897e:	e7e8      	b.n	18952 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   18980:	4610      	mov	r0, r2
   18982:	f015 fe74 	bl	2e66e <is_lfcr>
   18986:	b170      	cbz	r0, 189a6 <at_parse_detect_type+0x6e>
   18988:	4918      	ldr	r1, [pc, #96]	; (189ec <at_parse_detect_type+0xb4>)
   1898a:	7808      	ldrb	r0, [r1, #0]
   1898c:	2804      	cmp	r0, #4
   1898e:	d108      	bne.n	189a2 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   18990:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   18994:	f015 fe6b 	bl	2e66e <is_lfcr>
   18998:	2800      	cmp	r0, #0
   1899a:	d1f9      	bne.n	18990 <at_parse_detect_type+0x58>
	state = new_state;
   1899c:	2305      	movs	r3, #5
   1899e:	700b      	strb	r3, [r1, #0]
}
   189a0:	e7d7      	b.n	18952 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   189a2:	2808      	cmp	r0, #8
   189a4:	d0d5      	beq.n	18952 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   189a6:	3a2c      	subs	r2, #44	; 0x2c
   189a8:	b2d2      	uxtb	r2, r2
   189aa:	2a11      	cmp	r2, #17
   189ac:	d807      	bhi.n	189be <at_parse_detect_type+0x86>
   189ae:	4b10      	ldr	r3, [pc, #64]	; (189f0 <at_parse_detect_type+0xb8>)
   189b0:	fa23 f202 	lsr.w	r2, r3, r2
   189b4:	07d3      	lsls	r3, r2, #31
   189b6:	d502      	bpl.n	189be <at_parse_detect_type+0x86>
	state = new_state;
   189b8:	2208      	movs	r2, #8
   189ba:	4b0c      	ldr	r3, [pc, #48]	; (189ec <at_parse_detect_type+0xb4>)
   189bc:	e013      	b.n	189e6 <at_parse_detect_type+0xae>
		return -1;
   189be:	f04f 30ff 	mov.w	r0, #4294967295
   189c2:	e7c8      	b.n	18956 <at_parse_detect_type+0x1e>
	state = new_state;
   189c4:	2302      	movs	r3, #2
   189c6:	e7c3      	b.n	18950 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   189c8:	dd03      	ble.n	189d2 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   189ca:	2a2b      	cmp	r2, #43	; 0x2b
   189cc:	d0f7      	beq.n	189be <at_parse_detect_type+0x86>
   189ce:	2a25      	cmp	r2, #37	; 0x25
   189d0:	d0f5      	beq.n	189be <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   189d2:	4b08      	ldr	r3, [pc, #32]	; (189f4 <at_parse_detect_type+0xbc>)
   189d4:	5cd3      	ldrb	r3, [r2, r3]
   189d6:	0759      	lsls	r1, r3, #29
   189d8:	d403      	bmi.n	189e2 <at_parse_detect_type+0xaa>
   189da:	2a2d      	cmp	r2, #45	; 0x2d
   189dc:	d001      	beq.n	189e2 <at_parse_detect_type+0xaa>
   189de:	2a2b      	cmp	r2, #43	; 0x2b
   189e0:	d1c0      	bne.n	18964 <at_parse_detect_type+0x2c>
	state = new_state;
   189e2:	2204      	movs	r2, #4
   189e4:	4b01      	ldr	r3, [pc, #4]	; (189ec <at_parse_detect_type+0xb4>)
   189e6:	701a      	strb	r2, [r3, #0]
}
   189e8:	e7b3      	b.n	18952 <at_parse_detect_type+0x1a>
   189ea:	bf00      	nop
   189ec:	2002628e 	.word	0x2002628e
   189f0:	00024001 	.word	0x00024001
   189f4:	0002f9a1 	.word	0x0002f9a1

000189f8 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   189f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189fc:	4688      	mov	r8, r1
   189fe:	4616      	mov	r6, r2
   18a00:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   18a02:	4604      	mov	r4, r0
   18a04:	2800      	cmp	r0, #0
   18a06:	d07e      	beq.n	18b06 <at_parser_max_params_from_str+0x10e>
   18a08:	2a00      	cmp	r2, #0
   18a0a:	d07c      	beq.n	18b06 <at_parser_max_params_from_str+0x10e>
   18a0c:	6853      	ldr	r3, [r2, #4]
   18a0e:	2b00      	cmp	r3, #0
   18a10:	d079      	beq.n	18b06 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   18a12:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   18a14:	4610      	mov	r0, r2
   18a16:	f000 f8eb 	bl	18bf0 <at_params_list_clear>
	const char *str = *at_params_str;
   18a1a:	9401      	str	r4, [sp, #4]
	int index = 0;
   18a1c:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   18a1e:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   18a20:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 18b10 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   18a24:	429f      	cmp	r7, r3
   18a26:	bf28      	it	cs
   18a28:	461f      	movcs	r7, r3
	state = IDLE;
   18a2a:	4b38      	ldr	r3, [pc, #224]	; (18b0c <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18a2c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 18b14 <at_parser_max_params_from_str+0x11c>
   18a30:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   18a32:	9b01      	ldr	r3, [sp, #4]
   18a34:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18a36:	2a00      	cmp	r2, #0
   18a38:	d04b      	beq.n	18ad2 <at_parser_max_params_from_str+0xda>
   18a3a:	42a7      	cmp	r7, r4
   18a3c:	d949      	bls.n	18ad2 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   18a3e:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   18a42:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   18a44:	0711      	lsls	r1, r2, #28
			str++;
   18a46:	bf48      	it	mi
   18a48:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   18a4a:	4621      	mov	r1, r4
			str++;
   18a4c:	bf48      	it	mi
   18a4e:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   18a50:	f7ff ff72 	bl	18938 <at_parse_detect_type>
   18a54:	1c42      	adds	r2, r0, #1
   18a56:	d03c      	beq.n	18ad2 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   18a58:	4632      	mov	r2, r6
   18a5a:	4621      	mov	r1, r4
   18a5c:	a801      	add	r0, sp, #4
   18a5e:	f7ff fe5d 	bl	1871c <at_parse_process_element>
   18a62:	1c43      	adds	r3, r0, #1
   18a64:	d035      	beq.n	18ad2 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   18a66:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18a68:	781a      	ldrb	r2, [r3, #0]
   18a6a:	3a2c      	subs	r2, #44	; 0x2c
   18a6c:	b2d2      	uxtb	r2, r2
   18a6e:	2a11      	cmp	r2, #17
   18a70:	d81a      	bhi.n	18aa8 <at_parser_max_params_from_str+0xb0>
   18a72:	fa2a f202 	lsr.w	r2, sl, r2
   18a76:	07d1      	lsls	r1, r2, #31
   18a78:	d516      	bpl.n	18aa8 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   18a7a:	7858      	ldrb	r0, [r3, #1]
   18a7c:	f015 fdf7 	bl	2e66e <is_lfcr>
   18a80:	b178      	cbz	r0, 18aa2 <at_parser_max_params_from_str+0xaa>
				index++;
   18a82:	3401      	adds	r4, #1
				if (index == max_params) {
   18a84:	42bc      	cmp	r4, r7
   18a86:	d039      	beq.n	18afc <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   18a88:	4621      	mov	r1, r4
   18a8a:	a801      	add	r0, sp, #4
   18a8c:	f7ff ff54 	bl	18938 <at_parse_detect_type>
   18a90:	1c42      	adds	r2, r0, #1
   18a92:	d01e      	beq.n	18ad2 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   18a94:	4632      	mov	r2, r6
   18a96:	4621      	mov	r1, r4
   18a98:	a801      	add	r0, sp, #4
   18a9a:	f7ff fe3f 	bl	1871c <at_parse_process_element>
   18a9e:	1c43      	adds	r3, r0, #1
   18aa0:	d017      	beq.n	18ad2 <at_parser_max_params_from_str+0xda>
			str++;
   18aa2:	9b01      	ldr	r3, [sp, #4]
   18aa4:	3301      	adds	r3, #1
   18aa6:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   18aa8:	9a01      	ldr	r2, [sp, #4]
   18aaa:	7810      	ldrb	r0, [r2, #0]
   18aac:	f015 fddf 	bl	2e66e <is_lfcr>
   18ab0:	b1f8      	cbz	r0, 18af2 <at_parser_max_params_from_str+0xfa>
   18ab2:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   18ab4:	7811      	ldrb	r1, [r2, #0]
   18ab6:	4693      	mov	fp, r2
   18ab8:	4608      	mov	r0, r1
   18aba:	3201      	adds	r2, #1
   18abc:	f015 fdd7 	bl	2e66e <is_lfcr>
   18ac0:	2800      	cmp	r0, #0
   18ac2:	d1f7      	bne.n	18ab4 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18ac4:	b119      	cbz	r1, 18ace <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18ac6:	292b      	cmp	r1, #43	; 0x2b
   18ac8:	d001      	beq.n	18ace <at_parser_max_params_from_str+0xd6>
   18aca:	2925      	cmp	r1, #37	; 0x25
   18acc:	d111      	bne.n	18af2 <at_parser_max_params_from_str+0xfa>
				str += i;
   18ace:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   18ad2:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   18ad4:	b9a5      	cbnz	r5, 18b00 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18ad6:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   18ad8:	2a00      	cmp	r2, #0
   18ada:	bf0c      	ite	eq
   18adc:	2000      	moveq	r0, #0
   18ade:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   18ae2:	f1b8 0f00 	cmp.w	r8, #0
   18ae6:	d001      	beq.n	18aec <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   18ae8:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   18aec:	b003      	add	sp, #12
   18aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   18af2:	3401      	adds	r4, #1
			oversized = true;
   18af4:	42bc      	cmp	r4, r7
   18af6:	bf08      	it	eq
   18af8:	2501      	moveq	r5, #1
   18afa:	e79a      	b.n	18a32 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   18afc:	4605      	mov	r5, r0
   18afe:	e7e8      	b.n	18ad2 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   18b00:	f06f 0006 	mvn.w	r0, #6
   18b04:	e7ed      	b.n	18ae2 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   18b06:	f06f 0015 	mvn.w	r0, #21
   18b0a:	e7ef      	b.n	18aec <at_parser_max_params_from_str+0xf4>
   18b0c:	2002628e 	.word	0x2002628e
   18b10:	0002f9a1 	.word	0x0002f9a1
   18b14:	00024001 	.word	0x00024001

00018b18 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   18b18:	b538      	push	{r3, r4, r5, lr}
   18b1a:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   18b1c:	4605      	mov	r5, r0
   18b1e:	b960      	cbnz	r0, 18b3a <at_params_get+0x22>
   18b20:	490a      	ldr	r1, [pc, #40]	; (18b4c <at_params_get+0x34>)
   18b22:	232b      	movs	r3, #43	; 0x2b
   18b24:	4a0a      	ldr	r2, [pc, #40]	; (18b50 <at_params_get+0x38>)
   18b26:	480b      	ldr	r0, [pc, #44]	; (18b54 <at_params_get+0x3c>)
   18b28:	f013 fca3 	bl	2c472 <printk>
   18b2c:	480a      	ldr	r0, [pc, #40]	; (18b58 <at_params_get+0x40>)
   18b2e:	f013 fca0 	bl	2c472 <printk>
   18b32:	212b      	movs	r1, #43	; 0x2b
   18b34:	4806      	ldr	r0, [pc, #24]	; (18b50 <at_params_get+0x38>)
   18b36:	f013 feb9 	bl	2c8ac <assert_post_action>

	if (index >= list->param_count) {
   18b3a:	682b      	ldr	r3, [r5, #0]
   18b3c:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   18b3e:	bf85      	ittet	hi
   18b40:	210c      	movhi	r1, #12
   18b42:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   18b44:	2000      	movls	r0, #0
	return &param[index];
   18b46:	fb01 0004 	mlahi	r0, r1, r4, r0
}
   18b4a:	bd38      	pop	{r3, r4, r5, pc}
   18b4c:	00031fee 	.word	0x00031fee
   18b50:	00031fc0 	.word	0x00031fc0
   18b54:	0003049a 	.word	0x0003049a
   18b58:	00032002 	.word	0x00032002

00018b5c <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   18b5c:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18b5e:	4604      	mov	r4, r0
   18b60:	b960      	cbnz	r0, 18b7c <at_param_size+0x20>
   18b62:	490e      	ldr	r1, [pc, #56]	; (18b9c <at_param_size+0x40>)
   18b64:	2339      	movs	r3, #57	; 0x39
   18b66:	4a0e      	ldr	r2, [pc, #56]	; (18ba0 <at_param_size+0x44>)
   18b68:	480e      	ldr	r0, [pc, #56]	; (18ba4 <at_param_size+0x48>)
   18b6a:	f013 fc82 	bl	2c472 <printk>
   18b6e:	480e      	ldr	r0, [pc, #56]	; (18ba8 <at_param_size+0x4c>)
   18b70:	f013 fc7f 	bl	2c472 <printk>
   18b74:	2139      	movs	r1, #57	; 0x39
   18b76:	480a      	ldr	r0, [pc, #40]	; (18ba0 <at_param_size+0x44>)
   18b78:	f013 fe98 	bl	2c8ac <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   18b7c:	7823      	ldrb	r3, [r4, #0]
   18b7e:	2b01      	cmp	r3, #1
   18b80:	d006      	beq.n	18b90 <at_param_size+0x34>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   18b82:	2b02      	cmp	r3, #2
   18b84:	d006      	beq.n	18b94 <at_param_size+0x38>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   18b86:	3b03      	subs	r3, #3
   18b88:	2b01      	cmp	r3, #1
   18b8a:	d805      	bhi.n	18b98 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   18b8c:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   18b8e:	bd10      	pop	{r4, pc}
		return sizeof(uint16_t);
   18b90:	2002      	movs	r0, #2
   18b92:	e7fc      	b.n	18b8e <at_param_size+0x32>
		return sizeof(uint32_t);
   18b94:	2004      	movs	r0, #4
   18b96:	e7fa      	b.n	18b8e <at_param_size+0x32>
	return 0;
   18b98:	2000      	movs	r0, #0
   18b9a:	e7f8      	b.n	18b8e <at_param_size+0x32>
   18b9c:	00032023 	.word	0x00032023
   18ba0:	00031fc0 	.word	0x00031fc0
   18ba4:	0003049a 	.word	0x0003049a
   18ba8:	00032038 	.word	0x00032038

00018bac <at_param_clear>:
{
   18bac:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18bae:	4604      	mov	r4, r0
   18bb0:	b960      	cbnz	r0, 18bcc <at_param_clear+0x20>
   18bb2:	490b      	ldr	r1, [pc, #44]	; (18be0 <at_param_clear+0x34>)
   18bb4:	231d      	movs	r3, #29
   18bb6:	4a0b      	ldr	r2, [pc, #44]	; (18be4 <at_param_clear+0x38>)
   18bb8:	480b      	ldr	r0, [pc, #44]	; (18be8 <at_param_clear+0x3c>)
   18bba:	f013 fc5a 	bl	2c472 <printk>
   18bbe:	480b      	ldr	r0, [pc, #44]	; (18bec <at_param_clear+0x40>)
   18bc0:	f013 fc57 	bl	2c472 <printk>
   18bc4:	211d      	movs	r1, #29
   18bc6:	4807      	ldr	r0, [pc, #28]	; (18be4 <at_param_clear+0x38>)
   18bc8:	f013 fe70 	bl	2c8ac <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   18bcc:	7823      	ldrb	r3, [r4, #0]
   18bce:	3b03      	subs	r3, #3
   18bd0:	2b01      	cmp	r3, #1
   18bd2:	d802      	bhi.n	18bda <at_param_clear+0x2e>
		k_free(param->value.str_val);
   18bd4:	68a0      	ldr	r0, [r4, #8]
   18bd6:	f016 f8ae 	bl	2ed36 <k_free>
	param->value.int_val = 0;
   18bda:	2300      	movs	r3, #0
   18bdc:	60a3      	str	r3, [r4, #8]
}
   18bde:	bd10      	pop	{r4, pc}
   18be0:	00032023 	.word	0x00032023
   18be4:	00031fc0 	.word	0x00031fc0
   18be8:	0003049a 	.word	0x0003049a
   18bec:	00032038 	.word	0x00032038

00018bf0 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   18bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   18bf4:	4604      	mov	r4, r0
   18bf6:	b158      	cbz	r0, 18c10 <at_params_list_clear+0x20>
   18bf8:	6843      	ldr	r3, [r0, #4]
   18bfa:	b14b      	cbz	r3, 18c10 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   18bfc:	2500      	movs	r5, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18bfe:	f8df b054 	ldr.w	fp, [pc, #84]	; 18c54 <at_params_list_clear+0x64>
   18c02:	f8df 9054 	ldr.w	r9, [pc, #84]	; 18c58 <at_params_list_clear+0x68>
   18c06:	f8df a054 	ldr.w	sl, [pc, #84]	; 18c5c <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   18c0a:	6823      	ldr	r3, [r4, #0]
   18c0c:	429d      	cmp	r5, r3
   18c0e:	d301      	bcc.n	18c14 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   18c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   18c14:	270c      	movs	r7, #12
   18c16:	436f      	muls	r7, r5
   18c18:	f8d4 8004 	ldr.w	r8, [r4, #4]
   18c1c:	eb08 0607 	add.w	r6, r8, r7
   18c20:	4630      	mov	r0, r6
   18c22:	f7ff ffc3 	bl	18bac <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18c26:	b966      	cbnz	r6, 18c42 <at_params_list_clear+0x52>
   18c28:	4649      	mov	r1, r9
   18c2a:	2314      	movs	r3, #20
   18c2c:	465a      	mov	r2, fp
   18c2e:	4650      	mov	r0, sl
   18c30:	f013 fc1f 	bl	2c472 <printk>
   18c34:	4806      	ldr	r0, [pc, #24]	; (18c50 <at_params_list_clear+0x60>)
   18c36:	f013 fc1c 	bl	2c472 <printk>
   18c3a:	2114      	movs	r1, #20
   18c3c:	4658      	mov	r0, fp
   18c3e:	f013 fe35 	bl	2c8ac <assert_post_action>
   18c42:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   18c44:	3501      	adds	r5, #1
   18c46:	f848 3007 	str.w	r3, [r8, r7]
   18c4a:	6073      	str	r3, [r6, #4]
   18c4c:	60b3      	str	r3, [r6, #8]
   18c4e:	e7dc      	b.n	18c0a <at_params_list_clear+0x1a>
   18c50:	00032038 	.word	0x00032038
   18c54:	00031fc0 	.word	0x00031fc0
   18c58:	00032023 	.word	0x00032023
   18c5c:	0003049a 	.word	0x0003049a

00018c60 <parse_psm_cfg>:
	char timer_str[9] = {0};
   18c60:	2300      	movs	r3, #0
{
   18c62:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c64:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   18c66:	e9cd 3305 	strd	r3, r3, [sp, #20]
   18c6a:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   18c6e:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   18c70:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   18c72:	2900      	cmp	r1, #0
	err = at_params_string_get(at_params,
   18c74:	bf14      	ite	ne
   18c76:	2108      	movne	r1, #8
   18c78:	2109      	moveq	r1, #9
	size_t timer_str_len = sizeof(timer_str) - 1;
   18c7a:	9304      	str	r3, [sp, #16]
{
   18c7c:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   18c7e:	ab04      	add	r3, sp, #16
   18c80:	aa05      	add	r2, sp, #20
{
   18c82:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   18c84:	bf14      	ite	ne
   18c86:	2707      	movne	r7, #7
   18c88:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   18c8a:	f015 fde2 	bl	2e852 <at_params_string_get>
	if (err) {
   18c8e:	4601      	mov	r1, r0
   18c90:	b170      	cbz	r0, 18cb0 <parse_psm_cfg+0x50>
   18c92:	4b34      	ldr	r3, [pc, #208]	; (18d64 <parse_psm_cfg+0x104>)
   18c94:	4a34      	ldr	r2, [pc, #208]	; (18d68 <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   18c96:	4835      	ldr	r0, [pc, #212]	; (18d6c <parse_psm_cfg+0x10c>)
   18c98:	1ad2      	subs	r2, r2, r3
   18c9a:	08d2      	lsrs	r2, r2, #3
   18c9c:	0192      	lsls	r2, r2, #6
   18c9e:	f042 0201 	orr.w	r2, r2, #1
   18ca2:	9101      	str	r1, [sp, #4]
   18ca4:	f013 fe41 	bl	2c92a <log_1>
		return err;
   18ca8:	9901      	ldr	r1, [sp, #4]
}
   18caa:	4608      	mov	r0, r1
   18cac:	b009      	add	sp, #36	; 0x24
   18cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   18cb0:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   18cb2:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   18cb4:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   18cb8:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   18cba:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   18cbc:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   18cbe:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   18cc2:	f00e fbb5 	bl	27430 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   18cc6:	2807      	cmp	r0, #7
   18cc8:	9901      	ldr	r1, [sp, #4]
   18cca:	d90c      	bls.n	18ce6 <parse_psm_cfg+0x86>
   18ccc:	4926      	ldr	r1, [pc, #152]	; (18d68 <parse_psm_cfg+0x108>)
   18cce:	4b25      	ldr	r3, [pc, #148]	; (18d64 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse periodic TAU string");
   18cd0:	4827      	ldr	r0, [pc, #156]	; (18d70 <parse_psm_cfg+0x110>)
   18cd2:	1ac9      	subs	r1, r1, r3
   18cd4:	08c9      	lsrs	r1, r1, #3
   18cd6:	0189      	lsls	r1, r1, #6
   18cd8:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   18cdc:	f013 fe16 	bl	2c90c <log_0>
		return err;
   18ce0:	f06f 0115 	mvn.w	r1, #21
   18ce4:	e7e1      	b.n	18caa <parse_psm_cfg+0x4a>
	timer_unit = t3412_lookup[lut_idx];
   18ce6:	4b23      	ldr	r3, [pc, #140]	; (18d74 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18ce8:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   18cea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18cee:	f10d 0017 	add.w	r0, sp, #23
   18cf2:	f00e fb9d 	bl	27430 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18cf6:	b30c      	cbz	r4, 18d3c <parse_psm_cfg+0xdc>
   18cf8:	4344      	muls	r4, r0
	err = at_params_string_get(at_params,
   18cfa:	4639      	mov	r1, r7
   18cfc:	4630      	mov	r0, r6
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18cfe:	602c      	str	r4, [r5, #0]
	err = at_params_string_get(at_params,
   18d00:	ab04      	add	r3, sp, #16
   18d02:	aa05      	add	r2, sp, #20
   18d04:	f015 fda5 	bl	2e852 <at_params_string_get>
	if (err) {
   18d08:	4601      	mov	r1, r0
   18d0a:	2800      	cmp	r0, #0
   18d0c:	d1c1      	bne.n	18c92 <parse_psm_cfg+0x32>
	memcpy(unit_str, timer_str, unit_str_len);
   18d0e:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   18d10:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   18d12:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   18d16:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   18d18:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   18d1a:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   18d1c:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   18d20:	f00e fb86 	bl	27430 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   18d24:	2807      	cmp	r0, #7
   18d26:	9901      	ldr	r1, [sp, #4]
   18d28:	d90b      	bls.n	18d42 <parse_psm_cfg+0xe2>
   18d2a:	490f      	ldr	r1, [pc, #60]	; (18d68 <parse_psm_cfg+0x108>)
   18d2c:	4b0d      	ldr	r3, [pc, #52]	; (18d64 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse active time string");
   18d2e:	4812      	ldr	r0, [pc, #72]	; (18d78 <parse_psm_cfg+0x118>)
   18d30:	1ac9      	subs	r1, r1, r3
   18d32:	08c9      	lsrs	r1, r1, #3
   18d34:	0189      	lsls	r1, r1, #6
   18d36:	f041 0101 	orr.w	r1, r1, #1
   18d3a:	e7cf      	b.n	18cdc <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18d3c:	f04f 34ff 	mov.w	r4, #4294967295
   18d40:	e7db      	b.n	18cfa <parse_psm_cfg+0x9a>
	timer_unit = t3324_lookup[lut_idx];
   18d42:	4b0e      	ldr	r3, [pc, #56]	; (18d7c <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18d44:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   18d46:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18d4a:	f10d 0017 	add.w	r0, sp, #23
   18d4e:	9101      	str	r1, [sp, #4]
   18d50:	f00e fb6e 	bl	27430 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18d54:	9901      	ldr	r1, [sp, #4]
   18d56:	b114      	cbz	r4, 18d5e <parse_psm_cfg+0xfe>
   18d58:	4360      	muls	r0, r4
   18d5a:	6068      	str	r0, [r5, #4]
	return 0;
   18d5c:	e7a5      	b.n	18caa <parse_psm_cfg+0x4a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18d5e:	f04f 30ff 	mov.w	r0, #4294967295
   18d62:	e7fa      	b.n	18d5a <parse_psm_cfg+0xfa>
   18d64:	0002f034 	.word	0x0002f034
   18d68:	0002f07c 	.word	0x0002f07c
   18d6c:	00032054 	.word	0x00032054
   18d70:	00032071 	.word	0x00032071
   18d74:	0002f494 	.word	0x0002f494
   18d78:	00032095 	.word	0x00032095
   18d7c:	0002f474 	.word	0x0002f474

00018d80 <lte_lc_offline>:
{
   18d80:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   18d82:	2300      	movs	r3, #0
   18d84:	4804      	ldr	r0, [pc, #16]	; (18d98 <lte_lc_offline+0x18>)
   18d86:	461a      	mov	r2, r3
   18d88:	4619      	mov	r1, r3
   18d8a:	f7ff f977 	bl	1807c <at_cmd_write>
   18d8e:	2800      	cmp	r0, #0
}
   18d90:	bf18      	it	ne
   18d92:	f06f 0004 	mvnne.w	r0, #4
   18d96:	bd08      	pop	{r3, pc}
   18d98:	000327a2 	.word	0x000327a2

00018d9c <lte_lc_normal>:
{
   18d9c:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   18d9e:	2300      	movs	r3, #0
   18da0:	4804      	ldr	r0, [pc, #16]	; (18db4 <lte_lc_normal+0x18>)
   18da2:	461a      	mov	r2, r3
   18da4:	4619      	mov	r1, r3
   18da6:	f7ff f969 	bl	1807c <at_cmd_write>
   18daa:	2800      	cmp	r0, #0
}
   18dac:	bf18      	it	ne
   18dae:	f06f 0004 	mvnne.w	r0, #4
   18db2:	bd08      	pop	{r3, pc}
   18db4:	00032798 	.word	0x00032798

00018db8 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   18db8:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   18dba:	4605      	mov	r5, r0
{
   18dbc:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   18dbe:	2800      	cmp	r0, #0
   18dc0:	d040      	beq.n	18e44 <lte_lc_system_mode_set+0x8c>
   18dc2:	1e43      	subs	r3, r0, #1
   18dc4:	2b04      	cmp	r3, #4
   18dc6:	d90e      	bls.n	18de6 <lte_lc_system_mode_set+0x2e>
   18dc8:	4b1f      	ldr	r3, [pc, #124]	; (18e48 <lte_lc_system_mode_set+0x90>)
   18dca:	4920      	ldr	r1, [pc, #128]	; (18e4c <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   18dcc:	4820      	ldr	r0, [pc, #128]	; (18e50 <lte_lc_system_mode_set+0x98>)
   18dce:	1ac9      	subs	r1, r1, r3
   18dd0:	08c9      	lsrs	r1, r1, #3
   18dd2:	0189      	lsls	r1, r1, #6
   18dd4:	f041 0101 	orr.w	r1, r1, #1
   18dd8:	f013 fd98 	bl	2c90c <log_0>
		return -EINVAL;
   18ddc:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   18de0:	4620      	mov	r0, r4
   18de2:	b00f      	add	sp, #60	; 0x3c
   18de4:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   18de6:	4b1b      	ldr	r3, [pc, #108]	; (18e54 <lte_lc_system_mode_set+0x9c>)
   18de8:	2132      	movs	r1, #50	; 0x32
   18dea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18dee:	4a1a      	ldr	r2, [pc, #104]	; (18e58 <lte_lc_system_mode_set+0xa0>)
   18df0:	a801      	add	r0, sp, #4
   18df2:	f013 fb4b 	bl	2c48c <snprintk>
	if (len < 0) {
   18df6:	2800      	cmp	r0, #0
   18df8:	da0c      	bge.n	18e14 <lte_lc_system_mode_set+0x5c>
   18dfa:	4b13      	ldr	r3, [pc, #76]	; (18e48 <lte_lc_system_mode_set+0x90>)
   18dfc:	4913      	ldr	r1, [pc, #76]	; (18e4c <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   18dfe:	4817      	ldr	r0, [pc, #92]	; (18e5c <lte_lc_system_mode_set+0xa4>)
   18e00:	1ac9      	subs	r1, r1, r3
   18e02:	08c9      	lsrs	r1, r1, #3
   18e04:	0189      	lsls	r1, r1, #6
   18e06:	f041 0101 	orr.w	r1, r1, #1
   18e0a:	f013 fd7f 	bl	2c90c <log_0>
		return -EFAULT;
   18e0e:	f06f 040d 	mvn.w	r4, #13
   18e12:	e7e5      	b.n	18de0 <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   18e14:	2300      	movs	r3, #0
   18e16:	a801      	add	r0, sp, #4
   18e18:	461a      	mov	r2, r3
   18e1a:	4619      	mov	r1, r3
   18e1c:	f7ff f92e 	bl	1807c <at_cmd_write>
	if (err) {
   18e20:	4604      	mov	r4, r0
   18e22:	b150      	cbz	r0, 18e3a <lte_lc_system_mode_set+0x82>
   18e24:	4a09      	ldr	r2, [pc, #36]	; (18e4c <lte_lc_system_mode_set+0x94>)
   18e26:	4b08      	ldr	r3, [pc, #32]	; (18e48 <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   18e28:	4601      	mov	r1, r0
   18e2a:	1ad2      	subs	r2, r2, r3
   18e2c:	08d2      	lsrs	r2, r2, #3
   18e2e:	0192      	lsls	r2, r2, #6
   18e30:	480b      	ldr	r0, [pc, #44]	; (18e60 <lte_lc_system_mode_set+0xa8>)
   18e32:	f042 0201 	orr.w	r2, r2, #1
   18e36:	f013 fd78 	bl	2c92a <log_1>
	sys_mode_current = mode;
   18e3a:	4b0a      	ldr	r3, [pc, #40]	; (18e64 <lte_lc_system_mode_set+0xac>)
   18e3c:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   18e3e:	4b0a      	ldr	r3, [pc, #40]	; (18e68 <lte_lc_system_mode_set+0xb0>)
   18e40:	701d      	strb	r5, [r3, #0]
	return err;
   18e42:	e7cd      	b.n	18de0 <lte_lc_system_mode_set+0x28>
	switch (mode) {
   18e44:	4604      	mov	r4, r0
   18e46:	e7cb      	b.n	18de0 <lte_lc_system_mode_set+0x28>
   18e48:	0002f034 	.word	0x0002f034
   18e4c:	0002f07c 	.word	0x0002f07c
   18e50:	00032454 	.word	0x00032454
   18e54:	0002f45c 	.word	0x0002f45c
   18e58:	00032472 	.word	0x00032472
   18e5c:	00032485 	.word	0x00032485
   18e60:	000324ad 	.word	0x000324ad
   18e64:	20026291 	.word	0x20026291
   18e68:	20020a5d 	.word	0x20020a5d

00018e6c <w_lte_lc_connect>:
{
   18e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   18e70:	4b23      	ldr	r3, [pc, #140]	; (18f00 <w_lte_lc_connect+0x94>)
   18e72:	4c24      	ldr	r4, [pc, #144]	; (18f04 <w_lte_lc_connect+0x98>)
   18e74:	4924      	ldr	r1, [pc, #144]	; (18f08 <w_lte_lc_connect+0x9c>)
   18e76:	781b      	ldrb	r3, [r3, #0]
   18e78:	1a64      	subs	r4, r4, r1
{
   18e7a:	4605      	mov	r5, r0
   18e7c:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   18e7e:	b94b      	cbnz	r3, 18e94 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   18e80:	01a1      	lsls	r1, r4, #6
   18e82:	4822      	ldr	r0, [pc, #136]	; (18f0c <w_lte_lc_connect+0xa0>)
   18e84:	f041 0101 	orr.w	r1, r1, #1
   18e88:	f013 fd40 	bl	2c90c <log_0>
		return -EPERM;
   18e8c:	f04f 30ff 	mov.w	r0, #4294967295
}
   18e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18e94:	2201      	movs	r2, #1
   18e96:	2100      	movs	r1, #0
   18e98:	481d      	ldr	r0, [pc, #116]	; (18f10 <w_lte_lc_connect+0xa4>)
   18e9a:	f015 fdfc 	bl	2ea96 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   18e9e:	4e1d      	ldr	r6, [pc, #116]	; (18f14 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   18ea0:	4f1b      	ldr	r7, [pc, #108]	; (18f10 <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   18ea2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 18f1c <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   18ea6:	7830      	ldrb	r0, [r6, #0]
   18ea8:	f7ff ff86 	bl	18db8 <lte_lc_system_mode_set>
		if (err) {
   18eac:	2800      	cmp	r0, #0
   18eae:	d1ef      	bne.n	18e90 <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   18eb0:	f7ff ff74 	bl	18d9c <lte_lc_normal>
		if (err || !blocking) {
   18eb4:	2800      	cmp	r0, #0
   18eb6:	d1eb      	bne.n	18e90 <w_lte_lc_connect+0x24>
   18eb8:	2d00      	cmp	r5, #0
   18eba:	d0e9      	beq.n	18e90 <w_lte_lc_connect+0x24>
   18ebc:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   18ec0:	2300      	movs	r3, #0
   18ec2:	4638      	mov	r0, r7
   18ec4:	f00b fd62 	bl	2498c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   18ec8:	f110 0f0b 	cmn.w	r0, #11
   18ecc:	d1e0      	bne.n	18e90 <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   18ece:	ea4f 1984 	mov.w	r9, r4, lsl #6
   18ed2:	f049 0903 	orr.w	r9, r9, #3
   18ed6:	4649      	mov	r1, r9
   18ed8:	4640      	mov	r0, r8
   18eda:	f013 fd17 	bl	2c90c <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   18ede:	7833      	ldrb	r3, [r6, #0]
   18ee0:	2b01      	cmp	r3, #1
   18ee2:	d10a      	bne.n	18efa <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   18ee4:	2302      	movs	r3, #2
   18ee6:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   18ee8:	f7ff ff4a 	bl	18d80 <lte_lc_offline>
				if (err) {
   18eec:	2800      	cmp	r0, #0
   18eee:	d1cf      	bne.n	18e90 <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   18ef0:	4649      	mov	r1, r9
   18ef2:	4809      	ldr	r0, [pc, #36]	; (18f18 <w_lte_lc_connect+0xac>)
   18ef4:	f013 fd0a 	bl	2c90c <log_0>
	} while (retry);
   18ef8:	e7d5      	b.n	18ea6 <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   18efa:	f06f 0073 	mvn.w	r0, #115	; 0x73
   18efe:	e7c7      	b.n	18e90 <w_lte_lc_connect+0x24>
   18f00:	2002628f 	.word	0x2002628f
   18f04:	0002f07c 	.word	0x0002f07c
   18f08:	0002f034 	.word	0x0002f034
   18f0c:	000324d2 	.word	0x000324d2
   18f10:	20021744 	.word	0x20021744
   18f14:	20020a5d 	.word	0x20020a5d
   18f18:	00032522 	.word	0x00032522
   18f1c:	000324fd 	.word	0x000324fd

00018f20 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   18f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   18f24:	2400      	movs	r4, #0
{
   18f26:	b090      	sub	sp, #64	; 0x40
   18f28:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   18f2a:	221a      	movs	r2, #26
   18f2c:	4621      	mov	r1, r4
   18f2e:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   18f30:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   18f34:	9408      	str	r4, [sp, #32]
   18f36:	f00d fa7f 	bl	26438 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   18f3a:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   18f3c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   18f40:	9406      	str	r4, [sp, #24]
   18f42:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   18f46:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   18f48:	2d00      	cmp	r5, #0
   18f4a:	f000 80ad 	beq.w	190a8 <lte_lc_system_mode_get+0x188>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   18f4e:	4623      	mov	r3, r4
   18f50:	221e      	movs	r2, #30
   18f52:	4857      	ldr	r0, [pc, #348]	; (190b0 <lte_lc_system_mode_get+0x190>)
   18f54:	a908      	add	r1, sp, #32
   18f56:	f7ff f891 	bl	1807c <at_cmd_write>
			   NULL);
	if (err) {
   18f5a:	4604      	mov	r4, r0
   18f5c:	b168      	cbz	r0, 18f7a <lte_lc_system_mode_get+0x5a>
   18f5e:	4955      	ldr	r1, [pc, #340]	; (190b4 <lte_lc_system_mode_get+0x194>)
   18f60:	4b55      	ldr	r3, [pc, #340]	; (190b8 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not send AT command");
   18f62:	4856      	ldr	r0, [pc, #344]	; (190bc <lte_lc_system_mode_get+0x19c>)
   18f64:	1ac9      	subs	r1, r1, r3
   18f66:	08c9      	lsrs	r1, r1, #3
   18f68:	0189      	lsls	r1, r1, #6
   18f6a:	f041 0101 	orr.w	r1, r1, #1
   18f6e:	f013 fccd 	bl	2c90c <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   18f72:	4620      	mov	r0, r4
   18f74:	b010      	add	sp, #64	; 0x40
   18f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   18f7a:	2105      	movs	r1, #5
   18f7c:	a802      	add	r0, sp, #8
   18f7e:	f015 fb90 	bl	2e6a2 <at_params_list_init>
	if (err) {
   18f82:	4604      	mov	r4, r0
   18f84:	b158      	cbz	r0, 18f9e <lte_lc_system_mode_get+0x7e>
   18f86:	4b4c      	ldr	r3, [pc, #304]	; (190b8 <lte_lc_system_mode_get+0x198>)
   18f88:	4a4a      	ldr	r2, [pc, #296]	; (190b4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could init AT params list, error: %d", err);
   18f8a:	4601      	mov	r1, r0
   18f8c:	1ad2      	subs	r2, r2, r3
   18f8e:	08d2      	lsrs	r2, r2, #3
   18f90:	0192      	lsls	r2, r2, #6
   18f92:	484b      	ldr	r0, [pc, #300]	; (190c0 <lte_lc_system_mode_get+0x1a0>)
   18f94:	f042 0201 	orr.w	r2, r2, #1
   18f98:	f013 fcc7 	bl	2c92a <log_1>
		return err;
   18f9c:	e7e9      	b.n	18f72 <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   18f9e:	4601      	mov	r1, r0
   18fa0:	2305      	movs	r3, #5
   18fa2:	aa02      	add	r2, sp, #8
   18fa4:	a808      	add	r0, sp, #32
   18fa6:	f7ff fd27 	bl	189f8 <at_parser_max_params_from_str>
	if (err) {
   18faa:	4604      	mov	r4, r0
   18fac:	b158      	cbz	r0, 18fc6 <lte_lc_system_mode_get+0xa6>
   18fae:	4a41      	ldr	r2, [pc, #260]	; (190b4 <lte_lc_system_mode_get+0x194>)
   18fb0:	4b41      	ldr	r3, [pc, #260]	; (190b8 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   18fb2:	4601      	mov	r1, r0
   18fb4:	1ad2      	subs	r2, r2, r3
   18fb6:	08d2      	lsrs	r2, r2, #3
   18fb8:	0192      	lsls	r2, r2, #6
   18fba:	4842      	ldr	r0, [pc, #264]	; (190c4 <lte_lc_system_mode_get+0x1a4>)
   18fbc:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   18fc0:	f013 fcb3 	bl	2c92a <log_1>
			goto clean_exit;
   18fc4:	e013      	b.n	18fee <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   18fc6:	4601      	mov	r1, r0
   18fc8:	466b      	mov	r3, sp
   18fca:	aa04      	add	r2, sp, #16
   18fcc:	a802      	add	r0, sp, #8
   18fce:	f015 fc40 	bl	2e852 <at_params_string_get>
	if (err) {
   18fd2:	4606      	mov	r6, r0
   18fd4:	b178      	cbz	r0, 18ff6 <lte_lc_system_mode_get+0xd6>
   18fd6:	4b38      	ldr	r3, [pc, #224]	; (190b8 <lte_lc_system_mode_get+0x198>)
   18fd8:	4a36      	ldr	r2, [pc, #216]	; (190b4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   18fda:	4601      	mov	r1, r0
   18fdc:	1ad2      	subs	r2, r2, r3
   18fde:	08d2      	lsrs	r2, r2, #3
   18fe0:	0192      	lsls	r2, r2, #6
   18fe2:	4839      	ldr	r0, [pc, #228]	; (190c8 <lte_lc_system_mode_get+0x1a8>)
   18fe4:	f042 0201 	orr.w	r2, r2, #1
   18fe8:	f013 fc9f 	bl	2c92a <log_1>
		goto clean_exit;
   18fec:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   18fee:	a802      	add	r0, sp, #8
   18ff0:	f015 fb6a 	bl	2e6c8 <at_params_list_free>
	return err;
   18ff4:	e7bd      	b.n	18f72 <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   18ff6:	4a35      	ldr	r2, [pc, #212]	; (190cc <lte_lc_system_mode_get+0x1ac>)
   18ff8:	9900      	ldr	r1, [sp, #0]
   18ffa:	a804      	add	r0, sp, #16
   18ffc:	f015 fc67 	bl	2e8ce <response_is_valid>
   19000:	b960      	cbnz	r0, 1901c <lte_lc_system_mode_get+0xfc>
   19002:	4b2d      	ldr	r3, [pc, #180]	; (190b8 <lte_lc_system_mode_get+0x198>)
   19004:	492b      	ldr	r1, [pc, #172]	; (190b4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   19006:	4832      	ldr	r0, [pc, #200]	; (190d0 <lte_lc_system_mode_get+0x1b0>)
   19008:	1ac9      	subs	r1, r1, r3
   1900a:	08c9      	lsrs	r1, r1, #3
   1900c:	0189      	lsls	r1, r1, #6
   1900e:	f041 0101 	orr.w	r1, r1, #1
   19012:	f013 fc7b 	bl	2c90c <log_0>
		err = -EIO;
   19016:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   1901a:	e7e8      	b.n	18fee <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1901c:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   1901e:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   19020:	4639      	mov	r1, r7
   19022:	aa01      	add	r2, sp, #4
   19024:	a802      	add	r0, sp, #8
   19026:	f015 fbfd 	bl	2e824 <at_params_int_get>
		if (err) {
   1902a:	4604      	mov	r4, r0
   1902c:	b148      	cbz	r0, 19042 <lte_lc_system_mode_get+0x122>
   1902e:	4a21      	ldr	r2, [pc, #132]	; (190b4 <lte_lc_system_mode_get+0x194>)
   19030:	4b21      	ldr	r3, [pc, #132]	; (190b8 <lte_lc_system_mode_get+0x198>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   19032:	4601      	mov	r1, r0
   19034:	1ad2      	subs	r2, r2, r3
   19036:	08d2      	lsrs	r2, r2, #3
   19038:	0192      	lsls	r2, r2, #6
   1903a:	4826      	ldr	r0, [pc, #152]	; (190d4 <lte_lc_system_mode_get+0x1b4>)
   1903c:	f042 0201 	orr.w	r2, r2, #1
   19040:	e7be      	b.n	18fc0 <lte_lc_system_mode_get+0xa0>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   19042:	9b01      	ldr	r3, [sp, #4]
   19044:	b113      	cbz	r3, 1904c <lte_lc_system_mode_get+0x12c>
   19046:	fa08 f307 	lsl.w	r3, r8, r7
   1904a:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1904c:	3701      	adds	r7, #1
   1904e:	2f05      	cmp	r7, #5
   19050:	d1e6      	bne.n	19020 <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   19052:	2e0c      	cmp	r6, #12
   19054:	d81b      	bhi.n	1908e <lte_lc_system_mode_get+0x16e>
   19056:	e8df f006 	tbb	[pc, r6]
   1905a:	1a07      	.short	0x1a07
   1905c:	1a121a10 	.word	0x1a121a10
   19060:	1a141a1a 	.word	0x1a141a1a
   19064:	1a16      	.short	0x1a16
   19066:	18          	.byte	0x18
   19067:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   19068:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1906a:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   1906c:	4b1a      	ldr	r3, [pc, #104]	; (190d8 <lte_lc_system_mode_get+0x1b8>)
   1906e:	782a      	ldrb	r2, [r5, #0]
   19070:	7819      	ldrb	r1, [r3, #0]
   19072:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   19074:	bf18      	it	ne
   19076:	701a      	strbne	r2, [r3, #0]
   19078:	e7b9      	b.n	18fee <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   1907a:	2301      	movs	r3, #1
   1907c:	e7f5      	b.n	1906a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   1907e:	2302      	movs	r3, #2
   19080:	e7f3      	b.n	1906a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   19082:	2303      	movs	r3, #3
   19084:	e7f1      	b.n	1906a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   19086:	2304      	movs	r3, #4
   19088:	e7ef      	b.n	1906a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1908a:	2305      	movs	r3, #5
   1908c:	e7ed      	b.n	1906a <lte_lc_system_mode_get+0x14a>
   1908e:	4b0a      	ldr	r3, [pc, #40]	; (190b8 <lte_lc_system_mode_get+0x198>)
   19090:	4908      	ldr	r1, [pc, #32]	; (190b4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   19092:	4812      	ldr	r0, [pc, #72]	; (190dc <lte_lc_system_mode_get+0x1bc>)
   19094:	1ac9      	subs	r1, r1, r3
   19096:	08c9      	lsrs	r1, r1, #3
   19098:	0189      	lsls	r1, r1, #6
   1909a:	f041 0101 	orr.w	r1, r1, #1
   1909e:	f013 fc35 	bl	2c90c <log_0>
		err = -EFAULT;
   190a2:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   190a6:	e7a2      	b.n	18fee <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   190a8:	f06f 0415 	mvn.w	r4, #21
   190ac:	e761      	b.n	18f72 <lte_lc_system_mode_get+0x52>
   190ae:	bf00      	nop
   190b0:	0003253e 	.word	0x0003253e
   190b4:	0002f07c 	.word	0x0002f07c
   190b8:	0002f034 	.word	0x0002f034
   190bc:	0003254e 	.word	0x0003254e
   190c0:	00032568 	.word	0x00032568
   190c4:	0003258d 	.word	0x0003258d
   190c8:	000323cf 	.word	0x000323cf
   190cc:	000325b4 	.word	0x000325b4
   190d0:	000325c1 	.word	0x000325c1
   190d4:	000325de 	.word	0x000325de
   190d8:	20026291 	.word	0x20026291
   190dc:	00032606 	.word	0x00032606

000190e0 <w_lte_lc_init>:
{
   190e0:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   190e2:	4e3e      	ldr	r6, [pc, #248]	; (191dc <w_lte_lc_init+0xfc>)
{
   190e4:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   190e6:	7833      	ldrb	r3, [r6, #0]
   190e8:	2b00      	cmp	r3, #0
   190ea:	d173      	bne.n	191d4 <w_lte_lc_init+0xf4>
	err = lte_lc_system_mode_get(&sys_mode_current);
   190ec:	4d3c      	ldr	r5, [pc, #240]	; (191e0 <w_lte_lc_init+0x100>)
   190ee:	4628      	mov	r0, r5
   190f0:	f7ff ff16 	bl	18f20 <lte_lc_system_mode_get>
	if (err) {
   190f4:	4604      	mov	r4, r0
   190f6:	b168      	cbz	r0, 19114 <w_lte_lc_init+0x34>
   190f8:	4a3a      	ldr	r2, [pc, #232]	; (191e4 <w_lte_lc_init+0x104>)
   190fa:	4b3b      	ldr	r3, [pc, #236]	; (191e8 <w_lte_lc_init+0x108>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   190fc:	4601      	mov	r1, r0
   190fe:	1ad2      	subs	r2, r2, r3
   19100:	08d2      	lsrs	r2, r2, #3
   19102:	0192      	lsls	r2, r2, #6
   19104:	4839      	ldr	r0, [pc, #228]	; (191ec <w_lte_lc_init+0x10c>)
   19106:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   1910a:	f013 fc0e 	bl	2c92a <log_1>
}
   1910e:	4620      	mov	r0, r4
   19110:	b00e      	add	sp, #56	; 0x38
   19112:	bd70      	pop	{r4, r5, r6, pc}
	err = at_notif_register_handler(NULL, at_handler);
   19114:	4936      	ldr	r1, [pc, #216]	; (191f0 <w_lte_lc_init+0x110>)
   19116:	f7ff f8dd 	bl	182d4 <at_notif_register_handler>
	if (err) {
   1911a:	4604      	mov	r4, r0
   1911c:	b148      	cbz	r0, 19132 <w_lte_lc_init+0x52>
   1911e:	4a31      	ldr	r2, [pc, #196]	; (191e4 <w_lte_lc_init+0x104>)
   19120:	4b31      	ldr	r3, [pc, #196]	; (191e8 <w_lte_lc_init+0x108>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   19122:	4601      	mov	r1, r0
   19124:	1ad2      	subs	r2, r2, r3
   19126:	08d2      	lsrs	r2, r2, #3
   19128:	0192      	lsls	r2, r2, #6
   1912a:	4832      	ldr	r0, [pc, #200]	; (191f4 <w_lte_lc_init+0x114>)
   1912c:	f042 0201 	orr.w	r2, r2, #1
   19130:	e7eb      	b.n	1910a <w_lte_lc_init+0x2a>
	if (sys_mode_current != sys_mode_target) {
   19132:	4b31      	ldr	r3, [pc, #196]	; (191f8 <w_lte_lc_init+0x118>)
   19134:	7818      	ldrb	r0, [r3, #0]
   19136:	782b      	ldrb	r3, [r5, #0]
   19138:	4283      	cmp	r3, r0
   1913a:	d00d      	beq.n	19158 <w_lte_lc_init+0x78>
		err = lte_lc_system_mode_set(sys_mode_target);
   1913c:	f7ff fe3c 	bl	18db8 <lte_lc_system_mode_set>
		if (err) {
   19140:	4604      	mov	r4, r0
   19142:	b148      	cbz	r0, 19158 <w_lte_lc_init+0x78>
   19144:	4a27      	ldr	r2, [pc, #156]	; (191e4 <w_lte_lc_init+0x104>)
   19146:	4b28      	ldr	r3, [pc, #160]	; (191e8 <w_lte_lc_init+0x108>)
			LOG_ERR("Could not set system mode, error: %d", err);
   19148:	4601      	mov	r1, r0
   1914a:	1ad2      	subs	r2, r2, r3
   1914c:	08d2      	lsrs	r2, r2, #3
   1914e:	0192      	lsls	r2, r2, #6
   19150:	482a      	ldr	r0, [pc, #168]	; (191fc <w_lte_lc_init+0x11c>)
   19152:	f042 0201 	orr.w	r2, r2, #1
   19156:	e7d8      	b.n	1910a <w_lte_lc_init+0x2a>
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
   19158:	2300      	movs	r3, #0
   1915a:	4829      	ldr	r0, [pc, #164]	; (19200 <w_lte_lc_init+0x120>)
   1915c:	461a      	mov	r2, r3
   1915e:	4619      	mov	r1, r3
   19160:	f7fe ff8c 	bl	1807c <at_cmd_write>
   19164:	4603      	mov	r3, r0
   19166:	b110      	cbz	r0, 1916e <w_lte_lc_init+0x8e>
		return -EIO;
   19168:	f06f 0404 	mvn.w	r4, #4
   1916c:	e7cf      	b.n	1910e <w_lte_lc_init+0x2e>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   1916e:	4602      	mov	r2, r0
   19170:	4601      	mov	r1, r0
   19172:	4824      	ldr	r0, [pc, #144]	; (19204 <w_lte_lc_init+0x124>)
   19174:	f7fe ff82 	bl	1807c <at_cmd_write>
   19178:	4604      	mov	r4, r0
   1917a:	2800      	cmp	r0, #0
   1917c:	d1f4      	bne.n	19168 <w_lte_lc_init+0x88>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   1917e:	4602      	mov	r2, r0
   19180:	4603      	mov	r3, r0
   19182:	4601      	mov	r1, r0
   19184:	4820      	ldr	r0, [pc, #128]	; (19208 <w_lte_lc_init+0x128>)
   19186:	f7fe ff79 	bl	1807c <at_cmd_write>
	if (err) {
   1918a:	4602      	mov	r2, r0
   1918c:	b1f8      	cbz	r0, 191ce <w_lte_lc_init+0xee>
   1918e:	4b16      	ldr	r3, [pc, #88]	; (191e8 <w_lte_lc_init+0x108>)
   19190:	4d14      	ldr	r5, [pc, #80]	; (191e4 <w_lte_lc_init+0x104>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   19192:	491d      	ldr	r1, [pc, #116]	; (19208 <w_lte_lc_init+0x128>)
   19194:	1aed      	subs	r5, r5, r3
   19196:	08ed      	lsrs	r5, r5, #3
   19198:	01ad      	lsls	r5, r5, #6
   1919a:	f045 0502 	orr.w	r5, r5, #2
   1919e:	462b      	mov	r3, r5
   191a0:	481a      	ldr	r0, [pc, #104]	; (1920c <w_lte_lc_init+0x12c>)
   191a2:	f013 fbd9 	bl	2c958 <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   191a6:	462a      	mov	r2, r5
   191a8:	4917      	ldr	r1, [pc, #92]	; (19208 <w_lte_lc_init+0x128>)
   191aa:	4819      	ldr	r0, [pc, #100]	; (19210 <w_lte_lc_init+0x130>)
   191ac:	f013 fbbd 	bl	2c92a <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   191b0:	4623      	mov	r3, r4
   191b2:	2232      	movs	r2, #50	; 0x32
   191b4:	4817      	ldr	r0, [pc, #92]	; (19214 <w_lte_lc_init+0x134>)
   191b6:	a901      	add	r1, sp, #4
   191b8:	f7fe ff60 	bl	1807c <at_cmd_write>
		if (err == 0) {
   191bc:	b938      	cbnz	r0, 191ce <w_lte_lc_init+0xee>
			LOG_WRN("Current modem firmware version: %s",
   191be:	a801      	add	r0, sp, #4
   191c0:	f7f9 ff08 	bl	12fd4 <log_strdup>
   191c4:	462a      	mov	r2, r5
   191c6:	4601      	mov	r1, r0
   191c8:	4813      	ldr	r0, [pc, #76]	; (19218 <w_lte_lc_init+0x138>)
   191ca:	f013 fbae 	bl	2c92a <log_1>
	is_initialized = true;
   191ce:	2301      	movs	r3, #1
   191d0:	7033      	strb	r3, [r6, #0]
	return 0;
   191d2:	e79c      	b.n	1910e <w_lte_lc_init+0x2e>
		return -EALREADY;
   191d4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   191d8:	e799      	b.n	1910e <w_lte_lc_init+0x2e>
   191da:	bf00      	nop
   191dc:	2002628f 	.word	0x2002628f
   191e0:	20026291 	.word	0x20026291
   191e4:	0002f07c 	.word	0x0002f07c
   191e8:	0002f034 	.word	0x0002f034
   191ec:	00032632 	.word	0x00032632
   191f0:	0000d439 	.word	0x0000d439
   191f4:	0003265f 	.word	0x0003265f
   191f8:	20020a5d 	.word	0x20020a5d
   191fc:	00032684 	.word	0x00032684
   19200:	00032785 	.word	0x00032785
   19204:	0003276f 	.word	0x0003276f
   19208:	0003277a 	.word	0x0003277a
   1920c:	000326a9 	.word	0x000326a9
   19210:	000326db 	.word	0x000326db
   19214:	00032706 	.word	0x00032706
   19218:	0003270e 	.word	0x0003270e

0001921c <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   1921c:	b510      	push	{r4, lr}
   1921e:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   19220:	4a09      	ldr	r2, [pc, #36]	; (19248 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   19222:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   19224:	7823      	ldrb	r3, [r4, #0]
   19226:	2100      	movs	r1, #0
   19228:	f7ff fbe6 	bl	189f8 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   1922c:	f110 0f0b 	cmn.w	r0, #11
   19230:	d000      	beq.n	19234 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   19232:	b940      	cbnz	r0, 19246 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   19234:	4804      	ldr	r0, [pc, #16]	; (19248 <modem_info_parse.isra.0+0x2c>)
   19236:	f015 fb33 	bl	2e8a0 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   1923a:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   1923c:	4298      	cmp	r0, r3
   1923e:	bf94      	ite	ls
   19240:	2000      	movls	r0, #0
   19242:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   19246:	bd10      	pop	{r4, pc}
   19248:	2002176c 	.word	0x2002176c

0001924c <modem_info_string_get>:
	return sizeof(uint16_t);
}

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   1924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   19250:	2500      	movs	r5, #0
{
   19252:	460e      	mov	r6, r1
   19254:	b0a5      	sub	sp, #148	; 0x94
   19256:	4680      	mov	r8, r0
   19258:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1925a:	4629      	mov	r1, r5
   1925c:	227c      	movs	r2, #124	; 0x7c
   1925e:	a805      	add	r0, sp, #20
   19260:	9504      	str	r5, [sp, #16]
   19262:	f00d f8e9 	bl	26438 <memset>
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   19266:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   19268:	2e00      	cmp	r6, #0
   1926a:	f000 80e4 	beq.w	19436 <modem_info_string_get+0x1ea>
   1926e:	f1b9 0f00 	cmp.w	r9, #0
   19272:	f000 80e0 	beq.w	19436 <modem_info_string_get+0x1ea>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   19276:	4b74      	ldr	r3, [pc, #464]	; (19448 <modem_info_string_get+0x1fc>)
   19278:	2280      	movs	r2, #128	; 0x80
   1927a:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   1927e:	a904      	add	r1, sp, #16
   19280:	462b      	mov	r3, r5
   19282:	f8da 0000 	ldr.w	r0, [sl]
   19286:	f7fe fef9 	bl	1807c <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   1928a:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   1928e:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   19290:	d10c      	bne.n	192ac <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   19292:	f10d 0119 	add.w	r1, sp, #25
   19296:	4630      	mov	r0, r6
   19298:	f00d fc80 	bl	26b9c <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   1929c:	4630      	mov	r0, r6
   1929e:	f00d fcdb 	bl	26c58 <strlen>
   192a2:	4601      	mov	r1, r0
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   192a4:	4608      	mov	r0, r1
   192a6:	b025      	add	sp, #148	; 0x94
   192a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   192ac:	f1b8 0f09 	cmp.w	r8, #9
   192b0:	d038      	beq.n	19324 <modem_info_string_get+0xd8>
	if (err != 0) {
   192b2:	2c00      	cmp	r4, #0
   192b4:	f040 80c2 	bne.w	1943c <modem_info_string_get+0x1f0>
	size_t ip_str_len = 0;
   192b8:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   192ba:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 1946c <modem_info_string_get+0x220>
	size_t cmd_rsp_idx = 0;
   192be:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   192c0:	9a00      	ldr	r2, [sp, #0]
   192c2:	ab04      	add	r3, sp, #16
   192c4:	f1b8 0f09 	cmp.w	r8, #9
   192c8:	4413      	add	r3, r2
   192ca:	d10f      	bne.n	192ec <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   192cc:	4618      	mov	r0, r3
   192ce:	495f      	ldr	r1, [pc, #380]	; (1944c <modem_info_string_get+0x200>)
   192d0:	9301      	str	r3, [sp, #4]
   192d2:	f00d febb 	bl	2704c <strstr>
		if (ip_str_end == NULL) {
   192d6:	2800      	cmp	r0, #0
   192d8:	f000 80b3 	beq.w	19442 <modem_info_string_get+0x1f6>
		recv_buf[++ip_str_len] = 0;
   192dc:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   192de:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   192e0:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   192e2:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   192e4:	1c47      	adds	r7, r0, #1
   192e6:	443a      	add	r2, r7
   192e8:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   192ec:	4619      	mov	r1, r3
   192ee:	f10a 0009 	add.w	r0, sl, #9
   192f2:	f7ff ff93 	bl	1921c <modem_info_parse.isra.0>
	if (err) {
   192f6:	4601      	mov	r1, r0
   192f8:	b1b8      	cbz	r0, 1932a <modem_info_string_get+0xde>
   192fa:	4a55      	ldr	r2, [pc, #340]	; (19450 <modem_info_string_get+0x204>)
   192fc:	4b55      	ldr	r3, [pc, #340]	; (19454 <modem_info_string_get+0x208>)
		LOG_ERR("Unable to parse data: %d", err);
   192fe:	9000      	str	r0, [sp, #0]
   19300:	1ad2      	subs	r2, r2, r3
   19302:	08d2      	lsrs	r2, r2, #3
   19304:	0192      	lsls	r2, r2, #6
   19306:	4854      	ldr	r0, [pc, #336]	; (19458 <modem_info_string_get+0x20c>)
   19308:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Unable to obtain short: %d", err);
   1930c:	f013 fb0d 	bl	2c92a <log_1>
			return err;
   19310:	9900      	ldr	r1, [sp, #0]
   19312:	e7c7      	b.n	192a4 <modem_info_string_get+0x58>
			++ip_str_end;
   19314:	3001      	adds	r0, #1
			++ip_cnt;
   19316:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   19318:	4639      	mov	r1, r7
   1931a:	f00d fe97 	bl	2704c <strstr>
   1931e:	2800      	cmp	r0, #0
   19320:	d1f8      	bne.n	19314 <modem_info_string_get+0xc8>
   19322:	e7c6      	b.n	192b2 <modem_info_string_get+0x66>
   19324:	4f49      	ldr	r7, [pc, #292]	; (1944c <modem_info_string_get+0x200>)
	char *ip_str_end = recv_buf;
   19326:	a804      	add	r0, sp, #16
   19328:	e7f6      	b.n	19318 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   1932a:	f89a 300a 	ldrb.w	r3, [sl, #10]
   1932e:	2b01      	cmp	r3, #1
   19330:	d11e      	bne.n	19370 <modem_info_string_get+0x124>
		err = at_params_short_get(&m_param_list,
   19332:	f89a 1008 	ldrb.w	r1, [sl, #8]
   19336:	4658      	mov	r0, fp
   19338:	f10d 020a 	add.w	r2, sp, #10
   1933c:	f015 fa5c 	bl	2e7f8 <at_params_short_get>
		if (err) {
   19340:	4601      	mov	r1, r0
   19342:	b148      	cbz	r0, 19358 <modem_info_string_get+0x10c>
   19344:	4a42      	ldr	r2, [pc, #264]	; (19450 <modem_info_string_get+0x204>)
   19346:	4b43      	ldr	r3, [pc, #268]	; (19454 <modem_info_string_get+0x208>)
			LOG_ERR("Unable to obtain short: %d", err);
   19348:	9000      	str	r0, [sp, #0]
   1934a:	1ad2      	subs	r2, r2, r3
   1934c:	08d2      	lsrs	r2, r2, #3
   1934e:	0192      	lsls	r2, r2, #6
   19350:	4842      	ldr	r0, [pc, #264]	; (1945c <modem_info_string_get+0x210>)
   19352:	f042 0201 	orr.w	r2, r2, #1
   19356:	e7d9      	b.n	1930c <modem_info_string_get+0xc0>
		err = snprintf(buf, buf_size, "%d", param_value);
   19358:	4649      	mov	r1, r9
   1935a:	4630      	mov	r0, r6
   1935c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   19360:	4a3f      	ldr	r2, [pc, #252]	; (19460 <modem_info_string_get+0x214>)
   19362:	f00d fad9 	bl	26918 <snprintf>
		if ((err <= 0) || (err > buf_size)) {
   19366:	4548      	cmp	r0, r9
   19368:	d915      	bls.n	19396 <modem_info_string_get+0x14a>
			return -EMSGSIZE;
   1936a:	f06f 0179 	mvn.w	r1, #121	; 0x79
   1936e:	e799      	b.n	192a4 <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   19370:	2b03      	cmp	r3, #3
   19372:	d110      	bne.n	19396 <modem_info_string_get+0x14a>
		len = buf_size - out_buf_len;
   19374:	eba9 0304 	sub.w	r3, r9, r4
		err = at_params_string_get(&m_param_list,
   19378:	f89a 1008 	ldrb.w	r1, [sl, #8]
		len = buf_size - out_buf_len;
   1937c:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   1937e:	4658      	mov	r0, fp
   19380:	ab03      	add	r3, sp, #12
   19382:	1932      	adds	r2, r6, r4
   19384:	f015 fa65 	bl	2e852 <at_params_string_get>
		if (err != 0) {
   19388:	4601      	mov	r1, r0
   1938a:	2800      	cmp	r0, #0
   1938c:	d18a      	bne.n	192a4 <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   1938e:	9b03      	ldr	r3, [sp, #12]
   19390:	454b      	cmp	r3, r9
   19392:	d2ea      	bcs.n	1936a <modem_info_string_get+0x11e>
		buf[len] = 0;
   19394:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   19396:	f1b8 0f0e 	cmp.w	r8, #14
   1939a:	d121      	bne.n	193e0 <modem_info_string_get+0x194>
   1939c:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1939e:	4630      	mov	r0, r6
   193a0:	f00d fc5a 	bl	26c58 <strlen>
   193a4:	1ca3      	adds	r3, r4, #2
   193a6:	1ba4      	subs	r4, r4, r6
   193a8:	42a0      	cmp	r0, r4
   193aa:	d80f      	bhi.n	193cc <modem_info_string_get+0x180>
		if ((len == ICCID_LEN) &&
   193ac:	9b03      	ldr	r3, [sp, #12]
   193ae:	2b14      	cmp	r3, #20
   193b0:	d106      	bne.n	193c0 <modem_info_string_get+0x174>
   193b2:	7cf3      	ldrb	r3, [r6, #19]
   193b4:	2b46      	cmp	r3, #70	; 0x46
   193b6:	d103      	bne.n	193c0 <modem_info_string_get+0x174>
			buf[len - 1] = '\0';
   193b8:	2300      	movs	r3, #0
   193ba:	74f3      	strb	r3, [r6, #19]
			--len;
   193bc:	2313      	movs	r3, #19
   193be:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   193c0:	9903      	ldr	r1, [sp, #12]
   193c2:	2900      	cmp	r1, #0
   193c4:	bf08      	it	eq
   193c6:	f06f 0185 	mvneq.w	r1, #133	; 0x85
   193ca:	e76b      	b.n	192a4 <modem_info_string_get+0x58>
		current_char = buf[i];
   193cc:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   193d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   193d4:	461c      	mov	r4, r3
		buf[i] = next_char;
   193d6:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   193da:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   193de:	e7de      	b.n	1939e <modem_info_string_get+0x152>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   193e0:	f1b8 0f09 	cmp.w	r8, #9
   193e4:	d1ec      	bne.n	193c0 <modem_info_string_get+0x174>
   193e6:	2d00      	cmp	r5, #0
   193e8:	ddea      	ble.n	193c0 <modem_info_string_get+0x174>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   193ea:	1933      	adds	r3, r6, r4
   193ec:	4618      	mov	r0, r3
   193ee:	491d      	ldr	r1, [pc, #116]	; (19464 <modem_info_string_get+0x218>)
   193f0:	9301      	str	r3, [sp, #4]
   193f2:	f00d fe2b 	bl	2704c <strstr>
		if (ip_v6_str) {
   193f6:	b130      	cbz	r0, 19406 <modem_info_string_get+0x1ba>
			*ip_v6_str = 0;
   193f8:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   193fa:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   193fc:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   193fe:	4618      	mov	r0, r3
   19400:	f00d fc2a 	bl	26c58 <strlen>
   19404:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   19406:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   19408:	2d01      	cmp	r5, #1
		out_buf_len += len;
   1940a:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   1940c:	d00e      	beq.n	1942c <modem_info_string_get+0x1e0>
			err = snprintf(&buf[out_buf_len],
   1940e:	eba9 0104 	sub.w	r1, r9, r4
   19412:	4a15      	ldr	r2, [pc, #84]	; (19468 <modem_info_string_get+0x21c>)
   19414:	1930      	adds	r0, r6, r4
   19416:	9100      	str	r1, [sp, #0]
   19418:	f00d fa7e 	bl	26918 <snprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   1941c:	2800      	cmp	r0, #0
   1941e:	dda4      	ble.n	1936a <modem_info_string_get+0x11e>
   19420:	9900      	ldr	r1, [sp, #0]
   19422:	4281      	cmp	r1, r0
   19424:	d3a1      	bcc.n	1936a <modem_info_string_get+0x11e>
			cmd_rsp_idx = ip_str_len + 1;
   19426:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   19428:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   1942a:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   1942c:	3d01      	subs	r5, #1
   1942e:	f47f af47 	bne.w	192c0 <modem_info_string_get+0x74>
			len = out_buf_len;
   19432:	9403      	str	r4, [sp, #12]
   19434:	e7c4      	b.n	193c0 <modem_info_string_get+0x174>
		return -EINVAL;
   19436:	f06f 0115 	mvn.w	r1, #21
   1943a:	e733      	b.n	192a4 <modem_info_string_get+0x58>
		return -EIO;
   1943c:	f06f 0104 	mvn.w	r1, #4
   19440:	e730      	b.n	192a4 <modem_info_string_get+0x58>
			return -EFAULT;
   19442:	f06f 010d 	mvn.w	r1, #13
   19446:	e72d      	b.n	192a4 <modem_info_string_get+0x58>
   19448:	0002f580 	.word	0x0002f580
   1944c:	00032b45 	.word	0x00032b45
   19450:	0002f084 	.word	0x0002f084
   19454:	0002f034 	.word	0x0002f034
   19458:	00032902 	.word	0x00032902
   1945c:	0003291b 	.word	0x0003291b
   19460:	0002feee 	.word	0x0002feee
   19464:	0003095d 	.word	0x0003095d
   19468:	00032936 	.word	0x00032936
   1946c:	2002176c 	.word	0x2002176c

00019470 <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   19470:	210a      	movs	r1, #10
   19472:	4801      	ldr	r0, [pc, #4]	; (19478 <modem_info_init+0x8>)
   19474:	f015 b915 	b.w	2e6a2 <at_params_list_init>
   19478:	2002176c 	.word	0x2002176c

0001947c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1947c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1947e:	f7f9 ff43 	bl	13308 <z_impl_log_panic>
   19482:	4b06      	ldr	r3, [pc, #24]	; (1949c <k_sys_fatal_error_handler+0x20>)
   19484:	4906      	ldr	r1, [pc, #24]	; (194a0 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   19486:	4807      	ldr	r0, [pc, #28]	; (194a4 <k_sys_fatal_error_handler+0x28>)
   19488:	1ac9      	subs	r1, r1, r3
   1948a:	08c9      	lsrs	r1, r1, #3
   1948c:	0189      	lsls	r1, r1, #6
   1948e:	f041 0101 	orr.w	r1, r1, #1
   19492:	f013 fa3b 	bl	2c90c <log_0>
	sys_arch_reboot(0);
   19496:	2000      	movs	r0, #0
   19498:	f7fb fce2 	bl	14e60 <sys_arch_reboot>

	CODE_UNREACHABLE;
   1949c:	0002f034 	.word	0x0002f034
   194a0:	0002f06c 	.word	0x0002f06c
   194a4:	0003295b 	.word	0x0003295b

000194a8 <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   194a8:	4b02      	ldr	r3, [pc, #8]	; (194b4 <date_time_notify_event.constprop.0+0xc>)
   194aa:	681b      	ldr	r3, [r3, #0]
   194ac:	b10b      	cbz	r3, 194b2 <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   194ae:	4802      	ldr	r0, [pc, #8]	; (194b8 <date_time_notify_event.constprop.0+0x10>)
   194b0:	4718      	bx	r3
	}
}
   194b2:	4770      	bx	lr
   194b4:	20021774 	.word	0x20021774
   194b8:	20026292 	.word	0x20026292

000194bc <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   194bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   194c0:	4e72      	ldr	r6, [pc, #456]	; (1968c <new_date_time_get+0x1d0>)
   194c2:	4c73      	ldr	r4, [pc, #460]	; (19690 <new_date_time_get+0x1d4>)
   194c4:	4637      	mov	r7, r6
   194c6:	4b73      	ldr	r3, [pc, #460]	; (19694 <new_date_time_get+0x1d8>)
{
   194c8:	b095      	sub	sp, #84	; 0x54
   194ca:	1ae4      	subs	r4, r4, r3
   194cc:	08e4      	lsrs	r4, r4, #3
   194ce:	f04f 33ff 	mov.w	r3, #4294967295
   194d2:	f04f 32ff 	mov.w	r2, #4294967295
   194d6:	4870      	ldr	r0, [pc, #448]	; (19698 <new_date_time_get+0x1dc>)
   194d8:	f00b fa58 	bl	2498c <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   194dc:	68b3      	ldr	r3, [r6, #8]
   194de:	b18b      	cbz	r3, 19504 <new_date_time_get+0x48>
   194e0:	e9d6 2300 	ldrd	r2, r3, [r6]
   194e4:	4313      	orrs	r3, r2
   194e6:	d00d      	beq.n	19504 <new_date_time_get+0x48>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   194e8:	f015 fa14 	bl	2e914 <k_uptime_get>
   194ec:	68b3      	ldr	r3, [r6, #8]
   194ee:	1ac0      	subs	r0, r0, r3
   194f0:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   194f4:	2801      	cmp	r0, #1
   194f6:	f171 0300 	sbcs.w	r3, r1, #0
   194fa:	da03      	bge.n	19504 <new_date_time_get+0x48>
		LOG_DBG("Updating date time UTC...");

		err = current_time_check();
		if (err == 0) {
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
   194fc:	2201      	movs	r2, #1
   194fe:	4b67      	ldr	r3, [pc, #412]	; (1969c <new_date_time_get+0x1e0>)

		LOG_DBG("Not getting time from NTP server");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   19500:	701a      	strb	r2, [r3, #0]
   19502:	e05a      	b.n	195ba <new_date_time_get+0xfe>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   19504:	2300      	movs	r3, #0
   19506:	2221      	movs	r2, #33	; 0x21
   19508:	4865      	ldr	r0, [pc, #404]	; (196a0 <new_date_time_get+0x1e4>)
   1950a:	a902      	add	r1, sp, #8
   1950c:	f7fe fdb6 	bl	1807c <at_cmd_write>
	if (err) {
   19510:	2800      	cmp	r0, #0
   19512:	d155      	bne.n	195c0 <new_date_time_get+0x104>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   19514:	2520      	movs	r5, #32
   19516:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   1951a:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   1951e:	4628      	mov	r0, r5
   19520:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   19522:	f812 3b01 	ldrb.w	r3, [r2], #1
   19526:	3b2c      	subs	r3, #44	; 0x2c
   19528:	b2db      	uxtb	r3, r3
   1952a:	2b0e      	cmp	r3, #14
   1952c:	d805      	bhi.n	1953a <new_date_time_get+0x7e>
   1952e:	fa21 f303 	lsr.w	r3, r1, r3
   19532:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   19534:	bf48      	it	mi
   19536:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   1953a:	3d01      	subs	r5, #1
   1953c:	d1f1      	bne.n	19522 <new_date_time_get+0x66>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1953e:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   19540:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   19542:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   19544:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   19546:	f00d fedb 	bl	27300 <strtol>
   1954a:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   1954c:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   1954e:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   19550:	a901      	add	r1, sp, #4
   19552:	9801      	ldr	r0, [sp, #4]
   19554:	f00d fed4 	bl	27300 <strtol>
   19558:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1955a:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   1955c:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1955e:	a901      	add	r1, sp, #4
   19560:	9801      	ldr	r0, [sp, #4]
   19562:	f00d fecd 	bl	27300 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   19566:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   19568:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1956a:	a901      	add	r1, sp, #4
   1956c:	9801      	ldr	r0, [sp, #4]
   1956e:	f00d fec7 	bl	27300 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19572:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   19574:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19576:	a901      	add	r1, sp, #4
   19578:	9801      	ldr	r0, [sp, #4]
   1957a:	f00d fec1 	bl	27300 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1957e:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19580:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   19582:	a901      	add	r1, sp, #4
   19584:	9801      	ldr	r0, [sp, #4]
   19586:	f00d febb 	bl	27300 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1958a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1958c:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1958e:	2b73      	cmp	r3, #115	; 0x73
   19590:	d016      	beq.n	195c0 <new_date_time_get+0x104>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   19592:	a80b      	add	r0, sp, #44	; 0x2c
   19594:	f7f9 f9e8 	bl	12968 <timeutil_timegm64>
   19598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1959c:	460a      	mov	r2, r1
   1959e:	fba0 0103 	umull	r0, r1, r0, r3
   195a2:	fb03 1102 	mla	r1, r3, r2, r1
   195a6:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   195aa:	f015 f9b3 	bl	2e914 <k_uptime_get>
			initial_valid_time = true;
   195ae:	2201      	movs	r2, #1
   195b0:	4b3a      	ldr	r3, [pc, #232]	; (1969c <new_date_time_get+0x1e0>)
	time_aux.last_date_time_update = k_uptime_get();
   195b2:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   195b4:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   195b6:	4b3b      	ldr	r3, [pc, #236]	; (196a4 <new_date_time_get+0x1e8>)
   195b8:	701d      	strb	r5, [r3, #0]
		date_time_notify_event(&evt);
   195ba:	f7ff ff75 	bl	194a8 <date_time_notify_event.constprop.0>
   195be:	e786      	b.n	194ce <new_date_time_get+0x12>
		if (err == 0) {
   195c0:	f04f 0900 	mov.w	r9, #0
   195c4:	4d38      	ldr	r5, [pc, #224]	; (196a8 <new_date_time_get+0x1ec>)
	hints.ai_family = AF_INET;
   195c6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 196c4 <new_date_time_get+0x208>
	err = sntp_query(&sntp_ctx, timeout, time);
   195ca:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 196bc <new_date_time_get+0x200>
	hints.ai_socktype = SOCK_DGRAM;
   195ce:	2302      	movs	r3, #2
   195d0:	2201      	movs	r2, #1
   195d2:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   195d6:	2300      	movs	r3, #0
   195d8:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addr == NULL) {
   195dc:	686b      	ldr	r3, [r5, #4]
   195de:	b9eb      	cbnz	r3, 1961c <new_date_time_get+0x160>
	return zsock_getaddrinfo(host, service, hints, res);
   195e0:	4932      	ldr	r1, [pc, #200]	; (196ac <new_date_time_get+0x1f0>)
   195e2:	4642      	mov	r2, r8
   195e4:	6828      	ldr	r0, [r5, #0]
   195e6:	1d2b      	adds	r3, r5, #4
   195e8:	f013 fc3d 	bl	2ce66 <zsock_getaddrinfo>
		if (err) {
   195ec:	4601      	mov	r1, r0
   195ee:	b1a8      	cbz	r0, 1961c <new_date_time_get+0x160>
			LOG_WRN("getaddrinfo, error: %d", err);
   195f0:	01a2      	lsls	r2, r4, #6
   195f2:	482f      	ldr	r0, [pc, #188]	; (196b0 <new_date_time_get+0x1f4>)
   195f4:	f042 0202 	orr.w	r2, r2, #2
   195f8:	f013 f997 	bl	2c92a <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   195fc:	f109 0901 	add.w	r9, r9, #1
   19600:	f1b9 0f05 	cmp.w	r9, #5
   19604:	f105 0508 	add.w	r5, r5, #8
   19608:	d1e1      	bne.n	195ce <new_date_time_get+0x112>
	LOG_WRN("Not getting time from any NTP server");
   1960a:	01a1      	lsls	r1, r4, #6
   1960c:	4829      	ldr	r0, [pc, #164]	; (196b4 <new_date_time_get+0x1f8>)
   1960e:	f041 0102 	orr.w	r1, r1, #2
   19612:	f013 f97b 	bl	2c90c <log_0>
		evt.type = DATE_TIME_NOT_OBTAINED;
   19616:	2203      	movs	r2, #3
   19618:	4b22      	ldr	r3, [pc, #136]	; (196a4 <new_date_time_get+0x1e8>)
   1961a:	e771      	b.n	19500 <new_date_time_get+0x44>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   1961c:	686b      	ldr	r3, [r5, #4]
   1961e:	a80b      	add	r0, sp, #44	; 0x2c
   19620:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   19624:	f013 fbeb 	bl	2cdfe <sntp_init>
	if (err) {
   19628:	4682      	mov	sl, r0
   1962a:	b300      	cbz	r0, 1966e <new_date_time_get+0x1b2>
		LOG_WRN("sntp_init, error: %d", err);
   1962c:	4601      	mov	r1, r0
   1962e:	01a2      	lsls	r2, r4, #6
   19630:	4821      	ldr	r0, [pc, #132]	; (196b8 <new_date_time_get+0x1fc>)
   19632:	f042 0202 	orr.w	r2, r2, #2
		LOG_WRN("sntp_query, error: %d", err);
   19636:	f013 f978 	bl	2c92a <log_1>
	sntp_close(&sntp_ctx);
   1963a:	a80b      	add	r0, sp, #44	; 0x2c
   1963c:	f013 fc0e 	bl	2ce5c <sntp_close>
		if (err) {
   19640:	f1ba 0f00 	cmp.w	sl, #0
   19644:	d1da      	bne.n	195fc <new_date_time_get+0x140>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   19646:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1964a:	4b1c      	ldr	r3, [pc, #112]	; (196bc <new_date_time_get+0x200>)
   1964c:	681a      	ldr	r2, [r3, #0]
   1964e:	6858      	ldr	r0, [r3, #4]
   19650:	fba2 2301 	umull	r2, r3, r2, r1
   19654:	fb01 3300 	mla	r3, r1, r0, r3
   19658:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   1965c:	f015 f95a 	bl	2e914 <k_uptime_get>
			initial_valid_time = true;
   19660:	2301      	movs	r3, #1
   19662:	4a0e      	ldr	r2, [pc, #56]	; (1969c <new_date_time_get+0x1e0>)
		time_aux.last_date_time_update = k_uptime_get();
   19664:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   19666:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   19668:	4a0e      	ldr	r2, [pc, #56]	; (196a4 <new_date_time_get+0x1e8>)
   1966a:	7013      	strb	r3, [r2, #0]
			date_time_notify_event(&evt);
   1966c:	e7a5      	b.n	195ba <new_date_time_get+0xfe>
	err = sntp_query(&sntp_ctx, timeout, time);
   1966e:	465a      	mov	r2, fp
   19670:	f241 3188 	movw	r1, #5000	; 0x1388
   19674:	a80b      	add	r0, sp, #44	; 0x2c
   19676:	f7f3 fe3b 	bl	d2f0 <sntp_query>
	if (err) {
   1967a:	4682      	mov	sl, r0
   1967c:	2800      	cmp	r0, #0
   1967e:	d0dc      	beq.n	1963a <new_date_time_get+0x17e>
		LOG_WRN("sntp_query, error: %d", err);
   19680:	01a2      	lsls	r2, r4, #6
   19682:	4601      	mov	r1, r0
   19684:	f042 0202 	orr.w	r2, r2, #2
   19688:	480d      	ldr	r0, [pc, #52]	; (196c0 <new_date_time_get+0x204>)
   1968a:	e7d4      	b.n	19636 <new_date_time_get+0x17a>
   1968c:	20021178 	.word	0x20021178
   19690:	0002f05c 	.word	0x0002f05c
   19694:	0002f034 	.word	0x0002f034
   19698:	20020c9c 	.word	0x20020c9c
   1969c:	20026293 	.word	0x20026293
   196a0:	000327c9 	.word	0x000327c9
   196a4:	20026292 	.word	0x20026292
   196a8:	2002049c 	.word	0x2002049c
   196ac:	00032978 	.word	0x00032978
   196b0:	0003297c 	.word	0x0003297c
   196b4:	000329be 	.word	0x000329be
   196b8:	00032993 	.word	0x00032993
   196bc:	20021168 	.word	0x20021168
   196c0:	000329a8 	.word	0x000329a8
   196c4:	20021778 	.word	0x20021778

000196c8 <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   196c8:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   196ca:	4c06      	ldr	r4, [pc, #24]	; (196e4 <date_time_init+0x1c>)
   196cc:	4906      	ldr	r1, [pc, #24]	; (196e8 <date_time_init+0x20>)
   196ce:	4620      	mov	r0, r4
   196d0:	f015 fa5a 	bl	2eb88 <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   196d4:	2200      	movs	r2, #0
   196d6:	2300      	movs	r3, #0
   196d8:	4621      	mov	r1, r4
   196da:	4804      	ldr	r0, [pc, #16]	; (196ec <date_time_init+0x24>)
   196dc:	f00b fb80 	bl	24de0 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   196e0:	2000      	movs	r0, #0
   196e2:	bd10      	pop	{r4, pc}
   196e4:	20021188 	.word	0x20021188
   196e8:	0002e913 	.word	0x0002e913
   196ec:	20021348 	.word	0x20021348

000196f0 <date_time_uptime_to_unix_time_ms>:

	return 0;
}

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   196f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   196f4:	6803      	ldr	r3, [r0, #0]
{
   196f6:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   196f8:	9300      	str	r3, [sp, #0]
   196fa:	6843      	ldr	r3, [r0, #4]
   196fc:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   196fe:	4b23      	ldr	r3, [pc, #140]	; (1978c <date_time_uptime_to_unix_time_ms+0x9c>)
   19700:	781b      	ldrb	r3, [r3, #0]
   19702:	b973      	cbnz	r3, 19722 <date_time_uptime_to_unix_time_ms+0x32>
   19704:	4b22      	ldr	r3, [pc, #136]	; (19790 <date_time_uptime_to_unix_time_ms+0xa0>)
   19706:	4923      	ldr	r1, [pc, #140]	; (19794 <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Valid time not currently available");
   19708:	4823      	ldr	r0, [pc, #140]	; (19798 <date_time_uptime_to_unix_time_ms+0xa8>)
   1970a:	1ac9      	subs	r1, r1, r3
   1970c:	08c9      	lsrs	r1, r1, #3
   1970e:	0189      	lsls	r1, r1, #6
   19710:	f041 0102 	orr.w	r1, r1, #2
   19714:	f013 f8fa 	bl	2c90c <log_0>
		return -ENODATA;
   19718:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   1971c:	b003      	add	sp, #12
   1971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   19722:	4d1e      	ldr	r5, [pc, #120]	; (1979c <date_time_uptime_to_unix_time_ms+0xac>)
   19724:	68a9      	ldr	r1, [r5, #8]
   19726:	e9d5 6700 	ldrd	r6, r7, [r5]
   1972a:	1a72      	subs	r2, r6, r1
   1972c:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   19730:	9900      	ldr	r1, [sp, #0]
   19732:	eb12 0801 	adds.w	r8, r2, r1
   19736:	9901      	ldr	r1, [sp, #4]
   19738:	eb43 0901 	adc.w	r9, r3, r1
   1973c:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   19740:	f015 f8e8 	bl	2e914 <k_uptime_get>
   19744:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   19746:	1af6      	subs	r6, r6, r3
   19748:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   1974c:	eb16 0a00 	adds.w	sl, r6, r0
   19750:	eb47 0b01 	adc.w	fp, r7, r1
   19754:	45c2      	cmp	sl, r8
   19756:	eb7b 0309 	sbcs.w	r3, fp, r9
   1975a:	da15      	bge.n	19788 <date_time_uptime_to_unix_time_ms+0x98>
   1975c:	4b0c      	ldr	r3, [pc, #48]	; (19790 <date_time_uptime_to_unix_time_ms+0xa0>)
   1975e:	4d0d      	ldr	r5, [pc, #52]	; (19794 <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Uptime to large or previously converted");
   19760:	480f      	ldr	r0, [pc, #60]	; (197a0 <date_time_uptime_to_unix_time_ms+0xb0>)
   19762:	1aed      	subs	r5, r5, r3
   19764:	08ed      	lsrs	r5, r5, #3
   19766:	01ad      	lsls	r5, r5, #6
   19768:	f045 0502 	orr.w	r5, r5, #2
   1976c:	4629      	mov	r1, r5
   1976e:	f013 f8cd 	bl	2c90c <log_0>
		LOG_WRN("Clear variable or set a new uptime");
   19772:	480c      	ldr	r0, [pc, #48]	; (197a4 <date_time_uptime_to_unix_time_ms+0xb4>)
   19774:	4629      	mov	r1, r5
   19776:	f013 f8c9 	bl	2c90c <log_0>
		*uptime = uptime_prev;
   1977a:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   1977c:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   19780:	6023      	str	r3, [r4, #0]
   19782:	9b01      	ldr	r3, [sp, #4]
   19784:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   19786:	e7c9      	b.n	1971c <date_time_uptime_to_unix_time_ms+0x2c>
	return 0;
   19788:	2000      	movs	r0, #0
   1978a:	e7c7      	b.n	1971c <date_time_uptime_to_unix_time_ms+0x2c>
   1978c:	20026293 	.word	0x20026293
   19790:	0002f034 	.word	0x0002f034
   19794:	0002f05c 	.word	0x0002f05c
   19798:	000329e3 	.word	0x000329e3
   1979c:	20021178 	.word	0x20021178
   197a0:	00032a06 	.word	0x00032a06
   197a4:	00032a2e 	.word	0x00032a2e

000197a8 <date_time_now>:

int date_time_now(int64_t *unix_time_ms)
{
   197a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;
	int64_t unix_time_ms_prev = *unix_time_ms;
   197aa:	e9d0 4500 	ldrd	r4, r5, [r0]
{
   197ae:	4606      	mov	r6, r0

	*unix_time_ms = k_uptime_get();
   197b0:	f015 f8b0 	bl	2e914 <k_uptime_get>
   197b4:	e9c6 0100 	strd	r0, r1, [r6]

	err = date_time_uptime_to_unix_time_ms(unix_time_ms);
   197b8:	4630      	mov	r0, r6
   197ba:	f7ff ff99 	bl	196f0 <date_time_uptime_to_unix_time_ms>
	if (err) {
   197be:	4607      	mov	r7, r0
   197c0:	b160      	cbz	r0, 197dc <date_time_now+0x34>
   197c2:	4b07      	ldr	r3, [pc, #28]	; (197e0 <date_time_now+0x38>)
   197c4:	4a07      	ldr	r2, [pc, #28]	; (197e4 <date_time_now+0x3c>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
   197c6:	4601      	mov	r1, r0
   197c8:	1ad2      	subs	r2, r2, r3
   197ca:	08d2      	lsrs	r2, r2, #3
   197cc:	0192      	lsls	r2, r2, #6
   197ce:	4806      	ldr	r0, [pc, #24]	; (197e8 <date_time_now+0x40>)
   197d0:	f042 0202 	orr.w	r2, r2, #2
   197d4:	f013 f8a9 	bl	2c92a <log_1>
		*unix_time_ms = unix_time_ms_prev;
   197d8:	e9c6 4500 	strd	r4, r5, [r6]
	}

	return err;
}
   197dc:	4638      	mov	r0, r7
   197de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197e0:	0002f034 	.word	0x0002f034
   197e4:	0002f05c 	.word	0x0002f05c
   197e8:	00032a51 	.word	0x00032a51

000197ec <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   197ec:	b508      	push	{r3, lr}
	if (evt_handler) {
   197ee:	b108      	cbz	r0, 197f4 <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   197f0:	4b03      	ldr	r3, [pc, #12]	; (19800 <date_time_update_async+0x14>)
   197f2:	6018      	str	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   197f4:	4803      	ldr	r0, [pc, #12]	; (19804 <date_time_update_async+0x18>)
   197f6:	f00b f885 	bl	24904 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   197fa:	2000      	movs	r0, #0
   197fc:	bd08      	pop	{r3, pc}
   197fe:	bf00      	nop
   19800:	20021774 	.word	0x20021774
   19804:	20020c9c 	.word	0x20020c9c

00019808 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   19808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1980c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1980e:	4c21      	ldr	r4, [pc, #132]	; (19894 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   19810:	4e21      	ldr	r6, [pc, #132]	; (19898 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19812:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   19816:	f8df 9088 	ldr.w	r9, [pc, #136]	; 198a0 <check_ext_api_requests+0x98>
{
   1981a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1981c:	45a8      	cmp	r8, r5
   1981e:	d803      	bhi.n	19828 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   19820:	2000      	movs	r0, #0
   19822:	b005      	add	sp, #20
   19824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   19828:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1982a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1982e:	681f      	ldr	r7, [r3, #0]
   19830:	ab01      	add	r3, sp, #4
   19832:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   19836:	220c      	movs	r2, #12
   19838:	4619      	mov	r1, r3
   1983a:	4638      	mov	r0, r7
   1983c:	f00c fdce 	bl	263dc <memcmp>
   19840:	b990      	cbnz	r0, 19868 <check_ext_api_requests+0x60>
   19842:	b18f      	cbz	r7, 19868 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19844:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   19846:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19848:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1984a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1984c:	4291      	cmp	r1, r2
   1984e:	d10b      	bne.n	19868 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   19850:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   19852:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   19854:	4291      	cmp	r1, r2
   19856:	d807      	bhi.n	19868 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   19858:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1985a:	4291      	cmp	r1, r2
   1985c:	d904      	bls.n	19868 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1985e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   19860:	695b      	ldr	r3, [r3, #20]
   19862:	ea32 0303 	bics.w	r3, r2, r3
   19866:	d00a      	beq.n	1987e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   19868:	6a27      	ldr	r7, [r4, #32]
   1986a:	b167      	cbz	r7, 19886 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1986c:	480b      	ldr	r0, [pc, #44]	; (1989c <check_ext_api_requests+0x94>)
   1986e:	f012 fe00 	bl	2c472 <printk>
			k_panic();
   19872:	4040      	eors	r0, r0
   19874:	f380 8811 	msr	BASEPRI, r0
   19878:	f04f 0004 	mov.w	r0, #4
   1987c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1987e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19880:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   19882:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19884:	e7ca      	b.n	1981c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   19886:	4648      	mov	r0, r9
   19888:	f012 fdf3 	bl	2c472 <printk>
			*ext_api_req->ext_api = NULL;
   1988c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1988e:	601f      	str	r7, [r3, #0]
   19890:	e7f5      	b.n	1987e <check_ext_api_requests+0x76>
   19892:	bf00      	nop
   19894:	0000c23c 	.word	0x0000c23c
   19898:	0002f11c 	.word	0x0002f11c
   1989c:	00032aec 	.word	0x00032aec
   198a0:	00032b15 	.word	0x00032b15

000198a4 <packet_free_cb>:
   198a4:	b510      	push	{r4, lr}
   198a6:	4604      	mov	r4, r0
   198a8:	6800      	ldr	r0, [r0, #0]
   198aa:	f004 fef7 	bl	1e69c <rpc_logobj_client_data_free>
   198ae:	68a0      	ldr	r0, [r4, #8]
   198b0:	b118      	cbz	r0, 198ba <packet_free_cb+0x16>
   198b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   198b6:	f007 bced 	b.w	21294 <nrf_free>
   198ba:	bd10      	pop	{r4, pc}

000198bc <logobj_event_handler>:
   198bc:	b530      	push	{r4, r5, lr}
   198be:	4b3b      	ldr	r3, [pc, #236]	; (199ac <logobj_event_handler+0xf0>)
   198c0:	b085      	sub	sp, #20
   198c2:	681d      	ldr	r5, [r3, #0]
   198c4:	2d00      	cmp	r5, #0
   198c6:	d04c      	beq.n	19962 <logobj_event_handler+0xa6>
   198c8:	f248 0302 	movw	r3, #32770	; 0x8002
   198cc:	4299      	cmp	r1, r3
   198ce:	d053      	beq.n	19978 <logobj_event_handler+0xbc>
   198d0:	d91c      	bls.n	1990c <logobj_event_handler+0x50>
   198d2:	f248 0303 	movw	r3, #32771	; 0x8003
   198d6:	4299      	cmp	r1, r3
   198d8:	d05a      	beq.n	19990 <logobj_event_handler+0xd4>
   198da:	f249 0301 	movw	r3, #36865	; 0x9001
   198de:	4299      	cmp	r1, r3
   198e0:	d147      	bne.n	19972 <logobj_event_handler+0xb6>
   198e2:	2400      	movs	r4, #0
   198e4:	6843      	ldr	r3, [r0, #4]
   198e6:	6802      	ldr	r2, [r0, #0]
   198e8:	e9cd 4402 	strd	r4, r4, [sp, #8]
   198ec:	e9cd 2300 	strd	r2, r3, [sp]
   198f0:	69e8      	ldr	r0, [r5, #28]
   198f2:	4669      	mov	r1, sp
   198f4:	6803      	ldr	r3, [r0, #0]
   198f6:	685b      	ldr	r3, [r3, #4]
   198f8:	4798      	blx	r3
   198fa:	3001      	adds	r0, #1
   198fc:	d04e      	beq.n	1999c <logobj_event_handler+0xe0>
   198fe:	4620      	mov	r0, r4
   19900:	682b      	ldr	r3, [r5, #0]
   19902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19906:	602b      	str	r3, [r5, #0]
   19908:	b005      	add	sp, #20
   1990a:	bd30      	pop	{r4, r5, pc}
   1990c:	f248 0301 	movw	r3, #32769	; 0x8001
   19910:	4299      	cmp	r1, r3
   19912:	d12e      	bne.n	19972 <logobj_event_handler+0xb6>
   19914:	68c3      	ldr	r3, [r0, #12]
   19916:	2b00      	cmp	r3, #0
   19918:	d135      	bne.n	19986 <logobj_event_handler+0xca>
   1991a:	6828      	ldr	r0, [r5, #0]
   1991c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   19920:	d03e      	beq.n	199a0 <logobj_event_handler+0xe4>
   19922:	682b      	ldr	r3, [r5, #0]
   19924:	b29b      	uxth	r3, r3
   19926:	2b01      	cmp	r3, #1
   19928:	d105      	bne.n	19936 <logobj_event_handler+0x7a>
   1992a:	682b      	ldr	r3, [r5, #0]
   1992c:	0c1b      	lsrs	r3, r3, #16
   1992e:	041b      	lsls	r3, r3, #16
   19930:	f043 0302 	orr.w	r3, r3, #2
   19934:	602b      	str	r3, [r5, #0]
   19936:	4b1e      	ldr	r3, [pc, #120]	; (199b0 <logobj_event_handler+0xf4>)
   19938:	781a      	ldrb	r2, [r3, #0]
   1993a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1993e:	2a00      	cmp	r2, #0
   19940:	d031      	beq.n	199a6 <logobj_event_handler+0xea>
   19942:	4a1c      	ldr	r2, [pc, #112]	; (199b4 <logobj_event_handler+0xf8>)
   19944:	7811      	ldrb	r1, [r2, #0]
   19946:	b909      	cbnz	r1, 1994c <logobj_event_handler+0x90>
   19948:	2101      	movs	r1, #1
   1994a:	7011      	strb	r1, [r2, #0]
   1994c:	2000      	movs	r0, #0
   1994e:	7018      	strb	r0, [r3, #0]
   19950:	682b      	ldr	r3, [r5, #0]
   19952:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19956:	602b      	str	r3, [r5, #0]
   19958:	682b      	ldr	r3, [r5, #0]
   1995a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1995e:	602b      	str	r3, [r5, #0]
   19960:	e7d2      	b.n	19908 <logobj_event_handler+0x4c>
   19962:	6800      	ldr	r0, [r0, #0]
   19964:	2800      	cmp	r0, #0
   19966:	d0cf      	beq.n	19908 <logobj_event_handler+0x4c>
   19968:	f004 fe98 	bl	1e69c <rpc_logobj_client_data_free>
   1996c:	4628      	mov	r0, r5
   1996e:	b005      	add	sp, #20
   19970:	bd30      	pop	{r4, r5, pc}
   19972:	2000      	movs	r0, #0
   19974:	b005      	add	sp, #20
   19976:	bd30      	pop	{r4, r5, pc}
   19978:	682b      	ldr	r3, [r5, #0]
   1997a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   1997e:	d00b      	beq.n	19998 <logobj_event_handler+0xdc>
   19980:	68c0      	ldr	r0, [r0, #12]
   19982:	2800      	cmp	r0, #0
   19984:	d0e4      	beq.n	19950 <logobj_event_handler+0x94>
   19986:	230e      	movs	r3, #14
   19988:	2000      	movs	r0, #0
   1998a:	606b      	str	r3, [r5, #4]
   1998c:	b005      	add	sp, #20
   1998e:	bd30      	pop	{r4, r5, pc}
   19990:	68c3      	ldr	r3, [r0, #12]
   19992:	2b01      	cmp	r3, #1
   19994:	d1a5      	bne.n	198e2 <logobj_event_handler+0x26>
   19996:	e7f6      	b.n	19986 <logobj_event_handler+0xca>
   19998:	4618      	mov	r0, r3
   1999a:	e7b5      	b.n	19908 <logobj_event_handler+0x4c>
   1999c:	2002      	movs	r0, #2
   1999e:	e7b3      	b.n	19908 <logobj_event_handler+0x4c>
   199a0:	230e      	movs	r3, #14
   199a2:	606b      	str	r3, [r5, #4]
   199a4:	e7b0      	b.n	19908 <logobj_event_handler+0x4c>
   199a6:	4a03      	ldr	r2, [pc, #12]	; (199b4 <logobj_event_handler+0xf8>)
   199a8:	7011      	strb	r1, [r2, #0]
   199aa:	e7cf      	b.n	1994c <logobj_event_handler+0x90>
   199ac:	200217cc 	.word	0x200217cc
   199b0:	20026294 	.word	0x20026294
   199b4:	20026295 	.word	0x20026295

000199b8 <logobj_interface_init>:
   199b8:	2300      	movs	r3, #0
   199ba:	b510      	push	{r4, lr}
   199bc:	4808      	ldr	r0, [pc, #32]	; (199e0 <logobj_interface_init+0x28>)
   199be:	4c09      	ldr	r4, [pc, #36]	; (199e4 <logobj_interface_init+0x2c>)
   199c0:	4909      	ldr	r1, [pc, #36]	; (199e8 <logobj_interface_init+0x30>)
   199c2:	4a0a      	ldr	r2, [pc, #40]	; (199ec <logobj_interface_init+0x34>)
   199c4:	7023      	strb	r3, [r4, #0]
   199c6:	6003      	str	r3, [r0, #0]
   199c8:	700b      	strb	r3, [r1, #0]
   199ca:	6013      	str	r3, [r2, #0]
   199cc:	f004 fe2a 	bl	1e624 <rpc_logobj_client_init>
   199d0:	b918      	cbnz	r0, 199da <logobj_interface_init+0x22>
   199d2:	2201      	movs	r2, #1
   199d4:	4b06      	ldr	r3, [pc, #24]	; (199f0 <logobj_interface_init+0x38>)
   199d6:	701a      	strb	r2, [r3, #0]
   199d8:	bd10      	pop	{r4, pc}
   199da:	f04f 30ff 	mov.w	r0, #4294967295
   199de:	bd10      	pop	{r4, pc}
   199e0:	200217cc 	.word	0x200217cc
   199e4:	20026295 	.word	0x20026295
   199e8:	20026294 	.word	0x20026294
   199ec:	200217c8 	.word	0x200217c8
   199f0:	20026296 	.word	0x20026296

000199f4 <logobj_interface_open>:
   199f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   199f8:	2400      	movs	r4, #0
   199fa:	4b5b      	ldr	r3, [pc, #364]	; (19b68 <logobj_interface_open+0x174>)
   199fc:	b084      	sub	sp, #16
   199fe:	781b      	ldrb	r3, [r3, #0]
   19a00:	9401      	str	r4, [sp, #4]
   19a02:	2b00      	cmp	r3, #0
   19a04:	f000 809f 	beq.w	19b46 <logobj_interface_open+0x152>
   19a08:	2866      	cmp	r0, #102	; 0x66
   19a0a:	4680      	mov	r8, r0
   19a0c:	f040 808f 	bne.w	19b2e <logobj_interface_open+0x13a>
   19a10:	2902      	cmp	r1, #2
   19a12:	4689      	mov	r9, r1
   19a14:	f040 808b 	bne.w	19b2e <logobj_interface_open+0x13a>
   19a18:	f240 2305 	movw	r3, #517	; 0x205
   19a1c:	429a      	cmp	r2, r3
   19a1e:	4692      	mov	sl, r2
   19a20:	f040 8085 	bne.w	19b2e <logobj_interface_open+0x13a>
   19a24:	4f51      	ldr	r7, [pc, #324]	; (19b6c <logobj_interface_open+0x178>)
   19a26:	683d      	ldr	r5, [r7, #0]
   19a28:	2d00      	cmp	r5, #0
   19a2a:	f040 8086 	bne.w	19b3a <logobj_interface_open+0x146>
   19a2e:	4a50      	ldr	r2, [pc, #320]	; (19b70 <logobj_interface_open+0x17c>)
   19a30:	a801      	add	r0, sp, #4
   19a32:	f008 f807 	bl	21a44 <interface_socket_allocate>
   19a36:	9b01      	ldr	r3, [sp, #4]
   19a38:	4606      	mov	r6, r0
   19a3a:	2b00      	cmp	r3, #0
   19a3c:	f000 808d 	beq.w	19b5a <logobj_interface_open+0x166>
   19a40:	4629      	mov	r1, r5
   19a42:	2204      	movs	r2, #4
   19a44:	484b      	ldr	r0, [pc, #300]	; (19b74 <logobj_interface_open+0x180>)
   19a46:	603b      	str	r3, [r7, #0]
   19a48:	f00c fcf6 	bl	26438 <memset>
   19a4c:	9c01      	ldr	r4, [sp, #4]
   19a4e:	4629      	mov	r1, r5
   19a50:	e9c4 8903 	strd	r8, r9, [r4, #12]
   19a54:	f8c4 a014 	str.w	sl, [r4, #20]
   19a58:	a802      	add	r0, sp, #8
   19a5a:	f004 fde9 	bl	1e630 <rpc_logobj_client_request_alloc>
   19a5e:	2800      	cmp	r0, #0
   19a60:	d142      	bne.n	19ae8 <logobj_interface_open+0xf4>
   19a62:	2201      	movs	r2, #1
   19a64:	2104      	movs	r1, #4
   19a66:	9b02      	ldr	r3, [sp, #8]
   19a68:	4d43      	ldr	r5, [pc, #268]	; (19b78 <logobj_interface_open+0x184>)
   19a6a:	7358      	strb	r0, [r3, #13]
   19a6c:	7398      	strb	r0, [r3, #14]
   19a6e:	73d8      	strb	r0, [r3, #15]
   19a70:	7258      	strb	r0, [r3, #9]
   19a72:	7298      	strb	r0, [r3, #10]
   19a74:	72d8      	strb	r0, [r3, #11]
   19a76:	7219      	strb	r1, [r3, #8]
   19a78:	702a      	strb	r2, [r5, #0]
   19a7a:	731a      	strb	r2, [r3, #12]
   19a7c:	6822      	ldr	r2, [r4, #0]
   19a7e:	4618      	mov	r0, r3
   19a80:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   19a84:	6022      	str	r2, [r4, #0]
   19a86:	f247 0101 	movw	r1, #28673	; 0x7001
   19a8a:	f004 fde9 	bl	1e660 <rpc_logobj_client_request_send>
   19a8e:	bb68      	cbnz	r0, 19aec <logobj_interface_open+0xf8>
   19a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19a92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19a96:	2900      	cmp	r1, #0
   19a98:	bf08      	it	eq
   19a9a:	f04f 31ff 	moveq.w	r1, #4294967295
   19a9e:	ab04      	add	r3, sp, #16
   19aa0:	f843 1d04 	str.w	r1, [r3, #-4]!
   19aa4:	4630      	mov	r0, r6
   19aa6:	4611      	mov	r1, r2
   19aa8:	f008 f87e 	bl	21ba8 <interface_socket_wait>
   19aac:	4604      	mov	r4, r0
   19aae:	b310      	cbz	r0, 19af6 <logobj_interface_open+0x102>
   19ab0:	9a01      	ldr	r2, [sp, #4]
   19ab2:	2e00      	cmp	r6, #0
   19ab4:	6813      	ldr	r3, [r2, #0]
   19ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19aba:	6013      	str	r3, [r2, #0]
   19abc:	9a01      	ldr	r2, [sp, #4]
   19abe:	6813      	ldr	r3, [r2, #0]
   19ac0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19ac4:	6013      	str	r3, [r2, #0]
   19ac6:	9a01      	ldr	r2, [sp, #4]
   19ac8:	6813      	ldr	r3, [r2, #0]
   19aca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19ace:	6013      	str	r3, [r2, #0]
   19ad0:	da3f      	bge.n	19b52 <logobj_interface_open+0x15e>
   19ad2:	2300      	movs	r3, #0
   19ad4:	4620      	mov	r0, r4
   19ad6:	603b      	str	r3, [r7, #0]
   19ad8:	f04f 36ff 	mov.w	r6, #4294967295
   19adc:	f7fd f850 	bl	16b80 <bsd_os_errno_set>
   19ae0:	4630      	mov	r0, r6
   19ae2:	b004      	add	sp, #16
   19ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ae8:	240c      	movs	r4, #12
   19aea:	e7e1      	b.n	19ab0 <logobj_interface_open+0xbc>
   19aec:	9802      	ldr	r0, [sp, #8]
   19aee:	f004 fdcd 	bl	1e68c <rpc_logobj_client_message_free>
   19af2:	2405      	movs	r4, #5
   19af4:	e7dc      	b.n	19ab0 <logobj_interface_open+0xbc>
   19af6:	4630      	mov	r0, r6
   19af8:	f008 f8ca 	bl	21c90 <interface_socket_from_handle_get>
   19afc:	b120      	cbz	r0, 19b08 <logobj_interface_open+0x114>
   19afe:	6844      	ldr	r4, [r0, #4]
   19b00:	b114      	cbz	r4, 19b08 <logobj_interface_open+0x114>
   19b02:	2300      	movs	r3, #0
   19b04:	6043      	str	r3, [r0, #4]
   19b06:	e7d3      	b.n	19ab0 <logobj_interface_open+0xbc>
   19b08:	4630      	mov	r0, r6
   19b0a:	9a01      	ldr	r2, [sp, #4]
   19b0c:	6813      	ldr	r3, [r2, #0]
   19b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19b12:	6013      	str	r3, [r2, #0]
   19b14:	9a01      	ldr	r2, [sp, #4]
   19b16:	6813      	ldr	r3, [r2, #0]
   19b18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19b1c:	6013      	str	r3, [r2, #0]
   19b1e:	9a01      	ldr	r2, [sp, #4]
   19b20:	6813      	ldr	r3, [r2, #0]
   19b22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19b26:	6013      	str	r3, [r2, #0]
   19b28:	b004      	add	sp, #16
   19b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19b2e:	2016      	movs	r0, #22
   19b30:	f7fd f826 	bl	16b80 <bsd_os_errno_set>
   19b34:	f04f 36ff 	mov.w	r6, #4294967295
   19b38:	e7d2      	b.n	19ae0 <logobj_interface_open+0xec>
   19b3a:	2001      	movs	r0, #1
   19b3c:	f7fd f820 	bl	16b80 <bsd_os_errno_set>
   19b40:	f04f 36ff 	mov.w	r6, #4294967295
   19b44:	e7cc      	b.n	19ae0 <logobj_interface_open+0xec>
   19b46:	2070      	movs	r0, #112	; 0x70
   19b48:	f7fd f81a 	bl	16b80 <bsd_os_errno_set>
   19b4c:	f04f 36ff 	mov.w	r6, #4294967295
   19b50:	e7c6      	b.n	19ae0 <logobj_interface_open+0xec>
   19b52:	4630      	mov	r0, r6
   19b54:	f007 ffda 	bl	21b0c <interface_socket_free>
   19b58:	e7bb      	b.n	19ad2 <logobj_interface_open+0xde>
   19b5a:	2018      	movs	r0, #24
   19b5c:	f7fd f810 	bl	16b80 <bsd_os_errno_set>
   19b60:	f04f 36ff 	mov.w	r6, #4294967295
   19b64:	e7bc      	b.n	19ae0 <logobj_interface_open+0xec>
   19b66:	bf00      	nop
   19b68:	20026296 	.word	0x20026296
   19b6c:	200217cc 	.word	0x200217cc
   19b70:	000198a5 	.word	0x000198a5
   19b74:	200217c8 	.word	0x200217c8
   19b78:	20026294 	.word	0x20026294

00019b7c <logobj_interface_read>:
   19b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b80:	b087      	sub	sp, #28
   19b82:	2900      	cmp	r1, #0
   19b84:	d06b      	beq.n	19c5e <logobj_interface_read+0xe2>
   19b86:	2a00      	cmp	r2, #0
   19b88:	4617      	mov	r7, r2
   19b8a:	dd68      	ble.n	19c5e <logobj_interface_read+0xe2>
   19b8c:	461d      	mov	r5, r3
   19b8e:	4680      	mov	r8, r0
   19b90:	460e      	mov	r6, r1
   19b92:	f008 f87d 	bl	21c90 <interface_socket_from_handle_get>
   19b96:	4604      	mov	r4, r0
   19b98:	2800      	cmp	r0, #0
   19b9a:	d066      	beq.n	19c6a <logobj_interface_read+0xee>
   19b9c:	bb4d      	cbnz	r5, 19bf2 <logobj_interface_read+0x76>
   19b9e:	69e0      	ldr	r0, [r4, #28]
   19ba0:	07aa      	lsls	r2, r5, #30
   19ba2:	6803      	ldr	r3, [r0, #0]
   19ba4:	68db      	ldr	r3, [r3, #12]
   19ba6:	d52d      	bpl.n	19c04 <logobj_interface_read+0x88>
   19ba8:	4798      	blx	r3
   19baa:	3001      	adds	r0, #1
   19bac:	d047      	beq.n	19c3e <logobj_interface_read+0xc2>
   19bae:	6823      	ldr	r3, [r4, #0]
   19bb0:	69e0      	ldr	r0, [r4, #28]
   19bb2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   19bb6:	d044      	beq.n	19c42 <logobj_interface_read+0xc6>
   19bb8:	2100      	movs	r1, #0
   19bba:	6823      	ldr	r3, [r4, #0]
   19bbc:	462a      	mov	r2, r5
   19bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19bc2:	6023      	str	r3, [r4, #0]
   19bc4:	e9cd 1104 	strd	r1, r1, [sp, #16]
   19bc8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   19bcc:	6803      	ldr	r3, [r0, #0]
   19bce:	a902      	add	r1, sp, #8
   19bd0:	689b      	ldr	r3, [r3, #8]
   19bd2:	4798      	blx	r3
   19bd4:	4605      	mov	r5, r0
   19bd6:	69e0      	ldr	r0, [r4, #28]
   19bd8:	6803      	ldr	r3, [r0, #0]
   19bda:	68db      	ldr	r3, [r3, #12]
   19bdc:	4798      	blx	r3
   19bde:	3001      	adds	r0, #1
   19be0:	d003      	beq.n	19bea <logobj_interface_read+0x6e>
   19be2:	6823      	ldr	r3, [r4, #0]
   19be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19be8:	6023      	str	r3, [r4, #0]
   19bea:	4628      	mov	r0, r5
   19bec:	b007      	add	sp, #28
   19bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19bf2:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   19bf6:	d1d2      	bne.n	19b9e <logobj_interface_read+0x22>
   19bf8:	202d      	movs	r0, #45	; 0x2d
   19bfa:	f7fc ffc1 	bl	16b80 <bsd_os_errno_set>
   19bfe:	f04f 35ff 	mov.w	r5, #4294967295
   19c02:	e7f2      	b.n	19bea <logobj_interface_read+0x6e>
   19c04:	6822      	ldr	r2, [r4, #0]
   19c06:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   19c0a:	d1cd      	bne.n	19ba8 <logobj_interface_read+0x2c>
   19c0c:	4798      	blx	r3
   19c0e:	1c43      	adds	r3, r0, #1
   19c10:	d1cd      	bne.n	19bae <logobj_interface_read+0x32>
   19c12:	6a22      	ldr	r2, [r4, #32]
   19c14:	ab06      	add	r3, sp, #24
   19c16:	2a00      	cmp	r2, #0
   19c18:	bf18      	it	ne
   19c1a:	4610      	movne	r0, r2
   19c1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19c20:	f843 0d14 	str.w	r0, [r3, #-20]!
   19c24:	4611      	mov	r1, r2
   19c26:	4640      	mov	r0, r8
   19c28:	f007 ffbe 	bl	21ba8 <interface_socket_wait>
   19c2c:	b158      	cbz	r0, 19c46 <logobj_interface_read+0xca>
   19c2e:	f04f 35ff 	mov.w	r5, #4294967295
   19c32:	f7fc ffa5 	bl	16b80 <bsd_os_errno_set>
   19c36:	4628      	mov	r0, r5
   19c38:	b007      	add	sp, #28
   19c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19c3e:	2023      	movs	r0, #35	; 0x23
   19c40:	e7f5      	b.n	19c2e <logobj_interface_read+0xb2>
   19c42:	461d      	mov	r5, r3
   19c44:	e7c8      	b.n	19bd8 <logobj_interface_read+0x5c>
   19c46:	4640      	mov	r0, r8
   19c48:	f008 f822 	bl	21c90 <interface_socket_from_handle_get>
   19c4c:	4603      	mov	r3, r0
   19c4e:	2800      	cmp	r0, #0
   19c50:	d0ad      	beq.n	19bae <logobj_interface_read+0x32>
   19c52:	6840      	ldr	r0, [r0, #4]
   19c54:	2800      	cmp	r0, #0
   19c56:	d0aa      	beq.n	19bae <logobj_interface_read+0x32>
   19c58:	f8c3 9004 	str.w	r9, [r3, #4]
   19c5c:	e7e7      	b.n	19c2e <logobj_interface_read+0xb2>
   19c5e:	2016      	movs	r0, #22
   19c60:	f7fc ff8e 	bl	16b80 <bsd_os_errno_set>
   19c64:	f04f 35ff 	mov.w	r5, #4294967295
   19c68:	e7bf      	b.n	19bea <logobj_interface_read+0x6e>
   19c6a:	2009      	movs	r0, #9
   19c6c:	f7fc ff88 	bl	16b80 <bsd_os_errno_set>
   19c70:	f04f 35ff 	mov.w	r5, #4294967295
   19c74:	e7b9      	b.n	19bea <logobj_interface_read+0x6e>
   19c76:	bf00      	nop

00019c78 <logobj_interface_write>:
   19c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c7c:	b082      	sub	sp, #8
   19c7e:	2900      	cmp	r1, #0
   19c80:	d06b      	beq.n	19d5a <logobj_interface_write+0xe2>
   19c82:	2a04      	cmp	r2, #4
   19c84:	d169      	bne.n	19d5a <logobj_interface_write+0xe2>
   19c86:	461f      	mov	r7, r3
   19c88:	4606      	mov	r6, r0
   19c8a:	460d      	mov	r5, r1
   19c8c:	f008 f800 	bl	21c90 <interface_socket_from_handle_get>
   19c90:	4604      	mov	r4, r0
   19c92:	2800      	cmp	r0, #0
   19c94:	d074      	beq.n	19d80 <logobj_interface_write+0x108>
   19c96:	b1e7      	cbz	r7, 19cd2 <logobj_interface_write+0x5a>
   19c98:	07b8      	lsls	r0, r7, #30
   19c9a:	d56b      	bpl.n	19d74 <logobj_interface_write+0xfc>
   19c9c:	6823      	ldr	r3, [r4, #0]
   19c9e:	039b      	lsls	r3, r3, #14
   19ca0:	d564      	bpl.n	19d6c <logobj_interface_write+0xf4>
   19ca2:	2700      	movs	r7, #0
   19ca4:	6823      	ldr	r3, [r4, #0]
   19ca6:	2100      	movs	r1, #0
   19ca8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19cac:	6023      	str	r3, [r4, #0]
   19cae:	4668      	mov	r0, sp
   19cb0:	f8d5 8000 	ldr.w	r8, [r5]
   19cb4:	f004 fcbc 	bl	1e630 <rpc_logobj_client_request_alloc>
   19cb8:	b198      	cbz	r0, 19ce2 <logobj_interface_write+0x6a>
   19cba:	200c      	movs	r0, #12
   19cbc:	6823      	ldr	r3, [r4, #0]
   19cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19cc2:	6023      	str	r3, [r4, #0]
   19cc4:	f7fc ff5c 	bl	16b80 <bsd_os_errno_set>
   19cc8:	f04f 30ff 	mov.w	r0, #4294967295
   19ccc:	b002      	add	sp, #8
   19cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19cd2:	6803      	ldr	r3, [r0, #0]
   19cd4:	00d9      	lsls	r1, r3, #3
   19cd6:	d4e1      	bmi.n	19c9c <logobj_interface_write+0x24>
   19cd8:	6803      	ldr	r3, [r0, #0]
   19cda:	039a      	lsls	r2, r3, #14
   19cdc:	d548      	bpl.n	19d70 <logobj_interface_write+0xf8>
   19cde:	2701      	movs	r7, #1
   19ce0:	e7e0      	b.n	19ca4 <logobj_interface_write+0x2c>
   19ce2:	2504      	movs	r5, #4
   19ce4:	9b00      	ldr	r3, [sp, #0]
   19ce6:	f247 0103 	movw	r1, #28675	; 0x7003
   19cea:	f8c3 800c 	str.w	r8, [r3, #12]
   19cee:	7258      	strb	r0, [r3, #9]
   19cf0:	7298      	strb	r0, [r3, #10]
   19cf2:	72d8      	strb	r0, [r3, #11]
   19cf4:	721d      	strb	r5, [r3, #8]
   19cf6:	4618      	mov	r0, r3
   19cf8:	f004 fcb2 	bl	1e660 <rpc_logobj_client_request_send>
   19cfc:	4680      	mov	r8, r0
   19cfe:	bb18      	cbnz	r0, 19d48 <logobj_interface_write+0xd0>
   19d00:	b1d7      	cbz	r7, 19d38 <logobj_interface_write+0xc0>
   19d02:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19d04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19d08:	2900      	cmp	r1, #0
   19d0a:	bf08      	it	eq
   19d0c:	f04f 31ff 	moveq.w	r1, #4294967295
   19d10:	ab02      	add	r3, sp, #8
   19d12:	f843 1d04 	str.w	r1, [r3, #-4]!
   19d16:	4630      	mov	r0, r6
   19d18:	4611      	mov	r1, r2
   19d1a:	f007 ff45 	bl	21ba8 <interface_socket_wait>
   19d1e:	b120      	cbz	r0, 19d2a <logobj_interface_write+0xb2>
   19d20:	6823      	ldr	r3, [r4, #0]
   19d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19d26:	6023      	str	r3, [r4, #0]
   19d28:	e7cc      	b.n	19cc4 <logobj_interface_write+0x4c>
   19d2a:	4630      	mov	r0, r6
   19d2c:	f007 ffb0 	bl	21c90 <interface_socket_from_handle_get>
   19d30:	4603      	mov	r3, r0
   19d32:	b108      	cbz	r0, 19d38 <logobj_interface_write+0xc0>
   19d34:	6840      	ldr	r0, [r0, #4]
   19d36:	b9b0      	cbnz	r0, 19d66 <logobj_interface_write+0xee>
   19d38:	4628      	mov	r0, r5
   19d3a:	6823      	ldr	r3, [r4, #0]
   19d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19d40:	6023      	str	r3, [r4, #0]
   19d42:	b002      	add	sp, #8
   19d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d48:	9800      	ldr	r0, [sp, #0]
   19d4a:	f004 fc9f 	bl	1e68c <rpc_logobj_client_message_free>
   19d4e:	6823      	ldr	r3, [r4, #0]
   19d50:	2005      	movs	r0, #5
   19d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19d56:	6023      	str	r3, [r4, #0]
   19d58:	e7b4      	b.n	19cc4 <logobj_interface_write+0x4c>
   19d5a:	2016      	movs	r0, #22
   19d5c:	f7fc ff10 	bl	16b80 <bsd_os_errno_set>
   19d60:	f04f 30ff 	mov.w	r0, #4294967295
   19d64:	e7b2      	b.n	19ccc <logobj_interface_write+0x54>
   19d66:	f8c3 8004 	str.w	r8, [r3, #4]
   19d6a:	e7d9      	b.n	19d20 <logobj_interface_write+0xa8>
   19d6c:	2073      	movs	r0, #115	; 0x73
   19d6e:	e7a9      	b.n	19cc4 <logobj_interface_write+0x4c>
   19d70:	2009      	movs	r0, #9
   19d72:	e7a7      	b.n	19cc4 <logobj_interface_write+0x4c>
   19d74:	202d      	movs	r0, #45	; 0x2d
   19d76:	f7fc ff03 	bl	16b80 <bsd_os_errno_set>
   19d7a:	f04f 30ff 	mov.w	r0, #4294967295
   19d7e:	e7a5      	b.n	19ccc <logobj_interface_write+0x54>
   19d80:	2009      	movs	r0, #9
   19d82:	f7fc fefd 	bl	16b80 <bsd_os_errno_set>
   19d86:	f04f 30ff 	mov.w	r0, #4294967295
   19d8a:	e79f      	b.n	19ccc <logobj_interface_write+0x54>

00019d8c <logobj_interface_setopt>:
   19d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d8e:	2901      	cmp	r1, #1
   19d90:	b085      	sub	sp, #20
   19d92:	d06d      	beq.n	19e70 <logobj_interface_setopt+0xe4>
   19d94:	461e      	mov	r6, r3
   19d96:	f240 2305 	movw	r3, #517	; 0x205
   19d9a:	4299      	cmp	r1, r3
   19d9c:	f040 80a0 	bne.w	19ee0 <logobj_interface_setopt+0x154>
   19da0:	4607      	mov	r7, r0
   19da2:	4615      	mov	r5, r2
   19da4:	f007 ff74 	bl	21c90 <interface_socket_from_handle_get>
   19da8:	4604      	mov	r4, r0
   19daa:	2800      	cmp	r0, #0
   19dac:	f000 80c3 	beq.w	19f36 <logobj_interface_setopt+0x1aa>
   19db0:	2d01      	cmp	r5, #1
   19db2:	d019      	beq.n	19de8 <logobj_interface_setopt+0x5c>
   19db4:	2d02      	cmp	r5, #2
   19db6:	d010      	beq.n	19dda <logobj_interface_setopt+0x4e>
   19db8:	252a      	movs	r5, #42	; 0x2a
   19dba:	6803      	ldr	r3, [r0, #0]
   19dbc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19dc0:	6023      	str	r3, [r4, #0]
   19dc2:	6823      	ldr	r3, [r4, #0]
   19dc4:	4628      	mov	r0, r5
   19dc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19dca:	6023      	str	r3, [r4, #0]
   19dcc:	f7fc fed8 	bl	16b80 <bsd_os_errno_set>
   19dd0:	f04f 35ff 	mov.w	r5, #4294967295
   19dd4:	4628      	mov	r0, r5
   19dd6:	b005      	add	sp, #20
   19dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19dda:	b116      	cbz	r6, 19de2 <logobj_interface_setopt+0x56>
   19ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19dde:	2b01      	cmp	r3, #1
   19de0:	d04e      	beq.n	19e80 <logobj_interface_setopt+0xf4>
   19de2:	6823      	ldr	r3, [r4, #0]
   19de4:	2516      	movs	r5, #22
   19de6:	e7e9      	b.n	19dbc <logobj_interface_setopt+0x30>
   19de8:	2e00      	cmp	r6, #0
   19dea:	d0fa      	beq.n	19de2 <logobj_interface_setopt+0x56>
   19dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19dee:	2b04      	cmp	r3, #4
   19df0:	d1f7      	bne.n	19de2 <logobj_interface_setopt+0x56>
   19df2:	2100      	movs	r1, #0
   19df4:	a803      	add	r0, sp, #12
   19df6:	f004 fc1b 	bl	1e630 <rpc_logobj_client_request_alloc>
   19dfa:	4605      	mov	r5, r0
   19dfc:	2800      	cmp	r0, #0
   19dfe:	d175      	bne.n	19eec <logobj_interface_setopt+0x160>
   19e00:	9803      	ldr	r0, [sp, #12]
   19e02:	2208      	movs	r2, #8
   19e04:	4629      	mov	r1, r5
   19e06:	300c      	adds	r0, #12
   19e08:	f00c fb16 	bl	26438 <memset>
   19e0c:	9803      	ldr	r0, [sp, #12]
   19e0e:	4631      	mov	r1, r6
   19e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19e12:	300c      	adds	r0, #12
   19e14:	f7f2 fe9a 	bl	cb4c <memcpy>
   19e18:	2308      	movs	r3, #8
   19e1a:	9803      	ldr	r0, [sp, #12]
   19e1c:	f247 0102 	movw	r1, #28674	; 0x7002
   19e20:	7203      	strb	r3, [r0, #8]
   19e22:	7245      	strb	r5, [r0, #9]
   19e24:	7285      	strb	r5, [r0, #10]
   19e26:	72c5      	strb	r5, [r0, #11]
   19e28:	6823      	ldr	r3, [r4, #0]
   19e2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19e2e:	6023      	str	r3, [r4, #0]
   19e30:	f004 fc16 	bl	1e660 <rpc_logobj_client_request_send>
   19e34:	2800      	cmp	r0, #0
   19e36:	d178      	bne.n	19f2a <logobj_interface_setopt+0x19e>
   19e38:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19e3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19e3e:	2900      	cmp	r1, #0
   19e40:	bf08      	it	eq
   19e42:	f04f 31ff 	moveq.w	r1, #4294967295
   19e46:	ab04      	add	r3, sp, #16
   19e48:	f843 1d08 	str.w	r1, [r3, #-8]!
   19e4c:	4638      	mov	r0, r7
   19e4e:	4611      	mov	r1, r2
   19e50:	f007 feaa 	bl	21ba8 <interface_socket_wait>
   19e54:	4605      	mov	r5, r0
   19e56:	2800      	cmp	r0, #0
   19e58:	d140      	bne.n	19edc <logobj_interface_setopt+0x150>
   19e5a:	4638      	mov	r0, r7
   19e5c:	f007 ff18 	bl	21c90 <interface_socket_from_handle_get>
   19e60:	2800      	cmp	r0, #0
   19e62:	d04e      	beq.n	19f02 <logobj_interface_setopt+0x176>
   19e64:	6843      	ldr	r3, [r0, #4]
   19e66:	2b00      	cmp	r3, #0
   19e68:	d04b      	beq.n	19f02 <logobj_interface_setopt+0x176>
   19e6a:	6045      	str	r5, [r0, #4]
   19e6c:	461d      	mov	r5, r3
   19e6e:	e035      	b.n	19edc <logobj_interface_setopt+0x150>
   19e70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   19e72:	9400      	str	r4, [sp, #0]
   19e74:	f007 ff34 	bl	21ce0 <interface_socket_setopt>
   19e78:	4605      	mov	r5, r0
   19e7a:	4628      	mov	r0, r5
   19e7c:	b005      	add	sp, #20
   19e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e80:	2100      	movs	r1, #0
   19e82:	a802      	add	r0, sp, #8
   19e84:	7835      	ldrb	r5, [r6, #0]
   19e86:	f004 fbd3 	bl	1e630 <rpc_logobj_client_request_alloc>
   19e8a:	bb78      	cbnz	r0, 19eec <logobj_interface_setopt+0x160>
   19e8c:	2d01      	cmp	r5, #1
   19e8e:	bf08      	it	eq
   19e90:	4b2c      	ldreq	r3, [pc, #176]	; (19f44 <logobj_interface_setopt+0x1b8>)
   19e92:	f04f 0204 	mov.w	r2, #4
   19e96:	bf08      	it	eq
   19e98:	701d      	strbeq	r5, [r3, #0]
   19e9a:	2300      	movs	r3, #0
   19e9c:	9802      	ldr	r0, [sp, #8]
   19e9e:	f247 0101 	movw	r1, #28673	; 0x7001
   19ea2:	7243      	strb	r3, [r0, #9]
   19ea4:	60c5      	str	r5, [r0, #12]
   19ea6:	7283      	strb	r3, [r0, #10]
   19ea8:	72c3      	strb	r3, [r0, #11]
   19eaa:	7202      	strb	r2, [r0, #8]
   19eac:	6823      	ldr	r3, [r4, #0]
   19eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19eb2:	6023      	str	r3, [r4, #0]
   19eb4:	f004 fbd4 	bl	1e660 <rpc_logobj_client_request_send>
   19eb8:	4606      	mov	r6, r0
   19eba:	bb80      	cbnz	r0, 19f1e <logobj_interface_setopt+0x192>
   19ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19ebe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19ec2:	2900      	cmp	r1, #0
   19ec4:	bf08      	it	eq
   19ec6:	f04f 31ff 	moveq.w	r1, #4294967295
   19eca:	ab04      	add	r3, sp, #16
   19ecc:	f843 1d04 	str.w	r1, [r3, #-4]!
   19ed0:	4638      	mov	r0, r7
   19ed2:	4611      	mov	r1, r2
   19ed4:	f007 fe68 	bl	21ba8 <interface_socket_wait>
   19ed8:	4605      	mov	r5, r0
   19eda:	b150      	cbz	r0, 19ef2 <logobj_interface_setopt+0x166>
   19edc:	6823      	ldr	r3, [r4, #0]
   19ede:	e76d      	b.n	19dbc <logobj_interface_setopt+0x30>
   19ee0:	202a      	movs	r0, #42	; 0x2a
   19ee2:	f7fc fe4d 	bl	16b80 <bsd_os_errno_set>
   19ee6:	f04f 35ff 	mov.w	r5, #4294967295
   19eea:	e773      	b.n	19dd4 <logobj_interface_setopt+0x48>
   19eec:	6823      	ldr	r3, [r4, #0]
   19eee:	250c      	movs	r5, #12
   19ef0:	e764      	b.n	19dbc <logobj_interface_setopt+0x30>
   19ef2:	4638      	mov	r0, r7
   19ef4:	f007 fecc 	bl	21c90 <interface_socket_from_handle_get>
   19ef8:	b140      	cbz	r0, 19f0c <logobj_interface_setopt+0x180>
   19efa:	6845      	ldr	r5, [r0, #4]
   19efc:	b135      	cbz	r5, 19f0c <logobj_interface_setopt+0x180>
   19efe:	6046      	str	r6, [r0, #4]
   19f00:	e7ec      	b.n	19edc <logobj_interface_setopt+0x150>
   19f02:	4631      	mov	r1, r6
   19f04:	2204      	movs	r2, #4
   19f06:	4810      	ldr	r0, [pc, #64]	; (19f48 <logobj_interface_setopt+0x1bc>)
   19f08:	f7f2 fe20 	bl	cb4c <memcpy>
   19f0c:	6823      	ldr	r3, [r4, #0]
   19f0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19f12:	6023      	str	r3, [r4, #0]
   19f14:	6823      	ldr	r3, [r4, #0]
   19f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19f1a:	6023      	str	r3, [r4, #0]
   19f1c:	e75a      	b.n	19dd4 <logobj_interface_setopt+0x48>
   19f1e:	9802      	ldr	r0, [sp, #8]
   19f20:	f004 fbb4 	bl	1e68c <rpc_logobj_client_message_free>
   19f24:	2505      	movs	r5, #5
   19f26:	6823      	ldr	r3, [r4, #0]
   19f28:	e748      	b.n	19dbc <logobj_interface_setopt+0x30>
   19f2a:	9803      	ldr	r0, [sp, #12]
   19f2c:	f004 fbae 	bl	1e68c <rpc_logobj_client_message_free>
   19f30:	2505      	movs	r5, #5
   19f32:	6823      	ldr	r3, [r4, #0]
   19f34:	e742      	b.n	19dbc <logobj_interface_setopt+0x30>
   19f36:	2009      	movs	r0, #9
   19f38:	f7fc fe22 	bl	16b80 <bsd_os_errno_set>
   19f3c:	f04f 35ff 	mov.w	r5, #4294967295
   19f40:	e748      	b.n	19dd4 <logobj_interface_setopt+0x48>
   19f42:	bf00      	nop
   19f44:	20026294 	.word	0x20026294
   19f48:	200217c8 	.word	0x200217c8

00019f4c <logobj_interface_getopt>:
   19f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f4e:	2901      	cmp	r1, #1
   19f50:	b083      	sub	sp, #12
   19f52:	9e08      	ldr	r6, [sp, #32]
   19f54:	d030      	beq.n	19fb8 <logobj_interface_getopt+0x6c>
   19f56:	461f      	mov	r7, r3
   19f58:	f240 2305 	movw	r3, #517	; 0x205
   19f5c:	4299      	cmp	r1, r3
   19f5e:	d134      	bne.n	19fca <logobj_interface_getopt+0x7e>
   19f60:	4615      	mov	r5, r2
   19f62:	f007 fe95 	bl	21c90 <interface_socket_from_handle_get>
   19f66:	2800      	cmp	r0, #0
   19f68:	d037      	beq.n	19fda <logobj_interface_getopt+0x8e>
   19f6a:	2d01      	cmp	r5, #1
   19f6c:	d015      	beq.n	19f9a <logobj_interface_getopt+0x4e>
   19f6e:	2d02      	cmp	r5, #2
   19f70:	d10b      	bne.n	19f8a <logobj_interface_getopt+0x3e>
   19f72:	b387      	cbz	r7, 19fd6 <logobj_interface_getopt+0x8a>
   19f74:	6833      	ldr	r3, [r6, #0]
   19f76:	b373      	cbz	r3, 19fd6 <logobj_interface_getopt+0x8a>
   19f78:	2300      	movs	r3, #0
   19f7a:	2201      	movs	r2, #1
   19f7c:	4618      	mov	r0, r3
   19f7e:	491a      	ldr	r1, [pc, #104]	; (19fe8 <logobj_interface_getopt+0x9c>)
   19f80:	7809      	ldrb	r1, [r1, #0]
   19f82:	7039      	strb	r1, [r7, #0]
   19f84:	6032      	str	r2, [r6, #0]
   19f86:	b003      	add	sp, #12
   19f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f8a:	2009      	movs	r0, #9
   19f8c:	f7fc fdf8 	bl	16b80 <bsd_os_errno_set>
   19f90:	f04f 33ff 	mov.w	r3, #4294967295
   19f94:	4618      	mov	r0, r3
   19f96:	b003      	add	sp, #12
   19f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f9a:	b1e7      	cbz	r7, 19fd6 <logobj_interface_getopt+0x8a>
   19f9c:	6833      	ldr	r3, [r6, #0]
   19f9e:	2b03      	cmp	r3, #3
   19fa0:	d919      	bls.n	19fd6 <logobj_interface_getopt+0x8a>
   19fa2:	4638      	mov	r0, r7
   19fa4:	2204      	movs	r2, #4
   19fa6:	4911      	ldr	r1, [pc, #68]	; (19fec <logobj_interface_getopt+0xa0>)
   19fa8:	f7f2 fdd0 	bl	cb4c <memcpy>
   19fac:	2300      	movs	r3, #0
   19fae:	2204      	movs	r2, #4
   19fb0:	4618      	mov	r0, r3
   19fb2:	6032      	str	r2, [r6, #0]
   19fb4:	b003      	add	sp, #12
   19fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19fb8:	9600      	str	r6, [sp, #0]
   19fba:	f007 fed7 	bl	21d6c <interface_socket_getopt>
   19fbe:	4603      	mov	r3, r0
   19fc0:	2800      	cmp	r0, #0
   19fc2:	d1e3      	bne.n	19f8c <logobj_interface_getopt+0x40>
   19fc4:	4618      	mov	r0, r3
   19fc6:	b003      	add	sp, #12
   19fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19fca:	202a      	movs	r0, #42	; 0x2a
   19fcc:	f7fc fdd8 	bl	16b80 <bsd_os_errno_set>
   19fd0:	f04f 33ff 	mov.w	r3, #4294967295
   19fd4:	e7de      	b.n	19f94 <logobj_interface_getopt+0x48>
   19fd6:	2016      	movs	r0, #22
   19fd8:	e7d8      	b.n	19f8c <logobj_interface_getopt+0x40>
   19fda:	2009      	movs	r0, #9
   19fdc:	f7fc fdd0 	bl	16b80 <bsd_os_errno_set>
   19fe0:	f04f 33ff 	mov.w	r3, #4294967295
   19fe4:	e7d6      	b.n	19f94 <logobj_interface_getopt+0x48>
   19fe6:	bf00      	nop
   19fe8:	20026295 	.word	0x20026295
   19fec:	200217c8 	.word	0x200217c8

00019ff0 <logobj_interface_close>:
   19ff0:	b510      	push	{r4, lr}
   19ff2:	4604      	mov	r4, r0
   19ff4:	f007 fe4c 	bl	21c90 <interface_socket_from_handle_get>
   19ff8:	b138      	cbz	r0, 1a00a <logobj_interface_close+0x1a>
   19ffa:	4620      	mov	r0, r4
   19ffc:	f007 fd86 	bl	21b0c <interface_socket_free>
   1a000:	2300      	movs	r3, #0
   1a002:	4a05      	ldr	r2, [pc, #20]	; (1a018 <logobj_interface_close+0x28>)
   1a004:	4618      	mov	r0, r3
   1a006:	6013      	str	r3, [r2, #0]
   1a008:	bd10      	pop	{r4, pc}
   1a00a:	2009      	movs	r0, #9
   1a00c:	f7fc fdb8 	bl	16b80 <bsd_os_errno_set>
   1a010:	f04f 30ff 	mov.w	r0, #4294967295
   1a014:	bd10      	pop	{r4, pc}
   1a016:	bf00      	nop
   1a018:	200217cc 	.word	0x200217cc

0001a01c <rpc_transport_send>:
   1a01c:	f000 bed8 	b.w	1add0 <rpc_transport_ipc_send>

0001a020 <rpc_transport_rpc_alloc>:
   1a020:	f000 bf58 	b.w	1aed4 <rpc_transport_ipc_tx_rpc_data_alloc>

0001a024 <rpc_transport_data_alloc>:
   1a024:	f000 bfbe 	b.w	1afa4 <rpc_transport_ipc_tx_data_alloc>

0001a028 <rpc_transport_rpc_free>:
   1a028:	f000 bdb6 	b.w	1ab98 <rpc_transport_ipc_msg_free>

0001a02c <rpc_transport_data_free>:
   1a02c:	f000 ba64 	b.w	1a4f8 <rpc_transport_ipc_data_free>

0001a030 <ipc_trace_init>:
   1a030:	4b01      	ldr	r3, [pc, #4]	; (1a038 <ipc_trace_init+0x8>)
   1a032:	6018      	str	r0, [r3, #0]
   1a034:	4770      	bx	lr
   1a036:	bf00      	nop
   1a038:	200217dc 	.word	0x200217dc

0001a03c <bsd_os_trace_irq_handler>:
   1a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a03e:	4b6e      	ldr	r3, [pc, #440]	; (1a1f8 <bsd_os_trace_irq_handler+0x1bc>)
   1a040:	b083      	sub	sp, #12
   1a042:	781b      	ldrb	r3, [r3, #0]
   1a044:	2b00      	cmp	r3, #0
   1a046:	f000 80d3 	beq.w	1a1f0 <bsd_os_trace_irq_handler+0x1b4>
   1a04a:	4b6c      	ldr	r3, [pc, #432]	; (1a1fc <bsd_os_trace_irq_handler+0x1c0>)
   1a04c:	681c      	ldr	r4, [r3, #0]
   1a04e:	b124      	cbz	r4, 1a05a <bsd_os_trace_irq_handler+0x1e>
   1a050:	68a3      	ldr	r3, [r4, #8]
   1a052:	6862      	ldr	r2, [r4, #4]
   1a054:	4293      	cmp	r3, r2
   1a056:	f040 808c 	bne.w	1a172 <bsd_os_trace_irq_handler+0x136>
   1a05a:	4b69      	ldr	r3, [pc, #420]	; (1a200 <bsd_os_trace_irq_handler+0x1c4>)
   1a05c:	681c      	ldr	r4, [r3, #0]
   1a05e:	b11c      	cbz	r4, 1a068 <bsd_os_trace_irq_handler+0x2c>
   1a060:	68a3      	ldr	r3, [r4, #8]
   1a062:	6862      	ldr	r2, [r4, #4]
   1a064:	4293      	cmp	r3, r2
   1a066:	d146      	bne.n	1a0f6 <bsd_os_trace_irq_handler+0xba>
   1a068:	4b66      	ldr	r3, [pc, #408]	; (1a204 <bsd_os_trace_irq_handler+0x1c8>)
   1a06a:	681c      	ldr	r4, [r3, #0]
   1a06c:	b11c      	cbz	r4, 1a076 <bsd_os_trace_irq_handler+0x3a>
   1a06e:	68a3      	ldr	r3, [r4, #8]
   1a070:	6862      	ldr	r2, [r4, #4]
   1a072:	4293      	cmp	r3, r2
   1a074:	d101      	bne.n	1a07a <bsd_os_trace_irq_handler+0x3e>
   1a076:	b003      	add	sp, #12
   1a078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a07a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a07e:	f8ad 2000 	strh.w	r2, [sp]
   1a082:	7822      	ldrb	r2, [r4, #0]
   1a084:	466e      	mov	r6, sp
   1a086:	f88d 2004 	strb.w	r2, [sp, #4]
   1a08a:	6862      	ldr	r2, [r4, #4]
   1a08c:	2105      	movs	r1, #5
   1a08e:	4293      	cmp	r3, r2
   1a090:	bf2a      	itet	cs
   1a092:	6927      	ldrcs	r7, [r4, #16]
   1a094:	1ad7      	subcc	r7, r2, r3
   1a096:	1aff      	subcs	r7, r7, r3
   1a098:	4293      	cmp	r3, r2
   1a09a:	bf94      	ite	ls
   1a09c:	2500      	movls	r5, #0
   1a09e:	68e5      	ldrhi	r5, [r4, #12]
   1a0a0:	b2bf      	uxth	r7, r7
   1a0a2:	bf88      	it	hi
   1a0a4:	1b52      	subhi	r2, r2, r5
   1a0a6:	4630      	mov	r0, r6
   1a0a8:	bf88      	it	hi
   1a0aa:	b295      	uxthhi	r5, r2
   1a0ac:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a0b0:	f7fc ff48 	bl	16f44 <bsd_os_trace_put>
   1a0b4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a0b8:	68a0      	ldr	r0, [r4, #8]
   1a0ba:	f7fc ff43 	bl	16f44 <bsd_os_trace_put>
   1a0be:	68a3      	ldr	r3, [r4, #8]
   1a0c0:	6922      	ldr	r2, [r4, #16]
   1a0c2:	441f      	add	r7, r3
   1a0c4:	4297      	cmp	r7, r2
   1a0c6:	bf08      	it	eq
   1a0c8:	68e3      	ldreq	r3, [r4, #12]
   1a0ca:	60a7      	str	r7, [r4, #8]
   1a0cc:	bf08      	it	eq
   1a0ce:	60a3      	streq	r3, [r4, #8]
   1a0d0:	2d00      	cmp	r5, #0
   1a0d2:	d0d0      	beq.n	1a076 <bsd_os_trace_irq_handler+0x3a>
   1a0d4:	2105      	movs	r1, #5
   1a0d6:	4630      	mov	r0, r6
   1a0d8:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a0dc:	f7fc ff32 	bl	16f44 <bsd_os_trace_put>
   1a0e0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a0e4:	68e0      	ldr	r0, [r4, #12]
   1a0e6:	f7fc ff2d 	bl	16f44 <bsd_os_trace_put>
   1a0ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a0ee:	68e3      	ldr	r3, [r4, #12]
   1a0f0:	4413      	add	r3, r2
   1a0f2:	60a3      	str	r3, [r4, #8]
   1a0f4:	e7bf      	b.n	1a076 <bsd_os_trace_irq_handler+0x3a>
   1a0f6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a0fa:	f8ad 2000 	strh.w	r2, [sp]
   1a0fe:	7822      	ldrb	r2, [r4, #0]
   1a100:	466e      	mov	r6, sp
   1a102:	f88d 2004 	strb.w	r2, [sp, #4]
   1a106:	6862      	ldr	r2, [r4, #4]
   1a108:	2105      	movs	r1, #5
   1a10a:	4293      	cmp	r3, r2
   1a10c:	bf2a      	itet	cs
   1a10e:	6927      	ldrcs	r7, [r4, #16]
   1a110:	1ad7      	subcc	r7, r2, r3
   1a112:	1aff      	subcs	r7, r7, r3
   1a114:	4293      	cmp	r3, r2
   1a116:	bf94      	ite	ls
   1a118:	2500      	movls	r5, #0
   1a11a:	68e5      	ldrhi	r5, [r4, #12]
   1a11c:	b2bf      	uxth	r7, r7
   1a11e:	bf88      	it	hi
   1a120:	1b52      	subhi	r2, r2, r5
   1a122:	4630      	mov	r0, r6
   1a124:	bf88      	it	hi
   1a126:	b295      	uxthhi	r5, r2
   1a128:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a12c:	f7fc ff0a 	bl	16f44 <bsd_os_trace_put>
   1a130:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a134:	68a0      	ldr	r0, [r4, #8]
   1a136:	f7fc ff05 	bl	16f44 <bsd_os_trace_put>
   1a13a:	68a3      	ldr	r3, [r4, #8]
   1a13c:	6922      	ldr	r2, [r4, #16]
   1a13e:	441f      	add	r7, r3
   1a140:	4297      	cmp	r7, r2
   1a142:	bf08      	it	eq
   1a144:	68e3      	ldreq	r3, [r4, #12]
   1a146:	60a7      	str	r7, [r4, #8]
   1a148:	bf08      	it	eq
   1a14a:	60a3      	streq	r3, [r4, #8]
   1a14c:	2d00      	cmp	r5, #0
   1a14e:	d08b      	beq.n	1a068 <bsd_os_trace_irq_handler+0x2c>
   1a150:	2105      	movs	r1, #5
   1a152:	4630      	mov	r0, r6
   1a154:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a158:	f7fc fef4 	bl	16f44 <bsd_os_trace_put>
   1a15c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a160:	68e0      	ldr	r0, [r4, #12]
   1a162:	f7fc feef 	bl	16f44 <bsd_os_trace_put>
   1a166:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a16a:	68e3      	ldr	r3, [r4, #12]
   1a16c:	4413      	add	r3, r2
   1a16e:	60a3      	str	r3, [r4, #8]
   1a170:	e77a      	b.n	1a068 <bsd_os_trace_irq_handler+0x2c>
   1a172:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a176:	f8ad 2000 	strh.w	r2, [sp]
   1a17a:	7822      	ldrb	r2, [r4, #0]
   1a17c:	466e      	mov	r6, sp
   1a17e:	f88d 2004 	strb.w	r2, [sp, #4]
   1a182:	6862      	ldr	r2, [r4, #4]
   1a184:	2105      	movs	r1, #5
   1a186:	4293      	cmp	r3, r2
   1a188:	bf2a      	itet	cs
   1a18a:	6927      	ldrcs	r7, [r4, #16]
   1a18c:	1ad7      	subcc	r7, r2, r3
   1a18e:	1aff      	subcs	r7, r7, r3
   1a190:	4293      	cmp	r3, r2
   1a192:	bf94      	ite	ls
   1a194:	2500      	movls	r5, #0
   1a196:	68e5      	ldrhi	r5, [r4, #12]
   1a198:	b2bf      	uxth	r7, r7
   1a19a:	bf88      	it	hi
   1a19c:	1b52      	subhi	r2, r2, r5
   1a19e:	4630      	mov	r0, r6
   1a1a0:	bf88      	it	hi
   1a1a2:	b295      	uxthhi	r5, r2
   1a1a4:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a1a8:	f7fc fecc 	bl	16f44 <bsd_os_trace_put>
   1a1ac:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a1b0:	68a0      	ldr	r0, [r4, #8]
   1a1b2:	f7fc fec7 	bl	16f44 <bsd_os_trace_put>
   1a1b6:	68a3      	ldr	r3, [r4, #8]
   1a1b8:	6922      	ldr	r2, [r4, #16]
   1a1ba:	441f      	add	r7, r3
   1a1bc:	4297      	cmp	r7, r2
   1a1be:	bf08      	it	eq
   1a1c0:	68e3      	ldreq	r3, [r4, #12]
   1a1c2:	60a7      	str	r7, [r4, #8]
   1a1c4:	bf08      	it	eq
   1a1c6:	60a3      	streq	r3, [r4, #8]
   1a1c8:	2d00      	cmp	r5, #0
   1a1ca:	f43f af46 	beq.w	1a05a <bsd_os_trace_irq_handler+0x1e>
   1a1ce:	2105      	movs	r1, #5
   1a1d0:	4630      	mov	r0, r6
   1a1d2:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a1d6:	f7fc feb5 	bl	16f44 <bsd_os_trace_put>
   1a1da:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a1de:	68e0      	ldr	r0, [r4, #12]
   1a1e0:	f7fc feb0 	bl	16f44 <bsd_os_trace_put>
   1a1e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a1e8:	68e3      	ldr	r3, [r4, #12]
   1a1ea:	4413      	add	r3, r2
   1a1ec:	60a3      	str	r3, [r4, #8]
   1a1ee:	e734      	b.n	1a05a <bsd_os_trace_irq_handler+0x1e>
   1a1f0:	f7fc fe6a 	bl	16ec8 <bsd_os_trace_irq_clear>
   1a1f4:	e729      	b.n	1a04a <bsd_os_trace_irq_handler+0xe>
   1a1f6:	bf00      	nop
   1a1f8:	20026297 	.word	0x20026297
   1a1fc:	200217d8 	.word	0x200217d8
   1a200:	200217d0 	.word	0x200217d0
   1a204:	200217d4 	.word	0x200217d4

0001a208 <ipc_trace_handle>:
   1a208:	2200      	movs	r2, #0
   1a20a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a20e:	4bb2      	ldr	r3, [pc, #712]	; (1a4d8 <ipc_trace_handle+0x2d0>)
   1a210:	b083      	sub	sp, #12
   1a212:	681b      	ldr	r3, [r3, #0]
   1a214:	6919      	ldr	r1, [r3, #16]
   1a216:	695c      	ldr	r4, [r3, #20]
   1a218:	7c18      	ldrb	r0, [r3, #16]
   1a21a:	741a      	strb	r2, [r3, #16]
   1a21c:	7c58      	ldrb	r0, [r3, #17]
   1a21e:	745a      	strb	r2, [r3, #17]
   1a220:	7c98      	ldrb	r0, [r3, #18]
   1a222:	749a      	strb	r2, [r3, #18]
   1a224:	7cd8      	ldrb	r0, [r3, #19]
   1a226:	74da      	strb	r2, [r3, #19]
   1a228:	7d18      	ldrb	r0, [r3, #20]
   1a22a:	751a      	strb	r2, [r3, #20]
   1a22c:	7d58      	ldrb	r0, [r3, #21]
   1a22e:	755a      	strb	r2, [r3, #21]
   1a230:	7d98      	ldrb	r0, [r3, #22]
   1a232:	759a      	strb	r2, [r3, #22]
   1a234:	7dd8      	ldrb	r0, [r3, #23]
   1a236:	75da      	strb	r2, [r3, #23]
   1a238:	b1a9      	cbz	r1, 1a266 <ipc_trace_handle+0x5e>
   1a23a:	3901      	subs	r1, #1
   1a23c:	2903      	cmp	r1, #3
   1a23e:	d812      	bhi.n	1a266 <ipc_trace_handle+0x5e>
   1a240:	e8df f001 	tbb	[pc, r1]
   1a244:	1402a97c 	.word	0x1402a97c
   1a248:	2501      	movs	r5, #1
   1a24a:	2003      	movs	r0, #3
   1a24c:	2200      	movs	r2, #0
   1a24e:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a252:	4ca2      	ldr	r4, [pc, #648]	; (1a4dc <ipc_trace_handle+0x2d4>)
   1a254:	7025      	strb	r5, [r4, #0]
   1a256:	7a1c      	ldrb	r4, [r3, #8]
   1a258:	7218      	strb	r0, [r3, #8]
   1a25a:	7a58      	ldrb	r0, [r3, #9]
   1a25c:	725a      	strb	r2, [r3, #9]
   1a25e:	7a98      	ldrb	r0, [r3, #10]
   1a260:	729a      	strb	r2, [r3, #10]
   1a262:	7ada      	ldrb	r2, [r3, #11]
   1a264:	72d9      	strb	r1, [r3, #11]
   1a266:	b003      	add	sp, #12
   1a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a26c:	2104      	movs	r1, #4
   1a26e:	2200      	movs	r2, #0
   1a270:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1a274:	7a1c      	ldrb	r4, [r3, #8]
   1a276:	7219      	strb	r1, [r3, #8]
   1a278:	7a59      	ldrb	r1, [r3, #9]
   1a27a:	725a      	strb	r2, [r3, #9]
   1a27c:	4997      	ldr	r1, [pc, #604]	; (1a4dc <ipc_trace_handle+0x2d4>)
   1a27e:	7a9c      	ldrb	r4, [r3, #10]
   1a280:	729a      	strb	r2, [r3, #10]
   1a282:	7adc      	ldrb	r4, [r3, #11]
   1a284:	72d8      	strb	r0, [r3, #11]
   1a286:	700a      	strb	r2, [r1, #0]
   1a288:	780b      	ldrb	r3, [r1, #0]
   1a28a:	2b00      	cmp	r3, #0
   1a28c:	f000 809f 	beq.w	1a3ce <ipc_trace_handle+0x1c6>
   1a290:	4b93      	ldr	r3, [pc, #588]	; (1a4e0 <ipc_trace_handle+0x2d8>)
   1a292:	681c      	ldr	r4, [r3, #0]
   1a294:	b124      	cbz	r4, 1a2a0 <ipc_trace_handle+0x98>
   1a296:	68a3      	ldr	r3, [r4, #8]
   1a298:	6862      	ldr	r2, [r4, #4]
   1a29a:	4293      	cmp	r3, r2
   1a29c:	f040 80d9 	bne.w	1a452 <ipc_trace_handle+0x24a>
   1a2a0:	4b90      	ldr	r3, [pc, #576]	; (1a4e4 <ipc_trace_handle+0x2dc>)
   1a2a2:	681c      	ldr	r4, [r3, #0]
   1a2a4:	b124      	cbz	r4, 1a2b0 <ipc_trace_handle+0xa8>
   1a2a6:	68a3      	ldr	r3, [r4, #8]
   1a2a8:	6862      	ldr	r2, [r4, #4]
   1a2aa:	4293      	cmp	r3, r2
   1a2ac:	f040 8092 	bne.w	1a3d4 <ipc_trace_handle+0x1cc>
   1a2b0:	4b8d      	ldr	r3, [pc, #564]	; (1a4e8 <ipc_trace_handle+0x2e0>)
   1a2b2:	681c      	ldr	r4, [r3, #0]
   1a2b4:	2c00      	cmp	r4, #0
   1a2b6:	d0d6      	beq.n	1a266 <ipc_trace_handle+0x5e>
   1a2b8:	68a3      	ldr	r3, [r4, #8]
   1a2ba:	6862      	ldr	r2, [r4, #4]
   1a2bc:	4293      	cmp	r3, r2
   1a2be:	d0d2      	beq.n	1a266 <ipc_trace_handle+0x5e>
   1a2c0:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a2c4:	f8ad 2000 	strh.w	r2, [sp]
   1a2c8:	7822      	ldrb	r2, [r4, #0]
   1a2ca:	466e      	mov	r6, sp
   1a2cc:	f88d 2004 	strb.w	r2, [sp, #4]
   1a2d0:	6862      	ldr	r2, [r4, #4]
   1a2d2:	2105      	movs	r1, #5
   1a2d4:	4293      	cmp	r3, r2
   1a2d6:	bf2a      	itet	cs
   1a2d8:	6927      	ldrcs	r7, [r4, #16]
   1a2da:	1ad7      	subcc	r7, r2, r3
   1a2dc:	1aff      	subcs	r7, r7, r3
   1a2de:	4293      	cmp	r3, r2
   1a2e0:	bf94      	ite	ls
   1a2e2:	2500      	movls	r5, #0
   1a2e4:	68e5      	ldrhi	r5, [r4, #12]
   1a2e6:	b2bf      	uxth	r7, r7
   1a2e8:	bf88      	it	hi
   1a2ea:	1b52      	subhi	r2, r2, r5
   1a2ec:	4630      	mov	r0, r6
   1a2ee:	bf88      	it	hi
   1a2f0:	b295      	uxthhi	r5, r2
   1a2f2:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a2f6:	f7fc fe25 	bl	16f44 <bsd_os_trace_put>
   1a2fa:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a2fe:	68a0      	ldr	r0, [r4, #8]
   1a300:	f7fc fe20 	bl	16f44 <bsd_os_trace_put>
   1a304:	68a3      	ldr	r3, [r4, #8]
   1a306:	6922      	ldr	r2, [r4, #16]
   1a308:	441f      	add	r7, r3
   1a30a:	4297      	cmp	r7, r2
   1a30c:	bf08      	it	eq
   1a30e:	68e3      	ldreq	r3, [r4, #12]
   1a310:	60a7      	str	r7, [r4, #8]
   1a312:	bf08      	it	eq
   1a314:	60a3      	streq	r3, [r4, #8]
   1a316:	2d00      	cmp	r5, #0
   1a318:	d0a5      	beq.n	1a266 <ipc_trace_handle+0x5e>
   1a31a:	2105      	movs	r1, #5
   1a31c:	4630      	mov	r0, r6
   1a31e:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a322:	f7fc fe0f 	bl	16f44 <bsd_os_trace_put>
   1a326:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a32a:	68e0      	ldr	r0, [r4, #12]
   1a32c:	f7fc fe0a 	bl	16f44 <bsd_os_trace_put>
   1a330:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a334:	68e3      	ldr	r3, [r4, #12]
   1a336:	4413      	add	r3, r2
   1a338:	60a3      	str	r3, [r4, #8]
   1a33a:	e794      	b.n	1a266 <ipc_trace_handle+0x5e>
   1a33c:	4a67      	ldr	r2, [pc, #412]	; (1a4dc <ipc_trace_handle+0x2d4>)
   1a33e:	7811      	ldrb	r1, [r2, #0]
   1a340:	b109      	cbz	r1, 1a346 <ipc_trace_handle+0x13e>
   1a342:	2100      	movs	r1, #0
   1a344:	7011      	strb	r1, [r2, #0]
   1a346:	68a5      	ldr	r5, [r4, #8]
   1a348:	2d00      	cmp	r5, #0
   1a34a:	d03b      	beq.n	1a3c4 <ipc_trace_handle+0x1bc>
   1a34c:	f04f 0c00 	mov.w	ip, #0
   1a350:	f8df a190 	ldr.w	sl, [pc, #400]	; 1a4e4 <ipc_trace_handle+0x2dc>
   1a354:	f8df b188 	ldr.w	fp, [pc, #392]	; 1a4e0 <ipc_trace_handle+0x2d8>
   1a358:	4963      	ldr	r1, [pc, #396]	; (1a4e8 <ipc_trace_handle+0x2e0>)
   1a35a:	46e1      	mov	r9, ip
   1a35c:	4666      	mov	r6, ip
   1a35e:	4662      	mov	r2, ip
   1a360:	f8d1 e000 	ldr.w	lr, [r1]
   1a364:	f8da 8000 	ldr.w	r8, [sl]
   1a368:	f8db 7000 	ldr.w	r7, [fp]
   1a36c:	e008      	b.n	1a380 <ipc_trace_handle+0x178>
   1a36e:	2963      	cmp	r1, #99	; 0x63
   1a370:	d016      	beq.n	1a3a0 <ipc_trace_handle+0x198>
   1a372:	2961      	cmp	r1, #97	; 0x61
   1a374:	bf04      	itt	eq
   1a376:	4607      	moveq	r7, r0
   1a378:	2601      	moveq	r6, #1
   1a37a:	3201      	adds	r2, #1
   1a37c:	42aa      	cmp	r2, r5
   1a37e:	d013      	beq.n	1a3a8 <ipc_trace_handle+0x1a0>
   1a380:	1c91      	adds	r1, r2, #2
   1a382:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1a386:	6848      	ldr	r0, [r1, #4]
   1a388:	7801      	ldrb	r1, [r0, #0]
   1a38a:	2962      	cmp	r1, #98	; 0x62
   1a38c:	d1ef      	bne.n	1a36e <ipc_trace_handle+0x166>
   1a38e:	4680      	mov	r8, r0
   1a390:	f04f 0901 	mov.w	r9, #1
   1a394:	e7f1      	b.n	1a37a <ipc_trace_handle+0x172>
   1a396:	f7fc fd8f 	bl	16eb8 <bsd_os_trace_irq_set>
   1a39a:	b003      	add	sp, #12
   1a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3a0:	4686      	mov	lr, r0
   1a3a2:	f04f 0c01 	mov.w	ip, #1
   1a3a6:	e7e8      	b.n	1a37a <ipc_trace_handle+0x172>
   1a3a8:	2e00      	cmp	r6, #0
   1a3aa:	f040 8091 	bne.w	1a4d0 <ipc_trace_handle+0x2c8>
   1a3ae:	f1b9 0f00 	cmp.w	r9, #0
   1a3b2:	d001      	beq.n	1a3b8 <ipc_trace_handle+0x1b0>
   1a3b4:	f8ca 8000 	str.w	r8, [sl]
   1a3b8:	f1bc 0f00 	cmp.w	ip, #0
   1a3bc:	d002      	beq.n	1a3c4 <ipc_trace_handle+0x1bc>
   1a3be:	4a4a      	ldr	r2, [pc, #296]	; (1a4e8 <ipc_trace_handle+0x2e0>)
   1a3c0:	f8c2 e000 	str.w	lr, [r2]
   1a3c4:	2001      	movs	r0, #1
   1a3c6:	2200      	movs	r2, #0
   1a3c8:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a3cc:	e743      	b.n	1a256 <ipc_trace_handle+0x4e>
   1a3ce:	f7fc fd7b 	bl	16ec8 <bsd_os_trace_irq_clear>
   1a3d2:	e75d      	b.n	1a290 <ipc_trace_handle+0x88>
   1a3d4:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a3d8:	f8ad 2000 	strh.w	r2, [sp]
   1a3dc:	7822      	ldrb	r2, [r4, #0]
   1a3de:	466e      	mov	r6, sp
   1a3e0:	f88d 2004 	strb.w	r2, [sp, #4]
   1a3e4:	6862      	ldr	r2, [r4, #4]
   1a3e6:	2105      	movs	r1, #5
   1a3e8:	4293      	cmp	r3, r2
   1a3ea:	bf2a      	itet	cs
   1a3ec:	6927      	ldrcs	r7, [r4, #16]
   1a3ee:	1ad7      	subcc	r7, r2, r3
   1a3f0:	1aff      	subcs	r7, r7, r3
   1a3f2:	4293      	cmp	r3, r2
   1a3f4:	bf94      	ite	ls
   1a3f6:	2500      	movls	r5, #0
   1a3f8:	68e5      	ldrhi	r5, [r4, #12]
   1a3fa:	b2bf      	uxth	r7, r7
   1a3fc:	bf88      	it	hi
   1a3fe:	1b52      	subhi	r2, r2, r5
   1a400:	4630      	mov	r0, r6
   1a402:	bf88      	it	hi
   1a404:	b295      	uxthhi	r5, r2
   1a406:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a40a:	f7fc fd9b 	bl	16f44 <bsd_os_trace_put>
   1a40e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a412:	68a0      	ldr	r0, [r4, #8]
   1a414:	f7fc fd96 	bl	16f44 <bsd_os_trace_put>
   1a418:	68a3      	ldr	r3, [r4, #8]
   1a41a:	6922      	ldr	r2, [r4, #16]
   1a41c:	441f      	add	r7, r3
   1a41e:	4297      	cmp	r7, r2
   1a420:	bf08      	it	eq
   1a422:	68e3      	ldreq	r3, [r4, #12]
   1a424:	60a7      	str	r7, [r4, #8]
   1a426:	bf08      	it	eq
   1a428:	60a3      	streq	r3, [r4, #8]
   1a42a:	2d00      	cmp	r5, #0
   1a42c:	f43f af40 	beq.w	1a2b0 <ipc_trace_handle+0xa8>
   1a430:	2105      	movs	r1, #5
   1a432:	4630      	mov	r0, r6
   1a434:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a438:	f7fc fd84 	bl	16f44 <bsd_os_trace_put>
   1a43c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a440:	68e0      	ldr	r0, [r4, #12]
   1a442:	f7fc fd7f 	bl	16f44 <bsd_os_trace_put>
   1a446:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a44a:	68e3      	ldr	r3, [r4, #12]
   1a44c:	4413      	add	r3, r2
   1a44e:	60a3      	str	r3, [r4, #8]
   1a450:	e72e      	b.n	1a2b0 <ipc_trace_handle+0xa8>
   1a452:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a456:	f8ad 2000 	strh.w	r2, [sp]
   1a45a:	7822      	ldrb	r2, [r4, #0]
   1a45c:	466e      	mov	r6, sp
   1a45e:	f88d 2004 	strb.w	r2, [sp, #4]
   1a462:	6862      	ldr	r2, [r4, #4]
   1a464:	2105      	movs	r1, #5
   1a466:	4293      	cmp	r3, r2
   1a468:	bf2a      	itet	cs
   1a46a:	6927      	ldrcs	r7, [r4, #16]
   1a46c:	1ad7      	subcc	r7, r2, r3
   1a46e:	1aff      	subcs	r7, r7, r3
   1a470:	4293      	cmp	r3, r2
   1a472:	bf94      	ite	ls
   1a474:	2500      	movls	r5, #0
   1a476:	68e5      	ldrhi	r5, [r4, #12]
   1a478:	b2bf      	uxth	r7, r7
   1a47a:	bf88      	it	hi
   1a47c:	1b52      	subhi	r2, r2, r5
   1a47e:	4630      	mov	r0, r6
   1a480:	bf88      	it	hi
   1a482:	b295      	uxthhi	r5, r2
   1a484:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a488:	f7fc fd5c 	bl	16f44 <bsd_os_trace_put>
   1a48c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a490:	68a0      	ldr	r0, [r4, #8]
   1a492:	f7fc fd57 	bl	16f44 <bsd_os_trace_put>
   1a496:	68a3      	ldr	r3, [r4, #8]
   1a498:	6922      	ldr	r2, [r4, #16]
   1a49a:	441f      	add	r7, r3
   1a49c:	4297      	cmp	r7, r2
   1a49e:	bf08      	it	eq
   1a4a0:	68e3      	ldreq	r3, [r4, #12]
   1a4a2:	60a7      	str	r7, [r4, #8]
   1a4a4:	bf08      	it	eq
   1a4a6:	60a3      	streq	r3, [r4, #8]
   1a4a8:	2d00      	cmp	r5, #0
   1a4aa:	f43f aef9 	beq.w	1a2a0 <ipc_trace_handle+0x98>
   1a4ae:	2105      	movs	r1, #5
   1a4b0:	4630      	mov	r0, r6
   1a4b2:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a4b6:	f7fc fd45 	bl	16f44 <bsd_os_trace_put>
   1a4ba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a4be:	68e0      	ldr	r0, [r4, #12]
   1a4c0:	f7fc fd40 	bl	16f44 <bsd_os_trace_put>
   1a4c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a4c8:	68e3      	ldr	r3, [r4, #12]
   1a4ca:	4413      	add	r3, r2
   1a4cc:	60a3      	str	r3, [r4, #8]
   1a4ce:	e6e7      	b.n	1a2a0 <ipc_trace_handle+0x98>
   1a4d0:	f8cb 7000 	str.w	r7, [fp]
   1a4d4:	e76b      	b.n	1a3ae <ipc_trace_handle+0x1a6>
   1a4d6:	bf00      	nop
   1a4d8:	200217dc 	.word	0x200217dc
   1a4dc:	20026297 	.word	0x20026297
   1a4e0:	200217d8 	.word	0x200217d8
   1a4e4:	200217d0 	.word	0x200217d0
   1a4e8:	200217d4 	.word	0x200217d4

0001a4ec <rpc_trace_coredump_in_progress>:
   1a4ec:	4b01      	ldr	r3, [pc, #4]	; (1a4f4 <rpc_trace_coredump_in_progress+0x8>)
   1a4ee:	7818      	ldrb	r0, [r3, #0]
   1a4f0:	4770      	bx	lr
   1a4f2:	bf00      	nop
   1a4f4:	20026297 	.word	0x20026297

0001a4f8 <rpc_transport_ipc_data_free>:
   1a4f8:	b510      	push	{r4, lr}
   1a4fa:	4b0e      	ldr	r3, [pc, #56]	; (1a534 <rpc_transport_ipc_data_free+0x3c>)
   1a4fc:	4604      	mov	r4, r0
   1a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a502:	4413      	add	r3, r2
   1a504:	4298      	cmp	r0, r3
   1a506:	d20d      	bcs.n	1a524 <rpc_transport_ipc_data_free+0x2c>
   1a508:	4282      	cmp	r2, r0
   1a50a:	d80b      	bhi.n	1a524 <rpc_transport_ipc_data_free+0x2c>
   1a50c:	f000 fd1a 	bl	1af44 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1a510:	b158      	cbz	r0, 1a52a <rpc_transport_ipc_data_free+0x32>
   1a512:	4a09      	ldr	r2, [pc, #36]	; (1a538 <rpc_transport_ipc_data_free+0x40>)
   1a514:	6084      	str	r4, [r0, #8]
   1a516:	6002      	str	r2, [r0, #0]
   1a518:	f7ff fd80 	bl	1a01c <rpc_transport_send>
   1a51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a520:	f7fc bcba 	b.w	16e98 <bsd_os_application_irq_set>
   1a524:	4620      	mov	r0, r4
   1a526:	f006 ff7b 	bl	21420 <nrf_shared_free>
   1a52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a52e:	f7fc bcb3 	b.w	16e98 <bsd_os_application_irq_set>
   1a532:	bf00      	nop
   1a534:	200217e0 	.word	0x200217e0
   1a538:	00020001 	.word	0x00020001

0001a53c <rpc_transport_ipc_init>:
   1a53c:	b188      	cbz	r0, 1a562 <rpc_transport_ipc_init+0x26>
   1a53e:	b510      	push	{r4, lr}
   1a540:	b082      	sub	sp, #8
   1a542:	aa01      	add	r2, sp, #4
   1a544:	4669      	mov	r1, sp
   1a546:	4604      	mov	r4, r0
   1a548:	f000 fb58 	bl	1abfc <rpc_transport_ipc_tx_init>
   1a54c:	4602      	mov	r2, r0
   1a54e:	b148      	cbz	r0, 1a564 <rpc_transport_ipc_init+0x28>
   1a550:	4b12      	ldr	r3, [pc, #72]	; (1a59c <rpc_transport_ipc_init+0x60>)
   1a552:	3428      	adds	r4, #40	; 0x28
   1a554:	e894 0003 	ldmia.w	r4, {r0, r1}
   1a558:	e883 0003 	stmia.w	r3, {r0, r1}
   1a55c:	4610      	mov	r0, r2
   1a55e:	b002      	add	sp, #8
   1a560:	bd10      	pop	{r4, pc}
   1a562:	e7fe      	b.n	1a562 <rpc_transport_ipc_init+0x26>
   1a564:	e9dd 1200 	ldrd	r1, r2, [sp]
   1a568:	4620      	mov	r0, r4
   1a56a:	f000 f9ef 	bl	1a94c <rpc_transport_ipc_rx_init>
   1a56e:	4602      	mov	r2, r0
   1a570:	4b0a      	ldr	r3, [pc, #40]	; (1a59c <rpc_transport_ipc_init+0x60>)
   1a572:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1a576:	c903      	ldmia	r1, {r0, r1}
   1a578:	e883 0003 	stmia.w	r3, {r0, r1}
   1a57c:	2a00      	cmp	r2, #0
   1a57e:	d1ed      	bne.n	1a55c <rpc_transport_ipc_init+0x20>
   1a580:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1a584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a586:	4906      	ldr	r1, [pc, #24]	; (1a5a0 <rpc_transport_ipc_init+0x64>)
   1a588:	015b      	lsls	r3, r3, #5
   1a58a:	b2db      	uxtb	r3, r3
   1a58c:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   1a590:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   1a594:	6048      	str	r0, [r1, #4]
   1a596:	4610      	mov	r0, r2
   1a598:	b002      	add	sp, #8
   1a59a:	bd10      	pop	{r4, pc}
   1a59c:	200217e0 	.word	0x200217e0
   1a5a0:	e000e100 	.word	0xe000e100

0001a5a4 <rpc_transport_ipc_shutdown>:
   1a5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5a8:	b08c      	sub	sp, #48	; 0x30
   1a5aa:	f000 fd05 	bl	1afb8 <rpc_transport_ipc_tx_suspend>
   1a5ae:	2200      	movs	r2, #0
   1a5b0:	2010      	movs	r0, #16
   1a5b2:	4b31      	ldr	r3, [pc, #196]	; (1a678 <rpc_transport_ipc_shutdown+0xd4>)
   1a5b4:	f04f 0c01 	mov.w	ip, #1
   1a5b8:	4c30      	ldr	r4, [pc, #192]	; (1a67c <rpc_transport_ipc_shutdown+0xd8>)
   1a5ba:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1a5be:	6821      	ldr	r1, [r4, #0]
   1a5c0:	2704      	movs	r7, #4
   1a5c2:	910a      	str	r1, [sp, #40]	; 0x28
   1a5c4:	492e      	ldr	r1, [pc, #184]	; (1a680 <rpc_transport_ipc_shutdown+0xdc>)
   1a5c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a5c8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a5cc:	680d      	ldr	r5, [r1, #0]
   1a5ce:	950b      	str	r5, [sp, #44]	; 0x2c
   1a5d0:	4d2c      	ldr	r5, [pc, #176]	; (1a684 <rpc_transport_ipc_shutdown+0xe0>)
   1a5d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a5d4:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1a5d8:	682d      	ldr	r5, [r5, #0]
   1a5da:	2640      	movs	r6, #64	; 0x40
   1a5dc:	9509      	str	r5, [sp, #36]	; 0x24
   1a5de:	4d2a      	ldr	r5, [pc, #168]	; (1a688 <rpc_transport_ipc_shutdown+0xe4>)
   1a5e0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1a5e4:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   1a5e8:	f8d5 e000 	ldr.w	lr, [r5]
   1a5ec:	2580      	movs	r5, #128	; 0x80
   1a5ee:	f8cd e020 	str.w	lr, [sp, #32]
   1a5f2:	f8dd e020 	ldr.w	lr, [sp, #32]
   1a5f6:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1a5fa:	f8d4 e000 	ldr.w	lr, [r4]
   1a5fe:	2405      	movs	r4, #5
   1a600:	f8cd e01c 	str.w	lr, [sp, #28]
   1a604:	f8df e08c 	ldr.w	lr, [pc, #140]	; 1a694 <rpc_transport_ipc_shutdown+0xf0>
   1a608:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1a60c:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   1a610:	f8de e000 	ldr.w	lr, [lr]
   1a614:	f8cd e018 	str.w	lr, [sp, #24]
   1a618:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1a698 <rpc_transport_ipc_shutdown+0xf4>
   1a61c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a620:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   1a624:	f8de e000 	ldr.w	lr, [lr]
   1a628:	f8cd e014 	str.w	lr, [sp, #20]
   1a62c:	f8dd e014 	ldr.w	lr, [sp, #20]
   1a630:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   1a634:	f8d1 c000 	ldr.w	ip, [r1]
   1a638:	f8cd c010 	str.w	ip, [sp, #16]
   1a63c:	f8dd c010 	ldr.w	ip, [sp, #16]
   1a640:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   1a644:	680f      	ldr	r7, [r1, #0]
   1a646:	9703      	str	r7, [sp, #12]
   1a648:	9f03      	ldr	r7, [sp, #12]
   1a64a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a64e:	6808      	ldr	r0, [r1, #0]
   1a650:	9002      	str	r0, [sp, #8]
   1a652:	9802      	ldr	r0, [sp, #8]
   1a654:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   1a658:	680e      	ldr	r6, [r1, #0]
   1a65a:	480c      	ldr	r0, [pc, #48]	; (1a68c <rpc_transport_ipc_shutdown+0xe8>)
   1a65c:	9601      	str	r6, [sp, #4]
   1a65e:	9e01      	ldr	r6, [sp, #4]
   1a660:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   1a664:	6809      	ldr	r1, [r1, #0]
   1a666:	4b0a      	ldr	r3, [pc, #40]	; (1a690 <rpc_transport_ipc_shutdown+0xec>)
   1a668:	9100      	str	r1, [sp, #0]
   1a66a:	9900      	ldr	r1, [sp, #0]
   1a66c:	8002      	strh	r2, [r0, #0]
   1a66e:	601c      	str	r4, [r3, #0]
   1a670:	b00c      	add	sp, #48	; 0x30
   1a672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a676:	bf00      	nop
   1a678:	4002a000 	.word	0x4002a000
   1a67c:	4002a5a0 	.word	0x4002a5a0
   1a680:	4002a308 	.word	0x4002a308
   1a684:	4002a590 	.word	0x4002a590
   1a688:	4002a598 	.word	0x4002a598
   1a68c:	200242c4 	.word	0x200242c4
   1a690:	200217f8 	.word	0x200217f8
   1a694:	4002a5a8 	.word	0x4002a5a8
   1a698:	4002a5ac 	.word	0x4002a5ac

0001a69c <bsd_os_application_irq_handler>:
   1a69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6a0:	f7fc fc02 	bl	16ea8 <bsd_os_application_irq_clear>
   1a6a4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1a77c <bsd_os_application_irq_handler+0xe0>
   1a6a8:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1a780 <bsd_os_application_irq_handler+0xe4>
   1a6ac:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1a784 <bsd_os_application_irq_handler+0xe8>
   1a6b0:	f108 0908 	add.w	r9, r8, #8
   1a6b4:	f858 7b04 	ldr.w	r7, [r8], #4
   1a6b8:	6839      	ldr	r1, [r7, #0]
   1a6ba:	b361      	cbz	r1, 1a716 <bsd_os_application_irq_handler+0x7a>
   1a6bc:	2400      	movs	r4, #0
   1a6be:	e002      	b.n	1a6c6 <bsd_os_application_irq_handler+0x2a>
   1a6c0:	3401      	adds	r4, #1
   1a6c2:	428c      	cmp	r4, r1
   1a6c4:	d227      	bcs.n	1a716 <bsd_os_application_irq_handler+0x7a>
   1a6c6:	00e6      	lsls	r6, r4, #3
   1a6c8:	19bd      	adds	r5, r7, r6
   1a6ca:	68aa      	ldr	r2, [r5, #8]
   1a6cc:	2a00      	cmp	r2, #0
   1a6ce:	d0f7      	beq.n	1a6c0 <bsd_os_application_irq_handler+0x24>
   1a6d0:	686a      	ldr	r2, [r5, #4]
   1a6d2:	b2d2      	uxtb	r2, r2
   1a6d4:	2a01      	cmp	r2, #1
   1a6d6:	d1f3      	bne.n	1a6c0 <bsd_os_application_irq_handler+0x24>
   1a6d8:	6868      	ldr	r0, [r5, #4]
   1a6da:	f8bb 2000 	ldrh.w	r2, [fp]
   1a6de:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1a6e2:	d1ed      	bne.n	1a6c0 <bsd_os_application_irq_handler+0x24>
   1a6e4:	68a8      	ldr	r0, [r5, #8]
   1a6e6:	6841      	ldr	r1, [r0, #4]
   1a6e8:	b2c9      	uxtb	r1, r1
   1a6ea:	2902      	cmp	r1, #2
   1a6ec:	d02c      	beq.n	1a748 <bsd_os_application_irq_handler+0xac>
   1a6ee:	2901      	cmp	r1, #1
   1a6f0:	d015      	beq.n	1a71e <bsd_os_application_irq_handler+0x82>
   1a6f2:	3604      	adds	r6, #4
   1a6f4:	59b9      	ldr	r1, [r7, r6]
   1a6f6:	3201      	adds	r2, #1
   1a6f8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1a6fc:	f041 0103 	orr.w	r1, r1, #3
   1a700:	51b9      	str	r1, [r7, r6]
   1a702:	f8ab 2000 	strh.w	r2, [fp]
   1a706:	f7fc fbc7 	bl	16e98 <bsd_os_application_irq_set>
   1a70a:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a70e:	3401      	adds	r4, #1
   1a710:	6839      	ldr	r1, [r7, #0]
   1a712:	428c      	cmp	r4, r1
   1a714:	d3d7      	bcc.n	1a6c6 <bsd_os_application_irq_handler+0x2a>
   1a716:	45c1      	cmp	r9, r8
   1a718:	d1cc      	bne.n	1a6b4 <bsd_os_application_irq_handler+0x18>
   1a71a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a71e:	6801      	ldr	r1, [r0, #0]
   1a720:	0c09      	lsrs	r1, r1, #16
   1a722:	f002 ff45 	bl	1d5b0 <rpc_handle_ctrl_message>
   1a726:	2801      	cmp	r0, #1
   1a728:	d014      	beq.n	1a754 <bsd_os_application_irq_handler+0xb8>
   1a72a:	d310      	bcc.n	1a74e <bsd_os_application_irq_handler+0xb2>
   1a72c:	2802      	cmp	r0, #2
   1a72e:	d007      	beq.n	1a740 <bsd_os_application_irq_handler+0xa4>
   1a730:	2203      	movs	r2, #3
   1a732:	4b11      	ldr	r3, [pc, #68]	; (1a778 <bsd_os_application_irq_handler+0xdc>)
   1a734:	4610      	mov	r0, r2
   1a736:	f8ca 2000 	str.w	r2, [sl]
   1a73a:	601a      	str	r2, [r3, #0]
   1a73c:	f005 fb6c 	bl	1fe18 <rpc_transport_ipc_fault_handler>
   1a740:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a744:	6839      	ldr	r1, [r7, #0]
   1a746:	e7bb      	b.n	1a6c0 <bsd_os_application_irq_handler+0x24>
   1a748:	f002 ff4a 	bl	1d5e0 <rpc_handle_data_message>
   1a74c:	e7eb      	b.n	1a726 <bsd_os_application_irq_handler+0x8a>
   1a74e:	f8bb 2000 	ldrh.w	r2, [fp]
   1a752:	e7ce      	b.n	1a6f2 <bsd_os_application_irq_handler+0x56>
   1a754:	686a      	ldr	r2, [r5, #4]
   1a756:	f8bb 1000 	ldrh.w	r1, [fp]
   1a75a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1a75e:	f042 0202 	orr.w	r2, r2, #2
   1a762:	606a      	str	r2, [r5, #4]
   1a764:	1c4a      	adds	r2, r1, #1
   1a766:	f8ab 2000 	strh.w	r2, [fp]
   1a76a:	f7fc fb95 	bl	16e98 <bsd_os_application_irq_set>
   1a76e:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a772:	6839      	ldr	r1, [r7, #0]
   1a774:	e7a4      	b.n	1a6c0 <bsd_os_application_irq_handler+0x24>
   1a776:	bf00      	nop
   1a778:	200217e8 	.word	0x200217e8
   1a77c:	200217f0 	.word	0x200217f0
   1a780:	200242c4 	.word	0x200242c4
   1a784:	200217f8 	.word	0x200217f8

0001a788 <IPC_IRQHandler>:
   1a788:	b570      	push	{r4, r5, r6, lr}
   1a78a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1a78e:	4d62      	ldr	r5, [pc, #392]	; (1a918 <IPC_IRQHandler+0x190>)
   1a790:	4c62      	ldr	r4, [pc, #392]	; (1a91c <IPC_IRQHandler+0x194>)
   1a792:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   1a796:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1a79a:	b086      	sub	sp, #24
   1a79c:	061b      	lsls	r3, r3, #24
   1a79e:	d50b      	bpl.n	1a7b8 <IPC_IRQHandler+0x30>
   1a7a0:	f7ff fd32 	bl	1a208 <ipc_trace_handle>
   1a7a4:	f7ff fea2 	bl	1a4ec <rpc_trace_coredump_in_progress>
   1a7a8:	2800      	cmp	r0, #0
   1a7aa:	d151      	bne.n	1a850 <IPC_IRQHandler+0xc8>
   1a7ac:	4b5c      	ldr	r3, [pc, #368]	; (1a920 <IPC_IRQHandler+0x198>)
   1a7ae:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1a7b2:	681b      	ldr	r3, [r3, #0]
   1a7b4:	9301      	str	r3, [sp, #4]
   1a7b6:	9b01      	ldr	r3, [sp, #4]
   1a7b8:	4b58      	ldr	r3, [pc, #352]	; (1a91c <IPC_IRQHandler+0x194>)
   1a7ba:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a7be:	f012 0201 	ands.w	r2, r2, #1
   1a7c2:	d11c      	bne.n	1a7fe <IPC_IRQHandler+0x76>
   1a7c4:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   1a7c8:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   1a7cc:	d145      	bne.n	1a85a <IPC_IRQHandler+0xd2>
   1a7ce:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a7d2:	0750      	lsls	r0, r2, #29
   1a7d4:	d50c      	bpl.n	1a7f0 <IPC_IRQHandler+0x68>
   1a7d6:	4a53      	ldr	r2, [pc, #332]	; (1a924 <IPC_IRQHandler+0x19c>)
   1a7d8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1a7dc:	6812      	ldr	r2, [r2, #0]
   1a7de:	4b52      	ldr	r3, [pc, #328]	; (1a928 <IPC_IRQHandler+0x1a0>)
   1a7e0:	9204      	str	r2, [sp, #16]
   1a7e2:	9a04      	ldr	r2, [sp, #16]
   1a7e4:	681a      	ldr	r2, [r3, #0]
   1a7e6:	2a02      	cmp	r2, #2
   1a7e8:	d079      	beq.n	1a8de <IPC_IRQHandler+0x156>
   1a7ea:	681a      	ldr	r2, [r3, #0]
   1a7ec:	2a01      	cmp	r2, #1
   1a7ee:	d05b      	beq.n	1a8a8 <IPC_IRQHandler+0x120>
   1a7f0:	4b4a      	ldr	r3, [pc, #296]	; (1a91c <IPC_IRQHandler+0x194>)
   1a7f2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a7f6:	06d2      	lsls	r2, r2, #27
   1a7f8:	d41e      	bmi.n	1a838 <IPC_IRQHandler+0xb0>
   1a7fa:	b006      	add	sp, #24
   1a7fc:	bd70      	pop	{r4, r5, r6, pc}
   1a7fe:	2000      	movs	r0, #0
   1a800:	f248 0202 	movw	r2, #32770	; 0x8002
   1a804:	4949      	ldr	r1, [pc, #292]	; (1a92c <IPC_IRQHandler+0x1a4>)
   1a806:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1a80a:	6809      	ldr	r1, [r1, #0]
   1a80c:	9102      	str	r1, [sp, #8]
   1a80e:	9902      	ldr	r1, [sp, #8]
   1a810:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1a814:	4293      	cmp	r3, r2
   1a816:	d06b      	beq.n	1a8f0 <IPC_IRQHandler+0x168>
   1a818:	d82a      	bhi.n	1a870 <IPC_IRQHandler+0xe8>
   1a81a:	2b00      	cmp	r3, #0
   1a81c:	d062      	beq.n	1a8e4 <IPC_IRQHandler+0x15c>
   1a81e:	2b02      	cmp	r3, #2
   1a820:	d937      	bls.n	1a892 <IPC_IRQHandler+0x10a>
   1a822:	f248 0201 	movw	r2, #32769	; 0x8001
   1a826:	4293      	cmp	r3, r2
   1a828:	d15c      	bne.n	1a8e4 <IPC_IRQHandler+0x15c>
   1a82a:	2003      	movs	r0, #3
   1a82c:	2207      	movs	r2, #7
   1a82e:	493e      	ldr	r1, [pc, #248]	; (1a928 <IPC_IRQHandler+0x1a0>)
   1a830:	4b3f      	ldr	r3, [pc, #252]	; (1a930 <IPC_IRQHandler+0x1a8>)
   1a832:	6008      	str	r0, [r1, #0]
   1a834:	601a      	str	r2, [r3, #0]
   1a836:	e7e0      	b.n	1a7fa <IPC_IRQHandler+0x72>
   1a838:	2100      	movs	r1, #0
   1a83a:	4a3e      	ldr	r2, [pc, #248]	; (1a934 <IPC_IRQHandler+0x1ac>)
   1a83c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   1a840:	6813      	ldr	r3, [r2, #0]
   1a842:	9305      	str	r3, [sp, #20]
   1a844:	9b05      	ldr	r3, [sp, #20]
   1a846:	b006      	add	sp, #24
   1a848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a84c:	f7fc bb24 	b.w	16e98 <bsd_os_application_irq_set>
   1a850:	23e0      	movs	r3, #224	; 0xe0
   1a852:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1a856:	606e      	str	r6, [r5, #4]
   1a858:	e7cf      	b.n	1a7fa <IPC_IRQHandler+0x72>
   1a85a:	4937      	ldr	r1, [pc, #220]	; (1a938 <IPC_IRQHandler+0x1b0>)
   1a85c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1a860:	680b      	ldr	r3, [r1, #0]
   1a862:	9303      	str	r3, [sp, #12]
   1a864:	9b03      	ldr	r3, [sp, #12]
   1a866:	b006      	add	sp, #24
   1a868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a86c:	f7ff be9a 	b.w	1a5a4 <rpc_transport_ipc_shutdown>
   1a870:	4a32      	ldr	r2, [pc, #200]	; (1a93c <IPC_IRQHandler+0x1b4>)
   1a872:	4293      	cmp	r3, r2
   1a874:	d82a      	bhi.n	1a8cc <IPC_IRQHandler+0x144>
   1a876:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1a87a:	d82a      	bhi.n	1a8d2 <IPC_IRQHandler+0x14a>
   1a87c:	f248 0203 	movw	r2, #32771	; 0x8003
   1a880:	4293      	cmp	r3, r2
   1a882:	d12f      	bne.n	1a8e4 <IPC_IRQHandler+0x15c>
   1a884:	2003      	movs	r0, #3
   1a886:	2204      	movs	r2, #4
   1a888:	4927      	ldr	r1, [pc, #156]	; (1a928 <IPC_IRQHandler+0x1a0>)
   1a88a:	4b29      	ldr	r3, [pc, #164]	; (1a930 <IPC_IRQHandler+0x1a8>)
   1a88c:	6008      	str	r0, [r1, #0]
   1a88e:	601a      	str	r2, [r3, #0]
   1a890:	e7b3      	b.n	1a7fa <IPC_IRQHandler+0x72>
   1a892:	2303      	movs	r3, #3
   1a894:	4618      	mov	r0, r3
   1a896:	4924      	ldr	r1, [pc, #144]	; (1a928 <IPC_IRQHandler+0x1a0>)
   1a898:	4a25      	ldr	r2, [pc, #148]	; (1a930 <IPC_IRQHandler+0x1a8>)
   1a89a:	600b      	str	r3, [r1, #0]
   1a89c:	6013      	str	r3, [r2, #0]
   1a89e:	b006      	add	sp, #24
   1a8a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a8a4:	f005 bab8 	b.w	1fe18 <rpc_transport_ipc_fault_handler>
   1a8a8:	4a25      	ldr	r2, [pc, #148]	; (1a940 <IPC_IRQHandler+0x1b8>)
   1a8aa:	4826      	ldr	r0, [pc, #152]	; (1a944 <IPC_IRQHandler+0x1bc>)
   1a8ac:	6811      	ldr	r1, [r2, #0]
   1a8ae:	688a      	ldr	r2, [r1, #8]
   1a8b0:	6002      	str	r2, [r0, #0]
   1a8b2:	6849      	ldr	r1, [r1, #4]
   1a8b4:	6041      	str	r1, [r0, #4]
   1a8b6:	b312      	cbz	r2, 1a8fe <IPC_IRQHandler+0x176>
   1a8b8:	b309      	cbz	r1, 1a8fe <IPC_IRQHandler+0x176>
   1a8ba:	6812      	ldr	r2, [r2, #0]
   1a8bc:	2a10      	cmp	r2, #16
   1a8be:	d824      	bhi.n	1a90a <IPC_IRQHandler+0x182>
   1a8c0:	680a      	ldr	r2, [r1, #0]
   1a8c2:	2a10      	cmp	r2, #16
   1a8c4:	d821      	bhi.n	1a90a <IPC_IRQHandler+0x182>
   1a8c6:	2202      	movs	r2, #2
   1a8c8:	601a      	str	r2, [r3, #0]
   1a8ca:	e791      	b.n	1a7f0 <IPC_IRQHandler+0x68>
   1a8cc:	4a1e      	ldr	r2, [pc, #120]	; (1a948 <IPC_IRQHandler+0x1c0>)
   1a8ce:	4293      	cmp	r3, r2
   1a8d0:	d108      	bne.n	1a8e4 <IPC_IRQHandler+0x15c>
   1a8d2:	2003      	movs	r0, #3
   1a8d4:	4914      	ldr	r1, [pc, #80]	; (1a928 <IPC_IRQHandler+0x1a0>)
   1a8d6:	4a16      	ldr	r2, [pc, #88]	; (1a930 <IPC_IRQHandler+0x1a8>)
   1a8d8:	6008      	str	r0, [r1, #0]
   1a8da:	6013      	str	r3, [r2, #0]
   1a8dc:	e78d      	b.n	1a7fa <IPC_IRQHandler+0x72>
   1a8de:	f7fc fadb 	bl	16e98 <bsd_os_application_irq_set>
   1a8e2:	e785      	b.n	1a7f0 <IPC_IRQHandler+0x68>
   1a8e4:	2303      	movs	r3, #3
   1a8e6:	4910      	ldr	r1, [pc, #64]	; (1a928 <IPC_IRQHandler+0x1a0>)
   1a8e8:	4a11      	ldr	r2, [pc, #68]	; (1a930 <IPC_IRQHandler+0x1a8>)
   1a8ea:	600b      	str	r3, [r1, #0]
   1a8ec:	6013      	str	r3, [r2, #0]
   1a8ee:	e784      	b.n	1a7fa <IPC_IRQHandler+0x72>
   1a8f0:	2003      	movs	r0, #3
   1a8f2:	2206      	movs	r2, #6
   1a8f4:	490c      	ldr	r1, [pc, #48]	; (1a928 <IPC_IRQHandler+0x1a0>)
   1a8f6:	4b0e      	ldr	r3, [pc, #56]	; (1a930 <IPC_IRQHandler+0x1a8>)
   1a8f8:	6008      	str	r0, [r1, #0]
   1a8fa:	601a      	str	r2, [r3, #0]
   1a8fc:	e77d      	b.n	1a7fa <IPC_IRQHandler+0x72>
   1a8fe:	2003      	movs	r0, #3
   1a900:	2110      	movs	r1, #16
   1a902:	4a0b      	ldr	r2, [pc, #44]	; (1a930 <IPC_IRQHandler+0x1a8>)
   1a904:	6018      	str	r0, [r3, #0]
   1a906:	6011      	str	r1, [r2, #0]
   1a908:	e772      	b.n	1a7f0 <IPC_IRQHandler+0x68>
   1a90a:	2003      	movs	r0, #3
   1a90c:	f24c 0106 	movw	r1, #49158	; 0xc006
   1a910:	4a07      	ldr	r2, [pc, #28]	; (1a930 <IPC_IRQHandler+0x1a8>)
   1a912:	6018      	str	r0, [r3, #0]
   1a914:	6011      	str	r1, [r2, #0]
   1a916:	e76b      	b.n	1a7f0 <IPC_IRQHandler+0x68>
   1a918:	e000e100 	.word	0xe000e100
   1a91c:	4002a000 	.word	0x4002a000
   1a920:	4002a11c 	.word	0x4002a11c
   1a924:	4002a108 	.word	0x4002a108
   1a928:	200217f8 	.word	0x200217f8
   1a92c:	4002a100 	.word	0x4002a100
   1a930:	200217e8 	.word	0x200217e8
   1a934:	4002a110 	.word	0x4002a110
   1a938:	4002a118 	.word	0x4002a118
   1a93c:	04400004 	.word	0x04400004
   1a940:	200217fc 	.word	0x200217fc
   1a944:	200217f0 	.word	0x200217f0
   1a948:	05500001 	.word	0x05500001

0001a94c <rpc_transport_ipc_rx_init>:
   1a94c:	2800      	cmp	r0, #0
   1a94e:	f000 8109 	beq.w	1ab64 <rpc_transport_ipc_rx_init+0x218>
   1a952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a956:	6805      	ldr	r5, [r0, #0]
   1a958:	b097      	sub	sp, #92	; 0x5c
   1a95a:	2d00      	cmp	r5, #0
   1a95c:	f000 80f8 	beq.w	1ab50 <rpc_transport_ipc_rx_init+0x204>
   1a960:	6883      	ldr	r3, [r0, #8]
   1a962:	2b00      	cmp	r3, #0
   1a964:	f000 80f4 	beq.w	1ab50 <rpc_transport_ipc_rx_init+0x204>
   1a968:	6906      	ldr	r6, [r0, #16]
   1a96a:	2e00      	cmp	r6, #0
   1a96c:	f000 80f0 	beq.w	1ab50 <rpc_transport_ipc_rx_init+0x204>
   1a970:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1a972:	2c00      	cmp	r4, #0
   1a974:	f000 80ec 	beq.w	1ab50 <rpc_transport_ipc_rx_init+0x204>
   1a978:	6844      	ldr	r4, [r0, #4]
   1a97a:	2c1b      	cmp	r4, #27
   1a97c:	f240 80ed 	bls.w	1ab5a <rpc_transport_ipc_rx_init+0x20e>
   1a980:	68c4      	ldr	r4, [r0, #12]
   1a982:	2c0b      	cmp	r4, #11
   1a984:	f240 80e9 	bls.w	1ab5a <rpc_transport_ipc_rx_init+0x20e>
   1a988:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1a98c:	f1be 0f17 	cmp.w	lr, #23
   1a990:	f240 80e3 	bls.w	1ab5a <rpc_transport_ipc_rx_init+0x20e>
   1a994:	4604      	mov	r4, r0
   1a996:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 1ab8c <rpc_transport_ipc_rx_init+0x240>
   1a99a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   1a99c:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 1ab90 <rpc_transport_ipc_rx_init+0x244>
   1a9a0:	4690      	mov	r8, r2
   1a9a2:	9101      	str	r1, [sp, #4]
   1a9a4:	4672      	mov	r2, lr
   1a9a6:	2100      	movs	r1, #0
   1a9a8:	4630      	mov	r0, r6
   1a9aa:	f8ca 7000 	str.w	r7, [sl]
   1a9ae:	f8cb 3000 	str.w	r3, [fp]
   1a9b2:	f00b fd41 	bl	26438 <memset>
   1a9b6:	69e3      	ldr	r3, [r4, #28]
   1a9b8:	4630      	mov	r0, r6
   1a9ba:	6033      	str	r3, [r6, #0]
   1a9bc:	69a3      	ldr	r3, [r4, #24]
   1a9be:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 1ab94 <rpc_transport_ipc_rx_init+0x248>
   1a9c2:	6073      	str	r3, [r6, #4]
   1a9c4:	f7ff fb34 	bl	1a030 <ipc_trace_init>
   1a9c8:	2200      	movs	r2, #0
   1a9ca:	2001      	movs	r0, #1
   1a9cc:	4b67      	ldr	r3, [pc, #412]	; (1ab6c <rpc_transport_ipc_rx_init+0x220>)
   1a9ce:	4968      	ldr	r1, [pc, #416]	; (1ab70 <rpc_transport_ipc_rx_init+0x224>)
   1a9d0:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   1a9d4:	6809      	ldr	r1, [r1, #0]
   1a9d6:	f04f 0c80 	mov.w	ip, #128	; 0x80
   1a9da:	9106      	str	r1, [sp, #24]
   1a9dc:	4965      	ldr	r1, [pc, #404]	; (1ab74 <rpc_transport_ipc_rx_init+0x228>)
   1a9de:	f8dd e018 	ldr.w	lr, [sp, #24]
   1a9e2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   1a9e6:	6809      	ldr	r1, [r1, #0]
   1a9e8:	702a      	strb	r2, [r5, #0]
   1a9ea:	9105      	str	r1, [sp, #20]
   1a9ec:	706a      	strb	r2, [r5, #1]
   1a9ee:	70ea      	strb	r2, [r5, #3]
   1a9f0:	70a8      	strb	r0, [r5, #2]
   1a9f2:	9905      	ldr	r1, [sp, #20]
   1a9f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1a9f6:	f8db e000 	ldr.w	lr, [fp]
   1a9fa:	6069      	str	r1, [r5, #4]
   1a9fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1a9fe:	61ae      	str	r6, [r5, #24]
   1aa00:	60a9      	str	r1, [r5, #8]
   1aa02:	9901      	ldr	r1, [sp, #4]
   1aa04:	f8c5 e014 	str.w	lr, [r5, #20]
   1aa08:	6129      	str	r1, [r5, #16]
   1aa0a:	495b      	ldr	r1, [pc, #364]	; (1ab78 <rpc_transport_ipc_rx_init+0x22c>)
   1aa0c:	f8c5 800c 	str.w	r8, [r5, #12]
   1aa10:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   1aa14:	680c      	ldr	r4, [r1, #0]
   1aa16:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1aa1a:	9407      	str	r4, [sp, #28]
   1aa1c:	9c07      	ldr	r4, [sp, #28]
   1aa1e:	2404      	movs	r4, #4
   1aa20:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   1aa24:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1aa28:	4f54      	ldr	r7, [pc, #336]	; (1ab7c <rpc_transport_ipc_rx_init+0x230>)
   1aa2a:	9408      	str	r4, [sp, #32]
   1aa2c:	9c08      	ldr	r4, [sp, #32]
   1aa2e:	2410      	movs	r4, #16
   1aa30:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1aa34:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1aa38:	9409      	str	r4, [sp, #36]	; 0x24
   1aa3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1aa3c:	2440      	movs	r4, #64	; 0x40
   1aa3e:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1aa42:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1aa46:	940a      	str	r4, [sp, #40]	; 0x28
   1aa48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1aa4a:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   1aa4e:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   1aa52:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   1aa56:	940b      	str	r4, [sp, #44]	; 0x2c
   1aa58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1aa5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1aa5e:	680c      	ldr	r4, [r1, #0]
   1aa60:	940c      	str	r4, [sp, #48]	; 0x30
   1aa62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1aa64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1aa68:	688c      	ldr	r4, [r1, #8]
   1aa6a:	940d      	str	r4, [sp, #52]	; 0x34
   1aa6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1aa6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1aa72:	690c      	ldr	r4, [r1, #16]
   1aa74:	940e      	str	r4, [sp, #56]	; 0x38
   1aa76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1aa78:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1aa7c:	698c      	ldr	r4, [r1, #24]
   1aa7e:	940f      	str	r4, [sp, #60]	; 0x3c
   1aa80:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1aa82:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1aa86:	69cc      	ldr	r4, [r1, #28]
   1aa88:	f501 7101 	add.w	r1, r1, #516	; 0x204
   1aa8c:	9410      	str	r4, [sp, #64]	; 0x40
   1aa8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1aa90:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1aa94:	4304      	orrs	r4, r0
   1aa96:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1aa9a:	680d      	ldr	r5, [r1, #0]
   1aa9c:	4c38      	ldr	r4, [pc, #224]	; (1ab80 <rpc_transport_ipc_rx_init+0x234>)
   1aa9e:	9511      	str	r5, [sp, #68]	; 0x44
   1aaa0:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1aaa2:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aaa6:	4d37      	ldr	r5, [pc, #220]	; (1ab84 <rpc_transport_ipc_rx_init+0x238>)
   1aaa8:	f046 0604 	orr.w	r6, r6, #4
   1aaac:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aab0:	680e      	ldr	r6, [r1, #0]
   1aab2:	9612      	str	r6, [sp, #72]	; 0x48
   1aab4:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1aab6:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aaba:	f046 0610 	orr.w	r6, r6, #16
   1aabe:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aac2:	680e      	ldr	r6, [r1, #0]
   1aac4:	9613      	str	r6, [sp, #76]	; 0x4c
   1aac6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1aac8:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aacc:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   1aad0:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aad4:	680e      	ldr	r6, [r1, #0]
   1aad6:	9614      	str	r6, [sp, #80]	; 0x50
   1aad8:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1aada:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aade:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   1aae2:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aae6:	f8da 3000 	ldr.w	r3, [sl]
   1aaea:	6809      	ldr	r1, [r1, #0]
   1aaec:	015b      	lsls	r3, r3, #5
   1aaee:	9115      	str	r1, [sp, #84]	; 0x54
   1aaf0:	b2db      	uxtb	r3, r3
   1aaf2:	9915      	ldr	r1, [sp, #84]	; 0x54
   1aaf4:	6022      	str	r2, [r4, #0]
   1aaf6:	f8c9 0000 	str.w	r0, [r9]
   1aafa:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1aafe:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   1ab02:	f8c5 c004 	str.w	ip, [r5, #4]
   1ab06:	9204      	str	r2, [sp, #16]
   1ab08:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   1ab0c:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   1ab10:	9304      	str	r3, [sp, #16]
   1ab12:	9b04      	ldr	r3, [sp, #16]
   1ab14:	f8d9 3000 	ldr.w	r3, [r9]
   1ab18:	4283      	cmp	r3, r0
   1ab1a:	d10f      	bne.n	1ab3c <rpc_transport_ipc_rx_init+0x1f0>
   1ab1c:	2614      	movs	r6, #20
   1ab1e:	4d1a      	ldr	r5, [pc, #104]	; (1ab88 <rpc_transport_ipc_rx_init+0x23c>)
   1ab20:	e000      	b.n	1ab24 <rpc_transport_ipc_rx_init+0x1d8>
   1ab22:	b15d      	cbz	r5, 1ab3c <rpc_transport_ipc_rx_init+0x1f0>
   1ab24:	a903      	add	r1, sp, #12
   1ab26:	2000      	movs	r0, #0
   1ab28:	9603      	str	r6, [sp, #12]
   1ab2a:	f7fb ff71 	bl	16a10 <bsd_os_timedwait>
   1ab2e:	9b03      	ldr	r3, [sp, #12]
   1ab30:	f8d9 2000 	ldr.w	r2, [r9]
   1ab34:	3b14      	subs	r3, #20
   1ab36:	2a01      	cmp	r2, #1
   1ab38:	441d      	add	r5, r3
   1ab3a:	d0f2      	beq.n	1ab22 <rpc_transport_ipc_rx_init+0x1d6>
   1ab3c:	f8d9 3000 	ldr.w	r3, [r9]
   1ab40:	2b01      	cmp	r3, #1
   1ab42:	bf0a      	itet	eq
   1ab44:	200d      	moveq	r0, #13
   1ab46:	6820      	ldrne	r0, [r4, #0]
   1ab48:	6020      	streq	r0, [r4, #0]
   1ab4a:	b017      	add	sp, #92	; 0x5c
   1ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab50:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ab54:	b017      	add	sp, #92	; 0x5c
   1ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab5a:	f24c 0009 	movw	r0, #49161	; 0xc009
   1ab5e:	b017      	add	sp, #92	; 0x5c
   1ab60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab64:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ab68:	4770      	bx	lr
   1ab6a:	bf00      	nop
   1ab6c:	4002a000 	.word	0x4002a000
   1ab70:	4002a610 	.word	0x4002a610
   1ab74:	4002a614 	.word	0x4002a614
   1ab78:	4002a590 	.word	0x4002a590
   1ab7c:	40005000 	.word	0x40005000
   1ab80:	200217e8 	.word	0x200217e8
   1ab84:	e000e100 	.word	0xe000e100
   1ab88:	000249f0 	.word	0x000249f0
   1ab8c:	200217ec 	.word	0x200217ec
   1ab90:	200217fc 	.word	0x200217fc
   1ab94:	200217f8 	.word	0x200217f8

0001ab98 <rpc_transport_ipc_msg_free>:
   1ab98:	b470      	push	{r4, r5, r6}
   1ab9a:	4e17      	ldr	r6, [pc, #92]	; (1abf8 <rpc_transport_ipc_msg_free+0x60>)
   1ab9c:	6831      	ldr	r1, [r6, #0]
   1ab9e:	680d      	ldr	r5, [r1, #0]
   1aba0:	b1ad      	cbz	r5, 1abce <rpc_transport_ipc_msg_free+0x36>
   1aba2:	688b      	ldr	r3, [r1, #8]
   1aba4:	4283      	cmp	r3, r0
   1aba6:	d024      	beq.n	1abf2 <rpc_transport_ipc_msg_free+0x5a>
   1aba8:	2300      	movs	r3, #0
   1abaa:	3301      	adds	r3, #1
   1abac:	00da      	lsls	r2, r3, #3
   1abae:	429d      	cmp	r5, r3
   1abb0:	eb01 0402 	add.w	r4, r1, r2
   1abb4:	d00b      	beq.n	1abce <rpc_transport_ipc_msg_free+0x36>
   1abb6:	68a4      	ldr	r4, [r4, #8]
   1abb8:	42a0      	cmp	r0, r4
   1abba:	d1f6      	bne.n	1abaa <rpc_transport_ipc_msg_free+0x12>
   1abbc:	3204      	adds	r2, #4
   1abbe:	588b      	ldr	r3, [r1, r2]
   1abc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1abc4:	f043 0303 	orr.w	r3, r3, #3
   1abc8:	508b      	str	r3, [r1, r2]
   1abca:	bc70      	pop	{r4, r5, r6}
   1abcc:	4770      	bx	lr
   1abce:	6871      	ldr	r1, [r6, #4]
   1abd0:	680d      	ldr	r5, [r1, #0]
   1abd2:	2d00      	cmp	r5, #0
   1abd4:	d0f9      	beq.n	1abca <rpc_transport_ipc_msg_free+0x32>
   1abd6:	688b      	ldr	r3, [r1, #8]
   1abd8:	4283      	cmp	r3, r0
   1abda:	d00a      	beq.n	1abf2 <rpc_transport_ipc_msg_free+0x5a>
   1abdc:	2300      	movs	r3, #0
   1abde:	3301      	adds	r3, #1
   1abe0:	00da      	lsls	r2, r3, #3
   1abe2:	429d      	cmp	r5, r3
   1abe4:	eb01 0402 	add.w	r4, r1, r2
   1abe8:	d0ef      	beq.n	1abca <rpc_transport_ipc_msg_free+0x32>
   1abea:	68a4      	ldr	r4, [r4, #8]
   1abec:	42a0      	cmp	r0, r4
   1abee:	d1f6      	bne.n	1abde <rpc_transport_ipc_msg_free+0x46>
   1abf0:	e7e4      	b.n	1abbc <rpc_transport_ipc_msg_free+0x24>
   1abf2:	2204      	movs	r2, #4
   1abf4:	e7e3      	b.n	1abbe <rpc_transport_ipc_msg_free+0x26>
   1abf6:	bf00      	nop
   1abf8:	200217f0 	.word	0x200217f0

0001abfc <rpc_transport_ipc_tx_init>:
   1abfc:	2800      	cmp	r0, #0
   1abfe:	f000 80b8 	beq.w	1ad72 <rpc_transport_ipc_tx_init+0x176>
   1ac02:	2900      	cmp	r1, #0
   1ac04:	f000 80b5 	beq.w	1ad72 <rpc_transport_ipc_tx_init+0x176>
   1ac08:	2a00      	cmp	r2, #0
   1ac0a:	f000 80b2 	beq.w	1ad72 <rpc_transport_ipc_tx_init+0x176>
   1ac0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac12:	6a04      	ldr	r4, [r0, #32]
   1ac14:	b085      	sub	sp, #20
   1ac16:	2c00      	cmp	r4, #0
   1ac18:	f000 80a6 	beq.w	1ad68 <rpc_transport_ipc_tx_init+0x16c>
   1ac1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1ac1e:	2800      	cmp	r0, #0
   1ac20:	f000 80a2 	beq.w	1ad68 <rpc_transport_ipc_tx_init+0x16c>
   1ac24:	f642 4587 	movw	r5, #11399	; 0x2c87
   1ac28:	f04f 0a00 	mov.w	sl, #0
   1ac2c:	4e55      	ldr	r6, [pc, #340]	; (1ad84 <rpc_transport_ipc_tx_init+0x188>)
   1ac2e:	42a8      	cmp	r0, r5
   1ac30:	f886 a000 	strb.w	sl, [r6]
   1ac34:	f240 80a0 	bls.w	1ad78 <rpc_transport_ipc_tx_init+0x17c>
   1ac38:	2708      	movs	r7, #8
   1ac3a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1adbc <rpc_transport_ipc_tx_init+0x1c0>
   1ac3e:	4620      	mov	r0, r4
   1ac40:	4616      	mov	r6, r2
   1ac42:	460d      	mov	r5, r1
   1ac44:	2244      	movs	r2, #68	; 0x44
   1ac46:	4651      	mov	r1, sl
   1ac48:	f8c9 4000 	str.w	r4, [r9]
   1ac4c:	f00b fbf4 	bl	26438 <memset>
   1ac50:	f8d9 2000 	ldr.w	r2, [r9]
   1ac54:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1ac58:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1adc0 <rpc_transport_ipc_tx_init+0x1c4>
   1ac5c:	f882 a001 	strb.w	sl, [r2, #1]
   1ac60:	f882 a002 	strb.w	sl, [r2, #2]
   1ac64:	f882 a003 	strb.w	sl, [r2, #3]
   1ac68:	7017      	strb	r7, [r2, #0]
   1ac6a:	4618      	mov	r0, r3
   1ac6c:	2244      	movs	r2, #68	; 0x44
   1ac6e:	4651      	mov	r1, sl
   1ac70:	f8c8 3000 	str.w	r3, [r8]
   1ac74:	f00b fbe0 	bl	26438 <memset>
   1ac78:	f8d8 2000 	ldr.w	r2, [r8]
   1ac7c:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1ac80:	f8df b140 	ldr.w	fp, [pc, #320]	; 1adc4 <rpc_transport_ipc_tx_init+0x1c8>
   1ac84:	7017      	strb	r7, [r2, #0]
   1ac86:	f882 a001 	strb.w	sl, [r2, #1]
   1ac8a:	f882 a002 	strb.w	sl, [r2, #2]
   1ac8e:	f882 a003 	strb.w	sl, [r2, #3]
   1ac92:	4618      	mov	r0, r3
   1ac94:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ac98:	4651      	mov	r1, sl
   1ac9a:	f8cb 3000 	str.w	r3, [fp]
   1ac9e:	f00b fbcb 	bl	26438 <memset>
   1aca2:	4b39      	ldr	r3, [pc, #228]	; (1ad88 <rpc_transport_ipc_tx_init+0x18c>)
   1aca4:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   1aca8:	f8c3 c000 	str.w	ip, [r3]
   1acac:	4651      	mov	r1, sl
   1acae:	4660      	mov	r0, ip
   1acb0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1acb4:	f00b fbc0 	bl	26438 <memset>
   1acb8:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   1acbc:	2106      	movs	r1, #6
   1acbe:	f04f 0e01 	mov.w	lr, #1
   1acc2:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1acc6:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1acca:	4b30      	ldr	r3, [pc, #192]	; (1ad8c <rpc_transport_ipc_tx_init+0x190>)
   1accc:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   1acd0:	605c      	str	r4, [r3, #4]
   1acd2:	4c2f      	ldr	r4, [pc, #188]	; (1ad90 <rpc_transport_ipc_tx_init+0x194>)
   1acd4:	f8c3 c008 	str.w	ip, [r3, #8]
   1acd8:	8199      	strh	r1, [r3, #12]
   1acda:	f8a3 e000 	strh.w	lr, [r3]
   1acde:	4619      	mov	r1, r3
   1ace0:	611c      	str	r4, [r3, #16]
   1ace2:	4b2c      	ldr	r3, [pc, #176]	; (1ad94 <rpc_transport_ipc_tx_init+0x198>)
   1ace4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 1adc8 <rpc_transport_ipc_tx_init+0x1cc>
   1ace8:	6120      	str	r0, [r4, #16]
   1acea:	482b      	ldr	r0, [pc, #172]	; (1ad98 <rpc_transport_ipc_tx_init+0x19c>)
   1acec:	6063      	str	r3, [r4, #4]
   1acee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1acf2:	60a0      	str	r0, [r4, #8]
   1acf4:	f8c4 c000 	str.w	ip, [r4]
   1acf8:	4828      	ldr	r0, [pc, #160]	; (1ad9c <rpc_transport_ipc_tx_init+0x1a0>)
   1acfa:	60e3      	str	r3, [r4, #12]
   1acfc:	6162      	str	r2, [r4, #20]
   1acfe:	f006 f9a5 	bl	2104c <nrf_mem_register>
   1ad02:	2800      	cmp	r0, #0
   1ad04:	d132      	bne.n	1ad6c <rpc_transport_ipc_tx_init+0x170>
   1ad06:	f04f 0c02 	mov.w	ip, #2
   1ad0a:	2420      	movs	r4, #32
   1ad0c:	f8d9 1000 	ldr.w	r1, [r9]
   1ad10:	f8db 2000 	ldr.w	r2, [fp]
   1ad14:	6029      	str	r1, [r5, #0]
   1ad16:	4b1c      	ldr	r3, [pc, #112]	; (1ad88 <rpc_transport_ipc_tx_init+0x18c>)
   1ad18:	f8d8 1000 	ldr.w	r1, [r8]
   1ad1c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 1adcc <rpc_transport_ipc_tx_init+0x1d0>
   1ad20:	4d1f      	ldr	r5, [pc, #124]	; (1ada0 <rpc_transport_ipc_tx_init+0x1a4>)
   1ad22:	6031      	str	r1, [r6, #0]
   1ad24:	f8ce 2000 	str.w	r2, [lr]
   1ad28:	681b      	ldr	r3, [r3, #0]
   1ad2a:	491e      	ldr	r1, [pc, #120]	; (1ada4 <rpc_transport_ipc_tx_init+0x1a8>)
   1ad2c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   1ad30:	602a      	str	r2, [r5, #0]
   1ad32:	4e1d      	ldr	r6, [pc, #116]	; (1ada8 <rpc_transport_ipc_tx_init+0x1ac>)
   1ad34:	4a1d      	ldr	r2, [pc, #116]	; (1adac <rpc_transport_ipc_tx_init+0x1b0>)
   1ad36:	4d1e      	ldr	r5, [pc, #120]	; (1adb0 <rpc_transport_ipc_tx_init+0x1b4>)
   1ad38:	600b      	str	r3, [r1, #0]
   1ad3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1ad3e:	491d      	ldr	r1, [pc, #116]	; (1adb4 <rpc_transport_ipc_tx_init+0x1b8>)
   1ad40:	6033      	str	r3, [r6, #0]
   1ad42:	8028      	strh	r0, [r5, #0]
   1ad44:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1ad48:	6809      	ldr	r1, [r1, #0]
   1ad4a:	4b1b      	ldr	r3, [pc, #108]	; (1adb8 <rpc_transport_ipc_tx_init+0x1bc>)
   1ad4c:	9103      	str	r1, [sp, #12]
   1ad4e:	9903      	ldr	r1, [sp, #12]
   1ad50:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   1ad54:	6819      	ldr	r1, [r3, #0]
   1ad56:	443b      	add	r3, r7
   1ad58:	9102      	str	r1, [sp, #8]
   1ad5a:	9902      	ldr	r1, [sp, #8]
   1ad5c:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   1ad60:	681b      	ldr	r3, [r3, #0]
   1ad62:	9301      	str	r3, [sp, #4]
   1ad64:	9b01      	ldr	r3, [sp, #4]
   1ad66:	e001      	b.n	1ad6c <rpc_transport_ipc_tx_init+0x170>
   1ad68:	f24c 0007 	movw	r0, #49159	; 0xc007
   1ad6c:	b005      	add	sp, #20
   1ad6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad72:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ad76:	4770      	bx	lr
   1ad78:	f24c 0004 	movw	r0, #49156	; 0xc004
   1ad7c:	b005      	add	sp, #20
   1ad7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad82:	bf00      	nop
   1ad84:	20026298 	.word	0x20026298
   1ad88:	20021828 	.word	0x20021828
   1ad8c:	20021814 	.word	0x20021814
   1ad90:	20021838 	.word	0x20021838
   1ad94:	00040080 	.word	0x00040080
   1ad98:	00040100 	.word	0x00040100
   1ad9c:	20021800 	.word	0x20021800
   1ada0:	2002180c 	.word	0x2002180c
   1ada4:	20021808 	.word	0x20021808
   1ada8:	20021804 	.word	0x20021804
   1adac:	4002a000 	.word	0x4002a000
   1adb0:	200242c6 	.word	0x200242c6
   1adb4:	4002a514 	.word	0x4002a514
   1adb8:	4002a51c 	.word	0x4002a51c
   1adbc:	20021834 	.word	0x20021834
   1adc0:	2002182c 	.word	0x2002182c
   1adc4:	20021830 	.word	0x20021830
   1adc8:	00080040 	.word	0x00080040
   1adcc:	20021810 	.word	0x20021810

0001add0 <rpc_transport_ipc_send>:
   1add0:	2800      	cmp	r0, #0
   1add2:	d061      	beq.n	1ae98 <rpc_transport_ipc_send+0xc8>
   1add4:	b4f0      	push	{r4, r5, r6, r7}
   1add6:	4b34      	ldr	r3, [pc, #208]	; (1aea8 <rpc_transport_ipc_send+0xd8>)
   1add8:	b082      	sub	sp, #8
   1adda:	681a      	ldr	r2, [r3, #0]
   1addc:	4b33      	ldr	r3, [pc, #204]	; (1aeac <rpc_transport_ipc_send+0xdc>)
   1adde:	4282      	cmp	r2, r0
   1ade0:	d81e      	bhi.n	1ae20 <rpc_transport_ipc_send+0x50>
   1ade2:	681b      	ldr	r3, [r3, #0]
   1ade4:	4932      	ldr	r1, [pc, #200]	; (1aeb0 <rpc_transport_ipc_send+0xe0>)
   1ade6:	4283      	cmp	r3, r0
   1ade8:	6809      	ldr	r1, [r1, #0]
   1adea:	d803      	bhi.n	1adf4 <rpc_transport_ipc_send+0x24>
   1adec:	4c31      	ldr	r4, [pc, #196]	; (1aeb4 <rpc_transport_ipc_send+0xe4>)
   1adee:	6824      	ldr	r4, [r4, #0]
   1adf0:	4284      	cmp	r4, r0
   1adf2:	d849      	bhi.n	1ae88 <rpc_transport_ipc_send+0xb8>
   1adf4:	4281      	cmp	r1, r0
   1adf6:	d90e      	bls.n	1ae16 <rpc_transport_ipc_send+0x46>
   1adf8:	4b2f      	ldr	r3, [pc, #188]	; (1aeb8 <rpc_transport_ipc_send+0xe8>)
   1adfa:	781b      	ldrb	r3, [r3, #0]
   1adfc:	2b00      	cmp	r3, #0
   1adfe:	d14e      	bne.n	1ae9e <rpc_transport_ipc_send+0xce>
   1ae00:	1a83      	subs	r3, r0, r2
   1ae02:	492e      	ldr	r1, [pc, #184]	; (1aebc <rpc_transport_ipc_send+0xec>)
   1ae04:	099f      	lsrs	r7, r3, #6
   1ae06:	069b      	lsls	r3, r3, #26
   1ae08:	680a      	ldr	r2, [r1, #0]
   1ae0a:	4d2d      	ldr	r5, [pc, #180]	; (1aec0 <rpc_transport_ipc_send+0xf0>)
   1ae0c:	f04f 0403 	mov.w	r4, #3
   1ae10:	f04f 0602 	mov.w	r6, #2
   1ae14:	d014      	beq.n	1ae40 <rpc_transport_ipc_send+0x70>
   1ae16:	f24c 0010 	movw	r0, #49168	; 0xc010
   1ae1a:	b002      	add	sp, #8
   1ae1c:	bcf0      	pop	{r4, r5, r6, r7}
   1ae1e:	4770      	bx	lr
   1ae20:	681b      	ldr	r3, [r3, #0]
   1ae22:	4298      	cmp	r0, r3
   1ae24:	d3f7      	bcc.n	1ae16 <rpc_transport_ipc_send+0x46>
   1ae26:	4a23      	ldr	r2, [pc, #140]	; (1aeb4 <rpc_transport_ipc_send+0xe4>)
   1ae28:	6812      	ldr	r2, [r2, #0]
   1ae2a:	4290      	cmp	r0, r2
   1ae2c:	d2f3      	bcs.n	1ae16 <rpc_transport_ipc_send+0x46>
   1ae2e:	2401      	movs	r4, #1
   1ae30:	1ac3      	subs	r3, r0, r3
   1ae32:	4a24      	ldr	r2, [pc, #144]	; (1aec4 <rpc_transport_ipc_send+0xf4>)
   1ae34:	099f      	lsrs	r7, r3, #6
   1ae36:	069b      	lsls	r3, r3, #26
   1ae38:	4626      	mov	r6, r4
   1ae3a:	6812      	ldr	r2, [r2, #0]
   1ae3c:	4d22      	ldr	r5, [pc, #136]	; (1aec8 <rpc_transport_ipc_send+0xf8>)
   1ae3e:	d1ea      	bne.n	1ae16 <rpc_transport_ipc_send+0x46>
   1ae40:	6841      	ldr	r1, [r0, #4]
   1ae42:	b2c9      	uxtb	r1, r1
   1ae44:	428e      	cmp	r6, r1
   1ae46:	d122      	bne.n	1ae8e <rpc_transport_ipc_send+0xbe>
   1ae48:	2020      	movs	r0, #32
   1ae4a:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   1ae4e:	491f      	ldr	r1, [pc, #124]	; (1aecc <rpc_transport_ipc_send+0xfc>)
   1ae50:	685a      	ldr	r2, [r3, #4]
   1ae52:	880e      	ldrh	r6, [r1, #0]
   1ae54:	b292      	uxth	r2, r2
   1ae56:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   1ae5a:	605a      	str	r2, [r3, #4]
   1ae5c:	685a      	ldr	r2, [r3, #4]
   1ae5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ae62:	f042 0201 	orr.w	r2, r2, #1
   1ae66:	605a      	str	r2, [r3, #4]
   1ae68:	bf00      	nop
   1ae6a:	3801      	subs	r0, #1
   1ae6c:	d1fc      	bne.n	1ae68 <rpc_transport_ipc_send+0x98>
   1ae6e:	2201      	movs	r2, #1
   1ae70:	4b17      	ldr	r3, [pc, #92]	; (1aed0 <rpc_transport_ipc_send+0x100>)
   1ae72:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1ae76:	682a      	ldr	r2, [r5, #0]
   1ae78:	880b      	ldrh	r3, [r1, #0]
   1ae7a:	9201      	str	r2, [sp, #4]
   1ae7c:	9a01      	ldr	r2, [sp, #4]
   1ae7e:	3301      	adds	r3, #1
   1ae80:	800b      	strh	r3, [r1, #0]
   1ae82:	b002      	add	sp, #8
   1ae84:	bcf0      	pop	{r4, r5, r6, r7}
   1ae86:	4770      	bx	lr
   1ae88:	4281      	cmp	r1, r0
   1ae8a:	d9d0      	bls.n	1ae2e <rpc_transport_ipc_send+0x5e>
   1ae8c:	e7b4      	b.n	1adf8 <rpc_transport_ipc_send+0x28>
   1ae8e:	f24c 0007 	movw	r0, #49159	; 0xc007
   1ae92:	b002      	add	sp, #8
   1ae94:	bcf0      	pop	{r4, r5, r6, r7}
   1ae96:	4770      	bx	lr
   1ae98:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ae9c:	4770      	bx	lr
   1ae9e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1aea2:	b002      	add	sp, #8
   1aea4:	bcf0      	pop	{r4, r5, r6, r7}
   1aea6:	4770      	bx	lr
   1aea8:	20021810 	.word	0x20021810
   1aeac:	20021808 	.word	0x20021808
   1aeb0:	2002180c 	.word	0x2002180c
   1aeb4:	20021804 	.word	0x20021804
   1aeb8:	20026298 	.word	0x20026298
   1aebc:	20021834 	.word	0x20021834
   1aec0:	4002a00c 	.word	0x4002a00c
   1aec4:	2002182c 	.word	0x2002182c
   1aec8:	4002a004 	.word	0x4002a004
   1aecc:	200242c6 	.word	0x200242c6
   1aed0:	4002a000 	.word	0x4002a000

0001aed4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   1aed4:	4b18      	ldr	r3, [pc, #96]	; (1af38 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1aed6:	781b      	ldrb	r3, [r3, #0]
   1aed8:	bb63      	cbnz	r3, 1af34 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1aeda:	b4f0      	push	{r4, r5, r6, r7}
   1aedc:	4a17      	ldr	r2, [pc, #92]	; (1af3c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   1aede:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1aee2:	6814      	ldr	r4, [r2, #0]
   1aee4:	4b16      	ldr	r3, [pc, #88]	; (1af40 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1aee6:	6825      	ldr	r5, [r4, #0]
   1aee8:	681e      	ldr	r6, [r3, #0]
   1aeea:	b1a5      	cbz	r5, 1af16 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   1aeec:	4607      	mov	r7, r0
   1aeee:	00c1      	lsls	r1, r0, #3
   1aef0:	1863      	adds	r3, r4, r1
   1aef2:	685a      	ldr	r2, [r3, #4]
   1aef4:	b2d2      	uxtb	r2, r2
   1aef6:	2a03      	cmp	r2, #3
   1aef8:	d104      	bne.n	1af04 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1aefa:	609f      	str	r7, [r3, #8]
   1aefc:	685a      	ldr	r2, [r3, #4]
   1aefe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1af02:	605a      	str	r2, [r3, #4]
   1af04:	685a      	ldr	r2, [r3, #4]
   1af06:	f012 0fff 	tst.w	r2, #255	; 0xff
   1af0a:	d101      	bne.n	1af10 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   1af0c:	689b      	ldr	r3, [r3, #8]
   1af0e:	b12b      	cbz	r3, 1af1c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   1af10:	3001      	adds	r0, #1
   1af12:	42a8      	cmp	r0, r5
   1af14:	d1eb      	bne.n	1aeee <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1af16:	2000      	movs	r0, #0
   1af18:	bcf0      	pop	{r4, r5, r6, r7}
   1af1a:	4770      	bx	lr
   1af1c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1af20:	4421      	add	r1, r4
   1af22:	6088      	str	r0, [r1, #8]
   1af24:	6843      	ldr	r3, [r0, #4]
   1af26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1af2a:	f043 0302 	orr.w	r3, r3, #2
   1af2e:	6043      	str	r3, [r0, #4]
   1af30:	bcf0      	pop	{r4, r5, r6, r7}
   1af32:	4770      	bx	lr
   1af34:	2000      	movs	r0, #0
   1af36:	4770      	bx	lr
   1af38:	20026298 	.word	0x20026298
   1af3c:	20021834 	.word	0x20021834
   1af40:	20021830 	.word	0x20021830

0001af44 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1af44:	b4f0      	push	{r4, r5, r6, r7}
   1af46:	4a15      	ldr	r2, [pc, #84]	; (1af9c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   1af48:	4b15      	ldr	r3, [pc, #84]	; (1afa0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1af4a:	6814      	ldr	r4, [r2, #0]
   1af4c:	681e      	ldr	r6, [r3, #0]
   1af4e:	6825      	ldr	r5, [r4, #0]
   1af50:	b1ad      	cbz	r5, 1af7e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1af52:	2000      	movs	r0, #0
   1af54:	4607      	mov	r7, r0
   1af56:	00c1      	lsls	r1, r0, #3
   1af58:	1863      	adds	r3, r4, r1
   1af5a:	685a      	ldr	r2, [r3, #4]
   1af5c:	b2d2      	uxtb	r2, r2
   1af5e:	2a03      	cmp	r2, #3
   1af60:	d104      	bne.n	1af6c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   1af62:	609f      	str	r7, [r3, #8]
   1af64:	685a      	ldr	r2, [r3, #4]
   1af66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1af6a:	605a      	str	r2, [r3, #4]
   1af6c:	685a      	ldr	r2, [r3, #4]
   1af6e:	f012 0fff 	tst.w	r2, #255	; 0xff
   1af72:	d101      	bne.n	1af78 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   1af74:	689b      	ldr	r3, [r3, #8]
   1af76:	b12b      	cbz	r3, 1af84 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   1af78:	3001      	adds	r0, #1
   1af7a:	4285      	cmp	r5, r0
   1af7c:	d1eb      	bne.n	1af56 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1af7e:	2000      	movs	r0, #0
   1af80:	bcf0      	pop	{r4, r5, r6, r7}
   1af82:	4770      	bx	lr
   1af84:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1af88:	4421      	add	r1, r4
   1af8a:	6088      	str	r0, [r1, #8]
   1af8c:	6843      	ldr	r3, [r0, #4]
   1af8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1af92:	f043 0301 	orr.w	r3, r3, #1
   1af96:	6043      	str	r3, [r0, #4]
   1af98:	bcf0      	pop	{r4, r5, r6, r7}
   1af9a:	4770      	bx	lr
   1af9c:	2002182c 	.word	0x2002182c
   1afa0:	20021828 	.word	0x20021828

0001afa4 <rpc_transport_ipc_tx_data_alloc>:
   1afa4:	4b03      	ldr	r3, [pc, #12]	; (1afb4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   1afa6:	781b      	ldrb	r3, [r3, #0]
   1afa8:	b90b      	cbnz	r3, 1afae <rpc_transport_ipc_tx_data_alloc+0xa>
   1afaa:	f006 ba2f 	b.w	2140c <nrf_shared_malloc>
   1afae:	2000      	movs	r0, #0
   1afb0:	4770      	bx	lr
   1afb2:	bf00      	nop
   1afb4:	20026298 	.word	0x20026298

0001afb8 <rpc_transport_ipc_tx_suspend>:
   1afb8:	2201      	movs	r2, #1
   1afba:	4b01      	ldr	r3, [pc, #4]	; (1afc0 <rpc_transport_ipc_tx_suspend+0x8>)
   1afbc:	701a      	strb	r2, [r3, #0]
   1afbe:	4770      	bx	lr
   1afc0:	20026298 	.word	0x20026298

0001afc4 <secure_client_socket>:
   1afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1afc8:	f04f 3cff 	mov.w	ip, #4294967295
   1afcc:	460c      	mov	r4, r1
   1afce:	680b      	ldr	r3, [r1, #0]
   1afd0:	4f45      	ldr	r7, [pc, #276]	; (1b0e8 <secure_client_socket+0x124>)
   1afd2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1afd6:	600b      	str	r3, [r1, #0]
   1afd8:	680b      	ldr	r3, [r1, #0]
   1afda:	00c6      	lsls	r6, r0, #3
   1afdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1afe0:	600b      	str	r3, [r1, #0]
   1afe2:	eb07 0a06 	add.w	sl, r7, r6
   1afe6:	b084      	sub	sp, #16
   1afe8:	f8da 3004 	ldr.w	r3, [sl, #4]
   1afec:	6989      	ldr	r1, [r1, #24]
   1afee:	f247 0281 	movw	r2, #28801	; 0x7081
   1aff2:	4605      	mov	r5, r0
   1aff4:	f8d4 8000 	ldr.w	r8, [r4]
   1aff8:	e9cd cc02 	strd	ip, ip, [sp, #8]
   1affc:	f000 fd76 	bl	1baec <ip_interface_request_create>
   1b000:	2800      	cmp	r0, #0
   1b002:	d06c      	beq.n	1b0de <secure_client_socket+0x11a>
   1b004:	f8da 2004 	ldr.w	r2, [sl, #4]
   1b008:	4681      	mov	r9, r0
   1b00a:	2a00      	cmp	r2, #0
   1b00c:	d15c      	bne.n	1b0c8 <secure_client_socket+0x104>
   1b00e:	4b37      	ldr	r3, [pc, #220]	; (1b0ec <secure_client_socket+0x128>)
   1b010:	1971      	adds	r1, r6, r5
   1b012:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b016:	2224      	movs	r2, #36	; 0x24
   1b018:	f109 0014 	add.w	r0, r9, #20
   1b01c:	f7f1 fd96 	bl	cb4c <memcpy>
   1b020:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1b024:	4649      	mov	r1, r9
   1b026:	3324      	adds	r3, #36	; 0x24
   1b028:	f8c9 3008 	str.w	r3, [r9, #8]
   1b02c:	6822      	ldr	r2, [r4, #0]
   1b02e:	4643      	mov	r3, r8
   1b030:	0c12      	lsrs	r2, r2, #16
   1b032:	0412      	lsls	r2, r2, #16
   1b034:	f042 020a 	orr.w	r2, r2, #10
   1b038:	6022      	str	r2, [r4, #0]
   1b03a:	4620      	mov	r0, r4
   1b03c:	f247 0281 	movw	r2, #28801	; 0x7081
   1b040:	f000 fd74 	bl	1bb2c <ip_interface_request_send>
   1b044:	4603      	mov	r3, r0
   1b046:	b968      	cbnz	r0, 1b064 <secure_client_socket+0xa0>
   1b048:	6823      	ldr	r3, [r4, #0]
   1b04a:	00db      	lsls	r3, r3, #3
   1b04c:	d40e      	bmi.n	1b06c <secure_client_socket+0xa8>
   1b04e:	ab03      	add	r3, sp, #12
   1b050:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b054:	210b      	movs	r1, #11
   1b056:	4628      	mov	r0, r5
   1b058:	f000 fd7c 	bl	1bb54 <ip_interface_wait>
   1b05c:	4603      	mov	r3, r0
   1b05e:	b150      	cbz	r0, 1b076 <secure_client_socket+0xb2>
   1b060:	f8c4 8000 	str.w	r8, [r4]
   1b064:	4618      	mov	r0, r3
   1b066:	b004      	add	sp, #16
   1b068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b06c:	2373      	movs	r3, #115	; 0x73
   1b06e:	4618      	mov	r0, r3
   1b070:	b004      	add	sp, #16
   1b072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b076:	220c      	movs	r2, #12
   1b078:	ab02      	add	r3, sp, #8
   1b07a:	4611      	mov	r1, r2
   1b07c:	4628      	mov	r0, r5
   1b07e:	f000 fd69 	bl	1bb54 <ip_interface_wait>
   1b082:	4603      	mov	r3, r0
   1b084:	bb30      	cbnz	r0, 1b0d4 <secure_client_socket+0x110>
   1b086:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1b08a:	b138      	cbz	r0, 1b09c <secure_client_socket+0xd8>
   1b08c:	9301      	str	r3, [sp, #4]
   1b08e:	f006 f901 	bl	21294 <nrf_free>
   1b092:	9b01      	ldr	r3, [sp, #4]
   1b094:	443e      	add	r6, r7
   1b096:	6073      	str	r3, [r6, #4]
   1b098:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   1b09c:	4618      	mov	r0, r3
   1b09e:	6822      	ldr	r2, [r4, #0]
   1b0a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   1b0a4:	6022      	str	r2, [r4, #0]
   1b0a6:	6822      	ldr	r2, [r4, #0]
   1b0a8:	0c12      	lsrs	r2, r2, #16
   1b0aa:	0412      	lsls	r2, r2, #16
   1b0ac:	f042 020c 	orr.w	r2, r2, #12
   1b0b0:	6022      	str	r2, [r4, #0]
   1b0b2:	6822      	ldr	r2, [r4, #0]
   1b0b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1b0b8:	6022      	str	r2, [r4, #0]
   1b0ba:	6822      	ldr	r2, [r4, #0]
   1b0bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1b0c0:	6022      	str	r2, [r4, #0]
   1b0c2:	b004      	add	sp, #16
   1b0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b0c8:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   1b0cc:	6800      	ldr	r0, [r0, #0]
   1b0ce:	f7f1 fd3d 	bl	cb4c <memcpy>
   1b0d2:	e79c      	b.n	1b00e <secure_client_socket+0x4a>
   1b0d4:	2b73      	cmp	r3, #115	; 0x73
   1b0d6:	d0c5      	beq.n	1b064 <secure_client_socket+0xa0>
   1b0d8:	f8c4 8000 	str.w	r8, [r4]
   1b0dc:	e7c2      	b.n	1b064 <secure_client_socket+0xa0>
   1b0de:	230c      	movs	r3, #12
   1b0e0:	4618      	mov	r0, r3
   1b0e2:	b004      	add	sp, #16
   1b0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b0e8:	20021994 	.word	0x20021994
   1b0ec:	20021850 	.word	0x20021850

0001b0f0 <tls_interface_init>:
   1b0f0:	2201      	movs	r2, #1
   1b0f2:	4b02      	ldr	r3, [pc, #8]	; (1b0fc <tls_interface_init+0xc>)
   1b0f4:	2000      	movs	r0, #0
   1b0f6:	701a      	strb	r2, [r3, #0]
   1b0f8:	4770      	bx	lr
   1b0fa:	bf00      	nop
   1b0fc:	20026299 	.word	0x20026299

0001b100 <tls_interface_open>:
   1b100:	b538      	push	{r3, r4, r5, lr}
   1b102:	4b23      	ldr	r3, [pc, #140]	; (1b190 <tls_interface_open+0x90>)
   1b104:	781b      	ldrb	r3, [r3, #0]
   1b106:	2b00      	cmp	r3, #0
   1b108:	d03c      	beq.n	1b184 <tls_interface_open+0x84>
   1b10a:	1e4b      	subs	r3, r1, #1
   1b10c:	2b01      	cmp	r3, #1
   1b10e:	d808      	bhi.n	1b122 <tls_interface_open+0x22>
   1b110:	4614      	mov	r4, r2
   1b112:	b162      	cbz	r2, 1b12e <tls_interface_open+0x2e>
   1b114:	2901      	cmp	r1, #1
   1b116:	d02d      	beq.n	1b174 <tls_interface_open+0x74>
   1b118:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1b11c:	bf08      	it	eq
   1b11e:	2202      	moveq	r2, #2
   1b120:	d00d      	beq.n	1b13e <tls_interface_open+0x3e>
   1b122:	2029      	movs	r0, #41	; 0x29
   1b124:	f7fb fd2c 	bl	16b80 <bsd_os_errno_set>
   1b128:	f04f 35ff 	mov.w	r5, #4294967295
   1b12c:	e020      	b.n	1b170 <tls_interface_open+0x70>
   1b12e:	2901      	cmp	r1, #1
   1b130:	bf0b      	itete	eq
   1b132:	2201      	moveq	r2, #1
   1b134:	2202      	movne	r2, #2
   1b136:	f44f 7482 	moveq.w	r4, #260	; 0x104
   1b13a:	f44f 7487 	movne.w	r4, #270	; 0x10e
   1b13e:	f000 fd3b 	bl	1bbb8 <ip_interface_open>
   1b142:	1e05      	subs	r5, r0, #0
   1b144:	db1b      	blt.n	1b17e <tls_interface_open+0x7e>
   1b146:	4b13      	ldr	r3, [pc, #76]	; (1b194 <tls_interface_open+0x94>)
   1b148:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   1b14c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1b150:	2224      	movs	r2, #36	; 0x24
   1b152:	4911      	ldr	r1, [pc, #68]	; (1b198 <tls_interface_open+0x98>)
   1b154:	f7f1 fcfa 	bl	cb4c <memcpy>
   1b158:	4628      	mov	r0, r5
   1b15a:	f006 fd99 	bl	21c90 <interface_socket_from_handle_get>
   1b15e:	6803      	ldr	r3, [r0, #0]
   1b160:	6144      	str	r4, [r0, #20]
   1b162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b166:	6003      	str	r3, [r0, #0]
   1b168:	6803      	ldr	r3, [r0, #0]
   1b16a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b16e:	6003      	str	r3, [r0, #0]
   1b170:	4628      	mov	r0, r5
   1b172:	bd38      	pop	{r3, r4, r5, pc}
   1b174:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1b178:	d1d3      	bne.n	1b122 <tls_interface_open+0x22>
   1b17a:	460a      	mov	r2, r1
   1b17c:	e7df      	b.n	1b13e <tls_interface_open+0x3e>
   1b17e:	f04f 35ff 	mov.w	r5, #4294967295
   1b182:	e7f5      	b.n	1b170 <tls_interface_open+0x70>
   1b184:	2070      	movs	r0, #112	; 0x70
   1b186:	f7fb fcfb 	bl	16b80 <bsd_os_errno_set>
   1b18a:	f04f 35ff 	mov.w	r5, #4294967295
   1b18e:	e7ef      	b.n	1b170 <tls_interface_open+0x70>
   1b190:	20026299 	.word	0x20026299
   1b194:	20021850 	.word	0x20021850
   1b198:	0002f614 	.word	0x0002f614

0001b19c <tls_interface_close>:
   1b19c:	b538      	push	{r3, r4, r5, lr}
   1b19e:	4604      	mov	r4, r0
   1b1a0:	f006 fd76 	bl	21c90 <interface_socket_from_handle_get>
   1b1a4:	b180      	cbz	r0, 1b1c8 <tls_interface_close+0x2c>
   1b1a6:	4d0b      	ldr	r5, [pc, #44]	; (1b1d4 <tls_interface_close+0x38>)
   1b1a8:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   1b1ac:	b138      	cbz	r0, 1b1be <tls_interface_close+0x22>
   1b1ae:	f006 f871 	bl	21294 <nrf_free>
   1b1b2:	2300      	movs	r3, #0
   1b1b4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b1b8:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   1b1bc:	6053      	str	r3, [r2, #4]
   1b1be:	4620      	mov	r0, r4
   1b1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b1c4:	f000 bdbe 	b.w	1bd44 <ip_interface_close>
   1b1c8:	2009      	movs	r0, #9
   1b1ca:	f7fb fcd9 	bl	16b80 <bsd_os_errno_set>
   1b1ce:	f04f 30ff 	mov.w	r0, #4294967295
   1b1d2:	bd38      	pop	{r3, r4, r5, pc}
   1b1d4:	20021994 	.word	0x20021994

0001b1d8 <tls_interface_sendto>:
   1b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1dc:	b087      	sub	sp, #28
   1b1de:	9103      	str	r1, [sp, #12]
   1b1e0:	4616      	mov	r6, r2
   1b1e2:	469b      	mov	fp, r3
   1b1e4:	4682      	mov	sl, r0
   1b1e6:	f006 fd53 	bl	21c90 <interface_socket_from_handle_get>
   1b1ea:	2800      	cmp	r0, #0
   1b1ec:	f000 8082 	beq.w	1b2f4 <tls_interface_sendto+0x11c>
   1b1f0:	2400      	movs	r4, #0
   1b1f2:	f01b 0f02 	tst.w	fp, #2
   1b1f6:	bf08      	it	eq
   1b1f8:	6807      	ldreq	r7, [r0, #0]
   1b1fa:	4a40      	ldr	r2, [pc, #256]	; (1b2fc <tls_interface_sendto+0x124>)
   1b1fc:	bf08      	it	eq
   1b1fe:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   1b202:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   1b206:	4605      	mov	r5, r0
   1b208:	bf0c      	ite	eq
   1b20a:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   1b20e:	2700      	movne	r7, #0
   1b210:	46a0      	mov	r8, r4
   1b212:	f04f 33ff 	mov.w	r3, #4294967295
   1b216:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   1b21a:	e00f      	b.n	1b23c <tls_interface_sendto+0x64>
   1b21c:	f899 2000 	ldrb.w	r2, [r9]
   1b220:	2a02      	cmp	r2, #2
   1b222:	d061      	beq.n	1b2e8 <tls_interface_sendto+0x110>
   1b224:	692a      	ldr	r2, [r5, #16]
   1b226:	2a01      	cmp	r2, #1
   1b228:	d061      	beq.n	1b2ee <tls_interface_sendto+0x116>
   1b22a:	2b00      	cmp	r3, #0
   1b22c:	db30      	blt.n	1b290 <tls_interface_sendto+0xb8>
   1b22e:	f1b8 0f00 	cmp.w	r8, #0
   1b232:	dc18      	bgt.n	1b266 <tls_interface_sendto+0x8e>
   1b234:	441c      	add	r4, r3
   1b236:	b1df      	cbz	r7, 1b270 <tls_interface_sendto+0x98>
   1b238:	42a6      	cmp	r6, r4
   1b23a:	dd19      	ble.n	1b270 <tls_interface_sendto+0x98>
   1b23c:	6829      	ldr	r1, [r5, #0]
   1b23e:	1b32      	subs	r2, r6, r4
   1b240:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1b244:	b289      	uxth	r1, r1
   1b246:	bfa8      	it	ge
   1b248:	f44f 6200 	movge.w	r2, #2048	; 0x800
   1b24c:	290c      	cmp	r1, #12
   1b24e:	d013      	beq.n	1b278 <tls_interface_sendto+0xa0>
   1b250:	6829      	ldr	r1, [r5, #0]
   1b252:	b289      	uxth	r1, r1
   1b254:	290b      	cmp	r1, #11
   1b256:	d0e1      	beq.n	1b21c <tls_interface_sendto+0x44>
   1b258:	6929      	ldr	r1, [r5, #16]
   1b25a:	2901      	cmp	r1, #1
   1b25c:	d024      	beq.n	1b2a8 <tls_interface_sendto+0xd0>
   1b25e:	2902      	cmp	r1, #2
   1b260:	d01a      	beq.n	1b298 <tls_interface_sendto+0xc0>
   1b262:	f04f 0839 	mov.w	r8, #57	; 0x39
   1b266:	4640      	mov	r0, r8
   1b268:	f7fb fc8a 	bl	16b80 <bsd_os_errno_set>
   1b26c:	f04f 34ff 	mov.w	r4, #4294967295
   1b270:	4620      	mov	r0, r4
   1b272:	b007      	add	sp, #28
   1b274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b278:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b27a:	9903      	ldr	r1, [sp, #12]
   1b27c:	9301      	str	r3, [sp, #4]
   1b27e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b280:	4421      	add	r1, r4
   1b282:	9300      	str	r3, [sp, #0]
   1b284:	4650      	mov	r0, sl
   1b286:	465b      	mov	r3, fp
   1b288:	f000 fdce 	bl	1be28 <ip_interface_sendto>
   1b28c:	1e03      	subs	r3, r0, #0
   1b28e:	dad1      	bge.n	1b234 <tls_interface_sendto+0x5c>
   1b290:	f1b8 0f00 	cmp.w	r8, #0
   1b294:	ddea      	ble.n	1b26c <tls_interface_sendto+0x94>
   1b296:	e7e6      	b.n	1b266 <tls_interface_sendto+0x8e>
   1b298:	6829      	ldr	r1, [r5, #0]
   1b29a:	b289      	uxth	r1, r1
   1b29c:	2902      	cmp	r1, #2
   1b29e:	d007      	beq.n	1b2b0 <tls_interface_sendto+0xd8>
   1b2a0:	6829      	ldr	r1, [r5, #0]
   1b2a2:	b289      	uxth	r1, r1
   1b2a4:	2904      	cmp	r1, #4
   1b2a6:	d003      	beq.n	1b2b0 <tls_interface_sendto+0xd8>
   1b2a8:	6829      	ldr	r1, [r5, #0]
   1b2aa:	b289      	uxth	r1, r1
   1b2ac:	2905      	cmp	r1, #5
   1b2ae:	d1d8      	bne.n	1b262 <tls_interface_sendto+0x8a>
   1b2b0:	f899 1000 	ldrb.w	r1, [r9]
   1b2b4:	2902      	cmp	r1, #2
   1b2b6:	d1b8      	bne.n	1b22a <tls_interface_sendto+0x52>
   1b2b8:	4629      	mov	r1, r5
   1b2ba:	4650      	mov	r0, sl
   1b2bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b2c0:	f7ff fe80 	bl	1afc4 <secure_client_socket>
   1b2c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b2c8:	4680      	mov	r8, r0
   1b2ca:	2800      	cmp	r0, #0
   1b2cc:	d1ad      	bne.n	1b22a <tls_interface_sendto+0x52>
   1b2ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b2d0:	9903      	ldr	r1, [sp, #12]
   1b2d2:	9301      	str	r3, [sp, #4]
   1b2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b2d6:	4421      	add	r1, r4
   1b2d8:	9300      	str	r3, [sp, #0]
   1b2da:	4650      	mov	r0, sl
   1b2dc:	465b      	mov	r3, fp
   1b2de:	f000 fda3 	bl	1be28 <ip_interface_sendto>
   1b2e2:	1e03      	subs	r3, r0, #0
   1b2e4:	daa6      	bge.n	1b234 <tls_interface_sendto+0x5c>
   1b2e6:	e7c1      	b.n	1b26c <tls_interface_sendto+0x94>
   1b2e8:	f04f 0823 	mov.w	r8, #35	; 0x23
   1b2ec:	e7bb      	b.n	1b266 <tls_interface_sendto+0x8e>
   1b2ee:	f04f 082a 	mov.w	r8, #42	; 0x2a
   1b2f2:	e7b8      	b.n	1b266 <tls_interface_sendto+0x8e>
   1b2f4:	f04f 0809 	mov.w	r8, #9
   1b2f8:	e7b5      	b.n	1b266 <tls_interface_sendto+0x8e>
   1b2fa:	bf00      	nop
   1b2fc:	20021850 	.word	0x20021850

0001b300 <tls_interface_recvfrom>:
   1b300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b304:	460d      	mov	r5, r1
   1b306:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b30a:	4616      	mov	r6, r2
   1b30c:	461f      	mov	r7, r3
   1b30e:	4604      	mov	r4, r0
   1b310:	f006 fcbe 	bl	21c90 <interface_socket_from_handle_get>
   1b314:	2800      	cmp	r0, #0
   1b316:	d038      	beq.n	1b38a <tls_interface_recvfrom+0x8a>
   1b318:	6803      	ldr	r3, [r0, #0]
   1b31a:	b29b      	uxth	r3, r3
   1b31c:	2b0c      	cmp	r3, #12
   1b31e:	d00f      	beq.n	1b340 <tls_interface_recvfrom+0x40>
   1b320:	6803      	ldr	r3, [r0, #0]
   1b322:	b29b      	uxth	r3, r3
   1b324:	2b0d      	cmp	r3, #13
   1b326:	d00b      	beq.n	1b340 <tls_interface_recvfrom+0x40>
   1b328:	6903      	ldr	r3, [r0, #16]
   1b32a:	2b01      	cmp	r3, #1
   1b32c:	d01a      	beq.n	1b364 <tls_interface_recvfrom+0x64>
   1b32e:	2b02      	cmp	r3, #2
   1b330:	d010      	beq.n	1b354 <tls_interface_recvfrom+0x54>
   1b332:	2023      	movs	r0, #35	; 0x23
   1b334:	f7fb fc24 	bl	16b80 <bsd_os_errno_set>
   1b338:	f04f 30ff 	mov.w	r0, #4294967295
   1b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b340:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1b344:	463b      	mov	r3, r7
   1b346:	4632      	mov	r2, r6
   1b348:	4629      	mov	r1, r5
   1b34a:	4620      	mov	r0, r4
   1b34c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b350:	f000 bee6 	b.w	1c120 <ip_interface_recvfrom>
   1b354:	6803      	ldr	r3, [r0, #0]
   1b356:	b29b      	uxth	r3, r3
   1b358:	2b02      	cmp	r3, #2
   1b35a:	d007      	beq.n	1b36c <tls_interface_recvfrom+0x6c>
   1b35c:	6803      	ldr	r3, [r0, #0]
   1b35e:	b29b      	uxth	r3, r3
   1b360:	2b04      	cmp	r3, #4
   1b362:	d003      	beq.n	1b36c <tls_interface_recvfrom+0x6c>
   1b364:	6803      	ldr	r3, [r0, #0]
   1b366:	b29b      	uxth	r3, r3
   1b368:	2b05      	cmp	r3, #5
   1b36a:	d1e2      	bne.n	1b332 <tls_interface_recvfrom+0x32>
   1b36c:	4b08      	ldr	r3, [pc, #32]	; (1b390 <tls_interface_recvfrom+0x90>)
   1b36e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1b372:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b376:	2b02      	cmp	r3, #2
   1b378:	d1db      	bne.n	1b332 <tls_interface_recvfrom+0x32>
   1b37a:	4601      	mov	r1, r0
   1b37c:	4620      	mov	r0, r4
   1b37e:	f7ff fe21 	bl	1afc4 <secure_client_socket>
   1b382:	2800      	cmp	r0, #0
   1b384:	d0dc      	beq.n	1b340 <tls_interface_recvfrom+0x40>
   1b386:	dcd5      	bgt.n	1b334 <tls_interface_recvfrom+0x34>
   1b388:	e7d6      	b.n	1b338 <tls_interface_recvfrom+0x38>
   1b38a:	2009      	movs	r0, #9
   1b38c:	e7d2      	b.n	1b334 <tls_interface_recvfrom+0x34>
   1b38e:	bf00      	nop
   1b390:	20021850 	.word	0x20021850

0001b394 <tls_interface_bind>:
   1b394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b398:	b082      	sub	sp, #8
   1b39a:	460e      	mov	r6, r1
   1b39c:	4617      	mov	r7, r2
   1b39e:	4605      	mov	r5, r0
   1b3a0:	f006 fc76 	bl	21c90 <interface_socket_from_handle_get>
   1b3a4:	2800      	cmp	r0, #0
   1b3a6:	d069      	beq.n	1b47c <tls_interface_bind+0xe8>
   1b3a8:	6803      	ldr	r3, [r0, #0]
   1b3aa:	4604      	mov	r4, r0
   1b3ac:	b29b      	uxth	r3, r3
   1b3ae:	2b02      	cmp	r3, #2
   1b3b0:	d158      	bne.n	1b464 <tls_interface_bind+0xd0>
   1b3b2:	463a      	mov	r2, r7
   1b3b4:	4631      	mov	r1, r6
   1b3b6:	4628      	mov	r0, r5
   1b3b8:	f001 f9c2 	bl	1c740 <ip_interface_bind>
   1b3bc:	2800      	cmp	r0, #0
   1b3be:	d148      	bne.n	1b452 <tls_interface_bind+0xbe>
   1b3c0:	00ee      	lsls	r6, r5, #3
   1b3c2:	4f2f      	ldr	r7, [pc, #188]	; (1b480 <tls_interface_bind+0xec>)
   1b3c4:	1973      	adds	r3, r6, r5
   1b3c6:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1b3ca:	2b01      	cmp	r3, #1
   1b3cc:	d002      	beq.n	1b3d4 <tls_interface_bind+0x40>
   1b3ce:	b002      	add	sp, #8
   1b3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b3d4:	f04f 3cff 	mov.w	ip, #4294967295
   1b3d8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1b484 <tls_interface_bind+0xf0>
   1b3dc:	f247 0281 	movw	r2, #28801	; 0x7081
   1b3e0:	eb0a 0906 	add.w	r9, sl, r6
   1b3e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b3e8:	69a1      	ldr	r1, [r4, #24]
   1b3ea:	4628      	mov	r0, r5
   1b3ec:	f8cd c004 	str.w	ip, [sp, #4]
   1b3f0:	f000 fb7c 	bl	1baec <ip_interface_request_create>
   1b3f4:	4680      	mov	r8, r0
   1b3f6:	2800      	cmp	r0, #0
   1b3f8:	d03e      	beq.n	1b478 <tls_interface_bind+0xe4>
   1b3fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b3fe:	bbaa      	cbnz	r2, 1b46c <tls_interface_bind+0xd8>
   1b400:	1971      	adds	r1, r6, r5
   1b402:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1b406:	2224      	movs	r2, #36	; 0x24
   1b408:	f108 0014 	add.w	r0, r8, #20
   1b40c:	f7f1 fb9e 	bl	cb4c <memcpy>
   1b410:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b414:	4641      	mov	r1, r8
   1b416:	3324      	adds	r3, #36	; 0x24
   1b418:	f8c8 3008 	str.w	r3, [r8, #8]
   1b41c:	6822      	ldr	r2, [r4, #0]
   1b41e:	2304      	movs	r3, #4
   1b420:	0c12      	lsrs	r2, r2, #16
   1b422:	0412      	lsls	r2, r2, #16
   1b424:	f042 020a 	orr.w	r2, r2, #10
   1b428:	6022      	str	r2, [r4, #0]
   1b42a:	4620      	mov	r0, r4
   1b42c:	f247 0281 	movw	r2, #28801	; 0x7081
   1b430:	f000 fb7c 	bl	1bb2c <ip_interface_request_send>
   1b434:	b968      	cbnz	r0, 1b452 <tls_interface_bind+0xbe>
   1b436:	6823      	ldr	r3, [r4, #0]
   1b438:	00db      	lsls	r3, r3, #3
   1b43a:	d415      	bmi.n	1b468 <tls_interface_bind+0xd4>
   1b43c:	4628      	mov	r0, r5
   1b43e:	ab01      	add	r3, sp, #4
   1b440:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b444:	210b      	movs	r1, #11
   1b446:	f000 fb85 	bl	1bb54 <ip_interface_wait>
   1b44a:	2800      	cmp	r0, #0
   1b44c:	d0bf      	beq.n	1b3ce <tls_interface_bind+0x3a>
   1b44e:	2304      	movs	r3, #4
   1b450:	6023      	str	r3, [r4, #0]
   1b452:	2800      	cmp	r0, #0
   1b454:	ddbb      	ble.n	1b3ce <tls_interface_bind+0x3a>
   1b456:	f7fb fb93 	bl	16b80 <bsd_os_errno_set>
   1b45a:	f04f 30ff 	mov.w	r0, #4294967295
   1b45e:	b002      	add	sp, #8
   1b460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b464:	202d      	movs	r0, #45	; 0x2d
   1b466:	e7f6      	b.n	1b456 <tls_interface_bind+0xc2>
   1b468:	2073      	movs	r0, #115	; 0x73
   1b46a:	e7f4      	b.n	1b456 <tls_interface_bind+0xc2>
   1b46c:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1b470:	6800      	ldr	r0, [r0, #0]
   1b472:	f7f1 fb6b 	bl	cb4c <memcpy>
   1b476:	e7c3      	b.n	1b400 <tls_interface_bind+0x6c>
   1b478:	200c      	movs	r0, #12
   1b47a:	e7ec      	b.n	1b456 <tls_interface_bind+0xc2>
   1b47c:	2009      	movs	r0, #9
   1b47e:	e7ea      	b.n	1b456 <tls_interface_bind+0xc2>
   1b480:	20021850 	.word	0x20021850
   1b484:	20021994 	.word	0x20021994

0001b488 <tls_interface_connect>:
   1b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b48a:	460e      	mov	r6, r1
   1b48c:	4617      	mov	r7, r2
   1b48e:	4604      	mov	r4, r0
   1b490:	f006 fbfe 	bl	21c90 <interface_socket_from_handle_get>
   1b494:	b1e8      	cbz	r0, 1b4d2 <tls_interface_connect+0x4a>
   1b496:	4b13      	ldr	r3, [pc, #76]	; (1b4e4 <tls_interface_connect+0x5c>)
   1b498:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1b49c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b4a0:	2b02      	cmp	r3, #2
   1b4a2:	d11c      	bne.n	1b4de <tls_interface_connect+0x56>
   1b4a4:	6803      	ldr	r3, [r0, #0]
   1b4a6:	4605      	mov	r5, r0
   1b4a8:	b29b      	uxth	r3, r3
   1b4aa:	2b02      	cmp	r3, #2
   1b4ac:	d003      	beq.n	1b4b6 <tls_interface_connect+0x2e>
   1b4ae:	6803      	ldr	r3, [r0, #0]
   1b4b0:	b29b      	uxth	r3, r3
   1b4b2:	2b04      	cmp	r3, #4
   1b4b4:	d113      	bne.n	1b4de <tls_interface_connect+0x56>
   1b4b6:	463a      	mov	r2, r7
   1b4b8:	4631      	mov	r1, r6
   1b4ba:	4620      	mov	r0, r4
   1b4bc:	f000 ff58 	bl	1c370 <ip_interface_connect>
   1b4c0:	b110      	cbz	r0, 1b4c8 <tls_interface_connect+0x40>
   1b4c2:	2800      	cmp	r0, #0
   1b4c4:	dc06      	bgt.n	1b4d4 <tls_interface_connect+0x4c>
   1b4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4c8:	4629      	mov	r1, r5
   1b4ca:	4620      	mov	r0, r4
   1b4cc:	f7ff fd7a 	bl	1afc4 <secure_client_socket>
   1b4d0:	e7f7      	b.n	1b4c2 <tls_interface_connect+0x3a>
   1b4d2:	2009      	movs	r0, #9
   1b4d4:	f7fb fb54 	bl	16b80 <bsd_os_errno_set>
   1b4d8:	f04f 30ff 	mov.w	r0, #4294967295
   1b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4de:	202d      	movs	r0, #45	; 0x2d
   1b4e0:	e7f8      	b.n	1b4d4 <tls_interface_connect+0x4c>
   1b4e2:	bf00      	nop
   1b4e4:	20021850 	.word	0x20021850

0001b4e8 <tls_interface_listen>:
   1b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4ec:	b085      	sub	sp, #20
   1b4ee:	4689      	mov	r9, r1
   1b4f0:	4605      	mov	r5, r0
   1b4f2:	f006 fbcd 	bl	21c90 <interface_socket_from_handle_get>
   1b4f6:	2800      	cmp	r0, #0
   1b4f8:	f000 8084 	beq.w	1b604 <tls_interface_listen+0x11c>
   1b4fc:	6803      	ldr	r3, [r0, #0]
   1b4fe:	4604      	mov	r4, r0
   1b500:	00da      	lsls	r2, r3, #3
   1b502:	d47d      	bmi.n	1b600 <tls_interface_listen+0x118>
   1b504:	6903      	ldr	r3, [r0, #16]
   1b506:	2b01      	cmp	r3, #1
   1b508:	d17a      	bne.n	1b600 <tls_interface_listen+0x118>
   1b50a:	6803      	ldr	r3, [r0, #0]
   1b50c:	b29b      	uxth	r3, r3
   1b50e:	2b04      	cmp	r3, #4
   1b510:	d05d      	beq.n	1b5ce <tls_interface_listen+0xe6>
   1b512:	6823      	ldr	r3, [r4, #0]
   1b514:	b29b      	uxth	r3, r3
   1b516:	2b0b      	cmp	r3, #11
   1b518:	d172      	bne.n	1b600 <tls_interface_listen+0x118>
   1b51a:	4a3b      	ldr	r2, [pc, #236]	; (1b608 <tls_interface_listen+0x120>)
   1b51c:	00ee      	lsls	r6, r5, #3
   1b51e:	1973      	adds	r3, r6, r5
   1b520:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b524:	9201      	str	r2, [sp, #4]
   1b526:	2b01      	cmp	r3, #1
   1b528:	d16a      	bne.n	1b600 <tls_interface_listen+0x118>
   1b52a:	2201      	movs	r2, #1
   1b52c:	9901      	ldr	r1, [sp, #4]
   1b52e:	1973      	adds	r3, r6, r5
   1b530:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   1b534:	6823      	ldr	r3, [r4, #0]
   1b536:	2b0b      	cmp	r3, #11
   1b538:	d040      	beq.n	1b5bc <tls_interface_listen+0xd4>
   1b53a:	f04f 3cff 	mov.w	ip, #4294967295
   1b53e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 1b60c <tls_interface_listen+0x124>
   1b542:	f247 0281 	movw	r2, #28801	; 0x7081
   1b546:	eb0a 0806 	add.w	r8, sl, r6
   1b54a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b54e:	69a1      	ldr	r1, [r4, #24]
   1b550:	4628      	mov	r0, r5
   1b552:	6827      	ldr	r7, [r4, #0]
   1b554:	f8cd c00c 	str.w	ip, [sp, #12]
   1b558:	f000 fac8 	bl	1baec <ip_interface_request_create>
   1b55c:	4683      	mov	fp, r0
   1b55e:	2800      	cmp	r0, #0
   1b560:	d046      	beq.n	1b5f0 <tls_interface_listen+0x108>
   1b562:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b566:	2a00      	cmp	r2, #0
   1b568:	d144      	bne.n	1b5f4 <tls_interface_listen+0x10c>
   1b56a:	9b01      	ldr	r3, [sp, #4]
   1b56c:	1971      	adds	r1, r6, r5
   1b56e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b572:	2224      	movs	r2, #36	; 0x24
   1b574:	f10b 0014 	add.w	r0, fp, #20
   1b578:	f7f1 fae8 	bl	cb4c <memcpy>
   1b57c:	f8db 2008 	ldr.w	r2, [fp, #8]
   1b580:	4659      	mov	r1, fp
   1b582:	3224      	adds	r2, #36	; 0x24
   1b584:	f8cb 2008 	str.w	r2, [fp, #8]
   1b588:	6822      	ldr	r2, [r4, #0]
   1b58a:	463b      	mov	r3, r7
   1b58c:	0c12      	lsrs	r2, r2, #16
   1b58e:	0412      	lsls	r2, r2, #16
   1b590:	f042 020a 	orr.w	r2, r2, #10
   1b594:	6022      	str	r2, [r4, #0]
   1b596:	4620      	mov	r0, r4
   1b598:	f247 0281 	movw	r2, #28801	; 0x7081
   1b59c:	f000 fac6 	bl	1bb2c <ip_interface_request_send>
   1b5a0:	b980      	cbnz	r0, 1b5c4 <tls_interface_listen+0xdc>
   1b5a2:	6823      	ldr	r3, [r4, #0]
   1b5a4:	00db      	lsls	r3, r3, #3
   1b5a6:	d41b      	bmi.n	1b5e0 <tls_interface_listen+0xf8>
   1b5a8:	ab03      	add	r3, sp, #12
   1b5aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b5ae:	210b      	movs	r1, #11
   1b5b0:	4628      	mov	r0, r5
   1b5b2:	f000 facf 	bl	1bb54 <ip_interface_wait>
   1b5b6:	b108      	cbz	r0, 1b5bc <tls_interface_listen+0xd4>
   1b5b8:	6027      	str	r7, [r4, #0]
   1b5ba:	e003      	b.n	1b5c4 <tls_interface_listen+0xdc>
   1b5bc:	4649      	mov	r1, r9
   1b5be:	4628      	mov	r0, r5
   1b5c0:	f001 f960 	bl	1c884 <ip_interface_listen>
   1b5c4:	2800      	cmp	r0, #0
   1b5c6:	dc0c      	bgt.n	1b5e2 <tls_interface_listen+0xfa>
   1b5c8:	b005      	add	sp, #20
   1b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5ce:	4a0e      	ldr	r2, [pc, #56]	; (1b608 <tls_interface_listen+0x120>)
   1b5d0:	00ee      	lsls	r6, r5, #3
   1b5d2:	1973      	adds	r3, r6, r5
   1b5d4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b5d8:	9201      	str	r2, [sp, #4]
   1b5da:	2b02      	cmp	r3, #2
   1b5dc:	d199      	bne.n	1b512 <tls_interface_listen+0x2a>
   1b5de:	e7a4      	b.n	1b52a <tls_interface_listen+0x42>
   1b5e0:	2073      	movs	r0, #115	; 0x73
   1b5e2:	f7fb facd 	bl	16b80 <bsd_os_errno_set>
   1b5e6:	f04f 30ff 	mov.w	r0, #4294967295
   1b5ea:	b005      	add	sp, #20
   1b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5f0:	200c      	movs	r0, #12
   1b5f2:	e7f6      	b.n	1b5e2 <tls_interface_listen+0xfa>
   1b5f4:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1b5f8:	6800      	ldr	r0, [r0, #0]
   1b5fa:	f7f1 faa7 	bl	cb4c <memcpy>
   1b5fe:	e7b4      	b.n	1b56a <tls_interface_listen+0x82>
   1b600:	202d      	movs	r0, #45	; 0x2d
   1b602:	e7ee      	b.n	1b5e2 <tls_interface_listen+0xfa>
   1b604:	2009      	movs	r0, #9
   1b606:	e7ec      	b.n	1b5e2 <tls_interface_listen+0xfa>
   1b608:	20021850 	.word	0x20021850
   1b60c:	20021994 	.word	0x20021994

0001b610 <tls_interface_accept>:
   1b610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b614:	b083      	sub	sp, #12
   1b616:	460f      	mov	r7, r1
   1b618:	4690      	mov	r8, r2
   1b61a:	4699      	mov	r9, r3
   1b61c:	4606      	mov	r6, r0
   1b61e:	f04f 34ff 	mov.w	r4, #4294967295
   1b622:	f006 fb35 	bl	21c90 <interface_socket_from_handle_get>
   1b626:	9401      	str	r4, [sp, #4]
   1b628:	2800      	cmp	r0, #0
   1b62a:	d048      	beq.n	1b6be <tls_interface_accept+0xae>
   1b62c:	6805      	ldr	r5, [r0, #0]
   1b62e:	b2ad      	uxth	r5, r5
   1b630:	2d07      	cmp	r5, #7
   1b632:	d144      	bne.n	1b6be <tls_interface_accept+0xae>
   1b634:	6803      	ldr	r3, [r0, #0]
   1b636:	00db      	lsls	r3, r3, #3
   1b638:	d443      	bmi.n	1b6c2 <tls_interface_accept+0xb2>
   1b63a:	464b      	mov	r3, r9
   1b63c:	4642      	mov	r2, r8
   1b63e:	4639      	mov	r1, r7
   1b640:	4630      	mov	r0, r6
   1b642:	f001 f99b 	bl	1c97c <ip_interface_accept>
   1b646:	1e04      	subs	r4, r0, #0
   1b648:	da08      	bge.n	1b65c <tls_interface_accept+0x4c>
   1b64a:	4620      	mov	r0, r4
   1b64c:	f7fb fa98 	bl	16b80 <bsd_os_errno_set>
   1b650:	f04f 34ff 	mov.w	r4, #4294967295
   1b654:	4620      	mov	r0, r4
   1b656:	b003      	add	sp, #12
   1b658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b65c:	f006 fb18 	bl	21c90 <interface_socket_from_handle_get>
   1b660:	6803      	ldr	r3, [r0, #0]
   1b662:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1b6cc <tls_interface_accept+0xbc>
   1b666:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b66a:	6003      	str	r3, [r0, #0]
   1b66c:	6803      	ldr	r3, [r0, #0]
   1b66e:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   1b672:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b676:	00bf      	lsls	r7, r7, #2
   1b678:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b67c:	4605      	mov	r5, r0
   1b67e:	6003      	str	r3, [r0, #0]
   1b680:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   1b684:	2224      	movs	r2, #36	; 0x24
   1b686:	eb08 0007 	add.w	r0, r8, r7
   1b68a:	f7f1 fa5f 	bl	cb4c <memcpy>
   1b68e:	2302      	movs	r3, #2
   1b690:	f808 3007 	strb.w	r3, [r8, r7]
   1b694:	682a      	ldr	r2, [r5, #0]
   1b696:	ab01      	add	r3, sp, #4
   1b698:	0c12      	lsrs	r2, r2, #16
   1b69a:	0412      	lsls	r2, r2, #16
   1b69c:	f042 020b 	orr.w	r2, r2, #11
   1b6a0:	602a      	str	r2, [r5, #0]
   1b6a2:	210c      	movs	r1, #12
   1b6a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b6a8:	4620      	mov	r0, r4
   1b6aa:	f000 fa53 	bl	1bb54 <ip_interface_wait>
   1b6ae:	4605      	mov	r5, r0
   1b6b0:	2800      	cmp	r0, #0
   1b6b2:	d0cf      	beq.n	1b654 <tls_interface_accept+0x44>
   1b6b4:	4620      	mov	r0, r4
   1b6b6:	f000 fb45 	bl	1bd44 <ip_interface_close>
   1b6ba:	462c      	mov	r4, r5
   1b6bc:	e7c5      	b.n	1b64a <tls_interface_accept+0x3a>
   1b6be:	2409      	movs	r4, #9
   1b6c0:	e7c3      	b.n	1b64a <tls_interface_accept+0x3a>
   1b6c2:	202d      	movs	r0, #45	; 0x2d
   1b6c4:	f7fb fa5c 	bl	16b80 <bsd_os_errno_set>
   1b6c8:	e7c4      	b.n	1b654 <tls_interface_accept+0x44>
   1b6ca:	bf00      	nop
   1b6cc:	20021850 	.word	0x20021850

0001b6d0 <tls_interface_setopt>:
   1b6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6d4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b6d8:	b082      	sub	sp, #8
   1b6da:	9e08      	ldr	r6, [sp, #32]
   1b6dc:	d120      	bne.n	1b720 <tls_interface_setopt+0x50>
   1b6de:	4698      	mov	r8, r3
   1b6e0:	4617      	mov	r7, r2
   1b6e2:	4605      	mov	r5, r0
   1b6e4:	2b00      	cmp	r3, #0
   1b6e6:	f000 80a0 	beq.w	1b82a <tls_interface_setopt+0x15a>
   1b6ea:	f006 fad1 	bl	21c90 <interface_socket_from_handle_get>
   1b6ee:	2800      	cmp	r0, #0
   1b6f0:	f000 8097 	beq.w	1b822 <tls_interface_setopt+0x152>
   1b6f4:	6804      	ldr	r4, [r0, #0]
   1b6f6:	b2a4      	uxth	r4, r4
   1b6f8:	2c02      	cmp	r4, #2
   1b6fa:	d008      	beq.n	1b70e <tls_interface_setopt+0x3e>
   1b6fc:	6803      	ldr	r3, [r0, #0]
   1b6fe:	b29b      	uxth	r3, r3
   1b700:	2b04      	cmp	r3, #4
   1b702:	d004      	beq.n	1b70e <tls_interface_setopt+0x3e>
   1b704:	6803      	ldr	r3, [r0, #0]
   1b706:	b29b      	uxth	r3, r3
   1b708:	2b05      	cmp	r3, #5
   1b70a:	f040 808a 	bne.w	1b822 <tls_interface_setopt+0x152>
   1b70e:	1e7a      	subs	r2, r7, #1
   1b710:	2a05      	cmp	r2, #5
   1b712:	f200 8090 	bhi.w	1b836 <tls_interface_setopt+0x166>
   1b716:	e8df f002 	tbb	[pc, r2]
   1b71a:	2718      	.short	0x2718
   1b71c:	08594b3c 	.word	0x08594b3c
   1b720:	b002      	add	sp, #8
   1b722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b726:	f001 ba6b 	b.w	1cc00 <ip_interface_setopt>
   1b72a:	4601      	mov	r1, r0
   1b72c:	e9cd 8600 	strd	r8, r6, [sp]
   1b730:	4628      	mov	r0, r5
   1b732:	f247 0301 	movw	r3, #28673	; 0x7001
   1b736:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b73a:	f000 ff8b 	bl	1c654 <ip_interface_socketoption_send>
   1b73e:	2800      	cmp	r0, #0
   1b740:	d161      	bne.n	1b806 <tls_interface_setopt+0x136>
   1b742:	2000      	movs	r0, #0
   1b744:	b002      	add	sp, #8
   1b746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b74a:	2e04      	cmp	r6, #4
   1b74c:	d15a      	bne.n	1b804 <tls_interface_setopt+0x134>
   1b74e:	f8d8 0000 	ldr.w	r0, [r8]
   1b752:	2800      	cmp	r0, #0
   1b754:	d05e      	beq.n	1b814 <tls_interface_setopt+0x144>
   1b756:	2801      	cmp	r0, #1
   1b758:	d154      	bne.n	1b804 <tls_interface_setopt+0x134>
   1b75a:	4b38      	ldr	r3, [pc, #224]	; (1b83c <tls_interface_setopt+0x16c>)
   1b75c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b760:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   1b764:	2000      	movs	r0, #0
   1b766:	e7ed      	b.n	1b744 <tls_interface_setopt+0x74>
   1b768:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   1b76c:	d04a      	beq.n	1b804 <tls_interface_setopt+0x134>
   1b76e:	f016 0703 	ands.w	r7, r6, #3
   1b772:	d147      	bne.n	1b804 <tls_interface_setopt+0x134>
   1b774:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b778:	00a4      	lsls	r4, r4, #2
   1b77a:	4b30      	ldr	r3, [pc, #192]	; (1b83c <tls_interface_setopt+0x16c>)
   1b77c:	1d20      	adds	r0, r4, #4
   1b77e:	4418      	add	r0, r3
   1b780:	4423      	add	r3, r4
   1b782:	4632      	mov	r2, r6
   1b784:	4641      	mov	r1, r8
   1b786:	f883 c003 	strb.w	ip, [r3, #3]
   1b78a:	f7f1 f9df 	bl	cb4c <memcpy>
   1b78e:	4638      	mov	r0, r7
   1b790:	e7d8      	b.n	1b744 <tls_interface_setopt+0x74>
   1b792:	2e01      	cmp	r6, #1
   1b794:	d136      	bne.n	1b804 <tls_interface_setopt+0x134>
   1b796:	f898 2000 	ldrb.w	r2, [r8]
   1b79a:	4b28      	ldr	r3, [pc, #160]	; (1b83c <tls_interface_setopt+0x16c>)
   1b79c:	3200      	adds	r2, #0
   1b79e:	bf18      	it	ne
   1b7a0:	2201      	movne	r2, #1
   1b7a2:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b7a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b7aa:	7062      	strb	r2, [r4, #1]
   1b7ac:	2000      	movs	r0, #0
   1b7ae:	e7c9      	b.n	1b744 <tls_interface_setopt+0x74>
   1b7b0:	2e04      	cmp	r6, #4
   1b7b2:	d127      	bne.n	1b804 <tls_interface_setopt+0x134>
   1b7b4:	f8d8 2000 	ldr.w	r2, [r8]
   1b7b8:	2a02      	cmp	r2, #2
   1b7ba:	d823      	bhi.n	1b804 <tls_interface_setopt+0x134>
   1b7bc:	4b1f      	ldr	r3, [pc, #124]	; (1b83c <tls_interface_setopt+0x16c>)
   1b7be:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b7c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b7c6:	70a2      	strb	r2, [r4, #2]
   1b7c8:	2000      	movs	r0, #0
   1b7ca:	e7bb      	b.n	1b744 <tls_interface_setopt+0x74>
   1b7cc:	4c1c      	ldr	r4, [pc, #112]	; (1b840 <tls_interface_setopt+0x170>)
   1b7ce:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   1b7d2:	b138      	cbz	r0, 1b7e4 <tls_interface_setopt+0x114>
   1b7d4:	f005 fd5e 	bl	21294 <nrf_free>
   1b7d8:	2200      	movs	r2, #0
   1b7da:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1b7de:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   1b7e2:	605a      	str	r2, [r3, #4]
   1b7e4:	2e00      	cmp	r6, #0
   1b7e6:	d0ac      	beq.n	1b742 <tls_interface_setopt+0x72>
   1b7e8:	4630      	mov	r0, r6
   1b7ea:	f005 fd49 	bl	21280 <nrf_malloc>
   1b7ee:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1b7f2:	b1c0      	cbz	r0, 1b826 <tls_interface_setopt+0x156>
   1b7f4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b7f8:	4632      	mov	r2, r6
   1b7fa:	4641      	mov	r1, r8
   1b7fc:	6066      	str	r6, [r4, #4]
   1b7fe:	f7f1 f9a5 	bl	cb4c <memcpy>
   1b802:	e79e      	b.n	1b742 <tls_interface_setopt+0x72>
   1b804:	2016      	movs	r0, #22
   1b806:	f7fb f9bb 	bl	16b80 <bsd_os_errno_set>
   1b80a:	f04f 30ff 	mov.w	r0, #4294967295
   1b80e:	b002      	add	sp, #8
   1b810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b814:	2202      	movs	r2, #2
   1b816:	4b09      	ldr	r3, [pc, #36]	; (1b83c <tls_interface_setopt+0x16c>)
   1b818:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b81c:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   1b820:	e790      	b.n	1b744 <tls_interface_setopt+0x74>
   1b822:	2009      	movs	r0, #9
   1b824:	e7ef      	b.n	1b806 <tls_interface_setopt+0x136>
   1b826:	200c      	movs	r0, #12
   1b828:	e7ed      	b.n	1b806 <tls_interface_setopt+0x136>
   1b82a:	200e      	movs	r0, #14
   1b82c:	f7fb f9a8 	bl	16b80 <bsd_os_errno_set>
   1b830:	f04f 30ff 	mov.w	r0, #4294967295
   1b834:	e786      	b.n	1b744 <tls_interface_setopt+0x74>
   1b836:	202a      	movs	r0, #42	; 0x2a
   1b838:	e7e5      	b.n	1b806 <tls_interface_setopt+0x136>
   1b83a:	bf00      	nop
   1b83c:	20021850 	.word	0x20021850
   1b840:	20021994 	.word	0x20021994

0001b844 <tls_interface_getopt>:
   1b844:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b846:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b84a:	b083      	sub	sp, #12
   1b84c:	9f08      	ldr	r7, [sp, #32]
   1b84e:	d112      	bne.n	1b876 <tls_interface_getopt+0x32>
   1b850:	461d      	mov	r5, r3
   1b852:	b16b      	cbz	r3, 1b870 <tls_interface_getopt+0x2c>
   1b854:	b167      	cbz	r7, 1b870 <tls_interface_getopt+0x2c>
   1b856:	4606      	mov	r6, r0
   1b858:	4614      	mov	r4, r2
   1b85a:	f006 fa19 	bl	21c90 <interface_socket_from_handle_get>
   1b85e:	b178      	cbz	r0, 1b880 <tls_interface_getopt+0x3c>
   1b860:	3c01      	subs	r4, #1
   1b862:	2c05      	cmp	r4, #5
   1b864:	d859      	bhi.n	1b91a <tls_interface_getopt+0xd6>
   1b866:	e8df f004 	tbb	[pc, r4]
   1b86a:	2818      	.short	0x2818
   1b86c:	0d584c40 	.word	0x0d584c40
   1b870:	200e      	movs	r0, #14
   1b872:	b003      	add	sp, #12
   1b874:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b876:	b003      	add	sp, #12
   1b878:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b87c:	f001 ba62 	b.w	1cd44 <ip_interface_getopt>
   1b880:	2009      	movs	r0, #9
   1b882:	e7f6      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b884:	4601      	mov	r1, r0
   1b886:	e9cd 5700 	strd	r5, r7, [sp]
   1b88a:	4630      	mov	r0, r6
   1b88c:	f247 0301 	movw	r3, #28673	; 0x7001
   1b890:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b894:	f000 fe2e 	bl	1c4f4 <ip_interface_socketoption_get>
   1b898:	e7eb      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b89a:	683b      	ldr	r3, [r7, #0]
   1b89c:	2b04      	cmp	r3, #4
   1b89e:	d13e      	bne.n	1b91e <tls_interface_getopt+0xda>
   1b8a0:	4b22      	ldr	r3, [pc, #136]	; (1b92c <tls_interface_getopt+0xe8>)
   1b8a2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b8a6:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1b8aa:	2000      	movs	r0, #0
   1b8ac:	f1a3 0301 	sub.w	r3, r3, #1
   1b8b0:	fab3 f383 	clz	r3, r3
   1b8b4:	095b      	lsrs	r3, r3, #5
   1b8b6:	602b      	str	r3, [r5, #0]
   1b8b8:	e7db      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b8ba:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b8be:	491b      	ldr	r1, [pc, #108]	; (1b92c <tls_interface_getopt+0xe8>)
   1b8c0:	683b      	ldr	r3, [r7, #0]
   1b8c2:	00b6      	lsls	r6, r6, #2
   1b8c4:	198a      	adds	r2, r1, r6
   1b8c6:	f013 0403 	ands.w	r4, r3, #3
   1b8ca:	78d0      	ldrb	r0, [r2, #3]
   1b8cc:	d129      	bne.n	1b922 <tls_interface_getopt+0xde>
   1b8ce:	089b      	lsrs	r3, r3, #2
   1b8d0:	4283      	cmp	r3, r0
   1b8d2:	bf28      	it	cs
   1b8d4:	4603      	movcs	r3, r0
   1b8d6:	009a      	lsls	r2, r3, #2
   1b8d8:	b31b      	cbz	r3, 1b922 <tls_interface_getopt+0xde>
   1b8da:	3604      	adds	r6, #4
   1b8dc:	4431      	add	r1, r6
   1b8de:	603a      	str	r2, [r7, #0]
   1b8e0:	4628      	mov	r0, r5
   1b8e2:	f7f1 f933 	bl	cb4c <memcpy>
   1b8e6:	4620      	mov	r0, r4
   1b8e8:	e7c3      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b8ea:	683b      	ldr	r3, [r7, #0]
   1b8ec:	2b01      	cmp	r3, #1
   1b8ee:	d116      	bne.n	1b91e <tls_interface_getopt+0xda>
   1b8f0:	4b0e      	ldr	r3, [pc, #56]	; (1b92c <tls_interface_getopt+0xe8>)
   1b8f2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b8f6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1b8fa:	7873      	ldrb	r3, [r6, #1]
   1b8fc:	2000      	movs	r0, #0
   1b8fe:	702b      	strb	r3, [r5, #0]
   1b900:	e7b7      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b902:	683b      	ldr	r3, [r7, #0]
   1b904:	2b04      	cmp	r3, #4
   1b906:	d10a      	bne.n	1b91e <tls_interface_getopt+0xda>
   1b908:	4b08      	ldr	r3, [pc, #32]	; (1b92c <tls_interface_getopt+0xe8>)
   1b90a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b90e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1b912:	78b3      	ldrb	r3, [r6, #2]
   1b914:	2000      	movs	r0, #0
   1b916:	602b      	str	r3, [r5, #0]
   1b918:	e7ab      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b91a:	202a      	movs	r0, #42	; 0x2a
   1b91c:	e7a9      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b91e:	2016      	movs	r0, #22
   1b920:	e7a7      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b922:	2800      	cmp	r0, #0
   1b924:	d1fb      	bne.n	1b91e <tls_interface_getopt+0xda>
   1b926:	6038      	str	r0, [r7, #0]
   1b928:	e7a3      	b.n	1b872 <tls_interface_getopt+0x2e>
   1b92a:	bf00      	nop
   1b92c:	20021850 	.word	0x20021850

0001b930 <tls_rpc_ip_event_handler>:
   1b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b932:	f248 0581 	movw	r5, #32897	; 0x8081
   1b936:	42ab      	cmp	r3, r5
   1b938:	460c      	mov	r4, r1
   1b93a:	d044      	beq.n	1b9c6 <tls_rpc_ip_event_handler+0x96>
   1b93c:	f249 0182 	movw	r1, #36994	; 0x9082
   1b940:	428b      	cmp	r3, r1
   1b942:	4606      	mov	r6, r0
   1b944:	d02d      	beq.n	1b9a2 <tls_rpc_ip_event_handler+0x72>
   1b946:	f248 0102 	movw	r1, #32770	; 0x8002
   1b94a:	428b      	cmp	r3, r1
   1b94c:	d001      	beq.n	1b952 <tls_rpc_ip_event_handler+0x22>
   1b94e:	2001      	movs	r0, #1
   1b950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b952:	2c00      	cmp	r4, #0
   1b954:	d0fb      	beq.n	1b94e <tls_rpc_ip_event_handler+0x1e>
   1b956:	6963      	ldr	r3, [r4, #20]
   1b958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1b95c:	d002      	beq.n	1b964 <tls_rpc_ip_event_handler+0x34>
   1b95e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1b962:	d1f4      	bne.n	1b94e <tls_rpc_ip_event_handler+0x1e>
   1b964:	6823      	ldr	r3, [r4, #0]
   1b966:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b96a:	6023      	str	r3, [r4, #0]
   1b96c:	6955      	ldr	r5, [r2, #20]
   1b96e:	bb05      	cbnz	r5, 1b9b2 <tls_rpc_ip_event_handler+0x82>
   1b970:	6823      	ldr	r3, [r4, #0]
   1b972:	0c1b      	lsrs	r3, r3, #16
   1b974:	041b      	lsls	r3, r3, #16
   1b976:	f043 0305 	orr.w	r3, r3, #5
   1b97a:	6023      	str	r3, [r4, #0]
   1b97c:	6823      	ldr	r3, [r4, #0]
   1b97e:	00db      	lsls	r3, r3, #3
   1b980:	d50d      	bpl.n	1b99e <tls_rpc_ip_event_handler+0x6e>
   1b982:	4b2a      	ldr	r3, [pc, #168]	; (1ba2c <tls_rpc_ip_event_handler+0xfc>)
   1b984:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   1b988:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b98c:	2b02      	cmp	r3, #2
   1b98e:	d106      	bne.n	1b99e <tls_rpc_ip_event_handler+0x6e>
   1b990:	4630      	mov	r0, r6
   1b992:	4621      	mov	r1, r4
   1b994:	f7ff fb16 	bl	1afc4 <secure_client_socket>
   1b998:	b108      	cbz	r0, 1b99e <tls_rpc_ip_event_handler+0x6e>
   1b99a:	2873      	cmp	r0, #115	; 0x73
   1b99c:	d10c      	bne.n	1b9b8 <tls_rpc_ip_event_handler+0x88>
   1b99e:	2000      	movs	r0, #0
   1b9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9a2:	2c00      	cmp	r4, #0
   1b9a4:	d0fb      	beq.n	1b99e <tls_rpc_ip_event_handler+0x6e>
   1b9a6:	6823      	ldr	r3, [r4, #0]
   1b9a8:	b29b      	uxth	r3, r3
   1b9aa:	2b0b      	cmp	r3, #11
   1b9ac:	d1f7      	bne.n	1b99e <tls_rpc_ip_event_handler+0x6e>
   1b9ae:	6915      	ldr	r5, [r2, #16]
   1b9b0:	b1cd      	cbz	r5, 1b9e6 <tls_rpc_ip_event_handler+0xb6>
   1b9b2:	4628      	mov	r0, r5
   1b9b4:	f000 f890 	bl	1bad8 <rpc_error_to_nrf_bsd_error>
   1b9b8:	6060      	str	r0, [r4, #4]
   1b9ba:	6823      	ldr	r3, [r4, #0]
   1b9bc:	2000      	movs	r0, #0
   1b9be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b9c2:	6023      	str	r3, [r4, #0]
   1b9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9c6:	2900      	cmp	r1, #0
   1b9c8:	d0e9      	beq.n	1b99e <tls_rpc_ip_event_handler+0x6e>
   1b9ca:	680b      	ldr	r3, [r1, #0]
   1b9cc:	b29b      	uxth	r3, r3
   1b9ce:	2b0a      	cmp	r3, #10
   1b9d0:	d1e5      	bne.n	1b99e <tls_rpc_ip_event_handler+0x6e>
   1b9d2:	6950      	ldr	r0, [r2, #20]
   1b9d4:	2800      	cmp	r0, #0
   1b9d6:	d1ed      	bne.n	1b9b4 <tls_rpc_ip_event_handler+0x84>
   1b9d8:	680b      	ldr	r3, [r1, #0]
   1b9da:	0c1b      	lsrs	r3, r3, #16
   1b9dc:	041b      	lsls	r3, r3, #16
   1b9de:	f043 030b 	orr.w	r3, r3, #11
   1b9e2:	600b      	str	r3, [r1, #0]
   1b9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9e6:	6823      	ldr	r3, [r4, #0]
   1b9e8:	4f11      	ldr	r7, [pc, #68]	; (1ba30 <tls_rpc_ip_event_handler+0x100>)
   1b9ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1b9ee:	6023      	str	r3, [r4, #0]
   1b9f0:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   1b9f4:	b130      	cbz	r0, 1ba04 <tls_rpc_ip_event_handler+0xd4>
   1b9f6:	f005 fc4d 	bl	21294 <nrf_free>
   1b9fa:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1b9fe:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   1ba02:	605d      	str	r5, [r3, #4]
   1ba04:	6823      	ldr	r3, [r4, #0]
   1ba06:	2000      	movs	r0, #0
   1ba08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1ba0c:	6023      	str	r3, [r4, #0]
   1ba0e:	6823      	ldr	r3, [r4, #0]
   1ba10:	0c1b      	lsrs	r3, r3, #16
   1ba12:	041b      	lsls	r3, r3, #16
   1ba14:	f043 030c 	orr.w	r3, r3, #12
   1ba18:	6023      	str	r3, [r4, #0]
   1ba1a:	6823      	ldr	r3, [r4, #0]
   1ba1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ba20:	6023      	str	r3, [r4, #0]
   1ba22:	6823      	ldr	r3, [r4, #0]
   1ba24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1ba28:	6023      	str	r3, [r4, #0]
   1ba2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba2c:	20021850 	.word	0x20021850
   1ba30:	20021994 	.word	0x20021994

0001ba34 <ip_client_event_handler>:
   1ba34:	f850 1b08 	ldr.w	r1, [r0], #8
   1ba38:	0c09      	lsrs	r1, r1, #16
   1ba3a:	f001 bb23 	b.w	1d084 <rpc_ip_event_handler>
   1ba3e:	bf00      	nop

0001ba40 <rpc_ip_client_init>:
   1ba40:	4801      	ldr	r0, [pc, #4]	; (1ba48 <rpc_ip_client_init+0x8>)
   1ba42:	f001 be21 	b.w	1d688 <rpc_client_register>
   1ba46:	bf00      	nop
   1ba48:	0002f638 	.word	0x0002f638

0001ba4c <rpc_ip_client_request_alloc>:
   1ba4c:	2300      	movs	r3, #0
   1ba4e:	b510      	push	{r4, lr}
   1ba50:	b082      	sub	sp, #8
   1ba52:	9301      	str	r3, [sp, #4]
   1ba54:	b158      	cbz	r0, 1ba6e <rpc_ip_client_request_alloc+0x22>
   1ba56:	4604      	mov	r4, r0
   1ba58:	aa01      	add	r2, sp, #4
   1ba5a:	2004      	movs	r0, #4
   1ba5c:	f001 fe8e 	bl	1d77c <rpc_message_alloc>
   1ba60:	b918      	cbnz	r0, 1ba6a <rpc_ip_client_request_alloc+0x1e>
   1ba62:	9b01      	ldr	r3, [sp, #4]
   1ba64:	b10b      	cbz	r3, 1ba6a <rpc_ip_client_request_alloc+0x1e>
   1ba66:	3308      	adds	r3, #8
   1ba68:	6023      	str	r3, [r4, #0]
   1ba6a:	b002      	add	sp, #8
   1ba6c:	bd10      	pop	{r4, pc}
   1ba6e:	2007      	movs	r0, #7
   1ba70:	b002      	add	sp, #8
   1ba72:	bd10      	pop	{r4, pc}

0001ba74 <rpc_ip_client_request_send>:
   1ba74:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1ba78:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1ba7c:	d10b      	bne.n	1ba96 <rpc_ip_client_request_send+0x22>
   1ba7e:	b160      	cbz	r0, 1ba9a <rpc_ip_client_request_send+0x26>
   1ba80:	4603      	mov	r3, r0
   1ba82:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1ba86:	2004      	movs	r0, #4
   1ba88:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1ba8c:	f843 1d08 	str.w	r1, [r3, #-8]!
   1ba90:	4619      	mov	r1, r3
   1ba92:	f001 be63 	b.w	1d75c <rpc_message_send>
   1ba96:	200f      	movs	r0, #15
   1ba98:	4770      	bx	lr
   1ba9a:	2007      	movs	r0, #7
   1ba9c:	4770      	bx	lr
   1ba9e:	bf00      	nop

0001baa0 <rpc_ip_client_message_free>:
   1baa0:	b120      	cbz	r0, 1baac <rpc_ip_client_message_free+0xc>
   1baa2:	f1a0 0108 	sub.w	r1, r0, #8
   1baa6:	2004      	movs	r0, #4
   1baa8:	f001 be94 	b.w	1d7d4 <rpc_message_free>
   1baac:	2007      	movs	r0, #7
   1baae:	4770      	bx	lr

0001bab0 <rpc_ip_client_data_free>:
   1bab0:	b118      	cbz	r0, 1baba <rpc_ip_client_data_free+0xa>
   1bab2:	4601      	mov	r1, r0
   1bab4:	2004      	movs	r0, #4
   1bab6:	f001 be99 	b.w	1d7ec <rpc_message_data_free>
   1baba:	2007      	movs	r0, #7
   1babc:	4770      	bx	lr
   1babe:	bf00      	nop

0001bac0 <ip_recvd_packet_free_cb>:
   1bac0:	b510      	push	{r4, lr}
   1bac2:	4604      	mov	r4, r0
   1bac4:	6800      	ldr	r0, [r0, #0]
   1bac6:	f7ff fff3 	bl	1bab0 <rpc_ip_client_data_free>
   1baca:	68a0      	ldr	r0, [r4, #8]
   1bacc:	b118      	cbz	r0, 1bad6 <ip_recvd_packet_free_cb+0x16>
   1bace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bad2:	f005 bbdf 	b.w	21294 <nrf_free>
   1bad6:	bd10      	pop	{r4, pc}

0001bad8 <rpc_error_to_nrf_bsd_error>:
   1bad8:	2810      	cmp	r0, #16
   1bada:	bf9a      	itte	ls
   1badc:	4b02      	ldrls	r3, [pc, #8]	; (1bae8 <rpc_error_to_nrf_bsd_error+0x10>)
   1bade:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1bae2:	202d      	movhi	r0, #45	; 0x2d
   1bae4:	4770      	bx	lr
   1bae6:	bf00      	nop
   1bae8:	0002f648 	.word	0x0002f648

0001baec <ip_interface_request_create>:
   1baec:	b570      	push	{r4, r5, r6, lr}
   1baee:	2500      	movs	r5, #0
   1baf0:	b082      	sub	sp, #8
   1baf2:	ac02      	add	r4, sp, #8
   1baf4:	f844 5d04 	str.w	r5, [r4, #-4]!
   1baf8:	4606      	mov	r6, r0
   1bafa:	460d      	mov	r5, r1
   1bafc:	4620      	mov	r0, r4
   1bafe:	4619      	mov	r1, r3
   1bb00:	4614      	mov	r4, r2
   1bb02:	f7ff ffa3 	bl	1ba4c <rpc_ip_client_request_alloc>
   1bb06:	b960      	cbnz	r0, 1bb22 <ip_interface_request_create+0x36>
   1bb08:	9b01      	ldr	r3, [sp, #4]
   1bb0a:	2208      	movs	r2, #8
   1bb0c:	7258      	strb	r0, [r3, #9]
   1bb0e:	7298      	strb	r0, [r3, #10]
   1bb10:	72d8      	strb	r0, [r3, #11]
   1bb12:	4618      	mov	r0, r3
   1bb14:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1bb18:	60dc      	str	r4, [r3, #12]
   1bb1a:	611d      	str	r5, [r3, #16]
   1bb1c:	721a      	strb	r2, [r3, #8]
   1bb1e:	b002      	add	sp, #8
   1bb20:	bd70      	pop	{r4, r5, r6, pc}
   1bb22:	9b01      	ldr	r3, [sp, #4]
   1bb24:	4618      	mov	r0, r3
   1bb26:	b002      	add	sp, #8
   1bb28:	bd70      	pop	{r4, r5, r6, pc}
   1bb2a:	bf00      	nop

0001bb2c <ip_interface_request_send>:
   1bb2c:	b570      	push	{r4, r5, r6, lr}
   1bb2e:	460c      	mov	r4, r1
   1bb30:	4605      	mov	r5, r0
   1bb32:	4611      	mov	r1, r2
   1bb34:	4620      	mov	r0, r4
   1bb36:	461e      	mov	r6, r3
   1bb38:	f7ff ff9c 	bl	1ba74 <rpc_ip_client_request_send>
   1bb3c:	b900      	cbnz	r0, 1bb40 <ip_interface_request_send+0x14>
   1bb3e:	bd70      	pop	{r4, r5, r6, pc}
   1bb40:	6820      	ldr	r0, [r4, #0]
   1bb42:	b108      	cbz	r0, 1bb48 <ip_interface_request_send+0x1c>
   1bb44:	f7ff ffb4 	bl	1bab0 <rpc_ip_client_data_free>
   1bb48:	4620      	mov	r0, r4
   1bb4a:	f7ff ffa9 	bl	1baa0 <rpc_ip_client_message_free>
   1bb4e:	602e      	str	r6, [r5, #0]
   1bb50:	2023      	movs	r0, #35	; 0x23
   1bb52:	bd70      	pop	{r4, r5, r6, pc}

0001bb54 <ip_interface_wait>:
   1bb54:	b538      	push	{r3, r4, r5, lr}
   1bb56:	4605      	mov	r5, r0
   1bb58:	f006 f826 	bl	21ba8 <interface_socket_wait>
   1bb5c:	4604      	mov	r4, r0
   1bb5e:	b108      	cbz	r0, 1bb64 <ip_interface_wait+0x10>
   1bb60:	4620      	mov	r0, r4
   1bb62:	bd38      	pop	{r3, r4, r5, pc}
   1bb64:	4628      	mov	r0, r5
   1bb66:	f006 f893 	bl	21c90 <interface_socket_from_handle_get>
   1bb6a:	2800      	cmp	r0, #0
   1bb6c:	d0f8      	beq.n	1bb60 <ip_interface_wait+0xc>
   1bb6e:	6844      	ldr	r4, [r0, #4]
   1bb70:	2c00      	cmp	r4, #0
   1bb72:	d0f5      	beq.n	1bb60 <ip_interface_wait+0xc>
   1bb74:	2300      	movs	r3, #0
   1bb76:	6043      	str	r3, [r0, #4]
   1bb78:	4620      	mov	r0, r4
   1bb7a:	bd38      	pop	{r3, r4, r5, pc}

0001bb7c <ip_interface_init>:
   1bb7c:	b538      	push	{r3, r4, r5, lr}
   1bb7e:	2300      	movs	r3, #0
   1bb80:	4d09      	ldr	r5, [pc, #36]	; (1bba8 <ip_interface_init+0x2c>)
   1bb82:	4c0a      	ldr	r4, [pc, #40]	; (1bbac <ip_interface_init+0x30>)
   1bb84:	4619      	mov	r1, r3
   1bb86:	2224      	movs	r2, #36	; 0x24
   1bb88:	4809      	ldr	r0, [pc, #36]	; (1bbb0 <ip_interface_init+0x34>)
   1bb8a:	602b      	str	r3, [r5, #0]
   1bb8c:	6023      	str	r3, [r4, #0]
   1bb8e:	f00a fc53 	bl	26438 <memset>
   1bb92:	f7ff ff55 	bl	1ba40 <rpc_ip_client_init>
   1bb96:	b918      	cbnz	r0, 1bba0 <ip_interface_init+0x24>
   1bb98:	2201      	movs	r2, #1
   1bb9a:	4b06      	ldr	r3, [pc, #24]	; (1bbb4 <ip_interface_init+0x38>)
   1bb9c:	701a      	strb	r2, [r3, #0]
   1bb9e:	bd38      	pop	{r3, r4, r5, pc}
   1bba0:	f04f 30ff 	mov.w	r0, #4294967295
   1bba4:	bd38      	pop	{r3, r4, r5, pc}
   1bba6:	bf00      	nop
   1bba8:	200219e4 	.word	0x200219e4
   1bbac:	200219e0 	.word	0x200219e0
   1bbb0:	200219e8 	.word	0x200219e8
   1bbb4:	2002629a 	.word	0x2002629a

0001bbb8 <ip_interface_open>:
   1bbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbbc:	2500      	movs	r5, #0
   1bbbe:	f04f 37ff 	mov.w	r7, #4294967295
   1bbc2:	4c5e      	ldr	r4, [pc, #376]	; (1bd3c <ip_interface_open+0x184>)
   1bbc4:	4606      	mov	r6, r0
   1bbc6:	7820      	ldrb	r0, [r4, #0]
   1bbc8:	b084      	sub	sp, #16
   1bbca:	e9cd 5701 	strd	r5, r7, [sp, #4]
   1bbce:	2800      	cmp	r0, #0
   1bbd0:	f000 80b0 	beq.w	1bd34 <ip_interface_open+0x17c>
   1bbd4:	4690      	mov	r8, r2
   1bbd6:	f026 0208 	bic.w	r2, r6, #8
   1bbda:	2a02      	cmp	r2, #2
   1bbdc:	460c      	mov	r4, r1
   1bbde:	d002      	beq.n	1bbe6 <ip_interface_open+0x2e>
   1bbe0:	2e05      	cmp	r6, #5
   1bbe2:	f040 808d 	bne.w	1bd00 <ip_interface_open+0x148>
   1bbe6:	1e63      	subs	r3, r4, #1
   1bbe8:	2b02      	cmp	r3, #2
   1bbea:	f200 809d 	bhi.w	1bd28 <ip_interface_open+0x170>
   1bbee:	f1b8 0f00 	cmp.w	r8, #0
   1bbf2:	d159      	bne.n	1bca8 <ip_interface_open+0xf0>
   1bbf4:	2c01      	cmp	r4, #1
   1bbf6:	d06f      	beq.n	1bcd8 <ip_interface_open+0x120>
   1bbf8:	2c03      	cmp	r4, #3
   1bbfa:	bf18      	it	ne
   1bbfc:	f04f 0802 	movne.w	r8, #2
   1bc00:	4a4f      	ldr	r2, [pc, #316]	; (1bd40 <ip_interface_open+0x188>)
   1bc02:	4621      	mov	r1, r4
   1bc04:	a801      	add	r0, sp, #4
   1bc06:	f005 ff1d 	bl	21a44 <interface_socket_allocate>
   1bc0a:	9b01      	ldr	r3, [sp, #4]
   1bc0c:	4607      	mov	r7, r0
   1bc0e:	2b00      	cmp	r3, #0
   1bc10:	d060      	beq.n	1bcd4 <ip_interface_open+0x11c>
   1bc12:	2100      	movs	r1, #0
   1bc14:	a804      	add	r0, sp, #16
   1bc16:	f840 1d04 	str.w	r1, [r0, #-4]!
   1bc1a:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1bc1e:	f8c3 8014 	str.w	r8, [r3, #20]
   1bc22:	f7ff ff13 	bl	1ba4c <rpc_ip_client_request_alloc>
   1bc26:	2800      	cmp	r0, #0
   1bc28:	d151      	bne.n	1bcce <ip_interface_open+0x116>
   1bc2a:	f247 0201 	movw	r2, #28673	; 0x7001
   1bc2e:	f04f 33ff 	mov.w	r3, #4294967295
   1bc32:	2108      	movs	r1, #8
   1bc34:	9d03      	ldr	r5, [sp, #12]
   1bc36:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1bc3a:	60ea      	str	r2, [r5, #12]
   1bc3c:	7268      	strb	r0, [r5, #9]
   1bc3e:	72a8      	strb	r0, [r5, #10]
   1bc40:	72e8      	strb	r0, [r5, #11]
   1bc42:	7229      	strb	r1, [r5, #8]
   1bc44:	742b      	strb	r3, [r5, #16]
   1bc46:	746b      	strb	r3, [r5, #17]
   1bc48:	74ab      	strb	r3, [r5, #18]
   1bc4a:	74eb      	strb	r3, [r5, #19]
   1bc4c:	68ab      	ldr	r3, [r5, #8]
   1bc4e:	2e05      	cmp	r6, #5
   1bc50:	f103 030c 	add.w	r3, r3, #12
   1bc54:	60ab      	str	r3, [r5, #8]
   1bc56:	d003      	beq.n	1bc60 <ip_interface_open+0xa8>
   1bc58:	2e0a      	cmp	r6, #10
   1bc5a:	bf14      	ite	ne
   1bc5c:	2601      	movne	r6, #1
   1bc5e:	2602      	moveq	r6, #2
   1bc60:	616e      	str	r6, [r5, #20]
   1bc62:	f8c5 801c 	str.w	r8, [r5, #28]
   1bc66:	61ac      	str	r4, [r5, #24]
   1bc68:	f247 0101 	movw	r1, #28673	; 0x7001
   1bc6c:	4628      	mov	r0, r5
   1bc6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1bc72:	f7ff feff 	bl	1ba74 <rpc_ip_client_request_send>
   1bc76:	4606      	mov	r6, r0
   1bc78:	b380      	cbz	r0, 1bcdc <ip_interface_open+0x124>
   1bc7a:	6828      	ldr	r0, [r5, #0]
   1bc7c:	b108      	cbz	r0, 1bc82 <ip_interface_open+0xca>
   1bc7e:	f7ff ff17 	bl	1bab0 <rpc_ip_client_data_free>
   1bc82:	4628      	mov	r0, r5
   1bc84:	f7ff ff0c 	bl	1baa0 <rpc_ip_client_message_free>
   1bc88:	2301      	movs	r3, #1
   1bc8a:	2523      	movs	r5, #35	; 0x23
   1bc8c:	f8c8 3000 	str.w	r3, [r8]
   1bc90:	4638      	mov	r0, r7
   1bc92:	f005 ff3b 	bl	21b0c <interface_socket_free>
   1bc96:	4628      	mov	r0, r5
   1bc98:	f7fa ff72 	bl	16b80 <bsd_os_errno_set>
   1bc9c:	f04f 37ff 	mov.w	r7, #4294967295
   1bca0:	4638      	mov	r0, r7
   1bca2:	b004      	add	sp, #16
   1bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bca8:	2c01      	cmp	r4, #1
   1bcaa:	d00a      	beq.n	1bcc2 <ip_interface_open+0x10a>
   1bcac:	2c02      	cmp	r4, #2
   1bcae:	d10b      	bne.n	1bcc8 <ip_interface_open+0x110>
   1bcb0:	f1b8 0f02 	cmp.w	r8, #2
   1bcb4:	d0a4      	beq.n	1bc00 <ip_interface_open+0x48>
   1bcb6:	2029      	movs	r0, #41	; 0x29
   1bcb8:	f7fa ff62 	bl	16b80 <bsd_os_errno_set>
   1bcbc:	f04f 37ff 	mov.w	r7, #4294967295
   1bcc0:	e7ee      	b.n	1bca0 <ip_interface_open+0xe8>
   1bcc2:	f1b8 0f01 	cmp.w	r8, #1
   1bcc6:	d1f6      	bne.n	1bcb6 <ip_interface_open+0xfe>
   1bcc8:	f04f 0802 	mov.w	r8, #2
   1bccc:	e798      	b.n	1bc00 <ip_interface_open+0x48>
   1bcce:	9d03      	ldr	r5, [sp, #12]
   1bcd0:	2d00      	cmp	r5, #0
   1bcd2:	d1bb      	bne.n	1bc4c <ip_interface_open+0x94>
   1bcd4:	2569      	movs	r5, #105	; 0x69
   1bcd6:	e7db      	b.n	1bc90 <ip_interface_open+0xd8>
   1bcd8:	46a0      	mov	r8, r4
   1bcda:	e791      	b.n	1bc00 <ip_interface_open+0x48>
   1bcdc:	ab02      	add	r3, sp, #8
   1bcde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bce2:	2102      	movs	r1, #2
   1bce4:	4638      	mov	r0, r7
   1bce6:	f005 ff5f 	bl	21ba8 <interface_socket_wait>
   1bcea:	4605      	mov	r5, r0
   1bcec:	2800      	cmp	r0, #0
   1bcee:	d1cf      	bne.n	1bc90 <ip_interface_open+0xd8>
   1bcf0:	4638      	mov	r0, r7
   1bcf2:	f005 ffcd 	bl	21c90 <interface_socket_from_handle_get>
   1bcf6:	b138      	cbz	r0, 1bd08 <ip_interface_open+0x150>
   1bcf8:	6845      	ldr	r5, [r0, #4]
   1bcfa:	b12d      	cbz	r5, 1bd08 <ip_interface_open+0x150>
   1bcfc:	6046      	str	r6, [r0, #4]
   1bcfe:	e7c7      	b.n	1bc90 <ip_interface_open+0xd8>
   1bd00:	202f      	movs	r0, #47	; 0x2f
   1bd02:	f7fa ff3d 	bl	16b80 <bsd_os_errno_set>
   1bd06:	e7cb      	b.n	1bca0 <ip_interface_open+0xe8>
   1bd08:	3c02      	subs	r4, #2
   1bd0a:	2c01      	cmp	r4, #1
   1bd0c:	d8c8      	bhi.n	1bca0 <ip_interface_open+0xe8>
   1bd0e:	4638      	mov	r0, r7
   1bd10:	9b01      	ldr	r3, [sp, #4]
   1bd12:	681a      	ldr	r2, [r3, #0]
   1bd14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1bd18:	601a      	str	r2, [r3, #0]
   1bd1a:	681a      	ldr	r2, [r3, #0]
   1bd1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1bd20:	601a      	str	r2, [r3, #0]
   1bd22:	b004      	add	sp, #16
   1bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd28:	2016      	movs	r0, #22
   1bd2a:	f7fa ff29 	bl	16b80 <bsd_os_errno_set>
   1bd2e:	f04f 37ff 	mov.w	r7, #4294967295
   1bd32:	e7b5      	b.n	1bca0 <ip_interface_open+0xe8>
   1bd34:	2070      	movs	r0, #112	; 0x70
   1bd36:	f7fa ff23 	bl	16b80 <bsd_os_errno_set>
   1bd3a:	e7b1      	b.n	1bca0 <ip_interface_open+0xe8>
   1bd3c:	2002629a 	.word	0x2002629a
   1bd40:	0001bac1 	.word	0x0001bac1

0001bd44 <ip_interface_close>:
   1bd44:	f04f 33ff 	mov.w	r3, #4294967295
   1bd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd4c:	b082      	sub	sp, #8
   1bd4e:	4606      	mov	r6, r0
   1bd50:	9300      	str	r3, [sp, #0]
   1bd52:	f005 ff9d 	bl	21c90 <interface_socket_from_handle_get>
   1bd56:	2800      	cmp	r0, #0
   1bd58:	d062      	beq.n	1be20 <ip_interface_close+0xdc>
   1bd5a:	4604      	mov	r4, r0
   1bd5c:	2100      	movs	r1, #0
   1bd5e:	a802      	add	r0, sp, #8
   1bd60:	6827      	ldr	r7, [r4, #0]
   1bd62:	f840 1d04 	str.w	r1, [r0, #-4]!
   1bd66:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1bd6a:	f7ff fe6f 	bl	1ba4c <rpc_ip_client_request_alloc>
   1bd6e:	2800      	cmp	r0, #0
   1bd70:	d139      	bne.n	1bde6 <ip_interface_close+0xa2>
   1bd72:	f247 0309 	movw	r3, #28681	; 0x7009
   1bd76:	2208      	movs	r2, #8
   1bd78:	9d01      	ldr	r5, [sp, #4]
   1bd7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1bd7e:	60eb      	str	r3, [r5, #12]
   1bd80:	f8c5 8010 	str.w	r8, [r5, #16]
   1bd84:	7268      	strb	r0, [r5, #9]
   1bd86:	72a8      	strb	r0, [r5, #10]
   1bd88:	72e8      	strb	r0, [r5, #11]
   1bd8a:	722a      	strb	r2, [r5, #8]
   1bd8c:	6823      	ldr	r3, [r4, #0]
   1bd8e:	f247 0109 	movw	r1, #28681	; 0x7009
   1bd92:	0c1b      	lsrs	r3, r3, #16
   1bd94:	041b      	lsls	r3, r3, #16
   1bd96:	f043 030d 	orr.w	r3, r3, #13
   1bd9a:	6023      	str	r3, [r4, #0]
   1bd9c:	6823      	ldr	r3, [r4, #0]
   1bd9e:	4628      	mov	r0, r5
   1bda0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bda4:	6023      	str	r3, [r4, #0]
   1bda6:	6823      	ldr	r3, [r4, #0]
   1bda8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1bdac:	6023      	str	r3, [r4, #0]
   1bdae:	f7ff fe61 	bl	1ba74 <rpc_ip_client_request_send>
   1bdb2:	bb38      	cbnz	r0, 1be04 <ip_interface_close+0xc0>
   1bdb4:	466b      	mov	r3, sp
   1bdb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bdba:	210e      	movs	r1, #14
   1bdbc:	4630      	mov	r0, r6
   1bdbe:	f005 fef3 	bl	21ba8 <interface_socket_wait>
   1bdc2:	4604      	mov	r4, r0
   1bdc4:	b1a0      	cbz	r0, 1bdf0 <ip_interface_close+0xac>
   1bdc6:	4c17      	ldr	r4, [pc, #92]	; (1be24 <ip_interface_close+0xe0>)
   1bdc8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1bdcc:	b120      	cbz	r0, 1bdd8 <ip_interface_close+0x94>
   1bdce:	f7ff fe67 	bl	1baa0 <rpc_ip_client_message_free>
   1bdd2:	2300      	movs	r3, #0
   1bdd4:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1bdd8:	4630      	mov	r0, r6
   1bdda:	f005 fe97 	bl	21b0c <interface_socket_free>
   1bdde:	2000      	movs	r0, #0
   1bde0:	b002      	add	sp, #8
   1bde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bde6:	9d01      	ldr	r5, [sp, #4]
   1bde8:	200c      	movs	r0, #12
   1bdea:	2d00      	cmp	r5, #0
   1bdec:	d1ce      	bne.n	1bd8c <ip_interface_close+0x48>
   1bdee:	e012      	b.n	1be16 <ip_interface_close+0xd2>
   1bdf0:	4630      	mov	r0, r6
   1bdf2:	f005 ff4d 	bl	21c90 <interface_socket_from_handle_get>
   1bdf6:	2800      	cmp	r0, #0
   1bdf8:	d0e5      	beq.n	1bdc6 <ip_interface_close+0x82>
   1bdfa:	6843      	ldr	r3, [r0, #4]
   1bdfc:	2b00      	cmp	r3, #0
   1bdfe:	d0e2      	beq.n	1bdc6 <ip_interface_close+0x82>
   1be00:	6044      	str	r4, [r0, #4]
   1be02:	e7e0      	b.n	1bdc6 <ip_interface_close+0x82>
   1be04:	6828      	ldr	r0, [r5, #0]
   1be06:	b108      	cbz	r0, 1be0c <ip_interface_close+0xc8>
   1be08:	f7ff fe52 	bl	1bab0 <rpc_ip_client_data_free>
   1be0c:	4628      	mov	r0, r5
   1be0e:	f7ff fe47 	bl	1baa0 <rpc_ip_client_message_free>
   1be12:	2023      	movs	r0, #35	; 0x23
   1be14:	6027      	str	r7, [r4, #0]
   1be16:	f7fa feb3 	bl	16b80 <bsd_os_errno_set>
   1be1a:	f04f 30ff 	mov.w	r0, #4294967295
   1be1e:	e7df      	b.n	1bde0 <ip_interface_close+0x9c>
   1be20:	2009      	movs	r0, #9
   1be22:	e7f8      	b.n	1be16 <ip_interface_close+0xd2>
   1be24:	200219e8 	.word	0x200219e8

0001be28 <ip_interface_sendto>:
   1be28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be2c:	2400      	movs	r4, #0
   1be2e:	b08b      	sub	sp, #44	; 0x2c
   1be30:	9102      	str	r1, [sp, #8]
   1be32:	4615      	mov	r5, r2
   1be34:	4699      	mov	r9, r3
   1be36:	9407      	str	r4, [sp, #28]
   1be38:	4607      	mov	r7, r0
   1be3a:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1be3c:	f005 ff28 	bl	21c90 <interface_socket_from_handle_get>
   1be40:	2800      	cmp	r0, #0
   1be42:	f000 8163 	beq.w	1c10c <ip_interface_sendto+0x2e4>
   1be46:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1be4a:	f300 8150 	bgt.w	1c0ee <ip_interface_sendto+0x2c6>
   1be4e:	6903      	ldr	r3, [r0, #16]
   1be50:	4604      	mov	r4, r0
   1be52:	2b01      	cmp	r3, #1
   1be54:	f000 8109 	beq.w	1c06a <ip_interface_sendto+0x242>
   1be58:	6822      	ldr	r2, [r4, #0]
   1be5a:	0391      	lsls	r1, r2, #14
   1be5c:	d569      	bpl.n	1bf32 <ip_interface_sendto+0x10a>
   1be5e:	f1b9 0f00 	cmp.w	r9, #0
   1be62:	f000 8112 	beq.w	1c08a <ip_interface_sendto+0x262>
   1be66:	f019 0f02 	tst.w	r9, #2
   1be6a:	f000 814a 	beq.w	1c102 <ip_interface_sendto+0x2da>
   1be6e:	2300      	movs	r3, #0
   1be70:	9303      	str	r3, [sp, #12]
   1be72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be74:	f247 0806 	movw	r8, #28678	; 0x7006
   1be78:	2b00      	cmp	r3, #0
   1be7a:	bf08      	it	eq
   1be7c:	f04f 33ff 	moveq.w	r3, #4294967295
   1be80:	f04f 0b0c 	mov.w	fp, #12
   1be84:	4aa5      	ldr	r2, [pc, #660]	; (1c11c <ip_interface_sendto+0x2f4>)
   1be86:	9308      	str	r3, [sp, #32]
   1be88:	043b      	lsls	r3, r7, #16
   1be8a:	9200      	str	r2, [sp, #0]
   1be8c:	9304      	str	r3, [sp, #16]
   1be8e:	4629      	mov	r1, r5
   1be90:	a807      	add	r0, sp, #28
   1be92:	f7ff fddb 	bl	1ba4c <rpc_ip_client_request_alloc>
   1be96:	2804      	cmp	r0, #4
   1be98:	d05e      	beq.n	1bf58 <ip_interface_sendto+0x130>
   1be9a:	2800      	cmp	r0, #0
   1be9c:	f040 813b 	bne.w	1c116 <ip_interface_sendto+0x2ee>
   1bea0:	9b07      	ldr	r3, [sp, #28]
   1bea2:	f883 b008 	strb.w	fp, [r3, #8]
   1bea6:	7258      	strb	r0, [r3, #9]
   1bea8:	7298      	strb	r0, [r3, #10]
   1beaa:	72d8      	strb	r0, [r3, #11]
   1beac:	2e00      	cmp	r6, #0
   1beae:	d06b      	beq.n	1bf88 <ip_interface_sendto+0x160>
   1beb0:	68e2      	ldr	r2, [r4, #12]
   1beb2:	6871      	ldr	r1, [r6, #4]
   1beb4:	428a      	cmp	r2, r1
   1beb6:	f040 80a8 	bne.w	1c00a <ip_interface_sendto+0x1e2>
   1beba:	7831      	ldrb	r1, [r6, #0]
   1bebc:	9815      	ldr	r0, [sp, #84]	; 0x54
   1bebe:	4288      	cmp	r0, r1
   1bec0:	d10a      	bne.n	1bed8 <ip_interface_sendto+0xb0>
   1bec2:	2a02      	cmp	r2, #2
   1bec4:	f103 001c 	add.w	r0, r3, #28
   1bec8:	f000 80ff 	beq.w	1c0ca <ip_interface_sendto+0x2a2>
   1becc:	2a0a      	cmp	r2, #10
   1bece:	d103      	bne.n	1bed8 <ip_interface_sendto+0xb0>
   1bed0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bed2:	2a24      	cmp	r2, #36	; 0x24
   1bed4:	f000 80e6 	beq.w	1c0a4 <ip_interface_sendto+0x27c>
   1bed8:	f04f 0a16 	mov.w	sl, #22
   1bedc:	6818      	ldr	r0, [r3, #0]
   1bede:	b110      	cbz	r0, 1bee6 <ip_interface_sendto+0xbe>
   1bee0:	f7ff fde6 	bl	1bab0 <rpc_ip_client_data_free>
   1bee4:	9b07      	ldr	r3, [sp, #28]
   1bee6:	4618      	mov	r0, r3
   1bee8:	f7ff fdda 	bl	1baa0 <rpc_ip_client_message_free>
   1beec:	6823      	ldr	r3, [r4, #0]
   1beee:	0318      	lsls	r0, r3, #12
   1bef0:	d40b      	bmi.n	1bf0a <ip_interface_sendto+0xe2>
   1bef2:	6823      	ldr	r3, [r4, #0]
   1bef4:	b29b      	uxth	r3, r3
   1bef6:	2b0d      	cmp	r3, #13
   1bef8:	d007      	beq.n	1bf0a <ip_interface_sendto+0xe2>
   1befa:	6823      	ldr	r3, [r4, #0]
   1befc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1bf00:	6023      	str	r3, [r4, #0]
   1bf02:	6823      	ldr	r3, [r4, #0]
   1bf04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bf08:	6023      	str	r3, [r4, #0]
   1bf0a:	f1ba 0f00 	cmp.w	sl, #0
   1bf0e:	f040 80b3 	bne.w	1c078 <ip_interface_sendto+0x250>
   1bf12:	6823      	ldr	r3, [r4, #0]
   1bf14:	0119      	lsls	r1, r3, #4
   1bf16:	d57b      	bpl.n	1c010 <ip_interface_sendto+0x1e8>
   1bf18:	6823      	ldr	r3, [r4, #0]
   1bf1a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1bf1e:	6023      	str	r3, [r4, #0]
   1bf20:	9b00      	ldr	r3, [sp, #0]
   1bf22:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bf26:	2800      	cmp	r0, #0
   1bf28:	d176      	bne.n	1c018 <ip_interface_sendto+0x1f0>
   1bf2a:	4628      	mov	r0, r5
   1bf2c:	b00b      	add	sp, #44	; 0x2c
   1bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf32:	6822      	ldr	r2, [r4, #0]
   1bf34:	0092      	lsls	r2, r2, #2
   1bf36:	d406      	bmi.n	1bf46 <ip_interface_sendto+0x11e>
   1bf38:	2b01      	cmp	r3, #1
   1bf3a:	f000 80ad 	beq.w	1c098 <ip_interface_sendto+0x270>
   1bf3e:	6823      	ldr	r3, [r4, #0]
   1bf40:	031b      	lsls	r3, r3, #12
   1bf42:	f140 80cf 	bpl.w	1c0e4 <ip_interface_sendto+0x2bc>
   1bf46:	6823      	ldr	r3, [r4, #0]
   1bf48:	031e      	lsls	r6, r3, #12
   1bf4a:	f140 80d5 	bpl.w	1c0f8 <ip_interface_sendto+0x2d0>
   1bf4e:	4b73      	ldr	r3, [pc, #460]	; (1c11c <ip_interface_sendto+0x2f4>)
   1bf50:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1bf54:	9300      	str	r3, [sp, #0]
   1bf56:	e7d8      	b.n	1bf0a <ip_interface_sendto+0xe2>
   1bf58:	9b03      	ldr	r3, [sp, #12]
   1bf5a:	2b00      	cmp	r3, #0
   1bf5c:	d052      	beq.n	1c004 <ip_interface_sendto+0x1dc>
   1bf5e:	9b08      	ldr	r3, [sp, #32]
   1bf60:	3301      	adds	r3, #1
   1bf62:	d094      	beq.n	1be8e <ip_interface_sendto+0x66>
   1bf64:	230a      	movs	r3, #10
   1bf66:	a90a      	add	r1, sp, #40	; 0x28
   1bf68:	f841 3d04 	str.w	r3, [r1, #-4]!
   1bf6c:	2000      	movs	r0, #0
   1bf6e:	f7fa fd4f 	bl	16a10 <bsd_os_timedwait>
   1bf72:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1bf76:	f1c2 020a 	rsb	r2, r2, #10
   1bf7a:	1a9b      	subs	r3, r3, r2
   1bf7c:	2b00      	cmp	r3, #0
   1bf7e:	9308      	str	r3, [sp, #32]
   1bf80:	dc85      	bgt.n	1be8e <ip_interface_sendto+0x66>
   1bf82:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   1bf86:	e7b1      	b.n	1beec <ip_interface_sendto+0xc4>
   1bf88:	4642      	mov	r2, r8
   1bf8a:	f8c3 9014 	str.w	r9, [r3, #20]
   1bf8e:	69a1      	ldr	r1, [r4, #24]
   1bf90:	9804      	ldr	r0, [sp, #16]
   1bf92:	6119      	str	r1, [r3, #16]
   1bf94:	9902      	ldr	r1, [sp, #8]
   1bf96:	4302      	orrs	r2, r0
   1bf98:	60da      	str	r2, [r3, #12]
   1bf9a:	605d      	str	r5, [r3, #4]
   1bf9c:	b119      	cbz	r1, 1bfa6 <ip_interface_sendto+0x17e>
   1bf9e:	6818      	ldr	r0, [r3, #0]
   1bfa0:	462a      	mov	r2, r5
   1bfa2:	f7f0 fdd3 	bl	cb4c <memcpy>
   1bfa6:	6823      	ldr	r3, [r4, #0]
   1bfa8:	4641      	mov	r1, r8
   1bfaa:	9305      	str	r3, [sp, #20]
   1bfac:	6823      	ldr	r3, [r4, #0]
   1bfae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bfb2:	6023      	str	r3, [r4, #0]
   1bfb4:	6823      	ldr	r3, [r4, #0]
   1bfb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1bfba:	6023      	str	r3, [r4, #0]
   1bfbc:	9b07      	ldr	r3, [sp, #28]
   1bfbe:	4618      	mov	r0, r3
   1bfc0:	9301      	str	r3, [sp, #4]
   1bfc2:	f7ff fd57 	bl	1ba74 <rpc_ip_client_request_send>
   1bfc6:	9b01      	ldr	r3, [sp, #4]
   1bfc8:	4682      	mov	sl, r0
   1bfca:	bb78      	cbnz	r0, 1c02c <ip_interface_sendto+0x204>
   1bfcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1bfd0:	ab08      	add	r3, sp, #32
   1bfd2:	4611      	mov	r1, r2
   1bfd4:	4638      	mov	r0, r7
   1bfd6:	f005 fde7 	bl	21ba8 <interface_socket_wait>
   1bfda:	4603      	mov	r3, r0
   1bfdc:	b398      	cbz	r0, 1c046 <ip_interface_sendto+0x21e>
   1bfde:	6822      	ldr	r2, [r4, #0]
   1bfe0:	0312      	lsls	r2, r2, #12
   1bfe2:	d43f      	bmi.n	1c064 <ip_interface_sendto+0x23c>
   1bfe4:	2b3c      	cmp	r3, #60	; 0x3c
   1bfe6:	d001      	beq.n	1bfec <ip_interface_sendto+0x1c4>
   1bfe8:	2b0c      	cmp	r3, #12
   1bfea:	d001      	beq.n	1bff0 <ip_interface_sendto+0x1c8>
   1bfec:	469a      	mov	sl, r3
   1bfee:	e77d      	b.n	1beec <ip_interface_sendto+0xc4>
   1bff0:	9b00      	ldr	r3, [sp, #0]
   1bff2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bff6:	b108      	cbz	r0, 1bffc <ip_interface_sendto+0x1d4>
   1bff8:	f7ff fd52 	bl	1baa0 <rpc_ip_client_message_free>
   1bffc:	9b03      	ldr	r3, [sp, #12]
   1bffe:	2b00      	cmp	r3, #0
   1c000:	f47f af45 	bne.w	1be8e <ip_interface_sendto+0x66>
   1c004:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1c008:	e770      	b.n	1beec <ip_interface_sendto+0xc4>
   1c00a:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   1c00e:	e765      	b.n	1bedc <ip_interface_sendto+0xb4>
   1c010:	9b00      	ldr	r3, [sp, #0]
   1c012:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1c016:	6985      	ldr	r5, [r0, #24]
   1c018:	f7ff fd42 	bl	1baa0 <rpc_ip_client_message_free>
   1c01c:	2300      	movs	r3, #0
   1c01e:	4628      	mov	r0, r5
   1c020:	9a00      	ldr	r2, [sp, #0]
   1c022:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   1c026:	b00b      	add	sp, #44	; 0x2c
   1c028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c02c:	6818      	ldr	r0, [r3, #0]
   1c02e:	469a      	mov	sl, r3
   1c030:	b108      	cbz	r0, 1c036 <ip_interface_sendto+0x20e>
   1c032:	f7ff fd3d 	bl	1bab0 <rpc_ip_client_data_free>
   1c036:	4650      	mov	r0, sl
   1c038:	f7ff fd32 	bl	1baa0 <rpc_ip_client_message_free>
   1c03c:	9b05      	ldr	r3, [sp, #20]
   1c03e:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1c042:	6023      	str	r3, [r4, #0]
   1c044:	e752      	b.n	1beec <ip_interface_sendto+0xc4>
   1c046:	9001      	str	r0, [sp, #4]
   1c048:	4638      	mov	r0, r7
   1c04a:	f005 fe21 	bl	21c90 <interface_socket_from_handle_get>
   1c04e:	9b01      	ldr	r3, [sp, #4]
   1c050:	2800      	cmp	r0, #0
   1c052:	d0cb      	beq.n	1bfec <ip_interface_sendto+0x1c4>
   1c054:	6843      	ldr	r3, [r0, #4]
   1c056:	2b00      	cmp	r3, #0
   1c058:	d0c8      	beq.n	1bfec <ip_interface_sendto+0x1c4>
   1c05a:	f8c0 a004 	str.w	sl, [r0, #4]
   1c05e:	6822      	ldr	r2, [r4, #0]
   1c060:	0312      	lsls	r2, r2, #12
   1c062:	d5bf      	bpl.n	1bfe4 <ip_interface_sendto+0x1bc>
   1c064:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1c068:	e740      	b.n	1beec <ip_interface_sendto+0xc4>
   1c06a:	2e00      	cmp	r6, #0
   1c06c:	f43f aef4 	beq.w	1be58 <ip_interface_sendto+0x30>
   1c070:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1c074:	4b29      	ldr	r3, [pc, #164]	; (1c11c <ip_interface_sendto+0x2f4>)
   1c076:	9300      	str	r3, [sp, #0]
   1c078:	4650      	mov	r0, sl
   1c07a:	f7fa fd81 	bl	16b80 <bsd_os_errno_set>
   1c07e:	9b00      	ldr	r3, [sp, #0]
   1c080:	f04f 35ff 	mov.w	r5, #4294967295
   1c084:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1c088:	e74d      	b.n	1bf26 <ip_interface_sendto+0xfe>
   1c08a:	6823      	ldr	r3, [r4, #0]
   1c08c:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   1c090:	f3c3 7300 	ubfx	r3, r3, #28, #1
   1c094:	9303      	str	r3, [sp, #12]
   1c096:	e6ec      	b.n	1be72 <ip_interface_sendto+0x4a>
   1c098:	6823      	ldr	r3, [r4, #0]
   1c09a:	b29b      	uxth	r3, r3
   1c09c:	2b05      	cmp	r3, #5
   1c09e:	f47f af52 	bne.w	1bf46 <ip_interface_sendto+0x11e>
   1c0a2:	e74c      	b.n	1bf3e <ip_interface_sendto+0x116>
   1c0a4:	2210      	movs	r2, #16
   1c0a6:	8931      	ldrh	r1, [r6, #8]
   1c0a8:	835a      	strh	r2, [r3, #26]
   1c0aa:	8319      	strh	r1, [r3, #24]
   1c0ac:	18b1      	adds	r1, r6, r2
   1c0ae:	f7f0 fd4d 	bl	cb4c <memcpy>
   1c0b2:	f247 0207 	movw	r2, #28679	; 0x7007
   1c0b6:	9b07      	ldr	r3, [sp, #28]
   1c0b8:	4690      	mov	r8, r2
   1c0ba:	6899      	ldr	r1, [r3, #8]
   1c0bc:	8b58      	ldrh	r0, [r3, #26]
   1c0be:	3104      	adds	r1, #4
   1c0c0:	4401      	add	r1, r0
   1c0c2:	f8c3 9014 	str.w	r9, [r3, #20]
   1c0c6:	6099      	str	r1, [r3, #8]
   1c0c8:	e761      	b.n	1bf8e <ip_interface_sendto+0x166>
   1c0ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1c0cc:	2a10      	cmp	r2, #16
   1c0ce:	f47f af03 	bne.w	1bed8 <ip_interface_sendto+0xb0>
   1c0d2:	2204      	movs	r2, #4
   1c0d4:	8931      	ldrh	r1, [r6, #8]
   1c0d6:	835a      	strh	r2, [r3, #26]
   1c0d8:	8319      	strh	r1, [r3, #24]
   1c0da:	f106 010c 	add.w	r1, r6, #12
   1c0de:	f7f0 fd35 	bl	cb4c <memcpy>
   1c0e2:	e7e6      	b.n	1c0b2 <ip_interface_sendto+0x28a>
   1c0e4:	4b0d      	ldr	r3, [pc, #52]	; (1c11c <ip_interface_sendto+0x2f4>)
   1c0e6:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1c0ea:	9300      	str	r3, [sp, #0]
   1c0ec:	e7c4      	b.n	1c078 <ip_interface_sendto+0x250>
   1c0ee:	4b0b      	ldr	r3, [pc, #44]	; (1c11c <ip_interface_sendto+0x2f4>)
   1c0f0:	f04f 0a28 	mov.w	sl, #40	; 0x28
   1c0f4:	9300      	str	r3, [sp, #0]
   1c0f6:	e7bf      	b.n	1c078 <ip_interface_sendto+0x250>
   1c0f8:	4b08      	ldr	r3, [pc, #32]	; (1c11c <ip_interface_sendto+0x2f4>)
   1c0fa:	f04f 0a39 	mov.w	sl, #57	; 0x39
   1c0fe:	9300      	str	r3, [sp, #0]
   1c100:	e7ba      	b.n	1c078 <ip_interface_sendto+0x250>
   1c102:	4b06      	ldr	r3, [pc, #24]	; (1c11c <ip_interface_sendto+0x2f4>)
   1c104:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1c108:	9300      	str	r3, [sp, #0]
   1c10a:	e7b5      	b.n	1c078 <ip_interface_sendto+0x250>
   1c10c:	4b03      	ldr	r3, [pc, #12]	; (1c11c <ip_interface_sendto+0x2f4>)
   1c10e:	f04f 0a09 	mov.w	sl, #9
   1c112:	9300      	str	r3, [sp, #0]
   1c114:	e7b0      	b.n	1c078 <ip_interface_sendto+0x250>
   1c116:	f04f 0a0c 	mov.w	sl, #12
   1c11a:	e6e7      	b.n	1beec <ip_interface_sendto+0xc4>
   1c11c:	200219e8 	.word	0x200219e8

0001c120 <ip_interface_recvfrom>:
   1c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c124:	b087      	sub	sp, #28
   1c126:	2a00      	cmp	r2, #0
   1c128:	f000 8112 	beq.w	1c350 <ip_interface_recvfrom+0x230>
   1c12c:	4680      	mov	r8, r0
   1c12e:	468b      	mov	fp, r1
   1c130:	469a      	mov	sl, r3
   1c132:	4691      	mov	r9, r2
   1c134:	b11b      	cbz	r3, 1c13e <ip_interface_recvfrom+0x1e>
   1c136:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1c13a:	f000 8107 	beq.w	1c34c <ip_interface_recvfrom+0x22c>
   1c13e:	4640      	mov	r0, r8
   1c140:	f005 fda6 	bl	21c90 <interface_socket_from_handle_get>
   1c144:	4604      	mov	r4, r0
   1c146:	2800      	cmp	r0, #0
   1c148:	f000 8104 	beq.w	1c354 <ip_interface_recvfrom+0x234>
   1c14c:	6803      	ldr	r3, [r0, #0]
   1c14e:	02db      	lsls	r3, r3, #11
   1c150:	d562      	bpl.n	1c218 <ip_interface_recvfrom+0xf8>
   1c152:	f01a 0f02 	tst.w	sl, #2
   1c156:	bf18      	it	ne
   1c158:	2600      	movne	r6, #0
   1c15a:	f04f 35ff 	mov.w	r5, #4294967295
   1c15e:	bf08      	it	eq
   1c160:	6806      	ldreq	r6, [r0, #0]
   1c162:	f00a 0310 	and.w	r3, sl, #16
   1c166:	bf04      	itt	eq
   1c168:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   1c16c:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   1c170:	9301      	str	r3, [sp, #4]
   1c172:	6823      	ldr	r3, [r4, #0]
   1c174:	03df      	lsls	r7, r3, #15
   1c176:	d567      	bpl.n	1c248 <ip_interface_recvfrom+0x128>
   1c178:	6823      	ldr	r3, [r4, #0]
   1c17a:	69e0      	ldr	r0, [r4, #28]
   1c17c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c180:	6023      	str	r3, [r4, #0]
   1c182:	6803      	ldr	r3, [r0, #0]
   1c184:	68db      	ldr	r3, [r3, #12]
   1c186:	4798      	blx	r3
   1c188:	4605      	mov	r5, r0
   1c18a:	3001      	adds	r0, #1
   1c18c:	d07d      	beq.n	1c28a <ip_interface_recvfrom+0x16a>
   1c18e:	45a9      	cmp	r9, r5
   1c190:	dd03      	ble.n	1c19a <ip_interface_recvfrom+0x7a>
   1c192:	6923      	ldr	r3, [r4, #16]
   1c194:	2b01      	cmp	r3, #1
   1c196:	f000 80a3 	beq.w	1c2e0 <ip_interface_recvfrom+0x1c0>
   1c19a:	f04f 0800 	mov.w	r8, #0
   1c19e:	af02      	add	r7, sp, #8
   1c1a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c1a2:	b103      	cbz	r3, 1c1a6 <ip_interface_recvfrom+0x86>
   1c1a4:	681b      	ldr	r3, [r3, #0]
   1c1a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c1a8:	e9cd b902 	strd	fp, r9, [sp, #8]
   1c1ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c1b0:	69e0      	ldr	r0, [r4, #28]
   1c1b2:	4639      	mov	r1, r7
   1c1b4:	6803      	ldr	r3, [r0, #0]
   1c1b6:	4652      	mov	r2, sl
   1c1b8:	689b      	ldr	r3, [r3, #8]
   1c1ba:	4798      	blx	r3
   1c1bc:	4605      	mov	r5, r0
   1c1be:	69e0      	ldr	r0, [r4, #28]
   1c1c0:	1c6b      	adds	r3, r5, #1
   1c1c2:	6803      	ldr	r3, [r0, #0]
   1c1c4:	bf18      	it	ne
   1c1c6:	2701      	movne	r7, #1
   1c1c8:	68db      	ldr	r3, [r3, #12]
   1c1ca:	bf0a      	itet	eq
   1c1cc:	2700      	moveq	r7, #0
   1c1ce:	2600      	movne	r6, #0
   1c1d0:	2623      	moveq	r6, #35	; 0x23
   1c1d2:	4798      	blx	r3
   1c1d4:	3001      	adds	r0, #1
   1c1d6:	d132      	bne.n	1c23e <ip_interface_recvfrom+0x11e>
   1c1d8:	f1b8 0f00 	cmp.w	r8, #0
   1c1dc:	f000 80b0 	beq.w	1c340 <ip_interface_recvfrom+0x220>
   1c1e0:	2f00      	cmp	r7, #0
   1c1e2:	f000 80a1 	beq.w	1c328 <ip_interface_recvfrom+0x208>
   1c1e6:	6823      	ldr	r3, [r4, #0]
   1c1e8:	0318      	lsls	r0, r3, #12
   1c1ea:	d506      	bpl.n	1c1fa <ip_interface_recvfrom+0xda>
   1c1ec:	6823      	ldr	r3, [r4, #0]
   1c1ee:	b29b      	uxth	r3, r3
   1c1f0:	2b0d      	cmp	r3, #13
   1c1f2:	d002      	beq.n	1c1fa <ip_interface_recvfrom+0xda>
   1c1f4:	6923      	ldr	r3, [r4, #16]
   1c1f6:	2b01      	cmp	r3, #1
   1c1f8:	d021      	beq.n	1c23e <ip_interface_recvfrom+0x11e>
   1c1fa:	6823      	ldr	r3, [r4, #0]
   1c1fc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1c200:	6823      	ldr	r3, [r4, #0]
   1c202:	f040 80a9 	bne.w	1c358 <ip_interface_recvfrom+0x238>
   1c206:	0319      	lsls	r1, r3, #12
   1c208:	d473      	bmi.n	1c2f2 <ip_interface_recvfrom+0x1d2>
   1c20a:	2e00      	cmp	r6, #0
   1c20c:	f040 8086 	bne.w	1c31c <ip_interface_recvfrom+0x1fc>
   1c210:	4628      	mov	r0, r5
   1c212:	b007      	add	sp, #28
   1c214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c218:	6803      	ldr	r3, [r0, #0]
   1c21a:	b29b      	uxth	r3, r3
   1c21c:	2b06      	cmp	r3, #6
   1c21e:	d071      	beq.n	1c304 <ip_interface_recvfrom+0x1e4>
   1c220:	6803      	ldr	r3, [r0, #0]
   1c222:	b29b      	uxth	r3, r3
   1c224:	2b07      	cmp	r3, #7
   1c226:	bf0c      	ite	eq
   1c228:	2609      	moveq	r6, #9
   1c22a:	2639      	movne	r6, #57	; 0x39
   1c22c:	69e0      	ldr	r0, [r4, #28]
   1c22e:	6803      	ldr	r3, [r0, #0]
   1c230:	68db      	ldr	r3, [r3, #12]
   1c232:	4798      	blx	r3
   1c234:	1c43      	adds	r3, r0, #1
   1c236:	4605      	mov	r5, r0
   1c238:	d0df      	beq.n	1c1fa <ip_interface_recvfrom+0xda>
   1c23a:	f04f 35ff 	mov.w	r5, #4294967295
   1c23e:	6823      	ldr	r3, [r4, #0]
   1c240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c244:	6023      	str	r3, [r4, #0]
   1c246:	e7e0      	b.n	1c20a <ip_interface_recvfrom+0xea>
   1c248:	2e00      	cmp	r6, #0
   1c24a:	d07d      	beq.n	1c348 <ip_interface_recvfrom+0x228>
   1c24c:	6a26      	ldr	r6, [r4, #32]
   1c24e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c252:	2e00      	cmp	r6, #0
   1c254:	bf08      	it	eq
   1c256:	f04f 36ff 	moveq.w	r6, #4294967295
   1c25a:	af02      	add	r7, sp, #8
   1c25c:	463b      	mov	r3, r7
   1c25e:	4611      	mov	r1, r2
   1c260:	4640      	mov	r0, r8
   1c262:	9602      	str	r6, [sp, #8]
   1c264:	f005 fca0 	bl	21ba8 <interface_socket_wait>
   1c268:	4606      	mov	r6, r0
   1c26a:	b350      	cbz	r0, 1c2c2 <ip_interface_recvfrom+0x1a2>
   1c26c:	6823      	ldr	r3, [r4, #0]
   1c26e:	031a      	lsls	r2, r3, #12
   1c270:	d532      	bpl.n	1c2d8 <ip_interface_recvfrom+0x1b8>
   1c272:	6823      	ldr	r3, [r4, #0]
   1c274:	b29b      	uxth	r3, r3
   1c276:	2b0d      	cmp	r3, #13
   1c278:	d02e      	beq.n	1c2d8 <ip_interface_recvfrom+0x1b8>
   1c27a:	6923      	ldr	r3, [r4, #16]
   1c27c:	f1a3 0801 	sub.w	r8, r3, #1
   1c280:	fab8 f888 	clz	r8, r8
   1c284:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1c288:	e78a      	b.n	1c1a0 <ip_interface_recvfrom+0x80>
   1c28a:	6823      	ldr	r3, [r4, #0]
   1c28c:	031a      	lsls	r2, r3, #12
   1c28e:	d5db      	bpl.n	1c248 <ip_interface_recvfrom+0x128>
   1c290:	6823      	ldr	r3, [r4, #0]
   1c292:	b29b      	uxth	r3, r3
   1c294:	2b0d      	cmp	r3, #13
   1c296:	d0d7      	beq.n	1c248 <ip_interface_recvfrom+0x128>
   1c298:	6923      	ldr	r3, [r4, #16]
   1c29a:	69e0      	ldr	r0, [r4, #28]
   1c29c:	2b01      	cmp	r3, #1
   1c29e:	d033      	beq.n	1c308 <ip_interface_recvfrom+0x1e8>
   1c2a0:	2639      	movs	r6, #57	; 0x39
   1c2a2:	6823      	ldr	r3, [r4, #0]
   1c2a4:	0c1b      	lsrs	r3, r3, #16
   1c2a6:	041b      	lsls	r3, r3, #16
   1c2a8:	f043 030d 	orr.w	r3, r3, #13
   1c2ac:	6023      	str	r3, [r4, #0]
   1c2ae:	6823      	ldr	r3, [r4, #0]
   1c2b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c2b4:	6023      	str	r3, [r4, #0]
   1c2b6:	6803      	ldr	r3, [r0, #0]
   1c2b8:	68db      	ldr	r3, [r3, #12]
   1c2ba:	4798      	blx	r3
   1c2bc:	3001      	adds	r0, #1
   1c2be:	d1be      	bne.n	1c23e <ip_interface_recvfrom+0x11e>
   1c2c0:	e79b      	b.n	1c1fa <ip_interface_recvfrom+0xda>
   1c2c2:	4640      	mov	r0, r8
   1c2c4:	f005 fce4 	bl	21c90 <interface_socket_from_handle_get>
   1c2c8:	b140      	cbz	r0, 1c2dc <ip_interface_recvfrom+0x1bc>
   1c2ca:	6846      	ldr	r6, [r0, #4]
   1c2cc:	b136      	cbz	r6, 1c2dc <ip_interface_recvfrom+0x1bc>
   1c2ce:	2300      	movs	r3, #0
   1c2d0:	6043      	str	r3, [r0, #4]
   1c2d2:	6823      	ldr	r3, [r4, #0]
   1c2d4:	031a      	lsls	r2, r3, #12
   1c2d6:	d4cc      	bmi.n	1c272 <ip_interface_recvfrom+0x152>
   1c2d8:	69e0      	ldr	r0, [r4, #28]
   1c2da:	e7ec      	b.n	1c2b6 <ip_interface_recvfrom+0x196>
   1c2dc:	2601      	movs	r6, #1
   1c2de:	e748      	b.n	1c172 <ip_interface_recvfrom+0x52>
   1c2e0:	9b01      	ldr	r3, [sp, #4]
   1c2e2:	b11b      	cbz	r3, 1c2ec <ip_interface_recvfrom+0x1cc>
   1c2e4:	6823      	ldr	r3, [r4, #0]
   1c2e6:	00d9      	lsls	r1, r3, #3
   1c2e8:	d5b0      	bpl.n	1c24c <ip_interface_recvfrom+0x12c>
   1c2ea:	e756      	b.n	1c19a <ip_interface_recvfrom+0x7a>
   1c2ec:	4698      	mov	r8, r3
   1c2ee:	af02      	add	r7, sp, #8
   1c2f0:	e756      	b.n	1c1a0 <ip_interface_recvfrom+0x80>
   1c2f2:	6823      	ldr	r3, [r4, #0]
   1c2f4:	b29b      	uxth	r3, r3
   1c2f6:	2b0d      	cmp	r3, #13
   1c2f8:	d187      	bne.n	1c20a <ip_interface_recvfrom+0xea>
   1c2fa:	68a3      	ldr	r3, [r4, #8]
   1c2fc:	2b00      	cmp	r3, #0
   1c2fe:	d084      	beq.n	1c20a <ip_interface_recvfrom+0xea>
   1c300:	68a6      	ldr	r6, [r4, #8]
   1c302:	e782      	b.n	1c20a <ip_interface_recvfrom+0xea>
   1c304:	2609      	movs	r6, #9
   1c306:	e791      	b.n	1c22c <ip_interface_recvfrom+0x10c>
   1c308:	6803      	ldr	r3, [r0, #0]
   1c30a:	68db      	ldr	r3, [r3, #12]
   1c30c:	4798      	blx	r3
   1c30e:	3001      	adds	r0, #1
   1c310:	d00a      	beq.n	1c328 <ip_interface_recvfrom+0x208>
   1c312:	2623      	movs	r6, #35	; 0x23
   1c314:	6823      	ldr	r3, [r4, #0]
   1c316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c31a:	6023      	str	r3, [r4, #0]
   1c31c:	4630      	mov	r0, r6
   1c31e:	f7fa fc2f 	bl	16b80 <bsd_os_errno_set>
   1c322:	f04f 35ff 	mov.w	r5, #4294967295
   1c326:	e773      	b.n	1c210 <ip_interface_recvfrom+0xf0>
   1c328:	6823      	ldr	r3, [r4, #0]
   1c32a:	2500      	movs	r5, #0
   1c32c:	0c1b      	lsrs	r3, r3, #16
   1c32e:	041b      	lsls	r3, r3, #16
   1c330:	f043 030d 	orr.w	r3, r3, #13
   1c334:	6023      	str	r3, [r4, #0]
   1c336:	6823      	ldr	r3, [r4, #0]
   1c338:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c33c:	6023      	str	r3, [r4, #0]
   1c33e:	e767      	b.n	1c210 <ip_interface_recvfrom+0xf0>
   1c340:	2f00      	cmp	r7, #0
   1c342:	f47f af50 	bne.w	1c1e6 <ip_interface_recvfrom+0xc6>
   1c346:	e758      	b.n	1c1fa <ip_interface_recvfrom+0xda>
   1c348:	2623      	movs	r6, #35	; 0x23
   1c34a:	e7c5      	b.n	1c2d8 <ip_interface_recvfrom+0x1b8>
   1c34c:	262d      	movs	r6, #45	; 0x2d
   1c34e:	e7e5      	b.n	1c31c <ip_interface_recvfrom+0x1fc>
   1c350:	2616      	movs	r6, #22
   1c352:	e7e3      	b.n	1c31c <ip_interface_recvfrom+0x1fc>
   1c354:	2609      	movs	r6, #9
   1c356:	e7e1      	b.n	1c31c <ip_interface_recvfrom+0x1fc>
   1c358:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1c35c:	6023      	str	r3, [r4, #0]
   1c35e:	6823      	ldr	r3, [r4, #0]
   1c360:	2669      	movs	r6, #105	; 0x69
   1c362:	0c1b      	lsrs	r3, r3, #16
   1c364:	041b      	lsls	r3, r3, #16
   1c366:	f043 030d 	orr.w	r3, r3, #13
   1c36a:	6023      	str	r3, [r4, #0]
   1c36c:	e7d6      	b.n	1c31c <ip_interface_recvfrom+0x1fc>
   1c36e:	bf00      	nop

0001c370 <ip_interface_connect>:
   1c370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c374:	b082      	sub	sp, #8
   1c376:	2900      	cmp	r1, #0
   1c378:	d04b      	beq.n	1c412 <ip_interface_connect+0xa2>
   1c37a:	4617      	mov	r7, r2
   1c37c:	2a00      	cmp	r2, #0
   1c37e:	d048      	beq.n	1c412 <ip_interface_connect+0xa2>
   1c380:	4680      	mov	r8, r0
   1c382:	4689      	mov	r9, r1
   1c384:	f005 fc84 	bl	21c90 <interface_socket_from_handle_get>
   1c388:	4605      	mov	r5, r0
   1c38a:	2800      	cmp	r0, #0
   1c38c:	f000 80af 	beq.w	1c4ee <ip_interface_connect+0x17e>
   1c390:	6803      	ldr	r3, [r0, #0]
   1c392:	b29b      	uxth	r3, r3
   1c394:	2b02      	cmp	r3, #2
   1c396:	d004      	beq.n	1c3a2 <ip_interface_connect+0x32>
   1c398:	6803      	ldr	r3, [r0, #0]
   1c39a:	b29b      	uxth	r3, r3
   1c39c:	2b04      	cmp	r3, #4
   1c39e:	f040 809d 	bne.w	1c4dc <ip_interface_connect+0x16c>
   1c3a2:	6829      	ldr	r1, [r5, #0]
   1c3a4:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1c3a8:	f040 8089 	bne.w	1c4be <ip_interface_connect+0x14e>
   1c3ac:	ae02      	add	r6, sp, #8
   1c3ae:	f8d5 a018 	ldr.w	sl, [r5, #24]
   1c3b2:	f846 1d04 	str.w	r1, [r6, #-4]!
   1c3b6:	4630      	mov	r0, r6
   1c3b8:	f7ff fb48 	bl	1ba4c <rpc_ip_client_request_alloc>
   1c3bc:	bb98      	cbnz	r0, 1c426 <ip_interface_connect+0xb6>
   1c3be:	2108      	movs	r1, #8
   1c3c0:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1c3c4:	9c01      	ldr	r4, [sp, #4]
   1c3c6:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1c3ca:	f043 0302 	orr.w	r3, r3, #2
   1c3ce:	60e3      	str	r3, [r4, #12]
   1c3d0:	f8c4 a010 	str.w	sl, [r4, #16]
   1c3d4:	7260      	strb	r0, [r4, #9]
   1c3d6:	72a0      	strb	r0, [r4, #10]
   1c3d8:	72e0      	strb	r0, [r4, #11]
   1c3da:	7221      	strb	r1, [r4, #8]
   1c3dc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   1c3e0:	f042 0202 	orr.w	r2, r2, #2
   1c3e4:	60e2      	str	r2, [r4, #12]
   1c3e6:	68a3      	ldr	r3, [r4, #8]
   1c3e8:	69aa      	ldr	r2, [r5, #24]
   1c3ea:	3304      	adds	r3, #4
   1c3ec:	6122      	str	r2, [r4, #16]
   1c3ee:	60a3      	str	r3, [r4, #8]
   1c3f0:	68eb      	ldr	r3, [r5, #12]
   1c3f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1c3f6:	4293      	cmp	r3, r2
   1c3f8:	d11b      	bne.n	1c432 <ip_interface_connect+0xc2>
   1c3fa:	f899 2000 	ldrb.w	r2, [r9]
   1c3fe:	4297      	cmp	r7, r2
   1c400:	d107      	bne.n	1c412 <ip_interface_connect+0xa2>
   1c402:	2b02      	cmp	r3, #2
   1c404:	f104 0018 	add.w	r0, r4, #24
   1c408:	d015      	beq.n	1c436 <ip_interface_connect+0xc6>
   1c40a:	2b0a      	cmp	r3, #10
   1c40c:	d101      	bne.n	1c412 <ip_interface_connect+0xa2>
   1c40e:	2f24      	cmp	r7, #36	; 0x24
   1c410:	d01d      	beq.n	1c44e <ip_interface_connect+0xde>
   1c412:	2416      	movs	r4, #22
   1c414:	4620      	mov	r0, r4
   1c416:	f7fa fbb3 	bl	16b80 <bsd_os_errno_set>
   1c41a:	f04f 34ff 	mov.w	r4, #4294967295
   1c41e:	4620      	mov	r0, r4
   1c420:	b002      	add	sp, #8
   1c422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c426:	9c01      	ldr	r4, [sp, #4]
   1c428:	2c00      	cmp	r4, #0
   1c42a:	d05e      	beq.n	1c4ea <ip_interface_connect+0x17a>
   1c42c:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1c430:	e7d4      	b.n	1c3dc <ip_interface_connect+0x6c>
   1c432:	242f      	movs	r4, #47	; 0x2f
   1c434:	e7ee      	b.n	1c414 <ip_interface_connect+0xa4>
   1c436:	2f10      	cmp	r7, #16
   1c438:	d1eb      	bne.n	1c412 <ip_interface_connect+0xa2>
   1c43a:	2204      	movs	r2, #4
   1c43c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c440:	f109 010c 	add.w	r1, r9, #12
   1c444:	82e2      	strh	r2, [r4, #22]
   1c446:	82a3      	strh	r3, [r4, #20]
   1c448:	f7f0 fb80 	bl	cb4c <memcpy>
   1c44c:	e008      	b.n	1c460 <ip_interface_connect+0xf0>
   1c44e:	2210      	movs	r2, #16
   1c450:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c454:	eb09 0102 	add.w	r1, r9, r2
   1c458:	82e2      	strh	r2, [r4, #22]
   1c45a:	82a3      	strh	r3, [r4, #20]
   1c45c:	f7f0 fb76 	bl	cb4c <memcpy>
   1c460:	68a3      	ldr	r3, [r4, #8]
   1c462:	8ae2      	ldrh	r2, [r4, #22]
   1c464:	f247 0102 	movw	r1, #28674	; 0x7002
   1c468:	4413      	add	r3, r2
   1c46a:	60a3      	str	r3, [r4, #8]
   1c46c:	682f      	ldr	r7, [r5, #0]
   1c46e:	682b      	ldr	r3, [r5, #0]
   1c470:	4620      	mov	r0, r4
   1c472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1c476:	602b      	str	r3, [r5, #0]
   1c478:	f7ff fafc 	bl	1ba74 <rpc_ip_client_request_send>
   1c47c:	b9a8      	cbnz	r0, 1c4aa <ip_interface_connect+0x13a>
   1c47e:	682b      	ldr	r3, [r5, #0]
   1c480:	00db      	lsls	r3, r3, #3
   1c482:	d429      	bmi.n	1c4d8 <ip_interface_connect+0x168>
   1c484:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1c486:	4633      	mov	r3, r6
   1c488:	2c00      	cmp	r4, #0
   1c48a:	bf08      	it	eq
   1c48c:	f04f 34ff 	moveq.w	r4, #4294967295
   1c490:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c494:	2105      	movs	r1, #5
   1c496:	4640      	mov	r0, r8
   1c498:	9401      	str	r4, [sp, #4]
   1c49a:	f005 fb85 	bl	21ba8 <interface_socket_wait>
   1c49e:	4604      	mov	r4, r0
   1c4a0:	b178      	cbz	r0, 1c4c2 <ip_interface_connect+0x152>
   1c4a2:	2c73      	cmp	r4, #115	; 0x73
   1c4a4:	d0b6      	beq.n	1c414 <ip_interface_connect+0xa4>
   1c4a6:	602f      	str	r7, [r5, #0]
   1c4a8:	e7b4      	b.n	1c414 <ip_interface_connect+0xa4>
   1c4aa:	6820      	ldr	r0, [r4, #0]
   1c4ac:	b108      	cbz	r0, 1c4b2 <ip_interface_connect+0x142>
   1c4ae:	f7ff faff 	bl	1bab0 <rpc_ip_client_data_free>
   1c4b2:	4620      	mov	r0, r4
   1c4b4:	f7ff faf4 	bl	1baa0 <rpc_ip_client_message_free>
   1c4b8:	2423      	movs	r4, #35	; 0x23
   1c4ba:	602f      	str	r7, [r5, #0]
   1c4bc:	e7aa      	b.n	1c414 <ip_interface_connect+0xa4>
   1c4be:	2472      	movs	r4, #114	; 0x72
   1c4c0:	e7a8      	b.n	1c414 <ip_interface_connect+0xa4>
   1c4c2:	4640      	mov	r0, r8
   1c4c4:	f005 fbe4 	bl	21c90 <interface_socket_from_handle_get>
   1c4c8:	2800      	cmp	r0, #0
   1c4ca:	d0a8      	beq.n	1c41e <ip_interface_connect+0xae>
   1c4cc:	6843      	ldr	r3, [r0, #4]
   1c4ce:	2b00      	cmp	r3, #0
   1c4d0:	d0a5      	beq.n	1c41e <ip_interface_connect+0xae>
   1c4d2:	6044      	str	r4, [r0, #4]
   1c4d4:	461c      	mov	r4, r3
   1c4d6:	e7e4      	b.n	1c4a2 <ip_interface_connect+0x132>
   1c4d8:	2473      	movs	r4, #115	; 0x73
   1c4da:	e79b      	b.n	1c414 <ip_interface_connect+0xa4>
   1c4dc:	6803      	ldr	r3, [r0, #0]
   1c4de:	b29b      	uxth	r3, r3
   1c4e0:	2b05      	cmp	r3, #5
   1c4e2:	bf14      	ite	ne
   1c4e4:	2409      	movne	r4, #9
   1c4e6:	2438      	moveq	r4, #56	; 0x38
   1c4e8:	e794      	b.n	1c414 <ip_interface_connect+0xa4>
   1c4ea:	240c      	movs	r4, #12
   1c4ec:	e792      	b.n	1c414 <ip_interface_connect+0xa4>
   1c4ee:	2409      	movs	r4, #9
   1c4f0:	e790      	b.n	1c414 <ip_interface_connect+0xa4>
   1c4f2:	bf00      	nop

0001c4f4 <ip_interface_socketoption_get>:
   1c4f4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1c4f8:	f04f 34ff 	mov.w	r4, #4294967295
   1c4fc:	b082      	sub	sp, #8
   1c4fe:	9400      	str	r4, [sp, #0]
   1c500:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c502:	2c00      	cmp	r4, #0
   1c504:	d05b      	beq.n	1c5be <ip_interface_socketoption_get+0xca>
   1c506:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1c508:	6824      	ldr	r4, [r4, #0]
   1c50a:	2c00      	cmp	r4, #0
   1c50c:	d057      	beq.n	1c5be <ip_interface_socketoption_get+0xca>
   1c50e:	680c      	ldr	r4, [r1, #0]
   1c510:	0266      	lsls	r6, r4, #9
   1c512:	d44f      	bmi.n	1c5b4 <ip_interface_socketoption_get+0xc0>
   1c514:	680c      	ldr	r4, [r1, #0]
   1c516:	0225      	lsls	r5, r4, #8
   1c518:	d44c      	bmi.n	1c5b4 <ip_interface_socketoption_get+0xc0>
   1c51a:	680c      	ldr	r4, [r1, #0]
   1c51c:	01e4      	lsls	r4, r4, #7
   1c51e:	d449      	bmi.n	1c5b4 <ip_interface_socketoption_get+0xc0>
   1c520:	680c      	ldr	r4, [r1, #0]
   1c522:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   1c526:	d145      	bne.n	1c5b4 <ip_interface_socketoption_get+0xc0>
   1c528:	460c      	mov	r4, r1
   1c52a:	680e      	ldr	r6, [r1, #0]
   1c52c:	461f      	mov	r7, r3
   1c52e:	680b      	ldr	r3, [r1, #0]
   1c530:	4681      	mov	r9, r0
   1c532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c536:	600b      	str	r3, [r1, #0]
   1c538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c53a:	a802      	add	r0, sp, #8
   1c53c:	f840 cd04 	str.w	ip, [r0, #-4]!
   1c540:	6819      	ldr	r1, [r3, #0]
   1c542:	4615      	mov	r5, r2
   1c544:	f8d4 b018 	ldr.w	fp, [r4, #24]
   1c548:	f7ff fa80 	bl	1ba4c <rpc_ip_client_request_alloc>
   1c54c:	2800      	cmp	r0, #0
   1c54e:	d146      	bne.n	1c5de <ip_interface_socketoption_get+0xea>
   1c550:	f247 0304 	movw	r3, #28676	; 0x7004
   1c554:	2208      	movs	r2, #8
   1c556:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c55a:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1c55e:	f8ca 300c 	str.w	r3, [sl, #12]
   1c562:	f8ca b010 	str.w	fp, [sl, #16]
   1c566:	f88a 0009 	strb.w	r0, [sl, #9]
   1c56a:	f88a 000a 	strb.w	r0, [sl, #10]
   1c56e:	f88a 000b 	strb.w	r0, [sl, #11]
   1c572:	f88a 2008 	strb.w	r2, [sl, #8]
   1c576:	f8da 3008 	ldr.w	r3, [sl, #8]
   1c57a:	f8ca 7018 	str.w	r7, [sl, #24]
   1c57e:	3308      	adds	r3, #8
   1c580:	f8ca 5014 	str.w	r5, [sl, #20]
   1c584:	f8ca 3008 	str.w	r3, [sl, #8]
   1c588:	f247 0104 	movw	r1, #28676	; 0x7004
   1c58c:	4650      	mov	r0, sl
   1c58e:	f8da 7000 	ldr.w	r7, [sl]
   1c592:	f7ff fa6f 	bl	1ba74 <rpc_ip_client_request_send>
   1c596:	b9b8      	cbnz	r0, 1c5c8 <ip_interface_socketoption_get+0xd4>
   1c598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1c59c:	466b      	mov	r3, sp
   1c59e:	4611      	mov	r1, r2
   1c5a0:	4648      	mov	r0, r9
   1c5a2:	f005 fb01 	bl	21ba8 <interface_socket_wait>
   1c5a6:	4605      	mov	r5, r0
   1c5a8:	b300      	cbz	r0, 1c5ec <ip_interface_socketoption_get+0xf8>
   1c5aa:	4638      	mov	r0, r7
   1c5ac:	f7ff fa80 	bl	1bab0 <rpc_ip_client_data_free>
   1c5b0:	6026      	str	r6, [r4, #0]
   1c5b2:	e000      	b.n	1c5b6 <ip_interface_socketoption_get+0xc2>
   1c5b4:	2523      	movs	r5, #35	; 0x23
   1c5b6:	4628      	mov	r0, r5
   1c5b8:	b002      	add	sp, #8
   1c5ba:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1c5be:	2516      	movs	r5, #22
   1c5c0:	4628      	mov	r0, r5
   1c5c2:	b002      	add	sp, #8
   1c5c4:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1c5c8:	f8da 0000 	ldr.w	r0, [sl]
   1c5cc:	b108      	cbz	r0, 1c5d2 <ip_interface_socketoption_get+0xde>
   1c5ce:	f7ff fa6f 	bl	1bab0 <rpc_ip_client_data_free>
   1c5d2:	4650      	mov	r0, sl
   1c5d4:	f7ff fa64 	bl	1baa0 <rpc_ip_client_message_free>
   1c5d8:	2523      	movs	r5, #35	; 0x23
   1c5da:	6026      	str	r6, [r4, #0]
   1c5dc:	e7e5      	b.n	1c5aa <ip_interface_socketoption_get+0xb6>
   1c5de:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c5e2:	f1ba 0f00 	cmp.w	sl, #0
   1c5e6:	d1c6      	bne.n	1c576 <ip_interface_socketoption_get+0x82>
   1c5e8:	250c      	movs	r5, #12
   1c5ea:	e7e1      	b.n	1c5b0 <ip_interface_socketoption_get+0xbc>
   1c5ec:	4648      	mov	r0, r9
   1c5ee:	f005 fb4f 	bl	21c90 <interface_socket_from_handle_get>
   1c5f2:	b120      	cbz	r0, 1c5fe <ip_interface_socketoption_get+0x10a>
   1c5f4:	6843      	ldr	r3, [r0, #4]
   1c5f6:	b113      	cbz	r3, 1c5fe <ip_interface_socketoption_get+0x10a>
   1c5f8:	6045      	str	r5, [r0, #4]
   1c5fa:	461d      	mov	r5, r3
   1c5fc:	e7d5      	b.n	1c5aa <ip_interface_socketoption_get+0xb6>
   1c5fe:	f8df b050 	ldr.w	fp, [pc, #80]	; 1c650 <ip_interface_socketoption_get+0x15c>
   1c602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c604:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1c608:	681b      	ldr	r3, [r3, #0]
   1c60a:	b1b0      	cbz	r0, 1c63a <ip_interface_socketoption_get+0x146>
   1c60c:	6842      	ldr	r2, [r0, #4]
   1c60e:	429a      	cmp	r2, r3
   1c610:	d811      	bhi.n	1c636 <ip_interface_socketoption_get+0x142>
   1c612:	6801      	ldr	r1, [r0, #0]
   1c614:	b179      	cbz	r1, 1c636 <ip_interface_socketoption_get+0x142>
   1c616:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c618:	f7f0 fa98 	bl	cb4c <memcpy>
   1c61c:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   1c620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c622:	685b      	ldr	r3, [r3, #4]
   1c624:	6013      	str	r3, [r2, #0]
   1c626:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1c62a:	f7ff fa39 	bl	1baa0 <rpc_ip_client_message_free>
   1c62e:	2300      	movs	r3, #0
   1c630:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   1c634:	e7b9      	b.n	1c5aa <ip_interface_socketoption_get+0xb6>
   1c636:	2516      	movs	r5, #22
   1c638:	e7f7      	b.n	1c62a <ip_interface_socketoption_get+0x136>
   1c63a:	461a      	mov	r2, r3
   1c63c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c63e:	4639      	mov	r1, r7
   1c640:	f7f0 fa84 	bl	cb4c <memcpy>
   1c644:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c64a:	6013      	str	r3, [r2, #0]
   1c64c:	e7ad      	b.n	1c5aa <ip_interface_socketoption_get+0xb6>
   1c64e:	bf00      	nop
   1c650:	200219e8 	.word	0x200219e8

0001c654 <ip_interface_socketoption_send>:
   1c654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c658:	f04f 35ff 	mov.w	r5, #4294967295
   1c65c:	680c      	ldr	r4, [r1, #0]
   1c65e:	b082      	sub	sp, #8
   1c660:	0266      	lsls	r6, r4, #9
   1c662:	9500      	str	r5, [sp, #0]
   1c664:	d44d      	bmi.n	1c702 <ip_interface_socketoption_send+0xae>
   1c666:	680c      	ldr	r4, [r1, #0]
   1c668:	0225      	lsls	r5, r4, #8
   1c66a:	d44a      	bmi.n	1c702 <ip_interface_socketoption_send+0xae>
   1c66c:	680c      	ldr	r4, [r1, #0]
   1c66e:	01e4      	lsls	r4, r4, #7
   1c670:	d447      	bmi.n	1c702 <ip_interface_socketoption_send+0xae>
   1c672:	680c      	ldr	r4, [r1, #0]
   1c674:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   1c678:	d143      	bne.n	1c702 <ip_interface_socketoption_send+0xae>
   1c67a:	4688      	mov	r8, r1
   1c67c:	f8d1 9000 	ldr.w	r9, [r1]
   1c680:	461f      	mov	r7, r3
   1c682:	680b      	ldr	r3, [r1, #0]
   1c684:	4605      	mov	r5, r0
   1c686:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1c68a:	a802      	add	r0, sp, #8
   1c68c:	600b      	str	r3, [r1, #0]
   1c68e:	f840 4d04 	str.w	r4, [r0, #-4]!
   1c692:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c694:	4616      	mov	r6, r2
   1c696:	f8d8 a018 	ldr.w	sl, [r8, #24]
   1c69a:	f7ff f9d7 	bl	1ba4c <rpc_ip_client_request_alloc>
   1c69e:	bba8      	cbnz	r0, 1c70c <ip_interface_socketoption_send+0xb8>
   1c6a0:	f247 0303 	movw	r3, #28675	; 0x7003
   1c6a4:	2208      	movs	r2, #8
   1c6a6:	9c01      	ldr	r4, [sp, #4]
   1c6a8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1c6ac:	60e3      	str	r3, [r4, #12]
   1c6ae:	f8c4 a010 	str.w	sl, [r4, #16]
   1c6b2:	7260      	strb	r0, [r4, #9]
   1c6b4:	72a0      	strb	r0, [r4, #10]
   1c6b6:	72e0      	strb	r0, [r4, #11]
   1c6b8:	7222      	strb	r2, [r4, #8]
   1c6ba:	68a3      	ldr	r3, [r4, #8]
   1c6bc:	6166      	str	r6, [r4, #20]
   1c6be:	3308      	adds	r3, #8
   1c6c0:	60a3      	str	r3, [r4, #8]
   1c6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c6c4:	61a7      	str	r7, [r4, #24]
   1c6c6:	b133      	cbz	r3, 1c6d6 <ip_interface_socketoption_send+0x82>
   1c6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c6ca:	b123      	cbz	r3, 1c6d6 <ip_interface_socketoption_send+0x82>
   1c6cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c6ce:	4619      	mov	r1, r3
   1c6d0:	6820      	ldr	r0, [r4, #0]
   1c6d2:	f7f0 fa3b 	bl	cb4c <memcpy>
   1c6d6:	f247 0103 	movw	r1, #28675	; 0x7003
   1c6da:	4620      	mov	r0, r4
   1c6dc:	f7ff f9ca 	bl	1ba74 <rpc_ip_client_request_send>
   1c6e0:	4606      	mov	r6, r0
   1c6e2:	b9c0      	cbnz	r0, 1c716 <ip_interface_socketoption_send+0xc2>
   1c6e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1c6e8:	466b      	mov	r3, sp
   1c6ea:	4611      	mov	r1, r2
   1c6ec:	4628      	mov	r0, r5
   1c6ee:	f005 fa5b 	bl	21ba8 <interface_socket_wait>
   1c6f2:	4604      	mov	r4, r0
   1c6f4:	b1d0      	cbz	r0, 1c72c <ip_interface_socketoption_send+0xd8>
   1c6f6:	4620      	mov	r0, r4
   1c6f8:	f8c8 9000 	str.w	r9, [r8]
   1c6fc:	b002      	add	sp, #8
   1c6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c702:	2423      	movs	r4, #35	; 0x23
   1c704:	4620      	mov	r0, r4
   1c706:	b002      	add	sp, #8
   1c708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c70c:	9c01      	ldr	r4, [sp, #4]
   1c70e:	2c00      	cmp	r4, #0
   1c710:	d1d3      	bne.n	1c6ba <ip_interface_socketoption_send+0x66>
   1c712:	240c      	movs	r4, #12
   1c714:	e7ef      	b.n	1c6f6 <ip_interface_socketoption_send+0xa2>
   1c716:	6820      	ldr	r0, [r4, #0]
   1c718:	b108      	cbz	r0, 1c71e <ip_interface_socketoption_send+0xca>
   1c71a:	f7ff f9c9 	bl	1bab0 <rpc_ip_client_data_free>
   1c71e:	4620      	mov	r0, r4
   1c720:	f7ff f9be 	bl	1baa0 <rpc_ip_client_message_free>
   1c724:	2423      	movs	r4, #35	; 0x23
   1c726:	f8c8 9000 	str.w	r9, [r8]
   1c72a:	e7e4      	b.n	1c6f6 <ip_interface_socketoption_send+0xa2>
   1c72c:	4628      	mov	r0, r5
   1c72e:	f005 faaf 	bl	21c90 <interface_socket_from_handle_get>
   1c732:	2800      	cmp	r0, #0
   1c734:	d0df      	beq.n	1c6f6 <ip_interface_socketoption_send+0xa2>
   1c736:	6844      	ldr	r4, [r0, #4]
   1c738:	2c00      	cmp	r4, #0
   1c73a:	d0dc      	beq.n	1c6f6 <ip_interface_socketoption_send+0xa2>
   1c73c:	6046      	str	r6, [r0, #4]
   1c73e:	e7da      	b.n	1c6f6 <ip_interface_socketoption_send+0xa2>

0001c740 <ip_interface_bind>:
   1c740:	f04f 33ff 	mov.w	r3, #4294967295
   1c744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c748:	b083      	sub	sp, #12
   1c74a:	9300      	str	r3, [sp, #0]
   1c74c:	b3b1      	cbz	r1, 1c7bc <ip_interface_bind+0x7c>
   1c74e:	4616      	mov	r6, r2
   1c750:	b3a2      	cbz	r2, 1c7bc <ip_interface_bind+0x7c>
   1c752:	4607      	mov	r7, r0
   1c754:	4688      	mov	r8, r1
   1c756:	f005 fa9b 	bl	21c90 <interface_socket_from_handle_get>
   1c75a:	4605      	mov	r5, r0
   1c75c:	2800      	cmp	r0, #0
   1c75e:	d04a      	beq.n	1c7f6 <ip_interface_bind+0xb6>
   1c760:	6803      	ldr	r3, [r0, #0]
   1c762:	b29b      	uxth	r3, r3
   1c764:	2b02      	cmp	r3, #2
   1c766:	d146      	bne.n	1c7f6 <ip_interface_bind+0xb6>
   1c768:	2100      	movs	r1, #0
   1c76a:	a802      	add	r0, sp, #8
   1c76c:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c770:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c774:	f7ff f96a 	bl	1ba4c <rpc_ip_client_request_alloc>
   1c778:	bb50      	cbnz	r0, 1c7d0 <ip_interface_bind+0x90>
   1c77a:	f247 0305 	movw	r3, #28677	; 0x7005
   1c77e:	2208      	movs	r2, #8
   1c780:	9c01      	ldr	r4, [sp, #4]
   1c782:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1c786:	60e3      	str	r3, [r4, #12]
   1c788:	f8c4 9010 	str.w	r9, [r4, #16]
   1c78c:	7260      	strb	r0, [r4, #9]
   1c78e:	72a0      	strb	r0, [r4, #10]
   1c790:	72e0      	strb	r0, [r4, #11]
   1c792:	7222      	strb	r2, [r4, #8]
   1c794:	68a3      	ldr	r3, [r4, #8]
   1c796:	3304      	adds	r3, #4
   1c798:	60a3      	str	r3, [r4, #8]
   1c79a:	68eb      	ldr	r3, [r5, #12]
   1c79c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c7a0:	4293      	cmp	r3, r2
   1c7a2:	d11a      	bne.n	1c7da <ip_interface_bind+0x9a>
   1c7a4:	f898 2000 	ldrb.w	r2, [r8]
   1c7a8:	4296      	cmp	r6, r2
   1c7aa:	d107      	bne.n	1c7bc <ip_interface_bind+0x7c>
   1c7ac:	2b02      	cmp	r3, #2
   1c7ae:	f104 0018 	add.w	r0, r4, #24
   1c7b2:	d014      	beq.n	1c7de <ip_interface_bind+0x9e>
   1c7b4:	2b0a      	cmp	r3, #10
   1c7b6:	d101      	bne.n	1c7bc <ip_interface_bind+0x7c>
   1c7b8:	2e24      	cmp	r6, #36	; 0x24
   1c7ba:	d01e      	beq.n	1c7fa <ip_interface_bind+0xba>
   1c7bc:	2416      	movs	r4, #22
   1c7be:	4620      	mov	r0, r4
   1c7c0:	f7fa f9de 	bl	16b80 <bsd_os_errno_set>
   1c7c4:	f04f 34ff 	mov.w	r4, #4294967295
   1c7c8:	4620      	mov	r0, r4
   1c7ca:	b003      	add	sp, #12
   1c7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c7d0:	9c01      	ldr	r4, [sp, #4]
   1c7d2:	2c00      	cmp	r4, #0
   1c7d4:	d1de      	bne.n	1c794 <ip_interface_bind+0x54>
   1c7d6:	240c      	movs	r4, #12
   1c7d8:	e7f1      	b.n	1c7be <ip_interface_bind+0x7e>
   1c7da:	242f      	movs	r4, #47	; 0x2f
   1c7dc:	e7ef      	b.n	1c7be <ip_interface_bind+0x7e>
   1c7de:	2e10      	cmp	r6, #16
   1c7e0:	d1ec      	bne.n	1c7bc <ip_interface_bind+0x7c>
   1c7e2:	2204      	movs	r2, #4
   1c7e4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c7e8:	f108 010c 	add.w	r1, r8, #12
   1c7ec:	82e2      	strh	r2, [r4, #22]
   1c7ee:	82a3      	strh	r3, [r4, #20]
   1c7f0:	f7f0 f9ac 	bl	cb4c <memcpy>
   1c7f4:	e00a      	b.n	1c80c <ip_interface_bind+0xcc>
   1c7f6:	2409      	movs	r4, #9
   1c7f8:	e7e1      	b.n	1c7be <ip_interface_bind+0x7e>
   1c7fa:	2210      	movs	r2, #16
   1c7fc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c800:	eb08 0102 	add.w	r1, r8, r2
   1c804:	82e2      	strh	r2, [r4, #22]
   1c806:	82a3      	strh	r3, [r4, #20]
   1c808:	f7f0 f9a0 	bl	cb4c <memcpy>
   1c80c:	68a3      	ldr	r3, [r4, #8]
   1c80e:	8ae2      	ldrh	r2, [r4, #22]
   1c810:	f247 0105 	movw	r1, #28677	; 0x7005
   1c814:	4413      	add	r3, r2
   1c816:	60a3      	str	r3, [r4, #8]
   1c818:	682b      	ldr	r3, [r5, #0]
   1c81a:	4620      	mov	r0, r4
   1c81c:	0c1b      	lsrs	r3, r3, #16
   1c81e:	041b      	lsls	r3, r3, #16
   1c820:	f043 0303 	orr.w	r3, r3, #3
   1c824:	602b      	str	r3, [r5, #0]
   1c826:	682e      	ldr	r6, [r5, #0]
   1c828:	f7ff f924 	bl	1ba74 <rpc_ip_client_request_send>
   1c82c:	4680      	mov	r8, r0
   1c82e:	b978      	cbnz	r0, 1c850 <ip_interface_bind+0x110>
   1c830:	466b      	mov	r3, sp
   1c832:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c836:	2104      	movs	r1, #4
   1c838:	4638      	mov	r0, r7
   1c83a:	f005 f9b5 	bl	21ba8 <interface_socket_wait>
   1c83e:	4604      	mov	r4, r0
   1c840:	b1a0      	cbz	r0, 1c86c <ip_interface_bind+0x12c>
   1c842:	682b      	ldr	r3, [r5, #0]
   1c844:	0c1b      	lsrs	r3, r3, #16
   1c846:	041b      	lsls	r3, r3, #16
   1c848:	f043 0302 	orr.w	r3, r3, #2
   1c84c:	602b      	str	r3, [r5, #0]
   1c84e:	e7b6      	b.n	1c7be <ip_interface_bind+0x7e>
   1c850:	6820      	ldr	r0, [r4, #0]
   1c852:	b108      	cbz	r0, 1c858 <ip_interface_bind+0x118>
   1c854:	f7ff f92c 	bl	1bab0 <rpc_ip_client_data_free>
   1c858:	0c36      	lsrs	r6, r6, #16
   1c85a:	0436      	lsls	r6, r6, #16
   1c85c:	4620      	mov	r0, r4
   1c85e:	f046 0602 	orr.w	r6, r6, #2
   1c862:	f7ff f91d 	bl	1baa0 <rpc_ip_client_message_free>
   1c866:	2423      	movs	r4, #35	; 0x23
   1c868:	602e      	str	r6, [r5, #0]
   1c86a:	e7a8      	b.n	1c7be <ip_interface_bind+0x7e>
   1c86c:	4638      	mov	r0, r7
   1c86e:	f005 fa0f 	bl	21c90 <interface_socket_from_handle_get>
   1c872:	2800      	cmp	r0, #0
   1c874:	d0a8      	beq.n	1c7c8 <ip_interface_bind+0x88>
   1c876:	6844      	ldr	r4, [r0, #4]
   1c878:	2c00      	cmp	r4, #0
   1c87a:	d0a5      	beq.n	1c7c8 <ip_interface_bind+0x88>
   1c87c:	f8c0 8004 	str.w	r8, [r0, #4]
   1c880:	e7df      	b.n	1c842 <ip_interface_bind+0x102>
   1c882:	bf00      	nop

0001c884 <ip_interface_listen>:
   1c884:	f04f 33ff 	mov.w	r3, #4294967295
   1c888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c88c:	b082      	sub	sp, #8
   1c88e:	4606      	mov	r6, r0
   1c890:	9300      	str	r3, [sp, #0]
   1c892:	f005 f9fd 	bl	21c90 <interface_socket_from_handle_get>
   1c896:	2800      	cmp	r0, #0
   1c898:	d06c      	beq.n	1c974 <ip_interface_listen+0xf0>
   1c89a:	6803      	ldr	r3, [r0, #0]
   1c89c:	4604      	mov	r4, r0
   1c89e:	b29b      	uxth	r3, r3
   1c8a0:	2b04      	cmp	r3, #4
   1c8a2:	d003      	beq.n	1c8ac <ip_interface_listen+0x28>
   1c8a4:	6803      	ldr	r3, [r0, #0]
   1c8a6:	b29b      	uxth	r3, r3
   1c8a8:	2b0b      	cmp	r3, #11
   1c8aa:	d163      	bne.n	1c974 <ip_interface_listen+0xf0>
   1c8ac:	2100      	movs	r1, #0
   1c8ae:	4a32      	ldr	r2, [pc, #200]	; (1c978 <ip_interface_listen+0xf4>)
   1c8b0:	4630      	mov	r0, r6
   1c8b2:	f005 f941 	bl	21b38 <interface_socket_packet_handler_update>
   1c8b6:	4601      	mov	r1, r0
   1c8b8:	2800      	cmp	r0, #0
   1c8ba:	d159      	bne.n	1c970 <ip_interface_listen+0xec>
   1c8bc:	a802      	add	r0, sp, #8
   1c8be:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c8c2:	69a7      	ldr	r7, [r4, #24]
   1c8c4:	f7ff f8c2 	bl	1ba4c <rpc_ip_client_request_alloc>
   1c8c8:	bba0      	cbnz	r0, 1c934 <ip_interface_listen+0xb0>
   1c8ca:	f247 0308 	movw	r3, #28680	; 0x7008
   1c8ce:	2208      	movs	r2, #8
   1c8d0:	9d01      	ldr	r5, [sp, #4]
   1c8d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1c8d6:	60eb      	str	r3, [r5, #12]
   1c8d8:	612f      	str	r7, [r5, #16]
   1c8da:	7268      	strb	r0, [r5, #9]
   1c8dc:	72a8      	strb	r0, [r5, #10]
   1c8de:	72e8      	strb	r0, [r5, #11]
   1c8e0:	722a      	strb	r2, [r5, #8]
   1c8e2:	68ab      	ldr	r3, [r5, #8]
   1c8e4:	f247 0108 	movw	r1, #28680	; 0x7008
   1c8e8:	3304      	adds	r3, #4
   1c8ea:	60ab      	str	r3, [r5, #8]
   1c8ec:	6823      	ldr	r3, [r4, #0]
   1c8ee:	4628      	mov	r0, r5
   1c8f0:	0c1b      	lsrs	r3, r3, #16
   1c8f2:	041b      	lsls	r3, r3, #16
   1c8f4:	f043 0306 	orr.w	r3, r3, #6
   1c8f8:	6023      	str	r3, [r4, #0]
   1c8fa:	6827      	ldr	r7, [r4, #0]
   1c8fc:	f7ff f8ba 	bl	1ba74 <rpc_ip_client_request_send>
   1c900:	4680      	mov	r8, r0
   1c902:	b9e0      	cbnz	r0, 1c93e <ip_interface_listen+0xba>
   1c904:	466b      	mov	r3, sp
   1c906:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c90a:	2107      	movs	r1, #7
   1c90c:	4630      	mov	r0, r6
   1c90e:	f005 f94b 	bl	21ba8 <interface_socket_wait>
   1c912:	4605      	mov	r5, r0
   1c914:	b308      	cbz	r0, 1c95a <ip_interface_listen+0xd6>
   1c916:	6823      	ldr	r3, [r4, #0]
   1c918:	0c1b      	lsrs	r3, r3, #16
   1c91a:	041b      	lsls	r3, r3, #16
   1c91c:	f043 0304 	orr.w	r3, r3, #4
   1c920:	6023      	str	r3, [r4, #0]
   1c922:	4628      	mov	r0, r5
   1c924:	f7fa f92c 	bl	16b80 <bsd_os_errno_set>
   1c928:	f04f 35ff 	mov.w	r5, #4294967295
   1c92c:	4628      	mov	r0, r5
   1c92e:	b002      	add	sp, #8
   1c930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c934:	9d01      	ldr	r5, [sp, #4]
   1c936:	2d00      	cmp	r5, #0
   1c938:	d1d3      	bne.n	1c8e2 <ip_interface_listen+0x5e>
   1c93a:	250c      	movs	r5, #12
   1c93c:	e7f1      	b.n	1c922 <ip_interface_listen+0x9e>
   1c93e:	6828      	ldr	r0, [r5, #0]
   1c940:	b108      	cbz	r0, 1c946 <ip_interface_listen+0xc2>
   1c942:	f7ff f8b5 	bl	1bab0 <rpc_ip_client_data_free>
   1c946:	0c3f      	lsrs	r7, r7, #16
   1c948:	043f      	lsls	r7, r7, #16
   1c94a:	4628      	mov	r0, r5
   1c94c:	f047 0704 	orr.w	r7, r7, #4
   1c950:	f7ff f8a6 	bl	1baa0 <rpc_ip_client_message_free>
   1c954:	2523      	movs	r5, #35	; 0x23
   1c956:	6027      	str	r7, [r4, #0]
   1c958:	e7e3      	b.n	1c922 <ip_interface_listen+0x9e>
   1c95a:	4630      	mov	r0, r6
   1c95c:	f005 f998 	bl	21c90 <interface_socket_from_handle_get>
   1c960:	2800      	cmp	r0, #0
   1c962:	d0e3      	beq.n	1c92c <ip_interface_listen+0xa8>
   1c964:	6845      	ldr	r5, [r0, #4]
   1c966:	2d00      	cmp	r5, #0
   1c968:	d0e0      	beq.n	1c92c <ip_interface_listen+0xa8>
   1c96a:	f8c0 8004 	str.w	r8, [r0, #4]
   1c96e:	e7d2      	b.n	1c916 <ip_interface_listen+0x92>
   1c970:	2523      	movs	r5, #35	; 0x23
   1c972:	e7d6      	b.n	1c922 <ip_interface_listen+0x9e>
   1c974:	2509      	movs	r5, #9
   1c976:	e7d4      	b.n	1c922 <ip_interface_listen+0x9e>
   1c978:	0001bac1 	.word	0x0001bac1

0001c97c <ip_interface_accept>:
   1c97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c980:	f04f 33ff 	mov.w	r3, #4294967295
   1c984:	2500      	movs	r5, #0
   1c986:	b087      	sub	sp, #28
   1c988:	460f      	mov	r7, r1
   1c98a:	4690      	mov	r8, r2
   1c98c:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1c990:	4606      	mov	r6, r0
   1c992:	f005 f97d 	bl	21c90 <interface_socket_from_handle_get>
   1c996:	4604      	mov	r4, r0
   1c998:	2800      	cmp	r0, #0
   1c99a:	f000 8123 	beq.w	1cbe4 <ip_interface_accept+0x268>
   1c99e:	6803      	ldr	r3, [r0, #0]
   1c9a0:	b29b      	uxth	r3, r3
   1c9a2:	2b07      	cmp	r3, #7
   1c9a4:	d10a      	bne.n	1c9bc <ip_interface_accept+0x40>
   1c9a6:	6803      	ldr	r3, [r0, #0]
   1c9a8:	6805      	ldr	r5, [r0, #0]
   1c9aa:	00db      	lsls	r3, r3, #3
   1c9ac:	d416      	bmi.n	1c9dc <ip_interface_accept+0x60>
   1c9ae:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c9b2:	d019      	beq.n	1c9e8 <ip_interface_accept+0x6c>
   1c9b4:	6805      	ldr	r5, [r0, #0]
   1c9b6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c9ba:	d124      	bne.n	1ca06 <ip_interface_accept+0x8a>
   1c9bc:	f04f 0909 	mov.w	r9, #9
   1c9c0:	9b03      	ldr	r3, [sp, #12]
   1c9c2:	b113      	cbz	r3, 1c9ca <ip_interface_accept+0x4e>
   1c9c4:	4628      	mov	r0, r5
   1c9c6:	f005 f8a1 	bl	21b0c <interface_socket_free>
   1c9ca:	4648      	mov	r0, r9
   1c9cc:	f04f 39ff 	mov.w	r9, #4294967295
   1c9d0:	f7fa f8d6 	bl	16b80 <bsd_os_errno_set>
   1c9d4:	4648      	mov	r0, r9
   1c9d6:	b007      	add	sp, #28
   1c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9dc:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c9e0:	d170      	bne.n	1cac4 <ip_interface_accept+0x148>
   1c9e2:	f04f 0923 	mov.w	r9, #35	; 0x23
   1c9e6:	e7eb      	b.n	1c9c0 <ip_interface_accept+0x44>
   1c9e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c9ec:	ab04      	add	r3, sp, #16
   1c9ee:	4611      	mov	r1, r2
   1c9f0:	4630      	mov	r0, r6
   1c9f2:	f005 f8d9 	bl	21ba8 <interface_socket_wait>
   1c9f6:	4681      	mov	r9, r0
   1c9f8:	2800      	cmp	r0, #0
   1c9fa:	f000 8082 	beq.w	1cb02 <ip_interface_accept+0x186>
   1c9fe:	6825      	ldr	r5, [r4, #0]
   1ca00:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1ca04:	d0dc      	beq.n	1c9c0 <ip_interface_accept+0x44>
   1ca06:	f04f 30ff 	mov.w	r0, #4294967295
   1ca0a:	2300      	movs	r3, #0
   1ca0c:	e9cd 0300 	strd	r0, r3, [sp]
   1ca10:	4a78      	ldr	r2, [pc, #480]	; (1cbf4 <ip_interface_accept+0x278>)
   1ca12:	6921      	ldr	r1, [r4, #16]
   1ca14:	a803      	add	r0, sp, #12
   1ca16:	f005 f815 	bl	21a44 <interface_socket_allocate>
   1ca1a:	9b03      	ldr	r3, [sp, #12]
   1ca1c:	4605      	mov	r5, r0
   1ca1e:	2b00      	cmp	r3, #0
   1ca20:	f000 80e4 	beq.w	1cbec <ip_interface_accept+0x270>
   1ca24:	2100      	movs	r1, #0
   1ca26:	6962      	ldr	r2, [r4, #20]
   1ca28:	a806      	add	r0, sp, #24
   1ca2a:	615a      	str	r2, [r3, #20]
   1ca2c:	68e2      	ldr	r2, [r4, #12]
   1ca2e:	f840 1d04 	str.w	r1, [r0, #-4]!
   1ca32:	60da      	str	r2, [r3, #12]
   1ca34:	6922      	ldr	r2, [r4, #16]
   1ca36:	611a      	str	r2, [r3, #16]
   1ca38:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1ca3c:	f7ff f806 	bl	1ba4c <rpc_ip_client_request_alloc>
   1ca40:	2800      	cmp	r0, #0
   1ca42:	d146      	bne.n	1cad2 <ip_interface_accept+0x156>
   1ca44:	f247 030c 	movw	r3, #28684	; 0x700c
   1ca48:	2108      	movs	r1, #8
   1ca4a:	f8dd b014 	ldr.w	fp, [sp, #20]
   1ca4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1ca52:	f8cb 300c 	str.w	r3, [fp, #12]
   1ca56:	f8cb 9010 	str.w	r9, [fp, #16]
   1ca5a:	f88b 0009 	strb.w	r0, [fp, #9]
   1ca5e:	f88b 000a 	strb.w	r0, [fp, #10]
   1ca62:	f88b 000b 	strb.w	r0, [fp, #11]
   1ca66:	f88b 1008 	strb.w	r1, [fp, #8]
   1ca6a:	6823      	ldr	r3, [r4, #0]
   1ca6c:	f247 010c 	movw	r1, #28684	; 0x700c
   1ca70:	0c1b      	lsrs	r3, r3, #16
   1ca72:	041b      	lsls	r3, r3, #16
   1ca74:	f043 0308 	orr.w	r3, r3, #8
   1ca78:	6023      	str	r3, [r4, #0]
   1ca7a:	4658      	mov	r0, fp
   1ca7c:	f8d4 9000 	ldr.w	r9, [r4]
   1ca80:	f7fe fff8 	bl	1ba74 <rpc_ip_client_request_send>
   1ca84:	4682      	mov	sl, r0
   1ca86:	bb60      	cbnz	r0, 1cae2 <ip_interface_accept+0x166>
   1ca88:	6822      	ldr	r2, [r4, #0]
   1ca8a:	9900      	ldr	r1, [sp, #0]
   1ca8c:	ab04      	add	r3, sp, #16
   1ca8e:	400a      	ands	r2, r1
   1ca90:	6022      	str	r2, [r4, #0]
   1ca92:	2109      	movs	r1, #9
   1ca94:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ca98:	4630      	mov	r0, r6
   1ca9a:	f005 f885 	bl	21ba8 <interface_socket_wait>
   1ca9e:	4681      	mov	r9, r0
   1caa0:	2800      	cmp	r0, #0
   1caa2:	f000 808d 	beq.w	1cbc0 <ip_interface_accept+0x244>
   1caa6:	6823      	ldr	r3, [r4, #0]
   1caa8:	9a01      	ldr	r2, [sp, #4]
   1caaa:	431a      	orrs	r2, r3
   1caac:	6022      	str	r2, [r4, #0]
   1caae:	6823      	ldr	r3, [r4, #0]
   1cab0:	0c1b      	lsrs	r3, r3, #16
   1cab2:	041b      	lsls	r3, r3, #16
   1cab4:	f043 0307 	orr.w	r3, r3, #7
   1cab8:	6023      	str	r3, [r4, #0]
   1caba:	6823      	ldr	r3, [r4, #0]
   1cabc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1cac0:	6023      	str	r3, [r4, #0]
   1cac2:	e77d      	b.n	1c9c0 <ip_interface_accept+0x44>
   1cac4:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1cac8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cacc:	e9cd 2300 	strd	r2, r3, [sp]
   1cad0:	e79e      	b.n	1ca10 <ip_interface_accept+0x94>
   1cad2:	f8dd b014 	ldr.w	fp, [sp, #20]
   1cad6:	f04f 090c 	mov.w	r9, #12
   1cada:	f1bb 0f00 	cmp.w	fp, #0
   1cade:	d1c4      	bne.n	1ca6a <ip_interface_accept+0xee>
   1cae0:	e76e      	b.n	1c9c0 <ip_interface_accept+0x44>
   1cae2:	f8db 0000 	ldr.w	r0, [fp]
   1cae6:	b108      	cbz	r0, 1caec <ip_interface_accept+0x170>
   1cae8:	f7fe ffe2 	bl	1bab0 <rpc_ip_client_data_free>
   1caec:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1caf0:	4658      	mov	r0, fp
   1caf2:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1caf6:	f7fe ffd3 	bl	1baa0 <rpc_ip_client_message_free>
   1cafa:	f049 0307 	orr.w	r3, r9, #7
   1cafe:	6023      	str	r3, [r4, #0]
   1cb00:	e76f      	b.n	1c9e2 <ip_interface_accept+0x66>
   1cb02:	4630      	mov	r0, r6
   1cb04:	f005 f8c4 	bl	21c90 <interface_socket_from_handle_get>
   1cb08:	b130      	cbz	r0, 1cb18 <ip_interface_accept+0x19c>
   1cb0a:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1cb0e:	f1b9 0f00 	cmp.w	r9, #0
   1cb12:	d001      	beq.n	1cb18 <ip_interface_accept+0x19c>
   1cb14:	6045      	str	r5, [r0, #4]
   1cb16:	e772      	b.n	1c9fe <ip_interface_accept+0x82>
   1cb18:	6823      	ldr	r3, [r4, #0]
   1cb1a:	03d9      	lsls	r1, r3, #15
   1cb1c:	f53f af73 	bmi.w	1ca06 <ip_interface_accept+0x8a>
   1cb20:	4d35      	ldr	r5, [pc, #212]	; (1cbf8 <ip_interface_accept+0x27c>)
   1cb22:	9903      	ldr	r1, [sp, #12]
   1cb24:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cb28:	699b      	ldr	r3, [r3, #24]
   1cb2a:	618b      	str	r3, [r1, #24]
   1cb2c:	b147      	cbz	r7, 1cb40 <ip_interface_accept+0x1c4>
   1cb2e:	68cb      	ldr	r3, [r1, #12]
   1cb30:	2b0a      	cmp	r3, #10
   1cb32:	d028      	beq.n	1cb86 <ip_interface_accept+0x20a>
   1cb34:	2b02      	cmp	r3, #2
   1cb36:	d103      	bne.n	1cb40 <ip_interface_accept+0x1c4>
   1cb38:	f8d8 2000 	ldr.w	r2, [r8]
   1cb3c:	2a10      	cmp	r2, #16
   1cb3e:	d036      	beq.n	1cbae <ip_interface_accept+0x232>
   1cb40:	680a      	ldr	r2, [r1, #0]
   1cb42:	482e      	ldr	r0, [pc, #184]	; (1cbfc <ip_interface_accept+0x280>)
   1cb44:	4002      	ands	r2, r0
   1cb46:	f042 0205 	orr.w	r2, r2, #5
   1cb4a:	600a      	str	r2, [r1, #0]
   1cb4c:	9a03      	ldr	r2, [sp, #12]
   1cb4e:	6811      	ldr	r1, [r2, #0]
   1cb50:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   1cb54:	6011      	str	r1, [r2, #0]
   1cb56:	6811      	ldr	r1, [r2, #0]
   1cb58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb5c:	6011      	str	r1, [r2, #0]
   1cb5e:	6823      	ldr	r3, [r4, #0]
   1cb60:	4003      	ands	r3, r0
   1cb62:	f043 0307 	orr.w	r3, r3, #7
   1cb66:	6023      	str	r3, [r4, #0]
   1cb68:	6823      	ldr	r3, [r4, #0]
   1cb6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1cb6e:	6023      	str	r3, [r4, #0]
   1cb70:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1cb74:	f7fe ff94 	bl	1baa0 <rpc_ip_client_message_free>
   1cb78:	2300      	movs	r3, #0
   1cb7a:	4648      	mov	r0, r9
   1cb7c:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1cb80:	b007      	add	sp, #28
   1cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb86:	f8d8 2000 	ldr.w	r2, [r8]
   1cb8a:	2a24      	cmp	r2, #36	; 0x24
   1cb8c:	d1d8      	bne.n	1cb40 <ip_interface_accept+0x1c4>
   1cb8e:	703a      	strb	r2, [r7, #0]
   1cb90:	2210      	movs	r2, #16
   1cb92:	607b      	str	r3, [r7, #4]
   1cb94:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cb98:	f107 0010 	add.w	r0, r7, #16
   1cb9c:	8b9b      	ldrh	r3, [r3, #28]
   1cb9e:	813b      	strh	r3, [r7, #8]
   1cba0:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1cba4:	3120      	adds	r1, #32
   1cba6:	f7ef ffd1 	bl	cb4c <memcpy>
   1cbaa:	9903      	ldr	r1, [sp, #12]
   1cbac:	e7c8      	b.n	1cb40 <ip_interface_accept+0x1c4>
   1cbae:	703a      	strb	r2, [r7, #0]
   1cbb0:	607b      	str	r3, [r7, #4]
   1cbb2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cbb6:	f107 000c 	add.w	r0, r7, #12
   1cbba:	8b9b      	ldrh	r3, [r3, #28]
   1cbbc:	2204      	movs	r2, #4
   1cbbe:	e7ee      	b.n	1cb9e <ip_interface_accept+0x222>
   1cbc0:	4630      	mov	r0, r6
   1cbc2:	f005 f865 	bl	21c90 <interface_socket_from_handle_get>
   1cbc6:	b138      	cbz	r0, 1cbd8 <ip_interface_accept+0x25c>
   1cbc8:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1cbcc:	f1b9 0f00 	cmp.w	r9, #0
   1cbd0:	d002      	beq.n	1cbd8 <ip_interface_accept+0x25c>
   1cbd2:	f8c0 a004 	str.w	sl, [r0, #4]
   1cbd6:	e766      	b.n	1caa6 <ip_interface_accept+0x12a>
   1cbd8:	6823      	ldr	r3, [r4, #0]
   1cbda:	9a01      	ldr	r2, [sp, #4]
   1cbdc:	46a9      	mov	r9, r5
   1cbde:	4313      	orrs	r3, r2
   1cbe0:	6023      	str	r3, [r4, #0]
   1cbe2:	e79d      	b.n	1cb20 <ip_interface_accept+0x1a4>
   1cbe4:	4605      	mov	r5, r0
   1cbe6:	f04f 0909 	mov.w	r9, #9
   1cbea:	e6e9      	b.n	1c9c0 <ip_interface_accept+0x44>
   1cbec:	f04f 090c 	mov.w	r9, #12
   1cbf0:	e6eb      	b.n	1c9ca <ip_interface_accept+0x4e>
   1cbf2:	bf00      	nop
   1cbf4:	0001bac1 	.word	0x0001bac1
   1cbf8:	200219e8 	.word	0x200219e8
   1cbfc:	ffff0000 	.word	0xffff0000

0001cc00 <ip_interface_setopt>:
   1cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc04:	2901      	cmp	r1, #1
   1cc06:	b084      	sub	sp, #16
   1cc08:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1cc0a:	f040 808a 	bne.w	1cd22 <ip_interface_setopt+0x122>
   1cc0e:	4617      	mov	r7, r2
   1cc10:	461d      	mov	r5, r3
   1cc12:	4680      	mov	r8, r0
   1cc14:	f005 f83c 	bl	21c90 <interface_socket_from_handle_get>
   1cc18:	4604      	mov	r4, r0
   1cc1a:	2800      	cmp	r0, #0
   1cc1c:	f000 808d 	beq.w	1cd3a <ip_interface_setopt+0x13a>
   1cc20:	f1a7 0119 	sub.w	r1, r7, #25
   1cc24:	290f      	cmp	r1, #15
   1cc26:	d872      	bhi.n	1cd0e <ip_interface_setopt+0x10e>
   1cc28:	e8df f001 	tbb	[pc, r1]
   1cc2c:	7171711a 	.word	0x7171711a
   1cc30:	61514071 	.word	0x61514071
   1cc34:	71717171 	.word	0x71717171
   1cc38:	08717171 	.word	0x08717171
   1cc3c:	2e04      	cmp	r6, #4
   1cc3e:	d176      	bne.n	1cd2e <ip_interface_setopt+0x12e>
   1cc40:	2d00      	cmp	r5, #0
   1cc42:	d074      	beq.n	1cd2e <ip_interface_setopt+0x12e>
   1cc44:	4601      	mov	r1, r0
   1cc46:	e9cd 5600 	strd	r5, r6, [sp]
   1cc4a:	4640      	mov	r0, r8
   1cc4c:	f241 0304 	movw	r3, #4100	; 0x1004
   1cc50:	2208      	movs	r2, #8
   1cc52:	f7ff fcff 	bl	1c654 <ip_interface_socketoption_send>
   1cc56:	bb20      	cbnz	r0, 1cca2 <ip_interface_setopt+0xa2>
   1cc58:	2000      	movs	r0, #0
   1cc5a:	b004      	add	sp, #16
   1cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc60:	2d00      	cmp	r5, #0
   1cc62:	d06c      	beq.n	1cd3e <ip_interface_setopt+0x13e>
   1cc64:	4628      	mov	r0, r5
   1cc66:	f009 fff7 	bl	26c58 <strlen>
   1cc6a:	42b0      	cmp	r0, r6
   1cc6c:	d167      	bne.n	1cd3e <ip_interface_setopt+0x13e>
   1cc6e:	6823      	ldr	r3, [r4, #0]
   1cc70:	b29b      	uxth	r3, r3
   1cc72:	2b02      	cmp	r3, #2
   1cc74:	d161      	bne.n	1cd3a <ip_interface_setopt+0x13a>
   1cc76:	4629      	mov	r1, r5
   1cc78:	68e0      	ldr	r0, [r4, #12]
   1cc7a:	f002 fdc1 	bl	1f800 <pdn_interface_pdn_id_get>
   1cc7e:	9003      	str	r0, [sp, #12]
   1cc80:	3001      	adds	r0, #1
   1cc82:	bf08      	it	eq
   1cc84:	2016      	moveq	r0, #22
   1cc86:	d00c      	beq.n	1cca2 <ip_interface_setopt+0xa2>
   1cc88:	2204      	movs	r2, #4
   1cc8a:	ab03      	add	r3, sp, #12
   1cc8c:	e9cd 3200 	strd	r3, r2, [sp]
   1cc90:	4621      	mov	r1, r4
   1cc92:	4640      	mov	r0, r8
   1cc94:	f243 0310 	movw	r3, #12304	; 0x3010
   1cc98:	2208      	movs	r2, #8
   1cc9a:	f7ff fcdb 	bl	1c654 <ip_interface_socketoption_send>
   1cc9e:	2800      	cmp	r0, #0
   1cca0:	d0da      	beq.n	1cc58 <ip_interface_setopt+0x58>
   1cca2:	f7f9 ff6d 	bl	16b80 <bsd_os_errno_set>
   1cca6:	f04f 30ff 	mov.w	r0, #4294967295
   1ccaa:	e7d6      	b.n	1cc5a <ip_interface_setopt+0x5a>
   1ccac:	2e04      	cmp	r6, #4
   1ccae:	d13e      	bne.n	1cd2e <ip_interface_setopt+0x12e>
   1ccb0:	2d00      	cmp	r5, #0
   1ccb2:	d03c      	beq.n	1cd2e <ip_interface_setopt+0x12e>
   1ccb4:	4601      	mov	r1, r0
   1ccb6:	e9cd 5600 	strd	r5, r6, [sp]
   1ccba:	4640      	mov	r0, r8
   1ccbc:	f248 0301 	movw	r3, #32769	; 0x8001
   1ccc0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ccc4:	f7ff fcc6 	bl	1c654 <ip_interface_socketoption_send>
   1ccc8:	2800      	cmp	r0, #0
   1ccca:	d0c5      	beq.n	1cc58 <ip_interface_setopt+0x58>
   1cccc:	e7e9      	b.n	1cca2 <ip_interface_setopt+0xa2>
   1ccce:	2e04      	cmp	r6, #4
   1ccd0:	d12d      	bne.n	1cd2e <ip_interface_setopt+0x12e>
   1ccd2:	b365      	cbz	r5, 1cd2e <ip_interface_setopt+0x12e>
   1ccd4:	4601      	mov	r1, r0
   1ccd6:	e9cd 5600 	strd	r5, r6, [sp]
   1ccda:	4640      	mov	r0, r8
   1ccdc:	f244 0310 	movw	r3, #16400	; 0x4010
   1cce0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cce4:	f7ff fcb6 	bl	1c654 <ip_interface_socketoption_send>
   1cce8:	2800      	cmp	r0, #0
   1ccea:	d0b5      	beq.n	1cc58 <ip_interface_setopt+0x58>
   1ccec:	e7d9      	b.n	1cca2 <ip_interface_setopt+0xa2>
   1ccee:	2e04      	cmp	r6, #4
   1ccf0:	d11d      	bne.n	1cd2e <ip_interface_setopt+0x12e>
   1ccf2:	b1e5      	cbz	r5, 1cd2e <ip_interface_setopt+0x12e>
   1ccf4:	4601      	mov	r1, r0
   1ccf6:	e9cd 5600 	strd	r5, r6, [sp]
   1ccfa:	4640      	mov	r0, r8
   1ccfc:	f246 0310 	movw	r3, #24592	; 0x6010
   1cd00:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cd04:	f7ff fca6 	bl	1c654 <ip_interface_socketoption_send>
   1cd08:	2800      	cmp	r0, #0
   1cd0a:	d0a5      	beq.n	1cc58 <ip_interface_setopt+0x58>
   1cd0c:	e7c9      	b.n	1cca2 <ip_interface_setopt+0xa2>
   1cd0e:	9600      	str	r6, [sp, #0]
   1cd10:	462b      	mov	r3, r5
   1cd12:	463a      	mov	r2, r7
   1cd14:	4640      	mov	r0, r8
   1cd16:	2101      	movs	r1, #1
   1cd18:	f004 ffe2 	bl	21ce0 <interface_socket_setopt>
   1cd1c:	b004      	add	sp, #16
   1cd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd22:	202a      	movs	r0, #42	; 0x2a
   1cd24:	f7f9 ff2c 	bl	16b80 <bsd_os_errno_set>
   1cd28:	f04f 30ff 	mov.w	r0, #4294967295
   1cd2c:	e795      	b.n	1cc5a <ip_interface_setopt+0x5a>
   1cd2e:	2016      	movs	r0, #22
   1cd30:	f7f9 ff26 	bl	16b80 <bsd_os_errno_set>
   1cd34:	f04f 30ff 	mov.w	r0, #4294967295
   1cd38:	e78f      	b.n	1cc5a <ip_interface_setopt+0x5a>
   1cd3a:	2009      	movs	r0, #9
   1cd3c:	e7b1      	b.n	1cca2 <ip_interface_setopt+0xa2>
   1cd3e:	200e      	movs	r0, #14
   1cd40:	e7af      	b.n	1cca2 <ip_interface_setopt+0xa2>
   1cd42:	bf00      	nop

0001cd44 <ip_interface_getopt>:
   1cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd48:	2901      	cmp	r1, #1
   1cd4a:	b082      	sub	sp, #8
   1cd4c:	9c08      	ldr	r4, [sp, #32]
   1cd4e:	d173      	bne.n	1ce38 <ip_interface_getopt+0xf4>
   1cd50:	4617      	mov	r7, r2
   1cd52:	461e      	mov	r6, r3
   1cd54:	4680      	mov	r8, r0
   1cd56:	f004 ff9b 	bl	21c90 <interface_socket_from_handle_get>
   1cd5a:	2800      	cmp	r0, #0
   1cd5c:	d072      	beq.n	1ce44 <ip_interface_getopt+0x100>
   1cd5e:	f1a7 051e 	sub.w	r5, r7, #30
   1cd62:	2d0a      	cmp	r5, #10
   1cd64:	d858      	bhi.n	1ce18 <ip_interface_getopt+0xd4>
   1cd66:	e8df f005 	tbb	[pc, r5]
   1cd6a:	331b      	.short	0x331b
   1cd6c:	57575745 	.word	0x57575745
   1cd70:	57575757 	.word	0x57575757
   1cd74:	06          	.byte	0x06
   1cd75:	00          	.byte	0x00
   1cd76:	2c00      	cmp	r4, #0
   1cd78:	d058      	beq.n	1ce2c <ip_interface_getopt+0xe8>
   1cd7a:	6823      	ldr	r3, [r4, #0]
   1cd7c:	2b04      	cmp	r3, #4
   1cd7e:	d155      	bne.n	1ce2c <ip_interface_getopt+0xe8>
   1cd80:	2e00      	cmp	r6, #0
   1cd82:	d053      	beq.n	1ce2c <ip_interface_getopt+0xe8>
   1cd84:	4601      	mov	r1, r0
   1cd86:	e9cd 6400 	strd	r6, r4, [sp]
   1cd8a:	4640      	mov	r0, r8
   1cd8c:	f241 0304 	movw	r3, #4100	; 0x1004
   1cd90:	2208      	movs	r2, #8
   1cd92:	f7ff fbaf 	bl	1c4f4 <ip_interface_socketoption_get>
   1cd96:	b9b0      	cbnz	r0, 1cdc6 <ip_interface_getopt+0x82>
   1cd98:	2000      	movs	r0, #0
   1cd9a:	b002      	add	sp, #8
   1cd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cda0:	2c00      	cmp	r4, #0
   1cda2:	d043      	beq.n	1ce2c <ip_interface_getopt+0xe8>
   1cda4:	6823      	ldr	r3, [r4, #0]
   1cda6:	2b04      	cmp	r3, #4
   1cda8:	d140      	bne.n	1ce2c <ip_interface_getopt+0xe8>
   1cdaa:	2e00      	cmp	r6, #0
   1cdac:	d03e      	beq.n	1ce2c <ip_interface_getopt+0xe8>
   1cdae:	4601      	mov	r1, r0
   1cdb0:	e9cd 6400 	strd	r6, r4, [sp]
   1cdb4:	4640      	mov	r0, r8
   1cdb6:	f248 0301 	movw	r3, #32769	; 0x8001
   1cdba:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cdbe:	f7ff fb99 	bl	1c4f4 <ip_interface_socketoption_get>
   1cdc2:	2800      	cmp	r0, #0
   1cdc4:	d0e8      	beq.n	1cd98 <ip_interface_getopt+0x54>
   1cdc6:	f7f9 fedb 	bl	16b80 <bsd_os_errno_set>
   1cdca:	f04f 30ff 	mov.w	r0, #4294967295
   1cdce:	e7e4      	b.n	1cd9a <ip_interface_getopt+0x56>
   1cdd0:	b364      	cbz	r4, 1ce2c <ip_interface_getopt+0xe8>
   1cdd2:	6823      	ldr	r3, [r4, #0]
   1cdd4:	2b04      	cmp	r3, #4
   1cdd6:	d129      	bne.n	1ce2c <ip_interface_getopt+0xe8>
   1cdd8:	b346      	cbz	r6, 1ce2c <ip_interface_getopt+0xe8>
   1cdda:	4601      	mov	r1, r0
   1cddc:	e9cd 6400 	strd	r6, r4, [sp]
   1cde0:	4640      	mov	r0, r8
   1cde2:	f244 0310 	movw	r3, #16400	; 0x4010
   1cde6:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cdea:	f7ff fb83 	bl	1c4f4 <ip_interface_socketoption_get>
   1cdee:	2800      	cmp	r0, #0
   1cdf0:	d0d2      	beq.n	1cd98 <ip_interface_getopt+0x54>
   1cdf2:	e7e8      	b.n	1cdc6 <ip_interface_getopt+0x82>
   1cdf4:	b1d4      	cbz	r4, 1ce2c <ip_interface_getopt+0xe8>
   1cdf6:	6823      	ldr	r3, [r4, #0]
   1cdf8:	2b04      	cmp	r3, #4
   1cdfa:	d117      	bne.n	1ce2c <ip_interface_getopt+0xe8>
   1cdfc:	b1b6      	cbz	r6, 1ce2c <ip_interface_getopt+0xe8>
   1cdfe:	4601      	mov	r1, r0
   1ce00:	e9cd 6400 	strd	r6, r4, [sp]
   1ce04:	4640      	mov	r0, r8
   1ce06:	f246 0310 	movw	r3, #24592	; 0x6010
   1ce0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ce0e:	f7ff fb71 	bl	1c4f4 <ip_interface_socketoption_get>
   1ce12:	2800      	cmp	r0, #0
   1ce14:	d0c0      	beq.n	1cd98 <ip_interface_getopt+0x54>
   1ce16:	e7d6      	b.n	1cdc6 <ip_interface_getopt+0x82>
   1ce18:	4633      	mov	r3, r6
   1ce1a:	463a      	mov	r2, r7
   1ce1c:	4640      	mov	r0, r8
   1ce1e:	2101      	movs	r1, #1
   1ce20:	9408      	str	r4, [sp, #32]
   1ce22:	b002      	add	sp, #8
   1ce24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ce28:	f004 bfa0 	b.w	21d6c <interface_socket_getopt>
   1ce2c:	2016      	movs	r0, #22
   1ce2e:	f7f9 fea7 	bl	16b80 <bsd_os_errno_set>
   1ce32:	f04f 30ff 	mov.w	r0, #4294967295
   1ce36:	e7b0      	b.n	1cd9a <ip_interface_getopt+0x56>
   1ce38:	202a      	movs	r0, #42	; 0x2a
   1ce3a:	f7f9 fea1 	bl	16b80 <bsd_os_errno_set>
   1ce3e:	f04f 30ff 	mov.w	r0, #4294967295
   1ce42:	e7aa      	b.n	1cd9a <ip_interface_getopt+0x56>
   1ce44:	2009      	movs	r0, #9
   1ce46:	f7f9 fe9b 	bl	16b80 <bsd_os_errno_set>
   1ce4a:	f04f 30ff 	mov.w	r0, #4294967295
   1ce4e:	e7a4      	b.n	1cd9a <ip_interface_getopt+0x56>

0001ce50 <ip_interface_getaddrinfo>:
   1ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce54:	f04f 0c00 	mov.w	ip, #0
   1ce58:	2401      	movs	r4, #1
   1ce5a:	4e75      	ldr	r6, [pc, #468]	; (1d030 <ip_interface_getaddrinfo+0x1e0>)
   1ce5c:	4d75      	ldr	r5, [pc, #468]	; (1d034 <ip_interface_getaddrinfo+0x1e4>)
   1ce5e:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 1d044 <ip_interface_getaddrinfo+0x1f4>
   1ce62:	4f75      	ldr	r7, [pc, #468]	; (1d038 <ip_interface_getaddrinfo+0x1e8>)
   1ce64:	7836      	ldrb	r6, [r6, #0]
   1ce66:	b085      	sub	sp, #20
   1ce68:	f8a5 c000 	strh.w	ip, [r5]
   1ce6c:	f8c8 4000 	str.w	r4, [r8]
   1ce70:	603c      	str	r4, [r7, #0]
   1ce72:	2e00      	cmp	r6, #0
   1ce74:	d05b      	beq.n	1cf2e <ip_interface_getaddrinfo+0xde>
   1ce76:	9301      	str	r3, [sp, #4]
   1ce78:	4614      	mov	r4, r2
   1ce7a:	460b      	mov	r3, r1
   1ce7c:	4606      	mov	r6, r0
   1ce7e:	b171      	cbz	r1, 1ce9e <ip_interface_getaddrinfo+0x4e>
   1ce80:	4618      	mov	r0, r3
   1ce82:	220a      	movs	r2, #10
   1ce84:	4661      	mov	r1, ip
   1ce86:	f00a fa3b 	bl	27300 <strtol>
   1ce8a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1ce8e:	1e42      	subs	r2, r0, #1
   1ce90:	429a      	cmp	r2, r3
   1ce92:	f200 8097 	bhi.w	1cfc4 <ip_interface_getaddrinfo+0x174>
   1ce96:	0203      	lsls	r3, r0, #8
   1ce98:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1ce9c:	8028      	strh	r0, [r5, #0]
   1ce9e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 1d048 <ip_interface_getaddrinfo+0x1f8>
   1cea2:	f8da 3000 	ldr.w	r3, [sl]
   1cea6:	2b00      	cmp	r3, #0
   1cea8:	d145      	bne.n	1cf36 <ip_interface_getaddrinfo+0xe6>
   1ceaa:	4a64      	ldr	r2, [pc, #400]	; (1d03c <ip_interface_getaddrinfo+0x1ec>)
   1ceac:	6013      	str	r3, [r2, #0]
   1ceae:	4a64      	ldr	r2, [pc, #400]	; (1d040 <ip_interface_getaddrinfo+0x1f0>)
   1ceb0:	6013      	str	r3, [r2, #0]
   1ceb2:	2e00      	cmp	r6, #0
   1ceb4:	d07a      	beq.n	1cfac <ip_interface_getaddrinfo+0x15c>
   1ceb6:	4630      	mov	r0, r6
   1ceb8:	f009 fece 	bl	26c58 <strlen>
   1cebc:	4683      	mov	fp, r0
   1cebe:	b144      	cbz	r4, 1ced2 <ip_interface_getaddrinfo+0x82>
   1cec0:	69e2      	ldr	r2, [r4, #28]
   1cec2:	b132      	cbz	r2, 1ced2 <ip_interface_getaddrinfo+0x82>
   1cec4:	6851      	ldr	r1, [r2, #4]
   1cec6:	2966      	cmp	r1, #102	; 0x66
   1cec8:	d103      	bne.n	1ced2 <ip_interface_getaddrinfo+0x82>
   1ceca:	6891      	ldr	r1, [r2, #8]
   1cecc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ced0:	d07e      	beq.n	1cfd0 <ip_interface_getaddrinfo+0x180>
   1ced2:	f04f 32ff 	mov.w	r2, #4294967295
   1ced6:	2100      	movs	r1, #0
   1ced8:	f10d 0910 	add.w	r9, sp, #16
   1cedc:	f849 1d04 	str.w	r1, [r9, #-4]!
   1cee0:	4648      	mov	r0, r9
   1cee2:	4659      	mov	r1, fp
   1cee4:	9200      	str	r2, [sp, #0]
   1cee6:	f7fe fdb1 	bl	1ba4c <rpc_ip_client_request_alloc>
   1ceea:	9a00      	ldr	r2, [sp, #0]
   1ceec:	2800      	cmp	r0, #0
   1ceee:	d15f      	bne.n	1cfb0 <ip_interface_getaddrinfo+0x160>
   1cef0:	f247 010d 	movw	r1, #28685	; 0x700d
   1cef4:	f04f 0c08 	mov.w	ip, #8
   1cef8:	9d03      	ldr	r5, [sp, #12]
   1cefa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1cefe:	60e9      	str	r1, [r5, #12]
   1cf00:	612a      	str	r2, [r5, #16]
   1cf02:	7268      	strb	r0, [r5, #9]
   1cf04:	72a8      	strb	r0, [r5, #10]
   1cf06:	72e8      	strb	r0, [r5, #11]
   1cf08:	f885 c008 	strb.w	ip, [r5, #8]
   1cf0c:	2c00      	cmp	r4, #0
   1cf0e:	d076      	beq.n	1cffe <ip_interface_getaddrinfo+0x1ae>
   1cf10:	6862      	ldr	r2, [r4, #4]
   1cf12:	f022 0108 	bic.w	r1, r2, #8
   1cf16:	2902      	cmp	r1, #2
   1cf18:	d011      	beq.n	1cf3e <ip_interface_getaddrinfo+0xee>
   1cf1a:	2a05      	cmp	r2, #5
   1cf1c:	d176      	bne.n	1d00c <ip_interface_getaddrinfo+0x1bc>
   1cf1e:	68a1      	ldr	r1, [r4, #8]
   1cf20:	2902      	cmp	r1, #2
   1cf22:	6039      	str	r1, [r7, #0]
   1cf24:	d115      	bne.n	1cf52 <ip_interface_getaddrinfo+0x102>
   1cf26:	2102      	movs	r1, #2
   1cf28:	f8c8 1000 	str.w	r1, [r8]
   1cf2c:	e00b      	b.n	1cf46 <ip_interface_getaddrinfo+0xf6>
   1cf2e:	2070      	movs	r0, #112	; 0x70
   1cf30:	b005      	add	sp, #20
   1cf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf36:	2073      	movs	r0, #115	; 0x73
   1cf38:	b005      	add	sp, #20
   1cf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf3e:	68a1      	ldr	r1, [r4, #8]
   1cf40:	2902      	cmp	r1, #2
   1cf42:	6039      	str	r1, [r7, #0]
   1cf44:	d0ef      	beq.n	1cf26 <ip_interface_getaddrinfo+0xd6>
   1cf46:	2a05      	cmp	r2, #5
   1cf48:	d003      	beq.n	1cf52 <ip_interface_getaddrinfo+0x102>
   1cf4a:	2a0a      	cmp	r2, #10
   1cf4c:	bf14      	ite	ne
   1cf4e:	2201      	movne	r2, #1
   1cf50:	2202      	moveq	r2, #2
   1cf52:	61aa      	str	r2, [r5, #24]
   1cf54:	68e2      	ldr	r2, [r4, #12]
   1cf56:	622a      	str	r2, [r5, #32]
   1cf58:	68a2      	ldr	r2, [r4, #8]
   1cf5a:	61ea      	str	r2, [r5, #28]
   1cf5c:	6822      	ldr	r2, [r4, #0]
   1cf5e:	616a      	str	r2, [r5, #20]
   1cf60:	68aa      	ldr	r2, [r5, #8]
   1cf62:	3210      	adds	r2, #16
   1cf64:	60aa      	str	r2, [r5, #8]
   1cf66:	b12e      	cbz	r6, 1cf74 <ip_interface_getaddrinfo+0x124>
   1cf68:	6828      	ldr	r0, [r5, #0]
   1cf6a:	b118      	cbz	r0, 1cf74 <ip_interface_getaddrinfo+0x124>
   1cf6c:	465a      	mov	r2, fp
   1cf6e:	4631      	mov	r1, r6
   1cf70:	f7ef fdec 	bl	cb4c <memcpy>
   1cf74:	2301      	movs	r3, #1
   1cf76:	f247 010d 	movw	r1, #28685	; 0x700d
   1cf7a:	4628      	mov	r0, r5
   1cf7c:	f8ca 3000 	str.w	r3, [sl]
   1cf80:	f7fe fd78 	bl	1ba74 <rpc_ip_client_request_send>
   1cf84:	bb10      	cbnz	r0, 1cfcc <ip_interface_getaddrinfo+0x17c>
   1cf86:	f04f 33ff 	mov.w	r3, #4294967295
   1cf8a:	9303      	str	r3, [sp, #12]
   1cf8c:	4649      	mov	r1, r9
   1cf8e:	4628      	mov	r0, r5
   1cf90:	f7f9 fd3e 	bl	16a10 <bsd_os_timedwait>
   1cf94:	f8da 3000 	ldr.w	r3, [sl]
   1cf98:	2b01      	cmp	r3, #1
   1cf9a:	d0f7      	beq.n	1cf8c <ip_interface_getaddrinfo+0x13c>
   1cf9c:	4b28      	ldr	r3, [pc, #160]	; (1d040 <ip_interface_getaddrinfo+0x1f0>)
   1cf9e:	6818      	ldr	r0, [r3, #0]
   1cfa0:	bb40      	cbnz	r0, 1cff4 <ip_interface_getaddrinfo+0x1a4>
   1cfa2:	4b26      	ldr	r3, [pc, #152]	; (1d03c <ip_interface_getaddrinfo+0x1ec>)
   1cfa4:	9a01      	ldr	r2, [sp, #4]
   1cfa6:	681b      	ldr	r3, [r3, #0]
   1cfa8:	6013      	str	r3, [r2, #0]
   1cfaa:	e7c1      	b.n	1cf30 <ip_interface_getaddrinfo+0xe0>
   1cfac:	46b3      	mov	fp, r6
   1cfae:	e786      	b.n	1cebe <ip_interface_getaddrinfo+0x6e>
   1cfb0:	9d03      	ldr	r5, [sp, #12]
   1cfb2:	2d00      	cmp	r5, #0
   1cfb4:	d1aa      	bne.n	1cf0c <ip_interface_getaddrinfo+0xbc>
   1cfb6:	200c      	movs	r0, #12
   1cfb8:	2300      	movs	r3, #0
   1cfba:	f8ca 3000 	str.w	r3, [sl]
   1cfbe:	b005      	add	sp, #20
   1cfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfc4:	2016      	movs	r0, #22
   1cfc6:	b005      	add	sp, #20
   1cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfcc:	2023      	movs	r0, #35	; 0x23
   1cfce:	e7f3      	b.n	1cfb8 <ip_interface_getaddrinfo+0x168>
   1cfd0:	f240 2002 	movw	r0, #514	; 0x202
   1cfd4:	68d1      	ldr	r1, [r2, #12]
   1cfd6:	4281      	cmp	r1, r0
   1cfd8:	f47f af7b 	bne.w	1ced2 <ip_interface_getaddrinfo+0x82>
   1cfdc:	6991      	ldr	r1, [r2, #24]
   1cfde:	2900      	cmp	r1, #0
   1cfe0:	f43f af77 	beq.w	1ced2 <ip_interface_getaddrinfo+0x82>
   1cfe4:	6860      	ldr	r0, [r4, #4]
   1cfe6:	f002 fc0b 	bl	1f800 <pdn_interface_pdn_id_get>
   1cfea:	1c43      	adds	r3, r0, #1
   1cfec:	f43f af71 	beq.w	1ced2 <ip_interface_getaddrinfo+0x82>
   1cff0:	4602      	mov	r2, r0
   1cff2:	e770      	b.n	1ced6 <ip_interface_getaddrinfo+0x86>
   1cff4:	4b12      	ldr	r3, [pc, #72]	; (1d040 <ip_interface_getaddrinfo+0x1f0>)
   1cff6:	6818      	ldr	r0, [r3, #0]
   1cff8:	2800      	cmp	r0, #0
   1cffa:	d099      	beq.n	1cf30 <ip_interface_getaddrinfo+0xe0>
   1cffc:	e7dc      	b.n	1cfb8 <ip_interface_getaddrinfo+0x168>
   1cffe:	4621      	mov	r1, r4
   1d000:	2210      	movs	r2, #16
   1d002:	f105 0014 	add.w	r0, r5, #20
   1d006:	f009 fa17 	bl	26438 <memset>
   1d00a:	e7a9      	b.n	1cf60 <ip_interface_getaddrinfo+0x110>
   1d00c:	202f      	movs	r0, #47	; 0x2f
   1d00e:	f7f9 fdb7 	bl	16b80 <bsd_os_errno_set>
   1d012:	68aa      	ldr	r2, [r5, #8]
   1d014:	3210      	adds	r2, #16
   1d016:	60aa      	str	r2, [r5, #8]
   1d018:	b916      	cbnz	r6, 1d020 <ip_interface_getaddrinfo+0x1d0>
   1d01a:	f04f 30ff 	mov.w	r0, #4294967295
   1d01e:	e7cb      	b.n	1cfb8 <ip_interface_getaddrinfo+0x168>
   1d020:	6828      	ldr	r0, [r5, #0]
   1d022:	2800      	cmp	r0, #0
   1d024:	d0f9      	beq.n	1d01a <ip_interface_getaddrinfo+0x1ca>
   1d026:	465a      	mov	r2, fp
   1d028:	4631      	mov	r1, r6
   1d02a:	f7ef fd8f 	bl	cb4c <memcpy>
   1d02e:	e7f4      	b.n	1d01a <ip_interface_getaddrinfo+0x1ca>
   1d030:	2002629a 	.word	0x2002629a
   1d034:	200242c8 	.word	0x200242c8
   1d038:	200219d8 	.word	0x200219d8
   1d03c:	200219e4 	.word	0x200219e4
   1d040:	200219dc 	.word	0x200219dc
   1d044:	200219d4 	.word	0x200219d4
   1d048:	200219e0 	.word	0x200219e0

0001d04c <ip_interface_freeaddrinfo>:
   1d04c:	b538      	push	{r3, r4, r5, lr}
   1d04e:	4d0b      	ldr	r5, [pc, #44]	; (1d07c <ip_interface_freeaddrinfo+0x30>)
   1d050:	682b      	ldr	r3, [r5, #0]
   1d052:	2b02      	cmp	r3, #2
   1d054:	d000      	beq.n	1d058 <ip_interface_freeaddrinfo+0xc>
   1d056:	bd38      	pop	{r3, r4, r5, pc}
   1d058:	b150      	cbz	r0, 1d070 <ip_interface_freeaddrinfo+0x24>
   1d05a:	4604      	mov	r4, r0
   1d05c:	6940      	ldr	r0, [r0, #20]
   1d05e:	f004 f919 	bl	21294 <nrf_free>
   1d062:	69a0      	ldr	r0, [r4, #24]
   1d064:	b108      	cbz	r0, 1d06a <ip_interface_freeaddrinfo+0x1e>
   1d066:	f004 f915 	bl	21294 <nrf_free>
   1d06a:	4620      	mov	r0, r4
   1d06c:	f004 f912 	bl	21294 <nrf_free>
   1d070:	2300      	movs	r3, #0
   1d072:	4a03      	ldr	r2, [pc, #12]	; (1d080 <ip_interface_freeaddrinfo+0x34>)
   1d074:	602b      	str	r3, [r5, #0]
   1d076:	6013      	str	r3, [r2, #0]
   1d078:	bd38      	pop	{r3, r4, r5, pc}
   1d07a:	bf00      	nop
   1d07c:	200219e0 	.word	0x200219e0
   1d080:	200219dc 	.word	0x200219dc

0001d084 <rpc_ip_event_handler>:
   1d084:	f248 030d 	movw	r3, #32781	; 0x800d
   1d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d08c:	4299      	cmp	r1, r3
   1d08e:	b089      	sub	sp, #36	; 0x24
   1d090:	4604      	mov	r4, r0
   1d092:	d05c      	beq.n	1d14e <rpc_ip_event_handler+0xca>
   1d094:	f248 030f 	movw	r3, #32783	; 0x800f
   1d098:	4299      	cmp	r1, r3
   1d09a:	460d      	mov	r5, r1
   1d09c:	d045      	beq.n	1d12a <rpc_ip_event_handler+0xa6>
   1d09e:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1d0a2:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1d0a6:	68c0      	ldr	r0, [r0, #12]
   1d0a8:	d075      	beq.n	1d196 <rpc_ip_event_handler+0x112>
   1d0aa:	0c06      	lsrs	r6, r0, #16
   1d0ac:	4630      	mov	r0, r6
   1d0ae:	f004 fdef 	bl	21c90 <interface_socket_from_handle_get>
   1d0b2:	4607      	mov	r7, r0
   1d0b4:	2800      	cmp	r0, #0
   1d0b6:	d059      	beq.n	1d16c <rpc_ip_event_handler+0xe8>
   1d0b8:	4601      	mov	r1, r0
   1d0ba:	462b      	mov	r3, r5
   1d0bc:	4622      	mov	r2, r4
   1d0be:	4630      	mov	r0, r6
   1d0c0:	f7fe fc36 	bl	1b930 <tls_rpc_ip_event_handler>
   1d0c4:	2800      	cmp	r0, #0
   1d0c6:	d04d      	beq.n	1d164 <rpc_ip_event_handler+0xe0>
   1d0c8:	f248 0307 	movw	r3, #32775	; 0x8007
   1d0cc:	429d      	cmp	r5, r3
   1d0ce:	d866      	bhi.n	1d19e <rpc_ip_event_handler+0x11a>
   1d0d0:	f248 0306 	movw	r3, #32774	; 0x8006
   1d0d4:	429d      	cmp	r5, r3
   1d0d6:	f080 81e7 	bcs.w	1d4a8 <rpc_ip_event_handler+0x424>
   1d0da:	f248 0303 	movw	r3, #32771	; 0x8003
   1d0de:	429d      	cmp	r5, r3
   1d0e0:	f000 81c5 	beq.w	1d46e <rpc_ip_event_handler+0x3ea>
   1d0e4:	f200 811b 	bhi.w	1d31e <rpc_ip_event_handler+0x29a>
   1d0e8:	f248 0301 	movw	r3, #32769	; 0x8001
   1d0ec:	429d      	cmp	r5, r3
   1d0ee:	f000 8154 	beq.w	1d39a <rpc_ip_event_handler+0x316>
   1d0f2:	f248 0302 	movw	r3, #32770	; 0x8002
   1d0f6:	429d      	cmp	r5, r3
   1d0f8:	d138      	bne.n	1d16c <rpc_ip_event_handler+0xe8>
   1d0fa:	683b      	ldr	r3, [r7, #0]
   1d0fc:	0098      	lsls	r0, r3, #2
   1d0fe:	d531      	bpl.n	1d164 <rpc_ip_event_handler+0xe0>
   1d100:	683b      	ldr	r3, [r7, #0]
   1d102:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1d106:	603b      	str	r3, [r7, #0]
   1d108:	6963      	ldr	r3, [r4, #20]
   1d10a:	2b00      	cmp	r3, #0
   1d10c:	f000 81ea 	beq.w	1d4e4 <rpc_ip_event_handler+0x460>
   1d110:	2b10      	cmp	r3, #16
   1d112:	bf8e      	itee	hi
   1d114:	232d      	movhi	r3, #45	; 0x2d
   1d116:	4ab9      	ldrls	r2, [pc, #740]	; (1d3fc <rpc_ip_event_handler+0x378>)
   1d118:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1d11c:	607b      	str	r3, [r7, #4]
   1d11e:	683b      	ldr	r3, [r7, #0]
   1d120:	2000      	movs	r0, #0
   1d122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1d126:	603b      	str	r3, [r7, #0]
   1d128:	e00e      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d12a:	6943      	ldr	r3, [r0, #20]
   1d12c:	2001      	movs	r0, #1
   1d12e:	2b10      	cmp	r3, #16
   1d130:	49b3      	ldr	r1, [pc, #716]	; (1d400 <rpc_ip_event_handler+0x37c>)
   1d132:	bf88      	it	hi
   1d134:	222d      	movhi	r2, #45	; 0x2d
   1d136:	7008      	strb	r0, [r1, #0]
   1d138:	f04f 0000 	mov.w	r0, #0
   1d13c:	bf9c      	itt	ls
   1d13e:	4aaf      	ldrls	r2, [pc, #700]	; (1d3fc <rpc_ip_event_handler+0x378>)
   1d140:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1d144:	4baf      	ldr	r3, [pc, #700]	; (1d404 <rpc_ip_event_handler+0x380>)
   1d146:	601a      	str	r2, [r3, #0]
   1d148:	b009      	add	sp, #36	; 0x24
   1d14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d14e:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 1d418 <rpc_ip_event_handler+0x394>
   1d152:	6807      	ldr	r7, [r0, #0]
   1d154:	f8da 2000 	ldr.w	r2, [sl]
   1d158:	2a01      	cmp	r2, #1
   1d15a:	d00b      	beq.n	1d174 <rpc_ip_event_handler+0xf0>
   1d15c:	b117      	cbz	r7, 1d164 <rpc_ip_event_handler+0xe0>
   1d15e:	4638      	mov	r0, r7
   1d160:	f7fe fca6 	bl	1bab0 <rpc_ip_client_data_free>
   1d164:	2000      	movs	r0, #0
   1d166:	b009      	add	sp, #36	; 0x24
   1d168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d16c:	6820      	ldr	r0, [r4, #0]
   1d16e:	2800      	cmp	r0, #0
   1d170:	d1f6      	bne.n	1d160 <rpc_ip_event_handler+0xdc>
   1d172:	e7f7      	b.n	1d164 <rpc_ip_event_handler+0xe0>
   1d174:	6942      	ldr	r2, [r0, #20]
   1d176:	2a00      	cmp	r2, #0
   1d178:	d045      	beq.n	1d206 <rpc_ip_event_handler+0x182>
   1d17a:	2a10      	cmp	r2, #16
   1d17c:	bf8e      	itee	hi
   1d17e:	222d      	movhi	r2, #45	; 0x2d
   1d180:	499e      	ldrls	r1, [pc, #632]	; (1d3fc <rpc_ip_event_handler+0x378>)
   1d182:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   1d186:	49a0      	ldr	r1, [pc, #640]	; (1d408 <rpc_ip_event_handler+0x384>)
   1d188:	600a      	str	r2, [r1, #0]
   1d18a:	2202      	movs	r2, #2
   1d18c:	f8ca 2000 	str.w	r2, [sl]
   1d190:	2f00      	cmp	r7, #0
   1d192:	d1e4      	bne.n	1d15e <rpc_ip_event_handler+0xda>
   1d194:	e7e6      	b.n	1d164 <rpc_ip_event_handler+0xe0>
   1d196:	f004 fd29 	bl	21bec <interface_from_internal_id_search>
   1d19a:	4606      	mov	r6, r0
   1d19c:	e786      	b.n	1d0ac <rpc_ip_event_handler+0x28>
   1d19e:	f248 030c 	movw	r3, #32780	; 0x800c
   1d1a2:	429d      	cmp	r5, r3
   1d1a4:	f000 813c 	beq.w	1d420 <rpc_ip_event_handler+0x39c>
   1d1a8:	f240 80d5 	bls.w	1d356 <rpc_ip_event_handler+0x2d2>
   1d1ac:	f249 0302 	movw	r3, #36866	; 0x9002
   1d1b0:	429d      	cmp	r5, r3
   1d1b2:	f000 811d 	beq.w	1d3f0 <rpc_ip_event_handler+0x36c>
   1d1b6:	f249 0303 	movw	r3, #36867	; 0x9003
   1d1ba:	429d      	cmp	r5, r3
   1d1bc:	f000 80f9 	beq.w	1d3b2 <rpc_ip_event_handler+0x32e>
   1d1c0:	f249 0301 	movw	r3, #36865	; 0x9001
   1d1c4:	429d      	cmp	r5, r3
   1d1c6:	d1d1      	bne.n	1d16c <rpc_ip_event_handler+0xe8>
   1d1c8:	683d      	ldr	r5, [r7, #0]
   1d1ca:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1d1ce:	f000 8184 	beq.w	1d4da <rpc_ip_event_handler+0x456>
   1d1d2:	68a3      	ldr	r3, [r4, #8]
   1d1d4:	2b04      	cmp	r3, #4
   1d1d6:	f200 81af 	bhi.w	1d538 <rpc_ip_event_handler+0x4b4>
   1d1da:	2500      	movs	r5, #0
   1d1dc:	462e      	mov	r6, r5
   1d1de:	6821      	ldr	r1, [r4, #0]
   1d1e0:	6862      	ldr	r2, [r4, #4]
   1d1e2:	e9cd 6506 	strd	r6, r5, [sp, #24]
   1d1e6:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1d1ea:	69f8      	ldr	r0, [r7, #28]
   1d1ec:	a904      	add	r1, sp, #16
   1d1ee:	6803      	ldr	r3, [r0, #0]
   1d1f0:	685b      	ldr	r3, [r3, #4]
   1d1f2:	4798      	blx	r3
   1d1f4:	3001      	adds	r0, #1
   1d1f6:	f000 818e 	beq.w	1d516 <rpc_ip_event_handler+0x492>
   1d1fa:	683b      	ldr	r3, [r7, #0]
   1d1fc:	2000      	movs	r0, #0
   1d1fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d202:	603b      	str	r3, [r7, #0]
   1d204:	e7a0      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d206:	6985      	ldr	r5, [r0, #24]
   1d208:	016b      	lsls	r3, r5, #5
   1d20a:	4618      	mov	r0, r3
   1d20c:	9303      	str	r3, [sp, #12]
   1d20e:	f004 f837 	bl	21280 <nrf_malloc>
   1d212:	9002      	str	r0, [sp, #8]
   1d214:	2800      	cmp	r0, #0
   1d216:	d078      	beq.n	1d30a <rpc_ip_event_handler+0x286>
   1d218:	00ee      	lsls	r6, r5, #3
   1d21a:	1970      	adds	r0, r6, r5
   1d21c:	0080      	lsls	r0, r0, #2
   1d21e:	f004 f82f 	bl	21280 <nrf_malloc>
   1d222:	2800      	cmp	r0, #0
   1d224:	d073      	beq.n	1d30e <rpc_ip_event_handler+0x28a>
   1d226:	2d00      	cmp	r5, #0
   1d228:	d074      	beq.n	1d314 <rpc_ip_event_handler+0x290>
   1d22a:	3610      	adds	r6, #16
   1d22c:	1983      	adds	r3, r0, r6
   1d22e:	9301      	str	r3, [sp, #4]
   1d230:	9b02      	ldr	r3, [sp, #8]
   1d232:	2204      	movs	r2, #4
   1d234:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 1d41c <rpc_ip_event_handler+0x398>
   1d238:	f100 0810 	add.w	r8, r0, #16
   1d23c:	f103 0520 	add.w	r5, r3, #32
   1d240:	e013      	b.n	1d26a <rpc_ip_event_handler+0x1e6>
   1d242:	464a      	mov	r2, r9
   1d244:	f7ef fc82 	bl	cb4c <memcpy>
   1d248:	2100      	movs	r1, #0
   1d24a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1d24e:	f108 0808 	add.w	r8, r8, #8
   1d252:	eb09 0206 	add.w	r2, r9, r6
   1d256:	f803 1009 	strb.w	r1, [r3, r9]
   1d25a:	9b01      	ldr	r3, [sp, #4]
   1d25c:	f845 5c04 	str.w	r5, [r5, #-4]
   1d260:	4598      	cmp	r8, r3
   1d262:	f105 0520 	add.w	r5, r5, #32
   1d266:	f000 8090 	beq.w	1d38a <rpc_ip_event_handler+0x306>
   1d26a:	58bb      	ldr	r3, [r7, r2]
   1d26c:	18b9      	adds	r1, r7, r2
   1d26e:	f845 3c20 	str.w	r3, [r5, #-32]
   1d272:	684b      	ldr	r3, [r1, #4]
   1d274:	f8db 0000 	ldr.w	r0, [fp]
   1d278:	2b02      	cmp	r3, #2
   1d27a:	bf14      	ite	ne
   1d27c:	2602      	movne	r6, #2
   1d27e:	260a      	moveq	r6, #10
   1d280:	4b62      	ldr	r3, [pc, #392]	; (1d40c <rpc_ip_event_handler+0x388>)
   1d282:	e945 6007 	strd	r6, r0, [r5, #-28]
   1d286:	681b      	ldr	r3, [r3, #0]
   1d288:	f102 0614 	add.w	r6, r2, #20
   1d28c:	f845 3c14 	str.w	r3, [r5, #-20]
   1d290:	8a08      	ldrh	r0, [r1, #16]
   1d292:	f1a8 0310 	sub.w	r3, r8, #16
   1d296:	f845 0c10 	str.w	r0, [r5, #-16]
   1d29a:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   1d29e:	f845 3c0c 	str.w	r3, [r5, #-12]
   1d2a2:	4b5b      	ldr	r3, [pc, #364]	; (1d410 <rpc_ip_event_handler+0x38c>)
   1d2a4:	2804      	cmp	r0, #4
   1d2a6:	eb07 0106 	add.w	r1, r7, r6
   1d2aa:	881b      	ldrh	r3, [r3, #0]
   1d2ac:	d01e      	beq.n	1d2ec <rpc_ip_event_handler+0x268>
   1d2ae:	220a      	movs	r2, #10
   1d2b0:	f848 2c0c 	str.w	r2, [r8, #-12]
   1d2b4:	f04f 0224 	mov.w	r2, #36	; 0x24
   1d2b8:	f828 3c08 	strh.w	r3, [r8, #-8]
   1d2bc:	f808 2c10 	strb.w	r2, [r8, #-16]
   1d2c0:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1d2c4:	4640      	mov	r0, r8
   1d2c6:	f7ef fc41 	bl	cb4c <memcpy>
   1d2ca:	f855 3c10 	ldr.w	r3, [r5, #-16]
   1d2ce:	f109 0001 	add.w	r0, r9, #1
   1d2d2:	441e      	add	r6, r3
   1d2d4:	f003 ffd4 	bl	21280 <nrf_malloc>
   1d2d8:	19b9      	adds	r1, r7, r6
   1d2da:	eb09 0206 	add.w	r2, r9, r6
   1d2de:	f845 0c08 	str.w	r0, [r5, #-8]
   1d2e2:	2800      	cmp	r0, #0
   1d2e4:	d1ad      	bne.n	1d242 <rpc_ip_event_handler+0x1be>
   1d2e6:	f108 0808 	add.w	r8, r8, #8
   1d2ea:	e7b6      	b.n	1d25a <rpc_ip_event_handler+0x1d6>
   1d2ec:	2210      	movs	r2, #16
   1d2ee:	2002      	movs	r0, #2
   1d2f0:	f828 3c08 	strh.w	r3, [r8, #-8]
   1d2f4:	f848 0c0c 	str.w	r0, [r8, #-12]
   1d2f8:	f808 2c10 	strb.w	r2, [r8, #-16]
   1d2fc:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1d300:	f1a8 0004 	sub.w	r0, r8, #4
   1d304:	f7ef fc22 	bl	cb4c <memcpy>
   1d308:	e7df      	b.n	1d2ca <rpc_ip_event_handler+0x246>
   1d30a:	f003 ffc3 	bl	21294 <nrf_free>
   1d30e:	210c      	movs	r1, #12
   1d310:	4a3d      	ldr	r2, [pc, #244]	; (1d408 <rpc_ip_event_handler+0x384>)
   1d312:	6011      	str	r1, [r2, #0]
   1d314:	9b02      	ldr	r3, [sp, #8]
   1d316:	4a3f      	ldr	r2, [pc, #252]	; (1d414 <rpc_ip_event_handler+0x390>)
   1d318:	6827      	ldr	r7, [r4, #0]
   1d31a:	6013      	str	r3, [r2, #0]
   1d31c:	e735      	b.n	1d18a <rpc_ip_event_handler+0x106>
   1d31e:	f248 0304 	movw	r3, #32772	; 0x8004
   1d322:	429d      	cmp	r5, r3
   1d324:	f000 808f 	beq.w	1d446 <rpc_ip_event_handler+0x3c2>
   1d328:	f248 0305 	movw	r3, #32773	; 0x8005
   1d32c:	429d      	cmp	r5, r3
   1d32e:	f47f af1d 	bne.w	1d16c <rpc_ip_event_handler+0xe8>
   1d332:	683b      	ldr	r3, [r7, #0]
   1d334:	b29b      	uxth	r3, r3
   1d336:	2b03      	cmp	r3, #3
   1d338:	f47f af14 	bne.w	1d164 <rpc_ip_event_handler+0xe0>
   1d33c:	6963      	ldr	r3, [r4, #20]
   1d33e:	2b00      	cmp	r3, #0
   1d340:	f000 80eb 	beq.w	1d51a <rpc_ip_event_handler+0x496>
   1d344:	2b10      	cmp	r3, #16
   1d346:	f200 80bd 	bhi.w	1d4c4 <rpc_ip_event_handler+0x440>
   1d34a:	4a2c      	ldr	r2, [pc, #176]	; (1d3fc <rpc_ip_event_handler+0x378>)
   1d34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d350:	607b      	str	r3, [r7, #4]
   1d352:	2000      	movs	r0, #0
   1d354:	e6f8      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d356:	f248 0308 	movw	r3, #32776	; 0x8008
   1d35a:	429d      	cmp	r5, r3
   1d35c:	f000 8094 	beq.w	1d488 <rpc_ip_event_handler+0x404>
   1d360:	f248 0309 	movw	r3, #32777	; 0x8009
   1d364:	429d      	cmp	r5, r3
   1d366:	f47f af01 	bne.w	1d16c <rpc_ip_event_handler+0xe8>
   1d36a:	683b      	ldr	r3, [r7, #0]
   1d36c:	b29b      	uxth	r3, r3
   1d36e:	2b0d      	cmp	r3, #13
   1d370:	f47f aef8 	bne.w	1d164 <rpc_ip_event_handler+0xe0>
   1d374:	6960      	ldr	r0, [r4, #20]
   1d376:	2800      	cmp	r0, #0
   1d378:	f000 80d7 	beq.w	1d52a <rpc_ip_event_handler+0x4a6>
   1d37c:	2810      	cmp	r0, #16
   1d37e:	f200 80a1 	bhi.w	1d4c4 <rpc_ip_event_handler+0x440>
   1d382:	4b1e      	ldr	r3, [pc, #120]	; (1d3fc <rpc_ip_event_handler+0x378>)
   1d384:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1d388:	e7e2      	b.n	1d350 <rpc_ip_event_handler+0x2cc>
   1d38a:	2100      	movs	r1, #0
   1d38c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   1d390:	4403      	add	r3, r0
   1d392:	f843 1c04 	str.w	r1, [r3, #-4]
   1d396:	4603      	mov	r3, r0
   1d398:	e7bd      	b.n	1d316 <rpc_ip_event_handler+0x292>
   1d39a:	683b      	ldr	r3, [r7, #0]
   1d39c:	2b01      	cmp	r3, #1
   1d39e:	f47f aee1 	bne.w	1d164 <rpc_ip_event_handler+0xe0>
   1d3a2:	6960      	ldr	r0, [r4, #20]
   1d3a4:	2800      	cmp	r0, #0
   1d3a6:	d1e9      	bne.n	1d37c <rpc_ip_event_handler+0x2f8>
   1d3a8:	2302      	movs	r3, #2
   1d3aa:	603b      	str	r3, [r7, #0]
   1d3ac:	69a3      	ldr	r3, [r4, #24]
   1d3ae:	61bb      	str	r3, [r7, #24]
   1d3b0:	e6ca      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d3b2:	683b      	ldr	r3, [r7, #0]
   1d3b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1d3b8:	603b      	str	r3, [r7, #0]
   1d3ba:	683b      	ldr	r3, [r7, #0]
   1d3bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d3c0:	603b      	str	r3, [r7, #0]
   1d3c2:	683b      	ldr	r3, [r7, #0]
   1d3c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d3c8:	603b      	str	r3, [r7, #0]
   1d3ca:	683b      	ldr	r3, [r7, #0]
   1d3cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1d3d0:	603b      	str	r3, [r7, #0]
   1d3d2:	6923      	ldr	r3, [r4, #16]
   1d3d4:	2b6c      	cmp	r3, #108	; 0x6c
   1d3d6:	d077      	beq.n	1d4c8 <rpc_ip_event_handler+0x444>
   1d3d8:	2b10      	cmp	r3, #16
   1d3da:	bf8c      	ite	hi
   1d3dc:	232d      	movhi	r3, #45	; 0x2d
   1d3de:	4a07      	ldrls	r2, [pc, #28]	; (1d3fc <rpc_ip_event_handler+0x378>)
   1d3e0:	f04f 0000 	mov.w	r0, #0
   1d3e4:	bf98      	it	ls
   1d3e6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1d3ea:	607b      	str	r3, [r7, #4]
   1d3ec:	60bb      	str	r3, [r7, #8]
   1d3ee:	e6ab      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d3f0:	683b      	ldr	r3, [r7, #0]
   1d3f2:	b29b      	uxth	r3, r3
   1d3f4:	2b07      	cmp	r3, #7
   1d3f6:	f47f aeb5 	bne.w	1d164 <rpc_ip_event_handler+0xe0>
   1d3fa:	e6fe      	b.n	1d1fa <rpc_ip_event_handler+0x176>
   1d3fc:	0002f648 	.word	0x0002f648
   1d400:	2002629b 	.word	0x2002629b
   1d404:	20021a0c 	.word	0x20021a0c
   1d408:	200219dc 	.word	0x200219dc
   1d40c:	200219d4 	.word	0x200219d4
   1d410:	200242c8 	.word	0x200242c8
   1d414:	200219e4 	.word	0x200219e4
   1d418:	200219e0 	.word	0x200219e0
   1d41c:	200219d8 	.word	0x200219d8
   1d420:	683b      	ldr	r3, [r7, #0]
   1d422:	b29b      	uxth	r3, r3
   1d424:	2b08      	cmp	r3, #8
   1d426:	f47f ae9d 	bne.w	1d164 <rpc_ip_event_handler+0xe0>
   1d42a:	6963      	ldr	r3, [r4, #20]
   1d42c:	2b00      	cmp	r3, #0
   1d42e:	d189      	bne.n	1d344 <rpc_ip_event_handler+0x2c0>
   1d430:	4b5e      	ldr	r3, [pc, #376]	; (1d5ac <rpc_ip_event_handler+0x528>)
   1d432:	2001      	movs	r0, #1
   1d434:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1d438:	683b      	ldr	r3, [r7, #0]
   1d43a:	0c1b      	lsrs	r3, r3, #16
   1d43c:	041b      	lsls	r3, r3, #16
   1d43e:	f043 0309 	orr.w	r3, r3, #9
   1d442:	603b      	str	r3, [r7, #0]
   1d444:	e680      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d446:	683b      	ldr	r3, [r7, #0]
   1d448:	01db      	lsls	r3, r3, #7
   1d44a:	f57f ae8b 	bpl.w	1d164 <rpc_ip_event_handler+0xe0>
   1d44e:	6963      	ldr	r3, [r4, #20]
   1d450:	2b00      	cmp	r3, #0
   1d452:	f47f af77 	bne.w	1d344 <rpc_ip_event_handler+0x2c0>
   1d456:	6823      	ldr	r3, [r4, #0]
   1d458:	2b00      	cmp	r3, #0
   1d45a:	d071      	beq.n	1d540 <rpc_ip_event_handler+0x4bc>
   1d45c:	2001      	movs	r0, #1
   1d45e:	4b53      	ldr	r3, [pc, #332]	; (1d5ac <rpc_ip_event_handler+0x528>)
   1d460:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1d464:	683b      	ldr	r3, [r7, #0]
   1d466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d46a:	603b      	str	r3, [r7, #0]
   1d46c:	e66c      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d46e:	683b      	ldr	r3, [r7, #0]
   1d470:	025a      	lsls	r2, r3, #9
   1d472:	f57f ae77 	bpl.w	1d164 <rpc_ip_event_handler+0xe0>
   1d476:	6960      	ldr	r0, [r4, #20]
   1d478:	2800      	cmp	r0, #0
   1d47a:	f47f af7f 	bne.w	1d37c <rpc_ip_event_handler+0x2f8>
   1d47e:	683b      	ldr	r3, [r7, #0]
   1d480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d484:	603b      	str	r3, [r7, #0]
   1d486:	e65f      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d488:	683b      	ldr	r3, [r7, #0]
   1d48a:	b29b      	uxth	r3, r3
   1d48c:	2b06      	cmp	r3, #6
   1d48e:	f47f ae69 	bne.w	1d164 <rpc_ip_event_handler+0xe0>
   1d492:	6960      	ldr	r0, [r4, #20]
   1d494:	2800      	cmp	r0, #0
   1d496:	f47f af71 	bne.w	1d37c <rpc_ip_event_handler+0x2f8>
   1d49a:	683b      	ldr	r3, [r7, #0]
   1d49c:	0c1b      	lsrs	r3, r3, #16
   1d49e:	041b      	lsls	r3, r3, #16
   1d4a0:	f043 0307 	orr.w	r3, r3, #7
   1d4a4:	603b      	str	r3, [r7, #0]
   1d4a6:	e64f      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d4a8:	683b      	ldr	r3, [r7, #0]
   1d4aa:	0299      	lsls	r1, r3, #10
   1d4ac:	f57f ae5a 	bpl.w	1d164 <rpc_ip_event_handler+0xe0>
   1d4b0:	6963      	ldr	r3, [r4, #20]
   1d4b2:	b33b      	cbz	r3, 1d504 <rpc_ip_event_handler+0x480>
   1d4b4:	2b6b      	cmp	r3, #107	; 0x6b
   1d4b6:	f47f ae2b 	bne.w	1d110 <rpc_ip_event_handler+0x8c>
   1d4ba:	693b      	ldr	r3, [r7, #16]
   1d4bc:	2b01      	cmp	r3, #1
   1d4be:	d041      	beq.n	1d544 <rpc_ip_event_handler+0x4c0>
   1d4c0:	230c      	movs	r3, #12
   1d4c2:	e62b      	b.n	1d11c <rpc_ip_event_handler+0x98>
   1d4c4:	232d      	movs	r3, #45	; 0x2d
   1d4c6:	e743      	b.n	1d350 <rpc_ip_event_handler+0x2cc>
   1d4c8:	2239      	movs	r2, #57	; 0x39
   1d4ca:	683b      	ldr	r3, [r7, #0]
   1d4cc:	2000      	movs	r0, #0
   1d4ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1d4d2:	603b      	str	r3, [r7, #0]
   1d4d4:	607a      	str	r2, [r7, #4]
   1d4d6:	60ba      	str	r2, [r7, #8]
   1d4d8:	e636      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d4da:	6820      	ldr	r0, [r4, #0]
   1d4dc:	f7fe fae8 	bl	1bab0 <rpc_ip_client_data_free>
   1d4e0:	4628      	mov	r0, r5
   1d4e2:	e631      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d4e4:	683b      	ldr	r3, [r7, #0]
   1d4e6:	2000      	movs	r0, #0
   1d4e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d4ec:	603b      	str	r3, [r7, #0]
   1d4ee:	683b      	ldr	r3, [r7, #0]
   1d4f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1d4f4:	603b      	str	r3, [r7, #0]
   1d4f6:	683b      	ldr	r3, [r7, #0]
   1d4f8:	0c1b      	lsrs	r3, r3, #16
   1d4fa:	041b      	lsls	r3, r3, #16
   1d4fc:	f043 0305 	orr.w	r3, r3, #5
   1d500:	603b      	str	r3, [r7, #0]
   1d502:	e621      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d504:	683b      	ldr	r3, [r7, #0]
   1d506:	4a29      	ldr	r2, [pc, #164]	; (1d5ac <rpc_ip_event_handler+0x528>)
   1d508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d50c:	603b      	str	r3, [r7, #0]
   1d50e:	2001      	movs	r0, #1
   1d510:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   1d514:	e618      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d516:	2002      	movs	r0, #2
   1d518:	e616      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d51a:	683b      	ldr	r3, [r7, #0]
   1d51c:	2000      	movs	r0, #0
   1d51e:	0c1b      	lsrs	r3, r3, #16
   1d520:	041b      	lsls	r3, r3, #16
   1d522:	f043 0304 	orr.w	r3, r3, #4
   1d526:	603b      	str	r3, [r7, #0]
   1d528:	e60e      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d52a:	683b      	ldr	r3, [r7, #0]
   1d52c:	0c1b      	lsrs	r3, r3, #16
   1d52e:	041b      	lsls	r3, r3, #16
   1d530:	f043 030e 	orr.w	r3, r3, #14
   1d534:	603b      	str	r3, [r7, #0]
   1d536:	e607      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d538:	8a65      	ldrh	r5, [r4, #18]
   1d53a:	b95d      	cbnz	r5, 1d554 <rpc_ip_event_handler+0x4d0>
   1d53c:	462e      	mov	r6, r5
   1d53e:	e64e      	b.n	1d1de <rpc_ip_event_handler+0x15a>
   1d540:	2000      	movs	r0, #0
   1d542:	e78f      	b.n	1d464 <rpc_ip_event_handler+0x3e0>
   1d544:	220c      	movs	r2, #12
   1d546:	683b      	ldr	r3, [r7, #0]
   1d548:	2000      	movs	r0, #0
   1d54a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1d54e:	603b      	str	r3, [r7, #0]
   1d550:	607a      	str	r2, [r7, #4]
   1d552:	e5f9      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d554:	2024      	movs	r0, #36	; 0x24
   1d556:	f003 fe93 	bl	21280 <nrf_malloc>
   1d55a:	4606      	mov	r6, r0
   1d55c:	2800      	cmp	r0, #0
   1d55e:	d0da      	beq.n	1d516 <rpc_ip_event_handler+0x492>
   1d560:	8a62      	ldrh	r2, [r4, #18]
   1d562:	2a10      	cmp	r2, #16
   1d564:	d009      	beq.n	1d57a <rpc_ip_event_handler+0x4f6>
   1d566:	2a04      	cmp	r2, #4
   1d568:	d013      	beq.n	1d592 <rpc_ip_event_handler+0x50e>
   1d56a:	6820      	ldr	r0, [r4, #0]
   1d56c:	f7fe faa0 	bl	1bab0 <rpc_ip_client_data_free>
   1d570:	4630      	mov	r0, r6
   1d572:	f003 fe8f 	bl	21294 <nrf_free>
   1d576:	2000      	movs	r0, #0
   1d578:	e5e6      	b.n	1d148 <rpc_ip_event_handler+0xc4>
   1d57a:	230a      	movs	r3, #10
   1d57c:	2524      	movs	r5, #36	; 0x24
   1d57e:	6043      	str	r3, [r0, #4]
   1d580:	7005      	strb	r5, [r0, #0]
   1d582:	8a23      	ldrh	r3, [r4, #16]
   1d584:	f104 0114 	add.w	r1, r4, #20
   1d588:	8103      	strh	r3, [r0, #8]
   1d58a:	3010      	adds	r0, #16
   1d58c:	f7ef fade 	bl	cb4c <memcpy>
   1d590:	e625      	b.n	1d1de <rpc_ip_event_handler+0x15a>
   1d592:	2302      	movs	r3, #2
   1d594:	2510      	movs	r5, #16
   1d596:	6043      	str	r3, [r0, #4]
   1d598:	7005      	strb	r5, [r0, #0]
   1d59a:	8a23      	ldrh	r3, [r4, #16]
   1d59c:	f104 0114 	add.w	r1, r4, #20
   1d5a0:	8103      	strh	r3, [r0, #8]
   1d5a2:	300c      	adds	r0, #12
   1d5a4:	f7ef fad2 	bl	cb4c <memcpy>
   1d5a8:	e619      	b.n	1d1de <rpc_ip_event_handler+0x15a>
   1d5aa:	bf00      	nop
   1d5ac:	200219e8 	.word	0x200219e8

0001d5b0 <rpc_handle_ctrl_message>:
   1d5b0:	2902      	cmp	r1, #2
   1d5b2:	b510      	push	{r4, lr}
   1d5b4:	4604      	mov	r4, r0
   1d5b6:	d00c      	beq.n	1d5d2 <rpc_handle_ctrl_message+0x22>
   1d5b8:	2904      	cmp	r1, #4
   1d5ba:	d008      	beq.n	1d5ce <rpc_handle_ctrl_message+0x1e>
   1d5bc:	2901      	cmp	r1, #1
   1d5be:	d006      	beq.n	1d5ce <rpc_handle_ctrl_message+0x1e>
   1d5c0:	6880      	ldr	r0, [r0, #8]
   1d5c2:	b108      	cbz	r0, 1d5c8 <rpc_handle_ctrl_message+0x18>
   1d5c4:	f7fc fd32 	bl	1a02c <rpc_transport_data_free>
   1d5c8:	4620      	mov	r0, r4
   1d5ca:	f7fc fd2d 	bl	1a028 <rpc_transport_rpc_free>
   1d5ce:	2000      	movs	r0, #0
   1d5d0:	bd10      	pop	{r4, pc}
   1d5d2:	6880      	ldr	r0, [r0, #8]
   1d5d4:	2800      	cmp	r0, #0
   1d5d6:	d0fa      	beq.n	1d5ce <rpc_handle_ctrl_message+0x1e>
   1d5d8:	f7fc fd28 	bl	1a02c <rpc_transport_data_free>
   1d5dc:	2000      	movs	r0, #0
   1d5de:	bd10      	pop	{r4, pc}

0001d5e0 <rpc_handle_data_message>:
   1d5e0:	4b23      	ldr	r3, [pc, #140]	; (1d670 <rpc_handle_data_message+0x90>)
   1d5e2:	6802      	ldr	r2, [r0, #0]
   1d5e4:	8819      	ldrh	r1, [r3, #0]
   1d5e6:	b292      	uxth	r2, r2
   1d5e8:	4291      	cmp	r1, r2
   1d5ea:	d027      	beq.n	1d63c <rpc_handle_data_message+0x5c>
   1d5ec:	8a19      	ldrh	r1, [r3, #16]
   1d5ee:	4291      	cmp	r1, r2
   1d5f0:	d02a      	beq.n	1d648 <rpc_handle_data_message+0x68>
   1d5f2:	8c19      	ldrh	r1, [r3, #32]
   1d5f4:	4291      	cmp	r1, r2
   1d5f6:	d02b      	beq.n	1d650 <rpc_handle_data_message+0x70>
   1d5f8:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   1d5fa:	4291      	cmp	r1, r2
   1d5fc:	d02a      	beq.n	1d654 <rpc_handle_data_message+0x74>
   1d5fe:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1d602:	4291      	cmp	r1, r2
   1d604:	d028      	beq.n	1d658 <rpc_handle_data_message+0x78>
   1d606:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   1d60a:	4291      	cmp	r1, r2
   1d60c:	d026      	beq.n	1d65c <rpc_handle_data_message+0x7c>
   1d60e:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1d612:	4291      	cmp	r1, r2
   1d614:	d026      	beq.n	1d664 <rpc_handle_data_message+0x84>
   1d616:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1d61a:	4291      	cmp	r1, r2
   1d61c:	d024      	beq.n	1d668 <rpc_handle_data_message+0x88>
   1d61e:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1d622:	4291      	cmp	r1, r2
   1d624:	d01c      	beq.n	1d660 <rpc_handle_data_message+0x80>
   1d626:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   1d62a:	4291      	cmp	r1, r2
   1d62c:	d01e      	beq.n	1d66c <rpc_handle_data_message+0x8c>
   1d62e:	6880      	ldr	r0, [r0, #8]
   1d630:	b160      	cbz	r0, 1d64c <rpc_handle_data_message+0x6c>
   1d632:	b510      	push	{r4, lr}
   1d634:	f7fc fcfa 	bl	1a02c <rpc_transport_data_free>
   1d638:	2000      	movs	r0, #0
   1d63a:	bd10      	pop	{r4, pc}
   1d63c:	2200      	movs	r2, #0
   1d63e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1d642:	685a      	ldr	r2, [r3, #4]
   1d644:	68d9      	ldr	r1, [r3, #12]
   1d646:	4710      	bx	r2
   1d648:	2201      	movs	r2, #1
   1d64a:	e7f8      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d64c:	2000      	movs	r0, #0
   1d64e:	4770      	bx	lr
   1d650:	2202      	movs	r2, #2
   1d652:	e7f4      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d654:	2203      	movs	r2, #3
   1d656:	e7f2      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d658:	2204      	movs	r2, #4
   1d65a:	e7f0      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d65c:	2205      	movs	r2, #5
   1d65e:	e7ee      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d660:	2208      	movs	r2, #8
   1d662:	e7ec      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d664:	2206      	movs	r2, #6
   1d666:	e7ea      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d668:	2207      	movs	r2, #7
   1d66a:	e7e8      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d66c:	2209      	movs	r2, #9
   1d66e:	e7e6      	b.n	1d63e <rpc_handle_data_message+0x5e>
   1d670:	20021a10 	.word	0x20021a10

0001d674 <rpc_framework_init>:
   1d674:	b508      	push	{r3, lr}
   1d676:	22a0      	movs	r2, #160	; 0xa0
   1d678:	2100      	movs	r1, #0
   1d67a:	4802      	ldr	r0, [pc, #8]	; (1d684 <rpc_framework_init+0x10>)
   1d67c:	f008 fedc 	bl	26438 <memset>
   1d680:	2000      	movs	r0, #0
   1d682:	bd08      	pop	{r3, pc}
   1d684:	20021a10 	.word	0x20021a10

0001d688 <rpc_client_register>:
   1d688:	8803      	ldrh	r3, [r0, #0]
   1d68a:	2b00      	cmp	r3, #0
   1d68c:	d045      	beq.n	1d71a <rpc_client_register+0x92>
   1d68e:	6842      	ldr	r2, [r0, #4]
   1d690:	4601      	mov	r1, r0
   1d692:	2a00      	cmp	r2, #0
   1d694:	d050      	beq.n	1d738 <rpc_client_register+0xb0>
   1d696:	4a30      	ldr	r2, [pc, #192]	; (1d758 <rpc_client_register+0xd0>)
   1d698:	8810      	ldrh	r0, [r2, #0]
   1d69a:	4283      	cmp	r3, r0
   1d69c:	d03d      	beq.n	1d71a <rpc_client_register+0x92>
   1d69e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d6a2:	8a14      	ldrh	r4, [r2, #16]
   1d6a4:	42a3      	cmp	r3, r4
   1d6a6:	d035      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6a8:	8c15      	ldrh	r5, [r2, #32]
   1d6aa:	42ab      	cmp	r3, r5
   1d6ac:	d032      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6ae:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1d6b0:	42b3      	cmp	r3, r6
   1d6b2:	d02f      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6b4:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1d6b8:	42bb      	cmp	r3, r7
   1d6ba:	d02b      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6bc:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1d6c0:	4563      	cmp	r3, ip
   1d6c2:	d027      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6c4:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1d6c8:	4573      	cmp	r3, lr
   1d6ca:	d023      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6cc:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1d6d0:	4543      	cmp	r3, r8
   1d6d2:	d01f      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6d4:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1d6d8:	454b      	cmp	r3, r9
   1d6da:	d01b      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6dc:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1d6e0:	4553      	cmp	r3, sl
   1d6e2:	d017      	beq.n	1d714 <rpc_client_register+0x8c>
   1d6e4:	b1e0      	cbz	r0, 1d720 <rpc_client_register+0x98>
   1d6e6:	b35c      	cbz	r4, 1d740 <rpc_client_register+0xb8>
   1d6e8:	b365      	cbz	r5, 1d744 <rpc_client_register+0xbc>
   1d6ea:	b36e      	cbz	r6, 1d748 <rpc_client_register+0xc0>
   1d6ec:	b377      	cbz	r7, 1d74c <rpc_client_register+0xc4>
   1d6ee:	f1bc 0f00 	cmp.w	ip, #0
   1d6f2:	d02d      	beq.n	1d750 <rpc_client_register+0xc8>
   1d6f4:	f1be 0f00 	cmp.w	lr, #0
   1d6f8:	d020      	beq.n	1d73c <rpc_client_register+0xb4>
   1d6fa:	f1b8 0f00 	cmp.w	r8, #0
   1d6fe:	d029      	beq.n	1d754 <rpc_client_register+0xcc>
   1d700:	f1b9 0f00 	cmp.w	r9, #0
   1d704:	d00b      	beq.n	1d71e <rpc_client_register+0x96>
   1d706:	2009      	movs	r0, #9
   1d708:	f1ba 0f00 	cmp.w	sl, #0
   1d70c:	d008      	beq.n	1d720 <rpc_client_register+0x98>
   1d70e:	2004      	movs	r0, #4
   1d710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d714:	2007      	movs	r0, #7
   1d716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d71a:	2007      	movs	r0, #7
   1d71c:	4770      	bx	lr
   1d71e:	2008      	movs	r0, #8
   1d720:	0100      	lsls	r0, r0, #4
   1d722:	5213      	strh	r3, [r2, r0]
   1d724:	684b      	ldr	r3, [r1, #4]
   1d726:	4402      	add	r2, r0
   1d728:	6053      	str	r3, [r2, #4]
   1d72a:	688b      	ldr	r3, [r1, #8]
   1d72c:	2000      	movs	r0, #0
   1d72e:	6093      	str	r3, [r2, #8]
   1d730:	68cb      	ldr	r3, [r1, #12]
   1d732:	60d3      	str	r3, [r2, #12]
   1d734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d738:	200e      	movs	r0, #14
   1d73a:	4770      	bx	lr
   1d73c:	2006      	movs	r0, #6
   1d73e:	e7ef      	b.n	1d720 <rpc_client_register+0x98>
   1d740:	2001      	movs	r0, #1
   1d742:	e7ed      	b.n	1d720 <rpc_client_register+0x98>
   1d744:	2002      	movs	r0, #2
   1d746:	e7eb      	b.n	1d720 <rpc_client_register+0x98>
   1d748:	2003      	movs	r0, #3
   1d74a:	e7e9      	b.n	1d720 <rpc_client_register+0x98>
   1d74c:	2004      	movs	r0, #4
   1d74e:	e7e7      	b.n	1d720 <rpc_client_register+0x98>
   1d750:	2005      	movs	r0, #5
   1d752:	e7e5      	b.n	1d720 <rpc_client_register+0x98>
   1d754:	2007      	movs	r0, #7
   1d756:	e7e3      	b.n	1d720 <rpc_client_register+0x98>
   1d758:	20021a10 	.word	0x20021a10

0001d75c <rpc_message_send>:
   1d75c:	b150      	cbz	r0, 1d774 <rpc_message_send+0x18>
   1d75e:	b159      	cbz	r1, 1d778 <rpc_message_send+0x1c>
   1d760:	684b      	ldr	r3, [r1, #4]
   1d762:	8008      	strh	r0, [r1, #0]
   1d764:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d768:	f043 0302 	orr.w	r3, r3, #2
   1d76c:	604b      	str	r3, [r1, #4]
   1d76e:	4608      	mov	r0, r1
   1d770:	f7fc bc54 	b.w	1a01c <rpc_transport_send>
   1d774:	2007      	movs	r0, #7
   1d776:	4770      	bx	lr
   1d778:	200e      	movs	r0, #14
   1d77a:	4770      	bx	lr

0001d77c <rpc_message_alloc>:
   1d77c:	b342      	cbz	r2, 1d7d0 <rpc_message_alloc+0x54>
   1d77e:	b328      	cbz	r0, 1d7cc <rpc_message_alloc+0x50>
   1d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d782:	2300      	movs	r3, #0
   1d784:	4616      	mov	r6, r2
   1d786:	460c      	mov	r4, r1
   1d788:	4605      	mov	r5, r0
   1d78a:	6013      	str	r3, [r2, #0]
   1d78c:	b171      	cbz	r1, 1d7ac <rpc_message_alloc+0x30>
   1d78e:	4608      	mov	r0, r1
   1d790:	f7fc fc48 	bl	1a024 <rpc_transport_data_alloc>
   1d794:	4607      	mov	r7, r0
   1d796:	b1b8      	cbz	r0, 1d7c8 <rpc_message_alloc+0x4c>
   1d798:	f7fc fc42 	bl	1a020 <rpc_transport_rpc_alloc>
   1d79c:	4603      	mov	r3, r0
   1d79e:	b180      	cbz	r0, 1d7c2 <rpc_message_alloc+0x46>
   1d7a0:	2000      	movs	r0, #0
   1d7a2:	60dc      	str	r4, [r3, #12]
   1d7a4:	609f      	str	r7, [r3, #8]
   1d7a6:	801d      	strh	r5, [r3, #0]
   1d7a8:	6033      	str	r3, [r6, #0]
   1d7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d7ac:	f7fc fc38 	bl	1a020 <rpc_transport_rpc_alloc>
   1d7b0:	4603      	mov	r3, r0
   1d7b2:	b148      	cbz	r0, 1d7c8 <rpc_message_alloc+0x4c>
   1d7b4:	4627      	mov	r7, r4
   1d7b6:	60dc      	str	r4, [r3, #12]
   1d7b8:	609f      	str	r7, [r3, #8]
   1d7ba:	801d      	strh	r5, [r3, #0]
   1d7bc:	2000      	movs	r0, #0
   1d7be:	6033      	str	r3, [r6, #0]
   1d7c0:	e7f3      	b.n	1d7aa <rpc_message_alloc+0x2e>
   1d7c2:	4638      	mov	r0, r7
   1d7c4:	f7fc fc32 	bl	1a02c <rpc_transport_data_free>
   1d7c8:	2004      	movs	r0, #4
   1d7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d7cc:	2007      	movs	r0, #7
   1d7ce:	4770      	bx	lr
   1d7d0:	200e      	movs	r0, #14
   1d7d2:	4770      	bx	lr

0001d7d4 <rpc_message_free>:
   1d7d4:	b130      	cbz	r0, 1d7e4 <rpc_message_free+0x10>
   1d7d6:	b139      	cbz	r1, 1d7e8 <rpc_message_free+0x14>
   1d7d8:	b508      	push	{r3, lr}
   1d7da:	4608      	mov	r0, r1
   1d7dc:	f7fc fc24 	bl	1a028 <rpc_transport_rpc_free>
   1d7e0:	2000      	movs	r0, #0
   1d7e2:	bd08      	pop	{r3, pc}
   1d7e4:	2007      	movs	r0, #7
   1d7e6:	4770      	bx	lr
   1d7e8:	200e      	movs	r0, #14
   1d7ea:	4770      	bx	lr

0001d7ec <rpc_message_data_free>:
   1d7ec:	b130      	cbz	r0, 1d7fc <rpc_message_data_free+0x10>
   1d7ee:	b139      	cbz	r1, 1d800 <rpc_message_data_free+0x14>
   1d7f0:	b508      	push	{r3, lr}
   1d7f2:	4608      	mov	r0, r1
   1d7f4:	f7fc fc1a 	bl	1a02c <rpc_transport_data_free>
   1d7f8:	2000      	movs	r0, #0
   1d7fa:	bd08      	pop	{r3, pc}
   1d7fc:	2007      	movs	r0, #7
   1d7fe:	4770      	bx	lr
   1d800:	200e      	movs	r0, #14
   1d802:	4770      	bx	lr

0001d804 <packet_free_cb>:
   1d804:	b510      	push	{r4, lr}
   1d806:	4604      	mov	r4, r0
   1d808:	b118      	cbz	r0, 1d812 <packet_free_cb+0xe>
   1d80a:	6800      	ldr	r0, [r0, #0]
   1d80c:	b108      	cbz	r0, 1d812 <packet_free_cb+0xe>
   1d80e:	f002 ff53 	bl	206b8 <rpc_gnss_client_data_free>
   1d812:	68a0      	ldr	r0, [r4, #8]
   1d814:	b118      	cbz	r0, 1d81e <packet_free_cb+0x1a>
   1d816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d81a:	f003 bd3b 	b.w	21294 <nrf_free>
   1d81e:	bd10      	pop	{r4, pc}

0001d820 <rpc_gnss_event_handler>:
   1d820:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d822:	4b64      	ldr	r3, [pc, #400]	; (1d9b4 <rpc_gnss_event_handler+0x194>)
   1d824:	4606      	mov	r6, r0
   1d826:	6800      	ldr	r0, [r0, #0]
   1d828:	881b      	ldrh	r3, [r3, #0]
   1d82a:	6802      	ldr	r2, [r0, #0]
   1d82c:	b085      	sub	sp, #20
   1d82e:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1d832:	460d      	mov	r5, r1
   1d834:	d037      	beq.n	1d8a6 <rpc_gnss_event_handler+0x86>
   1d836:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1d83a:	33ff      	adds	r3, #255	; 0xff
   1d83c:	b29b      	uxth	r3, r3
   1d83e:	2b02      	cmp	r3, #2
   1d840:	d811      	bhi.n	1d866 <rpc_gnss_event_handler+0x46>
   1d842:	4c5d      	ldr	r4, [pc, #372]	; (1d9b8 <rpc_gnss_event_handler+0x198>)
   1d844:	6823      	ldr	r3, [r4, #0]
   1d846:	075a      	lsls	r2, r3, #29
   1d848:	d410      	bmi.n	1d86c <rpc_gnss_event_handler+0x4c>
   1d84a:	6823      	ldr	r3, [r4, #0]
   1d84c:	079b      	lsls	r3, r3, #30
   1d84e:	d503      	bpl.n	1d858 <rpc_gnss_event_handler+0x38>
   1d850:	f244 0303 	movw	r3, #16387	; 0x4003
   1d854:	429d      	cmp	r5, r3
   1d856:	d009      	beq.n	1d86c <rpc_gnss_event_handler+0x4c>
   1d858:	6830      	ldr	r0, [r6, #0]
   1d85a:	b120      	cbz	r0, 1d866 <rpc_gnss_event_handler+0x46>
   1d85c:	f002 ff2c 	bl	206b8 <rpc_gnss_client_data_free>
   1d860:	2200      	movs	r2, #0
   1d862:	4b56      	ldr	r3, [pc, #344]	; (1d9bc <rpc_gnss_event_handler+0x19c>)
   1d864:	601a      	str	r2, [r3, #0]
   1d866:	2000      	movs	r0, #0
   1d868:	b005      	add	sp, #20
   1d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d86c:	2002      	movs	r0, #2
   1d86e:	f003 fd07 	bl	21280 <nrf_malloc>
   1d872:	4607      	mov	r7, r0
   1d874:	2800      	cmp	r0, #0
   1d876:	f000 8094 	beq.w	1d9a2 <rpc_gnss_event_handler+0x182>
   1d87a:	2302      	movs	r3, #2
   1d87c:	8005      	strh	r5, [r0, #0]
   1d87e:	6831      	ldr	r1, [r6, #0]
   1d880:	6872      	ldr	r2, [r6, #4]
   1d882:	484f      	ldr	r0, [pc, #316]	; (1d9c0 <rpc_gnss_event_handler+0x1a0>)
   1d884:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   1d888:	6800      	ldr	r0, [r0, #0]
   1d88a:	9303      	str	r3, [sp, #12]
   1d88c:	6803      	ldr	r3, [r0, #0]
   1d88e:	4669      	mov	r1, sp
   1d890:	685b      	ldr	r3, [r3, #4]
   1d892:	4798      	blx	r3
   1d894:	3001      	adds	r0, #1
   1d896:	d071      	beq.n	1d97c <rpc_gnss_event_handler+0x15c>
   1d898:	2000      	movs	r0, #0
   1d89a:	6823      	ldr	r3, [r4, #0]
   1d89c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d8a0:	6023      	str	r3, [r4, #0]
   1d8a2:	b005      	add	sp, #20
   1d8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d8a6:	4c44      	ldr	r4, [pc, #272]	; (1d9b8 <rpc_gnss_event_handler+0x198>)
   1d8a8:	4f44      	ldr	r7, [pc, #272]	; (1d9bc <rpc_gnss_event_handler+0x19c>)
   1d8aa:	6823      	ldr	r3, [r4, #0]
   1d8ac:	6038      	str	r0, [r7, #0]
   1d8ae:	01d9      	lsls	r1, r3, #7
   1d8b0:	d523      	bpl.n	1d8fa <rpc_gnss_event_handler+0xda>
   1d8b2:	f242 1302 	movw	r3, #8450	; 0x2102
   1d8b6:	429d      	cmp	r5, r3
   1d8b8:	d11f      	bne.n	1d8fa <rpc_gnss_event_handler+0xda>
   1d8ba:	6843      	ldr	r3, [r0, #4]
   1d8bc:	b91b      	cbnz	r3, 1d8c6 <rpc_gnss_event_handler+0xa6>
   1d8be:	6823      	ldr	r3, [r4, #0]
   1d8c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d8c4:	6023      	str	r3, [r4, #0]
   1d8c6:	6823      	ldr	r3, [r4, #0]
   1d8c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d8cc:	6023      	str	r3, [r4, #0]
   1d8ce:	6823      	ldr	r3, [r4, #0]
   1d8d0:	025a      	lsls	r2, r3, #9
   1d8d2:	d430      	bmi.n	1d936 <rpc_gnss_event_handler+0x116>
   1d8d4:	f242 0305 	movw	r3, #8197	; 0x2005
   1d8d8:	429d      	cmp	r5, r3
   1d8da:	d12c      	bne.n	1d936 <rpc_gnss_event_handler+0x116>
   1d8dc:	6823      	ldr	r3, [r4, #0]
   1d8de:	0299      	lsls	r1, r3, #10
   1d8e0:	d529      	bpl.n	1d936 <rpc_gnss_event_handler+0x116>
   1d8e2:	6843      	ldr	r3, [r0, #4]
   1d8e4:	2b00      	cmp	r3, #0
   1d8e6:	d157      	bne.n	1d998 <rpc_gnss_event_handler+0x178>
   1d8e8:	6823      	ldr	r3, [r4, #0]
   1d8ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d8ee:	6023      	str	r3, [r4, #0]
   1d8f0:	6823      	ldr	r3, [r4, #0]
   1d8f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d8f6:	6023      	str	r3, [r4, #0]
   1d8f8:	e01d      	b.n	1d936 <rpc_gnss_event_handler+0x116>
   1d8fa:	6823      	ldr	r3, [r4, #0]
   1d8fc:	025b      	lsls	r3, r3, #9
   1d8fe:	d50e      	bpl.n	1d91e <rpc_gnss_event_handler+0xfe>
   1d900:	f242 1303 	movw	r3, #8451	; 0x2103
   1d904:	429d      	cmp	r5, r3
   1d906:	d10a      	bne.n	1d91e <rpc_gnss_event_handler+0xfe>
   1d908:	6843      	ldr	r3, [r0, #4]
   1d90a:	b91b      	cbnz	r3, 1d914 <rpc_gnss_event_handler+0xf4>
   1d90c:	6823      	ldr	r3, [r4, #0]
   1d90e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d912:	6023      	str	r3, [r4, #0]
   1d914:	6823      	ldr	r3, [r4, #0]
   1d916:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1d91a:	6023      	str	r3, [r4, #0]
   1d91c:	e00b      	b.n	1d936 <rpc_gnss_event_handler+0x116>
   1d91e:	f242 0301 	movw	r3, #8193	; 0x2001
   1d922:	429d      	cmp	r5, r3
   1d924:	d10c      	bne.n	1d940 <rpc_gnss_event_handler+0x120>
   1d926:	6843      	ldr	r3, [r0, #4]
   1d928:	b92b      	cbnz	r3, 1d936 <rpc_gnss_event_handler+0x116>
   1d92a:	6823      	ldr	r3, [r4, #0]
   1d92c:	0c1b      	lsrs	r3, r3, #16
   1d92e:	041b      	lsls	r3, r3, #16
   1d930:	f043 0302 	orr.w	r3, r3, #2
   1d934:	6023      	str	r3, [r4, #0]
   1d936:	f002 febf 	bl	206b8 <rpc_gnss_client_data_free>
   1d93a:	2300      	movs	r3, #0
   1d93c:	603b      	str	r3, [r7, #0]
   1d93e:	e77a      	b.n	1d836 <rpc_gnss_event_handler+0x16>
   1d940:	f242 0304 	movw	r3, #8196	; 0x2004
   1d944:	429d      	cmp	r5, r3
   1d946:	d1c5      	bne.n	1d8d4 <rpc_gnss_event_handler+0xb4>
   1d948:	6843      	ldr	r3, [r0, #4]
   1d94a:	b993      	cbnz	r3, 1d972 <rpc_gnss_event_handler+0x152>
   1d94c:	6823      	ldr	r3, [r4, #0]
   1d94e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d952:	6023      	str	r3, [r4, #0]
   1d954:	6823      	ldr	r3, [r4, #0]
   1d956:	b29b      	uxth	r3, r3
   1d958:	2b03      	cmp	r3, #3
   1d95a:	6823      	ldr	r3, [r4, #0]
   1d95c:	d016      	beq.n	1d98c <rpc_gnss_event_handler+0x16c>
   1d95e:	b29b      	uxth	r3, r3
   1d960:	2b04      	cmp	r3, #4
   1d962:	d1d7      	bne.n	1d914 <rpc_gnss_event_handler+0xf4>
   1d964:	6823      	ldr	r3, [r4, #0]
   1d966:	0c1b      	lsrs	r3, r3, #16
   1d968:	041b      	lsls	r3, r3, #16
   1d96a:	f043 0302 	orr.w	r3, r3, #2
   1d96e:	6023      	str	r3, [r4, #0]
   1d970:	e7d0      	b.n	1d914 <rpc_gnss_event_handler+0xf4>
   1d972:	6823      	ldr	r3, [r4, #0]
   1d974:	b29b      	uxth	r3, r3
   1d976:	2b03      	cmp	r3, #3
   1d978:	d1cc      	bne.n	1d914 <rpc_gnss_event_handler+0xf4>
   1d97a:	e7f3      	b.n	1d964 <rpc_gnss_event_handler+0x144>
   1d97c:	4638      	mov	r0, r7
   1d97e:	f003 fc89 	bl	21294 <nrf_free>
   1d982:	6830      	ldr	r0, [r6, #0]
   1d984:	2800      	cmp	r0, #0
   1d986:	f47f af69 	bne.w	1d85c <rpc_gnss_event_handler+0x3c>
   1d98a:	e76c      	b.n	1d866 <rpc_gnss_event_handler+0x46>
   1d98c:	0c1b      	lsrs	r3, r3, #16
   1d98e:	041b      	lsls	r3, r3, #16
   1d990:	f043 0304 	orr.w	r3, r3, #4
   1d994:	6023      	str	r3, [r4, #0]
   1d996:	e7bd      	b.n	1d914 <rpc_gnss_event_handler+0xf4>
   1d998:	6823      	ldr	r3, [r4, #0]
   1d99a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d99e:	6023      	str	r3, [r4, #0]
   1d9a0:	e7c9      	b.n	1d936 <rpc_gnss_event_handler+0x116>
   1d9a2:	6830      	ldr	r0, [r6, #0]
   1d9a4:	2800      	cmp	r0, #0
   1d9a6:	f43f af5e 	beq.w	1d866 <rpc_gnss_event_handler+0x46>
   1d9aa:	f002 fe85 	bl	206b8 <rpc_gnss_client_data_free>
   1d9ae:	4b03      	ldr	r3, [pc, #12]	; (1d9bc <rpc_gnss_event_handler+0x19c>)
   1d9b0:	601f      	str	r7, [r3, #0]
   1d9b2:	e758      	b.n	1d866 <rpc_gnss_event_handler+0x46>
   1d9b4:	200242ca 	.word	0x200242ca
   1d9b8:	20021ab0 	.word	0x20021ab0
   1d9bc:	20021ab4 	.word	0x20021ab4
   1d9c0:	20021ab8 	.word	0x20021ab8

0001d9c4 <gnss_interface_write>:
   1d9c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d9c8:	4a74      	ldr	r2, [pc, #464]	; (1db9c <gnss_interface_write+0x1d8>)
   1d9ca:	b09f      	sub	sp, #124	; 0x7c
   1d9cc:	4290      	cmp	r0, r2
   1d9ce:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1d9d0:	f040 80d7 	bne.w	1db82 <gnss_interface_write+0x1be>
   1d9d4:	2900      	cmp	r1, #0
   1d9d6:	f000 80c6 	beq.w	1db66 <gnss_interface_write+0x1a2>
   1d9da:	2d00      	cmp	r5, #0
   1d9dc:	f000 80c3 	beq.w	1db66 <gnss_interface_write+0x1a2>
   1d9e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1d9e2:	2a02      	cmp	r2, #2
   1d9e4:	f040 80bf 	bne.w	1db66 <gnss_interface_write+0x1a2>
   1d9e8:	4c6d      	ldr	r4, [pc, #436]	; (1dba0 <gnss_interface_write+0x1dc>)
   1d9ea:	6822      	ldr	r2, [r4, #0]
   1d9ec:	b292      	uxth	r2, r2
   1d9ee:	2a02      	cmp	r2, #2
   1d9f0:	d004      	beq.n	1d9fc <gnss_interface_write+0x38>
   1d9f2:	6822      	ldr	r2, [r4, #0]
   1d9f4:	b292      	uxth	r2, r2
   1d9f6:	2a04      	cmp	r2, #4
   1d9f8:	f040 80bd 	bne.w	1db76 <gnss_interface_write+0x1b2>
   1d9fc:	2b00      	cmp	r3, #0
   1d9fe:	f040 80c6 	bne.w	1db8e <gnss_interface_write+0x1ca>
   1da02:	6822      	ldr	r2, [r4, #0]
   1da04:	0390      	lsls	r0, r2, #14
   1da06:	d512      	bpl.n	1da2e <gnss_interface_write+0x6a>
   1da08:	6822      	ldr	r2, [r4, #0]
   1da0a:	882b      	ldrh	r3, [r5, #0]
   1da0c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1da10:	6022      	str	r2, [r4, #0]
   1da12:	6822      	ldr	r2, [r4, #0]
   1da14:	3b01      	subs	r3, #1
   1da16:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1da1a:	6022      	str	r2, [r4, #0]
   1da1c:	2b07      	cmp	r3, #7
   1da1e:	f200 80a2 	bhi.w	1db66 <gnss_interface_write+0x1a2>
   1da22:	e8df f003 	tbb	[pc, r3]
   1da26:	7d82      	.short	0x7d82
   1da28:	646e7378 	.word	0x646e7378
   1da2c:	0869      	.short	0x0869
   1da2e:	2000      	movs	r0, #0
   1da30:	b01f      	add	sp, #124	; 0x7c
   1da32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1da36:	4608      	mov	r0, r1
   1da38:	a902      	add	r1, sp, #8
   1da3a:	f002 fdf1 	bl	20620 <rpc_gnss_serialize_integrity>
   1da3e:	2172      	movs	r1, #114	; 0x72
   1da40:	4668      	mov	r0, sp
   1da42:	f002 fe07 	bl	20654 <rpc_gnss_client_request_alloc>
   1da46:	4605      	mov	r5, r0
   1da48:	9800      	ldr	r0, [sp, #0]
   1da4a:	2d00      	cmp	r5, #0
   1da4c:	d172      	bne.n	1db34 <gnss_interface_write+0x170>
   1da4e:	2800      	cmp	r0, #0
   1da50:	d077      	beq.n	1db42 <gnss_interface_write+0x17e>
   1da52:	f241 0605 	movw	r6, #4101	; 0x1005
   1da56:	f04f 0c49 	mov.w	ip, #73	; 0x49
   1da5a:	2272      	movs	r2, #114	; 0x72
   1da5c:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1da60:	f04f 0943 	mov.w	r9, #67	; 0x43
   1da64:	f04f 0854 	mov.w	r8, #84	; 0x54
   1da68:	4f4e      	ldr	r7, [pc, #312]	; (1dba4 <gnss_interface_write+0x1e0>)
   1da6a:	a91e      	add	r1, sp, #120	; 0x78
   1da6c:	883b      	ldrh	r3, [r7, #0]
   1da6e:	f880 c00f 	strb.w	ip, [r0, #15]
   1da72:	3301      	adds	r3, #1
   1da74:	b29b      	uxth	r3, r3
   1da76:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   1da7a:	f841 cd74 	str.w	ip, [r1, #-116]!
   1da7e:	7145      	strb	r5, [r0, #5]
   1da80:	7185      	strb	r5, [r0, #6]
   1da82:	71c5      	strb	r5, [r0, #7]
   1da84:	7205      	strb	r5, [r0, #8]
   1da86:	7245      	strb	r5, [r0, #9]
   1da88:	7285      	strb	r5, [r0, #10]
   1da8a:	72c5      	strb	r5, [r0, #11]
   1da8c:	7102      	strb	r2, [r0, #4]
   1da8e:	f880 900c 	strb.w	r9, [r0, #12]
   1da92:	f880 800d 	strb.w	r8, [r0, #13]
   1da96:	f880 e00e 	strb.w	lr, [r0, #14]
   1da9a:	6800      	ldr	r0, [r0, #0]
   1da9c:	803b      	strh	r3, [r7, #0]
   1da9e:	f7ef f855 	bl	cb4c <memcpy>
   1daa2:	4b41      	ldr	r3, [pc, #260]	; (1dba8 <gnss_interface_write+0x1e4>)
   1daa4:	4631      	mov	r1, r6
   1daa6:	9800      	ldr	r0, [sp, #0]
   1daa8:	601d      	str	r5, [r3, #0]
   1daaa:	f002 fde7 	bl	2067c <rpc_gnss_client_request_send>
   1daae:	2800      	cmp	r0, #0
   1dab0:	d14e      	bne.n	1db50 <gnss_interface_write+0x18c>
   1dab2:	6823      	ldr	r3, [r4, #0]
   1dab4:	0299      	lsls	r1, r3, #10
   1dab6:	d50b      	bpl.n	1dad0 <gnss_interface_write+0x10c>
   1dab8:	4e3c      	ldr	r6, [pc, #240]	; (1dbac <gnss_interface_write+0x1e8>)
   1daba:	4d38      	ldr	r5, [pc, #224]	; (1db9c <gnss_interface_write+0x1d8>)
   1dabc:	e000      	b.n	1dac0 <gnss_interface_write+0xfc>
   1dabe:	b978      	cbnz	r0, 1dae0 <gnss_interface_write+0x11c>
   1dac0:	4631      	mov	r1, r6
   1dac2:	4628      	mov	r0, r5
   1dac4:	f7f8 ffa4 	bl	16a10 <bsd_os_timedwait>
   1dac8:	6823      	ldr	r3, [r4, #0]
   1daca:	029a      	lsls	r2, r3, #10
   1dacc:	d4f7      	bmi.n	1dabe <gnss_interface_write+0xfa>
   1dace:	b938      	cbnz	r0, 1dae0 <gnss_interface_write+0x11c>
   1dad0:	6823      	ldr	r3, [r4, #0]
   1dad2:	039b      	lsls	r3, r3, #14
   1dad4:	d4ab      	bmi.n	1da2e <gnss_interface_write+0x6a>
   1dad6:	2005      	movs	r0, #5
   1dad8:	6823      	ldr	r3, [r4, #0]
   1dada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1dade:	6023      	str	r3, [r4, #0]
   1dae0:	f7f9 f84e 	bl	16b80 <bsd_os_errno_set>
   1dae4:	f04f 30ff 	mov.w	r0, #4294967295
   1dae8:	b01f      	add	sp, #124	; 0x7c
   1daea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1daee:	4608      	mov	r0, r1
   1daf0:	a902      	add	r1, sp, #8
   1daf2:	f002 fd4d 	bl	20590 <rpc_gnss_serialize_time_and_sv_tow>
   1daf6:	e7a2      	b.n	1da3e <gnss_interface_write+0x7a>
   1daf8:	4608      	mov	r0, r1
   1dafa:	a902      	add	r1, sp, #8
   1dafc:	f002 fd70 	bl	205e0 <rpc_gnss_serialize_location>
   1db00:	e79d      	b.n	1da3e <gnss_interface_write+0x7a>
   1db02:	4608      	mov	r0, r1
   1db04:	a902      	add	r1, sp, #8
   1db06:	f002 fd29 	bl	2055c <rpc_gnss_serialize_nequick>
   1db0a:	e798      	b.n	1da3e <gnss_interface_write+0x7a>
   1db0c:	4608      	mov	r0, r1
   1db0e:	a902      	add	r1, sp, #8
   1db10:	f002 fd00 	bl	20514 <rpc_gnss_serialize_klob>
   1db14:	e793      	b.n	1da3e <gnss_interface_write+0x7a>
   1db16:	4608      	mov	r0, r1
   1db18:	a902      	add	r1, sp, #8
   1db1a:	f002 fcc9 	bl	204b0 <rpc_gnss_serialize_alm>
   1db1e:	e78e      	b.n	1da3e <gnss_interface_write+0x7a>
   1db20:	4608      	mov	r0, r1
   1db22:	a902      	add	r1, sp, #8
   1db24:	f002 fc72 	bl	2040c <rpc_gnss_serialize_ephe>
   1db28:	e789      	b.n	1da3e <gnss_interface_write+0x7a>
   1db2a:	4608      	mov	r0, r1
   1db2c:	a902      	add	r1, sp, #8
   1db2e:	f002 fc4b 	bl	203c8 <rpc_gnss_serialize_utc>
   1db32:	e784      	b.n	1da3e <gnss_interface_write+0x7a>
   1db34:	b128      	cbz	r0, 1db42 <gnss_interface_write+0x17e>
   1db36:	6803      	ldr	r3, [r0, #0]
   1db38:	b11b      	cbz	r3, 1db42 <gnss_interface_write+0x17e>
   1db3a:	4618      	mov	r0, r3
   1db3c:	f002 fdbc 	bl	206b8 <rpc_gnss_client_data_free>
   1db40:	9800      	ldr	r0, [sp, #0]
   1db42:	f002 fdb1 	bl	206a8 <rpc_gnss_client_message_free>
   1db46:	2023      	movs	r0, #35	; 0x23
   1db48:	f7f9 f81a 	bl	16b80 <bsd_os_errno_set>
   1db4c:	f04f 30ff 	mov.w	r0, #4294967295
   1db50:	6823      	ldr	r3, [r4, #0]
   1db52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1db56:	6023      	str	r3, [r4, #0]
   1db58:	6823      	ldr	r3, [r4, #0]
   1db5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1db5e:	6023      	str	r3, [r4, #0]
   1db60:	b01f      	add	sp, #124	; 0x7c
   1db62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db66:	2016      	movs	r0, #22
   1db68:	f7f9 f80a 	bl	16b80 <bsd_os_errno_set>
   1db6c:	f04f 30ff 	mov.w	r0, #4294967295
   1db70:	b01f      	add	sp, #124	; 0x7c
   1db72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db76:	2039      	movs	r0, #57	; 0x39
   1db78:	f7f9 f802 	bl	16b80 <bsd_os_errno_set>
   1db7c:	f04f 30ff 	mov.w	r0, #4294967295
   1db80:	e756      	b.n	1da30 <gnss_interface_write+0x6c>
   1db82:	2009      	movs	r0, #9
   1db84:	f7f8 fffc 	bl	16b80 <bsd_os_errno_set>
   1db88:	f04f 30ff 	mov.w	r0, #4294967295
   1db8c:	e750      	b.n	1da30 <gnss_interface_write+0x6c>
   1db8e:	202d      	movs	r0, #45	; 0x2d
   1db90:	f7f8 fff6 	bl	16b80 <bsd_os_errno_set>
   1db94:	f04f 30ff 	mov.w	r0, #4294967295
   1db98:	e74a      	b.n	1da30 <gnss_interface_write+0x6c>
   1db9a:	bf00      	nop
   1db9c:	49765443 	.word	0x49765443
   1dba0:	20021ab0 	.word	0x20021ab0
   1dba4:	200242ca 	.word	0x200242ca
   1dba8:	20021ab4 	.word	0x20021ab4
   1dbac:	200204c4 	.word	0x200204c4

0001dbb0 <gnss_interface_read>:
   1dbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbb4:	4c55      	ldr	r4, [pc, #340]	; (1dd0c <gnss_interface_read+0x15c>)
   1dbb6:	b0b7      	sub	sp, #220	; 0xdc
   1dbb8:	42a0      	cmp	r0, r4
   1dbba:	f040 81fa 	bne.w	1dfb2 <gnss_interface_read+0x402>
   1dbbe:	460e      	mov	r6, r1
   1dbc0:	2900      	cmp	r1, #0
   1dbc2:	f000 81f0 	beq.w	1dfa6 <gnss_interface_read+0x3f6>
   1dbc6:	2ad7      	cmp	r2, #215	; 0xd7
   1dbc8:	f240 81ed 	bls.w	1dfa6 <gnss_interface_read+0x3f6>
   1dbcc:	4d50      	ldr	r5, [pc, #320]	; (1dd10 <gnss_interface_read+0x160>)
   1dbce:	469a      	mov	sl, r3
   1dbd0:	682b      	ldr	r3, [r5, #0]
   1dbd2:	b29b      	uxth	r3, r3
   1dbd4:	2b04      	cmp	r3, #4
   1dbd6:	d004      	beq.n	1dbe2 <gnss_interface_read+0x32>
   1dbd8:	682b      	ldr	r3, [r5, #0]
   1dbda:	b29b      	uxth	r3, r3
   1dbdc:	2b02      	cmp	r3, #2
   1dbde:	f040 81dc 	bne.w	1df9a <gnss_interface_read+0x3ea>
   1dbe2:	f1ba 0f00 	cmp.w	sl, #0
   1dbe6:	d178      	bne.n	1dcda <gnss_interface_read+0x12a>
   1dbe8:	2102      	movs	r1, #2
   1dbea:	20b6      	movs	r0, #182	; 0xb6
   1dbec:	2400      	movs	r4, #0
   1dbee:	682b      	ldr	r3, [r5, #0]
   1dbf0:	f10d 020e 	add.w	r2, sp, #14
   1dbf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1dbf8:	602b      	str	r3, [r5, #0]
   1dbfa:	ab08      	add	r3, sp, #32
   1dbfc:	9304      	str	r3, [sp, #16]
   1dbfe:	f8df b118 	ldr.w	fp, [pc, #280]	; 1dd18 <gnss_interface_read+0x168>
   1dc02:	ea0a 0301 	and.w	r3, sl, r1
   1dc06:	4f43      	ldr	r7, [pc, #268]	; (1dd14 <gnss_interface_read+0x164>)
   1dc08:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1dd1c <gnss_interface_read+0x16c>
   1dc0c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1dd0c <gnss_interface_read+0x15c>
   1dc10:	9005      	str	r0, [sp, #20]
   1dc12:	9107      	str	r1, [sp, #28]
   1dc14:	9206      	str	r2, [sp, #24]
   1dc16:	9301      	str	r3, [sp, #4]
   1dc18:	f8db 0000 	ldr.w	r0, [fp]
   1dc1c:	4652      	mov	r2, sl
   1dc1e:	6803      	ldr	r3, [r0, #0]
   1dc20:	a904      	add	r1, sp, #16
   1dc22:	689b      	ldr	r3, [r3, #8]
   1dc24:	4798      	blx	r3
   1dc26:	2800      	cmp	r0, #0
   1dc28:	da2a      	bge.n	1dc80 <gnss_interface_read+0xd0>
   1dc2a:	9b01      	ldr	r3, [sp, #4]
   1dc2c:	b15b      	cbz	r3, 1dc46 <gnss_interface_read+0x96>
   1dc2e:	1c42      	adds	r2, r0, #1
   1dc30:	4603      	mov	r3, r0
   1dc32:	d125      	bne.n	1dc80 <gnss_interface_read+0xd0>
   1dc34:	b9dc      	cbnz	r4, 1dc6e <gnss_interface_read+0xbe>
   1dc36:	2023      	movs	r0, #35	; 0x23
   1dc38:	461c      	mov	r4, r3
   1dc3a:	f7f8 ffa1 	bl	16b80 <bsd_os_errno_set>
   1dc3e:	4620      	mov	r0, r4
   1dc40:	b037      	add	sp, #220	; 0xdc
   1dc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc46:	682a      	ldr	r2, [r5, #0]
   1dc48:	783b      	ldrb	r3, [r7, #0]
   1dc4a:	03d1      	lsls	r1, r2, #15
   1dc4c:	d40c      	bmi.n	1dc68 <gnss_interface_read+0xb8>
   1dc4e:	b95c      	cbnz	r4, 1dc68 <gnss_interface_read+0xb8>
   1dc50:	b163      	cbz	r3, 1dc6c <gnss_interface_read+0xbc>
   1dc52:	4649      	mov	r1, r9
   1dc54:	4640      	mov	r0, r8
   1dc56:	f7f8 fedb 	bl	16a10 <bsd_os_timedwait>
   1dc5a:	682b      	ldr	r3, [r5, #0]
   1dc5c:	03db      	lsls	r3, r3, #15
   1dc5e:	d437      	bmi.n	1dcd0 <gnss_interface_read+0x120>
   1dc60:	783b      	ldrb	r3, [r7, #0]
   1dc62:	2800      	cmp	r0, #0
   1dc64:	d0f4      	beq.n	1dc50 <gnss_interface_read+0xa0>
   1dc66:	4604      	mov	r4, r0
   1dc68:	2b00      	cmp	r3, #0
   1dc6a:	d1d5      	bne.n	1dc18 <gnss_interface_read+0x68>
   1dc6c:	2470      	movs	r4, #112	; 0x70
   1dc6e:	4620      	mov	r0, r4
   1dc70:	f04f 34ff 	mov.w	r4, #4294967295
   1dc74:	f7f8 ff84 	bl	16b80 <bsd_os_errno_set>
   1dc78:	4620      	mov	r0, r4
   1dc7a:	b037      	add	sp, #220	; 0xdc
   1dc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc80:	f244 0202 	movw	r2, #16386	; 0x4002
   1dc84:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1dc88:	4293      	cmp	r3, r2
   1dc8a:	d02f      	beq.n	1dcec <gnss_interface_read+0x13c>
   1dc8c:	f244 0201 	movw	r2, #16385	; 0x4001
   1dc90:	4293      	cmp	r3, r2
   1dc92:	d045      	beq.n	1dd20 <gnss_interface_read+0x170>
   1dc94:	f244 0203 	movw	r2, #16387	; 0x4003
   1dc98:	4293      	cmp	r3, r2
   1dc9a:	f040 8184 	bne.w	1dfa6 <gnss_interface_read+0x3f6>
   1dc9e:	2203      	movs	r2, #3
   1dca0:	2414      	movs	r4, #20
   1dca2:	9b08      	ldr	r3, [sp, #32]
   1dca4:	7032      	strb	r2, [r6, #0]
   1dca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dca8:	60b3      	str	r3, [r6, #8]
   1dcaa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1dcae:	e9c6 2303 	strd	r2, r3, [r6, #12]
   1dcb2:	f8db 0000 	ldr.w	r0, [fp]
   1dcb6:	6803      	ldr	r3, [r0, #0]
   1dcb8:	68db      	ldr	r3, [r3, #12]
   1dcba:	4798      	blx	r3
   1dcbc:	2800      	cmp	r0, #0
   1dcbe:	ddbe      	ble.n	1dc3e <gnss_interface_read+0x8e>
   1dcc0:	4620      	mov	r0, r4
   1dcc2:	682b      	ldr	r3, [r5, #0]
   1dcc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1dcc8:	602b      	str	r3, [r5, #0]
   1dcca:	b037      	add	sp, #220	; 0xdc
   1dccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcd0:	783b      	ldrb	r3, [r7, #0]
   1dcd2:	4604      	mov	r4, r0
   1dcd4:	2b00      	cmp	r3, #0
   1dcd6:	d19f      	bne.n	1dc18 <gnss_interface_read+0x68>
   1dcd8:	e7c8      	b.n	1dc6c <gnss_interface_read+0xbc>
   1dcda:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   1dcde:	d183      	bne.n	1dbe8 <gnss_interface_read+0x38>
   1dce0:	202d      	movs	r0, #45	; 0x2d
   1dce2:	f7f8 ff4d 	bl	16b80 <bsd_os_errno_set>
   1dce6:	f04f 34ff 	mov.w	r4, #4294967295
   1dcea:	e7a8      	b.n	1dc3e <gnss_interface_read+0x8e>
   1dcec:	a808      	add	r0, sp, #32
   1dcee:	f008 ffb3 	bl	26c58 <strlen>
   1dcf2:	2302      	movs	r3, #2
   1dcf4:	1c44      	adds	r4, r0, #1
   1dcf6:	b2a4      	uxth	r4, r4
   1dcf8:	f806 3b08 	strb.w	r3, [r6], #8
   1dcfc:	4622      	mov	r2, r4
   1dcfe:	a908      	add	r1, sp, #32
   1dd00:	4630      	mov	r0, r6
   1dd02:	f7ee ff23 	bl	cb4c <memcpy>
   1dd06:	3408      	adds	r4, #8
   1dd08:	e7d3      	b.n	1dcb2 <gnss_interface_read+0x102>
   1dd0a:	bf00      	nop
   1dd0c:	49765443 	.word	0x49765443
   1dd10:	20021ab0 	.word	0x20021ab0
   1dd14:	2002629c 	.word	0x2002629c
   1dd18:	20021ab8 	.word	0x20021ab8
   1dd1c:	200204c4 	.word	0x200204c4
   1dd20:	2401      	movs	r4, #1
   1dd22:	a809      	add	r0, sp, #36	; 0x24
   1dd24:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1dd26:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1dd2a:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1dd2e:	990d      	ldr	r1, [sp, #52]	; 0x34
   1dd30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dd32:	7034      	strb	r4, [r6, #0]
   1dd34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dd36:	61b1      	str	r1, [r6, #24]
   1dd38:	9910      	ldr	r1, [sp, #64]	; 0x40
   1dd3a:	61f2      	str	r2, [r6, #28]
   1dd3c:	6233      	str	r3, [r6, #32]
   1dd3e:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   1dd42:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   1dd46:	6271      	str	r1, [r6, #36]	; 0x24
   1dd48:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1dd4c:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   1dd50:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   1dd54:	6373      	str	r3, [r6, #52]	; 0x34
   1dd56:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1dd5a:	63b1      	str	r1, [r6, #56]	; 0x38
   1dd5c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1dd60:	63f2      	str	r2, [r6, #60]	; 0x3c
   1dd62:	6433      	str	r3, [r6, #64]	; 0x40
   1dd64:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1dd68:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1dd6c:	8531      	strh	r1, [r6, #40]	; 0x28
   1dd6e:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   1dd72:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   1dd76:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1dd7a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1dd7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1dd80:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   1dd84:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   1dd88:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   1dd8c:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1dd90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dd92:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1dd96:	8630      	strh	r0, [r6, #48]	; 0x30
   1dd98:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   1dd9c:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   1dda0:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1dda4:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   1dda8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1ddac:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   1ddb0:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1ddb4:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   1ddb8:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   1ddbc:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1ddc0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1ddc4:	64f3      	str	r3, [r6, #76]	; 0x4c
   1ddc6:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1ddca:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   1ddce:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   1ddd2:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   1ddd6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1ddda:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1ddde:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1dde2:	65b1      	str	r1, [r6, #88]	; 0x58
   1dde4:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   1dde8:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1ddec:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   1ddf0:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   1ddf4:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1ddf8:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   1ddfc:	6672      	str	r2, [r6, #100]	; 0x64
   1ddfe:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   1de02:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1de06:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1de0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1de0c:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   1de10:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1de14:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1de18:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1de1c:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   1de20:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   1de24:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1de28:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   1de2c:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   1de30:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   1de34:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1de38:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   1de3c:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   1de40:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1de44:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1de48:	6733      	str	r3, [r6, #112]	; 0x70
   1de4a:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   1de4e:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   1de52:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   1de56:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   1de5a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1de5e:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   1de62:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1de66:	67f1      	str	r1, [r6, #124]	; 0x7c
   1de68:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   1de6c:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   1de70:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   1de74:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   1de78:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   1de7c:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   1de80:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   1de84:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   1de88:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1de8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1de8e:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1de92:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1de96:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1de9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1de9c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1dea0:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   1dea4:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1dea8:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   1deac:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1deb0:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   1deb4:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   1deb8:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   1debc:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   1dec0:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   1dec4:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1dec8:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   1decc:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1ded0:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   1ded4:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1ded8:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   1dedc:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   1dee0:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1dee4:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1dee8:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   1deec:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1def0:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   1def4:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   1def8:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   1defc:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1df00:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1df04:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1df08:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   1df0c:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   1df10:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   1df14:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1df18:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   1df1c:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   1df20:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1df22:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1df26:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1df2a:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   1df2e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1df32:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1df36:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   1df3a:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   1df3e:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   1df42:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   1df46:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1df4a:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1df4e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1df52:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1df56:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   1df5a:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   1df5e:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   1df62:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   1df66:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1df6a:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1df6e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1df72:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   1df76:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   1df7a:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1df7e:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1df82:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   1df86:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1df8a:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   1df8e:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   1df92:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   1df96:	24d8      	movs	r4, #216	; 0xd8
   1df98:	e68b      	b.n	1dcb2 <gnss_interface_read+0x102>
   1df9a:	2039      	movs	r0, #57	; 0x39
   1df9c:	f7f8 fdf0 	bl	16b80 <bsd_os_errno_set>
   1dfa0:	f04f 34ff 	mov.w	r4, #4294967295
   1dfa4:	e64b      	b.n	1dc3e <gnss_interface_read+0x8e>
   1dfa6:	2016      	movs	r0, #22
   1dfa8:	f7f8 fdea 	bl	16b80 <bsd_os_errno_set>
   1dfac:	f04f 34ff 	mov.w	r4, #4294967295
   1dfb0:	e645      	b.n	1dc3e <gnss_interface_read+0x8e>
   1dfb2:	2009      	movs	r0, #9
   1dfb4:	f7f8 fde4 	bl	16b80 <bsd_os_errno_set>
   1dfb8:	f04f 34ff 	mov.w	r4, #4294967295
   1dfbc:	e63f      	b.n	1dc3e <gnss_interface_read+0x8e>
   1dfbe:	bf00      	nop

0001dfc0 <gnss_interface_setopt>:
   1dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfc4:	4db9      	ldr	r5, [pc, #740]	; (1e2ac <gnss_interface_setopt+0x2ec>)
   1dfc6:	b087      	sub	sp, #28
   1dfc8:	682c      	ldr	r4, [r5, #0]
   1dfca:	4690      	mov	r8, r2
   1dfcc:	b2a4      	uxth	r4, r4
   1dfce:	2c02      	cmp	r4, #2
   1dfd0:	d00c      	beq.n	1dfec <gnss_interface_setopt+0x2c>
   1dfd2:	2a08      	cmp	r2, #8
   1dfd4:	d00a      	beq.n	1dfec <gnss_interface_setopt+0x2c>
   1dfd6:	3a0a      	subs	r2, #10
   1dfd8:	2a01      	cmp	r2, #1
   1dfda:	d907      	bls.n	1dfec <gnss_interface_setopt+0x2c>
   1dfdc:	200e      	movs	r0, #14
   1dfde:	f7f8 fdcf 	bl	16b80 <bsd_os_errno_set>
   1dfe2:	f04f 30ff 	mov.w	r0, #4294967295
   1dfe6:	b007      	add	sp, #28
   1dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfec:	682a      	ldr	r2, [r5, #0]
   1dfee:	0252      	lsls	r2, r2, #9
   1dff0:	f100 8155 	bmi.w	1e29e <gnss_interface_setopt+0x2de>
   1dff4:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1dff8:	f040 8145 	bne.w	1e286 <gnss_interface_setopt+0x2c6>
   1dffc:	4aac      	ldr	r2, [pc, #688]	; (1e2b0 <gnss_interface_setopt+0x2f0>)
   1dffe:	4290      	cmp	r0, r2
   1e000:	f040 8147 	bne.w	1e292 <gnss_interface_setopt+0x2d2>
   1e004:	f1a8 020a 	sub.w	r2, r8, #10
   1e008:	2a01      	cmp	r2, #1
   1e00a:	d902      	bls.n	1e012 <gnss_interface_setopt+0x52>
   1e00c:	2b00      	cmp	r3, #0
   1e00e:	f000 811e 	beq.w	1e24e <gnss_interface_setopt+0x28e>
   1e012:	f108 32ff 	add.w	r2, r8, #4294967295
   1e016:	2a0a      	cmp	r2, #10
   1e018:	f200 8119 	bhi.w	1e24e <gnss_interface_setopt+0x28e>
   1e01c:	e8df f012 	tbh	[pc, r2, lsl #1]
   1e020:	00950088 	.word	0x00950088
   1e024:	00ab00a1 	.word	0x00ab00a1
   1e028:	00c200b7 	.word	0x00c200b7
   1e02c:	00e600ce 	.word	0x00e600ce
   1e030:	010800fc 	.word	0x010800fc
   1e034:	000b      	.short	0x000b
   1e036:	682b      	ldr	r3, [r5, #0]
   1e038:	b29b      	uxth	r3, r3
   1e03a:	2b04      	cmp	r3, #4
   1e03c:	d1ce      	bne.n	1dfdc <gnss_interface_setopt+0x1c>
   1e03e:	2203      	movs	r2, #3
   1e040:	f241 0604 	movw	r6, #4100	; 0x1004
   1e044:	2300      	movs	r3, #0
   1e046:	4637      	mov	r7, r6
   1e048:	f88d 2008 	strb.w	r2, [sp, #8]
   1e04c:	f88d 3009 	strb.w	r3, [sp, #9]
   1e050:	f88d 300a 	strb.w	r3, [sp, #10]
   1e054:	f88d 300b 	strb.w	r3, [sp, #11]
   1e058:	f88d 300c 	strb.w	r3, [sp, #12]
   1e05c:	682b      	ldr	r3, [r5, #0]
   1e05e:	2112      	movs	r1, #18
   1e060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1e064:	4668      	mov	r0, sp
   1e066:	602b      	str	r3, [r5, #0]
   1e068:	f002 faf4 	bl	20654 <rpc_gnss_client_request_alloc>
   1e06c:	4604      	mov	r4, r0
   1e06e:	9800      	ldr	r0, [sp, #0]
   1e070:	2c00      	cmp	r4, #0
   1e072:	f040 80f2 	bne.w	1e25a <gnss_interface_setopt+0x29a>
   1e076:	2800      	cmp	r0, #0
   1e078:	f000 80f6 	beq.w	1e268 <gnss_interface_setopt+0x2a8>
   1e07c:	2212      	movs	r2, #18
   1e07e:	f04f 0976 	mov.w	r9, #118	; 0x76
   1e082:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1e086:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1e08a:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1e08e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 1e2bc <gnss_interface_setopt+0x2fc>
   1e092:	a906      	add	r1, sp, #24
   1e094:	f8bc 3000 	ldrh.w	r3, [ip]
   1e098:	f880 900e 	strb.w	r9, [r0, #14]
   1e09c:	3301      	adds	r3, #1
   1e09e:	b29b      	uxth	r3, r3
   1e0a0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1e0a4:	f841 6d14 	str.w	r6, [r1, #-20]!
   1e0a8:	7144      	strb	r4, [r0, #5]
   1e0aa:	7184      	strb	r4, [r0, #6]
   1e0ac:	71c4      	strb	r4, [r0, #7]
   1e0ae:	7204      	strb	r4, [r0, #8]
   1e0b0:	7244      	strb	r4, [r0, #9]
   1e0b2:	7284      	strb	r4, [r0, #10]
   1e0b4:	72c4      	strb	r4, [r0, #11]
   1e0b6:	7102      	strb	r2, [r0, #4]
   1e0b8:	f880 b00c 	strb.w	fp, [r0, #12]
   1e0bc:	f880 a00d 	strb.w	sl, [r0, #13]
   1e0c0:	f880 e00f 	strb.w	lr, [r0, #15]
   1e0c4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1e2c0 <gnss_interface_setopt+0x300>
   1e0c8:	6800      	ldr	r0, [r0, #0]
   1e0ca:	f8ac 3000 	strh.w	r3, [ip]
   1e0ce:	f7ee fd3d 	bl	cb4c <memcpy>
   1e0d2:	4639      	mov	r1, r7
   1e0d4:	9800      	ldr	r0, [sp, #0]
   1e0d6:	f8c9 4000 	str.w	r4, [r9]
   1e0da:	f002 facf 	bl	2067c <rpc_gnss_client_request_send>
   1e0de:	2800      	cmp	r0, #0
   1e0e0:	f040 80c7 	bne.w	1e272 <gnss_interface_setopt+0x2b2>
   1e0e4:	4f73      	ldr	r7, [pc, #460]	; (1e2b4 <gnss_interface_setopt+0x2f4>)
   1e0e6:	4e72      	ldr	r6, [pc, #456]	; (1e2b0 <gnss_interface_setopt+0x2f0>)
   1e0e8:	4639      	mov	r1, r7
   1e0ea:	4630      	mov	r0, r6
   1e0ec:	f7f8 fc90 	bl	16a10 <bsd_os_timedwait>
   1e0f0:	682c      	ldr	r4, [r5, #0]
   1e0f2:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1e0f6:	d1f7      	bne.n	1e0e8 <gnss_interface_setopt+0x128>
   1e0f8:	f8d9 0000 	ldr.w	r0, [r9]
   1e0fc:	b118      	cbz	r0, 1e106 <gnss_interface_setopt+0x146>
   1e0fe:	f002 fadb 	bl	206b8 <rpc_gnss_client_data_free>
   1e102:	f8c9 4000 	str.w	r4, [r9]
   1e106:	682b      	ldr	r3, [r5, #0]
   1e108:	021b      	lsls	r3, r3, #8
   1e10a:	f140 8098 	bpl.w	1e23e <gnss_interface_setopt+0x27e>
   1e10e:	f1b8 0f08 	cmp.w	r8, #8
   1e112:	f040 809a 	bne.w	1e24a <gnss_interface_setopt+0x28a>
   1e116:	4b68      	ldr	r3, [pc, #416]	; (1e2b8 <gnss_interface_setopt+0x2f8>)
   1e118:	6818      	ldr	r0, [r3, #0]
   1e11a:	6803      	ldr	r3, [r0, #0]
   1e11c:	691b      	ldr	r3, [r3, #16]
   1e11e:	4798      	blx	r3
   1e120:	2000      	movs	r0, #0
   1e122:	682b      	ldr	r3, [r5, #0]
   1e124:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1e128:	602b      	str	r3, [r5, #0]
   1e12a:	b007      	add	sp, #28
   1e12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e130:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e132:	2a02      	cmp	r2, #2
   1e134:	f040 808b 	bne.w	1e24e <gnss_interface_setopt+0x28e>
   1e138:	2208      	movs	r2, #8
   1e13a:	f241 1603 	movw	r6, #4355	; 0x1103
   1e13e:	881b      	ldrh	r3, [r3, #0]
   1e140:	9202      	str	r2, [sp, #8]
   1e142:	f8ad 300f 	strh.w	r3, [sp, #15]
   1e146:	4637      	mov	r7, r6
   1e148:	e788      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e14a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e14c:	2a02      	cmp	r2, #2
   1e14e:	d17e      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e150:	2210      	movs	r2, #16
   1e152:	f241 1603 	movw	r6, #4355	; 0x1103
   1e156:	881b      	ldrh	r3, [r3, #0]
   1e158:	9202      	str	r2, [sp, #8]
   1e15a:	f8ad 3011 	strh.w	r3, [sp, #17]
   1e15e:	4637      	mov	r7, r6
   1e160:	e77c      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e162:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e164:	2a01      	cmp	r2, #1
   1e166:	d172      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e168:	781b      	ldrb	r3, [r3, #0]
   1e16a:	2b01      	cmp	r3, #1
   1e16c:	d16f      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e16e:	f241 1603 	movw	r6, #4355	; 0x1103
   1e172:	4637      	mov	r7, r6
   1e174:	e772      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e176:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e178:	2a02      	cmp	r2, #2
   1e17a:	d168      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e17c:	2220      	movs	r2, #32
   1e17e:	f241 1603 	movw	r6, #4355	; 0x1103
   1e182:	881b      	ldrh	r3, [r3, #0]
   1e184:	9202      	str	r2, [sp, #8]
   1e186:	f8ad 3013 	strh.w	r3, [sp, #19]
   1e18a:	4637      	mov	r7, r6
   1e18c:	e766      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e18e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e190:	2a01      	cmp	r2, #1
   1e192:	d15c      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e194:	f241 1603 	movw	r6, #4355	; 0x1103
   1e198:	781b      	ldrb	r3, [r3, #0]
   1e19a:	9202      	str	r2, [sp, #8]
   1e19c:	f88d 300c 	strb.w	r3, [sp, #12]
   1e1a0:	4637      	mov	r7, r6
   1e1a2:	e75b      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e1a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e1a6:	2a01      	cmp	r2, #1
   1e1a8:	d151      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e1aa:	2202      	movs	r2, #2
   1e1ac:	f241 1603 	movw	r6, #4355	; 0x1103
   1e1b0:	781b      	ldrb	r3, [r3, #0]
   1e1b2:	9202      	str	r2, [sp, #8]
   1e1b4:	f88d 300d 	strb.w	r3, [sp, #13]
   1e1b8:	4637      	mov	r7, r6
   1e1ba:	e74f      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e1bc:	682a      	ldr	r2, [r5, #0]
   1e1be:	b292      	uxth	r2, r2
   1e1c0:	2a02      	cmp	r2, #2
   1e1c2:	f47f af0b 	bne.w	1dfdc <gnss_interface_setopt+0x1c>
   1e1c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e1c8:	2a04      	cmp	r2, #4
   1e1ca:	d140      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e1cc:	2101      	movs	r1, #1
   1e1ce:	f241 0604 	movw	r6, #4100	; 0x1004
   1e1d2:	682a      	ldr	r2, [r5, #0]
   1e1d4:	6818      	ldr	r0, [r3, #0]
   1e1d6:	0c13      	lsrs	r3, r2, #16
   1e1d8:	041b      	lsls	r3, r3, #16
   1e1da:	f043 0303 	orr.w	r3, r3, #3
   1e1de:	f8cd 0009 	str.w	r0, [sp, #9]
   1e1e2:	602b      	str	r3, [r5, #0]
   1e1e4:	f88d 1008 	strb.w	r1, [sp, #8]
   1e1e8:	4637      	mov	r7, r6
   1e1ea:	e737      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e1ec:	682a      	ldr	r2, [r5, #0]
   1e1ee:	b292      	uxth	r2, r2
   1e1f0:	2a04      	cmp	r2, #4
   1e1f2:	d004      	beq.n	1e1fe <gnss_interface_setopt+0x23e>
   1e1f4:	682a      	ldr	r2, [r5, #0]
   1e1f6:	b292      	uxth	r2, r2
   1e1f8:	2a02      	cmp	r2, #2
   1e1fa:	f47f aeef 	bne.w	1dfdc <gnss_interface_setopt+0x1c>
   1e1fe:	2200      	movs	r2, #0
   1e200:	f88d 2008 	strb.w	r2, [sp, #8]
   1e204:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e206:	2a04      	cmp	r2, #4
   1e208:	d121      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e20a:	f241 0604 	movw	r6, #4100	; 0x1004
   1e20e:	681b      	ldr	r3, [r3, #0]
   1e210:	4637      	mov	r7, r6
   1e212:	f8cd 3009 	str.w	r3, [sp, #9]
   1e216:	e721      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e218:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e21a:	2a01      	cmp	r2, #1
   1e21c:	d117      	bne.n	1e24e <gnss_interface_setopt+0x28e>
   1e21e:	2240      	movs	r2, #64	; 0x40
   1e220:	f241 1603 	movw	r6, #4355	; 0x1103
   1e224:	781b      	ldrb	r3, [r3, #0]
   1e226:	9202      	str	r2, [sp, #8]
   1e228:	f88d 3015 	strb.w	r3, [sp, #21]
   1e22c:	4637      	mov	r7, r6
   1e22e:	e715      	b.n	1e05c <gnss_interface_setopt+0x9c>
   1e230:	682b      	ldr	r3, [r5, #0]
   1e232:	b29b      	uxth	r3, r3
   1e234:	2b04      	cmp	r3, #4
   1e236:	f47f aed1 	bne.w	1dfdc <gnss_interface_setopt+0x1c>
   1e23a:	2202      	movs	r2, #2
   1e23c:	e700      	b.n	1e040 <gnss_interface_setopt+0x80>
   1e23e:	200e      	movs	r0, #14
   1e240:	f7f8 fc9e 	bl	16b80 <bsd_os_errno_set>
   1e244:	f04f 30ff 	mov.w	r0, #4294967295
   1e248:	e76b      	b.n	1e122 <gnss_interface_setopt+0x162>
   1e24a:	2000      	movs	r0, #0
   1e24c:	e769      	b.n	1e122 <gnss_interface_setopt+0x162>
   1e24e:	2016      	movs	r0, #22
   1e250:	f7f8 fc96 	bl	16b80 <bsd_os_errno_set>
   1e254:	f04f 30ff 	mov.w	r0, #4294967295
   1e258:	e6c5      	b.n	1dfe6 <gnss_interface_setopt+0x26>
   1e25a:	b128      	cbz	r0, 1e268 <gnss_interface_setopt+0x2a8>
   1e25c:	6803      	ldr	r3, [r0, #0]
   1e25e:	b11b      	cbz	r3, 1e268 <gnss_interface_setopt+0x2a8>
   1e260:	4618      	mov	r0, r3
   1e262:	f002 fa29 	bl	206b8 <rpc_gnss_client_data_free>
   1e266:	9800      	ldr	r0, [sp, #0]
   1e268:	f002 fa1e 	bl	206a8 <rpc_gnss_client_message_free>
   1e26c:	2023      	movs	r0, #35	; 0x23
   1e26e:	f7f8 fc87 	bl	16b80 <bsd_os_errno_set>
   1e272:	682b      	ldr	r3, [r5, #0]
   1e274:	200e      	movs	r0, #14
   1e276:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1e27a:	602b      	str	r3, [r5, #0]
   1e27c:	f7f8 fc80 	bl	16b80 <bsd_os_errno_set>
   1e280:	f04f 30ff 	mov.w	r0, #4294967295
   1e284:	e6af      	b.n	1dfe6 <gnss_interface_setopt+0x26>
   1e286:	202a      	movs	r0, #42	; 0x2a
   1e288:	f7f8 fc7a 	bl	16b80 <bsd_os_errno_set>
   1e28c:	f04f 30ff 	mov.w	r0, #4294967295
   1e290:	e6a9      	b.n	1dfe6 <gnss_interface_setopt+0x26>
   1e292:	2009      	movs	r0, #9
   1e294:	f7f8 fc74 	bl	16b80 <bsd_os_errno_set>
   1e298:	f04f 30ff 	mov.w	r0, #4294967295
   1e29c:	e6a3      	b.n	1dfe6 <gnss_interface_setopt+0x26>
   1e29e:	2073      	movs	r0, #115	; 0x73
   1e2a0:	f7f8 fc6e 	bl	16b80 <bsd_os_errno_set>
   1e2a4:	f04f 30ff 	mov.w	r0, #4294967295
   1e2a8:	e69d      	b.n	1dfe6 <gnss_interface_setopt+0x26>
   1e2aa:	bf00      	nop
   1e2ac:	20021ab0 	.word	0x20021ab0
   1e2b0:	49765443 	.word	0x49765443
   1e2b4:	200204c4 	.word	0x200204c4
   1e2b8:	20021ab8 	.word	0x20021ab8
   1e2bc:	200242ca 	.word	0x200242ca
   1e2c0:	20021ab4 	.word	0x20021ab4

0001e2c4 <gnss_interface_getopt>:
   1e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2c8:	4c81      	ldr	r4, [pc, #516]	; (1e4d0 <gnss_interface_getopt+0x20c>)
   1e2ca:	b087      	sub	sp, #28
   1e2cc:	6825      	ldr	r5, [r4, #0]
   1e2ce:	4698      	mov	r8, r3
   1e2d0:	b2ad      	uxth	r5, r5
   1e2d2:	2d02      	cmp	r5, #2
   1e2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e2d6:	f040 80dd 	bne.w	1e494 <gnss_interface_getopt+0x1d0>
   1e2da:	6825      	ldr	r5, [r4, #0]
   1e2dc:	03ee      	lsls	r6, r5, #15
   1e2de:	f100 80eb 	bmi.w	1e4b8 <gnss_interface_getopt+0x1f4>
   1e2e2:	6825      	ldr	r5, [r4, #0]
   1e2e4:	01ed      	lsls	r5, r5, #7
   1e2e6:	f100 80ed 	bmi.w	1e4c4 <gnss_interface_getopt+0x200>
   1e2ea:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1e2ee:	f040 80d7 	bne.w	1e4a0 <gnss_interface_getopt+0x1dc>
   1e2f2:	4978      	ldr	r1, [pc, #480]	; (1e4d4 <gnss_interface_getopt+0x210>)
   1e2f4:	4288      	cmp	r0, r1
   1e2f6:	f040 80d9 	bne.w	1e4ac <gnss_interface_getopt+0x1e8>
   1e2fa:	f1b8 0f00 	cmp.w	r8, #0
   1e2fe:	d00b      	beq.n	1e318 <gnss_interface_getopt+0x54>
   1e300:	b153      	cbz	r3, 1e318 <gnss_interface_getopt+0x54>
   1e302:	1e57      	subs	r7, r2, #1
   1e304:	2f05      	cmp	r7, #5
   1e306:	d807      	bhi.n	1e318 <gnss_interface_getopt+0x54>
   1e308:	e8df f007 	tbb	[pc, r7]
   1e30c:	0f030f0f 	.word	0x0f030f0f
   1e310:	0303      	.short	0x0303
   1e312:	681b      	ldr	r3, [r3, #0]
   1e314:	2b01      	cmp	r3, #1
   1e316:	d00b      	beq.n	1e330 <gnss_interface_getopt+0x6c>
   1e318:	2016      	movs	r0, #22
   1e31a:	f7f8 fc31 	bl	16b80 <bsd_os_errno_set>
   1e31e:	f04f 35ff 	mov.w	r5, #4294967295
   1e322:	4628      	mov	r0, r5
   1e324:	b007      	add	sp, #28
   1e326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e32a:	681b      	ldr	r3, [r3, #0]
   1e32c:	2b02      	cmp	r3, #2
   1e32e:	d1f3      	bne.n	1e318 <gnss_interface_getopt+0x54>
   1e330:	6823      	ldr	r3, [r4, #0]
   1e332:	2212      	movs	r2, #18
   1e334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e338:	2100      	movs	r1, #0
   1e33a:	a801      	add	r0, sp, #4
   1e33c:	6023      	str	r3, [r4, #0]
   1e33e:	f008 f87b 	bl	26438 <memset>
   1e342:	2112      	movs	r1, #18
   1e344:	4668      	mov	r0, sp
   1e346:	f002 f985 	bl	20654 <rpc_gnss_client_request_alloc>
   1e34a:	4605      	mov	r5, r0
   1e34c:	9800      	ldr	r0, [sp, #0]
   1e34e:	2d00      	cmp	r5, #0
   1e350:	f040 808a 	bne.w	1e468 <gnss_interface_getopt+0x1a4>
   1e354:	2800      	cmp	r0, #0
   1e356:	f000 808e 	beq.w	1e476 <gnss_interface_getopt+0x1b2>
   1e35a:	f241 1602 	movw	r6, #4354	; 0x1102
   1e35e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1e362:	2212      	movs	r2, #18
   1e364:	f04f 0976 	mov.w	r9, #118	; 0x76
   1e368:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1e36c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1e370:	f8df c168 	ldr.w	ip, [pc, #360]	; 1e4dc <gnss_interface_getopt+0x218>
   1e374:	f880 e00f 	strb.w	lr, [r0, #15]
   1e378:	f8bc 3000 	ldrh.w	r3, [ip]
   1e37c:	f880 900e 	strb.w	r9, [r0, #14]
   1e380:	3301      	adds	r3, #1
   1e382:	b29b      	uxth	r3, r3
   1e384:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1e388:	f8cd e004 	str.w	lr, [sp, #4]
   1e38c:	7145      	strb	r5, [r0, #5]
   1e38e:	7185      	strb	r5, [r0, #6]
   1e390:	71c5      	strb	r5, [r0, #7]
   1e392:	7205      	strb	r5, [r0, #8]
   1e394:	7245      	strb	r5, [r0, #9]
   1e396:	7285      	strb	r5, [r0, #10]
   1e398:	72c5      	strb	r5, [r0, #11]
   1e39a:	a901      	add	r1, sp, #4
   1e39c:	7102      	strb	r2, [r0, #4]
   1e39e:	f880 b00c 	strb.w	fp, [r0, #12]
   1e3a2:	f880 a00d 	strb.w	sl, [r0, #13]
   1e3a6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1e4e0 <gnss_interface_getopt+0x21c>
   1e3aa:	6800      	ldr	r0, [r0, #0]
   1e3ac:	f8ac 3000 	strh.w	r3, [ip]
   1e3b0:	f7ee fbcc 	bl	cb4c <memcpy>
   1e3b4:	4631      	mov	r1, r6
   1e3b6:	9800      	ldr	r0, [sp, #0]
   1e3b8:	f8c9 5000 	str.w	r5, [r9]
   1e3bc:	f002 f95e 	bl	2067c <rpc_gnss_client_request_send>
   1e3c0:	2800      	cmp	r0, #0
   1e3c2:	d15d      	bne.n	1e480 <gnss_interface_getopt+0x1bc>
   1e3c4:	4e44      	ldr	r6, [pc, #272]	; (1e4d8 <gnss_interface_getopt+0x214>)
   1e3c6:	4d43      	ldr	r5, [pc, #268]	; (1e4d4 <gnss_interface_getopt+0x210>)
   1e3c8:	4631      	mov	r1, r6
   1e3ca:	4628      	mov	r0, r5
   1e3cc:	f7f8 fb20 	bl	16a10 <bsd_os_timedwait>
   1e3d0:	6823      	ldr	r3, [r4, #0]
   1e3d2:	01db      	lsls	r3, r3, #7
   1e3d4:	d4f8      	bmi.n	1e3c8 <gnss_interface_getopt+0x104>
   1e3d6:	f8d9 0000 	ldr.w	r0, [r9]
   1e3da:	b1d8      	cbz	r0, 1e414 <gnss_interface_getopt+0x150>
   1e3dc:	6825      	ldr	r5, [r4, #0]
   1e3de:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1e3e2:	d00f      	beq.n	1e404 <gnss_interface_getopt+0x140>
   1e3e4:	2f05      	cmp	r7, #5
   1e3e6:	d837      	bhi.n	1e458 <gnss_interface_getopt+0x194>
   1e3e8:	e8df f007 	tbb	[pc, r7]
   1e3ec:	2b26201a 	.word	0x2b26201a
   1e3f0:	0331      	.short	0x0331
   1e3f2:	2500      	movs	r5, #0
   1e3f4:	7b43      	ldrb	r3, [r0, #13]
   1e3f6:	f888 3000 	strb.w	r3, [r8]
   1e3fa:	f002 f95d 	bl	206b8 <rpc_gnss_client_data_free>
   1e3fe:	2300      	movs	r3, #0
   1e400:	f8c9 3000 	str.w	r3, [r9]
   1e404:	6823      	ldr	r3, [r4, #0]
   1e406:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1e40a:	6023      	str	r3, [r4, #0]
   1e40c:	4628      	mov	r0, r5
   1e40e:	b007      	add	sp, #28
   1e410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e414:	6823      	ldr	r3, [r4, #0]
   1e416:	4605      	mov	r5, r0
   1e418:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1e41c:	6023      	str	r3, [r4, #0]
   1e41e:	e7f5      	b.n	1e40c <gnss_interface_getopt+0x148>
   1e420:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1e424:	2500      	movs	r5, #0
   1e426:	f8a8 3000 	strh.w	r3, [r8]
   1e42a:	e7e6      	b.n	1e3fa <gnss_interface_getopt+0x136>
   1e42c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1e430:	2500      	movs	r5, #0
   1e432:	f8a8 3000 	strh.w	r3, [r8]
   1e436:	e7e0      	b.n	1e3fa <gnss_interface_getopt+0x136>
   1e438:	7b83      	ldrb	r3, [r0, #14]
   1e43a:	2500      	movs	r5, #0
   1e43c:	f888 3000 	strb.w	r3, [r8]
   1e440:	e7db      	b.n	1e3fa <gnss_interface_getopt+0x136>
   1e442:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1e446:	2500      	movs	r5, #0
   1e448:	f8a8 3000 	strh.w	r3, [r8]
   1e44c:	e7d5      	b.n	1e3fa <gnss_interface_getopt+0x136>
   1e44e:	7b03      	ldrb	r3, [r0, #12]
   1e450:	2500      	movs	r5, #0
   1e452:	f888 3000 	strb.w	r3, [r8]
   1e456:	e7d0      	b.n	1e3fa <gnss_interface_getopt+0x136>
   1e458:	2016      	movs	r0, #22
   1e45a:	f7f8 fb91 	bl	16b80 <bsd_os_errno_set>
   1e45e:	f04f 35ff 	mov.w	r5, #4294967295
   1e462:	f8d9 0000 	ldr.w	r0, [r9]
   1e466:	e7c8      	b.n	1e3fa <gnss_interface_getopt+0x136>
   1e468:	b128      	cbz	r0, 1e476 <gnss_interface_getopt+0x1b2>
   1e46a:	6803      	ldr	r3, [r0, #0]
   1e46c:	b11b      	cbz	r3, 1e476 <gnss_interface_getopt+0x1b2>
   1e46e:	4618      	mov	r0, r3
   1e470:	f002 f922 	bl	206b8 <rpc_gnss_client_data_free>
   1e474:	9800      	ldr	r0, [sp, #0]
   1e476:	f002 f917 	bl	206a8 <rpc_gnss_client_message_free>
   1e47a:	2023      	movs	r0, #35	; 0x23
   1e47c:	f7f8 fb80 	bl	16b80 <bsd_os_errno_set>
   1e480:	6823      	ldr	r3, [r4, #0]
   1e482:	200e      	movs	r0, #14
   1e484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e488:	6023      	str	r3, [r4, #0]
   1e48a:	f04f 35ff 	mov.w	r5, #4294967295
   1e48e:	f7f8 fb77 	bl	16b80 <bsd_os_errno_set>
   1e492:	e746      	b.n	1e322 <gnss_interface_getopt+0x5e>
   1e494:	200e      	movs	r0, #14
   1e496:	f7f8 fb73 	bl	16b80 <bsd_os_errno_set>
   1e49a:	f04f 35ff 	mov.w	r5, #4294967295
   1e49e:	e740      	b.n	1e322 <gnss_interface_getopt+0x5e>
   1e4a0:	202a      	movs	r0, #42	; 0x2a
   1e4a2:	f7f8 fb6d 	bl	16b80 <bsd_os_errno_set>
   1e4a6:	f04f 35ff 	mov.w	r5, #4294967295
   1e4aa:	e73a      	b.n	1e322 <gnss_interface_getopt+0x5e>
   1e4ac:	2009      	movs	r0, #9
   1e4ae:	f7f8 fb67 	bl	16b80 <bsd_os_errno_set>
   1e4b2:	f04f 35ff 	mov.w	r5, #4294967295
   1e4b6:	e734      	b.n	1e322 <gnss_interface_getopt+0x5e>
   1e4b8:	2005      	movs	r0, #5
   1e4ba:	f7f8 fb61 	bl	16b80 <bsd_os_errno_set>
   1e4be:	f04f 35ff 	mov.w	r5, #4294967295
   1e4c2:	e72e      	b.n	1e322 <gnss_interface_getopt+0x5e>
   1e4c4:	2073      	movs	r0, #115	; 0x73
   1e4c6:	f7f8 fb5b 	bl	16b80 <bsd_os_errno_set>
   1e4ca:	f04f 35ff 	mov.w	r5, #4294967295
   1e4ce:	e728      	b.n	1e322 <gnss_interface_getopt+0x5e>
   1e4d0:	20021ab0 	.word	0x20021ab0
   1e4d4:	49765443 	.word	0x49765443
   1e4d8:	200204c4 	.word	0x200204c4
   1e4dc:	200242ca 	.word	0x200242ca
   1e4e0:	20021ab4 	.word	0x20021ab4

0001e4e4 <gnss_interface_init>:
   1e4e4:	2100      	movs	r1, #0
   1e4e6:	b538      	push	{r3, r4, r5, lr}
   1e4e8:	4c0a      	ldr	r4, [pc, #40]	; (1e514 <gnss_interface_init+0x30>)
   1e4ea:	4d0b      	ldr	r5, [pc, #44]	; (1e518 <gnss_interface_init+0x34>)
   1e4ec:	6822      	ldr	r2, [r4, #0]
   1e4ee:	480b      	ldr	r0, [pc, #44]	; (1e51c <gnss_interface_init+0x38>)
   1e4f0:	4b0b      	ldr	r3, [pc, #44]	; (1e520 <gnss_interface_init+0x3c>)
   1e4f2:	402a      	ands	r2, r5
   1e4f4:	6022      	str	r2, [r4, #0]
   1e4f6:	8001      	strh	r1, [r0, #0]
   1e4f8:	6019      	str	r1, [r3, #0]
   1e4fa:	f002 f8a5 	bl	20648 <rpc_gnss_client_init>
   1e4fe:	b938      	cbnz	r0, 1e510 <gnss_interface_init+0x2c>
   1e500:	2101      	movs	r1, #1
   1e502:	6823      	ldr	r3, [r4, #0]
   1e504:	4a07      	ldr	r2, [pc, #28]	; (1e524 <gnss_interface_init+0x40>)
   1e506:	402b      	ands	r3, r5
   1e508:	430b      	orrs	r3, r1
   1e50a:	7011      	strb	r1, [r2, #0]
   1e50c:	6023      	str	r3, [r4, #0]
   1e50e:	bd38      	pop	{r3, r4, r5, pc}
   1e510:	2003      	movs	r0, #3
   1e512:	bd38      	pop	{r3, r4, r5, pc}
   1e514:	20021ab0 	.word	0x20021ab0
   1e518:	ffff0000 	.word	0xffff0000
   1e51c:	200242ca 	.word	0x200242ca
   1e520:	20021ab4 	.word	0x20021ab4
   1e524:	2002629c 	.word	0x2002629c

0001e528 <gnss_interface_open>:
   1e528:	b510      	push	{r4, lr}
   1e52a:	4b1c      	ldr	r3, [pc, #112]	; (1e59c <gnss_interface_open+0x74>)
   1e52c:	781b      	ldrb	r3, [r3, #0]
   1e52e:	b34b      	cbz	r3, 1e584 <gnss_interface_open+0x5c>
   1e530:	2902      	cmp	r1, #2
   1e532:	d121      	bne.n	1e578 <gnss_interface_open+0x50>
   1e534:	4c1a      	ldr	r4, [pc, #104]	; (1e5a0 <gnss_interface_open+0x78>)
   1e536:	6823      	ldr	r3, [r4, #0]
   1e538:	b29b      	uxth	r3, r3
   1e53a:	2b01      	cmp	r3, #1
   1e53c:	d116      	bne.n	1e56c <gnss_interface_open+0x44>
   1e53e:	6823      	ldr	r3, [r4, #0]
   1e540:	4608      	mov	r0, r1
   1e542:	0c1b      	lsrs	r3, r3, #16
   1e544:	041b      	lsls	r3, r3, #16
   1e546:	f043 0302 	orr.w	r3, r3, #2
   1e54a:	2200      	movs	r2, #0
   1e54c:	4915      	ldr	r1, [pc, #84]	; (1e5a4 <gnss_interface_open+0x7c>)
   1e54e:	6023      	str	r3, [r4, #0]
   1e550:	f002 f99c 	bl	2088c <packet_handler_create>
   1e554:	4a14      	ldr	r2, [pc, #80]	; (1e5a8 <gnss_interface_open+0x80>)
   1e556:	6010      	str	r0, [r2, #0]
   1e558:	b1d0      	cbz	r0, 1e590 <gnss_interface_open+0x68>
   1e55a:	6823      	ldr	r3, [r4, #0]
   1e55c:	6802      	ldr	r2, [r0, #0]
   1e55e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e562:	6812      	ldr	r2, [r2, #0]
   1e564:	6023      	str	r3, [r4, #0]
   1e566:	4790      	blx	r2
   1e568:	4810      	ldr	r0, [pc, #64]	; (1e5ac <gnss_interface_open+0x84>)
   1e56a:	bd10      	pop	{r4, pc}
   1e56c:	2005      	movs	r0, #5
   1e56e:	f7f8 fb07 	bl	16b80 <bsd_os_errno_set>
   1e572:	f04f 30ff 	mov.w	r0, #4294967295
   1e576:	bd10      	pop	{r4, pc}
   1e578:	2029      	movs	r0, #41	; 0x29
   1e57a:	f7f8 fb01 	bl	16b80 <bsd_os_errno_set>
   1e57e:	f04f 30ff 	mov.w	r0, #4294967295
   1e582:	bd10      	pop	{r4, pc}
   1e584:	2070      	movs	r0, #112	; 0x70
   1e586:	f7f8 fafb 	bl	16b80 <bsd_os_errno_set>
   1e58a:	f04f 30ff 	mov.w	r0, #4294967295
   1e58e:	bd10      	pop	{r4, pc}
   1e590:	200e      	movs	r0, #14
   1e592:	f7f8 faf5 	bl	16b80 <bsd_os_errno_set>
   1e596:	f04f 30ff 	mov.w	r0, #4294967295
   1e59a:	bd10      	pop	{r4, pc}
   1e59c:	2002629c 	.word	0x2002629c
   1e5a0:	20021ab0 	.word	0x20021ab0
   1e5a4:	0001d805 	.word	0x0001d805
   1e5a8:	20021ab8 	.word	0x20021ab8
   1e5ac:	49765443 	.word	0x49765443

0001e5b0 <gnss_interface_close>:
   1e5b0:	b530      	push	{r4, r5, lr}
   1e5b2:	4b15      	ldr	r3, [pc, #84]	; (1e608 <gnss_interface_close+0x58>)
   1e5b4:	b085      	sub	sp, #20
   1e5b6:	4298      	cmp	r0, r3
   1e5b8:	d11f      	bne.n	1e5fa <gnss_interface_close+0x4a>
   1e5ba:	4c14      	ldr	r4, [pc, #80]	; (1e60c <gnss_interface_close+0x5c>)
   1e5bc:	6822      	ldr	r2, [r4, #0]
   1e5be:	b292      	uxth	r2, r2
   1e5c0:	2a04      	cmp	r2, #4
   1e5c2:	d00f      	beq.n	1e5e4 <gnss_interface_close+0x34>
   1e5c4:	4d12      	ldr	r5, [pc, #72]	; (1e610 <gnss_interface_close+0x60>)
   1e5c6:	6828      	ldr	r0, [r5, #0]
   1e5c8:	b118      	cbz	r0, 1e5d2 <gnss_interface_close+0x22>
   1e5ca:	f002 f97f 	bl	208cc <packet_handler_delete>
   1e5ce:	2300      	movs	r3, #0
   1e5d0:	602b      	str	r3, [r5, #0]
   1e5d2:	2000      	movs	r0, #0
   1e5d4:	6823      	ldr	r3, [r4, #0]
   1e5d6:	0c1b      	lsrs	r3, r3, #16
   1e5d8:	041b      	lsls	r3, r3, #16
   1e5da:	f043 0301 	orr.w	r3, r3, #1
   1e5de:	6023      	str	r3, [r4, #0]
   1e5e0:	b005      	add	sp, #20
   1e5e2:	bd30      	pop	{r4, r5, pc}
   1e5e4:	2100      	movs	r1, #0
   1e5e6:	ab04      	add	r3, sp, #16
   1e5e8:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e5ec:	9200      	str	r2, [sp, #0]
   1e5ee:	f44f 7101 	mov.w	r1, #516	; 0x204
   1e5f2:	2208      	movs	r2, #8
   1e5f4:	f001 fea8 	bl	20348 <nrf_setsockopt>
   1e5f8:	e7e4      	b.n	1e5c4 <gnss_interface_close+0x14>
   1e5fa:	2009      	movs	r0, #9
   1e5fc:	f7f8 fac0 	bl	16b80 <bsd_os_errno_set>
   1e600:	f04f 30ff 	mov.w	r0, #4294967295
   1e604:	e7ec      	b.n	1e5e0 <gnss_interface_close+0x30>
   1e606:	bf00      	nop
   1e608:	49765443 	.word	0x49765443
   1e60c:	20021ab0 	.word	0x20021ab0
   1e610:	20021ab8 	.word	0x20021ab8

0001e614 <rpc_logobj_client_evt_handler>:
   1e614:	b120      	cbz	r0, 1e620 <rpc_logobj_client_evt_handler+0xc>
   1e616:	f850 1b08 	ldr.w	r1, [r0], #8
   1e61a:	0c09      	lsrs	r1, r1, #16
   1e61c:	f7fb b94e 	b.w	198bc <logobj_event_handler>
   1e620:	4770      	bx	lr
   1e622:	bf00      	nop

0001e624 <rpc_logobj_client_init>:
   1e624:	4801      	ldr	r0, [pc, #4]	; (1e62c <rpc_logobj_client_init+0x8>)
   1e626:	f7ff b82f 	b.w	1d688 <rpc_client_register>
   1e62a:	bf00      	nop
   1e62c:	0002f68c 	.word	0x0002f68c

0001e630 <rpc_logobj_client_request_alloc>:
   1e630:	2300      	movs	r3, #0
   1e632:	b510      	push	{r4, lr}
   1e634:	b082      	sub	sp, #8
   1e636:	9301      	str	r3, [sp, #4]
   1e638:	b961      	cbnz	r1, 1e654 <rpc_logobj_client_request_alloc+0x24>
   1e63a:	b170      	cbz	r0, 1e65a <rpc_logobj_client_request_alloc+0x2a>
   1e63c:	4604      	mov	r4, r0
   1e63e:	aa01      	add	r2, sp, #4
   1e640:	2009      	movs	r0, #9
   1e642:	f7ff f89b 	bl	1d77c <rpc_message_alloc>
   1e646:	b918      	cbnz	r0, 1e650 <rpc_logobj_client_request_alloc+0x20>
   1e648:	9b01      	ldr	r3, [sp, #4]
   1e64a:	b10b      	cbz	r3, 1e650 <rpc_logobj_client_request_alloc+0x20>
   1e64c:	3308      	adds	r3, #8
   1e64e:	6023      	str	r3, [r4, #0]
   1e650:	b002      	add	sp, #8
   1e652:	bd10      	pop	{r4, pc}
   1e654:	200f      	movs	r0, #15
   1e656:	b002      	add	sp, #8
   1e658:	bd10      	pop	{r4, pc}
   1e65a:	200e      	movs	r0, #14
   1e65c:	b002      	add	sp, #8
   1e65e:	bd10      	pop	{r4, pc}

0001e660 <rpc_logobj_client_request_send>:
   1e660:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1e664:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1e668:	d10b      	bne.n	1e682 <rpc_logobj_client_request_send+0x22>
   1e66a:	b160      	cbz	r0, 1e686 <rpc_logobj_client_request_send+0x26>
   1e66c:	4603      	mov	r3, r0
   1e66e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e672:	2009      	movs	r0, #9
   1e674:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e678:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e67c:	4619      	mov	r1, r3
   1e67e:	f7ff b86d 	b.w	1d75c <rpc_message_send>
   1e682:	200f      	movs	r0, #15
   1e684:	4770      	bx	lr
   1e686:	200e      	movs	r0, #14
   1e688:	4770      	bx	lr
   1e68a:	bf00      	nop

0001e68c <rpc_logobj_client_message_free>:
   1e68c:	b120      	cbz	r0, 1e698 <rpc_logobj_client_message_free+0xc>
   1e68e:	f1a0 0108 	sub.w	r1, r0, #8
   1e692:	2009      	movs	r0, #9
   1e694:	f7ff b89e 	b.w	1d7d4 <rpc_message_free>
   1e698:	200e      	movs	r0, #14
   1e69a:	4770      	bx	lr

0001e69c <rpc_logobj_client_data_free>:
   1e69c:	b118      	cbz	r0, 1e6a6 <rpc_logobj_client_data_free+0xa>
   1e69e:	4601      	mov	r1, r0
   1e6a0:	2009      	movs	r0, #9
   1e6a2:	f7ff b8a3 	b.w	1d7ec <rpc_message_data_free>
   1e6a6:	200e      	movs	r0, #14
   1e6a8:	4770      	bx	lr
   1e6aa:	bf00      	nop

0001e6ac <dfu_client_event_handler>:
   1e6ac:	f850 1b08 	ldr.w	r1, [r0], #8
   1e6b0:	0c09      	lsrs	r1, r1, #16
   1e6b2:	f002 bec1 	b.w	21438 <rpc_dfu_event_handler>
   1e6b6:	bf00      	nop

0001e6b8 <rpc_dfu_client_init>:
   1e6b8:	4801      	ldr	r0, [pc, #4]	; (1e6c0 <rpc_dfu_client_init+0x8>)
   1e6ba:	f7fe bfe5 	b.w	1d688 <rpc_client_register>
   1e6be:	bf00      	nop
   1e6c0:	0002f69c 	.word	0x0002f69c

0001e6c4 <rpc_dfu_client_request_alloc>:
   1e6c4:	2300      	movs	r3, #0
   1e6c6:	b510      	push	{r4, lr}
   1e6c8:	b082      	sub	sp, #8
   1e6ca:	9301      	str	r3, [sp, #4]
   1e6cc:	b158      	cbz	r0, 1e6e6 <rpc_dfu_client_request_alloc+0x22>
   1e6ce:	4604      	mov	r4, r0
   1e6d0:	aa01      	add	r2, sp, #4
   1e6d2:	2006      	movs	r0, #6
   1e6d4:	f7ff f852 	bl	1d77c <rpc_message_alloc>
   1e6d8:	b918      	cbnz	r0, 1e6e2 <rpc_dfu_client_request_alloc+0x1e>
   1e6da:	9b01      	ldr	r3, [sp, #4]
   1e6dc:	b10b      	cbz	r3, 1e6e2 <rpc_dfu_client_request_alloc+0x1e>
   1e6de:	3308      	adds	r3, #8
   1e6e0:	6023      	str	r3, [r4, #0]
   1e6e2:	b002      	add	sp, #8
   1e6e4:	bd10      	pop	{r4, pc}
   1e6e6:	2007      	movs	r0, #7
   1e6e8:	b002      	add	sp, #8
   1e6ea:	bd10      	pop	{r4, pc}

0001e6ec <rpc_dfu_client_request_send>:
   1e6ec:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1e6f0:	d10b      	bne.n	1e70a <rpc_dfu_client_request_send+0x1e>
   1e6f2:	b160      	cbz	r0, 1e70e <rpc_dfu_client_request_send+0x22>
   1e6f4:	4603      	mov	r3, r0
   1e6f6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e6fa:	2006      	movs	r0, #6
   1e6fc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e700:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e704:	4619      	mov	r1, r3
   1e706:	f7ff b829 	b.w	1d75c <rpc_message_send>
   1e70a:	200f      	movs	r0, #15
   1e70c:	4770      	bx	lr
   1e70e:	2007      	movs	r0, #7
   1e710:	4770      	bx	lr
   1e712:	bf00      	nop

0001e714 <rpc_dfu_client_message_free>:
   1e714:	b120      	cbz	r0, 1e720 <rpc_dfu_client_message_free+0xc>
   1e716:	f1a0 0108 	sub.w	r1, r0, #8
   1e71a:	2006      	movs	r0, #6
   1e71c:	f7ff b85a 	b.w	1d7d4 <rpc_message_free>
   1e720:	2007      	movs	r0, #7
   1e722:	4770      	bx	lr

0001e724 <rpc_dfu_client_data_free>:
   1e724:	b118      	cbz	r0, 1e72e <rpc_dfu_client_data_free+0xa>
   1e726:	4601      	mov	r1, r0
   1e728:	2006      	movs	r0, #6
   1e72a:	f7ff b85f 	b.w	1d7ec <rpc_message_data_free>
   1e72e:	2007      	movs	r0, #7
   1e730:	4770      	bx	lr
   1e732:	bf00      	nop

0001e734 <packet_free_cb>:
   1e734:	6800      	ldr	r0, [r0, #0]
   1e736:	f003 bbd9 	b.w	21eec <rpc_at_client_data_free>
   1e73a:	bf00      	nop

0001e73c <at_interface_write>:
   1e73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e740:	b083      	sub	sp, #12
   1e742:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1e744:	2c00      	cmp	r4, #0
   1e746:	d16c      	bne.n	1e822 <at_interface_write+0xe6>
   1e748:	4688      	mov	r8, r1
   1e74a:	4615      	mov	r5, r2
   1e74c:	461e      	mov	r6, r3
   1e74e:	4607      	mov	r7, r0
   1e750:	f003 fa9e 	bl	21c90 <interface_socket_from_handle_get>
   1e754:	4604      	mov	r4, r0
   1e756:	2e00      	cmp	r6, #0
   1e758:	d137      	bne.n	1e7ca <at_interface_write+0x8e>
   1e75a:	2800      	cmp	r0, #0
   1e75c:	d067      	beq.n	1e82e <at_interface_write+0xf2>
   1e75e:	6803      	ldr	r3, [r0, #0]
   1e760:	039b      	lsls	r3, r3, #14
   1e762:	d564      	bpl.n	1e82e <at_interface_write+0xf2>
   1e764:	6803      	ldr	r3, [r0, #0]
   1e766:	4629      	mov	r1, r5
   1e768:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1e76c:	6003      	str	r3, [r0, #0]
   1e76e:	6803      	ldr	r3, [r0, #0]
   1e770:	4668      	mov	r0, sp
   1e772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1e776:	6023      	str	r3, [r4, #0]
   1e778:	f003 fb8e 	bl	21e98 <rpc_at_client_request_alloc>
   1e77c:	4606      	mov	r6, r0
   1e77e:	4638      	mov	r0, r7
   1e780:	f003 fa86 	bl	21c90 <interface_socket_from_handle_get>
   1e784:	4681      	mov	r9, r0
   1e786:	bb56      	cbnz	r6, 1e7de <at_interface_write+0xa2>
   1e788:	2304      	movs	r3, #4
   1e78a:	9800      	ldr	r0, [sp, #0]
   1e78c:	7203      	strb	r3, [r0, #8]
   1e78e:	7246      	strb	r6, [r0, #9]
   1e790:	7286      	strb	r6, [r0, #10]
   1e792:	72c6      	strb	r6, [r0, #11]
   1e794:	60c7      	str	r7, [r0, #12]
   1e796:	bb25      	cbnz	r5, 1e7e2 <at_interface_write+0xa6>
   1e798:	2101      	movs	r1, #1
   1e79a:	f003 fb91 	bl	21ec0 <rpc_at_client_request_send>
   1e79e:	bb78      	cbnz	r0, 1e800 <at_interface_write+0xc4>
   1e7a0:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   1e7a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e7a8:	2900      	cmp	r1, #0
   1e7aa:	bf08      	it	eq
   1e7ac:	f04f 31ff 	moveq.w	r1, #4294967295
   1e7b0:	ab02      	add	r3, sp, #8
   1e7b2:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e7b6:	4638      	mov	r0, r7
   1e7b8:	4611      	mov	r1, r2
   1e7ba:	f003 f9f5 	bl	21ba8 <interface_socket_wait>
   1e7be:	b320      	cbz	r0, 1e80a <at_interface_write+0xce>
   1e7c0:	6823      	ldr	r3, [r4, #0]
   1e7c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e7c6:	6023      	str	r3, [r4, #0]
   1e7c8:	e002      	b.n	1e7d0 <at_interface_write+0x94>
   1e7ca:	b390      	cbz	r0, 1e832 <at_interface_write+0xf6>
   1e7cc:	6803      	ldr	r3, [r0, #0]
   1e7ce:	202d      	movs	r0, #45	; 0x2d
   1e7d0:	f7f8 f9d6 	bl	16b80 <bsd_os_errno_set>
   1e7d4:	f04f 30ff 	mov.w	r0, #4294967295
   1e7d8:	b003      	add	sp, #12
   1e7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e7de:	200c      	movs	r0, #12
   1e7e0:	e7ee      	b.n	1e7c0 <at_interface_write+0x84>
   1e7e2:	4641      	mov	r1, r8
   1e7e4:	6800      	ldr	r0, [r0, #0]
   1e7e6:	462a      	mov	r2, r5
   1e7e8:	f7ee f9b0 	bl	cb4c <memcpy>
   1e7ec:	2101      	movs	r1, #1
   1e7ee:	9800      	ldr	r0, [sp, #0]
   1e7f0:	f003 fb66 	bl	21ec0 <rpc_at_client_request_send>
   1e7f4:	2800      	cmp	r0, #0
   1e7f6:	d0d3      	beq.n	1e7a0 <at_interface_write+0x64>
   1e7f8:	9b00      	ldr	r3, [sp, #0]
   1e7fa:	6818      	ldr	r0, [r3, #0]
   1e7fc:	f003 fb76 	bl	21eec <rpc_at_client_data_free>
   1e800:	9800      	ldr	r0, [sp, #0]
   1e802:	f003 fb6b 	bl	21edc <rpc_at_client_message_free>
   1e806:	2023      	movs	r0, #35	; 0x23
   1e808:	e7da      	b.n	1e7c0 <at_interface_write+0x84>
   1e80a:	4638      	mov	r0, r7
   1e80c:	f003 fa40 	bl	21c90 <interface_socket_from_handle_get>
   1e810:	4603      	mov	r3, r0
   1e812:	b120      	cbz	r0, 1e81e <at_interface_write+0xe2>
   1e814:	6840      	ldr	r0, [r0, #4]
   1e816:	b110      	cbz	r0, 1e81e <at_interface_write+0xe2>
   1e818:	2200      	movs	r2, #0
   1e81a:	605a      	str	r2, [r3, #4]
   1e81c:	e7d0      	b.n	1e7c0 <at_interface_write+0x84>
   1e81e:	4628      	mov	r0, r5
   1e820:	e7da      	b.n	1e7d8 <at_interface_write+0x9c>
   1e822:	2038      	movs	r0, #56	; 0x38
   1e824:	f7f8 f9ac 	bl	16b80 <bsd_os_errno_set>
   1e828:	f04f 30ff 	mov.w	r0, #4294967295
   1e82c:	e7d4      	b.n	1e7d8 <at_interface_write+0x9c>
   1e82e:	2016      	movs	r0, #22
   1e830:	e7ce      	b.n	1e7d0 <at_interface_write+0x94>
   1e832:	202d      	movs	r0, #45	; 0x2d
   1e834:	e7cc      	b.n	1e7d0 <at_interface_write+0x94>
   1e836:	bf00      	nop

0001e838 <at_interface_init>:
   1e838:	b508      	push	{r3, lr}
   1e83a:	f003 fb27 	bl	21e8c <rpc_at_client_init>
   1e83e:	b910      	cbnz	r0, 1e846 <at_interface_init+0xe>
   1e840:	2201      	movs	r2, #1
   1e842:	4b01      	ldr	r3, [pc, #4]	; (1e848 <at_interface_init+0x10>)
   1e844:	701a      	strb	r2, [r3, #0]
   1e846:	bd08      	pop	{r3, pc}
   1e848:	2002629d 	.word	0x2002629d

0001e84c <at_interface_open>:
   1e84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e850:	2600      	movs	r6, #0
   1e852:	4b34      	ldr	r3, [pc, #208]	; (1e924 <at_interface_open+0xd8>)
   1e854:	b084      	sub	sp, #16
   1e856:	781b      	ldrb	r3, [r3, #0]
   1e858:	9601      	str	r6, [sp, #4]
   1e85a:	2b00      	cmp	r3, #0
   1e85c:	d05c      	beq.n	1e918 <at_interface_open+0xcc>
   1e85e:	2902      	cmp	r1, #2
   1e860:	460d      	mov	r5, r1
   1e862:	d153      	bne.n	1e90c <at_interface_open+0xc0>
   1e864:	4680      	mov	r8, r0
   1e866:	4617      	mov	r7, r2
   1e868:	a801      	add	r0, sp, #4
   1e86a:	4a2f      	ldr	r2, [pc, #188]	; (1e928 <at_interface_open+0xdc>)
   1e86c:	f003 f8ea 	bl	21a44 <interface_socket_allocate>
   1e870:	9b01      	ldr	r3, [sp, #4]
   1e872:	4604      	mov	r4, r0
   1e874:	b3c3      	cbz	r3, 1e8e8 <at_interface_open+0x9c>
   1e876:	615f      	str	r7, [r3, #20]
   1e878:	4631      	mov	r1, r6
   1e87a:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1e87e:	a802      	add	r0, sp, #8
   1e880:	f003 fb0a 	bl	21e98 <rpc_at_client_request_alloc>
   1e884:	4606      	mov	r6, r0
   1e886:	4620      	mov	r0, r4
   1e888:	f003 fa02 	bl	21c90 <interface_socket_from_handle_get>
   1e88c:	4607      	mov	r7, r0
   1e88e:	bb16      	cbnz	r6, 1e8d6 <at_interface_open+0x8a>
   1e890:	2304      	movs	r3, #4
   1e892:	9802      	ldr	r0, [sp, #8]
   1e894:	2105      	movs	r1, #5
   1e896:	7246      	strb	r6, [r0, #9]
   1e898:	7286      	strb	r6, [r0, #10]
   1e89a:	72c6      	strb	r6, [r0, #11]
   1e89c:	7203      	strb	r3, [r0, #8]
   1e89e:	60c4      	str	r4, [r0, #12]
   1e8a0:	f003 fb0e 	bl	21ec0 <rpc_at_client_request_send>
   1e8a4:	4606      	mov	r6, r0
   1e8a6:	bb60      	cbnz	r0, 1e902 <at_interface_open+0xb6>
   1e8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e8aa:	ab04      	add	r3, sp, #16
   1e8ac:	2a00      	cmp	r2, #0
   1e8ae:	bf08      	it	eq
   1e8b0:	f04f 32ff 	moveq.w	r2, #4294967295
   1e8b4:	4629      	mov	r1, r5
   1e8b6:	f843 2d04 	str.w	r2, [r3, #-4]!
   1e8ba:	4620      	mov	r0, r4
   1e8bc:	462a      	mov	r2, r5
   1e8be:	f003 f973 	bl	21ba8 <interface_socket_wait>
   1e8c2:	4605      	mov	r5, r0
   1e8c4:	b940      	cbnz	r0, 1e8d8 <at_interface_open+0x8c>
   1e8c6:	4620      	mov	r0, r4
   1e8c8:	f003 f9e2 	bl	21c90 <interface_socket_from_handle_get>
   1e8cc:	b180      	cbz	r0, 1e8f0 <at_interface_open+0xa4>
   1e8ce:	6845      	ldr	r5, [r0, #4]
   1e8d0:	b175      	cbz	r5, 1e8f0 <at_interface_open+0xa4>
   1e8d2:	6046      	str	r6, [r0, #4]
   1e8d4:	e000      	b.n	1e8d8 <at_interface_open+0x8c>
   1e8d6:	250c      	movs	r5, #12
   1e8d8:	4620      	mov	r0, r4
   1e8da:	f003 f917 	bl	21b0c <interface_socket_free>
   1e8de:	4628      	mov	r0, r5
   1e8e0:	f7f8 f94e 	bl	16b80 <bsd_os_errno_set>
   1e8e4:	f04f 34ff 	mov.w	r4, #4294967295
   1e8e8:	4620      	mov	r0, r4
   1e8ea:	b004      	add	sp, #16
   1e8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8f0:	4620      	mov	r0, r4
   1e8f2:	9a01      	ldr	r2, [sp, #4]
   1e8f4:	6813      	ldr	r3, [r2, #0]
   1e8f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e8fa:	6013      	str	r3, [r2, #0]
   1e8fc:	b004      	add	sp, #16
   1e8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e902:	9802      	ldr	r0, [sp, #8]
   1e904:	f003 faea 	bl	21edc <rpc_at_client_message_free>
   1e908:	2523      	movs	r5, #35	; 0x23
   1e90a:	e7e5      	b.n	1e8d8 <at_interface_open+0x8c>
   1e90c:	2029      	movs	r0, #41	; 0x29
   1e90e:	f7f8 f937 	bl	16b80 <bsd_os_errno_set>
   1e912:	f04f 34ff 	mov.w	r4, #4294967295
   1e916:	e7e7      	b.n	1e8e8 <at_interface_open+0x9c>
   1e918:	2070      	movs	r0, #112	; 0x70
   1e91a:	f7f8 f931 	bl	16b80 <bsd_os_errno_set>
   1e91e:	f04f 34ff 	mov.w	r4, #4294967295
   1e922:	e7e1      	b.n	1e8e8 <at_interface_open+0x9c>
   1e924:	2002629d 	.word	0x2002629d
   1e928:	0001e735 	.word	0x0001e735

0001e92c <at_interface_close>:
   1e92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e930:	b082      	sub	sp, #8
   1e932:	4606      	mov	r6, r0
   1e934:	f003 f9ac 	bl	21c90 <interface_socket_from_handle_get>
   1e938:	2800      	cmp	r0, #0
   1e93a:	d051      	beq.n	1e9e0 <at_interface_close+0xb4>
   1e93c:	230d      	movs	r3, #13
   1e93e:	6807      	ldr	r7, [r0, #0]
   1e940:	6003      	str	r3, [r0, #0]
   1e942:	6803      	ldr	r3, [r0, #0]
   1e944:	4604      	mov	r4, r0
   1e946:	039b      	lsls	r3, r3, #14
   1e948:	d42e      	bmi.n	1e9a8 <at_interface_close+0x7c>
   1e94a:	2100      	movs	r1, #0
   1e94c:	4668      	mov	r0, sp
   1e94e:	f003 faa3 	bl	21e98 <rpc_at_client_request_alloc>
   1e952:	4605      	mov	r5, r0
   1e954:	4630      	mov	r0, r6
   1e956:	f003 f99b 	bl	21c90 <interface_socket_from_handle_get>
   1e95a:	4680      	mov	r8, r0
   1e95c:	bb75      	cbnz	r5, 1e9bc <at_interface_close+0x90>
   1e95e:	2304      	movs	r3, #4
   1e960:	9800      	ldr	r0, [sp, #0]
   1e962:	2106      	movs	r1, #6
   1e964:	7203      	strb	r3, [r0, #8]
   1e966:	7245      	strb	r5, [r0, #9]
   1e968:	7285      	strb	r5, [r0, #10]
   1e96a:	72c5      	strb	r5, [r0, #11]
   1e96c:	60c6      	str	r6, [r0, #12]
   1e96e:	f003 faa7 	bl	21ec0 <rpc_at_client_request_send>
   1e972:	b9f0      	cbnz	r0, 1e9b2 <at_interface_close+0x86>
   1e974:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   1e978:	220e      	movs	r2, #14
   1e97a:	2900      	cmp	r1, #0
   1e97c:	bf08      	it	eq
   1e97e:	f04f 31ff 	moveq.w	r1, #4294967295
   1e982:	ab02      	add	r3, sp, #8
   1e984:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e988:	4630      	mov	r0, r6
   1e98a:	4611      	mov	r1, r2
   1e98c:	f003 f90c 	bl	21ba8 <interface_socket_wait>
   1e990:	4605      	mov	r5, r0
   1e992:	b1a8      	cbz	r0, 1e9c0 <at_interface_close+0x94>
   1e994:	6027      	str	r7, [r4, #0]
   1e996:	4628      	mov	r0, r5
   1e998:	f04f 35ff 	mov.w	r5, #4294967295
   1e99c:	f7f8 f8f0 	bl	16b80 <bsd_os_errno_set>
   1e9a0:	4628      	mov	r0, r5
   1e9a2:	b002      	add	sp, #8
   1e9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e9a8:	6803      	ldr	r3, [r0, #0]
   1e9aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1e9ae:	6003      	str	r3, [r0, #0]
   1e9b0:	e7cb      	b.n	1e94a <at_interface_close+0x1e>
   1e9b2:	9800      	ldr	r0, [sp, #0]
   1e9b4:	f003 fa92 	bl	21edc <rpc_at_client_message_free>
   1e9b8:	2523      	movs	r5, #35	; 0x23
   1e9ba:	e7eb      	b.n	1e994 <at_interface_close+0x68>
   1e9bc:	250c      	movs	r5, #12
   1e9be:	e7e9      	b.n	1e994 <at_interface_close+0x68>
   1e9c0:	4630      	mov	r0, r6
   1e9c2:	f003 f965 	bl	21c90 <interface_socket_from_handle_get>
   1e9c6:	b120      	cbz	r0, 1e9d2 <at_interface_close+0xa6>
   1e9c8:	6843      	ldr	r3, [r0, #4]
   1e9ca:	b113      	cbz	r3, 1e9d2 <at_interface_close+0xa6>
   1e9cc:	6045      	str	r5, [r0, #4]
   1e9ce:	461d      	mov	r5, r3
   1e9d0:	e7e0      	b.n	1e994 <at_interface_close+0x68>
   1e9d2:	4630      	mov	r0, r6
   1e9d4:	f003 f89a 	bl	21b0c <interface_socket_free>
   1e9d8:	4628      	mov	r0, r5
   1e9da:	b002      	add	sp, #8
   1e9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e9e0:	2516      	movs	r5, #22
   1e9e2:	e7d8      	b.n	1e996 <at_interface_close+0x6a>

0001e9e4 <at_interface_read>:
   1e9e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e9e8:	b087      	sub	sp, #28
   1e9ea:	4688      	mov	r8, r1
   1e9ec:	4615      	mov	r5, r2
   1e9ee:	461e      	mov	r6, r3
   1e9f0:	4607      	mov	r7, r0
   1e9f2:	f003 f94d 	bl	21c90 <interface_socket_from_handle_get>
   1e9f6:	2800      	cmp	r0, #0
   1e9f8:	f000 8084 	beq.w	1eb04 <at_interface_read+0x120>
   1e9fc:	2300      	movs	r3, #0
   1e9fe:	4604      	mov	r4, r0
   1ea00:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1ea04:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1ea08:	2e00      	cmp	r6, #0
   1ea0a:	d12d      	bne.n	1ea68 <at_interface_read+0x84>
   1ea0c:	f016 0502 	ands.w	r5, r6, #2
   1ea10:	d148      	bne.n	1eaa4 <at_interface_read+0xc0>
   1ea12:	46a8      	mov	r8, r5
   1ea14:	6823      	ldr	r3, [r4, #0]
   1ea16:	69e0      	ldr	r0, [r4, #28]
   1ea18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ea1c:	6023      	str	r3, [r4, #0]
   1ea1e:	6803      	ldr	r3, [r0, #0]
   1ea20:	4632      	mov	r2, r6
   1ea22:	689b      	ldr	r3, [r3, #8]
   1ea24:	a902      	add	r1, sp, #8
   1ea26:	4798      	blx	r3
   1ea28:	f1b0 0900 	subs.w	r9, r0, #0
   1ea2c:	da2a      	bge.n	1ea84 <at_interface_read+0xa0>
   1ea2e:	2d00      	cmp	r5, #0
   1ea30:	d15e      	bne.n	1eaf0 <at_interface_read+0x10c>
   1ea32:	6a25      	ldr	r5, [r4, #32]
   1ea34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ea38:	2d00      	cmp	r5, #0
   1ea3a:	bf08      	it	eq
   1ea3c:	f04f 35ff 	moveq.w	r5, #4294967295
   1ea40:	4611      	mov	r1, r2
   1ea42:	ab01      	add	r3, sp, #4
   1ea44:	4638      	mov	r0, r7
   1ea46:	9501      	str	r5, [sp, #4]
   1ea48:	f003 f8ae 	bl	21ba8 <interface_socket_wait>
   1ea4c:	4605      	mov	r5, r0
   1ea4e:	2800      	cmp	r0, #0
   1ea50:	d1e0      	bne.n	1ea14 <at_interface_read+0x30>
   1ea52:	4638      	mov	r0, r7
   1ea54:	f003 f91c 	bl	21c90 <interface_socket_from_handle_get>
   1ea58:	2800      	cmp	r0, #0
   1ea5a:	d0db      	beq.n	1ea14 <at_interface_read+0x30>
   1ea5c:	6845      	ldr	r5, [r0, #4]
   1ea5e:	2d00      	cmp	r5, #0
   1ea60:	d0d8      	beq.n	1ea14 <at_interface_read+0x30>
   1ea62:	f8c0 8004 	str.w	r8, [r0, #4]
   1ea66:	e7d5      	b.n	1ea14 <at_interface_read+0x30>
   1ea68:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1ea6c:	d1ce      	bne.n	1ea0c <at_interface_read+0x28>
   1ea6e:	252d      	movs	r5, #45	; 0x2d
   1ea70:	f04f 39ff 	mov.w	r9, #4294967295
   1ea74:	4628      	mov	r0, r5
   1ea76:	f7f8 f883 	bl	16b80 <bsd_os_errno_set>
   1ea7a:	4648      	mov	r0, r9
   1ea7c:	b007      	add	sp, #28
   1ea7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ea82:	2500      	movs	r5, #0
   1ea84:	69e0      	ldr	r0, [r4, #28]
   1ea86:	6803      	ldr	r3, [r0, #0]
   1ea88:	68db      	ldr	r3, [r3, #12]
   1ea8a:	4798      	blx	r3
   1ea8c:	3001      	adds	r0, #1
   1ea8e:	d003      	beq.n	1ea98 <at_interface_read+0xb4>
   1ea90:	6823      	ldr	r3, [r4, #0]
   1ea92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ea96:	6023      	str	r3, [r4, #0]
   1ea98:	2d00      	cmp	r5, #0
   1ea9a:	d1eb      	bne.n	1ea74 <at_interface_read+0x90>
   1ea9c:	4648      	mov	r0, r9
   1ea9e:	b007      	add	sp, #28
   1eaa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1eaa4:	6823      	ldr	r3, [r4, #0]
   1eaa6:	69e0      	ldr	r0, [r4, #28]
   1eaa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1eaac:	6023      	str	r3, [r4, #0]
   1eaae:	6803      	ldr	r3, [r0, #0]
   1eab0:	4632      	mov	r2, r6
   1eab2:	689b      	ldr	r3, [r3, #8]
   1eab4:	a902      	add	r1, sp, #8
   1eab6:	4798      	blx	r3
   1eab8:	f1b0 0900 	subs.w	r9, r0, #0
   1eabc:	dae1      	bge.n	1ea82 <at_interface_read+0x9e>
   1eabe:	69e0      	ldr	r0, [r4, #28]
   1eac0:	f1b9 3fff 	cmp.w	r9, #4294967295
   1eac4:	6803      	ldr	r3, [r0, #0]
   1eac6:	68db      	ldr	r3, [r3, #12]
   1eac8:	d10a      	bne.n	1eae0 <at_interface_read+0xfc>
   1eaca:	2523      	movs	r5, #35	; 0x23
   1eacc:	4798      	blx	r3
   1eace:	3001      	adds	r0, #1
   1ead0:	d0ce      	beq.n	1ea70 <at_interface_read+0x8c>
   1ead2:	6823      	ldr	r3, [r4, #0]
   1ead4:	f04f 39ff 	mov.w	r9, #4294967295
   1ead8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eadc:	6023      	str	r3, [r4, #0]
   1eade:	e7db      	b.n	1ea98 <at_interface_read+0xb4>
   1eae0:	4798      	blx	r3
   1eae2:	3001      	adds	r0, #1
   1eae4:	d0c9      	beq.n	1ea7a <at_interface_read+0x96>
   1eae6:	6823      	ldr	r3, [r4, #0]
   1eae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eaec:	6023      	str	r3, [r4, #0]
   1eaee:	e7c4      	b.n	1ea7a <at_interface_read+0x96>
   1eaf0:	69e0      	ldr	r0, [r4, #28]
   1eaf2:	f1b9 3fff 	cmp.w	r9, #4294967295
   1eaf6:	6803      	ldr	r3, [r0, #0]
   1eaf8:	68db      	ldr	r3, [r3, #12]
   1eafa:	d0e7      	beq.n	1eacc <at_interface_read+0xe8>
   1eafc:	4798      	blx	r3
   1eafe:	3001      	adds	r0, #1
   1eb00:	d1c6      	bne.n	1ea90 <at_interface_read+0xac>
   1eb02:	e7b7      	b.n	1ea74 <at_interface_read+0x90>
   1eb04:	2516      	movs	r5, #22
   1eb06:	e7b3      	b.n	1ea70 <at_interface_read+0x8c>

0001eb08 <at_interface_getopt>:
   1eb08:	f003 b930 	b.w	21d6c <interface_socket_getopt>

0001eb0c <at_interface_setopt>:
   1eb0c:	f003 b8e8 	b.w	21ce0 <interface_socket_setopt>

0001eb10 <rpc_at_event_handler>:
   1eb10:	b570      	push	{r4, r5, r6, lr}
   1eb12:	4606      	mov	r6, r0
   1eb14:	b084      	sub	sp, #16
   1eb16:	68c0      	ldr	r0, [r0, #12]
   1eb18:	460d      	mov	r5, r1
   1eb1a:	f003 f8b9 	bl	21c90 <interface_socket_from_handle_get>
   1eb1e:	4604      	mov	r4, r0
   1eb20:	b348      	cbz	r0, 1eb76 <rpc_at_event_handler+0x66>
   1eb22:	6803      	ldr	r3, [r0, #0]
   1eb24:	b29b      	uxth	r3, r3
   1eb26:	2b01      	cmp	r3, #1
   1eb28:	d01f      	beq.n	1eb6a <rpc_at_event_handler+0x5a>
   1eb2a:	6803      	ldr	r3, [r0, #0]
   1eb2c:	b29b      	uxth	r3, r3
   1eb2e:	2b0d      	cmp	r3, #13
   1eb30:	d029      	beq.n	1eb86 <rpc_at_event_handler+0x76>
   1eb32:	6803      	ldr	r3, [r0, #0]
   1eb34:	b29b      	uxth	r3, r3
   1eb36:	2b02      	cmp	r3, #2
   1eb38:	d02d      	beq.n	1eb96 <rpc_at_event_handler+0x86>
   1eb3a:	3d03      	subs	r5, #3
   1eb3c:	2d01      	cmp	r5, #1
   1eb3e:	d817      	bhi.n	1eb70 <rpc_at_event_handler+0x60>
   1eb40:	2500      	movs	r5, #0
   1eb42:	6873      	ldr	r3, [r6, #4]
   1eb44:	6832      	ldr	r2, [r6, #0]
   1eb46:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1eb4a:	e9cd 2300 	strd	r2, r3, [sp]
   1eb4e:	69e0      	ldr	r0, [r4, #28]
   1eb50:	4669      	mov	r1, sp
   1eb52:	6803      	ldr	r3, [r0, #0]
   1eb54:	685b      	ldr	r3, [r3, #4]
   1eb56:	4798      	blx	r3
   1eb58:	3001      	adds	r0, #1
   1eb5a:	d019      	beq.n	1eb90 <rpc_at_event_handler+0x80>
   1eb5c:	4628      	mov	r0, r5
   1eb5e:	6823      	ldr	r3, [r4, #0]
   1eb60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eb64:	6023      	str	r3, [r4, #0]
   1eb66:	b004      	add	sp, #16
   1eb68:	bd70      	pop	{r4, r5, r6, pc}
   1eb6a:	2d02      	cmp	r5, #2
   1eb6c:	d1e5      	bne.n	1eb3a <rpc_at_event_handler+0x2a>
   1eb6e:	6005      	str	r5, [r0, #0]
   1eb70:	2000      	movs	r0, #0
   1eb72:	b004      	add	sp, #16
   1eb74:	bd70      	pop	{r4, r5, r6, pc}
   1eb76:	6830      	ldr	r0, [r6, #0]
   1eb78:	2800      	cmp	r0, #0
   1eb7a:	d0f9      	beq.n	1eb70 <rpc_at_event_handler+0x60>
   1eb7c:	f003 f9b6 	bl	21eec <rpc_at_client_data_free>
   1eb80:	4620      	mov	r0, r4
   1eb82:	b004      	add	sp, #16
   1eb84:	bd70      	pop	{r4, r5, r6, pc}
   1eb86:	2d02      	cmp	r5, #2
   1eb88:	d1d7      	bne.n	1eb3a <rpc_at_event_handler+0x2a>
   1eb8a:	230e      	movs	r3, #14
   1eb8c:	6003      	str	r3, [r0, #0]
   1eb8e:	e7ef      	b.n	1eb70 <rpc_at_event_handler+0x60>
   1eb90:	2002      	movs	r0, #2
   1eb92:	b004      	add	sp, #16
   1eb94:	bd70      	pop	{r4, r5, r6, pc}
   1eb96:	6803      	ldr	r3, [r0, #0]
   1eb98:	029b      	lsls	r3, r3, #10
   1eb9a:	d5ce      	bpl.n	1eb3a <rpc_at_event_handler+0x2a>
   1eb9c:	2d02      	cmp	r5, #2
   1eb9e:	d1cc      	bne.n	1eb3a <rpc_at_event_handler+0x2a>
   1eba0:	6803      	ldr	r3, [r0, #0]
   1eba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1eba6:	6003      	str	r3, [r0, #0]
   1eba8:	6803      	ldr	r3, [r0, #0]
   1ebaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ebae:	6003      	str	r3, [r0, #0]
   1ebb0:	e7de      	b.n	1eb70 <rpc_at_event_handler+0x60>
   1ebb2:	bf00      	nop

0001ebb4 <ok_rsp_parser>:
   1ebb4:	2000      	movs	r0, #0
   1ebb6:	4770      	bx	lr

0001ebb8 <pdn_state_get_parser>:
   1ebb8:	2200      	movs	r2, #0
   1ebba:	b570      	push	{r4, r5, r6, lr}
   1ebbc:	780b      	ldrb	r3, [r1, #0]
   1ebbe:	b084      	sub	sp, #16
   1ebc0:	460e      	mov	r6, r1
   1ebc2:	e9cd 2200 	strd	r2, r2, [sp]
   1ebc6:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1ebca:	b323      	cbz	r3, 1ec16 <pdn_state_get_parser+0x5e>
   1ebcc:	460c      	mov	r4, r1
   1ebce:	2b20      	cmp	r3, #32
   1ebd0:	460d      	mov	r5, r1
   1ebd2:	d01b      	beq.n	1ec0c <pdn_state_get_parser+0x54>
   1ebd4:	700b      	strb	r3, [r1, #0]
   1ebd6:	3201      	adds	r2, #1
   1ebd8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ebdc:	18b1      	adds	r1, r6, r2
   1ebde:	460d      	mov	r5, r1
   1ebe0:	2b00      	cmp	r3, #0
   1ebe2:	d1f4      	bne.n	1ebce <pdn_state_get_parser+0x16>
   1ebe4:	2200      	movs	r2, #0
   1ebe6:	4b0d      	ldr	r3, [pc, #52]	; (1ec1c <pdn_state_get_parser+0x64>)
   1ebe8:	702a      	strb	r2, [r5, #0]
   1ebea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ebee:	4a0c      	ldr	r2, [pc, #48]	; (1ec20 <pdn_state_get_parser+0x68>)
   1ebf0:	681b      	ldr	r3, [r3, #0]
   1ebf2:	2110      	movs	r1, #16
   1ebf4:	4668      	mov	r0, sp
   1ebf6:	f007 fe8f 	bl	26918 <snprintf>
   1ebfa:	4669      	mov	r1, sp
   1ebfc:	4630      	mov	r0, r6
   1ebfe:	f008 fa25 	bl	2704c <strstr>
   1ec02:	3000      	adds	r0, #0
   1ec04:	bf18      	it	ne
   1ec06:	2001      	movne	r0, #1
   1ec08:	b004      	add	sp, #16
   1ec0a:	bd70      	pop	{r4, r5, r6, pc}
   1ec0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ec10:	2b00      	cmp	r3, #0
   1ec12:	d1dc      	bne.n	1ebce <pdn_state_get_parser+0x16>
   1ec14:	e7e6      	b.n	1ebe4 <pdn_state_get_parser+0x2c>
   1ec16:	460d      	mov	r5, r1
   1ec18:	e7e4      	b.n	1ebe4 <pdn_state_get_parser+0x2c>
   1ec1a:	bf00      	nop
   1ec1c:	20021bc0 	.word	0x20021bc0
   1ec20:	0002f768 	.word	0x0002f768

0001ec24 <pdn_id_get_parser>:
   1ec24:	b570      	push	{r4, r5, r6, lr}
   1ec26:	780b      	ldrb	r3, [r1, #0]
   1ec28:	4606      	mov	r6, r0
   1ec2a:	b313      	cbz	r3, 1ec72 <pdn_id_get_parser+0x4e>
   1ec2c:	4608      	mov	r0, r1
   1ec2e:	2400      	movs	r4, #0
   1ec30:	460a      	mov	r2, r1
   1ec32:	2b20      	cmp	r3, #32
   1ec34:	4615      	mov	r5, r2
   1ec36:	d017      	beq.n	1ec68 <pdn_id_get_parser+0x44>
   1ec38:	7013      	strb	r3, [r2, #0]
   1ec3a:	3401      	adds	r4, #1
   1ec3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec40:	190a      	adds	r2, r1, r4
   1ec42:	4615      	mov	r5, r2
   1ec44:	2b00      	cmp	r3, #0
   1ec46:	d1f4      	bne.n	1ec32 <pdn_id_get_parser+0xe>
   1ec48:	2300      	movs	r3, #0
   1ec4a:	4608      	mov	r0, r1
   1ec4c:	702b      	strb	r3, [r5, #0]
   1ec4e:	213a      	movs	r1, #58	; 0x3a
   1ec50:	f007 ff3c 	bl	26acc <strchr>
   1ec54:	b130      	cbz	r0, 1ec64 <pdn_id_get_parser+0x40>
   1ec56:	3001      	adds	r0, #1
   1ec58:	f007 f88c 	bl	25d74 <atoi>
   1ec5c:	4b06      	ldr	r3, [pc, #24]	; (1ec78 <pdn_id_get_parser+0x54>)
   1ec5e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1ec62:	6058      	str	r0, [r3, #4]
   1ec64:	2000      	movs	r0, #0
   1ec66:	bd70      	pop	{r4, r5, r6, pc}
   1ec68:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec6c:	2b00      	cmp	r3, #0
   1ec6e:	d1e0      	bne.n	1ec32 <pdn_id_get_parser+0xe>
   1ec70:	e7ea      	b.n	1ec48 <pdn_id_get_parser+0x24>
   1ec72:	460d      	mov	r5, r1
   1ec74:	e7e8      	b.n	1ec48 <pdn_id_get_parser+0x24>
   1ec76:	bf00      	nop
   1ec78:	20021bc0 	.word	0x20021bc0

0001ec7c <context_create_parser>:
   1ec7c:	b570      	push	{r4, r5, r6, lr}
   1ec7e:	780b      	ldrb	r3, [r1, #0]
   1ec80:	4606      	mov	r6, r0
   1ec82:	b313      	cbz	r3, 1ecca <context_create_parser+0x4e>
   1ec84:	4608      	mov	r0, r1
   1ec86:	2400      	movs	r4, #0
   1ec88:	460a      	mov	r2, r1
   1ec8a:	2b20      	cmp	r3, #32
   1ec8c:	4615      	mov	r5, r2
   1ec8e:	d017      	beq.n	1ecc0 <context_create_parser+0x44>
   1ec90:	7013      	strb	r3, [r2, #0]
   1ec92:	3401      	adds	r4, #1
   1ec94:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec98:	190a      	adds	r2, r1, r4
   1ec9a:	4615      	mov	r5, r2
   1ec9c:	2b00      	cmp	r3, #0
   1ec9e:	d1f4      	bne.n	1ec8a <context_create_parser+0xe>
   1eca0:	2300      	movs	r3, #0
   1eca2:	4608      	mov	r0, r1
   1eca4:	702b      	strb	r3, [r5, #0]
   1eca6:	213a      	movs	r1, #58	; 0x3a
   1eca8:	f007 ff10 	bl	26acc <strchr>
   1ecac:	b130      	cbz	r0, 1ecbc <context_create_parser+0x40>
   1ecae:	4b08      	ldr	r3, [pc, #32]	; (1ecd0 <context_create_parser+0x54>)
   1ecb0:	3001      	adds	r0, #1
   1ecb2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1ecb6:	f007 f85d 	bl	25d74 <atoi>
   1ecba:	6020      	str	r0, [r4, #0]
   1ecbc:	2000      	movs	r0, #0
   1ecbe:	bd70      	pop	{r4, r5, r6, pc}
   1ecc0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ecc4:	2b00      	cmp	r3, #0
   1ecc6:	d1e0      	bne.n	1ec8a <context_create_parser+0xe>
   1ecc8:	e7ea      	b.n	1eca0 <context_create_parser+0x24>
   1ecca:	460d      	mov	r5, r1
   1eccc:	e7e8      	b.n	1eca0 <context_create_parser+0x24>
   1ecce:	bf00      	nop
   1ecd0:	20021bc0 	.word	0x20021bc0

0001ecd4 <pdn_interface_init>:
   1ecd4:	f04f 33ff 	mov.w	r3, #4294967295
   1ecd8:	b510      	push	{r4, lr}
   1ecda:	4c0b      	ldr	r4, [pc, #44]	; (1ed08 <pdn_interface_init+0x34>)
   1ecdc:	2228      	movs	r2, #40	; 0x28
   1ecde:	2100      	movs	r1, #0
   1ece0:	480a      	ldr	r0, [pc, #40]	; (1ed0c <pdn_interface_init+0x38>)
   1ece2:	6023      	str	r3, [r4, #0]
   1ece4:	f007 fba8 	bl	26438 <memset>
   1ece8:	f240 2201 	movw	r2, #513	; 0x201
   1ecec:	2102      	movs	r1, #2
   1ecee:	2066      	movs	r0, #102	; 0x66
   1ecf0:	f7ff fdac 	bl	1e84c <at_interface_open>
   1ecf4:	2800      	cmp	r0, #0
   1ecf6:	6020      	str	r0, [r4, #0]
   1ecf8:	db04      	blt.n	1ed04 <pdn_interface_init+0x30>
   1ecfa:	2201      	movs	r2, #1
   1ecfc:	4b04      	ldr	r3, [pc, #16]	; (1ed10 <pdn_interface_init+0x3c>)
   1ecfe:	2000      	movs	r0, #0
   1ed00:	701a      	strb	r2, [r3, #0]
   1ed02:	bd10      	pop	{r4, pc}
   1ed04:	2003      	movs	r0, #3
   1ed06:	bd10      	pop	{r4, pc}
   1ed08:	20021abc 	.word	0x20021abc
   1ed0c:	20021bc0 	.word	0x20021bc0
   1ed10:	2002629e 	.word	0x2002629e

0001ed14 <pdn_interface_open>:
   1ed14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ed18:	4b68      	ldr	r3, [pc, #416]	; (1eebc <pdn_interface_open+0x1a8>)
   1ed1a:	b083      	sub	sp, #12
   1ed1c:	781b      	ldrb	r3, [r3, #0]
   1ed1e:	2b00      	cmp	r3, #0
   1ed20:	f000 80c5 	beq.w	1eeae <pdn_interface_open+0x19a>
   1ed24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ed28:	f040 80b0 	bne.w	1ee8c <pdn_interface_open+0x178>
   1ed2c:	4c64      	ldr	r4, [pc, #400]	; (1eec0 <pdn_interface_open+0x1ac>)
   1ed2e:	6825      	ldr	r5, [r4, #0]
   1ed30:	b34d      	cbz	r5, 1ed86 <pdn_interface_open+0x72>
   1ed32:	6863      	ldr	r3, [r4, #4]
   1ed34:	2b00      	cmp	r3, #0
   1ed36:	f000 809b 	beq.w	1ee70 <pdn_interface_open+0x15c>
   1ed3a:	68a3      	ldr	r3, [r4, #8]
   1ed3c:	2b00      	cmp	r3, #0
   1ed3e:	f000 8099 	beq.w	1ee74 <pdn_interface_open+0x160>
   1ed42:	68e3      	ldr	r3, [r4, #12]
   1ed44:	2b00      	cmp	r3, #0
   1ed46:	f000 8097 	beq.w	1ee78 <pdn_interface_open+0x164>
   1ed4a:	6923      	ldr	r3, [r4, #16]
   1ed4c:	2b00      	cmp	r3, #0
   1ed4e:	f000 8095 	beq.w	1ee7c <pdn_interface_open+0x168>
   1ed52:	6963      	ldr	r3, [r4, #20]
   1ed54:	2b00      	cmp	r3, #0
   1ed56:	f000 8093 	beq.w	1ee80 <pdn_interface_open+0x16c>
   1ed5a:	69a3      	ldr	r3, [r4, #24]
   1ed5c:	2b00      	cmp	r3, #0
   1ed5e:	f000 8091 	beq.w	1ee84 <pdn_interface_open+0x170>
   1ed62:	69e3      	ldr	r3, [r4, #28]
   1ed64:	2b00      	cmp	r3, #0
   1ed66:	f000 808f 	beq.w	1ee88 <pdn_interface_open+0x174>
   1ed6a:	6a23      	ldr	r3, [r4, #32]
   1ed6c:	b153      	cbz	r3, 1ed84 <pdn_interface_open+0x70>
   1ed6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ed70:	2509      	movs	r5, #9
   1ed72:	b143      	cbz	r3, 1ed86 <pdn_interface_open+0x72>
   1ed74:	200c      	movs	r0, #12
   1ed76:	f7f7 ff03 	bl	16b80 <bsd_os_errno_set>
   1ed7a:	f04f 30ff 	mov.w	r0, #4294967295
   1ed7e:	b003      	add	sp, #12
   1ed80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed84:	2508      	movs	r5, #8
   1ed86:	2020      	movs	r0, #32
   1ed88:	f002 fa7a 	bl	21280 <nrf_malloc>
   1ed8c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1ed90:	2800      	cmp	r0, #0
   1ed92:	d0ef      	beq.n	1ed74 <pdn_interface_open+0x60>
   1ed94:	2220      	movs	r2, #32
   1ed96:	2100      	movs	r1, #0
   1ed98:	f007 fb4e 	bl	26438 <memset>
   1ed9c:	2101      	movs	r1, #1
   1ed9e:	2003      	movs	r0, #3
   1eda0:	f04f 37ff 	mov.w	r7, #4294967295
   1eda4:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   1eda8:	4b46      	ldr	r3, [pc, #280]	; (1eec4 <pdn_interface_open+0x1b0>)
   1edaa:	6091      	str	r1, [r2, #8]
   1edac:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   1edb0:	4a45      	ldr	r2, [pc, #276]	; (1eec8 <pdn_interface_open+0x1b4>)
   1edb2:	60c8      	str	r0, [r1, #12]
   1edb4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1edb8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1edbc:	6047      	str	r7, [r0, #4]
   1edbe:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1eed8 <pdn_interface_open+0x1c4>
   1edc2:	4842      	ldr	r0, [pc, #264]	; (1eecc <pdn_interface_open+0x1b8>)
   1edc4:	f007 fda8 	bl	26918 <snprintf>
   1edc8:	4840      	ldr	r0, [pc, #256]	; (1eecc <pdn_interface_open+0x1b8>)
   1edca:	f8d8 9000 	ldr.w	r9, [r8]
   1edce:	2600      	movs	r6, #0
   1edd0:	f007 ff42 	bl	26c58 <strlen>
   1edd4:	4633      	mov	r3, r6
   1edd6:	4602      	mov	r2, r0
   1edd8:	493c      	ldr	r1, [pc, #240]	; (1eecc <pdn_interface_open+0x1b8>)
   1edda:	4648      	mov	r0, r9
   1eddc:	9601      	str	r6, [sp, #4]
   1edde:	9600      	str	r6, [sp, #0]
   1ede0:	f7ff fcac 	bl	1e73c <at_interface_write>
   1ede4:	4681      	mov	r9, r0
   1ede6:	4839      	ldr	r0, [pc, #228]	; (1eecc <pdn_interface_open+0x1b8>)
   1ede8:	f007 ff36 	bl	26c58 <strlen>
   1edec:	4548      	cmp	r0, r9
   1edee:	d153      	bne.n	1ee98 <pdn_interface_open+0x184>
   1edf0:	4633      	mov	r3, r6
   1edf2:	e9cd 6600 	strd	r6, r6, [sp]
   1edf6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1edfa:	4934      	ldr	r1, [pc, #208]	; (1eecc <pdn_interface_open+0x1b8>)
   1edfc:	f8d8 0000 	ldr.w	r0, [r8]
   1ee00:	f7ff fdf0 	bl	1e9e4 <at_interface_read>
   1ee04:	4606      	mov	r6, r0
   1ee06:	4832      	ldr	r0, [pc, #200]	; (1eed0 <pdn_interface_open+0x1bc>)
   1ee08:	f007 ff26 	bl	26c58 <strlen>
   1ee0c:	4286      	cmp	r6, r0
   1ee0e:	db15      	blt.n	1ee3c <pdn_interface_open+0x128>
   1ee10:	4602      	mov	r2, r0
   1ee12:	492e      	ldr	r1, [pc, #184]	; (1eecc <pdn_interface_open+0x1b8>)
   1ee14:	482e      	ldr	r0, [pc, #184]	; (1eed0 <pdn_interface_open+0x1bc>)
   1ee16:	f007 ff4d 	bl	26cb4 <strncmp>
   1ee1a:	b978      	cbnz	r0, 1ee3c <pdn_interface_open+0x128>
   1ee1c:	492b      	ldr	r1, [pc, #172]	; (1eecc <pdn_interface_open+0x1b8>)
   1ee1e:	4628      	mov	r0, r5
   1ee20:	f7ff ff2c 	bl	1ec7c <context_create_parser>
   1ee24:	b9b0      	cbnz	r0, 1ee54 <pdn_interface_open+0x140>
   1ee26:	2202      	movs	r2, #2
   1ee28:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1ee2c:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1ee30:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1ee34:	609a      	str	r2, [r3, #8]
   1ee36:	b003      	add	sp, #12
   1ee38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ee3c:	4825      	ldr	r0, [pc, #148]	; (1eed4 <pdn_interface_open+0x1c0>)
   1ee3e:	f007 ff0b 	bl	26c58 <strlen>
   1ee42:	4922      	ldr	r1, [pc, #136]	; (1eecc <pdn_interface_open+0x1b8>)
   1ee44:	4602      	mov	r2, r0
   1ee46:	4823      	ldr	r0, [pc, #140]	; (1eed4 <pdn_interface_open+0x1c0>)
   1ee48:	f007 ff34 	bl	26cb4 <strncmp>
   1ee4c:	b960      	cbnz	r0, 1ee68 <pdn_interface_open+0x154>
   1ee4e:	2008      	movs	r0, #8
   1ee50:	f7f7 fe96 	bl	16b80 <bsd_os_errno_set>
   1ee54:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ee58:	f002 fa1c 	bl	21294 <nrf_free>
   1ee5c:	2300      	movs	r3, #0
   1ee5e:	f04f 30ff 	mov.w	r0, #4294967295
   1ee62:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1ee66:	e78a      	b.n	1ed7e <pdn_interface_open+0x6a>
   1ee68:	2005      	movs	r0, #5
   1ee6a:	f7f7 fe89 	bl	16b80 <bsd_os_errno_set>
   1ee6e:	e7f1      	b.n	1ee54 <pdn_interface_open+0x140>
   1ee70:	2501      	movs	r5, #1
   1ee72:	e788      	b.n	1ed86 <pdn_interface_open+0x72>
   1ee74:	2502      	movs	r5, #2
   1ee76:	e786      	b.n	1ed86 <pdn_interface_open+0x72>
   1ee78:	2503      	movs	r5, #3
   1ee7a:	e784      	b.n	1ed86 <pdn_interface_open+0x72>
   1ee7c:	2504      	movs	r5, #4
   1ee7e:	e782      	b.n	1ed86 <pdn_interface_open+0x72>
   1ee80:	2505      	movs	r5, #5
   1ee82:	e780      	b.n	1ed86 <pdn_interface_open+0x72>
   1ee84:	2506      	movs	r5, #6
   1ee86:	e77e      	b.n	1ed86 <pdn_interface_open+0x72>
   1ee88:	2507      	movs	r5, #7
   1ee8a:	e77c      	b.n	1ed86 <pdn_interface_open+0x72>
   1ee8c:	2029      	movs	r0, #41	; 0x29
   1ee8e:	f7f7 fe77 	bl	16b80 <bsd_os_errno_set>
   1ee92:	f04f 30ff 	mov.w	r0, #4294967295
   1ee96:	e772      	b.n	1ed7e <pdn_interface_open+0x6a>
   1ee98:	2005      	movs	r0, #5
   1ee9a:	f7f7 fe71 	bl	16b80 <bsd_os_errno_set>
   1ee9e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1eea2:	f002 f9f7 	bl	21294 <nrf_free>
   1eea6:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1eeaa:	4638      	mov	r0, r7
   1eeac:	e767      	b.n	1ed7e <pdn_interface_open+0x6a>
   1eeae:	2070      	movs	r0, #112	; 0x70
   1eeb0:	f7f7 fe66 	bl	16b80 <bsd_os_errno_set>
   1eeb4:	f04f 30ff 	mov.w	r0, #4294967295
   1eeb8:	e761      	b.n	1ed7e <pdn_interface_open+0x6a>
   1eeba:	bf00      	nop
   1eebc:	2002629e 	.word	0x2002629e
   1eec0:	20021bc0 	.word	0x20021bc0
   1eec4:	0002f744 	.word	0x0002f744
   1eec8:	0002f750 	.word	0x0002f750
   1eecc:	20021ac0 	.word	0x20021ac0
   1eed0:	0002f754 	.word	0x0002f754
   1eed4:	0002f760 	.word	0x0002f760
   1eed8:	20021abc 	.word	0x20021abc

0001eedc <pdn_interface_connect>:
   1eedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eee0:	b085      	sub	sp, #20
   1eee2:	2900      	cmp	r1, #0
   1eee4:	f000 81f3 	beq.w	1f2ce <pdn_interface_connect+0x3f2>
   1eee8:	2a64      	cmp	r2, #100	; 0x64
   1eeea:	4690      	mov	r8, r2
   1eeec:	f200 81ef 	bhi.w	1f2ce <pdn_interface_connect+0x3f2>
   1eef0:	0c03      	lsrs	r3, r0, #16
   1eef2:	4ab1      	ldr	r2, [pc, #708]	; (1f1b8 <pdn_interface_connect+0x2dc>)
   1eef4:	041b      	lsls	r3, r3, #16
   1eef6:	4293      	cmp	r3, r2
   1eef8:	f040 8154 	bne.w	1f1a4 <pdn_interface_connect+0x2c8>
   1eefc:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1ef00:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1ef04:	2c09      	cmp	r4, #9
   1ef06:	f300 814d 	bgt.w	1f1a4 <pdn_interface_connect+0x2c8>
   1ef0a:	4fac      	ldr	r7, [pc, #688]	; (1f1bc <pdn_interface_connect+0x2e0>)
   1ef0c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ef10:	2b00      	cmp	r3, #0
   1ef12:	f000 8147 	beq.w	1f1a4 <pdn_interface_connect+0x2c8>
   1ef16:	689a      	ldr	r2, [r3, #8]
   1ef18:	2a00      	cmp	r2, #0
   1ef1a:	f000 8143 	beq.w	1f1a4 <pdn_interface_connect+0x2c8>
   1ef1e:	689b      	ldr	r3, [r3, #8]
   1ef20:	2b02      	cmp	r3, #2
   1ef22:	f040 813f 	bne.w	1f1a4 <pdn_interface_connect+0x2c8>
   1ef26:	4da6      	ldr	r5, [pc, #664]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1ef28:	4ba6      	ldr	r3, [pc, #664]	; (1f1c4 <pdn_interface_connect+0x2e8>)
   1ef2a:	4aa7      	ldr	r2, [pc, #668]	; (1f1c8 <pdn_interface_connect+0x2ec>)
   1ef2c:	4689      	mov	r9, r1
   1ef2e:	4628      	mov	r0, r5
   1ef30:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ef34:	f007 fcf0 	bl	26918 <snprintf>
   1ef38:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ef3c:	4606      	mov	r6, r0
   1ef3e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1ef42:	681b      	ldr	r3, [r3, #0]
   1ef44:	4aa1      	ldr	r2, [pc, #644]	; (1f1cc <pdn_interface_connect+0x2f0>)
   1ef46:	1828      	adds	r0, r5, r0
   1ef48:	f007 fce6 	bl	26918 <snprintf>
   1ef4c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ef50:	4406      	add	r6, r0
   1ef52:	68db      	ldr	r3, [r3, #12]
   1ef54:	f003 0203 	and.w	r2, r3, #3
   1ef58:	2a03      	cmp	r2, #3
   1ef5a:	f000 811a 	beq.w	1f192 <pdn_interface_connect+0x2b6>
   1ef5e:	079b      	lsls	r3, r3, #30
   1ef60:	bf4c      	ite	mi
   1ef62:	4b9b      	ldrmi	r3, [pc, #620]	; (1f1d0 <pdn_interface_connect+0x2f4>)
   1ef64:	4b9b      	ldrpl	r3, [pc, #620]	; (1f1d4 <pdn_interface_connect+0x2f8>)
   1ef66:	19a8      	adds	r0, r5, r6
   1ef68:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1ef6c:	4a9a      	ldr	r2, [pc, #616]	; (1f1d8 <pdn_interface_connect+0x2fc>)
   1ef6e:	f007 fcd3 	bl	26918 <snprintf>
   1ef72:	1833      	adds	r3, r6, r0
   1ef74:	eb08 0203 	add.w	r2, r8, r3
   1ef78:	2afd      	cmp	r2, #253	; 0xfd
   1ef7a:	f300 81a5 	bgt.w	1f2c8 <pdn_interface_connect+0x3ec>
   1ef7e:	2122      	movs	r1, #34	; 0x22
   1ef80:	1c5e      	adds	r6, r3, #1
   1ef82:	54e9      	strb	r1, [r5, r3]
   1ef84:	4642      	mov	r2, r8
   1ef86:	19a8      	adds	r0, r5, r6
   1ef88:	4649      	mov	r1, r9
   1ef8a:	f007 fecd 	bl	26d28 <strncpy>
   1ef8e:	eb08 0306 	add.w	r3, r8, r6
   1ef92:	18ea      	adds	r2, r5, r3
   1ef94:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1ef98:	b902      	cbnz	r2, 1ef9c <pdn_interface_connect+0xc0>
   1ef9a:	3b01      	subs	r3, #1
   1ef9c:	2600      	movs	r6, #0
   1ef9e:	2122      	movs	r1, #34	; 0x22
   1efa0:	18ea      	adds	r2, r5, r3
   1efa2:	f8df a254 	ldr.w	sl, [pc, #596]	; 1f1f8 <pdn_interface_connect+0x31c>
   1efa6:	54e9      	strb	r1, [r5, r3]
   1efa8:	4885      	ldr	r0, [pc, #532]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1efaa:	7056      	strb	r6, [r2, #1]
   1efac:	f8da b000 	ldr.w	fp, [sl]
   1efb0:	f007 fe52 	bl	26c58 <strlen>
   1efb4:	4633      	mov	r3, r6
   1efb6:	4602      	mov	r2, r0
   1efb8:	4981      	ldr	r1, [pc, #516]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1efba:	4658      	mov	r0, fp
   1efbc:	9601      	str	r6, [sp, #4]
   1efbe:	9600      	str	r6, [sp, #0]
   1efc0:	f7ff fbbc 	bl	1e73c <at_interface_write>
   1efc4:	4683      	mov	fp, r0
   1efc6:	487e      	ldr	r0, [pc, #504]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1efc8:	f007 fe46 	bl	26c58 <strlen>
   1efcc:	4558      	cmp	r0, fp
   1efce:	d008      	beq.n	1efe2 <pdn_interface_connect+0x106>
   1efd0:	2005      	movs	r0, #5
   1efd2:	f7f7 fdd5 	bl	16b80 <bsd_os_errno_set>
   1efd6:	f04f 3bff 	mov.w	fp, #4294967295
   1efda:	4658      	mov	r0, fp
   1efdc:	b005      	add	sp, #20
   1efde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efe2:	4633      	mov	r3, r6
   1efe4:	e9cd 6600 	strd	r6, r6, [sp]
   1efe8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1efec:	4974      	ldr	r1, [pc, #464]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1efee:	f8da 0000 	ldr.w	r0, [sl]
   1eff2:	f7ff fcf7 	bl	1e9e4 <at_interface_read>
   1eff6:	4606      	mov	r6, r0
   1eff8:	4878      	ldr	r0, [pc, #480]	; (1f1dc <pdn_interface_connect+0x300>)
   1effa:	f007 fe2d 	bl	26c58 <strlen>
   1effe:	4286      	cmp	r6, r0
   1f000:	da0f      	bge.n	1f022 <pdn_interface_connect+0x146>
   1f002:	4877      	ldr	r0, [pc, #476]	; (1f1e0 <pdn_interface_connect+0x304>)
   1f004:	f007 fe28 	bl	26c58 <strlen>
   1f008:	496d      	ldr	r1, [pc, #436]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f00a:	4602      	mov	r2, r0
   1f00c:	4874      	ldr	r0, [pc, #464]	; (1f1e0 <pdn_interface_connect+0x304>)
   1f00e:	f007 fe51 	bl	26cb4 <strncmp>
   1f012:	2800      	cmp	r0, #0
   1f014:	d1dc      	bne.n	1efd0 <pdn_interface_connect+0xf4>
   1f016:	2008      	movs	r0, #8
   1f018:	f7f7 fdb2 	bl	16b80 <bsd_os_errno_set>
   1f01c:	f04f 3bff 	mov.w	fp, #4294967295
   1f020:	e7db      	b.n	1efda <pdn_interface_connect+0xfe>
   1f022:	4602      	mov	r2, r0
   1f024:	4966      	ldr	r1, [pc, #408]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f026:	486d      	ldr	r0, [pc, #436]	; (1f1dc <pdn_interface_connect+0x300>)
   1f028:	f007 fe44 	bl	26cb4 <strncmp>
   1f02c:	2800      	cmp	r0, #0
   1f02e:	d1e8      	bne.n	1f002 <pdn_interface_connect+0x126>
   1f030:	4963      	ldr	r1, [pc, #396]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f032:	4620      	mov	r0, r4
   1f034:	f7ff fdbe 	bl	1ebb4 <ok_rsp_parser>
   1f038:	4683      	mov	fp, r0
   1f03a:	2800      	cmp	r0, #0
   1f03c:	d1cd      	bne.n	1efda <pdn_interface_connect+0xfe>
   1f03e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f042:	7c1b      	ldrb	r3, [r3, #16]
   1f044:	2b00      	cmp	r3, #0
   1f046:	f040 80d9 	bne.w	1f1fc <pdn_interface_connect+0x320>
   1f04a:	4b66      	ldr	r3, [pc, #408]	; (1f1e4 <pdn_interface_connect+0x308>)
   1f04c:	4a5e      	ldr	r2, [pc, #376]	; (1f1c8 <pdn_interface_connect+0x2ec>)
   1f04e:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f052:	485b      	ldr	r0, [pc, #364]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f054:	f007 fc60 	bl	26918 <snprintf>
   1f058:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f05c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f060:	4a61      	ldr	r2, [pc, #388]	; (1f1e8 <pdn_interface_connect+0x30c>)
   1f062:	681b      	ldr	r3, [r3, #0]
   1f064:	4428      	add	r0, r5
   1f066:	f007 fc57 	bl	26918 <snprintf>
   1f06a:	f8da 3000 	ldr.w	r3, [sl]
   1f06e:	4854      	ldr	r0, [pc, #336]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f070:	2600      	movs	r6, #0
   1f072:	9303      	str	r3, [sp, #12]
   1f074:	f007 fdf0 	bl	26c58 <strlen>
   1f078:	9b03      	ldr	r3, [sp, #12]
   1f07a:	4602      	mov	r2, r0
   1f07c:	4950      	ldr	r1, [pc, #320]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f07e:	4618      	mov	r0, r3
   1f080:	9601      	str	r6, [sp, #4]
   1f082:	4633      	mov	r3, r6
   1f084:	9600      	str	r6, [sp, #0]
   1f086:	f7ff fb59 	bl	1e73c <at_interface_write>
   1f08a:	9003      	str	r0, [sp, #12]
   1f08c:	484c      	ldr	r0, [pc, #304]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f08e:	f007 fde3 	bl	26c58 <strlen>
   1f092:	9b03      	ldr	r3, [sp, #12]
   1f094:	4298      	cmp	r0, r3
   1f096:	d19b      	bne.n	1efd0 <pdn_interface_connect+0xf4>
   1f098:	4633      	mov	r3, r6
   1f09a:	e9cd 6600 	strd	r6, r6, [sp]
   1f09e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f0a2:	4947      	ldr	r1, [pc, #284]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f0a4:	f8da 0000 	ldr.w	r0, [sl]
   1f0a8:	f7ff fc9c 	bl	1e9e4 <at_interface_read>
   1f0ac:	4606      	mov	r6, r0
   1f0ae:	484b      	ldr	r0, [pc, #300]	; (1f1dc <pdn_interface_connect+0x300>)
   1f0b0:	f007 fdd2 	bl	26c58 <strlen>
   1f0b4:	4286      	cmp	r6, r0
   1f0b6:	dba4      	blt.n	1f002 <pdn_interface_connect+0x126>
   1f0b8:	4602      	mov	r2, r0
   1f0ba:	4941      	ldr	r1, [pc, #260]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f0bc:	4847      	ldr	r0, [pc, #284]	; (1f1dc <pdn_interface_connect+0x300>)
   1f0be:	f007 fdf9 	bl	26cb4 <strncmp>
   1f0c2:	4606      	mov	r6, r0
   1f0c4:	2800      	cmp	r0, #0
   1f0c6:	d19c      	bne.n	1f002 <pdn_interface_connect+0x126>
   1f0c8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1f0cc:	f108 0320 	add.w	r3, r8, #32
   1f0d0:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   1f0d4:	4413      	add	r3, r2
   1f0d6:	4419      	add	r1, r3
   1f0d8:	f002 f8e8 	bl	212ac <nrf_realloc>
   1f0dc:	2800      	cmp	r0, #0
   1f0de:	f000 80fc 	beq.w	1f2da <pdn_interface_connect+0x3fe>
   1f0e2:	2303      	movs	r3, #3
   1f0e4:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1f0e8:	6083      	str	r3, [r0, #8]
   1f0ea:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f0ee:	4649      	mov	r1, r9
   1f0f0:	f8c3 801c 	str.w	r8, [r3, #28]
   1f0f4:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   1f0f8:	4642      	mov	r2, r8
   1f0fa:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   1f0fe:	4418      	add	r0, r3
   1f100:	4603      	mov	r3, r0
   1f102:	3320      	adds	r3, #32
   1f104:	eb0c 0003 	add.w	r0, ip, r3
   1f108:	f7ed fd20 	bl	cb4c <memcpy>
   1f10c:	4b37      	ldr	r3, [pc, #220]	; (1f1ec <pdn_interface_connect+0x310>)
   1f10e:	4a2e      	ldr	r2, [pc, #184]	; (1f1c8 <pdn_interface_connect+0x2ec>)
   1f110:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f114:	482a      	ldr	r0, [pc, #168]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f116:	f007 fbff 	bl	26918 <snprintf>
   1f11a:	4601      	mov	r1, r0
   1f11c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f120:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1f124:	681b      	ldr	r3, [r3, #0]
   1f126:	4a30      	ldr	r2, [pc, #192]	; (1f1e8 <pdn_interface_connect+0x30c>)
   1f128:	1828      	adds	r0, r5, r0
   1f12a:	f007 fbf5 	bl	26918 <snprintf>
   1f12e:	4824      	ldr	r0, [pc, #144]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f130:	f8da 5000 	ldr.w	r5, [sl]
   1f134:	f007 fd90 	bl	26c58 <strlen>
   1f138:	4633      	mov	r3, r6
   1f13a:	4602      	mov	r2, r0
   1f13c:	4920      	ldr	r1, [pc, #128]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f13e:	4628      	mov	r0, r5
   1f140:	9601      	str	r6, [sp, #4]
   1f142:	9600      	str	r6, [sp, #0]
   1f144:	f7ff fafa 	bl	1e73c <at_interface_write>
   1f148:	4605      	mov	r5, r0
   1f14a:	481d      	ldr	r0, [pc, #116]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f14c:	f007 fd84 	bl	26c58 <strlen>
   1f150:	42a8      	cmp	r0, r5
   1f152:	f040 80d2 	bne.w	1f2fa <pdn_interface_connect+0x41e>
   1f156:	4633      	mov	r3, r6
   1f158:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f15c:	4918      	ldr	r1, [pc, #96]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f15e:	f8da 0000 	ldr.w	r0, [sl]
   1f162:	e9cd 6600 	strd	r6, r6, [sp]
   1f166:	f7ff fc3d 	bl	1e9e4 <at_interface_read>
   1f16a:	4605      	mov	r5, r0
   1f16c:	4820      	ldr	r0, [pc, #128]	; (1f1f0 <pdn_interface_connect+0x314>)
   1f16e:	f007 fd73 	bl	26c58 <strlen>
   1f172:	4285      	cmp	r5, r0
   1f174:	f2c0 80b4 	blt.w	1f2e0 <pdn_interface_connect+0x404>
   1f178:	4602      	mov	r2, r0
   1f17a:	4911      	ldr	r1, [pc, #68]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f17c:	481c      	ldr	r0, [pc, #112]	; (1f1f0 <pdn_interface_connect+0x314>)
   1f17e:	f007 fd99 	bl	26cb4 <strncmp>
   1f182:	2800      	cmp	r0, #0
   1f184:	f040 80ac 	bne.w	1f2e0 <pdn_interface_connect+0x404>
   1f188:	4620      	mov	r0, r4
   1f18a:	490d      	ldr	r1, [pc, #52]	; (1f1c0 <pdn_interface_connect+0x2e4>)
   1f18c:	f7ff fd4a 	bl	1ec24 <pdn_id_get_parser>
   1f190:	e723      	b.n	1efda <pdn_interface_connect+0xfe>
   1f192:	4b18      	ldr	r3, [pc, #96]	; (1f1f4 <pdn_interface_connect+0x318>)
   1f194:	4a10      	ldr	r2, [pc, #64]	; (1f1d8 <pdn_interface_connect+0x2fc>)
   1f196:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f19a:	19a8      	adds	r0, r5, r6
   1f19c:	f007 fbbc 	bl	26918 <snprintf>
   1f1a0:	1833      	adds	r3, r6, r0
   1f1a2:	e6e7      	b.n	1ef74 <pdn_interface_connect+0x98>
   1f1a4:	f04f 3bff 	mov.w	fp, #4294967295
   1f1a8:	2009      	movs	r0, #9
   1f1aa:	f7f7 fce9 	bl	16b80 <bsd_os_errno_set>
   1f1ae:	4658      	mov	r0, fp
   1f1b0:	b005      	add	sp, #20
   1f1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1b6:	bf00      	nop
   1f1b8:	789a0000 	.word	0x789a0000
   1f1bc:	20021bc0 	.word	0x20021bc0
   1f1c0:	20021ac0 	.word	0x20021ac0
   1f1c4:	0002f6b8 	.word	0x0002f6b8
   1f1c8:	0002f750 	.word	0x0002f750
   1f1cc:	0002f6c4 	.word	0x0002f6c4
   1f1d0:	0002f6d8 	.word	0x0002f6d8
   1f1d4:	0002f6e0 	.word	0x0002f6e0
   1f1d8:	0002f6d0 	.word	0x0002f6d0
   1f1dc:	0002f6e4 	.word	0x0002f6e4
   1f1e0:	0002f760 	.word	0x0002f760
   1f1e4:	0002f704 	.word	0x0002f704
   1f1e8:	0002f710 	.word	0x0002f710
   1f1ec:	0002f714 	.word	0x0002f714
   1f1f0:	0002f724 	.word	0x0002f724
   1f1f4:	0002f6c8 	.word	0x0002f6c8
   1f1f8:	20021abc 	.word	0x20021abc
   1f1fc:	4b41      	ldr	r3, [pc, #260]	; (1f304 <pdn_interface_connect+0x428>)
   1f1fe:	4a42      	ldr	r2, [pc, #264]	; (1f308 <pdn_interface_connect+0x42c>)
   1f200:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f204:	4841      	ldr	r0, [pc, #260]	; (1f30c <pdn_interface_connect+0x430>)
   1f206:	f007 fb87 	bl	26918 <snprintf>
   1f20a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f20e:	4a40      	ldr	r2, [pc, #256]	; (1f310 <pdn_interface_connect+0x434>)
   1f210:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f214:	4606      	mov	r6, r0
   1f216:	681b      	ldr	r3, [r3, #0]
   1f218:	1828      	adds	r0, r5, r0
   1f21a:	f007 fb7d 	bl	26918 <snprintf>
   1f21e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f222:	4406      	add	r6, r0
   1f224:	7c1b      	ldrb	r3, [r3, #16]
   1f226:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f22a:	2b01      	cmp	r3, #1
   1f22c:	bf0c      	ite	eq
   1f22e:	4a39      	ldreq	r2, [pc, #228]	; (1f314 <pdn_interface_connect+0x438>)
   1f230:	4a39      	ldrne	r2, [pc, #228]	; (1f318 <pdn_interface_connect+0x43c>)
   1f232:	19a8      	adds	r0, r5, r6
   1f234:	f007 fb70 	bl	26918 <snprintf>
   1f238:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f23c:	4406      	add	r6, r0
   1f23e:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f242:	4a36      	ldr	r2, [pc, #216]	; (1f31c <pdn_interface_connect+0x440>)
   1f244:	3320      	adds	r3, #32
   1f246:	19a8      	adds	r0, r5, r6
   1f248:	f007 fb66 	bl	26918 <snprintf>
   1f24c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f250:	4430      	add	r0, r6
   1f252:	695a      	ldr	r2, [r3, #20]
   1f254:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f258:	3220      	adds	r2, #32
   1f25a:	4413      	add	r3, r2
   1f25c:	4428      	add	r0, r5
   1f25e:	4a30      	ldr	r2, [pc, #192]	; (1f320 <pdn_interface_connect+0x444>)
   1f260:	f007 fb5a 	bl	26918 <snprintf>
   1f264:	f8da 3000 	ldr.w	r3, [sl]
   1f268:	4828      	ldr	r0, [pc, #160]	; (1f30c <pdn_interface_connect+0x430>)
   1f26a:	2600      	movs	r6, #0
   1f26c:	9303      	str	r3, [sp, #12]
   1f26e:	f007 fcf3 	bl	26c58 <strlen>
   1f272:	9b03      	ldr	r3, [sp, #12]
   1f274:	4602      	mov	r2, r0
   1f276:	4925      	ldr	r1, [pc, #148]	; (1f30c <pdn_interface_connect+0x430>)
   1f278:	4618      	mov	r0, r3
   1f27a:	9601      	str	r6, [sp, #4]
   1f27c:	4633      	mov	r3, r6
   1f27e:	9600      	str	r6, [sp, #0]
   1f280:	f7ff fa5c 	bl	1e73c <at_interface_write>
   1f284:	9003      	str	r0, [sp, #12]
   1f286:	4821      	ldr	r0, [pc, #132]	; (1f30c <pdn_interface_connect+0x430>)
   1f288:	f007 fce6 	bl	26c58 <strlen>
   1f28c:	9b03      	ldr	r3, [sp, #12]
   1f28e:	4298      	cmp	r0, r3
   1f290:	f47f ae9e 	bne.w	1efd0 <pdn_interface_connect+0xf4>
   1f294:	4633      	mov	r3, r6
   1f296:	e9cd 6600 	strd	r6, r6, [sp]
   1f29a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f29e:	491b      	ldr	r1, [pc, #108]	; (1f30c <pdn_interface_connect+0x430>)
   1f2a0:	f8da 0000 	ldr.w	r0, [sl]
   1f2a4:	f7ff fb9e 	bl	1e9e4 <at_interface_read>
   1f2a8:	4606      	mov	r6, r0
   1f2aa:	481e      	ldr	r0, [pc, #120]	; (1f324 <pdn_interface_connect+0x448>)
   1f2ac:	f007 fcd4 	bl	26c58 <strlen>
   1f2b0:	4286      	cmp	r6, r0
   1f2b2:	f6ff aea6 	blt.w	1f002 <pdn_interface_connect+0x126>
   1f2b6:	4602      	mov	r2, r0
   1f2b8:	4914      	ldr	r1, [pc, #80]	; (1f30c <pdn_interface_connect+0x430>)
   1f2ba:	481a      	ldr	r0, [pc, #104]	; (1f324 <pdn_interface_connect+0x448>)
   1f2bc:	f007 fcfa 	bl	26cb4 <strncmp>
   1f2c0:	2800      	cmp	r0, #0
   1f2c2:	f43f aec2 	beq.w	1f04a <pdn_interface_connect+0x16e>
   1f2c6:	e69c      	b.n	1f002 <pdn_interface_connect+0x126>
   1f2c8:	f04f 3bff 	mov.w	fp, #4294967295
   1f2cc:	e685      	b.n	1efda <pdn_interface_connect+0xfe>
   1f2ce:	2016      	movs	r0, #22
   1f2d0:	f7f7 fc56 	bl	16b80 <bsd_os_errno_set>
   1f2d4:	f04f 3bff 	mov.w	fp, #4294967295
   1f2d8:	e67f      	b.n	1efda <pdn_interface_connect+0xfe>
   1f2da:	f04f 0b0c 	mov.w	fp, #12
   1f2de:	e67c      	b.n	1efda <pdn_interface_connect+0xfe>
   1f2e0:	4811      	ldr	r0, [pc, #68]	; (1f328 <__kernel_ram_size>)
   1f2e2:	f007 fcb9 	bl	26c58 <strlen>
   1f2e6:	4909      	ldr	r1, [pc, #36]	; (1f30c <pdn_interface_connect+0x430>)
   1f2e8:	4602      	mov	r2, r0
   1f2ea:	480f      	ldr	r0, [pc, #60]	; (1f328 <__kernel_ram_size>)
   1f2ec:	f007 fce2 	bl	26cb4 <strncmp>
   1f2f0:	b918      	cbnz	r0, 1f2fa <pdn_interface_connect+0x41e>
   1f2f2:	2008      	movs	r0, #8
   1f2f4:	f7f7 fc44 	bl	16b80 <bsd_os_errno_set>
   1f2f8:	e66f      	b.n	1efda <pdn_interface_connect+0xfe>
   1f2fa:	2005      	movs	r0, #5
   1f2fc:	f7f7 fc40 	bl	16b80 <bsd_os_errno_set>
   1f300:	e66b      	b.n	1efda <pdn_interface_connect+0xfe>
   1f302:	bf00      	nop
   1f304:	0002f6e8 	.word	0x0002f6e8
   1f308:	0002f750 	.word	0x0002f750
   1f30c:	20021ac0 	.word	0x20021ac0
   1f310:	0002f6c4 	.word	0x0002f6c4
   1f314:	0002f6f4 	.word	0x0002f6f4
   1f318:	0002f6f8 	.word	0x0002f6f8
   1f31c:	0002f6d0 	.word	0x0002f6d0
   1f320:	0002f6fc 	.word	0x0002f6fc
   1f324:	0002f6e4 	.word	0x0002f6e4
   1f328:	0002f760 	.word	0x0002f760

0001f32c <pdn_interface_close>:
   1f32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f330:	4a6c      	ldr	r2, [pc, #432]	; (1f4e4 <pdn_interface_close+0x1b8>)
   1f332:	0c03      	lsrs	r3, r0, #16
   1f334:	041b      	lsls	r3, r3, #16
   1f336:	4293      	cmp	r3, r2
   1f338:	b083      	sub	sp, #12
   1f33a:	f040 80ae 	bne.w	1f49a <pdn_interface_close+0x16e>
   1f33e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f342:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f346:	2c09      	cmp	r4, #9
   1f348:	f300 80a7 	bgt.w	1f49a <pdn_interface_close+0x16e>
   1f34c:	4d66      	ldr	r5, [pc, #408]	; (1f4e8 <pdn_interface_close+0x1bc>)
   1f34e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f352:	2800      	cmp	r0, #0
   1f354:	f000 80a1 	beq.w	1f49a <pdn_interface_close+0x16e>
   1f358:	6883      	ldr	r3, [r0, #8]
   1f35a:	2b00      	cmp	r3, #0
   1f35c:	f000 809d 	beq.w	1f49a <pdn_interface_close+0x16e>
   1f360:	6883      	ldr	r3, [r0, #8]
   1f362:	2b03      	cmp	r3, #3
   1f364:	d00b      	beq.n	1f37e <pdn_interface_close+0x52>
   1f366:	6883      	ldr	r3, [r0, #8]
   1f368:	2b02      	cmp	r3, #2
   1f36a:	d056      	beq.n	1f41a <pdn_interface_close+0xee>
   1f36c:	f001 ff92 	bl	21294 <nrf_free>
   1f370:	2300      	movs	r3, #0
   1f372:	4618      	mov	r0, r3
   1f374:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1f378:	b003      	add	sp, #12
   1f37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f37e:	4e5b      	ldr	r6, [pc, #364]	; (1f4ec <pdn_interface_close+0x1c0>)
   1f380:	4b5b      	ldr	r3, [pc, #364]	; (1f4f0 <pdn_interface_close+0x1c4>)
   1f382:	4a5c      	ldr	r2, [pc, #368]	; (1f4f4 <pdn_interface_close+0x1c8>)
   1f384:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f388:	4630      	mov	r0, r6
   1f38a:	f007 fac5 	bl	26918 <snprintf>
   1f38e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f392:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f396:	681b      	ldr	r3, [r3, #0]
   1f398:	4a57      	ldr	r2, [pc, #348]	; (1f4f8 <pdn_interface_close+0x1cc>)
   1f39a:	4430      	add	r0, r6
   1f39c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1f508 <pdn_interface_close+0x1dc>
   1f3a0:	f007 faba 	bl	26918 <snprintf>
   1f3a4:	4630      	mov	r0, r6
   1f3a6:	f8d8 9000 	ldr.w	r9, [r8]
   1f3aa:	2700      	movs	r7, #0
   1f3ac:	f007 fc54 	bl	26c58 <strlen>
   1f3b0:	4631      	mov	r1, r6
   1f3b2:	4602      	mov	r2, r0
   1f3b4:	463b      	mov	r3, r7
   1f3b6:	4648      	mov	r0, r9
   1f3b8:	9701      	str	r7, [sp, #4]
   1f3ba:	9700      	str	r7, [sp, #0]
   1f3bc:	f7ff f9be 	bl	1e73c <at_interface_write>
   1f3c0:	4681      	mov	r9, r0
   1f3c2:	4630      	mov	r0, r6
   1f3c4:	f007 fc48 	bl	26c58 <strlen>
   1f3c8:	4548      	cmp	r0, r9
   1f3ca:	f040 8083 	bne.w	1f4d4 <pdn_interface_close+0x1a8>
   1f3ce:	463b      	mov	r3, r7
   1f3d0:	e9cd 7700 	strd	r7, r7, [sp]
   1f3d4:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f3d8:	4631      	mov	r1, r6
   1f3da:	f8d8 0000 	ldr.w	r0, [r8]
   1f3de:	f7ff fb01 	bl	1e9e4 <at_interface_read>
   1f3e2:	4607      	mov	r7, r0
   1f3e4:	4845      	ldr	r0, [pc, #276]	; (1f4fc <pdn_interface_close+0x1d0>)
   1f3e6:	f007 fc37 	bl	26c58 <strlen>
   1f3ea:	4287      	cmp	r7, r0
   1f3ec:	da5b      	bge.n	1f4a6 <pdn_interface_close+0x17a>
   1f3ee:	4844      	ldr	r0, [pc, #272]	; (1f500 <pdn_interface_close+0x1d4>)
   1f3f0:	f007 fc32 	bl	26c58 <strlen>
   1f3f4:	493d      	ldr	r1, [pc, #244]	; (1f4ec <pdn_interface_close+0x1c0>)
   1f3f6:	4602      	mov	r2, r0
   1f3f8:	4841      	ldr	r0, [pc, #260]	; (1f500 <pdn_interface_close+0x1d4>)
   1f3fa:	f007 fc5b 	bl	26cb4 <strncmp>
   1f3fe:	2800      	cmp	r0, #0
   1f400:	d168      	bne.n	1f4d4 <pdn_interface_close+0x1a8>
   1f402:	2008      	movs	r0, #8
   1f404:	f7f7 fbbc 	bl	16b80 <bsd_os_errno_set>
   1f408:	2202      	movs	r2, #2
   1f40a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f40e:	609a      	str	r2, [r3, #8]
   1f410:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f414:	6883      	ldr	r3, [r0, #8]
   1f416:	2b02      	cmp	r3, #2
   1f418:	d1a8      	bne.n	1f36c <pdn_interface_close+0x40>
   1f41a:	4e34      	ldr	r6, [pc, #208]	; (1f4ec <pdn_interface_close+0x1c0>)
   1f41c:	4b39      	ldr	r3, [pc, #228]	; (1f504 <pdn_interface_close+0x1d8>)
   1f41e:	4a35      	ldr	r2, [pc, #212]	; (1f4f4 <pdn_interface_close+0x1c8>)
   1f420:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f424:	4630      	mov	r0, r6
   1f426:	f007 fa77 	bl	26918 <snprintf>
   1f42a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f42e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f432:	681b      	ldr	r3, [r3, #0]
   1f434:	4a30      	ldr	r2, [pc, #192]	; (1f4f8 <pdn_interface_close+0x1cc>)
   1f436:	4430      	add	r0, r6
   1f438:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1f508 <pdn_interface_close+0x1dc>
   1f43c:	f007 fa6c 	bl	26918 <snprintf>
   1f440:	4630      	mov	r0, r6
   1f442:	f8d8 9000 	ldr.w	r9, [r8]
   1f446:	2700      	movs	r7, #0
   1f448:	f007 fc06 	bl	26c58 <strlen>
   1f44c:	4631      	mov	r1, r6
   1f44e:	4602      	mov	r2, r0
   1f450:	463b      	mov	r3, r7
   1f452:	4648      	mov	r0, r9
   1f454:	9701      	str	r7, [sp, #4]
   1f456:	9700      	str	r7, [sp, #0]
   1f458:	f7ff f970 	bl	1e73c <at_interface_write>
   1f45c:	4681      	mov	r9, r0
   1f45e:	4630      	mov	r0, r6
   1f460:	f007 fbfa 	bl	26c58 <strlen>
   1f464:	4548      	cmp	r0, r9
   1f466:	d139      	bne.n	1f4dc <pdn_interface_close+0x1b0>
   1f468:	463b      	mov	r3, r7
   1f46a:	e9cd 7700 	strd	r7, r7, [sp]
   1f46e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f472:	4631      	mov	r1, r6
   1f474:	f8d8 0000 	ldr.w	r0, [r8]
   1f478:	f7ff fab4 	bl	1e9e4 <at_interface_read>
   1f47c:	4607      	mov	r7, r0
   1f47e:	481f      	ldr	r0, [pc, #124]	; (1f4fc <pdn_interface_close+0x1d0>)
   1f480:	f007 fbea 	bl	26c58 <strlen>
   1f484:	4287      	cmp	r7, r0
   1f486:	db16      	blt.n	1f4b6 <pdn_interface_close+0x18a>
   1f488:	4602      	mov	r2, r0
   1f48a:	4631      	mov	r1, r6
   1f48c:	481b      	ldr	r0, [pc, #108]	; (1f4fc <pdn_interface_close+0x1d0>)
   1f48e:	f007 fc11 	bl	26cb4 <strncmp>
   1f492:	b980      	cbnz	r0, 1f4b6 <pdn_interface_close+0x18a>
   1f494:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f498:	e768      	b.n	1f36c <pdn_interface_close+0x40>
   1f49a:	2009      	movs	r0, #9
   1f49c:	f7f7 fb70 	bl	16b80 <bsd_os_errno_set>
   1f4a0:	f04f 30ff 	mov.w	r0, #4294967295
   1f4a4:	e768      	b.n	1f378 <pdn_interface_close+0x4c>
   1f4a6:	4602      	mov	r2, r0
   1f4a8:	4631      	mov	r1, r6
   1f4aa:	4814      	ldr	r0, [pc, #80]	; (1f4fc <pdn_interface_close+0x1d0>)
   1f4ac:	f007 fc02 	bl	26cb4 <strncmp>
   1f4b0:	2800      	cmp	r0, #0
   1f4b2:	d0a9      	beq.n	1f408 <pdn_interface_close+0xdc>
   1f4b4:	e79b      	b.n	1f3ee <pdn_interface_close+0xc2>
   1f4b6:	4812      	ldr	r0, [pc, #72]	; (1f500 <pdn_interface_close+0x1d4>)
   1f4b8:	f007 fbce 	bl	26c58 <strlen>
   1f4bc:	490b      	ldr	r1, [pc, #44]	; (1f4ec <pdn_interface_close+0x1c0>)
   1f4be:	4602      	mov	r2, r0
   1f4c0:	480f      	ldr	r0, [pc, #60]	; (1f500 <pdn_interface_close+0x1d4>)
   1f4c2:	f007 fbf7 	bl	26cb4 <strncmp>
   1f4c6:	b948      	cbnz	r0, 1f4dc <pdn_interface_close+0x1b0>
   1f4c8:	2008      	movs	r0, #8
   1f4ca:	f7f7 fb59 	bl	16b80 <bsd_os_errno_set>
   1f4ce:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f4d2:	e74b      	b.n	1f36c <pdn_interface_close+0x40>
   1f4d4:	2005      	movs	r0, #5
   1f4d6:	f7f7 fb53 	bl	16b80 <bsd_os_errno_set>
   1f4da:	e795      	b.n	1f408 <pdn_interface_close+0xdc>
   1f4dc:	2005      	movs	r0, #5
   1f4de:	f7f7 fb4f 	bl	16b80 <bsd_os_errno_set>
   1f4e2:	e7d7      	b.n	1f494 <pdn_interface_close+0x168>
   1f4e4:	789a0000 	.word	0x789a0000
   1f4e8:	20021bc0 	.word	0x20021bc0
   1f4ec:	20021ac0 	.word	0x20021ac0
   1f4f0:	0002f6ac 	.word	0x0002f6ac
   1f4f4:	0002f750 	.word	0x0002f750
   1f4f8:	0002f710 	.word	0x0002f710
   1f4fc:	0002f6e4 	.word	0x0002f6e4
   1f500:	0002f760 	.word	0x0002f760
   1f504:	0002f6b8 	.word	0x0002f6b8
   1f508:	20021abc 	.word	0x20021abc

0001f50c <pdn_interface_setopt>:
   1f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f50e:	f240 2402 	movw	r4, #514	; 0x202
   1f512:	42a1      	cmp	r1, r4
   1f514:	9e06      	ldr	r6, [sp, #24]
   1f516:	f040 8090 	bne.w	1f63a <pdn_interface_setopt+0x12e>
   1f51a:	461d      	mov	r5, r3
   1f51c:	2b00      	cmp	r3, #0
   1f51e:	f000 808c 	beq.w	1f63a <pdn_interface_setopt+0x12e>
   1f522:	2e00      	cmp	r6, #0
   1f524:	f000 8089 	beq.w	1f63a <pdn_interface_setopt+0x12e>
   1f528:	0c03      	lsrs	r3, r0, #16
   1f52a:	494d      	ldr	r1, [pc, #308]	; (1f660 <pdn_interface_setopt+0x154>)
   1f52c:	041b      	lsls	r3, r3, #16
   1f52e:	428b      	cmp	r3, r1
   1f530:	d005      	beq.n	1f53e <pdn_interface_setopt+0x32>
   1f532:	2009      	movs	r0, #9
   1f534:	f7f7 fb24 	bl	16b80 <bsd_os_errno_set>
   1f538:	f04f 30ff 	mov.w	r0, #4294967295
   1f53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f53e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f542:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f546:	2c09      	cmp	r4, #9
   1f548:	dcf3      	bgt.n	1f532 <pdn_interface_setopt+0x26>
   1f54a:	4f46      	ldr	r7, [pc, #280]	; (1f664 <pdn_interface_setopt+0x158>)
   1f54c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f550:	2b00      	cmp	r3, #0
   1f552:	d0ee      	beq.n	1f532 <pdn_interface_setopt+0x26>
   1f554:	6899      	ldr	r1, [r3, #8]
   1f556:	2900      	cmp	r1, #0
   1f558:	d0eb      	beq.n	1f532 <pdn_interface_setopt+0x26>
   1f55a:	2a01      	cmp	r2, #1
   1f55c:	d049      	beq.n	1f5f2 <pdn_interface_setopt+0xe6>
   1f55e:	2a04      	cmp	r2, #4
   1f560:	d145      	bne.n	1f5ee <pdn_interface_setopt+0xe2>
   1f562:	689a      	ldr	r2, [r3, #8]
   1f564:	2a00      	cmp	r2, #0
   1f566:	d04c      	beq.n	1f602 <pdn_interface_setopt+0xf6>
   1f568:	689a      	ldr	r2, [r3, #8]
   1f56a:	2a03      	cmp	r2, #3
   1f56c:	d049      	beq.n	1f602 <pdn_interface_setopt+0xf6>
   1f56e:	689b      	ldr	r3, [r3, #8]
   1f570:	2b04      	cmp	r3, #4
   1f572:	d046      	beq.n	1f602 <pdn_interface_setopt+0xf6>
   1f574:	4628      	mov	r0, r5
   1f576:	f007 fb6f 	bl	26c58 <strlen>
   1f57a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f57e:	3001      	adds	r0, #1
   1f580:	f105 0664 	add.w	r6, r5, #100	; 0x64
   1f584:	6158      	str	r0, [r3, #20]
   1f586:	4630      	mov	r0, r6
   1f588:	f007 fb66 	bl	26c58 <strlen>
   1f58c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f590:	3001      	adds	r0, #1
   1f592:	6198      	str	r0, [r3, #24]
   1f594:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   1f598:	3b01      	subs	r3, #1
   1f59a:	2b01      	cmp	r3, #1
   1f59c:	d84b      	bhi.n	1f636 <pdn_interface_setopt+0x12a>
   1f59e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1f5a2:	6943      	ldr	r3, [r0, #20]
   1f5a4:	2b63      	cmp	r3, #99	; 0x63
   1f5a6:	dc46      	bgt.n	1f636 <pdn_interface_setopt+0x12a>
   1f5a8:	6982      	ldr	r2, [r0, #24]
   1f5aa:	2a63      	cmp	r2, #99	; 0x63
   1f5ac:	dc43      	bgt.n	1f636 <pdn_interface_setopt+0x12a>
   1f5ae:	4413      	add	r3, r2
   1f5b0:	f103 0120 	add.w	r1, r3, #32
   1f5b4:	f001 fe7a 	bl	212ac <nrf_realloc>
   1f5b8:	4603      	mov	r3, r0
   1f5ba:	2800      	cmp	r0, #0
   1f5bc:	d048      	beq.n	1f650 <pdn_interface_setopt+0x144>
   1f5be:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1f5c2:	6941      	ldr	r1, [r0, #20]
   1f5c4:	462b      	mov	r3, r5
   1f5c6:	4a28      	ldr	r2, [pc, #160]	; (1f668 <pdn_interface_setopt+0x15c>)
   1f5c8:	3020      	adds	r0, #32
   1f5ca:	f007 f9a5 	bl	26918 <snprintf>
   1f5ce:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f5d2:	3021      	adds	r0, #33	; 0x21
   1f5d4:	4633      	mov	r3, r6
   1f5d6:	6991      	ldr	r1, [r2, #24]
   1f5d8:	4410      	add	r0, r2
   1f5da:	4a23      	ldr	r2, [pc, #140]	; (1f668 <pdn_interface_setopt+0x15c>)
   1f5dc:	f007 f99c 	bl	26918 <snprintf>
   1f5e0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f5e4:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   1f5e8:	2000      	movs	r0, #0
   1f5ea:	741a      	strb	r2, [r3, #16]
   1f5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5ee:	202d      	movs	r0, #45	; 0x2d
   1f5f0:	e7a0      	b.n	1f534 <pdn_interface_setopt+0x28>
   1f5f2:	689a      	ldr	r2, [r3, #8]
   1f5f4:	b12a      	cbz	r2, 1f602 <pdn_interface_setopt+0xf6>
   1f5f6:	689a      	ldr	r2, [r3, #8]
   1f5f8:	2a03      	cmp	r2, #3
   1f5fa:	d002      	beq.n	1f602 <pdn_interface_setopt+0xf6>
   1f5fc:	689a      	ldr	r2, [r3, #8]
   1f5fe:	2a04      	cmp	r2, #4
   1f600:	d101      	bne.n	1f606 <pdn_interface_setopt+0xfa>
   1f602:	200e      	movs	r0, #14
   1f604:	e796      	b.n	1f534 <pdn_interface_setopt+0x28>
   1f606:	08b2      	lsrs	r2, r6, #2
   1f608:	1e51      	subs	r1, r2, #1
   1f60a:	2901      	cmp	r1, #1
   1f60c:	d813      	bhi.n	1f636 <pdn_interface_setopt+0x12a>
   1f60e:	07b1      	lsls	r1, r6, #30
   1f610:	d111      	bne.n	1f636 <pdn_interface_setopt+0x12a>
   1f612:	6829      	ldr	r1, [r5, #0]
   1f614:	2902      	cmp	r1, #2
   1f616:	d016      	beq.n	1f646 <pdn_interface_setopt+0x13a>
   1f618:	290a      	cmp	r1, #10
   1f61a:	d10c      	bne.n	1f636 <pdn_interface_setopt+0x12a>
   1f61c:	2102      	movs	r1, #2
   1f61e:	2a02      	cmp	r2, #2
   1f620:	d106      	bne.n	1f630 <pdn_interface_setopt+0x124>
   1f622:	686a      	ldr	r2, [r5, #4]
   1f624:	2a02      	cmp	r2, #2
   1f626:	d010      	beq.n	1f64a <pdn_interface_setopt+0x13e>
   1f628:	2a0a      	cmp	r2, #10
   1f62a:	d104      	bne.n	1f636 <pdn_interface_setopt+0x12a>
   1f62c:	f041 0102 	orr.w	r1, r1, #2
   1f630:	60d9      	str	r1, [r3, #12]
   1f632:	2000      	movs	r0, #0
   1f634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f636:	2016      	movs	r0, #22
   1f638:	e77c      	b.n	1f534 <pdn_interface_setopt+0x28>
   1f63a:	2016      	movs	r0, #22
   1f63c:	f7f7 faa0 	bl	16b80 <bsd_os_errno_set>
   1f640:	f04f 30ff 	mov.w	r0, #4294967295
   1f644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f646:	2101      	movs	r1, #1
   1f648:	e7e9      	b.n	1f61e <pdn_interface_setopt+0x112>
   1f64a:	f041 0101 	orr.w	r1, r1, #1
   1f64e:	e7ef      	b.n	1f630 <pdn_interface_setopt+0x124>
   1f650:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f654:	200c      	movs	r0, #12
   1f656:	6153      	str	r3, [r2, #20]
   1f658:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f65c:	6193      	str	r3, [r2, #24]
   1f65e:	e769      	b.n	1f534 <pdn_interface_setopt+0x28>
   1f660:	789a0000 	.word	0x789a0000
   1f664:	20021bc0 	.word	0x20021bc0
   1f668:	0002f750 	.word	0x0002f750

0001f66c <pdn_interface_getopt>:
   1f66c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f670:	f240 2402 	movw	r4, #514	; 0x202
   1f674:	b083      	sub	sp, #12
   1f676:	42a1      	cmp	r1, r4
   1f678:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f67a:	f040 808f 	bne.w	1f79c <pdn_interface_getopt+0x130>
   1f67e:	461e      	mov	r6, r3
   1f680:	2b00      	cmp	r3, #0
   1f682:	f000 808b 	beq.w	1f79c <pdn_interface_getopt+0x130>
   1f686:	2d00      	cmp	r5, #0
   1f688:	f000 8088 	beq.w	1f79c <pdn_interface_getopt+0x130>
   1f68c:	0c03      	lsrs	r3, r0, #16
   1f68e:	4954      	ldr	r1, [pc, #336]	; (1f7e0 <pdn_interface_getopt+0x174>)
   1f690:	041b      	lsls	r3, r3, #16
   1f692:	428b      	cmp	r3, r1
   1f694:	f040 8084 	bne.w	1f7a0 <pdn_interface_getopt+0x134>
   1f698:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f69c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f6a0:	2c09      	cmp	r4, #9
   1f6a2:	dc7d      	bgt.n	1f7a0 <pdn_interface_getopt+0x134>
   1f6a4:	4b4f      	ldr	r3, [pc, #316]	; (1f7e4 <pdn_interface_getopt+0x178>)
   1f6a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1f6aa:	2b00      	cmp	r3, #0
   1f6ac:	d078      	beq.n	1f7a0 <pdn_interface_getopt+0x134>
   1f6ae:	6899      	ldr	r1, [r3, #8]
   1f6b0:	2900      	cmp	r1, #0
   1f6b2:	d075      	beq.n	1f7a0 <pdn_interface_getopt+0x134>
   1f6b4:	2a02      	cmp	r2, #2
   1f6b6:	d04e      	beq.n	1f756 <pdn_interface_getopt+0xea>
   1f6b8:	2a03      	cmp	r2, #3
   1f6ba:	d009      	beq.n	1f6d0 <pdn_interface_getopt+0x64>
   1f6bc:	2a01      	cmp	r2, #1
   1f6be:	d054      	beq.n	1f76a <pdn_interface_getopt+0xfe>
   1f6c0:	202d      	movs	r0, #45	; 0x2d
   1f6c2:	f7f7 fa5d 	bl	16b80 <bsd_os_errno_set>
   1f6c6:	f04f 30ff 	mov.w	r0, #4294967295
   1f6ca:	b003      	add	sp, #12
   1f6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f6d0:	682b      	ldr	r3, [r5, #0]
   1f6d2:	2b00      	cmp	r3, #0
   1f6d4:	d062      	beq.n	1f79c <pdn_interface_getopt+0x130>
   1f6d6:	4b44      	ldr	r3, [pc, #272]	; (1f7e8 <pdn_interface_getopt+0x17c>)
   1f6d8:	4a44      	ldr	r2, [pc, #272]	; (1f7ec <pdn_interface_getopt+0x180>)
   1f6da:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f6de:	4844      	ldr	r0, [pc, #272]	; (1f7f0 <pdn_interface_getopt+0x184>)
   1f6e0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1f7fc <pdn_interface_getopt+0x190>
   1f6e4:	f007 f918 	bl	26918 <snprintf>
   1f6e8:	4841      	ldr	r0, [pc, #260]	; (1f7f0 <pdn_interface_getopt+0x184>)
   1f6ea:	f8d8 9000 	ldr.w	r9, [r8]
   1f6ee:	2700      	movs	r7, #0
   1f6f0:	f007 fab2 	bl	26c58 <strlen>
   1f6f4:	463b      	mov	r3, r7
   1f6f6:	4602      	mov	r2, r0
   1f6f8:	493d      	ldr	r1, [pc, #244]	; (1f7f0 <pdn_interface_getopt+0x184>)
   1f6fa:	4648      	mov	r0, r9
   1f6fc:	9701      	str	r7, [sp, #4]
   1f6fe:	9700      	str	r7, [sp, #0]
   1f700:	f7ff f81c 	bl	1e73c <at_interface_write>
   1f704:	4681      	mov	r9, r0
   1f706:	483a      	ldr	r0, [pc, #232]	; (1f7f0 <pdn_interface_getopt+0x184>)
   1f708:	f007 faa6 	bl	26c58 <strlen>
   1f70c:	4548      	cmp	r0, r9
   1f70e:	d161      	bne.n	1f7d4 <pdn_interface_getopt+0x168>
   1f710:	463b      	mov	r3, r7
   1f712:	e9cd 7700 	strd	r7, r7, [sp]
   1f716:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f71a:	4935      	ldr	r1, [pc, #212]	; (1f7f0 <pdn_interface_getopt+0x184>)
   1f71c:	f8d8 0000 	ldr.w	r0, [r8]
   1f720:	f7ff f960 	bl	1e9e4 <at_interface_read>
   1f724:	4607      	mov	r7, r0
   1f726:	4833      	ldr	r0, [pc, #204]	; (1f7f4 <pdn_interface_getopt+0x188>)
   1f728:	f007 fa96 	bl	26c58 <strlen>
   1f72c:	4287      	cmp	r7, r0
   1f72e:	db3d      	blt.n	1f7ac <pdn_interface_getopt+0x140>
   1f730:	4602      	mov	r2, r0
   1f732:	492f      	ldr	r1, [pc, #188]	; (1f7f0 <pdn_interface_getopt+0x184>)
   1f734:	482f      	ldr	r0, [pc, #188]	; (1f7f4 <pdn_interface_getopt+0x188>)
   1f736:	f007 fabd 	bl	26cb4 <strncmp>
   1f73a:	4607      	mov	r7, r0
   1f73c:	2800      	cmp	r0, #0
   1f73e:	d135      	bne.n	1f7ac <pdn_interface_getopt+0x140>
   1f740:	4620      	mov	r0, r4
   1f742:	492b      	ldr	r1, [pc, #172]	; (1f7f0 <pdn_interface_getopt+0x184>)
   1f744:	f7ff fa38 	bl	1ebb8 <pdn_state_get_parser>
   1f748:	2800      	cmp	r0, #0
   1f74a:	dbba      	blt.n	1f6c2 <pdn_interface_getopt+0x56>
   1f74c:	2301      	movs	r3, #1
   1f74e:	7030      	strb	r0, [r6, #0]
   1f750:	4638      	mov	r0, r7
   1f752:	602b      	str	r3, [r5, #0]
   1f754:	e7b9      	b.n	1f6ca <pdn_interface_getopt+0x5e>
   1f756:	682a      	ldr	r2, [r5, #0]
   1f758:	b302      	cbz	r2, 1f79c <pdn_interface_getopt+0x130>
   1f75a:	2201      	movs	r2, #1
   1f75c:	2000      	movs	r0, #0
   1f75e:	681b      	ldr	r3, [r3, #0]
   1f760:	7033      	strb	r3, [r6, #0]
   1f762:	602a      	str	r2, [r5, #0]
   1f764:	b003      	add	sp, #12
   1f766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f76a:	689a      	ldr	r2, [r3, #8]
   1f76c:	b1a2      	cbz	r2, 1f798 <pdn_interface_getopt+0x12c>
   1f76e:	689a      	ldr	r2, [r3, #8]
   1f770:	2a04      	cmp	r2, #4
   1f772:	d011      	beq.n	1f798 <pdn_interface_getopt+0x12c>
   1f774:	682a      	ldr	r2, [r5, #0]
   1f776:	2a07      	cmp	r2, #7
   1f778:	d910      	bls.n	1f79c <pdn_interface_getopt+0x130>
   1f77a:	f012 0203 	ands.w	r2, r2, #3
   1f77e:	d10d      	bne.n	1f79c <pdn_interface_getopt+0x130>
   1f780:	68db      	ldr	r3, [r3, #12]
   1f782:	0799      	lsls	r1, r3, #30
   1f784:	d421      	bmi.n	1f7ca <pdn_interface_getopt+0x15e>
   1f786:	2104      	movs	r1, #4
   1f788:	07db      	lsls	r3, r3, #31
   1f78a:	d502      	bpl.n	1f792 <pdn_interface_getopt+0x126>
   1f78c:	2302      	movs	r3, #2
   1f78e:	50b3      	str	r3, [r6, r2]
   1f790:	460a      	mov	r2, r1
   1f792:	602a      	str	r2, [r5, #0]
   1f794:	2000      	movs	r0, #0
   1f796:	e798      	b.n	1f6ca <pdn_interface_getopt+0x5e>
   1f798:	200e      	movs	r0, #14
   1f79a:	e792      	b.n	1f6c2 <pdn_interface_getopt+0x56>
   1f79c:	2016      	movs	r0, #22
   1f79e:	e790      	b.n	1f6c2 <pdn_interface_getopt+0x56>
   1f7a0:	2009      	movs	r0, #9
   1f7a2:	f7f7 f9ed 	bl	16b80 <bsd_os_errno_set>
   1f7a6:	f04f 30ff 	mov.w	r0, #4294967295
   1f7aa:	e78e      	b.n	1f6ca <pdn_interface_getopt+0x5e>
   1f7ac:	4812      	ldr	r0, [pc, #72]	; (1f7f8 <pdn_interface_getopt+0x18c>)
   1f7ae:	f007 fa53 	bl	26c58 <strlen>
   1f7b2:	490f      	ldr	r1, [pc, #60]	; (1f7f0 <pdn_interface_getopt+0x184>)
   1f7b4:	4602      	mov	r2, r0
   1f7b6:	4810      	ldr	r0, [pc, #64]	; (1f7f8 <pdn_interface_getopt+0x18c>)
   1f7b8:	f007 fa7c 	bl	26cb4 <strncmp>
   1f7bc:	b950      	cbnz	r0, 1f7d4 <pdn_interface_getopt+0x168>
   1f7be:	2008      	movs	r0, #8
   1f7c0:	f7f7 f9de 	bl	16b80 <bsd_os_errno_set>
   1f7c4:	f04f 30ff 	mov.w	r0, #4294967295
   1f7c8:	e77b      	b.n	1f6c2 <pdn_interface_getopt+0x56>
   1f7ca:	220a      	movs	r2, #10
   1f7cc:	2108      	movs	r1, #8
   1f7ce:	6032      	str	r2, [r6, #0]
   1f7d0:	2204      	movs	r2, #4
   1f7d2:	e7d9      	b.n	1f788 <pdn_interface_getopt+0x11c>
   1f7d4:	2005      	movs	r0, #5
   1f7d6:	f7f7 f9d3 	bl	16b80 <bsd_os_errno_set>
   1f7da:	f04f 30ff 	mov.w	r0, #4294967295
   1f7de:	e770      	b.n	1f6c2 <pdn_interface_getopt+0x56>
   1f7e0:	789a0000 	.word	0x789a0000
   1f7e4:	20021bc0 	.word	0x20021bc0
   1f7e8:	0002f730 	.word	0x0002f730
   1f7ec:	0002f750 	.word	0x0002f750
   1f7f0:	20021ac0 	.word	0x20021ac0
   1f7f4:	0002f73c 	.word	0x0002f73c
   1f7f8:	0002f760 	.word	0x0002f760
   1f7fc:	20021abc 	.word	0x20021abc

0001f800 <pdn_interface_pdn_id_get>:
   1f800:	2900      	cmp	r1, #0
   1f802:	f000 82ba 	beq.w	1fd7a <pdn_interface_pdn_id_get+0x57a>
   1f806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f80a:	2802      	cmp	r0, #2
   1f80c:	b083      	sub	sp, #12
   1f80e:	460e      	mov	r6, r1
   1f810:	d067      	beq.n	1f8e2 <pdn_interface_pdn_id_get+0xe2>
   1f812:	280a      	cmp	r0, #10
   1f814:	d040      	beq.n	1f898 <pdn_interface_pdn_id_get+0x98>
   1f816:	4cae      	ldr	r4, [pc, #696]	; (1fad0 <pdn_interface_pdn_id_get+0x2d0>)
   1f818:	6823      	ldr	r3, [r4, #0]
   1f81a:	b11b      	cbz	r3, 1f824 <pdn_interface_pdn_id_get+0x24>
   1f81c:	689b      	ldr	r3, [r3, #8]
   1f81e:	2b03      	cmp	r3, #3
   1f820:	f000 80fc 	beq.w	1fa1c <pdn_interface_pdn_id_get+0x21c>
   1f824:	6863      	ldr	r3, [r4, #4]
   1f826:	b11b      	cbz	r3, 1f830 <pdn_interface_pdn_id_get+0x30>
   1f828:	689b      	ldr	r3, [r3, #8]
   1f82a:	2b03      	cmp	r3, #3
   1f82c:	f000 80e4 	beq.w	1f9f8 <pdn_interface_pdn_id_get+0x1f8>
   1f830:	68a3      	ldr	r3, [r4, #8]
   1f832:	b11b      	cbz	r3, 1f83c <pdn_interface_pdn_id_get+0x3c>
   1f834:	689b      	ldr	r3, [r3, #8]
   1f836:	2b03      	cmp	r3, #3
   1f838:	f000 80cc 	beq.w	1f9d4 <pdn_interface_pdn_id_get+0x1d4>
   1f83c:	68e3      	ldr	r3, [r4, #12]
   1f83e:	b11b      	cbz	r3, 1f848 <pdn_interface_pdn_id_get+0x48>
   1f840:	689b      	ldr	r3, [r3, #8]
   1f842:	2b03      	cmp	r3, #3
   1f844:	f000 80b4 	beq.w	1f9b0 <pdn_interface_pdn_id_get+0x1b0>
   1f848:	6923      	ldr	r3, [r4, #16]
   1f84a:	b11b      	cbz	r3, 1f854 <pdn_interface_pdn_id_get+0x54>
   1f84c:	689b      	ldr	r3, [r3, #8]
   1f84e:	2b03      	cmp	r3, #3
   1f850:	f000 80f5 	beq.w	1fa3e <pdn_interface_pdn_id_get+0x23e>
   1f854:	6963      	ldr	r3, [r4, #20]
   1f856:	b11b      	cbz	r3, 1f860 <pdn_interface_pdn_id_get+0x60>
   1f858:	689b      	ldr	r3, [r3, #8]
   1f85a:	2b03      	cmp	r3, #3
   1f85c:	f000 813c 	beq.w	1fad8 <pdn_interface_pdn_id_get+0x2d8>
   1f860:	69a3      	ldr	r3, [r4, #24]
   1f862:	b11b      	cbz	r3, 1f86c <pdn_interface_pdn_id_get+0x6c>
   1f864:	689b      	ldr	r3, [r3, #8]
   1f866:	2b03      	cmp	r3, #3
   1f868:	f000 811f 	beq.w	1faaa <pdn_interface_pdn_id_get+0x2aa>
   1f86c:	69e3      	ldr	r3, [r4, #28]
   1f86e:	b11b      	cbz	r3, 1f878 <pdn_interface_pdn_id_get+0x78>
   1f870:	689b      	ldr	r3, [r3, #8]
   1f872:	2b03      	cmp	r3, #3
   1f874:	f000 8107 	beq.w	1fa86 <pdn_interface_pdn_id_get+0x286>
   1f878:	6a23      	ldr	r3, [r4, #32]
   1f87a:	b11b      	cbz	r3, 1f884 <pdn_interface_pdn_id_get+0x84>
   1f87c:	689b      	ldr	r3, [r3, #8]
   1f87e:	2b03      	cmp	r3, #3
   1f880:	f000 80ef 	beq.w	1fa62 <pdn_interface_pdn_id_get+0x262>
   1f884:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f886:	b113      	cbz	r3, 1f88e <pdn_interface_pdn_id_get+0x8e>
   1f888:	689b      	ldr	r3, [r3, #8]
   1f88a:	2b03      	cmp	r3, #3
   1f88c:	d07e      	beq.n	1f98c <pdn_interface_pdn_id_get+0x18c>
   1f88e:	f04f 30ff 	mov.w	r0, #4294967295
   1f892:	b003      	add	sp, #12
   1f894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f898:	2500      	movs	r5, #0
   1f89a:	4c8e      	ldr	r4, [pc, #568]	; (1fad4 <pdn_interface_pdn_id_get+0x2d4>)
   1f89c:	e002      	b.n	1f8a4 <pdn_interface_pdn_id_get+0xa4>
   1f89e:	3501      	adds	r5, #1
   1f8a0:	2d0a      	cmp	r5, #10
   1f8a2:	d0f4      	beq.n	1f88e <pdn_interface_pdn_id_get+0x8e>
   1f8a4:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1f8a8:	2b00      	cmp	r3, #0
   1f8aa:	d0f8      	beq.n	1f89e <pdn_interface_pdn_id_get+0x9e>
   1f8ac:	689b      	ldr	r3, [r3, #8]
   1f8ae:	2b03      	cmp	r3, #3
   1f8b0:	d1f5      	bne.n	1f89e <pdn_interface_pdn_id_get+0x9e>
   1f8b2:	4630      	mov	r0, r6
   1f8b4:	f007 f9d0 	bl	26c58 <strlen>
   1f8b8:	6823      	ldr	r3, [r4, #0]
   1f8ba:	69da      	ldr	r2, [r3, #28]
   1f8bc:	4290      	cmp	r0, r2
   1f8be:	d1ee      	bne.n	1f89e <pdn_interface_pdn_id_get+0x9e>
   1f8c0:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   1f8c4:	4439      	add	r1, r7
   1f8c6:	3120      	adds	r1, #32
   1f8c8:	4602      	mov	r2, r0
   1f8ca:	4419      	add	r1, r3
   1f8cc:	4630      	mov	r0, r6
   1f8ce:	f007 f9f1 	bl	26cb4 <strncmp>
   1f8d2:	2800      	cmp	r0, #0
   1f8d4:	d1e3      	bne.n	1f89e <pdn_interface_pdn_id_get+0x9e>
   1f8d6:	6823      	ldr	r3, [r4, #0]
   1f8d8:	68da      	ldr	r2, [r3, #12]
   1f8da:	0792      	lsls	r2, r2, #30
   1f8dc:	f100 8128 	bmi.w	1fb30 <pdn_interface_pdn_id_get+0x330>
   1f8e0:	e7dd      	b.n	1f89e <pdn_interface_pdn_id_get+0x9e>
   1f8e2:	4c7b      	ldr	r4, [pc, #492]	; (1fad0 <pdn_interface_pdn_id_get+0x2d0>)
   1f8e4:	6823      	ldr	r3, [r4, #0]
   1f8e6:	b11b      	cbz	r3, 1f8f0 <pdn_interface_pdn_id_get+0xf0>
   1f8e8:	689b      	ldr	r3, [r3, #8]
   1f8ea:	2b03      	cmp	r3, #3
   1f8ec:	f000 822a 	beq.w	1fd44 <pdn_interface_pdn_id_get+0x544>
   1f8f0:	6863      	ldr	r3, [r4, #4]
   1f8f2:	b11b      	cbz	r3, 1f8fc <pdn_interface_pdn_id_get+0xfc>
   1f8f4:	689b      	ldr	r3, [r3, #8]
   1f8f6:	2b03      	cmp	r3, #3
   1f8f8:	f000 8209 	beq.w	1fd0e <pdn_interface_pdn_id_get+0x50e>
   1f8fc:	68a3      	ldr	r3, [r4, #8]
   1f8fe:	b11b      	cbz	r3, 1f908 <pdn_interface_pdn_id_get+0x108>
   1f900:	689b      	ldr	r3, [r3, #8]
   1f902:	2b03      	cmp	r3, #3
   1f904:	f000 81b3 	beq.w	1fc6e <pdn_interface_pdn_id_get+0x46e>
   1f908:	68e3      	ldr	r3, [r4, #12]
   1f90a:	b11b      	cbz	r3, 1f914 <pdn_interface_pdn_id_get+0x114>
   1f90c:	689d      	ldr	r5, [r3, #8]
   1f90e:	2d03      	cmp	r5, #3
   1f910:	f000 81c8 	beq.w	1fca4 <pdn_interface_pdn_id_get+0x4a4>
   1f914:	6923      	ldr	r3, [r4, #16]
   1f916:	b11b      	cbz	r3, 1f920 <pdn_interface_pdn_id_get+0x120>
   1f918:	689b      	ldr	r3, [r3, #8]
   1f91a:	2b03      	cmp	r3, #3
   1f91c:	f000 80ee 	beq.w	1fafc <pdn_interface_pdn_id_get+0x2fc>
   1f920:	6963      	ldr	r3, [r4, #20]
   1f922:	b11b      	cbz	r3, 1f92c <pdn_interface_pdn_id_get+0x12c>
   1f924:	689b      	ldr	r3, [r3, #8]
   1f926:	2b03      	cmp	r3, #3
   1f928:	f000 8150 	beq.w	1fbcc <pdn_interface_pdn_id_get+0x3cc>
   1f92c:	69a3      	ldr	r3, [r4, #24]
   1f92e:	b11b      	cbz	r3, 1f938 <pdn_interface_pdn_id_get+0x138>
   1f930:	689b      	ldr	r3, [r3, #8]
   1f932:	2b03      	cmp	r3, #3
   1f934:	f000 8165 	beq.w	1fc02 <pdn_interface_pdn_id_get+0x402>
   1f938:	69e3      	ldr	r3, [r4, #28]
   1f93a:	b11b      	cbz	r3, 1f944 <pdn_interface_pdn_id_get+0x144>
   1f93c:	689b      	ldr	r3, [r3, #8]
   1f93e:	2b03      	cmp	r3, #3
   1f940:	f000 817a 	beq.w	1fc38 <pdn_interface_pdn_id_get+0x438>
   1f944:	6a23      	ldr	r3, [r4, #32]
   1f946:	b11b      	cbz	r3, 1f950 <pdn_interface_pdn_id_get+0x150>
   1f948:	689b      	ldr	r3, [r3, #8]
   1f94a:	2b03      	cmp	r3, #3
   1f94c:	f000 81c4 	beq.w	1fcd8 <pdn_interface_pdn_id_get+0x4d8>
   1f950:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f952:	2b00      	cmp	r3, #0
   1f954:	d09b      	beq.n	1f88e <pdn_interface_pdn_id_get+0x8e>
   1f956:	689b      	ldr	r3, [r3, #8]
   1f958:	2b03      	cmp	r3, #3
   1f95a:	d198      	bne.n	1f88e <pdn_interface_pdn_id_get+0x8e>
   1f95c:	4630      	mov	r0, r6
   1f95e:	f007 f97b 	bl	26c58 <strlen>
   1f962:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f964:	69da      	ldr	r2, [r3, #28]
   1f966:	4290      	cmp	r0, r2
   1f968:	d191      	bne.n	1f88e <pdn_interface_pdn_id_get+0x8e>
   1f96a:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   1f96e:	4429      	add	r1, r5
   1f970:	3120      	adds	r1, #32
   1f972:	4602      	mov	r2, r0
   1f974:	4419      	add	r1, r3
   1f976:	4630      	mov	r0, r6
   1f978:	f007 f99c 	bl	26cb4 <strncmp>
   1f97c:	2800      	cmp	r0, #0
   1f97e:	d186      	bne.n	1f88e <pdn_interface_pdn_id_get+0x8e>
   1f980:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f982:	68da      	ldr	r2, [r3, #12]
   1f984:	07d2      	lsls	r2, r2, #31
   1f986:	d582      	bpl.n	1f88e <pdn_interface_pdn_id_get+0x8e>
   1f988:	2509      	movs	r5, #9
   1f98a:	e0d1      	b.n	1fb30 <pdn_interface_pdn_id_get+0x330>
   1f98c:	4630      	mov	r0, r6
   1f98e:	f007 f963 	bl	26c58 <strlen>
   1f992:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f994:	69da      	ldr	r2, [r3, #28]
   1f996:	4290      	cmp	r0, r2
   1f998:	f47f af79 	bne.w	1f88e <pdn_interface_pdn_id_get+0x8e>
   1f99c:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   1f9a0:	4421      	add	r1, r4
   1f9a2:	3120      	adds	r1, #32
   1f9a4:	4602      	mov	r2, r0
   1f9a6:	4419      	add	r1, r3
   1f9a8:	4630      	mov	r0, r6
   1f9aa:	f007 f983 	bl	26cb4 <strncmp>
   1f9ae:	e76e      	b.n	1f88e <pdn_interface_pdn_id_get+0x8e>
   1f9b0:	4630      	mov	r0, r6
   1f9b2:	f007 f951 	bl	26c58 <strlen>
   1f9b6:	68e3      	ldr	r3, [r4, #12]
   1f9b8:	69da      	ldr	r2, [r3, #28]
   1f9ba:	4290      	cmp	r0, r2
   1f9bc:	f47f af44 	bne.w	1f848 <pdn_interface_pdn_id_get+0x48>
   1f9c0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f9c4:	4429      	add	r1, r5
   1f9c6:	3120      	adds	r1, #32
   1f9c8:	4602      	mov	r2, r0
   1f9ca:	4419      	add	r1, r3
   1f9cc:	4630      	mov	r0, r6
   1f9ce:	f007 f971 	bl	26cb4 <strncmp>
   1f9d2:	e739      	b.n	1f848 <pdn_interface_pdn_id_get+0x48>
   1f9d4:	4630      	mov	r0, r6
   1f9d6:	f007 f93f 	bl	26c58 <strlen>
   1f9da:	68a3      	ldr	r3, [r4, #8]
   1f9dc:	69da      	ldr	r2, [r3, #28]
   1f9de:	4290      	cmp	r0, r2
   1f9e0:	f47f af2c 	bne.w	1f83c <pdn_interface_pdn_id_get+0x3c>
   1f9e4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f9e8:	4429      	add	r1, r5
   1f9ea:	3120      	adds	r1, #32
   1f9ec:	4602      	mov	r2, r0
   1f9ee:	4419      	add	r1, r3
   1f9f0:	4630      	mov	r0, r6
   1f9f2:	f007 f95f 	bl	26cb4 <strncmp>
   1f9f6:	e721      	b.n	1f83c <pdn_interface_pdn_id_get+0x3c>
   1f9f8:	4630      	mov	r0, r6
   1f9fa:	f007 f92d 	bl	26c58 <strlen>
   1f9fe:	6863      	ldr	r3, [r4, #4]
   1fa00:	69da      	ldr	r2, [r3, #28]
   1fa02:	4290      	cmp	r0, r2
   1fa04:	f47f af14 	bne.w	1f830 <pdn_interface_pdn_id_get+0x30>
   1fa08:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa0c:	4429      	add	r1, r5
   1fa0e:	3120      	adds	r1, #32
   1fa10:	4602      	mov	r2, r0
   1fa12:	4419      	add	r1, r3
   1fa14:	4630      	mov	r0, r6
   1fa16:	f007 f94d 	bl	26cb4 <strncmp>
   1fa1a:	e709      	b.n	1f830 <pdn_interface_pdn_id_get+0x30>
   1fa1c:	4608      	mov	r0, r1
   1fa1e:	f007 f91b 	bl	26c58 <strlen>
   1fa22:	6823      	ldr	r3, [r4, #0]
   1fa24:	69da      	ldr	r2, [r3, #28]
   1fa26:	4282      	cmp	r2, r0
   1fa28:	f47f aefc 	bne.w	1f824 <pdn_interface_pdn_id_get+0x24>
   1fa2c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1fa30:	4401      	add	r1, r0
   1fa32:	3120      	adds	r1, #32
   1fa34:	4419      	add	r1, r3
   1fa36:	4630      	mov	r0, r6
   1fa38:	f007 f93c 	bl	26cb4 <strncmp>
   1fa3c:	e6f2      	b.n	1f824 <pdn_interface_pdn_id_get+0x24>
   1fa3e:	4630      	mov	r0, r6
   1fa40:	f007 f90a 	bl	26c58 <strlen>
   1fa44:	6923      	ldr	r3, [r4, #16]
   1fa46:	69da      	ldr	r2, [r3, #28]
   1fa48:	4290      	cmp	r0, r2
   1fa4a:	f47f af03 	bne.w	1f854 <pdn_interface_pdn_id_get+0x54>
   1fa4e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa52:	4429      	add	r1, r5
   1fa54:	3120      	adds	r1, #32
   1fa56:	4602      	mov	r2, r0
   1fa58:	4419      	add	r1, r3
   1fa5a:	4630      	mov	r0, r6
   1fa5c:	f007 f92a 	bl	26cb4 <strncmp>
   1fa60:	e6f8      	b.n	1f854 <pdn_interface_pdn_id_get+0x54>
   1fa62:	4630      	mov	r0, r6
   1fa64:	f007 f8f8 	bl	26c58 <strlen>
   1fa68:	6a23      	ldr	r3, [r4, #32]
   1fa6a:	69da      	ldr	r2, [r3, #28]
   1fa6c:	4290      	cmp	r0, r2
   1fa6e:	f47f af09 	bne.w	1f884 <pdn_interface_pdn_id_get+0x84>
   1fa72:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa76:	4429      	add	r1, r5
   1fa78:	3120      	adds	r1, #32
   1fa7a:	4602      	mov	r2, r0
   1fa7c:	4419      	add	r1, r3
   1fa7e:	4630      	mov	r0, r6
   1fa80:	f007 f918 	bl	26cb4 <strncmp>
   1fa84:	e6fe      	b.n	1f884 <pdn_interface_pdn_id_get+0x84>
   1fa86:	4630      	mov	r0, r6
   1fa88:	f007 f8e6 	bl	26c58 <strlen>
   1fa8c:	69e3      	ldr	r3, [r4, #28]
   1fa8e:	69da      	ldr	r2, [r3, #28]
   1fa90:	4290      	cmp	r0, r2
   1fa92:	f47f aef1 	bne.w	1f878 <pdn_interface_pdn_id_get+0x78>
   1fa96:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa9a:	4429      	add	r1, r5
   1fa9c:	3120      	adds	r1, #32
   1fa9e:	4602      	mov	r2, r0
   1faa0:	4419      	add	r1, r3
   1faa2:	4630      	mov	r0, r6
   1faa4:	f007 f906 	bl	26cb4 <strncmp>
   1faa8:	e6e6      	b.n	1f878 <pdn_interface_pdn_id_get+0x78>
   1faaa:	4630      	mov	r0, r6
   1faac:	f007 f8d4 	bl	26c58 <strlen>
   1fab0:	69a3      	ldr	r3, [r4, #24]
   1fab2:	69da      	ldr	r2, [r3, #28]
   1fab4:	4290      	cmp	r0, r2
   1fab6:	f47f aed9 	bne.w	1f86c <pdn_interface_pdn_id_get+0x6c>
   1faba:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fabe:	4429      	add	r1, r5
   1fac0:	3120      	adds	r1, #32
   1fac2:	4602      	mov	r2, r0
   1fac4:	4419      	add	r1, r3
   1fac6:	4630      	mov	r0, r6
   1fac8:	f007 f8f4 	bl	26cb4 <strncmp>
   1facc:	e6ce      	b.n	1f86c <pdn_interface_pdn_id_get+0x6c>
   1face:	bf00      	nop
   1fad0:	20021bc0 	.word	0x20021bc0
   1fad4:	20021bbc 	.word	0x20021bbc
   1fad8:	4630      	mov	r0, r6
   1fada:	f007 f8bd 	bl	26c58 <strlen>
   1fade:	6963      	ldr	r3, [r4, #20]
   1fae0:	69da      	ldr	r2, [r3, #28]
   1fae2:	4290      	cmp	r0, r2
   1fae4:	f47f aebc 	bne.w	1f860 <pdn_interface_pdn_id_get+0x60>
   1fae8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1faec:	4429      	add	r1, r5
   1faee:	3120      	adds	r1, #32
   1faf0:	4602      	mov	r2, r0
   1faf2:	4419      	add	r1, r3
   1faf4:	4630      	mov	r0, r6
   1faf6:	f007 f8dd 	bl	26cb4 <strncmp>
   1fafa:	e6b1      	b.n	1f860 <pdn_interface_pdn_id_get+0x60>
   1fafc:	4630      	mov	r0, r6
   1fafe:	f007 f8ab 	bl	26c58 <strlen>
   1fb02:	6923      	ldr	r3, [r4, #16]
   1fb04:	69da      	ldr	r2, [r3, #28]
   1fb06:	4290      	cmp	r0, r2
   1fb08:	f47f af0a 	bne.w	1f920 <pdn_interface_pdn_id_get+0x120>
   1fb0c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fb10:	4429      	add	r1, r5
   1fb12:	3120      	adds	r1, #32
   1fb14:	4602      	mov	r2, r0
   1fb16:	4419      	add	r1, r3
   1fb18:	4630      	mov	r0, r6
   1fb1a:	f007 f8cb 	bl	26cb4 <strncmp>
   1fb1e:	2800      	cmp	r0, #0
   1fb20:	f47f aefe 	bne.w	1f920 <pdn_interface_pdn_id_get+0x120>
   1fb24:	6923      	ldr	r3, [r4, #16]
   1fb26:	68da      	ldr	r2, [r3, #12]
   1fb28:	07d2      	lsls	r2, r2, #31
   1fb2a:	f57f aef9 	bpl.w	1f920 <pdn_interface_pdn_id_get+0x120>
   1fb2e:	2504      	movs	r5, #4
   1fb30:	6858      	ldr	r0, [r3, #4]
   1fb32:	1c43      	adds	r3, r0, #1
   1fb34:	f47f aead 	bne.w	1f892 <pdn_interface_pdn_id_get+0x92>
   1fb38:	4e9d      	ldr	r6, [pc, #628]	; (1fdb0 <pdn_interface_pdn_id_get+0x5b0>)
   1fb3a:	4b9e      	ldr	r3, [pc, #632]	; (1fdb4 <pdn_interface_pdn_id_get+0x5b4>)
   1fb3c:	4a9e      	ldr	r2, [pc, #632]	; (1fdb8 <pdn_interface_pdn_id_get+0x5b8>)
   1fb3e:	f44f 7180 	mov.w	r1, #256	; 0x100
   1fb42:	4630      	mov	r0, r6
   1fb44:	f006 fee8 	bl	26918 <snprintf>
   1fb48:	4c9c      	ldr	r4, [pc, #624]	; (1fdbc <pdn_interface_pdn_id_get+0x5bc>)
   1fb4a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1fb4e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fb52:	4a9b      	ldr	r2, [pc, #620]	; (1fdc0 <pdn_interface_pdn_id_get+0x5c0>)
   1fb54:	681b      	ldr	r3, [r3, #0]
   1fb56:	4430      	add	r0, r6
   1fb58:	f8df 8270 	ldr.w	r8, [pc, #624]	; 1fdcc <pdn_interface_pdn_id_get+0x5cc>
   1fb5c:	f006 fedc 	bl	26918 <snprintf>
   1fb60:	4630      	mov	r0, r6
   1fb62:	f8d8 9000 	ldr.w	r9, [r8]
   1fb66:	2700      	movs	r7, #0
   1fb68:	f007 f876 	bl	26c58 <strlen>
   1fb6c:	4631      	mov	r1, r6
   1fb6e:	4602      	mov	r2, r0
   1fb70:	463b      	mov	r3, r7
   1fb72:	4648      	mov	r0, r9
   1fb74:	9701      	str	r7, [sp, #4]
   1fb76:	9700      	str	r7, [sp, #0]
   1fb78:	f7fe fde0 	bl	1e73c <at_interface_write>
   1fb7c:	4681      	mov	r9, r0
   1fb7e:	4630      	mov	r0, r6
   1fb80:	f007 f86a 	bl	26c58 <strlen>
   1fb84:	4548      	cmp	r0, r9
   1fb86:	f040 810b 	bne.w	1fda0 <pdn_interface_pdn_id_get+0x5a0>
   1fb8a:	463b      	mov	r3, r7
   1fb8c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1fb90:	e9cd 7700 	strd	r7, r7, [sp]
   1fb94:	4631      	mov	r1, r6
   1fb96:	f8d8 0000 	ldr.w	r0, [r8]
   1fb9a:	f7fe ff23 	bl	1e9e4 <at_interface_read>
   1fb9e:	4607      	mov	r7, r0
   1fba0:	4888      	ldr	r0, [pc, #544]	; (1fdc4 <pdn_interface_pdn_id_get+0x5c4>)
   1fba2:	f007 f859 	bl	26c58 <strlen>
   1fba6:	4287      	cmp	r7, r0
   1fba8:	4602      	mov	r2, r0
   1fbaa:	f2c0 80e9 	blt.w	1fd80 <pdn_interface_pdn_id_get+0x580>
   1fbae:	4631      	mov	r1, r6
   1fbb0:	4884      	ldr	r0, [pc, #528]	; (1fdc4 <pdn_interface_pdn_id_get+0x5c4>)
   1fbb2:	f007 f87f 	bl	26cb4 <strncmp>
   1fbb6:	2800      	cmp	r0, #0
   1fbb8:	f040 80e2 	bne.w	1fd80 <pdn_interface_pdn_id_get+0x580>
   1fbbc:	4631      	mov	r1, r6
   1fbbe:	4628      	mov	r0, r5
   1fbc0:	f7ff f830 	bl	1ec24 <pdn_id_get_parser>
   1fbc4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fbc8:	6858      	ldr	r0, [r3, #4]
   1fbca:	e662      	b.n	1f892 <pdn_interface_pdn_id_get+0x92>
   1fbcc:	4630      	mov	r0, r6
   1fbce:	f007 f843 	bl	26c58 <strlen>
   1fbd2:	6963      	ldr	r3, [r4, #20]
   1fbd4:	69da      	ldr	r2, [r3, #28]
   1fbd6:	4290      	cmp	r0, r2
   1fbd8:	f47f aea8 	bne.w	1f92c <pdn_interface_pdn_id_get+0x12c>
   1fbdc:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fbe0:	4429      	add	r1, r5
   1fbe2:	3120      	adds	r1, #32
   1fbe4:	4602      	mov	r2, r0
   1fbe6:	4419      	add	r1, r3
   1fbe8:	4630      	mov	r0, r6
   1fbea:	f007 f863 	bl	26cb4 <strncmp>
   1fbee:	2800      	cmp	r0, #0
   1fbf0:	f47f ae9c 	bne.w	1f92c <pdn_interface_pdn_id_get+0x12c>
   1fbf4:	6963      	ldr	r3, [r4, #20]
   1fbf6:	68da      	ldr	r2, [r3, #12]
   1fbf8:	07d7      	lsls	r7, r2, #31
   1fbfa:	f57f ae97 	bpl.w	1f92c <pdn_interface_pdn_id_get+0x12c>
   1fbfe:	2505      	movs	r5, #5
   1fc00:	e796      	b.n	1fb30 <pdn_interface_pdn_id_get+0x330>
   1fc02:	4630      	mov	r0, r6
   1fc04:	f007 f828 	bl	26c58 <strlen>
   1fc08:	69a3      	ldr	r3, [r4, #24]
   1fc0a:	69da      	ldr	r2, [r3, #28]
   1fc0c:	4290      	cmp	r0, r2
   1fc0e:	f47f ae93 	bne.w	1f938 <pdn_interface_pdn_id_get+0x138>
   1fc12:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc16:	4429      	add	r1, r5
   1fc18:	3120      	adds	r1, #32
   1fc1a:	4602      	mov	r2, r0
   1fc1c:	4419      	add	r1, r3
   1fc1e:	4630      	mov	r0, r6
   1fc20:	f007 f848 	bl	26cb4 <strncmp>
   1fc24:	2800      	cmp	r0, #0
   1fc26:	f47f ae87 	bne.w	1f938 <pdn_interface_pdn_id_get+0x138>
   1fc2a:	69a3      	ldr	r3, [r4, #24]
   1fc2c:	68da      	ldr	r2, [r3, #12]
   1fc2e:	07d5      	lsls	r5, r2, #31
   1fc30:	f57f ae82 	bpl.w	1f938 <pdn_interface_pdn_id_get+0x138>
   1fc34:	2506      	movs	r5, #6
   1fc36:	e77b      	b.n	1fb30 <pdn_interface_pdn_id_get+0x330>
   1fc38:	4630      	mov	r0, r6
   1fc3a:	f007 f80d 	bl	26c58 <strlen>
   1fc3e:	69e3      	ldr	r3, [r4, #28]
   1fc40:	69da      	ldr	r2, [r3, #28]
   1fc42:	4290      	cmp	r0, r2
   1fc44:	f47f ae7e 	bne.w	1f944 <pdn_interface_pdn_id_get+0x144>
   1fc48:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc4c:	4429      	add	r1, r5
   1fc4e:	3120      	adds	r1, #32
   1fc50:	4602      	mov	r2, r0
   1fc52:	4419      	add	r1, r3
   1fc54:	4630      	mov	r0, r6
   1fc56:	f007 f82d 	bl	26cb4 <strncmp>
   1fc5a:	2800      	cmp	r0, #0
   1fc5c:	f47f ae72 	bne.w	1f944 <pdn_interface_pdn_id_get+0x144>
   1fc60:	69e3      	ldr	r3, [r4, #28]
   1fc62:	68da      	ldr	r2, [r3, #12]
   1fc64:	07d0      	lsls	r0, r2, #31
   1fc66:	f57f ae6d 	bpl.w	1f944 <pdn_interface_pdn_id_get+0x144>
   1fc6a:	2507      	movs	r5, #7
   1fc6c:	e760      	b.n	1fb30 <pdn_interface_pdn_id_get+0x330>
   1fc6e:	4630      	mov	r0, r6
   1fc70:	f006 fff2 	bl	26c58 <strlen>
   1fc74:	68a3      	ldr	r3, [r4, #8]
   1fc76:	69da      	ldr	r2, [r3, #28]
   1fc78:	4290      	cmp	r0, r2
   1fc7a:	f47f ae45 	bne.w	1f908 <pdn_interface_pdn_id_get+0x108>
   1fc7e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc82:	4429      	add	r1, r5
   1fc84:	3120      	adds	r1, #32
   1fc86:	4602      	mov	r2, r0
   1fc88:	4419      	add	r1, r3
   1fc8a:	4630      	mov	r0, r6
   1fc8c:	f007 f812 	bl	26cb4 <strncmp>
   1fc90:	2800      	cmp	r0, #0
   1fc92:	f47f ae39 	bne.w	1f908 <pdn_interface_pdn_id_get+0x108>
   1fc96:	68a3      	ldr	r3, [r4, #8]
   1fc98:	68da      	ldr	r2, [r3, #12]
   1fc9a:	07d0      	lsls	r0, r2, #31
   1fc9c:	f57f ae34 	bpl.w	1f908 <pdn_interface_pdn_id_get+0x108>
   1fca0:	2502      	movs	r5, #2
   1fca2:	e745      	b.n	1fb30 <pdn_interface_pdn_id_get+0x330>
   1fca4:	4630      	mov	r0, r6
   1fca6:	f006 ffd7 	bl	26c58 <strlen>
   1fcaa:	68e3      	ldr	r3, [r4, #12]
   1fcac:	69da      	ldr	r2, [r3, #28]
   1fcae:	4290      	cmp	r0, r2
   1fcb0:	f47f ae30 	bne.w	1f914 <pdn_interface_pdn_id_get+0x114>
   1fcb4:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   1fcb8:	4439      	add	r1, r7
   1fcba:	3120      	adds	r1, #32
   1fcbc:	4602      	mov	r2, r0
   1fcbe:	4419      	add	r1, r3
   1fcc0:	4630      	mov	r0, r6
   1fcc2:	f006 fff7 	bl	26cb4 <strncmp>
   1fcc6:	2800      	cmp	r0, #0
   1fcc8:	f47f ae24 	bne.w	1f914 <pdn_interface_pdn_id_get+0x114>
   1fccc:	68e3      	ldr	r3, [r4, #12]
   1fcce:	68da      	ldr	r2, [r3, #12]
   1fcd0:	07d1      	lsls	r1, r2, #31
   1fcd2:	f53f af2d 	bmi.w	1fb30 <pdn_interface_pdn_id_get+0x330>
   1fcd6:	e61d      	b.n	1f914 <pdn_interface_pdn_id_get+0x114>
   1fcd8:	4630      	mov	r0, r6
   1fcda:	f006 ffbd 	bl	26c58 <strlen>
   1fcde:	6a23      	ldr	r3, [r4, #32]
   1fce0:	69da      	ldr	r2, [r3, #28]
   1fce2:	4290      	cmp	r0, r2
   1fce4:	f47f ae34 	bne.w	1f950 <pdn_interface_pdn_id_get+0x150>
   1fce8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fcec:	4429      	add	r1, r5
   1fcee:	3120      	adds	r1, #32
   1fcf0:	4602      	mov	r2, r0
   1fcf2:	4419      	add	r1, r3
   1fcf4:	4630      	mov	r0, r6
   1fcf6:	f006 ffdd 	bl	26cb4 <strncmp>
   1fcfa:	2800      	cmp	r0, #0
   1fcfc:	f47f ae28 	bne.w	1f950 <pdn_interface_pdn_id_get+0x150>
   1fd00:	6a23      	ldr	r3, [r4, #32]
   1fd02:	68da      	ldr	r2, [r3, #12]
   1fd04:	07d1      	lsls	r1, r2, #31
   1fd06:	f57f ae23 	bpl.w	1f950 <pdn_interface_pdn_id_get+0x150>
   1fd0a:	2508      	movs	r5, #8
   1fd0c:	e710      	b.n	1fb30 <pdn_interface_pdn_id_get+0x330>
   1fd0e:	4630      	mov	r0, r6
   1fd10:	f006 ffa2 	bl	26c58 <strlen>
   1fd14:	6863      	ldr	r3, [r4, #4]
   1fd16:	69da      	ldr	r2, [r3, #28]
   1fd18:	4290      	cmp	r0, r2
   1fd1a:	f47f adef 	bne.w	1f8fc <pdn_interface_pdn_id_get+0xfc>
   1fd1e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fd22:	4429      	add	r1, r5
   1fd24:	3120      	adds	r1, #32
   1fd26:	4602      	mov	r2, r0
   1fd28:	4419      	add	r1, r3
   1fd2a:	4630      	mov	r0, r6
   1fd2c:	f006 ffc2 	bl	26cb4 <strncmp>
   1fd30:	2800      	cmp	r0, #0
   1fd32:	f47f ade3 	bne.w	1f8fc <pdn_interface_pdn_id_get+0xfc>
   1fd36:	6863      	ldr	r3, [r4, #4]
   1fd38:	68da      	ldr	r2, [r3, #12]
   1fd3a:	07d5      	lsls	r5, r2, #31
   1fd3c:	f57f adde 	bpl.w	1f8fc <pdn_interface_pdn_id_get+0xfc>
   1fd40:	2501      	movs	r5, #1
   1fd42:	e6f5      	b.n	1fb30 <pdn_interface_pdn_id_get+0x330>
   1fd44:	4608      	mov	r0, r1
   1fd46:	f006 ff87 	bl	26c58 <strlen>
   1fd4a:	6823      	ldr	r3, [r4, #0]
   1fd4c:	69da      	ldr	r2, [r3, #28]
   1fd4e:	4290      	cmp	r0, r2
   1fd50:	f47f adce 	bne.w	1f8f0 <pdn_interface_pdn_id_get+0xf0>
   1fd54:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fd58:	4429      	add	r1, r5
   1fd5a:	3120      	adds	r1, #32
   1fd5c:	4602      	mov	r2, r0
   1fd5e:	4419      	add	r1, r3
   1fd60:	4630      	mov	r0, r6
   1fd62:	f006 ffa7 	bl	26cb4 <strncmp>
   1fd66:	4605      	mov	r5, r0
   1fd68:	2800      	cmp	r0, #0
   1fd6a:	f47f adc1 	bne.w	1f8f0 <pdn_interface_pdn_id_get+0xf0>
   1fd6e:	6823      	ldr	r3, [r4, #0]
   1fd70:	68da      	ldr	r2, [r3, #12]
   1fd72:	07d7      	lsls	r7, r2, #31
   1fd74:	f53f aedc 	bmi.w	1fb30 <pdn_interface_pdn_id_get+0x330>
   1fd78:	e5ba      	b.n	1f8f0 <pdn_interface_pdn_id_get+0xf0>
   1fd7a:	f04f 30ff 	mov.w	r0, #4294967295
   1fd7e:	4770      	bx	lr
   1fd80:	4811      	ldr	r0, [pc, #68]	; (1fdc8 <pdn_interface_pdn_id_get+0x5c8>)
   1fd82:	f006 ff69 	bl	26c58 <strlen>
   1fd86:	490a      	ldr	r1, [pc, #40]	; (1fdb0 <pdn_interface_pdn_id_get+0x5b0>)
   1fd88:	4602      	mov	r2, r0
   1fd8a:	480f      	ldr	r0, [pc, #60]	; (1fdc8 <pdn_interface_pdn_id_get+0x5c8>)
   1fd8c:	f006 ff92 	bl	26cb4 <strncmp>
   1fd90:	b930      	cbnz	r0, 1fda0 <pdn_interface_pdn_id_get+0x5a0>
   1fd92:	2008      	movs	r0, #8
   1fd94:	f7f6 fef4 	bl	16b80 <bsd_os_errno_set>
   1fd98:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fd9c:	6858      	ldr	r0, [r3, #4]
   1fd9e:	e578      	b.n	1f892 <pdn_interface_pdn_id_get+0x92>
   1fda0:	2005      	movs	r0, #5
   1fda2:	f7f6 feed 	bl	16b80 <bsd_os_errno_set>
   1fda6:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fdaa:	6858      	ldr	r0, [r3, #4]
   1fdac:	e571      	b.n	1f892 <pdn_interface_pdn_id_get+0x92>
   1fdae:	bf00      	nop
   1fdb0:	20021ac0 	.word	0x20021ac0
   1fdb4:	0002f714 	.word	0x0002f714
   1fdb8:	0002f750 	.word	0x0002f750
   1fdbc:	20021bc0 	.word	0x20021bc0
   1fdc0:	0002f710 	.word	0x0002f710
   1fdc4:	0002f724 	.word	0x0002f724
   1fdc8:	0002f760 	.word	0x0002f760
   1fdcc:	20021abc 	.word	0x20021abc

0001fdd0 <bsd_platform_error_handler>:
   1fdd0:	b508      	push	{r3, lr}
   1fdd2:	f7f1 fcd9 	bl	11788 <bsd_recoverable_error_handler>
   1fdd6:	bd08      	pop	{r3, pc}

0001fdd8 <bsd_init>:
   1fdd8:	b160      	cbz	r0, 1fdf4 <bsd_init+0x1c>
   1fdda:	b510      	push	{r4, lr}
   1fddc:	4c07      	ldr	r4, [pc, #28]	; (1fdfc <bsd_init+0x24>)
   1fdde:	7823      	ldrb	r3, [r4, #0]
   1fde0:	b92b      	cbnz	r3, 1fdee <bsd_init+0x16>
   1fde2:	f000 f81b 	bl	1fe1c <bsd_platform_init>
   1fde6:	b908      	cbnz	r0, 1fdec <bsd_init+0x14>
   1fde8:	2301      	movs	r3, #1
   1fdea:	7023      	strb	r3, [r4, #0]
   1fdec:	bd10      	pop	{r4, pc}
   1fdee:	f04f 30ff 	mov.w	r0, #4294967295
   1fdf2:	bd10      	pop	{r4, pc}
   1fdf4:	f04f 30ff 	mov.w	r0, #4294967295
   1fdf8:	4770      	bx	lr
   1fdfa:	bf00      	nop
   1fdfc:	2002629f 	.word	0x2002629f

0001fe00 <unimplemented_method>:
   1fe00:	b40f      	push	{r0, r1, r2, r3}
   1fe02:	b508      	push	{r3, lr}
   1fe04:	202d      	movs	r0, #45	; 0x2d
   1fe06:	f7f6 febb 	bl	16b80 <bsd_os_errno_set>
   1fe0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1fe0e:	f04f 30ff 	mov.w	r0, #4294967295
   1fe12:	b004      	add	sp, #16
   1fe14:	4770      	bx	lr
   1fe16:	bf00      	nop

0001fe18 <rpc_transport_ipc_fault_handler>:
   1fe18:	f7ff bfda 	b.w	1fdd0 <bsd_platform_error_handler>

0001fe1c <bsd_platform_init>:
   1fe1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe1e:	f04f 0c00 	mov.w	ip, #0
   1fe22:	f247 0660 	movw	r6, #28768	; 0x7060
   1fe26:	f24b 0260 	movw	r2, #45152	; 0xb060
   1fe2a:	6843      	ldr	r3, [r0, #4]
   1fe2c:	4d3a      	ldr	r5, [pc, #232]	; (1ff18 <bsd_platform_init+0xfc>)
   1fe2e:	4607      	mov	r7, r0
   1fe30:	602b      	str	r3, [r5, #0]
   1fe32:	7801      	ldrb	r1, [r0, #0]
   1fe34:	2006      	movs	r0, #6
   1fe36:	4561      	cmp	r1, ip
   1fe38:	bf08      	it	eq
   1fe3a:	4632      	moveq	r2, r6
   1fe3c:	4413      	add	r3, r2
   1fe3e:	4c37      	ldr	r4, [pc, #220]	; (1ff1c <bsd_platform_init+0x100>)
   1fe40:	60ab      	str	r3, [r5, #8]
   1fe42:	68b9      	ldr	r1, [r7, #8]
   1fe44:	6063      	str	r3, [r4, #4]
   1fe46:	4b36      	ldr	r3, [pc, #216]	; (1ff20 <bsd_platform_init+0x104>)
   1fe48:	b093      	sub	sp, #76	; 0x4c
   1fe4a:	606a      	str	r2, [r5, #4]
   1fe4c:	f8a4 c000 	strh.w	ip, [r4]
   1fe50:	1a8a      	subs	r2, r1, r2
   1fe52:	60ea      	str	r2, [r5, #12]
   1fe54:	60a2      	str	r2, [r4, #8]
   1fe56:	81a0      	strh	r0, [r4, #12]
   1fe58:	6123      	str	r3, [r4, #16]
   1fe5a:	f001 f883 	bl	20f64 <nrf_mem_init>
   1fe5e:	2800      	cmp	r0, #0
   1fe60:	d156      	bne.n	1ff10 <bsd_platform_init+0xf4>
   1fe62:	4621      	mov	r1, r4
   1fe64:	a801      	add	r0, sp, #4
   1fe66:	f001 f8f1 	bl	2104c <nrf_mem_register>
   1fe6a:	2800      	cmp	r0, #0
   1fe6c:	d150      	bne.n	1ff10 <bsd_platform_init+0xf4>
   1fe6e:	f7f7 f851 	bl	16f14 <bsd_os_init>
   1fe72:	f7fd fbff 	bl	1d674 <rpc_framework_init>
   1fe76:	2800      	cmp	r0, #0
   1fe78:	d14a      	bne.n	1ff10 <bsd_platform_init+0xf4>
   1fe7a:	783a      	ldrb	r2, [r7, #0]
   1fe7c:	682b      	ldr	r3, [r5, #0]
   1fe7e:	bb32      	cbnz	r2, 1fece <bsd_platform_init+0xb2>
   1fe80:	4606      	mov	r6, r0
   1fe82:	2220      	movs	r2, #32
   1fe84:	2408      	movs	r4, #8
   1fe86:	2500      	movs	r5, #0
   1fe88:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   1fe8c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   1fe90:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   1fe94:	4411      	add	r1, r2
   1fe96:	9302      	str	r3, [sp, #8]
   1fe98:	e9cd 6008 	strd	r6, r0, [sp, #32]
   1fe9c:	910c      	str	r1, [sp, #48]	; 0x30
   1fe9e:	9203      	str	r2, [sp, #12]
   1fea0:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1fea4:	9205      	str	r2, [sp, #20]
   1fea6:	9207      	str	r2, [sp, #28]
   1fea8:	eb0d 0004 	add.w	r0, sp, r4
   1feac:	189a      	adds	r2, r3, r2
   1feae:	3360      	adds	r3, #96	; 0x60
   1feb0:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1feb4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1feb8:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   1febc:	940f      	str	r4, [sp, #60]	; 0x3c
   1febe:	9104      	str	r1, [sp, #16]
   1fec0:	9206      	str	r2, [sp, #24]
   1fec2:	930a      	str	r3, [sp, #40]	; 0x28
   1fec4:	f7fa fb3a 	bl	1a53c <rpc_transport_ipc_init>
   1fec8:	b128      	cbz	r0, 1fed6 <bsd_platform_init+0xba>
   1feca:	b013      	add	sp, #76	; 0x4c
   1fecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fece:	441e      	add	r6, r3
   1fed0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1fed4:	e7d5      	b.n	1fe82 <bsd_platform_init+0x66>
   1fed6:	f001 fda9 	bl	21a2c <interface_init>
   1feda:	b9c8      	cbnz	r0, 1ff10 <bsd_platform_init+0xf4>
   1fedc:	f7fe fcac 	bl	1e838 <at_interface_init>
   1fee0:	b9b0      	cbnz	r0, 1ff10 <bsd_platform_init+0xf4>
   1fee2:	f7fb fe4b 	bl	1bb7c <ip_interface_init>
   1fee6:	b998      	cbnz	r0, 1ff10 <bsd_platform_init+0xf4>
   1fee8:	f7fb f902 	bl	1b0f0 <tls_interface_init>
   1feec:	b980      	cbnz	r0, 1ff10 <bsd_platform_init+0xf4>
   1feee:	f001 fab9 	bl	21464 <mfu_interface_init>
   1fef2:	b968      	cbnz	r0, 1ff10 <bsd_platform_init+0xf4>
   1fef4:	f7fe feee 	bl	1ecd4 <pdn_interface_init>
   1fef8:	b950      	cbnz	r0, 1ff10 <bsd_platform_init+0xf4>
   1fefa:	f7fe faf3 	bl	1e4e4 <gnss_interface_init>
   1fefe:	b938      	cbnz	r0, 1ff10 <bsd_platform_init+0xf4>
   1ff00:	f7f9 fd5a 	bl	199b8 <logobj_interface_init>
   1ff04:	1b40      	subs	r0, r0, r5
   1ff06:	bf18      	it	ne
   1ff08:	2001      	movne	r0, #1
   1ff0a:	4240      	negs	r0, r0
   1ff0c:	b013      	add	sp, #76	; 0x4c
   1ff0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff10:	f04f 30ff 	mov.w	r0, #4294967295
   1ff14:	b013      	add	sp, #76	; 0x4c
   1ff16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff18:	20021bfc 	.word	0x20021bfc
   1ff1c:	20021be8 	.word	0x20021be8
   1ff20:	0002f8b4 	.word	0x0002f8b4

0001ff24 <bsd_platform_af_method_table_get>:
   1ff24:	2805      	cmp	r0, #5
   1ff26:	d02a      	beq.n	1ff7e <bsd_platform_af_method_table_get+0x5a>
   1ff28:	b508      	push	{r3, lr}
   1ff2a:	d914      	bls.n	1ff56 <bsd_platform_af_method_table_get+0x32>
   1ff2c:	280a      	cmp	r0, #10
   1ff2e:	d016      	beq.n	1ff5e <bsd_platform_af_method_table_get+0x3a>
   1ff30:	2866      	cmp	r0, #102	; 0x66
   1ff32:	d11f      	bne.n	1ff74 <bsd_platform_af_method_table_get+0x50>
   1ff34:	f240 2302 	movw	r3, #514	; 0x202
   1ff38:	429a      	cmp	r2, r3
   1ff3a:	d035      	beq.n	1ffa8 <bsd_platform_af_method_table_get+0x84>
   1ff3c:	f240 2305 	movw	r3, #517	; 0x205
   1ff40:	429a      	cmp	r2, r3
   1ff42:	d035      	beq.n	1ffb0 <bsd_platform_af_method_table_get+0x8c>
   1ff44:	f240 2301 	movw	r3, #513	; 0x201
   1ff48:	429a      	cmp	r2, r3
   1ff4a:	d02f      	beq.n	1ffac <bsd_platform_af_method_table_get+0x88>
   1ff4c:	202b      	movs	r0, #43	; 0x2b
   1ff4e:	f7f6 fe17 	bl	16b80 <bsd_os_errno_set>
   1ff52:	2000      	movs	r0, #0
   1ff54:	bd08      	pop	{r3, pc}
   1ff56:	2801      	cmp	r0, #1
   1ff58:	d016      	beq.n	1ff88 <bsd_platform_af_method_table_get+0x64>
   1ff5a:	2802      	cmp	r0, #2
   1ff5c:	d10a      	bne.n	1ff74 <bsd_platform_af_method_table_get+0x50>
   1ff5e:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1ff62:	d21a      	bcs.n	1ff9a <bsd_platform_af_method_table_get+0x76>
   1ff64:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1ff68:	d21a      	bcs.n	1ffa0 <bsd_platform_af_method_table_get+0x7c>
   1ff6a:	3a01      	subs	r2, #1
   1ff6c:	2a01      	cmp	r2, #1
   1ff6e:	d8ed      	bhi.n	1ff4c <bsd_platform_af_method_table_get+0x28>
   1ff70:	4810      	ldr	r0, [pc, #64]	; (1ffb4 <bsd_platform_af_method_table_get+0x90>)
   1ff72:	bd08      	pop	{r3, pc}
   1ff74:	2016      	movs	r0, #22
   1ff76:	f7f6 fe03 	bl	16b80 <bsd_os_errno_set>
   1ff7a:	2000      	movs	r0, #0
   1ff7c:	bd08      	pop	{r3, pc}
   1ff7e:	2903      	cmp	r1, #3
   1ff80:	480d      	ldr	r0, [pc, #52]	; (1ffb8 <bsd_platform_af_method_table_get+0x94>)
   1ff82:	bf18      	it	ne
   1ff84:	2000      	movne	r0, #0
   1ff86:	4770      	bx	lr
   1ff88:	f240 2303 	movw	r3, #515	; 0x203
   1ff8c:	429a      	cmp	r2, r3
   1ff8e:	d009      	beq.n	1ffa4 <bsd_platform_af_method_table_get+0x80>
   1ff90:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1ff94:	d1da      	bne.n	1ff4c <bsd_platform_af_method_table_get+0x28>
   1ff96:	4809      	ldr	r0, [pc, #36]	; (1ffbc <bsd_platform_af_method_table_get+0x98>)
   1ff98:	bd08      	pop	{r3, pc}
   1ff9a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1ff9e:	d1d5      	bne.n	1ff4c <bsd_platform_af_method_table_get+0x28>
   1ffa0:	4807      	ldr	r0, [pc, #28]	; (1ffc0 <bsd_platform_af_method_table_get+0x9c>)
   1ffa2:	bd08      	pop	{r3, pc}
   1ffa4:	4807      	ldr	r0, [pc, #28]	; (1ffc4 <bsd_platform_af_method_table_get+0xa0>)
   1ffa6:	bd08      	pop	{r3, pc}
   1ffa8:	4807      	ldr	r0, [pc, #28]	; (1ffc8 <bsd_platform_af_method_table_get+0xa4>)
   1ffaa:	bd08      	pop	{r3, pc}
   1ffac:	4807      	ldr	r0, [pc, #28]	; (1ffcc <bsd_platform_af_method_table_get+0xa8>)
   1ffae:	bd08      	pop	{r3, pc}
   1ffb0:	4807      	ldr	r0, [pc, #28]	; (1ffd0 <bsd_platform_af_method_table_get+0xac>)
   1ffb2:	bd08      	pop	{r3, pc}
   1ffb4:	0002f79c 	.word	0x0002f79c
   1ffb8:	0002f88c 	.word	0x0002f88c
   1ffbc:	0002f83c 	.word	0x0002f83c
   1ffc0:	0002f7c4 	.word	0x0002f7c4
   1ffc4:	0002f7ec 	.word	0x0002f7ec
   1ffc8:	0002f814 	.word	0x0002f814
   1ffcc:	0002f774 	.word	0x0002f774
   1ffd0:	0002f864 	.word	0x0002f864

0001ffd4 <bsd_platform_fd_method_table_get>:
   1ffd4:	b538      	push	{r3, r4, r5, lr}
   1ffd6:	4605      	mov	r5, r0
   1ffd8:	f001 fe5a 	bl	21c90 <interface_socket_from_handle_get>
   1ffdc:	4604      	mov	r4, r0
   1ffde:	b960      	cbnz	r0, 1fffa <bsd_platform_fd_method_table_get+0x26>
   1ffe0:	4b2c      	ldr	r3, [pc, #176]	; (20094 <bsd_platform_fd_method_table_get+0xc0>)
   1ffe2:	429d      	cmp	r5, r3
   1ffe4:	d02f      	beq.n	20046 <bsd_platform_fd_method_table_get+0x72>
   1ffe6:	0c2b      	lsrs	r3, r5, #16
   1ffe8:	4a2b      	ldr	r2, [pc, #172]	; (20098 <bsd_platform_fd_method_table_get+0xc4>)
   1ffea:	041b      	lsls	r3, r3, #16
   1ffec:	4293      	cmp	r3, r2
   1ffee:	d03d      	beq.n	2006c <bsd_platform_fd_method_table_get+0x98>
   1fff0:	4b2a      	ldr	r3, [pc, #168]	; (2009c <bsd_platform_fd_method_table_get+0xc8>)
   1fff2:	429d      	cmp	r5, r3
   1fff4:	d149      	bne.n	2008a <bsd_platform_fd_method_table_get+0xb6>
   1fff6:	482a      	ldr	r0, [pc, #168]	; (200a0 <bsd_platform_fd_method_table_get+0xcc>)
   1fff8:	bd38      	pop	{r3, r4, r5, pc}
   1fffa:	68c3      	ldr	r3, [r0, #12]
   1fffc:	6942      	ldr	r2, [r0, #20]
   1fffe:	2b05      	cmp	r3, #5
   20000:	d036      	beq.n	20070 <bsd_platform_fd_method_table_get+0x9c>
   20002:	d911      	bls.n	20028 <bsd_platform_fd_method_table_get+0x54>
   20004:	2b0a      	cmp	r3, #10
   20006:	d013      	beq.n	20030 <bsd_platform_fd_method_table_get+0x5c>
   20008:	2b66      	cmp	r3, #102	; 0x66
   2000a:	d11e      	bne.n	2004a <bsd_platform_fd_method_table_get+0x76>
   2000c:	f240 2302 	movw	r3, #514	; 0x202
   20010:	429a      	cmp	r2, r3
   20012:	d02b      	beq.n	2006c <bsd_platform_fd_method_table_get+0x98>
   20014:	f240 2305 	movw	r3, #517	; 0x205
   20018:	429a      	cmp	r2, r3
   2001a:	d02f      	beq.n	2007c <bsd_platform_fd_method_table_get+0xa8>
   2001c:	f240 2301 	movw	r3, #513	; 0x201
   20020:	429a      	cmp	r2, r3
   20022:	d11e      	bne.n	20062 <bsd_platform_fd_method_table_get+0x8e>
   20024:	481f      	ldr	r0, [pc, #124]	; (200a4 <bsd_platform_fd_method_table_get+0xd0>)
   20026:	bd38      	pop	{r3, r4, r5, pc}
   20028:	2b01      	cmp	r3, #1
   2002a:	d013      	beq.n	20054 <bsd_platform_fd_method_table_get+0x80>
   2002c:	2b02      	cmp	r3, #2
   2002e:	d10c      	bne.n	2004a <bsd_platform_fd_method_table_get+0x76>
   20030:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   20034:	d224      	bcs.n	20080 <bsd_platform_fd_method_table_get+0xac>
   20036:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2003a:	d224      	bcs.n	20086 <bsd_platform_fd_method_table_get+0xb2>
   2003c:	3a01      	subs	r2, #1
   2003e:	2a01      	cmp	r2, #1
   20040:	d80f      	bhi.n	20062 <bsd_platform_fd_method_table_get+0x8e>
   20042:	4819      	ldr	r0, [pc, #100]	; (200a8 <bsd_platform_fd_method_table_get+0xd4>)
   20044:	bd38      	pop	{r3, r4, r5, pc}
   20046:	4819      	ldr	r0, [pc, #100]	; (200ac <bsd_platform_fd_method_table_get+0xd8>)
   20048:	bd38      	pop	{r3, r4, r5, pc}
   2004a:	2016      	movs	r0, #22
   2004c:	f7f6 fd98 	bl	16b80 <bsd_os_errno_set>
   20050:	2000      	movs	r0, #0
   20052:	bd38      	pop	{r3, r4, r5, pc}
   20054:	f240 2303 	movw	r3, #515	; 0x203
   20058:	429a      	cmp	r2, r3
   2005a:	d0f4      	beq.n	20046 <bsd_platform_fd_method_table_get+0x72>
   2005c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   20060:	d0c9      	beq.n	1fff6 <bsd_platform_fd_method_table_get+0x22>
   20062:	202b      	movs	r0, #43	; 0x2b
   20064:	f7f6 fd8c 	bl	16b80 <bsd_os_errno_set>
   20068:	2000      	movs	r0, #0
   2006a:	bd38      	pop	{r3, r4, r5, pc}
   2006c:	4810      	ldr	r0, [pc, #64]	; (200b0 <bsd_platform_fd_method_table_get+0xdc>)
   2006e:	bd38      	pop	{r3, r4, r5, pc}
   20070:	6903      	ldr	r3, [r0, #16]
   20072:	4810      	ldr	r0, [pc, #64]	; (200b4 <bsd_platform_fd_method_table_get+0xe0>)
   20074:	2b03      	cmp	r3, #3
   20076:	bf18      	it	ne
   20078:	2000      	movne	r0, #0
   2007a:	bd38      	pop	{r3, r4, r5, pc}
   2007c:	480e      	ldr	r0, [pc, #56]	; (200b8 <bsd_platform_fd_method_table_get+0xe4>)
   2007e:	bd38      	pop	{r3, r4, r5, pc}
   20080:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   20084:	d1ed      	bne.n	20062 <bsd_platform_fd_method_table_get+0x8e>
   20086:	480d      	ldr	r0, [pc, #52]	; (200bc <bsd_platform_fd_method_table_get+0xe8>)
   20088:	bd38      	pop	{r3, r4, r5, pc}
   2008a:	2009      	movs	r0, #9
   2008c:	f7f6 fd78 	bl	16b80 <bsd_os_errno_set>
   20090:	4620      	mov	r0, r4
   20092:	bd38      	pop	{r3, r4, r5, pc}
   20094:	49765432 	.word	0x49765432
   20098:	789a0000 	.word	0x789a0000
   2009c:	49765443 	.word	0x49765443
   200a0:	0002f83c 	.word	0x0002f83c
   200a4:	0002f774 	.word	0x0002f774
   200a8:	0002f79c 	.word	0x0002f79c
   200ac:	0002f7ec 	.word	0x0002f7ec
   200b0:	0002f814 	.word	0x0002f814
   200b4:	0002f88c 	.word	0x0002f88c
   200b8:	0002f864 	.word	0x0002f864
   200bc:	0002f7c4 	.word	0x0002f7c4

000200c0 <bsd_platform_getaddrinfo>:
   200c0:	f7fc bec6 	b.w	1ce50 <ip_interface_getaddrinfo>

000200c4 <bsd_platform_freeaddrinfo>:
   200c4:	f7fc bfc2 	b.w	1d04c <ip_interface_freeaddrinfo>

000200c8 <bsd_platform_poll>:
   200c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   200cc:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   200d0:	b083      	sub	sp, #12
   200d2:	9200      	str	r2, [sp, #0]
   200d4:	2800      	cmp	r0, #0
   200d6:	d048      	beq.n	2016a <bsd_platform_poll+0xa2>
   200d8:	1e4b      	subs	r3, r1, #1
   200da:	2b08      	cmp	r3, #8
   200dc:	d845      	bhi.n	2016a <bsd_platform_poll+0xa2>
   200de:	4680      	mov	r8, r0
   200e0:	4605      	mov	r5, r0
   200e2:	2400      	movs	r4, #0
   200e4:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   200e8:	88ab      	ldrh	r3, [r5, #4]
   200ea:	6828      	ldr	r0, [r5, #0]
   200ec:	f003 0303 	and.w	r3, r3, #3
   200f0:	a901      	add	r1, sp, #4
   200f2:	f043 061c 	orr.w	r6, r3, #28
   200f6:	f001 fdd9 	bl	21cac <interface_socket_event_get>
   200fa:	9b01      	ldr	r3, [sp, #4]
   200fc:	3508      	adds	r5, #8
   200fe:	4033      	ands	r3, r6
   20100:	f825 3c02 	strh.w	r3, [r5, #-2]
   20104:	b103      	cbz	r3, 20108 <bsd_platform_poll+0x40>
   20106:	3401      	adds	r4, #1
   20108:	42af      	cmp	r7, r5
   2010a:	d1ed      	bne.n	200e8 <bsd_platform_poll+0x20>
   2010c:	bb9c      	cbnz	r4, 20176 <bsd_platform_poll+0xae>
   2010e:	4669      	mov	r1, sp
   20110:	4640      	mov	r0, r8
   20112:	f7f6 fc7d 	bl	16a10 <bsd_os_timedwait>
   20116:	4607      	mov	r7, r0
   20118:	b108      	cbz	r0, 2011e <bsd_platform_poll+0x56>
   2011a:	283c      	cmp	r0, #60	; 0x3c
   2011c:	d11d      	bne.n	2015a <bsd_platform_poll+0x92>
   2011e:	46c1      	mov	r9, r8
   20120:	2600      	movs	r6, #0
   20122:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   20126:	f8d9 0000 	ldr.w	r0, [r9]
   2012a:	f003 0303 	and.w	r3, r3, #3
   2012e:	a901      	add	r1, sp, #4
   20130:	f043 041c 	orr.w	r4, r3, #28
   20134:	f001 fdba 	bl	21cac <interface_socket_event_get>
   20138:	9b01      	ldr	r3, [sp, #4]
   2013a:	f109 0908 	add.w	r9, r9, #8
   2013e:	4023      	ands	r3, r4
   20140:	f829 3c02 	strh.w	r3, [r9, #-2]
   20144:	b103      	cbz	r3, 20148 <bsd_platform_poll+0x80>
   20146:	3601      	adds	r6, #1
   20148:	454d      	cmp	r5, r9
   2014a:	d1ea      	bne.n	20122 <bsd_platform_poll+0x5a>
   2014c:	b90e      	cbnz	r6, 20152 <bsd_platform_poll+0x8a>
   2014e:	2f00      	cmp	r7, #0
   20150:	d0dd      	beq.n	2010e <bsd_platform_poll+0x46>
   20152:	4630      	mov	r0, r6
   20154:	b003      	add	sp, #12
   20156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2015a:	2023      	movs	r0, #35	; 0x23
   2015c:	f7f6 fd10 	bl	16b80 <bsd_os_errno_set>
   20160:	f04f 30ff 	mov.w	r0, #4294967295
   20164:	b003      	add	sp, #12
   20166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2016a:	2016      	movs	r0, #22
   2016c:	f7f6 fd08 	bl	16b80 <bsd_os_errno_set>
   20170:	f04f 30ff 	mov.w	r0, #4294967295
   20174:	e7ee      	b.n	20154 <bsd_platform_poll+0x8c>
   20176:	4620      	mov	r0, r4
   20178:	e7ec      	b.n	20154 <bsd_platform_poll+0x8c>
   2017a:	bf00      	nop

0002017c <bsd_platform_fcntl>:
   2017c:	b508      	push	{r3, lr}
   2017e:	4b06      	ldr	r3, [pc, #24]	; (20198 <bsd_platform_fcntl+0x1c>)
   20180:	4298      	cmp	r0, r3
   20182:	d003      	beq.n	2018c <bsd_platform_fcntl+0x10>
   20184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20188:	f001 be3a 	b.w	21e00 <interface_socket_fcntl>
   2018c:	202d      	movs	r0, #45	; 0x2d
   2018e:	f7f6 fcf7 	bl	16b80 <bsd_os_errno_set>
   20192:	f04f 30ff 	mov.w	r0, #4294967295
   20196:	bd08      	pop	{r3, pc}
   20198:	49765432 	.word	0x49765432

0002019c <linked_list_init>:
   2019c:	b128      	cbz	r0, 201aa <linked_list_init+0xe>
   2019e:	2300      	movs	r3, #0
   201a0:	6003      	str	r3, [r0, #0]
   201a2:	e9c0 3301 	strd	r3, r3, [r0, #4]
   201a6:	4618      	mov	r0, r3
   201a8:	4770      	bx	lr
   201aa:	2007      	movs	r0, #7
   201ac:	4770      	bx	lr
   201ae:	bf00      	nop

000201b0 <linked_list_push>:
   201b0:	6802      	ldr	r2, [r0, #0]
   201b2:	4603      	mov	r3, r0
   201b4:	3201      	adds	r2, #1
   201b6:	d00e      	beq.n	201d6 <linked_list_push+0x26>
   201b8:	2200      	movs	r2, #0
   201ba:	600a      	str	r2, [r1, #0]
   201bc:	6802      	ldr	r2, [r0, #0]
   201be:	b13a      	cbz	r2, 201d0 <linked_list_push+0x20>
   201c0:	6882      	ldr	r2, [r0, #8]
   201c2:	6011      	str	r1, [r2, #0]
   201c4:	6081      	str	r1, [r0, #8]
   201c6:	681a      	ldr	r2, [r3, #0]
   201c8:	2000      	movs	r0, #0
   201ca:	3201      	adds	r2, #1
   201cc:	601a      	str	r2, [r3, #0]
   201ce:	4770      	bx	lr
   201d0:	e9c0 1101 	strd	r1, r1, [r0, #4]
   201d4:	e7f7      	b.n	201c6 <linked_list_push+0x16>
   201d6:	2004      	movs	r0, #4
   201d8:	4770      	bx	lr
   201da:	bf00      	nop

000201dc <linked_list_pop>:
   201dc:	4603      	mov	r3, r0
   201de:	6800      	ldr	r0, [r0, #0]
   201e0:	b128      	cbz	r0, 201ee <linked_list_pop+0x12>
   201e2:	6858      	ldr	r0, [r3, #4]
   201e4:	681a      	ldr	r2, [r3, #0]
   201e6:	6801      	ldr	r1, [r0, #0]
   201e8:	3a01      	subs	r2, #1
   201ea:	6059      	str	r1, [r3, #4]
   201ec:	601a      	str	r2, [r3, #0]
   201ee:	4770      	bx	lr

000201f0 <linked_list_peek>:
   201f0:	6803      	ldr	r3, [r0, #0]
   201f2:	b10b      	cbz	r3, 201f8 <linked_list_peek+0x8>
   201f4:	6840      	ldr	r0, [r0, #4]
   201f6:	4770      	bx	lr
   201f8:	4618      	mov	r0, r3
   201fa:	4770      	bx	lr

000201fc <linked_list_size_get>:
   201fc:	6800      	ldr	r0, [r0, #0]
   201fe:	4770      	bx	lr

00020200 <linked_list_get_next>:
   20200:	6800      	ldr	r0, [r0, #0]
   20202:	4770      	bx	lr

00020204 <nrf_socket>:
   20204:	b570      	push	{r4, r5, r6, lr}
   20206:	4604      	mov	r4, r0
   20208:	460d      	mov	r5, r1
   2020a:	4616      	mov	r6, r2
   2020c:	f7ff fe8a 	bl	1ff24 <bsd_platform_af_method_table_get>
   20210:	b130      	cbz	r0, 20220 <nrf_socket+0x1c>
   20212:	6803      	ldr	r3, [r0, #0]
   20214:	4632      	mov	r2, r6
   20216:	4629      	mov	r1, r5
   20218:	4620      	mov	r0, r4
   2021a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2021e:	4718      	bx	r3
   20220:	f04f 30ff 	mov.w	r0, #4294967295
   20224:	bd70      	pop	{r4, r5, r6, pc}
   20226:	bf00      	nop

00020228 <nrf_close>:
   20228:	b510      	push	{r4, lr}
   2022a:	4604      	mov	r4, r0
   2022c:	f7ff fed2 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   20230:	b120      	cbz	r0, 2023c <nrf_close+0x14>
   20232:	6843      	ldr	r3, [r0, #4]
   20234:	4620      	mov	r0, r4
   20236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2023a:	4718      	bx	r3
   2023c:	f04f 30ff 	mov.w	r0, #4294967295
   20240:	bd10      	pop	{r4, pc}
   20242:	bf00      	nop

00020244 <nrf_sendto>:
   20244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20248:	460d      	mov	r5, r1
   2024a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2024e:	4616      	mov	r6, r2
   20250:	461f      	mov	r7, r3
   20252:	4604      	mov	r4, r0
   20254:	f7ff febe 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   20258:	b158      	cbz	r0, 20272 <nrf_sendto+0x2e>
   2025a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2025e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   20262:	463b      	mov	r3, r7
   20264:	4632      	mov	r2, r6
   20266:	4629      	mov	r1, r5
   20268:	4620      	mov	r0, r4
   2026a:	46f4      	mov	ip, lr
   2026c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20270:	4760      	bx	ip
   20272:	f04f 30ff 	mov.w	r0, #4294967295
   20276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2027a:	bf00      	nop

0002027c <nrf_recvfrom>:
   2027c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20280:	460d      	mov	r5, r1
   20282:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   20286:	4616      	mov	r6, r2
   20288:	461f      	mov	r7, r3
   2028a:	4604      	mov	r4, r0
   2028c:	f7ff fea2 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   20290:	b158      	cbz	r0, 202aa <nrf_recvfrom+0x2e>
   20292:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20296:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2029a:	463b      	mov	r3, r7
   2029c:	4632      	mov	r2, r6
   2029e:	4629      	mov	r1, r5
   202a0:	4620      	mov	r0, r4
   202a2:	46f4      	mov	ip, lr
   202a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202a8:	4760      	bx	ip
   202aa:	f04f 30ff 	mov.w	r0, #4294967295
   202ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   202b2:	bf00      	nop

000202b4 <nrf_connect>:
   202b4:	b570      	push	{r4, r5, r6, lr}
   202b6:	460d      	mov	r5, r1
   202b8:	4616      	mov	r6, r2
   202ba:	4604      	mov	r4, r0
   202bc:	f7ff fe8a 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   202c0:	b130      	cbz	r0, 202d0 <nrf_connect+0x1c>
   202c2:	6943      	ldr	r3, [r0, #20]
   202c4:	4632      	mov	r2, r6
   202c6:	4629      	mov	r1, r5
   202c8:	4620      	mov	r0, r4
   202ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   202ce:	4718      	bx	r3
   202d0:	f04f 30ff 	mov.w	r0, #4294967295
   202d4:	bd70      	pop	{r4, r5, r6, pc}
   202d6:	bf00      	nop

000202d8 <nrf_listen>:
   202d8:	b570      	push	{r4, r5, r6, lr}
   202da:	460d      	mov	r5, r1
   202dc:	4604      	mov	r4, r0
   202de:	f7ff fe79 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   202e2:	b128      	cbz	r0, 202f0 <nrf_listen+0x18>
   202e4:	6983      	ldr	r3, [r0, #24]
   202e6:	4629      	mov	r1, r5
   202e8:	4620      	mov	r0, r4
   202ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   202ee:	4718      	bx	r3
   202f0:	f04f 30ff 	mov.w	r0, #4294967295
   202f4:	bd70      	pop	{r4, r5, r6, pc}
   202f6:	bf00      	nop

000202f8 <nrf_accept>:
   202f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202fc:	460d      	mov	r5, r1
   202fe:	4616      	mov	r6, r2
   20300:	4604      	mov	r4, r0
   20302:	f7ff fe67 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   20306:	b140      	cbz	r0, 2031a <nrf_accept+0x22>
   20308:	69c7      	ldr	r7, [r0, #28]
   2030a:	4632      	mov	r2, r6
   2030c:	4629      	mov	r1, r5
   2030e:	4620      	mov	r0, r4
   20310:	46bc      	mov	ip, r7
   20312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20316:	2300      	movs	r3, #0
   20318:	4760      	bx	ip
   2031a:	f04f 30ff 	mov.w	r0, #4294967295
   2031e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20322:	bf00      	nop

00020324 <nrf_bind>:
   20324:	b570      	push	{r4, r5, r6, lr}
   20326:	460d      	mov	r5, r1
   20328:	4616      	mov	r6, r2
   2032a:	4604      	mov	r4, r0
   2032c:	f7ff fe52 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   20330:	b130      	cbz	r0, 20340 <nrf_bind+0x1c>
   20332:	6903      	ldr	r3, [r0, #16]
   20334:	4632      	mov	r2, r6
   20336:	4629      	mov	r1, r5
   20338:	4620      	mov	r0, r4
   2033a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2033e:	4718      	bx	r3
   20340:	f04f 30ff 	mov.w	r0, #4294967295
   20344:	bd70      	pop	{r4, r5, r6, pc}
   20346:	bf00      	nop

00020348 <nrf_setsockopt>:
   20348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2034c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20350:	460d      	mov	r5, r1
   20352:	4616      	mov	r6, r2
   20354:	461f      	mov	r7, r3
   20356:	4604      	mov	r4, r0
   20358:	f7ff fe3c 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   2035c:	b158      	cbz	r0, 20376 <nrf_setsockopt+0x2e>
   2035e:	f8cd 8018 	str.w	r8, [sp, #24]
   20362:	f8d0 e020 	ldr.w	lr, [r0, #32]
   20366:	463b      	mov	r3, r7
   20368:	4632      	mov	r2, r6
   2036a:	4629      	mov	r1, r5
   2036c:	4620      	mov	r0, r4
   2036e:	46f4      	mov	ip, lr
   20370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20374:	4760      	bx	ip
   20376:	f04f 30ff 	mov.w	r0, #4294967295
   2037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2037e:	bf00      	nop

00020380 <nrf_getsockopt>:
   20380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20384:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20388:	460d      	mov	r5, r1
   2038a:	4616      	mov	r6, r2
   2038c:	461f      	mov	r7, r3
   2038e:	4604      	mov	r4, r0
   20390:	f7ff fe20 	bl	1ffd4 <bsd_platform_fd_method_table_get>
   20394:	b158      	cbz	r0, 203ae <nrf_getsockopt+0x2e>
   20396:	f8cd 8018 	str.w	r8, [sp, #24]
   2039a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   2039e:	463b      	mov	r3, r7
   203a0:	4632      	mov	r2, r6
   203a2:	4629      	mov	r1, r5
   203a4:	4620      	mov	r0, r4
   203a6:	46f4      	mov	ip, lr
   203a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   203ac:	4760      	bx	ip
   203ae:	f04f 30ff 	mov.w	r0, #4294967295
   203b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   203b6:	bf00      	nop

000203b8 <nrf_getaddrinfo>:
   203b8:	f7ff be82 	b.w	200c0 <bsd_platform_getaddrinfo>

000203bc <nrf_freeaddrinfo>:
   203bc:	f7ff be82 	b.w	200c4 <bsd_platform_freeaddrinfo>

000203c0 <nrf_poll>:
   203c0:	f7ff be82 	b.w	200c8 <bsd_platform_poll>

000203c4 <nrf_fcntl>:
   203c4:	f7ff beda 	b.w	2017c <bsd_platform_fcntl>

000203c8 <rpc_gnss_serialize_utc>:
   203c8:	4603      	mov	r3, r0
   203ca:	b1d8      	cbz	r0, 20404 <rpc_gnss_serialize_utc+0x3c>
   203cc:	b1d1      	cbz	r1, 20404 <rpc_gnss_serialize_utc+0x3c>
   203ce:	2000      	movs	r0, #0
   203d0:	2201      	movs	r2, #1
   203d2:	7048      	strb	r0, [r1, #1]
   203d4:	700a      	strb	r2, [r1, #0]
   203d6:	685a      	ldr	r2, [r3, #4]
   203d8:	2010      	movs	r0, #16
   203da:	f8c1 2006 	str.w	r2, [r1, #6]
   203de:	681a      	ldr	r2, [r3, #0]
   203e0:	f8c1 2002 	str.w	r2, [r1, #2]
   203e4:	f993 200a 	ldrsb.w	r2, [r3, #10]
   203e8:	730a      	strb	r2, [r1, #12]
   203ea:	f993 200d 	ldrsb.w	r2, [r3, #13]
   203ee:	73ca      	strb	r2, [r1, #15]
   203f0:	f993 200c 	ldrsb.w	r2, [r3, #12]
   203f4:	738a      	strb	r2, [r1, #14]
   203f6:	7a1a      	ldrb	r2, [r3, #8]
   203f8:	728a      	strb	r2, [r1, #10]
   203fa:	7ada      	ldrb	r2, [r3, #11]
   203fc:	734a      	strb	r2, [r1, #13]
   203fe:	7a5b      	ldrb	r3, [r3, #9]
   20400:	72cb      	strb	r3, [r1, #11]
   20402:	4770      	bx	lr
   20404:	f04f 30ff 	mov.w	r0, #4294967295
   20408:	4770      	bx	lr
   2040a:	bf00      	nop

0002040c <rpc_gnss_serialize_ephe>:
   2040c:	4603      	mov	r3, r0
   2040e:	2800      	cmp	r0, #0
   20410:	d04b      	beq.n	204aa <rpc_gnss_serialize_ephe+0x9e>
   20412:	2900      	cmp	r1, #0
   20414:	d049      	beq.n	204aa <rpc_gnss_serialize_ephe+0x9e>
   20416:	2000      	movs	r0, #0
   20418:	2202      	movs	r2, #2
   2041a:	7048      	strb	r0, [r1, #1]
   2041c:	700a      	strb	r2, [r1, #0]
   2041e:	68da      	ldr	r2, [r3, #12]
   20420:	2040      	movs	r0, #64	; 0x40
   20422:	f8c1 200b 	str.w	r2, [r1, #11]
   20426:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2042a:	f8a1 2009 	strh.w	r2, [r1, #9]
   2042e:	f993 2006 	ldrsb.w	r2, [r3, #6]
   20432:	720a      	strb	r2, [r1, #8]
   20434:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   20438:	878a      	strh	r2, [r1, #60]	; 0x3c
   2043a:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   2043e:	86ca      	strh	r2, [r1, #54]	; 0x36
   20440:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   20444:	874a      	strh	r2, [r1, #58]	; 0x3a
   20446:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   2044a:	868a      	strh	r2, [r1, #52]	; 0x34
   2044c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   20450:	87ca      	strh	r2, [r1, #62]	; 0x3e
   20452:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   20456:	870a      	strh	r2, [r1, #56]	; 0x38
   20458:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2045c:	830a      	strh	r2, [r1, #24]
   2045e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   20460:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   20464:	7c9a      	ldrb	r2, [r3, #18]
   20466:	744a      	strb	r2, [r1, #17]
   20468:	785a      	ldrb	r2, [r3, #1]
   2046a:	70ca      	strb	r2, [r1, #3]
   2046c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2046e:	62ca      	str	r2, [r1, #44]	; 0x2c
   20470:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   20474:	84ca      	strh	r2, [r1, #38]	; 0x26
   20476:	885a      	ldrh	r2, [r3, #2]
   20478:	808a      	strh	r2, [r1, #4]
   2047a:	6a1a      	ldr	r2, [r3, #32]
   2047c:	f8c1 201a 	str.w	r2, [r1, #26]
   20480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20482:	630a      	str	r2, [r1, #48]	; 0x30
   20484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   20486:	f8c1 201e 	str.w	r2, [r1, #30]
   2048a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2048c:	628a      	str	r2, [r1, #40]	; 0x28
   2048e:	781a      	ldrb	r2, [r3, #0]
   20490:	708a      	strb	r2, [r1, #2]
   20492:	f993 2010 	ldrsb.w	r2, [r3, #16]
   20496:	73ca      	strb	r2, [r1, #15]
   20498:	889a      	ldrh	r2, [r3, #4]
   2049a:	80ca      	strh	r2, [r1, #6]
   2049c:	8a9a      	ldrh	r2, [r3, #20]
   2049e:	824a      	strh	r2, [r1, #18]
   204a0:	7c5a      	ldrb	r2, [r3, #17]
   204a2:	740a      	strb	r2, [r1, #16]
   204a4:	699b      	ldr	r3, [r3, #24]
   204a6:	614b      	str	r3, [r1, #20]
   204a8:	4770      	bx	lr
   204aa:	f04f 30ff 	mov.w	r0, #4294967295
   204ae:	4770      	bx	lr

000204b0 <rpc_gnss_serialize_alm>:
   204b0:	4603      	mov	r3, r0
   204b2:	b360      	cbz	r0, 2050e <rpc_gnss_serialize_alm+0x5e>
   204b4:	b359      	cbz	r1, 2050e <rpc_gnss_serialize_alm+0x5e>
   204b6:	2000      	movs	r0, #0
   204b8:	2203      	movs	r2, #3
   204ba:	7048      	strb	r0, [r1, #1]
   204bc:	700a      	strb	r2, [r1, #0]
   204be:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   204c2:	2021      	movs	r0, #33	; 0x21
   204c4:	f8a1 201d 	strh.w	r2, [r1, #29]
   204c8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   204cc:	f8a1 201f 	strh.w	r2, [r1, #31]
   204d0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   204d4:	810a      	strh	r2, [r1, #8]
   204d6:	889a      	ldrh	r2, [r3, #4]
   204d8:	80ca      	strh	r2, [r1, #6]
   204da:	78da      	ldrb	r2, [r3, #3]
   204dc:	714a      	strb	r2, [r1, #5]
   204de:	699a      	ldr	r2, [r3, #24]
   204e0:	f8c1 2019 	str.w	r2, [r1, #25]
   204e4:	691a      	ldr	r2, [r3, #16]
   204e6:	f8c1 2011 	str.w	r2, [r1, #17]
   204ea:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   204ee:	814a      	strh	r2, [r1, #10]
   204f0:	68da      	ldr	r2, [r3, #12]
   204f2:	f8c1 200d 	str.w	r2, [r1, #13]
   204f6:	7a9a      	ldrb	r2, [r3, #10]
   204f8:	730a      	strb	r2, [r1, #12]
   204fa:	781a      	ldrb	r2, [r3, #0]
   204fc:	708a      	strb	r2, [r1, #2]
   204fe:	789a      	ldrb	r2, [r3, #2]
   20500:	710a      	strb	r2, [r1, #4]
   20502:	695a      	ldr	r2, [r3, #20]
   20504:	f8c1 2015 	str.w	r2, [r1, #21]
   20508:	785b      	ldrb	r3, [r3, #1]
   2050a:	70cb      	strb	r3, [r1, #3]
   2050c:	4770      	bx	lr
   2050e:	f04f 30ff 	mov.w	r0, #4294967295
   20512:	4770      	bx	lr

00020514 <rpc_gnss_serialize_klob>:
   20514:	4603      	mov	r3, r0
   20516:	b1f0      	cbz	r0, 20556 <rpc_gnss_serialize_klob+0x42>
   20518:	b1e9      	cbz	r1, 20556 <rpc_gnss_serialize_klob+0x42>
   2051a:	2000      	movs	r0, #0
   2051c:	2204      	movs	r2, #4
   2051e:	7048      	strb	r0, [r1, #1]
   20520:	700a      	strb	r2, [r1, #0]
   20522:	f993 2000 	ldrsb.w	r2, [r3]
   20526:	200a      	movs	r0, #10
   20528:	708a      	strb	r2, [r1, #2]
   2052a:	f993 2001 	ldrsb.w	r2, [r3, #1]
   2052e:	70ca      	strb	r2, [r1, #3]
   20530:	f993 2002 	ldrsb.w	r2, [r3, #2]
   20534:	710a      	strb	r2, [r1, #4]
   20536:	f993 2003 	ldrsb.w	r2, [r3, #3]
   2053a:	714a      	strb	r2, [r1, #5]
   2053c:	f993 2004 	ldrsb.w	r2, [r3, #4]
   20540:	718a      	strb	r2, [r1, #6]
   20542:	f993 2005 	ldrsb.w	r2, [r3, #5]
   20546:	71ca      	strb	r2, [r1, #7]
   20548:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2054c:	720a      	strb	r2, [r1, #8]
   2054e:	f993 3007 	ldrsb.w	r3, [r3, #7]
   20552:	724b      	strb	r3, [r1, #9]
   20554:	4770      	bx	lr
   20556:	f04f 30ff 	mov.w	r0, #4294967295
   2055a:	4770      	bx	lr

0002055c <rpc_gnss_serialize_nequick>:
   2055c:	4603      	mov	r3, r0
   2055e:	b198      	cbz	r0, 20588 <rpc_gnss_serialize_nequick+0x2c>
   20560:	b191      	cbz	r1, 20588 <rpc_gnss_serialize_nequick+0x2c>
   20562:	2000      	movs	r0, #0
   20564:	2205      	movs	r2, #5
   20566:	7048      	strb	r0, [r1, #1]
   20568:	700a      	strb	r2, [r1, #0]
   2056a:	f9b3 2000 	ldrsh.w	r2, [r3]
   2056e:	200a      	movs	r0, #10
   20570:	804a      	strh	r2, [r1, #2]
   20572:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   20576:	808a      	strh	r2, [r1, #4]
   20578:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   2057c:	80ca      	strh	r2, [r1, #6]
   2057e:	799a      	ldrb	r2, [r3, #6]
   20580:	720a      	strb	r2, [r1, #8]
   20582:	79db      	ldrb	r3, [r3, #7]
   20584:	724b      	strb	r3, [r1, #9]
   20586:	4770      	bx	lr
   20588:	f04f 30ff 	mov.w	r0, #4294967295
   2058c:	4770      	bx	lr
   2058e:	bf00      	nop

00020590 <rpc_gnss_serialize_time_and_sv_tow>:
   20590:	b310      	cbz	r0, 205d8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   20592:	b309      	cbz	r1, 205d8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   20594:	b470      	push	{r4, r5, r6}
   20596:	2500      	movs	r5, #0
   20598:	2606      	movs	r6, #6
   2059a:	460c      	mov	r4, r1
   2059c:	704d      	strb	r5, [r1, #1]
   2059e:	700e      	strb	r6, [r1, #0]
   205a0:	462b      	mov	r3, r5
   205a2:	8805      	ldrh	r5, [r0, #0]
   205a4:	4602      	mov	r2, r0
   205a6:	804d      	strh	r5, [r1, #2]
   205a8:	68c5      	ldr	r5, [r0, #12]
   205aa:	f8c1 500a 	str.w	r5, [r1, #10]
   205ae:	8905      	ldrh	r5, [r0, #8]
   205b0:	810d      	strh	r5, [r1, #8]
   205b2:	6840      	ldr	r0, [r0, #4]
   205b4:	6048      	str	r0, [r1, #4]
   205b6:	8a15      	ldrh	r5, [r2, #16]
   205b8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   205bc:	4408      	add	r0, r1
   205be:	81c5      	strh	r5, [r0, #14]
   205c0:	7c90      	ldrb	r0, [r2, #18]
   205c2:	3301      	adds	r3, #1
   205c4:	2b20      	cmp	r3, #32
   205c6:	7420      	strb	r0, [r4, #16]
   205c8:	f102 0204 	add.w	r2, r2, #4
   205cc:	f104 0403 	add.w	r4, r4, #3
   205d0:	d1f1      	bne.n	205b6 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   205d2:	206e      	movs	r0, #110	; 0x6e
   205d4:	bc70      	pop	{r4, r5, r6}
   205d6:	4770      	bx	lr
   205d8:	f04f 30ff 	mov.w	r0, #4294967295
   205dc:	4770      	bx	lr
   205de:	bf00      	nop

000205e0 <rpc_gnss_serialize_location>:
   205e0:	4603      	mov	r3, r0
   205e2:	b1c8      	cbz	r0, 20618 <rpc_gnss_serialize_location+0x38>
   205e4:	b1c1      	cbz	r1, 20618 <rpc_gnss_serialize_location+0x38>
   205e6:	2000      	movs	r0, #0
   205e8:	2207      	movs	r2, #7
   205ea:	7048      	strb	r0, [r1, #1]
   205ec:	700a      	strb	r2, [r1, #0]
   205ee:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   205f2:	2011      	movs	r0, #17
   205f4:	814a      	strh	r2, [r1, #10]
   205f6:	7b9a      	ldrb	r2, [r3, #14]
   205f8:	740a      	strb	r2, [r1, #16]
   205fa:	681a      	ldr	r2, [r3, #0]
   205fc:	f8c1 2002 	str.w	r2, [r1, #2]
   20600:	685a      	ldr	r2, [r3, #4]
   20602:	f8c1 2006 	str.w	r2, [r1, #6]
   20606:	7b1a      	ldrb	r2, [r3, #12]
   20608:	738a      	strb	r2, [r1, #14]
   2060a:	7b5a      	ldrb	r2, [r3, #13]
   2060c:	73ca      	strb	r2, [r1, #15]
   2060e:	7a9a      	ldrb	r2, [r3, #10]
   20610:	730a      	strb	r2, [r1, #12]
   20612:	7adb      	ldrb	r3, [r3, #11]
   20614:	734b      	strb	r3, [r1, #13]
   20616:	4770      	bx	lr
   20618:	f04f 30ff 	mov.w	r0, #4294967295
   2061c:	4770      	bx	lr
   2061e:	bf00      	nop

00020620 <rpc_gnss_serialize_integrity>:
   20620:	b148      	cbz	r0, 20636 <rpc_gnss_serialize_integrity+0x16>
   20622:	b141      	cbz	r1, 20636 <rpc_gnss_serialize_integrity+0x16>
   20624:	2200      	movs	r2, #0
   20626:	2308      	movs	r3, #8
   20628:	704a      	strb	r2, [r1, #1]
   2062a:	700b      	strb	r3, [r1, #0]
   2062c:	6803      	ldr	r3, [r0, #0]
   2062e:	2006      	movs	r0, #6
   20630:	f8c1 3002 	str.w	r3, [r1, #2]
   20634:	4770      	bx	lr
   20636:	f04f 30ff 	mov.w	r0, #4294967295
   2063a:	4770      	bx	lr

0002063c <gnss_client_event_handler>:
   2063c:	f850 1b08 	ldr.w	r1, [r0], #8
   20640:	0c09      	lsrs	r1, r1, #16
   20642:	f7fd b8ed 	b.w	1d820 <rpc_gnss_event_handler>
   20646:	bf00      	nop

00020648 <rpc_gnss_client_init>:
   20648:	4801      	ldr	r0, [pc, #4]	; (20650 <rpc_gnss_client_init+0x8>)
   2064a:	f7fd b81d 	b.w	1d688 <rpc_client_register>
   2064e:	bf00      	nop
   20650:	0002f8cc 	.word	0x0002f8cc

00020654 <rpc_gnss_client_request_alloc>:
   20654:	2300      	movs	r3, #0
   20656:	b510      	push	{r4, lr}
   20658:	b082      	sub	sp, #8
   2065a:	9301      	str	r3, [sp, #4]
   2065c:	b158      	cbz	r0, 20676 <rpc_gnss_client_request_alloc+0x22>
   2065e:	4604      	mov	r4, r0
   20660:	aa01      	add	r2, sp, #4
   20662:	2007      	movs	r0, #7
   20664:	f7fd f88a 	bl	1d77c <rpc_message_alloc>
   20668:	b918      	cbnz	r0, 20672 <rpc_gnss_client_request_alloc+0x1e>
   2066a:	9b01      	ldr	r3, [sp, #4]
   2066c:	b10b      	cbz	r3, 20672 <rpc_gnss_client_request_alloc+0x1e>
   2066e:	3308      	adds	r3, #8
   20670:	6023      	str	r3, [r4, #0]
   20672:	b002      	add	sp, #8
   20674:	bd10      	pop	{r4, pc}
   20676:	2007      	movs	r0, #7
   20678:	b002      	add	sp, #8
   2067a:	bd10      	pop	{r4, pc}

0002067c <rpc_gnss_client_request_send>:
   2067c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   20680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   20684:	d10b      	bne.n	2069e <rpc_gnss_client_request_send+0x22>
   20686:	b160      	cbz	r0, 206a2 <rpc_gnss_client_request_send+0x26>
   20688:	4603      	mov	r3, r0
   2068a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2068e:	2007      	movs	r0, #7
   20690:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   20694:	f843 1d08 	str.w	r1, [r3, #-8]!
   20698:	4619      	mov	r1, r3
   2069a:	f7fd b85f 	b.w	1d75c <rpc_message_send>
   2069e:	200f      	movs	r0, #15
   206a0:	4770      	bx	lr
   206a2:	2007      	movs	r0, #7
   206a4:	4770      	bx	lr
   206a6:	bf00      	nop

000206a8 <rpc_gnss_client_message_free>:
   206a8:	b120      	cbz	r0, 206b4 <rpc_gnss_client_message_free+0xc>
   206aa:	f1a0 0108 	sub.w	r1, r0, #8
   206ae:	2007      	movs	r0, #7
   206b0:	f7fd b890 	b.w	1d7d4 <rpc_message_free>
   206b4:	2007      	movs	r0, #7
   206b6:	4770      	bx	lr

000206b8 <rpc_gnss_client_data_free>:
   206b8:	b118      	cbz	r0, 206c2 <rpc_gnss_client_data_free+0xa>
   206ba:	4601      	mov	r1, r0
   206bc:	2007      	movs	r0, #7
   206be:	f7fd b895 	b.w	1d7ec <rpc_message_data_free>
   206c2:	2007      	movs	r0, #7
   206c4:	4770      	bx	lr
   206c6:	bf00      	nop

000206c8 <datagram_handler_init>:
   206c8:	b510      	push	{r4, lr}
   206ca:	4604      	mov	r4, r0
   206cc:	200c      	movs	r0, #12
   206ce:	f000 fdd7 	bl	21280 <nrf_malloc>
   206d2:	60e0      	str	r0, [r4, #12]
   206d4:	b118      	cbz	r0, 206de <datagram_handler_init+0x16>
   206d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   206da:	f7ff bd5f 	b.w	2019c <linked_list_init>
   206de:	2004      	movs	r0, #4
   206e0:	bd10      	pop	{r4, pc}
   206e2:	bf00      	nop

000206e4 <datagram_handler_put>:
   206e4:	b570      	push	{r4, r5, r6, lr}
   206e6:	4606      	mov	r6, r0
   206e8:	2014      	movs	r0, #20
   206ea:	460d      	mov	r5, r1
   206ec:	f000 fdc8 	bl	21280 <nrf_malloc>
   206f0:	b178      	cbz	r0, 20712 <datagram_handler_put+0x2e>
   206f2:	682b      	ldr	r3, [r5, #0]
   206f4:	4604      	mov	r4, r0
   206f6:	6043      	str	r3, [r0, #4]
   206f8:	686b      	ldr	r3, [r5, #4]
   206fa:	4601      	mov	r1, r0
   206fc:	6083      	str	r3, [r0, #8]
   206fe:	68eb      	ldr	r3, [r5, #12]
   20700:	60c3      	str	r3, [r0, #12]
   20702:	68ab      	ldr	r3, [r5, #8]
   20704:	6103      	str	r3, [r0, #16]
   20706:	68f0      	ldr	r0, [r6, #12]
   20708:	f7ff fd52 	bl	201b0 <linked_list_push>
   2070c:	b920      	cbnz	r0, 20718 <datagram_handler_put+0x34>
   2070e:	6868      	ldr	r0, [r5, #4]
   20710:	bd70      	pop	{r4, r5, r6, pc}
   20712:	f04f 30ff 	mov.w	r0, #4294967295
   20716:	bd70      	pop	{r4, r5, r6, pc}
   20718:	4620      	mov	r0, r4
   2071a:	f000 fdbb 	bl	21294 <nrf_free>
   2071e:	f04f 30ff 	mov.w	r0, #4294967295
   20722:	bd70      	pop	{r4, r5, r6, pc}

00020724 <datagram_handler_get>:
   20724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20728:	4607      	mov	r7, r0
   2072a:	b084      	sub	sp, #16
   2072c:	68c0      	ldr	r0, [r0, #12]
   2072e:	460c      	mov	r4, r1
   20730:	4616      	mov	r6, r2
   20732:	f7ff fd5d 	bl	201f0 <linked_list_peek>
   20736:	2800      	cmp	r0, #0
   20738:	d03b      	beq.n	207b2 <datagram_handler_get+0x8e>
   2073a:	6882      	ldr	r2, [r0, #8]
   2073c:	4605      	mov	r5, r0
   2073e:	e9d4 0300 	ldrd	r0, r3, [r4]
   20742:	429a      	cmp	r2, r3
   20744:	bf28      	it	cs
   20746:	461a      	movcs	r2, r3
   20748:	6062      	str	r2, [r4, #4]
   2074a:	b110      	cbz	r0, 20752 <datagram_handler_get+0x2e>
   2074c:	6869      	ldr	r1, [r5, #4]
   2074e:	f7ec f9fd 	bl	cb4c <memcpy>
   20752:	68a0      	ldr	r0, [r4, #8]
   20754:	b118      	cbz	r0, 2075e <datagram_handler_get+0x3a>
   20756:	692b      	ldr	r3, [r5, #16]
   20758:	b10b      	cbz	r3, 2075e <datagram_handler_get+0x3a>
   2075a:	68ea      	ldr	r2, [r5, #12]
   2075c:	bb02      	cbnz	r2, 207a0 <datagram_handler_get+0x7c>
   2075e:	2300      	movs	r3, #0
   20760:	60e3      	str	r3, [r4, #12]
   20762:	0732      	lsls	r2, r6, #28
   20764:	d506      	bpl.n	20774 <datagram_handler_get+0x50>
   20766:	06b3      	lsls	r3, r6, #26
   20768:	bf4c      	ite	mi
   2076a:	68a8      	ldrmi	r0, [r5, #8]
   2076c:	6860      	ldrpl	r0, [r4, #4]
   2076e:	b004      	add	sp, #16
   20770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20774:	68f8      	ldr	r0, [r7, #12]
   20776:	f7ff fd31 	bl	201dc <linked_list_pop>
   2077a:	4680      	mov	r8, r0
   2077c:	2800      	cmp	r0, #0
   2077e:	d0f2      	beq.n	20766 <datagram_handler_get+0x42>
   20780:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   20784:	6902      	ldr	r2, [r0, #16]
   20786:	9300      	str	r3, [sp, #0]
   20788:	68c3      	ldr	r3, [r0, #12]
   2078a:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2078e:	9303      	str	r3, [sp, #12]
   20790:	4668      	mov	r0, sp
   20792:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   20796:	4798      	blx	r3
   20798:	4640      	mov	r0, r8
   2079a:	f000 fd7b 	bl	21294 <nrf_free>
   2079e:	e7e2      	b.n	20766 <datagram_handler_get+0x42>
   207a0:	68e3      	ldr	r3, [r4, #12]
   207a2:	429a      	cmp	r2, r3
   207a4:	bf28      	it	cs
   207a6:	461a      	movcs	r2, r3
   207a8:	60e2      	str	r2, [r4, #12]
   207aa:	6929      	ldr	r1, [r5, #16]
   207ac:	f7ec f9ce 	bl	cb4c <memcpy>
   207b0:	e7d7      	b.n	20762 <datagram_handler_get+0x3e>
   207b2:	f04f 30ff 	mov.w	r0, #4294967295
   207b6:	e7da      	b.n	2076e <datagram_handler_get+0x4a>

000207b8 <datagram_handler_available>:
   207b8:	b508      	push	{r3, lr}
   207ba:	68c0      	ldr	r0, [r0, #12]
   207bc:	f7ff fd18 	bl	201f0 <linked_list_peek>
   207c0:	b108      	cbz	r0, 207c6 <datagram_handler_available+0xe>
   207c2:	6880      	ldr	r0, [r0, #8]
   207c4:	bd08      	pop	{r3, pc}
   207c6:	f04f 30ff 	mov.w	r0, #4294967295
   207ca:	bd08      	pop	{r3, pc}

000207cc <datagram_handler_flush>:
   207cc:	b530      	push	{r4, r5, lr}
   207ce:	4605      	mov	r5, r0
   207d0:	68c0      	ldr	r0, [r0, #12]
   207d2:	b085      	sub	sp, #20
   207d4:	b9a8      	cbnz	r0, 20802 <datagram_handler_flush+0x36>
   207d6:	e01a      	b.n	2080e <datagram_handler_flush+0x42>
   207d8:	68e8      	ldr	r0, [r5, #12]
   207da:	f7ff fcff 	bl	201dc <linked_list_pop>
   207de:	4604      	mov	r4, r0
   207e0:	b170      	cbz	r0, 20800 <datagram_handler_flush+0x34>
   207e2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   207e6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   207ea:	e9cd 0100 	strd	r0, r1, [sp]
   207ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   207f2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   207f6:	4668      	mov	r0, sp
   207f8:	4798      	blx	r3
   207fa:	4620      	mov	r0, r4
   207fc:	f000 fd4a 	bl	21294 <nrf_free>
   20800:	68e8      	ldr	r0, [r5, #12]
   20802:	f7ff fcfb 	bl	201fc <linked_list_size_get>
   20806:	2800      	cmp	r0, #0
   20808:	d1e6      	bne.n	207d8 <datagram_handler_flush+0xc>
   2080a:	b005      	add	sp, #20
   2080c:	bd30      	pop	{r4, r5, pc}
   2080e:	2008      	movs	r0, #8
   20810:	b005      	add	sp, #20
   20812:	bd30      	pop	{r4, r5, pc}

00020814 <datagram_handler_free>:
   20814:	b530      	push	{r4, r5, lr}
   20816:	4605      	mov	r5, r0
   20818:	68c0      	ldr	r0, [r0, #12]
   2081a:	b085      	sub	sp, #20
   2081c:	b9a0      	cbnz	r0, 20848 <datagram_handler_free+0x34>
   2081e:	e01c      	b.n	2085a <datagram_handler_free+0x46>
   20820:	f7ff fcdc 	bl	201dc <linked_list_pop>
   20824:	4604      	mov	r4, r0
   20826:	b170      	cbz	r0, 20846 <datagram_handler_free+0x32>
   20828:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2082c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20830:	e9cd 0100 	strd	r0, r1, [sp]
   20834:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20838:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2083c:	4668      	mov	r0, sp
   2083e:	4798      	blx	r3
   20840:	4620      	mov	r0, r4
   20842:	f000 fd27 	bl	21294 <nrf_free>
   20846:	68e8      	ldr	r0, [r5, #12]
   20848:	f7ff fcd8 	bl	201fc <linked_list_size_get>
   2084c:	4604      	mov	r4, r0
   2084e:	68e8      	ldr	r0, [r5, #12]
   20850:	2c00      	cmp	r4, #0
   20852:	d1e5      	bne.n	20820 <datagram_handler_free+0xc>
   20854:	f000 fd1e 	bl	21294 <nrf_free>
   20858:	60ec      	str	r4, [r5, #12]
   2085a:	b005      	add	sp, #20
   2085c:	bd30      	pop	{r4, r5, pc}
   2085e:	bf00      	nop

00020860 <null_handler_init>:
   20860:	2000      	movs	r0, #0
   20862:	4770      	bx	lr

00020864 <null_handler_put>:
   20864:	b510      	push	{r4, lr}
   20866:	460c      	mov	r4, r1
   20868:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2086c:	4620      	mov	r0, r4
   2086e:	4798      	blx	r3
   20870:	6860      	ldr	r0, [r4, #4]
   20872:	bd10      	pop	{r4, pc}

00020874 <null_handler_get>:
   20874:	f04f 30ff 	mov.w	r0, #4294967295
   20878:	4770      	bx	lr
   2087a:	bf00      	nop

0002087c <null_handler_available>:
   2087c:	f04f 30ff 	mov.w	r0, #4294967295
   20880:	4770      	bx	lr
   20882:	bf00      	nop

00020884 <null_handler_flush>:
   20884:	2000      	movs	r0, #0
   20886:	4770      	bx	lr

00020888 <null_handler_free>:
   20888:	4770      	bx	lr
   2088a:	bf00      	nop

0002088c <packet_handler_create>:
   2088c:	2801      	cmp	r0, #1
   2088e:	b538      	push	{r3, r4, r5, lr}
   20890:	460d      	mov	r5, r1
   20892:	4614      	mov	r4, r2
   20894:	d00d      	beq.n	208b2 <packet_handler_create+0x26>
   20896:	db11      	blt.n	208bc <packet_handler_create+0x30>
   20898:	2803      	cmp	r0, #3
   2089a:	dc0f      	bgt.n	208bc <packet_handler_create+0x30>
   2089c:	2010      	movs	r0, #16
   2089e:	f000 fcef 	bl	21280 <nrf_malloc>
   208a2:	2218      	movs	r2, #24
   208a4:	b120      	cbz	r0, 208b0 <packet_handler_create+0x24>
   208a6:	4b08      	ldr	r3, [pc, #32]	; (208c8 <packet_handler_create+0x3c>)
   208a8:	6045      	str	r5, [r0, #4]
   208aa:	4413      	add	r3, r2
   208ac:	6084      	str	r4, [r0, #8]
   208ae:	6003      	str	r3, [r0, #0]
   208b0:	bd38      	pop	{r3, r4, r5, pc}
   208b2:	2014      	movs	r0, #20
   208b4:	f000 fce4 	bl	21280 <nrf_malloc>
   208b8:	2230      	movs	r2, #48	; 0x30
   208ba:	e7f3      	b.n	208a4 <packet_handler_create+0x18>
   208bc:	200c      	movs	r0, #12
   208be:	f000 fcdf 	bl	21280 <nrf_malloc>
   208c2:	2200      	movs	r2, #0
   208c4:	e7ee      	b.n	208a4 <packet_handler_create+0x18>
   208c6:	bf00      	nop
   208c8:	0002f8dc 	.word	0x0002f8dc

000208cc <packet_handler_delete>:
   208cc:	b510      	push	{r4, lr}
   208ce:	4604      	mov	r4, r0
   208d0:	6803      	ldr	r3, [r0, #0]
   208d2:	691b      	ldr	r3, [r3, #16]
   208d4:	4798      	blx	r3
   208d6:	6823      	ldr	r3, [r4, #0]
   208d8:	4620      	mov	r0, r4
   208da:	695b      	ldr	r3, [r3, #20]
   208dc:	4798      	blx	r3
   208de:	4620      	mov	r0, r4
   208e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   208e4:	f000 bcd6 	b.w	21294 <nrf_free>

000208e8 <stream_handler_init>:
   208e8:	b510      	push	{r4, lr}
   208ea:	4604      	mov	r4, r0
   208ec:	200c      	movs	r0, #12
   208ee:	f000 fcc7 	bl	21280 <nrf_malloc>
   208f2:	60e0      	str	r0, [r4, #12]
   208f4:	b128      	cbz	r0, 20902 <stream_handler_init+0x1a>
   208f6:	2300      	movs	r3, #0
   208f8:	6123      	str	r3, [r4, #16]
   208fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   208fe:	f7ff bc4d 	b.w	2019c <linked_list_init>
   20902:	2004      	movs	r0, #4
   20904:	bd10      	pop	{r4, pc}
   20906:	bf00      	nop

00020908 <stream_handler_put>:
   20908:	b570      	push	{r4, r5, r6, lr}
   2090a:	4606      	mov	r6, r0
   2090c:	2014      	movs	r0, #20
   2090e:	460d      	mov	r5, r1
   20910:	f000 fcb6 	bl	21280 <nrf_malloc>
   20914:	b178      	cbz	r0, 20936 <stream_handler_put+0x2e>
   20916:	682b      	ldr	r3, [r5, #0]
   20918:	4604      	mov	r4, r0
   2091a:	6043      	str	r3, [r0, #4]
   2091c:	686b      	ldr	r3, [r5, #4]
   2091e:	4601      	mov	r1, r0
   20920:	6083      	str	r3, [r0, #8]
   20922:	68eb      	ldr	r3, [r5, #12]
   20924:	60c3      	str	r3, [r0, #12]
   20926:	68ab      	ldr	r3, [r5, #8]
   20928:	6103      	str	r3, [r0, #16]
   2092a:	68f0      	ldr	r0, [r6, #12]
   2092c:	f7ff fc40 	bl	201b0 <linked_list_push>
   20930:	b920      	cbnz	r0, 2093c <stream_handler_put+0x34>
   20932:	6868      	ldr	r0, [r5, #4]
   20934:	bd70      	pop	{r4, r5, r6, pc}
   20936:	f04f 30ff 	mov.w	r0, #4294967295
   2093a:	bd70      	pop	{r4, r5, r6, pc}
   2093c:	4620      	mov	r0, r4
   2093e:	f000 fca9 	bl	21294 <nrf_free>
   20942:	f04f 30ff 	mov.w	r0, #4294967295
   20946:	bd70      	pop	{r4, r5, r6, pc}

00020948 <stream_handler_get>:
   20948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2094c:	4682      	mov	sl, r0
   2094e:	b089      	sub	sp, #36	; 0x24
   20950:	68c0      	ldr	r0, [r0, #12]
   20952:	4689      	mov	r9, r1
   20954:	4693      	mov	fp, r2
   20956:	f7ff fc4b 	bl	201f0 <linked_list_peek>
   2095a:	2800      	cmp	r0, #0
   2095c:	d071      	beq.n	20a42 <stream_handler_get+0xfa>
   2095e:	4605      	mov	r5, r0
   20960:	f8d9 0008 	ldr.w	r0, [r9, #8]
   20964:	b120      	cbz	r0, 20970 <stream_handler_get+0x28>
   20966:	692b      	ldr	r3, [r5, #16]
   20968:	b113      	cbz	r3, 20970 <stream_handler_get+0x28>
   2096a:	68ea      	ldr	r2, [r5, #12]
   2096c:	2a00      	cmp	r2, #0
   2096e:	d15d      	bne.n	20a2c <stream_handler_get+0xe4>
   20970:	2300      	movs	r3, #0
   20972:	f8c9 300c 	str.w	r3, [r9, #12]
   20976:	f8d9 2000 	ldr.w	r2, [r9]
   2097a:	f8d9 8004 	ldr.w	r8, [r9, #4]
   2097e:	f8da 1010 	ldr.w	r1, [sl, #16]
   20982:	9203      	str	r2, [sp, #12]
   20984:	f1b8 0f00 	cmp.w	r8, #0
   20988:	d030      	beq.n	209ec <stream_handler_get+0xa4>
   2098a:	2400      	movs	r4, #0
   2098c:	f00b 0320 	and.w	r3, fp, #32
   20990:	9301      	str	r3, [sp, #4]
   20992:	f00b 0b08 	and.w	fp, fp, #8
   20996:	68ae      	ldr	r6, [r5, #8]
   20998:	eba8 0304 	sub.w	r3, r8, r4
   2099c:	1a76      	subs	r6, r6, r1
   2099e:	429e      	cmp	r6, r3
   209a0:	4637      	mov	r7, r6
   209a2:	bf28      	it	cs
   209a4:	461f      	movcs	r7, r3
   209a6:	b10a      	cbz	r2, 209ac <stream_handler_get+0x64>
   209a8:	9a01      	ldr	r2, [sp, #4]
   209aa:	b1aa      	cbz	r2, 209d8 <stream_handler_get+0x90>
   209ac:	f1bb 0f00 	cmp.w	fp, #0
   209b0:	d106      	bne.n	209c0 <stream_handler_get+0x78>
   209b2:	429e      	cmp	r6, r3
   209b4:	d921      	bls.n	209fa <stream_handler_get+0xb2>
   209b6:	f8da 3010 	ldr.w	r3, [sl, #16]
   209ba:	443b      	add	r3, r7
   209bc:	f8ca 3010 	str.w	r3, [sl, #16]
   209c0:	4628      	mov	r0, r5
   209c2:	f7ff fc1d 	bl	20200 <linked_list_get_next>
   209c6:	443c      	add	r4, r7
   209c8:	4605      	mov	r5, r0
   209ca:	b180      	cbz	r0, 209ee <stream_handler_get+0xa6>
   209cc:	45a0      	cmp	r8, r4
   209ce:	d90e      	bls.n	209ee <stream_handler_get+0xa6>
   209d0:	f8d9 2000 	ldr.w	r2, [r9]
   209d4:	2100      	movs	r1, #0
   209d6:	e7de      	b.n	20996 <stream_handler_get+0x4e>
   209d8:	6868      	ldr	r0, [r5, #4]
   209da:	9302      	str	r3, [sp, #8]
   209dc:	9b03      	ldr	r3, [sp, #12]
   209de:	4401      	add	r1, r0
   209e0:	463a      	mov	r2, r7
   209e2:	1918      	adds	r0, r3, r4
   209e4:	f7ec f8b2 	bl	cb4c <memcpy>
   209e8:	9b02      	ldr	r3, [sp, #8]
   209ea:	e7df      	b.n	209ac <stream_handler_get+0x64>
   209ec:	4644      	mov	r4, r8
   209ee:	4620      	mov	r0, r4
   209f0:	f8c9 4004 	str.w	r4, [r9, #4]
   209f4:	b009      	add	sp, #36	; 0x24
   209f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209fa:	f8da 000c 	ldr.w	r0, [sl, #12]
   209fe:	f7ff fbed 	bl	201dc <linked_list_pop>
   20a02:	4606      	mov	r6, r0
   20a04:	b170      	cbz	r0, 20a24 <stream_handler_get+0xdc>
   20a06:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   20a0a:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   20a0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   20a12:	e9cd 1006 	strd	r1, r0, [sp, #24]
   20a16:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   20a1a:	a804      	add	r0, sp, #16
   20a1c:	4798      	blx	r3
   20a1e:	4630      	mov	r0, r6
   20a20:	f000 fc38 	bl	21294 <nrf_free>
   20a24:	2300      	movs	r3, #0
   20a26:	f8ca 3010 	str.w	r3, [sl, #16]
   20a2a:	e7c9      	b.n	209c0 <stream_handler_get+0x78>
   20a2c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20a30:	429a      	cmp	r2, r3
   20a32:	bf28      	it	cs
   20a34:	461a      	movcs	r2, r3
   20a36:	f8c9 200c 	str.w	r2, [r9, #12]
   20a3a:	6929      	ldr	r1, [r5, #16]
   20a3c:	f7ec f886 	bl	cb4c <memcpy>
   20a40:	e799      	b.n	20976 <stream_handler_get+0x2e>
   20a42:	f04f 30ff 	mov.w	r0, #4294967295
   20a46:	e7d5      	b.n	209f4 <stream_handler_get+0xac>

00020a48 <stream_handler_available>:
   20a48:	b510      	push	{r4, lr}
   20a4a:	4604      	mov	r4, r0
   20a4c:	68c0      	ldr	r0, [r0, #12]
   20a4e:	f7ff fbcf 	bl	201f0 <linked_list_peek>
   20a52:	b150      	cbz	r0, 20a6a <stream_handler_available+0x22>
   20a54:	6924      	ldr	r4, [r4, #16]
   20a56:	4264      	negs	r4, r4
   20a58:	6883      	ldr	r3, [r0, #8]
   20a5a:	441c      	add	r4, r3
   20a5c:	f7ff fbd0 	bl	20200 <linked_list_get_next>
   20a60:	2800      	cmp	r0, #0
   20a62:	d1f9      	bne.n	20a58 <stream_handler_available+0x10>
   20a64:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   20a68:	bd10      	pop	{r4, pc}
   20a6a:	f04f 30ff 	mov.w	r0, #4294967295
   20a6e:	bd10      	pop	{r4, pc}

00020a70 <stream_handler_flush>:
   20a70:	b530      	push	{r4, r5, lr}
   20a72:	4605      	mov	r5, r0
   20a74:	68c0      	ldr	r0, [r0, #12]
   20a76:	b085      	sub	sp, #20
   20a78:	b9a8      	cbnz	r0, 20aa6 <stream_handler_flush+0x36>
   20a7a:	e01a      	b.n	20ab2 <stream_handler_flush+0x42>
   20a7c:	68e8      	ldr	r0, [r5, #12]
   20a7e:	f7ff fbad 	bl	201dc <linked_list_pop>
   20a82:	4604      	mov	r4, r0
   20a84:	b170      	cbz	r0, 20aa4 <stream_handler_flush+0x34>
   20a86:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   20a8a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20a8e:	e9cd 0100 	strd	r0, r1, [sp]
   20a92:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20a96:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   20a9a:	4668      	mov	r0, sp
   20a9c:	4798      	blx	r3
   20a9e:	4620      	mov	r0, r4
   20aa0:	f000 fbf8 	bl	21294 <nrf_free>
   20aa4:	68e8      	ldr	r0, [r5, #12]
   20aa6:	f7ff fba9 	bl	201fc <linked_list_size_get>
   20aaa:	2800      	cmp	r0, #0
   20aac:	d1e6      	bne.n	20a7c <stream_handler_flush+0xc>
   20aae:	b005      	add	sp, #20
   20ab0:	bd30      	pop	{r4, r5, pc}
   20ab2:	2008      	movs	r0, #8
   20ab4:	b005      	add	sp, #20
   20ab6:	bd30      	pop	{r4, r5, pc}

00020ab8 <stream_handler_free>:
   20ab8:	b530      	push	{r4, r5, lr}
   20aba:	4605      	mov	r5, r0
   20abc:	68c0      	ldr	r0, [r0, #12]
   20abe:	b085      	sub	sp, #20
   20ac0:	b9a0      	cbnz	r0, 20aec <stream_handler_free+0x34>
   20ac2:	e01c      	b.n	20afe <stream_handler_free+0x46>
   20ac4:	f7ff fb8a 	bl	201dc <linked_list_pop>
   20ac8:	4604      	mov	r4, r0
   20aca:	b170      	cbz	r0, 20aea <stream_handler_free+0x32>
   20acc:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   20ad0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20ad4:	e9cd 0100 	strd	r0, r1, [sp]
   20ad8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20adc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   20ae0:	4668      	mov	r0, sp
   20ae2:	4798      	blx	r3
   20ae4:	4620      	mov	r0, r4
   20ae6:	f000 fbd5 	bl	21294 <nrf_free>
   20aea:	68e8      	ldr	r0, [r5, #12]
   20aec:	f7ff fb86 	bl	201fc <linked_list_size_get>
   20af0:	4604      	mov	r4, r0
   20af2:	68e8      	ldr	r0, [r5, #12]
   20af4:	2c00      	cmp	r4, #0
   20af6:	d1e5      	bne.n	20ac4 <stream_handler_free+0xc>
   20af8:	f000 fbcc 	bl	21294 <nrf_free>
   20afc:	60ec      	str	r4, [r5, #12]
   20afe:	b005      	add	sp, #20
   20b00:	bd30      	pop	{r4, r5, pc}
   20b02:	bf00      	nop

00020b04 <mem_free>:
   20b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b08:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 20bd8 <mem_free+0xd4>
   20b0c:	b083      	sub	sp, #12
   20b0e:	9000      	str	r0, [sp, #0]
   20b10:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   20b14:	f8dc 3008 	ldr.w	r3, [ip, #8]
   20b18:	b12b      	cbz	r3, 20b26 <mem_free+0x22>
   20b1a:	f8dc 2000 	ldr.w	r2, [ip]
   20b1e:	9c00      	ldr	r4, [sp, #0]
   20b20:	7810      	ldrb	r0, [r2, #0]
   20b22:	42a0      	cmp	r0, r4
   20b24:	d006      	beq.n	20b34 <mem_free+0x30>
   20b26:	f10c 0c0c 	add.w	ip, ip, #12
   20b2a:	45e3      	cmp	fp, ip
   20b2c:	d1f2      	bne.n	20b14 <mem_free+0x10>
   20b2e:	b003      	add	sp, #12
   20b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b34:	f8dc a004 	ldr.w	sl, [ip, #4]
   20b38:	eb03 080a 	add.w	r8, r3, sl
   20b3c:	45c2      	cmp	sl, r8
   20b3e:	d2f2      	bcs.n	20b26 <mem_free+0x22>
   20b40:	6853      	ldr	r3, [r2, #4]
   20b42:	f8cd c004 	str.w	ip, [sp, #4]
   20b46:	46d6      	mov	lr, sl
   20b48:	469c      	mov	ip, r3
   20b4a:	f8d2 9010 	ldr.w	r9, [r2, #16]
   20b4e:	8997      	ldrh	r7, [r2, #12]
   20b50:	ebae 000a 	sub.w	r0, lr, sl
   20b54:	b3df      	cbz	r7, 20bce <mem_free+0xca>
   20b56:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   20b5a:	4290      	cmp	r0, r2
   20b5c:	d31c      	bcc.n	20b98 <mem_free+0x94>
   20b5e:	4665      	mov	r5, ip
   20b60:	2400      	movs	r4, #0
   20b62:	f109 0304 	add.w	r3, r9, #4
   20b66:	e003      	b.n	20b70 <mem_free+0x6c>
   20b68:	885a      	ldrh	r2, [r3, #2]
   20b6a:	3304      	adds	r3, #4
   20b6c:	4282      	cmp	r2, r0
   20b6e:	d815      	bhi.n	20b9c <mem_free+0x98>
   20b70:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   20b74:	3401      	adds	r4, #1
   20b76:	42a7      	cmp	r7, r4
   20b78:	fb02 5506 	mla	r5, r2, r6, r5
   20b7c:	eba0 0002 	sub.w	r0, r0, r2
   20b80:	461e      	mov	r6, r3
   20b82:	d1f1      	bne.n	20b68 <mem_free+0x64>
   20b84:	2000      	movs	r0, #0
   20b86:	4281      	cmp	r1, r0
   20b88:	d00d      	beq.n	20ba6 <mem_free+0xa2>
   20b8a:	f10e 0e01 	add.w	lr, lr, #1
   20b8e:	45f0      	cmp	r8, lr
   20b90:	d1de      	bne.n	20b50 <mem_free+0x4c>
   20b92:	f8dd c004 	ldr.w	ip, [sp, #4]
   20b96:	e7c6      	b.n	20b26 <mem_free+0x22>
   20b98:	4665      	mov	r5, ip
   20b9a:	464e      	mov	r6, r9
   20b9c:	8833      	ldrh	r3, [r6, #0]
   20b9e:	fb00 5003 	mla	r0, r0, r3, r5
   20ba2:	4281      	cmp	r1, r0
   20ba4:	d1f1      	bne.n	20b8a <mem_free+0x86>
   20ba6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   20baa:	f8dd c004 	ldr.w	ip, [sp, #4]
   20bae:	d0ba      	beq.n	20b26 <mem_free+0x22>
   20bb0:	2301      	movs	r3, #1
   20bb2:	4a08      	ldr	r2, [pc, #32]	; (20bd4 <mem_free+0xd0>)
   20bb4:	ea4f 115e 	mov.w	r1, lr, lsr #5
   20bb8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   20bbc:	f00e 0e1f 	and.w	lr, lr, #31
   20bc0:	fa03 fe0e 	lsl.w	lr, r3, lr
   20bc4:	ea4e 0000 	orr.w	r0, lr, r0
   20bc8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   20bcc:	e7af      	b.n	20b2e <mem_free+0x2a>
   20bce:	4638      	mov	r0, r7
   20bd0:	e7d9      	b.n	20b86 <mem_free+0x82>
   20bd2:	bf00      	nop
   20bd4:	20021c0c 	.word	0x20021c0c
   20bd8:	20021c50 	.word	0x20021c50

00020bdc <mem_alloc.constprop.5>:
   20bdc:	2800      	cmp	r0, #0
   20bde:	d050      	beq.n	20c82 <mem_alloc.constprop.5+0xa6>
   20be0:	4b6d      	ldr	r3, [pc, #436]	; (20d98 <mem_alloc.constprop.5+0x1bc>)
   20be2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   20be6:	4290      	cmp	r0, r2
   20be8:	d84b      	bhi.n	20c82 <mem_alloc.constprop.5+0xa6>
   20bea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bee:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   20bf2:	b083      	sub	sp, #12
   20bf4:	f1bb 0f00 	cmp.w	fp, #0
   20bf8:	d054      	beq.n	20ca4 <mem_alloc.constprop.5+0xc8>
   20bfa:	f10b 32ff 	add.w	r2, fp, #4294967295
   20bfe:	4691      	mov	r9, r2
   20c00:	2600      	movs	r6, #0
   20c02:	f04f 0812 	mov.w	r8, #18
   20c06:	4f65      	ldr	r7, [pc, #404]	; (20d9c <mem_alloc.constprop.5+0x1c0>)
   20c08:	9201      	str	r2, [sp, #4]
   20c0a:	f10b 0e11 	add.w	lr, fp, #17
   20c0e:	eb06 0209 	add.w	r2, r6, r9
   20c12:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   20c16:	3201      	adds	r2, #1
   20c18:	0852      	lsrs	r2, r2, #1
   20c1a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   20c1e:	f102 0112 	add.w	r1, r2, #18
   20c22:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   20c26:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   20c2a:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   20c2e:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   20c32:	f8dc c004 	ldr.w	ip, [ip, #4]
   20c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20c3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20c3e:	f8da a010 	ldr.w	sl, [sl, #16]
   20c42:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   20c46:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   20c4a:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   20c4e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   20c52:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   20c56:	6849      	ldr	r1, [r1, #4]
   20c58:	692d      	ldr	r5, [r5, #16]
   20c5a:	6924      	ldr	r4, [r4, #16]
   20c5c:	f8dc c004 	ldr.w	ip, [ip, #4]
   20c60:	4550      	cmp	r0, sl
   20c62:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   20c66:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   20c6a:	d915      	bls.n	20c98 <mem_alloc.constprop.5+0xbc>
   20c6c:	4288      	cmp	r0, r1
   20c6e:	d211      	bcs.n	20c94 <mem_alloc.constprop.5+0xb8>
   20c70:	42a8      	cmp	r0, r5
   20c72:	d908      	bls.n	20c86 <mem_alloc.constprop.5+0xaa>
   20c74:	1c56      	adds	r6, r2, #1
   20c76:	45b1      	cmp	r9, r6
   20c78:	f0c0 8087 	bcc.w	20d8a <mem_alloc.constprop.5+0x1ae>
   20c7c:	f102 0813 	add.w	r8, r2, #19
   20c80:	e7c5      	b.n	20c0e <mem_alloc.constprop.5+0x32>
   20c82:	2000      	movs	r0, #0
   20c84:	4770      	bx	lr
   20c86:	f102 39ff 	add.w	r9, r2, #4294967295
   20c8a:	454e      	cmp	r6, r9
   20c8c:	d87d      	bhi.n	20d8a <mem_alloc.constprop.5+0x1ae>
   20c8e:	f102 0e11 	add.w	lr, r2, #17
   20c92:	e7bc      	b.n	20c0e <mem_alloc.constprop.5+0x32>
   20c94:	f109 0601 	add.w	r6, r9, #1
   20c98:	45b3      	cmp	fp, r6
   20c9a:	d007      	beq.n	20cac <mem_alloc.constprop.5+0xd0>
   20c9c:	2e10      	cmp	r6, #16
   20c9e:	d001      	beq.n	20ca4 <mem_alloc.constprop.5+0xc8>
   20ca0:	45b3      	cmp	fp, r6
   20ca2:	d808      	bhi.n	20cb6 <mem_alloc.constprop.5+0xda>
   20ca4:	2000      	movs	r0, #0
   20ca6:	b003      	add	sp, #12
   20ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cac:	9a01      	ldr	r2, [sp, #4]
   20cae:	2a10      	cmp	r2, #16
   20cb0:	bf18      	it	ne
   20cb2:	4616      	movne	r6, r2
   20cb4:	d0f6      	beq.n	20ca4 <mem_alloc.constprop.5+0xc8>
   20cb6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20da0 <mem_alloc.constprop.5+0x1c4>
   20cba:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   20cbe:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   20cc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20cc6:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   20cca:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   20cce:	f8d2 e004 	ldr.w	lr, [r2, #4]
   20cd2:	691d      	ldr	r5, [r3, #16]
   20cd4:	2c00      	cmp	r4, #0
   20cd6:	d056      	beq.n	20d86 <mem_alloc.constprop.5+0x1aa>
   20cd8:	462a      	mov	r2, r5
   20cda:	4670      	mov	r0, lr
   20cdc:	00a4      	lsls	r4, r4, #2
   20cde:	eb05 0904 	add.w	r9, r5, r4
   20ce2:	8851      	ldrh	r1, [r2, #2]
   20ce4:	3204      	adds	r2, #4
   20ce6:	4591      	cmp	r9, r2
   20ce8:	4408      	add	r0, r1
   20cea:	d1fa      	bne.n	20ce2 <mem_alloc.constprop.5+0x106>
   20cec:	1929      	adds	r1, r5, r4
   20cee:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   20cf2:	4482      	add	sl, r0
   20cf4:	4582      	cmp	sl, r0
   20cf6:	d918      	bls.n	20d2a <mem_alloc.constprop.5+0x14e>
   20cf8:	0941      	lsrs	r1, r0, #5
   20cfa:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   20cfe:	f000 041f 	and.w	r4, r0, #31
   20d02:	fa22 f904 	lsr.w	r9, r2, r4
   20d06:	f019 0f01 	tst.w	r9, #1
   20d0a:	d007      	beq.n	20d1c <mem_alloc.constprop.5+0x140>
   20d0c:	e013      	b.n	20d36 <mem_alloc.constprop.5+0x15a>
   20d0e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   20d12:	fa22 f904 	lsr.w	r9, r2, r4
   20d16:	f019 0f01 	tst.w	r9, #1
   20d1a:	d10c      	bne.n	20d36 <mem_alloc.constprop.5+0x15a>
   20d1c:	3001      	adds	r0, #1
   20d1e:	4582      	cmp	sl, r0
   20d20:	ea4f 1150 	mov.w	r1, r0, lsr #5
   20d24:	f000 041f 	and.w	r4, r0, #31
   20d28:	d1f1      	bne.n	20d0e <mem_alloc.constprop.5+0x132>
   20d2a:	3601      	adds	r6, #1
   20d2c:	455e      	cmp	r6, fp
   20d2e:	f108 0808 	add.w	r8, r8, #8
   20d32:	d3c4      	bcc.n	20cbe <mem_alloc.constprop.5+0xe2>
   20d34:	e7b6      	b.n	20ca4 <mem_alloc.constprop.5+0xc8>
   20d36:	2601      	movs	r6, #1
   20d38:	fa06 f404 	lsl.w	r4, r6, r4
   20d3c:	899e      	ldrh	r6, [r3, #12]
   20d3e:	ea22 0204 	bic.w	r2, r2, r4
   20d42:	eba0 000e 	sub.w	r0, r0, lr
   20d46:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   20d4a:	685c      	ldr	r4, [r3, #4]
   20d4c:	2e00      	cmp	r6, #0
   20d4e:	d0a9      	beq.n	20ca4 <mem_alloc.constprop.5+0xc8>
   20d50:	886a      	ldrh	r2, [r5, #2]
   20d52:	4282      	cmp	r2, r0
   20d54:	d811      	bhi.n	20d7a <mem_alloc.constprop.5+0x19e>
   20d56:	2100      	movs	r1, #0
   20d58:	1d2b      	adds	r3, r5, #4
   20d5a:	e003      	b.n	20d64 <mem_alloc.constprop.5+0x188>
   20d5c:	885a      	ldrh	r2, [r3, #2]
   20d5e:	3304      	adds	r3, #4
   20d60:	4282      	cmp	r2, r0
   20d62:	d80a      	bhi.n	20d7a <mem_alloc.constprop.5+0x19e>
   20d64:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   20d68:	3101      	adds	r1, #1
   20d6a:	428e      	cmp	r6, r1
   20d6c:	fb02 4405 	mla	r4, r2, r5, r4
   20d70:	eba0 0002 	sub.w	r0, r0, r2
   20d74:	461d      	mov	r5, r3
   20d76:	d1f1      	bne.n	20d5c <mem_alloc.constprop.5+0x180>
   20d78:	e794      	b.n	20ca4 <mem_alloc.constprop.5+0xc8>
   20d7a:	882b      	ldrh	r3, [r5, #0]
   20d7c:	fb00 4003 	mla	r0, r0, r3, r4
   20d80:	b003      	add	sp, #12
   20d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d86:	4670      	mov	r0, lr
   20d88:	e7b0      	b.n	20cec <mem_alloc.constprop.5+0x110>
   20d8a:	f1bb 0f10 	cmp.w	fp, #16
   20d8e:	bf08      	it	eq
   20d90:	260f      	moveq	r6, #15
   20d92:	d090      	beq.n	20cb6 <mem_alloc.constprop.5+0xda>
   20d94:	e786      	b.n	20ca4 <mem_alloc.constprop.5+0xc8>
   20d96:	bf00      	nop
   20d98:	20021c8c 	.word	0x20021c8c
   20d9c:	20021c50 	.word	0x20021c50
   20da0:	20021c0c 	.word	0x20021c0c

00020da4 <mem_alloc.constprop.4>:
   20da4:	2800      	cmp	r0, #0
   20da6:	d04c      	beq.n	20e42 <mem_alloc.constprop.4+0x9e>
   20da8:	4b6b      	ldr	r3, [pc, #428]	; (20f58 <mem_alloc.constprop.4+0x1b4>)
   20daa:	681a      	ldr	r2, [r3, #0]
   20dac:	4290      	cmp	r0, r2
   20dae:	d848      	bhi.n	20e42 <mem_alloc.constprop.4+0x9e>
   20db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20db4:	685f      	ldr	r7, [r3, #4]
   20db6:	b083      	sub	sp, #12
   20db8:	9700      	str	r7, [sp, #0]
   20dba:	2f00      	cmp	r7, #0
   20dbc:	d051      	beq.n	20e62 <mem_alloc.constprop.4+0xbe>
   20dbe:	1e7a      	subs	r2, r7, #1
   20dc0:	4696      	mov	lr, r2
   20dc2:	2100      	movs	r1, #0
   20dc4:	f04f 0c01 	mov.w	ip, #1
   20dc8:	4c64      	ldr	r4, [pc, #400]	; (20f5c <mem_alloc.constprop.4+0x1b8>)
   20dca:	9201      	str	r2, [sp, #4]
   20dcc:	eb01 020e 	add.w	r2, r1, lr
   20dd0:	3201      	adds	r2, #1
   20dd2:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   20dd6:	0852      	lsrs	r2, r2, #1
   20dd8:	f102 0801 	add.w	r8, r2, #1
   20ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20de0:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   20de4:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   20de8:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   20dec:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   20df0:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   20df4:	f8d9 9004 	ldr.w	r9, [r9, #4]
   20df8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   20dfc:	f8da a010 	ldr.w	sl, [sl, #16]
   20e00:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   20e04:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   20e08:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   20e0c:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   20e10:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   20e14:	6936      	ldr	r6, [r6, #16]
   20e16:	f8db b004 	ldr.w	fp, [fp, #4]
   20e1a:	692d      	ldr	r5, [r5, #16]
   20e1c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   20e20:	4550      	cmp	r0, sl
   20e22:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   20e26:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   20e2a:	d913      	bls.n	20e54 <mem_alloc.constprop.4+0xb0>
   20e2c:	42a8      	cmp	r0, r5
   20e2e:	d210      	bcs.n	20e52 <mem_alloc.constprop.4+0xae>
   20e30:	42b0      	cmp	r0, r6
   20e32:	d908      	bls.n	20e46 <mem_alloc.constprop.4+0xa2>
   20e34:	45c6      	cmp	lr, r8
   20e36:	4641      	mov	r1, r8
   20e38:	f0c0 8087 	bcc.w	20f4a <mem_alloc.constprop.4+0x1a6>
   20e3c:	f108 0c01 	add.w	ip, r8, #1
   20e40:	e7c4      	b.n	20dcc <mem_alloc.constprop.4+0x28>
   20e42:	2000      	movs	r0, #0
   20e44:	4770      	bx	lr
   20e46:	f102 3eff 	add.w	lr, r2, #4294967295
   20e4a:	4571      	cmp	r1, lr
   20e4c:	d87d      	bhi.n	20f4a <mem_alloc.constprop.4+0x1a6>
   20e4e:	4617      	mov	r7, r2
   20e50:	e7bc      	b.n	20dcc <mem_alloc.constprop.4+0x28>
   20e52:	4639      	mov	r1, r7
   20e54:	9a00      	ldr	r2, [sp, #0]
   20e56:	428a      	cmp	r2, r1
   20e58:	d007      	beq.n	20e6a <mem_alloc.constprop.4+0xc6>
   20e5a:	2910      	cmp	r1, #16
   20e5c:	d001      	beq.n	20e62 <mem_alloc.constprop.4+0xbe>
   20e5e:	428a      	cmp	r2, r1
   20e60:	d808      	bhi.n	20e74 <mem_alloc.constprop.4+0xd0>
   20e62:	2000      	movs	r0, #0
   20e64:	b003      	add	sp, #12
   20e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e6a:	9a01      	ldr	r2, [sp, #4]
   20e6c:	2a10      	cmp	r2, #16
   20e6e:	bf18      	it	ne
   20e70:	4611      	movne	r1, r2
   20e72:	d0f6      	beq.n	20e62 <mem_alloc.constprop.4+0xbe>
   20e74:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20f60 <mem_alloc.constprop.4+0x1bc>
   20e78:	f8dd 9000 	ldr.w	r9, [sp]
   20e7c:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   20e80:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   20e84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20e88:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   20e8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   20e90:	f8d2 e004 	ldr.w	lr, [r2, #4]
   20e94:	691f      	ldr	r7, [r3, #16]
   20e96:	2e00      	cmp	r6, #0
   20e98:	d055      	beq.n	20f46 <mem_alloc.constprop.4+0x1a2>
   20e9a:	463a      	mov	r2, r7
   20e9c:	4670      	mov	r0, lr
   20e9e:	00b6      	lsls	r6, r6, #2
   20ea0:	eb07 0a06 	add.w	sl, r7, r6
   20ea4:	8855      	ldrh	r5, [r2, #2]
   20ea6:	3204      	adds	r2, #4
   20ea8:	4592      	cmp	sl, r2
   20eaa:	4428      	add	r0, r5
   20eac:	d1fa      	bne.n	20ea4 <mem_alloc.constprop.4+0x100>
   20eae:	19bd      	adds	r5, r7, r6
   20eb0:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   20eb4:	4483      	add	fp, r0
   20eb6:	4583      	cmp	fp, r0
   20eb8:	d918      	bls.n	20eec <mem_alloc.constprop.4+0x148>
   20eba:	0945      	lsrs	r5, r0, #5
   20ebc:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   20ec0:	f000 061f 	and.w	r6, r0, #31
   20ec4:	fa22 fa06 	lsr.w	sl, r2, r6
   20ec8:	f01a 0f01 	tst.w	sl, #1
   20ecc:	d007      	beq.n	20ede <mem_alloc.constprop.4+0x13a>
   20ece:	e013      	b.n	20ef8 <mem_alloc.constprop.4+0x154>
   20ed0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   20ed4:	fa22 fa06 	lsr.w	sl, r2, r6
   20ed8:	f01a 0f01 	tst.w	sl, #1
   20edc:	d10c      	bne.n	20ef8 <mem_alloc.constprop.4+0x154>
   20ede:	3001      	adds	r0, #1
   20ee0:	4583      	cmp	fp, r0
   20ee2:	ea4f 1550 	mov.w	r5, r0, lsr #5
   20ee6:	f000 061f 	and.w	r6, r0, #31
   20eea:	d1f1      	bne.n	20ed0 <mem_alloc.constprop.4+0x12c>
   20eec:	3101      	adds	r1, #1
   20eee:	4549      	cmp	r1, r9
   20ef0:	f108 0808 	add.w	r8, r8, #8
   20ef4:	d3c4      	bcc.n	20e80 <mem_alloc.constprop.4+0xdc>
   20ef6:	e7b4      	b.n	20e62 <mem_alloc.constprop.4+0xbe>
   20ef8:	2101      	movs	r1, #1
   20efa:	40b1      	lsls	r1, r6
   20efc:	899e      	ldrh	r6, [r3, #12]
   20efe:	ea22 0201 	bic.w	r2, r2, r1
   20f02:	eba0 000e 	sub.w	r0, r0, lr
   20f06:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   20f0a:	685c      	ldr	r4, [r3, #4]
   20f0c:	2e00      	cmp	r6, #0
   20f0e:	d0a8      	beq.n	20e62 <mem_alloc.constprop.4+0xbe>
   20f10:	887a      	ldrh	r2, [r7, #2]
   20f12:	4282      	cmp	r2, r0
   20f14:	d811      	bhi.n	20f3a <mem_alloc.constprop.4+0x196>
   20f16:	2100      	movs	r1, #0
   20f18:	1d3b      	adds	r3, r7, #4
   20f1a:	e003      	b.n	20f24 <mem_alloc.constprop.4+0x180>
   20f1c:	885a      	ldrh	r2, [r3, #2]
   20f1e:	3304      	adds	r3, #4
   20f20:	4282      	cmp	r2, r0
   20f22:	d80a      	bhi.n	20f3a <mem_alloc.constprop.4+0x196>
   20f24:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   20f28:	3101      	adds	r1, #1
   20f2a:	428e      	cmp	r6, r1
   20f2c:	eba0 0002 	sub.w	r0, r0, r2
   20f30:	fb02 4405 	mla	r4, r2, r5, r4
   20f34:	461f      	mov	r7, r3
   20f36:	d1f1      	bne.n	20f1c <mem_alloc.constprop.4+0x178>
   20f38:	e793      	b.n	20e62 <mem_alloc.constprop.4+0xbe>
   20f3a:	883b      	ldrh	r3, [r7, #0]
   20f3c:	fb00 4003 	mla	r0, r0, r3, r4
   20f40:	b003      	add	sp, #12
   20f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f46:	4670      	mov	r0, lr
   20f48:	e7b1      	b.n	20eae <mem_alloc.constprop.4+0x10a>
   20f4a:	9a00      	ldr	r2, [sp, #0]
   20f4c:	2a10      	cmp	r2, #16
   20f4e:	bf08      	it	eq
   20f50:	210f      	moveq	r1, #15
   20f52:	d08f      	beq.n	20e74 <mem_alloc.constprop.4+0xd0>
   20f54:	e785      	b.n	20e62 <mem_alloc.constprop.4+0xbe>
   20f56:	bf00      	nop
   20f58:	20021c8c 	.word	0x20021c8c
   20f5c:	20021c50 	.word	0x20021c50
   20f60:	20021c0c 	.word	0x20021c0c

00020f64 <nrf_mem_init>:
   20f64:	b570      	push	{r4, r5, r6, lr}
   20f66:	2200      	movs	r2, #0
   20f68:	2501      	movs	r5, #1
   20f6a:	4833      	ldr	r0, [pc, #204]	; (21038 <nrf_mem_init+0xd4>)
   20f6c:	0951      	lsrs	r1, r2, #5
   20f6e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   20f72:	f002 031f 	and.w	r3, r2, #31
   20f76:	fa05 f303 	lsl.w	r3, r5, r3
   20f7a:	3201      	adds	r2, #1
   20f7c:	4323      	orrs	r3, r4
   20f7e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   20f82:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   20f86:	d1f1      	bne.n	20f6c <nrf_mem_init+0x8>
   20f88:	2400      	movs	r4, #0
   20f8a:	4b2c      	ldr	r3, [pc, #176]	; (2103c <nrf_mem_init+0xd8>)
   20f8c:	4621      	mov	r1, r4
   20f8e:	223c      	movs	r2, #60	; 0x3c
   20f90:	482b      	ldr	r0, [pc, #172]	; (21040 <nrf_mem_init+0xdc>)
   20f92:	601c      	str	r4, [r3, #0]
   20f94:	f005 fa50 	bl	26438 <memset>
   20f98:	2110      	movs	r1, #16
   20f9a:	2205      	movs	r2, #5
   20f9c:	4b29      	ldr	r3, [pc, #164]	; (21044 <nrf_mem_init+0xe0>)
   20f9e:	4e2a      	ldr	r6, [pc, #168]	; (21048 <nrf_mem_init+0xe4>)
   20fa0:	e9c3 4400 	strd	r4, r4, [r3]
   20fa4:	60d9      	str	r1, [r3, #12]
   20fa6:	6159      	str	r1, [r3, #20]
   20fa8:	61d9      	str	r1, [r3, #28]
   20faa:	6259      	str	r1, [r3, #36]	; 0x24
   20fac:	62d9      	str	r1, [r3, #44]	; 0x2c
   20fae:	6359      	str	r1, [r3, #52]	; 0x34
   20fb0:	63d9      	str	r1, [r3, #60]	; 0x3c
   20fb2:	6459      	str	r1, [r3, #68]	; 0x44
   20fb4:	64d9      	str	r1, [r3, #76]	; 0x4c
   20fb6:	6559      	str	r1, [r3, #84]	; 0x54
   20fb8:	65d9      	str	r1, [r3, #92]	; 0x5c
   20fba:	6659      	str	r1, [r3, #100]	; 0x64
   20fbc:	66d9      	str	r1, [r3, #108]	; 0x6c
   20fbe:	6759      	str	r1, [r3, #116]	; 0x74
   20fc0:	67d9      	str	r1, [r3, #124]	; 0x7c
   20fc2:	609a      	str	r2, [r3, #8]
   20fc4:	611a      	str	r2, [r3, #16]
   20fc6:	619a      	str	r2, [r3, #24]
   20fc8:	621a      	str	r2, [r3, #32]
   20fca:	629a      	str	r2, [r3, #40]	; 0x28
   20fcc:	631a      	str	r2, [r3, #48]	; 0x30
   20fce:	639a      	str	r2, [r3, #56]	; 0x38
   20fd0:	641a      	str	r2, [r3, #64]	; 0x40
   20fd2:	649a      	str	r2, [r3, #72]	; 0x48
   20fd4:	651a      	str	r2, [r3, #80]	; 0x50
   20fd6:	659a      	str	r2, [r3, #88]	; 0x58
   20fd8:	661a      	str	r2, [r3, #96]	; 0x60
   20fda:	669a      	str	r2, [r3, #104]	; 0x68
   20fdc:	671a      	str	r2, [r3, #112]	; 0x70
   20fde:	679a      	str	r2, [r3, #120]	; 0x78
   20fe0:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   20fe4:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   20fe8:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   20fec:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   20ff0:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   20ff4:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   20ff8:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   20ffc:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   21000:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   21004:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   21008:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   2100c:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   21010:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   21014:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   21018:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   2101c:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   21020:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   21024:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   21028:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   2102c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   21030:	4620      	mov	r0, r4
   21032:	7035      	strb	r5, [r6, #0]
   21034:	bd70      	pop	{r4, r5, r6, pc}
   21036:	bf00      	nop
   21038:	20021c0c 	.word	0x20021c0c
   2103c:	20021c4c 	.word	0x20021c4c
   21040:	20021c50 	.word	0x20021c50
   21044:	20021c8c 	.word	0x20021c8c
   21048:	200262a0 	.word	0x200262a0

0002104c <nrf_mem_register>:
   2104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21050:	4b87      	ldr	r3, [pc, #540]	; (21270 <nrf_mem_register+0x224>)
   21052:	b087      	sub	sp, #28
   21054:	781b      	ldrb	r3, [r3, #0]
   21056:	2b00      	cmp	r3, #0
   21058:	f000 808c 	beq.w	21174 <nrf_mem_register+0x128>
   2105c:	b328      	cbz	r0, 210aa <nrf_mem_register+0x5e>
   2105e:	b321      	cbz	r1, 210aa <nrf_mem_register+0x5e>
   21060:	780b      	ldrb	r3, [r1, #0]
   21062:	f8df 8218 	ldr.w	r8, [pc, #536]	; 2127c <nrf_mem_register+0x230>
   21066:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   2106a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   2106e:	685b      	ldr	r3, [r3, #4]
   21070:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   21074:	4463      	add	r3, ip
   21076:	2b10      	cmp	r3, #16
   21078:	d811      	bhi.n	2109e <nrf_mem_register+0x52>
   2107a:	f04f 0a00 	mov.w	sl, #0
   2107e:	4689      	mov	r9, r1
   21080:	4b7c      	ldr	r3, [pc, #496]	; (21274 <nrf_mem_register+0x228>)
   21082:	4f7d      	ldr	r7, [pc, #500]	; (21278 <nrf_mem_register+0x22c>)
   21084:	681b      	ldr	r3, [r3, #0]
   21086:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   2108a:	9300      	str	r3, [sp, #0]
   2108c:	68b9      	ldr	r1, [r7, #8]
   2108e:	b191      	cbz	r1, 210b6 <nrf_mem_register+0x6a>
   21090:	f10a 0a01 	add.w	sl, sl, #1
   21094:	f1ba 0f05 	cmp.w	sl, #5
   21098:	f107 070c 	add.w	r7, r7, #12
   2109c:	d1f6      	bne.n	2108c <nrf_mem_register+0x40>
   2109e:	f248 1b07 	movw	fp, #33031	; 0x8107
   210a2:	4658      	mov	r0, fp
   210a4:	b007      	add	sp, #28
   210a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210aa:	f248 1b0e 	movw	fp, #33038	; 0x810e
   210ae:	4658      	mov	r0, fp
   210b0:	b007      	add	sp, #28
   210b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210b6:	f1bc 0f00 	cmp.w	ip, #0
   210ba:	d061      	beq.n	21180 <nrf_mem_register+0x134>
   210bc:	460d      	mov	r5, r1
   210be:	460c      	mov	r4, r1
   210c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   210c4:	eb0e 0b03 	add.w	fp, lr, r3
   210c8:	885a      	ldrh	r2, [r3, #2]
   210ca:	f833 6b04 	ldrh.w	r6, [r3], #4
   210ce:	4415      	add	r5, r2
   210d0:	459b      	cmp	fp, r3
   210d2:	fb02 4406 	mla	r4, r2, r6, r4
   210d6:	d1f7      	bne.n	210c8 <nrf_mem_register+0x7c>
   210d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   210dc:	42a3      	cmp	r3, r4
   210de:	d3d7      	bcc.n	21090 <nrf_mem_register+0x44>
   210e0:	9b00      	ldr	r3, [sp, #0]
   210e2:	442b      	add	r3, r5
   210e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   210e8:	d2d2      	bcs.n	21090 <nrf_mem_register+0x44>
   210ea:	4c63      	ldr	r4, [pc, #396]	; (21278 <nrf_mem_register+0x22c>)
   210ec:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   210f0:	0092      	lsls	r2, r2, #2
   210f2:	f8c0 a000 	str.w	sl, [r0]
   210f6:	18a0      	adds	r0, r4, r2
   210f8:	f844 9002 	str.w	r9, [r4, r2]
   210fc:	9a00      	ldr	r2, [sp, #0]
   210fe:	468b      	mov	fp, r1
   21100:	e9c0 2501 	strd	r2, r5, [r0, #4]
   21104:	f899 2001 	ldrb.w	r2, [r9, #1]
   21108:	485a      	ldr	r0, [pc, #360]	; (21274 <nrf_mem_register+0x228>)
   2110a:	2a01      	cmp	r2, #1
   2110c:	6003      	str	r3, [r0, #0]
   2110e:	d0c8      	beq.n	210a2 <nrf_mem_register+0x56>
   21110:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   21114:	2b00      	cmp	r3, #0
   21116:	d0c4      	beq.n	210a2 <nrf_mem_register+0x56>
   21118:	2500      	movs	r5, #0
   2111a:	f8cd 9004 	str.w	r9, [sp, #4]
   2111e:	f8cd a00c 	str.w	sl, [sp, #12]
   21122:	f8cd b014 	str.w	fp, [sp, #20]
   21126:	9b01      	ldr	r3, [sp, #4]
   21128:	781f      	ldrb	r7, [r3, #0]
   2112a:	691a      	ldr	r2, [r3, #16]
   2112c:	013b      	lsls	r3, r7, #4
   2112e:	eb03 0907 	add.w	r9, r3, r7
   21132:	9300      	str	r3, [sp, #0]
   21134:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   21138:	6859      	ldr	r1, [r3, #4]
   2113a:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   2113e:	9102      	str	r1, [sp, #8]
   21140:	bb39      	cbnz	r1, 21192 <nrf_mem_register+0x146>
   21142:	9a03      	ldr	r2, [sp, #12]
   21144:	60dd      	str	r5, [r3, #12]
   21146:	609a      	str	r2, [r3, #8]
   21148:	9b00      	ldr	r3, [sp, #0]
   2114a:	443b      	add	r3, r7
   2114c:	461f      	mov	r7, r3
   2114e:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   21152:	684b      	ldr	r3, [r1, #4]
   21154:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   21158:	3301      	adds	r3, #1
   2115a:	4294      	cmp	r4, r2
   2115c:	604b      	str	r3, [r1, #4]
   2115e:	d912      	bls.n	21186 <nrf_mem_register+0x13a>
   21160:	9b01      	ldr	r3, [sp, #4]
   21162:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   21166:	899b      	ldrh	r3, [r3, #12]
   21168:	3501      	adds	r5, #1
   2116a:	429d      	cmp	r5, r3
   2116c:	d3db      	bcc.n	21126 <nrf_mem_register+0xda>
   2116e:	f8dd b014 	ldr.w	fp, [sp, #20]
   21172:	e796      	b.n	210a2 <nrf_mem_register+0x56>
   21174:	f248 1b08 	movw	fp, #33032	; 0x8108
   21178:	4658      	mov	r0, fp
   2117a:	b007      	add	sp, #28
   2117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21180:	9b00      	ldr	r3, [sp, #0]
   21182:	4665      	mov	r5, ip
   21184:	e7ae      	b.n	210e4 <nrf_mem_register+0x98>
   21186:	9b01      	ldr	r3, [sp, #4]
   21188:	3501      	adds	r5, #1
   2118a:	899b      	ldrh	r3, [r3, #12]
   2118c:	42ab      	cmp	r3, r5
   2118e:	d8ca      	bhi.n	21126 <nrf_mem_register+0xda>
   21190:	e7ed      	b.n	2116e <nrf_mem_register+0x122>
   21192:	2600      	movs	r6, #0
   21194:	f101 3aff 	add.w	sl, r1, #4294967295
   21198:	9504      	str	r5, [sp, #16]
   2119a:	eb06 000a 	add.w	r0, r6, sl
   2119e:	eb09 0206 	add.w	r2, r9, r6
   211a2:	3201      	adds	r2, #1
   211a4:	3001      	adds	r0, #1
   211a6:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   211aa:	0840      	lsrs	r0, r0, #1
   211ac:	4d32      	ldr	r5, [pc, #200]	; (21278 <nrf_mem_register+0x22c>)
   211ae:	eb09 0100 	add.w	r1, r9, r0
   211b2:	eb09 030a 	add.w	r3, r9, sl
   211b6:	3101      	adds	r1, #1
   211b8:	3301      	adds	r3, #1
   211ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   211be:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   211c2:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   211c6:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   211ca:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   211ce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   211d2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   211d6:	f8db b010 	ldr.w	fp, [fp, #16]
   211da:	6852      	ldr	r2, [r2, #4]
   211dc:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   211e0:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   211e4:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   211e8:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   211ec:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   211f0:	f8de e010 	ldr.w	lr, [lr, #16]
   211f4:	6849      	ldr	r1, [r1, #4]
   211f6:	f8dc c010 	ldr.w	ip, [ip, #16]
   211fa:	685b      	ldr	r3, [r3, #4]
   211fc:	4294      	cmp	r4, r2
   211fe:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   21202:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   21206:	d92d      	bls.n	21264 <nrf_mem_register+0x218>
   21208:	429c      	cmp	r4, r3
   2120a:	d22d      	bcs.n	21268 <nrf_mem_register+0x21c>
   2120c:	428c      	cmp	r4, r1
   2120e:	d924      	bls.n	2125a <nrf_mem_register+0x20e>
   21210:	1c46      	adds	r6, r0, #1
   21212:	45b2      	cmp	sl, r6
   21214:	d2c1      	bcs.n	2119a <nrf_mem_register+0x14e>
   21216:	2610      	movs	r6, #16
   21218:	9d04      	ldr	r5, [sp, #16]
   2121a:	9a02      	ldr	r2, [sp, #8]
   2121c:	42b2      	cmp	r2, r6
   2121e:	d911      	bls.n	21244 <nrf_mem_register+0x1f8>
   21220:	9b00      	ldr	r3, [sp, #0]
   21222:	443b      	add	r3, r7
   21224:	441a      	add	r2, r3
   21226:	4433      	add	r3, r6
   21228:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   2122c:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   21230:	2208      	movs	r2, #8
   21232:	4651      	mov	r1, sl
   21234:	eb0a 0002 	add.w	r0, sl, r2
   21238:	f1aa 0a08 	sub.w	sl, sl, #8
   2123c:	f7eb fc86 	bl	cb4c <memcpy>
   21240:	45d1      	cmp	r9, sl
   21242:	d1f5      	bne.n	21230 <nrf_mem_register+0x1e4>
   21244:	9b00      	ldr	r3, [sp, #0]
   21246:	9903      	ldr	r1, [sp, #12]
   21248:	443b      	add	r3, r7
   2124a:	4433      	add	r3, r6
   2124c:	3301      	adds	r3, #1
   2124e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   21252:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   21256:	6055      	str	r5, [r2, #4]
   21258:	e776      	b.n	21148 <nrf_mem_register+0xfc>
   2125a:	f100 3aff 	add.w	sl, r0, #4294967295
   2125e:	4556      	cmp	r6, sl
   21260:	d99b      	bls.n	2119a <nrf_mem_register+0x14e>
   21262:	e7d8      	b.n	21216 <nrf_mem_register+0x1ca>
   21264:	9d04      	ldr	r5, [sp, #16]
   21266:	e7d8      	b.n	2121a <nrf_mem_register+0x1ce>
   21268:	9d04      	ldr	r5, [sp, #16]
   2126a:	f10a 0601 	add.w	r6, sl, #1
   2126e:	e7d4      	b.n	2121a <nrf_mem_register+0x1ce>
   21270:	200262a0 	.word	0x200262a0
   21274:	20021c4c 	.word	0x20021c4c
   21278:	20021c50 	.word	0x20021c50
   2127c:	20021c8c 	.word	0x20021c8c

00021280 <nrf_malloc>:
   21280:	4b03      	ldr	r3, [pc, #12]	; (21290 <nrf_malloc+0x10>)
   21282:	781b      	ldrb	r3, [r3, #0]
   21284:	b10b      	cbz	r3, 2128a <nrf_malloc+0xa>
   21286:	f7ff bd8d 	b.w	20da4 <mem_alloc.constprop.4>
   2128a:	4618      	mov	r0, r3
   2128c:	4770      	bx	lr
   2128e:	bf00      	nop
   21290:	200262a0 	.word	0x200262a0

00021294 <nrf_free>:
   21294:	4b04      	ldr	r3, [pc, #16]	; (212a8 <nrf_free+0x14>)
   21296:	781b      	ldrb	r3, [r3, #0]
   21298:	b123      	cbz	r3, 212a4 <nrf_free+0x10>
   2129a:	b118      	cbz	r0, 212a4 <nrf_free+0x10>
   2129c:	4601      	mov	r1, r0
   2129e:	2000      	movs	r0, #0
   212a0:	f7ff bc30 	b.w	20b04 <mem_free>
   212a4:	4770      	bx	lr
   212a6:	bf00      	nop
   212a8:	200262a0 	.word	0x200262a0

000212ac <nrf_realloc>:
   212ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212b0:	4b52      	ldr	r3, [pc, #328]	; (213fc <nrf_realloc+0x150>)
   212b2:	b087      	sub	sp, #28
   212b4:	781b      	ldrb	r3, [r3, #0]
   212b6:	b173      	cbz	r3, 212d6 <nrf_realloc+0x2a>
   212b8:	b168      	cbz	r0, 212d6 <nrf_realloc+0x2a>
   212ba:	e9cd 0101 	strd	r0, r1, [sp, #4]
   212be:	f8df a148 	ldr.w	sl, [pc, #328]	; 21408 <nrf_realloc+0x15c>
   212c2:	f8da 3000 	ldr.w	r3, [sl]
   212c6:	b10b      	cbz	r3, 212cc <nrf_realloc+0x20>
   212c8:	781a      	ldrb	r2, [r3, #0]
   212ca:	b14a      	cbz	r2, 212e0 <nrf_realloc+0x34>
   212cc:	4b4c      	ldr	r3, [pc, #304]	; (21400 <nrf_realloc+0x154>)
   212ce:	f10a 0a0c 	add.w	sl, sl, #12
   212d2:	4553      	cmp	r3, sl
   212d4:	d1f5      	bne.n	212c2 <nrf_realloc+0x16>
   212d6:	2400      	movs	r4, #0
   212d8:	4620      	mov	r0, r4
   212da:	b007      	add	sp, #28
   212dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212e0:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   212e4:	444a      	add	r2, r9
   212e6:	4591      	cmp	r9, r2
   212e8:	9200      	str	r2, [sp, #0]
   212ea:	d2ef      	bcs.n	212cc <nrf_realloc+0x20>
   212ec:	685a      	ldr	r2, [r3, #4]
   212ee:	f8cd a00c 	str.w	sl, [sp, #12]
   212f2:	46cb      	mov	fp, r9
   212f4:	4692      	mov	sl, r2
   212f6:	f8d3 8010 	ldr.w	r8, [r3, #16]
   212fa:	899f      	ldrh	r7, [r3, #12]
   212fc:	ebab 0e09 	sub.w	lr, fp, r9
   21300:	b1d7      	cbz	r7, 21338 <nrf_realloc+0x8c>
   21302:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   21306:	45e6      	cmp	lr, ip
   21308:	4662      	mov	r2, ip
   2130a:	d31d      	bcc.n	21348 <nrf_realloc+0x9c>
   2130c:	4654      	mov	r4, sl
   2130e:	4671      	mov	r1, lr
   21310:	4665      	mov	r5, ip
   21312:	2000      	movs	r0, #0
   21314:	f108 0304 	add.w	r3, r8, #4
   21318:	e004      	b.n	21324 <nrf_realloc+0x78>
   2131a:	885a      	ldrh	r2, [r3, #2]
   2131c:	3304      	adds	r3, #4
   2131e:	428a      	cmp	r2, r1
   21320:	4615      	mov	r5, r2
   21322:	d814      	bhi.n	2134e <nrf_realloc+0xa2>
   21324:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   21328:	3001      	adds	r0, #1
   2132a:	4287      	cmp	r7, r0
   2132c:	fb02 4406 	mla	r4, r2, r6, r4
   21330:	eba1 0105 	sub.w	r1, r1, r5
   21334:	461e      	mov	r6, r3
   21336:	d1f0      	bne.n	2131a <nrf_realloc+0x6e>
   21338:	9b00      	ldr	r3, [sp, #0]
   2133a:	f10b 0b01 	add.w	fp, fp, #1
   2133e:	455b      	cmp	r3, fp
   21340:	d1dc      	bne.n	212fc <nrf_realloc+0x50>
   21342:	f8dd a00c 	ldr.w	sl, [sp, #12]
   21346:	e7c1      	b.n	212cc <nrf_realloc+0x20>
   21348:	4654      	mov	r4, sl
   2134a:	4671      	mov	r1, lr
   2134c:	4646      	mov	r6, r8
   2134e:	8833      	ldrh	r3, [r6, #0]
   21350:	fb01 4103 	mla	r1, r1, r3, r4
   21354:	9b01      	ldr	r3, [sp, #4]
   21356:	428b      	cmp	r3, r1
   21358:	d1ee      	bne.n	21338 <nrf_realloc+0x8c>
   2135a:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   2135e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   21362:	d0b3      	beq.n	212cc <nrf_realloc+0x20>
   21364:	45e6      	cmp	lr, ip
   21366:	d334      	bcc.n	213d2 <nrf_realloc+0x126>
   21368:	2200      	movs	r2, #0
   2136a:	f108 0304 	add.w	r3, r8, #4
   2136e:	e006      	b.n	2137e <nrf_realloc+0xd2>
   21370:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   21374:	4698      	mov	r8, r3
   21376:	45f4      	cmp	ip, lr
   21378:	f103 0304 	add.w	r3, r3, #4
   2137c:	d829      	bhi.n	213d2 <nrf_realloc+0x126>
   2137e:	3201      	adds	r2, #1
   21380:	42ba      	cmp	r2, r7
   21382:	ebae 0e0c 	sub.w	lr, lr, ip
   21386:	d1f3      	bne.n	21370 <nrf_realloc+0xc4>
   21388:	2300      	movs	r3, #0
   2138a:	9a02      	ldr	r2, [sp, #8]
   2138c:	429a      	cmp	r2, r3
   2138e:	d923      	bls.n	213d8 <nrf_realloc+0x12c>
   21390:	4610      	mov	r0, r2
   21392:	f7ff fd07 	bl	20da4 <mem_alloc.constprop.4>
   21396:	4604      	mov	r4, r0
   21398:	2800      	cmp	r0, #0
   2139a:	d097      	beq.n	212cc <nrf_realloc+0x20>
   2139c:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   213a0:	462a      	mov	r2, r5
   213a2:	f7eb fbd3 	bl	cb4c <memcpy>
   213a6:	462b      	mov	r3, r5
   213a8:	2201      	movs	r2, #1
   213aa:	3303      	adds	r3, #3
   213ac:	4915      	ldr	r1, [pc, #84]	; (21404 <nrf_realloc+0x158>)
   213ae:	4423      	add	r3, r4
   213b0:	f023 0303 	bic.w	r3, r3, #3
   213b4:	ea4f 105b 	mov.w	r0, fp, lsr #5
   213b8:	681e      	ldr	r6, [r3, #0]
   213ba:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   213be:	f00b 031f 	and.w	r3, fp, #31
   213c2:	fa02 f303 	lsl.w	r3, r2, r3
   213c6:	9605      	str	r6, [sp, #20]
   213c8:	432b      	orrs	r3, r5
   213ca:	9a05      	ldr	r2, [sp, #20]
   213cc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   213d0:	e782      	b.n	212d8 <nrf_realloc+0x2c>
   213d2:	f8b8 3000 	ldrh.w	r3, [r8]
   213d6:	e7d8      	b.n	2138a <nrf_realloc+0xde>
   213d8:	4615      	mov	r5, r2
   213da:	b96a      	cbnz	r2, 213f8 <nrf_realloc+0x14c>
   213dc:	2301      	movs	r3, #1
   213de:	4a09      	ldr	r2, [pc, #36]	; (21404 <nrf_realloc+0x158>)
   213e0:	ea4f 115b 	mov.w	r1, fp, lsr #5
   213e4:	f00b 041f 	and.w	r4, fp, #31
   213e8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   213ec:	40a3      	lsls	r3, r4
   213ee:	4303      	orrs	r3, r0
   213f0:	462c      	mov	r4, r5
   213f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   213f6:	e76f      	b.n	212d8 <nrf_realloc+0x2c>
   213f8:	9c01      	ldr	r4, [sp, #4]
   213fa:	e76d      	b.n	212d8 <nrf_realloc+0x2c>
   213fc:	200262a0 	.word	0x200262a0
   21400:	20021c8c 	.word	0x20021c8c
   21404:	20021c0c 	.word	0x20021c0c
   21408:	20021c50 	.word	0x20021c50

0002140c <nrf_shared_malloc>:
   2140c:	4b03      	ldr	r3, [pc, #12]	; (2141c <nrf_shared_malloc+0x10>)
   2140e:	781b      	ldrb	r3, [r3, #0]
   21410:	b10b      	cbz	r3, 21416 <nrf_shared_malloc+0xa>
   21412:	f7ff bbe3 	b.w	20bdc <mem_alloc.constprop.5>
   21416:	4618      	mov	r0, r3
   21418:	4770      	bx	lr
   2141a:	bf00      	nop
   2141c:	200262a0 	.word	0x200262a0

00021420 <nrf_shared_free>:
   21420:	4b04      	ldr	r3, [pc, #16]	; (21434 <nrf_shared_free+0x14>)
   21422:	781b      	ldrb	r3, [r3, #0]
   21424:	b123      	cbz	r3, 21430 <nrf_shared_free+0x10>
   21426:	b118      	cbz	r0, 21430 <nrf_shared_free+0x10>
   21428:	4601      	mov	r1, r0
   2142a:	2001      	movs	r0, #1
   2142c:	f7ff bb6a 	b.w	20b04 <mem_free>
   21430:	4770      	bx	lr
   21432:	bf00      	nop
   21434:	200262a0 	.word	0x200262a0

00021438 <rpc_dfu_event_handler>:
   21438:	b508      	push	{r3, lr}
   2143a:	4a08      	ldr	r2, [pc, #32]	; (2145c <rpc_dfu_event_handler+0x24>)
   2143c:	68c1      	ldr	r1, [r0, #12]
   2143e:	8812      	ldrh	r2, [r2, #0]
   21440:	4603      	mov	r3, r0
   21442:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   21446:	d005      	beq.n	21454 <rpc_dfu_event_handler+0x1c>
   21448:	6800      	ldr	r0, [r0, #0]
   2144a:	b110      	cbz	r0, 21452 <rpc_dfu_event_handler+0x1a>
   2144c:	f7fd f96a 	bl	1e724 <rpc_dfu_client_data_free>
   21450:	2000      	movs	r0, #0
   21452:	bd08      	pop	{r3, pc}
   21454:	4a02      	ldr	r2, [pc, #8]	; (21460 <rpc_dfu_event_handler+0x28>)
   21456:	2001      	movs	r0, #1
   21458:	6013      	str	r3, [r2, #0]
   2145a:	bd08      	pop	{r3, pc}
   2145c:	200242cc 	.word	0x200242cc
   21460:	20021da8 	.word	0x20021da8

00021464 <mfu_interface_init>:
   21464:	2300      	movs	r3, #0
   21466:	b510      	push	{r4, lr}
   21468:	4808      	ldr	r0, [pc, #32]	; (2148c <mfu_interface_init+0x28>)
   2146a:	4909      	ldr	r1, [pc, #36]	; (21490 <mfu_interface_init+0x2c>)
   2146c:	4a09      	ldr	r2, [pc, #36]	; (21494 <mfu_interface_init+0x30>)
   2146e:	4c0a      	ldr	r4, [pc, #40]	; (21498 <mfu_interface_init+0x34>)
   21470:	8003      	strh	r3, [r0, #0]
   21472:	600b      	str	r3, [r1, #0]
   21474:	6013      	str	r3, [r2, #0]
   21476:	6023      	str	r3, [r4, #0]
   21478:	f7fd f91e 	bl	1e6b8 <rpc_dfu_client_init>
   2147c:	b910      	cbnz	r0, 21484 <mfu_interface_init+0x20>
   2147e:	2301      	movs	r3, #1
   21480:	6023      	str	r3, [r4, #0]
   21482:	bd10      	pop	{r4, pc}
   21484:	f04f 30ff 	mov.w	r0, #4294967295
   21488:	bd10      	pop	{r4, pc}
   2148a:	bf00      	nop
   2148c:	200242cc 	.word	0x200242cc
   21490:	20021da8 	.word	0x20021da8
   21494:	20021da4 	.word	0x20021da4
   21498:	20021d9c 	.word	0x20021d9c

0002149c <mfu_interface_open>:
   2149c:	b508      	push	{r3, lr}
   2149e:	4b07      	ldr	r3, [pc, #28]	; (214bc <mfu_interface_open+0x20>)
   214a0:	681a      	ldr	r2, [r3, #0]
   214a2:	2a01      	cmp	r2, #1
   214a4:	d103      	bne.n	214ae <mfu_interface_open+0x12>
   214a6:	2202      	movs	r2, #2
   214a8:	601a      	str	r2, [r3, #0]
   214aa:	4805      	ldr	r0, [pc, #20]	; (214c0 <mfu_interface_open+0x24>)
   214ac:	bd08      	pop	{r3, pc}
   214ae:	2001      	movs	r0, #1
   214b0:	f7f5 fb66 	bl	16b80 <bsd_os_errno_set>
   214b4:	f04f 30ff 	mov.w	r0, #4294967295
   214b8:	bd08      	pop	{r3, pc}
   214ba:	bf00      	nop
   214bc:	20021d9c 	.word	0x20021d9c
   214c0:	49765432 	.word	0x49765432

000214c4 <mfu_interface_close>:
   214c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   214c6:	4c32      	ldr	r4, [pc, #200]	; (21590 <mfu_interface_close+0xcc>)
   214c8:	b083      	sub	sp, #12
   214ca:	6823      	ldr	r3, [r4, #0]
   214cc:	1e9a      	subs	r2, r3, #2
   214ce:	2a01      	cmp	r2, #1
   214d0:	d857      	bhi.n	21582 <mfu_interface_close+0xbe>
   214d2:	2b03      	cmp	r3, #3
   214d4:	d004      	beq.n	214e0 <mfu_interface_close+0x1c>
   214d6:	2301      	movs	r3, #1
   214d8:	2000      	movs	r0, #0
   214da:	6023      	str	r3, [r4, #0]
   214dc:	b003      	add	sp, #12
   214de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   214e0:	2100      	movs	r1, #0
   214e2:	4668      	mov	r0, sp
   214e4:	f7fd f8ee 	bl	1e6c4 <rpc_dfu_client_request_alloc>
   214e8:	4603      	mov	r3, r0
   214ea:	2800      	cmp	r0, #0
   214ec:	d13d      	bne.n	2156a <mfu_interface_close+0xa6>
   214ee:	2104      	movs	r1, #4
   214f0:	4e28      	ldr	r6, [pc, #160]	; (21594 <mfu_interface_close+0xd0>)
   214f2:	9800      	ldr	r0, [sp, #0]
   214f4:	8832      	ldrh	r2, [r6, #0]
   214f6:	7201      	strb	r1, [r0, #8]
   214f8:	3201      	adds	r2, #1
   214fa:	b292      	uxth	r2, r2
   214fc:	0411      	lsls	r1, r2, #16
   214fe:	f041 0106 	orr.w	r1, r1, #6
   21502:	4d25      	ldr	r5, [pc, #148]	; (21598 <mfu_interface_close+0xd4>)
   21504:	60c1      	str	r1, [r0, #12]
   21506:	7103      	strb	r3, [r0, #4]
   21508:	7143      	strb	r3, [r0, #5]
   2150a:	7183      	strb	r3, [r0, #6]
   2150c:	71c3      	strb	r3, [r0, #7]
   2150e:	7243      	strb	r3, [r0, #9]
   21510:	7283      	strb	r3, [r0, #10]
   21512:	72c3      	strb	r3, [r0, #11]
   21514:	2106      	movs	r1, #6
   21516:	8032      	strh	r2, [r6, #0]
   21518:	602b      	str	r3, [r5, #0]
   2151a:	f7fd f8e7 	bl	1e6ec <rpc_dfu_client_request_send>
   2151e:	b9d8      	cbnz	r0, 21558 <mfu_interface_close+0x94>
   21520:	f04f 33ff 	mov.w	r3, #4294967295
   21524:	ae02      	add	r6, sp, #8
   21526:	4627      	mov	r7, r4
   21528:	f846 3d04 	str.w	r3, [r6, #-4]!
   2152c:	e004      	b.n	21538 <mfu_interface_close+0x74>
   2152e:	4631      	mov	r1, r6
   21530:	4638      	mov	r0, r7
   21532:	f7f5 fa6d 	bl	16a10 <bsd_os_timedwait>
   21536:	b9f0      	cbnz	r0, 21576 <mfu_interface_close+0xb2>
   21538:	6828      	ldr	r0, [r5, #0]
   2153a:	2800      	cmp	r0, #0
   2153c:	d0f7      	beq.n	2152e <mfu_interface_close+0x6a>
   2153e:	6905      	ldr	r5, [r0, #16]
   21540:	f7fd f8e8 	bl	1e714 <rpc_dfu_client_message_free>
   21544:	2d00      	cmp	r5, #0
   21546:	d0c6      	beq.n	214d6 <mfu_interface_close+0x12>
   21548:	4b14      	ldr	r3, [pc, #80]	; (2159c <mfu_interface_close+0xd8>)
   2154a:	2008      	movs	r0, #8
   2154c:	601d      	str	r5, [r3, #0]
   2154e:	f7f5 fb17 	bl	16b80 <bsd_os_errno_set>
   21552:	f04f 30ff 	mov.w	r0, #4294967295
   21556:	e7c1      	b.n	214dc <mfu_interface_close+0x18>
   21558:	9800      	ldr	r0, [sp, #0]
   2155a:	6803      	ldr	r3, [r0, #0]
   2155c:	b11b      	cbz	r3, 21566 <mfu_interface_close+0xa2>
   2155e:	4618      	mov	r0, r3
   21560:	f7fd f8e0 	bl	1e724 <rpc_dfu_client_data_free>
   21564:	9800      	ldr	r0, [sp, #0]
   21566:	f7fd f8d5 	bl	1e714 <rpc_dfu_client_message_free>
   2156a:	200c      	movs	r0, #12
   2156c:	f7f5 fb08 	bl	16b80 <bsd_os_errno_set>
   21570:	f04f 30ff 	mov.w	r0, #4294967295
   21574:	e7b2      	b.n	214dc <mfu_interface_close+0x18>
   21576:	203c      	movs	r0, #60	; 0x3c
   21578:	f7f5 fb02 	bl	16b80 <bsd_os_errno_set>
   2157c:	f04f 30ff 	mov.w	r0, #4294967295
   21580:	e7ac      	b.n	214dc <mfu_interface_close+0x18>
   21582:	2001      	movs	r0, #1
   21584:	f7f5 fafc 	bl	16b80 <bsd_os_errno_set>
   21588:	f04f 30ff 	mov.w	r0, #4294967295
   2158c:	e7a6      	b.n	214dc <mfu_interface_close+0x18>
   2158e:	bf00      	nop
   21590:	20021d9c 	.word	0x20021d9c
   21594:	200242cc 	.word	0x200242cc
   21598:	20021da8 	.word	0x20021da8
   2159c:	20021da0 	.word	0x20021da0

000215a0 <mfu_interface_sendto>:
   215a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   215a4:	4e64      	ldr	r6, [pc, #400]	; (21738 <mfu_interface_sendto+0x198>)
   215a6:	460f      	mov	r7, r1
   215a8:	6831      	ldr	r1, [r6, #0]
   215aa:	4615      	mov	r5, r2
   215ac:	1e8a      	subs	r2, r1, #2
   215ae:	2a01      	cmp	r2, #1
   215b0:	b082      	sub	sp, #8
   215b2:	f200 80b4 	bhi.w	2171e <mfu_interface_sendto+0x17e>
   215b6:	2f00      	cmp	r7, #0
   215b8:	f000 80a5 	beq.w	21706 <mfu_interface_sendto+0x166>
   215bc:	2d00      	cmp	r5, #0
   215be:	f000 80a2 	beq.w	21706 <mfu_interface_sendto+0x166>
   215c2:	2b00      	cmp	r3, #0
   215c4:	f040 80b1 	bne.w	2172a <mfu_interface_sendto+0x18a>
   215c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   215ca:	2b00      	cmp	r3, #0
   215cc:	f040 80a1 	bne.w	21712 <mfu_interface_sendto+0x172>
   215d0:	2902      	cmp	r1, #2
   215d2:	d04f      	beq.n	21674 <mfu_interface_sendto+0xd4>
   215d4:	46e8      	mov	r8, sp
   215d6:	4640      	mov	r0, r8
   215d8:	4629      	mov	r1, r5
   215da:	f7fd f873 	bl	1e6c4 <rpc_dfu_client_request_alloc>
   215de:	4606      	mov	r6, r0
   215e0:	b140      	cbz	r0, 215f4 <mfu_interface_sendto+0x54>
   215e2:	200c      	movs	r0, #12
   215e4:	f7f5 facc 	bl	16b80 <bsd_os_errno_set>
   215e8:	f04f 35ff 	mov.w	r5, #4294967295
   215ec:	4628      	mov	r0, r5
   215ee:	b002      	add	sp, #8
   215f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   215f4:	9b00      	ldr	r3, [sp, #0]
   215f6:	4639      	mov	r1, r7
   215f8:	6818      	ldr	r0, [r3, #0]
   215fa:	462a      	mov	r2, r5
   215fc:	f7eb faa6 	bl	cb4c <memcpy>
   21600:	2104      	movs	r1, #4
   21602:	4c4e      	ldr	r4, [pc, #312]	; (2173c <mfu_interface_sendto+0x19c>)
   21604:	9800      	ldr	r0, [sp, #0]
   21606:	8823      	ldrh	r3, [r4, #0]
   21608:	6045      	str	r5, [r0, #4]
   2160a:	3301      	adds	r3, #1
   2160c:	b29b      	uxth	r3, r3
   2160e:	041a      	lsls	r2, r3, #16
   21610:	8023      	strh	r3, [r4, #0]
   21612:	430a      	orrs	r2, r1
   21614:	4c4a      	ldr	r4, [pc, #296]	; (21740 <mfu_interface_sendto+0x1a0>)
   21616:	60c2      	str	r2, [r0, #12]
   21618:	7246      	strb	r6, [r0, #9]
   2161a:	7286      	strb	r6, [r0, #10]
   2161c:	72c6      	strb	r6, [r0, #11]
   2161e:	7201      	strb	r1, [r0, #8]
   21620:	6026      	str	r6, [r4, #0]
   21622:	f7fd f863 	bl	1e6ec <rpc_dfu_client_request_send>
   21626:	2800      	cmp	r0, #0
   21628:	d163      	bne.n	216f2 <mfu_interface_sendto+0x152>
   2162a:	f04f 33ff 	mov.w	r3, #4294967295
   2162e:	ae02      	add	r6, sp, #8
   21630:	4f41      	ldr	r7, [pc, #260]	; (21738 <mfu_interface_sendto+0x198>)
   21632:	f846 3d04 	str.w	r3, [r6, #-4]!
   21636:	e004      	b.n	21642 <mfu_interface_sendto+0xa2>
   21638:	4631      	mov	r1, r6
   2163a:	4638      	mov	r0, r7
   2163c:	f7f5 f9e8 	bl	16a10 <bsd_os_timedwait>
   21640:	b978      	cbnz	r0, 21662 <mfu_interface_sendto+0xc2>
   21642:	6820      	ldr	r0, [r4, #0]
   21644:	2800      	cmp	r0, #0
   21646:	d0f7      	beq.n	21638 <mfu_interface_sendto+0x98>
   21648:	6904      	ldr	r4, [r0, #16]
   2164a:	f7fd f863 	bl	1e714 <rpc_dfu_client_message_free>
   2164e:	2c00      	cmp	r4, #0
   21650:	d0cc      	beq.n	215ec <mfu_interface_sendto+0x4c>
   21652:	4b3c      	ldr	r3, [pc, #240]	; (21744 <mfu_interface_sendto+0x1a4>)
   21654:	2008      	movs	r0, #8
   21656:	601c      	str	r4, [r3, #0]
   21658:	f04f 35ff 	mov.w	r5, #4294967295
   2165c:	f7f5 fa90 	bl	16b80 <bsd_os_errno_set>
   21660:	e7c4      	b.n	215ec <mfu_interface_sendto+0x4c>
   21662:	f04f 35ff 	mov.w	r5, #4294967295
   21666:	203c      	movs	r0, #60	; 0x3c
   21668:	f7f5 fa8a 	bl	16b80 <bsd_os_errno_set>
   2166c:	4628      	mov	r0, r5
   2166e:	b002      	add	sp, #8
   21670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21674:	46e8      	mov	r8, sp
   21676:	4619      	mov	r1, r3
   21678:	4640      	mov	r0, r8
   2167a:	f7fd f823 	bl	1e6c4 <rpc_dfu_client_request_alloc>
   2167e:	4602      	mov	r2, r0
   21680:	2800      	cmp	r0, #0
   21682:	d1ae      	bne.n	215e2 <mfu_interface_sendto+0x42>
   21684:	f04f 0c08 	mov.w	ip, #8
   21688:	492c      	ldr	r1, [pc, #176]	; (2173c <mfu_interface_sendto+0x19c>)
   2168a:	482f      	ldr	r0, [pc, #188]	; (21748 <mfu_interface_sendto+0x1a8>)
   2168c:	880b      	ldrh	r3, [r1, #0]
   2168e:	6804      	ldr	r4, [r0, #0]
   21690:	3301      	adds	r3, #1
   21692:	9800      	ldr	r0, [sp, #0]
   21694:	b29b      	uxth	r3, r3
   21696:	800b      	strh	r3, [r1, #0]
   21698:	041b      	lsls	r3, r3, #16
   2169a:	f043 0303 	orr.w	r3, r3, #3
   2169e:	6104      	str	r4, [r0, #16]
   216a0:	4c27      	ldr	r4, [pc, #156]	; (21740 <mfu_interface_sendto+0x1a0>)
   216a2:	60c3      	str	r3, [r0, #12]
   216a4:	7102      	strb	r2, [r0, #4]
   216a6:	7142      	strb	r2, [r0, #5]
   216a8:	7182      	strb	r2, [r0, #6]
   216aa:	71c2      	strb	r2, [r0, #7]
   216ac:	7242      	strb	r2, [r0, #9]
   216ae:	7282      	strb	r2, [r0, #10]
   216b0:	72c2      	strb	r2, [r0, #11]
   216b2:	f880 c008 	strb.w	ip, [r0, #8]
   216b6:	2103      	movs	r1, #3
   216b8:	6022      	str	r2, [r4, #0]
   216ba:	f7fd f817 	bl	1e6ec <rpc_dfu_client_request_send>
   216be:	b9c0      	cbnz	r0, 216f2 <mfu_interface_sendto+0x152>
   216c0:	f04f 33ff 	mov.w	r3, #4294967295
   216c4:	f10d 0908 	add.w	r9, sp, #8
   216c8:	f849 3d04 	str.w	r3, [r9, #-4]!
   216cc:	46b2      	mov	sl, r6
   216ce:	e005      	b.n	216dc <mfu_interface_sendto+0x13c>
   216d0:	4649      	mov	r1, r9
   216d2:	4650      	mov	r0, sl
   216d4:	f7f5 f99c 	bl	16a10 <bsd_os_timedwait>
   216d8:	2800      	cmp	r0, #0
   216da:	d1c2      	bne.n	21662 <mfu_interface_sendto+0xc2>
   216dc:	6820      	ldr	r0, [r4, #0]
   216de:	2800      	cmp	r0, #0
   216e0:	d0f6      	beq.n	216d0 <mfu_interface_sendto+0x130>
   216e2:	6904      	ldr	r4, [r0, #16]
   216e4:	f7fd f816 	bl	1e714 <rpc_dfu_client_message_free>
   216e8:	2c00      	cmp	r4, #0
   216ea:	d1b2      	bne.n	21652 <mfu_interface_sendto+0xb2>
   216ec:	2303      	movs	r3, #3
   216ee:	6033      	str	r3, [r6, #0]
   216f0:	e771      	b.n	215d6 <mfu_interface_sendto+0x36>
   216f2:	9800      	ldr	r0, [sp, #0]
   216f4:	6803      	ldr	r3, [r0, #0]
   216f6:	b11b      	cbz	r3, 21700 <mfu_interface_sendto+0x160>
   216f8:	4618      	mov	r0, r3
   216fa:	f7fd f813 	bl	1e724 <rpc_dfu_client_data_free>
   216fe:	9800      	ldr	r0, [sp, #0]
   21700:	f7fd f808 	bl	1e714 <rpc_dfu_client_message_free>
   21704:	e76d      	b.n	215e2 <mfu_interface_sendto+0x42>
   21706:	2016      	movs	r0, #22
   21708:	f7f5 fa3a 	bl	16b80 <bsd_os_errno_set>
   2170c:	f04f 35ff 	mov.w	r5, #4294967295
   21710:	e76c      	b.n	215ec <mfu_interface_sendto+0x4c>
   21712:	2038      	movs	r0, #56	; 0x38
   21714:	f7f5 fa34 	bl	16b80 <bsd_os_errno_set>
   21718:	f04f 35ff 	mov.w	r5, #4294967295
   2171c:	e766      	b.n	215ec <mfu_interface_sendto+0x4c>
   2171e:	2001      	movs	r0, #1
   21720:	f7f5 fa2e 	bl	16b80 <bsd_os_errno_set>
   21724:	f04f 35ff 	mov.w	r5, #4294967295
   21728:	e760      	b.n	215ec <mfu_interface_sendto+0x4c>
   2172a:	202d      	movs	r0, #45	; 0x2d
   2172c:	f7f5 fa28 	bl	16b80 <bsd_os_errno_set>
   21730:	f04f 35ff 	mov.w	r5, #4294967295
   21734:	e75a      	b.n	215ec <mfu_interface_sendto+0x4c>
   21736:	bf00      	nop
   21738:	20021d9c 	.word	0x20021d9c
   2173c:	200242cc 	.word	0x200242cc
   21740:	20021da8 	.word	0x20021da8
   21744:	20021da0 	.word	0x20021da0
   21748:	20021da4 	.word	0x20021da4

0002174c <mfu_interface_setopt>:
   2174c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2174e:	4846      	ldr	r0, [pc, #280]	; (21868 <mfu_interface_setopt+0x11c>)
   21750:	b083      	sub	sp, #12
   21752:	6800      	ldr	r0, [r0, #0]
   21754:	3802      	subs	r0, #2
   21756:	2801      	cmp	r0, #1
   21758:	d877      	bhi.n	2184a <mfu_interface_setopt+0xfe>
   2175a:	f240 2003 	movw	r0, #515	; 0x203
   2175e:	4281      	cmp	r1, r0
   21760:	d16d      	bne.n	2183e <mfu_interface_setopt+0xf2>
   21762:	3a04      	subs	r2, #4
   21764:	2a03      	cmp	r2, #3
   21766:	d85c      	bhi.n	21822 <mfu_interface_setopt+0xd6>
   21768:	e8df f002 	tbb	[pc, r2]
   2176c:	514e024b 	.word	0x514e024b
   21770:	2407      	movs	r4, #7
   21772:	4625      	mov	r5, r4
   21774:	2100      	movs	r1, #0
   21776:	4668      	mov	r0, sp
   21778:	f7fc ffa4 	bl	1e6c4 <rpc_dfu_client_request_alloc>
   2177c:	4603      	mov	r3, r0
   2177e:	2800      	cmp	r0, #0
   21780:	d138      	bne.n	217f4 <mfu_interface_setopt+0xa8>
   21782:	2704      	movs	r7, #4
   21784:	4e39      	ldr	r6, [pc, #228]	; (2186c <mfu_interface_setopt+0x120>)
   21786:	9800      	ldr	r0, [sp, #0]
   21788:	8832      	ldrh	r2, [r6, #0]
   2178a:	4629      	mov	r1, r5
   2178c:	3201      	adds	r2, #1
   2178e:	b292      	uxth	r2, r2
   21790:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   21794:	4c36      	ldr	r4, [pc, #216]	; (21870 <mfu_interface_setopt+0x124>)
   21796:	60c5      	str	r5, [r0, #12]
   21798:	7103      	strb	r3, [r0, #4]
   2179a:	7143      	strb	r3, [r0, #5]
   2179c:	7183      	strb	r3, [r0, #6]
   2179e:	71c3      	strb	r3, [r0, #7]
   217a0:	7243      	strb	r3, [r0, #9]
   217a2:	7283      	strb	r3, [r0, #10]
   217a4:	72c3      	strb	r3, [r0, #11]
   217a6:	7207      	strb	r7, [r0, #8]
   217a8:	8032      	strh	r2, [r6, #0]
   217aa:	6023      	str	r3, [r4, #0]
   217ac:	f7fc ff9e 	bl	1e6ec <rpc_dfu_client_request_send>
   217b0:	b9b8      	cbnz	r0, 217e2 <mfu_interface_setopt+0x96>
   217b2:	f04f 33ff 	mov.w	r3, #4294967295
   217b6:	ad02      	add	r5, sp, #8
   217b8:	4e2b      	ldr	r6, [pc, #172]	; (21868 <mfu_interface_setopt+0x11c>)
   217ba:	f845 3d04 	str.w	r3, [r5, #-4]!
   217be:	e005      	b.n	217cc <mfu_interface_setopt+0x80>
   217c0:	4629      	mov	r1, r5
   217c2:	4630      	mov	r0, r6
   217c4:	f7f5 f924 	bl	16a10 <bsd_os_timedwait>
   217c8:	2800      	cmp	r0, #0
   217ca:	d131      	bne.n	21830 <mfu_interface_setopt+0xe4>
   217cc:	6820      	ldr	r0, [r4, #0]
   217ce:	2800      	cmp	r0, #0
   217d0:	d0f6      	beq.n	217c0 <mfu_interface_setopt+0x74>
   217d2:	6904      	ldr	r4, [r0, #16]
   217d4:	f7fc ff9e 	bl	1e714 <rpc_dfu_client_message_free>
   217d8:	2c00      	cmp	r4, #0
   217da:	d13c      	bne.n	21856 <mfu_interface_setopt+0x10a>
   217dc:	4620      	mov	r0, r4
   217de:	b003      	add	sp, #12
   217e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217e2:	9800      	ldr	r0, [sp, #0]
   217e4:	6803      	ldr	r3, [r0, #0]
   217e6:	b11b      	cbz	r3, 217f0 <mfu_interface_setopt+0xa4>
   217e8:	4618      	mov	r0, r3
   217ea:	f7fc ff9b 	bl	1e724 <rpc_dfu_client_data_free>
   217ee:	9800      	ldr	r0, [sp, #0]
   217f0:	f7fc ff90 	bl	1e714 <rpc_dfu_client_message_free>
   217f4:	200c      	movs	r0, #12
   217f6:	f7f5 f9c3 	bl	16b80 <bsd_os_errno_set>
   217fa:	f04f 30ff 	mov.w	r0, #4294967295
   217fe:	b003      	add	sp, #12
   21800:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21802:	2405      	movs	r4, #5
   21804:	4625      	mov	r5, r4
   21806:	e7b5      	b.n	21774 <mfu_interface_setopt+0x28>
   21808:	2408      	movs	r4, #8
   2180a:	4625      	mov	r5, r4
   2180c:	e7b2      	b.n	21774 <mfu_interface_setopt+0x28>
   2180e:	b1b3      	cbz	r3, 2183e <mfu_interface_setopt+0xf2>
   21810:	9a08      	ldr	r2, [sp, #32]
   21812:	2a04      	cmp	r2, #4
   21814:	d113      	bne.n	2183e <mfu_interface_setopt+0xf2>
   21816:	2000      	movs	r0, #0
   21818:	681a      	ldr	r2, [r3, #0]
   2181a:	4b16      	ldr	r3, [pc, #88]	; (21874 <mfu_interface_setopt+0x128>)
   2181c:	601a      	str	r2, [r3, #0]
   2181e:	b003      	add	sp, #12
   21820:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21822:	202a      	movs	r0, #42	; 0x2a
   21824:	f7f5 f9ac 	bl	16b80 <bsd_os_errno_set>
   21828:	f04f 30ff 	mov.w	r0, #4294967295
   2182c:	b003      	add	sp, #12
   2182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21830:	203c      	movs	r0, #60	; 0x3c
   21832:	f7f5 f9a5 	bl	16b80 <bsd_os_errno_set>
   21836:	f04f 30ff 	mov.w	r0, #4294967295
   2183a:	b003      	add	sp, #12
   2183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2183e:	2016      	movs	r0, #22
   21840:	f7f5 f99e 	bl	16b80 <bsd_os_errno_set>
   21844:	f04f 30ff 	mov.w	r0, #4294967295
   21848:	e7c9      	b.n	217de <mfu_interface_setopt+0x92>
   2184a:	2001      	movs	r0, #1
   2184c:	f7f5 f998 	bl	16b80 <bsd_os_errno_set>
   21850:	f04f 30ff 	mov.w	r0, #4294967295
   21854:	e7c3      	b.n	217de <mfu_interface_setopt+0x92>
   21856:	4b08      	ldr	r3, [pc, #32]	; (21878 <mfu_interface_setopt+0x12c>)
   21858:	2008      	movs	r0, #8
   2185a:	601c      	str	r4, [r3, #0]
   2185c:	f7f5 f990 	bl	16b80 <bsd_os_errno_set>
   21860:	f04f 30ff 	mov.w	r0, #4294967295
   21864:	e7bb      	b.n	217de <mfu_interface_setopt+0x92>
   21866:	bf00      	nop
   21868:	20021d9c 	.word	0x20021d9c
   2186c:	200242cc 	.word	0x200242cc
   21870:	20021da8 	.word	0x20021da8
   21874:	20021da4 	.word	0x20021da4
   21878:	20021da0 	.word	0x20021da0

0002187c <mfu_interface_getopt>:
   2187c:	f240 2003 	movw	r0, #515	; 0x203
   21880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21884:	4281      	cmp	r1, r0
   21886:	b082      	sub	sp, #8
   21888:	9e08      	ldr	r6, [sp, #32]
   2188a:	f040 80ae 	bne.w	219ea <mfu_interface_getopt+0x16e>
   2188e:	461d      	mov	r5, r3
   21890:	2b00      	cmp	r3, #0
   21892:	f000 80aa 	beq.w	219ea <mfu_interface_getopt+0x16e>
   21896:	2e00      	cmp	r6, #0
   21898:	f000 80a7 	beq.w	219ea <mfu_interface_getopt+0x16e>
   2189c:	4b5e      	ldr	r3, [pc, #376]	; (21a18 <mfu_interface_getopt+0x19c>)
   2189e:	681b      	ldr	r3, [r3, #0]
   218a0:	3b02      	subs	r3, #2
   218a2:	2b01      	cmp	r3, #1
   218a4:	f200 80a7 	bhi.w	219f6 <mfu_interface_getopt+0x17a>
   218a8:	3a01      	subs	r2, #1
   218aa:	2a13      	cmp	r2, #19
   218ac:	d879      	bhi.n	219a2 <mfu_interface_getopt+0x126>
   218ae:	e8df f002 	tbb	[pc, r2]
   218b2:	5f17      	.short	0x5f17
   218b4:	78787878 	.word	0x78787878
   218b8:	78787872 	.word	0x78787872
   218bc:	78787878 	.word	0x78787878
   218c0:	78787878 	.word	0x78787878
   218c4:	0a78      	.short	0x0a78
   218c6:	6833      	ldr	r3, [r6, #0]
   218c8:	2b04      	cmp	r3, #4
   218ca:	f040 808e 	bne.w	219ea <mfu_interface_getopt+0x16e>
   218ce:	2200      	movs	r2, #0
   218d0:	4610      	mov	r0, r2
   218d2:	4b52      	ldr	r3, [pc, #328]	; (21a1c <mfu_interface_getopt+0x1a0>)
   218d4:	6819      	ldr	r1, [r3, #0]
   218d6:	601a      	str	r2, [r3, #0]
   218d8:	6029      	str	r1, [r5, #0]
   218da:	b002      	add	sp, #8
   218dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   218e0:	6833      	ldr	r3, [r6, #0]
   218e2:	2b24      	cmp	r3, #36	; 0x24
   218e4:	f040 8081 	bne.w	219ea <mfu_interface_getopt+0x16e>
   218e8:	2401      	movs	r4, #1
   218ea:	46a0      	mov	r8, r4
   218ec:	2100      	movs	r1, #0
   218ee:	4668      	mov	r0, sp
   218f0:	f7fc fee8 	bl	1e6c4 <rpc_dfu_client_request_alloc>
   218f4:	2800      	cmp	r0, #0
   218f6:	d146      	bne.n	21986 <mfu_interface_getopt+0x10a>
   218f8:	4949      	ldr	r1, [pc, #292]	; (21a20 <mfu_interface_getopt+0x1a4>)
   218fa:	9b00      	ldr	r3, [sp, #0]
   218fc:	880a      	ldrh	r2, [r1, #0]
   218fe:	f1b8 0f03 	cmp.w	r8, #3
   21902:	f102 0201 	add.w	r2, r2, #1
   21906:	b292      	uxth	r2, r2
   21908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   2190c:	7118      	strb	r0, [r3, #4]
   2190e:	800a      	strh	r2, [r1, #0]
   21910:	60dc      	str	r4, [r3, #12]
   21912:	7158      	strb	r0, [r3, #5]
   21914:	7198      	strb	r0, [r3, #6]
   21916:	71d8      	strb	r0, [r3, #7]
   21918:	d04b      	beq.n	219b2 <mfu_interface_getopt+0x136>
   2191a:	2104      	movs	r1, #4
   2191c:	2200      	movs	r2, #0
   2191e:	4f41      	ldr	r7, [pc, #260]	; (21a24 <mfu_interface_getopt+0x1a8>)
   21920:	6099      	str	r1, [r3, #8]
   21922:	4618      	mov	r0, r3
   21924:	4641      	mov	r1, r8
   21926:	603a      	str	r2, [r7, #0]
   21928:	f7fc fee0 	bl	1e6ec <rpc_dfu_client_request_send>
   2192c:	2800      	cmp	r0, #0
   2192e:	d14d      	bne.n	219cc <mfu_interface_getopt+0x150>
   21930:	f04f 33ff 	mov.w	r3, #4294967295
   21934:	ac02      	add	r4, sp, #8
   21936:	f844 3d04 	str.w	r3, [r4, #-4]!
   2193a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 21a18 <mfu_interface_getopt+0x19c>
   2193e:	e005      	b.n	2194c <mfu_interface_getopt+0xd0>
   21940:	4621      	mov	r1, r4
   21942:	4640      	mov	r0, r8
   21944:	f7f5 f864 	bl	16a10 <bsd_os_timedwait>
   21948:	2800      	cmp	r0, #0
   2194a:	d137      	bne.n	219bc <mfu_interface_getopt+0x140>
   2194c:	6839      	ldr	r1, [r7, #0]
   2194e:	2900      	cmp	r1, #0
   21950:	d0f6      	beq.n	21940 <mfu_interface_getopt+0xc4>
   21952:	690c      	ldr	r4, [r1, #16]
   21954:	2c00      	cmp	r4, #0
   21956:	d154      	bne.n	21a02 <mfu_interface_getopt+0x186>
   21958:	6832      	ldr	r2, [r6, #0]
   2195a:	3114      	adds	r1, #20
   2195c:	4628      	mov	r0, r5
   2195e:	f7eb f8f5 	bl	cb4c <memcpy>
   21962:	6838      	ldr	r0, [r7, #0]
   21964:	f7fc fed6 	bl	1e714 <rpc_dfu_client_message_free>
   21968:	4620      	mov	r0, r4
   2196a:	b002      	add	sp, #8
   2196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21970:	6833      	ldr	r3, [r6, #0]
   21972:	2b04      	cmp	r3, #4
   21974:	d139      	bne.n	219ea <mfu_interface_getopt+0x16e>
   21976:	2402      	movs	r4, #2
   21978:	2100      	movs	r1, #0
   2197a:	4668      	mov	r0, sp
   2197c:	46a0      	mov	r8, r4
   2197e:	f7fc fea1 	bl	1e6c4 <rpc_dfu_client_request_alloc>
   21982:	2800      	cmp	r0, #0
   21984:	d0b8      	beq.n	218f8 <mfu_interface_getopt+0x7c>
   21986:	200c      	movs	r0, #12
   21988:	f7f5 f8fa 	bl	16b80 <bsd_os_errno_set>
   2198c:	f04f 30ff 	mov.w	r0, #4294967295
   21990:	b002      	add	sp, #8
   21992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21996:	6833      	ldr	r3, [r6, #0]
   21998:	2b04      	cmp	r3, #4
   2199a:	d126      	bne.n	219ea <mfu_interface_getopt+0x16e>
   2199c:	2409      	movs	r4, #9
   2199e:	46a0      	mov	r8, r4
   219a0:	e7a4      	b.n	218ec <mfu_interface_getopt+0x70>
   219a2:	202a      	movs	r0, #42	; 0x2a
   219a4:	f7f5 f8ec 	bl	16b80 <bsd_os_errno_set>
   219a8:	f04f 30ff 	mov.w	r0, #4294967295
   219ac:	b002      	add	sp, #8
   219ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   219b2:	4a1d      	ldr	r2, [pc, #116]	; (21a28 <mfu_interface_getopt+0x1ac>)
   219b4:	2108      	movs	r1, #8
   219b6:	6812      	ldr	r2, [r2, #0]
   219b8:	611a      	str	r2, [r3, #16]
   219ba:	e7af      	b.n	2191c <mfu_interface_getopt+0xa0>
   219bc:	203c      	movs	r0, #60	; 0x3c
   219be:	f7f5 f8df 	bl	16b80 <bsd_os_errno_set>
   219c2:	f04f 30ff 	mov.w	r0, #4294967295
   219c6:	b002      	add	sp, #8
   219c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   219cc:	9800      	ldr	r0, [sp, #0]
   219ce:	6803      	ldr	r3, [r0, #0]
   219d0:	b11b      	cbz	r3, 219da <mfu_interface_getopt+0x15e>
   219d2:	4618      	mov	r0, r3
   219d4:	f7fc fea6 	bl	1e724 <rpc_dfu_client_data_free>
   219d8:	9800      	ldr	r0, [sp, #0]
   219da:	f7fc fe9b 	bl	1e714 <rpc_dfu_client_message_free>
   219de:	200c      	movs	r0, #12
   219e0:	f7f5 f8ce 	bl	16b80 <bsd_os_errno_set>
   219e4:	f04f 30ff 	mov.w	r0, #4294967295
   219e8:	e7d2      	b.n	21990 <mfu_interface_getopt+0x114>
   219ea:	2016      	movs	r0, #22
   219ec:	f7f5 f8c8 	bl	16b80 <bsd_os_errno_set>
   219f0:	f04f 30ff 	mov.w	r0, #4294967295
   219f4:	e771      	b.n	218da <mfu_interface_getopt+0x5e>
   219f6:	2001      	movs	r0, #1
   219f8:	f7f5 f8c2 	bl	16b80 <bsd_os_errno_set>
   219fc:	f04f 30ff 	mov.w	r0, #4294967295
   21a00:	e76b      	b.n	218da <mfu_interface_getopt+0x5e>
   21a02:	4b06      	ldr	r3, [pc, #24]	; (21a1c <mfu_interface_getopt+0x1a0>)
   21a04:	2008      	movs	r0, #8
   21a06:	601c      	str	r4, [r3, #0]
   21a08:	f7f5 f8ba 	bl	16b80 <bsd_os_errno_set>
   21a0c:	6838      	ldr	r0, [r7, #0]
   21a0e:	f7fc fe81 	bl	1e714 <rpc_dfu_client_message_free>
   21a12:	f04f 30ff 	mov.w	r0, #4294967295
   21a16:	e760      	b.n	218da <mfu_interface_getopt+0x5e>
   21a18:	20021d9c 	.word	0x20021d9c
   21a1c:	20021da0 	.word	0x20021da0
   21a20:	200242cc 	.word	0x200242cc
   21a24:	20021da8 	.word	0x20021da8
   21a28:	20021da4 	.word	0x20021da4

00021a2c <interface_init>:
   21a2c:	b508      	push	{r3, lr}
   21a2e:	f44f 72b4 	mov.w	r2, #360	; 0x168
   21a32:	2100      	movs	r1, #0
   21a34:	4802      	ldr	r0, [pc, #8]	; (21a40 <interface_init+0x14>)
   21a36:	f004 fcff 	bl	26438 <memset>
   21a3a:	2000      	movs	r0, #0
   21a3c:	bd08      	pop	{r3, pc}
   21a3e:	bf00      	nop
   21a40:	200262a4 	.word	0x200262a4

00021a44 <interface_socket_allocate>:
   21a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21a46:	4b30      	ldr	r3, [pc, #192]	; (21b08 <interface_socket_allocate+0xc4>)
   21a48:	4606      	mov	r6, r0
   21a4a:	681d      	ldr	r5, [r3, #0]
   21a4c:	4608      	mov	r0, r1
   21a4e:	b31d      	cbz	r5, 21a98 <interface_socket_allocate+0x54>
   21a50:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   21a52:	2c00      	cmp	r4, #0
   21a54:	d04a      	beq.n	21aec <interface_socket_allocate+0xa8>
   21a56:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   21a58:	2c00      	cmp	r4, #0
   21a5a:	d049      	beq.n	21af0 <interface_socket_allocate+0xac>
   21a5c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   21a5e:	2c00      	cmp	r4, #0
   21a60:	d048      	beq.n	21af4 <interface_socket_allocate+0xb0>
   21a62:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   21a66:	2900      	cmp	r1, #0
   21a68:	d046      	beq.n	21af8 <interface_socket_allocate+0xb4>
   21a6a:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   21a6e:	b191      	cbz	r1, 21a96 <interface_socket_allocate+0x52>
   21a70:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   21a74:	2900      	cmp	r1, #0
   21a76:	d043      	beq.n	21b00 <interface_socket_allocate+0xbc>
   21a78:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   21a7c:	2900      	cmp	r1, #0
   21a7e:	d041      	beq.n	21b04 <interface_socket_allocate+0xc0>
   21a80:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   21a84:	2900      	cmp	r1, #0
   21a86:	d039      	beq.n	21afc <interface_socket_allocate+0xb8>
   21a88:	f04f 35ff 	mov.w	r5, #4294967295
   21a8c:	2069      	movs	r0, #105	; 0x69
   21a8e:	f7f5 f877 	bl	16b80 <bsd_os_errno_set>
   21a92:	4628      	mov	r0, r5
   21a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21a96:	2505      	movs	r5, #5
   21a98:	f04f 0c01 	mov.w	ip, #1
   21a9c:	f04f 37ff 	mov.w	r7, #4294967295
   21aa0:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   21aa4:	00e4      	lsls	r4, r4, #3
   21aa6:	f843 c004 	str.w	ip, [r3, r4]
   21aaa:	441c      	add	r4, r3
   21aac:	4611      	mov	r1, r2
   21aae:	61a7      	str	r7, [r4, #24]
   21ab0:	4622      	mov	r2, r4
   21ab2:	f7fe feeb 	bl	2088c <packet_handler_create>
   21ab6:	4603      	mov	r3, r0
   21ab8:	61e0      	str	r0, [r4, #28]
   21aba:	b158      	cbz	r0, 21ad4 <interface_socket_allocate+0x90>
   21abc:	681b      	ldr	r3, [r3, #0]
   21abe:	681b      	ldr	r3, [r3, #0]
   21ac0:	4798      	blx	r3
   21ac2:	b910      	cbnz	r0, 21aca <interface_socket_allocate+0x86>
   21ac4:	6034      	str	r4, [r6, #0]
   21ac6:	4628      	mov	r0, r5
   21ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21aca:	69e0      	ldr	r0, [r4, #28]
   21acc:	f7fe fefe 	bl	208cc <packet_handler_delete>
   21ad0:	2300      	movs	r3, #0
   21ad2:	61e3      	str	r3, [r4, #28]
   21ad4:	f04f 35ff 	mov.w	r5, #4294967295
   21ad8:	2228      	movs	r2, #40	; 0x28
   21ada:	2100      	movs	r1, #0
   21adc:	4620      	mov	r0, r4
   21ade:	f004 fcab 	bl	26438 <memset>
   21ae2:	200c      	movs	r0, #12
   21ae4:	f7f5 f84c 	bl	16b80 <bsd_os_errno_set>
   21ae8:	4628      	mov	r0, r5
   21aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21aec:	2501      	movs	r5, #1
   21aee:	e7d3      	b.n	21a98 <interface_socket_allocate+0x54>
   21af0:	2502      	movs	r5, #2
   21af2:	e7d1      	b.n	21a98 <interface_socket_allocate+0x54>
   21af4:	2503      	movs	r5, #3
   21af6:	e7cf      	b.n	21a98 <interface_socket_allocate+0x54>
   21af8:	2504      	movs	r5, #4
   21afa:	e7cd      	b.n	21a98 <interface_socket_allocate+0x54>
   21afc:	2508      	movs	r5, #8
   21afe:	e7cb      	b.n	21a98 <interface_socket_allocate+0x54>
   21b00:	2506      	movs	r5, #6
   21b02:	e7c9      	b.n	21a98 <interface_socket_allocate+0x54>
   21b04:	2507      	movs	r5, #7
   21b06:	e7c7      	b.n	21a98 <interface_socket_allocate+0x54>
   21b08:	200262a4 	.word	0x200262a4

00021b0c <interface_socket_free>:
   21b0c:	2808      	cmp	r0, #8
   21b0e:	d900      	bls.n	21b12 <interface_socket_free+0x6>
   21b10:	4770      	bx	lr
   21b12:	b510      	push	{r4, lr}
   21b14:	4c07      	ldr	r4, [pc, #28]	; (21b34 <interface_socket_free+0x28>)
   21b16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21b1a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   21b1e:	69e0      	ldr	r0, [r4, #28]
   21b20:	b108      	cbz	r0, 21b26 <interface_socket_free+0x1a>
   21b22:	f7fe fed3 	bl	208cc <packet_handler_delete>
   21b26:	4620      	mov	r0, r4
   21b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21b2c:	2228      	movs	r2, #40	; 0x28
   21b2e:	2100      	movs	r1, #0
   21b30:	f004 bc82 	b.w	26438 <memset>
   21b34:	200262a4 	.word	0x200262a4

00021b38 <interface_socket_packet_handler_update>:
   21b38:	2808      	cmp	r0, #8
   21b3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21b3e:	d81e      	bhi.n	21b7e <interface_socket_packet_handler_update+0x46>
   21b40:	ea4f 0880 	mov.w	r8, r0, lsl #2
   21b44:	4e17      	ldr	r6, [pc, #92]	; (21ba4 <interface_socket_packet_handler_update+0x6c>)
   21b46:	eb08 0300 	add.w	r3, r8, r0
   21b4a:	00db      	lsls	r3, r3, #3
   21b4c:	58f4      	ldr	r4, [r6, r3]
   21b4e:	18f5      	adds	r5, r6, r3
   21b50:	b1ac      	cbz	r4, 21b7e <interface_socket_packet_handler_update+0x46>
   21b52:	460b      	mov	r3, r1
   21b54:	4604      	mov	r4, r0
   21b56:	4611      	mov	r1, r2
   21b58:	4618      	mov	r0, r3
   21b5a:	462a      	mov	r2, r5
   21b5c:	f8d5 901c 	ldr.w	r9, [r5, #28]
   21b60:	f7fe fe94 	bl	2088c <packet_handler_create>
   21b64:	61e8      	str	r0, [r5, #28]
   21b66:	b1d0      	cbz	r0, 21b9e <interface_socket_packet_handler_update+0x66>
   21b68:	6803      	ldr	r3, [r0, #0]
   21b6a:	681b      	ldr	r3, [r3, #0]
   21b6c:	4798      	blx	r3
   21b6e:	4607      	mov	r7, r0
   21b70:	b948      	cbnz	r0, 21b86 <interface_socket_packet_handler_update+0x4e>
   21b72:	4648      	mov	r0, r9
   21b74:	f7fe feaa 	bl	208cc <packet_handler_delete>
   21b78:	4638      	mov	r0, r7
   21b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b7e:	2705      	movs	r7, #5
   21b80:	4638      	mov	r0, r7
   21b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b86:	69e8      	ldr	r0, [r5, #28]
   21b88:	f7fe fea0 	bl	208cc <packet_handler_delete>
   21b8c:	eb08 0004 	add.w	r0, r8, r4
   21b90:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   21b94:	f8c6 901c 	str.w	r9, [r6, #28]
   21b98:	4638      	mov	r0, r7
   21b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b9e:	2704      	movs	r7, #4
   21ba0:	e7f4      	b.n	21b8c <interface_socket_packet_handler_update+0x54>
   21ba2:	bf00      	nop
   21ba4:	200262a4 	.word	0x200262a4

00021ba8 <interface_socket_wait>:
   21ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21bac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21bb0:	4c0d      	ldr	r4, [pc, #52]	; (21be8 <interface_socket_wait+0x40>)
   21bb2:	00c0      	lsls	r0, r0, #3
   21bb4:	5825      	ldr	r5, [r4, r0]
   21bb6:	4404      	add	r4, r0
   21bb8:	4015      	ands	r5, r2
   21bba:	428d      	cmp	r5, r1
   21bbc:	d011      	beq.n	21be2 <interface_socket_wait+0x3a>
   21bbe:	6860      	ldr	r0, [r4, #4]
   21bc0:	b978      	cbnz	r0, 21be2 <interface_socket_wait+0x3a>
   21bc2:	4698      	mov	r8, r3
   21bc4:	460f      	mov	r7, r1
   21bc6:	4616      	mov	r6, r2
   21bc8:	4625      	mov	r5, r4
   21bca:	e006      	b.n	21bda <interface_socket_wait+0x32>
   21bcc:	686b      	ldr	r3, [r5, #4]
   21bce:	b943      	cbnz	r3, 21be2 <interface_socket_wait+0x3a>
   21bd0:	4641      	mov	r1, r8
   21bd2:	4620      	mov	r0, r4
   21bd4:	f7f4 ff1c 	bl	16a10 <bsd_os_timedwait>
   21bd8:	b920      	cbnz	r0, 21be4 <interface_socket_wait+0x3c>
   21bda:	6828      	ldr	r0, [r5, #0]
   21bdc:	4030      	ands	r0, r6
   21bde:	42b8      	cmp	r0, r7
   21be0:	d1f4      	bne.n	21bcc <interface_socket_wait+0x24>
   21be2:	2000      	movs	r0, #0
   21be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21be8:	200262a4 	.word	0x200262a4

00021bec <interface_from_internal_id_search>:
   21bec:	4b27      	ldr	r3, [pc, #156]	; (21c8c <interface_from_internal_id_search+0xa0>)
   21bee:	681a      	ldr	r2, [r3, #0]
   21bf0:	b112      	cbz	r2, 21bf8 <interface_from_internal_id_search+0xc>
   21bf2:	699a      	ldr	r2, [r3, #24]
   21bf4:	4282      	cmp	r2, r0
   21bf6:	d039      	beq.n	21c6c <interface_from_internal_id_search+0x80>
   21bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   21bfa:	b112      	cbz	r2, 21c02 <interface_from_internal_id_search+0x16>
   21bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21bfe:	4282      	cmp	r2, r0
   21c00:	d036      	beq.n	21c70 <interface_from_internal_id_search+0x84>
   21c02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   21c04:	b112      	cbz	r2, 21c0c <interface_from_internal_id_search+0x20>
   21c06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   21c08:	4282      	cmp	r2, r0
   21c0a:	d033      	beq.n	21c74 <interface_from_internal_id_search+0x88>
   21c0c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   21c0e:	b11a      	cbz	r2, 21c18 <interface_from_internal_id_search+0x2c>
   21c10:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   21c14:	4282      	cmp	r2, r0
   21c16:	d02f      	beq.n	21c78 <interface_from_internal_id_search+0x8c>
   21c18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   21c1c:	b11a      	cbz	r2, 21c26 <interface_from_internal_id_search+0x3a>
   21c1e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   21c22:	4282      	cmp	r2, r0
   21c24:	d02a      	beq.n	21c7c <interface_from_internal_id_search+0x90>
   21c26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   21c2a:	b11a      	cbz	r2, 21c34 <interface_from_internal_id_search+0x48>
   21c2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   21c30:	4282      	cmp	r2, r0
   21c32:	d025      	beq.n	21c80 <interface_from_internal_id_search+0x94>
   21c34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   21c38:	b11a      	cbz	r2, 21c42 <interface_from_internal_id_search+0x56>
   21c3a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   21c3e:	4282      	cmp	r2, r0
   21c40:	d020      	beq.n	21c84 <interface_from_internal_id_search+0x98>
   21c42:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   21c46:	b11a      	cbz	r2, 21c50 <interface_from_internal_id_search+0x64>
   21c48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21c4c:	4282      	cmp	r2, r0
   21c4e:	d01b      	beq.n	21c88 <interface_from_internal_id_search+0x9c>
   21c50:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   21c54:	b13a      	cbz	r2, 21c66 <interface_from_internal_id_search+0x7a>
   21c56:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   21c5a:	4283      	cmp	r3, r0
   21c5c:	bf14      	ite	ne
   21c5e:	f04f 30ff 	movne.w	r0, #4294967295
   21c62:	2008      	moveq	r0, #8
   21c64:	4770      	bx	lr
   21c66:	f04f 30ff 	mov.w	r0, #4294967295
   21c6a:	4770      	bx	lr
   21c6c:	2000      	movs	r0, #0
   21c6e:	4770      	bx	lr
   21c70:	2001      	movs	r0, #1
   21c72:	4770      	bx	lr
   21c74:	2002      	movs	r0, #2
   21c76:	4770      	bx	lr
   21c78:	2003      	movs	r0, #3
   21c7a:	4770      	bx	lr
   21c7c:	2004      	movs	r0, #4
   21c7e:	4770      	bx	lr
   21c80:	2005      	movs	r0, #5
   21c82:	4770      	bx	lr
   21c84:	2006      	movs	r0, #6
   21c86:	4770      	bx	lr
   21c88:	2007      	movs	r0, #7
   21c8a:	4770      	bx	lr
   21c8c:	200262a4 	.word	0x200262a4

00021c90 <interface_socket_from_handle_get>:
   21c90:	2808      	cmp	r0, #8
   21c92:	d807      	bhi.n	21ca4 <interface_socket_from_handle_get+0x14>
   21c94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21c98:	4b03      	ldr	r3, [pc, #12]	; (21ca8 <interface_socket_from_handle_get+0x18>)
   21c9a:	00c0      	lsls	r0, r0, #3
   21c9c:	581a      	ldr	r2, [r3, r0]
   21c9e:	b10a      	cbz	r2, 21ca4 <interface_socket_from_handle_get+0x14>
   21ca0:	4418      	add	r0, r3
   21ca2:	4770      	bx	lr
   21ca4:	2000      	movs	r0, #0
   21ca6:	4770      	bx	lr
   21ca8:	200262a4 	.word	0x200262a4

00021cac <interface_socket_event_get>:
   21cac:	b119      	cbz	r1, 21cb6 <interface_socket_event_get+0xa>
   21cae:	2808      	cmp	r0, #8
   21cb0:	d902      	bls.n	21cb8 <interface_socket_event_get+0xc>
   21cb2:	2310      	movs	r3, #16
   21cb4:	600b      	str	r3, [r1, #0]
   21cb6:	4770      	bx	lr
   21cb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21cbc:	4b07      	ldr	r3, [pc, #28]	; (21cdc <interface_socket_event_get+0x30>)
   21cbe:	00c0      	lsls	r0, r0, #3
   21cc0:	581a      	ldr	r2, [r3, r0]
   21cc2:	2a00      	cmp	r2, #0
   21cc4:	d0f5      	beq.n	21cb2 <interface_socket_event_get+0x6>
   21cc6:	581b      	ldr	r3, [r3, r0]
   21cc8:	0c1b      	lsrs	r3, r3, #16
   21cca:	f003 020a 	and.w	r2, r3, #10
   21cce:	2a0a      	cmp	r2, #10
   21cd0:	bf14      	ite	ne
   21cd2:	f003 030f 	andne.w	r3, r3, #15
   21cd6:	f003 030d 	andeq.w	r3, r3, #13
   21cda:	e7eb      	b.n	21cb4 <interface_socket_event_get+0x8>
   21cdc:	200262a4 	.word	0x200262a4

00021ce0 <interface_socket_setopt>:
   21ce0:	2808      	cmp	r0, #8
   21ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ce4:	d82c      	bhi.n	21d40 <interface_socket_setopt+0x60>
   21ce6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21cea:	4e1e      	ldr	r6, [pc, #120]	; (21d64 <interface_socket_setopt+0x84>)
   21cec:	00c0      	lsls	r0, r0, #3
   21cee:	5834      	ldr	r4, [r6, r0]
   21cf0:	b334      	cbz	r4, 21d40 <interface_socket_setopt+0x60>
   21cf2:	2901      	cmp	r1, #1
   21cf4:	d11e      	bne.n	21d34 <interface_socket_setopt+0x54>
   21cf6:	f1a2 0114 	sub.w	r1, r2, #20
   21cfa:	2901      	cmp	r1, #1
   21cfc:	d81a      	bhi.n	21d34 <interface_socket_setopt+0x54>
   21cfe:	9906      	ldr	r1, [sp, #24]
   21d00:	2908      	cmp	r1, #8
   21d02:	d123      	bne.n	21d4c <interface_socket_setopt+0x6c>
   21d04:	b313      	cbz	r3, 21d4c <interface_socket_setopt+0x6c>
   21d06:	6859      	ldr	r1, [r3, #4]
   21d08:	4c17      	ldr	r4, [pc, #92]	; (21d68 <interface_socket_setopt+0x88>)
   21d0a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   21d0e:	fba4 4101 	umull	r4, r1, r4, r1
   21d12:	0989      	lsrs	r1, r1, #6
   21d14:	460c      	mov	r4, r1
   21d16:	2500      	movs	r5, #0
   21d18:	681b      	ldr	r3, [r3, #0]
   21d1a:	fbe7 4503 	umlal	r4, r5, r7, r3
   21d1e:	2d01      	cmp	r5, #1
   21d20:	bf08      	it	eq
   21d22:	2c00      	cmpeq	r4, #0
   21d24:	d218      	bcs.n	21d58 <interface_socket_setopt+0x78>
   21d26:	4430      	add	r0, r6
   21d28:	2a14      	cmp	r2, #20
   21d2a:	bf0c      	ite	eq
   21d2c:	6204      	streq	r4, [r0, #32]
   21d2e:	6244      	strne	r4, [r0, #36]	; 0x24
   21d30:	2000      	movs	r0, #0
   21d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d34:	202a      	movs	r0, #42	; 0x2a
   21d36:	f7f4 ff23 	bl	16b80 <bsd_os_errno_set>
   21d3a:	f04f 30ff 	mov.w	r0, #4294967295
   21d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d40:	2009      	movs	r0, #9
   21d42:	f7f4 ff1d 	bl	16b80 <bsd_os_errno_set>
   21d46:	f04f 30ff 	mov.w	r0, #4294967295
   21d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d4c:	2016      	movs	r0, #22
   21d4e:	f7f4 ff17 	bl	16b80 <bsd_os_errno_set>
   21d52:	f04f 30ff 	mov.w	r0, #4294967295
   21d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d58:	2025      	movs	r0, #37	; 0x25
   21d5a:	f7f4 ff11 	bl	16b80 <bsd_os_errno_set>
   21d5e:	f04f 30ff 	mov.w	r0, #4294967295
   21d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d64:	200262a4 	.word	0x200262a4
   21d68:	10624dd3 	.word	0x10624dd3

00021d6c <interface_socket_getopt>:
   21d6c:	b570      	push	{r4, r5, r6, lr}
   21d6e:	2808      	cmp	r0, #8
   21d70:	9d04      	ldr	r5, [sp, #16]
   21d72:	d835      	bhi.n	21de0 <interface_socket_getopt+0x74>
   21d74:	4c20      	ldr	r4, [pc, #128]	; (21df8 <interface_socket_getopt+0x8c>)
   21d76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21d7a:	00c0      	lsls	r0, r0, #3
   21d7c:	5826      	ldr	r6, [r4, r0]
   21d7e:	4404      	add	r4, r0
   21d80:	b376      	cbz	r6, 21de0 <interface_socket_getopt+0x74>
   21d82:	2901      	cmp	r1, #1
   21d84:	d132      	bne.n	21dec <interface_socket_getopt+0x80>
   21d86:	b32b      	cbz	r3, 21dd4 <interface_socket_getopt+0x68>
   21d88:	b325      	cbz	r5, 21dd4 <interface_socket_getopt+0x68>
   21d8a:	2a04      	cmp	r2, #4
   21d8c:	d019      	beq.n	21dc2 <interface_socket_getopt+0x56>
   21d8e:	f1a2 0114 	sub.w	r1, r2, #20
   21d92:	2901      	cmp	r1, #1
   21d94:	d82a      	bhi.n	21dec <interface_socket_getopt+0x80>
   21d96:	6829      	ldr	r1, [r5, #0]
   21d98:	2908      	cmp	r1, #8
   21d9a:	d11b      	bne.n	21dd4 <interface_socket_getopt+0x68>
   21d9c:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   21da0:	2a14      	cmp	r2, #20
   21da2:	bf18      	it	ne
   21da4:	4601      	movne	r1, r0
   21da6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   21daa:	4a14      	ldr	r2, [pc, #80]	; (21dfc <interface_socket_getopt+0x90>)
   21dac:	2000      	movs	r0, #0
   21dae:	fba2 5201 	umull	r5, r2, r2, r1
   21db2:	0992      	lsrs	r2, r2, #6
   21db4:	fb04 1112 	mls	r1, r4, r2, r1
   21db8:	fb04 f101 	mul.w	r1, r4, r1
   21dbc:	e9c3 2100 	strd	r2, r1, [r3]
   21dc0:	bd70      	pop	{r4, r5, r6, pc}
   21dc2:	682a      	ldr	r2, [r5, #0]
   21dc4:	2a04      	cmp	r2, #4
   21dc6:	d105      	bne.n	21dd4 <interface_socket_getopt+0x68>
   21dc8:	2200      	movs	r2, #0
   21dca:	6861      	ldr	r1, [r4, #4]
   21dcc:	4610      	mov	r0, r2
   21dce:	6019      	str	r1, [r3, #0]
   21dd0:	6062      	str	r2, [r4, #4]
   21dd2:	bd70      	pop	{r4, r5, r6, pc}
   21dd4:	2016      	movs	r0, #22
   21dd6:	f7f4 fed3 	bl	16b80 <bsd_os_errno_set>
   21dda:	f04f 30ff 	mov.w	r0, #4294967295
   21dde:	bd70      	pop	{r4, r5, r6, pc}
   21de0:	2009      	movs	r0, #9
   21de2:	f7f4 fecd 	bl	16b80 <bsd_os_errno_set>
   21de6:	f04f 30ff 	mov.w	r0, #4294967295
   21dea:	bd70      	pop	{r4, r5, r6, pc}
   21dec:	202a      	movs	r0, #42	; 0x2a
   21dee:	f7f4 fec7 	bl	16b80 <bsd_os_errno_set>
   21df2:	f04f 30ff 	mov.w	r0, #4294967295
   21df6:	bd70      	pop	{r4, r5, r6, pc}
   21df8:	200262a4 	.word	0x200262a4
   21dfc:	10624dd3 	.word	0x10624dd3

00021e00 <interface_socket_fcntl>:
   21e00:	2808      	cmp	r0, #8
   21e02:	b510      	push	{r4, lr}
   21e04:	d826      	bhi.n	21e54 <interface_socket_fcntl+0x54>
   21e06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21e0a:	4c1b      	ldr	r4, [pc, #108]	; (21e78 <interface_socket_fcntl+0x78>)
   21e0c:	00c3      	lsls	r3, r0, #3
   21e0e:	58e0      	ldr	r0, [r4, r3]
   21e10:	b300      	cbz	r0, 21e54 <interface_socket_fcntl+0x54>
   21e12:	2901      	cmp	r1, #1
   21e14:	d005      	beq.n	21e22 <interface_socket_fcntl+0x22>
   21e16:	2902      	cmp	r1, #2
   21e18:	d122      	bne.n	21e60 <interface_socket_fcntl+0x60>
   21e1a:	58e0      	ldr	r0, [r4, r3]
   21e1c:	f3c0 7000 	ubfx	r0, r0, #28, #1
   21e20:	bd10      	pop	{r4, pc}
   21e22:	07d2      	lsls	r2, r2, #31
   21e24:	d410      	bmi.n	21e48 <interface_socket_fcntl+0x48>
   21e26:	58e0      	ldr	r0, [r4, r3]
   21e28:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   21e2c:	d11e      	bne.n	21e6c <interface_socket_fcntl+0x6c>
   21e2e:	58e2      	ldr	r2, [r4, r3]
   21e30:	b292      	uxth	r2, r2
   21e32:	2a0a      	cmp	r2, #10
   21e34:	d01a      	beq.n	21e6c <interface_socket_fcntl+0x6c>
   21e36:	58e2      	ldr	r2, [r4, r3]
   21e38:	b292      	uxth	r2, r2
   21e3a:	2a0b      	cmp	r2, #11
   21e3c:	d016      	beq.n	21e6c <interface_socket_fcntl+0x6c>
   21e3e:	58e2      	ldr	r2, [r4, r3]
   21e40:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   21e44:	50e2      	str	r2, [r4, r3]
   21e46:	bd10      	pop	{r4, pc}
   21e48:	58e2      	ldr	r2, [r4, r3]
   21e4a:	2000      	movs	r0, #0
   21e4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   21e50:	50e2      	str	r2, [r4, r3]
   21e52:	bd10      	pop	{r4, pc}
   21e54:	2009      	movs	r0, #9
   21e56:	f7f4 fe93 	bl	16b80 <bsd_os_errno_set>
   21e5a:	f04f 30ff 	mov.w	r0, #4294967295
   21e5e:	bd10      	pop	{r4, pc}
   21e60:	2016      	movs	r0, #22
   21e62:	f7f4 fe8d 	bl	16b80 <bsd_os_errno_set>
   21e66:	f04f 30ff 	mov.w	r0, #4294967295
   21e6a:	bd10      	pop	{r4, pc}
   21e6c:	2023      	movs	r0, #35	; 0x23
   21e6e:	f7f4 fe87 	bl	16b80 <bsd_os_errno_set>
   21e72:	f04f 30ff 	mov.w	r0, #4294967295
   21e76:	bd10      	pop	{r4, pc}
   21e78:	200262a4 	.word	0x200262a4

00021e7c <at_client_evt_handler>:
   21e7c:	b120      	cbz	r0, 21e88 <at_client_evt_handler+0xc>
   21e7e:	f850 1b08 	ldr.w	r1, [r0], #8
   21e82:	0c09      	lsrs	r1, r1, #16
   21e84:	f7fc be44 	b.w	1eb10 <rpc_at_event_handler>
   21e88:	4770      	bx	lr
   21e8a:	bf00      	nop

00021e8c <rpc_at_client_init>:
   21e8c:	4801      	ldr	r0, [pc, #4]	; (21e94 <rpc_at_client_init+0x8>)
   21e8e:	f7fb bbfb 	b.w	1d688 <rpc_client_register>
   21e92:	bf00      	nop
   21e94:	0002f924 	.word	0x0002f924

00021e98 <rpc_at_client_request_alloc>:
   21e98:	b180      	cbz	r0, 21ebc <rpc_at_client_request_alloc+0x24>
   21e9a:	2300      	movs	r3, #0
   21e9c:	b510      	push	{r4, lr}
   21e9e:	b082      	sub	sp, #8
   21ea0:	aa02      	add	r2, sp, #8
   21ea2:	4604      	mov	r4, r0
   21ea4:	f842 3d04 	str.w	r3, [r2, #-4]!
   21ea8:	2003      	movs	r0, #3
   21eaa:	f7fb fc67 	bl	1d77c <rpc_message_alloc>
   21eae:	b918      	cbnz	r0, 21eb8 <rpc_at_client_request_alloc+0x20>
   21eb0:	9b01      	ldr	r3, [sp, #4]
   21eb2:	b10b      	cbz	r3, 21eb8 <rpc_at_client_request_alloc+0x20>
   21eb4:	3308      	adds	r3, #8
   21eb6:	6023      	str	r3, [r4, #0]
   21eb8:	b002      	add	sp, #8
   21eba:	bd10      	pop	{r4, pc}
   21ebc:	200e      	movs	r0, #14
   21ebe:	4770      	bx	lr

00021ec0 <rpc_at_client_request_send>:
   21ec0:	b150      	cbz	r0, 21ed8 <rpc_at_client_request_send+0x18>
   21ec2:	4603      	mov	r3, r0
   21ec4:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   21ec8:	2003      	movs	r0, #3
   21eca:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   21ece:	f843 1d08 	str.w	r1, [r3, #-8]!
   21ed2:	4619      	mov	r1, r3
   21ed4:	f7fb bc42 	b.w	1d75c <rpc_message_send>
   21ed8:	200e      	movs	r0, #14
   21eda:	4770      	bx	lr

00021edc <rpc_at_client_message_free>:
   21edc:	b120      	cbz	r0, 21ee8 <rpc_at_client_message_free+0xc>
   21ede:	f1a0 0108 	sub.w	r1, r0, #8
   21ee2:	2003      	movs	r0, #3
   21ee4:	f7fb bc76 	b.w	1d7d4 <rpc_message_free>
   21ee8:	200e      	movs	r0, #14
   21eea:	4770      	bx	lr

00021eec <rpc_at_client_data_free>:
   21eec:	b118      	cbz	r0, 21ef6 <rpc_at_client_data_free+0xa>
   21eee:	4601      	mov	r1, r0
   21ef0:	2003      	movs	r0, #3
   21ef2:	f7fb bc7b 	b.w	1d7ec <rpc_message_data_free>
   21ef6:	200e      	movs	r0, #14
   21ef8:	4770      	bx	lr
   21efa:	bf00      	nop

00021efc <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   21efc:	4a07      	ldr	r2, [pc, #28]	; (21f1c <SystemInit+0x20>)
   21efe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   21f02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   21f06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   21f0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21f0e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   21f12:	4b03      	ldr	r3, [pc, #12]	; (21f20 <SystemInit+0x24>)
   21f14:	4a03      	ldr	r2, [pc, #12]	; (21f24 <SystemInit+0x28>)
   21f16:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21f18:	4770      	bx	lr
   21f1a:	bf00      	nop
   21f1c:	e000ed00 	.word	0xe000ed00
   21f20:	200204c8 	.word	0x200204c8
   21f24:	03d09000 	.word	0x03d09000

00021f28 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   21f28:	b508      	push	{r3, lr}
    switch (domain)
   21f2a:	b178      	cbz	r0, 21f4c <nrf_clock_is_running.constprop.0+0x24>
   21f2c:	2801      	cmp	r0, #1
   21f2e:	d019      	beq.n	21f64 <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   21f30:	f240 3342 	movw	r3, #834	; 0x342
   21f34:	4a10      	ldr	r2, [pc, #64]	; (21f78 <nrf_clock_is_running.constprop.0+0x50>)
   21f36:	4911      	ldr	r1, [pc, #68]	; (21f7c <nrf_clock_is_running.constprop.0+0x54>)
   21f38:	4811      	ldr	r0, [pc, #68]	; (21f80 <nrf_clock_is_running.constprop.0+0x58>)
   21f3a:	f00a fa9a 	bl	2c472 <printk>
   21f3e:	480e      	ldr	r0, [pc, #56]	; (21f78 <nrf_clock_is_running.constprop.0+0x50>)
   21f40:	f240 3142 	movw	r1, #834	; 0x342
   21f44:	f00a fcb2 	bl	2c8ac <assert_post_action>
            return false;
   21f48:	2000      	movs	r0, #0
   21f4a:	e00a      	b.n	21f62 <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   21f4c:	4a0d      	ldr	r2, [pc, #52]	; (21f84 <nrf_clock_is_running.constprop.0+0x5c>)
   21f4e:	b121      	cbz	r1, 21f5a <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21f50:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   21f54:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   21f58:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21f5a:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21f5e:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   21f62:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   21f64:	4a07      	ldr	r2, [pc, #28]	; (21f84 <nrf_clock_is_running.constprop.0+0x5c>)
   21f66:	b121      	cbz	r1, 21f72 <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21f68:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   21f6c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   21f70:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21f72:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   21f76:	e7f2      	b.n	21f5e <nrf_clock_is_running.constprop.0+0x36>
   21f78:	00032b48 	.word	0x00032b48
   21f7c:	00033086 	.word	0x00033086
   21f80:	0003049a 	.word	0x0003049a
   21f84:	40005000 	.word	0x40005000

00021f88 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   21f88:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   21f8a:	4604      	mov	r4, r0
   21f8c:	b948      	cbnz	r0, 21fa2 <nrfx_clock_init+0x1a>
   21f8e:	490a      	ldr	r1, [pc, #40]	; (21fb8 <nrfx_clock_init+0x30>)
   21f90:	480a      	ldr	r0, [pc, #40]	; (21fbc <nrfx_clock_init+0x34>)
   21f92:	23b3      	movs	r3, #179	; 0xb3
   21f94:	4a0a      	ldr	r2, [pc, #40]	; (21fc0 <nrfx_clock_init+0x38>)
   21f96:	f00a fa6c 	bl	2c472 <printk>
   21f9a:	21b3      	movs	r1, #179	; 0xb3
   21f9c:	4808      	ldr	r0, [pc, #32]	; (21fc0 <nrfx_clock_init+0x38>)
   21f9e:	f00a fc85 	bl	2c8ac <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21fa2:	4b08      	ldr	r3, [pc, #32]	; (21fc4 <nrfx_clock_init+0x3c>)
   21fa4:	791a      	ldrb	r2, [r3, #4]
   21fa6:	b922      	cbnz	r2, 21fb2 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   21fa8:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   21faa:	4807      	ldr	r0, [pc, #28]	; (21fc8 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   21fac:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   21fae:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21fb0:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21fb2:	4806      	ldr	r0, [pc, #24]	; (21fcc <nrfx_clock_init+0x44>)
    return err_code;
   21fb4:	e7fc      	b.n	21fb0 <nrfx_clock_init+0x28>
   21fb6:	bf00      	nop
   21fb8:	00032bb9 	.word	0x00032bb9
   21fbc:	0003049a 	.word	0x0003049a
   21fc0:	00032b7c 	.word	0x00032b7c
   21fc4:	20021dac 	.word	0x20021dac
   21fc8:	0bad0000 	.word	0x0bad0000
   21fcc:	0bad000c 	.word	0x0bad000c

00021fd0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21fd0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fd2:	4b0b      	ldr	r3, [pc, #44]	; (22000 <nrfx_clock_enable+0x30>)
   21fd4:	791b      	ldrb	r3, [r3, #4]
   21fd6:	b94b      	cbnz	r3, 21fec <nrfx_clock_enable+0x1c>
   21fd8:	490a      	ldr	r1, [pc, #40]	; (22004 <nrfx_clock_enable+0x34>)
   21fda:	480b      	ldr	r0, [pc, #44]	; (22008 <nrfx_clock_enable+0x38>)
   21fdc:	23cc      	movs	r3, #204	; 0xcc
   21fde:	4a0b      	ldr	r2, [pc, #44]	; (2200c <nrfx_clock_enable+0x3c>)
   21fe0:	f00a fa47 	bl	2c472 <printk>
   21fe4:	21cc      	movs	r1, #204	; 0xcc
   21fe6:	4809      	ldr	r0, [pc, #36]	; (2200c <nrfx_clock_enable+0x3c>)
   21fe8:	f00a fc60 	bl	2c8ac <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21fec:	2005      	movs	r0, #5
   21fee:	f7f2 fb41 	bl	14674 <arch_irq_is_enabled>
   21ff2:	b920      	cbnz	r0, 21ffe <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   21ff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   21ff8:	2005      	movs	r0, #5
   21ffa:	f7f2 bb2b 	b.w	14654 <arch_irq_enable>
   21ffe:	bd08      	pop	{r3, pc}
   22000:	20021dac 	.word	0x20021dac
   22004:	00032bc7 	.word	0x00032bc7
   22008:	0003049a 	.word	0x0003049a
   2200c:	00032b7c 	.word	0x00032b7c

00022010 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22010:	4b22      	ldr	r3, [pc, #136]	; (2209c <nrfx_clock_start+0x8c>)
{
   22012:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22014:	791b      	ldrb	r3, [r3, #4]
{
   22016:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22018:	b95b      	cbnz	r3, 22032 <nrfx_clock_start+0x22>
   2201a:	4921      	ldr	r1, [pc, #132]	; (220a0 <nrfx_clock_start+0x90>)
   2201c:	4821      	ldr	r0, [pc, #132]	; (220a4 <nrfx_clock_start+0x94>)
   2201e:	f44f 7384 	mov.w	r3, #264	; 0x108
   22022:	4a21      	ldr	r2, [pc, #132]	; (220a8 <nrfx_clock_start+0x98>)
   22024:	f00a fa25 	bl	2c472 <printk>
   22028:	f44f 7184 	mov.w	r1, #264	; 0x108
   2202c:	481e      	ldr	r0, [pc, #120]	; (220a8 <nrfx_clock_start+0x98>)
   2202e:	f00a fc3d 	bl	2c8ac <assert_post_action>
    switch (domain)
   22032:	b174      	cbz	r4, 22052 <nrfx_clock_start+0x42>
   22034:	2c01      	cmp	r4, #1
   22036:	d027      	beq.n	22088 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   22038:	f44f 739d 	mov.w	r3, #314	; 0x13a
   2203c:	4a1a      	ldr	r2, [pc, #104]	; (220a8 <nrfx_clock_start+0x98>)
   2203e:	491b      	ldr	r1, [pc, #108]	; (220ac <nrfx_clock_start+0x9c>)
   22040:	4818      	ldr	r0, [pc, #96]	; (220a4 <nrfx_clock_start+0x94>)
   22042:	f00a fa16 	bl	2c472 <printk>
   22046:	f44f 719d 	mov.w	r1, #314	; 0x13a
   2204a:	4817      	ldr	r0, [pc, #92]	; (220a8 <nrfx_clock_start+0x98>)
   2204c:	f00a fc2e 	bl	2c8ac <assert_post_action>
            break;
    }
}
   22050:	e016      	b.n	22080 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   22052:	4620      	mov	r0, r4
   22054:	f10d 0107 	add.w	r1, sp, #7
   22058:	f7ff ff66 	bl	21f28 <nrf_clock_is_running.constprop.0>
   2205c:	4b14      	ldr	r3, [pc, #80]	; (220b0 <nrfx_clock_start+0xa0>)
   2205e:	b188      	cbz	r0, 22084 <nrfx_clock_start+0x74>
   22060:	f89d 2007 	ldrb.w	r2, [sp, #7]
   22064:	2a02      	cmp	r2, #2
   22066:	d10d      	bne.n	22084 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   22068:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2206c:	2200      	movs	r2, #0
   2206e:	4b11      	ldr	r3, [pc, #68]	; (220b4 <nrfx_clock_start+0xa4>)
   22070:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   22072:	2202      	movs	r2, #2
   22074:	681b      	ldr	r3, [r3, #0]
   22076:	4b0e      	ldr	r3, [pc, #56]	; (220b0 <nrfx_clock_start+0xa0>)
   22078:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2207c:	2201      	movs	r2, #1
   2207e:	609a      	str	r2, [r3, #8]
}
   22080:	b002      	add	sp, #8
   22082:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   22084:	2201      	movs	r2, #1
   22086:	e7ef      	b.n	22068 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22088:	2200      	movs	r2, #0
   2208a:	4b0b      	ldr	r3, [pc, #44]	; (220b8 <nrfx_clock_start+0xa8>)
   2208c:	601a      	str	r2, [r3, #0]
   2208e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   22090:	4b07      	ldr	r3, [pc, #28]	; (220b0 <nrfx_clock_start+0xa0>)
   22092:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22096:	601c      	str	r4, [r3, #0]
}
   22098:	e7f2      	b.n	22080 <nrfx_clock_start+0x70>
   2209a:	bf00      	nop
   2209c:	20021dac 	.word	0x20021dac
   220a0:	00032bc7 	.word	0x00032bc7
   220a4:	0003049a 	.word	0x0003049a
   220a8:	00032b7c 	.word	0x00032b7c
   220ac:	00033086 	.word	0x00033086
   220b0:	40005000 	.word	0x40005000
   220b4:	40005104 	.word	0x40005104
   220b8:	40005100 	.word	0x40005100

000220bc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   220bc:	4b2d      	ldr	r3, [pc, #180]	; (22174 <nrfx_clock_stop+0xb8>)
{
   220be:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   220c0:	791b      	ldrb	r3, [r3, #4]
{
   220c2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   220c4:	b95b      	cbnz	r3, 220de <nrfx_clock_stop+0x22>
   220c6:	492c      	ldr	r1, [pc, #176]	; (22178 <nrfx_clock_stop+0xbc>)
   220c8:	482c      	ldr	r0, [pc, #176]	; (2217c <nrfx_clock_stop+0xc0>)
   220ca:	f240 1341 	movw	r3, #321	; 0x141
   220ce:	4a2c      	ldr	r2, [pc, #176]	; (22180 <nrfx_clock_stop+0xc4>)
   220d0:	f00a f9cf 	bl	2c472 <printk>
   220d4:	f240 1141 	movw	r1, #321	; 0x141
   220d8:	4829      	ldr	r0, [pc, #164]	; (22180 <nrfx_clock_stop+0xc4>)
   220da:	f00a fbe7 	bl	2c8ac <assert_post_action>
    switch (domain)
   220de:	b17c      	cbz	r4, 22100 <nrfx_clock_stop+0x44>
   220e0:	2c01      	cmp	r4, #1
   220e2:	d027      	beq.n	22134 <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   220e4:	4927      	ldr	r1, [pc, #156]	; (22184 <nrfx_clock_stop+0xc8>)
   220e6:	4825      	ldr	r0, [pc, #148]	; (2217c <nrfx_clock_stop+0xc0>)
   220e8:	f240 135d 	movw	r3, #349	; 0x15d
   220ec:	4a24      	ldr	r2, [pc, #144]	; (22180 <nrfx_clock_stop+0xc4>)
   220ee:	f00a f9c0 	bl	2c472 <printk>
   220f2:	f240 115d 	movw	r1, #349	; 0x15d
   220f6:	4822      	ldr	r0, [pc, #136]	; (22180 <nrfx_clock_stop+0xc4>)
   220f8:	f00a fbd8 	bl	2c8ac <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   220fc:	b002      	add	sp, #8
   220fe:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   22100:	2202      	movs	r2, #2
   22102:	4b21      	ldr	r3, [pc, #132]	; (22188 <nrfx_clock_stop+0xcc>)
   22104:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22108:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2210a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2210e:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22112:	f503 7382 	add.w	r3, r3, #260	; 0x104
   22116:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22118:	4b1c      	ldr	r3, [pc, #112]	; (2218c <nrfx_clock_stop+0xd0>)
   2211a:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   2211c:	2100      	movs	r1, #0
   2211e:	4608      	mov	r0, r1
   22120:	f7ff ff02 	bl	21f28 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   22124:	2800      	cmp	r0, #0
   22126:	d0e9      	beq.n	220fc <nrfx_clock_stop+0x40>
   22128:	2001      	movs	r0, #1
   2212a:	f00c fc02 	bl	2e932 <nrfx_busy_wait>
   2212e:	3c01      	subs	r4, #1
   22130:	d1f4      	bne.n	2211c <nrfx_clock_stop+0x60>
   22132:	e7e3      	b.n	220fc <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22134:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   22136:	4b14      	ldr	r3, [pc, #80]	; (22188 <nrfx_clock_stop+0xcc>)
   22138:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2213c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22140:	f503 7380 	add.w	r3, r3, #256	; 0x100
   22144:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22146:	4b12      	ldr	r3, [pc, #72]	; (22190 <nrfx_clock_stop+0xd4>)
   22148:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2214a:	f88d 4007 	strb.w	r4, [sp, #7]
   2214e:	f242 7410 	movw	r4, #10000	; 0x2710
   22152:	2001      	movs	r0, #1
   22154:	f10d 0107 	add.w	r1, sp, #7
   22158:	f7ff fee6 	bl	21f28 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2215c:	2800      	cmp	r0, #0
   2215e:	d0cd      	beq.n	220fc <nrfx_clock_stop+0x40>
   22160:	f89d 0007 	ldrb.w	r0, [sp, #7]
   22164:	2801      	cmp	r0, #1
   22166:	d1c9      	bne.n	220fc <nrfx_clock_stop+0x40>
   22168:	f00c fbe3 	bl	2e932 <nrfx_busy_wait>
   2216c:	3c01      	subs	r4, #1
   2216e:	d1f0      	bne.n	22152 <nrfx_clock_stop+0x96>
   22170:	e7c4      	b.n	220fc <nrfx_clock_stop+0x40>
   22172:	bf00      	nop
   22174:	20021dac 	.word	0x20021dac
   22178:	00032bc7 	.word	0x00032bc7
   2217c:	0003049a 	.word	0x0003049a
   22180:	00032b7c 	.word	0x00032b7c
   22184:	00033086 	.word	0x00033086
   22188:	40005000 	.word	0x40005000
   2218c:	4000500c 	.word	0x4000500c
   22190:	40005004 	.word	0x40005004

00022194 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22194:	4b15      	ldr	r3, [pc, #84]	; (221ec <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   22196:	b507      	push	{r0, r1, r2, lr}
   22198:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2219a:	b14a      	cbz	r2, 221b0 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2219c:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   2219e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221a0:	6018      	str	r0, [r3, #0]
   221a2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   221a4:	4b12      	ldr	r3, [pc, #72]	; (221f0 <nrfx_power_clock_irq_handler+0x5c>)
   221a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   221aa:	4b12      	ldr	r3, [pc, #72]	; (221f4 <nrfx_power_clock_irq_handler+0x60>)
   221ac:	681b      	ldr	r3, [r3, #0]
   221ae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   221b0:	4b11      	ldr	r3, [pc, #68]	; (221f8 <nrfx_power_clock_irq_handler+0x64>)
   221b2:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   221b4:	b17a      	cbz	r2, 221d6 <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221b6:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   221b8:	f10d 0107 	add.w	r1, sp, #7
   221bc:	6018      	str	r0, [r3, #0]
   221be:	681b      	ldr	r3, [r3, #0]
   221c0:	f7ff feb2 	bl	21f28 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   221c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   221c8:	2202      	movs	r2, #2
   221ca:	2901      	cmp	r1, #1
   221cc:	4b08      	ldr	r3, [pc, #32]	; (221f0 <nrfx_power_clock_irq_handler+0x5c>)
   221ce:	d105      	bne.n	221dc <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   221d0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   221d4:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   221d6:	b003      	add	sp, #12
   221d8:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   221dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   221e0:	4b04      	ldr	r3, [pc, #16]	; (221f4 <nrfx_power_clock_irq_handler+0x60>)
   221e2:	2001      	movs	r0, #1
   221e4:	681b      	ldr	r3, [r3, #0]
   221e6:	4798      	blx	r3
}
   221e8:	e7f5      	b.n	221d6 <nrfx_power_clock_irq_handler+0x42>
   221ea:	bf00      	nop
   221ec:	40005100 	.word	0x40005100
   221f0:	40005000 	.word	0x40005000
   221f4:	20021dac 	.word	0x20021dac
   221f8:	40005104 	.word	0x40005104

000221fc <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221fc:	6803      	ldr	r3, [r0, #0]
{
   221fe:	b510      	push	{r4, lr}
    switch (port)
   22200:	095a      	lsrs	r2, r3, #5
   22202:	bf0c      	ite	eq
   22204:	f04f 32ff 	moveq.w	r2, #4294967295
   22208:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2220a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2220e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22212:	07db      	lsls	r3, r3, #31
{
   22214:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22216:	d40b      	bmi.n	22230 <nrf_gpio_pin_port_decode+0x34>
   22218:	490f      	ldr	r1, [pc, #60]	; (22258 <nrf_gpio_pin_port_decode+0x5c>)
   2221a:	4810      	ldr	r0, [pc, #64]	; (2225c <nrf_gpio_pin_port_decode+0x60>)
   2221c:	f240 231a 	movw	r3, #538	; 0x21a
   22220:	4a0f      	ldr	r2, [pc, #60]	; (22260 <nrf_gpio_pin_port_decode+0x64>)
   22222:	f00a f926 	bl	2c472 <printk>
   22226:	f240 211a 	movw	r1, #538	; 0x21a
   2222a:	480d      	ldr	r0, [pc, #52]	; (22260 <nrf_gpio_pin_port_decode+0x64>)
   2222c:	f00a fb3e 	bl	2c8ac <assert_post_action>
    uint32_t pin_number = *p_pin;
   22230:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   22232:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22236:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   22238:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2223a:	d00b      	beq.n	22254 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   2223c:	4909      	ldr	r1, [pc, #36]	; (22264 <nrf_gpio_pin_port_decode+0x68>)
   2223e:	4807      	ldr	r0, [pc, #28]	; (2225c <nrf_gpio_pin_port_decode+0x60>)
   22240:	f240 231f 	movw	r3, #543	; 0x21f
   22244:	4a06      	ldr	r2, [pc, #24]	; (22260 <nrf_gpio_pin_port_decode+0x64>)
   22246:	f00a f914 	bl	2c472 <printk>
   2224a:	f240 211f 	movw	r1, #543	; 0x21f
   2224e:	4804      	ldr	r0, [pc, #16]	; (22260 <nrf_gpio_pin_port_decode+0x64>)
   22250:	f00a fb2c 	bl	2c8ac <assert_post_action>
}
   22254:	4804      	ldr	r0, [pc, #16]	; (22268 <nrf_gpio_pin_port_decode+0x6c>)
   22256:	bd10      	pop	{r4, pc}
   22258:	000315f8 	.word	0x000315f8
   2225c:	0003049a 	.word	0x0003049a
   22260:	000315c5 	.word	0x000315c5
   22264:	00033086 	.word	0x00033086
   22268:	40842500 	.word	0x40842500

0002226c <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   2226c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22270:	4605      	mov	r5, r0
   22272:	4690      	mov	r8, r2
    NRFX_ASSERT(p_config);
   22274:	460c      	mov	r4, r1
   22276:	b949      	cbnz	r1, 2228c <nrfx_uarte_init+0x20>
   22278:	4966      	ldr	r1, [pc, #408]	; (22414 <nrfx_uarte_init+0x1a8>)
   2227a:	4867      	ldr	r0, [pc, #412]	; (22418 <nrfx_uarte_init+0x1ac>)
   2227c:	23ef      	movs	r3, #239	; 0xef
   2227e:	4a67      	ldr	r2, [pc, #412]	; (2241c <nrfx_uarte_init+0x1b0>)
   22280:	f00a f8f7 	bl	2c472 <printk>
   22284:	21ef      	movs	r1, #239	; 0xef
   22286:	4865      	ldr	r0, [pc, #404]	; (2241c <nrfx_uarte_init+0x1b0>)
   22288:	f00a fb10 	bl	2c8ac <assert_post_action>
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2228c:	2224      	movs	r2, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2228e:	792e      	ldrb	r6, [r5, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22290:	4f63      	ldr	r7, [pc, #396]	; (22420 <nrfx_uarte_init+0x1b4>)
   22292:	fb02 7206 	mla	r2, r2, r6, r7
   22296:	f892 2020 	ldrb.w	r2, [r2, #32]
   2229a:	2a00      	cmp	r2, #0
   2229c:	f040 80b8 	bne.w	22410 <nrfx_uarte_init+0x1a4>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   222a0:	6823      	ldr	r3, [r4, #0]
   222a2:	1c5a      	adds	r2, r3, #1
   222a4:	d011      	beq.n	222ca <nrfx_uarte_init+0x5e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   222a6:	a801      	add	r0, sp, #4
   222a8:	9301      	str	r3, [sp, #4]
   222aa:	f7ff ffa7 	bl	221fc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   222ae:	2301      	movs	r3, #1
   222b0:	9a01      	ldr	r2, [sp, #4]
   222b2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   222b4:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   222b6:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   222b8:	a801      	add	r0, sp, #4
   222ba:	9301      	str	r3, [sp, #4]
   222bc:	f7ff ff9e 	bl	221fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   222c0:	2203      	movs	r2, #3
   222c2:	9b01      	ldr	r3, [sp, #4]
   222c4:	3380      	adds	r3, #128	; 0x80
   222c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   222ca:	6863      	ldr	r3, [r4, #4]
   222cc:	1c58      	adds	r0, r3, #1
   222ce:	d008      	beq.n	222e2 <nrfx_uarte_init+0x76>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   222d0:	a801      	add	r0, sp, #4
   222d2:	9301      	str	r3, [sp, #4]
   222d4:	f7ff ff92 	bl	221fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   222d8:	2200      	movs	r2, #0
   222da:	9b01      	ldr	r3, [sp, #4]
   222dc:	3380      	adds	r3, #128	; 0x80
   222de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   222e2:	6963      	ldr	r3, [r4, #20]
   222e4:	682a      	ldr	r2, [r5, #0]
    p_reg->BAUDRATE = baudrate;
   222e6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   222ea:	7ee0      	ldrb	r0, [r4, #27]
   222ec:	7ea3      	ldrb	r3, [r4, #26]
   222ee:	7e61      	ldrb	r1, [r4, #25]
   222f0:	4303      	orrs	r3, r0
   222f2:	430b      	orrs	r3, r1
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   222f4:	2901      	cmp	r1, #1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   222f6:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    nrf_uarte_txrx_pins_set(p_instance->p_reg, p_config->pseltxd, p_config->pselrxd);
   222fa:	e9d4 0300 	ldrd	r0, r3, [r4]
    p_reg->PSEL.TXD = pseltxd;
   222fe:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   22302:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   22306:	d127      	bne.n	22358 <nrfx_uarte_init+0xec>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   22308:	68a3      	ldr	r3, [r4, #8]
   2230a:	1c59      	adds	r1, r3, #1
   2230c:	d008      	beq.n	22320 <nrfx_uarte_init+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2230e:	a801      	add	r0, sp, #4
   22310:	9301      	str	r3, [sp, #4]
   22312:	f7ff ff73 	bl	221fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22316:	2200      	movs	r2, #0
   22318:	9b01      	ldr	r3, [sp, #4]
   2231a:	3380      	adds	r3, #128	; 0x80
   2231c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   22320:	68e3      	ldr	r3, [r4, #12]
   22322:	1c5a      	adds	r2, r3, #1
   22324:	d011      	beq.n	2234a <nrfx_uarte_init+0xde>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22326:	a801      	add	r0, sp, #4
   22328:	9301      	str	r3, [sp, #4]
   2232a:	f7ff ff67 	bl	221fc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2232e:	2301      	movs	r3, #1
   22330:	9a01      	ldr	r2, [sp, #4]
   22332:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   22334:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   22336:	68e3      	ldr	r3, [r4, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22338:	a801      	add	r0, sp, #4
   2233a:	9301      	str	r3, [sp, #4]
   2233c:	f7ff ff5e 	bl	221fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22340:	2203      	movs	r2, #3
   22342:	9b01      	ldr	r3, [sp, #4]
   22344:	3380      	adds	r3, #128	; 0x80
   22346:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        nrf_uarte_hwfc_pins_set(p_instance->p_reg, p_config->pselrts, p_config->pselcts);
   2234a:	682b      	ldr	r3, [r5, #0]
   2234c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
   22350:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   22354:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        (volatile uint32_t *)(((uint32_t)p_instance->p_reg) + 0x564);
   22358:	682b      	ldr	r3, [r5, #0]
    if (*txenable_reg == 1)
   2235a:	f8d3 2568 	ldr.w	r2, [r3, #1384]	; 0x568
        (volatile uint32_t *)(((uint32_t)p_instance->p_reg) + 0x564);
   2235e:	f203 5a64 	addw	sl, r3, #1380	; 0x564
    if (*txenable_reg == 1)
   22362:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22364:	bf08      	it	eq
   22366:	60da      	streq	r2, [r3, #12]
    if (*rxenable_reg == 1)
   22368:	f8d3 2564 	ldr.w	r2, [r3, #1380]	; 0x564
   2236c:	2a01      	cmp	r2, #1
   2236e:	d116      	bne.n	2239e <nrfx_uarte_init+0x132>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22370:	2108      	movs	r1, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22372:	f649 4940 	movw	r9, #40000	; 0x9c40
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22376:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2237a:	605a      	str	r2, [r3, #4]
        NRFX_WAIT_FOR(*rxenable_reg == 0, 40000, 1, workaround_succeded);
   2237c:	f8da 3000 	ldr.w	r3, [sl]
   22380:	b12b      	cbz	r3, 2238e <nrfx_uarte_init+0x122>
   22382:	2001      	movs	r0, #1
   22384:	f00c fad5 	bl	2e932 <nrfx_busy_wait>
   22388:	f1b9 0901 	subs.w	r9, r9, #1
   2238c:	d1f6      	bne.n	2237c <nrfx_uarte_init+0x110>
        (void)nrf_uarte_errorsrc_get_and_clear(p_instance->p_reg);
   2238e:	682b      	ldr	r3, [r5, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22390:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22394:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   22398:	2200      	movs	r2, #0
   2239a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    apply_config(p_instance, p_config);

    apply_workaround_for_enable_anomaly(p_instance);

    p_cb->handler   = event_handler;
   2239e:	2324      	movs	r3, #36	; 0x24
   223a0:	4373      	muls	r3, r6
   223a2:	18fa      	adds	r2, r7, r3
   223a4:	f8c2 8004 	str.w	r8, [r2, #4]
    p_cb->p_context = p_config->p_context;
   223a8:	6922      	ldr	r2, [r4, #16]
   223aa:	50fa      	str	r2, [r7, r3]

    if (p_cb->handler)
   223ac:	f1b8 0f00 	cmp.w	r8, #0
   223b0:	d01c      	beq.n	223ec <nrfx_uarte_init+0x180>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   223b2:	2200      	movs	r2, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   223b4:	6828      	ldr	r0, [r5, #0]
   223b6:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
   223ba:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
   223be:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   223c2:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   223c6:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   223ca:	f8d0 1124 	ldr.w	r1, [r0, #292]	; 0x124
   223ce:	f8c0 2144 	str.w	r2, [r0, #324]	; 0x144
   223d2:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
   223d6:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
   223da:	f8d0 2158 	ldr.w	r2, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   223de:	4a11      	ldr	r2, [pc, #68]	; (22424 <nrfx_uarte_init+0x1b8>)
   223e0:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   223e4:	f340 3007 	sbfx	r0, r0, #12, #8
   223e8:	f7f2 f934 	bl	14654 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   223ec:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   223ee:	682b      	ldr	r3, [r5, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   223f0:	480d      	ldr	r0, [pc, #52]	; (22428 <nrfx_uarte_init+0x1bc>)
   223f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   223f6:	2324      	movs	r3, #36	; 0x24
   223f8:	2200      	movs	r2, #0
   223fa:	fb03 7306 	mla	r3, r3, r6, r7
    p_cb->rx_secondary_buffer_length = 0;
   223fe:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   22402:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   22404:	2201      	movs	r2, #1
   22406:	f883 2020 	strb.w	r2, [r3, #32]
}
   2240a:	b002      	add	sp, #8
   2240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   22410:	4806      	ldr	r0, [pc, #24]	; (2242c <nrfx_uarte_init+0x1c0>)
   22412:	e7fa      	b.n	2240a <nrfx_uarte_init+0x19e>
   22414:	00032c22 	.word	0x00032c22
   22418:	0003049a 	.word	0x0003049a
   2241c:	00032be5 	.word	0x00032be5
   22420:	20021db4 	.word	0x20021db4
   22424:	00420310 	.word	0x00420310
   22428:	0bad0000 	.word	0x0bad0000
   2242c:	0bad0005 	.word	0x0bad0005

00022430 <nrfx_uarte_tx>:
}

nrfx_err_t nrfx_uarte_tx(nrfx_uarte_t const * p_instance,
                         uint8_t const *      p_data,
                         size_t               length)
{
   22430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   22434:	2324      	movs	r3, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22436:	f890 8004 	ldrb.w	r8, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2243a:	4d42      	ldr	r5, [pc, #264]	; (22544 <nrfx_uarte_tx+0x114>)
{
   2243c:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2243e:	fb03 5308 	mla	r3, r3, r8, r5
   22442:	f893 3020 	ldrb.w	r3, [r3, #32]
{
   22446:	460e      	mov	r6, r1
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   22448:	2b01      	cmp	r3, #1
{
   2244a:	4691      	mov	r9, r2
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2244c:	d00b      	beq.n	22466 <nrfx_uarte_tx+0x36>
   2244e:	493e      	ldr	r1, [pc, #248]	; (22548 <nrfx_uarte_tx+0x118>)
   22450:	483e      	ldr	r0, [pc, #248]	; (2254c <nrfx_uarte_tx+0x11c>)
   22452:	f240 1363 	movw	r3, #355	; 0x163
   22456:	4a3e      	ldr	r2, [pc, #248]	; (22550 <nrfx_uarte_tx+0x120>)
   22458:	f00a f80b 	bl	2c472 <printk>
   2245c:	f240 1163 	movw	r1, #355	; 0x163
   22460:	483b      	ldr	r0, [pc, #236]	; (22550 <nrfx_uarte_tx+0x120>)
   22462:	f00a fa23 	bl	2c8ac <assert_post_action>
    NRFX_ASSERT(p_data);
   22466:	b95e      	cbnz	r6, 22480 <nrfx_uarte_tx+0x50>
   22468:	493a      	ldr	r1, [pc, #232]	; (22554 <nrfx_uarte_tx+0x124>)
   2246a:	4838      	ldr	r0, [pc, #224]	; (2254c <nrfx_uarte_tx+0x11c>)
   2246c:	f44f 73b2 	mov.w	r3, #356	; 0x164
   22470:	4a37      	ldr	r2, [pc, #220]	; (22550 <nrfx_uarte_tx+0x120>)
   22472:	f009 fffe 	bl	2c472 <printk>
   22476:	f44f 71b2 	mov.w	r1, #356	; 0x164
   2247a:	4835      	ldr	r0, [pc, #212]	; (22550 <nrfx_uarte_tx+0x120>)
   2247c:	f00a fa16 	bl	2c8ac <assert_post_action>
    NRFX_ASSERT(length > 0);
   22480:	f1b9 0f00 	cmp.w	r9, #0
   22484:	d10b      	bne.n	2249e <nrfx_uarte_tx+0x6e>
   22486:	4934      	ldr	r1, [pc, #208]	; (22558 <nrfx_uarte_tx+0x128>)
   22488:	4830      	ldr	r0, [pc, #192]	; (2254c <nrfx_uarte_tx+0x11c>)
   2248a:	f240 1365 	movw	r3, #357	; 0x165
   2248e:	4a30      	ldr	r2, [pc, #192]	; (22550 <nrfx_uarte_tx+0x120>)
   22490:	f009 ffef 	bl	2c472 <printk>
   22494:	f240 1165 	movw	r1, #357	; 0x165
   22498:	482d      	ldr	r0, [pc, #180]	; (22550 <nrfx_uarte_tx+0x120>)
   2249a:	f00a fa07 	bl	2c8ac <assert_post_action>
    NRFX_ASSERT(UARTE_LENGTH_VALIDATE(p_instance->drv_inst_idx, length));
   2249e:	793b      	ldrb	r3, [r7, #4]
   224a0:	b913      	cbnz	r3, 224a8 <nrfx_uarte_tx+0x78>
   224a2:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   224a6:	d30b      	bcc.n	224c0 <nrfx_uarte_tx+0x90>
   224a8:	492c      	ldr	r1, [pc, #176]	; (2255c <nrfx_uarte_tx+0x12c>)
   224aa:	4828      	ldr	r0, [pc, #160]	; (2254c <nrfx_uarte_tx+0x11c>)
   224ac:	f44f 73b3 	mov.w	r3, #358	; 0x166
   224b0:	4a27      	ldr	r2, [pc, #156]	; (22550 <nrfx_uarte_tx+0x120>)
   224b2:	f009 ffde 	bl	2c472 <printk>
   224b6:	f44f 71b3 	mov.w	r1, #358	; 0x166
   224ba:	4825      	ldr	r0, [pc, #148]	; (22550 <nrfx_uarte_tx+0x120>)
   224bc:	f00a f9f6 	bl	2c8ac <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   224c0:	f006 4360 	and.w	r3, r6, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   224c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   224c8:	d136      	bne.n	22538 <nrfx_uarte_tx+0x108>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   224ca:	2424      	movs	r4, #36	; 0x24
   224cc:	793b      	ldrb	r3, [r7, #4]
   224ce:	fb04 5303 	mla	r3, r4, r3, r5
   224d2:	695a      	ldr	r2, [r3, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   224d4:	2a00      	cmp	r2, #0
   224d6:	d131      	bne.n	2253c <nrfx_uarte_tx+0x10c>
    p_cb->tx_buffer_length = length;
   224d8:	fb04 5408 	mla	r4, r4, r8, r5
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   224dc:	683b      	ldr	r3, [r7, #0]
    p_cb->tx_buffer_length = length;
   224de:	f8c4 9014 	str.w	r9, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   224e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   224e6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   224ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   224ee:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   224f2:	6962      	ldr	r2, [r4, #20]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   224f4:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   224f8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224fc:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   224fe:	60a6      	str	r6, [r4, #8]
   22500:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   22502:	6862      	ldr	r2, [r4, #4]
   22504:	b9e2      	cbnz	r2, 22540 <nrfx_uarte_tx+0x110>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22506:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2250a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   2250e:	b919      	cbnz	r1, 22518 <nrfx_uarte_tx+0xe8>
   22510:	2a00      	cmp	r2, #0
   22512:	d0f8      	beq.n	22506 <nrfx_uarte_tx+0xd6>
            err_code = NRFX_ERROR_FORBIDDEN;
   22514:	4812      	ldr	r0, [pc, #72]	; (22560 <nrfx_uarte_tx+0x130>)
   22516:	e008      	b.n	2252a <nrfx_uarte_tx+0xfa>
        if (txstopped)
   22518:	2a00      	cmp	r2, #0
   2251a:	d1fb      	bne.n	22514 <nrfx_uarte_tx+0xe4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2251c:	2201      	movs	r2, #1
   2251e:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22520:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   22524:	2a00      	cmp	r2, #0
   22526:	d0fb      	beq.n	22520 <nrfx_uarte_tx+0xf0>
    err_code = NRFX_SUCCESS;
   22528:	480e      	ldr	r0, [pc, #56]	; (22564 <nrfx_uarte_tx+0x134>)
        p_cb->tx_buffer_length = 0;
   2252a:	2324      	movs	r3, #36	; 0x24
   2252c:	fb03 5508 	mla	r5, r3, r8, r5
   22530:	2300      	movs	r3, #0
   22532:	616b      	str	r3, [r5, #20]
}
   22534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
   22538:	480b      	ldr	r0, [pc, #44]	; (22568 <nrfx_uarte_tx+0x138>)
   2253a:	e7fb      	b.n	22534 <nrfx_uarte_tx+0x104>
        return err_code;
   2253c:	480b      	ldr	r0, [pc, #44]	; (2256c <nrfx_uarte_tx+0x13c>)
   2253e:	e7f9      	b.n	22534 <nrfx_uarte_tx+0x104>
    err_code = NRFX_SUCCESS;
   22540:	4808      	ldr	r0, [pc, #32]	; (22564 <nrfx_uarte_tx+0x134>)
   22542:	e7f7      	b.n	22534 <nrfx_uarte_tx+0x104>
   22544:	20021db4 	.word	0x20021db4
   22548:	00032c2b 	.word	0x00032c2b
   2254c:	0003049a 	.word	0x0003049a
   22550:	00032be5 	.word	0x00032be5
   22554:	00032c55 	.word	0x00032c55
   22558:	00032c5c 	.word	0x00032c5c
   2255c:	00032c67 	.word	0x00032c67
   22560:	0bad0008 	.word	0x0bad0008
   22564:	0bad0000 	.word	0x0bad0000
   22568:	0bad000a 	.word	0x0bad000a
   2256c:	0bad000b 	.word	0x0bad000b

00022570 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   22570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22572:	4b10      	ldr	r3, [pc, #64]	; (225b4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   22574:	4f10      	ldr	r7, [pc, #64]	; (225b8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22576:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2257a:	3001      	adds	r0, #1
   2257c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   22580:	42ae      	cmp	r6, r5
   22582:	d800      	bhi.n	22586 <z_sys_init_run_level+0x16>
		}
	}
}
   22584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   22586:	e9d5 3400 	ldrd	r3, r4, [r5]
   2258a:	4620      	mov	r0, r4
   2258c:	4798      	blx	r3
   2258e:	b170      	cbz	r0, 225ae <z_sys_init_run_level+0x3e>
   22590:	b16c      	cbz	r4, 225ae <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   22592:	2301      	movs	r3, #1
				(dev - __device_start));
   22594:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22596:	4a09      	ldr	r2, [pc, #36]	; (225bc <z_sys_init_run_level+0x4c>)
   22598:	1124      	asrs	r4, r4, #4
   2259a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   2259c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   225a0:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   225a4:	fa03 f404 	lsl.w	r4, r3, r4
   225a8:	4304      	orrs	r4, r0
   225aa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   225ae:	3508      	adds	r5, #8
   225b0:	e7e6      	b.n	22580 <z_sys_init_run_level+0x10>
   225b2:	bf00      	nop
   225b4:	0002f934 	.word	0x0002f934
   225b8:	20020a60 	.word	0x20020a60
   225bc:	20020ae0 	.word	0x20020ae0

000225c0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   225c0:	4b08      	ldr	r3, [pc, #32]	; (225e4 <z_device_ready+0x24>)
   225c2:	1ac0      	subs	r0, r0, r3
   225c4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   225c6:	4b08      	ldr	r3, [pc, #32]	; (225e8 <z_device_ready+0x28>)
   225c8:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   225ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   225ce:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   225d0:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   225d4:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   225d8:	4210      	tst	r0, r2
}
   225da:	bf0c      	ite	eq
   225dc:	4618      	moveq	r0, r3
   225de:	2000      	movne	r0, #0
   225e0:	4770      	bx	lr
   225e2:	bf00      	nop
   225e4:	20020a60 	.word	0x20020a60
   225e8:	20020ae0 	.word	0x20020ae0

000225ec <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   225ec:	4911      	ldr	r1, [pc, #68]	; (22634 <z_impl_device_get_binding+0x48>)
{
   225ee:	b570      	push	{r4, r5, r6, lr}
   225f0:	4605      	mov	r5, r0
   225f2:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   225f4:	4c10      	ldr	r4, [pc, #64]	; (22638 <z_impl_device_get_binding+0x4c>)
   225f6:	428c      	cmp	r4, r1
   225f8:	d104      	bne.n	22604 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   225fa:	4c0f      	ldr	r4, [pc, #60]	; (22638 <z_impl_device_get_binding+0x4c>)
   225fc:	42b4      	cmp	r4, r6
   225fe:	d10a      	bne.n	22616 <z_impl_device_get_binding+0x2a>
	return NULL;
   22600:	2400      	movs	r4, #0
   22602:	e014      	b.n	2262e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   22604:	4620      	mov	r0, r4
   22606:	f7ff ffdb 	bl	225c0 <z_device_ready>
   2260a:	b110      	cbz	r0, 22612 <z_impl_device_get_binding+0x26>
   2260c:	6823      	ldr	r3, [r4, #0]
   2260e:	42ab      	cmp	r3, r5
   22610:	d00d      	beq.n	2262e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   22612:	3410      	adds	r4, #16
   22614:	e7ef      	b.n	225f6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   22616:	4620      	mov	r0, r4
   22618:	f7ff ffd2 	bl	225c0 <z_device_ready>
   2261c:	b908      	cbnz	r0, 22622 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   2261e:	3410      	adds	r4, #16
   22620:	e7ec      	b.n	225fc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   22622:	4628      	mov	r0, r5
   22624:	6821      	ldr	r1, [r4, #0]
   22626:	f7ea fb07 	bl	cc38 <strcmp>
   2262a:	2800      	cmp	r0, #0
   2262c:	d1f7      	bne.n	2261e <z_impl_device_get_binding+0x32>
}
   2262e:	4620      	mov	r0, r4
   22630:	bd70      	pop	{r4, r5, r6, pc}
   22632:	bf00      	nop
   22634:	20020ae0 	.word	0x20020ae0
   22638:	20020a60 	.word	0x20020a60

0002263c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   2263c:	4b01      	ldr	r3, [pc, #4]	; (22644 <z_impl_z_errno+0x8>)
   2263e:	6898      	ldr	r0, [r3, #8]
}
   22640:	3064      	adds	r0, #100	; 0x64
   22642:	4770      	bx	lr
   22644:	20021de0 	.word	0x20021de0

00022648 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2264c:	4605      	mov	r5, r0
   2264e:	460f      	mov	r7, r1
	__asm__ volatile(
   22650:	f04f 0320 	mov.w	r3, #32
   22654:	f3ef 8811 	mrs	r8, BASEPRI
   22658:	f383 8811 	msr	BASEPRI, r3
   2265c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   22660:	f002 f94a 	bl	248f8 <z_impl_k_current_get>
   22664:	4c2a      	ldr	r4, [pc, #168]	; (22710 <z_fatal_error+0xc8>)
   22666:	4b2b      	ldr	r3, [pc, #172]	; (22714 <z_fatal_error+0xcc>)
   22668:	2d04      	cmp	r5, #4
   2266a:	eba4 0403 	sub.w	r4, r4, r3
   2266e:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   22672:	bf98      	it	ls
   22674:	4a28      	ldrls	r2, [pc, #160]	; (22718 <z_fatal_error+0xd0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22676:	ea4f 1484 	mov.w	r4, r4, lsl #6
   2267a:	f044 0301 	orr.w	r3, r4, #1
   2267e:	4606      	mov	r6, r0
	switch (reason) {
   22680:	bf94      	ite	ls
   22682:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22686:	4a25      	ldrhi	r2, [pc, #148]	; (2271c <z_fatal_error+0xd4>)
   22688:	f8ad 3000 	strh.w	r3, [sp]
   2268c:	4629      	mov	r1, r5
   2268e:	2300      	movs	r3, #0
   22690:	4823      	ldr	r0, [pc, #140]	; (22720 <z_fatal_error+0xd8>)
   22692:	f00a f97a 	bl	2c98a <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   22696:	b147      	cbz	r7, 226aa <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   22698:	69fb      	ldr	r3, [r7, #28]
   2269a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2269e:	b123      	cbz	r3, 226aa <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   226a0:	4820      	ldr	r0, [pc, #128]	; (22724 <z_fatal_error+0xdc>)
   226a2:	f044 0101 	orr.w	r1, r4, #1
   226a6:	f00a f931 	bl	2c90c <log_0>
	const char *thread_name = k_thread_name_get(thread);
   226aa:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   226ac:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   226b0:	f00c fa0c 	bl	2eacc <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   226b4:	b348      	cbz	r0, 2270a <z_fatal_error+0xc2>
   226b6:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   226b8:	4b1b      	ldr	r3, [pc, #108]	; (22728 <z_fatal_error+0xe0>)
   226ba:	2a00      	cmp	r2, #0
   226bc:	bf08      	it	eq
   226be:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   226c0:	f7f0 fc88 	bl	12fd4 <log_strdup>
   226c4:	4623      	mov	r3, r4
   226c6:	4602      	mov	r2, r0
   226c8:	4631      	mov	r1, r6
   226ca:	4818      	ldr	r0, [pc, #96]	; (2272c <z_fatal_error+0xe4>)
   226cc:	f00a f944 	bl	2c958 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   226d0:	4639      	mov	r1, r7
   226d2:	4628      	mov	r0, r5
   226d4:	f7f6 fed2 	bl	1947c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   226d8:	2d04      	cmp	r5, #4
   226da:	d10c      	bne.n	226f6 <z_fatal_error+0xae>
   226dc:	4914      	ldr	r1, [pc, #80]	; (22730 <z_fatal_error+0xe8>)
   226de:	238e      	movs	r3, #142	; 0x8e
   226e0:	4a14      	ldr	r2, [pc, #80]	; (22734 <z_fatal_error+0xec>)
   226e2:	4815      	ldr	r0, [pc, #84]	; (22738 <z_fatal_error+0xf0>)
   226e4:	f009 fec5 	bl	2c472 <printk>
   226e8:	4814      	ldr	r0, [pc, #80]	; (2273c <z_fatal_error+0xf4>)
   226ea:	f009 fec2 	bl	2c472 <printk>
   226ee:	218e      	movs	r1, #142	; 0x8e
   226f0:	4810      	ldr	r0, [pc, #64]	; (22734 <z_fatal_error+0xec>)
   226f2:	f00a f8db 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   226f6:	f388 8811 	msr	BASEPRI, r8
   226fa:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   226fe:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   22700:	b002      	add	sp, #8
   22702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22706:	f7f2 bbc9 	b.w	14e9c <z_impl_k_thread_abort>
		thread_name = "unknown";
   2270a:	4807      	ldr	r0, [pc, #28]	; (22728 <z_fatal_error+0xe0>)
   2270c:	e7d8      	b.n	226c0 <z_fatal_error+0x78>
   2270e:	bf00      	nop
   22710:	0002f0b4 	.word	0x0002f0b4
   22714:	0002f034 	.word	0x0002f034
   22718:	0002f94c 	.word	0x0002f94c
   2271c:	00032ce2 	.word	0x00032ce2
   22720:	00032cf8 	.word	0x00032cf8
   22724:	00032d20 	.word	0x00032d20
   22728:	00032cf0 	.word	0x00032cf0
   2272c:	00032d41 	.word	0x00032d41
   22730:	00032d7b 	.word	0x00032d7b
   22734:	00032d59 	.word	0x00032d59
   22738:	0003049a 	.word	0x0003049a
   2273c:	00032d98 	.word	0x00032d98

00022740 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   22740:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   22742:	4d0b      	ldr	r5, [pc, #44]	; (22770 <idle+0x30>)
	__asm__ volatile(
   22744:	f04f 0220 	mov.w	r2, #32
   22748:	f3ef 8311 	mrs	r3, BASEPRI
   2274c:	f382 8811 	msr	BASEPRI, r2
   22750:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   22754:	f002 fd3c 	bl	251d0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   22758:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   2275a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2275c:	2802      	cmp	r0, #2
   2275e:	bfd8      	it	le
   22760:	4608      	movle	r0, r1
   22762:	f002 fd7d 	bl	25260 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   22766:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   22768:	f7f2 f81c 	bl	147a4 <arch_cpu_idle>
}
   2276c:	e7ea      	b.n	22744 <idle+0x4>
   2276e:	bf00      	nop
   22770:	20021de0 	.word	0x20021de0

00022774 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   22774:	4802      	ldr	r0, [pc, #8]	; (22780 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   22776:	4a03      	ldr	r2, [pc, #12]	; (22784 <z_bss_zero+0x10>)
   22778:	2100      	movs	r1, #0
   2277a:	1a12      	subs	r2, r2, r0
   2277c:	f003 be5c 	b.w	26438 <memset>
   22780:	20020cd8 	.word	0x20020cd8
   22784:	20026434 	.word	0x20026434

00022788 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   22788:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2278a:	4806      	ldr	r0, [pc, #24]	; (227a4 <z_data_copy+0x1c>)
   2278c:	4a06      	ldr	r2, [pc, #24]	; (227a8 <z_data_copy+0x20>)
   2278e:	4907      	ldr	r1, [pc, #28]	; (227ac <z_data_copy+0x24>)
   22790:	1a12      	subs	r2, r2, r0
   22792:	f7ea f9db 	bl	cb4c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2279a:	4a05      	ldr	r2, [pc, #20]	; (227b0 <z_data_copy+0x28>)
   2279c:	4905      	ldr	r1, [pc, #20]	; (227b4 <z_data_copy+0x2c>)
   2279e:	4806      	ldr	r0, [pc, #24]	; (227b8 <z_data_copy+0x30>)
   227a0:	f7ea b9d4 	b.w	cb4c <memcpy>
   227a4:	20020000 	.word	0x20020000
   227a8:	20020cd4 	.word	0x20020cd4
   227ac:	00033450 	.word	0x00033450
   227b0:	00000000 	.word	0x00000000
   227b4:	00033450 	.word	0x00033450
   227b8:	20020000 	.word	0x20020000

000227bc <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   227bc:	2201      	movs	r2, #1
{
   227be:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   227c0:	4b0b      	ldr	r3, [pc, #44]	; (227f0 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   227c2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   227c4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   227c6:	f7ff fed3 	bl	22570 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   227ca:	4a0a      	ldr	r2, [pc, #40]	; (227f4 <bg_thread_main+0x38>)
   227cc:	490a      	ldr	r1, [pc, #40]	; (227f8 <bg_thread_main+0x3c>)
   227ce:	480b      	ldr	r0, [pc, #44]	; (227fc <bg_thread_main+0x40>)
   227d0:	f009 fe4f 	bl	2c472 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   227d4:	2003      	movs	r0, #3
   227d6:	f7ff fecb 	bl	22570 <z_sys_init_run_level>

	z_init_static_threads();
   227da:	f002 fa23 	bl	24c24 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   227de:	f7ef f9f9 	bl	11bd4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   227e2:	4a07      	ldr	r2, [pc, #28]	; (22800 <bg_thread_main+0x44>)
   227e4:	7b13      	ldrb	r3, [r2, #12]
   227e6:	f023 0301 	bic.w	r3, r3, #1
   227ea:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   227ec:	bd08      	pop	{r3, pc}
   227ee:	bf00      	nop
   227f0:	200262a1 	.word	0x200262a1
   227f4:	00030ac9 	.word	0x00030ac9
   227f8:	00032e17 	.word	0x00032e17
   227fc:	00032e23 	.word	0x00032e23
   22800:	20021280 	.word	0x20021280

00022804 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   22804:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   22808:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2280a:	f7f0 fb21 	bl	12e50 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   2280e:	4b34      	ldr	r3, [pc, #208]	; (228e0 <z_cstart+0xdc>)
	uint32_t msp =
   22810:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   22814:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   22818:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2281c:	2400      	movs	r4, #0
   2281e:	23e0      	movs	r3, #224	; 0xe0
   22820:	4d30      	ldr	r5, [pc, #192]	; (228e4 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22822:	f04f 0b01 	mov.w	fp, #1
   22826:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2282a:	77ec      	strb	r4, [r5, #31]
   2282c:	762c      	strb	r4, [r5, #24]
   2282e:	766c      	strb	r4, [r5, #25]
   22830:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   22832:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   22834:	4e2c      	ldr	r6, [pc, #176]	; (228e8 <z_cstart+0xe4>)
   22836:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2283a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2283c:	f7f2 faf6 	bl	14e2c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   22840:	f7f1 ffaa 	bl	14798 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   22844:	f04f 33ff 	mov.w	r3, #4294967295
   22848:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2284a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   2284c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   22850:	4d26      	ldr	r5, [pc, #152]	; (228ec <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   22852:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   22856:	ab06      	add	r3, sp, #24
   22858:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2285a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   2285c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   22860:	f7ff fe86 	bl	22570 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   22864:	2001      	movs	r0, #1
   22866:	f7ff fe83 	bl	22570 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2286a:	f8df a098 	ldr.w	sl, [pc, #152]	; 22904 <z_cstart+0x100>
	z_sched_init();
   2286e:	f001 feb9 	bl	245e4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22872:	4b1f      	ldr	r3, [pc, #124]	; (228f0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   22874:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22876:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2287a:	491e      	ldr	r1, [pc, #120]	; (228f4 <z_cstart+0xf0>)
   2287c:	9305      	str	r3, [sp, #20]
   2287e:	4630      	mov	r0, r6
   22880:	4653      	mov	r3, sl
   22882:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   22886:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2288a:	9400      	str	r4, [sp, #0]
   2288c:	f002 f920 	bl	24ad0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22890:	7b73      	ldrb	r3, [r6, #13]
   22892:	4680      	mov	r8, r0
   22894:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   22898:	4630      	mov	r0, r6
   2289a:	7373      	strb	r3, [r6, #13]
   2289c:	f001 f9c4 	bl	23c28 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   228a0:	230f      	movs	r3, #15
   228a2:	4f15      	ldr	r7, [pc, #84]	; (228f8 <z_cstart+0xf4>)
   228a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   228a8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   228ac:	4913      	ldr	r1, [pc, #76]	; (228fc <z_cstart+0xf8>)
   228ae:	4b14      	ldr	r3, [pc, #80]	; (22900 <z_cstart+0xfc>)
   228b0:	4638      	mov	r0, r7
   228b2:	e9cd b404 	strd	fp, r4, [sp, #16]
   228b6:	e9cd 4400 	strd	r4, r4, [sp]
   228ba:	f002 f909 	bl	24ad0 <z_setup_new_thread>
   228be:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   228c0:	4652      	mov	r2, sl
   228c2:	f023 0304 	bic.w	r3, r3, #4
   228c6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   228c8:	f105 0318 	add.w	r3, r5, #24
   228cc:	4641      	mov	r1, r8
   228ce:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   228d0:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   228d4:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   228d6:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   228d8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   228dc:	f7f1 ff36 	bl	1474c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   228e0:	20029478 	.word	0x20029478
   228e4:	e000ed00 	.word	0xe000ed00
   228e8:	20021280 	.word	0x20021280
   228ec:	20021de0 	.word	0x20021de0
   228f0:	00032e4a 	.word	0x00032e4a
   228f4:	20028338 	.word	0x20028338
   228f8:	200211b8 	.word	0x200211b8
   228fc:	20029338 	.word	0x20029338
   22900:	00022741 	.word	0x00022741
   22904:	000227bd 	.word	0x000227bd

00022908 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   22908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2290a:	4d0f      	ldr	r5, [pc, #60]	; (22948 <statics_init+0x40>)
   2290c:	4c0f      	ldr	r4, [pc, #60]	; (2294c <statics_init+0x44>)
   2290e:	462f      	mov	r7, r5
   22910:	4e0f      	ldr	r6, [pc, #60]	; (22950 <statics_init+0x48>)
   22912:	42ac      	cmp	r4, r5
   22914:	d90c      	bls.n	22930 <statics_init+0x28>
   22916:	490f      	ldr	r1, [pc, #60]	; (22954 <statics_init+0x4c>)
   22918:	2315      	movs	r3, #21
   2291a:	4632      	mov	r2, r6
   2291c:	480e      	ldr	r0, [pc, #56]	; (22958 <statics_init+0x50>)
   2291e:	f009 fda8 	bl	2c472 <printk>
   22922:	480e      	ldr	r0, [pc, #56]	; (2295c <statics_init+0x54>)
   22924:	f009 fda5 	bl	2c472 <printk>
   22928:	2115      	movs	r1, #21
   2292a:	4630      	mov	r0, r6
   2292c:	f009 ffbe 	bl	2c8ac <assert_post_action>
   22930:	42bc      	cmp	r4, r7
   22932:	d301      	bcc.n	22938 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   22934:	2000      	movs	r0, #0
   22936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   22938:	4620      	mov	r0, r4
   2293a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2293e:	f00b fffc 	bl	2e93a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   22942:	3418      	adds	r4, #24
   22944:	e7e5      	b.n	22912 <statics_init+0xa>
   22946:	bf00      	nop
   22948:	20020b68 	.word	0x20020b68
   2294c:	20020b50 	.word	0x20020b50
   22950:	00032e52 	.word	0x00032e52
   22954:	00032e74 	.word	0x00032e74
   22958:	0003049a 	.word	0x0003049a
   2295c:	00030b45 	.word	0x00030b45

00022960 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   22960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22964:	4606      	mov	r6, r0
   22966:	b087      	sub	sp, #28
   22968:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2296a:	4610      	mov	r0, r2
   2296c:	4619      	mov	r1, r3
{
   2296e:	4690      	mov	r8, r2
   22970:	4699      	mov	r9, r3
	int64_t now, end = z_timeout_end_calc(timeout);
   22972:	f00c f917 	bl	2eba4 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22976:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2297a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2297e:	f04f 0320 	mov.w	r3, #32
   22982:	f3ef 8511 	mrs	r5, BASEPRI
   22986:	f383 8811 	msr	BASEPRI, r3
   2298a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2298e:	4620      	mov	r0, r4
   22990:	f002 f9d8 	bl	24d44 <z_spin_lock_valid>
   22994:	b968      	cbnz	r0, 229b2 <k_heap_alloc+0x52>
   22996:	235c      	movs	r3, #92	; 0x5c
   22998:	4a3f      	ldr	r2, [pc, #252]	; (22a98 <k_heap_alloc+0x138>)
   2299a:	4940      	ldr	r1, [pc, #256]	; (22a9c <k_heap_alloc+0x13c>)
   2299c:	4840      	ldr	r0, [pc, #256]	; (22aa0 <k_heap_alloc+0x140>)
   2299e:	f009 fd68 	bl	2c472 <printk>
   229a2:	4621      	mov	r1, r4
   229a4:	483f      	ldr	r0, [pc, #252]	; (22aa4 <k_heap_alloc+0x144>)
   229a6:	f009 fd64 	bl	2c472 <printk>
   229aa:	215c      	movs	r1, #92	; 0x5c
   229ac:	483a      	ldr	r0, [pc, #232]	; (22a98 <k_heap_alloc+0x138>)
   229ae:	f009 ff7d 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   229b2:	4620      	mov	r0, r4
   229b4:	f002 f9e4 	bl	24d80 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   229b8:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   229bc:	b17b      	cbz	r3, 229de <k_heap_alloc+0x7e>
   229be:	ea58 0309 	orrs.w	r3, r8, r9
   229c2:	d00c      	beq.n	229de <k_heap_alloc+0x7e>
   229c4:	4938      	ldr	r1, [pc, #224]	; (22aa8 <k_heap_alloc+0x148>)
   229c6:	2323      	movs	r3, #35	; 0x23
   229c8:	4a38      	ldr	r2, [pc, #224]	; (22aac <k_heap_alloc+0x14c>)
   229ca:	4835      	ldr	r0, [pc, #212]	; (22aa0 <k_heap_alloc+0x140>)
   229cc:	f009 fd51 	bl	2c472 <printk>
   229d0:	4837      	ldr	r0, [pc, #220]	; (22ab0 <k_heap_alloc+0x150>)
   229d2:	f009 fd4e 	bl	2c472 <printk>
   229d6:	2123      	movs	r1, #35	; 0x23
   229d8:	4834      	ldr	r0, [pc, #208]	; (22aac <k_heap_alloc+0x14c>)
   229da:	f009 ff67 	bl	2c8ac <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   229de:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 22a98 <k_heap_alloc+0x138>
   229e2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 22a9c <k_heap_alloc+0x13c>
   229e6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 22aa0 <k_heap_alloc+0x140>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   229ea:	4651      	mov	r1, sl
   229ec:	4630      	mov	r0, r6
   229ee:	f009 ff2e 	bl	2c84e <sys_heap_alloc>
   229f2:	4607      	mov	r7, r0

		now = z_tick_get();
   229f4:	f002 fd4e 	bl	25494 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   229f8:	b1cf      	cbz	r7, 22a2e <k_heap_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229fa:	4620      	mov	r0, r4
   229fc:	f002 f9b0 	bl	24d60 <z_spin_unlock_valid>
   22a00:	b968      	cbnz	r0, 22a1e <k_heap_alloc+0xbe>
   22a02:	2384      	movs	r3, #132	; 0x84
   22a04:	4a24      	ldr	r2, [pc, #144]	; (22a98 <k_heap_alloc+0x138>)
   22a06:	492b      	ldr	r1, [pc, #172]	; (22ab4 <k_heap_alloc+0x154>)
   22a08:	4825      	ldr	r0, [pc, #148]	; (22aa0 <k_heap_alloc+0x140>)
   22a0a:	f009 fd32 	bl	2c472 <printk>
   22a0e:	4621      	mov	r1, r4
   22a10:	4829      	ldr	r0, [pc, #164]	; (22ab8 <k_heap_alloc+0x158>)
   22a12:	f009 fd2e 	bl	2c472 <printk>
   22a16:	2184      	movs	r1, #132	; 0x84
   22a18:	481f      	ldr	r0, [pc, #124]	; (22a98 <k_heap_alloc+0x138>)
   22a1a:	f009 ff47 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   22a1e:	f385 8811 	msr	BASEPRI, r5
   22a22:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   22a26:	4638      	mov	r0, r7
   22a28:	b007      	add	sp, #28
   22a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   22a2e:	9b04      	ldr	r3, [sp, #16]
   22a30:	1a1b      	subs	r3, r3, r0
   22a32:	9302      	str	r3, [sp, #8]
   22a34:	9b05      	ldr	r3, [sp, #20]
   22a36:	eb63 0301 	sbc.w	r3, r3, r1
   22a3a:	9303      	str	r3, [sp, #12]
   22a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22a40:	2a01      	cmp	r2, #1
   22a42:	f173 0300 	sbcs.w	r3, r3, #0
   22a46:	dbd8      	blt.n	229fa <k_heap_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22a4c:	4629      	mov	r1, r5
   22a4e:	e9cd 2300 	strd	r2, r3, [sp]
   22a52:	4620      	mov	r0, r4
   22a54:	f106 020c 	add.w	r2, r6, #12
   22a58:	f001 fc78 	bl	2434c <z_pend_curr>
	__asm__ volatile(
   22a5c:	f04f 0320 	mov.w	r3, #32
   22a60:	f3ef 8511 	mrs	r5, BASEPRI
   22a64:	f383 8811 	msr	BASEPRI, r3
   22a68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a6c:	4620      	mov	r0, r4
   22a6e:	f002 f969 	bl	24d44 <z_spin_lock_valid>
   22a72:	b968      	cbnz	r0, 22a90 <k_heap_alloc+0x130>
   22a74:	235c      	movs	r3, #92	; 0x5c
   22a76:	4642      	mov	r2, r8
   22a78:	4649      	mov	r1, r9
   22a7a:	4658      	mov	r0, fp
   22a7c:	f009 fcf9 	bl	2c472 <printk>
   22a80:	4621      	mov	r1, r4
   22a82:	4808      	ldr	r0, [pc, #32]	; (22aa4 <k_heap_alloc+0x144>)
   22a84:	f009 fcf5 	bl	2c472 <printk>
   22a88:	215c      	movs	r1, #92	; 0x5c
   22a8a:	4640      	mov	r0, r8
   22a8c:	f009 ff0e 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   22a90:	4620      	mov	r0, r4
   22a92:	f002 f975 	bl	24d80 <z_spin_lock_set_owner>
	return k;
   22a96:	e7a8      	b.n	229ea <k_heap_alloc+0x8a>
   22a98:	0003056a 	.word	0x0003056a
   22a9c:	000305bc 	.word	0x000305bc
   22aa0:	0003049a 	.word	0x0003049a
   22aa4:	000305d1 	.word	0x000305d1
   22aa8:	00032e8a 	.word	0x00032e8a
   22aac:	00032e52 	.word	0x00032e52
   22ab0:	00030ac7 	.word	0x00030ac7
   22ab4:	00030590 	.word	0x00030590
   22ab8:	000305a7 	.word	0x000305a7

00022abc <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22abe:	4605      	mov	r5, r0
   22ac0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22ac2:	f100 0414 	add.w	r4, r0, #20
   22ac6:	f04f 0320 	mov.w	r3, #32
   22aca:	f3ef 8711 	mrs	r7, BASEPRI
   22ace:	f383 8811 	msr	BASEPRI, r3
   22ad2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ad6:	4620      	mov	r0, r4
   22ad8:	f002 f934 	bl	24d44 <z_spin_lock_valid>
   22adc:	b968      	cbnz	r0, 22afa <k_heap_free+0x3e>
   22ade:	235c      	movs	r3, #92	; 0x5c
   22ae0:	4a1a      	ldr	r2, [pc, #104]	; (22b4c <k_heap_free+0x90>)
   22ae2:	491b      	ldr	r1, [pc, #108]	; (22b50 <k_heap_free+0x94>)
   22ae4:	481b      	ldr	r0, [pc, #108]	; (22b54 <k_heap_free+0x98>)
   22ae6:	f009 fcc4 	bl	2c472 <printk>
   22aea:	4621      	mov	r1, r4
   22aec:	481a      	ldr	r0, [pc, #104]	; (22b58 <k_heap_free+0x9c>)
   22aee:	f009 fcc0 	bl	2c472 <printk>
   22af2:	215c      	movs	r1, #92	; 0x5c
   22af4:	4815      	ldr	r0, [pc, #84]	; (22b4c <k_heap_free+0x90>)
   22af6:	f009 fed9 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   22afa:	4620      	mov	r0, r4
   22afc:	f002 f940 	bl	24d80 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   22b00:	4628      	mov	r0, r5
   22b02:	4631      	mov	r1, r6
   22b04:	f7ef ffea 	bl	12adc <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22b08:	f105 000c 	add.w	r0, r5, #12
   22b0c:	f00b ffb3 	bl	2ea76 <z_unpend_all>
   22b10:	b128      	cbz	r0, 22b1e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   22b12:	4639      	mov	r1, r7
   22b14:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   22b1a:	f000 be61 	b.w	237e0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b1e:	4620      	mov	r0, r4
   22b20:	f002 f91e 	bl	24d60 <z_spin_unlock_valid>
   22b24:	b968      	cbnz	r0, 22b42 <k_heap_free+0x86>
   22b26:	2384      	movs	r3, #132	; 0x84
   22b28:	4a08      	ldr	r2, [pc, #32]	; (22b4c <k_heap_free+0x90>)
   22b2a:	490c      	ldr	r1, [pc, #48]	; (22b5c <k_heap_free+0xa0>)
   22b2c:	4809      	ldr	r0, [pc, #36]	; (22b54 <k_heap_free+0x98>)
   22b2e:	f009 fca0 	bl	2c472 <printk>
   22b32:	4621      	mov	r1, r4
   22b34:	480a      	ldr	r0, [pc, #40]	; (22b60 <k_heap_free+0xa4>)
   22b36:	f009 fc9c 	bl	2c472 <printk>
   22b3a:	2184      	movs	r1, #132	; 0x84
   22b3c:	4803      	ldr	r0, [pc, #12]	; (22b4c <k_heap_free+0x90>)
   22b3e:	f009 feb5 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   22b42:	f387 8811 	msr	BASEPRI, r7
   22b46:	f3bf 8f6f 	isb	sy
}
   22b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22b4c:	0003056a 	.word	0x0003056a
   22b50:	000305bc 	.word	0x000305bc
   22b54:	0003049a 	.word	0x0003049a
   22b58:	000305d1 	.word	0x000305d1
   22b5c:	00030590 	.word	0x00030590
   22b60:	000305a7 	.word	0x000305a7

00022b64 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   22b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22b68:	4d16      	ldr	r5, [pc, #88]	; (22bc4 <init_mem_slab_module+0x60>)
   22b6a:	4c17      	ldr	r4, [pc, #92]	; (22bc8 <init_mem_slab_module+0x64>)
   22b6c:	46a8      	mov	r8, r5
   22b6e:	4e17      	ldr	r6, [pc, #92]	; (22bcc <init_mem_slab_module+0x68>)
   22b70:	42ac      	cmp	r4, r5
   22b72:	d90c      	bls.n	22b8e <init_mem_slab_module+0x2a>
   22b74:	4916      	ldr	r1, [pc, #88]	; (22bd0 <init_mem_slab_module+0x6c>)
   22b76:	2342      	movs	r3, #66	; 0x42
   22b78:	4632      	mov	r2, r6
   22b7a:	4816      	ldr	r0, [pc, #88]	; (22bd4 <init_mem_slab_module+0x70>)
   22b7c:	f009 fc79 	bl	2c472 <printk>
   22b80:	4815      	ldr	r0, [pc, #84]	; (22bd8 <init_mem_slab_module+0x74>)
   22b82:	f009 fc76 	bl	2c472 <printk>
   22b86:	2142      	movs	r1, #66	; 0x42
   22b88:	4630      	mov	r0, r6
   22b8a:	f009 fe8f 	bl	2c8ac <assert_post_action>
   22b8e:	4544      	cmp	r4, r8
   22b90:	d302      	bcc.n	22b98 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   22b92:	2000      	movs	r0, #0
	return rc;
}
   22b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22b98:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   22b9c:	ea41 0302 	orr.w	r3, r1, r2
   22ba0:	f013 0303 	ands.w	r3, r3, #3
   22ba4:	d10b      	bne.n	22bbe <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   22ba6:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   22ba8:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22baa:	4283      	cmp	r3, r0
   22bac:	d101      	bne.n	22bb2 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22bae:	341c      	adds	r4, #28
   22bb0:	e7de      	b.n	22b70 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   22bb2:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22bb4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   22bb6:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   22bb8:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
   22bba:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22bbc:	e7f5      	b.n	22baa <init_mem_slab_module+0x46>
		return -EINVAL;
   22bbe:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22bc2:	e7e7      	b.n	22b94 <init_mem_slab_module+0x30>
   22bc4:	20020b50 	.word	0x20020b50
   22bc8:	20020b50 	.word	0x20020b50
   22bcc:	00032ecf 	.word	0x00032ecf
   22bd0:	00032ef4 	.word	0x00032ef4
   22bd4:	0003049a 	.word	0x0003049a
   22bd8:	00030b45 	.word	0x00030b45

00022bdc <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   22bdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22be0:	4604      	mov	r4, r0
   22be2:	460d      	mov	r5, r1
   22be4:	4616      	mov	r6, r2
   22be6:	461f      	mov	r7, r3
	__asm__ volatile(
   22be8:	f04f 0320 	mov.w	r3, #32
   22bec:	f3ef 8811 	mrs	r8, BASEPRI
   22bf0:	f383 8811 	msr	BASEPRI, r3
   22bf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bf8:	4826      	ldr	r0, [pc, #152]	; (22c94 <k_mem_slab_alloc+0xb8>)
   22bfa:	f002 f8a3 	bl	24d44 <z_spin_lock_valid>
   22bfe:	b968      	cbnz	r0, 22c1c <k_mem_slab_alloc+0x40>
   22c00:	235c      	movs	r3, #92	; 0x5c
   22c02:	4a25      	ldr	r2, [pc, #148]	; (22c98 <k_mem_slab_alloc+0xbc>)
   22c04:	4925      	ldr	r1, [pc, #148]	; (22c9c <k_mem_slab_alloc+0xc0>)
   22c06:	4826      	ldr	r0, [pc, #152]	; (22ca0 <k_mem_slab_alloc+0xc4>)
   22c08:	f009 fc33 	bl	2c472 <printk>
   22c0c:	4921      	ldr	r1, [pc, #132]	; (22c94 <k_mem_slab_alloc+0xb8>)
   22c0e:	4825      	ldr	r0, [pc, #148]	; (22ca4 <k_mem_slab_alloc+0xc8>)
   22c10:	f009 fc2f 	bl	2c472 <printk>
   22c14:	215c      	movs	r1, #92	; 0x5c
   22c16:	4820      	ldr	r0, [pc, #128]	; (22c98 <k_mem_slab_alloc+0xbc>)
   22c18:	f009 fe48 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   22c1c:	481d      	ldr	r0, [pc, #116]	; (22c94 <k_mem_slab_alloc+0xb8>)
   22c1e:	f002 f8af 	bl	24d80 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   22c22:	6963      	ldr	r3, [r4, #20]
   22c24:	b1eb      	cbz	r3, 22c62 <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
   22c26:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   22c28:	681b      	ldr	r3, [r3, #0]
   22c2a:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   22c2c:	69a3      	ldr	r3, [r4, #24]
   22c2e:	3301      	adds	r3, #1
   22c30:	61a3      	str	r3, [r4, #24]
		result = 0;
   22c32:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c34:	4817      	ldr	r0, [pc, #92]	; (22c94 <k_mem_slab_alloc+0xb8>)
   22c36:	f002 f893 	bl	24d60 <z_spin_unlock_valid>
   22c3a:	b968      	cbnz	r0, 22c58 <k_mem_slab_alloc+0x7c>
   22c3c:	2384      	movs	r3, #132	; 0x84
   22c3e:	4a16      	ldr	r2, [pc, #88]	; (22c98 <k_mem_slab_alloc+0xbc>)
   22c40:	4919      	ldr	r1, [pc, #100]	; (22ca8 <k_mem_slab_alloc+0xcc>)
   22c42:	4817      	ldr	r0, [pc, #92]	; (22ca0 <k_mem_slab_alloc+0xc4>)
   22c44:	f009 fc15 	bl	2c472 <printk>
   22c48:	4912      	ldr	r1, [pc, #72]	; (22c94 <k_mem_slab_alloc+0xb8>)
   22c4a:	4818      	ldr	r0, [pc, #96]	; (22cac <k_mem_slab_alloc+0xd0>)
   22c4c:	f009 fc11 	bl	2c472 <printk>
   22c50:	2184      	movs	r1, #132	; 0x84
   22c52:	4811      	ldr	r0, [pc, #68]	; (22c98 <k_mem_slab_alloc+0xbc>)
   22c54:	f009 fe2a 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   22c58:	f388 8811 	msr	BASEPRI, r8
   22c5c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   22c60:	e013      	b.n	22c8a <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22c62:	ea56 0207 	orrs.w	r2, r6, r7
   22c66:	d103      	bne.n	22c70 <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
   22c68:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   22c6c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   22c6e:	e7e1      	b.n	22c34 <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   22c70:	4622      	mov	r2, r4
   22c72:	4641      	mov	r1, r8
   22c74:	e9cd 6700 	strd	r6, r7, [sp]
   22c78:	4806      	ldr	r0, [pc, #24]	; (22c94 <k_mem_slab_alloc+0xb8>)
   22c7a:	f001 fb67 	bl	2434c <z_pend_curr>
		if (result == 0) {
   22c7e:	4604      	mov	r4, r0
   22c80:	b918      	cbnz	r0, 22c8a <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
   22c82:	4b0b      	ldr	r3, [pc, #44]	; (22cb0 <k_mem_slab_alloc+0xd4>)
   22c84:	689b      	ldr	r3, [r3, #8]
   22c86:	695b      	ldr	r3, [r3, #20]
   22c88:	602b      	str	r3, [r5, #0]
}
   22c8a:	4620      	mov	r0, r4
   22c8c:	b002      	add	sp, #8
   22c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c92:	bf00      	nop
   22c94:	20021dd8 	.word	0x20021dd8
   22c98:	0003056a 	.word	0x0003056a
   22c9c:	000305bc 	.word	0x000305bc
   22ca0:	0003049a 	.word	0x0003049a
   22ca4:	000305d1 	.word	0x000305d1
   22ca8:	00030590 	.word	0x00030590
   22cac:	000305a7 	.word	0x000305a7
   22cb0:	20021de0 	.word	0x20021de0

00022cb4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   22cb4:	b570      	push	{r4, r5, r6, lr}
   22cb6:	4604      	mov	r4, r0
   22cb8:	460d      	mov	r5, r1
	__asm__ volatile(
   22cba:	f04f 0320 	mov.w	r3, #32
   22cbe:	f3ef 8611 	mrs	r6, BASEPRI
   22cc2:	f383 8811 	msr	BASEPRI, r3
   22cc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cca:	4822      	ldr	r0, [pc, #136]	; (22d54 <k_mem_slab_free+0xa0>)
   22ccc:	f002 f83a 	bl	24d44 <z_spin_lock_valid>
   22cd0:	b968      	cbnz	r0, 22cee <k_mem_slab_free+0x3a>
   22cd2:	235c      	movs	r3, #92	; 0x5c
   22cd4:	4a20      	ldr	r2, [pc, #128]	; (22d58 <k_mem_slab_free+0xa4>)
   22cd6:	4921      	ldr	r1, [pc, #132]	; (22d5c <k_mem_slab_free+0xa8>)
   22cd8:	4821      	ldr	r0, [pc, #132]	; (22d60 <k_mem_slab_free+0xac>)
   22cda:	f009 fbca 	bl	2c472 <printk>
   22cde:	491d      	ldr	r1, [pc, #116]	; (22d54 <k_mem_slab_free+0xa0>)
   22ce0:	4820      	ldr	r0, [pc, #128]	; (22d64 <k_mem_slab_free+0xb0>)
   22ce2:	f009 fbc6 	bl	2c472 <printk>
   22ce6:	215c      	movs	r1, #92	; 0x5c
   22ce8:	481b      	ldr	r0, [pc, #108]	; (22d58 <k_mem_slab_free+0xa4>)
   22cea:	f009 fddf 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   22cee:	4819      	ldr	r0, [pc, #100]	; (22d54 <k_mem_slab_free+0xa0>)
   22cf0:	f002 f846 	bl	24d80 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22cf4:	4620      	mov	r0, r4
   22cf6:	f001 fbef 	bl	244d8 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   22cfa:	b158      	cbz	r0, 22d14 <k_mem_slab_free+0x60>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   22cfc:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   22cfe:	682a      	ldr	r2, [r5, #0]
   22d00:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22d02:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   22d04:	f000 ff90 	bl	23c28 <z_ready_thread>
		z_reschedule(&lock, key);
   22d08:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   22d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   22d0e:	4811      	ldr	r0, [pc, #68]	; (22d54 <k_mem_slab_free+0xa0>)
   22d10:	f000 bd66 	b.w	237e0 <z_reschedule>
		**(char ***)mem = slab->free_list;
   22d14:	682b      	ldr	r3, [r5, #0]
   22d16:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d18:	480e      	ldr	r0, [pc, #56]	; (22d54 <k_mem_slab_free+0xa0>)
   22d1a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   22d1c:	682b      	ldr	r3, [r5, #0]
   22d1e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   22d20:	69a3      	ldr	r3, [r4, #24]
   22d22:	3b01      	subs	r3, #1
   22d24:	61a3      	str	r3, [r4, #24]
   22d26:	f002 f81b 	bl	24d60 <z_spin_unlock_valid>
   22d2a:	b968      	cbnz	r0, 22d48 <k_mem_slab_free+0x94>
   22d2c:	2384      	movs	r3, #132	; 0x84
   22d2e:	4a0a      	ldr	r2, [pc, #40]	; (22d58 <k_mem_slab_free+0xa4>)
   22d30:	490d      	ldr	r1, [pc, #52]	; (22d68 <k_mem_slab_free+0xb4>)
   22d32:	480b      	ldr	r0, [pc, #44]	; (22d60 <k_mem_slab_free+0xac>)
   22d34:	f009 fb9d 	bl	2c472 <printk>
   22d38:	4906      	ldr	r1, [pc, #24]	; (22d54 <k_mem_slab_free+0xa0>)
   22d3a:	480c      	ldr	r0, [pc, #48]	; (22d6c <k_mem_slab_free+0xb8>)
   22d3c:	f009 fb99 	bl	2c472 <printk>
   22d40:	2184      	movs	r1, #132	; 0x84
   22d42:	4805      	ldr	r0, [pc, #20]	; (22d58 <k_mem_slab_free+0xa4>)
   22d44:	f009 fdb2 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   22d48:	f386 8811 	msr	BASEPRI, r6
   22d4c:	f3bf 8f6f 	isb	sy
}
   22d50:	bd70      	pop	{r4, r5, r6, pc}
   22d52:	bf00      	nop
   22d54:	20021dd8 	.word	0x20021dd8
   22d58:	0003056a 	.word	0x0003056a
   22d5c:	000305bc 	.word	0x000305bc
   22d60:	0003049a 	.word	0x0003049a
   22d64:	000305d1 	.word	0x000305d1
   22d68:	00030590 	.word	0x00030590
   22d6c:	000305a7 	.word	0x000305a7

00022d70 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   22d70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22d74:	4604      	mov	r4, r0
   22d76:	468a      	mov	sl, r1
   22d78:	4690      	mov	r8, r2
   22d7a:	4699      	mov	r9, r3
   22d7c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   22d80:	b17b      	cbz	r3, 22da2 <z_impl_k_msgq_put+0x32>
   22d82:	ea58 0309 	orrs.w	r3, r8, r9
   22d86:	d00c      	beq.n	22da2 <z_impl_k_msgq_put+0x32>
   22d88:	4940      	ldr	r1, [pc, #256]	; (22e8c <z_impl_k_msgq_put+0x11c>)
   22d8a:	2376      	movs	r3, #118	; 0x76
   22d8c:	4a40      	ldr	r2, [pc, #256]	; (22e90 <z_impl_k_msgq_put+0x120>)
   22d8e:	4841      	ldr	r0, [pc, #260]	; (22e94 <z_impl_k_msgq_put+0x124>)
   22d90:	f009 fb6f 	bl	2c472 <printk>
   22d94:	4840      	ldr	r0, [pc, #256]	; (22e98 <z_impl_k_msgq_put+0x128>)
   22d96:	f009 fb6c 	bl	2c472 <printk>
   22d9a:	2176      	movs	r1, #118	; 0x76
   22d9c:	483c      	ldr	r0, [pc, #240]	; (22e90 <z_impl_k_msgq_put+0x120>)
   22d9e:	f009 fd85 	bl	2c8ac <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   22da2:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   22da6:	f04f 0320 	mov.w	r3, #32
   22daa:	f3ef 8711 	mrs	r7, BASEPRI
   22dae:	f383 8811 	msr	BASEPRI, r3
   22db2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22db6:	4628      	mov	r0, r5
   22db8:	f001 ffc4 	bl	24d44 <z_spin_lock_valid>
   22dbc:	b968      	cbnz	r0, 22dda <z_impl_k_msgq_put+0x6a>
   22dbe:	235c      	movs	r3, #92	; 0x5c
   22dc0:	4a36      	ldr	r2, [pc, #216]	; (22e9c <z_impl_k_msgq_put+0x12c>)
   22dc2:	4937      	ldr	r1, [pc, #220]	; (22ea0 <z_impl_k_msgq_put+0x130>)
   22dc4:	4833      	ldr	r0, [pc, #204]	; (22e94 <z_impl_k_msgq_put+0x124>)
   22dc6:	f009 fb54 	bl	2c472 <printk>
   22dca:	4629      	mov	r1, r5
   22dcc:	4835      	ldr	r0, [pc, #212]	; (22ea4 <z_impl_k_msgq_put+0x134>)
   22dce:	f009 fb50 	bl	2c472 <printk>
   22dd2:	215c      	movs	r1, #92	; 0x5c
   22dd4:	4831      	ldr	r0, [pc, #196]	; (22e9c <z_impl_k_msgq_put+0x12c>)
   22dd6:	f009 fd69 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   22dda:	4628      	mov	r0, r5
   22ddc:	f001 ffd0 	bl	24d80 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   22de0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   22de2:	6923      	ldr	r3, [r4, #16]
   22de4:	429a      	cmp	r2, r3
   22de6:	d23d      	bcs.n	22e64 <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22de8:	4620      	mov	r0, r4
   22dea:	f001 fb75 	bl	244d8 <z_unpend_first_thread>
   22dee:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   22df0:	4606      	mov	r6, r0
   22df2:	68e2      	ldr	r2, [r4, #12]
   22df4:	b178      	cbz	r0, 22e16 <z_impl_k_msgq_put+0xa6>
   22df6:	2400      	movs	r4, #0
   22df8:	6940      	ldr	r0, [r0, #20]
   22dfa:	f7e9 fea7 	bl	cb4c <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22dfe:	4630      	mov	r0, r6
   22e00:	67f4      	str	r4, [r6, #124]	; 0x7c
   22e02:	f000 ff11 	bl	23c28 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   22e06:	4639      	mov	r1, r7
   22e08:	4628      	mov	r0, r5
   22e0a:	f000 fce9 	bl	237e0 <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22e0e:	4620      	mov	r0, r4
   22e10:	b002      	add	sp, #8
   22e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22e16:	6a20      	ldr	r0, [r4, #32]
   22e18:	f7e9 fe98 	bl	cb4c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   22e1c:	6a23      	ldr	r3, [r4, #32]
   22e1e:	68e2      	ldr	r2, [r4, #12]
   22e20:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22e22:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   22e24:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   22e26:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22e28:	bf04      	itt	eq
   22e2a:	6963      	ldreq	r3, [r4, #20]
   22e2c:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   22e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22e30:	3301      	adds	r3, #1
   22e32:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   22e34:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e36:	4628      	mov	r0, r5
   22e38:	f001 ff92 	bl	24d60 <z_spin_unlock_valid>
   22e3c:	b968      	cbnz	r0, 22e5a <z_impl_k_msgq_put+0xea>
   22e3e:	2384      	movs	r3, #132	; 0x84
   22e40:	4a16      	ldr	r2, [pc, #88]	; (22e9c <z_impl_k_msgq_put+0x12c>)
   22e42:	4919      	ldr	r1, [pc, #100]	; (22ea8 <z_impl_k_msgq_put+0x138>)
   22e44:	4813      	ldr	r0, [pc, #76]	; (22e94 <z_impl_k_msgq_put+0x124>)
   22e46:	f009 fb14 	bl	2c472 <printk>
   22e4a:	4629      	mov	r1, r5
   22e4c:	4817      	ldr	r0, [pc, #92]	; (22eac <z_impl_k_msgq_put+0x13c>)
   22e4e:	f009 fb10 	bl	2c472 <printk>
   22e52:	2184      	movs	r1, #132	; 0x84
   22e54:	4811      	ldr	r0, [pc, #68]	; (22e9c <z_impl_k_msgq_put+0x12c>)
   22e56:	f009 fd29 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   22e5a:	f387 8811 	msr	BASEPRI, r7
   22e5e:	f3bf 8f6f 	isb	sy
	return result;
   22e62:	e7d4      	b.n	22e0e <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22e64:	ea58 0309 	orrs.w	r3, r8, r9
   22e68:	d00c      	beq.n	22e84 <z_impl_k_msgq_put+0x114>
		_current->base.swap_data = (void *) data;
   22e6a:	4b11      	ldr	r3, [pc, #68]	; (22eb0 <z_impl_k_msgq_put+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22e6c:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   22e6e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22e70:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   22e72:	f8c3 a014 	str.w	sl, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22e76:	4628      	mov	r0, r5
   22e78:	e9cd 8900 	strd	r8, r9, [sp]
   22e7c:	f001 fa66 	bl	2434c <z_pend_curr>
   22e80:	4604      	mov	r4, r0
   22e82:	e7c4      	b.n	22e0e <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   22e84:	f06f 0422 	mvn.w	r4, #34	; 0x22
   22e88:	e7d5      	b.n	22e36 <z_impl_k_msgq_put+0xc6>
   22e8a:	bf00      	nop
   22e8c:	00032e8a 	.word	0x00032e8a
   22e90:	00032f11 	.word	0x00032f11
   22e94:	0003049a 	.word	0x0003049a
   22e98:	00030ac7 	.word	0x00030ac7
   22e9c:	0003056a 	.word	0x0003056a
   22ea0:	000305bc 	.word	0x000305bc
   22ea4:	000305d1 	.word	0x000305d1
   22ea8:	00030590 	.word	0x00030590
   22eac:	000305a7 	.word	0x000305a7
   22eb0:	20021de0 	.word	0x20021de0

00022eb4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   22eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22eb8:	4604      	mov	r4, r0
   22eba:	460d      	mov	r5, r1
   22ebc:	4690      	mov	r8, r2
   22ebe:	4699      	mov	r9, r3
   22ec0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   22ec4:	b17b      	cbz	r3, 22ee6 <z_impl_k_msgq_get+0x32>
   22ec6:	ea58 0309 	orrs.w	r3, r8, r9
   22eca:	d00c      	beq.n	22ee6 <z_impl_k_msgq_get+0x32>
   22ecc:	4946      	ldr	r1, [pc, #280]	; (22fe8 <z_impl_k_msgq_get+0x134>)
   22ece:	23c2      	movs	r3, #194	; 0xc2
   22ed0:	4a46      	ldr	r2, [pc, #280]	; (22fec <z_impl_k_msgq_get+0x138>)
   22ed2:	4847      	ldr	r0, [pc, #284]	; (22ff0 <z_impl_k_msgq_get+0x13c>)
   22ed4:	f009 facd 	bl	2c472 <printk>
   22ed8:	4846      	ldr	r0, [pc, #280]	; (22ff4 <z_impl_k_msgq_get+0x140>)
   22eda:	f009 faca 	bl	2c472 <printk>
   22ede:	21c2      	movs	r1, #194	; 0xc2
   22ee0:	4842      	ldr	r0, [pc, #264]	; (22fec <z_impl_k_msgq_get+0x138>)
   22ee2:	f009 fce3 	bl	2c8ac <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   22ee6:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   22eea:	f04f 0320 	mov.w	r3, #32
   22eee:	f3ef 8711 	mrs	r7, BASEPRI
   22ef2:	f383 8811 	msr	BASEPRI, r3
   22ef6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22efa:	4630      	mov	r0, r6
   22efc:	f001 ff22 	bl	24d44 <z_spin_lock_valid>
   22f00:	b968      	cbnz	r0, 22f1e <z_impl_k_msgq_get+0x6a>
   22f02:	235c      	movs	r3, #92	; 0x5c
   22f04:	4a3c      	ldr	r2, [pc, #240]	; (22ff8 <z_impl_k_msgq_get+0x144>)
   22f06:	493d      	ldr	r1, [pc, #244]	; (22ffc <z_impl_k_msgq_get+0x148>)
   22f08:	4839      	ldr	r0, [pc, #228]	; (22ff0 <z_impl_k_msgq_get+0x13c>)
   22f0a:	f009 fab2 	bl	2c472 <printk>
   22f0e:	4631      	mov	r1, r6
   22f10:	483b      	ldr	r0, [pc, #236]	; (23000 <z_impl_k_msgq_get+0x14c>)
   22f12:	f009 faae 	bl	2c472 <printk>
   22f16:	215c      	movs	r1, #92	; 0x5c
   22f18:	4837      	ldr	r0, [pc, #220]	; (22ff8 <z_impl_k_msgq_get+0x144>)
   22f1a:	f009 fcc7 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   22f1e:	4630      	mov	r0, r6
   22f20:	f001 ff2e 	bl	24d80 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   22f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22f26:	2b00      	cmp	r3, #0
   22f28:	d035      	beq.n	22f96 <z_impl_k_msgq_get+0xe2>
   22f2a:	4628      	mov	r0, r5
   22f2c:	68e2      	ldr	r2, [r4, #12]
   22f2e:	69e1      	ldr	r1, [r4, #28]
   22f30:	f7e9 fe0c 	bl	cb4c <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   22f34:	69e3      	ldr	r3, [r4, #28]
   22f36:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22f38:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   22f3a:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   22f3c:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   22f3e:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   22f40:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   22f42:	bf04      	itt	eq
   22f44:	6963      	ldreq	r3, [r4, #20]
   22f46:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   22f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22f4a:	3b01      	subs	r3, #1
   22f4c:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22f4e:	f001 fac3 	bl	244d8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   22f52:	4605      	mov	r5, r0
   22f54:	2800      	cmp	r0, #0
   22f56:	d02f      	beq.n	22fb8 <z_impl_k_msgq_get+0x104>
   22f58:	6941      	ldr	r1, [r0, #20]
   22f5a:	68e2      	ldr	r2, [r4, #12]
   22f5c:	6a20      	ldr	r0, [r4, #32]
   22f5e:	f7e9 fdf5 	bl	cb4c <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   22f62:	6a23      	ldr	r3, [r4, #32]
   22f64:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22f66:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   22f68:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22f6a:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   22f6c:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   22f6e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22f70:	bf04      	itt	eq
   22f72:	6963      	ldreq	r3, [r4, #20]
   22f74:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   22f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22f78:	3301      	adds	r3, #1
   22f7a:	6263      	str	r3, [r4, #36]	; 0x24
   22f7c:	2400      	movs	r4, #0
   22f7e:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   22f80:	f000 fe52 	bl	23c28 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   22f84:	4639      	mov	r1, r7
   22f86:	4630      	mov	r0, r6
   22f88:	f000 fc2a 	bl	237e0 <z_reschedule>
			return 0;
   22f8c:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22f8e:	4628      	mov	r0, r5
   22f90:	b003      	add	sp, #12
   22f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22f96:	ea58 0309 	orrs.w	r3, r8, r9
   22f9a:	d00b      	beq.n	22fb4 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   22f9c:	4b19      	ldr	r3, [pc, #100]	; (23004 <z_impl_k_msgq_get+0x150>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22f9e:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   22fa0:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22fa2:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   22fa4:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22fa6:	4630      	mov	r0, r6
   22fa8:	e9cd 8900 	strd	r8, r9, [sp]
   22fac:	f001 f9ce 	bl	2434c <z_pend_curr>
   22fb0:	4605      	mov	r5, r0
   22fb2:	e7ec      	b.n	22f8e <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   22fb4:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fb8:	4630      	mov	r0, r6
   22fba:	f001 fed1 	bl	24d60 <z_spin_unlock_valid>
   22fbe:	b968      	cbnz	r0, 22fdc <z_impl_k_msgq_get+0x128>
   22fc0:	2384      	movs	r3, #132	; 0x84
   22fc2:	4a0d      	ldr	r2, [pc, #52]	; (22ff8 <z_impl_k_msgq_get+0x144>)
   22fc4:	4910      	ldr	r1, [pc, #64]	; (23008 <z_impl_k_msgq_get+0x154>)
   22fc6:	480a      	ldr	r0, [pc, #40]	; (22ff0 <z_impl_k_msgq_get+0x13c>)
   22fc8:	f009 fa53 	bl	2c472 <printk>
   22fcc:	4631      	mov	r1, r6
   22fce:	480f      	ldr	r0, [pc, #60]	; (2300c <z_impl_k_msgq_get+0x158>)
   22fd0:	f009 fa4f 	bl	2c472 <printk>
   22fd4:	2184      	movs	r1, #132	; 0x84
   22fd6:	4808      	ldr	r0, [pc, #32]	; (22ff8 <z_impl_k_msgq_get+0x144>)
   22fd8:	f009 fc68 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   22fdc:	f387 8811 	msr	BASEPRI, r7
   22fe0:	f3bf 8f6f 	isb	sy
	return result;
   22fe4:	e7d3      	b.n	22f8e <z_impl_k_msgq_get+0xda>
   22fe6:	bf00      	nop
   22fe8:	00032e8a 	.word	0x00032e8a
   22fec:	00032f11 	.word	0x00032f11
   22ff0:	0003049a 	.word	0x0003049a
   22ff4:	00030ac7 	.word	0x00030ac7
   22ff8:	0003056a 	.word	0x0003056a
   22ffc:	000305bc 	.word	0x000305bc
   23000:	000305d1 	.word	0x000305d1
   23004:	20021de0 	.word	0x20021de0
   23008:	00030590 	.word	0x00030590
   2300c:	000305a7 	.word	0x000305a7

00023010 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23010:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23014:	4604      	mov	r4, r0
   23016:	4616      	mov	r6, r2
   23018:	461f      	mov	r7, r3
   2301a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2301e:	b163      	cbz	r3, 2303a <z_impl_k_mutex_lock+0x2a>
   23020:	496d      	ldr	r1, [pc, #436]	; (231d8 <z_impl_k_mutex_lock+0x1c8>)
   23022:	237d      	movs	r3, #125	; 0x7d
   23024:	4a6d      	ldr	r2, [pc, #436]	; (231dc <z_impl_k_mutex_lock+0x1cc>)
   23026:	486e      	ldr	r0, [pc, #440]	; (231e0 <z_impl_k_mutex_lock+0x1d0>)
   23028:	f009 fa23 	bl	2c472 <printk>
   2302c:	486d      	ldr	r0, [pc, #436]	; (231e4 <z_impl_k_mutex_lock+0x1d4>)
   2302e:	f009 fa20 	bl	2c472 <printk>
   23032:	217d      	movs	r1, #125	; 0x7d
   23034:	4869      	ldr	r0, [pc, #420]	; (231dc <z_impl_k_mutex_lock+0x1cc>)
   23036:	f009 fc39 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   2303a:	f04f 0320 	mov.w	r3, #32
   2303e:	f3ef 8811 	mrs	r8, BASEPRI
   23042:	f383 8811 	msr	BASEPRI, r3
   23046:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2304a:	4867      	ldr	r0, [pc, #412]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   2304c:	f001 fe7a 	bl	24d44 <z_spin_lock_valid>
   23050:	b968      	cbnz	r0, 2306e <z_impl_k_mutex_lock+0x5e>
   23052:	235c      	movs	r3, #92	; 0x5c
   23054:	4a65      	ldr	r2, [pc, #404]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   23056:	4966      	ldr	r1, [pc, #408]	; (231f0 <z_impl_k_mutex_lock+0x1e0>)
   23058:	4861      	ldr	r0, [pc, #388]	; (231e0 <z_impl_k_mutex_lock+0x1d0>)
   2305a:	f009 fa0a 	bl	2c472 <printk>
   2305e:	4962      	ldr	r1, [pc, #392]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   23060:	4864      	ldr	r0, [pc, #400]	; (231f4 <z_impl_k_mutex_lock+0x1e4>)
   23062:	f009 fa06 	bl	2c472 <printk>
   23066:	215c      	movs	r1, #92	; 0x5c
   23068:	4860      	ldr	r0, [pc, #384]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   2306a:	f009 fc1f 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2306e:	485e      	ldr	r0, [pc, #376]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   23070:	f001 fe86 	bl	24d80 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23074:	68e3      	ldr	r3, [r4, #12]
   23076:	4a60      	ldr	r2, [pc, #384]	; (231f8 <z_impl_k_mutex_lock+0x1e8>)
   23078:	b1fb      	cbz	r3, 230ba <z_impl_k_mutex_lock+0xaa>
   2307a:	68a0      	ldr	r0, [r4, #8]
   2307c:	6891      	ldr	r1, [r2, #8]
   2307e:	4288      	cmp	r0, r1
   23080:	d03d      	beq.n	230fe <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23082:	ea56 0307 	orrs.w	r3, r6, r7
   23086:	d13c      	bne.n	23102 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23088:	4857      	ldr	r0, [pc, #348]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   2308a:	f001 fe69 	bl	24d60 <z_spin_unlock_valid>
   2308e:	b968      	cbnz	r0, 230ac <z_impl_k_mutex_lock+0x9c>
   23090:	2384      	movs	r3, #132	; 0x84
   23092:	4a56      	ldr	r2, [pc, #344]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   23094:	4959      	ldr	r1, [pc, #356]	; (231fc <z_impl_k_mutex_lock+0x1ec>)
   23096:	4852      	ldr	r0, [pc, #328]	; (231e0 <z_impl_k_mutex_lock+0x1d0>)
   23098:	f009 f9eb 	bl	2c472 <printk>
   2309c:	4952      	ldr	r1, [pc, #328]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   2309e:	4858      	ldr	r0, [pc, #352]	; (23200 <z_impl_k_mutex_lock+0x1f0>)
   230a0:	f009 f9e7 	bl	2c472 <printk>
   230a4:	2184      	movs	r1, #132	; 0x84
   230a6:	4851      	ldr	r0, [pc, #324]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   230a8:	f009 fc00 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   230ac:	f388 8811 	msr	BASEPRI, r8
   230b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   230b4:	f06f 000f 	mvn.w	r0, #15
   230b8:	e01e      	b.n	230f8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   230ba:	6891      	ldr	r1, [r2, #8]
   230bc:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   230c0:	3301      	adds	r3, #1
   230c2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   230c4:	6893      	ldr	r3, [r2, #8]
   230c6:	4848      	ldr	r0, [pc, #288]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   230c8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   230ca:	60a3      	str	r3, [r4, #8]
   230cc:	f001 fe48 	bl	24d60 <z_spin_unlock_valid>
   230d0:	b968      	cbnz	r0, 230ee <z_impl_k_mutex_lock+0xde>
   230d2:	2384      	movs	r3, #132	; 0x84
   230d4:	4a45      	ldr	r2, [pc, #276]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   230d6:	4949      	ldr	r1, [pc, #292]	; (231fc <z_impl_k_mutex_lock+0x1ec>)
   230d8:	4841      	ldr	r0, [pc, #260]	; (231e0 <z_impl_k_mutex_lock+0x1d0>)
   230da:	f009 f9ca 	bl	2c472 <printk>
   230de:	4942      	ldr	r1, [pc, #264]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   230e0:	4847      	ldr	r0, [pc, #284]	; (23200 <z_impl_k_mutex_lock+0x1f0>)
   230e2:	f009 f9c6 	bl	2c472 <printk>
   230e6:	2184      	movs	r1, #132	; 0x84
   230e8:	4840      	ldr	r0, [pc, #256]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   230ea:	f009 fbdf 	bl	2c8ac <assert_post_action>
   230ee:	f388 8811 	msr	BASEPRI, r8
   230f2:	f3bf 8f6f 	isb	sy
		return 0;
   230f6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   230f8:	b002      	add	sp, #8
   230fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   230fe:	6921      	ldr	r1, [r4, #16]
   23100:	e7de      	b.n	230c0 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23102:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23106:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2310a:	4299      	cmp	r1, r3
   2310c:	bfa8      	it	ge
   2310e:	4619      	movge	r1, r3
   23110:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23114:	4299      	cmp	r1, r3
   23116:	da41      	bge.n	2319c <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   23118:	f001 f948 	bl	243ac <z_set_prio>
   2311c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2311e:	4622      	mov	r2, r4
   23120:	4641      	mov	r1, r8
   23122:	e9cd 6700 	strd	r6, r7, [sp]
   23126:	4830      	ldr	r0, [pc, #192]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   23128:	f001 f910 	bl	2434c <z_pend_curr>
	if (got_mutex == 0) {
   2312c:	2800      	cmp	r0, #0
   2312e:	d0e3      	beq.n	230f8 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   23130:	f04f 0320 	mov.w	r3, #32
   23134:	f3ef 8611 	mrs	r6, BASEPRI
   23138:	f383 8811 	msr	BASEPRI, r3
   2313c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23140:	4829      	ldr	r0, [pc, #164]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   23142:	f001 fdff 	bl	24d44 <z_spin_lock_valid>
   23146:	b968      	cbnz	r0, 23164 <z_impl_k_mutex_lock+0x154>
   23148:	235c      	movs	r3, #92	; 0x5c
   2314a:	4a28      	ldr	r2, [pc, #160]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   2314c:	4928      	ldr	r1, [pc, #160]	; (231f0 <z_impl_k_mutex_lock+0x1e0>)
   2314e:	4824      	ldr	r0, [pc, #144]	; (231e0 <z_impl_k_mutex_lock+0x1d0>)
   23150:	f009 f98f 	bl	2c472 <printk>
   23154:	4924      	ldr	r1, [pc, #144]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   23156:	4827      	ldr	r0, [pc, #156]	; (231f4 <z_impl_k_mutex_lock+0x1e4>)
   23158:	f009 f98b 	bl	2c472 <printk>
   2315c:	215c      	movs	r1, #92	; 0x5c
   2315e:	4823      	ldr	r0, [pc, #140]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   23160:	f009 fba4 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23164:	4820      	ldr	r0, [pc, #128]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   23166:	f001 fe0b 	bl	24d80 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2316a:	6823      	ldr	r3, [r4, #0]
   2316c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2316e:	42a3      	cmp	r3, r4
   23170:	d007      	beq.n	23182 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23172:	b133      	cbz	r3, 23182 <z_impl_k_mutex_lock+0x172>
   23174:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23178:	4299      	cmp	r1, r3
   2317a:	bfa8      	it	ge
   2317c:	4619      	movge	r1, r3
   2317e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   23182:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   23184:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23188:	4299      	cmp	r1, r3
   2318a:	d109      	bne.n	231a0 <z_impl_k_mutex_lock+0x190>
	if (resched) {
   2318c:	b16d      	cbz	r5, 231aa <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   2318e:	4631      	mov	r1, r6
   23190:	4815      	ldr	r0, [pc, #84]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   23192:	f000 fb25 	bl	237e0 <z_reschedule>
	return -EAGAIN;
   23196:	f06f 000a 	mvn.w	r0, #10
   2319a:	e7ad      	b.n	230f8 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   2319c:	2500      	movs	r5, #0
   2319e:	e7be      	b.n	2311e <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   231a0:	f001 f904 	bl	243ac <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   231a4:	2800      	cmp	r0, #0
   231a6:	d1f2      	bne.n	2318e <z_impl_k_mutex_lock+0x17e>
   231a8:	e7f0      	b.n	2318c <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231aa:	480f      	ldr	r0, [pc, #60]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   231ac:	f001 fdd8 	bl	24d60 <z_spin_unlock_valid>
   231b0:	b968      	cbnz	r0, 231ce <z_impl_k_mutex_lock+0x1be>
   231b2:	2384      	movs	r3, #132	; 0x84
   231b4:	4a0d      	ldr	r2, [pc, #52]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   231b6:	4911      	ldr	r1, [pc, #68]	; (231fc <z_impl_k_mutex_lock+0x1ec>)
   231b8:	4809      	ldr	r0, [pc, #36]	; (231e0 <z_impl_k_mutex_lock+0x1d0>)
   231ba:	f009 f95a 	bl	2c472 <printk>
   231be:	490a      	ldr	r1, [pc, #40]	; (231e8 <z_impl_k_mutex_lock+0x1d8>)
   231c0:	480f      	ldr	r0, [pc, #60]	; (23200 <z_impl_k_mutex_lock+0x1f0>)
   231c2:	f009 f956 	bl	2c472 <printk>
   231c6:	2184      	movs	r1, #132	; 0x84
   231c8:	4808      	ldr	r0, [pc, #32]	; (231ec <z_impl_k_mutex_lock+0x1dc>)
   231ca:	f009 fb6f 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   231ce:	f386 8811 	msr	BASEPRI, r6
   231d2:	f3bf 8f6f 	isb	sy
   231d6:	e7de      	b.n	23196 <z_impl_k_mutex_lock+0x186>
   231d8:	00032f55 	.word	0x00032f55
   231dc:	00032f33 	.word	0x00032f33
   231e0:	0003049a 	.word	0x0003049a
   231e4:	00032f67 	.word	0x00032f67
   231e8:	20021ddc 	.word	0x20021ddc
   231ec:	0003056a 	.word	0x0003056a
   231f0:	000305bc 	.word	0x000305bc
   231f4:	000305d1 	.word	0x000305d1
   231f8:	20021de0 	.word	0x20021de0
   231fc:	00030590 	.word	0x00030590
   23200:	000305a7 	.word	0x000305a7

00023204 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23204:	b538      	push	{r3, r4, r5, lr}
   23206:	4604      	mov	r4, r0
   23208:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2320c:	b163      	cbz	r3, 23228 <z_impl_k_mutex_unlock+0x24>
   2320e:	4954      	ldr	r1, [pc, #336]	; (23360 <z_impl_k_mutex_unlock+0x15c>)
   23210:	23d8      	movs	r3, #216	; 0xd8
   23212:	4a54      	ldr	r2, [pc, #336]	; (23364 <z_impl_k_mutex_unlock+0x160>)
   23214:	4854      	ldr	r0, [pc, #336]	; (23368 <z_impl_k_mutex_unlock+0x164>)
   23216:	f009 f92c 	bl	2c472 <printk>
   2321a:	4854      	ldr	r0, [pc, #336]	; (2336c <z_impl_k_mutex_unlock+0x168>)
   2321c:	f009 f929 	bl	2c472 <printk>
   23220:	21d8      	movs	r1, #216	; 0xd8
   23222:	4850      	ldr	r0, [pc, #320]	; (23364 <z_impl_k_mutex_unlock+0x160>)
   23224:	f009 fb42 	bl	2c8ac <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   23228:	68a3      	ldr	r3, [r4, #8]
   2322a:	2b00      	cmp	r3, #0
   2322c:	f000 8091 	beq.w	23352 <z_impl_k_mutex_unlock+0x14e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   23230:	4d4f      	ldr	r5, [pc, #316]	; (23370 <z_impl_k_mutex_unlock+0x16c>)
   23232:	68aa      	ldr	r2, [r5, #8]
   23234:	4293      	cmp	r3, r2
   23236:	f040 808f 	bne.w	23358 <z_impl_k_mutex_unlock+0x154>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2323a:	68e3      	ldr	r3, [r4, #12]
   2323c:	b94b      	cbnz	r3, 23252 <z_impl_k_mutex_unlock+0x4e>
   2323e:	494d      	ldr	r1, [pc, #308]	; (23374 <z_impl_k_mutex_unlock+0x170>)
   23240:	4849      	ldr	r0, [pc, #292]	; (23368 <z_impl_k_mutex_unlock+0x164>)
   23242:	23ea      	movs	r3, #234	; 0xea
   23244:	4a47      	ldr	r2, [pc, #284]	; (23364 <z_impl_k_mutex_unlock+0x160>)
   23246:	f009 f914 	bl	2c472 <printk>
   2324a:	21ea      	movs	r1, #234	; 0xea
   2324c:	4845      	ldr	r0, [pc, #276]	; (23364 <z_impl_k_mutex_unlock+0x160>)
   2324e:	f009 fb2d 	bl	2c8ac <assert_post_action>
   23252:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   23256:	b173      	cbz	r3, 23276 <z_impl_k_mutex_unlock+0x72>
   23258:	4941      	ldr	r1, [pc, #260]	; (23360 <z_impl_k_mutex_unlock+0x15c>)
   2325a:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2325e:	4a46      	ldr	r2, [pc, #280]	; (23378 <z_impl_k_mutex_unlock+0x174>)
   23260:	4841      	ldr	r0, [pc, #260]	; (23368 <z_impl_k_mutex_unlock+0x164>)
   23262:	f009 f906 	bl	2c472 <printk>
   23266:	4845      	ldr	r0, [pc, #276]	; (2337c <z_impl_k_mutex_unlock+0x178>)
   23268:	f009 f903 	bl	2c472 <printk>
   2326c:	f44f 7186 	mov.w	r1, #268	; 0x10c
   23270:	4841      	ldr	r0, [pc, #260]	; (23378 <z_impl_k_mutex_unlock+0x174>)
   23272:	f009 fb1b 	bl	2c8ac <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   23276:	68ab      	ldr	r3, [r5, #8]
   23278:	7bdb      	ldrb	r3, [r3, #15]
   2327a:	2b01      	cmp	r3, #1
   2327c:	d10e      	bne.n	2329c <z_impl_k_mutex_unlock+0x98>
   2327e:	4940      	ldr	r1, [pc, #256]	; (23380 <z_impl_k_mutex_unlock+0x17c>)
   23280:	f240 130d 	movw	r3, #269	; 0x10d
   23284:	4a3c      	ldr	r2, [pc, #240]	; (23378 <z_impl_k_mutex_unlock+0x174>)
   23286:	4838      	ldr	r0, [pc, #224]	; (23368 <z_impl_k_mutex_unlock+0x164>)
   23288:	f009 f8f3 	bl	2c472 <printk>
   2328c:	483b      	ldr	r0, [pc, #236]	; (2337c <z_impl_k_mutex_unlock+0x178>)
   2328e:	f009 f8f0 	bl	2c472 <printk>
   23292:	f240 110d 	movw	r1, #269	; 0x10d
   23296:	4838      	ldr	r0, [pc, #224]	; (23378 <z_impl_k_mutex_unlock+0x174>)
   23298:	f009 fb08 	bl	2c8ac <assert_post_action>

	--_current->base.sched_locked;
   2329c:	68aa      	ldr	r2, [r5, #8]
   2329e:	7bd3      	ldrb	r3, [r2, #15]
   232a0:	3b01      	subs	r3, #1
   232a2:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   232a4:	68e3      	ldr	r3, [r4, #12]
   232a6:	2b01      	cmp	r3, #1
   232a8:	d005      	beq.n	232b6 <z_impl_k_mutex_unlock+0xb2>
		mutex->lock_count--;
   232aa:	3b01      	subs	r3, #1
   232ac:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   232ae:	f000 fbf1 	bl	23a94 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   232b2:	2000      	movs	r0, #0
}
   232b4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   232b6:	f04f 0320 	mov.w	r3, #32
   232ba:	f3ef 8511 	mrs	r5, BASEPRI
   232be:	f383 8811 	msr	BASEPRI, r3
   232c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   232c6:	482f      	ldr	r0, [pc, #188]	; (23384 <z_impl_k_mutex_unlock+0x180>)
   232c8:	f001 fd3c 	bl	24d44 <z_spin_lock_valid>
   232cc:	b968      	cbnz	r0, 232ea <z_impl_k_mutex_unlock+0xe6>
   232ce:	235c      	movs	r3, #92	; 0x5c
   232d0:	4a2d      	ldr	r2, [pc, #180]	; (23388 <z_impl_k_mutex_unlock+0x184>)
   232d2:	492e      	ldr	r1, [pc, #184]	; (2338c <z_impl_k_mutex_unlock+0x188>)
   232d4:	4824      	ldr	r0, [pc, #144]	; (23368 <z_impl_k_mutex_unlock+0x164>)
   232d6:	f009 f8cc 	bl	2c472 <printk>
   232da:	492a      	ldr	r1, [pc, #168]	; (23384 <z_impl_k_mutex_unlock+0x180>)
   232dc:	482c      	ldr	r0, [pc, #176]	; (23390 <z_impl_k_mutex_unlock+0x18c>)
   232de:	f009 f8c8 	bl	2c472 <printk>
   232e2:	215c      	movs	r1, #92	; 0x5c
   232e4:	4828      	ldr	r0, [pc, #160]	; (23388 <z_impl_k_mutex_unlock+0x184>)
   232e6:	f009 fae1 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   232ea:	4826      	ldr	r0, [pc, #152]	; (23384 <z_impl_k_mutex_unlock+0x180>)
   232ec:	f001 fd48 	bl	24d80 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   232f0:	68a0      	ldr	r0, [r4, #8]
   232f2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   232f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   232f8:	4299      	cmp	r1, r3
   232fa:	d001      	beq.n	23300 <z_impl_k_mutex_unlock+0xfc>
		return z_set_prio(mutex->owner, new_prio);
   232fc:	f001 f856 	bl	243ac <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23300:	4620      	mov	r0, r4
   23302:	f001 f8e9 	bl	244d8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   23306:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23308:	b158      	cbz	r0, 23322 <z_impl_k_mutex_unlock+0x11e>
		mutex->owner_orig_prio = new_owner->base.prio;
   2330a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2330e:	6122      	str	r2, [r4, #16]
   23310:	2200      	movs	r2, #0
   23312:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   23314:	f000 fc88 	bl	23c28 <z_ready_thread>
		z_reschedule(&lock, key);
   23318:	4629      	mov	r1, r5
   2331a:	481a      	ldr	r0, [pc, #104]	; (23384 <z_impl_k_mutex_unlock+0x180>)
   2331c:	f000 fa60 	bl	237e0 <z_reschedule>
   23320:	e7c5      	b.n	232ae <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count = 0U;
   23322:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23324:	4817      	ldr	r0, [pc, #92]	; (23384 <z_impl_k_mutex_unlock+0x180>)
   23326:	f001 fd1b 	bl	24d60 <z_spin_unlock_valid>
   2332a:	b968      	cbnz	r0, 23348 <z_impl_k_mutex_unlock+0x144>
   2332c:	2384      	movs	r3, #132	; 0x84
   2332e:	4a16      	ldr	r2, [pc, #88]	; (23388 <z_impl_k_mutex_unlock+0x184>)
   23330:	4918      	ldr	r1, [pc, #96]	; (23394 <z_impl_k_mutex_unlock+0x190>)
   23332:	480d      	ldr	r0, [pc, #52]	; (23368 <z_impl_k_mutex_unlock+0x164>)
   23334:	f009 f89d 	bl	2c472 <printk>
   23338:	4912      	ldr	r1, [pc, #72]	; (23384 <z_impl_k_mutex_unlock+0x180>)
   2333a:	4817      	ldr	r0, [pc, #92]	; (23398 <z_impl_k_mutex_unlock+0x194>)
   2333c:	f009 f899 	bl	2c472 <printk>
   23340:	2184      	movs	r1, #132	; 0x84
   23342:	4811      	ldr	r0, [pc, #68]	; (23388 <z_impl_k_mutex_unlock+0x184>)
   23344:	f009 fab2 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23348:	f385 8811 	msr	BASEPRI, r5
   2334c:	f3bf 8f6f 	isb	sy
   23350:	e7ad      	b.n	232ae <z_impl_k_mutex_unlock+0xaa>
		return -EINVAL;
   23352:	f06f 0015 	mvn.w	r0, #21
   23356:	e7ad      	b.n	232b4 <z_impl_k_mutex_unlock+0xb0>
		return -EPERM;
   23358:	f04f 30ff 	mov.w	r0, #4294967295
   2335c:	e7aa      	b.n	232b4 <z_impl_k_mutex_unlock+0xb0>
   2335e:	bf00      	nop
   23360:	00032f55 	.word	0x00032f55
   23364:	00032f33 	.word	0x00032f33
   23368:	0003049a 	.word	0x0003049a
   2336c:	00032f67 	.word	0x00032f67
   23370:	20021de0 	.word	0x20021de0
   23374:	00032f8c 	.word	0x00032f8c
   23378:	00032fa3 	.word	0x00032fa3
   2337c:	00030ac7 	.word	0x00030ac7
   23380:	00032fce 	.word	0x00032fce
   23384:	20021ddc 	.word	0x20021ddc
   23388:	0003056a 	.word	0x0003056a
   2338c:	000305bc 	.word	0x000305bc
   23390:	000305d1 	.word	0x000305d1
   23394:	00030590 	.word	0x00030590
   23398:	000305a7 	.word	0x000305a7

0002339c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2339c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   233a0:	4604      	mov	r4, r0
   233a2:	460e      	mov	r6, r1
   233a4:	4690      	mov	r8, r2
   233a6:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   233a8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   233ac:	f04f 0320 	mov.w	r3, #32
   233b0:	f3ef 8711 	mrs	r7, BASEPRI
   233b4:	f383 8811 	msr	BASEPRI, r3
   233b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233bc:	4628      	mov	r0, r5
   233be:	f001 fcc1 	bl	24d44 <z_spin_lock_valid>
   233c2:	b968      	cbnz	r0, 233e0 <queue_insert+0x44>
   233c4:	235c      	movs	r3, #92	; 0x5c
   233c6:	4a39      	ldr	r2, [pc, #228]	; (234ac <queue_insert+0x110>)
   233c8:	4939      	ldr	r1, [pc, #228]	; (234b0 <queue_insert+0x114>)
   233ca:	483a      	ldr	r0, [pc, #232]	; (234b4 <queue_insert+0x118>)
   233cc:	f009 f851 	bl	2c472 <printk>
   233d0:	4629      	mov	r1, r5
   233d2:	4839      	ldr	r0, [pc, #228]	; (234b8 <queue_insert+0x11c>)
   233d4:	f009 f84d 	bl	2c472 <printk>
   233d8:	215c      	movs	r1, #92	; 0x5c
   233da:	4834      	ldr	r0, [pc, #208]	; (234ac <queue_insert+0x110>)
   233dc:	f009 fa66 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   233e0:	4628      	mov	r0, r5
   233e2:	f001 fccd 	bl	24d80 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   233e6:	f104 000c 	add.w	r0, r4, #12
   233ea:	f001 f875 	bl	244d8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   233ee:	b158      	cbz	r0, 23408 <queue_insert+0x6c>
   233f0:	2400      	movs	r4, #0
   233f2:	f8c0 8014 	str.w	r8, [r0, #20]
   233f6:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   233f8:	f000 fc16 	bl	23c28 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   233fc:	4628      	mov	r0, r5
   233fe:	4639      	mov	r1, r7
   23400:	f000 f9ee 	bl	237e0 <z_reschedule>
	return 0;
   23404:	2000      	movs	r0, #0
   23406:	e01e      	b.n	23446 <queue_insert+0xaa>
	if (alloc) {
   23408:	f1b9 0f00 	cmp.w	r9, #0
   2340c:	d02d      	beq.n	2346a <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   2340e:	2008      	movs	r0, #8
   23410:	f002 fc78 	bl	25d04 <z_thread_malloc>
		if (anode == NULL) {
   23414:	b9c8      	cbnz	r0, 2344a <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23416:	4628      	mov	r0, r5
   23418:	f001 fca2 	bl	24d60 <z_spin_unlock_valid>
   2341c:	b968      	cbnz	r0, 2343a <queue_insert+0x9e>
   2341e:	2384      	movs	r3, #132	; 0x84
   23420:	4a22      	ldr	r2, [pc, #136]	; (234ac <queue_insert+0x110>)
   23422:	4926      	ldr	r1, [pc, #152]	; (234bc <queue_insert+0x120>)
   23424:	4823      	ldr	r0, [pc, #140]	; (234b4 <queue_insert+0x118>)
   23426:	f009 f824 	bl	2c472 <printk>
   2342a:	4629      	mov	r1, r5
   2342c:	4824      	ldr	r0, [pc, #144]	; (234c0 <queue_insert+0x124>)
   2342e:	f009 f820 	bl	2c472 <printk>
   23432:	2184      	movs	r1, #132	; 0x84
   23434:	481d      	ldr	r0, [pc, #116]	; (234ac <queue_insert+0x110>)
   23436:	f009 fa39 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   2343a:	f387 8811 	msr	BASEPRI, r7
   2343e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   23442:	f06f 000b 	mvn.w	r0, #11
}
   23446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2344a:	2301      	movs	r3, #1
		anode->data = data;
   2344c:	f8c0 8004 	str.w	r8, [r0, #4]
   23450:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   23452:	6803      	ldr	r3, [r0, #0]
   23454:	f003 0303 	and.w	r3, r3, #3
   23458:	b95e      	cbnz	r6, 23472 <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2345a:	6822      	ldr	r2, [r4, #0]
   2345c:	4313      	orrs	r3, r2
   2345e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23460:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   23462:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23464:	b973      	cbnz	r3, 23484 <queue_insert+0xe8>
	list->tail = node;
   23466:	6060      	str	r0, [r4, #4]
}
   23468:	e00c      	b.n	23484 <queue_insert+0xe8>
}
   2346a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2346c:	f8c8 9000 	str.w	r9, [r8]
}
   23470:	e7ef      	b.n	23452 <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23472:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23474:	f032 0203 	bics.w	r2, r2, #3
   23478:	d110      	bne.n	2349c <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   2347a:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2347c:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2347e:	b93a      	cbnz	r2, 23490 <queue_insert+0xf4>
	list->head = node;
   23480:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23484:	2104      	movs	r1, #4
   23486:	f104 0014 	add.w	r0, r4, #20
   2348a:	f00b fc2e 	bl	2ecea <z_handle_obj_poll_events>
   2348e:	e7b5      	b.n	233fc <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23490:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23492:	f003 0303 	and.w	r3, r3, #3
   23496:	4303      	orrs	r3, r0
   23498:	6013      	str	r3, [r2, #0]
   2349a:	e7e4      	b.n	23466 <queue_insert+0xca>
   2349c:	4313      	orrs	r3, r2
   2349e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   234a0:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   234a2:	f003 0303 	and.w	r3, r3, #3
   234a6:	4303      	orrs	r3, r0
   234a8:	6033      	str	r3, [r6, #0]
}
   234aa:	e7eb      	b.n	23484 <queue_insert+0xe8>
   234ac:	0003056a 	.word	0x0003056a
   234b0:	000305bc 	.word	0x000305bc
   234b4:	0003049a 	.word	0x0003049a
   234b8:	000305d1 	.word	0x000305d1
   234bc:	00030590 	.word	0x00030590
   234c0:	000305a7 	.word	0x000305a7

000234c4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   234c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   234c8:	4606      	mov	r6, r0
   234ca:	4690      	mov	r8, r2
   234cc:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   234ce:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   234d2:	f04f 0320 	mov.w	r3, #32
   234d6:	f3ef 8711 	mrs	r7, BASEPRI
   234da:	f383 8811 	msr	BASEPRI, r3
   234de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   234e2:	4628      	mov	r0, r5
   234e4:	f001 fc2e 	bl	24d44 <z_spin_lock_valid>
   234e8:	b968      	cbnz	r0, 23506 <z_impl_k_queue_get+0x42>
   234ea:	235c      	movs	r3, #92	; 0x5c
   234ec:	4a25      	ldr	r2, [pc, #148]	; (23584 <z_impl_k_queue_get+0xc0>)
   234ee:	4926      	ldr	r1, [pc, #152]	; (23588 <z_impl_k_queue_get+0xc4>)
   234f0:	4826      	ldr	r0, [pc, #152]	; (2358c <z_impl_k_queue_get+0xc8>)
   234f2:	f008 ffbe 	bl	2c472 <printk>
   234f6:	4629      	mov	r1, r5
   234f8:	4825      	ldr	r0, [pc, #148]	; (23590 <z_impl_k_queue_get+0xcc>)
   234fa:	f008 ffba 	bl	2c472 <printk>
   234fe:	215c      	movs	r1, #92	; 0x5c
   23500:	4820      	ldr	r0, [pc, #128]	; (23584 <z_impl_k_queue_get+0xc0>)
   23502:	f009 f9d3 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23506:	4628      	mov	r0, r5
   23508:	f001 fc3a 	bl	24d80 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2350c:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2350e:	b33c      	cbz	r4, 23560 <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23510:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23512:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23514:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23518:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2351a:	4620      	mov	r0, r4
   2351c:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   23520:	6033      	str	r3, [r6, #0]
	list->tail = node;
   23522:	bf08      	it	eq
   23524:	6073      	streq	r3, [r6, #4]
   23526:	f00b fa50 	bl	2e9ca <z_queue_node_peek>
   2352a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2352c:	4628      	mov	r0, r5
   2352e:	f001 fc17 	bl	24d60 <z_spin_unlock_valid>
   23532:	b968      	cbnz	r0, 23550 <z_impl_k_queue_get+0x8c>
   23534:	2384      	movs	r3, #132	; 0x84
   23536:	4a13      	ldr	r2, [pc, #76]	; (23584 <z_impl_k_queue_get+0xc0>)
   23538:	4916      	ldr	r1, [pc, #88]	; (23594 <z_impl_k_queue_get+0xd0>)
   2353a:	4814      	ldr	r0, [pc, #80]	; (2358c <z_impl_k_queue_get+0xc8>)
   2353c:	f008 ff99 	bl	2c472 <printk>
   23540:	4629      	mov	r1, r5
   23542:	4815      	ldr	r0, [pc, #84]	; (23598 <z_impl_k_queue_get+0xd4>)
   23544:	f008 ff95 	bl	2c472 <printk>
   23548:	2184      	movs	r1, #132	; 0x84
   2354a:	480e      	ldr	r0, [pc, #56]	; (23584 <z_impl_k_queue_get+0xc0>)
   2354c:	f009 f9ae 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23550:	f387 8811 	msr	BASEPRI, r7
   23554:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23558:	4620      	mov	r0, r4
   2355a:	b003      	add	sp, #12
   2355c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23560:	ea58 0309 	orrs.w	r3, r8, r9
   23564:	d0e2      	beq.n	2352c <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23566:	4639      	mov	r1, r7
   23568:	4628      	mov	r0, r5
   2356a:	e9cd 8900 	strd	r8, r9, [sp]
   2356e:	f106 020c 	add.w	r2, r6, #12
   23572:	f000 feeb 	bl	2434c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23576:	2800      	cmp	r0, #0
   23578:	d1ee      	bne.n	23558 <z_impl_k_queue_get+0x94>
   2357a:	4b08      	ldr	r3, [pc, #32]	; (2359c <z_impl_k_queue_get+0xd8>)
   2357c:	689b      	ldr	r3, [r3, #8]
   2357e:	695c      	ldr	r4, [r3, #20]
   23580:	e7ea      	b.n	23558 <z_impl_k_queue_get+0x94>
   23582:	bf00      	nop
   23584:	0003056a 	.word	0x0003056a
   23588:	000305bc 	.word	0x000305bc
   2358c:	0003049a 	.word	0x0003049a
   23590:	000305d1 	.word	0x000305d1
   23594:	00030590 	.word	0x00030590
   23598:	000305a7 	.word	0x000305a7
   2359c:	20021de0 	.word	0x20021de0

000235a0 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   235a0:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   235a2:	b510      	push	{r4, lr}
   235a4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   235a6:	b95b      	cbnz	r3, 235c0 <pended_on.isra.0+0x20>
   235a8:	4906      	ldr	r1, [pc, #24]	; (235c4 <pended_on.isra.0+0x24>)
   235aa:	4807      	ldr	r0, [pc, #28]	; (235c8 <pended_on.isra.0+0x28>)
   235ac:	f240 13ed 	movw	r3, #493	; 0x1ed
   235b0:	4a06      	ldr	r2, [pc, #24]	; (235cc <pended_on.isra.0+0x2c>)
   235b2:	f008 ff5e 	bl	2c472 <printk>
   235b6:	f240 11ed 	movw	r1, #493	; 0x1ed
   235ba:	4804      	ldr	r0, [pc, #16]	; (235cc <pended_on.isra.0+0x2c>)
   235bc:	f009 f976 	bl	2c8ac <assert_post_action>

	return thread->base.pended_on;
}
   235c0:	6820      	ldr	r0, [r4, #0]
   235c2:	bd10      	pop	{r4, pc}
   235c4:	00033020 	.word	0x00033020
   235c8:	0003049a 	.word	0x0003049a
   235cc:	00032ffe 	.word	0x00032ffe

000235d0 <z_reset_time_slice>:
{
   235d0:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   235d2:	4c08      	ldr	r4, [pc, #32]	; (235f4 <z_reset_time_slice+0x24>)
   235d4:	6823      	ldr	r3, [r4, #0]
   235d6:	b15b      	cbz	r3, 235f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   235d8:	f7f0 ff18 	bl	1440c <z_clock_elapsed>
   235dc:	6822      	ldr	r2, [r4, #0]
   235de:	4906      	ldr	r1, [pc, #24]	; (235f8 <z_reset_time_slice+0x28>)
   235e0:	4410      	add	r0, r2
   235e2:	6108      	str	r0, [r1, #16]
}
   235e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   235e8:	2100      	movs	r1, #0
   235ea:	4610      	mov	r0, r2
   235ec:	f001 be38 	b.w	25260 <z_set_timeout_expiry>
}
   235f0:	bd10      	pop	{r4, pc}
   235f2:	bf00      	nop
   235f4:	20021e20 	.word	0x20021e20
   235f8:	20021de0 	.word	0x20021de0

000235fc <k_sched_time_slice_set>:
{
   235fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235fe:	4605      	mov	r5, r0
   23600:	460c      	mov	r4, r1
	__asm__ volatile(
   23602:	f04f 0320 	mov.w	r3, #32
   23606:	f3ef 8611 	mrs	r6, BASEPRI
   2360a:	f383 8811 	msr	BASEPRI, r3
   2360e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23612:	4820      	ldr	r0, [pc, #128]	; (23694 <k_sched_time_slice_set+0x98>)
   23614:	f001 fb96 	bl	24d44 <z_spin_lock_valid>
   23618:	b968      	cbnz	r0, 23636 <k_sched_time_slice_set+0x3a>
   2361a:	235c      	movs	r3, #92	; 0x5c
   2361c:	4a1e      	ldr	r2, [pc, #120]	; (23698 <k_sched_time_slice_set+0x9c>)
   2361e:	491f      	ldr	r1, [pc, #124]	; (2369c <k_sched_time_slice_set+0xa0>)
   23620:	481f      	ldr	r0, [pc, #124]	; (236a0 <k_sched_time_slice_set+0xa4>)
   23622:	f008 ff26 	bl	2c472 <printk>
   23626:	491b      	ldr	r1, [pc, #108]	; (23694 <k_sched_time_slice_set+0x98>)
   23628:	481e      	ldr	r0, [pc, #120]	; (236a4 <k_sched_time_slice_set+0xa8>)
   2362a:	f008 ff22 	bl	2c472 <printk>
   2362e:	215c      	movs	r1, #92	; 0x5c
   23630:	4819      	ldr	r0, [pc, #100]	; (23698 <k_sched_time_slice_set+0x9c>)
   23632:	f009 f93b 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23636:	4817      	ldr	r0, [pc, #92]	; (23694 <k_sched_time_slice_set+0x98>)
   23638:	f001 fba2 	bl	24d80 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2363c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   23640:	2200      	movs	r2, #0
   23642:	f240 30e7 	movw	r0, #999	; 0x3e7
   23646:	2100      	movs	r1, #0
   23648:	4b17      	ldr	r3, [pc, #92]	; (236a8 <k_sched_time_slice_set+0xac>)
   2364a:	fbe7 0105 	umlal	r0, r1, r7, r5
   2364e:	611a      	str	r2, [r3, #16]
   23650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23654:	2300      	movs	r3, #0
   23656:	f7e9 f8ff 	bl	c858 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2365a:	4b14      	ldr	r3, [pc, #80]	; (236ac <k_sched_time_slice_set+0xb0>)
   2365c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2365e:	4b14      	ldr	r3, [pc, #80]	; (236b0 <k_sched_time_slice_set+0xb4>)
   23660:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   23662:	f7ff ffb5 	bl	235d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23666:	480b      	ldr	r0, [pc, #44]	; (23694 <k_sched_time_slice_set+0x98>)
   23668:	f001 fb7a 	bl	24d60 <z_spin_unlock_valid>
   2366c:	b968      	cbnz	r0, 2368a <k_sched_time_slice_set+0x8e>
   2366e:	2384      	movs	r3, #132	; 0x84
   23670:	4a09      	ldr	r2, [pc, #36]	; (23698 <k_sched_time_slice_set+0x9c>)
   23672:	4910      	ldr	r1, [pc, #64]	; (236b4 <k_sched_time_slice_set+0xb8>)
   23674:	480a      	ldr	r0, [pc, #40]	; (236a0 <k_sched_time_slice_set+0xa4>)
   23676:	f008 fefc 	bl	2c472 <printk>
   2367a:	4906      	ldr	r1, [pc, #24]	; (23694 <k_sched_time_slice_set+0x98>)
   2367c:	480e      	ldr	r0, [pc, #56]	; (236b8 <k_sched_time_slice_set+0xbc>)
   2367e:	f008 fef8 	bl	2c472 <printk>
   23682:	2184      	movs	r1, #132	; 0x84
   23684:	4804      	ldr	r0, [pc, #16]	; (23698 <k_sched_time_slice_set+0x9c>)
   23686:	f009 f911 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   2368a:	f386 8811 	msr	BASEPRI, r6
   2368e:	f3bf 8f6f 	isb	sy
}
   23692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23694:	20021e18 	.word	0x20021e18
   23698:	0003056a 	.word	0x0003056a
   2369c:	000305bc 	.word	0x000305bc
   236a0:	0003049a 	.word	0x0003049a
   236a4:	000305d1 	.word	0x000305d1
   236a8:	20021de0 	.word	0x20021de0
   236ac:	20021e20 	.word	0x20021e20
   236b0:	20021e1c 	.word	0x20021e1c
   236b4:	00030590 	.word	0x00030590
   236b8:	000305a7 	.word	0x000305a7

000236bc <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   236bc:	b538      	push	{r3, r4, r5, lr}
   236be:	4604      	mov	r4, r0
	__asm__ volatile(
   236c0:	f04f 0320 	mov.w	r3, #32
   236c4:	f3ef 8511 	mrs	r5, BASEPRI
   236c8:	f383 8811 	msr	BASEPRI, r3
   236cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   236d0:	4818      	ldr	r0, [pc, #96]	; (23734 <z_find_first_thread_to_unpend+0x78>)
   236d2:	f001 fb37 	bl	24d44 <z_spin_lock_valid>
   236d6:	b968      	cbnz	r0, 236f4 <z_find_first_thread_to_unpend+0x38>
   236d8:	235c      	movs	r3, #92	; 0x5c
   236da:	4a17      	ldr	r2, [pc, #92]	; (23738 <z_find_first_thread_to_unpend+0x7c>)
   236dc:	4917      	ldr	r1, [pc, #92]	; (2373c <z_find_first_thread_to_unpend+0x80>)
   236de:	4818      	ldr	r0, [pc, #96]	; (23740 <z_find_first_thread_to_unpend+0x84>)
   236e0:	f008 fec7 	bl	2c472 <printk>
   236e4:	4913      	ldr	r1, [pc, #76]	; (23734 <z_find_first_thread_to_unpend+0x78>)
   236e6:	4817      	ldr	r0, [pc, #92]	; (23744 <z_find_first_thread_to_unpend+0x88>)
   236e8:	f008 fec3 	bl	2c472 <printk>
   236ec:	215c      	movs	r1, #92	; 0x5c
   236ee:	4812      	ldr	r0, [pc, #72]	; (23738 <z_find_first_thread_to_unpend+0x7c>)
   236f0:	f009 f8dc 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   236f4:	480f      	ldr	r0, [pc, #60]	; (23734 <z_find_first_thread_to_unpend+0x78>)
   236f6:	f001 fb43 	bl	24d80 <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   236fa:	4620      	mov	r0, r4
   236fc:	f00b f9b1 	bl	2ea62 <z_priq_dumb_best>
   23700:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23702:	480c      	ldr	r0, [pc, #48]	; (23734 <z_find_first_thread_to_unpend+0x78>)
   23704:	f001 fb2c 	bl	24d60 <z_spin_unlock_valid>
   23708:	b968      	cbnz	r0, 23726 <z_find_first_thread_to_unpend+0x6a>
   2370a:	2384      	movs	r3, #132	; 0x84
   2370c:	4a0a      	ldr	r2, [pc, #40]	; (23738 <z_find_first_thread_to_unpend+0x7c>)
   2370e:	490e      	ldr	r1, [pc, #56]	; (23748 <z_find_first_thread_to_unpend+0x8c>)
   23710:	480b      	ldr	r0, [pc, #44]	; (23740 <z_find_first_thread_to_unpend+0x84>)
   23712:	f008 feae 	bl	2c472 <printk>
   23716:	4907      	ldr	r1, [pc, #28]	; (23734 <z_find_first_thread_to_unpend+0x78>)
   23718:	480c      	ldr	r0, [pc, #48]	; (2374c <z_find_first_thread_to_unpend+0x90>)
   2371a:	f008 feaa 	bl	2c472 <printk>
   2371e:	2184      	movs	r1, #132	; 0x84
   23720:	4805      	ldr	r0, [pc, #20]	; (23738 <z_find_first_thread_to_unpend+0x7c>)
   23722:	f009 f8c3 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23726:	f385 8811 	msr	BASEPRI, r5
   2372a:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   2372e:	4620      	mov	r0, r4
   23730:	bd38      	pop	{r3, r4, r5, pc}
   23732:	bf00      	nop
   23734:	20021e18 	.word	0x20021e18
   23738:	0003056a 	.word	0x0003056a
   2373c:	000305bc 	.word	0x000305bc
   23740:	0003049a 	.word	0x0003049a
   23744:	000305d1 	.word	0x000305d1
   23748:	00030590 	.word	0x00030590
   2374c:	000305a7 	.word	0x000305a7

00023750 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   23750:	b538      	push	{r3, r4, r5, lr}
   23752:	4604      	mov	r4, r0
	__asm__ volatile(
   23754:	f04f 0320 	mov.w	r3, #32
   23758:	f3ef 8511 	mrs	r5, BASEPRI
   2375c:	f383 8811 	msr	BASEPRI, r3
   23760:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23764:	4817      	ldr	r0, [pc, #92]	; (237c4 <z_unpend_thread_no_timeout+0x74>)
   23766:	f001 faed 	bl	24d44 <z_spin_lock_valid>
   2376a:	b968      	cbnz	r0, 23788 <z_unpend_thread_no_timeout+0x38>
   2376c:	235c      	movs	r3, #92	; 0x5c
   2376e:	4a16      	ldr	r2, [pc, #88]	; (237c8 <z_unpend_thread_no_timeout+0x78>)
   23770:	4916      	ldr	r1, [pc, #88]	; (237cc <z_unpend_thread_no_timeout+0x7c>)
   23772:	4817      	ldr	r0, [pc, #92]	; (237d0 <z_unpend_thread_no_timeout+0x80>)
   23774:	f008 fe7d 	bl	2c472 <printk>
   23778:	4912      	ldr	r1, [pc, #72]	; (237c4 <z_unpend_thread_no_timeout+0x74>)
   2377a:	4816      	ldr	r0, [pc, #88]	; (237d4 <z_unpend_thread_no_timeout+0x84>)
   2377c:	f008 fe79 	bl	2c472 <printk>
   23780:	215c      	movs	r1, #92	; 0x5c
   23782:	4811      	ldr	r0, [pc, #68]	; (237c8 <z_unpend_thread_no_timeout+0x78>)
   23784:	f009 f892 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23788:	480e      	ldr	r0, [pc, #56]	; (237c4 <z_unpend_thread_no_timeout+0x74>)
   2378a:	f001 faf9 	bl	24d80 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   2378e:	4620      	mov	r0, r4
   23790:	f00b f958 	bl	2ea44 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23794:	480b      	ldr	r0, [pc, #44]	; (237c4 <z_unpend_thread_no_timeout+0x74>)
   23796:	f001 fae3 	bl	24d60 <z_spin_unlock_valid>
   2379a:	b968      	cbnz	r0, 237b8 <z_unpend_thread_no_timeout+0x68>
   2379c:	2384      	movs	r3, #132	; 0x84
   2379e:	4a0a      	ldr	r2, [pc, #40]	; (237c8 <z_unpend_thread_no_timeout+0x78>)
   237a0:	490d      	ldr	r1, [pc, #52]	; (237d8 <z_unpend_thread_no_timeout+0x88>)
   237a2:	480b      	ldr	r0, [pc, #44]	; (237d0 <z_unpend_thread_no_timeout+0x80>)
   237a4:	f008 fe65 	bl	2c472 <printk>
   237a8:	4906      	ldr	r1, [pc, #24]	; (237c4 <z_unpend_thread_no_timeout+0x74>)
   237aa:	480c      	ldr	r0, [pc, #48]	; (237dc <z_unpend_thread_no_timeout+0x8c>)
   237ac:	f008 fe61 	bl	2c472 <printk>
   237b0:	2184      	movs	r1, #132	; 0x84
   237b2:	4805      	ldr	r0, [pc, #20]	; (237c8 <z_unpend_thread_no_timeout+0x78>)
   237b4:	f009 f87a 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   237b8:	f385 8811 	msr	BASEPRI, r5
   237bc:	f3bf 8f6f 	isb	sy
	}
}
   237c0:	bd38      	pop	{r3, r4, r5, pc}
   237c2:	bf00      	nop
   237c4:	20021e18 	.word	0x20021e18
   237c8:	0003056a 	.word	0x0003056a
   237cc:	000305bc 	.word	0x000305bc
   237d0:	0003049a 	.word	0x0003049a
   237d4:	000305d1 	.word	0x000305d1
   237d8:	00030590 	.word	0x00030590
   237dc:	000305a7 	.word	0x000305a7

000237e0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   237e0:	b538      	push	{r3, r4, r5, lr}
   237e2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   237e4:	460d      	mov	r5, r1
   237e6:	b9e9      	cbnz	r1, 23824 <z_reschedule+0x44>
   237e8:	f3ef 8305 	mrs	r3, IPSR
   237ec:	b9d3      	cbnz	r3, 23824 <z_reschedule+0x44>
	return _kernel.ready_q.cache;
   237ee:	4b19      	ldr	r3, [pc, #100]	; (23854 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   237f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   237f2:	689b      	ldr	r3, [r3, #8]
   237f4:	429a      	cmp	r2, r3
   237f6:	d015      	beq.n	23824 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237f8:	f001 fab2 	bl	24d60 <z_spin_unlock_valid>
   237fc:	b968      	cbnz	r0, 2381a <z_reschedule+0x3a>
   237fe:	239b      	movs	r3, #155	; 0x9b
   23800:	4a15      	ldr	r2, [pc, #84]	; (23858 <z_reschedule+0x78>)
   23802:	4916      	ldr	r1, [pc, #88]	; (2385c <z_reschedule+0x7c>)
   23804:	4816      	ldr	r0, [pc, #88]	; (23860 <z_reschedule+0x80>)
   23806:	f008 fe34 	bl	2c472 <printk>
   2380a:	4621      	mov	r1, r4
   2380c:	4815      	ldr	r0, [pc, #84]	; (23864 <z_reschedule+0x84>)
   2380e:	f008 fe30 	bl	2c472 <printk>
   23812:	219b      	movs	r1, #155	; 0x9b
   23814:	4810      	ldr	r0, [pc, #64]	; (23858 <z_reschedule+0x78>)
   23816:	f009 f849 	bl	2c8ac <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2381a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   2381e:	2000      	movs	r0, #0
   23820:	f7f0 be96 	b.w	14550 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23824:	4620      	mov	r0, r4
   23826:	f001 fa9b 	bl	24d60 <z_spin_unlock_valid>
   2382a:	b968      	cbnz	r0, 23848 <z_reschedule+0x68>
   2382c:	2384      	movs	r3, #132	; 0x84
   2382e:	4a0a      	ldr	r2, [pc, #40]	; (23858 <z_reschedule+0x78>)
   23830:	490a      	ldr	r1, [pc, #40]	; (2385c <z_reschedule+0x7c>)
   23832:	480b      	ldr	r0, [pc, #44]	; (23860 <z_reschedule+0x80>)
   23834:	f008 fe1d 	bl	2c472 <printk>
   23838:	4621      	mov	r1, r4
   2383a:	480a      	ldr	r0, [pc, #40]	; (23864 <z_reschedule+0x84>)
   2383c:	f008 fe19 	bl	2c472 <printk>
   23840:	2184      	movs	r1, #132	; 0x84
   23842:	4805      	ldr	r0, [pc, #20]	; (23858 <z_reschedule+0x78>)
   23844:	f009 f832 	bl	2c8ac <assert_post_action>
   23848:	f385 8811 	msr	BASEPRI, r5
   2384c:	f3bf 8f6f 	isb	sy
   23850:	bd38      	pop	{r3, r4, r5, pc}
   23852:	bf00      	nop
   23854:	20021de0 	.word	0x20021de0
   23858:	0003056a 	.word	0x0003056a
   2385c:	00030590 	.word	0x00030590
   23860:	0003049a 	.word	0x0003049a
   23864:	000305a7 	.word	0x000305a7

00023868 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   23868:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2386a:	f04f 0320 	mov.w	r3, #32
   2386e:	f3ef 8511 	mrs	r5, BASEPRI
   23872:	f383 8811 	msr	BASEPRI, r3
   23876:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2387a:	482b      	ldr	r0, [pc, #172]	; (23928 <k_sched_lock+0xc0>)
   2387c:	f001 fa62 	bl	24d44 <z_spin_lock_valid>
   23880:	b968      	cbnz	r0, 2389e <k_sched_lock+0x36>
   23882:	235c      	movs	r3, #92	; 0x5c
   23884:	4a29      	ldr	r2, [pc, #164]	; (2392c <k_sched_lock+0xc4>)
   23886:	492a      	ldr	r1, [pc, #168]	; (23930 <k_sched_lock+0xc8>)
   23888:	482a      	ldr	r0, [pc, #168]	; (23934 <k_sched_lock+0xcc>)
   2388a:	f008 fdf2 	bl	2c472 <printk>
   2388e:	4926      	ldr	r1, [pc, #152]	; (23928 <k_sched_lock+0xc0>)
   23890:	4829      	ldr	r0, [pc, #164]	; (23938 <k_sched_lock+0xd0>)
   23892:	f008 fdee 	bl	2c472 <printk>
   23896:	215c      	movs	r1, #92	; 0x5c
   23898:	4824      	ldr	r0, [pc, #144]	; (2392c <k_sched_lock+0xc4>)
   2389a:	f009 f807 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2389e:	4822      	ldr	r0, [pc, #136]	; (23928 <k_sched_lock+0xc0>)
   238a0:	f001 fa6e 	bl	24d80 <z_spin_lock_set_owner>
   238a4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   238a8:	b173      	cbz	r3, 238c8 <k_sched_lock+0x60>
   238aa:	4924      	ldr	r1, [pc, #144]	; (2393c <k_sched_lock+0xd4>)
   238ac:	f44f 7386 	mov.w	r3, #268	; 0x10c
   238b0:	4a23      	ldr	r2, [pc, #140]	; (23940 <k_sched_lock+0xd8>)
   238b2:	4820      	ldr	r0, [pc, #128]	; (23934 <k_sched_lock+0xcc>)
   238b4:	f008 fddd 	bl	2c472 <printk>
   238b8:	4822      	ldr	r0, [pc, #136]	; (23944 <k_sched_lock+0xdc>)
   238ba:	f008 fdda 	bl	2c472 <printk>
   238be:	f44f 7186 	mov.w	r1, #268	; 0x10c
   238c2:	481f      	ldr	r0, [pc, #124]	; (23940 <k_sched_lock+0xd8>)
   238c4:	f008 fff2 	bl	2c8ac <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   238c8:	4c1f      	ldr	r4, [pc, #124]	; (23948 <k_sched_lock+0xe0>)
   238ca:	68a2      	ldr	r2, [r4, #8]
   238cc:	7bd2      	ldrb	r2, [r2, #15]
   238ce:	2a01      	cmp	r2, #1
   238d0:	d10e      	bne.n	238f0 <k_sched_lock+0x88>
   238d2:	491e      	ldr	r1, [pc, #120]	; (2394c <k_sched_lock+0xe4>)
   238d4:	f240 130d 	movw	r3, #269	; 0x10d
   238d8:	4a19      	ldr	r2, [pc, #100]	; (23940 <k_sched_lock+0xd8>)
   238da:	4816      	ldr	r0, [pc, #88]	; (23934 <k_sched_lock+0xcc>)
   238dc:	f008 fdc9 	bl	2c472 <printk>
   238e0:	4818      	ldr	r0, [pc, #96]	; (23944 <k_sched_lock+0xdc>)
   238e2:	f008 fdc6 	bl	2c472 <printk>
   238e6:	f240 110d 	movw	r1, #269	; 0x10d
   238ea:	4815      	ldr	r0, [pc, #84]	; (23940 <k_sched_lock+0xd8>)
   238ec:	f008 ffde 	bl	2c8ac <assert_post_action>
	--_current->base.sched_locked;
   238f0:	68a2      	ldr	r2, [r4, #8]
   238f2:	7bd3      	ldrb	r3, [r2, #15]
   238f4:	3b01      	subs	r3, #1
   238f6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238f8:	480b      	ldr	r0, [pc, #44]	; (23928 <k_sched_lock+0xc0>)
   238fa:	f001 fa31 	bl	24d60 <z_spin_unlock_valid>
   238fe:	b968      	cbnz	r0, 2391c <k_sched_lock+0xb4>
   23900:	2384      	movs	r3, #132	; 0x84
   23902:	4a0a      	ldr	r2, [pc, #40]	; (2392c <k_sched_lock+0xc4>)
   23904:	4912      	ldr	r1, [pc, #72]	; (23950 <k_sched_lock+0xe8>)
   23906:	480b      	ldr	r0, [pc, #44]	; (23934 <k_sched_lock+0xcc>)
   23908:	f008 fdb3 	bl	2c472 <printk>
   2390c:	4906      	ldr	r1, [pc, #24]	; (23928 <k_sched_lock+0xc0>)
   2390e:	4811      	ldr	r0, [pc, #68]	; (23954 <k_sched_lock+0xec>)
   23910:	f008 fdaf 	bl	2c472 <printk>
   23914:	2184      	movs	r1, #132	; 0x84
   23916:	4805      	ldr	r0, [pc, #20]	; (2392c <k_sched_lock+0xc4>)
   23918:	f008 ffc8 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   2391c:	f385 8811 	msr	BASEPRI, r5
   23920:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   23924:	bd38      	pop	{r3, r4, r5, pc}
   23926:	bf00      	nop
   23928:	20021e18 	.word	0x20021e18
   2392c:	0003056a 	.word	0x0003056a
   23930:	000305bc 	.word	0x000305bc
   23934:	0003049a 	.word	0x0003049a
   23938:	000305d1 	.word	0x000305d1
   2393c:	00032f55 	.word	0x00032f55
   23940:	00032fa3 	.word	0x00032fa3
   23944:	00030ac7 	.word	0x00030ac7
   23948:	20021de0 	.word	0x20021de0
   2394c:	00032fce 	.word	0x00032fce
   23950:	00030590 	.word	0x00030590
   23954:	000305a7 	.word	0x000305a7

00023958 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   23958:	4b11      	ldr	r3, [pc, #68]	; (239a0 <z_priq_dumb_remove+0x48>)
{
   2395a:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2395c:	f103 0228 	add.w	r2, r3, #40	; 0x28
   23960:	4282      	cmp	r2, r0
{
   23962:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   23964:	d105      	bne.n	23972 <z_priq_dumb_remove+0x1a>
   23966:	689b      	ldr	r3, [r3, #8]
   23968:	428b      	cmp	r3, r1
   2396a:	d102      	bne.n	23972 <z_priq_dumb_remove+0x1a>
   2396c:	7b4b      	ldrb	r3, [r1, #13]
   2396e:	06db      	lsls	r3, r3, #27
   23970:	d115      	bne.n	2399e <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23972:	4b0c      	ldr	r3, [pc, #48]	; (239a4 <z_priq_dumb_remove+0x4c>)
   23974:	429c      	cmp	r4, r3
   23976:	d10b      	bne.n	23990 <z_priq_dumb_remove+0x38>
   23978:	490b      	ldr	r1, [pc, #44]	; (239a8 <z_priq_dumb_remove+0x50>)
   2397a:	480c      	ldr	r0, [pc, #48]	; (239ac <z_priq_dumb_remove+0x54>)
   2397c:	f240 339f 	movw	r3, #927	; 0x39f
   23980:	4a0b      	ldr	r2, [pc, #44]	; (239b0 <z_priq_dumb_remove+0x58>)
   23982:	f008 fd76 	bl	2c472 <printk>
   23986:	f240 319f 	movw	r1, #927	; 0x39f
   2398a:	4809      	ldr	r0, [pc, #36]	; (239b0 <z_priq_dumb_remove+0x58>)
   2398c:	f008 ff8e 	bl	2c8ac <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   23990:	e9d4 3200 	ldrd	r3, r2, [r4]
   23994:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   23996:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23998:	2300      	movs	r3, #0
	node->prev = NULL;
   2399a:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2399e:	bd10      	pop	{r4, pc}
   239a0:	20021de0 	.word	0x20021de0
   239a4:	200211b8 	.word	0x200211b8
   239a8:	00033037 	.word	0x00033037
   239ac:	0003049a 	.word	0x0003049a
   239b0:	00032ffe 	.word	0x00032ffe

000239b4 <z_unpend_thread>:
{
   239b4:	b538      	push	{r3, r4, r5, lr}
   239b6:	4604      	mov	r4, r0
	__asm__ volatile(
   239b8:	f04f 0320 	mov.w	r3, #32
   239bc:	f3ef 8511 	mrs	r5, BASEPRI
   239c0:	f383 8811 	msr	BASEPRI, r3
   239c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239c8:	4819      	ldr	r0, [pc, #100]	; (23a30 <z_unpend_thread+0x7c>)
   239ca:	f001 f9bb 	bl	24d44 <z_spin_lock_valid>
   239ce:	b968      	cbnz	r0, 239ec <z_unpend_thread+0x38>
   239d0:	235c      	movs	r3, #92	; 0x5c
   239d2:	4a18      	ldr	r2, [pc, #96]	; (23a34 <z_unpend_thread+0x80>)
   239d4:	4918      	ldr	r1, [pc, #96]	; (23a38 <z_unpend_thread+0x84>)
   239d6:	4819      	ldr	r0, [pc, #100]	; (23a3c <z_unpend_thread+0x88>)
   239d8:	f008 fd4b 	bl	2c472 <printk>
   239dc:	4914      	ldr	r1, [pc, #80]	; (23a30 <z_unpend_thread+0x7c>)
   239de:	4818      	ldr	r0, [pc, #96]	; (23a40 <z_unpend_thread+0x8c>)
   239e0:	f008 fd47 	bl	2c472 <printk>
   239e4:	215c      	movs	r1, #92	; 0x5c
   239e6:	4813      	ldr	r0, [pc, #76]	; (23a34 <z_unpend_thread+0x80>)
   239e8:	f008 ff60 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   239ec:	4810      	ldr	r0, [pc, #64]	; (23a30 <z_unpend_thread+0x7c>)
   239ee:	f001 f9c7 	bl	24d80 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   239f2:	4620      	mov	r0, r4
   239f4:	f00b f826 	bl	2ea44 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239f8:	480d      	ldr	r0, [pc, #52]	; (23a30 <z_unpend_thread+0x7c>)
   239fa:	f001 f9b1 	bl	24d60 <z_spin_unlock_valid>
   239fe:	b968      	cbnz	r0, 23a1c <z_unpend_thread+0x68>
   23a00:	2384      	movs	r3, #132	; 0x84
   23a02:	4a0c      	ldr	r2, [pc, #48]	; (23a34 <z_unpend_thread+0x80>)
   23a04:	490f      	ldr	r1, [pc, #60]	; (23a44 <z_unpend_thread+0x90>)
   23a06:	480d      	ldr	r0, [pc, #52]	; (23a3c <z_unpend_thread+0x88>)
   23a08:	f008 fd33 	bl	2c472 <printk>
   23a0c:	4908      	ldr	r1, [pc, #32]	; (23a30 <z_unpend_thread+0x7c>)
   23a0e:	480e      	ldr	r0, [pc, #56]	; (23a48 <z_unpend_thread+0x94>)
   23a10:	f008 fd2f 	bl	2c472 <printk>
   23a14:	2184      	movs	r1, #132	; 0x84
   23a16:	4807      	ldr	r0, [pc, #28]	; (23a34 <z_unpend_thread+0x80>)
   23a18:	f008 ff48 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23a1c:	f385 8811 	msr	BASEPRI, r5
   23a20:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   23a24:	f104 0018 	add.w	r0, r4, #24
}
   23a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23a2c:	f001 bb82 	b.w	25134 <z_abort_timeout>
   23a30:	20021e18 	.word	0x20021e18
   23a34:	0003056a 	.word	0x0003056a
   23a38:	000305bc 	.word	0x000305bc
   23a3c:	0003049a 	.word	0x0003049a
   23a40:	000305d1 	.word	0x000305d1
   23a44:	00030590 	.word	0x00030590
   23a48:	000305a7 	.word	0x000305a7

00023a4c <update_cache>:
{
   23a4c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   23a4e:	4c10      	ldr	r4, [pc, #64]	; (23a90 <update_cache+0x44>)
{
   23a50:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   23a52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   23a56:	f00b f804 	bl	2ea62 <z_priq_dumb_best>
   23a5a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   23a5c:	68a3      	ldr	r3, [r4, #8]
   23a5e:	7b59      	ldrb	r1, [r3, #13]
   23a60:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   23a62:	bf44      	itt	mi
   23a64:	f041 0108 	orrmi.w	r1, r1, #8
   23a68:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   23a6a:	b905      	cbnz	r5, 23a6e <update_cache+0x22>
   23a6c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   23a6e:	b94e      	cbnz	r6, 23a84 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   23a70:	7b5a      	ldrb	r2, [r3, #13]
   23a72:	06d2      	lsls	r2, r2, #27
   23a74:	d106      	bne.n	23a84 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23a76:	69aa      	ldr	r2, [r5, #24]
   23a78:	b922      	cbnz	r2, 23a84 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   23a7a:	89da      	ldrh	r2, [r3, #14]
   23a7c:	2a7f      	cmp	r2, #127	; 0x7f
   23a7e:	d901      	bls.n	23a84 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   23a80:	6263      	str	r3, [r4, #36]	; 0x24
}
   23a82:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   23a84:	42ab      	cmp	r3, r5
   23a86:	d001      	beq.n	23a8c <update_cache+0x40>
			z_reset_time_slice();
   23a88:	f7ff fda2 	bl	235d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23a8c:	6265      	str	r5, [r4, #36]	; 0x24
}
   23a8e:	e7f8      	b.n	23a82 <update_cache+0x36>
   23a90:	20021de0 	.word	0x20021de0

00023a94 <k_sched_unlock>:
{
   23a94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23a96:	f04f 0320 	mov.w	r3, #32
   23a9a:	f3ef 8511 	mrs	r5, BASEPRI
   23a9e:	f383 8811 	msr	BASEPRI, r3
   23aa2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23aa6:	482d      	ldr	r0, [pc, #180]	; (23b5c <k_sched_unlock+0xc8>)
   23aa8:	f001 f94c 	bl	24d44 <z_spin_lock_valid>
   23aac:	b968      	cbnz	r0, 23aca <k_sched_unlock+0x36>
   23aae:	235c      	movs	r3, #92	; 0x5c
   23ab0:	4a2b      	ldr	r2, [pc, #172]	; (23b60 <k_sched_unlock+0xcc>)
   23ab2:	492c      	ldr	r1, [pc, #176]	; (23b64 <k_sched_unlock+0xd0>)
   23ab4:	482c      	ldr	r0, [pc, #176]	; (23b68 <k_sched_unlock+0xd4>)
   23ab6:	f008 fcdc 	bl	2c472 <printk>
   23aba:	4928      	ldr	r1, [pc, #160]	; (23b5c <k_sched_unlock+0xc8>)
   23abc:	482b      	ldr	r0, [pc, #172]	; (23b6c <k_sched_unlock+0xd8>)
   23abe:	f008 fcd8 	bl	2c472 <printk>
   23ac2:	215c      	movs	r1, #92	; 0x5c
   23ac4:	4826      	ldr	r0, [pc, #152]	; (23b60 <k_sched_unlock+0xcc>)
   23ac6:	f008 fef1 	bl	2c8ac <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   23aca:	4c29      	ldr	r4, [pc, #164]	; (23b70 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   23acc:	4823      	ldr	r0, [pc, #140]	; (23b5c <k_sched_unlock+0xc8>)
   23ace:	f001 f957 	bl	24d80 <z_spin_lock_set_owner>
   23ad2:	68a2      	ldr	r2, [r4, #8]
   23ad4:	7bd2      	ldrb	r2, [r2, #15]
   23ad6:	b972      	cbnz	r2, 23af6 <k_sched_unlock+0x62>
   23ad8:	4926      	ldr	r1, [pc, #152]	; (23b74 <k_sched_unlock+0xe0>)
   23ada:	f240 333a 	movw	r3, #826	; 0x33a
   23ade:	4a26      	ldr	r2, [pc, #152]	; (23b78 <k_sched_unlock+0xe4>)
   23ae0:	4821      	ldr	r0, [pc, #132]	; (23b68 <k_sched_unlock+0xd4>)
   23ae2:	f008 fcc6 	bl	2c472 <printk>
   23ae6:	4825      	ldr	r0, [pc, #148]	; (23b7c <k_sched_unlock+0xe8>)
   23ae8:	f008 fcc3 	bl	2c472 <printk>
   23aec:	f240 313a 	movw	r1, #826	; 0x33a
   23af0:	4821      	ldr	r0, [pc, #132]	; (23b78 <k_sched_unlock+0xe4>)
   23af2:	f008 fedb 	bl	2c8ac <assert_post_action>
   23af6:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   23afa:	b173      	cbz	r3, 23b1a <k_sched_unlock+0x86>
   23afc:	4920      	ldr	r1, [pc, #128]	; (23b80 <k_sched_unlock+0xec>)
   23afe:	f240 333b 	movw	r3, #827	; 0x33b
   23b02:	4a1d      	ldr	r2, [pc, #116]	; (23b78 <k_sched_unlock+0xe4>)
   23b04:	4818      	ldr	r0, [pc, #96]	; (23b68 <k_sched_unlock+0xd4>)
   23b06:	f008 fcb4 	bl	2c472 <printk>
   23b0a:	481c      	ldr	r0, [pc, #112]	; (23b7c <k_sched_unlock+0xe8>)
   23b0c:	f008 fcb1 	bl	2c472 <printk>
   23b10:	f240 313b 	movw	r1, #827	; 0x33b
   23b14:	4818      	ldr	r0, [pc, #96]	; (23b78 <k_sched_unlock+0xe4>)
   23b16:	f008 fec9 	bl	2c8ac <assert_post_action>
		++_current->base.sched_locked;
   23b1a:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   23b1c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   23b1e:	7bd3      	ldrb	r3, [r2, #15]
   23b20:	3301      	adds	r3, #1
   23b22:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23b24:	f7ff ff92 	bl	23a4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b28:	480c      	ldr	r0, [pc, #48]	; (23b5c <k_sched_unlock+0xc8>)
   23b2a:	f001 f919 	bl	24d60 <z_spin_unlock_valid>
   23b2e:	b968      	cbnz	r0, 23b4c <k_sched_unlock+0xb8>
   23b30:	2384      	movs	r3, #132	; 0x84
   23b32:	4a0b      	ldr	r2, [pc, #44]	; (23b60 <k_sched_unlock+0xcc>)
   23b34:	4913      	ldr	r1, [pc, #76]	; (23b84 <k_sched_unlock+0xf0>)
   23b36:	480c      	ldr	r0, [pc, #48]	; (23b68 <k_sched_unlock+0xd4>)
   23b38:	f008 fc9b 	bl	2c472 <printk>
   23b3c:	4907      	ldr	r1, [pc, #28]	; (23b5c <k_sched_unlock+0xc8>)
   23b3e:	4812      	ldr	r0, [pc, #72]	; (23b88 <k_sched_unlock+0xf4>)
   23b40:	f008 fc97 	bl	2c472 <printk>
   23b44:	2184      	movs	r1, #132	; 0x84
   23b46:	4806      	ldr	r0, [pc, #24]	; (23b60 <k_sched_unlock+0xcc>)
   23b48:	f008 feb0 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23b4c:	f385 8811 	msr	BASEPRI, r5
   23b50:	f3bf 8f6f 	isb	sy
}
   23b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   23b58:	f00a bf6a 	b.w	2ea30 <z_reschedule_unlocked>
   23b5c:	20021e18 	.word	0x20021e18
   23b60:	0003056a 	.word	0x0003056a
   23b64:	000305bc 	.word	0x000305bc
   23b68:	0003049a 	.word	0x0003049a
   23b6c:	000305d1 	.word	0x000305d1
   23b70:	20021de0 	.word	0x20021de0
   23b74:	00033058 	.word	0x00033058
   23b78:	00032ffe 	.word	0x00032ffe
   23b7c:	00030ac7 	.word	0x00030ac7
   23b80:	00032f55 	.word	0x00032f55
   23b84:	00030590 	.word	0x00030590
   23b88:	000305a7 	.word	0x000305a7

00023b8c <ready_thread>:
{
   23b8c:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23b8e:	7b43      	ldrb	r3, [r0, #13]
   23b90:	4604      	mov	r4, r0
   23b92:	06db      	lsls	r3, r3, #27
   23b94:	d13d      	bne.n	23c12 <ready_thread+0x86>
	return !sys_dnode_is_linked(&t->node);
   23b96:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
   23b98:	2d00      	cmp	r5, #0
   23b9a:	d13a      	bne.n	23c12 <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23b9c:	4b1d      	ldr	r3, [pc, #116]	; (23c14 <ready_thread+0x88>)
   23b9e:	4298      	cmp	r0, r3
   23ba0:	d10b      	bne.n	23bba <ready_thread+0x2e>
   23ba2:	491d      	ldr	r1, [pc, #116]	; (23c18 <ready_thread+0x8c>)
   23ba4:	481d      	ldr	r0, [pc, #116]	; (23c1c <ready_thread+0x90>)
   23ba6:	f240 3389 	movw	r3, #905	; 0x389
   23baa:	4a1d      	ldr	r2, [pc, #116]	; (23c20 <ready_thread+0x94>)
   23bac:	f008 fc61 	bl	2c472 <printk>
   23bb0:	f240 3189 	movw	r1, #905	; 0x389
   23bb4:	481a      	ldr	r0, [pc, #104]	; (23c20 <ready_thread+0x94>)
   23bb6:	f008 fe79 	bl	2c8ac <assert_post_action>
	return list->head == list;
   23bba:	4a1a      	ldr	r2, [pc, #104]	; (23c24 <ready_thread+0x98>)
   23bbc:	4613      	mov	r3, r2
   23bbe:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23bc2:	4298      	cmp	r0, r3
   23bc4:	bf18      	it	ne
   23bc6:	4605      	movne	r5, r0
   23bc8:	2d00      	cmp	r5, #0
   23bca:	4619      	mov	r1, r3
   23bcc:	462b      	mov	r3, r5
   23bce:	bf38      	it	cc
   23bd0:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23bd2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23bd4:	b1bb      	cbz	r3, 23c06 <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
   23bd6:	f994 600e 	ldrsb.w	r6, [r4, #14]
   23bda:	f993 500e 	ldrsb.w	r5, [r3, #14]
   23bde:	42ae      	cmp	r6, r5
   23be0:	db03      	blt.n	23bea <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
   23be2:	4298      	cmp	r0, r3
   23be4:	d00f      	beq.n	23c06 <ready_thread+0x7a>
   23be6:	681b      	ldr	r3, [r3, #0]
   23be8:	e7f4      	b.n	23bd4 <ready_thread+0x48>
	node->prev = successor->prev;
   23bea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23bec:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   23bf0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23bf2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23bf4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   23bf6:	2000      	movs	r0, #0
   23bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23bfc:	7363      	strb	r3, [r4, #13]
}
   23bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   23c02:	f7ff bf23 	b.w	23a4c <update_cache>
	node->prev = list->tail;
   23c06:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   23c0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23c0c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23c0e:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   23c10:	e7f0      	b.n	23bf4 <ready_thread+0x68>
}
   23c12:	bd70      	pop	{r4, r5, r6, pc}
   23c14:	200211b8 	.word	0x200211b8
   23c18:	00033037 	.word	0x00033037
   23c1c:	0003049a 	.word	0x0003049a
   23c20:	00032ffe 	.word	0x00032ffe
   23c24:	20021de0 	.word	0x20021de0

00023c28 <z_ready_thread>:
{
   23c28:	b538      	push	{r3, r4, r5, lr}
   23c2a:	4604      	mov	r4, r0
	__asm__ volatile(
   23c2c:	f04f 0320 	mov.w	r3, #32
   23c30:	f3ef 8511 	mrs	r5, BASEPRI
   23c34:	f383 8811 	msr	BASEPRI, r3
   23c38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c3c:	4817      	ldr	r0, [pc, #92]	; (23c9c <z_ready_thread+0x74>)
   23c3e:	f001 f881 	bl	24d44 <z_spin_lock_valid>
   23c42:	b968      	cbnz	r0, 23c60 <z_ready_thread+0x38>
   23c44:	235c      	movs	r3, #92	; 0x5c
   23c46:	4a16      	ldr	r2, [pc, #88]	; (23ca0 <z_ready_thread+0x78>)
   23c48:	4916      	ldr	r1, [pc, #88]	; (23ca4 <z_ready_thread+0x7c>)
   23c4a:	4817      	ldr	r0, [pc, #92]	; (23ca8 <z_ready_thread+0x80>)
   23c4c:	f008 fc11 	bl	2c472 <printk>
   23c50:	4912      	ldr	r1, [pc, #72]	; (23c9c <z_ready_thread+0x74>)
   23c52:	4816      	ldr	r0, [pc, #88]	; (23cac <z_ready_thread+0x84>)
   23c54:	f008 fc0d 	bl	2c472 <printk>
   23c58:	215c      	movs	r1, #92	; 0x5c
   23c5a:	4811      	ldr	r0, [pc, #68]	; (23ca0 <z_ready_thread+0x78>)
   23c5c:	f008 fe26 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23c60:	480e      	ldr	r0, [pc, #56]	; (23c9c <z_ready_thread+0x74>)
   23c62:	f001 f88d 	bl	24d80 <z_spin_lock_set_owner>
		ready_thread(thread);
   23c66:	4620      	mov	r0, r4
   23c68:	f7ff ff90 	bl	23b8c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c6c:	480b      	ldr	r0, [pc, #44]	; (23c9c <z_ready_thread+0x74>)
   23c6e:	f001 f877 	bl	24d60 <z_spin_unlock_valid>
   23c72:	b968      	cbnz	r0, 23c90 <z_ready_thread+0x68>
   23c74:	2384      	movs	r3, #132	; 0x84
   23c76:	4a0a      	ldr	r2, [pc, #40]	; (23ca0 <z_ready_thread+0x78>)
   23c78:	490d      	ldr	r1, [pc, #52]	; (23cb0 <z_ready_thread+0x88>)
   23c7a:	480b      	ldr	r0, [pc, #44]	; (23ca8 <z_ready_thread+0x80>)
   23c7c:	f008 fbf9 	bl	2c472 <printk>
   23c80:	4906      	ldr	r1, [pc, #24]	; (23c9c <z_ready_thread+0x74>)
   23c82:	480c      	ldr	r0, [pc, #48]	; (23cb4 <z_ready_thread+0x8c>)
   23c84:	f008 fbf5 	bl	2c472 <printk>
   23c88:	2184      	movs	r1, #132	; 0x84
   23c8a:	4805      	ldr	r0, [pc, #20]	; (23ca0 <z_ready_thread+0x78>)
   23c8c:	f008 fe0e 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23c90:	f385 8811 	msr	BASEPRI, r5
   23c94:	f3bf 8f6f 	isb	sy
}
   23c98:	bd38      	pop	{r3, r4, r5, pc}
   23c9a:	bf00      	nop
   23c9c:	20021e18 	.word	0x20021e18
   23ca0:	0003056a 	.word	0x0003056a
   23ca4:	000305bc 	.word	0x000305bc
   23ca8:	0003049a 	.word	0x0003049a
   23cac:	000305d1 	.word	0x000305d1
   23cb0:	00030590 	.word	0x00030590
   23cb4:	000305a7 	.word	0x000305a7

00023cb8 <z_sched_start>:
{
   23cb8:	b538      	push	{r3, r4, r5, lr}
   23cba:	4604      	mov	r4, r0
	__asm__ volatile(
   23cbc:	f04f 0320 	mov.w	r3, #32
   23cc0:	f3ef 8511 	mrs	r5, BASEPRI
   23cc4:	f383 8811 	msr	BASEPRI, r3
   23cc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ccc:	481d      	ldr	r0, [pc, #116]	; (23d44 <z_sched_start+0x8c>)
   23cce:	f001 f839 	bl	24d44 <z_spin_lock_valid>
   23cd2:	b968      	cbnz	r0, 23cf0 <z_sched_start+0x38>
   23cd4:	235c      	movs	r3, #92	; 0x5c
   23cd6:	4a1c      	ldr	r2, [pc, #112]	; (23d48 <z_sched_start+0x90>)
   23cd8:	491c      	ldr	r1, [pc, #112]	; (23d4c <z_sched_start+0x94>)
   23cda:	481d      	ldr	r0, [pc, #116]	; (23d50 <z_sched_start+0x98>)
   23cdc:	f008 fbc9 	bl	2c472 <printk>
   23ce0:	4918      	ldr	r1, [pc, #96]	; (23d44 <z_sched_start+0x8c>)
   23ce2:	481c      	ldr	r0, [pc, #112]	; (23d54 <z_sched_start+0x9c>)
   23ce4:	f008 fbc5 	bl	2c472 <printk>
   23ce8:	215c      	movs	r1, #92	; 0x5c
   23cea:	4817      	ldr	r0, [pc, #92]	; (23d48 <z_sched_start+0x90>)
   23cec:	f008 fdde 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23cf0:	4814      	ldr	r0, [pc, #80]	; (23d44 <z_sched_start+0x8c>)
   23cf2:	f001 f845 	bl	24d80 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   23cf6:	7b63      	ldrb	r3, [r4, #13]
   23cf8:	075a      	lsls	r2, r3, #29
   23cfa:	d416      	bmi.n	23d2a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cfc:	4811      	ldr	r0, [pc, #68]	; (23d44 <z_sched_start+0x8c>)
   23cfe:	f001 f82f 	bl	24d60 <z_spin_unlock_valid>
   23d02:	b968      	cbnz	r0, 23d20 <z_sched_start+0x68>
   23d04:	2384      	movs	r3, #132	; 0x84
   23d06:	4a10      	ldr	r2, [pc, #64]	; (23d48 <z_sched_start+0x90>)
   23d08:	4913      	ldr	r1, [pc, #76]	; (23d58 <z_sched_start+0xa0>)
   23d0a:	4811      	ldr	r0, [pc, #68]	; (23d50 <z_sched_start+0x98>)
   23d0c:	f008 fbb1 	bl	2c472 <printk>
   23d10:	490c      	ldr	r1, [pc, #48]	; (23d44 <z_sched_start+0x8c>)
   23d12:	4812      	ldr	r0, [pc, #72]	; (23d5c <z_sched_start+0xa4>)
   23d14:	f008 fbad 	bl	2c472 <printk>
   23d18:	2184      	movs	r1, #132	; 0x84
   23d1a:	480b      	ldr	r0, [pc, #44]	; (23d48 <z_sched_start+0x90>)
   23d1c:	f008 fdc6 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23d20:	f385 8811 	msr	BASEPRI, r5
   23d24:	f3bf 8f6f 	isb	sy
}
   23d28:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23d2a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   23d2e:	4620      	mov	r0, r4
   23d30:	7363      	strb	r3, [r4, #13]
   23d32:	f7ff ff2b 	bl	23b8c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23d36:	4629      	mov	r1, r5
}
   23d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   23d3c:	4801      	ldr	r0, [pc, #4]	; (23d44 <z_sched_start+0x8c>)
   23d3e:	f7ff bd4f 	b.w	237e0 <z_reschedule>
   23d42:	bf00      	nop
   23d44:	20021e18 	.word	0x20021e18
   23d48:	0003056a 	.word	0x0003056a
   23d4c:	000305bc 	.word	0x000305bc
   23d50:	0003049a 	.word	0x0003049a
   23d54:	000305d1 	.word	0x000305d1
   23d58:	00030590 	.word	0x00030590
   23d5c:	000305a7 	.word	0x000305a7

00023d60 <z_thread_timeout>:
{
   23d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23d62:	4604      	mov	r4, r0
	__asm__ volatile(
   23d64:	f04f 0320 	mov.w	r3, #32
   23d68:	f3ef 8511 	mrs	r5, BASEPRI
   23d6c:	f383 8811 	msr	BASEPRI, r3
   23d70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d74:	481e      	ldr	r0, [pc, #120]	; (23df0 <z_thread_timeout+0x90>)
   23d76:	f000 ffe5 	bl	24d44 <z_spin_lock_valid>
   23d7a:	b968      	cbnz	r0, 23d98 <z_thread_timeout+0x38>
   23d7c:	235c      	movs	r3, #92	; 0x5c
   23d7e:	4a1d      	ldr	r2, [pc, #116]	; (23df4 <z_thread_timeout+0x94>)
   23d80:	491d      	ldr	r1, [pc, #116]	; (23df8 <z_thread_timeout+0x98>)
   23d82:	481e      	ldr	r0, [pc, #120]	; (23dfc <z_thread_timeout+0x9c>)
   23d84:	f008 fb75 	bl	2c472 <printk>
   23d88:	4919      	ldr	r1, [pc, #100]	; (23df0 <z_thread_timeout+0x90>)
   23d8a:	481d      	ldr	r0, [pc, #116]	; (23e00 <z_thread_timeout+0xa0>)
   23d8c:	f008 fb71 	bl	2c472 <printk>
   23d90:	215c      	movs	r1, #92	; 0x5c
   23d92:	4818      	ldr	r0, [pc, #96]	; (23df4 <z_thread_timeout+0x94>)
   23d94:	f008 fd8a 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23d98:	4815      	ldr	r0, [pc, #84]	; (23df0 <z_thread_timeout+0x90>)
   23d9a:	f000 fff1 	bl	24d80 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   23d9e:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   23da2:	f1a4 0018 	sub.w	r0, r4, #24
		if (thread->base.pended_on != NULL) {
   23da6:	b11b      	cbz	r3, 23db0 <z_thread_timeout+0x50>
			unpend_thread_no_timeout(thread);
   23da8:	9001      	str	r0, [sp, #4]
   23daa:	f00a fe4b 	bl	2ea44 <unpend_thread_no_timeout>
   23dae:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23db0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23db4:	f023 0314 	bic.w	r3, r3, #20
   23db8:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   23dbc:	f7ff fee6 	bl	23b8c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23dc0:	480b      	ldr	r0, [pc, #44]	; (23df0 <z_thread_timeout+0x90>)
   23dc2:	f000 ffcd 	bl	24d60 <z_spin_unlock_valid>
   23dc6:	b968      	cbnz	r0, 23de4 <z_thread_timeout+0x84>
   23dc8:	2384      	movs	r3, #132	; 0x84
   23dca:	4a0a      	ldr	r2, [pc, #40]	; (23df4 <z_thread_timeout+0x94>)
   23dcc:	490d      	ldr	r1, [pc, #52]	; (23e04 <z_thread_timeout+0xa4>)
   23dce:	480b      	ldr	r0, [pc, #44]	; (23dfc <z_thread_timeout+0x9c>)
   23dd0:	f008 fb4f 	bl	2c472 <printk>
   23dd4:	4906      	ldr	r1, [pc, #24]	; (23df0 <z_thread_timeout+0x90>)
   23dd6:	480c      	ldr	r0, [pc, #48]	; (23e08 <z_thread_timeout+0xa8>)
   23dd8:	f008 fb4b 	bl	2c472 <printk>
   23ddc:	2184      	movs	r1, #132	; 0x84
   23dde:	4805      	ldr	r0, [pc, #20]	; (23df4 <z_thread_timeout+0x94>)
   23de0:	f008 fd64 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23de4:	f385 8811 	msr	BASEPRI, r5
   23de8:	f3bf 8f6f 	isb	sy
}
   23dec:	b003      	add	sp, #12
   23dee:	bd30      	pop	{r4, r5, pc}
   23df0:	20021e18 	.word	0x20021e18
   23df4:	0003056a 	.word	0x0003056a
   23df8:	000305bc 	.word	0x000305bc
   23dfc:	0003049a 	.word	0x0003049a
   23e00:	000305d1 	.word	0x000305d1
   23e04:	00030590 	.word	0x00030590
   23e08:	000305a7 	.word	0x000305a7

00023e0c <move_thread_to_end_of_prio_q>:
{
   23e0c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   23e0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   23e12:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23e14:	2b00      	cmp	r3, #0
   23e16:	da03      	bge.n	23e20 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   23e18:	4601      	mov	r1, r0
   23e1a:	481f      	ldr	r0, [pc, #124]	; (23e98 <move_thread_to_end_of_prio_q+0x8c>)
   23e1c:	f7ff fd9c 	bl	23958 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23e20:	4b1e      	ldr	r3, [pc, #120]	; (23e9c <move_thread_to_end_of_prio_q+0x90>)
   23e22:	429c      	cmp	r4, r3
   23e24:	d10b      	bne.n	23e3e <move_thread_to_end_of_prio_q+0x32>
   23e26:	491e      	ldr	r1, [pc, #120]	; (23ea0 <move_thread_to_end_of_prio_q+0x94>)
   23e28:	481e      	ldr	r0, [pc, #120]	; (23ea4 <move_thread_to_end_of_prio_q+0x98>)
   23e2a:	f240 3389 	movw	r3, #905	; 0x389
   23e2e:	4a1e      	ldr	r2, [pc, #120]	; (23ea8 <move_thread_to_end_of_prio_q+0x9c>)
   23e30:	f008 fb1f 	bl	2c472 <printk>
   23e34:	f240 3189 	movw	r1, #905	; 0x389
   23e38:	481b      	ldr	r0, [pc, #108]	; (23ea8 <move_thread_to_end_of_prio_q+0x9c>)
   23e3a:	f008 fd37 	bl	2c8ac <assert_post_action>
	return list->head == list;
   23e3e:	4a1b      	ldr	r2, [pc, #108]	; (23eac <move_thread_to_end_of_prio_q+0xa0>)
   23e40:	4611      	mov	r1, r2
   23e42:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23e46:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e48:	428b      	cmp	r3, r1
   23e4a:	bf08      	it	eq
   23e4c:	2300      	moveq	r3, #0
   23e4e:	2b00      	cmp	r3, #0
   23e50:	bf38      	it	cc
   23e52:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23e54:	b1d3      	cbz	r3, 23e8c <move_thread_to_end_of_prio_q+0x80>
	if (thread_1->base.prio < thread_2->base.prio) {
   23e56:	f994 600e 	ldrsb.w	r6, [r4, #14]
   23e5a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   23e5e:	42ae      	cmp	r6, r5
   23e60:	db03      	blt.n	23e6a <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
   23e62:	4298      	cmp	r0, r3
   23e64:	d012      	beq.n	23e8c <move_thread_to_end_of_prio_q+0x80>
   23e66:	681b      	ldr	r3, [r3, #0]
   23e68:	e7f4      	b.n	23e54 <move_thread_to_end_of_prio_q+0x48>
	node->prev = successor->prev;
   23e6a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23e6c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   23e70:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   23e72:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23e74:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   23e76:	6890      	ldr	r0, [r2, #8]
   23e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23e7c:	7363      	strb	r3, [r4, #13]
   23e7e:	1b03      	subs	r3, r0, r4
   23e80:	4258      	negs	r0, r3
   23e82:	4158      	adcs	r0, r3
}
   23e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   23e88:	f7ff bde0 	b.w	23a4c <update_cache>
	node->prev = list->tail;
   23e8c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   23e90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23e92:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23e94:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   23e96:	e7ed      	b.n	23e74 <move_thread_to_end_of_prio_q+0x68>
   23e98:	20021e08 	.word	0x20021e08
   23e9c:	200211b8 	.word	0x200211b8
   23ea0:	00033037 	.word	0x00033037
   23ea4:	0003049a 	.word	0x0003049a
   23ea8:	00032ffe 	.word	0x00032ffe
   23eac:	20021de0 	.word	0x20021de0

00023eb0 <z_time_slice>:
{
   23eb0:	b570      	push	{r4, r5, r6, lr}
   23eb2:	4604      	mov	r4, r0
	__asm__ volatile(
   23eb4:	f04f 0320 	mov.w	r3, #32
   23eb8:	f3ef 8511 	mrs	r5, BASEPRI
   23ebc:	f383 8811 	msr	BASEPRI, r3
   23ec0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ec4:	482a      	ldr	r0, [pc, #168]	; (23f70 <z_time_slice+0xc0>)
   23ec6:	f000 ff3d 	bl	24d44 <z_spin_lock_valid>
   23eca:	b968      	cbnz	r0, 23ee8 <z_time_slice+0x38>
   23ecc:	235c      	movs	r3, #92	; 0x5c
   23ece:	4a29      	ldr	r2, [pc, #164]	; (23f74 <z_time_slice+0xc4>)
   23ed0:	4929      	ldr	r1, [pc, #164]	; (23f78 <z_time_slice+0xc8>)
   23ed2:	482a      	ldr	r0, [pc, #168]	; (23f7c <z_time_slice+0xcc>)
   23ed4:	f008 facd 	bl	2c472 <printk>
   23ed8:	4925      	ldr	r1, [pc, #148]	; (23f70 <z_time_slice+0xc0>)
   23eda:	4829      	ldr	r0, [pc, #164]	; (23f80 <z_time_slice+0xd0>)
   23edc:	f008 fac9 	bl	2c472 <printk>
   23ee0:	215c      	movs	r1, #92	; 0x5c
   23ee2:	4824      	ldr	r0, [pc, #144]	; (23f74 <z_time_slice+0xc4>)
   23ee4:	f008 fce2 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23ee8:	4821      	ldr	r0, [pc, #132]	; (23f70 <z_time_slice+0xc0>)
   23eea:	f000 ff49 	bl	24d80 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   23eee:	4b25      	ldr	r3, [pc, #148]	; (23f84 <z_time_slice+0xd4>)
   23ef0:	4a25      	ldr	r2, [pc, #148]	; (23f88 <z_time_slice+0xd8>)
   23ef2:	6898      	ldr	r0, [r3, #8]
   23ef4:	6811      	ldr	r1, [r2, #0]
   23ef6:	4288      	cmp	r0, r1
   23ef8:	4619      	mov	r1, r3
   23efa:	d118      	bne.n	23f2e <z_time_slice+0x7e>
			z_reset_time_slice();
   23efc:	f7ff fb68 	bl	235d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f00:	481b      	ldr	r0, [pc, #108]	; (23f70 <z_time_slice+0xc0>)
   23f02:	f000 ff2d 	bl	24d60 <z_spin_unlock_valid>
   23f06:	b968      	cbnz	r0, 23f24 <z_time_slice+0x74>
   23f08:	2384      	movs	r3, #132	; 0x84
   23f0a:	4a1a      	ldr	r2, [pc, #104]	; (23f74 <z_time_slice+0xc4>)
   23f0c:	491f      	ldr	r1, [pc, #124]	; (23f8c <z_time_slice+0xdc>)
   23f0e:	481b      	ldr	r0, [pc, #108]	; (23f7c <z_time_slice+0xcc>)
   23f10:	f008 faaf 	bl	2c472 <printk>
   23f14:	4916      	ldr	r1, [pc, #88]	; (23f70 <z_time_slice+0xc0>)
   23f16:	481e      	ldr	r0, [pc, #120]	; (23f90 <z_time_slice+0xe0>)
   23f18:	f008 faab 	bl	2c472 <printk>
   23f1c:	2184      	movs	r1, #132	; 0x84
   23f1e:	4815      	ldr	r0, [pc, #84]	; (23f74 <z_time_slice+0xc4>)
   23f20:	f008 fcc4 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   23f24:	f385 8811 	msr	BASEPRI, r5
   23f28:	f3bf 8f6f 	isb	sy
}
   23f2c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   23f2e:	2600      	movs	r6, #0
   23f30:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   23f32:	4a18      	ldr	r2, [pc, #96]	; (23f94 <z_time_slice+0xe4>)
   23f34:	6812      	ldr	r2, [r2, #0]
   23f36:	b1ba      	cbz	r2, 23f68 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23f38:	89c2      	ldrh	r2, [r0, #14]
   23f3a:	2a7f      	cmp	r2, #127	; 0x7f
   23f3c:	d814      	bhi.n	23f68 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   23f3e:	7b42      	ldrb	r2, [r0, #13]
   23f40:	06d2      	lsls	r2, r2, #27
   23f42:	d111      	bne.n	23f68 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23f44:	4a14      	ldr	r2, [pc, #80]	; (23f98 <z_time_slice+0xe8>)
   23f46:	f990 600e 	ldrsb.w	r6, [r0, #14]
   23f4a:	6812      	ldr	r2, [r2, #0]
   23f4c:	4296      	cmp	r6, r2
   23f4e:	db0b      	blt.n	23f68 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23f50:	4a12      	ldr	r2, [pc, #72]	; (23f9c <z_time_slice+0xec>)
   23f52:	4290      	cmp	r0, r2
   23f54:	d008      	beq.n	23f68 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   23f56:	691a      	ldr	r2, [r3, #16]
   23f58:	42a2      	cmp	r2, r4
   23f5a:	dc02      	bgt.n	23f62 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   23f5c:	f7ff ff56 	bl	23e0c <move_thread_to_end_of_prio_q>
   23f60:	e7cc      	b.n	23efc <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   23f62:	1b12      	subs	r2, r2, r4
   23f64:	611a      	str	r2, [r3, #16]
   23f66:	e7cb      	b.n	23f00 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   23f68:	2300      	movs	r3, #0
   23f6a:	610b      	str	r3, [r1, #16]
   23f6c:	e7c8      	b.n	23f00 <z_time_slice+0x50>
   23f6e:	bf00      	nop
   23f70:	20021e18 	.word	0x20021e18
   23f74:	0003056a 	.word	0x0003056a
   23f78:	000305bc 	.word	0x000305bc
   23f7c:	0003049a 	.word	0x0003049a
   23f80:	000305d1 	.word	0x000305d1
   23f84:	20021de0 	.word	0x20021de0
   23f88:	20021e14 	.word	0x20021e14
   23f8c:	00030590 	.word	0x00030590
   23f90:	000305a7 	.word	0x000305a7
   23f94:	20021e20 	.word	0x20021e20
   23f98:	20021e1c 	.word	0x20021e1c
   23f9c:	200211b8 	.word	0x200211b8

00023fa0 <z_impl_k_thread_suspend>:
{
   23fa0:	b570      	push	{r4, r5, r6, lr}
   23fa2:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   23fa4:	3018      	adds	r0, #24
   23fa6:	f001 f8c5 	bl	25134 <z_abort_timeout>
	__asm__ volatile(
   23faa:	f04f 0320 	mov.w	r3, #32
   23fae:	f3ef 8611 	mrs	r6, BASEPRI
   23fb2:	f383 8811 	msr	BASEPRI, r3
   23fb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23fba:	4825      	ldr	r0, [pc, #148]	; (24050 <z_impl_k_thread_suspend+0xb0>)
   23fbc:	f000 fec2 	bl	24d44 <z_spin_lock_valid>
   23fc0:	b968      	cbnz	r0, 23fde <z_impl_k_thread_suspend+0x3e>
   23fc2:	235c      	movs	r3, #92	; 0x5c
   23fc4:	4a23      	ldr	r2, [pc, #140]	; (24054 <z_impl_k_thread_suspend+0xb4>)
   23fc6:	4924      	ldr	r1, [pc, #144]	; (24058 <z_impl_k_thread_suspend+0xb8>)
   23fc8:	4824      	ldr	r0, [pc, #144]	; (2405c <z_impl_k_thread_suspend+0xbc>)
   23fca:	f008 fa52 	bl	2c472 <printk>
   23fce:	4920      	ldr	r1, [pc, #128]	; (24050 <z_impl_k_thread_suspend+0xb0>)
   23fd0:	4823      	ldr	r0, [pc, #140]	; (24060 <z_impl_k_thread_suspend+0xc0>)
   23fd2:	f008 fa4e 	bl	2c472 <printk>
   23fd6:	215c      	movs	r1, #92	; 0x5c
   23fd8:	481e      	ldr	r0, [pc, #120]	; (24054 <z_impl_k_thread_suspend+0xb4>)
   23fda:	f008 fc67 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   23fde:	481c      	ldr	r0, [pc, #112]	; (24050 <z_impl_k_thread_suspend+0xb0>)
   23fe0:	f000 fece 	bl	24d80 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   23fe4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   23fe8:	2b00      	cmp	r3, #0
   23fea:	da07      	bge.n	23ffc <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   23fec:	4621      	mov	r1, r4
   23fee:	481d      	ldr	r0, [pc, #116]	; (24064 <z_impl_k_thread_suspend+0xc4>)
   23ff0:	f7ff fcb2 	bl	23958 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23ff4:	7b63      	ldrb	r3, [r4, #13]
   23ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23ffa:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   23ffc:	4d1a      	ldr	r5, [pc, #104]	; (24068 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23ffe:	7b63      	ldrb	r3, [r4, #13]
   24000:	68a8      	ldr	r0, [r5, #8]
   24002:	f043 0310 	orr.w	r3, r3, #16
   24006:	7363      	strb	r3, [r4, #13]
   24008:	1b03      	subs	r3, r0, r4
   2400a:	4258      	negs	r0, r3
   2400c:	4158      	adcs	r0, r3
   2400e:	f7ff fd1d 	bl	23a4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24012:	480f      	ldr	r0, [pc, #60]	; (24050 <z_impl_k_thread_suspend+0xb0>)
   24014:	f000 fea4 	bl	24d60 <z_spin_unlock_valid>
   24018:	b968      	cbnz	r0, 24036 <z_impl_k_thread_suspend+0x96>
   2401a:	2384      	movs	r3, #132	; 0x84
   2401c:	4a0d      	ldr	r2, [pc, #52]	; (24054 <z_impl_k_thread_suspend+0xb4>)
   2401e:	4913      	ldr	r1, [pc, #76]	; (2406c <z_impl_k_thread_suspend+0xcc>)
   24020:	480e      	ldr	r0, [pc, #56]	; (2405c <z_impl_k_thread_suspend+0xbc>)
   24022:	f008 fa26 	bl	2c472 <printk>
   24026:	490a      	ldr	r1, [pc, #40]	; (24050 <z_impl_k_thread_suspend+0xb0>)
   24028:	4811      	ldr	r0, [pc, #68]	; (24070 <z_impl_k_thread_suspend+0xd0>)
   2402a:	f008 fa22 	bl	2c472 <printk>
   2402e:	2184      	movs	r1, #132	; 0x84
   24030:	4808      	ldr	r0, [pc, #32]	; (24054 <z_impl_k_thread_suspend+0xb4>)
   24032:	f008 fc3b 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   24036:	f386 8811 	msr	BASEPRI, r6
   2403a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2403e:	68ab      	ldr	r3, [r5, #8]
   24040:	42a3      	cmp	r3, r4
   24042:	d103      	bne.n	2404c <z_impl_k_thread_suspend+0xac>
}
   24044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24048:	f00a bcf2 	b.w	2ea30 <z_reschedule_unlocked>
}
   2404c:	bd70      	pop	{r4, r5, r6, pc}
   2404e:	bf00      	nop
   24050:	20021e18 	.word	0x20021e18
   24054:	0003056a 	.word	0x0003056a
   24058:	000305bc 	.word	0x000305bc
   2405c:	0003049a 	.word	0x0003049a
   24060:	000305d1 	.word	0x000305d1
   24064:	20021e08 	.word	0x20021e08
   24068:	20021de0 	.word	0x20021de0
   2406c:	00030590 	.word	0x00030590
   24070:	000305a7 	.word	0x000305a7

00024074 <z_thread_single_abort>:
{
   24074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   24078:	7b03      	ldrb	r3, [r0, #12]
{
   2407a:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   2407c:	07dd      	lsls	r5, r3, #31
   2407e:	d50e      	bpl.n	2409e <z_thread_single_abort+0x2a>
   24080:	4948      	ldr	r1, [pc, #288]	; (241a4 <z_thread_single_abort+0x130>)
   24082:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   24086:	4a48      	ldr	r2, [pc, #288]	; (241a8 <z_thread_single_abort+0x134>)
   24088:	4848      	ldr	r0, [pc, #288]	; (241ac <z_thread_single_abort+0x138>)
   2408a:	f008 f9f2 	bl	2c472 <printk>
   2408e:	4848      	ldr	r0, [pc, #288]	; (241b0 <z_thread_single_abort+0x13c>)
   24090:	f008 f9ef 	bl	2c472 <printk>
   24094:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   24098:	4843      	ldr	r0, [pc, #268]	; (241a8 <z_thread_single_abort+0x134>)
   2409a:	f008 fc07 	bl	2c8ac <assert_post_action>
	if (thread->fn_abort != NULL) {
   2409e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   240a0:	b103      	cbz	r3, 240a4 <z_thread_single_abort+0x30>
		thread->fn_abort();
   240a2:	4798      	blx	r3
   240a4:	f104 0018 	add.w	r0, r4, #24
   240a8:	f001 f844 	bl	25134 <z_abort_timeout>
	__asm__ volatile(
   240ac:	f04f 0320 	mov.w	r3, #32
   240b0:	f3ef 8611 	mrs	r6, BASEPRI
   240b4:	f383 8811 	msr	BASEPRI, r3
   240b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240bc:	483d      	ldr	r0, [pc, #244]	; (241b4 <z_thread_single_abort+0x140>)
   240be:	f000 fe41 	bl	24d44 <z_spin_lock_valid>
   240c2:	b968      	cbnz	r0, 240e0 <z_thread_single_abort+0x6c>
   240c4:	235c      	movs	r3, #92	; 0x5c
   240c6:	4a3c      	ldr	r2, [pc, #240]	; (241b8 <z_thread_single_abort+0x144>)
   240c8:	493c      	ldr	r1, [pc, #240]	; (241bc <z_thread_single_abort+0x148>)
   240ca:	4838      	ldr	r0, [pc, #224]	; (241ac <z_thread_single_abort+0x138>)
   240cc:	f008 f9d1 	bl	2c472 <printk>
   240d0:	4938      	ldr	r1, [pc, #224]	; (241b4 <z_thread_single_abort+0x140>)
   240d2:	483b      	ldr	r0, [pc, #236]	; (241c0 <z_thread_single_abort+0x14c>)
   240d4:	f008 f9cd 	bl	2c472 <printk>
   240d8:	215c      	movs	r1, #92	; 0x5c
   240da:	4837      	ldr	r0, [pc, #220]	; (241b8 <z_thread_single_abort+0x144>)
   240dc:	f008 fbe6 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   240e0:	4834      	ldr	r0, [pc, #208]	; (241b4 <z_thread_single_abort+0x140>)
   240e2:	f000 fe4d 	bl	24d80 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   240e6:	7b63      	ldrb	r3, [r4, #13]
   240e8:	06d8      	lsls	r0, r3, #27
   240ea:	d136      	bne.n	2415a <z_thread_single_abort+0xe6>
		if (z_is_thread_ready(thread)) {
   240ec:	69a2      	ldr	r2, [r4, #24]
   240ee:	2a00      	cmp	r2, #0
   240f0:	d133      	bne.n	2415a <z_thread_single_abort+0xe6>
			if (z_is_thread_queued(thread)) {
   240f2:	0619      	lsls	r1, r3, #24
   240f4:	d507      	bpl.n	24106 <z_thread_single_abort+0x92>
				_priq_run_remove(&_kernel.ready_q.runq,
   240f6:	4621      	mov	r1, r4
   240f8:	4832      	ldr	r0, [pc, #200]	; (241c4 <z_thread_single_abort+0x150>)
   240fa:	f7ff fc2d 	bl	23958 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   240fe:	7b63      	ldrb	r3, [r4, #13]
   24100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24104:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   24106:	4b30      	ldr	r3, [pc, #192]	; (241c8 <z_thread_single_abort+0x154>)
   24108:	6898      	ldr	r0, [r3, #8]
   2410a:	1b02      	subs	r2, r0, r4
   2410c:	4250      	negs	r0, r2
   2410e:	4150      	adcs	r0, r2
   24110:	f7ff fc9c 	bl	23a4c <update_cache>
			waiter->base.pended_on = NULL;
   24114:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   24116:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   24118:	f104 0830 	add.w	r8, r4, #48	; 0x30
   2411c:	f043 0308 	orr.w	r3, r3, #8
   24120:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   24122:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24124:	4545      	cmp	r5, r8
   24126:	d000      	beq.n	2412a <z_thread_single_abort+0xb6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   24128:	bb3d      	cbnz	r5, 2417a <z_thread_single_abort+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2412a:	4822      	ldr	r0, [pc, #136]	; (241b4 <z_thread_single_abort+0x140>)
   2412c:	f000 fe18 	bl	24d60 <z_spin_unlock_valid>
   24130:	b968      	cbnz	r0, 2414e <z_thread_single_abort+0xda>
   24132:	2384      	movs	r3, #132	; 0x84
   24134:	4a20      	ldr	r2, [pc, #128]	; (241b8 <z_thread_single_abort+0x144>)
   24136:	4925      	ldr	r1, [pc, #148]	; (241cc <z_thread_single_abort+0x158>)
   24138:	481c      	ldr	r0, [pc, #112]	; (241ac <z_thread_single_abort+0x138>)
   2413a:	f008 f99a 	bl	2c472 <printk>
   2413e:	491d      	ldr	r1, [pc, #116]	; (241b4 <z_thread_single_abort+0x140>)
   24140:	4823      	ldr	r0, [pc, #140]	; (241d0 <z_thread_single_abort+0x15c>)
   24142:	f008 f996 	bl	2c472 <printk>
   24146:	2184      	movs	r1, #132	; 0x84
   24148:	481b      	ldr	r0, [pc, #108]	; (241b8 <z_thread_single_abort+0x144>)
   2414a:	f008 fbaf 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   2414e:	f386 8811 	msr	BASEPRI, r6
   24152:	f3bf 8f6f 	isb	sy
}
   24156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   2415a:	079b      	lsls	r3, r3, #30
   2415c:	d5da      	bpl.n	24114 <z_thread_single_abort+0xa0>
				_priq_wait_remove(&pended_on(thread)->waitq,
   2415e:	f104 0008 	add.w	r0, r4, #8
   24162:	f7ff fa1d 	bl	235a0 <pended_on.isra.0>
   24166:	4621      	mov	r1, r4
   24168:	f7ff fbf6 	bl	23958 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2416c:	7b63      	ldrb	r3, [r4, #13]
   2416e:	f023 0302 	bic.w	r3, r3, #2
   24172:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   24174:	2300      	movs	r3, #0
   24176:	60a3      	str	r3, [r4, #8]
   24178:	e7cc      	b.n	24114 <z_thread_single_abort+0xa0>
   2417a:	f105 0018 	add.w	r0, r5, #24
   2417e:	f000 ffd9 	bl	25134 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   24182:	f105 0008 	add.w	r0, r5, #8
   24186:	f7ff fa0b 	bl	235a0 <pended_on.isra.0>
   2418a:	4629      	mov	r1, r5
   2418c:	f7ff fbe4 	bl	23958 <z_priq_dumb_remove>
   24190:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   24192:	4628      	mov	r0, r5
   24194:	f023 0302 	bic.w	r3, r3, #2
   24198:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   2419a:	60af      	str	r7, [r5, #8]
   2419c:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   2419e:	f7ff fcf5 	bl	23b8c <ready_thread>
   241a2:	e7be      	b.n	24122 <z_thread_single_abort+0xae>
   241a4:	00033088 	.word	0x00033088
   241a8:	00032ffe 	.word	0x00032ffe
   241ac:	0003049a 	.word	0x0003049a
   241b0:	000330b6 	.word	0x000330b6
   241b4:	20021e18 	.word	0x20021e18
   241b8:	0003056a 	.word	0x0003056a
   241bc:	000305bc 	.word	0x000305bc
   241c0:	000305d1 	.word	0x000305d1
   241c4:	20021e08 	.word	0x20021e08
   241c8:	20021de0 	.word	0x20021de0
   241cc:	00030590 	.word	0x00030590
   241d0:	000305a7 	.word	0x000305a7

000241d4 <unready_thread>:
{
   241d4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   241d6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   241da:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   241dc:	2b00      	cmp	r3, #0
   241de:	da07      	bge.n	241f0 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   241e0:	4601      	mov	r1, r0
   241e2:	4808      	ldr	r0, [pc, #32]	; (24204 <unready_thread+0x30>)
   241e4:	f7ff fbb8 	bl	23958 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   241e8:	7b63      	ldrb	r3, [r4, #13]
   241ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   241ee:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   241f0:	4b05      	ldr	r3, [pc, #20]	; (24208 <unready_thread+0x34>)
   241f2:	6898      	ldr	r0, [r3, #8]
   241f4:	1b03      	subs	r3, r0, r4
   241f6:	4258      	negs	r0, r3
   241f8:	4158      	adcs	r0, r3
}
   241fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   241fe:	f7ff bc25 	b.w	23a4c <update_cache>
   24202:	bf00      	nop
   24204:	20021e08 	.word	0x20021e08
   24208:	20021de0 	.word	0x20021de0

0002420c <add_to_waitq_locked>:
{
   2420c:	b538      	push	{r3, r4, r5, lr}
   2420e:	4604      	mov	r4, r0
   24210:	460d      	mov	r5, r1
	unready_thread(thread);
   24212:	f7ff ffdf 	bl	241d4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24216:	7b63      	ldrb	r3, [r4, #13]
   24218:	f043 0302 	orr.w	r3, r3, #2
   2421c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2421e:	b33d      	cbz	r5, 24270 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24220:	4b17      	ldr	r3, [pc, #92]	; (24280 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   24222:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24224:	429c      	cmp	r4, r3
   24226:	d10b      	bne.n	24240 <add_to_waitq_locked+0x34>
   24228:	4916      	ldr	r1, [pc, #88]	; (24284 <add_to_waitq_locked+0x78>)
   2422a:	4817      	ldr	r0, [pc, #92]	; (24288 <add_to_waitq_locked+0x7c>)
   2422c:	f240 3389 	movw	r3, #905	; 0x389
   24230:	4a16      	ldr	r2, [pc, #88]	; (2428c <add_to_waitq_locked+0x80>)
   24232:	f008 f91e 	bl	2c472 <printk>
   24236:	f240 3189 	movw	r1, #905	; 0x389
   2423a:	4814      	ldr	r0, [pc, #80]	; (2428c <add_to_waitq_locked+0x80>)
   2423c:	f008 fb36 	bl	2c8ac <assert_post_action>
	return list->head == list;
   24240:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24242:	429d      	cmp	r5, r3
   24244:	bf08      	it	eq
   24246:	2300      	moveq	r3, #0
   24248:	2b00      	cmp	r3, #0
   2424a:	bf38      	it	cc
   2424c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2424e:	b183      	cbz	r3, 24272 <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
   24250:	f994 100e 	ldrsb.w	r1, [r4, #14]
   24254:	f993 200e 	ldrsb.w	r2, [r3, #14]
   24258:	4291      	cmp	r1, r2
   2425a:	db04      	blt.n	24266 <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
   2425c:	686a      	ldr	r2, [r5, #4]
   2425e:	429a      	cmp	r2, r3
   24260:	d007      	beq.n	24272 <add_to_waitq_locked+0x66>
   24262:	681b      	ldr	r3, [r3, #0]
   24264:	e7f3      	b.n	2424e <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
   24266:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24268:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2426c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2426e:	605c      	str	r4, [r3, #4]
}
   24270:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   24272:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   24274:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   24276:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   24278:	686b      	ldr	r3, [r5, #4]
   2427a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2427c:	606c      	str	r4, [r5, #4]
   2427e:	e7f7      	b.n	24270 <add_to_waitq_locked+0x64>
   24280:	200211b8 	.word	0x200211b8
   24284:	00033037 	.word	0x00033037
   24288:	0003049a 	.word	0x0003049a
   2428c:	00032ffe 	.word	0x00032ffe

00024290 <pend>:
{
   24290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24294:	4604      	mov	r4, r0
   24296:	460d      	mov	r5, r1
   24298:	4616      	mov	r6, r2
   2429a:	461f      	mov	r7, r3
	__asm__ volatile(
   2429c:	f04f 0320 	mov.w	r3, #32
   242a0:	f3ef 8811 	mrs	r8, BASEPRI
   242a4:	f383 8811 	msr	BASEPRI, r3
   242a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242ac:	481f      	ldr	r0, [pc, #124]	; (2432c <pend+0x9c>)
   242ae:	f000 fd49 	bl	24d44 <z_spin_lock_valid>
   242b2:	b968      	cbnz	r0, 242d0 <pend+0x40>
   242b4:	235c      	movs	r3, #92	; 0x5c
   242b6:	4a1e      	ldr	r2, [pc, #120]	; (24330 <pend+0xa0>)
   242b8:	491e      	ldr	r1, [pc, #120]	; (24334 <pend+0xa4>)
   242ba:	481f      	ldr	r0, [pc, #124]	; (24338 <pend+0xa8>)
   242bc:	f008 f8d9 	bl	2c472 <printk>
   242c0:	491a      	ldr	r1, [pc, #104]	; (2432c <pend+0x9c>)
   242c2:	481e      	ldr	r0, [pc, #120]	; (2433c <pend+0xac>)
   242c4:	f008 f8d5 	bl	2c472 <printk>
   242c8:	215c      	movs	r1, #92	; 0x5c
   242ca:	4819      	ldr	r0, [pc, #100]	; (24330 <pend+0xa0>)
   242cc:	f008 faee 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   242d0:	4816      	ldr	r0, [pc, #88]	; (2432c <pend+0x9c>)
   242d2:	f000 fd55 	bl	24d80 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   242d6:	4620      	mov	r0, r4
   242d8:	4629      	mov	r1, r5
   242da:	f7ff ff97 	bl	2420c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   242de:	4813      	ldr	r0, [pc, #76]	; (2432c <pend+0x9c>)
   242e0:	f000 fd3e 	bl	24d60 <z_spin_unlock_valid>
   242e4:	b968      	cbnz	r0, 24302 <pend+0x72>
   242e6:	2384      	movs	r3, #132	; 0x84
   242e8:	4a11      	ldr	r2, [pc, #68]	; (24330 <pend+0xa0>)
   242ea:	4915      	ldr	r1, [pc, #84]	; (24340 <pend+0xb0>)
   242ec:	4812      	ldr	r0, [pc, #72]	; (24338 <pend+0xa8>)
   242ee:	f008 f8c0 	bl	2c472 <printk>
   242f2:	490e      	ldr	r1, [pc, #56]	; (2432c <pend+0x9c>)
   242f4:	4813      	ldr	r0, [pc, #76]	; (24344 <pend+0xb4>)
   242f6:	f008 f8bc 	bl	2c472 <printk>
   242fa:	2184      	movs	r1, #132	; 0x84
   242fc:	480c      	ldr	r0, [pc, #48]	; (24330 <pend+0xa0>)
   242fe:	f008 fad5 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   24302:	f388 8811 	msr	BASEPRI, r8
   24306:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2430a:	1c7b      	adds	r3, r7, #1
   2430c:	bf08      	it	eq
   2430e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24312:	d008      	beq.n	24326 <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   24314:	4632      	mov	r2, r6
   24316:	463b      	mov	r3, r7
   24318:	f104 0018 	add.w	r0, r4, #24
   2431c:	490a      	ldr	r1, [pc, #40]	; (24348 <pend+0xb8>)
}
   2431e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24322:	f000 be33 	b.w	24f8c <z_add_timeout>
   24326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2432a:	bf00      	nop
   2432c:	20021e18 	.word	0x20021e18
   24330:	0003056a 	.word	0x0003056a
   24334:	000305bc 	.word	0x000305bc
   24338:	0003049a 	.word	0x0003049a
   2433c:	000305d1 	.word	0x000305d1
   24340:	00030590 	.word	0x00030590
   24344:	000305a7 	.word	0x000305a7
   24348:	00023d61 	.word	0x00023d61

0002434c <z_pend_curr>:
{
   2434c:	b538      	push	{r3, r4, r5, lr}
   2434e:	4604      	mov	r4, r0
	pending_current = _current;
   24350:	4b10      	ldr	r3, [pc, #64]	; (24394 <z_pend_curr+0x48>)
{
   24352:	460d      	mov	r5, r1
	pending_current = _current;
   24354:	6898      	ldr	r0, [r3, #8]
   24356:	4b10      	ldr	r3, [pc, #64]	; (24398 <z_pend_curr+0x4c>)
{
   24358:	4611      	mov	r1, r2
	pending_current = _current;
   2435a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   2435c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   24360:	f7ff ff96 	bl	24290 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24364:	4620      	mov	r0, r4
   24366:	f000 fcfb 	bl	24d60 <z_spin_unlock_valid>
   2436a:	b968      	cbnz	r0, 24388 <z_pend_curr+0x3c>
   2436c:	239b      	movs	r3, #155	; 0x9b
   2436e:	4a0b      	ldr	r2, [pc, #44]	; (2439c <z_pend_curr+0x50>)
   24370:	490b      	ldr	r1, [pc, #44]	; (243a0 <z_pend_curr+0x54>)
   24372:	480c      	ldr	r0, [pc, #48]	; (243a4 <z_pend_curr+0x58>)
   24374:	f008 f87d 	bl	2c472 <printk>
   24378:	4621      	mov	r1, r4
   2437a:	480b      	ldr	r0, [pc, #44]	; (243a8 <z_pend_curr+0x5c>)
   2437c:	f008 f879 	bl	2c472 <printk>
   24380:	219b      	movs	r1, #155	; 0x9b
   24382:	4806      	ldr	r0, [pc, #24]	; (2439c <z_pend_curr+0x50>)
   24384:	f008 fa92 	bl	2c8ac <assert_post_action>
   24388:	4628      	mov	r0, r5
}
   2438a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2438e:	f7f0 b8df 	b.w	14550 <arch_swap>
   24392:	bf00      	nop
   24394:	20021de0 	.word	0x20021de0
   24398:	20021e14 	.word	0x20021e14
   2439c:	0003056a 	.word	0x0003056a
   243a0:	00030590 	.word	0x00030590
   243a4:	0003049a 	.word	0x0003049a
   243a8:	000305a7 	.word	0x000305a7

000243ac <z_set_prio>:
{
   243ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243ae:	4604      	mov	r4, r0
   243b0:	460e      	mov	r6, r1
	__asm__ volatile(
   243b2:	f04f 0320 	mov.w	r3, #32
   243b6:	f3ef 8711 	mrs	r7, BASEPRI
   243ba:	f383 8811 	msr	BASEPRI, r3
   243be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   243c2:	4839      	ldr	r0, [pc, #228]	; (244a8 <z_set_prio+0xfc>)
   243c4:	f000 fcbe 	bl	24d44 <z_spin_lock_valid>
   243c8:	b968      	cbnz	r0, 243e6 <z_set_prio+0x3a>
   243ca:	235c      	movs	r3, #92	; 0x5c
   243cc:	4a37      	ldr	r2, [pc, #220]	; (244ac <z_set_prio+0x100>)
   243ce:	4938      	ldr	r1, [pc, #224]	; (244b0 <z_set_prio+0x104>)
   243d0:	4838      	ldr	r0, [pc, #224]	; (244b4 <z_set_prio+0x108>)
   243d2:	f008 f84e 	bl	2c472 <printk>
   243d6:	4934      	ldr	r1, [pc, #208]	; (244a8 <z_set_prio+0xfc>)
   243d8:	4837      	ldr	r0, [pc, #220]	; (244b8 <z_set_prio+0x10c>)
   243da:	f008 f84a 	bl	2c472 <printk>
   243de:	215c      	movs	r1, #92	; 0x5c
   243e0:	4832      	ldr	r0, [pc, #200]	; (244ac <z_set_prio+0x100>)
   243e2:	f008 fa63 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   243e6:	4830      	ldr	r0, [pc, #192]	; (244a8 <z_set_prio+0xfc>)
   243e8:	f000 fcca 	bl	24d80 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   243ec:	7b63      	ldrb	r3, [r4, #13]
   243ee:	b276      	sxtb	r6, r6
   243f0:	06db      	lsls	r3, r3, #27
   243f2:	d155      	bne.n	244a0 <z_set_prio+0xf4>
	return !sys_dnode_is_linked(&t->node);
   243f4:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   243f6:	2d00      	cmp	r5, #0
   243f8:	d152      	bne.n	244a0 <z_set_prio+0xf4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   243fa:	4621      	mov	r1, r4
   243fc:	482f      	ldr	r0, [pc, #188]	; (244bc <z_set_prio+0x110>)
   243fe:	f7ff faab 	bl	23958 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24402:	4b2f      	ldr	r3, [pc, #188]	; (244c0 <z_set_prio+0x114>)
				thread->base.prio = prio;
   24404:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24406:	429c      	cmp	r4, r3
   24408:	d10b      	bne.n	24422 <z_set_prio+0x76>
   2440a:	492e      	ldr	r1, [pc, #184]	; (244c4 <z_set_prio+0x118>)
   2440c:	4829      	ldr	r0, [pc, #164]	; (244b4 <z_set_prio+0x108>)
   2440e:	f240 3389 	movw	r3, #905	; 0x389
   24412:	4a2d      	ldr	r2, [pc, #180]	; (244c8 <z_set_prio+0x11c>)
   24414:	f008 f82d 	bl	2c472 <printk>
   24418:	f240 3189 	movw	r1, #905	; 0x389
   2441c:	482a      	ldr	r0, [pc, #168]	; (244c8 <z_set_prio+0x11c>)
   2441e:	f008 fa45 	bl	2c8ac <assert_post_action>
	return list->head == list;
   24422:	4a2a      	ldr	r2, [pc, #168]	; (244cc <z_set_prio+0x120>)
   24424:	4613      	mov	r3, r2
   24426:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2442a:	4298      	cmp	r0, r3
   2442c:	bf18      	it	ne
   2442e:	4605      	movne	r5, r0
   24430:	2d00      	cmp	r5, #0
   24432:	4619      	mov	r1, r3
   24434:	462b      	mov	r3, r5
   24436:	bf38      	it	cc
   24438:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2443a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2443c:	b353      	cbz	r3, 24494 <z_set_prio+0xe8>
	if (thread_1->base.prio < thread_2->base.prio) {
   2443e:	f994 600e 	ldrsb.w	r6, [r4, #14]
   24442:	f993 500e 	ldrsb.w	r5, [r3, #14]
   24446:	42ae      	cmp	r6, r5
   24448:	db03      	blt.n	24452 <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   2444a:	4298      	cmp	r0, r3
   2444c:	d022      	beq.n	24494 <z_set_prio+0xe8>
   2444e:	681b      	ldr	r3, [r3, #0]
   24450:	e7f4      	b.n	2443c <z_set_prio+0x90>
	node->prev = successor->prev;
   24452:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24454:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   24458:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2445a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2445c:	2001      	movs	r0, #1
   2445e:	f7ff faf5 	bl	23a4c <update_cache>
   24462:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24464:	4810      	ldr	r0, [pc, #64]	; (244a8 <z_set_prio+0xfc>)
   24466:	f000 fc7b 	bl	24d60 <z_spin_unlock_valid>
   2446a:	b968      	cbnz	r0, 24488 <z_set_prio+0xdc>
   2446c:	2384      	movs	r3, #132	; 0x84
   2446e:	4a0f      	ldr	r2, [pc, #60]	; (244ac <z_set_prio+0x100>)
   24470:	4917      	ldr	r1, [pc, #92]	; (244d0 <z_set_prio+0x124>)
   24472:	4810      	ldr	r0, [pc, #64]	; (244b4 <z_set_prio+0x108>)
   24474:	f007 fffd 	bl	2c472 <printk>
   24478:	490b      	ldr	r1, [pc, #44]	; (244a8 <z_set_prio+0xfc>)
   2447a:	4816      	ldr	r0, [pc, #88]	; (244d4 <z_set_prio+0x128>)
   2447c:	f007 fff9 	bl	2c472 <printk>
   24480:	2184      	movs	r1, #132	; 0x84
   24482:	480a      	ldr	r0, [pc, #40]	; (244ac <z_set_prio+0x100>)
   24484:	f008 fa12 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   24488:	f387 8811 	msr	BASEPRI, r7
   2448c:	f3bf 8f6f 	isb	sy
}
   24490:	4620      	mov	r0, r4
   24492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   24494:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   24498:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2449a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2449c:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2449e:	e7dd      	b.n	2445c <z_set_prio+0xb0>
			thread->base.prio = prio;
   244a0:	73a6      	strb	r6, [r4, #14]
   244a2:	2400      	movs	r4, #0
   244a4:	e7de      	b.n	24464 <z_set_prio+0xb8>
   244a6:	bf00      	nop
   244a8:	20021e18 	.word	0x20021e18
   244ac:	0003056a 	.word	0x0003056a
   244b0:	000305bc 	.word	0x000305bc
   244b4:	0003049a 	.word	0x0003049a
   244b8:	000305d1 	.word	0x000305d1
   244bc:	20021e08 	.word	0x20021e08
   244c0:	200211b8 	.word	0x200211b8
   244c4:	00033037 	.word	0x00033037
   244c8:	00032ffe 	.word	0x00032ffe
   244cc:	20021de0 	.word	0x20021de0
   244d0:	00030590 	.word	0x00030590
   244d4:	000305a7 	.word	0x000305a7

000244d8 <z_unpend_first_thread>:
{
   244d8:	b538      	push	{r3, r4, r5, lr}
   244da:	4604      	mov	r4, r0
	__asm__ volatile(
   244dc:	f04f 0320 	mov.w	r3, #32
   244e0:	f3ef 8511 	mrs	r5, BASEPRI
   244e4:	f383 8811 	msr	BASEPRI, r3
   244e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244ec:	4836      	ldr	r0, [pc, #216]	; (245c8 <z_unpend_first_thread+0xf0>)
   244ee:	f000 fc29 	bl	24d44 <z_spin_lock_valid>
   244f2:	b968      	cbnz	r0, 24510 <z_unpend_first_thread+0x38>
   244f4:	235c      	movs	r3, #92	; 0x5c
   244f6:	4a35      	ldr	r2, [pc, #212]	; (245cc <z_unpend_first_thread+0xf4>)
   244f8:	4935      	ldr	r1, [pc, #212]	; (245d0 <z_unpend_first_thread+0xf8>)
   244fa:	4836      	ldr	r0, [pc, #216]	; (245d4 <z_unpend_first_thread+0xfc>)
   244fc:	f007 ffb9 	bl	2c472 <printk>
   24500:	4931      	ldr	r1, [pc, #196]	; (245c8 <z_unpend_first_thread+0xf0>)
   24502:	4835      	ldr	r0, [pc, #212]	; (245d8 <z_unpend_first_thread+0x100>)
   24504:	f007 ffb5 	bl	2c472 <printk>
   24508:	215c      	movs	r1, #92	; 0x5c
   2450a:	4830      	ldr	r0, [pc, #192]	; (245cc <z_unpend_first_thread+0xf4>)
   2450c:	f008 f9ce 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   24510:	482d      	ldr	r0, [pc, #180]	; (245c8 <z_unpend_first_thread+0xf0>)
   24512:	f000 fc35 	bl	24d80 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   24516:	4620      	mov	r0, r4
   24518:	f00a faa3 	bl	2ea62 <z_priq_dumb_best>
   2451c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2451e:	482a      	ldr	r0, [pc, #168]	; (245c8 <z_unpend_first_thread+0xf0>)
   24520:	f000 fc1e 	bl	24d60 <z_spin_unlock_valid>
   24524:	b968      	cbnz	r0, 24542 <z_unpend_first_thread+0x6a>
   24526:	2384      	movs	r3, #132	; 0x84
   24528:	4a28      	ldr	r2, [pc, #160]	; (245cc <z_unpend_first_thread+0xf4>)
   2452a:	492c      	ldr	r1, [pc, #176]	; (245dc <z_unpend_first_thread+0x104>)
   2452c:	4829      	ldr	r0, [pc, #164]	; (245d4 <z_unpend_first_thread+0xfc>)
   2452e:	f007 ffa0 	bl	2c472 <printk>
   24532:	4925      	ldr	r1, [pc, #148]	; (245c8 <z_unpend_first_thread+0xf0>)
   24534:	482a      	ldr	r0, [pc, #168]	; (245e0 <z_unpend_first_thread+0x108>)
   24536:	f007 ff9c 	bl	2c472 <printk>
   2453a:	2184      	movs	r1, #132	; 0x84
   2453c:	4823      	ldr	r0, [pc, #140]	; (245cc <z_unpend_first_thread+0xf4>)
   2453e:	f008 f9b5 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   24542:	f385 8811 	msr	BASEPRI, r5
   24546:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2454a:	2c00      	cmp	r4, #0
   2454c:	d039      	beq.n	245c2 <z_unpend_first_thread+0xea>
	__asm__ volatile(
   2454e:	f04f 0320 	mov.w	r3, #32
   24552:	f3ef 8511 	mrs	r5, BASEPRI
   24556:	f383 8811 	msr	BASEPRI, r3
   2455a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2455e:	481a      	ldr	r0, [pc, #104]	; (245c8 <z_unpend_first_thread+0xf0>)
   24560:	f000 fbf0 	bl	24d44 <z_spin_lock_valid>
   24564:	b968      	cbnz	r0, 24582 <z_unpend_first_thread+0xaa>
   24566:	235c      	movs	r3, #92	; 0x5c
   24568:	4a18      	ldr	r2, [pc, #96]	; (245cc <z_unpend_first_thread+0xf4>)
   2456a:	4919      	ldr	r1, [pc, #100]	; (245d0 <z_unpend_first_thread+0xf8>)
   2456c:	4819      	ldr	r0, [pc, #100]	; (245d4 <z_unpend_first_thread+0xfc>)
   2456e:	f007 ff80 	bl	2c472 <printk>
   24572:	4915      	ldr	r1, [pc, #84]	; (245c8 <z_unpend_first_thread+0xf0>)
   24574:	4818      	ldr	r0, [pc, #96]	; (245d8 <z_unpend_first_thread+0x100>)
   24576:	f007 ff7c 	bl	2c472 <printk>
   2457a:	215c      	movs	r1, #92	; 0x5c
   2457c:	4813      	ldr	r0, [pc, #76]	; (245cc <z_unpend_first_thread+0xf4>)
   2457e:	f008 f995 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   24582:	4811      	ldr	r0, [pc, #68]	; (245c8 <z_unpend_first_thread+0xf0>)
   24584:	f000 fbfc 	bl	24d80 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   24588:	4620      	mov	r0, r4
   2458a:	f00a fa5b 	bl	2ea44 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2458e:	480e      	ldr	r0, [pc, #56]	; (245c8 <z_unpend_first_thread+0xf0>)
   24590:	f000 fbe6 	bl	24d60 <z_spin_unlock_valid>
   24594:	b968      	cbnz	r0, 245b2 <z_unpend_first_thread+0xda>
   24596:	2384      	movs	r3, #132	; 0x84
   24598:	4a0c      	ldr	r2, [pc, #48]	; (245cc <z_unpend_first_thread+0xf4>)
   2459a:	4910      	ldr	r1, [pc, #64]	; (245dc <z_unpend_first_thread+0x104>)
   2459c:	480d      	ldr	r0, [pc, #52]	; (245d4 <z_unpend_first_thread+0xfc>)
   2459e:	f007 ff68 	bl	2c472 <printk>
   245a2:	4909      	ldr	r1, [pc, #36]	; (245c8 <z_unpend_first_thread+0xf0>)
   245a4:	480e      	ldr	r0, [pc, #56]	; (245e0 <z_unpend_first_thread+0x108>)
   245a6:	f007 ff64 	bl	2c472 <printk>
   245aa:	2184      	movs	r1, #132	; 0x84
   245ac:	4807      	ldr	r0, [pc, #28]	; (245cc <z_unpend_first_thread+0xf4>)
   245ae:	f008 f97d 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   245b2:	f385 8811 	msr	BASEPRI, r5
   245b6:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   245ba:	f104 0018 	add.w	r0, r4, #24
   245be:	f000 fdb9 	bl	25134 <z_abort_timeout>
}
   245c2:	4620      	mov	r0, r4
   245c4:	bd38      	pop	{r3, r4, r5, pc}
   245c6:	bf00      	nop
   245c8:	20021e18 	.word	0x20021e18
   245cc:	0003056a 	.word	0x0003056a
   245d0:	000305bc 	.word	0x000305bc
   245d4:	0003049a 	.word	0x0003049a
   245d8:	000305d1 	.word	0x000305d1
   245dc:	00030590 	.word	0x00030590
   245e0:	000305a7 	.word	0x000305a7

000245e4 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   245e4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   245e6:	4b04      	ldr	r3, [pc, #16]	; (245f8 <z_sched_init+0x14>)
   245e8:	4608      	mov	r0, r1
   245ea:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   245ee:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   245f2:	f7ff b803 	b.w	235fc <k_sched_time_slice_set>
   245f6:	bf00      	nop
   245f8:	20021de0 	.word	0x20021de0

000245fc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   245fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245fe:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   24602:	b173      	cbz	r3, 24622 <z_impl_k_yield+0x26>
   24604:	4946      	ldr	r1, [pc, #280]	; (24720 <z_impl_k_yield+0x124>)
   24606:	f240 4394 	movw	r3, #1172	; 0x494
   2460a:	4a46      	ldr	r2, [pc, #280]	; (24724 <z_impl_k_yield+0x128>)
   2460c:	4846      	ldr	r0, [pc, #280]	; (24728 <z_impl_k_yield+0x12c>)
   2460e:	f007 ff30 	bl	2c472 <printk>
   24612:	4846      	ldr	r0, [pc, #280]	; (2472c <z_impl_k_yield+0x130>)
   24614:	f007 ff2d 	bl	2c472 <printk>
   24618:	f240 4194 	movw	r1, #1172	; 0x494
   2461c:	4841      	ldr	r0, [pc, #260]	; (24724 <z_impl_k_yield+0x128>)
   2461e:	f008 f945 	bl	2c8ac <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   24622:	4c43      	ldr	r4, [pc, #268]	; (24730 <z_impl_k_yield+0x134>)
   24624:	4e43      	ldr	r6, [pc, #268]	; (24734 <z_impl_k_yield+0x138>)
   24626:	68a2      	ldr	r2, [r4, #8]
   24628:	42b2      	cmp	r2, r6
   2462a:	d067      	beq.n	246fc <z_impl_k_yield+0x100>
	__asm__ volatile(
   2462c:	f04f 0320 	mov.w	r3, #32
   24630:	f3ef 8711 	mrs	r7, BASEPRI
   24634:	f383 8811 	msr	BASEPRI, r3
   24638:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2463c:	483e      	ldr	r0, [pc, #248]	; (24738 <z_impl_k_yield+0x13c>)
   2463e:	f000 fb81 	bl	24d44 <z_spin_lock_valid>
   24642:	b968      	cbnz	r0, 24660 <z_impl_k_yield+0x64>
   24644:	235c      	movs	r3, #92	; 0x5c
   24646:	4a3d      	ldr	r2, [pc, #244]	; (2473c <z_impl_k_yield+0x140>)
   24648:	493d      	ldr	r1, [pc, #244]	; (24740 <z_impl_k_yield+0x144>)
   2464a:	4837      	ldr	r0, [pc, #220]	; (24728 <z_impl_k_yield+0x12c>)
   2464c:	f007 ff11 	bl	2c472 <printk>
   24650:	4939      	ldr	r1, [pc, #228]	; (24738 <z_impl_k_yield+0x13c>)
   24652:	483c      	ldr	r0, [pc, #240]	; (24744 <z_impl_k_yield+0x148>)
   24654:	f007 ff0d 	bl	2c472 <printk>
   24658:	215c      	movs	r1, #92	; 0x5c
   2465a:	4838      	ldr	r0, [pc, #224]	; (2473c <z_impl_k_yield+0x140>)
   2465c:	f008 f926 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   24660:	4835      	ldr	r0, [pc, #212]	; (24738 <z_impl_k_yield+0x13c>)
   24662:	f000 fb8d 	bl	24d80 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   24666:	68a1      	ldr	r1, [r4, #8]
   24668:	4837      	ldr	r0, [pc, #220]	; (24748 <z_impl_k_yield+0x14c>)
   2466a:	f7ff f975 	bl	23958 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2466e:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24670:	42b5      	cmp	r5, r6
   24672:	d10b      	bne.n	2468c <z_impl_k_yield+0x90>
   24674:	4935      	ldr	r1, [pc, #212]	; (2474c <z_impl_k_yield+0x150>)
   24676:	482c      	ldr	r0, [pc, #176]	; (24728 <z_impl_k_yield+0x12c>)
   24678:	f240 3389 	movw	r3, #905	; 0x389
   2467c:	4a29      	ldr	r2, [pc, #164]	; (24724 <z_impl_k_yield+0x128>)
   2467e:	f007 fef8 	bl	2c472 <printk>
   24682:	f240 3189 	movw	r1, #905	; 0x389
   24686:	4827      	ldr	r0, [pc, #156]	; (24724 <z_impl_k_yield+0x128>)
   24688:	f008 f910 	bl	2c8ac <assert_post_action>
	return list->head == list;
   2468c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2468e:	492e      	ldr	r1, [pc, #184]	; (24748 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24690:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24692:	428b      	cmp	r3, r1
   24694:	bf08      	it	eq
   24696:	2300      	moveq	r3, #0
   24698:	2b00      	cmp	r3, #0
   2469a:	bf38      	it	cc
   2469c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2469e:	2b00      	cmp	r3, #0
   246a0:	d038      	beq.n	24714 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   246a2:	f995 600e 	ldrsb.w	r6, [r5, #14]
   246a6:	f993 000e 	ldrsb.w	r0, [r3, #14]
   246aa:	4286      	cmp	r6, r0
   246ac:	db03      	blt.n	246b6 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   246ae:	4293      	cmp	r3, r2
   246b0:	d030      	beq.n	24714 <z_impl_k_yield+0x118>
   246b2:	681b      	ldr	r3, [r3, #0]
   246b4:	e7f3      	b.n	2469e <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   246b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   246b8:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   246bc:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   246be:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   246c0:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   246c2:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   246c4:	7b53      	ldrb	r3, [r2, #13]
   246c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   246ca:	7353      	strb	r3, [r2, #13]
   246cc:	f7ff f9be 	bl	23a4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   246d0:	4819      	ldr	r0, [pc, #100]	; (24738 <z_impl_k_yield+0x13c>)
   246d2:	f000 fb45 	bl	24d60 <z_spin_unlock_valid>
   246d6:	b968      	cbnz	r0, 246f4 <z_impl_k_yield+0xf8>
   246d8:	2384      	movs	r3, #132	; 0x84
   246da:	4a18      	ldr	r2, [pc, #96]	; (2473c <z_impl_k_yield+0x140>)
   246dc:	491c      	ldr	r1, [pc, #112]	; (24750 <z_impl_k_yield+0x154>)
   246de:	4812      	ldr	r0, [pc, #72]	; (24728 <z_impl_k_yield+0x12c>)
   246e0:	f007 fec7 	bl	2c472 <printk>
   246e4:	4914      	ldr	r1, [pc, #80]	; (24738 <z_impl_k_yield+0x13c>)
   246e6:	481b      	ldr	r0, [pc, #108]	; (24754 <z_impl_k_yield+0x158>)
   246e8:	f007 fec3 	bl	2c472 <printk>
   246ec:	2184      	movs	r1, #132	; 0x84
   246ee:	4813      	ldr	r0, [pc, #76]	; (2473c <z_impl_k_yield+0x140>)
   246f0:	f008 f8dc 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   246f4:	f387 8811 	msr	BASEPRI, r7
   246f8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   246fc:	f04f 0320 	mov.w	r3, #32
   24700:	f3ef 8011 	mrs	r0, BASEPRI
   24704:	f383 8811 	msr	BASEPRI, r3
   24708:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   2470c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24710:	f7ef bf1e 	b.w	14550 <arch_swap>
	node->prev = list->tail;
   24714:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   24718:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2471a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2471c:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   2471e:	e7cf      	b.n	246c0 <z_impl_k_yield+0xc4>
   24720:	00032f55 	.word	0x00032f55
   24724:	00032ffe 	.word	0x00032ffe
   24728:	0003049a 	.word	0x0003049a
   2472c:	00030ac7 	.word	0x00030ac7
   24730:	20021de0 	.word	0x20021de0
   24734:	200211b8 	.word	0x200211b8
   24738:	20021e18 	.word	0x20021e18
   2473c:	0003056a 	.word	0x0003056a
   24740:	000305bc 	.word	0x000305bc
   24744:	000305d1 	.word	0x000305d1
   24748:	20021e08 	.word	0x20021e08
   2474c:	00033037 	.word	0x00033037
   24750:	00030590 	.word	0x00030590
   24754:	000305a7 	.word	0x000305a7

00024758 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   24758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2475c:	4604      	mov	r4, r0
   2475e:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   24762:	b173      	cbz	r3, 24782 <z_tick_sleep+0x2a>
   24764:	493b      	ldr	r1, [pc, #236]	; (24854 <z_tick_sleep+0xfc>)
   24766:	f240 43b2 	movw	r3, #1202	; 0x4b2
   2476a:	4a3b      	ldr	r2, [pc, #236]	; (24858 <z_tick_sleep+0x100>)
   2476c:	483b      	ldr	r0, [pc, #236]	; (2485c <z_tick_sleep+0x104>)
   2476e:	f007 fe80 	bl	2c472 <printk>
   24772:	483b      	ldr	r0, [pc, #236]	; (24860 <z_tick_sleep+0x108>)
   24774:	f007 fe7d 	bl	2c472 <printk>
   24778:	f240 41b2 	movw	r1, #1202	; 0x4b2
   2477c:	4836      	ldr	r0, [pc, #216]	; (24858 <z_tick_sleep+0x100>)
   2477e:	f008 f895 	bl	2c8ac <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   24782:	b924      	cbnz	r4, 2478e <z_tick_sleep+0x36>
	z_impl_k_yield();
   24784:	f7ff ff3a 	bl	245fc <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   24788:	4620      	mov	r0, r4
   2478a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   2478e:	f00a fa03 	bl	2eb98 <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
   24792:	4626      	mov	r6, r4
   24794:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
   24796:	4404      	add	r4, r0
   24798:	f04f 0320 	mov.w	r3, #32
   2479c:	f3ef 8811 	mrs	r8, BASEPRI
   247a0:	f383 8811 	msr	BASEPRI, r3
   247a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247a8:	482e      	ldr	r0, [pc, #184]	; (24864 <z_tick_sleep+0x10c>)
   247aa:	f000 facb 	bl	24d44 <z_spin_lock_valid>
   247ae:	b968      	cbnz	r0, 247cc <z_tick_sleep+0x74>
   247b0:	235c      	movs	r3, #92	; 0x5c
   247b2:	4a2d      	ldr	r2, [pc, #180]	; (24868 <z_tick_sleep+0x110>)
   247b4:	492d      	ldr	r1, [pc, #180]	; (2486c <z_tick_sleep+0x114>)
   247b6:	4829      	ldr	r0, [pc, #164]	; (2485c <z_tick_sleep+0x104>)
   247b8:	f007 fe5b 	bl	2c472 <printk>
   247bc:	4929      	ldr	r1, [pc, #164]	; (24864 <z_tick_sleep+0x10c>)
   247be:	482c      	ldr	r0, [pc, #176]	; (24870 <z_tick_sleep+0x118>)
   247c0:	f007 fe57 	bl	2c472 <printk>
   247c4:	215c      	movs	r1, #92	; 0x5c
   247c6:	4828      	ldr	r0, [pc, #160]	; (24868 <z_tick_sleep+0x110>)
   247c8:	f008 f870 	bl	2c8ac <assert_post_action>
	pending_current = _current;
   247cc:	4d29      	ldr	r5, [pc, #164]	; (24874 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   247ce:	4825      	ldr	r0, [pc, #148]	; (24864 <z_tick_sleep+0x10c>)
   247d0:	f000 fad6 	bl	24d80 <z_spin_lock_set_owner>
   247d4:	68a8      	ldr	r0, [r5, #8]
   247d6:	4b28      	ldr	r3, [pc, #160]	; (24878 <z_tick_sleep+0x120>)
   247d8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   247da:	f7ff fcfb 	bl	241d4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   247de:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   247e0:	4632      	mov	r2, r6
   247e2:	463b      	mov	r3, r7
   247e4:	3018      	adds	r0, #24
   247e6:	4925      	ldr	r1, [pc, #148]	; (2487c <z_tick_sleep+0x124>)
   247e8:	f000 fbd0 	bl	24f8c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   247ec:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247ee:	481d      	ldr	r0, [pc, #116]	; (24864 <z_tick_sleep+0x10c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   247f0:	7b53      	ldrb	r3, [r2, #13]
   247f2:	f043 0310 	orr.w	r3, r3, #16
   247f6:	7353      	strb	r3, [r2, #13]
   247f8:	f000 fab2 	bl	24d60 <z_spin_unlock_valid>
   247fc:	b968      	cbnz	r0, 2481a <z_tick_sleep+0xc2>
   247fe:	239b      	movs	r3, #155	; 0x9b
   24800:	4a19      	ldr	r2, [pc, #100]	; (24868 <z_tick_sleep+0x110>)
   24802:	491f      	ldr	r1, [pc, #124]	; (24880 <z_tick_sleep+0x128>)
   24804:	4815      	ldr	r0, [pc, #84]	; (2485c <z_tick_sleep+0x104>)
   24806:	f007 fe34 	bl	2c472 <printk>
   2480a:	4916      	ldr	r1, [pc, #88]	; (24864 <z_tick_sleep+0x10c>)
   2480c:	481d      	ldr	r0, [pc, #116]	; (24884 <z_tick_sleep+0x12c>)
   2480e:	f007 fe30 	bl	2c472 <printk>
   24812:	219b      	movs	r1, #155	; 0x9b
   24814:	4814      	ldr	r0, [pc, #80]	; (24868 <z_tick_sleep+0x110>)
   24816:	f008 f849 	bl	2c8ac <assert_post_action>
   2481a:	4640      	mov	r0, r8
   2481c:	f7ef fe98 	bl	14550 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   24820:	68ab      	ldr	r3, [r5, #8]
   24822:	7b5b      	ldrb	r3, [r3, #13]
   24824:	06db      	lsls	r3, r3, #27
   24826:	d50e      	bpl.n	24846 <z_tick_sleep+0xee>
   24828:	4917      	ldr	r1, [pc, #92]	; (24888 <z_tick_sleep+0x130>)
   2482a:	f240 43d2 	movw	r3, #1234	; 0x4d2
   2482e:	4a0a      	ldr	r2, [pc, #40]	; (24858 <z_tick_sleep+0x100>)
   24830:	480a      	ldr	r0, [pc, #40]	; (2485c <z_tick_sleep+0x104>)
   24832:	f007 fe1e 	bl	2c472 <printk>
   24836:	480a      	ldr	r0, [pc, #40]	; (24860 <z_tick_sleep+0x108>)
   24838:	f007 fe1b 	bl	2c472 <printk>
   2483c:	f240 41d2 	movw	r1, #1234	; 0x4d2
   24840:	4805      	ldr	r0, [pc, #20]	; (24858 <z_tick_sleep+0x100>)
   24842:	f008 f833 	bl	2c8ac <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   24846:	f00a f9a7 	bl	2eb98 <z_tick_get_32>
   2484a:	1a24      	subs	r4, r4, r0
   2484c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   24850:	e79a      	b.n	24788 <z_tick_sleep+0x30>
   24852:	bf00      	nop
   24854:	00032f55 	.word	0x00032f55
   24858:	00032ffe 	.word	0x00032ffe
   2485c:	0003049a 	.word	0x0003049a
   24860:	00030ac7 	.word	0x00030ac7
   24864:	20021e18 	.word	0x20021e18
   24868:	0003056a 	.word	0x0003056a
   2486c:	000305bc 	.word	0x000305bc
   24870:	000305d1 	.word	0x000305d1
   24874:	20021de0 	.word	0x20021de0
   24878:	20021e14 	.word	0x20021e14
   2487c:	00023d61 	.word	0x00023d61
   24880:	00030590 	.word	0x00030590
   24884:	000305a7 	.word	0x000305a7
   24888:	000330d1 	.word	0x000330d1

0002488c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2488c:	b538      	push	{r3, r4, r5, lr}
   2488e:	4604      	mov	r4, r0
   24890:	460d      	mov	r5, r1
   24892:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   24896:	b173      	cbz	r3, 248b6 <z_impl_k_sleep+0x2a>
   24898:	4912      	ldr	r1, [pc, #72]	; (248e4 <z_impl_k_sleep+0x58>)
   2489a:	f240 43e1 	movw	r3, #1249	; 0x4e1
   2489e:	4a12      	ldr	r2, [pc, #72]	; (248e8 <z_impl_k_sleep+0x5c>)
   248a0:	4812      	ldr	r0, [pc, #72]	; (248ec <z_impl_k_sleep+0x60>)
   248a2:	f007 fde6 	bl	2c472 <printk>
   248a6:	4812      	ldr	r0, [pc, #72]	; (248f0 <z_impl_k_sleep+0x64>)
   248a8:	f007 fde3 	bl	2c472 <printk>
   248ac:	f240 41e1 	movw	r1, #1249	; 0x4e1
   248b0:	480d      	ldr	r0, [pc, #52]	; (248e8 <z_impl_k_sleep+0x5c>)
   248b2:	f007 fffb 	bl	2c8ac <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   248b6:	3501      	adds	r5, #1
   248b8:	bf08      	it	eq
   248ba:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   248be:	d106      	bne.n	248ce <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   248c0:	4b0c      	ldr	r3, [pc, #48]	; (248f4 <z_impl_k_sleep+0x68>)
   248c2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   248c4:	f7ff fb6c 	bl	23fa0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   248c8:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   248cc:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   248ce:	4620      	mov	r0, r4
   248d0:	f7ff ff42 	bl	24758 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   248d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   248d8:	fb80 0103 	smull	r0, r1, r0, r3
   248dc:	0bc3      	lsrs	r3, r0, #15
   248de:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   248e2:	e7f3      	b.n	248cc <z_impl_k_sleep+0x40>
   248e4:	00032f55 	.word	0x00032f55
   248e8:	00032ffe 	.word	0x00032ffe
   248ec:	0003049a 	.word	0x0003049a
   248f0:	00030ac7 	.word	0x00030ac7
   248f4:	20021de0 	.word	0x20021de0

000248f8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   248f8:	4b01      	ldr	r3, [pc, #4]	; (24900 <z_impl_k_current_get+0x8>)
   248fa:	6898      	ldr	r0, [r3, #8]
   248fc:	4770      	bx	lr
   248fe:	bf00      	nop
   24900:	20021de0 	.word	0x20021de0

00024904 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24904:	b538      	push	{r3, r4, r5, lr}
   24906:	4604      	mov	r4, r0
   24908:	f04f 0320 	mov.w	r3, #32
   2490c:	f3ef 8511 	mrs	r5, BASEPRI
   24910:	f383 8811 	msr	BASEPRI, r3
   24914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24918:	4817      	ldr	r0, [pc, #92]	; (24978 <z_impl_k_sem_give+0x74>)
   2491a:	f000 fa13 	bl	24d44 <z_spin_lock_valid>
   2491e:	b968      	cbnz	r0, 2493c <z_impl_k_sem_give+0x38>
   24920:	235c      	movs	r3, #92	; 0x5c
   24922:	4a16      	ldr	r2, [pc, #88]	; (2497c <z_impl_k_sem_give+0x78>)
   24924:	4916      	ldr	r1, [pc, #88]	; (24980 <z_impl_k_sem_give+0x7c>)
   24926:	4817      	ldr	r0, [pc, #92]	; (24984 <z_impl_k_sem_give+0x80>)
   24928:	f007 fda3 	bl	2c472 <printk>
   2492c:	4912      	ldr	r1, [pc, #72]	; (24978 <z_impl_k_sem_give+0x74>)
   2492e:	4816      	ldr	r0, [pc, #88]	; (24988 <z_impl_k_sem_give+0x84>)
   24930:	f007 fd9f 	bl	2c472 <printk>
   24934:	215c      	movs	r1, #92	; 0x5c
   24936:	4811      	ldr	r0, [pc, #68]	; (2497c <z_impl_k_sem_give+0x78>)
   24938:	f007 ffb8 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2493c:	480e      	ldr	r0, [pc, #56]	; (24978 <z_impl_k_sem_give+0x74>)
   2493e:	f000 fa1f 	bl	24d80 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   24942:	4620      	mov	r0, r4
   24944:	f7ff fdc8 	bl	244d8 <z_unpend_first_thread>

	if (thread != NULL) {
   24948:	b148      	cbz	r0, 2495e <z_impl_k_sem_give+0x5a>
   2494a:	2200      	movs	r2, #0
   2494c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2494e:	f7ff f96b 	bl	23c28 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24952:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   24954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   24958:	4807      	ldr	r0, [pc, #28]	; (24978 <z_impl_k_sem_give+0x74>)
   2495a:	f7fe bf41 	b.w	237e0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2495e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   24962:	429a      	cmp	r2, r3
   24964:	bf18      	it	ne
   24966:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24968:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2496a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2496c:	f104 0010 	add.w	r0, r4, #16
   24970:	f00a f9bb 	bl	2ecea <z_handle_obj_poll_events>
}
   24974:	e7ed      	b.n	24952 <z_impl_k_sem_give+0x4e>
   24976:	bf00      	nop
   24978:	20021e24 	.word	0x20021e24
   2497c:	0003056a 	.word	0x0003056a
   24980:	000305bc 	.word	0x000305bc
   24984:	0003049a 	.word	0x0003049a
   24988:	000305d1 	.word	0x000305d1

0002498c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2498c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2498e:	4604      	mov	r4, r0
   24990:	4616      	mov	r6, r2
   24992:	461f      	mov	r7, r3
   24994:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   24998:	b17b      	cbz	r3, 249ba <z_impl_k_sem_take+0x2e>
   2499a:	ea56 0307 	orrs.w	r3, r6, r7
   2499e:	d00c      	beq.n	249ba <z_impl_k_sem_take+0x2e>
   249a0:	4935      	ldr	r1, [pc, #212]	; (24a78 <z_impl_k_sem_take+0xec>)
   249a2:	238c      	movs	r3, #140	; 0x8c
   249a4:	4a35      	ldr	r2, [pc, #212]	; (24a7c <z_impl_k_sem_take+0xf0>)
   249a6:	4836      	ldr	r0, [pc, #216]	; (24a80 <z_impl_k_sem_take+0xf4>)
   249a8:	f007 fd63 	bl	2c472 <printk>
   249ac:	4835      	ldr	r0, [pc, #212]	; (24a84 <z_impl_k_sem_take+0xf8>)
   249ae:	f007 fd60 	bl	2c472 <printk>
   249b2:	218c      	movs	r1, #140	; 0x8c
   249b4:	4831      	ldr	r0, [pc, #196]	; (24a7c <z_impl_k_sem_take+0xf0>)
   249b6:	f007 ff79 	bl	2c8ac <assert_post_action>
   249ba:	f04f 0320 	mov.w	r3, #32
   249be:	f3ef 8511 	mrs	r5, BASEPRI
   249c2:	f383 8811 	msr	BASEPRI, r3
   249c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   249ca:	482f      	ldr	r0, [pc, #188]	; (24a88 <z_impl_k_sem_take+0xfc>)
   249cc:	f000 f9ba 	bl	24d44 <z_spin_lock_valid>
   249d0:	b968      	cbnz	r0, 249ee <z_impl_k_sem_take+0x62>
   249d2:	235c      	movs	r3, #92	; 0x5c
   249d4:	4a2d      	ldr	r2, [pc, #180]	; (24a8c <z_impl_k_sem_take+0x100>)
   249d6:	492e      	ldr	r1, [pc, #184]	; (24a90 <z_impl_k_sem_take+0x104>)
   249d8:	4829      	ldr	r0, [pc, #164]	; (24a80 <z_impl_k_sem_take+0xf4>)
   249da:	f007 fd4a 	bl	2c472 <printk>
   249de:	492a      	ldr	r1, [pc, #168]	; (24a88 <z_impl_k_sem_take+0xfc>)
   249e0:	482c      	ldr	r0, [pc, #176]	; (24a94 <z_impl_k_sem_take+0x108>)
   249e2:	f007 fd46 	bl	2c472 <printk>
   249e6:	215c      	movs	r1, #92	; 0x5c
   249e8:	4828      	ldr	r0, [pc, #160]	; (24a8c <z_impl_k_sem_take+0x100>)
   249ea:	f007 ff5f 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   249ee:	4826      	ldr	r0, [pc, #152]	; (24a88 <z_impl_k_sem_take+0xfc>)
   249f0:	f000 f9c6 	bl	24d80 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   249f4:	68a3      	ldr	r3, [r4, #8]
   249f6:	b1d3      	cbz	r3, 24a2e <z_impl_k_sem_take+0xa2>
		sem->count--;
   249f8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   249fa:	4823      	ldr	r0, [pc, #140]	; (24a88 <z_impl_k_sem_take+0xfc>)
   249fc:	60a3      	str	r3, [r4, #8]
   249fe:	f000 f9af 	bl	24d60 <z_spin_unlock_valid>
   24a02:	b968      	cbnz	r0, 24a20 <z_impl_k_sem_take+0x94>
   24a04:	2384      	movs	r3, #132	; 0x84
   24a06:	4a21      	ldr	r2, [pc, #132]	; (24a8c <z_impl_k_sem_take+0x100>)
   24a08:	4923      	ldr	r1, [pc, #140]	; (24a98 <z_impl_k_sem_take+0x10c>)
   24a0a:	481d      	ldr	r0, [pc, #116]	; (24a80 <z_impl_k_sem_take+0xf4>)
   24a0c:	f007 fd31 	bl	2c472 <printk>
   24a10:	491d      	ldr	r1, [pc, #116]	; (24a88 <z_impl_k_sem_take+0xfc>)
   24a12:	4822      	ldr	r0, [pc, #136]	; (24a9c <z_impl_k_sem_take+0x110>)
   24a14:	f007 fd2d 	bl	2c472 <printk>
   24a18:	2184      	movs	r1, #132	; 0x84
   24a1a:	481c      	ldr	r0, [pc, #112]	; (24a8c <z_impl_k_sem_take+0x100>)
   24a1c:	f007 ff46 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   24a20:	f385 8811 	msr	BASEPRI, r5
   24a24:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   24a28:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   24a2a:	b003      	add	sp, #12
   24a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24a2e:	ea56 0307 	orrs.w	r3, r6, r7
   24a32:	d118      	bne.n	24a66 <z_impl_k_sem_take+0xda>
   24a34:	4814      	ldr	r0, [pc, #80]	; (24a88 <z_impl_k_sem_take+0xfc>)
   24a36:	f000 f993 	bl	24d60 <z_spin_unlock_valid>
   24a3a:	b968      	cbnz	r0, 24a58 <z_impl_k_sem_take+0xcc>
   24a3c:	2384      	movs	r3, #132	; 0x84
   24a3e:	4a13      	ldr	r2, [pc, #76]	; (24a8c <z_impl_k_sem_take+0x100>)
   24a40:	4915      	ldr	r1, [pc, #84]	; (24a98 <z_impl_k_sem_take+0x10c>)
   24a42:	480f      	ldr	r0, [pc, #60]	; (24a80 <z_impl_k_sem_take+0xf4>)
   24a44:	f007 fd15 	bl	2c472 <printk>
   24a48:	490f      	ldr	r1, [pc, #60]	; (24a88 <z_impl_k_sem_take+0xfc>)
   24a4a:	4814      	ldr	r0, [pc, #80]	; (24a9c <z_impl_k_sem_take+0x110>)
   24a4c:	f007 fd11 	bl	2c472 <printk>
   24a50:	2184      	movs	r1, #132	; 0x84
   24a52:	480e      	ldr	r0, [pc, #56]	; (24a8c <z_impl_k_sem_take+0x100>)
   24a54:	f007 ff2a 	bl	2c8ac <assert_post_action>
   24a58:	f385 8811 	msr	BASEPRI, r5
   24a5c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   24a60:	f06f 000f 	mvn.w	r0, #15
   24a64:	e7e1      	b.n	24a2a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   24a66:	4622      	mov	r2, r4
   24a68:	4629      	mov	r1, r5
   24a6a:	e9cd 6700 	strd	r6, r7, [sp]
   24a6e:	4806      	ldr	r0, [pc, #24]	; (24a88 <z_impl_k_sem_take+0xfc>)
   24a70:	f7ff fc6c 	bl	2434c <z_pend_curr>
	return ret;
   24a74:	e7d9      	b.n	24a2a <z_impl_k_sem_take+0x9e>
   24a76:	bf00      	nop
   24a78:	00033131 	.word	0x00033131
   24a7c:	00033111 	.word	0x00033111
   24a80:	0003049a 	.word	0x0003049a
   24a84:	00030ac7 	.word	0x00030ac7
   24a88:	20021e24 	.word	0x20021e24
   24a8c:	0003056a 	.word	0x0003056a
   24a90:	000305bc 	.word	0x000305bc
   24a94:	000305d1 	.word	0x000305d1
   24a98:	00030590 	.word	0x00030590
   24a9c:	000305a7 	.word	0x000305a7

00024aa0 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24aa0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   24aa2:	4c08      	ldr	r4, [pc, #32]	; (24ac4 <k_sys_work_q_init+0x24>)
   24aa4:	f04f 33ff 	mov.w	r3, #4294967295
   24aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24aac:	4620      	mov	r0, r4
   24aae:	4906      	ldr	r1, [pc, #24]	; (24ac8 <k_sys_work_q_init+0x28>)
   24ab0:	f000 f96e 	bl	24d90 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   24ab4:	4905      	ldr	r1, [pc, #20]	; (24acc <k_sys_work_q_init+0x2c>)
   24ab6:	f104 0020 	add.w	r0, r4, #32
   24aba:	f00a f804 	bl	2eac6 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   24abe:	2000      	movs	r0, #0
   24ac0:	bd10      	pop	{r4, pc}
   24ac2:	bf00      	nop
   24ac4:	20021348 	.word	0x20021348
   24ac8:	20029c78 	.word	0x20029c78
   24acc:	0003317e 	.word	0x0003317e

00024ad0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24ad0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   24ad4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   24ad6:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   24ad8:	2e0f      	cmp	r6, #15
{
   24ada:	460f      	mov	r7, r1
   24adc:	4615      	mov	r5, r2
   24ade:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   24ae0:	d12d      	bne.n	24b3e <z_setup_new_thread+0x6e>
   24ae2:	4b23      	ldr	r3, [pc, #140]	; (24b70 <z_setup_new_thread+0xa0>)
   24ae4:	4598      	cmp	r8, r3
   24ae6:	d12e      	bne.n	24b46 <z_setup_new_thread+0x76>
	sys_dlist_init(&w->waitq);
   24ae8:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   24aec:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   24af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   24af2:	73a6      	strb	r6, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   24af4:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24af6:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   24af8:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
   24afa:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24afe:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24b00:	9302      	str	r3, [sp, #8]
   24b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24b04:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24b08:	9301      	str	r3, [sp, #4]
   24b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   24b0c:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   24b0e:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24b12:	9300      	str	r3, [sp, #0]
   24b14:	462a      	mov	r2, r5
   24b16:	4643      	mov	r3, r8
   24b18:	4639      	mov	r1, r7
   24b1a:	4620      	mov	r0, r4
	node->prev = NULL;
   24b1c:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->sched_locked = 0U;
   24b20:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   24b22:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24b24:	f7ef fdf4 	bl	14710 <arch_new_thread>
	if (!_current) {
   24b28:	4b12      	ldr	r3, [pc, #72]	; (24b74 <z_setup_new_thread+0xa4>)
	new_thread->fn_abort = NULL;
   24b2a:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
	if (!_current) {
   24b2e:	689b      	ldr	r3, [r3, #8]
   24b30:	b103      	cbz	r3, 24b34 <z_setup_new_thread+0x64>
	new_thread->resource_pool = _current->resource_pool;
   24b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   24b34:	4628      	mov	r0, r5
   24b36:	6763      	str	r3, [r4, #116]	; 0x74
   24b38:	b004      	add	sp, #16
   24b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   24b3e:	f106 0310 	add.w	r3, r6, #16
   24b42:	2b1e      	cmp	r3, #30
   24b44:	d9d0      	bls.n	24ae8 <z_setup_new_thread+0x18>
   24b46:	f240 2313 	movw	r3, #531	; 0x213
   24b4a:	4a0b      	ldr	r2, [pc, #44]	; (24b78 <z_setup_new_thread+0xa8>)
   24b4c:	490b      	ldr	r1, [pc, #44]	; (24b7c <z_setup_new_thread+0xac>)
   24b4e:	480c      	ldr	r0, [pc, #48]	; (24b80 <z_setup_new_thread+0xb0>)
   24b50:	f007 fc8f 	bl	2c472 <printk>
   24b54:	4631      	mov	r1, r6
   24b56:	f06f 030f 	mvn.w	r3, #15
   24b5a:	220e      	movs	r2, #14
   24b5c:	4809      	ldr	r0, [pc, #36]	; (24b84 <z_setup_new_thread+0xb4>)
   24b5e:	f007 fc88 	bl	2c472 <printk>
   24b62:	f240 2113 	movw	r1, #531	; 0x213
   24b66:	4804      	ldr	r0, [pc, #16]	; (24b78 <z_setup_new_thread+0xa8>)
   24b68:	f007 fea0 	bl	2c8ac <assert_post_action>
   24b6c:	e7bc      	b.n	24ae8 <z_setup_new_thread+0x18>
   24b6e:	bf00      	nop
   24b70:	00022741 	.word	0x00022741
   24b74:	20021de0 	.word	0x20021de0
   24b78:	00033187 	.word	0x00033187
   24b7c:	000331aa 	.word	0x000331aa
   24b80:	0003049a 	.word	0x0003049a
   24b84:	0003322a 	.word	0x0003322a

00024b88 <z_impl_k_thread_create>:
{
   24b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24b8c:	b087      	sub	sp, #28
   24b8e:	4604      	mov	r4, r0
   24b90:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   24b94:	460d      	mov	r5, r1
   24b96:	4690      	mov	r8, r2
   24b98:	4699      	mov	r9, r3
   24b9a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   24b9e:	b173      	cbz	r3, 24bbe <z_impl_k_thread_create+0x36>
   24ba0:	491b      	ldr	r1, [pc, #108]	; (24c10 <z_impl_k_thread_create+0x88>)
   24ba2:	f240 2373 	movw	r3, #627	; 0x273
   24ba6:	4a1b      	ldr	r2, [pc, #108]	; (24c14 <z_impl_k_thread_create+0x8c>)
   24ba8:	481b      	ldr	r0, [pc, #108]	; (24c18 <z_impl_k_thread_create+0x90>)
   24baa:	f007 fc62 	bl	2c472 <printk>
   24bae:	481b      	ldr	r0, [pc, #108]	; (24c1c <z_impl_k_thread_create+0x94>)
   24bb0:	f007 fc5f 	bl	2c472 <printk>
   24bb4:	f240 2173 	movw	r1, #627	; 0x273
   24bb8:	4816      	ldr	r0, [pc, #88]	; (24c14 <z_impl_k_thread_create+0x8c>)
   24bba:	f007 fe77 	bl	2c8ac <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24bbe:	2300      	movs	r3, #0
   24bc0:	9305      	str	r3, [sp, #20]
   24bc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24bc4:	4642      	mov	r2, r8
   24bc6:	9304      	str	r3, [sp, #16]
   24bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24bca:	4629      	mov	r1, r5
   24bcc:	9303      	str	r3, [sp, #12]
   24bce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24bd0:	4620      	mov	r0, r4
   24bd2:	9302      	str	r3, [sp, #8]
   24bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24bd6:	9301      	str	r3, [sp, #4]
   24bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24bda:	9300      	str	r3, [sp, #0]
   24bdc:	464b      	mov	r3, r9
   24bde:	f7ff ff77 	bl	24ad0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24be2:	1c7b      	adds	r3, r7, #1
   24be4:	bf08      	it	eq
   24be6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24bea:	d005      	beq.n	24bf8 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24bec:	ea56 0307 	orrs.w	r3, r6, r7
   24bf0:	d106      	bne.n	24c00 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   24bf2:	4620      	mov	r0, r4
   24bf4:	f7ff f860 	bl	23cb8 <z_sched_start>
}
   24bf8:	4620      	mov	r0, r4
   24bfa:	b007      	add	sp, #28
   24bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24c00:	4632      	mov	r2, r6
   24c02:	463b      	mov	r3, r7
   24c04:	4906      	ldr	r1, [pc, #24]	; (24c20 <z_impl_k_thread_create+0x98>)
   24c06:	f104 0018 	add.w	r0, r4, #24
   24c0a:	f000 f9bf 	bl	24f8c <z_add_timeout>
   24c0e:	e7f3      	b.n	24bf8 <z_impl_k_thread_create+0x70>
   24c10:	00032f55 	.word	0x00032f55
   24c14:	00033187 	.word	0x00033187
   24c18:	0003049a 	.word	0x0003049a
   24c1c:	0003325b 	.word	0x0003325b
   24c20:	00023d61 	.word	0x00023d61

00024c24 <z_init_static_threads>:
{
   24c24:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   24c28:	4f3f      	ldr	r7, [pc, #252]	; (24d28 <z_init_static_threads+0x104>)
   24c2a:	4d40      	ldr	r5, [pc, #256]	; (24d2c <z_init_static_threads+0x108>)
   24c2c:	463e      	mov	r6, r7
   24c2e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 24d3c <z_init_static_threads+0x118>
{
   24c32:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   24c34:	42bd      	cmp	r5, r7
   24c36:	d90e      	bls.n	24c56 <z_init_static_threads+0x32>
   24c38:	493d      	ldr	r1, [pc, #244]	; (24d30 <z_init_static_threads+0x10c>)
   24c3a:	f240 23e1 	movw	r3, #737	; 0x2e1
   24c3e:	4642      	mov	r2, r8
   24c40:	483c      	ldr	r0, [pc, #240]	; (24d34 <z_init_static_threads+0x110>)
   24c42:	f007 fc16 	bl	2c472 <printk>
   24c46:	483c      	ldr	r0, [pc, #240]	; (24d38 <z_init_static_threads+0x114>)
   24c48:	f007 fc13 	bl	2c472 <printk>
   24c4c:	f240 21e1 	movw	r1, #737	; 0x2e1
   24c50:	4640      	mov	r0, r8
   24c52:	f007 fe2b 	bl	2c8ac <assert_post_action>
   24c56:	42b5      	cmp	r5, r6
   24c58:	f105 0430 	add.w	r4, r5, #48	; 0x30
   24c5c:	d31f      	bcc.n	24c9e <z_init_static_threads+0x7a>
	k_sched_lock();
   24c5e:	f7fe fe03 	bl	23868 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   24c62:	4c32      	ldr	r4, [pc, #200]	; (24d2c <z_init_static_threads+0x108>)
   24c64:	4d35      	ldr	r5, [pc, #212]	; (24d3c <z_init_static_threads+0x118>)
   24c66:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 24d30 <z_init_static_threads+0x10c>
   24c6a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 24d34 <z_init_static_threads+0x110>
   24c6e:	42b4      	cmp	r4, r6
   24c70:	d90e      	bls.n	24c90 <z_init_static_threads+0x6c>
   24c72:	4641      	mov	r1, r8
   24c74:	f44f 7340 	mov.w	r3, #768	; 0x300
   24c78:	462a      	mov	r2, r5
   24c7a:	4648      	mov	r0, r9
   24c7c:	f007 fbf9 	bl	2c472 <printk>
   24c80:	482d      	ldr	r0, [pc, #180]	; (24d38 <z_init_static_threads+0x114>)
   24c82:	f007 fbf6 	bl	2c472 <printk>
   24c86:	f44f 7140 	mov.w	r1, #768	; 0x300
   24c8a:	4628      	mov	r0, r5
   24c8c:	f007 fe0e 	bl	2c8ac <assert_post_action>
   24c90:	42b4      	cmp	r4, r6
   24c92:	d321      	bcc.n	24cd8 <z_init_static_threads+0xb4>
}
   24c94:	b006      	add	sp, #24
   24c96:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   24c9a:	f7fe befb 	b.w	23a94 <k_sched_unlock>
		z_setup_new_thread(
   24c9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24ca2:	9305      	str	r3, [sp, #20]
   24ca4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24ca8:	9304      	str	r3, [sp, #16]
   24caa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   24cae:	9303      	str	r3, [sp, #12]
   24cb0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24cb4:	9302      	str	r3, [sp, #8]
   24cb6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   24cba:	9301      	str	r3, [sp, #4]
   24cbc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24cc0:	9300      	str	r3, [sp, #0]
   24cc2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   24cc6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   24cca:	f7ff ff01 	bl	24ad0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24cce:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24cd2:	65dd      	str	r5, [r3, #92]	; 0x5c
   24cd4:	4625      	mov	r5, r4
   24cd6:	e7ad      	b.n	24c34 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24cd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24cda:	1c4b      	adds	r3, r1, #1
   24cdc:	d014      	beq.n	24d08 <z_init_static_threads+0xe4>
   24cde:	f240 32e7 	movw	r2, #999	; 0x3e7
   24ce2:	2300      	movs	r3, #0
   24ce4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   24ce8:	4693      	mov	fp, r2
   24cea:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   24cec:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   24cf0:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24cf4:	459c      	cmp	ip, r3
   24cf6:	bf08      	it	eq
   24cf8:	4593      	cmpeq	fp, r2
   24cfa:	4658      	mov	r0, fp
   24cfc:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   24cfe:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24d00:	d104      	bne.n	24d0c <z_init_static_threads+0xe8>
	z_sched_start(thread);
   24d02:	4638      	mov	r0, r7
   24d04:	f7fe ffd8 	bl	23cb8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   24d08:	3430      	adds	r4, #48	; 0x30
   24d0a:	e7b0      	b.n	24c6e <z_init_static_threads+0x4a>
   24d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24d10:	2300      	movs	r3, #0
   24d12:	f7e7 fda1 	bl	c858 <__aeabi_uldivmod>
   24d16:	4602      	mov	r2, r0
   24d18:	460b      	mov	r3, r1
   24d1a:	f107 0018 	add.w	r0, r7, #24
   24d1e:	4908      	ldr	r1, [pc, #32]	; (24d40 <z_init_static_threads+0x11c>)
   24d20:	f000 f934 	bl	24f8c <z_add_timeout>
   24d24:	e7f0      	b.n	24d08 <z_init_static_threads+0xe4>
   24d26:	bf00      	nop
   24d28:	20020b14 	.word	0x20020b14
   24d2c:	20020ae4 	.word	0x20020ae4
   24d30:	00033280 	.word	0x00033280
   24d34:	0003049a 	.word	0x0003049a
   24d38:	00030b45 	.word	0x00030b45
   24d3c:	00033187 	.word	0x00033187
   24d40:	00023d61 	.word	0x00023d61

00024d44 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   24d44:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   24d46:	b138      	cbz	r0, 24d58 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   24d48:	4b04      	ldr	r3, [pc, #16]	; (24d5c <z_spin_lock_valid+0x18>)
   24d4a:	f000 0003 	and.w	r0, r0, #3
   24d4e:	7d1b      	ldrb	r3, [r3, #20]
   24d50:	1ac0      	subs	r0, r0, r3
   24d52:	bf18      	it	ne
   24d54:	2001      	movne	r0, #1
   24d56:	4770      	bx	lr
			return false;
		}
	}
	return true;
   24d58:	2001      	movs	r0, #1
}
   24d5a:	4770      	bx	lr
   24d5c:	20021de0 	.word	0x20021de0

00024d60 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24d60:	4a06      	ldr	r2, [pc, #24]	; (24d7c <z_spin_unlock_valid+0x1c>)
   24d62:	7d11      	ldrb	r1, [r2, #20]
   24d64:	6893      	ldr	r3, [r2, #8]
   24d66:	6802      	ldr	r2, [r0, #0]
   24d68:	430b      	orrs	r3, r1
   24d6a:	429a      	cmp	r2, r3
   24d6c:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   24d70:	bf06      	itte	eq
   24d72:	6003      	streq	r3, [r0, #0]
	return true;
   24d74:	2001      	moveq	r0, #1
		return false;
   24d76:	4618      	movne	r0, r3
}
   24d78:	4770      	bx	lr
   24d7a:	bf00      	nop
   24d7c:	20021de0 	.word	0x20021de0

00024d80 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   24d80:	4a02      	ldr	r2, [pc, #8]	; (24d8c <z_spin_lock_set_owner+0xc>)
   24d82:	7d11      	ldrb	r1, [r2, #20]
   24d84:	6893      	ldr	r3, [r2, #8]
   24d86:	430b      	orrs	r3, r1
   24d88:	6003      	str	r3, [r0, #0]
}
   24d8a:	4770      	bx	lr
   24d8c:	20021de0 	.word	0x20021de0

00024d90 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   24d90:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   24d94:	b08a      	sub	sp, #40	; 0x28
   24d96:	4604      	mov	r4, r0
   24d98:	461d      	mov	r5, r3
   24d9a:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   24d9e:	f009 fe20 	bl	2e9e2 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   24da2:	f104 0620 	add.w	r6, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24da6:	2000      	movs	r0, #0
   24da8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   24dac:	f04f 0800 	mov.w	r8, #0
   24db0:	f04f 0900 	mov.w	r9, #0
   24db4:	e9cd 5003 	strd	r5, r0, [sp, #12]
   24db8:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24dbc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   24dc0:	4630      	mov	r0, r6
   24dc2:	4b05      	ldr	r3, [pc, #20]	; (24dd8 <k_work_q_start+0x48>)
   24dc4:	9400      	str	r4, [sp, #0]
   24dc6:	f7ff fedf 	bl	24b88 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   24dca:	4630      	mov	r0, r6
   24dcc:	4903      	ldr	r1, [pc, #12]	; (24ddc <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   24dce:	b00a      	add	sp, #40	; 0x28
   24dd0:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   24dd4:	f009 be77 	b.w	2eac6 <z_impl_k_thread_name_set>
   24dd8:	00012a69 	.word	0x00012a69
   24ddc:	00031a90 	.word	0x00031a90

00024de0 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   24de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24de4:	4680      	mov	r8, r0
   24de6:	460d      	mov	r5, r1
   24de8:	4616      	mov	r6, r2
   24dea:	461f      	mov	r7, r3
	__asm__ volatile(
   24dec:	f04f 0320 	mov.w	r3, #32
   24df0:	f3ef 8911 	mrs	r9, BASEPRI
   24df4:	f383 8811 	msr	BASEPRI, r3
   24df8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24dfc:	4835      	ldr	r0, [pc, #212]	; (24ed4 <k_delayed_work_submit_to_queue+0xf4>)
   24dfe:	f7ff ffa1 	bl	24d44 <z_spin_lock_valid>
   24e02:	b968      	cbnz	r0, 24e20 <k_delayed_work_submit_to_queue+0x40>
   24e04:	235c      	movs	r3, #92	; 0x5c
   24e06:	4a34      	ldr	r2, [pc, #208]	; (24ed8 <k_delayed_work_submit_to_queue+0xf8>)
   24e08:	4934      	ldr	r1, [pc, #208]	; (24edc <k_delayed_work_submit_to_queue+0xfc>)
   24e0a:	4835      	ldr	r0, [pc, #212]	; (24ee0 <k_delayed_work_submit_to_queue+0x100>)
   24e0c:	f007 fb31 	bl	2c472 <printk>
   24e10:	4930      	ldr	r1, [pc, #192]	; (24ed4 <k_delayed_work_submit_to_queue+0xf4>)
   24e12:	4834      	ldr	r0, [pc, #208]	; (24ee4 <k_delayed_work_submit_to_queue+0x104>)
   24e14:	f007 fb2d 	bl	2c472 <printk>
   24e18:	215c      	movs	r1, #92	; 0x5c
   24e1a:	482f      	ldr	r0, [pc, #188]	; (24ed8 <k_delayed_work_submit_to_queue+0xf8>)
   24e1c:	f007 fd46 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   24e20:	482c      	ldr	r0, [pc, #176]	; (24ed4 <k_delayed_work_submit_to_queue+0xf4>)
   24e22:	f7ff ffad 	bl	24d80 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   24e26:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24e28:	b30b      	cbz	r3, 24e6e <k_delayed_work_submit_to_queue+0x8e>
   24e2a:	4543      	cmp	r3, r8
   24e2c:	d14e      	bne.n	24ecc <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   24e2e:	4628      	mov	r0, r5
   24e30:	f009 fe67 	bl	2eb02 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   24e34:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   24e38:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   24e3a:	d01b      	beq.n	24e74 <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
   24e3c:	2800      	cmp	r0, #0
   24e3e:	da1a      	bge.n	24e76 <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e40:	4824      	ldr	r0, [pc, #144]	; (24ed4 <k_delayed_work_submit_to_queue+0xf4>)
   24e42:	f7ff ff8d 	bl	24d60 <z_spin_unlock_valid>
   24e46:	b968      	cbnz	r0, 24e64 <k_delayed_work_submit_to_queue+0x84>
   24e48:	2384      	movs	r3, #132	; 0x84
   24e4a:	4a23      	ldr	r2, [pc, #140]	; (24ed8 <k_delayed_work_submit_to_queue+0xf8>)
   24e4c:	4926      	ldr	r1, [pc, #152]	; (24ee8 <k_delayed_work_submit_to_queue+0x108>)
   24e4e:	4824      	ldr	r0, [pc, #144]	; (24ee0 <k_delayed_work_submit_to_queue+0x100>)
   24e50:	f007 fb0f 	bl	2c472 <printk>
   24e54:	491f      	ldr	r1, [pc, #124]	; (24ed4 <k_delayed_work_submit_to_queue+0xf4>)
   24e56:	4825      	ldr	r0, [pc, #148]	; (24eec <k_delayed_work_submit_to_queue+0x10c>)
   24e58:	f007 fb0b 	bl	2c472 <printk>
   24e5c:	2184      	movs	r1, #132	; 0x84
   24e5e:	481e      	ldr	r0, [pc, #120]	; (24ed8 <k_delayed_work_submit_to_queue+0xf8>)
   24e60:	f007 fd24 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   24e64:	f389 8811 	msr	BASEPRI, r9
   24e68:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   24e6c:	e023      	b.n	24eb6 <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
   24e6e:	f1b8 0f00 	cmp.w	r8, #0
   24e72:	d0dc      	beq.n	24e2e <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   24e74:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24e76:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   24e7a:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24e7e:	d11d      	bne.n	24ebc <k_delayed_work_submit_to_queue+0xdc>
   24e80:	4814      	ldr	r0, [pc, #80]	; (24ed4 <k_delayed_work_submit_to_queue+0xf4>)
   24e82:	f7ff ff6d 	bl	24d60 <z_spin_unlock_valid>
   24e86:	b968      	cbnz	r0, 24ea4 <k_delayed_work_submit_to_queue+0xc4>
   24e88:	2384      	movs	r3, #132	; 0x84
   24e8a:	4a13      	ldr	r2, [pc, #76]	; (24ed8 <k_delayed_work_submit_to_queue+0xf8>)
   24e8c:	4916      	ldr	r1, [pc, #88]	; (24ee8 <k_delayed_work_submit_to_queue+0x108>)
   24e8e:	4814      	ldr	r0, [pc, #80]	; (24ee0 <k_delayed_work_submit_to_queue+0x100>)
   24e90:	f007 faef 	bl	2c472 <printk>
   24e94:	490f      	ldr	r1, [pc, #60]	; (24ed4 <k_delayed_work_submit_to_queue+0xf4>)
   24e96:	4815      	ldr	r0, [pc, #84]	; (24eec <k_delayed_work_submit_to_queue+0x10c>)
   24e98:	f007 faeb 	bl	2c472 <printk>
   24e9c:	2184      	movs	r1, #132	; 0x84
   24e9e:	480e      	ldr	r0, [pc, #56]	; (24ed8 <k_delayed_work_submit_to_queue+0xf8>)
   24ea0:	f007 fd04 	bl	2c8ac <assert_post_action>
   24ea4:	f389 8811 	msr	BASEPRI, r9
   24ea8:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   24eac:	4629      	mov	r1, r5
   24eae:	4640      	mov	r0, r8
   24eb0:	f009 fe0e 	bl	2ead0 <k_work_submit_to_queue>
		return 0;
   24eb4:	2400      	movs	r4, #0
}
   24eb6:	4620      	mov	r0, r4
   24eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   24ebc:	4632      	mov	r2, r6
   24ebe:	463b      	mov	r3, r7
   24ec0:	490b      	ldr	r1, [pc, #44]	; (24ef0 <k_delayed_work_submit_to_queue+0x110>)
   24ec2:	f105 0010 	add.w	r0, r5, #16
   24ec6:	f000 f861 	bl	24f8c <z_add_timeout>
   24eca:	e7b9      	b.n	24e40 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   24ecc:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   24ed0:	e7b6      	b.n	24e40 <k_delayed_work_submit_to_queue+0x60>
   24ed2:	bf00      	nop
   24ed4:	20021e28 	.word	0x20021e28
   24ed8:	0003056a 	.word	0x0003056a
   24edc:	000305bc 	.word	0x000305bc
   24ee0:	0003049a 	.word	0x0003049a
   24ee4:	000305d1 	.word	0x000305d1
   24ee8:	00030590 	.word	0x00030590
   24eec:	000305a7 	.word	0x000305a7
   24ef0:	0002eaf9 	.word	0x0002eaf9

00024ef4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   24ef4:	4b03      	ldr	r3, [pc, #12]	; (24f04 <elapsed+0x10>)
   24ef6:	681b      	ldr	r3, [r3, #0]
   24ef8:	b90b      	cbnz	r3, 24efe <elapsed+0xa>
   24efa:	f7ef ba87 	b.w	1440c <z_clock_elapsed>
}
   24efe:	2000      	movs	r0, #0
   24f00:	4770      	bx	lr
   24f02:	bf00      	nop
   24f04:	20021e2c 	.word	0x20021e2c

00024f08 <remove_timeout>:
{
   24f08:	b530      	push	{r4, r5, lr}
   24f0a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24f0c:	b168      	cbz	r0, 24f2a <remove_timeout+0x22>
   24f0e:	4a0a      	ldr	r2, [pc, #40]	; (24f38 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   24f10:	6852      	ldr	r2, [r2, #4]
   24f12:	4290      	cmp	r0, r2
   24f14:	d009      	beq.n	24f2a <remove_timeout+0x22>
	if (next(t) != NULL) {
   24f16:	b143      	cbz	r3, 24f2a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24f18:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24f1c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24f20:	1912      	adds	r2, r2, r4
   24f22:	eb45 0101 	adc.w	r1, r5, r1
   24f26:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   24f2a:	6842      	ldr	r2, [r0, #4]
   24f2c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   24f2e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24f30:	2300      	movs	r3, #0
	node->prev = NULL;
   24f32:	e9c0 3300 	strd	r3, r3, [r0]
}
   24f36:	bd30      	pop	{r4, r5, pc}
   24f38:	200204cc 	.word	0x200204cc

00024f3c <next_timeout>:
	return list->head == list;
   24f3c:	4b11      	ldr	r3, [pc, #68]	; (24f84 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   24f3e:	b510      	push	{r4, lr}
   24f40:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24f42:	429c      	cmp	r4, r3
   24f44:	bf08      	it	eq
   24f46:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   24f48:	f7ff ffd4 	bl	24ef4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   24f4c:	b1bc      	cbz	r4, 24f7e <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   24f4e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   24f52:	1a12      	subs	r2, r2, r0
   24f54:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   24f58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   24f5c:	f173 0100 	sbcs.w	r1, r3, #0
   24f60:	da0d      	bge.n	24f7e <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   24f62:	4619      	mov	r1, r3
   24f64:	2a00      	cmp	r2, #0
   24f66:	f171 0300 	sbcs.w	r3, r1, #0
   24f6a:	4610      	mov	r0, r2
   24f6c:	da00      	bge.n	24f70 <next_timeout+0x34>
   24f6e:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24f70:	4b05      	ldr	r3, [pc, #20]	; (24f88 <next_timeout+0x4c>)
   24f72:	691b      	ldr	r3, [r3, #16]
   24f74:	b113      	cbz	r3, 24f7c <next_timeout+0x40>
   24f76:	4298      	cmp	r0, r3
   24f78:	bfa8      	it	ge
   24f7a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24f7c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   24f7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24f82:	e7f5      	b.n	24f70 <next_timeout+0x34>
   24f84:	200204cc 	.word	0x200204cc
   24f88:	20021de0 	.word	0x20021de0

00024f8c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   24f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f90:	9101      	str	r1, [sp, #4]
   24f92:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24f94:	1c4b      	adds	r3, r1, #1
   24f96:	bf08      	it	eq
   24f98:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24f9c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24f9e:	f000 80a3 	beq.w	250e8 <z_add_timeout+0x15c>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   24fa2:	f06f 0301 	mvn.w	r3, #1
   24fa6:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   24faa:	1c54      	adds	r4, r2, #1
   24fac:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   24fb0:	ebb3 0804 	subs.w	r8, r3, r4
   24fb4:	eb6b 0905 	sbc.w	r9, fp, r5
   24fb8:	f1b8 0f00 	cmp.w	r8, #0
   24fbc:	f179 0300 	sbcs.w	r3, r9, #0
   24fc0:	db0f      	blt.n	24fe2 <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   24fc2:	f7ff ff97 	bl	24ef4 <elapsed>
   24fc6:	f06f 0301 	mvn.w	r3, #1
   24fca:	4a4e      	ldr	r2, [pc, #312]	; (25104 <z_add_timeout+0x178>)
   24fcc:	e9d2 1c00 	ldrd	r1, ip, [r2]
   24fd0:	1a5b      	subs	r3, r3, r1
   24fd2:	eb6b 020c 	sbc.w	r2, fp, ip
   24fd6:	1b1e      	subs	r6, r3, r4
   24fd8:	eb62 0705 	sbc.w	r7, r2, r5
   24fdc:	1a34      	subs	r4, r6, r0
   24fde:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24fe2:	f8da 3000 	ldr.w	r3, [sl]
   24fe6:	b163      	cbz	r3, 25002 <z_add_timeout+0x76>
   24fe8:	4947      	ldr	r1, [pc, #284]	; (25108 <z_add_timeout+0x17c>)
   24fea:	2368      	movs	r3, #104	; 0x68
   24fec:	4a47      	ldr	r2, [pc, #284]	; (2510c <z_add_timeout+0x180>)
   24fee:	4848      	ldr	r0, [pc, #288]	; (25110 <z_add_timeout+0x184>)
   24ff0:	f007 fa3f 	bl	2c472 <printk>
   24ff4:	4847      	ldr	r0, [pc, #284]	; (25114 <z_add_timeout+0x188>)
   24ff6:	f007 fa3c 	bl	2c472 <printk>
   24ffa:	2168      	movs	r1, #104	; 0x68
   24ffc:	4843      	ldr	r0, [pc, #268]	; (2510c <z_add_timeout+0x180>)
   24ffe:	f007 fc55 	bl	2c8ac <assert_post_action>
	to->fn = fn;
   25002:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   25004:	2c01      	cmp	r4, #1
	to->fn = fn;
   25006:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   2500a:	f175 0300 	sbcs.w	r3, r5, #0
   2500e:	bfbc      	itt	lt
   25010:	2401      	movlt	r4, #1
   25012:	2500      	movlt	r5, #0
	__asm__ volatile(
   25014:	f04f 0320 	mov.w	r3, #32
   25018:	f3ef 8611 	mrs	r6, BASEPRI
   2501c:	f383 8811 	msr	BASEPRI, r3
   25020:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25024:	483c      	ldr	r0, [pc, #240]	; (25118 <z_add_timeout+0x18c>)
   25026:	f7ff fe8d 	bl	24d44 <z_spin_lock_valid>
   2502a:	b968      	cbnz	r0, 25048 <z_add_timeout+0xbc>
   2502c:	235c      	movs	r3, #92	; 0x5c
   2502e:	4a3b      	ldr	r2, [pc, #236]	; (2511c <z_add_timeout+0x190>)
   25030:	493b      	ldr	r1, [pc, #236]	; (25120 <z_add_timeout+0x194>)
   25032:	4837      	ldr	r0, [pc, #220]	; (25110 <z_add_timeout+0x184>)
   25034:	f007 fa1d 	bl	2c472 <printk>
   25038:	4937      	ldr	r1, [pc, #220]	; (25118 <z_add_timeout+0x18c>)
   2503a:	483a      	ldr	r0, [pc, #232]	; (25124 <z_add_timeout+0x198>)
   2503c:	f007 fa19 	bl	2c472 <printk>
   25040:	215c      	movs	r1, #92	; 0x5c
   25042:	4836      	ldr	r0, [pc, #216]	; (2511c <z_add_timeout+0x190>)
   25044:	f007 fc32 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25048:	4833      	ldr	r0, [pc, #204]	; (25118 <z_add_timeout+0x18c>)
   2504a:	f7ff fe99 	bl	24d80 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2504e:	f7ff ff51 	bl	24ef4 <elapsed>
	return list->head == list;
   25052:	4b35      	ldr	r3, [pc, #212]	; (25128 <z_add_timeout+0x19c>)
   25054:	1824      	adds	r4, r4, r0
   25056:	681a      	ldr	r2, [r3, #0]
   25058:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2505c:	429a      	cmp	r2, r3
   2505e:	e9ca 4504 	strd	r4, r5, [sl, #16]
   25062:	d001      	beq.n	25068 <z_add_timeout+0xdc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25064:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   25066:	b952      	cbnz	r2, 2507e <z_add_timeout+0xf2>
	node->prev = list->tail;
   25068:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   2506a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   2506e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   25072:	685a      	ldr	r2, [r3, #4]
   25074:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   25078:	f8c3 a004 	str.w	sl, [r3, #4]
}
   2507c:	e014      	b.n	250a8 <z_add_timeout+0x11c>
			if (t->dticks > to->dticks) {
   2507e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   25082:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   25086:	4544      	cmp	r4, r8
   25088:	eb75 0109 	sbcs.w	r1, r5, r9
   2508c:	da2f      	bge.n	250ee <z_add_timeout+0x162>
				t->dticks -= to->dticks;
   2508e:	ebb8 0004 	subs.w	r0, r8, r4
   25092:	eb69 0105 	sbc.w	r1, r9, r5
   25096:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   2509a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2509c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   250a0:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   250a4:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   250a8:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   250aa:	429a      	cmp	r2, r3
   250ac:	d006      	beq.n	250bc <z_add_timeout+0x130>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   250ae:	4592      	cmp	sl, r2
   250b0:	d104      	bne.n	250bc <z_add_timeout+0x130>
			z_clock_set_timeout(next_timeout(), false);
   250b2:	f7ff ff43 	bl	24f3c <next_timeout>
   250b6:	2100      	movs	r1, #0
   250b8:	f7ef f942 	bl	14340 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   250bc:	4816      	ldr	r0, [pc, #88]	; (25118 <z_add_timeout+0x18c>)
   250be:	f7ff fe4f 	bl	24d60 <z_spin_unlock_valid>
   250c2:	b968      	cbnz	r0, 250e0 <z_add_timeout+0x154>
   250c4:	2384      	movs	r3, #132	; 0x84
   250c6:	4a15      	ldr	r2, [pc, #84]	; (2511c <z_add_timeout+0x190>)
   250c8:	4918      	ldr	r1, [pc, #96]	; (2512c <z_add_timeout+0x1a0>)
   250ca:	4811      	ldr	r0, [pc, #68]	; (25110 <z_add_timeout+0x184>)
   250cc:	f007 f9d1 	bl	2c472 <printk>
   250d0:	4911      	ldr	r1, [pc, #68]	; (25118 <z_add_timeout+0x18c>)
   250d2:	4817      	ldr	r0, [pc, #92]	; (25130 <z_add_timeout+0x1a4>)
   250d4:	f007 f9cd 	bl	2c472 <printk>
   250d8:	2184      	movs	r1, #132	; 0x84
   250da:	4810      	ldr	r0, [pc, #64]	; (2511c <z_add_timeout+0x190>)
   250dc:	f007 fbe6 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   250e0:	f386 8811 	msr	BASEPRI, r6
   250e4:	f3bf 8f6f 	isb	sy
		}
	}
}
   250e8:	b003      	add	sp, #12
   250ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   250ee:	ebb4 0008 	subs.w	r0, r4, r8
   250f2:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   250f6:	42ba      	cmp	r2, r7
   250f8:	e9ca 0104 	strd	r0, r1, [sl, #16]
   250fc:	d0b4      	beq.n	25068 <z_add_timeout+0xdc>
   250fe:	6812      	ldr	r2, [r2, #0]
   25100:	e7b1      	b.n	25066 <z_add_timeout+0xda>
   25102:	bf00      	nop
   25104:	20021430 	.word	0x20021430
   25108:	000332d1 	.word	0x000332d1
   2510c:	000332ad 	.word	0x000332ad
   25110:	0003049a 	.word	0x0003049a
   25114:	00030ac7 	.word	0x00030ac7
   25118:	20021e30 	.word	0x20021e30
   2511c:	0003056a 	.word	0x0003056a
   25120:	000305bc 	.word	0x000305bc
   25124:	000305d1 	.word	0x000305d1
   25128:	200204cc 	.word	0x200204cc
   2512c:	00030590 	.word	0x00030590
   25130:	000305a7 	.word	0x000305a7

00025134 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   25134:	b538      	push	{r3, r4, r5, lr}
   25136:	4604      	mov	r4, r0
	__asm__ volatile(
   25138:	f04f 0320 	mov.w	r3, #32
   2513c:	f3ef 8511 	mrs	r5, BASEPRI
   25140:	f383 8811 	msr	BASEPRI, r3
   25144:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25148:	481a      	ldr	r0, [pc, #104]	; (251b4 <z_abort_timeout+0x80>)
   2514a:	f7ff fdfb 	bl	24d44 <z_spin_lock_valid>
   2514e:	b968      	cbnz	r0, 2516c <z_abort_timeout+0x38>
   25150:	235c      	movs	r3, #92	; 0x5c
   25152:	4a19      	ldr	r2, [pc, #100]	; (251b8 <z_abort_timeout+0x84>)
   25154:	4919      	ldr	r1, [pc, #100]	; (251bc <z_abort_timeout+0x88>)
   25156:	481a      	ldr	r0, [pc, #104]	; (251c0 <z_abort_timeout+0x8c>)
   25158:	f007 f98b 	bl	2c472 <printk>
   2515c:	4915      	ldr	r1, [pc, #84]	; (251b4 <z_abort_timeout+0x80>)
   2515e:	4819      	ldr	r0, [pc, #100]	; (251c4 <z_abort_timeout+0x90>)
   25160:	f007 f987 	bl	2c472 <printk>
   25164:	215c      	movs	r1, #92	; 0x5c
   25166:	4814      	ldr	r0, [pc, #80]	; (251b8 <z_abort_timeout+0x84>)
   25168:	f007 fba0 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2516c:	4811      	ldr	r0, [pc, #68]	; (251b4 <z_abort_timeout+0x80>)
   2516e:	f7ff fe07 	bl	24d80 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   25172:	6823      	ldr	r3, [r4, #0]
   25174:	b1db      	cbz	r3, 251ae <z_abort_timeout+0x7a>
			remove_timeout(to);
   25176:	4620      	mov	r0, r4
   25178:	f7ff fec6 	bl	24f08 <remove_timeout>
			ret = 0;
   2517c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2517e:	480d      	ldr	r0, [pc, #52]	; (251b4 <z_abort_timeout+0x80>)
   25180:	f7ff fdee 	bl	24d60 <z_spin_unlock_valid>
   25184:	b968      	cbnz	r0, 251a2 <z_abort_timeout+0x6e>
   25186:	2384      	movs	r3, #132	; 0x84
   25188:	4a0b      	ldr	r2, [pc, #44]	; (251b8 <z_abort_timeout+0x84>)
   2518a:	490f      	ldr	r1, [pc, #60]	; (251c8 <z_abort_timeout+0x94>)
   2518c:	480c      	ldr	r0, [pc, #48]	; (251c0 <z_abort_timeout+0x8c>)
   2518e:	f007 f970 	bl	2c472 <printk>
   25192:	4908      	ldr	r1, [pc, #32]	; (251b4 <z_abort_timeout+0x80>)
   25194:	480d      	ldr	r0, [pc, #52]	; (251cc <z_abort_timeout+0x98>)
   25196:	f007 f96c 	bl	2c472 <printk>
   2519a:	2184      	movs	r1, #132	; 0x84
   2519c:	4806      	ldr	r0, [pc, #24]	; (251b8 <z_abort_timeout+0x84>)
   2519e:	f007 fb85 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   251a2:	f385 8811 	msr	BASEPRI, r5
   251a6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   251aa:	4620      	mov	r0, r4
   251ac:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   251ae:	f06f 0415 	mvn.w	r4, #21
   251b2:	e7e4      	b.n	2517e <z_abort_timeout+0x4a>
   251b4:	20021e30 	.word	0x20021e30
   251b8:	0003056a 	.word	0x0003056a
   251bc:	000305bc 	.word	0x000305bc
   251c0:	0003049a 	.word	0x0003049a
   251c4:	000305d1 	.word	0x000305d1
   251c8:	00030590 	.word	0x00030590
   251cc:	000305a7 	.word	0x000305a7

000251d0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   251d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   251d2:	f04f 0320 	mov.w	r3, #32
   251d6:	f3ef 8511 	mrs	r5, BASEPRI
   251da:	f383 8811 	msr	BASEPRI, r3
   251de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251e2:	4818      	ldr	r0, [pc, #96]	; (25244 <z_get_next_timeout_expiry+0x74>)
   251e4:	f7ff fdae 	bl	24d44 <z_spin_lock_valid>
   251e8:	b968      	cbnz	r0, 25206 <z_get_next_timeout_expiry+0x36>
   251ea:	235c      	movs	r3, #92	; 0x5c
   251ec:	4a16      	ldr	r2, [pc, #88]	; (25248 <z_get_next_timeout_expiry+0x78>)
   251ee:	4917      	ldr	r1, [pc, #92]	; (2524c <z_get_next_timeout_expiry+0x7c>)
   251f0:	4817      	ldr	r0, [pc, #92]	; (25250 <z_get_next_timeout_expiry+0x80>)
   251f2:	f007 f93e 	bl	2c472 <printk>
   251f6:	4913      	ldr	r1, [pc, #76]	; (25244 <z_get_next_timeout_expiry+0x74>)
   251f8:	4816      	ldr	r0, [pc, #88]	; (25254 <z_get_next_timeout_expiry+0x84>)
   251fa:	f007 f93a 	bl	2c472 <printk>
   251fe:	215c      	movs	r1, #92	; 0x5c
   25200:	4811      	ldr	r0, [pc, #68]	; (25248 <z_get_next_timeout_expiry+0x78>)
   25202:	f007 fb53 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25206:	480f      	ldr	r0, [pc, #60]	; (25244 <z_get_next_timeout_expiry+0x74>)
   25208:	f7ff fdba 	bl	24d80 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2520c:	f7ff fe96 	bl	24f3c <next_timeout>
   25210:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25212:	480c      	ldr	r0, [pc, #48]	; (25244 <z_get_next_timeout_expiry+0x74>)
   25214:	f7ff fda4 	bl	24d60 <z_spin_unlock_valid>
   25218:	b968      	cbnz	r0, 25236 <z_get_next_timeout_expiry+0x66>
   2521a:	2384      	movs	r3, #132	; 0x84
   2521c:	4a0a      	ldr	r2, [pc, #40]	; (25248 <z_get_next_timeout_expiry+0x78>)
   2521e:	490e      	ldr	r1, [pc, #56]	; (25258 <z_get_next_timeout_expiry+0x88>)
   25220:	480b      	ldr	r0, [pc, #44]	; (25250 <z_get_next_timeout_expiry+0x80>)
   25222:	f007 f926 	bl	2c472 <printk>
   25226:	4907      	ldr	r1, [pc, #28]	; (25244 <z_get_next_timeout_expiry+0x74>)
   25228:	480c      	ldr	r0, [pc, #48]	; (2525c <z_get_next_timeout_expiry+0x8c>)
   2522a:	f007 f922 	bl	2c472 <printk>
   2522e:	2184      	movs	r1, #132	; 0x84
   25230:	4805      	ldr	r0, [pc, #20]	; (25248 <z_get_next_timeout_expiry+0x78>)
   25232:	f007 fb3b 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   25236:	f385 8811 	msr	BASEPRI, r5
   2523a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2523e:	4620      	mov	r0, r4
   25240:	bd38      	pop	{r3, r4, r5, pc}
   25242:	bf00      	nop
   25244:	20021e30 	.word	0x20021e30
   25248:	0003056a 	.word	0x0003056a
   2524c:	000305bc 	.word	0x000305bc
   25250:	0003049a 	.word	0x0003049a
   25254:	000305d1 	.word	0x000305d1
   25258:	00030590 	.word	0x00030590
   2525c:	000305a7 	.word	0x000305a7

00025260 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   25260:	b570      	push	{r4, r5, r6, lr}
   25262:	4604      	mov	r4, r0
   25264:	460d      	mov	r5, r1
	__asm__ volatile(
   25266:	f04f 0320 	mov.w	r3, #32
   2526a:	f3ef 8611 	mrs	r6, BASEPRI
   2526e:	f383 8811 	msr	BASEPRI, r3
   25272:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25276:	481b      	ldr	r0, [pc, #108]	; (252e4 <z_set_timeout_expiry+0x84>)
   25278:	f7ff fd64 	bl	24d44 <z_spin_lock_valid>
   2527c:	b968      	cbnz	r0, 2529a <z_set_timeout_expiry+0x3a>
   2527e:	235c      	movs	r3, #92	; 0x5c
   25280:	4a19      	ldr	r2, [pc, #100]	; (252e8 <z_set_timeout_expiry+0x88>)
   25282:	491a      	ldr	r1, [pc, #104]	; (252ec <z_set_timeout_expiry+0x8c>)
   25284:	481a      	ldr	r0, [pc, #104]	; (252f0 <z_set_timeout_expiry+0x90>)
   25286:	f007 f8f4 	bl	2c472 <printk>
   2528a:	4916      	ldr	r1, [pc, #88]	; (252e4 <z_set_timeout_expiry+0x84>)
   2528c:	4819      	ldr	r0, [pc, #100]	; (252f4 <z_set_timeout_expiry+0x94>)
   2528e:	f007 f8f0 	bl	2c472 <printk>
   25292:	215c      	movs	r1, #92	; 0x5c
   25294:	4814      	ldr	r0, [pc, #80]	; (252e8 <z_set_timeout_expiry+0x88>)
   25296:	f007 fb09 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2529a:	4812      	ldr	r0, [pc, #72]	; (252e4 <z_set_timeout_expiry+0x84>)
   2529c:	f7ff fd70 	bl	24d80 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   252a0:	f7ff fe4c 	bl	24f3c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   252a4:	2801      	cmp	r0, #1
   252a6:	dd05      	ble.n	252b4 <z_set_timeout_expiry+0x54>
   252a8:	42a0      	cmp	r0, r4
   252aa:	dd03      	ble.n	252b4 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
   252ac:	4629      	mov	r1, r5
   252ae:	4620      	mov	r0, r4
   252b0:	f7ef f846 	bl	14340 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   252b4:	480b      	ldr	r0, [pc, #44]	; (252e4 <z_set_timeout_expiry+0x84>)
   252b6:	f7ff fd53 	bl	24d60 <z_spin_unlock_valid>
   252ba:	b968      	cbnz	r0, 252d8 <z_set_timeout_expiry+0x78>
   252bc:	2384      	movs	r3, #132	; 0x84
   252be:	4a0a      	ldr	r2, [pc, #40]	; (252e8 <z_set_timeout_expiry+0x88>)
   252c0:	490d      	ldr	r1, [pc, #52]	; (252f8 <z_set_timeout_expiry+0x98>)
   252c2:	480b      	ldr	r0, [pc, #44]	; (252f0 <z_set_timeout_expiry+0x90>)
   252c4:	f007 f8d5 	bl	2c472 <printk>
   252c8:	4906      	ldr	r1, [pc, #24]	; (252e4 <z_set_timeout_expiry+0x84>)
   252ca:	480c      	ldr	r0, [pc, #48]	; (252fc <z_set_timeout_expiry+0x9c>)
   252cc:	f007 f8d1 	bl	2c472 <printk>
   252d0:	2184      	movs	r1, #132	; 0x84
   252d2:	4805      	ldr	r0, [pc, #20]	; (252e8 <z_set_timeout_expiry+0x88>)
   252d4:	f007 faea 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   252d8:	f386 8811 	msr	BASEPRI, r6
   252dc:	f3bf 8f6f 	isb	sy
		}
	}
}
   252e0:	bd70      	pop	{r4, r5, r6, pc}
   252e2:	bf00      	nop
   252e4:	20021e30 	.word	0x20021e30
   252e8:	0003056a 	.word	0x0003056a
   252ec:	000305bc 	.word	0x000305bc
   252f0:	0003049a 	.word	0x0003049a
   252f4:	000305d1 	.word	0x000305d1
   252f8:	00030590 	.word	0x00030590
   252fc:	000305a7 	.word	0x000305a7

00025300 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   25300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25304:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   25306:	f7fe fdd3 	bl	23eb0 <z_time_slice>
	__asm__ volatile(
   2530a:	f04f 0320 	mov.w	r3, #32
   2530e:	f3ef 8711 	mrs	r7, BASEPRI
   25312:	f383 8811 	msr	BASEPRI, r3
   25316:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2531a:	4854      	ldr	r0, [pc, #336]	; (2546c <z_clock_announce+0x16c>)
   2531c:	f7ff fd12 	bl	24d44 <z_spin_lock_valid>
   25320:	b968      	cbnz	r0, 2533e <z_clock_announce+0x3e>
   25322:	235c      	movs	r3, #92	; 0x5c
   25324:	4a52      	ldr	r2, [pc, #328]	; (25470 <z_clock_announce+0x170>)
   25326:	4953      	ldr	r1, [pc, #332]	; (25474 <z_clock_announce+0x174>)
   25328:	4853      	ldr	r0, [pc, #332]	; (25478 <z_clock_announce+0x178>)
   2532a:	f007 f8a2 	bl	2c472 <printk>
   2532e:	494f      	ldr	r1, [pc, #316]	; (2546c <z_clock_announce+0x16c>)
   25330:	4852      	ldr	r0, [pc, #328]	; (2547c <z_clock_announce+0x17c>)
   25332:	f007 f89e 	bl	2c472 <printk>
   25336:	215c      	movs	r1, #92	; 0x5c
   25338:	484d      	ldr	r0, [pc, #308]	; (25470 <z_clock_announce+0x170>)
   2533a:	f007 fab7 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   2533e:	4e50      	ldr	r6, [pc, #320]	; (25480 <z_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   25340:	4d50      	ldr	r5, [pc, #320]	; (25484 <z_clock_announce+0x184>)
   25342:	46b3      	mov	fp, r6
   25344:	4849      	ldr	r0, [pc, #292]	; (2546c <z_clock_announce+0x16c>)
	return list->head == list;
   25346:	f8df a148 	ldr.w	sl, [pc, #328]	; 25490 <z_clock_announce+0x190>
   2534a:	f7ff fd19 	bl	24d80 <z_spin_lock_set_owner>
   2534e:	602c      	str	r4, [r5, #0]
   25350:	f8d5 c000 	ldr.w	ip, [r5]
   25354:	e9d6 2300 	ldrd	r2, r3, [r6]
   25358:	e9cd 2300 	strd	r2, r3, [sp]
   2535c:	4662      	mov	r2, ip
   2535e:	f8da 4000 	ldr.w	r4, [sl]
   25362:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25364:	4554      	cmp	r4, sl
   25366:	46e0      	mov	r8, ip
   25368:	4699      	mov	r9, r3
   2536a:	d00c      	beq.n	25386 <z_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2536c:	b15c      	cbz	r4, 25386 <z_clock_announce+0x86>
   2536e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   25372:	458c      	cmp	ip, r1
   25374:	eb79 0302 	sbcs.w	r3, r9, r2
   25378:	da2e      	bge.n	253d8 <z_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2537a:	ebb1 000c 	subs.w	r0, r1, ip
   2537e:	eb62 0109 	sbc.w	r1, r2, r9
   25382:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   25386:	464b      	mov	r3, r9
	announce_remaining = 0;
   25388:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2538a:	9a00      	ldr	r2, [sp, #0]
   2538c:	9901      	ldr	r1, [sp, #4]
   2538e:	eb18 0202 	adds.w	r2, r8, r2
   25392:	eb43 0101 	adc.w	r1, r3, r1
   25396:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   2539a:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   2539c:	f7ff fdce 	bl	24f3c <next_timeout>
   253a0:	4621      	mov	r1, r4
   253a2:	f7ee ffcd 	bl	14340 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   253a6:	4831      	ldr	r0, [pc, #196]	; (2546c <z_clock_announce+0x16c>)
   253a8:	f7ff fcda 	bl	24d60 <z_spin_unlock_valid>
   253ac:	b968      	cbnz	r0, 253ca <z_clock_announce+0xca>
   253ae:	2384      	movs	r3, #132	; 0x84
   253b0:	4a2f      	ldr	r2, [pc, #188]	; (25470 <z_clock_announce+0x170>)
   253b2:	4935      	ldr	r1, [pc, #212]	; (25488 <z_clock_announce+0x188>)
   253b4:	4830      	ldr	r0, [pc, #192]	; (25478 <z_clock_announce+0x178>)
   253b6:	f007 f85c 	bl	2c472 <printk>
   253ba:	492c      	ldr	r1, [pc, #176]	; (2546c <z_clock_announce+0x16c>)
   253bc:	4833      	ldr	r0, [pc, #204]	; (2548c <z_clock_announce+0x18c>)
   253be:	f007 f858 	bl	2c472 <printk>
   253c2:	2184      	movs	r1, #132	; 0x84
   253c4:	482a      	ldr	r0, [pc, #168]	; (25470 <z_clock_announce+0x170>)
   253c6:	f007 fa71 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   253ca:	f387 8811 	msr	BASEPRI, r7
   253ce:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   253d2:	b003      	add	sp, #12
   253d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   253d8:	2200      	movs	r2, #0
		curr_tick += dt;
   253da:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   253de:	2300      	movs	r3, #0
		curr_tick += dt;
   253e0:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   253e4:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   253e8:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   253ec:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   253ee:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   253f2:	4620      	mov	r0, r4
		curr_tick += dt;
   253f4:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   253f8:	f7ff fd86 	bl	24f08 <remove_timeout>
   253fc:	481b      	ldr	r0, [pc, #108]	; (2546c <z_clock_announce+0x16c>)
   253fe:	f7ff fcaf 	bl	24d60 <z_spin_unlock_valid>
   25402:	b968      	cbnz	r0, 25420 <z_clock_announce+0x120>
   25404:	2384      	movs	r3, #132	; 0x84
   25406:	4a1a      	ldr	r2, [pc, #104]	; (25470 <z_clock_announce+0x170>)
   25408:	491f      	ldr	r1, [pc, #124]	; (25488 <z_clock_announce+0x188>)
   2540a:	481b      	ldr	r0, [pc, #108]	; (25478 <z_clock_announce+0x178>)
   2540c:	f007 f831 	bl	2c472 <printk>
   25410:	4916      	ldr	r1, [pc, #88]	; (2546c <z_clock_announce+0x16c>)
   25412:	481e      	ldr	r0, [pc, #120]	; (2548c <z_clock_announce+0x18c>)
   25414:	f007 f82d 	bl	2c472 <printk>
   25418:	2184      	movs	r1, #132	; 0x84
   2541a:	4815      	ldr	r0, [pc, #84]	; (25470 <z_clock_announce+0x170>)
   2541c:	f007 fa46 	bl	2c8ac <assert_post_action>
   25420:	f387 8811 	msr	BASEPRI, r7
   25424:	f3bf 8f6f 	isb	sy
		t->fn(t);
   25428:	4620      	mov	r0, r4
   2542a:	68a3      	ldr	r3, [r4, #8]
   2542c:	4798      	blx	r3
	__asm__ volatile(
   2542e:	f04f 0320 	mov.w	r3, #32
   25432:	f3ef 8711 	mrs	r7, BASEPRI
   25436:	f383 8811 	msr	BASEPRI, r3
   2543a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2543e:	480b      	ldr	r0, [pc, #44]	; (2546c <z_clock_announce+0x16c>)
   25440:	f7ff fc80 	bl	24d44 <z_spin_lock_valid>
   25444:	b968      	cbnz	r0, 25462 <z_clock_announce+0x162>
   25446:	235c      	movs	r3, #92	; 0x5c
   25448:	4a09      	ldr	r2, [pc, #36]	; (25470 <z_clock_announce+0x170>)
   2544a:	490a      	ldr	r1, [pc, #40]	; (25474 <z_clock_announce+0x174>)
   2544c:	480a      	ldr	r0, [pc, #40]	; (25478 <z_clock_announce+0x178>)
   2544e:	f007 f810 	bl	2c472 <printk>
   25452:	4906      	ldr	r1, [pc, #24]	; (2546c <z_clock_announce+0x16c>)
   25454:	4809      	ldr	r0, [pc, #36]	; (2547c <z_clock_announce+0x17c>)
   25456:	f007 f80c 	bl	2c472 <printk>
   2545a:	215c      	movs	r1, #92	; 0x5c
   2545c:	4804      	ldr	r0, [pc, #16]	; (25470 <z_clock_announce+0x170>)
   2545e:	f007 fa25 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25462:	4802      	ldr	r0, [pc, #8]	; (2546c <z_clock_announce+0x16c>)
   25464:	f7ff fc8c 	bl	24d80 <z_spin_lock_set_owner>
	return k;
   25468:	e772      	b.n	25350 <z_clock_announce+0x50>
   2546a:	bf00      	nop
   2546c:	20021e30 	.word	0x20021e30
   25470:	0003056a 	.word	0x0003056a
   25474:	000305bc 	.word	0x000305bc
   25478:	0003049a 	.word	0x0003049a
   2547c:	000305d1 	.word	0x000305d1
   25480:	20021430 	.word	0x20021430
   25484:	20021e2c 	.word	0x20021e2c
   25488:	00030590 	.word	0x00030590
   2548c:	000305a7 	.word	0x000305a7
   25490:	200204cc 	.word	0x200204cc

00025494 <z_tick_get>:

int64_t z_tick_get(void)
{
   25494:	b570      	push	{r4, r5, r6, lr}
   25496:	f04f 0320 	mov.w	r3, #32
   2549a:	f3ef 8611 	mrs	r6, BASEPRI
   2549e:	f383 8811 	msr	BASEPRI, r3
   254a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254a6:	481b      	ldr	r0, [pc, #108]	; (25514 <z_tick_get+0x80>)
   254a8:	f7ff fc4c 	bl	24d44 <z_spin_lock_valid>
   254ac:	b968      	cbnz	r0, 254ca <z_tick_get+0x36>
   254ae:	235c      	movs	r3, #92	; 0x5c
   254b0:	4a19      	ldr	r2, [pc, #100]	; (25518 <z_tick_get+0x84>)
   254b2:	491a      	ldr	r1, [pc, #104]	; (2551c <z_tick_get+0x88>)
   254b4:	481a      	ldr	r0, [pc, #104]	; (25520 <z_tick_get+0x8c>)
   254b6:	f006 ffdc 	bl	2c472 <printk>
   254ba:	4916      	ldr	r1, [pc, #88]	; (25514 <z_tick_get+0x80>)
   254bc:	4819      	ldr	r0, [pc, #100]	; (25524 <z_tick_get+0x90>)
   254be:	f006 ffd8 	bl	2c472 <printk>
   254c2:	215c      	movs	r1, #92	; 0x5c
   254c4:	4814      	ldr	r0, [pc, #80]	; (25518 <z_tick_get+0x84>)
   254c6:	f007 f9f1 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   254ca:	4812      	ldr	r0, [pc, #72]	; (25514 <z_tick_get+0x80>)
   254cc:	f7ff fc58 	bl	24d80 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   254d0:	f7ee ff9c 	bl	1440c <z_clock_elapsed>
   254d4:	4b14      	ldr	r3, [pc, #80]	; (25528 <z_tick_get+0x94>)
   254d6:	e9d3 4500 	ldrd	r4, r5, [r3]
   254da:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   254dc:	480d      	ldr	r0, [pc, #52]	; (25514 <z_tick_get+0x80>)
   254de:	f145 0500 	adc.w	r5, r5, #0
   254e2:	f7ff fc3d 	bl	24d60 <z_spin_unlock_valid>
   254e6:	b968      	cbnz	r0, 25504 <z_tick_get+0x70>
   254e8:	2384      	movs	r3, #132	; 0x84
   254ea:	4a0b      	ldr	r2, [pc, #44]	; (25518 <z_tick_get+0x84>)
   254ec:	490f      	ldr	r1, [pc, #60]	; (2552c <z_tick_get+0x98>)
   254ee:	480c      	ldr	r0, [pc, #48]	; (25520 <z_tick_get+0x8c>)
   254f0:	f006 ffbf 	bl	2c472 <printk>
   254f4:	4907      	ldr	r1, [pc, #28]	; (25514 <z_tick_get+0x80>)
   254f6:	480e      	ldr	r0, [pc, #56]	; (25530 <z_tick_get+0x9c>)
   254f8:	f006 ffbb 	bl	2c472 <printk>
   254fc:	2184      	movs	r1, #132	; 0x84
   254fe:	4806      	ldr	r0, [pc, #24]	; (25518 <z_tick_get+0x84>)
   25500:	f007 f9d4 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   25504:	f386 8811 	msr	BASEPRI, r6
   25508:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2550c:	4620      	mov	r0, r4
   2550e:	4629      	mov	r1, r5
   25510:	bd70      	pop	{r4, r5, r6, pc}
   25512:	bf00      	nop
   25514:	20021e30 	.word	0x20021e30
   25518:	0003056a 	.word	0x0003056a
   2551c:	000305bc 	.word	0x000305bc
   25520:	0003049a 	.word	0x0003049a
   25524:	000305d1 	.word	0x000305d1
   25528:	20021430 	.word	0x20021430
   2552c:	00030590 	.word	0x00030590
   25530:	000305a7 	.word	0x000305a7

00025534 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   25534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   25536:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2553a:	1c56      	adds	r6, r2, #1
   2553c:	f143 0700 	adc.w	r7, r3, #0
   25540:	2f00      	cmp	r7, #0
   25542:	bf08      	it	eq
   25544:	2e02      	cmpeq	r6, #2
{
   25546:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   25548:	d302      	bcc.n	25550 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2554a:	490c      	ldr	r1, [pc, #48]	; (2557c <z_timer_expiration_handler+0x48>)
   2554c:	f7ff fd1e 	bl	24f8c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   25550:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25552:	3301      	adds	r3, #1
   25554:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   25556:	6a23      	ldr	r3, [r4, #32]
   25558:	b10b      	cbz	r3, 2555e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2555a:	4620      	mov	r0, r4
   2555c:	4798      	blx	r3
	return list->head == list;
   2555e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25562:	42a5      	cmp	r5, r4
   25564:	d008      	beq.n	25578 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   25566:	b13d      	cbz	r5, 25578 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   25568:	4628      	mov	r0, r5
   2556a:	f7fe f8f1 	bl	23750 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   2556e:	4628      	mov	r0, r5
   25570:	f7fe fb5a 	bl	23c28 <z_ready_thread>
   25574:	2300      	movs	r3, #0
   25576:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   25578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2557a:	bf00      	nop
   2557c:	00025535 	.word	0x00025535

00025580 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   25580:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   25584:	4619      	mov	r1, r3
   25586:	4606      	mov	r6, r0
   25588:	4610      	mov	r0, r2
   2558a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2558e:	1c4c      	adds	r4, r1, #1
   25590:	bf08      	it	eq
   25592:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   25596:	4680      	mov	r8, r0
   25598:	4689      	mov	r9, r1
   2559a:	d047      	beq.n	2562c <z_impl_k_timer_start+0xac>
   2559c:	4614      	mov	r4, r2
   2559e:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   255a0:	ea54 0305 	orrs.w	r3, r4, r5
   255a4:	d016      	beq.n	255d4 <z_impl_k_timer_start+0x54>
   255a6:	f06f 0301 	mvn.w	r3, #1
   255aa:	ebb3 0a02 	subs.w	sl, r3, r2
   255ae:	f04f 33ff 	mov.w	r3, #4294967295
   255b2:	eb63 0b05 	sbc.w	fp, r3, r5
   255b6:	f1ba 0f00 	cmp.w	sl, #0
   255ba:	f17b 0300 	sbcs.w	r3, fp, #0
   255be:	da09      	bge.n	255d4 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   255c0:	f112 34ff 	adds.w	r4, r2, #4294967295
   255c4:	f145 35ff 	adc.w	r5, r5, #4294967295
   255c8:	2c01      	cmp	r4, #1
   255ca:	f175 0300 	sbcs.w	r3, r5, #0
   255ce:	bfbc      	itt	lt
   255d0:	2401      	movlt	r4, #1
   255d2:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   255d4:	f06f 0301 	mvn.w	r3, #1
   255d8:	1a1b      	subs	r3, r3, r0
   255da:	9300      	str	r3, [sp, #0]
   255dc:	f04f 33ff 	mov.w	r3, #4294967295
   255e0:	eb63 0301 	sbc.w	r3, r3, r1
   255e4:	9301      	str	r3, [sp, #4]
   255e6:	e9dd 2300 	ldrd	r2, r3, [sp]
   255ea:	2a00      	cmp	r2, #0
   255ec:	f173 0300 	sbcs.w	r3, r3, #0
   255f0:	da0c      	bge.n	2560c <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   255f2:	f110 38ff 	adds.w	r8, r0, #4294967295
   255f6:	f141 39ff 	adc.w	r9, r1, #4294967295
   255fa:	f1b8 0f00 	cmp.w	r8, #0
   255fe:	f179 0300 	sbcs.w	r3, r9, #0
   25602:	bfbc      	itt	lt
   25604:	f04f 0800 	movlt.w	r8, #0
   25608:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   2560c:	4630      	mov	r0, r6
   2560e:	f7ff fd91 	bl	25134 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   25612:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25614:	4642      	mov	r2, r8
	timer->status = 0U;
   25616:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25618:	4630      	mov	r0, r6
   2561a:	464b      	mov	r3, r9
   2561c:	4905      	ldr	r1, [pc, #20]	; (25634 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   2561e:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   25622:	b002      	add	sp, #8
   25624:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25628:	f7ff bcb0 	b.w	24f8c <z_add_timeout>
}
   2562c:	b002      	add	sp, #8
   2562e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   25632:	bf00      	nop
   25634:	00025535 	.word	0x00025535

00025638 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, uint32_t state)
{
   25638:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2563a:	6883      	ldr	r3, [r0, #8]
{
   2563c:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   2563e:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   25640:	b964      	cbnz	r4, 2565c <k_poll_poller_cb+0x24>
   25642:	4919      	ldr	r1, [pc, #100]	; (256a8 <k_poll_poller_cb+0x70>)
   25644:	23df      	movs	r3, #223	; 0xdf
   25646:	4a19      	ldr	r2, [pc, #100]	; (256ac <k_poll_poller_cb+0x74>)
   25648:	4819      	ldr	r0, [pc, #100]	; (256b0 <k_poll_poller_cb+0x78>)
   2564a:	f006 ff12 	bl	2c472 <printk>
   2564e:	4819      	ldr	r0, [pc, #100]	; (256b4 <k_poll_poller_cb+0x7c>)
   25650:	f006 ff0f 	bl	2c472 <printk>
   25654:	21df      	movs	r1, #223	; 0xdf
   25656:	4815      	ldr	r0, [pc, #84]	; (256ac <k_poll_poller_cb+0x74>)
   25658:	f007 f928 	bl	2c8ac <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   2565c:	7b63      	ldrb	r3, [r4, #13]
   2565e:	079a      	lsls	r2, r3, #30
   25660:	d515      	bpl.n	2568e <k_poll_poller_cb+0x56>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   25662:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   25666:	f04f 31ff 	mov.w	r1, #4294967295
   2566a:	f06f 0001 	mvn.w	r0, #1
   2566e:	428b      	cmp	r3, r1
   25670:	bf08      	it	eq
   25672:	4282      	cmpeq	r2, r0
   25674:	d014      	beq.n	256a0 <k_poll_poller_cb+0x68>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   25676:	4620      	mov	r0, r4
   25678:	f7fe f99c 	bl	239b4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2567c:	2d08      	cmp	r5, #8
   2567e:	bf0c      	ite	eq
   25680:	f06f 0303 	mvneq.w	r3, #3
   25684:	2300      	movne	r3, #0
   25686:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25688:	7b63      	ldrb	r3, [r4, #13]
   2568a:	06db      	lsls	r3, r3, #27
   2568c:	d001      	beq.n	25692 <k_poll_poller_cb+0x5a>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   2568e:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   25690:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   25692:	69a5      	ldr	r5, [r4, #24]
   25694:	2d00      	cmp	r5, #0
   25696:	d1fa      	bne.n	2568e <k_poll_poller_cb+0x56>
	z_ready_thread(thread);
   25698:	4620      	mov	r0, r4
   2569a:	f7fe fac5 	bl	23c28 <z_ready_thread>
	return 0;
   2569e:	e7f6      	b.n	2568e <k_poll_poller_cb+0x56>
		return -EAGAIN;
   256a0:	f06f 000a 	mvn.w	r0, #10
   256a4:	e7f4      	b.n	25690 <k_poll_poller_cb+0x58>
   256a6:	bf00      	nop
   256a8:	00033312 	.word	0x00033312
   256ac:	000332f1 	.word	0x000332f1
   256b0:	0003049a 	.word	0x0003049a
   256b4:	00033328 	.word	0x00033328

000256b8 <clear_event_registrations>:
{
   256b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   256bc:	2414      	movs	r4, #20
   256be:	4680      	mov	r8, r0
   256c0:	4616      	mov	r6, r2
	while (num_events--) {
   256c2:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   256c6:	4d48      	ldr	r5, [pc, #288]	; (257e8 <clear_event_registrations+0x130>)
   256c8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 25824 <clear_event_registrations+0x16c>
   256cc:	4f47      	ldr	r7, [pc, #284]	; (257ec <clear_event_registrations+0x134>)
	while (num_events--) {
   256ce:	4544      	cmp	r4, r8
   256d0:	d101      	bne.n	256d6 <clear_event_registrations+0x1e>
}
   256d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   256d6:	2300      	movs	r3, #0
   256d8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   256dc:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   256e0:	f003 030f 	and.w	r3, r3, #15
   256e4:	2b04      	cmp	r3, #4
   256e6:	d83d      	bhi.n	25764 <clear_event_registrations+0xac>
   256e8:	e8df f003 	tbb	[pc, r3]
   256ec:	3c032d49 	.word	0x3c032d49
   256f0:	1e          	.byte	0x1e
   256f1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   256f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   256f6:	b963      	cbnz	r3, 25712 <clear_event_registrations+0x5a>
   256f8:	493d      	ldr	r1, [pc, #244]	; (257f0 <clear_event_registrations+0x138>)
   256fa:	2395      	movs	r3, #149	; 0x95
   256fc:	462a      	mov	r2, r5
   256fe:	4638      	mov	r0, r7
   25700:	f006 feb7 	bl	2c472 <printk>
   25704:	483b      	ldr	r0, [pc, #236]	; (257f4 <clear_event_registrations+0x13c>)
   25706:	f006 feb4 	bl	2c472 <printk>
   2570a:	2195      	movs	r1, #149	; 0x95
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2570c:	4628      	mov	r0, r5
   2570e:	f007 f8cd 	bl	2c8ac <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   25712:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25716:	b393      	cbz	r3, 2577e <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   25718:	f854 2c10 	ldr.w	r2, [r4, #-16]
   2571c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2571e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25720:	2300      	movs	r3, #0
	node->prev = NULL;
   25722:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   25726:	e02a      	b.n	2577e <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25728:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2572c:	2b00      	cmp	r3, #0
   2572e:	d1f0      	bne.n	25712 <clear_event_registrations+0x5a>
   25730:	4931      	ldr	r1, [pc, #196]	; (257f8 <clear_event_registrations+0x140>)
   25732:	2399      	movs	r3, #153	; 0x99
   25734:	462a      	mov	r2, r5
   25736:	4638      	mov	r0, r7
   25738:	f006 fe9b 	bl	2c472 <printk>
   2573c:	482f      	ldr	r0, [pc, #188]	; (257fc <clear_event_registrations+0x144>)
   2573e:	f006 fe98 	bl	2c472 <printk>
   25742:	2199      	movs	r1, #153	; 0x99
   25744:	e7e2      	b.n	2570c <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25746:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2574a:	2b00      	cmp	r3, #0
   2574c:	d1e1      	bne.n	25712 <clear_event_registrations+0x5a>
   2574e:	492c      	ldr	r1, [pc, #176]	; (25800 <clear_event_registrations+0x148>)
   25750:	239d      	movs	r3, #157	; 0x9d
   25752:	462a      	mov	r2, r5
   25754:	4638      	mov	r0, r7
   25756:	f006 fe8c 	bl	2c472 <printk>
   2575a:	482a      	ldr	r0, [pc, #168]	; (25804 <clear_event_registrations+0x14c>)
   2575c:	f006 fe89 	bl	2c472 <printk>
   25760:	219d      	movs	r1, #157	; 0x9d
   25762:	e7d3      	b.n	2570c <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   25764:	4649      	mov	r1, r9
   25766:	23a4      	movs	r3, #164	; 0xa4
   25768:	462a      	mov	r2, r5
   2576a:	4638      	mov	r0, r7
   2576c:	f006 fe81 	bl	2c472 <printk>
   25770:	4825      	ldr	r0, [pc, #148]	; (25808 <clear_event_registrations+0x150>)
   25772:	f006 fe7e 	bl	2c472 <printk>
   25776:	21a4      	movs	r1, #164	; 0xa4
   25778:	4628      	mov	r0, r5
   2577a:	f007 f897 	bl	2c8ac <assert_post_action>
   2577e:	4823      	ldr	r0, [pc, #140]	; (2580c <clear_event_registrations+0x154>)
   25780:	f7ff faee 	bl	24d60 <z_spin_unlock_valid>
   25784:	b968      	cbnz	r0, 257a2 <clear_event_registrations+0xea>
   25786:	2384      	movs	r3, #132	; 0x84
   25788:	4638      	mov	r0, r7
   2578a:	4a21      	ldr	r2, [pc, #132]	; (25810 <clear_event_registrations+0x158>)
   2578c:	4921      	ldr	r1, [pc, #132]	; (25814 <clear_event_registrations+0x15c>)
   2578e:	f006 fe70 	bl	2c472 <printk>
   25792:	491e      	ldr	r1, [pc, #120]	; (2580c <clear_event_registrations+0x154>)
   25794:	4820      	ldr	r0, [pc, #128]	; (25818 <clear_event_registrations+0x160>)
   25796:	f006 fe6c 	bl	2c472 <printk>
   2579a:	2184      	movs	r1, #132	; 0x84
   2579c:	481c      	ldr	r0, [pc, #112]	; (25810 <clear_event_registrations+0x158>)
   2579e:	f007 f885 	bl	2c8ac <assert_post_action>
   257a2:	f386 8811 	msr	BASEPRI, r6
   257a6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   257aa:	f04f 0320 	mov.w	r3, #32
   257ae:	f3ef 8611 	mrs	r6, BASEPRI
   257b2:	f383 8811 	msr	BASEPRI, r3
   257b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257ba:	4814      	ldr	r0, [pc, #80]	; (2580c <clear_event_registrations+0x154>)
   257bc:	f7ff fac2 	bl	24d44 <z_spin_lock_valid>
   257c0:	b968      	cbnz	r0, 257de <clear_event_registrations+0x126>
   257c2:	235c      	movs	r3, #92	; 0x5c
   257c4:	4638      	mov	r0, r7
   257c6:	4a12      	ldr	r2, [pc, #72]	; (25810 <clear_event_registrations+0x158>)
   257c8:	4914      	ldr	r1, [pc, #80]	; (2581c <clear_event_registrations+0x164>)
   257ca:	f006 fe52 	bl	2c472 <printk>
   257ce:	490f      	ldr	r1, [pc, #60]	; (2580c <clear_event_registrations+0x154>)
   257d0:	4813      	ldr	r0, [pc, #76]	; (25820 <clear_event_registrations+0x168>)
   257d2:	f006 fe4e 	bl	2c472 <printk>
   257d6:	215c      	movs	r1, #92	; 0x5c
   257d8:	480d      	ldr	r0, [pc, #52]	; (25810 <clear_event_registrations+0x158>)
   257da:	f007 f867 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   257de:	480b      	ldr	r0, [pc, #44]	; (2580c <clear_event_registrations+0x154>)
   257e0:	f7ff face 	bl	24d80 <z_spin_lock_set_owner>
	return k;
   257e4:	3c14      	subs	r4, #20
   257e6:	e772      	b.n	256ce <clear_event_registrations+0x16>
   257e8:	000332f1 	.word	0x000332f1
   257ec:	0003049a 	.word	0x0003049a
   257f0:	00033347 	.word	0x00033347
   257f4:	00033361 	.word	0x00033361
   257f8:	00033376 	.word	0x00033376
   257fc:	00033392 	.word	0x00033392
   25800:	000333a3 	.word	0x000333a3
   25804:	000333c0 	.word	0x000333c0
   25808:	000333d7 	.word	0x000333d7
   2580c:	20021e34 	.word	0x20021e34
   25810:	0003056a 	.word	0x0003056a
   25814:	00030590 	.word	0x00030590
   25818:	000305a7 	.word	0x000305a7
   2581c:	000305bc 	.word	0x000305bc
   25820:	000305d1 	.word	0x000305d1
   25824:	00033086 	.word	0x00033086

00025828 <register_events>:
{
   25828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2582c:	2700      	movs	r7, #0
{
   2582e:	4615      	mov	r5, r2
   25830:	4604      	mov	r4, r0
	int events_registered = 0;
   25832:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25834:	4e6a      	ldr	r6, [pc, #424]	; (259e0 <register_events+0x1b8>)
   25836:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 25a1c <register_events+0x1f4>
   2583a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 25a20 <register_events+0x1f8>
{
   2583e:	9100      	str	r1, [sp, #0]
   25840:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   25842:	9b00      	ldr	r3, [sp, #0]
   25844:	429f      	cmp	r7, r3
   25846:	db03      	blt.n	25850 <register_events+0x28>
}
   25848:	4648      	mov	r0, r9
   2584a:	b003      	add	sp, #12
   2584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25850:	f04f 0320 	mov.w	r3, #32
   25854:	f3ef 8b11 	mrs	fp, BASEPRI
   25858:	f383 8811 	msr	BASEPRI, r3
   2585c:	f3bf 8f6f 	isb	sy
   25860:	4630      	mov	r0, r6
   25862:	f7ff fa6f 	bl	24d44 <z_spin_lock_valid>
   25866:	b968      	cbnz	r0, 25884 <register_events+0x5c>
   25868:	235c      	movs	r3, #92	; 0x5c
   2586a:	4642      	mov	r2, r8
   2586c:	4651      	mov	r1, sl
   2586e:	485d      	ldr	r0, [pc, #372]	; (259e4 <register_events+0x1bc>)
   25870:	f006 fdff 	bl	2c472 <printk>
   25874:	4631      	mov	r1, r6
   25876:	485c      	ldr	r0, [pc, #368]	; (259e8 <register_events+0x1c0>)
   25878:	f006 fdfb 	bl	2c472 <printk>
   2587c:	215c      	movs	r1, #92	; 0x5c
   2587e:	4640      	mov	r0, r8
   25880:	f007 f814 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25884:	4630      	mov	r0, r6
   25886:	f7ff fa7b 	bl	24d80 <z_spin_lock_set_owner>
	switch (event->type) {
   2588a:	7b63      	ldrb	r3, [r4, #13]
   2588c:	f003 030f 	and.w	r3, r3, #15
   25890:	2b04      	cmp	r3, #4
   25892:	d844      	bhi.n	2591e <register_events+0xf6>
   25894:	e8df f003 	tbb	[pc, r3]
   25898:	43033d2d 	.word	0x43033d2d
   2589c:	2a          	.byte	0x2a
   2589d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   2589e:	6923      	ldr	r3, [r4, #16]
   258a0:	689b      	ldr	r3, [r3, #8]
   258a2:	b333      	cbz	r3, 258f2 <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   258a4:	2202      	movs	r2, #2
	event->poller = NULL;
   258a6:	2100      	movs	r1, #0
	event->state |= state;
   258a8:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   258aa:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   258ac:	f3c3 3004 	ubfx	r0, r3, #12, #5
   258b0:	4302      	orrs	r2, r0
   258b2:	f362 3310 	bfi	r3, r2, #12, #5
   258b6:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   258b8:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258ba:	4630      	mov	r0, r6
   258bc:	f7ff fa50 	bl	24d60 <z_spin_unlock_valid>
   258c0:	b968      	cbnz	r0, 258de <register_events+0xb6>
   258c2:	2384      	movs	r3, #132	; 0x84
   258c4:	4642      	mov	r2, r8
   258c6:	4949      	ldr	r1, [pc, #292]	; (259ec <register_events+0x1c4>)
   258c8:	4846      	ldr	r0, [pc, #280]	; (259e4 <register_events+0x1bc>)
   258ca:	f006 fdd2 	bl	2c472 <printk>
   258ce:	4631      	mov	r1, r6
   258d0:	4847      	ldr	r0, [pc, #284]	; (259f0 <register_events+0x1c8>)
   258d2:	f006 fdce 	bl	2c472 <printk>
   258d6:	2184      	movs	r1, #132	; 0x84
   258d8:	4640      	mov	r0, r8
   258da:	f006 ffe7 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   258de:	f38b 8811 	msr	BASEPRI, fp
   258e2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   258e6:	3701      	adds	r7, #1
   258e8:	3414      	adds	r4, #20
   258ea:	e7aa      	b.n	25842 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   258ec:	6923      	ldr	r3, [r4, #16]
   258ee:	681b      	ldr	r3, [r3, #0]
   258f0:	bb33      	cbnz	r3, 25940 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   258f2:	9b01      	ldr	r3, [sp, #4]
   258f4:	2b00      	cmp	r3, #0
   258f6:	d1e0      	bne.n	258ba <register_events+0x92>
   258f8:	782b      	ldrb	r3, [r5, #0]
   258fa:	2b00      	cmp	r3, #0
   258fc:	d0dd      	beq.n	258ba <register_events+0x92>
	switch (event->type) {
   258fe:	7b63      	ldrb	r3, [r4, #13]
   25900:	f003 030f 	and.w	r3, r3, #15
   25904:	2b04      	cmp	r3, #4
   25906:	d85d      	bhi.n	259c4 <register_events+0x19c>
   25908:	e8df f003 	tbb	[pc, r3]
   2590c:	5c1c4931 	.word	0x5c1c4931
   25910:	35          	.byte	0x35
   25911:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   25912:	6923      	ldr	r3, [r4, #16]
   25914:	689b      	ldr	r3, [r3, #8]
   25916:	2b00      	cmp	r3, #0
   25918:	d0eb      	beq.n	258f2 <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   2591a:	2201      	movs	r2, #1
   2591c:	e7c3      	b.n	258a6 <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2591e:	234f      	movs	r3, #79	; 0x4f
   25920:	4a34      	ldr	r2, [pc, #208]	; (259f4 <register_events+0x1cc>)
   25922:	4935      	ldr	r1, [pc, #212]	; (259f8 <register_events+0x1d0>)
   25924:	482f      	ldr	r0, [pc, #188]	; (259e4 <register_events+0x1bc>)
   25926:	f006 fda4 	bl	2c472 <printk>
   2592a:	7b61      	ldrb	r1, [r4, #13]
   2592c:	4833      	ldr	r0, [pc, #204]	; (259fc <register_events+0x1d4>)
   2592e:	f001 010f 	and.w	r1, r1, #15
   25932:	f006 fd9e 	bl	2c472 <printk>
   25936:	214f      	movs	r1, #79	; 0x4f
   25938:	482e      	ldr	r0, [pc, #184]	; (259f4 <register_events+0x1cc>)
   2593a:	f006 ffb7 	bl	2c8ac <assert_post_action>
		break;
   2593e:	e7d8      	b.n	258f2 <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   25940:	2204      	movs	r2, #4
   25942:	e7b0      	b.n	258a6 <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25944:	6923      	ldr	r3, [r4, #16]
   25946:	b963      	cbnz	r3, 25962 <register_events+0x13a>
   25948:	492d      	ldr	r1, [pc, #180]	; (25a00 <register_events+0x1d8>)
   2594a:	2374      	movs	r3, #116	; 0x74
   2594c:	4a29      	ldr	r2, [pc, #164]	; (259f4 <register_events+0x1cc>)
   2594e:	4825      	ldr	r0, [pc, #148]	; (259e4 <register_events+0x1bc>)
   25950:	f006 fd8f 	bl	2c472 <printk>
   25954:	482b      	ldr	r0, [pc, #172]	; (25a04 <register_events+0x1dc>)
   25956:	f006 fd8c 	bl	2c472 <printk>
   2595a:	2174      	movs	r1, #116	; 0x74
   2595c:	4825      	ldr	r0, [pc, #148]	; (259f4 <register_events+0x1cc>)
   2595e:	f006 ffa5 	bl	2c8ac <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   25962:	462a      	mov	r2, r5
   25964:	4621      	mov	r1, r4
   25966:	6920      	ldr	r0, [r4, #16]
   25968:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2596a:	f009 f98d 	bl	2ec88 <add_event>
	event->poller = poller;
   2596e:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   25970:	f109 0901 	add.w	r9, r9, #1
   25974:	e7a1      	b.n	258ba <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25976:	6923      	ldr	r3, [r4, #16]
   25978:	b963      	cbnz	r3, 25994 <register_events+0x16c>
   2597a:	4923      	ldr	r1, [pc, #140]	; (25a08 <register_events+0x1e0>)
   2597c:	2378      	movs	r3, #120	; 0x78
   2597e:	4a1d      	ldr	r2, [pc, #116]	; (259f4 <register_events+0x1cc>)
   25980:	4818      	ldr	r0, [pc, #96]	; (259e4 <register_events+0x1bc>)
   25982:	f006 fd76 	bl	2c472 <printk>
   25986:	4821      	ldr	r0, [pc, #132]	; (25a0c <register_events+0x1e4>)
   25988:	f006 fd73 	bl	2c472 <printk>
   2598c:	2178      	movs	r1, #120	; 0x78
   2598e:	4819      	ldr	r0, [pc, #100]	; (259f4 <register_events+0x1cc>)
   25990:	f006 ff8c 	bl	2c8ac <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   25994:	6920      	ldr	r0, [r4, #16]
   25996:	462a      	mov	r2, r5
   25998:	4621      	mov	r1, r4
   2599a:	3014      	adds	r0, #20
   2599c:	e7e5      	b.n	2596a <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2599e:	6923      	ldr	r3, [r4, #16]
   259a0:	b963      	cbnz	r3, 259bc <register_events+0x194>
   259a2:	491b      	ldr	r1, [pc, #108]	; (25a10 <register_events+0x1e8>)
   259a4:	237c      	movs	r3, #124	; 0x7c
   259a6:	4a13      	ldr	r2, [pc, #76]	; (259f4 <register_events+0x1cc>)
   259a8:	480e      	ldr	r0, [pc, #56]	; (259e4 <register_events+0x1bc>)
   259aa:	f006 fd62 	bl	2c472 <printk>
   259ae:	4819      	ldr	r0, [pc, #100]	; (25a14 <register_events+0x1ec>)
   259b0:	f006 fd5f 	bl	2c472 <printk>
   259b4:	217c      	movs	r1, #124	; 0x7c
   259b6:	480f      	ldr	r0, [pc, #60]	; (259f4 <register_events+0x1cc>)
   259b8:	f006 ff78 	bl	2c8ac <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   259bc:	462a      	mov	r2, r5
   259be:	4621      	mov	r1, r4
   259c0:	6920      	ldr	r0, [r4, #16]
   259c2:	e7d2      	b.n	2596a <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   259c4:	2383      	movs	r3, #131	; 0x83
   259c6:	4a0b      	ldr	r2, [pc, #44]	; (259f4 <register_events+0x1cc>)
   259c8:	490b      	ldr	r1, [pc, #44]	; (259f8 <register_events+0x1d0>)
   259ca:	4806      	ldr	r0, [pc, #24]	; (259e4 <register_events+0x1bc>)
   259cc:	f006 fd51 	bl	2c472 <printk>
   259d0:	4811      	ldr	r0, [pc, #68]	; (25a18 <register_events+0x1f0>)
   259d2:	f006 fd4e 	bl	2c472 <printk>
   259d6:	2183      	movs	r1, #131	; 0x83
   259d8:	4806      	ldr	r0, [pc, #24]	; (259f4 <register_events+0x1cc>)
   259da:	f006 ff67 	bl	2c8ac <assert_post_action>
		break;
   259de:	e7c6      	b.n	2596e <register_events+0x146>
   259e0:	20021e34 	.word	0x20021e34
   259e4:	0003049a 	.word	0x0003049a
   259e8:	000305d1 	.word	0x000305d1
   259ec:	00030590 	.word	0x00030590
   259f0:	000305a7 	.word	0x000305a7
   259f4:	000332f1 	.word	0x000332f1
   259f8:	00033086 	.word	0x00033086
   259fc:	000333ed 	.word	0x000333ed
   25a00:	00033347 	.word	0x00033347
   25a04:	00033361 	.word	0x00033361
   25a08:	00033376 	.word	0x00033376
   25a0c:	00033392 	.word	0x00033392
   25a10:	000333a3 	.word	0x000333a3
   25a14:	000333c0 	.word	0x000333c0
   25a18:	000333d7 	.word	0x000333d7
   25a1c:	0003056a 	.word	0x0003056a
   25a20:	000305bc 	.word	0x000305bc

00025a24 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   25a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25a28:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   25a2a:	2301      	movs	r3, #1
{
   25a2c:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   25a2e:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   25a32:	4b73      	ldr	r3, [pc, #460]	; (25c00 <z_impl_k_poll+0x1dc>)
{
   25a34:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   25a36:	689b      	ldr	r3, [r3, #8]
{
   25a38:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   25a3a:	9306      	str	r3, [sp, #24]
   25a3c:	4b71      	ldr	r3, [pc, #452]	; (25c04 <z_impl_k_poll+0x1e0>)
{
   25a3e:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   25a40:	9307      	str	r3, [sp, #28]
   25a42:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   25a46:	b163      	cbz	r3, 25a62 <z_impl_k_poll+0x3e>
   25a48:	496f      	ldr	r1, [pc, #444]	; (25c08 <z_impl_k_poll+0x1e4>)
   25a4a:	23ff      	movs	r3, #255	; 0xff
   25a4c:	4a6f      	ldr	r2, [pc, #444]	; (25c0c <z_impl_k_poll+0x1e8>)
   25a4e:	4870      	ldr	r0, [pc, #448]	; (25c10 <z_impl_k_poll+0x1ec>)
   25a50:	f006 fd0f 	bl	2c472 <printk>
   25a54:	486f      	ldr	r0, [pc, #444]	; (25c14 <z_impl_k_poll+0x1f0>)
   25a56:	f006 fd0c 	bl	2c472 <printk>
   25a5a:	21ff      	movs	r1, #255	; 0xff
   25a5c:	486b      	ldr	r0, [pc, #428]	; (25c0c <z_impl_k_poll+0x1e8>)
   25a5e:	f006 ff25 	bl	2c8ac <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   25a62:	b974      	cbnz	r4, 25a82 <z_impl_k_poll+0x5e>
   25a64:	496c      	ldr	r1, [pc, #432]	; (25c18 <z_impl_k_poll+0x1f4>)
   25a66:	f44f 7380 	mov.w	r3, #256	; 0x100
   25a6a:	4a68      	ldr	r2, [pc, #416]	; (25c0c <z_impl_k_poll+0x1e8>)
   25a6c:	4868      	ldr	r0, [pc, #416]	; (25c10 <z_impl_k_poll+0x1ec>)
   25a6e:	f006 fd00 	bl	2c472 <printk>
   25a72:	486a      	ldr	r0, [pc, #424]	; (25c1c <z_impl_k_poll+0x1f8>)
   25a74:	f006 fcfd 	bl	2c472 <printk>
   25a78:	f44f 7180 	mov.w	r1, #256	; 0x100
   25a7c:	4863      	ldr	r0, [pc, #396]	; (25c0c <z_impl_k_poll+0x1e8>)
   25a7e:	f006 ff15 	bl	2c8ac <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   25a82:	2d00      	cmp	r5, #0
   25a84:	da0e      	bge.n	25aa4 <z_impl_k_poll+0x80>
   25a86:	4966      	ldr	r1, [pc, #408]	; (25c20 <z_impl_k_poll+0x1fc>)
   25a88:	f240 1301 	movw	r3, #257	; 0x101
   25a8c:	4a5f      	ldr	r2, [pc, #380]	; (25c0c <z_impl_k_poll+0x1e8>)
   25a8e:	4860      	ldr	r0, [pc, #384]	; (25c10 <z_impl_k_poll+0x1ec>)
   25a90:	f006 fcef 	bl	2c472 <printk>
   25a94:	4863      	ldr	r0, [pc, #396]	; (25c24 <z_impl_k_poll+0x200>)
   25a96:	f006 fcec 	bl	2c472 <printk>
   25a9a:	f240 1101 	movw	r1, #257	; 0x101
   25a9e:	485b      	ldr	r0, [pc, #364]	; (25c0c <z_impl_k_poll+0x1e8>)
   25aa0:	f006 ff04 	bl	2c8ac <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   25aa4:	ea56 0307 	orrs.w	r3, r6, r7
   25aa8:	bf0c      	ite	eq
   25aaa:	2301      	moveq	r3, #1
   25aac:	2300      	movne	r3, #0
   25aae:	4629      	mov	r1, r5
   25ab0:	4620      	mov	r0, r4
   25ab2:	aa05      	add	r2, sp, #20
   25ab4:	f7ff feb8 	bl	25828 <register_events>
   25ab8:	4680      	mov	r8, r0
	__asm__ volatile(
   25aba:	f04f 0320 	mov.w	r3, #32
   25abe:	f3ef 8511 	mrs	r5, BASEPRI
   25ac2:	f383 8811 	msr	BASEPRI, r3
   25ac6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25aca:	4857      	ldr	r0, [pc, #348]	; (25c28 <z_impl_k_poll+0x204>)
   25acc:	f7ff f93a 	bl	24d44 <z_spin_lock_valid>
   25ad0:	b968      	cbnz	r0, 25aee <z_impl_k_poll+0xca>
   25ad2:	235c      	movs	r3, #92	; 0x5c
   25ad4:	4a55      	ldr	r2, [pc, #340]	; (25c2c <z_impl_k_poll+0x208>)
   25ad6:	4956      	ldr	r1, [pc, #344]	; (25c30 <z_impl_k_poll+0x20c>)
   25ad8:	484d      	ldr	r0, [pc, #308]	; (25c10 <z_impl_k_poll+0x1ec>)
   25ada:	f006 fcca 	bl	2c472 <printk>
   25ade:	4952      	ldr	r1, [pc, #328]	; (25c28 <z_impl_k_poll+0x204>)
   25ae0:	4854      	ldr	r0, [pc, #336]	; (25c34 <z_impl_k_poll+0x210>)
   25ae2:	f006 fcc6 	bl	2c472 <printk>
   25ae6:	215c      	movs	r1, #92	; 0x5c
   25ae8:	4850      	ldr	r0, [pc, #320]	; (25c2c <z_impl_k_poll+0x208>)
   25aea:	f006 fedf 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25aee:	484e      	ldr	r0, [pc, #312]	; (25c28 <z_impl_k_poll+0x204>)
   25af0:	f7ff f946 	bl	24d80 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   25af4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   25af8:	b9fb      	cbnz	r3, 25b3a <z_impl_k_poll+0x116>
		clear_event_registrations(events, events_registered, key);
   25afa:	4620      	mov	r0, r4
   25afc:	462a      	mov	r2, r5
   25afe:	4641      	mov	r1, r8
   25b00:	f7ff fdda 	bl	256b8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b04:	4848      	ldr	r0, [pc, #288]	; (25c28 <z_impl_k_poll+0x204>)
   25b06:	f7ff f92b 	bl	24d60 <z_spin_unlock_valid>
   25b0a:	b968      	cbnz	r0, 25b28 <z_impl_k_poll+0x104>
   25b0c:	2384      	movs	r3, #132	; 0x84
   25b0e:	4a47      	ldr	r2, [pc, #284]	; (25c2c <z_impl_k_poll+0x208>)
   25b10:	4949      	ldr	r1, [pc, #292]	; (25c38 <z_impl_k_poll+0x214>)
   25b12:	483f      	ldr	r0, [pc, #252]	; (25c10 <z_impl_k_poll+0x1ec>)
   25b14:	f006 fcad 	bl	2c472 <printk>
   25b18:	4943      	ldr	r1, [pc, #268]	; (25c28 <z_impl_k_poll+0x204>)
   25b1a:	4848      	ldr	r0, [pc, #288]	; (25c3c <z_impl_k_poll+0x218>)
   25b1c:	f006 fca9 	bl	2c472 <printk>
   25b20:	2184      	movs	r1, #132	; 0x84
   25b22:	4842      	ldr	r0, [pc, #264]	; (25c2c <z_impl_k_poll+0x208>)
   25b24:	f006 fec2 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   25b28:	f385 8811 	msr	BASEPRI, r5
   25b2c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   25b30:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   25b32:	4628      	mov	r0, r5
   25b34:	b008      	add	sp, #32
   25b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   25b3a:	2300      	movs	r3, #0
   25b3c:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25b40:	ea56 0307 	orrs.w	r3, r6, r7
   25b44:	d118      	bne.n	25b78 <z_impl_k_poll+0x154>
   25b46:	4838      	ldr	r0, [pc, #224]	; (25c28 <z_impl_k_poll+0x204>)
   25b48:	f7ff f90a 	bl	24d60 <z_spin_unlock_valid>
   25b4c:	b968      	cbnz	r0, 25b6a <z_impl_k_poll+0x146>
   25b4e:	2384      	movs	r3, #132	; 0x84
   25b50:	4a36      	ldr	r2, [pc, #216]	; (25c2c <z_impl_k_poll+0x208>)
   25b52:	4939      	ldr	r1, [pc, #228]	; (25c38 <z_impl_k_poll+0x214>)
   25b54:	482e      	ldr	r0, [pc, #184]	; (25c10 <z_impl_k_poll+0x1ec>)
   25b56:	f006 fc8c 	bl	2c472 <printk>
   25b5a:	4933      	ldr	r1, [pc, #204]	; (25c28 <z_impl_k_poll+0x204>)
   25b5c:	4837      	ldr	r0, [pc, #220]	; (25c3c <z_impl_k_poll+0x218>)
   25b5e:	f006 fc88 	bl	2c472 <printk>
   25b62:	2184      	movs	r1, #132	; 0x84
   25b64:	4831      	ldr	r0, [pc, #196]	; (25c2c <z_impl_k_poll+0x208>)
   25b66:	f006 fea1 	bl	2c8ac <assert_post_action>
   25b6a:	f385 8811 	msr	BASEPRI, r5
   25b6e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   25b72:	f06f 050a 	mvn.w	r5, #10
   25b76:	e7dc      	b.n	25b32 <z_impl_k_poll+0x10e>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25b78:	4629      	mov	r1, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   25b7a:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25b7c:	e9cd 6700 	strd	r6, r7, [sp]
   25b80:	4829      	ldr	r0, [pc, #164]	; (25c28 <z_impl_k_poll+0x204>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   25b82:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25b86:	f7fe fbe1 	bl	2434c <z_pend_curr>
   25b8a:	4605      	mov	r5, r0
	__asm__ volatile(
   25b8c:	f04f 0320 	mov.w	r3, #32
   25b90:	f3ef 8611 	mrs	r6, BASEPRI
   25b94:	f383 8811 	msr	BASEPRI, r3
   25b98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b9c:	4822      	ldr	r0, [pc, #136]	; (25c28 <z_impl_k_poll+0x204>)
   25b9e:	f7ff f8d1 	bl	24d44 <z_spin_lock_valid>
   25ba2:	b968      	cbnz	r0, 25bc0 <z_impl_k_poll+0x19c>
   25ba4:	235c      	movs	r3, #92	; 0x5c
   25ba6:	4a21      	ldr	r2, [pc, #132]	; (25c2c <z_impl_k_poll+0x208>)
   25ba8:	4921      	ldr	r1, [pc, #132]	; (25c30 <z_impl_k_poll+0x20c>)
   25baa:	4819      	ldr	r0, [pc, #100]	; (25c10 <z_impl_k_poll+0x1ec>)
   25bac:	f006 fc61 	bl	2c472 <printk>
   25bb0:	491d      	ldr	r1, [pc, #116]	; (25c28 <z_impl_k_poll+0x204>)
   25bb2:	4820      	ldr	r0, [pc, #128]	; (25c34 <z_impl_k_poll+0x210>)
   25bb4:	f006 fc5d 	bl	2c472 <printk>
   25bb8:	215c      	movs	r1, #92	; 0x5c
   25bba:	481c      	ldr	r0, [pc, #112]	; (25c2c <z_impl_k_poll+0x208>)
   25bbc:	f006 fe76 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25bc0:	4819      	ldr	r0, [pc, #100]	; (25c28 <z_impl_k_poll+0x204>)
   25bc2:	f7ff f8dd 	bl	24d80 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   25bc6:	4620      	mov	r0, r4
   25bc8:	4632      	mov	r2, r6
   25bca:	4641      	mov	r1, r8
   25bcc:	f7ff fd74 	bl	256b8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25bd0:	4815      	ldr	r0, [pc, #84]	; (25c28 <z_impl_k_poll+0x204>)
   25bd2:	f7ff f8c5 	bl	24d60 <z_spin_unlock_valid>
   25bd6:	b968      	cbnz	r0, 25bf4 <z_impl_k_poll+0x1d0>
   25bd8:	2384      	movs	r3, #132	; 0x84
   25bda:	4a14      	ldr	r2, [pc, #80]	; (25c2c <z_impl_k_poll+0x208>)
   25bdc:	4916      	ldr	r1, [pc, #88]	; (25c38 <z_impl_k_poll+0x214>)
   25bde:	480c      	ldr	r0, [pc, #48]	; (25c10 <z_impl_k_poll+0x1ec>)
   25be0:	f006 fc47 	bl	2c472 <printk>
   25be4:	4910      	ldr	r1, [pc, #64]	; (25c28 <z_impl_k_poll+0x204>)
   25be6:	4815      	ldr	r0, [pc, #84]	; (25c3c <z_impl_k_poll+0x218>)
   25be8:	f006 fc43 	bl	2c472 <printk>
   25bec:	2184      	movs	r1, #132	; 0x84
   25bee:	480f      	ldr	r0, [pc, #60]	; (25c2c <z_impl_k_poll+0x208>)
   25bf0:	f006 fe5c 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   25bf4:	f386 8811 	msr	BASEPRI, r6
   25bf8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   25bfc:	e799      	b.n	25b32 <z_impl_k_poll+0x10e>
   25bfe:	bf00      	nop
   25c00:	20021de0 	.word	0x20021de0
   25c04:	00025639 	.word	0x00025639
   25c08:	00032f55 	.word	0x00032f55
   25c0c:	000332f1 	.word	0x000332f1
   25c10:	0003049a 	.word	0x0003049a
   25c14:	00030ac7 	.word	0x00030ac7
   25c18:	0003340a 	.word	0x0003340a
   25c1c:	00033420 	.word	0x00033420
   25c20:	0003342f 	.word	0x0003342f
   25c24:	0003343f 	.word	0x0003343f
   25c28:	20021e34 	.word	0x20021e34
   25c2c:	0003056a 	.word	0x0003056a
   25c30:	000305bc 	.word	0x000305bc
   25c34:	000305d1 	.word	0x000305d1
   25c38:	00030590 	.word	0x00030590
   25c3c:	000305a7 	.word	0x000305a7

00025c40 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   25c40:	b570      	push	{r4, r5, r6, lr}
   25c42:	4604      	mov	r4, r0
   25c44:	460d      	mov	r5, r1
	__asm__ volatile(
   25c46:	f04f 0320 	mov.w	r3, #32
   25c4a:	f3ef 8611 	mrs	r6, BASEPRI
   25c4e:	f383 8811 	msr	BASEPRI, r3
   25c52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c56:	4821      	ldr	r0, [pc, #132]	; (25cdc <z_impl_k_poll_signal_raise+0x9c>)
   25c58:	f7ff f874 	bl	24d44 <z_spin_lock_valid>
   25c5c:	b968      	cbnz	r0, 25c7a <z_impl_k_poll_signal_raise+0x3a>
   25c5e:	235c      	movs	r3, #92	; 0x5c
   25c60:	4a1f      	ldr	r2, [pc, #124]	; (25ce0 <z_impl_k_poll_signal_raise+0xa0>)
   25c62:	4920      	ldr	r1, [pc, #128]	; (25ce4 <z_impl_k_poll_signal_raise+0xa4>)
   25c64:	4820      	ldr	r0, [pc, #128]	; (25ce8 <z_impl_k_poll_signal_raise+0xa8>)
   25c66:	f006 fc04 	bl	2c472 <printk>
   25c6a:	491c      	ldr	r1, [pc, #112]	; (25cdc <z_impl_k_poll_signal_raise+0x9c>)
   25c6c:	481f      	ldr	r0, [pc, #124]	; (25cec <z_impl_k_poll_signal_raise+0xac>)
   25c6e:	f006 fc00 	bl	2c472 <printk>
   25c72:	215c      	movs	r1, #92	; 0x5c
   25c74:	481a      	ldr	r0, [pc, #104]	; (25ce0 <z_impl_k_poll_signal_raise+0xa0>)
   25c76:	f006 fe19 	bl	2c8ac <assert_post_action>
	z_spin_lock_set_owner(l);
   25c7a:	4818      	ldr	r0, [pc, #96]	; (25cdc <z_impl_k_poll_signal_raise+0x9c>)
   25c7c:	f7ff f880 	bl	24d80 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   25c80:	2101      	movs	r1, #1
	return list->head == list;
   25c82:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   25c84:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   25c86:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   25c88:	60a1      	str	r1, [r4, #8]
   25c8a:	d117      	bne.n	25cbc <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c8c:	4813      	ldr	r0, [pc, #76]	; (25cdc <z_impl_k_poll_signal_raise+0x9c>)
   25c8e:	f7ff f867 	bl	24d60 <z_spin_unlock_valid>
   25c92:	b968      	cbnz	r0, 25cb0 <z_impl_k_poll_signal_raise+0x70>
   25c94:	2384      	movs	r3, #132	; 0x84
   25c96:	4a12      	ldr	r2, [pc, #72]	; (25ce0 <z_impl_k_poll_signal_raise+0xa0>)
   25c98:	4915      	ldr	r1, [pc, #84]	; (25cf0 <z_impl_k_poll_signal_raise+0xb0>)
   25c9a:	4813      	ldr	r0, [pc, #76]	; (25ce8 <z_impl_k_poll_signal_raise+0xa8>)
   25c9c:	f006 fbe9 	bl	2c472 <printk>
   25ca0:	490e      	ldr	r1, [pc, #56]	; (25cdc <z_impl_k_poll_signal_raise+0x9c>)
   25ca2:	4814      	ldr	r0, [pc, #80]	; (25cf4 <z_impl_k_poll_signal_raise+0xb4>)
   25ca4:	f006 fbe5 	bl	2c472 <printk>
   25ca8:	2184      	movs	r1, #132	; 0x84
   25caa:	480d      	ldr	r0, [pc, #52]	; (25ce0 <z_impl_k_poll_signal_raise+0xa0>)
   25cac:	f006 fdfe 	bl	2c8ac <assert_post_action>
	__asm__ volatile(
   25cb0:	f386 8811 	msr	BASEPRI, r6
   25cb4:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   25cb8:	2400      	movs	r4, #0
   25cba:	e00d      	b.n	25cd8 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   25cbc:	e9d0 3200 	ldrd	r3, r2, [r0]
   25cc0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   25cc2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25cc4:	2300      	movs	r3, #0
	node->prev = NULL;
   25cc6:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25cca:	f008 ffc2 	bl	2ec52 <signal_poll_event>

	z_reschedule(&lock, key);
   25cce:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25cd0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   25cd2:	4802      	ldr	r0, [pc, #8]	; (25cdc <z_impl_k_poll_signal_raise+0x9c>)
   25cd4:	f7fd fd84 	bl	237e0 <z_reschedule>
	return rc;
}
   25cd8:	4620      	mov	r0, r4
   25cda:	bd70      	pop	{r4, r5, r6, pc}
   25cdc:	20021e34 	.word	0x20021e34
   25ce0:	0003056a 	.word	0x0003056a
   25ce4:	000305bc 	.word	0x000305bc
   25ce8:	0003049a 	.word	0x0003049a
   25cec:	000305d1 	.word	0x000305d1
   25cf0:	00030590 	.word	0x00030590
   25cf4:	000305a7 	.word	0x000305a7

00025cf8 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   25cf8:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   25cfa:	4801      	ldr	r0, [pc, #4]	; (25d00 <k_malloc+0x8>)
   25cfc:	f009 b803 	b.w	2ed06 <k_mem_pool_malloc>
   25d00:	200204d4 	.word	0x200204d4

00025d04 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   25d04:	b507      	push	{r0, r1, r2, lr}
   25d06:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   25d08:	f008 fed5 	bl	2eab6 <k_is_in_isr>
   25d0c:	9901      	ldr	r1, [sp, #4]
   25d0e:	b948      	cbnz	r0, 25d24 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   25d10:	4b07      	ldr	r3, [pc, #28]	; (25d30 <z_thread_malloc+0x2c>)
   25d12:	689b      	ldr	r3, [r3, #8]
   25d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   25d16:	b13b      	cbz	r3, 25d28 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   25d18:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   25d1a:	b003      	add	sp, #12
   25d1c:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   25d20:	f008 bff1 	b.w	2ed06 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   25d24:	4b03      	ldr	r3, [pc, #12]	; (25d34 <z_thread_malloc+0x30>)
   25d26:	e7f7      	b.n	25d18 <z_thread_malloc+0x14>
}
   25d28:	b003      	add	sp, #12
   25d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   25d2e:	bf00      	nop
   25d30:	20021de0 	.word	0x20021de0
   25d34:	200204d4 	.word	0x200204d4

00025d38 <__assert_func>:
   25d38:	4d0a      	ldr	r5, [pc, #40]	; (25d64 <__assert_func+0x2c>)
   25d3a:	4614      	mov	r4, r2
   25d3c:	461a      	mov	r2, r3
   25d3e:	4603      	mov	r3, r0
   25d40:	682d      	ldr	r5, [r5, #0]
   25d42:	b500      	push	{lr}
   25d44:	68e8      	ldr	r0, [r5, #12]
   25d46:	b085      	sub	sp, #20
   25d48:	b144      	cbz	r4, 25d5c <__assert_func+0x24>
   25d4a:	4d07      	ldr	r5, [pc, #28]	; (25d68 <__assert_func+0x30>)
   25d4c:	9100      	str	r1, [sp, #0]
   25d4e:	4907      	ldr	r1, [pc, #28]	; (25d6c <__assert_func+0x34>)
   25d50:	e9cd 5401 	strd	r5, r4, [sp, #4]
   25d54:	f000 f812 	bl	25d7c <fiprintf>
   25d58:	f003 feda 	bl	29b10 <abort>
   25d5c:	4d04      	ldr	r5, [pc, #16]	; (25d70 <__assert_func+0x38>)
   25d5e:	462c      	mov	r4, r5
   25d60:	e7f4      	b.n	25d4c <__assert_func+0x14>
   25d62:	bf00      	nop
   25d64:	200204d8 	.word	0x200204d8
   25d68:	0002f960 	.word	0x0002f960
   25d6c:	0002f970 	.word	0x0002f970
   25d70:	0002f96c 	.word	0x0002f96c

00025d74 <atoi>:
   25d74:	220a      	movs	r2, #10
   25d76:	2100      	movs	r1, #0
   25d78:	f001 bac2 	b.w	27300 <strtol>

00025d7c <fiprintf>:
   25d7c:	b40e      	push	{r1, r2, r3}
   25d7e:	b510      	push	{r4, lr}
   25d80:	b083      	sub	sp, #12
   25d82:	4c07      	ldr	r4, [pc, #28]	; (25da0 <fiprintf+0x24>)
   25d84:	4601      	mov	r1, r0
   25d86:	ab05      	add	r3, sp, #20
   25d88:	6820      	ldr	r0, [r4, #0]
   25d8a:	f853 2b04 	ldr.w	r2, [r3], #4
   25d8e:	9301      	str	r3, [sp, #4]
   25d90:	f002 feea 	bl	28b68 <_vfiprintf_r>
   25d94:	b003      	add	sp, #12
   25d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25d9a:	b003      	add	sp, #12
   25d9c:	4770      	bx	lr
   25d9e:	bf00      	nop
   25da0:	200204d8 	.word	0x200204d8

00025da4 <malloc>:
   25da4:	4b02      	ldr	r3, [pc, #8]	; (25db0 <malloc+0xc>)
   25da6:	4601      	mov	r1, r0
   25da8:	6818      	ldr	r0, [r3, #0]
   25daa:	f000 b80b 	b.w	25dc4 <_malloc_r>
   25dae:	bf00      	nop
   25db0:	200204d8 	.word	0x200204d8

00025db4 <free>:
   25db4:	4b02      	ldr	r3, [pc, #8]	; (25dc0 <free+0xc>)
   25db6:	4601      	mov	r1, r0
   25db8:	6818      	ldr	r0, [r3, #0]
   25dba:	f004 b96d 	b.w	2a098 <_free_r>
   25dbe:	bf00      	nop
   25dc0:	200204d8 	.word	0x200204d8

00025dc4 <_malloc_r>:
   25dc4:	f101 030b 	add.w	r3, r1, #11
   25dc8:	2b16      	cmp	r3, #22
   25dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25dce:	4606      	mov	r6, r0
   25dd0:	b083      	sub	sp, #12
   25dd2:	d824      	bhi.n	25e1e <_malloc_r+0x5a>
   25dd4:	2910      	cmp	r1, #16
   25dd6:	f200 80f5 	bhi.w	25fc4 <_malloc_r+0x200>
   25dda:	f000 fb7d 	bl	264d8 <__malloc_lock>
   25dde:	2510      	movs	r5, #16
   25de0:	2002      	movs	r0, #2
   25de2:	2318      	movs	r3, #24
   25de4:	4fce      	ldr	r7, [pc, #824]	; (26120 <_malloc_r+0x35c>)
   25de6:	443b      	add	r3, r7
   25de8:	685a      	ldr	r2, [r3, #4]
   25dea:	f1a3 0108 	sub.w	r1, r3, #8
   25dee:	428a      	cmp	r2, r1
   25df0:	f000 80ef 	beq.w	25fd2 <_malloc_r+0x20e>
   25df4:	6853      	ldr	r3, [r2, #4]
   25df6:	f102 0408 	add.w	r4, r2, #8
   25dfa:	68d1      	ldr	r1, [r2, #12]
   25dfc:	4630      	mov	r0, r6
   25dfe:	f023 0303 	bic.w	r3, r3, #3
   25e02:	6895      	ldr	r5, [r2, #8]
   25e04:	441a      	add	r2, r3
   25e06:	60e9      	str	r1, [r5, #12]
   25e08:	608d      	str	r5, [r1, #8]
   25e0a:	6853      	ldr	r3, [r2, #4]
   25e0c:	f043 0301 	orr.w	r3, r3, #1
   25e10:	6053      	str	r3, [r2, #4]
   25e12:	f000 fb67 	bl	264e4 <__malloc_unlock>
   25e16:	4620      	mov	r0, r4
   25e18:	b003      	add	sp, #12
   25e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e1e:	2b00      	cmp	r3, #0
   25e20:	f023 0507 	bic.w	r5, r3, #7
   25e24:	f2c0 80ce 	blt.w	25fc4 <_malloc_r+0x200>
   25e28:	42a9      	cmp	r1, r5
   25e2a:	f200 80cb 	bhi.w	25fc4 <_malloc_r+0x200>
   25e2e:	f000 fb53 	bl	264d8 <__malloc_lock>
   25e32:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   25e36:	f0c0 81ca 	bcc.w	261ce <_malloc_r+0x40a>
   25e3a:	0a6b      	lsrs	r3, r5, #9
   25e3c:	f000 813a 	beq.w	260b4 <_malloc_r+0x2f0>
   25e40:	2b04      	cmp	r3, #4
   25e42:	f200 81a0 	bhi.w	26186 <_malloc_r+0x3c2>
   25e46:	09ab      	lsrs	r3, r5, #6
   25e48:	f103 0039 	add.w	r0, r3, #57	; 0x39
   25e4c:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   25e50:	00c3      	lsls	r3, r0, #3
   25e52:	4fb3      	ldr	r7, [pc, #716]	; (26120 <_malloc_r+0x35c>)
   25e54:	443b      	add	r3, r7
   25e56:	f1a3 0408 	sub.w	r4, r3, #8
   25e5a:	685b      	ldr	r3, [r3, #4]
   25e5c:	429c      	cmp	r4, r3
   25e5e:	d107      	bne.n	25e70 <_malloc_r+0xac>
   25e60:	e0bc      	b.n	25fdc <_malloc_r+0x218>
   25e62:	2900      	cmp	r1, #0
   25e64:	f280 8149 	bge.w	260fa <_malloc_r+0x336>
   25e68:	68db      	ldr	r3, [r3, #12]
   25e6a:	429c      	cmp	r4, r3
   25e6c:	f000 80b6 	beq.w	25fdc <_malloc_r+0x218>
   25e70:	685a      	ldr	r2, [r3, #4]
   25e72:	f022 0203 	bic.w	r2, r2, #3
   25e76:	1b51      	subs	r1, r2, r5
   25e78:	290f      	cmp	r1, #15
   25e7a:	ddf2      	ble.n	25e62 <_malloc_r+0x9e>
   25e7c:	4660      	mov	r0, ip
   25e7e:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 2613c <_malloc_r+0x378>
   25e82:	f8d7 c010 	ldr.w	ip, [r7, #16]
   25e86:	45f4      	cmp	ip, lr
   25e88:	f040 80af 	bne.w	25fea <_malloc_r+0x226>
   25e8c:	1083      	asrs	r3, r0, #2
   25e8e:	2401      	movs	r4, #1
   25e90:	687a      	ldr	r2, [r7, #4]
   25e92:	409c      	lsls	r4, r3
   25e94:	4294      	cmp	r4, r2
   25e96:	f240 80d5 	bls.w	26044 <_malloc_r+0x280>
   25e9a:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25e9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25ea2:	f023 0903 	bic.w	r9, r3, #3
   25ea6:	eba9 0205 	sub.w	r2, r9, r5
   25eaa:	2a0f      	cmp	r2, #15
   25eac:	dd02      	ble.n	25eb4 <_malloc_r+0xf0>
   25eae:	45a9      	cmp	r9, r5
   25eb0:	f080 8111 	bcs.w	260d6 <_malloc_r+0x312>
   25eb4:	4a9b      	ldr	r2, [pc, #620]	; (26124 <_malloc_r+0x360>)
   25eb6:	eb08 0b09 	add.w	fp, r8, r9
   25eba:	4b9b      	ldr	r3, [pc, #620]	; (26128 <_malloc_r+0x364>)
   25ebc:	6811      	ldr	r1, [r2, #0]
   25ebe:	681b      	ldr	r3, [r3, #0]
   25ec0:	3101      	adds	r1, #1
   25ec2:	442b      	add	r3, r5
   25ec4:	f000 81d7 	beq.w	26276 <_malloc_r+0x4b2>
   25ec8:	f241 010f 	movw	r1, #4111	; 0x100f
   25ecc:	4c97      	ldr	r4, [pc, #604]	; (2612c <_malloc_r+0x368>)
   25ece:	4419      	add	r1, r3
   25ed0:	400c      	ands	r4, r1
   25ed2:	4621      	mov	r1, r4
   25ed4:	4630      	mov	r0, r6
   25ed6:	f000 fd0d 	bl	268f4 <_sbrk_r>
   25eda:	f1b0 3fff 	cmp.w	r0, #4294967295
   25ede:	4682      	mov	sl, r0
   25ee0:	4a90      	ldr	r2, [pc, #576]	; (26124 <_malloc_r+0x360>)
   25ee2:	f000 81b3 	beq.w	2624c <_malloc_r+0x488>
   25ee6:	45b8      	cmp	r8, r7
   25ee8:	d002      	beq.n	25ef0 <_malloc_r+0x12c>
   25eea:	4583      	cmp	fp, r0
   25eec:	f200 81ae 	bhi.w	2624c <_malloc_r+0x488>
   25ef0:	4b8f      	ldr	r3, [pc, #572]	; (26130 <_malloc_r+0x36c>)
   25ef2:	45d3      	cmp	fp, sl
   25ef4:	6818      	ldr	r0, [r3, #0]
   25ef6:	4420      	add	r0, r4
   25ef8:	6018      	str	r0, [r3, #0]
   25efa:	f000 81ac 	beq.w	26256 <_malloc_r+0x492>
   25efe:	6811      	ldr	r1, [r2, #0]
   25f00:	3101      	adds	r1, #1
   25f02:	f000 81b5 	beq.w	26270 <_malloc_r+0x4ac>
   25f06:	ebaa 0b0b 	sub.w	fp, sl, fp
   25f0a:	4458      	add	r0, fp
   25f0c:	6018      	str	r0, [r3, #0]
   25f0e:	f01a 0207 	ands.w	r2, sl, #7
   25f12:	f000 81bc 	beq.w	2628e <_malloc_r+0x4ca>
   25f16:	f1c2 0c08 	rsb	ip, r2, #8
   25f1a:	f241 0108 	movw	r1, #4104	; 0x1008
   25f1e:	4630      	mov	r0, r6
   25f20:	9201      	str	r2, [sp, #4]
   25f22:	44e2      	add	sl, ip
   25f24:	1a89      	subs	r1, r1, r2
   25f26:	4454      	add	r4, sl
   25f28:	1b09      	subs	r1, r1, r4
   25f2a:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
   25f2e:	4659      	mov	r1, fp
   25f30:	f000 fce0 	bl	268f4 <_sbrk_r>
   25f34:	1c42      	adds	r2, r0, #1
   25f36:	4b7e      	ldr	r3, [pc, #504]	; (26130 <_malloc_r+0x36c>)
   25f38:	9a01      	ldr	r2, [sp, #4]
   25f3a:	f000 81f2 	beq.w	26322 <_malloc_r+0x55e>
   25f3e:	eba0 000a 	sub.w	r0, r0, sl
   25f42:	eb00 040b 	add.w	r4, r0, fp
   25f46:	6818      	ldr	r0, [r3, #0]
   25f48:	f044 0101 	orr.w	r1, r4, #1
   25f4c:	45b8      	cmp	r8, r7
   25f4e:	f8c7 a008 	str.w	sl, [r7, #8]
   25f52:	4458      	add	r0, fp
   25f54:	f8ca 1004 	str.w	r1, [sl, #4]
   25f58:	6018      	str	r0, [r3, #0]
   25f5a:	f000 81bc 	beq.w	262d6 <_malloc_r+0x512>
   25f5e:	f1b9 0f0f 	cmp.w	r9, #15
   25f62:	f240 81ba 	bls.w	262da <_malloc_r+0x516>
   25f66:	f8d8 2004 	ldr.w	r2, [r8, #4]
   25f6a:	f1a9 010c 	sub.w	r1, r9, #12
   25f6e:	f04f 0c05 	mov.w	ip, #5
   25f72:	f021 0107 	bic.w	r1, r1, #7
   25f76:	f002 0201 	and.w	r2, r2, #1
   25f7a:	eb08 0401 	add.w	r4, r8, r1
   25f7e:	430a      	orrs	r2, r1
   25f80:	290f      	cmp	r1, #15
   25f82:	f8c8 2004 	str.w	r2, [r8, #4]
   25f86:	e9c4 cc01 	strd	ip, ip, [r4, #4]
   25f8a:	f200 81be 	bhi.w	2630a <_malloc_r+0x546>
   25f8e:	f8da 1004 	ldr.w	r1, [sl, #4]
   25f92:	46d0      	mov	r8, sl
   25f94:	4b67      	ldr	r3, [pc, #412]	; (26134 <_malloc_r+0x370>)
   25f96:	681a      	ldr	r2, [r3, #0]
   25f98:	4282      	cmp	r2, r0
   25f9a:	bf38      	it	cc
   25f9c:	6018      	strcc	r0, [r3, #0]
   25f9e:	4b66      	ldr	r3, [pc, #408]	; (26138 <_malloc_r+0x374>)
   25fa0:	681a      	ldr	r2, [r3, #0]
   25fa2:	4282      	cmp	r2, r0
   25fa4:	bf38      	it	cc
   25fa6:	6018      	strcc	r0, [r3, #0]
   25fa8:	f021 0103 	bic.w	r1, r1, #3
   25fac:	42a9      	cmp	r1, r5
   25fae:	eba1 0205 	sub.w	r2, r1, r5
   25fb2:	d302      	bcc.n	25fba <_malloc_r+0x1f6>
   25fb4:	2a0f      	cmp	r2, #15
   25fb6:	f300 808e 	bgt.w	260d6 <_malloc_r+0x312>
   25fba:	4630      	mov	r0, r6
   25fbc:	2400      	movs	r4, #0
   25fbe:	f000 fa91 	bl	264e4 <__malloc_unlock>
   25fc2:	e728      	b.n	25e16 <_malloc_r+0x52>
   25fc4:	2400      	movs	r4, #0
   25fc6:	230c      	movs	r3, #12
   25fc8:	4620      	mov	r0, r4
   25fca:	6033      	str	r3, [r6, #0]
   25fcc:	b003      	add	sp, #12
   25fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fd2:	68da      	ldr	r2, [r3, #12]
   25fd4:	4293      	cmp	r3, r2
   25fd6:	f47f af0d 	bne.w	25df4 <_malloc_r+0x30>
   25fda:	3002      	adds	r0, #2
   25fdc:	f8d7 c010 	ldr.w	ip, [r7, #16]
   25fe0:	f8df e158 	ldr.w	lr, [pc, #344]	; 2613c <_malloc_r+0x378>
   25fe4:	45f4      	cmp	ip, lr
   25fe6:	f43f af51 	beq.w	25e8c <_malloc_r+0xc8>
   25fea:	f8dc 2004 	ldr.w	r2, [ip, #4]
   25fee:	f022 0203 	bic.w	r2, r2, #3
   25ff2:	1b53      	subs	r3, r2, r5
   25ff4:	2b0f      	cmp	r3, #15
   25ff6:	f300 80ee 	bgt.w	261d6 <_malloc_r+0x412>
   25ffa:	2b00      	cmp	r3, #0
   25ffc:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   26000:	da5e      	bge.n	260c0 <_malloc_r+0x2fc>
   26002:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   26006:	f080 809b 	bcs.w	26140 <_malloc_r+0x37c>
   2600a:	2301      	movs	r3, #1
   2600c:	ea4f 08d2 	mov.w	r8, r2, lsr #3
   26010:	0952      	lsrs	r2, r2, #5
   26012:	6879      	ldr	r1, [r7, #4]
   26014:	4498      	add	r8, r3
   26016:	fa03 f202 	lsl.w	r2, r3, r2
   2601a:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   2601e:	f857 4038 	ldr.w	r4, [r7, r8, lsl #3]
   26022:	430a      	orrs	r2, r1
   26024:	3b08      	subs	r3, #8
   26026:	f8cc 4008 	str.w	r4, [ip, #8]
   2602a:	607a      	str	r2, [r7, #4]
   2602c:	f8cc 300c 	str.w	r3, [ip, #12]
   26030:	f847 c038 	str.w	ip, [r7, r8, lsl #3]
   26034:	f8c4 c00c 	str.w	ip, [r4, #12]
   26038:	1083      	asrs	r3, r0, #2
   2603a:	2401      	movs	r4, #1
   2603c:	409c      	lsls	r4, r3
   2603e:	4294      	cmp	r4, r2
   26040:	f63f af2b 	bhi.w	25e9a <_malloc_r+0xd6>
   26044:	4214      	tst	r4, r2
   26046:	d105      	bne.n	26054 <_malloc_r+0x290>
   26048:	f020 0003 	bic.w	r0, r0, #3
   2604c:	0064      	lsls	r4, r4, #1
   2604e:	3004      	adds	r0, #4
   26050:	4214      	tst	r4, r2
   26052:	d0fb      	beq.n	2604c <_malloc_r+0x288>
   26054:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   26058:	4680      	mov	r8, r0
   2605a:	46cc      	mov	ip, r9
   2605c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   26060:	459c      	cmp	ip, r3
   26062:	d107      	bne.n	26074 <_malloc_r+0x2b0>
   26064:	e09b      	b.n	2619e <_malloc_r+0x3da>
   26066:	2a00      	cmp	r2, #0
   26068:	f280 80a2 	bge.w	261b0 <_malloc_r+0x3ec>
   2606c:	68db      	ldr	r3, [r3, #12]
   2606e:	459c      	cmp	ip, r3
   26070:	f000 8095 	beq.w	2619e <_malloc_r+0x3da>
   26074:	6859      	ldr	r1, [r3, #4]
   26076:	f021 0103 	bic.w	r1, r1, #3
   2607a:	1b4a      	subs	r2, r1, r5
   2607c:	2a0f      	cmp	r2, #15
   2607e:	ddf2      	ble.n	26066 <_malloc_r+0x2a2>
   26080:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   26084:	f045 0401 	orr.w	r4, r5, #1
   26088:	f042 0801 	orr.w	r8, r2, #1
   2608c:	441d      	add	r5, r3
   2608e:	4630      	mov	r0, r6
   26090:	689e      	ldr	r6, [r3, #8]
   26092:	605c      	str	r4, [r3, #4]
   26094:	f103 0408 	add.w	r4, r3, #8
   26098:	f8c6 c00c 	str.w	ip, [r6, #12]
   2609c:	f8cc 6008 	str.w	r6, [ip, #8]
   260a0:	e9c7 5504 	strd	r5, r5, [r7, #16]
   260a4:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   260a8:	f8c5 8004 	str.w	r8, [r5, #4]
   260ac:	505a      	str	r2, [r3, r1]
   260ae:	f000 fa19 	bl	264e4 <__malloc_unlock>
   260b2:	e6b0      	b.n	25e16 <_malloc_r+0x52>
   260b4:	f44f 7300 	mov.w	r3, #512	; 0x200
   260b8:	2040      	movs	r0, #64	; 0x40
   260ba:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   260be:	e6c8      	b.n	25e52 <_malloc_r+0x8e>
   260c0:	4462      	add	r2, ip
   260c2:	4630      	mov	r0, r6
   260c4:	f10c 0408 	add.w	r4, ip, #8
   260c8:	6853      	ldr	r3, [r2, #4]
   260ca:	f043 0301 	orr.w	r3, r3, #1
   260ce:	6053      	str	r3, [r2, #4]
   260d0:	f000 fa08 	bl	264e4 <__malloc_unlock>
   260d4:	e69f      	b.n	25e16 <_malloc_r+0x52>
   260d6:	f045 0301 	orr.w	r3, r5, #1
   260da:	f042 0201 	orr.w	r2, r2, #1
   260de:	4445      	add	r5, r8
   260e0:	f108 0408 	add.w	r4, r8, #8
   260e4:	f8c8 3004 	str.w	r3, [r8, #4]
   260e8:	4630      	mov	r0, r6
   260ea:	60bd      	str	r5, [r7, #8]
   260ec:	606a      	str	r2, [r5, #4]
   260ee:	f000 f9f9 	bl	264e4 <__malloc_unlock>
   260f2:	4620      	mov	r0, r4
   260f4:	b003      	add	sp, #12
   260f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260fa:	441a      	add	r2, r3
   260fc:	f103 0408 	add.w	r4, r3, #8
   26100:	4630      	mov	r0, r6
   26102:	6851      	ldr	r1, [r2, #4]
   26104:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
   26108:	f041 0101 	orr.w	r1, r1, #1
   2610c:	60fd      	str	r5, [r7, #12]
   2610e:	60af      	str	r7, [r5, #8]
   26110:	6051      	str	r1, [r2, #4]
   26112:	f000 f9e7 	bl	264e4 <__malloc_unlock>
   26116:	4620      	mov	r0, r4
   26118:	b003      	add	sp, #12
   2611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2611e:	bf00      	nop
   26120:	200204dc 	.word	0x200204dc
   26124:	200208e4 	.word	0x200208e4
   26128:	200242a8 	.word	0x200242a8
   2612c:	fffff000 	.word	0xfffff000
   26130:	20024278 	.word	0x20024278
   26134:	200242a0 	.word	0x200242a0
   26138:	200242a4 	.word	0x200242a4
   2613c:	200204e4 	.word	0x200204e4
   26140:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   26144:	ea4f 2352 	mov.w	r3, r2, lsr #9
   26148:	d359      	bcc.n	261fe <_malloc_r+0x43a>
   2614a:	2b14      	cmp	r3, #20
   2614c:	f200 80b1 	bhi.w	262b2 <_malloc_r+0x4ee>
   26150:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   26154:	335b      	adds	r3, #91	; 0x5b
   26156:	00c9      	lsls	r1, r1, #3
   26158:	187c      	adds	r4, r7, r1
   2615a:	5879      	ldr	r1, [r7, r1]
   2615c:	3c08      	subs	r4, #8
   2615e:	428c      	cmp	r4, r1
   26160:	f000 808c 	beq.w	2627c <_malloc_r+0x4b8>
   26164:	684b      	ldr	r3, [r1, #4]
   26166:	f023 0303 	bic.w	r3, r3, #3
   2616a:	4293      	cmp	r3, r2
   2616c:	d902      	bls.n	26174 <_malloc_r+0x3b0>
   2616e:	6889      	ldr	r1, [r1, #8]
   26170:	428c      	cmp	r4, r1
   26172:	d1f7      	bne.n	26164 <_malloc_r+0x3a0>
   26174:	68cc      	ldr	r4, [r1, #12]
   26176:	687a      	ldr	r2, [r7, #4]
   26178:	e9cc 1402 	strd	r1, r4, [ip, #8]
   2617c:	f8c4 c008 	str.w	ip, [r4, #8]
   26180:	f8c1 c00c 	str.w	ip, [r1, #12]
   26184:	e758      	b.n	26038 <_malloc_r+0x274>
   26186:	2b14      	cmp	r3, #20
   26188:	d93f      	bls.n	2620a <_malloc_r+0x446>
   2618a:	2b54      	cmp	r3, #84	; 0x54
   2618c:	f200 8099 	bhi.w	262c2 <_malloc_r+0x4fe>
   26190:	0b2b      	lsrs	r3, r5, #12
   26192:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   26196:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   2619a:	00c3      	lsls	r3, r0, #3
   2619c:	e659      	b.n	25e52 <_malloc_r+0x8e>
   2619e:	f108 0801 	add.w	r8, r8, #1
   261a2:	f10c 0c08 	add.w	ip, ip, #8
   261a6:	f018 0f03 	tst.w	r8, #3
   261aa:	f47f af57 	bne.w	2605c <_malloc_r+0x298>
   261ae:	e037      	b.n	26220 <_malloc_r+0x45c>
   261b0:	4419      	add	r1, r3
   261b2:	68da      	ldr	r2, [r3, #12]
   261b4:	461c      	mov	r4, r3
   261b6:	4630      	mov	r0, r6
   261b8:	684b      	ldr	r3, [r1, #4]
   261ba:	f854 5f08 	ldr.w	r5, [r4, #8]!
   261be:	f043 0301 	orr.w	r3, r3, #1
   261c2:	604b      	str	r3, [r1, #4]
   261c4:	60ea      	str	r2, [r5, #12]
   261c6:	6095      	str	r5, [r2, #8]
   261c8:	f000 f98c 	bl	264e4 <__malloc_unlock>
   261cc:	e623      	b.n	25e16 <_malloc_r+0x52>
   261ce:	08e8      	lsrs	r0, r5, #3
   261d0:	f105 0308 	add.w	r3, r5, #8
   261d4:	e606      	b.n	25de4 <_malloc_r+0x20>
   261d6:	f045 0401 	orr.w	r4, r5, #1
   261da:	f043 0101 	orr.w	r1, r3, #1
   261de:	4465      	add	r5, ip
   261e0:	4630      	mov	r0, r6
   261e2:	f8cc 4004 	str.w	r4, [ip, #4]
   261e6:	f10c 0408 	add.w	r4, ip, #8
   261ea:	e9c7 5504 	strd	r5, r5, [r7, #16]
   261ee:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   261f2:	6069      	str	r1, [r5, #4]
   261f4:	f84c 3002 	str.w	r3, [ip, r2]
   261f8:	f000 f974 	bl	264e4 <__malloc_unlock>
   261fc:	e60b      	b.n	25e16 <_malloc_r+0x52>
   261fe:	0993      	lsrs	r3, r2, #6
   26200:	f103 0139 	add.w	r1, r3, #57	; 0x39
   26204:	3338      	adds	r3, #56	; 0x38
   26206:	00c9      	lsls	r1, r1, #3
   26208:	e7a6      	b.n	26158 <_malloc_r+0x394>
   2620a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2620e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   26212:	00c3      	lsls	r3, r0, #3
   26214:	e61d      	b.n	25e52 <_malloc_r+0x8e>
   26216:	f859 3908 	ldr.w	r3, [r9], #-8
   2621a:	454b      	cmp	r3, r9
   2621c:	f040 809c 	bne.w	26358 <_malloc_r+0x594>
   26220:	f010 0f03 	tst.w	r0, #3
   26224:	f100 30ff 	add.w	r0, r0, #4294967295
   26228:	d1f5      	bne.n	26216 <_malloc_r+0x452>
   2622a:	687b      	ldr	r3, [r7, #4]
   2622c:	ea23 0304 	bic.w	r3, r3, r4
   26230:	607b      	str	r3, [r7, #4]
   26232:	0064      	lsls	r4, r4, #1
   26234:	f43f ae31 	beq.w	25e9a <_malloc_r+0xd6>
   26238:	429c      	cmp	r4, r3
   2623a:	d903      	bls.n	26244 <_malloc_r+0x480>
   2623c:	e62d      	b.n	25e9a <_malloc_r+0xd6>
   2623e:	0064      	lsls	r4, r4, #1
   26240:	f108 0804 	add.w	r8, r8, #4
   26244:	421c      	tst	r4, r3
   26246:	d0fa      	beq.n	2623e <_malloc_r+0x47a>
   26248:	4640      	mov	r0, r8
   2624a:	e703      	b.n	26054 <_malloc_r+0x290>
   2624c:	f8d7 8008 	ldr.w	r8, [r7, #8]
   26250:	f8d8 1004 	ldr.w	r1, [r8, #4]
   26254:	e6a8      	b.n	25fa8 <_malloc_r+0x1e4>
   26256:	f3cb 010b 	ubfx	r1, fp, #0, #12
   2625a:	2900      	cmp	r1, #0
   2625c:	f47f ae4f 	bne.w	25efe <_malloc_r+0x13a>
   26260:	444c      	add	r4, r9
   26262:	f8d7 8008 	ldr.w	r8, [r7, #8]
   26266:	f044 0101 	orr.w	r1, r4, #1
   2626a:	f8c8 1004 	str.w	r1, [r8, #4]
   2626e:	e691      	b.n	25f94 <_malloc_r+0x1d0>
   26270:	f8c2 a000 	str.w	sl, [r2]
   26274:	e64b      	b.n	25f0e <_malloc_r+0x14a>
   26276:	f103 0410 	add.w	r4, r3, #16
   2627a:	e62a      	b.n	25ed2 <_malloc_r+0x10e>
   2627c:	109a      	asrs	r2, r3, #2
   2627e:	f04f 0801 	mov.w	r8, #1
   26282:	687b      	ldr	r3, [r7, #4]
   26284:	fa08 f202 	lsl.w	r2, r8, r2
   26288:	431a      	orrs	r2, r3
   2628a:	607a      	str	r2, [r7, #4]
   2628c:	e774      	b.n	26178 <_malloc_r+0x3b4>
   2628e:	eb0a 0b04 	add.w	fp, sl, r4
   26292:	4630      	mov	r0, r6
   26294:	9201      	str	r2, [sp, #4]
   26296:	f1cb 0b00 	rsb	fp, fp, #0
   2629a:	f3cb 0b0b 	ubfx	fp, fp, #0, #12
   2629e:	4659      	mov	r1, fp
   262a0:	f000 fb28 	bl	268f4 <_sbrk_r>
   262a4:	1c43      	adds	r3, r0, #1
   262a6:	9a01      	ldr	r2, [sp, #4]
   262a8:	4b2c      	ldr	r3, [pc, #176]	; (2635c <_malloc_r+0x598>)
   262aa:	f47f ae48 	bne.w	25f3e <_malloc_r+0x17a>
   262ae:	4693      	mov	fp, r2
   262b0:	e649      	b.n	25f46 <_malloc_r+0x182>
   262b2:	2b54      	cmp	r3, #84	; 0x54
   262b4:	d815      	bhi.n	262e2 <_malloc_r+0x51e>
   262b6:	0b13      	lsrs	r3, r2, #12
   262b8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   262bc:	336e      	adds	r3, #110	; 0x6e
   262be:	00c9      	lsls	r1, r1, #3
   262c0:	e74a      	b.n	26158 <_malloc_r+0x394>
   262c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   262c6:	d815      	bhi.n	262f4 <_malloc_r+0x530>
   262c8:	0beb      	lsrs	r3, r5, #15
   262ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
   262ce:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   262d2:	00c3      	lsls	r3, r0, #3
   262d4:	e5bd      	b.n	25e52 <_malloc_r+0x8e>
   262d6:	46d0      	mov	r8, sl
   262d8:	e65c      	b.n	25f94 <_malloc_r+0x1d0>
   262da:	2301      	movs	r3, #1
   262dc:	f8ca 3004 	str.w	r3, [sl, #4]
   262e0:	e66b      	b.n	25fba <_malloc_r+0x1f6>
   262e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   262e6:	d823      	bhi.n	26330 <_malloc_r+0x56c>
   262e8:	0bd3      	lsrs	r3, r2, #15
   262ea:	f103 0178 	add.w	r1, r3, #120	; 0x78
   262ee:	3377      	adds	r3, #119	; 0x77
   262f0:	00c9      	lsls	r1, r1, #3
   262f2:	e731      	b.n	26158 <_malloc_r+0x394>
   262f4:	f240 5254 	movw	r2, #1364	; 0x554
   262f8:	4293      	cmp	r3, r2
   262fa:	d823      	bhi.n	26344 <_malloc_r+0x580>
   262fc:	0cab      	lsrs	r3, r5, #18
   262fe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   26302:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   26306:	00c3      	lsls	r3, r0, #3
   26308:	e5a3      	b.n	25e52 <_malloc_r+0x8e>
   2630a:	f108 0108 	add.w	r1, r8, #8
   2630e:	4630      	mov	r0, r6
   26310:	f003 fec2 	bl	2a098 <_free_r>
   26314:	f8d7 8008 	ldr.w	r8, [r7, #8]
   26318:	4b10      	ldr	r3, [pc, #64]	; (2635c <_malloc_r+0x598>)
   2631a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   2631e:	6818      	ldr	r0, [r3, #0]
   26320:	e638      	b.n	25f94 <_malloc_r+0x1d0>
   26322:	3a08      	subs	r2, #8
   26324:	f04f 0b00 	mov.w	fp, #0
   26328:	4414      	add	r4, r2
   2632a:	eba4 040a 	sub.w	r4, r4, sl
   2632e:	e60a      	b.n	25f46 <_malloc_r+0x182>
   26330:	f240 5154 	movw	r1, #1364	; 0x554
   26334:	428b      	cmp	r3, r1
   26336:	d80b      	bhi.n	26350 <_malloc_r+0x58c>
   26338:	0c93      	lsrs	r3, r2, #18
   2633a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   2633e:	337c      	adds	r3, #124	; 0x7c
   26340:	00c9      	lsls	r1, r1, #3
   26342:	e709      	b.n	26158 <_malloc_r+0x394>
   26344:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   26348:	207f      	movs	r0, #127	; 0x7f
   2634a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   2634e:	e580      	b.n	25e52 <_malloc_r+0x8e>
   26350:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   26354:	237e      	movs	r3, #126	; 0x7e
   26356:	e6ff      	b.n	26158 <_malloc_r+0x394>
   26358:	687b      	ldr	r3, [r7, #4]
   2635a:	e76a      	b.n	26232 <_malloc_r+0x46e>
   2635c:	20024278 	.word	0x20024278

00026360 <memchr>:
   26360:	b470      	push	{r4, r5, r6}
   26362:	0784      	lsls	r4, r0, #30
   26364:	b2ce      	uxtb	r6, r1
   26366:	d012      	beq.n	2638e <memchr+0x2e>
   26368:	4603      	mov	r3, r0
   2636a:	1e55      	subs	r5, r2, #1
   2636c:	b922      	cbnz	r2, 26378 <memchr+0x18>
   2636e:	e00b      	b.n	26388 <memchr+0x28>
   26370:	079a      	lsls	r2, r3, #30
   26372:	d00e      	beq.n	26392 <memchr+0x32>
   26374:	3d01      	subs	r5, #1
   26376:	d307      	bcc.n	26388 <memchr+0x28>
   26378:	4618      	mov	r0, r3
   2637a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2637e:	42b2      	cmp	r2, r6
   26380:	461c      	mov	r4, r3
   26382:	d1f5      	bne.n	26370 <memchr+0x10>
   26384:	bc70      	pop	{r4, r5, r6}
   26386:	4770      	bx	lr
   26388:	2000      	movs	r0, #0
   2638a:	bc70      	pop	{r4, r5, r6}
   2638c:	4770      	bx	lr
   2638e:	4604      	mov	r4, r0
   26390:	4615      	mov	r5, r2
   26392:	2d03      	cmp	r5, #3
   26394:	d80c      	bhi.n	263b0 <memchr+0x50>
   26396:	2d00      	cmp	r5, #0
   26398:	d0f6      	beq.n	26388 <memchr+0x28>
   2639a:	1963      	adds	r3, r4, r5
   2639c:	e001      	b.n	263a2 <memchr+0x42>
   2639e:	429c      	cmp	r4, r3
   263a0:	d0f2      	beq.n	26388 <memchr+0x28>
   263a2:	4620      	mov	r0, r4
   263a4:	f814 2b01 	ldrb.w	r2, [r4], #1
   263a8:	42b2      	cmp	r2, r6
   263aa:	d1f8      	bne.n	2639e <memchr+0x3e>
   263ac:	bc70      	pop	{r4, r5, r6}
   263ae:	4770      	bx	lr
   263b0:	020a      	lsls	r2, r1, #8
   263b2:	4621      	mov	r1, r4
   263b4:	b292      	uxth	r2, r2
   263b6:	4332      	orrs	r2, r6
   263b8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   263bc:	460c      	mov	r4, r1
   263be:	3104      	adds	r1, #4
   263c0:	6823      	ldr	r3, [r4, #0]
   263c2:	4053      	eors	r3, r2
   263c4:	f1a3 3001 	sub.w	r0, r3, #16843009	; 0x1010101
   263c8:	ea20 0303 	bic.w	r3, r0, r3
   263cc:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   263d0:	d1e3      	bne.n	2639a <memchr+0x3a>
   263d2:	3d04      	subs	r5, #4
   263d4:	460c      	mov	r4, r1
   263d6:	2d03      	cmp	r5, #3
   263d8:	d8f0      	bhi.n	263bc <memchr+0x5c>
   263da:	e7dc      	b.n	26396 <memchr+0x36>

000263dc <memcmp>:
   263dc:	2a03      	cmp	r2, #3
   263de:	b470      	push	{r4, r5, r6}
   263e0:	d912      	bls.n	26408 <memcmp+0x2c>
   263e2:	ea40 0501 	orr.w	r5, r0, r1
   263e6:	4604      	mov	r4, r0
   263e8:	460b      	mov	r3, r1
   263ea:	07ad      	lsls	r5, r5, #30
   263ec:	d11d      	bne.n	2642a <memcmp+0x4e>
   263ee:	4619      	mov	r1, r3
   263f0:	4620      	mov	r0, r4
   263f2:	f853 5b04 	ldr.w	r5, [r3], #4
   263f6:	f854 6b04 	ldr.w	r6, [r4], #4
   263fa:	42ae      	cmp	r6, r5
   263fc:	d115      	bne.n	2642a <memcmp+0x4e>
   263fe:	3a04      	subs	r2, #4
   26400:	4620      	mov	r0, r4
   26402:	4619      	mov	r1, r3
   26404:	2a03      	cmp	r2, #3
   26406:	d8f2      	bhi.n	263ee <memcmp+0x12>
   26408:	1e56      	subs	r6, r2, #1
   2640a:	b19a      	cbz	r2, 26434 <memcmp+0x58>
   2640c:	3901      	subs	r1, #1
   2640e:	1e44      	subs	r4, r0, #1
   26410:	e001      	b.n	26416 <memcmp+0x3a>
   26412:	18c3      	adds	r3, r0, r3
   26414:	d00b      	beq.n	2642e <memcmp+0x52>
   26416:	f814 5f01 	ldrb.w	r5, [r4, #1]!
   2641a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2641e:	1b33      	subs	r3, r6, r4
   26420:	4295      	cmp	r5, r2
   26422:	d0f6      	beq.n	26412 <memcmp+0x36>
   26424:	1aa8      	subs	r0, r5, r2
   26426:	bc70      	pop	{r4, r5, r6}
   26428:	4770      	bx	lr
   2642a:	1e56      	subs	r6, r2, #1
   2642c:	e7ee      	b.n	2640c <memcmp+0x30>
   2642e:	4618      	mov	r0, r3
   26430:	bc70      	pop	{r4, r5, r6}
   26432:	4770      	bx	lr
   26434:	4610      	mov	r0, r2
   26436:	e7f6      	b.n	26426 <memcmp+0x4a>

00026438 <memset>:
   26438:	b4f0      	push	{r4, r5, r6, r7}
   2643a:	0786      	lsls	r6, r0, #30
   2643c:	d046      	beq.n	264cc <memset+0x94>
   2643e:	1e54      	subs	r4, r2, #1
   26440:	2a00      	cmp	r2, #0
   26442:	d03c      	beq.n	264be <memset+0x86>
   26444:	b2ca      	uxtb	r2, r1
   26446:	4603      	mov	r3, r0
   26448:	e001      	b.n	2644e <memset+0x16>
   2644a:	3c01      	subs	r4, #1
   2644c:	d337      	bcc.n	264be <memset+0x86>
   2644e:	f803 2b01 	strb.w	r2, [r3], #1
   26452:	079d      	lsls	r5, r3, #30
   26454:	d1f9      	bne.n	2644a <memset+0x12>
   26456:	2c03      	cmp	r4, #3
   26458:	d92a      	bls.n	264b0 <memset+0x78>
   2645a:	b2cd      	uxtb	r5, r1
   2645c:	2c0f      	cmp	r4, #15
   2645e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   26462:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   26466:	d934      	bls.n	264d2 <memset+0x9a>
   26468:	f1a4 0610 	sub.w	r6, r4, #16
   2646c:	f103 0720 	add.w	r7, r3, #32
   26470:	f103 0210 	add.w	r2, r3, #16
   26474:	f026 0c0f 	bic.w	ip, r6, #15
   26478:	0936      	lsrs	r6, r6, #4
   2647a:	4467      	add	r7, ip
   2647c:	e942 5504 	strd	r5, r5, [r2, #-16]
   26480:	e942 5502 	strd	r5, r5, [r2, #-8]
   26484:	3210      	adds	r2, #16
   26486:	42ba      	cmp	r2, r7
   26488:	d1f8      	bne.n	2647c <memset+0x44>
   2648a:	1c72      	adds	r2, r6, #1
   2648c:	f014 0f0c 	tst.w	r4, #12
   26490:	f004 060f 	and.w	r6, r4, #15
   26494:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   26498:	d013      	beq.n	264c2 <memset+0x8a>
   2649a:	1f33      	subs	r3, r6, #4
   2649c:	f023 0303 	bic.w	r3, r3, #3
   264a0:	3304      	adds	r3, #4
   264a2:	4413      	add	r3, r2
   264a4:	f842 5b04 	str.w	r5, [r2], #4
   264a8:	4293      	cmp	r3, r2
   264aa:	d1fb      	bne.n	264a4 <memset+0x6c>
   264ac:	f006 0403 	and.w	r4, r6, #3
   264b0:	b12c      	cbz	r4, 264be <memset+0x86>
   264b2:	b2ca      	uxtb	r2, r1
   264b4:	441c      	add	r4, r3
   264b6:	f803 2b01 	strb.w	r2, [r3], #1
   264ba:	429c      	cmp	r4, r3
   264bc:	d1fb      	bne.n	264b6 <memset+0x7e>
   264be:	bcf0      	pop	{r4, r5, r6, r7}
   264c0:	4770      	bx	lr
   264c2:	4634      	mov	r4, r6
   264c4:	4613      	mov	r3, r2
   264c6:	2c00      	cmp	r4, #0
   264c8:	d1f3      	bne.n	264b2 <memset+0x7a>
   264ca:	e7f8      	b.n	264be <memset+0x86>
   264cc:	4614      	mov	r4, r2
   264ce:	4603      	mov	r3, r0
   264d0:	e7c1      	b.n	26456 <memset+0x1e>
   264d2:	461a      	mov	r2, r3
   264d4:	4626      	mov	r6, r4
   264d6:	e7e0      	b.n	2649a <memset+0x62>

000264d8 <__malloc_lock>:
   264d8:	4801      	ldr	r0, [pc, #4]	; (264e0 <__malloc_lock+0x8>)
   264da:	f004 bc83 	b.w	2ade4 <__retarget_lock_acquire_recursive>
   264de:	bf00      	nop
   264e0:	2002641c 	.word	0x2002641c

000264e4 <__malloc_unlock>:
   264e4:	4801      	ldr	r0, [pc, #4]	; (264ec <__malloc_unlock+0x8>)
   264e6:	f004 bc7f 	b.w	2ade8 <__retarget_lock_release_recursive>
   264ea:	bf00      	nop
   264ec:	2002641c 	.word	0x2002641c

000264f0 <realloc>:
   264f0:	4b02      	ldr	r3, [pc, #8]	; (264fc <realloc+0xc>)
   264f2:	460a      	mov	r2, r1
   264f4:	4601      	mov	r1, r0
   264f6:	6818      	ldr	r0, [r3, #0]
   264f8:	f000 b802 	b.w	26500 <_realloc_r>
   264fc:	200204d8 	.word	0x200204d8

00026500 <_realloc_r>:
   26500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26504:	4617      	mov	r7, r2
   26506:	2900      	cmp	r1, #0
   26508:	f000 80ba 	beq.w	26680 <_realloc_r+0x180>
   2650c:	460c      	mov	r4, r1
   2650e:	f107 050b 	add.w	r5, r7, #11
   26512:	4680      	mov	r8, r0
   26514:	f7ff ffe0 	bl	264d8 <__malloc_lock>
   26518:	f854 1c04 	ldr.w	r1, [r4, #-4]
   2651c:	2d16      	cmp	r5, #22
   2651e:	f1a4 0908 	sub.w	r9, r4, #8
   26522:	f021 0603 	bic.w	r6, r1, #3
   26526:	d85d      	bhi.n	265e4 <_realloc_r+0xe4>
   26528:	2210      	movs	r2, #16
   2652a:	2300      	movs	r3, #0
   2652c:	4615      	mov	r5, r2
   2652e:	42bd      	cmp	r5, r7
   26530:	f0c0 80c2 	bcc.w	266b8 <_realloc_r+0x1b8>
   26534:	2b00      	cmp	r3, #0
   26536:	f040 80bf 	bne.w	266b8 <_realloc_r+0x1b8>
   2653a:	4296      	cmp	r6, r2
   2653c:	da7e      	bge.n	2663c <_realloc_r+0x13c>
   2653e:	4bc6      	ldr	r3, [pc, #792]	; (26858 <_realloc_r+0x358>)
   26540:	eb09 0006 	add.w	r0, r9, r6
   26544:	f8d3 c008 	ldr.w	ip, [r3, #8]
   26548:	4584      	cmp	ip, r0
   2654a:	f000 80bc 	beq.w	266c6 <_realloc_r+0x1c6>
   2654e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   26552:	f02c 0301 	bic.w	r3, ip, #1
   26556:	4403      	add	r3, r0
   26558:	685b      	ldr	r3, [r3, #4]
   2655a:	07db      	lsls	r3, r3, #31
   2655c:	f100 8085 	bmi.w	2666a <_realloc_r+0x16a>
   26560:	f02c 0c03 	bic.w	ip, ip, #3
   26564:	eb06 030c 	add.w	r3, r6, ip
   26568:	4293      	cmp	r3, r2
   2656a:	f280 80fa 	bge.w	26762 <_realloc_r+0x262>
   2656e:	07cb      	lsls	r3, r1, #31
   26570:	d40f      	bmi.n	26592 <_realloc_r+0x92>
   26572:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26576:	eba9 0a03 	sub.w	sl, r9, r3
   2657a:	f8da 3004 	ldr.w	r3, [sl, #4]
   2657e:	f023 0103 	bic.w	r1, r3, #3
   26582:	448c      	add	ip, r1
   26584:	44b4      	add	ip, r6
   26586:	4594      	cmp	ip, r2
   26588:	da31      	bge.n	265ee <_realloc_r+0xee>
   2658a:	1873      	adds	r3, r6, r1
   2658c:	4293      	cmp	r3, r2
   2658e:	f280 80ff 	bge.w	26790 <_realloc_r+0x290>
   26592:	4639      	mov	r1, r7
   26594:	4640      	mov	r0, r8
   26596:	f7ff fc15 	bl	25dc4 <_malloc_r>
   2659a:	4607      	mov	r7, r0
   2659c:	b1e0      	cbz	r0, 265d8 <_realloc_r+0xd8>
   2659e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   265a2:	f1a0 0208 	sub.w	r2, r0, #8
   265a6:	f023 0301 	bic.w	r3, r3, #1
   265aa:	444b      	add	r3, r9
   265ac:	4293      	cmp	r3, r2
   265ae:	f000 80de 	beq.w	2676e <_realloc_r+0x26e>
   265b2:	1f32      	subs	r2, r6, #4
   265b4:	2a24      	cmp	r2, #36	; 0x24
   265b6:	f200 810c 	bhi.w	267d2 <_realloc_r+0x2d2>
   265ba:	2a13      	cmp	r2, #19
   265bc:	f200 80dd 	bhi.w	2677a <_realloc_r+0x27a>
   265c0:	4603      	mov	r3, r0
   265c2:	4622      	mov	r2, r4
   265c4:	6811      	ldr	r1, [r2, #0]
   265c6:	6019      	str	r1, [r3, #0]
   265c8:	6851      	ldr	r1, [r2, #4]
   265ca:	6059      	str	r1, [r3, #4]
   265cc:	6892      	ldr	r2, [r2, #8]
   265ce:	609a      	str	r2, [r3, #8]
   265d0:	4621      	mov	r1, r4
   265d2:	4640      	mov	r0, r8
   265d4:	f003 fd60 	bl	2a098 <_free_r>
   265d8:	4640      	mov	r0, r8
   265da:	f7ff ff83 	bl	264e4 <__malloc_unlock>
   265de:	4638      	mov	r0, r7
   265e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265e4:	f025 0507 	bic.w	r5, r5, #7
   265e8:	462a      	mov	r2, r5
   265ea:	0feb      	lsrs	r3, r5, #31
   265ec:	e79f      	b.n	2652e <_realloc_r+0x2e>
   265ee:	68c3      	ldr	r3, [r0, #12]
   265f0:	4657      	mov	r7, sl
   265f2:	6881      	ldr	r1, [r0, #8]
   265f4:	1f32      	subs	r2, r6, #4
   265f6:	60cb      	str	r3, [r1, #12]
   265f8:	2a24      	cmp	r2, #36	; 0x24
   265fa:	6099      	str	r1, [r3, #8]
   265fc:	f857 1f08 	ldr.w	r1, [r7, #8]!
   26600:	f8da 300c 	ldr.w	r3, [sl, #12]
   26604:	60cb      	str	r3, [r1, #12]
   26606:	6099      	str	r1, [r3, #8]
   26608:	f200 8112 	bhi.w	26830 <_realloc_r+0x330>
   2660c:	2a13      	cmp	r2, #19
   2660e:	f240 810d 	bls.w	2682c <_realloc_r+0x32c>
   26612:	6823      	ldr	r3, [r4, #0]
   26614:	2a1b      	cmp	r2, #27
   26616:	f8ca 3008 	str.w	r3, [sl, #8]
   2661a:	6863      	ldr	r3, [r4, #4]
   2661c:	f8ca 300c 	str.w	r3, [sl, #12]
   26620:	f200 8125 	bhi.w	2686e <_realloc_r+0x36e>
   26624:	3408      	adds	r4, #8
   26626:	f10a 0310 	add.w	r3, sl, #16
   2662a:	6822      	ldr	r2, [r4, #0]
   2662c:	4666      	mov	r6, ip
   2662e:	46d1      	mov	r9, sl
   26630:	601a      	str	r2, [r3, #0]
   26632:	6862      	ldr	r2, [r4, #4]
   26634:	605a      	str	r2, [r3, #4]
   26636:	68a2      	ldr	r2, [r4, #8]
   26638:	463c      	mov	r4, r7
   2663a:	609a      	str	r2, [r3, #8]
   2663c:	1b73      	subs	r3, r6, r5
   2663e:	2b0f      	cmp	r3, #15
   26640:	d823      	bhi.n	2668a <_realloc_r+0x18a>
   26642:	f8d9 2004 	ldr.w	r2, [r9, #4]
   26646:	eb09 0106 	add.w	r1, r9, r6
   2664a:	f002 0201 	and.w	r2, r2, #1
   2664e:	4332      	orrs	r2, r6
   26650:	f8c9 2004 	str.w	r2, [r9, #4]
   26654:	684b      	ldr	r3, [r1, #4]
   26656:	f043 0301 	orr.w	r3, r3, #1
   2665a:	604b      	str	r3, [r1, #4]
   2665c:	4640      	mov	r0, r8
   2665e:	4627      	mov	r7, r4
   26660:	f7ff ff40 	bl	264e4 <__malloc_unlock>
   26664:	4638      	mov	r0, r7
   26666:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2666a:	07c9      	lsls	r1, r1, #31
   2666c:	d491      	bmi.n	26592 <_realloc_r+0x92>
   2666e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26672:	eba9 0a03 	sub.w	sl, r9, r3
   26676:	f8da 1004 	ldr.w	r1, [sl, #4]
   2667a:	f021 0103 	bic.w	r1, r1, #3
   2667e:	e784      	b.n	2658a <_realloc_r+0x8a>
   26680:	4611      	mov	r1, r2
   26682:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26686:	f7ff bb9d 	b.w	25dc4 <_malloc_r>
   2668a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2668e:	eb09 0205 	add.w	r2, r9, r5
   26692:	444e      	add	r6, r9
   26694:	f043 0301 	orr.w	r3, r3, #1
   26698:	f001 0101 	and.w	r1, r1, #1
   2669c:	4640      	mov	r0, r8
   2669e:	430d      	orrs	r5, r1
   266a0:	f102 0108 	add.w	r1, r2, #8
   266a4:	f8c9 5004 	str.w	r5, [r9, #4]
   266a8:	6053      	str	r3, [r2, #4]
   266aa:	6873      	ldr	r3, [r6, #4]
   266ac:	f043 0301 	orr.w	r3, r3, #1
   266b0:	6073      	str	r3, [r6, #4]
   266b2:	f003 fcf1 	bl	2a098 <_free_r>
   266b6:	e7d1      	b.n	2665c <_realloc_r+0x15c>
   266b8:	230c      	movs	r3, #12
   266ba:	2700      	movs	r7, #0
   266bc:	f8c8 3000 	str.w	r3, [r8]
   266c0:	4638      	mov	r0, r7
   266c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266c6:	f8dc b004 	ldr.w	fp, [ip, #4]
   266ca:	f105 0010 	add.w	r0, r5, #16
   266ce:	f02b 0b03 	bic.w	fp, fp, #3
   266d2:	eb06 0c0b 	add.w	ip, r6, fp
   266d6:	4584      	cmp	ip, r0
   266d8:	f280 8094 	bge.w	26804 <_realloc_r+0x304>
   266dc:	07c9      	lsls	r1, r1, #31
   266de:	f53f af58 	bmi.w	26592 <_realloc_r+0x92>
   266e2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   266e6:	eba9 0a01 	sub.w	sl, r9, r1
   266ea:	f8da 1004 	ldr.w	r1, [sl, #4]
   266ee:	f021 0103 	bic.w	r1, r1, #3
   266f2:	448b      	add	fp, r1
   266f4:	44b3      	add	fp, r6
   266f6:	4558      	cmp	r0, fp
   266f8:	f73f af47 	bgt.w	2658a <_realloc_r+0x8a>
   266fc:	4657      	mov	r7, sl
   266fe:	1f32      	subs	r2, r6, #4
   26700:	f8da 100c 	ldr.w	r1, [sl, #12]
   26704:	f857 0f08 	ldr.w	r0, [r7, #8]!
   26708:	2a24      	cmp	r2, #36	; 0x24
   2670a:	60c1      	str	r1, [r0, #12]
   2670c:	6088      	str	r0, [r1, #8]
   2670e:	f200 80bc 	bhi.w	2688a <_realloc_r+0x38a>
   26712:	2a13      	cmp	r2, #19
   26714:	f240 80b7 	bls.w	26886 <_realloc_r+0x386>
   26718:	6821      	ldr	r1, [r4, #0]
   2671a:	2a1b      	cmp	r2, #27
   2671c:	f8ca 1008 	str.w	r1, [sl, #8]
   26720:	6861      	ldr	r1, [r4, #4]
   26722:	f8ca 100c 	str.w	r1, [sl, #12]
   26726:	f200 80c1 	bhi.w	268ac <_realloc_r+0x3ac>
   2672a:	3408      	adds	r4, #8
   2672c:	f10a 0210 	add.w	r2, sl, #16
   26730:	6821      	ldr	r1, [r4, #0]
   26732:	6011      	str	r1, [r2, #0]
   26734:	6861      	ldr	r1, [r4, #4]
   26736:	6051      	str	r1, [r2, #4]
   26738:	68a1      	ldr	r1, [r4, #8]
   2673a:	6091      	str	r1, [r2, #8]
   2673c:	ebab 0205 	sub.w	r2, fp, r5
   26740:	eb0a 0105 	add.w	r1, sl, r5
   26744:	4640      	mov	r0, r8
   26746:	f042 0201 	orr.w	r2, r2, #1
   2674a:	6099      	str	r1, [r3, #8]
   2674c:	604a      	str	r2, [r1, #4]
   2674e:	f8da 3004 	ldr.w	r3, [sl, #4]
   26752:	f003 0301 	and.w	r3, r3, #1
   26756:	431d      	orrs	r5, r3
   26758:	f8ca 5004 	str.w	r5, [sl, #4]
   2675c:	f7ff fec2 	bl	264e4 <__malloc_unlock>
   26760:	e780      	b.n	26664 <_realloc_r+0x164>
   26762:	68c2      	ldr	r2, [r0, #12]
   26764:	461e      	mov	r6, r3
   26766:	6883      	ldr	r3, [r0, #8]
   26768:	60da      	str	r2, [r3, #12]
   2676a:	6093      	str	r3, [r2, #8]
   2676c:	e766      	b.n	2663c <_realloc_r+0x13c>
   2676e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   26772:	f023 0303 	bic.w	r3, r3, #3
   26776:	441e      	add	r6, r3
   26778:	e760      	b.n	2663c <_realloc_r+0x13c>
   2677a:	6823      	ldr	r3, [r4, #0]
   2677c:	2a1b      	cmp	r2, #27
   2677e:	6003      	str	r3, [r0, #0]
   26780:	6863      	ldr	r3, [r4, #4]
   26782:	6043      	str	r3, [r0, #4]
   26784:	d829      	bhi.n	267da <_realloc_r+0x2da>
   26786:	f104 0208 	add.w	r2, r4, #8
   2678a:	f100 0308 	add.w	r3, r0, #8
   2678e:	e719      	b.n	265c4 <_realloc_r+0xc4>
   26790:	4657      	mov	r7, sl
   26792:	1f32      	subs	r2, r6, #4
   26794:	f8da 100c 	ldr.w	r1, [sl, #12]
   26798:	f857 0f08 	ldr.w	r0, [r7, #8]!
   2679c:	2a24      	cmp	r2, #36	; 0x24
   2679e:	60c1      	str	r1, [r0, #12]
   267a0:	6088      	str	r0, [r1, #8]
   267a2:	d827      	bhi.n	267f4 <_realloc_r+0x2f4>
   267a4:	2a13      	cmp	r2, #19
   267a6:	d923      	bls.n	267f0 <_realloc_r+0x2f0>
   267a8:	6821      	ldr	r1, [r4, #0]
   267aa:	2a1b      	cmp	r2, #27
   267ac:	f8ca 1008 	str.w	r1, [sl, #8]
   267b0:	6861      	ldr	r1, [r4, #4]
   267b2:	f8ca 100c 	str.w	r1, [sl, #12]
   267b6:	d843      	bhi.n	26840 <_realloc_r+0x340>
   267b8:	3408      	adds	r4, #8
   267ba:	f10a 0210 	add.w	r2, sl, #16
   267be:	6821      	ldr	r1, [r4, #0]
   267c0:	461e      	mov	r6, r3
   267c2:	46d1      	mov	r9, sl
   267c4:	6011      	str	r1, [r2, #0]
   267c6:	6863      	ldr	r3, [r4, #4]
   267c8:	6053      	str	r3, [r2, #4]
   267ca:	68a3      	ldr	r3, [r4, #8]
   267cc:	463c      	mov	r4, r7
   267ce:	6093      	str	r3, [r2, #8]
   267d0:	e734      	b.n	2663c <_realloc_r+0x13c>
   267d2:	4621      	mov	r1, r4
   267d4:	f004 fbd4 	bl	2af80 <memmove>
   267d8:	e6fa      	b.n	265d0 <_realloc_r+0xd0>
   267da:	68a3      	ldr	r3, [r4, #8]
   267dc:	2a24      	cmp	r2, #36	; 0x24
   267de:	6083      	str	r3, [r0, #8]
   267e0:	68e3      	ldr	r3, [r4, #12]
   267e2:	60c3      	str	r3, [r0, #12]
   267e4:	d03a      	beq.n	2685c <_realloc_r+0x35c>
   267e6:	f104 0210 	add.w	r2, r4, #16
   267ea:	f100 0310 	add.w	r3, r0, #16
   267ee:	e6e9      	b.n	265c4 <_realloc_r+0xc4>
   267f0:	463a      	mov	r2, r7
   267f2:	e7e4      	b.n	267be <_realloc_r+0x2be>
   267f4:	4621      	mov	r1, r4
   267f6:	4638      	mov	r0, r7
   267f8:	461e      	mov	r6, r3
   267fa:	46d1      	mov	r9, sl
   267fc:	463c      	mov	r4, r7
   267fe:	f004 fbbf 	bl	2af80 <memmove>
   26802:	e71b      	b.n	2663c <_realloc_r+0x13c>
   26804:	ebac 0205 	sub.w	r2, ip, r5
   26808:	eb09 0105 	add.w	r1, r9, r5
   2680c:	4640      	mov	r0, r8
   2680e:	4627      	mov	r7, r4
   26810:	f042 0201 	orr.w	r2, r2, #1
   26814:	6099      	str	r1, [r3, #8]
   26816:	604a      	str	r2, [r1, #4]
   26818:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2681c:	f003 0301 	and.w	r3, r3, #1
   26820:	431d      	orrs	r5, r3
   26822:	f844 5c04 	str.w	r5, [r4, #-4]
   26826:	f7ff fe5d 	bl	264e4 <__malloc_unlock>
   2682a:	e71b      	b.n	26664 <_realloc_r+0x164>
   2682c:	463b      	mov	r3, r7
   2682e:	e6fc      	b.n	2662a <_realloc_r+0x12a>
   26830:	4621      	mov	r1, r4
   26832:	4638      	mov	r0, r7
   26834:	4666      	mov	r6, ip
   26836:	46d1      	mov	r9, sl
   26838:	463c      	mov	r4, r7
   2683a:	f004 fba1 	bl	2af80 <memmove>
   2683e:	e6fd      	b.n	2663c <_realloc_r+0x13c>
   26840:	68a1      	ldr	r1, [r4, #8]
   26842:	2a24      	cmp	r2, #36	; 0x24
   26844:	f8ca 1010 	str.w	r1, [sl, #16]
   26848:	68e1      	ldr	r1, [r4, #12]
   2684a:	f8ca 1014 	str.w	r1, [sl, #20]
   2684e:	d022      	beq.n	26896 <_realloc_r+0x396>
   26850:	3410      	adds	r4, #16
   26852:	f10a 0218 	add.w	r2, sl, #24
   26856:	e7b2      	b.n	267be <_realloc_r+0x2be>
   26858:	200204dc 	.word	0x200204dc
   2685c:	6921      	ldr	r1, [r4, #16]
   2685e:	f104 0218 	add.w	r2, r4, #24
   26862:	f100 0318 	add.w	r3, r0, #24
   26866:	6101      	str	r1, [r0, #16]
   26868:	6961      	ldr	r1, [r4, #20]
   2686a:	6141      	str	r1, [r0, #20]
   2686c:	e6aa      	b.n	265c4 <_realloc_r+0xc4>
   2686e:	68a3      	ldr	r3, [r4, #8]
   26870:	2a24      	cmp	r2, #36	; 0x24
   26872:	f8ca 3010 	str.w	r3, [sl, #16]
   26876:	68e3      	ldr	r3, [r4, #12]
   26878:	f8ca 3014 	str.w	r3, [sl, #20]
   2687c:	d022      	beq.n	268c4 <_realloc_r+0x3c4>
   2687e:	3410      	adds	r4, #16
   26880:	f10a 0318 	add.w	r3, sl, #24
   26884:	e6d1      	b.n	2662a <_realloc_r+0x12a>
   26886:	463a      	mov	r2, r7
   26888:	e752      	b.n	26730 <_realloc_r+0x230>
   2688a:	4621      	mov	r1, r4
   2688c:	4638      	mov	r0, r7
   2688e:	f004 fb77 	bl	2af80 <memmove>
   26892:	4b17      	ldr	r3, [pc, #92]	; (268f0 <_realloc_r+0x3f0>)
   26894:	e752      	b.n	2673c <_realloc_r+0x23c>
   26896:	6921      	ldr	r1, [r4, #16]
   26898:	f10a 0220 	add.w	r2, sl, #32
   2689c:	3418      	adds	r4, #24
   2689e:	f8ca 1018 	str.w	r1, [sl, #24]
   268a2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   268a6:	f8ca 101c 	str.w	r1, [sl, #28]
   268aa:	e788      	b.n	267be <_realloc_r+0x2be>
   268ac:	68a1      	ldr	r1, [r4, #8]
   268ae:	2a24      	cmp	r2, #36	; 0x24
   268b0:	f8ca 1010 	str.w	r1, [sl, #16]
   268b4:	68e1      	ldr	r1, [r4, #12]
   268b6:	f8ca 1014 	str.w	r1, [sl, #20]
   268ba:	d00e      	beq.n	268da <_realloc_r+0x3da>
   268bc:	3410      	adds	r4, #16
   268be:	f10a 0218 	add.w	r2, sl, #24
   268c2:	e735      	b.n	26730 <_realloc_r+0x230>
   268c4:	6922      	ldr	r2, [r4, #16]
   268c6:	f10a 0320 	add.w	r3, sl, #32
   268ca:	3418      	adds	r4, #24
   268cc:	f8ca 2018 	str.w	r2, [sl, #24]
   268d0:	f854 2c04 	ldr.w	r2, [r4, #-4]
   268d4:	f8ca 201c 	str.w	r2, [sl, #28]
   268d8:	e6a7      	b.n	2662a <_realloc_r+0x12a>
   268da:	6921      	ldr	r1, [r4, #16]
   268dc:	f10a 0220 	add.w	r2, sl, #32
   268e0:	3418      	adds	r4, #24
   268e2:	f8ca 1018 	str.w	r1, [sl, #24]
   268e6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   268ea:	f8ca 101c 	str.w	r1, [sl, #28]
   268ee:	e71f      	b.n	26730 <_realloc_r+0x230>
   268f0:	200204dc 	.word	0x200204dc

000268f4 <_sbrk_r>:
   268f4:	b538      	push	{r3, r4, r5, lr}
   268f6:	2200      	movs	r2, #0
   268f8:	4d06      	ldr	r5, [pc, #24]	; (26914 <_sbrk_r+0x20>)
   268fa:	4604      	mov	r4, r0
   268fc:	4608      	mov	r0, r1
   268fe:	602a      	str	r2, [r5, #0]
   26900:	f7ee fd46 	bl	15390 <_sbrk>
   26904:	1c43      	adds	r3, r0, #1
   26906:	d000      	beq.n	2690a <_sbrk_r+0x16>
   26908:	bd38      	pop	{r3, r4, r5, pc}
   2690a:	682b      	ldr	r3, [r5, #0]
   2690c:	2b00      	cmp	r3, #0
   2690e:	d0fb      	beq.n	26908 <_sbrk_r+0x14>
   26910:	6023      	str	r3, [r4, #0]
   26912:	bd38      	pop	{r3, r4, r5, pc}
   26914:	20026430 	.word	0x20026430

00026918 <snprintf>:
   26918:	b40c      	push	{r2, r3}
   2691a:	4b20      	ldr	r3, [pc, #128]	; (2699c <snprintf+0x84>)
   2691c:	b570      	push	{r4, r5, r6, lr}
   2691e:	1e0c      	subs	r4, r1, #0
   26920:	b09c      	sub	sp, #112	; 0x70
   26922:	681d      	ldr	r5, [r3, #0]
   26924:	db35      	blt.n	26992 <snprintf+0x7a>
   26926:	f44f 7302 	mov.w	r3, #520	; 0x208
   2692a:	9002      	str	r0, [sp, #8]
   2692c:	9006      	str	r0, [sp, #24]
   2692e:	f8ad 3014 	strh.w	r3, [sp, #20]
   26932:	ab21      	add	r3, sp, #132	; 0x84
   26934:	d018      	beq.n	26968 <snprintf+0x50>
   26936:	1e61      	subs	r1, r4, #1
   26938:	f64f 74ff 	movw	r4, #65535	; 0xffff
   2693c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2693e:	4628      	mov	r0, r5
   26940:	9104      	str	r1, [sp, #16]
   26942:	9107      	str	r1, [sp, #28]
   26944:	a902      	add	r1, sp, #8
   26946:	9301      	str	r3, [sp, #4]
   26948:	f8ad 4016 	strh.w	r4, [sp, #22]
   2694c:	f7e7 ffb4 	bl	e8b8 <_svfprintf_r>
   26950:	1c42      	adds	r2, r0, #1
   26952:	da01      	bge.n	26958 <snprintf+0x40>
   26954:	238b      	movs	r3, #139	; 0x8b
   26956:	602b      	str	r3, [r5, #0]
   26958:	9b02      	ldr	r3, [sp, #8]
   2695a:	2200      	movs	r2, #0
   2695c:	701a      	strb	r2, [r3, #0]
   2695e:	b01c      	add	sp, #112	; 0x70
   26960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26964:	b002      	add	sp, #8
   26966:	4770      	bx	lr
   26968:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2696c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2696e:	a902      	add	r1, sp, #8
   26970:	4628      	mov	r0, r5
   26972:	9301      	str	r3, [sp, #4]
   26974:	9404      	str	r4, [sp, #16]
   26976:	9407      	str	r4, [sp, #28]
   26978:	f8ad 6016 	strh.w	r6, [sp, #22]
   2697c:	f7e7 ff9c 	bl	e8b8 <_svfprintf_r>
   26980:	1c43      	adds	r3, r0, #1
   26982:	da01      	bge.n	26988 <snprintf+0x70>
   26984:	238b      	movs	r3, #139	; 0x8b
   26986:	602b      	str	r3, [r5, #0]
   26988:	b01c      	add	sp, #112	; 0x70
   2698a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2698e:	b002      	add	sp, #8
   26990:	4770      	bx	lr
   26992:	238b      	movs	r3, #139	; 0x8b
   26994:	f04f 30ff 	mov.w	r0, #4294967295
   26998:	602b      	str	r3, [r5, #0]
   2699a:	e7f5      	b.n	26988 <snprintf+0x70>
   2699c:	200204d8 	.word	0x200204d8

000269a0 <__sprintf_chk>:
   269a0:	b408      	push	{r3}
   269a2:	b510      	push	{r4, lr}
   269a4:	b083      	sub	sp, #12
   269a6:	1e14      	subs	r4, r2, #0
   269a8:	ab05      	add	r3, sp, #20
   269aa:	f853 1b04 	ldr.w	r1, [r3], #4
   269ae:	9301      	str	r3, [sp, #4]
   269b0:	db0c      	blt.n	269cc <__sprintf_chk+0x2c>
   269b2:	460a      	mov	r2, r1
   269b4:	4621      	mov	r1, r4
   269b6:	f002 fffb 	bl	299b0 <vsnprintf>
   269ba:	2800      	cmp	r0, #0
   269bc:	db01      	blt.n	269c2 <__sprintf_chk+0x22>
   269be:	42a0      	cmp	r0, r4
   269c0:	d20c      	bcs.n	269dc <__sprintf_chk+0x3c>
   269c2:	b003      	add	sp, #12
   269c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   269c8:	b001      	add	sp, #4
   269ca:	4770      	bx	lr
   269cc:	461a      	mov	r2, r3
   269ce:	f003 f815 	bl	299fc <vsprintf>
   269d2:	b003      	add	sp, #12
   269d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   269d8:	b001      	add	sp, #4
   269da:	4770      	bx	lr
   269dc:	f7ee fcfa 	bl	153d4 <__chk_fail>

000269e0 <sscanf>:
   269e0:	b40e      	push	{r1, r2, r3}
   269e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   269e4:	b09e      	sub	sp, #120	; 0x78
   269e6:	f44f 7101 	mov.w	r1, #516	; 0x204
   269ea:	2500      	movs	r5, #0
   269ec:	4f10      	ldr	r7, [pc, #64]	; (26a30 <sscanf+0x50>)
   269ee:	ac23      	add	r4, sp, #140	; 0x8c
   269f0:	f8ad 101c 	strh.w	r1, [sp, #28]
   269f4:	9004      	str	r0, [sp, #16]
   269f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   269fa:	f854 2b04 	ldr.w	r2, [r4], #4
   269fe:	9008      	str	r0, [sp, #32]
   26a00:	9201      	str	r2, [sp, #4]
   26a02:	f000 f929 	bl	26c58 <strlen>
   26a06:	4b0b      	ldr	r3, [pc, #44]	; (26a34 <sscanf+0x54>)
   26a08:	4601      	mov	r1, r0
   26a0a:	9a01      	ldr	r2, [sp, #4]
   26a0c:	9105      	str	r1, [sp, #20]
   26a0e:	9109      	str	r1, [sp, #36]	; 0x24
   26a10:	a904      	add	r1, sp, #16
   26a12:	6818      	ldr	r0, [r3, #0]
   26a14:	4623      	mov	r3, r4
   26a16:	9403      	str	r4, [sp, #12]
   26a18:	970c      	str	r7, [sp, #48]	; 0x30
   26a1a:	9510      	str	r5, [sp, #64]	; 0x40
   26a1c:	9515      	str	r5, [sp, #84]	; 0x54
   26a1e:	f8ad 601e 	strh.w	r6, [sp, #30]
   26a22:	f000 fd11 	bl	27448 <__ssvfscanf_r>
   26a26:	b01e      	add	sp, #120	; 0x78
   26a28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   26a2c:	b003      	add	sp, #12
   26a2e:	4770      	bx	lr
   26a30:	00026a5d 	.word	0x00026a5d
   26a34:	200204d8 	.word	0x200204d8

00026a38 <__sread>:
   26a38:	b510      	push	{r4, lr}
   26a3a:	460c      	mov	r4, r1
   26a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26a40:	f004 ffb4 	bl	2b9ac <_read_r>
   26a44:	2800      	cmp	r0, #0
   26a46:	db03      	blt.n	26a50 <__sread+0x18>
   26a48:	6d23      	ldr	r3, [r4, #80]	; 0x50
   26a4a:	4403      	add	r3, r0
   26a4c:	6523      	str	r3, [r4, #80]	; 0x50
   26a4e:	bd10      	pop	{r4, pc}
   26a50:	89a3      	ldrh	r3, [r4, #12]
   26a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   26a56:	81a3      	strh	r3, [r4, #12]
   26a58:	bd10      	pop	{r4, pc}
   26a5a:	bf00      	nop

00026a5c <__seofread>:
   26a5c:	2000      	movs	r0, #0
   26a5e:	4770      	bx	lr

00026a60 <__swrite>:
   26a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a64:	460c      	mov	r4, r1
   26a66:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   26a6a:	461f      	mov	r7, r3
   26a6c:	4616      	mov	r6, r2
   26a6e:	05cb      	lsls	r3, r1, #23
   26a70:	4605      	mov	r5, r0
   26a72:	d40b      	bmi.n	26a8c <__swrite+0x2c>
   26a74:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   26a78:	463b      	mov	r3, r7
   26a7a:	4632      	mov	r2, r6
   26a7c:	4628      	mov	r0, r5
   26a7e:	81a1      	strh	r1, [r4, #12]
   26a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26a88:	f002 bfc4 	b.w	29a14 <_write_r>
   26a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26a90:	2302      	movs	r3, #2
   26a92:	2200      	movs	r2, #0
   26a94:	f004 f9aa 	bl	2adec <_lseek_r>
   26a98:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   26a9c:	e7ea      	b.n	26a74 <__swrite+0x14>
   26a9e:	bf00      	nop

00026aa0 <__sseek>:
   26aa0:	b510      	push	{r4, lr}
   26aa2:	460c      	mov	r4, r1
   26aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26aa8:	f004 f9a0 	bl	2adec <_lseek_r>
   26aac:	1c42      	adds	r2, r0, #1
   26aae:	89a3      	ldrh	r3, [r4, #12]
   26ab0:	d004      	beq.n	26abc <__sseek+0x1c>
   26ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   26ab6:	6520      	str	r0, [r4, #80]	; 0x50
   26ab8:	81a3      	strh	r3, [r4, #12]
   26aba:	bd10      	pop	{r4, pc}
   26abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   26ac0:	81a3      	strh	r3, [r4, #12]
   26ac2:	bd10      	pop	{r4, pc}

00026ac4 <__sclose>:
   26ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26ac8:	f003 b82a 	b.w	29b20 <_close_r>

00026acc <strchr>:
   26acc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   26ad0:	4603      	mov	r3, r0
   26ad2:	d044      	beq.n	26b5e <strchr+0x92>
   26ad4:	0782      	lsls	r2, r0, #30
   26ad6:	d132      	bne.n	26b3e <strchr+0x72>
   26ad8:	b470      	push	{r4, r5, r6}
   26ada:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   26ade:	6803      	ldr	r3, [r0, #0]
   26ae0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   26ae4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26ae8:	ea86 0403 	eor.w	r4, r6, r3
   26aec:	ea22 0203 	bic.w	r2, r2, r3
   26af0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   26af4:	ea23 0304 	bic.w	r3, r3, r4
   26af8:	4313      	orrs	r3, r2
   26afa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26afe:	d10f      	bne.n	26b20 <strchr+0x54>
   26b00:	f850 4f04 	ldr.w	r4, [r0, #4]!
   26b04:	ea84 0506 	eor.w	r5, r4, r6
   26b08:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   26b0c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   26b10:	ea23 0304 	bic.w	r3, r3, r4
   26b14:	ea22 0205 	bic.w	r2, r2, r5
   26b18:	4313      	orrs	r3, r2
   26b1a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26b1e:	d0ef      	beq.n	26b00 <strchr+0x34>
   26b20:	7803      	ldrb	r3, [r0, #0]
   26b22:	b923      	cbnz	r3, 26b2e <strchr+0x62>
   26b24:	e036      	b.n	26b94 <strchr+0xc8>
   26b26:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   26b2a:	2b00      	cmp	r3, #0
   26b2c:	d032      	beq.n	26b94 <strchr+0xc8>
   26b2e:	4299      	cmp	r1, r3
   26b30:	d1f9      	bne.n	26b26 <strchr+0x5a>
   26b32:	e030      	b.n	26b96 <strchr+0xca>
   26b34:	428a      	cmp	r2, r1
   26b36:	d011      	beq.n	26b5c <strchr+0x90>
   26b38:	079a      	lsls	r2, r3, #30
   26b3a:	4618      	mov	r0, r3
   26b3c:	d0cc      	beq.n	26ad8 <strchr+0xc>
   26b3e:	4618      	mov	r0, r3
   26b40:	f813 2b01 	ldrb.w	r2, [r3], #1
   26b44:	2a00      	cmp	r2, #0
   26b46:	d1f5      	bne.n	26b34 <strchr+0x68>
   26b48:	4610      	mov	r0, r2
   26b4a:	4770      	bx	lr
   26b4c:	0799      	lsls	r1, r3, #30
   26b4e:	4618      	mov	r0, r3
   26b50:	d007      	beq.n	26b62 <strchr+0x96>
   26b52:	4618      	mov	r0, r3
   26b54:	3301      	adds	r3, #1
   26b56:	7802      	ldrb	r2, [r0, #0]
   26b58:	2a00      	cmp	r2, #0
   26b5a:	d1f7      	bne.n	26b4c <strchr+0x80>
   26b5c:	4770      	bx	lr
   26b5e:	0782      	lsls	r2, r0, #30
   26b60:	d1f7      	bne.n	26b52 <strchr+0x86>
   26b62:	6802      	ldr	r2, [r0, #0]
   26b64:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   26b68:	ea23 0302 	bic.w	r3, r3, r2
   26b6c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26b70:	d108      	bne.n	26b84 <strchr+0xb8>
   26b72:	f850 2f04 	ldr.w	r2, [r0, #4]!
   26b76:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   26b7a:	ea23 0302 	bic.w	r3, r3, r2
   26b7e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26b82:	d0f6      	beq.n	26b72 <strchr+0xa6>
   26b84:	7803      	ldrb	r3, [r0, #0]
   26b86:	2b00      	cmp	r3, #0
   26b88:	d0e8      	beq.n	26b5c <strchr+0x90>
   26b8a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   26b8e:	2b00      	cmp	r3, #0
   26b90:	d1fb      	bne.n	26b8a <strchr+0xbe>
   26b92:	4770      	bx	lr
   26b94:	4618      	mov	r0, r3
   26b96:	bc70      	pop	{r4, r5, r6}
   26b98:	4770      	bx	lr
   26b9a:	bf00      	nop

00026b9c <strcpy>:
   26b9c:	ea80 0201 	eor.w	r2, r0, r1
   26ba0:	4684      	mov	ip, r0
   26ba2:	f012 0f03 	tst.w	r2, #3
   26ba6:	d14f      	bne.n	26c48 <strcpy+0xac>
   26ba8:	f011 0f03 	tst.w	r1, #3
   26bac:	d132      	bne.n	26c14 <strcpy+0x78>
   26bae:	f84d 4d04 	str.w	r4, [sp, #-4]!
   26bb2:	f011 0f04 	tst.w	r1, #4
   26bb6:	f851 3b04 	ldr.w	r3, [r1], #4
   26bba:	d00b      	beq.n	26bd4 <strcpy+0x38>
   26bbc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26bc0:	439a      	bics	r2, r3
   26bc2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26bc6:	bf04      	itt	eq
   26bc8:	f84c 3b04 	streq.w	r3, [ip], #4
   26bcc:	f851 3b04 	ldreq.w	r3, [r1], #4
   26bd0:	d116      	bne.n	26c00 <strcpy+0x64>
   26bd2:	bf00      	nop
   26bd4:	f851 4b04 	ldr.w	r4, [r1], #4
   26bd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26bdc:	439a      	bics	r2, r3
   26bde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26be2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   26be6:	d10b      	bne.n	26c00 <strcpy+0x64>
   26be8:	f84c 3b04 	str.w	r3, [ip], #4
   26bec:	43a2      	bics	r2, r4
   26bee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26bf2:	bf04      	itt	eq
   26bf4:	f851 3b04 	ldreq.w	r3, [r1], #4
   26bf8:	f84c 4b04 	streq.w	r4, [ip], #4
   26bfc:	d0ea      	beq.n	26bd4 <strcpy+0x38>
   26bfe:	4623      	mov	r3, r4
   26c00:	f80c 3b01 	strb.w	r3, [ip], #1
   26c04:	f013 0fff 	tst.w	r3, #255	; 0xff
   26c08:	ea4f 2333 	mov.w	r3, r3, ror #8
   26c0c:	d1f8      	bne.n	26c00 <strcpy+0x64>
   26c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   26c12:	4770      	bx	lr
   26c14:	f011 0f01 	tst.w	r1, #1
   26c18:	d006      	beq.n	26c28 <strcpy+0x8c>
   26c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   26c1e:	f80c 2b01 	strb.w	r2, [ip], #1
   26c22:	2a00      	cmp	r2, #0
   26c24:	bf08      	it	eq
   26c26:	4770      	bxeq	lr
   26c28:	f011 0f02 	tst.w	r1, #2
   26c2c:	d0bf      	beq.n	26bae <strcpy+0x12>
   26c2e:	f831 2b02 	ldrh.w	r2, [r1], #2
   26c32:	f012 0fff 	tst.w	r2, #255	; 0xff
   26c36:	bf16      	itet	ne
   26c38:	f82c 2b02 	strhne.w	r2, [ip], #2
   26c3c:	f88c 2000 	strbeq.w	r2, [ip]
   26c40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   26c44:	d1b3      	bne.n	26bae <strcpy+0x12>
   26c46:	4770      	bx	lr
   26c48:	f811 2b01 	ldrb.w	r2, [r1], #1
   26c4c:	f80c 2b01 	strb.w	r2, [ip], #1
   26c50:	2a00      	cmp	r2, #0
   26c52:	d1f9      	bne.n	26c48 <strcpy+0xac>
   26c54:	4770      	bx	lr
   26c56:	bf00      	nop

00026c58 <strlen>:
   26c58:	f020 0103 	bic.w	r1, r0, #3
   26c5c:	f010 0003 	ands.w	r0, r0, #3
   26c60:	f1c0 0000 	rsb	r0, r0, #0
   26c64:	f851 3b04 	ldr.w	r3, [r1], #4
   26c68:	f100 0c04 	add.w	ip, r0, #4
   26c6c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   26c70:	f06f 0200 	mvn.w	r2, #0
   26c74:	bf1c      	itt	ne
   26c76:	fa22 f20c 	lsrne.w	r2, r2, ip
   26c7a:	4313      	orrne	r3, r2
   26c7c:	f04f 0c01 	mov.w	ip, #1
   26c80:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   26c84:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   26c88:	eba3 020c 	sub.w	r2, r3, ip
   26c8c:	ea22 0203 	bic.w	r2, r2, r3
   26c90:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   26c94:	bf04      	itt	eq
   26c96:	f851 3b04 	ldreq.w	r3, [r1], #4
   26c9a:	3004      	addeq	r0, #4
   26c9c:	d0f4      	beq.n	26c88 <strlen+0x30>
   26c9e:	f1c2 0100 	rsb	r1, r2, #0
   26ca2:	ea02 0201 	and.w	r2, r2, r1
   26ca6:	fab2 f282 	clz	r2, r2
   26caa:	f1c2 021f 	rsb	r2, r2, #31
   26cae:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   26cb2:	4770      	bx	lr

00026cb4 <strncmp>:
   26cb4:	b3b2      	cbz	r2, 26d24 <strncmp+0x70>
   26cb6:	460b      	mov	r3, r1
   26cb8:	b4f0      	push	{r4, r5, r6, r7}
   26cba:	ea40 0501 	orr.w	r5, r0, r1
   26cbe:	4604      	mov	r4, r0
   26cc0:	07ad      	lsls	r5, r5, #30
   26cc2:	d029      	beq.n	26d18 <strncmp+0x64>
   26cc4:	7820      	ldrb	r0, [r4, #0]
   26cc6:	780e      	ldrb	r6, [r1, #0]
   26cc8:	4286      	cmp	r6, r0
   26cca:	d10f      	bne.n	26cec <strncmp+0x38>
   26ccc:	b33e      	cbz	r6, 26d1e <strncmp+0x6a>
   26cce:	2a01      	cmp	r2, #1
   26cd0:	d025      	beq.n	26d1e <strncmp+0x6a>
   26cd2:	4625      	mov	r5, r4
   26cd4:	e002      	b.n	26cdc <strncmp+0x28>
   26cd6:	42dc      	cmn	r4, r3
   26cd8:	d021      	beq.n	26d1e <strncmp+0x6a>
   26cda:	b300      	cbz	r0, 26d1e <strncmp+0x6a>
   26cdc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   26ce0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   26ce4:	43eb      	mvns	r3, r5
   26ce6:	42b0      	cmp	r0, r6
   26ce8:	4413      	add	r3, r2
   26cea:	d0f4      	beq.n	26cd6 <strncmp+0x22>
   26cec:	1b80      	subs	r0, r0, r6
   26cee:	bcf0      	pop	{r4, r5, r6, r7}
   26cf0:	4770      	bx	lr
   26cf2:	4619      	mov	r1, r3
   26cf4:	4604      	mov	r4, r0
   26cf6:	f850 5b04 	ldr.w	r5, [r0], #4
   26cfa:	3304      	adds	r3, #4
   26cfc:	680f      	ldr	r7, [r1, #0]
   26cfe:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   26d02:	42bd      	cmp	r5, r7
   26d04:	ea26 0505 	bic.w	r5, r6, r5
   26d08:	d1dc      	bne.n	26cc4 <strncmp+0x10>
   26d0a:	3a04      	subs	r2, #4
   26d0c:	4604      	mov	r4, r0
   26d0e:	4619      	mov	r1, r3
   26d10:	d005      	beq.n	26d1e <strncmp+0x6a>
   26d12:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   26d16:	d102      	bne.n	26d1e <strncmp+0x6a>
   26d18:	2a03      	cmp	r2, #3
   26d1a:	d8ea      	bhi.n	26cf2 <strncmp+0x3e>
   26d1c:	e7d2      	b.n	26cc4 <strncmp+0x10>
   26d1e:	2000      	movs	r0, #0
   26d20:	bcf0      	pop	{r4, r5, r6, r7}
   26d22:	4770      	bx	lr
   26d24:	4610      	mov	r0, r2
   26d26:	4770      	bx	lr

00026d28 <strncpy>:
   26d28:	b470      	push	{r4, r5, r6}
   26d2a:	ea40 0401 	orr.w	r4, r0, r1
   26d2e:	07a3      	lsls	r3, r4, #30
   26d30:	d101      	bne.n	26d36 <strncpy+0xe>
   26d32:	2a03      	cmp	r2, #3
   26d34:	d80f      	bhi.n	26d56 <strncpy+0x2e>
   26d36:	4604      	mov	r4, r0
   26d38:	1e4d      	subs	r5, r1, #1
   26d3a:	e007      	b.n	26d4c <strncpy+0x24>
   26d3c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   26d40:	1e56      	subs	r6, r2, #1
   26d42:	f803 1b01 	strb.w	r1, [r3], #1
   26d46:	b1c9      	cbz	r1, 26d7c <strncpy+0x54>
   26d48:	4632      	mov	r2, r6
   26d4a:	461c      	mov	r4, r3
   26d4c:	4623      	mov	r3, r4
   26d4e:	2a00      	cmp	r2, #0
   26d50:	d1f4      	bne.n	26d3c <strncpy+0x14>
   26d52:	bc70      	pop	{r4, r5, r6}
   26d54:	4770      	bx	lr
   26d56:	460b      	mov	r3, r1
   26d58:	4604      	mov	r4, r0
   26d5a:	4619      	mov	r1, r3
   26d5c:	f853 6b04 	ldr.w	r6, [r3], #4
   26d60:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   26d64:	ea25 0506 	bic.w	r5, r5, r6
   26d68:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   26d6c:	d1e4      	bne.n	26d38 <strncpy+0x10>
   26d6e:	3a04      	subs	r2, #4
   26d70:	4619      	mov	r1, r3
   26d72:	f844 6b04 	str.w	r6, [r4], #4
   26d76:	2a03      	cmp	r2, #3
   26d78:	d8ef      	bhi.n	26d5a <strncpy+0x32>
   26d7a:	e7dd      	b.n	26d38 <strncpy+0x10>
   26d7c:	2e00      	cmp	r6, #0
   26d7e:	d0e8      	beq.n	26d52 <strncpy+0x2a>
   26d80:	4422      	add	r2, r4
   26d82:	f803 1b01 	strb.w	r1, [r3], #1
   26d86:	4293      	cmp	r3, r2
   26d88:	d1fb      	bne.n	26d82 <strncpy+0x5a>
   26d8a:	bc70      	pop	{r4, r5, r6}
   26d8c:	4770      	bx	lr
   26d8e:	bf00      	nop

00026d90 <two_way_long_needle>:
   26d90:	2b01      	cmp	r3, #1
   26d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d96:	461d      	mov	r5, r3
   26d98:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   26d9c:	4682      	mov	sl, r0
   26d9e:	460f      	mov	r7, r1
   26da0:	4690      	mov	r8, r2
   26da2:	f04f 0301 	mov.w	r3, #1
   26da6:	f240 814d 	bls.w	27044 <two_way_long_needle+0x2b4>
   26daa:	2400      	movs	r4, #0
   26dac:	f04f 30ff 	mov.w	r0, #4294967295
   26db0:	4619      	mov	r1, r3
   26db2:	469c      	mov	ip, r3
   26db4:	e006      	b.n	26dc4 <two_way_long_needle+0x34>
   26db6:	eba3 0c00 	sub.w	ip, r3, r0
   26dba:	461c      	mov	r4, r3
   26dbc:	2101      	movs	r1, #1
   26dbe:	190b      	adds	r3, r1, r4
   26dc0:	429d      	cmp	r5, r3
   26dc2:	d910      	bls.n	26de6 <two_way_long_needle+0x56>
   26dc4:	eb08 0200 	add.w	r2, r8, r0
   26dc8:	f818 6003 	ldrb.w	r6, [r8, r3]
   26dcc:	5c52      	ldrb	r2, [r2, r1]
   26dce:	4296      	cmp	r6, r2
   26dd0:	d3f1      	bcc.n	26db6 <two_way_long_needle+0x26>
   26dd2:	f000 8083 	beq.w	26edc <two_way_long_needle+0x14c>
   26dd6:	f04f 0c01 	mov.w	ip, #1
   26dda:	4620      	mov	r0, r4
   26ddc:	4661      	mov	r1, ip
   26dde:	4464      	add	r4, ip
   26de0:	190b      	adds	r3, r1, r4
   26de2:	429d      	cmp	r5, r3
   26de4:	d8ee      	bhi.n	26dc4 <two_way_long_needle+0x34>
   26de6:	f8cd c004 	str.w	ip, [sp, #4]
   26dea:	f04f 0c01 	mov.w	ip, #1
   26dee:	2400      	movs	r4, #0
   26df0:	f04f 36ff 	mov.w	r6, #4294967295
   26df4:	4661      	mov	r1, ip
   26df6:	4663      	mov	r3, ip
   26df8:	e006      	b.n	26e08 <two_way_long_needle+0x78>
   26dfa:	eba3 0c06 	sub.w	ip, r3, r6
   26dfe:	461c      	mov	r4, r3
   26e00:	2101      	movs	r1, #1
   26e02:	1863      	adds	r3, r4, r1
   26e04:	429d      	cmp	r5, r3
   26e06:	d90f      	bls.n	26e28 <two_way_long_needle+0x98>
   26e08:	eb08 0201 	add.w	r2, r8, r1
   26e0c:	f818 e003 	ldrb.w	lr, [r8, r3]
   26e10:	5d92      	ldrb	r2, [r2, r6]
   26e12:	4596      	cmp	lr, r2
   26e14:	d8f1      	bhi.n	26dfa <two_way_long_needle+0x6a>
   26e16:	d069      	beq.n	26eec <two_way_long_needle+0x15c>
   26e18:	f04f 0c01 	mov.w	ip, #1
   26e1c:	4626      	mov	r6, r4
   26e1e:	4661      	mov	r1, ip
   26e20:	4464      	add	r4, ip
   26e22:	1863      	adds	r3, r4, r1
   26e24:	429d      	cmp	r5, r3
   26e26:	d8ef      	bhi.n	26e08 <two_way_long_needle+0x78>
   26e28:	3601      	adds	r6, #1
   26e2a:	f100 0b01 	add.w	fp, r0, #1
   26e2e:	45b3      	cmp	fp, r6
   26e30:	d802      	bhi.n	26e38 <two_way_long_needle+0xa8>
   26e32:	46b3      	mov	fp, r6
   26e34:	f8cd c004 	str.w	ip, [sp, #4]
   26e38:	ab05      	add	r3, sp, #20
   26e3a:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   26e3e:	f843 5f04 	str.w	r5, [r3, #4]!
   26e42:	4293      	cmp	r3, r2
   26e44:	d1fb      	bne.n	26e3e <two_way_long_needle+0xae>
   26e46:	2d00      	cmp	r5, #0
   26e48:	f000 80f7 	beq.w	2703a <two_way_long_needle+0x2aa>
   26e4c:	1e6c      	subs	r4, r5, #1
   26e4e:	ae06      	add	r6, sp, #24
   26e50:	f108 32ff 	add.w	r2, r8, #4294967295
   26e54:	eb08 0004 	add.w	r0, r8, r4
   26e58:	9600      	str	r6, [sp, #0]
   26e5a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   26e5e:	43d3      	mvns	r3, r2
   26e60:	4282      	cmp	r2, r0
   26e62:	442b      	add	r3, r5
   26e64:	4443      	add	r3, r8
   26e66:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
   26e6a:	d1f6      	bne.n	26e5a <two_way_long_needle+0xca>
   26e6c:	9e01      	ldr	r6, [sp, #4]
   26e6e:	465a      	mov	r2, fp
   26e70:	4640      	mov	r0, r8
   26e72:	eb08 0106 	add.w	r1, r8, r6
   26e76:	f7ff fab1 	bl	263dc <memcmp>
   26e7a:	2800      	cmp	r0, #0
   26e7c:	f040 8089 	bne.w	26f92 <two_way_long_needle+0x202>
   26e80:	f10b 33ff 	add.w	r3, fp, #4294967295
   26e84:	4681      	mov	r9, r0
   26e86:	f8cd 8008 	str.w	r8, [sp, #8]
   26e8a:	9305      	str	r3, [sp, #20]
   26e8c:	1bab      	subs	r3, r5, r6
   26e8e:	4606      	mov	r6, r0
   26e90:	9303      	str	r3, [sp, #12]
   26e92:	eb0a 0806 	add.w	r8, sl, r6
   26e96:	9a00      	ldr	r2, [sp, #0]
   26e98:	f818 3004 	ldrb.w	r3, [r8, r4]
   26e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   26ea0:	b35b      	cbz	r3, 26efa <two_way_long_needle+0x16a>
   26ea2:	f1b9 0f00 	cmp.w	r9, #0
   26ea6:	d004      	beq.n	26eb2 <two_way_long_needle+0x122>
   26ea8:	9a01      	ldr	r2, [sp, #4]
   26eaa:	4293      	cmp	r3, r2
   26eac:	9a03      	ldr	r2, [sp, #12]
   26eae:	bf38      	it	cc
   26eb0:	4613      	movcc	r3, r2
   26eb2:	441e      	add	r6, r3
   26eb4:	f04f 0900 	mov.w	r9, #0
   26eb8:	1b7b      	subs	r3, r7, r5
   26eba:	42b3      	cmp	r3, r6
   26ebc:	d2e9      	bcs.n	26e92 <two_way_long_needle+0x102>
   26ebe:	eb0a 0007 	add.w	r0, sl, r7
   26ec2:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
   26ec6:	f004 fe75 	bl	2bbb4 <strnlen>
   26eca:	4407      	add	r7, r0
   26ecc:	1b7b      	subs	r3, r7, r5
   26ece:	42b3      	cmp	r3, r6
   26ed0:	d2df      	bcs.n	26e92 <two_way_long_needle+0x102>
   26ed2:	2000      	movs	r0, #0
   26ed4:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   26ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26edc:	458c      	cmp	ip, r1
   26ede:	f101 0101 	add.w	r1, r1, #1
   26ee2:	f47f af6c 	bne.w	26dbe <two_way_long_needle+0x2e>
   26ee6:	4464      	add	r4, ip
   26ee8:	2101      	movs	r1, #1
   26eea:	e768      	b.n	26dbe <two_way_long_needle+0x2e>
   26eec:	458c      	cmp	ip, r1
   26eee:	f101 0101 	add.w	r1, r1, #1
   26ef2:	d186      	bne.n	26e02 <two_way_long_needle+0x72>
   26ef4:	4464      	add	r4, ip
   26ef6:	2101      	movs	r1, #1
   26ef8:	e783      	b.n	26e02 <two_way_long_needle+0x72>
   26efa:	45cb      	cmp	fp, r9
   26efc:	465b      	mov	r3, fp
   26efe:	bf38      	it	cc
   26f00:	464b      	movcc	r3, r9
   26f02:	42a3      	cmp	r3, r4
   26f04:	d215      	bcs.n	26f32 <two_way_long_needle+0x1a2>
   26f06:	1e59      	subs	r1, r3, #1
   26f08:	199a      	adds	r2, r3, r6
   26f0a:	9802      	ldr	r0, [sp, #8]
   26f0c:	4452      	add	r2, sl
   26f0e:	4401      	add	r1, r0
   26f10:	e002      	b.n	26f18 <two_way_long_needle+0x188>
   26f12:	3301      	adds	r3, #1
   26f14:	42a3      	cmp	r3, r4
   26f16:	d20c      	bcs.n	26f32 <two_way_long_needle+0x1a2>
   26f18:	f812 0b01 	ldrb.w	r0, [r2], #1
   26f1c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   26f20:	4584      	cmp	ip, r0
   26f22:	d0f6      	beq.n	26f12 <two_way_long_needle+0x182>
   26f24:	f1cb 0201 	rsb	r2, fp, #1
   26f28:	f04f 0900 	mov.w	r9, #0
   26f2c:	4416      	add	r6, r2
   26f2e:	441e      	add	r6, r3
   26f30:	e7c2      	b.n	26eb8 <two_way_long_needle+0x128>
   26f32:	45cb      	cmp	fp, r9
   26f34:	9b05      	ldr	r3, [sp, #20]
   26f36:	d97e      	bls.n	27036 <two_way_long_needle+0x2a6>
   26f38:	eb0b 0206 	add.w	r2, fp, r6
   26f3c:	9902      	ldr	r1, [sp, #8]
   26f3e:	f8cd b010 	str.w	fp, [sp, #16]
   26f42:	4459      	add	r1, fp
   26f44:	4452      	add	r2, sl
   26f46:	e002      	b.n	26f4e <two_way_long_needle+0x1be>
   26f48:	454b      	cmp	r3, r9
   26f4a:	4673      	mov	r3, lr
   26f4c:	d015      	beq.n	26f7a <two_way_long_needle+0x1ea>
   26f4e:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
   26f52:	f103 0b01 	add.w	fp, r3, #1
   26f56:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   26f5a:	f103 3eff 	add.w	lr, r3, #4294967295
   26f5e:	4584      	cmp	ip, r0
   26f60:	d0f2      	beq.n	26f48 <two_way_long_needle+0x1b8>
   26f62:	465b      	mov	r3, fp
   26f64:	f8dd b010 	ldr.w	fp, [sp, #16]
   26f68:	f109 0901 	add.w	r9, r9, #1
   26f6c:	4599      	cmp	r9, r3
   26f6e:	d80b      	bhi.n	26f88 <two_way_long_needle+0x1f8>
   26f70:	9b01      	ldr	r3, [sp, #4]
   26f72:	f8dd 900c 	ldr.w	r9, [sp, #12]
   26f76:	441e      	add	r6, r3
   26f78:	e79e      	b.n	26eb8 <two_way_long_needle+0x128>
   26f7a:	464b      	mov	r3, r9
   26f7c:	f109 0901 	add.w	r9, r9, #1
   26f80:	f8dd b010 	ldr.w	fp, [sp, #16]
   26f84:	4599      	cmp	r9, r3
   26f86:	d9f3      	bls.n	26f70 <two_way_long_needle+0x1e0>
   26f88:	4640      	mov	r0, r8
   26f8a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   26f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f92:	eba5 030b 	sub.w	r3, r5, fp
   26f96:	f10b 32ff 	add.w	r2, fp, #4294967295
   26f9a:	2600      	movs	r6, #0
   26f9c:	f445 6900 	orr.w	r9, r5, #2048	; 0x800
   26fa0:	455b      	cmp	r3, fp
   26fa2:	9201      	str	r2, [sp, #4]
   26fa4:	f1cb 0201 	rsb	r2, fp, #1
   26fa8:	bf38      	it	cc
   26faa:	465b      	movcc	r3, fp
   26fac:	9202      	str	r2, [sp, #8]
   26fae:	3301      	adds	r3, #1
   26fb0:	9303      	str	r3, [sp, #12]
   26fb2:	eb0a 0006 	add.w	r0, sl, r6
   26fb6:	9a00      	ldr	r2, [sp, #0]
   26fb8:	5d03      	ldrb	r3, [r0, r4]
   26fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   26fbe:	b16b      	cbz	r3, 26fdc <two_way_long_needle+0x24c>
   26fc0:	441e      	add	r6, r3
   26fc2:	1b7b      	subs	r3, r7, r5
   26fc4:	429e      	cmp	r6, r3
   26fc6:	d9f4      	bls.n	26fb2 <two_way_long_needle+0x222>
   26fc8:	eb0a 0007 	add.w	r0, sl, r7
   26fcc:	4649      	mov	r1, r9
   26fce:	f004 fdf1 	bl	2bbb4 <strnlen>
   26fd2:	4407      	add	r7, r0
   26fd4:	1b7b      	subs	r3, r7, r5
   26fd6:	429e      	cmp	r6, r3
   26fd8:	d9eb      	bls.n	26fb2 <two_way_long_needle+0x222>
   26fda:	e77a      	b.n	26ed2 <two_way_long_needle+0x142>
   26fdc:	45a3      	cmp	fp, r4
   26fde:	d214      	bcs.n	2700a <two_way_long_needle+0x27a>
   26fe0:	9b01      	ldr	r3, [sp, #4]
   26fe2:	eb0b 0206 	add.w	r2, fp, r6
   26fe6:	eb08 0c03 	add.w	ip, r8, r3
   26fea:	4452      	add	r2, sl
   26fec:	465b      	mov	r3, fp
   26fee:	e002      	b.n	26ff6 <two_way_long_needle+0x266>
   26ff0:	3301      	adds	r3, #1
   26ff2:	42a3      	cmp	r3, r4
   26ff4:	d209      	bcs.n	2700a <two_way_long_needle+0x27a>
   26ff6:	f812 1b01 	ldrb.w	r1, [r2], #1
   26ffa:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   26ffe:	458e      	cmp	lr, r1
   27000:	d0f6      	beq.n	26ff0 <two_way_long_needle+0x260>
   27002:	9a02      	ldr	r2, [sp, #8]
   27004:	4416      	add	r6, r2
   27006:	441e      	add	r6, r3
   27008:	e7db      	b.n	26fc2 <two_way_long_needle+0x232>
   2700a:	f1bb 0f00 	cmp.w	fp, #0
   2700e:	f43f af61 	beq.w	26ed4 <two_way_long_needle+0x144>
   27012:	eb0b 0c06 	add.w	ip, fp, r6
   27016:	eb08 020b 	add.w	r2, r8, fp
   2701a:	44d4      	add	ip, sl
   2701c:	e002      	b.n	27024 <two_way_long_needle+0x294>
   2701e:	4543      	cmp	r3, r8
   27020:	f43f af58 	beq.w	26ed4 <two_way_long_needle+0x144>
   27024:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   27028:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   2702c:	4613      	mov	r3, r2
   2702e:	458e      	cmp	lr, r1
   27030:	d0f5      	beq.n	2701e <two_way_long_needle+0x28e>
   27032:	9b03      	ldr	r3, [sp, #12]
   27034:	e7c4      	b.n	26fc0 <two_way_long_needle+0x230>
   27036:	465b      	mov	r3, fp
   27038:	e796      	b.n	26f68 <two_way_long_needle+0x1d8>
   2703a:	ab06      	add	r3, sp, #24
   2703c:	f04f 34ff 	mov.w	r4, #4294967295
   27040:	9300      	str	r3, [sp, #0]
   27042:	e713      	b.n	26e6c <two_way_long_needle+0xdc>
   27044:	f04f 0b00 	mov.w	fp, #0
   27048:	9301      	str	r3, [sp, #4]
   2704a:	e6f5      	b.n	26e38 <two_way_long_needle+0xa8>

0002704c <strstr>:
   2704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27050:	460e      	mov	r6, r1
   27052:	7809      	ldrb	r1, [r1, #0]
   27054:	b090      	sub	sp, #64	; 0x40
   27056:	4604      	mov	r4, r0
   27058:	2900      	cmp	r1, #0
   2705a:	d051      	beq.n	27100 <strstr+0xb4>
   2705c:	7875      	ldrb	r5, [r6, #1]
   2705e:	2d00      	cmp	r5, #0
   27060:	f000 8083 	beq.w	2716a <strstr+0x11e>
   27064:	78b3      	ldrb	r3, [r6, #2]
   27066:	2b00      	cmp	r3, #0
   27068:	d04e      	beq.n	27108 <strstr+0xbc>
   2706a:	78f2      	ldrb	r2, [r6, #3]
   2706c:	2a00      	cmp	r2, #0
   2706e:	f000 8085 	beq.w	2717c <strstr+0x130>
   27072:	7933      	ldrb	r3, [r6, #4]
   27074:	2b00      	cmp	r3, #0
   27076:	d05b      	beq.n	27130 <strstr+0xe4>
   27078:	4630      	mov	r0, r6
   2707a:	f7ff fded 	bl	26c58 <strlen>
   2707e:	4607      	mov	r7, r0
   27080:	4620      	mov	r0, r4
   27082:	f447 7100 	orr.w	r1, r7, #512	; 0x200
   27086:	f004 fd95 	bl	2bbb4 <strnlen>
   2708a:	4287      	cmp	r7, r0
   2708c:	d84b      	bhi.n	27126 <strstr+0xda>
   2708e:	2ffe      	cmp	r7, #254	; 0xfe
   27090:	f200 808f 	bhi.w	271b2 <strstr+0x166>
   27094:	eba0 0807 	sub.w	r8, r0, r7
   27098:	2240      	movs	r2, #64	; 0x40
   2709a:	1c79      	adds	r1, r7, #1
   2709c:	4668      	mov	r0, sp
   2709e:	44a0      	add	r8, r4
   270a0:	f7ff f9ca 	bl	26438 <memset>
   270a4:	b17f      	cbz	r7, 270c6 <strstr+0x7a>
   270a6:	1e72      	subs	r2, r6, #1
   270a8:	b2fd      	uxtb	r5, r7
   270aa:	19d0      	adds	r0, r2, r7
   270ac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   270b0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   270b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   270b8:	1ab1      	subs	r1, r6, r2
   270ba:	4282      	cmp	r2, r0
   270bc:	4463      	add	r3, ip
   270be:	4429      	add	r1, r5
   270c0:	f803 1c40 	strb.w	r1, [r3, #-64]
   270c4:	d1f2      	bne.n	270ac <strstr+0x60>
   270c6:	3c01      	subs	r4, #1
   270c8:	aa10      	add	r2, sp, #64	; 0x40
   270ca:	5de3      	ldrb	r3, [r4, r7]
   270cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   270d0:	4413      	add	r3, r2
   270d2:	f813 0c40 	ldrb.w	r0, [r3, #-64]
   270d6:	4404      	add	r4, r0
   270d8:	45a0      	cmp	r8, r4
   270da:	d203      	bcs.n	270e4 <strstr+0x98>
   270dc:	e037      	b.n	2714e <strstr+0x102>
   270de:	442c      	add	r4, r5
   270e0:	45a0      	cmp	r8, r4
   270e2:	d334      	bcc.n	2714e <strstr+0x102>
   270e4:	5de5      	ldrb	r5, [r4, r7]
   270e6:	ab10      	add	r3, sp, #64	; 0x40
   270e8:	463a      	mov	r2, r7
   270ea:	4631      	mov	r1, r6
   270ec:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   270f0:	4620      	mov	r0, r4
   270f2:	441d      	add	r5, r3
   270f4:	f815 5c40 	ldrb.w	r5, [r5, #-64]
   270f8:	f7ff f970 	bl	263dc <memcmp>
   270fc:	2800      	cmp	r0, #0
   270fe:	d1ee      	bne.n	270de <strstr+0x92>
   27100:	4620      	mov	r0, r4
   27102:	b010      	add	sp, #64	; 0x40
   27104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27108:	7802      	ldrb	r2, [r0, #0]
   2710a:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   2710e:	b152      	cbz	r2, 27126 <strstr+0xda>
   27110:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   27114:	4620      	mov	r0, r4
   27116:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   2711a:	4299      	cmp	r1, r3
   2711c:	d02c      	beq.n	27178 <strstr+0x12c>
   2711e:	2a00      	cmp	r2, #0
   27120:	d1f6      	bne.n	27110 <strstr+0xc4>
   27122:	4299      	cmp	r1, r3
   27124:	d028      	beq.n	27178 <strstr+0x12c>
   27126:	2400      	movs	r4, #0
   27128:	4620      	mov	r0, r4
   2712a:	b010      	add	sp, #64	; 0x40
   2712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27130:	7802      	ldrb	r2, [r0, #0]
   27132:	2a00      	cmp	r2, #0
   27134:	d0f7      	beq.n	27126 <strstr+0xda>
   27136:	6831      	ldr	r1, [r6, #0]
   27138:	ba09      	rev	r1, r1
   2713a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2713e:	4620      	mov	r0, r4
   27140:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   27144:	b392      	cbz	r2, 271ac <strstr+0x160>
   27146:	428b      	cmp	r3, r1
   27148:	d1f7      	bne.n	2713a <strstr+0xee>
   2714a:	1ec4      	subs	r4, r0, #3
   2714c:	e7d8      	b.n	27100 <strstr+0xb4>
   2714e:	f818 3007 	ldrb.w	r3, [r8, r7]
   27152:	eb08 0007 	add.w	r0, r8, r7
   27156:	2b00      	cmp	r3, #0
   27158:	d0e5      	beq.n	27126 <strstr+0xda>
   2715a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2715e:	f004 fd29 	bl	2bbb4 <strnlen>
   27162:	4480      	add	r8, r0
   27164:	45a0      	cmp	r8, r4
   27166:	d2ae      	bcs.n	270c6 <strstr+0x7a>
   27168:	e7dd      	b.n	27126 <strstr+0xda>
   2716a:	f7ff fcaf 	bl	26acc <strchr>
   2716e:	4604      	mov	r4, r0
   27170:	4620      	mov	r0, r4
   27172:	b010      	add	sp, #64	; 0x40
   27174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27178:	1e44      	subs	r4, r0, #1
   2717a:	e7c1      	b.n	27100 <strstr+0xb4>
   2717c:	042d      	lsls	r5, r5, #16
   2717e:	7806      	ldrb	r6, [r0, #0]
   27180:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
   27184:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   27188:	2e00      	cmp	r6, #0
   2718a:	d0cc      	beq.n	27126 <strstr+0xda>
   2718c:	ea46 0102 	orr.w	r1, r6, r2
   27190:	4620      	mov	r0, r4
   27192:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   27196:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
   2719a:	ea4f 2201 	mov.w	r2, r1, lsl #8
   2719e:	d001      	beq.n	271a4 <strstr+0x158>
   271a0:	2e00      	cmp	r6, #0
   271a2:	d1f3      	bne.n	2718c <strstr+0x140>
   271a4:	4293      	cmp	r3, r2
   271a6:	d1be      	bne.n	27126 <strstr+0xda>
   271a8:	1e84      	subs	r4, r0, #2
   271aa:	e7a9      	b.n	27100 <strstr+0xb4>
   271ac:	428b      	cmp	r3, r1
   271ae:	d1ba      	bne.n	27126 <strstr+0xda>
   271b0:	e7cb      	b.n	2714a <strstr+0xfe>
   271b2:	4601      	mov	r1, r0
   271b4:	463b      	mov	r3, r7
   271b6:	4620      	mov	r0, r4
   271b8:	4632      	mov	r2, r6
   271ba:	f7ff fde9 	bl	26d90 <two_way_long_needle>
   271be:	4604      	mov	r4, r0
   271c0:	e79e      	b.n	27100 <strstr+0xb4>
   271c2:	bf00      	nop

000271c4 <sulp>:
   271c4:	b570      	push	{r4, r5, r6, lr}
   271c6:	4604      	mov	r4, r0
   271c8:	460d      	mov	r5, r1
   271ca:	4616      	mov	r6, r2
   271cc:	ec45 4b10 	vmov	d0, r4, r5
   271d0:	f004 fa76 	bl	2b6c0 <__ulp>
   271d4:	ec51 0b10 	vmov	r0, r1, d0
   271d8:	b16e      	cbz	r6, 271f6 <sulp+0x32>
   271da:	f3c5 530a 	ubfx	r3, r5, #20, #11
   271de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   271e2:	2b00      	cmp	r3, #0
   271e4:	dd07      	ble.n	271f6 <sulp+0x32>
   271e6:	4a04      	ldr	r2, [pc, #16]	; (271f8 <sulp+0x34>)
   271e8:	2400      	movs	r4, #0
   271ea:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   271ee:	4622      	mov	r2, r4
   271f0:	462b      	mov	r3, r5
   271f2:	f7e5 fdff 	bl	cdf4 <__aeabi_dmul>
   271f6:	bd70      	pop	{r4, r5, r6, pc}
   271f8:	3ff00000 	.word	0x3ff00000

000271fc <_strtod_r>:
   271fc:	4b01      	ldr	r3, [pc, #4]	; (27204 <_strtod_r+0x8>)
   271fe:	f7e6 bbdb 	b.w	d9b8 <_strtod_l>
   27202:	bf00      	nop
   27204:	200208f0 	.word	0x200208f0

00027208 <_strtol_l.isra.0>:
   27208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2720c:	4682      	mov	sl, r0
   2720e:	460d      	mov	r5, r1
   27210:	4839      	ldr	r0, [pc, #228]	; (272f8 <_strtol_l.isra.0+0xf0>)
   27212:	462f      	mov	r7, r5
   27214:	f815 4b01 	ldrb.w	r4, [r5], #1
   27218:	5d06      	ldrb	r6, [r0, r4]
   2721a:	f016 0608 	ands.w	r6, r6, #8
   2721e:	d1f8      	bne.n	27212 <_strtol_l.isra.0+0xa>
   27220:	2c2d      	cmp	r4, #45	; 0x2d
   27222:	d04d      	beq.n	272c0 <_strtol_l.isra.0+0xb8>
   27224:	2c2b      	cmp	r4, #43	; 0x2b
   27226:	d03a      	beq.n	2729e <_strtol_l.isra.0+0x96>
   27228:	46a3      	mov	fp, r4
   2722a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2722e:	f033 0010 	bics.w	r0, r3, #16
   27232:	d104      	bne.n	2723e <_strtol_l.isra.0+0x36>
   27234:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   27238:	d049      	beq.n	272ce <_strtol_l.isra.0+0xc6>
   2723a:	b903      	cbnz	r3, 2723e <_strtol_l.isra.0+0x36>
   2723c:	230a      	movs	r3, #10
   2723e:	469e      	mov	lr, r3
   27240:	2700      	movs	r7, #0
   27242:	fbb9 fcfe 	udiv	ip, r9, lr
   27246:	4638      	mov	r0, r7
   27248:	fb0e 981c 	mls	r8, lr, ip, r9
   2724c:	e00e      	b.n	2726c <_strtol_l.isra.0+0x64>
   2724e:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
   27252:	42a3      	cmp	r3, r4
   27254:	dd1a      	ble.n	2728c <_strtol_l.isra.0+0x84>
   27256:	2f00      	cmp	r7, #0
   27258:	db04      	blt.n	27264 <_strtol_l.isra.0+0x5c>
   2725a:	4584      	cmp	ip, r0
   2725c:	d302      	bcc.n	27264 <_strtol_l.isra.0+0x5c>
   2725e:	d124      	bne.n	272aa <_strtol_l.isra.0+0xa2>
   27260:	45a0      	cmp	r8, r4
   27262:	da22      	bge.n	272aa <_strtol_l.isra.0+0xa2>
   27264:	f04f 37ff 	mov.w	r7, #4294967295
   27268:	f815 bb01 	ldrb.w	fp, [r5], #1
   2726c:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
   27270:	2c09      	cmp	r4, #9
   27272:	d9ee      	bls.n	27252 <_strtol_l.isra.0+0x4a>
   27274:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
   27278:	2c19      	cmp	r4, #25
   2727a:	d9e8      	bls.n	2724e <_strtol_l.isra.0+0x46>
   2727c:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
   27280:	2c19      	cmp	r4, #25
   27282:	d803      	bhi.n	2728c <_strtol_l.isra.0+0x84>
   27284:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
   27288:	42a3      	cmp	r3, r4
   2728a:	dce4      	bgt.n	27256 <_strtol_l.isra.0+0x4e>
   2728c:	1c7b      	adds	r3, r7, #1
   2728e:	d010      	beq.n	272b2 <_strtol_l.isra.0+0xaa>
   27290:	b106      	cbz	r6, 27294 <_strtol_l.isra.0+0x8c>
   27292:	4240      	negs	r0, r0
   27294:	b10a      	cbz	r2, 2729a <_strtol_l.isra.0+0x92>
   27296:	bb6f      	cbnz	r7, 272f4 <_strtol_l.isra.0+0xec>
   27298:	6011      	str	r1, [r2, #0]
   2729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2729e:	f895 b000 	ldrb.w	fp, [r5]
   272a2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   272a6:	1cbd      	adds	r5, r7, #2
   272a8:	e7c1      	b.n	2722e <_strtol_l.isra.0+0x26>
   272aa:	fb0e 4000 	mla	r0, lr, r0, r4
   272ae:	2701      	movs	r7, #1
   272b0:	e7da      	b.n	27268 <_strtol_l.isra.0+0x60>
   272b2:	2322      	movs	r3, #34	; 0x22
   272b4:	f8ca 3000 	str.w	r3, [sl]
   272b8:	b1a2      	cbz	r2, 272e4 <_strtol_l.isra.0+0xdc>
   272ba:	1e69      	subs	r1, r5, #1
   272bc:	4648      	mov	r0, r9
   272be:	e7eb      	b.n	27298 <_strtol_l.isra.0+0x90>
   272c0:	f895 b000 	ldrb.w	fp, [r5]
   272c4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   272c8:	1cbd      	adds	r5, r7, #2
   272ca:	2601      	movs	r6, #1
   272cc:	e7af      	b.n	2722e <_strtol_l.isra.0+0x26>
   272ce:	7828      	ldrb	r0, [r5, #0]
   272d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   272d4:	2858      	cmp	r0, #88	; 0x58
   272d6:	d108      	bne.n	272ea <_strtol_l.isra.0+0xe2>
   272d8:	2310      	movs	r3, #16
   272da:	f895 b001 	ldrb.w	fp, [r5, #1]
   272de:	3502      	adds	r5, #2
   272e0:	469e      	mov	lr, r3
   272e2:	e7ad      	b.n	27240 <_strtol_l.isra.0+0x38>
   272e4:	4648      	mov	r0, r9
   272e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272ea:	2b00      	cmp	r3, #0
   272ec:	d1a7      	bne.n	2723e <_strtol_l.isra.0+0x36>
   272ee:	2308      	movs	r3, #8
   272f0:	469e      	mov	lr, r3
   272f2:	e7a5      	b.n	27240 <_strtol_l.isra.0+0x38>
   272f4:	4681      	mov	r9, r0
   272f6:	e7e0      	b.n	272ba <_strtol_l.isra.0+0xb2>
   272f8:	0002f9a1 	.word	0x0002f9a1

000272fc <_strtol_r>:
   272fc:	f7ff bf84 	b.w	27208 <_strtol_l.isra.0>

00027300 <strtol>:
   27300:	b430      	push	{r4, r5}
   27302:	460d      	mov	r5, r1
   27304:	4c03      	ldr	r4, [pc, #12]	; (27314 <strtol+0x14>)
   27306:	4613      	mov	r3, r2
   27308:	4601      	mov	r1, r0
   2730a:	462a      	mov	r2, r5
   2730c:	6820      	ldr	r0, [r4, #0]
   2730e:	bc30      	pop	{r4, r5}
   27310:	f7ff bf7a 	b.w	27208 <_strtol_l.isra.0>
   27314:	200204d8 	.word	0x200204d8

00027318 <_strtoul_l.isra.0>:
   27318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2731c:	468c      	mov	ip, r1
   2731e:	4686      	mov	lr, r0
   27320:	4840      	ldr	r0, [pc, #256]	; (27424 <_strtoul_l.isra.0+0x10c>)
   27322:	4667      	mov	r7, ip
   27324:	f81c 4b01 	ldrb.w	r4, [ip], #1
   27328:	5d06      	ldrb	r6, [r0, r4]
   2732a:	f016 0608 	ands.w	r6, r6, #8
   2732e:	d1f8      	bne.n	27322 <_strtoul_l.isra.0+0xa>
   27330:	2c2d      	cmp	r4, #45	; 0x2d
   27332:	d057      	beq.n	273e4 <_strtoul_l.isra.0+0xcc>
   27334:	2c2b      	cmp	r4, #43	; 0x2b
   27336:	d00d      	beq.n	27354 <_strtoul_l.isra.0+0x3c>
   27338:	4625      	mov	r5, r4
   2733a:	f033 0010 	bics.w	r0, r3, #16
   2733e:	d110      	bne.n	27362 <_strtoul_l.isra.0+0x4a>
   27340:	2d30      	cmp	r5, #48	; 0x30
   27342:	d055      	beq.n	273f0 <_strtoul_l.isra.0+0xd8>
   27344:	b96b      	cbnz	r3, 27362 <_strtoul_l.isra.0+0x4a>
   27346:	230a      	movs	r3, #10
   27348:	f04f 0905 	mov.w	r9, #5
   2734c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 27428 <_strtoul_l.isra.0+0x110>
   27350:	469a      	mov	sl, r3
   27352:	e00f      	b.n	27374 <_strtoul_l.isra.0+0x5c>
   27354:	f033 0010 	bics.w	r0, r3, #16
   27358:	f89c 5000 	ldrb.w	r5, [ip]
   2735c:	f107 0c02 	add.w	ip, r7, #2
   27360:	d0ee      	beq.n	27340 <_strtoul_l.isra.0+0x28>
   27362:	f04f 38ff 	mov.w	r8, #4294967295
   27366:	469a      	mov	sl, r3
   27368:	fbb8 f8f3 	udiv	r8, r8, r3
   2736c:	fb03 f908 	mul.w	r9, r3, r8
   27370:	ea6f 0909 	mvn.w	r9, r9
   27374:	2700      	movs	r7, #0
   27376:	4638      	mov	r0, r7
   27378:	e00e      	b.n	27398 <_strtoul_l.isra.0+0x80>
   2737a:	f1a5 0437 	sub.w	r4, r5, #55	; 0x37
   2737e:	42a3      	cmp	r3, r4
   27380:	dd1a      	ble.n	273b8 <_strtoul_l.isra.0+0xa0>
   27382:	2f00      	cmp	r7, #0
   27384:	db04      	blt.n	27390 <_strtoul_l.isra.0+0x78>
   27386:	4540      	cmp	r0, r8
   27388:	d802      	bhi.n	27390 <_strtoul_l.isra.0+0x78>
   2738a:	d11e      	bne.n	273ca <_strtoul_l.isra.0+0xb2>
   2738c:	454c      	cmp	r4, r9
   2738e:	dd1c      	ble.n	273ca <_strtoul_l.isra.0+0xb2>
   27390:	f04f 37ff 	mov.w	r7, #4294967295
   27394:	f81c 5b01 	ldrb.w	r5, [ip], #1
   27398:	f1a5 0430 	sub.w	r4, r5, #48	; 0x30
   2739c:	2c09      	cmp	r4, #9
   2739e:	d9ee      	bls.n	2737e <_strtoul_l.isra.0+0x66>
   273a0:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
   273a4:	2c19      	cmp	r4, #25
   273a6:	d9e8      	bls.n	2737a <_strtoul_l.isra.0+0x62>
   273a8:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
   273ac:	2c19      	cmp	r4, #25
   273ae:	d803      	bhi.n	273b8 <_strtoul_l.isra.0+0xa0>
   273b0:	f1a5 0457 	sub.w	r4, r5, #87	; 0x57
   273b4:	42a3      	cmp	r3, r4
   273b6:	dce4      	bgt.n	27382 <_strtoul_l.isra.0+0x6a>
   273b8:	1c7b      	adds	r3, r7, #1
   273ba:	d00a      	beq.n	273d2 <_strtoul_l.isra.0+0xba>
   273bc:	b106      	cbz	r6, 273c0 <_strtoul_l.isra.0+0xa8>
   273be:	4240      	negs	r0, r0
   273c0:	b10a      	cbz	r2, 273c6 <_strtoul_l.isra.0+0xae>
   273c2:	b967      	cbnz	r7, 273de <_strtoul_l.isra.0+0xc6>
   273c4:	6011      	str	r1, [r2, #0]
   273c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   273ca:	fb0a 4000 	mla	r0, sl, r0, r4
   273ce:	2701      	movs	r7, #1
   273d0:	e7e0      	b.n	27394 <_strtoul_l.isra.0+0x7c>
   273d2:	2322      	movs	r3, #34	; 0x22
   273d4:	4638      	mov	r0, r7
   273d6:	f8ce 3000 	str.w	r3, [lr]
   273da:	2a00      	cmp	r2, #0
   273dc:	d0f3      	beq.n	273c6 <_strtoul_l.isra.0+0xae>
   273de:	f10c 31ff 	add.w	r1, ip, #4294967295
   273e2:	e7ef      	b.n	273c4 <_strtoul_l.isra.0+0xac>
   273e4:	f89c 5000 	ldrb.w	r5, [ip]
   273e8:	2601      	movs	r6, #1
   273ea:	f107 0c02 	add.w	ip, r7, #2
   273ee:	e7a4      	b.n	2733a <_strtoul_l.isra.0+0x22>
   273f0:	f89c 0000 	ldrb.w	r0, [ip]
   273f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   273f8:	2858      	cmp	r0, #88	; 0x58
   273fa:	d10a      	bne.n	27412 <_strtoul_l.isra.0+0xfa>
   273fc:	2310      	movs	r3, #16
   273fe:	f89c 5001 	ldrb.w	r5, [ip, #1]
   27402:	f04f 090f 	mov.w	r9, #15
   27406:	f10c 0c02 	add.w	ip, ip, #2
   2740a:	469a      	mov	sl, r3
   2740c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   27410:	e7b0      	b.n	27374 <_strtoul_l.isra.0+0x5c>
   27412:	2b00      	cmp	r3, #0
   27414:	d1a5      	bne.n	27362 <_strtoul_l.isra.0+0x4a>
   27416:	2308      	movs	r3, #8
   27418:	f04f 0907 	mov.w	r9, #7
   2741c:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   27420:	469a      	mov	sl, r3
   27422:	e7a7      	b.n	27374 <_strtoul_l.isra.0+0x5c>
   27424:	0002f9a1 	.word	0x0002f9a1
   27428:	19999999 	.word	0x19999999

0002742c <_strtoul_r>:
   2742c:	f7ff bf74 	b.w	27318 <_strtoul_l.isra.0>

00027430 <strtoul>:
   27430:	b430      	push	{r4, r5}
   27432:	460d      	mov	r5, r1
   27434:	4c03      	ldr	r4, [pc, #12]	; (27444 <strtoul+0x14>)
   27436:	4613      	mov	r3, r2
   27438:	4601      	mov	r1, r0
   2743a:	462a      	mov	r2, r5
   2743c:	6820      	ldr	r0, [r4, #0]
   2743e:	bc30      	pop	{r4, r5}
   27440:	f7ff bf6a 	b.w	27318 <_strtoul_l.isra.0>
   27444:	200204d8 	.word	0x200204d8

00027448 <__ssvfscanf_r>:
   27448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2744c:	ed2d 8b02 	vpush	{d8}
   27450:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
   27454:	468b      	mov	fp, r1
   27456:	4682      	mov	sl, r0
   27458:	af02      	add	r7, sp, #8
   2745a:	62bb      	str	r3, [r7, #40]	; 0x28
   2745c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   27460:	0499      	lsls	r1, r3, #18
   27462:	d409      	bmi.n	27478 <__ssvfscanf_r+0x30>
   27464:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
   27468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2746c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   27470:	f8ab 300c 	strh.w	r3, [fp, #12]
   27474:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
   27478:	f812 3b01 	ldrb.w	r3, [r2], #1
   2747c:	63fa      	str	r2, [r7, #60]	; 0x3c
   2747e:	647b      	str	r3, [r7, #68]	; 0x44
   27480:	2b00      	cmp	r3, #0
   27482:	f001 80fc 	beq.w	2867e <_flash_used+0x55a>
   27486:	2200      	movs	r2, #0
   27488:	ee08 aa10 	vmov	s16, sl
   2748c:	623a      	str	r2, [r7, #32]
   2748e:	4692      	mov	sl, r2
   27490:	637a      	str	r2, [r7, #52]	; 0x34
   27492:	62fa      	str	r2, [r7, #44]	; 0x2c
   27494:	627a      	str	r2, [r7, #36]	; 0x24
   27496:	633a      	str	r2, [r7, #48]	; 0x30
   27498:	4a7c      	ldr	r2, [pc, #496]	; (2768c <__ssvfscanf_r+0x244>)
   2749a:	5cd5      	ldrb	r5, [r2, r3]
   2749c:	f015 0508 	ands.w	r5, r5, #8
   274a0:	f040 80ac 	bne.w	275fc <__ssvfscanf_r+0x1b4>
   274a4:	2b25      	cmp	r3, #37	; 0x25
   274a6:	f040 8088 	bne.w	275ba <__ssvfscanf_r+0x172>
   274aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   274ac:	462c      	mov	r4, r5
   274ae:	46a8      	mov	r8, r5
   274b0:	7802      	ldrb	r2, [r0, #0]
   274b2:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   274b6:	1c41      	adds	r1, r0, #1
   274b8:	2b55      	cmp	r3, #85	; 0x55
   274ba:	d86d      	bhi.n	27598 <__ssvfscanf_r+0x150>
   274bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   274c0:	006c007c 	.word	0x006c007c
   274c4:	006c006c 	.word	0x006c006c
   274c8:	04cf006c 	.word	0x04cf006c
   274cc:	006c006c 	.word	0x006c006c
   274d0:	006c006c 	.word	0x006c006c
   274d4:	00c5006c 	.word	0x00c5006c
   274d8:	00c500c5 	.word	0x00c500c5
   274dc:	00c500c5 	.word	0x00c500c5
   274e0:	00c500c5 	.word	0x00c500c5
   274e4:	00c500c5 	.word	0x00c500c5
   274e8:	006c00c5 	.word	0x006c00c5
   274ec:	006c006c 	.word	0x006c006c
   274f0:	006c006c 	.word	0x006c006c
   274f4:	006c006c 	.word	0x006c006c
   274f8:	006c00d1 	.word	0x006c00d1
   274fc:	04b104a1 	.word	0x04b104a1
   27500:	00d100d1 	.word	0x00d100d1
   27504:	006c00d1 	.word	0x006c00d1
   27508:	006c006c 	.word	0x006c006c
   2750c:	0439006c 	.word	0x0439006c
   27510:	006c006c 	.word	0x006c006c
   27514:	006c04a8 	.word	0x006c04a8
   27518:	006c006c 	.word	0x006c006c
   2751c:	006c049c 	.word	0x006c049c
   27520:	006c006c 	.word	0x006c006c
   27524:	0442006c 	.word	0x0442006c
   27528:	006c006c 	.word	0x006c006c
   2752c:	006c04ba 	.word	0x006c04ba
   27530:	006c006c 	.word	0x006c006c
   27534:	006c006c 	.word	0x006c006c
   27538:	006c00d1 	.word	0x006c00d1
   2753c:	04b304a3 	.word	0x04b304a3
   27540:	00d100d1 	.word	0x00d100d1
   27544:	04f500d1 	.word	0x04f500d1
   27548:	04390501 	.word	0x04390501
   2754c:	04c3006c 	.word	0x04c3006c
   27550:	04e604d8 	.word	0x04e604d8
   27554:	051104aa 	.word	0x051104aa
   27558:	006c006c 	.word	0x006c006c
   2755c:	0432049e 	.word	0x0432049e
   27560:	006c0509 	.word	0x006c0509
   27564:	0442006c 	.word	0x0442006c
   27568:	0432006c 	.word	0x0432006c
   2756c:	4659      	mov	r1, fp
   2756e:	ee18 0a10 	vmov	r0, s16
   27572:	f004 fd77 	bl	2c064 <__ssrefill_r>
   27576:	2800      	cmp	r0, #0
   27578:	f000 87c5 	beq.w	28506 <_flash_used+0x3e2>
   2757c:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   27580:	2e00      	cmp	r6, #0
   27582:	f000 8216 	beq.w	279b2 <__ssvfscanf_r+0x56a>
   27586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27588:	2b00      	cmp	r3, #0
   2758a:	f000 870c 	beq.w	283a6 <_flash_used+0x282>
   2758e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   27592:	065a      	lsls	r2, r3, #25
   27594:	f100 8707 	bmi.w	283a6 <_flash_used+0x282>
   27598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2759a:	b12b      	cbz	r3, 275a8 <__ssvfscanf_r+0x160>
   2759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2759e:	681e      	ldr	r6, [r3, #0]
   275a0:	b116      	cbz	r6, 275a8 <__ssvfscanf_r+0x160>
   275a2:	4630      	mov	r0, r6
   275a4:	f7fe fc06 	bl	25db4 <free>
   275a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   275aa:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
   275ae:	46bd      	mov	sp, r7
   275b0:	ecbd 8b02 	vpop	{d8}
   275b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275b8:	63f9      	str	r1, [r7, #60]	; 0x3c
   275ba:	f8db 3004 	ldr.w	r3, [fp, #4]
   275be:	2b00      	cmp	r3, #0
   275c0:	dd3b      	ble.n	2763a <__ssvfscanf_r+0x1f2>
   275c2:	f8db 3000 	ldr.w	r3, [fp]
   275c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   275c8:	7819      	ldrb	r1, [r3, #0]
   275ca:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   275ce:	4291      	cmp	r1, r2
   275d0:	d1e2      	bne.n	27598 <__ssvfscanf_r+0x150>
   275d2:	f8db 2004 	ldr.w	r2, [fp, #4]
   275d6:	3301      	adds	r3, #1
   275d8:	f10a 0a01 	add.w	sl, sl, #1
   275dc:	3a01      	subs	r2, #1
   275de:	e9cb 3200 	strd	r3, r2, [fp]
   275e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   275e4:	f812 3b01 	ldrb.w	r3, [r2], #1
   275e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   275ea:	647b      	str	r3, [r7, #68]	; 0x44
   275ec:	2b00      	cmp	r3, #0
   275ee:	d0d3      	beq.n	27598 <__ssvfscanf_r+0x150>
   275f0:	4a26      	ldr	r2, [pc, #152]	; (2768c <__ssvfscanf_r+0x244>)
   275f2:	5cd5      	ldrb	r5, [r2, r3]
   275f4:	f015 0508 	ands.w	r5, r5, #8
   275f8:	f43f af54 	beq.w	274a4 <__ssvfscanf_r+0x5c>
   275fc:	f8db 2004 	ldr.w	r2, [fp, #4]
   27600:	ee18 4a10 	vmov	r4, s16
   27604:	e010      	b.n	27628 <__ssvfscanf_r+0x1e0>
   27606:	f8db 3000 	ldr.w	r3, [fp]
   2760a:	4920      	ldr	r1, [pc, #128]	; (2768c <__ssvfscanf_r+0x244>)
   2760c:	781a      	ldrb	r2, [r3, #0]
   2760e:	3301      	adds	r3, #1
   27610:	5c8a      	ldrb	r2, [r1, r2]
   27612:	0712      	lsls	r2, r2, #28
   27614:	d5e5      	bpl.n	275e2 <__ssvfscanf_r+0x19a>
   27616:	f8db 2004 	ldr.w	r2, [fp, #4]
   2761a:	f10a 0a01 	add.w	sl, sl, #1
   2761e:	f8cb 3000 	str.w	r3, [fp]
   27622:	3a01      	subs	r2, #1
   27624:	f8cb 2004 	str.w	r2, [fp, #4]
   27628:	2a00      	cmp	r2, #0
   2762a:	dcec      	bgt.n	27606 <__ssvfscanf_r+0x1be>
   2762c:	4659      	mov	r1, fp
   2762e:	4620      	mov	r0, r4
   27630:	f004 fd18 	bl	2c064 <__ssrefill_r>
   27634:	2800      	cmp	r0, #0
   27636:	d0e6      	beq.n	27606 <__ssvfscanf_r+0x1be>
   27638:	e7d3      	b.n	275e2 <__ssvfscanf_r+0x19a>
   2763a:	4659      	mov	r1, fp
   2763c:	ee18 0a10 	vmov	r0, s16
   27640:	f004 fd10 	bl	2c064 <__ssrefill_r>
   27644:	2800      	cmp	r0, #0
   27646:	d0bc      	beq.n	275c2 <__ssvfscanf_r+0x17a>
   27648:	e79d      	b.n	27586 <__ssvfscanf_r+0x13e>
   2764a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   2764e:	d1a3      	bne.n	27598 <__ssvfscanf_r+0x150>
   27650:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   27654:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   27658:	7842      	ldrb	r2, [r0, #1]
   2765a:	4608      	mov	r0, r1
   2765c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   27660:	e727      	b.n	274b2 <__ssvfscanf_r+0x6a>
   27662:	2604      	movs	r6, #4
   27664:	63f9      	str	r1, [r7, #60]	; 0x3c
   27666:	f8db 3004 	ldr.w	r3, [fp, #4]
   2766a:	2b00      	cmp	r3, #0
   2766c:	f340 8377 	ble.w	27d5e <__ssvfscanf_r+0x916>
   27670:	0662      	lsls	r2, r4, #25
   27672:	f140 837f 	bpl.w	27d74 <__ssvfscanf_r+0x92c>
   27676:	1e73      	subs	r3, r6, #1
   27678:	2b03      	cmp	r3, #3
   2767a:	f200 8632 	bhi.w	282e2 <_flash_used+0x1be>
   2767e:	e8df f013 	tbh	[pc, r3, lsl #1]
   27682:	01b4      	.short	0x01b4
   27684:	00b2015c 	.word	0x00b2015c
   27688:	0007      	.short	0x0007
   2768a:	bf00      	nop
   2768c:	0002f9a1 	.word	0x0002f9a1
   27690:	ee18 0a10 	vmov	r0, s16
   27694:	f003 fb9e 	bl	2add4 <_localeconv_r>
   27698:	f108 33ff 	add.w	r3, r8, #4294967295
   2769c:	6802      	ldr	r2, [r0, #0]
   2769e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   276a2:	617a      	str	r2, [r7, #20]
   276a4:	f240 84e4 	bls.w	28070 <__ssvfscanf_r+0xc28>
   276a8:	f46f 7cae 	mvn.w	ip, #348	; 0x15c
   276ac:	eb08 030c 	add.w	r3, r8, ip
   276b0:	f240 185d 	movw	r8, #349	; 0x15d
   276b4:	60fb      	str	r3, [r7, #12]
   276b6:	2600      	movs	r6, #0
   276b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   276bc:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   276c0:	607d      	str	r5, [r7, #4]
   276c2:	4699      	mov	r9, r3
   276c4:	4645      	mov	r5, r8
   276c6:	46d8      	mov	r8, fp
   276c8:	46a3      	mov	fp, r4
   276ca:	4634      	mov	r4, r6
   276cc:	61fb      	str	r3, [r7, #28]
   276ce:	63be      	str	r6, [r7, #56]	; 0x38
   276d0:	60be      	str	r6, [r7, #8]
   276d2:	613e      	str	r6, [r7, #16]
   276d4:	61be      	str	r6, [r7, #24]
   276d6:	f8d8 1000 	ldr.w	r1, [r8]
   276da:	7808      	ldrb	r0, [r1, #0]
   276dc:	f1a0 0e2b 	sub.w	lr, r0, #43	; 0x2b
   276e0:	f1be 0f4e 	cmp.w	lr, #78	; 0x4e
   276e4:	d850      	bhi.n	27788 <__ssvfscanf_r+0x340>
   276e6:	e8df f01e 	tbh	[pc, lr, lsl #1]
   276ea:	0275      	.short	0x0275
   276ec:	0275004f 	.word	0x0275004f
   276f0:	004f004f 	.word	0x004f004f
   276f4:	00780310 	.word	0x00780310
   276f8:	00780078 	.word	0x00780078
   276fc:	00780078 	.word	0x00780078
   27700:	00780078 	.word	0x00780078
   27704:	00780078 	.word	0x00780078
   27708:	004f004f 	.word	0x004f004f
   2770c:	004f004f 	.word	0x004f004f
   27710:	004f004f 	.word	0x004f004f
   27714:	026e004f 	.word	0x026e004f
   27718:	004f004f 	.word	0x004f004f
   2771c:	02f0004f 	.word	0x02f0004f
   27720:	004f02eb 	.word	0x004f02eb
   27724:	0291004f 	.word	0x0291004f
   27728:	004f004f 	.word	0x004f004f
   2772c:	004f004f 	.word	0x004f004f
   27730:	004f027c 	.word	0x004f027c
   27734:	004f004f 	.word	0x004f004f
   27738:	004f004f 	.word	0x004f004f
   2773c:	004f0269 	.word	0x004f0269
   27740:	004f004f 	.word	0x004f004f
   27744:	0264004f 	.word	0x0264004f
   27748:	004f004f 	.word	0x004f004f
   2774c:	004f004f 	.word	0x004f004f
   27750:	004f004f 	.word	0x004f004f
   27754:	026e004f 	.word	0x026e004f
   27758:	004f004f 	.word	0x004f004f
   2775c:	02f0004f 	.word	0x02f0004f
   27760:	004f02eb 	.word	0x004f02eb
   27764:	0291004f 	.word	0x0291004f
   27768:	004f004f 	.word	0x004f004f
   2776c:	004f004f 	.word	0x004f004f
   27770:	004f027c 	.word	0x004f027c
   27774:	004f004f 	.word	0x004f004f
   27778:	004f004f 	.word	0x004f004f
   2777c:	004f0269 	.word	0x004f0269
   27780:	004f004f 	.word	0x004f004f
   27784:	0264004f 	.word	0x0264004f
   27788:	697b      	ldr	r3, [r7, #20]
   2778a:	f893 e000 	ldrb.w	lr, [r3]
   2778e:	4586      	cmp	lr, r0
   27790:	d117      	bne.n	277c2 <__ssvfscanf_r+0x37a>
   27792:	f41b 7f00 	tst.w	fp, #512	; 0x200
   27796:	d014      	beq.n	277c2 <__ssvfscanf_r+0x37a>
   27798:	f42b 7b20 	bic.w	fp, fp, #640	; 0x280
   2779c:	61be      	str	r6, [r7, #24]
   2779e:	3d01      	subs	r5, #1
   277a0:	f809 0b01 	strb.w	r0, [r9], #1
   277a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   277a8:	f10a 0a01 	add.w	sl, sl, #1
   277ac:	3801      	subs	r0, #1
   277ae:	2800      	cmp	r0, #0
   277b0:	f8c8 0004 	str.w	r0, [r8, #4]
   277b4:	f340 83a8 	ble.w	27f08 <__ssvfscanf_r+0xac0>
   277b8:	1c48      	adds	r0, r1, #1
   277ba:	f8c8 0000 	str.w	r0, [r8]
   277be:	2d00      	cmp	r5, #0
   277c0:	d189      	bne.n	276d6 <__ssvfscanf_r+0x28e>
   277c2:	617e      	str	r6, [r7, #20]
   277c4:	4626      	mov	r6, r4
   277c6:	697b      	ldr	r3, [r7, #20]
   277c8:	465c      	mov	r4, fp
   277ca:	46c3      	mov	fp, r8
   277cc:	2b00      	cmp	r3, #0
   277ce:	f001 806a 	beq.w	288a6 <_flash_used+0x782>
   277d2:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   277d6:	4635      	mov	r5, r6
   277d8:	e229      	b.n	27c2e <__ssvfscanf_r+0x7e6>
   277da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277dc:	42e3      	cmn	r3, r4
   277de:	d1f0      	bne.n	277c2 <__ssvfscanf_r+0x37a>
   277e0:	f42b 7bc0 	bic.w	fp, fp, #384	; 0x180
   277e4:	e7db      	b.n	2779e <__ssvfscanf_r+0x356>
   277e6:	f108 33ff 	add.w	r3, r8, #4294967295
   277ea:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   277ee:	f240 83be 	bls.w	27f6e <__ssvfscanf_r+0xb26>
   277f2:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
   277f6:	eb08 0900 	add.w	r9, r8, r0
   277fa:	f240 185d 	movw	r8, #349	; 0x15d
   277fe:	2300      	movs	r3, #0
   27800:	f507 75ac 	add.w	r5, r7, #344	; 0x158
   27804:	465e      	mov	r6, fp
   27806:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   2780a:	46d3      	mov	fp, sl
   2780c:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   27810:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
   27814:	469a      	mov	sl, r3
   27816:	61fd      	str	r5, [r7, #28]
   27818:	6832      	ldr	r2, [r6, #0]
   2781a:	7810      	ldrb	r0, [r2, #0]
   2781c:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   27820:	2b4d      	cmp	r3, #77	; 0x4d
   27822:	d861      	bhi.n	278e8 <__ssvfscanf_r+0x4a0>
   27824:	e8df f013 	tbh	[pc, r3, lsl #1]
   27828:	006002cd 	.word	0x006002cd
   2782c:	006002cd 	.word	0x006002cd
   27830:	03600060 	.word	0x03600060
   27834:	026b026b 	.word	0x026b026b
   27838:	026b026b 	.word	0x026b026b
   2783c:	026b026b 	.word	0x026b026b
   27840:	02d3026b 	.word	0x02d3026b
   27844:	006002d3 	.word	0x006002d3
   27848:	00600060 	.word	0x00600060
   2784c:	00600060 	.word	0x00600060
   27850:	00600060 	.word	0x00600060
   27854:	004e004e 	.word	0x004e004e
   27858:	004e004e 	.word	0x004e004e
   2785c:	004e004e 	.word	0x004e004e
   27860:	00600060 	.word	0x00600060
   27864:	00600060 	.word	0x00600060
   27868:	00600060 	.word	0x00600060
   2786c:	00600060 	.word	0x00600060
   27870:	00600060 	.word	0x00600060
   27874:	00600060 	.word	0x00600060
   27878:	00600060 	.word	0x00600060
   2787c:	00600060 	.word	0x00600060
   27880:	02db0060 	.word	0x02db0060
   27884:	00600060 	.word	0x00600060
   27888:	00600060 	.word	0x00600060
   2788c:	00600060 	.word	0x00600060
   27890:	00600060 	.word	0x00600060
   27894:	004e004e 	.word	0x004e004e
   27898:	004e004e 	.word	0x004e004e
   2789c:	004e004e 	.word	0x004e004e
   278a0:	00600060 	.word	0x00600060
   278a4:	00600060 	.word	0x00600060
   278a8:	00600060 	.word	0x00600060
   278ac:	00600060 	.word	0x00600060
   278b0:	00600060 	.word	0x00600060
   278b4:	00600060 	.word	0x00600060
   278b8:	00600060 	.word	0x00600060
   278bc:	00600060 	.word	0x00600060
   278c0:	02db0060 	.word	0x02db0060
   278c4:	f1b9 0f0a 	cmp.w	r9, #10
   278c8:	dd0e      	ble.n	278e8 <__ssvfscanf_r+0x4a0>
   278ca:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   278ce:	f805 0b01 	strb.w	r0, [r5], #1
   278d2:	6873      	ldr	r3, [r6, #4]
   278d4:	3b01      	subs	r3, #1
   278d6:	2b00      	cmp	r3, #0
   278d8:	6073      	str	r3, [r6, #4]
   278da:	f340 8328 	ble.w	27f2e <__ssvfscanf_r+0xae6>
   278de:	3201      	adds	r2, #1
   278e0:	6032      	str	r2, [r6, #0]
   278e2:	f1b8 0801 	subs.w	r8, r8, #1
   278e6:	d197      	bne.n	27818 <__ssvfscanf_r+0x3d0>
   278e8:	05e3      	lsls	r3, r4, #23
   278ea:	46d0      	mov	r8, sl
   278ec:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
   278f0:	46da      	mov	sl, fp
   278f2:	46b3      	mov	fp, r6
   278f4:	d507      	bpl.n	27906 <__ssvfscanf_r+0x4be>
   278f6:	69fb      	ldr	r3, [r7, #28]
   278f8:	429d      	cmp	r5, r3
   278fa:	f200 8593 	bhi.w	28424 <_flash_used+0x300>
   278fe:	69fb      	ldr	r3, [r7, #28]
   27900:	429d      	cmp	r5, r3
   27902:	f43f ae49 	beq.w	27598 <__ssvfscanf_r+0x150>
   27906:	f014 0210 	ands.w	r2, r4, #16
   2790a:	f040 8321 	bne.w	27f50 <__ssvfscanf_r+0xb08>
   2790e:	6a3e      	ldr	r6, [r7, #32]
   27910:	ee18 0a10 	vmov	r0, s16
   27914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27916:	69f9      	ldr	r1, [r7, #28]
   27918:	702a      	strb	r2, [r5, #0]
   2791a:	47b0      	blx	r6
   2791c:	06a6      	lsls	r6, r4, #26
   2791e:	f100 830f 	bmi.w	27f40 <__ssvfscanf_r+0xaf8>
   27922:	0721      	lsls	r1, r4, #28
   27924:	f100 84ab 	bmi.w	2827e <_flash_used+0x15a>
   27928:	0762      	lsls	r2, r4, #29
   2792a:	f140 870d 	bpl.w	28748 <_flash_used+0x624>
   2792e:	6abc      	ldr	r4, [r7, #40]	; 0x28
   27930:	f854 3b04 	ldr.w	r3, [r4], #4
   27934:	8018      	strh	r0, [r3, #0]
   27936:	62bc      	str	r4, [r7, #40]	; 0x28
   27938:	e307      	b.n	27f4a <__ssvfscanf_r+0xb02>
   2793a:	f1b8 0f00 	cmp.w	r8, #0
   2793e:	bf08      	it	eq
   27940:	f04f 38ff 	moveq.w	r8, #4294967295
   27944:	f014 0501 	ands.w	r5, r4, #1
   27948:	f000 831c 	beq.w	27f84 <__ssvfscanf_r+0xb3c>
   2794c:	f014 0310 	ands.w	r3, r4, #16
   27950:	61fb      	str	r3, [r7, #28]
   27952:	f040 8604 	bne.w	2855e <_flash_used+0x43a>
   27956:	0622      	lsls	r2, r4, #24
   27958:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2795a:	f140 8693 	bpl.w	28684 <_flash_used+0x560>
   2795e:	f856 3b04 	ldr.w	r3, [r6], #4
   27962:	63bb      	str	r3, [r7, #56]	; 0x38
   27964:	2b00      	cmp	r3, #0
   27966:	f43f ae17 	beq.w	27598 <__ssvfscanf_r+0x150>
   2796a:	2080      	movs	r0, #128	; 0x80
   2796c:	f7fe fa1a 	bl	25da4 <malloc>
   27970:	4681      	mov	r9, r0
   27972:	2800      	cmp	r0, #0
   27974:	f000 8517 	beq.w	283a6 <_flash_used+0x282>
   27978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2797a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2797c:	88dd      	ldrh	r5, [r3, #6]
   2797e:	889c      	ldrh	r4, [r3, #4]
   27980:	6010      	str	r0, [r2, #0]
   27982:	42a5      	cmp	r5, r4
   27984:	f080 8468 	bcs.w	28258 <_flash_used+0x134>
   27988:	6818      	ldr	r0, [r3, #0]
   2798a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2798c:	1c6b      	adds	r3, r5, #1
   2798e:	62be      	str	r6, [r7, #40]	; 0x28
   27990:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   27994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27996:	f8c7 9018 	str.w	r9, [r7, #24]
   2799a:	80d3      	strh	r3, [r2, #6]
   2799c:	2320      	movs	r3, #32
   2799e:	617b      	str	r3, [r7, #20]
   279a0:	f8db 3000 	ldr.w	r3, [fp]
   279a4:	4ac4      	ldr	r2, [pc, #784]	; (27cb8 <__ssvfscanf_r+0x870>)
   279a6:	781b      	ldrb	r3, [r3, #0]
   279a8:	5cd3      	ldrb	r3, [r2, r3]
   279aa:	f013 0508 	ands.w	r5, r3, #8
   279ae:	f000 8544 	beq.w	2843a <_flash_used+0x316>
   279b2:	69fb      	ldr	r3, [r7, #28]
   279b4:	2b00      	cmp	r3, #0
   279b6:	f47f ae14 	bne.w	275e2 <__ssvfscanf_r+0x19a>
   279ba:	69ba      	ldr	r2, [r7, #24]
   279bc:	f8c9 3000 	str.w	r3, [r9]
   279c0:	eba9 0102 	sub.w	r1, r9, r2
   279c4:	697a      	ldr	r2, [r7, #20]
   279c6:	108b      	asrs	r3, r1, #2
   279c8:	3301      	adds	r3, #1
   279ca:	429a      	cmp	r2, r3
   279cc:	f240 8170 	bls.w	27cb0 <__ssvfscanf_r+0x868>
   279d0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   279d2:	2c00      	cmp	r4, #0
   279d4:	f000 816c 	beq.w	27cb0 <__ssvfscanf_r+0x868>
   279d8:	3104      	adds	r1, #4
   279da:	6820      	ldr	r0, [r4, #0]
   279dc:	f7fe fd88 	bl	264f0 <realloc>
   279e0:	2800      	cmp	r0, #0
   279e2:	f000 8165 	beq.w	27cb0 <__ssvfscanf_r+0x868>
   279e6:	6020      	str	r0, [r4, #0]
   279e8:	e162      	b.n	27cb0 <__ssvfscanf_r+0x868>
   279ea:	f1b8 0f00 	cmp.w	r8, #0
   279ee:	bf08      	it	eq
   279f0:	f04f 38ff 	moveq.w	r8, #4294967295
   279f4:	07e2      	lsls	r2, r4, #31
   279f6:	f140 833f 	bpl.w	28078 <__ssvfscanf_r+0xc30>
   279fa:	f014 0310 	ands.w	r3, r4, #16
   279fe:	617b      	str	r3, [r7, #20]
   27a00:	f040 85f2 	bne.w	285e8 <_flash_used+0x4c4>
   27a04:	0623      	lsls	r3, r4, #24
   27a06:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27a08:	f140 864a 	bpl.w	286a0 <_flash_used+0x57c>
   27a0c:	f856 3b04 	ldr.w	r3, [r6], #4
   27a10:	60bb      	str	r3, [r7, #8]
   27a12:	2b00      	cmp	r3, #0
   27a14:	f43f adc0 	beq.w	27598 <__ssvfscanf_r+0x150>
   27a18:	2080      	movs	r0, #128	; 0x80
   27a1a:	f7fe f9c3 	bl	25da4 <malloc>
   27a1e:	4681      	mov	r9, r0
   27a20:	2800      	cmp	r0, #0
   27a22:	f000 84c0 	beq.w	283a6 <_flash_used+0x282>
   27a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27a28:	68ba      	ldr	r2, [r7, #8]
   27a2a:	88dd      	ldrh	r5, [r3, #6]
   27a2c:	889c      	ldrh	r4, [r3, #4]
   27a2e:	6010      	str	r0, [r2, #0]
   27a30:	42a5      	cmp	r5, r4
   27a32:	f080 83ed 	bcs.w	28210 <_flash_used+0xec>
   27a36:	6818      	ldr	r0, [r3, #0]
   27a38:	68ba      	ldr	r2, [r7, #8]
   27a3a:	1c6b      	adds	r3, r5, #1
   27a3c:	62be      	str	r6, [r7, #40]	; 0x28
   27a3e:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   27a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27a44:	f8c7 900c 	str.w	r9, [r7, #12]
   27a48:	80d3      	strh	r3, [r2, #6]
   27a4a:	2320      	movs	r3, #32
   27a4c:	613b      	str	r3, [r7, #16]
   27a4e:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   27a50:	2400      	movs	r4, #0
   27a52:	f8c7 a01c 	str.w	sl, [r7, #28]
   27a56:	ee18 aa10 	vmov	sl, s16
   27a5a:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   27a5e:	e050      	b.n	27b02 <__ssvfscanf_r+0x6ba>
   27a60:	4605      	mov	r5, r0
   27a62:	f8c9 0000 	str.w	r0, [r9]
   27a66:	f107 0350 	add.w	r3, r7, #80	; 0x50
   27a6a:	2208      	movs	r2, #8
   27a6c:	2100      	movs	r1, #0
   27a6e:	4618      	mov	r0, r3
   27a70:	61bb      	str	r3, [r7, #24]
   27a72:	f7fe fce1 	bl	26438 <memset>
   27a76:	4891      	ldr	r0, [pc, #580]	; (27cbc <__ssvfscanf_r+0x874>)
   27a78:	462a      	mov	r2, r5
   27a7a:	69bb      	ldr	r3, [r7, #24]
   27a7c:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
   27a80:	f107 0140 	add.w	r1, r7, #64	; 0x40
   27a84:	4605      	mov	r5, r0
   27a86:	4650      	mov	r0, sl
   27a88:	47a8      	blx	r5
   27a8a:	2801      	cmp	r0, #1
   27a8c:	f000 84b0 	beq.w	283f0 <_flash_used+0x2cc>
   27a90:	2200      	movs	r2, #0
   27a92:	f107 0358 	add.w	r3, r7, #88	; 0x58
   27a96:	5c9b      	ldrb	r3, [r3, r2]
   27a98:	2b00      	cmp	r3, #0
   27a9a:	f000 866e 	beq.w	2877a <_flash_used+0x656>
   27a9e:	69fb      	ldr	r3, [r7, #28]
   27aa0:	2e03      	cmp	r6, #3
   27aa2:	4443      	add	r3, r8
   27aa4:	61fb      	str	r3, [r7, #28]
   27aa6:	f000 84a7 	beq.w	283f8 <_flash_used+0x2d4>
   27aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27aac:	3b01      	subs	r3, #1
   27aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   27ab0:	697d      	ldr	r5, [r7, #20]
   27ab2:	2d00      	cmp	r5, #0
   27ab4:	f040 8499 	bne.w	283ea <_flash_used+0x2c6>
   27ab8:	f109 0904 	add.w	r9, r9, #4
   27abc:	68f8      	ldr	r0, [r7, #12]
   27abe:	693b      	ldr	r3, [r7, #16]
   27ac0:	eba9 0400 	sub.w	r4, r9, r0
   27ac4:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   27ac8:	f200 848f 	bhi.w	283ea <_flash_used+0x2c6>
   27acc:	68ba      	ldr	r2, [r7, #8]
   27ace:	2a00      	cmp	r2, #0
   27ad0:	f000 848b 	beq.w	283ea <_flash_used+0x2c6>
   27ad4:	00d9      	lsls	r1, r3, #3
   27ad6:	f7fe fd0b 	bl	264f0 <realloc>
   27ada:	60f8      	str	r0, [r7, #12]
   27adc:	2800      	cmp	r0, #0
   27ade:	f000 8462 	beq.w	283a6 <_flash_used+0x282>
   27ae2:	693b      	ldr	r3, [r7, #16]
   27ae4:	eb00 0904 	add.w	r9, r0, r4
   27ae8:	68ba      	ldr	r2, [r7, #8]
   27aea:	462c      	mov	r4, r5
   27aec:	005b      	lsls	r3, r3, #1
   27aee:	6010      	str	r0, [r2, #0]
   27af0:	613b      	str	r3, [r7, #16]
   27af2:	f8db 3004 	ldr.w	r3, [fp, #4]
   27af6:	2b00      	cmp	r3, #0
   27af8:	dd3c      	ble.n	27b74 <__ssvfscanf_r+0x72c>
   27afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27afc:	2b00      	cmp	r3, #0
   27afe:	f000 857c 	beq.w	285fa <_flash_used+0x4d6>
   27b02:	f003 f961 	bl	2adc8 <__locale_mb_cur_max>
   27b06:	42a0      	cmp	r0, r4
   27b08:	f43f ad3d 	beq.w	27586 <__ssvfscanf_r+0x13e>
   27b0c:	f8db 2000 	ldr.w	r2, [fp]
   27b10:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   27b14:	f8db 3004 	ldr.w	r3, [fp, #4]
   27b18:	2e03      	cmp	r6, #3
   27b1a:	f812 1b01 	ldrb.w	r1, [r2], #1
   27b1e:	f104 0801 	add.w	r8, r4, #1
   27b22:	f103 33ff 	add.w	r3, r3, #4294967295
   27b26:	5501      	strb	r1, [r0, r4]
   27b28:	e9cb 2300 	strd	r2, r3, [fp]
   27b2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
   27b30:	63bb      	str	r3, [r7, #56]	; 0x38
   27b32:	d102      	bne.n	27b3a <__ssvfscanf_r+0x6f2>
   27b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27b36:	2b04      	cmp	r3, #4
   27b38:	d004      	beq.n	27b44 <__ssvfscanf_r+0x6fc>
   27b3a:	2208      	movs	r2, #8
   27b3c:	2100      	movs	r1, #0
   27b3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27b40:	f7fe fc7a 	bl	26438 <memset>
   27b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27b46:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   27b4a:	4649      	mov	r1, r9
   27b4c:	4650      	mov	r0, sl
   27b4e:	9300      	str	r3, [sp, #0]
   27b50:	4643      	mov	r3, r8
   27b52:	f003 f9db 	bl	2af0c <_mbrtowc_r>
   27b56:	1c45      	adds	r5, r0, #1
   27b58:	4606      	mov	r6, r0
   27b5a:	f43f ad14 	beq.w	27586 <__ssvfscanf_r+0x13e>
   27b5e:	2800      	cmp	r0, #0
   27b60:	f43f af7e 	beq.w	27a60 <__ssvfscanf_r+0x618>
   27b64:	1cb0      	adds	r0, r6, #2
   27b66:	f040 86a1 	bne.w	288ac <_flash_used+0x788>
   27b6a:	f8db 3004 	ldr.w	r3, [fp, #4]
   27b6e:	4644      	mov	r4, r8
   27b70:	2b00      	cmp	r3, #0
   27b72:	dcc2      	bgt.n	27afa <__ssvfscanf_r+0x6b2>
   27b74:	4659      	mov	r1, fp
   27b76:	4650      	mov	r0, sl
   27b78:	f004 fa74 	bl	2c064 <__ssrefill_r>
   27b7c:	2800      	cmp	r0, #0
   27b7e:	d0bc      	beq.n	27afa <__ssvfscanf_r+0x6b2>
   27b80:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   27b84:	62fe      	str	r6, [r7, #44]	; 0x2c
   27b86:	2c00      	cmp	r4, #0
   27b88:	f47f acfd 	bne.w	27586 <__ssvfscanf_r+0x13e>
   27b8c:	697b      	ldr	r3, [r7, #20]
   27b8e:	2b00      	cmp	r3, #0
   27b90:	f47f ad27 	bne.w	275e2 <__ssvfscanf_r+0x19a>
   27b94:	68fa      	ldr	r2, [r7, #12]
   27b96:	f8c9 3000 	str.w	r3, [r9]
   27b9a:	eba9 0102 	sub.w	r1, r9, r2
   27b9e:	693a      	ldr	r2, [r7, #16]
   27ba0:	108b      	asrs	r3, r1, #2
   27ba2:	3301      	adds	r3, #1
   27ba4:	429a      	cmp	r2, r3
   27ba6:	f240 8083 	bls.w	27cb0 <__ssvfscanf_r+0x868>
   27baa:	68bc      	ldr	r4, [r7, #8]
   27bac:	2c00      	cmp	r4, #0
   27bae:	d07f      	beq.n	27cb0 <__ssvfscanf_r+0x868>
   27bb0:	e712      	b.n	279d8 <__ssvfscanf_r+0x590>
   27bb2:	2c07      	cmp	r4, #7
   27bb4:	f47f ae05 	bne.w	277c2 <__ssvfscanf_r+0x37a>
   27bb8:	2408      	movs	r4, #8
   27bba:	e5f0      	b.n	2779e <__ssvfscanf_r+0x356>
   27bbc:	2c06      	cmp	r4, #6
   27bbe:	f47f ae00 	bne.w	277c2 <__ssvfscanf_r+0x37a>
   27bc2:	2407      	movs	r4, #7
   27bc4:	e5eb      	b.n	2779e <__ssvfscanf_r+0x356>
   27bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27bc8:	2b01      	cmp	r3, #1
   27bca:	f47f adfa 	bne.w	277c2 <__ssvfscanf_r+0x37a>
   27bce:	2302      	movs	r3, #2
   27bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   27bd2:	e5e4      	b.n	2779e <__ssvfscanf_r+0x356>
   27bd4:	f01b 0f80 	tst.w	fp, #128	; 0x80
   27bd8:	f43f adf3 	beq.w	277c2 <__ssvfscanf_r+0x37a>
   27bdc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   27be0:	e5dd      	b.n	2779e <__ssvfscanf_r+0x356>
   27be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27be4:	2b00      	cmp	r3, #0
   27be6:	f040 81bb 	bne.w	27f60 <__ssvfscanf_r+0xb18>
   27bea:	2e00      	cmp	r6, #0
   27bec:	f040 81b8 	bne.w	27f60 <__ssvfscanf_r+0xb18>
   27bf0:	f40b 6ee0 	and.w	lr, fp, #1792	; 0x700
   27bf4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   27bf8:	f000 840e 	beq.w	28418 <_flash_used+0x2f4>
   27bfc:	2c01      	cmp	r4, #1
   27bfe:	d002      	beq.n	27c06 <__ssvfscanf_r+0x7be>
   27c00:	2c04      	cmp	r4, #4
   27c02:	f47f adde 	bne.w	277c2 <__ssvfscanf_r+0x37a>
   27c06:	1c62      	adds	r2, r4, #1
   27c08:	b2d4      	uxtb	r4, r2
   27c0a:	e5c8      	b.n	2779e <__ssvfscanf_r+0x356>
   27c0c:	2c00      	cmp	r4, #0
   27c0e:	f040 8187 	bne.w	27f20 <__ssvfscanf_r+0xad8>
   27c12:	2e00      	cmp	r6, #0
   27c14:	f040 8184 	bne.w	27f20 <__ssvfscanf_r+0xad8>
   27c18:	f40b 62e0 	and.w	r2, fp, #1792	; 0x700
   27c1c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
   27c20:	f000 83f5 	beq.w	2840e <_flash_used+0x2ea>
   27c24:	465c      	mov	r4, fp
   27c26:	2300      	movs	r3, #0
   27c28:	687d      	ldr	r5, [r7, #4]
   27c2a:	46c3      	mov	fp, r8
   27c2c:	617b      	str	r3, [r7, #20]
   27c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27c30:	3b01      	subs	r3, #1
   27c32:	2b01      	cmp	r3, #1
   27c34:	f240 85f0 	bls.w	28818 <_flash_used+0x6f4>
   27c38:	1e6b      	subs	r3, r5, #1
   27c3a:	2b06      	cmp	r3, #6
   27c3c:	f240 82ae 	bls.w	2819c <_flash_used+0x78>
   27c40:	05e6      	lsls	r6, r4, #23
   27c42:	d512      	bpl.n	27c6a <__ssvfscanf_r+0x822>
   27c44:	0565      	lsls	r5, r4, #21
   27c46:	f100 85fe 	bmi.w	28846 <_flash_used+0x722>
   27c4a:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   27c4e:	f001 03df 	and.w	r3, r1, #223	; 0xdf
   27c52:	2b45      	cmp	r3, #69	; 0x45
   27c54:	f040 8470 	bne.w	28538 <_flash_used+0x414>
   27c58:	f109 39ff 	add.w	r9, r9, #4294967295
   27c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
   27c60:	465a      	mov	r2, fp
   27c62:	ee18 0a10 	vmov	r0, s16
   27c66:	f004 f9bd 	bl	2bfe4 <_sungetc_r>
   27c6a:	f014 0210 	ands.w	r2, r4, #16
   27c6e:	f47f acb8 	bne.w	275e2 <__ssvfscanf_r+0x19a>
   27c72:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   27c76:	f889 2000 	strb.w	r2, [r9]
   27c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   27c7e:	f000 8452 	beq.w	28526 <_flash_used+0x402>
   27c82:	693b      	ldr	r3, [r7, #16]
   27c84:	2b00      	cmp	r3, #0
   27c86:	f040 8317 	bne.w	282b8 <_flash_used+0x194>
   27c8a:	ee18 0a10 	vmov	r0, s16
   27c8e:	69f9      	ldr	r1, [r7, #28]
   27c90:	2200      	movs	r2, #0
   27c92:	f7ff fab3 	bl	271fc <_strtod_r>
   27c96:	07e0      	lsls	r0, r4, #31
   27c98:	ec59 8b10 	vmov	r8, r9, d0
   27c9c:	d402      	bmi.n	27ca4 <__ssvfscanf_r+0x85c>
   27c9e:	07a1      	lsls	r1, r4, #30
   27ca0:	f140 82f3 	bpl.w	2828a <_flash_used+0x166>
   27ca4:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27ca6:	f856 3b04 	ldr.w	r3, [r6], #4
   27caa:	e9c3 8900 	strd	r8, r9, [r3]
   27cae:	62be      	str	r6, [r7, #40]	; 0x28
   27cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27cb2:	3301      	adds	r3, #1
   27cb4:	633b      	str	r3, [r7, #48]	; 0x30
   27cb6:	e494      	b.n	275e2 <__ssvfscanf_r+0x19a>
   27cb8:	0002f9a1 	.word	0x0002f9a1
   27cbc:	200208f0 	.word	0x200208f0
   27cc0:	2c02      	cmp	r4, #2
   27cc2:	f47f ad7e 	bne.w	277c2 <__ssvfscanf_r+0x37a>
   27cc6:	2403      	movs	r4, #3
   27cc8:	e569      	b.n	2779e <__ssvfscanf_r+0x356>
   27cca:	f40b 6ea0 	and.w	lr, fp, #1280	; 0x500
   27cce:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
   27cd2:	d006      	beq.n	27ce2 <__ssvfscanf_r+0x89a>
   27cd4:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   27cd8:	f43f ad73 	beq.w	277c2 <__ssvfscanf_r+0x37a>
   27cdc:	2e00      	cmp	r6, #0
   27cde:	f000 8594 	beq.w	2880a <_flash_used+0x6e6>
   27ce2:	f41b 7f00 	tst.w	fp, #512	; 0x200
   27ce6:	d104      	bne.n	27cf2 <__ssvfscanf_r+0x8aa>
   27ce8:	69bb      	ldr	r3, [r7, #24]
   27cea:	f8c7 9008 	str.w	r9, [r7, #8]
   27cee:	1af3      	subs	r3, r6, r3
   27cf0:	613b      	str	r3, [r7, #16]
   27cf2:	f42b 63f0 	bic.w	r3, fp, #1920	; 0x780
   27cf6:	2600      	movs	r6, #0
   27cf8:	f443 7bc0 	orr.w	fp, r3, #384	; 0x180
   27cfc:	e54f      	b.n	2779e <__ssvfscanf_r+0x356>
   27cfe:	4b9d      	ldr	r3, [pc, #628]	; (27f74 <__ssvfscanf_r+0xb2c>)
   27d00:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   27d04:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   27d08:	e5e1      	b.n	278ce <__ssvfscanf_r+0x486>
   27d0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
   27d0e:	f43f ad64 	beq.w	277da <__ssvfscanf_r+0x392>
   27d12:	68fb      	ldr	r3, [r7, #12]
   27d14:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   27d18:	3601      	adds	r6, #1
   27d1a:	2b00      	cmp	r3, #0
   27d1c:	f040 8239 	bne.w	28192 <_flash_used+0x6e>
   27d20:	3d01      	subs	r5, #1
   27d22:	e53f      	b.n	277a4 <__ssvfscanf_r+0x35c>
   27d24:	0726      	lsls	r6, r4, #28
   27d26:	f47f ac37 	bne.w	27598 <__ssvfscanf_r+0x150>
   27d2a:	7842      	ldrb	r2, [r0, #1]
   27d2c:	4608      	mov	r0, r1
   27d2e:	f7ff bbc0 	b.w	274b2 <__ssvfscanf_r+0x6a>
   27d32:	0723      	lsls	r3, r4, #28
   27d34:	f47f ac30 	bne.w	27598 <__ssvfscanf_r+0x150>
   27d38:	7842      	ldrb	r2, [r0, #1]
   27d3a:	f044 0402 	orr.w	r4, r4, #2
   27d3e:	4608      	mov	r0, r1
   27d40:	f7ff bbb7 	b.w	274b2 <__ssvfscanf_r+0x6a>
   27d44:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   27d48:	4b8b      	ldr	r3, [pc, #556]	; (27f78 <__ssvfscanf_r+0xb30>)
   27d4a:	2603      	movs	r6, #3
   27d4c:	63f9      	str	r1, [r7, #60]	; 0x3c
   27d4e:	623b      	str	r3, [r7, #32]
   27d50:	2310      	movs	r3, #16
   27d52:	627b      	str	r3, [r7, #36]	; 0x24
   27d54:	f8db 3004 	ldr.w	r3, [fp, #4]
   27d58:	2b00      	cmp	r3, #0
   27d5a:	f73f ac89 	bgt.w	27670 <__ssvfscanf_r+0x228>
   27d5e:	4659      	mov	r1, fp
   27d60:	ee18 0a10 	vmov	r0, s16
   27d64:	f004 f97e 	bl	2c064 <__ssrefill_r>
   27d68:	2800      	cmp	r0, #0
   27d6a:	f47f ac0c 	bne.w	27586 <__ssvfscanf_r+0x13e>
   27d6e:	0662      	lsls	r2, r4, #25
   27d70:	f53f ac81 	bmi.w	27676 <__ssvfscanf_r+0x22e>
   27d74:	f8db 2000 	ldr.w	r2, [fp]
   27d78:	4980      	ldr	r1, [pc, #512]	; (27f7c <__ssvfscanf_r+0xb34>)
   27d7a:	7813      	ldrb	r3, [r2, #0]
   27d7c:	5ccb      	ldrb	r3, [r1, r3]
   27d7e:	071b      	lsls	r3, r3, #28
   27d80:	f57f ac79 	bpl.w	27676 <__ssvfscanf_r+0x22e>
   27d84:	ee18 9a10 	vmov	r9, s16
   27d88:	e007      	b.n	27d9a <__ssvfscanf_r+0x952>
   27d8a:	f8cb 2000 	str.w	r2, [fp]
   27d8e:	7813      	ldrb	r3, [r2, #0]
   27d90:	497a      	ldr	r1, [pc, #488]	; (27f7c <__ssvfscanf_r+0xb34>)
   27d92:	5ccb      	ldrb	r3, [r1, r3]
   27d94:	0718      	lsls	r0, r3, #28
   27d96:	f57f ac6e 	bpl.w	27676 <__ssvfscanf_r+0x22e>
   27d9a:	f8db 3004 	ldr.w	r3, [fp, #4]
   27d9e:	f10a 0a01 	add.w	sl, sl, #1
   27da2:	3201      	adds	r2, #1
   27da4:	3b01      	subs	r3, #1
   27da6:	2b00      	cmp	r3, #0
   27da8:	f8cb 3004 	str.w	r3, [fp, #4]
   27dac:	dced      	bgt.n	27d8a <__ssvfscanf_r+0x942>
   27dae:	4659      	mov	r1, fp
   27db0:	4648      	mov	r0, r9
   27db2:	f004 f957 	bl	2c064 <__ssrefill_r>
   27db6:	2800      	cmp	r0, #0
   27db8:	f47f abe5 	bne.w	27586 <__ssvfscanf_r+0x13e>
   27dbc:	f8db 2000 	ldr.w	r2, [fp]
   27dc0:	e7e5      	b.n	27d8e <__ssvfscanf_r+0x946>
   27dc2:	0621      	lsls	r1, r4, #24
   27dc4:	f57f ad90 	bpl.w	278e8 <__ssvfscanf_r+0x4a0>
   27dc8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   27dcc:	e57f      	b.n	278ce <__ssvfscanf_r+0x486>
   27dce:	4b69      	ldr	r3, [pc, #420]	; (27f74 <__ssvfscanf_r+0xb2c>)
   27dd0:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   27dd4:	f1b9 0f08 	cmp.w	r9, #8
   27dd8:	f73f ad77 	bgt.w	278ca <__ssvfscanf_r+0x482>
   27ddc:	e584      	b.n	278e8 <__ssvfscanf_r+0x4a0>
   27dde:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   27de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   27de6:	f47f ad7f 	bne.w	278e8 <__ssvfscanf_r+0x4a0>
   27dea:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   27dee:	f04f 0910 	mov.w	r9, #16
   27df2:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   27df6:	e56a      	b.n	278ce <__ssvfscanf_r+0x486>
   27df8:	f044 0401 	orr.w	r4, r4, #1
   27dfc:	2602      	movs	r6, #2
   27dfe:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e00:	e431      	b.n	27666 <__ssvfscanf_r+0x21e>
   27e02:	f044 0401 	orr.w	r4, r4, #1
   27e06:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   27e0a:	2600      	movs	r6, #0
   27e0c:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e0e:	e42a      	b.n	27666 <__ssvfscanf_r+0x21e>
   27e10:	f044 0401 	orr.w	r4, r4, #1
   27e14:	4b58      	ldr	r3, [pc, #352]	; (27f78 <__ssvfscanf_r+0xb30>)
   27e16:	2603      	movs	r6, #3
   27e18:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e1a:	623b      	str	r3, [r7, #32]
   27e1c:	2308      	movs	r3, #8
   27e1e:	627b      	str	r3, [r7, #36]	; 0x24
   27e20:	e421      	b.n	27666 <__ssvfscanf_r+0x21e>
   27e22:	f044 0401 	orr.w	r4, r4, #1
   27e26:	4b56      	ldr	r3, [pc, #344]	; (27f80 <__ssvfscanf_r+0xb38>)
   27e28:	2603      	movs	r6, #3
   27e2a:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e2c:	623b      	str	r3, [r7, #32]
   27e2e:	230a      	movs	r3, #10
   27e30:	627b      	str	r3, [r7, #36]	; 0x24
   27e32:	e418      	b.n	27666 <__ssvfscanf_r+0x21e>
   27e34:	f107 0058 	add.w	r0, r7, #88	; 0x58
   27e38:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   27e3c:	f003 fe02 	bl	2ba44 <__sccl>
   27e40:	2601      	movs	r6, #1
   27e42:	63f8      	str	r0, [r7, #60]	; 0x3c
   27e44:	e40f      	b.n	27666 <__ssvfscanf_r+0x21e>
   27e46:	0726      	lsls	r6, r4, #28
   27e48:	f47f aba6 	bne.w	27598 <__ssvfscanf_r+0x150>
   27e4c:	7842      	ldrb	r2, [r0, #1]
   27e4e:	2a6c      	cmp	r2, #108	; 0x6c
   27e50:	f000 83d8 	beq.w	28604 <_flash_used+0x4e0>
   27e54:	f044 0401 	orr.w	r4, r4, #1
   27e58:	4608      	mov	r0, r1
   27e5a:	f7ff bb2a 	b.w	274b2 <__ssvfscanf_r+0x6a>
   27e5e:	ea58 0804 	orrs.w	r8, r8, r4
   27e62:	f47f ab99 	bne.w	27598 <__ssvfscanf_r+0x150>
   27e66:	7842      	ldrb	r2, [r0, #1]
   27e68:	2410      	movs	r4, #16
   27e6a:	4608      	mov	r0, r1
   27e6c:	f7ff bb21 	b.w	274b2 <__ssvfscanf_r+0x6a>
   27e70:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   27e74:	f47f ab90 	bne.w	27598 <__ssvfscanf_r+0x150>
   27e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27e7a:	2a00      	cmp	r2, #0
   27e7c:	f000 83f7 	beq.w	2866e <_flash_used+0x54a>
   27e80:	7842      	ldrb	r2, [r0, #1]
   27e82:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   27e86:	4608      	mov	r0, r1
   27e88:	f7ff bb13 	b.w	274b2 <__ssvfscanf_r+0x6a>
   27e8c:	06e2      	lsls	r2, r4, #27
   27e8e:	f100 81aa 	bmi.w	281e6 <_flash_used+0xc2>
   27e92:	0723      	lsls	r3, r4, #28
   27e94:	f140 840d 	bpl.w	286b2 <_flash_used+0x58e>
   27e98:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27e9a:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e9c:	f856 3b04 	ldr.w	r3, [r6], #4
   27ea0:	f883 a000 	strb.w	sl, [r3]
   27ea4:	62be      	str	r6, [r7, #40]	; 0x28
   27ea6:	f7ff bb9c 	b.w	275e2 <__ssvfscanf_r+0x19a>
   27eaa:	0722      	lsls	r2, r4, #28
   27eac:	f47f ab74 	bne.w	27598 <__ssvfscanf_r+0x150>
   27eb0:	7842      	ldrb	r2, [r0, #1]
   27eb2:	2a68      	cmp	r2, #104	; 0x68
   27eb4:	f000 83b0 	beq.w	28618 <_flash_used+0x4f4>
   27eb8:	f044 0404 	orr.w	r4, r4, #4
   27ebc:	4608      	mov	r0, r1
   27ebe:	f7ff baf8 	b.w	274b2 <__ssvfscanf_r+0x6a>
   27ec2:	4b2f      	ldr	r3, [pc, #188]	; (27f80 <__ssvfscanf_r+0xb38>)
   27ec4:	2603      	movs	r6, #3
   27ec6:	63f9      	str	r1, [r7, #60]	; 0x3c
   27ec8:	623b      	str	r3, [r7, #32]
   27eca:	2300      	movs	r3, #0
   27ecc:	627b      	str	r3, [r7, #36]	; 0x24
   27ece:	f7ff bbca 	b.w	27666 <__ssvfscanf_r+0x21e>
   27ed2:	4b29      	ldr	r3, [pc, #164]	; (27f78 <__ssvfscanf_r+0xb30>)
   27ed4:	2603      	movs	r6, #3
   27ed6:	63f9      	str	r1, [r7, #60]	; 0x3c
   27ed8:	623b      	str	r3, [r7, #32]
   27eda:	230a      	movs	r3, #10
   27edc:	627b      	str	r3, [r7, #36]	; 0x24
   27ede:	f7ff bbc2 	b.w	27666 <__ssvfscanf_r+0x21e>
   27ee2:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   27ee6:	e72f      	b.n	27d48 <__ssvfscanf_r+0x900>
   27ee8:	0521      	lsls	r1, r4, #20
   27eea:	f57f acf0 	bpl.w	278ce <__ssvfscanf_r+0x486>
   27eee:	f1b9 0f00 	cmp.w	r9, #0
   27ef2:	d103      	bne.n	27efc <__ssvfscanf_r+0xab4>
   27ef4:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   27ef8:	f04f 0908 	mov.w	r9, #8
   27efc:	0563      	lsls	r3, r4, #21
   27efe:	f140 8166 	bpl.w	281ce <_flash_used+0xaa>
   27f02:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   27f06:	e4e2      	b.n	278ce <__ssvfscanf_r+0x486>
   27f08:	4641      	mov	r1, r8
   27f0a:	ee18 0a10 	vmov	r0, s16
   27f0e:	f004 f8a9 	bl	2c064 <__ssrefill_r>
   27f12:	2800      	cmp	r0, #0
   27f14:	f47f ac55 	bne.w	277c2 <__ssvfscanf_r+0x37a>
   27f18:	2d00      	cmp	r5, #0
   27f1a:	f47f abdc 	bne.w	276d6 <__ssvfscanf_r+0x28e>
   27f1e:	e450      	b.n	277c2 <__ssvfscanf_r+0x37a>
   27f20:	2c03      	cmp	r4, #3
   27f22:	f43f ae70 	beq.w	27c06 <__ssvfscanf_r+0x7be>
   27f26:	2c05      	cmp	r4, #5
   27f28:	f43f ae6d 	beq.w	27c06 <__ssvfscanf_r+0x7be>
   27f2c:	e449      	b.n	277c2 <__ssvfscanf_r+0x37a>
   27f2e:	4631      	mov	r1, r6
   27f30:	ee18 0a10 	vmov	r0, s16
   27f34:	f004 f896 	bl	2c064 <__ssrefill_r>
   27f38:	2800      	cmp	r0, #0
   27f3a:	f43f acd2 	beq.w	278e2 <__ssvfscanf_r+0x49a>
   27f3e:	e4d3      	b.n	278e8 <__ssvfscanf_r+0x4a0>
   27f40:	6abc      	ldr	r4, [r7, #40]	; 0x28
   27f42:	f854 3b04 	ldr.w	r3, [r4], #4
   27f46:	6018      	str	r0, [r3, #0]
   27f48:	62bc      	str	r4, [r7, #40]	; 0x28
   27f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27f4c:	3301      	adds	r3, #1
   27f4e:	633b      	str	r3, [r7, #48]	; 0x30
   27f50:	69fb      	ldr	r3, [r7, #28]
   27f52:	1aed      	subs	r5, r5, r3
   27f54:	4643      	mov	r3, r8
   27f56:	442b      	add	r3, r5
   27f58:	461e      	mov	r6, r3
   27f5a:	44b2      	add	sl, r6
   27f5c:	f7ff bb41 	b.w	275e2 <__ssvfscanf_r+0x19a>
   27f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27f62:	2b02      	cmp	r3, #2
   27f64:	f47f ae4a 	bne.w	27bfc <__ssvfscanf_r+0x7b4>
   27f68:	2303      	movs	r3, #3
   27f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   27f6c:	e417      	b.n	2779e <__ssvfscanf_r+0x356>
   27f6e:	f04f 0900 	mov.w	r9, #0
   27f72:	e444      	b.n	277fe <__ssvfscanf_r+0x3b6>
   27f74:	0002fb48 	.word	0x0002fb48
   27f78:	0002742d 	.word	0x0002742d
   27f7c:	0002f9a1 	.word	0x0002f9a1
   27f80:	000272fd 	.word	0x000272fd
   27f84:	06e6      	lsls	r6, r4, #27
   27f86:	f100 83a9 	bmi.w	286dc <_flash_used+0x5b8>
   27f8a:	f014 0380 	ands.w	r3, r4, #128	; 0x80
   27f8e:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27f90:	f000 8351 	beq.w	28636 <_flash_used+0x512>
   27f94:	f856 3b04 	ldr.w	r3, [r6], #4
   27f98:	63bb      	str	r3, [r7, #56]	; 0x38
   27f9a:	2b00      	cmp	r3, #0
   27f9c:	f43f aafc 	beq.w	27598 <__ssvfscanf_r+0x150>
   27fa0:	2020      	movs	r0, #32
   27fa2:	f7fd feff 	bl	25da4 <malloc>
   27fa6:	4605      	mov	r5, r0
   27fa8:	2800      	cmp	r0, #0
   27faa:	f000 81fc 	beq.w	283a6 <_flash_used+0x282>
   27fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27fb2:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   27fb6:	8894      	ldrh	r4, [r2, #4]
   27fb8:	6018      	str	r0, [r3, #0]
   27fba:	45a1      	cmp	r9, r4
   27fbc:	f080 8116 	bcs.w	281ec <_flash_used+0xc8>
   27fc0:	6810      	ldr	r0, [r2, #0]
   27fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   27fc4:	f109 0301 	add.w	r3, r9, #1
   27fc8:	62be      	str	r6, [r7, #40]	; 0x28
   27fca:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   27fce:	2201      	movs	r2, #1
   27fd0:	f04f 0920 	mov.w	r9, #32
   27fd4:	61fa      	str	r2, [r7, #28]
   27fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27fd8:	80d3      	strh	r3, [r2, #6]
   27fda:	f8db 3000 	ldr.w	r3, [fp]
   27fde:	49b5      	ldr	r1, [pc, #724]	; (282b4 <_flash_used+0x190>)
   27fe0:	781a      	ldrb	r2, [r3, #0]
   27fe2:	5c8a      	ldrb	r2, [r1, r2]
   27fe4:	0711      	lsls	r1, r2, #28
   27fe6:	f100 82b8 	bmi.w	2855a <_flash_used+0x436>
   27fea:	462c      	mov	r4, r5
   27fec:	f8db 2004 	ldr.w	r2, [fp, #4]
   27ff0:	1c59      	adds	r1, r3, #1
   27ff2:	462e      	mov	r6, r5
   27ff4:	3a01      	subs	r2, #1
   27ff6:	e9cb 1200 	strd	r1, r2, [fp]
   27ffa:	781b      	ldrb	r3, [r3, #0]
   27ffc:	f806 3b01 	strb.w	r3, [r6], #1
   28000:	1b35      	subs	r5, r6, r4
   28002:	45a9      	cmp	r9, r5
   28004:	d80e      	bhi.n	28024 <__ssvfscanf_r+0xbdc>
   28006:	69fb      	ldr	r3, [r7, #28]
   28008:	4620      	mov	r0, r4
   2800a:	b15b      	cbz	r3, 28024 <__ssvfscanf_r+0xbdc>
   2800c:	ea4f 0949 	mov.w	r9, r9, lsl #1
   28010:	4649      	mov	r1, r9
   28012:	f7fe fa6d 	bl	264f0 <realloc>
   28016:	4604      	mov	r4, r0
   28018:	2800      	cmp	r0, #0
   2801a:	f000 81c4 	beq.w	283a6 <_flash_used+0x282>
   2801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28020:	1946      	adds	r6, r0, r5
   28022:	6018      	str	r0, [r3, #0]
   28024:	f1b8 0801 	subs.w	r8, r8, #1
   28028:	4635      	mov	r5, r6
   2802a:	f000 8292 	beq.w	28552 <_flash_used+0x42e>
   2802e:	f8db 3004 	ldr.w	r3, [fp, #4]
   28032:	2b00      	cmp	r3, #0
   28034:	f340 8349 	ble.w	286ca <_flash_used+0x5a6>
   28038:	f8db 3000 	ldr.w	r3, [fp]
   2803c:	499d      	ldr	r1, [pc, #628]	; (282b4 <_flash_used+0x190>)
   2803e:	781a      	ldrb	r2, [r3, #0]
   28040:	5c8a      	ldrb	r2, [r1, r2]
   28042:	0712      	lsls	r2, r2, #28
   28044:	d5d2      	bpl.n	27fec <__ssvfscanf_r+0xba4>
   28046:	1b31      	subs	r1, r6, r4
   28048:	4635      	mov	r5, r6
   2804a:	448a      	add	sl, r1
   2804c:	3101      	adds	r1, #1
   2804e:	2300      	movs	r3, #0
   28050:	4589      	cmp	r9, r1
   28052:	702b      	strb	r3, [r5, #0]
   28054:	f67f ae2c 	bls.w	27cb0 <__ssvfscanf_r+0x868>
   28058:	69fb      	ldr	r3, [r7, #28]
   2805a:	2b00      	cmp	r3, #0
   2805c:	f43f ae28 	beq.w	27cb0 <__ssvfscanf_r+0x868>
   28060:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   28062:	6820      	ldr	r0, [r4, #0]
   28064:	f7fe fa44 	bl	264f0 <realloc>
   28068:	2800      	cmp	r0, #0
   2806a:	f47f acbc 	bne.w	279e6 <__ssvfscanf_r+0x59e>
   2806e:	e61f      	b.n	27cb0 <__ssvfscanf_r+0x868>
   28070:	2300      	movs	r3, #0
   28072:	60fb      	str	r3, [r7, #12]
   28074:	f7ff bb1f 	b.w	276b6 <__ssvfscanf_r+0x26e>
   28078:	06e1      	lsls	r1, r4, #27
   2807a:	f100 827d 	bmi.w	28578 <_flash_used+0x454>
   2807e:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   28082:	6abe      	ldr	r6, [r7, #40]	; 0x28
   28084:	f000 8307 	beq.w	28696 <_flash_used+0x572>
   28088:	f856 3b04 	ldr.w	r3, [r6], #4
   2808c:	61fb      	str	r3, [r7, #28]
   2808e:	2b00      	cmp	r3, #0
   28090:	f43f aa82 	beq.w	27598 <__ssvfscanf_r+0x150>
   28094:	2020      	movs	r0, #32
   28096:	f7fd fe85 	bl	25da4 <malloc>
   2809a:	4605      	mov	r5, r0
   2809c:	2800      	cmp	r0, #0
   2809e:	f000 8182 	beq.w	283a6 <_flash_used+0x282>
   280a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   280a4:	69fb      	ldr	r3, [r7, #28]
   280a6:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   280aa:	8894      	ldrh	r4, [r2, #4]
   280ac:	6018      	str	r0, [r3, #0]
   280ae:	45a1      	cmp	r9, r4
   280b0:	f080 80c0 	bcs.w	28234 <_flash_used+0x110>
   280b4:	6810      	ldr	r0, [r2, #0]
   280b6:	69fa      	ldr	r2, [r7, #28]
   280b8:	f109 0301 	add.w	r3, r9, #1
   280bc:	2420      	movs	r4, #32
   280be:	62be      	str	r6, [r7, #40]	; 0x28
   280c0:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   280c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   280c6:	80d3      	strh	r3, [r2, #6]
   280c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
   280cc:	f8db 2000 	ldr.w	r2, [fp]
   280d0:	4619      	mov	r1, r3
   280d2:	4618      	mov	r0, r3
   280d4:	7813      	ldrb	r3, [r2, #0]
   280d6:	5ccb      	ldrb	r3, [r1, r3]
   280d8:	2b00      	cmp	r3, #0
   280da:	f43f aa5d 	beq.w	27598 <__ssvfscanf_r+0x150>
   280de:	69fb      	ldr	r3, [r7, #28]
   280e0:	462e      	mov	r6, r5
   280e2:	f8c7 a018 	str.w	sl, [r7, #24]
   280e6:	4611      	mov	r1, r2
   280e8:	3b00      	subs	r3, #0
   280ea:	46a2      	mov	sl, r4
   280ec:	4681      	mov	r9, r0
   280ee:	bf18      	it	ne
   280f0:	2301      	movne	r3, #1
   280f2:	63bb      	str	r3, [r7, #56]	; 0x38
   280f4:	e007      	b.n	28106 <__ssvfscanf_r+0xcbe>
   280f6:	f8db 1000 	ldr.w	r1, [fp]
   280fa:	780b      	ldrb	r3, [r1, #0]
   280fc:	f819 3003 	ldrb.w	r3, [r9, r3]
   28100:	2b00      	cmp	r3, #0
   28102:	f000 8180 	beq.w	28406 <_flash_used+0x2e2>
   28106:	f8db 3004 	ldr.w	r3, [fp, #4]
   2810a:	1c48      	adds	r0, r1, #1
   2810c:	3b01      	subs	r3, #1
   2810e:	e9cb 0300 	strd	r0, r3, [fp]
   28112:	780b      	ldrb	r3, [r1, #0]
   28114:	f805 3b01 	strb.w	r3, [r5], #1
   28118:	1bac      	subs	r4, r5, r6
   2811a:	4554      	cmp	r4, sl
   2811c:	d30e      	bcc.n	2813c <_flash_used+0x18>
   2811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28120:	4630      	mov	r0, r6
   28122:	b15b      	cbz	r3, 2813c <_flash_used+0x18>
   28124:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   28128:	4651      	mov	r1, sl
   2812a:	f7fe f9e1 	bl	264f0 <realloc>
   2812e:	4606      	mov	r6, r0
   28130:	2800      	cmp	r0, #0
   28132:	f000 8138 	beq.w	283a6 <_flash_used+0x282>
   28136:	69fb      	ldr	r3, [r7, #28]
   28138:	1905      	adds	r5, r0, r4
   2813a:	6018      	str	r0, [r3, #0]
   2813c:	f1b8 0801 	subs.w	r8, r8, #1
   28140:	f000 8161 	beq.w	28406 <_flash_used+0x2e2>
   28144:	f8db 3004 	ldr.w	r3, [fp, #4]
   28148:	2b00      	cmp	r3, #0
   2814a:	dcd4      	bgt.n	280f6 <__ssvfscanf_r+0xcae>
   2814c:	4659      	mov	r1, fp
   2814e:	ee18 0a10 	vmov	r0, s16
   28152:	f003 ff87 	bl	2c064 <__ssrefill_r>
   28156:	2800      	cmp	r0, #0
   28158:	d0cd      	beq.n	280f6 <__ssvfscanf_r+0xcae>
   2815a:	42b5      	cmp	r5, r6
   2815c:	4654      	mov	r4, sl
   2815e:	f8d7 a018 	ldr.w	sl, [r7, #24]
   28162:	f43f aa10 	beq.w	27586 <__ssvfscanf_r+0x13e>
   28166:	1bae      	subs	r6, r5, r6
   28168:	f43f aa16 	beq.w	27598 <__ssvfscanf_r+0x150>
   2816c:	1c71      	adds	r1, r6, #1
   2816e:	2300      	movs	r3, #0
   28170:	428c      	cmp	r4, r1
   28172:	702b      	strb	r3, [r5, #0]
   28174:	d907      	bls.n	28186 <_flash_used+0x62>
   28176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28178:	b12b      	cbz	r3, 28186 <_flash_used+0x62>
   2817a:	69fc      	ldr	r4, [r7, #28]
   2817c:	6820      	ldr	r0, [r4, #0]
   2817e:	f7fe f9b7 	bl	264f0 <realloc>
   28182:	b100      	cbz	r0, 28186 <_flash_used+0x62>
   28184:	6020      	str	r0, [r4, #0]
   28186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28188:	44b2      	add	sl, r6
   2818a:	3301      	adds	r3, #1
   2818c:	633b      	str	r3, [r7, #48]	; 0x30
   2818e:	f7ff ba28 	b.w	275e2 <__ssvfscanf_r+0x19a>
   28192:	68fb      	ldr	r3, [r7, #12]
   28194:	3b01      	subs	r3, #1
   28196:	60fb      	str	r3, [r7, #12]
   28198:	f7ff bb04 	b.w	277a4 <__ssvfscanf_r+0x35c>
   2819c:	2d02      	cmp	r5, #2
   2819e:	f240 836a 	bls.w	28876 <_flash_used+0x752>
   281a2:	2d03      	cmp	r5, #3
   281a4:	f43f ad4c 	beq.w	27c40 <__ssvfscanf_r+0x7f8>
   281a8:	3d04      	subs	r5, #4
   281aa:	ee18 8a10 	vmov	r8, s16
   281ae:	b2ee      	uxtb	r6, r5
   281b0:	43f5      	mvns	r5, r6
   281b2:	444d      	add	r5, r9
   281b4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   281b8:	465a      	mov	r2, fp
   281ba:	4640      	mov	r0, r8
   281bc:	f003 ff12 	bl	2bfe4 <_sungetc_r>
   281c0:	454d      	cmp	r5, r9
   281c2:	d1f7      	bne.n	281b4 <_flash_used+0x90>
   281c4:	f10a 33ff 	add.w	r3, sl, #4294967295
   281c8:	eba3 0a06 	sub.w	sl, r3, r6
   281cc:	e538      	b.n	27c40 <__ssvfscanf_r+0x7f8>
   281ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   281d0:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   281d4:	b11b      	cbz	r3, 281de <_flash_used+0xba>
   281d6:	3b01      	subs	r3, #1
   281d8:	f108 0801 	add.w	r8, r8, #1
   281dc:	63bb      	str	r3, [r7, #56]	; 0x38
   281de:	f10a 0a01 	add.w	sl, sl, #1
   281e2:	f7ff bb76 	b.w	278d2 <__ssvfscanf_r+0x48a>
   281e6:	63f9      	str	r1, [r7, #60]	; 0x3c
   281e8:	f7ff b9fb 	b.w	275e2 <__ssvfscanf_r+0x19a>
   281ec:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   281f0:	429c      	cmp	r4, r3
   281f2:	f200 80dc 	bhi.w	283ae <_flash_used+0x28a>
   281f6:	3408      	adds	r4, #8
   281f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   281fa:	00a1      	lsls	r1, r4, #2
   281fc:	6810      	ldr	r0, [r2, #0]
   281fe:	f7fe f977 	bl	264f0 <realloc>
   28202:	2800      	cmp	r0, #0
   28204:	f000 80d3 	beq.w	283ae <_flash_used+0x28a>
   28208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2820a:	6018      	str	r0, [r3, #0]
   2820c:	809c      	strh	r4, [r3, #4]
   2820e:	e6d8      	b.n	27fc2 <__ssvfscanf_r+0xb7a>
   28210:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   28214:	429c      	cmp	r4, r3
   28216:	f200 80ca 	bhi.w	283ae <_flash_used+0x28a>
   2821a:	3408      	adds	r4, #8
   2821c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2821e:	00a1      	lsls	r1, r4, #2
   28220:	6810      	ldr	r0, [r2, #0]
   28222:	f7fe f965 	bl	264f0 <realloc>
   28226:	2800      	cmp	r0, #0
   28228:	f000 80c1 	beq.w	283ae <_flash_used+0x28a>
   2822c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2822e:	6018      	str	r0, [r3, #0]
   28230:	809c      	strh	r4, [r3, #4]
   28232:	e401      	b.n	27a38 <__ssvfscanf_r+0x5f0>
   28234:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   28238:	429c      	cmp	r4, r3
   2823a:	f200 80b8 	bhi.w	283ae <_flash_used+0x28a>
   2823e:	3408      	adds	r4, #8
   28240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28242:	00a1      	lsls	r1, r4, #2
   28244:	6810      	ldr	r0, [r2, #0]
   28246:	f7fe f953 	bl	264f0 <realloc>
   2824a:	2800      	cmp	r0, #0
   2824c:	f000 80af 	beq.w	283ae <_flash_used+0x28a>
   28250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28252:	6018      	str	r0, [r3, #0]
   28254:	809c      	strh	r4, [r3, #4]
   28256:	e72e      	b.n	280b6 <__ssvfscanf_r+0xc6e>
   28258:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   2825c:	429c      	cmp	r4, r3
   2825e:	f200 80a6 	bhi.w	283ae <_flash_used+0x28a>
   28262:	3408      	adds	r4, #8
   28264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28266:	00a1      	lsls	r1, r4, #2
   28268:	6810      	ldr	r0, [r2, #0]
   2826a:	f7fe f941 	bl	264f0 <realloc>
   2826e:	2800      	cmp	r0, #0
   28270:	f000 809d 	beq.w	283ae <_flash_used+0x28a>
   28274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28276:	6018      	str	r0, [r3, #0]
   28278:	809c      	strh	r4, [r3, #4]
   2827a:	f7ff bb86 	b.w	2798a <__ssvfscanf_r+0x542>
   2827e:	6abc      	ldr	r4, [r7, #40]	; 0x28
   28280:	f854 3b04 	ldr.w	r3, [r4], #4
   28284:	7018      	strb	r0, [r3, #0]
   28286:	62bc      	str	r4, [r7, #40]	; 0x28
   28288:	e65f      	b.n	27f4a <__ssvfscanf_r+0xb02>
   2828a:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2828c:	ee10 2a10 	vmov	r2, s0
   28290:	464b      	mov	r3, r9
   28292:	ee10 0a10 	vmov	r0, s0
   28296:	4649      	mov	r1, r9
   28298:	f7e4 ffbe 	bl	d218 <__aeabi_dcmpun>
   2829c:	f856 4b04 	ldr.w	r4, [r6], #4
   282a0:	2800      	cmp	r0, #0
   282a2:	f040 82e0 	bne.w	28866 <_flash_used+0x742>
   282a6:	4640      	mov	r0, r8
   282a8:	4649      	mov	r1, r9
   282aa:	f7e4 fa35 	bl	c718 <__aeabi_d2f>
   282ae:	62be      	str	r6, [r7, #40]	; 0x28
   282b0:	6020      	str	r0, [r4, #0]
   282b2:	e4fd      	b.n	27cb0 <__ssvfscanf_r+0x868>
   282b4:	0002f9a1 	.word	0x0002f9a1
   282b8:	68bd      	ldr	r5, [r7, #8]
   282ba:	230a      	movs	r3, #10
   282bc:	ee18 0a10 	vmov	r0, s16
   282c0:	1c69      	adds	r1, r5, #1
   282c2:	46a9      	mov	r9, r5
   282c4:	f7ff f81a 	bl	272fc <_strtol_r>
   282c8:	693b      	ldr	r3, [r7, #16]
   282ca:	1ac2      	subs	r2, r0, r3
   282cc:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
   282d0:	49cf      	ldr	r1, [pc, #828]	; (28610 <_flash_used+0x4ec>)
   282d2:	4599      	cmp	r9, r3
   282d4:	bf28      	it	cs
   282d6:	f207 29aa 	addwcs	r9, r7, #682	; 0x2aa
   282da:	4648      	mov	r0, r9
   282dc:	f003 fc48 	bl	2bb70 <sprintf>
   282e0:	e4d3      	b.n	27c8a <__ssvfscanf_r+0x842>
   282e2:	4645      	mov	r5, r8
   282e4:	2d01      	cmp	r5, #1
   282e6:	bf38      	it	cc
   282e8:	2501      	movcc	r5, #1
   282ea:	f014 0301 	ands.w	r3, r4, #1
   282ee:	f000 82e6 	beq.w	288be <_flash_used+0x79a>
   282f2:	f014 0310 	ands.w	r3, r4, #16
   282f6:	61fb      	str	r3, [r7, #28]
   282f8:	f000 8334 	beq.w	28964 <_flash_used+0x840>
   282fc:	f04f 0900 	mov.w	r9, #0
   28300:	46c8      	mov	r8, r9
   28302:	464e      	mov	r6, r9
   28304:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   28308:	2400      	movs	r4, #0
   2830a:	f002 fd5d 	bl	2adc8 <__locale_mb_cur_max>
   2830e:	42a0      	cmp	r0, r4
   28310:	f43f a939 	beq.w	27586 <__ssvfscanf_r+0x13e>
   28314:	f8db 1000 	ldr.w	r1, [fp]
   28318:	f507 7cac 	add.w	ip, r7, #344	; 0x158
   2831c:	f8db 2004 	ldr.w	r2, [fp, #4]
   28320:	1c63      	adds	r3, r4, #1
   28322:	f811 0b01 	ldrb.w	r0, [r1], #1
   28326:	3a01      	subs	r2, #1
   28328:	f80c 0004 	strb.w	r0, [ip, r4]
   2832c:	f107 0450 	add.w	r4, r7, #80	; 0x50
   28330:	e9cb 1200 	strd	r1, r2, [fp]
   28334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   28336:	2a03      	cmp	r2, #3
   28338:	d102      	bne.n	28340 <_flash_used+0x21c>
   2833a:	6822      	ldr	r2, [r4, #0]
   2833c:	2a04      	cmp	r2, #4
   2833e:	d006      	beq.n	2834e <_flash_used+0x22a>
   28340:	2208      	movs	r2, #8
   28342:	2100      	movs	r1, #0
   28344:	4620      	mov	r0, r4
   28346:	62fb      	str	r3, [r7, #44]	; 0x2c
   28348:	f7fe f876 	bl	26438 <memset>
   2834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2834e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   28352:	4631      	mov	r1, r6
   28354:	ee18 0a10 	vmov	r0, s16
   28358:	9400      	str	r4, [sp, #0]
   2835a:	61bb      	str	r3, [r7, #24]
   2835c:	f002 fdd6 	bl	2af0c <_mbrtowc_r>
   28360:	1c42      	adds	r2, r0, #1
   28362:	62f8      	str	r0, [r7, #44]	; 0x2c
   28364:	f43f a90f 	beq.w	27586 <__ssvfscanf_r+0x13e>
   28368:	69fa      	ldr	r2, [r7, #28]
   2836a:	69bb      	ldr	r3, [r7, #24]
   2836c:	4302      	orrs	r2, r0
   2836e:	f040 837d 	bne.w	28a6c <_flash_used+0x948>
   28372:	449a      	add	sl, r3
   28374:	6032      	str	r2, [r6, #0]
   28376:	3d01      	subs	r5, #1
   28378:	69fb      	ldr	r3, [r7, #28]
   2837a:	2b00      	cmp	r3, #0
   2837c:	f040 83a8 	bne.w	28ad0 <_flash_used+0x9ac>
   28380:	eba6 0408 	sub.w	r4, r6, r8
   28384:	ebb9 0fa4 	cmp.w	r9, r4, asr #2
   28388:	f200 83a1 	bhi.w	28ace <_flash_used+0x9aa>
   2838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2838e:	2b00      	cmp	r3, #0
   28390:	f000 839d 	beq.w	28ace <_flash_used+0x9aa>
   28394:	4640      	mov	r0, r8
   28396:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   2839a:	f7fe f8a9 	bl	264f0 <realloc>
   2839e:	4680      	mov	r8, r0
   283a0:	2800      	cmp	r0, #0
   283a2:	f040 838f 	bne.w	28ac4 <_flash_used+0x9a0>
   283a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   283a8:	2b00      	cmp	r3, #0
   283aa:	f000 8166 	beq.w	2867a <_flash_used+0x556>
   283ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   283b0:	88dd      	ldrh	r5, [r3, #6]
   283b2:	2d00      	cmp	r5, #0
   283b4:	f000 8136 	beq.w	28624 <_flash_used+0x500>
   283b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   283ba:	f04f 0800 	mov.w	r8, #0
   283be:	681e      	ldr	r6, [r3, #0]
   283c0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   283c4:	4634      	mov	r4, r6
   283c6:	6823      	ldr	r3, [r4, #0]
   283c8:	6818      	ldr	r0, [r3, #0]
   283ca:	f7fd fcf3 	bl	25db4 <free>
   283ce:	f854 3b04 	ldr.w	r3, [r4], #4
   283d2:	42ac      	cmp	r4, r5
   283d4:	f8c3 8000 	str.w	r8, [r3]
   283d8:	d1f5      	bne.n	283c6 <_flash_used+0x2a2>
   283da:	f04f 33ff 	mov.w	r3, #4294967295
   283de:	633b      	str	r3, [r7, #48]	; 0x30
   283e0:	2e00      	cmp	r6, #0
   283e2:	f47f a8de 	bne.w	275a2 <__ssvfscanf_r+0x15a>
   283e6:	f7ff b8df 	b.w	275a8 <__ssvfscanf_r+0x160>
   283ea:	2400      	movs	r4, #0
   283ec:	f7ff bb81 	b.w	27af2 <__ssvfscanf_r+0x6aa>
   283f0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   283f4:	f7ff bb4d 	b.w	27a92 <__ssvfscanf_r+0x64a>
   283f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   283fa:	681b      	ldr	r3, [r3, #0]
   283fc:	2b04      	cmp	r3, #4
   283fe:	f47f ab54 	bne.w	27aaa <__ssvfscanf_r+0x662>
   28402:	f7ff bb55 	b.w	27ab0 <__ssvfscanf_r+0x668>
   28406:	4654      	mov	r4, sl
   28408:	f8d7 a018 	ldr.w	sl, [r7, #24]
   2840c:	e6ab      	b.n	28166 <_flash_used+0x42>
   2840e:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   28412:	2401      	movs	r4, #1
   28414:	f7ff b9c3 	b.w	2779e <__ssvfscanf_r+0x356>
   28418:	2301      	movs	r3, #1
   2841a:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   2841e:	63bb      	str	r3, [r7, #56]	; 0x38
   28420:	f7ff b9bd 	b.w	2779e <__ssvfscanf_r+0x356>
   28424:	1e6b      	subs	r3, r5, #1
   28426:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2842a:	4632      	mov	r2, r6
   2842c:	ee18 0a10 	vmov	r0, s16
   28430:	461d      	mov	r5, r3
   28432:	f003 fdd7 	bl	2bfe4 <_sungetc_r>
   28436:	f7ff ba62 	b.w	278fe <__ssvfscanf_r+0x4b6>
   2843a:	f8c7 8010 	str.w	r8, [r7, #16]
   2843e:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
   28442:	f002 fcc1 	bl	2adc8 <__locale_mb_cur_max>
   28446:	42a8      	cmp	r0, r5
   28448:	f43f a89d 	beq.w	27586 <__ssvfscanf_r+0x13e>
   2844c:	f8db 2000 	ldr.w	r2, [fp]
   28450:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   28454:	f8db 3004 	ldr.w	r3, [fp, #4]
   28458:	f1b8 0f03 	cmp.w	r8, #3
   2845c:	f812 1b01 	ldrb.w	r1, [r2], #1
   28460:	f105 0601 	add.w	r6, r5, #1
   28464:	f103 33ff 	add.w	r3, r3, #4294967295
   28468:	f107 0450 	add.w	r4, r7, #80	; 0x50
   2846c:	5541      	strb	r1, [r0, r5]
   2846e:	e9cb 2300 	strd	r2, r3, [fp]
   28472:	d102      	bne.n	2847a <_flash_used+0x356>
   28474:	6823      	ldr	r3, [r4, #0]
   28476:	2b04      	cmp	r3, #4
   28478:	d004      	beq.n	28484 <_flash_used+0x360>
   2847a:	2208      	movs	r2, #8
   2847c:	2100      	movs	r1, #0
   2847e:	4620      	mov	r0, r4
   28480:	f7fd ffda 	bl	26438 <memset>
   28484:	4633      	mov	r3, r6
   28486:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   2848a:	4649      	mov	r1, r9
   2848c:	ee18 0a10 	vmov	r0, s16
   28490:	9400      	str	r4, [sp, #0]
   28492:	f002 fd3b 	bl	2af0c <_mbrtowc_r>
   28496:	f1b0 3fff 	cmp.w	r0, #4294967295
   2849a:	4680      	mov	r8, r0
   2849c:	f43f a873 	beq.w	27586 <__ssvfscanf_r+0x13e>
   284a0:	2800      	cmp	r0, #0
   284a2:	f040 80cf 	bne.w	28644 <_flash_used+0x520>
   284a6:	f8c9 0000 	str.w	r0, [r9]
   284aa:	f002 fc7d 	bl	2ada8 <iswspace>
   284ae:	2800      	cmp	r0, #0
   284b0:	f040 817c 	bne.w	287ac <_flash_used+0x688>
   284b4:	44b2      	add	sl, r6
   284b6:	693b      	ldr	r3, [r7, #16]
   284b8:	3b01      	subs	r3, #1
   284ba:	613b      	str	r3, [r7, #16]
   284bc:	69fe      	ldr	r6, [r7, #28]
   284be:	2e00      	cmp	r6, #0
   284c0:	f040 8140 	bne.w	28744 <_flash_used+0x620>
   284c4:	f109 0904 	add.w	r9, r9, #4
   284c8:	69b8      	ldr	r0, [r7, #24]
   284ca:	697b      	ldr	r3, [r7, #20]
   284cc:	eba9 0400 	sub.w	r4, r9, r0
   284d0:	461d      	mov	r5, r3
   284d2:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   284d6:	f200 8135 	bhi.w	28744 <_flash_used+0x620>
   284da:	6bba      	ldr	r2, [r7, #56]	; 0x38
   284dc:	2a00      	cmp	r2, #0
   284de:	f000 8131 	beq.w	28744 <_flash_used+0x620>
   284e2:	00d9      	lsls	r1, r3, #3
   284e4:	f7fe f804 	bl	264f0 <realloc>
   284e8:	61b8      	str	r0, [r7, #24]
   284ea:	2800      	cmp	r0, #0
   284ec:	f43f af5b 	beq.w	283a6 <_flash_used+0x282>
   284f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   284f2:	006b      	lsls	r3, r5, #1
   284f4:	eb00 0904 	add.w	r9, r0, r4
   284f8:	6010      	str	r0, [r2, #0]
   284fa:	617b      	str	r3, [r7, #20]
   284fc:	f8db 3004 	ldr.w	r3, [fp, #4]
   28500:	2b00      	cmp	r3, #0
   28502:	f77f a833 	ble.w	2756c <__ssvfscanf_r+0x124>
   28506:	f8db 3000 	ldr.w	r3, [fp]
   2850a:	4a42      	ldr	r2, [pc, #264]	; (28614 <_flash_used+0x4f0>)
   2850c:	781b      	ldrb	r3, [r3, #0]
   2850e:	5cd3      	ldrb	r3, [r2, r3]
   28510:	071b      	lsls	r3, r3, #28
   28512:	d42d      	bmi.n	28570 <_flash_used+0x44c>
   28514:	693b      	ldr	r3, [r7, #16]
   28516:	b35b      	cbz	r3, 28570 <_flash_used+0x44c>
   28518:	4635      	mov	r5, r6
   2851a:	f002 fc55 	bl	2adc8 <__locale_mb_cur_max>
   2851e:	42a8      	cmp	r0, r5
   28520:	d194      	bne.n	2844c <_flash_used+0x328>
   28522:	f7ff b830 	b.w	27586 <__ssvfscanf_r+0x13e>
   28526:	e9d7 1305 	ldrd	r1, r3, [r7, #20]
   2852a:	428b      	cmp	r3, r1
   2852c:	eba3 0201 	sub.w	r2, r3, r1
   28530:	f47f aecc 	bne.w	282cc <_flash_used+0x1a8>
   28534:	f7ff bba9 	b.w	27c8a <__ssvfscanf_r+0x842>
   28538:	465a      	mov	r2, fp
   2853a:	ee18 0a10 	vmov	r0, s16
   2853e:	f003 fd51 	bl	2bfe4 <_sungetc_r>
   28542:	f1aa 0a02 	sub.w	sl, sl, #2
   28546:	f819 1c02 	ldrb.w	r1, [r9, #-2]
   2854a:	f1a9 0902 	sub.w	r9, r9, #2
   2854e:	f7ff bb87 	b.w	27c60 <__ssvfscanf_r+0x818>
   28552:	1b31      	subs	r1, r6, r4
   28554:	448a      	add	sl, r1
   28556:	3101      	adds	r1, #1
   28558:	e579      	b.n	2804e <__ssvfscanf_r+0xc06>
   2855a:	2101      	movs	r1, #1
   2855c:	e577      	b.n	2804e <__ssvfscanf_r+0xc06>
   2855e:	2300      	movs	r3, #0
   28560:	f107 0244 	add.w	r2, r7, #68	; 0x44
   28564:	617b      	str	r3, [r7, #20]
   28566:	4691      	mov	r9, r2
   28568:	61bb      	str	r3, [r7, #24]
   2856a:	63bb      	str	r3, [r7, #56]	; 0x38
   2856c:	f7ff ba18 	b.w	279a0 <__ssvfscanf_r+0x558>
   28570:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   28574:	f7ff ba1d 	b.w	279b2 <__ssvfscanf_r+0x56a>
   28578:	f107 0358 	add.w	r3, r7, #88	; 0x58
   2857c:	f8db 2000 	ldr.w	r2, [fp]
   28580:	4619      	mov	r1, r3
   28582:	7813      	ldrb	r3, [r2, #0]
   28584:	5ccb      	ldrb	r3, [r1, r3]
   28586:	2b00      	cmp	r3, #0
   28588:	f43f a806 	beq.w	27598 <__ssvfscanf_r+0x150>
   2858c:	f8db 3004 	ldr.w	r3, [fp, #4]
   28590:	3201      	adds	r2, #1
   28592:	f1b8 0f01 	cmp.w	r8, #1
   28596:	f103 33ff 	add.w	r3, r3, #4294967295
   2859a:	e9cb 2300 	strd	r2, r3, [fp]
   2859e:	f43f acdc 	beq.w	27f5a <__ssvfscanf_r+0xb12>
   285a2:	461a      	mov	r2, r3
   285a4:	ee18 4a10 	vmov	r4, s16
   285a8:	460d      	mov	r5, r1
   285aa:	e012      	b.n	285d2 <_flash_used+0x4ae>
   285ac:	f8db 3000 	ldr.w	r3, [fp]
   285b0:	781a      	ldrb	r2, [r3, #0]
   285b2:	3301      	adds	r3, #1
   285b4:	5caa      	ldrb	r2, [r5, r2]
   285b6:	2a00      	cmp	r2, #0
   285b8:	f43f accf 	beq.w	27f5a <__ssvfscanf_r+0xb12>
   285bc:	f8db 2004 	ldr.w	r2, [fp, #4]
   285c0:	3601      	adds	r6, #1
   285c2:	f8cb 3000 	str.w	r3, [fp]
   285c6:	3a01      	subs	r2, #1
   285c8:	45b0      	cmp	r8, r6
   285ca:	f8cb 2004 	str.w	r2, [fp, #4]
   285ce:	f43f acc4 	beq.w	27f5a <__ssvfscanf_r+0xb12>
   285d2:	2a00      	cmp	r2, #0
   285d4:	dcea      	bgt.n	285ac <_flash_used+0x488>
   285d6:	4659      	mov	r1, fp
   285d8:	4620      	mov	r0, r4
   285da:	f003 fd43 	bl	2c064 <__ssrefill_r>
   285de:	2800      	cmp	r0, #0
   285e0:	d0e4      	beq.n	285ac <_flash_used+0x488>
   285e2:	44b2      	add	sl, r6
   285e4:	f7fe bffd 	b.w	275e2 <__ssvfscanf_r+0x19a>
   285e8:	2300      	movs	r3, #0
   285ea:	f107 0244 	add.w	r2, r7, #68	; 0x44
   285ee:	613b      	str	r3, [r7, #16]
   285f0:	4691      	mov	r9, r2
   285f2:	e9c7 3302 	strd	r3, r3, [r7, #8]
   285f6:	f7ff ba2a 	b.w	27a4e <__ssvfscanf_r+0x606>
   285fa:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   285fe:	62fe      	str	r6, [r7, #44]	; 0x2c
   28600:	f7ff bac4 	b.w	27b8c <__ssvfscanf_r+0x744>
   28604:	7882      	ldrb	r2, [r0, #2]
   28606:	f044 0402 	orr.w	r4, r4, #2
   2860a:	3002      	adds	r0, #2
   2860c:	f7fe bf51 	b.w	274b2 <__ssvfscanf_r+0x6a>
   28610:	0002fb40 	.word	0x0002fb40
   28614:	0002f9a1 	.word	0x0002f9a1
   28618:	7882      	ldrb	r2, [r0, #2]
   2861a:	f044 0408 	orr.w	r4, r4, #8
   2861e:	3002      	adds	r0, #2
   28620:	f7fe bf47 	b.w	274b2 <__ssvfscanf_r+0x6a>
   28624:	681e      	ldr	r6, [r3, #0]
   28626:	f04f 33ff 	mov.w	r3, #4294967295
   2862a:	633b      	str	r3, [r7, #48]	; 0x30
   2862c:	2e00      	cmp	r6, #0
   2862e:	f47e afb8 	bne.w	275a2 <__ssvfscanf_r+0x15a>
   28632:	f7fe bfb9 	b.w	275a8 <__ssvfscanf_r+0x160>
   28636:	f856 5b04 	ldr.w	r5, [r6], #4
   2863a:	4699      	mov	r9, r3
   2863c:	61fb      	str	r3, [r7, #28]
   2863e:	63bb      	str	r3, [r7, #56]	; 0x38
   28640:	62be      	str	r6, [r7, #40]	; 0x28
   28642:	e4ca      	b.n	27fda <__ssvfscanf_r+0xb92>
   28644:	f110 0f02 	cmn.w	r0, #2
   28648:	f43f af58 	beq.w	284fc <_flash_used+0x3d8>
   2864c:	f8d9 0000 	ldr.w	r0, [r9]
   28650:	f002 fbaa 	bl	2ada8 <iswspace>
   28654:	2800      	cmp	r0, #0
   28656:	f040 80a9 	bne.w	287ac <_flash_used+0x688>
   2865a:	f1b8 0f03 	cmp.w	r8, #3
   2865e:	44b2      	add	sl, r6
   28660:	f47f af29 	bne.w	284b6 <_flash_used+0x392>
   28664:	6823      	ldr	r3, [r4, #0]
   28666:	2b04      	cmp	r3, #4
   28668:	f47f af25 	bne.w	284b6 <_flash_used+0x392>
   2866c:	e726      	b.n	284bc <_flash_used+0x398>
   2866e:	b082      	sub	sp, #8
   28670:	aa02      	add	r2, sp, #8
   28672:	6013      	str	r3, [r2, #0]
   28674:	9303      	str	r3, [sp, #12]
   28676:	637a      	str	r2, [r7, #52]	; 0x34
   28678:	e402      	b.n	27e80 <__ssvfscanf_r+0xa38>
   2867a:	f04f 33ff 	mov.w	r3, #4294967295
   2867e:	633b      	str	r3, [r7, #48]	; 0x30
   28680:	f7fe bf92 	b.w	275a8 <__ssvfscanf_r+0x160>
   28684:	69fb      	ldr	r3, [r7, #28]
   28686:	f856 9b04 	ldr.w	r9, [r6], #4
   2868a:	63bb      	str	r3, [r7, #56]	; 0x38
   2868c:	62be      	str	r6, [r7, #40]	; 0x28
   2868e:	e9c7 3305 	strd	r3, r3, [r7, #20]
   28692:	f7ff b985 	b.w	279a0 <__ssvfscanf_r+0x558>
   28696:	f856 5b04 	ldr.w	r5, [r6], #4
   2869a:	61fc      	str	r4, [r7, #28]
   2869c:	62be      	str	r6, [r7, #40]	; 0x28
   2869e:	e513      	b.n	280c8 <__ssvfscanf_r+0xc80>
   286a0:	697b      	ldr	r3, [r7, #20]
   286a2:	f856 9b04 	ldr.w	r9, [r6], #4
   286a6:	60bb      	str	r3, [r7, #8]
   286a8:	62be      	str	r6, [r7, #40]	; 0x28
   286aa:	e9c7 3303 	strd	r3, r3, [r7, #12]
   286ae:	f7ff b9ce 	b.w	27a4e <__ssvfscanf_r+0x606>
   286b2:	0766      	lsls	r6, r4, #29
   286b4:	f140 8091 	bpl.w	287da <_flash_used+0x6b6>
   286b8:	6abe      	ldr	r6, [r7, #40]	; 0x28
   286ba:	63f9      	str	r1, [r7, #60]	; 0x3c
   286bc:	f856 3b04 	ldr.w	r3, [r6], #4
   286c0:	f8a3 a000 	strh.w	sl, [r3]
   286c4:	62be      	str	r6, [r7, #40]	; 0x28
   286c6:	f7fe bf8c 	b.w	275e2 <__ssvfscanf_r+0x19a>
   286ca:	4659      	mov	r1, fp
   286cc:	ee18 0a10 	vmov	r0, s16
   286d0:	f003 fcc8 	bl	2c064 <__ssrefill_r>
   286d4:	2800      	cmp	r0, #0
   286d6:	f43f acaf 	beq.w	28038 <__ssvfscanf_r+0xbf0>
   286da:	e4b4      	b.n	28046 <__ssvfscanf_r+0xbfe>
   286dc:	f8db 2000 	ldr.w	r2, [fp]
   286e0:	49c0      	ldr	r1, [pc, #768]	; (289e4 <_flash_used+0x8c0>)
   286e2:	7813      	ldrb	r3, [r2, #0]
   286e4:	5ccb      	ldrb	r3, [r1, r3]
   286e6:	071c      	lsls	r4, r3, #28
   286e8:	d429      	bmi.n	2873e <_flash_used+0x61a>
   286ea:	f8db 3004 	ldr.w	r3, [fp, #4]
   286ee:	3201      	adds	r2, #1
   286f0:	f1b8 0f01 	cmp.w	r8, #1
   286f4:	f103 33ff 	add.w	r3, r3, #4294967295
   286f8:	e9cb 2300 	strd	r2, r3, [fp]
   286fc:	f000 80cc 	beq.w	28898 <_flash_used+0x774>
   28700:	2501      	movs	r5, #1
   28702:	461a      	mov	r2, r3
   28704:	ee18 4a10 	vmov	r4, s16
   28708:	e011      	b.n	2872e <_flash_used+0x60a>
   2870a:	f8db 3000 	ldr.w	r3, [fp]
   2870e:	49b5      	ldr	r1, [pc, #724]	; (289e4 <_flash_used+0x8c0>)
   28710:	781a      	ldrb	r2, [r3, #0]
   28712:	3301      	adds	r3, #1
   28714:	5c8a      	ldrb	r2, [r1, r2]
   28716:	0710      	lsls	r0, r2, #28
   28718:	d411      	bmi.n	2873e <_flash_used+0x61a>
   2871a:	f8db 2004 	ldr.w	r2, [fp, #4]
   2871e:	3501      	adds	r5, #1
   28720:	f8cb 3000 	str.w	r3, [fp]
   28724:	3a01      	subs	r2, #1
   28726:	45a8      	cmp	r8, r5
   28728:	f8cb 2004 	str.w	r2, [fp, #4]
   2872c:	d007      	beq.n	2873e <_flash_used+0x61a>
   2872e:	2a00      	cmp	r2, #0
   28730:	dceb      	bgt.n	2870a <_flash_used+0x5e6>
   28732:	4659      	mov	r1, fp
   28734:	4620      	mov	r0, r4
   28736:	f003 fc95 	bl	2c064 <__ssrefill_r>
   2873a:	2800      	cmp	r0, #0
   2873c:	d0e5      	beq.n	2870a <_flash_used+0x5e6>
   2873e:	44aa      	add	sl, r5
   28740:	f7fe bf4f 	b.w	275e2 <__ssvfscanf_r+0x19a>
   28744:	2600      	movs	r6, #0
   28746:	e6d9      	b.n	284fc <_flash_used+0x3d8>
   28748:	f014 0201 	ands.w	r2, r4, #1
   2874c:	f47f abf8 	bne.w	27f40 <__ssvfscanf_r+0xaf8>
   28750:	07a3      	lsls	r3, r4, #30
   28752:	d571      	bpl.n	28838 <_flash_used+0x714>
   28754:	4ba4      	ldr	r3, [pc, #656]	; (289e8 <_flash_used+0x8c4>)
   28756:	ee18 0a10 	vmov	r0, s16
   2875a:	6a39      	ldr	r1, [r7, #32]
   2875c:	4299      	cmp	r1, r3
   2875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28760:	69f9      	ldr	r1, [r7, #28]
   28762:	f000 809d 	beq.w	288a0 <_flash_used+0x77c>
   28766:	f003 faef 	bl	2bd48 <_strtoll_r>
   2876a:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2876c:	f854 3b04 	ldr.w	r3, [r4], #4
   28770:	6018      	str	r0, [r3, #0]
   28772:	62bc      	str	r4, [r7, #40]	; 0x28
   28774:	6059      	str	r1, [r3, #4]
   28776:	f7ff bbe8 	b.w	27f4a <__ssvfscanf_r+0xb02>
   2877a:	4645      	mov	r5, r8
   2877c:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   28780:	62fe      	str	r6, [r7, #44]	; 0x2c
   28782:	2d00      	cmp	r5, #0
   28784:	f43f aa02 	beq.w	27b8c <__ssvfscanf_r+0x744>
   28788:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   2878c:	ee18 6a10 	vmov	r6, s16
   28790:	441c      	add	r4, r3
   28792:	7821      	ldrb	r1, [r4, #0]
   28794:	465a      	mov	r2, fp
   28796:	4630      	mov	r0, r6
   28798:	f003 fc24 	bl	2bfe4 <_sungetc_r>
   2879c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   287a0:	429c      	cmp	r4, r3
   287a2:	f104 34ff 	add.w	r4, r4, #4294967295
   287a6:	d1f4      	bne.n	28792 <_flash_used+0x66e>
   287a8:	f7ff b9f0 	b.w	27b8c <__ssvfscanf_r+0x744>
   287ac:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   287b0:	2e00      	cmp	r6, #0
   287b2:	f43f a8fe 	beq.w	279b2 <__ssvfscanf_r+0x56a>
   287b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   287ba:	ee18 6a10 	vmov	r6, s16
   287be:	441d      	add	r5, r3
   287c0:	7829      	ldrb	r1, [r5, #0]
   287c2:	465a      	mov	r2, fp
   287c4:	4630      	mov	r0, r6
   287c6:	f003 fc0d 	bl	2bfe4 <_sungetc_r>
   287ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   287ce:	42ab      	cmp	r3, r5
   287d0:	f105 35ff 	add.w	r5, r5, #4294967295
   287d4:	d1f4      	bne.n	287c0 <_flash_used+0x69c>
   287d6:	f7ff b8ec 	b.w	279b2 <__ssvfscanf_r+0x56a>
   287da:	07e5      	lsls	r5, r4, #31
   287dc:	d40c      	bmi.n	287f8 <_flash_used+0x6d4>
   287de:	07a0      	lsls	r0, r4, #30
   287e0:	d50a      	bpl.n	287f8 <_flash_used+0x6d4>
   287e2:	6abe      	ldr	r6, [r7, #40]	; 0x28
   287e4:	4652      	mov	r2, sl
   287e6:	63f9      	str	r1, [r7, #60]	; 0x3c
   287e8:	17d3      	asrs	r3, r2, #31
   287ea:	f856 1b04 	ldr.w	r1, [r6], #4
   287ee:	62be      	str	r6, [r7, #40]	; 0x28
   287f0:	e9c1 2300 	strd	r2, r3, [r1]
   287f4:	f7fe bef5 	b.w	275e2 <__ssvfscanf_r+0x19a>
   287f8:	6abe      	ldr	r6, [r7, #40]	; 0x28
   287fa:	63f9      	str	r1, [r7, #60]	; 0x3c
   287fc:	f856 3b04 	ldr.w	r3, [r6], #4
   28800:	f8c3 a000 	str.w	sl, [r3]
   28804:	62be      	str	r6, [r7, #40]	; 0x28
   28806:	f7fe beec 	b.w	275e2 <__ssvfscanf_r+0x19a>
   2880a:	617e      	str	r6, [r7, #20]
   2880c:	4626      	mov	r6, r4
   2880e:	465c      	mov	r4, fp
   28810:	46c3      	mov	fp, r8
   28812:	4635      	mov	r5, r6
   28814:	f7ff ba0b 	b.w	27c2e <__ssvfscanf_r+0x7e6>
   28818:	69fc      	ldr	r4, [r7, #28]
   2881a:	ee18 aa10 	vmov	sl, s16
   2881e:	45a1      	cmp	r9, r4
   28820:	f67e aeba 	bls.w	27598 <__ssvfscanf_r+0x150>
   28824:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   28828:	465a      	mov	r2, fp
   2882a:	4650      	mov	r0, sl
   2882c:	f003 fbda 	bl	2bfe4 <_sungetc_r>
   28830:	45a1      	cmp	r9, r4
   28832:	d1f7      	bne.n	28824 <_flash_used+0x700>
   28834:	f7fe beb0 	b.w	27598 <__ssvfscanf_r+0x150>
   28838:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2883a:	f854 3b04 	ldr.w	r3, [r4], #4
   2883e:	62bc      	str	r4, [r7, #40]	; 0x28
   28840:	6018      	str	r0, [r3, #0]
   28842:	f7ff bb82 	b.w	27f4a <__ssvfscanf_r+0xb02>
   28846:	69fc      	ldr	r4, [r7, #28]
   28848:	ee18 aa10 	vmov	sl, s16
   2884c:	45a1      	cmp	r9, r4
   2884e:	f67e aea3 	bls.w	27598 <__ssvfscanf_r+0x150>
   28852:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   28856:	465a      	mov	r2, fp
   28858:	4650      	mov	r0, sl
   2885a:	f003 fbc3 	bl	2bfe4 <_sungetc_r>
   2885e:	45a1      	cmp	r9, r4
   28860:	d1f7      	bne.n	28852 <_flash_used+0x72e>
   28862:	f7fe be99 	b.w	27598 <__ssvfscanf_r+0x150>
   28866:	4861      	ldr	r0, [pc, #388]	; (289ec <_flash_used+0x8c8>)
   28868:	62be      	str	r6, [r7, #40]	; 0x28
   2886a:	f003 f92f 	bl	2bacc <nanf>
   2886e:	ed84 0a00 	vstr	s0, [r4]
   28872:	f7ff ba1d 	b.w	27cb0 <__ssvfscanf_r+0x868>
   28876:	69fb      	ldr	r3, [r7, #28]
   28878:	ee18 aa10 	vmov	sl, s16
   2887c:	4599      	cmp	r9, r3
   2887e:	f67e ae8b 	bls.w	27598 <__ssvfscanf_r+0x150>
   28882:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   28886:	465a      	mov	r2, fp
   28888:	4650      	mov	r0, sl
   2888a:	f003 fbab 	bl	2bfe4 <_sungetc_r>
   2888e:	69fb      	ldr	r3, [r7, #28]
   28890:	4599      	cmp	r9, r3
   28892:	d1f6      	bne.n	28882 <_flash_used+0x75e>
   28894:	f7fe be80 	b.w	27598 <__ssvfscanf_r+0x150>
   28898:	4645      	mov	r5, r8
   2889a:	44aa      	add	sl, r5
   2889c:	f7fe bea1 	b.w	275e2 <__ssvfscanf_r+0x19a>
   288a0:	f003 fb1a 	bl	2bed8 <_strtoull_r>
   288a4:	e761      	b.n	2876a <_flash_used+0x646>
   288a6:	4635      	mov	r5, r6
   288a8:	f7ff b9c1 	b.w	27c2e <__ssvfscanf_r+0x7e6>
   288ac:	f8d9 3000 	ldr.w	r3, [r9]
   288b0:	461d      	mov	r5, r3
   288b2:	3301      	adds	r3, #1
   288b4:	f47f a8d7 	bne.w	27a66 <__ssvfscanf_r+0x61e>
   288b8:	462a      	mov	r2, r5
   288ba:	f7ff b8ea 	b.w	27a92 <__ssvfscanf_r+0x64a>
   288be:	06e1      	lsls	r1, r4, #27
   288c0:	f100 8096 	bmi.w	289f0 <_flash_used+0x8cc>
   288c4:	f014 0f80 	tst.w	r4, #128	; 0x80
   288c8:	6abc      	ldr	r4, [r7, #40]	; 0x28
   288ca:	f000 80aa 	beq.w	28a22 <_flash_used+0x8fe>
   288ce:	f854 6b04 	ldr.w	r6, [r4], #4
   288d2:	2e00      	cmp	r6, #0
   288d4:	f43e ae60 	beq.w	27598 <__ssvfscanf_r+0x150>
   288d8:	4628      	mov	r0, r5
   288da:	f7fd fa63 	bl	25da4 <malloc>
   288de:	4681      	mov	r9, r0
   288e0:	2800      	cmp	r0, #0
   288e2:	f43f ad60 	beq.w	283a6 <_flash_used+0x282>
   288e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   288e8:	6030      	str	r0, [r6, #0]
   288ea:	f8b3 8006 	ldrh.w	r8, [r3, #6]
   288ee:	889a      	ldrh	r2, [r3, #4]
   288f0:	4590      	cmp	r8, r2
   288f2:	f0c0 80af 	bcc.w	28a54 <_flash_used+0x930>
   288f6:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   288fa:	429a      	cmp	r2, r3
   288fc:	f63f ad57 	bhi.w	283ae <_flash_used+0x28a>
   28900:	f102 0308 	add.w	r3, r2, #8
   28904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28906:	0099      	lsls	r1, r3, #2
   28908:	6810      	ldr	r0, [r2, #0]
   2890a:	63bb      	str	r3, [r7, #56]	; 0x38
   2890c:	f7fd fdf0 	bl	264f0 <realloc>
   28910:	2800      	cmp	r0, #0
   28912:	f43f ad4c 	beq.w	283ae <_flash_used+0x28a>
   28916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28918:	461a      	mov	r2, r3
   2891a:	6018      	str	r0, [r3, #0]
   2891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2891e:	8093      	strh	r3, [r2, #4]
   28920:	f840 6028 	str.w	r6, [r0, r8, lsl #2]
   28924:	f108 0201 	add.w	r2, r8, #1
   28928:	6b78      	ldr	r0, [r7, #52]	; 0x34
   2892a:	4649      	mov	r1, r9
   2892c:	462b      	mov	r3, r5
   2892e:	80c2      	strh	r2, [r0, #6]
   28930:	2201      	movs	r2, #1
   28932:	ee18 0a10 	vmov	r0, s16
   28936:	f8cd b000 	str.w	fp, [sp]
   2893a:	f003 fbb1 	bl	2c0a0 <_sfread_r>
   2893e:	4680      	mov	r8, r0
   28940:	2800      	cmp	r0, #0
   28942:	f000 8089 	beq.w	28a58 <_flash_used+0x934>
   28946:	4285      	cmp	r5, r0
   28948:	d905      	bls.n	28956 <_flash_used+0x832>
   2894a:	4601      	mov	r1, r0
   2894c:	6830      	ldr	r0, [r6, #0]
   2894e:	f7fd fdcf 	bl	264f0 <realloc>
   28952:	b100      	cbz	r0, 28956 <_flash_used+0x832>
   28954:	6030      	str	r0, [r6, #0]
   28956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28958:	44c2      	add	sl, r8
   2895a:	62bc      	str	r4, [r7, #40]	; 0x28
   2895c:	3301      	adds	r3, #1
   2895e:	633b      	str	r3, [r7, #48]	; 0x30
   28960:	f7fe be3f 	b.w	275e2 <__ssvfscanf_r+0x19a>
   28964:	0621      	lsls	r1, r4, #24
   28966:	d534      	bpl.n	289d2 <_flash_used+0x8ae>
   28968:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
   2896c:	f858 3b04 	ldr.w	r3, [r8], #4
   28970:	63bb      	str	r3, [r7, #56]	; 0x38
   28972:	2b00      	cmp	r3, #0
   28974:	f43e ae10 	beq.w	27598 <__ssvfscanf_r+0x150>
   28978:	2080      	movs	r0, #128	; 0x80
   2897a:	f7fd fa13 	bl	25da4 <malloc>
   2897e:	4606      	mov	r6, r0
   28980:	2800      	cmp	r0, #0
   28982:	f43f ad10 	beq.w	283a6 <_flash_used+0x282>
   28986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28988:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2898a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
   2898e:	889c      	ldrh	r4, [r3, #4]
   28990:	6010      	str	r0, [r2, #0]
   28992:	45a1      	cmp	r9, r4
   28994:	d35c      	bcc.n	28a50 <_flash_used+0x92c>
   28996:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   2899a:	429c      	cmp	r4, r3
   2899c:	f63f ad07 	bhi.w	283ae <_flash_used+0x28a>
   289a0:	3408      	adds	r4, #8
   289a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   289a4:	00a1      	lsls	r1, r4, #2
   289a6:	6818      	ldr	r0, [r3, #0]
   289a8:	f7fd fda2 	bl	264f0 <realloc>
   289ac:	2800      	cmp	r0, #0
   289ae:	f43f acfe 	beq.w	283ae <_flash_used+0x28a>
   289b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   289b4:	6018      	str	r0, [r3, #0]
   289b6:	809c      	strh	r4, [r3, #4]
   289b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   289ba:	f109 0301 	add.w	r3, r9, #1
   289be:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
   289c2:	46b0      	mov	r8, r6
   289c4:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   289c8:	f04f 0920 	mov.w	r9, #32
   289cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   289ce:	80d3      	strh	r3, [r2, #6]
   289d0:	e49a      	b.n	28308 <_flash_used+0x1e4>
   289d2:	6abc      	ldr	r4, [r7, #40]	; 0x28
   289d4:	69fb      	ldr	r3, [r7, #28]
   289d6:	f854 6b04 	ldr.w	r6, [r4], #4
   289da:	4699      	mov	r9, r3
   289dc:	4698      	mov	r8, r3
   289de:	63bb      	str	r3, [r7, #56]	; 0x38
   289e0:	62bc      	str	r4, [r7, #40]	; 0x28
   289e2:	e491      	b.n	28308 <_flash_used+0x1e4>
   289e4:	0002f9a1 	.word	0x0002f9a1
   289e8:	0002742d 	.word	0x0002742d
   289ec:	0002f96c 	.word	0x0002f96c
   289f0:	461c      	mov	r4, r3
   289f2:	f8db 2004 	ldr.w	r2, [fp, #4]
   289f6:	4659      	mov	r1, fp
   289f8:	ee18 0a10 	vmov	r0, s16
   289fc:	f8db 3000 	ldr.w	r3, [fp]
   28a00:	4295      	cmp	r5, r2
   28a02:	dd1d      	ble.n	28a40 <_flash_used+0x91c>
   28a04:	4413      	add	r3, r2
   28a06:	4414      	add	r4, r2
   28a08:	1aad      	subs	r5, r5, r2
   28a0a:	f8cb 3000 	str.w	r3, [fp]
   28a0e:	f003 fb29 	bl	2c064 <__ssrefill_r>
   28a12:	2800      	cmp	r0, #0
   28a14:	d0ed      	beq.n	289f2 <_flash_used+0x8ce>
   28a16:	2c00      	cmp	r4, #0
   28a18:	f43e adb5 	beq.w	27586 <__ssvfscanf_r+0x13e>
   28a1c:	44a2      	add	sl, r4
   28a1e:	f7fe bde0 	b.w	275e2 <__ssvfscanf_r+0x19a>
   28a22:	f854 1b04 	ldr.w	r1, [r4], #4
   28a26:	462b      	mov	r3, r5
   28a28:	2201      	movs	r2, #1
   28a2a:	ee18 0a10 	vmov	r0, s16
   28a2e:	f8cd b000 	str.w	fp, [sp]
   28a32:	f003 fb35 	bl	2c0a0 <_sfread_r>
   28a36:	4680      	mov	r8, r0
   28a38:	2800      	cmp	r0, #0
   28a3a:	d18c      	bne.n	28956 <_flash_used+0x832>
   28a3c:	f7fe bda3 	b.w	27586 <__ssvfscanf_r+0x13e>
   28a40:	1b52      	subs	r2, r2, r5
   28a42:	442c      	add	r4, r5
   28a44:	442b      	add	r3, r5
   28a46:	44a2      	add	sl, r4
   28a48:	e9cb 3200 	strd	r3, r2, [fp]
   28a4c:	f7fe bdc9 	b.w	275e2 <__ssvfscanf_r+0x19a>
   28a50:	6818      	ldr	r0, [r3, #0]
   28a52:	e7b1      	b.n	289b8 <_flash_used+0x894>
   28a54:	6818      	ldr	r0, [r3, #0]
   28a56:	e763      	b.n	28920 <_flash_used+0x7fc>
   28a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28a5a:	2b00      	cmp	r3, #0
   28a5c:	f43f aca7 	beq.w	283ae <_flash_used+0x28a>
   28a60:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   28a64:	065b      	lsls	r3, r3, #25
   28a66:	f57e ad99 	bpl.w	2759c <__ssvfscanf_r+0x154>
   28a6a:	e49c      	b.n	283a6 <_flash_used+0x282>
   28a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   28a6e:	1c90      	adds	r0, r2, #2
   28a70:	d008      	beq.n	28a84 <_flash_used+0x960>
   28a72:	2a03      	cmp	r2, #3
   28a74:	449a      	add	sl, r3
   28a76:	f47f ac7e 	bne.w	28376 <_flash_used+0x252>
   28a7a:	6823      	ldr	r3, [r4, #0]
   28a7c:	2b04      	cmp	r3, #4
   28a7e:	f47f ac7a 	bne.w	28376 <_flash_used+0x252>
   28a82:	e479      	b.n	28378 <_flash_used+0x254>
   28a84:	f8db 2004 	ldr.w	r2, [fp, #4]
   28a88:	461c      	mov	r4, r3
   28a8a:	2a00      	cmp	r2, #0
   28a8c:	f73f ac3d 	bgt.w	2830a <_flash_used+0x1e6>
   28a90:	4659      	mov	r1, fp
   28a92:	ee18 0a10 	vmov	r0, s16
   28a96:	f003 fae5 	bl	2c064 <__ssrefill_r>
   28a9a:	b978      	cbnz	r0, 28abc <_flash_used+0x998>
   28a9c:	2d00      	cmp	r5, #0
   28a9e:	f47f ac34 	bne.w	2830a <_flash_used+0x1e6>
   28aa2:	eba6 0108 	sub.w	r1, r6, r8
   28aa6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
   28aaa:	d901      	bls.n	28ab0 <_flash_used+0x98c>
   28aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28aae:	b9c3      	cbnz	r3, 28ae2 <_flash_used+0x9be>
   28ab0:	69fb      	ldr	r3, [r7, #28]
   28ab2:	2b00      	cmp	r3, #0
   28ab4:	f47e ad95 	bne.w	275e2 <__ssvfscanf_r+0x19a>
   28ab8:	f7ff b8fa 	b.w	27cb0 <__ssvfscanf_r+0x868>
   28abc:	2c00      	cmp	r4, #0
   28abe:	d0f0      	beq.n	28aa2 <_flash_used+0x97e>
   28ac0:	f7fe bd61 	b.w	27586 <__ssvfscanf_r+0x13e>
   28ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28ac6:	1906      	adds	r6, r0, r4
   28ac8:	ea4f 0949 	mov.w	r9, r9, lsl #1
   28acc:	6018      	str	r0, [r3, #0]
   28ace:	3604      	adds	r6, #4
   28ad0:	f8db 3004 	ldr.w	r3, [fp, #4]
   28ad4:	2400      	movs	r4, #0
   28ad6:	2b00      	cmp	r3, #0
   28ad8:	ddda      	ble.n	28a90 <_flash_used+0x96c>
   28ada:	2d00      	cmp	r5, #0
   28adc:	f47f ac15 	bne.w	2830a <_flash_used+0x1e6>
   28ae0:	e7df      	b.n	28aa2 <_flash_used+0x97e>
   28ae2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   28ae4:	6820      	ldr	r0, [r4, #0]
   28ae6:	f7fd fd03 	bl	264f0 <realloc>
   28aea:	2800      	cmp	r0, #0
   28aec:	d0e0      	beq.n	28ab0 <_flash_used+0x98c>
   28aee:	6020      	str	r0, [r4, #0]
   28af0:	e7de      	b.n	28ab0 <_flash_used+0x98c>
   28af2:	bf00      	nop

00028af4 <__sprint_r.part.0>:
   28af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28af8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   28afa:	4690      	mov	r8, r2
   28afc:	049c      	lsls	r4, r3, #18
   28afe:	d52c      	bpl.n	28b5a <__sprint_r.part.0+0x66>
   28b00:	6893      	ldr	r3, [r2, #8]
   28b02:	6812      	ldr	r2, [r2, #0]
   28b04:	b33b      	cbz	r3, 28b56 <__sprint_r.part.0+0x62>
   28b06:	468b      	mov	fp, r1
   28b08:	4606      	mov	r6, r0
   28b0a:	f102 0908 	add.w	r9, r2, #8
   28b0e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   28b12:	ea5f 079a 	movs.w	r7, sl, lsr #2
   28b16:	d014      	beq.n	28b42 <__sprint_r.part.0+0x4e>
   28b18:	3d04      	subs	r5, #4
   28b1a:	2400      	movs	r4, #0
   28b1c:	e001      	b.n	28b22 <__sprint_r.part.0+0x2e>
   28b1e:	42a7      	cmp	r7, r4
   28b20:	d00d      	beq.n	28b3e <__sprint_r.part.0+0x4a>
   28b22:	465a      	mov	r2, fp
   28b24:	f855 1f04 	ldr.w	r1, [r5, #4]!
   28b28:	4630      	mov	r0, r6
   28b2a:	3401      	adds	r4, #1
   28b2c:	f001 fa30 	bl	29f90 <_fputwc_r>
   28b30:	1c43      	adds	r3, r0, #1
   28b32:	d1f4      	bne.n	28b1e <__sprint_r.part.0+0x2a>
   28b34:	2300      	movs	r3, #0
   28b36:	e9c8 3301 	strd	r3, r3, [r8, #4]
   28b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   28b42:	f02a 0a03 	bic.w	sl, sl, #3
   28b46:	f109 0908 	add.w	r9, r9, #8
   28b4a:	eba3 030a 	sub.w	r3, r3, sl
   28b4e:	f8c8 3008 	str.w	r3, [r8, #8]
   28b52:	2b00      	cmp	r3, #0
   28b54:	d1db      	bne.n	28b0e <__sprint_r.part.0+0x1a>
   28b56:	2000      	movs	r0, #0
   28b58:	e7ec      	b.n	28b34 <__sprint_r.part.0+0x40>
   28b5a:	f001 fba3 	bl	2a2a4 <__sfvwrite_r>
   28b5e:	2300      	movs	r3, #0
   28b60:	e9c8 3301 	strd	r3, r3, [r8, #4]
   28b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028b68 <_vfiprintf_r>:
   28b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b6c:	ed2d 8b02 	vpush	{d8}
   28b70:	b0bd      	sub	sp, #244	; 0xf4
   28b72:	461c      	mov	r4, r3
   28b74:	468a      	mov	sl, r1
   28b76:	4691      	mov	r9, r2
   28b78:	ee08 0a10 	vmov	s16, r0
   28b7c:	9306      	str	r3, [sp, #24]
   28b7e:	b118      	cbz	r0, 28b88 <_vfiprintf_r+0x20>
   28b80:	6b83      	ldr	r3, [r0, #56]	; 0x38
   28b82:	2b00      	cmp	r3, #0
   28b84:	f000 8279 	beq.w	2907a <_vfiprintf_r+0x512>
   28b88:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28b8c:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   28b90:	07db      	lsls	r3, r3, #31
   28b92:	b28a      	uxth	r2, r1
   28b94:	d402      	bmi.n	28b9c <_vfiprintf_r+0x34>
   28b96:	058f      	lsls	r7, r1, #22
   28b98:	f140 8508 	bpl.w	295ac <_vfiprintf_r+0xa44>
   28b9c:	0496      	lsls	r6, r2, #18
   28b9e:	d40a      	bmi.n	28bb6 <_vfiprintf_r+0x4e>
   28ba0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   28ba4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28ba8:	b28a      	uxth	r2, r1
   28baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   28bae:	f8aa 100c 	strh.w	r1, [sl, #12]
   28bb2:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
   28bb6:	0715      	lsls	r5, r2, #28
   28bb8:	f140 80f3 	bpl.w	28da2 <_vfiprintf_r+0x23a>
   28bbc:	f8da 3010 	ldr.w	r3, [sl, #16]
   28bc0:	2b00      	cmp	r3, #0
   28bc2:	f000 80ee 	beq.w	28da2 <_vfiprintf_r+0x23a>
   28bc6:	f002 031a 	and.w	r3, r2, #26
   28bca:	2b0a      	cmp	r3, #10
   28bcc:	f000 80f8 	beq.w	28dc0 <_vfiprintf_r+0x258>
   28bd0:	2300      	movs	r3, #0
   28bd2:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28bd6:	ee18 ba10 	vmov	fp, s16
   28bda:	9309      	str	r3, [sp, #36]	; 0x24
   28bdc:	9312      	str	r3, [sp, #72]	; 0x48
   28bde:	930a      	str	r3, [sp, #40]	; 0x28
   28be0:	9305      	str	r3, [sp, #20]
   28be2:	9311      	str	r3, [sp, #68]	; 0x44
   28be4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   28be8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   28bec:	f899 3000 	ldrb.w	r3, [r9]
   28bf0:	464c      	mov	r4, r9
   28bf2:	2b25      	cmp	r3, #37	; 0x25
   28bf4:	d01c      	beq.n	28c30 <_vfiprintf_r+0xc8>
   28bf6:	b1db      	cbz	r3, 28c30 <_vfiprintf_r+0xc8>
   28bf8:	4625      	mov	r5, r4
   28bfa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   28bfe:	b10b      	cbz	r3, 28c04 <_vfiprintf_r+0x9c>
   28c00:	2b25      	cmp	r3, #37	; 0x25
   28c02:	d1f9      	bne.n	28bf8 <_vfiprintf_r+0x90>
   28c04:	ebb4 0609 	subs.w	r6, r4, r9
   28c08:	d012      	beq.n	28c30 <_vfiprintf_r+0xc8>
   28c0a:	f8c8 9000 	str.w	r9, [r8]
   28c0e:	f8c8 6004 	str.w	r6, [r8, #4]
   28c12:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   28c16:	3301      	adds	r3, #1
   28c18:	4432      	add	r2, r6
   28c1a:	2b07      	cmp	r3, #7
   28c1c:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   28c20:	f300 812b 	bgt.w	28e7a <_vfiprintf_r+0x312>
   28c24:	f108 0808 	add.w	r8, r8, #8
   28c28:	9b05      	ldr	r3, [sp, #20]
   28c2a:	4433      	add	r3, r6
   28c2c:	9305      	str	r3, [sp, #20]
   28c2e:	786b      	ldrb	r3, [r5, #1]
   28c30:	2b00      	cmp	r3, #0
   28c32:	f000 812e 	beq.w	28e92 <_vfiprintf_r+0x32a>
   28c36:	f04f 0300 	mov.w	r3, #0
   28c3a:	2600      	movs	r6, #0
   28c3c:	f04f 32ff 	mov.w	r2, #4294967295
   28c40:	f104 0901 	add.w	r9, r4, #1
   28c44:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28c48:	252b      	movs	r5, #43	; 0x2b
   28c4a:	7863      	ldrb	r3, [r4, #1]
   28c4c:	9604      	str	r6, [sp, #16]
   28c4e:	9202      	str	r2, [sp, #8]
   28c50:	f109 0901 	add.w	r9, r9, #1
   28c54:	f1a3 0220 	sub.w	r2, r3, #32
   28c58:	2a5a      	cmp	r2, #90	; 0x5a
   28c5a:	f200 8131 	bhi.w	28ec0 <_vfiprintf_r+0x358>
   28c5e:	e8df f012 	tbh	[pc, r2, lsl #1]
   28c62:	006a      	.short	0x006a
   28c64:	012f012f 	.word	0x012f012f
   28c68:	012f0262 	.word	0x012f0262
   28c6c:	012f012f 	.word	0x012f012f
   28c70:	012f0242 	.word	0x012f0242
   28c74:	020f012f 	.word	0x020f012f
   28c78:	012f021f 	.word	0x012f021f
   28c7c:	0229021a 	.word	0x0229021a
   28c80:	0224012f 	.word	0x0224012f
   28c84:	005b005b 	.word	0x005b005b
   28c88:	005b005b 	.word	0x005b005b
   28c8c:	005b005b 	.word	0x005b005b
   28c90:	005b005b 	.word	0x005b005b
   28c94:	012f005b 	.word	0x012f005b
   28c98:	012f012f 	.word	0x012f012f
   28c9c:	012f012f 	.word	0x012f012f
   28ca0:	012f012f 	.word	0x012f012f
   28ca4:	012f012f 	.word	0x012f012f
   28ca8:	007701fd 	.word	0x007701fd
   28cac:	012f012f 	.word	0x012f012f
   28cb0:	012f012f 	.word	0x012f012f
   28cb4:	012f012f 	.word	0x012f012f
   28cb8:	012f012f 	.word	0x012f012f
   28cbc:	012f012f 	.word	0x012f012f
   28cc0:	012f00c9 	.word	0x012f00c9
   28cc4:	012f012f 	.word	0x012f012f
   28cc8:	012f01e1 	.word	0x012f01e1
   28ccc:	012f0277 	.word	0x012f0277
   28cd0:	04e8012f 	.word	0x04e8012f
   28cd4:	012f012f 	.word	0x012f012f
   28cd8:	012f012f 	.word	0x012f012f
   28cdc:	012f012f 	.word	0x012f012f
   28ce0:	012f012f 	.word	0x012f012f
   28ce4:	012f012f 	.word	0x012f012f
   28ce8:	007901fd 	.word	0x007901fd
   28cec:	012f012f 	.word	0x012f012f
   28cf0:	026f012f 	.word	0x026f012f
   28cf4:	00720079 	.word	0x00720079
   28cf8:	0267012f 	.word	0x0267012f
   28cfc:	0298012f 	.word	0x0298012f
   28d00:	028700cb 	.word	0x028700cb
   28d04:	012f0072 	.word	0x012f0072
   28d08:	006f01e1 	.word	0x006f01e1
   28d0c:	012f04e6 	.word	0x012f04e6
   28d10:	0505012f 	.word	0x0505012f
   28d14:	006f012f 	.word	0x006f012f
   28d18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28d1c:	2100      	movs	r1, #0
   28d1e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28d22:	f819 3b01 	ldrb.w	r3, [r9], #1
   28d26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   28d2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28d2e:	2a09      	cmp	r2, #9
   28d30:	d9f5      	bls.n	28d1e <_vfiprintf_r+0x1b6>
   28d32:	9104      	str	r1, [sp, #16]
   28d34:	e78e      	b.n	28c54 <_vfiprintf_r+0xec>
   28d36:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   28d3a:	2b00      	cmp	r3, #0
   28d3c:	f000 8453 	beq.w	295e6 <_vfiprintf_r+0xa7e>
   28d40:	f899 3000 	ldrb.w	r3, [r9]
   28d44:	e784      	b.n	28c50 <_vfiprintf_r+0xe8>
   28d46:	f046 0620 	orr.w	r6, r6, #32
   28d4a:	f899 3000 	ldrb.w	r3, [r9]
   28d4e:	e77f      	b.n	28c50 <_vfiprintf_r+0xe8>
   28d50:	f046 0610 	orr.w	r6, r6, #16
   28d54:	06b7      	lsls	r7, r6, #26
   28d56:	f140 814a 	bpl.w	28fee <_vfiprintf_r+0x486>
   28d5a:	9c06      	ldr	r4, [sp, #24]
   28d5c:	3407      	adds	r4, #7
   28d5e:	f024 0307 	bic.w	r3, r4, #7
   28d62:	4619      	mov	r1, r3
   28d64:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   28d68:	4614      	mov	r4, r2
   28d6a:	461d      	mov	r5, r3
   28d6c:	9106      	str	r1, [sp, #24]
   28d6e:	2a00      	cmp	r2, #0
   28d70:	f173 0300 	sbcs.w	r3, r3, #0
   28d74:	f2c0 83f9 	blt.w	2956a <_vfiprintf_r+0xa02>
   28d78:	9b02      	ldr	r3, [sp, #8]
   28d7a:	3301      	adds	r3, #1
   28d7c:	f000 83b3 	beq.w	294e6 <_vfiprintf_r+0x97e>
   28d80:	ea54 0305 	orrs.w	r3, r4, r5
   28d84:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   28d88:	f040 83ad 	bne.w	294e6 <_vfiprintf_r+0x97e>
   28d8c:	9a02      	ldr	r2, [sp, #8]
   28d8e:	1e13      	subs	r3, r2, #0
   28d90:	bf18      	it	ne
   28d92:	2301      	movne	r3, #1
   28d94:	2a00      	cmp	r2, #0
   28d96:	f040 83a6 	bne.w	294e6 <_vfiprintf_r+0x97e>
   28d9a:	af3c      	add	r7, sp, #240	; 0xf0
   28d9c:	9302      	str	r3, [sp, #8]
   28d9e:	9303      	str	r3, [sp, #12]
   28da0:	e05e      	b.n	28e60 <_vfiprintf_r+0x2f8>
   28da2:	4651      	mov	r1, sl
   28da4:	ee18 0a10 	vmov	r0, s16
   28da8:	f000 fe4a 	bl	29a40 <__swsetup_r>
   28dac:	2800      	cmp	r0, #0
   28dae:	f040 856b 	bne.w	29888 <_vfiprintf_r+0xd20>
   28db2:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   28db6:	f002 031a 	and.w	r3, r2, #26
   28dba:	2b0a      	cmp	r3, #10
   28dbc:	f47f af08 	bne.w	28bd0 <_vfiprintf_r+0x68>
   28dc0:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
   28dc4:	2b00      	cmp	r3, #0
   28dc6:	f6ff af03 	blt.w	28bd0 <_vfiprintf_r+0x68>
   28dca:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28dce:	07d9      	lsls	r1, r3, #31
   28dd0:	d402      	bmi.n	28dd8 <_vfiprintf_r+0x270>
   28dd2:	0593      	lsls	r3, r2, #22
   28dd4:	f140 850c 	bpl.w	297f0 <_vfiprintf_r+0xc88>
   28dd8:	4623      	mov	r3, r4
   28dda:	464a      	mov	r2, r9
   28ddc:	4651      	mov	r1, sl
   28dde:	ee18 0a10 	vmov	r0, s16
   28de2:	f000 fd6d 	bl	298c0 <__sbprintf>
   28de6:	9005      	str	r0, [sp, #20]
   28de8:	9805      	ldr	r0, [sp, #20]
   28dea:	b03d      	add	sp, #244	; 0xf4
   28dec:	ecbd 8b02 	vpop	{d8}
   28df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28df4:	f046 0610 	orr.w	r6, r6, #16
   28df8:	06b5      	lsls	r5, r6, #26
   28dfa:	9c06      	ldr	r4, [sp, #24]
   28dfc:	f140 8106 	bpl.w	2900c <_vfiprintf_r+0x4a4>
   28e00:	3407      	adds	r4, #7
   28e02:	f024 0307 	bic.w	r3, r4, #7
   28e06:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   28e0a:	9306      	str	r3, [sp, #24]
   28e0c:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   28e10:	9301      	str	r3, [sp, #4]
   28e12:	2300      	movs	r3, #0
   28e14:	f04f 0200 	mov.w	r2, #0
   28e18:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   28e1c:	9a02      	ldr	r2, [sp, #8]
   28e1e:	4611      	mov	r1, r2
   28e20:	3101      	adds	r1, #1
   28e22:	f000 81d5 	beq.w	291d0 <_vfiprintf_r+0x668>
   28e26:	9901      	ldr	r1, [sp, #4]
   28e28:	f021 0680 	bic.w	r6, r1, #128	; 0x80
   28e2c:	ea54 0105 	orrs.w	r1, r4, r5
   28e30:	f040 81cd 	bne.w	291ce <_vfiprintf_r+0x666>
   28e34:	4611      	mov	r1, r2
   28e36:	3a00      	subs	r2, #0
   28e38:	bf18      	it	ne
   28e3a:	2201      	movne	r2, #1
   28e3c:	2900      	cmp	r1, #0
   28e3e:	f040 81c6 	bne.w	291ce <_vfiprintf_r+0x666>
   28e42:	2b00      	cmp	r3, #0
   28e44:	f040 834b 	bne.w	294de <_vfiprintf_r+0x976>
   28e48:	9a01      	ldr	r2, [sp, #4]
   28e4a:	f012 0201 	ands.w	r2, r2, #1
   28e4e:	9203      	str	r2, [sp, #12]
   28e50:	f000 8379 	beq.w	29546 <_vfiprintf_r+0x9de>
   28e54:	2230      	movs	r2, #48	; 0x30
   28e56:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   28e5a:	9302      	str	r3, [sp, #8]
   28e5c:	f88d 20ef 	strb.w	r2, [sp, #239]	; 0xef
   28e60:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   28e64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   28e68:	428a      	cmp	r2, r1
   28e6a:	bfb8      	it	lt
   28e6c:	460a      	movlt	r2, r1
   28e6e:	9201      	str	r2, [sp, #4]
   28e70:	2b00      	cmp	r3, #0
   28e72:	d033      	beq.n	28edc <_vfiprintf_r+0x374>
   28e74:	3201      	adds	r2, #1
   28e76:	9201      	str	r2, [sp, #4]
   28e78:	e030      	b.n	28edc <_vfiprintf_r+0x374>
   28e7a:	2a00      	cmp	r2, #0
   28e7c:	f000 835e 	beq.w	2953c <_vfiprintf_r+0x9d4>
   28e80:	aa10      	add	r2, sp, #64	; 0x40
   28e82:	4651      	mov	r1, sl
   28e84:	4658      	mov	r0, fp
   28e86:	f7ff fe35 	bl	28af4 <__sprint_r.part.0>
   28e8a:	b940      	cbnz	r0, 28e9e <_vfiprintf_r+0x336>
   28e8c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28e90:	e6ca      	b.n	28c28 <_vfiprintf_r+0xc0>
   28e92:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28e94:	2b00      	cmp	r3, #0
   28e96:	f040 84d8 	bne.w	2984a <_vfiprintf_r+0xce2>
   28e9a:	2300      	movs	r3, #0
   28e9c:	9311      	str	r3, [sp, #68]	; 0x44
   28e9e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28ea2:	f013 0f01 	tst.w	r3, #1
   28ea6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   28eaa:	f000 8096 	beq.w	28fda <_vfiprintf_r+0x472>
   28eae:	065b      	lsls	r3, r3, #25
   28eb0:	f100 84d6 	bmi.w	29860 <_vfiprintf_r+0xcf8>
   28eb4:	9805      	ldr	r0, [sp, #20]
   28eb6:	b03d      	add	sp, #244	; 0xf4
   28eb8:	ecbd 8b02 	vpop	{d8}
   28ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ec0:	2b00      	cmp	r3, #0
   28ec2:	d0e6      	beq.n	28e92 <_vfiprintf_r+0x32a>
   28ec4:	2201      	movs	r2, #1
   28ec6:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   28eca:	af23      	add	r7, sp, #140	; 0x8c
   28ecc:	f04f 0300 	mov.w	r3, #0
   28ed0:	9201      	str	r2, [sp, #4]
   28ed2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28ed6:	9203      	str	r2, [sp, #12]
   28ed8:	2300      	movs	r3, #0
   28eda:	9302      	str	r3, [sp, #8]
   28edc:	f016 0302 	ands.w	r3, r6, #2
   28ee0:	9307      	str	r3, [sp, #28]
   28ee2:	d002      	beq.n	28eea <_vfiprintf_r+0x382>
   28ee4:	9b01      	ldr	r3, [sp, #4]
   28ee6:	3302      	adds	r3, #2
   28ee8:	9301      	str	r3, [sp, #4]
   28eea:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   28eee:	9308      	str	r3, [sp, #32]
   28ef0:	d105      	bne.n	28efe <_vfiprintf_r+0x396>
   28ef2:	9b04      	ldr	r3, [sp, #16]
   28ef4:	9a01      	ldr	r2, [sp, #4]
   28ef6:	1a9c      	subs	r4, r3, r2
   28ef8:	2c00      	cmp	r4, #0
   28efa:	f300 8259 	bgt.w	293b0 <_vfiprintf_r+0x848>
   28efe:	e9dd 2c11 	ldrd	r2, ip, [sp, #68]	; 0x44
   28f02:	1c51      	adds	r1, r2, #1
   28f04:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   28f08:	b178      	cbz	r0, 28f2a <_vfiprintf_r+0x3c2>
   28f0a:	f10c 0c01 	add.w	ip, ip, #1
   28f0e:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   28f12:	2201      	movs	r2, #1
   28f14:	2907      	cmp	r1, #7
   28f16:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28f1a:	e9c8 0200 	strd	r0, r2, [r8]
   28f1e:	f300 8227 	bgt.w	29370 <_vfiprintf_r+0x808>
   28f22:	460a      	mov	r2, r1
   28f24:	f108 0808 	add.w	r8, r8, #8
   28f28:	3101      	adds	r1, #1
   28f2a:	9b07      	ldr	r3, [sp, #28]
   28f2c:	b1db      	cbz	r3, 28f66 <_vfiprintf_r+0x3fe>
   28f2e:	f10c 0c02 	add.w	ip, ip, #2
   28f32:	aa0f      	add	r2, sp, #60	; 0x3c
   28f34:	2302      	movs	r3, #2
   28f36:	2907      	cmp	r1, #7
   28f38:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28f3c:	e9c8 2300 	strd	r2, r3, [r8]
   28f40:	f340 8231 	ble.w	293a6 <_vfiprintf_r+0x83e>
   28f44:	f1bc 0f00 	cmp.w	ip, #0
   28f48:	f000 82e0 	beq.w	2950c <_vfiprintf_r+0x9a4>
   28f4c:	aa10      	add	r2, sp, #64	; 0x40
   28f4e:	4651      	mov	r1, sl
   28f50:	4658      	mov	r0, fp
   28f52:	f7ff fdcf 	bl	28af4 <__sprint_r.part.0>
   28f56:	2800      	cmp	r0, #0
   28f58:	d1a1      	bne.n	28e9e <_vfiprintf_r+0x336>
   28f5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   28f5c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f60:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   28f64:	1c51      	adds	r1, r2, #1
   28f66:	9b08      	ldr	r3, [sp, #32]
   28f68:	2b80      	cmp	r3, #128	; 0x80
   28f6a:	f000 8169 	beq.w	29240 <_vfiprintf_r+0x6d8>
   28f6e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   28f72:	1a1c      	subs	r4, r3, r0
   28f74:	2c00      	cmp	r4, #0
   28f76:	f300 81b8 	bgt.w	292ea <_vfiprintf_r+0x782>
   28f7a:	9a03      	ldr	r2, [sp, #12]
   28f7c:	2907      	cmp	r1, #7
   28f7e:	4613      	mov	r3, r2
   28f80:	4463      	add	r3, ip
   28f82:	e9c8 7200 	strd	r7, r2, [r8]
   28f86:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
   28f8a:	f340 811d 	ble.w	291c8 <_vfiprintf_r+0x660>
   28f8e:	2b00      	cmp	r3, #0
   28f90:	f000 824a 	beq.w	29428 <_vfiprintf_r+0x8c0>
   28f94:	aa10      	add	r2, sp, #64	; 0x40
   28f96:	4651      	mov	r1, sl
   28f98:	4658      	mov	r0, fp
   28f9a:	f7ff fdab 	bl	28af4 <__sprint_r.part.0>
   28f9e:	2800      	cmp	r0, #0
   28fa0:	f47f af7d 	bne.w	28e9e <_vfiprintf_r+0x336>
   28fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28fa6:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28faa:	0771      	lsls	r1, r6, #29
   28fac:	d505      	bpl.n	28fba <_vfiprintf_r+0x452>
   28fae:	9a04      	ldr	r2, [sp, #16]
   28fb0:	9901      	ldr	r1, [sp, #4]
   28fb2:	1a54      	subs	r4, r2, r1
   28fb4:	2c00      	cmp	r4, #0
   28fb6:	f300 8241 	bgt.w	2943c <_vfiprintf_r+0x8d4>
   28fba:	9801      	ldr	r0, [sp, #4]
   28fbc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   28fc0:	4281      	cmp	r1, r0
   28fc2:	bfac      	ite	ge
   28fc4:	1852      	addge	r2, r2, r1
   28fc6:	1812      	addlt	r2, r2, r0
   28fc8:	9205      	str	r2, [sp, #20]
   28fca:	2b00      	cmp	r3, #0
   28fcc:	f040 81c7 	bne.w	2935e <_vfiprintf_r+0x7f6>
   28fd0:	2300      	movs	r3, #0
   28fd2:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28fd6:	9311      	str	r3, [sp, #68]	; 0x44
   28fd8:	e608      	b.n	28bec <_vfiprintf_r+0x84>
   28fda:	059a      	lsls	r2, r3, #22
   28fdc:	f53f af67 	bmi.w	28eae <_vfiprintf_r+0x346>
   28fe0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   28fe4:	f001 ff00 	bl	2ade8 <__retarget_lock_release_recursive>
   28fe8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   28fec:	e75f      	b.n	28eae <_vfiprintf_r+0x346>
   28fee:	9b06      	ldr	r3, [sp, #24]
   28ff0:	06f5      	lsls	r5, r6, #27
   28ff2:	f853 4b04 	ldr.w	r4, [r3], #4
   28ff6:	f100 82ea 	bmi.w	295ce <_vfiprintf_r+0xa66>
   28ffa:	0670      	lsls	r0, r6, #25
   28ffc:	f140 82e4 	bpl.w	295c8 <_vfiprintf_r+0xa60>
   29000:	b224      	sxth	r4, r4
   29002:	9306      	str	r3, [sp, #24]
   29004:	17e5      	asrs	r5, r4, #31
   29006:	4622      	mov	r2, r4
   29008:	462b      	mov	r3, r5
   2900a:	e6b0      	b.n	28d6e <_vfiprintf_r+0x206>
   2900c:	f854 3b04 	ldr.w	r3, [r4], #4
   29010:	06f0      	lsls	r0, r6, #27
   29012:	9406      	str	r4, [sp, #24]
   29014:	f100 82e4 	bmi.w	295e0 <_vfiprintf_r+0xa78>
   29018:	0671      	lsls	r1, r6, #25
   2901a:	f140 82de 	bpl.w	295da <_vfiprintf_r+0xa72>
   2901e:	b29c      	uxth	r4, r3
   29020:	2500      	movs	r5, #0
   29022:	e6f3      	b.n	28e0c <_vfiprintf_r+0x2a4>
   29024:	9c06      	ldr	r4, [sp, #24]
   29026:	f04f 0300 	mov.w	r3, #0
   2902a:	f854 7b04 	ldr.w	r7, [r4], #4
   2902e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   29032:	2f00      	cmp	r7, #0
   29034:	f000 839d 	beq.w	29772 <_vfiprintf_r+0xc0a>
   29038:	9a02      	ldr	r2, [sp, #8]
   2903a:	4613      	mov	r3, r2
   2903c:	3301      	adds	r3, #1
   2903e:	f000 8318 	beq.w	29672 <_vfiprintf_r+0xb0a>
   29042:	2100      	movs	r1, #0
   29044:	4638      	mov	r0, r7
   29046:	f7fd f98b 	bl	26360 <memchr>
   2904a:	2800      	cmp	r0, #0
   2904c:	f000 83ea 	beq.w	29824 <_vfiprintf_r+0xcbc>
   29050:	1bc3      	subs	r3, r0, r7
   29052:	9406      	str	r4, [sp, #24]
   29054:	9303      	str	r3, [sp, #12]
   29056:	2300      	movs	r3, #0
   29058:	9302      	str	r3, [sp, #8]
   2905a:	e701      	b.n	28e60 <_vfiprintf_r+0x2f8>
   2905c:	9c06      	ldr	r4, [sp, #24]
   2905e:	f04f 0300 	mov.w	r3, #0
   29062:	2201      	movs	r2, #1
   29064:	af23      	add	r7, sp, #140	; 0x8c
   29066:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   2906a:	f854 3b04 	ldr.w	r3, [r4], #4
   2906e:	9201      	str	r2, [sp, #4]
   29070:	9203      	str	r2, [sp, #12]
   29072:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   29076:	9406      	str	r4, [sp, #24]
   29078:	e72e      	b.n	28ed8 <_vfiprintf_r+0x370>
   2907a:	f000 fefd 	bl	29e78 <__sinit>
   2907e:	e583      	b.n	28b88 <_vfiprintf_r+0x20>
   29080:	9b06      	ldr	r3, [sp, #24]
   29082:	f853 2b04 	ldr.w	r2, [r3], #4
   29086:	2a00      	cmp	r2, #0
   29088:	9204      	str	r2, [sp, #16]
   2908a:	f280 828a 	bge.w	295a2 <_vfiprintf_r+0xa3a>
   2908e:	9a04      	ldr	r2, [sp, #16]
   29090:	9306      	str	r3, [sp, #24]
   29092:	4252      	negs	r2, r2
   29094:	9204      	str	r2, [sp, #16]
   29096:	f046 0604 	orr.w	r6, r6, #4
   2909a:	f899 3000 	ldrb.w	r3, [r9]
   2909e:	e5d7      	b.n	28c50 <_vfiprintf_r+0xe8>
   290a0:	f899 3000 	ldrb.w	r3, [r9]
   290a4:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   290a8:	e5d2      	b.n	28c50 <_vfiprintf_r+0xe8>
   290aa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   290ae:	f899 3000 	ldrb.w	r3, [r9]
   290b2:	e5cd      	b.n	28c50 <_vfiprintf_r+0xe8>
   290b4:	4649      	mov	r1, r9
   290b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   290ba:	2b2a      	cmp	r3, #42	; 0x2a
   290bc:	f000 83d8 	beq.w	29870 <_vfiprintf_r+0xd08>
   290c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   290c4:	4689      	mov	r9, r1
   290c6:	2a09      	cmp	r2, #9
   290c8:	f200 83b7 	bhi.w	2983a <_vfiprintf_r+0xcd2>
   290cc:	2100      	movs	r1, #0
   290ce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   290d2:	f819 3b01 	ldrb.w	r3, [r9], #1
   290d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   290da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   290de:	2a09      	cmp	r2, #9
   290e0:	d9f5      	bls.n	290ce <_vfiprintf_r+0x566>
   290e2:	9102      	str	r1, [sp, #8]
   290e4:	e5b6      	b.n	28c54 <_vfiprintf_r+0xec>
   290e6:	4658      	mov	r0, fp
   290e8:	f001 fe74 	bl	2add4 <_localeconv_r>
   290ec:	6843      	ldr	r3, [r0, #4]
   290ee:	4618      	mov	r0, r3
   290f0:	930b      	str	r3, [sp, #44]	; 0x2c
   290f2:	f7fd fdb1 	bl	26c58 <strlen>
   290f6:	4603      	mov	r3, r0
   290f8:	4658      	mov	r0, fp
   290fa:	461c      	mov	r4, r3
   290fc:	930c      	str	r3, [sp, #48]	; 0x30
   290fe:	f001 fe69 	bl	2add4 <_localeconv_r>
   29102:	6882      	ldr	r2, [r0, #8]
   29104:	920a      	str	r2, [sp, #40]	; 0x28
   29106:	2c00      	cmp	r4, #0
   29108:	f43f ae1a 	beq.w	28d40 <_vfiprintf_r+0x1d8>
   2910c:	2a00      	cmp	r2, #0
   2910e:	f43f ae17 	beq.w	28d40 <_vfiprintf_r+0x1d8>
   29112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29114:	781b      	ldrb	r3, [r3, #0]
   29116:	2b00      	cmp	r3, #0
   29118:	f43f ae12 	beq.w	28d40 <_vfiprintf_r+0x1d8>
   2911c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   29120:	f899 3000 	ldrb.w	r3, [r9]
   29124:	e594      	b.n	28c50 <_vfiprintf_r+0xe8>
   29126:	f046 0601 	orr.w	r6, r6, #1
   2912a:	f899 3000 	ldrb.w	r3, [r9]
   2912e:	e58f      	b.n	28c50 <_vfiprintf_r+0xe8>
   29130:	f899 3000 	ldrb.w	r3, [r9]
   29134:	2b6c      	cmp	r3, #108	; 0x6c
   29136:	f000 830c 	beq.w	29752 <_vfiprintf_r+0xbea>
   2913a:	f046 0610 	orr.w	r6, r6, #16
   2913e:	e587      	b.n	28c50 <_vfiprintf_r+0xe8>
   29140:	f899 3000 	ldrb.w	r3, [r9]
   29144:	2b68      	cmp	r3, #104	; 0x68
   29146:	f000 82fc 	beq.w	29742 <_vfiprintf_r+0xbda>
   2914a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   2914e:	e57f      	b.n	28c50 <_vfiprintf_r+0xe8>
   29150:	f046 0310 	orr.w	r3, r6, #16
   29154:	9301      	str	r3, [sp, #4]
   29156:	9b01      	ldr	r3, [sp, #4]
   29158:	069b      	lsls	r3, r3, #26
   2915a:	f140 81f7 	bpl.w	2954c <_vfiprintf_r+0x9e4>
   2915e:	9c06      	ldr	r4, [sp, #24]
   29160:	2301      	movs	r3, #1
   29162:	3407      	adds	r4, #7
   29164:	f024 0207 	bic.w	r2, r4, #7
   29168:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   2916c:	9206      	str	r2, [sp, #24]
   2916e:	e651      	b.n	28e14 <_vfiprintf_r+0x2ac>
   29170:	9c06      	ldr	r4, [sp, #24]
   29172:	f046 0302 	orr.w	r3, r6, #2
   29176:	f647 0130 	movw	r1, #30768	; 0x7830
   2917a:	2500      	movs	r5, #0
   2917c:	f854 2b04 	ldr.w	r2, [r4], #4
   29180:	9301      	str	r3, [sp, #4]
   29182:	4bb2      	ldr	r3, [pc, #712]	; (2944c <_vfiprintf_r+0x8e4>)
   29184:	9406      	str	r4, [sp, #24]
   29186:	4614      	mov	r4, r2
   29188:	9309      	str	r3, [sp, #36]	; 0x24
   2918a:	2302      	movs	r3, #2
   2918c:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
   29190:	e640      	b.n	28e14 <_vfiprintf_r+0x2ac>
   29192:	06b2      	lsls	r2, r6, #26
   29194:	f100 822e 	bmi.w	295f4 <_vfiprintf_r+0xa8c>
   29198:	06f3      	lsls	r3, r6, #27
   2919a:	f100 82e2 	bmi.w	29762 <_vfiprintf_r+0xbfa>
   2919e:	0677      	lsls	r7, r6, #25
   291a0:	f100 8310 	bmi.w	297c4 <_vfiprintf_r+0xc5c>
   291a4:	05b6      	lsls	r6, r6, #22
   291a6:	f140 82dc 	bpl.w	29762 <_vfiprintf_r+0xbfa>
   291aa:	9c06      	ldr	r4, [sp, #24]
   291ac:	9a05      	ldr	r2, [sp, #20]
   291ae:	f854 3b04 	ldr.w	r3, [r4], #4
   291b2:	701a      	strb	r2, [r3, #0]
   291b4:	9406      	str	r4, [sp, #24]
   291b6:	e519      	b.n	28bec <_vfiprintf_r+0x84>
   291b8:	9b03      	ldr	r3, [sp, #12]
   291ba:	2201      	movs	r2, #1
   291bc:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   291c0:	9713      	str	r7, [sp, #76]	; 0x4c
   291c2:	9314      	str	r3, [sp, #80]	; 0x50
   291c4:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
   291c8:	f108 0808 	add.w	r8, r8, #8
   291cc:	e6ed      	b.n	28faa <_vfiprintf_r+0x442>
   291ce:	9601      	str	r6, [sp, #4]
   291d0:	2b01      	cmp	r3, #1
   291d2:	f000 8189 	beq.w	294e8 <_vfiprintf_r+0x980>
   291d6:	2b02      	cmp	r3, #2
   291d8:	af3c      	add	r7, sp, #240	; 0xf0
   291da:	d113      	bne.n	29204 <_vfiprintf_r+0x69c>
   291dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   291de:	0923      	lsrs	r3, r4, #4
   291e0:	f004 010f 	and.w	r1, r4, #15
   291e4:	092a      	lsrs	r2, r5, #4
   291e6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   291ea:	4615      	mov	r5, r2
   291ec:	461c      	mov	r4, r3
   291ee:	5c43      	ldrb	r3, [r0, r1]
   291f0:	f807 3d01 	strb.w	r3, [r7, #-1]!
   291f4:	ea54 0305 	orrs.w	r3, r4, r5
   291f8:	d1f1      	bne.n	291de <_vfiprintf_r+0x676>
   291fa:	ab3c      	add	r3, sp, #240	; 0xf0
   291fc:	9e01      	ldr	r6, [sp, #4]
   291fe:	1bdb      	subs	r3, r3, r7
   29200:	9303      	str	r3, [sp, #12]
   29202:	e62d      	b.n	28e60 <_vfiprintf_r+0x2f8>
   29204:	08e2      	lsrs	r2, r4, #3
   29206:	f004 0307 	and.w	r3, r4, #7
   2920a:	08e9      	lsrs	r1, r5, #3
   2920c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   29210:	3330      	adds	r3, #48	; 0x30
   29212:	460d      	mov	r5, r1
   29214:	4614      	mov	r4, r2
   29216:	463a      	mov	r2, r7
   29218:	f807 3d01 	strb.w	r3, [r7, #-1]!
   2921c:	ea54 0105 	orrs.w	r1, r4, r5
   29220:	d1f0      	bne.n	29204 <_vfiprintf_r+0x69c>
   29222:	2b30      	cmp	r3, #48	; 0x30
   29224:	d0e9      	beq.n	291fa <_vfiprintf_r+0x692>
   29226:	9b01      	ldr	r3, [sp, #4]
   29228:	07dc      	lsls	r4, r3, #31
   2922a:	d5e6      	bpl.n	291fa <_vfiprintf_r+0x692>
   2922c:	2330      	movs	r3, #48	; 0x30
   2922e:	3a02      	subs	r2, #2
   29230:	9e01      	ldr	r6, [sp, #4]
   29232:	f807 3c01 	strb.w	r3, [r7, #-1]
   29236:	ab3c      	add	r3, sp, #240	; 0xf0
   29238:	4617      	mov	r7, r2
   2923a:	1a9b      	subs	r3, r3, r2
   2923c:	9303      	str	r3, [sp, #12]
   2923e:	e60f      	b.n	28e60 <_vfiprintf_r+0x2f8>
   29240:	9b04      	ldr	r3, [sp, #16]
   29242:	9801      	ldr	r0, [sp, #4]
   29244:	1a1c      	subs	r4, r3, r0
   29246:	2c00      	cmp	r4, #0
   29248:	f77f ae91 	ble.w	28f6e <_vfiprintf_r+0x406>
   2924c:	2c10      	cmp	r4, #16
   2924e:	f340 830c 	ble.w	2986a <_vfiprintf_r+0xd02>
   29252:	9607      	str	r6, [sp, #28]
   29254:	4666      	mov	r6, ip
   29256:	4d7e      	ldr	r5, [pc, #504]	; (29450 <_vfiprintf_r+0x8e8>)
   29258:	e00a      	b.n	29270 <_vfiprintf_r+0x708>
   2925a:	f7ff fc4b 	bl	28af4 <__sprint_r.part.0>
   2925e:	2800      	cmp	r0, #0
   29260:	f47f ae1d 	bne.w	28e9e <_vfiprintf_r+0x336>
   29264:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   29268:	1c50      	adds	r0, r2, #1
   2926a:	3c10      	subs	r4, #16
   2926c:	2c10      	cmp	r4, #16
   2926e:	dd1a      	ble.n	292a6 <_vfiprintf_r+0x73e>
   29270:	1c53      	adds	r3, r2, #1
   29272:	3610      	adds	r6, #16
   29274:	2110      	movs	r1, #16
   29276:	1c90      	adds	r0, r2, #2
   29278:	2b07      	cmp	r3, #7
   2927a:	f8c8 5000 	str.w	r5, [r8]
   2927e:	f8c8 1004 	str.w	r1, [r8, #4]
   29282:	461a      	mov	r2, r3
   29284:	f108 0808 	add.w	r8, r8, #8
   29288:	9612      	str	r6, [sp, #72]	; 0x48
   2928a:	9311      	str	r3, [sp, #68]	; 0x44
   2928c:	dded      	ble.n	2926a <_vfiprintf_r+0x702>
   2928e:	aa10      	add	r2, sp, #64	; 0x40
   29290:	4651      	mov	r1, sl
   29292:	4658      	mov	r0, fp
   29294:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29298:	2e00      	cmp	r6, #0
   2929a:	d1de      	bne.n	2925a <_vfiprintf_r+0x6f2>
   2929c:	3c10      	subs	r4, #16
   2929e:	2001      	movs	r0, #1
   292a0:	4632      	mov	r2, r6
   292a2:	2c10      	cmp	r4, #16
   292a4:	dce4      	bgt.n	29270 <_vfiprintf_r+0x708>
   292a6:	46b4      	mov	ip, r6
   292a8:	9e07      	ldr	r6, [sp, #28]
   292aa:	44a4      	add	ip, r4
   292ac:	2807      	cmp	r0, #7
   292ae:	e9c8 5400 	strd	r5, r4, [r8]
   292b2:	e9cd 0c11 	strd	r0, ip, [sp, #68]	; 0x44
   292b6:	f340 8182 	ble.w	295be <_vfiprintf_r+0xa56>
   292ba:	f1bc 0f00 	cmp.w	ip, #0
   292be:	f000 8271 	beq.w	297a4 <_vfiprintf_r+0xc3c>
   292c2:	aa10      	add	r2, sp, #64	; 0x40
   292c4:	4651      	mov	r1, sl
   292c6:	4658      	mov	r0, fp
   292c8:	f7ff fc14 	bl	28af4 <__sprint_r.part.0>
   292cc:	2800      	cmp	r0, #0
   292ce:	f47f ade6 	bne.w	28e9e <_vfiprintf_r+0x336>
   292d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   292d4:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   292d8:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   292dc:	1c51      	adds	r1, r2, #1
   292de:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   292e2:	1a1c      	subs	r4, r3, r0
   292e4:	2c00      	cmp	r4, #0
   292e6:	f77f ae48 	ble.w	28f7a <_vfiprintf_r+0x412>
   292ea:	2c10      	cmp	r4, #16
   292ec:	4d58      	ldr	r5, [pc, #352]	; (29450 <_vfiprintf_r+0x8e8>)
   292ee:	dd2a      	ble.n	29346 <_vfiprintf_r+0x7de>
   292f0:	9602      	str	r6, [sp, #8]
   292f2:	4666      	mov	r6, ip
   292f4:	e00a      	b.n	2930c <_vfiprintf_r+0x7a4>
   292f6:	f7ff fbfd 	bl	28af4 <__sprint_r.part.0>
   292fa:	2800      	cmp	r0, #0
   292fc:	f47f adcf 	bne.w	28e9e <_vfiprintf_r+0x336>
   29300:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   29304:	1c51      	adds	r1, r2, #1
   29306:	3c10      	subs	r4, #16
   29308:	2c10      	cmp	r4, #16
   2930a:	dd1a      	ble.n	29342 <_vfiprintf_r+0x7da>
   2930c:	1c53      	adds	r3, r2, #1
   2930e:	3610      	adds	r6, #16
   29310:	2010      	movs	r0, #16
   29312:	1c91      	adds	r1, r2, #2
   29314:	2b07      	cmp	r3, #7
   29316:	f8c8 5000 	str.w	r5, [r8]
   2931a:	f8c8 0004 	str.w	r0, [r8, #4]
   2931e:	461a      	mov	r2, r3
   29320:	f108 0808 	add.w	r8, r8, #8
   29324:	9612      	str	r6, [sp, #72]	; 0x48
   29326:	9311      	str	r3, [sp, #68]	; 0x44
   29328:	dded      	ble.n	29306 <_vfiprintf_r+0x79e>
   2932a:	aa10      	add	r2, sp, #64	; 0x40
   2932c:	4651      	mov	r1, sl
   2932e:	4658      	mov	r0, fp
   29330:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29334:	2e00      	cmp	r6, #0
   29336:	d1de      	bne.n	292f6 <_vfiprintf_r+0x78e>
   29338:	3c10      	subs	r4, #16
   2933a:	2101      	movs	r1, #1
   2933c:	4632      	mov	r2, r6
   2933e:	2c10      	cmp	r4, #16
   29340:	dce4      	bgt.n	2930c <_vfiprintf_r+0x7a4>
   29342:	46b4      	mov	ip, r6
   29344:	9e02      	ldr	r6, [sp, #8]
   29346:	44a4      	add	ip, r4
   29348:	2907      	cmp	r1, #7
   2934a:	e9c8 5400 	strd	r5, r4, [r8]
   2934e:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   29352:	f300 80e0 	bgt.w	29516 <_vfiprintf_r+0x9ae>
   29356:	f108 0808 	add.w	r8, r8, #8
   2935a:	3101      	adds	r1, #1
   2935c:	e60d      	b.n	28f7a <_vfiprintf_r+0x412>
   2935e:	aa10      	add	r2, sp, #64	; 0x40
   29360:	4651      	mov	r1, sl
   29362:	4658      	mov	r0, fp
   29364:	f7ff fbc6 	bl	28af4 <__sprint_r.part.0>
   29368:	2800      	cmp	r0, #0
   2936a:	f43f ae31 	beq.w	28fd0 <_vfiprintf_r+0x468>
   2936e:	e596      	b.n	28e9e <_vfiprintf_r+0x336>
   29370:	f1bc 0f00 	cmp.w	ip, #0
   29374:	f000 80c6 	beq.w	29504 <_vfiprintf_r+0x99c>
   29378:	aa10      	add	r2, sp, #64	; 0x40
   2937a:	4651      	mov	r1, sl
   2937c:	4658      	mov	r0, fp
   2937e:	f7ff fbb9 	bl	28af4 <__sprint_r.part.0>
   29382:	2800      	cmp	r0, #0
   29384:	f47f ad8b 	bne.w	28e9e <_vfiprintf_r+0x336>
   29388:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2938a:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2938e:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   29392:	1c51      	adds	r1, r2, #1
   29394:	e5c9      	b.n	28f2a <_vfiprintf_r+0x3c2>
   29396:	2302      	movs	r3, #2
   29398:	aa0f      	add	r2, sp, #60	; 0x3c
   2939a:	2101      	movs	r1, #1
   2939c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   293a0:	469c      	mov	ip, r3
   293a2:	9213      	str	r2, [sp, #76]	; 0x4c
   293a4:	9314      	str	r3, [sp, #80]	; 0x50
   293a6:	460a      	mov	r2, r1
   293a8:	f108 0808 	add.w	r8, r8, #8
   293ac:	1c51      	adds	r1, r2, #1
   293ae:	e5da      	b.n	28f66 <_vfiprintf_r+0x3fe>
   293b0:	2c10      	cmp	r4, #16
   293b2:	f340 823d 	ble.w	29830 <_vfiprintf_r+0xcc8>
   293b6:	4d27      	ldr	r5, [pc, #156]	; (29454 <_vfiprintf_r+0x8ec>)
   293b8:	960d      	str	r6, [sp, #52]	; 0x34
   293ba:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   293be:	e00a      	b.n	293d6 <_vfiprintf_r+0x86e>
   293c0:	f7ff fb98 	bl	28af4 <__sprint_r.part.0>
   293c4:	2800      	cmp	r0, #0
   293c6:	f47f ad6a 	bne.w	28e9e <_vfiprintf_r+0x336>
   293ca:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   293ce:	1c42      	adds	r2, r0, #1
   293d0:	3c10      	subs	r4, #16
   293d2:	2c10      	cmp	r4, #16
   293d4:	dd1a      	ble.n	2940c <_vfiprintf_r+0x8a4>
   293d6:	1c41      	adds	r1, r0, #1
   293d8:	3310      	adds	r3, #16
   293da:	2610      	movs	r6, #16
   293dc:	1c82      	adds	r2, r0, #2
   293de:	2907      	cmp	r1, #7
   293e0:	f8c8 5000 	str.w	r5, [r8]
   293e4:	f8c8 6004 	str.w	r6, [r8, #4]
   293e8:	4608      	mov	r0, r1
   293ea:	f108 0808 	add.w	r8, r8, #8
   293ee:	9312      	str	r3, [sp, #72]	; 0x48
   293f0:	9111      	str	r1, [sp, #68]	; 0x44
   293f2:	dded      	ble.n	293d0 <_vfiprintf_r+0x868>
   293f4:	aa10      	add	r2, sp, #64	; 0x40
   293f6:	4651      	mov	r1, sl
   293f8:	4658      	mov	r0, fp
   293fa:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   293fe:	2b00      	cmp	r3, #0
   29400:	d1de      	bne.n	293c0 <_vfiprintf_r+0x858>
   29402:	3c10      	subs	r4, #16
   29404:	4618      	mov	r0, r3
   29406:	2201      	movs	r2, #1
   29408:	2c10      	cmp	r4, #16
   2940a:	dce4      	bgt.n	293d6 <_vfiprintf_r+0x86e>
   2940c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2940e:	eb04 0c03 	add.w	ip, r4, r3
   29412:	2a07      	cmp	r2, #7
   29414:	e9c8 5400 	strd	r5, r4, [r8]
   29418:	e9cd 2c11 	strd	r2, ip, [sp, #68]	; 0x44
   2941c:	f300 80af 	bgt.w	2957e <_vfiprintf_r+0xa16>
   29420:	f108 0808 	add.w	r8, r8, #8
   29424:	1c51      	adds	r1, r2, #1
   29426:	e56d      	b.n	28f04 <_vfiprintf_r+0x39c>
   29428:	0770      	lsls	r0, r6, #29
   2942a:	9311      	str	r3, [sp, #68]	; 0x44
   2942c:	d54e      	bpl.n	294cc <_vfiprintf_r+0x964>
   2942e:	9a04      	ldr	r2, [sp, #16]
   29430:	9901      	ldr	r1, [sp, #4]
   29432:	1a54      	subs	r4, r2, r1
   29434:	2c00      	cmp	r4, #0
   29436:	dd49      	ble.n	294cc <_vfiprintf_r+0x964>
   29438:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2943c:	2c10      	cmp	r4, #16
   2943e:	f340 8200 	ble.w	29842 <_vfiprintf_r+0xcda>
   29442:	9911      	ldr	r1, [sp, #68]	; 0x44
   29444:	2610      	movs	r6, #16
   29446:	4d03      	ldr	r5, [pc, #12]	; (29454 <_vfiprintf_r+0x8ec>)
   29448:	e013      	b.n	29472 <_vfiprintf_r+0x90a>
   2944a:	bf00      	nop
   2944c:	0002faec 	.word	0x0002faec
   29450:	0002fb7c 	.word	0x0002fb7c
   29454:	0002fb6c 	.word	0x0002fb6c
   29458:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2945c:	f7ff fb4a 	bl	28af4 <__sprint_r.part.0>
   29460:	2800      	cmp	r0, #0
   29462:	f47f ad1c 	bne.w	28e9e <_vfiprintf_r+0x336>
   29466:	e9dd 1311 	ldrd	r1, r3, [sp, #68]	; 0x44
   2946a:	1c48      	adds	r0, r1, #1
   2946c:	3c10      	subs	r4, #16
   2946e:	2c10      	cmp	r4, #16
   29470:	dd19      	ble.n	294a6 <_vfiprintf_r+0x93e>
   29472:	1c4a      	adds	r2, r1, #1
   29474:	3310      	adds	r3, #16
   29476:	1c88      	adds	r0, r1, #2
   29478:	f8c8 5000 	str.w	r5, [r8]
   2947c:	2a07      	cmp	r2, #7
   2947e:	f8c8 6004 	str.w	r6, [r8, #4]
   29482:	4611      	mov	r1, r2
   29484:	f108 0808 	add.w	r8, r8, #8
   29488:	9312      	str	r3, [sp, #72]	; 0x48
   2948a:	9211      	str	r2, [sp, #68]	; 0x44
   2948c:	ddee      	ble.n	2946c <_vfiprintf_r+0x904>
   2948e:	aa10      	add	r2, sp, #64	; 0x40
   29490:	4651      	mov	r1, sl
   29492:	4658      	mov	r0, fp
   29494:	2b00      	cmp	r3, #0
   29496:	d1df      	bne.n	29458 <_vfiprintf_r+0x8f0>
   29498:	3c10      	subs	r4, #16
   2949a:	2001      	movs	r0, #1
   2949c:	4619      	mov	r1, r3
   2949e:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   294a2:	2c10      	cmp	r4, #16
   294a4:	dce5      	bgt.n	29472 <_vfiprintf_r+0x90a>
   294a6:	4423      	add	r3, r4
   294a8:	2807      	cmp	r0, #7
   294aa:	e9c8 5400 	strd	r5, r4, [r8]
   294ae:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
   294b2:	f77f ad82 	ble.w	28fba <_vfiprintf_r+0x452>
   294b6:	b14b      	cbz	r3, 294cc <_vfiprintf_r+0x964>
   294b8:	aa10      	add	r2, sp, #64	; 0x40
   294ba:	4651      	mov	r1, sl
   294bc:	4658      	mov	r0, fp
   294be:	f7ff fb19 	bl	28af4 <__sprint_r.part.0>
   294c2:	2800      	cmp	r0, #0
   294c4:	f47f aceb 	bne.w	28e9e <_vfiprintf_r+0x336>
   294c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   294ca:	e576      	b.n	28fba <_vfiprintf_r+0x452>
   294cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   294d0:	9901      	ldr	r1, [sp, #4]
   294d2:	428a      	cmp	r2, r1
   294d4:	bfac      	ite	ge
   294d6:	189b      	addge	r3, r3, r2
   294d8:	185b      	addlt	r3, r3, r1
   294da:	9305      	str	r3, [sp, #20]
   294dc:	e578      	b.n	28fd0 <_vfiprintf_r+0x468>
   294de:	af3c      	add	r7, sp, #240	; 0xf0
   294e0:	9202      	str	r2, [sp, #8]
   294e2:	9203      	str	r2, [sp, #12]
   294e4:	e4bc      	b.n	28e60 <_vfiprintf_r+0x2f8>
   294e6:	9601      	str	r6, [sp, #4]
   294e8:	2d00      	cmp	r5, #0
   294ea:	bf08      	it	eq
   294ec:	2c0a      	cmpeq	r4, #10
   294ee:	f080 80e8 	bcs.w	296c2 <_vfiprintf_r+0xb5a>
   294f2:	3430      	adds	r4, #48	; 0x30
   294f4:	2301      	movs	r3, #1
   294f6:	9e01      	ldr	r6, [sp, #4]
   294f8:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   294fc:	9303      	str	r3, [sp, #12]
   294fe:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
   29502:	e4ad      	b.n	28e60 <_vfiprintf_r+0x2f8>
   29504:	9b07      	ldr	r3, [sp, #28]
   29506:	2b00      	cmp	r3, #0
   29508:	f040 8089 	bne.w	2961e <_vfiprintf_r+0xab6>
   2950c:	2101      	movs	r1, #1
   2950e:	4662      	mov	r2, ip
   29510:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29514:	e527      	b.n	28f66 <_vfiprintf_r+0x3fe>
   29516:	f1bc 0f00 	cmp.w	ip, #0
   2951a:	f43f ae4d 	beq.w	291b8 <_vfiprintf_r+0x650>
   2951e:	aa10      	add	r2, sp, #64	; 0x40
   29520:	4651      	mov	r1, sl
   29522:	4658      	mov	r0, fp
   29524:	f7ff fae6 	bl	28af4 <__sprint_r.part.0>
   29528:	2800      	cmp	r0, #0
   2952a:	f47f acb8 	bne.w	28e9e <_vfiprintf_r+0x336>
   2952e:	9911      	ldr	r1, [sp, #68]	; 0x44
   29530:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29534:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   29538:	3101      	adds	r1, #1
   2953a:	e51e      	b.n	28f7a <_vfiprintf_r+0x412>
   2953c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29540:	9211      	str	r2, [sp, #68]	; 0x44
   29542:	f7ff bb71 	b.w	28c28 <_vfiprintf_r+0xc0>
   29546:	af3c      	add	r7, sp, #240	; 0xf0
   29548:	9302      	str	r3, [sp, #8]
   2954a:	e489      	b.n	28e60 <_vfiprintf_r+0x2f8>
   2954c:	9b01      	ldr	r3, [sp, #4]
   2954e:	06df      	lsls	r7, r3, #27
   29550:	d45c      	bmi.n	2960c <_vfiprintf_r+0xaa4>
   29552:	9b01      	ldr	r3, [sp, #4]
   29554:	065e      	lsls	r6, r3, #25
   29556:	f140 8116 	bpl.w	29786 <_vfiprintf_r+0xc1e>
   2955a:	9c06      	ldr	r4, [sp, #24]
   2955c:	2301      	movs	r3, #1
   2955e:	2500      	movs	r5, #0
   29560:	f854 2b04 	ldr.w	r2, [r4], #4
   29564:	9406      	str	r4, [sp, #24]
   29566:	b294      	uxth	r4, r2
   29568:	e454      	b.n	28e14 <_vfiprintf_r+0x2ac>
   2956a:	222d      	movs	r2, #45	; 0x2d
   2956c:	4264      	negs	r4, r4
   2956e:	f04f 0301 	mov.w	r3, #1
   29572:	9601      	str	r6, [sp, #4]
   29574:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   29578:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   2957c:	e44e      	b.n	28e1c <_vfiprintf_r+0x2b4>
   2957e:	f1bc 0f00 	cmp.w	ip, #0
   29582:	d07f      	beq.n	29684 <_vfiprintf_r+0xb1c>
   29584:	aa10      	add	r2, sp, #64	; 0x40
   29586:	4651      	mov	r1, sl
   29588:	4658      	mov	r0, fp
   2958a:	f7ff fab3 	bl	28af4 <__sprint_r.part.0>
   2958e:	2800      	cmp	r0, #0
   29590:	f47f ac85 	bne.w	28e9e <_vfiprintf_r+0x336>
   29594:	9a11      	ldr	r2, [sp, #68]	; 0x44
   29596:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2959a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   2959e:	1c51      	adds	r1, r2, #1
   295a0:	e4b0      	b.n	28f04 <_vfiprintf_r+0x39c>
   295a2:	9306      	str	r3, [sp, #24]
   295a4:	f899 3000 	ldrb.w	r3, [r9]
   295a8:	f7ff bb52 	b.w	28c50 <_vfiprintf_r+0xe8>
   295ac:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   295b0:	f001 fc18 	bl	2ade4 <__retarget_lock_acquire_recursive>
   295b4:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   295b8:	b28a      	uxth	r2, r1
   295ba:	f7ff baef 	b.w	28b9c <_vfiprintf_r+0x34>
   295be:	f108 0808 	add.w	r8, r8, #8
   295c2:	1c41      	adds	r1, r0, #1
   295c4:	4602      	mov	r2, r0
   295c6:	e4d2      	b.n	28f6e <_vfiprintf_r+0x406>
   295c8:	05b1      	lsls	r1, r6, #22
   295ca:	f100 8103 	bmi.w	297d4 <_vfiprintf_r+0xc6c>
   295ce:	17e5      	asrs	r5, r4, #31
   295d0:	9306      	str	r3, [sp, #24]
   295d2:	4622      	mov	r2, r4
   295d4:	462b      	mov	r3, r5
   295d6:	f7ff bbca 	b.w	28d6e <_vfiprintf_r+0x206>
   295da:	05b2      	lsls	r2, r6, #22
   295dc:	f100 8101 	bmi.w	297e2 <_vfiprintf_r+0xc7a>
   295e0:	461c      	mov	r4, r3
   295e2:	2500      	movs	r5, #0
   295e4:	e412      	b.n	28e0c <_vfiprintf_r+0x2a4>
   295e6:	2220      	movs	r2, #32
   295e8:	f899 3000 	ldrb.w	r3, [r9]
   295ec:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   295f0:	f7ff bb2e 	b.w	28c50 <_vfiprintf_r+0xe8>
   295f4:	9b05      	ldr	r3, [sp, #20]
   295f6:	9c06      	ldr	r4, [sp, #24]
   295f8:	17dd      	asrs	r5, r3, #31
   295fa:	461a      	mov	r2, r3
   295fc:	f854 1b04 	ldr.w	r1, [r4], #4
   29600:	462b      	mov	r3, r5
   29602:	9406      	str	r4, [sp, #24]
   29604:	e9c1 2300 	strd	r2, r3, [r1]
   29608:	f7ff baf0 	b.w	28bec <_vfiprintf_r+0x84>
   2960c:	9c06      	ldr	r4, [sp, #24]
   2960e:	2301      	movs	r3, #1
   29610:	2500      	movs	r5, #0
   29612:	f854 2b04 	ldr.w	r2, [r4], #4
   29616:	9406      	str	r4, [sp, #24]
   29618:	4614      	mov	r4, r2
   2961a:	f7ff bbfb 	b.w	28e14 <_vfiprintf_r+0x2ac>
   2961e:	2302      	movs	r3, #2
   29620:	a90f      	add	r1, sp, #60	; 0x3c
   29622:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29626:	469c      	mov	ip, r3
   29628:	9113      	str	r1, [sp, #76]	; 0x4c
   2962a:	9314      	str	r3, [sp, #80]	; 0x50
   2962c:	e6bc      	b.n	293a8 <_vfiprintf_r+0x840>
   2962e:	9601      	str	r6, [sp, #4]
   29630:	e591      	b.n	29156 <_vfiprintf_r+0x5ee>
   29632:	4a9e      	ldr	r2, [pc, #632]	; (298ac <_vfiprintf_r+0xd44>)
   29634:	9209      	str	r2, [sp, #36]	; 0x24
   29636:	06b5      	lsls	r5, r6, #26
   29638:	9c06      	ldr	r4, [sp, #24]
   2963a:	d532      	bpl.n	296a2 <_vfiprintf_r+0xb3a>
   2963c:	3407      	adds	r4, #7
   2963e:	f024 0207 	bic.w	r2, r4, #7
   29642:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   29646:	9206      	str	r2, [sp, #24]
   29648:	ea54 0205 	orrs.w	r2, r4, r5
   2964c:	d008      	beq.n	29660 <_vfiprintf_r+0xaf8>
   2964e:	07f7      	lsls	r7, r6, #31
   29650:	d506      	bpl.n	29660 <_vfiprintf_r+0xaf8>
   29652:	2230      	movs	r2, #48	; 0x30
   29654:	f046 0602 	orr.w	r6, r6, #2
   29658:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   2965c:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   29660:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   29664:	9301      	str	r3, [sp, #4]
   29666:	2302      	movs	r3, #2
   29668:	f7ff bbd4 	b.w	28e14 <_vfiprintf_r+0x2ac>
   2966c:	4a90      	ldr	r2, [pc, #576]	; (298b0 <_vfiprintf_r+0xd48>)
   2966e:	9209      	str	r2, [sp, #36]	; 0x24
   29670:	e7e1      	b.n	29636 <_vfiprintf_r+0xace>
   29672:	4638      	mov	r0, r7
   29674:	9406      	str	r4, [sp, #24]
   29676:	f7fd faef 	bl	26c58 <strlen>
   2967a:	2300      	movs	r3, #0
   2967c:	e9cd 3002 	strd	r3, r0, [sp, #8]
   29680:	f7ff bbee 	b.w	28e60 <_vfiprintf_r+0x2f8>
   29684:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   29688:	2a00      	cmp	r2, #0
   2968a:	f000 8091 	beq.w	297b0 <_vfiprintf_r+0xc48>
   2968e:	2201      	movs	r2, #1
   29690:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   29694:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29698:	4611      	mov	r1, r2
   2969a:	4694      	mov	ip, r2
   2969c:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   296a0:	e43f      	b.n	28f22 <_vfiprintf_r+0x3ba>
   296a2:	f854 2b04 	ldr.w	r2, [r4], #4
   296a6:	9406      	str	r4, [sp, #24]
   296a8:	06f4      	lsls	r4, r6, #27
   296aa:	d407      	bmi.n	296bc <_vfiprintf_r+0xb54>
   296ac:	0670      	lsls	r0, r6, #25
   296ae:	d502      	bpl.n	296b6 <_vfiprintf_r+0xb4e>
   296b0:	b294      	uxth	r4, r2
   296b2:	2500      	movs	r5, #0
   296b4:	e7c8      	b.n	29648 <_vfiprintf_r+0xae0>
   296b6:	05b1      	lsls	r1, r6, #22
   296b8:	f100 8097 	bmi.w	297ea <_vfiprintf_r+0xc82>
   296bc:	4614      	mov	r4, r2
   296be:	2500      	movs	r5, #0
   296c0:	e7c2      	b.n	29648 <_vfiprintf_r+0xae0>
   296c2:	9b01      	ldr	r3, [sp, #4]
   296c4:	2600      	movs	r6, #0
   296c6:	f8cd 800c 	str.w	r8, [sp, #12]
   296ca:	af3c      	add	r7, sp, #240	; 0xf0
   296cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   296d0:	f8cd 901c 	str.w	r9, [sp, #28]
   296d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   296d8:	4698      	mov	r8, r3
   296da:	e007      	b.n	296ec <_vfiprintf_r+0xb84>
   296dc:	f7e3 f8bc 	bl	c858 <__aeabi_uldivmod>
   296e0:	2d00      	cmp	r5, #0
   296e2:	bf08      	it	eq
   296e4:	2c0a      	cmpeq	r4, #10
   296e6:	d320      	bcc.n	2972a <_vfiprintf_r+0xbc2>
   296e8:	4604      	mov	r4, r0
   296ea:	460d      	mov	r5, r1
   296ec:	220a      	movs	r2, #10
   296ee:	2300      	movs	r3, #0
   296f0:	4620      	mov	r0, r4
   296f2:	4629      	mov	r1, r5
   296f4:	f7e3 f8b0 	bl	c858 <__aeabi_uldivmod>
   296f8:	4694      	mov	ip, r2
   296fa:	4620      	mov	r0, r4
   296fc:	4629      	mov	r1, r5
   296fe:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   29702:	220a      	movs	r2, #10
   29704:	2300      	movs	r3, #0
   29706:	3601      	adds	r6, #1
   29708:	f807 cc01 	strb.w	ip, [r7, #-1]
   2970c:	3f01      	subs	r7, #1
   2970e:	f1b8 0f00 	cmp.w	r8, #0
   29712:	d0e3      	beq.n	296dc <_vfiprintf_r+0xb74>
   29714:	f899 c000 	ldrb.w	ip, [r9]
   29718:	45b4      	cmp	ip, r6
   2971a:	d1df      	bne.n	296dc <_vfiprintf_r+0xb74>
   2971c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   29720:	d0dc      	beq.n	296dc <_vfiprintf_r+0xb74>
   29722:	429d      	cmp	r5, r3
   29724:	bf08      	it	eq
   29726:	4294      	cmpeq	r4, r2
   29728:	d268      	bcs.n	297fc <_vfiprintf_r+0xc94>
   2972a:	ab3c      	add	r3, sp, #240	; 0xf0
   2972c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   29730:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   29734:	1bdb      	subs	r3, r3, r7
   29736:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2973a:	9e01      	ldr	r6, [sp, #4]
   2973c:	9303      	str	r3, [sp, #12]
   2973e:	f7ff bb8f 	b.w	28e60 <_vfiprintf_r+0x2f8>
   29742:	f899 3001 	ldrb.w	r3, [r9, #1]
   29746:	f446 7600 	orr.w	r6, r6, #512	; 0x200
   2974a:	f109 0901 	add.w	r9, r9, #1
   2974e:	f7ff ba7f 	b.w	28c50 <_vfiprintf_r+0xe8>
   29752:	f899 3001 	ldrb.w	r3, [r9, #1]
   29756:	f046 0620 	orr.w	r6, r6, #32
   2975a:	f109 0901 	add.w	r9, r9, #1
   2975e:	f7ff ba77 	b.w	28c50 <_vfiprintf_r+0xe8>
   29762:	9c06      	ldr	r4, [sp, #24]
   29764:	9a05      	ldr	r2, [sp, #20]
   29766:	f854 3b04 	ldr.w	r3, [r4], #4
   2976a:	601a      	str	r2, [r3, #0]
   2976c:	9406      	str	r4, [sp, #24]
   2976e:	f7ff ba3d 	b.w	28bec <_vfiprintf_r+0x84>
   29772:	9b02      	ldr	r3, [sp, #8]
   29774:	4f4f      	ldr	r7, [pc, #316]	; (298b4 <_vfiprintf_r+0xd4c>)
   29776:	2b06      	cmp	r3, #6
   29778:	9406      	str	r4, [sp, #24]
   2977a:	bf28      	it	cs
   2977c:	2306      	movcs	r3, #6
   2977e:	9303      	str	r3, [sp, #12]
   29780:	9301      	str	r3, [sp, #4]
   29782:	f7ff bba9 	b.w	28ed8 <_vfiprintf_r+0x370>
   29786:	9c06      	ldr	r4, [sp, #24]
   29788:	2500      	movs	r5, #0
   2978a:	9b01      	ldr	r3, [sp, #4]
   2978c:	f854 2b04 	ldr.w	r2, [r4], #4
   29790:	f413 7f00 	tst.w	r3, #512	; 0x200
   29794:	f04f 0301 	mov.w	r3, #1
   29798:	9406      	str	r4, [sp, #24]
   2979a:	bf14      	ite	ne
   2979c:	b2d4      	uxtbne	r4, r2
   2979e:	4614      	moveq	r4, r2
   297a0:	f7ff bb38 	b.w	28e14 <_vfiprintf_r+0x2ac>
   297a4:	2101      	movs	r1, #1
   297a6:	4662      	mov	r2, ip
   297a8:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   297ac:	f7ff bbdf 	b.w	28f6e <_vfiprintf_r+0x406>
   297b0:	9b07      	ldr	r3, [sp, #28]
   297b2:	2b00      	cmp	r3, #0
   297b4:	f47f adef 	bne.w	29396 <_vfiprintf_r+0x82e>
   297b8:	4662      	mov	r2, ip
   297ba:	2101      	movs	r1, #1
   297bc:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   297c0:	f7ff bbd5 	b.w	28f6e <_vfiprintf_r+0x406>
   297c4:	9c06      	ldr	r4, [sp, #24]
   297c6:	9a05      	ldr	r2, [sp, #20]
   297c8:	f854 3b04 	ldr.w	r3, [r4], #4
   297cc:	801a      	strh	r2, [r3, #0]
   297ce:	9406      	str	r4, [sp, #24]
   297d0:	f7ff ba0c 	b.w	28bec <_vfiprintf_r+0x84>
   297d4:	b264      	sxtb	r4, r4
   297d6:	9306      	str	r3, [sp, #24]
   297d8:	17e5      	asrs	r5, r4, #31
   297da:	4622      	mov	r2, r4
   297dc:	462b      	mov	r3, r5
   297de:	f7ff bac6 	b.w	28d6e <_vfiprintf_r+0x206>
   297e2:	b2dc      	uxtb	r4, r3
   297e4:	2500      	movs	r5, #0
   297e6:	f7ff bb11 	b.w	28e0c <_vfiprintf_r+0x2a4>
   297ea:	b2d4      	uxtb	r4, r2
   297ec:	2500      	movs	r5, #0
   297ee:	e72b      	b.n	29648 <_vfiprintf_r+0xae0>
   297f0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   297f4:	f001 faf8 	bl	2ade8 <__retarget_lock_release_recursive>
   297f8:	f7ff baee 	b.w	28dd8 <_vfiprintf_r+0x270>
   297fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   297fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29800:	1aff      	subs	r7, r7, r3
   29802:	461a      	mov	r2, r3
   29804:	4638      	mov	r0, r7
   29806:	f7fd fa8f 	bl	26d28 <strncpy>
   2980a:	f899 3001 	ldrb.w	r3, [r9, #1]
   2980e:	b10b      	cbz	r3, 29814 <_vfiprintf_r+0xcac>
   29810:	f109 0901 	add.w	r9, r9, #1
   29814:	4620      	mov	r0, r4
   29816:	4629      	mov	r1, r5
   29818:	220a      	movs	r2, #10
   2981a:	2300      	movs	r3, #0
   2981c:	2600      	movs	r6, #0
   2981e:	f7e3 f81b 	bl	c858 <__aeabi_uldivmod>
   29822:	e761      	b.n	296e8 <_vfiprintf_r+0xb80>
   29824:	9b02      	ldr	r3, [sp, #8]
   29826:	9406      	str	r4, [sp, #24]
   29828:	9303      	str	r3, [sp, #12]
   2982a:	9002      	str	r0, [sp, #8]
   2982c:	f7ff bb18 	b.w	28e60 <_vfiprintf_r+0x2f8>
   29830:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	; 0x44
   29834:	4d20      	ldr	r5, [pc, #128]	; (298b8 <_vfiprintf_r+0xd50>)
   29836:	3201      	adds	r2, #1
   29838:	e5e9      	b.n	2940e <_vfiprintf_r+0x8a6>
   2983a:	2200      	movs	r2, #0
   2983c:	9202      	str	r2, [sp, #8]
   2983e:	f7ff ba09 	b.w	28c54 <_vfiprintf_r+0xec>
   29842:	9811      	ldr	r0, [sp, #68]	; 0x44
   29844:	4d1c      	ldr	r5, [pc, #112]	; (298b8 <_vfiprintf_r+0xd50>)
   29846:	3001      	adds	r0, #1
   29848:	e62d      	b.n	294a6 <_vfiprintf_r+0x93e>
   2984a:	ee18 0a10 	vmov	r0, s16
   2984e:	aa10      	add	r2, sp, #64	; 0x40
   29850:	4651      	mov	r1, sl
   29852:	f7ff f94f 	bl	28af4 <__sprint_r.part.0>
   29856:	2800      	cmp	r0, #0
   29858:	f43f ab1f 	beq.w	28e9a <_vfiprintf_r+0x332>
   2985c:	f7ff bb1f 	b.w	28e9e <_vfiprintf_r+0x336>
   29860:	f04f 33ff 	mov.w	r3, #4294967295
   29864:	9305      	str	r3, [sp, #20]
   29866:	f7ff bb25 	b.w	28eb4 <_vfiprintf_r+0x34c>
   2986a:	4608      	mov	r0, r1
   2986c:	4d13      	ldr	r5, [pc, #76]	; (298bc <_vfiprintf_r+0xd54>)
   2986e:	e51c      	b.n	292aa <_vfiprintf_r+0x742>
   29870:	9a06      	ldr	r2, [sp, #24]
   29872:	f899 3001 	ldrb.w	r3, [r9, #1]
   29876:	4689      	mov	r9, r1
   29878:	f852 1b04 	ldr.w	r1, [r2], #4
   2987c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   29880:	9206      	str	r2, [sp, #24]
   29882:	9102      	str	r1, [sp, #8]
   29884:	f7ff b9e4 	b.w	28c50 <_vfiprintf_r+0xe8>
   29888:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   2988c:	07dc      	lsls	r4, r3, #31
   2988e:	d4e7      	bmi.n	29860 <_vfiprintf_r+0xcf8>
   29890:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   29894:	0598      	lsls	r0, r3, #22
   29896:	d4e3      	bmi.n	29860 <_vfiprintf_r+0xcf8>
   29898:	f04f 33ff 	mov.w	r3, #4294967295
   2989c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   298a0:	9305      	str	r3, [sp, #20]
   298a2:	f001 faa1 	bl	2ade8 <__retarget_lock_release_recursive>
   298a6:	f7ff bb05 	b.w	28eb4 <_vfiprintf_r+0x34c>
   298aa:	bf00      	nop
   298ac:	0002fb00 	.word	0x0002fb00
   298b0:	0002faec 	.word	0x0002faec
   298b4:	0002fb14 	.word	0x0002fb14
   298b8:	0002fb6c 	.word	0x0002fb6c
   298bc:	0002fb7c 	.word	0x0002fb7c

000298c0 <__sbprintf>:
   298c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   298c2:	460c      	mov	r4, r1
   298c4:	8989      	ldrh	r1, [r1, #12]
   298c6:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
   298ca:	2700      	movs	r7, #0
   298cc:	f021 0102 	bic.w	r1, r1, #2
   298d0:	4606      	mov	r6, r0
   298d2:	ad1c      	add	r5, sp, #112	; 0x70
   298d4:	9708      	str	r7, [sp, #32]
   298d6:	f8ad 1014 	strh.w	r1, [sp, #20]
   298da:	f44f 6780 	mov.w	r7, #1024	; 0x400
   298de:	89e1      	ldrh	r1, [r4, #14]
   298e0:	a818      	add	r0, sp, #96	; 0x60
   298e2:	9502      	str	r5, [sp, #8]
   298e4:	f8ad 1016 	strh.w	r1, [sp, #22]
   298e8:	69e1      	ldr	r1, [r4, #28]
   298ea:	9506      	str	r5, [sp, #24]
   298ec:	9109      	str	r1, [sp, #36]	; 0x24
   298ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
   298f0:	9704      	str	r7, [sp, #16]
   298f2:	910b      	str	r1, [sp, #44]	; 0x2c
   298f4:	9707      	str	r7, [sp, #28]
   298f6:	e9cd 3200 	strd	r3, r2, [sp]
   298fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   298fc:	931b      	str	r3, [sp, #108]	; 0x6c
   298fe:	f001 fa6d 	bl	2addc <__retarget_lock_init_recursive>
   29902:	a902      	add	r1, sp, #8
   29904:	4630      	mov	r0, r6
   29906:	e9dd 3200 	ldrd	r3, r2, [sp]
   2990a:	f7ff f92d 	bl	28b68 <_vfiprintf_r>
   2990e:	1e05      	subs	r5, r0, #0
   29910:	db07      	blt.n	29922 <__sbprintf+0x62>
   29912:	4630      	mov	r0, r6
   29914:	a902      	add	r1, sp, #8
   29916:	f000 fa51 	bl	29dbc <_fflush_r>
   2991a:	2800      	cmp	r0, #0
   2991c:	bf18      	it	ne
   2991e:	f04f 35ff 	movne.w	r5, #4294967295
   29922:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   29926:	065b      	lsls	r3, r3, #25
   29928:	d503      	bpl.n	29932 <__sbprintf+0x72>
   2992a:	89a3      	ldrh	r3, [r4, #12]
   2992c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29930:	81a3      	strh	r3, [r4, #12]
   29932:	9818      	ldr	r0, [sp, #96]	; 0x60
   29934:	f001 fa54 	bl	2ade0 <__retarget_lock_close_recursive>
   29938:	4628      	mov	r0, r5
   2993a:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
   2993e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029940 <_vsnprintf_r>:
   29940:	b570      	push	{r4, r5, r6, lr}
   29942:	1e14      	subs	r4, r2, #0
   29944:	b09a      	sub	sp, #104	; 0x68
   29946:	4605      	mov	r5, r0
   29948:	db2c      	blt.n	299a4 <_vsnprintf_r+0x64>
   2994a:	f44f 7202 	mov.w	r2, #520	; 0x208
   2994e:	9100      	str	r1, [sp, #0]
   29950:	9104      	str	r1, [sp, #16]
   29952:	f8ad 200c 	strh.w	r2, [sp, #12]
   29956:	d014      	beq.n	29982 <_vsnprintf_r+0x42>
   29958:	3c01      	subs	r4, #1
   2995a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2995e:	461a      	mov	r2, r3
   29960:	4669      	mov	r1, sp
   29962:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   29964:	9402      	str	r4, [sp, #8]
   29966:	9405      	str	r4, [sp, #20]
   29968:	f8ad 600e 	strh.w	r6, [sp, #14]
   2996c:	f7e4 ffa4 	bl	e8b8 <_svfprintf_r>
   29970:	1c42      	adds	r2, r0, #1
   29972:	da01      	bge.n	29978 <_vsnprintf_r+0x38>
   29974:	238b      	movs	r3, #139	; 0x8b
   29976:	602b      	str	r3, [r5, #0]
   29978:	9b00      	ldr	r3, [sp, #0]
   2997a:	2200      	movs	r2, #0
   2997c:	701a      	strb	r2, [r3, #0]
   2997e:	b01a      	add	sp, #104	; 0x68
   29980:	bd70      	pop	{r4, r5, r6, pc}
   29982:	f64f 76ff 	movw	r6, #65535	; 0xffff
   29986:	461a      	mov	r2, r3
   29988:	4669      	mov	r1, sp
   2998a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2998c:	9402      	str	r4, [sp, #8]
   2998e:	9405      	str	r4, [sp, #20]
   29990:	f8ad 600e 	strh.w	r6, [sp, #14]
   29994:	f7e4 ff90 	bl	e8b8 <_svfprintf_r>
   29998:	1c43      	adds	r3, r0, #1
   2999a:	da01      	bge.n	299a0 <_vsnprintf_r+0x60>
   2999c:	238b      	movs	r3, #139	; 0x8b
   2999e:	602b      	str	r3, [r5, #0]
   299a0:	b01a      	add	sp, #104	; 0x68
   299a2:	bd70      	pop	{r4, r5, r6, pc}
   299a4:	238b      	movs	r3, #139	; 0x8b
   299a6:	f04f 30ff 	mov.w	r0, #4294967295
   299aa:	602b      	str	r3, [r5, #0]
   299ac:	e7f8      	b.n	299a0 <_vsnprintf_r+0x60>
   299ae:	bf00      	nop

000299b0 <vsnprintf>:
   299b0:	b570      	push	{r4, r5, r6, lr}
   299b2:	460e      	mov	r6, r1
   299b4:	b082      	sub	sp, #8
   299b6:	4615      	mov	r5, r2
   299b8:	4c04      	ldr	r4, [pc, #16]	; (299cc <vsnprintf+0x1c>)
   299ba:	4601      	mov	r1, r0
   299bc:	9300      	str	r3, [sp, #0]
   299be:	4632      	mov	r2, r6
   299c0:	462b      	mov	r3, r5
   299c2:	6820      	ldr	r0, [r4, #0]
   299c4:	f7ff ffbc 	bl	29940 <_vsnprintf_r>
   299c8:	b002      	add	sp, #8
   299ca:	bd70      	pop	{r4, r5, r6, pc}
   299cc:	200204d8 	.word	0x200204d8

000299d0 <_vsprintf_r>:
   299d0:	b570      	push	{r4, r5, r6, lr}
   299d2:	b09a      	sub	sp, #104	; 0x68
   299d4:	460c      	mov	r4, r1
   299d6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   299da:	4e07      	ldr	r6, [pc, #28]	; (299f8 <_vsprintf_r+0x28>)
   299dc:	4669      	mov	r1, sp
   299de:	9400      	str	r4, [sp, #0]
   299e0:	9505      	str	r5, [sp, #20]
   299e2:	9502      	str	r5, [sp, #8]
   299e4:	e9cd 6403 	strd	r6, r4, [sp, #12]
   299e8:	f7e4 ff66 	bl	e8b8 <_svfprintf_r>
   299ec:	9b00      	ldr	r3, [sp, #0]
   299ee:	2200      	movs	r2, #0
   299f0:	701a      	strb	r2, [r3, #0]
   299f2:	b01a      	add	sp, #104	; 0x68
   299f4:	bd70      	pop	{r4, r5, r6, pc}
   299f6:	bf00      	nop
   299f8:	ffff0208 	.word	0xffff0208

000299fc <vsprintf>:
   299fc:	b430      	push	{r4, r5}
   299fe:	460d      	mov	r5, r1
   29a00:	4c03      	ldr	r4, [pc, #12]	; (29a10 <vsprintf+0x14>)
   29a02:	4613      	mov	r3, r2
   29a04:	4601      	mov	r1, r0
   29a06:	462a      	mov	r2, r5
   29a08:	6820      	ldr	r0, [r4, #0]
   29a0a:	bc30      	pop	{r4, r5}
   29a0c:	f7ff bfe0 	b.w	299d0 <_vsprintf_r>
   29a10:	200204d8 	.word	0x200204d8

00029a14 <_write_r>:
   29a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a16:	460f      	mov	r7, r1
   29a18:	4d08      	ldr	r5, [pc, #32]	; (29a3c <_write_r+0x28>)
   29a1a:	2600      	movs	r6, #0
   29a1c:	4611      	mov	r1, r2
   29a1e:	4604      	mov	r4, r0
   29a20:	461a      	mov	r2, r3
   29a22:	4638      	mov	r0, r7
   29a24:	602e      	str	r6, [r5, #0]
   29a26:	f003 fb5e 	bl	2d0e6 <_write>
   29a2a:	1c43      	adds	r3, r0, #1
   29a2c:	d000      	beq.n	29a30 <_write_r+0x1c>
   29a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29a30:	682b      	ldr	r3, [r5, #0]
   29a32:	2b00      	cmp	r3, #0
   29a34:	d0fb      	beq.n	29a2e <_write_r+0x1a>
   29a36:	6023      	str	r3, [r4, #0]
   29a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29a3a:	bf00      	nop
   29a3c:	20026430 	.word	0x20026430

00029a40 <__swsetup_r>:
   29a40:	b538      	push	{r3, r4, r5, lr}
   29a42:	4b32      	ldr	r3, [pc, #200]	; (29b0c <__swsetup_r+0xcc>)
   29a44:	4605      	mov	r5, r0
   29a46:	460c      	mov	r4, r1
   29a48:	681b      	ldr	r3, [r3, #0]
   29a4a:	b113      	cbz	r3, 29a52 <__swsetup_r+0x12>
   29a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   29a4e:	2a00      	cmp	r2, #0
   29a50:	d036      	beq.n	29ac0 <__swsetup_r+0x80>
   29a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29a56:	0718      	lsls	r0, r3, #28
   29a58:	b29a      	uxth	r2, r3
   29a5a:	d50c      	bpl.n	29a76 <__swsetup_r+0x36>
   29a5c:	6921      	ldr	r1, [r4, #16]
   29a5e:	b1a9      	cbz	r1, 29a8c <__swsetup_r+0x4c>
   29a60:	f012 0001 	ands.w	r0, r2, #1
   29a64:	d022      	beq.n	29aac <__swsetup_r+0x6c>
   29a66:	6960      	ldr	r0, [r4, #20]
   29a68:	2500      	movs	r5, #0
   29a6a:	4240      	negs	r0, r0
   29a6c:	60a5      	str	r5, [r4, #8]
   29a6e:	61a0      	str	r0, [r4, #24]
   29a70:	b311      	cbz	r1, 29ab8 <__swsetup_r+0x78>
   29a72:	2000      	movs	r0, #0
   29a74:	bd38      	pop	{r3, r4, r5, pc}
   29a76:	06d1      	lsls	r1, r2, #27
   29a78:	d53a      	bpl.n	29af0 <__swsetup_r+0xb0>
   29a7a:	0752      	lsls	r2, r2, #29
   29a7c:	d424      	bmi.n	29ac8 <__swsetup_r+0x88>
   29a7e:	6921      	ldr	r1, [r4, #16]
   29a80:	f043 0308 	orr.w	r3, r3, #8
   29a84:	b29a      	uxth	r2, r3
   29a86:	81a3      	strh	r3, [r4, #12]
   29a88:	2900      	cmp	r1, #0
   29a8a:	d1e9      	bne.n	29a60 <__swsetup_r+0x20>
   29a8c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   29a90:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   29a94:	d0e4      	beq.n	29a60 <__swsetup_r+0x20>
   29a96:	4628      	mov	r0, r5
   29a98:	4621      	mov	r1, r4
   29a9a:	f001 f9eb 	bl	2ae74 <__smakebuf_r>
   29a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29aa2:	6921      	ldr	r1, [r4, #16]
   29aa4:	b29a      	uxth	r2, r3
   29aa6:	f012 0001 	ands.w	r0, r2, #1
   29aaa:	d1dc      	bne.n	29a66 <__swsetup_r+0x26>
   29aac:	0795      	lsls	r5, r2, #30
   29aae:	bf58      	it	pl
   29ab0:	6960      	ldrpl	r0, [r4, #20]
   29ab2:	60a0      	str	r0, [r4, #8]
   29ab4:	2900      	cmp	r1, #0
   29ab6:	d1dc      	bne.n	29a72 <__swsetup_r+0x32>
   29ab8:	0612      	lsls	r2, r2, #24
   29aba:	d421      	bmi.n	29b00 <__swsetup_r+0xc0>
   29abc:	4608      	mov	r0, r1
   29abe:	bd38      	pop	{r3, r4, r5, pc}
   29ac0:	4618      	mov	r0, r3
   29ac2:	f000 f9d9 	bl	29e78 <__sinit>
   29ac6:	e7c4      	b.n	29a52 <__swsetup_r+0x12>
   29ac8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   29aca:	b151      	cbz	r1, 29ae2 <__swsetup_r+0xa2>
   29acc:	f104 0240 	add.w	r2, r4, #64	; 0x40
   29ad0:	4291      	cmp	r1, r2
   29ad2:	d004      	beq.n	29ade <__swsetup_r+0x9e>
   29ad4:	4628      	mov	r0, r5
   29ad6:	f000 fadf 	bl	2a098 <_free_r>
   29ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29ade:	2200      	movs	r2, #0
   29ae0:	6322      	str	r2, [r4, #48]	; 0x30
   29ae2:	2200      	movs	r2, #0
   29ae4:	6921      	ldr	r1, [r4, #16]
   29ae6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29aea:	e9c4 1200 	strd	r1, r2, [r4]
   29aee:	e7c7      	b.n	29a80 <__swsetup_r+0x40>
   29af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29af4:	2209      	movs	r2, #9
   29af6:	f04f 30ff 	mov.w	r0, #4294967295
   29afa:	602a      	str	r2, [r5, #0]
   29afc:	81a3      	strh	r3, [r4, #12]
   29afe:	bd38      	pop	{r3, r4, r5, pc}
   29b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29b04:	f04f 30ff 	mov.w	r0, #4294967295
   29b08:	81a3      	strh	r3, [r4, #12]
   29b0a:	bd38      	pop	{r3, r4, r5, pc}
   29b0c:	200204d8 	.word	0x200204d8

00029b10 <abort>:
   29b10:	2006      	movs	r0, #6
   29b12:	b508      	push	{r3, lr}
   29b14:	f002 f80c 	bl	2bb30 <raise>
   29b18:	2001      	movs	r0, #1
   29b1a:	f7eb fc31 	bl	15380 <_exit>
   29b1e:	bf00      	nop

00029b20 <_close_r>:
   29b20:	b538      	push	{r3, r4, r5, lr}
   29b22:	2200      	movs	r2, #0
   29b24:	4d06      	ldr	r5, [pc, #24]	; (29b40 <_close_r+0x20>)
   29b26:	4604      	mov	r4, r0
   29b28:	4608      	mov	r0, r1
   29b2a:	602a      	str	r2, [r5, #0]
   29b2c:	f003 fadf 	bl	2d0ee <_close>
   29b30:	1c43      	adds	r3, r0, #1
   29b32:	d000      	beq.n	29b36 <_close_r+0x16>
   29b34:	bd38      	pop	{r3, r4, r5, pc}
   29b36:	682b      	ldr	r3, [r5, #0]
   29b38:	2b00      	cmp	r3, #0
   29b3a:	d0fb      	beq.n	29b34 <_close_r+0x14>
   29b3c:	6023      	str	r3, [r4, #0]
   29b3e:	bd38      	pop	{r3, r4, r5, pc}
   29b40:	20026430 	.word	0x20026430

00029b44 <quorem>:
   29b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b48:	6903      	ldr	r3, [r0, #16]
   29b4a:	b085      	sub	sp, #20
   29b4c:	690c      	ldr	r4, [r1, #16]
   29b4e:	9101      	str	r1, [sp, #4]
   29b50:	42a3      	cmp	r3, r4
   29b52:	f2c0 808c 	blt.w	29c6e <quorem+0x12a>
   29b56:	3c01      	subs	r4, #1
   29b58:	f101 0514 	add.w	r5, r1, #20
   29b5c:	f100 0914 	add.w	r9, r0, #20
   29b60:	4682      	mov	sl, r0
   29b62:	00a2      	lsls	r2, r4, #2
   29b64:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   29b68:	eb09 0184 	add.w	r1, r9, r4, lsl #2
   29b6c:	3301      	adds	r3, #1
   29b6e:	9202      	str	r2, [sp, #8]
   29b70:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   29b74:	eb05 0884 	add.w	r8, r5, r4, lsl #2
   29b78:	9103      	str	r1, [sp, #12]
   29b7a:	429a      	cmp	r2, r3
   29b7c:	fbb2 f6f3 	udiv	r6, r2, r3
   29b80:	d33c      	bcc.n	29bfc <quorem+0xb8>
   29b82:	2300      	movs	r3, #0
   29b84:	4628      	mov	r0, r5
   29b86:	464f      	mov	r7, r9
   29b88:	461a      	mov	r2, r3
   29b8a:	f850 1b04 	ldr.w	r1, [r0], #4
   29b8e:	f8d7 e000 	ldr.w	lr, [r7]
   29b92:	fa1f fc81 	uxth.w	ip, r1
   29b96:	4580      	cmp	r8, r0
   29b98:	ea4f 4111 	mov.w	r1, r1, lsr #16
   29b9c:	fb06 3c0c 	mla	ip, r6, ip, r3
   29ba0:	fa1f fb8e 	uxth.w	fp, lr
   29ba4:	ea4f 431c 	mov.w	r3, ip, lsr #16
   29ba8:	fa1f fc8c 	uxth.w	ip, ip
   29bac:	fb06 3301 	mla	r3, r6, r1, r3
   29bb0:	eba2 010c 	sub.w	r1, r2, ip
   29bb4:	b29a      	uxth	r2, r3
   29bb6:	4459      	add	r1, fp
   29bb8:	ea4f 4313 	mov.w	r3, r3, lsr #16
   29bbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   29bc0:	fa1f fc81 	uxth.w	ip, r1
   29bc4:	eb02 4221 	add.w	r2, r2, r1, asr #16
   29bc8:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
   29bcc:	ea4f 4222 	mov.w	r2, r2, asr #16
   29bd0:	f847 1b04 	str.w	r1, [r7], #4
   29bd4:	d2d9      	bcs.n	29b8a <quorem+0x46>
   29bd6:	9b02      	ldr	r3, [sp, #8]
   29bd8:	f859 3003 	ldr.w	r3, [r9, r3]
   29bdc:	b973      	cbnz	r3, 29bfc <quorem+0xb8>
   29bde:	9b03      	ldr	r3, [sp, #12]
   29be0:	3b04      	subs	r3, #4
   29be2:	4599      	cmp	r9, r3
   29be4:	d304      	bcc.n	29bf0 <quorem+0xac>
   29be6:	e007      	b.n	29bf8 <quorem+0xb4>
   29be8:	4599      	cmp	r9, r3
   29bea:	f104 34ff 	add.w	r4, r4, #4294967295
   29bee:	d203      	bcs.n	29bf8 <quorem+0xb4>
   29bf0:	f853 2904 	ldr.w	r2, [r3], #-4
   29bf4:	2a00      	cmp	r2, #0
   29bf6:	d0f7      	beq.n	29be8 <quorem+0xa4>
   29bf8:	f8ca 4010 	str.w	r4, [sl, #16]
   29bfc:	9901      	ldr	r1, [sp, #4]
   29bfe:	4650      	mov	r0, sl
   29c00:	f001 fca0 	bl	2b544 <__mcmp>
   29c04:	2800      	cmp	r0, #0
   29c06:	db2e      	blt.n	29c66 <quorem+0x122>
   29c08:	3601      	adds	r6, #1
   29c0a:	4648      	mov	r0, r9
   29c0c:	2200      	movs	r2, #0
   29c0e:	f855 1b04 	ldr.w	r1, [r5], #4
   29c12:	f8d0 c000 	ldr.w	ip, [r0]
   29c16:	b28b      	uxth	r3, r1
   29c18:	45a8      	cmp	r8, r5
   29c1a:	ea4f 4111 	mov.w	r1, r1, lsr #16
   29c1e:	eba2 0303 	sub.w	r3, r2, r3
   29c22:	fa1f f28c 	uxth.w	r2, ip
   29c26:	ebc1 411c 	rsb	r1, r1, ip, lsr #16
   29c2a:	4413      	add	r3, r2
   29c2c:	eb01 4123 	add.w	r1, r1, r3, asr #16
   29c30:	b29b      	uxth	r3, r3
   29c32:	ea4f 4221 	mov.w	r2, r1, asr #16
   29c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   29c3a:	f840 3b04 	str.w	r3, [r0], #4
   29c3e:	d2e6      	bcs.n	29c0e <quorem+0xca>
   29c40:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   29c44:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   29c48:	b96a      	cbnz	r2, 29c66 <quorem+0x122>
   29c4a:	3b04      	subs	r3, #4
   29c4c:	4599      	cmp	r9, r3
   29c4e:	d304      	bcc.n	29c5a <quorem+0x116>
   29c50:	e007      	b.n	29c62 <quorem+0x11e>
   29c52:	4599      	cmp	r9, r3
   29c54:	f104 34ff 	add.w	r4, r4, #4294967295
   29c58:	d203      	bcs.n	29c62 <quorem+0x11e>
   29c5a:	f853 2904 	ldr.w	r2, [r3], #-4
   29c5e:	2a00      	cmp	r2, #0
   29c60:	d0f7      	beq.n	29c52 <quorem+0x10e>
   29c62:	f8ca 4010 	str.w	r4, [sl, #16]
   29c66:	4630      	mov	r0, r6
   29c68:	b005      	add	sp, #20
   29c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c6e:	2000      	movs	r0, #0
   29c70:	b005      	add	sp, #20
   29c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c76:	bf00      	nop

00029c78 <__sflush_r>:
   29c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   29c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c80:	460d      	mov	r5, r1
   29c82:	0711      	lsls	r1, r2, #28
   29c84:	4680      	mov	r8, r0
   29c86:	d431      	bmi.n	29cec <__sflush_r+0x74>
   29c88:	686b      	ldr	r3, [r5, #4]
   29c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   29c8e:	2b00      	cmp	r3, #0
   29c90:	81aa      	strh	r2, [r5, #12]
   29c92:	dd48      	ble.n	29d26 <__sflush_r+0xae>
   29c94:	6aac      	ldr	r4, [r5, #40]	; 0x28
   29c96:	2c00      	cmp	r4, #0
   29c98:	d042      	beq.n	29d20 <__sflush_r+0xa8>
   29c9a:	2100      	movs	r1, #0
   29c9c:	b293      	uxth	r3, r2
   29c9e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   29ca2:	f8d8 6000 	ldr.w	r6, [r8]
   29ca6:	f8c8 1000 	str.w	r1, [r8]
   29caa:	d140      	bne.n	29d2e <__sflush_r+0xb6>
   29cac:	2301      	movs	r3, #1
   29cae:	69e9      	ldr	r1, [r5, #28]
   29cb0:	4640      	mov	r0, r8
   29cb2:	47a0      	blx	r4
   29cb4:	1c43      	adds	r3, r0, #1
   29cb6:	d073      	beq.n	29da0 <__sflush_r+0x128>
   29cb8:	89ab      	ldrh	r3, [r5, #12]
   29cba:	6aac      	ldr	r4, [r5, #40]	; 0x28
   29cbc:	075f      	lsls	r7, r3, #29
   29cbe:	d505      	bpl.n	29ccc <__sflush_r+0x54>
   29cc0:	686a      	ldr	r2, [r5, #4]
   29cc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   29cc4:	1a80      	subs	r0, r0, r2
   29cc6:	b10b      	cbz	r3, 29ccc <__sflush_r+0x54>
   29cc8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   29cca:	1ac0      	subs	r0, r0, r3
   29ccc:	4602      	mov	r2, r0
   29cce:	2300      	movs	r3, #0
   29cd0:	69e9      	ldr	r1, [r5, #28]
   29cd2:	4640      	mov	r0, r8
   29cd4:	47a0      	blx	r4
   29cd6:	1c44      	adds	r4, r0, #1
   29cd8:	d133      	bne.n	29d42 <__sflush_r+0xca>
   29cda:	f8d8 4000 	ldr.w	r4, [r8]
   29cde:	2c1d      	cmp	r4, #29
   29ce0:	d94b      	bls.n	29d7a <__sflush_r+0x102>
   29ce2:	89ab      	ldrh	r3, [r5, #12]
   29ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29ce8:	81ab      	strh	r3, [r5, #12]
   29cea:	e01a      	b.n	29d22 <__sflush_r+0xaa>
   29cec:	692f      	ldr	r7, [r5, #16]
   29cee:	b1bf      	cbz	r7, 29d20 <__sflush_r+0xa8>
   29cf0:	b293      	uxth	r3, r2
   29cf2:	682e      	ldr	r6, [r5, #0]
   29cf4:	602f      	str	r7, [r5, #0]
   29cf6:	0799      	lsls	r1, r3, #30
   29cf8:	eba6 0607 	sub.w	r6, r6, r7
   29cfc:	bf0c      	ite	eq
   29cfe:	696b      	ldreq	r3, [r5, #20]
   29d00:	2300      	movne	r3, #0
   29d02:	60ab      	str	r3, [r5, #8]
   29d04:	e00a      	b.n	29d1c <__sflush_r+0xa4>
   29d06:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   29d08:	4633      	mov	r3, r6
   29d0a:	463a      	mov	r2, r7
   29d0c:	69e9      	ldr	r1, [r5, #28]
   29d0e:	4640      	mov	r0, r8
   29d10:	47a0      	blx	r4
   29d12:	1e04      	subs	r4, r0, #0
   29d14:	eba6 0604 	sub.w	r6, r6, r4
   29d18:	4427      	add	r7, r4
   29d1a:	dd0a      	ble.n	29d32 <__sflush_r+0xba>
   29d1c:	2e00      	cmp	r6, #0
   29d1e:	dcf2      	bgt.n	29d06 <__sflush_r+0x8e>
   29d20:	2000      	movs	r0, #0
   29d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29d26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   29d28:	2b00      	cmp	r3, #0
   29d2a:	dcb3      	bgt.n	29c94 <__sflush_r+0x1c>
   29d2c:	e7f8      	b.n	29d20 <__sflush_r+0xa8>
   29d2e:	6d28      	ldr	r0, [r5, #80]	; 0x50
   29d30:	e7c4      	b.n	29cbc <__sflush_r+0x44>
   29d32:	89ab      	ldrh	r3, [r5, #12]
   29d34:	f04f 30ff 	mov.w	r0, #4294967295
   29d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29d3c:	81ab      	strh	r3, [r5, #12]
   29d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29d42:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   29d46:	2100      	movs	r1, #0
   29d48:	692a      	ldr	r2, [r5, #16]
   29d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   29d4e:	e9c5 2100 	strd	r2, r1, [r5]
   29d52:	04da      	lsls	r2, r3, #19
   29d54:	81ab      	strh	r3, [r5, #12]
   29d56:	d500      	bpl.n	29d5a <__sflush_r+0xe2>
   29d58:	6528      	str	r0, [r5, #80]	; 0x50
   29d5a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   29d5c:	f8c8 6000 	str.w	r6, [r8]
   29d60:	2900      	cmp	r1, #0
   29d62:	d0dd      	beq.n	29d20 <__sflush_r+0xa8>
   29d64:	f105 0340 	add.w	r3, r5, #64	; 0x40
   29d68:	4299      	cmp	r1, r3
   29d6a:	d002      	beq.n	29d72 <__sflush_r+0xfa>
   29d6c:	4640      	mov	r0, r8
   29d6e:	f000 f993 	bl	2a098 <_free_r>
   29d72:	2000      	movs	r0, #0
   29d74:	6328      	str	r0, [r5, #48]	; 0x30
   29d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29d7a:	4a0f      	ldr	r2, [pc, #60]	; (29db8 <__sflush_r+0x140>)
   29d7c:	40e2      	lsrs	r2, r4
   29d7e:	43d2      	mvns	r2, r2
   29d80:	f012 0201 	ands.w	r2, r2, #1
   29d84:	d1ad      	bne.n	29ce2 <__sflush_r+0x6a>
   29d86:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   29d8a:	6929      	ldr	r1, [r5, #16]
   29d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   29d90:	81ab      	strh	r3, [r5, #12]
   29d92:	04db      	lsls	r3, r3, #19
   29d94:	e9c5 1200 	strd	r1, r2, [r5]
   29d98:	d5df      	bpl.n	29d5a <__sflush_r+0xe2>
   29d9a:	2c00      	cmp	r4, #0
   29d9c:	d1dd      	bne.n	29d5a <__sflush_r+0xe2>
   29d9e:	e7db      	b.n	29d58 <__sflush_r+0xe0>
   29da0:	f8d8 3000 	ldr.w	r3, [r8]
   29da4:	2b00      	cmp	r3, #0
   29da6:	d087      	beq.n	29cb8 <__sflush_r+0x40>
   29da8:	2b1d      	cmp	r3, #29
   29daa:	d001      	beq.n	29db0 <__sflush_r+0x138>
   29dac:	2b16      	cmp	r3, #22
   29dae:	d198      	bne.n	29ce2 <__sflush_r+0x6a>
   29db0:	f8c8 6000 	str.w	r6, [r8]
   29db4:	e7b4      	b.n	29d20 <__sflush_r+0xa8>
   29db6:	bf00      	nop
   29db8:	20400001 	.word	0x20400001

00029dbc <_fflush_r>:
   29dbc:	b538      	push	{r3, r4, r5, lr}
   29dbe:	460c      	mov	r4, r1
   29dc0:	4605      	mov	r5, r0
   29dc2:	b108      	cbz	r0, 29dc8 <_fflush_r+0xc>
   29dc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   29dc6:	b1a3      	cbz	r3, 29df2 <_fflush_r+0x36>
   29dc8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   29dcc:	b1b8      	cbz	r0, 29dfe <_fflush_r+0x42>
   29dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29dd0:	07db      	lsls	r3, r3, #31
   29dd2:	d401      	bmi.n	29dd8 <_fflush_r+0x1c>
   29dd4:	0581      	lsls	r1, r0, #22
   29dd6:	d515      	bpl.n	29e04 <_fflush_r+0x48>
   29dd8:	4628      	mov	r0, r5
   29dda:	4621      	mov	r1, r4
   29ddc:	f7ff ff4c 	bl	29c78 <__sflush_r>
   29de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29de2:	4605      	mov	r5, r0
   29de4:	07da      	lsls	r2, r3, #31
   29de6:	d402      	bmi.n	29dee <_fflush_r+0x32>
   29de8:	89a3      	ldrh	r3, [r4, #12]
   29dea:	059b      	lsls	r3, r3, #22
   29dec:	d50e      	bpl.n	29e0c <_fflush_r+0x50>
   29dee:	4628      	mov	r0, r5
   29df0:	bd38      	pop	{r3, r4, r5, pc}
   29df2:	f000 f841 	bl	29e78 <__sinit>
   29df6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   29dfa:	2800      	cmp	r0, #0
   29dfc:	d1e7      	bne.n	29dce <_fflush_r+0x12>
   29dfe:	4605      	mov	r5, r0
   29e00:	4628      	mov	r0, r5
   29e02:	bd38      	pop	{r3, r4, r5, pc}
   29e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29e06:	f000 ffed 	bl	2ade4 <__retarget_lock_acquire_recursive>
   29e0a:	e7e5      	b.n	29dd8 <_fflush_r+0x1c>
   29e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29e0e:	f000 ffeb 	bl	2ade8 <__retarget_lock_release_recursive>
   29e12:	4628      	mov	r0, r5
   29e14:	bd38      	pop	{r3, r4, r5, pc}
   29e16:	bf00      	nop

00029e18 <std>:
   29e18:	b538      	push	{r3, r4, r5, lr}
   29e1a:	4604      	mov	r4, r0
   29e1c:	4613      	mov	r3, r2
   29e1e:	460d      	mov	r5, r1
   29e20:	2100      	movs	r1, #0
   29e22:	2208      	movs	r2, #8
   29e24:	305c      	adds	r0, #92	; 0x5c
   29e26:	f820 5c50 	strh.w	r5, [r0, #-80]
   29e2a:	81e3      	strh	r3, [r4, #14]
   29e2c:	60a1      	str	r1, [r4, #8]
   29e2e:	6661      	str	r1, [r4, #100]	; 0x64
   29e30:	61a1      	str	r1, [r4, #24]
   29e32:	4d0a      	ldr	r5, [pc, #40]	; (29e5c <std+0x44>)
   29e34:	e9c4 1100 	strd	r1, r1, [r4]
   29e38:	e9c4 1104 	strd	r1, r1, [r4, #16]
   29e3c:	f7fc fafc 	bl	26438 <memset>
   29e40:	4b07      	ldr	r3, [pc, #28]	; (29e60 <std+0x48>)
   29e42:	4908      	ldr	r1, [pc, #32]	; (29e64 <std+0x4c>)
   29e44:	f104 0058 	add.w	r0, r4, #88	; 0x58
   29e48:	4a07      	ldr	r2, [pc, #28]	; (29e68 <std+0x50>)
   29e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
   29e4c:	e9c4 4507 	strd	r4, r5, [r4, #28]
   29e50:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   29e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29e58:	f000 bfc0 	b.w	2addc <__retarget_lock_init_recursive>
   29e5c:	00026a39 	.word	0x00026a39
   29e60:	00026ac5 	.word	0x00026ac5
   29e64:	00026a61 	.word	0x00026a61
   29e68:	00026aa1 	.word	0x00026aa1

00029e6c <_cleanup_r>:
   29e6c:	4901      	ldr	r1, [pc, #4]	; (29e74 <_cleanup_r+0x8>)
   29e6e:	f000 bb8f 	b.w	2a590 <_fwalk_reent>
   29e72:	bf00      	nop
   29e74:	0002c305 	.word	0x0002c305

00029e78 <__sinit>:
   29e78:	b510      	push	{r4, lr}
   29e7a:	4604      	mov	r4, r0
   29e7c:	4814      	ldr	r0, [pc, #80]	; (29ed0 <__sinit+0x58>)
   29e7e:	f000 ffb1 	bl	2ade4 <__retarget_lock_acquire_recursive>
   29e82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   29e84:	b9fa      	cbnz	r2, 29ec6 <__sinit+0x4e>
   29e86:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   29e8a:	4812      	ldr	r0, [pc, #72]	; (29ed4 <__sinit+0x5c>)
   29e8c:	2103      	movs	r1, #3
   29e8e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   29e92:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   29e96:	63e0      	str	r0, [r4, #60]	; 0x3c
   29e98:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   29e9c:	2104      	movs	r1, #4
   29e9e:	6860      	ldr	r0, [r4, #4]
   29ea0:	f7ff ffba 	bl	29e18 <std>
   29ea4:	68a0      	ldr	r0, [r4, #8]
   29ea6:	2201      	movs	r2, #1
   29ea8:	2109      	movs	r1, #9
   29eaa:	f7ff ffb5 	bl	29e18 <std>
   29eae:	68e0      	ldr	r0, [r4, #12]
   29eb0:	2202      	movs	r2, #2
   29eb2:	2112      	movs	r1, #18
   29eb4:	f7ff ffb0 	bl	29e18 <std>
   29eb8:	2301      	movs	r3, #1
   29eba:	4805      	ldr	r0, [pc, #20]	; (29ed0 <__sinit+0x58>)
   29ebc:	63a3      	str	r3, [r4, #56]	; 0x38
   29ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29ec2:	f000 bf91 	b.w	2ade8 <__retarget_lock_release_recursive>
   29ec6:	4802      	ldr	r0, [pc, #8]	; (29ed0 <__sinit+0x58>)
   29ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29ecc:	f000 bf8c 	b.w	2ade8 <__retarget_lock_release_recursive>
   29ed0:	20026418 	.word	0x20026418
   29ed4:	00029e6d 	.word	0x00029e6d

00029ed8 <__sfp_lock_acquire>:
   29ed8:	4801      	ldr	r0, [pc, #4]	; (29ee0 <__sfp_lock_acquire+0x8>)
   29eda:	f000 bf83 	b.w	2ade4 <__retarget_lock_acquire_recursive>
   29ede:	bf00      	nop
   29ee0:	2002642c 	.word	0x2002642c

00029ee4 <__sfp_lock_release>:
   29ee4:	4801      	ldr	r0, [pc, #4]	; (29eec <__sfp_lock_release+0x8>)
   29ee6:	f000 bf7f 	b.w	2ade8 <__retarget_lock_release_recursive>
   29eea:	bf00      	nop
   29eec:	2002642c 	.word	0x2002642c

00029ef0 <__fputwc>:
   29ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29ef4:	b082      	sub	sp, #8
   29ef6:	4680      	mov	r8, r0
   29ef8:	4689      	mov	r9, r1
   29efa:	4614      	mov	r4, r2
   29efc:	f000 ff64 	bl	2adc8 <__locale_mb_cur_max>
   29f00:	2801      	cmp	r0, #1
   29f02:	d103      	bne.n	29f0c <__fputwc+0x1c>
   29f04:	f109 33ff 	add.w	r3, r9, #4294967295
   29f08:	2bfe      	cmp	r3, #254	; 0xfe
   29f0a:	d931      	bls.n	29f70 <__fputwc+0x80>
   29f0c:	464a      	mov	r2, r9
   29f0e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   29f12:	a901      	add	r1, sp, #4
   29f14:	4640      	mov	r0, r8
   29f16:	f002 f999 	bl	2c24c <_wcrtomb_r>
   29f1a:	1c42      	adds	r2, r0, #1
   29f1c:	4606      	mov	r6, r0
   29f1e:	d032      	beq.n	29f86 <__fputwc+0x96>
   29f20:	b360      	cbz	r0, 29f7c <__fputwc+0x8c>
   29f22:	f89d c004 	ldrb.w	ip, [sp, #4]
   29f26:	2500      	movs	r5, #0
   29f28:	f10d 0a04 	add.w	sl, sp, #4
   29f2c:	e00c      	b.n	29f48 <__fputwc+0x58>
   29f2e:	f1bc 0f0a 	cmp.w	ip, #10
   29f32:	d014      	beq.n	29f5e <__fputwc+0x6e>
   29f34:	6823      	ldr	r3, [r4, #0]
   29f36:	1c5a      	adds	r2, r3, #1
   29f38:	6022      	str	r2, [r4, #0]
   29f3a:	f883 c000 	strb.w	ip, [r3]
   29f3e:	3501      	adds	r5, #1
   29f40:	42b5      	cmp	r5, r6
   29f42:	d21b      	bcs.n	29f7c <__fputwc+0x8c>
   29f44:	f815 c00a 	ldrb.w	ip, [r5, sl]
   29f48:	68a3      	ldr	r3, [r4, #8]
   29f4a:	3b01      	subs	r3, #1
   29f4c:	2b00      	cmp	r3, #0
   29f4e:	60a3      	str	r3, [r4, #8]
   29f50:	daf0      	bge.n	29f34 <__fputwc+0x44>
   29f52:	69a7      	ldr	r7, [r4, #24]
   29f54:	4661      	mov	r1, ip
   29f56:	4622      	mov	r2, r4
   29f58:	4640      	mov	r0, r8
   29f5a:	42bb      	cmp	r3, r7
   29f5c:	dae7      	bge.n	29f2e <__fputwc+0x3e>
   29f5e:	f002 f91d 	bl	2c19c <__swbuf_r>
   29f62:	1c43      	adds	r3, r0, #1
   29f64:	d1eb      	bne.n	29f3e <__fputwc+0x4e>
   29f66:	4606      	mov	r6, r0
   29f68:	4630      	mov	r0, r6
   29f6a:	b002      	add	sp, #8
   29f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f70:	fa5f fc89 	uxtb.w	ip, r9
   29f74:	4606      	mov	r6, r0
   29f76:	f88d c004 	strb.w	ip, [sp, #4]
   29f7a:	e7d4      	b.n	29f26 <__fputwc+0x36>
   29f7c:	464e      	mov	r6, r9
   29f7e:	4630      	mov	r0, r6
   29f80:	b002      	add	sp, #8
   29f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f86:	89a3      	ldrh	r3, [r4, #12]
   29f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29f8c:	81a3      	strh	r3, [r4, #12]
   29f8e:	e7eb      	b.n	29f68 <__fputwc+0x78>

00029f90 <_fputwc_r>:
   29f90:	6e53      	ldr	r3, [r2, #100]	; 0x64
   29f92:	f013 0f01 	tst.w	r3, #1
   29f96:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   29f9a:	b530      	push	{r4, r5, lr}
   29f9c:	4614      	mov	r4, r2
   29f9e:	b083      	sub	sp, #12
   29fa0:	4605      	mov	r5, r0
   29fa2:	b29a      	uxth	r2, r3
   29fa4:	d101      	bne.n	29faa <_fputwc_r+0x1a>
   29fa6:	0598      	lsls	r0, r3, #22
   29fa8:	d51c      	bpl.n	29fe4 <_fputwc_r+0x54>
   29faa:	0490      	lsls	r0, r2, #18
   29fac:	d406      	bmi.n	29fbc <_fputwc_r+0x2c>
   29fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29fb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   29fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   29fb8:	81a3      	strh	r3, [r4, #12]
   29fba:	6662      	str	r2, [r4, #100]	; 0x64
   29fbc:	4628      	mov	r0, r5
   29fbe:	4622      	mov	r2, r4
   29fc0:	f7ff ff96 	bl	29ef0 <__fputwc>
   29fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29fc6:	4605      	mov	r5, r0
   29fc8:	07da      	lsls	r2, r3, #31
   29fca:	d402      	bmi.n	29fd2 <_fputwc_r+0x42>
   29fcc:	89a3      	ldrh	r3, [r4, #12]
   29fce:	059b      	lsls	r3, r3, #22
   29fd0:	d502      	bpl.n	29fd8 <_fputwc_r+0x48>
   29fd2:	4628      	mov	r0, r5
   29fd4:	b003      	add	sp, #12
   29fd6:	bd30      	pop	{r4, r5, pc}
   29fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29fda:	f000 ff05 	bl	2ade8 <__retarget_lock_release_recursive>
   29fde:	4628      	mov	r0, r5
   29fe0:	b003      	add	sp, #12
   29fe2:	bd30      	pop	{r4, r5, pc}
   29fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29fe6:	9101      	str	r1, [sp, #4]
   29fe8:	f000 fefc 	bl	2ade4 <__retarget_lock_acquire_recursive>
   29fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29ff0:	9901      	ldr	r1, [sp, #4]
   29ff2:	b29a      	uxth	r2, r3
   29ff4:	e7d9      	b.n	29faa <_fputwc_r+0x1a>
   29ff6:	bf00      	nop

00029ff8 <_malloc_trim_r>:
   29ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ffa:	4f23      	ldr	r7, [pc, #140]	; (2a088 <_malloc_trim_r+0x90>)
   29ffc:	460c      	mov	r4, r1
   29ffe:	4606      	mov	r6, r0
   2a000:	f7fc fa6a 	bl	264d8 <__malloc_lock>
   2a004:	68b9      	ldr	r1, [r7, #8]
   2a006:	f640 73ef 	movw	r3, #4079	; 0xfef
   2a00a:	4a20      	ldr	r2, [pc, #128]	; (2a08c <_malloc_trim_r+0x94>)
   2a00c:	684d      	ldr	r5, [r1, #4]
   2a00e:	1b1b      	subs	r3, r3, r4
   2a010:	f025 0503 	bic.w	r5, r5, #3
   2a014:	442b      	add	r3, r5
   2a016:	401a      	ands	r2, r3
   2a018:	f5a2 5480 	sub.w	r4, r2, #4096	; 0x1000
   2a01c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2a020:	db07      	blt.n	2a032 <_malloc_trim_r+0x3a>
   2a022:	2100      	movs	r1, #0
   2a024:	4630      	mov	r0, r6
   2a026:	f7fc fc65 	bl	268f4 <_sbrk_r>
   2a02a:	68bb      	ldr	r3, [r7, #8]
   2a02c:	442b      	add	r3, r5
   2a02e:	4298      	cmp	r0, r3
   2a030:	d004      	beq.n	2a03c <_malloc_trim_r+0x44>
   2a032:	4630      	mov	r0, r6
   2a034:	f7fc fa56 	bl	264e4 <__malloc_unlock>
   2a038:	2000      	movs	r0, #0
   2a03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a03c:	4261      	negs	r1, r4
   2a03e:	4630      	mov	r0, r6
   2a040:	f7fc fc58 	bl	268f4 <_sbrk_r>
   2a044:	3001      	adds	r0, #1
   2a046:	d00d      	beq.n	2a064 <_malloc_trim_r+0x6c>
   2a048:	4b11      	ldr	r3, [pc, #68]	; (2a090 <_malloc_trim_r+0x98>)
   2a04a:	1b2d      	subs	r5, r5, r4
   2a04c:	68b9      	ldr	r1, [r7, #8]
   2a04e:	4630      	mov	r0, r6
   2a050:	681a      	ldr	r2, [r3, #0]
   2a052:	f045 0501 	orr.w	r5, r5, #1
   2a056:	1b12      	subs	r2, r2, r4
   2a058:	604d      	str	r5, [r1, #4]
   2a05a:	601a      	str	r2, [r3, #0]
   2a05c:	f7fc fa42 	bl	264e4 <__malloc_unlock>
   2a060:	2001      	movs	r0, #1
   2a062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a064:	2100      	movs	r1, #0
   2a066:	4630      	mov	r0, r6
   2a068:	f7fc fc44 	bl	268f4 <_sbrk_r>
   2a06c:	68ba      	ldr	r2, [r7, #8]
   2a06e:	1a83      	subs	r3, r0, r2
   2a070:	2b0f      	cmp	r3, #15
   2a072:	ddde      	ble.n	2a032 <_malloc_trim_r+0x3a>
   2a074:	4c07      	ldr	r4, [pc, #28]	; (2a094 <_malloc_trim_r+0x9c>)
   2a076:	f043 0301 	orr.w	r3, r3, #1
   2a07a:	4905      	ldr	r1, [pc, #20]	; (2a090 <_malloc_trim_r+0x98>)
   2a07c:	6824      	ldr	r4, [r4, #0]
   2a07e:	6053      	str	r3, [r2, #4]
   2a080:	1b00      	subs	r0, r0, r4
   2a082:	6008      	str	r0, [r1, #0]
   2a084:	e7d5      	b.n	2a032 <_malloc_trim_r+0x3a>
   2a086:	bf00      	nop
   2a088:	200204dc 	.word	0x200204dc
   2a08c:	fffff000 	.word	0xfffff000
   2a090:	20024278 	.word	0x20024278
   2a094:	200208e4 	.word	0x200208e4

0002a098 <_free_r>:
   2a098:	2900      	cmp	r1, #0
   2a09a:	d05f      	beq.n	2a15c <_free_r+0xc4>
   2a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a09e:	460c      	mov	r4, r1
   2a0a0:	4606      	mov	r6, r0
   2a0a2:	f7fc fa19 	bl	264d8 <__malloc_lock>
   2a0a6:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 2a2a0 <_free_r+0x208>
   2a0aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a0ae:	f1a4 0008 	sub.w	r0, r4, #8
   2a0b2:	f8dc 7008 	ldr.w	r7, [ip, #8]
   2a0b6:	f023 0101 	bic.w	r1, r3, #1
   2a0ba:	1842      	adds	r2, r0, r1
   2a0bc:	6855      	ldr	r5, [r2, #4]
   2a0be:	4297      	cmp	r7, r2
   2a0c0:	f025 0503 	bic.w	r5, r5, #3
   2a0c4:	f000 8089 	beq.w	2a1da <_free_r+0x142>
   2a0c8:	07df      	lsls	r7, r3, #31
   2a0ca:	6055      	str	r5, [r2, #4]
   2a0cc:	d434      	bmi.n	2a138 <_free_r+0xa0>
   2a0ce:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2a0d2:	f10c 0408 	add.w	r4, ip, #8
   2a0d6:	1ac0      	subs	r0, r0, r3
   2a0d8:	4419      	add	r1, r3
   2a0da:	6883      	ldr	r3, [r0, #8]
   2a0dc:	42a3      	cmp	r3, r4
   2a0de:	d06a      	beq.n	2a1b6 <_free_r+0x11e>
   2a0e0:	1957      	adds	r7, r2, r5
   2a0e2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2a0e6:	687f      	ldr	r7, [r7, #4]
   2a0e8:	f8c3 e00c 	str.w	lr, [r3, #12]
   2a0ec:	f8ce 3008 	str.w	r3, [lr, #8]
   2a0f0:	07fb      	lsls	r3, r7, #31
   2a0f2:	f140 8097 	bpl.w	2a224 <_free_r+0x18c>
   2a0f6:	f041 0301 	orr.w	r3, r1, #1
   2a0fa:	6043      	str	r3, [r0, #4]
   2a0fc:	6011      	str	r1, [r2, #0]
   2a0fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2a102:	d234      	bcs.n	2a16e <_free_r+0xd6>
   2a104:	2201      	movs	r2, #1
   2a106:	08cb      	lsrs	r3, r1, #3
   2a108:	0949      	lsrs	r1, r1, #5
   2a10a:	f8dc 4004 	ldr.w	r4, [ip, #4]
   2a10e:	4413      	add	r3, r2
   2a110:	fa02 f101 	lsl.w	r1, r2, r1
   2a114:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   2a118:	4321      	orrs	r1, r4
   2a11a:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   2a11e:	3a08      	subs	r2, #8
   2a120:	f8cc 1004 	str.w	r1, [ip, #4]
   2a124:	e9c0 4202 	strd	r4, r2, [r0, #8]
   2a128:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   2a12c:	60e0      	str	r0, [r4, #12]
   2a12e:	4630      	mov	r0, r6
   2a130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a134:	f7fc b9d6 	b.w	264e4 <__malloc_unlock>
   2a138:	1953      	adds	r3, r2, r5
   2a13a:	685b      	ldr	r3, [r3, #4]
   2a13c:	07df      	lsls	r7, r3, #31
   2a13e:	d40e      	bmi.n	2a15e <_free_r+0xc6>
   2a140:	4429      	add	r1, r5
   2a142:	f10c 0408 	add.w	r4, ip, #8
   2a146:	6893      	ldr	r3, [r2, #8]
   2a148:	42a3      	cmp	r3, r4
   2a14a:	d073      	beq.n	2a234 <_free_r+0x19c>
   2a14c:	68d4      	ldr	r4, [r2, #12]
   2a14e:	f041 0201 	orr.w	r2, r1, #1
   2a152:	60dc      	str	r4, [r3, #12]
   2a154:	60a3      	str	r3, [r4, #8]
   2a156:	6042      	str	r2, [r0, #4]
   2a158:	5041      	str	r1, [r0, r1]
   2a15a:	e7d0      	b.n	2a0fe <_free_r+0x66>
   2a15c:	4770      	bx	lr
   2a15e:	f041 0301 	orr.w	r3, r1, #1
   2a162:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2a166:	f844 3c04 	str.w	r3, [r4, #-4]
   2a16a:	6011      	str	r1, [r2, #0]
   2a16c:	d3ca      	bcc.n	2a104 <_free_r+0x6c>
   2a16e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   2a172:	ea4f 2351 	mov.w	r3, r1, lsr #9
   2a176:	d24a      	bcs.n	2a20e <_free_r+0x176>
   2a178:	098b      	lsrs	r3, r1, #6
   2a17a:	f103 0439 	add.w	r4, r3, #57	; 0x39
   2a17e:	f103 0238 	add.w	r2, r3, #56	; 0x38
   2a182:	00e3      	lsls	r3, r4, #3
   2a184:	eb0c 0403 	add.w	r4, ip, r3
   2a188:	f85c 3003 	ldr.w	r3, [ip, r3]
   2a18c:	3c08      	subs	r4, #8
   2a18e:	429c      	cmp	r4, r3
   2a190:	d059      	beq.n	2a246 <_free_r+0x1ae>
   2a192:	685a      	ldr	r2, [r3, #4]
   2a194:	f022 0203 	bic.w	r2, r2, #3
   2a198:	428a      	cmp	r2, r1
   2a19a:	d902      	bls.n	2a1a2 <_free_r+0x10a>
   2a19c:	689b      	ldr	r3, [r3, #8]
   2a19e:	429c      	cmp	r4, r3
   2a1a0:	d1f7      	bne.n	2a192 <_free_r+0xfa>
   2a1a2:	68dc      	ldr	r4, [r3, #12]
   2a1a4:	e9c0 3402 	strd	r3, r4, [r0, #8]
   2a1a8:	60a0      	str	r0, [r4, #8]
   2a1aa:	60d8      	str	r0, [r3, #12]
   2a1ac:	4630      	mov	r0, r6
   2a1ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a1b2:	f7fc b997 	b.w	264e4 <__malloc_unlock>
   2a1b6:	1953      	adds	r3, r2, r5
   2a1b8:	685b      	ldr	r3, [r3, #4]
   2a1ba:	07db      	lsls	r3, r3, #31
   2a1bc:	d466      	bmi.n	2a28c <_free_r+0x1f4>
   2a1be:	4429      	add	r1, r5
   2a1c0:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   2a1c4:	f041 0401 	orr.w	r4, r1, #1
   2a1c8:	60d3      	str	r3, [r2, #12]
   2a1ca:	609a      	str	r2, [r3, #8]
   2a1cc:	6044      	str	r4, [r0, #4]
   2a1ce:	5041      	str	r1, [r0, r1]
   2a1d0:	4630      	mov	r0, r6
   2a1d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a1d6:	f7fc b985 	b.w	264e4 <__malloc_unlock>
   2a1da:	07db      	lsls	r3, r3, #31
   2a1dc:	4429      	add	r1, r5
   2a1de:	d407      	bmi.n	2a1f0 <_free_r+0x158>
   2a1e0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2a1e4:	1ac0      	subs	r0, r0, r3
   2a1e6:	4419      	add	r1, r3
   2a1e8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2a1ec:	60d3      	str	r3, [r2, #12]
   2a1ee:	609a      	str	r2, [r3, #8]
   2a1f0:	4b29      	ldr	r3, [pc, #164]	; (2a298 <_free_r+0x200>)
   2a1f2:	f041 0201 	orr.w	r2, r1, #1
   2a1f6:	681b      	ldr	r3, [r3, #0]
   2a1f8:	6042      	str	r2, [r0, #4]
   2a1fa:	428b      	cmp	r3, r1
   2a1fc:	f8cc 0008 	str.w	r0, [ip, #8]
   2a200:	d895      	bhi.n	2a12e <_free_r+0x96>
   2a202:	4b26      	ldr	r3, [pc, #152]	; (2a29c <_free_r+0x204>)
   2a204:	4630      	mov	r0, r6
   2a206:	6819      	ldr	r1, [r3, #0]
   2a208:	f7ff fef6 	bl	29ff8 <_malloc_trim_r>
   2a20c:	e78f      	b.n	2a12e <_free_r+0x96>
   2a20e:	2b14      	cmp	r3, #20
   2a210:	d90a      	bls.n	2a228 <_free_r+0x190>
   2a212:	2b54      	cmp	r3, #84	; 0x54
   2a214:	d821      	bhi.n	2a25a <_free_r+0x1c2>
   2a216:	0b0b      	lsrs	r3, r1, #12
   2a218:	f103 046f 	add.w	r4, r3, #111	; 0x6f
   2a21c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   2a220:	00e3      	lsls	r3, r4, #3
   2a222:	e7af      	b.n	2a184 <_free_r+0xec>
   2a224:	4429      	add	r1, r5
   2a226:	e78e      	b.n	2a146 <_free_r+0xae>
   2a228:	f103 045c 	add.w	r4, r3, #92	; 0x5c
   2a22c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   2a230:	00e3      	lsls	r3, r4, #3
   2a232:	e7a7      	b.n	2a184 <_free_r+0xec>
   2a234:	f041 0301 	orr.w	r3, r1, #1
   2a238:	e9cc 0004 	strd	r0, r0, [ip, #16]
   2a23c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   2a240:	6043      	str	r3, [r0, #4]
   2a242:	5041      	str	r1, [r0, r1]
   2a244:	e773      	b.n	2a12e <_free_r+0x96>
   2a246:	1092      	asrs	r2, r2, #2
   2a248:	2501      	movs	r5, #1
   2a24a:	f8dc 1004 	ldr.w	r1, [ip, #4]
   2a24e:	fa05 f202 	lsl.w	r2, r5, r2
   2a252:	430a      	orrs	r2, r1
   2a254:	f8cc 2004 	str.w	r2, [ip, #4]
   2a258:	e7a4      	b.n	2a1a4 <_free_r+0x10c>
   2a25a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2a25e:	d806      	bhi.n	2a26e <_free_r+0x1d6>
   2a260:	0bcb      	lsrs	r3, r1, #15
   2a262:	f103 0478 	add.w	r4, r3, #120	; 0x78
   2a266:	f103 0277 	add.w	r2, r3, #119	; 0x77
   2a26a:	00e3      	lsls	r3, r4, #3
   2a26c:	e78a      	b.n	2a184 <_free_r+0xec>
   2a26e:	f240 5254 	movw	r2, #1364	; 0x554
   2a272:	4293      	cmp	r3, r2
   2a274:	d806      	bhi.n	2a284 <_free_r+0x1ec>
   2a276:	0c8b      	lsrs	r3, r1, #18
   2a278:	f103 047d 	add.w	r4, r3, #125	; 0x7d
   2a27c:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   2a280:	00e3      	lsls	r3, r4, #3
   2a282:	e77f      	b.n	2a184 <_free_r+0xec>
   2a284:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2a288:	227e      	movs	r2, #126	; 0x7e
   2a28a:	e77b      	b.n	2a184 <_free_r+0xec>
   2a28c:	f041 0301 	orr.w	r3, r1, #1
   2a290:	6043      	str	r3, [r0, #4]
   2a292:	6011      	str	r1, [r2, #0]
   2a294:	e74b      	b.n	2a12e <_free_r+0x96>
   2a296:	bf00      	nop
   2a298:	200208e8 	.word	0x200208e8
   2a29c:	200242a8 	.word	0x200242a8
   2a2a0:	200204dc 	.word	0x200204dc

0002a2a4 <__sfvwrite_r>:
   2a2a4:	6893      	ldr	r3, [r2, #8]
   2a2a6:	2b00      	cmp	r3, #0
   2a2a8:	f000 808d 	beq.w	2a3c6 <__sfvwrite_r+0x122>
   2a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2b0:	4690      	mov	r8, r2
   2a2b2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2a2b6:	460c      	mov	r4, r1
   2a2b8:	b083      	sub	sp, #12
   2a2ba:	0711      	lsls	r1, r2, #28
   2a2bc:	4681      	mov	r9, r0
   2a2be:	b293      	uxth	r3, r2
   2a2c0:	d525      	bpl.n	2a30e <__sfvwrite_r+0x6a>
   2a2c2:	6922      	ldr	r2, [r4, #16]
   2a2c4:	b31a      	cbz	r2, 2a30e <__sfvwrite_r+0x6a>
   2a2c6:	f013 0702 	ands.w	r7, r3, #2
   2a2ca:	f8d8 5000 	ldr.w	r5, [r8]
   2a2ce:	d02d      	beq.n	2a32c <__sfvwrite_r+0x88>
   2a2d0:	2600      	movs	r6, #0
   2a2d2:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 2a58c <__sfvwrite_r+0x2e8>
   2a2d6:	46aa      	mov	sl, r5
   2a2d8:	4637      	mov	r7, r6
   2a2da:	455f      	cmp	r7, fp
   2a2dc:	463b      	mov	r3, r7
   2a2de:	4632      	mov	r2, r6
   2a2e0:	4648      	mov	r0, r9
   2a2e2:	bf28      	it	cs
   2a2e4:	465b      	movcs	r3, fp
   2a2e6:	2f00      	cmp	r7, #0
   2a2e8:	d052      	beq.n	2a390 <__sfvwrite_r+0xec>
   2a2ea:	69e1      	ldr	r1, [r4, #28]
   2a2ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2a2ee:	47a8      	blx	r5
   2a2f0:	2800      	cmp	r0, #0
   2a2f2:	dd5e      	ble.n	2a3b2 <__sfvwrite_r+0x10e>
   2a2f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2a2f8:	4406      	add	r6, r0
   2a2fa:	1a3f      	subs	r7, r7, r0
   2a2fc:	1a18      	subs	r0, r3, r0
   2a2fe:	f8c8 0008 	str.w	r0, [r8, #8]
   2a302:	2800      	cmp	r0, #0
   2a304:	d1e9      	bne.n	2a2da <__sfvwrite_r+0x36>
   2a306:	2000      	movs	r0, #0
   2a308:	b003      	add	sp, #12
   2a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a30e:	4621      	mov	r1, r4
   2a310:	4648      	mov	r0, r9
   2a312:	f7ff fb95 	bl	29a40 <__swsetup_r>
   2a316:	2800      	cmp	r0, #0
   2a318:	f040 8135 	bne.w	2a586 <__sfvwrite_r+0x2e2>
   2a31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2a320:	f8d8 5000 	ldr.w	r5, [r8]
   2a324:	b293      	uxth	r3, r2
   2a326:	f013 0702 	ands.w	r7, r3, #2
   2a32a:	d1d1      	bne.n	2a2d0 <__sfvwrite_r+0x2c>
   2a32c:	f013 0a01 	ands.w	sl, r3, #1
   2a330:	d14b      	bne.n	2a3ca <__sfvwrite_r+0x126>
   2a332:	4656      	mov	r6, sl
   2a334:	b346      	cbz	r6, 2a388 <__sfvwrite_r+0xe4>
   2a336:	059a      	lsls	r2, r3, #22
   2a338:	f8d4 b008 	ldr.w	fp, [r4, #8]
   2a33c:	f140 8090 	bpl.w	2a460 <__sfvwrite_r+0x1bc>
   2a340:	45b3      	cmp	fp, r6
   2a342:	465a      	mov	r2, fp
   2a344:	f200 80bc 	bhi.w	2a4c0 <__sfvwrite_r+0x21c>
   2a348:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2a34c:	f040 80d0 	bne.w	2a4f0 <__sfvwrite_r+0x24c>
   2a350:	6820      	ldr	r0, [r4, #0]
   2a352:	4651      	mov	r1, sl
   2a354:	9200      	str	r2, [sp, #0]
   2a356:	f000 fe13 	bl	2af80 <memmove>
   2a35a:	68a1      	ldr	r1, [r4, #8]
   2a35c:	6823      	ldr	r3, [r4, #0]
   2a35e:	4637      	mov	r7, r6
   2a360:	9a00      	ldr	r2, [sp, #0]
   2a362:	eba1 010b 	sub.w	r1, r1, fp
   2a366:	2600      	movs	r6, #0
   2a368:	4413      	add	r3, r2
   2a36a:	60a1      	str	r1, [r4, #8]
   2a36c:	6023      	str	r3, [r4, #0]
   2a36e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2a372:	44ba      	add	sl, r7
   2a374:	1bc7      	subs	r7, r0, r7
   2a376:	f8c8 7008 	str.w	r7, [r8, #8]
   2a37a:	2f00      	cmp	r7, #0
   2a37c:	d0c3      	beq.n	2a306 <__sfvwrite_r+0x62>
   2a37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a382:	b29b      	uxth	r3, r3
   2a384:	2e00      	cmp	r6, #0
   2a386:	d1d6      	bne.n	2a336 <__sfvwrite_r+0x92>
   2a388:	e9d5 a600 	ldrd	sl, r6, [r5]
   2a38c:	3508      	adds	r5, #8
   2a38e:	e7d1      	b.n	2a334 <__sfvwrite_r+0x90>
   2a390:	e9da 6700 	ldrd	r6, r7, [sl]
   2a394:	f10a 0a08 	add.w	sl, sl, #8
   2a398:	e79f      	b.n	2a2da <__sfvwrite_r+0x36>
   2a39a:	4629      	mov	r1, r5
   2a39c:	465a      	mov	r2, fp
   2a39e:	f000 fdef 	bl	2af80 <memmove>
   2a3a2:	6823      	ldr	r3, [r4, #0]
   2a3a4:	4621      	mov	r1, r4
   2a3a6:	4648      	mov	r0, r9
   2a3a8:	445b      	add	r3, fp
   2a3aa:	6023      	str	r3, [r4, #0]
   2a3ac:	f7ff fd06 	bl	29dbc <_fflush_r>
   2a3b0:	b358      	cbz	r0, 2a40a <__sfvwrite_r+0x166>
   2a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a3ba:	f04f 30ff 	mov.w	r0, #4294967295
   2a3be:	81a3      	strh	r3, [r4, #12]
   2a3c0:	b003      	add	sp, #12
   2a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3c6:	2000      	movs	r0, #0
   2a3c8:	4770      	bx	lr
   2a3ca:	463e      	mov	r6, r7
   2a3cc:	46aa      	mov	sl, r5
   2a3ce:	4638      	mov	r0, r7
   2a3d0:	463d      	mov	r5, r7
   2a3d2:	9700      	str	r7, [sp, #0]
   2a3d4:	b36e      	cbz	r6, 2a432 <__sfvwrite_r+0x18e>
   2a3d6:	2800      	cmp	r0, #0
   2a3d8:	d035      	beq.n	2a446 <__sfvwrite_r+0x1a2>
   2a3da:	9a00      	ldr	r2, [sp, #0]
   2a3dc:	42b2      	cmp	r2, r6
   2a3de:	6820      	ldr	r0, [r4, #0]
   2a3e0:	6921      	ldr	r1, [r4, #16]
   2a3e2:	6963      	ldr	r3, [r4, #20]
   2a3e4:	bf28      	it	cs
   2a3e6:	4632      	movcs	r2, r6
   2a3e8:	68a7      	ldr	r7, [r4, #8]
   2a3ea:	4288      	cmp	r0, r1
   2a3ec:	eb03 0b07 	add.w	fp, r3, r7
   2a3f0:	d901      	bls.n	2a3f6 <__sfvwrite_r+0x152>
   2a3f2:	455a      	cmp	r2, fp
   2a3f4:	dcd1      	bgt.n	2a39a <__sfvwrite_r+0xf6>
   2a3f6:	4293      	cmp	r3, r2
   2a3f8:	dc6d      	bgt.n	2a4d6 <__sfvwrite_r+0x232>
   2a3fa:	462a      	mov	r2, r5
   2a3fc:	69e1      	ldr	r1, [r4, #28]
   2a3fe:	4648      	mov	r0, r9
   2a400:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2a402:	47b8      	blx	r7
   2a404:	f1b0 0b00 	subs.w	fp, r0, #0
   2a408:	ddd3      	ble.n	2a3b2 <__sfvwrite_r+0x10e>
   2a40a:	9b00      	ldr	r3, [sp, #0]
   2a40c:	ebb3 030b 	subs.w	r3, r3, fp
   2a410:	9300      	str	r3, [sp, #0]
   2a412:	d059      	beq.n	2a4c8 <__sfvwrite_r+0x224>
   2a414:	2001      	movs	r0, #1
   2a416:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2a41a:	445d      	add	r5, fp
   2a41c:	eba6 060b 	sub.w	r6, r6, fp
   2a420:	eba2 020b 	sub.w	r2, r2, fp
   2a424:	f8c8 2008 	str.w	r2, [r8, #8]
   2a428:	2a00      	cmp	r2, #0
   2a42a:	f43f af6c 	beq.w	2a306 <__sfvwrite_r+0x62>
   2a42e:	2e00      	cmp	r6, #0
   2a430:	d1d1      	bne.n	2a3d6 <__sfvwrite_r+0x132>
   2a432:	f10a 0308 	add.w	r3, sl, #8
   2a436:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a43a:	469a      	mov	sl, r3
   2a43c:	f853 5c08 	ldr.w	r5, [r3, #-8]
   2a440:	3308      	adds	r3, #8
   2a442:	2e00      	cmp	r6, #0
   2a444:	d0f7      	beq.n	2a436 <__sfvwrite_r+0x192>
   2a446:	4632      	mov	r2, r6
   2a448:	210a      	movs	r1, #10
   2a44a:	4628      	mov	r0, r5
   2a44c:	f7fb ff88 	bl	26360 <memchr>
   2a450:	2800      	cmp	r0, #0
   2a452:	f000 808f 	beq.w	2a574 <__sfvwrite_r+0x2d0>
   2a456:	3001      	adds	r0, #1
   2a458:	1b43      	subs	r3, r0, r5
   2a45a:	461a      	mov	r2, r3
   2a45c:	9300      	str	r3, [sp, #0]
   2a45e:	e7bd      	b.n	2a3dc <__sfvwrite_r+0x138>
   2a460:	6820      	ldr	r0, [r4, #0]
   2a462:	6923      	ldr	r3, [r4, #16]
   2a464:	4298      	cmp	r0, r3
   2a466:	d814      	bhi.n	2a492 <__sfvwrite_r+0x1ee>
   2a468:	6963      	ldr	r3, [r4, #20]
   2a46a:	42b3      	cmp	r3, r6
   2a46c:	d811      	bhi.n	2a492 <__sfvwrite_r+0x1ee>
   2a46e:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   2a472:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2a474:	4652      	mov	r2, sl
   2a476:	69e1      	ldr	r1, [r4, #28]
   2a478:	45b4      	cmp	ip, r6
   2a47a:	4648      	mov	r0, r9
   2a47c:	bf28      	it	cs
   2a47e:	46b4      	movcs	ip, r6
   2a480:	fb9c fcf3 	sdiv	ip, ip, r3
   2a484:	fb03 f30c 	mul.w	r3, r3, ip
   2a488:	47b8      	blx	r7
   2a48a:	1e07      	subs	r7, r0, #0
   2a48c:	dd91      	ble.n	2a3b2 <__sfvwrite_r+0x10e>
   2a48e:	1bf6      	subs	r6, r6, r7
   2a490:	e76d      	b.n	2a36e <__sfvwrite_r+0xca>
   2a492:	45b3      	cmp	fp, r6
   2a494:	465f      	mov	r7, fp
   2a496:	4651      	mov	r1, sl
   2a498:	bf28      	it	cs
   2a49a:	4637      	movcs	r7, r6
   2a49c:	463a      	mov	r2, r7
   2a49e:	f000 fd6f 	bl	2af80 <memmove>
   2a4a2:	68a3      	ldr	r3, [r4, #8]
   2a4a4:	6822      	ldr	r2, [r4, #0]
   2a4a6:	1bdb      	subs	r3, r3, r7
   2a4a8:	443a      	add	r2, r7
   2a4aa:	60a3      	str	r3, [r4, #8]
   2a4ac:	6022      	str	r2, [r4, #0]
   2a4ae:	2b00      	cmp	r3, #0
   2a4b0:	d1ed      	bne.n	2a48e <__sfvwrite_r+0x1ea>
   2a4b2:	4621      	mov	r1, r4
   2a4b4:	4648      	mov	r0, r9
   2a4b6:	f7ff fc81 	bl	29dbc <_fflush_r>
   2a4ba:	2800      	cmp	r0, #0
   2a4bc:	d0e7      	beq.n	2a48e <__sfvwrite_r+0x1ea>
   2a4be:	e778      	b.n	2a3b2 <__sfvwrite_r+0x10e>
   2a4c0:	46b3      	mov	fp, r6
   2a4c2:	6820      	ldr	r0, [r4, #0]
   2a4c4:	4632      	mov	r2, r6
   2a4c6:	e744      	b.n	2a352 <__sfvwrite_r+0xae>
   2a4c8:	4621      	mov	r1, r4
   2a4ca:	4648      	mov	r0, r9
   2a4cc:	f7ff fc76 	bl	29dbc <_fflush_r>
   2a4d0:	2800      	cmp	r0, #0
   2a4d2:	d0a0      	beq.n	2a416 <__sfvwrite_r+0x172>
   2a4d4:	e76d      	b.n	2a3b2 <__sfvwrite_r+0x10e>
   2a4d6:	4629      	mov	r1, r5
   2a4d8:	4693      	mov	fp, r2
   2a4da:	9201      	str	r2, [sp, #4]
   2a4dc:	f000 fd50 	bl	2af80 <memmove>
   2a4e0:	68a1      	ldr	r1, [r4, #8]
   2a4e2:	6823      	ldr	r3, [r4, #0]
   2a4e4:	9a01      	ldr	r2, [sp, #4]
   2a4e6:	1a89      	subs	r1, r1, r2
   2a4e8:	441a      	add	r2, r3
   2a4ea:	60a1      	str	r1, [r4, #8]
   2a4ec:	6022      	str	r2, [r4, #0]
   2a4ee:	e78c      	b.n	2a40a <__sfvwrite_r+0x166>
   2a4f0:	6822      	ldr	r2, [r4, #0]
   2a4f2:	6921      	ldr	r1, [r4, #16]
   2a4f4:	6967      	ldr	r7, [r4, #20]
   2a4f6:	eba2 0b01 	sub.w	fp, r2, r1
   2a4fa:	eb17 0747 	adds.w	r7, r7, r7, lsl #1
   2a4fe:	f10b 0001 	add.w	r0, fp, #1
   2a502:	bf48      	it	mi
   2a504:	3701      	addmi	r7, #1
   2a506:	4430      	add	r0, r6
   2a508:	107f      	asrs	r7, r7, #1
   2a50a:	42b8      	cmp	r0, r7
   2a50c:	463a      	mov	r2, r7
   2a50e:	d901      	bls.n	2a514 <__sfvwrite_r+0x270>
   2a510:	4607      	mov	r7, r0
   2a512:	4602      	mov	r2, r0
   2a514:	055b      	lsls	r3, r3, #21
   2a516:	d51b      	bpl.n	2a550 <__sfvwrite_r+0x2ac>
   2a518:	4611      	mov	r1, r2
   2a51a:	4648      	mov	r0, r9
   2a51c:	f7fb fc52 	bl	25dc4 <_malloc_r>
   2a520:	b358      	cbz	r0, 2a57a <__sfvwrite_r+0x2d6>
   2a522:	465a      	mov	r2, fp
   2a524:	6921      	ldr	r1, [r4, #16]
   2a526:	9000      	str	r0, [sp, #0]
   2a528:	f7e2 fb10 	bl	cb4c <memcpy>
   2a52c:	89a2      	ldrh	r2, [r4, #12]
   2a52e:	9b00      	ldr	r3, [sp, #0]
   2a530:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2a534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2a538:	81a2      	strh	r2, [r4, #12]
   2a53a:	eba7 020b 	sub.w	r2, r7, fp
   2a53e:	eb03 000b 	add.w	r0, r3, fp
   2a542:	6123      	str	r3, [r4, #16]
   2a544:	46b3      	mov	fp, r6
   2a546:	60a2      	str	r2, [r4, #8]
   2a548:	4632      	mov	r2, r6
   2a54a:	6020      	str	r0, [r4, #0]
   2a54c:	6167      	str	r7, [r4, #20]
   2a54e:	e700      	b.n	2a352 <__sfvwrite_r+0xae>
   2a550:	4648      	mov	r0, r9
   2a552:	f7fb ffd5 	bl	26500 <_realloc_r>
   2a556:	4603      	mov	r3, r0
   2a558:	2800      	cmp	r0, #0
   2a55a:	d1ee      	bne.n	2a53a <__sfvwrite_r+0x296>
   2a55c:	6921      	ldr	r1, [r4, #16]
   2a55e:	4648      	mov	r0, r9
   2a560:	f7ff fd9a 	bl	2a098 <_free_r>
   2a564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a568:	220c      	movs	r2, #12
   2a56a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2a56e:	f8c9 2000 	str.w	r2, [r9]
   2a572:	e720      	b.n	2a3b6 <__sfvwrite_r+0x112>
   2a574:	1c72      	adds	r2, r6, #1
   2a576:	9200      	str	r2, [sp, #0]
   2a578:	e730      	b.n	2a3dc <__sfvwrite_r+0x138>
   2a57a:	220c      	movs	r2, #12
   2a57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a580:	f8c9 2000 	str.w	r2, [r9]
   2a584:	e717      	b.n	2a3b6 <__sfvwrite_r+0x112>
   2a586:	f04f 30ff 	mov.w	r0, #4294967295
   2a58a:	e6bd      	b.n	2a308 <__sfvwrite_r+0x64>
   2a58c:	7ffffc00 	.word	0x7ffffc00

0002a590 <_fwalk_reent>:
   2a590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a594:	2600      	movs	r6, #0
   2a596:	4681      	mov	r9, r0
   2a598:	4688      	mov	r8, r1
   2a59a:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
   2a59e:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   2a5a2:	3d01      	subs	r5, #1
   2a5a4:	d40f      	bmi.n	2a5c6 <_fwalk_reent+0x36>
   2a5a6:	89a3      	ldrh	r3, [r4, #12]
   2a5a8:	3d01      	subs	r5, #1
   2a5aa:	2b01      	cmp	r3, #1
   2a5ac:	d907      	bls.n	2a5be <_fwalk_reent+0x2e>
   2a5ae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2a5b2:	4621      	mov	r1, r4
   2a5b4:	4648      	mov	r0, r9
   2a5b6:	3301      	adds	r3, #1
   2a5b8:	d001      	beq.n	2a5be <_fwalk_reent+0x2e>
   2a5ba:	47c0      	blx	r8
   2a5bc:	4306      	orrs	r6, r0
   2a5be:	1c6b      	adds	r3, r5, #1
   2a5c0:	f104 0468 	add.w	r4, r4, #104	; 0x68
   2a5c4:	d1ef      	bne.n	2a5a6 <_fwalk_reent+0x16>
   2a5c6:	683f      	ldr	r7, [r7, #0]
   2a5c8:	2f00      	cmp	r7, #0
   2a5ca:	d1e8      	bne.n	2a59e <_fwalk_reent+0xe>
   2a5cc:	4630      	mov	r0, r6
   2a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a5d2:	bf00      	nop

0002a5d4 <rshift>:
   2a5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a5d8:	6906      	ldr	r6, [r0, #16]
   2a5da:	ebb6 1f61 	cmp.w	r6, r1, asr #5
   2a5de:	dd2d      	ble.n	2a63c <rshift+0x68>
   2a5e0:	f100 0414 	add.w	r4, r0, #20
   2a5e4:	ea4f 1c61 	mov.w	ip, r1, asr #5
   2a5e8:	f011 051f 	ands.w	r5, r1, #31
   2a5ec:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   2a5f0:	eb04 038c 	add.w	r3, r4, ip, lsl #2
   2a5f4:	d028      	beq.n	2a648 <rshift+0x74>
   2a5f6:	3304      	adds	r3, #4
   2a5f8:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
   2a5fc:	f1c5 0e20 	rsb	lr, r5, #32
   2a600:	429f      	cmp	r7, r3
   2a602:	fa22 f105 	lsr.w	r1, r2, r5
   2a606:	d935      	bls.n	2a674 <rshift+0xa0>
   2a608:	46a0      	mov	r8, r4
   2a60a:	681a      	ldr	r2, [r3, #0]
   2a60c:	fa02 f20e 	lsl.w	r2, r2, lr
   2a610:	430a      	orrs	r2, r1
   2a612:	f848 2b04 	str.w	r2, [r8], #4
   2a616:	f853 1b04 	ldr.w	r1, [r3], #4
   2a61a:	429f      	cmp	r7, r3
   2a61c:	fa21 f105 	lsr.w	r1, r1, r5
   2a620:	d8f3      	bhi.n	2a60a <rshift+0x36>
   2a622:	eba6 030c 	sub.w	r3, r6, ip
   2a626:	009b      	lsls	r3, r3, #2
   2a628:	3b05      	subs	r3, #5
   2a62a:	089b      	lsrs	r3, r3, #2
   2a62c:	3301      	adds	r3, #1
   2a62e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   2a632:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2a636:	b1a9      	cbz	r1, 2a664 <rshift+0x90>
   2a638:	3304      	adds	r3, #4
   2a63a:	e013      	b.n	2a664 <rshift+0x90>
   2a63c:	2300      	movs	r3, #0
   2a63e:	6103      	str	r3, [r0, #16]
   2a640:	2300      	movs	r3, #0
   2a642:	6143      	str	r3, [r0, #20]
   2a644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a648:	429f      	cmp	r7, r3
   2a64a:	d9f7      	bls.n	2a63c <rshift+0x68>
   2a64c:	f100 0210 	add.w	r2, r0, #16
   2a650:	f853 1b04 	ldr.w	r1, [r3], #4
   2a654:	429f      	cmp	r7, r3
   2a656:	f842 1f04 	str.w	r1, [r2, #4]!
   2a65a:	d8f9      	bhi.n	2a650 <rshift+0x7c>
   2a65c:	eba6 030c 	sub.w	r3, r6, ip
   2a660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2a664:	1b1a      	subs	r2, r3, r4
   2a666:	42a3      	cmp	r3, r4
   2a668:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2a66c:	6102      	str	r2, [r0, #16]
   2a66e:	d0e7      	beq.n	2a640 <rshift+0x6c>
   2a670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a674:	6141      	str	r1, [r0, #20]
   2a676:	2900      	cmp	r1, #0
   2a678:	d0e0      	beq.n	2a63c <rshift+0x68>
   2a67a:	4623      	mov	r3, r4
   2a67c:	e7dc      	b.n	2a638 <rshift+0x64>
   2a67e:	bf00      	nop

0002a680 <__gethex>:
   2a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a684:	4cc2      	ldr	r4, [pc, #776]	; (2a990 <__gethex+0x310>)
   2a686:	4689      	mov	r9, r1
   2a688:	6824      	ldr	r4, [r4, #0]
   2a68a:	ed2d 8b02 	vpush	{d8}
   2a68e:	b08b      	sub	sp, #44	; 0x2c
   2a690:	ee08 0a10 	vmov	s16, r0
   2a694:	4620      	mov	r0, r4
   2a696:	9202      	str	r2, [sp, #8]
   2a698:	9307      	str	r3, [sp, #28]
   2a69a:	9404      	str	r4, [sp, #16]
   2a69c:	f7fc fadc 	bl	26c58 <strlen>
   2a6a0:	f8d9 5000 	ldr.w	r5, [r9]
   2a6a4:	1823      	adds	r3, r4, r0
   2a6a6:	4602      	mov	r2, r0
   2a6a8:	78a9      	ldrb	r1, [r5, #2]
   2a6aa:	f813 bc01 	ldrb.w	fp, [r3, #-1]
   2a6ae:	2930      	cmp	r1, #48	; 0x30
   2a6b0:	f040 81ef 	bne.w	2aa92 <__gethex+0x412>
   2a6b4:	f06f 0001 	mvn.w	r0, #1
   2a6b8:	1ceb      	adds	r3, r5, #3
   2a6ba:	1b40      	subs	r0, r0, r5
   2a6bc:	eb00 0a03 	add.w	sl, r0, r3
   2a6c0:	461d      	mov	r5, r3
   2a6c2:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a6c6:	2930      	cmp	r1, #48	; 0x30
   2a6c8:	d0f8      	beq.n	2a6bc <__gethex+0x3c>
   2a6ca:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2a994 <__gethex+0x314>
   2a6ce:	f818 3001 	ldrb.w	r3, [r8, r1]
   2a6d2:	2b00      	cmp	r3, #0
   2a6d4:	f000 80da 	beq.w	2a88c <__gethex+0x20c>
   2a6d8:	782b      	ldrb	r3, [r5, #0]
   2a6da:	2700      	movs	r7, #0
   2a6dc:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a6e0:	463c      	mov	r4, r7
   2a6e2:	462e      	mov	r6, r5
   2a6e4:	b12b      	cbz	r3, 2a6f2 <__gethex+0x72>
   2a6e6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2a6ea:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a6ee:	2b00      	cmp	r3, #0
   2a6f0:	d1f9      	bne.n	2a6e6 <__gethex+0x66>
   2a6f2:	9904      	ldr	r1, [sp, #16]
   2a6f4:	4630      	mov	r0, r6
   2a6f6:	9203      	str	r2, [sp, #12]
   2a6f8:	f7fc fadc 	bl	26cb4 <strncmp>
   2a6fc:	9a03      	ldr	r2, [sp, #12]
   2a6fe:	9001      	str	r0, [sp, #4]
   2a700:	2800      	cmp	r0, #0
   2a702:	f000 8091 	beq.w	2a828 <__gethex+0x1a8>
   2a706:	2c00      	cmp	r4, #0
   2a708:	f040 8091 	bne.w	2a82e <__gethex+0x1ae>
   2a70c:	7833      	ldrb	r3, [r6, #0]
   2a70e:	9401      	str	r4, [sp, #4]
   2a710:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a714:	4634      	mov	r4, r6
   2a716:	2b50      	cmp	r3, #80	; 0x50
   2a718:	f000 8093 	beq.w	2a842 <__gethex+0x1c2>
   2a71c:	f8c9 6000 	str.w	r6, [r9]
   2a720:	2f00      	cmp	r7, #0
   2a722:	f040 80a2 	bne.w	2a86a <__gethex+0x1ea>
   2a726:	1b63      	subs	r3, r4, r5
   2a728:	4639      	mov	r1, r7
   2a72a:	3b01      	subs	r3, #1
   2a72c:	2b07      	cmp	r3, #7
   2a72e:	dd03      	ble.n	2a738 <__gethex+0xb8>
   2a730:	105b      	asrs	r3, r3, #1
   2a732:	3101      	adds	r1, #1
   2a734:	2b07      	cmp	r3, #7
   2a736:	dcfb      	bgt.n	2a730 <__gethex+0xb0>
   2a738:	ee18 0a10 	vmov	r0, s16
   2a73c:	9205      	str	r2, [sp, #20]
   2a73e:	f000 fc89 	bl	2b054 <_Balloc>
   2a742:	42a5      	cmp	r5, r4
   2a744:	f100 0614 	add.w	r6, r0, #20
   2a748:	9003      	str	r0, [sp, #12]
   2a74a:	9606      	str	r6, [sp, #24]
   2a74c:	f080 81ca 	bcs.w	2aae4 <__gethex+0x464>
   2a750:	9a05      	ldr	r2, [sp, #20]
   2a752:	2700      	movs	r7, #0
   2a754:	f1c2 0301 	rsb	r3, r2, #1
   2a758:	46b9      	mov	r9, r7
   2a75a:	9305      	str	r3, [sp, #20]
   2a75c:	e011      	b.n	2a782 <__gethex+0x102>
   2a75e:	2f20      	cmp	r7, #32
   2a760:	f000 808e 	beq.w	2a880 <__gethex+0x200>
   2a764:	4639      	mov	r1, r7
   2a766:	3704      	adds	r7, #4
   2a768:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2a76c:	4654      	mov	r4, sl
   2a76e:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a772:	42ac      	cmp	r4, r5
   2a774:	f003 030f 	and.w	r3, r3, #15
   2a778:	fa03 f301 	lsl.w	r3, r3, r1
   2a77c:	ea49 0903 	orr.w	r9, r9, r3
   2a780:	d916      	bls.n	2a7b0 <__gethex+0x130>
   2a782:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2a786:	f104 3aff 	add.w	sl, r4, #4294967295
   2a78a:	455b      	cmp	r3, fp
   2a78c:	d1e7      	bne.n	2a75e <__gethex+0xde>
   2a78e:	9b05      	ldr	r3, [sp, #20]
   2a790:	4453      	add	r3, sl
   2a792:	42ab      	cmp	r3, r5
   2a794:	d3e3      	bcc.n	2a75e <__gethex+0xde>
   2a796:	4618      	mov	r0, r3
   2a798:	9904      	ldr	r1, [sp, #16]
   2a79a:	9209      	str	r2, [sp, #36]	; 0x24
   2a79c:	9308      	str	r3, [sp, #32]
   2a79e:	f7fc fa89 	bl	26cb4 <strncmp>
   2a7a2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2a7a6:	2800      	cmp	r0, #0
   2a7a8:	d1d9      	bne.n	2a75e <__gethex+0xde>
   2a7aa:	461c      	mov	r4, r3
   2a7ac:	42ac      	cmp	r4, r5
   2a7ae:	d8e8      	bhi.n	2a782 <__gethex+0x102>
   2a7b0:	9b06      	ldr	r3, [sp, #24]
   2a7b2:	4648      	mov	r0, r9
   2a7b4:	f846 9b04 	str.w	r9, [r6], #4
   2a7b8:	1af6      	subs	r6, r6, r3
   2a7ba:	9b03      	ldr	r3, [sp, #12]
   2a7bc:	10b6      	asrs	r6, r6, #2
   2a7be:	611e      	str	r6, [r3, #16]
   2a7c0:	0176      	lsls	r6, r6, #5
   2a7c2:	f000 fd09 	bl	2b1d8 <__hi0bits>
   2a7c6:	9b02      	ldr	r3, [sp, #8]
   2a7c8:	1a30      	subs	r0, r6, r0
   2a7ca:	681c      	ldr	r4, [r3, #0]
   2a7cc:	42a0      	cmp	r0, r4
   2a7ce:	f300 80be 	bgt.w	2a94e <__gethex+0x2ce>
   2a7d2:	f2c0 813d 	blt.w	2aa50 <__gethex+0x3d0>
   2a7d6:	2700      	movs	r7, #0
   2a7d8:	9b02      	ldr	r3, [sp, #8]
   2a7da:	9a01      	ldr	r2, [sp, #4]
   2a7dc:	689b      	ldr	r3, [r3, #8]
   2a7de:	4293      	cmp	r3, r2
   2a7e0:	f2c0 8176 	blt.w	2aad0 <__gethex+0x450>
   2a7e4:	9802      	ldr	r0, [sp, #8]
   2a7e6:	9a01      	ldr	r2, [sp, #4]
   2a7e8:	6843      	ldr	r3, [r0, #4]
   2a7ea:	4293      	cmp	r3, r2
   2a7ec:	dd6d      	ble.n	2a8ca <__gethex+0x24a>
   2a7ee:	1a9d      	subs	r5, r3, r2
   2a7f0:	42ac      	cmp	r4, r5
   2a7f2:	f300 80d1 	bgt.w	2a998 <__gethex+0x318>
   2a7f6:	68c2      	ldr	r2, [r0, #12]
   2a7f8:	2a02      	cmp	r2, #2
   2a7fa:	f000 818c 	beq.w	2ab16 <__gethex+0x496>
   2a7fe:	2a03      	cmp	r2, #3
   2a800:	f000 81a7 	beq.w	2ab52 <__gethex+0x4d2>
   2a804:	2a01      	cmp	r2, #1
   2a806:	f000 8195 	beq.w	2ab34 <__gethex+0x4b4>
   2a80a:	2550      	movs	r5, #80	; 0x50
   2a80c:	ee18 0a10 	vmov	r0, s16
   2a810:	9903      	ldr	r1, [sp, #12]
   2a812:	f000 fc45 	bl	2b0a0 <_Bfree>
   2a816:	2300      	movs	r3, #0
   2a818:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a81a:	4628      	mov	r0, r5
   2a81c:	6013      	str	r3, [r2, #0]
   2a81e:	b00b      	add	sp, #44	; 0x2c
   2a820:	ecbd 8b02 	vpop	{d8}
   2a824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a828:	2c00      	cmp	r4, #0
   2a82a:	f000 8120 	beq.w	2aa6e <__gethex+0x3ee>
   2a82e:	7833      	ldrb	r3, [r6, #0]
   2a830:	1ba4      	subs	r4, r4, r6
   2a832:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a836:	00a1      	lsls	r1, r4, #2
   2a838:	4634      	mov	r4, r6
   2a83a:	2b50      	cmp	r3, #80	; 0x50
   2a83c:	9101      	str	r1, [sp, #4]
   2a83e:	f47f af6d 	bne.w	2a71c <__gethex+0x9c>
   2a842:	7863      	ldrb	r3, [r4, #1]
   2a844:	2b2b      	cmp	r3, #43	; 0x2b
   2a846:	f000 8100 	beq.w	2aa4a <__gethex+0x3ca>
   2a84a:	2b2d      	cmp	r3, #45	; 0x2d
   2a84c:	d05a      	beq.n	2a904 <__gethex+0x284>
   2a84e:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a852:	1c66      	adds	r6, r4, #1
   2a854:	f04f 0c00 	mov.w	ip, #0
   2a858:	1e59      	subs	r1, r3, #1
   2a85a:	2918      	cmp	r1, #24
   2a85c:	d95b      	bls.n	2a916 <__gethex+0x296>
   2a85e:	4626      	mov	r6, r4
   2a860:	f8c9 6000 	str.w	r6, [r9]
   2a864:	2f00      	cmp	r7, #0
   2a866:	f43f af5e 	beq.w	2a726 <__gethex+0xa6>
   2a86a:	f1ba 0f00 	cmp.w	sl, #0
   2a86e:	bf14      	ite	ne
   2a870:	2500      	movne	r5, #0
   2a872:	2506      	moveq	r5, #6
   2a874:	4628      	mov	r0, r5
   2a876:	b00b      	add	sp, #44	; 0x2c
   2a878:	ecbd 8b02 	vpop	{d8}
   2a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a880:	2100      	movs	r1, #0
   2a882:	f846 9b04 	str.w	r9, [r6], #4
   2a886:	2704      	movs	r7, #4
   2a888:	4689      	mov	r9, r1
   2a88a:	e76d      	b.n	2a768 <__gethex+0xe8>
   2a88c:	9904      	ldr	r1, [sp, #16]
   2a88e:	4628      	mov	r0, r5
   2a890:	9201      	str	r2, [sp, #4]
   2a892:	f7fc fa0f 	bl	26cb4 <strncmp>
   2a896:	9a01      	ldr	r2, [sp, #4]
   2a898:	2800      	cmp	r0, #0
   2a89a:	f040 809b 	bne.w	2a9d4 <__gethex+0x354>
   2a89e:	5ca9      	ldrb	r1, [r5, r2]
   2a8a0:	18ac      	adds	r4, r5, r2
   2a8a2:	f818 3001 	ldrb.w	r3, [r8, r1]
   2a8a6:	2b00      	cmp	r3, #0
   2a8a8:	f000 8096 	beq.w	2a9d8 <__gethex+0x358>
   2a8ac:	2930      	cmp	r1, #48	; 0x30
   2a8ae:	4625      	mov	r5, r4
   2a8b0:	d105      	bne.n	2a8be <__gethex+0x23e>
   2a8b2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   2a8b6:	2b30      	cmp	r3, #48	; 0x30
   2a8b8:	d0fb      	beq.n	2a8b2 <__gethex+0x232>
   2a8ba:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a8be:	fab3 f783 	clz	r7, r3
   2a8c2:	f04f 0a01 	mov.w	sl, #1
   2a8c6:	097f      	lsrs	r7, r7, #5
   2a8c8:	e70b      	b.n	2a6e2 <__gethex+0x62>
   2a8ca:	2501      	movs	r5, #1
   2a8cc:	b167      	cbz	r7, 2a8e8 <__gethex+0x268>
   2a8ce:	9b02      	ldr	r3, [sp, #8]
   2a8d0:	68db      	ldr	r3, [r3, #12]
   2a8d2:	2b02      	cmp	r3, #2
   2a8d4:	f000 8088 	beq.w	2a9e8 <__gethex+0x368>
   2a8d8:	2b03      	cmp	r3, #3
   2a8da:	f000 8089 	beq.w	2a9f0 <__gethex+0x370>
   2a8de:	2b01      	cmp	r3, #1
   2a8e0:	f000 80aa 	beq.w	2aa38 <__gethex+0x3b8>
   2a8e4:	f045 0510 	orr.w	r5, r5, #16
   2a8e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a8ea:	4628      	mov	r0, r5
   2a8ec:	461a      	mov	r2, r3
   2a8ee:	9b03      	ldr	r3, [sp, #12]
   2a8f0:	6013      	str	r3, [r2, #0]
   2a8f2:	9b07      	ldr	r3, [sp, #28]
   2a8f4:	461a      	mov	r2, r3
   2a8f6:	9b01      	ldr	r3, [sp, #4]
   2a8f8:	6013      	str	r3, [r2, #0]
   2a8fa:	b00b      	add	sp, #44	; 0x2c
   2a8fc:	ecbd 8b02 	vpop	{d8}
   2a900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a904:	f04f 0c01 	mov.w	ip, #1
   2a908:	78a3      	ldrb	r3, [r4, #2]
   2a90a:	1ca6      	adds	r6, r4, #2
   2a90c:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a910:	1e59      	subs	r1, r3, #1
   2a912:	2918      	cmp	r1, #24
   2a914:	d8a3      	bhi.n	2a85e <__gethex+0x1de>
   2a916:	7871      	ldrb	r1, [r6, #1]
   2a918:	3b10      	subs	r3, #16
   2a91a:	3601      	adds	r6, #1
   2a91c:	f818 1001 	ldrb.w	r1, [r8, r1]
   2a920:	1e48      	subs	r0, r1, #1
   2a922:	2818      	cmp	r0, #24
   2a924:	d80b      	bhi.n	2a93e <__gethex+0x2be>
   2a926:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   2a92a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2a92e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2a932:	f818 1000 	ldrb.w	r1, [r8, r0]
   2a936:	1e48      	subs	r0, r1, #1
   2a938:	3b10      	subs	r3, #16
   2a93a:	2818      	cmp	r0, #24
   2a93c:	d9f3      	bls.n	2a926 <__gethex+0x2a6>
   2a93e:	f1bc 0f00 	cmp.w	ip, #0
   2a942:	d000      	beq.n	2a946 <__gethex+0x2c6>
   2a944:	425b      	negs	r3, r3
   2a946:	9901      	ldr	r1, [sp, #4]
   2a948:	4419      	add	r1, r3
   2a94a:	9101      	str	r1, [sp, #4]
   2a94c:	e6e6      	b.n	2a71c <__gethex+0x9c>
   2a94e:	1b06      	subs	r6, r0, r4
   2a950:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2a954:	4631      	mov	r1, r6
   2a956:	4640      	mov	r0, r8
   2a958:	f000 fff6 	bl	2b948 <__any_on>
   2a95c:	4607      	mov	r7, r0
   2a95e:	b178      	cbz	r0, 2a980 <__gethex+0x300>
   2a960:	1e72      	subs	r2, r6, #1
   2a962:	2701      	movs	r7, #1
   2a964:	9d06      	ldr	r5, [sp, #24]
   2a966:	1151      	asrs	r1, r2, #5
   2a968:	f002 031f 	and.w	r3, r2, #31
   2a96c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
   2a970:	fa07 f303 	lsl.w	r3, r7, r3
   2a974:	420b      	tst	r3, r1
   2a976:	d003      	beq.n	2a980 <__gethex+0x300>
   2a978:	42ba      	cmp	r2, r7
   2a97a:	f300 80bf 	bgt.w	2aafc <__gethex+0x47c>
   2a97e:	2702      	movs	r7, #2
   2a980:	9b01      	ldr	r3, [sp, #4]
   2a982:	4631      	mov	r1, r6
   2a984:	9803      	ldr	r0, [sp, #12]
   2a986:	4433      	add	r3, r6
   2a988:	9301      	str	r3, [sp, #4]
   2a98a:	f7ff fe23 	bl	2a5d4 <rshift>
   2a98e:	e723      	b.n	2a7d8 <__gethex+0x158>
   2a990:	0002fca0 	.word	0x0002fca0
   2a994:	0002fb9c 	.word	0x0002fb9c
   2a998:	1e6e      	subs	r6, r5, #1
   2a99a:	2f00      	cmp	r7, #0
   2a99c:	f040 80a6 	bne.w	2aaec <__gethex+0x46c>
   2a9a0:	2e00      	cmp	r6, #0
   2a9a2:	f040 80a5 	bne.w	2aaf0 <__gethex+0x470>
   2a9a6:	2301      	movs	r3, #1
   2a9a8:	9906      	ldr	r1, [sp, #24]
   2a9aa:	1172      	asrs	r2, r6, #5
   2a9ac:	f006 061f 	and.w	r6, r6, #31
   2a9b0:	9803      	ldr	r0, [sp, #12]
   2a9b2:	1b64      	subs	r4, r4, r5
   2a9b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   2a9b8:	fa03 f606 	lsl.w	r6, r3, r6
   2a9bc:	4629      	mov	r1, r5
   2a9be:	2502      	movs	r5, #2
   2a9c0:	4216      	tst	r6, r2
   2a9c2:	bf18      	it	ne
   2a9c4:	f047 0702 	orrne.w	r7, r7, #2
   2a9c8:	f7ff fe04 	bl	2a5d4 <rshift>
   2a9cc:	9b02      	ldr	r3, [sp, #8]
   2a9ce:	685b      	ldr	r3, [r3, #4]
   2a9d0:	9301      	str	r3, [sp, #4]
   2a9d2:	e77b      	b.n	2a8cc <__gethex+0x24c>
   2a9d4:	7829      	ldrb	r1, [r5, #0]
   2a9d6:	462c      	mov	r4, r5
   2a9d8:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2a9dc:	2950      	cmp	r1, #80	; 0x50
   2a9de:	f000 8096 	beq.w	2ab0e <__gethex+0x48e>
   2a9e2:	f8c9 4000 	str.w	r4, [r9]
   2a9e6:	e740      	b.n	2a86a <__gethex+0x1ea>
   2a9e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2a9ea:	f1c3 0301 	rsb	r3, r3, #1
   2a9ee:	9317      	str	r3, [sp, #92]	; 0x5c
   2a9f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2a9f2:	2b00      	cmp	r3, #0
   2a9f4:	f43f af76 	beq.w	2a8e4 <__gethex+0x264>
   2a9f8:	9b03      	ldr	r3, [sp, #12]
   2a9fa:	2700      	movs	r7, #0
   2a9fc:	f8dd c018 	ldr.w	ip, [sp, #24]
   2aa00:	691e      	ldr	r6, [r3, #16]
   2aa02:	4663      	mov	r3, ip
   2aa04:	eb0c 0086 	add.w	r0, ip, r6, lsl #2
   2aa08:	ea4f 0986 	mov.w	r9, r6, lsl #2
   2aa0c:	e003      	b.n	2aa16 <__gethex+0x396>
   2aa0e:	4298      	cmp	r0, r3
   2aa10:	f843 7c04 	str.w	r7, [r3, #-4]
   2aa14:	d941      	bls.n	2aa9a <__gethex+0x41a>
   2aa16:	4619      	mov	r1, r3
   2aa18:	f853 2b04 	ldr.w	r2, [r3], #4
   2aa1c:	f1b2 3fff 	cmp.w	r2, #4294967295
   2aa20:	d0f5      	beq.n	2aa0e <__gethex+0x38e>
   2aa22:	3201      	adds	r2, #1
   2aa24:	2d02      	cmp	r5, #2
   2aa26:	600a      	str	r2, [r1, #0]
   2aa28:	f000 8098 	beq.w	2ab5c <__gethex+0x4dc>
   2aa2c:	f014 041f 	ands.w	r4, r4, #31
   2aa30:	f040 80b7 	bne.w	2aba2 <__gethex+0x522>
   2aa34:	2521      	movs	r5, #33	; 0x21
   2aa36:	e757      	b.n	2a8e8 <__gethex+0x268>
   2aa38:	07ba      	lsls	r2, r7, #30
   2aa3a:	f57f af53 	bpl.w	2a8e4 <__gethex+0x264>
   2aa3e:	9b06      	ldr	r3, [sp, #24]
   2aa40:	681b      	ldr	r3, [r3, #0]
   2aa42:	431f      	orrs	r7, r3
   2aa44:	07fb      	lsls	r3, r7, #31
   2aa46:	d4d7      	bmi.n	2a9f8 <__gethex+0x378>
   2aa48:	e74c      	b.n	2a8e4 <__gethex+0x264>
   2aa4a:	f04f 0c00 	mov.w	ip, #0
   2aa4e:	e75b      	b.n	2a908 <__gethex+0x288>
   2aa50:	1a22      	subs	r2, r4, r0
   2aa52:	9b01      	ldr	r3, [sp, #4]
   2aa54:	9903      	ldr	r1, [sp, #12]
   2aa56:	ee18 0a10 	vmov	r0, s16
   2aa5a:	1a9b      	subs	r3, r3, r2
   2aa5c:	2700      	movs	r7, #0
   2aa5e:	9301      	str	r3, [sp, #4]
   2aa60:	f000 fd08 	bl	2b474 <__lshift>
   2aa64:	4603      	mov	r3, r0
   2aa66:	9003      	str	r0, [sp, #12]
   2aa68:	3314      	adds	r3, #20
   2aa6a:	9306      	str	r3, [sp, #24]
   2aa6c:	e6b4      	b.n	2a7d8 <__gethex+0x158>
   2aa6e:	5cb3      	ldrb	r3, [r6, r2]
   2aa70:	18b0      	adds	r0, r6, r2
   2aa72:	f818 1003 	ldrb.w	r1, [r8, r3]
   2aa76:	4606      	mov	r6, r0
   2aa78:	2900      	cmp	r1, #0
   2aa7a:	f43f ae49 	beq.w	2a710 <__gethex+0x90>
   2aa7e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2aa82:	f818 1003 	ldrb.w	r1, [r8, r3]
   2aa86:	2900      	cmp	r1, #0
   2aa88:	d1f9      	bne.n	2aa7e <__gethex+0x3fe>
   2aa8a:	1b80      	subs	r0, r0, r6
   2aa8c:	0081      	lsls	r1, r0, #2
   2aa8e:	9101      	str	r1, [sp, #4]
   2aa90:	e63e      	b.n	2a710 <__gethex+0x90>
   2aa92:	3502      	adds	r5, #2
   2aa94:	f04f 0a00 	mov.w	sl, #0
   2aa98:	e617      	b.n	2a6ca <__gethex+0x4a>
   2aa9a:	9b03      	ldr	r3, [sp, #12]
   2aa9c:	689b      	ldr	r3, [r3, #8]
   2aa9e:	429e      	cmp	r6, r3
   2aaa0:	da63      	bge.n	2ab6a <__gethex+0x4ea>
   2aaa2:	4633      	mov	r3, r6
   2aaa4:	9803      	ldr	r0, [sp, #12]
   2aaa6:	1c5a      	adds	r2, r3, #1
   2aaa8:	2101      	movs	r1, #1
   2aaaa:	2d02      	cmp	r5, #2
   2aaac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2aab0:	6102      	str	r2, [r0, #16]
   2aab2:	6159      	str	r1, [r3, #20]
   2aab4:	d052      	beq.n	2ab5c <__gethex+0x4dc>
   2aab6:	4296      	cmp	r6, r2
   2aab8:	dab8      	bge.n	2aa2c <__gethex+0x3ac>
   2aaba:	9c01      	ldr	r4, [sp, #4]
   2aabc:	2101      	movs	r1, #1
   2aabe:	9803      	ldr	r0, [sp, #12]
   2aac0:	440c      	add	r4, r1
   2aac2:	9401      	str	r4, [sp, #4]
   2aac4:	f7ff fd86 	bl	2a5d4 <rshift>
   2aac8:	9b02      	ldr	r3, [sp, #8]
   2aaca:	689b      	ldr	r3, [r3, #8]
   2aacc:	42a3      	cmp	r3, r4
   2aace:	dab1      	bge.n	2aa34 <__gethex+0x3b4>
   2aad0:	9903      	ldr	r1, [sp, #12]
   2aad2:	ee18 0a10 	vmov	r0, s16
   2aad6:	f000 fae3 	bl	2b0a0 <_Bfree>
   2aada:	2300      	movs	r3, #0
   2aadc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2aade:	25a3      	movs	r5, #163	; 0xa3
   2aae0:	6013      	str	r3, [r2, #0]
   2aae2:	e6c7      	b.n	2a874 <__gethex+0x1f4>
   2aae4:	9e06      	ldr	r6, [sp, #24]
   2aae6:	f04f 0900 	mov.w	r9, #0
   2aaea:	e661      	b.n	2a7b0 <__gethex+0x130>
   2aaec:	2701      	movs	r7, #1
   2aaee:	e75a      	b.n	2a9a6 <__gethex+0x326>
   2aaf0:	4631      	mov	r1, r6
   2aaf2:	9803      	ldr	r0, [sp, #12]
   2aaf4:	f000 ff28 	bl	2b948 <__any_on>
   2aaf8:	4607      	mov	r7, r0
   2aafa:	e754      	b.n	2a9a6 <__gethex+0x326>
   2aafc:	1eb1      	subs	r1, r6, #2
   2aafe:	4640      	mov	r0, r8
   2ab00:	f000 ff22 	bl	2b948 <__any_on>
   2ab04:	2800      	cmp	r0, #0
   2ab06:	f43f af3a 	beq.w	2a97e <__gethex+0x2fe>
   2ab0a:	2703      	movs	r7, #3
   2ab0c:	e738      	b.n	2a980 <__gethex+0x300>
   2ab0e:	2300      	movs	r3, #0
   2ab10:	2701      	movs	r7, #1
   2ab12:	9301      	str	r3, [sp, #4]
   2ab14:	e695      	b.n	2a842 <__gethex+0x1c2>
   2ab16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2ab18:	2a00      	cmp	r2, #0
   2ab1a:	f47f ae76 	bne.w	2a80a <__gethex+0x18a>
   2ab1e:	9907      	ldr	r1, [sp, #28]
   2ab20:	2201      	movs	r2, #1
   2ab22:	2562      	movs	r5, #98	; 0x62
   2ab24:	600b      	str	r3, [r1, #0]
   2ab26:	9b03      	ldr	r3, [sp, #12]
   2ab28:	9906      	ldr	r1, [sp, #24]
   2ab2a:	611a      	str	r2, [r3, #16]
   2ab2c:	600a      	str	r2, [r1, #0]
   2ab2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2ab30:	6013      	str	r3, [r2, #0]
   2ab32:	e69f      	b.n	2a874 <__gethex+0x1f4>
   2ab34:	42ac      	cmp	r4, r5
   2ab36:	f47f ae68 	bne.w	2a80a <__gethex+0x18a>
   2ab3a:	2c01      	cmp	r4, #1
   2ab3c:	d0ef      	beq.n	2ab1e <__gethex+0x49e>
   2ab3e:	1e61      	subs	r1, r4, #1
   2ab40:	9803      	ldr	r0, [sp, #12]
   2ab42:	f000 ff01 	bl	2b948 <__any_on>
   2ab46:	2800      	cmp	r0, #0
   2ab48:	f43f ae5f 	beq.w	2a80a <__gethex+0x18a>
   2ab4c:	9b02      	ldr	r3, [sp, #8]
   2ab4e:	685b      	ldr	r3, [r3, #4]
   2ab50:	e7e5      	b.n	2ab1e <__gethex+0x49e>
   2ab52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2ab54:	2a00      	cmp	r2, #0
   2ab56:	f43f ae58 	beq.w	2a80a <__gethex+0x18a>
   2ab5a:	e7e0      	b.n	2ab1e <__gethex+0x49e>
   2ab5c:	9b02      	ldr	r3, [sp, #8]
   2ab5e:	681b      	ldr	r3, [r3, #0]
   2ab60:	3b01      	subs	r3, #1
   2ab62:	42a3      	cmp	r3, r4
   2ab64:	d029      	beq.n	2abba <__gethex+0x53a>
   2ab66:	2522      	movs	r5, #34	; 0x22
   2ab68:	e6be      	b.n	2a8e8 <__gethex+0x268>
   2ab6a:	9f03      	ldr	r7, [sp, #12]
   2ab6c:	ee18 0a10 	vmov	r0, s16
   2ab70:	6879      	ldr	r1, [r7, #4]
   2ab72:	3101      	adds	r1, #1
   2ab74:	f000 fa6e 	bl	2b054 <_Balloc>
   2ab78:	693b      	ldr	r3, [r7, #16]
   2ab7a:	4680      	mov	r8, r0
   2ab7c:	f107 010c 	add.w	r1, r7, #12
   2ab80:	3302      	adds	r3, #2
   2ab82:	300c      	adds	r0, #12
   2ab84:	009a      	lsls	r2, r3, #2
   2ab86:	f7e1 ffe1 	bl	cb4c <memcpy>
   2ab8a:	4639      	mov	r1, r7
   2ab8c:	ee18 0a10 	vmov	r0, s16
   2ab90:	f8cd 800c 	str.w	r8, [sp, #12]
   2ab94:	f000 fa84 	bl	2b0a0 <_Bfree>
   2ab98:	f108 0c14 	add.w	ip, r8, #20
   2ab9c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2aba0:	e780      	b.n	2aaa4 <__gethex+0x424>
   2aba2:	eb0c 0709 	add.w	r7, ip, r9
   2aba6:	f1c4 0420 	rsb	r4, r4, #32
   2abaa:	f857 0c04 	ldr.w	r0, [r7, #-4]
   2abae:	f000 fb13 	bl	2b1d8 <__hi0bits>
   2abb2:	42a0      	cmp	r0, r4
   2abb4:	f6bf af3e 	bge.w	2aa34 <__gethex+0x3b4>
   2abb8:	e77f      	b.n	2aaba <__gethex+0x43a>
   2abba:	1162      	asrs	r2, r4, #5
   2abbc:	2301      	movs	r3, #1
   2abbe:	f004 041f 	and.w	r4, r4, #31
   2abc2:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   2abc6:	40a3      	lsls	r3, r4
   2abc8:	4213      	tst	r3, r2
   2abca:	bf0c      	ite	eq
   2abcc:	2522      	moveq	r5, #34	; 0x22
   2abce:	2521      	movne	r5, #33	; 0x21
   2abd0:	e68a      	b.n	2a8e8 <__gethex+0x268>
   2abd2:	bf00      	nop

0002abd4 <__match>:
   2abd4:	b470      	push	{r4, r5, r6}
   2abd6:	4606      	mov	r6, r0
   2abd8:	6804      	ldr	r4, [r0, #0]
   2abda:	e008      	b.n	2abee <__match+0x1a>
   2abdc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2abe0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   2abe4:	2d19      	cmp	r5, #25
   2abe6:	bf98      	it	ls
   2abe8:	3320      	addls	r3, #32
   2abea:	4293      	cmp	r3, r2
   2abec:	d108      	bne.n	2ac00 <__match+0x2c>
   2abee:	f811 2b01 	ldrb.w	r2, [r1], #1
   2abf2:	2a00      	cmp	r2, #0
   2abf4:	d1f2      	bne.n	2abdc <__match+0x8>
   2abf6:	3401      	adds	r4, #1
   2abf8:	2001      	movs	r0, #1
   2abfa:	6034      	str	r4, [r6, #0]
   2abfc:	bc70      	pop	{r4, r5, r6}
   2abfe:	4770      	bx	lr
   2ac00:	2000      	movs	r0, #0
   2ac02:	bc70      	pop	{r4, r5, r6}
   2ac04:	4770      	bx	lr
   2ac06:	bf00      	nop

0002ac08 <__hexnan>:
   2ac08:	6809      	ldr	r1, [r1, #0]
   2ac0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac0e:	114b      	asrs	r3, r1, #5
   2ac10:	b085      	sub	sp, #20
   2ac12:	f011 011f 	ands.w	r1, r1, #31
   2ac16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2ac1a:	9002      	str	r0, [sp, #8]
   2ac1c:	9103      	str	r1, [sp, #12]
   2ac1e:	f040 809c 	bne.w	2ad5a <__hexnan+0x152>
   2ac22:	f1a3 0c04 	sub.w	ip, r3, #4
   2ac26:	9301      	str	r3, [sp, #4]
   2ac28:	9902      	ldr	r1, [sp, #8]
   2ac2a:	2300      	movs	r3, #0
   2ac2c:	9801      	ldr	r0, [sp, #4]
   2ac2e:	6809      	ldr	r1, [r1, #0]
   2ac30:	f840 3c04 	str.w	r3, [r0, #-4]
   2ac34:	1c4f      	adds	r7, r1, #1
   2ac36:	7849      	ldrb	r1, [r1, #1]
   2ac38:	2900      	cmp	r1, #0
   2ac3a:	f000 80a4 	beq.w	2ad86 <__hexnan+0x17e>
   2ac3e:	46e0      	mov	r8, ip
   2ac40:	4664      	mov	r4, ip
   2ac42:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2ada4 <__hexnan+0x19c>
   2ac46:	469a      	mov	sl, r3
   2ac48:	469e      	mov	lr, r3
   2ac4a:	e00e      	b.n	2ac6a <__hexnan+0x62>
   2ac4c:	2920      	cmp	r1, #32
   2ac4e:	f200 8098 	bhi.w	2ad82 <__hexnan+0x17a>
   2ac52:	45f2      	cmp	sl, lr
   2ac54:	da06      	bge.n	2ac64 <__hexnan+0x5c>
   2ac56:	4544      	cmp	r4, r8
   2ac58:	d201      	bcs.n	2ac5e <__hexnan+0x56>
   2ac5a:	2b07      	cmp	r3, #7
   2ac5c:	dd6a      	ble.n	2ad34 <__hexnan+0x12c>
   2ac5e:	42a2      	cmp	r2, r4
   2ac60:	d360      	bcc.n	2ad24 <__hexnan+0x11c>
   2ac62:	2308      	movs	r3, #8
   2ac64:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   2ac68:	b191      	cbz	r1, 2ac90 <__hexnan+0x88>
   2ac6a:	f819 0001 	ldrb.w	r0, [r9, r1]
   2ac6e:	2800      	cmp	r0, #0
   2ac70:	d0ec      	beq.n	2ac4c <__hexnan+0x44>
   2ac72:	3301      	adds	r3, #1
   2ac74:	f10e 0e01 	add.w	lr, lr, #1
   2ac78:	2b08      	cmp	r3, #8
   2ac7a:	dc4b      	bgt.n	2ad14 <__hexnan+0x10c>
   2ac7c:	6821      	ldr	r1, [r4, #0]
   2ac7e:	0109      	lsls	r1, r1, #4
   2ac80:	f000 000f 	and.w	r0, r0, #15
   2ac84:	4308      	orrs	r0, r1
   2ac86:	6020      	str	r0, [r4, #0]
   2ac88:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   2ac8c:	2900      	cmp	r1, #0
   2ac8e:	d1ec      	bne.n	2ac6a <__hexnan+0x62>
   2ac90:	f1be 0f00 	cmp.w	lr, #0
   2ac94:	d077      	beq.n	2ad86 <__hexnan+0x17e>
   2ac96:	45a0      	cmp	r8, r4
   2ac98:	d913      	bls.n	2acc2 <__hexnan+0xba>
   2ac9a:	2b07      	cmp	r3, #7
   2ac9c:	dc11      	bgt.n	2acc2 <__hexnan+0xba>
   2ac9e:	f1c3 0308 	rsb	r3, r3, #8
   2aca2:	6825      	ldr	r5, [r4, #0]
   2aca4:	4621      	mov	r1, r4
   2aca6:	009b      	lsls	r3, r3, #2
   2aca8:	f1c3 0720 	rsb	r7, r3, #32
   2acac:	684e      	ldr	r6, [r1, #4]
   2acae:	fa06 f007 	lsl.w	r0, r6, r7
   2acb2:	4328      	orrs	r0, r5
   2acb4:	fa26 f503 	lsr.w	r5, r6, r3
   2acb8:	6008      	str	r0, [r1, #0]
   2acba:	f841 5f04 	str.w	r5, [r1, #4]!
   2acbe:	4588      	cmp	r8, r1
   2acc0:	d8f4      	bhi.n	2acac <__hexnan+0xa4>
   2acc2:	42a2      	cmp	r2, r4
   2acc4:	d24d      	bcs.n	2ad62 <__hexnan+0x15a>
   2acc6:	1f11      	subs	r1, r2, #4
   2acc8:	4623      	mov	r3, r4
   2acca:	f853 0b04 	ldr.w	r0, [r3], #4
   2acce:	4563      	cmp	r3, ip
   2acd0:	f841 0f04 	str.w	r0, [r1, #4]!
   2acd4:	d9f9      	bls.n	2acca <__hexnan+0xc2>
   2acd6:	ebac 0304 	sub.w	r3, ip, r4
   2acda:	f10c 0001 	add.w	r0, ip, #1
   2acde:	3401      	adds	r4, #1
   2ace0:	2100      	movs	r1, #0
   2ace2:	f023 0303 	bic.w	r3, r3, #3
   2ace6:	3304      	adds	r3, #4
   2ace8:	42a0      	cmp	r0, r4
   2acea:	bf38      	it	cc
   2acec:	2304      	movcc	r3, #4
   2acee:	4413      	add	r3, r2
   2acf0:	f843 1b04 	str.w	r1, [r3], #4
   2acf4:	4563      	cmp	r3, ip
   2acf6:	d9fb      	bls.n	2acf0 <__hexnan+0xe8>
   2acf8:	9b01      	ldr	r3, [sp, #4]
   2acfa:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2acfe:	b92b      	cbnz	r3, 2ad0c <__hexnan+0x104>
   2ad00:	4562      	cmp	r2, ip
   2ad02:	d044      	beq.n	2ad8e <__hexnan+0x186>
   2ad04:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   2ad08:	2b00      	cmp	r3, #0
   2ad0a:	d0f9      	beq.n	2ad00 <__hexnan+0xf8>
   2ad0c:	2005      	movs	r0, #5
   2ad0e:	b005      	add	sp, #20
   2ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad14:	42a2      	cmp	r2, r4
   2ad16:	d2a5      	bcs.n	2ac64 <__hexnan+0x5c>
   2ad18:	2300      	movs	r3, #0
   2ad1a:	3c04      	subs	r4, #4
   2ad1c:	6023      	str	r3, [r4, #0]
   2ad1e:	4619      	mov	r1, r3
   2ad20:	2301      	movs	r3, #1
   2ad22:	e7ad      	b.n	2ac80 <__hexnan+0x78>
   2ad24:	f1a4 0804 	sub.w	r8, r4, #4
   2ad28:	2300      	movs	r3, #0
   2ad2a:	46f2      	mov	sl, lr
   2ad2c:	f844 3c04 	str.w	r3, [r4, #-4]
   2ad30:	4644      	mov	r4, r8
   2ad32:	e797      	b.n	2ac64 <__hexnan+0x5c>
   2ad34:	f1c3 0108 	rsb	r1, r3, #8
   2ad38:	6825      	ldr	r5, [r4, #0]
   2ad3a:	4623      	mov	r3, r4
   2ad3c:	0089      	lsls	r1, r1, #2
   2ad3e:	f1c1 0b20 	rsb	fp, r1, #32
   2ad42:	685e      	ldr	r6, [r3, #4]
   2ad44:	fa06 f00b 	lsl.w	r0, r6, fp
   2ad48:	4328      	orrs	r0, r5
   2ad4a:	fa26 f501 	lsr.w	r5, r6, r1
   2ad4e:	6018      	str	r0, [r3, #0]
   2ad50:	f843 5f04 	str.w	r5, [r3, #4]!
   2ad54:	4543      	cmp	r3, r8
   2ad56:	d3f4      	bcc.n	2ad42 <__hexnan+0x13a>
   2ad58:	e781      	b.n	2ac5e <__hexnan+0x56>
   2ad5a:	1d19      	adds	r1, r3, #4
   2ad5c:	469c      	mov	ip, r3
   2ad5e:	9101      	str	r1, [sp, #4]
   2ad60:	e762      	b.n	2ac28 <__hexnan+0x20>
   2ad62:	9b03      	ldr	r3, [sp, #12]
   2ad64:	2b00      	cmp	r3, #0
   2ad66:	d0c7      	beq.n	2acf8 <__hexnan+0xf0>
   2ad68:	9b03      	ldr	r3, [sp, #12]
   2ad6a:	9c01      	ldr	r4, [sp, #4]
   2ad6c:	f1c3 0120 	rsb	r1, r3, #32
   2ad70:	f04f 33ff 	mov.w	r3, #4294967295
   2ad74:	f854 0c04 	ldr.w	r0, [r4, #-4]
   2ad78:	40cb      	lsrs	r3, r1
   2ad7a:	4003      	ands	r3, r0
   2ad7c:	f844 3c04 	str.w	r3, [r4, #-4]
   2ad80:	e7bd      	b.n	2acfe <__hexnan+0xf6>
   2ad82:	2929      	cmp	r1, #41	; 0x29
   2ad84:	d00a      	beq.n	2ad9c <__hexnan+0x194>
   2ad86:	2004      	movs	r0, #4
   2ad88:	b005      	add	sp, #20
   2ad8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad8e:	2301      	movs	r3, #1
   2ad90:	2005      	movs	r0, #5
   2ad92:	f8cc 3000 	str.w	r3, [ip]
   2ad96:	b005      	add	sp, #20
   2ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad9c:	3701      	adds	r7, #1
   2ad9e:	9902      	ldr	r1, [sp, #8]
   2ada0:	600f      	str	r7, [r1, #0]
   2ada2:	e775      	b.n	2ac90 <__hexnan+0x88>
   2ada4:	0002fb9c 	.word	0x0002fb9c

0002ada8 <iswspace>:
   2ada8:	2100      	movs	r1, #0
   2adaa:	f000 b801 	b.w	2adb0 <iswspace_l>
   2adae:	bf00      	nop

0002adb0 <iswspace_l>:
   2adb0:	28ff      	cmp	r0, #255	; 0xff
   2adb2:	d804      	bhi.n	2adbe <iswspace_l+0xe>
   2adb4:	4b03      	ldr	r3, [pc, #12]	; (2adc4 <iswspace_l+0x14>)
   2adb6:	5cc0      	ldrb	r0, [r0, r3]
   2adb8:	f000 0008 	and.w	r0, r0, #8
   2adbc:	4770      	bx	lr
   2adbe:	2000      	movs	r0, #0
   2adc0:	4770      	bx	lr
   2adc2:	bf00      	nop
   2adc4:	0002f9a1 	.word	0x0002f9a1

0002adc8 <__locale_mb_cur_max>:
   2adc8:	4b01      	ldr	r3, [pc, #4]	; (2add0 <__locale_mb_cur_max+0x8>)
   2adca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2adce:	4770      	bx	lr
   2add0:	200208f0 	.word	0x200208f0

0002add4 <_localeconv_r>:
   2add4:	4800      	ldr	r0, [pc, #0]	; (2add8 <_localeconv_r+0x4>)
   2add6:	4770      	bx	lr
   2add8:	200209e0 	.word	0x200209e0

0002addc <__retarget_lock_init_recursive>:
   2addc:	4770      	bx	lr
   2adde:	bf00      	nop

0002ade0 <__retarget_lock_close_recursive>:
   2ade0:	4770      	bx	lr
   2ade2:	bf00      	nop

0002ade4 <__retarget_lock_acquire_recursive>:
   2ade4:	4770      	bx	lr
   2ade6:	bf00      	nop

0002ade8 <__retarget_lock_release_recursive>:
   2ade8:	4770      	bx	lr
   2adea:	bf00      	nop

0002adec <_lseek_r>:
   2adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2adee:	460f      	mov	r7, r1
   2adf0:	4d08      	ldr	r5, [pc, #32]	; (2ae14 <_lseek_r+0x28>)
   2adf2:	2600      	movs	r6, #0
   2adf4:	4611      	mov	r1, r2
   2adf6:	4604      	mov	r4, r0
   2adf8:	461a      	mov	r2, r3
   2adfa:	4638      	mov	r0, r7
   2adfc:	602e      	str	r6, [r5, #0]
   2adfe:	f002 f979 	bl	2d0f4 <_lseek>
   2ae02:	1c43      	adds	r3, r0, #1
   2ae04:	d000      	beq.n	2ae08 <_lseek_r+0x1c>
   2ae06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ae08:	682b      	ldr	r3, [r5, #0]
   2ae0a:	2b00      	cmp	r3, #0
   2ae0c:	d0fb      	beq.n	2ae06 <_lseek_r+0x1a>
   2ae0e:	6023      	str	r3, [r4, #0]
   2ae10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ae12:	bf00      	nop
   2ae14:	20026430 	.word	0x20026430

0002ae18 <__swhatbuf_r>:
   2ae18:	b570      	push	{r4, r5, r6, lr}
   2ae1a:	460c      	mov	r4, r1
   2ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2ae20:	b096      	sub	sp, #88	; 0x58
   2ae22:	4615      	mov	r5, r2
   2ae24:	2900      	cmp	r1, #0
   2ae26:	461e      	mov	r6, r3
   2ae28:	db14      	blt.n	2ae54 <__swhatbuf_r+0x3c>
   2ae2a:	466a      	mov	r2, sp
   2ae2c:	f001 fad0 	bl	2c3d0 <_fstat_r>
   2ae30:	2800      	cmp	r0, #0
   2ae32:	db0f      	blt.n	2ae54 <__swhatbuf_r+0x3c>
   2ae34:	9a01      	ldr	r2, [sp, #4]
   2ae36:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2ae3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2ae3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2ae42:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   2ae46:	fab2 f282 	clz	r2, r2
   2ae4a:	0952      	lsrs	r2, r2, #5
   2ae4c:	6032      	str	r2, [r6, #0]
   2ae4e:	602b      	str	r3, [r5, #0]
   2ae50:	b016      	add	sp, #88	; 0x58
   2ae52:	bd70      	pop	{r4, r5, r6, pc}
   2ae54:	89a1      	ldrh	r1, [r4, #12]
   2ae56:	2300      	movs	r3, #0
   2ae58:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   2ae5c:	6033      	str	r3, [r6, #0]
   2ae5e:	d004      	beq.n	2ae6a <__swhatbuf_r+0x52>
   2ae60:	2240      	movs	r2, #64	; 0x40
   2ae62:	4618      	mov	r0, r3
   2ae64:	602a      	str	r2, [r5, #0]
   2ae66:	b016      	add	sp, #88	; 0x58
   2ae68:	bd70      	pop	{r4, r5, r6, pc}
   2ae6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2ae6e:	602b      	str	r3, [r5, #0]
   2ae70:	b016      	add	sp, #88	; 0x58
   2ae72:	bd70      	pop	{r4, r5, r6, pc}

0002ae74 <__smakebuf_r>:
   2ae74:	898b      	ldrh	r3, [r1, #12]
   2ae76:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ae78:	079d      	lsls	r5, r3, #30
   2ae7a:	b083      	sub	sp, #12
   2ae7c:	460c      	mov	r4, r1
   2ae7e:	d507      	bpl.n	2ae90 <__smakebuf_r+0x1c>
   2ae80:	f101 0343 	add.w	r3, r1, #67	; 0x43
   2ae84:	2201      	movs	r2, #1
   2ae86:	600b      	str	r3, [r1, #0]
   2ae88:	e9c1 3204 	strd	r3, r2, [r1, #16]
   2ae8c:	b003      	add	sp, #12
   2ae8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ae90:	4606      	mov	r6, r0
   2ae92:	ab01      	add	r3, sp, #4
   2ae94:	466a      	mov	r2, sp
   2ae96:	f7ff ffbf 	bl	2ae18 <__swhatbuf_r>
   2ae9a:	9900      	ldr	r1, [sp, #0]
   2ae9c:	4605      	mov	r5, r0
   2ae9e:	4630      	mov	r0, r6
   2aea0:	f7fa ff90 	bl	25dc4 <_malloc_r>
   2aea4:	b180      	cbz	r0, 2aec8 <__smakebuf_r+0x54>
   2aea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2aeaa:	4f17      	ldr	r7, [pc, #92]	; (2af08 <__smakebuf_r+0x94>)
   2aeac:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   2aeb0:	9900      	ldr	r1, [sp, #0]
   2aeb2:	9a01      	ldr	r2, [sp, #4]
   2aeb4:	63f7      	str	r7, [r6, #60]	; 0x3c
   2aeb6:	81a3      	strh	r3, [r4, #12]
   2aeb8:	6020      	str	r0, [r4, #0]
   2aeba:	e9c4 0104 	strd	r0, r1, [r4, #16]
   2aebe:	b99a      	cbnz	r2, 2aee8 <__smakebuf_r+0x74>
   2aec0:	432b      	orrs	r3, r5
   2aec2:	81a3      	strh	r3, [r4, #12]
   2aec4:	b003      	add	sp, #12
   2aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2aecc:	059a      	lsls	r2, r3, #22
   2aece:	d4dd      	bmi.n	2ae8c <__smakebuf_r+0x18>
   2aed0:	f023 0303 	bic.w	r3, r3, #3
   2aed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2aed8:	2101      	movs	r1, #1
   2aeda:	f043 0302 	orr.w	r3, r3, #2
   2aede:	6022      	str	r2, [r4, #0]
   2aee0:	6122      	str	r2, [r4, #16]
   2aee2:	81a3      	strh	r3, [r4, #12]
   2aee4:	6161      	str	r1, [r4, #20]
   2aee6:	e7d1      	b.n	2ae8c <__smakebuf_r+0x18>
   2aee8:	4630      	mov	r0, r6
   2aeea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2aeee:	f001 fa85 	bl	2c3fc <_isatty_r>
   2aef2:	b910      	cbnz	r0, 2aefa <__smakebuf_r+0x86>
   2aef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2aef8:	e7e2      	b.n	2aec0 <__smakebuf_r+0x4c>
   2aefa:	89a2      	ldrh	r2, [r4, #12]
   2aefc:	f022 0203 	bic.w	r2, r2, #3
   2af00:	f042 0201 	orr.w	r2, r2, #1
   2af04:	b213      	sxth	r3, r2
   2af06:	e7db      	b.n	2aec0 <__smakebuf_r+0x4c>
   2af08:	00029e6d 	.word	0x00029e6d

0002af0c <_mbrtowc_r>:
   2af0c:	b570      	push	{r4, r5, r6, lr}
   2af0e:	b082      	sub	sp, #8
   2af10:	4606      	mov	r6, r0
   2af12:	9c06      	ldr	r4, [sp, #24]
   2af14:	b142      	cbz	r2, 2af28 <_mbrtowc_r+0x1c>
   2af16:	4d0d      	ldr	r5, [pc, #52]	; (2af4c <_mbrtowc_r+0x40>)
   2af18:	9400      	str	r4, [sp, #0]
   2af1a:	f8d5 50e4 	ldr.w	r5, [r5, #228]	; 0xe4
   2af1e:	47a8      	blx	r5
   2af20:	1c43      	adds	r3, r0, #1
   2af22:	d00c      	beq.n	2af3e <_mbrtowc_r+0x32>
   2af24:	b002      	add	sp, #8
   2af26:	bd70      	pop	{r4, r5, r6, pc}
   2af28:	4615      	mov	r5, r2
   2af2a:	4a08      	ldr	r2, [pc, #32]	; (2af4c <_mbrtowc_r+0x40>)
   2af2c:	2301      	movs	r3, #1
   2af2e:	9400      	str	r4, [sp, #0]
   2af30:	4629      	mov	r1, r5
   2af32:	f8d2 50e4 	ldr.w	r5, [r2, #228]	; 0xe4
   2af36:	4a06      	ldr	r2, [pc, #24]	; (2af50 <_mbrtowc_r+0x44>)
   2af38:	47a8      	blx	r5
   2af3a:	1c43      	adds	r3, r0, #1
   2af3c:	d1f2      	bne.n	2af24 <_mbrtowc_r+0x18>
   2af3e:	2200      	movs	r2, #0
   2af40:	238a      	movs	r3, #138	; 0x8a
   2af42:	6022      	str	r2, [r4, #0]
   2af44:	6033      	str	r3, [r6, #0]
   2af46:	b002      	add	sp, #8
   2af48:	bd70      	pop	{r4, r5, r6, pc}
   2af4a:	bf00      	nop
   2af4c:	200208f0 	.word	0x200208f0
   2af50:	0002f96c 	.word	0x0002f96c

0002af54 <__ascii_mbtowc>:
   2af54:	b082      	sub	sp, #8
   2af56:	b149      	cbz	r1, 2af6c <__ascii_mbtowc+0x18>
   2af58:	b15a      	cbz	r2, 2af72 <__ascii_mbtowc+0x1e>
   2af5a:	b16b      	cbz	r3, 2af78 <__ascii_mbtowc+0x24>
   2af5c:	7813      	ldrb	r3, [r2, #0]
   2af5e:	600b      	str	r3, [r1, #0]
   2af60:	7812      	ldrb	r2, [r2, #0]
   2af62:	1e10      	subs	r0, r2, #0
   2af64:	bf18      	it	ne
   2af66:	2001      	movne	r0, #1
   2af68:	b002      	add	sp, #8
   2af6a:	4770      	bx	lr
   2af6c:	a901      	add	r1, sp, #4
   2af6e:	2a00      	cmp	r2, #0
   2af70:	d1f3      	bne.n	2af5a <__ascii_mbtowc+0x6>
   2af72:	4610      	mov	r0, r2
   2af74:	b002      	add	sp, #8
   2af76:	4770      	bx	lr
   2af78:	f06f 0001 	mvn.w	r0, #1
   2af7c:	e7f4      	b.n	2af68 <__ascii_mbtowc+0x14>
   2af7e:	bf00      	nop

0002af80 <memmove>:
   2af80:	4288      	cmp	r0, r1
   2af82:	b4f0      	push	{r4, r5, r6, r7}
   2af84:	d90d      	bls.n	2afa2 <memmove+0x22>
   2af86:	188b      	adds	r3, r1, r2
   2af88:	4283      	cmp	r3, r0
   2af8a:	d90a      	bls.n	2afa2 <memmove+0x22>
   2af8c:	1884      	adds	r4, r0, r2
   2af8e:	b132      	cbz	r2, 2af9e <memmove+0x1e>
   2af90:	4622      	mov	r2, r4
   2af92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2af96:	4299      	cmp	r1, r3
   2af98:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2af9c:	d1f9      	bne.n	2af92 <memmove+0x12>
   2af9e:	bcf0      	pop	{r4, r5, r6, r7}
   2afa0:	4770      	bx	lr
   2afa2:	2a0f      	cmp	r2, #15
   2afa4:	d80e      	bhi.n	2afc4 <memmove+0x44>
   2afa6:	4603      	mov	r3, r0
   2afa8:	1e54      	subs	r4, r2, #1
   2afaa:	2a00      	cmp	r2, #0
   2afac:	d0f7      	beq.n	2af9e <memmove+0x1e>
   2afae:	3401      	adds	r4, #1
   2afb0:	3b01      	subs	r3, #1
   2afb2:	440c      	add	r4, r1
   2afb4:	f811 2b01 	ldrb.w	r2, [r1], #1
   2afb8:	42a1      	cmp	r1, r4
   2afba:	f803 2f01 	strb.w	r2, [r3, #1]!
   2afbe:	d1f9      	bne.n	2afb4 <memmove+0x34>
   2afc0:	bcf0      	pop	{r4, r5, r6, r7}
   2afc2:	4770      	bx	lr
   2afc4:	ea40 0301 	orr.w	r3, r0, r1
   2afc8:	079b      	lsls	r3, r3, #30
   2afca:	d13e      	bne.n	2b04a <memmove+0xca>
   2afcc:	f1a2 0310 	sub.w	r3, r2, #16
   2afd0:	f101 0520 	add.w	r5, r1, #32
   2afd4:	f101 0610 	add.w	r6, r1, #16
   2afd8:	f100 0710 	add.w	r7, r0, #16
   2afdc:	f023 040f 	bic.w	r4, r3, #15
   2afe0:	091b      	lsrs	r3, r3, #4
   2afe2:	4425      	add	r5, r4
   2afe4:	f856 4c10 	ldr.w	r4, [r6, #-16]
   2afe8:	3610      	adds	r6, #16
   2afea:	3710      	adds	r7, #16
   2afec:	f847 4c20 	str.w	r4, [r7, #-32]
   2aff0:	f856 4c1c 	ldr.w	r4, [r6, #-28]
   2aff4:	f847 4c1c 	str.w	r4, [r7, #-28]
   2aff8:	f856 4c18 	ldr.w	r4, [r6, #-24]
   2affc:	f847 4c18 	str.w	r4, [r7, #-24]
   2b000:	f856 4c14 	ldr.w	r4, [r6, #-20]
   2b004:	42ae      	cmp	r6, r5
   2b006:	f847 4c14 	str.w	r4, [r7, #-20]
   2b00a:	d1eb      	bne.n	2afe4 <memmove+0x64>
   2b00c:	3301      	adds	r3, #1
   2b00e:	f012 0f0c 	tst.w	r2, #12
   2b012:	f002 050f 	and.w	r5, r2, #15
   2b016:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   2b01a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   2b01e:	d017      	beq.n	2b050 <memmove+0xd0>
   2b020:	3d04      	subs	r5, #4
   2b022:	1f1c      	subs	r4, r3, #4
   2b024:	460e      	mov	r6, r1
   2b026:	f025 0c03 	bic.w	ip, r5, #3
   2b02a:	08ad      	lsrs	r5, r5, #2
   2b02c:	449c      	add	ip, r3
   2b02e:	f856 7b04 	ldr.w	r7, [r6], #4
   2b032:	f844 7f04 	str.w	r7, [r4, #4]!
   2b036:	4564      	cmp	r4, ip
   2b038:	d1f9      	bne.n	2b02e <memmove+0xae>
   2b03a:	3501      	adds	r5, #1
   2b03c:	f002 0203 	and.w	r2, r2, #3
   2b040:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2b044:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   2b048:	e7ae      	b.n	2afa8 <memmove+0x28>
   2b04a:	1e54      	subs	r4, r2, #1
   2b04c:	4603      	mov	r3, r0
   2b04e:	e7ae      	b.n	2afae <memmove+0x2e>
   2b050:	462a      	mov	r2, r5
   2b052:	e7a9      	b.n	2afa8 <memmove+0x28>

0002b054 <_Balloc>:
   2b054:	b538      	push	{r3, r4, r5, lr}
   2b056:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2b058:	4605      	mov	r5, r0
   2b05a:	460c      	mov	r4, r1
   2b05c:	b14b      	cbz	r3, 2b072 <_Balloc+0x1e>
   2b05e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2b062:	b180      	cbz	r0, 2b086 <_Balloc+0x32>
   2b064:	6802      	ldr	r2, [r0, #0]
   2b066:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2b06a:	2300      	movs	r3, #0
   2b06c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2b070:	bd38      	pop	{r3, r4, r5, pc}
   2b072:	2221      	movs	r2, #33	; 0x21
   2b074:	2104      	movs	r1, #4
   2b076:	f001 f915 	bl	2c2a4 <_calloc_r>
   2b07a:	4603      	mov	r3, r0
   2b07c:	64e8      	str	r0, [r5, #76]	; 0x4c
   2b07e:	2800      	cmp	r0, #0
   2b080:	d1ed      	bne.n	2b05e <_Balloc+0xa>
   2b082:	2000      	movs	r0, #0
   2b084:	bd38      	pop	{r3, r4, r5, pc}
   2b086:	2101      	movs	r1, #1
   2b088:	4628      	mov	r0, r5
   2b08a:	fa01 f504 	lsl.w	r5, r1, r4
   2b08e:	1d6a      	adds	r2, r5, #5
   2b090:	0092      	lsls	r2, r2, #2
   2b092:	f001 f907 	bl	2c2a4 <_calloc_r>
   2b096:	2800      	cmp	r0, #0
   2b098:	d0f3      	beq.n	2b082 <_Balloc+0x2e>
   2b09a:	e9c0 4501 	strd	r4, r5, [r0, #4]
   2b09e:	e7e4      	b.n	2b06a <_Balloc+0x16>

0002b0a0 <_Bfree>:
   2b0a0:	b131      	cbz	r1, 2b0b0 <_Bfree+0x10>
   2b0a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2b0a4:	684a      	ldr	r2, [r1, #4]
   2b0a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2b0aa:	6008      	str	r0, [r1, #0]
   2b0ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2b0b0:	4770      	bx	lr
   2b0b2:	bf00      	nop

0002b0b4 <__multadd>:
   2b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b0b8:	460f      	mov	r7, r1
   2b0ba:	4680      	mov	r8, r0
   2b0bc:	690e      	ldr	r6, [r1, #16]
   2b0be:	f101 0014 	add.w	r0, r1, #20
   2b0c2:	b082      	sub	sp, #8
   2b0c4:	2100      	movs	r1, #0
   2b0c6:	6805      	ldr	r5, [r0, #0]
   2b0c8:	3101      	adds	r1, #1
   2b0ca:	b2ac      	uxth	r4, r5
   2b0cc:	428e      	cmp	r6, r1
   2b0ce:	ea4f 4515 	mov.w	r5, r5, lsr #16
   2b0d2:	fb02 3304 	mla	r3, r2, r4, r3
   2b0d6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2b0da:	b29c      	uxth	r4, r3
   2b0dc:	fb02 c305 	mla	r3, r2, r5, ip
   2b0e0:	eb04 4403 	add.w	r4, r4, r3, lsl #16
   2b0e4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2b0e8:	f840 4b04 	str.w	r4, [r0], #4
   2b0ec:	dceb      	bgt.n	2b0c6 <__multadd+0x12>
   2b0ee:	b13b      	cbz	r3, 2b100 <__multadd+0x4c>
   2b0f0:	68ba      	ldr	r2, [r7, #8]
   2b0f2:	42b2      	cmp	r2, r6
   2b0f4:	dd08      	ble.n	2b108 <__multadd+0x54>
   2b0f6:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   2b0fa:	3601      	adds	r6, #1
   2b0fc:	6153      	str	r3, [r2, #20]
   2b0fe:	613e      	str	r6, [r7, #16]
   2b100:	4638      	mov	r0, r7
   2b102:	b002      	add	sp, #8
   2b104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b108:	6879      	ldr	r1, [r7, #4]
   2b10a:	4640      	mov	r0, r8
   2b10c:	9301      	str	r3, [sp, #4]
   2b10e:	3101      	adds	r1, #1
   2b110:	f7ff ffa0 	bl	2b054 <_Balloc>
   2b114:	693a      	ldr	r2, [r7, #16]
   2b116:	f107 010c 	add.w	r1, r7, #12
   2b11a:	4604      	mov	r4, r0
   2b11c:	3202      	adds	r2, #2
   2b11e:	300c      	adds	r0, #12
   2b120:	0092      	lsls	r2, r2, #2
   2b122:	f7e1 fd13 	bl	cb4c <memcpy>
   2b126:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
   2b12a:	6879      	ldr	r1, [r7, #4]
   2b12c:	9b01      	ldr	r3, [sp, #4]
   2b12e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2b132:	6038      	str	r0, [r7, #0]
   2b134:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
   2b138:	4627      	mov	r7, r4
   2b13a:	e7dc      	b.n	2b0f6 <__multadd+0x42>

0002b13c <__s2b>:
   2b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b140:	461f      	mov	r7, r3
   2b142:	4c24      	ldr	r4, [pc, #144]	; (2b1d4 <__s2b+0x98>)
   2b144:	4606      	mov	r6, r0
   2b146:	f103 0008 	add.w	r0, r3, #8
   2b14a:	2f09      	cmp	r7, #9
   2b14c:	4689      	mov	r9, r1
   2b14e:	fb84 3c00 	smull	r3, ip, r4, r0
   2b152:	ea4f 73e0 	mov.w	r3, r0, asr #31
   2b156:	4690      	mov	r8, r2
   2b158:	9d08      	ldr	r5, [sp, #32]
   2b15a:	ebc3 036c 	rsb	r3, r3, ip, asr #1
   2b15e:	dd37      	ble.n	2b1d0 <__s2b+0x94>
   2b160:	2401      	movs	r4, #1
   2b162:	2100      	movs	r1, #0
   2b164:	0064      	lsls	r4, r4, #1
   2b166:	3101      	adds	r1, #1
   2b168:	42a3      	cmp	r3, r4
   2b16a:	dcfb      	bgt.n	2b164 <__s2b+0x28>
   2b16c:	4630      	mov	r0, r6
   2b16e:	f7ff ff71 	bl	2b054 <_Balloc>
   2b172:	2301      	movs	r3, #1
   2b174:	f1b8 0f09 	cmp.w	r8, #9
   2b178:	4601      	mov	r1, r0
   2b17a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2b17e:	dd22      	ble.n	2b1c6 <__s2b+0x8a>
   2b180:	f109 0a09 	add.w	sl, r9, #9
   2b184:	44c1      	add	r9, r8
   2b186:	4655      	mov	r5, sl
   2b188:	f815 3b01 	ldrb.w	r3, [r5], #1
   2b18c:	220a      	movs	r2, #10
   2b18e:	4630      	mov	r0, r6
   2b190:	3b30      	subs	r3, #48	; 0x30
   2b192:	f7ff ff8f 	bl	2b0b4 <__multadd>
   2b196:	454d      	cmp	r5, r9
   2b198:	4601      	mov	r1, r0
   2b19a:	d1f5      	bne.n	2b188 <__s2b+0x4c>
   2b19c:	f1a8 0408 	sub.w	r4, r8, #8
   2b1a0:	4454      	add	r4, sl
   2b1a2:	4547      	cmp	r7, r8
   2b1a4:	dd0c      	ble.n	2b1c0 <__s2b+0x84>
   2b1a6:	eba7 0508 	sub.w	r5, r7, r8
   2b1aa:	4425      	add	r5, r4
   2b1ac:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b1b0:	220a      	movs	r2, #10
   2b1b2:	4630      	mov	r0, r6
   2b1b4:	3b30      	subs	r3, #48	; 0x30
   2b1b6:	f7ff ff7d 	bl	2b0b4 <__multadd>
   2b1ba:	42a5      	cmp	r5, r4
   2b1bc:	4601      	mov	r1, r0
   2b1be:	d1f5      	bne.n	2b1ac <__s2b+0x70>
   2b1c0:	4608      	mov	r0, r1
   2b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b1c6:	f109 040a 	add.w	r4, r9, #10
   2b1ca:	f04f 0809 	mov.w	r8, #9
   2b1ce:	e7e8      	b.n	2b1a2 <__s2b+0x66>
   2b1d0:	2100      	movs	r1, #0
   2b1d2:	e7cb      	b.n	2b16c <__s2b+0x30>
   2b1d4:	38e38e39 	.word	0x38e38e39

0002b1d8 <__hi0bits>:
   2b1d8:	4b0f      	ldr	r3, [pc, #60]	; (2b218 <__hi0bits+0x40>)
   2b1da:	4003      	ands	r3, r0
   2b1dc:	b9d3      	cbnz	r3, 2b214 <__hi0bits+0x3c>
   2b1de:	0400      	lsls	r0, r0, #16
   2b1e0:	2310      	movs	r3, #16
   2b1e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   2b1e6:	d101      	bne.n	2b1ec <__hi0bits+0x14>
   2b1e8:	3308      	adds	r3, #8
   2b1ea:	0200      	lsls	r0, r0, #8
   2b1ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   2b1f0:	d101      	bne.n	2b1f6 <__hi0bits+0x1e>
   2b1f2:	3304      	adds	r3, #4
   2b1f4:	0100      	lsls	r0, r0, #4
   2b1f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   2b1fa:	d101      	bne.n	2b200 <__hi0bits+0x28>
   2b1fc:	3302      	adds	r3, #2
   2b1fe:	0080      	lsls	r0, r0, #2
   2b200:	2800      	cmp	r0, #0
   2b202:	db05      	blt.n	2b210 <__hi0bits+0x38>
   2b204:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   2b208:	f103 0301 	add.w	r3, r3, #1
   2b20c:	bf08      	it	eq
   2b20e:	2320      	moveq	r3, #32
   2b210:	4618      	mov	r0, r3
   2b212:	4770      	bx	lr
   2b214:	2300      	movs	r3, #0
   2b216:	e7e4      	b.n	2b1e2 <__hi0bits+0xa>
   2b218:	ffff0000 	.word	0xffff0000

0002b21c <__lo0bits>:
   2b21c:	6803      	ldr	r3, [r0, #0]
   2b21e:	4601      	mov	r1, r0
   2b220:	f013 0207 	ands.w	r2, r3, #7
   2b224:	d007      	beq.n	2b236 <__lo0bits+0x1a>
   2b226:	07da      	lsls	r2, r3, #31
   2b228:	d420      	bmi.n	2b26c <__lo0bits+0x50>
   2b22a:	0798      	lsls	r0, r3, #30
   2b22c:	d522      	bpl.n	2b274 <__lo0bits+0x58>
   2b22e:	085b      	lsrs	r3, r3, #1
   2b230:	2001      	movs	r0, #1
   2b232:	600b      	str	r3, [r1, #0]
   2b234:	4770      	bx	lr
   2b236:	b298      	uxth	r0, r3
   2b238:	b1a8      	cbz	r0, 2b266 <__lo0bits+0x4a>
   2b23a:	4610      	mov	r0, r2
   2b23c:	f013 0fff 	tst.w	r3, #255	; 0xff
   2b240:	d101      	bne.n	2b246 <__lo0bits+0x2a>
   2b242:	3008      	adds	r0, #8
   2b244:	0a1b      	lsrs	r3, r3, #8
   2b246:	071a      	lsls	r2, r3, #28
   2b248:	d101      	bne.n	2b24e <__lo0bits+0x32>
   2b24a:	3004      	adds	r0, #4
   2b24c:	091b      	lsrs	r3, r3, #4
   2b24e:	079a      	lsls	r2, r3, #30
   2b250:	d101      	bne.n	2b256 <__lo0bits+0x3a>
   2b252:	3002      	adds	r0, #2
   2b254:	089b      	lsrs	r3, r3, #2
   2b256:	07da      	lsls	r2, r3, #31
   2b258:	d403      	bmi.n	2b262 <__lo0bits+0x46>
   2b25a:	085b      	lsrs	r3, r3, #1
   2b25c:	f100 0001 	add.w	r0, r0, #1
   2b260:	d006      	beq.n	2b270 <__lo0bits+0x54>
   2b262:	600b      	str	r3, [r1, #0]
   2b264:	4770      	bx	lr
   2b266:	0c1b      	lsrs	r3, r3, #16
   2b268:	2010      	movs	r0, #16
   2b26a:	e7e7      	b.n	2b23c <__lo0bits+0x20>
   2b26c:	2000      	movs	r0, #0
   2b26e:	4770      	bx	lr
   2b270:	2020      	movs	r0, #32
   2b272:	4770      	bx	lr
   2b274:	089b      	lsrs	r3, r3, #2
   2b276:	2002      	movs	r0, #2
   2b278:	600b      	str	r3, [r1, #0]
   2b27a:	4770      	bx	lr

0002b27c <__i2b>:
   2b27c:	b510      	push	{r4, lr}
   2b27e:	460c      	mov	r4, r1
   2b280:	2101      	movs	r1, #1
   2b282:	f7ff fee7 	bl	2b054 <_Balloc>
   2b286:	2201      	movs	r2, #1
   2b288:	e9c0 2404 	strd	r2, r4, [r0, #16]
   2b28c:	bd10      	pop	{r4, pc}
   2b28e:	bf00      	nop

0002b290 <__multiply>:
   2b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b294:	690e      	ldr	r6, [r1, #16]
   2b296:	b085      	sub	sp, #20
   2b298:	6917      	ldr	r7, [r2, #16]
   2b29a:	460d      	mov	r5, r1
   2b29c:	4614      	mov	r4, r2
   2b29e:	42be      	cmp	r6, r7
   2b2a0:	db05      	blt.n	2b2ae <__multiply+0x1e>
   2b2a2:	463a      	mov	r2, r7
   2b2a4:	4623      	mov	r3, r4
   2b2a6:	4637      	mov	r7, r6
   2b2a8:	460c      	mov	r4, r1
   2b2aa:	4616      	mov	r6, r2
   2b2ac:	461d      	mov	r5, r3
   2b2ae:	eb07 0806 	add.w	r8, r7, r6
   2b2b2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2b2b6:	4543      	cmp	r3, r8
   2b2b8:	bfb8      	it	lt
   2b2ba:	3101      	addlt	r1, #1
   2b2bc:	f7ff feca 	bl	2b054 <_Balloc>
   2b2c0:	f100 0914 	add.w	r9, r0, #20
   2b2c4:	9001      	str	r0, [sp, #4]
   2b2c6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2b2ca:	45d1      	cmp	r9, sl
   2b2cc:	d205      	bcs.n	2b2da <__multiply+0x4a>
   2b2ce:	464b      	mov	r3, r9
   2b2d0:	2200      	movs	r2, #0
   2b2d2:	f843 2b04 	str.w	r2, [r3], #4
   2b2d6:	459a      	cmp	sl, r3
   2b2d8:	d8fb      	bhi.n	2b2d2 <__multiply+0x42>
   2b2da:	f105 0e14 	add.w	lr, r5, #20
   2b2de:	f104 0314 	add.w	r3, r4, #20
   2b2e2:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
   2b2e6:	461a      	mov	r2, r3
   2b2e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2b2ec:	45de      	cmp	lr, fp
   2b2ee:	d260      	bcs.n	2b3b2 <__multiply+0x122>
   2b2f0:	1b3b      	subs	r3, r7, r4
   2b2f2:	3415      	adds	r4, #21
   2b2f4:	3b15      	subs	r3, #21
   2b2f6:	f023 0303 	bic.w	r3, r3, #3
   2b2fa:	3304      	adds	r3, #4
   2b2fc:	42a7      	cmp	r7, r4
   2b2fe:	bf38      	it	cc
   2b300:	2304      	movcc	r3, #4
   2b302:	e9cd a802 	strd	sl, r8, [sp, #8]
   2b306:	4698      	mov	r8, r3
   2b308:	4692      	mov	sl, r2
   2b30a:	e005      	b.n	2b318 <__multiply+0x88>
   2b30c:	0c24      	lsrs	r4, r4, #16
   2b30e:	d12b      	bne.n	2b368 <__multiply+0xd8>
   2b310:	45f3      	cmp	fp, lr
   2b312:	f109 0904 	add.w	r9, r9, #4
   2b316:	d94a      	bls.n	2b3ae <__multiply+0x11e>
   2b318:	f85e 4b04 	ldr.w	r4, [lr], #4
   2b31c:	b2a6      	uxth	r6, r4
   2b31e:	2e00      	cmp	r6, #0
   2b320:	d0f4      	beq.n	2b30c <__multiply+0x7c>
   2b322:	4655      	mov	r5, sl
   2b324:	464c      	mov	r4, r9
   2b326:	2200      	movs	r2, #0
   2b328:	f855 3b04 	ldr.w	r3, [r5], #4
   2b32c:	6820      	ldr	r0, [r4, #0]
   2b32e:	b299      	uxth	r1, r3
   2b330:	42af      	cmp	r7, r5
   2b332:	fa1f fc80 	uxth.w	ip, r0
   2b336:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2b33a:	fb06 c101 	mla	r1, r6, r1, ip
   2b33e:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2b342:	4411      	add	r1, r2
   2b344:	fb06 0203 	mla	r2, r6, r3, r0
   2b348:	b28b      	uxth	r3, r1
   2b34a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   2b34e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b352:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2b356:	f844 3b04 	str.w	r3, [r4], #4
   2b35a:	d8e5      	bhi.n	2b328 <__multiply+0x98>
   2b35c:	f849 2008 	str.w	r2, [r9, r8]
   2b360:	f85e 4c04 	ldr.w	r4, [lr, #-4]
   2b364:	0c24      	lsrs	r4, r4, #16
   2b366:	d0d3      	beq.n	2b310 <__multiply+0x80>
   2b368:	f8d9 3000 	ldr.w	r3, [r9]
   2b36c:	4655      	mov	r5, sl
   2b36e:	464e      	mov	r6, r9
   2b370:	2200      	movs	r2, #0
   2b372:	4618      	mov	r0, r3
   2b374:	0c01      	lsrs	r1, r0, #16
   2b376:	8828      	ldrh	r0, [r5, #0]
   2b378:	b29b      	uxth	r3, r3
   2b37a:	fb04 1000 	mla	r0, r4, r0, r1
   2b37e:	4402      	add	r2, r0
   2b380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b384:	f846 3b04 	str.w	r3, [r6], #4
   2b388:	f855 3b04 	ldr.w	r3, [r5], #4
   2b38c:	6830      	ldr	r0, [r6, #0]
   2b38e:	0c1b      	lsrs	r3, r3, #16
   2b390:	42af      	cmp	r7, r5
   2b392:	b281      	uxth	r1, r0
   2b394:	fb04 1303 	mla	r3, r4, r3, r1
   2b398:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2b39c:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2b3a0:	d8e8      	bhi.n	2b374 <__multiply+0xe4>
   2b3a2:	45f3      	cmp	fp, lr
   2b3a4:	f849 3008 	str.w	r3, [r9, r8]
   2b3a8:	f109 0904 	add.w	r9, r9, #4
   2b3ac:	d8b4      	bhi.n	2b318 <__multiply+0x88>
   2b3ae:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   2b3b2:	f1b8 0f00 	cmp.w	r8, #0
   2b3b6:	dc03      	bgt.n	2b3c0 <__multiply+0x130>
   2b3b8:	e006      	b.n	2b3c8 <__multiply+0x138>
   2b3ba:	f1b8 0801 	subs.w	r8, r8, #1
   2b3be:	d003      	beq.n	2b3c8 <__multiply+0x138>
   2b3c0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2b3c4:	2b00      	cmp	r3, #0
   2b3c6:	d0f8      	beq.n	2b3ba <__multiply+0x12a>
   2b3c8:	9801      	ldr	r0, [sp, #4]
   2b3ca:	f8c0 8010 	str.w	r8, [r0, #16]
   2b3ce:	b005      	add	sp, #20
   2b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b3d4 <__pow5mult>:
   2b3d4:	f012 0303 	ands.w	r3, r2, #3
   2b3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b3dc:	4614      	mov	r4, r2
   2b3de:	4607      	mov	r7, r0
   2b3e0:	d12e      	bne.n	2b440 <__pow5mult+0x6c>
   2b3e2:	460e      	mov	r6, r1
   2b3e4:	10a4      	asrs	r4, r4, #2
   2b3e6:	d01c      	beq.n	2b422 <__pow5mult+0x4e>
   2b3e8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   2b3ea:	b395      	cbz	r5, 2b452 <__pow5mult+0x7e>
   2b3ec:	07e3      	lsls	r3, r4, #31
   2b3ee:	f04f 0800 	mov.w	r8, #0
   2b3f2:	d406      	bmi.n	2b402 <__pow5mult+0x2e>
   2b3f4:	1064      	asrs	r4, r4, #1
   2b3f6:	d014      	beq.n	2b422 <__pow5mult+0x4e>
   2b3f8:	6828      	ldr	r0, [r5, #0]
   2b3fa:	b1a8      	cbz	r0, 2b428 <__pow5mult+0x54>
   2b3fc:	4605      	mov	r5, r0
   2b3fe:	07e3      	lsls	r3, r4, #31
   2b400:	d5f8      	bpl.n	2b3f4 <__pow5mult+0x20>
   2b402:	462a      	mov	r2, r5
   2b404:	4631      	mov	r1, r6
   2b406:	4638      	mov	r0, r7
   2b408:	f7ff ff42 	bl	2b290 <__multiply>
   2b40c:	b1b6      	cbz	r6, 2b43c <__pow5mult+0x68>
   2b40e:	6871      	ldr	r1, [r6, #4]
   2b410:	1064      	asrs	r4, r4, #1
   2b412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2b414:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2b418:	6032      	str	r2, [r6, #0]
   2b41a:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   2b41e:	4606      	mov	r6, r0
   2b420:	d1ea      	bne.n	2b3f8 <__pow5mult+0x24>
   2b422:	4630      	mov	r0, r6
   2b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b428:	462a      	mov	r2, r5
   2b42a:	4629      	mov	r1, r5
   2b42c:	4638      	mov	r0, r7
   2b42e:	f7ff ff2f 	bl	2b290 <__multiply>
   2b432:	6028      	str	r0, [r5, #0]
   2b434:	4605      	mov	r5, r0
   2b436:	f8c0 8000 	str.w	r8, [r0]
   2b43a:	e7e0      	b.n	2b3fe <__pow5mult+0x2a>
   2b43c:	4606      	mov	r6, r0
   2b43e:	e7d9      	b.n	2b3f4 <__pow5mult+0x20>
   2b440:	1e5a      	subs	r2, r3, #1
   2b442:	4d0b      	ldr	r5, [pc, #44]	; (2b470 <__pow5mult+0x9c>)
   2b444:	2300      	movs	r3, #0
   2b446:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2b44a:	f7ff fe33 	bl	2b0b4 <__multadd>
   2b44e:	4606      	mov	r6, r0
   2b450:	e7c8      	b.n	2b3e4 <__pow5mult+0x10>
   2b452:	2101      	movs	r1, #1
   2b454:	4638      	mov	r0, r7
   2b456:	f7ff fdfd 	bl	2b054 <_Balloc>
   2b45a:	f240 2271 	movw	r2, #625	; 0x271
   2b45e:	2101      	movs	r1, #1
   2b460:	2300      	movs	r3, #0
   2b462:	4605      	mov	r5, r0
   2b464:	e9c0 1204 	strd	r1, r2, [r0, #16]
   2b468:	64b8      	str	r0, [r7, #72]	; 0x48
   2b46a:	6003      	str	r3, [r0, #0]
   2b46c:	e7be      	b.n	2b3ec <__pow5mult+0x18>
   2b46e:	bf00      	nop
   2b470:	0002fcb8 	.word	0x0002fcb8

0002b474 <__lshift>:
   2b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b478:	690e      	ldr	r6, [r1, #16]
   2b47a:	460c      	mov	r4, r1
   2b47c:	688b      	ldr	r3, [r1, #8]
   2b47e:	4690      	mov	r8, r2
   2b480:	eb06 1662 	add.w	r6, r6, r2, asr #5
   2b484:	4607      	mov	r7, r0
   2b486:	ea4f 1962 	mov.w	r9, r2, asr #5
   2b48a:	6849      	ldr	r1, [r1, #4]
   2b48c:	1c75      	adds	r5, r6, #1
   2b48e:	429d      	cmp	r5, r3
   2b490:	dd03      	ble.n	2b49a <__lshift+0x26>
   2b492:	005b      	lsls	r3, r3, #1
   2b494:	3101      	adds	r1, #1
   2b496:	429d      	cmp	r5, r3
   2b498:	dcfb      	bgt.n	2b492 <__lshift+0x1e>
   2b49a:	4638      	mov	r0, r7
   2b49c:	f7ff fdda 	bl	2b054 <_Balloc>
   2b4a0:	f1b9 0f00 	cmp.w	r9, #0
   2b4a4:	f100 0114 	add.w	r1, r0, #20
   2b4a8:	dd0f      	ble.n	2b4ca <__lshift+0x56>
   2b4aa:	f109 0205 	add.w	r2, r9, #5
   2b4ae:	460b      	mov	r3, r1
   2b4b0:	f04f 0c00 	mov.w	ip, #0
   2b4b4:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   2b4b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2b4bc:	f843 cb04 	str.w	ip, [r3], #4
   2b4c0:	4293      	cmp	r3, r2
   2b4c2:	d1fb      	bne.n	2b4bc <__lshift+0x48>
   2b4c4:	f1ae 0314 	sub.w	r3, lr, #20
   2b4c8:	4419      	add	r1, r3
   2b4ca:	f104 0314 	add.w	r3, r4, #20
   2b4ce:	6922      	ldr	r2, [r4, #16]
   2b4d0:	f018 081f 	ands.w	r8, r8, #31
   2b4d4:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   2b4d8:	d02c      	beq.n	2b534 <__lshift+0xc0>
   2b4da:	f1c8 0920 	rsb	r9, r8, #32
   2b4de:	468e      	mov	lr, r1
   2b4e0:	f04f 0a00 	mov.w	sl, #0
   2b4e4:	681a      	ldr	r2, [r3, #0]
   2b4e6:	fa02 f208 	lsl.w	r2, r2, r8
   2b4ea:	ea42 020a 	orr.w	r2, r2, sl
   2b4ee:	f84e 2b04 	str.w	r2, [lr], #4
   2b4f2:	f853 2b04 	ldr.w	r2, [r3], #4
   2b4f6:	459c      	cmp	ip, r3
   2b4f8:	fa22 fa09 	lsr.w	sl, r2, r9
   2b4fc:	d8f2      	bhi.n	2b4e4 <__lshift+0x70>
   2b4fe:	ebac 0304 	sub.w	r3, ip, r4
   2b502:	f104 0215 	add.w	r2, r4, #21
   2b506:	f1ba 0f00 	cmp.w	sl, #0
   2b50a:	bf18      	it	ne
   2b50c:	462e      	movne	r6, r5
   2b50e:	3b15      	subs	r3, #21
   2b510:	f023 0303 	bic.w	r3, r3, #3
   2b514:	3304      	adds	r3, #4
   2b516:	4594      	cmp	ip, r2
   2b518:	bf38      	it	cc
   2b51a:	2304      	movcc	r3, #4
   2b51c:	f841 a003 	str.w	sl, [r1, r3]
   2b520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2b522:	6862      	ldr	r2, [r4, #4]
   2b524:	6106      	str	r6, [r0, #16]
   2b526:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2b52a:	6021      	str	r1, [r4, #0]
   2b52c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2b530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b534:	3904      	subs	r1, #4
   2b536:	f853 2b04 	ldr.w	r2, [r3], #4
   2b53a:	459c      	cmp	ip, r3
   2b53c:	f841 2f04 	str.w	r2, [r1, #4]!
   2b540:	d8f9      	bhi.n	2b536 <__lshift+0xc2>
   2b542:	e7ed      	b.n	2b520 <__lshift+0xac>

0002b544 <__mcmp>:
   2b544:	690b      	ldr	r3, [r1, #16]
   2b546:	b430      	push	{r4, r5}
   2b548:	4605      	mov	r5, r0
   2b54a:	6900      	ldr	r0, [r0, #16]
   2b54c:	1ac0      	subs	r0, r0, r3
   2b54e:	d111      	bne.n	2b574 <__mcmp+0x30>
   2b550:	3514      	adds	r5, #20
   2b552:	3114      	adds	r1, #20
   2b554:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   2b558:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2b55c:	e001      	b.n	2b562 <__mcmp+0x1e>
   2b55e:	4295      	cmp	r5, r2
   2b560:	d208      	bcs.n	2b574 <__mcmp+0x30>
   2b562:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   2b566:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b56a:	428c      	cmp	r4, r1
   2b56c:	d0f7      	beq.n	2b55e <__mcmp+0x1a>
   2b56e:	d203      	bcs.n	2b578 <__mcmp+0x34>
   2b570:	f04f 30ff 	mov.w	r0, #4294967295
   2b574:	bc30      	pop	{r4, r5}
   2b576:	4770      	bx	lr
   2b578:	2001      	movs	r0, #1
   2b57a:	bc30      	pop	{r4, r5}
   2b57c:	4770      	bx	lr
   2b57e:	bf00      	nop

0002b580 <__mdiff>:
   2b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b584:	690b      	ldr	r3, [r1, #16]
   2b586:	b083      	sub	sp, #12
   2b588:	6914      	ldr	r4, [r2, #16]
   2b58a:	460e      	mov	r6, r1
   2b58c:	4617      	mov	r7, r2
   2b58e:	1b1b      	subs	r3, r3, r4
   2b590:	2b00      	cmp	r3, #0
   2b592:	d119      	bne.n	2b5c8 <__mdiff+0x48>
   2b594:	f101 0814 	add.w	r8, r1, #20
   2b598:	f102 0914 	add.w	r9, r2, #20
   2b59c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   2b5a0:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   2b5a4:	e001      	b.n	2b5aa <__mdiff+0x2a>
   2b5a6:	4598      	cmp	r8, r3
   2b5a8:	d27f      	bcs.n	2b6aa <__mdiff+0x12a>
   2b5aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b5ae:	f854 2d04 	ldr.w	r2, [r4, #-4]!
   2b5b2:	4291      	cmp	r1, r2
   2b5b4:	d0f7      	beq.n	2b5a6 <__mdiff+0x26>
   2b5b6:	d20c      	bcs.n	2b5d2 <__mdiff+0x52>
   2b5b8:	4642      	mov	r2, r8
   2b5ba:	4633      	mov	r3, r6
   2b5bc:	46c8      	mov	r8, r9
   2b5be:	463e      	mov	r6, r7
   2b5c0:	4691      	mov	r9, r2
   2b5c2:	461f      	mov	r7, r3
   2b5c4:	2501      	movs	r5, #1
   2b5c6:	e005      	b.n	2b5d4 <__mdiff+0x54>
   2b5c8:	db67      	blt.n	2b69a <__mdiff+0x11a>
   2b5ca:	f101 0814 	add.w	r8, r1, #20
   2b5ce:	f102 0914 	add.w	r9, r2, #20
   2b5d2:	2500      	movs	r5, #0
   2b5d4:	6871      	ldr	r1, [r6, #4]
   2b5d6:	464c      	mov	r4, r9
   2b5d8:	f7ff fd3c 	bl	2b054 <_Balloc>
   2b5dc:	693b      	ldr	r3, [r7, #16]
   2b5de:	6936      	ldr	r6, [r6, #16]
   2b5e0:	f100 0714 	add.w	r7, r0, #20
   2b5e4:	eb09 0a83 	add.w	sl, r9, r3, lsl #2
   2b5e8:	f1a8 0c04 	sub.w	ip, r8, #4
   2b5ec:	eb08 0e86 	add.w	lr, r8, r6, lsl #2
   2b5f0:	2300      	movs	r3, #0
   2b5f2:	9701      	str	r7, [sp, #4]
   2b5f4:	60c5      	str	r5, [r0, #12]
   2b5f6:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   2b5fa:	f854 2b04 	ldr.w	r2, [r4], #4
   2b5fe:	b28d      	uxth	r5, r1
   2b600:	fa1f fb82 	uxth.w	fp, r2
   2b604:	45a2      	cmp	sl, r4
   2b606:	441d      	add	r5, r3
   2b608:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2b60c:	eba5 050b 	sub.w	r5, r5, fp
   2b610:	ebc2 4311 	rsb	r3, r2, r1, lsr #16
   2b614:	b2a9      	uxth	r1, r5
   2b616:	eb03 4325 	add.w	r3, r3, r5, asr #16
   2b61a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2b61e:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b622:	f847 1b04 	str.w	r1, [r7], #4
   2b626:	d8e6      	bhi.n	2b5f6 <__mdiff+0x76>
   2b628:	ea6f 0209 	mvn.w	r2, r9
   2b62c:	f109 0901 	add.w	r9, r9, #1
   2b630:	9c01      	ldr	r4, [sp, #4]
   2b632:	4452      	add	r2, sl
   2b634:	45ca      	cmp	sl, r9
   2b636:	f022 0503 	bic.w	r5, r2, #3
   2b63a:	462a      	mov	r2, r5
   2b63c:	f105 0504 	add.w	r5, r5, #4
   2b640:	bf3c      	itt	cc
   2b642:	2504      	movcc	r5, #4
   2b644:	2200      	movcc	r2, #0
   2b646:	44a8      	add	r8, r5
   2b648:	4422      	add	r2, r4
   2b64a:	4425      	add	r5, r4
   2b64c:	45c6      	cmp	lr, r8
   2b64e:	d91a      	bls.n	2b686 <__mdiff+0x106>
   2b650:	462f      	mov	r7, r5
   2b652:	4644      	mov	r4, r8
   2b654:	f854 cb04 	ldr.w	ip, [r4], #4
   2b658:	fa1f f28c 	uxth.w	r2, ip
   2b65c:	45a6      	cmp	lr, r4
   2b65e:	4413      	add	r3, r2
   2b660:	ea4f 4223 	mov.w	r2, r3, asr #16
   2b664:	b299      	uxth	r1, r3
   2b666:	eb02 431c 	add.w	r3, r2, ip, lsr #16
   2b66a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2b66e:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b672:	f847 1b04 	str.w	r1, [r7], #4
   2b676:	d8ed      	bhi.n	2b654 <__mdiff+0xd4>
   2b678:	f10e 32ff 	add.w	r2, lr, #4294967295
   2b67c:	eba2 0808 	sub.w	r8, r2, r8
   2b680:	f028 0203 	bic.w	r2, r8, #3
   2b684:	442a      	add	r2, r5
   2b686:	b921      	cbnz	r1, 2b692 <__mdiff+0x112>
   2b688:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2b68c:	3e01      	subs	r6, #1
   2b68e:	2b00      	cmp	r3, #0
   2b690:	d0fa      	beq.n	2b688 <__mdiff+0x108>
   2b692:	6106      	str	r6, [r0, #16]
   2b694:	b003      	add	sp, #12
   2b696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b69a:	f101 0914 	add.w	r9, r1, #20
   2b69e:	f102 0814 	add.w	r8, r2, #20
   2b6a2:	4616      	mov	r6, r2
   2b6a4:	2501      	movs	r5, #1
   2b6a6:	460f      	mov	r7, r1
   2b6a8:	e794      	b.n	2b5d4 <__mdiff+0x54>
   2b6aa:	2100      	movs	r1, #0
   2b6ac:	f7ff fcd2 	bl	2b054 <_Balloc>
   2b6b0:	2201      	movs	r2, #1
   2b6b2:	2300      	movs	r3, #0
   2b6b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   2b6b8:	b003      	add	sp, #12
   2b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6be:	bf00      	nop

0002b6c0 <__ulp>:
   2b6c0:	b082      	sub	sp, #8
   2b6c2:	4b17      	ldr	r3, [pc, #92]	; (2b720 <__ulp+0x60>)
   2b6c4:	ed8d 0b00 	vstr	d0, [sp]
   2b6c8:	9a01      	ldr	r2, [sp, #4]
   2b6ca:	4013      	ands	r3, r2
   2b6cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   2b6d0:	2b00      	cmp	r3, #0
   2b6d2:	dd05      	ble.n	2b6e0 <__ulp+0x20>
   2b6d4:	2000      	movs	r0, #0
   2b6d6:	4619      	mov	r1, r3
   2b6d8:	ec41 0b10 	vmov	d0, r0, r1
   2b6dc:	b002      	add	sp, #8
   2b6de:	4770      	bx	lr
   2b6e0:	425b      	negs	r3, r3
   2b6e2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   2b6e6:	ea4f 5223 	mov.w	r2, r3, asr #20
   2b6ea:	da08      	bge.n	2b6fe <__ulp+0x3e>
   2b6ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2b6f0:	2000      	movs	r0, #0
   2b6f2:	fa43 f102 	asr.w	r1, r3, r2
   2b6f6:	ec41 0b10 	vmov	d0, r0, r1
   2b6fa:	b002      	add	sp, #8
   2b6fc:	4770      	bx	lr
   2b6fe:	3a14      	subs	r2, #20
   2b700:	2100      	movs	r1, #0
   2b702:	2a1e      	cmp	r2, #30
   2b704:	dc08      	bgt.n	2b718 <__ulp+0x58>
   2b706:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2b70a:	fa23 f202 	lsr.w	r2, r3, r2
   2b70e:	4610      	mov	r0, r2
   2b710:	ec41 0b10 	vmov	d0, r0, r1
   2b714:	b002      	add	sp, #8
   2b716:	4770      	bx	lr
   2b718:	2201      	movs	r2, #1
   2b71a:	4610      	mov	r0, r2
   2b71c:	e7f8      	b.n	2b710 <__ulp+0x50>
   2b71e:	bf00      	nop
   2b720:	7ff00000 	.word	0x7ff00000

0002b724 <__b2d>:
   2b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b726:	6904      	ldr	r4, [r0, #16]
   2b728:	f100 0614 	add.w	r6, r0, #20
   2b72c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   2b730:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2b734:	1f27      	subs	r7, r4, #4
   2b736:	4628      	mov	r0, r5
   2b738:	f7ff fd4e 	bl	2b1d8 <__hi0bits>
   2b73c:	f1c0 0320 	rsb	r3, r0, #32
   2b740:	280a      	cmp	r0, #10
   2b742:	600b      	str	r3, [r1, #0]
   2b744:	dd34      	ble.n	2b7b0 <__b2d+0x8c>
   2b746:	42be      	cmp	r6, r7
   2b748:	d21e      	bcs.n	2b788 <__b2d+0x64>
   2b74a:	380b      	subs	r0, #11
   2b74c:	f854 7c08 	ldr.w	r7, [r4, #-8]
   2b750:	d026      	beq.n	2b7a0 <__b2d+0x7c>
   2b752:	f1c0 0e20 	rsb	lr, r0, #32
   2b756:	fa05 fc00 	lsl.w	ip, r5, r0
   2b75a:	f1a4 0508 	sub.w	r5, r4, #8
   2b75e:	fa27 f10e 	lsr.w	r1, r7, lr
   2b762:	42ae      	cmp	r6, r5
   2b764:	ea4c 0c01 	orr.w	ip, ip, r1
   2b768:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
   2b76c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b770:	d236      	bcs.n	2b7e0 <__b2d+0xbc>
   2b772:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   2b776:	fa07 f000 	lsl.w	r0, r7, r0
   2b77a:	fa21 f10e 	lsr.w	r1, r1, lr
   2b77e:	4301      	orrs	r1, r0
   2b780:	460a      	mov	r2, r1
   2b782:	ec43 2b10 	vmov	d0, r2, r3
   2b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b788:	380b      	subs	r0, #11
   2b78a:	d008      	beq.n	2b79e <__b2d+0x7a>
   2b78c:	fa05 f000 	lsl.w	r0, r5, r0
   2b790:	2100      	movs	r1, #0
   2b792:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2b796:	460a      	mov	r2, r1
   2b798:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b79c:	e7f1      	b.n	2b782 <__b2d+0x5e>
   2b79e:	4607      	mov	r7, r0
   2b7a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   2b7a4:	463a      	mov	r2, r7
   2b7a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b7aa:	ec43 2b10 	vmov	d0, r2, r3
   2b7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b7b0:	f1c0 0c0b 	rsb	ip, r0, #11
   2b7b4:	42be      	cmp	r6, r7
   2b7b6:	fa25 f10c 	lsr.w	r1, r5, ip
   2b7ba:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   2b7be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b7c2:	d308      	bcc.n	2b7d6 <__b2d+0xb2>
   2b7c4:	2100      	movs	r1, #0
   2b7c6:	3015      	adds	r0, #21
   2b7c8:	fa05 f000 	lsl.w	r0, r5, r0
   2b7cc:	ea40 0201 	orr.w	r2, r0, r1
   2b7d0:	ec43 2b10 	vmov	d0, r2, r3
   2b7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b7d6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   2b7da:	fa21 f10c 	lsr.w	r1, r1, ip
   2b7de:	e7f2      	b.n	2b7c6 <__b2d+0xa2>
   2b7e0:	fa07 f100 	lsl.w	r1, r7, r0
   2b7e4:	460a      	mov	r2, r1
   2b7e6:	e7cc      	b.n	2b782 <__b2d+0x5e>

0002b7e8 <__d2b>:
   2b7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b7ec:	ec55 4b10 	vmov	r4, r5, d0
   2b7f0:	f3c5 590a 	ubfx	r9, r5, #20, #11
   2b7f4:	b083      	sub	sp, #12
   2b7f6:	4688      	mov	r8, r1
   2b7f8:	2101      	movs	r1, #1
   2b7fa:	4617      	mov	r7, r2
   2b7fc:	f7ff fc2a 	bl	2b054 <_Balloc>
   2b800:	f3c5 0313 	ubfx	r3, r5, #0, #20
   2b804:	4606      	mov	r6, r0
   2b806:	f1b9 0f00 	cmp.w	r9, #0
   2b80a:	d001      	beq.n	2b810 <__d2b+0x28>
   2b80c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2b810:	2c00      	cmp	r4, #0
   2b812:	9301      	str	r3, [sp, #4]
   2b814:	d01d      	beq.n	2b852 <__d2b+0x6a>
   2b816:	4668      	mov	r0, sp
   2b818:	9400      	str	r4, [sp, #0]
   2b81a:	f7ff fcff 	bl	2b21c <__lo0bits>
   2b81e:	2800      	cmp	r0, #0
   2b820:	d133      	bne.n	2b88a <__d2b+0xa2>
   2b822:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b826:	6172      	str	r2, [r6, #20]
   2b828:	2b00      	cmp	r3, #0
   2b82a:	61b3      	str	r3, [r6, #24]
   2b82c:	bf14      	ite	ne
   2b82e:	2202      	movne	r2, #2
   2b830:	2201      	moveq	r2, #1
   2b832:	6132      	str	r2, [r6, #16]
   2b834:	f1b9 0f00 	cmp.w	r9, #0
   2b838:	d017      	beq.n	2b86a <__d2b+0x82>
   2b83a:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
   2b83e:	f1c0 0235 	rsb	r2, r0, #53	; 0x35
   2b842:	4418      	add	r0, r3
   2b844:	f8c8 0000 	str.w	r0, [r8]
   2b848:	4630      	mov	r0, r6
   2b84a:	603a      	str	r2, [r7, #0]
   2b84c:	b003      	add	sp, #12
   2b84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b852:	a801      	add	r0, sp, #4
   2b854:	f7ff fce2 	bl	2b21c <__lo0bits>
   2b858:	2301      	movs	r3, #1
   2b85a:	9901      	ldr	r1, [sp, #4]
   2b85c:	3020      	adds	r0, #32
   2b85e:	461a      	mov	r2, r3
   2b860:	e9c6 3104 	strd	r3, r1, [r6, #16]
   2b864:	f1b9 0f00 	cmp.w	r9, #0
   2b868:	d1e7      	bne.n	2b83a <__d2b+0x52>
   2b86a:	eb06 0382 	add.w	r3, r6, r2, lsl #2
   2b86e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2b872:	f8c8 0000 	str.w	r0, [r8]
   2b876:	6918      	ldr	r0, [r3, #16]
   2b878:	f7ff fcae 	bl	2b1d8 <__hi0bits>
   2b87c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2b880:	6038      	str	r0, [r7, #0]
   2b882:	4630      	mov	r0, r6
   2b884:	b003      	add	sp, #12
   2b886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b88a:	9b01      	ldr	r3, [sp, #4]
   2b88c:	f1c0 0220 	rsb	r2, r0, #32
   2b890:	9900      	ldr	r1, [sp, #0]
   2b892:	fa03 f202 	lsl.w	r2, r3, r2
   2b896:	40c3      	lsrs	r3, r0
   2b898:	430a      	orrs	r2, r1
   2b89a:	9301      	str	r3, [sp, #4]
   2b89c:	6172      	str	r2, [r6, #20]
   2b89e:	e7c3      	b.n	2b828 <__d2b+0x40>

0002b8a0 <__ratio>:
   2b8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b8a4:	b083      	sub	sp, #12
   2b8a6:	460e      	mov	r6, r1
   2b8a8:	4607      	mov	r7, r0
   2b8aa:	4669      	mov	r1, sp
   2b8ac:	f7ff ff3a 	bl	2b724 <__b2d>
   2b8b0:	4630      	mov	r0, r6
   2b8b2:	a901      	add	r1, sp, #4
   2b8b4:	ec55 4b10 	vmov	r4, r5, d0
   2b8b8:	f7ff ff34 	bl	2b724 <__b2d>
   2b8bc:	693b      	ldr	r3, [r7, #16]
   2b8be:	6936      	ldr	r6, [r6, #16]
   2b8c0:	e9dd 2700 	ldrd	r2, r7, [sp]
   2b8c4:	1b9e      	subs	r6, r3, r6
   2b8c6:	1bd3      	subs	r3, r2, r7
   2b8c8:	eb03 1346 	add.w	r3, r3, r6, lsl #5
   2b8cc:	2b00      	cmp	r3, #0
   2b8ce:	ec57 6b10 	vmov	r6, r7, d0
   2b8d2:	dd0d      	ble.n	2b8f0 <__ratio+0x50>
   2b8d4:	eb05 5103 	add.w	r1, r5, r3, lsl #20
   2b8d8:	460d      	mov	r5, r1
   2b8da:	4632      	mov	r2, r6
   2b8dc:	463b      	mov	r3, r7
   2b8de:	4620      	mov	r0, r4
   2b8e0:	4629      	mov	r1, r5
   2b8e2:	f7e1 fbb1 	bl	d048 <__aeabi_ddiv>
   2b8e6:	ec41 0b10 	vmov	d0, r0, r1
   2b8ea:	b003      	add	sp, #12
   2b8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b8f0:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   2b8f4:	ee10 6a10 	vmov	r6, s0
   2b8f8:	eb07 5903 	add.w	r9, r7, r3, lsl #20
   2b8fc:	464f      	mov	r7, r9
   2b8fe:	e7ec      	b.n	2b8da <__ratio+0x3a>

0002b900 <__copybits>:
   2b900:	f102 0314 	add.w	r3, r2, #20
   2b904:	b470      	push	{r4, r5, r6}
   2b906:	1e4c      	subs	r4, r1, #1
   2b908:	6911      	ldr	r1, [r2, #16]
   2b90a:	1164      	asrs	r4, r4, #5
   2b90c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2b910:	3401      	adds	r4, #1
   2b912:	428b      	cmp	r3, r1
   2b914:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   2b918:	d20c      	bcs.n	2b934 <__copybits+0x34>
   2b91a:	1f05      	subs	r5, r0, #4
   2b91c:	f853 6b04 	ldr.w	r6, [r3], #4
   2b920:	4299      	cmp	r1, r3
   2b922:	f845 6f04 	str.w	r6, [r5, #4]!
   2b926:	d8f9      	bhi.n	2b91c <__copybits+0x1c>
   2b928:	1a8b      	subs	r3, r1, r2
   2b92a:	3b15      	subs	r3, #21
   2b92c:	f023 0303 	bic.w	r3, r3, #3
   2b930:	3304      	adds	r3, #4
   2b932:	4418      	add	r0, r3
   2b934:	4284      	cmp	r4, r0
   2b936:	d904      	bls.n	2b942 <__copybits+0x42>
   2b938:	2300      	movs	r3, #0
   2b93a:	f840 3b04 	str.w	r3, [r0], #4
   2b93e:	4284      	cmp	r4, r0
   2b940:	d8fb      	bhi.n	2b93a <__copybits+0x3a>
   2b942:	bc70      	pop	{r4, r5, r6}
   2b944:	4770      	bx	lr
   2b946:	bf00      	nop

0002b948 <__any_on>:
   2b948:	6903      	ldr	r3, [r0, #16]
   2b94a:	114a      	asrs	r2, r1, #5
   2b94c:	3014      	adds	r0, #20
   2b94e:	4293      	cmp	r3, r2
   2b950:	da09      	bge.n	2b966 <__any_on+0x1e>
   2b952:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2b956:	e002      	b.n	2b95e <__any_on+0x16>
   2b958:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2b95c:	b9ca      	cbnz	r2, 2b992 <__any_on+0x4a>
   2b95e:	4283      	cmp	r3, r0
   2b960:	d8fa      	bhi.n	2b958 <__any_on+0x10>
   2b962:	2000      	movs	r0, #0
   2b964:	4770      	bx	lr
   2b966:	dd11      	ble.n	2b98c <__any_on+0x44>
   2b968:	f011 011f 	ands.w	r1, r1, #31
   2b96c:	d00e      	beq.n	2b98c <__any_on+0x44>
   2b96e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2b972:	b410      	push	{r4}
   2b974:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2b978:	fa24 f201 	lsr.w	r2, r4, r1
   2b97c:	fa02 f101 	lsl.w	r1, r2, r1
   2b980:	428c      	cmp	r4, r1
   2b982:	d00c      	beq.n	2b99e <__any_on+0x56>
   2b984:	2001      	movs	r0, #1
   2b986:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b98a:	4770      	bx	lr
   2b98c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2b990:	e7e5      	b.n	2b95e <__any_on+0x16>
   2b992:	2001      	movs	r0, #1
   2b994:	4770      	bx	lr
   2b996:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2b99a:	2a00      	cmp	r2, #0
   2b99c:	d1f2      	bne.n	2b984 <__any_on+0x3c>
   2b99e:	4283      	cmp	r3, r0
   2b9a0:	d8f9      	bhi.n	2b996 <__any_on+0x4e>
   2b9a2:	2000      	movs	r0, #0
   2b9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b9a8:	4770      	bx	lr
   2b9aa:	bf00      	nop

0002b9ac <_read_r>:
   2b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b9ae:	460f      	mov	r7, r1
   2b9b0:	4d08      	ldr	r5, [pc, #32]	; (2b9d4 <_read_r+0x28>)
   2b9b2:	2600      	movs	r6, #0
   2b9b4:	4611      	mov	r1, r2
   2b9b6:	4604      	mov	r4, r0
   2b9b8:	461a      	mov	r2, r3
   2b9ba:	4638      	mov	r0, r7
   2b9bc:	602e      	str	r6, [r5, #0]
   2b9be:	f001 fb8e 	bl	2d0de <_read>
   2b9c2:	1c43      	adds	r3, r0, #1
   2b9c4:	d000      	beq.n	2b9c8 <_read_r+0x1c>
   2b9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b9c8:	682b      	ldr	r3, [r5, #0]
   2b9ca:	2b00      	cmp	r3, #0
   2b9cc:	d0fb      	beq.n	2b9c6 <_read_r+0x1a>
   2b9ce:	6023      	str	r3, [r4, #0]
   2b9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b9d2:	bf00      	nop
   2b9d4:	20026430 	.word	0x20026430

0002b9d8 <frexp>:
   2b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b9da:	ec53 2b10 	vmov	r2, r3, d0
   2b9de:	4f15      	ldr	r7, [pc, #84]	; (2ba34 <frexp+0x5c>)
   2b9e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   2b9e4:	2600      	movs	r6, #0
   2b9e6:	42b9      	cmp	r1, r7
   2b9e8:	6006      	str	r6, [r0, #0]
   2b9ea:	dc20      	bgt.n	2ba2e <frexp+0x56>
   2b9ec:	4604      	mov	r4, r0
   2b9ee:	ee10 0a10 	vmov	r0, s0
   2b9f2:	4308      	orrs	r0, r1
   2b9f4:	d01b      	beq.n	2ba2e <frexp+0x56>
   2b9f6:	4810      	ldr	r0, [pc, #64]	; (2ba38 <frexp+0x60>)
   2b9f8:	461d      	mov	r5, r3
   2b9fa:	4018      	ands	r0, r3
   2b9fc:	b960      	cbnz	r0, 2ba18 <frexp+0x40>
   2b9fe:	4619      	mov	r1, r3
   2ba00:	2200      	movs	r2, #0
   2ba02:	ee10 0a10 	vmov	r0, s0
   2ba06:	4b0d      	ldr	r3, [pc, #52]	; (2ba3c <frexp+0x64>)
   2ba08:	f7e1 f9f4 	bl	cdf4 <__aeabi_dmul>
   2ba0c:	f06f 0635 	mvn.w	r6, #53	; 0x35
   2ba10:	460d      	mov	r5, r1
   2ba12:	4602      	mov	r2, r0
   2ba14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2ba18:	4809      	ldr	r0, [pc, #36]	; (2ba40 <frexp+0x68>)
   2ba1a:	1509      	asrs	r1, r1, #20
   2ba1c:	4028      	ands	r0, r5
   2ba1e:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   2ba22:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2ba26:	4431      	add	r1, r6
   2ba28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2ba2c:	6021      	str	r1, [r4, #0]
   2ba2e:	ec43 2b10 	vmov	d0, r2, r3
   2ba32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ba34:	7fefffff 	.word	0x7fefffff
   2ba38:	7ff00000 	.word	0x7ff00000
   2ba3c:	43500000 	.word	0x43500000
   2ba40:	800fffff 	.word	0x800fffff

0002ba44 <__sccl>:
   2ba44:	b4f0      	push	{r4, r5, r6, r7}
   2ba46:	780c      	ldrb	r4, [r1, #0]
   2ba48:	2c5e      	cmp	r4, #94	; 0x5e
   2ba4a:	d023      	beq.n	2ba94 <__sccl+0x50>
   2ba4c:	2200      	movs	r2, #0
   2ba4e:	1c4e      	adds	r6, r1, #1
   2ba50:	4615      	mov	r5, r2
   2ba52:	1e43      	subs	r3, r0, #1
   2ba54:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   2ba58:	f803 2f01 	strb.w	r2, [r3, #1]!
   2ba5c:	428b      	cmp	r3, r1
   2ba5e:	d1fb      	bne.n	2ba58 <__sccl+0x14>
   2ba60:	b1a4      	cbz	r4, 2ba8c <__sccl+0x48>
   2ba62:	f085 0201 	eor.w	r2, r5, #1
   2ba66:	ea6f 0c00 	mvn.w	ip, r0
   2ba6a:	1c71      	adds	r1, r6, #1
   2ba6c:	5502      	strb	r2, [r0, r4]
   2ba6e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   2ba72:	1e4d      	subs	r5, r1, #1
   2ba74:	460e      	mov	r6, r1
   2ba76:	2b2d      	cmp	r3, #45	; 0x2d
   2ba78:	d011      	beq.n	2ba9e <__sccl+0x5a>
   2ba7a:	2b5d      	cmp	r3, #93	; 0x5d
   2ba7c:	d003      	beq.n	2ba86 <__sccl+0x42>
   2ba7e:	b10b      	cbz	r3, 2ba84 <__sccl+0x40>
   2ba80:	461c      	mov	r4, r3
   2ba82:	e7f2      	b.n	2ba6a <__sccl+0x26>
   2ba84:	462e      	mov	r6, r5
   2ba86:	4630      	mov	r0, r6
   2ba88:	bcf0      	pop	{r4, r5, r6, r7}
   2ba8a:	4770      	bx	lr
   2ba8c:	3e01      	subs	r6, #1
   2ba8e:	4630      	mov	r0, r6
   2ba90:	bcf0      	pop	{r4, r5, r6, r7}
   2ba92:	4770      	bx	lr
   2ba94:	2201      	movs	r2, #1
   2ba96:	1c8e      	adds	r6, r1, #2
   2ba98:	784c      	ldrb	r4, [r1, #1]
   2ba9a:	4615      	mov	r5, r2
   2ba9c:	e7d9      	b.n	2ba52 <__sccl+0xe>
   2ba9e:	780f      	ldrb	r7, [r1, #0]
   2baa0:	2f5d      	cmp	r7, #93	; 0x5d
   2baa2:	d011      	beq.n	2bac8 <__sccl+0x84>
   2baa4:	42bc      	cmp	r4, r7
   2baa6:	dc0f      	bgt.n	2bac8 <__sccl+0x84>
   2baa8:	1c66      	adds	r6, r4, #1
   2baaa:	1983      	adds	r3, r0, r6
   2baac:	f803 2b01 	strb.w	r2, [r3], #1
   2bab0:	eb0c 0503 	add.w	r5, ip, r3
   2bab4:	42af      	cmp	r7, r5
   2bab6:	dcf9      	bgt.n	2baac <__sccl+0x68>
   2bab8:	43e3      	mvns	r3, r4
   2baba:	3102      	adds	r1, #2
   2babc:	443b      	add	r3, r7
   2babe:	42bc      	cmp	r4, r7
   2bac0:	bfa8      	it	ge
   2bac2:	2300      	movge	r3, #0
   2bac4:	199c      	adds	r4, r3, r6
   2bac6:	e7d2      	b.n	2ba6e <__sccl+0x2a>
   2bac8:	242d      	movs	r4, #45	; 0x2d
   2baca:	e7ce      	b.n	2ba6a <__sccl+0x26>

0002bacc <nanf>:
   2bacc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2bad4 <nanf+0x8>
   2bad0:	4770      	bx	lr
   2bad2:	bf00      	nop
   2bad4:	7fc00000 	.word	0x7fc00000

0002bad8 <_raise_r>:
   2bad8:	291f      	cmp	r1, #31
   2bada:	b538      	push	{r3, r4, r5, lr}
   2badc:	4605      	mov	r5, r0
   2bade:	d821      	bhi.n	2bb24 <_raise_r+0x4c>
   2bae0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   2bae4:	460c      	mov	r4, r1
   2bae6:	b16a      	cbz	r2, 2bb04 <_raise_r+0x2c>
   2bae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2baec:	b153      	cbz	r3, 2bb04 <_raise_r+0x2c>
   2baee:	2b01      	cmp	r3, #1
   2baf0:	d016      	beq.n	2bb20 <_raise_r+0x48>
   2baf2:	1c59      	adds	r1, r3, #1
   2baf4:	d010      	beq.n	2bb18 <_raise_r+0x40>
   2baf6:	2500      	movs	r5, #0
   2baf8:	4620      	mov	r0, r4
   2bafa:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   2bafe:	4798      	blx	r3
   2bb00:	4628      	mov	r0, r5
   2bb02:	bd38      	pop	{r3, r4, r5, pc}
   2bb04:	4628      	mov	r0, r5
   2bb06:	f000 f831 	bl	2bb6c <_getpid_r>
   2bb0a:	4622      	mov	r2, r4
   2bb0c:	4601      	mov	r1, r0
   2bb0e:	4628      	mov	r0, r5
   2bb10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bb14:	f000 b814 	b.w	2bb40 <_kill_r>
   2bb18:	2316      	movs	r3, #22
   2bb1a:	2001      	movs	r0, #1
   2bb1c:	602b      	str	r3, [r5, #0]
   2bb1e:	bd38      	pop	{r3, r4, r5, pc}
   2bb20:	2000      	movs	r0, #0
   2bb22:	bd38      	pop	{r3, r4, r5, pc}
   2bb24:	2316      	movs	r3, #22
   2bb26:	f04f 30ff 	mov.w	r0, #4294967295
   2bb2a:	602b      	str	r3, [r5, #0]
   2bb2c:	bd38      	pop	{r3, r4, r5, pc}
   2bb2e:	bf00      	nop

0002bb30 <raise>:
   2bb30:	4b02      	ldr	r3, [pc, #8]	; (2bb3c <raise+0xc>)
   2bb32:	4601      	mov	r1, r0
   2bb34:	6818      	ldr	r0, [r3, #0]
   2bb36:	f7ff bfcf 	b.w	2bad8 <_raise_r>
   2bb3a:	bf00      	nop
   2bb3c:	200204d8 	.word	0x200204d8

0002bb40 <_kill_r>:
   2bb40:	b570      	push	{r4, r5, r6, lr}
   2bb42:	460c      	mov	r4, r1
   2bb44:	4603      	mov	r3, r0
   2bb46:	4d08      	ldr	r5, [pc, #32]	; (2bb68 <_kill_r+0x28>)
   2bb48:	2600      	movs	r6, #0
   2bb4a:	4620      	mov	r0, r4
   2bb4c:	4611      	mov	r1, r2
   2bb4e:	461c      	mov	r4, r3
   2bb50:	602e      	str	r6, [r5, #0]
   2bb52:	f001 fad3 	bl	2d0fc <_kill>
   2bb56:	1c43      	adds	r3, r0, #1
   2bb58:	d000      	beq.n	2bb5c <_kill_r+0x1c>
   2bb5a:	bd70      	pop	{r4, r5, r6, pc}
   2bb5c:	682b      	ldr	r3, [r5, #0]
   2bb5e:	2b00      	cmp	r3, #0
   2bb60:	d0fb      	beq.n	2bb5a <_kill_r+0x1a>
   2bb62:	6023      	str	r3, [r4, #0]
   2bb64:	bd70      	pop	{r4, r5, r6, pc}
   2bb66:	bf00      	nop
   2bb68:	20026430 	.word	0x20026430

0002bb6c <_getpid_r>:
   2bb6c:	f001 bac8 	b.w	2d100 <_getpid>

0002bb70 <sprintf>:
   2bb70:	b40e      	push	{r1, r2, r3}
   2bb72:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bb74:	b09c      	sub	sp, #112	; 0x70
   2bb76:	4f0d      	ldr	r7, [pc, #52]	; (2bbac <sprintf+0x3c>)
   2bb78:	4604      	mov	r4, r0
   2bb7a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2bb7e:	ab21      	add	r3, sp, #132	; 0x84
   2bb80:	4e0b      	ldr	r6, [pc, #44]	; (2bbb0 <sprintf+0x40>)
   2bb82:	a902      	add	r1, sp, #8
   2bb84:	6838      	ldr	r0, [r7, #0]
   2bb86:	f853 2b04 	ldr.w	r2, [r3], #4
   2bb8a:	9402      	str	r4, [sp, #8]
   2bb8c:	9301      	str	r3, [sp, #4]
   2bb8e:	9406      	str	r4, [sp, #24]
   2bb90:	9507      	str	r5, [sp, #28]
   2bb92:	e9cd 5604 	strd	r5, r6, [sp, #16]
   2bb96:	f7e2 fe8f 	bl	e8b8 <_svfprintf_r>
   2bb9a:	9b02      	ldr	r3, [sp, #8]
   2bb9c:	2200      	movs	r2, #0
   2bb9e:	701a      	strb	r2, [r3, #0]
   2bba0:	b01c      	add	sp, #112	; 0x70
   2bba2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2bba6:	b003      	add	sp, #12
   2bba8:	4770      	bx	lr
   2bbaa:	bf00      	nop
   2bbac:	200204d8 	.word	0x200204d8
   2bbb0:	ffff0208 	.word	0xffff0208

0002bbb4 <strnlen>:
   2bbb4:	b191      	cbz	r1, 2bbdc <strnlen+0x28>
   2bbb6:	4603      	mov	r3, r0
   2bbb8:	b410      	push	{r4}
   2bbba:	1844      	adds	r4, r0, r1
   2bbbc:	e001      	b.n	2bbc2 <strnlen+0xe>
   2bbbe:	42a3      	cmp	r3, r4
   2bbc0:	d008      	beq.n	2bbd4 <strnlen+0x20>
   2bbc2:	461a      	mov	r2, r3
   2bbc4:	3301      	adds	r3, #1
   2bbc6:	7811      	ldrb	r1, [r2, #0]
   2bbc8:	2900      	cmp	r1, #0
   2bbca:	d1f8      	bne.n	2bbbe <strnlen+0xa>
   2bbcc:	1a10      	subs	r0, r2, r0
   2bbce:	f85d 4b04 	ldr.w	r4, [sp], #4
   2bbd2:	4770      	bx	lr
   2bbd4:	1a18      	subs	r0, r3, r0
   2bbd6:	f85d 4b04 	ldr.w	r4, [sp], #4
   2bbda:	4770      	bx	lr
   2bbdc:	4608      	mov	r0, r1
   2bbde:	4770      	bx	lr

0002bbe0 <_strtoll_l.isra.0>:
   2bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bbe4:	b087      	sub	sp, #28
   2bbe6:	4698      	mov	r8, r3
   2bbe8:	460d      	mov	r5, r1
   2bbea:	9201      	str	r2, [sp, #4]
   2bbec:	4a55      	ldr	r2, [pc, #340]	; (2bd44 <_strtoll_l.isra.0+0x164>)
   2bbee:	9103      	str	r1, [sp, #12]
   2bbf0:	9005      	str	r0, [sp, #20]
   2bbf2:	4629      	mov	r1, r5
   2bbf4:	f815 4b01 	ldrb.w	r4, [r5], #1
   2bbf8:	5d13      	ldrb	r3, [r2, r4]
   2bbfa:	f013 0308 	ands.w	r3, r3, #8
   2bbfe:	d1f8      	bne.n	2bbf2 <_strtoll_l.isra.0+0x12>
   2bc00:	2c2d      	cmp	r4, #45	; 0x2d
   2bc02:	d079      	beq.n	2bcf8 <_strtoll_l.isra.0+0x118>
   2bc04:	2c2b      	cmp	r4, #43	; 0x2b
   2bc06:	d012      	beq.n	2bc2e <_strtoll_l.isra.0+0x4e>
   2bc08:	9304      	str	r3, [sp, #16]
   2bc0a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2bc0e:	f04f 33ff 	mov.w	r3, #4294967295
   2bc12:	9302      	str	r3, [sp, #8]
   2bc14:	f038 0310 	bics.w	r3, r8, #16
   2bc18:	d115      	bne.n	2bc46 <_strtoll_l.isra.0+0x66>
   2bc1a:	2c30      	cmp	r4, #48	; 0x30
   2bc1c:	d075      	beq.n	2bd0a <_strtoll_l.isra.0+0x12a>
   2bc1e:	f1b8 0f00 	cmp.w	r8, #0
   2bc22:	d110      	bne.n	2bc46 <_strtoll_l.isra.0+0x66>
   2bc24:	260a      	movs	r6, #10
   2bc26:	2700      	movs	r7, #0
   2bc28:	f04f 080a 	mov.w	r8, #10
   2bc2c:	e00d      	b.n	2bc4a <_strtoll_l.isra.0+0x6a>
   2bc2e:	9304      	str	r3, [sp, #16]
   2bc30:	f04f 33ff 	mov.w	r3, #4294967295
   2bc34:	782c      	ldrb	r4, [r5, #0]
   2bc36:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2bc3a:	9302      	str	r3, [sp, #8]
   2bc3c:	f038 0310 	bics.w	r3, r8, #16
   2bc40:	f101 0502 	add.w	r5, r1, #2
   2bc44:	d0e9      	beq.n	2bc1a <_strtoll_l.isra.0+0x3a>
   2bc46:	4646      	mov	r6, r8
   2bc48:	17f7      	asrs	r7, r6, #31
   2bc4a:	4632      	mov	r2, r6
   2bc4c:	463b      	mov	r3, r7
   2bc4e:	9802      	ldr	r0, [sp, #8]
   2bc50:	4649      	mov	r1, r9
   2bc52:	f7e0 fe01 	bl	c858 <__aeabi_uldivmod>
   2bc56:	468c      	mov	ip, r1
   2bc58:	4682      	mov	sl, r0
   2bc5a:	2300      	movs	r3, #0
   2bc5c:	46e3      	mov	fp, ip
   2bc5e:	2000      	movs	r0, #0
   2bc60:	2100      	movs	r1, #0
   2bc62:	46a4      	mov	ip, r4
   2bc64:	e010      	b.n	2bc88 <_strtoll_l.isra.0+0xa8>
   2bc66:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   2bc6a:	45a0      	cmp	r8, r4
   2bc6c:	dd1c      	ble.n	2bca8 <_strtoll_l.isra.0+0xc8>
   2bc6e:	2b00      	cmp	r3, #0
   2bc70:	db06      	blt.n	2bc80 <_strtoll_l.isra.0+0xa0>
   2bc72:	458b      	cmp	fp, r1
   2bc74:	bf08      	it	eq
   2bc76:	4582      	cmpeq	sl, r0
   2bc78:	d302      	bcc.n	2bc80 <_strtoll_l.isra.0+0xa0>
   2bc7a:	d127      	bne.n	2bccc <_strtoll_l.isra.0+0xec>
   2bc7c:	42a2      	cmp	r2, r4
   2bc7e:	da25      	bge.n	2bccc <_strtoll_l.isra.0+0xec>
   2bc80:	f04f 33ff 	mov.w	r3, #4294967295
   2bc84:	f815 cb01 	ldrb.w	ip, [r5], #1
   2bc88:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   2bc8c:	2c09      	cmp	r4, #9
   2bc8e:	d9ec      	bls.n	2bc6a <_strtoll_l.isra.0+0x8a>
   2bc90:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   2bc94:	2c19      	cmp	r4, #25
   2bc96:	d9e6      	bls.n	2bc66 <_strtoll_l.isra.0+0x86>
   2bc98:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   2bc9c:	2c19      	cmp	r4, #25
   2bc9e:	d803      	bhi.n	2bca8 <_strtoll_l.isra.0+0xc8>
   2bca0:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   2bca4:	45a0      	cmp	r8, r4
   2bca6:	dce2      	bgt.n	2bc6e <_strtoll_l.isra.0+0x8e>
   2bca8:	1c5a      	adds	r2, r3, #1
   2bcaa:	d01b      	beq.n	2bce4 <_strtoll_l.isra.0+0x104>
   2bcac:	9a04      	ldr	r2, [sp, #16]
   2bcae:	b112      	cbz	r2, 2bcb6 <_strtoll_l.isra.0+0xd6>
   2bcb0:	4240      	negs	r0, r0
   2bcb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2bcb6:	9a01      	ldr	r2, [sp, #4]
   2bcb8:	b12a      	cbz	r2, 2bcc6 <_strtoll_l.isra.0+0xe6>
   2bcba:	2b00      	cmp	r3, #0
   2bcbc:	d13e      	bne.n	2bd3c <_strtoll_l.isra.0+0x15c>
   2bcbe:	9b01      	ldr	r3, [sp, #4]
   2bcc0:	461a      	mov	r2, r3
   2bcc2:	9b03      	ldr	r3, [sp, #12]
   2bcc4:	6013      	str	r3, [r2, #0]
   2bcc6:	b007      	add	sp, #28
   2bcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bccc:	fb00 fc07 	mul.w	ip, r0, r7
   2bcd0:	2301      	movs	r3, #1
   2bcd2:	fb06 cc01 	mla	ip, r6, r1, ip
   2bcd6:	fba0 0106 	umull	r0, r1, r0, r6
   2bcda:	4461      	add	r1, ip
   2bcdc:	1900      	adds	r0, r0, r4
   2bcde:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2bce2:	e7cf      	b.n	2bc84 <_strtoll_l.isra.0+0xa4>
   2bce4:	2322      	movs	r3, #34	; 0x22
   2bce6:	9a05      	ldr	r2, [sp, #20]
   2bce8:	6013      	str	r3, [r2, #0]
   2bcea:	9b01      	ldr	r3, [sp, #4]
   2bcec:	b1cb      	cbz	r3, 2bd22 <_strtoll_l.isra.0+0x142>
   2bcee:	1e6b      	subs	r3, r5, #1
   2bcf0:	9802      	ldr	r0, [sp, #8]
   2bcf2:	4649      	mov	r1, r9
   2bcf4:	9303      	str	r3, [sp, #12]
   2bcf6:	e7e2      	b.n	2bcbe <_strtoll_l.isra.0+0xde>
   2bcf8:	2300      	movs	r3, #0
   2bcfa:	782c      	ldrb	r4, [r5, #0]
   2bcfc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   2bd00:	1c8d      	adds	r5, r1, #2
   2bd02:	9302      	str	r3, [sp, #8]
   2bd04:	2301      	movs	r3, #1
   2bd06:	9304      	str	r3, [sp, #16]
   2bd08:	e784      	b.n	2bc14 <_strtoll_l.isra.0+0x34>
   2bd0a:	782b      	ldrb	r3, [r5, #0]
   2bd0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2bd10:	2b58      	cmp	r3, #88	; 0x58
   2bd12:	d10b      	bne.n	2bd2c <_strtoll_l.isra.0+0x14c>
   2bd14:	786c      	ldrb	r4, [r5, #1]
   2bd16:	2610      	movs	r6, #16
   2bd18:	2700      	movs	r7, #0
   2bd1a:	3502      	adds	r5, #2
   2bd1c:	f04f 0810 	mov.w	r8, #16
   2bd20:	e793      	b.n	2bc4a <_strtoll_l.isra.0+0x6a>
   2bd22:	9802      	ldr	r0, [sp, #8]
   2bd24:	4649      	mov	r1, r9
   2bd26:	b007      	add	sp, #28
   2bd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd2c:	f1b8 0f00 	cmp.w	r8, #0
   2bd30:	d189      	bne.n	2bc46 <_strtoll_l.isra.0+0x66>
   2bd32:	2608      	movs	r6, #8
   2bd34:	2700      	movs	r7, #0
   2bd36:	f04f 0808 	mov.w	r8, #8
   2bd3a:	e786      	b.n	2bc4a <_strtoll_l.isra.0+0x6a>
   2bd3c:	4689      	mov	r9, r1
   2bd3e:	9002      	str	r0, [sp, #8]
   2bd40:	e7d5      	b.n	2bcee <_strtoll_l.isra.0+0x10e>
   2bd42:	bf00      	nop
   2bd44:	0002f9a1 	.word	0x0002f9a1

0002bd48 <_strtoll_r>:
   2bd48:	f7ff bf4a 	b.w	2bbe0 <_strtoll_l.isra.0>

0002bd4c <_strtoull_l.isra.0>:
   2bd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd50:	b085      	sub	sp, #20
   2bd52:	468b      	mov	fp, r1
   2bd54:	469a      	mov	sl, r3
   2bd56:	460d      	mov	r5, r1
   2bd58:	9201      	str	r2, [sp, #4]
   2bd5a:	4a5d      	ldr	r2, [pc, #372]	; (2bed0 <_strtoull_l.isra.0+0x184>)
   2bd5c:	9003      	str	r0, [sp, #12]
   2bd5e:	4629      	mov	r1, r5
   2bd60:	f815 4b01 	ldrb.w	r4, [r5], #1
   2bd64:	5d13      	ldrb	r3, [r2, r4]
   2bd66:	f013 0308 	ands.w	r3, r3, #8
   2bd6a:	d1f8      	bne.n	2bd5e <_strtoull_l.isra.0+0x12>
   2bd6c:	2c2d      	cmp	r4, #45	; 0x2d
   2bd6e:	f000 8086 	beq.w	2be7e <_strtoull_l.isra.0+0x132>
   2bd72:	2c2b      	cmp	r4, #43	; 0x2b
   2bd74:	d014      	beq.n	2bda0 <_strtoull_l.isra.0+0x54>
   2bd76:	9302      	str	r3, [sp, #8]
   2bd78:	f03a 0310 	bics.w	r3, sl, #16
   2bd7c:	d117      	bne.n	2bdae <_strtoull_l.isra.0+0x62>
   2bd7e:	2c30      	cmp	r4, #48	; 0x30
   2bd80:	f000 8082 	beq.w	2be88 <_strtoull_l.isra.0+0x13c>
   2bd84:	f1ba 0f00 	cmp.w	sl, #0
   2bd88:	d111      	bne.n	2bdae <_strtoull_l.isra.0+0x62>
   2bd8a:	2205      	movs	r2, #5
   2bd8c:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   2bd90:	4f50      	ldr	r7, [pc, #320]	; (2bed4 <_strtoull_l.isra.0+0x188>)
   2bd92:	f04f 080a 	mov.w	r8, #10
   2bd96:	f04f 0900 	mov.w	r9, #0
   2bd9a:	f04f 0a0a 	mov.w	sl, #10
   2bd9e:	e01c      	b.n	2bdda <_strtoull_l.isra.0+0x8e>
   2bda0:	9302      	str	r3, [sp, #8]
   2bda2:	f03a 0310 	bics.w	r3, sl, #16
   2bda6:	782c      	ldrb	r4, [r5, #0]
   2bda8:	f101 0502 	add.w	r5, r1, #2
   2bdac:	d0e7      	beq.n	2bd7e <_strtoull_l.isra.0+0x32>
   2bdae:	ea4f 79ea 	mov.w	r9, sl, asr #31
   2bdb2:	4652      	mov	r2, sl
   2bdb4:	f04f 30ff 	mov.w	r0, #4294967295
   2bdb8:	f04f 31ff 	mov.w	r1, #4294967295
   2bdbc:	464b      	mov	r3, r9
   2bdbe:	46d0      	mov	r8, sl
   2bdc0:	f7e0 fd4a 	bl	c858 <__aeabi_uldivmod>
   2bdc4:	468c      	mov	ip, r1
   2bdc6:	4606      	mov	r6, r0
   2bdc8:	4652      	mov	r2, sl
   2bdca:	464b      	mov	r3, r9
   2bdcc:	f04f 30ff 	mov.w	r0, #4294967295
   2bdd0:	f04f 31ff 	mov.w	r1, #4294967295
   2bdd4:	4667      	mov	r7, ip
   2bdd6:	f7e0 fd3f 	bl	c858 <__aeabi_uldivmod>
   2bdda:	2300      	movs	r3, #0
   2bddc:	2000      	movs	r0, #0
   2bdde:	2100      	movs	r1, #0
   2bde0:	46a4      	mov	ip, r4
   2bde2:	e013      	b.n	2be0c <_strtoull_l.isra.0+0xc0>
   2bde4:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   2bde8:	45a2      	cmp	sl, r4
   2bdea:	dd1f      	ble.n	2be2c <_strtoull_l.isra.0+0xe0>
   2bdec:	2b00      	cmp	r3, #0
   2bdee:	db09      	blt.n	2be04 <_strtoull_l.isra.0+0xb8>
   2bdf0:	428f      	cmp	r7, r1
   2bdf2:	bf08      	it	eq
   2bdf4:	4286      	cmpeq	r6, r0
   2bdf6:	d305      	bcc.n	2be04 <_strtoull_l.isra.0+0xb8>
   2bdf8:	42b9      	cmp	r1, r7
   2bdfa:	bf08      	it	eq
   2bdfc:	42b0      	cmpeq	r0, r6
   2bdfe:	d125      	bne.n	2be4c <_strtoull_l.isra.0+0x100>
   2be00:	4294      	cmp	r4, r2
   2be02:	dd23      	ble.n	2be4c <_strtoull_l.isra.0+0x100>
   2be04:	f04f 33ff 	mov.w	r3, #4294967295
   2be08:	f815 cb01 	ldrb.w	ip, [r5], #1
   2be0c:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   2be10:	2c09      	cmp	r4, #9
   2be12:	d9e9      	bls.n	2bde8 <_strtoull_l.isra.0+0x9c>
   2be14:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   2be18:	2c19      	cmp	r4, #25
   2be1a:	d9e3      	bls.n	2bde4 <_strtoull_l.isra.0+0x98>
   2be1c:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   2be20:	2c19      	cmp	r4, #25
   2be22:	d803      	bhi.n	2be2c <_strtoull_l.isra.0+0xe0>
   2be24:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   2be28:	45a2      	cmp	sl, r4
   2be2a:	dcdf      	bgt.n	2bdec <_strtoull_l.isra.0+0xa0>
   2be2c:	1c5a      	adds	r2, r3, #1
   2be2e:	d019      	beq.n	2be64 <_strtoull_l.isra.0+0x118>
   2be30:	9a02      	ldr	r2, [sp, #8]
   2be32:	b112      	cbz	r2, 2be3a <_strtoull_l.isra.0+0xee>
   2be34:	4240      	negs	r0, r0
   2be36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2be3a:	9a01      	ldr	r2, [sp, #4]
   2be3c:	b11a      	cbz	r2, 2be46 <_strtoull_l.isra.0+0xfa>
   2be3e:	b9db      	cbnz	r3, 2be78 <_strtoull_l.isra.0+0x12c>
   2be40:	9b01      	ldr	r3, [sp, #4]
   2be42:	f8c3 b000 	str.w	fp, [r3]
   2be46:	b005      	add	sp, #20
   2be48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be4c:	fb00 fc09 	mul.w	ip, r0, r9
   2be50:	2301      	movs	r3, #1
   2be52:	fb08 cc01 	mla	ip, r8, r1, ip
   2be56:	fba0 0108 	umull	r0, r1, r0, r8
   2be5a:	4461      	add	r1, ip
   2be5c:	1900      	adds	r0, r0, r4
   2be5e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2be62:	e7d1      	b.n	2be08 <_strtoull_l.isra.0+0xbc>
   2be64:	2322      	movs	r3, #34	; 0x22
   2be66:	9a03      	ldr	r2, [sp, #12]
   2be68:	f04f 30ff 	mov.w	r0, #4294967295
   2be6c:	f04f 31ff 	mov.w	r1, #4294967295
   2be70:	6013      	str	r3, [r2, #0]
   2be72:	9b01      	ldr	r3, [sp, #4]
   2be74:	2b00      	cmp	r3, #0
   2be76:	d0e6      	beq.n	2be46 <_strtoull_l.isra.0+0xfa>
   2be78:	f105 3bff 	add.w	fp, r5, #4294967295
   2be7c:	e7e0      	b.n	2be40 <_strtoull_l.isra.0+0xf4>
   2be7e:	2301      	movs	r3, #1
   2be80:	782c      	ldrb	r4, [r5, #0]
   2be82:	1c8d      	adds	r5, r1, #2
   2be84:	9302      	str	r3, [sp, #8]
   2be86:	e777      	b.n	2bd78 <_strtoull_l.isra.0+0x2c>
   2be88:	782b      	ldrb	r3, [r5, #0]
   2be8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2be8e:	2b58      	cmp	r3, #88	; 0x58
   2be90:	d10d      	bne.n	2beae <_strtoull_l.isra.0+0x162>
   2be92:	786c      	ldrb	r4, [r5, #1]
   2be94:	220f      	movs	r2, #15
   2be96:	3502      	adds	r5, #2
   2be98:	f04f 36ff 	mov.w	r6, #4294967295
   2be9c:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   2bea0:	f04f 0810 	mov.w	r8, #16
   2bea4:	f04f 0900 	mov.w	r9, #0
   2bea8:	f04f 0a10 	mov.w	sl, #16
   2beac:	e795      	b.n	2bdda <_strtoull_l.isra.0+0x8e>
   2beae:	f1ba 0f00 	cmp.w	sl, #0
   2beb2:	f47f af7c 	bne.w	2bdae <_strtoull_l.isra.0+0x62>
   2beb6:	2207      	movs	r2, #7
   2beb8:	f04f 36ff 	mov.w	r6, #4294967295
   2bebc:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   2bec0:	f04f 0808 	mov.w	r8, #8
   2bec4:	f04f 0900 	mov.w	r9, #0
   2bec8:	f04f 0a08 	mov.w	sl, #8
   2becc:	e785      	b.n	2bdda <_strtoull_l.isra.0+0x8e>
   2bece:	bf00      	nop
   2bed0:	0002f9a1 	.word	0x0002f9a1
   2bed4:	19999999 	.word	0x19999999

0002bed8 <_strtoull_r>:
   2bed8:	f7ff bf38 	b.w	2bd4c <_strtoull_l.isra.0>

0002bedc <__ssprint_r>:
   2bedc:	6893      	ldr	r3, [r2, #8]
   2bede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bee2:	4691      	mov	r9, r2
   2bee4:	b083      	sub	sp, #12
   2bee6:	2b00      	cmp	r3, #0
   2bee8:	d076      	beq.n	2bfd8 <__ssprint_r+0xfc>
   2beea:	6817      	ldr	r7, [r2, #0]
   2beec:	4680      	mov	r8, r0
   2beee:	460c      	mov	r4, r1
   2bef0:	6808      	ldr	r0, [r1, #0]
   2bef2:	3708      	adds	r7, #8
   2bef4:	688d      	ldr	r5, [r1, #8]
   2bef6:	e04b      	b.n	2bf90 <__ssprint_r+0xb4>
   2bef8:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   2befc:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   2bf00:	d034      	beq.n	2bf6c <__ssprint_r+0x90>
   2bf02:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2bf06:	eb12 0242 	adds.w	r2, r2, r2, lsl #1
   2bf0a:	eba0 0501 	sub.w	r5, r0, r1
   2bf0e:	bf48      	it	mi
   2bf10:	3201      	addmi	r2, #1
   2bf12:	19a8      	adds	r0, r5, r6
   2bf14:	ea4f 0b62 	mov.w	fp, r2, asr #1
   2bf18:	3001      	adds	r0, #1
   2bf1a:	4558      	cmp	r0, fp
   2bf1c:	465a      	mov	r2, fp
   2bf1e:	d901      	bls.n	2bf24 <__ssprint_r+0x48>
   2bf20:	4683      	mov	fp, r0
   2bf22:	4602      	mov	r2, r0
   2bf24:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   2bf28:	9301      	str	r3, [sp, #4]
   2bf2a:	d03b      	beq.n	2bfa4 <__ssprint_r+0xc8>
   2bf2c:	4611      	mov	r1, r2
   2bf2e:	4640      	mov	r0, r8
   2bf30:	f7f9 ff48 	bl	25dc4 <_malloc_r>
   2bf34:	9b01      	ldr	r3, [sp, #4]
   2bf36:	4682      	mov	sl, r0
   2bf38:	2800      	cmp	r0, #0
   2bf3a:	d03e      	beq.n	2bfba <__ssprint_r+0xde>
   2bf3c:	462a      	mov	r2, r5
   2bf3e:	6921      	ldr	r1, [r4, #16]
   2bf40:	9301      	str	r3, [sp, #4]
   2bf42:	f7e0 fe03 	bl	cb4c <memcpy>
   2bf46:	89a2      	ldrh	r2, [r4, #12]
   2bf48:	9b01      	ldr	r3, [sp, #4]
   2bf4a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2bf4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2bf52:	81a2      	strh	r2, [r4, #12]
   2bf54:	eb0a 0005 	add.w	r0, sl, r5
   2bf58:	ebab 0205 	sub.w	r2, fp, r5
   2bf5c:	f8c4 a010 	str.w	sl, [r4, #16]
   2bf60:	4635      	mov	r5, r6
   2bf62:	46b2      	mov	sl, r6
   2bf64:	6020      	str	r0, [r4, #0]
   2bf66:	60a2      	str	r2, [r4, #8]
   2bf68:	f8c4 b014 	str.w	fp, [r4, #20]
   2bf6c:	4619      	mov	r1, r3
   2bf6e:	4652      	mov	r2, sl
   2bf70:	f7ff f806 	bl	2af80 <memmove>
   2bf74:	68a0      	ldr	r0, [r4, #8]
   2bf76:	f8d9 1008 	ldr.w	r1, [r9, #8]
   2bf7a:	6823      	ldr	r3, [r4, #0]
   2bf7c:	1b45      	subs	r5, r0, r5
   2bf7e:	1b8e      	subs	r6, r1, r6
   2bf80:	eb03 000a 	add.w	r0, r3, sl
   2bf84:	60a5      	str	r5, [r4, #8]
   2bf86:	6020      	str	r0, [r4, #0]
   2bf88:	f8c9 6008 	str.w	r6, [r9, #8]
   2bf8c:	b326      	cbz	r6, 2bfd8 <__ssprint_r+0xfc>
   2bf8e:	3708      	adds	r7, #8
   2bf90:	e957 3602 	ldrd	r3, r6, [r7, #-8]
   2bf94:	2e00      	cmp	r6, #0
   2bf96:	d0fa      	beq.n	2bf8e <__ssprint_r+0xb2>
   2bf98:	42b5      	cmp	r5, r6
   2bf9a:	46aa      	mov	sl, r5
   2bf9c:	d9ac      	bls.n	2bef8 <__ssprint_r+0x1c>
   2bf9e:	4635      	mov	r5, r6
   2bfa0:	46b2      	mov	sl, r6
   2bfa2:	e7e3      	b.n	2bf6c <__ssprint_r+0x90>
   2bfa4:	4640      	mov	r0, r8
   2bfa6:	f7fa faab 	bl	26500 <_realloc_r>
   2bfaa:	9b01      	ldr	r3, [sp, #4]
   2bfac:	4682      	mov	sl, r0
   2bfae:	2800      	cmp	r0, #0
   2bfb0:	d1d0      	bne.n	2bf54 <__ssprint_r+0x78>
   2bfb2:	6921      	ldr	r1, [r4, #16]
   2bfb4:	4640      	mov	r0, r8
   2bfb6:	f7fe f86f 	bl	2a098 <_free_r>
   2bfba:	230c      	movs	r3, #12
   2bfbc:	2200      	movs	r2, #0
   2bfbe:	f04f 30ff 	mov.w	r0, #4294967295
   2bfc2:	f8c8 3000 	str.w	r3, [r8]
   2bfc6:	89a3      	ldrh	r3, [r4, #12]
   2bfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2bfcc:	81a3      	strh	r3, [r4, #12]
   2bfce:	e9c9 2201 	strd	r2, r2, [r9, #4]
   2bfd2:	b003      	add	sp, #12
   2bfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bfd8:	2000      	movs	r0, #0
   2bfda:	f8c9 0004 	str.w	r0, [r9, #4]
   2bfde:	b003      	add	sp, #12
   2bfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bfe4 <_sungetc_r>:
   2bfe4:	b538      	push	{r3, r4, r5, lr}
   2bfe6:	1c4b      	adds	r3, r1, #1
   2bfe8:	d01a      	beq.n	2c020 <_sungetc_r+0x3c>
   2bfea:	8993      	ldrh	r3, [r2, #12]
   2bfec:	4614      	mov	r4, r2
   2bfee:	6b12      	ldr	r2, [r2, #48]	; 0x30
   2bff0:	b2cd      	uxtb	r5, r1
   2bff2:	f023 0320 	bic.w	r3, r3, #32
   2bff6:	81a3      	strh	r3, [r4, #12]
   2bff8:	b1aa      	cbz	r2, 2c026 <_sungetc_r+0x42>
   2bffa:	6862      	ldr	r2, [r4, #4]
   2bffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2bffe:	429a      	cmp	r2, r3
   2c000:	da09      	bge.n	2c016 <_sungetc_r+0x32>
   2c002:	6823      	ldr	r3, [r4, #0]
   2c004:	1e5a      	subs	r2, r3, #1
   2c006:	6022      	str	r2, [r4, #0]
   2c008:	f803 5c01 	strb.w	r5, [r3, #-1]
   2c00c:	6863      	ldr	r3, [r4, #4]
   2c00e:	3301      	adds	r3, #1
   2c010:	6063      	str	r3, [r4, #4]
   2c012:	4628      	mov	r0, r5
   2c014:	bd38      	pop	{r3, r4, r5, pc}
   2c016:	4621      	mov	r1, r4
   2c018:	f000 f884 	bl	2c124 <__submore>
   2c01c:	2800      	cmp	r0, #0
   2c01e:	d0f0      	beq.n	2c002 <_sungetc_r+0x1e>
   2c020:	f04f 35ff 	mov.w	r5, #4294967295
   2c024:	e7f5      	b.n	2c012 <_sungetc_r+0x2e>
   2c026:	6922      	ldr	r2, [r4, #16]
   2c028:	6823      	ldr	r3, [r4, #0]
   2c02a:	b12a      	cbz	r2, 2c038 <_sungetc_r+0x54>
   2c02c:	429a      	cmp	r2, r3
   2c02e:	d203      	bcs.n	2c038 <_sungetc_r+0x54>
   2c030:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   2c034:	42aa      	cmp	r2, r5
   2c036:	d00f      	beq.n	2c058 <_sungetc_r+0x74>
   2c038:	6862      	ldr	r2, [r4, #4]
   2c03a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2c03e:	63a3      	str	r3, [r4, #56]	; 0x38
   2c040:	2103      	movs	r1, #3
   2c042:	4623      	mov	r3, r4
   2c044:	63e2      	str	r2, [r4, #60]	; 0x3c
   2c046:	2201      	movs	r2, #1
   2c048:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
   2c04c:	f803 5f42 	strb.w	r5, [r3, #66]!
   2c050:	4628      	mov	r0, r5
   2c052:	e9c4 3200 	strd	r3, r2, [r4]
   2c056:	bd38      	pop	{r3, r4, r5, pc}
   2c058:	6862      	ldr	r2, [r4, #4]
   2c05a:	3b01      	subs	r3, #1
   2c05c:	3201      	adds	r2, #1
   2c05e:	e9c4 3200 	strd	r3, r2, [r4]
   2c062:	e7d6      	b.n	2c012 <_sungetc_r+0x2e>

0002c064 <__ssrefill_r>:
   2c064:	b510      	push	{r4, lr}
   2c066:	460c      	mov	r4, r1
   2c068:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2c06a:	b169      	cbz	r1, 2c088 <__ssrefill_r+0x24>
   2c06c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c070:	4299      	cmp	r1, r3
   2c072:	d001      	beq.n	2c078 <__ssrefill_r+0x14>
   2c074:	f7fe f810 	bl	2a098 <_free_r>
   2c078:	2000      	movs	r0, #0
   2c07a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c07c:	6320      	str	r0, [r4, #48]	; 0x30
   2c07e:	6063      	str	r3, [r4, #4]
   2c080:	b113      	cbz	r3, 2c088 <__ssrefill_r+0x24>
   2c082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c084:	6023      	str	r3, [r4, #0]
   2c086:	bd10      	pop	{r4, pc}
   2c088:	89a3      	ldrh	r3, [r4, #12]
   2c08a:	2100      	movs	r1, #0
   2c08c:	6922      	ldr	r2, [r4, #16]
   2c08e:	f04f 30ff 	mov.w	r0, #4294967295
   2c092:	f043 0320 	orr.w	r3, r3, #32
   2c096:	e9c4 2100 	strd	r2, r1, [r4]
   2c09a:	81a3      	strh	r3, [r4, #12]
   2c09c:	bd10      	pop	{r4, pc}
   2c09e:	bf00      	nop

0002c0a0 <_sfread_r>:
   2c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c0a4:	fb02 fa03 	mul.w	sl, r2, r3
   2c0a8:	b083      	sub	sp, #12
   2c0aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c0ac:	e9cd 3200 	strd	r3, r2, [sp]
   2c0b0:	f1ba 0f00 	cmp.w	sl, #0
   2c0b4:	d027      	beq.n	2c106 <_sfread_r+0x66>
   2c0b6:	4680      	mov	r8, r0
   2c0b8:	460e      	mov	r6, r1
   2c0ba:	4657      	mov	r7, sl
   2c0bc:	f04f 0900 	mov.w	r9, #0
   2c0c0:	e00e      	b.n	2c0e0 <_sfread_r+0x40>
   2c0c2:	6821      	ldr	r1, [r4, #0]
   2c0c4:	442e      	add	r6, r5
   2c0c6:	f7e0 fd41 	bl	cb4c <memcpy>
   2c0ca:	6823      	ldr	r3, [r4, #0]
   2c0cc:	4621      	mov	r1, r4
   2c0ce:	4640      	mov	r0, r8
   2c0d0:	442b      	add	r3, r5
   2c0d2:	f8c4 9004 	str.w	r9, [r4, #4]
   2c0d6:	6023      	str	r3, [r4, #0]
   2c0d8:	f7ff ffc4 	bl	2c064 <__ssrefill_r>
   2c0dc:	b9b8      	cbnz	r0, 2c10e <_sfread_r+0x6e>
   2c0de:	465f      	mov	r7, fp
   2c0e0:	6865      	ldr	r5, [r4, #4]
   2c0e2:	4630      	mov	r0, r6
   2c0e4:	42bd      	cmp	r5, r7
   2c0e6:	462a      	mov	r2, r5
   2c0e8:	eba7 0b05 	sub.w	fp, r7, r5
   2c0ec:	d3e9      	bcc.n	2c0c2 <_sfread_r+0x22>
   2c0ee:	463a      	mov	r2, r7
   2c0f0:	6821      	ldr	r1, [r4, #0]
   2c0f2:	f8dd a000 	ldr.w	sl, [sp]
   2c0f6:	f7e0 fd29 	bl	cb4c <memcpy>
   2c0fa:	e9d4 3200 	ldrd	r3, r2, [r4]
   2c0fe:	1bd2      	subs	r2, r2, r7
   2c100:	441f      	add	r7, r3
   2c102:	e9c4 7200 	strd	r7, r2, [r4]
   2c106:	4650      	mov	r0, sl
   2c108:	b003      	add	sp, #12
   2c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c10e:	44aa      	add	sl, r5
   2c110:	9b01      	ldr	r3, [sp, #4]
   2c112:	ebaa 0707 	sub.w	r7, sl, r7
   2c116:	fbb7 faf3 	udiv	sl, r7, r3
   2c11a:	4650      	mov	r0, sl
   2c11c:	b003      	add	sp, #12
   2c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c122:	bf00      	nop

0002c124 <__submore>:
   2c124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c128:	460c      	mov	r4, r1
   2c12a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2c12c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c130:	4299      	cmp	r1, r3
   2c132:	d014      	beq.n	2c15e <__submore+0x3a>
   2c134:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2c136:	0077      	lsls	r7, r6, #1
   2c138:	463a      	mov	r2, r7
   2c13a:	f7fa f9e1 	bl	26500 <_realloc_r>
   2c13e:	4605      	mov	r5, r0
   2c140:	b348      	cbz	r0, 2c196 <__submore+0x72>
   2c142:	eb00 0806 	add.w	r8, r0, r6
   2c146:	4601      	mov	r1, r0
   2c148:	4632      	mov	r2, r6
   2c14a:	4640      	mov	r0, r8
   2c14c:	f7e0 fcfe 	bl	cb4c <memcpy>
   2c150:	2000      	movs	r0, #0
   2c152:	f8c4 8000 	str.w	r8, [r4]
   2c156:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   2c15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c15e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2c162:	f7f9 fe2f 	bl	25dc4 <_malloc_r>
   2c166:	4603      	mov	r3, r0
   2c168:	b1a8      	cbz	r0, 2c196 <__submore+0x72>
   2c16a:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   2c16e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2c172:	6323      	str	r3, [r4, #48]	; 0x30
   2c174:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
   2c178:	6360      	str	r0, [r4, #52]	; 0x34
   2c17a:	2000      	movs	r0, #0
   2c17c:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
   2c180:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   2c184:	f883 13fe 	strb.w	r1, [r3, #1022]	; 0x3fe
   2c188:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   2c18c:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
   2c190:	6022      	str	r2, [r4, #0]
   2c192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c196:	f04f 30ff 	mov.w	r0, #4294967295
   2c19a:	e7de      	b.n	2c15a <__submore+0x36>

0002c19c <__swbuf_r>:
   2c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c19e:	460d      	mov	r5, r1
   2c1a0:	4614      	mov	r4, r2
   2c1a2:	4606      	mov	r6, r0
   2c1a4:	b110      	cbz	r0, 2c1ac <__swbuf_r+0x10>
   2c1a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c1a8:	2b00      	cmp	r3, #0
   2c1aa:	d043      	beq.n	2c234 <__swbuf_r+0x98>
   2c1ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c1b0:	69a3      	ldr	r3, [r4, #24]
   2c1b2:	0717      	lsls	r7, r2, #28
   2c1b4:	b290      	uxth	r0, r2
   2c1b6:	60a3      	str	r3, [r4, #8]
   2c1b8:	d51b      	bpl.n	2c1f2 <__swbuf_r+0x56>
   2c1ba:	6923      	ldr	r3, [r4, #16]
   2c1bc:	b1cb      	cbz	r3, 2c1f2 <__swbuf_r+0x56>
   2c1be:	b2ed      	uxtb	r5, r5
   2c1c0:	0481      	lsls	r1, r0, #18
   2c1c2:	462f      	mov	r7, r5
   2c1c4:	d522      	bpl.n	2c20c <__swbuf_r+0x70>
   2c1c6:	6822      	ldr	r2, [r4, #0]
   2c1c8:	6961      	ldr	r1, [r4, #20]
   2c1ca:	1ad3      	subs	r3, r2, r3
   2c1cc:	4299      	cmp	r1, r3
   2c1ce:	dd29      	ble.n	2c224 <__swbuf_r+0x88>
   2c1d0:	3301      	adds	r3, #1
   2c1d2:	68a1      	ldr	r1, [r4, #8]
   2c1d4:	1c50      	adds	r0, r2, #1
   2c1d6:	3901      	subs	r1, #1
   2c1d8:	6020      	str	r0, [r4, #0]
   2c1da:	60a1      	str	r1, [r4, #8]
   2c1dc:	7015      	strb	r5, [r2, #0]
   2c1de:	6962      	ldr	r2, [r4, #20]
   2c1e0:	429a      	cmp	r2, r3
   2c1e2:	d02a      	beq.n	2c23a <__swbuf_r+0x9e>
   2c1e4:	2d0a      	cmp	r5, #10
   2c1e6:	d102      	bne.n	2c1ee <__swbuf_r+0x52>
   2c1e8:	7b23      	ldrb	r3, [r4, #12]
   2c1ea:	07db      	lsls	r3, r3, #31
   2c1ec:	d425      	bmi.n	2c23a <__swbuf_r+0x9e>
   2c1ee:	4638      	mov	r0, r7
   2c1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c1f2:	4621      	mov	r1, r4
   2c1f4:	4630      	mov	r0, r6
   2c1f6:	f7fd fc23 	bl	29a40 <__swsetup_r>
   2c1fa:	bb20      	cbnz	r0, 2c246 <__swbuf_r+0xaa>
   2c1fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c200:	b2ed      	uxtb	r5, r5
   2c202:	6923      	ldr	r3, [r4, #16]
   2c204:	b290      	uxth	r0, r2
   2c206:	462f      	mov	r7, r5
   2c208:	0481      	lsls	r1, r0, #18
   2c20a:	d4dc      	bmi.n	2c1c6 <__swbuf_r+0x2a>
   2c20c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2c20e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2c212:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2c216:	81a2      	strh	r2, [r4, #12]
   2c218:	6822      	ldr	r2, [r4, #0]
   2c21a:	6661      	str	r1, [r4, #100]	; 0x64
   2c21c:	1ad3      	subs	r3, r2, r3
   2c21e:	6961      	ldr	r1, [r4, #20]
   2c220:	4299      	cmp	r1, r3
   2c222:	dcd5      	bgt.n	2c1d0 <__swbuf_r+0x34>
   2c224:	4621      	mov	r1, r4
   2c226:	4630      	mov	r0, r6
   2c228:	f7fd fdc8 	bl	29dbc <_fflush_r>
   2c22c:	b958      	cbnz	r0, 2c246 <__swbuf_r+0xaa>
   2c22e:	6822      	ldr	r2, [r4, #0]
   2c230:	2301      	movs	r3, #1
   2c232:	e7ce      	b.n	2c1d2 <__swbuf_r+0x36>
   2c234:	f7fd fe20 	bl	29e78 <__sinit>
   2c238:	e7b8      	b.n	2c1ac <__swbuf_r+0x10>
   2c23a:	4621      	mov	r1, r4
   2c23c:	4630      	mov	r0, r6
   2c23e:	f7fd fdbd 	bl	29dbc <_fflush_r>
   2c242:	2800      	cmp	r0, #0
   2c244:	d0d3      	beq.n	2c1ee <__swbuf_r+0x52>
   2c246:	f04f 37ff 	mov.w	r7, #4294967295
   2c24a:	e7d0      	b.n	2c1ee <__swbuf_r+0x52>

0002c24c <_wcrtomb_r>:
   2c24c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c24e:	4606      	mov	r6, r0
   2c250:	b085      	sub	sp, #20
   2c252:	461d      	mov	r5, r3
   2c254:	b139      	cbz	r1, 2c266 <_wcrtomb_r+0x1a>
   2c256:	4c0b      	ldr	r4, [pc, #44]	; (2c284 <_wcrtomb_r+0x38>)
   2c258:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   2c25c:	47a0      	blx	r4
   2c25e:	1c43      	adds	r3, r0, #1
   2c260:	d009      	beq.n	2c276 <_wcrtomb_r+0x2a>
   2c262:	b005      	add	sp, #20
   2c264:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c266:	4f07      	ldr	r7, [pc, #28]	; (2c284 <_wcrtomb_r+0x38>)
   2c268:	460a      	mov	r2, r1
   2c26a:	a901      	add	r1, sp, #4
   2c26c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
   2c270:	47a0      	blx	r4
   2c272:	1c43      	adds	r3, r0, #1
   2c274:	d1f5      	bne.n	2c262 <_wcrtomb_r+0x16>
   2c276:	2200      	movs	r2, #0
   2c278:	238a      	movs	r3, #138	; 0x8a
   2c27a:	602a      	str	r2, [r5, #0]
   2c27c:	6033      	str	r3, [r6, #0]
   2c27e:	b005      	add	sp, #20
   2c280:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c282:	bf00      	nop
   2c284:	200208f0 	.word	0x200208f0

0002c288 <__ascii_wctomb>:
   2c288:	4603      	mov	r3, r0
   2c28a:	b149      	cbz	r1, 2c2a0 <__ascii_wctomb+0x18>
   2c28c:	2aff      	cmp	r2, #255	; 0xff
   2c28e:	d802      	bhi.n	2c296 <__ascii_wctomb+0xe>
   2c290:	2001      	movs	r0, #1
   2c292:	700a      	strb	r2, [r1, #0]
   2c294:	4770      	bx	lr
   2c296:	228a      	movs	r2, #138	; 0x8a
   2c298:	f04f 30ff 	mov.w	r0, #4294967295
   2c29c:	601a      	str	r2, [r3, #0]
   2c29e:	4770      	bx	lr
   2c2a0:	4608      	mov	r0, r1
   2c2a2:	4770      	bx	lr

0002c2a4 <_calloc_r>:
   2c2a4:	b510      	push	{r4, lr}
   2c2a6:	fb02 f101 	mul.w	r1, r2, r1
   2c2aa:	f7f9 fd8b 	bl	25dc4 <_malloc_r>
   2c2ae:	4604      	mov	r4, r0
   2c2b0:	b168      	cbz	r0, 2c2ce <_calloc_r+0x2a>
   2c2b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2c2b6:	f022 0203 	bic.w	r2, r2, #3
   2c2ba:	3a04      	subs	r2, #4
   2c2bc:	2a24      	cmp	r2, #36	; 0x24
   2c2be:	d814      	bhi.n	2c2ea <_calloc_r+0x46>
   2c2c0:	2a13      	cmp	r2, #19
   2c2c2:	d806      	bhi.n	2c2d2 <_calloc_r+0x2e>
   2c2c4:	4602      	mov	r2, r0
   2c2c6:	2300      	movs	r3, #0
   2c2c8:	e9c2 3300 	strd	r3, r3, [r2]
   2c2cc:	6093      	str	r3, [r2, #8]
   2c2ce:	4620      	mov	r0, r4
   2c2d0:	bd10      	pop	{r4, pc}
   2c2d2:	2300      	movs	r3, #0
   2c2d4:	2a1b      	cmp	r2, #27
   2c2d6:	e9c0 3300 	strd	r3, r3, [r0]
   2c2da:	d90b      	bls.n	2c2f4 <_calloc_r+0x50>
   2c2dc:	2a24      	cmp	r2, #36	; 0x24
   2c2de:	e9c0 3302 	strd	r3, r3, [r0, #8]
   2c2e2:	d00a      	beq.n	2c2fa <_calloc_r+0x56>
   2c2e4:	f100 0210 	add.w	r2, r0, #16
   2c2e8:	e7ed      	b.n	2c2c6 <_calloc_r+0x22>
   2c2ea:	2100      	movs	r1, #0
   2c2ec:	f7fa f8a4 	bl	26438 <memset>
   2c2f0:	4620      	mov	r0, r4
   2c2f2:	bd10      	pop	{r4, pc}
   2c2f4:	f100 0208 	add.w	r2, r0, #8
   2c2f8:	e7e5      	b.n	2c2c6 <_calloc_r+0x22>
   2c2fa:	f100 0218 	add.w	r2, r0, #24
   2c2fe:	6103      	str	r3, [r0, #16]
   2c300:	6143      	str	r3, [r0, #20]
   2c302:	e7e0      	b.n	2c2c6 <_calloc_r+0x22>

0002c304 <_fclose_r>:
   2c304:	b570      	push	{r4, r5, r6, lr}
   2c306:	2900      	cmp	r1, #0
   2c308:	d04b      	beq.n	2c3a2 <_fclose_r+0x9e>
   2c30a:	460c      	mov	r4, r1
   2c30c:	4605      	mov	r5, r0
   2c30e:	b110      	cbz	r0, 2c316 <_fclose_r+0x12>
   2c310:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c312:	2b00      	cmp	r3, #0
   2c314:	d048      	beq.n	2c3a8 <_fclose_r+0xa4>
   2c316:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c318:	07d8      	lsls	r0, r3, #31
   2c31a:	d534      	bpl.n	2c386 <_fclose_r+0x82>
   2c31c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c320:	2b00      	cmp	r3, #0
   2c322:	d03e      	beq.n	2c3a2 <_fclose_r+0x9e>
   2c324:	4621      	mov	r1, r4
   2c326:	4628      	mov	r0, r5
   2c328:	f7fd fca6 	bl	29c78 <__sflush_r>
   2c32c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c32e:	4606      	mov	r6, r0
   2c330:	b133      	cbz	r3, 2c340 <_fclose_r+0x3c>
   2c332:	69e1      	ldr	r1, [r4, #28]
   2c334:	4628      	mov	r0, r5
   2c336:	4798      	blx	r3
   2c338:	2800      	cmp	r0, #0
   2c33a:	bfb8      	it	lt
   2c33c:	f04f 36ff 	movlt.w	r6, #4294967295
   2c340:	89a3      	ldrh	r3, [r4, #12]
   2c342:	061a      	lsls	r2, r3, #24
   2c344:	d43b      	bmi.n	2c3be <_fclose_r+0xba>
   2c346:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c348:	b141      	cbz	r1, 2c35c <_fclose_r+0x58>
   2c34a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c34e:	4299      	cmp	r1, r3
   2c350:	d002      	beq.n	2c358 <_fclose_r+0x54>
   2c352:	4628      	mov	r0, r5
   2c354:	f7fd fea0 	bl	2a098 <_free_r>
   2c358:	2300      	movs	r3, #0
   2c35a:	6323      	str	r3, [r4, #48]	; 0x30
   2c35c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2c35e:	b121      	cbz	r1, 2c36a <_fclose_r+0x66>
   2c360:	4628      	mov	r0, r5
   2c362:	f7fd fe99 	bl	2a098 <_free_r>
   2c366:	2300      	movs	r3, #0
   2c368:	6463      	str	r3, [r4, #68]	; 0x44
   2c36a:	f7fd fdb5 	bl	29ed8 <__sfp_lock_acquire>
   2c36e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c370:	2200      	movs	r2, #0
   2c372:	07db      	lsls	r3, r3, #31
   2c374:	81a2      	strh	r2, [r4, #12]
   2c376:	d527      	bpl.n	2c3c8 <_fclose_r+0xc4>
   2c378:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c37a:	f7fe fd31 	bl	2ade0 <__retarget_lock_close_recursive>
   2c37e:	f7fd fdb1 	bl	29ee4 <__sfp_lock_release>
   2c382:	4630      	mov	r0, r6
   2c384:	bd70      	pop	{r4, r5, r6, pc}
   2c386:	89a3      	ldrh	r3, [r4, #12]
   2c388:	0599      	lsls	r1, r3, #22
   2c38a:	d4cb      	bmi.n	2c324 <_fclose_r+0x20>
   2c38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c38e:	f7fe fd29 	bl	2ade4 <__retarget_lock_acquire_recursive>
   2c392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c396:	2b00      	cmp	r3, #0
   2c398:	d1c4      	bne.n	2c324 <_fclose_r+0x20>
   2c39a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2c39c:	f016 0601 	ands.w	r6, r6, #1
   2c3a0:	d008      	beq.n	2c3b4 <_fclose_r+0xb0>
   2c3a2:	2600      	movs	r6, #0
   2c3a4:	4630      	mov	r0, r6
   2c3a6:	bd70      	pop	{r4, r5, r6, pc}
   2c3a8:	f7fd fd66 	bl	29e78 <__sinit>
   2c3ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c3ae:	07d8      	lsls	r0, r3, #31
   2c3b0:	d4b4      	bmi.n	2c31c <_fclose_r+0x18>
   2c3b2:	e7e8      	b.n	2c386 <_fclose_r+0x82>
   2c3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c3b6:	f7fe fd17 	bl	2ade8 <__retarget_lock_release_recursive>
   2c3ba:	4630      	mov	r0, r6
   2c3bc:	bd70      	pop	{r4, r5, r6, pc}
   2c3be:	6921      	ldr	r1, [r4, #16]
   2c3c0:	4628      	mov	r0, r5
   2c3c2:	f7fd fe69 	bl	2a098 <_free_r>
   2c3c6:	e7be      	b.n	2c346 <_fclose_r+0x42>
   2c3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c3ca:	f7fe fd0d 	bl	2ade8 <__retarget_lock_release_recursive>
   2c3ce:	e7d3      	b.n	2c378 <_fclose_r+0x74>

0002c3d0 <_fstat_r>:
   2c3d0:	b570      	push	{r4, r5, r6, lr}
   2c3d2:	460c      	mov	r4, r1
   2c3d4:	4603      	mov	r3, r0
   2c3d6:	4d08      	ldr	r5, [pc, #32]	; (2c3f8 <_fstat_r+0x28>)
   2c3d8:	2600      	movs	r6, #0
   2c3da:	4620      	mov	r0, r4
   2c3dc:	4611      	mov	r1, r2
   2c3de:	461c      	mov	r4, r3
   2c3e0:	602e      	str	r6, [r5, #0]
   2c3e2:	f000 fe8f 	bl	2d104 <_fstat>
   2c3e6:	1c43      	adds	r3, r0, #1
   2c3e8:	d000      	beq.n	2c3ec <_fstat_r+0x1c>
   2c3ea:	bd70      	pop	{r4, r5, r6, pc}
   2c3ec:	682b      	ldr	r3, [r5, #0]
   2c3ee:	2b00      	cmp	r3, #0
   2c3f0:	d0fb      	beq.n	2c3ea <_fstat_r+0x1a>
   2c3f2:	6023      	str	r3, [r4, #0]
   2c3f4:	bd70      	pop	{r4, r5, r6, pc}
   2c3f6:	bf00      	nop
   2c3f8:	20026430 	.word	0x20026430

0002c3fc <_isatty_r>:
   2c3fc:	b538      	push	{r3, r4, r5, lr}
   2c3fe:	2200      	movs	r2, #0
   2c400:	4d06      	ldr	r5, [pc, #24]	; (2c41c <_isatty_r+0x20>)
   2c402:	4604      	mov	r4, r0
   2c404:	4608      	mov	r0, r1
   2c406:	602a      	str	r2, [r5, #0]
   2c408:	f000 fe76 	bl	2d0f8 <_isatty>
   2c40c:	1c43      	adds	r3, r0, #1
   2c40e:	d000      	beq.n	2c412 <_isatty_r+0x16>
   2c410:	bd38      	pop	{r3, r4, r5, pc}
   2c412:	682b      	ldr	r3, [r5, #0]
   2c414:	2b00      	cmp	r3, #0
   2c416:	d0fb      	beq.n	2c410 <_isatty_r+0x14>
   2c418:	6023      	str	r3, [r4, #0]
   2c41a:	bd38      	pop	{r3, r4, r5, pc}
   2c41c:	20026430 	.word	0x20026430

0002c420 <sys_notify_validate>:
	if (notify == NULL) {
   2c420:	b140      	cbz	r0, 2c434 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2c422:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2c424:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   2c428:	2b02      	cmp	r3, #2
   2c42a:	d006      	beq.n	2c43a <sys_notify_validate+0x1a>
   2c42c:	2b03      	cmp	r3, #3
   2c42e:	d004      	beq.n	2c43a <sys_notify_validate+0x1a>
   2c430:	2b01      	cmp	r3, #1
   2c432:	d005      	beq.n	2c440 <sys_notify_validate+0x20>
		return -EINVAL;
   2c434:	f06f 0015 	mvn.w	r0, #21
}
   2c438:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2c43a:	6803      	ldr	r3, [r0, #0]
   2c43c:	2b00      	cmp	r3, #0
   2c43e:	d0f9      	beq.n	2c434 <sys_notify_validate+0x14>
		notify->result = 0;
   2c440:	2300      	movs	r3, #0
   2c442:	6083      	str	r3, [r0, #8]
   2c444:	4618      	mov	r0, r3
   2c446:	4770      	bx	lr

0002c448 <arch_printk_char_out>:
}
   2c448:	2000      	movs	r0, #0
   2c44a:	4770      	bx	lr

0002c44c <str_out>:
{
   2c44c:	b530      	push	{r4, r5, lr}
   2c44e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2c450:	680c      	ldr	r4, [r1, #0]
   2c452:	1c55      	adds	r5, r2, #1
   2c454:	b114      	cbz	r4, 2c45c <str_out+0x10>
   2c456:	684b      	ldr	r3, [r1, #4]
   2c458:	4293      	cmp	r3, r2
   2c45a:	dc01      	bgt.n	2c460 <str_out+0x14>
		ctx->count++;
   2c45c:	608d      	str	r5, [r1, #8]
}
   2c45e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2c460:	3b01      	subs	r3, #1
   2c462:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2c464:	bf08      	it	eq
   2c466:	2200      	moveq	r2, #0
   2c468:	608d      	str	r5, [r1, #8]
   2c46a:	bf0c      	ite	eq
   2c46c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2c46e:	54a0      	strbne	r0, [r4, r2]
   2c470:	e7f5      	b.n	2c45e <str_out+0x12>

0002c472 <printk>:
{
   2c472:	b40f      	push	{r0, r1, r2, r3}
   2c474:	b507      	push	{r0, r1, r2, lr}
   2c476:	a904      	add	r1, sp, #16
   2c478:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2c47c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2c47e:	f7e5 ff81 	bl	12384 <vprintk>
}
   2c482:	b003      	add	sp, #12
   2c484:	f85d eb04 	ldr.w	lr, [sp], #4
   2c488:	b004      	add	sp, #16
   2c48a:	4770      	bx	lr

0002c48c <snprintk>:
{
   2c48c:	b40c      	push	{r2, r3}
   2c48e:	b507      	push	{r0, r1, r2, lr}
   2c490:	ab04      	add	r3, sp, #16
   2c492:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2c496:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2c498:	f7e5 ff82 	bl	123a0 <vsnprintk>
}
   2c49c:	b003      	add	sp, #12
   2c49e:	f85d eb04 	ldr.w	lr, [sp], #4
   2c4a2:	b002      	add	sp, #8
   2c4a4:	4770      	bx	lr

0002c4a6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2c4a6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2c4a8:	f013 0307 	ands.w	r3, r3, #7
   2c4ac:	d105      	bne.n	2c4ba <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2c4ae:	6803      	ldr	r3, [r0, #0]
   2c4b0:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2c4b2:	bf0c      	ite	eq
   2c4b4:	2000      	moveq	r0, #0
   2c4b6:	2003      	movne	r0, #3
   2c4b8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2c4ba:	2b02      	cmp	r3, #2
   2c4bc:	d105      	bne.n	2c4ca <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   2c4be:	8bc3      	ldrh	r3, [r0, #30]
   2c4c0:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2c4c2:	bf14      	ite	ne
   2c4c4:	2000      	movne	r0, #0
   2c4c6:	2004      	moveq	r0, #4
   2c4c8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2c4ca:	2b01      	cmp	r3, #1
   2c4cc:	d105      	bne.n	2c4da <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2c4ce:	6803      	ldr	r3, [r0, #0]
   2c4d0:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2c4d2:	bf0c      	ite	eq
   2c4d4:	2000      	moveq	r0, #0
   2c4d6:	2005      	movne	r0, #5
   2c4d8:	4770      	bx	lr
	int evt = EVT_NOP;
   2c4da:	2000      	movs	r0, #0
}
   2c4dc:	4770      	bx	lr

0002c4de <notify_one>:
{
   2c4de:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c4e0:	460d      	mov	r5, r1
   2c4e2:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c4e4:	4619      	mov	r1, r3
   2c4e6:	1d28      	adds	r0, r5, #4
{
   2c4e8:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c4ea:	9300      	str	r3, [sp, #0]
   2c4ec:	f7e5 fd90 	bl	12010 <sys_notify_finalize>
	if (cb) {
   2c4f0:	4604      	mov	r4, r0
   2c4f2:	b140      	cbz	r0, 2c506 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2c4f4:	e9dd 3200 	ldrd	r3, r2, [sp]
   2c4f8:	4629      	mov	r1, r5
   2c4fa:	4630      	mov	r0, r6
   2c4fc:	46a4      	mov	ip, r4
}
   2c4fe:	b002      	add	sp, #8
   2c500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   2c504:	4760      	bx	ip
}
   2c506:	b002      	add	sp, #8
   2c508:	bd70      	pop	{r4, r5, r6, pc}

0002c50a <validate_args>:
{
   2c50a:	b510      	push	{r4, lr}
   2c50c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2c50e:	b140      	cbz	r0, 2c522 <validate_args+0x18>
   2c510:	b139      	cbz	r1, 2c522 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2c512:	1d08      	adds	r0, r1, #4
   2c514:	f7ff ff84 	bl	2c420 <sys_notify_validate>
	if ((rv == 0)
   2c518:	b928      	cbnz	r0, 2c526 <validate_args+0x1c>
	    && ((cli->notify.flags
   2c51a:	68a3      	ldr	r3, [r4, #8]
   2c51c:	f033 0303 	bics.w	r3, r3, #3
   2c520:	d001      	beq.n	2c526 <validate_args+0x1c>
		rv = -EINVAL;
   2c522:	f06f 0015 	mvn.w	r0, #21
}
   2c526:	bd10      	pop	{r4, pc}

0002c528 <onoff_manager_init>:
{
   2c528:	b538      	push	{r3, r4, r5, lr}
   2c52a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2c52c:	4605      	mov	r5, r0
   2c52e:	b158      	cbz	r0, 2c548 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2c530:	b151      	cbz	r1, 2c548 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2c532:	680b      	ldr	r3, [r1, #0]
   2c534:	b143      	cbz	r3, 2c548 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2c536:	684b      	ldr	r3, [r1, #4]
   2c538:	b133      	cbz	r3, 2c548 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c53a:	2220      	movs	r2, #32
   2c53c:	2100      	movs	r1, #0
   2c53e:	f7f9 ff7b 	bl	26438 <memset>
	return 0;
   2c542:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c544:	612c      	str	r4, [r5, #16]
}
   2c546:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2c548:	f06f 0015 	mvn.w	r0, #21
   2c54c:	e7fb      	b.n	2c546 <onoff_manager_init+0x1e>

0002c54e <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2c54e:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2c550:	f7f8 f9d8 	bl	24904 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2c554:	2000      	movs	r0, #0
   2c556:	bd08      	pop	{r3, pc}

0002c558 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2c558:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2c55a:	f7f8 fa17 	bl	2498c <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2c55e:	f110 0f0b 	cmn.w	r0, #11
   2c562:	d005      	beq.n	2c570 <sys_sem_take+0x18>
   2c564:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2c568:	bf08      	it	eq
   2c56a:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2c56e:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2c570:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2c574:	e7fb      	b.n	2c56e <sys_sem_take+0x16>

0002c576 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2c576:	4604      	mov	r4, r0
   2c578:	b508      	push	{r3, lr}
   2c57a:	4608      	mov	r0, r1
   2c57c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2c57e:	461a      	mov	r2, r3
   2c580:	47a0      	blx	r4
	return z_impl_k_current_get();
   2c582:	f7f8 f9b9 	bl	248f8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2c586:	f7e8 fc89 	bl	14e9c <z_impl_k_thread_abort>

0002c58a <chunk_field>:
	if (big_heap(h)) {
   2c58a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2c58c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2c594:	bf2c      	ite	cs
   2c596:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   2c59a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   2c59e:	4770      	bx	lr

0002c5a0 <chunk_set>:
	void *cmem = &buf[c];
   2c5a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c5a4:	6880      	ldr	r0, [r0, #8]
   2c5a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   2c5aa:	bf2c      	ite	cs
   2c5ac:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2c5b0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   2c5b4:	4770      	bx	lr

0002c5b6 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c5b6:	2201      	movs	r2, #1
{
   2c5b8:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c5ba:	f7ff ffe6 	bl	2c58a <chunk_field>
}
   2c5be:	0840      	lsrs	r0, r0, #1
   2c5c0:	bd08      	pop	{r3, pc}

0002c5c2 <set_chunk_used>:
	if (big_heap(h)) {
   2c5c2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2c5c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c5c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c5cc:	d308      	bcc.n	2c5e0 <set_chunk_used+0x1e>
		if (used) {
   2c5ce:	684b      	ldr	r3, [r1, #4]
   2c5d0:	b11a      	cbz	r2, 2c5da <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   2c5d2:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c5d6:	604b      	str	r3, [r1, #4]
   2c5d8:	4770      	bx	lr
   2c5da:	f023 0301 	bic.w	r3, r3, #1
   2c5de:	e7fa      	b.n	2c5d6 <set_chunk_used+0x14>
		if (used) {
   2c5e0:	884b      	ldrh	r3, [r1, #2]
   2c5e2:	b11a      	cbz	r2, 2c5ec <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   2c5e4:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c5e8:	804b      	strh	r3, [r1, #2]
}
   2c5ea:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c5ec:	f023 0301 	bic.w	r3, r3, #1
   2c5f0:	e7fa      	b.n	2c5e8 <set_chunk_used+0x26>

0002c5f2 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c5f2:	0053      	lsls	r3, r2, #1
   2c5f4:	2201      	movs	r2, #1
   2c5f6:	f7ff bfd3 	b.w	2c5a0 <chunk_set>

0002c5fa <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   2c5fa:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2c5fc:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   2c5fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c602:	bf2c      	ite	cs
   2c604:	2008      	movcs	r0, #8
   2c606:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2c608:	4408      	add	r0, r1
}
   2c60a:	08c0      	lsrs	r0, r0, #3
   2c60c:	4770      	bx	lr

0002c60e <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   2c60e:	460a      	mov	r2, r1
   2c610:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2c612:	2101      	movs	r1, #1
   2c614:	f7ff fff1 	bl	2c5fa <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2c618:	3201      	adds	r2, #1
   2c61a:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   2c61c:	fab0 f080 	clz	r0, r0
}
   2c620:	f1c0 001f 	rsb	r0, r0, #31
   2c624:	bd08      	pop	{r3, pc}

0002c626 <merge_chunks>:
{
   2c626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c628:	4616      	mov	r6, r2
   2c62a:	4604      	mov	r4, r0
   2c62c:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2c62e:	f7ff ffc2 	bl	2c5b6 <chunk_size>
   2c632:	4631      	mov	r1, r6
   2c634:	4605      	mov	r5, r0
   2c636:	4620      	mov	r0, r4
   2c638:	f7ff ffbd 	bl	2c5b6 <chunk_size>
   2c63c:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
   2c63e:	461a      	mov	r2, r3
   2c640:	4639      	mov	r1, r7
   2c642:	4620      	mov	r0, r4
   2c644:	9301      	str	r3, [sp, #4]
   2c646:	f7ff ffd4 	bl	2c5f2 <set_chunk_size>
	return c + chunk_size(h, c);
   2c64a:	4631      	mov	r1, r6
   2c64c:	4620      	mov	r0, r4
   2c64e:	f7ff ffb2 	bl	2c5b6 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2c652:	2200      	movs	r2, #0
   2c654:	1831      	adds	r1, r6, r0
   2c656:	4620      	mov	r0, r4
   2c658:	9b01      	ldr	r3, [sp, #4]
}
   2c65a:	b003      	add	sp, #12
   2c65c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c660:	f7ff bf9e 	b.w	2c5a0 <chunk_set>

0002c664 <split_chunks>:
{
   2c664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c666:	4614      	mov	r4, r2
   2c668:	460e      	mov	r6, r1
   2c66a:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   2c66c:	f7ff ffa3 	bl	2c5b6 <chunk_size>
	size_t lsz = rc - lc;
   2c670:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   2c672:	1b32      	subs	r2, r6, r4
   2c674:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   2c676:	4631      	mov	r1, r6
   2c678:	461a      	mov	r2, r3
   2c67a:	4628      	mov	r0, r5
   2c67c:	9301      	str	r3, [sp, #4]
   2c67e:	f7ff ffb8 	bl	2c5f2 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2c682:	463a      	mov	r2, r7
   2c684:	4621      	mov	r1, r4
   2c686:	4628      	mov	r0, r5
   2c688:	f7ff ffb3 	bl	2c5f2 <set_chunk_size>
   2c68c:	9b01      	ldr	r3, [sp, #4]
   2c68e:	2200      	movs	r2, #0
   2c690:	4621      	mov	r1, r4
   2c692:	4628      	mov	r0, r5
   2c694:	f7ff ff84 	bl	2c5a0 <chunk_set>
	return c + chunk_size(h, c);
   2c698:	4621      	mov	r1, r4
   2c69a:	4628      	mov	r0, r5
   2c69c:	f7ff ff8b 	bl	2c5b6 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2c6a0:	463b      	mov	r3, r7
   2c6a2:	1821      	adds	r1, r4, r0
   2c6a4:	2200      	movs	r2, #0
   2c6a6:	4628      	mov	r0, r5
}
   2c6a8:	b003      	add	sp, #12
   2c6aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c6ae:	f7ff bf77 	b.w	2c5a0 <chunk_set>

0002c6b2 <free_list_remove_bidx>:
{
   2c6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c6b6:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2c6b8:	2203      	movs	r2, #3
   2c6ba:	460e      	mov	r6, r1
   2c6bc:	4604      	mov	r4, r0
   2c6be:	f7ff ff64 	bl	2c58a <chunk_field>
	if (next_free_chunk(h, c) == c) {
   2c6c2:	4286      	cmp	r6, r0
   2c6c4:	4605      	mov	r5, r0
   2c6c6:	f107 0804 	add.w	r8, r7, #4
   2c6ca:	d10b      	bne.n	2c6e4 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2c6cc:	2301      	movs	r3, #1
   2c6ce:	fa03 f707 	lsl.w	r7, r3, r7
   2c6d2:	68e3      	ldr	r3, [r4, #12]
   2c6d4:	ea23 0307 	bic.w	r3, r3, r7
   2c6d8:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   2c6da:	2300      	movs	r3, #0
   2c6dc:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2c6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2c6e4:	4631      	mov	r1, r6
   2c6e6:	2202      	movs	r2, #2
   2c6e8:	4620      	mov	r0, r4
   2c6ea:	f7ff ff4e 	bl	2c58a <chunk_field>
   2c6ee:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2c6f0:	462b      	mov	r3, r5
   2c6f2:	4601      	mov	r1, r0
   2c6f4:	2203      	movs	r2, #3
   2c6f6:	4620      	mov	r0, r4
		b->next = second;
   2c6f8:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2c6fc:	f7ff ff50 	bl	2c5a0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2c700:	4633      	mov	r3, r6
   2c702:	4629      	mov	r1, r5
   2c704:	4620      	mov	r0, r4
}
   2c706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c70a:	2202      	movs	r2, #2
   2c70c:	f7ff bf48 	b.w	2c5a0 <chunk_set>

0002c710 <free_list_remove>:
{
   2c710:	b538      	push	{r3, r4, r5, lr}
   2c712:	4604      	mov	r4, r0
   2c714:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   2c716:	f7ff ff4e 	bl	2c5b6 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2c71a:	68a3      	ldr	r3, [r4, #8]
   2c71c:	4601      	mov	r1, r0
   2c71e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c722:	d301      	bcc.n	2c728 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2c724:	2801      	cmp	r0, #1
   2c726:	d009      	beq.n	2c73c <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c728:	4620      	mov	r0, r4
   2c72a:	f7ff ff70 	bl	2c60e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   2c72e:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c730:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2c732:	4620      	mov	r0, r4
}
   2c734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2c738:	f7ff bfbb 	b.w	2c6b2 <free_list_remove_bidx>
}
   2c73c:	bd38      	pop	{r3, r4, r5, pc}

0002c73e <alloc_chunk>:
{
   2c73e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c742:	4604      	mov	r4, r0
   2c744:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   2c746:	f7ff ff62 	bl	2c60e <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   2c74a:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   2c74c:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   2c74e:	4620      	mov	r0, r4
   2c750:	f7ff ff5d 	bl	2c60e <bucket_idx>
   2c754:	42a8      	cmp	r0, r5
   2c756:	da04      	bge.n	2c762 <alloc_chunk+0x24>
		return 0;
   2c758:	2100      	movs	r1, #0
}
   2c75a:	4608      	mov	r0, r1
   2c75c:	b003      	add	sp, #12
   2c75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   2c762:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   2c766:	f8d9 8010 	ldr.w	r8, [r9, #16]
   2c76a:	f1b8 0f00 	cmp.w	r8, #0
   2c76e:	d019      	beq.n	2c7a4 <alloc_chunk+0x66>
   2c770:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   2c772:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   2c776:	4620      	mov	r0, r4
   2c778:	9101      	str	r1, [sp, #4]
   2c77a:	f7ff ff1c 	bl	2c5b6 <chunk_size>
   2c77e:	42b8      	cmp	r0, r7
   2c780:	9901      	ldr	r1, [sp, #4]
   2c782:	d305      	bcc.n	2c790 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   2c784:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   2c786:	4620      	mov	r0, r4
   2c788:	f7ff ff93 	bl	2c6b2 <free_list_remove_bidx>
   2c78c:	9901      	ldr	r1, [sp, #4]
		return c;
   2c78e:	e7e4      	b.n	2c75a <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   2c790:	2203      	movs	r2, #3
   2c792:	4620      	mov	r0, r4
   2c794:	f7ff fef9 	bl	2c58a <chunk_field>
		} while (--i && b->next != first);
   2c798:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   2c79a:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   2c79e:	d001      	beq.n	2c7a4 <alloc_chunk+0x66>
   2c7a0:	4580      	cmp	r8, r0
   2c7a2:	d1e6      	bne.n	2c772 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2c7a4:	f04f 32ff 	mov.w	r2, #4294967295
   2c7a8:	68e3      	ldr	r3, [r4, #12]
   2c7aa:	3501      	adds	r5, #1
   2c7ac:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   2c7ae:	401a      	ands	r2, r3
   2c7b0:	d0d2      	beq.n	2c758 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   2c7b2:	fa92 f2a2 	rbit	r2, r2
   2c7b6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2c7ba:	1d13      	adds	r3, r2, #4
   2c7bc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2c7c0:	9101      	str	r1, [sp, #4]
   2c7c2:	e7e0      	b.n	2c786 <alloc_chunk+0x48>

0002c7c4 <free_list_add>:
{
   2c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c7c8:	4604      	mov	r4, r0
   2c7ca:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   2c7cc:	f7ff fef3 	bl	2c5b6 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2c7d0:	68a3      	ldr	r3, [r4, #8]
   2c7d2:	4601      	mov	r1, r0
   2c7d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c7d8:	d301      	bcc.n	2c7de <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2c7da:	2801      	cmp	r0, #1
   2c7dc:	d035      	beq.n	2c84a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c7de:	4620      	mov	r0, r4
   2c7e0:	f7ff ff15 	bl	2c60e <bucket_idx>
	if (b->next == 0) {
   2c7e4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2c7e8:	6916      	ldr	r6, [r2, #16]
   2c7ea:	b99e      	cbnz	r6, 2c814 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2c7ec:	2301      	movs	r3, #1
   2c7ee:	fa03 f000 	lsl.w	r0, r3, r0
   2c7f2:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2c7f4:	4629      	mov	r1, r5
   2c7f6:	4303      	orrs	r3, r0
   2c7f8:	60e3      	str	r3, [r4, #12]
   2c7fa:	4620      	mov	r0, r4
		b->next = c;
   2c7fc:	6115      	str	r5, [r2, #16]
   2c7fe:	462b      	mov	r3, r5
   2c800:	2202      	movs	r2, #2
   2c802:	f7ff fecd 	bl	2c5a0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2c806:	2203      	movs	r2, #3
   2c808:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2c80a:	4620      	mov	r0, r4
}
   2c80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c810:	f7ff bec6 	b.w	2c5a0 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2c814:	2202      	movs	r2, #2
   2c816:	4631      	mov	r1, r6
   2c818:	4620      	mov	r0, r4
   2c81a:	f7ff feb6 	bl	2c58a <chunk_field>
   2c81e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2c820:	4603      	mov	r3, r0
   2c822:	2202      	movs	r2, #2
   2c824:	4629      	mov	r1, r5
   2c826:	4620      	mov	r0, r4
   2c828:	f7ff feba 	bl	2c5a0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2c82c:	4633      	mov	r3, r6
   2c82e:	2203      	movs	r2, #3
   2c830:	4629      	mov	r1, r5
   2c832:	4620      	mov	r0, r4
   2c834:	f7ff feb4 	bl	2c5a0 <chunk_set>
   2c838:	2203      	movs	r2, #3
   2c83a:	4639      	mov	r1, r7
   2c83c:	462b      	mov	r3, r5
   2c83e:	4620      	mov	r0, r4
   2c840:	f7ff feae 	bl	2c5a0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2c844:	2202      	movs	r2, #2
   2c846:	4631      	mov	r1, r6
   2c848:	e7df      	b.n	2c80a <free_list_add+0x46>
   2c84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c84e <sys_heap_alloc>:
{
   2c84e:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   2c850:	b909      	cbnz	r1, 2c856 <sys_heap_alloc+0x8>
		return NULL;
   2c852:	2000      	movs	r0, #0
}
   2c854:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   2c856:	6804      	ldr	r4, [r0, #0]
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2c858:	4620      	mov	r0, r4
   2c85a:	f7ff fece 	bl	2c5fa <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c85e:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2c860:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c862:	4620      	mov	r0, r4
   2c864:	f7ff ff6b 	bl	2c73e <alloc_chunk>
	if (c == 0) {
   2c868:	4605      	mov	r5, r0
   2c86a:	2800      	cmp	r0, #0
   2c86c:	d0f1      	beq.n	2c852 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   2c86e:	4601      	mov	r1, r0
   2c870:	4620      	mov	r0, r4
   2c872:	f7ff fea0 	bl	2c5b6 <chunk_size>
   2c876:	42b0      	cmp	r0, r6
   2c878:	d909      	bls.n	2c88e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2c87a:	442e      	add	r6, r5
   2c87c:	4629      	mov	r1, r5
   2c87e:	4620      	mov	r0, r4
   2c880:	4632      	mov	r2, r6
   2c882:	f7ff feef 	bl	2c664 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2c886:	4631      	mov	r1, r6
   2c888:	4620      	mov	r0, r4
   2c88a:	f7ff ff9b 	bl	2c7c4 <free_list_add>
	set_chunk_used(h, c, true);
   2c88e:	4620      	mov	r0, r4
   2c890:	2201      	movs	r2, #1
   2c892:	4629      	mov	r1, r5
   2c894:	f7ff fe95 	bl	2c5c2 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   2c898:	68a3      	ldr	r3, [r4, #8]
   2c89a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c89e:	bf2c      	ite	cs
   2c8a0:	2008      	movcs	r0, #8
   2c8a2:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2c8a4:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   2c8a8:	4420      	add	r0, r4
	return chunk_mem(h, c);
   2c8aa:	e7d3      	b.n	2c854 <sys_heap_alloc+0x6>

0002c8ac <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2c8ac:	4040      	eors	r0, r0
   2c8ae:	f380 8811 	msr	BASEPRI, r0
   2c8b2:	f04f 0004 	mov.w	r0, #4
   2c8b6:	df02      	svc	2
}
   2c8b8:	4770      	bx	lr

0002c8ba <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_DEMO_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_DEMO_LOG_LEVEL, 4);

GEN_ABS_SYM_END
   2c8ba:	4770      	bx	lr

0002c8bc <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2c8bc:	f7f5 bb1e 	b.w	21efc <SystemInit>

0002c8c0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2c8c0:	2300      	movs	r3, #0
	list->head = NULL;
   2c8c2:	e9c0 3300 	strd	r3, r3, [r0]
}
   2c8c6:	4770      	bx	lr

0002c8c8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2c8c8:	6803      	ldr	r3, [r0, #0]
   2c8ca:	b923      	cbnz	r3, 2c8d6 <log_list_add_tail+0xe>
		list->head = msg;
   2c8cc:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   2c8ce:	2300      	movs	r3, #0
	list->tail = msg;
   2c8d0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2c8d2:	600b      	str	r3, [r1, #0]
}
   2c8d4:	4770      	bx	lr
		list->tail->next = msg;
   2c8d6:	6843      	ldr	r3, [r0, #4]
   2c8d8:	6019      	str	r1, [r3, #0]
   2c8da:	e7f8      	b.n	2c8ce <log_list_add_tail+0x6>

0002c8dc <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2c8dc:	6800      	ldr	r0, [r0, #0]
   2c8de:	4770      	bx	lr

0002c8e0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   2c8e0:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   2c8e2:	b10b      	cbz	r3, 2c8e8 <log_list_head_get+0x8>
		list->head = list->head->next;
   2c8e4:	681a      	ldr	r2, [r3, #0]
   2c8e6:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   2c8e8:	4618      	mov	r0, r3
   2c8ea:	4770      	bx	lr

0002c8ec <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   2c8ec:	6843      	ldr	r3, [r0, #4]
}
   2c8ee:	7958      	ldrb	r0, [r3, #5]
   2c8f0:	4770      	bx	lr

0002c8f2 <z_log_msg_std_alloc>:
{
   2c8f2:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2c8f4:	f7e6 fd66 	bl	133c4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   2c8f8:	b118      	cbz	r0, 2c902 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   2c8fa:	2301      	movs	r3, #1
   2c8fc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2c8fe:	2300      	movs	r3, #0
   2c900:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   2c902:	bd08      	pop	{r3, pc}

0002c904 <k_cycle_get_32_wrapper>:
   2c904:	f7e7 bdd2 	b.w	144ac <z_timer_cycle_get_32>

0002c908 <dummy_timestamp>:
   2c908:	2000      	movs	r0, #0
   2c90a:	4770      	bx	lr

0002c90c <log_0>:
{
   2c90c:	b513      	push	{r0, r1, r4, lr}
   2c90e:	4604      	mov	r4, r0
   2c910:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   2c912:	f7ff ffee 	bl	2c8f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c916:	b130      	cbz	r0, 2c926 <log_0+0x1a>
		msg_finalize(msg, src_level);
   2c918:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c91a:	6104      	str	r4, [r0, #16]
}
   2c91c:	b002      	add	sp, #8
   2c91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2c922:	f7e6 bc55 	b.w	131d0 <msg_finalize>
}
   2c926:	b002      	add	sp, #8
   2c928:	bd10      	pop	{r4, pc}

0002c92a <log_1>:
{
   2c92a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c92c:	460c      	mov	r4, r1
   2c92e:	4611      	mov	r1, r2
   2c930:	4605      	mov	r5, r0
   2c932:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c934:	f7ff ffdd 	bl	2c8f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c938:	b160      	cbz	r0, 2c954 <log_1+0x2a>
		msg->str = str;
   2c93a:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2c93c:	2501      	movs	r5, #1
   2c93e:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   2c940:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   2c942:	f365 1207 	bfi	r2, r5, #4, #4
   2c946:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   2c948:	9901      	ldr	r1, [sp, #4]
}
   2c94a:	b003      	add	sp, #12
   2c94c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   2c950:	f7e6 bc3e 	b.w	131d0 <msg_finalize>
}
   2c954:	b003      	add	sp, #12
   2c956:	bd30      	pop	{r4, r5, pc}

0002c958 <log_2>:
{
   2c958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c95a:	460e      	mov	r6, r1
   2c95c:	4619      	mov	r1, r3
   2c95e:	4607      	mov	r7, r0
   2c960:	4615      	mov	r5, r2
   2c962:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c964:	f7ff ffc5 	bl	2c8f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c968:	b168      	cbz	r0, 2c986 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   2c96a:	2202      	movs	r2, #2
   2c96c:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2c96e:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   2c972:	f362 1307 	bfi	r3, r2, #4, #4
   2c976:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2c978:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c97a:	6107      	str	r7, [r0, #16]
}
   2c97c:	b003      	add	sp, #12
   2c97e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   2c982:	f7e6 bc25 	b.w	131d0 <msg_finalize>
}
   2c986:	b003      	add	sp, #12
   2c988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c98a <log_3>:
{
   2c98a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c98e:	460f      	mov	r7, r1
   2c990:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   2c994:	4680      	mov	r8, r0
   2c996:	4616      	mov	r6, r2
   2c998:	461d      	mov	r5, r3
   2c99a:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c99c:	f7ff ffa9 	bl	2c8f2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c9a0:	b178      	cbz	r0, 2c9c2 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2c9a2:	2203      	movs	r2, #3
   2c9a4:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2c9a6:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   2c9aa:	f362 1307 	bfi	r3, r2, #4, #4
   2c9ae:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2c9b0:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c9b2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   2c9b6:	61c5      	str	r5, [r0, #28]
}
   2c9b8:	b002      	add	sp, #8
   2c9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2c9be:	f7e6 bc07 	b.w	131d0 <msg_finalize>
}
   2c9c2:	b002      	add	sp, #8
   2c9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c9c8 <log_n>:
{
   2c9c8:	b510      	push	{r4, lr}
   2c9ca:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2c9cc:	f7e6 fd4c 	bl	13468 <log_msg_create_n>
		if (msg == NULL) {
   2c9d0:	b120      	cbz	r0, 2c9dc <log_n+0x14>
		msg_finalize(msg, src_level);
   2c9d2:	4621      	mov	r1, r4
}
   2c9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2c9d8:	f7e6 bbfa 	b.w	131d0 <msg_finalize>
}
   2c9dc:	bd10      	pop	{r4, pc}

0002c9de <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2c9de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c9e2:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c9e4:	8903      	ldrh	r3, [r0, #8]
{
   2c9e6:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c9e8:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2c9ec:	42a3      	cmp	r3, r4
{
   2c9ee:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   2c9f2:	d803      	bhi.n	2c9fc <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   2c9f4:	2300      	movs	r3, #0
   2c9f6:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2c9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   2c9fc:	6811      	ldr	r1, [r2, #0]
   2c9fe:	4421      	add	r1, r4
   2ca00:	4299      	cmp	r1, r3
		*length = available_len - offset;
   2ca02:	bf84      	itt	hi
   2ca04:	1b19      	subhi	r1, r3, r4
   2ca06:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2ca08:	2b0c      	cmp	r3, #12
	req_len = *length;
   2ca0a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2ca0e:	d92b      	bls.n	2ca68 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   2ca10:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2ca12:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2ca16:	d82e      	bhi.n	2ca76 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2ca18:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   2ca1a:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2ca1c:	454b      	cmp	r3, r9
   2ca1e:	bf28      	it	cs
   2ca20:	464b      	movcs	r3, r9
   2ca22:	4420      	add	r0, r4
   2ca24:	461d      	mov	r5, r3
   2ca26:	461a      	mov	r2, r3
		if (put_op) {
   2ca28:	b317      	cbz	r7, 2ca70 <log_msg_hexdump_data_op+0x92>
   2ca2a:	4631      	mov	r1, r6
   2ca2c:	f7e0 f88e 	bl	cb4c <memcpy>
		req_len -= cpy_len;
   2ca30:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2ca34:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2ca36:	f1b9 0f00 	cmp.w	r9, #0
   2ca3a:	d0dd      	beq.n	2c9f8 <log_msg_hexdump_data_op+0x1a>
   2ca3c:	f1b8 0f00 	cmp.w	r8, #0
   2ca40:	d0da      	beq.n	2c9f8 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2ca42:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2ca46:	454d      	cmp	r5, r9
   2ca48:	bf28      	it	cs
   2ca4a:	464d      	movcs	r5, r9
		if (put_op) {
   2ca4c:	1d20      	adds	r0, r4, #4
   2ca4e:	462a      	mov	r2, r5
   2ca50:	4440      	add	r0, r8
   2ca52:	b1bf      	cbz	r7, 2ca84 <log_msg_hexdump_data_op+0xa6>
   2ca54:	4631      	mov	r1, r6
   2ca56:	f7e0 f879 	bl	cb4c <memcpy>
		offset = 0;
   2ca5a:	2400      	movs	r4, #0
		cont = cont->next;
   2ca5c:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   2ca60:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2ca64:	442e      	add	r6, r5
   2ca66:	e7e6      	b.n	2ca36 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   2ca68:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   2ca6c:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   2ca6e:	e7d5      	b.n	2ca1c <log_msg_hexdump_data_op+0x3e>
   2ca70:	4601      	mov	r1, r0
   2ca72:	4630      	mov	r0, r6
   2ca74:	e7da      	b.n	2ca2c <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2ca76:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2ca78:	2c1b      	cmp	r4, #27
   2ca7a:	d9dc      	bls.n	2ca36 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   2ca7c:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   2ca80:	3c1c      	subs	r4, #28
   2ca82:	e7f9      	b.n	2ca78 <log_msg_hexdump_data_op+0x9a>
   2ca84:	4601      	mov	r1, r0
   2ca86:	4630      	mov	r0, r6
   2ca88:	e7e5      	b.n	2ca56 <log_msg_hexdump_data_op+0x78>

0002ca8a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2ca8a:	3004      	adds	r0, #4
   2ca8c:	e8d0 3fef 	ldaex	r3, [r0]
   2ca90:	3301      	adds	r3, #1
   2ca92:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2ca96:	2a00      	cmp	r2, #0
   2ca98:	d1f8      	bne.n	2ca8c <log_msg_get+0x2>
}
   2ca9a:	4770      	bx	lr

0002ca9c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   2ca9c:	7a40      	ldrb	r0, [r0, #9]
}
   2ca9e:	0900      	lsrs	r0, r0, #4
   2caa0:	4770      	bx	lr

0002caa2 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2caa2:	7a43      	ldrb	r3, [r0, #9]
   2caa4:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2caa8:	ea4f 1213 	mov.w	r2, r3, lsr #4
   2caac:	d216      	bcs.n	2cadc <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2caae:	2a03      	cmp	r2, #3
   2cab0:	d803      	bhi.n	2caba <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2cab2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2cab6:	6948      	ldr	r0, [r1, #20]
   2cab8:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2caba:	2901      	cmp	r1, #1
   2cabc:	d803      	bhi.n	2cac6 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   2cabe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2cac2:	6988      	ldr	r0, [r1, #24]
   2cac4:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2cac6:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2cac8:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2caca:	2906      	cmp	r1, #6
   2cacc:	d803      	bhi.n	2cad6 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2cace:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2cad2:	6848      	ldr	r0, [r1, #4]
   2cad4:	4770      	bx	lr
		cont = cont->next;
   2cad6:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2cad8:	3907      	subs	r1, #7
		cont = cont->next;
   2cada:	e7f6      	b.n	2caca <log_msg_arg_get+0x28>
		return 0;
   2cadc:	2000      	movs	r0, #0
}
   2cade:	4770      	bx	lr

0002cae0 <log_msg_put>:
{
   2cae0:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2cae2:	1d02      	adds	r2, r0, #4
   2cae4:	e8d2 1fef 	ldaex	r1, [r2]
   2cae8:	3901      	subs	r1, #1
   2caea:	e8c2 1fec 	stlex	ip, r1, [r2]
   2caee:	f1bc 0f00 	cmp.w	ip, #0
   2caf2:	d1f7      	bne.n	2cae4 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   2caf4:	685b      	ldr	r3, [r3, #4]
   2caf6:	b90b      	cbnz	r3, 2cafc <log_msg_put+0x1c>
		msg_free(msg);
   2caf8:	f7e6 bc78 	b.w	133ec <msg_free>
}
   2cafc:	4770      	bx	lr

0002cafe <log_msg_str_get>:
}
   2cafe:	6900      	ldr	r0, [r0, #16]
   2cb00:	4770      	bx	lr

0002cb02 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2cb02:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2cb04:	2400      	movs	r4, #0
   2cb06:	9400      	str	r4, [sp, #0]
   2cb08:	f7ff ff69 	bl	2c9de <log_msg_hexdump_data_op>
}
   2cb0c:	b002      	add	sp, #8
   2cb0e:	bd10      	pop	{r4, pc}

0002cb10 <buffer_write>:
{
   2cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cb12:	4606      	mov	r6, r0
   2cb14:	460d      	mov	r5, r1
   2cb16:	4614      	mov	r4, r2
   2cb18:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2cb1a:	4621      	mov	r1, r4
   2cb1c:	4628      	mov	r0, r5
   2cb1e:	463a      	mov	r2, r7
   2cb20:	47b0      	blx	r6
	} while (len != 0);
   2cb22:	1a24      	subs	r4, r4, r0
		buf += processed;
   2cb24:	4405      	add	r5, r0
	} while (len != 0);
   2cb26:	d1f8      	bne.n	2cb1a <buffer_write+0xa>
}
   2cb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cb2a <std_print>:
{
   2cb2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cb2e:	b08e      	sub	sp, #56	; 0x38
   2cb30:	af0e      	add	r7, sp, #56	; 0x38
   2cb32:	4680      	mov	r8, r0
   2cb34:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   2cb36:	f7ff ffe2 	bl	2cafe <log_msg_str_get>
   2cb3a:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2cb3c:	4640      	mov	r0, r8
   2cb3e:	f7ff ffad 	bl	2ca9c <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   2cb42:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   2cb46:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   2cb48:	0083      	lsls	r3, r0, #2
   2cb4a:	3307      	adds	r3, #7
   2cb4c:	f023 0307 	bic.w	r3, r3, #7
   2cb50:	ebad 0d03 	sub.w	sp, sp, r3
   2cb54:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2cb56:	45d1      	cmp	r9, sl
   2cb58:	d116      	bne.n	2cb88 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   2cb5a:	4640      	mov	r0, r8
   2cb5c:	f7ff ff9e 	bl	2ca9c <log_msg_nargs_get>
   2cb60:	280f      	cmp	r0, #15
   2cb62:	d81e      	bhi.n	2cba2 <std_print+0x78>
   2cb64:	e8df f010 	tbh	[pc, r0, lsl #1]
   2cb68:	00200019 	.word	0x00200019
   2cb6c:	002d0026 	.word	0x002d0026
   2cb70:	00410036 	.word	0x00410036
   2cb74:	005d004e 	.word	0x005d004e
   2cb78:	0081006e 	.word	0x0081006e
   2cb7c:	00ad0096 	.word	0x00ad0096
   2cb80:	00e100c6 	.word	0x00e100c6
   2cb84:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   2cb88:	4649      	mov	r1, r9
   2cb8a:	4640      	mov	r0, r8
   2cb8c:	f7ff ff89 	bl	2caa2 <log_msg_arg_get>
   2cb90:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   2cb94:	f109 0901 	add.w	r9, r9, #1
   2cb98:	e7dd      	b.n	2cb56 <std_print+0x2c>
		print_formatted(log_output, str);
   2cb9a:	4631      	mov	r1, r6
   2cb9c:	4628      	mov	r0, r5
   2cb9e:	f7e6 fccb 	bl	13538 <print_formatted>
}
   2cba2:	46bd      	mov	sp, r7
   2cba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   2cba8:	4631      	mov	r1, r6
   2cbaa:	4628      	mov	r0, r5
   2cbac:	6822      	ldr	r2, [r4, #0]
   2cbae:	f7e6 fcc3 	bl	13538 <print_formatted>
		break;
   2cbb2:	e7f6      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   2cbb4:	4631      	mov	r1, r6
   2cbb6:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cbba:	4628      	mov	r0, r5
   2cbbc:	f7e6 fcbc 	bl	13538 <print_formatted>
		break;
   2cbc0:	e7ef      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   2cbc2:	68a3      	ldr	r3, [r4, #8]
   2cbc4:	4631      	mov	r1, r6
   2cbc6:	9300      	str	r3, [sp, #0]
   2cbc8:	4628      	mov	r0, r5
   2cbca:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cbce:	f7e6 fcb3 	bl	13538 <print_formatted>
		break;
   2cbd2:	e7e6      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cbd4:	68e3      	ldr	r3, [r4, #12]
   2cbd6:	4631      	mov	r1, r6
   2cbd8:	9301      	str	r3, [sp, #4]
   2cbda:	68a3      	ldr	r3, [r4, #8]
   2cbdc:	4628      	mov	r0, r5
   2cbde:	9300      	str	r3, [sp, #0]
   2cbe0:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cbe4:	f7e6 fca8 	bl	13538 <print_formatted>
		break;
   2cbe8:	e7db      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cbea:	6923      	ldr	r3, [r4, #16]
   2cbec:	4631      	mov	r1, r6
   2cbee:	9302      	str	r3, [sp, #8]
   2cbf0:	68e3      	ldr	r3, [r4, #12]
   2cbf2:	4628      	mov	r0, r5
   2cbf4:	9301      	str	r3, [sp, #4]
   2cbf6:	68a3      	ldr	r3, [r4, #8]
   2cbf8:	9300      	str	r3, [sp, #0]
   2cbfa:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cbfe:	f7e6 fc9b 	bl	13538 <print_formatted>
		break;
   2cc02:	e7ce      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc04:	6963      	ldr	r3, [r4, #20]
   2cc06:	4631      	mov	r1, r6
   2cc08:	9303      	str	r3, [sp, #12]
   2cc0a:	6923      	ldr	r3, [r4, #16]
   2cc0c:	4628      	mov	r0, r5
   2cc0e:	9302      	str	r3, [sp, #8]
   2cc10:	68e3      	ldr	r3, [r4, #12]
   2cc12:	9301      	str	r3, [sp, #4]
   2cc14:	68a3      	ldr	r3, [r4, #8]
   2cc16:	9300      	str	r3, [sp, #0]
   2cc18:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cc1c:	f7e6 fc8c 	bl	13538 <print_formatted>
		break;
   2cc20:	e7bf      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc22:	69a3      	ldr	r3, [r4, #24]
   2cc24:	4631      	mov	r1, r6
   2cc26:	9304      	str	r3, [sp, #16]
   2cc28:	6963      	ldr	r3, [r4, #20]
   2cc2a:	4628      	mov	r0, r5
   2cc2c:	9303      	str	r3, [sp, #12]
   2cc2e:	6923      	ldr	r3, [r4, #16]
   2cc30:	9302      	str	r3, [sp, #8]
   2cc32:	68e3      	ldr	r3, [r4, #12]
   2cc34:	9301      	str	r3, [sp, #4]
   2cc36:	68a3      	ldr	r3, [r4, #8]
   2cc38:	9300      	str	r3, [sp, #0]
   2cc3a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cc3e:	f7e6 fc7b 	bl	13538 <print_formatted>
		break;
   2cc42:	e7ae      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc44:	69e3      	ldr	r3, [r4, #28]
   2cc46:	4631      	mov	r1, r6
   2cc48:	9305      	str	r3, [sp, #20]
   2cc4a:	69a3      	ldr	r3, [r4, #24]
   2cc4c:	4628      	mov	r0, r5
   2cc4e:	9304      	str	r3, [sp, #16]
   2cc50:	6963      	ldr	r3, [r4, #20]
   2cc52:	9303      	str	r3, [sp, #12]
   2cc54:	6923      	ldr	r3, [r4, #16]
   2cc56:	9302      	str	r3, [sp, #8]
   2cc58:	68e3      	ldr	r3, [r4, #12]
   2cc5a:	9301      	str	r3, [sp, #4]
   2cc5c:	68a3      	ldr	r3, [r4, #8]
   2cc5e:	9300      	str	r3, [sp, #0]
   2cc60:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cc64:	f7e6 fc68 	bl	13538 <print_formatted>
		break;
   2cc68:	e79b      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc6a:	6a23      	ldr	r3, [r4, #32]
   2cc6c:	4631      	mov	r1, r6
   2cc6e:	9306      	str	r3, [sp, #24]
   2cc70:	69e3      	ldr	r3, [r4, #28]
   2cc72:	4628      	mov	r0, r5
   2cc74:	9305      	str	r3, [sp, #20]
   2cc76:	69a3      	ldr	r3, [r4, #24]
   2cc78:	9304      	str	r3, [sp, #16]
   2cc7a:	6963      	ldr	r3, [r4, #20]
   2cc7c:	9303      	str	r3, [sp, #12]
   2cc7e:	6923      	ldr	r3, [r4, #16]
   2cc80:	9302      	str	r3, [sp, #8]
   2cc82:	68e3      	ldr	r3, [r4, #12]
   2cc84:	9301      	str	r3, [sp, #4]
   2cc86:	68a3      	ldr	r3, [r4, #8]
   2cc88:	9300      	str	r3, [sp, #0]
   2cc8a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cc8e:	f7e6 fc53 	bl	13538 <print_formatted>
		break;
   2cc92:	e786      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cc96:	4631      	mov	r1, r6
   2cc98:	9307      	str	r3, [sp, #28]
   2cc9a:	6a23      	ldr	r3, [r4, #32]
   2cc9c:	4628      	mov	r0, r5
   2cc9e:	9306      	str	r3, [sp, #24]
   2cca0:	69e3      	ldr	r3, [r4, #28]
   2cca2:	9305      	str	r3, [sp, #20]
   2cca4:	69a3      	ldr	r3, [r4, #24]
   2cca6:	9304      	str	r3, [sp, #16]
   2cca8:	6963      	ldr	r3, [r4, #20]
   2ccaa:	9303      	str	r3, [sp, #12]
   2ccac:	6923      	ldr	r3, [r4, #16]
   2ccae:	9302      	str	r3, [sp, #8]
   2ccb0:	68e3      	ldr	r3, [r4, #12]
   2ccb2:	9301      	str	r3, [sp, #4]
   2ccb4:	68a3      	ldr	r3, [r4, #8]
   2ccb6:	9300      	str	r3, [sp, #0]
   2ccb8:	e9d4 2300 	ldrd	r2, r3, [r4]
   2ccbc:	f7e6 fc3c 	bl	13538 <print_formatted>
		break;
   2ccc0:	e76f      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2ccc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2ccc4:	4631      	mov	r1, r6
   2ccc6:	9308      	str	r3, [sp, #32]
   2ccc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ccca:	4628      	mov	r0, r5
   2cccc:	9307      	str	r3, [sp, #28]
   2ccce:	6a23      	ldr	r3, [r4, #32]
   2ccd0:	9306      	str	r3, [sp, #24]
   2ccd2:	69e3      	ldr	r3, [r4, #28]
   2ccd4:	9305      	str	r3, [sp, #20]
   2ccd6:	69a3      	ldr	r3, [r4, #24]
   2ccd8:	9304      	str	r3, [sp, #16]
   2ccda:	6963      	ldr	r3, [r4, #20]
   2ccdc:	9303      	str	r3, [sp, #12]
   2ccde:	6923      	ldr	r3, [r4, #16]
   2cce0:	9302      	str	r3, [sp, #8]
   2cce2:	68e3      	ldr	r3, [r4, #12]
   2cce4:	9301      	str	r3, [sp, #4]
   2cce6:	68a3      	ldr	r3, [r4, #8]
   2cce8:	9300      	str	r3, [sp, #0]
   2ccea:	e9d4 2300 	ldrd	r2, r3, [r4]
   2ccee:	f7e6 fc23 	bl	13538 <print_formatted>
		break;
   2ccf2:	e756      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2ccf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ccf6:	4631      	mov	r1, r6
   2ccf8:	9309      	str	r3, [sp, #36]	; 0x24
   2ccfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2ccfc:	4628      	mov	r0, r5
   2ccfe:	9308      	str	r3, [sp, #32]
   2cd00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cd02:	9307      	str	r3, [sp, #28]
   2cd04:	6a23      	ldr	r3, [r4, #32]
   2cd06:	9306      	str	r3, [sp, #24]
   2cd08:	69e3      	ldr	r3, [r4, #28]
   2cd0a:	9305      	str	r3, [sp, #20]
   2cd0c:	69a3      	ldr	r3, [r4, #24]
   2cd0e:	9304      	str	r3, [sp, #16]
   2cd10:	6963      	ldr	r3, [r4, #20]
   2cd12:	9303      	str	r3, [sp, #12]
   2cd14:	6923      	ldr	r3, [r4, #16]
   2cd16:	9302      	str	r3, [sp, #8]
   2cd18:	68e3      	ldr	r3, [r4, #12]
   2cd1a:	9301      	str	r3, [sp, #4]
   2cd1c:	68a3      	ldr	r3, [r4, #8]
   2cd1e:	9300      	str	r3, [sp, #0]
   2cd20:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cd24:	f7e6 fc08 	bl	13538 <print_formatted>
		break;
   2cd28:	e73b      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cd2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2cd2c:	4631      	mov	r1, r6
   2cd2e:	930a      	str	r3, [sp, #40]	; 0x28
   2cd30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2cd32:	4628      	mov	r0, r5
   2cd34:	9309      	str	r3, [sp, #36]	; 0x24
   2cd36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2cd38:	9308      	str	r3, [sp, #32]
   2cd3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cd3c:	9307      	str	r3, [sp, #28]
   2cd3e:	6a23      	ldr	r3, [r4, #32]
   2cd40:	9306      	str	r3, [sp, #24]
   2cd42:	69e3      	ldr	r3, [r4, #28]
   2cd44:	9305      	str	r3, [sp, #20]
   2cd46:	69a3      	ldr	r3, [r4, #24]
   2cd48:	9304      	str	r3, [sp, #16]
   2cd4a:	6963      	ldr	r3, [r4, #20]
   2cd4c:	9303      	str	r3, [sp, #12]
   2cd4e:	6923      	ldr	r3, [r4, #16]
   2cd50:	9302      	str	r3, [sp, #8]
   2cd52:	68e3      	ldr	r3, [r4, #12]
   2cd54:	9301      	str	r3, [sp, #4]
   2cd56:	68a3      	ldr	r3, [r4, #8]
   2cd58:	9300      	str	r3, [sp, #0]
   2cd5a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cd5e:	f7e6 fbeb 	bl	13538 <print_formatted>
		break;
   2cd62:	e71e      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cd64:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2cd66:	4631      	mov	r1, r6
   2cd68:	930b      	str	r3, [sp, #44]	; 0x2c
   2cd6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2cd6c:	4628      	mov	r0, r5
   2cd6e:	930a      	str	r3, [sp, #40]	; 0x28
   2cd70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2cd72:	9309      	str	r3, [sp, #36]	; 0x24
   2cd74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2cd76:	9308      	str	r3, [sp, #32]
   2cd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cd7a:	9307      	str	r3, [sp, #28]
   2cd7c:	6a23      	ldr	r3, [r4, #32]
   2cd7e:	9306      	str	r3, [sp, #24]
   2cd80:	69e3      	ldr	r3, [r4, #28]
   2cd82:	9305      	str	r3, [sp, #20]
   2cd84:	69a3      	ldr	r3, [r4, #24]
   2cd86:	9304      	str	r3, [sp, #16]
   2cd88:	6963      	ldr	r3, [r4, #20]
   2cd8a:	9303      	str	r3, [sp, #12]
   2cd8c:	6923      	ldr	r3, [r4, #16]
   2cd8e:	9302      	str	r3, [sp, #8]
   2cd90:	68e3      	ldr	r3, [r4, #12]
   2cd92:	9301      	str	r3, [sp, #4]
   2cd94:	68a3      	ldr	r3, [r4, #8]
   2cd96:	9300      	str	r3, [sp, #0]
   2cd98:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cd9c:	f7e6 fbcc 	bl	13538 <print_formatted>
		break;
   2cda0:	e6ff      	b.n	2cba2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cda2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2cda4:	4631      	mov	r1, r6
   2cda6:	930c      	str	r3, [sp, #48]	; 0x30
   2cda8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2cdaa:	4628      	mov	r0, r5
   2cdac:	930b      	str	r3, [sp, #44]	; 0x2c
   2cdae:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2cdb0:	930a      	str	r3, [sp, #40]	; 0x28
   2cdb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2cdb4:	9309      	str	r3, [sp, #36]	; 0x24
   2cdb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2cdb8:	9308      	str	r3, [sp, #32]
   2cdba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cdbc:	9307      	str	r3, [sp, #28]
   2cdbe:	6a23      	ldr	r3, [r4, #32]
   2cdc0:	9306      	str	r3, [sp, #24]
   2cdc2:	69e3      	ldr	r3, [r4, #28]
   2cdc4:	9305      	str	r3, [sp, #20]
   2cdc6:	69a3      	ldr	r3, [r4, #24]
   2cdc8:	9304      	str	r3, [sp, #16]
   2cdca:	6963      	ldr	r3, [r4, #20]
   2cdcc:	9303      	str	r3, [sp, #12]
   2cdce:	6923      	ldr	r3, [r4, #16]
   2cdd0:	9302      	str	r3, [sp, #8]
   2cdd2:	68e3      	ldr	r3, [r4, #12]
   2cdd4:	9301      	str	r3, [sp, #4]
   2cdd6:	68a3      	ldr	r3, [r4, #8]
   2cdd8:	9300      	str	r3, [sp, #0]
   2cdda:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cdde:	f7e6 fbab 	bl	13538 <print_formatted>
}
   2cde2:	e6de      	b.n	2cba2 <std_print+0x78>

0002cde4 <log_output_flush>:
		     log_output->control_block->offset,
   2cde4:	6842      	ldr	r2, [r0, #4]
{
   2cde6:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   2cde8:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   2cdec:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   2cdee:	6881      	ldr	r1, [r0, #8]
   2cdf0:	6800      	ldr	r0, [r0, #0]
   2cdf2:	f7ff fe8d 	bl	2cb10 <buffer_write>
	log_output->control_block->offset = 0;
   2cdf6:	2200      	movs	r2, #0
   2cdf8:	6863      	ldr	r3, [r4, #4]
   2cdfa:	601a      	str	r2, [r3, #0]
}
   2cdfc:	bd10      	pop	{r4, pc}

0002cdfe <sntp_init>:
{
   2cdfe:	b570      	push	{r4, r5, r6, lr}
   2ce00:	460d      	mov	r5, r1
   2ce02:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2ce04:	4604      	mov	r4, r0
   2ce06:	b330      	cbz	r0, 2ce56 <sntp_init+0x58>
   2ce08:	b329      	cbz	r1, 2ce56 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2ce0a:	2214      	movs	r2, #20
   2ce0c:	2100      	movs	r1, #0
   2ce0e:	f7f9 fb13 	bl	26438 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2ce12:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2ce14:	2211      	movs	r2, #17
   2ce16:	2102      	movs	r1, #2
   2ce18:	f7e6 fe08 	bl	13a2c <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2ce1c:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2ce1e:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2ce20:	da04      	bge.n	2ce2c <sntp_init+0x2e>
		return -errno;
   2ce22:	f000 f974 	bl	2d10e <__errno>
   2ce26:	6800      	ldr	r0, [r0, #0]
   2ce28:	4240      	negs	r0, r0
}
   2ce2a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2ce2c:	4632      	mov	r2, r6
   2ce2e:	4629      	mov	r1, r5
   2ce30:	f000 f843 	bl	2ceba <z_impl_zsock_connect>
	if (ret < 0) {
   2ce34:	2800      	cmp	r0, #0
   2ce36:	68e0      	ldr	r0, [r4, #12]
   2ce38:	da02      	bge.n	2ce40 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2ce3a:	f000 f827 	bl	2ce8c <z_impl_zsock_close>
   2ce3e:	e7f0      	b.n	2ce22 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ce40:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2ce42:	68a3      	ldr	r3, [r4, #8]
   2ce44:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ce48:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2ce4c:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ce4e:	8091      	strh	r1, [r2, #4]
	return 0;
   2ce50:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2ce52:	60a3      	str	r3, [r4, #8]
	return 0;
   2ce54:	e7e9      	b.n	2ce2a <sntp_init+0x2c>
		return -EFAULT;
   2ce56:	f06f 000d 	mvn.w	r0, #13
   2ce5a:	e7e6      	b.n	2ce2a <sntp_init+0x2c>

0002ce5c <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2ce5c:	b110      	cbz	r0, 2ce64 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2ce5e:	68c0      	ldr	r0, [r0, #12]
   2ce60:	f000 b814 	b.w	2ce8c <z_impl_zsock_close>
	}
}
   2ce64:	4770      	bx	lr

0002ce66 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2ce66:	f7e6 bf59 	b.w	13d1c <socket_offload_getaddrinfo>

0002ce6a <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2ce6a:	f7e6 bf8b 	b.w	13d84 <socket_offload_freeaddrinfo>

0002ce6e <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   2ce6e:	b40c      	push	{r2, r3}
   2ce70:	4603      	mov	r3, r0
   2ce72:	b507      	push	{r0, r1, r2, lr}
   2ce74:	aa04      	add	r2, sp, #16
   2ce76:	4608      	mov	r0, r1
   2ce78:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2ce7c:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2ce7e:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2ce80:	4798      	blx	r3
	va_end(args);

	return res;
}
   2ce82:	b003      	add	sp, #12
   2ce84:	f85d eb04 	ldr.w	lr, [sp], #4
   2ce88:	b002      	add	sp, #8
   2ce8a:	4770      	bx	lr

0002ce8c <z_impl_zsock_close>:
{
   2ce8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2ce8e:	a901      	add	r1, sp, #4
{
   2ce90:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2ce92:	f7e5 f84d 	bl	11f30 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2ce96:	b940      	cbnz	r0, 2ceaa <z_impl_zsock_close+0x1e>
		errno = EBADF;
   2ce98:	f000 f939 	bl	2d10e <__errno>
   2ce9c:	2309      	movs	r3, #9
		return -1;
   2ce9e:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2cea2:	6003      	str	r3, [r0, #0]
}
   2cea4:	4620      	mov	r0, r4
   2cea6:	b003      	add	sp, #12
   2cea8:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   2ceaa:	9b01      	ldr	r3, [sp, #4]
   2ceac:	689b      	ldr	r3, [r3, #8]
   2ceae:	4798      	blx	r3
   2ceb0:	4604      	mov	r4, r0
	z_free_fd(sock);
   2ceb2:	4628      	mov	r0, r5
   2ceb4:	f7e5 f88c 	bl	11fd0 <z_free_fd>
	return ret;
   2ceb8:	e7f4      	b.n	2cea4 <z_impl_zsock_close+0x18>

0002ceba <z_impl_zsock_connect>:
{
   2ceba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2cebc:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cebe:	a903      	add	r1, sp, #12
{
   2cec0:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cec2:	f7e5 f835 	bl	11f30 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2cec6:	b118      	cbz	r0, 2ced0 <z_impl_zsock_connect+0x16>
   2cec8:	9b03      	ldr	r3, [sp, #12]
   2ceca:	9a01      	ldr	r2, [sp, #4]
   2cecc:	695b      	ldr	r3, [r3, #20]
   2cece:	b93b      	cbnz	r3, 2cee0 <z_impl_zsock_connect+0x26>
   2ced0:	f000 f91d 	bl	2d10e <__errno>
   2ced4:	2309      	movs	r3, #9
   2ced6:	6003      	str	r3, [r0, #0]
   2ced8:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cedc:	b004      	add	sp, #16
   2cede:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2cee0:	4621      	mov	r1, r4
   2cee2:	4798      	blx	r3
   2cee4:	e7fa      	b.n	2cedc <z_impl_zsock_connect+0x22>

0002cee6 <z_impl_zsock_sendto>:
{
   2cee6:	b530      	push	{r4, r5, lr}
   2cee8:	b087      	sub	sp, #28
   2ceea:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2ceec:	a905      	add	r1, sp, #20
{
   2ceee:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cef2:	f7e5 f81d 	bl	11f30 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2cef6:	b120      	cbz	r0, 2cf02 <z_impl_zsock_sendto+0x1c>
   2cef8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2cefc:	9905      	ldr	r1, [sp, #20]
   2cefe:	6a0d      	ldr	r5, [r1, #32]
   2cf00:	b93d      	cbnz	r5, 2cf12 <z_impl_zsock_sendto+0x2c>
   2cf02:	f000 f904 	bl	2d10e <__errno>
   2cf06:	2309      	movs	r3, #9
   2cf08:	6003      	str	r3, [r0, #0]
   2cf0a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cf0e:	b007      	add	sp, #28
   2cf10:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2cf12:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cf14:	9101      	str	r1, [sp, #4]
   2cf16:	990a      	ldr	r1, [sp, #40]	; 0x28
   2cf18:	9100      	str	r1, [sp, #0]
   2cf1a:	4621      	mov	r1, r4
   2cf1c:	47a8      	blx	r5
   2cf1e:	e7f6      	b.n	2cf0e <z_impl_zsock_sendto+0x28>

0002cf20 <z_impl_zsock_sendmsg>:
{
   2cf20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2cf22:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cf24:	a903      	add	r1, sp, #12
{
   2cf26:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cf28:	f7e5 f802 	bl	11f30 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2cf2c:	b118      	cbz	r0, 2cf36 <z_impl_zsock_sendmsg+0x16>
   2cf2e:	9b03      	ldr	r3, [sp, #12]
   2cf30:	9a01      	ldr	r2, [sp, #4]
   2cf32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2cf34:	b93b      	cbnz	r3, 2cf46 <z_impl_zsock_sendmsg+0x26>
   2cf36:	f000 f8ea 	bl	2d10e <__errno>
   2cf3a:	2309      	movs	r3, #9
   2cf3c:	6003      	str	r3, [r0, #0]
   2cf3e:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cf42:	b004      	add	sp, #16
   2cf44:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2cf46:	4621      	mov	r1, r4
   2cf48:	4798      	blx	r3
   2cf4a:	e7fa      	b.n	2cf42 <z_impl_zsock_sendmsg+0x22>

0002cf4c <z_impl_zsock_recvfrom>:
{
   2cf4c:	b530      	push	{r4, r5, lr}
   2cf4e:	b087      	sub	sp, #28
   2cf50:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cf52:	a905      	add	r1, sp, #20
{
   2cf54:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cf58:	f7e4 ffea 	bl	11f30 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2cf5c:	b120      	cbz	r0, 2cf68 <z_impl_zsock_recvfrom+0x1c>
   2cf5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2cf62:	9905      	ldr	r1, [sp, #20]
   2cf64:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   2cf66:	b93d      	cbnz	r5, 2cf78 <z_impl_zsock_recvfrom+0x2c>
   2cf68:	f000 f8d1 	bl	2d10e <__errno>
   2cf6c:	2309      	movs	r3, #9
   2cf6e:	6003      	str	r3, [r0, #0]
   2cf70:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cf74:	b007      	add	sp, #28
   2cf76:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2cf78:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cf7a:	9101      	str	r1, [sp, #4]
   2cf7c:	990a      	ldr	r1, [sp, #40]	; 0x28
   2cf7e:	9100      	str	r1, [sp, #0]
   2cf80:	4621      	mov	r1, r4
   2cf82:	47a8      	blx	r5
   2cf84:	e7f6      	b.n	2cf74 <z_impl_zsock_recvfrom+0x28>

0002cf86 <set_starting_state>:
{
   2cf86:	b510      	push	{r4, lr}
	__asm__ volatile(
   2cf88:	f04f 0320 	mov.w	r3, #32
   2cf8c:	f3ef 8211 	mrs	r2, BASEPRI
   2cf90:	f383 8811 	msr	BASEPRI, r3
   2cf94:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cf98:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2cf9a:	f003 0407 	and.w	r4, r3, #7
   2cf9e:	2c01      	cmp	r4, #1
   2cfa0:	d106      	bne.n	2cfb0 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2cfa2:	6001      	str	r1, [r0, #0]
	int err = 0;
   2cfa4:	2000      	movs	r0, #0
	__asm__ volatile(
   2cfa6:	f382 8811 	msr	BASEPRI, r2
   2cfaa:	f3bf 8f6f 	isb	sy
}
   2cfae:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2cfb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2cfb4:	428b      	cmp	r3, r1
		err = -EBUSY;
   2cfb6:	bf14      	ite	ne
   2cfb8:	f04f 30ff 	movne.w	r0, #4294967295
   2cfbc:	f06f 000f 	mvneq.w	r0, #15
   2cfc0:	e7f1      	b.n	2cfa6 <set_starting_state+0x20>

0002cfc2 <set_on_state>:
	__asm__ volatile(
   2cfc2:	f04f 0320 	mov.w	r3, #32
   2cfc6:	f3ef 8211 	mrs	r2, BASEPRI
   2cfca:	f383 8811 	msr	BASEPRI, r3
   2cfce:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2cfd2:	6803      	ldr	r3, [r0, #0]
   2cfd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2cfd8:	f043 0302 	orr.w	r3, r3, #2
   2cfdc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2cfde:	f382 8811 	msr	BASEPRI, r2
   2cfe2:	f3bf 8f6f 	isb	sy
}
   2cfe6:	4770      	bx	lr

0002cfe8 <onoff_started_callback>:
	return &data->mgr[type];
   2cfe8:	68c0      	ldr	r0, [r0, #12]
   2cfea:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2cfec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2cff0:	2100      	movs	r1, #0
   2cff2:	4710      	bx	r2

0002cff4 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2cff4:	2280      	movs	r2, #128	; 0x80
   2cff6:	f7e6 bf5d 	b.w	13eb4 <stop>

0002cffa <blocking_start_callback>:
{
   2cffa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2cffc:	f7f7 bc82 	b.w	24904 <z_impl_k_sem_give>

0002d000 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2d000:	2000      	movs	r0, #0
   2d002:	f7f5 b85b 	b.w	220bc <nrfx_clock_stop>

0002d006 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2d006:	2000      	movs	r0, #0
   2d008:	f7f5 b802 	b.w	22010 <nrfx_clock_start>

0002d00c <api_start>:
{
   2d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   2d00e:	240c      	movs	r4, #12
   2d010:	b2c9      	uxtb	r1, r1
   2d012:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2d014:	68c5      	ldr	r5, [r0, #12]
{
   2d016:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2d018:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2d01c:	2180      	movs	r1, #128	; 0x80
   2d01e:	4428      	add	r0, r5
{
   2d020:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   2d022:	f7ff ffb0 	bl	2cf86 <set_starting_state>
	if (err < 0) {
   2d026:	2800      	cmp	r0, #0
   2d028:	db08      	blt.n	2d03c <api_start+0x30>
	subdata->cb = data->cb;
   2d02a:	687b      	ldr	r3, [r7, #4]
   2d02c:	4425      	add	r5, r4
   2d02e:	642b      	str	r3, [r5, #64]	; 0x40
	subdata->user_data = data->user_data;
   2d030:	68bb      	ldr	r3, [r7, #8]
   2d032:	646b      	str	r3, [r5, #68]	; 0x44
	 get_sub_config(dev, type)->start();
   2d034:	6873      	ldr	r3, [r6, #4]
   2d036:	591b      	ldr	r3, [r3, r4]
   2d038:	4798      	blx	r3
	return 0;
   2d03a:	2000      	movs	r0, #0
}
   2d03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d03e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2d03e:	4770      	bx	lr

0002d040 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   2d040:	b510      	push	{r4, lr}
   2d042:	b40f      	push	{r0, r1, r2, r3}
   2d044:	f7f6 fc10 	bl	23868 <k_sched_lock>
   2d048:	bc0f      	pop	{r0, r1, r2, r3}
   2d04a:	f7da ffcd 	bl	7fe8 <spm_request_random_number_nse>
   2d04e:	b40f      	push	{r0, r1, r2, r3}
   2d050:	f7f6 fd20 	bl	23a94 <k_sched_unlock>
   2d054:	bc0f      	pop	{r0, r1, r2, r3}
   2d056:	bd10      	pop	{r4, pc}

0002d058 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2d058:	2100      	movs	r1, #0
   2d05a:	2001      	movs	r0, #1
   2d05c:	f7e7 bbba 	b.w	147d4 <z_arm_fatal_error>

0002d060 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2d060:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2d062:	f383 880b 	msr	PSPLIM, r3
}
   2d066:	4770      	bx	lr

0002d068 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2d068:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2d06a:	6800      	ldr	r0, [r0, #0]
   2d06c:	f7e7 bbb2 	b.w	147d4 <z_arm_fatal_error>

0002d070 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2d070:	b508      	push	{r3, lr}
	handler();
   2d072:	f7e7 fc23 	bl	148bc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2d076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2d07a:	f7e7 bee3 	b.w	14e44 <z_arm_exc_exit>

0002d07e <mpu_configure_region>:
{
   2d07e:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2d080:	890a      	ldrh	r2, [r1, #8]
   2d082:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   2d084:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   2d086:	684c      	ldr	r4, [r1, #4]
   2d088:	f002 021f 	and.w	r2, r2, #31
{
   2d08c:	b085      	sub	sp, #20
   2d08e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2d092:	9300      	str	r3, [sp, #0]
   2d094:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2d098:	f023 031f 	bic.w	r3, r3, #31
   2d09c:	1e62      	subs	r2, r4, #1
   2d09e:	4413      	add	r3, r2
   2d0a0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   2d0a4:	280f      	cmp	r0, #15
   2d0a6:	4604      	mov	r4, r0
   2d0a8:	9303      	str	r3, [sp, #12]
   2d0aa:	d905      	bls.n	2d0b8 <mpu_configure_region+0x3a>
   2d0ac:	f7e7 ff64 	bl	14f78 <region_allocate_and_init.part.0>
   2d0b0:	4604      	mov	r4, r0
}
   2d0b2:	4620      	mov	r0, r4
   2d0b4:	b005      	add	sp, #20
   2d0b6:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   2d0b8:	4669      	mov	r1, sp
   2d0ba:	f7e7 ff45 	bl	14f48 <region_init>
	return region_allocate_and_init(index,
   2d0be:	e7f8      	b.n	2d0b2 <mpu_configure_region+0x34>

0002d0c0 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2d0c0:	e840 f000 	tt	r0, r0
   2d0c4:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2d0c6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2d0ca:	bf14      	ite	ne
   2d0cc:	4618      	movne	r0, r3
   2d0ce:	f06f 0015 	mvneq.w	r0, #21
   2d0d2:	4770      	bx	lr

0002d0d4 <_stdout_hook_default>:
}
   2d0d4:	f04f 30ff 	mov.w	r0, #4294967295
   2d0d8:	4770      	bx	lr

0002d0da <_stdin_hook_default>:
}
   2d0da:	2000      	movs	r0, #0
   2d0dc:	4770      	bx	lr

0002d0de <_read>:
{
   2d0de:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2d0e0:	4611      	mov	r1, r2
   2d0e2:	f7e8 b921 	b.w	15328 <z_impl_zephyr_read_stdin>

0002d0e6 <_write>:
{
   2d0e6:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2d0e8:	4611      	mov	r1, r2
   2d0ea:	f7e8 b931 	b.w	15350 <z_impl_zephyr_write_stdout>

0002d0ee <_close>:
   2d0ee:	f04f 30ff 	mov.w	r0, #4294967295
   2d0f2:	4770      	bx	lr

0002d0f4 <_lseek>:
}
   2d0f4:	2000      	movs	r0, #0
   2d0f6:	4770      	bx	lr

0002d0f8 <_isatty>:
}
   2d0f8:	2001      	movs	r0, #1
   2d0fa:	4770      	bx	lr

0002d0fc <_kill>:
}
   2d0fc:	2000      	movs	r0, #0
   2d0fe:	4770      	bx	lr

0002d100 <_getpid>:
}
   2d100:	2000      	movs	r0, #0
   2d102:	4770      	bx	lr

0002d104 <_fstat>:
	st->st_mode = S_IFCHR;
   2d104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2d108:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2d10a:	604b      	str	r3, [r1, #4]
}
   2d10c:	4770      	bx	lr

0002d10e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2d10e:	f7f5 ba95 	b.w	2263c <z_impl_z_errno>

0002d112 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   2d112:	b508      	push	{r3, lr}
	net_if_init();
   2d114:	f7e8 f9f2 	bl	154fc <net_if_init>
	net_if_post_init();
   2d118:	f7e8 fa24 	bl	15564 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2d11c:	2000      	movs	r0, #0
   2d11e:	bd08      	pop	{r3, pc}

0002d120 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2d120:	b110      	cbz	r0, 2d128 <net_if_l2+0x8>
   2d122:	6800      	ldr	r0, [r0, #0]
   2d124:	b100      	cbz	r0, 2d128 <net_if_l2+0x8>
	return iface->if_dev->l2;
   2d126:	6840      	ldr	r0, [r0, #4]
}
   2d128:	4770      	bx	lr

0002d12a <l2_flags_get>:
{
   2d12a:	b510      	push	{r4, lr}
   2d12c:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2d12e:	f7ff fff7 	bl	2d120 <net_if_l2>
   2d132:	b128      	cbz	r0, 2d140 <l2_flags_get+0x16>
   2d134:	68c2      	ldr	r2, [r0, #12]
   2d136:	b11a      	cbz	r2, 2d140 <l2_flags_get+0x16>
}
   2d138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2d13c:	4618      	mov	r0, r3
   2d13e:	4710      	bx	r2
}
   2d140:	2000      	movs	r0, #0
   2d142:	bd10      	pop	{r4, pc}

0002d144 <net_byte_to_hex>:
{
   2d144:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2d146:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   2d148:	b1bb      	cbz	r3, 2d17a <net_byte_to_hex+0x36>
		if (val < 10) {
   2d14a:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   2d14c:	b26b      	sxtb	r3, r5
   2d14e:	bf86      	itte	hi
   2d150:	f1a2 050a 	subhi.w	r5, r2, #10
   2d154:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   2d156:	3330      	addls	r3, #48	; 0x30
   2d158:	1c44      	adds	r4, r0, #1
   2d15a:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2d15c:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   2d160:	4619      	mov	r1, r3
   2d162:	2b09      	cmp	r3, #9
	*ptr = '\0';
   2d164:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   2d168:	bf83      	ittte	hi
   2d16a:	3a0a      	subhi	r2, #10
   2d16c:	1889      	addhi	r1, r1, r2
   2d16e:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   2d170:	3130      	addls	r1, #48	; 0x30
   2d172:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   2d174:	7063      	strb	r3, [r4, #1]
   2d176:	1c60      	adds	r0, r4, #1
}
   2d178:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   2d17a:	2d00      	cmp	r5, #0
   2d17c:	d1e5      	bne.n	2d14a <net_byte_to_hex+0x6>
   2d17e:	4604      	mov	r4, r0
   2d180:	e7ec      	b.n	2d15c <net_byte_to_hex+0x18>

0002d182 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2d182:	e9d0 2300 	ldrd	r2, r3, [r0]
   2d186:	1a9b      	subs	r3, r3, r2
   2d188:	2b01      	cmp	r3, #1
{
   2d18a:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2d18c:	d90c      	bls.n	2d1a8 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   2d18e:	4614      	mov	r4, r2
   2d190:	1c53      	adds	r3, r2, #1
   2d192:	6003      	str	r3, [r0, #0]
   2d194:	f814 3b02 	ldrb.w	r3, [r4], #2
   2d198:	021b      	lsls	r3, r3, #8
   2d19a:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   2d19c:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   2d19e:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   2d1a0:	7852      	ldrb	r2, [r2, #1]
   2d1a2:	4313      	orrs	r3, r2
   2d1a4:	800b      	strh	r3, [r1, #0]
}
   2d1a6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2d1a8:	f06f 0015 	mvn.w	r0, #21
   2d1ac:	e7fb      	b.n	2d1a6 <unpack_uint16+0x24>

0002d1ae <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   2d1ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d1b0:	e9d0 3400 	ldrd	r3, r4, [r0]
   2d1b4:	429c      	cmp	r4, r3
   2d1b6:	d01f      	beq.n	2d1f8 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   2d1b8:	1c5c      	adds	r4, r3, #1
   2d1ba:	6004      	str	r4, [r0, #0]
   2d1bc:	781b      	ldrb	r3, [r3, #0]
   2d1be:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   2d1c0:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   2d1c2:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   2d1c4:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   2d1c6:	6804      	ldr	r4, [r0, #0]
   2d1c8:	42bc      	cmp	r4, r7
   2d1ca:	d218      	bcs.n	2d1fe <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2d1cc:	4625      	mov	r5, r4
   2d1ce:	f815 3b01 	ldrb.w	r3, [r5], #1
   2d1d2:	6816      	ldr	r6, [r2, #0]
   2d1d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   2d1d8:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2d1da:	4433      	add	r3, r6
   2d1dc:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   2d1de:	6005      	str	r5, [r0, #0]
   2d1e0:	f994 4000 	ldrsb.w	r4, [r4]
   2d1e4:	2c00      	cmp	r4, #0
   2d1e6:	db04      	blt.n	2d1f2 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   2d1e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2d1ec:	d204      	bcs.n	2d1f8 <fixed_header_decode+0x4a>
	return 0;
   2d1ee:	2000      	movs	r0, #0
   2d1f0:	e004      	b.n	2d1fc <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   2d1f2:	3107      	adds	r1, #7
   2d1f4:	291c      	cmp	r1, #28
   2d1f6:	d1e6      	bne.n	2d1c6 <fixed_header_decode+0x18>
		return -EINVAL;
   2d1f8:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   2d1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   2d1fe:	f06f 000a 	mvn.w	r0, #10
   2d202:	e7fb      	b.n	2d1fc <fixed_header_decode+0x4e>

0002d204 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   2d204:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d206:	e9d1 3500 	ldrd	r3, r5, [r1]
   2d20a:	429d      	cmp	r5, r3
   2d20c:	d102      	bne.n	2d214 <connect_ack_decode+0x10>
		return -EINVAL;
   2d20e:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   2d212:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   2d214:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d216:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   2d218:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d21a:	d0f8      	beq.n	2d20e <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   2d21c:	461d      	mov	r5, r3
   2d21e:	f815 4b02 	ldrb.w	r4, [r5], #2
   2d222:	600d      	str	r5, [r1, #0]
   2d224:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2d226:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   2d22a:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2d22c:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2d22e:	bf04      	itt	eq
   2d230:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   2d234:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   2d236:	7051      	strb	r1, [r2, #1]
	return 0;
   2d238:	e7eb      	b.n	2d212 <connect_ack_decode+0xe>

0002d23a <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   2d23a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d23e:	461c      	mov	r4, r3
   2d240:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2d242:	7da2      	ldrb	r2, [r4, #22]
   2d244:	0043      	lsls	r3, r0, #1
   2d246:	f022 0203 	bic.w	r2, r2, #3
   2d24a:	f003 0302 	and.w	r3, r3, #2
   2d24e:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   2d250:	f3c0 0041 	ubfx	r0, r0, #1, #2
   2d254:	7220      	strb	r0, [r4, #8]
{
   2d256:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   2d258:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2d25a:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   2d25c:	f10d 0106 	add.w	r1, sp, #6
   2d260:	f7ff ff8f 	bl	2d182 <unpack_uint16>
	if (err_code != 0) {
   2d264:	4606      	mov	r6, r0
   2d266:	b9c0      	cbnz	r0, 2d29a <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   2d268:	683b      	ldr	r3, [r7, #0]
   2d26a:	687a      	ldr	r2, [r7, #4]
   2d26c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   2d270:	1ad2      	subs	r2, r2, r3
   2d272:	42aa      	cmp	r2, r5
   2d274:	da02      	bge.n	2d27c <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   2d276:	f06f 0615 	mvn.w	r6, #21
   2d27a:	e00e      	b.n	2d29a <publish_decode+0x60>
	str->size = utf8_strlen;
   2d27c:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   2d27e:	b185      	cbz	r5, 2d2a2 <publish_decode+0x68>
		str->utf8 = buf->cur;
   2d280:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   2d282:	442b      	add	r3, r5
   2d284:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2d286:	7a23      	ldrb	r3, [r4, #8]
   2d288:	b96b      	cbnz	r3, 2d2a6 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   2d28a:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   2d28c:	4545      	cmp	r5, r8
   2d28e:	d8f2      	bhi.n	2d276 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   2d290:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   2d292:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   2d296:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   2d298:	6125      	str	r5, [r4, #16]

	return 0;
}
   2d29a:	4630      	mov	r0, r6
   2d29c:	b002      	add	sp, #8
   2d29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   2d2a2:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   2d2a4:	e7ef      	b.n	2d286 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   2d2a6:	4638      	mov	r0, r7
   2d2a8:	f104 0114 	add.w	r1, r4, #20
   2d2ac:	f7ff ff69 	bl	2d182 <unpack_uint16>
		if (err_code != 0) {
   2d2b0:	b908      	cbnz	r0, 2d2b6 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   2d2b2:	3504      	adds	r5, #4
   2d2b4:	e7ea      	b.n	2d28c <publish_decode+0x52>
   2d2b6:	4606      	mov	r6, r0
   2d2b8:	e7ef      	b.n	2d29a <publish_decode+0x60>

0002d2ba <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d2ba:	f7ff bf62 	b.w	2d182 <unpack_uint16>

0002d2be <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d2be:	f7ff bf60 	b.w	2d182 <unpack_uint16>

0002d2c2 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d2c2:	f7ff bf5e 	b.w	2d182 <unpack_uint16>

0002d2c6 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d2c6:	f7ff bf5c 	b.w	2d182 <unpack_uint16>

0002d2ca <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   2d2ca:	b538      	push	{r3, r4, r5, lr}
   2d2cc:	4605      	mov	r5, r0
   2d2ce:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   2d2d0:	f7ff ff57 	bl	2d182 <unpack_uint16>
	if (err_code != 0) {
   2d2d4:	b930      	cbnz	r0, 2d2e4 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   2d2d6:	e9d5 2300 	ldrd	r2, r3, [r5]
   2d2da:	1a99      	subs	r1, r3, r2
	str->len = length;
   2d2dc:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   2d2de:	b111      	cbz	r1, 2d2e6 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   2d2e0:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   2d2e2:	602b      	str	r3, [r5, #0]
}
   2d2e4:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   2d2e6:	6060      	str	r0, [r4, #4]
   2d2e8:	e7fc      	b.n	2d2e4 <subscribe_ack_decode+0x1a>

0002d2ea <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d2ea:	f7ff bf4a 	b.w	2d182 <unpack_uint16>

0002d2ee <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2d2ee:	e9d1 3200 	ldrd	r3, r2, [r1]
   2d2f2:	1ad2      	subs	r2, r2, r3
   2d2f4:	2a01      	cmp	r2, #1
   2d2f6:	d909      	bls.n	2d30c <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   2d2f8:	1c5a      	adds	r2, r3, #1
   2d2fa:	600a      	str	r2, [r1, #0]
   2d2fc:	0a02      	lsrs	r2, r0, #8
   2d2fe:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   2d300:	680b      	ldr	r3, [r1, #0]
   2d302:	1c5a      	adds	r2, r3, #1
   2d304:	600a      	str	r2, [r1, #0]
   2d306:	7018      	strb	r0, [r3, #0]
	return 0;
   2d308:	2000      	movs	r0, #0
   2d30a:	4770      	bx	lr
		return -ENOMEM;
   2d30c:	f06f 000b 	mvn.w	r0, #11
}
   2d310:	4770      	bx	lr

0002d312 <pack_utf8_str>:
{
   2d312:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2d314:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   2d318:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2d31a:	6840      	ldr	r0, [r0, #4]
   2d31c:	1a9b      	subs	r3, r3, r2
   2d31e:	1c82      	adds	r2, r0, #2
   2d320:	4293      	cmp	r3, r2
{
   2d322:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2d324:	d30d      	bcc.n	2d342 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   2d326:	b280      	uxth	r0, r0
   2d328:	f7ff ffe1 	bl	2d2ee <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d32c:	e9d5 1200 	ldrd	r1, r2, [r5]
   2d330:	6820      	ldr	r0, [r4, #0]
   2d332:	f7df fc0b 	bl	cb4c <memcpy>
	return 0;
   2d336:	2000      	movs	r0, #0
	buf->cur += str->size;
   2d338:	6823      	ldr	r3, [r4, #0]
   2d33a:	686a      	ldr	r2, [r5, #4]
   2d33c:	4413      	add	r3, r2
   2d33e:	6023      	str	r3, [r4, #0]
}
   2d340:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   2d342:	f06f 000b 	mvn.w	r0, #11
   2d346:	e7fb      	b.n	2d340 <pack_utf8_str+0x2e>

0002d348 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   2d348:	6813      	ldr	r3, [r2, #0]
{
   2d34a:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   2d34c:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   2d34e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   2d352:	d227      	bcs.n	2d3a4 <mqtt_encode_fixed_header+0x5c>
   2d354:	4625      	mov	r5, r4
   2d356:	2600      	movs	r6, #0
	} while (length > 0);
   2d358:	09ed      	lsrs	r5, r5, #7
   2d35a:	b2f3      	uxtb	r3, r6
   2d35c:	f106 0601 	add.w	r6, r6, #1
   2d360:	d1fa      	bne.n	2d358 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   2d362:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d364:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   2d366:	b2db      	uxtb	r3, r3
   2d368:	425d      	negs	r5, r3
   2d36a:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d36c:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   2d36e:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   2d370:	bf1e      	ittt	ne
   2d372:	3301      	addne	r3, #1
   2d374:	6013      	strne	r3, [r2, #0]
   2d376:	5548      	strbne	r0, [r1, r5]
	return 0;
   2d378:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   2d37a:	6813      	ldr	r3, [r2, #0]
   2d37c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   2d380:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   2d382:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   2d384:	bf1f      	itttt	ne
   2d386:	6811      	ldrne	r1, [r2, #0]
   2d388:	780b      	ldrbne	r3, [r1, #0]
   2d38a:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   2d38e:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   2d390:	6813      	ldr	r3, [r2, #0]
   2d392:	3301      	adds	r3, #1
   2d394:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   2d396:	2800      	cmp	r0, #0
   2d398:	d1ef      	bne.n	2d37a <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   2d39a:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   2d39c:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   2d39e:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   2d3a0:	6053      	str	r3, [r2, #4]
}
   2d3a2:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2d3a4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2d3a8:	e7fb      	b.n	2d3a2 <mqtt_encode_fixed_header+0x5a>

0002d3aa <publish_encode>:
{
   2d3aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d3ae:	7d87      	ldrb	r7, [r0, #22]
   2d3b0:	7a04      	ldrb	r4, [r0, #8]
   2d3b2:	f007 0801 	and.w	r8, r7, #1
{
   2d3b6:	4605      	mov	r5, r0
   2d3b8:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d3ba:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   2d3be:	b10c      	cbz	r4, 2d3c4 <publish_encode+0x1a>
   2d3c0:	8a83      	ldrh	r3, [r0, #20]
   2d3c2:	b383      	cbz	r3, 2d426 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d3c4:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d3c8:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d3ca:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d3cc:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d3ce:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d3d2:	f7ff ff9e 	bl	2d312 <pack_utf8_str>
	if (err_code != 0) {
   2d3d6:	b9b0      	cbnz	r0, 2d406 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   2d3d8:	7a2b      	ldrb	r3, [r5, #8]
   2d3da:	b9b3      	cbnz	r3, 2d40a <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d3dc:	0060      	lsls	r0, r4, #1
   2d3de:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   2d3e2:	692a      	ldr	r2, [r5, #16]
   2d3e4:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d3e8:	4338      	orrs	r0, r7
   2d3ea:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   2d3ee:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d3f0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2d3f4:	464a      	mov	r2, r9
   2d3f6:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   2d3f8:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2d3fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2d400:	f7ff ffa2 	bl	2d348 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   2d404:	b140      	cbz	r0, 2d418 <publish_encode+0x6e>
}
   2d406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   2d40a:	4649      	mov	r1, r9
   2d40c:	8aa8      	ldrh	r0, [r5, #20]
   2d40e:	f7ff ff6e 	bl	2d2ee <pack_uint16>
		if (err_code != 0) {
   2d412:	2800      	cmp	r0, #0
   2d414:	d0e2      	beq.n	2d3dc <publish_encode+0x32>
   2d416:	e7f6      	b.n	2d406 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   2d418:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2d41c:	692a      	ldr	r2, [r5, #16]
   2d41e:	1a9b      	subs	r3, r3, r2
   2d420:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   2d424:	e7ef      	b.n	2d406 <publish_encode+0x5c>
		return -EINVAL;
   2d426:	f06f 0015 	mvn.w	r0, #21
   2d42a:	e7ec      	b.n	2d406 <publish_encode+0x5c>

0002d42c <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   2d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d42e:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   2d430:	e9d1 3100 	ldrd	r3, r1, [r1]
   2d434:	1acb      	subs	r3, r1, r3
   2d436:	4293      	cmp	r3, r2
{
   2d438:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   2d43a:	d301      	bcc.n	2d440 <mqtt_read_message_chunk+0x14>
		return 0;
   2d43c:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   2d43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   2d440:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2d442:	190f      	adds	r7, r1, r4
   2d444:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   2d448:	4413      	add	r3, r2
   2d44a:	429f      	cmp	r7, r3
   2d44c:	d813      	bhi.n	2d476 <mqtt_read_message_chunk+0x4a>
   2d44e:	4297      	cmp	r7, r2
   2d450:	d311      	bcc.n	2d476 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   2d452:	2300      	movs	r3, #0
   2d454:	4622      	mov	r2, r4
   2d456:	f7e8 fa63 	bl	15920 <mqtt_transport_read>
	if (len < 0) {
   2d45a:	2800      	cmp	r0, #0
   2d45c:	dbef      	blt.n	2d43e <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   2d45e:	d00d      	beq.n	2d47c <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   2d460:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   2d462:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   2d464:	4403      	add	r3, r0
   2d466:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   2d468:	686b      	ldr	r3, [r5, #4]
   2d46a:	4403      	add	r3, r0
   2d46c:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   2d46e:	d2e5      	bcs.n	2d43c <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   2d470:	f06f 000a 	mvn.w	r0, #10
   2d474:	e7e3      	b.n	2d43e <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   2d476:	f06f 000b 	mvn.w	r0, #11
   2d47a:	e7e0      	b.n	2d43e <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   2d47c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d480:	e7dd      	b.n	2d43e <mqtt_read_message_chunk+0x12>

0002d482 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   2d482:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   2d484:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d486:	69c2      	ldr	r2, [r0, #28]
{
   2d488:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   2d48a:	9302      	str	r3, [sp, #8]
{
   2d48c:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d48e:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   2d490:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d492:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   2d494:	4628      	mov	r0, r5
   2d496:	a902      	add	r1, sp, #8
   2d498:	f7ff ffc8 	bl	2d42c <mqtt_read_message_chunk>
		if (err_code < 0) {
   2d49c:	1e04      	subs	r4, r0, #0
   2d49e:	db2d      	blt.n	2d4fc <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   2d4a0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d4a2:	aa01      	add	r2, sp, #4
   2d4a4:	f10d 0103 	add.w	r1, sp, #3
   2d4a8:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   2d4aa:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d4ac:	f7ff fe7f 	bl	2d1ae <fixed_header_decode>
	} while (err_code == -EAGAIN);
   2d4b0:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d4b4:	4604      	mov	r4, r0
		chunk_size = 1U;
   2d4b6:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   2d4ba:	d0eb      	beq.n	2d494 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   2d4bc:	2800      	cmp	r0, #0
   2d4be:	db21      	blt.n	2d504 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   2d4c0:	f89d 6003 	ldrb.w	r6, [sp, #3]
   2d4c4:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   2d4c8:	2b30      	cmp	r3, #48	; 0x30
   2d4ca:	d11e      	bne.n	2d50a <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   2d4cc:	2202      	movs	r2, #2
   2d4ce:	4628      	mov	r0, r5
   2d4d0:	a902      	add	r1, sp, #8
   2d4d2:	f7ff ffab 	bl	2d42c <mqtt_read_message_chunk>
	if (err_code < 0) {
   2d4d6:	1e04      	subs	r4, r0, #0
   2d4d8:	db10      	blt.n	2d4fc <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   2d4da:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2d4dc:	f016 0f06 	tst.w	r6, #6
   2d4e0:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   2d4e2:	4628      	mov	r0, r5
   2d4e4:	ba52      	rev16	r2, r2
   2d4e6:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   2d4e8:	bf0c      	ite	eq
   2d4ea:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   2d4ec:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   2d4ee:	a902      	add	r1, sp, #8
   2d4f0:	f7ff ff9c 	bl	2d42c <mqtt_read_message_chunk>
	if (err_code < 0) {
   2d4f4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   2d4f8:	2c00      	cmp	r4, #0
   2d4fa:	da0d      	bge.n	2d518 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   2d4fc:	f114 0f0b 	cmn.w	r4, #11
   2d500:	d100      	bne.n	2d504 <mqtt_handle_rx+0x82>
   2d502:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   2d504:	4620      	mov	r0, r4
   2d506:	b00c      	add	sp, #48	; 0x30
   2d508:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   2d50a:	4628      	mov	r0, r5
   2d50c:	9a01      	ldr	r2, [sp, #4]
   2d50e:	a902      	add	r1, sp, #8
   2d510:	f7ff ff8c 	bl	2d42c <mqtt_read_message_chunk>
   2d514:	4604      	mov	r4, r0
   2d516:	e7ef      	b.n	2d4f8 <mqtt_handle_rx+0x76>
	evt.result = 0;
   2d518:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   2d51a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2d51e:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   2d520:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   2d524:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   2d526:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   2d528:	d066      	beq.n	2d5f8 <mqtt_handle_rx+0x176>
   2d52a:	d813      	bhi.n	2d554 <mqtt_handle_rx+0xd2>
   2d52c:	2b40      	cmp	r3, #64	; 0x40
   2d52e:	d059      	beq.n	2d5e4 <mqtt_handle_rx+0x162>
   2d530:	d806      	bhi.n	2d540 <mqtt_handle_rx+0xbe>
   2d532:	2b20      	cmp	r3, #32
   2d534:	d02f      	beq.n	2d596 <mqtt_handle_rx+0x114>
   2d536:	2b30      	cmp	r3, #48	; 0x30
   2d538:	d048      	beq.n	2d5cc <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   2d53a:	2400      	movs	r4, #0
   2d53c:	61ec      	str	r4, [r5, #28]
	return 0;
   2d53e:	e7e1      	b.n	2d504 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   2d540:	2b50      	cmp	r3, #80	; 0x50
   2d542:	d1fa      	bne.n	2d53a <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   2d544:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2d546:	a905      	add	r1, sp, #20
   2d548:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   2d54a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2d54e:	f7ff feb6 	bl	2d2be <publish_receive_decode>
   2d552:	e04e      	b.n	2d5f2 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2d554:	2bb0      	cmp	r3, #176	; 0xb0
   2d556:	d05f      	beq.n	2d618 <mqtt_handle_rx+0x196>
   2d558:	d80b      	bhi.n	2d572 <mqtt_handle_rx+0xf0>
   2d55a:	2b70      	cmp	r3, #112	; 0x70
   2d55c:	d054      	beq.n	2d608 <mqtt_handle_rx+0x186>
   2d55e:	2b90      	cmp	r3, #144	; 0x90
   2d560:	d1eb      	bne.n	2d53a <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   2d562:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2d564:	a905      	add	r1, sp, #20
   2d566:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   2d568:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2d56c:	f7ff fead 	bl	2d2ca <subscribe_ack_decode>
   2d570:	e03f      	b.n	2d5f2 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2d572:	2bd0      	cmp	r3, #208	; 0xd0
   2d574:	d1e1      	bne.n	2d53a <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   2d576:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	int err_code = 0;
   2d57a:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   2d57c:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   2d57e:	bfc8      	it	gt
   2d580:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   2d584:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   2d588:	bfc8      	it	gt
   2d58a:	b252      	sxtbgt	r2, r2
   2d58c:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   2d590:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   2d594:	e010      	b.n	2d5b8 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   2d596:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   2d59a:	4628      	mov	r0, r5
   2d59c:	aa05      	add	r2, sp, #20
   2d59e:	a902      	add	r1, sp, #8
   2d5a0:	f7ff fe30 	bl	2d204 <connect_ack_decode>
		if (err_code == 0) {
   2d5a4:	4604      	mov	r4, r0
   2d5a6:	bb28      	cbnz	r0, 2d5f4 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   2d5a8:	f89d 2015 	ldrb.w	r2, [sp, #21]
   2d5ac:	b95a      	cbnz	r2, 2d5c6 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   2d5ae:	69ab      	ldr	r3, [r5, #24]
   2d5b0:	f043 0304 	orr.w	r3, r3, #4
   2d5b4:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   2d5b6:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   2d5b8:	4628      	mov	r0, r5
   2d5ba:	a904      	add	r1, sp, #16
   2d5bc:	f000 f8bf 	bl	2d73e <event_notify>
	if (err_code < 0) {
   2d5c0:	2c00      	cmp	r4, #0
   2d5c2:	daba      	bge.n	2d53a <mqtt_handle_rx+0xb8>
   2d5c4:	e79e      	b.n	2d504 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   2d5c6:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   2d5ca:	e7f4      	b.n	2d5b6 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   2d5cc:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d5ce:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   2d5d0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d5d4:	ab05      	add	r3, sp, #20
   2d5d6:	f7ff fe30 	bl	2d23a <publish_decode>
		client->internal.remaining_payload =
   2d5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d5dc:	4604      	mov	r4, r0
		evt.result = err_code;
   2d5de:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   2d5e0:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   2d5e2:	e7e9      	b.n	2d5b8 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   2d5e4:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2d5e6:	a905      	add	r1, sp, #20
   2d5e8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   2d5ea:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2d5ee:	f7ff fe64 	bl	2d2ba <publish_ack_decode>
   2d5f2:	4604      	mov	r4, r0
		evt.result = err_code;
   2d5f4:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   2d5f6:	e7df      	b.n	2d5b8 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   2d5f8:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2d5fa:	a905      	add	r1, sp, #20
   2d5fc:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   2d5fe:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2d602:	f7ff fe5e 	bl	2d2c2 <publish_release_decode>
   2d606:	e7f4      	b.n	2d5f2 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   2d608:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2d60a:	a905      	add	r1, sp, #20
   2d60c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   2d60e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2d612:	f7ff fe58 	bl	2d2c6 <publish_complete_decode>
   2d616:	e7ec      	b.n	2d5f2 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   2d618:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2d61a:	a905      	add	r1, sp, #20
   2d61c:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   2d620:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2d624:	f7ff fe61 	bl	2d2ea <unsubscribe_ack_decode>
   2d628:	e7e3      	b.n	2d5f2 <mqtt_handle_rx+0x170>

0002d62a <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   2d62a:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   2d62c:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   2d62e:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2d630:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2d632:	2206      	movs	r2, #6
   2d634:	2101      	movs	r1, #1
   2d636:	f7e6 f9f9 	bl	13a2c <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   2d63a:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2d63c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   2d63e:	da04      	bge.n	2d64a <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   2d640:	f7ff fd65 	bl	2d10e <__errno>
   2d644:	6800      	ldr	r0, [r0, #0]
   2d646:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   2d648:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   2d64a:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   2d64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
	if (broker->sa_family == AF_INET) {
   2d64e:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   2d650:	bf14      	ite	ne
   2d652:	2218      	movne	r2, #24
   2d654:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   2d656:	f7ff fc30 	bl	2ceba <z_impl_zsock_connect>
	if (ret < 0) {
   2d65a:	2800      	cmp	r0, #0
   2d65c:	da03      	bge.n	2d666 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   2d65e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2d660:	f7ff fc14 	bl	2ce8c <z_impl_zsock_close>
   2d664:	e7ec      	b.n	2d640 <mqtt_client_tcp_connect+0x16>
	return 0;
   2d666:	2000      	movs	r0, #0
   2d668:	e7ee      	b.n	2d648 <mqtt_client_tcp_connect+0x1e>

0002d66a <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   2d66a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   2d66e:	2400      	movs	r4, #0
{
   2d670:	4606      	mov	r6, r0
   2d672:	460f      	mov	r7, r1
   2d674:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2d676:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   2d678:	42ac      	cmp	r4, r5
   2d67a:	d301      	bcc.n	2d680 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   2d67c:	2000      	movs	r0, #0
   2d67e:	e00d      	b.n	2d69c <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   2d680:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2d682:	2300      	movs	r3, #0
   2d684:	e9cd 8800 	strd	r8, r8, [sp]
   2d688:	1b2a      	subs	r2, r5, r4
   2d68a:	1939      	adds	r1, r7, r4
   2d68c:	f7ff fc2b 	bl	2cee6 <z_impl_zsock_sendto>
		if (ret < 0) {
   2d690:	1e03      	subs	r3, r0, #0
   2d692:	da06      	bge.n	2d6a2 <mqtt_client_tcp_write+0x38>
			return -errno;
   2d694:	f7ff fd3b 	bl	2d10e <__errno>
   2d698:	6800      	ldr	r0, [r0, #0]
   2d69a:	4240      	negs	r0, r0
}
   2d69c:	b002      	add	sp, #8
   2d69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   2d6a2:	441c      	add	r4, r3
   2d6a4:	e7e8      	b.n	2d678 <mqtt_client_tcp_write+0xe>

0002d6a6 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   2d6a6:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   2d6a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   2d6aa:	2200      	movs	r2, #0
   2d6ac:	f7ff fc38 	bl	2cf20 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   2d6b0:	2800      	cmp	r0, #0
   2d6b2:	da04      	bge.n	2d6be <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   2d6b4:	f7ff fd2b 	bl	2d10e <__errno>
   2d6b8:	6800      	ldr	r0, [r0, #0]
   2d6ba:	4240      	negs	r0, r0
	}

	return 0;
}
   2d6bc:	bd08      	pop	{r3, pc}
	return 0;
   2d6be:	2000      	movs	r0, #0
   2d6c0:	e7fc      	b.n	2d6bc <mqtt_client_tcp_write_msg+0x16>

0002d6c2 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   2d6c2:	b513      	push	{r0, r1, r4, lr}
   2d6c4:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   2d6c6:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   2d6c8:	bf14      	ite	ne
   2d6ca:	4623      	movne	r3, r4
   2d6cc:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   2d6ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2d6d0:	e9cd 4400 	strd	r4, r4, [sp]
   2d6d4:	f7ff fc3a 	bl	2cf4c <z_impl_zsock_recvfrom>
	if (ret < 0) {
   2d6d8:	2800      	cmp	r0, #0
   2d6da:	da03      	bge.n	2d6e4 <mqtt_client_tcp_read+0x22>
		return -errno;
   2d6dc:	f7ff fd17 	bl	2d10e <__errno>
   2d6e0:	6800      	ldr	r0, [r0, #0]
   2d6e2:	4240      	negs	r0, r0
	}

	return ret;
}
   2d6e4:	b002      	add	sp, #8
   2d6e6:	bd10      	pop	{r4, pc}

0002d6e8 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   2d6e8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   2d6ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2d6ec:	f7ff fbce 	bl	2ce8c <z_impl_zsock_close>
	if (ret < 0) {
   2d6f0:	2800      	cmp	r0, #0
   2d6f2:	da04      	bge.n	2d6fe <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   2d6f4:	f7ff fd0b 	bl	2d10e <__errno>
   2d6f8:	6800      	ldr	r0, [r0, #0]
   2d6fa:	4240      	negs	r0, r0
	}

	return 0;
}
   2d6fc:	bd08      	pop	{r3, pc}
	return 0;
   2d6fe:	2000      	movs	r0, #0
   2d700:	e7fc      	b.n	2d6fc <mqtt_client_tcp_disconnect+0x14>

0002d702 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   2d702:	f7ff bff1 	b.w	2d6e8 <mqtt_client_tcp_disconnect>

0002d706 <k_uptime_get>:
{
   2d706:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2d708:	f001 fa4a 	bl	2eba0 <z_impl_k_uptime_ticks>
   2d70c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2d710:	fba0 2304 	umull	r2, r3, r0, r4
   2d714:	fb04 3301 	mla	r3, r4, r1, r3
   2d718:	0bd0      	lsrs	r0, r2, #15
}
   2d71a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2d71e:	0bd9      	lsrs	r1, r3, #15
   2d720:	bd10      	pop	{r4, pc}

0002d722 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   2d722:	b538      	push	{r3, r4, r5, lr}
   2d724:	4604      	mov	r4, r0
   2d726:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   2d728:	6d82      	ldr	r2, [r0, #88]	; 0x58
   2d72a:	2100      	movs	r1, #0
   2d72c:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2d72e:	f7f8 fe83 	bl	26438 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   2d732:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   2d734:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   2d736:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   2d738:	4413      	add	r3, r2
   2d73a:	606b      	str	r3, [r5, #4]
}
   2d73c:	bd38      	pop	{r3, r4, r5, pc}

0002d73e <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   2d73e:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   2d740:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   2d742:	4604      	mov	r4, r0
   2d744:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   2d746:	b15b      	cbz	r3, 2d760 <event_notify+0x22>
		mqtt_mutex_unlock(client);
   2d748:	f7e8 f8f8 	bl	1593c <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   2d74c:	4620      	mov	r0, r4
   2d74e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2d750:	9901      	ldr	r1, [sp, #4]
   2d752:	4798      	blx	r3

		mqtt_mutex_lock(client);
   2d754:	4620      	mov	r0, r4
	}
}
   2d756:	b002      	add	sp, #8
   2d758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   2d75c:	f7e8 b91a 	b.w	15994 <mqtt_mutex_lock>
}
   2d760:	b002      	add	sp, #8
   2d762:	bd10      	pop	{r4, pc}

0002d764 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   2d764:	b530      	push	{r4, r5, lr}
   2d766:	b089      	sub	sp, #36	; 0x24
   2d768:	4604      	mov	r4, r0
   2d76a:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   2d76c:	f7ff ffc9 	bl	2d702 <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   2d770:	221c      	movs	r2, #28
   2d772:	2100      	movs	r1, #0
   2d774:	4668      	mov	r0, sp
   2d776:	f7f8 fe5f 	bl	26438 <memset>
   2d77a:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   2d77c:	4669      	mov	r1, sp
   2d77e:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   2d780:	f88d 3000 	strb.w	r3, [sp]
   2d784:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   2d786:	f7ff ffda 	bl	2d73e <event_notify>
	MQTT_STATE_INIT(client);
   2d78a:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2d78c:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   2d790:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   2d794:	b009      	add	sp, #36	; 0x24
   2d796:	bd30      	pop	{r4, r5, pc}

0002d798 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   2d798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d79a:	4617      	mov	r7, r2
   2d79c:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   2d79e:	4605      	mov	r5, r0
{
   2d7a0:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   2d7a2:	b320      	cbz	r0, 2d7ee <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   2d7a4:	f7e8 f8f6 	bl	15994 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   2d7a8:	6a2c      	ldr	r4, [r5, #32]
   2d7aa:	b1b4      	cbz	r4, 2d7da <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   2d7ac:	42bc      	cmp	r4, r7
   2d7ae:	4622      	mov	r2, r4
   2d7b0:	4633      	mov	r3, r6
   2d7b2:	bf28      	it	cs
   2d7b4:	463a      	movcs	r2, r7
   2d7b6:	4628      	mov	r0, r5
   2d7b8:	9901      	ldr	r1, [sp, #4]
   2d7ba:	f7e8 f8b1 	bl	15920 <mqtt_transport_read>
   2d7be:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   2d7c0:	b916      	cbnz	r6, 2d7c8 <read_publish_payload+0x30>
   2d7c2:	f110 0f0b 	cmn.w	r0, #11
   2d7c6:	d008      	beq.n	2d7da <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   2d7c8:	2c00      	cmp	r4, #0
   2d7ca:	dc0c      	bgt.n	2d7e6 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   2d7cc:	bf08      	it	eq
   2d7ce:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   2d7d2:	4628      	mov	r0, r5
   2d7d4:	4621      	mov	r1, r4
   2d7d6:	f7ff ffc5 	bl	2d764 <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   2d7da:	4628      	mov	r0, r5
   2d7dc:	f7e8 f8ae 	bl	1593c <mqtt_mutex_unlock>

	return ret;
}
   2d7e0:	4620      	mov	r0, r4
   2d7e2:	b003      	add	sp, #12
   2d7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   2d7e6:	6a2b      	ldr	r3, [r5, #32]
   2d7e8:	1b1b      	subs	r3, r3, r4
   2d7ea:	622b      	str	r3, [r5, #32]
   2d7ec:	e7f5      	b.n	2d7da <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   2d7ee:	f06f 0415 	mvn.w	r4, #21
   2d7f2:	e7f5      	b.n	2d7e0 <read_publish_payload+0x48>

0002d7f4 <client_write>:
{
   2d7f4:	b538      	push	{r3, r4, r5, lr}
   2d7f6:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   2d7f8:	f7e8 f878 	bl	158ec <mqtt_transport_write>
	if (err_code < 0) {
   2d7fc:	1e04      	subs	r4, r0, #0
   2d7fe:	da05      	bge.n	2d80c <client_write+0x18>
		client_disconnect(client, err_code, true);
   2d800:	4621      	mov	r1, r4
   2d802:	4628      	mov	r0, r5
   2d804:	f7ff ffae 	bl	2d764 <client_disconnect.constprop.0>
}
   2d808:	4620      	mov	r0, r4
   2d80a:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   2d80c:	f7ff ff7b 	bl	2d706 <k_uptime_get>
	return 0;
   2d810:	2400      	movs	r4, #0
   2d812:	6168      	str	r0, [r5, #20]
   2d814:	e7f8      	b.n	2d808 <client_write+0x14>

0002d816 <mqtt_client_init>:
{
   2d816:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   2d818:	4604      	mov	r4, r0
   2d81a:	b1a8      	cbz	r0, 2d848 <mqtt_client_init+0x32>
	MQTT_STATE_INIT(client);
   2d81c:	2500      	movs	r5, #0
   2d81e:	2264      	movs	r2, #100	; 0x64
   2d820:	2100      	movs	r1, #0
   2d822:	f7f8 fe09 	bl	26438 <memset>
   2d826:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   2d828:	4620      	mov	r0, r4
   2d82a:	f001 f8c7 	bl	2e9bc <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   2d82e:	2304      	movs	r3, #4
   2d830:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   2d834:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2d838:	f365 0341 	bfi	r3, r5, #1, #1
   2d83c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   2d840:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2d844:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   2d848:	bd38      	pop	{r3, r4, r5, pc}

0002d84a <mqtt_connect>:
{
   2d84a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d84c:	4605      	mov	r5, r0
   2d84e:	2800      	cmp	r0, #0
   2d850:	d03b      	beq.n	2d8ca <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   2d852:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d854:	2b00      	cmp	r3, #0
   2d856:	d038      	beq.n	2d8ca <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   2d858:	f7e8 f89c 	bl	15994 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   2d85c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2d85e:	b38b      	cbz	r3, 2d8c4 <mqtt_connect+0x7a>
   2d860:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2d862:	b37b      	cbz	r3, 2d8c4 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   2d864:	4628      	mov	r0, r5
   2d866:	f7e8 f837 	bl	158d8 <mqtt_transport_connect>
	if (err_code < 0) {
   2d86a:	1e04      	subs	r4, r0, #0
   2d86c:	db24      	blt.n	2d8b8 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   2d86e:	4669      	mov	r1, sp
   2d870:	4628      	mov	r0, r5
   2d872:	f7ff ff56 	bl	2d722 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d876:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2d878:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d87a:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   2d87e:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d880:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2d882:	f7e7 ff85 	bl	15790 <connect_request_encode>
	if (err_code < 0) {
   2d886:	1e04      	subs	r4, r0, #0
   2d888:	db13      	blt.n	2d8b2 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   2d88a:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d88e:	4628      	mov	r0, r5
   2d890:	1a52      	subs	r2, r2, r1
   2d892:	f7e8 f82b 	bl	158ec <mqtt_transport_write>
	if (err_code < 0) {
   2d896:	1e04      	subs	r4, r0, #0
   2d898:	db0b      	blt.n	2d8b2 <mqtt_connect+0x68>
   2d89a:	f7ff ff34 	bl	2d706 <k_uptime_get>
	client->unacked_ping = 0;
   2d89e:	2400      	movs	r4, #0
   2d8a0:	6168      	str	r0, [r5, #20]
   2d8a2:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2d8a6:	4628      	mov	r0, r5
   2d8a8:	f7e8 f848 	bl	1593c <mqtt_mutex_unlock>
}
   2d8ac:	4620      	mov	r0, r4
   2d8ae:	b003      	add	sp, #12
   2d8b0:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   2d8b2:	4628      	mov	r0, r5
   2d8b4:	f7ff ff25 	bl	2d702 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   2d8b8:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2d8ba:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   2d8be:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   2d8c2:	e7f0      	b.n	2d8a6 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   2d8c4:	f06f 040b 	mvn.w	r4, #11
   2d8c8:	e7f6      	b.n	2d8b8 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   2d8ca:	f06f 0415 	mvn.w	r4, #21
   2d8ce:	e7ed      	b.n	2d8ac <mqtt_connect+0x62>

0002d8d0 <mqtt_publish>:
{
   2d8d0:	b570      	push	{r4, r5, r6, lr}
   2d8d2:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   2d8d4:	4605      	mov	r5, r0
{
   2d8d6:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   2d8d8:	2800      	cmp	r0, #0
   2d8da:	d03b      	beq.n	2d954 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   2d8dc:	2900      	cmp	r1, #0
   2d8de:	d039      	beq.n	2d954 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   2d8e0:	f7e8 f858 	bl	15994 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d8e4:	4628      	mov	r0, r5
   2d8e6:	a901      	add	r1, sp, #4
   2d8e8:	f7ff ff1b 	bl	2d722 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d8ec:	69ab      	ldr	r3, [r5, #24]
   2d8ee:	075b      	lsls	r3, r3, #29
   2d8f0:	d52d      	bpl.n	2d94e <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   2d8f2:	4630      	mov	r0, r6
   2d8f4:	a901      	add	r1, sp, #4
   2d8f6:	f7ff fd58 	bl	2d3aa <publish_encode>
	if (err_code < 0) {
   2d8fa:	1e04      	subs	r4, r0, #0
   2d8fc:	db1c      	blt.n	2d938 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   2d8fe:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   2d900:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   2d902:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   2d904:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   2d906:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   2d908:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   2d90a:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   2d90c:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   2d90e:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   2d910:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   2d912:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   2d916:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   2d918:	f7f8 fd8e 	bl	26438 <memset>
	msg.msg_iov = io_vector;
   2d91c:	ab03      	add	r3, sp, #12
   2d91e:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2d920:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   2d922:	4628      	mov	r0, r5
   2d924:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2d926:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   2d928:	f7e7 ffec 	bl	15904 <mqtt_transport_write_msg>
	if (err_code < 0) {
   2d92c:	1e04      	subs	r4, r0, #0
   2d92e:	da09      	bge.n	2d944 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   2d930:	4621      	mov	r1, r4
   2d932:	4628      	mov	r0, r5
   2d934:	f7ff ff16 	bl	2d764 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d938:	4628      	mov	r0, r5
   2d93a:	f7e7 ffff 	bl	1593c <mqtt_mutex_unlock>
}
   2d93e:	4620      	mov	r0, r4
   2d940:	b00e      	add	sp, #56	; 0x38
   2d942:	bd70      	pop	{r4, r5, r6, pc}
   2d944:	f7ff fedf 	bl	2d706 <k_uptime_get>
	return 0;
   2d948:	2400      	movs	r4, #0
   2d94a:	6168      	str	r0, [r5, #20]
   2d94c:	e7f4      	b.n	2d938 <mqtt_publish+0x68>
		return -ENOTCONN;
   2d94e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d952:	e7f1      	b.n	2d938 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   2d954:	f06f 0415 	mvn.w	r4, #21
   2d958:	e7f1      	b.n	2d93e <mqtt_publish+0x6e>

0002d95a <mqtt_disconnect>:
{
   2d95a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d95c:	4605      	mov	r5, r0
   2d95e:	b310      	cbz	r0, 2d9a6 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   2d960:	f7e8 f818 	bl	15994 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d964:	4669      	mov	r1, sp
   2d966:	4628      	mov	r0, r5
   2d968:	f7ff fedb 	bl	2d722 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d96c:	69ab      	ldr	r3, [r5, #24]
   2d96e:	075b      	lsls	r3, r3, #29
   2d970:	d516      	bpl.n	2d9a0 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   2d972:	4668      	mov	r0, sp
   2d974:	f7e7 ff8c 	bl	15890 <disconnect_encode>
	if (err_code < 0) {
   2d978:	1e04      	subs	r4, r0, #0
   2d97a:	db0b      	blt.n	2d994 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d97c:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d980:	4628      	mov	r0, r5
   2d982:	1a52      	subs	r2, r2, r1
   2d984:	f7ff ff36 	bl	2d7f4 <client_write>
	if (err_code < 0) {
   2d988:	1e04      	subs	r4, r0, #0
   2d98a:	db03      	blt.n	2d994 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   2d98c:	2100      	movs	r1, #0
   2d98e:	4628      	mov	r0, r5
   2d990:	f7ff fee8 	bl	2d764 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d994:	4628      	mov	r0, r5
   2d996:	f7e7 ffd1 	bl	1593c <mqtt_mutex_unlock>
}
   2d99a:	4620      	mov	r0, r4
   2d99c:	b003      	add	sp, #12
   2d99e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2d9a0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d9a4:	e7f6      	b.n	2d994 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   2d9a6:	f06f 0415 	mvn.w	r4, #21
   2d9aa:	e7f6      	b.n	2d99a <mqtt_disconnect+0x40>

0002d9ac <mqtt_ping>:
{
   2d9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d9ae:	4605      	mov	r5, r0
   2d9b0:	b320      	cbz	r0, 2d9fc <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   2d9b2:	f7e7 ffef 	bl	15994 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d9b6:	4669      	mov	r1, sp
   2d9b8:	4628      	mov	r0, r5
   2d9ba:	f7ff feb2 	bl	2d722 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d9be:	69ab      	ldr	r3, [r5, #24]
   2d9c0:	075b      	lsls	r3, r3, #29
   2d9c2:	d518      	bpl.n	2d9f6 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   2d9c4:	4668      	mov	r0, sp
   2d9c6:	f7e7 ff75 	bl	158b4 <ping_request_encode>
	if (err_code < 0) {
   2d9ca:	1e04      	subs	r4, r0, #0
   2d9cc:	db0d      	blt.n	2d9ea <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d9ce:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d9d2:	4628      	mov	r0, r5
   2d9d4:	1a52      	subs	r2, r2, r1
   2d9d6:	f7ff ff0d 	bl	2d7f4 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   2d9da:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d9de:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   2d9e0:	2b7f      	cmp	r3, #127	; 0x7f
   2d9e2:	d002      	beq.n	2d9ea <mqtt_ping+0x3e>
		client->unacked_ping++;
   2d9e4:	3301      	adds	r3, #1
   2d9e6:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2d9ea:	4628      	mov	r0, r5
   2d9ec:	f7e7 ffa6 	bl	1593c <mqtt_mutex_unlock>
}
   2d9f0:	4620      	mov	r0, r4
   2d9f2:	b003      	add	sp, #12
   2d9f4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2d9f6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d9fa:	e7f6      	b.n	2d9ea <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   2d9fc:	f06f 0415 	mvn.w	r4, #21
   2da00:	e7f6      	b.n	2d9f0 <mqtt_ping+0x44>

0002da02 <mqtt_abort>:
{
   2da02:	b510      	push	{r4, lr}
   2da04:	4604      	mov	r4, r0
	mqtt_mutex_lock(client);
   2da06:	f7e7 ffc5 	bl	15994 <mqtt_mutex_lock>
	NULL_PARAM_CHECK(client);
   2da0a:	b15c      	cbz	r4, 2da24 <mqtt_abort+0x22>
	if (client->internal.state != MQTT_STATE_IDLE) {
   2da0c:	69a3      	ldr	r3, [r4, #24]
   2da0e:	b123      	cbz	r3, 2da1a <mqtt_abort+0x18>
		client_disconnect(client, -ECONNABORTED, true);
   2da10:	f06f 0170 	mvn.w	r1, #112	; 0x70
   2da14:	4620      	mov	r0, r4
   2da16:	f7ff fea5 	bl	2d764 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2da1a:	4620      	mov	r0, r4
   2da1c:	f7e7 ff8e 	bl	1593c <mqtt_mutex_unlock>
	return 0;
   2da20:	2000      	movs	r0, #0
}
   2da22:	bd10      	pop	{r4, pc}
	NULL_PARAM_CHECK(client);
   2da24:	f06f 0015 	mvn.w	r0, #21
   2da28:	e7fb      	b.n	2da22 <mqtt_abort+0x20>

0002da2a <mqtt_live>:
{
   2da2a:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   2da2c:	4606      	mov	r6, r0
   2da2e:	b300      	cbz	r0, 2da72 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   2da30:	f7e7 ffb0 	bl	15994 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   2da34:	6974      	ldr	r4, [r6, #20]
   2da36:	f7ff fe66 	bl	2d706 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   2da3a:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   2da3c:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   2da40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2da44:	b19c      	cbz	r4, 2da6e <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   2da46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2da4a:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   2da4c:	4284      	cmp	r4, r0
   2da4e:	d80d      	bhi.n	2da6c <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   2da50:	4630      	mov	r0, r6
   2da52:	f7ff ffab 	bl	2d9ac <mqtt_ping>
		ping_sent = true;
   2da56:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   2da58:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   2da5a:	4630      	mov	r0, r6
   2da5c:	f7e7 ff6e 	bl	1593c <mqtt_mutex_unlock>
		return -EAGAIN;
   2da60:	2c00      	cmp	r4, #0
   2da62:	bf08      	it	eq
   2da64:	f06f 050a 	mvneq.w	r5, #10
}
   2da68:	4628      	mov	r0, r5
   2da6a:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   2da6c:	2400      	movs	r4, #0
	int err_code = 0;
   2da6e:	4625      	mov	r5, r4
   2da70:	e7f3      	b.n	2da5a <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   2da72:	f06f 0515 	mvn.w	r5, #21
   2da76:	e7f7      	b.n	2da68 <mqtt_live+0x3e>

0002da78 <mqtt_keepalive_time_left>:
{
   2da78:	b538      	push	{r3, r4, r5, lr}
   2da7a:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   2da7c:	6945      	ldr	r5, [r0, #20]
   2da7e:	f7ff fe42 	bl	2d706 <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   2da82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2da86:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	int32_t diff = k_uptime_get_32() - last_activity;
   2da8a:	1b42      	subs	r2, r0, r5
   2da8c:	434b      	muls	r3, r1
		return 0;
   2da8e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   2da92:	b119      	cbz	r1, 2da9c <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   2da94:	4293      	cmp	r3, r2
   2da96:	d904      	bls.n	2daa2 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   2da98:	1a98      	subs	r0, r3, r2
}
   2da9a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   2da9c:	f04f 30ff 	mov.w	r0, #4294967295
   2daa0:	e7fb      	b.n	2da9a <mqtt_keepalive_time_left+0x22>
		return 0;
   2daa2:	2000      	movs	r0, #0
   2daa4:	e7f9      	b.n	2da9a <mqtt_keepalive_time_left+0x22>

0002daa6 <mqtt_input>:
{
   2daa6:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2daa8:	4605      	mov	r5, r0
   2daaa:	b1d0      	cbz	r0, 2dae2 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   2daac:	f7e7 ff72 	bl	15994 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2dab0:	69ab      	ldr	r3, [r5, #24]
   2dab2:	079b      	lsls	r3, r3, #30
   2dab4:	d50f      	bpl.n	2dad6 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   2dab6:	6a2b      	ldr	r3, [r5, #32]
   2dab8:	b983      	cbnz	r3, 2dadc <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   2daba:	4628      	mov	r0, r5
   2dabc:	f7ff fce1 	bl	2d482 <mqtt_handle_rx>
	if (err_code < 0) {
   2dac0:	1e04      	subs	r4, r0, #0
   2dac2:	da03      	bge.n	2dacc <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   2dac4:	4621      	mov	r1, r4
   2dac6:	4628      	mov	r0, r5
   2dac8:	f7ff fe4c 	bl	2d764 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2dacc:	4628      	mov	r0, r5
   2dace:	f7e7 ff35 	bl	1593c <mqtt_mutex_unlock>
}
   2dad2:	4620      	mov	r0, r4
   2dad4:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   2dad6:	f06f 040c 	mvn.w	r4, #12
   2dada:	e7f7      	b.n	2dacc <mqtt_input+0x26>
		return -EBUSY;
   2dadc:	f06f 040f 	mvn.w	r4, #15
   2dae0:	e7f4      	b.n	2dacc <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   2dae2:	f06f 0415 	mvn.w	r4, #21
   2dae6:	e7f4      	b.n	2dad2 <mqtt_input+0x2c>

0002dae8 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   2dae8:	2300      	movs	r3, #0
   2daea:	f7ff be55 	b.w	2d798 <read_publish_payload>

0002daee <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2daee:	6843      	ldr	r3, [r0, #4]
}
   2daf0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2daf2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2daf4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2daf6:	600b      	str	r3, [r1, #0]
}
   2daf8:	4770      	bx	lr

0002dafa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dafa:	6843      	ldr	r3, [r0, #4]
   2dafc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2dafe:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2db00:	4042      	eors	r2, r0
   2db02:	400a      	ands	r2, r1
   2db04:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2db06:	605a      	str	r2, [r3, #4]
}
   2db08:	2000      	movs	r0, #0
   2db0a:	4770      	bx	lr

0002db0c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2db0c:	6843      	ldr	r3, [r0, #4]
}
   2db0e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2db10:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2db12:	6099      	str	r1, [r3, #8]
}
   2db14:	4770      	bx	lr

0002db16 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2db16:	6843      	ldr	r3, [r0, #4]
}
   2db18:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2db1a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2db1c:	60d9      	str	r1, [r3, #12]
}
   2db1e:	4770      	bx	lr

0002db20 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2db20:	6843      	ldr	r3, [r0, #4]
}
   2db22:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2db24:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2db26:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2db28:	4059      	eors	r1, r3
    p_reg->OUT = value;
   2db2a:	6051      	str	r1, [r2, #4]
}
   2db2c:	4770      	bx	lr

0002db2e <nrf_gpio_cfg_sense_set>:
{
   2db2e:	b513      	push	{r0, r1, r4, lr}
   2db30:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2db32:	a801      	add	r0, sp, #4
{
   2db34:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2db36:	f7e7 ffa5 	bl	15a84 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2db3a:	9b01      	ldr	r3, [sp, #4]
   2db3c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2db40:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2db44:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2db48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2db4c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2db50:	b002      	add	sp, #8
   2db52:	bd10      	pop	{r4, pc}

0002db54 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   2db54:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2db56:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   2db58:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   2db5a:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   2db5c:	7b91      	ldrb	r1, [r2, #14]
   2db5e:	b159      	cbz	r1, 2db78 <uarte_nrfx_isr_int+0x24>
   2db60:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2db64:	b141      	cbz	r1, 2db78 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   2db66:	f44f 7180 	mov.w	r1, #256	; 0x100
   2db6a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2db6e:	2101      	movs	r1, #1
   2db70:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   2db72:	2300      	movs	r3, #0
   2db74:	7393      	strb	r3, [r2, #14]
		return;
   2db76:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2db78:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2db7c:	b121      	cbz	r1, 2db88 <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2db7e:	2100      	movs	r1, #0
   2db80:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2db84:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2db88:	6813      	ldr	r3, [r2, #0]
   2db8a:	b10b      	cbz	r3, 2db90 <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2db8c:	6851      	ldr	r1, [r2, #4]
   2db8e:	4718      	bx	r3
}
   2db90:	4770      	bx	lr

0002db92 <uarte_nrfx_config_get>:
{
   2db92:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2db94:	68c2      	ldr	r2, [r0, #12]
   2db96:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2db9a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2db9e:	2000      	movs	r0, #0
   2dba0:	4770      	bx	lr

0002dba2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2dba2:	6843      	ldr	r3, [r0, #4]
   2dba4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2dba6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2dbaa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2dbae:	4770      	bx	lr

0002dbb0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2dbb0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2dbb2:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2dbb4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dbb6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2dbba:	b148      	cbz	r0, 2dbd0 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dbbc:	2000      	movs	r0, #0
	*c = data->rx_data;
   2dbbe:	7d12      	ldrb	r2, [r2, #20]
   2dbc0:	700a      	strb	r2, [r1, #0]
   2dbc2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2dbc6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dbca:	2201      	movs	r2, #1
   2dbcc:	601a      	str	r2, [r3, #0]
	return 0;
   2dbce:	4770      	bx	lr
		return -1;
   2dbd0:	f04f 30ff 	mov.w	r0, #4294967295
}
   2dbd4:	4770      	bx	lr

0002dbd6 <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   2dbd6:	6843      	ldr	r3, [r0, #4]
{
   2dbd8:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2dbda:	681c      	ldr	r4, [r3, #0]
{
   2dbdc:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dbde:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2dbe2:	b1a0      	cbz	r0, 2dc0e <uarte_nrfx_fifo_fill+0x38>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2dbe4:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   2dbe6:	68eb      	ldr	r3, [r5, #12]
   2dbe8:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dbea:	2300      	movs	r3, #0
   2dbec:	4290      	cmp	r0, r2
   2dbee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2dbf2:	bfa8      	it	ge
   2dbf4:	4610      	movge	r0, r2
   2dbf6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   2dbfa:	68ea      	ldr	r2, [r5, #12]
   2dbfc:	4283      	cmp	r3, r0
   2dbfe:	6892      	ldr	r2, [r2, #8]
   2dc00:	db06      	blt.n	2dc10 <uarte_nrfx_fifo_fill+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dc02:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2dc04:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2dc08:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dc0c:	60a3      	str	r3, [r4, #8]
}
   2dc0e:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2dc10:	5cce      	ldrb	r6, [r1, r3]
   2dc12:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   2dc14:	3301      	adds	r3, #1
   2dc16:	e7f0      	b.n	2dbfa <uarte_nrfx_fifo_fill+0x24>

0002dc18 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   2dc18:	6843      	ldr	r3, [r0, #4]
   2dc1a:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dc1c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2dc20:	b153      	cbz	r3, 2dc38 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2dc22:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dc24:	2000      	movs	r0, #0
   2dc26:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   2dc2a:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dc2e:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2dc30:	7d1b      	ldrb	r3, [r3, #20]
   2dc32:	700b      	strb	r3, [r1, #0]
   2dc34:	6010      	str	r0, [r2, #0]
}
   2dc36:	4770      	bx	lr
	int num_rx = 0;
   2dc38:	4618      	mov	r0, r3
}
   2dc3a:	4770      	bx	lr

0002dc3c <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   2dc3c:	2100      	movs	r1, #0
   2dc3e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2dc40:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   2dc42:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   2dc44:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2dc46:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   2dc48:	f44f 7280 	mov.w	r2, #256	; 0x100
   2dc4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2dc50:	4770      	bx	lr

0002dc52 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2dc52:	2201      	movs	r2, #1
   2dc54:	68c3      	ldr	r3, [r0, #12]
   2dc56:	68db      	ldr	r3, [r3, #12]
   2dc58:	739a      	strb	r2, [r3, #14]
}
   2dc5a:	4770      	bx	lr

0002dc5c <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   2dc5c:	68c3      	ldr	r3, [r0, #12]
   2dc5e:	68db      	ldr	r3, [r3, #12]
   2dc60:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2dc62:	b94b      	cbnz	r3, 2dc78 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   2dc64:	6843      	ldr	r3, [r0, #4]
   2dc66:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dc68:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   2dc6c:	b128      	cbz	r0, 2dc7a <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   2dc6e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2dc72:	f3c0 2000 	ubfx	r0, r0, #8, #1
   2dc76:	4770      	bx	lr
   2dc78:	2000      	movs	r0, #0
}
   2dc7a:	4770      	bx	lr

0002dc7c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2dc7c:	6843      	ldr	r3, [r0, #4]
   2dc7e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dc80:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2dc84:	3800      	subs	r0, #0
   2dc86:	bf18      	it	ne
   2dc88:	2001      	movne	r0, #1
   2dc8a:	4770      	bx	lr

0002dc8c <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2dc8c:	2210      	movs	r2, #16
	return config->uarte_regs;
   2dc8e:	6843      	ldr	r3, [r0, #4]
   2dc90:	681b      	ldr	r3, [r3, #0]
   2dc92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2dc96:	4770      	bx	lr

0002dc98 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2dc98:	2210      	movs	r2, #16
	return config->uarte_regs;
   2dc9a:	6843      	ldr	r3, [r0, #4]
   2dc9c:	681b      	ldr	r3, [r3, #0]
   2dc9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2dca2:	4770      	bx	lr

0002dca4 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2dca4:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2dca8:	6843      	ldr	r3, [r0, #4]
   2dcaa:	681b      	ldr	r3, [r3, #0]
   2dcac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2dcb0:	4770      	bx	lr

0002dcb2 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2dcb2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2dcb6:	6843      	ldr	r3, [r0, #4]
   2dcb8:	681b      	ldr	r3, [r3, #0]
   2dcba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2dcbe:	4770      	bx	lr

0002dcc0 <uarte_nrfx_irq_update>:
}
   2dcc0:	2001      	movs	r0, #1
   2dcc2:	4770      	bx	lr

0002dcc4 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2dcc4:	68c3      	ldr	r3, [r0, #12]
   2dcc6:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2dcc8:	e9c3 1200 	strd	r1, r2, [r3]
}
   2dccc:	4770      	bx	lr

0002dcce <uarte_nrfx_irq_is_pending>:
{
   2dcce:	b508      	push	{r3, lr}
	return config->uarte_regs;
   2dcd0:	6843      	ldr	r3, [r0, #4]
{
   2dcd2:	4602      	mov	r2, r0
	return config->uarte_regs;
   2dcd4:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   2dcd6:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   2dcda:	05db      	lsls	r3, r3, #23
   2dcdc:	d405      	bmi.n	2dcea <uarte_nrfx_irq_is_pending+0x1c>
   2dcde:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   2dce2:	f010 0010 	ands.w	r0, r0, #16
   2dce6:	d106      	bne.n	2dcf6 <uarte_nrfx_irq_is_pending+0x28>
}
   2dce8:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2dcea:	f7ff ffb7 	bl	2dc5c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   2dcee:	2800      	cmp	r0, #0
   2dcf0:	d0f5      	beq.n	2dcde <uarte_nrfx_irq_is_pending+0x10>
		||
   2dcf2:	2001      	movs	r0, #1
   2dcf4:	e7f8      	b.n	2dce8 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2dcf6:	4610      	mov	r0, r2
   2dcf8:	f7ff ffc0 	bl	2dc7c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2dcfc:	3800      	subs	r0, #0
   2dcfe:	bf18      	it	ne
   2dd00:	2001      	movne	r0, #1
   2dd02:	e7f1      	b.n	2dce8 <uarte_nrfx_irq_is_pending+0x1a>

0002dd04 <uarte_nrfx_poll_out>:
{
   2dd04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   2dd08:	6843      	ldr	r3, [r0, #4]
{
   2dd0a:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   2dd0e:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2dd10:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   2dd12:	f000 fed0 	bl	2eab6 <k_is_in_isr>
   2dd16:	bb98      	cbnz	r0, 2dd80 <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   2dd18:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2dd1a:	f04f 0801 	mov.w	r8, #1
   2dd1e:	f106 0710 	add.w	r7, r6, #16
   2dd22:	e8d7 3fef 	ldaex	r3, [r7]
   2dd26:	2b00      	cmp	r3, #0
   2dd28:	d103      	bne.n	2dd32 <uarte_nrfx_poll_out+0x2e>
   2dd2a:	e8c7 8fe2 	stlex	r2, r8, [r7]
   2dd2e:	2a00      	cmp	r2, #0
   2dd30:	d1f7      	bne.n	2dd22 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   2dd32:	d007      	beq.n	2dd44 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   2dd34:	2021      	movs	r0, #33	; 0x21
   2dd36:	2100      	movs	r1, #0
   2dd38:	3d01      	subs	r5, #1
   2dd3a:	f7f6 fda7 	bl	2488c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   2dd3e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   2dd42:	d1ee      	bne.n	2dd22 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dd44:	2300      	movs	r3, #0
   2dd46:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2dd4a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2dd4e:	f10d 0307 	add.w	r3, sp, #7
   2dd52:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2dd56:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dd58:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   2dd5c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dd60:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dd62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   2dd66:	b923      	cbnz	r3, 2dd72 <uarte_nrfx_poll_out+0x6e>
   2dd68:	2001      	movs	r0, #1
   2dd6a:	f000 fde2 	bl	2e932 <nrfx_busy_wait>
   2dd6e:	3d01      	subs	r5, #1
   2dd70:	d1f7      	bne.n	2dd62 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dd72:	2301      	movs	r3, #1
   2dd74:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   2dd76:	2300      	movs	r3, #0
   2dd78:	6133      	str	r3, [r6, #16]
}
   2dd7a:	b002      	add	sp, #8
   2dd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   2dd80:	2301      	movs	r3, #1
   2dd82:	6133      	str	r3, [r6, #16]
   2dd84:	e7de      	b.n	2dd44 <uarte_nrfx_poll_out+0x40>

0002dd86 <uarte_instance_init.constprop.0>:
static int uarte_instance_init(const struct device *dev,
   2dd86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2dd8a:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
   2dd8e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2dd90:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   2dd92:	681c      	ldr	r4, [r3, #0]
   2dd94:	680b      	ldr	r3, [r1, #0]
   2dd96:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   2dd9a:	4606      	mov	r6, r0
	data->dev = dev;
   2dd9c:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2dd9e:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   2dda0:	460d      	mov	r5, r1
   2dda2:	9301      	str	r3, [sp, #4]
   2dda4:	f7e8 f97c 	bl	160a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2dda8:	2301      	movs	r3, #1
   2ddaa:	9a01      	ldr	r2, [sp, #4]
   2ddac:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2ddae:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2ddb0:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ddb2:	a801      	add	r0, sp, #4
   2ddb4:	9301      	str	r3, [sp, #4]
   2ddb6:	f7e8 f973 	bl	160a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ddba:	2203      	movs	r2, #3
   2ddbc:	9b01      	ldr	r3, [sp, #4]
   2ddbe:	3380      	adds	r3, #128	; 0x80
   2ddc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   2ddc4:	686b      	ldr	r3, [r5, #4]
   2ddc6:	1c58      	adds	r0, r3, #1
   2ddc8:	d007      	beq.n	2ddda <uarte_instance_init.constprop.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ddca:	a801      	add	r0, sp, #4
   2ddcc:	9301      	str	r3, [sp, #4]
   2ddce:	f7e8 f967 	bl	160a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ddd2:	9b01      	ldr	r3, [sp, #4]
   2ddd4:	3380      	adds	r3, #128	; 0x80
   2ddd6:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   2ddda:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   2ddde:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2dde2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   2dde6:	68ab      	ldr	r3, [r5, #8]
   2dde8:	1c59      	adds	r1, r3, #1
   2ddea:	d008      	beq.n	2ddfe <uarte_instance_init.constprop.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ddec:	a801      	add	r0, sp, #4
   2ddee:	9301      	str	r3, [sp, #4]
   2ddf0:	f7e8 f956 	bl	160a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ddf4:	2200      	movs	r2, #0
   2ddf6:	9b01      	ldr	r3, [sp, #4]
   2ddf8:	3380      	adds	r3, #128	; 0x80
   2ddfa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   2ddfe:	68eb      	ldr	r3, [r5, #12]
   2de00:	1c5a      	adds	r2, r3, #1
   2de02:	d011      	beq.n	2de28 <uarte_instance_init.constprop.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2de04:	a801      	add	r0, sp, #4
   2de06:	9301      	str	r3, [sp, #4]
   2de08:	f7e8 f94a 	bl	160a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2de0c:	2301      	movs	r3, #1
   2de0e:	9a01      	ldr	r2, [sp, #4]
   2de10:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2de12:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2de14:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2de16:	a801      	add	r0, sp, #4
   2de18:	9301      	str	r3, [sp, #4]
   2de1a:	f7e8 f941 	bl	160a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2de1e:	2203      	movs	r2, #3
   2de20:	9b01      	ldr	r3, [sp, #4]
   2de22:	3380      	adds	r3, #128	; 0x80
   2de24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2de28:	68f1      	ldr	r1, [r6, #12]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   2de2a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2de2e:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   2de30:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   2de34:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   2de36:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   2de3a:	f7e8 f87b 	bl	15f34 <uarte_nrfx_configure>
	if (err) {
   2de3e:	b9d8      	cbnz	r0, 2de78 <uarte_instance_init.constprop.0+0xf2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2de40:	2308      	movs	r3, #8
   2de42:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   2de46:	686b      	ldr	r3, [r5, #4]
   2de48:	3301      	adds	r3, #1
   2de4a:	d00b      	beq.n	2de64 <uarte_instance_init.constprop.0+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2de4c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   2de50:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2de54:	f107 0314 	add.w	r3, r7, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2de58:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2de5c:	2301      	movs	r3, #1
   2de5e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2de62:	6023      	str	r3, [r4, #0]
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   2de64:	68fb      	ldr	r3, [r7, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2de66:	689b      	ldr	r3, [r3, #8]
   2de68:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2de6c:	2300      	movs	r3, #0
   2de6e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2de72:	2301      	movs	r3, #1
   2de74:	60a3      	str	r3, [r4, #8]
   2de76:	60e3      	str	r3, [r4, #12]
}
   2de78:	b002      	add	sp, #8
   2de7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002de7e <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2de7e:	2000      	movs	r0, #0
   2de80:	4770      	bx	lr

0002de82 <update_offset>:
{
   2de82:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   2de84:	4604      	mov	r4, r0
   2de86:	b140      	cbz	r0, 2de9a <update_offset+0x18>
   2de88:	6803      	ldr	r3, [r0, #0]
   2de8a:	b133      	cbz	r3, 2de9a <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   2de8c:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   2de8e:	4418      	add	r0, r3
   2de90:	f7f8 fee2 	bl	26c58 <strlen>
   2de94:	68a3      	ldr	r3, [r4, #8]
   2de96:	4418      	add	r0, r3
   2de98:	60a0      	str	r0, [r4, #8]
}
   2de9a:	bd10      	pop	{r4, pc}

0002de9c <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   2de9c:	b161      	cbz	r1, 2deb8 <add_item_to_array+0x1c>
   2de9e:	b160      	cbz	r0, 2deba <add_item_to_array+0x1e>
    child = array->child;
   2dea0:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   2dea2:	b913      	cbnz	r3, 2deaa <add_item_to_array+0xe>
        array->child = item;
   2dea4:	6081      	str	r1, [r0, #8]
}
   2dea6:	2001      	movs	r0, #1
   2dea8:	4770      	bx	lr
        while (child->next)
   2deaa:	461a      	mov	r2, r3
   2deac:	681b      	ldr	r3, [r3, #0]
   2deae:	2b00      	cmp	r3, #0
   2deb0:	d1fb      	bne.n	2deaa <add_item_to_array+0xe>
    prev->next = item;
   2deb2:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   2deb4:	604a      	str	r2, [r1, #4]
   2deb6:	e7f6      	b.n	2dea6 <add_item_to_array+0xa>
        return false;
   2deb8:	4608      	mov	r0, r1
}
   2deba:	4770      	bx	lr

0002debc <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   2debc:	4603      	mov	r3, r0
   2debe:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2dec0:	2028      	movs	r0, #40	; 0x28
   2dec2:	4798      	blx	r3
    if (node)
   2dec4:	4604      	mov	r4, r0
   2dec6:	b118      	cbz	r0, 2ded0 <cJSON_New_Item.isra.0+0x14>
   2dec8:	2228      	movs	r2, #40	; 0x28
   2deca:	2100      	movs	r1, #0
   2decc:	f7f8 fab4 	bl	26438 <memset>
}
   2ded0:	4620      	mov	r0, r4
   2ded2:	bd10      	pop	{r4, pc}

0002ded4 <ensure>:
{
   2ded4:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   2ded6:	4604      	mov	r4, r0
   2ded8:	b1b8      	cbz	r0, 2df0a <ensure+0x36>
   2deda:	6805      	ldr	r5, [r0, #0]
   2dedc:	b165      	cbz	r5, 2def8 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   2dede:	6842      	ldr	r2, [r0, #4]
   2dee0:	b112      	cbz	r2, 2dee8 <ensure+0x14>
   2dee2:	6883      	ldr	r3, [r0, #8]
   2dee4:	429a      	cmp	r2, r3
   2dee6:	d910      	bls.n	2df0a <ensure+0x36>
    if (needed > INT_MAX)
   2dee8:	2900      	cmp	r1, #0
   2deea:	db0e      	blt.n	2df0a <ensure+0x36>
    needed += p->offset + 1;
   2deec:	68a0      	ldr	r0, [r4, #8]
   2deee:	4401      	add	r1, r0
   2def0:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   2def2:	429a      	cmp	r2, r3
   2def4:	d302      	bcc.n	2defc <ensure+0x28>
        return p->buffer + p->offset;
   2def6:	4405      	add	r5, r0
}
   2def8:	4628      	mov	r0, r5
   2defa:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   2defc:	6922      	ldr	r2, [r4, #16]
   2defe:	b922      	cbnz	r2, 2df0a <ensure+0x36>
    if (needed > (INT_MAX / 2))
   2df00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2df04:	d303      	bcc.n	2df0e <ensure+0x3a>
        if (needed <= INT_MAX)
   2df06:	2b00      	cmp	r3, #0
   2df08:	da0f      	bge.n	2df2a <ensure+0x56>
        return NULL;
   2df0a:	2500      	movs	r5, #0
   2df0c:	e7f4      	b.n	2def8 <ensure+0x24>
        newsize = needed + 1;
   2df0e:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   2df10:	6a23      	ldr	r3, [r4, #32]
   2df12:	b16b      	cbz	r3, 2df30 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   2df14:	4628      	mov	r0, r5
   2df16:	4631      	mov	r1, r6
   2df18:	4798      	blx	r3
        if (newbuffer == NULL)
   2df1a:	4605      	mov	r5, r0
   2df1c:	b9b0      	cbnz	r0, 2df4c <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   2df1e:	69e3      	ldr	r3, [r4, #28]
   2df20:	6820      	ldr	r0, [r4, #0]
   2df22:	4798      	blx	r3
            p->buffer = NULL;
   2df24:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   2df28:	e7e6      	b.n	2def8 <ensure+0x24>
            newsize = INT_MAX;
   2df2a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2df2e:	e7ef      	b.n	2df10 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   2df30:	4630      	mov	r0, r6
   2df32:	69a3      	ldr	r3, [r4, #24]
   2df34:	4798      	blx	r3
        if (!newbuffer)
   2df36:	4605      	mov	r5, r0
   2df38:	2800      	cmp	r0, #0
   2df3a:	d0f0      	beq.n	2df1e <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   2df3c:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2df3e:	6821      	ldr	r1, [r4, #0]
   2df40:	3201      	adds	r2, #1
   2df42:	f7de fe03 	bl	cb4c <memcpy>
        p->hooks.deallocate(p->buffer);
   2df46:	69e3      	ldr	r3, [r4, #28]
   2df48:	6820      	ldr	r0, [r4, #0]
   2df4a:	4798      	blx	r3
    return newbuffer + p->offset;
   2df4c:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   2df4e:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   2df52:	441d      	add	r5, r3
   2df54:	e7d0      	b.n	2def8 <ensure+0x24>

0002df56 <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   2df56:	2101      	movs	r1, #1
   2df58:	f7e8 bbf0 	b.w	1673c <print.constprop.0>

0002df5c <cJSON_AddStringToObject>:
{
   2df5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2df5e:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   2df60:	4610      	mov	r0, r2
{
   2df62:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   2df64:	f7e8 fc5a 	bl	1681c <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2df68:	2300      	movs	r3, #0
   2df6a:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   2df6c:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2df6e:	9901      	ldr	r1, [sp, #4]
   2df70:	4628      	mov	r0, r5
   2df72:	f7e8 fbbb 	bl	166ec <add_item_to_object.constprop.0>
   2df76:	4605      	mov	r5, r0
   2df78:	b918      	cbnz	r0, 2df82 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   2df7a:	4620      	mov	r0, r4
   2df7c:	f7e8 fc2a 	bl	167d4 <cJSON_Delete>
    return NULL;
   2df80:	462c      	mov	r4, r5
}
   2df82:	4620      	mov	r0, r4
   2df84:	b003      	add	sp, #12
   2df86:	bd30      	pop	{r4, r5, pc}

0002df88 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2df88:	4668      	mov	r0, sp
   2df8a:	f020 0107 	bic.w	r1, r0, #7
   2df8e:	468d      	mov	sp, r1
   2df90:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   2df92:	f7ec f853 	bl	1a03c <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2df96:	f7e6 fbad 	bl	146f4 <_arch_isr_direct_pm>
   2df9a:	f7e6 ff53 	bl	14e44 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2df9e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2dfa2:	4685      	mov	sp, r0
   2dfa4:	4770      	bx	lr

0002dfa6 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2dfa6:	4668      	mov	r0, sp
   2dfa8:	f020 0107 	bic.w	r1, r0, #7
   2dfac:	468d      	mov	sp, r1
   2dfae:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   2dfb0:	f7ec fbea 	bl	1a788 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2dfb4:	f7e6 fb9e 	bl	146f4 <_arch_isr_direct_pm>
   2dfb8:	f7e6 ff44 	bl	14e44 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2dfbc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2dfc0:	4685      	mov	sp, r0
   2dfc2:	4770      	bx	lr

0002dfc4 <trace_task_create>:
{
   2dfc4:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2dfc6:	201d      	movs	r0, #29
   2dfc8:	2200      	movs	r2, #0
   2dfca:	2106      	movs	r1, #6
   2dfcc:	f7e6 fb60 	bl	14690 <z_arm_irq_priority_set>
}
   2dfd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2dfd4:	201d      	movs	r0, #29
   2dfd6:	f7e6 bb3d 	b.w	14654 <arch_irq_enable>

0002dfda <read_task_create>:
{
   2dfda:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2dfdc:	201c      	movs	r0, #28
   2dfde:	2200      	movs	r2, #0
   2dfe0:	2106      	movs	r1, #6
   2dfe2:	f7e6 fb55 	bl	14690 <z_arm_irq_priority_set>
}
   2dfe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2dfea:	201c      	movs	r0, #28
   2dfec:	f7e6 bb32 	b.w	14654 <arch_irq_enable>

0002dff0 <z_to_nrf_flags>:
{
   2dff0:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   2dff2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   2dff6:	bf18      	it	ne
   2dff8:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   2dffa:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   2dffc:	bf48      	it	mi
   2dffe:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   2e002:	06db      	lsls	r3, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   2e004:	bf48      	it	mi
   2e006:	f040 0020 	orrmi.w	r0, r0, #32
}
   2e00a:	4770      	bx	lr

0002e00c <z_to_nrf_family>:
	switch (z_family) {
   2e00c:	2806      	cmp	r0, #6
   2e00e:	d80a      	bhi.n	2e026 <z_to_nrf_family+0x1a>
   2e010:	b198      	cbz	r0, 2e03a <z_to_nrf_family+0x2e>
   2e012:	3801      	subs	r0, #1
   2e014:	2805      	cmp	r0, #5
   2e016:	d810      	bhi.n	2e03a <z_to_nrf_family+0x2e>
   2e018:	e8df f000 	tbb	[pc, r0]
   2e01c:	0f0d0312 	.word	0x0f0d0312
   2e020:	0b0f      	.short	0x0b0f
   2e022:	200a      	movs	r0, #10
   2e024:	4770      	bx	lr
   2e026:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   2e028:	bf14      	ite	ne
   2e02a:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   2e02e:	2066      	moveq	r0, #102	; 0x66
   2e030:	4770      	bx	lr
		return NRF_AF_LOCAL;
   2e032:	2001      	movs	r0, #1
   2e034:	4770      	bx	lr
		return NRF_AF_PACKET;
   2e036:	2005      	movs	r0, #5
   2e038:	4770      	bx	lr
		return -EAFNOSUPPORT;
   2e03a:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2e03e:	4770      	bx	lr
		return NRF_AF_INET;
   2e040:	2002      	movs	r0, #2
}
   2e042:	4770      	bx	lr

0002e044 <z_to_nrf_protocol>:
	switch (proto) {
   2e044:	f240 1311 	movw	r3, #273	; 0x111
   2e048:	4298      	cmp	r0, r3
   2e04a:	d023      	beq.n	2e094 <z_to_nrf_protocol+0x50>
   2e04c:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   2e050:	da11      	bge.n	2e076 <z_to_nrf_protocol+0x32>
   2e052:	2811      	cmp	r0, #17
   2e054:	d021      	beq.n	2e09a <z_to_nrf_protocol+0x56>
   2e056:	dc06      	bgt.n	2e066 <z_to_nrf_protocol+0x22>
   2e058:	b300      	cbz	r0, 2e09c <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   2e05a:	2806      	cmp	r0, #6
   2e05c:	bf14      	ite	ne
   2e05e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2e062:	2001      	moveq	r0, #1
   2e064:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2e066:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2e06a:	bf14      	ite	ne
   2e06c:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2e070:	f44f 7082 	moveq.w	r0, #260	; 0x104
   2e074:	4770      	bx	lr
	switch (proto) {
   2e076:	f240 2302 	movw	r3, #514	; 0x202
   2e07a:	4298      	cmp	r0, r3
   2e07c:	d00e      	beq.n	2e09c <z_to_nrf_protocol+0x58>
   2e07e:	f240 2303 	movw	r3, #515	; 0x203
   2e082:	4298      	cmp	r0, r3
   2e084:	d00a      	beq.n	2e09c <z_to_nrf_protocol+0x58>
   2e086:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   2e08a:	4298      	cmp	r0, r3
   2e08c:	bf18      	it	ne
   2e08e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2e092:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   2e094:	f44f 7087 	mov.w	r0, #270	; 0x10e
   2e098:	4770      	bx	lr
	switch (proto) {
   2e09a:	2002      	movs	r0, #2
}
   2e09c:	4770      	bx	lr

0002e09e <nrf91_socket_is_supported>:
}
   2e09e:	2001      	movs	r0, #1
   2e0a0:	4770      	bx	lr

0002e0a2 <nrf91_bsdlib_socket_offload_init>:
}
   2e0a2:	2000      	movs	r0, #0
   2e0a4:	4770      	bx	lr

0002e0a6 <nrf91_socket_offload_getsockopt>:
{
   2e0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e0aa:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   2e0ac:	2300      	movs	r3, #0
{
   2e0ae:	b086      	sub	sp, #24
   2e0b0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2e0b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2e0b8:	f8d8 3000 	ldr.w	r3, [r8]
{
   2e0bc:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2e0be:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2e0c0:	f240 2302 	movw	r3, #514	; 0x202
   2e0c4:	4299      	cmp	r1, r3
{
   2e0c6:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   2e0c8:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   2e0cc:	d005      	beq.n	2e0da <nrf91_socket_offload_getsockopt+0x34>
   2e0ce:	dc30      	bgt.n	2e132 <nrf91_socket_offload_getsockopt+0x8c>
   2e0d0:	2901      	cmp	r1, #1
   2e0d2:	d002      	beq.n	2e0da <nrf91_socket_offload_getsockopt+0x34>
   2e0d4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2e0d8:	d13c      	bne.n	2e154 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2e0da:	4631      	mov	r1, r6
   2e0dc:	4620      	mov	r0, r4
   2e0de:	aa02      	add	r2, sp, #8
   2e0e0:	f7e8 ff4a 	bl	16f78 <z_to_nrf_optname>
   2e0e4:	2800      	cmp	r0, #0
   2e0e6:	db35      	blt.n	2e154 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2e0e8:	2c01      	cmp	r4, #1
   2e0ea:	d126      	bne.n	2e13a <nrf91_socket_offload_getsockopt+0x94>
   2e0ec:	f1a6 0314 	sub.w	r3, r6, #20
   2e0f0:	2b01      	cmp	r3, #1
   2e0f2:	d822      	bhi.n	2e13a <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   2e0f4:	2308      	movs	r3, #8
   2e0f6:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   2e0f8:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2e0fa:	aa03      	add	r2, sp, #12
   2e0fc:	4638      	mov	r0, r7
   2e0fe:	9200      	str	r2, [sp, #0]
   2e100:	4621      	mov	r1, r4
   2e102:	9a02      	ldr	r2, [sp, #8]
   2e104:	f7f2 f93c 	bl	20380 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2e108:	4607      	mov	r7, r0
   2e10a:	b970      	cbnz	r0, 2e12a <nrf91_socket_offload_getsockopt+0x84>
   2e10c:	b16d      	cbz	r5, 2e12a <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   2e10e:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2e110:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   2e112:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2e116:	d108      	bne.n	2e12a <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   2e118:	2e04      	cmp	r6, #4
   2e11a:	d110      	bne.n	2e13e <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   2e11c:	6828      	ldr	r0, [r5, #0]
   2e11e:	f7e8 fd2f 	bl	16b80 <bsd_os_errno_set>
				*(int *)optval = errno;
   2e122:	f7fe fff4 	bl	2d10e <__errno>
   2e126:	6803      	ldr	r3, [r0, #0]
   2e128:	602b      	str	r3, [r5, #0]
}
   2e12a:	4638      	mov	r0, r7
   2e12c:	b006      	add	sp, #24
   2e12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2e132:	f240 2303 	movw	r3, #515	; 0x203
   2e136:	4299      	cmp	r1, r3
   2e138:	e7ce      	b.n	2e0d8 <nrf91_socket_offload_getsockopt+0x32>
   2e13a:	462b      	mov	r3, r5
   2e13c:	e7dd      	b.n	2e0fa <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   2e13e:	3e14      	subs	r6, #20
   2e140:	2e01      	cmp	r6, #1
   2e142:	d8f2      	bhi.n	2e12a <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   2e144:	9b04      	ldr	r3, [sp, #16]
   2e146:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   2e148:	9b05      	ldr	r3, [sp, #20]
   2e14a:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   2e14c:	2308      	movs	r3, #8
   2e14e:	f8c8 3000 	str.w	r3, [r8]
   2e152:	e7ea      	b.n	2e12a <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   2e154:	f7fe ffdb 	bl	2d10e <__errno>
   2e158:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2e15a:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2e15e:	6003      	str	r3, [r0, #0]
	return retval;
   2e160:	e7e3      	b.n	2e12a <nrf91_socket_offload_getsockopt+0x84>

0002e162 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2e162:	3801      	subs	r0, #1
   2e164:	f7f2 b8b8 	b.w	202d8 <nrf_listen>

0002e168 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   2e168:	3801      	subs	r0, #1
   2e16a:	f7f2 b85d 	b.w	20228 <nrf_close>

0002e16e <nrf91_socket_offload_freeaddrinfo>:
{
   2e16e:	b538      	push	{r3, r4, r5, lr}
   2e170:	4604      	mov	r4, r0
	while (next != NULL) {
   2e172:	b904      	cbnz	r4, 2e176 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2e174:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2e176:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2e178:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2e17a:	f000 fddc 	bl	2ed36 <k_free>
		k_free(this);
   2e17e:	4620      	mov	r0, r4
   2e180:	f000 fdd9 	bl	2ed36 <k_free>
		next = next->ai_next;
   2e184:	462c      	mov	r4, r5
   2e186:	e7f4      	b.n	2e172 <nrf91_socket_offload_freeaddrinfo+0x4>

0002e188 <z_to_nrf_addrinfo_hints>:
{
   2e188:	b538      	push	{r3, r4, r5, lr}
   2e18a:	460c      	mov	r4, r1
   2e18c:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2e18e:	221c      	movs	r2, #28
   2e190:	2100      	movs	r1, #0
   2e192:	1d20      	adds	r0, r4, #4
   2e194:	f7f8 f950 	bl	26438 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2e198:	2300      	movs	r3, #0
   2e19a:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2e19c:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   2e19e:	2b03      	cmp	r3, #3
   2e1a0:	d003      	beq.n	2e1aa <z_to_nrf_addrinfo_hints+0x22>
   2e1a2:	2b04      	cmp	r3, #4
   2e1a4:	bf08      	it	eq
   2e1a6:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   2e1aa:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2e1ac:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   2e1ae:	f7ff ff2d 	bl	2e00c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2e1b2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2e1b6:	d00b      	beq.n	2e1d0 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   2e1b8:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2e1ba:	6928      	ldr	r0, [r5, #16]
   2e1bc:	f7ff ff42 	bl	2e044 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2e1c0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2e1c4:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2e1c6:	d003      	beq.n	2e1d0 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   2e1c8:	69e8      	ldr	r0, [r5, #28]
   2e1ca:	b108      	cbz	r0, 2e1d0 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   2e1cc:	61a0      	str	r0, [r4, #24]
	return 0;
   2e1ce:	2000      	movs	r0, #0
}
   2e1d0:	bd38      	pop	{r3, r4, r5, pc}

0002e1d2 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2e1d2:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2e1d4:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2e1d6:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2e1d8:	4603      	mov	r3, r0
{
   2e1da:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2e1dc:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e1e0:	f101 0420 	add.w	r4, r1, #32
   2e1e4:	f101 0210 	add.w	r2, r1, #16
   2e1e8:	f852 5b04 	ldr.w	r5, [r2], #4
   2e1ec:	42a2      	cmp	r2, r4
   2e1ee:	f843 5b04 	str.w	r5, [r3], #4
   2e1f2:	d1f9      	bne.n	2e1e8 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2e1f4:	6a0b      	ldr	r3, [r1, #32]
   2e1f6:	7503      	strb	r3, [r0, #20]
}
   2e1f8:	bd30      	pop	{r4, r5, pc}

0002e1fa <nrf91_socket_offload_recvfrom>:
{
   2e1fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   2e1fc:	1e45      	subs	r5, r0, #1
{
   2e1fe:	b08f      	sub	sp, #60	; 0x3c
   2e200:	4618      	mov	r0, r3
   2e202:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   2e206:	9203      	str	r2, [sp, #12]
   2e208:	f7ff fef2 	bl	2dff0 <z_to_nrf_flags>
	if (from == NULL) {
   2e20c:	9a03      	ldr	r2, [sp, #12]
   2e20e:	4603      	mov	r3, r0
   2e210:	b944      	cbnz	r4, 2e224 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2e212:	4628      	mov	r0, r5
   2e214:	e9cd 4400 	strd	r4, r4, [sp]
   2e218:	f7f2 f830 	bl	2027c <nrf_recvfrom>
   2e21c:	4605      	mov	r5, r0
}
   2e21e:	4628      	mov	r0, r5
   2e220:	b00f      	add	sp, #60	; 0x3c
   2e222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2e224:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2e226:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2e228:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2e22a:	a804      	add	r0, sp, #16
   2e22c:	9001      	str	r0, [sp, #4]
   2e22e:	9700      	str	r7, [sp, #0]
   2e230:	4628      	mov	r0, r5
   2e232:	f7f2 f823 	bl	2027c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2e236:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2e238:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   2e23a:	2b02      	cmp	r3, #2
   2e23c:	d109      	bne.n	2e252 <nrf91_socket_offload_recvfrom+0x58>
	ptr->sin_port = nrf_in->sin_port;
   2e23e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2e242:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2e244:	2301      	movs	r3, #1
   2e246:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2e248:	9b08      	ldr	r3, [sp, #32]
   2e24a:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2e24c:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2e24e:	6033      	str	r3, [r6, #0]
	return retval;
   2e250:	e7e5      	b.n	2e21e <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2e252:	2b0a      	cmp	r3, #10
   2e254:	d1e3      	bne.n	2e21e <nrf91_socket_offload_recvfrom+0x24>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2e256:	4639      	mov	r1, r7
   2e258:	4620      	mov	r0, r4
   2e25a:	f7ff ffba 	bl	2e1d2 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2e25e:	2318      	movs	r3, #24
   2e260:	e7f5      	b.n	2e24e <nrf91_socket_offload_recvfrom+0x54>

0002e262 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2e262:	2300      	movs	r3, #0
{
   2e264:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2e266:	e9cd 3300 	strd	r3, r3, [sp]
   2e26a:	f7ff ffc6 	bl	2e1fa <nrf91_socket_offload_recvfrom>
}
   2e26e:	b003      	add	sp, #12
   2e270:	f85d fb04 	ldr.w	pc, [sp], #4

0002e274 <nrf91_socket_offload_getaddrinfo>:
{
   2e274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e278:	4614      	mov	r4, r2
   2e27a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   2e27c:	2100      	movs	r1, #0
{
   2e27e:	b093      	sub	sp, #76	; 0x4c
   2e280:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2e282:	2220      	movs	r2, #32
   2e284:	a802      	add	r0, sp, #8
{
   2e286:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2e288:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2e28a:	f7f8 f8d5 	bl	26438 <memset>
	if (hints != NULL) {
   2e28e:	b194      	cbz	r4, 2e2b6 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2e290:	4620      	mov	r0, r4
   2e292:	a902      	add	r1, sp, #8
   2e294:	f7ff ff78 	bl	2e188 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2e298:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2e29c:	f000 80d0 	beq.w	2e440 <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   2e2a0:	306a      	adds	r0, #106	; 0x6a
   2e2a2:	f000 80d0 	beq.w	2e446 <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   2e2a6:	6820      	ldr	r0, [r4, #0]
   2e2a8:	b120      	cbz	r0, 2e2b4 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2e2aa:	ac0a      	add	r4, sp, #40	; 0x28
   2e2ac:	4621      	mov	r1, r4
   2e2ae:	f7ff ff6b 	bl	2e188 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2e2b2:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2e2b4:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2e2b6:	4628      	mov	r0, r5
   2e2b8:	4622      	mov	r2, r4
   2e2ba:	4631      	mov	r1, r6
   2e2bc:	ab01      	add	r3, sp, #4
   2e2be:	f7f2 f87b 	bl	203b8 <nrf_getaddrinfo>
	if (retval != 0) {
   2e2c2:	4605      	mov	r5, r0
   2e2c4:	b300      	cbz	r0, 2e308 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   2e2c6:	282f      	cmp	r0, #47	; 0x2f
   2e2c8:	f000 80c0 	beq.w	2e44c <nrf91_socket_offload_getaddrinfo+0x1d8>
   2e2cc:	dc0c      	bgt.n	2e2e8 <nrf91_socket_offload_getaddrinfo+0x74>
   2e2ce:	280c      	cmp	r0, #12
   2e2d0:	f000 80bf 	beq.w	2e452 <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   2e2d4:	2823      	cmp	r0, #35	; 0x23
   2e2d6:	bf14      	ite	ne
   2e2d8:	f06f 050a 	mvnne.w	r5, #10
   2e2dc:	f06f 0502 	mvneq.w	r5, #2
}
   2e2e0:	4628      	mov	r0, r5
   2e2e2:	b013      	add	sp, #76	; 0x4c
   2e2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   2e2e8:	2833      	cmp	r0, #51	; 0x33
   2e2ea:	d006      	beq.n	2e2fa <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   2e2ec:	2873      	cmp	r0, #115	; 0x73
   2e2ee:	bf14      	ite	ne
   2e2f0:	f06f 050a 	mvnne.w	r5, #10
   2e2f4:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   2e2f8:	e7f2      	b.n	2e2e0 <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   2e2fa:	f7fe ff08 	bl	2d10e <__errno>
   2e2fe:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   2e300:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   2e304:	6003      	str	r3, [r0, #0]
   2e306:	e7eb      	b.n	2e2e0 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   2e308:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2e30a:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2e30c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2e30e:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2e310:	b91e      	cbnz	r6, 2e31a <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   2e312:	9801      	ldr	r0, [sp, #4]
   2e314:	f7f2 f852 	bl	203bc <nrf_freeaddrinfo>
	return retval;
   2e318:	e7e2      	b.n	2e2e0 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   2e31a:	2050      	movs	r0, #80	; 0x50
   2e31c:	f7f7 fcec 	bl	25cf8 <k_malloc>
		if (next_z_res == NULL) {
   2e320:	4604      	mov	r4, r0
   2e322:	2800      	cmp	r0, #0
   2e324:	f000 8081 	beq.w	2e42a <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   2e328:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2e32a:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2e32c:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   2e32e:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2e332:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2e336:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2e33a:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2e33c:	dc23      	bgt.n	2e386 <nrf91_socket_offload_getaddrinfo+0x112>
   2e33e:	2900      	cmp	r1, #0
   2e340:	dd23      	ble.n	2e38a <nrf91_socket_offload_getaddrinfo+0x116>
   2e342:	1e4b      	subs	r3, r1, #1
   2e344:	2b09      	cmp	r3, #9
   2e346:	d820      	bhi.n	2e38a <nrf91_socket_offload_getaddrinfo+0x116>
   2e348:	e8df f003 	tbb	[pc, r3]
   2e34c:	1f1f2905 	.word	0x1f1f2905
   2e350:	1f1f1f25 	.word	0x1f1f1f25
   2e354:	271f      	.short	0x271f
		return AF_LOCAL;
   2e356:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e358:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   2e35a:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   2e35c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2e360:	d04b      	beq.n	2e3fa <nrf91_socket_offload_getaddrinfo+0x186>
   2e362:	dc26      	bgt.n	2e3b2 <nrf91_socket_offload_getaddrinfo+0x13e>
   2e364:	2a02      	cmp	r2, #2
   2e366:	d04c      	beq.n	2e402 <nrf91_socket_offload_getaddrinfo+0x18e>
   2e368:	dc1d      	bgt.n	2e3a6 <nrf91_socket_offload_getaddrinfo+0x132>
   2e36a:	b372      	cbz	r2, 2e3ca <nrf91_socket_offload_getaddrinfo+0x156>
   2e36c:	2a01      	cmp	r2, #1
   2e36e:	d04a      	beq.n	2e406 <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e370:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2e374:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   2e376:	2300      	movs	r3, #0
   2e378:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   2e37a:	4620      	mov	r0, r4
   2e37c:	f000 fcdb 	bl	2ed36 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2e380:	f06f 0506 	mvn.w	r5, #6
   2e384:	e053      	b.n	2e42e <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   2e386:	2966      	cmp	r1, #102	; 0x66
   2e388:	d00b      	beq.n	2e3a2 <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   2e38a:	4620      	mov	r0, r4
   2e38c:	f000 fcd3 	bl	2ed36 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2e390:	f06f 0508 	mvn.w	r5, #8
   2e394:	e04b      	b.n	2e42e <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   2e396:	2303      	movs	r3, #3
   2e398:	e7de      	b.n	2e358 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   2e39a:	2302      	movs	r3, #2
   2e39c:	e7dc      	b.n	2e358 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   2e39e:	2301      	movs	r3, #1
   2e3a0:	e7da      	b.n	2e358 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   2e3a2:	460b      	mov	r3, r1
   2e3a4:	e7d8      	b.n	2e358 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   2e3a6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2e3aa:	d1e1      	bne.n	2e370 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e3ac:	f44f 7381 	mov.w	r3, #258	; 0x102
   2e3b0:	e025      	b.n	2e3fe <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   2e3b2:	f240 2302 	movw	r3, #514	; 0x202
   2e3b6:	429a      	cmp	r2, r3
   2e3b8:	d007      	beq.n	2e3ca <nrf91_socket_offload_getaddrinfo+0x156>
   2e3ba:	f240 2303 	movw	r3, #515	; 0x203
   2e3be:	429a      	cmp	r2, r3
   2e3c0:	d003      	beq.n	2e3ca <nrf91_socket_offload_getaddrinfo+0x156>
   2e3c2:	f240 2301 	movw	r3, #513	; 0x201
   2e3c6:	429a      	cmp	r2, r3
   2e3c8:	d1d2      	bne.n	2e370 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e3ca:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2e3cc:	2902      	cmp	r1, #2
   2e3ce:	d11c      	bne.n	2e40a <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2e3d0:	2008      	movs	r0, #8
   2e3d2:	f7f7 fc91 	bl	25cf8 <k_malloc>
   2e3d6:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2e3d8:	b320      	cbz	r0, 2e424 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2e3da:	2308      	movs	r3, #8
   2e3dc:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2e3de:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2e3e0:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2e3e2:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2e3e4:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   2e3e6:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2e3e8:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2e3ea:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2e3ec:	f1b8 0f00 	cmp.w	r8, #0
   2e3f0:	d123      	bne.n	2e43a <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   2e3f2:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2e3f4:	46a0      	mov	r8, r4
   2e3f6:	69f6      	ldr	r6, [r6, #28]
   2e3f8:	e78a      	b.n	2e310 <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e3fa:	f240 1311 	movw	r3, #273	; 0x111
   2e3fe:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   2e400:	e7e4      	b.n	2e3cc <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e402:	2311      	movs	r3, #17
   2e404:	e7fb      	b.n	2e3fe <nrf91_socket_offload_getaddrinfo+0x18a>
   2e406:	2306      	movs	r3, #6
   2e408:	e7f9      	b.n	2e3fe <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2e40a:	290a      	cmp	r1, #10
   2e40c:	d1b5      	bne.n	2e37a <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2e40e:	2018      	movs	r0, #24
   2e410:	f7f7 fc72 	bl	25cf8 <k_malloc>
   2e414:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2e416:	b128      	cbz	r0, 2e424 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2e418:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2e41a:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2e41c:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2e41e:	f7ff fed8 	bl	2e1d2 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2e422:	e7e3      	b.n	2e3ec <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   2e424:	4620      	mov	r0, r4
   2e426:	f000 fc86 	bl	2ed36 <k_free>
			retval = DNS_EAI_MEMORY;
   2e42a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   2e42e:	6838      	ldr	r0, [r7, #0]
   2e430:	f7ff fe9d 	bl	2e16e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2e434:	2300      	movs	r3, #0
   2e436:	603b      	str	r3, [r7, #0]
   2e438:	e76b      	b.n	2e312 <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   2e43a:	f8c8 4000 	str.w	r4, [r8]
   2e43e:	e7d9      	b.n	2e3f4 <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   2e440:	f06f 0506 	mvn.w	r5, #6
   2e444:	e74c      	b.n	2e2e0 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   2e446:	f06f 0508 	mvn.w	r5, #8
   2e44a:	e749      	b.n	2e2e0 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   2e44c:	f06f 0501 	mvn.w	r5, #1
   2e450:	e746      	b.n	2e2e0 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   2e452:	f06f 0509 	mvn.w	r5, #9
   2e456:	e743      	b.n	2e2e0 <nrf91_socket_offload_getaddrinfo+0x6c>

0002e458 <z_to_nrf_ipv6>:
{
   2e458:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2e45a:	2124      	movs	r1, #36	; 0x24
   2e45c:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2e45e:	8841      	ldrh	r1, [r0, #2]
{
   2e460:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2e462:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2e464:	210a      	movs	r1, #10
{
   2e466:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   2e468:	6059      	str	r1, [r3, #4]
   2e46a:	1d04      	adds	r4, r0, #4
   2e46c:	f103 0610 	add.w	r6, r3, #16
   2e470:	f100 0714 	add.w	r7, r0, #20
   2e474:	4635      	mov	r5, r6
   2e476:	6820      	ldr	r0, [r4, #0]
   2e478:	6861      	ldr	r1, [r4, #4]
   2e47a:	3408      	adds	r4, #8
   2e47c:	c503      	stmia	r5!, {r0, r1}
   2e47e:	42bc      	cmp	r4, r7
   2e480:	462e      	mov	r6, r5
   2e482:	d1f7      	bne.n	2e474 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2e484:	7d12      	ldrb	r2, [r2, #20]
   2e486:	621a      	str	r2, [r3, #32]
}
   2e488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e48a <nrf91_socket_offload_sendto>:
{
   2e48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e48e:	b08e      	sub	sp, #56	; 0x38
   2e490:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2e492:	460e      	mov	r6, r1
   2e494:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2e496:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   2e498:	b974      	cbnz	r4, 2e4b8 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2e49a:	4618      	mov	r0, r3
   2e49c:	9203      	str	r2, [sp, #12]
   2e49e:	f7ff fda7 	bl	2dff0 <z_to_nrf_flags>
   2e4a2:	4603      	mov	r3, r0
   2e4a4:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2e4a8:	4631      	mov	r1, r6
   2e4aa:	4628      	mov	r0, r5
   2e4ac:	9a03      	ldr	r2, [sp, #12]
   2e4ae:	f7f1 fec9 	bl	20244 <nrf_sendto>
}
   2e4b2:	b00e      	add	sp, #56	; 0x38
   2e4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   2e4b8:	8823      	ldrh	r3, [r4, #0]
   2e4ba:	9203      	str	r2, [sp, #12]
   2e4bc:	2b01      	cmp	r3, #1
   2e4be:	d111      	bne.n	2e4e4 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   2e4c0:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e4c2:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2e4c4:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   2e4c8:	2302      	movs	r3, #2
   2e4ca:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e4cc:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2e4ce:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e4d0:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e4d4:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2e4d6:	f7ff fd8b 	bl	2dff0 <z_to_nrf_flags>
   2e4da:	9101      	str	r1, [sp, #4]
   2e4dc:	a905      	add	r1, sp, #20
   2e4de:	4603      	mov	r3, r0
   2e4e0:	9100      	str	r1, [sp, #0]
   2e4e2:	e7e1      	b.n	2e4a8 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   2e4e4:	2b02      	cmp	r3, #2
   2e4e6:	d10d      	bne.n	2e504 <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   2e4e8:	f10d 0814 	add.w	r8, sp, #20
   2e4ec:	4641      	mov	r1, r8
   2e4ee:	4620      	mov	r0, r4
   2e4f0:	f7ff ffb2 	bl	2e458 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2e4f4:	4638      	mov	r0, r7
   2e4f6:	f7ff fd7b 	bl	2dff0 <z_to_nrf_flags>
   2e4fa:	2124      	movs	r1, #36	; 0x24
   2e4fc:	4603      	mov	r3, r0
   2e4fe:	e9cd 8100 	strd	r8, r1, [sp]
   2e502:	e7d1      	b.n	2e4a8 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   2e504:	f7fe fe03 	bl	2d10e <__errno>
   2e508:	2386      	movs	r3, #134	; 0x86
   2e50a:	6003      	str	r3, [r0, #0]
	return retval;
   2e50c:	f04f 30ff 	mov.w	r0, #4294967295
   2e510:	e7cf      	b.n	2e4b2 <nrf91_socket_offload_sendto+0x28>

0002e512 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2e512:	2300      	movs	r3, #0
{
   2e514:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2e516:	e9cd 3300 	strd	r3, r3, [sp]
   2e51a:	f7ff ffb6 	bl	2e48a <nrf91_socket_offload_sendto>
}
   2e51e:	b003      	add	sp, #12
   2e520:	f85d fb04 	ldr.w	pc, [sp], #4

0002e524 <nrf91_socket_offload_connect>:
{
   2e524:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2e526:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   2e528:	8808      	ldrh	r0, [r1, #0]
{
   2e52a:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2e52c:	2801      	cmp	r0, #1
{
   2e52e:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2e530:	d10f      	bne.n	2e552 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   2e532:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e534:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2e536:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2e53a:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e53c:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e53e:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2e542:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e544:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2e546:	4620      	mov	r0, r4
   2e548:	a901      	add	r1, sp, #4
   2e54a:	f7f1 feb3 	bl	202b4 <nrf_connect>
}
   2e54e:	b00a      	add	sp, #40	; 0x28
   2e550:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2e552:	2802      	cmp	r0, #2
   2e554:	d105      	bne.n	2e562 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2e556:	4618      	mov	r0, r3
   2e558:	a901      	add	r1, sp, #4
   2e55a:	f7ff ff7d 	bl	2e458 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2e55e:	2224      	movs	r2, #36	; 0x24
   2e560:	e7f1      	b.n	2e546 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2e562:	4620      	mov	r0, r4
   2e564:	f7f1 fea6 	bl	202b4 <nrf_connect>
		if (retval < 0) {
   2e568:	2800      	cmp	r0, #0
   2e56a:	daf0      	bge.n	2e54e <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   2e56c:	f7fe fdcf 	bl	2d10e <__errno>
   2e570:	2386      	movs	r3, #134	; 0x86
   2e572:	6003      	str	r3, [r0, #0]
   2e574:	f04f 30ff 	mov.w	r0, #4294967295
   2e578:	e7e9      	b.n	2e54e <nrf91_socket_offload_connect+0x2a>

0002e57a <nrf91_socket_offload_setsockopt>:
{
   2e57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e57e:	461e      	mov	r6, r3
	switch (z_in_level) {
   2e580:	f240 2302 	movw	r3, #514	; 0x202
{
   2e584:	b086      	sub	sp, #24
	switch (z_in_level) {
   2e586:	4299      	cmp	r1, r3
{
   2e588:	460c      	mov	r4, r1
   2e58a:	4615      	mov	r5, r2
   2e58c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   2e58e:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   2e592:	d005      	beq.n	2e5a0 <nrf91_socket_offload_setsockopt+0x26>
   2e594:	dc20      	bgt.n	2e5d8 <nrf91_socket_offload_setsockopt+0x5e>
   2e596:	2901      	cmp	r1, #1
   2e598:	d002      	beq.n	2e5a0 <nrf91_socket_offload_setsockopt+0x26>
   2e59a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2e59e:	d126      	bne.n	2e5ee <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2e5a0:	4629      	mov	r1, r5
   2e5a2:	4620      	mov	r0, r4
   2e5a4:	aa03      	add	r2, sp, #12
   2e5a6:	f7e8 fce7 	bl	16f78 <z_to_nrf_optname>
   2e5aa:	2800      	cmp	r0, #0
   2e5ac:	db1f      	blt.n	2e5ee <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2e5ae:	2c01      	cmp	r4, #1
   2e5b0:	d116      	bne.n	2e5e0 <nrf91_socket_offload_setsockopt+0x66>
   2e5b2:	3d14      	subs	r5, #20
   2e5b4:	2d01      	cmp	r5, #1
   2e5b6:	d805      	bhi.n	2e5c4 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   2e5b8:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2e5ba:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2e5bc:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2e5be:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2e5c0:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   2e5c2:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2e5c4:	4633      	mov	r3, r6
   2e5c6:	4621      	mov	r1, r4
   2e5c8:	4640      	mov	r0, r8
   2e5ca:	9a03      	ldr	r2, [sp, #12]
   2e5cc:	9700      	str	r7, [sp, #0]
   2e5ce:	f7f1 febb 	bl	20348 <nrf_setsockopt>
}
   2e5d2:	b006      	add	sp, #24
   2e5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2e5d8:	f240 2303 	movw	r3, #515	; 0x203
   2e5dc:	4299      	cmp	r1, r3
   2e5de:	e7de      	b.n	2e59e <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2e5e0:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   2e5e4:	d1ee      	bne.n	2e5c4 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2e5e6:	2d07      	cmp	r5, #7
   2e5e8:	bf08      	it	eq
   2e5ea:	2701      	moveq	r7, #1
   2e5ec:	e7ea      	b.n	2e5c4 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   2e5ee:	f7fe fd8e 	bl	2d10e <__errno>
   2e5f2:	236d      	movs	r3, #109	; 0x6d
   2e5f4:	6003      	str	r3, [r0, #0]
   2e5f6:	f04f 30ff 	mov.w	r0, #4294967295
   2e5fa:	e7ea      	b.n	2e5d2 <nrf91_socket_offload_setsockopt+0x58>

0002e5fc <nrf91_socket_offload_bind>:
{
   2e5fc:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   2e5fe:	880a      	ldrh	r2, [r1, #0]
{
   2e600:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2e602:	2a01      	cmp	r2, #1
{
   2e604:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   2e606:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   2e60a:	d10f      	bne.n	2e62c <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2e60c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e60e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2e610:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2e614:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e616:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e618:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2e61c:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e61e:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2e620:	4620      	mov	r0, r4
   2e622:	a901      	add	r1, sp, #4
   2e624:	f7f1 fe7e 	bl	20324 <nrf_bind>
}
   2e628:	b00a      	add	sp, #40	; 0x28
   2e62a:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2e62c:	2a02      	cmp	r2, #2
   2e62e:	d105      	bne.n	2e63c <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2e630:	4618      	mov	r0, r3
   2e632:	a901      	add	r1, sp, #4
   2e634:	f7ff ff10 	bl	2e458 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2e638:	2224      	movs	r2, #36	; 0x24
   2e63a:	e7f1      	b.n	2e620 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2e63c:	f7fe fd67 	bl	2d10e <__errno>
   2e640:	2386      	movs	r3, #134	; 0x86
   2e642:	6003      	str	r3, [r0, #0]
   2e644:	f04f 30ff 	mov.w	r0, #4294967295
   2e648:	e7ee      	b.n	2e628 <nrf91_socket_offload_bind+0x2c>

0002e64a <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2e64a:	ea40 0301 	orr.w	r3, r0, r1
   2e64e:	f033 030f 	bics.w	r3, r3, #15
   2e652:	d101      	bne.n	2e658 <dk_set_leds_state+0xe>
   2e654:	f7e8 bfbe 	b.w	175d4 <dk_set_leds_state.part.0>
}
   2e658:	f06f 0015 	mvn.w	r0, #21
   2e65c:	4770      	bx	lr

0002e65e <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   2e65e:	6883      	ldr	r3, [r0, #8]
   2e660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e662:	b103      	cbz	r3, 2e666 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2e664:	4718      	bx	r3
}
   2e666:	4770      	bx	lr

0002e668 <response_handler>:
	write_uart_string(response);
   2e668:	4608      	mov	r0, r1
   2e66a:	f7e9 be7d 	b.w	18368 <write_uart_string>

0002e66e <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   2e66e:	280d      	cmp	r0, #13
   2e670:	d004      	beq.n	2e67c <is_lfcr+0xe>
   2e672:	f1a0 030a 	sub.w	r3, r0, #10
   2e676:	4258      	negs	r0, r3
   2e678:	4158      	adcs	r0, r3
   2e67a:	4770      	bx	lr
		return true;
   2e67c:	2001      	movs	r0, #1
}
   2e67e:	4770      	bx	lr

0002e680 <skip_command_prefix>:
{
   2e680:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2e682:	6801      	ldr	r1, [r0, #0]
{
   2e684:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2e686:	1c8b      	adds	r3, r1, #2
   2e688:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2e68a:	788c      	ldrb	r4, [r1, #2]
   2e68c:	4620      	mov	r0, r4
   2e68e:	f7ff ffee 	bl	2e66e <is_lfcr>
   2e692:	b910      	cbnz	r0, 2e69a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2e694:	b10c      	cbz	r4, 2e69a <skip_command_prefix+0x1a>
	(*cmd)++;
   2e696:	3103      	adds	r1, #3
   2e698:	6011      	str	r1, [r2, #0]
}
   2e69a:	bd10      	pop	{r4, pc}

0002e69c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2e69c:	6813      	ldr	r3, [r2, #0]
   2e69e:	f7ea b9ab 	b.w	189f8 <at_parser_max_params_from_str>

0002e6a2 <at_params_list_init>:
{
   2e6a2:	b538      	push	{r3, r4, r5, lr}
   2e6a4:	460d      	mov	r5, r1
	if (list == NULL) {
   2e6a6:	4604      	mov	r4, r0
   2e6a8:	b140      	cbz	r0, 2e6bc <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2e6aa:	210c      	movs	r1, #12
   2e6ac:	4628      	mov	r0, r5
   2e6ae:	f000 fb47 	bl	2ed40 <k_calloc>
   2e6b2:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2e6b4:	b128      	cbz	r0, 2e6c2 <at_params_list_init+0x20>
	return 0;
   2e6b6:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2e6b8:	6025      	str	r5, [r4, #0]
}
   2e6ba:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2e6bc:	f06f 0015 	mvn.w	r0, #21
   2e6c0:	e7fb      	b.n	2e6ba <at_params_list_init+0x18>
		return -ENOMEM;
   2e6c2:	f06f 000b 	mvn.w	r0, #11
   2e6c6:	e7f8      	b.n	2e6ba <at_params_list_init+0x18>

0002e6c8 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   2e6c8:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2e6ca:	4604      	mov	r4, r0
   2e6cc:	b148      	cbz	r0, 2e6e2 <at_params_list_free+0x1a>
   2e6ce:	6843      	ldr	r3, [r0, #4]
   2e6d0:	b13b      	cbz	r3, 2e6e2 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   2e6d2:	2500      	movs	r5, #0
	at_params_list_clear(list);
   2e6d4:	f7ea fa8c 	bl	18bf0 <at_params_list_clear>
	k_free(list->params);
   2e6d8:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2e6da:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2e6dc:	f000 fb2b 	bl	2ed36 <k_free>
	list->params = NULL;
   2e6e0:	6065      	str	r5, [r4, #4]
}
   2e6e2:	bd38      	pop	{r3, r4, r5, pc}

0002e6e4 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   2e6e4:	b538      	push	{r3, r4, r5, lr}
   2e6e6:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2e6e8:	b910      	cbnz	r0, 2e6f0 <at_params_short_put+0xc>
		return -EINVAL;
   2e6ea:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
}
   2e6ee:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2e6f0:	6843      	ldr	r3, [r0, #4]
   2e6f2:	2b00      	cmp	r3, #0
   2e6f4:	d0f9      	beq.n	2e6ea <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2e6f6:	f7ea fa0f 	bl	18b18 <at_params_get>
	if (param == NULL) {
   2e6fa:	4604      	mov	r4, r0
   2e6fc:	2800      	cmp	r0, #0
   2e6fe:	d0f4      	beq.n	2e6ea <at_params_short_put+0x6>
	at_param_clear(param);
   2e700:	f7ea fa54 	bl	18bac <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2e704:	2301      	movs	r3, #1
	return 0;
   2e706:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2e708:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   2e70a:	60a5      	str	r5, [r4, #8]
	return 0;
   2e70c:	e7ef      	b.n	2e6ee <at_params_short_put+0xa>

0002e70e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2e70e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2e710:	b910      	cbnz	r0, 2e718 <at_params_empty_put+0xa>
		return -EINVAL;
   2e712:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   2e716:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   2e718:	6843      	ldr	r3, [r0, #4]
   2e71a:	2b00      	cmp	r3, #0
   2e71c:	d0f9      	beq.n	2e712 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   2e71e:	f7ea f9fb 	bl	18b18 <at_params_get>
	if (param == NULL) {
   2e722:	4604      	mov	r4, r0
   2e724:	2800      	cmp	r0, #0
   2e726:	d0f4      	beq.n	2e712 <at_params_empty_put+0x4>
	at_param_clear(param);
   2e728:	f7ea fa40 	bl	18bac <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   2e72c:	2305      	movs	r3, #5
	param->value.int_val = 0;
   2e72e:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2e730:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2e732:	60a0      	str	r0, [r4, #8]
	return 0;
   2e734:	e7ef      	b.n	2e716 <at_params_empty_put+0x8>

0002e736 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   2e736:	b538      	push	{r3, r4, r5, lr}
   2e738:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2e73a:	b910      	cbnz	r0, 2e742 <at_params_int_put+0xc>
		return -EINVAL;
   2e73c:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   2e740:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2e742:	6843      	ldr	r3, [r0, #4]
   2e744:	2b00      	cmp	r3, #0
   2e746:	d0f9      	beq.n	2e73c <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2e748:	f7ea f9e6 	bl	18b18 <at_params_get>
	if (param == NULL) {
   2e74c:	4604      	mov	r4, r0
   2e74e:	2800      	cmp	r0, #0
   2e750:	d0f4      	beq.n	2e73c <at_params_int_put+0x6>
	at_param_clear(param);
   2e752:	f7ea fa2b 	bl	18bac <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   2e756:	2302      	movs	r3, #2
	return 0;
   2e758:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   2e75a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   2e75c:	60a5      	str	r5, [r4, #8]
	return 0;
   2e75e:	e7ef      	b.n	2e740 <at_params_int_put+0xa>

0002e760 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e762:	4617      	mov	r7, r2
   2e764:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2e766:	b910      	cbnz	r0, 2e76e <at_params_string_put+0xe>
		return -EINVAL;
   2e768:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   2e76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   2e76e:	6843      	ldr	r3, [r0, #4]
   2e770:	2b00      	cmp	r3, #0
   2e772:	d0f9      	beq.n	2e768 <at_params_string_put+0x8>
   2e774:	2a00      	cmp	r2, #0
   2e776:	d0f7      	beq.n	2e768 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2e778:	f7ea f9ce 	bl	18b18 <at_params_get>
	if (param == NULL) {
   2e77c:	4604      	mov	r4, r0
   2e77e:	2800      	cmp	r0, #0
   2e780:	d0f2      	beq.n	2e768 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   2e782:	1c68      	adds	r0, r5, #1
   2e784:	f7f7 fab8 	bl	25cf8 <k_malloc>
	if (param_value == NULL) {
   2e788:	4606      	mov	r6, r0
   2e78a:	b160      	cbz	r0, 2e7a6 <at_params_string_put+0x46>
   2e78c:	462a      	mov	r2, r5
   2e78e:	4639      	mov	r1, r7
   2e790:	f7de f9dc 	bl	cb4c <memcpy>
	at_param_clear(param);
   2e794:	4620      	mov	r0, r4
   2e796:	f7ea fa09 	bl	18bac <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   2e79a:	2303      	movs	r3, #3
	return 0;
   2e79c:	2000      	movs	r0, #0
	param->size = str_len;
   2e79e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2e7a0:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2e7a2:	60a6      	str	r6, [r4, #8]
	return 0;
   2e7a4:	e7e2      	b.n	2e76c <at_params_string_put+0xc>
		return -ENOMEM;
   2e7a6:	f06f 000b 	mvn.w	r0, #11
   2e7aa:	e7df      	b.n	2e76c <at_params_string_put+0xc>

0002e7ac <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e7ae:	4617      	mov	r7, r2
   2e7b0:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2e7b2:	b910      	cbnz	r0, 2e7ba <at_params_array_put+0xe>
		return -EINVAL;
   2e7b4:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   2e7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   2e7ba:	6843      	ldr	r3, [r0, #4]
   2e7bc:	2b00      	cmp	r3, #0
   2e7be:	d0f9      	beq.n	2e7b4 <at_params_array_put+0x8>
   2e7c0:	2a00      	cmp	r2, #0
   2e7c2:	d0f7      	beq.n	2e7b4 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2e7c4:	f7ea f9a8 	bl	18b18 <at_params_get>
	if (param == NULL) {
   2e7c8:	4604      	mov	r4, r0
   2e7ca:	2800      	cmp	r0, #0
   2e7cc:	d0f2      	beq.n	2e7b4 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   2e7ce:	4628      	mov	r0, r5
   2e7d0:	f7f7 fa92 	bl	25cf8 <k_malloc>
	if (param_value == NULL) {
   2e7d4:	4606      	mov	r6, r0
   2e7d6:	b160      	cbz	r0, 2e7f2 <at_params_array_put+0x46>
   2e7d8:	462a      	mov	r2, r5
   2e7da:	4639      	mov	r1, r7
   2e7dc:	f7de f9b6 	bl	cb4c <memcpy>
	at_param_clear(param);
   2e7e0:	4620      	mov	r0, r4
   2e7e2:	f7ea f9e3 	bl	18bac <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   2e7e6:	2304      	movs	r3, #4
	return 0;
   2e7e8:	2000      	movs	r0, #0
	param->size = array_len;
   2e7ea:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2e7ec:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2e7ee:	60a6      	str	r6, [r4, #8]
	return 0;
   2e7f0:	e7e2      	b.n	2e7b8 <at_params_array_put+0xc>
		return -ENOMEM;
   2e7f2:	f06f 000b 	mvn.w	r0, #11
   2e7f6:	e7df      	b.n	2e7b8 <at_params_array_put+0xc>

0002e7f8 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2e7f8:	b510      	push	{r4, lr}
   2e7fa:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2e7fc:	b910      	cbnz	r0, 2e804 <at_params_short_get+0xc>
		return -EINVAL;
   2e7fe:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   2e802:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2e804:	6843      	ldr	r3, [r0, #4]
   2e806:	2b00      	cmp	r3, #0
   2e808:	d0f9      	beq.n	2e7fe <at_params_short_get+0x6>
   2e80a:	2a00      	cmp	r2, #0
   2e80c:	d0f7      	beq.n	2e7fe <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2e80e:	f7ea f983 	bl	18b18 <at_params_get>
	if (param == NULL) {
   2e812:	2800      	cmp	r0, #0
   2e814:	d0f3      	beq.n	2e7fe <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   2e816:	7803      	ldrb	r3, [r0, #0]
   2e818:	2b01      	cmp	r3, #1
   2e81a:	d1f0      	bne.n	2e7fe <at_params_short_get+0x6>
	*value = (uint16_t)param->value.int_val;
   2e81c:	6883      	ldr	r3, [r0, #8]
	return 0;
   2e81e:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   2e820:	8023      	strh	r3, [r4, #0]
	return 0;
   2e822:	e7ee      	b.n	2e802 <at_params_short_get+0xa>

0002e824 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   2e824:	b510      	push	{r4, lr}
   2e826:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2e828:	b910      	cbnz	r0, 2e830 <at_params_int_get+0xc>
		return -EINVAL;
   2e82a:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   2e82e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2e830:	6843      	ldr	r3, [r0, #4]
   2e832:	2b00      	cmp	r3, #0
   2e834:	d0f9      	beq.n	2e82a <at_params_int_get+0x6>
   2e836:	2a00      	cmp	r2, #0
   2e838:	d0f7      	beq.n	2e82a <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2e83a:	f7ea f96d 	bl	18b18 <at_params_get>
	if (param == NULL) {
   2e83e:	2800      	cmp	r0, #0
   2e840:	d0f3      	beq.n	2e82a <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   2e842:	7803      	ldrb	r3, [r0, #0]
   2e844:	3b01      	subs	r3, #1
   2e846:	2b01      	cmp	r3, #1
   2e848:	d8ef      	bhi.n	2e82a <at_params_int_get+0x6>
	*value = param->value.int_val;
   2e84a:	6883      	ldr	r3, [r0, #8]
	return 0;
   2e84c:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2e84e:	6023      	str	r3, [r4, #0]
	return 0;
   2e850:	e7ed      	b.n	2e82e <at_params_int_get+0xa>

0002e852 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2e852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e854:	4617      	mov	r7, r2
   2e856:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   2e858:	b910      	cbnz	r0, 2e860 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   2e85a:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   2e85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   2e860:	6843      	ldr	r3, [r0, #4]
   2e862:	2b00      	cmp	r3, #0
   2e864:	d0f9      	beq.n	2e85a <at_params_string_get+0x8>
   2e866:	2a00      	cmp	r2, #0
   2e868:	d0f7      	beq.n	2e85a <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   2e86a:	2c00      	cmp	r4, #0
   2e86c:	d0f5      	beq.n	2e85a <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   2e86e:	f7ea f953 	bl	18b18 <at_params_get>
	if (param == NULL) {
   2e872:	4606      	mov	r6, r0
   2e874:	2800      	cmp	r0, #0
   2e876:	d0f0      	beq.n	2e85a <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   2e878:	7803      	ldrb	r3, [r0, #0]
   2e87a:	2b03      	cmp	r3, #3
   2e87c:	d1ed      	bne.n	2e85a <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   2e87e:	f7ea f96d 	bl	18b5c <at_param_size>
	if (*len < param_len) {
   2e882:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2e884:	4605      	mov	r5, r0
	if (*len < param_len) {
   2e886:	4283      	cmp	r3, r0
   2e888:	d307      	bcc.n	2e89a <at_params_string_get+0x48>
   2e88a:	4602      	mov	r2, r0
   2e88c:	68b1      	ldr	r1, [r6, #8]
   2e88e:	4638      	mov	r0, r7
   2e890:	f7de f95c 	bl	cb4c <memcpy>
	return 0;
   2e894:	2000      	movs	r0, #0
	*len = param_len;
   2e896:	6025      	str	r5, [r4, #0]
	return 0;
   2e898:	e7e1      	b.n	2e85e <at_params_string_get+0xc>
		return -ENOMEM;
   2e89a:	f06f 000b 	mvn.w	r0, #11
   2e89e:	e7de      	b.n	2e85e <at_params_string_get+0xc>

0002e8a0 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   2e8a0:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2e8a2:	4605      	mov	r5, r0
   2e8a4:	b180      	cbz	r0, 2e8c8 <at_params_valid_count_get+0x28>
   2e8a6:	6843      	ldr	r3, [r0, #4]
   2e8a8:	b173      	cbz	r3, 2e8c8 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   2e8aa:	2100      	movs	r1, #0
   2e8ac:	f7ea f934 	bl	18b18 <at_params_get>
	size_t valid_i = 0;
   2e8b0:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   2e8b2:	b108      	cbz	r0, 2e8b8 <at_params_valid_count_get+0x18>
   2e8b4:	7803      	ldrb	r3, [r0, #0]
   2e8b6:	b90b      	cbnz	r3, 2e8bc <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2e8b8:	4620      	mov	r0, r4
   2e8ba:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   2e8bc:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   2e8be:	4621      	mov	r1, r4
   2e8c0:	4628      	mov	r0, r5
   2e8c2:	f7ea f929 	bl	18b18 <at_params_get>
   2e8c6:	e7f4      	b.n	2e8b2 <at_params_valid_count_get+0x12>
		return -EINVAL;
   2e8c8:	f06f 0415 	mvn.w	r4, #21
   2e8cc:	e7f4      	b.n	2e8b8 <at_params_valid_count_get+0x18>

0002e8ce <response_is_valid>:
{
   2e8ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e8d0:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   2e8d2:	4610      	mov	r0, r2
{
   2e8d4:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   2e8d6:	9201      	str	r2, [sp, #4]
   2e8d8:	f7f8 f9be 	bl	26c58 <strlen>
   2e8dc:	42a0      	cmp	r0, r4
   2e8de:	d809      	bhi.n	2e8f4 <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   2e8e0:	4622      	mov	r2, r4
   2e8e2:	4628      	mov	r0, r5
   2e8e4:	9901      	ldr	r1, [sp, #4]
   2e8e6:	f7f7 fd79 	bl	263dc <memcmp>
	if ((response_len < strlen(check)) ||
   2e8ea:	fab0 f080 	clz	r0, r0
   2e8ee:	0940      	lsrs	r0, r0, #5
}
   2e8f0:	b003      	add	sp, #12
   2e8f2:	bd30      	pop	{r4, r5, pc}
		return false;
   2e8f4:	2000      	movs	r0, #0
   2e8f6:	e7fb      	b.n	2e8f0 <response_is_valid+0x22>

0002e8f8 <lte_lc_connect>:
	return w_lte_lc_connect(true);
   2e8f8:	2001      	movs	r0, #1
   2e8fa:	f7ea bab7 	b.w	18e6c <w_lte_lc_connect>

0002e8fe <lte_lc_init_and_connect>:
{
   2e8fe:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   2e900:	f7ea fbee 	bl	190e0 <w_lte_lc_init>
	if (ret) {
   2e904:	b920      	cbnz	r0, 2e910 <lte_lc_init_and_connect+0x12>
}
   2e906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   2e90a:	2001      	movs	r0, #1
   2e90c:	f7ea baae 	b.w	18e6c <w_lte_lc_connect>
}
   2e910:	bd08      	pop	{r3, pc}

0002e912 <date_time_handler>:
}
   2e912:	4770      	bx	lr

0002e914 <k_uptime_get>:
{
   2e914:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2e916:	f000 f943 	bl	2eba0 <z_impl_k_uptime_ticks>
   2e91a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2e91e:	fba0 2304 	umull	r2, r3, r0, r4
   2e922:	fb04 3301 	mla	r3, r4, r1, r3
   2e926:	0bd0      	lsrs	r0, r2, #15
}
   2e928:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2e92c:	0bd9      	lsrs	r1, r3, #15
   2e92e:	bd10      	pop	{r4, pc}

0002e930 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2e930:	4700      	bx	r0

0002e932 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2e932:	f000 b8c6 	b.w	2eac2 <z_impl_k_busy_wait>

0002e936 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2e936:	f7fe bb82 	b.w	2d03e <z_clock_idle_exit>

0002e93a <k_heap_init>:
{
   2e93a:	b410      	push	{r4}
   2e93c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2e940:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2e944:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2e948:	f7e4 b95e 	b.w	12c08 <sys_heap_init>

0002e94c <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   2e94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e94e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   2e952:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   2e954:	6800      	ldr	r0, [r0, #0]
{
   2e956:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   2e958:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   2e95a:	4632      	mov	r2, r6
   2e95c:	463b      	mov	r3, r7
   2e95e:	4621      	mov	r1, r4
   2e960:	f7f3 fffe 	bl	22960 <k_heap_alloc>
   2e964:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   2e966:	b144      	cbz	r4, 2e97a <k_mem_pool_alloc+0x2e>
   2e968:	b938      	cbnz	r0, 2e97a <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   2e96a:	ea56 0307 	orrs.w	r3, r6, r7
   2e96e:	bf0c      	ite	eq
   2e970:	f06f 000b 	mvneq.w	r0, #11
   2e974:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   2e978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2e97a:	2000      	movs	r0, #0
   2e97c:	e7fc      	b.n	2e978 <k_mem_pool_alloc+0x2c>

0002e97e <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2e97e:	e9d0 1000 	ldrd	r1, r0, [r0]
   2e982:	f7f4 b89b 	b.w	22abc <k_heap_free>

0002e986 <k_mem_slab_init>:
{
   2e986:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2e988:	2400      	movs	r4, #0
   2e98a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e98c:	ea41 0402 	orr.w	r4, r1, r2
   2e990:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2e994:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2e998:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e99a:	d10c      	bne.n	2e9b6 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2e99c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e99e:	42a3      	cmp	r3, r4
   2e9a0:	d103      	bne.n	2e9aa <k_mem_slab_init+0x24>
   2e9a2:	e9c0 0000 	strd	r0, r0, [r0]
}
   2e9a6:	2000      	movs	r0, #0
}
   2e9a8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2e9aa:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e9ac:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   2e9ae:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   2e9b0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2e9b2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2e9b4:	e7f3      	b.n	2e99e <k_mem_slab_init+0x18>
		return -EINVAL;
   2e9b6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2e9ba:	e7f5      	b.n	2e9a8 <k_mem_slab_init+0x22>

0002e9bc <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   2e9bc:	2300      	movs	r3, #0
   2e9be:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   2e9c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2e9c6:	4618      	mov	r0, r3
   2e9c8:	4770      	bx	lr

0002e9ca <z_queue_node_peek>:
{
   2e9ca:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2e9cc:	4604      	mov	r4, r0
   2e9ce:	b130      	cbz	r0, 2e9de <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e9d0:	6802      	ldr	r2, [r0, #0]
   2e9d2:	0793      	lsls	r3, r2, #30
   2e9d4:	d003      	beq.n	2e9de <z_queue_node_peek+0x14>
		ret = anode->data;
   2e9d6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2e9d8:	b109      	cbz	r1, 2e9de <z_queue_node_peek+0x14>
			k_free(anode);
   2e9da:	f000 f9ac 	bl	2ed36 <k_free>
}
   2e9de:	4620      	mov	r0, r4
   2e9e0:	bd10      	pop	{r4, pc}

0002e9e2 <z_impl_k_queue_init>:
	list->head = NULL;
   2e9e2:	2300      	movs	r3, #0
	list->tail = NULL;
   2e9e4:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2e9e8:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2e9ea:	f100 030c 	add.w	r3, r0, #12
   2e9ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2e9f2:	f100 0314 	add.w	r3, r0, #20
   2e9f6:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2e9fa:	4770      	bx	lr

0002e9fc <k_queue_append>:
{
   2e9fc:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2e9fe:	2300      	movs	r3, #0
   2ea00:	6841      	ldr	r1, [r0, #4]
   2ea02:	f7f4 bccb 	b.w	2339c <queue_insert>

0002ea06 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2ea06:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2ea0a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2ea0e:	4298      	cmp	r0, r3
   2ea10:	bfac      	ite	ge
   2ea12:	2000      	movge	r0, #0
   2ea14:	2001      	movlt	r0, #1
   2ea16:	4770      	bx	lr

0002ea18 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ea18:	4603      	mov	r3, r0
   2ea1a:	b920      	cbnz	r0, 2ea26 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2ea1c:	f3ef 8205 	mrs	r2, IPSR
   2ea20:	b90a      	cbnz	r2, 2ea26 <z_reschedule_irqlock+0xe>
   2ea22:	f7e5 bd95 	b.w	14550 <arch_swap>
   2ea26:	f383 8811 	msr	BASEPRI, r3
   2ea2a:	f3bf 8f6f 	isb	sy
}
   2ea2e:	4770      	bx	lr

0002ea30 <z_reschedule_unlocked>:
	__asm__ volatile(
   2ea30:	f04f 0320 	mov.w	r3, #32
   2ea34:	f3ef 8011 	mrs	r0, BASEPRI
   2ea38:	f383 8811 	msr	BASEPRI, r3
   2ea3c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ea40:	f7ff bfea 	b.w	2ea18 <z_reschedule_irqlock>

0002ea44 <unpend_thread_no_timeout>:
{
   2ea44:	b510      	push	{r4, lr}
   2ea46:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2ea48:	3008      	adds	r0, #8
   2ea4a:	f7f4 fda9 	bl	235a0 <pended_on.isra.0>
   2ea4e:	4621      	mov	r1, r4
   2ea50:	f7f4 ff82 	bl	23958 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ea54:	7b63      	ldrb	r3, [r4, #13]
   2ea56:	f023 0302 	bic.w	r3, r3, #2
   2ea5a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2ea5c:	2300      	movs	r3, #0
   2ea5e:	60a3      	str	r3, [r4, #8]
}
   2ea60:	bd10      	pop	{r4, pc}

0002ea62 <z_priq_dumb_best>:
	return list->head == list;
   2ea62:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ea64:	4298      	cmp	r0, r3
   2ea66:	d004      	beq.n	2ea72 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2ea68:	2b00      	cmp	r3, #0
   2ea6a:	bf38      	it	cc
   2ea6c:	2300      	movcc	r3, #0
   2ea6e:	4618      	mov	r0, r3
   2ea70:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2ea72:	2000      	movs	r0, #0
}
   2ea74:	4770      	bx	lr

0002ea76 <z_unpend_all>:
{
   2ea76:	b538      	push	{r3, r4, r5, lr}
   2ea78:	4605      	mov	r5, r0
	int need_sched = 0;
   2ea7a:	2000      	movs	r0, #0
	return list->head == list;
   2ea7c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ea7e:	42a5      	cmp	r5, r4
   2ea80:	d000      	beq.n	2ea84 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ea82:	b904      	cbnz	r4, 2ea86 <z_unpend_all+0x10>
}
   2ea84:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2ea86:	4620      	mov	r0, r4
   2ea88:	f7f4 ff94 	bl	239b4 <z_unpend_thread>
		z_ready_thread(thread);
   2ea8c:	4620      	mov	r0, r4
   2ea8e:	f7f5 f8cb 	bl	23c28 <z_ready_thread>
		need_sched = 1;
   2ea92:	2001      	movs	r0, #1
   2ea94:	e7f2      	b.n	2ea7c <z_unpend_all+0x6>

0002ea96 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2ea96:	b15a      	cbz	r2, 2eab0 <z_impl_k_sem_init+0x1a>
   2ea98:	428a      	cmp	r2, r1
   2ea9a:	d309      	bcc.n	2eab0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2ea9c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2eaa0:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2eaa4:	e9c0 0000 	strd	r0, r0, [r0]
   2eaa8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2eaac:	2000      	movs	r0, #0
   2eaae:	4770      	bx	lr
		return -EINVAL;
   2eab0:	f06f 0015 	mvn.w	r0, #21
}
   2eab4:	4770      	bx	lr

0002eab6 <k_is_in_isr>:
   2eab6:	f3ef 8005 	mrs	r0, IPSR
}
   2eaba:	3800      	subs	r0, #0
   2eabc:	bf18      	it	ne
   2eabe:	2001      	movne	r0, #1
   2eac0:	4770      	bx	lr

0002eac2 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2eac2:	f7e4 b951 	b.w	12d68 <arch_busy_wait>

0002eac6 <z_impl_k_thread_name_set>:
}
   2eac6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2eaca:	4770      	bx	lr

0002eacc <k_thread_name_get>:
}
   2eacc:	2000      	movs	r0, #0
   2eace:	4770      	bx	lr

0002ead0 <k_work_submit_to_queue>:
{
   2ead0:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ead2:	f101 0308 	add.w	r3, r1, #8
   2ead6:	e8d3 2fef 	ldaex	r2, [r3]
   2eada:	f042 0c01 	orr.w	ip, r2, #1
   2eade:	e8c3 cfee 	stlex	lr, ip, [r3]
   2eae2:	f1be 0f00 	cmp.w	lr, #0
   2eae6:	d1f6      	bne.n	2ead6 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2eae8:	07d3      	lsls	r3, r2, #31
   2eaea:	d403      	bmi.n	2eaf4 <k_work_submit_to_queue+0x24>
}
   2eaec:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2eaf0:	f7ff bf84 	b.w	2e9fc <k_queue_append>
}
   2eaf4:	f85d fb04 	ldr.w	pc, [sp], #4

0002eaf8 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2eaf8:	f1a0 0110 	sub.w	r1, r0, #16
   2eafc:	6980      	ldr	r0, [r0, #24]
   2eafe:	f7ff bfe7 	b.w	2ead0 <k_work_submit_to_queue>

0002eb02 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   2eb02:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2eb04:	b570      	push	{r4, r5, r6, lr}
   2eb06:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   2eb08:	b913      	cbnz	r3, 2eb10 <work_cancel+0xe>
		return -EALREADY;
   2eb0a:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2eb0e:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2eb10:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2eb14:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   2eb18:	07db      	lsls	r3, r3, #31
   2eb1a:	d52f      	bpl.n	2eb7c <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2eb1c:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2eb1e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2eb20:	6813      	ldr	r3, [r2, #0]
   2eb22:	b913      	cbnz	r3, 2eb2a <work_cancel+0x28>
			return -EINVAL;
   2eb24:	f06f 0015 	mvn.w	r0, #21
   2eb28:	e7f1      	b.n	2eb0e <work_cancel+0xc>
   2eb2a:	429c      	cmp	r4, r3
   2eb2c:	d121      	bne.n	2eb72 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   2eb2e:	6823      	ldr	r3, [r4, #0]
   2eb30:	6856      	ldr	r6, [r2, #4]
   2eb32:	f023 0003 	bic.w	r0, r3, #3
   2eb36:	b991      	cbnz	r1, 2eb5e <work_cancel+0x5c>
   2eb38:	42b4      	cmp	r4, r6
	list->head = node;
   2eb3a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2eb3c:	d100      	bne.n	2eb40 <work_cancel+0x3e>
	list->tail = node;
   2eb3e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eb40:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2eb42:	f003 0303 	and.w	r3, r3, #3
   2eb46:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2eb48:	2000      	movs	r0, #0
   2eb4a:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2eb4c:	e8d5 3fef 	ldaex	r3, [r5]
   2eb50:	f023 0301 	bic.w	r3, r3, #1
   2eb54:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2eb58:	2a00      	cmp	r2, #0
   2eb5a:	d0d8      	beq.n	2eb0e <work_cancel+0xc>
   2eb5c:	e7f6      	b.n	2eb4c <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eb5e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2eb60:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2eb62:	f003 0303 	and.w	r3, r3, #3
   2eb66:	ea43 0300 	orr.w	r3, r3, r0
   2eb6a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2eb6c:	bf08      	it	eq
   2eb6e:	6051      	streq	r1, [r2, #4]
}
   2eb70:	e7e6      	b.n	2eb40 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2eb72:	6818      	ldr	r0, [r3, #0]
   2eb74:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2eb76:	f020 0303 	bic.w	r3, r0, #3
   2eb7a:	e7d2      	b.n	2eb22 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   2eb7c:	3010      	adds	r0, #16
   2eb7e:	f7f6 fad9 	bl	25134 <z_abort_timeout>
		if (err) {
   2eb82:	2800      	cmp	r0, #0
   2eb84:	d0e0      	beq.n	2eb48 <work_cancel+0x46>
   2eb86:	e7c0      	b.n	2eb0a <work_cancel+0x8>

0002eb88 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2eb88:	2300      	movs	r3, #0
   2eb8a:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   2eb8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2eb92:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   2eb94:	6283      	str	r3, [r0, #40]	; 0x28
}
   2eb96:	4770      	bx	lr

0002eb98 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2eb98:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2eb9a:	f7f6 fc7b 	bl	25494 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2eb9e:	bd08      	pop	{r3, pc}

0002eba0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2eba0:	f7f6 bc78 	b.w	25494 <z_tick_get>

0002eba4 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2eba4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2eba6:	1c4b      	adds	r3, r1, #1
   2eba8:	bf08      	it	eq
   2ebaa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2ebae:	4604      	mov	r4, r0
   2ebb0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ebb2:	d013      	beq.n	2ebdc <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ebb4:	ea54 0105 	orrs.w	r1, r4, r5
   2ebb8:	d103      	bne.n	2ebc2 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   2ebba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2ebbe:	f7f6 bc69 	b.w	25494 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2ebc2:	f06f 0101 	mvn.w	r1, #1
   2ebc6:	1a0a      	subs	r2, r1, r0
   2ebc8:	f04f 31ff 	mov.w	r1, #4294967295
   2ebcc:	eb61 0305 	sbc.w	r3, r1, r5
   2ebd0:	2a00      	cmp	r2, #0
   2ebd2:	f173 0100 	sbcs.w	r1, r3, #0
   2ebd6:	db02      	blt.n	2ebde <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2ebd8:	4610      	mov	r0, r2
   2ebda:	4619      	mov	r1, r3
}
   2ebdc:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2ebde:	f7f6 fc59 	bl	25494 <z_tick_get>
   2ebe2:	2c01      	cmp	r4, #1
   2ebe4:	f175 0300 	sbcs.w	r3, r5, #0
   2ebe8:	bfbc      	itt	lt
   2ebea:	2401      	movlt	r4, #1
   2ebec:	2500      	movlt	r5, #0
   2ebee:	1820      	adds	r0, r4, r0
   2ebf0:	eb45 0101 	adc.w	r1, r5, r1
   2ebf4:	e7f2      	b.n	2ebdc <z_timeout_end_calc+0x38>

0002ebf6 <k_timer_init>:
	timer->status = 0U;
   2ebf6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2ebf8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2ebfc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2ec00:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2ec04:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2ec08:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2ec0a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2ec0c:	4770      	bx	lr

0002ec0e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2ec0e:	b510      	push	{r4, lr}
   2ec10:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2ec12:	f7f6 fa8f 	bl	25134 <z_abort_timeout>

	if (inactive) {
   2ec16:	b9d8      	cbnz	r0, 2ec50 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2ec18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ec1a:	b10b      	cbz	r3, 2ec20 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2ec1c:	4620      	mov	r0, r4
   2ec1e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2ec20:	f104 0018 	add.w	r0, r4, #24
   2ec24:	2100      	movs	r1, #0
   2ec26:	f7f4 fd49 	bl	236bc <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2ec2a:	4604      	mov	r4, r0
   2ec2c:	b180      	cbz	r0, 2ec50 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2ec2e:	f7f4 fd8f 	bl	23750 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2ec32:	4620      	mov	r0, r4
   2ec34:	f7f4 fff8 	bl	23c28 <z_ready_thread>
   2ec38:	f04f 0320 	mov.w	r3, #32
   2ec3c:	f3ef 8011 	mrs	r0, BASEPRI
   2ec40:	f383 8811 	msr	BASEPRI, r3
   2ec44:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2ec48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ec4c:	f7ff bee4 	b.w	2ea18 <z_reschedule_irqlock>
   2ec50:	bd10      	pop	{r4, pc}

0002ec52 <signal_poll_event>:
{
   2ec52:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2ec54:	6884      	ldr	r4, [r0, #8]
{
   2ec56:	4605      	mov	r5, r0
   2ec58:	460e      	mov	r6, r1
	if (poller) {
   2ec5a:	b19c      	cbz	r4, 2ec84 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2ec5c:	68a3      	ldr	r3, [r4, #8]
   2ec5e:	b95b      	cbnz	r3, 2ec78 <signal_poll_event+0x26>
	int retcode = 0;
   2ec60:	4618      	mov	r0, r3
		poller->is_polling = false;
   2ec62:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2ec64:	2300      	movs	r3, #0
   2ec66:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2ec68:	68eb      	ldr	r3, [r5, #12]
   2ec6a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2ec6e:	430e      	orrs	r6, r1
   2ec70:	f366 3310 	bfi	r3, r6, #12, #5
   2ec74:	60eb      	str	r3, [r5, #12]
	return retcode;
   2ec76:	e004      	b.n	2ec82 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2ec78:	4798      	blx	r3
		poller->is_polling = false;
   2ec7a:	2300      	movs	r3, #0
		if (retcode < 0) {
   2ec7c:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2ec7e:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2ec80:	daf0      	bge.n	2ec64 <signal_poll_event+0x12>
}
   2ec82:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2ec84:	4620      	mov	r0, r4
   2ec86:	e7ed      	b.n	2ec64 <signal_poll_event+0x12>

0002ec88 <add_event>:
{
   2ec88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ec8a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ec8c:	e9d0 2300 	ldrd	r2, r3, [r0]
   2ec90:	4290      	cmp	r0, r2
   2ec92:	4604      	mov	r4, r0
   2ec94:	460d      	mov	r5, r1
   2ec96:	d106      	bne.n	2eca6 <add_event+0x1e>
	node->prev = list->tail;
   2ec98:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2ec9a:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   2ec9c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2ec9e:	6863      	ldr	r3, [r4, #4]
   2eca0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2eca2:	6065      	str	r5, [r4, #4]
}
   2eca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2eca6:	2b00      	cmp	r3, #0
   2eca8:	d0f6      	beq.n	2ec98 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2ecaa:	689b      	ldr	r3, [r3, #8]
   2ecac:	6879      	ldr	r1, [r7, #4]
   2ecae:	6858      	ldr	r0, [r3, #4]
   2ecb0:	f7ff fea9 	bl	2ea06 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2ecb4:	2800      	cmp	r0, #0
   2ecb6:	d1ef      	bne.n	2ec98 <add_event+0x10>
	return list->head == list;
   2ecb8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ecba:	42b4      	cmp	r4, r6
   2ecbc:	d0ec      	beq.n	2ec98 <add_event+0x10>
   2ecbe:	2e00      	cmp	r6, #0
   2ecc0:	bf38      	it	cc
   2ecc2:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ecc4:	2e00      	cmp	r6, #0
   2ecc6:	d0e7      	beq.n	2ec98 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2ecc8:	68b3      	ldr	r3, [r6, #8]
   2ecca:	6878      	ldr	r0, [r7, #4]
   2eccc:	6859      	ldr	r1, [r3, #4]
   2ecce:	f7ff fe9a 	bl	2ea06 <z_is_t1_higher_prio_than_t2>
   2ecd2:	b128      	cbz	r0, 2ece0 <add_event+0x58>
	node->prev = successor->prev;
   2ecd4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2ecd6:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2ecda:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2ecdc:	6075      	str	r5, [r6, #4]
			return;
   2ecde:	e7e1      	b.n	2eca4 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2ece0:	6863      	ldr	r3, [r4, #4]
   2ece2:	42b3      	cmp	r3, r6
   2ece4:	d0d8      	beq.n	2ec98 <add_event+0x10>
   2ece6:	6836      	ldr	r6, [r6, #0]
   2ece8:	e7ec      	b.n	2ecc4 <add_event+0x3c>

0002ecea <z_handle_obj_poll_events>:
{
   2ecea:	4603      	mov	r3, r0
	return list->head == list;
   2ecec:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2ecee:	4283      	cmp	r3, r0
   2ecf0:	d008      	beq.n	2ed04 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2ecf2:	e9d0 3200 	ldrd	r3, r2, [r0]
   2ecf6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2ecf8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ecfa:	2300      	movs	r3, #0
	node->prev = NULL;
   2ecfc:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2ed00:	f7ff bfa7 	b.w	2ec52 <signal_poll_event>
}
   2ed04:	4770      	bx	lr

0002ed06 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2ed06:	2208      	movs	r2, #8
{
   2ed08:	b530      	push	{r4, r5, lr}
   2ed0a:	188a      	adds	r2, r1, r2
   2ed0c:	b085      	sub	sp, #20
   2ed0e:	d207      	bcs.n	2ed20 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2ed10:	2400      	movs	r4, #0
   2ed12:	2500      	movs	r5, #0
   2ed14:	a902      	add	r1, sp, #8
   2ed16:	e9cd 4500 	strd	r4, r5, [sp]
   2ed1a:	f7ff fe17 	bl	2e94c <k_mem_pool_alloc>
   2ed1e:	b110      	cbz	r0, 2ed26 <k_mem_pool_malloc+0x20>
		return NULL;
   2ed20:	2000      	movs	r0, #0
}
   2ed22:	b005      	add	sp, #20
   2ed24:	bd30      	pop	{r4, r5, pc}
   2ed26:	9a02      	ldr	r2, [sp, #8]
   2ed28:	ab02      	add	r3, sp, #8
   2ed2a:	cb03      	ldmia	r3!, {r0, r1}
   2ed2c:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2ed2e:	9802      	ldr	r0, [sp, #8]
   2ed30:	6051      	str	r1, [r2, #4]
   2ed32:	3008      	adds	r0, #8
   2ed34:	e7f5      	b.n	2ed22 <k_mem_pool_malloc+0x1c>

0002ed36 <k_free>:
	if (ptr != NULL) {
   2ed36:	b110      	cbz	r0, 2ed3e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2ed38:	3808      	subs	r0, #8
   2ed3a:	f7ff be20 	b.w	2e97e <k_mem_pool_free_id>
}
   2ed3e:	4770      	bx	lr

0002ed40 <k_calloc>:
{
   2ed40:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2ed42:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2ed46:	b118      	cbz	r0, 2ed50 <k_calloc+0x10>
   2ed48:	fbb2 f0f0 	udiv	r0, r2, r0
   2ed4c:	4281      	cmp	r1, r0
   2ed4e:	d10c      	bne.n	2ed6a <k_calloc+0x2a>
	ret = k_malloc(bounds);
   2ed50:	4610      	mov	r0, r2
   2ed52:	9201      	str	r2, [sp, #4]
   2ed54:	f7f6 ffd0 	bl	25cf8 <k_malloc>
	if (ret != NULL) {
   2ed58:	4604      	mov	r4, r0
   2ed5a:	b118      	cbz	r0, 2ed64 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2ed5c:	2100      	movs	r1, #0
   2ed5e:	9a01      	ldr	r2, [sp, #4]
   2ed60:	f7f7 fb6a 	bl	26438 <memset>
}
   2ed64:	4620      	mov	r0, r4
   2ed66:	b002      	add	sp, #8
   2ed68:	bd10      	pop	{r4, pc}
		return NULL;
   2ed6a:	2400      	movs	r4, #0
   2ed6c:	e7fa      	b.n	2ed64 <k_calloc+0x24>

0002ed6e <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2ed6e:	4770      	bx	lr
