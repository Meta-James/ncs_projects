
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	20023d78 	.word	0x20023d78
   10004:	0001703d 	.word	0x0001703d
   10008:	00030459 	.word	0x00030459
   1000c:	0001706d 	.word	0x0001706d
   10010:	0001706d 	.word	0x0001706d
   10014:	0001706d 	.word	0x0001706d
   10018:	0001706d 	.word	0x0001706d
   1001c:	0001706d 	.word	0x0001706d
	...
   1002c:	00016f99 	.word	0x00016f99
   10030:	0001706d 	.word	0x0001706d
   10034:	00000000 	.word	0x00000000
   10038:	00016f41 	.word	0x00016f41
   1003c:	000164f5 	.word	0x000164f5

00010040 <_irq_vector_table>:
   10040:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10050:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10060:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10070:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10080:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10090:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   100a0:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   100b0:	0001f6b1 00033313 00016ffd 00016ffd     .....3...o...o..
   100c0:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   100d0:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   100e0:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   100f0:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10100:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10110:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10120:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10130:	00016ffd 00016ffd 00016ffd 00016ffd     .o...o...o...o..
   10140:	00016ffd                                .o..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	0002fd30 00000001 00010000 00010000     0...............
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00010240 <__aeabi_drsub>:
   10240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10244:	e002      	b.n	1024c <__adddf3>
   10246:	bf00      	nop

00010248 <__aeabi_dsub>:
   10248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001024c <__adddf3>:
   1024c:	b530      	push	{r4, r5, lr}
   1024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10252:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10256:	ea94 0f05 	teq	r4, r5
   1025a:	bf08      	it	eq
   1025c:	ea90 0f02 	teqeq	r0, r2
   10260:	bf1f      	itttt	ne
   10262:	ea54 0c00 	orrsne.w	ip, r4, r0
   10266:	ea55 0c02 	orrsne.w	ip, r5, r2
   1026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10272:	f000 80e2 	beq.w	1043a <__adddf3+0x1ee>
   10276:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1027e:	bfb8      	it	lt
   10280:	426d      	neglt	r5, r5
   10282:	dd0c      	ble.n	1029e <__adddf3+0x52>
   10284:	442c      	add	r4, r5
   10286:	ea80 0202 	eor.w	r2, r0, r2
   1028a:	ea81 0303 	eor.w	r3, r1, r3
   1028e:	ea82 0000 	eor.w	r0, r2, r0
   10292:	ea83 0101 	eor.w	r1, r3, r1
   10296:	ea80 0202 	eor.w	r2, r0, r2
   1029a:	ea81 0303 	eor.w	r3, r1, r3
   1029e:	2d36      	cmp	r5, #54	; 0x36
   102a0:	bf88      	it	hi
   102a2:	bd30      	pophi	{r4, r5, pc}
   102a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   102a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   102ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   102b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   102b4:	d002      	beq.n	102bc <__adddf3+0x70>
   102b6:	4240      	negs	r0, r0
   102b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   102bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   102c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   102c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   102c8:	d002      	beq.n	102d0 <__adddf3+0x84>
   102ca:	4252      	negs	r2, r2
   102cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102d0:	ea94 0f05 	teq	r4, r5
   102d4:	f000 80a7 	beq.w	10426 <__adddf3+0x1da>
   102d8:	f1a4 0401 	sub.w	r4, r4, #1
   102dc:	f1d5 0e20 	rsbs	lr, r5, #32
   102e0:	db0d      	blt.n	102fe <__adddf3+0xb2>
   102e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   102e6:	fa22 f205 	lsr.w	r2, r2, r5
   102ea:	1880      	adds	r0, r0, r2
   102ec:	f141 0100 	adc.w	r1, r1, #0
   102f0:	fa03 f20e 	lsl.w	r2, r3, lr
   102f4:	1880      	adds	r0, r0, r2
   102f6:	fa43 f305 	asr.w	r3, r3, r5
   102fa:	4159      	adcs	r1, r3
   102fc:	e00e      	b.n	1031c <__adddf3+0xd0>
   102fe:	f1a5 0520 	sub.w	r5, r5, #32
   10302:	f10e 0e20 	add.w	lr, lr, #32
   10306:	2a01      	cmp	r2, #1
   10308:	fa03 fc0e 	lsl.w	ip, r3, lr
   1030c:	bf28      	it	cs
   1030e:	f04c 0c02 	orrcs.w	ip, ip, #2
   10312:	fa43 f305 	asr.w	r3, r3, r5
   10316:	18c0      	adds	r0, r0, r3
   10318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10320:	d507      	bpl.n	10332 <__adddf3+0xe6>
   10322:	f04f 0e00 	mov.w	lr, #0
   10326:	f1dc 0c00 	rsbs	ip, ip, #0
   1032a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1032e:	eb6e 0101 	sbc.w	r1, lr, r1
   10332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10336:	d31b      	bcc.n	10370 <__adddf3+0x124>
   10338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1033c:	d30c      	bcc.n	10358 <__adddf3+0x10c>
   1033e:	0849      	lsrs	r1, r1, #1
   10340:	ea5f 0030 	movs.w	r0, r0, rrx
   10344:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10348:	f104 0401 	add.w	r4, r4, #1
   1034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10354:	f080 809a 	bcs.w	1048c <__adddf3+0x240>
   10358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1035c:	bf08      	it	eq
   1035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10362:	f150 0000 	adcs.w	r0, r0, #0
   10366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1036a:	ea41 0105 	orr.w	r1, r1, r5
   1036e:	bd30      	pop	{r4, r5, pc}
   10370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10374:	4140      	adcs	r0, r0
   10376:	eb41 0101 	adc.w	r1, r1, r1
   1037a:	3c01      	subs	r4, #1
   1037c:	bf28      	it	cs
   1037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10382:	d2e9      	bcs.n	10358 <__adddf3+0x10c>
   10384:	f091 0f00 	teq	r1, #0
   10388:	bf04      	itt	eq
   1038a:	4601      	moveq	r1, r0
   1038c:	2000      	moveq	r0, #0
   1038e:	fab1 f381 	clz	r3, r1
   10392:	bf08      	it	eq
   10394:	3320      	addeq	r3, #32
   10396:	f1a3 030b 	sub.w	r3, r3, #11
   1039a:	f1b3 0220 	subs.w	r2, r3, #32
   1039e:	da0c      	bge.n	103ba <__adddf3+0x16e>
   103a0:	320c      	adds	r2, #12
   103a2:	dd08      	ble.n	103b6 <__adddf3+0x16a>
   103a4:	f102 0c14 	add.w	ip, r2, #20
   103a8:	f1c2 020c 	rsb	r2, r2, #12
   103ac:	fa01 f00c 	lsl.w	r0, r1, ip
   103b0:	fa21 f102 	lsr.w	r1, r1, r2
   103b4:	e00c      	b.n	103d0 <__adddf3+0x184>
   103b6:	f102 0214 	add.w	r2, r2, #20
   103ba:	bfd8      	it	le
   103bc:	f1c2 0c20 	rsble	ip, r2, #32
   103c0:	fa01 f102 	lsl.w	r1, r1, r2
   103c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   103c8:	bfdc      	itt	le
   103ca:	ea41 010c 	orrle.w	r1, r1, ip
   103ce:	4090      	lslle	r0, r2
   103d0:	1ae4      	subs	r4, r4, r3
   103d2:	bfa2      	ittt	ge
   103d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   103d8:	4329      	orrge	r1, r5
   103da:	bd30      	popge	{r4, r5, pc}
   103dc:	ea6f 0404 	mvn.w	r4, r4
   103e0:	3c1f      	subs	r4, #31
   103e2:	da1c      	bge.n	1041e <__adddf3+0x1d2>
   103e4:	340c      	adds	r4, #12
   103e6:	dc0e      	bgt.n	10406 <__adddf3+0x1ba>
   103e8:	f104 0414 	add.w	r4, r4, #20
   103ec:	f1c4 0220 	rsb	r2, r4, #32
   103f0:	fa20 f004 	lsr.w	r0, r0, r4
   103f4:	fa01 f302 	lsl.w	r3, r1, r2
   103f8:	ea40 0003 	orr.w	r0, r0, r3
   103fc:	fa21 f304 	lsr.w	r3, r1, r4
   10400:	ea45 0103 	orr.w	r1, r5, r3
   10404:	bd30      	pop	{r4, r5, pc}
   10406:	f1c4 040c 	rsb	r4, r4, #12
   1040a:	f1c4 0220 	rsb	r2, r4, #32
   1040e:	fa20 f002 	lsr.w	r0, r0, r2
   10412:	fa01 f304 	lsl.w	r3, r1, r4
   10416:	ea40 0003 	orr.w	r0, r0, r3
   1041a:	4629      	mov	r1, r5
   1041c:	bd30      	pop	{r4, r5, pc}
   1041e:	fa21 f004 	lsr.w	r0, r1, r4
   10422:	4629      	mov	r1, r5
   10424:	bd30      	pop	{r4, r5, pc}
   10426:	f094 0f00 	teq	r4, #0
   1042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1042e:	bf06      	itte	eq
   10430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10434:	3401      	addeq	r4, #1
   10436:	3d01      	subne	r5, #1
   10438:	e74e      	b.n	102d8 <__adddf3+0x8c>
   1043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1043e:	bf18      	it	ne
   10440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10444:	d029      	beq.n	1049a <__adddf3+0x24e>
   10446:	ea94 0f05 	teq	r4, r5
   1044a:	bf08      	it	eq
   1044c:	ea90 0f02 	teqeq	r0, r2
   10450:	d005      	beq.n	1045e <__adddf3+0x212>
   10452:	ea54 0c00 	orrs.w	ip, r4, r0
   10456:	bf04      	itt	eq
   10458:	4619      	moveq	r1, r3
   1045a:	4610      	moveq	r0, r2
   1045c:	bd30      	pop	{r4, r5, pc}
   1045e:	ea91 0f03 	teq	r1, r3
   10462:	bf1e      	ittt	ne
   10464:	2100      	movne	r1, #0
   10466:	2000      	movne	r0, #0
   10468:	bd30      	popne	{r4, r5, pc}
   1046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1046e:	d105      	bne.n	1047c <__adddf3+0x230>
   10470:	0040      	lsls	r0, r0, #1
   10472:	4149      	adcs	r1, r1
   10474:	bf28      	it	cs
   10476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1047a:	bd30      	pop	{r4, r5, pc}
   1047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10480:	bf3c      	itt	cc
   10482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10486:	bd30      	popcc	{r4, r5, pc}
   10488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10494:	f04f 0000 	mov.w	r0, #0
   10498:	bd30      	pop	{r4, r5, pc}
   1049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1049e:	bf1a      	itte	ne
   104a0:	4619      	movne	r1, r3
   104a2:	4610      	movne	r0, r2
   104a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   104a8:	bf1c      	itt	ne
   104aa:	460b      	movne	r3, r1
   104ac:	4602      	movne	r2, r0
   104ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   104b2:	bf06      	itte	eq
   104b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   104b8:	ea91 0f03 	teqeq	r1, r3
   104bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   104c0:	bd30      	pop	{r4, r5, pc}
   104c2:	bf00      	nop

000104c4 <__aeabi_ui2d>:
   104c4:	f090 0f00 	teq	r0, #0
   104c8:	bf04      	itt	eq
   104ca:	2100      	moveq	r1, #0
   104cc:	4770      	bxeq	lr
   104ce:	b530      	push	{r4, r5, lr}
   104d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104d8:	f04f 0500 	mov.w	r5, #0
   104dc:	f04f 0100 	mov.w	r1, #0
   104e0:	e750      	b.n	10384 <__adddf3+0x138>
   104e2:	bf00      	nop

000104e4 <__aeabi_i2d>:
   104e4:	f090 0f00 	teq	r0, #0
   104e8:	bf04      	itt	eq
   104ea:	2100      	moveq	r1, #0
   104ec:	4770      	bxeq	lr
   104ee:	b530      	push	{r4, r5, lr}
   104f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   104fc:	bf48      	it	mi
   104fe:	4240      	negmi	r0, r0
   10500:	f04f 0100 	mov.w	r1, #0
   10504:	e73e      	b.n	10384 <__adddf3+0x138>
   10506:	bf00      	nop

00010508 <__aeabi_f2d>:
   10508:	0042      	lsls	r2, r0, #1
   1050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1050e:	ea4f 0131 	mov.w	r1, r1, rrx
   10512:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10516:	bf1f      	itttt	ne
   10518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10524:	4770      	bxne	lr
   10526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1052a:	bf08      	it	eq
   1052c:	4770      	bxeq	lr
   1052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   10532:	bf04      	itt	eq
   10534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   10538:	4770      	bxeq	lr
   1053a:	b530      	push	{r4, r5, lr}
   1053c:	f44f 7460 	mov.w	r4, #896	; 0x380
   10540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10548:	e71c      	b.n	10384 <__adddf3+0x138>
   1054a:	bf00      	nop

0001054c <__aeabi_ul2d>:
   1054c:	ea50 0201 	orrs.w	r2, r0, r1
   10550:	bf08      	it	eq
   10552:	4770      	bxeq	lr
   10554:	b530      	push	{r4, r5, lr}
   10556:	f04f 0500 	mov.w	r5, #0
   1055a:	e00a      	b.n	10572 <__aeabi_l2d+0x16>

0001055c <__aeabi_l2d>:
   1055c:	ea50 0201 	orrs.w	r2, r0, r1
   10560:	bf08      	it	eq
   10562:	4770      	bxeq	lr
   10564:	b530      	push	{r4, r5, lr}
   10566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1056a:	d502      	bpl.n	10572 <__aeabi_l2d+0x16>
   1056c:	4240      	negs	r0, r0
   1056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10572:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10576:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1057e:	f43f aed8 	beq.w	10332 <__adddf3+0xe6>
   10582:	f04f 0203 	mov.w	r2, #3
   10586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1058a:	bf18      	it	ne
   1058c:	3203      	addne	r2, #3
   1058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10592:	bf18      	it	ne
   10594:	3203      	addne	r2, #3
   10596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1059a:	f1c2 0320 	rsb	r3, r2, #32
   1059e:	fa00 fc03 	lsl.w	ip, r0, r3
   105a2:	fa20 f002 	lsr.w	r0, r0, r2
   105a6:	fa01 fe03 	lsl.w	lr, r1, r3
   105aa:	ea40 000e 	orr.w	r0, r0, lr
   105ae:	fa21 f102 	lsr.w	r1, r1, r2
   105b2:	4414      	add	r4, r2
   105b4:	e6bd      	b.n	10332 <__adddf3+0xe6>
   105b6:	bf00      	nop

000105b8 <__aeabi_dmul>:
   105b8:	b570      	push	{r4, r5, r6, lr}
   105ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   105be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   105c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   105c6:	bf1d      	ittte	ne
   105c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   105cc:	ea94 0f0c 	teqne	r4, ip
   105d0:	ea95 0f0c 	teqne	r5, ip
   105d4:	f000 f8de 	bleq	10794 <__aeabi_dmul+0x1dc>
   105d8:	442c      	add	r4, r5
   105da:	ea81 0603 	eor.w	r6, r1, r3
   105de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   105e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   105e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   105ea:	bf18      	it	ne
   105ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   105f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   105f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   105f8:	d038      	beq.n	1066c <__aeabi_dmul+0xb4>
   105fa:	fba0 ce02 	umull	ip, lr, r0, r2
   105fe:	f04f 0500 	mov.w	r5, #0
   10602:	fbe1 e502 	umlal	lr, r5, r1, r2
   10606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1060a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1060e:	f04f 0600 	mov.w	r6, #0
   10612:	fbe1 5603 	umlal	r5, r6, r1, r3
   10616:	f09c 0f00 	teq	ip, #0
   1061a:	bf18      	it	ne
   1061c:	f04e 0e01 	orrne.w	lr, lr, #1
   10620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1062c:	d204      	bcs.n	10638 <__aeabi_dmul+0x80>
   1062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10632:	416d      	adcs	r5, r5
   10634:	eb46 0606 	adc.w	r6, r6, r6
   10638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10650:	bf88      	it	hi
   10652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10656:	d81e      	bhi.n	10696 <__aeabi_dmul+0xde>
   10658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1065c:	bf08      	it	eq
   1065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10662:	f150 0000 	adcs.w	r0, r0, #0
   10666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1066a:	bd70      	pop	{r4, r5, r6, pc}
   1066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10670:	ea46 0101 	orr.w	r1, r6, r1
   10674:	ea40 0002 	orr.w	r0, r0, r2
   10678:	ea81 0103 	eor.w	r1, r1, r3
   1067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10680:	bfc2      	ittt	gt
   10682:	ebd4 050c 	rsbsgt	r5, r4, ip
   10686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1068a:	bd70      	popgt	{r4, r5, r6, pc}
   1068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10690:	f04f 0e00 	mov.w	lr, #0
   10694:	3c01      	subs	r4, #1
   10696:	f300 80ab 	bgt.w	107f0 <__aeabi_dmul+0x238>
   1069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1069e:	bfde      	ittt	le
   106a0:	2000      	movle	r0, #0
   106a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   106a6:	bd70      	pople	{r4, r5, r6, pc}
   106a8:	f1c4 0400 	rsb	r4, r4, #0
   106ac:	3c20      	subs	r4, #32
   106ae:	da35      	bge.n	1071c <__aeabi_dmul+0x164>
   106b0:	340c      	adds	r4, #12
   106b2:	dc1b      	bgt.n	106ec <__aeabi_dmul+0x134>
   106b4:	f104 0414 	add.w	r4, r4, #20
   106b8:	f1c4 0520 	rsb	r5, r4, #32
   106bc:	fa00 f305 	lsl.w	r3, r0, r5
   106c0:	fa20 f004 	lsr.w	r0, r0, r4
   106c4:	fa01 f205 	lsl.w	r2, r1, r5
   106c8:	ea40 0002 	orr.w	r0, r0, r2
   106cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   106d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   106d8:	fa21 f604 	lsr.w	r6, r1, r4
   106dc:	eb42 0106 	adc.w	r1, r2, r6
   106e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   106e4:	bf08      	it	eq
   106e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   106ea:	bd70      	pop	{r4, r5, r6, pc}
   106ec:	f1c4 040c 	rsb	r4, r4, #12
   106f0:	f1c4 0520 	rsb	r5, r4, #32
   106f4:	fa00 f304 	lsl.w	r3, r0, r4
   106f8:	fa20 f005 	lsr.w	r0, r0, r5
   106fc:	fa01 f204 	lsl.w	r2, r1, r4
   10700:	ea40 0002 	orr.w	r0, r0, r2
   10704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1070c:	f141 0100 	adc.w	r1, r1, #0
   10710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10714:	bf08      	it	eq
   10716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1071a:	bd70      	pop	{r4, r5, r6, pc}
   1071c:	f1c4 0520 	rsb	r5, r4, #32
   10720:	fa00 f205 	lsl.w	r2, r0, r5
   10724:	ea4e 0e02 	orr.w	lr, lr, r2
   10728:	fa20 f304 	lsr.w	r3, r0, r4
   1072c:	fa01 f205 	lsl.w	r2, r1, r5
   10730:	ea43 0302 	orr.w	r3, r3, r2
   10734:	fa21 f004 	lsr.w	r0, r1, r4
   10738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1073c:	fa21 f204 	lsr.w	r2, r1, r4
   10740:	ea20 0002 	bic.w	r0, r0, r2
   10744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1074c:	bf08      	it	eq
   1074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10752:	bd70      	pop	{r4, r5, r6, pc}
   10754:	f094 0f00 	teq	r4, #0
   10758:	d10f      	bne.n	1077a <__aeabi_dmul+0x1c2>
   1075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1075e:	0040      	lsls	r0, r0, #1
   10760:	eb41 0101 	adc.w	r1, r1, r1
   10764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10768:	bf08      	it	eq
   1076a:	3c01      	subeq	r4, #1
   1076c:	d0f7      	beq.n	1075e <__aeabi_dmul+0x1a6>
   1076e:	ea41 0106 	orr.w	r1, r1, r6
   10772:	f095 0f00 	teq	r5, #0
   10776:	bf18      	it	ne
   10778:	4770      	bxne	lr
   1077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1077e:	0052      	lsls	r2, r2, #1
   10780:	eb43 0303 	adc.w	r3, r3, r3
   10784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10788:	bf08      	it	eq
   1078a:	3d01      	subeq	r5, #1
   1078c:	d0f7      	beq.n	1077e <__aeabi_dmul+0x1c6>
   1078e:	ea43 0306 	orr.w	r3, r3, r6
   10792:	4770      	bx	lr
   10794:	ea94 0f0c 	teq	r4, ip
   10798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1079c:	bf18      	it	ne
   1079e:	ea95 0f0c 	teqne	r5, ip
   107a2:	d00c      	beq.n	107be <__aeabi_dmul+0x206>
   107a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107a8:	bf18      	it	ne
   107aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107ae:	d1d1      	bne.n	10754 <__aeabi_dmul+0x19c>
   107b0:	ea81 0103 	eor.w	r1, r1, r3
   107b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107b8:	f04f 0000 	mov.w	r0, #0
   107bc:	bd70      	pop	{r4, r5, r6, pc}
   107be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107c2:	bf06      	itte	eq
   107c4:	4610      	moveq	r0, r2
   107c6:	4619      	moveq	r1, r3
   107c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107cc:	d019      	beq.n	10802 <__aeabi_dmul+0x24a>
   107ce:	ea94 0f0c 	teq	r4, ip
   107d2:	d102      	bne.n	107da <__aeabi_dmul+0x222>
   107d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   107d8:	d113      	bne.n	10802 <__aeabi_dmul+0x24a>
   107da:	ea95 0f0c 	teq	r5, ip
   107de:	d105      	bne.n	107ec <__aeabi_dmul+0x234>
   107e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   107e4:	bf1c      	itt	ne
   107e6:	4610      	movne	r0, r2
   107e8:	4619      	movne	r1, r3
   107ea:	d10a      	bne.n	10802 <__aeabi_dmul+0x24a>
   107ec:	ea81 0103 	eor.w	r1, r1, r3
   107f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   107f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   107fc:	f04f 0000 	mov.w	r0, #0
   10800:	bd70      	pop	{r4, r5, r6, pc}
   10802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1080a:	bd70      	pop	{r4, r5, r6, pc}

0001080c <__aeabi_ddiv>:
   1080c:	b570      	push	{r4, r5, r6, lr}
   1080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1081a:	bf1d      	ittte	ne
   1081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10820:	ea94 0f0c 	teqne	r4, ip
   10824:	ea95 0f0c 	teqne	r5, ip
   10828:	f000 f8a7 	bleq	1097a <__aeabi_ddiv+0x16e>
   1082c:	eba4 0405 	sub.w	r4, r4, r5
   10830:	ea81 0e03 	eor.w	lr, r1, r3
   10834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10838:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1083c:	f000 8088 	beq.w	10950 <__aeabi_ddiv+0x144>
   10840:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10850:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   10858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10864:	429d      	cmp	r5, r3
   10866:	bf08      	it	eq
   10868:	4296      	cmpeq	r6, r2
   1086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10872:	d202      	bcs.n	1087a <__aeabi_ddiv+0x6e>
   10874:	085b      	lsrs	r3, r3, #1
   10876:	ea4f 0232 	mov.w	r2, r2, rrx
   1087a:	1ab6      	subs	r6, r6, r2
   1087c:	eb65 0503 	sbc.w	r5, r5, r3
   10880:	085b      	lsrs	r3, r3, #1
   10882:	ea4f 0232 	mov.w	r2, r2, rrx
   10886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1088e:	ebb6 0e02 	subs.w	lr, r6, r2
   10892:	eb75 0e03 	sbcs.w	lr, r5, r3
   10896:	bf22      	ittt	cs
   10898:	1ab6      	subcs	r6, r6, r2
   1089a:	4675      	movcs	r5, lr
   1089c:	ea40 000c 	orrcs.w	r0, r0, ip
   108a0:	085b      	lsrs	r3, r3, #1
   108a2:	ea4f 0232 	mov.w	r2, r2, rrx
   108a6:	ebb6 0e02 	subs.w	lr, r6, r2
   108aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   108ae:	bf22      	ittt	cs
   108b0:	1ab6      	subcs	r6, r6, r2
   108b2:	4675      	movcs	r5, lr
   108b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   108b8:	085b      	lsrs	r3, r3, #1
   108ba:	ea4f 0232 	mov.w	r2, r2, rrx
   108be:	ebb6 0e02 	subs.w	lr, r6, r2
   108c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   108c6:	bf22      	ittt	cs
   108c8:	1ab6      	subcs	r6, r6, r2
   108ca:	4675      	movcs	r5, lr
   108cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   108d0:	085b      	lsrs	r3, r3, #1
   108d2:	ea4f 0232 	mov.w	r2, r2, rrx
   108d6:	ebb6 0e02 	subs.w	lr, r6, r2
   108da:	eb75 0e03 	sbcs.w	lr, r5, r3
   108de:	bf22      	ittt	cs
   108e0:	1ab6      	subcs	r6, r6, r2
   108e2:	4675      	movcs	r5, lr
   108e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   108e8:	ea55 0e06 	orrs.w	lr, r5, r6
   108ec:	d018      	beq.n	10920 <__aeabi_ddiv+0x114>
   108ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   108f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   108f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   108fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   108fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1090a:	d1c0      	bne.n	1088e <__aeabi_ddiv+0x82>
   1090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10910:	d10b      	bne.n	1092a <__aeabi_ddiv+0x11e>
   10912:	ea41 0100 	orr.w	r1, r1, r0
   10916:	f04f 0000 	mov.w	r0, #0
   1091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1091e:	e7b6      	b.n	1088e <__aeabi_ddiv+0x82>
   10920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10924:	bf04      	itt	eq
   10926:	4301      	orreq	r1, r0
   10928:	2000      	moveq	r0, #0
   1092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1092e:	bf88      	it	hi
   10930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10934:	f63f aeaf 	bhi.w	10696 <__aeabi_dmul+0xde>
   10938:	ebb5 0c03 	subs.w	ip, r5, r3
   1093c:	bf04      	itt	eq
   1093e:	ebb6 0c02 	subseq.w	ip, r6, r2
   10942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10946:	f150 0000 	adcs.w	r0, r0, #0
   1094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1094e:	bd70      	pop	{r4, r5, r6, pc}
   10950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1095c:	bfc2      	ittt	gt
   1095e:	ebd4 050c 	rsbsgt	r5, r4, ip
   10962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10966:	bd70      	popgt	{r4, r5, r6, pc}
   10968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1096c:	f04f 0e00 	mov.w	lr, #0
   10970:	3c01      	subs	r4, #1
   10972:	e690      	b.n	10696 <__aeabi_dmul+0xde>
   10974:	ea45 0e06 	orr.w	lr, r5, r6
   10978:	e68d      	b.n	10696 <__aeabi_dmul+0xde>
   1097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1097e:	ea94 0f0c 	teq	r4, ip
   10982:	bf08      	it	eq
   10984:	ea95 0f0c 	teqeq	r5, ip
   10988:	f43f af3b 	beq.w	10802 <__aeabi_dmul+0x24a>
   1098c:	ea94 0f0c 	teq	r4, ip
   10990:	d10a      	bne.n	109a8 <__aeabi_ddiv+0x19c>
   10992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10996:	f47f af34 	bne.w	10802 <__aeabi_dmul+0x24a>
   1099a:	ea95 0f0c 	teq	r5, ip
   1099e:	f47f af25 	bne.w	107ec <__aeabi_dmul+0x234>
   109a2:	4610      	mov	r0, r2
   109a4:	4619      	mov	r1, r3
   109a6:	e72c      	b.n	10802 <__aeabi_dmul+0x24a>
   109a8:	ea95 0f0c 	teq	r5, ip
   109ac:	d106      	bne.n	109bc <__aeabi_ddiv+0x1b0>
   109ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   109b2:	f43f aefd 	beq.w	107b0 <__aeabi_dmul+0x1f8>
   109b6:	4610      	mov	r0, r2
   109b8:	4619      	mov	r1, r3
   109ba:	e722      	b.n	10802 <__aeabi_dmul+0x24a>
   109bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   109c0:	bf18      	it	ne
   109c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   109c6:	f47f aec5 	bne.w	10754 <__aeabi_dmul+0x19c>
   109ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   109ce:	f47f af0d 	bne.w	107ec <__aeabi_dmul+0x234>
   109d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   109d6:	f47f aeeb 	bne.w	107b0 <__aeabi_dmul+0x1f8>
   109da:	e712      	b.n	10802 <__aeabi_dmul+0x24a>

000109dc <__gedf2>:
   109dc:	f04f 3cff 	mov.w	ip, #4294967295
   109e0:	e006      	b.n	109f0 <__cmpdf2+0x4>
   109e2:	bf00      	nop

000109e4 <__ledf2>:
   109e4:	f04f 0c01 	mov.w	ip, #1
   109e8:	e002      	b.n	109f0 <__cmpdf2+0x4>
   109ea:	bf00      	nop

000109ec <__cmpdf2>:
   109ec:	f04f 0c01 	mov.w	ip, #1
   109f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   109f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   109f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   109fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a00:	bf18      	it	ne
   10a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   10a06:	d01b      	beq.n	10a40 <__cmpdf2+0x54>
   10a08:	b001      	add	sp, #4
   10a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10a0e:	bf0c      	ite	eq
   10a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10a14:	ea91 0f03 	teqne	r1, r3
   10a18:	bf02      	ittt	eq
   10a1a:	ea90 0f02 	teqeq	r0, r2
   10a1e:	2000      	moveq	r0, #0
   10a20:	4770      	bxeq	lr
   10a22:	f110 0f00 	cmn.w	r0, #0
   10a26:	ea91 0f03 	teq	r1, r3
   10a2a:	bf58      	it	pl
   10a2c:	4299      	cmppl	r1, r3
   10a2e:	bf08      	it	eq
   10a30:	4290      	cmpeq	r0, r2
   10a32:	bf2c      	ite	cs
   10a34:	17d8      	asrcs	r0, r3, #31
   10a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   10a3a:	f040 0001 	orr.w	r0, r0, #1
   10a3e:	4770      	bx	lr
   10a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a48:	d102      	bne.n	10a50 <__cmpdf2+0x64>
   10a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10a4e:	d107      	bne.n	10a60 <__cmpdf2+0x74>
   10a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a58:	d1d6      	bne.n	10a08 <__cmpdf2+0x1c>
   10a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10a5e:	d0d3      	beq.n	10a08 <__cmpdf2+0x1c>
   10a60:	f85d 0b04 	ldr.w	r0, [sp], #4
   10a64:	4770      	bx	lr
   10a66:	bf00      	nop

00010a68 <__aeabi_cdrcmple>:
   10a68:	4684      	mov	ip, r0
   10a6a:	4610      	mov	r0, r2
   10a6c:	4662      	mov	r2, ip
   10a6e:	468c      	mov	ip, r1
   10a70:	4619      	mov	r1, r3
   10a72:	4663      	mov	r3, ip
   10a74:	e000      	b.n	10a78 <__aeabi_cdcmpeq>
   10a76:	bf00      	nop

00010a78 <__aeabi_cdcmpeq>:
   10a78:	b501      	push	{r0, lr}
   10a7a:	f7ff ffb7 	bl	109ec <__cmpdf2>
   10a7e:	2800      	cmp	r0, #0
   10a80:	bf48      	it	mi
   10a82:	f110 0f00 	cmnmi.w	r0, #0
   10a86:	bd01      	pop	{r0, pc}

00010a88 <__aeabi_dcmpeq>:
   10a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   10a8c:	f7ff fff4 	bl	10a78 <__aeabi_cdcmpeq>
   10a90:	bf0c      	ite	eq
   10a92:	2001      	moveq	r0, #1
   10a94:	2000      	movne	r0, #0
   10a96:	f85d fb08 	ldr.w	pc, [sp], #8
   10a9a:	bf00      	nop

00010a9c <__aeabi_dcmplt>:
   10a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10aa0:	f7ff ffea 	bl	10a78 <__aeabi_cdcmpeq>
   10aa4:	bf34      	ite	cc
   10aa6:	2001      	movcc	r0, #1
   10aa8:	2000      	movcs	r0, #0
   10aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   10aae:	bf00      	nop

00010ab0 <__aeabi_dcmple>:
   10ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ab4:	f7ff ffe0 	bl	10a78 <__aeabi_cdcmpeq>
   10ab8:	bf94      	ite	ls
   10aba:	2001      	movls	r0, #1
   10abc:	2000      	movhi	r0, #0
   10abe:	f85d fb08 	ldr.w	pc, [sp], #8
   10ac2:	bf00      	nop

00010ac4 <__aeabi_dcmpge>:
   10ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ac8:	f7ff ffce 	bl	10a68 <__aeabi_cdrcmple>
   10acc:	bf94      	ite	ls
   10ace:	2001      	movls	r0, #1
   10ad0:	2000      	movhi	r0, #0
   10ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   10ad6:	bf00      	nop

00010ad8 <__aeabi_dcmpgt>:
   10ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   10adc:	f7ff ffc4 	bl	10a68 <__aeabi_cdrcmple>
   10ae0:	bf34      	ite	cc
   10ae2:	2001      	movcc	r0, #1
   10ae4:	2000      	movcs	r0, #0
   10ae6:	f85d fb08 	ldr.w	pc, [sp], #8
   10aea:	bf00      	nop

00010aec <__aeabi_dcmpun>:
   10aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10af4:	d102      	bne.n	10afc <__aeabi_dcmpun+0x10>
   10af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10afa:	d10a      	bne.n	10b12 <__aeabi_dcmpun+0x26>
   10afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10b04:	d102      	bne.n	10b0c <__aeabi_dcmpun+0x20>
   10b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10b0a:	d102      	bne.n	10b12 <__aeabi_dcmpun+0x26>
   10b0c:	f04f 0000 	mov.w	r0, #0
   10b10:	4770      	bx	lr
   10b12:	f04f 0001 	mov.w	r0, #1
   10b16:	4770      	bx	lr

00010b18 <__aeabi_d2iz>:
   10b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   10b20:	d215      	bcs.n	10b4e <__aeabi_d2iz+0x36>
   10b22:	d511      	bpl.n	10b48 <__aeabi_d2iz+0x30>
   10b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10b2c:	d912      	bls.n	10b54 <__aeabi_d2iz+0x3c>
   10b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10b3e:	fa23 f002 	lsr.w	r0, r3, r2
   10b42:	bf18      	it	ne
   10b44:	4240      	negne	r0, r0
   10b46:	4770      	bx	lr
   10b48:	f04f 0000 	mov.w	r0, #0
   10b4c:	4770      	bx	lr
   10b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10b52:	d105      	bne.n	10b60 <__aeabi_d2iz+0x48>
   10b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   10b58:	bf08      	it	eq
   10b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   10b5e:	4770      	bx	lr
   10b60:	f04f 0000 	mov.w	r0, #0
   10b64:	4770      	bx	lr
   10b66:	bf00      	nop

00010b68 <__aeabi_d2f>:
   10b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10b70:	bf24      	itt	cs
   10b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10b7a:	d90d      	bls.n	10b98 <__aeabi_d2f+0x30>
   10b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10b90:	bf08      	it	eq
   10b92:	f020 0001 	biceq.w	r0, r0, #1
   10b96:	4770      	bx	lr
   10b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10b9c:	d121      	bne.n	10be2 <__aeabi_d2f+0x7a>
   10b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10ba2:	bfbc      	itt	lt
   10ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10ba8:	4770      	bxlt	lr
   10baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10bb2:	f1c2 0218 	rsb	r2, r2, #24
   10bb6:	f1c2 0c20 	rsb	ip, r2, #32
   10bba:	fa10 f30c 	lsls.w	r3, r0, ip
   10bbe:	fa20 f002 	lsr.w	r0, r0, r2
   10bc2:	bf18      	it	ne
   10bc4:	f040 0001 	orrne.w	r0, r0, #1
   10bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
   10bd4:	ea40 000c 	orr.w	r0, r0, ip
   10bd8:	fa23 f302 	lsr.w	r3, r3, r2
   10bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10be0:	e7cc      	b.n	10b7c <__aeabi_d2f+0x14>
   10be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10be6:	d107      	bne.n	10bf8 <__aeabi_d2f+0x90>
   10be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10bec:	bf1e      	ittt	ne
   10bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10bf6:	4770      	bxne	lr
   10bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c04:	4770      	bx	lr
   10c06:	bf00      	nop

00010c08 <__aeabi_frsub>:
   10c08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10c0c:	e002      	b.n	10c14 <__addsf3>
   10c0e:	bf00      	nop

00010c10 <__aeabi_fsub>:
   10c10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010c14 <__addsf3>:
   10c14:	0042      	lsls	r2, r0, #1
   10c16:	bf1f      	itttt	ne
   10c18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10c1c:	ea92 0f03 	teqne	r2, r3
   10c20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10c24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10c28:	d06a      	beq.n	10d00 <__addsf3+0xec>
   10c2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10c2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   10c32:	bfc1      	itttt	gt
   10c34:	18d2      	addgt	r2, r2, r3
   10c36:	4041      	eorgt	r1, r0
   10c38:	4048      	eorgt	r0, r1
   10c3a:	4041      	eorgt	r1, r0
   10c3c:	bfb8      	it	lt
   10c3e:	425b      	neglt	r3, r3
   10c40:	2b19      	cmp	r3, #25
   10c42:	bf88      	it	hi
   10c44:	4770      	bxhi	lr
   10c46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10c52:	bf18      	it	ne
   10c54:	4240      	negne	r0, r0
   10c56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10c5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10c5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10c62:	bf18      	it	ne
   10c64:	4249      	negne	r1, r1
   10c66:	ea92 0f03 	teq	r2, r3
   10c6a:	d03f      	beq.n	10cec <__addsf3+0xd8>
   10c6c:	f1a2 0201 	sub.w	r2, r2, #1
   10c70:	fa41 fc03 	asr.w	ip, r1, r3
   10c74:	eb10 000c 	adds.w	r0, r0, ip
   10c78:	f1c3 0320 	rsb	r3, r3, #32
   10c7c:	fa01 f103 	lsl.w	r1, r1, r3
   10c80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10c84:	d502      	bpl.n	10c8c <__addsf3+0x78>
   10c86:	4249      	negs	r1, r1
   10c88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10c8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10c90:	d313      	bcc.n	10cba <__addsf3+0xa6>
   10c92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10c96:	d306      	bcc.n	10ca6 <__addsf3+0x92>
   10c98:	0840      	lsrs	r0, r0, #1
   10c9a:	ea4f 0131 	mov.w	r1, r1, rrx
   10c9e:	f102 0201 	add.w	r2, r2, #1
   10ca2:	2afe      	cmp	r2, #254	; 0xfe
   10ca4:	d251      	bcs.n	10d4a <__addsf3+0x136>
   10ca6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10cae:	bf08      	it	eq
   10cb0:	f020 0001 	biceq.w	r0, r0, #1
   10cb4:	ea40 0003 	orr.w	r0, r0, r3
   10cb8:	4770      	bx	lr
   10cba:	0049      	lsls	r1, r1, #1
   10cbc:	eb40 0000 	adc.w	r0, r0, r0
   10cc0:	3a01      	subs	r2, #1
   10cc2:	bf28      	it	cs
   10cc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   10cc8:	d2ed      	bcs.n	10ca6 <__addsf3+0x92>
   10cca:	fab0 fc80 	clz	ip, r0
   10cce:	f1ac 0c08 	sub.w	ip, ip, #8
   10cd2:	ebb2 020c 	subs.w	r2, r2, ip
   10cd6:	fa00 f00c 	lsl.w	r0, r0, ip
   10cda:	bfaa      	itet	ge
   10cdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10ce0:	4252      	neglt	r2, r2
   10ce2:	4318      	orrge	r0, r3
   10ce4:	bfbc      	itt	lt
   10ce6:	40d0      	lsrlt	r0, r2
   10ce8:	4318      	orrlt	r0, r3
   10cea:	4770      	bx	lr
   10cec:	f092 0f00 	teq	r2, #0
   10cf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   10cf4:	bf06      	itte	eq
   10cf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10cfa:	3201      	addeq	r2, #1
   10cfc:	3b01      	subne	r3, #1
   10cfe:	e7b5      	b.n	10c6c <__addsf3+0x58>
   10d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10d08:	bf18      	it	ne
   10d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10d0e:	d021      	beq.n	10d54 <__addsf3+0x140>
   10d10:	ea92 0f03 	teq	r2, r3
   10d14:	d004      	beq.n	10d20 <__addsf3+0x10c>
   10d16:	f092 0f00 	teq	r2, #0
   10d1a:	bf08      	it	eq
   10d1c:	4608      	moveq	r0, r1
   10d1e:	4770      	bx	lr
   10d20:	ea90 0f01 	teq	r0, r1
   10d24:	bf1c      	itt	ne
   10d26:	2000      	movne	r0, #0
   10d28:	4770      	bxne	lr
   10d2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10d2e:	d104      	bne.n	10d3a <__addsf3+0x126>
   10d30:	0040      	lsls	r0, r0, #1
   10d32:	bf28      	it	cs
   10d34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10d38:	4770      	bx	lr
   10d3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10d3e:	bf3c      	itt	cc
   10d40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10d44:	4770      	bxcc	lr
   10d46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10d4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10d52:	4770      	bx	lr
   10d54:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10d58:	bf16      	itet	ne
   10d5a:	4608      	movne	r0, r1
   10d5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10d60:	4601      	movne	r1, r0
   10d62:	0242      	lsls	r2, r0, #9
   10d64:	bf06      	itte	eq
   10d66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10d6a:	ea90 0f01 	teqeq	r0, r1
   10d6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   10d72:	4770      	bx	lr

00010d74 <__aeabi_ui2f>:
   10d74:	f04f 0300 	mov.w	r3, #0
   10d78:	e004      	b.n	10d84 <__aeabi_i2f+0x8>
   10d7a:	bf00      	nop

00010d7c <__aeabi_i2f>:
   10d7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   10d80:	bf48      	it	mi
   10d82:	4240      	negmi	r0, r0
   10d84:	ea5f 0c00 	movs.w	ip, r0
   10d88:	bf08      	it	eq
   10d8a:	4770      	bxeq	lr
   10d8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   10d90:	4601      	mov	r1, r0
   10d92:	f04f 0000 	mov.w	r0, #0
   10d96:	e01c      	b.n	10dd2 <__aeabi_l2f+0x2a>

00010d98 <__aeabi_ul2f>:
   10d98:	ea50 0201 	orrs.w	r2, r0, r1
   10d9c:	bf08      	it	eq
   10d9e:	4770      	bxeq	lr
   10da0:	f04f 0300 	mov.w	r3, #0
   10da4:	e00a      	b.n	10dbc <__aeabi_l2f+0x14>
   10da6:	bf00      	nop

00010da8 <__aeabi_l2f>:
   10da8:	ea50 0201 	orrs.w	r2, r0, r1
   10dac:	bf08      	it	eq
   10dae:	4770      	bxeq	lr
   10db0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   10db4:	d502      	bpl.n	10dbc <__aeabi_l2f+0x14>
   10db6:	4240      	negs	r0, r0
   10db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10dbc:	ea5f 0c01 	movs.w	ip, r1
   10dc0:	bf02      	ittt	eq
   10dc2:	4684      	moveq	ip, r0
   10dc4:	4601      	moveq	r1, r0
   10dc6:	2000      	moveq	r0, #0
   10dc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   10dcc:	bf08      	it	eq
   10dce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   10dd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   10dd6:	fabc f28c 	clz	r2, ip
   10dda:	3a08      	subs	r2, #8
   10ddc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10de0:	db10      	blt.n	10e04 <__aeabi_l2f+0x5c>
   10de2:	fa01 fc02 	lsl.w	ip, r1, r2
   10de6:	4463      	add	r3, ip
   10de8:	fa00 fc02 	lsl.w	ip, r0, r2
   10dec:	f1c2 0220 	rsb	r2, r2, #32
   10df0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10df4:	fa20 f202 	lsr.w	r2, r0, r2
   10df8:	eb43 0002 	adc.w	r0, r3, r2
   10dfc:	bf08      	it	eq
   10dfe:	f020 0001 	biceq.w	r0, r0, #1
   10e02:	4770      	bx	lr
   10e04:	f102 0220 	add.w	r2, r2, #32
   10e08:	fa01 fc02 	lsl.w	ip, r1, r2
   10e0c:	f1c2 0220 	rsb	r2, r2, #32
   10e10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10e14:	fa21 f202 	lsr.w	r2, r1, r2
   10e18:	eb43 0002 	adc.w	r0, r3, r2
   10e1c:	bf08      	it	eq
   10e1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10e22:	4770      	bx	lr

00010e24 <__aeabi_fmul>:
   10e24:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10e28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   10e2c:	bf1e      	ittt	ne
   10e2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   10e32:	ea92 0f0c 	teqne	r2, ip
   10e36:	ea93 0f0c 	teqne	r3, ip
   10e3a:	d06f      	beq.n	10f1c <__aeabi_fmul+0xf8>
   10e3c:	441a      	add	r2, r3
   10e3e:	ea80 0c01 	eor.w	ip, r0, r1
   10e42:	0240      	lsls	r0, r0, #9
   10e44:	bf18      	it	ne
   10e46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   10e4a:	d01e      	beq.n	10e8a <__aeabi_fmul+0x66>
   10e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10e50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   10e54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   10e58:	fba0 3101 	umull	r3, r1, r0, r1
   10e5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   10e60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   10e64:	bf3e      	ittt	cc
   10e66:	0049      	lslcc	r1, r1, #1
   10e68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   10e6c:	005b      	lslcc	r3, r3, #1
   10e6e:	ea40 0001 	orr.w	r0, r0, r1
   10e72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   10e76:	2afd      	cmp	r2, #253	; 0xfd
   10e78:	d81d      	bhi.n	10eb6 <__aeabi_fmul+0x92>
   10e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   10e7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10e82:	bf08      	it	eq
   10e84:	f020 0001 	biceq.w	r0, r0, #1
   10e88:	4770      	bx	lr
   10e8a:	f090 0f00 	teq	r0, #0
   10e8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   10e92:	bf08      	it	eq
   10e94:	0249      	lsleq	r1, r1, #9
   10e96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   10e9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   10e9e:	3a7f      	subs	r2, #127	; 0x7f
   10ea0:	bfc2      	ittt	gt
   10ea2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   10ea6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   10eaa:	4770      	bxgt	lr
   10eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10eb0:	f04f 0300 	mov.w	r3, #0
   10eb4:	3a01      	subs	r2, #1
   10eb6:	dc5d      	bgt.n	10f74 <__aeabi_fmul+0x150>
   10eb8:	f112 0f19 	cmn.w	r2, #25
   10ebc:	bfdc      	itt	le
   10ebe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   10ec2:	4770      	bxle	lr
   10ec4:	f1c2 0200 	rsb	r2, r2, #0
   10ec8:	0041      	lsls	r1, r0, #1
   10eca:	fa21 f102 	lsr.w	r1, r1, r2
   10ece:	f1c2 0220 	rsb	r2, r2, #32
   10ed2:	fa00 fc02 	lsl.w	ip, r0, r2
   10ed6:	ea5f 0031 	movs.w	r0, r1, rrx
   10eda:	f140 0000 	adc.w	r0, r0, #0
   10ede:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   10ee2:	bf08      	it	eq
   10ee4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10ee8:	4770      	bx	lr
   10eea:	f092 0f00 	teq	r2, #0
   10eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   10ef2:	bf02      	ittt	eq
   10ef4:	0040      	lsleq	r0, r0, #1
   10ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   10efa:	3a01      	subeq	r2, #1
   10efc:	d0f9      	beq.n	10ef2 <__aeabi_fmul+0xce>
   10efe:	ea40 000c 	orr.w	r0, r0, ip
   10f02:	f093 0f00 	teq	r3, #0
   10f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10f0a:	bf02      	ittt	eq
   10f0c:	0049      	lsleq	r1, r1, #1
   10f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   10f12:	3b01      	subeq	r3, #1
   10f14:	d0f9      	beq.n	10f0a <__aeabi_fmul+0xe6>
   10f16:	ea41 010c 	orr.w	r1, r1, ip
   10f1a:	e78f      	b.n	10e3c <__aeabi_fmul+0x18>
   10f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   10f20:	ea92 0f0c 	teq	r2, ip
   10f24:	bf18      	it	ne
   10f26:	ea93 0f0c 	teqne	r3, ip
   10f2a:	d00a      	beq.n	10f42 <__aeabi_fmul+0x11e>
   10f2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   10f30:	bf18      	it	ne
   10f32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   10f36:	d1d8      	bne.n	10eea <__aeabi_fmul+0xc6>
   10f38:	ea80 0001 	eor.w	r0, r0, r1
   10f3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10f40:	4770      	bx	lr
   10f42:	f090 0f00 	teq	r0, #0
   10f46:	bf17      	itett	ne
   10f48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   10f4c:	4608      	moveq	r0, r1
   10f4e:	f091 0f00 	teqne	r1, #0
   10f52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   10f56:	d014      	beq.n	10f82 <__aeabi_fmul+0x15e>
   10f58:	ea92 0f0c 	teq	r2, ip
   10f5c:	d101      	bne.n	10f62 <__aeabi_fmul+0x13e>
   10f5e:	0242      	lsls	r2, r0, #9
   10f60:	d10f      	bne.n	10f82 <__aeabi_fmul+0x15e>
   10f62:	ea93 0f0c 	teq	r3, ip
   10f66:	d103      	bne.n	10f70 <__aeabi_fmul+0x14c>
   10f68:	024b      	lsls	r3, r1, #9
   10f6a:	bf18      	it	ne
   10f6c:	4608      	movne	r0, r1
   10f6e:	d108      	bne.n	10f82 <__aeabi_fmul+0x15e>
   10f70:	ea80 0001 	eor.w	r0, r0, r1
   10f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10f78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10f7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10f80:	4770      	bx	lr
   10f82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10f86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   10f8a:	4770      	bx	lr

00010f8c <__aeabi_fdiv>:
   10f8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10f90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   10f94:	bf1e      	ittt	ne
   10f96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   10f9a:	ea92 0f0c 	teqne	r2, ip
   10f9e:	ea93 0f0c 	teqne	r3, ip
   10fa2:	d069      	beq.n	11078 <__aeabi_fdiv+0xec>
   10fa4:	eba2 0203 	sub.w	r2, r2, r3
   10fa8:	ea80 0c01 	eor.w	ip, r0, r1
   10fac:	0249      	lsls	r1, r1, #9
   10fae:	ea4f 2040 	mov.w	r0, r0, lsl #9
   10fb2:	d037      	beq.n	11024 <__aeabi_fdiv+0x98>
   10fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10fb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   10fbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   10fc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   10fc4:	428b      	cmp	r3, r1
   10fc6:	bf38      	it	cc
   10fc8:	005b      	lslcc	r3, r3, #1
   10fca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   10fce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   10fd2:	428b      	cmp	r3, r1
   10fd4:	bf24      	itt	cs
   10fd6:	1a5b      	subcs	r3, r3, r1
   10fd8:	ea40 000c 	orrcs.w	r0, r0, ip
   10fdc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   10fe0:	bf24      	itt	cs
   10fe2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   10fe6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10fea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   10fee:	bf24      	itt	cs
   10ff0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   10ff4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10ff8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   10ffc:	bf24      	itt	cs
   10ffe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   11002:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   11006:	011b      	lsls	r3, r3, #4
   11008:	bf18      	it	ne
   1100a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1100e:	d1e0      	bne.n	10fd2 <__aeabi_fdiv+0x46>
   11010:	2afd      	cmp	r2, #253	; 0xfd
   11012:	f63f af50 	bhi.w	10eb6 <__aeabi_fmul+0x92>
   11016:	428b      	cmp	r3, r1
   11018:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1101c:	bf08      	it	eq
   1101e:	f020 0001 	biceq.w	r0, r0, #1
   11022:	4770      	bx	lr
   11024:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   11028:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1102c:	327f      	adds	r2, #127	; 0x7f
   1102e:	bfc2      	ittt	gt
   11030:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   11034:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   11038:	4770      	bxgt	lr
   1103a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1103e:	f04f 0300 	mov.w	r3, #0
   11042:	3a01      	subs	r2, #1
   11044:	e737      	b.n	10eb6 <__aeabi_fmul+0x92>
   11046:	f092 0f00 	teq	r2, #0
   1104a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1104e:	bf02      	ittt	eq
   11050:	0040      	lsleq	r0, r0, #1
   11052:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   11056:	3a01      	subeq	r2, #1
   11058:	d0f9      	beq.n	1104e <__aeabi_fdiv+0xc2>
   1105a:	ea40 000c 	orr.w	r0, r0, ip
   1105e:	f093 0f00 	teq	r3, #0
   11062:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   11066:	bf02      	ittt	eq
   11068:	0049      	lsleq	r1, r1, #1
   1106a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1106e:	3b01      	subeq	r3, #1
   11070:	d0f9      	beq.n	11066 <__aeabi_fdiv+0xda>
   11072:	ea41 010c 	orr.w	r1, r1, ip
   11076:	e795      	b.n	10fa4 <__aeabi_fdiv+0x18>
   11078:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1107c:	ea92 0f0c 	teq	r2, ip
   11080:	d108      	bne.n	11094 <__aeabi_fdiv+0x108>
   11082:	0242      	lsls	r2, r0, #9
   11084:	f47f af7d 	bne.w	10f82 <__aeabi_fmul+0x15e>
   11088:	ea93 0f0c 	teq	r3, ip
   1108c:	f47f af70 	bne.w	10f70 <__aeabi_fmul+0x14c>
   11090:	4608      	mov	r0, r1
   11092:	e776      	b.n	10f82 <__aeabi_fmul+0x15e>
   11094:	ea93 0f0c 	teq	r3, ip
   11098:	d104      	bne.n	110a4 <__aeabi_fdiv+0x118>
   1109a:	024b      	lsls	r3, r1, #9
   1109c:	f43f af4c 	beq.w	10f38 <__aeabi_fmul+0x114>
   110a0:	4608      	mov	r0, r1
   110a2:	e76e      	b.n	10f82 <__aeabi_fmul+0x15e>
   110a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   110a8:	bf18      	it	ne
   110aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   110ae:	d1ca      	bne.n	11046 <__aeabi_fdiv+0xba>
   110b0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   110b4:	f47f af5c 	bne.w	10f70 <__aeabi_fmul+0x14c>
   110b8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   110bc:	f47f af3c 	bne.w	10f38 <__aeabi_fmul+0x114>
   110c0:	e75f      	b.n	10f82 <__aeabi_fmul+0x15e>
   110c2:	bf00      	nop

000110c4 <__aeabi_f2iz>:
   110c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   110c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   110cc:	d30f      	bcc.n	110ee <__aeabi_f2iz+0x2a>
   110ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
   110d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   110d6:	d90d      	bls.n	110f4 <__aeabi_f2iz+0x30>
   110d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   110dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   110e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   110e4:	fa23 f002 	lsr.w	r0, r3, r2
   110e8:	bf18      	it	ne
   110ea:	4240      	negne	r0, r0
   110ec:	4770      	bx	lr
   110ee:	f04f 0000 	mov.w	r0, #0
   110f2:	4770      	bx	lr
   110f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   110f8:	d101      	bne.n	110fe <__aeabi_f2iz+0x3a>
   110fa:	0242      	lsls	r2, r0, #9
   110fc:	d105      	bne.n	1110a <__aeabi_f2iz+0x46>
   110fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   11102:	bf08      	it	eq
   11104:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   11108:	4770      	bx	lr
   1110a:	f04f 0000 	mov.w	r0, #0
   1110e:	4770      	bx	lr

00011110 <__aeabi_f2uiz>:
   11110:	0042      	lsls	r2, r0, #1
   11112:	d20e      	bcs.n	11132 <__aeabi_f2uiz+0x22>
   11114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   11118:	d30b      	bcc.n	11132 <__aeabi_f2uiz+0x22>
   1111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   11122:	d409      	bmi.n	11138 <__aeabi_f2uiz+0x28>
   11124:	ea4f 2300 	mov.w	r3, r0, lsl #8
   11128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1112c:	fa23 f002 	lsr.w	r0, r3, r2
   11130:	4770      	bx	lr
   11132:	f04f 0000 	mov.w	r0, #0
   11136:	4770      	bx	lr
   11138:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1113c:	d101      	bne.n	11142 <__aeabi_f2uiz+0x32>
   1113e:	0242      	lsls	r2, r0, #9
   11140:	d102      	bne.n	11148 <__aeabi_f2uiz+0x38>
   11142:	f04f 30ff 	mov.w	r0, #4294967295
   11146:	4770      	bx	lr
   11148:	f04f 0000 	mov.w	r0, #0
   1114c:	4770      	bx	lr
   1114e:	bf00      	nop

00011150 <__aeabi_ldivmod>:
   11150:	b97b      	cbnz	r3, 11172 <__aeabi_ldivmod+0x22>
   11152:	b972      	cbnz	r2, 11172 <__aeabi_ldivmod+0x22>
   11154:	2900      	cmp	r1, #0
   11156:	bfbe      	ittt	lt
   11158:	2000      	movlt	r0, #0
   1115a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1115e:	e006      	blt.n	1116e <__aeabi_ldivmod+0x1e>
   11160:	bf08      	it	eq
   11162:	2800      	cmpeq	r0, #0
   11164:	bf1c      	itt	ne
   11166:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1116a:	f04f 30ff 	movne.w	r0, #4294967295
   1116e:	f000 b9bb 	b.w	114e8 <__aeabi_idiv0>
   11172:	f1ad 0c08 	sub.w	ip, sp, #8
   11176:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1117a:	2900      	cmp	r1, #0
   1117c:	db09      	blt.n	11192 <__aeabi_ldivmod+0x42>
   1117e:	2b00      	cmp	r3, #0
   11180:	db1a      	blt.n	111b8 <__aeabi_ldivmod+0x68>
   11182:	f000 f84d 	bl	11220 <__udivmoddi4>
   11186:	f8dd e004 	ldr.w	lr, [sp, #4]
   1118a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1118e:	b004      	add	sp, #16
   11190:	4770      	bx	lr
   11192:	4240      	negs	r0, r0
   11194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11198:	2b00      	cmp	r3, #0
   1119a:	db1b      	blt.n	111d4 <__aeabi_ldivmod+0x84>
   1119c:	f000 f840 	bl	11220 <__udivmoddi4>
   111a0:	f8dd e004 	ldr.w	lr, [sp, #4]
   111a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111a8:	b004      	add	sp, #16
   111aa:	4240      	negs	r0, r0
   111ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   111b0:	4252      	negs	r2, r2
   111b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111b6:	4770      	bx	lr
   111b8:	4252      	negs	r2, r2
   111ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111be:	f000 f82f 	bl	11220 <__udivmoddi4>
   111c2:	f8dd e004 	ldr.w	lr, [sp, #4]
   111c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111ca:	b004      	add	sp, #16
   111cc:	4240      	negs	r0, r0
   111ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   111d2:	4770      	bx	lr
   111d4:	4252      	negs	r2, r2
   111d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111da:	f000 f821 	bl	11220 <__udivmoddi4>
   111de:	f8dd e004 	ldr.w	lr, [sp, #4]
   111e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111e6:	b004      	add	sp, #16
   111e8:	4252      	negs	r2, r2
   111ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   111ee:	4770      	bx	lr

000111f0 <__aeabi_uldivmod>:
   111f0:	b953      	cbnz	r3, 11208 <__aeabi_uldivmod+0x18>
   111f2:	b94a      	cbnz	r2, 11208 <__aeabi_uldivmod+0x18>
   111f4:	2900      	cmp	r1, #0
   111f6:	bf08      	it	eq
   111f8:	2800      	cmpeq	r0, #0
   111fa:	bf1c      	itt	ne
   111fc:	f04f 31ff 	movne.w	r1, #4294967295
   11200:	f04f 30ff 	movne.w	r0, #4294967295
   11204:	f000 b970 	b.w	114e8 <__aeabi_idiv0>
   11208:	f1ad 0c08 	sub.w	ip, sp, #8
   1120c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   11210:	f000 f806 	bl	11220 <__udivmoddi4>
   11214:	f8dd e004 	ldr.w	lr, [sp, #4]
   11218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1121c:	b004      	add	sp, #16
   1121e:	4770      	bx	lr

00011220 <__udivmoddi4>:
   11220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11224:	9e08      	ldr	r6, [sp, #32]
   11226:	460d      	mov	r5, r1
   11228:	4604      	mov	r4, r0
   1122a:	468a      	mov	sl, r1
   1122c:	2b00      	cmp	r3, #0
   1122e:	d17f      	bne.n	11330 <__udivmoddi4+0x110>
   11230:	428a      	cmp	r2, r1
   11232:	4617      	mov	r7, r2
   11234:	d941      	bls.n	112ba <__udivmoddi4+0x9a>
   11236:	fab2 f282 	clz	r2, r2
   1123a:	b14a      	cbz	r2, 11250 <__udivmoddi4+0x30>
   1123c:	f1c2 0120 	rsb	r1, r2, #32
   11240:	fa05 f302 	lsl.w	r3, r5, r2
   11244:	4097      	lsls	r7, r2
   11246:	4094      	lsls	r4, r2
   11248:	fa20 f101 	lsr.w	r1, r0, r1
   1124c:	ea41 0a03 	orr.w	sl, r1, r3
   11250:	ea4f 4817 	mov.w	r8, r7, lsr #16
   11254:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   11258:	fa1f f987 	uxth.w	r9, r7
   1125c:	fbba fef8 	udiv	lr, sl, r8
   11260:	fb08 a31e 	mls	r3, r8, lr, sl
   11264:	fb0e f109 	mul.w	r1, lr, r9
   11268:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   1126c:	4299      	cmp	r1, r3
   1126e:	d906      	bls.n	1127e <__udivmoddi4+0x5e>
   11270:	18fb      	adds	r3, r7, r3
   11272:	d202      	bcs.n	1127a <__udivmoddi4+0x5a>
   11274:	4299      	cmp	r1, r3
   11276:	f200 8124 	bhi.w	114c2 <__udivmoddi4+0x2a2>
   1127a:	f10e 3eff 	add.w	lr, lr, #4294967295
   1127e:	1a59      	subs	r1, r3, r1
   11280:	b2a3      	uxth	r3, r4
   11282:	fbb1 f0f8 	udiv	r0, r1, r8
   11286:	fb08 1110 	mls	r1, r8, r0, r1
   1128a:	fb00 f909 	mul.w	r9, r0, r9
   1128e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   11292:	45a1      	cmp	r9, r4
   11294:	d905      	bls.n	112a2 <__udivmoddi4+0x82>
   11296:	193c      	adds	r4, r7, r4
   11298:	d202      	bcs.n	112a0 <__udivmoddi4+0x80>
   1129a:	45a1      	cmp	r9, r4
   1129c:	f200 810e 	bhi.w	114bc <__udivmoddi4+0x29c>
   112a0:	3801      	subs	r0, #1
   112a2:	eba4 0409 	sub.w	r4, r4, r9
   112a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   112aa:	2100      	movs	r1, #0
   112ac:	b11e      	cbz	r6, 112b6 <__udivmoddi4+0x96>
   112ae:	40d4      	lsrs	r4, r2
   112b0:	2300      	movs	r3, #0
   112b2:	e9c6 4300 	strd	r4, r3, [r6]
   112b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112ba:	b902      	cbnz	r2, 112be <__udivmoddi4+0x9e>
   112bc:	deff      	udf	#255	; 0xff
   112be:	fab2 f282 	clz	r2, r2
   112c2:	2a00      	cmp	r2, #0
   112c4:	d14f      	bne.n	11366 <__udivmoddi4+0x146>
   112c6:	1bcb      	subs	r3, r1, r7
   112c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   112cc:	fa1f f887 	uxth.w	r8, r7
   112d0:	2101      	movs	r1, #1
   112d2:	0c25      	lsrs	r5, r4, #16
   112d4:	fbb3 fcfe 	udiv	ip, r3, lr
   112d8:	fb0e 301c 	mls	r0, lr, ip, r3
   112dc:	462b      	mov	r3, r5
   112de:	fb08 f90c 	mul.w	r9, r8, ip
   112e2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   112e6:	45a9      	cmp	r9, r5
   112e8:	d90a      	bls.n	11300 <__udivmoddi4+0xe0>
   112ea:	197d      	adds	r5, r7, r5
   112ec:	bf2c      	ite	cs
   112ee:	2301      	movcs	r3, #1
   112f0:	2300      	movcc	r3, #0
   112f2:	45a9      	cmp	r9, r5
   112f4:	d902      	bls.n	112fc <__udivmoddi4+0xdc>
   112f6:	2b00      	cmp	r3, #0
   112f8:	f000 80d9 	beq.w	114ae <__udivmoddi4+0x28e>
   112fc:	f10c 3cff 	add.w	ip, ip, #4294967295
   11300:	eba5 0509 	sub.w	r5, r5, r9
   11304:	b2a3      	uxth	r3, r4
   11306:	fbb5 f0fe 	udiv	r0, r5, lr
   1130a:	fb0e 5510 	mls	r5, lr, r0, r5
   1130e:	fb08 f800 	mul.w	r8, r8, r0
   11312:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   11316:	45a0      	cmp	r8, r4
   11318:	d905      	bls.n	11326 <__udivmoddi4+0x106>
   1131a:	193c      	adds	r4, r7, r4
   1131c:	d202      	bcs.n	11324 <__udivmoddi4+0x104>
   1131e:	45a0      	cmp	r8, r4
   11320:	f200 80c9 	bhi.w	114b6 <__udivmoddi4+0x296>
   11324:	3801      	subs	r0, #1
   11326:	eba4 0408 	sub.w	r4, r4, r8
   1132a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1132e:	e7bd      	b.n	112ac <__udivmoddi4+0x8c>
   11330:	428b      	cmp	r3, r1
   11332:	d908      	bls.n	11346 <__udivmoddi4+0x126>
   11334:	2e00      	cmp	r6, #0
   11336:	f000 80b1 	beq.w	1149c <__udivmoddi4+0x27c>
   1133a:	2100      	movs	r1, #0
   1133c:	e9c6 0500 	strd	r0, r5, [r6]
   11340:	4608      	mov	r0, r1
   11342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11346:	fab3 f183 	clz	r1, r3
   1134a:	2900      	cmp	r1, #0
   1134c:	d146      	bne.n	113dc <__udivmoddi4+0x1bc>
   1134e:	42ab      	cmp	r3, r5
   11350:	f0c0 80a7 	bcc.w	114a2 <__udivmoddi4+0x282>
   11354:	4282      	cmp	r2, r0
   11356:	f240 80a4 	bls.w	114a2 <__udivmoddi4+0x282>
   1135a:	4608      	mov	r0, r1
   1135c:	2e00      	cmp	r6, #0
   1135e:	d0aa      	beq.n	112b6 <__udivmoddi4+0x96>
   11360:	e9c6 4a00 	strd	r4, sl, [r6]
   11364:	e7a7      	b.n	112b6 <__udivmoddi4+0x96>
   11366:	f1c2 0020 	rsb	r0, r2, #32
   1136a:	4097      	lsls	r7, r2
   1136c:	fa01 f302 	lsl.w	r3, r1, r2
   11370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   11374:	40c1      	lsrs	r1, r0
   11376:	fa24 f500 	lsr.w	r5, r4, r0
   1137a:	fa1f f887 	uxth.w	r8, r7
   1137e:	4094      	lsls	r4, r2
   11380:	431d      	orrs	r5, r3
   11382:	fbb1 f0fe 	udiv	r0, r1, lr
   11386:	0c2b      	lsrs	r3, r5, #16
   11388:	fb0e 1110 	mls	r1, lr, r0, r1
   1138c:	fb00 fc08 	mul.w	ip, r0, r8
   11390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   11394:	459c      	cmp	ip, r3
   11396:	d909      	bls.n	113ac <__udivmoddi4+0x18c>
   11398:	18fb      	adds	r3, r7, r3
   1139a:	bf2c      	ite	cs
   1139c:	2101      	movcs	r1, #1
   1139e:	2100      	movcc	r1, #0
   113a0:	459c      	cmp	ip, r3
   113a2:	d902      	bls.n	113aa <__udivmoddi4+0x18a>
   113a4:	2900      	cmp	r1, #0
   113a6:	f000 8095 	beq.w	114d4 <__udivmoddi4+0x2b4>
   113aa:	3801      	subs	r0, #1
   113ac:	eba3 030c 	sub.w	r3, r3, ip
   113b0:	b2ad      	uxth	r5, r5
   113b2:	fbb3 f1fe 	udiv	r1, r3, lr
   113b6:	fb0e 3311 	mls	r3, lr, r1, r3
   113ba:	fb01 fc08 	mul.w	ip, r1, r8
   113be:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   113c2:	45ac      	cmp	ip, r5
   113c4:	d905      	bls.n	113d2 <__udivmoddi4+0x1b2>
   113c6:	197d      	adds	r5, r7, r5
   113c8:	d202      	bcs.n	113d0 <__udivmoddi4+0x1b0>
   113ca:	45ac      	cmp	ip, r5
   113cc:	f200 8089 	bhi.w	114e2 <__udivmoddi4+0x2c2>
   113d0:	3901      	subs	r1, #1
   113d2:	eba5 030c 	sub.w	r3, r5, ip
   113d6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   113da:	e77a      	b.n	112d2 <__udivmoddi4+0xb2>
   113dc:	f1c1 0420 	rsb	r4, r1, #32
   113e0:	408b      	lsls	r3, r1
   113e2:	fa02 f701 	lsl.w	r7, r2, r1
   113e6:	fa05 fc01 	lsl.w	ip, r5, r1
   113ea:	40e2      	lsrs	r2, r4
   113ec:	fa20 f804 	lsr.w	r8, r0, r4
   113f0:	40e5      	lsrs	r5, r4
   113f2:	fa00 fe01 	lsl.w	lr, r0, r1
   113f6:	4313      	orrs	r3, r2
   113f8:	ea48 020c 	orr.w	r2, r8, ip
   113fc:	ea4f 4813 	mov.w	r8, r3, lsr #16
   11400:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   11404:	fa1f f983 	uxth.w	r9, r3
   11408:	fbb5 faf8 	udiv	sl, r5, r8
   1140c:	fb08 551a 	mls	r5, r8, sl, r5
   11410:	fb0a f009 	mul.w	r0, sl, r9
   11414:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   11418:	4560      	cmp	r0, ip
   1141a:	d90a      	bls.n	11432 <__udivmoddi4+0x212>
   1141c:	eb13 0c0c 	adds.w	ip, r3, ip
   11420:	bf2c      	ite	cs
   11422:	2501      	movcs	r5, #1
   11424:	2500      	movcc	r5, #0
   11426:	4560      	cmp	r0, ip
   11428:	d901      	bls.n	1142e <__udivmoddi4+0x20e>
   1142a:	2d00      	cmp	r5, #0
   1142c:	d055      	beq.n	114da <__udivmoddi4+0x2ba>
   1142e:	f10a 3aff 	add.w	sl, sl, #4294967295
   11432:	ebac 0c00 	sub.w	ip, ip, r0
   11436:	b292      	uxth	r2, r2
   11438:	fbbc f0f8 	udiv	r0, ip, r8
   1143c:	fb08 cc10 	mls	ip, r8, r0, ip
   11440:	fb00 f909 	mul.w	r9, r0, r9
   11444:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   11448:	45e1      	cmp	r9, ip
   1144a:	d905      	bls.n	11458 <__udivmoddi4+0x238>
   1144c:	eb13 0c0c 	adds.w	ip, r3, ip
   11450:	d201      	bcs.n	11456 <__udivmoddi4+0x236>
   11452:	45e1      	cmp	r9, ip
   11454:	d83b      	bhi.n	114ce <__udivmoddi4+0x2ae>
   11456:	3801      	subs	r0, #1
   11458:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1145c:	ebac 0c09 	sub.w	ip, ip, r9
   11460:	fba0 8907 	umull	r8, r9, r0, r7
   11464:	45cc      	cmp	ip, r9
   11466:	4645      	mov	r5, r8
   11468:	464a      	mov	r2, r9
   1146a:	d302      	bcc.n	11472 <__udivmoddi4+0x252>
   1146c:	d106      	bne.n	1147c <__udivmoddi4+0x25c>
   1146e:	45c6      	cmp	lr, r8
   11470:	d204      	bcs.n	1147c <__udivmoddi4+0x25c>
   11472:	3801      	subs	r0, #1
   11474:	ebb8 0507 	subs.w	r5, r8, r7
   11478:	eb69 0203 	sbc.w	r2, r9, r3
   1147c:	b32e      	cbz	r6, 114ca <__udivmoddi4+0x2aa>
   1147e:	ebbe 0305 	subs.w	r3, lr, r5
   11482:	eb6c 0c02 	sbc.w	ip, ip, r2
   11486:	fa23 f201 	lsr.w	r2, r3, r1
   1148a:	fa0c f404 	lsl.w	r4, ip, r4
   1148e:	fa2c f301 	lsr.w	r3, ip, r1
   11492:	2100      	movs	r1, #0
   11494:	4314      	orrs	r4, r2
   11496:	e9c6 4300 	strd	r4, r3, [r6]
   1149a:	e70c      	b.n	112b6 <__udivmoddi4+0x96>
   1149c:	4631      	mov	r1, r6
   1149e:	4630      	mov	r0, r6
   114a0:	e709      	b.n	112b6 <__udivmoddi4+0x96>
   114a2:	1a84      	subs	r4, r0, r2
   114a4:	eb65 0303 	sbc.w	r3, r5, r3
   114a8:	2001      	movs	r0, #1
   114aa:	469a      	mov	sl, r3
   114ac:	e756      	b.n	1135c <__udivmoddi4+0x13c>
   114ae:	f1ac 0c02 	sub.w	ip, ip, #2
   114b2:	443d      	add	r5, r7
   114b4:	e724      	b.n	11300 <__udivmoddi4+0xe0>
   114b6:	3802      	subs	r0, #2
   114b8:	443c      	add	r4, r7
   114ba:	e734      	b.n	11326 <__udivmoddi4+0x106>
   114bc:	3802      	subs	r0, #2
   114be:	443c      	add	r4, r7
   114c0:	e6ef      	b.n	112a2 <__udivmoddi4+0x82>
   114c2:	f1ae 0e02 	sub.w	lr, lr, #2
   114c6:	443b      	add	r3, r7
   114c8:	e6d9      	b.n	1127e <__udivmoddi4+0x5e>
   114ca:	4631      	mov	r1, r6
   114cc:	e6f3      	b.n	112b6 <__udivmoddi4+0x96>
   114ce:	3802      	subs	r0, #2
   114d0:	449c      	add	ip, r3
   114d2:	e7c1      	b.n	11458 <__udivmoddi4+0x238>
   114d4:	3802      	subs	r0, #2
   114d6:	443b      	add	r3, r7
   114d8:	e768      	b.n	113ac <__udivmoddi4+0x18c>
   114da:	f1aa 0a02 	sub.w	sl, sl, #2
   114de:	449c      	add	ip, r3
   114e0:	e7a7      	b.n	11432 <__udivmoddi4+0x212>
   114e2:	3902      	subs	r1, #2
   114e4:	443d      	add	r5, r7
   114e6:	e774      	b.n	113d2 <__udivmoddi4+0x1b2>

000114e8 <__aeabi_idiv0>:
   114e8:	4770      	bx	lr
   114ea:	bf00      	nop

000114ec <strcmp>:
   114ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   114f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   114f4:	2a01      	cmp	r2, #1
   114f6:	bf28      	it	cs
   114f8:	429a      	cmpcs	r2, r3
   114fa:	d0f7      	beq.n	114ec <strcmp>
   114fc:	1ad0      	subs	r0, r2, r3
   114fe:	4770      	bx	lr

00011500 <strlen>:
   11500:	4603      	mov	r3, r0
   11502:	f813 2b01 	ldrb.w	r2, [r3], #1
   11506:	2a00      	cmp	r2, #0
   11508:	d1fb      	bne.n	11502 <strlen+0x2>
   1150a:	1a18      	subs	r0, r3, r0
   1150c:	3801      	subs	r0, #1
   1150e:	4770      	bx	lr

00011510 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   11510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11514:	4604      	mov	r4, r0
   11516:	b09b      	sub	sp, #108	; 0x6c
   11518:	460f      	mov	r7, r1
   1151a:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1151c:	2100      	movs	r1, #0
   1151e:	2230      	movs	r2, #48	; 0x30
   11520:	a802      	add	r0, sp, #8
   11522:	f024 f850 	bl	355c6 <memset>
	int ret = 0;

	if (!ctx || !time) {
   11526:	2c00      	cmp	r4, #0
   11528:	f000 8087 	beq.w	1163a <sntp_query+0x12a>
   1152c:	2e00      	cmp	r6, #0
   1152e:	f000 8084 	beq.w	1163a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   11532:	231b      	movs	r3, #27
   11534:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   11538:	f023 ff49 	bl	353ce <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11540:	2500      	movs	r5, #0
   11542:	fba0 8903 	umull	r8, r9, r0, r3
   11546:	fb03 9901 	mla	r9, r3, r1, r9
   1154a:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   1154e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11552:	2300      	movs	r3, #0
   11554:	4629      	mov	r1, r5
   11556:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   1155a:	f7ff fe49 	bl	111f0 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1155e:	4a3c      	ldr	r2, [pc, #240]	; (11650 <sntp_query+0x140>)
   11560:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   11562:	0a13      	lsrs	r3, r2, #8
   11564:	0211      	lsls	r1, r2, #8
   11566:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1156a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1156e:	430b      	orrs	r3, r1
   11570:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   11574:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   11578:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1157a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1157c:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1157e:	2230      	movs	r2, #48	; 0x30
   11580:	462b      	mov	r3, r5
   11582:	e9cd 5500 	strd	r5, r5, [sp]
   11586:	a902      	add	r1, sp, #8
   11588:	f01d fa39 	bl	2e9fe <z_impl_zsock_sendto>
	if (ret < 0) {
   1158c:	2800      	cmp	r0, #0
   1158e:	db0f      	blt.n	115b0 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   11590:	4629      	mov	r1, r5
   11592:	2230      	movs	r2, #48	; 0x30
   11594:	a80e      	add	r0, sp, #56	; 0x38
   11596:	f024 f816 	bl	355c6 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1159a:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1159c:	463a      	mov	r2, r7
   1159e:	4620      	mov	r0, r4
   115a0:	f004 f856 	bl	15650 <z_impl_zsock_poll>
	if (status < 0) {
   115a4:	42a8      	cmp	r0, r5
   115a6:	da06      	bge.n	115b6 <sntp_query+0xa6>
		return -errno;
   115a8:	f01e ff84 	bl	304b4 <__errno>
   115ac:	6800      	ldr	r0, [r0, #0]
   115ae:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   115b0:	b01b      	add	sp, #108	; 0x6c
   115b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   115b6:	d037      	beq.n	11628 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   115b8:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   115ba:	2230      	movs	r2, #48	; 0x30
   115bc:	462b      	mov	r3, r5
   115be:	e9cd 5500 	strd	r5, r5, [sp]
   115c2:	a90e      	add	r1, sp, #56	; 0x38
   115c4:	f01d fa72 	bl	2eaac <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   115c8:	2800      	cmp	r0, #0
   115ca:	dbed      	blt.n	115a8 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   115cc:	2830      	cmp	r0, #48	; 0x30
   115ce:	d12e      	bne.n	1162e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   115d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   115d2:	6922      	ldr	r2, [r4, #16]
   115d4:	ba1b      	rev	r3, r3
   115d6:	429a      	cmp	r2, r3
   115d8:	d002      	beq.n	115e0 <sntp_query+0xd0>
		return -EINVAL;
   115da:	f06f 0015 	mvn.w	r0, #21
   115de:	e7e7      	b.n	115b0 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   115e0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   115e4:	f003 0307 	and.w	r3, r3, #7
   115e8:	2b04      	cmp	r3, #4
   115ea:	d1f6      	bne.n	115da <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   115ec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   115f0:	b303      	cbz	r3, 11634 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   115f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   115f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   115f6:	ba1b      	rev	r3, r3
   115f8:	ba12      	rev	r2, r2
   115fa:	ea53 0102 	orrs.w	r1, r3, r2
   115fe:	d0ec      	beq.n	115da <sntp_query+0xca>
	if (ts & 0x80000000) {
   11600:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   11602:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   11604:	da0c      	bge.n	11620 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   11606:	4a13      	ldr	r2, [pc, #76]	; (11654 <sntp_query+0x144>)
   11608:	4293      	cmp	r3, r2
   1160a:	d9e6      	bls.n	115da <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1160c:	a10c      	add	r1, pc, #48	; (adr r1, 11640 <sntp_query+0x130>)
   1160e:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   11612:	18c0      	adds	r0, r0, r3
   11614:	f141 0100 	adc.w	r1, r1, #0
   11618:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
   1161c:	2000      	movs	r0, #0
   1161e:	e7c7      	b.n	115b0 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   11620:	a109      	add	r1, pc, #36	; (adr r1, 11648 <sntp_query+0x138>)
   11622:	e9d1 0100 	ldrd	r0, r1, [r1]
   11626:	e7f4      	b.n	11612 <sntp_query+0x102>
		return -ETIMEDOUT;
   11628:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1162c:	e7c0      	b.n	115b0 <sntp_query+0xa0>
		return -EMSGSIZE;
   1162e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   11632:	e7bd      	b.n	115b0 <sntp_query+0xa0>
		return -EBUSY;
   11634:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   11638:	e7ba      	b.n	115b0 <sntp_query+0xa0>
		return -EFAULT;
   1163a:	f06f 000d 	mvn.w	r0, #13
   1163e:	e7b7      	b.n	115b0 <sntp_query+0xa0>
   11640:	7c558180 	.word	0x7c558180
   11644:	ffffffff 	.word	0xffffffff
   11648:	7c558180 	.word	0x7c558180
   1164c:	00000000 	.word	0x00000000
   11650:	83aa7e80 	.word	0x83aa7e80
   11654:	83aa7e7f 	.word	0x83aa7e7f

00011658 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   11658:	2300      	movs	r3, #0
{
   1165a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1165e:	b08c      	sub	sp, #48	; 0x30
	struct at_param_list resp_list = {0};
   11660:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   11664:	2304      	movs	r3, #4
{
   11666:	460e      	mov	r6, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   11668:	4607      	mov	r7, r0
	size_t len = sizeof(tmp_buf) - 1;
   1166a:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   1166c:	2800      	cmp	r0, #0
   1166e:	f000 80e8 	beq.w	11842 <parse_edrx+0x1ea>
   11672:	2900      	cmp	r1, #0
   11674:	f000 80e5 	beq.w	11842 <parse_edrx+0x1ea>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   11678:	2106      	movs	r1, #6
   1167a:	a804      	add	r0, sp, #16
   1167c:	f022 f8fa 	bl	33874 <at_params_list_init>
	if (err) {
   11680:	4d73      	ldr	r5, [pc, #460]	; (11850 <parse_edrx+0x1f8>)
   11682:	4b74      	ldr	r3, [pc, #464]	; (11854 <parse_edrx+0x1fc>)
   11684:	4604      	mov	r4, r0
   11686:	1aed      	subs	r5, r5, r3
   11688:	08ed      	lsrs	r5, r5, #3
   1168a:	01ad      	lsls	r5, r5, #6
   1168c:	b148      	cbz	r0, 116a2 <parse_edrx+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1168e:	4601      	mov	r1, r0
   11690:	f045 0201 	orr.w	r2, r5, #1
   11694:	4870      	ldr	r0, [pc, #448]	; (11858 <parse_edrx+0x200>)
   11696:	f01c feb8 	bl	2e40a <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1169a:	4620      	mov	r0, r4
   1169c:	b00c      	add	sp, #48	; 0x30
   1169e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   116a2:	4601      	mov	r1, r0
   116a4:	aa04      	add	r2, sp, #16
   116a6:	4638      	mov	r0, r7
   116a8:	f022 f8e1 	bl	3386e <at_parser_params_from_str>
	if (err) {
   116ac:	4604      	mov	r4, r0
   116ae:	b148      	cbz	r0, 116c4 <parse_edrx+0x6c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   116b0:	4601      	mov	r1, r0
   116b2:	486a      	ldr	r0, [pc, #424]	; (1185c <parse_edrx+0x204>)
   116b4:	f045 0201 	orr.w	r2, r5, #1
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   116b8:	f01c fea7 	bl	2e40a <log_1>
	at_params_list_free(&resp_list);
   116bc:	a804      	add	r0, sp, #16
   116be:	f022 f8ec 	bl	3389a <at_params_list_free>
	return err;
   116c2:	e7ea      	b.n	1169a <parse_edrx+0x42>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   116c4:	2103      	movs	r1, #3
   116c6:	ab01      	add	r3, sp, #4
   116c8:	aa02      	add	r2, sp, #8
   116ca:	a804      	add	r0, sp, #16
   116cc:	f022 f9e0 	bl	33a90 <at_params_string_get>
	if (err) {
   116d0:	4604      	mov	r4, r0
   116d2:	b120      	cbz	r0, 116de <parse_edrx+0x86>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   116d4:	4601      	mov	r1, r0
   116d6:	f045 0201 	orr.w	r2, r5, #1
   116da:	4861      	ldr	r0, [pc, #388]	; (11860 <parse_edrx+0x208>)
   116dc:	e7ec      	b.n	116b8 <parse_edrx+0x60>
	tmp_buf[len] = '\0';
   116de:	9b01      	ldr	r3, [sp, #4]
   116e0:	aa0c      	add	r2, sp, #48	; 0x30
   116e2:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   116e4:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   116e6:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   116ea:	2202      	movs	r2, #2
   116ec:	a802      	add	r0, sp, #8
   116ee:	f01c f95d 	bl	2d9ac <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   116f2:	466a      	mov	r2, sp
	idx = strtoul(tmp_buf, NULL, 2);
   116f4:	4680      	mov	r8, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   116f6:	2101      	movs	r1, #1
   116f8:	a804      	add	r0, sp, #16
   116fa:	f022 f992 	bl	33a22 <at_params_int_get>
	if (err) {
   116fe:	4604      	mov	r4, r0
   11700:	b120      	cbz	r0, 1170c <parse_edrx+0xb4>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   11702:	4601      	mov	r1, r0
   11704:	f045 0201 	orr.w	r2, r5, #1
   11708:	4856      	ldr	r0, [pc, #344]	; (11864 <parse_edrx+0x20c>)
   1170a:	e7d5      	b.n	116b8 <parse_edrx+0x60>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1170c:	9b00      	ldr	r3, [sp, #0]
   1170e:	2b04      	cmp	r3, #4
   11710:	d01e      	beq.n	11750 <parse_edrx+0xf8>
   11712:	2b05      	cmp	r3, #5
   11714:	d008      	beq.n	11728 <parse_edrx+0xd0>
   11716:	7030      	strb	r0, [r6, #0]
		LOG_WRN("Active LTE mode could not be determined");
   11718:	f045 0102 	orr.w	r1, r5, #2
   1171c:	4852      	ldr	r0, [pc, #328]	; (11868 <parse_edrx+0x210>)
   1171e:	f01c fe67 	bl	2e3f0 <log_0>
		return -ENOTCONN;
   11722:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   11726:	e7c9      	b.n	116bc <parse_edrx+0x64>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11728:	2309      	movs	r3, #9
		*ptw_multiplier = 2.56;
   1172a:	4f50      	ldr	r7, [pc, #320]	; (1186c <parse_edrx+0x214>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1172c:	7033      	strb	r3, [r6, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1172e:	1d32      	adds	r2, r6, #4
   11730:	d033      	beq.n	1179a <parse_edrx+0x142>
   11732:	fa5f f088 	uxtb.w	r0, r8
   11736:	280f      	cmp	r0, #15
   11738:	d82f      	bhi.n	1179a <parse_edrx+0x142>
	switch (lte_mode) {
   1173a:	2b07      	cmp	r3, #7
   1173c:	d00c      	beq.n	11758 <parse_edrx+0x100>
   1173e:	2b09      	cmp	r3, #9
   11740:	d027      	beq.n	11792 <parse_edrx+0x13a>
   11742:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   11746:	4621      	mov	r1, r4
   11748:	4849      	ldr	r0, [pc, #292]	; (11870 <parse_edrx+0x218>)
   1174a:	f045 0201 	orr.w	r2, r5, #1
   1174e:	e7b3      	b.n	116b8 <parse_edrx+0x60>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11750:	2307      	movs	r3, #7
		*ptw_multiplier = 1.28;
   11752:	4f48      	ldr	r7, [pc, #288]	; (11874 <parse_edrx+0x21c>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   11754:	7033      	strb	r3, [r6, #0]
	if (err) {
   11756:	e7ea      	b.n	1172e <parse_edrx+0xd6>
		multiplier = edrx_lookup_ltem[idx];
   11758:	4b47      	ldr	r3, [pc, #284]	; (11878 <parse_edrx+0x220>)
		multiplier = edrx_lookup_nbiot[idx];
   1175a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1175e:	b1d0      	cbz	r0, 11796 <parse_edrx+0x13e>
   11760:	f7fe fec0 	bl	104e4 <__aeabi_i2d>
   11764:	a338      	add	r3, pc, #224	; (adr r3, 11848 <parse_edrx+0x1f0>)
   11766:	e9d3 2300 	ldrd	r2, r3, [r3]
   1176a:	f7fe ff25 	bl	105b8 <__aeabi_dmul>
   1176e:	f7ff f9fb 	bl	10b68 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   11772:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11774:	6070      	str	r0, [r6, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   11776:	eb0d 0301 	add.w	r3, sp, r1
   1177a:	aa02      	add	r2, sp, #8
   1177c:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   1177e:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   11780:	f022 f986 	bl	33a90 <at_params_string_get>
	if (err) {
   11784:	4604      	mov	r4, r0
   11786:	b158      	cbz	r0, 117a0 <parse_edrx+0x148>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   11788:	4601      	mov	r1, r0
   1178a:	f045 0201 	orr.w	r2, r5, #1
   1178e:	483b      	ldr	r0, [pc, #236]	; (1187c <parse_edrx+0x224>)
   11790:	e792      	b.n	116b8 <parse_edrx+0x60>
		multiplier = edrx_lookup_nbiot[idx];
   11792:	4b3b      	ldr	r3, [pc, #236]	; (11880 <parse_edrx+0x228>)
   11794:	e7e1      	b.n	1175a <parse_edrx+0x102>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11796:	483b      	ldr	r0, [pc, #236]	; (11884 <parse_edrx+0x22c>)
   11798:	e7eb      	b.n	11772 <parse_edrx+0x11a>
		return -EINVAL;
   1179a:	f06f 0415 	mvn.w	r4, #21
   1179e:	e7d2      	b.n	11746 <parse_edrx+0xee>
	tmp_buf[len] = '\0';
   117a0:	9b01      	ldr	r3, [sp, #4]
   117a2:	aa0c      	add	r2, sp, #48	; 0x30
   117a4:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   117a6:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   117a8:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
   117ac:	2202      	movs	r2, #2
   117ae:	a802      	add	r0, sp, #8
   117b0:	f01c f8fc 	bl	2d9ac <strtoul>
	if (idx > 15) {
   117b4:	b2c1      	uxtb	r1, r0
   117b6:	290f      	cmp	r1, #15
   117b8:	d907      	bls.n	117ca <parse_edrx+0x172>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   117ba:	4833      	ldr	r0, [pc, #204]	; (11888 <parse_edrx+0x230>)
   117bc:	f045 0201 	orr.w	r2, r5, #1
   117c0:	f01c fe23 	bl	2e40a <log_1>
		err = -EINVAL;
   117c4:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   117c8:	e778      	b.n	116bc <parse_edrx+0x64>
	idx += 1;
   117ca:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   117cc:	b2c0      	uxtb	r0, r0
   117ce:	f7ff fad5 	bl	10d7c <__aeabi_i2f>
   117d2:	4639      	mov	r1, r7
   117d4:	f7ff fb26 	bl	10e24 <__aeabi_fmul>
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   117d8:	4b2c      	ldr	r3, [pc, #176]	; (1188c <parse_edrx+0x234>)
   117da:	7831      	ldrb	r1, [r6, #0]
   117dc:	9306      	str	r3, [sp, #24]
   117de:	4a2c      	ldr	r2, [pc, #176]	; (11890 <parse_edrx+0x238>)
   117e0:	4b2c      	ldr	r3, [pc, #176]	; (11894 <parse_edrx+0x23c>)
	cfg->ptw = idx * ptw_multiplier;
   117e2:	60b0      	str	r0, [r6, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   117e4:	2907      	cmp	r1, #7
   117e6:	bf08      	it	eq
   117e8:	461a      	moveq	r2, r3
   117ea:	6876      	ldr	r6, [r6, #4]
	cfg->ptw = idx * ptw_multiplier;
   117ec:	4607      	mov	r7, r0
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   117ee:	4630      	mov	r0, r6
   117f0:	9207      	str	r2, [sp, #28]
   117f2:	f7ff fc67 	bl	110c4 <__aeabi_f2iz>
   117f6:	9008      	str	r0, [sp, #32]
   117f8:	f7ff fac0 	bl	10d7c <__aeabi_i2f>
   117fc:	4601      	mov	r1, r0
   117fe:	4630      	mov	r0, r6
   11800:	f7ff fa06 	bl	10c10 <__aeabi_fsub>
   11804:	4924      	ldr	r1, [pc, #144]	; (11898 <parse_edrx+0x240>)
   11806:	f7ff fb0d 	bl	10e24 <__aeabi_fmul>
   1180a:	f7ff fc5b 	bl	110c4 <__aeabi_f2iz>
   1180e:	9009      	str	r0, [sp, #36]	; 0x24
   11810:	4638      	mov	r0, r7
   11812:	f7ff fc57 	bl	110c4 <__aeabi_f2iz>
   11816:	900a      	str	r0, [sp, #40]	; 0x28
   11818:	f7ff fab0 	bl	10d7c <__aeabi_i2f>
   1181c:	4601      	mov	r1, r0
   1181e:	4638      	mov	r0, r7
   11820:	f7ff f9f6 	bl	10c10 <__aeabi_fsub>
   11824:	491c      	ldr	r1, [pc, #112]	; (11898 <parse_edrx+0x240>)
   11826:	f7ff fafd 	bl	10e24 <__aeabi_fmul>
   1182a:	f7ff fc4b 	bl	110c4 <__aeabi_f2iz>
   1182e:	f045 0504 	orr.w	r5, r5, #4
   11832:	900b      	str	r0, [sp, #44]	; 0x2c
   11834:	462b      	mov	r3, r5
   11836:	2206      	movs	r2, #6
   11838:	4818      	ldr	r0, [pc, #96]	; (1189c <parse_edrx+0x244>)
   1183a:	a906      	add	r1, sp, #24
   1183c:	f01c fe2e 	bl	2e49c <log_n>
clean_exit:
   11840:	e73c      	b.n	116bc <parse_edrx+0x64>
		return -EINVAL;
   11842:	f06f 0415 	mvn.w	r4, #21
   11846:	e728      	b.n	1169a <parse_edrx+0x42>
   11848:	47ae147b 	.word	0x47ae147b
   1184c:	40247ae1 	.word	0x40247ae1
   11850:	00036580 	.word	0x00036580
   11854:	000364b0 	.word	0x000364b0
   11858:	0003c194 	.word	0x0003c194
   1185c:	0003c1bd 	.word	0x0003c1bd
   11860:	0003c1e9 	.word	0x0003c1e9
   11864:	0003c215 	.word	0x0003c215
   11868:	0003c237 	.word	0x0003c237
   1186c:	4023d70a 	.word	0x4023d70a
   11870:	0003c25f 	.word	0x0003c25f
   11874:	3fa3d70a 	.word	0x3fa3d70a
   11878:	00037358 	.word	0x00037358
   1187c:	0003c283 	.word	0x0003c283
   11880:	00037378 	.word	0x00037378
   11884:	40a3d70a 	.word	0x40a3d70a
   11888:	0003c2ae 	.word	0x0003c2ae
   1188c:	0003c71d 	.word	0x0003c71d
   11890:	0003c2d1 	.word	0x0003c2d1
   11894:	0003c2cb 	.word	0x0003c2cb
   11898:	42c80000 	.word	0x42c80000
   1189c:	0003c2d8 	.word	0x0003c2d8

000118a0 <_dtoa_r>:
   118a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a4:	4616      	mov	r6, r2
   118a6:	b099      	sub	sp, #100	; 0x64
   118a8:	461f      	mov	r7, r3
   118aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
   118ac:	4605      	mov	r5, r0
   118ae:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
   118b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   118b6:	b93c      	cbnz	r4, 118c8 <_dtoa_r+0x28>
   118b8:	2010      	movs	r0, #16
   118ba:	f01b f8a7 	bl	2ca0c <malloc>
   118be:	6268      	str	r0, [r5, #36]	; 0x24
   118c0:	6004      	str	r4, [r0, #0]
   118c2:	60c4      	str	r4, [r0, #12]
   118c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   118c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   118ca:	6819      	ldr	r1, [r3, #0]
   118cc:	b151      	cbz	r1, 118e4 <_dtoa_r+0x44>
   118ce:	685a      	ldr	r2, [r3, #4]
   118d0:	2301      	movs	r3, #1
   118d2:	4628      	mov	r0, r5
   118d4:	4093      	lsls	r3, r2
   118d6:	604a      	str	r2, [r1, #4]
   118d8:	608b      	str	r3, [r1, #8]
   118da:	f024 f905 	bl	35ae8 <_Bfree>
   118de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   118e0:	2200      	movs	r2, #0
   118e2:	601a      	str	r2, [r3, #0]
   118e4:	1e3b      	subs	r3, r7, #0
   118e6:	bfb7      	itett	lt
   118e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   118ec:	2300      	movge	r3, #0
   118ee:	2201      	movlt	r2, #1
   118f0:	9305      	strlt	r3, [sp, #20]
   118f2:	bfa8      	it	ge
   118f4:	f8c8 3000 	strge.w	r3, [r8]
   118f8:	f8dd 9014 	ldr.w	r9, [sp, #20]
   118fc:	4bac      	ldr	r3, [pc, #688]	; (11bb0 <_dtoa_r+0x310>)
   118fe:	bfb8      	it	lt
   11900:	f8c8 2000 	strlt.w	r2, [r8]
   11904:	ea33 0309 	bics.w	r3, r3, r9
   11908:	d119      	bne.n	1193e <_dtoa_r+0x9e>
   1190a:	f242 730f 	movw	r3, #9999	; 0x270f
   1190e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11910:	6013      	str	r3, [r2, #0]
   11912:	f3c9 0313 	ubfx	r3, r9, #0, #20
   11916:	4333      	orrs	r3, r6
   11918:	f000 856a 	beq.w	123f0 <_dtoa_r+0xb50>
   1191c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1191e:	b953      	cbnz	r3, 11936 <_dtoa_r+0x96>
   11920:	4ba4      	ldr	r3, [pc, #656]	; (11bb4 <_dtoa_r+0x314>)
   11922:	e023      	b.n	1196c <_dtoa_r+0xcc>
   11924:	4ba4      	ldr	r3, [pc, #656]	; (11bb8 <_dtoa_r+0x318>)
   11926:	9303      	str	r3, [sp, #12]
   11928:	3308      	adds	r3, #8
   1192a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1192c:	6013      	str	r3, [r2, #0]
   1192e:	9803      	ldr	r0, [sp, #12]
   11930:	b019      	add	sp, #100	; 0x64
   11932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11936:	4b9f      	ldr	r3, [pc, #636]	; (11bb4 <_dtoa_r+0x314>)
   11938:	9303      	str	r3, [sp, #12]
   1193a:	3303      	adds	r3, #3
   1193c:	e7f5      	b.n	1192a <_dtoa_r+0x8a>
   1193e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11942:	2200      	movs	r2, #0
   11944:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   11948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1194c:	2300      	movs	r3, #0
   1194e:	f7ff f89b 	bl	10a88 <__aeabi_dcmpeq>
   11952:	4680      	mov	r8, r0
   11954:	b160      	cbz	r0, 11970 <_dtoa_r+0xd0>
   11956:	2301      	movs	r3, #1
   11958:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1195a:	6013      	str	r3, [r2, #0]
   1195c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1195e:	2b00      	cmp	r3, #0
   11960:	f000 8543 	beq.w	123ea <_dtoa_r+0xb4a>
   11964:	4b95      	ldr	r3, [pc, #596]	; (11bbc <_dtoa_r+0x31c>)
   11966:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11968:	6013      	str	r3, [r2, #0]
   1196a:	3b01      	subs	r3, #1
   1196c:	9303      	str	r3, [sp, #12]
   1196e:	e7de      	b.n	1192e <_dtoa_r+0x8e>
   11970:	ab16      	add	r3, sp, #88	; 0x58
   11972:	f3c9 540a 	ubfx	r4, r9, #20, #11
   11976:	4628      	mov	r0, r5
   11978:	9301      	str	r3, [sp, #4]
   1197a:	ab17      	add	r3, sp, #92	; 0x5c
   1197c:	9300      	str	r3, [sp, #0]
   1197e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   11982:	f024 faf0 	bl	35f66 <__d2b>
   11986:	4683      	mov	fp, r0
   11988:	2c00      	cmp	r4, #0
   1198a:	d07c      	beq.n	11a86 <_dtoa_r+0x1e6>
   1198c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1198e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
   11992:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   11996:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1199a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1199e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   119a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   119a6:	2200      	movs	r2, #0
   119a8:	4b85      	ldr	r3, [pc, #532]	; (11bc0 <_dtoa_r+0x320>)
   119aa:	f7fe fc4d 	bl	10248 <__aeabi_dsub>
   119ae:	a37a      	add	r3, pc, #488	; (adr r3, 11b98 <_dtoa_r+0x2f8>)
   119b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   119b4:	f7fe fe00 	bl	105b8 <__aeabi_dmul>
   119b8:	a379      	add	r3, pc, #484	; (adr r3, 11ba0 <_dtoa_r+0x300>)
   119ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   119be:	f7fe fc45 	bl	1024c <__adddf3>
   119c2:	4606      	mov	r6, r0
   119c4:	460f      	mov	r7, r1
   119c6:	4620      	mov	r0, r4
   119c8:	f7fe fd8c 	bl	104e4 <__aeabi_i2d>
   119cc:	a376      	add	r3, pc, #472	; (adr r3, 11ba8 <_dtoa_r+0x308>)
   119ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   119d2:	f7fe fdf1 	bl	105b8 <__aeabi_dmul>
   119d6:	4602      	mov	r2, r0
   119d8:	460b      	mov	r3, r1
   119da:	4630      	mov	r0, r6
   119dc:	4639      	mov	r1, r7
   119de:	f7fe fc35 	bl	1024c <__adddf3>
   119e2:	4606      	mov	r6, r0
   119e4:	460f      	mov	r7, r1
   119e6:	f7ff f897 	bl	10b18 <__aeabi_d2iz>
   119ea:	2200      	movs	r2, #0
   119ec:	4682      	mov	sl, r0
   119ee:	2300      	movs	r3, #0
   119f0:	4630      	mov	r0, r6
   119f2:	4639      	mov	r1, r7
   119f4:	f7ff f852 	bl	10a9c <__aeabi_dcmplt>
   119f8:	b148      	cbz	r0, 11a0e <_dtoa_r+0x16e>
   119fa:	4650      	mov	r0, sl
   119fc:	f7fe fd72 	bl	104e4 <__aeabi_i2d>
   11a00:	4632      	mov	r2, r6
   11a02:	463b      	mov	r3, r7
   11a04:	f7ff f840 	bl	10a88 <__aeabi_dcmpeq>
   11a08:	b908      	cbnz	r0, 11a0e <_dtoa_r+0x16e>
   11a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
   11a0e:	f1ba 0f16 	cmp.w	sl, #22
   11a12:	d856      	bhi.n	11ac2 <_dtoa_r+0x222>
   11a14:	4b6b      	ldr	r3, [pc, #428]	; (11bc4 <_dtoa_r+0x324>)
   11a16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   11a1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a22:	f7ff f83b 	bl	10a9c <__aeabi_dcmplt>
   11a26:	2800      	cmp	r0, #0
   11a28:	d04d      	beq.n	11ac6 <_dtoa_r+0x226>
   11a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
   11a2e:	2300      	movs	r3, #0
   11a30:	930f      	str	r3, [sp, #60]	; 0x3c
   11a32:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11a34:	1b1c      	subs	r4, r3, r4
   11a36:	1e63      	subs	r3, r4, #1
   11a38:	9309      	str	r3, [sp, #36]	; 0x24
   11a3a:	bf49      	itett	mi
   11a3c:	f1c4 0301 	rsbmi	r3, r4, #1
   11a40:	2300      	movpl	r3, #0
   11a42:	9306      	strmi	r3, [sp, #24]
   11a44:	2300      	movmi	r3, #0
   11a46:	bf54      	ite	pl
   11a48:	9306      	strpl	r3, [sp, #24]
   11a4a:	9309      	strmi	r3, [sp, #36]	; 0x24
   11a4c:	f1ba 0f00 	cmp.w	sl, #0
   11a50:	db3b      	blt.n	11aca <_dtoa_r+0x22a>
   11a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a54:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   11a58:	4453      	add	r3, sl
   11a5a:	9309      	str	r3, [sp, #36]	; 0x24
   11a5c:	2300      	movs	r3, #0
   11a5e:	930a      	str	r3, [sp, #40]	; 0x28
   11a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a62:	2b09      	cmp	r3, #9
   11a64:	f200 80b4 	bhi.w	11bd0 <_dtoa_r+0x330>
   11a68:	2b05      	cmp	r3, #5
   11a6a:	bfc5      	ittet	gt
   11a6c:	3b04      	subgt	r3, #4
   11a6e:	2400      	movgt	r4, #0
   11a70:	2401      	movle	r4, #1
   11a72:	9322      	strgt	r3, [sp, #136]	; 0x88
   11a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a76:	3b02      	subs	r3, #2
   11a78:	2b03      	cmp	r3, #3
   11a7a:	f200 80b5 	bhi.w	11be8 <_dtoa_r+0x348>
   11a7e:	e8df f003 	tbb	[pc, r3]
   11a82:	7d2e      	.short	0x7d2e
   11a84:	a57b      	.short	0xa57b
   11a86:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
   11a8a:	441c      	add	r4, r3
   11a8c:	f204 4332 	addw	r3, r4, #1074	; 0x432
   11a90:	2b20      	cmp	r3, #32
   11a92:	bfc6      	itte	gt
   11a94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   11a98:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
   11a9c:	f1c3 0320 	rsble	r3, r3, #32
   11aa0:	f104 34ff 	add.w	r4, r4, #4294967295
   11aa4:	bfc5      	ittet	gt
   11aa6:	fa09 f303 	lslgt.w	r3, r9, r3
   11aaa:	fa26 f000 	lsrgt.w	r0, r6, r0
   11aae:	fa06 f003 	lslle.w	r0, r6, r3
   11ab2:	4318      	orrgt	r0, r3
   11ab4:	f7fe fd06 	bl	104c4 <__aeabi_ui2d>
   11ab8:	2301      	movs	r3, #1
   11aba:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   11abe:	9313      	str	r3, [sp, #76]	; 0x4c
   11ac0:	e771      	b.n	119a6 <_dtoa_r+0x106>
   11ac2:	2301      	movs	r3, #1
   11ac4:	e7b4      	b.n	11a30 <_dtoa_r+0x190>
   11ac6:	900f      	str	r0, [sp, #60]	; 0x3c
   11ac8:	e7b3      	b.n	11a32 <_dtoa_r+0x192>
   11aca:	9b06      	ldr	r3, [sp, #24]
   11acc:	eba3 030a 	sub.w	r3, r3, sl
   11ad0:	9306      	str	r3, [sp, #24]
   11ad2:	f1ca 0300 	rsb	r3, sl, #0
   11ad6:	930a      	str	r3, [sp, #40]	; 0x28
   11ad8:	2300      	movs	r3, #0
   11ada:	930e      	str	r3, [sp, #56]	; 0x38
   11adc:	e7c0      	b.n	11a60 <_dtoa_r+0x1c0>
   11ade:	2300      	movs	r3, #0
   11ae0:	930b      	str	r3, [sp, #44]	; 0x2c
   11ae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11ae4:	2b00      	cmp	r3, #0
   11ae6:	f300 8082 	bgt.w	11bee <_dtoa_r+0x34e>
   11aea:	f04f 0901 	mov.w	r9, #1
   11aee:	464b      	mov	r3, r9
   11af0:	f8cd 9020 	str.w	r9, [sp, #32]
   11af4:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   11af8:	2200      	movs	r2, #0
   11afa:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   11afc:	6072      	str	r2, [r6, #4]
   11afe:	2204      	movs	r2, #4
   11b00:	f102 0014 	add.w	r0, r2, #20
   11b04:	6871      	ldr	r1, [r6, #4]
   11b06:	4298      	cmp	r0, r3
   11b08:	d977      	bls.n	11bfa <_dtoa_r+0x35a>
   11b0a:	4628      	mov	r0, r5
   11b0c:	f023 ffb8 	bl	35a80 <_Balloc>
   11b10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11b12:	6030      	str	r0, [r6, #0]
   11b14:	681b      	ldr	r3, [r3, #0]
   11b16:	9303      	str	r3, [sp, #12]
   11b18:	9b08      	ldr	r3, [sp, #32]
   11b1a:	2b0e      	cmp	r3, #14
   11b1c:	f200 80ee 	bhi.w	11cfc <_dtoa_r+0x45c>
   11b20:	2c00      	cmp	r4, #0
   11b22:	f000 80eb 	beq.w	11cfc <_dtoa_r+0x45c>
   11b26:	f1ba 0f00 	cmp.w	sl, #0
   11b2a:	dd7a      	ble.n	11c22 <_dtoa_r+0x382>
   11b2c:	f00a 030f 	and.w	r3, sl, #15
   11b30:	4a24      	ldr	r2, [pc, #144]	; (11bc4 <_dtoa_r+0x324>)
   11b32:	f41a 7f80 	tst.w	sl, #256	; 0x100
   11b36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11b3a:	e9d3 3400 	ldrd	r3, r4, [r3]
   11b3e:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   11b42:	ea4f 142a 	mov.w	r4, sl, asr #4
   11b46:	d05c      	beq.n	11c02 <_dtoa_r+0x362>
   11b48:	4b1f      	ldr	r3, [pc, #124]	; (11bc8 <_dtoa_r+0x328>)
   11b4a:	f004 040f 	and.w	r4, r4, #15
   11b4e:	2703      	movs	r7, #3
   11b50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   11b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11b58:	f7fe fe58 	bl	1080c <__aeabi_ddiv>
   11b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11b60:	4e19      	ldr	r6, [pc, #100]	; (11bc8 <_dtoa_r+0x328>)
   11b62:	2c00      	cmp	r4, #0
   11b64:	d14f      	bne.n	11c06 <_dtoa_r+0x366>
   11b66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11b6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11b6e:	f7fe fe4d 	bl	1080c <__aeabi_ddiv>
   11b72:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11b76:	e06e      	b.n	11c56 <_dtoa_r+0x3b6>
   11b78:	2301      	movs	r3, #1
   11b7a:	e7b1      	b.n	11ae0 <_dtoa_r+0x240>
   11b7c:	2300      	movs	r3, #0
   11b7e:	930b      	str	r3, [sp, #44]	; 0x2c
   11b80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11b82:	eb0a 0903 	add.w	r9, sl, r3
   11b86:	f109 0301 	add.w	r3, r9, #1
   11b8a:	2b01      	cmp	r3, #1
   11b8c:	9308      	str	r3, [sp, #32]
   11b8e:	bfb8      	it	lt
   11b90:	2301      	movlt	r3, #1
   11b92:	e7b1      	b.n	11af8 <_dtoa_r+0x258>
   11b94:	f3af 8000 	nop.w
   11b98:	636f4361 	.word	0x636f4361
   11b9c:	3fd287a7 	.word	0x3fd287a7
   11ba0:	8b60c8b3 	.word	0x8b60c8b3
   11ba4:	3fc68a28 	.word	0x3fc68a28
   11ba8:	509f79fb 	.word	0x509f79fb
   11bac:	3fd34413 	.word	0x3fd34413
   11bb0:	7ff00000 	.word	0x7ff00000
   11bb4:	0003f08e 	.word	0x0003f08e
   11bb8:	0003f085 	.word	0x0003f085
   11bbc:	0003e846 	.word	0x0003e846
   11bc0:	3ff80000 	.word	0x3ff80000
   11bc4:	00036700 	.word	0x00036700
   11bc8:	000366d8 	.word	0x000366d8
   11bcc:	2301      	movs	r3, #1
   11bce:	e7d6      	b.n	11b7e <_dtoa_r+0x2de>
   11bd0:	2401      	movs	r4, #1
   11bd2:	2300      	movs	r3, #0
   11bd4:	940b      	str	r4, [sp, #44]	; 0x2c
   11bd6:	9322      	str	r3, [sp, #136]	; 0x88
   11bd8:	f04f 39ff 	mov.w	r9, #4294967295
   11bdc:	2200      	movs	r2, #0
   11bde:	2312      	movs	r3, #18
   11be0:	f8cd 9020 	str.w	r9, [sp, #32]
   11be4:	9223      	str	r2, [sp, #140]	; 0x8c
   11be6:	e787      	b.n	11af8 <_dtoa_r+0x258>
   11be8:	2301      	movs	r3, #1
   11bea:	930b      	str	r3, [sp, #44]	; 0x2c
   11bec:	e7f4      	b.n	11bd8 <_dtoa_r+0x338>
   11bee:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
   11bf2:	464b      	mov	r3, r9
   11bf4:	f8cd 9020 	str.w	r9, [sp, #32]
   11bf8:	e77e      	b.n	11af8 <_dtoa_r+0x258>
   11bfa:	3101      	adds	r1, #1
   11bfc:	0052      	lsls	r2, r2, #1
   11bfe:	6071      	str	r1, [r6, #4]
   11c00:	e77e      	b.n	11b00 <_dtoa_r+0x260>
   11c02:	2702      	movs	r7, #2
   11c04:	e7ac      	b.n	11b60 <_dtoa_r+0x2c0>
   11c06:	07e1      	lsls	r1, r4, #31
   11c08:	d508      	bpl.n	11c1c <_dtoa_r+0x37c>
   11c0a:	3701      	adds	r7, #1
   11c0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11c10:	e9d6 2300 	ldrd	r2, r3, [r6]
   11c14:	f7fe fcd0 	bl	105b8 <__aeabi_dmul>
   11c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11c1c:	1064      	asrs	r4, r4, #1
   11c1e:	3608      	adds	r6, #8
   11c20:	e79f      	b.n	11b62 <_dtoa_r+0x2c2>
   11c22:	f000 80a5 	beq.w	11d70 <_dtoa_r+0x4d0>
   11c26:	f1ca 0400 	rsb	r4, sl, #0
   11c2a:	4ba3      	ldr	r3, [pc, #652]	; (11eb8 <_dtoa_r+0x618>)
   11c2c:	4ea3      	ldr	r6, [pc, #652]	; (11ebc <_dtoa_r+0x61c>)
   11c2e:	2702      	movs	r7, #2
   11c30:	f004 020f 	and.w	r2, r4, #15
   11c34:	1124      	asrs	r4, r4, #4
   11c36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11c3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   11c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c42:	f7fe fcb9 	bl	105b8 <__aeabi_dmul>
   11c46:	2300      	movs	r3, #0
   11c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11c4c:	2c00      	cmp	r4, #0
   11c4e:	f040 8084 	bne.w	11d5a <_dtoa_r+0x4ba>
   11c52:	2b00      	cmp	r3, #0
   11c54:	d18d      	bne.n	11b72 <_dtoa_r+0x2d2>
   11c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11c58:	2b00      	cmp	r3, #0
   11c5a:	f000 808b 	beq.w	11d74 <_dtoa_r+0x4d4>
   11c5e:	2200      	movs	r2, #0
   11c60:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   11c64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   11c68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11c6c:	4b94      	ldr	r3, [pc, #592]	; (11ec0 <_dtoa_r+0x620>)
   11c6e:	f7fe ff15 	bl	10a9c <__aeabi_dcmplt>
   11c72:	2800      	cmp	r0, #0
   11c74:	d07e      	beq.n	11d74 <_dtoa_r+0x4d4>
   11c76:	9b08      	ldr	r3, [sp, #32]
   11c78:	2b00      	cmp	r3, #0
   11c7a:	d07b      	beq.n	11d74 <_dtoa_r+0x4d4>
   11c7c:	f1b9 0f00 	cmp.w	r9, #0
   11c80:	dd38      	ble.n	11cf4 <_dtoa_r+0x454>
   11c82:	f10a 38ff 	add.w	r8, sl, #4294967295
   11c86:	3701      	adds	r7, #1
   11c88:	464c      	mov	r4, r9
   11c8a:	2200      	movs	r2, #0
   11c8c:	4b8d      	ldr	r3, [pc, #564]	; (11ec4 <_dtoa_r+0x624>)
   11c8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11c92:	f7fe fc91 	bl	105b8 <__aeabi_dmul>
   11c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11c9a:	4638      	mov	r0, r7
   11c9c:	f7fe fc22 	bl	104e4 <__aeabi_i2d>
   11ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11ca4:	f7fe fc88 	bl	105b8 <__aeabi_dmul>
   11ca8:	2200      	movs	r2, #0
   11caa:	4b87      	ldr	r3, [pc, #540]	; (11ec8 <_dtoa_r+0x628>)
   11cac:	f7fe face 	bl	1024c <__adddf3>
   11cb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   11cb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11cb8:	9611      	str	r6, [sp, #68]	; 0x44
   11cba:	2c00      	cmp	r4, #0
   11cbc:	d15d      	bne.n	11d7a <_dtoa_r+0x4da>
   11cbe:	2200      	movs	r2, #0
   11cc0:	4b82      	ldr	r3, [pc, #520]	; (11ecc <_dtoa_r+0x62c>)
   11cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11cc6:	f7fe fabf 	bl	10248 <__aeabi_dsub>
   11cca:	4602      	mov	r2, r0
   11ccc:	460b      	mov	r3, r1
   11cce:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11cd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11cd4:	4633      	mov	r3, r6
   11cd6:	f7fe feff 	bl	10ad8 <__aeabi_dcmpgt>
   11cda:	2800      	cmp	r0, #0
   11cdc:	f040 8294 	bne.w	12208 <_dtoa_r+0x968>
   11ce0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11ce2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   11ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11cea:	f7fe fed7 	bl	10a9c <__aeabi_dcmplt>
   11cee:	2800      	cmp	r0, #0
   11cf0:	f040 8288 	bne.w	12204 <_dtoa_r+0x964>
   11cf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   11cf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
   11cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11cfe:	2b00      	cmp	r3, #0
   11d00:	f2c0 814f 	blt.w	11fa2 <_dtoa_r+0x702>
   11d04:	f1ba 0f0e 	cmp.w	sl, #14
   11d08:	f300 814b 	bgt.w	11fa2 <_dtoa_r+0x702>
   11d0c:	4b6a      	ldr	r3, [pc, #424]	; (11eb8 <_dtoa_r+0x618>)
   11d0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   11d12:	e9d3 3400 	ldrd	r3, r4, [r3]
   11d16:	e9cd 3406 	strd	r3, r4, [sp, #24]
   11d1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11d1c:	2b00      	cmp	r3, #0
   11d1e:	f280 80d9 	bge.w	11ed4 <_dtoa_r+0x634>
   11d22:	9b08      	ldr	r3, [sp, #32]
   11d24:	2b00      	cmp	r3, #0
   11d26:	f300 80d5 	bgt.w	11ed4 <_dtoa_r+0x634>
   11d2a:	f040 826a 	bne.w	12202 <_dtoa_r+0x962>
   11d2e:	2200      	movs	r2, #0
   11d30:	4b66      	ldr	r3, [pc, #408]	; (11ecc <_dtoa_r+0x62c>)
   11d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11d36:	f7fe fc3f 	bl	105b8 <__aeabi_dmul>
   11d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11d3e:	f7fe fec1 	bl	10ac4 <__aeabi_dcmpge>
   11d42:	9c08      	ldr	r4, [sp, #32]
   11d44:	4626      	mov	r6, r4
   11d46:	2800      	cmp	r0, #0
   11d48:	f040 8240 	bne.w	121cc <_dtoa_r+0x92c>
   11d4c:	9f03      	ldr	r7, [sp, #12]
   11d4e:	2331      	movs	r3, #49	; 0x31
   11d50:	f10a 0a01 	add.w	sl, sl, #1
   11d54:	f807 3b01 	strb.w	r3, [r7], #1
   11d58:	e23c      	b.n	121d4 <_dtoa_r+0x934>
   11d5a:	07e2      	lsls	r2, r4, #31
   11d5c:	d505      	bpl.n	11d6a <_dtoa_r+0x4ca>
   11d5e:	3701      	adds	r7, #1
   11d60:	e9d6 2300 	ldrd	r2, r3, [r6]
   11d64:	f7fe fc28 	bl	105b8 <__aeabi_dmul>
   11d68:	2301      	movs	r3, #1
   11d6a:	1064      	asrs	r4, r4, #1
   11d6c:	3608      	adds	r6, #8
   11d6e:	e76d      	b.n	11c4c <_dtoa_r+0x3ac>
   11d70:	2702      	movs	r7, #2
   11d72:	e770      	b.n	11c56 <_dtoa_r+0x3b6>
   11d74:	46d0      	mov	r8, sl
   11d76:	9c08      	ldr	r4, [sp, #32]
   11d78:	e78f      	b.n	11c9a <_dtoa_r+0x3fa>
   11d7a:	9903      	ldr	r1, [sp, #12]
   11d7c:	4b4e      	ldr	r3, [pc, #312]	; (11eb8 <_dtoa_r+0x618>)
   11d7e:	4421      	add	r1, r4
   11d80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   11d84:	9112      	str	r1, [sp, #72]	; 0x48
   11d86:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11d88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   11d8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   11d90:	2900      	cmp	r1, #0
   11d92:	d046      	beq.n	11e22 <_dtoa_r+0x582>
   11d94:	2000      	movs	r0, #0
   11d96:	494e      	ldr	r1, [pc, #312]	; (11ed0 <_dtoa_r+0x630>)
   11d98:	f7fe fd38 	bl	1080c <__aeabi_ddiv>
   11d9c:	463b      	mov	r3, r7
   11d9e:	4632      	mov	r2, r6
   11da0:	f7fe fa52 	bl	10248 <__aeabi_dsub>
   11da4:	9f03      	ldr	r7, [sp, #12]
   11da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11dae:	f7fe feb3 	bl	10b18 <__aeabi_d2iz>
   11db2:	4604      	mov	r4, r0
   11db4:	f7fe fb96 	bl	104e4 <__aeabi_i2d>
   11db8:	4602      	mov	r2, r0
   11dba:	460b      	mov	r3, r1
   11dbc:	3430      	adds	r4, #48	; 0x30
   11dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11dc2:	f7fe fa41 	bl	10248 <__aeabi_dsub>
   11dc6:	4602      	mov	r2, r0
   11dc8:	460b      	mov	r3, r1
   11dca:	f807 4b01 	strb.w	r4, [r7], #1
   11dce:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11dd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11dd6:	f7fe fe61 	bl	10a9c <__aeabi_dcmplt>
   11dda:	2800      	cmp	r0, #0
   11ddc:	d164      	bne.n	11ea8 <_dtoa_r+0x608>
   11dde:	2000      	movs	r0, #0
   11de0:	4937      	ldr	r1, [pc, #220]	; (11ec0 <_dtoa_r+0x620>)
   11de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11de6:	f7fe fa2f 	bl	10248 <__aeabi_dsub>
   11dea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11dee:	f7fe fe55 	bl	10a9c <__aeabi_dcmplt>
   11df2:	2800      	cmp	r0, #0
   11df4:	f040 80b4 	bne.w	11f60 <_dtoa_r+0x6c0>
   11df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11dfa:	429f      	cmp	r7, r3
   11dfc:	f43f af7a 	beq.w	11cf4 <_dtoa_r+0x454>
   11e00:	2200      	movs	r2, #0
   11e02:	4b30      	ldr	r3, [pc, #192]	; (11ec4 <_dtoa_r+0x624>)
   11e04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11e08:	f7fe fbd6 	bl	105b8 <__aeabi_dmul>
   11e0c:	2200      	movs	r2, #0
   11e0e:	4b2d      	ldr	r3, [pc, #180]	; (11ec4 <_dtoa_r+0x624>)
   11e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11e18:	f7fe fbce 	bl	105b8 <__aeabi_dmul>
   11e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11e20:	e7c3      	b.n	11daa <_dtoa_r+0x50a>
   11e22:	4630      	mov	r0, r6
   11e24:	4639      	mov	r1, r7
   11e26:	f7fe fbc7 	bl	105b8 <__aeabi_dmul>
   11e2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e2c:	9c03      	ldr	r4, [sp, #12]
   11e2e:	9314      	str	r3, [sp, #80]	; 0x50
   11e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11e38:	f7fe fe6e 	bl	10b18 <__aeabi_d2iz>
   11e3c:	9015      	str	r0, [sp, #84]	; 0x54
   11e3e:	f7fe fb51 	bl	104e4 <__aeabi_i2d>
   11e42:	4602      	mov	r2, r0
   11e44:	460b      	mov	r3, r1
   11e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11e4a:	f7fe f9fd 	bl	10248 <__aeabi_dsub>
   11e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11e50:	4606      	mov	r6, r0
   11e52:	460f      	mov	r7, r1
   11e54:	3330      	adds	r3, #48	; 0x30
   11e56:	2200      	movs	r2, #0
   11e58:	f804 3b01 	strb.w	r3, [r4], #1
   11e5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e5e:	429c      	cmp	r4, r3
   11e60:	d124      	bne.n	11eac <_dtoa_r+0x60c>
   11e62:	4b1b      	ldr	r3, [pc, #108]	; (11ed0 <_dtoa_r+0x630>)
   11e64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11e68:	f7fe f9f0 	bl	1024c <__adddf3>
   11e6c:	4602      	mov	r2, r0
   11e6e:	460b      	mov	r3, r1
   11e70:	4630      	mov	r0, r6
   11e72:	4639      	mov	r1, r7
   11e74:	f7fe fe30 	bl	10ad8 <__aeabi_dcmpgt>
   11e78:	2800      	cmp	r0, #0
   11e7a:	d170      	bne.n	11f5e <_dtoa_r+0x6be>
   11e7c:	2000      	movs	r0, #0
   11e7e:	4914      	ldr	r1, [pc, #80]	; (11ed0 <_dtoa_r+0x630>)
   11e80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11e84:	f7fe f9e0 	bl	10248 <__aeabi_dsub>
   11e88:	4602      	mov	r2, r0
   11e8a:	460b      	mov	r3, r1
   11e8c:	4630      	mov	r0, r6
   11e8e:	4639      	mov	r1, r7
   11e90:	f7fe fe04 	bl	10a9c <__aeabi_dcmplt>
   11e94:	2800      	cmp	r0, #0
   11e96:	f43f af2d 	beq.w	11cf4 <_dtoa_r+0x454>
   11e9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
   11e9c:	1e7b      	subs	r3, r7, #1
   11e9e:	9314      	str	r3, [sp, #80]	; 0x50
   11ea0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   11ea4:	2b30      	cmp	r3, #48	; 0x30
   11ea6:	d0f8      	beq.n	11e9a <_dtoa_r+0x5fa>
   11ea8:	46c2      	mov	sl, r8
   11eaa:	e048      	b.n	11f3e <_dtoa_r+0x69e>
   11eac:	4b05      	ldr	r3, [pc, #20]	; (11ec4 <_dtoa_r+0x624>)
   11eae:	f7fe fb83 	bl	105b8 <__aeabi_dmul>
   11eb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   11eb6:	e7bd      	b.n	11e34 <_dtoa_r+0x594>
   11eb8:	00036700 	.word	0x00036700
   11ebc:	000366d8 	.word	0x000366d8
   11ec0:	3ff00000 	.word	0x3ff00000
   11ec4:	40240000 	.word	0x40240000
   11ec8:	401c0000 	.word	0x401c0000
   11ecc:	40140000 	.word	0x40140000
   11ed0:	3fe00000 	.word	0x3fe00000
   11ed4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   11ed8:	9f03      	ldr	r7, [sp, #12]
   11eda:	4640      	mov	r0, r8
   11edc:	4649      	mov	r1, r9
   11ede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11ee2:	f7fe fc93 	bl	1080c <__aeabi_ddiv>
   11ee6:	f7fe fe17 	bl	10b18 <__aeabi_d2iz>
   11eea:	4604      	mov	r4, r0
   11eec:	f7fe fafa 	bl	104e4 <__aeabi_i2d>
   11ef0:	f104 0630 	add.w	r6, r4, #48	; 0x30
   11ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11ef8:	f7fe fb5e 	bl	105b8 <__aeabi_dmul>
   11efc:	460b      	mov	r3, r1
   11efe:	4602      	mov	r2, r0
   11f00:	4649      	mov	r1, r9
   11f02:	4640      	mov	r0, r8
   11f04:	f7fe f9a0 	bl	10248 <__aeabi_dsub>
   11f08:	f807 6b01 	strb.w	r6, [r7], #1
   11f0c:	9e03      	ldr	r6, [sp, #12]
   11f0e:	9b08      	ldr	r3, [sp, #32]
   11f10:	1bbe      	subs	r6, r7, r6
   11f12:	42b3      	cmp	r3, r6
   11f14:	d138      	bne.n	11f88 <_dtoa_r+0x6e8>
   11f16:	4602      	mov	r2, r0
   11f18:	460b      	mov	r3, r1
   11f1a:	f7fe f997 	bl	1024c <__adddf3>
   11f1e:	4680      	mov	r8, r0
   11f20:	4689      	mov	r9, r1
   11f22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11f26:	f7fe fdd7 	bl	10ad8 <__aeabi_dcmpgt>
   11f2a:	bb58      	cbnz	r0, 11f84 <_dtoa_r+0x6e4>
   11f2c:	4640      	mov	r0, r8
   11f2e:	4649      	mov	r1, r9
   11f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11f34:	f7fe fda8 	bl	10a88 <__aeabi_dcmpeq>
   11f38:	b108      	cbz	r0, 11f3e <_dtoa_r+0x69e>
   11f3a:	07e1      	lsls	r1, r4, #31
   11f3c:	d422      	bmi.n	11f84 <_dtoa_r+0x6e4>
   11f3e:	4628      	mov	r0, r5
   11f40:	4659      	mov	r1, fp
   11f42:	f023 fdd1 	bl	35ae8 <_Bfree>
   11f46:	2300      	movs	r3, #0
   11f48:	f10a 0001 	add.w	r0, sl, #1
   11f4c:	703b      	strb	r3, [r7, #0]
   11f4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11f50:	6018      	str	r0, [r3, #0]
   11f52:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11f54:	2b00      	cmp	r3, #0
   11f56:	f43f acea 	beq.w	1192e <_dtoa_r+0x8e>
   11f5a:	601f      	str	r7, [r3, #0]
   11f5c:	e4e7      	b.n	1192e <_dtoa_r+0x8e>
   11f5e:	4627      	mov	r7, r4
   11f60:	463b      	mov	r3, r7
   11f62:	461f      	mov	r7, r3
   11f64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   11f68:	2a39      	cmp	r2, #57	; 0x39
   11f6a:	d107      	bne.n	11f7c <_dtoa_r+0x6dc>
   11f6c:	9a03      	ldr	r2, [sp, #12]
   11f6e:	429a      	cmp	r2, r3
   11f70:	d1f7      	bne.n	11f62 <_dtoa_r+0x6c2>
   11f72:	2230      	movs	r2, #48	; 0x30
   11f74:	9903      	ldr	r1, [sp, #12]
   11f76:	f108 0801 	add.w	r8, r8, #1
   11f7a:	700a      	strb	r2, [r1, #0]
   11f7c:	781a      	ldrb	r2, [r3, #0]
   11f7e:	3201      	adds	r2, #1
   11f80:	701a      	strb	r2, [r3, #0]
   11f82:	e791      	b.n	11ea8 <_dtoa_r+0x608>
   11f84:	46d0      	mov	r8, sl
   11f86:	e7eb      	b.n	11f60 <_dtoa_r+0x6c0>
   11f88:	2200      	movs	r2, #0
   11f8a:	4ba1      	ldr	r3, [pc, #644]	; (12210 <_dtoa_r+0x970>)
   11f8c:	f7fe fb14 	bl	105b8 <__aeabi_dmul>
   11f90:	2200      	movs	r2, #0
   11f92:	2300      	movs	r3, #0
   11f94:	4680      	mov	r8, r0
   11f96:	4689      	mov	r9, r1
   11f98:	f7fe fd76 	bl	10a88 <__aeabi_dcmpeq>
   11f9c:	2800      	cmp	r0, #0
   11f9e:	d09c      	beq.n	11eda <_dtoa_r+0x63a>
   11fa0:	e7cd      	b.n	11f3e <_dtoa_r+0x69e>
   11fa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11fa4:	2a00      	cmp	r2, #0
   11fa6:	f000 80cc 	beq.w	12142 <_dtoa_r+0x8a2>
   11faa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11fac:	2a01      	cmp	r2, #1
   11fae:	f300 80af 	bgt.w	12110 <_dtoa_r+0x870>
   11fb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11fb4:	2a00      	cmp	r2, #0
   11fb6:	f000 80a7 	beq.w	12108 <_dtoa_r+0x868>
   11fba:	f203 4333 	addw	r3, r3, #1075	; 0x433
   11fbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11fc0:	9f06      	ldr	r7, [sp, #24]
   11fc2:	9a06      	ldr	r2, [sp, #24]
   11fc4:	2101      	movs	r1, #1
   11fc6:	4628      	mov	r0, r5
   11fc8:	441a      	add	r2, r3
   11fca:	9206      	str	r2, [sp, #24]
   11fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11fce:	441a      	add	r2, r3
   11fd0:	9209      	str	r2, [sp, #36]	; 0x24
   11fd2:	f023 fe2d 	bl	35c30 <__i2b>
   11fd6:	4606      	mov	r6, r0
   11fd8:	2f00      	cmp	r7, #0
   11fda:	dd0c      	ble.n	11ff6 <_dtoa_r+0x756>
   11fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11fde:	2b00      	cmp	r3, #0
   11fe0:	dd09      	ble.n	11ff6 <_dtoa_r+0x756>
   11fe2:	42bb      	cmp	r3, r7
   11fe4:	9a06      	ldr	r2, [sp, #24]
   11fe6:	bfa8      	it	ge
   11fe8:	463b      	movge	r3, r7
   11fea:	1ad2      	subs	r2, r2, r3
   11fec:	1aff      	subs	r7, r7, r3
   11fee:	9206      	str	r2, [sp, #24]
   11ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11ff2:	1ad3      	subs	r3, r2, r3
   11ff4:	9309      	str	r3, [sp, #36]	; 0x24
   11ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ff8:	b1f3      	cbz	r3, 12038 <_dtoa_r+0x798>
   11ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ffc:	2b00      	cmp	r3, #0
   11ffe:	f000 80a4 	beq.w	1214a <_dtoa_r+0x8aa>
   12002:	2c00      	cmp	r4, #0
   12004:	dd10      	ble.n	12028 <_dtoa_r+0x788>
   12006:	4631      	mov	r1, r6
   12008:	4622      	mov	r2, r4
   1200a:	4628      	mov	r0, r5
   1200c:	f01b fd16 	bl	2da3c <__pow5mult>
   12010:	465a      	mov	r2, fp
   12012:	4601      	mov	r1, r0
   12014:	4606      	mov	r6, r0
   12016:	4628      	mov	r0, r5
   12018:	f023 fe13 	bl	35c42 <__multiply>
   1201c:	4680      	mov	r8, r0
   1201e:	4659      	mov	r1, fp
   12020:	4628      	mov	r0, r5
   12022:	46c3      	mov	fp, r8
   12024:	f023 fd60 	bl	35ae8 <_Bfree>
   12028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1202a:	1b1a      	subs	r2, r3, r4
   1202c:	d004      	beq.n	12038 <_dtoa_r+0x798>
   1202e:	4659      	mov	r1, fp
   12030:	4628      	mov	r0, r5
   12032:	f01b fd03 	bl	2da3c <__pow5mult>
   12036:	4683      	mov	fp, r0
   12038:	2101      	movs	r1, #1
   1203a:	4628      	mov	r0, r5
   1203c:	f023 fdf8 	bl	35c30 <__i2b>
   12040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12042:	4604      	mov	r4, r0
   12044:	2b00      	cmp	r3, #0
   12046:	f340 8082 	ble.w	1214e <_dtoa_r+0x8ae>
   1204a:	461a      	mov	r2, r3
   1204c:	4601      	mov	r1, r0
   1204e:	4628      	mov	r0, r5
   12050:	f01b fcf4 	bl	2da3c <__pow5mult>
   12054:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12056:	4604      	mov	r4, r0
   12058:	2b01      	cmp	r3, #1
   1205a:	dd7b      	ble.n	12154 <_dtoa_r+0x8b4>
   1205c:	f04f 0800 	mov.w	r8, #0
   12060:	6923      	ldr	r3, [r4, #16]
   12062:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   12066:	6918      	ldr	r0, [r3, #16]
   12068:	f023 fd94 	bl	35b94 <__hi0bits>
   1206c:	f1c0 0020 	rsb	r0, r0, #32
   12070:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12072:	4418      	add	r0, r3
   12074:	f010 001f 	ands.w	r0, r0, #31
   12078:	f000 808d 	beq.w	12196 <_dtoa_r+0x8f6>
   1207c:	f1c0 0320 	rsb	r3, r0, #32
   12080:	2b04      	cmp	r3, #4
   12082:	f340 8086 	ble.w	12192 <_dtoa_r+0x8f2>
   12086:	f1c0 001c 	rsb	r0, r0, #28
   1208a:	9b06      	ldr	r3, [sp, #24]
   1208c:	4407      	add	r7, r0
   1208e:	4403      	add	r3, r0
   12090:	9306      	str	r3, [sp, #24]
   12092:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12094:	4403      	add	r3, r0
   12096:	9309      	str	r3, [sp, #36]	; 0x24
   12098:	9b06      	ldr	r3, [sp, #24]
   1209a:	2b00      	cmp	r3, #0
   1209c:	dd05      	ble.n	120aa <_dtoa_r+0x80a>
   1209e:	4659      	mov	r1, fp
   120a0:	461a      	mov	r2, r3
   120a2:	4628      	mov	r0, r5
   120a4:	f023 fe68 	bl	35d78 <__lshift>
   120a8:	4683      	mov	fp, r0
   120aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   120ac:	2b00      	cmp	r3, #0
   120ae:	dd05      	ble.n	120bc <_dtoa_r+0x81c>
   120b0:	4621      	mov	r1, r4
   120b2:	461a      	mov	r2, r3
   120b4:	4628      	mov	r0, r5
   120b6:	f023 fe5f 	bl	35d78 <__lshift>
   120ba:	4604      	mov	r4, r0
   120bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120be:	2b00      	cmp	r3, #0
   120c0:	d06b      	beq.n	1219a <_dtoa_r+0x8fa>
   120c2:	4621      	mov	r1, r4
   120c4:	4658      	mov	r0, fp
   120c6:	f023 feb6 	bl	35e36 <__mcmp>
   120ca:	2800      	cmp	r0, #0
   120cc:	da65      	bge.n	1219a <_dtoa_r+0x8fa>
   120ce:	2300      	movs	r3, #0
   120d0:	4659      	mov	r1, fp
   120d2:	220a      	movs	r2, #10
   120d4:	4628      	mov	r0, r5
   120d6:	f023 fd1e 	bl	35b16 <__multadd>
   120da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   120dc:	f10a 3aff 	add.w	sl, sl, #4294967295
   120e0:	4683      	mov	fp, r0
   120e2:	2b00      	cmp	r3, #0
   120e4:	f000 818b 	beq.w	123fe <_dtoa_r+0xb5e>
   120e8:	4631      	mov	r1, r6
   120ea:	2300      	movs	r3, #0
   120ec:	220a      	movs	r2, #10
   120ee:	4628      	mov	r0, r5
   120f0:	f023 fd11 	bl	35b16 <__multadd>
   120f4:	f1b9 0f00 	cmp.w	r9, #0
   120f8:	4606      	mov	r6, r0
   120fa:	f300 8091 	bgt.w	12220 <_dtoa_r+0x980>
   120fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12100:	2b02      	cmp	r3, #2
   12102:	f340 808d 	ble.w	12220 <_dtoa_r+0x980>
   12106:	e050      	b.n	121aa <_dtoa_r+0x90a>
   12108:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1210a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1210e:	e756      	b.n	11fbe <_dtoa_r+0x71e>
   12110:	9b08      	ldr	r3, [sp, #32]
   12112:	1e5c      	subs	r4, r3, #1
   12114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12116:	42a3      	cmp	r3, r4
   12118:	bfb7      	itett	lt
   1211a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
   1211c:	1b1c      	subge	r4, r3, r4
   1211e:	940a      	strlt	r4, [sp, #40]	; 0x28
   12120:	1ae2      	sublt	r2, r4, r3
   12122:	bfbf      	itttt	lt
   12124:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   12126:	2400      	movlt	r4, #0
   12128:	189b      	addlt	r3, r3, r2
   1212a:	930e      	strlt	r3, [sp, #56]	; 0x38
   1212c:	9b08      	ldr	r3, [sp, #32]
   1212e:	2b00      	cmp	r3, #0
   12130:	bfbb      	ittet	lt
   12132:	9b06      	ldrlt	r3, [sp, #24]
   12134:	9a08      	ldrlt	r2, [sp, #32]
   12136:	9f06      	ldrge	r7, [sp, #24]
   12138:	1a9f      	sublt	r7, r3, r2
   1213a:	bfac      	ite	ge
   1213c:	9b08      	ldrge	r3, [sp, #32]
   1213e:	2300      	movlt	r3, #0
   12140:	e73f      	b.n	11fc2 <_dtoa_r+0x722>
   12142:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12144:	9f06      	ldr	r7, [sp, #24]
   12146:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   12148:	e746      	b.n	11fd8 <_dtoa_r+0x738>
   1214a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1214c:	e76f      	b.n	1202e <_dtoa_r+0x78e>
   1214e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12150:	2b01      	cmp	r3, #1
   12152:	dc19      	bgt.n	12188 <_dtoa_r+0x8e8>
   12154:	9b04      	ldr	r3, [sp, #16]
   12156:	b9bb      	cbnz	r3, 12188 <_dtoa_r+0x8e8>
   12158:	9b05      	ldr	r3, [sp, #20]
   1215a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1215e:	b99b      	cbnz	r3, 12188 <_dtoa_r+0x8e8>
   12160:	9b05      	ldr	r3, [sp, #20]
   12162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12166:	0d1b      	lsrs	r3, r3, #20
   12168:	051b      	lsls	r3, r3, #20
   1216a:	b183      	cbz	r3, 1218e <_dtoa_r+0x8ee>
   1216c:	9b06      	ldr	r3, [sp, #24]
   1216e:	f04f 0801 	mov.w	r8, #1
   12172:	3301      	adds	r3, #1
   12174:	9306      	str	r3, [sp, #24]
   12176:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12178:	3301      	adds	r3, #1
   1217a:	9309      	str	r3, [sp, #36]	; 0x24
   1217c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1217e:	2b00      	cmp	r3, #0
   12180:	f47f af6e 	bne.w	12060 <_dtoa_r+0x7c0>
   12184:	2001      	movs	r0, #1
   12186:	e773      	b.n	12070 <_dtoa_r+0x7d0>
   12188:	f04f 0800 	mov.w	r8, #0
   1218c:	e7f6      	b.n	1217c <_dtoa_r+0x8dc>
   1218e:	4698      	mov	r8, r3
   12190:	e7f4      	b.n	1217c <_dtoa_r+0x8dc>
   12192:	d081      	beq.n	12098 <_dtoa_r+0x7f8>
   12194:	4618      	mov	r0, r3
   12196:	301c      	adds	r0, #28
   12198:	e777      	b.n	1208a <_dtoa_r+0x7ea>
   1219a:	9b08      	ldr	r3, [sp, #32]
   1219c:	2b00      	cmp	r3, #0
   1219e:	dc39      	bgt.n	12214 <_dtoa_r+0x974>
   121a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   121a2:	2b02      	cmp	r3, #2
   121a4:	dd36      	ble.n	12214 <_dtoa_r+0x974>
   121a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
   121aa:	f1b9 0f00 	cmp.w	r9, #0
   121ae:	d10d      	bne.n	121cc <_dtoa_r+0x92c>
   121b0:	4621      	mov	r1, r4
   121b2:	464b      	mov	r3, r9
   121b4:	2205      	movs	r2, #5
   121b6:	4628      	mov	r0, r5
   121b8:	f023 fcad 	bl	35b16 <__multadd>
   121bc:	4601      	mov	r1, r0
   121be:	4604      	mov	r4, r0
   121c0:	4658      	mov	r0, fp
   121c2:	f023 fe38 	bl	35e36 <__mcmp>
   121c6:	2800      	cmp	r0, #0
   121c8:	f73f adc0 	bgt.w	11d4c <_dtoa_r+0x4ac>
   121cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   121ce:	9f03      	ldr	r7, [sp, #12]
   121d0:	ea6f 0a03 	mvn.w	sl, r3
   121d4:	f04f 0800 	mov.w	r8, #0
   121d8:	4621      	mov	r1, r4
   121da:	4628      	mov	r0, r5
   121dc:	f023 fc84 	bl	35ae8 <_Bfree>
   121e0:	2e00      	cmp	r6, #0
   121e2:	f43f aeac 	beq.w	11f3e <_dtoa_r+0x69e>
   121e6:	f1b8 0f00 	cmp.w	r8, #0
   121ea:	d005      	beq.n	121f8 <_dtoa_r+0x958>
   121ec:	45b0      	cmp	r8, r6
   121ee:	d003      	beq.n	121f8 <_dtoa_r+0x958>
   121f0:	4641      	mov	r1, r8
   121f2:	4628      	mov	r0, r5
   121f4:	f023 fc78 	bl	35ae8 <_Bfree>
   121f8:	4631      	mov	r1, r6
   121fa:	4628      	mov	r0, r5
   121fc:	f023 fc74 	bl	35ae8 <_Bfree>
   12200:	e69d      	b.n	11f3e <_dtoa_r+0x69e>
   12202:	2400      	movs	r4, #0
   12204:	4626      	mov	r6, r4
   12206:	e7e1      	b.n	121cc <_dtoa_r+0x92c>
   12208:	46c2      	mov	sl, r8
   1220a:	4626      	mov	r6, r4
   1220c:	e59e      	b.n	11d4c <_dtoa_r+0x4ac>
   1220e:	bf00      	nop
   12210:	40240000 	.word	0x40240000
   12214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12216:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1221a:	2b00      	cmp	r3, #0
   1221c:	f000 80f6 	beq.w	1240c <_dtoa_r+0xb6c>
   12220:	2f00      	cmp	r7, #0
   12222:	dd05      	ble.n	12230 <_dtoa_r+0x990>
   12224:	4631      	mov	r1, r6
   12226:	463a      	mov	r2, r7
   12228:	4628      	mov	r0, r5
   1222a:	f023 fda5 	bl	35d78 <__lshift>
   1222e:	4606      	mov	r6, r0
   12230:	f1b8 0f00 	cmp.w	r8, #0
   12234:	d055      	beq.n	122e2 <_dtoa_r+0xa42>
   12236:	6871      	ldr	r1, [r6, #4]
   12238:	4628      	mov	r0, r5
   1223a:	f023 fc21 	bl	35a80 <_Balloc>
   1223e:	6932      	ldr	r2, [r6, #16]
   12240:	4607      	mov	r7, r0
   12242:	f106 010c 	add.w	r1, r6, #12
   12246:	3202      	adds	r2, #2
   12248:	300c      	adds	r0, #12
   1224a:	0092      	lsls	r2, r2, #2
   1224c:	f023 f99b 	bl	35586 <memcpy>
   12250:	2201      	movs	r2, #1
   12252:	4639      	mov	r1, r7
   12254:	4628      	mov	r0, r5
   12256:	f023 fd8f 	bl	35d78 <__lshift>
   1225a:	9b03      	ldr	r3, [sp, #12]
   1225c:	46b0      	mov	r8, r6
   1225e:	4606      	mov	r6, r0
   12260:	3301      	adds	r3, #1
   12262:	9308      	str	r3, [sp, #32]
   12264:	9b03      	ldr	r3, [sp, #12]
   12266:	444b      	add	r3, r9
   12268:	930a      	str	r3, [sp, #40]	; 0x28
   1226a:	9b04      	ldr	r3, [sp, #16]
   1226c:	f003 0301 	and.w	r3, r3, #1
   12270:	9309      	str	r3, [sp, #36]	; 0x24
   12272:	9b08      	ldr	r3, [sp, #32]
   12274:	4621      	mov	r1, r4
   12276:	4658      	mov	r0, fp
   12278:	3b01      	subs	r3, #1
   1227a:	9304      	str	r3, [sp, #16]
   1227c:	f023 fb5f 	bl	3593e <quorem>
   12280:	4603      	mov	r3, r0
   12282:	4641      	mov	r1, r8
   12284:	9006      	str	r0, [sp, #24]
   12286:	4658      	mov	r0, fp
   12288:	3330      	adds	r3, #48	; 0x30
   1228a:	930b      	str	r3, [sp, #44]	; 0x2c
   1228c:	f023 fdd3 	bl	35e36 <__mcmp>
   12290:	4632      	mov	r2, r6
   12292:	4681      	mov	r9, r0
   12294:	4621      	mov	r1, r4
   12296:	4628      	mov	r0, r5
   12298:	f023 fde8 	bl	35e6c <__mdiff>
   1229c:	68c2      	ldr	r2, [r0, #12]
   1229e:	4607      	mov	r7, r0
   122a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122a2:	bb02      	cbnz	r2, 122e6 <_dtoa_r+0xa46>
   122a4:	4601      	mov	r1, r0
   122a6:	4658      	mov	r0, fp
   122a8:	f023 fdc5 	bl	35e36 <__mcmp>
   122ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122ae:	4602      	mov	r2, r0
   122b0:	4639      	mov	r1, r7
   122b2:	4628      	mov	r0, r5
   122b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   122b8:	f023 fc16 	bl	35ae8 <_Bfree>
   122bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   122be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   122c0:	9f08      	ldr	r7, [sp, #32]
   122c2:	ea43 0102 	orr.w	r1, r3, r2
   122c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122c8:	430b      	orrs	r3, r1
   122ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122cc:	d10d      	bne.n	122ea <_dtoa_r+0xa4a>
   122ce:	2b39      	cmp	r3, #57	; 0x39
   122d0:	d029      	beq.n	12326 <_dtoa_r+0xa86>
   122d2:	f1b9 0f00 	cmp.w	r9, #0
   122d6:	dd01      	ble.n	122dc <_dtoa_r+0xa3c>
   122d8:	9b06      	ldr	r3, [sp, #24]
   122da:	3331      	adds	r3, #49	; 0x31
   122dc:	9a04      	ldr	r2, [sp, #16]
   122de:	7013      	strb	r3, [r2, #0]
   122e0:	e77a      	b.n	121d8 <_dtoa_r+0x938>
   122e2:	4630      	mov	r0, r6
   122e4:	e7b9      	b.n	1225a <_dtoa_r+0x9ba>
   122e6:	2201      	movs	r2, #1
   122e8:	e7e2      	b.n	122b0 <_dtoa_r+0xa10>
   122ea:	f1b9 0f00 	cmp.w	r9, #0
   122ee:	db06      	blt.n	122fe <_dtoa_r+0xa5e>
   122f0:	9922      	ldr	r1, [sp, #136]	; 0x88
   122f2:	ea41 0909 	orr.w	r9, r1, r9
   122f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   122f8:	ea59 0101 	orrs.w	r1, r9, r1
   122fc:	d120      	bne.n	12340 <_dtoa_r+0xaa0>
   122fe:	2a00      	cmp	r2, #0
   12300:	ddec      	ble.n	122dc <_dtoa_r+0xa3c>
   12302:	4659      	mov	r1, fp
   12304:	2201      	movs	r2, #1
   12306:	4628      	mov	r0, r5
   12308:	9308      	str	r3, [sp, #32]
   1230a:	f023 fd35 	bl	35d78 <__lshift>
   1230e:	4621      	mov	r1, r4
   12310:	4683      	mov	fp, r0
   12312:	f023 fd90 	bl	35e36 <__mcmp>
   12316:	2800      	cmp	r0, #0
   12318:	9b08      	ldr	r3, [sp, #32]
   1231a:	dc02      	bgt.n	12322 <_dtoa_r+0xa82>
   1231c:	d1de      	bne.n	122dc <_dtoa_r+0xa3c>
   1231e:	07da      	lsls	r2, r3, #31
   12320:	d5dc      	bpl.n	122dc <_dtoa_r+0xa3c>
   12322:	2b39      	cmp	r3, #57	; 0x39
   12324:	d1d8      	bne.n	122d8 <_dtoa_r+0xa38>
   12326:	2339      	movs	r3, #57	; 0x39
   12328:	9a04      	ldr	r2, [sp, #16]
   1232a:	7013      	strb	r3, [r2, #0]
   1232c:	463b      	mov	r3, r7
   1232e:	461f      	mov	r7, r3
   12330:	3b01      	subs	r3, #1
   12332:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   12336:	2a39      	cmp	r2, #57	; 0x39
   12338:	d050      	beq.n	123dc <_dtoa_r+0xb3c>
   1233a:	3201      	adds	r2, #1
   1233c:	701a      	strb	r2, [r3, #0]
   1233e:	e74b      	b.n	121d8 <_dtoa_r+0x938>
   12340:	2a00      	cmp	r2, #0
   12342:	dd03      	ble.n	1234c <_dtoa_r+0xaac>
   12344:	2b39      	cmp	r3, #57	; 0x39
   12346:	d0ee      	beq.n	12326 <_dtoa_r+0xa86>
   12348:	3301      	adds	r3, #1
   1234a:	e7c7      	b.n	122dc <_dtoa_r+0xa3c>
   1234c:	9a08      	ldr	r2, [sp, #32]
   1234e:	990a      	ldr	r1, [sp, #40]	; 0x28
   12350:	f802 3c01 	strb.w	r3, [r2, #-1]
   12354:	428a      	cmp	r2, r1
   12356:	d02a      	beq.n	123ae <_dtoa_r+0xb0e>
   12358:	4659      	mov	r1, fp
   1235a:	2300      	movs	r3, #0
   1235c:	220a      	movs	r2, #10
   1235e:	4628      	mov	r0, r5
   12360:	f023 fbd9 	bl	35b16 <__multadd>
   12364:	45b0      	cmp	r8, r6
   12366:	4683      	mov	fp, r0
   12368:	f04f 0300 	mov.w	r3, #0
   1236c:	f04f 020a 	mov.w	r2, #10
   12370:	4641      	mov	r1, r8
   12372:	4628      	mov	r0, r5
   12374:	d107      	bne.n	12386 <_dtoa_r+0xae6>
   12376:	f023 fbce 	bl	35b16 <__multadd>
   1237a:	4680      	mov	r8, r0
   1237c:	4606      	mov	r6, r0
   1237e:	9b08      	ldr	r3, [sp, #32]
   12380:	3301      	adds	r3, #1
   12382:	9308      	str	r3, [sp, #32]
   12384:	e775      	b.n	12272 <_dtoa_r+0x9d2>
   12386:	f023 fbc6 	bl	35b16 <__multadd>
   1238a:	4631      	mov	r1, r6
   1238c:	4680      	mov	r8, r0
   1238e:	2300      	movs	r3, #0
   12390:	220a      	movs	r2, #10
   12392:	4628      	mov	r0, r5
   12394:	f023 fbbf 	bl	35b16 <__multadd>
   12398:	4606      	mov	r6, r0
   1239a:	e7f0      	b.n	1237e <_dtoa_r+0xade>
   1239c:	f1b9 0f00 	cmp.w	r9, #0
   123a0:	9a03      	ldr	r2, [sp, #12]
   123a2:	f04f 0800 	mov.w	r8, #0
   123a6:	bfcc      	ite	gt
   123a8:	464f      	movgt	r7, r9
   123aa:	2701      	movle	r7, #1
   123ac:	4417      	add	r7, r2
   123ae:	4659      	mov	r1, fp
   123b0:	2201      	movs	r2, #1
   123b2:	4628      	mov	r0, r5
   123b4:	9308      	str	r3, [sp, #32]
   123b6:	f023 fcdf 	bl	35d78 <__lshift>
   123ba:	4621      	mov	r1, r4
   123bc:	4683      	mov	fp, r0
   123be:	f023 fd3a 	bl	35e36 <__mcmp>
   123c2:	2800      	cmp	r0, #0
   123c4:	dcb2      	bgt.n	1232c <_dtoa_r+0xa8c>
   123c6:	d102      	bne.n	123ce <_dtoa_r+0xb2e>
   123c8:	9b08      	ldr	r3, [sp, #32]
   123ca:	07db      	lsls	r3, r3, #31
   123cc:	d4ae      	bmi.n	1232c <_dtoa_r+0xa8c>
   123ce:	463b      	mov	r3, r7
   123d0:	461f      	mov	r7, r3
   123d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   123d6:	2a30      	cmp	r2, #48	; 0x30
   123d8:	d0fa      	beq.n	123d0 <_dtoa_r+0xb30>
   123da:	e6fd      	b.n	121d8 <_dtoa_r+0x938>
   123dc:	9a03      	ldr	r2, [sp, #12]
   123de:	429a      	cmp	r2, r3
   123e0:	d1a5      	bne.n	1232e <_dtoa_r+0xa8e>
   123e2:	f10a 0a01 	add.w	sl, sl, #1
   123e6:	2331      	movs	r3, #49	; 0x31
   123e8:	e779      	b.n	122de <_dtoa_r+0xa3e>
   123ea:	4b13      	ldr	r3, [pc, #76]	; (12438 <_dtoa_r+0xb98>)
   123ec:	f7ff babe 	b.w	1196c <_dtoa_r+0xcc>
   123f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   123f2:	2b00      	cmp	r3, #0
   123f4:	f47f aa96 	bne.w	11924 <_dtoa_r+0x84>
   123f8:	4b10      	ldr	r3, [pc, #64]	; (1243c <_dtoa_r+0xb9c>)
   123fa:	f7ff bab7 	b.w	1196c <_dtoa_r+0xcc>
   123fe:	f1b9 0f00 	cmp.w	r9, #0
   12402:	dc03      	bgt.n	1240c <_dtoa_r+0xb6c>
   12404:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12406:	2b02      	cmp	r3, #2
   12408:	f73f aecf 	bgt.w	121aa <_dtoa_r+0x90a>
   1240c:	9f03      	ldr	r7, [sp, #12]
   1240e:	4621      	mov	r1, r4
   12410:	4658      	mov	r0, fp
   12412:	f023 fa94 	bl	3593e <quorem>
   12416:	9a03      	ldr	r2, [sp, #12]
   12418:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1241c:	f807 3b01 	strb.w	r3, [r7], #1
   12420:	1aba      	subs	r2, r7, r2
   12422:	4591      	cmp	r9, r2
   12424:	ddba      	ble.n	1239c <_dtoa_r+0xafc>
   12426:	4659      	mov	r1, fp
   12428:	2300      	movs	r3, #0
   1242a:	220a      	movs	r2, #10
   1242c:	4628      	mov	r0, r5
   1242e:	f023 fb72 	bl	35b16 <__multadd>
   12432:	4683      	mov	fp, r0
   12434:	e7eb      	b.n	1240e <_dtoa_r+0xb6e>
   12436:	bf00      	nop
   12438:	0003e845 	.word	0x0003e845
   1243c:	0003f085 	.word	0x0003f085

00012440 <date_time_handler>:
    modem_info_string_get(MODEM_INFO_FW_VERSION, info->fwv, sizeof(info->fwv));
    modem_info_short_get(MODEM_INFO_BATTERY, &info->vltg);
    modem_info_short_get(MODEM_INFO_TEMP, &info->temp);
}

void date_time_handler(const struct date_time_evt *evt) {
   12440:	b508      	push	{r3, lr}
   12442:	7803      	ldrb	r3, [r0, #0]
   12444:	2b03      	cmp	r3, #3
   12446:	d831      	bhi.n	124ac <date_time_handler+0x6c>
   12448:	e8df f003 	tbb	[pc, r3]
   1244c:	261c1202 	.word	0x261c1202
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   12450:	4a17      	ldr	r2, [pc, #92]	; (124b0 <date_time_handler+0x70>)
   12452:	4b18      	ldr	r3, [pc, #96]	; (124b4 <date_time_handler+0x74>)

	switch (evt->type)
	{
	case DATE_TIME_OBTAINED_MODEM:
		LOG_DBG("DATE_TIME: got time from modem.\n");
   12454:	4918      	ldr	r1, [pc, #96]	; (124b8 <date_time_handler+0x78>)
   12456:	1ad2      	subs	r2, r2, r3
   12458:	08d2      	lsrs	r2, r2, #3
   1245a:	0192      	lsls	r2, r2, #6
   1245c:	4817      	ldr	r0, [pc, #92]	; (124bc <date_time_handler+0x7c>)
   1245e:	f042 0204 	orr.w	r2, r2, #4
	case DATE_TIME_OBTAINED_EXT:
		LOG_DBG("DATE_TIME: got time from external.\n");
		k_sem_give(&date_time_ok);
		break;
	case DATE_TIME_NOT_OBTAINED:
		LOG_DBG("DATE_TIME: failed to get time.\n");
   12462:	f01b ffd2 	bl	2e40a <log_1>
		k_sem_give(&date_time_ok);
		break;
	default:
		break;
	}
}
   12466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1246a:	4815      	ldr	r0, [pc, #84]	; (124c0 <date_time_handler+0x80>)
   1246c:	f017 ba78 	b.w	29960 <z_impl_k_sem_give>
   12470:	4a0f      	ldr	r2, [pc, #60]	; (124b0 <date_time_handler+0x70>)
   12472:	4b10      	ldr	r3, [pc, #64]	; (124b4 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from NTP.\n");
   12474:	4910      	ldr	r1, [pc, #64]	; (124b8 <date_time_handler+0x78>)
   12476:	1ad2      	subs	r2, r2, r3
   12478:	08d2      	lsrs	r2, r2, #3
   1247a:	0192      	lsls	r2, r2, #6
   1247c:	4811      	ldr	r0, [pc, #68]	; (124c4 <date_time_handler+0x84>)
   1247e:	f042 0204 	orr.w	r2, r2, #4
   12482:	e7ee      	b.n	12462 <date_time_handler+0x22>
   12484:	4a0a      	ldr	r2, [pc, #40]	; (124b0 <date_time_handler+0x70>)
   12486:	4b0b      	ldr	r3, [pc, #44]	; (124b4 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from external.\n");
   12488:	490b      	ldr	r1, [pc, #44]	; (124b8 <date_time_handler+0x78>)
   1248a:	1ad2      	subs	r2, r2, r3
   1248c:	08d2      	lsrs	r2, r2, #3
   1248e:	0192      	lsls	r2, r2, #6
   12490:	480d      	ldr	r0, [pc, #52]	; (124c8 <date_time_handler+0x88>)
   12492:	f042 0204 	orr.w	r2, r2, #4
   12496:	e7e4      	b.n	12462 <date_time_handler+0x22>
   12498:	4a05      	ldr	r2, [pc, #20]	; (124b0 <date_time_handler+0x70>)
   1249a:	4b06      	ldr	r3, [pc, #24]	; (124b4 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: failed to get time.\n");
   1249c:	4906      	ldr	r1, [pc, #24]	; (124b8 <date_time_handler+0x78>)
   1249e:	1ad2      	subs	r2, r2, r3
   124a0:	08d2      	lsrs	r2, r2, #3
   124a2:	0192      	lsls	r2, r2, #6
   124a4:	4809      	ldr	r0, [pc, #36]	; (124cc <date_time_handler+0x8c>)
   124a6:	f042 0204 	orr.w	r2, r2, #4
   124aa:	e7da      	b.n	12462 <date_time_handler+0x22>
}
   124ac:	bd08      	pop	{r3, pc}
   124ae:	bf00      	nop
   124b0:	00036550 	.word	0x00036550
   124b4:	000364b0 	.word	0x000364b0
   124b8:	00037556 	.word	0x00037556
   124bc:	00037398 	.word	0x00037398
   124c0:	20014f80 	.word	0x20014f80
   124c4:	000373bd 	.word	0x000373bd
   124c8:	000373e0 	.word	0x000373e0
   124cc:	00037408 	.word	0x00037408

000124d0 <main>:

#endif

/**@brief Thread initialisation */
void main(void)
{
   124d0:	b530      	push	{r4, r5, lr}
   124d2:	4b3c      	ldr	r3, [pc, #240]	; (125c4 <main+0xf4>)
   124d4:	4c3c      	ldr	r4, [pc, #240]	; (125c8 <main+0xf8>)
   124d6:	b089      	sub	sp, #36	; 0x24
   124d8:	1ae4      	subs	r4, r4, r3
   124da:	08e4      	lsrs	r4, r4, #3
    int err;

    LOG_INF("Google Cloud BLE app started");
   124dc:	01a4      	lsls	r4, r4, #6
   124de:	f044 0503 	orr.w	r5, r4, #3
   124e2:	4629      	mov	r1, r5
   124e4:	4839      	ldr	r0, [pc, #228]	; (125cc <main+0xfc>)
   124e6:	f01b ff83 	bl	2e3f0 <log_0>
		}

	k_sem_take(&ble_ready, K_FOREVER);
	#endif

    LOG_INF("Initializing modem");
   124ea:	4629      	mov	r1, r5
   124ec:	4838      	ldr	r0, [pc, #224]	; (125d0 <main+0x100>)
   124ee:	f01b ff7f 	bl	2e3f0 <log_0>
	LOG_INF("Disabling PSM and eDRX");
   124f2:	4629      	mov	r1, r5
   124f4:	4837      	ldr	r0, [pc, #220]	; (125d4 <main+0x104>)
   124f6:	f01b ff7b 	bl	2e3f0 <log_0>
	lte_lc_psm_req(false);
   124fa:	2000      	movs	r0, #0
   124fc:	f00f fa70 	bl	219e0 <lte_lc_psm_req>
	lte_lc_edrx_req(false);
   12500:	2000      	movs	r0, #0
   12502:	f00f fabb 	bl	21a7c <lte_lc_edrx_req>
        LOG_INF("Establishing LTE link\n");
   12506:	4629      	mov	r1, r5
   12508:	4833      	ldr	r0, [pc, #204]	; (125d8 <main+0x108>)
   1250a:	f01b ff71 	bl	2e3f0 <log_0>
        err = lte_lc_init_and_connect();
   1250e:	f021 fafd 	bl	33b0c <lte_lc_init_and_connect>
        if (err) {
   12512:	4601      	mov	r1, r0
   12514:	b118      	cbz	r0, 1251e <main+0x4e>
			LOG_INF("Failed to establish LTE connection: %d", err);
   12516:	462a      	mov	r2, r5
   12518:	4830      	ldr	r0, [pc, #192]	; (125dc <main+0x10c>)
   1251a:	f01b ff76 	bl	2e40a <log_1>
    modem_configure();

    LOG_INF("Initializing modem info");
   1251e:	f044 0103 	orr.w	r1, r4, #3
   12522:	482f      	ldr	r0, [pc, #188]	; (125e0 <main+0x110>)
   12524:	f01b ff64 	bl	2e3f0 <log_0>
    modem_info_init();
   12528:	f010 fb2e 	bl	22b88 <modem_info_init>


    date_time_update_async(date_time_handler);
   1252c:	482d      	ldr	r0, [pc, #180]	; (125e4 <main+0x114>)
   1252e:	f010 fe9f 	bl	23270 <date_time_update_async>
	return z_impl_k_sem_take(sem, timeout);
   12532:	f04f 32ff 	mov.w	r2, #4294967295
   12536:	f04f 33ff 	mov.w	r3, #4294967295
   1253a:	482b      	ldr	r0, [pc, #172]	; (125e8 <main+0x118>)
   1253c:	f017 fa54 	bl	299e8 <z_impl_k_sem_take>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12540:	2200      	movs	r2, #0
   12542:	2300      	movs	r3, #0
   12544:	2500      	movs	r5, #0
   12546:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1254a:	2307      	movs	r3, #7
   1254c:	4927      	ldr	r1, [pc, #156]	; (125ec <main+0x11c>)
   1254e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12552:	e9cd 3503 	strd	r3, r5, [sp, #12]
   12556:	e9cd 5501 	strd	r5, r5, [sp, #4]
   1255a:	4b25      	ldr	r3, [pc, #148]	; (125f0 <main+0x120>)
   1255c:	4825      	ldr	r0, [pc, #148]	; (125f4 <main+0x124>)
   1255e:	9500      	str	r5, [sp, #0]
   12560:	f016 fc2a 	bl	28db8 <z_impl_k_thread_create>
    k_sem_take(&date_time_ok, K_FOREVER);

    /* Initialise Google Cloud thread */
    gc_tid = k_thread_create(&gc_thread, gc_stack_area, K_THREAD_STACK_SIZEOF(gc_stack_area),
   12564:	4b24      	ldr	r3, [pc, #144]	; (125f8 <main+0x128>)
   12566:	6018      	str	r0, [r3, #0]
                             (k_thread_entry_t)gcloud_thread, NULL, NULL, NULL,
                             7, 0, K_NO_WAIT);


    err = gcloud_provision();
   12568:	f000 fb28 	bl	12bbc <gcloud_provision>
    if (err)
   1256c:	4601      	mov	r1, r0
   1256e:	b138      	cbz	r0, 12580 <main+0xb0>
    {
        LOG_ERR("Provisioning failed, error: %d", err);
   12570:	4822      	ldr	r0, [pc, #136]	; (125fc <main+0x12c>)
   12572:	f044 0201 	orr.w	r2, r4, #1
   12576:	f01b ff48 	bl	2e40a <log_1>
        /* Reboot */
        sys_reboot(0); //TODO: Handle error
   1257a:	4628      	mov	r0, r5
   1257c:	f002 f960 	bl	14840 <sys_reboot>
    }

    /* Connect to Google Cloud */
    LOG_INF("Connecting to Google Cloud");
   12580:	f044 0503 	orr.w	r5, r4, #3
   12584:	4629      	mov	r1, r5
   12586:	481e      	ldr	r0, [pc, #120]	; (12600 <main+0x130>)
   12588:	f01b ff32 	bl	2e3f0 <log_0>
    //err = gcloud_connect(received_config_handler);
    err = gcloud_connect(NULL);
   1258c:	2000      	movs	r0, #0
   1258e:	f000 f93b 	bl	12808 <gcloud_connect>
    if (err)
   12592:	4601      	mov	r1, r0
   12594:	b168      	cbz	r0, 125b2 <main+0xe2>
    {
        LOG_ERR("Failed to connect to Google Cloud, error: %d", err);
   12596:	481b      	ldr	r0, [pc, #108]	; (12604 <main+0x134>)
   12598:	f044 0201 	orr.w	r2, r4, #1
   1259c:	f01b ff35 	bl	2e40a <log_1>
        /* Reboot */
        sys_reboot(0); //TODO: Handle error
   125a0:	2000      	movs	r0, #0
   125a2:	f002 f94d 	bl	14840 <sys_reboot>
	return z_impl_k_sleep(timeout);
   125a6:	2100      	movs	r1, #0
   125a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   125ac:	f019 f898 	bl	2b6e0 <z_impl_k_sleep>
        LOG_INF("Connected to Google Cloud");
	    k_sem_give(&connected_to_cloud);
    }
    
	//Sleeping main
    while (true)
   125b0:	e7f9      	b.n	125a6 <main+0xd6>
        LOG_INF("Connected to Google Cloud");
   125b2:	4629      	mov	r1, r5
   125b4:	4814      	ldr	r0, [pc, #80]	; (12608 <main+0x138>)
   125b6:	f01b ff1b 	bl	2e3f0 <log_0>
	z_impl_k_sem_give(sem);
   125ba:	4814      	ldr	r0, [pc, #80]	; (1260c <main+0x13c>)
   125bc:	f017 f9d0 	bl	29960 <z_impl_k_sem_give>
}
   125c0:	e7f1      	b.n	125a6 <main+0xd6>
   125c2:	bf00      	nop
   125c4:	000364b0 	.word	0x000364b0
   125c8:	00036550 	.word	0x00036550
   125cc:	0003742c 	.word	0x0003742c
   125d0:	00037449 	.word	0x00037449
   125d4:	0003745c 	.word	0x0003745c
   125d8:	00037473 	.word	0x00037473
   125dc:	0003748a 	.word	0x0003748a
   125e0:	000374b1 	.word	0x000374b1
   125e4:	00012441 	.word	0x00012441
   125e8:	20014f80 	.word	0x20014f80
   125ec:	2001e760 	.word	0x2001e760
   125f0:	00012c41 	.word	0x00012c41
   125f4:	20015168 	.word	0x20015168
   125f8:	20015e98 	.word	0x20015e98
   125fc:	000374c9 	.word	0x000374c9
   12600:	000374e8 	.word	0x000374e8
   12604:	00037503 	.word	0x00037503
   12608:	00037530 	.word	0x00037530
   1260c:	20014f68 	.word	0x20014f68

00012610 <reconnect_timer_handler>:
    int temp = k_msgq_put(q,data, timeout);
    irq_unlock(key);
    return temp;
}

void reconnect_timer_handler(struct k_timer *timer_id) {
   12610:	b530      	push	{r4, r5, lr}
   12612:	b087      	sub	sp, #28
    struct gcloud_event cmd = {
   12614:	2218      	movs	r2, #24
   12616:	2100      	movs	r1, #0
   12618:	4668      	mov	r0, sp
   1261a:	f022 ffd4 	bl	355c6 <memset>
   1261e:	2303      	movs	r3, #3
   12620:	f88d 3000 	strb.w	r3, [sp]
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   12624:	2200      	movs	r2, #0
   12626:	2300      	movs	r3, #0
   12628:	4669      	mov	r1, sp
   1262a:	480b      	ldr	r0, [pc, #44]	; (12658 <reconnect_timer_handler+0x48>)
   1262c:	f016 fcdc 	bl	28fe8 <z_impl_k_msgq_put>
        .type = RECONNECT_TIMEOUT,
        .param = {}
    };
    int err = k_msgq_put(&gcloud_msgq, &cmd, K_NO_WAIT);

    if (err) {
   12630:	4605      	mov	r5, r0
   12632:	b170      	cbz	r0, 12652 <reconnect_timer_handler+0x42>
   12634:	4b09      	ldr	r3, [pc, #36]	; (1265c <reconnect_timer_handler+0x4c>)
   12636:	4c0a      	ldr	r4, [pc, #40]	; (12660 <reconnect_timer_handler+0x50>)
   12638:	1ae4      	subs	r4, r4, r3
        LOG_ERR("k_msgq_put (reconnect_timeout) failed: [%d] %s", err, strerror(err));
   1263a:	f01b f811 	bl	2d660 <strerror>
   1263e:	08e4      	lsrs	r4, r4, #3
   12640:	01a4      	lsls	r4, r4, #6
   12642:	f044 0401 	orr.w	r4, r4, #1
   12646:	4602      	mov	r2, r0
   12648:	4623      	mov	r3, r4
   1264a:	4629      	mov	r1, r5
   1264c:	4805      	ldr	r0, [pc, #20]	; (12664 <reconnect_timer_handler+0x54>)
   1264e:	f01b fef0 	bl	2e432 <log_2>
        // TODO: Find a way to report this error to the application.
    }
}
   12652:	b007      	add	sp, #28
   12654:	bd30      	pop	{r4, r5, pc}
   12656:	bf00      	nop
   12658:	20014f00 	.word	0x20014f00
   1265c:	000364b0 	.word	0x000364b0
   12660:	00036548 	.word	0x00036548
   12664:	00037568 	.word	0x00037568

00012668 <make_jwt.constprop.0>:
static int make_jwt(char *buffer, size_t buffer_size) {
   12668:	b530      	push	{r4, r5, lr}
   1266a:	b089      	sub	sp, #36	; 0x24
    err = jwt_init_builder(&jb, buffer, buffer_size);
   1266c:	f44f 7280 	mov.w	r2, #256	; 0x100
   12670:	4924      	ldr	r1, [pc, #144]	; (12704 <make_jwt.constprop.0+0x9c>)
   12672:	a803      	add	r0, sp, #12
   12674:	f00a ffac 	bl	1d5d0 <jwt_init_builder>
    if (err != 0) {
   12678:	4d23      	ldr	r5, [pc, #140]	; (12708 <make_jwt.constprop.0+0xa0>)
   1267a:	4b24      	ldr	r3, [pc, #144]	; (1270c <make_jwt.constprop.0+0xa4>)
   1267c:	4604      	mov	r4, r0
   1267e:	1aed      	subs	r5, r5, r3
   12680:	08ed      	lsrs	r5, r5, #3
   12682:	01ad      	lsls	r5, r5, #6
   12684:	b140      	cbz	r0, 12698 <make_jwt.constprop.0+0x30>
        LOG_ERR("Unable to init JWT builder: %d", err);
   12686:	4601      	mov	r1, r0
   12688:	4821      	ldr	r0, [pc, #132]	; (12710 <make_jwt.constprop.0+0xa8>)
   1268a:	f045 0201 	orr.w	r2, r5, #1
        LOG_ERR("Unable to add JWT payload: %d", err);
   1268e:	f01b febc 	bl	2e40a <log_1>
}
   12692:	4620      	mov	r0, r4
   12694:	b009      	add	sp, #36	; 0x24
   12696:	bd30      	pop	{r4, r5, pc}
    date_time_now(&ntp);
   12698:	4668      	mov	r0, sp
   1269a:	f010 fdb5 	bl	23208 <date_time_now>
    int64_t unixtime = (ntp/1000);    //TODO: Is unix time valid as jwt timestamp?
   1269e:	e9dd 0100 	ldrd	r0, r1, [sp]
   126a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   126a6:	2300      	movs	r3, #0
   126a8:	f7fe fd52 	bl	11150 <__aeabi_ldivmod>
   126ac:	4604      	mov	r4, r0
    LOG_DBG("Unix Timestamp: %d\n", y);
   126ae:	4602      	mov	r2, r0
   126b0:	4918      	ldr	r1, [pc, #96]	; (12714 <make_jwt.constprop.0+0xac>)
   126b2:	4819      	ldr	r0, [pc, #100]	; (12718 <make_jwt.constprop.0+0xb0>)
   126b4:	f045 0304 	orr.w	r3, r5, #4
   126b8:	f01b febb 	bl	2e432 <log_2>
    err = jwt_add_payload(&jb, expiry_time, issue_time, CONFIG_GCLOUD_PROJECT_NAME);
   126bc:	f504 4128 	add.w	r1, r4, #43008	; 0xa800
   126c0:	4622      	mov	r2, r4
   126c2:	4b16      	ldr	r3, [pc, #88]	; (1271c <make_jwt.constprop.0+0xb4>)
   126c4:	31c0      	adds	r1, #192	; 0xc0
   126c6:	a803      	add	r0, sp, #12
   126c8:	f00a ff14 	bl	1d4f4 <jwt_add_payload>
    if (err != 0) {
   126cc:	4604      	mov	r4, r0
   126ce:	b120      	cbz	r0, 126da <make_jwt.constprop.0+0x72>
        LOG_ERR("Unable to add JWT payload: %d", err);
   126d0:	4621      	mov	r1, r4
   126d2:	4813      	ldr	r0, [pc, #76]	; (12720 <make_jwt.constprop.0+0xb8>)
   126d4:	f045 0201 	orr.w	r2, r5, #1
   126d8:	e7d9      	b.n	1268e <make_jwt.constprop.0+0x26>
    err = jwt_sign(&jb, zepfull_private_der, zepfull_private_der_len);
   126da:	4b12      	ldr	r3, [pc, #72]	; (12724 <make_jwt.constprop.0+0xbc>)
   126dc:	4912      	ldr	r1, [pc, #72]	; (12728 <make_jwt.constprop.0+0xc0>)
   126de:	681a      	ldr	r2, [r3, #0]
   126e0:	a803      	add	r0, sp, #12
   126e2:	f00a ff23 	bl	1d52c <jwt_sign>
    if (err != 0) {
   126e6:	4604      	mov	r4, r0
   126e8:	2800      	cmp	r0, #0
   126ea:	d1f1      	bne.n	126d0 <make_jwt.constprop.0+0x68>
    if (jb.overflowed != 0) {
   126ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
   126f0:	2b00      	cmp	r3, #0
   126f2:	d0ce      	beq.n	12692 <make_jwt.constprop.0+0x2a>
        LOG_ERR("JWT buffer overflowed");
   126f4:	480d      	ldr	r0, [pc, #52]	; (1272c <make_jwt.constprop.0+0xc4>)
   126f6:	f045 0101 	orr.w	r1, r5, #1
   126fa:	f01b fe79 	bl	2e3f0 <log_0>
        return -ENOMEM;
   126fe:	f06f 040b 	mvn.w	r4, #11
   12702:	e7c6      	b.n	12692 <make_jwt.constprop.0+0x2a>
   12704:	2001ac10 	.word	0x2001ac10
   12708:	00036548 	.word	0x00036548
   1270c:	000364b0 	.word	0x000364b0
   12710:	00037597 	.word	0x00037597
   12714:	00037ed3 	.word	0x00037ed3
   12718:	000375b6 	.word	0x000375b6
   1271c:	000375ce 	.word	0x000375ce
   12720:	000375dd 	.word	0x000375dd
   12724:	2001470c 	.word	0x2001470c
   12728:	20014bec 	.word	0x20014bec
   1272c:	000375fb 	.word	0x000375fb

00012730 <mqtt_thread_func>:
	fds.events = POLLIN;

	return 0;
}

void mqtt_thread_func(void *unused1, void *unused2, void *unused3) {
   12730:	b538      	push	{r3, r4, r5, lr}
    int err;

    while(1) {
            err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   12732:	4c2c      	ldr	r4, [pc, #176]	; (127e4 <mqtt_thread_func+0xb4>)
	return z_impl_zsock_poll(fds, nfds, timeout);
   12734:	4d2c      	ldr	r5, [pc, #176]	; (127e8 <mqtt_thread_func+0xb8>)
   12736:	4620      	mov	r0, r4
   12738:	f01f fd33 	bl	321a2 <mqtt_keepalive_time_left>
   1273c:	4602      	mov	r2, r0
   1273e:	2101      	movs	r1, #1
   12740:	4628      	mov	r0, r5
   12742:	f002 ff85 	bl	15650 <z_impl_zsock_poll>
            if (err < 0) {
   12746:	2800      	cmp	r0, #0
   12748:	da0f      	bge.n	1276a <mqtt_thread_func+0x3a>
   1274a:	4a28      	ldr	r2, [pc, #160]	; (127ec <mqtt_thread_func+0xbc>)
   1274c:	4c28      	ldr	r4, [pc, #160]	; (127f0 <mqtt_thread_func+0xc0>)
   1274e:	1aa4      	subs	r4, r4, r2
   12750:	08e4      	lsrs	r4, r4, #3
                LOG_ERR("poll: %d", errno);
   12752:	f01d feaf 	bl	304b4 <__errno>
   12756:	01a4      	lsls	r4, r4, #6
   12758:	f044 0401 	orr.w	r4, r4, #1
   1275c:	4622      	mov	r2, r4
   1275e:	6801      	ldr	r1, [r0, #0]
   12760:	4824      	ldr	r0, [pc, #144]	; (127f4 <mqtt_thread_func+0xc4>)
            if ((fds.revents & POLLNVAL) == POLLNVAL) {
                LOG_ERR("POLLNVAL");
                break;
            }
        }
}
   12762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                LOG_ERR("ERROR: mqtt_live: %d", err);
   12766:	f01b be50 	b.w	2e40a <log_1>
            err = mqtt_live(&client);
   1276a:	4620      	mov	r0, r4
   1276c:	f01f fcf2 	bl	32154 <mqtt_live>
            if ((err != 0) && (err != -EAGAIN)) {
   12770:	4601      	mov	r1, r0
   12772:	b158      	cbz	r0, 1278c <mqtt_thread_func+0x5c>
   12774:	f110 0f0b 	cmn.w	r0, #11
   12778:	d008      	beq.n	1278c <mqtt_thread_func+0x5c>
   1277a:	4a1d      	ldr	r2, [pc, #116]	; (127f0 <mqtt_thread_func+0xc0>)
   1277c:	4b1b      	ldr	r3, [pc, #108]	; (127ec <mqtt_thread_func+0xbc>)
                LOG_ERR("ERROR: mqtt_live: %d", err);
   1277e:	481e      	ldr	r0, [pc, #120]	; (127f8 <mqtt_thread_func+0xc8>)
   12780:	1ad2      	subs	r2, r2, r3
   12782:	08d2      	lsrs	r2, r2, #3
   12784:	0192      	lsls	r2, r2, #6
   12786:	f042 0201 	orr.w	r2, r2, #1
   1278a:	e7ea      	b.n	12762 <mqtt_thread_func+0x32>
            if ((fds.revents & POLLIN) == POLLIN) {
   1278c:	88eb      	ldrh	r3, [r5, #6]
   1278e:	07d9      	lsls	r1, r3, #31
   12790:	d50d      	bpl.n	127ae <mqtt_thread_func+0x7e>
                err = mqtt_input(&client);
   12792:	4620      	mov	r0, r4
   12794:	f01f fd1c 	bl	321d0 <mqtt_input>
                if (err != 0) {
   12798:	4601      	mov	r1, r0
   1279a:	b140      	cbz	r0, 127ae <mqtt_thread_func+0x7e>
   1279c:	4a14      	ldr	r2, [pc, #80]	; (127f0 <mqtt_thread_func+0xc0>)
   1279e:	4b13      	ldr	r3, [pc, #76]	; (127ec <mqtt_thread_func+0xbc>)
                    LOG_ERR("mqtt_input: %d", err);
   127a0:	4816      	ldr	r0, [pc, #88]	; (127fc <mqtt_thread_func+0xcc>)
   127a2:	1ad2      	subs	r2, r2, r3
   127a4:	08d2      	lsrs	r2, r2, #3
   127a6:	0192      	lsls	r2, r2, #6
   127a8:	f042 0201 	orr.w	r2, r2, #1
   127ac:	e7d9      	b.n	12762 <mqtt_thread_func+0x32>
            if ((fds.revents & POLLERR) == POLLERR) {
   127ae:	88eb      	ldrh	r3, [r5, #6]
   127b0:	071a      	lsls	r2, r3, #28
   127b2:	d50b      	bpl.n	127cc <mqtt_thread_func+0x9c>
   127b4:	490e      	ldr	r1, [pc, #56]	; (127f0 <mqtt_thread_func+0xc0>)
   127b6:	4b0d      	ldr	r3, [pc, #52]	; (127ec <mqtt_thread_func+0xbc>)
                LOG_ERR("POLLERR");
   127b8:	4811      	ldr	r0, [pc, #68]	; (12800 <mqtt_thread_func+0xd0>)
   127ba:	1ac9      	subs	r1, r1, r3
   127bc:	08c9      	lsrs	r1, r1, #3
   127be:	0189      	lsls	r1, r1, #6
   127c0:	f041 0101 	orr.w	r1, r1, #1
}
   127c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                LOG_ERR("POLLNVAL");
   127c8:	f01b be12 	b.w	2e3f0 <log_0>
            if ((fds.revents & POLLNVAL) == POLLNVAL) {
   127cc:	069b      	lsls	r3, r3, #26
   127ce:	d5b2      	bpl.n	12736 <mqtt_thread_func+0x6>
   127d0:	4907      	ldr	r1, [pc, #28]	; (127f0 <mqtt_thread_func+0xc0>)
   127d2:	4b06      	ldr	r3, [pc, #24]	; (127ec <mqtt_thread_func+0xbc>)
                LOG_ERR("POLLNVAL");
   127d4:	480b      	ldr	r0, [pc, #44]	; (12804 <mqtt_thread_func+0xd4>)
   127d6:	1ac9      	subs	r1, r1, r3
   127d8:	08c9      	lsrs	r1, r1, #3
   127da:	0189      	lsls	r1, r1, #6
   127dc:	f041 0101 	orr.w	r1, r1, #1
   127e0:	e7f0      	b.n	127c4 <mqtt_thread_func+0x94>
   127e2:	bf00      	nop
   127e4:	20015e9c 	.word	0x20015e9c
   127e8:	20015f1c 	.word	0x20015f1c
   127ec:	000364b0 	.word	0x000364b0
   127f0:	00036548 	.word	0x00036548
   127f4:	00037611 	.word	0x00037611
   127f8:	0003761a 	.word	0x0003761a
   127fc:	0003762f 	.word	0x0003762f
   12800:	0003763e 	.word	0x0003763e
   12804:	00037646 	.word	0x00037646

00012808 <gcloud_connect>:
int gcloud_connect(received_config_handler_t received_config_cb) {
   12808:	b5d0      	push	{r4, r6, r7, lr}
    err = k_msgq_put_atomic(&gcloud_msgq, &msg, K_FOREVER);
   1280a:	f04f 36ff 	mov.w	r6, #4294967295
   1280e:	f04f 37ff 	mov.w	r7, #4294967295
    received_config_handler = received_config_cb;
   12812:	4b0b      	ldr	r3, [pc, #44]	; (12840 <gcloud_connect+0x38>)
int gcloud_connect(received_config_handler_t received_config_cb) {
   12814:	b086      	sub	sp, #24
    received_config_handler = received_config_cb;
   12816:	6018      	str	r0, [r3, #0]
    struct gcloud_event msg = {
   12818:	2218      	movs	r2, #24
   1281a:	2100      	movs	r1, #0
   1281c:	4668      	mov	r0, sp
   1281e:	f022 fed2 	bl	355c6 <memset>
    err = k_msgq_put_atomic(&gcloud_msgq, &msg, K_FOREVER);
   12822:	4632      	mov	r2, r6
   12824:	463b      	mov	r3, r7
   12826:	4669      	mov	r1, sp
   12828:	4806      	ldr	r0, [pc, #24]	; (12844 <gcloud_connect+0x3c>)
   1282a:	f01b fa65 	bl	2dcf8 <k_msgq_put_atomic>
   1282e:	4604      	mov	r4, r0
	return z_impl_k_sem_take(sem, timeout);
   12830:	4805      	ldr	r0, [pc, #20]	; (12848 <gcloud_connect+0x40>)
   12832:	4632      	mov	r2, r6
   12834:	463b      	mov	r3, r7
   12836:	f017 f8d7 	bl	299e8 <z_impl_k_sem_take>
}
   1283a:	4620      	mov	r0, r4
   1283c:	b006      	add	sp, #24
   1283e:	bdd0      	pop	{r4, r6, r7, pc}
   12840:	20015f28 	.word	0x20015f28
   12844:	20014f00 	.word	0x20014f00
   12848:	20014f98 	.word	0x20014f98

0001284c <mqtt_event_handler>:
{
   1284c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12850:	b089      	sub	sp, #36	; 0x24
   12852:	460d      	mov	r5, r1
   12854:	4cb0      	ldr	r4, [pc, #704]	; (12b18 <mqtt_event_handler+0x2cc>)
   12856:	4bb1      	ldr	r3, [pc, #708]	; (12b1c <mqtt_event_handler+0x2d0>)
    LOG_INF("MQTT event: %d", evt->type);
   12858:	7809      	ldrb	r1, [r1, #0]
   1285a:	1b1b      	subs	r3, r3, r4
   1285c:	08db      	lsrs	r3, r3, #3
   1285e:	019c      	lsls	r4, r3, #6
   12860:	48af      	ldr	r0, [pc, #700]	; (12b20 <mqtt_event_handler+0x2d4>)
{
   12862:	af02      	add	r7, sp, #8
    LOG_INF("MQTT event: %d", evt->type);
   12864:	f044 0203 	orr.w	r2, r4, #3
   12868:	f01b fdcf 	bl	2e40a <log_1>
    switch (evt->type) {
   1286c:	782b      	ldrb	r3, [r5, #0]
   1286e:	2b08      	cmp	r3, #8
   12870:	f200 814d 	bhi.w	12b0e <mqtt_event_handler+0x2c2>
   12874:	e8df f013 	tbh	[pc, r3, lsl #1]
   12878:	00ba0009 	.word	0x00ba0009
   1287c:	00e7004a 	.word	0x00e7004a
   12880:	011500f5 	.word	0x011500f5
   12884:	012f0123 	.word	0x012f0123
   12888:	013d      	.short	0x013d
            LOG_DBG("Got CONNACK");
   1288a:	49a6      	ldr	r1, [pc, #664]	; (12b24 <mqtt_event_handler+0x2d8>)
   1288c:	48a6      	ldr	r0, [pc, #664]	; (12b28 <mqtt_event_handler+0x2dc>)
   1288e:	f044 0204 	orr.w	r2, r4, #4
   12892:	f01b fdba 	bl	2e40a <log_1>
            if (evt->result != 0) {
   12896:	69ed      	ldr	r5, [r5, #28]
   12898:	b175      	cbz	r5, 128b8 <mqtt_event_handler+0x6c>
                LOG_ERR("MQTT connect failed: [%d] %s", evt->result, strerror(evt->result));
   1289a:	4628      	mov	r0, r5
   1289c:	f01a fee0 	bl	2d660 <strerror>
   128a0:	f044 0401 	orr.w	r4, r4, #1
   128a4:	4623      	mov	r3, r4
   128a6:	4629      	mov	r1, r5
   128a8:	4602      	mov	r2, r0
   128aa:	48a0      	ldr	r0, [pc, #640]	; (12b2c <mqtt_event_handler+0x2e0>)
                LOG_ERR("k_msgq_put_atomic (subscribe) failed: [%d] %s", err, strerror(err));
   128ac:	f01b fdc1 	bl	2e432 <log_2>
}
   128b0:	371c      	adds	r7, #28
   128b2:	46bd      	mov	sp, r7
   128b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_sem_give(sem);
   128b8:	489d      	ldr	r0, [pc, #628]	; (12b30 <mqtt_event_handler+0x2e4>)
   128ba:	f017 f851 	bl	29960 <z_impl_k_sem_give>
            connected = true;
   128be:	2201      	movs	r2, #1
   128c0:	4b9c      	ldr	r3, [pc, #624]	; (12b34 <mqtt_event_handler+0x2e8>)
   128c2:	701a      	strb	r2, [r3, #0]
            connecting = false;
   128c4:	4b9c      	ldr	r3, [pc, #624]	; (12b38 <mqtt_event_handler+0x2ec>)
   128c6:	4a9d      	ldr	r2, [pc, #628]	; (12b3c <mqtt_event_handler+0x2f0>)
   128c8:	701d      	strb	r5, [r3, #0]
   128ca:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   128cc:	489c      	ldr	r0, [pc, #624]	; (12b40 <mqtt_event_handler+0x2f4>)
   128ce:	e9cd 2300 	strd	r2, r3, [sp]
   128d2:	f019 fbd7 	bl	2c084 <z_impl_k_timer_start>
            struct gcloud_event cmd = {
   128d6:	4629      	mov	r1, r5
   128d8:	2218      	movs	r2, #24
   128da:	4638      	mov	r0, r7
   128dc:	f022 fe73 	bl	355c6 <memset>
   128e0:	2305      	movs	r3, #5
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   128e2:	f04f 32ff 	mov.w	r2, #4294967295
            struct gcloud_event cmd = {
   128e6:	703b      	strb	r3, [r7, #0]
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   128e8:	4639      	mov	r1, r7
   128ea:	f04f 33ff 	mov.w	r3, #4294967295
   128ee:	4895      	ldr	r0, [pc, #596]	; (12b44 <mqtt_event_handler+0x2f8>)
   128f0:	f01b fa02 	bl	2dcf8 <k_msgq_put_atomic>
            if (err) {
   128f4:	4605      	mov	r5, r0
   128f6:	2800      	cmp	r0, #0
   128f8:	d0da      	beq.n	128b0 <mqtt_event_handler+0x64>
                LOG_ERR("k_msgq_put_atomic (subscribe) failed: [%d] %s", err, strerror(err));
   128fa:	f01a feb1 	bl	2d660 <strerror>
   128fe:	f044 0401 	orr.w	r4, r4, #1
   12902:	4602      	mov	r2, r0
   12904:	4623      	mov	r3, r4
   12906:	4629      	mov	r1, r5
   12908:	488f      	ldr	r0, [pc, #572]	; (12b48 <mqtt_event_handler+0x2fc>)
   1290a:	e7cf      	b.n	128ac <mqtt_event_handler+0x60>
            LOG_DBG("MQTT PUBLISH event");
   1290c:	4985      	ldr	r1, [pc, #532]	; (12b24 <mqtt_event_handler+0x2d8>)
   1290e:	488f      	ldr	r0, [pc, #572]	; (12b4c <mqtt_event_handler+0x300>)
   12910:	f044 0204 	orr.w	r2, r4, #4
   12914:	f01b fd79 	bl	2e40a <log_1>
            if (evt->result != 0) {
   12918:	69ee      	ldr	r6, [r5, #28]
   1291a:	b156      	cbz	r6, 12932 <mqtt_event_handler+0xe6>
                LOG_ERR("Publish event error: [%d] %s", evt->result, strerror(-evt->result));
   1291c:	4270      	negs	r0, r6
   1291e:	f01a fe9f 	bl	2d660 <strerror>
   12922:	f044 0801 	orr.w	r8, r4, #1
   12926:	4602      	mov	r2, r0
   12928:	4643      	mov	r3, r8
   1292a:	4631      	mov	r1, r6
   1292c:	4888      	ldr	r0, [pc, #544]	; (12b50 <mqtt_event_handler+0x304>)
   1292e:	f01b fd80 	bl	2e432 <log_2>
            if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   12932:	7b2b      	ldrb	r3, [r5, #12]
   12934:	2b01      	cmp	r3, #1
   12936:	d10b      	bne.n	12950 <mqtt_event_handler+0x104>
                const struct mqtt_puback_param ack = {
   12938:	8b2b      	ldrh	r3, [r5, #24]
                mqtt_publish_qos1_ack(&client, &ack);
   1293a:	4639      	mov	r1, r7
   1293c:	4885      	ldr	r0, [pc, #532]	; (12b54 <mqtt_event_handler+0x308>)
                const struct mqtt_puback_param ack = {
   1293e:	803b      	strh	r3, [r7, #0]
                mqtt_publish_qos1_ack(&client, &ack);
   12940:	f01f fb3f 	bl	31fc2 <mqtt_publish_qos1_ack>
                LOG_INF("Send acknowledgement for message with ID: %d", p->message_id);
   12944:	8b29      	ldrh	r1, [r5, #24]
   12946:	4884      	ldr	r0, [pc, #528]	; (12b58 <mqtt_event_handler+0x30c>)
   12948:	f044 0203 	orr.w	r2, r4, #3
   1294c:	f01b fd5d 	bl	2e40a <log_1>
            if(p->message.payload.len <= 2) {
   12950:	696a      	ldr	r2, [r5, #20]
   12952:	2a02      	cmp	r2, #2
   12954:	d805      	bhi.n	12962 <mqtt_event_handler+0x116>
                LOG_WRN("Received empty payload");
   12956:	4881      	ldr	r0, [pc, #516]	; (12b5c <mqtt_event_handler+0x310>)
   12958:	f044 0102 	orr.w	r1, r4, #2
            LOG_ERR("Unknown mqtt event type");
   1295c:	f01b fd48 	bl	2e3f0 <log_0>
   12960:	e7a6      	b.n	128b0 <mqtt_event_handler+0x64>
            LOG_DBG("Length of payload: %d", p->message.payload.len);
   12962:	f044 0604 	orr.w	r6, r4, #4
            mqtt_readall_publish_payload(&client, payload_buffer, p->message.payload.len);
   12966:	497e      	ldr	r1, [pc, #504]	; (12b60 <mqtt_event_handler+0x314>)
   12968:	487a      	ldr	r0, [pc, #488]	; (12b54 <mqtt_event_handler+0x308>)
   1296a:	f01f fc55 	bl	32218 <mqtt_readall_publish_payload>
            LOG_DBG("Length of payload: %d", p->message.payload.len);
   1296e:	4633      	mov	r3, r6
   12970:	696a      	ldr	r2, [r5, #20]
   12972:	496c      	ldr	r1, [pc, #432]	; (12b24 <mqtt_event_handler+0x2d8>)
   12974:	487b      	ldr	r0, [pc, #492]	; (12b64 <mqtt_event_handler+0x318>)
   12976:	f01b fd5c 	bl	2e432 <log_2>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1297a:	6868      	ldr	r0, [r5, #4]
   1297c:	f002 f8ea 	bl	14b54 <z_log_strdup>
            LOG_DBG("Topic: %s", log_strdup(p->message.topic.topic.utf8));
   12980:	4633      	mov	r3, r6
   12982:	4602      	mov	r2, r0
   12984:	4967      	ldr	r1, [pc, #412]	; (12b24 <mqtt_event_handler+0x2d8>)
   12986:	4878      	ldr	r0, [pc, #480]	; (12b68 <mqtt_event_handler+0x31c>)
   12988:	f01b fd53 	bl	2e432 <log_2>
            LOG_DBG("QoS: %d", p->message.topic.qos);
   1298c:	4633      	mov	r3, r6
   1298e:	7b2a      	ldrb	r2, [r5, #12]
   12990:	4964      	ldr	r1, [pc, #400]	; (12b24 <mqtt_event_handler+0x2d8>)
   12992:	4876      	ldr	r0, [pc, #472]	; (12b6c <mqtt_event_handler+0x320>)
   12994:	f01b fd4d 	bl	2e432 <log_2>
            data_print("Received: ", payload_buffer,
   12998:	696e      	ldr	r6, [r5, #20]
{
   1299a:	46e9      	mov	r9, sp
	char buf[len + 1];
   1299c:	f106 0308 	add.w	r3, r6, #8
   129a0:	f023 0307 	bic.w	r3, r3, #7
   129a4:	ebad 0d03 	sub.w	sp, sp, r3
   129a8:	f10d 0808 	add.w	r8, sp, #8
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   129ac:	4632      	mov	r2, r6
   129ae:	496c      	ldr	r1, [pc, #432]	; (12b60 <mqtt_event_handler+0x314>)
   129b0:	4640      	mov	r0, r8
   129b2:	f022 fde8 	bl	35586 <memcpy>
	buf[len] = 0;
   129b6:	2300      	movs	r3, #0
   129b8:	486d      	ldr	r0, [pc, #436]	; (12b70 <mqtt_event_handler+0x324>)
   129ba:	f808 3006 	strb.w	r3, [r8, r6]
   129be:	f002 f8c9 	bl	14b54 <z_log_strdup>
   129c2:	4606      	mov	r6, r0
   129c4:	4640      	mov	r0, r8
   129c6:	f002 f8c5 	bl	14b54 <z_log_strdup>
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   129ca:	f044 0403 	orr.w	r4, r4, #3
   129ce:	4602      	mov	r2, r0
   129d0:	4623      	mov	r3, r4
   129d2:	4631      	mov	r1, r6
   129d4:	4867      	ldr	r0, [pc, #412]	; (12b74 <mqtt_event_handler+0x328>)
   129d6:	f01b fd2c 	bl	2e432 <log_2>
            if (received_config_handler != NULL) {
   129da:	4b67      	ldr	r3, [pc, #412]	; (12b78 <mqtt_event_handler+0x32c>)
   129dc:	46cd      	mov	sp, r9
   129de:	681b      	ldr	r3, [r3, #0]
   129e0:	2b00      	cmp	r3, #0
   129e2:	f43f af65 	beq.w	128b0 <mqtt_event_handler+0x64>
                received_config_handler(&p->message);
   129e6:	1d28      	adds	r0, r5, #4
   129e8:	4798      	blx	r3
   129ea:	e761      	b.n	128b0 <mqtt_event_handler+0x64>
            LOG_DBG("MQTT client disconnected: [%d] %s", evt->result, strerror(-evt->result));
   129ec:	69ed      	ldr	r5, [r5, #28]
   129ee:	f044 0604 	orr.w	r6, r4, #4
   129f2:	4268      	negs	r0, r5
   129f4:	f01a fe34 	bl	2d660 <strerror>
   129f8:	462a      	mov	r2, r5
   129fa:	4603      	mov	r3, r0
   129fc:	4949      	ldr	r1, [pc, #292]	; (12b24 <mqtt_event_handler+0x2d8>)
   129fe:	485f      	ldr	r0, [pc, #380]	; (12b7c <mqtt_event_handler+0x330>)
   12a00:	f8ad 6000 	strh.w	r6, [sp]
   12a04:	f01b fd2e 	bl	2e464 <log_3>
	z_impl_k_timer_stop(timer);
   12a08:	484d      	ldr	r0, [pc, #308]	; (12b40 <mqtt_event_handler+0x2f4>)
   12a0a:	f022 fd1b 	bl	35444 <z_impl_k_timer_stop>
		arch_syscall_invoke1(*(uintptr_t *)&msgq, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
   12a0e:	484d      	ldr	r0, [pc, #308]	; (12b44 <mqtt_event_handler+0x2f8>)
   12a10:	f016 fc40 	bl	29294 <z_impl_k_msgq_purge>
            if (connected || connecting) {
   12a14:	4b47      	ldr	r3, [pc, #284]	; (12b34 <mqtt_event_handler+0x2e8>)
   12a16:	781b      	ldrb	r3, [r3, #0]
   12a18:	b923      	cbnz	r3, 12a24 <mqtt_event_handler+0x1d8>
   12a1a:	4b47      	ldr	r3, [pc, #284]	; (12b38 <mqtt_event_handler+0x2ec>)
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	f43f af46 	beq.w	128b0 <mqtt_event_handler+0x64>
                err = gcloud_connect(received_config_handler);
   12a24:	4b54      	ldr	r3, [pc, #336]	; (12b78 <mqtt_event_handler+0x32c>)
   12a26:	6818      	ldr	r0, [r3, #0]
   12a28:	f7ff feee 	bl	12808 <gcloud_connect>
                if (err) {
   12a2c:	4605      	mov	r5, r0
   12a2e:	2800      	cmp	r0, #0
   12a30:	f43f af3e 	beq.w	128b0 <mqtt_event_handler+0x64>
                    LOG_ERR("k_msgq_put_atomic (reconnect) [%d] %s", err, strerror(err));
   12a34:	f01a fe14 	bl	2d660 <strerror>
   12a38:	f044 0401 	orr.w	r4, r4, #1
   12a3c:	4602      	mov	r2, r0
   12a3e:	4623      	mov	r3, r4
   12a40:	4629      	mov	r1, r5
   12a42:	484f      	ldr	r0, [pc, #316]	; (12b80 <mqtt_event_handler+0x334>)
   12a44:	e732      	b.n	128ac <mqtt_event_handler+0x60>
            if (evt->result != 0) {
   12a46:	69e9      	ldr	r1, [r5, #28]
   12a48:	b129      	cbz	r1, 12a56 <mqtt_event_handler+0x20a>
                LOG_ERR("MQTT PUBACK error: %d", evt->result);
   12a4a:	484e      	ldr	r0, [pc, #312]	; (12b84 <mqtt_event_handler+0x338>)
   12a4c:	f044 0201 	orr.w	r2, r4, #1
                LOG_ERR("MQTT UNSUBACK error: %d", evt->result);
   12a50:	f01b fcdb 	bl	2e40a <log_1>
   12a54:	e72c      	b.n	128b0 <mqtt_event_handler+0x64>
            LOG_DBG("PUBACK packet id: %d\n", evt->param.puback.message_id);
   12a56:	88aa      	ldrh	r2, [r5, #4]
   12a58:	4932      	ldr	r1, [pc, #200]	; (12b24 <mqtt_event_handler+0x2d8>)
   12a5a:	484b      	ldr	r0, [pc, #300]	; (12b88 <mqtt_event_handler+0x33c>)
   12a5c:	f044 0304 	orr.w	r3, r4, #4
   12a60:	e724      	b.n	128ac <mqtt_event_handler+0x60>
            if (evt->result != 0) {
   12a62:	69e9      	ldr	r1, [r5, #28]
   12a64:	b119      	cbz	r1, 12a6e <mqtt_event_handler+0x222>
                LOG_ERR("MQTT PUBREC error: %d", evt->result);
   12a66:	4849      	ldr	r0, [pc, #292]	; (12b8c <mqtt_event_handler+0x340>)
   12a68:	f044 0201 	orr.w	r2, r4, #1
   12a6c:	e7f0      	b.n	12a50 <mqtt_event_handler+0x204>
            LOG_DBG("PUBREC packet id: %u", evt->param.pubrec.message_id);
   12a6e:	88aa      	ldrh	r2, [r5, #4]
   12a70:	492c      	ldr	r1, [pc, #176]	; (12b24 <mqtt_event_handler+0x2d8>)
   12a72:	4847      	ldr	r0, [pc, #284]	; (12b90 <mqtt_event_handler+0x344>)
   12a74:	f044 0304 	orr.w	r3, r4, #4
   12a78:	f01b fcdb 	bl	2e432 <log_2>
            const struct mqtt_pubrel_param rel_param = {
   12a7c:	88ab      	ldrh	r3, [r5, #4]
            err = mqtt_publish_qos2_release(&client, &rel_param);
   12a7e:	4639      	mov	r1, r7
   12a80:	4834      	ldr	r0, [pc, #208]	; (12b54 <mqtt_event_handler+0x308>)
            const struct mqtt_pubrel_param rel_param = {
   12a82:	803b      	strh	r3, [r7, #0]
            err = mqtt_publish_qos2_release(&client, &rel_param);
   12a84:	f01f fac4 	bl	32010 <mqtt_publish_qos2_release>
            if (err != 0) {
   12a88:	4605      	mov	r5, r0
   12a8a:	2800      	cmp	r0, #0
   12a8c:	f43f af10 	beq.w	128b0 <mqtt_event_handler+0x64>
                LOG_ERR("Failed to send MQTT PUBREL: [%d] %s", err, strerror(err));
   12a90:	f01a fde6 	bl	2d660 <strerror>
   12a94:	f044 0401 	orr.w	r4, r4, #1
   12a98:	4602      	mov	r2, r0
   12a9a:	4623      	mov	r3, r4
   12a9c:	4629      	mov	r1, r5
   12a9e:	483d      	ldr	r0, [pc, #244]	; (12b94 <mqtt_event_handler+0x348>)
   12aa0:	e704      	b.n	128ac <mqtt_event_handler+0x60>
            LOG_DBG("MQTT PUBREL event");
   12aa2:	4920      	ldr	r1, [pc, #128]	; (12b24 <mqtt_event_handler+0x2d8>)
   12aa4:	483c      	ldr	r0, [pc, #240]	; (12b98 <mqtt_event_handler+0x34c>)
   12aa6:	f044 0204 	orr.w	r2, r4, #4
   12aaa:	f01b fcae 	bl	2e40a <log_1>
            if (evt->result != 0) {
   12aae:	69e9      	ldr	r1, [r5, #28]
   12ab0:	2900      	cmp	r1, #0
   12ab2:	f43f aefd 	beq.w	128b0 <mqtt_event_handler+0x64>
                LOG_ERR("PUBREL error: %d", evt->result);
   12ab6:	4839      	ldr	r0, [pc, #228]	; (12b9c <mqtt_event_handler+0x350>)
   12ab8:	f044 0201 	orr.w	r2, r4, #1
   12abc:	e7c8      	b.n	12a50 <mqtt_event_handler+0x204>
            if (evt->result != 0) {
   12abe:	69e9      	ldr	r1, [r5, #28]
   12ac0:	b119      	cbz	r1, 12aca <mqtt_event_handler+0x27e>
                LOG_ERR("MQTT PUBCOMP error: %d", evt->result);
   12ac2:	4837      	ldr	r0, [pc, #220]	; (12ba0 <mqtt_event_handler+0x354>)
   12ac4:	f044 0201 	orr.w	r2, r4, #1
   12ac8:	e7c2      	b.n	12a50 <mqtt_event_handler+0x204>
            LOG_DBG("PUBCOMP packet id: %u", evt->param.pubcomp.message_id);
   12aca:	88aa      	ldrh	r2, [r5, #4]
   12acc:	4915      	ldr	r1, [pc, #84]	; (12b24 <mqtt_event_handler+0x2d8>)
   12ace:	4835      	ldr	r0, [pc, #212]	; (12ba4 <mqtt_event_handler+0x358>)
   12ad0:	f044 0304 	orr.w	r3, r4, #4
   12ad4:	e6ea      	b.n	128ac <mqtt_event_handler+0x60>
            LOG_DBG("Got SUBACK");
   12ad6:	4913      	ldr	r1, [pc, #76]	; (12b24 <mqtt_event_handler+0x2d8>)
   12ad8:	4833      	ldr	r0, [pc, #204]	; (12ba8 <mqtt_event_handler+0x35c>)
   12ada:	f044 0204 	orr.w	r2, r4, #4
   12ade:	f01b fc94 	bl	2e40a <log_1>
            if (evt->result != 0) {
   12ae2:	69e9      	ldr	r1, [r5, #28]
   12ae4:	2900      	cmp	r1, #0
   12ae6:	f43f aee3 	beq.w	128b0 <mqtt_event_handler+0x64>
                LOG_ERR("MQTT SUBACK error: %d", evt->result);
   12aea:	4830      	ldr	r0, [pc, #192]	; (12bac <mqtt_event_handler+0x360>)
   12aec:	f044 0201 	orr.w	r2, r4, #1
   12af0:	e7ae      	b.n	12a50 <mqtt_event_handler+0x204>
            LOG_DBG("MQTT UNSUBACK event");
   12af2:	490c      	ldr	r1, [pc, #48]	; (12b24 <mqtt_event_handler+0x2d8>)
   12af4:	482e      	ldr	r0, [pc, #184]	; (12bb0 <mqtt_event_handler+0x364>)
   12af6:	f044 0204 	orr.w	r2, r4, #4
   12afa:	f01b fc86 	bl	2e40a <log_1>
            if (evt->result != 0) {
   12afe:	69e9      	ldr	r1, [r5, #28]
   12b00:	2900      	cmp	r1, #0
   12b02:	f43f aed5 	beq.w	128b0 <mqtt_event_handler+0x64>
                LOG_ERR("MQTT UNSUBACK error: %d", evt->result);
   12b06:	482b      	ldr	r0, [pc, #172]	; (12bb4 <mqtt_event_handler+0x368>)
   12b08:	f044 0201 	orr.w	r2, r4, #1
   12b0c:	e7a0      	b.n	12a50 <mqtt_event_handler+0x204>
            LOG_ERR("Unknown mqtt event type");
   12b0e:	482a      	ldr	r0, [pc, #168]	; (12bb8 <mqtt_event_handler+0x36c>)
   12b10:	f044 0101 	orr.w	r1, r4, #1
   12b14:	e722      	b.n	1295c <mqtt_event_handler+0x110>
   12b16:	bf00      	nop
   12b18:	000364b0 	.word	0x000364b0
   12b1c:	00036548 	.word	0x00036548
   12b20:	0003764f 	.word	0x0003764f
   12b24:	00037ee8 	.word	0x00037ee8
   12b28:	0003765e 	.word	0x0003765e
   12b2c:	0003766e 	.word	0x0003766e
   12b30:	20014f98 	.word	0x20014f98
   12b34:	2001ac0e 	.word	0x2001ac0e
   12b38:	2001ac0f 	.word	0x2001ac0f
   12b3c:	54600000 	.word	0x54600000
   12b40:	20014d50 	.word	0x20014d50
   12b44:	20014f00 	.word	0x20014f00
   12b48:	0003768b 	.word	0x0003768b
   12b4c:	000376b9 	.word	0x000376b9
   12b50:	000376d0 	.word	0x000376d0
   12b54:	20015e9c 	.word	0x20015e9c
   12b58:	000376ed 	.word	0x000376ed
   12b5c:	0003771a 	.word	0x0003771a
   12b60:	2001ad10 	.word	0x2001ad10
   12b64:	00037731 	.word	0x00037731
   12b68:	0003774b 	.word	0x0003774b
   12b6c:	00037759 	.word	0x00037759
   12b70:	00037765 	.word	0x00037765
   12b74:	00037770 	.word	0x00037770
   12b78:	20015f28 	.word	0x20015f28
   12b7c:	00037775 	.word	0x00037775
   12b80:	0003779b 	.word	0x0003779b
   12b84:	000377c1 	.word	0x000377c1
   12b88:	000377d7 	.word	0x000377d7
   12b8c:	000377f1 	.word	0x000377f1
   12b90:	00037807 	.word	0x00037807
   12b94:	00037820 	.word	0x00037820
   12b98:	00037844 	.word	0x00037844
   12b9c:	0003785a 	.word	0x0003785a
   12ba0:	0003786b 	.word	0x0003786b
   12ba4:	00037882 	.word	0x00037882
   12ba8:	0003789c 	.word	0x0003789c
   12bac:	000378ab 	.word	0x000378ab
   12bb0:	000378c1 	.word	0x000378c1
   12bb4:	000378d9 	.word	0x000378d9
   12bb8:	000378f1 	.word	0x000378f1

00012bbc <gcloud_provision>:
int gcloud_provision(void) {
   12bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12bc0:	2500      	movs	r5, #0
   12bc2:	4c19      	ldr	r4, [pc, #100]	; (12c28 <gcloud_provision+0x6c>)
   12bc4:	4b19      	ldr	r3, [pc, #100]	; (12c2c <gcloud_provision+0x70>)
        err = modem_key_mgmt_delete(sec_tag, type);
   12bc6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 12c38 <gcloud_provision+0x7c>
   12bca:	1ae4      	subs	r4, r4, r3
   12bcc:	08e4      	lsrs	r4, r4, #3
            LOG_ERR("key delete err: [%d] %s", err, strerror(err));
   12bce:	01a7      	lsls	r7, r4, #6
   12bd0:	f047 0701 	orr.w	r7, r7, #1
        err = modem_key_mgmt_delete(sec_tag, type);
   12bd4:	4640      	mov	r0, r8
   12bd6:	b2e9      	uxtb	r1, r5
   12bd8:	f010 f88e 	bl	22cf8 <modem_key_mgmt_delete>
        if (err) {
   12bdc:	4606      	mov	r6, r0
   12bde:	b138      	cbz	r0, 12bf0 <gcloud_provision+0x34>
            LOG_ERR("key delete err: [%d] %s", err, strerror(err));
   12be0:	f01a fd3e 	bl	2d660 <strerror>
   12be4:	463b      	mov	r3, r7
   12be6:	4602      	mov	r2, r0
   12be8:	4631      	mov	r1, r6
   12bea:	4811      	ldr	r0, [pc, #68]	; (12c30 <gcloud_provision+0x74>)
   12bec:	f01b fc21 	bl	2e432 <log_2>
    for (enum modem_key_mgmt_cred_type type = 0; type < 5; type++) {
   12bf0:	3501      	adds	r5, #1
   12bf2:	2d05      	cmp	r5, #5
   12bf4:	d1ee      	bne.n	12bd4 <gcloud_provision+0x18>
    err = modem_key_mgmt_write(
   12bf6:	480f      	ldr	r0, [pc, #60]	; (12c34 <gcloud_provision+0x78>)
   12bf8:	f7fe fc82 	bl	11500 <strlen>
   12bfc:	2100      	movs	r1, #0
   12bfe:	4603      	mov	r3, r0
   12c00:	4a0c      	ldr	r2, [pc, #48]	; (12c34 <gcloud_provision+0x78>)
   12c02:	480d      	ldr	r0, [pc, #52]	; (12c38 <gcloud_provision+0x7c>)
   12c04:	f010 f84c 	bl	22ca0 <modem_key_mgmt_write>
    if (err != 0) {
   12c08:	4605      	mov	r5, r0
   12c0a:	b150      	cbz	r0, 12c22 <gcloud_provision+0x66>
        LOG_ERR("GCLOUD_CA_CERTIFICATE err: [%d] %s\n", err, strerror(err));
   12c0c:	f01a fd28 	bl	2d660 <strerror>
   12c10:	01a4      	lsls	r4, r4, #6
   12c12:	f044 0401 	orr.w	r4, r4, #1
   12c16:	4602      	mov	r2, r0
   12c18:	4623      	mov	r3, r4
   12c1a:	4629      	mov	r1, r5
   12c1c:	4807      	ldr	r0, [pc, #28]	; (12c3c <gcloud_provision+0x80>)
   12c1e:	f01b fc08 	bl	2e432 <log_2>
}
   12c22:	4628      	mov	r0, r5
   12c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c28:	00036548 	.word	0x00036548
   12c2c:	000364b0 	.word	0x000364b0
   12c30:	00037909 	.word	0x00037909
   12c34:	00037921 	.word	0x00037921
   12c38:	01010000 	.word	0x01010000
   12c3c:	00037b57 	.word	0x00037b57

00012c40 <gcloud_thread>:

extern void gcloud_thread(void *unused1, void *unused2, void *unused3) 
{
   12c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bool sent_flag = false;

    struct gcloud_event event;
    struct mqtt_publish_param msg;

    k_timer_init(&reconnect_timer, reconnect_timer_handler, NULL);
   12c44:	2200      	movs	r2, #0
   12c46:	49b1      	ldr	r1, [pc, #708]	; (12f0c <gcloud_thread+0x2cc>)
   12c48:	48b1      	ldr	r0, [pc, #708]	; (12f10 <gcloud_thread+0x2d0>)
{
   12c4a:	b0ab      	sub	sp, #172	; 0xac
    k_timer_init(&reconnect_timer, reconnect_timer_handler, NULL);
   12c4c:	f022 fbee 	bl	3542c <k_timer_init>
   12c50:	4cb0      	ldr	r4, [pc, #704]	; (12f14 <gcloud_thread+0x2d4>)
   12c52:	4bb1      	ldr	r3, [pc, #708]	; (12f18 <gcloud_thread+0x2d8>)

    LOG_INF("Google Cloud Thread Running\n");
   12c54:	48b1      	ldr	r0, [pc, #708]	; (12f1c <gcloud_thread+0x2dc>)
   12c56:	1ae4      	subs	r4, r4, r3
   12c58:	08e4      	lsrs	r4, r4, #3
   12c5a:	01a4      	lsls	r4, r4, #6
   12c5c:	f044 0103 	orr.w	r1, r4, #3
   12c60:	f01b fbc6 	bl	2e3f0 <log_0>
    while (true) {

        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   12c64:	f8df 8348 	ldr.w	r8, [pc, #840]	; 12fb0 <gcloud_thread+0x370>
                }

            };
            break;
            case SUBSCRIBE:
            if (connected) {
   12c68:	4fad      	ldr	r7, [pc, #692]	; (12f20 <gcloud_thread+0x2e0>)
        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   12c6a:	f04f 33ff 	mov.w	r3, #4294967295
   12c6e:	f04f 32ff 	mov.w	r2, #4294967295
   12c72:	4640      	mov	r0, r8
   12c74:	a90a      	add	r1, sp, #40	; 0x28
   12c76:	f01b f82f 	bl	2dcd8 <k_msgq_get_atomic>
        switch (event.type) {
   12c7a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   12c7e:	2b05      	cmp	r3, #5
   12c80:	f200 81fa 	bhi.w	13078 <gcloud_thread+0x438>
   12c84:	e8df f013 	tbh	[pc, r3, lsl #1]
   12c88:	00de0006 	.word	0x00de0006
   12c8c:	01960111 	.word	0x01960111
   12c90:	01d8019c 	.word	0x01d8019c
    struct addrinfo hints = {
   12c94:	2601      	movs	r6, #1
                LOG_INF("Got CONNECT command");
   12c96:	48a3      	ldr	r0, [pc, #652]	; (12f24 <gcloud_thread+0x2e4>)
   12c98:	f044 0103 	orr.w	r1, r4, #3
                LOG_DBG("Initiating broker");
   12c9c:	f044 0904 	orr.w	r9, r4, #4
                LOG_INF("Got CONNECT command");
   12ca0:	f01b fba6 	bl	2e3f0 <log_0>
                LOG_DBG("Initiating broker");
   12ca4:	464a      	mov	r2, r9
   12ca6:	49a0      	ldr	r1, [pc, #640]	; (12f28 <gcloud_thread+0x2e8>)
   12ca8:	48a0      	ldr	r0, [pc, #640]	; (12f2c <gcloud_thread+0x2ec>)
   12caa:	f01b fbae 	bl	2e40a <log_1>
    struct addrinfo hints = {
   12cae:	2250      	movs	r2, #80	; 0x50
   12cb0:	2100      	movs	r1, #0
   12cb2:	a816      	add	r0, sp, #88	; 0x58
   12cb4:	f022 fc87 	bl	355c6 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   12cb8:	2100      	movs	r1, #0
   12cba:	489d      	ldr	r0, [pc, #628]	; (12f30 <gcloud_thread+0x2f0>)
   12cbc:	ab09      	add	r3, sp, #36	; 0x24
   12cbe:	aa16      	add	r2, sp, #88	; 0x58
   12cc0:	e9cd 6618 	strd	r6, r6, [sp, #96]	; 0x60
   12cc4:	f01b fe39 	bl	2e93a <zsock_getaddrinfo>
    if (err) {
   12cc8:	4605      	mov	r5, r0
   12cca:	2800      	cmp	r0, #0
   12ccc:	d05d      	beq.n	12d8a <gcloud_thread+0x14a>
        LOG_ERR("ERROR: getaddrinfo failed [%d] %s", err, strerror(err));
   12cce:	f01a fcc7 	bl	2d660 <strerror>
   12cd2:	4326      	orrs	r6, r4
   12cd4:	4602      	mov	r2, r0
   12cd6:	4633      	mov	r3, r6
   12cd8:	4629      	mov	r1, r5
   12cda:	4896      	ldr	r0, [pc, #600]	; (12f34 <gcloud_thread+0x2f4>)
   12cdc:	f01b fba9 	bl	2e432 <log_2>
                LOG_DBG("Making JWT");
   12ce0:	f044 0904 	orr.w	r9, r4, #4
   12ce4:	464a      	mov	r2, r9
   12ce6:	4990      	ldr	r1, [pc, #576]	; (12f28 <gcloud_thread+0x2e8>)
   12ce8:	4893      	ldr	r0, [pc, #588]	; (12f38 <gcloud_thread+0x2f8>)
    mqtt_client_init(&client);
   12cea:	4d94      	ldr	r5, [pc, #592]	; (12f3c <gcloud_thread+0x2fc>)
                LOG_DBG("Making JWT");
   12cec:	f01b fb8d 	bl	2e40a <log_1>
                make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   12cf0:	f7ff fcba 	bl	12668 <make_jwt.constprop.0>
                LOG_DBG("Initiating client");
   12cf4:	464a      	mov	r2, r9
   12cf6:	498c      	ldr	r1, [pc, #560]	; (12f28 <gcloud_thread+0x2e8>)
   12cf8:	4891      	ldr	r0, [pc, #580]	; (12f40 <gcloud_thread+0x300>)
   12cfa:	f01b fb86 	bl	2e40a <log_1>
    mqtt_client_init(&client);
   12cfe:	4628      	mov	r0, r5
   12d00:	f01f f8be 	bl	31e80 <mqtt_client_init>
    int err = make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   12d04:	f7ff fcb0 	bl	12668 <make_jwt.constprop.0>
    if (err != 0) {
   12d08:	4606      	mov	r6, r0
   12d0a:	2800      	cmp	r0, #0
   12d0c:	d05d      	beq.n	12dca <gcloud_thread+0x18a>
        LOG_ERR("Unable to make jwt: [%d] %s", err, strerror(-err));
   12d0e:	4240      	negs	r0, r0
   12d10:	f01a fca6 	bl	2d660 <strerror>
   12d14:	f044 0901 	orr.w	r9, r4, #1
   12d18:	4602      	mov	r2, r0
   12d1a:	464b      	mov	r3, r9
   12d1c:	4631      	mov	r1, r6
   12d1e:	4889      	ldr	r0, [pc, #548]	; (12f44 <gcloud_thread+0x304>)
   12d20:	f01b fb87 	bl	2e432 <log_2>
                LOG_DBG("Connecting mqtt");
   12d24:	4980      	ldr	r1, [pc, #512]	; (12f28 <gcloud_thread+0x2e8>)
   12d26:	4888      	ldr	r0, [pc, #544]	; (12f48 <gcloud_thread+0x308>)
   12d28:	f044 0204 	orr.w	r2, r4, #4
   12d2c:	f01b fb6d 	bl	2e40a <log_1>
                connecting = true;
   12d30:	2201      	movs	r2, #1
   12d32:	4b86      	ldr	r3, [pc, #536]	; (12f4c <gcloud_thread+0x30c>)
                err = mqtt_connect(&client);
   12d34:	4881      	ldr	r0, [pc, #516]	; (12f3c <gcloud_thread+0x2fc>)
                connecting = true;
   12d36:	701a      	strb	r2, [r3, #0]
                err = mqtt_connect(&client);
   12d38:	f01f f8bb 	bl	31eb2 <mqtt_connect>
                if (err) {
   12d3c:	4606      	mov	r6, r0
   12d3e:	b150      	cbz	r0, 12d56 <gcloud_thread+0x116>
                    LOG_ERR("mqtt_connect failed: [%d] %s", err, strerror(-err));
   12d40:	4240      	negs	r0, r0
   12d42:	f01a fc8d 	bl	2d660 <strerror>
   12d46:	f044 0901 	orr.w	r9, r4, #1
   12d4a:	4602      	mov	r2, r0
   12d4c:	464b      	mov	r3, r9
   12d4e:	4631      	mov	r1, r6
   12d50:	487f      	ldr	r0, [pc, #508]	; (12f50 <gcloud_thread+0x310>)
   12d52:	f01b fb6e 	bl	2e432 <log_2>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   12d56:	4b7f      	ldr	r3, [pc, #508]	; (12f54 <gcloud_thread+0x314>)
   12d58:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   12d5a:	601a      	str	r2, [r3, #0]
	fds.events = POLLIN;
   12d5c:	2201      	movs	r2, #1
   12d5e:	809a      	strh	r2, [r3, #4]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12d60:	2200      	movs	r2, #0
   12d62:	2300      	movs	r3, #0
   12d64:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12d68:	2300      	movs	r3, #0
   12d6a:	2207      	movs	r2, #7
   12d6c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12d70:	e9cd 2303 	strd	r2, r3, [sp, #12]
   12d74:	9300      	str	r3, [sp, #0]
   12d76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12d7a:	4b77      	ldr	r3, [pc, #476]	; (12f58 <gcloud_thread+0x318>)
   12d7c:	4977      	ldr	r1, [pc, #476]	; (12f5c <gcloud_thread+0x31c>)
   12d7e:	4878      	ldr	r0, [pc, #480]	; (12f60 <gcloud_thread+0x320>)
   12d80:	f016 f81a 	bl	28db8 <z_impl_k_thread_create>
                mqtt_tid = k_thread_create(&mqtt_thread, mqtt_stack_area, K_THREAD_STACK_SIZEOF(mqtt_stack_area),
   12d84:	4b77      	ldr	r3, [pc, #476]	; (12f64 <gcloud_thread+0x324>)
   12d86:	6018      	str	r0, [r3, #0]
                break;
   12d88:	e76f      	b.n	12c6a <gcloud_thread+0x2a>
    addr = result;
   12d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    while (addr != NULL) {
   12d8c:	b17b      	cbz	r3, 12dae <gcloud_thread+0x16e>
        if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   12d8e:	6959      	ldr	r1, [r3, #20]
   12d90:	2908      	cmp	r1, #8
   12d92:	d110      	bne.n	12db6 <gcloud_thread+0x176>
            broker4->sin_port = htons(BROKER_PORT);
   12d94:	f24b 3122 	movw	r1, #45858	; 0xb322
                ->sin_addr.s_addr;
   12d98:	699b      	ldr	r3, [r3, #24]
            LOG_DBG("IPv4 Address found 0x%08x",
   12d9a:	4873      	ldr	r0, [pc, #460]	; (12f68 <gcloud_thread+0x328>)
                ->sin_addr.s_addr;
   12d9c:	685a      	ldr	r2, [r3, #4]
            broker4->sin_addr.s_addr =
   12d9e:	4b73      	ldr	r3, [pc, #460]	; (12f6c <gcloud_thread+0x32c>)
            broker4->sin_port = htons(BROKER_PORT);
   12da0:	8059      	strh	r1, [r3, #2]
            broker4->sin_addr.s_addr =
   12da2:	605a      	str	r2, [r3, #4]
            broker4->sin_family = AF_INET;
   12da4:	801e      	strh	r6, [r3, #0]
            LOG_DBG("IPv4 Address found 0x%08x",
   12da6:	4972      	ldr	r1, [pc, #456]	; (12f70 <gcloud_thread+0x330>)
   12da8:	464b      	mov	r3, r9
   12daa:	f01b fb42 	bl	2e432 <log_2>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   12dae:	9809      	ldr	r0, [sp, #36]	; 0x24
   12db0:	f01b fdc5 	bl	2e93e <zsock_freeaddrinfo>
   12db4:	e794      	b.n	12ce0 <gcloud_thread+0xa0>
            LOG_ERR("ai_addrlen = %u should be %u or %u",
   12db6:	f044 0301 	orr.w	r3, r4, #1
   12dba:	f8ad 3000 	strh.w	r3, [sp]
   12dbe:	2208      	movs	r2, #8
   12dc0:	2318      	movs	r3, #24
   12dc2:	486c      	ldr	r0, [pc, #432]	; (12f74 <gcloud_thread+0x334>)
   12dc4:	f01b fb4e 	bl	2e464 <log_3>
        break;
   12dc8:	e7f1      	b.n	12dae <gcloud_thread+0x16e>
   12dca:	486b      	ldr	r0, [pc, #428]	; (12f78 <gcloud_thread+0x338>)
   12dcc:	f001 fec2 	bl	14b54 <z_log_strdup>
    LOG_DBG("JWT:\n%s\n", log_strdup(jwt_buffer));
   12dd0:	464b      	mov	r3, r9
   12dd2:	4602      	mov	r2, r0
   12dd4:	4969      	ldr	r1, [pc, #420]	; (12f7c <gcloud_thread+0x33c>)
   12dd6:	486a      	ldr	r0, [pc, #424]	; (12f80 <gcloud_thread+0x340>)
   12dd8:	f01b fb2b 	bl	2e432 <log_2>
    LOG_DBG("JWT length: %d\n", strlen(jwt_buffer));
   12ddc:	4866      	ldr	r0, [pc, #408]	; (12f78 <gcloud_thread+0x338>)
   12dde:	f7fe fb8f 	bl	11500 <strlen>
   12de2:	464b      	mov	r3, r9
   12de4:	4602      	mov	r2, r0
   12de6:	4965      	ldr	r1, [pc, #404]	; (12f7c <gcloud_thread+0x33c>)
   12de8:	4866      	ldr	r0, [pc, #408]	; (12f84 <gcloud_thread+0x344>)
   12dea:	f01b fb22 	bl	2e432 <log_2>
    jwt_token.size = strlen(jwt_buffer);
   12dee:	4862      	ldr	r0, [pc, #392]	; (12f78 <gcloud_thread+0x338>)
   12df0:	f7fe fb86 	bl	11500 <strlen>
   12df4:	4e64      	ldr	r6, [pc, #400]	; (12f88 <gcloud_thread+0x348>)
    client.broker = &mqtt_broker;
   12df6:	4b5d      	ldr	r3, [pc, #372]	; (12f6c <gcloud_thread+0x32c>)
    jwt_token.size = strlen(jwt_buffer);
   12df8:	6070      	str	r0, [r6, #4]
    client.broker = &mqtt_broker;
   12dfa:	652b      	str	r3, [r5, #80]	; 0x50
    client.client_id.utf8 = (uint8_t *)GCLOUD_ID;
   12dfc:	4863      	ldr	r0, [pc, #396]	; (12f8c <gcloud_thread+0x34c>)
    client.evt_cb = mqtt_event_handler;
   12dfe:	4b64      	ldr	r3, [pc, #400]	; (12f90 <gcloud_thread+0x350>)
    client.client_id.utf8 = (uint8_t *)GCLOUD_ID;
   12e00:	64a8      	str	r0, [r5, #72]	; 0x48
    client.evt_cb = mqtt_event_handler;
   12e02:	666b      	str	r3, [r5, #100]	; 0x64
    client.client_id.size = strlen(GCLOUD_ID);
   12e04:	f7fe fb7c 	bl	11500 <strlen>
	client.user_name = &username;
   12e08:	4b62      	ldr	r3, [pc, #392]	; (12f94 <gcloud_thread+0x354>)
    client.client_id.size = strlen(GCLOUD_ID);
   12e0a:	64e8      	str	r0, [r5, #76]	; 0x4c
	client.user_name = &username;
   12e0c:	656b      	str	r3, [r5, #84]	; 0x54
    client.protocol_version = MQTT_VERSION_3_1_1;
   12e0e:	2304      	movs	r3, #4
   12e10:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
	client.rx_buf = rx_buffer;
   12e14:	4b60      	ldr	r3, [pc, #384]	; (12f98 <gcloud_thread+0x358>)
	client.password = &jwt_token;
   12e16:	65ae      	str	r6, [r5, #88]	; 0x58
	client.rx_buf = rx_buffer;
   12e18:	66ab      	str	r3, [r5, #104]	; 0x68
    client.rx_buf_size = 512;
   12e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
   12e1e:	66eb      	str	r3, [r5, #108]	; 0x6c
	client.tx_buf = tx_buffer;
   12e20:	4b5e      	ldr	r3, [pc, #376]	; (12f9c <gcloud_thread+0x35c>)
   12e22:	672b      	str	r3, [r5, #112]	; 0x70
    client.tx_buf_size = 1024;
   12e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
   12e28:	676b      	str	r3, [r5, #116]	; 0x74
	client.transport.type = MQTT_TRANSPORT_SECURE;
   12e2a:	2301      	movs	r3, #1
   12e2c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    client.clean_session = 1;
   12e30:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   12e34:	f043 0302 	orr.w	r3, r3, #2
   12e38:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
    client.keepalive = 120;
   12e3c:	2378      	movs	r3, #120	; 0x78
   12e3e:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
    return 0;
   12e42:	e76f      	b.n	12d24 <gcloud_thread+0xe4>
            if (connected) {
   12e44:	783b      	ldrb	r3, [r7, #0]
   12e46:	2b00      	cmp	r3, #0
   12e48:	f43f af0f 	beq.w	12c6a <gcloud_thread+0x2a>
                LOG_DBG("Got PUBLISH_STATE command");
   12e4c:	f044 0204 	orr.w	r2, r4, #4
   12e50:	4935      	ldr	r1, [pc, #212]	; (12f28 <gcloud_thread+0x2e8>)
   12e52:	4853      	ldr	r0, [pc, #332]	; (12fa0 <gcloud_thread+0x360>)
                msg.message = event.param.publish_state;
   12e54:	ad10      	add	r5, sp, #64	; 0x40
   12e56:	ae0b      	add	r6, sp, #44	; 0x2c
                LOG_DBG("Got PUBLISH_STATE command");
   12e58:	f01b fad7 	bl	2e40a <log_1>
                msg.message = event.param.publish_state;
   12e5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12e60:	6833      	ldr	r3, [r6, #0]
   12e62:	602b      	str	r3, [r5, #0]
	return z_impl_k_uptime_ticks();
   12e64:	f022 fab3 	bl	353ce <z_impl_k_uptime_ticks>
   12e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12e6c:	fba0 0103 	umull	r0, r1, r0, r3
                msg.dup_flag = 0;
   12e70:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
   12e74:	0bc0      	lsrs	r0, r0, #15
                msg.message_id = k_uptime_get_32();
   12e76:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
                msg.dup_flag = 0;
   12e7a:	f023 0303 	bic.w	r3, r3, #3
                err = mqtt_publish(&client, &msg);
   12e7e:	482f      	ldr	r0, [pc, #188]	; (12f3c <gcloud_thread+0x2fc>)
   12e80:	a910      	add	r1, sp, #64	; 0x40
                msg.dup_flag = 0;
   12e82:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
                err = mqtt_publish(&client, &msg);
   12e86:	f01f f857 	bl	31f38 <mqtt_publish>
                if (err) {
   12e8a:	4605      	mov	r5, r0
   12e8c:	2800      	cmp	r0, #0
   12e8e:	f43f aeec 	beq.w	12c6a <gcloud_thread+0x2a>
                    LOG_ERR("mqtt_publish (state) failed: [%d] %s", err, strerror(-err));
   12e92:	4240      	negs	r0, r0
   12e94:	f01a fbe4 	bl	2d660 <strerror>
   12e98:	f044 0601 	orr.w	r6, r4, #1
   12e9c:	4633      	mov	r3, r6
   12e9e:	4629      	mov	r1, r5
   12ea0:	4602      	mov	r2, r0
   12ea2:	4840      	ldr	r0, [pc, #256]	; (12fa4 <gcloud_thread+0x364>)
                LOG_DBG("Got SUBSCRIBE command");
                err = gcloud_subscribe();
                if (err) {
                    LOG_ERR("gcloud_subscribe failed: [%d] %s", err, strerror(-err));
   12ea4:	f01b fac5 	bl	2e432 <log_2>
   12ea8:	e6df      	b.n	12c6a <gcloud_thread+0x2a>
            if (connected) {
   12eaa:	783b      	ldrb	r3, [r7, #0]
   12eac:	2b00      	cmp	r3, #0
   12eae:	f43f aedc 	beq.w	12c6a <gcloud_thread+0x2a>
                LOG_DBG("Got PUBLISH command");
   12eb2:	f044 0204 	orr.w	r2, r4, #4
   12eb6:	491c      	ldr	r1, [pc, #112]	; (12f28 <gcloud_thread+0x2e8>)
   12eb8:	483b      	ldr	r0, [pc, #236]	; (12fa8 <gcloud_thread+0x368>)
                msg.message = event.param.publish;
   12eba:	ad10      	add	r5, sp, #64	; 0x40
   12ebc:	ae0b      	add	r6, sp, #44	; 0x2c
                LOG_DBG("Got PUBLISH command");
   12ebe:	f01b faa4 	bl	2e40a <log_1>
                msg.message = event.param.publish;
   12ec2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12ec6:	6833      	ldr	r3, [r6, #0]
   12ec8:	602b      	str	r3, [r5, #0]
   12eca:	f022 fa80 	bl	353ce <z_impl_k_uptime_ticks>
   12ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12ed2:	fba0 0103 	umull	r0, r1, r0, r3
                msg.dup_flag = 0;
   12ed6:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
   12eda:	0bc0      	lsrs	r0, r0, #15
                msg.message_id = k_uptime_get_32();
   12edc:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
                msg.dup_flag = 0;
   12ee0:	f023 0303 	bic.w	r3, r3, #3
                err = mqtt_publish(&client, &msg);
   12ee4:	4815      	ldr	r0, [pc, #84]	; (12f3c <gcloud_thread+0x2fc>)
   12ee6:	a910      	add	r1, sp, #64	; 0x40
                msg.dup_flag = 0;
   12ee8:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
                err = mqtt_publish(&client, &msg);
   12eec:	f01f f824 	bl	31f38 <mqtt_publish>
                if (err) {
   12ef0:	4605      	mov	r5, r0
   12ef2:	2800      	cmp	r0, #0
   12ef4:	f43f aeb9 	beq.w	12c6a <gcloud_thread+0x2a>
                    LOG_ERR("mqtt_publish failed: [%d] %s", err, strerror(-err));
   12ef8:	4240      	negs	r0, r0
   12efa:	f01a fbb1 	bl	2d660 <strerror>
   12efe:	f044 0601 	orr.w	r6, r4, #1
   12f02:	4602      	mov	r2, r0
   12f04:	4633      	mov	r3, r6
   12f06:	4629      	mov	r1, r5
   12f08:	4828      	ldr	r0, [pc, #160]	; (12fac <gcloud_thread+0x36c>)
   12f0a:	e7cb      	b.n	12ea4 <gcloud_thread+0x264>
   12f0c:	00012611 	.word	0x00012611
   12f10:	20014d50 	.word	0x20014d50
   12f14:	00036548 	.word	0x00036548
   12f18:	000364b0 	.word	0x000364b0
   12f1c:	00037b7b 	.word	0x00037b7b
   12f20:	2001ac0e 	.word	0x2001ac0e
   12f24:	00037b98 	.word	0x00037b98
   12f28:	00037efb 	.word	0x00037efb
   12f2c:	00037bac 	.word	0x00037bac
   12f30:	00037bc2 	.word	0x00037bc2
   12f34:	00037bd6 	.word	0x00037bd6
   12f38:	00037c39 	.word	0x00037c39
   12f3c:	20015e9c 	.word	0x20015e9c
   12f40:	00037c48 	.word	0x00037c48
   12f44:	00037c5e 	.word	0x00037c5e
   12f48:	00037cfb 	.word	0x00037cfb
   12f4c:	2001ac0f 	.word	0x2001ac0f
   12f50:	00037d0f 	.word	0x00037d0f
   12f54:	20015f1c 	.word	0x20015f1c
   12f58:	00012731 	.word	0x00012731
   12f5c:	2001f760 	.word	0x2001f760
   12f60:	200151e8 	.word	0x200151e8
   12f64:	20015f24 	.word	0x20015f24
   12f68:	00037bf8 	.word	0x00037bf8
   12f6c:	2001abdc 	.word	0x2001abdc
   12f70:	00037ec7 	.word	0x00037ec7
   12f74:	00037c16 	.word	0x00037c16
   12f78:	2001ac10 	.word	0x2001ac10
   12f7c:	00037edc 	.word	0x00037edc
   12f80:	00037c7a 	.word	0x00037c7a
   12f84:	00037c87 	.word	0x00037c87
   12f88:	200146fc 	.word	0x200146fc
   12f8c:	00037c9b 	.word	0x00037c9b
   12f90:	0001284d 	.word	0x0001284d
   12f94:	20014704 	.word	0x20014704
   12f98:	2001b110 	.word	0x2001b110
   12f9c:	2001b510 	.word	0x2001b510
   12fa0:	00037d2c 	.word	0x00037d2c
   12fa4:	00037d4a 	.word	0x00037d4a
   12fa8:	00037d6f 	.word	0x00037d6f
   12fac:	00037d87 	.word	0x00037d87
   12fb0:	20014f00 	.word	0x20014f00
                LOG_DBG("Got RECONNECT_TIMEOUT command");
   12fb4:	4933      	ldr	r1, [pc, #204]	; (13084 <gcloud_thread+0x444>)
   12fb6:	4834      	ldr	r0, [pc, #208]	; (13088 <gcloud_thread+0x448>)
   12fb8:	f044 0204 	orr.w	r2, r4, #4
   12fbc:	f01b fa25 	bl	2e40a <log_1>
                LOG_DBG("Got DISCONNECT command");
   12fc0:	f044 0504 	orr.w	r5, r4, #4
   12fc4:	462a      	mov	r2, r5
   12fc6:	492f      	ldr	r1, [pc, #188]	; (13084 <gcloud_thread+0x444>)
   12fc8:	4830      	ldr	r0, [pc, #192]	; (1308c <gcloud_thread+0x44c>)
   12fca:	f01b fa1e 	bl	2e40a <log_1>
            if (connected) {
   12fce:	783b      	ldrb	r3, [r7, #0]
   12fd0:	2b00      	cmp	r3, #0
   12fd2:	f43f ae4a 	beq.w	12c6a <gcloud_thread+0x2a>
	z_impl_k_timer_stop(timer);
   12fd6:	482e      	ldr	r0, [pc, #184]	; (13090 <gcloud_thread+0x450>)
   12fd8:	f022 fa34 	bl	35444 <z_impl_k_timer_stop>
                LOG_DBG("Disconnecting mqtt");
   12fdc:	462a      	mov	r2, r5
   12fde:	4929      	ldr	r1, [pc, #164]	; (13084 <gcloud_thread+0x444>)
   12fe0:	482c      	ldr	r0, [pc, #176]	; (13094 <gcloud_thread+0x454>)
   12fe2:	f01b fa12 	bl	2e40a <log_1>
                err = mqtt_disconnect(&client);
   12fe6:	482c      	ldr	r0, [pc, #176]	; (13098 <gcloud_thread+0x458>)
   12fe8:	f01f f839 	bl	3205e <mqtt_disconnect>
                if (err) {
   12fec:	4605      	mov	r5, r0
   12fee:	b150      	cbz	r0, 13006 <gcloud_thread+0x3c6>
                    LOG_ERR("mqtt_disconnect (reconnect) failed: [%d] %s", err, strerror(-err));
   12ff0:	4240      	negs	r0, r0
   12ff2:	f01a fb35 	bl	2d660 <strerror>
   12ff6:	f044 0601 	orr.w	r6, r4, #1
   12ffa:	4602      	mov	r2, r0
   12ffc:	4633      	mov	r3, r6
   12ffe:	4629      	mov	r1, r5
   13000:	4826      	ldr	r0, [pc, #152]	; (1309c <gcloud_thread+0x45c>)
   13002:	f01b fa16 	bl	2e432 <log_2>
	z_impl_k_msgq_purge(msgq);
   13006:	4640      	mov	r0, r8
   13008:	f016 f944 	bl	29294 <z_impl_k_msgq_purge>
                k_thread_abort(mqtt_tid);
   1300c:	4b24      	ldr	r3, [pc, #144]	; (130a0 <gcloud_thread+0x460>)
   1300e:	6818      	ldr	r0, [r3, #0]
                connected = false;
   13010:	2600      	movs	r6, #0
	z_impl_k_thread_abort(thread);
   13012:	f004 fabb 	bl	1758c <z_impl_k_thread_abort>
                if (event.type == DISCONNECT) {
   13016:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1301a:	4d22      	ldr	r5, [pc, #136]	; (130a4 <gcloud_thread+0x464>)
   1301c:	2b04      	cmp	r3, #4
                connected = false;
   1301e:	703e      	strb	r6, [r7, #0]
                if (event.type == DISCONNECT) {
   13020:	d107      	bne.n	13032 <gcloud_thread+0x3f2>
                    LOG_DBG("Not setting connecting flag");
   13022:	4918      	ldr	r1, [pc, #96]	; (13084 <gcloud_thread+0x444>)
   13024:	4820      	ldr	r0, [pc, #128]	; (130a8 <gcloud_thread+0x468>)
   13026:	f044 0204 	orr.w	r2, r4, #4
   1302a:	f01b f9ee 	bl	2e40a <log_1>
                    connecting = false;
   1302e:	702e      	strb	r6, [r5, #0]
   13030:	e61b      	b.n	12c6a <gcloud_thread+0x2a>
                    connecting = true;
   13032:	2301      	movs	r3, #1
   13034:	702b      	strb	r3, [r5, #0]
   13036:	e618      	b.n	12c6a <gcloud_thread+0x2a>
            if (connected) {
   13038:	783b      	ldrb	r3, [r7, #0]
   1303a:	2b00      	cmp	r3, #0
   1303c:	f43f ae15 	beq.w	12c6a <gcloud_thread+0x2a>
                LOG_DBG("Got SUBSCRIBE command");
   13040:	4910      	ldr	r1, [pc, #64]	; (13084 <gcloud_thread+0x444>)
   13042:	481a      	ldr	r0, [pc, #104]	; (130ac <gcloud_thread+0x46c>)
   13044:	f044 0204 	orr.w	r2, r4, #4
   13048:	f01b f9df 	bl	2e40a <log_1>
    const struct mqtt_subscription_list subscriptions = {
   1304c:	4b18      	ldr	r3, [pc, #96]	; (130b0 <gcloud_thread+0x470>)
    return mqtt_subscribe(&client, &subscriptions);
   1304e:	4812      	ldr	r0, [pc, #72]	; (13098 <gcloud_thread+0x458>)
    const struct mqtt_subscription_list subscriptions = {
   13050:	9316      	str	r3, [sp, #88]	; 0x58
   13052:	4b18      	ldr	r3, [pc, #96]	; (130b4 <gcloud_thread+0x474>)
    return mqtt_subscribe(&client, &subscriptions);
   13054:	a916      	add	r1, sp, #88	; 0x58
    const struct mqtt_subscription_list subscriptions = {
   13056:	9317      	str	r3, [sp, #92]	; 0x5c
    return mqtt_subscribe(&client, &subscriptions);
   13058:	f01f f82a 	bl	320b0 <mqtt_subscribe>
                if (err) {
   1305c:	4605      	mov	r5, r0
   1305e:	2800      	cmp	r0, #0
   13060:	f43f ae03 	beq.w	12c6a <gcloud_thread+0x2a>
                    LOG_ERR("gcloud_subscribe failed: [%d] %s", err, strerror(-err));
   13064:	4240      	negs	r0, r0
   13066:	f01a fafb 	bl	2d660 <strerror>
   1306a:	f044 0601 	orr.w	r6, r4, #1
   1306e:	4602      	mov	r2, r0
   13070:	4633      	mov	r3, r6
   13072:	4629      	mov	r1, r5
   13074:	4810      	ldr	r0, [pc, #64]	; (130b8 <gcloud_thread+0x478>)
   13076:	e715      	b.n	12ea4 <gcloud_thread+0x264>
                    // TODO: Find a way to report this error to the application.
                }
            };
            break;
            default:
                LOG_ERR("Unknown event type received");
   13078:	4810      	ldr	r0, [pc, #64]	; (130bc <gcloud_thread+0x47c>)
   1307a:	f044 0101 	orr.w	r1, r4, #1
   1307e:	f01b f9b7 	bl	2e3f0 <log_0>
    while (true) {
   13082:	e5f2      	b.n	12c6a <gcloud_thread+0x2a>
   13084:	00037efb 	.word	0x00037efb
   13088:	00037da4 	.word	0x00037da4
   1308c:	00037dc6 	.word	0x00037dc6
   13090:	20014d50 	.word	0x20014d50
   13094:	00037de1 	.word	0x00037de1
   13098:	20015e9c 	.word	0x20015e9c
   1309c:	00037df8 	.word	0x00037df8
   130a0:	20015f24 	.word	0x20015f24
   130a4:	2001ac0f 	.word	0x2001ac0f
   130a8:	00037e24 	.word	0x00037e24
   130ac:	00037e44 	.word	0x00037e44
   130b0:	200146f0 	.word	0x200146f0
   130b4:	002a0001 	.word	0x002a0001
   130b8:	00037e5e 	.word	0x00037e5e
   130bc:	00037e7f 	.word	0x00037e7f

000130c0 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   130c0:	2803      	cmp	r0, #3
{
   130c2:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   130c4:	d906      	bls.n	130d4 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   130c6:	f01d f9f5 	bl	304b4 <__errno>
   130ca:	2309      	movs	r3, #9
   130cc:	6003      	str	r3, [r0, #0]
   130ce:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   130d2:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   130d4:	4b04      	ldr	r3, [pc, #16]	; (130e8 <_check_fd+0x28>)
   130d6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   130da:	3008      	adds	r0, #8
   130dc:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   130e0:	2b00      	cmp	r3, #0
   130e2:	d0f0      	beq.n	130c6 <_check_fd+0x6>
	return 0;
   130e4:	2000      	movs	r0, #0
   130e6:	e7f4      	b.n	130d2 <_check_fd+0x12>
   130e8:	20015f2c 	.word	0x20015f2c

000130ec <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   130ec:	b570      	push	{r4, r5, r6, lr}
   130ee:	4604      	mov	r4, r0
   130f0:	460d      	mov	r5, r1
   130f2:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   130f4:	f7ff ffe4 	bl	130c0 <_check_fd>
   130f8:	2800      	cmp	r0, #0
   130fa:	db09      	blt.n	13110 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   130fc:	4b06      	ldr	r3, [pc, #24]	; (13118 <z_get_fd_obj+0x2c>)
   130fe:	0160      	lsls	r0, r4, #5
   13100:	b145      	cbz	r5, 13114 <z_get_fd_obj+0x28>
   13102:	181a      	adds	r2, r3, r0
   13104:	6852      	ldr	r2, [r2, #4]
   13106:	42aa      	cmp	r2, r5
   13108:	d004      	beq.n	13114 <z_get_fd_obj+0x28>
		errno = err;
   1310a:	f01d f9d3 	bl	304b4 <__errno>
   1310e:	6006      	str	r6, [r0, #0]
		return NULL;
   13110:	2000      	movs	r0, #0
   13112:	e000      	b.n	13116 <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   13114:	5818      	ldr	r0, [r3, r0]
}
   13116:	bd70      	pop	{r4, r5, r6, pc}
   13118:	20015f2c 	.word	0x20015f2c

0001311c <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   1311c:	b570      	push	{r4, r5, r6, lr}
   1311e:	4604      	mov	r4, r0
   13120:	460e      	mov	r6, r1
   13122:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   13124:	f7ff ffcc 	bl	130c0 <_check_fd>
   13128:	2800      	cmp	r0, #0
   1312a:	db0c      	blt.n	13146 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   1312c:	4b07      	ldr	r3, [pc, #28]	; (1314c <z_get_fd_obj_and_vtable+0x30>)
   1312e:	0161      	lsls	r1, r4, #5
   13130:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   13134:	6862      	ldr	r2, [r4, #4]
   13136:	6032      	str	r2, [r6, #0]

	if (lock) {
   13138:	b11d      	cbz	r5, 13142 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   1313a:	f101 020c 	add.w	r2, r1, #12
   1313e:	441a      	add	r2, r3
   13140:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   13142:	5858      	ldr	r0, [r3, r1]
}
   13144:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   13146:	2000      	movs	r0, #0
   13148:	e7fc      	b.n	13144 <z_get_fd_obj_and_vtable+0x28>
   1314a:	bf00      	nop
   1314c:	20015f2c 	.word	0x20015f2c

00013150 <z_reserve_fd>:

int z_reserve_fd(void)
{
   13150:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   13152:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   13154:	f04f 32ff 	mov.w	r2, #4294967295
   13158:	f04f 33ff 	mov.w	r3, #4294967295
   1315c:	4814      	ldr	r0, [pc, #80]	; (131b0 <z_reserve_fd+0x60>)
   1315e:	f016 f8d7 	bl	29310 <z_impl_k_mutex_lock>
   13162:	4a14      	ldr	r2, [pc, #80]	; (131b4 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   13164:	0163      	lsls	r3, r4, #5
   13166:	e8d2 1faf 	lda	r1, [r2]
   1316a:	b179      	cbz	r1, 1318c <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1316c:	3401      	adds	r4, #1
   1316e:	2c04      	cmp	r4, #4
   13170:	f102 0220 	add.w	r2, r2, #32
   13174:	d1f6      	bne.n	13164 <z_reserve_fd+0x14>
	errno = ENFILE;
   13176:	f01d f99d 	bl	304b4 <__errno>
   1317a:	2317      	movs	r3, #23
	return -1;
   1317c:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   13180:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   13182:	480b      	ldr	r0, [pc, #44]	; (131b0 <z_reserve_fd+0x60>)
   13184:	f016 f9be 	bl	29504 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   13188:	4620      	mov	r0, r4
   1318a:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1318c:	e8d2 0fef 	ldaex	r0, [r2]
   13190:	3001      	adds	r0, #1
   13192:	e8c2 0fec 	stlex	ip, r0, [r2]
   13196:	f1bc 0f00 	cmp.w	ip, #0
   1319a:	d1f7      	bne.n	1318c <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   1319c:	4806      	ldr	r0, [pc, #24]	; (131b8 <z_reserve_fd+0x68>)
   1319e:	18c2      	adds	r2, r0, r3
   131a0:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   131a2:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   131a4:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   131a6:	4418      	add	r0, r3
   131a8:	f022 f847 	bl	3523a <z_impl_k_mutex_init>
   131ac:	e7e9      	b.n	13182 <z_reserve_fd+0x32>
   131ae:	bf00      	nop
   131b0:	20014e54 	.word	0x20014e54
   131b4:	20015f34 	.word	0x20015f34
   131b8:	20015f2c 	.word	0x20015f2c

000131bc <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   131bc:	b410      	push	{r4}
   131be:	4614      	mov	r4, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   131c0:	4b09      	ldr	r3, [pc, #36]	; (131e8 <z_finalize_fd+0x2c>)
   131c2:	0142      	lsls	r2, r0, #5
   131c4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   131c8:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   131ca:	6044      	str	r4, [r0, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   131cc:	b14c      	cbz	r4, 131e2 <z_finalize_fd+0x26>
   131ce:	68e0      	ldr	r0, [r4, #12]
   131d0:	b138      	cbz	r0, 131e2 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   131d2:	320c      	adds	r2, #12
   131d4:	4620      	mov	r0, r4
   131d6:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   131d8:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   131da:	f240 1205 	movw	r2, #261	; 0x105
   131de:	f01a bd9b 	b.w	2dd18 <z_fdtable_call_ioctl.constprop.0>
}
   131e2:	bc10      	pop	{r4}
   131e4:	4770      	bx	lr
   131e6:	bf00      	nop
   131e8:	20015f2c 	.word	0x20015f2c

000131ec <z_free_fd>:

void z_free_fd(int fd)
{
   131ec:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   131ee:	4b0d      	ldr	r3, [pc, #52]	; (13224 <z_free_fd+0x38>)
   131f0:	0140      	lsls	r0, r0, #5
   131f2:	f100 0208 	add.w	r2, r0, #8
   131f6:	441a      	add	r2, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   131f8:	e8d2 1faf 	lda	r1, [r2]
		if (!old_rc) {
   131fc:	b181      	cbz	r1, 13220 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   131fe:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13200:	e8d2 5fef 	ldaex	r5, [r2]
   13204:	428d      	cmp	r5, r1
   13206:	d104      	bne.n	13212 <z_free_fd+0x26>
   13208:	e8c2 4fec 	stlex	ip, r4, [r2]
   1320c:	f1bc 0f00 	cmp.w	ip, #0
   13210:	d1f6      	bne.n	13200 <z_free_fd+0x14>
   13212:	d1f1      	bne.n	131f8 <z_free_fd+0xc>
	if (old_rc != 1) {
   13214:	2901      	cmp	r1, #1
	fdtable[fd].obj = NULL;
   13216:	bf01      	itttt	eq
   13218:	2200      	moveq	r2, #0
   1321a:	1819      	addeq	r1, r3, r0
   1321c:	501a      	streq	r2, [r3, r0]
	fdtable[fd].vtable = NULL;
   1321e:	604a      	streq	r2, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   13220:	bd30      	pop	{r4, r5, pc}
   13222:	bf00      	nop
   13224:	20015f2c 	.word	0x20015f2c

00013228 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   13228:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1322a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   1322c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   13230:	2b02      	cmp	r3, #2
{
   13232:	4604      	mov	r4, r0
   13234:	460e      	mov	r6, r1
	notify->result = res;
   13236:	6081      	str	r1, [r0, #8]
	switch (method) {
   13238:	d010      	beq.n	1325c <sys_notify_finalize+0x34>
   1323a:	2b03      	cmp	r3, #3
   1323c:	d004      	beq.n	13248 <sys_notify_finalize+0x20>
   1323e:	2b01      	cmp	r3, #1
   13240:	d10f      	bne.n	13262 <sys_notify_finalize+0x3a>
   13242:	2500      	movs	r5, #0
   13244:	4628      	mov	r0, r5
   13246:	e001      	b.n	1324c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   13248:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1324a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1324c:	2300      	movs	r3, #0
   1324e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   13250:	b110      	cbz	r0, 13258 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   13252:	4631      	mov	r1, r6
   13254:	f019 faea 	bl	2c82c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   13258:	4628      	mov	r0, r5
   1325a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   1325c:	2500      	movs	r5, #0
		sig = notify->method.signal;
   1325e:	6800      	ldr	r0, [r0, #0]
		break;
   13260:	e7f4      	b.n	1324c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   13262:	2345      	movs	r3, #69	; 0x45
   13264:	4a05      	ldr	r2, [pc, #20]	; (1327c <sys_notify_finalize+0x54>)
   13266:	4906      	ldr	r1, [pc, #24]	; (13280 <sys_notify_finalize+0x58>)
   13268:	4806      	ldr	r0, [pc, #24]	; (13284 <sys_notify_finalize+0x5c>)
   1326a:	f01a fd8d 	bl	2dd88 <printk>
   1326e:	2145      	movs	r1, #69	; 0x45
   13270:	4802      	ldr	r0, [pc, #8]	; (1327c <sys_notify_finalize+0x54>)
   13272:	f01b f86f 	bl	2e354 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   13276:	2500      	movs	r5, #0
   13278:	e7e7      	b.n	1324a <sys_notify_finalize+0x22>
   1327a:	bf00      	nop
   1327c:	00037f09 	.word	0x00037f09
   13280:	0003e845 	.word	0x0003e845
   13284:	00037f2c 	.word	0x00037f2c

00013288 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   13288:	680b      	ldr	r3, [r1, #0]
   1328a:	3301      	adds	r3, #1
   1328c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1328e:	4b01      	ldr	r3, [pc, #4]	; (13294 <char_out+0xc>)
   13290:	681b      	ldr	r3, [r3, #0]
   13292:	4718      	bx	r3
   13294:	20014710 	.word	0x20014710

00013298 <__printk_hook_install>:
	_char_out = fn;
   13298:	4b01      	ldr	r3, [pc, #4]	; (132a0 <__printk_hook_install+0x8>)
   1329a:	6018      	str	r0, [r3, #0]
}
   1329c:	4770      	bx	lr
   1329e:	bf00      	nop
   132a0:	20014710 	.word	0x20014710

000132a4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   132a4:	b507      	push	{r0, r1, r2, lr}
   132a6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   132a8:	2100      	movs	r1, #0
{
   132aa:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   132ac:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   132ae:	4803      	ldr	r0, [pc, #12]	; (132bc <vprintk+0x18>)
   132b0:	a901      	add	r1, sp, #4
   132b2:	f000 fe25 	bl	13f00 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   132b6:	b003      	add	sp, #12
   132b8:	f85d fb04 	ldr.w	pc, [sp], #4
   132bc:	00013289 	.word	0x00013289

000132c0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   132c0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   132c2:	2500      	movs	r5, #0
{
   132c4:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   132c6:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   132ca:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   132cc:	a901      	add	r1, sp, #4
   132ce:	4805      	ldr	r0, [pc, #20]	; (132e4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   132d0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   132d2:	f000 fe15 	bl	13f00 <cbvprintf>

	if (ctx.count < ctx.max) {
   132d6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   132da:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   132dc:	bfb8      	it	lt
   132de:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   132e0:	b005      	add	sp, #20
   132e2:	bd30      	pop	{r4, r5, pc}
   132e4:	0002dd63 	.word	0x0002dd63

000132e8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   132e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   132ec:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   132f0:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   132f2:	f019 0f08 	tst.w	r9, #8
{
   132f6:	4604      	mov	r4, r0
   132f8:	9203      	str	r2, [sp, #12]
	if (processing) {
   132fa:	d022      	beq.n	13342 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   132fc:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   132fe:	bf0c      	ite	eq
   13300:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   13304:	f049 0920 	orrne.w	r9, r9, #32
   13308:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   1330c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1330e:	4620      	mov	r0, r4
   13310:	f015 fe3e 	bl	28f90 <z_spin_unlock_valid>
   13314:	b968      	cbnz	r0, 13332 <process_event+0x4a>
   13316:	23ac      	movs	r3, #172	; 0xac
   13318:	4a9e      	ldr	r2, [pc, #632]	; (13594 <process_event+0x2ac>)
   1331a:	499f      	ldr	r1, [pc, #636]	; (13598 <process_event+0x2b0>)
   1331c:	489f      	ldr	r0, [pc, #636]	; (1359c <process_event+0x2b4>)
   1331e:	f01a fd33 	bl	2dd88 <printk>
   13322:	4621      	mov	r1, r4
   13324:	489e      	ldr	r0, [pc, #632]	; (135a0 <process_event+0x2b8>)
   13326:	f01a fd2f 	bl	2dd88 <printk>
   1332a:	21ac      	movs	r1, #172	; 0xac
   1332c:	4899      	ldr	r0, [pc, #612]	; (13594 <process_event+0x2ac>)
   1332e:	f01b f811 	bl	2e354 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13332:	9b03      	ldr	r3, [sp, #12]
   13334:	f383 8811 	msr	BASEPRI, r3
   13338:	f3bf 8f6f 	isb	sy
}
   1333c:	b005      	add	sp, #20
   1333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   13342:	4f98      	ldr	r7, [pc, #608]	; (135a4 <process_event+0x2bc>)
   13344:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1359c <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13348:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1334c:	2902      	cmp	r1, #2
   1334e:	d106      	bne.n	1335e <process_event+0x76>
			evt = process_recheck(mgr);
   13350:	4620      	mov	r0, r4
   13352:	f01a fd4e 	bl	2ddf2 <process_recheck>
		if (evt == EVT_NOP) {
   13356:	2800      	cmp	r0, #0
   13358:	d0d8      	beq.n	1330c <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   1335a:	2801      	cmp	r0, #1
   1335c:	d168      	bne.n	13430 <process_event+0x148>
			res = mgr->last_res;
   1335e:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13362:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   13364:	f1bb 0f00 	cmp.w	fp, #0
   13368:	da0a      	bge.n	13380 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1336a:	2600      	movs	r6, #0
		*clients = mgr->clients;
   1336c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1336e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   13372:	e9c4 6600 	strd	r6, r6, [r4]
   13376:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1337a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1337c:	9601      	str	r6, [sp, #4]
   1337e:	e027      	b.n	133d0 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13380:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   13384:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   13386:	2901      	cmp	r1, #1
   13388:	d834      	bhi.n	133f4 <process_event+0x10c>
	list->head = NULL;
   1338a:	2100      	movs	r1, #0
   1338c:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   13390:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   13392:	6825      	ldr	r5, [r4, #0]
   13394:	b29b      	uxth	r3, r3
	list->tail = NULL;
   13396:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1339a:	d10c      	bne.n	133b6 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1339c:	428d      	cmp	r5, r1
   1339e:	462a      	mov	r2, r5
   133a0:	bf38      	it	cc
   133a2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   133a4:	b12a      	cbz	r2, 133b2 <process_event+0xca>
				mgr->refs += 1U;
   133a6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   133a8:	6812      	ldr	r2, [r2, #0]
   133aa:	3101      	adds	r1, #1
   133ac:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   133ae:	2a00      	cmp	r2, #0
   133b0:	d1f8      	bne.n	133a4 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   133b2:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   133b6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   133b8:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   133ba:	f01a fd1a 	bl	2ddf2 <process_recheck>
   133be:	4606      	mov	r6, r0
   133c0:	2800      	cmp	r0, #0
   133c2:	d0db      	beq.n	1337c <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   133c4:	8ba3      	ldrh	r3, [r4, #28]
   133c6:	f043 0320 	orr.w	r3, r3, #32
   133ca:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   133cc:	2300      	movs	r3, #0
   133ce:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   133d0:	8ba3      	ldrh	r3, [r4, #28]
   133d2:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   133d6:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   133d8:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   133da:	d003      	beq.n	133e4 <process_event+0xfc>
		if (do_monitors
   133dc:	68a2      	ldr	r2, [r4, #8]
   133de:	2a00      	cmp	r2, #0
   133e0:	f040 80f0 	bne.w	135c4 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   133e4:	b91d      	cbnz	r5, 133ee <process_event+0x106>
		    || (transit != NULL)) {
   133e6:	9a01      	ldr	r2, [sp, #4]
   133e8:	2a00      	cmp	r2, #0
   133ea:	f000 8136 	beq.w	1365a <process_event+0x372>
   133ee:	f04f 0900 	mov.w	r9, #0
   133f2:	e0e9      	b.n	135c8 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   133f4:	2a04      	cmp	r2, #4
   133f6:	d10e      	bne.n	13416 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   133f8:	f023 0307 	bic.w	r3, r3, #7
   133fc:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   133fe:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   13400:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   13402:	f01a fcf6 	bl	2ddf2 <process_recheck>
   13406:	4605      	mov	r5, r0
   13408:	b118      	cbz	r0, 13412 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1340a:	f042 0220 	orr.w	r2, r2, #32
   1340e:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   13410:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   13412:	9501      	str	r5, [sp, #4]
   13414:	e7dc      	b.n	133d0 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   13416:	4640      	mov	r0, r8
   13418:	f240 131b 	movw	r3, #283	; 0x11b
   1341c:	463a      	mov	r2, r7
   1341e:	4962      	ldr	r1, [pc, #392]	; (135a8 <process_event+0x2c0>)
   13420:	f01a fcb2 	bl	2dd88 <printk>
   13424:	f240 111b 	movw	r1, #283	; 0x11b
   13428:	4638      	mov	r0, r7
   1342a:	f01a ff93 	bl	2e354 <assert_post_action>
   1342e:	e7ef      	b.n	13410 <process_event+0x128>
		} else if (evt == EVT_START) {
   13430:	2803      	cmp	r0, #3
   13432:	d135      	bne.n	134a0 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   13434:	f1b9 0f00 	cmp.w	r9, #0
   13438:	d00b      	beq.n	13452 <process_event+0x16a>
   1343a:	4640      	mov	r0, r8
   1343c:	495b      	ldr	r1, [pc, #364]	; (135ac <process_event+0x2c4>)
   1343e:	f44f 73ab 	mov.w	r3, #342	; 0x156
   13442:	463a      	mov	r2, r7
   13444:	f01a fca0 	bl	2dd88 <printk>
   13448:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1344c:	4638      	mov	r0, r7
   1344e:	f01a ff81 	bl	2e354 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   13452:	6823      	ldr	r3, [r4, #0]
   13454:	b95b      	cbnz	r3, 1346e <process_event+0x186>
   13456:	4640      	mov	r0, r8
   13458:	4955      	ldr	r1, [pc, #340]	; (135b0 <process_event+0x2c8>)
   1345a:	f240 1357 	movw	r3, #343	; 0x157
   1345e:	463a      	mov	r2, r7
   13460:	f01a fc92 	bl	2dd88 <printk>
   13464:	f240 1157 	movw	r1, #343	; 0x157
   13468:	4638      	mov	r0, r7
   1346a:	f01a ff73 	bl	2e354 <assert_post_action>
			transit = mgr->transitions->start;
   1346e:	6923      	ldr	r3, [r4, #16]
   13470:	681b      	ldr	r3, [r3, #0]
   13472:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   13474:	b95b      	cbnz	r3, 1348e <process_event+0x1a6>
   13476:	4640      	mov	r0, r8
   13478:	494e      	ldr	r1, [pc, #312]	; (135b4 <process_event+0x2cc>)
   1347a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   1347e:	463a      	mov	r2, r7
   13480:	f01a fc82 	bl	2dd88 <printk>
   13484:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   13488:	4638      	mov	r0, r7
   1348a:	f01a ff63 	bl	2e354 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1348e:	8ba3      	ldrh	r3, [r4, #28]
   13490:	f023 0307 	bic.w	r3, r3, #7
   13494:	f043 0306 	orr.w	r3, r3, #6
}
   13498:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1349a:	83a3      	strh	r3, [r4, #28]
		res = 0;
   1349c:	46ab      	mov	fp, r5
}
   1349e:	e797      	b.n	133d0 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   134a0:	2804      	cmp	r0, #4
   134a2:	d132      	bne.n	1350a <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   134a4:	f1b9 0f02 	cmp.w	r9, #2
   134a8:	d00b      	beq.n	134c2 <process_event+0x1da>
   134aa:	4640      	mov	r0, r8
   134ac:	4942      	ldr	r1, [pc, #264]	; (135b8 <process_event+0x2d0>)
   134ae:	f240 135d 	movw	r3, #349	; 0x15d
   134b2:	463a      	mov	r2, r7
   134b4:	f01a fc68 	bl	2dd88 <printk>
   134b8:	f240 115d 	movw	r1, #349	; 0x15d
   134bc:	4638      	mov	r0, r7
   134be:	f01a ff49 	bl	2e354 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   134c2:	8be3      	ldrh	r3, [r4, #30]
   134c4:	b15b      	cbz	r3, 134de <process_event+0x1f6>
   134c6:	4640      	mov	r0, r8
   134c8:	493c      	ldr	r1, [pc, #240]	; (135bc <process_event+0x2d4>)
   134ca:	f44f 73af 	mov.w	r3, #350	; 0x15e
   134ce:	463a      	mov	r2, r7
   134d0:	f01a fc5a 	bl	2dd88 <printk>
   134d4:	f44f 71af 	mov.w	r1, #350	; 0x15e
   134d8:	4638      	mov	r0, r7
   134da:	f01a ff3b 	bl	2e354 <assert_post_action>
			transit = mgr->transitions->stop;
   134de:	6923      	ldr	r3, [r4, #16]
   134e0:	685b      	ldr	r3, [r3, #4]
   134e2:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   134e4:	b95b      	cbnz	r3, 134fe <process_event+0x216>
   134e6:	4640      	mov	r0, r8
   134e8:	4932      	ldr	r1, [pc, #200]	; (135b4 <process_event+0x2cc>)
   134ea:	f240 1361 	movw	r3, #353	; 0x161
   134ee:	463a      	mov	r2, r7
   134f0:	f01a fc4a 	bl	2dd88 <printk>
   134f4:	f240 1161 	movw	r1, #353	; 0x161
   134f8:	4638      	mov	r0, r7
   134fa:	f01a ff2b 	bl	2e354 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   134fe:	8ba3      	ldrh	r3, [r4, #28]
   13500:	f023 0307 	bic.w	r3, r3, #7
   13504:	f043 0304 	orr.w	r3, r3, #4
   13508:	e7c6      	b.n	13498 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   1350a:	2805      	cmp	r0, #5
   1350c:	d132      	bne.n	13574 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1350e:	f1b9 0f01 	cmp.w	r9, #1
   13512:	d00b      	beq.n	1352c <process_event+0x244>
   13514:	4640      	mov	r0, r8
   13516:	492a      	ldr	r1, [pc, #168]	; (135c0 <process_event+0x2d8>)
   13518:	f44f 73b2 	mov.w	r3, #356	; 0x164
   1351c:	463a      	mov	r2, r7
   1351e:	f01a fc33 	bl	2dd88 <printk>
   13522:	f44f 71b2 	mov.w	r1, #356	; 0x164
   13526:	4638      	mov	r0, r7
   13528:	f01a ff14 	bl	2e354 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1352c:	6823      	ldr	r3, [r4, #0]
   1352e:	b95b      	cbnz	r3, 13548 <process_event+0x260>
   13530:	4640      	mov	r0, r8
   13532:	491f      	ldr	r1, [pc, #124]	; (135b0 <process_event+0x2c8>)
   13534:	f240 1365 	movw	r3, #357	; 0x165
   13538:	463a      	mov	r2, r7
   1353a:	f01a fc25 	bl	2dd88 <printk>
   1353e:	f240 1165 	movw	r1, #357	; 0x165
   13542:	4638      	mov	r0, r7
   13544:	f01a ff06 	bl	2e354 <assert_post_action>
			transit = mgr->transitions->reset;
   13548:	6923      	ldr	r3, [r4, #16]
   1354a:	689b      	ldr	r3, [r3, #8]
   1354c:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1354e:	b95b      	cbnz	r3, 13568 <process_event+0x280>
   13550:	4640      	mov	r0, r8
   13552:	4918      	ldr	r1, [pc, #96]	; (135b4 <process_event+0x2cc>)
   13554:	f44f 73b4 	mov.w	r3, #360	; 0x168
   13558:	463a      	mov	r2, r7
   1355a:	f01a fc15 	bl	2dd88 <printk>
   1355e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   13562:	4638      	mov	r0, r7
   13564:	f01a fef6 	bl	2e354 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13568:	8ba3      	ldrh	r3, [r4, #28]
   1356a:	f023 0307 	bic.w	r3, r3, #7
   1356e:	f043 0305 	orr.w	r3, r3, #5
   13572:	e791      	b.n	13498 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   13574:	2500      	movs	r5, #0
   13576:	f240 136b 	movw	r3, #363	; 0x16b
   1357a:	463a      	mov	r2, r7
   1357c:	4640      	mov	r0, r8
   1357e:	490a      	ldr	r1, [pc, #40]	; (135a8 <process_event+0x2c0>)
   13580:	f01a fc02 	bl	2dd88 <printk>
   13584:	f240 116b 	movw	r1, #363	; 0x16b
   13588:	4638      	mov	r0, r7
   1358a:	f01a fee3 	bl	2e354 <assert_post_action>
		onoff_transition_fn transit = NULL;
   1358e:	9501      	str	r5, [sp, #4]
   13590:	e784      	b.n	1349c <process_event+0x1b4>
   13592:	bf00      	nop
   13594:	00037fec 	.word	0x00037fec
   13598:	00038012 	.word	0x00038012
   1359c:	00037f2c 	.word	0x00037f2c
   135a0:	00038029 	.word	0x00038029
   135a4:	00037f49 	.word	0x00037f49
   135a8:	0003e845 	.word	0x0003e845
   135ac:	00037f6b 	.word	0x00037f6b
   135b0:	00037f77 	.word	0x00037f77
   135b4:	00037f9a 	.word	0x00037f9a
   135b8:	00037fb1 	.word	0x00037fb1
   135bc:	00037fc7 	.word	0x00037fc7
   135c0:	00037fd6 	.word	0x00037fd6
				   && !sys_slist_is_empty(&mgr->monitors);
   135c4:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   135c8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   135cc:	f104 0a14 	add.w	sl, r4, #20
   135d0:	4650      	mov	r0, sl
			mgr->flags = flags;
   135d2:	83a3      	strh	r3, [r4, #28]
   135d4:	f015 fcdc 	bl	28f90 <z_spin_unlock_valid>
   135d8:	b968      	cbnz	r0, 135f6 <process_event+0x30e>
   135da:	23ac      	movs	r3, #172	; 0xac
   135dc:	4640      	mov	r0, r8
   135de:	4a39      	ldr	r2, [pc, #228]	; (136c4 <process_event+0x3dc>)
   135e0:	4939      	ldr	r1, [pc, #228]	; (136c8 <process_event+0x3e0>)
   135e2:	f01a fbd1 	bl	2dd88 <printk>
   135e6:	4651      	mov	r1, sl
   135e8:	4838      	ldr	r0, [pc, #224]	; (136cc <process_event+0x3e4>)
   135ea:	f01a fbcd 	bl	2dd88 <printk>
   135ee:	21ac      	movs	r1, #172	; 0xac
   135f0:	4834      	ldr	r0, [pc, #208]	; (136c4 <process_event+0x3dc>)
   135f2:	f01a feaf 	bl	2e354 <assert_post_action>
   135f6:	9b03      	ldr	r3, [sp, #12]
   135f8:	f383 8811 	msr	BASEPRI, r3
   135fc:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13600:	f1b9 0f00 	cmp.w	r9, #0
   13604:	d138      	bne.n	13678 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   13606:	2d00      	cmp	r5, #0
   13608:	d14b      	bne.n	136a2 <process_event+0x3ba>
			if (transit != NULL) {
   1360a:	9b01      	ldr	r3, [sp, #4]
   1360c:	b113      	cbz	r3, 13614 <process_event+0x32c>
				transit(mgr, transition_complete);
   1360e:	4620      	mov	r0, r4
   13610:	492f      	ldr	r1, [pc, #188]	; (136d0 <process_event+0x3e8>)
   13612:	4798      	blx	r3
	__asm__ volatile(
   13614:	f04f 0320 	mov.w	r3, #32
   13618:	f3ef 8b11 	mrs	fp, BASEPRI
   1361c:	f383 8811 	msr	BASEPRI, r3
   13620:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13624:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   13626:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1362a:	f015 fca3 	bl	28f74 <z_spin_lock_valid>
   1362e:	b968      	cbnz	r0, 1364c <process_event+0x364>
   13630:	2381      	movs	r3, #129	; 0x81
   13632:	4640      	mov	r0, r8
   13634:	4a23      	ldr	r2, [pc, #140]	; (136c4 <process_event+0x3dc>)
   13636:	4927      	ldr	r1, [pc, #156]	; (136d4 <process_event+0x3ec>)
   13638:	f01a fba6 	bl	2dd88 <printk>
   1363c:	4651      	mov	r1, sl
   1363e:	4826      	ldr	r0, [pc, #152]	; (136d8 <process_event+0x3f0>)
   13640:	f01a fba2 	bl	2dd88 <printk>
   13644:	2181      	movs	r1, #129	; 0x81
   13646:	481f      	ldr	r0, [pc, #124]	; (136c4 <process_event+0x3dc>)
   13648:	f01a fe84 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   1364c:	4650      	mov	r0, sl
   1364e:	f015 fcad 	bl	28fac <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13652:	8ba3      	ldrh	r3, [r4, #28]
   13654:	f023 0308 	bic.w	r3, r3, #8
   13658:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1365a:	8ba3      	ldrh	r3, [r4, #28]
   1365c:	06da      	lsls	r2, r3, #27
   1365e:	d528      	bpl.n	136b2 <process_event+0x3ca>
			evt = EVT_COMPLETE;
   13660:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13662:	f023 0310 	bic.w	r3, r3, #16
   13666:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   13668:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   1366c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   13670:	2900      	cmp	r1, #0
   13672:	f47f ae6b 	bne.w	1334c <process_event+0x64>
out:
   13676:	e649      	b.n	1330c <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13678:	68a1      	ldr	r1, [r4, #8]
   1367a:	2900      	cmp	r1, #0
   1367c:	d0c3      	beq.n	13606 <process_event+0x31e>
	return node->next;
   1367e:	680b      	ldr	r3, [r1, #0]
   13680:	2b00      	cmp	r3, #0
   13682:	bf38      	it	cc
   13684:	2300      	movcc	r3, #0
   13686:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   13688:	684b      	ldr	r3, [r1, #4]
   1368a:	4620      	mov	r0, r4
   1368c:	461e      	mov	r6, r3
   1368e:	9a02      	ldr	r2, [sp, #8]
   13690:	465b      	mov	r3, fp
   13692:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13694:	f1b9 0f00 	cmp.w	r9, #0
   13698:	d0b5      	beq.n	13606 <process_event+0x31e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1369a:	4649      	mov	r1, r9
   1369c:	f8d9 3000 	ldr.w	r3, [r9]
   136a0:	e7ee      	b.n	13680 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   136a2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   136a4:	465b      	mov	r3, fp
   136a6:	4620      	mov	r0, r4
   136a8:	9a02      	ldr	r2, [sp, #8]
   136aa:	682d      	ldr	r5, [r5, #0]
   136ac:	f01a fbbd 	bl	2de2a <notify_one>
   136b0:	e7a9      	b.n	13606 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   136b2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   136b6:	bf1e      	ittt	ne
   136b8:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   136bc:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   136be:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   136c0:	e7d2      	b.n	13668 <process_event+0x380>
   136c2:	bf00      	nop
   136c4:	00037fec 	.word	0x00037fec
   136c8:	00038012 	.word	0x00038012
   136cc:	00038029 	.word	0x00038029
   136d0:	000136dd 	.word	0x000136dd
   136d4:	0003803e 	.word	0x0003803e
   136d8:	00038053 	.word	0x00038053

000136dc <transition_complete>:
{
   136dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136de:	4604      	mov	r4, r0
   136e0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   136e2:	f100 0614 	add.w	r6, r0, #20
   136e6:	f04f 0320 	mov.w	r3, #32
   136ea:	f3ef 8711 	mrs	r7, BASEPRI
   136ee:	f383 8811 	msr	BASEPRI, r3
   136f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   136f6:	4630      	mov	r0, r6
   136f8:	f015 fc3c 	bl	28f74 <z_spin_lock_valid>
   136fc:	b968      	cbnz	r0, 1371a <transition_complete+0x3e>
   136fe:	2381      	movs	r3, #129	; 0x81
   13700:	4a0b      	ldr	r2, [pc, #44]	; (13730 <transition_complete+0x54>)
   13702:	490c      	ldr	r1, [pc, #48]	; (13734 <transition_complete+0x58>)
   13704:	480c      	ldr	r0, [pc, #48]	; (13738 <transition_complete+0x5c>)
   13706:	f01a fb3f 	bl	2dd88 <printk>
   1370a:	4631      	mov	r1, r6
   1370c:	480b      	ldr	r0, [pc, #44]	; (1373c <transition_complete+0x60>)
   1370e:	f01a fb3b 	bl	2dd88 <printk>
   13712:	2181      	movs	r1, #129	; 0x81
   13714:	4806      	ldr	r0, [pc, #24]	; (13730 <transition_complete+0x54>)
   13716:	f01a fe1d 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   1371a:	4630      	mov	r0, r6
   1371c:	f015 fc46 	bl	28fac <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   13720:	463a      	mov	r2, r7
   13722:	4620      	mov	r0, r4
	mgr->last_res = res;
   13724:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   13726:	2101      	movs	r1, #1
}
   13728:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1372c:	f7ff bddc 	b.w	132e8 <process_event>
   13730:	00037fec 	.word	0x00037fec
   13734:	0003803e 	.word	0x0003803e
   13738:	00037f2c 	.word	0x00037f2c
   1373c:	00038053 	.word	0x00038053

00013740 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   13740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13744:	4604      	mov	r4, r0
   13746:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   13748:	f01a fb85 	bl	2de56 <validate_args>

	if (rv < 0) {
   1374c:	1e05      	subs	r5, r0, #0
   1374e:	db5e      	blt.n	1380e <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13750:	f104 0914 	add.w	r9, r4, #20
   13754:	f04f 0320 	mov.w	r3, #32
   13758:	f3ef 8a11 	mrs	sl, BASEPRI
   1375c:	f383 8811 	msr	BASEPRI, r3
   13760:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13764:	4648      	mov	r0, r9
   13766:	f015 fc05 	bl	28f74 <z_spin_lock_valid>
   1376a:	b968      	cbnz	r0, 13788 <onoff_request+0x48>
   1376c:	2381      	movs	r3, #129	; 0x81
   1376e:	4a38      	ldr	r2, [pc, #224]	; (13850 <onoff_request+0x110>)
   13770:	4938      	ldr	r1, [pc, #224]	; (13854 <onoff_request+0x114>)
   13772:	4839      	ldr	r0, [pc, #228]	; (13858 <onoff_request+0x118>)
   13774:	f01a fb08 	bl	2dd88 <printk>
   13778:	4649      	mov	r1, r9
   1377a:	4838      	ldr	r0, [pc, #224]	; (1385c <onoff_request+0x11c>)
   1377c:	f01a fb04 	bl	2dd88 <printk>
   13780:	2181      	movs	r1, #129	; 0x81
   13782:	4833      	ldr	r0, [pc, #204]	; (13850 <onoff_request+0x110>)
   13784:	f01a fde6 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   13788:	4648      	mov	r0, r9
   1378a:	f015 fc0f 	bl	28fac <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1378e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13792:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   13794:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   13796:	428b      	cmp	r3, r1
   13798:	f002 0607 	and.w	r6, r2, #7
   1379c:	d050      	beq.n	13840 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1379e:	2e02      	cmp	r6, #2
   137a0:	d124      	bne.n	137ec <onoff_request+0xac>
	rv = state;
   137a2:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   137a4:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   137a8:	3301      	adds	r3, #1
   137aa:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   137ac:	4648      	mov	r0, r9
   137ae:	f015 fbef 	bl	28f90 <z_spin_unlock_valid>
   137b2:	b968      	cbnz	r0, 137d0 <onoff_request+0x90>
   137b4:	23ac      	movs	r3, #172	; 0xac
   137b6:	4a26      	ldr	r2, [pc, #152]	; (13850 <onoff_request+0x110>)
   137b8:	4929      	ldr	r1, [pc, #164]	; (13860 <onoff_request+0x120>)
   137ba:	4827      	ldr	r0, [pc, #156]	; (13858 <onoff_request+0x118>)
   137bc:	f01a fae4 	bl	2dd88 <printk>
   137c0:	4649      	mov	r1, r9
   137c2:	4828      	ldr	r0, [pc, #160]	; (13864 <onoff_request+0x124>)
   137c4:	f01a fae0 	bl	2dd88 <printk>
   137c8:	21ac      	movs	r1, #172	; 0xac
   137ca:	4821      	ldr	r0, [pc, #132]	; (13850 <onoff_request+0x110>)
   137cc:	f01a fdc2 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   137d0:	f38a 8811 	msr	BASEPRI, sl
   137d4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   137d8:	f1b8 0f00 	cmp.w	r8, #0
   137dc:	d017      	beq.n	1380e <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   137de:	2300      	movs	r3, #0
   137e0:	4632      	mov	r2, r6
   137e2:	4639      	mov	r1, r7
   137e4:	4620      	mov	r0, r4
   137e6:	f01a fb20 	bl	2de2a <notify_one>
   137ea:	e010      	b.n	1380e <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   137ec:	0793      	lsls	r3, r2, #30
   137ee:	d001      	beq.n	137f4 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   137f0:	2e06      	cmp	r6, #6
   137f2:	d10f      	bne.n	13814 <onoff_request+0xd4>
	parent->next = child;
   137f4:	2300      	movs	r3, #0
   137f6:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   137f8:	6863      	ldr	r3, [r4, #4]
   137fa:	b9f3      	cbnz	r3, 1383a <onoff_request+0xfa>
	list->head = node;
   137fc:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   13800:	4635      	mov	r5, r6
   13802:	b9fe      	cbnz	r6, 13844 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   13804:	4652      	mov	r2, sl
   13806:	2102      	movs	r1, #2
   13808:	4620      	mov	r0, r4
   1380a:	f7ff fd6d 	bl	132e8 <process_event>
		}
	}

	return rv;
}
   1380e:	4628      	mov	r0, r5
   13810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   13814:	2e05      	cmp	r6, #5
   13816:	d018      	beq.n	1384a <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   13818:	2e01      	cmp	r6, #1
   1381a:	d00b      	beq.n	13834 <onoff_request+0xf4>
   1381c:	4912      	ldr	r1, [pc, #72]	; (13868 <onoff_request+0x128>)
   1381e:	480e      	ldr	r0, [pc, #56]	; (13858 <onoff_request+0x118>)
   13820:	f240 13c9 	movw	r3, #457	; 0x1c9
   13824:	4a11      	ldr	r2, [pc, #68]	; (1386c <onoff_request+0x12c>)
   13826:	f01a faaf 	bl	2dd88 <printk>
   1382a:	f240 11c9 	movw	r1, #457	; 0x1c9
   1382e:	480f      	ldr	r0, [pc, #60]	; (1386c <onoff_request+0x12c>)
   13830:	f01a fd90 	bl	2e354 <assert_post_action>
		rv = -EIO;
   13834:	f06f 0504 	mvn.w	r5, #4
   13838:	e004      	b.n	13844 <onoff_request+0x104>
	parent->next = child;
   1383a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1383c:	6067      	str	r7, [r4, #4]
}
   1383e:	e7df      	b.n	13800 <onoff_request+0xc0>
		rv = -EAGAIN;
   13840:	f06f 050a 	mvn.w	r5, #10
   13844:	f04f 0800 	mov.w	r8, #0
   13848:	e7b0      	b.n	137ac <onoff_request+0x6c>
		rv = -ENOTSUP;
   1384a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1384e:	e7f9      	b.n	13844 <onoff_request+0x104>
   13850:	00037fec 	.word	0x00037fec
   13854:	0003803e 	.word	0x0003803e
   13858:	00037f2c 	.word	0x00037f2c
   1385c:	00038053 	.word	0x00038053
   13860:	00038012 	.word	0x00038012
   13864:	00038029 	.word	0x00038029
   13868:	00037fd6 	.word	0x00037fd6
   1386c:	00037f49 	.word	0x00037f49

00013870 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   13870:	b570      	push	{r4, r5, r6, lr}
   13872:	4604      	mov	r4, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13874:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   13878:	f04f 0320 	mov.w	r3, #32
   1387c:	f3ef 8611 	mrs	r6, BASEPRI
   13880:	f383 8811 	msr	BASEPRI, r3
   13884:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13888:	4628      	mov	r0, r5
   1388a:	f015 fb73 	bl	28f74 <z_spin_lock_valid>
   1388e:	b968      	cbnz	r0, 138ac <onoff_release+0x3c>
   13890:	2381      	movs	r3, #129	; 0x81
   13892:	4a27      	ldr	r2, [pc, #156]	; (13930 <onoff_release+0xc0>)
   13894:	4927      	ldr	r1, [pc, #156]	; (13934 <onoff_release+0xc4>)
   13896:	4828      	ldr	r0, [pc, #160]	; (13938 <onoff_release+0xc8>)
   13898:	f01a fa76 	bl	2dd88 <printk>
   1389c:	4629      	mov	r1, r5
   1389e:	4827      	ldr	r0, [pc, #156]	; (1393c <onoff_release+0xcc>)
   138a0:	f01a fa72 	bl	2dd88 <printk>
   138a4:	2181      	movs	r1, #129	; 0x81
   138a6:	4822      	ldr	r0, [pc, #136]	; (13930 <onoff_release+0xc0>)
   138a8:	f01a fd54 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   138ac:	4628      	mov	r0, r5
   138ae:	f015 fb7d 	bl	28fac <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   138b2:	8ba3      	ldrh	r3, [r4, #28]
   138b4:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   138b8:	2b02      	cmp	r3, #2
   138ba:	d01c      	beq.n	138f6 <onoff_release+0x86>
		if (state == ONOFF_STATE_ERROR) {
   138bc:	2b01      	cmp	r3, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   138be:	bf0c      	ite	eq
   138c0:	f06f 0404 	mvneq.w	r4, #4
   138c4:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   138c8:	4628      	mov	r0, r5
   138ca:	f015 fb61 	bl	28f90 <z_spin_unlock_valid>
   138ce:	b968      	cbnz	r0, 138ec <onoff_release+0x7c>
   138d0:	23ac      	movs	r3, #172	; 0xac
   138d2:	4a17      	ldr	r2, [pc, #92]	; (13930 <onoff_release+0xc0>)
   138d4:	491a      	ldr	r1, [pc, #104]	; (13940 <onoff_release+0xd0>)
   138d6:	4818      	ldr	r0, [pc, #96]	; (13938 <onoff_release+0xc8>)
   138d8:	f01a fa56 	bl	2dd88 <printk>
   138dc:	4629      	mov	r1, r5
   138de:	4819      	ldr	r0, [pc, #100]	; (13944 <onoff_release+0xd4>)
   138e0:	f01a fa52 	bl	2dd88 <printk>
   138e4:	21ac      	movs	r1, #172	; 0xac
   138e6:	4812      	ldr	r0, [pc, #72]	; (13930 <onoff_release+0xc0>)
   138e8:	f01a fd34 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   138ec:	f386 8811 	msr	BASEPRI, r6
   138f0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   138f4:	e018      	b.n	13928 <onoff_release+0xb8>
	__ASSERT_NO_MSG(mgr->refs > 0);
   138f6:	8be3      	ldrh	r3, [r4, #30]
   138f8:	b95b      	cbnz	r3, 13912 <onoff_release+0xa2>
   138fa:	4913      	ldr	r1, [pc, #76]	; (13948 <onoff_release+0xd8>)
   138fc:	480e      	ldr	r0, [pc, #56]	; (13938 <onoff_release+0xc8>)
   138fe:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   13902:	4a12      	ldr	r2, [pc, #72]	; (1394c <onoff_release+0xdc>)
   13904:	f01a fa40 	bl	2dd88 <printk>
   13908:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   1390c:	480f      	ldr	r0, [pc, #60]	; (1394c <onoff_release+0xdc>)
   1390e:	f01a fd21 	bl	2e354 <assert_post_action>
	mgr->refs -= 1U;
   13912:	8be3      	ldrh	r3, [r4, #30]
   13914:	3b01      	subs	r3, #1
   13916:	b29b      	uxth	r3, r3
   13918:	83e3      	strh	r3, [r4, #30]
	if (stop) {
   1391a:	b93b      	cbnz	r3, 1392c <onoff_release+0xbc>
		process_event(mgr, EVT_RECHECK, key);
   1391c:	4620      	mov	r0, r4
   1391e:	4632      	mov	r2, r6
   13920:	2102      	movs	r1, #2
   13922:	f7ff fce1 	bl	132e8 <process_event>
	int rv = state;
   13926:	2402      	movs	r4, #2
}
   13928:	4620      	mov	r0, r4
   1392a:	bd70      	pop	{r4, r5, r6, pc}
	int rv = state;
   1392c:	2402      	movs	r4, #2
   1392e:	e7cb      	b.n	138c8 <onoff_release+0x58>
   13930:	00037fec 	.word	0x00037fec
   13934:	0003803e 	.word	0x0003803e
   13938:	00037f2c 	.word	0x00037f2c
   1393c:	00038053 	.word	0x00038053
   13940:	00038012 	.word	0x00038012
   13944:	00038029 	.word	0x00038029
   13948:	0003806b 	.word	0x0003806b
   1394c:	00037f49 	.word	0x00037f49

00013950 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   13950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13954:	460f      	mov	r7, r1
	if ((mgr == NULL) || (cli == NULL)) {
   13956:	4605      	mov	r5, r0
   13958:	2800      	cmp	r0, #0
   1395a:	d053      	beq.n	13a04 <onoff_cancel+0xb4>
   1395c:	2900      	cmp	r1, #0
   1395e:	d051      	beq.n	13a04 <onoff_cancel+0xb4>
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13960:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   13964:	f04f 0320 	mov.w	r3, #32
   13968:	f3ef 8811 	mrs	r8, BASEPRI
   1396c:	f383 8811 	msr	BASEPRI, r3
   13970:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13974:	4630      	mov	r0, r6
   13976:	f015 fafd 	bl	28f74 <z_spin_lock_valid>
   1397a:	b968      	cbnz	r0, 13998 <onoff_cancel+0x48>
   1397c:	2381      	movs	r3, #129	; 0x81
   1397e:	4a23      	ldr	r2, [pc, #140]	; (13a0c <onoff_cancel+0xbc>)
   13980:	4923      	ldr	r1, [pc, #140]	; (13a10 <onoff_cancel+0xc0>)
   13982:	4824      	ldr	r0, [pc, #144]	; (13a14 <onoff_cancel+0xc4>)
   13984:	f01a fa00 	bl	2dd88 <printk>
   13988:	4631      	mov	r1, r6
   1398a:	4823      	ldr	r0, [pc, #140]	; (13a18 <onoff_cancel+0xc8>)
   1398c:	f01a f9fc 	bl	2dd88 <printk>
   13990:	2181      	movs	r1, #129	; 0x81
   13992:	481e      	ldr	r0, [pc, #120]	; (13a0c <onoff_cancel+0xbc>)
   13994:	f01a fcde 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   13998:	4630      	mov	r0, r6
   1399a:	f015 fb07 	bl	28fac <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   1399e:	4639      	mov	r1, r7
   139a0:	4628      	mov	r0, r5
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   139a2:	8bac      	ldrh	r4, [r5, #28]
	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   139a4:	f01a fa0a 	bl	2ddbc <sys_slist_find_and_remove>
   139a8:	b348      	cbz	r0, 139fe <onoff_cancel+0xae>
   139aa:	f004 0407 	and.w	r4, r4, #7
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
   139ae:	1f23      	subs	r3, r4, #4
   139b0:	2b02      	cmp	r3, #2
   139b2:	d90b      	bls.n	139cc <onoff_cancel+0x7c>
   139b4:	4919      	ldr	r1, [pc, #100]	; (13a1c <onoff_cancel+0xcc>)
   139b6:	4817      	ldr	r0, [pc, #92]	; (13a14 <onoff_cancel+0xc4>)
   139b8:	f240 232e 	movw	r3, #558	; 0x22e
   139bc:	4a18      	ldr	r2, [pc, #96]	; (13a20 <onoff_cancel+0xd0>)
   139be:	f01a f9e3 	bl	2dd88 <printk>
   139c2:	f240 212e 	movw	r1, #558	; 0x22e
   139c6:	4816      	ldr	r0, [pc, #88]	; (13a20 <onoff_cancel+0xd0>)
   139c8:	f01a fcc4 	bl	2e354 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   139cc:	4630      	mov	r0, r6
   139ce:	f015 fadf 	bl	28f90 <z_spin_unlock_valid>
   139d2:	b968      	cbnz	r0, 139f0 <onoff_cancel+0xa0>
   139d4:	23ac      	movs	r3, #172	; 0xac
   139d6:	4a0d      	ldr	r2, [pc, #52]	; (13a0c <onoff_cancel+0xbc>)
   139d8:	4912      	ldr	r1, [pc, #72]	; (13a24 <onoff_cancel+0xd4>)
   139da:	480e      	ldr	r0, [pc, #56]	; (13a14 <onoff_cancel+0xc4>)
   139dc:	f01a f9d4 	bl	2dd88 <printk>
   139e0:	4631      	mov	r1, r6
   139e2:	4811      	ldr	r0, [pc, #68]	; (13a28 <onoff_cancel+0xd8>)
   139e4:	f01a f9d0 	bl	2dd88 <printk>
   139e8:	21ac      	movs	r1, #172	; 0xac
   139ea:	4808      	ldr	r0, [pc, #32]	; (13a0c <onoff_cancel+0xbc>)
   139ec:	f01a fcb2 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   139f0:	f388 8811 	msr	BASEPRI, r8
   139f4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   139f8:	4620      	mov	r0, r4
   139fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int rv = -EALREADY;
   139fe:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13a02:	e7e3      	b.n	139cc <onoff_cancel+0x7c>
		return -EINVAL;
   13a04:	f06f 0415 	mvn.w	r4, #21
   13a08:	e7f6      	b.n	139f8 <onoff_cancel+0xa8>
   13a0a:	bf00      	nop
   13a0c:	00037fec 	.word	0x00037fec
   13a10:	0003803e 	.word	0x0003803e
   13a14:	00037f2c 	.word	0x00037f2c
   13a18:	00038053 	.word	0x00038053
   13a1c:	00038079 	.word	0x00038079
   13a20:	00037f49 	.word	0x00037f49
   13a24:	00038012 	.word	0x00038012
   13a28:	00038029 	.word	0x00038029

00013a2c <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   13a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   13a30:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   13a32:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   13a34:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   13a38:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   13a3a:	f240 746c 	movw	r4, #1900	; 0x76c
   13a3e:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   13a40:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   13a42:	6943      	ldr	r3, [r0, #20]
{
   13a44:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   13a46:	18e4      	adds	r4, r4, r3
   13a48:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   13a4c:	f1b9 0f02 	cmp.w	r9, #2
   13a50:	bf8c      	ite	hi
   13a52:	2300      	movhi	r3, #0
   13a54:	2301      	movls	r3, #1
   13a56:	1ae4      	subs	r4, r4, r3
   13a58:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   13a5c:	2c00      	cmp	r4, #0
   13a5e:	f175 0300 	sbcs.w	r3, r5, #0
   13a62:	da57      	bge.n	13b14 <timeutil_timegm64+0xe8>
   13a64:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   13a68:	f44f 72c8 	mov.w	r2, #400	; 0x190
   13a6c:	2300      	movs	r3, #0
   13a6e:	1820      	adds	r0, r4, r0
   13a70:	f145 31ff 	adc.w	r1, r5, #4294967295
   13a74:	f7fd fb6c 	bl	11150 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   13a78:	4b29      	ldr	r3, [pc, #164]	; (13b20 <timeutil_timegm64+0xf4>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   13a7a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   13a7e:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   13a82:	e9d8 5300 	ldrd	r5, r3, [r8]
   13a86:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13a88:	f1b9 0f02 	cmp.w	r9, #2
   13a8c:	bf8c      	ite	hi
   13a8e:	f06f 0e02 	mvnhi.w	lr, #2
   13a92:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   13a96:	ea4f 7be3 	mov.w	fp, r3, asr #31
   13a9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13a9e:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   13aa0:	fbcc ab03 	smlal	sl, fp, ip, r3
   13aa4:	fbaa 230c 	umull	r2, r3, sl, ip
   13aa8:	fb0c 330b 	mla	r3, ip, fp, r3
   13aac:	1952      	adds	r2, r2, r5
   13aae:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13ab2:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13ab6:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13aba:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   13abe:	fb05 cc04 	mla	ip, r5, r4, ip
   13ac2:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13ac4:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13ac8:	4465      	add	r5, ip
   13aca:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13ace:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13ad2:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   13ad6:	f10e 0e02 	add.w	lr, lr, #2
   13ada:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
   13ade:	f8df c04c 	ldr.w	ip, [pc, #76]	; 13b2c <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   13ae2:	1b2c      	subs	r4, r5, r4
   13ae4:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   13ae6:	fba0 450c 	umull	r4, r5, r0, ip
   13aea:	fb0c 5501 	mla	r5, ip, r1, r5
   13aee:	490d      	ldr	r1, [pc, #52]	; (13b24 <timeutil_timegm64+0xf8>)
   13af0:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   13af2:	490d      	ldr	r1, [pc, #52]	; (13b28 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   13af4:	f145 37ff 	adc.w	r7, r5, #4294967295
   13af8:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   13afc:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   13b00:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   13b04:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   13b08:	18a0      	adds	r0, r4, r2
   13b0a:	eb45 0103 	adc.w	r1, r5, r3
   13b0e:	b003      	add	sp, #12
   13b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   13b14:	f44f 72c8 	mov.w	r2, #400	; 0x190
   13b18:	2300      	movs	r3, #0
   13b1a:	4620      	mov	r0, r4
   13b1c:	4629      	mov	r1, r5
   13b1e:	e7a9      	b.n	13a74 <timeutil_timegm64+0x48>
   13b20:	fffffe70 	.word	0xfffffe70
   13b24:	fff50594 	.word	0xfff50594
   13b28:	00015180 	.word	0x00015180
   13b2c:	00023ab1 	.word	0x00023ab1

00013b30 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   13b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   13b32:	460e      	mov	r6, r1
   13b34:	2900      	cmp	r1, #0
   13b36:	d043      	beq.n	13bc0 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   13b38:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   13b3a:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   13b3c:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   13b3e:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   13b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   13b44:	bf2c      	ite	cs
   13b46:	2408      	movcs	r4, #8
   13b48:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   13b4a:	1b0c      	subs	r4, r1, r4
   13b4c:	1b64      	subs	r4, r4, r5
   13b4e:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   13b50:	4621      	mov	r1, r4
   13b52:	f01a f9c0 	bl	2ded6 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   13b56:	07c3      	lsls	r3, r0, #31
   13b58:	d40d      	bmi.n	13b76 <sys_heap_free+0x46>
   13b5a:	239a      	movs	r3, #154	; 0x9a
   13b5c:	4a19      	ldr	r2, [pc, #100]	; (13bc4 <sys_heap_free+0x94>)
   13b5e:	491a      	ldr	r1, [pc, #104]	; (13bc8 <sys_heap_free+0x98>)
   13b60:	481a      	ldr	r0, [pc, #104]	; (13bcc <sys_heap_free+0x9c>)
   13b62:	f01a f911 	bl	2dd88 <printk>
   13b66:	4631      	mov	r1, r6
   13b68:	4819      	ldr	r0, [pc, #100]	; (13bd0 <sys_heap_free+0xa0>)
   13b6a:	f01a f90d 	bl	2dd88 <printk>
   13b6e:	219a      	movs	r1, #154	; 0x9a
   13b70:	4814      	ldr	r0, [pc, #80]	; (13bc4 <sys_heap_free+0x94>)
   13b72:	f01a fbef 	bl	2e354 <assert_post_action>
	return c + chunk_size(h, c);
   13b76:	4621      	mov	r1, r4
   13b78:	4628      	mov	r0, r5
   13b7a:	f01a f9c2 	bl	2df02 <chunk_size>
   13b7e:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   13b80:	4639      	mov	r1, r7
   13b82:	2200      	movs	r2, #0
   13b84:	4628      	mov	r0, r5
   13b86:	f01a f9a6 	bl	2ded6 <chunk_field>
   13b8a:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   13b8c:	42bc      	cmp	r4, r7
   13b8e:	d00d      	beq.n	13bac <sys_heap_free+0x7c>
   13b90:	23a2      	movs	r3, #162	; 0xa2
   13b92:	4a0c      	ldr	r2, [pc, #48]	; (13bc4 <sys_heap_free+0x94>)
   13b94:	490f      	ldr	r1, [pc, #60]	; (13bd4 <sys_heap_free+0xa4>)
   13b96:	480d      	ldr	r0, [pc, #52]	; (13bcc <sys_heap_free+0x9c>)
   13b98:	f01a f8f6 	bl	2dd88 <printk>
   13b9c:	4631      	mov	r1, r6
   13b9e:	480e      	ldr	r0, [pc, #56]	; (13bd8 <sys_heap_free+0xa8>)
   13ba0:	f01a f8f2 	bl	2dd88 <printk>
   13ba4:	21a2      	movs	r1, #162	; 0xa2
   13ba6:	4807      	ldr	r0, [pc, #28]	; (13bc4 <sys_heap_free+0x94>)
   13ba8:	f01a fbd4 	bl	2e354 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   13bac:	4621      	mov	r1, r4
   13bae:	4628      	mov	r0, r5
   13bb0:	2200      	movs	r2, #0
   13bb2:	f01a f9ac 	bl	2df0e <set_chunk_used>
	free_chunk(h, c);
   13bb6:	4621      	mov	r1, r4
}
   13bb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   13bbc:	f01a bae2 	b.w	2e184 <free_chunk>
}
   13bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13bc2:	bf00      	nop
   13bc4:	000380f0 	.word	0x000380f0
   13bc8:	00038111 	.word	0x00038111
   13bcc:	00037f2c 	.word	0x00037f2c
   13bd0:	00038122 	.word	0x00038122
   13bd4:	0003815a 	.word	0x0003815a
   13bd8:	00038180 	.word	0x00038180

00013bdc <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   13bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   13be0:	6806      	ldr	r6, [r0, #0]
{
   13be2:	4614      	mov	r4, r2
   13be4:	68b3      	ldr	r3, [r6, #8]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   13be6:	424a      	negs	r2, r1
	return big_heap(h) ? 8 : 4;
   13be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   13bec:	bf2c      	ite	cs
   13bee:	2508      	movcs	r5, #8
   13bf0:	2504      	movcc	r5, #4
   13bf2:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   13bf6:	ea31 0202 	bics.w	r2, r1, r2
   13bfa:	d01e      	beq.n	13c3a <sys_heap_aligned_alloc+0x5e>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   13bfc:	42bd      	cmp	r5, r7
   13bfe:	bf28      	it	cs
   13c00:	463d      	movcs	r5, r7
   13c02:	46b9      	mov	r9, r7
		align -= rew;
   13c04:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   13c06:	f107 3aff 	add.w	sl, r7, #4294967295
   13c0a:	ea1a 0f07 	tst.w	sl, r7
   13c0e:	d00e      	beq.n	13c2e <sys_heap_aligned_alloc+0x52>
   13c10:	4935      	ldr	r1, [pc, #212]	; (13ce8 <sys_heap_aligned_alloc+0x10c>)
   13c12:	f240 130d 	movw	r3, #269	; 0x10d
   13c16:	4a35      	ldr	r2, [pc, #212]	; (13cec <sys_heap_aligned_alloc+0x110>)
   13c18:	4835      	ldr	r0, [pc, #212]	; (13cf0 <sys_heap_aligned_alloc+0x114>)
   13c1a:	f01a f8b5 	bl	2dd88 <printk>
   13c1e:	4835      	ldr	r0, [pc, #212]	; (13cf4 <sys_heap_aligned_alloc+0x118>)
   13c20:	f01a f8b2 	bl	2dd88 <printk>
   13c24:	f240 110d 	movw	r1, #269	; 0x10d
   13c28:	4830      	ldr	r0, [pc, #192]	; (13cec <sys_heap_aligned_alloc+0x110>)
   13c2a:	f01a fb93 	bl	2e354 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   13c2e:	b974      	cbnz	r4, 13c4e <sys_heap_aligned_alloc+0x72>
		return NULL;
   13c30:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   13c34:	4648      	mov	r0, r9
   13c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   13c3a:	42a9      	cmp	r1, r5
   13c3c:	d804      	bhi.n	13c48 <sys_heap_aligned_alloc+0x6c>
			return sys_heap_alloc(heap, bytes);
   13c3e:	4621      	mov	r1, r4
}
   13c40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   13c44:	f01a bae0 	b.w	2e208 <sys_heap_alloc>
		rew = 0;
   13c48:	f04f 0900 	mov.w	r9, #0
   13c4c:	e7db      	b.n	13c06 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   13c4e:	68b3      	ldr	r3, [r6, #8]
   13c50:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   13c54:	d9ec      	bls.n	13c30 <sys_heap_aligned_alloc+0x54>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   13c56:	1939      	adds	r1, r7, r4
   13c58:	1b49      	subs	r1, r1, r5
   13c5a:	4630      	mov	r0, r6
   13c5c:	f01a f973 	bl	2df46 <bytes_to_chunksz>
   13c60:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   13c62:	4630      	mov	r0, r6
   13c64:	f01a f9f9 	bl	2e05a <alloc_chunk>
	if (c0 == 0) {
   13c68:	4680      	mov	r8, r0
   13c6a:	2800      	cmp	r0, #0
   13c6c:	d0e0      	beq.n	13c30 <sys_heap_aligned_alloc+0x54>
	return big_heap(h) ? 8 : 4;
   13c6e:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   13c70:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   13c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   13c78:	bf2c      	ite	cs
   13c7a:	2308      	movcs	r3, #8
   13c7c:	2304      	movcc	r3, #4
   13c7e:	441d      	add	r5, r3
   13c80:	4435      	add	r5, r6
   13c82:	4455      	add	r5, sl
   13c84:	427f      	negs	r7, r7
   13c86:	402f      	ands	r7, r5
   13c88:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   13c8c:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   13c8e:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   13c92:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   13c94:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   13c96:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   13c9a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   13c9c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   13ca0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   13ca4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   13ca8:	d208      	bcs.n	13cbc <sys_heap_aligned_alloc+0xe0>
		split_chunks(h, c0, c);
   13caa:	4601      	mov	r1, r0
   13cac:	463a      	mov	r2, r7
   13cae:	4630      	mov	r0, r6
   13cb0:	f01a f97d 	bl	2dfae <split_chunks>
		free_list_add(h, c0);
   13cb4:	4641      	mov	r1, r8
   13cb6:	4630      	mov	r0, r6
   13cb8:	f01a fa08 	bl	2e0cc <free_list_add>
	return c + chunk_size(h, c);
   13cbc:	4639      	mov	r1, r7
   13cbe:	4630      	mov	r0, r6
   13cc0:	f01a f91f 	bl	2df02 <chunk_size>
   13cc4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   13cc6:	4284      	cmp	r4, r0
   13cc8:	d208      	bcs.n	13cdc <sys_heap_aligned_alloc+0x100>
		split_chunks(h, c, c_end);
   13cca:	4639      	mov	r1, r7
   13ccc:	4630      	mov	r0, r6
   13cce:	4622      	mov	r2, r4
   13cd0:	f01a f96d 	bl	2dfae <split_chunks>
		free_list_add(h, c_end);
   13cd4:	4621      	mov	r1, r4
   13cd6:	4630      	mov	r0, r6
   13cd8:	f01a f9f8 	bl	2e0cc <free_list_add>
	set_chunk_used(h, c, true);
   13cdc:	2201      	movs	r2, #1
   13cde:	4639      	mov	r1, r7
   13ce0:	4630      	mov	r0, r6
   13ce2:	f01a f914 	bl	2df0e <set_chunk_used>
	return mem;
   13ce6:	e7a5      	b.n	13c34 <sys_heap_aligned_alloc+0x58>
   13ce8:	000381bc 	.word	0x000381bc
   13cec:	000380f0 	.word	0x000380f0
   13cf0:	00037f2c 	.word	0x00037f2c
   13cf4:	000381d7 	.word	0x000381d7

00013cf8 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   13cf8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   13cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13cfe:	4607      	mov	r7, r0
   13d00:	460d      	mov	r5, r1
   13d02:	4616      	mov	r6, r2
   13d04:	d212      	bcs.n	13d2c <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   13d06:	2a04      	cmp	r2, #4
   13d08:	d80e      	bhi.n	13d28 <sys_heap_init+0x30>
   13d0a:	4944      	ldr	r1, [pc, #272]	; (13e1c <sys_heap_init+0x124>)
   13d0c:	f44f 73c1 	mov.w	r3, #386	; 0x182
   13d10:	4a43      	ldr	r2, [pc, #268]	; (13e20 <sys_heap_init+0x128>)
   13d12:	4844      	ldr	r0, [pc, #272]	; (13e24 <sys_heap_init+0x12c>)
   13d14:	f01a f838 	bl	2dd88 <printk>
   13d18:	4843      	ldr	r0, [pc, #268]	; (13e28 <sys_heap_init+0x130>)
   13d1a:	f01a f835 	bl	2dd88 <printk>
   13d1e:	f44f 71c1 	mov.w	r1, #386	; 0x182
   13d22:	483f      	ldr	r0, [pc, #252]	; (13e20 <sys_heap_init+0x128>)
   13d24:	f01a fb16 	bl	2e354 <assert_post_action>
   13d28:	2204      	movs	r2, #4
   13d2a:	e000      	b.n	13d2e <sys_heap_init+0x36>
   13d2c:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   13d2e:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   13d30:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   13d32:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   13d34:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   13d38:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   13d3c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   13d3e:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   13d40:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   13d44:	d80e      	bhi.n	13d64 <sys_heap_init+0x6c>
   13d46:	4939      	ldr	r1, [pc, #228]	; (13e2c <sys_heap_init+0x134>)
   13d48:	f240 138b 	movw	r3, #395	; 0x18b
   13d4c:	4a34      	ldr	r2, [pc, #208]	; (13e20 <sys_heap_init+0x128>)
   13d4e:	4835      	ldr	r0, [pc, #212]	; (13e24 <sys_heap_init+0x12c>)
   13d50:	f01a f81a 	bl	2dd88 <printk>
   13d54:	4834      	ldr	r0, [pc, #208]	; (13e28 <sys_heap_init+0x130>)
   13d56:	f01a f817 	bl	2dd88 <printk>
   13d5a:	f240 118b 	movw	r1, #395	; 0x18b
   13d5e:	4830      	ldr	r0, [pc, #192]	; (13e20 <sys_heap_init+0x128>)
   13d60:	f01a faf8 	bl	2e354 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   13d64:	2300      	movs	r3, #0
	heap->heap = h;
   13d66:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   13d68:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   13d6a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   13d6c:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
   13d6e:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   13d70:	f01a f8f3 	bl	2df5a <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   13d74:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   13d76:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   13d78:	1c47      	adds	r7, r0, #1
   13d7a:	4620      	mov	r0, r4
   13d7c:	f01a f8e3 	bl	2df46 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   13d80:	351b      	adds	r5, #27
   13d82:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");
   13d84:	4428      	add	r0, r5
   13d86:	42b0      	cmp	r0, r6
   13d88:	d30e      	bcc.n	13da8 <sys_heap_init+0xb0>
   13d8a:	4929      	ldr	r1, [pc, #164]	; (13e30 <sys_heap_init+0x138>)
   13d8c:	f44f 73cb 	mov.w	r3, #406	; 0x196
   13d90:	4a23      	ldr	r2, [pc, #140]	; (13e20 <sys_heap_init+0x128>)
   13d92:	4824      	ldr	r0, [pc, #144]	; (13e24 <sys_heap_init+0x12c>)
   13d94:	f019 fff8 	bl	2dd88 <printk>
   13d98:	4823      	ldr	r0, [pc, #140]	; (13e28 <sys_heap_init+0x130>)
   13d9a:	f019 fff5 	bl	2dd88 <printk>
   13d9e:	f44f 71cb 	mov.w	r1, #406	; 0x196
   13da2:	481f      	ldr	r0, [pc, #124]	; (13e20 <sys_heap_init+0x128>)
   13da4:	f01a fad6 	bl	2e354 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   13da8:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   13daa:	4619      	mov	r1, r3
   13dac:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   13db0:	42bb      	cmp	r3, r7
   13db2:	db2f      	blt.n	13e14 <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   13db4:	462a      	mov	r2, r5
   13db6:	4620      	mov	r0, r4
   13db8:	2100      	movs	r1, #0
   13dba:	f01a f8c0 	bl	2df3e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   13dbe:	2300      	movs	r3, #0
   13dc0:	4620      	mov	r0, r4
   13dc2:	461a      	mov	r2, r3
   13dc4:	4619      	mov	r1, r3
   13dc6:	f01a f891 	bl	2deec <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   13dca:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   13dcc:	4620      	mov	r0, r4
   13dce:	2201      	movs	r2, #1
   13dd0:	2100      	movs	r1, #0
   13dd2:	f01a f89c 	bl	2df0e <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   13dd6:	463a      	mov	r2, r7
   13dd8:	4629      	mov	r1, r5
   13dda:	f01a f8b0 	bl	2df3e <set_chunk_size>
   13dde:	462b      	mov	r3, r5
   13de0:	4629      	mov	r1, r5
   13de2:	4620      	mov	r0, r4
   13de4:	2200      	movs	r2, #0
   13de6:	f01a f881 	bl	2deec <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   13dea:	4631      	mov	r1, r6
   13dec:	4620      	mov	r0, r4
   13dee:	2200      	movs	r2, #0
   13df0:	f01a f8a5 	bl	2df3e <set_chunk_size>
   13df4:	463b      	mov	r3, r7
   13df6:	4631      	mov	r1, r6
   13df8:	4620      	mov	r0, r4
   13dfa:	2200      	movs	r2, #0
   13dfc:	f01a f876 	bl	2deec <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   13e00:	4631      	mov	r1, r6
   13e02:	4620      	mov	r0, r4
   13e04:	2201      	movs	r2, #1
   13e06:	f01a f882 	bl	2df0e <set_chunk_used>

	free_list_add(h, chunk0_size);
   13e0a:	4629      	mov	r1, r5
}
   13e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   13e10:	f01a b95c 	b.w	2e0cc <free_list_add>
		h->buckets[i].next = 0;
   13e14:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   13e18:	3301      	adds	r3, #1
   13e1a:	e7c9      	b.n	13db0 <sys_heap_init+0xb8>
   13e1c:	000381f4 	.word	0x000381f4
   13e20:	000380f0 	.word	0x000380f0
   13e24:	00037f2c 	.word	0x00037f2c
   13e28:	00038215 	.word	0x00038215
   13e2c:	0003822e 	.word	0x0003822e
   13e30:	00038257 	.word	0x00038257

00013e34 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   13e34:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e36:	4602      	mov	r2, r0
   13e38:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   13e3a:	270a      	movs	r7, #10
	size_t val = 0;
   13e3c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   13e3e:	4e07      	ldr	r6, [pc, #28]	; (13e5c <extract_decimal+0x28>)
   13e40:	460c      	mov	r4, r1
   13e42:	7823      	ldrb	r3, [r4, #0]
   13e44:	3101      	adds	r1, #1
   13e46:	5d9d      	ldrb	r5, [r3, r6]
   13e48:	076d      	lsls	r5, r5, #29
   13e4a:	d401      	bmi.n	13e50 <extract_decimal+0x1c>
	}
	*str = sp;
   13e4c:	6014      	str	r4, [r2, #0]
	return val;
}
   13e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   13e50:	fb07 3300 	mla	r3, r7, r0, r3
   13e54:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   13e58:	e7f2      	b.n	13e40 <extract_decimal+0xc>
   13e5a:	bf00      	nop
   13e5c:	0003e8c1 	.word	0x0003e8c1

00013e60 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   13e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e64:	4614      	mov	r4, r2
   13e66:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   13e68:	78d3      	ldrb	r3, [r2, #3]
   13e6a:	4a24      	ldr	r2, [pc, #144]	; (13efc <encode_uint+0x9c>)
	switch (specifier) {
   13e6c:	2b6f      	cmp	r3, #111	; 0x6f
   13e6e:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   13e72:	4606      	mov	r6, r0
   13e74:	f00a 0203 	and.w	r2, sl, #3
   13e78:	460f      	mov	r7, r1
   13e7a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   13e7c:	d02d      	beq.n	13eda <encode_uint+0x7a>
   13e7e:	d828      	bhi.n	13ed2 <encode_uint+0x72>
		return 16;
   13e80:	2b58      	cmp	r3, #88	; 0x58
   13e82:	bf14      	ite	ne
   13e84:	250a      	movne	r5, #10
   13e86:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   13e88:	46aa      	mov	sl, r5
   13e8a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   13e8e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   13e92:	4652      	mov	r2, sl
   13e94:	465b      	mov	r3, fp
   13e96:	4630      	mov	r0, r6
   13e98:	4639      	mov	r1, r7
   13e9a:	f7fd f9a9 	bl	111f0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   13e9e:	2a09      	cmp	r2, #9
   13ea0:	b2d3      	uxtb	r3, r2
   13ea2:	d81f      	bhi.n	13ee4 <encode_uint+0x84>
   13ea4:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   13ea6:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13ea8:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   13eaa:	bf08      	it	eq
   13eac:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13eae:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   13eb2:	d301      	bcc.n	13eb8 <encode_uint+0x58>
   13eb4:	45c8      	cmp	r8, r9
   13eb6:	d812      	bhi.n	13ede <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   13eb8:	7823      	ldrb	r3, [r4, #0]
   13eba:	069b      	lsls	r3, r3, #26
   13ebc:	d505      	bpl.n	13eca <encode_uint+0x6a>
		if (radix == 8) {
   13ebe:	2d08      	cmp	r5, #8
   13ec0:	d116      	bne.n	13ef0 <encode_uint+0x90>
			conv->altform_0 = true;
   13ec2:	78a3      	ldrb	r3, [r4, #2]
   13ec4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   13ec8:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   13eca:	4640      	mov	r0, r8
   13ecc:	b003      	add	sp, #12
   13ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   13ed2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   13ed6:	2b70      	cmp	r3, #112	; 0x70
   13ed8:	e7d3      	b.n	13e82 <encode_uint+0x22>
	switch (specifier) {
   13eda:	2508      	movs	r5, #8
   13edc:	e7d4      	b.n	13e88 <encode_uint+0x28>
		value /= radix;
   13ede:	4606      	mov	r6, r0
   13ee0:	460f      	mov	r7, r1
   13ee2:	e7d6      	b.n	13e92 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   13ee4:	9a01      	ldr	r2, [sp, #4]
   13ee6:	2a01      	cmp	r2, #1
   13ee8:	bf0c      	ite	eq
   13eea:	3337      	addeq	r3, #55	; 0x37
   13eec:	3357      	addne	r3, #87	; 0x57
   13eee:	e7da      	b.n	13ea6 <encode_uint+0x46>
		} else if (radix == 16) {
   13ef0:	2d10      	cmp	r5, #16
   13ef2:	d1ea      	bne.n	13eca <encode_uint+0x6a>
			conv->altform_0c = true;
   13ef4:	78a3      	ldrb	r3, [r4, #2]
   13ef6:	f043 0310 	orr.w	r3, r3, #16
   13efa:	e7e5      	b.n	13ec8 <encode_uint+0x68>
   13efc:	0003e8c1 	.word	0x0003e8c1

00013f00 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   13f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f04:	4682      	mov	sl, r0
   13f06:	468b      	mov	fp, r1
   13f08:	4691      	mov	r9, r2
   13f0a:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   13f0c:	2500      	movs	r5, #0
{
   13f0e:	b093      	sub	sp, #76	; 0x4c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13f10:	f899 0000 	ldrb.w	r0, [r9]
   13f14:	b908      	cbnz	r0, 13f1a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   13f16:	4628      	mov	r0, r5
   13f18:	e33a      	b.n	14590 <cbvprintf+0x690>
		if (*fp != '%') {
   13f1a:	f109 0301 	add.w	r3, r9, #1
   13f1e:	2825      	cmp	r0, #37	; 0x25
   13f20:	9302      	str	r3, [sp, #8]
   13f22:	d006      	beq.n	13f32 <cbvprintf+0x32>
			OUTC('%');
   13f24:	4659      	mov	r1, fp
   13f26:	47d0      	blx	sl
   13f28:	2800      	cmp	r0, #0
   13f2a:	f2c0 8331 	blt.w	14590 <cbvprintf+0x690>
   13f2e:	3501      	adds	r5, #1
			break;
   13f30:	e1f1      	b.n	14316 <cbvprintf+0x416>
		} state = {
   13f32:	2218      	movs	r2, #24
   13f34:	2100      	movs	r1, #0
   13f36:	a80c      	add	r0, sp, #48	; 0x30
   13f38:	f021 fb45 	bl	355c6 <memset>
	if (*sp == '%') {
   13f3c:	f899 3001 	ldrb.w	r3, [r9, #1]
   13f40:	2b25      	cmp	r3, #37	; 0x25
   13f42:	d059      	beq.n	13ff8 <cbvprintf+0xf8>
   13f44:	9a02      	ldr	r2, [sp, #8]
   13f46:	4616      	mov	r6, r2
		switch (*sp) {
   13f48:	f812 3b01 	ldrb.w	r3, [r2], #1
   13f4c:	2b2b      	cmp	r3, #43	; 0x2b
   13f4e:	f000 808b 	beq.w	14068 <cbvprintf+0x168>
   13f52:	d879      	bhi.n	14048 <cbvprintf+0x148>
   13f54:	2b20      	cmp	r3, #32
   13f56:	f000 808c 	beq.w	14072 <cbvprintf+0x172>
   13f5a:	2b23      	cmp	r3, #35	; 0x23
   13f5c:	f000 808e 	beq.w	1407c <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   13f60:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13f64:	f003 0244 	and.w	r2, r3, #68	; 0x44
   13f68:	2a44      	cmp	r2, #68	; 0x44
   13f6a:	d103      	bne.n	13f74 <cbvprintf+0x74>
		conv->flag_zero = false;
   13f6c:	f36f 1386 	bfc	r3, #6, #1
   13f70:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   13f74:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13f78:	9605      	str	r6, [sp, #20]
   13f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f7e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   13f82:	7833      	ldrb	r3, [r6, #0]
   13f84:	2b2a      	cmp	r3, #42	; 0x2a
   13f86:	d17e      	bne.n	14086 <cbvprintf+0x186>
		conv->width_star = true;
   13f88:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   13f8c:	f043 0301 	orr.w	r3, r3, #1
   13f90:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   13f94:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   13f96:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   13f98:	781a      	ldrb	r2, [r3, #0]
   13f9a:	2a2e      	cmp	r2, #46	; 0x2e
   13f9c:	bf0c      	ite	eq
   13f9e:	2101      	moveq	r1, #1
   13fa0:	2100      	movne	r1, #0
   13fa2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   13fa6:	f361 0241 	bfi	r2, r1, #1, #1
   13faa:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   13fae:	d10b      	bne.n	13fc8 <cbvprintf+0xc8>
	++sp;
   13fb0:	1c5a      	adds	r2, r3, #1
   13fb2:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   13fb4:	785a      	ldrb	r2, [r3, #1]
   13fb6:	2a2a      	cmp	r2, #42	; 0x2a
   13fb8:	d17b      	bne.n	140b2 <cbvprintf+0x1b2>
		conv->prec_star = true;
   13fba:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   13fbe:	3302      	adds	r3, #2
		conv->prec_star = true;
   13fc0:	f042 0204 	orr.w	r2, r2, #4
   13fc4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
   13fc8:	4619      	mov	r1, r3
   13fca:	f811 0b01 	ldrb.w	r0, [r1], #1
   13fce:	286c      	cmp	r0, #108	; 0x6c
   13fd0:	f000 80b6 	beq.w	14140 <cbvprintf+0x240>
   13fd4:	d87d      	bhi.n	140d2 <cbvprintf+0x1d2>
   13fd6:	2868      	cmp	r0, #104	; 0x68
   13fd8:	f000 8084 	beq.w	140e4 <cbvprintf+0x1e4>
   13fdc:	286a      	cmp	r0, #106	; 0x6a
   13fde:	f000 80b9 	beq.w	14154 <cbvprintf+0x254>
   13fe2:	284c      	cmp	r0, #76	; 0x4c
   13fe4:	f000 80bd 	beq.w	14162 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   13fe8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
   13fec:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   13fee:	f36f 02c6 	bfc	r2, #3, #4
   13ff2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   13ff6:	e080      	b.n	140fa <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   13ff8:	f109 0202 	add.w	r2, r9, #2
   13ffc:	9202      	str	r2, [sp, #8]
   13ffe:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   14002:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   14006:	07d9      	lsls	r1, r3, #31
   14008:	f140 8149 	bpl.w	1429e <cbvprintf+0x39e>
			width = va_arg(ap, int);
   1400c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   14010:	f1b8 0f00 	cmp.w	r8, #0
   14014:	da07      	bge.n	14026 <cbvprintf+0x126>
				conv->flag_dash = true;
   14016:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1401a:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
   1401e:	f042 0204 	orr.w	r2, r2, #4
   14022:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
   14026:	075a      	lsls	r2, r3, #29
   14028:	f140 8142 	bpl.w	142b0 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   1402c:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   14030:	2f00      	cmp	r7, #0
   14032:	f280 8141 	bge.w	142b8 <cbvprintf+0x3b8>
				conv->prec_present = false;
   14036:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1403a:	f36f 0341 	bfc	r3, #1, #1
   1403e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   14042:	f04f 37ff 	mov.w	r7, #4294967295
   14046:	e137      	b.n	142b8 <cbvprintf+0x3b8>
		switch (*sp) {
   14048:	2b2d      	cmp	r3, #45	; 0x2d
   1404a:	d006      	beq.n	1405a <cbvprintf+0x15a>
   1404c:	2b30      	cmp	r3, #48	; 0x30
   1404e:	d187      	bne.n	13f60 <cbvprintf+0x60>
			conv->flag_zero = true;
   14050:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14058:	e003      	b.n	14062 <cbvprintf+0x162>
			conv->flag_dash = true;
   1405a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1405e:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   14062:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   14066:	e76e      	b.n	13f46 <cbvprintf+0x46>
			conv->flag_plus = true;
   14068:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1406c:	f043 0308 	orr.w	r3, r3, #8
   14070:	e7f7      	b.n	14062 <cbvprintf+0x162>
			conv->flag_space = true;
   14072:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14076:	f043 0310 	orr.w	r3, r3, #16
   1407a:	e7f2      	b.n	14062 <cbvprintf+0x162>
			conv->flag_hash = true;
   1407c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14080:	f043 0320 	orr.w	r3, r3, #32
   14084:	e7ed      	b.n	14062 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   14086:	a805      	add	r0, sp, #20
   14088:	f7ff fed4 	bl	13e34 <extract_decimal>
	if (sp != wp) {
   1408c:	9b05      	ldr	r3, [sp, #20]
   1408e:	42b3      	cmp	r3, r6
   14090:	d081      	beq.n	13f96 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   14092:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   14096:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   14098:	f3c1 0240 	ubfx	r2, r1, #1, #1
   1409c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   140a0:	0052      	lsls	r2, r2, #1
   140a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   140a6:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   140aa:	430a      	orrs	r2, r1
   140ac:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   140b0:	e771      	b.n	13f96 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   140b2:	a805      	add	r0, sp, #20
   140b4:	f7ff febe 	bl	13e34 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   140b8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   140bc:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   140be:	f3c3 0240 	ubfx	r2, r3, #1, #1
   140c2:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   140c6:	f360 0341 	bfi	r3, r0, #1, #1
   140ca:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   140ce:	9b05      	ldr	r3, [sp, #20]
   140d0:	e77a      	b.n	13fc8 <cbvprintf+0xc8>
	switch (*sp) {
   140d2:	2874      	cmp	r0, #116	; 0x74
   140d4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   140d8:	d040      	beq.n	1415c <cbvprintf+0x25c>
   140da:	287a      	cmp	r0, #122	; 0x7a
   140dc:	d184      	bne.n	13fe8 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   140de:	4613      	mov	r3, r2
   140e0:	2206      	movs	r2, #6
   140e2:	e028      	b.n	14136 <cbvprintf+0x236>
		if (*++sp == 'h') {
   140e4:	785a      	ldrb	r2, [r3, #1]
   140e6:	2a68      	cmp	r2, #104	; 0x68
   140e8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   140ec:	d121      	bne.n	14132 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   140ee:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   140f0:	f361 02c6 	bfi	r2, r1, #3, #4
   140f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   140f8:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   140fa:	460b      	mov	r3, r1
   140fc:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   14100:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   14102:	9302      	str	r3, [sp, #8]
   14104:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   14108:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1410c:	f200 80bf 	bhi.w	1428e <cbvprintf+0x38e>
   14110:	2a57      	cmp	r2, #87	; 0x57
   14112:	d833      	bhi.n	1417c <cbvprintf+0x27c>
   14114:	2a41      	cmp	r2, #65	; 0x41
   14116:	d003      	beq.n	14120 <cbvprintf+0x220>
   14118:	3a45      	subs	r2, #69	; 0x45
   1411a:	2a02      	cmp	r2, #2
   1411c:	f200 80b7 	bhi.w	1428e <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   14120:	2204      	movs	r2, #4
   14122:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   14126:	f362 0302 	bfi	r3, r2, #0, #3
   1412a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   1412e:	2301      	movs	r3, #1
			break;
   14130:	e084      	b.n	1423c <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   14132:	4613      	mov	r3, r2
   14134:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   14136:	f362 03c6 	bfi	r3, r2, #3, #4
   1413a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1413e:	e7dc      	b.n	140fa <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   14140:	785a      	ldrb	r2, [r3, #1]
   14142:	2a6c      	cmp	r2, #108	; 0x6c
   14144:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   14148:	d101      	bne.n	1414e <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   1414a:	2104      	movs	r1, #4
   1414c:	e7d0      	b.n	140f0 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   1414e:	4613      	mov	r3, r2
   14150:	2203      	movs	r2, #3
   14152:	e7f0      	b.n	14136 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   14154:	2205      	movs	r2, #5
   14156:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1415a:	e7ec      	b.n	14136 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   1415c:	4613      	mov	r3, r2
   1415e:	2207      	movs	r2, #7
   14160:	e7e9      	b.n	14136 <cbvprintf+0x236>
		conv->unsupported = true;
   14162:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   14166:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1416a:	f023 0302 	bic.w	r3, r3, #2
   1416e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   14172:	f043 0302 	orr.w	r3, r3, #2
   14176:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1417a:	e7be      	b.n	140fa <cbvprintf+0x1fa>
   1417c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   14180:	2920      	cmp	r1, #32
   14182:	f200 8084 	bhi.w	1428e <cbvprintf+0x38e>
   14186:	a001      	add	r0, pc, #4	; (adr r0, 1418c <cbvprintf+0x28c>)
   14188:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1418c:	00014251 	.word	0x00014251
   14190:	0001428f 	.word	0x0001428f
   14194:	0001428f 	.word	0x0001428f
   14198:	0001428f 	.word	0x0001428f
   1419c:	0001428f 	.word	0x0001428f
   141a0:	0001428f 	.word	0x0001428f
   141a4:	0001428f 	.word	0x0001428f
   141a8:	0001428f 	.word	0x0001428f
   141ac:	0001428f 	.word	0x0001428f
   141b0:	00014121 	.word	0x00014121
   141b4:	0001428f 	.word	0x0001428f
   141b8:	00014251 	.word	0x00014251
   141bc:	00014211 	.word	0x00014211
   141c0:	00014121 	.word	0x00014121
   141c4:	00014121 	.word	0x00014121
   141c8:	00014121 	.word	0x00014121
   141cc:	0001428f 	.word	0x0001428f
   141d0:	00014211 	.word	0x00014211
   141d4:	0001428f 	.word	0x0001428f
   141d8:	0001428f 	.word	0x0001428f
   141dc:	0001428f 	.word	0x0001428f
   141e0:	0001428f 	.word	0x0001428f
   141e4:	00014259 	.word	0x00014259
   141e8:	00014251 	.word	0x00014251
   141ec:	00014275 	.word	0x00014275
   141f0:	0001428f 	.word	0x0001428f
   141f4:	0001428f 	.word	0x0001428f
   141f8:	00014275 	.word	0x00014275
   141fc:	0001428f 	.word	0x0001428f
   14200:	00014251 	.word	0x00014251
   14204:	0001428f 	.word	0x0001428f
   14208:	0001428f 	.word	0x0001428f
   1420c:	00014251 	.word	0x00014251
		conv->specifier_cat = SPECIFIER_SINT;
   14210:	2001      	movs	r0, #1
   14212:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   14216:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1421a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1421e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   14220:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   14224:	bf02      	ittt	eq
   14226:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1422a:	f041 0101 	orreq.w	r1, r1, #1
   1422e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   14232:	2a63      	cmp	r2, #99	; 0x63
   14234:	d131      	bne.n	1429a <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   14236:	3b00      	subs	r3, #0
   14238:	bf18      	it	ne
   1423a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1423c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   14240:	f3c2 0140 	ubfx	r1, r2, #1, #1
   14244:	430b      	orrs	r3, r1
   14246:	f363 0241 	bfi	r2, r3, #1, #1
   1424a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   1424e:	e6d8      	b.n	14002 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   14250:	2002      	movs	r0, #2
   14252:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   14256:	e7de      	b.n	14216 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   14258:	2103      	movs	r1, #3
   1425a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1425e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   14262:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   14266:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1426a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   1426c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   14270:	4143      	adcs	r3, r0
   14272:	e7e3      	b.n	1423c <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   14274:	2103      	movs	r1, #3
   14276:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1427a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1427e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   14282:	bf14      	ite	ne
   14284:	2301      	movne	r3, #1
   14286:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   14288:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1428c:	e7d6      	b.n	1423c <cbvprintf+0x33c>
		conv->invalid = true;
   1428e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   14292:	f043 0301 	orr.w	r3, r3, #1
   14296:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   1429a:	2300      	movs	r3, #0
   1429c:	e7ce      	b.n	1423c <cbvprintf+0x33c>
		} else if (conv->width_present) {
   1429e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   142a2:	2a00      	cmp	r2, #0
		int width = -1;
   142a4:	bfac      	ite	ge
   142a6:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
   142aa:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
   142ae:	e6ba      	b.n	14026 <cbvprintf+0x126>
		} else if (conv->prec_present) {
   142b0:	079f      	lsls	r7, r3, #30
   142b2:	f57f aec6 	bpl.w	14042 <cbvprintf+0x142>
			precision = conv->prec_value;
   142b6:	9f10      	ldr	r7, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   142b8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   142ba:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   142be:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			= (enum length_mod_enum)conv->length_mod;
   142c2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		enum specifier_cat_enum specifier_cat
   142c6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   142ca:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   142cc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   142d0:	d137      	bne.n	14342 <cbvprintf+0x442>
			switch (length_mod) {
   142d2:	1ecb      	subs	r3, r1, #3
   142d4:	2b04      	cmp	r3, #4
   142d6:	d821      	bhi.n	1431c <cbvprintf+0x41c>
   142d8:	e8df f003 	tbb	[pc, r3]
   142dc:	20070703 	.word	0x20070703
   142e0:	20          	.byte	0x20
   142e1:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   142e2:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   142e6:	17d3      	asrs	r3, r2, #31
   142e8:	e004      	b.n	142f4 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   142ea:	3407      	adds	r4, #7
   142ec:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   142f0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   142f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   142f8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   142fc:	f013 0603 	ands.w	r6, r3, #3
   14300:	d055      	beq.n	143ae <cbvprintf+0x4ae>
			OUTS(sp, fp);
   14302:	464a      	mov	r2, r9
   14304:	4659      	mov	r1, fp
   14306:	4650      	mov	r0, sl
   14308:	9b02      	ldr	r3, [sp, #8]
   1430a:	f019 ffb0 	bl	2e26e <outs>
   1430e:	2800      	cmp	r0, #0
   14310:	f2c0 813e 	blt.w	14590 <cbvprintf+0x690>
   14314:	4405      	add	r5, r0
			OUTS(bps, bpe);
   14316:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1431a:	e5f9      	b.n	13f10 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1431c:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   14320:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   14322:	ea4f 73e2 	mov.w	r3, r2, asr #31
   14326:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1432a:	d105      	bne.n	14338 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   1432c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   14330:	930c      	str	r3, [sp, #48]	; 0x30
   14332:	2300      	movs	r3, #0
   14334:	930d      	str	r3, [sp, #52]	; 0x34
   14336:	e7df      	b.n	142f8 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   14338:	2902      	cmp	r1, #2
   1433a:	d1dd      	bne.n	142f8 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   1433c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   14340:	e7d1      	b.n	142e6 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   14342:	2b02      	cmp	r3, #2
   14344:	d123      	bne.n	1438e <cbvprintf+0x48e>
			switch (length_mod) {
   14346:	1ecb      	subs	r3, r1, #3
   14348:	2b04      	cmp	r3, #4
   1434a:	d813      	bhi.n	14374 <cbvprintf+0x474>
   1434c:	e8df f003 	tbb	[pc, r3]
   14350:	120a0a03 	.word	0x120a0a03
   14354:	12          	.byte	0x12
   14355:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   14356:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   14358:	6822      	ldr	r2, [r4, #0]
   1435a:	1d20      	adds	r0, r4, #4
   1435c:	920c      	str	r2, [sp, #48]	; 0x30
   1435e:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   14360:	4604      	mov	r4, r0
   14362:	e7c9      	b.n	142f8 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   14364:	3407      	adds	r4, #7
   14366:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   1436a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   1436e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   14372:	e7f5      	b.n	14360 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   14374:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   14378:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1437a:	930c      	str	r3, [sp, #48]	; 0x30
   1437c:	f04f 0300 	mov.w	r3, #0
   14380:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   14382:	d0d3      	beq.n	1432c <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   14384:	2902      	cmp	r1, #2
   14386:	d1b7      	bne.n	142f8 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   14388:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1438c:	e7d0      	b.n	14330 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   1438e:	2b04      	cmp	r3, #4
   14390:	d107      	bne.n	143a2 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   14392:	3407      	adds	r4, #7
   14394:	f024 0407 	bic.w	r4, r4, #7
   14398:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   1439c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   143a0:	e7aa      	b.n	142f8 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   143a2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   143a4:	bf04      	itt	eq
   143a6:	f854 3b04 	ldreq.w	r3, [r4], #4
   143aa:	930c      	streq	r3, [sp, #48]	; 0x30
   143ac:	e7a4      	b.n	142f8 <cbvprintf+0x3f8>
		switch (conv->specifier) {
   143ae:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   143b2:	2878      	cmp	r0, #120	; 0x78
   143b4:	d8af      	bhi.n	14316 <cbvprintf+0x416>
   143b6:	2862      	cmp	r0, #98	; 0x62
   143b8:	d820      	bhi.n	143fc <cbvprintf+0x4fc>
   143ba:	2825      	cmp	r0, #37	; 0x25
   143bc:	f43f adb2 	beq.w	13f24 <cbvprintf+0x24>
   143c0:	2858      	cmp	r0, #88	; 0x58
   143c2:	d1a8      	bne.n	14316 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   143c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   143c8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   143cc:	9300      	str	r3, [sp, #0]
   143ce:	aa0e      	add	r2, sp, #56	; 0x38
   143d0:	ab06      	add	r3, sp, #24
   143d2:	f7ff fd45 	bl	13e60 <encode_uint>
   143d6:	4681      	mov	r9, r0
			if (precision >= 0) {
   143d8:	2f00      	cmp	r7, #0
   143da:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   143de:	db0b      	blt.n	143f8 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   143e0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   143e4:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   143e8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   143ec:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   143ee:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   143f2:	d901      	bls.n	143f8 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   143f4:	1aff      	subs	r7, r7, r3
   143f6:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   143f8:	4607      	mov	r7, r0
   143fa:	e03c      	b.n	14476 <cbvprintf+0x576>
   143fc:	3863      	subs	r0, #99	; 0x63
   143fe:	2815      	cmp	r0, #21
   14400:	d889      	bhi.n	14316 <cbvprintf+0x416>
   14402:	a201      	add	r2, pc, #4	; (adr r2, 14408 <cbvprintf+0x508>)
   14404:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   14408:	00014487 	.word	0x00014487
   1440c:	000144e9 	.word	0x000144e9
   14410:	00014317 	.word	0x00014317
   14414:	00014317 	.word	0x00014317
   14418:	00014317 	.word	0x00014317
   1441c:	00014317 	.word	0x00014317
   14420:	000144e9 	.word	0x000144e9
   14424:	00014317 	.word	0x00014317
   14428:	00014317 	.word	0x00014317
   1442c:	00014317 	.word	0x00014317
   14430:	00014317 	.word	0x00014317
   14434:	00014547 	.word	0x00014547
   14438:	00014515 	.word	0x00014515
   1443c:	00014519 	.word	0x00014519
   14440:	00014317 	.word	0x00014317
   14444:	00014317 	.word	0x00014317
   14448:	00014461 	.word	0x00014461
   1444c:	00014317 	.word	0x00014317
   14450:	00014515 	.word	0x00014515
   14454:	00014317 	.word	0x00014317
   14458:	00014317 	.word	0x00014317
   1445c:	00014515 	.word	0x00014515
			if (precision >= 0) {
   14460:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   14462:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   14466:	db0a      	blt.n	1447e <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   14468:	4639      	mov	r1, r7
   1446a:	4648      	mov	r0, r9
   1446c:	f021 fa15 	bl	3589a <strnlen>
		char sign = 0;
   14470:	2600      	movs	r6, #0
			bpe = bps + len;
   14472:	eb09 0700 	add.w	r7, r9, r0
		if (bps == NULL) {
   14476:	f1b9 0f00 	cmp.w	r9, #0
   1447a:	d10c      	bne.n	14496 <cbvprintf+0x596>
   1447c:	e74b      	b.n	14316 <cbvprintf+0x416>
				len = strlen(bps);
   1447e:	4648      	mov	r0, r9
   14480:	f7fd f83e 	bl	11500 <strlen>
   14484:	e7f4      	b.n	14470 <cbvprintf+0x570>
			break;
   14486:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   14488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
   1448a:	f10d 0719 	add.w	r7, sp, #25
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1448e:	f88d 3018 	strb.w	r3, [sp, #24]
			bps = buf;
   14492:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   14496:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   1449a:	b106      	cbz	r6, 1449e <cbvprintf+0x59e>
			nj_len += 1U;
   1449c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1449e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   144a2:	06d0      	lsls	r0, r2, #27
   144a4:	d569      	bpl.n	1457a <cbvprintf+0x67a>
			nj_len += 2U;
   144a6:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   144a8:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   144aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   144ac:	bf48      	it	mi
   144ae:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   144b0:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   144b2:	bf48      	it	mi
   144b4:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   144b6:	f1b8 0f00 	cmp.w	r8, #0
   144ba:	dd76      	ble.n	145aa <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   144bc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   144c0:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   144c4:	f3c2 0380 	ubfx	r3, r2, #2, #1
   144c8:	9303      	str	r3, [sp, #12]
   144ca:	0753      	lsls	r3, r2, #29
   144cc:	d46d      	bmi.n	145aa <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   144ce:	0650      	lsls	r0, r2, #25
   144d0:	d561      	bpl.n	14596 <cbvprintf+0x696>
					if (sign != 0) {
   144d2:	b13e      	cbz	r6, 144e4 <cbvprintf+0x5e4>
						OUTC(sign);
   144d4:	4659      	mov	r1, fp
   144d6:	4630      	mov	r0, r6
   144d8:	47d0      	blx	sl
   144da:	2800      	cmp	r0, #0
   144dc:	db58      	blt.n	14590 <cbvprintf+0x690>
						sign = 0;
   144de:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   144e0:	3501      	adds	r5, #1
						sign = 0;
   144e2:	461e      	mov	r6, r3
					pad = '0';
   144e4:	2330      	movs	r3, #48	; 0x30
   144e6:	e057      	b.n	14598 <cbvprintf+0x698>
			if (conv->flag_plus) {
   144e8:	071e      	lsls	r6, r3, #28
   144ea:	d411      	bmi.n	14510 <cbvprintf+0x610>
				sign = ' ';
   144ec:	f013 0610 	ands.w	r6, r3, #16
   144f0:	bf18      	it	ne
   144f2:	2620      	movne	r6, #32
			sint = value->sint;
   144f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   144f8:	2a00      	cmp	r2, #0
   144fa:	f173 0100 	sbcs.w	r1, r3, #0
   144fe:	f6bf af61 	bge.w	143c4 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   14502:	4252      	negs	r2, r2
   14504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   14508:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1450a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1450e:	e759      	b.n	143c4 <cbvprintf+0x4c4>
				sign = '+';
   14510:	262b      	movs	r6, #43	; 0x2b
   14512:	e7ef      	b.n	144f4 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   14514:	2600      	movs	r6, #0
   14516:	e755      	b.n	143c4 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   14518:	980c      	ldr	r0, [sp, #48]	; 0x30
   1451a:	b348      	cbz	r0, 14570 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1451c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   14520:	9300      	str	r3, [sp, #0]
   14522:	2100      	movs	r1, #0
   14524:	ab06      	add	r3, sp, #24
   14526:	aa0e      	add	r2, sp, #56	; 0x38
   14528:	f7ff fc9a 	bl	13e60 <encode_uint>
				conv->altform_0c = true;
   1452c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   14530:	4681      	mov	r9, r0
				conv->altform_0c = true;
   14532:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   14536:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1453a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1453e:	2600      	movs	r6, #0
				conv->altform_0c = true;
   14540:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
   14544:	e748      	b.n	143d8 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   14546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   14548:	2907      	cmp	r1, #7
   1454a:	f63f aee4 	bhi.w	14316 <cbvprintf+0x416>
   1454e:	e8df f001 	tbb	[pc, r1]
   14552:	040d      	.short	0x040d
   14554:	08080d06 	.word	0x08080d06
   14558:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1455a:	701d      	strb	r5, [r3, #0]
		break;
   1455c:	e6db      	b.n	14316 <cbvprintf+0x416>
		*(short *)dp = (short)count;
   1455e:	801d      	strh	r5, [r3, #0]
		break;
   14560:	e6d9      	b.n	14316 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   14562:	4628      	mov	r0, r5
   14564:	17e9      	asrs	r1, r5, #31
   14566:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1456a:	e6d4      	b.n	14316 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1456c:	601d      	str	r5, [r3, #0]
		break;
   1456e:	e6d2      	b.n	14316 <cbvprintf+0x416>
			bpe = bps + 5;
   14570:	4f2e      	ldr	r7, [pc, #184]	; (1462c <cbvprintf+0x72c>)
   14572:	4606      	mov	r6, r0
			bps = "(nil)";
   14574:	f1a7 0905 	sub.w	r9, r7, #5
   14578:	e78d      	b.n	14496 <cbvprintf+0x596>
		} else if (conv->altform_0) {
   1457a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1457c:	bf48      	it	mi
   1457e:	3301      	addmi	r3, #1
   14580:	e792      	b.n	144a8 <cbvprintf+0x5a8>
					OUTC(pad);
   14582:	4618      	mov	r0, r3
   14584:	4659      	mov	r1, fp
   14586:	9303      	str	r3, [sp, #12]
   14588:	47d0      	blx	sl
   1458a:	2800      	cmp	r0, #0
   1458c:	9b03      	ldr	r3, [sp, #12]
   1458e:	da04      	bge.n	1459a <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   14590:	b013      	add	sp, #76	; 0x4c
   14592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   14596:	2320      	movs	r3, #32
   14598:	4445      	add	r5, r8
   1459a:	4642      	mov	r2, r8
				while (width-- > 0) {
   1459c:	2a00      	cmp	r2, #0
   1459e:	eba5 0108 	sub.w	r1, r5, r8
   145a2:	f108 38ff 	add.w	r8, r8, #4294967295
   145a6:	dcec      	bgt.n	14582 <cbvprintf+0x682>
   145a8:	460d      	mov	r5, r1
		if (sign != 0) {
   145aa:	b12e      	cbz	r6, 145b8 <cbvprintf+0x6b8>
			OUTC(sign);
   145ac:	4659      	mov	r1, fp
   145ae:	4630      	mov	r0, r6
   145b0:	47d0      	blx	sl
   145b2:	2800      	cmp	r0, #0
   145b4:	dbec      	blt.n	14590 <cbvprintf+0x690>
   145b6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   145b8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   145bc:	06d9      	lsls	r1, r3, #27
   145be:	d401      	bmi.n	145c4 <cbvprintf+0x6c4>
   145c0:	071a      	lsls	r2, r3, #28
   145c2:	d505      	bpl.n	145d0 <cbvprintf+0x6d0>
				OUTC('0');
   145c4:	4659      	mov	r1, fp
   145c6:	2030      	movs	r0, #48	; 0x30
   145c8:	47d0      	blx	sl
   145ca:	2800      	cmp	r0, #0
   145cc:	dbe0      	blt.n	14590 <cbvprintf+0x690>
   145ce:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   145d0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   145d4:	06db      	lsls	r3, r3, #27
   145d6:	d506      	bpl.n	145e6 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   145d8:	4659      	mov	r1, fp
   145da:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   145de:	47d0      	blx	sl
   145e0:	2800      	cmp	r0, #0
   145e2:	dbd5      	blt.n	14590 <cbvprintf+0x690>
   145e4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   145e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   145e8:	442e      	add	r6, r5
   145ea:	1b73      	subs	r3, r6, r5
   145ec:	2b00      	cmp	r3, #0
   145ee:	dc15      	bgt.n	1461c <cbvprintf+0x71c>
			OUTS(bps, bpe);
   145f0:	463b      	mov	r3, r7
   145f2:	464a      	mov	r2, r9
   145f4:	4659      	mov	r1, fp
   145f6:	4650      	mov	r0, sl
   145f8:	f019 fe39 	bl	2e26e <outs>
   145fc:	2800      	cmp	r0, #0
   145fe:	dbc7      	blt.n	14590 <cbvprintf+0x690>
   14600:	4405      	add	r5, r0
		while (width > 0) {
   14602:	44a8      	add	r8, r5
   14604:	eba8 0305 	sub.w	r3, r8, r5
   14608:	2b00      	cmp	r3, #0
   1460a:	f77f ae84 	ble.w	14316 <cbvprintf+0x416>
			OUTC(' ');
   1460e:	4659      	mov	r1, fp
   14610:	2020      	movs	r0, #32
   14612:	47d0      	blx	sl
   14614:	2800      	cmp	r0, #0
   14616:	dbbb      	blt.n	14590 <cbvprintf+0x690>
   14618:	3501      	adds	r5, #1
			--width;
   1461a:	e7f3      	b.n	14604 <cbvprintf+0x704>
				OUTC('0');
   1461c:	4659      	mov	r1, fp
   1461e:	2030      	movs	r0, #48	; 0x30
   14620:	47d0      	blx	sl
   14622:	2800      	cmp	r0, #0
   14624:	dbb4      	blt.n	14590 <cbvprintf+0x690>
   14626:	3501      	adds	r5, #1
   14628:	e7df      	b.n	145ea <cbvprintf+0x6ea>
   1462a:	bf00      	nop
   1462c:	00038286 	.word	0x00038286

00014630 <str_encode>:
	return append_bytes("]", 1, data);
}

static int str_encode(const char **str, json_append_bytes_t append_bytes,
		      void *data)
{
   14630:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14634:	460c      	mov	r4, r1
   14636:	4606      	mov	r6, r0
	int ret;

	ret = append_bytes("\"", 1, data);
   14638:	2101      	movs	r1, #1
   1463a:	4812      	ldr	r0, [pc, #72]	; (14684 <str_encode+0x54>)
{
   1463c:	4615      	mov	r5, r2
	ret = append_bytes("\"", 1, data);
   1463e:	47a0      	blx	r4
	if (ret < 0) {
   14640:	2800      	cmp	r0, #0
   14642:	db17      	blt.n	14674 <str_encode+0x44>
			char bytes[2] = { '\\', escaped };
   14644:	275c      	movs	r7, #92	; 0x5c
   14646:	6836      	ldr	r6, [r6, #0]
   14648:	46b0      	mov	r8, r6
	for (cur = str; ret == 0 && *cur; cur++) {
   1464a:	f816 0b01 	ldrb.w	r0, [r6], #1
   1464e:	b920      	cbnz	r0, 1465a <str_encode+0x2a>
		return ret;
	}

	ret = json_escape_internal(*str, append_bytes, data);
	if (!ret) {
		return append_bytes("\"", 1, data);
   14650:	462a      	mov	r2, r5
   14652:	2101      	movs	r1, #1
   14654:	480b      	ldr	r0, [pc, #44]	; (14684 <str_encode+0x54>)
   14656:	47a0      	blx	r4
   14658:	e00c      	b.n	14674 <str_encode+0x44>
		char escaped = escape_as(*cur);
   1465a:	f019 fe5d 	bl	2e318 <escape_as>
		if (escaped) {
   1465e:	b160      	cbz	r0, 1467a <str_encode+0x4a>
			ret = append_bytes(bytes, 2, data);
   14660:	462a      	mov	r2, r5
   14662:	2102      	movs	r1, #2
			char bytes[2] = { '\\', escaped };
   14664:	f88d 0005 	strb.w	r0, [sp, #5]
   14668:	f88d 7004 	strb.w	r7, [sp, #4]
			ret = append_bytes(bytes, 2, data);
   1466c:	a801      	add	r0, sp, #4
			ret = append_bytes(cur, 1, data);
   1466e:	47a0      	blx	r4
	for (cur = str; ret == 0 && *cur; cur++) {
   14670:	2800      	cmp	r0, #0
   14672:	d0e9      	beq.n	14648 <str_encode+0x18>
	}

	return ret;
}
   14674:	b002      	add	sp, #8
   14676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ret = append_bytes(cur, 1, data);
   1467a:	462a      	mov	r2, r5
   1467c:	2101      	movs	r1, #1
   1467e:	4640      	mov	r0, r8
   14680:	e7f5      	b.n	1466e <str_encode+0x3e>
   14682:	bf00      	nop
   14684:	0003bb02 	.word	0x0003bb02

00014688 <json_obj_encode>:
}

int json_obj_encode(const struct json_obj_descr *descr, size_t descr_len,
		    const void *val, json_append_bytes_t append_bytes,
		    void *data)
{
   14688:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1468c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   14690:	4605      	mov	r5, r0
   14692:	460f      	mov	r7, r1
   14694:	4690      	mov	r8, r2
	size_t i;
	int ret;

	ret = append_bytes("{", 1, data);
   14696:	2101      	movs	r1, #1
   14698:	465a      	mov	r2, fp
   1469a:	481b      	ldr	r0, [pc, #108]	; (14708 <json_obj_encode+0x80>)
{
   1469c:	461c      	mov	r4, r3
	ret = append_bytes("{", 1, data);
   1469e:	4798      	blx	r3
	if (ret < 0) {
   146a0:	2800      	cmp	r0, #0
   146a2:	db2e      	blt.n	14702 <json_obj_encode+0x7a>
		return ret;
	}

	for (i = 0; i < descr_len; i++) {
   146a4:	2600      	movs	r6, #0
				 append_bytes, data);
		if (ret < 0) {
			return ret;
		}

		ret = append_bytes(":", 1, data);
   146a6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 14710 <json_obj_encode+0x88>
		if (ret < 0) {
			return ret;
		}

		if (i < descr_len - 1) {
			ret = append_bytes(",", 1, data);
   146aa:	f8df a068 	ldr.w	sl, [pc, #104]	; 14714 <json_obj_encode+0x8c>
	for (i = 0; i < descr_len; i++) {
   146ae:	42b7      	cmp	r7, r6
		ret = str_encode((const char **)&descr[i].field_name,
   146b0:	465a      	mov	r2, fp
	for (i = 0; i < descr_len; i++) {
   146b2:	d106      	bne.n	146c2 <json_obj_encode+0x3a>
				return ret;
			}
		}
	}

	return append_bytes("}", 1, data);
   146b4:	2101      	movs	r1, #1
   146b6:	4623      	mov	r3, r4
   146b8:	4814      	ldr	r0, [pc, #80]	; (1470c <json_obj_encode+0x84>)
}
   146ba:	b001      	add	sp, #4
   146bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return append_bytes("}", 1, data);
   146c0:	4718      	bx	r3
		ret = str_encode((const char **)&descr[i].field_name,
   146c2:	4621      	mov	r1, r4
   146c4:	4628      	mov	r0, r5
   146c6:	f7ff ffb3 	bl	14630 <str_encode>
		if (ret < 0) {
   146ca:	2800      	cmp	r0, #0
   146cc:	db19      	blt.n	14702 <json_obj_encode+0x7a>
		ret = append_bytes(":", 1, data);
   146ce:	465a      	mov	r2, fp
   146d0:	2101      	movs	r1, #1
   146d2:	4648      	mov	r0, r9
   146d4:	47a0      	blx	r4
		if (ret < 0) {
   146d6:	2800      	cmp	r0, #0
   146d8:	db13      	blt.n	14702 <json_obj_encode+0x7a>
		ret = encode(&descr[i], val, append_bytes, data);
   146da:	465b      	mov	r3, fp
   146dc:	4622      	mov	r2, r4
   146de:	4641      	mov	r1, r8
   146e0:	4628      	mov	r0, r5
   146e2:	f000 f819 	bl	14718 <encode>
		if (ret < 0) {
   146e6:	2800      	cmp	r0, #0
   146e8:	db0b      	blt.n	14702 <json_obj_encode+0x7a>
		if (i < descr_len - 1) {
   146ea:	1e7b      	subs	r3, r7, #1
   146ec:	429e      	cmp	r6, r3
   146ee:	d302      	bcc.n	146f6 <json_obj_encode+0x6e>
	for (i = 0; i < descr_len; i++) {
   146f0:	3601      	adds	r6, #1
   146f2:	3510      	adds	r5, #16
   146f4:	e7db      	b.n	146ae <json_obj_encode+0x26>
			ret = append_bytes(",", 1, data);
   146f6:	465a      	mov	r2, fp
   146f8:	2101      	movs	r1, #1
   146fa:	4650      	mov	r0, sl
   146fc:	47a0      	blx	r4
			if (ret < 0) {
   146fe:	2800      	cmp	r0, #0
   14700:	daf6      	bge.n	146f0 <json_obj_encode+0x68>
}
   14702:	b001      	add	sp, #4
   14704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14708:	00038287 	.word	0x00038287
   1470c:	00038289 	.word	0x00038289
   14710:	0003df14 	.word	0x0003df14
   14714:	0003dece 	.word	0x0003dece

00014718 <encode>:
{
   14718:	b570      	push	{r4, r5, r6, lr}
   1471a:	4606      	mov	r6, r0
   1471c:	461d      	mov	r5, r3
	switch (descr->type) {
   1471e:	7973      	ldrb	r3, [r6, #5]
{
   14720:	4614      	mov	r4, r2
	switch (descr->type) {
   14722:	085b      	lsrs	r3, r3, #1
	void *ptr = (char *)val + descr->offset;
   14724:	88c2      	ldrh	r2, [r0, #6]
	switch (descr->type) {
   14726:	2b5b      	cmp	r3, #91	; 0x5b
{
   14728:	b086      	sub	sp, #24
	void *ptr = (char *)val + descr->offset;
   1472a:	eb01 0002 	add.w	r0, r1, r2
	switch (descr->type) {
   1472e:	d01d      	beq.n	1476c <encode+0x54>
   14730:	d806      	bhi.n	14740 <encode+0x28>
   14732:	2b22      	cmp	r3, #34	; 0x22
   14734:	d014      	beq.n	14760 <encode+0x48>
   14736:	2b30      	cmp	r3, #48	; 0x30
   14738:	d028      	beq.n	1478c <encode+0x74>
   1473a:	f06f 0015 	mvn.w	r0, #21
   1473e:	e013      	b.n	14768 <encode+0x50>
   14740:	2b74      	cmp	r3, #116	; 0x74
   14742:	d003      	beq.n	1474c <encode+0x34>
   14744:	2b7b      	cmp	r3, #123	; 0x7b
   14746:	d019      	beq.n	1477c <encode+0x64>
   14748:	2b66      	cmp	r3, #102	; 0x66
   1474a:	d1f6      	bne.n	1473a <encode+0x22>
	if (*value) {
   1474c:	5c8b      	ldrb	r3, [r1, r2]
		return append_bytes("true", 4, data);
   1474e:	462a      	mov	r2, r5
	if (*value) {
   14750:	b11b      	cbz	r3, 1475a <encode+0x42>
		return append_bytes("true", 4, data);
   14752:	2104      	movs	r1, #4
   14754:	4816      	ldr	r0, [pc, #88]	; (147b0 <encode+0x98>)
	return append_bytes(buf, (size_t)ret, data);
   14756:	47a0      	blx	r4
   14758:	e006      	b.n	14768 <encode+0x50>
	return append_bytes("false", 5, data);
   1475a:	2105      	movs	r1, #5
   1475c:	4815      	ldr	r0, [pc, #84]	; (147b4 <encode+0x9c>)
   1475e:	e7fa      	b.n	14756 <encode+0x3e>
		return str_encode(ptr, append_bytes, data);
   14760:	462a      	mov	r2, r5
   14762:	4621      	mov	r1, r4
   14764:	f7ff ff64 	bl	14630 <str_encode>
}
   14768:	b006      	add	sp, #24
   1476a:	bd70      	pop	{r4, r5, r6, pc}
		return arr_encode(descr->array.element_descr, ptr,
   1476c:	460a      	mov	r2, r1
   1476e:	4623      	mov	r3, r4
   14770:	4601      	mov	r1, r0
   14772:	9500      	str	r5, [sp, #0]
   14774:	68b0      	ldr	r0, [r6, #8]
   14776:	f000 f821 	bl	147bc <arr_encode>
   1477a:	e7f5      	b.n	14768 <encode+0x50>
		return json_obj_encode(descr->object.sub_descr,
   1477c:	4602      	mov	r2, r0
   1477e:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   14782:	4623      	mov	r3, r4
   14784:	9500      	str	r5, [sp, #0]
   14786:	f7ff ff7f 	bl	14688 <json_obj_encode>
   1478a:	e7ed      	b.n	14768 <encode+0x50>
	ret = snprintk(buf, sizeof(buf), "%d", *num);
   1478c:	588b      	ldr	r3, [r1, r2]
   1478e:	210c      	movs	r1, #12
   14790:	4a09      	ldr	r2, [pc, #36]	; (147b8 <encode+0xa0>)
   14792:	eb0d 0001 	add.w	r0, sp, r1
   14796:	f019 fb04 	bl	2dda2 <snprintk>
	if (ret < 0) {
   1479a:	2800      	cmp	r0, #0
   1479c:	dbe4      	blt.n	14768 <encode+0x50>
	if (ret >= (int)sizeof(buf)) {
   1479e:	280b      	cmp	r0, #11
   147a0:	dc03      	bgt.n	147aa <encode+0x92>
	return append_bytes(buf, (size_t)ret, data);
   147a2:	4601      	mov	r1, r0
   147a4:	462a      	mov	r2, r5
   147a6:	a803      	add	r0, sp, #12
   147a8:	e7d5      	b.n	14756 <encode+0x3e>
		return -ENOMEM;
   147aa:	f06f 000b 	mvn.w	r0, #11
		return num_encode(ptr, append_bytes, data);
   147ae:	e7db      	b.n	14768 <encode+0x50>
   147b0:	0003828b 	.word	0x0003828b
   147b4:	00038290 	.word	0x00038290
   147b8:	00037717 	.word	0x00037717

000147bc <arr_encode>:
{
   147bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147c0:	4605      	mov	r5, r0
   147c2:	461c      	mov	r4, r3
   147c4:	460e      	mov	r6, r1
   147c6:	4611      	mov	r1, r2
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   147c8:	f019 fd67 	bl	2e29a <get_elem_size>
{
   147cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   147d0:	88ea      	ldrh	r2, [r5, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   147d2:	9001      	str	r0, [sp, #4]
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   147d4:	f851 9002 	ldr.w	r9, [r1, r2]
	ret = append_bytes("[", 1, data);
   147d8:	4816      	ldr	r0, [pc, #88]	; (14834 <arr_encode+0x78>)
   147da:	4642      	mov	r2, r8
   147dc:	2101      	movs	r1, #1
   147de:	47a0      	blx	r4
	if (ret < 0) {
   147e0:	2800      	cmp	r0, #0
   147e2:	db23      	blt.n	1482c <arr_encode+0x70>
	for (i = 0; i < n_elem; i++) {
   147e4:	2700      	movs	r7, #0
			ret = append_bytes(",", 1, data);
   147e6:	f8df b054 	ldr.w	fp, [pc, #84]	; 1483c <arr_encode+0x80>
		if (i < n_elem - 1) {
   147ea:	f109 3aff 	add.w	sl, r9, #4294967295
	for (i = 0; i < n_elem; i++) {
   147ee:	454f      	cmp	r7, r9
   147f0:	d107      	bne.n	14802 <arr_encode+0x46>
	return append_bytes("]", 1, data);
   147f2:	4642      	mov	r2, r8
   147f4:	2101      	movs	r1, #1
   147f6:	4623      	mov	r3, r4
   147f8:	480f      	ldr	r0, [pc, #60]	; (14838 <arr_encode+0x7c>)
}
   147fa:	b003      	add	sp, #12
   147fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return append_bytes("]", 1, data);
   14800:	4718      	bx	r3
		ret = encode(elem_descr, (char *)field - elem_descr->offset,
   14802:	88e9      	ldrh	r1, [r5, #6]
   14804:	4643      	mov	r3, r8
   14806:	4622      	mov	r2, r4
   14808:	4628      	mov	r0, r5
   1480a:	1a71      	subs	r1, r6, r1
   1480c:	f7ff ff84 	bl	14718 <encode>
		if (ret < 0) {
   14810:	2800      	cmp	r0, #0
   14812:	db0b      	blt.n	1482c <arr_encode+0x70>
		if (i < n_elem - 1) {
   14814:	45ba      	cmp	sl, r7
   14816:	d803      	bhi.n	14820 <arr_encode+0x64>
		field = (char *)field + elem_size;
   14818:	9b01      	ldr	r3, [sp, #4]
	for (i = 0; i < n_elem; i++) {
   1481a:	3701      	adds	r7, #1
		field = (char *)field + elem_size;
   1481c:	441e      	add	r6, r3
	for (i = 0; i < n_elem; i++) {
   1481e:	e7e6      	b.n	147ee <arr_encode+0x32>
			ret = append_bytes(",", 1, data);
   14820:	4642      	mov	r2, r8
   14822:	2101      	movs	r1, #1
   14824:	4658      	mov	r0, fp
   14826:	47a0      	blx	r4
			if (ret < 0) {
   14828:	2800      	cmp	r0, #0
   1482a:	daf5      	bge.n	14818 <arr_encode+0x5c>
}
   1482c:	b003      	add	sp, #12
   1482e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14832:	bf00      	nop
   14834:	00038296 	.word	0x00038296
   14838:	00038298 	.word	0x00038298
   1483c:	0003dece 	.word	0x0003dece

00014840 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   14840:	4604      	mov	r4, r0
   14842:	b508      	push	{r3, lr}
	__asm__ volatile(
   14844:	f04f 0220 	mov.w	r2, #32
   14848:	f3ef 8311 	mrs	r3, BASEPRI
   1484c:	f382 8811 	msr	BASEPRI, r2
   14850:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   14854:	f01a fa00 	bl	2ec58 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   14858:	4620      	mov	r0, r4
   1485a:	f002 fe79 	bl	17550 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1485e:	4803      	ldr	r0, [pc, #12]	; (1486c <sys_reboot+0x2c>)
   14860:	f019 fa92 	bl	2dd88 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   14864:	f002 fbae 	bl	16fc4 <arch_cpu_idle>
   14868:	e7fc      	b.n	14864 <sys_reboot+0x24>
   1486a:	bf00      	nop
   1486c:	0003829a 	.word	0x0003829a

00014870 <nordicsemi_nrf91_init>:
   14870:	f04f 0220 	mov.w	r2, #32
   14874:	f3ef 8311 	mrs	r3, BASEPRI
   14878:	f382 8811 	msr	BASEPRI, r2
   1487c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14880:	2101      	movs	r1, #1
   14882:	4a04      	ldr	r2, [pc, #16]	; (14894 <nordicsemi_nrf91_init+0x24>)
   14884:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   14888:	f383 8811 	msr	BASEPRI, r3
   1488c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14890:	2000      	movs	r0, #0
   14892:	4770      	bx	lr
   14894:	40039000 	.word	0x40039000

00014898 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14898:	b120      	cbz	r0, 148a4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1489a:	4b03      	ldr	r3, [pc, #12]	; (148a8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1489c:	0180      	lsls	r0, r0, #6
   1489e:	f043 0301 	orr.w	r3, r3, #1
   148a2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   148a4:	4770      	bx	lr
   148a6:	bf00      	nop
   148a8:	000366d0 	.word	0x000366d0

000148ac <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   148ac:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   148ae:	2200      	movs	r2, #0
{
   148b0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   148b2:	490f      	ldr	r1, [pc, #60]	; (148f0 <enable_logger+0x44>)
   148b4:	480f      	ldr	r0, [pc, #60]	; (148f4 <enable_logger+0x48>)
   148b6:	f020 fdb9 	bl	3542c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   148ba:	2200      	movs	r2, #0
   148bc:	2300      	movs	r3, #0
   148be:	2400      	movs	r4, #0
   148c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   148c4:	230e      	movs	r3, #14
   148c6:	4d0c      	ldr	r5, [pc, #48]	; (148f8 <enable_logger+0x4c>)
   148c8:	e9cd 3403 	strd	r3, r4, [sp, #12]
   148cc:	f44f 7240 	mov.w	r2, #768	; 0x300
   148d0:	4628      	mov	r0, r5
   148d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   148d6:	4b09      	ldr	r3, [pc, #36]	; (148fc <enable_logger+0x50>)
   148d8:	4909      	ldr	r1, [pc, #36]	; (14900 <enable_logger+0x54>)
   148da:	9400      	str	r4, [sp, #0]
   148dc:	f014 fa6c 	bl	28db8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   148e0:	4908      	ldr	r1, [pc, #32]	; (14904 <enable_logger+0x58>)
   148e2:	4628      	mov	r0, r5
   148e4:	f020 fc9b 	bl	3521e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   148e8:	4620      	mov	r0, r4
   148ea:	b009      	add	sp, #36	; 0x24
   148ec:	bd30      	pop	{r4, r5, pc}
   148ee:	bf00      	nop
   148f0:	00014909 	.word	0x00014909
   148f4:	20015268 	.word	0x20015268
   148f8:	200152a0 	.word	0x200152a0
   148fc:	00014df5 	.word	0x00014df5
   14900:	20020760 	.word	0x20020760
   14904:	000382c7 	.word	0x000382c7

00014908 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   14908:	4801      	ldr	r0, [pc, #4]	; (14910 <log_process_thread_timer_expiry_fn+0x8>)
   1490a:	f015 b829 	b.w	29960 <z_impl_k_sem_give>
   1490e:	bf00      	nop
   14910:	20014fc8 	.word	0x20014fc8

00014914 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   14914:	2920      	cmp	r1, #32
{
   14916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14918:	4605      	mov	r5, r0
   1491a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   1491c:	d909      	bls.n	14932 <z_log_get_s_mask+0x1e>
   1491e:	4914      	ldr	r1, [pc, #80]	; (14970 <z_log_get_s_mask+0x5c>)
   14920:	4814      	ldr	r0, [pc, #80]	; (14974 <z_log_get_s_mask+0x60>)
   14922:	2380      	movs	r3, #128	; 0x80
   14924:	4a14      	ldr	r2, [pc, #80]	; (14978 <z_log_get_s_mask+0x64>)
   14926:	f019 fa2f 	bl	2dd88 <printk>
   1492a:	2180      	movs	r1, #128	; 0x80
   1492c:	4812      	ldr	r0, [pc, #72]	; (14978 <z_log_get_s_mask+0x64>)
   1492e:	f019 fd11 	bl	2e354 <assert_post_action>
			arm = false;
   14932:	2000      	movs	r0, #0
				mask |= BIT(arg);
   14934:	2701      	movs	r7, #1
			arm = false;
   14936:	4603      	mov	r3, r0
   14938:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   1493a:	4e10      	ldr	r6, [pc, #64]	; (1497c <z_log_get_s_mask+0x68>)
	while ((curr = *str++) && arg < nargs) {
   1493c:	f815 1b01 	ldrb.w	r1, [r5], #1
   14940:	b109      	cbz	r1, 14946 <z_log_get_s_mask+0x32>
   14942:	42a3      	cmp	r3, r4
   14944:	d300      	bcc.n	14948 <z_log_get_s_mask+0x34>
}
   14946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   14948:	2925      	cmp	r1, #37	; 0x25
   1494a:	d102      	bne.n	14952 <z_log_get_s_mask+0x3e>
			arm = !arm;
   1494c:	f082 0201 	eor.w	r2, r2, #1
   14950:	e7f4      	b.n	1493c <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   14952:	2a00      	cmp	r2, #0
   14954:	d0f2      	beq.n	1493c <z_log_get_s_mask+0x28>
   14956:	f811 c006 	ldrb.w	ip, [r1, r6]
   1495a:	f01c 0f03 	tst.w	ip, #3
   1495e:	d0ed      	beq.n	1493c <z_log_get_s_mask+0x28>
			if (curr == 's') {
   14960:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   14962:	bf04      	itt	eq
   14964:	fa07 f203 	lsleq.w	r2, r7, r3
   14968:	4310      	orreq	r0, r2
			arg++;
   1496a:	3301      	adds	r3, #1
			arm = false;
   1496c:	2200      	movs	r2, #0
   1496e:	e7e5      	b.n	1493c <z_log_get_s_mask+0x28>
   14970:	000382fc 	.word	0x000382fc
   14974:	00037f2c 	.word	0x00037f2c
   14978:	000382cf 	.word	0x000382cf
   1497c:	0003e8c1 	.word	0x0003e8c1

00014980 <log_core_init>:
	panic_mode = false;
   14980:	2200      	movs	r2, #0
{
   14982:	b510      	push	{r4, lr}
	panic_mode = false;
   14984:	4b0b      	ldr	r3, [pc, #44]	; (149b4 <log_core_init+0x34>)
	log_output_timestamp_freq_set(freq);
   14986:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
   1498a:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   1498c:	4b0a      	ldr	r3, [pc, #40]	; (149b8 <log_core_init+0x38>)
   1498e:	4a0b      	ldr	r2, [pc, #44]	; (149bc <log_core_init+0x3c>)
   14990:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   14992:	f000 fda1 	bl	154d8 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   14996:	f000 faa7 	bl	14ee8 <log_msg_pool_init>
		log_list_init(&list);
   1499a:	4809      	ldr	r0, [pc, #36]	; (149c0 <log_core_init+0x40>)
   1499c:	f019 fd02 	bl	2e3a4 <log_list_init>
}
   149a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   149a4:	230c      	movs	r3, #12
   149a6:	f44f 7284 	mov.w	r2, #264	; 0x108
   149aa:	4906      	ldr	r1, [pc, #24]	; (149c4 <log_core_init+0x44>)
   149ac:	4806      	ldr	r0, [pc, #24]	; (149c8 <log_core_init+0x48>)
   149ae:	f020 bc14 	b.w	351da <k_mem_slab_init>
   149b2:	bf00      	nop
   149b4:	2001b911 	.word	0x2001b911
   149b8:	20014714 	.word	0x20014714
   149bc:	0002e3e9 	.word	0x0002e3e9
   149c0:	20015fb8 	.word	0x20015fb8
   149c4:	20026700 	.word	0x20026700
   149c8:	20015fc0 	.word	0x20015fc0

000149cc <get_msg>:
{
   149cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   149ce:	f04f 0320 	mov.w	r3, #32
   149d2:	f3ef 8411 	mrs	r4, BASEPRI
   149d6:	f383 8811 	msr	BASEPRI, r3
   149da:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   149de:	4804      	ldr	r0, [pc, #16]	; (149f0 <get_msg+0x24>)
   149e0:	f019 fcf0 	bl	2e3c4 <log_list_head_get>
	__asm__ volatile(
   149e4:	f384 8811 	msr	BASEPRI, r4
   149e8:	f3bf 8f6f 	isb	sy
}
   149ec:	bd10      	pop	{r4, pc}
   149ee:	bf00      	nop
   149f0:	20015fb8 	.word	0x20015fb8

000149f4 <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   149f4:	4b04      	ldr	r3, [pc, #16]	; (14a08 <z_log_dropped+0x14>)
   149f6:	e8d3 2fef 	ldaex	r2, [r3]
   149fa:	3201      	adds	r2, #1
   149fc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14a00:	2900      	cmp	r1, #0
   14a02:	d1f8      	bne.n	149f6 <z_log_dropped+0x2>
}
   14a04:	4770      	bx	lr
   14a06:	bf00      	nop
   14a08:	20015fb0 	.word	0x20015fb0

00014a0c <z_log_dropped_read_and_clear>:
}
   14a0c:	2000      	movs	r0, #0
   14a0e:	4602      	mov	r2, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14a10:	4b03      	ldr	r3, [pc, #12]	; (14a20 <z_log_dropped_read_and_clear+0x14>)
   14a12:	e8d3 0fef 	ldaex	r0, [r3]
   14a16:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14a1a:	2900      	cmp	r1, #0
   14a1c:	d1f9      	bne.n	14a12 <z_log_dropped_read_and_clear+0x6>
   14a1e:	4770      	bx	lr
   14a20:	20015fb0 	.word	0x20015fb0

00014a24 <dropped_notify>:
{
   14a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   14a26:	f7ff fff1 	bl	14a0c <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
   14a2a:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   14a2c:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   14a2e:	4c0a      	ldr	r4, [pc, #40]	; (14a58 <dropped_notify+0x34>)
   14a30:	4d0a      	ldr	r5, [pc, #40]	; (14a5c <dropped_notify+0x38>)
   14a32:	1b2d      	subs	r5, r5, r4
   14a34:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   14a36:	42ae      	cmp	r6, r5
   14a38:	db00      	blt.n	14a3c <dropped_notify+0x18>
}
   14a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   14a3c:	4620      	mov	r0, r4
   14a3e:	f019 fcc7 	bl	2e3d0 <log_backend_is_active>
   14a42:	b128      	cbz	r0, 14a50 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   14a44:	6823      	ldr	r3, [r4, #0]
   14a46:	691b      	ldr	r3, [r3, #16]
   14a48:	b113      	cbz	r3, 14a50 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
   14a4a:	4639      	mov	r1, r7
   14a4c:	4620      	mov	r0, r4
   14a4e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   14a50:	3601      	adds	r6, #1
   14a52:	3410      	adds	r4, #16
   14a54:	e7ef      	b.n	14a36 <dropped_notify+0x12>
   14a56:	bf00      	nop
   14a58:	000365f8 	.word	0x000365f8
   14a5c:	00036608 	.word	0x00036608

00014a60 <log_source_name_get>:
   14a60:	4a04      	ldr	r2, [pc, #16]	; (14a74 <log_source_name_get+0x14>)
   14a62:	4b05      	ldr	r3, [pc, #20]	; (14a78 <log_source_name_get+0x18>)
   14a64:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   14a66:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   14a6a:	bf34      	ite	cc
   14a6c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   14a70:	2000      	movcs	r0, #0
}
   14a72:	4770      	bx	lr
   14a74:	000364b0 	.word	0x000364b0
   14a78:	000365f8 	.word	0x000365f8

00014a7c <log_backend_enable>:
{
   14a7c:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   14a7e:	4c10      	ldr	r4, [pc, #64]	; (14ac0 <log_backend_enable+0x44>)
{
   14a80:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   14a82:	1b04      	subs	r4, r0, r4
   14a84:	1124      	asrs	r4, r4, #4
   14a86:	3401      	adds	r4, #1
{
   14a88:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
   14a8a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   14a8c:	b948      	cbnz	r0, 14aa2 <log_backend_enable+0x26>
   14a8e:	490d      	ldr	r1, [pc, #52]	; (14ac4 <log_backend_enable+0x48>)
   14a90:	480d      	ldr	r0, [pc, #52]	; (14ac8 <log_backend_enable+0x4c>)
   14a92:	23d1      	movs	r3, #209	; 0xd1
   14a94:	4a0d      	ldr	r2, [pc, #52]	; (14acc <log_backend_enable+0x50>)
   14a96:	f019 f977 	bl	2dd88 <printk>
   14a9a:	21d1      	movs	r1, #209	; 0xd1
   14a9c:	480b      	ldr	r0, [pc, #44]	; (14acc <log_backend_enable+0x50>)
   14a9e:	f019 fc59 	bl	2e354 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   14aa2:	2201      	movs	r2, #1
	backend->cb->id = id;
   14aa4:	686b      	ldr	r3, [r5, #4]
   14aa6:	711c      	strb	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   14aa8:	4c09      	ldr	r4, [pc, #36]	; (14ad0 <log_backend_enable+0x54>)
	backend->cb->active = true;
   14aaa:	715a      	strb	r2, [r3, #5]
   14aac:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   14aae:	601e      	str	r6, [r3, #0]
   14ab0:	b912      	cbnz	r2, 14ab8 <log_backend_enable+0x3c>
   14ab2:	4808      	ldr	r0, [pc, #32]	; (14ad4 <log_backend_enable+0x58>)
   14ab4:	f014 ff54 	bl	29960 <z_impl_k_sem_give>
	backend_attached = true;
   14ab8:	2301      	movs	r3, #1
   14aba:	7023      	strb	r3, [r4, #0]
}
   14abc:	bd70      	pop	{r4, r5, r6, pc}
   14abe:	bf00      	nop
   14ac0:	000365f8 	.word	0x000365f8
   14ac4:	00038345 	.word	0x00038345
   14ac8:	00037f2c 	.word	0x00037f2c
   14acc:	00038314 	.word	0x00038314
   14ad0:	2001b910 	.word	0x2001b910
   14ad4:	20014fc8 	.word	0x20014fc8

00014ad8 <log_init>:
	return __log_backends_end - __log_backends_start;
   14ad8:	4b18      	ldr	r3, [pc, #96]	; (14b3c <log_init+0x64>)
   14ada:	4a19      	ldr	r2, [pc, #100]	; (14b40 <log_init+0x68>)
{
   14adc:	b570      	push	{r4, r5, r6, lr}
   14ade:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   14ae0:	2b9f      	cmp	r3, #159	; 0x9f
   14ae2:	ea4f 1623 	mov.w	r6, r3, asr #4
   14ae6:	d90b      	bls.n	14b00 <log_init+0x28>
   14ae8:	4916      	ldr	r1, [pc, #88]	; (14b44 <log_init+0x6c>)
   14aea:	4817      	ldr	r0, [pc, #92]	; (14b48 <log_init+0x70>)
   14aec:	f240 234d 	movw	r3, #589	; 0x24d
   14af0:	4a16      	ldr	r2, [pc, #88]	; (14b4c <log_init+0x74>)
   14af2:	f019 f949 	bl	2dd88 <printk>
   14af6:	f240 214d 	movw	r1, #589	; 0x24d
   14afa:	4814      	ldr	r0, [pc, #80]	; (14b4c <log_init+0x74>)
   14afc:	f019 fc2a 	bl	2e354 <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14b00:	4b13      	ldr	r3, [pc, #76]	; (14b50 <log_init+0x78>)
   14b02:	e8d3 5fef 	ldaex	r5, [r3]
   14b06:	1c6a      	adds	r2, r5, #1
   14b08:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14b0c:	2900      	cmp	r1, #0
   14b0e:	d1f8      	bne.n	14b02 <log_init+0x2a>
	if (atomic_inc(&initialized) != 0) {
   14b10:	b915      	cbnz	r5, 14b18 <log_init+0x40>
   14b12:	4c0b      	ldr	r4, [pc, #44]	; (14b40 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
   14b14:	42b5      	cmp	r5, r6
   14b16:	db00      	blt.n	14b1a <log_init+0x42>
}
   14b18:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   14b1a:	7b23      	ldrb	r3, [r4, #12]
   14b1c:	b153      	cbz	r3, 14b34 <log_init+0x5c>
			if (backend->api->init != NULL) {
   14b1e:	6823      	ldr	r3, [r4, #0]
   14b20:	699b      	ldr	r3, [r3, #24]
   14b22:	b10b      	cbz	r3, 14b28 <log_init+0x50>
				backend->api->init(backend);
   14b24:	4620      	mov	r0, r4
   14b26:	4798      	blx	r3
			log_backend_enable(backend,
   14b28:	6863      	ldr	r3, [r4, #4]
   14b2a:	2204      	movs	r2, #4
   14b2c:	4620      	mov	r0, r4
   14b2e:	6819      	ldr	r1, [r3, #0]
   14b30:	f7ff ffa4 	bl	14a7c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   14b34:	3501      	adds	r5, #1
   14b36:	3410      	adds	r4, #16
   14b38:	e7ec      	b.n	14b14 <log_init+0x3c>
   14b3a:	bf00      	nop
   14b3c:	00036608 	.word	0x00036608
   14b40:	000365f8 	.word	0x000365f8
   14b44:	0003835c 	.word	0x0003835c
   14b48:	00037f2c 	.word	0x00037f2c
   14b4c:	000382cf 	.word	0x000382cf
   14b50:	20015fb4 	.word	0x20015fb4

00014b54 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   14b54:	4b15      	ldr	r3, [pc, #84]	; (14bac <z_log_strdup+0x58>)
{
   14b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   14b58:	4298      	cmp	r0, r3
{
   14b5a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   14b5c:	d302      	bcc.n	14b64 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   14b5e:	4b14      	ldr	r3, [pc, #80]	; (14bb0 <z_log_strdup+0x5c>)
   14b60:	4298      	cmp	r0, r3
   14b62:	d31d      	bcc.n	14ba0 <z_log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   14b64:	2200      	movs	r2, #0
   14b66:	2300      	movs	r3, #0
   14b68:	4812      	ldr	r0, [pc, #72]	; (14bb4 <z_log_strdup+0x60>)
   14b6a:	a901      	add	r1, sp, #4
   14b6c:	f013 fff4 	bl	28b58 <k_mem_slab_alloc>
	if (err != 0) {
   14b70:	4605      	mov	r5, r0
   14b72:	b9c0      	cbnz	r0, 14ba6 <z_log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14b74:	2201      	movs	r2, #1
   14b76:	9b01      	ldr	r3, [sp, #4]
   14b78:	e8d3 1fef 	ldaex	r1, [r3]
   14b7c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   14b80:	2800      	cmp	r0, #0
   14b82:	d1f9      	bne.n	14b78 <z_log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   14b84:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   14b86:	22ff      	movs	r2, #255	; 0xff
   14b88:	1d33      	adds	r3, r6, #4
   14b8a:	4618      	mov	r0, r3
   14b8c:	4621      	mov	r1, r4
   14b8e:	f020 fe71 	bl	35874 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   14b92:	227e      	movs	r2, #126	; 0x7e
   14b94:	4603      	mov	r3, r0
   14b96:	f886 2103 	strb.w	r2, [r6, #259]	; 0x103
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   14b9a:	f886 5104 	strb.w	r5, [r6, #260]	; 0x104
	return dup->buf;
   14b9e:	461c      	mov	r4, r3
}
   14ba0:	4620      	mov	r0, r4
   14ba2:	b002      	add	sp, #8
   14ba4:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   14ba6:	4b04      	ldr	r3, [pc, #16]	; (14bb8 <z_log_strdup+0x64>)
   14ba8:	e7f9      	b.n	14b9e <z_log_strdup+0x4a>
   14baa:	bf00      	nop
   14bac:	0003618c 	.word	0x0003618c
   14bb0:	0003f0b0 	.word	0x0003f0b0
   14bb4:	20015fc0 	.word	0x20015fc0
   14bb8:	00038380 	.word	0x00038380

00014bbc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   14bbc:	b150      	cbz	r0, 14bd4 <log_is_strdup+0x18>
   14bbe:	4b06      	ldr	r3, [pc, #24]	; (14bd8 <log_is_strdup+0x1c>)
   14bc0:	4298      	cmp	r0, r3
   14bc2:	d306      	bcc.n	14bd2 <log_is_strdup+0x16>
   14bc4:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
   14bc8:	4298      	cmp	r0, r3
   14bca:	bf2c      	ite	cs
   14bcc:	2000      	movcs	r0, #0
   14bce:	2001      	movcc	r0, #1
   14bd0:	4770      	bx	lr
   14bd2:	2000      	movs	r0, #0
}
   14bd4:	4770      	bx	lr
   14bd6:	bf00      	nop
   14bd8:	20026700 	.word	0x20026700

00014bdc <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   14bdc:	4b46      	ldr	r3, [pc, #280]	; (14cf8 <z_impl_log_process+0x11c>)
{
   14bde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   14be2:	781b      	ldrb	r3, [r3, #0]
{
   14be4:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   14be6:	b903      	cbnz	r3, 14bea <z_impl_log_process+0xe>
   14be8:	b1e0      	cbz	r0, 14c24 <z_impl_log_process+0x48>
	msg = get_msg();
   14bea:	f7ff feef 	bl	149cc <get_msg>
	if (msg.msg) {
   14bee:	4605      	mov	r5, r0
   14bf0:	b158      	cbz	r0, 14c0a <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14bf2:	4b42      	ldr	r3, [pc, #264]	; (14cfc <z_impl_log_process+0x120>)
   14bf4:	e8d3 2fef 	ldaex	r2, [r3]
   14bf8:	3a01      	subs	r2, #1
   14bfa:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14bfe:	2900      	cmp	r1, #0
   14c00:	d1f8      	bne.n	14bf4 <z_impl_log_process+0x18>
	if (!bypass) {
   14c02:	b19c      	cbz	r4, 14c2c <z_impl_log_process+0x50>
			log_msg_put(msg.msg);
   14c04:	4628      	mov	r0, r5
   14c06:	f019 fcd5 	bl	2e5b4 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   14c0a:	b92c      	cbnz	r4, 14c18 <z_impl_log_process+0x3c>
	return dropped_cnt > 0;
   14c0c:	4b3c      	ldr	r3, [pc, #240]	; (14d00 <z_impl_log_process+0x124>)
	if (!bypass && z_log_dropped_pending()) {
   14c0e:	681b      	ldr	r3, [r3, #0]
   14c10:	2b00      	cmp	r3, #0
   14c12:	dd01      	ble.n	14c18 <z_impl_log_process+0x3c>
		dropped_notify();
   14c14:	f7ff ff06 	bl	14a24 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   14c18:	483a      	ldr	r0, [pc, #232]	; (14d04 <z_impl_log_process+0x128>)
   14c1a:	f019 fbd1 	bl	2e3c0 <log_list_head_peek>
   14c1e:	1e04      	subs	r4, r0, #0
   14c20:	bf18      	it	ne
   14c22:	2401      	movne	r4, #1
}
   14c24:	4620      	mov	r0, r4
   14c26:	b003      	add	sp, #12
   14c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   14c2c:	4b36      	ldr	r3, [pc, #216]	; (14d08 <z_impl_log_process+0x12c>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   14c2e:	781b      	ldrb	r3, [r3, #0]
   14c30:	b9b3      	cbnz	r3, 14c60 <z_impl_log_process+0x84>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   14c32:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   14c34:	07db      	lsls	r3, r3, #31
   14c36:	d413      	bmi.n	14c60 <z_impl_log_process+0x84>
	msg_str = log_msg_str_get(msg);
   14c38:	f019 fccb 	bl	2e5d2 <log_msg_str_get>
   14c3c:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   14c3e:	4628      	mov	r0, r5
   14c40:	f019 fc96 	bl	2e570 <log_msg_nargs_get>
   14c44:	4601      	mov	r1, r0
   14c46:	4648      	mov	r0, r9
   14c48:	f7ff fe64 	bl	14914 <z_log_get_s_mask>
   14c4c:	4607      	mov	r7, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   14c4e:	4a2f      	ldr	r2, [pc, #188]	; (14d0c <z_impl_log_process+0x130>)
   14c50:	4b2f      	ldr	r3, [pc, #188]	; (14d10 <z_impl_log_process+0x134>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   14c52:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 14d34 <z_impl_log_process+0x158>
   14c56:	1a9b      	subs	r3, r3, r2
   14c58:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
   14c5c:	9201      	str	r2, [sp, #4]
	while (mask) {
   14c5e:	b937      	cbnz	r7, 14c6e <z_impl_log_process+0x92>
   14c60:	4e2c      	ldr	r6, [pc, #176]	; (14d14 <z_impl_log_process+0x138>)
   14c62:	4f2d      	ldr	r7, [pc, #180]	; (14d18 <z_impl_log_process+0x13c>)
   14c64:	f04f 0800 	mov.w	r8, #0
   14c68:	1bbf      	subs	r7, r7, r6
   14c6a:	113f      	asrs	r7, r7, #4
   14c6c:	e041      	b.n	14cf2 <z_impl_log_process+0x116>
		idx = 31 - __builtin_clz(mask);
   14c6e:	fab7 f887 	clz	r8, r7
   14c72:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   14c76:	4641      	mov	r1, r8
   14c78:	4628      	mov	r0, r5
   14c7a:	f019 fc7c 	bl	2e576 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   14c7e:	4b27      	ldr	r3, [pc, #156]	; (14d1c <z_impl_log_process+0x140>)
		str = (const char *)log_msg_arg_get(msg, idx);
   14c80:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   14c82:	4298      	cmp	r0, r3
   14c84:	d302      	bcc.n	14c8c <z_impl_log_process+0xb0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   14c86:	4b26      	ldr	r3, [pc, #152]	; (14d20 <z_impl_log_process+0x144>)
   14c88:	4298      	cmp	r0, r3
   14c8a:	d320      	bcc.n	14cce <z_impl_log_process+0xf2>
   14c8c:	4610      	mov	r0, r2
   14c8e:	f7ff ff95 	bl	14bbc <log_is_strdup>
   14c92:	4606      	mov	r6, r0
   14c94:	b9d8      	cbnz	r0, 14cce <z_impl_log_process+0xf2>
   14c96:	4b23      	ldr	r3, [pc, #140]	; (14d24 <z_impl_log_process+0x148>)
   14c98:	429a      	cmp	r2, r3
   14c9a:	d018      	beq.n	14cce <z_impl_log_process+0xf2>
	return msg->hdr.ids.source_id;
   14c9c:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   14c9e:	4922      	ldr	r1, [pc, #136]	; (14d28 <z_impl_log_process+0x14c>)
   14ca0:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   14ca4:	455b      	cmp	r3, fp
	return __log_const_start[source_id].name;
   14ca6:	bf38      	it	cc
   14ca8:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   14caa:	4820      	ldr	r0, [pc, #128]	; (14d2c <z_impl_log_process+0x150>)
   14cac:	bf38      	it	cc
   14cae:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
   14cb2:	23d0      	movs	r3, #208	; 0xd0
   14cb4:	4652      	mov	r2, sl
   14cb6:	f019 f867 	bl	2dd88 <printk>
   14cba:	4641      	mov	r1, r8
   14cbc:	481c      	ldr	r0, [pc, #112]	; (14d30 <z_impl_log_process+0x154>)
   14cbe:	464b      	mov	r3, r9
   14cc0:	4632      	mov	r2, r6
   14cc2:	f019 f861 	bl	2dd88 <printk>
   14cc6:	21d0      	movs	r1, #208	; 0xd0
   14cc8:	4650      	mov	r0, sl
   14cca:	f019 fb43 	bl	2e354 <assert_post_action>
		mask &= ~BIT(idx);
   14cce:	2301      	movs	r3, #1
   14cd0:	fa03 f808 	lsl.w	r8, r3, r8
   14cd4:	ea27 0708 	bic.w	r7, r7, r8
   14cd8:	e7c1      	b.n	14c5e <z_impl_log_process+0x82>
			if (log_backend_is_active(backend) &&
   14cda:	4630      	mov	r0, r6
   14cdc:	f019 fb78 	bl	2e3d0 <log_backend_is_active>
   14ce0:	b120      	cbz	r0, 14cec <z_impl_log_process+0x110>
	backend->api->put(backend, msg);
   14ce2:	6833      	ldr	r3, [r6, #0]
   14ce4:	4629      	mov	r1, r5
   14ce6:	4630      	mov	r0, r6
   14ce8:	685b      	ldr	r3, [r3, #4]
   14cea:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   14cec:	f108 0801 	add.w	r8, r8, #1
   14cf0:	3610      	adds	r6, #16
   14cf2:	45b8      	cmp	r8, r7
   14cf4:	dbf1      	blt.n	14cda <z_impl_log_process+0xfe>
   14cf6:	e785      	b.n	14c04 <z_impl_log_process+0x28>
   14cf8:	2001b910 	.word	0x2001b910
   14cfc:	20015fac 	.word	0x20015fac
   14d00:	20015fb0 	.word	0x20015fb0
   14d04:	20015fb8 	.word	0x20015fb8
   14d08:	2001b911 	.word	0x2001b911
   14d0c:	000364b0 	.word	0x000364b0
   14d10:	000365f8 	.word	0x000365f8
   14d14:	000365f8 	.word	0x000365f8
   14d18:	00036608 	.word	0x00036608
   14d1c:	0003618c 	.word	0x0003618c
   14d20:	0003f0b0 	.word	0x0003f0b0
   14d24:	00038380 	.word	0x00038380
   14d28:	0003e845 	.word	0x0003e845
   14d2c:	00037f2c 	.word	0x00037f2c
   14d30:	0003839a 	.word	0x0003839a
   14d34:	000382cf 	.word	0x000382cf

00014d38 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   14d38:	4b27      	ldr	r3, [pc, #156]	; (14dd8 <msg_finalize+0xa0>)
{
   14d3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   14d3c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   14d3e:	8141      	strh	r1, [r0, #10]
{
   14d40:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   14d42:	4798      	blx	r3
   14d44:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   14d46:	f04f 0320 	mov.w	r3, #32
   14d4a:	f3ef 8511 	mrs	r5, BASEPRI
   14d4e:	f383 8811 	msr	BASEPRI, r3
   14d52:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   14d56:	4821      	ldr	r0, [pc, #132]	; (14ddc <msg_finalize+0xa4>)
   14d58:	4621      	mov	r1, r4
   14d5a:	f019 fb27 	bl	2e3ac <log_list_add_tail>
	__asm__ volatile(
   14d5e:	f385 8811 	msr	BASEPRI, r5
   14d62:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14d66:	4b1e      	ldr	r3, [pc, #120]	; (14de0 <msg_finalize+0xa8>)
   14d68:	e8d3 2fef 	ldaex	r2, [r3]
   14d6c:	3201      	adds	r2, #1
   14d6e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14d72:	2900      	cmp	r1, #0
   14d74:	d1f8      	bne.n	14d68 <msg_finalize+0x30>
	if (panic_mode) {
   14d76:	4a1b      	ldr	r2, [pc, #108]	; (14de4 <msg_finalize+0xac>)
   14d78:	7812      	ldrb	r2, [r2, #0]
   14d7a:	b182      	cbz	r2, 14d9e <msg_finalize+0x66>
	__asm__ volatile(
   14d7c:	f04f 0320 	mov.w	r3, #32
   14d80:	f3ef 8411 	mrs	r4, BASEPRI
   14d84:	f383 8811 	msr	BASEPRI, r3
   14d88:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   14d8c:	2000      	movs	r0, #0
   14d8e:	f7ff ff25 	bl	14bdc <z_impl_log_process>
	__asm__ volatile(
   14d92:	f384 8811 	msr	BASEPRI, r4
   14d96:	f3bf 8f6f 	isb	sy
}
   14d9a:	b003      	add	sp, #12
   14d9c:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   14d9e:	4a12      	ldr	r2, [pc, #72]	; (14de8 <msg_finalize+0xb0>)
   14da0:	681b      	ldr	r3, [r3, #0]
   14da2:	6812      	ldr	r2, [r2, #0]
   14da4:	2a00      	cmp	r2, #0
   14da6:	d0f8      	beq.n	14d9a <msg_finalize+0x62>
   14da8:	2b01      	cmp	r3, #1
   14daa:	d10a      	bne.n	14dc2 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   14dac:	2200      	movs	r2, #0
   14dae:	2300      	movs	r3, #0
   14db0:	480e      	ldr	r0, [pc, #56]	; (14dec <msg_finalize+0xb4>)
   14db2:	e9cd 2300 	strd	r2, r3, [sp]
   14db6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14dba:	2300      	movs	r3, #0
   14dbc:	f017 f962 	bl	2c084 <z_impl_k_timer_start>
   14dc0:	e7eb      	b.n	14d9a <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   14dc2:	2b0a      	cmp	r3, #10
   14dc4:	d1e9      	bne.n	14d9a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   14dc6:	4809      	ldr	r0, [pc, #36]	; (14dec <msg_finalize+0xb4>)
   14dc8:	f020 fb3c 	bl	35444 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   14dcc:	4808      	ldr	r0, [pc, #32]	; (14df0 <msg_finalize+0xb8>)
}
   14dce:	b003      	add	sp, #12
   14dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14dd4:	f014 bdc4 	b.w	29960 <z_impl_k_sem_give>
   14dd8:	20014714 	.word	0x20014714
   14ddc:	20015fb8 	.word	0x20015fb8
   14de0:	20015fac 	.word	0x20015fac
   14de4:	2001b911 	.word	0x2001b911
   14de8:	20015fe0 	.word	0x20015fe0
   14dec:	20015268 	.word	0x20015268
   14df0:	20014fc8 	.word	0x20014fc8

00014df4 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   14df4:	4b16      	ldr	r3, [pc, #88]	; (14e50 <log_process_thread_func+0x5c>)
   14df6:	4a17      	ldr	r2, [pc, #92]	; (14e54 <log_process_thread_func+0x60>)
{
   14df8:	b510      	push	{r4, lr}
   14dfa:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   14dfc:	2b00      	cmp	r3, #0
   14dfe:	dc0b      	bgt.n	14e18 <log_process_thread_func+0x24>
   14e00:	4915      	ldr	r1, [pc, #84]	; (14e58 <log_process_thread_func+0x64>)
   14e02:	4816      	ldr	r0, [pc, #88]	; (14e5c <log_process_thread_func+0x68>)
   14e04:	f240 536d 	movw	r3, #1389	; 0x56d
   14e08:	4a15      	ldr	r2, [pc, #84]	; (14e60 <log_process_thread_func+0x6c>)
   14e0a:	f018 ffbd 	bl	2dd88 <printk>
   14e0e:	f240 516d 	movw	r1, #1389	; 0x56d
   14e12:	4813      	ldr	r0, [pc, #76]	; (14e60 <log_process_thread_func+0x6c>)
   14e14:	f019 fa9e 	bl	2e354 <assert_post_action>
	log_init();
   14e18:	f7ff fe5e 	bl	14ad8 <log_init>
	return z_impl_k_current_get();
   14e1c:	f016 fc98 	bl	2b750 <z_impl_k_current_get>
	proc_tid = process_tid;
   14e20:	4b10      	ldr	r3, [pc, #64]	; (14e64 <log_process_thread_func+0x70>)
   14e22:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   14e24:	b130      	cbz	r0, 14e34 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   14e26:	4b10      	ldr	r3, [pc, #64]	; (14e68 <log_process_thread_func+0x74>)
	    process_tid &&
   14e28:	681b      	ldr	r3, [r3, #0]
   14e2a:	2b09      	cmp	r3, #9
   14e2c:	dd02      	ble.n	14e34 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   14e2e:	480f      	ldr	r0, [pc, #60]	; (14e6c <log_process_thread_func+0x78>)
   14e30:	f014 fd96 	bl	29960 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   14e34:	4c0d      	ldr	r4, [pc, #52]	; (14e6c <log_process_thread_func+0x78>)
   14e36:	2000      	movs	r0, #0
   14e38:	f7ff fed0 	bl	14bdc <z_impl_log_process>
		if (log_process(false) == false) {
   14e3c:	2800      	cmp	r0, #0
   14e3e:	d1fa      	bne.n	14e36 <log_process_thread_func+0x42>
   14e40:	f04f 32ff 	mov.w	r2, #4294967295
   14e44:	f04f 33ff 	mov.w	r3, #4294967295
   14e48:	4620      	mov	r0, r4
   14e4a:	f014 fdcd 	bl	299e8 <z_impl_k_sem_take>
   14e4e:	e7f2      	b.n	14e36 <log_process_thread_func+0x42>
   14e50:	00036608 	.word	0x00036608
   14e54:	000365f8 	.word	0x000365f8
   14e58:	000383db 	.word	0x000383db
   14e5c:	00037f2c 	.word	0x00037f2c
   14e60:	000382cf 	.word	0x000382cf
   14e64:	20015fe0 	.word	0x20015fe0
   14e68:	20015fac 	.word	0x20015fac
   14e6c:	20014fc8 	.word	0x20014fc8

00014e70 <z_impl_log_panic>:
{
   14e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   14e72:	4f0f      	ldr	r7, [pc, #60]	; (14eb0 <z_impl_log_panic+0x40>)
   14e74:	783d      	ldrb	r5, [r7, #0]
   14e76:	b975      	cbnz	r5, 14e96 <z_impl_log_panic+0x26>
	log_init();
   14e78:	f7ff fe2e 	bl	14ad8 <log_init>
   14e7c:	4c0d      	ldr	r4, [pc, #52]	; (14eb4 <z_impl_log_panic+0x44>)
   14e7e:	4e0e      	ldr	r6, [pc, #56]	; (14eb8 <z_impl_log_panic+0x48>)
   14e80:	1b36      	subs	r6, r6, r4
   14e82:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   14e84:	42b5      	cmp	r5, r6
   14e86:	db07      	blt.n	14e98 <z_impl_log_panic+0x28>
   14e88:	2000      	movs	r0, #0
   14e8a:	f7ff fea7 	bl	14bdc <z_impl_log_process>
		while (log_process(false) == true) {
   14e8e:	2800      	cmp	r0, #0
   14e90:	d1fa      	bne.n	14e88 <z_impl_log_panic+0x18>
	panic_mode = true;
   14e92:	2301      	movs	r3, #1
   14e94:	703b      	strb	r3, [r7, #0]
}
   14e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   14e98:	4620      	mov	r0, r4
   14e9a:	f019 fa99 	bl	2e3d0 <log_backend_is_active>
   14e9e:	b118      	cbz	r0, 14ea8 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   14ea0:	6823      	ldr	r3, [r4, #0]
   14ea2:	4620      	mov	r0, r4
   14ea4:	695b      	ldr	r3, [r3, #20]
   14ea6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   14ea8:	3501      	adds	r5, #1
   14eaa:	3410      	adds	r4, #16
   14eac:	e7ea      	b.n	14e84 <z_impl_log_panic+0x14>
   14eae:	bf00      	nop
   14eb0:	2001b911 	.word	0x2001b911
   14eb4:	000365f8 	.word	0x000365f8
   14eb8:	00036608 	.word	0x00036608

00014ebc <log_free>:
{
   14ebc:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   14ebe:	3804      	subs	r0, #4
   14ec0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14ec2:	e8d0 3fef 	ldaex	r3, [r0]
   14ec6:	1e5a      	subs	r2, r3, #1
   14ec8:	e8c0 2fe1 	stlex	r1, r2, [r0]
   14ecc:	2900      	cmp	r1, #0
   14ece:	d1f8      	bne.n	14ec2 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   14ed0:	2b01      	cmp	r3, #1
   14ed2:	d103      	bne.n	14edc <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   14ed4:	4803      	ldr	r0, [pc, #12]	; (14ee4 <log_free+0x28>)
   14ed6:	a901      	add	r1, sp, #4
   14ed8:	f013 feaa 	bl	28c30 <k_mem_slab_free>
}
   14edc:	b003      	add	sp, #12
   14ede:	f85d fb04 	ldr.w	pc, [sp], #4
   14ee2:	bf00      	nop
   14ee4:	20015fc0 	.word	0x20015fc0

00014ee8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   14ee8:	2320      	movs	r3, #32
   14eea:	4902      	ldr	r1, [pc, #8]	; (14ef4 <log_msg_pool_init+0xc>)
   14eec:	461a      	mov	r2, r3
   14eee:	4802      	ldr	r0, [pc, #8]	; (14ef8 <log_msg_pool_init+0x10>)
   14ef0:	f020 b973 	b.w	351da <k_mem_slab_init>
   14ef4:	20027360 	.word	0x20027360
   14ef8:	20015fe4 	.word	0x20015fe4

00014efc <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   14efc:	2300      	movs	r3, #0
{
   14efe:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   14f00:	4d09      	ldr	r5, [pc, #36]	; (14f28 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   14f02:	9301      	str	r3, [sp, #4]
   14f04:	2001      	movs	r0, #1
   14f06:	f7ff fe69 	bl	14bdc <z_impl_log_process>
   14f0a:	4604      	mov	r4, r0
			z_log_dropped();
   14f0c:	f7ff fd72 	bl	149f4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   14f10:	2200      	movs	r2, #0
   14f12:	2300      	movs	r3, #0
   14f14:	4628      	mov	r0, r5
   14f16:	a901      	add	r1, sp, #4
   14f18:	f013 fe1e 	bl	28b58 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   14f1c:	b108      	cbz	r0, 14f22 <log_msg_no_space_handle+0x26>
   14f1e:	2c00      	cmp	r4, #0
   14f20:	d1f0      	bne.n	14f04 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   14f22:	9801      	ldr	r0, [sp, #4]
   14f24:	b003      	add	sp, #12
   14f26:	bd30      	pop	{r4, r5, pc}
   14f28:	20015fe4 	.word	0x20015fe4

00014f2c <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   14f2c:	2300      	movs	r3, #0
{
   14f2e:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   14f30:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   14f32:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   14f34:	4806      	ldr	r0, [pc, #24]	; (14f50 <log_msg_chunk_alloc+0x24>)
   14f36:	2300      	movs	r3, #0
   14f38:	a901      	add	r1, sp, #4
   14f3a:	f013 fe0d 	bl	28b58 <k_mem_slab_alloc>
	if (err != 0) {
   14f3e:	b110      	cbz	r0, 14f46 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   14f40:	f7ff ffdc 	bl	14efc <log_msg_no_space_handle>
   14f44:	9001      	str	r0, [sp, #4]
}
   14f46:	9801      	ldr	r0, [sp, #4]
   14f48:	b003      	add	sp, #12
   14f4a:	f85d fb04 	ldr.w	pc, [sp], #4
   14f4e:	bf00      	nop
   14f50:	20015fe4 	.word	0x20015fe4

00014f54 <msg_free>:
{
   14f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   14f56:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   14f58:	7a45      	ldrb	r5, [r0, #9]
{
   14f5a:	b085      	sub	sp, #20
   14f5c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   14f5e:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   14f60:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   14f64:	d41c      	bmi.n	14fa0 <msg_free+0x4c>
   14f66:	b1dd      	cbz	r5, 14fa0 <msg_free+0x4c>
		uint32_t smask = 0U;
   14f68:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   14f6a:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   14f6c:	4631      	mov	r1, r6
   14f6e:	9801      	ldr	r0, [sp, #4]
   14f70:	f019 fb01 	bl	2e576 <log_msg_arg_get>
   14f74:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   14f76:	f7ff fe21 	bl	14bbc <log_is_strdup>
   14f7a:	b170      	cbz	r0, 14f9a <msg_free+0x46>
				if (smask == 0U) {
   14f7c:	b934      	cbnz	r4, 14f8c <msg_free+0x38>
					smask = z_log_get_s_mask(
   14f7e:	9b01      	ldr	r3, [sp, #4]
   14f80:	4629      	mov	r1, r5
   14f82:	6918      	ldr	r0, [r3, #16]
   14f84:	f7ff fcc6 	bl	14914 <z_log_get_s_mask>
					if (smask == 0U) {
   14f88:	4604      	mov	r4, r0
   14f8a:	b148      	cbz	r0, 14fa0 <msg_free+0x4c>
				if (smask & BIT(i)) {
   14f8c:	fa24 f306 	lsr.w	r3, r4, r6
   14f90:	07d9      	lsls	r1, r3, #31
   14f92:	d502      	bpl.n	14f9a <msg_free+0x46>
					log_free(buf);
   14f94:	4638      	mov	r0, r7
   14f96:	f7ff ff91 	bl	14ebc <log_free>
		for (i = 0U; i < nargs; i++) {
   14f9a:	3601      	adds	r6, #1
   14f9c:	42ae      	cmp	r6, r5
   14f9e:	d3e5      	bcc.n	14f6c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   14fa0:	9b01      	ldr	r3, [sp, #4]
   14fa2:	7a1a      	ldrb	r2, [r3, #8]
   14fa4:	0792      	lsls	r2, r2, #30
   14fa6:	d504      	bpl.n	14fb2 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   14fa8:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   14faa:	4c08      	ldr	r4, [pc, #32]	; (14fcc <msg_free+0x78>)
   14fac:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   14fae:	9b03      	ldr	r3, [sp, #12]
   14fb0:	b92b      	cbnz	r3, 14fbe <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   14fb2:	4806      	ldr	r0, [pc, #24]	; (14fcc <msg_free+0x78>)
   14fb4:	a901      	add	r1, sp, #4
   14fb6:	f013 fe3b 	bl	28c30 <k_mem_slab_free>
}
   14fba:	b005      	add	sp, #20
   14fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   14fbe:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   14fc0:	4620      	mov	r0, r4
   14fc2:	a903      	add	r1, sp, #12
   14fc4:	f013 fe34 	bl	28c30 <k_mem_slab_free>
		cont = next;
   14fc8:	9503      	str	r5, [sp, #12]
   14fca:	e7f0      	b.n	14fae <msg_free+0x5a>
   14fcc:	20015fe4 	.word	0x20015fe4

00014fd0 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   14fd0:	2a0e      	cmp	r2, #14
{
   14fd2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fd6:	4681      	mov	r9, r0
   14fd8:	4688      	mov	r8, r1
   14fda:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   14fdc:	d90b      	bls.n	14ff6 <log_msg_create_n+0x26>
   14fde:	492d      	ldr	r1, [pc, #180]	; (15094 <log_msg_create_n+0xc4>)
   14fe0:	482d      	ldr	r0, [pc, #180]	; (15098 <log_msg_create_n+0xc8>)
   14fe2:	f240 1337 	movw	r3, #311	; 0x137
   14fe6:	4a2d      	ldr	r2, [pc, #180]	; (1509c <log_msg_create_n+0xcc>)
   14fe8:	f018 fece 	bl	2dd88 <printk>
   14fec:	f240 1137 	movw	r1, #311	; 0x137
   14ff0:	482a      	ldr	r0, [pc, #168]	; (1509c <log_msg_create_n+0xcc>)
   14ff2:	f019 f9af 	bl	2e354 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   14ff6:	f7ff ff99 	bl	14f2c <log_msg_chunk_alloc>

	if (msg != NULL) {
   14ffa:	4604      	mov	r4, r0
   14ffc:	b330      	cbz	r0, 1504c <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   14ffe:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   15000:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   15002:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   15004:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   15006:	8107      	strh	r7, [r0, #8]
   15008:	d909      	bls.n	1501e <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   1500a:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1500c:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   15010:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   15012:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   15016:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   15018:	f1ba 0f00 	cmp.w	sl, #0
   1501c:	dc0e      	bgt.n	1503c <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1501e:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   15020:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   15022:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   15026:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1502a:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1502c:	d818      	bhi.n	15060 <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1502e:	4641      	mov	r1, r8
   15030:	00aa      	lsls	r2, r5, #2
   15032:	f104 0014 	add.w	r0, r4, #20
   15036:	f020 faa6 	bl	35586 <memcpy>
	while (nargs != 0U) {
   1503a:	e007      	b.n	1504c <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1503c:	f7ff ff76 	bl	14f2c <log_msg_chunk_alloc>
		if (cont == NULL) {
   15040:	4606      	mov	r6, r0
   15042:	b930      	cbnz	r0, 15052 <log_msg_create_n+0x82>
			msg_free(msg);
   15044:	4620      	mov	r0, r4
   15046:	f7ff ff85 	bl	14f54 <msg_free>
			return NULL;
   1504a:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   1504c:	4620      	mov	r0, r4
   1504e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   15052:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   15056:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   1505a:	4683      	mov	fp, r0
		cont->next = NULL;
   1505c:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   1505e:	e7db      	b.n	15018 <log_msg_create_n+0x48>
   15060:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   15064:	6967      	ldr	r7, [r4, #20]
   15066:	61a3      	str	r3, [r4, #24]
   15068:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1506c:	3d02      	subs	r5, #2
   1506e:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   15070:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   15074:	2d07      	cmp	r5, #7
   15076:	462e      	mov	r6, r5
   15078:	bf28      	it	cs
   1507a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1507c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   15080:	4641      	mov	r1, r8
   15082:	1d38      	adds	r0, r7, #4
   15084:	464a      	mov	r2, r9
   15086:	f020 fa7e 	bl	35586 <memcpy>
	while (nargs != 0U) {
   1508a:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1508c:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1508e:	44c8      	add	r8, r9
	while (nargs != 0U) {
   15090:	d1f0      	bne.n	15074 <log_msg_create_n+0xa4>
   15092:	e7db      	b.n	1504c <log_msg_create_n+0x7c>
   15094:	00038427 	.word	0x00038427
   15098:	00037f2c 	.word	0x00037f2c
   1509c:	000383fb 	.word	0x000383fb

000150a0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   150a0:	b40e      	push	{r1, r2, r3}
   150a2:	b503      	push	{r0, r1, lr}
   150a4:	ab03      	add	r3, sp, #12
   150a6:	f853 2b04 	ldr.w	r2, [r3], #4
   150aa:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   150ac:	4804      	ldr	r0, [pc, #16]	; (150c0 <print_formatted+0x20>)
	va_start(args, fmt);
   150ae:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   150b0:	f7fe ff26 	bl	13f00 <cbvprintf>
	va_end(args);

	return length;
}
   150b4:	b002      	add	sp, #8
   150b6:	f85d eb04 	ldr.w	lr, [sp], #4
   150ba:	b003      	add	sp, #12
   150bc:	4770      	bx	lr
   150be:	bf00      	nop
   150c0:	00015305 	.word	0x00015305

000150c4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   150c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   150c8:	f011 0602 	ands.w	r6, r1, #2
{
   150cc:	b087      	sub	sp, #28
   150ce:	9205      	str	r2, [sp, #20]
   150d0:	4607      	mov	r7, r0
   150d2:	461a      	mov	r2, r3
   150d4:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   150d8:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   150dc:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   150e0:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   150e4:	d006      	beq.n	150f4 <prefix_print+0x30>
	if (!format) {
   150e6:	f011 0f44 	tst.w	r1, #68	; 0x44
   150ea:	d138      	bne.n	1515e <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   150ec:	4932      	ldr	r1, [pc, #200]	; (151b8 <prefix_print+0xf4>)
   150ee:	f7ff ffd7 	bl	150a0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   150f2:	4606      	mov	r6, r0
	if (color) {
   150f4:	f1ba 0f00 	cmp.w	sl, #0
   150f8:	d00a      	beq.n	15110 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   150fa:	4b30      	ldr	r3, [pc, #192]	; (151bc <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
   150fc:	4638      	mov	r0, r7
		const char *log_color = start && (colors[level] != NULL) ?
   150fe:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   15102:	4b2f      	ldr	r3, [pc, #188]	; (151c0 <prefix_print+0xfc>)
   15104:	492f      	ldr	r1, [pc, #188]	; (151c4 <prefix_print+0x100>)
   15106:	2a00      	cmp	r2, #0
   15108:	bf08      	it	eq
   1510a:	461a      	moveq	r2, r3
   1510c:	f7ff ffc8 	bl	150a0 <print_formatted>
	if (level_on) {
   15110:	b13d      	cbz	r5, 15122 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   15112:	4b2d      	ldr	r3, [pc, #180]	; (151c8 <prefix_print+0x104>)
   15114:	4638      	mov	r0, r7
   15116:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   1511a:	492c      	ldr	r1, [pc, #176]	; (151cc <prefix_print+0x108>)
   1511c:	f7ff ffc0 	bl	150a0 <print_formatted>
   15120:	4605      	mov	r5, r0
	if (source_id >= 0) {
   15122:	f1b9 0f00 	cmp.w	r9, #0
   15126:	db16      	blt.n	15156 <prefix_print+0x92>
		total += print_formatted(output,
   15128:	9b05      	ldr	r3, [sp, #20]
   1512a:	2b00      	cmp	r3, #0
   1512c:	d041      	beq.n	151b2 <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1512e:	2301      	movs	r3, #1
   15130:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   15134:	4b26      	ldr	r3, [pc, #152]	; (151d0 <prefix_print+0x10c>)
   15136:	f018 0f10 	tst.w	r8, #16
   1513a:	4c26      	ldr	r4, [pc, #152]	; (151d4 <prefix_print+0x110>)
   1513c:	bf18      	it	ne
   1513e:	461c      	movne	r4, r3
   15140:	4649      	mov	r1, r9
   15142:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   15146:	f7ff fc8b 	bl	14a60 <log_source_name_get>
   1514a:	4621      	mov	r1, r4
   1514c:	4602      	mov	r2, r0
   1514e:	4638      	mov	r0, r7
   15150:	f7ff ffa6 	bl	150a0 <print_formatted>
   15154:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   15156:	19a8      	adds	r0, r5, r6
   15158:	b007      	add	sp, #28
   1515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1515e:	4b1e      	ldr	r3, [pc, #120]	; (151d8 <prefix_print+0x114>)
   15160:	6819      	ldr	r1, [r3, #0]
   15162:	b321      	cbz	r1, 151ae <prefix_print+0xea>
		timestamp /= timestamp_div;
   15164:	4b1d      	ldr	r3, [pc, #116]	; (151dc <prefix_print+0x118>)
   15166:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1516a:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
   1516c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		timestamp /= timestamp_div;
   15170:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
   15174:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   15178:	fbb4 f2fc 	udiv	r2, r4, ip
   1517c:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
   15180:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   15184:	4374      	muls	r4, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   15186:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1518a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1518e:	fb01 441b 	mls	r4, r1, fp, r4
   15192:	4374      	muls	r4, r6
		mins = seconds / 60U;
   15194:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   15198:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   1519c:	e9cd b101 	strd	fp, r1, [sp, #4]
   151a0:	fb0e c113 	mls	r1, lr, r3, ip
   151a4:	9100      	str	r1, [sp, #0]
   151a6:	490e      	ldr	r1, [pc, #56]	; (151e0 <prefix_print+0x11c>)
   151a8:	f7ff ff7a 	bl	150a0 <print_formatted>
   151ac:	e7a1      	b.n	150f2 <prefix_print+0x2e>
		length = 0;
   151ae:	4608      	mov	r0, r1
   151b0:	e79f      	b.n	150f2 <prefix_print+0x2e>
		total += print_formatted(output,
   151b2:	4c08      	ldr	r4, [pc, #32]	; (151d4 <prefix_print+0x110>)
   151b4:	e7c4      	b.n	15140 <prefix_print+0x7c>
   151b6:	bf00      	nop
   151b8:	00038440 	.word	0x00038440
   151bc:	000367c8 	.word	0x000367c8
   151c0:	00038432 	.word	0x00038432
   151c4:	0003b8db 	.word	0x0003b8db
   151c8:	000367dc 	.word	0x000367dc
   151cc:	00038465 	.word	0x00038465
   151d0:	0003843c 	.word	0x0003843c
   151d4:	00038437 	.word	0x00038437
   151d8:	20016004 	.word	0x20016004
   151dc:	20016008 	.word	0x20016008
   151e0:	00038449 	.word	0x00038449

000151e4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   151e4:	b538      	push	{r3, r4, r5, lr}
   151e6:	460c      	mov	r4, r1
	if (color) {
   151e8:	07e1      	lsls	r1, r4, #31
{
   151ea:	4605      	mov	r5, r0
	if (color) {
   151ec:	d503      	bpl.n	151f6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   151ee:	4a08      	ldr	r2, [pc, #32]	; (15210 <postfix_print+0x2c>)
   151f0:	4908      	ldr	r1, [pc, #32]	; (15214 <postfix_print+0x30>)
   151f2:	f7ff ff55 	bl	150a0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   151f6:	06e2      	lsls	r2, r4, #27
   151f8:	d408      	bmi.n	1520c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   151fa:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   151fc:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   151fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   15202:	bf4c      	ite	mi
   15204:	4904      	ldrmi	r1, [pc, #16]	; (15218 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   15206:	4905      	ldrpl	r1, [pc, #20]	; (1521c <postfix_print+0x38>)
   15208:	f7ff bf4a 	b.w	150a0 <print_formatted>
}
   1520c:	bd38      	pop	{r3, r4, r5, pc}
   1520e:	bf00      	nop
   15210:	00038432 	.word	0x00038432
   15214:	0003b8db 	.word	0x0003b8db
   15218:	000385b9 	.word	0x000385b9
   1521c:	0003d047 	.word	0x0003d047

00015220 <hexdump_line_print>:
{
   15220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15224:	461d      	mov	r5, r3
   15226:	9b08      	ldr	r3, [sp, #32]
   15228:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1522a:	06da      	lsls	r2, r3, #27
{
   1522c:	4604      	mov	r4, r0
   1522e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   15230:	d405      	bmi.n	1523e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   15232:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   15234:	bf4c      	ite	mi
   15236:	492b      	ldrmi	r1, [pc, #172]	; (152e4 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   15238:	492b      	ldrpl	r1, [pc, #172]	; (152e8 <hexdump_line_print+0xc8>)
   1523a:	f7ff ff31 	bl	150a0 <print_formatted>
{
   1523e:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   15242:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 152f0 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   15246:	45a8      	cmp	r8, r5
   15248:	db2d      	blt.n	152a6 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1524a:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   1524c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 152f4 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   15250:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 152f8 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   15254:	f8df a098 	ldr.w	sl, [pc, #152]	; 152f0 <hexdump_line_print+0xd0>
		if (i < length) {
   15258:	42bd      	cmp	r5, r7
   1525a:	d232      	bcs.n	152c2 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   1525c:	4649      	mov	r1, r9
   1525e:	4620      	mov	r0, r4
   15260:	5d72      	ldrb	r2, [r6, r5]
   15262:	f7ff ff1d 	bl	150a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   15266:	3501      	adds	r5, #1
   15268:	2d10      	cmp	r5, #16
   1526a:	d123      	bne.n	152b4 <hexdump_line_print+0x94>
	print_formatted(output, "|");
   1526c:	4620      	mov	r0, r4
   1526e:	491f      	ldr	r1, [pc, #124]	; (152ec <hexdump_line_print+0xcc>)
   15270:	f7ff ff16 	bl	150a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   15274:	2500      	movs	r5, #0
			print_formatted(output, " ");
   15276:	f8df 8078 	ldr.w	r8, [pc, #120]	; 152f0 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   1527a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 152fc <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   1527e:	f8df a080 	ldr.w	sl, [pc, #128]	; 15300 <hexdump_line_print+0xe0>
		if (i < length) {
   15282:	42af      	cmp	r7, r5
   15284:	d929      	bls.n	152da <hexdump_line_print+0xba>
			char c = (char)data[i];
   15286:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   15288:	4651      	mov	r1, sl
   1528a:	f812 3009 	ldrb.w	r3, [r2, r9]
   1528e:	4620      	mov	r0, r4
   15290:	f013 0f97 	tst.w	r3, #151	; 0x97
   15294:	bf08      	it	eq
   15296:	222e      	moveq	r2, #46	; 0x2e
   15298:	f7ff ff02 	bl	150a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1529c:	3501      	adds	r5, #1
   1529e:	2d10      	cmp	r5, #16
   152a0:	d114      	bne.n	152cc <hexdump_line_print+0xac>
}
   152a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   152a6:	4649      	mov	r1, r9
   152a8:	4620      	mov	r0, r4
   152aa:	f7ff fef9 	bl	150a0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   152ae:	f108 0801 	add.w	r8, r8, #1
   152b2:	e7c8      	b.n	15246 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   152b4:	076a      	lsls	r2, r5, #29
   152b6:	d1cf      	bne.n	15258 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   152b8:	4651      	mov	r1, sl
   152ba:	4620      	mov	r0, r4
   152bc:	f7ff fef0 	bl	150a0 <print_formatted>
   152c0:	e7ca      	b.n	15258 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   152c2:	4641      	mov	r1, r8
   152c4:	4620      	mov	r0, r4
   152c6:	f7ff feeb 	bl	150a0 <print_formatted>
   152ca:	e7cc      	b.n	15266 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   152cc:	076b      	lsls	r3, r5, #29
   152ce:	d1d8      	bne.n	15282 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   152d0:	4641      	mov	r1, r8
   152d2:	4620      	mov	r0, r4
   152d4:	f7ff fee4 	bl	150a0 <print_formatted>
   152d8:	e7d3      	b.n	15282 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   152da:	4641      	mov	r1, r8
   152dc:	4620      	mov	r0, r4
   152de:	f7ff fedf 	bl	150a0 <print_formatted>
   152e2:	e7db      	b.n	1529c <hexdump_line_print+0x7c>
   152e4:	000385b9 	.word	0x000385b9
   152e8:	0003d047 	.word	0x0003d047
   152ec:	00038475 	.word	0x00038475
   152f0:	00038473 	.word	0x00038473
   152f4:	00038471 	.word	0x00038471
   152f8:	0003846b 	.word	0x0003846b
   152fc:	0003e8c1 	.word	0x0003e8c1
   15300:	0003bc23 	.word	0x0003bc23

00015304 <out_func>:
{
   15304:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   15306:	684b      	ldr	r3, [r1, #4]
{
   15308:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1530a:	681a      	ldr	r2, [r3, #0]
   1530c:	68cb      	ldr	r3, [r1, #12]
{
   1530e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   15310:	429a      	cmp	r2, r3
   15312:	d102      	bne.n	1531a <out_func+0x16>
		log_output_flush(out_ctx);
   15314:	4608      	mov	r0, r1
   15316:	f019 facf 	bl	2e8b8 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1531a:	6863      	ldr	r3, [r4, #4]
   1531c:	e8d3 2fef 	ldaex	r2, [r3]
   15320:	1c51      	adds	r1, r2, #1
   15322:	e8c3 1fe0 	stlex	r0, r1, [r3]
   15326:	2800      	cmp	r0, #0
   15328:	d1f8      	bne.n	1531c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1532a:	68a3      	ldr	r3, [r4, #8]
   1532c:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1532e:	6863      	ldr	r3, [r4, #4]
   15330:	681a      	ldr	r2, [r3, #0]
   15332:	68e3      	ldr	r3, [r4, #12]
   15334:	429a      	cmp	r2, r3
   15336:	d909      	bls.n	1534c <out_func+0x48>
   15338:	4905      	ldr	r1, [pc, #20]	; (15350 <out_func+0x4c>)
   1533a:	4806      	ldr	r0, [pc, #24]	; (15354 <out_func+0x50>)
   1533c:	2373      	movs	r3, #115	; 0x73
   1533e:	4a06      	ldr	r2, [pc, #24]	; (15358 <out_func+0x54>)
   15340:	f018 fd22 	bl	2dd88 <printk>
   15344:	2173      	movs	r1, #115	; 0x73
   15346:	4804      	ldr	r0, [pc, #16]	; (15358 <out_func+0x54>)
   15348:	f019 f804 	bl	2e354 <assert_post_action>
}
   1534c:	2000      	movs	r0, #0
   1534e:	bd38      	pop	{r3, r4, r5, pc}
   15350:	000384a6 	.word	0x000384a6
   15354:	00037f2c 	.word	0x00037f2c
   15358:	00038477 	.word	0x00038477

0001535c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   1535c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   15360:	7a8b      	ldrb	r3, [r1, #10]
   15362:	4616      	mov	r6, r2
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   15364:	f013 0707 	ands.w	r7, r3, #7
{
   15368:	4604      	mov	r4, r0
   1536a:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1536c:	7a0a      	ldrb	r2, [r1, #8]
   1536e:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(output, flags, std_msg, timestamp,
   15370:	d020      	beq.n	153b4 <log_output_msg_process+0x58>
   15372:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   15374:	8949      	ldrh	r1, [r1, #10]
   15376:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1537a:	f3c1 1189 	ubfx	r1, r1, #6, #10
   1537e:	e9cd 7300 	strd	r7, r3, [sp]
   15382:	9102      	str	r1, [sp, #8]
   15384:	68eb      	ldr	r3, [r5, #12]
   15386:	4631      	mov	r1, r6
   15388:	f002 0201 	and.w	r2, r2, #1
   1538c:	f7ff fe9a 	bl	150c4 <prefix_print>
   15390:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   15392:	7a2b      	ldrb	r3, [r5, #8]
   15394:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   15396:	f013 0801 	ands.w	r8, r3, #1
   1539a:	d00d      	beq.n	153b8 <log_output_msg_process+0x5c>
		std_print(msg, output);
   1539c:	4621      	mov	r1, r4
   1539e:	4628      	mov	r0, r5
   153a0:	f019 f92d 	bl	2e5fe <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   153a4:	2f00      	cmp	r7, #0
   153a6:	d03c      	beq.n	15422 <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
   153a8:	463a      	mov	r2, r7
   153aa:	4631      	mov	r1, r6
   153ac:	4620      	mov	r0, r4
   153ae:	f7ff ff19 	bl	151e4 <postfix_print>
   153b2:	e036      	b.n	15422 <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   153b4:	46b9      	mov	r9, r7
   153b6:	e7ec      	b.n	15392 <log_output_msg_process+0x36>
	} else if (raw_string) {
   153b8:	2f00      	cmp	r7, #0
   153ba:	d138      	bne.n	1542e <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
   153bc:	68e3      	ldr	r3, [r4, #12]
   153be:	b95b      	cbnz	r3, 153d8 <log_output_msg_process+0x7c>
   153c0:	492a      	ldr	r1, [pc, #168]	; (1546c <log_output_msg_process+0x110>)
   153c2:	482b      	ldr	r0, [pc, #172]	; (15470 <log_output_msg_process+0x114>)
   153c4:	f240 13cf 	movw	r3, #463	; 0x1cf
   153c8:	4a2a      	ldr	r2, [pc, #168]	; (15474 <log_output_msg_process+0x118>)
   153ca:	f018 fcdd 	bl	2dd88 <printk>
   153ce:	f240 11cf 	movw	r1, #463	; 0x1cf
   153d2:	4828      	ldr	r0, [pc, #160]	; (15474 <log_output_msg_process+0x118>)
   153d4:	f018 ffbe 	bl	2e354 <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
   153d8:	2600      	movs	r6, #0
		length = output->size;
   153da:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   153dc:	aa06      	add	r2, sp, #24
		length = output->size;
   153de:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   153e0:	4628      	mov	r0, r5
   153e2:	4633      	mov	r3, r6
   153e4:	68a1      	ldr	r1, [r4, #8]
   153e6:	f019 f8f6 	bl	2e5d6 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   153ea:	9a06      	ldr	r2, [sp, #24]
   153ec:	6863      	ldr	r3, [r4, #4]
   153ee:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   153f0:	b14a      	cbz	r2, 15406 <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
   153f2:	68a3      	ldr	r3, [r4, #8]
   153f4:	4413      	add	r3, r2
   153f6:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   153fa:	f1a8 030a 	sub.w	r3, r8, #10
   153fe:	f1d3 0800 	rsbs	r8, r3, #0
   15402:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
   15406:	4620      	mov	r0, r4
   15408:	f019 fa56 	bl	2e8b8 <log_output_flush>
		offset += length;
   1540c:	9b06      	ldr	r3, [sp, #24]
   1540e:	441e      	add	r6, r3
	} while (length > 0);
   15410:	2b00      	cmp	r3, #0
   15412:	d1e2      	bne.n	153da <log_output_msg_process+0x7e>
	if (eol) {
   15414:	f1b8 0f00 	cmp.w	r8, #0
   15418:	d003      	beq.n	15422 <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
   1541a:	4620      	mov	r0, r4
   1541c:	4916      	ldr	r1, [pc, #88]	; (15478 <log_output_msg_process+0x11c>)
   1541e:	f7ff fe3f 	bl	150a0 <print_formatted>
	}

	log_output_flush(output);
   15422:	4620      	mov	r0, r4
   15424:	f019 fa48 	bl	2e8b8 <log_output_flush>
}
   15428:	b00a      	add	sp, #40	; 0x28
   1542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   1542e:	4628      	mov	r0, r5
   15430:	f019 f8cf 	bl	2e5d2 <log_msg_str_get>
   15434:	4911      	ldr	r1, [pc, #68]	; (1547c <log_output_msg_process+0x120>)
   15436:	4602      	mov	r2, r0
   15438:	4620      	mov	r0, r4
   1543a:	f7ff fe31 	bl	150a0 <print_formatted>
		length = sizeof(buf);
   1543e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   15442:	aa05      	add	r2, sp, #20
   15444:	4643      	mov	r3, r8
   15446:	4628      	mov	r0, r5
   15448:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   1544a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1544e:	f019 f8c2 	bl	2e5d6 <log_msg_hexdump_data_get>
		if (length) {
   15452:	9a05      	ldr	r2, [sp, #20]
   15454:	2a00      	cmp	r2, #0
   15456:	d0a7      	beq.n	153a8 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   15458:	464b      	mov	r3, r9
   1545a:	4620      	mov	r0, r4
   1545c:	9600      	str	r6, [sp, #0]
   1545e:	a906      	add	r1, sp, #24
   15460:	f7ff fede 	bl	15220 <hexdump_line_print>
			offset += length;
   15464:	9b05      	ldr	r3, [sp, #20]
   15466:	4498      	add	r8, r3
		length = sizeof(buf);
   15468:	e7eb      	b.n	15442 <log_output_msg_process+0xe6>
   1546a:	bf00      	nop
   1546c:	000384d6 	.word	0x000384d6
   15470:	00037f2c 	.word	0x00037f2c
   15474:	00038477 	.word	0x00038477
   15478:	000384e3 	.word	0x000384e3
   1547c:	0003b8db 	.word	0x0003b8db

00015480 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15480:	f242 730f 	movw	r3, #9999	; 0x270f
{
   15484:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15486:	428b      	cmp	r3, r1
   15488:	bf28      	it	cs
   1548a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1548c:	6805      	ldr	r5, [r0, #0]
{
   1548e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15490:	2105      	movs	r1, #5
   15492:	4668      	mov	r0, sp
   15494:	4a0d      	ldr	r2, [pc, #52]	; (154cc <log_output_dropped_process+0x4c>)
   15496:	f018 fc84 	bl	2dda2 <snprintk>
   1549a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1549c:	6863      	ldr	r3, [r4, #4]
   1549e:	4628      	mov	r0, r5
   154a0:	220b      	movs	r2, #11
   154a2:	685b      	ldr	r3, [r3, #4]
   154a4:	490a      	ldr	r1, [pc, #40]	; (154d0 <log_output_dropped_process+0x50>)
   154a6:	f019 f89d 	bl	2e5e4 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   154aa:	6863      	ldr	r3, [r4, #4]
   154ac:	4632      	mov	r2, r6
   154ae:	4669      	mov	r1, sp
   154b0:	4628      	mov	r0, r5
   154b2:	685b      	ldr	r3, [r3, #4]
   154b4:	f019 f896 	bl	2e5e4 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   154b8:	6863      	ldr	r3, [r4, #4]
   154ba:	221b      	movs	r2, #27
   154bc:	4628      	mov	r0, r5
   154be:	685b      	ldr	r3, [r3, #4]
   154c0:	4904      	ldr	r1, [pc, #16]	; (154d4 <log_output_dropped_process+0x54>)
   154c2:	f019 f88f 	bl	2e5e4 <buffer_write>
		     output->control_block->ctx);
}
   154c6:	b002      	add	sp, #8
   154c8:	bd70      	pop	{r4, r5, r6, pc}
   154ca:	bf00      	nop
   154cc:	00037717 	.word	0x00037717
   154d0:	00038521 	.word	0x00038521
   154d4:	00038505 	.word	0x00038505

000154d8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   154d8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   154da:	2100      	movs	r1, #0
	timestamp_div = 1U;
   154dc:	4a07      	ldr	r2, [pc, #28]	; (154fc <log_output_timestamp_freq_set+0x24>)
{
   154de:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   154e0:	4c07      	ldr	r4, [pc, #28]	; (15500 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   154e2:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   154e4:	42a0      	cmp	r0, r4
   154e6:	d804      	bhi.n	154f2 <log_output_timestamp_freq_set+0x1a>
   154e8:	b101      	cbz	r1, 154ec <log_output_timestamp_freq_set+0x14>
   154ea:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   154ec:	4b05      	ldr	r3, [pc, #20]	; (15504 <log_output_timestamp_freq_set+0x2c>)
   154ee:	6018      	str	r0, [r3, #0]
}
   154f0:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   154f2:	2101      	movs	r1, #1
		frequency /= 2U;
   154f4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   154f6:	005b      	lsls	r3, r3, #1
   154f8:	e7f4      	b.n	154e4 <log_output_timestamp_freq_set+0xc>
   154fa:	bf00      	nop
   154fc:	20016008 	.word	0x20016008
   15500:	000f4240 	.word	0x000f4240
   15504:	20016004 	.word	0x20016004

00015508 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   15508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1550a:	460d      	mov	r5, r1
   1550c:	4604      	mov	r4, r0
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
   1550e:	4f06      	ldr	r7, [pc, #24]	; (15528 <char_out+0x20>)
   15510:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   15512:	42b4      	cmp	r4, r6
   15514:	d101      	bne.n	1551a <char_out+0x12>
#endif
	}

	return length;
}
   15516:	4628      	mov	r0, r5
   15518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   1551a:	6838      	ldr	r0, [r7, #0]
   1551c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   15520:	6883      	ldr	r3, [r0, #8]
   15522:	69db      	ldr	r3, [r3, #28]
   15524:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   15526:	e7f4      	b.n	15512 <char_out+0xa>
   15528:	20016020 	.word	0x20016020

0001552c <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1552c:	4801      	ldr	r0, [pc, #4]	; (15534 <panic+0x8>)
   1552e:	f019 b9c3 	b.w	2e8b8 <log_output_flush>
   15532:	bf00      	nop
   15534:	0003680c 	.word	0x0003680c

00015538 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   15538:	4801      	ldr	r0, [pc, #4]	; (15540 <dropped+0x8>)
   1553a:	f7ff bfa1 	b.w	15480 <log_output_dropped_process>
   1553e:	bf00      	nop
   15540:	0003680c 	.word	0x0003680c

00015544 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
   15544:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   15546:	4809      	ldr	r0, [pc, #36]	; (1556c <log_backend_uart_init+0x28>)
   15548:	f013 f846 	bl	285d8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1554c:	4b08      	ldr	r3, [pc, #32]	; (15570 <log_backend_uart_init+0x2c>)
   1554e:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
   15550:	b958      	cbnz	r0, 1556a <log_backend_uart_init+0x26>
   15552:	234f      	movs	r3, #79	; 0x4f
   15554:	4907      	ldr	r1, [pc, #28]	; (15574 <log_backend_uart_init+0x30>)
   15556:	4808      	ldr	r0, [pc, #32]	; (15578 <log_backend_uart_init+0x34>)
   15558:	4a08      	ldr	r2, [pc, #32]	; (1557c <log_backend_uart_init+0x38>)
   1555a:	f018 fc15 	bl	2dd88 <printk>
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
   1555e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG((void *)uart_dev);
   15562:	214f      	movs	r1, #79	; 0x4f
   15564:	4805      	ldr	r0, [pc, #20]	; (1557c <log_backend_uart_init+0x38>)
   15566:	f018 bef5 	b.w	2e354 <assert_post_action>
}
   1556a:	bd08      	pop	{r3, pc}
   1556c:	0003852d 	.word	0x0003852d
   15570:	20016020 	.word	0x20016020
   15574:	00038569 	.word	0x00038569
   15578:	00037f2c 	.word	0x00037f2c
   1557c:	00038534 	.word	0x00038534

00015580 <put>:
{
   15580:	b510      	push	{r4, lr}
   15582:	460c      	mov	r4, r1
	log_msg_get(msg);
   15584:	4608      	mov	r0, r1
   15586:	f018 ffea 	bl	2e55e <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1558a:	4621      	mov	r1, r4
   1558c:	4804      	ldr	r0, [pc, #16]	; (155a0 <put+0x20>)
   1558e:	220f      	movs	r2, #15
   15590:	f7ff fee4 	bl	1535c <log_output_msg_process>
	log_msg_put(msg);
   15594:	4620      	mov	r0, r4
}
   15596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1559a:	f019 b80b 	b.w	2e5b4 <log_msg_put>
   1559e:	bf00      	nop
   155a0:	0003680c 	.word	0x0003680c

000155a4 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   155a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   155a8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 15648 <z_impl_zsock_socket+0xa4>
{
   155ac:	4605      	mov	r5, r0
   155ae:	460e      	mov	r6, r1
   155b0:	4617      	mov	r7, r2
   155b2:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   155b4:	4c1e      	ldr	r4, [pc, #120]	; (15630 <z_impl_zsock_socket+0x8c>)
   155b6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1564c <z_impl_zsock_socket+0xa8>
   155ba:	454c      	cmp	r4, r9
   155bc:	d90c      	bls.n	155d8 <z_impl_zsock_socket+0x34>
   155be:	491d      	ldr	r1, [pc, #116]	; (15634 <z_impl_zsock_socket+0x90>)
   155c0:	23d4      	movs	r3, #212	; 0xd4
   155c2:	4642      	mov	r2, r8
   155c4:	481c      	ldr	r0, [pc, #112]	; (15638 <z_impl_zsock_socket+0x94>)
   155c6:	f018 fbdf 	bl	2dd88 <printk>
   155ca:	481c      	ldr	r0, [pc, #112]	; (1563c <z_impl_zsock_socket+0x98>)
   155cc:	f018 fbdc 	bl	2dd88 <printk>
   155d0:	21d4      	movs	r1, #212	; 0xd4
   155d2:	4640      	mov	r0, r8
   155d4:	f018 febe 	bl	2e354 <assert_post_action>
   155d8:	4554      	cmp	r4, sl
   155da:	d307      	bcc.n	155ec <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   155dc:	f01a ff6a 	bl	304b4 <__errno>
   155e0:	236a      	movs	r3, #106	; 0x6a
   155e2:	6003      	str	r3, [r0, #0]
	return -1;
}
   155e4:	f04f 30ff 	mov.w	r0, #4294967295
   155e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   155ec:	6823      	ldr	r3, [r4, #0]
   155ee:	42ab      	cmp	r3, r5
   155f0:	d000      	beq.n	155f4 <z_impl_zsock_socket+0x50>
   155f2:	b9db      	cbnz	r3, 1562c <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   155f4:	6863      	ldr	r3, [r4, #4]
   155f6:	b963      	cbnz	r3, 15612 <z_impl_zsock_socket+0x6e>
   155f8:	4911      	ldr	r1, [pc, #68]	; (15640 <z_impl_zsock_socket+0x9c>)
   155fa:	23da      	movs	r3, #218	; 0xda
   155fc:	4642      	mov	r2, r8
   155fe:	480e      	ldr	r0, [pc, #56]	; (15638 <z_impl_zsock_socket+0x94>)
   15600:	f018 fbc2 	bl	2dd88 <printk>
   15604:	480f      	ldr	r0, [pc, #60]	; (15644 <z_impl_zsock_socket+0xa0>)
   15606:	f018 fbbf 	bl	2dd88 <printk>
   1560a:	21da      	movs	r1, #218	; 0xda
   1560c:	4640      	mov	r0, r8
   1560e:	f018 fea1 	bl	2e354 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   15612:	463a      	mov	r2, r7
   15614:	4631      	mov	r1, r6
   15616:	4628      	mov	r0, r5
   15618:	6863      	ldr	r3, [r4, #4]
   1561a:	4798      	blx	r3
   1561c:	b130      	cbz	r0, 1562c <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   1561e:	463a      	mov	r2, r7
   15620:	4631      	mov	r1, r6
   15622:	4628      	mov	r0, r5
   15624:	68a3      	ldr	r3, [r4, #8]
}
   15626:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   1562a:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1562c:	340c      	adds	r4, #12
   1562e:	e7c4      	b.n	155ba <z_impl_zsock_socket+0x16>
   15630:	0003645c 	.word	0x0003645c
   15634:	00038609 	.word	0x00038609
   15638:	00037f2c 	.word	0x00037f2c
   1563c:	00038636 	.word	0x00038636
   15640:	000385ef 	.word	0x000385ef
   15644:	000385b8 	.word	0x000385b8
   15648:	00036468 	.word	0x00036468
   1564c:	000385bb 	.word	0x000385bb

00015650 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   15650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   15654:	1e14      	subs	r4, r2, #0
{
   15656:	b09b      	sub	sp, #108	; 0x6c
   15658:	4605      	mov	r5, r0
   1565a:	9104      	str	r1, [sp, #16]
	if (poll_timeout < 0) {
   1565c:	db2f      	blt.n	156be <z_impl_zsock_poll+0x6e>
   1565e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15662:	f240 30e7 	movw	r0, #999	; 0x3e7
   15666:	2100      	movs	r1, #0
   15668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1566c:	2300      	movs	r3, #0
   1566e:	fbc6 0104 	smlal	r0, r1, r6, r4
   15672:	f7fb fdbd 	bl	111f0 <__aeabi_uldivmod>
   15676:	4682      	mov	sl, r0
   15678:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   1567a:	2600      	movs	r6, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = sys_clock_timeout_end_calc(timeout);
   1567c:	4650      	mov	r0, sl
   1567e:	4659      	mov	r1, fp
   15680:	f01f feab 	bl	353da <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   15684:	462f      	mov	r7, r5
	const struct fd_op_vtable *offl_vtable = NULL;
   15686:	46b0      	mov	r8, r6
	pev = poll_events;
   15688:	ab0b      	add	r3, sp, #44	; 0x2c
   1568a:	9308      	str	r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   1568c:	e9cd 0105 	strd	r0, r1, [sp, #20]
	for (pfd = fds, i = nfds; i--; pfd++) {
   15690:	9b04      	ldr	r3, [sp, #16]
	bool offload = false;
   15692:	9602      	str	r6, [sp, #8]
	for (pfd = fds, i = nfds; i--; pfd++) {
   15694:	9303      	str	r3, [sp, #12]
   15696:	9b03      	ldr	r3, [sp, #12]
   15698:	b9c3      	cbnz	r3, 156cc <z_impl_zsock_poll+0x7c>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   1569a:	9b02      	ldr	r3, [sp, #8]
   1569c:	2b00      	cmp	r3, #0
   1569e:	d05b      	beq.n	15758 <z_impl_zsock_poll+0x108>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   156a0:	9b04      	ldr	r3, [sp, #16]
   156a2:	9401      	str	r4, [sp, #4]
   156a4:	9300      	str	r3, [sp, #0]
   156a6:	f44f 7282 	mov.w	r2, #260	; 0x104
   156aa:	462b      	mov	r3, r5
   156ac:	4631      	mov	r1, r6
   156ae:	4640      	mov	r0, r8
   156b0:	f019 f949 	bl	2e946 <z_fdtable_call_ioctl>
   156b4:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   156b6:	4620      	mov	r0, r4
   156b8:	b01b      	add	sp, #108	; 0x6c
   156ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   156be:	f04f 3aff 	mov.w	sl, #4294967295
   156c2:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   156c6:	f04f 34ff 	mov.w	r4, #4294967295
   156ca:	e7d6      	b.n	1567a <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   156cc:	6838      	ldr	r0, [r7, #0]
   156ce:	2800      	cmp	r0, #0
   156d0:	db3d      	blt.n	1574e <z_impl_zsock_poll+0xfe>
	ctx = z_get_fd_obj_and_vtable(sock,
   156d2:	aa0a      	add	r2, sp, #40	; 0x28
   156d4:	a909      	add	r1, sp, #36	; 0x24
   156d6:	f7fd fd21 	bl	1311c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   156da:	9007      	str	r0, [sp, #28]
   156dc:	2800      	cmp	r0, #0
   156de:	d036      	beq.n	1574e <z_impl_zsock_poll+0xfe>
		(void)k_mutex_lock(lock, K_FOREVER);
   156e0:	f04f 32ff 	mov.w	r2, #4294967295
   156e4:	f04f 33ff 	mov.w	r3, #4294967295
   156e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   156ea:	f019 f93b 	bl	2e964 <k_mutex_lock.constprop.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   156ee:	ab1a      	add	r3, sp, #104	; 0x68
   156f0:	9301      	str	r3, [sp, #4]
   156f2:	ab08      	add	r3, sp, #32
   156f4:	9300      	str	r3, [sp, #0]
   156f6:	f44f 7281 	mov.w	r2, #258	; 0x102
   156fa:	463b      	mov	r3, r7
   156fc:	9907      	ldr	r1, [sp, #28]
   156fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   15700:	f019 f921 	bl	2e946 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   15704:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   15708:	4681      	mov	r9, r0
		if (result == -EALREADY) {
   1570a:	d00e      	beq.n	1572a <z_impl_zsock_poll+0xda>
		} else if (result == -EXDEV) {
   1570c:	f110 0f12 	cmn.w	r0, #18
   15710:	9907      	ldr	r1, [sp, #28]
   15712:	d110      	bne.n	15736 <z_impl_zsock_poll+0xe6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   15714:	f1b8 0f00 	cmp.w	r8, #0
   15718:	d102      	bne.n	15720 <z_impl_zsock_poll+0xd0>
				offl_vtable = vtable;
   1571a:	460e      	mov	r6, r1
   1571c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
			offload = true;
   15720:	2301      	movs	r3, #1
			result = 0;
   15722:	f04f 0900 	mov.w	r9, #0
			offload = true;
   15726:	9302      	str	r3, [sp, #8]
   15728:	e005      	b.n	15736 <z_impl_zsock_poll+0xe6>
			timeout = K_NO_WAIT;
   1572a:	f04f 0a00 	mov.w	sl, #0
   1572e:	f04f 0b00 	mov.w	fp, #0
			result = 0;
   15732:	f04f 0900 	mov.w	r9, #0
		k_mutex_unlock(lock);
   15736:	980a      	ldr	r0, [sp, #40]	; 0x28
   15738:	f019 f903 	bl	2e942 <k_mutex_unlock>
		if (result < 0) {
   1573c:	f1b9 0f00 	cmp.w	r9, #0
   15740:	da05      	bge.n	1574e <z_impl_zsock_poll+0xfe>
				errno = -result;
   15742:	f01a feb7 	bl	304b4 <__errno>
   15746:	f1c9 0300 	rsb	r3, r9, #0
   1574a:	6003      	str	r3, [r0, #0]
				return -1;
   1574c:	e039      	b.n	157c2 <z_impl_zsock_poll+0x172>
	for (pfd = fds, i = nfds; i--; pfd++) {
   1574e:	9b03      	ldr	r3, [sp, #12]
   15750:	3708      	adds	r7, #8
   15752:	3b01      	subs	r3, #1
   15754:	9303      	str	r3, [sp, #12]
   15756:	e79e      	b.n	15696 <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15758:	ea5a 030b 	orrs.w	r3, sl, fp
   1575c:	d016      	beq.n	1578c <z_impl_zsock_poll+0x13c>
   1575e:	f1bb 3fff 	cmp.w	fp, #4294967295
   15762:	bf08      	it	eq
   15764:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   15768:	d010      	beq.n	1578c <z_impl_zsock_poll+0x13c>
		int64_t remaining = end - sys_clock_tick_get();
   1576a:	f016 fc13 	bl	2bf94 <sys_clock_tick_get>
   1576e:	9b05      	ldr	r3, [sp, #20]
   15770:	ebb3 0a00 	subs.w	sl, r3, r0
   15774:	9b06      	ldr	r3, [sp, #24]
   15776:	eb63 0b01 	sbc.w	fp, r3, r1
   1577a:	f1ba 0f00 	cmp.w	sl, #0
   1577e:	f17b 0300 	sbcs.w	r3, fp, #0
   15782:	bfbc      	itt	lt
   15784:	f04f 0a00 	movlt.w	sl, #0
   15788:	f04f 0b00 	movlt.w	fp, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   1578c:	9908      	ldr	r1, [sp, #32]
   1578e:	ac0b      	add	r4, sp, #44	; 0x2c
   15790:	4b3b      	ldr	r3, [pc, #236]	; (15880 <z_impl_zsock_poll+0x230>)
   15792:	1b09      	subs	r1, r1, r4
   15794:	1089      	asrs	r1, r1, #2
   15796:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   15798:	465b      	mov	r3, fp
   1579a:	4652      	mov	r2, sl
   1579c:	4620      	mov	r0, r4
   1579e:	f016 ff37 	bl	2c610 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   157a2:	f100 030b 	add.w	r3, r0, #11
   157a6:	2b0b      	cmp	r3, #11
   157a8:	4607      	mov	r7, r0
   157aa:	d806      	bhi.n	157ba <z_impl_zsock_poll+0x16a>
   157ac:	f640 0681 	movw	r6, #2177	; 0x881
   157b0:	40de      	lsrs	r6, r3
   157b2:	43f6      	mvns	r6, r6
   157b4:	f016 0601 	ands.w	r6, r6, #1
   157b8:	d006      	beq.n	157c8 <z_impl_zsock_poll+0x178>
			errno = -ret;
   157ba:	f01a fe7b 	bl	304b4 <__errno>
   157be:	427f      	negs	r7, r7
   157c0:	6007      	str	r7, [r0, #0]
			return -1;
   157c2:	f04f 34ff 	mov.w	r4, #4294967295
   157c6:	e776      	b.n	156b6 <z_impl_zsock_poll+0x66>
		pev = poll_events;
   157c8:	9408      	str	r4, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   157ca:	462f      	mov	r7, r5
		ret = 0;
   157cc:	4634      	mov	r4, r6
		for (pfd = fds, i = nfds; i--; pfd++) {
   157ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
   157d2:	f1b8 0f00 	cmp.w	r8, #0
   157d6:	d11d      	bne.n	15814 <z_impl_zsock_poll+0x1c4>
		if (retry) {
   157d8:	2e00      	cmp	r6, #0
   157da:	f43f af6c 	beq.w	156b6 <z_impl_zsock_poll+0x66>
			if (ret > 0) {
   157de:	2c00      	cmp	r4, #0
   157e0:	f73f af69 	bgt.w	156b6 <z_impl_zsock_poll+0x66>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   157e4:	ea5a 030b 	orrs.w	r3, sl, fp
   157e8:	f43f af65 	beq.w	156b6 <z_impl_zsock_poll+0x66>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   157ec:	f1bb 3fff 	cmp.w	fp, #4294967295
   157f0:	bf08      	it	eq
   157f2:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   157f6:	d0c9      	beq.n	1578c <z_impl_zsock_poll+0x13c>
				int64_t remaining = end - sys_clock_tick_get();
   157f8:	f016 fbcc 	bl	2bf94 <sys_clock_tick_get>
   157fc:	9b05      	ldr	r3, [sp, #20]
   157fe:	ebb3 0a00 	subs.w	sl, r3, r0
   15802:	9b06      	ldr	r3, [sp, #24]
   15804:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   15808:	f1ba 0f01 	cmp.w	sl, #1
   1580c:	f17b 0300 	sbcs.w	r3, fp, #0
   15810:	dabc      	bge.n	1578c <z_impl_zsock_poll+0x13c>
   15812:	e750      	b.n	156b6 <z_impl_zsock_poll+0x66>
			pfd->revents = 0;
   15814:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   15818:	6838      	ldr	r0, [r7, #0]
			pfd->revents = 0;
   1581a:	80fb      	strh	r3, [r7, #6]
			if (pfd->fd < 0) {
   1581c:	2800      	cmp	r0, #0
   1581e:	db28      	blt.n	15872 <z_impl_zsock_poll+0x222>
	ctx = z_get_fd_obj_and_vtable(sock,
   15820:	aa0a      	add	r2, sp, #40	; 0x28
   15822:	a909      	add	r1, sp, #36	; 0x24
   15824:	f7fd fc7a 	bl	1311c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   15828:	4681      	mov	r9, r0
   1582a:	b918      	cbnz	r0, 15834 <z_impl_zsock_poll+0x1e4>
				pfd->revents = ZSOCK_POLLNVAL;
   1582c:	2320      	movs	r3, #32
   1582e:	80fb      	strh	r3, [r7, #6]
				ret++;
   15830:	3401      	adds	r4, #1
   15832:	e01e      	b.n	15872 <z_impl_zsock_poll+0x222>
			(void)k_mutex_lock(lock, K_FOREVER);
   15834:	f04f 32ff 	mov.w	r2, #4294967295
   15838:	f04f 33ff 	mov.w	r3, #4294967295
   1583c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1583e:	f019 f891 	bl	2e964 <k_mutex_lock.constprop.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   15842:	ab08      	add	r3, sp, #32
   15844:	4649      	mov	r1, r9
   15846:	f240 1203 	movw	r2, #259	; 0x103
   1584a:	9300      	str	r3, [sp, #0]
   1584c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1584e:	463b      	mov	r3, r7
   15850:	f019 f879 	bl	2e946 <z_fdtable_call_ioctl>
   15854:	4681      	mov	r9, r0
			k_mutex_unlock(lock);
   15856:	980a      	ldr	r0, [sp, #40]	; 0x28
   15858:	f019 f873 	bl	2e942 <k_mutex_unlock>
			if (result == -EAGAIN) {
   1585c:	f119 0f0b 	cmn.w	r9, #11
   15860:	d00b      	beq.n	1587a <z_impl_zsock_poll+0x22a>
			} else if (result != 0) {
   15862:	f1b9 0f00 	cmp.w	r9, #0
   15866:	f47f af6c 	bne.w	15742 <z_impl_zsock_poll+0xf2>
			if (pfd->revents != 0) {
   1586a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1586e:	2b00      	cmp	r3, #0
   15870:	d1de      	bne.n	15830 <z_impl_zsock_poll+0x1e0>
		for (pfd = fds, i = nfds; i--; pfd++) {
   15872:	3708      	adds	r7, #8
   15874:	f108 38ff 	add.w	r8, r8, #4294967295
   15878:	e7ab      	b.n	157d2 <z_impl_zsock_poll+0x182>
				retry = true;
   1587a:	2601      	movs	r6, #1
   1587c:	e7f9      	b.n	15872 <z_impl_zsock_poll+0x222>
   1587e:	bf00      	nop
   15880:	cccccccd 	.word	0xcccccccd

00015884 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   15884:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   15886:	4605      	mov	r5, r0
   15888:	b948      	cbnz	r0, 1589e <socket_offload_dns_register+0x1a>
   1588a:	490c      	ldr	r1, [pc, #48]	; (158bc <socket_offload_dns_register+0x38>)
   1588c:	480c      	ldr	r0, [pc, #48]	; (158c0 <socket_offload_dns_register+0x3c>)
   1588e:	2313      	movs	r3, #19
   15890:	4a0c      	ldr	r2, [pc, #48]	; (158c4 <socket_offload_dns_register+0x40>)
   15892:	f018 fa79 	bl	2dd88 <printk>
   15896:	2113      	movs	r1, #19
   15898:	480a      	ldr	r0, [pc, #40]	; (158c4 <socket_offload_dns_register+0x40>)
   1589a:	f018 fd5b 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   1589e:	4c0a      	ldr	r4, [pc, #40]	; (158c8 <socket_offload_dns_register+0x44>)
   158a0:	6822      	ldr	r2, [r4, #0]
   158a2:	b14a      	cbz	r2, 158b8 <socket_offload_dns_register+0x34>
   158a4:	4909      	ldr	r1, [pc, #36]	; (158cc <socket_offload_dns_register+0x48>)
   158a6:	4806      	ldr	r0, [pc, #24]	; (158c0 <socket_offload_dns_register+0x3c>)
   158a8:	2314      	movs	r3, #20
   158aa:	4a06      	ldr	r2, [pc, #24]	; (158c4 <socket_offload_dns_register+0x40>)
   158ac:	f018 fa6c 	bl	2dd88 <printk>
   158b0:	2114      	movs	r1, #20
   158b2:	4804      	ldr	r0, [pc, #16]	; (158c4 <socket_offload_dns_register+0x40>)
   158b4:	f018 fd4e 	bl	2e354 <assert_post_action>

	dns_offload = ops;
   158b8:	6025      	str	r5, [r4, #0]
}
   158ba:	bd38      	pop	{r3, r4, r5, pc}
   158bc:	0003e058 	.word	0x0003e058
   158c0:	00037f2c 	.word	0x00037f2c
   158c4:	00038655 	.word	0x00038655
   158c8:	20016024 	.word	0x20016024
   158cc:	00038690 	.word	0x00038690

000158d0 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   158d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   158d4:	4c13      	ldr	r4, [pc, #76]	; (15924 <socket_offload_getaddrinfo+0x54>)
{
   158d6:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   158d8:	6823      	ldr	r3, [r4, #0]
{
   158da:	4605      	mov	r5, r0
   158dc:	460e      	mov	r6, r1
   158de:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   158e0:	b94b      	cbnz	r3, 158f6 <socket_offload_getaddrinfo+0x26>
   158e2:	4911      	ldr	r1, [pc, #68]	; (15928 <socket_offload_getaddrinfo+0x58>)
   158e4:	4811      	ldr	r0, [pc, #68]	; (1592c <socket_offload_getaddrinfo+0x5c>)
   158e6:	231d      	movs	r3, #29
   158e8:	4a11      	ldr	r2, [pc, #68]	; (15930 <socket_offload_getaddrinfo+0x60>)
   158ea:	f018 fa4d 	bl	2dd88 <printk>
   158ee:	211d      	movs	r1, #29
   158f0:	480f      	ldr	r0, [pc, #60]	; (15930 <socket_offload_getaddrinfo+0x60>)
   158f2:	f018 fd2f 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   158f6:	6823      	ldr	r3, [r4, #0]
   158f8:	681b      	ldr	r3, [r3, #0]
   158fa:	b94b      	cbnz	r3, 15910 <socket_offload_getaddrinfo+0x40>
   158fc:	490d      	ldr	r1, [pc, #52]	; (15934 <socket_offload_getaddrinfo+0x64>)
   158fe:	480b      	ldr	r0, [pc, #44]	; (1592c <socket_offload_getaddrinfo+0x5c>)
   15900:	231e      	movs	r3, #30
   15902:	4a0b      	ldr	r2, [pc, #44]	; (15930 <socket_offload_getaddrinfo+0x60>)
   15904:	f018 fa40 	bl	2dd88 <printk>
   15908:	211e      	movs	r1, #30
   1590a:	4809      	ldr	r0, [pc, #36]	; (15930 <socket_offload_getaddrinfo+0x60>)
   1590c:	f018 fd22 	bl	2e354 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   15910:	6823      	ldr	r3, [r4, #0]
   15912:	463a      	mov	r2, r7
   15914:	681c      	ldr	r4, [r3, #0]
   15916:	4631      	mov	r1, r6
   15918:	4643      	mov	r3, r8
   1591a:	4628      	mov	r0, r5
   1591c:	46a4      	mov	ip, r4
}
   1591e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   15922:	4760      	bx	ip
   15924:	20016024 	.word	0x20016024
   15928:	000386ab 	.word	0x000386ab
   1592c:	00037f2c 	.word	0x00037f2c
   15930:	00038655 	.word	0x00038655
   15934:	000386b7 	.word	0x000386b7

00015938 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   15938:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   1593a:	4c10      	ldr	r4, [pc, #64]	; (1597c <socket_offload_freeaddrinfo+0x44>)
{
   1593c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   1593e:	6823      	ldr	r3, [r4, #0]
   15940:	b94b      	cbnz	r3, 15956 <socket_offload_freeaddrinfo+0x1e>
   15942:	490f      	ldr	r1, [pc, #60]	; (15980 <socket_offload_freeaddrinfo+0x48>)
   15944:	480f      	ldr	r0, [pc, #60]	; (15984 <socket_offload_freeaddrinfo+0x4c>)
   15946:	2325      	movs	r3, #37	; 0x25
   15948:	4a0f      	ldr	r2, [pc, #60]	; (15988 <socket_offload_freeaddrinfo+0x50>)
   1594a:	f018 fa1d 	bl	2dd88 <printk>
   1594e:	2125      	movs	r1, #37	; 0x25
   15950:	480d      	ldr	r0, [pc, #52]	; (15988 <socket_offload_freeaddrinfo+0x50>)
   15952:	f018 fcff 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   15956:	6823      	ldr	r3, [r4, #0]
   15958:	685b      	ldr	r3, [r3, #4]
   1595a:	b94b      	cbnz	r3, 15970 <socket_offload_freeaddrinfo+0x38>
   1595c:	490b      	ldr	r1, [pc, #44]	; (1598c <socket_offload_freeaddrinfo+0x54>)
   1595e:	4809      	ldr	r0, [pc, #36]	; (15984 <socket_offload_freeaddrinfo+0x4c>)
   15960:	2326      	movs	r3, #38	; 0x26
   15962:	4a09      	ldr	r2, [pc, #36]	; (15988 <socket_offload_freeaddrinfo+0x50>)
   15964:	f018 fa10 	bl	2dd88 <printk>
   15968:	2126      	movs	r1, #38	; 0x26
   1596a:	4807      	ldr	r0, [pc, #28]	; (15988 <socket_offload_freeaddrinfo+0x50>)
   1596c:	f018 fcf2 	bl	2e354 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   15970:	6823      	ldr	r3, [r4, #0]
   15972:	4628      	mov	r0, r5
}
   15974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   15978:	685b      	ldr	r3, [r3, #4]
   1597a:	4718      	bx	r3
   1597c:	20016024 	.word	0x20016024
   15980:	000386ab 	.word	0x000386ab
   15984:	00037f2c 	.word	0x00037f2c
   15988:	00038655 	.word	0x00038655
   1598c:	000386d0 	.word	0x000386d0

00015990 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   15990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15992:	4605      	mov	r5, r0
	__asm__ volatile(
   15994:	f04f 0320 	mov.w	r3, #32
   15998:	f3ef 8611 	mrs	r6, BASEPRI
   1599c:	f383 8811 	msr	BASEPRI, r3
   159a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   159a4:	481e      	ldr	r0, [pc, #120]	; (15a20 <pm_state_notify+0x90>)
   159a6:	f013 fae5 	bl	28f74 <z_spin_lock_valid>
   159aa:	b968      	cbnz	r0, 159c8 <pm_state_notify+0x38>
   159ac:	2381      	movs	r3, #129	; 0x81
   159ae:	4a1d      	ldr	r2, [pc, #116]	; (15a24 <pm_state_notify+0x94>)
   159b0:	491d      	ldr	r1, [pc, #116]	; (15a28 <pm_state_notify+0x98>)
   159b2:	481e      	ldr	r0, [pc, #120]	; (15a2c <pm_state_notify+0x9c>)
   159b4:	f018 f9e8 	bl	2dd88 <printk>
   159b8:	4919      	ldr	r1, [pc, #100]	; (15a20 <pm_state_notify+0x90>)
   159ba:	481d      	ldr	r0, [pc, #116]	; (15a30 <pm_state_notify+0xa0>)
   159bc:	f018 f9e4 	bl	2dd88 <printk>
   159c0:	2181      	movs	r1, #129	; 0x81
   159c2:	4818      	ldr	r0, [pc, #96]	; (15a24 <pm_state_notify+0x94>)
   159c4:	f018 fcc6 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   159c8:	4815      	ldr	r0, [pc, #84]	; (15a20 <pm_state_notify+0x90>)
   159ca:	f013 faef 	bl	28fac <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   159ce:	4b19      	ldr	r3, [pc, #100]	; (15a34 <pm_state_notify+0xa4>)
   159d0:	681c      	ldr	r4, [r3, #0]
   159d2:	2c00      	cmp	r4, #0
   159d4:	bf38      	it	cc
   159d6:	2400      	movcc	r4, #0
   159d8:	b15c      	cbz	r4, 159f2 <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   159da:	4f17      	ldr	r7, [pc, #92]	; (15a38 <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   159dc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   159e0:	2d00      	cmp	r5, #0
   159e2:	bf08      	it	eq
   159e4:	4613      	moveq	r3, r2
		if (callback) {
   159e6:	b10b      	cbz	r3, 159ec <pm_state_notify+0x5c>
			callback(z_power_state.state);
   159e8:	7838      	ldrb	r0, [r7, #0]
   159ea:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   159ec:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   159ee:	2c00      	cmp	r4, #0
   159f0:	d1f4      	bne.n	159dc <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   159f2:	480b      	ldr	r0, [pc, #44]	; (15a20 <pm_state_notify+0x90>)
   159f4:	f013 facc 	bl	28f90 <z_spin_unlock_valid>
   159f8:	b968      	cbnz	r0, 15a16 <pm_state_notify+0x86>
   159fa:	23ac      	movs	r3, #172	; 0xac
   159fc:	4a09      	ldr	r2, [pc, #36]	; (15a24 <pm_state_notify+0x94>)
   159fe:	490f      	ldr	r1, [pc, #60]	; (15a3c <pm_state_notify+0xac>)
   15a00:	480a      	ldr	r0, [pc, #40]	; (15a2c <pm_state_notify+0x9c>)
   15a02:	f018 f9c1 	bl	2dd88 <printk>
   15a06:	4906      	ldr	r1, [pc, #24]	; (15a20 <pm_state_notify+0x90>)
   15a08:	480d      	ldr	r0, [pc, #52]	; (15a40 <pm_state_notify+0xb0>)
   15a0a:	f018 f9bd 	bl	2dd88 <printk>
   15a0e:	21ac      	movs	r1, #172	; 0xac
   15a10:	4804      	ldr	r0, [pc, #16]	; (15a24 <pm_state_notify+0x94>)
   15a12:	f018 fc9f 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   15a16:	f386 8811 	msr	BASEPRI, r6
   15a1a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   15a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15a20:	20016028 	.word	0x20016028
   15a24:	00037fec 	.word	0x00037fec
   15a28:	0003803e 	.word	0x0003803e
   15a2c:	00037f2c 	.word	0x00037f2c
   15a30:	00038053 	.word	0x00038053
   15a34:	2001602c 	.word	0x2001602c
   15a38:	20016034 	.word	0x20016034
   15a3c:	00038012 	.word	0x00038012
   15a40:	00038029 	.word	0x00038029

00015a44 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   15a44:	4b08      	ldr	r3, [pc, #32]	; (15a68 <pm_system_resume+0x24>)
{
   15a46:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   15a48:	681c      	ldr	r4, [r3, #0]
   15a4a:	b95c      	cbnz	r4, 15a64 <pm_system_resume+0x20>
		post_ops_done = 1;
   15a4c:	2201      	movs	r2, #1
   15a4e:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   15a50:	4b06      	ldr	r3, [pc, #24]	; (15a6c <pm_system_resume+0x28>)
   15a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   15a56:	f018 fc9a 	bl	2e38e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   15a5a:	4620      	mov	r0, r4
	}
}
   15a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   15a60:	f7ff bf96 	b.w	15990 <pm_state_notify>
}
   15a64:	bd10      	pop	{r4, pc}
   15a66:	bf00      	nop
   15a68:	20014718 	.word	0x20014718
   15a6c:	20016034 	.word	0x20016034

00015a70 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   15a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a72:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   15a74:	466e      	mov	r6, sp
   15a76:	4c1f      	ldr	r4, [pc, #124]	; (15af4 <pm_system_suspend+0x84>)
   15a78:	4601      	mov	r1, r0
{
   15a7a:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   15a7c:	4630      	mov	r0, r6
   15a7e:	f019 f873 	bl	2eb68 <pm_policy_next_state>
   15a82:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   15a8a:	7820      	ldrb	r0, [r4, #0]
   15a8c:	b380      	cbz	r0, 15af0 <pm_system_suspend+0x80>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   15a8e:	2000      	movs	r0, #0
   15a90:	4b19      	ldr	r3, [pc, #100]	; (15af8 <pm_system_suspend+0x88>)
   15a92:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   15a94:	1c6b      	adds	r3, r5, #1
   15a96:	d01d      	beq.n	15ad4 <pm_system_suspend+0x64>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   15a98:	4291      	cmp	r1, r2
   15a9a:	d20c      	bcs.n	15ab6 <pm_system_suspend+0x46>
   15a9c:	4917      	ldr	r1, [pc, #92]	; (15afc <pm_system_suspend+0x8c>)
   15a9e:	23bd      	movs	r3, #189	; 0xbd
   15aa0:	4a17      	ldr	r2, [pc, #92]	; (15b00 <pm_system_suspend+0x90>)
   15aa2:	4818      	ldr	r0, [pc, #96]	; (15b04 <pm_system_suspend+0x94>)
   15aa4:	f018 f970 	bl	2dd88 <printk>
   15aa8:	4817      	ldr	r0, [pc, #92]	; (15b08 <pm_system_suspend+0x98>)
   15aaa:	f018 f96d 	bl	2dd88 <printk>
   15aae:	21bd      	movs	r1, #189	; 0xbd
   15ab0:	4813      	ldr	r0, [pc, #76]	; (15b00 <pm_system_suspend+0x90>)
   15ab2:	f018 fc4f 	bl	2e354 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   15ab6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15aba:	2100      	movs	r1, #0
   15abc:	68a7      	ldr	r7, [r4, #8]
   15abe:	4813      	ldr	r0, [pc, #76]	; (15b0c <pm_system_suspend+0x9c>)
   15ac0:	2300      	movs	r3, #0
   15ac2:	fbe6 0107 	umlal	r0, r1, r6, r7
   15ac6:	4a12      	ldr	r2, [pc, #72]	; (15b10 <pm_system_suspend+0xa0>)
   15ac8:	f7fb fb92 	bl	111f0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   15acc:	2101      	movs	r1, #1
   15ace:	1a28      	subs	r0, r5, r0
   15ad0:	f016 f946 	bl	2bd60 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   15ad4:	f014 fe44 	bl	2a760 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   15ad8:	2001      	movs	r0, #1
   15ada:	f7ff ff59 	bl	15990 <pm_state_notify>
	pm_power_state_set(z_power_state);
   15ade:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   15ae2:	f018 fc41 	bl	2e368 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   15ae6:	f7ff ffad 	bl	15a44 <pm_system_resume>
	k_sched_unlock();
   15aea:	f015 f8cd 	bl	2ac88 <k_sched_unlock>

	return z_power_state.state;
   15aee:	7820      	ldrb	r0, [r4, #0]
}
   15af0:	b005      	add	sp, #20
   15af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15af4:	20016034 	.word	0x20016034
   15af8:	20014718 	.word	0x20014718
   15afc:	00038769 	.word	0x00038769
   15b00:	000386f3 	.word	0x000386f3
   15b04:	00037f2c 	.word	0x00037f2c
   15b08:	000387a9 	.word	0x000387a9
   15b0c:	000f423f 	.word	0x000f423f
   15b10:	000f4240 	.word	0x000f4240

00015b14 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   15b14:	b510      	push	{r4, lr}
   15b16:	4807      	ldr	r0, [pc, #28]	; (15b34 <uart_console_init+0x20>)
   15b18:	f012 fd5e 	bl	285d8 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   15b1c:	4c06      	ldr	r4, [pc, #24]	; (15b38 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   15b1e:	4b07      	ldr	r3, [pc, #28]	; (15b3c <uart_console_init+0x28>)
   15b20:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   15b22:	4620      	mov	r0, r4
   15b24:	f001 ff4a 	bl	179bc <__stdout_hook_install>
	__printk_hook_install(console_out);
   15b28:	4620      	mov	r0, r4
   15b2a:	f7fd fbb5 	bl	13298 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   15b2e:	2000      	movs	r0, #0
   15b30:	bd10      	pop	{r4, pc}
   15b32:	bf00      	nop
   15b34:	0003852d 	.word	0x0003852d
   15b38:	00015b41 	.word	0x00015b41
   15b3c:	20016040 	.word	0x20016040

00015b40 <console_out>:
	if ('\n' == c) {
   15b40:	280a      	cmp	r0, #10
{
   15b42:	b538      	push	{r3, r4, r5, lr}
   15b44:	4604      	mov	r4, r0
   15b46:	4d07      	ldr	r5, [pc, #28]	; (15b64 <console_out+0x24>)
	if ('\n' == c) {
   15b48:	d104      	bne.n	15b54 <console_out+0x14>
   15b4a:	6828      	ldr	r0, [r5, #0]
   15b4c:	6883      	ldr	r3, [r0, #8]
   15b4e:	210d      	movs	r1, #13
   15b50:	69db      	ldr	r3, [r3, #28]
   15b52:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   15b54:	6828      	ldr	r0, [r5, #0]
   15b56:	6883      	ldr	r3, [r0, #8]
   15b58:	b2e1      	uxtb	r1, r4
   15b5a:	69db      	ldr	r3, [r3, #28]
   15b5c:	4798      	blx	r3
}
   15b5e:	4620      	mov	r0, r4
   15b60:	bd38      	pop	{r3, r4, r5, pc}
   15b62:	bf00      	nop
   15b64:	20016040 	.word	0x20016040

00015b68 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   15b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   15b6c:	4c0e      	ldr	r4, [pc, #56]	; (15ba8 <onoff_start+0x40>)
{
   15b6e:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   15b70:	1b05      	subs	r5, r0, r4
   15b72:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   15b76:	250c      	movs	r5, #12
   15b78:	435d      	muls	r5, r3
   15b7a:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   15b7e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   15b80:	4420      	add	r0, r4
   15b82:	2140      	movs	r1, #64	; 0x40
   15b84:	f018 fff5 	bl	2eb72 <set_starting_state>
	if (err < 0) {
   15b88:	1e01      	subs	r1, r0, #0
   15b8a:	db08      	blt.n	15b9e <onoff_start+0x36>
	subdata->cb = cb;
   15b8c:	4b07      	ldr	r3, [pc, #28]	; (15bac <onoff_start+0x44>)
   15b8e:	442c      	add	r4, r5
	subdata->user_data = user_data;
   15b90:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   15b94:	4b06      	ldr	r3, [pc, #24]	; (15bb0 <onoff_start+0x48>)
   15b96:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   15b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   15b9c:	4718      	bx	r3
		notify(mgr, err);
   15b9e:	4638      	mov	r0, r7
   15ba0:	4633      	mov	r3, r6
}
   15ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   15ba6:	4718      	bx	r3
   15ba8:	20016058 	.word	0x20016058
   15bac:	0002ebd5 	.word	0x0002ebd5
   15bb0:	00036830 	.word	0x00036830

00015bb4 <get_status>:
{
   15bb4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   15bb6:	b2cc      	uxtb	r4, r1
   15bb8:	2c01      	cmp	r4, #1
{
   15bba:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   15bbc:	d909      	bls.n	15bd2 <get_status+0x1e>
   15bbe:	4909      	ldr	r1, [pc, #36]	; (15be4 <get_status+0x30>)
   15bc0:	4809      	ldr	r0, [pc, #36]	; (15be8 <get_status+0x34>)
   15bc2:	237e      	movs	r3, #126	; 0x7e
   15bc4:	4a09      	ldr	r2, [pc, #36]	; (15bec <get_status+0x38>)
   15bc6:	f018 f8df 	bl	2dd88 <printk>
   15bca:	217e      	movs	r1, #126	; 0x7e
   15bcc:	4807      	ldr	r0, [pc, #28]	; (15bec <get_status+0x38>)
   15bce:	f018 fbc1 	bl	2e354 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   15bd2:	210c      	movs	r1, #12
   15bd4:	692b      	ldr	r3, [r5, #16]
   15bd6:	fb04 3401 	mla	r4, r4, r1, r3
   15bda:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   15bdc:	f000 0007 	and.w	r0, r0, #7
   15be0:	bd38      	pop	{r3, r4, r5, pc}
   15be2:	bf00      	nop
   15be4:	00038811 	.word	0x00038811
   15be8:	00037f2c 	.word	0x00037f2c
   15bec:	000387d4 	.word	0x000387d4

00015bf0 <stop>:
{
   15bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15bf2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   15bf4:	2c01      	cmp	r4, #1
{
   15bf6:	4605      	mov	r5, r0
   15bf8:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   15bfa:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   15bfc:	d90b      	bls.n	15c16 <stop+0x26>
   15bfe:	4919      	ldr	r1, [pc, #100]	; (15c64 <stop+0x74>)
   15c00:	4819      	ldr	r0, [pc, #100]	; (15c68 <stop+0x78>)
   15c02:	f240 1353 	movw	r3, #339	; 0x153
   15c06:	4a19      	ldr	r2, [pc, #100]	; (15c6c <stop+0x7c>)
   15c08:	f018 f8be 	bl	2dd88 <printk>
   15c0c:	f240 1153 	movw	r1, #339	; 0x153
   15c10:	4816      	ldr	r0, [pc, #88]	; (15c6c <stop+0x7c>)
   15c12:	f018 fb9f 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   15c16:	f04f 0320 	mov.w	r3, #32
   15c1a:	f3ef 8211 	mrs	r2, BASEPRI
   15c1e:	f383 8811 	msr	BASEPRI, r3
   15c22:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15c26:	230c      	movs	r3, #12
   15c28:	fb03 7104 	mla	r1, r3, r4, r7
   15c2c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   15c2e:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   15c32:	d001      	beq.n	15c38 <stop+0x48>
   15c34:	428e      	cmp	r6, r1
   15c36:	d111      	bne.n	15c5c <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   15c38:	2101      	movs	r1, #1
	int err = 0;
   15c3a:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   15c3c:	fb03 7304 	mla	r3, r3, r4, r7
   15c40:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   15c42:	f382 8811 	msr	BASEPRI, r2
   15c46:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   15c4a:	b930      	cbnz	r0, 15c5a <stop+0x6a>
	get_sub_config(dev, type)->stop();
   15c4c:	230c      	movs	r3, #12
   15c4e:	6869      	ldr	r1, [r5, #4]
   15c50:	fb03 1404 	mla	r4, r3, r4, r1
   15c54:	6863      	ldr	r3, [r4, #4]
   15c56:	4798      	blx	r3
	return 0;
   15c58:	2000      	movs	r0, #0
}
   15c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   15c5c:	f04f 30ff 	mov.w	r0, #4294967295
   15c60:	e7ef      	b.n	15c42 <stop+0x52>
   15c62:	bf00      	nop
   15c64:	00038811 	.word	0x00038811
   15c68:	00037f2c 	.word	0x00037f2c
   15c6c:	000387d4 	.word	0x000387d4

00015c70 <onoff_stop>:
{
   15c70:	b570      	push	{r4, r5, r6, lr}
   15c72:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   15c74:	4906      	ldr	r1, [pc, #24]	; (15c90 <onoff_stop+0x20>)
{
   15c76:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   15c78:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15c7a:	1149      	asrs	r1, r1, #5
   15c7c:	2240      	movs	r2, #64	; 0x40
   15c7e:	4805      	ldr	r0, [pc, #20]	; (15c94 <onoff_stop+0x24>)
   15c80:	f7ff ffb6 	bl	15bf0 <stop>
	notify(mgr, res);
   15c84:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15c86:	4601      	mov	r1, r0
	notify(mgr, res);
   15c88:	4620      	mov	r0, r4
}
   15c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   15c8e:	4718      	bx	r3
   15c90:	20016058 	.word	0x20016058
   15c94:	20014c2c 	.word	0x20014c2c

00015c98 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   15c98:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15c9a:	2200      	movs	r2, #0
   15c9c:	2101      	movs	r1, #1
{
   15c9e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15ca0:	2005      	movs	r0, #5
   15ca2:	f001 f883 	bl	16dac <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   15ca6:	2005      	movs	r0, #5
   15ca8:	f001 f84e 	bl	16d48 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   15cac:	480f      	ldr	r0, [pc, #60]	; (15cec <clk_init+0x54>)
   15cae:	f00d fb89 	bl	233c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   15cb2:	4b0f      	ldr	r3, [pc, #60]	; (15cf0 <clk_init+0x58>)
   15cb4:	4298      	cmp	r0, r3
   15cb6:	d115      	bne.n	15ce4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   15cb8:	f00d fba8 	bl	2340c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   15cbc:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   15cbe:	490d      	ldr	r1, [pc, #52]	; (15cf4 <clk_init+0x5c>)
   15cc0:	4630      	mov	r0, r6
   15cc2:	f018 f8d7 	bl	2de74 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   15cc6:	2800      	cmp	r0, #0
   15cc8:	db0b      	blt.n	15ce2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15cca:	2501      	movs	r5, #1
   15ccc:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   15cce:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   15cd0:	4908      	ldr	r1, [pc, #32]	; (15cf4 <clk_init+0x5c>)
   15cd2:	f104 0020 	add.w	r0, r4, #32
   15cd6:	f018 f8cd 	bl	2de74 <onoff_manager_init>
		if (err < 0) {
   15cda:	2800      	cmp	r0, #0
   15cdc:	db01      	blt.n	15ce2 <clk_init+0x4a>
	}

	return 0;
   15cde:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15ce0:	6565      	str	r5, [r4, #84]	; 0x54
}
   15ce2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   15ce4:	f06f 0004 	mvn.w	r0, #4
   15ce8:	e7fb      	b.n	15ce2 <clk_init+0x4a>
   15cea:	bf00      	nop
   15cec:	00015d2d 	.word	0x00015d2d
   15cf0:	0bad0000 	.word	0x0bad0000
   15cf4:	00036848 	.word	0x00036848

00015cf8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   15cf8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   15cfa:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   15cfc:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   15cfe:	434b      	muls	r3, r1
   15d00:	4808      	ldr	r0, [pc, #32]	; (15d24 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   15d02:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   15d04:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   15d06:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   15d08:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   15d0c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   15d0e:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   15d10:	f018 ff4d 	bl	2ebae <set_on_state>
	if (callback) {
   15d14:	b12d      	cbz	r5, 15d22 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   15d16:	4632      	mov	r2, r6
   15d18:	462b      	mov	r3, r5
}
   15d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   15d1e:	4802      	ldr	r0, [pc, #8]	; (15d28 <clkstarted_handle.constprop.0+0x30>)
   15d20:	4718      	bx	r3
}
   15d22:	bd70      	pop	{r4, r5, r6, pc}
   15d24:	20016058 	.word	0x20016058
   15d28:	20014c2c 	.word	0x20014c2c

00015d2c <clock_event_handler>:
	switch (event) {
   15d2c:	2801      	cmp	r0, #1
{
   15d2e:	b508      	push	{r3, lr}
	switch (event) {
   15d30:	d006      	beq.n	15d40 <clock_event_handler+0x14>
   15d32:	2803      	cmp	r0, #3
   15d34:	d008      	beq.n	15d48 <clock_event_handler+0x1c>
   15d36:	b9a8      	cbnz	r0, 15d64 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   15d38:	4b10      	ldr	r3, [pc, #64]	; (15d7c <clock_event_handler+0x50>)
   15d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   15d3c:	075b      	lsls	r3, r3, #29
   15d3e:	d11b      	bne.n	15d78 <clock_event_handler+0x4c>
}
   15d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   15d44:	f7ff bfd8 	b.w	15cf8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   15d48:	490d      	ldr	r1, [pc, #52]	; (15d80 <clock_event_handler+0x54>)
   15d4a:	f240 2366 	movw	r3, #614	; 0x266
   15d4e:	4a0d      	ldr	r2, [pc, #52]	; (15d84 <clock_event_handler+0x58>)
   15d50:	480d      	ldr	r0, [pc, #52]	; (15d88 <clock_event_handler+0x5c>)
   15d52:	f018 f819 	bl	2dd88 <printk>
   15d56:	f240 2166 	movw	r1, #614	; 0x266
}
   15d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   15d5e:	4809      	ldr	r0, [pc, #36]	; (15d84 <clock_event_handler+0x58>)
   15d60:	f018 baf8 	b.w	2e354 <assert_post_action>
   15d64:	4906      	ldr	r1, [pc, #24]	; (15d80 <clock_event_handler+0x54>)
   15d66:	f240 236a 	movw	r3, #618	; 0x26a
   15d6a:	4a06      	ldr	r2, [pc, #24]	; (15d84 <clock_event_handler+0x58>)
   15d6c:	4806      	ldr	r0, [pc, #24]	; (15d88 <clock_event_handler+0x5c>)
   15d6e:	f018 f80b 	bl	2dd88 <printk>
   15d72:	f240 216a 	movw	r1, #618	; 0x26a
   15d76:	e7f0      	b.n	15d5a <clock_event_handler+0x2e>
}
   15d78:	bd08      	pop	{r3, pc}
   15d7a:	bf00      	nop
   15d7c:	20016058 	.word	0x20016058
   15d80:	0003e845 	.word	0x0003e845
   15d84:	000387d4 	.word	0x000387d4
   15d88:	00037f2c 	.word	0x00037f2c

00015d8c <generic_hfclk_start>:
{
   15d8c:	b508      	push	{r3, lr}
	__asm__ volatile(
   15d8e:	f04f 0320 	mov.w	r3, #32
   15d92:	f3ef 8111 	mrs	r1, BASEPRI
   15d96:	f383 8811 	msr	BASEPRI, r3
   15d9a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   15d9e:	4a11      	ldr	r2, [pc, #68]	; (15de4 <generic_hfclk_start+0x58>)
   15da0:	6813      	ldr	r3, [r2, #0]
   15da2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   15da6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   15daa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   15dac:	d00b      	beq.n	15dc6 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15dae:	4a0e      	ldr	r2, [pc, #56]	; (15de8 <generic_hfclk_start+0x5c>)
   15db0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15db4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   15db8:	f013 0301 	ands.w	r3, r3, #1
   15dbc:	d003      	beq.n	15dc6 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   15dbe:	480b      	ldr	r0, [pc, #44]	; (15dec <generic_hfclk_start+0x60>)
   15dc0:	f018 fef5 	bl	2ebae <set_on_state>
			already_started = true;
   15dc4:	2301      	movs	r3, #1
	__asm__ volatile(
   15dc6:	f381 8811 	msr	BASEPRI, r1
   15dca:	f3bf 8f6f 	isb	sy
	if (already_started) {
   15dce:	b123      	cbz	r3, 15dda <generic_hfclk_start+0x4e>
}
   15dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   15dd4:	2000      	movs	r0, #0
   15dd6:	f7ff bf8f 	b.w	15cf8 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   15dda:	2001      	movs	r0, #1
}
   15ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15de0:	f00d bb34 	b.w	2344c <nrfx_clock_start>
   15de4:	200160b0 	.word	0x200160b0
   15de8:	40005000 	.word	0x40005000
   15dec:	200160a0 	.word	0x200160a0

00015df0 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15df0:	4b07      	ldr	r3, [pc, #28]	; (15e10 <generic_hfclk_stop+0x20>)
   15df2:	e8d3 2fef 	ldaex	r2, [r3]
   15df6:	f022 0102 	bic.w	r1, r2, #2
   15dfa:	e8c3 1fe0 	stlex	r0, r1, [r3]
   15dfe:	2800      	cmp	r0, #0
   15e00:	d1f7      	bne.n	15df2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   15e02:	07d3      	lsls	r3, r2, #31
   15e04:	d402      	bmi.n	15e0c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   15e06:	2001      	movs	r0, #1
   15e08:	f00d bb76 	b.w	234f8 <nrfx_clock_stop>
}
   15e0c:	4770      	bx	lr
   15e0e:	bf00      	nop
   15e10:	200160b0 	.word	0x200160b0

00015e14 <api_blocking_start>:
{
   15e14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15e16:	2200      	movs	r2, #0
   15e18:	2301      	movs	r3, #1
   15e1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   15e1e:	ab04      	add	r3, sp, #16
   15e20:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15e24:	4a09      	ldr	r2, [pc, #36]	; (15e4c <api_blocking_start+0x38>)
   15e26:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15e28:	f8cd d000 	str.w	sp, [sp]
   15e2c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15e30:	f018 fee2 	bl	2ebf8 <api_start>
	if (err < 0) {
   15e34:	2800      	cmp	r0, #0
   15e36:	db05      	blt.n	15e44 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   15e38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   15e3c:	2300      	movs	r3, #0
   15e3e:	4668      	mov	r0, sp
   15e40:	f013 fdd2 	bl	299e8 <z_impl_k_sem_take>
}
   15e44:	b007      	add	sp, #28
   15e46:	f85d fb04 	ldr.w	pc, [sp], #4
   15e4a:	bf00      	nop
   15e4c:	0002ebf3 	.word	0x0002ebf3

00015e50 <z_nrf_clock_control_get_onoff>:
}
   15e50:	4b02      	ldr	r3, [pc, #8]	; (15e5c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   15e52:	b2c0      	uxtb	r0, r0
}
   15e54:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   15e58:	4770      	bx	lr
   15e5a:	bf00      	nop
   15e5c:	20016058 	.word	0x20016058

00015e60 <z_nrf_clock_control_lf_on>:
{
   15e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15e64:	2201      	movs	r2, #1
   15e66:	4606      	mov	r6, r0
   15e68:	4945      	ldr	r1, [pc, #276]	; (15f80 <z_nrf_clock_control_lf_on+0x120>)
   15e6a:	e8d1 3fef 	ldaex	r3, [r1]
   15e6e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   15e72:	2800      	cmp	r0, #0
   15e74:	d1f9      	bne.n	15e6a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   15e76:	b9a3      	cbnz	r3, 15ea2 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   15e78:	4942      	ldr	r1, [pc, #264]	; (15f84 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   15e7a:	4843      	ldr	r0, [pc, #268]	; (15f88 <z_nrf_clock_control_lf_on+0x128>)
   15e7c:	604b      	str	r3, [r1, #4]
   15e7e:	60cb      	str	r3, [r1, #12]
   15e80:	608a      	str	r2, [r1, #8]
   15e82:	f7fd fc5d 	bl	13740 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   15e86:	2800      	cmp	r0, #0
   15e88:	da0b      	bge.n	15ea2 <z_nrf_clock_control_lf_on+0x42>
   15e8a:	4940      	ldr	r1, [pc, #256]	; (15f8c <z_nrf_clock_control_lf_on+0x12c>)
   15e8c:	4840      	ldr	r0, [pc, #256]	; (15f90 <z_nrf_clock_control_lf_on+0x130>)
   15e8e:	f240 2326 	movw	r3, #550	; 0x226
   15e92:	4a40      	ldr	r2, [pc, #256]	; (15f94 <z_nrf_clock_control_lf_on+0x134>)
   15e94:	f017 ff78 	bl	2dd88 <printk>
   15e98:	f240 2126 	movw	r1, #550	; 0x226
   15e9c:	483d      	ldr	r0, [pc, #244]	; (15f94 <z_nrf_clock_control_lf_on+0x134>)
   15e9e:	f018 fa59 	bl	2e354 <assert_post_action>
	switch (start_mode) {
   15ea2:	b38e      	cbz	r6, 15f08 <z_nrf_clock_control_lf_on+0xa8>
   15ea4:	1e73      	subs	r3, r6, #1
   15ea6:	2b01      	cmp	r3, #1
   15ea8:	d855      	bhi.n	15f56 <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   15eaa:	2e01      	cmp	r6, #1
   15eac:	d106      	bne.n	15ebc <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15eae:	4b3a      	ldr	r3, [pc, #232]	; (15f98 <z_nrf_clock_control_lf_on+0x138>)
   15eb0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   15eb4:	f003 0303 	and.w	r3, r3, #3
   15eb8:	2b02      	cmp	r3, #2
   15eba:	d025      	beq.n	15f08 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15ebc:	f01f f9a9 	bl	35212 <k_is_in_isr>
   15ec0:	4604      	mov	r4, r0
   15ec2:	b918      	cbnz	r0, 15ecc <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   15ec4:	4b35      	ldr	r3, [pc, #212]	; (15f9c <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   15ec6:	781b      	ldrb	r3, [r3, #0]
   15ec8:	2b00      	cmp	r3, #0
   15eca:	d152      	bne.n	15f72 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   15ecc:	f04f 0320 	mov.w	r3, #32
   15ed0:	f3ef 8711 	mrs	r7, BASEPRI
   15ed4:	f383 8811 	msr	BASEPRI, r3
   15ed8:	f3bf 8f6f 	isb	sy
   15edc:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15ede:	4d2e      	ldr	r5, [pc, #184]	; (15f98 <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15ee0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 15fac <z_nrf_clock_control_lf_on+0x14c>
   15ee4:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15ee6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15eea:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   15eee:	03d2      	lsls	r2, r2, #15
   15ef0:	d50c      	bpl.n	15f0c <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   15ef2:	f003 0303 	and.w	r3, r3, #3
   15ef6:	2b02      	cmp	r3, #2
   15ef8:	d001      	beq.n	15efe <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   15efa:	2e01      	cmp	r6, #1
   15efc:	d106      	bne.n	15f0c <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   15efe:	b334      	cbz	r4, 15f4e <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   15f00:	f387 8811 	msr	BASEPRI, r7
   15f04:	f3bf 8f6f 	isb	sy
}
   15f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   15f0c:	b1d4      	cbz	r4, 15f44 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   15f0e:	4638      	mov	r0, r7
   15f10:	f001 f866 	bl	16fe0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   15f14:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   15f18:	b2db      	uxtb	r3, r3
   15f1a:	2b01      	cmp	r3, #1
   15f1c:	d1e3      	bne.n	15ee6 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15f1e:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   15f22:	2a00      	cmp	r2, #0
   15f24:	d0df      	beq.n	15ee6 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f26:	2200      	movs	r2, #0
   15f28:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   15f2c:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   15f30:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15f32:	2120      	movs	r1, #32
   15f34:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   15f38:	4a19      	ldr	r2, [pc, #100]	; (15fa0 <z_nrf_clock_control_lf_on+0x140>)
   15f3a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f3e:	4a19      	ldr	r2, [pc, #100]	; (15fa4 <z_nrf_clock_control_lf_on+0x144>)
   15f40:	6013      	str	r3, [r2, #0]
}
   15f42:	e7d0      	b.n	15ee6 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   15f44:	2100      	movs	r1, #0
   15f46:	2021      	movs	r0, #33	; 0x21
   15f48:	f015 fbca 	bl	2b6e0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15f4c:	e7e2      	b.n	15f14 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   15f4e:	2302      	movs	r3, #2
   15f50:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   15f54:	e7d8      	b.n	15f08 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   15f56:	f44f 730e 	mov.w	r3, #568	; 0x238
   15f5a:	4913      	ldr	r1, [pc, #76]	; (15fa8 <z_nrf_clock_control_lf_on+0x148>)
   15f5c:	480c      	ldr	r0, [pc, #48]	; (15f90 <z_nrf_clock_control_lf_on+0x130>)
   15f5e:	4a0d      	ldr	r2, [pc, #52]	; (15f94 <z_nrf_clock_control_lf_on+0x134>)
   15f60:	f017 ff12 	bl	2dd88 <printk>
}
   15f64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   15f68:	f44f 710e 	mov.w	r1, #568	; 0x238
   15f6c:	4809      	ldr	r0, [pc, #36]	; (15f94 <z_nrf_clock_control_lf_on+0x134>)
   15f6e:	f018 b9f1 	b.w	2e354 <assert_post_action>
    p_reg->INTENCLR = mask;
   15f72:	2202      	movs	r2, #2
   15f74:	4b08      	ldr	r3, [pc, #32]	; (15f98 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   15f76:	4607      	mov	r7, r0
   15f78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15f7c:	e7af      	b.n	15ede <z_nrf_clock_control_lf_on+0x7e>
   15f7e:	bf00      	nop
   15f80:	200160b4 	.word	0x200160b4
   15f84:	20016048 	.word	0x20016048
   15f88:	20016078 	.word	0x20016078
   15f8c:	00038835 	.word	0x00038835
   15f90:	00037f2c 	.word	0x00037f2c
   15f94:	000387d4 	.word	0x000387d4
   15f98:	40005000 	.word	0x40005000
   15f9c:	2001e74c 	.word	0x2001e74c
   15fa0:	e000e100 	.word	0xe000e100
   15fa4:	40005008 	.word	0x40005008
   15fa8:	0003e845 	.word	0x0003e845
   15fac:	40005104 	.word	0x40005104

00015fb0 <reset_rx>:
}

static void reset_rx(void)
{
	rx.type = H4_NONE;
	rx.remaining = 0U;
   15fb0:	2200      	movs	r2, #0
   15fb2:	4b02      	ldr	r3, [pc, #8]	; (15fbc <reset_rx+0xc>)
   15fb4:	841a      	strh	r2, [r3, #32]
	rx.have_hdr = false;
   15fb6:	625a      	str	r2, [r3, #36]	; 0x24
	rx.hdr_len = 0U;
	rx.discardable = false;
}
   15fb8:	4770      	bx	lr
   15fba:	bf00      	nop
   15fbc:	2001471c 	.word	0x2001471c

00015fc0 <h4_send>:
		}
	}
}

static int h4_send(struct net_buf *buf)
{
   15fc0:	4601      	mov	r1, r0
   15fc2:	b508      	push	{r3, lr}
	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	net_buf_put(&tx.fifo, buf);
   15fc4:	4805      	ldr	r0, [pc, #20]	; (15fdc <h4_send+0x1c>)
   15fc6:	f006 fea5 	bl	1cd14 <net_buf_put>
	uart_irq_tx_enable(h4_dev);
   15fca:	4b05      	ldr	r3, [pc, #20]	; (15fe0 <h4_send+0x20>)
   15fcc:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_tx_enable != NULL) {
   15fce:	6883      	ldr	r3, [r0, #8]
   15fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15fd2:	b103      	cbz	r3, 15fd6 <h4_send+0x16>
		api->irq_tx_enable(dev);
   15fd4:	4798      	blx	r3

	return 0;
}
   15fd6:	2000      	movs	r0, #0
   15fd8:	bd08      	pop	{r3, pc}
   15fda:	bf00      	nop
   15fdc:	20014750 	.word	0x20014750
   15fe0:	200160b8 	.word	0x200160b8

00015fe4 <get_rx>:
{
   15fe4:	4602      	mov	r2, r0
	switch (rx.type) {
   15fe6:	4809      	ldr	r0, [pc, #36]	; (1600c <get_rx+0x28>)
{
   15fe8:	460b      	mov	r3, r1
	switch (rx.type) {
   15fea:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
   15fee:	2902      	cmp	r1, #2
   15ff0:	d007      	beq.n	16002 <get_rx+0x1e>
   15ff2:	2904      	cmp	r1, #4
   15ff4:	d108      	bne.n	16008 <get_rx+0x24>
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
   15ff6:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
   15ffa:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   15ffe:	f001 bf97 	b.w	17f30 <bt_buf_get_evt>
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
   16002:	2003      	movs	r0, #3
   16004:	f001 bf3a 	b.w	17e7c <bt_buf_get_rx>
}
   16008:	2000      	movs	r0, #0
   1600a:	4770      	bx	lr
   1600c:	2001471c 	.word	0x2001471c

00016010 <copy_hdr>:
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
   16010:	4903      	ldr	r1, [pc, #12]	; (16020 <copy_hdr+0x10>)
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add_mem(struct net_buf *buf, const void *mem,
				    size_t len)
{
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16012:	3008      	adds	r0, #8
   16014:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   16018:	3128      	adds	r1, #40	; 0x28
   1601a:	f01b bb56 	b.w	316ca <net_buf_simple_add_mem>
   1601e:	bf00      	nop
   16020:	2001471c 	.word	0x2001471c

00016024 <bt_uart_init>:
	.open		= h4_open,
	.send		= h4_send,
};

static int bt_uart_init(const struct device *unused)
{
   16024:	b508      	push	{r3, lr}
   16026:	4807      	ldr	r0, [pc, #28]	; (16044 <bt_uart_init+0x20>)
   16028:	f012 fad6 	bl	285d8 <z_impl_device_get_binding>
	ARG_UNUSED(unused);

	h4_dev = device_get_binding(CONFIG_BT_UART_ON_DEV_NAME);
   1602c:	4b06      	ldr	r3, [pc, #24]	; (16048 <bt_uart_init+0x24>)
   1602e:	6018      	str	r0, [r3, #0]
	if (!h4_dev) {
   16030:	b120      	cbz	r0, 1603c <bt_uart_init+0x18>
		return -EINVAL;
	}

	bt_hci_driver_register(&drv);
   16032:	4806      	ldr	r0, [pc, #24]	; (1604c <bt_uart_init+0x28>)
   16034:	f003 fa0a 	bl	1944c <bt_hci_driver_register>

	return 0;
   16038:	2000      	movs	r0, #0
}
   1603a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1603c:	f06f 0015 	mvn.w	r0, #21
   16040:	e7fb      	b.n	1603a <bt_uart_init+0x16>
   16042:	bf00      	nop
   16044:	0003885e 	.word	0x0003885e
   16048:	200160b8 	.word	0x200160b8
   1604c:	00036854 	.word	0x00036854

00016050 <rx_thread>:
{
   16050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		uart_irq_rx_enable(h4_dev);
   16054:	4e24      	ldr	r6, [pc, #144]	; (160e8 <rx_thread+0x98>)
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   16056:	4d25      	ldr	r5, [pc, #148]	; (160ec <rx_thread+0x9c>)
   16058:	4637      	mov	r7, r6
   1605a:	4b25      	ldr	r3, [pc, #148]	; (160f0 <rx_thread+0xa0>)
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   1605c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 160fc <rx_thread+0xac>
   16060:	1aed      	subs	r5, r5, r3
   16062:	08ed      	lsrs	r5, r5, #3
		if (rx.have_hdr && !rx.buf) {
   16064:	4c23      	ldr	r4, [pc, #140]	; (160f4 <rx_thread+0xa4>)
   16066:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1606a:	b1cb      	cbz	r3, 160a0 <rx_thread+0x50>
   1606c:	6823      	ldr	r3, [r4, #0]
   1606e:	b9bb      	cbnz	r3, 160a0 <rx_thread+0x50>
			rx.buf = get_rx(K_FOREVER);
   16070:	f04f 31ff 	mov.w	r1, #4294967295
   16074:	f04f 30ff 	mov.w	r0, #4294967295
   16078:	f7ff ffb4 	bl	15fe4 <get_rx>
   1607c:	6020      	str	r0, [r4, #0]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1607e:	3008      	adds	r0, #8
			if (rx.remaining > net_buf_tailroom(rx.buf)) {
   16080:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   16084:	f01b fb19 	bl	316ba <net_buf_simple_tailroom>
   16088:	4581      	cmp	r9, r0
   1608a:	d928      	bls.n	160de <rx_thread+0x8e>
				BT_ERR("Not enough space in buffer");
   1608c:	01a9      	lsls	r1, r5, #6
   1608e:	481a      	ldr	r0, [pc, #104]	; (160f8 <rx_thread+0xa8>)
   16090:	f041 0101 	orr.w	r1, r1, #1
   16094:	f018 f9ac 	bl	2e3f0 <log_0>
				rx.discard = rx.remaining;
   16098:	8c23      	ldrh	r3, [r4, #32]
   1609a:	8463      	strh	r3, [r4, #34]	; 0x22
				reset_rx();
   1609c:	f7ff ff88 	bl	15fb0 <reset_rx>
		uart_irq_rx_enable(h4_dev);
   160a0:	6830      	ldr	r0, [r6, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   160a2:	f018 fdce 	bl	2ec42 <z_impl_uart_irq_rx_enable>
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   160a6:	f04f 32ff 	mov.w	r2, #4294967295
   160aa:	f04f 33ff 	mov.w	r3, #4294967295
   160ae:	4640      	mov	r0, r8
   160b0:	f006 fdd2 	bl	1cc58 <net_buf_get>
   160b4:	4604      	mov	r4, r0
			uart_irq_rx_enable(h4_dev);
   160b6:	6838      	ldr	r0, [r7, #0]
   160b8:	f018 fdc3 	bl	2ec42 <z_impl_uart_irq_rx_enable>
			bt_recv(buf);
   160bc:	4620      	mov	r0, r4
   160be:	f003 f903 	bl	192c8 <bt_recv>
	z_impl_k_yield();
   160c2:	f015 f9bd 	bl	2b440 <z_impl_k_yield>
			uart_irq_rx_disable(h4_dev);
   160c6:	6838      	ldr	r0, [r7, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
   160c8:	f018 fdc0 	bl	2ec4c <z_impl_uart_irq_rx_disable>
			buf = net_buf_get(&rx.fifo, K_NO_WAIT);
   160cc:	2200      	movs	r2, #0
   160ce:	2300      	movs	r3, #0
   160d0:	4640      	mov	r0, r8
   160d2:	f006 fdc1 	bl	1cc58 <net_buf_get>
		} while (buf);
   160d6:	4604      	mov	r4, r0
   160d8:	2800      	cmp	r0, #0
   160da:	d1ec      	bne.n	160b6 <rx_thread+0x66>
   160dc:	e7c2      	b.n	16064 <rx_thread+0x14>
				copy_hdr(rx.buf);
   160de:	6820      	ldr	r0, [r4, #0]
   160e0:	f7ff ff96 	bl	16010 <copy_hdr>
   160e4:	e7dc      	b.n	160a0 <rx_thread+0x50>
   160e6:	bf00      	nop
   160e8:	200160b8 	.word	0x200160b8
   160ec:	000364f0 	.word	0x000364f0
   160f0:	000364b0 	.word	0x000364b0
   160f4:	2001471c 	.word	0x2001471c
   160f8:	00038865 	.word	0x00038865
   160fc:	20014720 	.word	0x20014720

00016100 <bt_uart_isr>:
{
   16100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   16104:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 163ac <bt_uart_isr+0x2ac>
   16108:	4f9a      	ldr	r7, [pc, #616]	; (16374 <bt_uart_isr+0x274>)
   1610a:	4646      	mov	r6, r8
   1610c:	4b9a      	ldr	r3, [pc, #616]	; (16378 <bt_uart_isr+0x278>)
	if (!tx.buf) {
   1610e:	4d9b      	ldr	r5, [pc, #620]	; (1637c <bt_uart_isr+0x27c>)
   16110:	1aff      	subs	r7, r7, r3
{
   16112:	b08b      	sub	sp, #44	; 0x2c
   16114:	08ff      	lsrs	r7, r7, #3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   16116:	f8d8 0000 	ldr.w	r0, [r8]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   1611a:	6883      	ldr	r3, [r0, #8]
   1611c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1611e:	2b00      	cmp	r3, #0
   16120:	f040 819e 	bne.w	16460 <bt_uart_isr+0x360>
   16124:	6830      	ldr	r0, [r6, #0]
	if (api->irq_is_pending == NULL) {
   16126:	6883      	ldr	r3, [r0, #8]
   16128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1612a:	2b00      	cmp	r3, #0
   1612c:	f040 819f 	bne.w	1646e <bt_uart_isr+0x36e>
		if (uart_irq_tx_ready(h4_dev)) {
   16130:	6830      	ldr	r0, [r6, #0]
	if (api->irq_tx_ready != NULL) {
   16132:	6883      	ldr	r3, [r0, #8]
   16134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16136:	b353      	cbz	r3, 1618e <bt_uart_isr+0x8e>
		return api->irq_tx_ready(dev);
   16138:	4798      	blx	r3
   1613a:	b340      	cbz	r0, 1618e <bt_uart_isr+0x8e>
	if (!tx.buf) {
   1613c:	686b      	ldr	r3, [r5, #4]
   1613e:	b983      	cbnz	r3, 16162 <bt_uart_isr+0x62>
		tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   16140:	2200      	movs	r2, #0
   16142:	2300      	movs	r3, #0
   16144:	488e      	ldr	r0, [pc, #568]	; (16380 <bt_uart_isr+0x280>)
   16146:	f006 fd87 	bl	1cc58 <net_buf_get>
   1614a:	6068      	str	r0, [r5, #4]
		if (!tx.buf) {
   1614c:	b948      	cbnz	r0, 16162 <bt_uart_isr+0x62>
			BT_ERR("TX interrupt but no pending buffer!");
   1614e:	01b9      	lsls	r1, r7, #6
   16150:	488c      	ldr	r0, [pc, #560]	; (16384 <bt_uart_isr+0x284>)
   16152:	f041 0101 	orr.w	r1, r1, #1
   16156:	f018 f94b 	bl	2e3f0 <log_0>
		uart_irq_tx_disable(h4_dev);
   1615a:	6830      	ldr	r0, [r6, #0]
	z_impl_uart_irq_tx_disable(dev);
   1615c:	f018 fd6c 	bl	2ec38 <z_impl_uart_irq_tx_disable>
}
   16160:	e015      	b.n	1618e <bt_uart_isr+0x8e>
	if (!tx.type) {
   16162:	782b      	ldrb	r3, [r5, #0]
   16164:	2b00      	cmp	r3, #0
   16166:	d142      	bne.n	161ee <bt_uart_isr+0xee>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16168:	686b      	ldr	r3, [r5, #4]
   1616a:	7d1b      	ldrb	r3, [r3, #20]
		switch (bt_buf_get_type(tx.buf)) {
   1616c:	b323      	cbz	r3, 161b8 <bt_uart_isr+0xb8>
   1616e:	2b02      	cmp	r3, #2
   16170:	d124      	bne.n	161bc <bt_uart_isr+0xbc>
		bytes = uart_fifo_fill(h4_dev, &tx.type, 1);
   16172:	6830      	ldr	r0, [r6, #0]
			tx.type = H4_CMD;
   16174:	702b      	strb	r3, [r5, #0]
	if (api->fifo_fill != NULL) {
   16176:	6883      	ldr	r3, [r0, #8]
   16178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1617a:	2b00      	cmp	r3, #0
   1617c:	d132      	bne.n	161e4 <bt_uart_isr+0xe4>
			BT_WARN("Unable to send H:4 type");
   1617e:	01b9      	lsls	r1, r7, #6
   16180:	4881      	ldr	r0, [pc, #516]	; (16388 <bt_uart_isr+0x288>)
   16182:	f041 0102 	orr.w	r1, r1, #2
   16186:	f018 f933 	bl	2e3f0 <log_0>
			tx.type = H4_NONE;
   1618a:	2300      	movs	r3, #0
   1618c:	702b      	strb	r3, [r5, #0]
		if (uart_irq_rx_ready(h4_dev)) {
   1618e:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
   16190:	6883      	ldr	r3, [r0, #8]
   16192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   16194:	2b00      	cmp	r3, #0
   16196:	d13e      	bne.n	16216 <bt_uart_isr+0x116>
	if (rx.discard) {
   16198:	4c7c      	ldr	r4, [pc, #496]	; (1638c <bt_uart_isr+0x28c>)
   1619a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   1619c:	4621      	mov	r1, r4
   1619e:	2a00      	cmp	r2, #0
   161a0:	d03e      	beq.n	16220 <bt_uart_isr+0x120>
	return uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   161a2:	2a21      	cmp	r2, #33	; 0x21
   161a4:	bf28      	it	cs
   161a6:	2221      	movcs	r2, #33	; 0x21
   161a8:	6830      	ldr	r0, [r6, #0]
   161aa:	a901      	add	r1, sp, #4
   161ac:	f018 fd3e 	bl	2ec2c <uart_fifo_read>
		rx.discard -= h4_discard(h4_dev, rx.discard);
   161b0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   161b2:	1a1b      	subs	r3, r3, r0
   161b4:	8463      	strh	r3, [r4, #34]	; 0x22
		return;
   161b6:	e7ae      	b.n	16116 <bt_uart_isr+0x16>
			tx.type = H4_CMD;
   161b8:	2301      	movs	r3, #1
   161ba:	e7da      	b.n	16172 <bt_uart_isr+0x72>
			BT_ERR("Unknown buffer type");
   161bc:	01b9      	lsls	r1, r7, #6
   161be:	4874      	ldr	r0, [pc, #464]	; (16390 <bt_uart_isr+0x290>)
   161c0:	f041 0101 	orr.w	r1, r1, #1
   161c4:	f018 f914 	bl	2e3f0 <log_0>
	tx.type = H4_NONE;
   161c8:	2300      	movs	r3, #0
	net_buf_unref(tx.buf);
   161ca:	6868      	ldr	r0, [r5, #4]
	tx.type = H4_NONE;
   161cc:	702b      	strb	r3, [r5, #0]
	net_buf_unref(tx.buf);
   161ce:	f006 fdd5 	bl	1cd7c <net_buf_unref>
	tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   161d2:	2200      	movs	r2, #0
   161d4:	2300      	movs	r3, #0
   161d6:	486a      	ldr	r0, [pc, #424]	; (16380 <bt_uart_isr+0x280>)
   161d8:	f006 fd3e 	bl	1cc58 <net_buf_get>
   161dc:	6068      	str	r0, [r5, #4]
	if (!tx.buf) {
   161de:	2800      	cmp	r0, #0
   161e0:	d1d5      	bne.n	1618e <bt_uart_isr+0x8e>
   161e2:	e7ba      	b.n	1615a <bt_uart_isr+0x5a>
		return api->fifo_fill(dev, tx_data, size);
   161e4:	2201      	movs	r2, #1
   161e6:	4629      	mov	r1, r5
   161e8:	4798      	blx	r3
		if (bytes != 1) {
   161ea:	2801      	cmp	r0, #1
   161ec:	d1c7      	bne.n	1617e <bt_uart_isr+0x7e>
	bytes = uart_fifo_fill(h4_dev, tx.buf->data, tx.buf->len);
   161ee:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_fill != NULL) {
   161f0:	6883      	ldr	r3, [r0, #8]
   161f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   161f4:	b16b      	cbz	r3, 16212 <bt_uart_isr+0x112>
   161f6:	6869      	ldr	r1, [r5, #4]
		return api->fifo_fill(dev, tx_data, size);
   161f8:	898a      	ldrh	r2, [r1, #12]
   161fa:	6889      	ldr	r1, [r1, #8]
   161fc:	4798      	blx	r3
   161fe:	4601      	mov	r1, r0
	return net_buf_simple_pull(&buf->b, len);
   16200:	6868      	ldr	r0, [r5, #4]
   16202:	3008      	adds	r0, #8
   16204:	f006 fea8 	bl	1cf58 <net_buf_simple_pull>
	if (tx.buf->len) {
   16208:	686b      	ldr	r3, [r5, #4]
   1620a:	899b      	ldrh	r3, [r3, #12]
   1620c:	2b00      	cmp	r3, #0
   1620e:	d0db      	beq.n	161c8 <bt_uart_isr+0xc8>
   16210:	e7bd      	b.n	1618e <bt_uart_isr+0x8e>
	return 0;
   16212:	4619      	mov	r1, r3
   16214:	e7f4      	b.n	16200 <bt_uart_isr+0x100>
	return api->irq_rx_ready(dev);
   16216:	4798      	blx	r3
		if (uart_irq_rx_ready(h4_dev)) {
   16218:	2800      	cmp	r0, #0
   1621a:	f43f af7c 	beq.w	16116 <bt_uart_isr+0x16>
   1621e:	e7bb      	b.n	16198 <bt_uart_isr+0x98>
	if (rx.have_hdr) {
   16220:	f894 9024 	ldrb.w	r9, [r4, #36]	; 0x24
   16224:	f1b9 0f00 	cmp.w	r9, #0
   16228:	d078      	beq.n	1631c <bt_uart_isr+0x21c>
	if (!rx.buf) {
   1622a:	6823      	ldr	r3, [r4, #0]
   1622c:	bb7b      	cbnz	r3, 1628e <bt_uart_isr+0x18e>
		rx.buf = get_rx(K_NO_WAIT);
   1622e:	2000      	movs	r0, #0
   16230:	2100      	movs	r1, #0
   16232:	f7ff fed7 	bl	15fe4 <get_rx>
   16236:	6020      	str	r0, [r4, #0]
		if (!rx.buf) {
   16238:	b9c0      	cbnz	r0, 1626c <bt_uart_isr+0x16c>
			if (rx.discardable) {
   1623a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1623e:	01ba      	lsls	r2, r7, #6
   16240:	b15b      	cbz	r3, 1625a <bt_uart_isr+0x15a>
				BT_WARN("Discarding event 0x%02x", rx.evt.evt);
   16242:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   16246:	4853      	ldr	r0, [pc, #332]	; (16394 <bt_uart_isr+0x294>)
   16248:	f042 0202 	orr.w	r2, r2, #2
   1624c:	f018 f8dd 	bl	2e40a <log_1>
			rx.discard = rx.remaining;
   16250:	8c23      	ldrh	r3, [r4, #32]
   16252:	8463      	strh	r3, [r4, #34]	; 0x22
			reset_rx();
   16254:	f7ff feac 	bl	15fb0 <reset_rx>
   16258:	e75d      	b.n	16116 <bt_uart_isr+0x16>
			BT_WARN("Failed to allocate, deferring to rx_thread");
   1625a:	484f      	ldr	r0, [pc, #316]	; (16398 <bt_uart_isr+0x298>)
   1625c:	f042 0102 	orr.w	r1, r2, #2
   16260:	f018 f8c6 	bl	2e3f0 <log_0>
			uart_irq_rx_disable(h4_dev);
   16264:	6830      	ldr	r0, [r6, #0]
	z_impl_uart_irq_rx_disable(dev);
   16266:	f018 fcf1 	bl	2ec4c <z_impl_uart_irq_rx_disable>
}
   1626a:	e754      	b.n	16116 <bt_uart_isr+0x16>
	return net_buf_simple_tailroom(&buf->b);
   1626c:	3008      	adds	r0, #8
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1626e:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   16272:	f01b fa22 	bl	316ba <net_buf_simple_tailroom>
   16276:	4581      	cmp	r9, r0
   16278:	d906      	bls.n	16288 <bt_uart_isr+0x188>
			BT_ERR("Not enough space in buffer");
   1627a:	01b9      	lsls	r1, r7, #6
   1627c:	4847      	ldr	r0, [pc, #284]	; (1639c <bt_uart_isr+0x29c>)
   1627e:	f041 0101 	orr.w	r1, r1, #1
   16282:	f018 f8b5 	bl	2e3f0 <log_0>
   16286:	e7e3      	b.n	16250 <bt_uart_isr+0x150>
		copy_hdr(rx.buf);
   16288:	6820      	ldr	r0, [r4, #0]
   1628a:	f7ff fec1 	bl	16010 <copy_hdr>
	read = uart_fifo_read(h4_dev, net_buf_tail(rx.buf), rx.remaining);
   1628e:	6823      	ldr	r3, [r4, #0]
   16290:	8c22      	ldrh	r2, [r4, #32]
	return buf->data + buf->len;
   16292:	8999      	ldrh	r1, [r3, #12]
   16294:	689b      	ldr	r3, [r3, #8]
   16296:	6830      	ldr	r0, [r6, #0]
   16298:	4419      	add	r1, r3
   1629a:	f018 fcc7 	bl	2ec2c <uart_fifo_read>
   1629e:	4681      	mov	r9, r0
	return net_buf_simple_add(&buf->b, len);
   162a0:	6820      	ldr	r0, [r4, #0]
   162a2:	4649      	mov	r1, r9
   162a4:	3008      	adds	r0, #8
   162a6:	f006 fe99 	bl	1cfdc <net_buf_simple_add>
	rx.remaining -= read;
   162aa:	8c23      	ldrh	r3, [r4, #32]
   162ac:	eba3 0009 	sub.w	r0, r3, r9
   162b0:	b280      	uxth	r0, r0
   162b2:	8420      	strh	r0, [r4, #32]
	if (rx.remaining) {
   162b4:	2800      	cmp	r0, #0
   162b6:	f47f af2e 	bne.w	16116 <bt_uart_isr+0x16>
	if (rx.type == H4_EVT) {
   162ba:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	buf = rx.buf;
   162be:	f8d4 9000 	ldr.w	r9, [r4]
	if (rx.type == H4_EVT) {
   162c2:	2b04      	cmp	r3, #4
	rx.buf = NULL;
   162c4:	6020      	str	r0, [r4, #0]
	if (rx.type == H4_EVT) {
   162c6:	d124      	bne.n	16312 <bt_uart_isr+0x212>
		evt_flags = bt_hci_evt_get_flags(rx.evt.evt);
   162c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   162cc:	2b0f      	cmp	r3, #15
   162ce:	d817      	bhi.n	16300 <bt_uart_isr+0x200>
   162d0:	2b0d      	cmp	r3, #13
   162d2:	d81c      	bhi.n	1630e <bt_uart_isr+0x20e>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   162d4:	2b05      	cmp	r3, #5
   162d6:	bf14      	ite	ne
   162d8:	2402      	movne	r4, #2
   162da:	2403      	moveq	r4, #3
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   162dc:	2301      	movs	r3, #1
   162de:	f889 3014 	strb.w	r3, [r9, #20]
	reset_rx();
   162e2:	f7ff fe65 	bl	15fb0 <reset_rx>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   162e6:	07e2      	lsls	r2, r4, #31
   162e8:	d502      	bpl.n	162f0 <bt_uart_isr+0x1f0>
		bt_recv_prio(buf);
   162ea:	4648      	mov	r0, r9
   162ec:	f003 f890 	bl	19410 <bt_recv_prio>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   162f0:	07a3      	lsls	r3, r4, #30
   162f2:	f57f af10 	bpl.w	16116 <bt_uart_isr+0x16>
		net_buf_put(&rx.fifo, buf);
   162f6:	4649      	mov	r1, r9
   162f8:	4829      	ldr	r0, [pc, #164]	; (163a0 <bt_uart_isr+0x2a0>)
   162fa:	f006 fd0b 	bl	1cd14 <net_buf_put>
   162fe:	e70a      	b.n	16116 <bt_uart_isr+0x16>
	switch (evt) {
   16300:	2b13      	cmp	r3, #19
   16302:	d004      	beq.n	1630e <bt_uart_isr+0x20e>
   16304:	2b1a      	cmp	r3, #26
   16306:	bf14      	ite	ne
   16308:	2402      	movne	r4, #2
   1630a:	2401      	moveq	r4, #1
   1630c:	e7e6      	b.n	162dc <bt_uart_isr+0x1dc>
   1630e:	2401      	movs	r4, #1
   16310:	e7e4      	b.n	162dc <bt_uart_isr+0x1dc>
   16312:	2303      	movs	r3, #3
		evt_flags = BT_HCI_EVT_FLAG_RECV;
   16314:	2402      	movs	r4, #2
   16316:	f889 3014 	strb.w	r3, [r9, #20]
}
   1631a:	e7e2      	b.n	162e2 <bt_uart_isr+0x1e2>
	switch (rx.type) {
   1631c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   16320:	2b02      	cmp	r3, #2
   16322:	f000 808a 	beq.w	1643a <bt_uart_isr+0x33a>
   16326:	2b04      	cmp	r3, #4
   16328:	d042      	beq.n	163b0 <bt_uart_isr+0x2b0>
	if (uart_fifo_read(h4_dev, &rx.type, 1) != 1) {
   1632a:	2201      	movs	r2, #1
   1632c:	6830      	ldr	r0, [r6, #0]
   1632e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   16332:	f018 fc7b 	bl	2ec2c <uart_fifo_read>
   16336:	2801      	cmp	r0, #1
   16338:	d008      	beq.n	1634c <bt_uart_isr+0x24c>
		BT_WARN("Unable to read H:4 packet type");
   1633a:	01b9      	lsls	r1, r7, #6
   1633c:	4819      	ldr	r0, [pc, #100]	; (163a4 <bt_uart_isr+0x2a4>)
   1633e:	f041 0102 	orr.w	r1, r1, #2
   16342:	f018 f855 	bl	2e3f0 <log_0>
		rx.type = H4_NONE;
   16346:	f884 9027 	strb.w	r9, [r4, #39]	; 0x27
   1634a:	e6e4      	b.n	16116 <bt_uart_isr+0x16>
	switch (rx.type) {
   1634c:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   16350:	2902      	cmp	r1, #2
   16352:	d006      	beq.n	16362 <bt_uart_isr+0x262>
   16354:	2904      	cmp	r1, #4
   16356:	d106      	bne.n	16366 <bt_uart_isr+0x266>
		rx.remaining = sizeof(rx.evt);
   16358:	2302      	movs	r3, #2
		rx.remaining = sizeof(rx.acl);
   1635a:	8423      	strh	r3, [r4, #32]
		rx.hdr_len = rx.remaining;
   1635c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		break;
   16360:	e6d9      	b.n	16116 <bt_uart_isr+0x16>
		rx.remaining = sizeof(rx.acl);
   16362:	2304      	movs	r3, #4
   16364:	e7f9      	b.n	1635a <bt_uart_isr+0x25a>
		BT_ERR("Unknown H:4 type 0x%02x", rx.type);
   16366:	01ba      	lsls	r2, r7, #6
   16368:	480f      	ldr	r0, [pc, #60]	; (163a8 <bt_uart_isr+0x2a8>)
   1636a:	f042 0201 	orr.w	r2, r2, #1
   1636e:	f018 f84c 	bl	2e40a <log_1>
   16372:	e7e8      	b.n	16346 <bt_uart_isr+0x246>
   16374:	000364f0 	.word	0x000364f0
   16378:	000364b0 	.word	0x000364b0
   1637c:	20014748 	.word	0x20014748
   16380:	20014750 	.word	0x20014750
   16384:	00038880 	.word	0x00038880
   16388:	000388b8 	.word	0x000388b8
   1638c:	2001471c 	.word	0x2001471c
   16390:	000388a4 	.word	0x000388a4
   16394:	000388d0 	.word	0x000388d0
   16398:	000388e8 	.word	0x000388e8
   1639c:	00038865 	.word	0x00038865
   163a0:	20014720 	.word	0x20014720
   163a4:	00038913 	.word	0x00038913
   163a8:	00038932 	.word	0x00038932
   163ac:	200160b8 	.word	0x200160b8
	int to_read = rx.hdr_len - rx.remaining;
   163b0:	8c22      	ldrh	r2, [r4, #32]
   163b2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   163b6:	3128      	adds	r1, #40	; 0x28
	int to_read = rx.hdr_len - rx.remaining;
   163b8:	1a9b      	subs	r3, r3, r2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   163ba:	4419      	add	r1, r3
   163bc:	6830      	ldr	r0, [r6, #0]
   163be:	f018 fc35 	bl	2ec2c <uart_fifo_read>
   163c2:	8c23      	ldrh	r3, [r4, #32]
   163c4:	1a18      	subs	r0, r3, r0
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   163c6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   163ca:	b280      	uxth	r0, r0
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   163cc:	2b02      	cmp	r3, #2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   163ce:	8420      	strh	r0, [r4, #32]
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   163d0:	d10a      	bne.n	163e8 <bt_uart_isr+0x2e8>
   163d2:	2801      	cmp	r0, #1
   163d4:	d808      	bhi.n	163e8 <bt_uart_isr+0x2e8>
		switch (rx.evt.evt) {
   163d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   163da:	2b3e      	cmp	r3, #62	; 0x3e
			rx.hdr_len++;
   163dc:	bf01      	itttt	eq
   163de:	2303      	moveq	r3, #3
			rx.remaining++;
   163e0:	3001      	addeq	r0, #1
   163e2:	8420      	strheq	r0, [r4, #32]
			rx.hdr_len++;
   163e4:	f884 3026 	strbeq.w	r3, [r4, #38]	; 0x26
	if (!rx.remaining) {
   163e8:	8c23      	ldrh	r3, [r4, #32]
   163ea:	bb9b      	cbnz	r3, 16454 <bt_uart_isr+0x354>
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
   163ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   163f0:	2b3e      	cmp	r3, #62	; 0x3e
   163f2:	d108      	bne.n	16406 <bt_uart_isr+0x306>
		    (rx.hdr[sizeof(*hdr)] == BT_HCI_EVT_LE_ADVERTISING_REPORT ||
   163f4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
   163f8:	2b02      	cmp	r3, #2
   163fa:	d001      	beq.n	16400 <bt_uart_isr+0x300>
		    (rx.hdr[sizeof(*hdr)] == BT_HCI_EVT_LE_ADVERTISING_REPORT ||
   163fc:	2b0d      	cmp	r3, #13
   163fe:	d102      	bne.n	16406 <bt_uart_isr+0x306>
			rx.discardable = true;
   16400:	2301      	movs	r3, #1
   16402:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		rx.remaining = hdr->len - (rx.hdr_len - sizeof(*hdr));
   16406:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1640a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1640e:	3302      	adds	r3, #2
   16410:	1a9b      	subs	r3, r3, r2
		rx.remaining = sys_le16_to_cpu(hdr->len);
   16412:	8423      	strh	r3, [r4, #32]
		rx.have_hdr = true;
   16414:	2301      	movs	r3, #1
   16416:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (rx.have_hdr && rx.buf) {
   1641a:	6820      	ldr	r0, [r4, #0]
   1641c:	2800      	cmp	r0, #0
   1641e:	f43f ae7a 	beq.w	16116 <bt_uart_isr+0x16>
	return net_buf_simple_tailroom(&buf->b);
   16422:	3008      	adds	r0, #8
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   16424:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   16428:	f01b f947 	bl	316ba <net_buf_simple_tailroom>
   1642c:	4581      	cmp	r9, r0
   1642e:	f63f af24 	bhi.w	1627a <bt_uart_isr+0x17a>
			copy_hdr(rx.buf);
   16432:	6820      	ldr	r0, [r4, #0]
   16434:	f7ff fdec 	bl	16010 <copy_hdr>
   16438:	e66d      	b.n	16116 <bt_uart_isr+0x16>
	int to_read = sizeof(*hdr) - rx.remaining;
   1643a:	8c22      	ldrh	r2, [r4, #32]
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   1643c:	6830      	ldr	r0, [r6, #0]
	int to_read = sizeof(*hdr) - rx.remaining;
   1643e:	1aa1      	subs	r1, r4, r2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   16440:	312c      	adds	r1, #44	; 0x2c
   16442:	f018 fbf3 	bl	2ec2c <uart_fifo_read>
   16446:	8c23      	ldrh	r3, [r4, #32]
   16448:	1a18      	subs	r0, r3, r0
   1644a:	b280      	uxth	r0, r0
   1644c:	8420      	strh	r0, [r4, #32]
	if (!rx.remaining) {
   1644e:	b908      	cbnz	r0, 16454 <bt_uart_isr+0x354>
		rx.remaining = sys_le16_to_cpu(hdr->len);
   16450:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   16452:	e7de      	b.n	16412 <bt_uart_isr+0x312>
	if (rx.have_hdr && rx.buf) {
   16454:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   16458:	2b00      	cmp	r3, #0
   1645a:	f43f ae5c 	beq.w	16116 <bt_uart_isr+0x16>
   1645e:	e7dc      	b.n	1641a <bt_uart_isr+0x31a>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   16460:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   16462:	2800      	cmp	r0, #0
   16464:	f47f ae5e 	bne.w	16124 <bt_uart_isr+0x24>
}
   16468:	b00b      	add	sp, #44	; 0x2c
   1646a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return api->irq_is_pending(dev);
   1646e:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   16470:	2800      	cmp	r0, #0
   16472:	f47f ae5d 	bne.w	16130 <bt_uart_isr+0x30>
   16476:	e7f7      	b.n	16468 <bt_uart_isr+0x368>

00016478 <h4_open>:
{
   16478:	b510      	push	{r4, lr}
	uart_irq_rx_disable(h4_dev);
   1647a:	4c18      	ldr	r4, [pc, #96]	; (164dc <h4_open+0x64>)
{
   1647c:	b088      	sub	sp, #32
	uart_irq_rx_disable(h4_dev);
   1647e:	6820      	ldr	r0, [r4, #0]
	z_impl_uart_irq_rx_disable(dev);
   16480:	f018 fbe4 	bl	2ec4c <z_impl_uart_irq_rx_disable>
	uart_irq_tx_disable(h4_dev);
   16484:	6820      	ldr	r0, [r4, #0]
	z_impl_uart_irq_tx_disable(dev);
   16486:	f018 fbd7 	bl	2ec38 <z_impl_uart_irq_tx_disable>
	ret = bt_hci_transport_setup(h4_dev);
   1648a:	6820      	ldr	r0, [r4, #0]
   1648c:	f001 fbf8 	bl	17c80 <bt_hci_transport_setup>
	if (ret < 0) {
   16490:	2800      	cmp	r0, #0
   16492:	db20      	blt.n	164d6 <h4_open+0x5e>
	uart_irq_callback_set(h4_dev, bt_uart_isr);
   16494:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   16496:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   16498:	b123      	cbz	r3, 164a4 <h4_open+0x2c>
   1649a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1649c:	b113      	cbz	r3, 164a4 <h4_open+0x2c>
		api->irq_callback_set(dev, cb, user_data);
   1649e:	2200      	movs	r2, #0
   164a0:	490f      	ldr	r1, [pc, #60]	; (164e0 <h4_open+0x68>)
   164a2:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   164a4:	2200      	movs	r2, #0
   164a6:	2300      	movs	r3, #0
   164a8:	2400      	movs	r4, #0
   164aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   164ae:	f06f 0307 	mvn.w	r3, #7
   164b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   164b6:	e9cd 3403 	strd	r3, r4, [sp, #12]
   164ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
   164be:	4b09      	ldr	r3, [pc, #36]	; (164e4 <h4_open+0x6c>)
   164c0:	4909      	ldr	r1, [pc, #36]	; (164e8 <h4_open+0x70>)
   164c2:	9400      	str	r4, [sp, #0]
   164c4:	4809      	ldr	r0, [pc, #36]	; (164ec <h4_open+0x74>)
   164c6:	f012 fc77 	bl	28db8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   164ca:	4909      	ldr	r1, [pc, #36]	; (164f0 <h4_open+0x78>)
   164cc:	f01e fea7 	bl	3521e <z_impl_k_thread_name_set>
	return 0;
   164d0:	4620      	mov	r0, r4
}
   164d2:	b008      	add	sp, #32
   164d4:	bd10      	pop	{r4, pc}
		return -EIO;
   164d6:	f06f 0004 	mvn.w	r0, #4
   164da:	e7fa      	b.n	164d2 <h4_open+0x5a>
   164dc:	200160b8 	.word	0x200160b8
   164e0:	00016101 	.word	0x00016101
   164e4:	00016051 	.word	0x00016051
   164e8:	20020a60 	.word	0x20020a60
   164ec:	20015320 	.word	0x20015320
   164f0:	0003894a 	.word	0x0003894a

000164f4 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   164f4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   164f6:	4c06      	ldr	r4, [pc, #24]	; (16510 <sys_clock_isr+0x1c>)
   164f8:	4906      	ldr	r1, [pc, #24]	; (16514 <sys_clock_isr+0x20>)
   164fa:	4622      	mov	r2, r4
   164fc:	4806      	ldr	r0, [pc, #24]	; (16518 <sys_clock_isr+0x24>)
   164fe:	2317      	movs	r3, #23
   16500:	f017 fc42 	bl	2dd88 <printk>
   16504:	4620      	mov	r0, r4
}
   16506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1650a:	2117      	movs	r1, #23
   1650c:	f017 bf22 	b.w	2e354 <assert_post_action>
   16510:	00038965 	.word	0x00038965
   16514:	0003e845 	.word	0x0003e845
   16518:	00037f2c 	.word	0x00037f2c

0001651c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   1651c:	4a04      	ldr	r2, [pc, #16]	; (16530 <sys_clock_timeout_handler+0x14>)
   1651e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   16520:	1ac8      	subs	r0, r1, r3
   16522:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   16526:	4403      	add	r3, r0
   16528:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1652a:	f015 bc69 	b.w	2be00 <sys_clock_announce>
   1652e:	bf00      	nop
   16530:	200160cc 	.word	0x200160cc

00016534 <set_absolute_alarm>:
{
   16534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16538:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1653c:	f04f 0900 	mov.w	r9, #0
   16540:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   16542:	f100 0450 	add.w	r4, r0, #80	; 0x50
   16546:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   1654a:	00a4      	lsls	r4, r4, #2
   1654c:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   16550:	b2a4      	uxth	r4, r4
   16552:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   16556:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1655a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 165c8 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1655e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16562:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16566:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   16568:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1656c:	eba3 030a 	sub.w	r3, r3, sl
   16570:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16574:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   16578:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   1657a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   1657e:	d102      	bne.n	16586 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   16580:	2013      	movs	r0, #19
   16582:	f01e ff26 	bl	353d2 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   16586:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   1658a:	1aab      	subs	r3, r5, r2
   1658c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   16590:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   16594:	bf88      	it	hi
   16596:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16598:	f8c4 9000 	str.w	r9, [r4]
   1659c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1659e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   165a2:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   165a6:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   165aa:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   165ae:	459a      	cmp	sl, r3
   165b0:	d006      	beq.n	165c0 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   165b2:	1aeb      	subs	r3, r5, r3
   165b4:	3b02      	subs	r3, #2
   165b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   165ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   165be:	d801      	bhi.n	165c4 <set_absolute_alarm+0x90>
}
   165c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   165c4:	462b      	mov	r3, r5
   165c6:	e7cf      	b.n	16568 <set_absolute_alarm+0x34>
   165c8:	40015000 	.word	0x40015000

000165cc <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   165cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   165ce:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   165d0:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   165d2:	4e0f      	ldr	r6, [pc, #60]	; (16610 <rtc_nrf_isr+0x44>)
   165d4:	4b0f      	ldr	r3, [pc, #60]	; (16614 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   165d6:	4a10      	ldr	r2, [pc, #64]	; (16618 <rtc_nrf_isr+0x4c>)
   165d8:	4618      	mov	r0, r3
   165da:	681d      	ldr	r5, [r3, #0]
   165dc:	b104      	cbz	r4, 165e0 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   165de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   165e0:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   165e4:	03c9      	lsls	r1, r1, #15
   165e6:	d5fa      	bpl.n	165de <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   165e8:	6831      	ldr	r1, [r6, #0]
   165ea:	2900      	cmp	r1, #0
   165ec:	d0f7      	beq.n	165de <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   165ee:	6034      	str	r4, [r6, #0]
   165f0:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   165f2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   165f6:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   165fa:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   165fc:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   16600:	b125      	cbz	r5, 1660c <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   16602:	2000      	movs	r0, #0
   16604:	685a      	ldr	r2, [r3, #4]
   16606:	601f      	str	r7, [r3, #0]
   16608:	47a8      	blx	r5
   1660a:	e7e3      	b.n	165d4 <rtc_nrf_isr+0x8>
   1660c:	6005      	str	r5, [r0, #0]
}
   1660e:	e7e6      	b.n	165de <rtc_nrf_isr+0x12>
   16610:	40015140 	.word	0x40015140
   16614:	200160c0 	.word	0x200160c0
   16618:	40015000 	.word	0x40015000

0001661c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   1661c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   1661e:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   16620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16624:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   16628:	4d0d      	ldr	r5, [pc, #52]	; (16660 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1662a:	2101      	movs	r1, #1
   1662c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   16630:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   16634:	4b0b      	ldr	r3, [pc, #44]	; (16664 <sys_clock_driver_init+0x48>)
   16636:	2015      	movs	r0, #21
   16638:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1663c:	4622      	mov	r2, r4
   1663e:	f000 fbb5 	bl	16dac <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   16642:	2015      	movs	r0, #21
   16644:	f000 fb80 	bl	16d48 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   16648:	2301      	movs	r3, #1
   1664a:	4a07      	ldr	r2, [pc, #28]	; (16668 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   1664c:	2002      	movs	r0, #2
   1664e:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   16650:	4a06      	ldr	r2, [pc, #24]	; (1666c <sys_clock_driver_init+0x50>)
   16652:	602b      	str	r3, [r5, #0]
   16654:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   16656:	f7ff fc03 	bl	15e60 <z_nrf_clock_control_lf_on>

	return 0;
}
   1665a:	4620      	mov	r0, r4
   1665c:	bd38      	pop	{r3, r4, r5, pc}
   1665e:	bf00      	nop
   16660:	40015000 	.word	0x40015000
   16664:	e000e100 	.word	0xe000e100
   16668:	40015008 	.word	0x40015008
   1666c:	200160c8 	.word	0x200160c8

00016670 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   16670:	4b13      	ldr	r3, [pc, #76]	; (166c0 <sys_clock_set_timeout+0x50>)
   16672:	f1b0 3fff 	cmp.w	r0, #4294967295
   16676:	bf08      	it	eq
   16678:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1667a:	3801      	subs	r0, #1
   1667c:	2800      	cmp	r0, #0
   1667e:	dd1c      	ble.n	166ba <sys_clock_set_timeout+0x4a>
   16680:	4298      	cmp	r0, r3
   16682:	bfa8      	it	ge
   16684:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   16686:	4b0f      	ldr	r3, [pc, #60]	; (166c4 <sys_clock_set_timeout+0x54>)
   16688:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   1668c:	4b0e      	ldr	r3, [pc, #56]	; (166c8 <sys_clock_set_timeout+0x58>)
   1668e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   16690:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   16692:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   16696:	bf18      	it	ne
   16698:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   1669a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1669e:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   166a0:	4a0a      	ldr	r2, [pc, #40]	; (166cc <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   166a2:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   166a4:	480a      	ldr	r0, [pc, #40]	; (166d0 <sys_clock_set_timeout+0x60>)
   166a6:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   166a8:	2000      	movs	r0, #0
   166aa:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   166ac:	4a04      	ldr	r2, [pc, #16]	; (166c0 <sys_clock_set_timeout+0x50>)
   166ae:	4293      	cmp	r3, r2
   166b0:	bf94      	ite	ls
   166b2:	18c9      	addls	r1, r1, r3
   166b4:	1889      	addhi	r1, r1, r2
   166b6:	f7ff bf3d 	b.w	16534 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   166ba:	2000      	movs	r0, #0
   166bc:	e7e3      	b.n	16686 <sys_clock_set_timeout+0x16>
   166be:	bf00      	nop
   166c0:	007fffff 	.word	0x007fffff
   166c4:	40015000 	.word	0x40015000
   166c8:	200160cc 	.word	0x200160cc
   166cc:	200160c0 	.word	0x200160c0
   166d0:	0001651d 	.word	0x0001651d

000166d4 <sys_clock_elapsed>:
   166d4:	4b04      	ldr	r3, [pc, #16]	; (166e8 <sys_clock_elapsed+0x14>)
   166d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   166da:	4b04      	ldr	r3, [pc, #16]	; (166ec <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   166dc:	681b      	ldr	r3, [r3, #0]
   166de:	1ac0      	subs	r0, r0, r3
}
   166e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   166e4:	4770      	bx	lr
   166e6:	bf00      	nop
   166e8:	40015000 	.word	0x40015000
   166ec:	200160cc 	.word	0x200160cc

000166f0 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   166f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   166f2:	f04f 0320 	mov.w	r3, #32
   166f6:	f3ef 8511 	mrs	r5, BASEPRI
   166fa:	f383 8811 	msr	BASEPRI, r3
   166fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16702:	481b      	ldr	r0, [pc, #108]	; (16770 <sys_clock_cycle_get_32+0x80>)
   16704:	f012 fc36 	bl	28f74 <z_spin_lock_valid>
   16708:	b968      	cbnz	r0, 16726 <sys_clock_cycle_get_32+0x36>
   1670a:	2381      	movs	r3, #129	; 0x81
   1670c:	4a19      	ldr	r2, [pc, #100]	; (16774 <sys_clock_cycle_get_32+0x84>)
   1670e:	491a      	ldr	r1, [pc, #104]	; (16778 <sys_clock_cycle_get_32+0x88>)
   16710:	481a      	ldr	r0, [pc, #104]	; (1677c <sys_clock_cycle_get_32+0x8c>)
   16712:	f017 fb39 	bl	2dd88 <printk>
   16716:	4916      	ldr	r1, [pc, #88]	; (16770 <sys_clock_cycle_get_32+0x80>)
   16718:	4819      	ldr	r0, [pc, #100]	; (16780 <sys_clock_cycle_get_32+0x90>)
   1671a:	f017 fb35 	bl	2dd88 <printk>
   1671e:	2181      	movs	r1, #129	; 0x81
   16720:	4814      	ldr	r0, [pc, #80]	; (16774 <sys_clock_cycle_get_32+0x84>)
   16722:	f017 fe17 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   16726:	4812      	ldr	r0, [pc, #72]	; (16770 <sys_clock_cycle_get_32+0x80>)
   16728:	f012 fc40 	bl	28fac <z_spin_lock_set_owner>
   1672c:	4b15      	ldr	r3, [pc, #84]	; (16784 <sys_clock_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1672e:	4810      	ldr	r0, [pc, #64]	; (16770 <sys_clock_cycle_get_32+0x80>)
   16730:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   16734:	4b14      	ldr	r3, [pc, #80]	; (16788 <sys_clock_cycle_get_32+0x98>)
   16736:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   16738:	1ae4      	subs	r4, r4, r3
   1673a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   1673e:	441c      	add	r4, r3
   16740:	f012 fc26 	bl	28f90 <z_spin_unlock_valid>
   16744:	b968      	cbnz	r0, 16762 <sys_clock_cycle_get_32+0x72>
   16746:	23ac      	movs	r3, #172	; 0xac
   16748:	4a0a      	ldr	r2, [pc, #40]	; (16774 <sys_clock_cycle_get_32+0x84>)
   1674a:	4910      	ldr	r1, [pc, #64]	; (1678c <sys_clock_cycle_get_32+0x9c>)
   1674c:	480b      	ldr	r0, [pc, #44]	; (1677c <sys_clock_cycle_get_32+0x8c>)
   1674e:	f017 fb1b 	bl	2dd88 <printk>
   16752:	4907      	ldr	r1, [pc, #28]	; (16770 <sys_clock_cycle_get_32+0x80>)
   16754:	480e      	ldr	r0, [pc, #56]	; (16790 <sys_clock_cycle_get_32+0xa0>)
   16756:	f017 fb17 	bl	2dd88 <printk>
   1675a:	21ac      	movs	r1, #172	; 0xac
   1675c:	4805      	ldr	r0, [pc, #20]	; (16774 <sys_clock_cycle_get_32+0x84>)
   1675e:	f017 fdf9 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   16762:	f385 8811 	msr	BASEPRI, r5
   16766:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1676a:	4620      	mov	r0, r4
   1676c:	bd38      	pop	{r3, r4, r5, pc}
   1676e:	bf00      	nop
   16770:	200160d0 	.word	0x200160d0
   16774:	00037fec 	.word	0x00037fec
   16778:	0003803e 	.word	0x0003803e
   1677c:	00037f2c 	.word	0x00037f2c
   16780:	00038053 	.word	0x00038053
   16784:	40015000 	.word	0x40015000
   16788:	200160cc 	.word	0x200160cc
   1678c:	00038012 	.word	0x00038012
   16790:	00038029 	.word	0x00038029

00016794 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   16794:	b508      	push	{r3, lr}
	k_sched_lock();
   16796:	f013 ffe3 	bl	2a760 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   1679a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   1679e:	4801      	ldr	r0, [pc, #4]	; (167a4 <before_nse+0x10>)
   167a0:	f019 be61 	b.w	30466 <z_arm_save_fp_context>
   167a4:	200160d4 	.word	0x200160d4

000167a8 <after_nse>:

void after_nse(void)
{
   167a8:	b508      	push	{r3, lr}
	k_sched_unlock();
   167aa:	f014 fa6d 	bl	2ac88 <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
}
   167ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   167b2:	4801      	ldr	r0, [pc, #4]	; (167b8 <after_nse+0x10>)
   167b4:	f019 be58 	b.w	30468 <z_arm_restore_fp_context>
   167b8:	200160d4 	.word	0x200160d4

000167bc <uECC_set_rng>:
static uECC_RNG_Function g_rng_function = 0;
#endif

void uECC_set_rng(uECC_RNG_Function rng_function)
{
	g_rng_function = rng_function;
   167bc:	4b01      	ldr	r3, [pc, #4]	; (167c4 <uECC_set_rng+0x8>)
   167be:	6018      	str	r0, [r3, #0]
}
   167c0:	4770      	bx	lr
   167c2:	bf00      	nop
   167c4:	2001476c 	.word	0x2001476c

000167c8 <uECC_get_rng>:

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   167c8:	4b01      	ldr	r3, [pc, #4]	; (167d0 <uECC_get_rng+0x8>)
   167ca:	6818      	ldr	r0, [r3, #0]
   167cc:	4770      	bx	lr
   167ce:	bf00      	nop
   167d0:	2001476c 	.word	0x2001476c

000167d4 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   167d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   167d6:	2208      	movs	r2, #8
{
   167d8:	b089      	sub	sp, #36	; 0x24
   167da:	460c      	mov	r4, r1
   167dc:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   167de:	f018 fc86 	bl	2f0ee <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   167e2:	2700      	movs	r7, #0
	tmp[3] = product[11];
   167e4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	tmp[4] = product[12];
	tmp[5] = product[13];
	tmp[6] = product[14];
	tmp[7] = product[15];
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   167e6:	466a      	mov	r2, sp
	tmp[3] = product[11];
   167e8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   167ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   167ec:	4668      	mov	r0, sp
	tmp[4] = product[12];
   167ee:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   167f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
	tmp[0] = tmp[1] = tmp[2] = 0;
   167f2:	e9cd 7701 	strd	r7, r7, [sp, #4]
	tmp[5] = product[13];
   167f6:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   167f8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	tmp[0] = tmp[1] = tmp[2] = 0;
   167fa:	9700      	str	r7, [sp, #0]
	tmp[6] = product[14];
   167fc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   167fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   16800:	4669      	mov	r1, sp
	tmp[7] = product[15];
   16802:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   16804:	2308      	movs	r3, #8
   16806:	f018 fb74 	bl	2eef2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1680a:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1680c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1680e:	466a      	mov	r2, sp
   16810:	4631      	mov	r1, r6
   16812:	4630      	mov	r0, r6
   16814:	f018 fb6d 	bl	2eef2 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   16818:	6b23      	ldr	r3, [r4, #48]	; 0x30
	tmp[4] = product[13];
	tmp[5] = product[14];
	tmp[6] = product[15];
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1681a:	466a      	mov	r2, sp
	tmp[3] = product[12];
   1681c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   1681e:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   16820:	4669      	mov	r1, sp
	tmp[4] = product[13];
   16822:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   16824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   16826:	4405      	add	r5, r0
	tmp[5] = product[14];
   16828:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   1682a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1682c:	4668      	mov	r0, sp
	tmp[7] = 0;
   1682e:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   16832:	2308      	movs	r3, #8
   16834:	f018 fb5d 	bl	2eef2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   16838:	4631      	mov	r1, r6
   1683a:	2308      	movs	r3, #8
   1683c:	466a      	mov	r2, sp
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1683e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   16840:	4630      	mov	r0, r6
   16842:	f018 fb56 	bl	2eef2 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   16846:	6a23      	ldr	r3, [r4, #32]
	tmp[1] = product[9];
	tmp[2] = product[10];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
	tmp[7] = product[15];
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   16848:	466a      	mov	r2, sp
	tmp[0] = product[8];
   1684a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   1684c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1684e:	4405      	add	r5, r0
	tmp[1] = product[9];
   16850:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   16852:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   16854:	4630      	mov	r0, r6
	tmp[2] = product[10];
   16856:	9302      	str	r3, [sp, #8]
	tmp[6] = product[14];
   16858:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = tmp[4] = tmp[5] = 0;
   1685a:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[14];
   1685e:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   16860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = tmp[4] = tmp[5] = 0;
   16862:	9703      	str	r7, [sp, #12]
	tmp[7] = product[15];
   16864:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   16866:	2308      	movs	r3, #8
   16868:	f018 fb43 	bl	2eef2 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   1686c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp[1] = product[10];
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   1686e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[0] = product[9];
   16870:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   16872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[4] = product[14];
   16874:	9204      	str	r2, [sp, #16]
	tmp[1] = product[10];
   16876:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   16878:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[5] = product[15];
   1687a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[2] = product[11];
   1687c:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   1687e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   16880:	4405      	add	r5, r0
	tmp[6] = product[13];
   16882:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[3] = product[13];
   16886:	9303      	str	r3, [sp, #12]
	tmp[7] = product[8];
   16888:	6a23      	ldr	r3, [r4, #32]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1688a:	466a      	mov	r2, sp
	tmp[7] = product[8];
   1688c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1688e:	4630      	mov	r0, r6
   16890:	2308      	movs	r3, #8
   16892:	f018 fb2e 	bl	2eef2 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   16896:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[1] = product[12];
	tmp[2] = product[13];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
	tmp[7] = product[10];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   16898:	466a      	mov	r2, sp
	tmp[0] = product[11];
   1689a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   1689c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1689e:	4405      	add	r5, r0
	tmp[1] = product[12];
   168a0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   168a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168a4:	4630      	mov	r0, r6
	tmp[2] = product[13];
   168a6:	9302      	str	r3, [sp, #8]
	tmp[6] = product[8];
   168a8:	6a23      	ldr	r3, [r4, #32]
	tmp[3] = tmp[4] = tmp[5] = 0;
   168aa:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[8];
   168ae:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   168b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[3] = tmp[4] = tmp[5] = 0;
   168b2:	9703      	str	r7, [sp, #12]
	tmp[7] = product[10];
   168b4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168b6:	2308      	movs	r3, #8
   168b8:	f018 fc3c 	bl	2f134 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   168bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
	tmp[2] = product[14];
	tmp[3] = product[15];
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
	tmp[7] = product[11];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168be:	466a      	mov	r2, sp
	tmp[0] = product[12];
   168c0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   168c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168c4:	1a2d      	subs	r5, r5, r0
	tmp[1] = product[13];
   168c6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   168c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168ca:	4630      	mov	r0, r6
	tmp[2] = product[14];
   168cc:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   168ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[4] = tmp[5] = 0;
   168d0:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[3] = product[15];
   168d4:	9303      	str	r3, [sp, #12]
	tmp[6] = product[9];
   168d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   168d8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   168da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   168dc:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168de:	2308      	movs	r3, #8
   168e0:	f018 fc28 	bl	2f134 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   168e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[3] = product[8];
	tmp[4] = product[9];
	tmp[5] = product[10];
	tmp[6] = 0;
	tmp[7] = product[12];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168e6:	466a      	mov	r2, sp
	tmp[0] = product[13];
   168e8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   168ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168ec:	1a2d      	subs	r5, r5, r0
	tmp[1] = product[14];
   168ee:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   168f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   168f2:	4630      	mov	r0, r6
	tmp[2] = product[15];
   168f4:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   168f6:	6a23      	ldr	r3, [r4, #32]
   168f8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   168fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   168fc:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   168fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   16900:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   16904:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16906:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   16908:	2308      	movs	r3, #8
   1690a:	f018 fc13 	bl	2f134 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   1690e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   16910:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[14];
   16912:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   16914:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = product[9];
	tmp[4] = product[10];
	tmp[5] = product[11];
	tmp[6] = 0;
	tmp[7] = product[13];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   16916:	466a      	mov	r2, sp
	tmp[2] = 0;
   16918:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   1691c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1691e:	4630      	mov	r0, r6
	tmp[3] = product[9];
   16920:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   16922:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16924:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   16926:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   16928:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   1692c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1692e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   16930:	2308      	movs	r3, #8
   16932:	f018 fbff 	bl	2f134 <uECC_vli_sub>

	if (carry < 0) {
   16936:	1a2d      	subs	r5, r5, r0
   16938:	d410      	bmi.n	1695c <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   1693a:	4c0d      	ldr	r4, [pc, #52]	; (16970 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   1693c:	b935      	cbnz	r5, 1694c <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   1693e:	2208      	movs	r2, #8
   16940:	4631      	mov	r1, r6
   16942:	4620      	mov	r0, r4
   16944:	f018 fbdf 	bl	2f106 <uECC_vli_cmp_unsafe>
		while (carry || 
   16948:	2801      	cmp	r0, #1
   1694a:	d00f      	beq.n	1696c <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1694c:	2308      	movs	r3, #8
   1694e:	4622      	mov	r2, r4
   16950:	4631      	mov	r1, r6
   16952:	4630      	mov	r0, r6
   16954:	f018 fbee 	bl	2f134 <uECC_vli_sub>
   16958:	1a2d      	subs	r5, r5, r0
   1695a:	e7ef      	b.n	1693c <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1695c:	4a04      	ldr	r2, [pc, #16]	; (16970 <vli_mmod_fast_secp256r1+0x19c>)
   1695e:	2308      	movs	r3, #8
   16960:	4631      	mov	r1, r6
   16962:	4630      	mov	r0, r6
   16964:	f018 fac5 	bl	2eef2 <uECC_vli_add>
		while (carry < 0);
   16968:	182d      	adds	r5, r5, r0
   1696a:	d4f8      	bmi.n	1695e <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   1696c:	b009      	add	sp, #36	; 0x24
   1696e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16970:	0003686c 	.word	0x0003686c

00016974 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   16974:	b5f0      	push	{r4, r5, r6, r7, lr}
   16976:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   16978:	4e26      	ldr	r6, [pc, #152]	; (16a14 <tc_aes128_set_encrypt_key+0xa0>)
{
   1697a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   1697c:	ad01      	add	r5, sp, #4
{
   1697e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   16980:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16984:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16988:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1698c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   16990:	4638      	mov	r0, r7
   16992:	2f00      	cmp	r7, #0
   16994:	d039      	beq.n	16a0a <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   16996:	2c00      	cmp	r4, #0
   16998:	d039      	beq.n	16a0e <tc_aes128_set_encrypt_key+0x9a>
   1699a:	1f38      	subs	r0, r7, #4
   1699c:	4602      	mov	r2, r0
   1699e:	4621      	mov	r1, r4
   169a0:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   169a2:	784b      	ldrb	r3, [r1, #1]
   169a4:	780d      	ldrb	r5, [r1, #0]
   169a6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   169a8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   169ac:	78cd      	ldrb	r5, [r1, #3]
   169ae:	3104      	adds	r1, #4
   169b0:	432b      	orrs	r3, r5
   169b2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   169b6:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   169b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   169bc:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   169c0:	d1ef      	bne.n	169a2 <tc_aes128_set_encrypt_key+0x2e>
   169c2:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   169c4:	4c14      	ldr	r4, [pc, #80]	; (16a18 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   169c6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   169c8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   169ca:	d116      	bne.n	169fa <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   169cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
   169d0:	5ca5      	ldrb	r5, [r4, r2]
   169d2:	0e1a      	lsrs	r2, r3, #24
   169d4:	5ca2      	ldrb	r2, [r4, r2]
   169d6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   169da:	f3c3 2507 	ubfx	r5, r3, #8, #8
   169de:	5d65      	ldrb	r5, [r4, r5]
   169e0:	b2db      	uxtb	r3, r3
   169e2:	5ce3      	ldrb	r3, [r4, r3]
   169e4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   169e8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   169ec:	ad0c      	add	r5, sp, #48	; 0x30
   169ee:	f021 0303 	bic.w	r3, r1, #3
   169f2:	442b      	add	r3, r5
   169f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   169f8:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   169fa:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   169fe:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   16a00:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   16a02:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   16a04:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   16a06:	d1de      	bne.n	169c6 <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
   16a08:	2001      	movs	r0, #1
}
   16a0a:	b00d      	add	sp, #52	; 0x34
   16a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   16a0e:	4620      	mov	r0, r4
   16a10:	e7fb      	b.n	16a0a <tc_aes128_set_encrypt_key+0x96>
   16a12:	bf00      	nop
   16a14:	00036660 	.word	0x00036660
   16a18:	000389f8 	.word	0x000389f8

00016a1c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   16a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16a20:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   16a22:	4606      	mov	r6, r0
{
   16a24:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
   16a26:	2800      	cmp	r0, #0
   16a28:	d058      	beq.n	16adc <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   16a2a:	2900      	cmp	r1, #0
   16a2c:	d059      	beq.n	16ae2 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   16a2e:	2a00      	cmp	r2, #0
   16a30:	d059      	beq.n	16ae6 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   16a32:	2310      	movs	r3, #16
   16a34:	460a      	mov	r2, r1
   16a36:	4668      	mov	r0, sp
   16a38:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
   16a3a:	4c2c      	ldr	r4, [pc, #176]	; (16aec <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
   16a3c:	f018 f919 	bl	2ec72 <_copy>
	add_round_key(state, s->words);
   16a40:	4629      	mov	r1, r5
   16a42:	4668      	mov	r0, sp
   16a44:	f019 f82c 	bl	2faa0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   16a48:	46a1      	mov	r9, r4
   16a4a:	f105 0710 	add.w	r7, r5, #16
   16a4e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   16a50:	46e8      	mov	r8, sp
{
   16a52:	466a      	mov	r2, sp
   16a54:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   16a56:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   16a58:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   16a5a:	5c61      	ldrb	r1, [r4, r1]
   16a5c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   16a60:	d1f9      	bne.n	16a56 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   16a62:	4668      	mov	r0, sp
   16a64:	f019 f861 	bl	2fb2a <shift_rows>
	mult_row_column(t, s);
   16a68:	4669      	mov	r1, sp
   16a6a:	a804      	add	r0, sp, #16
   16a6c:	f019 f896 	bl	2fb9c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   16a70:	a901      	add	r1, sp, #4
   16a72:	a805      	add	r0, sp, #20
   16a74:	f019 f892 	bl	2fb9c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   16a78:	a902      	add	r1, sp, #8
   16a7a:	a806      	add	r0, sp, #24
   16a7c:	f019 f88e 	bl	2fb9c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   16a80:	a903      	add	r1, sp, #12
   16a82:	a807      	add	r0, sp, #28
   16a84:	f019 f88a 	bl	2fb9c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   16a88:	2310      	movs	r3, #16
   16a8a:	4668      	mov	r0, sp
   16a8c:	4619      	mov	r1, r3
   16a8e:	eb0d 0203 	add.w	r2, sp, r3
   16a92:	f018 f8ee 	bl	2ec72 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   16a96:	4639      	mov	r1, r7
   16a98:	4668      	mov	r0, sp
   16a9a:	3710      	adds	r7, #16
   16a9c:	f019 f800 	bl	2faa0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   16aa0:	42af      	cmp	r7, r5
   16aa2:	d1d5      	bne.n	16a50 <tc_aes_encrypt+0x34>
   16aa4:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   16aa6:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   16aaa:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   16aac:	f819 3003 	ldrb.w	r3, [r9, r3]
   16ab0:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   16ab4:	d1f7      	bne.n	16aa6 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   16ab6:	4668      	mov	r0, sp
   16ab8:	f019 f837 	bl	2fb2a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   16abc:	4629      	mov	r1, r5
   16abe:	4668      	mov	r0, sp
   16ac0:	f018 ffee 	bl	2faa0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   16ac4:	2310      	movs	r3, #16
   16ac6:	466a      	mov	r2, sp
   16ac8:	4619      	mov	r1, r3
   16aca:	4630      	mov	r0, r6
   16acc:	f018 f8d1 	bl	2ec72 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   16ad0:	4668      	mov	r0, sp
   16ad2:	2210      	movs	r2, #16
   16ad4:	4621      	mov	r1, r4
   16ad6:	f018 f8d9 	bl	2ec8c <_set>

	return TC_CRYPTO_SUCCESS;
   16ada:	2001      	movs	r0, #1
}
   16adc:	b009      	add	sp, #36	; 0x24
   16ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   16ae2:	4608      	mov	r0, r1
   16ae4:	e7fa      	b.n	16adc <tc_aes_encrypt+0xc0>
   16ae6:	4610      	mov	r0, r2
   16ae8:	e7f8      	b.n	16adc <tc_aes_encrypt+0xc0>
   16aea:	bf00      	nop
   16aec:	000389f8 	.word	0x000389f8

00016af0 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   16af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   16af4:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   16af6:	6803      	ldr	r3, [r0, #0]
{
   16af8:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   16afa:	9303      	str	r3, [sp, #12]
   16afc:	6843      	ldr	r3, [r0, #4]
   16afe:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 16cb8 <compress+0x1c8>
   16b02:	9304      	str	r3, [sp, #16]
   16b04:	6883      	ldr	r3, [r0, #8]
   16b06:	9c03      	ldr	r4, [sp, #12]
   16b08:	9305      	str	r3, [sp, #20]
   16b0a:	68c3      	ldr	r3, [r0, #12]
{
   16b0c:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   16b0e:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   16b10:	6903      	ldr	r3, [r0, #16]
   16b12:	9307      	str	r3, [sp, #28]
   16b14:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   16b16:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   16b1a:	9308      	str	r3, [sp, #32]
   16b1c:	6983      	ldr	r3, [r0, #24]
   16b1e:	9309      	str	r3, [sp, #36]	; 0x24
   16b20:	69c3      	ldr	r3, [r0, #28]
   16b22:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
   16b26:	4698      	mov	r8, r3
   16b28:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   16b2a:	9b05      	ldr	r3, [sp, #20]
   16b2c:	9301      	str	r3, [sp, #4]
   16b2e:	9b04      	ldr	r3, [sp, #16]
   16b30:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
   16b32:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
   16b34:	9e01      	ldr	r6, [sp, #4]
   16b36:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
   16b38:	ab0c      	add	r3, sp, #48	; 0x30
   16b3a:	ba2d      	rev	r5, r5
   16b3c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   16b3e:	f85a 3b04 	ldr.w	r3, [sl], #4
   16b42:	3704      	adds	r7, #4
   16b44:	eb05 0903 	add.w	r9, r5, r3
   16b48:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   16b4c:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
   16b50:	ea85 6572 	eor.w	r5, r5, r2, ror #25
   16b54:	444d      	add	r5, r9
   16b56:	ea2b 0302 	bic.w	r3, fp, r2
   16b5a:	ea02 090c 	and.w	r9, r2, ip
   16b5e:	ea83 0309 	eor.w	r3, r3, r9
   16b62:	442b      	add	r3, r5
   16b64:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   16b66:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
   16b6a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   16b6e:	404d      	eors	r5, r1
   16b70:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   16b74:	4025      	ands	r5, r4
   16b76:	ea01 0906 	and.w	r9, r1, r6
   16b7a:	ea85 0509 	eor.w	r5, r5, r9
   16b7e:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
   16b82:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   16b84:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   16b86:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   16b8a:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   16b8c:	46b6      	mov	lr, r6
   16b8e:	46d8      	mov	r8, fp
   16b90:	f040 8081 	bne.w	16c96 <compress+0x1a6>
   16b94:	f04f 0a10 	mov.w	sl, #16
   16b98:	4946      	ldr	r1, [pc, #280]	; (16cb4 <compress+0x1c4>)
   16b9a:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   16b9c:	4651      	mov	r1, sl
   16b9e:	f10a 0a01 	add.w	sl, sl, #1
   16ba2:	ae1c      	add	r6, sp, #112	; 0x70
   16ba4:	f00a 070f 	and.w	r7, sl, #15
   16ba8:	eb06 0787 	add.w	r7, r6, r7, lsl #2
   16bac:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16bb0:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   16bb4:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
   16bb8:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16bbc:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
   16bbe:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
   16bc0:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16bc4:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
   16bc8:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16bca:	eb06 0989 	add.w	r9, r6, r9, lsl #2
   16bce:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
   16bd2:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16bd6:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
   16bda:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16bde:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
   16be2:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16be6:	4431      	add	r1, r6
		s0 = sigma0(s0);
   16be8:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
   16bea:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
   16bee:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
   16bf2:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   16bf6:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16bfa:	4441      	add	r1, r8
   16bfc:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   16bfe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   16c00:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   16c04:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   16c08:	ea05 0802 	and.w	r8, r5, r2
   16c0c:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
   16c10:	ea2c 0705 	bic.w	r7, ip, r5
   16c14:	f856 eb04 	ldr.w	lr, [r6], #4
   16c18:	ea87 0708 	eor.w	r7, r7, r8
   16c1c:	ea89 6975 	eor.w	r9, r9, r5, ror #25
   16c20:	444f      	add	r7, r9
   16c22:	4477      	add	r7, lr
   16c24:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
   16c26:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   16c28:	4439      	add	r1, r7
   16c2a:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
   16c2c:	ea04 0e06 	and.w	lr, r4, r6
   16c30:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
   16c34:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
   16c36:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
   16c3a:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
   16c3c:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
   16c40:	ea0b 0b03 	and.w	fp, fp, r3
   16c44:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
   16c48:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
   16c4a:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
   16c4e:	9e00      	ldr	r6, [sp, #0]
   16c50:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
   16c52:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   16c56:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
   16c58:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
   16c5a:	9601      	str	r6, [sp, #4]
   16c5c:	d123      	bne.n	16ca6 <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   16c5e:	9e03      	ldr	r6, [sp, #12]
   16c60:	440e      	add	r6, r1
   16c62:	9904      	ldr	r1, [sp, #16]
   16c64:	6006      	str	r6, [r0, #0]
   16c66:	4419      	add	r1, r3
   16c68:	9b05      	ldr	r3, [sp, #20]
   16c6a:	6041      	str	r1, [r0, #4]
   16c6c:	4423      	add	r3, r4
   16c6e:	9900      	ldr	r1, [sp, #0]
   16c70:	6083      	str	r3, [r0, #8]
   16c72:	9b06      	ldr	r3, [sp, #24]
   16c74:	440b      	add	r3, r1
   16c76:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   16c78:	9b07      	ldr	r3, [sp, #28]
   16c7a:	4443      	add	r3, r8
   16c7c:	6103      	str	r3, [r0, #16]
   16c7e:	9b08      	ldr	r3, [sp, #32]
   16c80:	442b      	add	r3, r5
   16c82:	6143      	str	r3, [r0, #20]
   16c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16c86:	4413      	add	r3, r2
   16c88:	6183      	str	r3, [r0, #24]
   16c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16c8c:	4463      	add	r3, ip
   16c8e:	61c3      	str	r3, [r0, #28]
}
   16c90:	b01d      	add	sp, #116	; 0x74
   16c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c96:	9900      	ldr	r1, [sp, #0]
   16c98:	46e3      	mov	fp, ip
   16c9a:	e9cd 4100 	strd	r4, r1, [sp]
   16c9e:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   16ca0:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   16ca2:	462a      	mov	r2, r5
   16ca4:	e745      	b.n	16b32 <compress+0x42>
   16ca6:	4694      	mov	ip, r2
   16ca8:	9400      	str	r4, [sp, #0]
   16caa:	462a      	mov	r2, r5
   16cac:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   16cae:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
   16cb0:	460b      	mov	r3, r1
   16cb2:	e773      	b.n	16b9c <compress+0xac>
   16cb4:	00036958 	.word	0x00036958
   16cb8:	00036918 	.word	0x00036918

00016cbc <tc_sha256_init>:
{
   16cbc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   16cbe:	4604      	mov	r4, r0
   16cc0:	b1c8      	cbz	r0, 16cf6 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   16cc2:	2270      	movs	r2, #112	; 0x70
   16cc4:	2100      	movs	r1, #0
   16cc6:	f017 ffe1 	bl	2ec8c <_set>
	s->iv[1] = 0xbb67ae85;
   16cca:	4b0b      	ldr	r3, [pc, #44]	; (16cf8 <tc_sha256_init+0x3c>)
   16ccc:	4a0b      	ldr	r2, [pc, #44]	; (16cfc <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   16cce:	490c      	ldr	r1, [pc, #48]	; (16d00 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   16cd0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   16cd4:	4b0b      	ldr	r3, [pc, #44]	; (16d04 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   16cd6:	480c      	ldr	r0, [pc, #48]	; (16d08 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   16cd8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   16cdc:	4b0b      	ldr	r3, [pc, #44]	; (16d0c <tc_sha256_init+0x50>)
   16cde:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   16ce2:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   16ce4:	4b0a      	ldr	r3, [pc, #40]	; (16d10 <tc_sha256_init+0x54>)
   16ce6:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   16ce8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   16cec:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   16cf0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   16cf4:	61e3      	str	r3, [r4, #28]
}
   16cf6:	bd10      	pop	{r4, pc}
   16cf8:	bb67ae85 	.word	0xbb67ae85
   16cfc:	6a09e667 	.word	0x6a09e667
   16d00:	3c6ef372 	.word	0x3c6ef372
   16d04:	a54ff53a 	.word	0xa54ff53a
   16d08:	510e527f 	.word	0x510e527f
   16d0c:	9b05688c 	.word	0x9b05688c
   16d10:	1f83d9ab 	.word	0x1f83d9ab

00016d14 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   16d14:	4a09      	ldr	r2, [pc, #36]	; (16d3c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   16d16:	490a      	ldr	r1, [pc, #40]	; (16d40 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   16d18:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   16d1a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   16d1c:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   16d1e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16d20:	4908      	ldr	r1, [pc, #32]	; (16d44 <arch_swap+0x30>)
   16d22:	684b      	ldr	r3, [r1, #4]
   16d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16d28:	604b      	str	r3, [r1, #4]
   16d2a:	2300      	movs	r3, #0
   16d2c:	f383 8811 	msr	BASEPRI, r3
   16d30:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   16d34:	6893      	ldr	r3, [r2, #8]
}
   16d36:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   16d38:	4770      	bx	lr
   16d3a:	bf00      	nop
   16d3c:	20016b74 	.word	0x20016b74
   16d40:	000372d4 	.word	0x000372d4
   16d44:	e000ed00 	.word	0xe000ed00

00016d48 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   16d48:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   16d4a:	2b00      	cmp	r3, #0
   16d4c:	db08      	blt.n	16d60 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16d4e:	2201      	movs	r2, #1
   16d50:	f000 001f 	and.w	r0, r0, #31
   16d54:	fa02 f000 	lsl.w	r0, r2, r0
   16d58:	4a02      	ldr	r2, [pc, #8]	; (16d64 <arch_irq_enable+0x1c>)
   16d5a:	095b      	lsrs	r3, r3, #5
   16d5c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   16d60:	4770      	bx	lr
   16d62:	bf00      	nop
   16d64:	e000e100 	.word	0xe000e100

00016d68 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   16d68:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   16d6a:	2b00      	cmp	r3, #0
   16d6c:	db0d      	blt.n	16d8a <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16d6e:	2201      	movs	r2, #1
   16d70:	f000 001f 	and.w	r0, r0, #31
   16d74:	fa02 f000 	lsl.w	r0, r2, r0
   16d78:	095b      	lsrs	r3, r3, #5
   16d7a:	4a04      	ldr	r2, [pc, #16]	; (16d8c <arch_irq_disable+0x24>)
   16d7c:	3320      	adds	r3, #32
   16d7e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   16d82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16d86:	f3bf 8f6f 	isb	sy
}
   16d8a:	4770      	bx	lr
   16d8c:	e000e100 	.word	0xe000e100

00016d90 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   16d90:	4b05      	ldr	r3, [pc, #20]	; (16da8 <arch_irq_is_enabled+0x18>)
   16d92:	0942      	lsrs	r2, r0, #5
   16d94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16d98:	2301      	movs	r3, #1
   16d9a:	f000 001f 	and.w	r0, r0, #31
   16d9e:	fa03 f000 	lsl.w	r0, r3, r0
}
   16da2:	4010      	ands	r0, r2
   16da4:	4770      	bx	lr
   16da6:	bf00      	nop
   16da8:	e000e100 	.word	0xe000e100

00016dac <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   16dac:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   16dae:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   16db0:	2c07      	cmp	r4, #7
{
   16db2:	4605      	mov	r5, r0
   16db4:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   16db6:	d90f      	bls.n	16dd8 <z_arm_irq_priority_set+0x2c>
   16db8:	2358      	movs	r3, #88	; 0x58
   16dba:	4a10      	ldr	r2, [pc, #64]	; (16dfc <z_arm_irq_priority_set+0x50>)
   16dbc:	4910      	ldr	r1, [pc, #64]	; (16e00 <z_arm_irq_priority_set+0x54>)
   16dbe:	4811      	ldr	r0, [pc, #68]	; (16e04 <z_arm_irq_priority_set+0x58>)
   16dc0:	f016 ffe2 	bl	2dd88 <printk>
   16dc4:	4631      	mov	r1, r6
   16dc6:	4810      	ldr	r0, [pc, #64]	; (16e08 <z_arm_irq_priority_set+0x5c>)
   16dc8:	2307      	movs	r3, #7
   16dca:	462a      	mov	r2, r5
   16dcc:	f016 ffdc 	bl	2dd88 <printk>
   16dd0:	2158      	movs	r1, #88	; 0x58
   16dd2:	480a      	ldr	r0, [pc, #40]	; (16dfc <z_arm_irq_priority_set+0x50>)
   16dd4:	f017 fabe 	bl	2e354 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   16dd8:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   16dda:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16ddc:	bfac      	ite	ge
   16dde:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16de2:	4b0a      	ldrlt	r3, [pc, #40]	; (16e0c <z_arm_irq_priority_set+0x60>)
   16de4:	ea4f 1444 	mov.w	r4, r4, lsl #5
   16de8:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16dea:	bfab      	itete	ge
   16dec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16df0:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16df4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16df8:	555c      	strblt	r4, [r3, r5]
}
   16dfa:	bd70      	pop	{r4, r5, r6, pc}
   16dfc:	00038af8 	.word	0x00038af8
   16e00:	00038b2e 	.word	0x00038b2e
   16e04:	00037f2c 	.word	0x00037f2c
   16e08:	00038b49 	.word	0x00038b49
   16e0c:	e000ed14 	.word	0xe000ed14

00016e10 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   16e10:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   16e12:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   16e14:	4b04      	ldr	r3, [pc, #16]	; (16e28 <_arch_isr_direct_pm+0x18>)
   16e16:	6a18      	ldr	r0, [r3, #32]
   16e18:	b118      	cbz	r0, 16e22 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   16e1a:	2200      	movs	r2, #0
   16e1c:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   16e1e:	f01e fa05 	bl	3522c <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   16e22:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   16e24:	bd08      	pop	{r3, pc}
   16e26:	bf00      	nop
   16e28:	20016b74 	.word	0x20016b74

00016e2c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   16e2c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   16e30:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   16e32:	490b      	ldr	r1, [pc, #44]	; (16e60 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   16e34:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   16e38:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   16e3a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   16e3e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   16e42:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   16e44:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   16e48:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   16e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   16e50:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   16e54:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   16e56:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   16e58:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   16e5a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   16e5c:	4770      	bx	lr
   16e5e:	bf00      	nop
   16e60:	0002dec3 	.word	0x0002dec3

00016e64 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   16e64:	4b08      	ldr	r3, [pc, #32]	; (16e88 <arch_switch_to_main_thread+0x24>)
   16e66:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   16e68:	6e83      	ldr	r3, [r0, #104]	; 0x68
   16e6a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   16e6e:	4610      	mov	r0, r2
   16e70:	f381 8809 	msr	PSP, r1
   16e74:	2100      	movs	r1, #0
   16e76:	b663      	cpsie	if
   16e78:	f381 8811 	msr	BASEPRI, r1
   16e7c:	f3bf 8f6f 	isb	sy
   16e80:	2200      	movs	r2, #0
   16e82:	2300      	movs	r3, #0
   16e84:	f017 f81d 	bl	2dec2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   16e88:	20016b74 	.word	0x20016b74

00016e8c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16e8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16e8e:	4606      	mov	r6, r0

	if (esf != NULL) {
   16e90:	460c      	mov	r4, r1
   16e92:	b301      	cbz	r1, 16ed6 <z_arm_fatal_error+0x4a>
   16e94:	4b13      	ldr	r3, [pc, #76]	; (16ee4 <z_arm_fatal_error+0x58>)
   16e96:	4d14      	ldr	r5, [pc, #80]	; (16ee8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   16e98:	4814      	ldr	r0, [pc, #80]	; (16eec <z_arm_fatal_error+0x60>)
   16e9a:	1aed      	subs	r5, r5, r3
   16e9c:	08ed      	lsrs	r5, r5, #3
   16e9e:	01ad      	lsls	r5, r5, #6
   16ea0:	f045 0501 	orr.w	r5, r5, #1
   16ea4:	f8ad 5000 	strh.w	r5, [sp]
   16ea8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   16eac:	6809      	ldr	r1, [r1, #0]
   16eae:	f017 fad9 	bl	2e464 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   16eb2:	f8ad 5000 	strh.w	r5, [sp]
   16eb6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   16eba:	68e1      	ldr	r1, [r4, #12]
   16ebc:	480c      	ldr	r0, [pc, #48]	; (16ef0 <z_arm_fatal_error+0x64>)
   16ebe:	f017 fad1 	bl	2e464 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   16ec2:	462a      	mov	r2, r5
   16ec4:	69e1      	ldr	r1, [r4, #28]
   16ec6:	480b      	ldr	r0, [pc, #44]	; (16ef4 <z_arm_fatal_error+0x68>)
   16ec8:	f017 fa9f 	bl	2e40a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   16ecc:	462a      	mov	r2, r5
   16ece:	69a1      	ldr	r1, [r4, #24]
   16ed0:	4809      	ldr	r0, [pc, #36]	; (16ef8 <z_arm_fatal_error+0x6c>)
   16ed2:	f017 fa9a 	bl	2e40a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   16ed6:	4621      	mov	r1, r4
   16ed8:	4630      	mov	r0, r6
}
   16eda:	b002      	add	sp, #8
   16edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   16ee0:	f011 bbac 	b.w	2863c <z_fatal_error>
   16ee4:	000364b0 	.word	0x000364b0
   16ee8:	000365c8 	.word	0x000365c8
   16eec:	00038b89 	.word	0x00038b89
   16ef0:	00038bb8 	.word	0x00038bb8
   16ef4:	00038be7 	.word	0x00038be7
   16ef8:	00038bf6 	.word	0x00038bf6

00016efc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16efc:	4a0e      	ldr	r2, [pc, #56]	; (16f38 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   16efe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16f00:	4b0e      	ldr	r3, [pc, #56]	; (16f3c <z_arm_prep_c+0x40>)
   16f02:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   16f06:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   16f08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16f0c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   16f10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   16f14:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   16f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   16f1c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   16f20:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   16f24:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   16f28:	f011 fc00 	bl	2872c <z_bss_zero>
	z_data_copy();
   16f2c:	f014 fd44 	bl	2b9b8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   16f30:	f000 fb20 	bl	17574 <z_arm_interrupt_init>
	z_cstart();
   16f34:	f011 fc1e 	bl	28774 <z_cstart>
   16f38:	00010000 	.word	0x00010000
   16f3c:	e000ed00 	.word	0xe000ed00

00016f40 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   16f40:	4913      	ldr	r1, [pc, #76]	; (16f90 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   16f42:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   16f44:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   16f48:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   16f4a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   16f4e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16f52:	2020      	movs	r0, #32
    msr BASEPRI, r0
   16f54:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   16f58:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   16f5c:	4f0d      	ldr	r7, [pc, #52]	; (16f94 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   16f5e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   16f62:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   16f64:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   16f66:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   16f68:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   16f6a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   16f6c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   16f6e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   16f72:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   16f76:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   16f7a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   16f7e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   16f82:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   16f84:	f019 fa60 	bl	30448 <configure_builtin_stack_guard>
    pop {r2, lr}
   16f88:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   16f8c:	4770      	bx	lr
   16f8e:	0000      	.short	0x0000
    ldr r1, =_kernel
   16f90:	20016b74 	.word	0x20016b74
    ldr v4, =_SCS_ICSR
   16f94:	e000ed04 	.word	0xe000ed04

00016f98 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   16f98:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   16f9c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   16f9e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   16fa2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   16fa6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   16fa8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   16fac:	2902      	cmp	r1, #2
    beq _oops
   16fae:	d0ff      	beq.n	16fb0 <_oops>

00016fb0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   16fb0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   16fb2:	f019 fa4d 	bl	30450 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   16fb6:	bd01      	pop	{r0, pc}

00016fb8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   16fb8:	4901      	ldr	r1, [pc, #4]	; (16fc0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   16fba:	2210      	movs	r2, #16
	str	r2, [r1]
   16fbc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   16fbe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   16fc0:	e000ed10 	.word	0xe000ed10

00016fc4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   16fc4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   16fc6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   16fc8:	f380 8811 	msr	BASEPRI, r0
	isb
   16fcc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   16fd0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   16fd4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   16fd6:	b662      	cpsie	i
	isb
   16fd8:	f3bf 8f6f 	isb	sy

	bx	lr
   16fdc:	4770      	bx	lr
   16fde:	bf00      	nop

00016fe0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   16fe0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   16fe2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   16fe4:	f381 8811 	msr	BASEPRI, r1

	wfe
   16fe8:	bf20      	wfe

	msr	BASEPRI, r0
   16fea:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   16fee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   16ff0:	4770      	bx	lr
   16ff2:	bf00      	nop

00016ff4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   16ff4:	bf30      	wfi
    b z_SysNmiOnReset
   16ff6:	f7ff bffd 	b.w	16ff4 <z_SysNmiOnReset>
   16ffa:	bf00      	nop

00016ffc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   16ffc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   16ffe:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   17000:	4a0b      	ldr	r2, [pc, #44]	; (17030 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   17002:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   17004:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   17006:	bf1e      	ittt	ne
	movne	r1, #0
   17008:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1700a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   1700c:	f01e f90e 	blne	3522c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   17010:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   17012:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   17016:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1701a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1701e:	4905      	ldr	r1, [pc, #20]	; (17034 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   17020:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   17022:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   17024:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   17026:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1702a:	4903      	ldr	r1, [pc, #12]	; (17038 <_isr_wrapper+0x3c>)
	bx r1
   1702c:	4708      	bx	r1
   1702e:	0000      	.short	0x0000
	ldr r2, =_kernel
   17030:	20016b74 	.word	0x20016b74
	ldr r1, =_sw_isr_table
   17034:	00036254 	.word	0x00036254
	ldr r1, =z_arm_int_exit
   17038:	00017081 	.word	0x00017081

0001703c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1703c:	f017 f992 	bl	2e364 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   17040:	2020      	movs	r0, #32
    msr BASEPRI, r0
   17042:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   17046:	4808      	ldr	r0, [pc, #32]	; (17068 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   17048:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1704c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1704e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   17052:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   17056:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   17058:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1705a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1705e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   17062:	f7ff ff4b 	bl	16efc <z_arm_prep_c>
   17066:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   17068:	20023eb8 	.word	0x20023eb8

0001706c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1706c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   17070:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   17074:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   17076:	4672      	mov	r2, lr
	bl z_arm_fault
   17078:	f000 f96c 	bl	17354 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1707c:	bd01      	pop	{r0, pc}
   1707e:	bf00      	nop

00017080 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   17080:	4b04      	ldr	r3, [pc, #16]	; (17094 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   17082:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   17084:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   17086:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   17088:	d003      	beq.n	17092 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1708a:	4903      	ldr	r1, [pc, #12]	; (17098 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1708c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   17090:	600a      	str	r2, [r1, #0]

00017092 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   17092:	4770      	bx	lr
	ldr r3, =_kernel
   17094:	20016b74 	.word	0x20016b74
	ldr r1, =_SCS_ICSR
   17098:	e000ed04 	.word	0xe000ed04

0001709c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1709c:	b570      	push	{r4, r5, r6, lr}
   1709e:	4b28      	ldr	r3, [pc, #160]	; (17140 <usage_fault.isra.0+0xa4>)
   170a0:	4c28      	ldr	r4, [pc, #160]	; (17144 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   170a2:	4d29      	ldr	r5, [pc, #164]	; (17148 <usage_fault.isra.0+0xac>)
   170a4:	1ae4      	subs	r4, r4, r3
   170a6:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   170a8:	01a4      	lsls	r4, r4, #6
   170aa:	f044 0601 	orr.w	r6, r4, #1
   170ae:	4631      	mov	r1, r6
   170b0:	4826      	ldr	r0, [pc, #152]	; (1714c <usage_fault.isra.0+0xb0>)
   170b2:	f017 f99d 	bl	2e3f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   170b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   170b8:	0193      	lsls	r3, r2, #6
   170ba:	d503      	bpl.n	170c4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   170bc:	4631      	mov	r1, r6
   170be:	4824      	ldr	r0, [pc, #144]	; (17150 <usage_fault.isra.0+0xb4>)
   170c0:	f017 f996 	bl	2e3f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   170c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   170c6:	01dd      	lsls	r5, r3, #7
   170c8:	d504      	bpl.n	170d4 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   170ca:	4822      	ldr	r0, [pc, #136]	; (17154 <usage_fault.isra.0+0xb8>)
   170cc:	f044 0101 	orr.w	r1, r4, #1
   170d0:	f017 f98e 	bl	2e3f0 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   170d4:	4d1c      	ldr	r5, [pc, #112]	; (17148 <usage_fault.isra.0+0xac>)
   170d6:	6aae      	ldr	r6, [r5, #40]	; 0x28
   170d8:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   170dc:	d005      	beq.n	170ea <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   170de:	481e      	ldr	r0, [pc, #120]	; (17158 <usage_fault.isra.0+0xbc>)
   170e0:	f044 0101 	orr.w	r1, r4, #1
   170e4:	f017 f984 	bl	2e3f0 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   170e8:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   170ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   170ec:	0318      	lsls	r0, r3, #12
   170ee:	d504      	bpl.n	170fa <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   170f0:	481a      	ldr	r0, [pc, #104]	; (1715c <usage_fault.isra.0+0xc0>)
   170f2:	f044 0101 	orr.w	r1, r4, #1
   170f6:	f017 f97b 	bl	2e3f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   170fa:	4d13      	ldr	r5, [pc, #76]	; (17148 <usage_fault.isra.0+0xac>)
   170fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   170fe:	0351      	lsls	r1, r2, #13
   17100:	d504      	bpl.n	1710c <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   17102:	4817      	ldr	r0, [pc, #92]	; (17160 <usage_fault.isra.0+0xc4>)
   17104:	f044 0101 	orr.w	r1, r4, #1
   17108:	f017 f972 	bl	2e3f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1710c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1710e:	039a      	lsls	r2, r3, #14
   17110:	d504      	bpl.n	1711c <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   17112:	4814      	ldr	r0, [pc, #80]	; (17164 <usage_fault.isra.0+0xc8>)
   17114:	f044 0101 	orr.w	r1, r4, #1
   17118:	f017 f96a 	bl	2e3f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1711c:	4d0a      	ldr	r5, [pc, #40]	; (17148 <usage_fault.isra.0+0xac>)
   1711e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17120:	03db      	lsls	r3, r3, #15
   17122:	d504      	bpl.n	1712e <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   17124:	4810      	ldr	r0, [pc, #64]	; (17168 <usage_fault.isra.0+0xcc>)
   17126:	f044 0101 	orr.w	r1, r4, #1
   1712a:	f017 f961 	bl	2e3f0 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1712e:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   17130:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   17132:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   17136:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1713a:	62ab      	str	r3, [r5, #40]	; 0x28
}
   1713c:	bd70      	pop	{r4, r5, r6, pc}
   1713e:	bf00      	nop
   17140:	000364b0 	.word	0x000364b0
   17144:	000365c8 	.word	0x000365c8
   17148:	e000ed00 	.word	0xe000ed00
   1714c:	00038c24 	.word	0x00038c24
   17150:	00038c3c 	.word	0x00038c3c
   17154:	00038c4f 	.word	0x00038c4f
   17158:	00038c69 	.word	0x00038c69
   1715c:	00038c93 	.word	0x00038c93
   17160:	00038cb1 	.word	0x00038cb1
   17164:	00038cd6 	.word	0x00038cd6
   17168:	00038cf0 	.word	0x00038cf0

0001716c <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17170:	4b33      	ldr	r3, [pc, #204]	; (17240 <mem_manage_fault.isra.0+0xd4>)
   17172:	4c34      	ldr	r4, [pc, #208]	; (17244 <mem_manage_fault.isra.0+0xd8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   17174:	4d34      	ldr	r5, [pc, #208]	; (17248 <mem_manage_fault.isra.0+0xdc>)
   17176:	1ae4      	subs	r4, r4, r3
   17178:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1717a:	01a4      	lsls	r4, r4, #6
   1717c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   17180:	4607      	mov	r7, r0
   17182:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   17184:	4831      	ldr	r0, [pc, #196]	; (1724c <mem_manage_fault.isra.0+0xe0>)
   17186:	4641      	mov	r1, r8
   17188:	f017 f932 	bl	2e3f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1718c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1718e:	06d0      	lsls	r0, r2, #27
   17190:	d503      	bpl.n	1719a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   17192:	4641      	mov	r1, r8
   17194:	482e      	ldr	r0, [pc, #184]	; (17250 <mem_manage_fault.isra.0+0xe4>)
   17196:	f017 f92b 	bl	2e3f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1719a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1719c:	0719      	lsls	r1, r3, #28
   1719e:	d504      	bpl.n	171aa <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   171a0:	482c      	ldr	r0, [pc, #176]	; (17254 <mem_manage_fault.isra.0+0xe8>)
   171a2:	f044 0101 	orr.w	r1, r4, #1
   171a6:	f017 f923 	bl	2e3f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   171aa:	4d27      	ldr	r5, [pc, #156]	; (17248 <mem_manage_fault.isra.0+0xdc>)
   171ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   171ae:	079a      	lsls	r2, r3, #30
   171b0:	d512      	bpl.n	171d8 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   171b2:	f044 0801 	orr.w	r8, r4, #1
   171b6:	4641      	mov	r1, r8
   171b8:	4827      	ldr	r0, [pc, #156]	; (17258 <mem_manage_fault.isra.0+0xec>)
   171ba:	f017 f919 	bl	2e3f0 <log_0>
		uint32_t temp = SCB->MMFAR;
   171be:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   171c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   171c2:	061b      	lsls	r3, r3, #24
   171c4:	d508      	bpl.n	171d8 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   171c6:	4642      	mov	r2, r8
   171c8:	4824      	ldr	r0, [pc, #144]	; (1725c <mem_manage_fault.isra.0+0xf0>)
   171ca:	f017 f91e 	bl	2e40a <log_1>
			if (from_hard_fault != 0) {
   171ce:	b11f      	cbz	r7, 171d8 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   171d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   171d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   171d6:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   171d8:	4d1b      	ldr	r5, [pc, #108]	; (17248 <mem_manage_fault.isra.0+0xdc>)
   171da:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   171dc:	07d7      	lsls	r7, r2, #31
   171de:	d504      	bpl.n	171ea <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   171e0:	481f      	ldr	r0, [pc, #124]	; (17260 <mem_manage_fault.isra.0+0xf4>)
   171e2:	f044 0101 	orr.w	r1, r4, #1
   171e6:	f017 f903 	bl	2e3f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   171ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   171ec:	0698      	lsls	r0, r3, #26
   171ee:	d504      	bpl.n	171fa <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   171f0:	481c      	ldr	r0, [pc, #112]	; (17264 <mem_manage_fault.isra.0+0xf8>)
   171f2:	f044 0101 	orr.w	r1, r4, #1
   171f6:	f017 f8fb 	bl	2e3f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   171fa:	4b13      	ldr	r3, [pc, #76]	; (17248 <mem_manage_fault.isra.0+0xdc>)
   171fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   171fe:	06d1      	lsls	r1, r2, #27
   17200:	d402      	bmi.n	17208 <mem_manage_fault.isra.0+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   17202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   17204:	0792      	lsls	r2, r2, #30
   17206:	d511      	bpl.n	1722c <mem_manage_fault.isra.0+0xc0>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   17208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1720a:	06db      	lsls	r3, r3, #27
   1720c:	d50e      	bpl.n	1722c <mem_manage_fault.isra.0+0xc0>
   1720e:	4916      	ldr	r1, [pc, #88]	; (17268 <mem_manage_fault.isra.0+0xfc>)
   17210:	f240 134f 	movw	r3, #335	; 0x14f
   17214:	4a15      	ldr	r2, [pc, #84]	; (1726c <mem_manage_fault.isra.0+0x100>)
   17216:	4816      	ldr	r0, [pc, #88]	; (17270 <mem_manage_fault.isra.0+0x104>)
   17218:	f016 fdb6 	bl	2dd88 <printk>
   1721c:	4815      	ldr	r0, [pc, #84]	; (17274 <mem_manage_fault.isra.0+0x108>)
   1721e:	f016 fdb3 	bl	2dd88 <printk>
   17222:	f240 114f 	movw	r1, #335	; 0x14f
   17226:	4811      	ldr	r0, [pc, #68]	; (1726c <mem_manage_fault.isra.0+0x100>)
   17228:	f017 f894 	bl	2e354 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   1722c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1722e:	4a06      	ldr	r2, [pc, #24]	; (17248 <mem_manage_fault.isra.0+0xdc>)
   17230:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17232:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   17236:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17238:	7030      	strb	r0, [r6, #0]
}
   1723a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1723e:	bf00      	nop
   17240:	000364b0 	.word	0x000364b0
   17244:	000365c8 	.word	0x000365c8
   17248:	e000ed00 	.word	0xe000ed00
   1724c:	00038d1b 	.word	0x00038d1b
   17250:	00038d31 	.word	0x00038d31
   17254:	00038d64 	.word	0x00038d64
   17258:	00038d77 	.word	0x00038d77
   1725c:	00038d8f 	.word	0x00038d8f
   17260:	00038da5 	.word	0x00038da5
   17264:	00038dc4 	.word	0x00038dc4
   17268:	00038e2d 	.word	0x00038e2d
   1726c:	00038df3 	.word	0x00038df3
   17270:	00037f2c 	.word	0x00037f2c
   17274:	00038e77 	.word	0x00038e77

00017278 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   17278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1727c:	4b2a      	ldr	r3, [pc, #168]	; (17328 <bus_fault.isra.0+0xb0>)
   1727e:	4c2b      	ldr	r4, [pc, #172]	; (1732c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   17280:	4d2b      	ldr	r5, [pc, #172]	; (17330 <bus_fault.isra.0+0xb8>)
   17282:	1ae4      	subs	r4, r4, r3
   17284:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   17286:	01a4      	lsls	r4, r4, #6
   17288:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1728c:	4607      	mov	r7, r0
   1728e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   17290:	4828      	ldr	r0, [pc, #160]	; (17334 <bus_fault.isra.0+0xbc>)
   17292:	4641      	mov	r1, r8
   17294:	f017 f8ac 	bl	2e3f0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   17298:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1729a:	04d1      	lsls	r1, r2, #19
   1729c:	d503      	bpl.n	172a6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   1729e:	4641      	mov	r1, r8
   172a0:	4825      	ldr	r0, [pc, #148]	; (17338 <bus_fault.isra.0+0xc0>)
   172a2:	f017 f8a5 	bl	2e3f0 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   172a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   172a8:	051a      	lsls	r2, r3, #20
   172aa:	d504      	bpl.n	172b6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   172ac:	4823      	ldr	r0, [pc, #140]	; (1733c <bus_fault.isra.0+0xc4>)
   172ae:	f044 0101 	orr.w	r1, r4, #1
   172b2:	f017 f89d 	bl	2e3f0 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   172b6:	4d1e      	ldr	r5, [pc, #120]	; (17330 <bus_fault.isra.0+0xb8>)
   172b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   172ba:	059b      	lsls	r3, r3, #22
   172bc:	d512      	bpl.n	172e4 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   172be:	f044 0801 	orr.w	r8, r4, #1
   172c2:	4641      	mov	r1, r8
   172c4:	481e      	ldr	r0, [pc, #120]	; (17340 <bus_fault.isra.0+0xc8>)
   172c6:	f017 f893 	bl	2e3f0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   172ca:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   172cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   172ce:	0418      	lsls	r0, r3, #16
   172d0:	d508      	bpl.n	172e4 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   172d2:	4642      	mov	r2, r8
   172d4:	481b      	ldr	r0, [pc, #108]	; (17344 <bus_fault.isra.0+0xcc>)
   172d6:	f017 f898 	bl	2e40a <log_1>
			if (from_hard_fault != 0) {
   172da:	b11f      	cbz	r7, 172e4 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   172dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   172de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   172e2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   172e4:	4d12      	ldr	r5, [pc, #72]	; (17330 <bus_fault.isra.0+0xb8>)
   172e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   172e8:	0559      	lsls	r1, r3, #21
   172ea:	d504      	bpl.n	172f6 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   172ec:	4816      	ldr	r0, [pc, #88]	; (17348 <bus_fault.isra.0+0xd0>)
   172ee:	f044 0101 	orr.w	r1, r4, #1
   172f2:	f017 f87d 	bl	2e3f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   172f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   172f8:	05da      	lsls	r2, r3, #23
   172fa:	d50d      	bpl.n	17318 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   172fc:	4813      	ldr	r0, [pc, #76]	; (1734c <bus_fault.isra.0+0xd4>)
   172fe:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   17302:	f017 f875 	bl	2e3f0 <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   17306:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   17308:	4a09      	ldr	r2, [pc, #36]	; (17330 <bus_fault.isra.0+0xb8>)
   1730a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1730c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   17310:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17312:	7030      	strb	r0, [r6, #0]
}
   17314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   17318:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1731a:	049b      	lsls	r3, r3, #18
   1731c:	d5f3      	bpl.n	17306 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1731e:	480c      	ldr	r0, [pc, #48]	; (17350 <bus_fault.isra.0+0xd8>)
   17320:	f044 0101 	orr.w	r1, r4, #1
   17324:	e7ed      	b.n	17302 <bus_fault.isra.0+0x8a>
   17326:	bf00      	nop
   17328:	000364b0 	.word	0x000364b0
   1732c:	000365c8 	.word	0x000365c8
   17330:	e000ed00 	.word	0xe000ed00
   17334:	00038edb 	.word	0x00038edb
   17338:	00038ef1 	.word	0x00038ef1
   1733c:	00038d64 	.word	0x00038d64
   17340:	00038f02 	.word	0x00038f02
   17344:	00038f1b 	.word	0x00038f1b
   17348:	00038f30 	.word	0x00038f30
   1734c:	00038f4b 	.word	0x00038f4b
   17350:	00038dc4 	.word	0x00038dc4

00017354 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   17354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17358:	4b65      	ldr	r3, [pc, #404]	; (174f0 <z_arm_fault+0x19c>)
{
   1735a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1735c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   17360:	4689      	mov	r9, r1
   17362:	4614      	mov	r4, r2
   17364:	2700      	movs	r7, #0
   17366:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17368:	f3c8 0608 	ubfx	r6, r8, #0, #9
   1736c:	f387 8811 	msr	BASEPRI, r7
   17370:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   17374:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   17378:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1737c:	d117      	bne.n	173ae <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1737e:	07d0      	lsls	r0, r2, #31
   17380:	d415      	bmi.n	173ae <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   17382:	0651      	lsls	r1, r2, #25
   17384:	d403      	bmi.n	1738e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   17386:	0722      	lsls	r2, r4, #28
   17388:	d40e      	bmi.n	173a8 <z_arm_fault+0x54>
			*nested_exc = true;
   1738a:	2701      	movs	r7, #1
   1738c:	e00e      	b.n	173ac <z_arm_fault+0x58>
   1738e:	4959      	ldr	r1, [pc, #356]	; (174f4 <z_arm_fault+0x1a0>)
   17390:	4a59      	ldr	r2, [pc, #356]	; (174f8 <z_arm_fault+0x1a4>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   17392:	485a      	ldr	r0, [pc, #360]	; (174fc <z_arm_fault+0x1a8>)
   17394:	1a52      	subs	r2, r2, r1
   17396:	08d2      	lsrs	r2, r2, #3
   17398:	0192      	lsls	r2, r2, #6
   1739a:	f042 0101 	orr.w	r1, r2, #1
   1739e:	f017 f827 	bl	2e3f0 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   173a2:	f014 0704 	ands.w	r7, r4, #4
   173a6:	d001      	beq.n	173ac <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   173a8:	464d      	mov	r5, r9
	*nested_exc = false;
   173aa:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   173ac:	b97d      	cbnz	r5, 173ce <z_arm_fault+0x7a>
   173ae:	f240 33e1 	movw	r3, #993	; 0x3e1
   173b2:	4a53      	ldr	r2, [pc, #332]	; (17500 <z_arm_fault+0x1ac>)
   173b4:	4953      	ldr	r1, [pc, #332]	; (17504 <z_arm_fault+0x1b0>)
   173b6:	4854      	ldr	r0, [pc, #336]	; (17508 <z_arm_fault+0x1b4>)
   173b8:	f016 fce6 	bl	2dd88 <printk>
   173bc:	4853      	ldr	r0, [pc, #332]	; (1750c <z_arm_fault+0x1b8>)
   173be:	f016 fce3 	bl	2dd88 <printk>
   173c2:	f240 31e1 	movw	r1, #993	; 0x3e1
   173c6:	484e      	ldr	r0, [pc, #312]	; (17500 <z_arm_fault+0x1ac>)
   173c8:	f016 ffc4 	bl	2e354 <assert_post_action>
   173cc:	2500      	movs	r5, #0
	*recoverable = false;
   173ce:	2300      	movs	r3, #0
   173d0:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   173d4:	1ef3      	subs	r3, r6, #3
   173d6:	2b09      	cmp	r3, #9
   173d8:	d871      	bhi.n	174be <z_arm_fault+0x16a>
   173da:	e8df f003 	tbb	[pc, r3]
   173de:	5f05      	.short	0x5f05
   173e0:	70703c63 	.word	0x70703c63
   173e4:	67707070 	.word	0x67707070
	*recoverable = false;
   173e8:	f04f 0800 	mov.w	r8, #0
   173ec:	4b41      	ldr	r3, [pc, #260]	; (174f4 <z_arm_fault+0x1a0>)
   173ee:	4e42      	ldr	r6, [pc, #264]	; (174f8 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   173f0:	4847      	ldr	r0, [pc, #284]	; (17510 <z_arm_fault+0x1bc>)
   173f2:	1af6      	subs	r6, r6, r3
   173f4:	08f6      	lsrs	r6, r6, #3
   173f6:	01b6      	lsls	r6, r6, #6
   173f8:	f046 0601 	orr.w	r6, r6, #1
   173fc:	4631      	mov	r1, r6
   173fe:	f016 fff7 	bl	2e3f0 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   17402:	4b3b      	ldr	r3, [pc, #236]	; (174f0 <z_arm_fault+0x19c>)
	*recoverable = false;
   17404:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   17408:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1740a:	f014 0402 	ands.w	r4, r4, #2
   1740e:	d005      	beq.n	1741c <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   17410:	4631      	mov	r1, r6
   17412:	4840      	ldr	r0, [pc, #256]	; (17514 <z_arm_fault+0x1c0>)
	PR_FAULT_INFO(
   17414:	f016 ffec 	bl	2e3f0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17418:	2400      	movs	r4, #0
}
   1741a:	e01f      	b.n	1745c <z_arm_fault+0x108>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1741e:	005b      	lsls	r3, r3, #1
   17420:	d51c      	bpl.n	1745c <z_arm_fault+0x108>
		PR_EXC("  Fault escalation (see below)");
   17422:	4631      	mov	r1, r6
   17424:	483c      	ldr	r0, [pc, #240]	; (17518 <z_arm_fault+0x1c4>)
   17426:	f016 ffe3 	bl	2e3f0 <log_0>
		if (SCB_MMFSR != 0) {
   1742a:	4b3c      	ldr	r3, [pc, #240]	; (1751c <z_arm_fault+0x1c8>)
   1742c:	781b      	ldrb	r3, [r3, #0]
   1742e:	b12b      	cbz	r3, 1743c <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   17430:	2001      	movs	r0, #1
   17432:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   17436:	f7ff fe99 	bl	1716c <mem_manage_fault.isra.0>
   1743a:	e00e      	b.n	1745a <z_arm_fault+0x106>
		} else if (SCB_BFSR != 0) {
   1743c:	4b38      	ldr	r3, [pc, #224]	; (17520 <z_arm_fault+0x1cc>)
   1743e:	781b      	ldrb	r3, [r3, #0]
   17440:	b12b      	cbz	r3, 1744e <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   17442:	2001      	movs	r0, #1
   17444:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   17448:	f7ff ff16 	bl	17278 <bus_fault.isra.0>
   1744c:	e005      	b.n	1745a <z_arm_fault+0x106>
		} else if (SCB_UFSR != 0) {
   1744e:	4b35      	ldr	r3, [pc, #212]	; (17524 <z_arm_fault+0x1d0>)
   17450:	881b      	ldrh	r3, [r3, #0]
   17452:	b29b      	uxth	r3, r3
   17454:	b113      	cbz	r3, 1745c <z_arm_fault+0x108>
			reason = usage_fault(esf);
   17456:	f7ff fe21 	bl	1709c <usage_fault.isra.0>
   1745a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1745c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17460:	b9cb      	cbnz	r3, 17496 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   17462:	462b      	mov	r3, r5
   17464:	ad02      	add	r5, sp, #8
   17466:	f103 0620 	add.w	r6, r3, #32
   1746a:	462a      	mov	r2, r5
   1746c:	6818      	ldr	r0, [r3, #0]
   1746e:	6859      	ldr	r1, [r3, #4]
   17470:	3308      	adds	r3, #8
   17472:	c203      	stmia	r2!, {r0, r1}
   17474:	42b3      	cmp	r3, r6
   17476:	4615      	mov	r5, r2
   17478:	d1f7      	bne.n	1746a <z_arm_fault+0x116>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1747a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1747c:	b39f      	cbz	r7, 174e6 <z_arm_fault+0x192>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1747e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   17482:	b922      	cbnz	r2, 1748e <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   17484:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17488:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1748c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1748e:	4620      	mov	r0, r4
   17490:	a902      	add	r1, sp, #8
   17492:	f7ff fcfb 	bl	16e8c <z_arm_fatal_error>
}
   17496:	b00b      	add	sp, #44	; 0x2c
   17498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1749c:	2000      	movs	r0, #0
   1749e:	f10d 0107 	add.w	r1, sp, #7
   174a2:	e7c8      	b.n	17436 <z_arm_fault+0xe2>
		reason = bus_fault(esf, 0, recoverable);
   174a4:	2000      	movs	r0, #0
   174a6:	f10d 0107 	add.w	r1, sp, #7
   174aa:	e7cd      	b.n	17448 <z_arm_fault+0xf4>
   174ac:	4912      	ldr	r1, [pc, #72]	; (174f8 <z_arm_fault+0x1a4>)
   174ae:	4b11      	ldr	r3, [pc, #68]	; (174f4 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO(
   174b0:	481d      	ldr	r0, [pc, #116]	; (17528 <z_arm_fault+0x1d4>)
   174b2:	1ac9      	subs	r1, r1, r3
   174b4:	08c9      	lsrs	r1, r1, #3
   174b6:	0189      	lsls	r1, r1, #6
   174b8:	f041 0101 	orr.w	r1, r1, #1
   174bc:	e7aa      	b.n	17414 <z_arm_fault+0xc0>
   174be:	4a0d      	ldr	r2, [pc, #52]	; (174f4 <z_arm_fault+0x1a0>)
   174c0:	4b0d      	ldr	r3, [pc, #52]	; (174f8 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO("***** %s %d) *****",
   174c2:	481a      	ldr	r0, [pc, #104]	; (1752c <z_arm_fault+0x1d8>)
   174c4:	1a9b      	subs	r3, r3, r2
   174c6:	08db      	lsrs	r3, r3, #3
   174c8:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   174cc:	ea4f 1383 	mov.w	r3, r3, lsl #6
   174d0:	4917      	ldr	r1, [pc, #92]	; (17530 <z_arm_fault+0x1dc>)
   174d2:	f043 0301 	orr.w	r3, r3, #1
   174d6:	bf18      	it	ne
   174d8:	4601      	movne	r1, r0
   174da:	f1a6 0210 	sub.w	r2, r6, #16
   174de:	4815      	ldr	r0, [pc, #84]	; (17534 <z_arm_fault+0x1e0>)
   174e0:	f016 ffa7 	bl	2e432 <log_2>
   174e4:	e798      	b.n	17418 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   174e6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   174ea:	f023 0301 	bic.w	r3, r3, #1
   174ee:	e7cd      	b.n	1748c <z_arm_fault+0x138>
   174f0:	e000ed00 	.word	0xe000ed00
   174f4:	000364b0 	.word	0x000364b0
   174f8:	000365c8 	.word	0x000365c8
   174fc:	00038f63 	.word	0x00038f63
   17500:	00038df3 	.word	0x00038df3
   17504:	00038f86 	.word	0x00038f86
   17508:	00037f2c 	.word	0x00037f2c
   1750c:	00038f99 	.word	0x00038f99
   17510:	00038fd7 	.word	0x00038fd7
   17514:	00038fee 	.word	0x00038fee
   17518:	0003900f 	.word	0x0003900f
   1751c:	e000ed28 	.word	0xe000ed28
   17520:	e000ed29 	.word	0xe000ed29
   17524:	e000ed2a 	.word	0xe000ed2a
   17528:	0003902e 	.word	0x0003902e
   1752c:	00039067 	.word	0x00039067
   17530:	00039052 	.word	0x00039052
   17534:	00039080 	.word	0x00039080

00017538 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   17538:	4b04      	ldr	r3, [pc, #16]	; (1754c <z_arm_fault_init+0x14>)
   1753a:	695a      	ldr	r2, [r3, #20]
   1753c:	f042 0210 	orr.w	r2, r2, #16
   17540:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   17542:	695a      	ldr	r2, [r3, #20]
   17544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   17548:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1754a:	4770      	bx	lr
   1754c:	e000ed00 	.word	0xe000ed00

00017550 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   17550:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17554:	4905      	ldr	r1, [pc, #20]	; (1756c <sys_arch_reboot+0x1c>)
   17556:	4b06      	ldr	r3, [pc, #24]	; (17570 <sys_arch_reboot+0x20>)
   17558:	68ca      	ldr	r2, [r1, #12]
   1755a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1755e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17560:	60cb      	str	r3, [r1, #12]
   17562:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   17566:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17568:	e7fd      	b.n	17566 <sys_arch_reboot+0x16>
   1756a:	bf00      	nop
   1756c:	e000ed00 	.word	0xe000ed00
   17570:	05fa0004 	.word	0x05fa0004

00017574 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   17574:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17576:	2120      	movs	r1, #32
   17578:	4803      	ldr	r0, [pc, #12]	; (17588 <z_arm_interrupt_init+0x14>)
   1757a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1757c:	3301      	adds	r3, #1
   1757e:	2b41      	cmp	r3, #65	; 0x41
   17580:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   17584:	d1f9      	bne.n	1757a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   17586:	4770      	bx	lr
   17588:	e000e100 	.word	0xe000e100

0001758c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1758c:	4b06      	ldr	r3, [pc, #24]	; (175a8 <z_impl_k_thread_abort+0x1c>)
   1758e:	689b      	ldr	r3, [r3, #8]
   17590:	4283      	cmp	r3, r0
   17592:	d107      	bne.n	175a4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17594:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   17598:	b123      	cbz	r3, 175a4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1759a:	4a04      	ldr	r2, [pc, #16]	; (175ac <z_impl_k_thread_abort+0x20>)
   1759c:	6853      	ldr	r3, [r2, #4]
   1759e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   175a2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   175a4:	f014 b8ea 	b.w	2b77c <z_thread_abort>
   175a8:	20016b74 	.word	0x20016b74
   175ac:	e000ed00 	.word	0xe000ed00

000175b0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   175b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   175b2:	4c09      	ldr	r4, [pc, #36]	; (175d8 <z_arm_configure_static_mpu_regions+0x28>)
   175b4:	4a09      	ldr	r2, [pc, #36]	; (175dc <z_arm_configure_static_mpu_regions+0x2c>)
   175b6:	4623      	mov	r3, r4
   175b8:	2101      	movs	r1, #1
   175ba:	4809      	ldr	r0, [pc, #36]	; (175e0 <z_arm_configure_static_mpu_regions+0x30>)
   175bc:	f000 f912 	bl	177e4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   175c0:	2300      	movs	r3, #0
   175c2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   175c4:	4b07      	ldr	r3, [pc, #28]	; (175e4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   175c6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   175c8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   175ca:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   175cc:	9301      	str	r3, [sp, #4]
   175ce:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   175d0:	f000 f92e 	bl	17830 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   175d4:	b004      	add	sp, #16
   175d6:	bd10      	pop	{r4, pc}
   175d8:	20040000 	.word	0x20040000
   175dc:	20014500 	.word	0x20014500
   175e0:	00036a18 	.word	0x00036a18
   175e4:	20015168 	.word	0x20015168

000175e8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   175e8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   175ea:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   175ec:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   175ee:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   175f2:	f004 031f 	and.w	r3, r4, #31
   175f6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   175f8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   175fa:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   175fc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   17600:	4904      	ldr	r1, [pc, #16]	; (17614 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   17602:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   17606:	f043 0301 	orr.w	r3, r3, #1
   1760a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1760c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1760e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   17610:	bd10      	pop	{r4, pc}
   17612:	bf00      	nop
   17614:	e000ed90 	.word	0xe000ed90

00017618 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   17618:	280f      	cmp	r0, #15
{
   1761a:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   1761c:	d90d      	bls.n	1763a <region_allocate_and_init+0x22>
   1761e:	4b08      	ldr	r3, [pc, #32]	; (17640 <region_allocate_and_init+0x28>)
   17620:	4a08      	ldr	r2, [pc, #32]	; (17644 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   17622:	4601      	mov	r1, r0
   17624:	1ad2      	subs	r2, r2, r3
   17626:	08d2      	lsrs	r2, r2, #3
   17628:	0192      	lsls	r2, r2, #6
   1762a:	4807      	ldr	r0, [pc, #28]	; (17648 <region_allocate_and_init+0x30>)
   1762c:	f042 0201 	orr.w	r2, r2, #1
   17630:	f016 feeb 	bl	2e40a <log_1>
		return -EINVAL;
   17634:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   17638:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   1763a:	f7ff ffd5 	bl	175e8 <region_init>
	return index;
   1763e:	e7fb      	b.n	17638 <region_allocate_and_init+0x20>
   17640:	000364b0 	.word	0x000364b0
   17644:	000365a8 	.word	0x000365a8
   17648:	00039097 	.word	0x00039097

0001764c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17650:	4689      	mov	r9, r1
   17652:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   17654:	4606      	mov	r6, r0
   17656:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   1765a:	4d54      	ldr	r5, [pc, #336]	; (177ac <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1765c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1765e:	45c8      	cmp	r8, r9
   17660:	da33      	bge.n	176ca <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
   17662:	f8d6 a004 	ldr.w	sl, [r6, #4]
   17666:	f1ba 0f00 	cmp.w	sl, #0
   1766a:	d04d      	beq.n	17708 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   1766c:	f1ba 0f1f 	cmp.w	sl, #31
   17670:	d91e      	bls.n	176b0 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
   17672:	f01a 0f1f 	tst.w	sl, #31
   17676:	d11b      	bne.n	176b0 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
   17678:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   1767c:	f01b 0f1f 	tst.w	fp, #31
   17680:	d116      	bne.n	176b0 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   17682:	4658      	mov	r0, fp
   17684:	f018 fef1 	bl	3046a <arm_cmse_mpu_region_get>
   17688:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1768a:	eb0a 000b 	add.w	r0, sl, fp
   1768e:	3801      	subs	r0, #1
   17690:	f018 feeb 	bl	3046a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   17694:	4287      	cmp	r7, r0
   17696:	d01c      	beq.n	176d2 <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
   17698:	f06f 0715 	mvn.w	r7, #21
   1769c:	4a44      	ldr	r2, [pc, #272]	; (177b0 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   1769e:	4b45      	ldr	r3, [pc, #276]	; (177b4 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   176a0:	4639      	mov	r1, r7
   176a2:	1ad2      	subs	r2, r2, r3
   176a4:	08d2      	lsrs	r2, r2, #3
   176a6:	0192      	lsls	r2, r2, #6
   176a8:	4843      	ldr	r0, [pc, #268]	; (177b8 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   176aa:	f042 0201 	orr.w	r2, r2, #1
   176ae:	e008      	b.n	176c2 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
   176b0:	4641      	mov	r1, r8
   176b2:	4a3f      	ldr	r2, [pc, #252]	; (177b0 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   176b4:	4b3f      	ldr	r3, [pc, #252]	; (177b4 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   176b6:	4841      	ldr	r0, [pc, #260]	; (177bc <mpu_configure_regions_and_partition.constprop.0+0x170>)
   176b8:	1ad2      	subs	r2, r2, r3
   176ba:	08d2      	lsrs	r2, r2, #3
   176bc:	0192      	lsls	r2, r2, #6
   176be:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   176c2:	f016 fea2 	bl	2e40a <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   176c6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   176ca:	4620      	mov	r0, r4
   176cc:	b005      	add	sp, #20
   176ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   176d2:	f117 0f16 	cmn.w	r7, #22
   176d6:	d0e1      	beq.n	1769c <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   176d8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   176da:	42bb      	cmp	r3, r7
   176dc:	dbde      	blt.n	1769c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   176de:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   176e0:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   176e2:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   176e4:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   176e6:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   176ea:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   176ee:	e9d6 3200 	ldrd	r3, r2, [r6]
   176f2:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   176f4:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   176f6:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   176fa:	d11a      	bne.n	17732 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   176fc:	45d3      	cmp	fp, sl
   176fe:	d107      	bne.n	17710 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
   17700:	4631      	mov	r1, r6
   17702:	b2f8      	uxtb	r0, r7
   17704:	f018 feba 	bl	3047c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   17708:	f108 0801 	add.w	r8, r8, #1
   1770c:	360c      	adds	r6, #12
   1770e:	e7a6      	b.n	1765e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   17710:	4631      	mov	r1, r6
	MPU->RNR = index;
   17712:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   17714:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   17716:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1771a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1771e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   17720:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   17722:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   17724:	f018 feaa 	bl	3047c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   17728:	f110 0f16 	cmn.w	r0, #22
   1772c:	d0cb      	beq.n	176c6 <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
   1772e:	1c44      	adds	r4, r0, #1
   17730:	e7ea      	b.n	17708 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   17732:	3b01      	subs	r3, #1
   17734:	45d3      	cmp	fp, sl
   17736:	b2e0      	uxtb	r0, r4
   17738:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   1773c:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
   1773e:	d106      	bne.n	1774e <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   17740:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   17742:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   17744:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   17748:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1774a:	612b      	str	r3, [r5, #16]
			reg_index =
   1774c:	e7ea      	b.n	17724 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1774e:	6929      	ldr	r1, [r5, #16]
   17750:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   17754:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   17756:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   17758:	4631      	mov	r1, r6
   1775a:	f018 fe8f 	bl	3047c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1775e:	f110 0f16 	cmn.w	r0, #22
   17762:	d0b0      	beq.n	176c6 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
   17764:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
   17766:	68ea      	ldr	r2, [r5, #12]
   17768:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1776c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   17770:	f362 0304 	bfi	r3, r2, #0, #5
   17774:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   17778:	692b      	ldr	r3, [r5, #16]
   1777a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1777e:	085b      	lsrs	r3, r3, #1
   17780:	f363 1247 	bfi	r2, r3, #5, #3
   17784:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   17788:	e9d6 3200 	ldrd	r3, r2, [r6]
   1778c:	4413      	add	r3, r2
   1778e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   17790:	f023 031f 	bic.w	r3, r3, #31
   17794:	445b      	add	r3, fp
   17796:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   1779a:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1779c:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   177a0:	4669      	mov	r1, sp
   177a2:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   177a4:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   177a6:	f7ff ff37 	bl	17618 <region_allocate_and_init>
   177aa:	e7bd      	b.n	17728 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   177ac:	e000ed90 	.word	0xe000ed90
   177b0:	000365a8 	.word	0x000365a8
   177b4:	000364b0 	.word	0x000364b0
   177b8:	000390e0 	.word	0x000390e0
   177bc:	000390bd 	.word	0x000390bd

000177c0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   177c0:	2205      	movs	r2, #5
   177c2:	4b03      	ldr	r3, [pc, #12]	; (177d0 <arm_core_mpu_enable+0x10>)
   177c4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   177c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   177ca:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   177ce:	4770      	bx	lr
   177d0:	e000ed90 	.word	0xe000ed90

000177d4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   177d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   177d8:	2200      	movs	r2, #0
   177da:	4b01      	ldr	r3, [pc, #4]	; (177e0 <arm_core_mpu_disable+0xc>)
   177dc:	605a      	str	r2, [r3, #4]
}
   177de:	4770      	bx	lr
   177e0:	e000ed90 	.word	0xe000ed90

000177e4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   177e4:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   177e6:	4d0d      	ldr	r5, [pc, #52]	; (1781c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   177e8:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   177ea:	782a      	ldrb	r2, [r5, #0]
   177ec:	f7ff ff2e 	bl	1764c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   177f0:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   177f2:	3016      	adds	r0, #22
   177f4:	d111      	bne.n	1781a <arm_core_mpu_configure_static_mpu_regions+0x36>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   177f6:	f240 1305 	movw	r3, #261	; 0x105
   177fa:	4a09      	ldr	r2, [pc, #36]	; (17820 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   177fc:	4909      	ldr	r1, [pc, #36]	; (17824 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   177fe:	480a      	ldr	r0, [pc, #40]	; (17828 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   17800:	f016 fac2 	bl	2dd88 <printk>
   17804:	4621      	mov	r1, r4
   17806:	4809      	ldr	r0, [pc, #36]	; (1782c <arm_core_mpu_configure_static_mpu_regions+0x48>)
   17808:	f016 fabe 	bl	2dd88 <printk>
			regions_num);
	}
}
   1780c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   17810:	f240 1105 	movw	r1, #261	; 0x105
   17814:	4802      	ldr	r0, [pc, #8]	; (17820 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   17816:	f016 bd9d 	b.w	2e354 <assert_post_action>
}
   1781a:	bd38      	pop	{r3, r4, r5, pc}
   1781c:	2001b913 	.word	0x2001b913
   17820:	00039103 	.word	0x00039103
   17824:	0003e845 	.word	0x0003e845
   17828:	00037f2c 	.word	0x00037f2c
   1782c:	0003913a 	.word	0x0003913a

00017830 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   17830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17834:	4e2f      	ldr	r6, [pc, #188]	; (178f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   17836:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   17838:	4605      	mov	r5, r0
   1783a:	f04f 0800 	mov.w	r8, #0
   1783e:	46b3      	mov	fp, r6
	MPU->RNR = index;
   17840:	4f2d      	ldr	r7, [pc, #180]	; (178f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   17842:	45c8      	cmp	r8, r9
   17844:	db02      	blt.n	1784c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   17846:	b003      	add	sp, #12
   17848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   1784c:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17850:	f1ba 0f00 	cmp.w	sl, #0
   17854:	d049      	beq.n	178ea <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   17856:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   17858:	4608      	mov	r0, r1
   1785a:	9101      	str	r1, [sp, #4]
   1785c:	f018 fe05 	bl	3046a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   17860:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   17862:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   17864:	eb0a 0001 	add.w	r0, sl, r1
   17868:	3801      	subs	r0, #1
   1786a:	f018 fdfe 	bl	3046a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1786e:	4284      	cmp	r4, r0
   17870:	f04f 0214 	mov.w	r2, #20
   17874:	4b21      	ldr	r3, [pc, #132]	; (178fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   17876:	d018      	beq.n	178aa <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   17878:	f06f 0315 	mvn.w	r3, #21
   1787c:	fb02 f808 	mul.w	r8, r2, r8
   17880:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   17884:	f240 1315 	movw	r3, #277	; 0x115
   17888:	4a1d      	ldr	r2, [pc, #116]	; (17900 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   1788a:	491e      	ldr	r1, [pc, #120]	; (17904 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1788c:	481e      	ldr	r0, [pc, #120]	; (17908 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1788e:	f016 fa7b 	bl	2dd88 <printk>
   17892:	4649      	mov	r1, r9
   17894:	481d      	ldr	r0, [pc, #116]	; (1790c <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   17896:	f016 fa77 	bl	2dd88 <printk>
   1789a:	f240 1115 	movw	r1, #277	; 0x115
   1789e:	4818      	ldr	r0, [pc, #96]	; (17900 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   178a0:	b003      	add	sp, #12
   178a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   178a6:	f016 bd55 	b.w	2e354 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   178aa:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   178ae:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   178b0:	d0e8      	beq.n	17884 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   178b2:	7819      	ldrb	r1, [r3, #0]
   178b4:	42a1      	cmp	r1, r4
   178b6:	dde5      	ble.n	17884 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   178b8:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   178bc:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   178be:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   178c0:	68fc      	ldr	r4, [r7, #12]
   178c2:	f100 0108 	add.w	r1, r0, #8
   178c6:	7b00      	ldrb	r0, [r0, #12]
   178c8:	f364 0004 	bfi	r0, r4, #0, #5
   178cc:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   178ce:	6938      	ldr	r0, [r7, #16]
   178d0:	790c      	ldrb	r4, [r1, #4]
   178d2:	0840      	lsrs	r0, r0, #1
   178d4:	f360 1447 	bfi	r4, r0, #5, #3
   178d8:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   178da:	68f9      	ldr	r1, [r7, #12]
   178dc:	f021 011f 	bic.w	r1, r1, #31
   178e0:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   178e2:	6939      	ldr	r1, [r7, #16]
   178e4:	f021 011f 	bic.w	r1, r1, #31
   178e8:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   178ea:	f108 0801 	add.w	r8, r8, #1
   178ee:	3614      	adds	r6, #20
   178f0:	350c      	adds	r5, #12
   178f2:	e7a6      	b.n	17842 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   178f4:	2001615c 	.word	0x2001615c
   178f8:	e000ed90 	.word	0xe000ed90
   178fc:	2001b913 	.word	0x2001b913
   17900:	00039103 	.word	0x00039103
   17904:	0003e845 	.word	0x0003e845
   17908:	00037f2c 	.word	0x00037f2c
   1790c:	00039166 	.word	0x00039166

00017910 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   17910:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   17912:	4e20      	ldr	r6, [pc, #128]	; (17994 <z_arm_mpu_init+0x84>)
   17914:	6835      	ldr	r5, [r6, #0]
   17916:	2d10      	cmp	r5, #16
   17918:	d913      	bls.n	17942 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1791a:	f44f 739e 	mov.w	r3, #316	; 0x13c
   1791e:	4a1e      	ldr	r2, [pc, #120]	; (17998 <z_arm_mpu_init+0x88>)
   17920:	491e      	ldr	r1, [pc, #120]	; (1799c <z_arm_mpu_init+0x8c>)
   17922:	481f      	ldr	r0, [pc, #124]	; (179a0 <z_arm_mpu_init+0x90>)
   17924:	f016 fa30 	bl	2dd88 <printk>
   17928:	2210      	movs	r2, #16
   1792a:	4629      	mov	r1, r5
   1792c:	481d      	ldr	r0, [pc, #116]	; (179a4 <z_arm_mpu_init+0x94>)
   1792e:	f016 fa2b 	bl	2dd88 <printk>
   17932:	4819      	ldr	r0, [pc, #100]	; (17998 <z_arm_mpu_init+0x88>)
   17934:	f44f 719e 	mov.w	r1, #316	; 0x13c
   17938:	f016 fd0c 	bl	2e354 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   1793c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   17940:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   17942:	f7ff ff47 	bl	177d4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   17946:	2000      	movs	r0, #0
	MPU->MAIR0 =
   17948:	4c17      	ldr	r4, [pc, #92]	; (179a8 <z_arm_mpu_init+0x98>)
   1794a:	4a18      	ldr	r2, [pc, #96]	; (179ac <z_arm_mpu_init+0x9c>)
   1794c:	6322      	str	r2, [r4, #48]	; 0x30
   1794e:	4285      	cmp	r5, r0
   17950:	d119      	bne.n	17986 <z_arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   17952:	4b17      	ldr	r3, [pc, #92]	; (179b0 <z_arm_mpu_init+0xa0>)
   17954:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   17956:	f7ff ff33 	bl	177c0 <arm_core_mpu_enable>
	__ASSERT(
   1795a:	6823      	ldr	r3, [r4, #0]
   1795c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   17960:	2b10      	cmp	r3, #16
   17962:	d00e      	beq.n	17982 <z_arm_mpu_init+0x72>
   17964:	4913      	ldr	r1, [pc, #76]	; (179b4 <z_arm_mpu_init+0xa4>)
   17966:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   1796a:	4a0b      	ldr	r2, [pc, #44]	; (17998 <z_arm_mpu_init+0x88>)
   1796c:	480c      	ldr	r0, [pc, #48]	; (179a0 <z_arm_mpu_init+0x90>)
   1796e:	f016 fa0b 	bl	2dd88 <printk>
   17972:	4811      	ldr	r0, [pc, #68]	; (179b8 <z_arm_mpu_init+0xa8>)
   17974:	f016 fa08 	bl	2dd88 <printk>
   17978:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   1797c:	4806      	ldr	r0, [pc, #24]	; (17998 <z_arm_mpu_init+0x88>)
   1797e:	f016 fce9 	bl	2e354 <assert_post_action>
	return 0;
   17982:	2000      	movs	r0, #0
   17984:	e7dc      	b.n	17940 <z_arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   17986:	6871      	ldr	r1, [r6, #4]
   17988:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1798c:	f7ff fe2c 	bl	175e8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   17990:	3001      	adds	r0, #1
   17992:	e7dc      	b.n	1794e <z_arm_mpu_init+0x3e>
   17994:	00036a24 	.word	0x00036a24
   17998:	00039103 	.word	0x00039103
   1799c:	0003e845 	.word	0x0003e845
   179a0:	00037f2c 	.word	0x00037f2c
   179a4:	00039195 	.word	0x00039195
   179a8:	e000ed90 	.word	0xe000ed90
   179ac:	0044ffaa 	.word	0x0044ffaa
   179b0:	2001b913 	.word	0x2001b913
   179b4:	000391c9 	.word	0x000391c9
   179b8:	0003921a 	.word	0x0003921a

000179bc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   179bc:	4b01      	ldr	r3, [pc, #4]	; (179c4 <__stdout_hook_install+0x8>)
   179be:	6018      	str	r0, [r3, #0]
}
   179c0:	4770      	bx	lr
   179c2:	bf00      	nop
   179c4:	20014770 	.word	0x20014770

000179c8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   179c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   179ca:	460d      	mov	r5, r1
   179cc:	4f09      	ldr	r7, [pc, #36]	; (179f4 <z_impl_zephyr_write_stdout+0x2c>)
   179ce:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   179d0:	f1c0 0401 	rsb	r4, r0, #1
   179d4:	19a3      	adds	r3, r4, r6
   179d6:	429d      	cmp	r5, r3
   179d8:	dc01      	bgt.n	179de <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   179da:	4628      	mov	r0, r5
   179dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   179de:	7873      	ldrb	r3, [r6, #1]
   179e0:	2b0a      	cmp	r3, #10
   179e2:	d102      	bne.n	179ea <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   179e4:	200d      	movs	r0, #13
   179e6:	683b      	ldr	r3, [r7, #0]
   179e8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   179ea:	683b      	ldr	r3, [r7, #0]
   179ec:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   179f0:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   179f2:	e7ef      	b.n	179d4 <z_impl_zephyr_write_stdout+0xc>
   179f4:	20014770 	.word	0x20014770

000179f8 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(intptr_t count)
{
   179f8:	b510      	push	{r4, lr}
   179fa:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   179fc:	f04f 32ff 	mov.w	r2, #4294967295
   17a00:	f04f 33ff 	mov.w	r3, #4294967295
   17a04:	480a      	ldr	r0, [pc, #40]	; (17a30 <_sbrk+0x38>)
   17a06:	f016 fa4d 	bl	2dea4 <sys_sem_take>
	ptr = ((char *)HEAP_BASE) + heap_sz;
   17a0a:	490a      	ldr	r1, [pc, #40]	; (17a34 <_sbrk+0x3c>)
   17a0c:	680b      	ldr	r3, [r1, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   17a0e:	18e0      	adds	r0, r4, r3
   17a10:	4c09      	ldr	r4, [pc, #36]	; (17a38 <_sbrk+0x40>)
   17a12:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   17a16:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   17a1a:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   17a1c:	bf2e      	itee	cs
   17a1e:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   17a22:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   17a24:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   17a26:	4802      	ldr	r0, [pc, #8]	; (17a30 <_sbrk+0x38>)
   17a28:	f016 fa37 	bl	2de9a <sys_sem_give>

	return ret;
}
   17a2c:	4620      	mov	r0, r4
   17a2e:	bd10      	pop	{r4, pc}
   17a30:	20014fb0 	.word	0x20014fb0
   17a34:	20016170 	.word	0x20016170
   17a38:	20028024 	.word	0x20028024

00017a3c <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   17a3c:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   17a3e:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   17a40:	4804      	ldr	r0, [pc, #16]	; (17a54 <__chk_fail+0x18>)
   17a42:	f7ff ffc1 	bl	179c8 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   17a46:	4040      	eors	r0, r0
   17a48:	f380 8811 	msr	BASEPRI, r0
   17a4c:	f04f 0003 	mov.w	r0, #3
   17a50:	df02      	svc	2
	CODE_UNREACHABLE;
   17a52:	bf00      	nop
   17a54:	0003923b 	.word	0x0003923b

00017a58 <thingy91_board_init>:
#endif
	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   17a58:	b530      	push	{r4, r5, lr}
   17a5a:	b0a3      	sub	sp, #140	; 0x8c
	return z_impl_zsock_socket(family, type, proto);
   17a5c:	f240 2201 	movw	r2, #513	; 0x201
   17a60:	2102      	movs	r1, #2
   17a62:	2066      	movs	r0, #102	; 0x66
   17a64:	f7fd fd9e 	bl	155a4 <z_impl_zsock_socket>
	if (at_socket_fd == -1) {
   17a68:	1c43      	adds	r3, r0, #1
   17a6a:	4604      	mov	r4, r0
   17a6c:	d117      	bne.n	17a9e <thingy91_board_init+0x46>
   17a6e:	4b53      	ldr	r3, [pc, #332]	; (17bbc <thingy91_board_init+0x164>)
   17a70:	4953      	ldr	r1, [pc, #332]	; (17bc0 <thingy91_board_init+0x168>)
		LOG_ERR("AT socket could not be opened");
   17a72:	4854      	ldr	r0, [pc, #336]	; (17bc4 <thingy91_board_init+0x16c>)
   17a74:	1ac9      	subs	r1, r1, r3
   17a76:	08c9      	lsrs	r1, r1, #3
   17a78:	0189      	lsls	r1, r1, #6
   17a7a:	f041 0101 	orr.w	r1, r1, #1
   17a7e:	f016 fcb7 	bl	2e3f0 <log_0>
		return -EFAULT;
   17a82:	f06f 050d 	mvn.w	r5, #13
   17a86:	4b4d      	ldr	r3, [pc, #308]	; (17bbc <thingy91_board_init+0x164>)
   17a88:	4a4d      	ldr	r2, [pc, #308]	; (17bc0 <thingy91_board_init+0x168>)
	int err;

	err = thingy91_magpio_configure();
	if (err) {
		LOG_ERR("thingy91_magpio_configure failed with error: %d", err);
   17a8a:	4629      	mov	r1, r5
   17a8c:	1ad2      	subs	r2, r2, r3
   17a8e:	08d2      	lsrs	r2, r2, #3
   17a90:	0192      	lsls	r2, r2, #6
   17a92:	484d      	ldr	r0, [pc, #308]	; (17bc8 <thingy91_board_init+0x170>)
   17a94:	f042 0201 	orr.w	r2, r2, #1
   17a98:	f016 fcb7 	bl	2e40a <log_1>
		return err;
   17a9c:	e08a      	b.n	17bb4 <thingy91_board_init+0x15c>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   17a9e:	2500      	movs	r5, #0
   17aa0:	2210      	movs	r2, #16
   17aa2:	462b      	mov	r3, r5
   17aa4:	e9cd 5500 	strd	r5, r5, [sp]
   17aa8:	4948      	ldr	r1, [pc, #288]	; (17bcc <thingy91_board_init+0x174>)
   17aaa:	f016 ffa8 	bl	2e9fe <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_TRACE)) {
   17aae:	2810      	cmp	r0, #16
   17ab0:	d019      	beq.n	17ae6 <thingy91_board_init+0x8e>
   17ab2:	4b42      	ldr	r3, [pc, #264]	; (17bbc <thingy91_board_init+0x164>)
   17ab4:	4942      	ldr	r1, [pc, #264]	; (17bc0 <thingy91_board_init+0x168>)
		LOG_ERR("XMODEMTRACE command failed");
   17ab6:	4846      	ldr	r0, [pc, #280]	; (17bd0 <thingy91_board_init+0x178>)
   17ab8:	1ac9      	subs	r1, r1, r3
   17aba:	08c9      	lsrs	r1, r1, #3
   17abc:	0189      	lsls	r1, r1, #6
   17abe:	f041 0101 	orr.w	r1, r1, #1
   17ac2:	f016 fc95 	bl	2e3f0 <log_0>
		close(at_socket_fd);
   17ac6:	4620      	mov	r0, r4
   17ac8:	f018 fcf6 	bl	304b8 <close>
		__ASSERT_NO_MSG(false);
   17acc:	4941      	ldr	r1, [pc, #260]	; (17bd4 <thingy91_board_init+0x17c>)
   17ace:	2335      	movs	r3, #53	; 0x35
   17ad0:	4a41      	ldr	r2, [pc, #260]	; (17bd8 <thingy91_board_init+0x180>)
   17ad2:	4842      	ldr	r0, [pc, #264]	; (17bdc <thingy91_board_init+0x184>)
   17ad4:	f016 f958 	bl	2dd88 <printk>
   17ad8:	2135      	movs	r1, #53	; 0x35
		__ASSERT_NO_MSG(false);
   17ada:	483f      	ldr	r0, [pc, #252]	; (17bd8 <thingy91_board_init+0x180>)
   17adc:	f016 fc3a 	bl	2e354 <assert_post_action>
		return -EIO;
   17ae0:	f06f 0504 	mvn.w	r5, #4
   17ae4:	e7cf      	b.n	17a86 <thingy91_board_init+0x2e>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   17ae6:	2280      	movs	r2, #128	; 0x80
   17ae8:	462b      	mov	r3, r5
   17aea:	4620      	mov	r0, r4
   17aec:	e9cd 5500 	strd	r5, r5, [sp]
   17af0:	a902      	add	r1, sp, #8
   17af2:	f016 ffdb 	bl	2eaac <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   17af6:	2801      	cmp	r0, #1
   17af8:	dc14      	bgt.n	17b24 <thingy91_board_init+0xcc>
   17afa:	4b30      	ldr	r3, [pc, #192]	; (17bbc <thingy91_board_init+0x164>)
   17afc:	4930      	ldr	r1, [pc, #192]	; (17bc0 <thingy91_board_init+0x168>)
		LOG_ERR("XMODEMTRACE received unexpected response");
   17afe:	4838      	ldr	r0, [pc, #224]	; (17be0 <thingy91_board_init+0x188>)
   17b00:	1ac9      	subs	r1, r1, r3
   17b02:	08c9      	lsrs	r1, r1, #3
   17b04:	0189      	lsls	r1, r1, #6
   17b06:	f041 0101 	orr.w	r1, r1, #1
   17b0a:	f016 fc71 	bl	2e3f0 <log_0>
		close(at_socket_fd);
   17b0e:	4620      	mov	r0, r4
   17b10:	f018 fcd2 	bl	304b8 <close>
		__ASSERT_NO_MSG(false);
   17b14:	492f      	ldr	r1, [pc, #188]	; (17bd4 <thingy91_board_init+0x17c>)
   17b16:	233f      	movs	r3, #63	; 0x3f
   17b18:	4a2f      	ldr	r2, [pc, #188]	; (17bd8 <thingy91_board_init+0x180>)
   17b1a:	4830      	ldr	r0, [pc, #192]	; (17bdc <thingy91_board_init+0x184>)
   17b1c:	f016 f934 	bl	2dd88 <printk>
   17b20:	213f      	movs	r1, #63	; 0x3f
   17b22:	e7da      	b.n	17ada <thingy91_board_init+0x82>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   17b24:	2201      	movs	r2, #1
   17b26:	482f      	ldr	r0, [pc, #188]	; (17be4 <thingy91_board_init+0x18c>)
   17b28:	a902      	add	r1, sp, #8
   17b2a:	f01d fd1e 	bl	3556a <memcmp>
	if ((buffer < 2) ||
   17b2e:	4605      	mov	r5, r0
   17b30:	2800      	cmp	r0, #0
   17b32:	d1e2      	bne.n	17afa <thingy91_board_init+0xa2>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   17b34:	225c      	movs	r2, #92	; 0x5c
   17b36:	4603      	mov	r3, r0
   17b38:	e9cd 0000 	strd	r0, r0, [sp]
   17b3c:	492a      	ldr	r1, [pc, #168]	; (17be8 <thingy91_board_init+0x190>)
   17b3e:	4620      	mov	r0, r4
   17b40:	f016 ff5d 	bl	2e9fe <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_MAGPIO)) {
   17b44:	285c      	cmp	r0, #92	; 0x5c
   17b46:	d008      	beq.n	17b5a <thingy91_board_init+0x102>
   17b48:	491d      	ldr	r1, [pc, #116]	; (17bc0 <thingy91_board_init+0x168>)
   17b4a:	4b1c      	ldr	r3, [pc, #112]	; (17bbc <thingy91_board_init+0x164>)
		LOG_ERR("MAGPIO command failed");
   17b4c:	4827      	ldr	r0, [pc, #156]	; (17bec <thingy91_board_init+0x194>)
   17b4e:	1ac9      	subs	r1, r1, r3
   17b50:	08c9      	lsrs	r1, r1, #3
   17b52:	0189      	lsls	r1, r1, #6
   17b54:	f041 0101 	orr.w	r1, r1, #1
   17b58:	e011      	b.n	17b7e <thingy91_board_init+0x126>
   17b5a:	2217      	movs	r2, #23
   17b5c:	462b      	mov	r3, r5
   17b5e:	4620      	mov	r0, r4
   17b60:	e9cd 5500 	strd	r5, r5, [sp]
   17b64:	4922      	ldr	r1, [pc, #136]	; (17bf0 <thingy91_board_init+0x198>)
   17b66:	f016 ff4a 	bl	2e9fe <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_COEX0)) {
   17b6a:	2817      	cmp	r0, #23
   17b6c:	d00d      	beq.n	17b8a <thingy91_board_init+0x132>
   17b6e:	4914      	ldr	r1, [pc, #80]	; (17bc0 <thingy91_board_init+0x168>)
   17b70:	4b12      	ldr	r3, [pc, #72]	; (17bbc <thingy91_board_init+0x164>)
		LOG_ERR("COEX0 command failed");
   17b72:	4820      	ldr	r0, [pc, #128]	; (17bf4 <thingy91_board_init+0x19c>)
   17b74:	1ac9      	subs	r1, r1, r3
   17b76:	08c9      	lsrs	r1, r1, #3
   17b78:	0189      	lsls	r1, r1, #6
   17b7a:	f041 0101 	orr.w	r1, r1, #1
   17b7e:	f016 fc37 	bl	2e3f0 <log_0>
		close(at_socket_fd);
   17b82:	4620      	mov	r0, r4
   17b84:	f018 fc98 	bl	304b8 <close>
   17b88:	e7aa      	b.n	17ae0 <thingy91_board_init+0x88>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   17b8a:	2280      	movs	r2, #128	; 0x80
   17b8c:	462b      	mov	r3, r5
   17b8e:	4620      	mov	r0, r4
   17b90:	e9cd 5500 	strd	r5, r5, [sp]
   17b94:	a902      	add	r1, sp, #8
   17b96:	f016 ff89 	bl	2eaac <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   17b9a:	2801      	cmp	r0, #1
   17b9c:	ddd4      	ble.n	17b48 <thingy91_board_init+0xf0>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   17b9e:	2201      	movs	r2, #1
   17ba0:	4810      	ldr	r0, [pc, #64]	; (17be4 <thingy91_board_init+0x18c>)
   17ba2:	a902      	add	r1, sp, #8
   17ba4:	f01d fce1 	bl	3556a <memcmp>
	if ((buffer < 2) ||
   17ba8:	4605      	mov	r5, r0
   17baa:	2800      	cmp	r0, #0
   17bac:	d1cc      	bne.n	17b48 <thingy91_board_init+0xf0>
	close(at_socket_fd);
   17bae:	4620      	mov	r0, r4
   17bb0:	f018 fc82 	bl	304b8 <close>
	}

	return 0;
}
   17bb4:	4628      	mov	r0, r5
   17bb6:	b023      	add	sp, #140	; 0x8c
   17bb8:	bd30      	pop	{r4, r5, pc}
   17bba:	bf00      	nop
   17bbc:	000364b0 	.word	0x000364b0
   17bc0:	000364c8 	.word	0x000364c8
   17bc4:	00039268 	.word	0x00039268
   17bc8:	000393bc 	.word	0x000393bc
   17bcc:	00039286 	.word	0x00039286
   17bd0:	00039297 	.word	0x00039297
   17bd4:	0003e845 	.word	0x0003e845
   17bd8:	000392b2 	.word	0x000392b2
   17bdc:	00037f2c 	.word	0x00037f2c
   17be0:	000392f0 	.word	0x000392f0
   17be4:	00039319 	.word	0x00039319
   17be8:	0003931c 	.word	0x0003931c
   17bec:	00039379 	.word	0x00039379
   17bf0:	0003938f 	.word	0x0003938f
   17bf4:	000393a7 	.word	0x000393a7

00017bf8 <gpio_pin_set.constprop.0>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17bf8:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   17bfa:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17bfc:	681b      	ldr	r3, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   17bfe:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17c00:	02d9      	lsls	r1, r3, #11
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   17c02:	4604      	mov	r4, r0
	const struct gpio_driver_data *const data =
   17c04:	6906      	ldr	r6, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17c06:	d40e      	bmi.n	17c26 <gpio_pin_set.constprop.0+0x2e>
   17c08:	4919      	ldr	r1, [pc, #100]	; (17c70 <gpio_pin_set.constprop.0+0x78>)
   17c0a:	f240 439f 	movw	r3, #1183	; 0x49f
   17c0e:	4a19      	ldr	r2, [pc, #100]	; (17c74 <gpio_pin_set.constprop.0+0x7c>)
   17c10:	4819      	ldr	r0, [pc, #100]	; (17c78 <gpio_pin_set.constprop.0+0x80>)
   17c12:	f016 f8b9 	bl	2dd88 <printk>
   17c16:	4819      	ldr	r0, [pc, #100]	; (17c7c <gpio_pin_set.constprop.0+0x84>)
   17c18:	f016 f8b6 	bl	2dd88 <printk>
   17c1c:	f240 419f 	movw	r1, #1183	; 0x49f
   17c20:	4814      	ldr	r0, [pc, #80]	; (17c74 <gpio_pin_set.constprop.0+0x7c>)
   17c22:	f016 fb97 	bl	2e354 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   17c26:	6833      	ldr	r3, [r6, #0]
   17c28:	02da      	lsls	r2, r3, #11
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17c2a:	6863      	ldr	r3, [r4, #4]
   17c2c:	bf48      	it	mi
   17c2e:	f085 0501 	eormi.w	r5, r5, #1
   17c32:	681b      	ldr	r3, [r3, #0]
   17c34:	02db      	lsls	r3, r3, #11
   17c36:	d40e      	bmi.n	17c56 <gpio_pin_set.constprop.0+0x5e>
   17c38:	490d      	ldr	r1, [pc, #52]	; (17c70 <gpio_pin_set.constprop.0+0x78>)
   17c3a:	f240 4375 	movw	r3, #1141	; 0x475
   17c3e:	4a0d      	ldr	r2, [pc, #52]	; (17c74 <gpio_pin_set.constprop.0+0x7c>)
   17c40:	480d      	ldr	r0, [pc, #52]	; (17c78 <gpio_pin_set.constprop.0+0x80>)
   17c42:	f016 f8a1 	bl	2dd88 <printk>
   17c46:	480d      	ldr	r0, [pc, #52]	; (17c7c <gpio_pin_set.constprop.0+0x84>)
   17c48:	f016 f89e 	bl	2dd88 <printk>
   17c4c:	f240 4175 	movw	r1, #1141	; 0x475
   17c50:	4808      	ldr	r0, [pc, #32]	; (17c74 <gpio_pin_set.constprop.0+0x7c>)
   17c52:	f016 fb7f 	bl	2e354 <assert_post_action>
	if (value != 0)	{
   17c56:	b13d      	cbz	r5, 17c68 <gpio_pin_set.constprop.0+0x70>
	return api->port_set_bits_raw(port, pins);
   17c58:	68a3      	ldr	r3, [r4, #8]
   17c5a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   17c5c:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   17c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   17c62:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   17c66:	4718      	bx	r3
   17c68:	68a3      	ldr	r3, [r4, #8]
   17c6a:	691b      	ldr	r3, [r3, #16]
   17c6c:	e7f6      	b.n	17c5c <gpio_pin_set.constprop.0+0x64>
   17c6e:	bf00      	nop
   17c70:	00039426 	.word	0x00039426
   17c74:	000393fc 	.word	0x000393fc
   17c78:	00037f2c 	.word	0x00037f2c
   17c7c:	00039464 	.word	0x00039464

00017c80 <bt_hci_transport_setup>:
#include <device.h>

#define RESET_PIN 20

int bt_hci_transport_setup(struct device *h4)
{
   17c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17c82:	4606      	mov	r6, r0
   17c84:	4825      	ldr	r0, [pc, #148]	; (17d1c <bt_hci_transport_setup+0x9c>)
   17c86:	f010 fca7 	bl	285d8 <z_impl_device_get_binding>
	int err;
	char c;
	const struct device *port;

	port = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0)));
	if (!port) {
   17c8a:	4605      	mov	r5, r0
   17c8c:	2800      	cmp	r0, #0
   17c8e:	d041      	beq.n	17d14 <bt_hci_transport_setup+0x94>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17c90:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
   17c92:	6887      	ldr	r7, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17c94:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   17c96:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17c98:	02db      	lsls	r3, r3, #11
   17c9a:	d40e      	bmi.n	17cba <bt_hci_transport_setup+0x3a>
   17c9c:	4920      	ldr	r1, [pc, #128]	; (17d20 <bt_hci_transport_setup+0xa0>)
   17c9e:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   17ca2:	4a20      	ldr	r2, [pc, #128]	; (17d24 <bt_hci_transport_setup+0xa4>)
   17ca4:	4820      	ldr	r0, [pc, #128]	; (17d28 <bt_hci_transport_setup+0xa8>)
   17ca6:	f016 f86f 	bl	2dd88 <printk>
   17caa:	4820      	ldr	r0, [pc, #128]	; (17d2c <bt_hci_transport_setup+0xac>)
   17cac:	f016 f86c 	bl	2dd88 <printk>
   17cb0:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   17cb4:	481b      	ldr	r0, [pc, #108]	; (17d24 <bt_hci_transport_setup+0xa4>)
   17cb6:	f016 fb4d 	bl	2e354 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   17cba:	6823      	ldr	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   17cbc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   17cc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17cc4:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   17cc6:	2114      	movs	r1, #20
   17cc8:	4628      	mov	r0, r5
   17cca:	683b      	ldr	r3, [r7, #0]
   17ccc:	4798      	blx	r3
		return -EIO;
	}

	/* Configure pin as output and initialize it to low. */
	err = gpio_pin_configure(port, RESET_PIN, GPIO_OUTPUT_LOW);
	if (err) {
   17cce:	4604      	mov	r4, r0
   17cd0:	b9e8      	cbnz	r0, 17d0e <bt_hci_transport_setup+0x8e>
	/* Reset the nRF52840 and let it wait until the pin is
	 * pulled low again before running to main to ensure
	 * that it won't send any data until the H4 device
	 * is setup and ready to receive.
	 */
	err = gpio_pin_set(port, RESET_PIN, 1);
   17cd2:	2101      	movs	r1, #1
   17cd4:	4628      	mov	r0, r5
   17cd6:	f7ff ff8f 	bl	17bf8 <gpio_pin_set.constprop.0>
	if (err) {
   17cda:	4604      	mov	r4, r0
   17cdc:	b9b8      	cbnz	r0, 17d0e <bt_hci_transport_setup+0x8e>
	return z_impl_k_sleep(timeout);
   17cde:	f44f 70a4 	mov.w	r0, #328	; 0x148
   17ce2:	2100      	movs	r1, #0
   17ce4:	f013 fcfc 	bl	2b6e0 <z_impl_k_sleep>
	if (api->fifo_read != NULL) {
   17ce8:	68b3      	ldr	r3, [r6, #8]
   17cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17cec:	b133      	cbz	r3, 17cfc <bt_hci_transport_setup+0x7c>
		return api->fifo_read(dev, rx_data, size);
   17cee:	2201      	movs	r2, #1
   17cf0:	4630      	mov	r0, r6
   17cf2:	f10d 0107 	add.w	r1, sp, #7
   17cf6:	4798      	blx	r3
	 * on the lines are received and drained correctly.
	 */
	k_sleep(K_MSEC(10));

	/* Drain bytes */
	while (uart_fifo_read(h4, &c, 1)) {
   17cf8:	2800      	cmp	r0, #0
   17cfa:	d1f5      	bne.n	17ce8 <bt_hci_transport_setup+0x68>
		continue;
	}

	/* We are ready, let the nRF52840 run to main */
	err = gpio_pin_set(port, RESET_PIN, 0);
   17cfc:	2100      	movs	r1, #0
   17cfe:	4628      	mov	r0, r5
   17d00:	f7ff ff7a 	bl	17bf8 <gpio_pin_set.constprop.0>
	if (err) {
   17d04:	4604      	mov	r4, r0
   17d06:	b910      	cbnz	r0, 17d0e <bt_hci_transport_setup+0x8e>
		return err;
	}
	printk("Reset of nRF52840 complete\n");
   17d08:	4809      	ldr	r0, [pc, #36]	; (17d30 <bt_hci_transport_setup+0xb0>)
   17d0a:	f016 f83d 	bl	2dd88 <printk>

	return 0;
}
   17d0e:	4620      	mov	r0, r4
   17d10:	b003      	add	sp, #12
   17d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EIO;
   17d14:	f06f 0404 	mvn.w	r4, #4
   17d18:	e7f9      	b.n	17d0e <bt_hci_transport_setup+0x8e>
   17d1a:	bf00      	nop
   17d1c:	00039476 	.word	0x00039476
   17d20:	00039426 	.word	0x00039426
   17d24:	000393fc 	.word	0x000393fc
   17d28:	00037f2c 	.word	0x00037f2c
   17d2c:	00039464 	.word	0x00039464
   17d30:	0003947d 	.word	0x0003947d

00017d34 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   17d34:	4b0e      	ldr	r3, [pc, #56]	; (17d70 <bt_hex_real+0x3c>)
   17d36:	2940      	cmp	r1, #64	; 0x40
   17d38:	bf28      	it	cs
   17d3a:	2140      	movcs	r1, #64	; 0x40
{
   17d3c:	b570      	push	{r4, r5, r6, lr}
   17d3e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   17d40:	4c0c      	ldr	r4, [pc, #48]	; (17d74 <bt_hex_real+0x40>)
   17d42:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   17d44:	42b0      	cmp	r0, r6
   17d46:	f103 0302 	add.w	r3, r3, #2
   17d4a:	d104      	bne.n	17d56 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   17d4c:	2300      	movs	r3, #0
   17d4e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   17d52:	4807      	ldr	r0, [pc, #28]	; (17d70 <bt_hex_real+0x3c>)
   17d54:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   17d56:	7802      	ldrb	r2, [r0, #0]
   17d58:	0912      	lsrs	r2, r2, #4
   17d5a:	5ca2      	ldrb	r2, [r4, r2]
   17d5c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   17d60:	f810 2b01 	ldrb.w	r2, [r0], #1
   17d64:	f002 020f 	and.w	r2, r2, #15
   17d68:	5ca2      	ldrb	r2, [r4, r2]
   17d6a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   17d6e:	e7e9      	b.n	17d44 <bt_hex_real+0x10>
   17d70:	2001b914 	.word	0x2001b914
   17d74:	000394de 	.word	0x000394de

00017d78 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   17d78:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   17d7a:	7803      	ldrb	r3, [r0, #0]
   17d7c:	b08b      	sub	sp, #44	; 0x2c
   17d7e:	4604      	mov	r4, r0
   17d80:	ad07      	add	r5, sp, #28
   17d82:	2b03      	cmp	r3, #3
   17d84:	d821      	bhi.n	17dca <bt_addr_le_str_real+0x52>
   17d86:	e8df f003 	tbb	[pc, r3]
   17d8a:	1a02      	.short	0x1a02
   17d8c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   17d8e:	4912      	ldr	r1, [pc, #72]	; (17dd8 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   17d90:	4628      	mov	r0, r5
   17d92:	f01d fd55 	bl	35840 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   17d96:	7863      	ldrb	r3, [r4, #1]
   17d98:	211e      	movs	r1, #30
   17d9a:	9304      	str	r3, [sp, #16]
   17d9c:	78a3      	ldrb	r3, [r4, #2]
   17d9e:	4a0f      	ldr	r2, [pc, #60]	; (17ddc <bt_addr_le_str_real+0x64>)
   17da0:	9303      	str	r3, [sp, #12]
   17da2:	78e3      	ldrb	r3, [r4, #3]
   17da4:	9505      	str	r5, [sp, #20]
   17da6:	9302      	str	r3, [sp, #8]
   17da8:	7923      	ldrb	r3, [r4, #4]
   17daa:	480d      	ldr	r0, [pc, #52]	; (17de0 <bt_addr_le_str_real+0x68>)
   17dac:	9301      	str	r3, [sp, #4]
   17dae:	7963      	ldrb	r3, [r4, #5]
   17db0:	9300      	str	r3, [sp, #0]
   17db2:	79a3      	ldrb	r3, [r4, #6]
   17db4:	f015 fff5 	bl	2dda2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   17db8:	4809      	ldr	r0, [pc, #36]	; (17de0 <bt_addr_le_str_real+0x68>)
   17dba:	b00b      	add	sp, #44	; 0x2c
   17dbc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   17dbe:	4909      	ldr	r1, [pc, #36]	; (17de4 <bt_addr_le_str_real+0x6c>)
   17dc0:	e7e6      	b.n	17d90 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   17dc2:	4909      	ldr	r1, [pc, #36]	; (17de8 <bt_addr_le_str_real+0x70>)
   17dc4:	e7e4      	b.n	17d90 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   17dc6:	4909      	ldr	r1, [pc, #36]	; (17dec <bt_addr_le_str_real+0x74>)
   17dc8:	e7e2      	b.n	17d90 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   17dca:	210a      	movs	r1, #10
   17dcc:	4628      	mov	r0, r5
   17dce:	4a08      	ldr	r2, [pc, #32]	; (17df0 <bt_addr_le_str_real+0x78>)
   17dd0:	f015 ffe7 	bl	2dda2 <snprintk>
		break;
   17dd4:	e7df      	b.n	17d96 <bt_addr_le_str_real+0x1e>
   17dd6:	bf00      	nop
   17dd8:	00039499 	.word	0x00039499
   17ddc:	000394bb 	.word	0x000394bb
   17de0:	2001b995 	.word	0x2001b995
   17de4:	000394a0 	.word	0x000394a0
   17de8:	000394a7 	.word	0x000394a7
   17dec:	000394b1 	.word	0x000394b1
   17df0:	0003a2f1 	.word	0x0003a2f1

00017df4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   17df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17df6:	460b      	mov	r3, r1
	switch (src->type) {
   17df8:	7801      	ldrb	r1, [r0, #0]
{
   17dfa:	4602      	mov	r2, r0
	switch (src->type) {
   17dfc:	2901      	cmp	r1, #1
   17dfe:	d015      	beq.n	17e2c <uuid_to_uuid128+0x38>
   17e00:	2902      	cmp	r1, #2
   17e02:	d02b      	beq.n	17e5c <uuid_to_uuid128+0x68>
   17e04:	b989      	cbnz	r1, 17e2a <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   17e06:	461d      	mov	r5, r3
   17e08:	4c1b      	ldr	r4, [pc, #108]	; (17e78 <uuid_to_uuid128+0x84>)
   17e0a:	f104 0710 	add.w	r7, r4, #16
   17e0e:	462e      	mov	r6, r5
   17e10:	6820      	ldr	r0, [r4, #0]
   17e12:	6861      	ldr	r1, [r4, #4]
   17e14:	3408      	adds	r4, #8
   17e16:	c603      	stmia	r6!, {r0, r1}
   17e18:	42bc      	cmp	r4, r7
   17e1a:	4635      	mov	r5, r6
   17e1c:	d1f7      	bne.n	17e0e <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   17e1e:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   17e20:	7821      	ldrb	r1, [r4, #0]
   17e22:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   17e24:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   17e26:	0a12      	lsrs	r2, r2, #8
   17e28:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   17e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   17e2c:	461d      	mov	r5, r3
   17e2e:	4c12      	ldr	r4, [pc, #72]	; (17e78 <uuid_to_uuid128+0x84>)
   17e30:	f104 0710 	add.w	r7, r4, #16
   17e34:	462e      	mov	r6, r5
   17e36:	6820      	ldr	r0, [r4, #0]
   17e38:	6861      	ldr	r1, [r4, #4]
   17e3a:	3408      	adds	r4, #8
   17e3c:	c603      	stmia	r6!, {r0, r1}
   17e3e:	42bc      	cmp	r4, r7
   17e40:	4635      	mov	r5, r6
   17e42:	d1f7      	bne.n	17e34 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   17e44:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   17e46:	7821      	ldrb	r1, [r4, #0]
   17e48:	7031      	strb	r1, [r6, #0]
   17e4a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   17e4e:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   17e50:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   17e52:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   17e54:	0a12      	lsrs	r2, r2, #8
   17e56:	7399      	strb	r1, [r3, #14]
   17e58:	741a      	strb	r2, [r3, #16]
}
   17e5a:	e7e6      	b.n	17e2a <uuid_to_uuid128+0x36>
   17e5c:	f100 0510 	add.w	r5, r0, #16
   17e60:	461c      	mov	r4, r3
   17e62:	6810      	ldr	r0, [r2, #0]
   17e64:	6851      	ldr	r1, [r2, #4]
   17e66:	3208      	adds	r2, #8
   17e68:	c403      	stmia	r4!, {r0, r1}
   17e6a:	42aa      	cmp	r2, r5
   17e6c:	4623      	mov	r3, r4
   17e6e:	d1f7      	bne.n	17e60 <uuid_to_uuid128+0x6c>
   17e70:	7812      	ldrb	r2, [r2, #0]
   17e72:	7022      	strb	r2, [r4, #0]
   17e74:	e7d9      	b.n	17e2a <uuid_to_uuid128+0x36>
   17e76:	bf00      	nop
   17e78:	000394ef 	.word	0x000394ef

00017e7c <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   17e7c:	2801      	cmp	r0, #1
{
   17e7e:	b570      	push	{r4, r5, r6, lr}
   17e80:	4605      	mov	r5, r0
   17e82:	4616      	mov	r6, r2
   17e84:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   17e86:	d014      	beq.n	17eb2 <bt_buf_get_rx+0x36>
   17e88:	2803      	cmp	r0, #3
   17e8a:	d00e      	beq.n	17eaa <bt_buf_get_rx+0x2e>
   17e8c:	2805      	cmp	r0, #5
   17e8e:	d00c      	beq.n	17eaa <bt_buf_get_rx+0x2e>
   17e90:	490e      	ldr	r1, [pc, #56]	; (17ecc <bt_buf_get_rx+0x50>)
   17e92:	2338      	movs	r3, #56	; 0x38
   17e94:	4a0e      	ldr	r2, [pc, #56]	; (17ed0 <bt_buf_get_rx+0x54>)
   17e96:	480f      	ldr	r0, [pc, #60]	; (17ed4 <bt_buf_get_rx+0x58>)
   17e98:	f015 ff76 	bl	2dd88 <printk>
   17e9c:	480e      	ldr	r0, [pc, #56]	; (17ed8 <bt_buf_get_rx+0x5c>)
   17e9e:	f015 ff73 	bl	2dd88 <printk>
   17ea2:	2138      	movs	r1, #56	; 0x38
   17ea4:	480a      	ldr	r0, [pc, #40]	; (17ed0 <bt_buf_get_rx+0x54>)
   17ea6:	f016 fa55 	bl	2e354 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   17eaa:	4632      	mov	r2, r6
   17eac:	4623      	mov	r3, r4
   17eae:	480b      	ldr	r0, [pc, #44]	; (17edc <bt_buf_get_rx+0x60>)
   17eb0:	e000      	b.n	17eb4 <bt_buf_get_rx+0x38>
   17eb2:	480b      	ldr	r0, [pc, #44]	; (17ee0 <bt_buf_get_rx+0x64>)
   17eb4:	f019 fbe2 	bl	3167c <net_buf_alloc_fixed>
   17eb8:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   17eba:	b12c      	cbz	r4, 17ec8 <bt_buf_get_rx+0x4c>
	net_buf_simple_reserve(&buf->b, reserve);
   17ebc:	2100      	movs	r1, #0
   17ebe:	f104 0008 	add.w	r0, r4, #8
   17ec2:	f004 fefd 	bl	1ccc0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17ec6:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   17ec8:	4620      	mov	r0, r4
   17eca:	bd70      	pop	{r4, r5, r6, pc}
   17ecc:	0003952f 	.word	0x0003952f
   17ed0:	00039500 	.word	0x00039500
   17ed4:	00037f2c 	.word	0x00037f2c
   17ed8:	00039574 	.word	0x00039574
   17edc:	20015014 	.word	0x20015014
   17ee0:	20015098 	.word	0x20015098

00017ee4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   17ee4:	4602      	mov	r2, r0
   17ee6:	460b      	mov	r3, r1
   17ee8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   17eea:	f04f 0120 	mov.w	r1, #32
   17eee:	f3ef 8511 	mrs	r5, BASEPRI
   17ef2:	f381 8811 	msr	BASEPRI, r1
   17ef6:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
   17efa:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   17efc:	480b      	ldr	r0, [pc, #44]	; (17f2c <bt_buf_get_cmd_complete+0x48>)
   17efe:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
   17f02:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
   17f06:	f385 8811 	msr	BASEPRI, r5
   17f0a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   17f0e:	b924      	cbnz	r4, 17f1a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   17f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17f14:	2001      	movs	r0, #1
   17f16:	f7ff bfb1 	b.w	17e7c <bt_buf_get_rx>
   17f1a:	2301      	movs	r3, #1
   17f1c:	f104 0008 	add.w	r0, r4, #8
   17f20:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   17f22:	81a1      	strh	r1, [r4, #12]
   17f24:	f004 fecc 	bl	1ccc0 <net_buf_simple_reserve>
}
   17f28:	4620      	mov	r0, r4
   17f2a:	bd70      	pop	{r4, r5, r6, pc}
   17f2c:	20014500 	.word	0x20014500

00017f30 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   17f30:	b570      	push	{r4, r5, r6, lr}
   17f32:	4604      	mov	r4, r0
	switch (evt) {
   17f34:	2c0f      	cmp	r4, #15
{
   17f36:	460d      	mov	r5, r1
   17f38:	4610      	mov	r0, r2
   17f3a:	4619      	mov	r1, r3
	switch (evt) {
   17f3c:	d805      	bhi.n	17f4a <bt_buf_get_evt+0x1a>
   17f3e:	2c0d      	cmp	r4, #13
   17f40:	d912      	bls.n	17f68 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   17f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   17f46:	f7ff bfcd 	b.w	17ee4 <bt_buf_get_cmd_complete>
	switch (evt) {
   17f4a:	2c13      	cmp	r4, #19
   17f4c:	d10c      	bne.n	17f68 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   17f4e:	480b      	ldr	r0, [pc, #44]	; (17f7c <bt_buf_get_evt+0x4c>)
   17f50:	f019 fb94 	bl	3167c <net_buf_alloc_fixed>
			if (buf) {
   17f54:	4604      	mov	r4, r0
   17f56:	b128      	cbz	r0, 17f64 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   17f58:	2100      	movs	r1, #0
   17f5a:	3008      	adds	r0, #8
   17f5c:	f004 feb0 	bl	1ccc0 <net_buf_simple_reserve>
   17f60:	2301      	movs	r3, #1
   17f62:	7523      	strb	r3, [r4, #20]
}
   17f64:	4620      	mov	r0, r4
   17f66:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   17f68:	4602      	mov	r2, r0
   17f6a:	460b      	mov	r3, r1
		if (discardable) {
   17f6c:	b10d      	cbz	r5, 17f72 <bt_buf_get_evt+0x42>
   17f6e:	4804      	ldr	r0, [pc, #16]	; (17f80 <bt_buf_get_evt+0x50>)
   17f70:	e7ee      	b.n	17f50 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17f72:	2001      	movs	r0, #1
}
   17f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17f78:	f7ff bf80 	b.w	17e7c <bt_buf_get_rx>
   17f7c:	2001511c 	.word	0x2001511c
   17f80:	2001506c 	.word	0x2001506c

00017f84 <hci_data_buf_overflow>:
   17f84:	4905      	ldr	r1, [pc, #20]	; (17f9c <hci_data_buf_overflow+0x18>)
   17f86:	4a06      	ldr	r2, [pc, #24]	; (17fa0 <hci_data_buf_overflow+0x1c>)
	bt_conn_unref(conn);
}

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   17f88:	6883      	ldr	r3, [r0, #8]
   17f8a:	1a52      	subs	r2, r2, r1
   17f8c:	08d2      	lsrs	r2, r2, #3

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   17f8e:	0192      	lsls	r2, r2, #6
   17f90:	7819      	ldrb	r1, [r3, #0]
   17f92:	4804      	ldr	r0, [pc, #16]	; (17fa4 <hci_data_buf_overflow+0x20>)
   17f94:	f042 0202 	orr.w	r2, r2, #2
   17f98:	f016 ba37 	b.w	2e40a <log_1>
   17f9c:	000364b0 	.word	0x000364b0
   17fa0:	00036508 	.word	0x00036508
   17fa4:	0003959b 	.word	0x0003959b

00017fa8 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   17fa8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17faa:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   17fac:	781a      	ldrb	r2, [r3, #0]
   17fae:	b972      	cbnz	r2, 17fce <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17fb0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   17fb4:	4620      	mov	r0, r4
   17fb6:	f002 f86d 	bl	1a094 <bt_conn_lookup_handle>
	if (!conn) {
   17fba:	4605      	mov	r5, r0
   17fbc:	b940      	cbnz	r0, 17fd0 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   17fbe:	4b08      	ldr	r3, [pc, #32]	; (17fe0 <hci_disconn_complete_prio+0x38>)
   17fc0:	881a      	ldrh	r2, [r3, #0]
   17fc2:	b922      	cbnz	r2, 17fce <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   17fc4:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   17fc8:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   17fcc:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   17fce:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   17fd0:	2101      	movs	r1, #1
   17fd2:	f002 f86b 	bl	1a0ac <bt_conn_set_state>
	bt_conn_unref(conn);
   17fd6:	4628      	mov	r0, r5
}
   17fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   17fdc:	f002 b834 	b.w	1a048 <bt_conn_unref>
   17fe0:	2001abf4 	.word	0x2001abf4

00017fe4 <le_data_len_change>:
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17fe4:	6883      	ldr	r3, [r0, #8]
{
   17fe6:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17fe8:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
   17fea:	4620      	mov	r0, r4
   17fec:	f002 f852 	bl	1a094 <bt_conn_lookup_handle>
	if (!conn) {
   17ff0:	b960      	cbnz	r0, 1800c <le_data_len_change+0x28>
   17ff2:	4a08      	ldr	r2, [pc, #32]	; (18014 <le_data_len_change+0x30>)
   17ff4:	4b08      	ldr	r3, [pc, #32]	; (18018 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17ff6:	4621      	mov	r1, r4
	conn->le.data_len.rx_max_time = max_rx_time;
	notify_le_data_len_updated(conn);
#endif

	bt_conn_unref(conn);
}
   17ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17ffc:	1ad2      	subs	r2, r2, r3
   17ffe:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18000:	0192      	lsls	r2, r2, #6
   18002:	4806      	ldr	r0, [pc, #24]	; (1801c <le_data_len_change+0x38>)
   18004:	f042 0201 	orr.w	r2, r2, #1
   18008:	f016 b9ff 	b.w	2e40a <log_1>
}
   1800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   18010:	f002 b81a 	b.w	1a048 <bt_conn_unref>
   18014:	00036508 	.word	0x00036508
   18018:	000364b0 	.word	0x000364b0
   1801c:	000395c3 	.word	0x000395c3

00018020 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   18020:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   18022:	2101      	movs	r1, #1
   18024:	3008      	adds	r0, #8
   18026:	f004 ffb7 	bl	1cf98 <net_buf_simple_pull_mem>
   1802a:	4b06      	ldr	r3, [pc, #24]	; (18044 <hci_hardware_error+0x24>)
   1802c:	4a06      	ldr	r2, [pc, #24]	; (18048 <hci_hardware_error+0x28>)
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1802e:	7801      	ldrb	r1, [r0, #0]
   18030:	1ad2      	subs	r2, r2, r3
   18032:	08d2      	lsrs	r2, r2, #3
   18034:	0192      	lsls	r2, r2, #6
   18036:	4805      	ldr	r0, [pc, #20]	; (1804c <hci_hardware_error+0x2c>)
   18038:	f042 0201 	orr.w	r2, r2, #1
}
   1803c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   18040:	f016 b9e3 	b.w	2e40a <log_1>
   18044:	000364b0 	.word	0x000364b0
   18048:	00036508 	.word	0x00036508
   1804c:	000395e7 	.word	0x000395e7

00018050 <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
   18050:	b510      	push	{r4, lr}
   18052:	4a0a      	ldr	r2, [pc, #40]	; (1807c <hci_vendor_event+0x2c>)
   18054:	4c0a      	ldr	r4, [pc, #40]	; (18080 <hci_vendor_event+0x30>)
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
   18056:	8981      	ldrh	r1, [r0, #12]
   18058:	6880      	ldr	r0, [r0, #8]
   1805a:	1aa4      	subs	r4, r4, r2
   1805c:	f7ff fe6a 	bl	17d34 <bt_hex_real>
   18060:	f7fc fd78 	bl	14b54 <z_log_strdup>
   18064:	08e4      	lsrs	r4, r4, #3
   18066:	01a4      	lsls	r4, r4, #6
   18068:	f044 0402 	orr.w	r4, r4, #2
   1806c:	4601      	mov	r1, r0
   1806e:	4622      	mov	r2, r4
			bt_hex(buf->data, buf->len));
	}
}
   18070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   18074:	4803      	ldr	r0, [pc, #12]	; (18084 <hci_vendor_event+0x34>)
   18076:	f016 b9c8 	b.w	2e40a <log_1>
   1807a:	bf00      	nop
   1807c:	000364b0 	.word	0x000364b0
   18080:	00036508 	.word	0x00036508
   18084:	00039609 	.word	0x00039609

00018088 <handle_event>:
{
   18088:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1808a:	4605      	mov	r5, r0
   1808c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   1808e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
   18092:	7811      	ldrb	r1, [r2, #0]
   18094:	42a9      	cmp	r1, r5
   18096:	d01a      	beq.n	180ce <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   18098:	3208      	adds	r2, #8
   1809a:	429a      	cmp	r2, r3
   1809c:	d1f9      	bne.n	18092 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   1809e:	8986      	ldrh	r6, [r0, #12]
   180a0:	4b16      	ldr	r3, [pc, #88]	; (180fc <handle_event+0x74>)
   180a2:	4c17      	ldr	r4, [pc, #92]	; (18100 <handle_event+0x78>)
   180a4:	4631      	mov	r1, r6
   180a6:	6880      	ldr	r0, [r0, #8]
   180a8:	1ae4      	subs	r4, r4, r3
   180aa:	f7ff fe43 	bl	17d34 <bt_hex_real>
   180ae:	f7fc fd51 	bl	14b54 <z_log_strdup>
   180b2:	08e4      	lsrs	r4, r4, #3
   180b4:	01a4      	lsls	r4, r4, #6
   180b6:	f044 0402 	orr.w	r4, r4, #2
   180ba:	4603      	mov	r3, r0
   180bc:	4632      	mov	r2, r6
   180be:	4629      	mov	r1, r5
   180c0:	4810      	ldr	r0, [pc, #64]	; (18104 <handle_event+0x7c>)
   180c2:	f8ad 4000 	strh.w	r4, [sp]
   180c6:	f016 f9cd 	bl	2e464 <log_3>
}
   180ca:	b002      	add	sp, #8
   180cc:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   180ce:	8981      	ldrh	r1, [r0, #12]
   180d0:	7853      	ldrb	r3, [r2, #1]
   180d2:	428b      	cmp	r3, r1
   180d4:	d90d      	bls.n	180f2 <handle_event+0x6a>
   180d6:	4a09      	ldr	r2, [pc, #36]	; (180fc <handle_event+0x74>)
   180d8:	4b09      	ldr	r3, [pc, #36]	; (18100 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   180da:	480b      	ldr	r0, [pc, #44]	; (18108 <handle_event+0x80>)
   180dc:	1a9b      	subs	r3, r3, r2
   180de:	462a      	mov	r2, r5
   180e0:	08db      	lsrs	r3, r3, #3
   180e2:	019b      	lsls	r3, r3, #6
   180e4:	f043 0301 	orr.w	r3, r3, #1
}
   180e8:	b002      	add	sp, #8
   180ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   180ee:	f016 b9a0 	b.w	2e432 <log_2>
		handler->handler(buf);
   180f2:	6853      	ldr	r3, [r2, #4]
}
   180f4:	b002      	add	sp, #8
   180f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   180fa:	4718      	bx	r3
   180fc:	000364b0 	.word	0x000364b0
   18100:	00036508 	.word	0x00036508
   18104:	0003964f 	.word	0x0003964f
   18108:	0003962d 	.word	0x0003962d

0001810c <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_connectionless_iq_report)),
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   1810c:	b510      	push	{r4, lr}
   1810e:	2101      	movs	r1, #1
   18110:	4604      	mov	r4, r0
   18112:	3008      	adds	r0, #8
   18114:	f004 ff40 	bl	1cf98 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   18118:	4621      	mov	r1, r4
}
   1811a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1811e:	2308      	movs	r3, #8
   18120:	4a01      	ldr	r2, [pc, #4]	; (18128 <hci_le_meta_event+0x1c>)
   18122:	7800      	ldrb	r0, [r0, #0]
   18124:	f7ff bfb0 	b.w	18088 <handle_event>
   18128:	00036a8c 	.word	0x00036a8c

0001812c <hci_num_completed_packets>:
{
   1812c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   18130:	2600      	movs	r6, #0
			tx->pending_no_cb = 0U;
   18132:	46b1      	mov	r9, r6
   18134:	4d38      	ldr	r5, [pc, #224]	; (18218 <hci_num_completed_packets+0xec>)
   18136:	4b39      	ldr	r3, [pc, #228]	; (1821c <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   18138:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1813c:	1aed      	subs	r5, r5, r3
				BT_ERR("packets count mismatch");
   1813e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 18224 <hci_num_completed_packets+0xf8>
   18142:	08ed      	lsrs	r5, r5, #3
	for (i = 0; i < evt->num_handles; i++) {
   18144:	f898 3000 	ldrb.w	r3, [r8]
   18148:	429e      	cmp	r6, r3
   1814a:	db01      	blt.n	18150 <hci_num_completed_packets+0x24>
}
   1814c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   18150:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   18154:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   18158:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1815c:	4658      	mov	r0, fp
   1815e:	f001 ff99 	bl	1a094 <bt_conn_lookup_handle>
		if (!conn) {
   18162:	4604      	mov	r4, r0
   18164:	b1d8      	cbz	r0, 1819e <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   18166:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   1816a:	2f00      	cmp	r7, #0
   1816c:	d033      	beq.n	181d6 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   1816e:	f04f 0320 	mov.w	r3, #32
   18172:	f3ef 8211 	mrs	r2, BASEPRI
   18176:	f383 8811 	msr	BASEPRI, r3
   1817a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1817e:	69e3      	ldr	r3, [r4, #28]
   18180:	b1b3      	cbz	r3, 181b0 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   18182:	3b01      	subs	r3, #1
   18184:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18186:	f382 8811 	msr	BASEPRI, r2
   1818a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1818e:	4620      	mov	r0, r4
   18190:	f001 fe18 	bl	19dc4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   18194:	3f01      	subs	r7, #1
   18196:	f011 fbe3 	bl	29960 <z_impl_k_sem_give>
   1819a:	b2bf      	uxth	r7, r7
   1819c:	e7e5      	b.n	1816a <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   1819e:	01aa      	lsls	r2, r5, #6
   181a0:	4659      	mov	r1, fp
   181a2:	481f      	ldr	r0, [pc, #124]	; (18220 <hci_num_completed_packets+0xf4>)
   181a4:	f042 0201 	orr.w	r2, r2, #1
   181a8:	f016 f92f 	bl	2e40a <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   181ac:	3601      	adds	r6, #1
   181ae:	e7c9      	b.n	18144 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   181b0:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   181b2:	b12b      	cbz	r3, 181c0 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   181b4:	69a1      	ldr	r1, [r4, #24]
   181b6:	6818      	ldr	r0, [r3, #0]
   181b8:	428b      	cmp	r3, r1
	list->head = node;
   181ba:	6160      	str	r0, [r4, #20]
	list->tail = node;
   181bc:	bf08      	it	eq
   181be:	61a0      	streq	r0, [r4, #24]
   181c0:	f382 8811 	msr	BASEPRI, r2
   181c4:	f3bf 8f6f 	isb	sy
			if (!node) {
   181c8:	b94b      	cbnz	r3, 181de <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   181ca:	01a9      	lsls	r1, r5, #6
   181cc:	4650      	mov	r0, sl
   181ce:	f041 0101 	orr.w	r1, r1, #1
   181d2:	f016 f90d 	bl	2e3f0 <log_0>
		bt_conn_unref(conn);
   181d6:	4620      	mov	r0, r4
   181d8:	f001 ff36 	bl	1a048 <bt_conn_unref>
   181dc:	e7e6      	b.n	181ac <hci_num_completed_packets+0x80>
	__asm__ volatile(
   181de:	f04f 0220 	mov.w	r2, #32
   181e2:	f3ef 8111 	mrs	r1, BASEPRI
   181e6:	f382 8811 	msr	BASEPRI, r2
   181ea:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   181ee:	68da      	ldr	r2, [r3, #12]
   181f0:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   181f2:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   181f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   181f8:	f8c3 900c 	str.w	r9, [r3, #12]
   181fc:	b94a      	cbnz	r2, 18212 <hci_num_completed_packets+0xe6>
	list->head = node;
   181fe:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   18202:	f381 8811 	msr	BASEPRI, r1
   18206:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1820a:	4658      	mov	r0, fp
   1820c:	f011 ff08 	bl	2a020 <k_work_submit>
   18210:	e7bd      	b.n	1818e <hci_num_completed_packets+0x62>
	parent->next = child;
   18212:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18214:	6263      	str	r3, [r4, #36]	; 0x24
}
   18216:	e7f4      	b.n	18202 <hci_num_completed_packets+0xd6>
   18218:	00036508 	.word	0x00036508
   1821c:	000364b0 	.word	0x000364b0
   18220:	00039671 	.word	0x00039671
   18224:	0003968d 	.word	0x0003968d

00018228 <hci_disconn_complete>:
{
   18228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1822a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1822c:	7835      	ldrb	r5, [r6, #0]
   1822e:	bb75      	cbnz	r5, 1828e <hci_disconn_complete+0x66>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18230:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   18234:	4638      	mov	r0, r7
   18236:	f001 ff2d 	bl	1a094 <bt_conn_lookup_handle>
	if (!conn) {
   1823a:	4604      	mov	r4, r0
   1823c:	b960      	cbnz	r0, 18258 <hci_disconn_complete+0x30>
   1823e:	4b14      	ldr	r3, [pc, #80]	; (18290 <hci_disconn_complete+0x68>)
   18240:	4a14      	ldr	r2, [pc, #80]	; (18294 <hci_disconn_complete+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   18242:	4639      	mov	r1, r7
   18244:	1ad2      	subs	r2, r2, r3
   18246:	08d2      	lsrs	r2, r2, #3
   18248:	0192      	lsls	r2, r2, #6
   1824a:	4813      	ldr	r0, [pc, #76]	; (18298 <hci_disconn_complete+0x70>)
   1824c:	f042 0201 	orr.w	r2, r2, #1
}
   18250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   18254:	f016 b8d9 	b.w	2e40a <log_1>
	conn->err = evt->reason;
   18258:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1825a:	4629      	mov	r1, r5
	conn->err = evt->reason;
   1825c:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1825e:	f001 ff25 	bl	1a0ac <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   18262:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
   18264:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
   18266:	2b01      	cmp	r3, #1
   18268:	d004      	beq.n	18274 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
   1826a:	4620      	mov	r0, r4
}
   1826c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   18270:	f001 beea 	b.w	1a048 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18274:	1d23      	adds	r3, r4, #4
   18276:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1827a:	07db      	lsls	r3, r3, #31
   1827c:	d5f5      	bpl.n	1826a <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1827e:	4620      	mov	r0, r4
   18280:	2102      	movs	r1, #2
   18282:	f001 ff13 	bl	1a0ac <bt_conn_set_state>
		bt_le_scan_update(false);
   18286:	4628      	mov	r0, r5
   18288:	f001 fba0 	bl	199cc <bt_le_scan_update>
   1828c:	e7ed      	b.n	1826a <hci_disconn_complete+0x42>
}
   1828e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18290:	000364b0 	.word	0x000364b0
   18294:	00036508 	.word	0x00036508
   18298:	000396a4 	.word	0x000396a4

0001829c <le_conn_update_complete>:
{
   1829c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1829e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   182a0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   182a4:	4630      	mov	r0, r6
   182a6:	f001 fef5 	bl	1a094 <bt_conn_lookup_handle>
	if (!conn) {
   182aa:	4604      	mov	r4, r0
   182ac:	b960      	cbnz	r0, 182c8 <le_conn_update_complete+0x2c>
   182ae:	4a20      	ldr	r2, [pc, #128]	; (18330 <le_conn_update_complete+0x94>)
   182b0:	4b20      	ldr	r3, [pc, #128]	; (18334 <le_conn_update_complete+0x98>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   182b2:	4631      	mov	r1, r6
   182b4:	1ad2      	subs	r2, r2, r3
   182b6:	08d2      	lsrs	r2, r2, #3
   182b8:	0192      	lsls	r2, r2, #6
   182ba:	481f      	ldr	r0, [pc, #124]	; (18338 <le_conn_update_complete+0x9c>)
   182bc:	f042 0201 	orr.w	r2, r2, #1
   182c0:	f016 f8a3 	bl	2e40a <log_1>
}
   182c4:	b002      	add	sp, #8
   182c6:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   182c8:	782b      	ldrb	r3, [r5, #0]
   182ca:	b9bb      	cbnz	r3, 182fc <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   182cc:	792a      	ldrb	r2, [r5, #4]
   182ce:	78eb      	ldrb	r3, [r5, #3]
   182d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   182d4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   182d8:	79aa      	ldrb	r2, [r5, #6]
   182da:	796b      	ldrb	r3, [r5, #5]
   182dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   182e0:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   182e4:	79eb      	ldrb	r3, [r5, #7]
   182e6:	7a2a      	ldrb	r2, [r5, #8]
   182e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   182ec:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   182f0:	f001 fd6c 	bl	19dcc <notify_le_param_updated>
	bt_conn_unref(conn);
   182f4:	4620      	mov	r0, r4
   182f6:	f001 fea7 	bl	1a048 <bt_conn_unref>
   182fa:	e7e3      	b.n	182c4 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   182fc:	2b1a      	cmp	r3, #26
   182fe:	d1f9      	bne.n	182f4 <le_conn_update_complete+0x58>
   18300:	78c3      	ldrb	r3, [r0, #3]
   18302:	2b01      	cmp	r3, #1
   18304:	d1f6      	bne.n	182f4 <le_conn_update_complete+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18306:	1d03      	adds	r3, r0, #4
   18308:	e8d3 2fef 	ldaex	r2, [r3]
   1830c:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   18310:	e8c3 1fe5 	stlex	r5, r1, [r3]
   18314:	2d00      	cmp	r5, #0
   18316:	d1f7      	bne.n	18308 <le_conn_update_complete+0x6c>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   18318:	0553      	lsls	r3, r2, #21
   1831a:	d4eb      	bmi.n	182f4 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   1831c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   18320:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
   18322:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
   18324:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   18328:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1832a:	f002 fa65 	bl	1a7f8 <bt_l2cap_update_conn_param>
   1832e:	e7e1      	b.n	182f4 <le_conn_update_complete+0x58>
   18330:	00036508 	.word	0x00036508
   18334:	000364b0 	.word	0x000364b0
   18338:	000395c3 	.word	0x000395c3

0001833c <hci_cmd_done>:
{
   1833c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18340:	4607      	mov	r7, r0
   18342:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   18344:	7990      	ldrb	r0, [r2, #6]
{
   18346:	4688      	mov	r8, r1
   18348:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1834a:	f004 fb77 	bl	1ca3c <net_buf_pool_get>
   1834e:	4e3e      	ldr	r6, [pc, #248]	; (18448 <hci_cmd_done+0x10c>)
   18350:	4286      	cmp	r6, r0
   18352:	d016      	beq.n	18382 <hci_cmd_done+0x46>
   18354:	4b3d      	ldr	r3, [pc, #244]	; (1844c <hci_cmd_done+0x110>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   18356:	79a0      	ldrb	r0, [r4, #6]
   18358:	4d3d      	ldr	r5, [pc, #244]	; (18450 <hci_cmd_done+0x114>)
   1835a:	9700      	str	r7, [sp, #0]
   1835c:	1aed      	subs	r5, r5, r3
   1835e:	9001      	str	r0, [sp, #4]
   18360:	f004 fb6c 	bl	1ca3c <net_buf_pool_get>
   18364:	08ed      	lsrs	r5, r5, #3
   18366:	01ad      	lsls	r5, r5, #6
   18368:	f045 0502 	orr.w	r5, r5, #2
   1836c:	e9cd 0602 	strd	r0, r6, [sp, #8]
   18370:	462b      	mov	r3, r5
   18372:	2204      	movs	r2, #4
   18374:	4669      	mov	r1, sp
   18376:	4837      	ldr	r0, [pc, #220]	; (18454 <hci_cmd_done+0x118>)
   18378:	f016 f890 	bl	2e49c <log_n>
}
   1837c:	b005      	add	sp, #20
   1837e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   18382:	4620      	mov	r0, r4
   18384:	f004 fb62 	bl	1ca4c <net_buf_id>
   18388:	f04f 090c 	mov.w	r9, #12
   1838c:	4d32      	ldr	r5, [pc, #200]	; (18458 <hci_cmd_done+0x11c>)
   1838e:	fb09 5300 	mla	r3, r9, r0, r5
   18392:	885b      	ldrh	r3, [r3, #2]
   18394:	42bb      	cmp	r3, r7
   18396:	d011      	beq.n	183bc <hci_cmd_done+0x80>
   18398:	4b2c      	ldr	r3, [pc, #176]	; (1844c <hci_cmd_done+0x110>)
   1839a:	4e2d      	ldr	r6, [pc, #180]	; (18450 <hci_cmd_done+0x114>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1839c:	4620      	mov	r0, r4
   1839e:	1af6      	subs	r6, r6, r3
   183a0:	f004 fb54 	bl	1ca4c <net_buf_id>
   183a4:	fb09 5000 	mla	r0, r9, r0, r5
   183a8:	08f6      	lsrs	r6, r6, #3
   183aa:	01b6      	lsls	r6, r6, #6
   183ac:	f046 0602 	orr.w	r6, r6, #2
   183b0:	8842      	ldrh	r2, [r0, #2]
   183b2:	4633      	mov	r3, r6
   183b4:	4639      	mov	r1, r7
   183b6:	4829      	ldr	r0, [pc, #164]	; (1845c <hci_cmd_done+0x120>)
   183b8:	f016 f83b 	bl	2e432 <log_2>
	if (cmd(buf)->state && !status) {
   183bc:	4620      	mov	r0, r4
   183be:	f004 fb45 	bl	1ca4c <net_buf_id>
   183c2:	260c      	movs	r6, #12
   183c4:	fb06 5000 	mla	r0, r6, r0, r5
   183c8:	6843      	ldr	r3, [r0, #4]
   183ca:	b1d3      	cbz	r3, 18402 <hci_cmd_done+0xc6>
   183cc:	f1b8 0f00 	cmp.w	r8, #0
   183d0:	d117      	bne.n	18402 <hci_cmd_done+0xc6>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   183d2:	4620      	mov	r0, r4
   183d4:	f004 fb3a 	bl	1ca4c <net_buf_id>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   183d8:	2201      	movs	r2, #1
   183da:	fb06 5000 	mla	r0, r6, r0, r5
   183de:	6840      	ldr	r0, [r0, #4]
   183e0:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   183e4:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   183e6:	f001 061f 	and.w	r6, r1, #31
   183ea:	40b2      	lsls	r2, r6
	if (val) {
   183ec:	0949      	lsrs	r1, r1, #5
   183ee:	b300      	cbz	r0, 18432 <hci_cmd_done+0xf6>
   183f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   183f4:	e8d3 1fef 	ldaex	r1, [r3]
   183f8:	4311      	orrs	r1, r2
   183fa:	e8c3 1fe0 	stlex	r0, r1, [r3]
   183fe:	2800      	cmp	r0, #0
   18400:	d1f8      	bne.n	183f4 <hci_cmd_done+0xb8>
	if (cmd(buf)->sync) {
   18402:	4620      	mov	r0, r4
   18404:	f004 fb22 	bl	1ca4c <net_buf_id>
   18408:	260c      	movs	r6, #12
   1840a:	fb06 5000 	mla	r0, r6, r0, r5
   1840e:	6883      	ldr	r3, [r0, #8]
   18410:	2b00      	cmp	r3, #0
   18412:	d0b3      	beq.n	1837c <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   18414:	4620      	mov	r0, r4
   18416:	f004 fb19 	bl	1ca4c <net_buf_id>
   1841a:	4370      	muls	r0, r6
   1841c:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   18420:	4620      	mov	r0, r4
   18422:	f004 fb13 	bl	1ca4c <net_buf_id>
   18426:	fb06 5500 	mla	r5, r6, r0, r5
   1842a:	68a8      	ldr	r0, [r5, #8]
   1842c:	f011 fa98 	bl	29960 <z_impl_k_sem_give>
}
   18430:	e7a4      	b.n	1837c <hci_cmd_done+0x40>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18432:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18434:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   18438:	e8d3 1fef 	ldaex	r1, [r3]
   1843c:	4011      	ands	r1, r2
   1843e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   18442:	2800      	cmp	r0, #0
   18444:	d0dd      	beq.n	18402 <hci_cmd_done+0xc6>
   18446:	e7f7      	b.n	18438 <hci_cmd_done+0xfc>
   18448:	200150f0 	.word	0x200150f0
   1844c:	000364b0 	.word	0x000364b0
   18450:	00036508 	.word	0x00036508
   18454:	000396ca 	.word	0x000396ca
   18458:	20016174 	.word	0x20016174
   1845c:	000396ff 	.word	0x000396ff

00018460 <hci_cmd_status>:
{
   18460:	b538      	push	{r3, r4, r5, lr}
   18462:	2104      	movs	r1, #4
   18464:	4604      	mov	r4, r0
   18466:	3008      	adds	r0, #8
   18468:	f004 fd96 	bl	1cf98 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1846c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1846e:	7801      	ldrb	r1, [r0, #0]
   18470:	4622      	mov	r2, r4
   18472:	8840      	ldrh	r0, [r0, #2]
   18474:	f7ff ff62 	bl	1833c <hci_cmd_done>
	if (ncmd) {
   18478:	b125      	cbz	r5, 18484 <hci_cmd_status+0x24>
}
   1847a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1847e:	4802      	ldr	r0, [pc, #8]	; (18488 <hci_cmd_status+0x28>)
   18480:	f011 ba6e 	b.w	29960 <z_impl_k_sem_give>
   18484:	bd38      	pop	{r3, r4, r5, pc}
   18486:	bf00      	nop
   18488:	200145e8 	.word	0x200145e8

0001848c <hci_cmd_complete>:
{
   1848c:	b538      	push	{r3, r4, r5, lr}
   1848e:	2103      	movs	r1, #3
   18490:	4604      	mov	r4, r0
   18492:	3008      	adds	r0, #8
   18494:	f004 fd80 	bl	1cf98 <net_buf_simple_pull_mem>
	status = buf->data[0];
   18498:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   1849a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1849c:	4622      	mov	r2, r4
   1849e:	7819      	ldrb	r1, [r3, #0]
   184a0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   184a4:	f7ff ff4a 	bl	1833c <hci_cmd_done>
	if (ncmd) {
   184a8:	b125      	cbz	r5, 184b4 <hci_cmd_complete+0x28>
}
   184aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   184ae:	4802      	ldr	r0, [pc, #8]	; (184b8 <hci_cmd_complete+0x2c>)
   184b0:	f011 ba56 	b.w	29960 <z_impl_k_sem_give>
   184b4:	bd38      	pop	{r3, r4, r5, pc}
   184b6:	bf00      	nop
   184b8:	200145e8 	.word	0x200145e8

000184bc <bt_hci_cmd_state_set_init>:
{
   184bc:	b510      	push	{r4, lr}
	state->bit = bit;
   184be:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   184c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   184c6:	460c      	mov	r4, r1
	state->val = val;
   184c8:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   184ca:	f004 fabf 	bl	1ca4c <net_buf_id>
   184ce:	220c      	movs	r2, #12
   184d0:	4b02      	ldr	r3, [pc, #8]	; (184dc <bt_hci_cmd_state_set_init+0x20>)
   184d2:	fb02 3000 	mla	r0, r2, r0, r3
   184d6:	6044      	str	r4, [r0, #4]
}
   184d8:	bd10      	pop	{r4, pc}
   184da:	bf00      	nop
   184dc:	20016174 	.word	0x20016174

000184e0 <bt_hci_cmd_create>:
{
   184e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   184e4:	f04f 32ff 	mov.w	r2, #4294967295
   184e8:	4605      	mov	r5, r0
   184ea:	f04f 33ff 	mov.w	r3, #4294967295
   184ee:	481b      	ldr	r0, [pc, #108]	; (1855c <bt_hci_cmd_create+0x7c>)
   184f0:	460e      	mov	r6, r1
   184f2:	f019 f8c3 	bl	3167c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   184f6:	4604      	mov	r4, r0
   184f8:	b948      	cbnz	r0, 1850e <bt_hci_cmd_create+0x2e>
   184fa:	4919      	ldr	r1, [pc, #100]	; (18560 <bt_hci_cmd_create+0x80>)
   184fc:	4819      	ldr	r0, [pc, #100]	; (18564 <bt_hci_cmd_create+0x84>)
   184fe:	23e8      	movs	r3, #232	; 0xe8
   18500:	4a19      	ldr	r2, [pc, #100]	; (18568 <bt_hci_cmd_create+0x88>)
   18502:	f015 fc41 	bl	2dd88 <printk>
   18506:	21e8      	movs	r1, #232	; 0xe8
   18508:	4817      	ldr	r0, [pc, #92]	; (18568 <bt_hci_cmd_create+0x88>)
   1850a:	f015 ff23 	bl	2e354 <assert_post_action>
   1850e:	2700      	movs	r7, #0
	net_buf_simple_reserve(&buf->b, reserve);
   18510:	f104 0b08 	add.w	fp, r4, #8
   18514:	2100      	movs	r1, #0
   18516:	4658      	mov	r0, fp
   18518:	f004 fbd2 	bl	1ccc0 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   1851c:	4620      	mov	r0, r4
   1851e:	7527      	strb	r7, [r4, #20]
   18520:	f004 fa94 	bl	1ca4c <net_buf_id>
   18524:	f04f 0a0c 	mov.w	sl, #12
   18528:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1856c <bt_hci_cmd_create+0x8c>
   1852c:	fb0a 8000 	mla	r0, sl, r0, r8
   18530:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   18532:	4620      	mov	r0, r4
   18534:	f004 fa8a 	bl	1ca4c <net_buf_id>
   18538:	fb0a 8000 	mla	r0, sl, r0, r8
   1853c:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1853e:	4620      	mov	r0, r4
   18540:	f004 fa84 	bl	1ca4c <net_buf_id>
   18544:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   18548:	2103      	movs	r1, #3
   1854a:	6047      	str	r7, [r0, #4]
   1854c:	4658      	mov	r0, fp
   1854e:	f004 fd45 	bl	1cfdc <net_buf_simple_add>
	hdr->param_len = param_len;
   18552:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   18554:	8005      	strh	r5, [r0, #0]
}
   18556:	4620      	mov	r0, r4
   18558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1855c:	200150f0 	.word	0x200150f0
   18560:	00039597 	.word	0x00039597
   18564:	00037f2c 	.word	0x00037f2c
   18568:	00039732 	.word	0x00039732
   1856c:	20016174 	.word	0x20016174

00018570 <bt_hci_cmd_send_sync>:
{
   18570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18574:	4607      	mov	r7, r0
   18576:	4615      	mov	r5, r2
	if (!buf) {
   18578:	460c      	mov	r4, r1
{
   1857a:	b086      	sub	sp, #24
	if (!buf) {
   1857c:	b921      	cbnz	r1, 18588 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   1857e:	f7ff ffaf 	bl	184e0 <bt_hci_cmd_create>
		if (!buf) {
   18582:	4604      	mov	r4, r0
   18584:	2800      	cmp	r0, #0
   18586:	d055      	beq.n	18634 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18588:	2201      	movs	r2, #1
   1858a:	2100      	movs	r1, #0
   1858c:	4668      	mov	r0, sp
   1858e:	f01c fe89 	bl	352a4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   18592:	4620      	mov	r0, r4
   18594:	f004 fa5a 	bl	1ca4c <net_buf_id>
   18598:	230c      	movs	r3, #12
   1859a:	4e28      	ldr	r6, [pc, #160]	; (1863c <bt_hci_cmd_send_sync+0xcc>)
   1859c:	fb03 6000 	mla	r0, r3, r0, r6
   185a0:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   185a4:	4620      	mov	r0, r4
   185a6:	f004 fc2f 	bl	1ce08 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   185aa:	4621      	mov	r1, r4
   185ac:	4824      	ldr	r0, [pc, #144]	; (18640 <bt_hci_cmd_send_sync+0xd0>)
   185ae:	f004 fbb1 	bl	1cd14 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   185b2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   185b6:	2300      	movs	r3, #0
   185b8:	4668      	mov	r0, sp
   185ba:	f011 fa15 	bl	299e8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   185be:	4680      	mov	r8, r0
   185c0:	b180      	cbz	r0, 185e4 <bt_hci_cmd_send_sync+0x74>
   185c2:	f240 1333 	movw	r3, #307	; 0x133
   185c6:	4a1f      	ldr	r2, [pc, #124]	; (18644 <bt_hci_cmd_send_sync+0xd4>)
   185c8:	491f      	ldr	r1, [pc, #124]	; (18648 <bt_hci_cmd_send_sync+0xd8>)
   185ca:	4820      	ldr	r0, [pc, #128]	; (1864c <bt_hci_cmd_send_sync+0xdc>)
   185cc:	f015 fbdc 	bl	2dd88 <printk>
   185d0:	4641      	mov	r1, r8
   185d2:	481f      	ldr	r0, [pc, #124]	; (18650 <bt_hci_cmd_send_sync+0xe0>)
   185d4:	f015 fbd8 	bl	2dd88 <printk>
   185d8:	4040      	eors	r0, r0
   185da:	f380 8811 	msr	BASEPRI, r0
   185de:	f04f 0003 	mov.w	r0, #3
   185e2:	df02      	svc	2
	status = cmd(buf)->status;
   185e4:	4620      	mov	r0, r4
   185e6:	f004 fa31 	bl	1ca4c <net_buf_id>
   185ea:	230c      	movs	r3, #12
   185ec:	4343      	muls	r3, r0
   185ee:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   185f0:	b1be      	cbz	r6, 18622 <bt_hci_cmd_send_sync+0xb2>
   185f2:	4a18      	ldr	r2, [pc, #96]	; (18654 <bt_hci_cmd_send_sync+0xe4>)
   185f4:	4b18      	ldr	r3, [pc, #96]	; (18658 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   185f6:	4639      	mov	r1, r7
   185f8:	1a9b      	subs	r3, r3, r2
   185fa:	08db      	lsrs	r3, r3, #3
   185fc:	019b      	lsls	r3, r3, #6
   185fe:	4632      	mov	r2, r6
   18600:	4816      	ldr	r0, [pc, #88]	; (1865c <bt_hci_cmd_send_sync+0xec>)
   18602:	f043 0302 	orr.w	r3, r3, #2
   18606:	f015 ff14 	bl	2e432 <log_2>
		net_buf_unref(buf);
   1860a:	4620      	mov	r0, r4
   1860c:	f004 fbb6 	bl	1cd7c <net_buf_unref>
			return -EIO;
   18610:	2e09      	cmp	r6, #9
   18612:	bf0c      	ite	eq
   18614:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   18618:	f06f 0004 	mvnne.w	r0, #4
}
   1861c:	b006      	add	sp, #24
   1861e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   18622:	b115      	cbz	r5, 1862a <bt_hci_cmd_send_sync+0xba>
	return 0;
   18624:	4630      	mov	r0, r6
		*rsp = buf;
   18626:	602c      	str	r4, [r5, #0]
   18628:	e7f8      	b.n	1861c <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   1862a:	4620      	mov	r0, r4
   1862c:	f004 fba6 	bl	1cd7c <net_buf_unref>
	return 0;
   18630:	4628      	mov	r0, r5
   18632:	e7f3      	b.n	1861c <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   18634:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18638:	e7f0      	b.n	1861c <bt_hci_cmd_send_sync+0xac>
   1863a:	bf00      	nop
   1863c:	20016174 	.word	0x20016174
   18640:	20014604 	.word	0x20014604
   18644:	00039732 	.word	0x00039732
   18648:	00039766 	.word	0x00039766
   1864c:	00037f2c 	.word	0x00037f2c
   18650:	0003976f 	.word	0x0003976f
   18654:	000364b0 	.word	0x000364b0
   18658:	00036508 	.word	0x00036508
   1865c:	0003978f 	.word	0x0003978f

00018660 <hci_le_read_max_data_len>:
{
   18660:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18662:	4606      	mov	r6, r0
   18664:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   18666:	f242 002f 	movw	r0, #8239	; 0x202f
   1866a:	2100      	movs	r1, #0
   1866c:	aa01      	add	r2, sp, #4
   1866e:	f7ff ff7f 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   18672:	4604      	mov	r4, r0
   18674:	b160      	cbz	r0, 18690 <hci_le_read_max_data_len+0x30>
   18676:	490c      	ldr	r1, [pc, #48]	; (186a8 <hci_le_read_max_data_len+0x48>)
   18678:	4b0c      	ldr	r3, [pc, #48]	; (186ac <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   1867a:	480d      	ldr	r0, [pc, #52]	; (186b0 <hci_le_read_max_data_len+0x50>)
   1867c:	1ac9      	subs	r1, r1, r3
   1867e:	08c9      	lsrs	r1, r1, #3
   18680:	0189      	lsls	r1, r1, #6
   18682:	f041 0101 	orr.w	r1, r1, #1
   18686:	f015 feb3 	bl	2e3f0 <log_0>
}
   1868a:	4620      	mov	r0, r4
   1868c:	b002      	add	sp, #8
   1868e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   18690:	9801      	ldr	r0, [sp, #4]
   18692:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   18694:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   18698:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1869a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1869e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   186a0:	f004 fb6c 	bl	1cd7c <net_buf_unref>
	return 0;
   186a4:	e7f1      	b.n	1868a <hci_le_read_max_data_len+0x2a>
   186a6:	bf00      	nop
   186a8:	00036508 	.word	0x00036508
   186ac:	000364b0 	.word	0x000364b0
   186b0:	000397ab 	.word	0x000397ab

000186b4 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
   186b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   186b6:	4d67      	ldr	r5, [pc, #412]	; (18854 <hci_init+0x1a0>)
   186b8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   186bc:	6899      	ldr	r1, [r3, #8]
   186be:	f011 0101 	ands.w	r1, r1, #1
   186c2:	d11d      	bne.n	18700 <hci_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   186c4:	f640 4003 	movw	r0, #3075	; 0xc03
   186c8:	aa01      	add	r2, sp, #4
   186ca:	f7ff ff51 	bl	18570 <bt_hci_cmd_send_sync>
		if (err) {
   186ce:	4604      	mov	r4, r0
   186d0:	2800      	cmp	r0, #0
   186d2:	f040 80bc 	bne.w	1884e <hci_init+0x19a>
		hci_reset_complete(rsp);
   186d6:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   186d8:	689b      	ldr	r3, [r3, #8]
	if (status) {
   186da:	781b      	ldrb	r3, [r3, #0]
   186dc:	b96b      	cbnz	r3, 186fa <hci_init+0x46>
		bt_scan_reset();
   186de:	f001 f96f 	bl	199c0 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   186e2:	f105 0398 	add.w	r3, r5, #152	; 0x98
   186e6:	e8d3 2faf 	lda	r2, [r3]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   186ea:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   186ee:	e8d3 1fef 	ldaex	r1, [r3]
   186f2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   186f6:	2800      	cmp	r0, #0
   186f8:	d1f9      	bne.n	186ee <hci_init+0x3a>
		net_buf_unref(rsp);
   186fa:	9801      	ldr	r0, [sp, #4]
   186fc:	f004 fb3e 	bl	1cd7c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   18700:	2100      	movs	r1, #0
   18702:	f241 0003 	movw	r0, #4099	; 0x1003
   18706:	aa01      	add	r2, sp, #4
   18708:	f7ff ff32 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   1870c:	4604      	mov	r4, r0
   1870e:	2800      	cmp	r0, #0
   18710:	f040 809d 	bne.w	1884e <hci_init+0x19a>
	read_local_features_complete(rsp);
   18714:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   18716:	4e50      	ldr	r6, [pc, #320]	; (18858 <hci_init+0x1a4>)
   18718:	6893      	ldr	r3, [r2, #8]
   1871a:	f853 0f01 	ldr.w	r0, [r3, #1]!
   1871e:	6859      	ldr	r1, [r3, #4]
   18720:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   18722:	4610      	mov	r0, r2
   18724:	f004 fb2a 	bl	1cd7c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   18728:	4621      	mov	r1, r4
   1872a:	f241 0001 	movw	r0, #4097	; 0x1001
   1872e:	aa01      	add	r2, sp, #4
   18730:	f7ff ff1e 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   18734:	4604      	mov	r4, r0
   18736:	2800      	cmp	r0, #0
   18738:	f040 8089 	bne.w	1884e <hci_init+0x19a>
	read_local_ver_complete(rsp);
   1873c:	9801      	ldr	r0, [sp, #4]
   1873e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   18740:	785a      	ldrb	r2, [r3, #1]
   18742:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   18746:	78d9      	ldrb	r1, [r3, #3]
   18748:	789a      	ldrb	r2, [r3, #2]
   1874a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1874e:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   18750:	791a      	ldrb	r2, [r3, #4]
   18752:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   18756:	7a19      	ldrb	r1, [r3, #8]
   18758:	79da      	ldrb	r2, [r3, #7]
   1875a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1875e:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   18760:	795a      	ldrb	r2, [r3, #5]
   18762:	799b      	ldrb	r3, [r3, #6]
   18764:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   18768:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   1876a:	f004 fb07 	bl	1cd7c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1876e:	4621      	mov	r1, r4
   18770:	f241 0002 	movw	r0, #4098	; 0x1002
   18774:	aa01      	add	r2, sp, #4
   18776:	f7ff fefb 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   1877a:	4604      	mov	r4, r0
   1877c:	2800      	cmp	r0, #0
   1877e:	d166      	bne.n	1884e <hci_init+0x19a>
	read_supported_commands_complete(rsp);
   18780:	9f01      	ldr	r7, [sp, #4]
   18782:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   18784:	1c53      	adds	r3, r2, #1
   18786:	3241      	adds	r2, #65	; 0x41
   18788:	4634      	mov	r4, r6
   1878a:	6818      	ldr	r0, [r3, #0]
   1878c:	6859      	ldr	r1, [r3, #4]
   1878e:	3308      	adds	r3, #8
   18790:	c403      	stmia	r4!, {r0, r1}
   18792:	4293      	cmp	r3, r2
   18794:	4626      	mov	r6, r4
   18796:	d1f7      	bne.n	18788 <hci_init+0xd4>
	net_buf_unref(rsp);
   18798:	4638      	mov	r0, r7
   1879a:	f004 faef 	bl	1cd7c <net_buf_unref>
		err = prng_init();
   1879e:	f001 faa1 	bl	19ce4 <prng_init>
		if (err) {
   187a2:	4604      	mov	r4, r0
   187a4:	2800      	cmp	r0, #0
   187a6:	d152      	bne.n	1884e <hci_init+0x19a>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   187a8:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   187ac:	069f      	lsls	r7, r3, #26
   187ae:	d41a      	bmi.n	187e6 <hci_init+0x132>
   187b0:	492a      	ldr	r1, [pc, #168]	; (1885c <hci_init+0x1a8>)
   187b2:	4b2b      	ldr	r3, [pc, #172]	; (18860 <hci_init+0x1ac>)
		BT_WARN("Controller to host flow control not supported");
   187b4:	482b      	ldr	r0, [pc, #172]	; (18864 <hci_init+0x1b0>)
   187b6:	1ac9      	subs	r1, r1, r3
   187b8:	08c9      	lsrs	r1, r1, #3
   187ba:	0189      	lsls	r1, r1, #6
   187bc:	f041 0102 	orr.w	r1, r1, #2
   187c0:	f015 fe16 	bl	2e3f0 <log_0>
	if (!BT_FEAT_LE(bt_dev.features)) {
   187c4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   187c8:	065e      	lsls	r6, r3, #25
   187ca:	d44f      	bmi.n	1886c <hci_init+0x1b8>
   187cc:	4b24      	ldr	r3, [pc, #144]	; (18860 <hci_init+0x1ac>)
   187ce:	4923      	ldr	r1, [pc, #140]	; (1885c <hci_init+0x1a8>)
		BT_ERR("Non-LE capable controller detected!");
   187d0:	4825      	ldr	r0, [pc, #148]	; (18868 <hci_init+0x1b4>)
   187d2:	1ac9      	subs	r1, r1, r3
   187d4:	08c9      	lsrs	r1, r1, #3
   187d6:	0189      	lsls	r1, r1, #6
   187d8:	f041 0101 	orr.w	r1, r1, #1
   187dc:	f015 fe08 	bl	2e3f0 <log_0>
		return -ENODEV;
   187e0:	f06f 0412 	mvn.w	r4, #18
   187e4:	e033      	b.n	1884e <hci_init+0x19a>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   187e6:	2107      	movs	r1, #7
   187e8:	f640 4033 	movw	r0, #3123	; 0xc33
   187ec:	f7ff fe78 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   187f0:	4606      	mov	r6, r0
   187f2:	b910      	cbnz	r0, 187fa <hci_init+0x146>
		return -ENOBUFS;
   187f4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   187f8:	e029      	b.n	1884e <hci_init+0x19a>
   187fa:	2107      	movs	r1, #7
   187fc:	3008      	adds	r0, #8
   187fe:	f004 fbed 	bl	1cfdc <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   18802:	231b      	movs	r3, #27
   18804:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   18806:	2303      	movs	r3, #3
__ssp_bos_icheck3(memset, void *, int)
   18808:	f8c0 4002 	str.w	r4, [r0, #2]
   1880c:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   1880e:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   18810:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   18812:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   18814:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   18816:	4631      	mov	r1, r6
   18818:	f640 4033 	movw	r0, #3123	; 0xc33
   1881c:	f7ff fea8 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   18820:	4604      	mov	r4, r0
   18822:	b9a0      	cbnz	r0, 1884e <hci_init+0x19a>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   18824:	2101      	movs	r1, #1
   18826:	f640 4031 	movw	r0, #3121	; 0xc31
   1882a:	f7ff fe59 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   1882e:	4606      	mov	r6, r0
   18830:	2800      	cmp	r0, #0
   18832:	d0df      	beq.n	187f4 <hci_init+0x140>
	return net_buf_simple_add_u8(&buf->b, val);
   18834:	2101      	movs	r1, #1
   18836:	3008      	adds	r0, #8
   18838:	f018 ff53 	bl	316e2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   1883c:	4622      	mov	r2, r4
   1883e:	4631      	mov	r1, r6
   18840:	f640 4031 	movw	r0, #3121	; 0xc31
   18844:	f7ff fe94 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   18848:	4604      	mov	r4, r0
   1884a:	2800      	cmp	r0, #0
   1884c:	d0ba      	beq.n	187c4 <hci_init+0x110>
	if (err) {
		return err;
	}

	return 0;
}
   1884e:	4620      	mov	r0, r4
   18850:	b003      	add	sp, #12
   18852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18854:	20014500 	.word	0x20014500
   18858:	2001453c 	.word	0x2001453c
   1885c:	00036508 	.word	0x00036508
   18860:	000364b0 	.word	0x000364b0
   18864:	000397cb 	.word	0x000397cb
   18868:	000397f9 	.word	0x000397f9
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1886c:	2100      	movs	r1, #0
   1886e:	f242 0003 	movw	r0, #8195	; 0x2003
   18872:	aa01      	add	r2, sp, #4
   18874:	f7ff fe7c 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   18878:	4604      	mov	r4, r0
   1887a:	2800      	cmp	r0, #0
   1887c:	d1e7      	bne.n	1884e <hci_init+0x19a>
	read_le_features_complete(rsp);
   1887e:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   18880:	4ea5      	ldr	r6, [pc, #660]	; (18b18 <hci_init+0x464>)
   18882:	6893      	ldr	r3, [r2, #8]
   18884:	f853 0f01 	ldr.w	r0, [r3, #1]!
   18888:	6859      	ldr	r1, [r3, #4]
   1888a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   1888c:	4610      	mov	r0, r2
   1888e:	f004 fa75 	bl	1cd7c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   18892:	4621      	mov	r1, r4
   18894:	f242 0002 	movw	r0, #8194	; 0x2002
   18898:	aa01      	add	r2, sp, #4
   1889a:	f7ff fe69 	bl	18570 <bt_hci_cmd_send_sync>
		if (err) {
   1889e:	4604      	mov	r4, r0
   188a0:	2800      	cmp	r0, #0
   188a2:	d1d4      	bne.n	1884e <hci_init+0x19a>
		le_read_buffer_size_complete(rsp);
   188a4:	9b01      	ldr	r3, [sp, #4]
   188a6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   188a8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   188ac:	b291      	uxth	r1, r2
   188ae:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	if (!bt_dev.le.acl_mtu) {
   188b2:	b129      	cbz	r1, 188c0 <hci_init+0x20c>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   188b4:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   188b6:	4611      	mov	r1, r2
   188b8:	f106 0028 	add.w	r0, r6, #40	; 0x28
   188bc:	f01c fcf2 	bl	352a4 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   188c0:	9801      	ldr	r0, [sp, #4]
   188c2:	f004 fa5b 	bl	1cd7c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   188c6:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   188ca:	f016 0620 	ands.w	r6, r6, #32
   188ce:	f000 80cf 	beq.w	18a70 <hci_init+0x3bc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   188d2:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   188d6:	071c      	lsls	r4, r3, #28
   188d8:	d511      	bpl.n	188fe <hci_init+0x24a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   188da:	2100      	movs	r1, #0
   188dc:	f242 001c 	movw	r0, #8220	; 0x201c
   188e0:	aa01      	add	r2, sp, #4
   188e2:	f7ff fe45 	bl	18570 <bt_hci_cmd_send_sync>
		if (err) {
   188e6:	4604      	mov	r4, r0
   188e8:	2800      	cmp	r0, #0
   188ea:	d1b0      	bne.n	1884e <hci_init+0x19a>
		le_read_supp_states_complete(rsp);
   188ec:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   188ee:	6883      	ldr	r3, [r0, #8]
   188f0:	f853 2f01 	ldr.w	r2, [r3, #1]!
   188f4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   188f6:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   188fa:	f004 fa3f 	bl	1cd7c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   188fe:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   18902:	0698      	lsls	r0, r3, #26
   18904:	d524      	bpl.n	18950 <hci_init+0x29c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18906:	4668      	mov	r0, sp
   18908:	f10d 0102 	add.w	r1, sp, #2
   1890c:	f7ff fea8 	bl	18660 <hci_le_read_max_data_len>
		if (err) {
   18910:	4604      	mov	r4, r0
   18912:	2800      	cmp	r0, #0
   18914:	d19b      	bne.n	1884e <hci_init+0x19a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18916:	2104      	movs	r1, #4
   18918:	f242 0024 	movw	r0, #8228	; 0x2024
   1891c:	f7ff fde0 	bl	184e0 <bt_hci_cmd_create>
		if (!buf) {
   18920:	4606      	mov	r6, r0
   18922:	2800      	cmp	r0, #0
   18924:	f43f af66 	beq.w	187f4 <hci_init+0x140>
	return net_buf_simple_add(&buf->b, len);
   18928:	2104      	movs	r1, #4
   1892a:	3008      	adds	r0, #8
   1892c:	f004 fb56 	bl	1cfdc <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   18930:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18934:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   18936:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   18938:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1893c:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1893e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18940:	f242 0024 	movw	r0, #8228	; 0x2024
   18944:	f7ff fe14 	bl	18570 <bt_hci_cmd_send_sync>
		if (err) {
   18948:	4604      	mov	r4, r0
   1894a:	2800      	cmp	r0, #0
   1894c:	f47f af7f 	bne.w	1884e <hci_init+0x19a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   18950:	2108      	movs	r1, #8
   18952:	f242 0001 	movw	r0, #8193	; 0x2001
   18956:	f7ff fdc3 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   1895a:	4604      	mov	r4, r0
   1895c:	2800      	cmp	r0, #0
   1895e:	f43f af49 	beq.w	187f4 <hci_init+0x140>
   18962:	2108      	movs	r1, #8
   18964:	4408      	add	r0, r1
   18966:	f004 fb39 	bl	1cfdc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1896a:	f895 20a0 	ldrb.w	r2, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1896e:	f012 0f02 	tst.w	r2, #2
   18972:	bf14      	ite	ne
   18974:	232f      	movne	r3, #47	; 0x2f
   18976:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   18978:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1897a:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1897e:	bf48      	it	mi
   18980:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   18984:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   18988:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1898c:	bf18      	it	ne
   1898e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   18992:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   18994:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   18998:	4621      	mov	r1, r4
   1899a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1899c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1899e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   189a0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   189a2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   189a4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   189a6:	71c2      	strb	r2, [r0, #7]
   189a8:	f242 0001 	movw	r0, #8193	; 0x2001
   189ac:	f7ff fde0 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   189b0:	4604      	mov	r4, r0
   189b2:	2800      	cmp	r0, #0
   189b4:	f47f af4b 	bne.w	1884e <hci_init+0x19a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   189b8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   189bc:	069a      	lsls	r2, r3, #26
   189be:	d41e      	bmi.n	189fe <hci_init+0x34a>
	if (bt_dev.le.acl_mtu) {
   189c0:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   189c4:	b9d9      	cbnz	r1, 189fe <hci_init+0x34a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   189c6:	f241 0005 	movw	r0, #4101	; 0x1005
   189ca:	aa01      	add	r2, sp, #4
   189cc:	f7ff fdd0 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   189d0:	4604      	mov	r4, r0
   189d2:	2800      	cmp	r0, #0
   189d4:	f47f af3b 	bne.w	1884e <hci_init+0x19a>
	if (bt_dev.le.acl_mtu) {
   189d8:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   189dc:	b963      	cbnz	r3, 189f8 <hci_init+0x344>
	read_buffer_size_complete(rsp);
   189de:	9b01      	ldr	r3, [sp, #4]
   189e0:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   189e2:	785a      	ldrb	r2, [r3, #1]
   189e4:	7899      	ldrb	r1, [r3, #2]
   189e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   189ea:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   189ee:	889a      	ldrh	r2, [r3, #4]
   189f0:	484a      	ldr	r0, [pc, #296]	; (18b1c <hci_init+0x468>)
   189f2:	4611      	mov	r1, r2
   189f4:	f01c fc56 	bl	352a4 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   189f8:	9801      	ldr	r0, [sp, #4]
   189fa:	f004 f9bf 	bl	1cd7c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   189fe:	2108      	movs	r1, #8
   18a00:	f640 4001 	movw	r0, #3073	; 0xc01
   18a04:	f7ff fd6c 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   18a08:	4604      	mov	r4, r0
   18a0a:	2800      	cmp	r0, #0
   18a0c:	f43f aef2 	beq.w	187f4 <hci_init+0x140>
   18a10:	2108      	movs	r1, #8
   18a12:	4408      	add	r0, r1
   18a14:	f004 fae2 	bl	1cfdc <net_buf_simple_add>
	dst[0] = val;
   18a18:	2310      	movs	r3, #16
   18a1a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   18a1c:	2388      	movs	r3, #136	; 0x88
   18a1e:	7043      	strb	r3, [r0, #1]
   18a20:	2302      	movs	r3, #2
	dst[0] = val;
   18a22:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   18a24:	70c3      	strb	r3, [r0, #3]
   18a26:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   18a28:	4621      	mov	r1, r4
	dst[0] = val;
   18a2a:	7082      	strb	r2, [r0, #2]
   18a2c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   18a2e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   18a30:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   18a32:	71c3      	strb	r3, [r0, #7]
   18a34:	f640 4001 	movw	r0, #3073	; 0xc01
   18a38:	f7ff fd9a 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   18a3c:	4604      	mov	r4, r0
   18a3e:	2800      	cmp	r0, #0
   18a40:	f47f af05 	bne.w	1884e <hci_init+0x19a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   18a44:	4601      	mov	r1, r0
   18a46:	aa01      	add	r2, sp, #4
   18a48:	f64f 4001 	movw	r0, #64513	; 0xfc01
   18a4c:	f7ff fd90 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   18a50:	4604      	mov	r4, r0
   18a52:	b340      	cbz	r0, 18aa6 <hci_init+0x3f2>
   18a54:	4932      	ldr	r1, [pc, #200]	; (18b20 <hci_init+0x46c>)
   18a56:	4b33      	ldr	r3, [pc, #204]	; (18b24 <hci_init+0x470>)
		BT_WARN("Vendor HCI extensions not available");
   18a58:	4833      	ldr	r0, [pc, #204]	; (18b28 <hci_init+0x474>)
   18a5a:	1ac9      	subs	r1, r1, r3
   18a5c:	08c9      	lsrs	r1, r1, #3
   18a5e:	0189      	lsls	r1, r1, #6
   18a60:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
   18a64:	f015 fcc4 	bl	2e3f0 <log_0>
	err = bt_id_init();
   18a68:	f000 fef6 	bl	19858 <bt_id_init>
   18a6c:	4604      	mov	r4, r0
	if (err) {
   18a6e:	e6ee      	b.n	1884e <hci_init+0x19a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   18a70:	2102      	movs	r1, #2
   18a72:	f640 406d 	movw	r0, #3181	; 0xc6d
   18a76:	f7ff fd33 	bl	184e0 <bt_hci_cmd_create>
		if (!buf) {
   18a7a:	4604      	mov	r4, r0
   18a7c:	2800      	cmp	r0, #0
   18a7e:	f43f aeb9 	beq.w	187f4 <hci_init+0x140>
   18a82:	2102      	movs	r1, #2
   18a84:	3008      	adds	r0, #8
   18a86:	f004 faa9 	bl	1cfdc <net_buf_simple_add>
		cp_le->le = 0x01;
   18a8a:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   18a8c:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   18a8e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   18a90:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   18a92:	4632      	mov	r2, r6
   18a94:	f640 406d 	movw	r0, #3181	; 0xc6d
   18a98:	f7ff fd6a 	bl	18570 <bt_hci_cmd_send_sync>
		if (err) {
   18a9c:	4604      	mov	r4, r0
   18a9e:	2800      	cmp	r0, #0
   18aa0:	f43f af17 	beq.w	188d2 <hci_init+0x21e>
   18aa4:	e6d3      	b.n	1884e <hci_init+0x19a>
	net_buf_unref(rsp);
   18aa6:	9801      	ldr	r0, [sp, #4]
   18aa8:	f004 f968 	bl	1cd7c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   18aac:	4621      	mov	r1, r4
   18aae:	f64f 4002 	movw	r0, #64514	; 0xfc02
   18ab2:	aa01      	add	r2, sp, #4
   18ab4:	f7ff fd5c 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   18ab8:	4604      	mov	r4, r0
   18aba:	b140      	cbz	r0, 18ace <hci_init+0x41a>
   18abc:	4918      	ldr	r1, [pc, #96]	; (18b20 <hci_init+0x46c>)
   18abe:	4b19      	ldr	r3, [pc, #100]	; (18b24 <hci_init+0x470>)
		BT_WARN("Failed to read supported vendor commands");
   18ac0:	481a      	ldr	r0, [pc, #104]	; (18b2c <hci_init+0x478>)
   18ac2:	1ac9      	subs	r1, r1, r3
   18ac4:	08c9      	lsrs	r1, r1, #3
   18ac6:	0189      	lsls	r1, r1, #6
   18ac8:	f041 0102 	orr.w	r1, r1, #2
   18acc:	e7ca      	b.n	18a64 <hci_init+0x3b0>
	rp.cmds = (void *)rsp->data;
   18ace:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   18ad0:	6883      	ldr	r3, [r0, #8]
   18ad2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   18ad6:	f8a5 3085 	strh.w	r3, [r5, #133]	; 0x85
	net_buf_unref(rsp);
   18ada:	f004 f94f 	bl	1cd7c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   18ade:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   18ae2:	075b      	lsls	r3, r3, #29
   18ae4:	d5c0      	bpl.n	18a68 <hci_init+0x3b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   18ae6:	4621      	mov	r1, r4
   18ae8:	f64f 4003 	movw	r0, #64515	; 0xfc03
   18aec:	aa01      	add	r2, sp, #4
   18aee:	f7ff fd3f 	bl	18570 <bt_hci_cmd_send_sync>
		if (err) {
   18af2:	b140      	cbz	r0, 18b06 <hci_init+0x452>
   18af4:	490a      	ldr	r1, [pc, #40]	; (18b20 <hci_init+0x46c>)
   18af6:	4b0b      	ldr	r3, [pc, #44]	; (18b24 <hci_init+0x470>)
			BT_WARN("Failed to read supported vendor features");
   18af8:	480d      	ldr	r0, [pc, #52]	; (18b30 <hci_init+0x47c>)
   18afa:	1ac9      	subs	r1, r1, r3
   18afc:	08c9      	lsrs	r1, r1, #3
   18afe:	0189      	lsls	r1, r1, #6
   18b00:	f041 0102 	orr.w	r1, r1, #2
   18b04:	e7ae      	b.n	18a64 <hci_init+0x3b0>
		rp.feat = (void *)rsp->data;
   18b06:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   18b08:	6883      	ldr	r3, [r0, #8]
   18b0a:	785b      	ldrb	r3, [r3, #1]
   18b0c:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
		net_buf_unref(rsp);
   18b10:	f004 f934 	bl	1cd7c <net_buf_unref>
   18b14:	e7a8      	b.n	18a68 <hci_init+0x3b4>
   18b16:	bf00      	nop
   18b18:	200145a0 	.word	0x200145a0
   18b1c:	200145d0 	.word	0x200145d0
   18b20:	00036508 	.word	0x00036508
   18b24:	000364b0 	.word	0x000364b0
   18b28:	0003981d 	.word	0x0003981d
   18b2c:	00039841 	.word	0x00039841
   18b30:	0003986a 	.word	0x0003986a

00018b34 <bt_le_create_conn_legacy>:
{
   18b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b36:	b085      	sub	sp, #20
   18b38:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   18b3a:	f10d 0103 	add.w	r1, sp, #3
   18b3e:	2000      	movs	r0, #0
   18b40:	f000 fe6a 	bl	19818 <bt_id_set_create_conn_own_addr>
	if (err) {
   18b44:	4604      	mov	r4, r0
   18b46:	2800      	cmp	r0, #0
   18b48:	d146      	bne.n	18bd8 <bt_le_create_conn_legacy+0xa4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   18b4a:	2119      	movs	r1, #25
   18b4c:	f242 000d 	movw	r0, #8205	; 0x200d
   18b50:	f7ff fcc6 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   18b54:	4607      	mov	r7, r0
   18b56:	2800      	cmp	r0, #0
   18b58:	d041      	beq.n	18bde <bt_le_create_conn_legacy+0xaa>
   18b5a:	2119      	movs	r1, #25
   18b5c:	3008      	adds	r0, #8
   18b5e:	f004 fa3d 	bl	1cfdc <net_buf_simple_add>
   18b62:	4605      	mov	r5, r0
   18b64:	2219      	movs	r2, #25
   18b66:	4621      	mov	r1, r4
   18b68:	f01c fd2d 	bl	355c6 <memset>
	cp->own_addr_type = own_addr_type;
   18b6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   18b70:	f106 0190 	add.w	r1, r6, #144	; 0x90
	cp->own_addr_type = own_addr_type;
   18b74:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   18b76:	1d68      	adds	r0, r5, #5
   18b78:	f017 fd17 	bl	305aa <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   18b7c:	4b19      	ldr	r3, [pc, #100]	; (18be4 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
   18b7e:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   18b80:	899a      	ldrh	r2, [r3, #12]
	state->target = target;
   18b82:	3398      	adds	r3, #152	; 0x98
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   18b84:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   18b86:	f833 2c8a 	ldrh.w	r2, [r3, #-138]
	cmd(buf)->state = state;
   18b8a:	4638      	mov	r0, r7
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   18b8c:	806a      	strh	r2, [r5, #2]
	state->target = target;
   18b8e:	9301      	str	r3, [sp, #4]
	state->bit = bit;
   18b90:	230b      	movs	r3, #11
   18b92:	9302      	str	r3, [sp, #8]
	state->val = val;
   18b94:	2301      	movs	r3, #1
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   18b96:	f8b6 20a8 	ldrh.w	r2, [r6, #168]	; 0xa8
	state->val = val;
   18b9a:	f88d 300c 	strb.w	r3, [sp, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   18b9e:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   18ba2:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
   18ba6:	f8a5 200f 	strh.w	r2, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   18baa:	f8b6 20ac 	ldrh.w	r2, [r6, #172]	; 0xac
   18bae:	f8a5 2011 	strh.w	r2, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   18bb2:	f8b6 20ae 	ldrh.w	r2, [r6, #174]	; 0xae
   18bb6:	f8a5 2013 	strh.w	r2, [r5, #19]
	cmd(buf)->state = state;
   18bba:	f003 ff47 	bl	1ca4c <net_buf_id>
   18bbe:	220c      	movs	r2, #12
   18bc0:	4b09      	ldr	r3, [pc, #36]	; (18be8 <bt_le_create_conn_legacy+0xb4>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   18bc2:	4639      	mov	r1, r7
	cmd(buf)->state = state;
   18bc4:	fb02 3300 	mla	r3, r2, r0, r3
   18bc8:	aa01      	add	r2, sp, #4
   18bca:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   18bcc:	f242 000d 	movw	r0, #8205	; 0x200d
   18bd0:	4622      	mov	r2, r4
   18bd2:	f7ff fccd 	bl	18570 <bt_hci_cmd_send_sync>
   18bd6:	4604      	mov	r4, r0
}
   18bd8:	4620      	mov	r0, r4
   18bda:	b005      	add	sp, #20
   18bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   18bde:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18be2:	e7f9      	b.n	18bd8 <bt_le_create_conn_legacy+0xa4>
   18be4:	20014500 	.word	0x20014500
   18be8:	20016174 	.word	0x20016174

00018bec <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
   18bec:	4b02      	ldr	r3, [pc, #8]	; (18bf8 <bt_send+0xc>)
   18bee:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   18bf2:	691b      	ldr	r3, [r3, #16]
   18bf4:	4718      	bx	r3
   18bf6:	bf00      	nop
   18bf8:	20014500 	.word	0x20014500

00018bfc <bt_hci_cmd_send>:
{
   18bfc:	b538      	push	{r3, r4, r5, lr}
   18bfe:	4605      	mov	r5, r0
	if (!buf) {
   18c00:	460c      	mov	r4, r1
   18c02:	b919      	cbnz	r1, 18c0c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   18c04:	f7ff fc6c 	bl	184e0 <bt_hci_cmd_create>
		if (!buf) {
   18c08:	4604      	mov	r4, r0
   18c0a:	b1f0      	cbz	r0, 18c4a <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   18c0c:	f640 4335 	movw	r3, #3125	; 0xc35
   18c10:	429d      	cmp	r5, r3
   18c12:	d114      	bne.n	18c3e <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
   18c14:	4620      	mov	r0, r4
   18c16:	f7ff ffe9 	bl	18bec <bt_send>
		if (err) {
   18c1a:	4605      	mov	r5, r0
   18c1c:	b168      	cbz	r0, 18c3a <bt_hci_cmd_send+0x3e>
   18c1e:	4b0c      	ldr	r3, [pc, #48]	; (18c50 <bt_hci_cmd_send+0x54>)
   18c20:	4a0c      	ldr	r2, [pc, #48]	; (18c54 <bt_hci_cmd_send+0x58>)
			BT_ERR("Unable to send to driver (err %d)", err);
   18c22:	4601      	mov	r1, r0
   18c24:	1ad2      	subs	r2, r2, r3
   18c26:	08d2      	lsrs	r2, r2, #3
   18c28:	0192      	lsls	r2, r2, #6
   18c2a:	480b      	ldr	r0, [pc, #44]	; (18c58 <bt_hci_cmd_send+0x5c>)
   18c2c:	f042 0201 	orr.w	r2, r2, #1
   18c30:	f015 fbeb 	bl	2e40a <log_1>
			net_buf_unref(buf);
   18c34:	4620      	mov	r0, r4
   18c36:	f004 f8a1 	bl	1cd7c <net_buf_unref>
}
   18c3a:	4628      	mov	r0, r5
   18c3c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   18c3e:	4621      	mov	r1, r4
   18c40:	4806      	ldr	r0, [pc, #24]	; (18c5c <bt_hci_cmd_send+0x60>)
   18c42:	f004 f867 	bl	1cd14 <net_buf_put>
	return 0;
   18c46:	2500      	movs	r5, #0
   18c48:	e7f7      	b.n	18c3a <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   18c4a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   18c4e:	e7f4      	b.n	18c3a <bt_hci_cmd_send+0x3e>
   18c50:	000364b0 	.word	0x000364b0
   18c54:	00036508 	.word	0x00036508
   18c58:	00039893 	.word	0x00039893
   18c5c:	20014604 	.word	0x20014604

00018c60 <bt_hci_host_num_completed_packets>:
{
   18c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c62:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   18c64:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18c66:	7980      	ldrb	r0, [r0, #6]
   18c68:	f003 fee8 	bl	1ca3c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   18c6c:	4621      	mov	r1, r4
   18c6e:	f01c fb0f 	bl	35290 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   18c72:	4b2d      	ldr	r3, [pc, #180]	; (18d28 <bt_hci_host_num_completed_packets+0xc8>)
   18c74:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   18c78:	069b      	lsls	r3, r3, #26
   18c7a:	d553      	bpl.n	18d24 <bt_hci_host_num_completed_packets+0xc4>
	conn = bt_conn_lookup_index(acl(buf)->index);
   18c7c:	7d60      	ldrb	r0, [r4, #21]
   18c7e:	f001 fbbb 	bl	1a3f8 <bt_conn_lookup_index>
	if (!conn) {
   18c82:	4605      	mov	r5, r0
   18c84:	b960      	cbnz	r0, 18ca0 <bt_hci_host_num_completed_packets+0x40>
   18c86:	4b29      	ldr	r3, [pc, #164]	; (18d2c <bt_hci_host_num_completed_packets+0xcc>)
   18c88:	4a29      	ldr	r2, [pc, #164]	; (18d30 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Unable to look up conn with index 0x%02x",
   18c8a:	7d61      	ldrb	r1, [r4, #21]
   18c8c:	1ad2      	subs	r2, r2, r3
   18c8e:	08d2      	lsrs	r2, r2, #3
   18c90:	0192      	lsls	r2, r2, #6
   18c92:	4828      	ldr	r0, [pc, #160]	; (18d34 <bt_hci_host_num_completed_packets+0xd4>)
   18c94:	f042 0202 	orr.w	r2, r2, #2
}
   18c98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
   18c9c:	f015 bbb5 	b.w	2e40a <log_1>
	if (!bt_conn_is_handle_valid(conn)) {
   18ca0:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   18ca2:	2b01      	cmp	r3, #1
   18ca4:	d002      	beq.n	18cac <bt_hci_host_num_completed_packets+0x4c>
   18ca6:	3b07      	subs	r3, #7
   18ca8:	2b01      	cmp	r3, #1
   18caa:	d815      	bhi.n	18cd8 <bt_hci_host_num_completed_packets+0x78>
	bt_conn_unref(conn);
   18cac:	4628      	mov	r0, r5
   18cae:	f001 f9cb 	bl	1a048 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   18cb2:	2105      	movs	r1, #5
   18cb4:	f640 4035 	movw	r0, #3125	; 0xc35
   18cb8:	f7ff fc12 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   18cbc:	4604      	mov	r4, r0
   18cbe:	b9d0      	cbnz	r0, 18cf6 <bt_hci_host_num_completed_packets+0x96>
   18cc0:	4b1a      	ldr	r3, [pc, #104]	; (18d2c <bt_hci_host_num_completed_packets+0xcc>)
   18cc2:	491b      	ldr	r1, [pc, #108]	; (18d30 <bt_hci_host_num_completed_packets+0xd0>)
		BT_ERR("Unable to allocate new HCI command");
   18cc4:	481c      	ldr	r0, [pc, #112]	; (18d38 <bt_hci_host_num_completed_packets+0xd8>)
   18cc6:	1ac9      	subs	r1, r1, r3
   18cc8:	08c9      	lsrs	r1, r1, #3
   18cca:	0189      	lsls	r1, r1, #6
   18ccc:	f041 0101 	orr.w	r1, r1, #1
}
   18cd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
   18cd4:	f015 bb8c 	b.w	2e3f0 <log_0>
   18cd8:	4b14      	ldr	r3, [pc, #80]	; (18d2c <bt_hci_host_num_completed_packets+0xcc>)
   18cda:	4915      	ldr	r1, [pc, #84]	; (18d30 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Not reporting packet for non-connected conn");
   18cdc:	4817      	ldr	r0, [pc, #92]	; (18d3c <bt_hci_host_num_completed_packets+0xdc>)
   18cde:	1ac9      	subs	r1, r1, r3
   18ce0:	08c9      	lsrs	r1, r1, #3
   18ce2:	0189      	lsls	r1, r1, #6
   18ce4:	f041 0102 	orr.w	r1, r1, #2
   18ce8:	f015 fb82 	bl	2e3f0 <log_0>
		bt_conn_unref(conn);
   18cec:	4628      	mov	r0, r5
}
   18cee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   18cf2:	f001 b9a9 	b.w	1a048 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
   18cf6:	f100 0708 	add.w	r7, r0, #8
   18cfa:	2101      	movs	r1, #1
   18cfc:	4638      	mov	r0, r7
   18cfe:	f004 f96d 	bl	1cfdc <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   18d02:	2501      	movs	r5, #1
   18d04:	2104      	movs	r1, #4
   18d06:	7005      	strb	r5, [r0, #0]
   18d08:	4638      	mov	r0, r7
   18d0a:	f004 f967 	bl	1cfdc <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   18d0e:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   18d10:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   18d12:	7085      	strb	r5, [r0, #2]
   18d14:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   18d16:	4621      	mov	r1, r4
}
   18d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   18d1c:	f640 4035 	movw	r0, #3125	; 0xc35
   18d20:	f7ff bf6c 	b.w	18bfc <bt_hci_cmd_send>
}
   18d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d26:	bf00      	nop
   18d28:	20014500 	.word	0x20014500
   18d2c:	000364b0 	.word	0x000364b0
   18d30:	00036508 	.word	0x00036508
   18d34:	000398b5 	.word	0x000398b5
   18d38:	0003990a 	.word	0x0003990a
   18d3c:	000398de 	.word	0x000398de

00018d40 <conn_auto_initiate>:
{
   18d40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18d42:	7a83      	ldrb	r3, [r0, #10]
{
   18d44:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18d46:	2b07      	cmp	r3, #7
   18d48:	d11d      	bne.n	18d86 <conn_auto_initiate+0x46>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18d4a:	1d06      	adds	r6, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18d4c:	e8d6 3faf 	lda	r3, [r6]
   18d50:	049b      	lsls	r3, r3, #18
   18d52:	d41a      	bmi.n	18d8a <conn_auto_initiate+0x4a>
   18d54:	78c3      	ldrb	r3, [r0, #3]
   18d56:	b123      	cbz	r3, 18d62 <conn_auto_initiate+0x22>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   18d58:	4b32      	ldr	r3, [pc, #200]	; (18e24 <conn_auto_initiate+0xe4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   18d5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   18d5e:	071d      	lsls	r5, r3, #28
   18d60:	d513      	bpl.n	18d8a <conn_auto_initiate+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   18d62:	2102      	movs	r1, #2
   18d64:	f242 0016 	movw	r0, #8214	; 0x2016
   18d68:	f7ff fbba 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   18d6c:	4605      	mov	r5, r0
   18d6e:	b160      	cbz	r0, 18d8a <conn_auto_initiate+0x4a>
   18d70:	2102      	movs	r1, #2
   18d72:	3008      	adds	r0, #8
   18d74:	f004 f932 	bl	1cfdc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   18d78:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   18d7a:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
   18d7c:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   18d7e:	f242 0016 	movw	r0, #8214	; 0x2016
   18d82:	f7ff ff3b 	bl	18bfc <bt_hci_cmd_send>
}
   18d86:	b004      	add	sp, #16
   18d88:	bd70      	pop	{r4, r5, r6, pc}
   18d8a:	e8d6 3faf 	lda	r3, [r6]
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   18d8e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   18d92:	4d24      	ldr	r5, [pc, #144]	; (18e24 <conn_auto_initiate+0xe4>)
   18d94:	f3c3 3100 	ubfx	r1, r3, #12, #1
   18d98:	d11e      	bne.n	18dd8 <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   18d9a:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   18d9e:	07d8      	lsls	r0, r3, #31
   18da0:	d51a      	bpl.n	18dd8 <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   18da2:	2302      	movs	r3, #2
   18da4:	9100      	str	r1, [sp, #0]
   18da6:	461a      	mov	r2, r3
   18da8:	4620      	mov	r0, r4
   18daa:	f017 fc64 	bl	30676 <bt_le_set_phy>
		if (!err) {
   18dae:	4601      	mov	r1, r0
   18db0:	b940      	cbnz	r0, 18dc4 <conn_auto_initiate+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18db2:	e8d6 3fef 	ldaex	r3, [r6]
   18db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18dba:	e8c6 3fe2 	stlex	r2, r3, [r6]
   18dbe:	2a00      	cmp	r2, #0
   18dc0:	d0e1      	beq.n	18d86 <conn_auto_initiate+0x46>
   18dc2:	e7f6      	b.n	18db2 <conn_auto_initiate+0x72>
   18dc4:	4a18      	ldr	r2, [pc, #96]	; (18e28 <conn_auto_initiate+0xe8>)
   18dc6:	4b19      	ldr	r3, [pc, #100]	; (18e2c <conn_auto_initiate+0xec>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   18dc8:	4819      	ldr	r0, [pc, #100]	; (18e30 <conn_auto_initiate+0xf0>)
   18dca:	1ad2      	subs	r2, r2, r3
   18dcc:	08d2      	lsrs	r2, r2, #3
   18dce:	0192      	lsls	r2, r2, #6
   18dd0:	f042 0201 	orr.w	r2, r2, #1
   18dd4:	f015 fb19 	bl	2e40a <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   18dd8:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   18ddc:	069a      	lsls	r2, r3, #26
   18dde:	d5d2      	bpl.n	18d86 <conn_auto_initiate+0x46>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   18de0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   18de4:	689b      	ldr	r3, [r3, #8]
   18de6:	079b      	lsls	r3, r3, #30
   18de8:	d5cd      	bpl.n	18d86 <conn_auto_initiate+0x46>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18dea:	f10d 010e 	add.w	r1, sp, #14
   18dee:	a803      	add	r0, sp, #12
   18df0:	f7ff fc36 	bl	18660 <hci_le_read_max_data_len>
			if (!err) {
   18df4:	2800      	cmp	r0, #0
   18df6:	d1c6      	bne.n	18d86 <conn_auto_initiate+0x46>
				err = bt_le_set_data_len(conn,
   18df8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   18dfc:	4620      	mov	r0, r4
   18dfe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   18e02:	f017 fc1b 	bl	3063c <bt_le_set_data_len>
				if (err) {
   18e06:	4601      	mov	r1, r0
   18e08:	2800      	cmp	r0, #0
   18e0a:	d0bc      	beq.n	18d86 <conn_auto_initiate+0x46>
   18e0c:	4b07      	ldr	r3, [pc, #28]	; (18e2c <conn_auto_initiate+0xec>)
   18e0e:	4a06      	ldr	r2, [pc, #24]	; (18e28 <conn_auto_initiate+0xe8>)
					BT_ERR("Failed to set data len (%d)", err);
   18e10:	4808      	ldr	r0, [pc, #32]	; (18e34 <conn_auto_initiate+0xf4>)
   18e12:	1ad2      	subs	r2, r2, r3
   18e14:	08d2      	lsrs	r2, r2, #3
   18e16:	0192      	lsls	r2, r2, #6
   18e18:	f042 0201 	orr.w	r2, r2, #1
   18e1c:	f015 faf5 	bl	2e40a <log_1>
		}
   18e20:	e7b1      	b.n	18d86 <conn_auto_initiate+0x46>
   18e22:	bf00      	nop
   18e24:	20014500 	.word	0x20014500
   18e28:	00036508 	.word	0x00036508
   18e2c:	000364b0 	.word	0x000364b0
   18e30:	0003992d 	.word	0x0003992d
   18e34:	00039947 	.word	0x00039947

00018e38 <bt_hci_le_enh_conn_complete>:
{
   18e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18e3c:	f8b0 9001 	ldrh.w	r9, [r0, #1]
   18e40:	f04f 0800 	mov.w	r8, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   18e44:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   18e48:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   18e4c:	4a6e      	ldr	r2, [pc, #440]	; (19008 <bt_hci_le_enh_conn_complete+0x1d0>)
   18e4e:	b29b      	uxth	r3, r3
   18e50:	8811      	ldrh	r1, [r2, #0]
	if (evt->status) {
   18e52:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   18e54:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   18e56:	bf08      	it	eq
   18e58:	f8a2 8000 	strheq.w	r8, [r2]
{
   18e5c:	4605      	mov	r5, r0
			return true;
   18e5e:	bf08      	it	eq
   18e60:	f04f 0801 	moveq.w	r8, #1
{
   18e64:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18e66:	fa1f f689 	uxth.w	r6, r9
	if (evt->status) {
   18e6a:	b3ac      	cbz	r4, 18ed8 <bt_hci_le_enh_conn_complete+0xa0>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18e6c:	2c02      	cmp	r4, #2
   18e6e:	d127      	bne.n	18ec0 <bt_hci_le_enh_conn_complete+0x88>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   18e70:	2100      	movs	r1, #0
   18e72:	2206      	movs	r2, #6
   18e74:	4608      	mov	r0, r1
   18e76:	f001 fa39 	bl	1a2ec <bt_conn_lookup_state_le>
	if (!conn) {
   18e7a:	4605      	mov	r5, r0
   18e7c:	b978      	cbnz	r0, 18e9e <bt_hci_le_enh_conn_complete+0x66>
   18e7e:	4963      	ldr	r1, [pc, #396]	; (1900c <bt_hci_le_enh_conn_complete+0x1d4>)
   18e80:	4b63      	ldr	r3, [pc, #396]	; (19010 <bt_hci_le_enh_conn_complete+0x1d8>)
		BT_ERR("No pending master connection");
   18e82:	4864      	ldr	r0, [pc, #400]	; (19014 <bt_hci_le_enh_conn_complete+0x1dc>)
   18e84:	1ac9      	subs	r1, r1, r3
   18e86:	08c9      	lsrs	r1, r1, #3
   18e88:	0189      	lsls	r1, r1, #6
   18e8a:	f041 0101 	orr.w	r1, r1, #1
   18e8e:	f015 faaf 	bl	2e3f0 <log_0>
			bt_le_scan_update(false);
   18e92:	2000      	movs	r0, #0
   18e94:	f000 fd9a 	bl	199cc <bt_le_scan_update>
}
   18e98:	b005      	add	sp, #20
   18e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18e9e:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18ea0:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18ea2:	f001 f903 	bl	1a0ac <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18ea6:	1d2b      	adds	r3, r5, #4
   18ea8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   18eac:	07db      	lsls	r3, r3, #31
   18eae:	d503      	bpl.n	18eb8 <bt_hci_le_enh_conn_complete+0x80>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   18eb0:	4621      	mov	r1, r4
   18eb2:	4628      	mov	r0, r5
   18eb4:	f001 f8fa 	bl	1a0ac <bt_conn_set_state>
	bt_conn_unref(conn);
   18eb8:	4628      	mov	r0, r5
   18eba:	f001 f8c5 	bl	1a048 <bt_conn_unref>
   18ebe:	e7e8      	b.n	18e92 <bt_hci_le_enh_conn_complete+0x5a>
   18ec0:	4b53      	ldr	r3, [pc, #332]	; (19010 <bt_hci_le_enh_conn_complete+0x1d8>)
   18ec2:	4a52      	ldr	r2, [pc, #328]	; (1900c <bt_hci_le_enh_conn_complete+0x1d4>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   18ec4:	4621      	mov	r1, r4
   18ec6:	1ad2      	subs	r2, r2, r3
   18ec8:	08d2      	lsrs	r2, r2, #3
   18eca:	0192      	lsls	r2, r2, #6
   18ecc:	4852      	ldr	r0, [pc, #328]	; (19018 <bt_hci_le_enh_conn_complete+0x1e0>)
   18ece:	f042 0202 	orr.w	r2, r2, #2
   18ed2:	f015 fa9a 	bl	2e40a <log_1>
		return;
   18ed6:	e7df      	b.n	18e98 <bt_hci_le_enh_conn_complete+0x60>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   18ed8:	7903      	ldrb	r3, [r0, #4]
   18eda:	1d07      	adds	r7, r0, #4
   18edc:	3b02      	subs	r3, #2
   18ede:	2b01      	cmp	r3, #1
   18ee0:	d83a      	bhi.n	18f58 <bt_hci_le_enh_conn_complete+0x120>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   18ee2:	4639      	mov	r1, r7
   18ee4:	a802      	add	r0, sp, #8
   18ee6:	f017 fb60 	bl	305aa <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18eea:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   18eee:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18ef2:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   18ef4:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18ef8:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   18efc:	f017 fb5c 	bl	305b8 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18f00:	2301      	movs	r3, #1
   18f02:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   18f06:	78e8      	ldrb	r0, [r5, #3]
   18f08:	b980      	cbnz	r0, 18f2c <bt_hci_le_enh_conn_complete+0xf4>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   18f0a:	2206      	movs	r2, #6
   18f0c:	a902      	add	r1, sp, #8
   18f0e:	f001 f9ed 	bl	1a2ec <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18f12:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   18f14:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18f16:	b943      	cbnz	r3, 18f2a <bt_hci_le_enh_conn_complete+0xf2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18f18:	4b40      	ldr	r3, [pc, #256]	; (1901c <bt_hci_le_enh_conn_complete+0x1e4>)
   18f1a:	e8d3 2fef 	ldaex	r2, [r3]
   18f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   18f22:	e8c3 2fe1 	stlex	r1, r2, [r3]
   18f26:	2900      	cmp	r1, #0
   18f28:	d1f7      	bne.n	18f1a <bt_hci_le_enh_conn_complete+0xe2>
	if (!conn) {
   18f2a:	bb44      	cbnz	r4, 18f7e <bt_hci_le_enh_conn_complete+0x146>
   18f2c:	4a38      	ldr	r2, [pc, #224]	; (19010 <bt_hci_le_enh_conn_complete+0x1d8>)
   18f2e:	4c37      	ldr	r4, [pc, #220]	; (1900c <bt_hci_le_enh_conn_complete+0x1d4>)
		BT_ERR("No pending conn for peer %s",
   18f30:	4638      	mov	r0, r7
   18f32:	1aa4      	subs	r4, r4, r2
   18f34:	f7fe ff20 	bl	17d78 <bt_addr_le_str_real>
   18f38:	f7fb fe0c 	bl	14b54 <z_log_strdup>
   18f3c:	08e4      	lsrs	r4, r4, #3
   18f3e:	01a4      	lsls	r4, r4, #6
   18f40:	f044 0401 	orr.w	r4, r4, #1
   18f44:	4601      	mov	r1, r0
   18f46:	4622      	mov	r2, r4
   18f48:	4835      	ldr	r0, [pc, #212]	; (19020 <bt_hci_le_enh_conn_complete+0x1e8>)
   18f4a:	f015 fa5e 	bl	2e40a <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18f4e:	211f      	movs	r1, #31
   18f50:	4630      	mov	r0, r6
   18f52:	f017 fb38 	bl	305c6 <bt_hci_disconnect>
		return;
   18f56:	e79f      	b.n	18e98 <bt_hci_le_enh_conn_complete+0x60>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   18f58:	78c3      	ldrb	r3, [r0, #3]
		bt_addr_le_copy(&id_addr,
   18f5a:	4639      	mov	r1, r7
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   18f5c:	2b01      	cmp	r3, #1
   18f5e:	bf04      	itt	eq
   18f60:	4b30      	ldreq	r3, [pc, #192]	; (19024 <bt_hci_le_enh_conn_complete+0x1ec>)
   18f62:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   18f66:	4620      	mov	r0, r4
   18f68:	f017 fbf4 	bl	30754 <bt_lookup_id_addr>
   18f6c:	4601      	mov	r1, r0
   18f6e:	a802      	add	r0, sp, #8
   18f70:	f017 fb1b 	bl	305aa <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   18f74:	4639      	mov	r1, r7
   18f76:	4668      	mov	r0, sp
   18f78:	f017 fb17 	bl	305aa <bt_addr_le_copy>
   18f7c:	e7c3      	b.n	18f06 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   18f7e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18f80:	a902      	add	r1, sp, #8
	conn->handle = handle;
   18f82:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18f86:	f017 fb10 	bl	305aa <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18f8a:	7e2a      	ldrb	r2, [r5, #24]
   18f8c:	7deb      	ldrb	r3, [r5, #23]
   18f8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18f92:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   18f96:	7eaa      	ldrb	r2, [r5, #26]
   18f98:	7e6b      	ldrb	r3, [r5, #25]
   18f9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18f9e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18fa2:	7f2a      	ldrb	r2, [r5, #28]
   18fa4:	7eeb      	ldrb	r3, [r5, #27]
   18fa6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   18faa:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18fac:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   18fb0:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   18fb2:	7262      	strb	r2, [r4, #9]
	conn->role = evt->role;
   18fb4:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18fb6:	b96b      	cbnz	r3, 18fd4 <bt_hci_le_enh_conn_complete+0x19c>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   18fb8:	4669      	mov	r1, sp
   18fba:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   18fbe:	f017 faf4 	bl	305aa <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   18fc2:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   18fc4:	4b17      	ldr	r3, [pc, #92]	; (19024 <bt_hci_le_enh_conn_complete+0x1ec>)
					&bt_dev.id_addr[conn->id]);
   18fc6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   18fca:	4419      	add	r1, r3
   18fcc:	f104 0097 	add.w	r0, r4, #151	; 0x97
   18fd0:	f017 faeb 	bl	305aa <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18fd4:	2107      	movs	r1, #7
   18fd6:	4620      	mov	r0, r4
   18fd8:	f001 f868 	bl	1a0ac <bt_conn_set_state>
	if (is_disconnected) {
   18fdc:	f1b8 0f00 	cmp.w	r8, #0
   18fe0:	d003      	beq.n	18fea <bt_hci_le_enh_conn_complete+0x1b2>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18fe2:	2101      	movs	r1, #1
   18fe4:	4620      	mov	r0, r4
   18fe6:	f001 f861 	bl	1a0ac <bt_conn_set_state>
	bt_conn_connected(conn);
   18fea:	4620      	mov	r0, r4
   18fec:	f017 fc09 	bl	30802 <bt_conn_connected>
	conn_auto_initiate(conn);
   18ff0:	4620      	mov	r0, r4
   18ff2:	f7ff fea5 	bl	18d40 <conn_auto_initiate>
	bt_conn_unref(conn);
   18ff6:	4620      	mov	r0, r4
   18ff8:	f001 f826 	bl	1a048 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18ffc:	78e3      	ldrb	r3, [r4, #3]
   18ffe:	2b00      	cmp	r3, #0
   19000:	f47f af4a 	bne.w	18e98 <bt_hci_le_enh_conn_complete+0x60>
   19004:	e745      	b.n	18e92 <bt_hci_le_enh_conn_complete+0x5a>
   19006:	bf00      	nop
   19008:	2001abf4 	.word	0x2001abf4
   1900c:	00036508 	.word	0x00036508
   19010:	000364b0 	.word	0x000364b0
   19014:	00039963 	.word	0x00039963
   19018:	00039980 	.word	0x00039980
   1901c:	20014598 	.word	0x20014598
   19020:	00039999 	.word	0x00039999
   19024:	20014500 	.word	0x20014500

00019028 <le_phy_update_complete>:
{
   19028:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1902a:	6883      	ldr	r3, [r0, #8]
   1902c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   19030:	4628      	mov	r0, r5
   19032:	f001 f82f 	bl	1a094 <bt_conn_lookup_handle>
	if (!conn) {
   19036:	4604      	mov	r4, r0
   19038:	b960      	cbnz	r0, 19054 <le_phy_update_complete+0x2c>
   1903a:	4b13      	ldr	r3, [pc, #76]	; (19088 <le_phy_update_complete+0x60>)
   1903c:	4a13      	ldr	r2, [pc, #76]	; (1908c <le_phy_update_complete+0x64>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1903e:	4629      	mov	r1, r5
   19040:	1ad2      	subs	r2, r2, r3
   19042:	08d2      	lsrs	r2, r2, #3
   19044:	0192      	lsls	r2, r2, #6
   19046:	4812      	ldr	r0, [pc, #72]	; (19090 <le_phy_update_complete+0x68>)
   19048:	f042 0201 	orr.w	r2, r2, #1
}
   1904c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19050:	f015 b9db 	b.w	2e40a <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   19054:	1d03      	adds	r3, r0, #4
   19056:	e8d3 2fef 	ldaex	r2, [r3]
   1905a:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1905e:	e8c3 1fe5 	stlex	r5, r1, [r3]
   19062:	2d00      	cmp	r5, #0
   19064:	d1f7      	bne.n	19056 <le_phy_update_complete+0x2e>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   19066:	0612      	lsls	r2, r2, #24
   19068:	d509      	bpl.n	1907e <le_phy_update_complete+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1906a:	e8d3 2fef 	ldaex	r2, [r3]
   1906e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   19072:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19076:	2900      	cmp	r1, #0
   19078:	d1f7      	bne.n	1906a <le_phy_update_complete+0x42>
		conn_auto_initiate(conn);
   1907a:	f7ff fe61 	bl	18d40 <conn_auto_initiate>
	bt_conn_unref(conn);
   1907e:	4620      	mov	r0, r4
}
   19080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   19084:	f000 bfe0 	b.w	1a048 <bt_conn_unref>
   19088:	000364b0 	.word	0x000364b0
   1908c:	00036508 	.word	0x00036508
   19090:	000395c3 	.word	0x000395c3

00019094 <le_remote_feat_complete>:
{
   19094:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   19096:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19098:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1909c:	4630      	mov	r0, r6
   1909e:	f000 fff9 	bl	1a094 <bt_conn_lookup_handle>
	if (!conn) {
   190a2:	4604      	mov	r4, r0
   190a4:	b960      	cbnz	r0, 190c0 <le_remote_feat_complete+0x2c>
   190a6:	4a13      	ldr	r2, [pc, #76]	; (190f4 <le_remote_feat_complete+0x60>)
   190a8:	4b13      	ldr	r3, [pc, #76]	; (190f8 <le_remote_feat_complete+0x64>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   190aa:	4631      	mov	r1, r6
}
   190ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   190b0:	1ad2      	subs	r2, r2, r3
   190b2:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   190b4:	0192      	lsls	r2, r2, #6
   190b6:	4811      	ldr	r0, [pc, #68]	; (190fc <le_remote_feat_complete+0x68>)
   190b8:	f042 0201 	orr.w	r2, r2, #1
   190bc:	f015 b9a5 	b.w	2e40a <log_1>
	if (!evt->status) {
   190c0:	782b      	ldrb	r3, [r5, #0]
   190c2:	b933      	cbnz	r3, 190d2 <le_remote_feat_complete+0x3e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   190c4:	f855 3f03 	ldr.w	r3, [r5, #3]!
   190c8:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   190cc:	686b      	ldr	r3, [r5, #4]
   190ce:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   190d2:	1d23      	adds	r3, r4, #4
   190d4:	e8d3 2fef 	ldaex	r2, [r3]
   190d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   190dc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   190e0:	2900      	cmp	r1, #0
   190e2:	d1f7      	bne.n	190d4 <le_remote_feat_complete+0x40>
	conn_auto_initiate(conn);
   190e4:	4620      	mov	r0, r4
   190e6:	f7ff fe2b 	bl	18d40 <conn_auto_initiate>
	bt_conn_unref(conn);
   190ea:	4620      	mov	r0, r4
}
   190ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   190f0:	f000 bfaa 	b.w	1a048 <bt_conn_unref>
   190f4:	00036508 	.word	0x00036508
   190f8:	000364b0 	.word	0x000364b0
   190fc:	000395c3 	.word	0x000395c3

00019100 <le_conn_param_neg_reply>:
{
   19100:	b570      	push	{r4, r5, r6, lr}
   19102:	4606      	mov	r6, r0
   19104:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   19106:	f242 0021 	movw	r0, #8225	; 0x2021
   1910a:	2103      	movs	r1, #3
   1910c:	f7ff f9e8 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   19110:	4604      	mov	r4, r0
   19112:	b958      	cbnz	r0, 1912c <le_conn_param_neg_reply+0x2c>
}
   19114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19118:	490b      	ldr	r1, [pc, #44]	; (19148 <le_conn_param_neg_reply+0x48>)
   1911a:	4b0c      	ldr	r3, [pc, #48]	; (1914c <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   1911c:	480c      	ldr	r0, [pc, #48]	; (19150 <le_conn_param_neg_reply+0x50>)
   1911e:	1ac9      	subs	r1, r1, r3
   19120:	08c9      	lsrs	r1, r1, #3
   19122:	0189      	lsls	r1, r1, #6
   19124:	f041 0101 	orr.w	r1, r1, #1
   19128:	f015 b962 	b.w	2e3f0 <log_0>
   1912c:	2103      	movs	r1, #3
   1912e:	3008      	adds	r0, #8
   19130:	f003 ff54 	bl	1cfdc <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   19134:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   19136:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   19138:	4621      	mov	r1, r4
}
   1913a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1913e:	f242 0021 	movw	r0, #8225	; 0x2021
   19142:	f7ff bd5b 	b.w	18bfc <bt_hci_cmd_send>
   19146:	bf00      	nop
   19148:	00036508 	.word	0x00036508
   1914c:	000364b0 	.word	0x000364b0
   19150:	000399b5 	.word	0x000399b5

00019154 <le_conn_param_req>:
{
   19154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   19156:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   19158:	78d9      	ldrb	r1, [r3, #3]
   1915a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1915c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1915e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19162:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   19166:	7959      	ldrb	r1, [r3, #5]
   19168:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   1916a:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1916c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19170:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   19174:	799a      	ldrb	r2, [r3, #6]
   19176:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   19178:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   1917a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1917e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19182:	7a1a      	ldrb	r2, [r3, #8]
   19184:	7a5b      	ldrb	r3, [r3, #9]
   19186:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1918a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1918e:	f000 ff81 	bl	1a094 <bt_conn_lookup_handle>
	if (!conn) {
   19192:	4606      	mov	r6, r0
   19194:	b980      	cbnz	r0, 191b8 <le_conn_param_req+0x64>
   19196:	4b20      	ldr	r3, [pc, #128]	; (19218 <le_conn_param_req+0xc4>)
   19198:	4a20      	ldr	r2, [pc, #128]	; (1921c <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1919a:	4621      	mov	r1, r4
   1919c:	1ad2      	subs	r2, r2, r3
   1919e:	08d2      	lsrs	r2, r2, #3
   191a0:	0192      	lsls	r2, r2, #6
   191a2:	481f      	ldr	r0, [pc, #124]	; (19220 <le_conn_param_req+0xcc>)
   191a4:	f042 0201 	orr.w	r2, r2, #1
   191a8:	f015 f92f 	bl	2e40a <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   191ac:	2102      	movs	r1, #2
   191ae:	4620      	mov	r0, r4
   191b0:	f7ff ffa6 	bl	19100 <le_conn_param_neg_reply>
}
   191b4:	b003      	add	sp, #12
   191b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   191b8:	4669      	mov	r1, sp
   191ba:	f000 fe37 	bl	19e2c <le_param_req>
   191be:	b938      	cbnz	r0, 191d0 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   191c0:	211e      	movs	r1, #30
   191c2:	4620      	mov	r0, r4
   191c4:	f7ff ff9c 	bl	19100 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   191c8:	4630      	mov	r0, r6
   191ca:	f000 ff3d 	bl	1a048 <bt_conn_unref>
   191ce:	e7f1      	b.n	191b4 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   191d0:	210e      	movs	r1, #14
   191d2:	f242 0020 	movw	r0, #8224	; 0x2020
   191d6:	f7ff f983 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   191da:	4605      	mov	r5, r0
   191dc:	2800      	cmp	r0, #0
   191de:	d0f3      	beq.n	191c8 <le_conn_param_req+0x74>
   191e0:	210e      	movs	r1, #14
   191e2:	3008      	adds	r0, #8
   191e4:	f003 fefa 	bl	1cfdc <net_buf_simple_add>
   191e8:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   191ea:	220e      	movs	r2, #14
   191ec:	2100      	movs	r1, #0
   191ee:	f01c f9ea 	bl	355c6 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   191f2:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   191f6:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   191f8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   191fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
   191fe:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   19200:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   19202:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   19206:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
   1920a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1920c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19210:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   19212:	f7ff fcf3 	bl	18bfc <bt_hci_cmd_send>
   19216:	e7d7      	b.n	191c8 <le_conn_param_req+0x74>
   19218:	000364b0 	.word	0x000364b0
   1921c:	00036508 	.word	0x00036508
   19220:	000395c3 	.word	0x000395c3

00019224 <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
   19224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19228:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
   1922a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1922e:	4630      	mov	r0, r6
   19230:	f018 fa3f 	bl	316b2 <net_buf_simple_headroom>
	state->len = buf->len;
   19234:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19238:	4605      	mov	r5, r0

	BT_ASSERT(buf->len >= sizeof(*hdr));
   1923a:	f1b8 0f01 	cmp.w	r8, #1
   1923e:	d80c      	bhi.n	1925a <hci_event_prio+0x36>
   19240:	f640 43dc 	movw	r3, #3292	; 0xcdc
   19244:	4a1b      	ldr	r2, [pc, #108]	; (192b4 <hci_event_prio+0x90>)
   19246:	491c      	ldr	r1, [pc, #112]	; (192b8 <hci_event_prio+0x94>)
   19248:	481c      	ldr	r0, [pc, #112]	; (192bc <hci_event_prio+0x98>)
   1924a:	f014 fd9d 	bl	2dd88 <printk>
   1924e:	4040      	eors	r0, r0
   19250:	f380 8811 	msr	BASEPRI, r0
   19254:	f04f 0003 	mov.w	r0, #3
   19258:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1925a:	2102      	movs	r1, #2
   1925c:	4630      	mov	r0, r6
   1925e:	f003 fe9b 	bl	1cf98 <net_buf_simple_pull_mem>
   19262:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19264:	7800      	ldrb	r0, [r0, #0]
   19266:	f017 f98e 	bl	30586 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1926a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1926c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1926e:	d40c      	bmi.n	1928a <hci_event_prio+0x66>
   19270:	f44f 634e 	mov.w	r3, #3296	; 0xce0
   19274:	4a0f      	ldr	r2, [pc, #60]	; (192b4 <hci_event_prio+0x90>)
   19276:	4912      	ldr	r1, [pc, #72]	; (192c0 <hci_event_prio+0x9c>)
   19278:	4810      	ldr	r0, [pc, #64]	; (192bc <hci_event_prio+0x98>)
   1927a:	f014 fd85 	bl	2dd88 <printk>
   1927e:	4040      	eors	r0, r0
   19280:	f380 8811 	msr	BASEPRI, r0
   19284:	f04f 0003 	mov.w	r0, #3
   19288:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1928a:	2305      	movs	r3, #5
   1928c:	4621      	mov	r1, r4
   1928e:	4a0d      	ldr	r2, [pc, #52]	; (192c4 <hci_event_prio+0xa0>)
   19290:	7838      	ldrb	r0, [r7, #0]
   19292:	f7fe fef9 	bl	18088 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   19296:	07b3      	lsls	r3, r6, #30
   19298:	d507      	bpl.n	192aa <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1929a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1929c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   192a0:	fa10 f585 	uxtah	r5, r0, r5
   192a4:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
   192a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   192aa:	4620      	mov	r0, r4
}
   192ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   192b0:	f003 bd64 	b.w	1cd7c <net_buf_unref>
   192b4:	00039732 	.word	0x00039732
   192b8:	000399cf 	.word	0x000399cf
   192bc:	00037f2c 	.word	0x00037f2c
   192c0:	000399e8 	.word	0x000399e8
   192c4:	00036afc 	.word	0x00036afc

000192c8 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
   192c8:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   192ca:	7d01      	ldrb	r1, [r0, #20]
   192cc:	4604      	mov	r4, r0
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
   192ce:	2901      	cmp	r1, #1
   192d0:	d04b      	beq.n	1936a <bt_recv+0xa2>
   192d2:	2903      	cmp	r1, #3
   192d4:	d178      	bne.n	193c8 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   192d6:	8983      	ldrh	r3, [r0, #12]
   192d8:	2b03      	cmp	r3, #3
   192da:	d80c      	bhi.n	192f6 <bt_recv+0x2e>
   192dc:	f240 1379 	movw	r3, #377	; 0x179
   192e0:	4a41      	ldr	r2, [pc, #260]	; (193e8 <bt_recv+0x120>)
   192e2:	4942      	ldr	r1, [pc, #264]	; (193ec <bt_recv+0x124>)
   192e4:	4842      	ldr	r0, [pc, #264]	; (193f0 <bt_recv+0x128>)
   192e6:	f014 fd4f 	bl	2dd88 <printk>
   192ea:	4040      	eors	r0, r0
   192ec:	f380 8811 	msr	BASEPRI, r0
   192f0:	f04f 0003 	mov.w	r0, #3
   192f4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   192f6:	2104      	movs	r1, #4
   192f8:	f104 0008 	add.w	r0, r4, #8
   192fc:	f003 fe4c 	bl	1cf98 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   19300:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   19302:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   19304:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   19306:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   19308:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1930c:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1930e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   19310:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   19312:	d00d      	beq.n	19330 <bt_recv+0x68>
   19314:	4837      	ldr	r0, [pc, #220]	; (193f4 <bt_recv+0x12c>)
   19316:	4b38      	ldr	r3, [pc, #224]	; (193f8 <bt_recv+0x130>)
   19318:	1a1b      	subs	r3, r3, r0
   1931a:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1931c:	019b      	lsls	r3, r3, #6
   1931e:	4837      	ldr	r0, [pc, #220]	; (193fc <bt_recv+0x134>)
   19320:	f043 0301 	orr.w	r3, r3, #1
   19324:	f015 f885 	bl	2e432 <log_2>
	net_buf_unref(buf);
   19328:	4620      	mov	r0, r4
   1932a:	f003 fd27 	bl	1cd7c <net_buf_unref>
   1932e:	e01a      	b.n	19366 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   19330:	f000 feb0 	bl	1a094 <bt_conn_lookup_handle>
	if (!conn) {
   19334:	4605      	mov	r5, r0
   19336:	b958      	cbnz	r0, 19350 <bt_recv+0x88>
   19338:	4b2e      	ldr	r3, [pc, #184]	; (193f4 <bt_recv+0x12c>)
   1933a:	4a2f      	ldr	r2, [pc, #188]	; (193f8 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1933c:	8ae1      	ldrh	r1, [r4, #22]
   1933e:	1ad2      	subs	r2, r2, r3
   19340:	08d2      	lsrs	r2, r2, #3
   19342:	0192      	lsls	r2, r2, #6
   19344:	482e      	ldr	r0, [pc, #184]	; (19400 <bt_recv+0x138>)
   19346:	f042 0201 	orr.w	r2, r2, #1
   1934a:	f015 f85e 	bl	2e40a <log_1>
		net_buf_unref(buf);
   1934e:	e7eb      	b.n	19328 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
   19350:	f001 f82c 	bl	1a3ac <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   19354:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   19356:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   19358:	0b32      	lsrs	r2, r6, #12
   1935a:	4628      	mov	r0, r5
   1935c:	f000 fd86 	bl	19e6c <bt_conn_recv>
	bt_conn_unref(conn);
   19360:	4628      	mov	r0, r5
   19362:	f000 fe71 	bl	1a048 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
   19366:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
   19368:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1936a:	8983      	ldrh	r3, [r0, #12]
   1936c:	2b01      	cmp	r3, #1
   1936e:	d80c      	bhi.n	1938a <bt_recv+0xc2>
   19370:	f640 03f9 	movw	r3, #2297	; 0x8f9
   19374:	4a1c      	ldr	r2, [pc, #112]	; (193e8 <bt_recv+0x120>)
   19376:	491d      	ldr	r1, [pc, #116]	; (193ec <bt_recv+0x124>)
   19378:	481d      	ldr	r0, [pc, #116]	; (193f0 <bt_recv+0x128>)
   1937a:	f014 fd05 	bl	2dd88 <printk>
   1937e:	4040      	eors	r0, r0
   19380:	f380 8811 	msr	BASEPRI, r0
   19384:	f04f 0003 	mov.w	r0, #3
   19388:	df02      	svc	2
   1938a:	2102      	movs	r1, #2
   1938c:	f104 0008 	add.w	r0, r4, #8
   19390:	f003 fe02 	bl	1cf98 <net_buf_simple_pull_mem>
   19394:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   19396:	7800      	ldrb	r0, [r0, #0]
   19398:	f017 f8f5 	bl	30586 <bt_hci_evt_get_flags>
   1939c:	0783      	lsls	r3, r0, #30
   1939e:	d40c      	bmi.n	193ba <bt_recv+0xf2>
   193a0:	f640 03fd 	movw	r3, #2301	; 0x8fd
   193a4:	4a10      	ldr	r2, [pc, #64]	; (193e8 <bt_recv+0x120>)
   193a6:	4917      	ldr	r1, [pc, #92]	; (19404 <bt_recv+0x13c>)
   193a8:	4811      	ldr	r0, [pc, #68]	; (193f0 <bt_recv+0x128>)
   193aa:	f014 fced 	bl	2dd88 <printk>
   193ae:	4040      	eors	r0, r0
   193b0:	f380 8811 	msr	BASEPRI, r0
   193b4:	f04f 0003 	mov.w	r0, #3
   193b8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   193ba:	2304      	movs	r3, #4
   193bc:	4621      	mov	r1, r4
   193be:	4a12      	ldr	r2, [pc, #72]	; (19408 <bt_recv+0x140>)
   193c0:	7828      	ldrb	r0, [r5, #0]
   193c2:	f7fe fe61 	bl	18088 <handle_event>
   193c6:	e7af      	b.n	19328 <bt_recv+0x60>
   193c8:	4b0a      	ldr	r3, [pc, #40]	; (193f4 <bt_recv+0x12c>)
   193ca:	4a0b      	ldr	r2, [pc, #44]	; (193f8 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   193cc:	480f      	ldr	r0, [pc, #60]	; (1940c <bt_recv+0x144>)
   193ce:	1ad2      	subs	r2, r2, r3
   193d0:	08d2      	lsrs	r2, r2, #3
   193d2:	0192      	lsls	r2, r2, #6
   193d4:	f042 0201 	orr.w	r2, r2, #1
   193d8:	f015 f817 	bl	2e40a <log_1>
		net_buf_unref(buf);
   193dc:	4620      	mov	r0, r4
   193de:	f003 fccd 	bl	1cd7c <net_buf_unref>
		return -EINVAL;
   193e2:	f06f 0015 	mvn.w	r0, #21
   193e6:	e7bf      	b.n	19368 <bt_recv+0xa0>
   193e8:	00039732 	.word	0x00039732
   193ec:	000399cf 	.word	0x000399cf
   193f0:	00037f2c 	.word	0x00037f2c
   193f4:	000364b0 	.word	0x000364b0
   193f8:	00036508 	.word	0x00036508
   193fc:	00039a01 	.word	0x00039a01
   19400:	00039a25 	.word	0x00039a25
   19404:	00039a47 	.word	0x00039a47
   19408:	00036adc 	.word	0x00036adc
   1940c:	00039a75 	.word	0x00039a75

00019410 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
   19410:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   19412:	7d03      	ldrb	r3, [r0, #20]
{
   19414:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   19416:	2b01      	cmp	r3, #1
   19418:	d00c      	beq.n	19434 <bt_recv_prio+0x24>
   1941a:	f640 5323 	movw	r3, #3363	; 0xd23
   1941e:	4a08      	ldr	r2, [pc, #32]	; (19440 <bt_recv_prio+0x30>)
   19420:	4908      	ldr	r1, [pc, #32]	; (19444 <bt_recv_prio+0x34>)
   19422:	4809      	ldr	r0, [pc, #36]	; (19448 <bt_recv_prio+0x38>)
   19424:	f014 fcb0 	bl	2dd88 <printk>
   19428:	4040      	eors	r0, r0
   1942a:	f380 8811 	msr	BASEPRI, r0
   1942e:	f04f 0003 	mov.w	r0, #3
   19432:	df02      	svc	2

	hci_event_prio(buf);
   19434:	4620      	mov	r0, r4
   19436:	f7ff fef5 	bl	19224 <hci_event_prio>

	return 0;
}
   1943a:	2000      	movs	r0, #0
   1943c:	bd10      	pop	{r4, pc}
   1943e:	bf00      	nop
   19440:	00039732 	.word	0x00039732
   19444:	00039a89 	.word	0x00039a89
   19448:	00037f2c 	.word	0x00037f2c

0001944c <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
   1944c:	4a08      	ldr	r2, [pc, #32]	; (19470 <bt_hci_driver_register+0x24>)
{
   1944e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   19450:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   19454:	b930      	cbnz	r0, 19464 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
   19456:	68d9      	ldr	r1, [r3, #12]
   19458:	b139      	cbz	r1, 1946a <bt_hci_driver_register+0x1e>
   1945a:	6919      	ldr	r1, [r3, #16]
   1945c:	b129      	cbz	r1, 1946a <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
   1945e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
   19462:	4770      	bx	lr
		return -EALREADY;
   19464:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19468:	4770      	bx	lr
		return -EINVAL;
   1946a:	f06f 0015 	mvn.w	r0, #21
}
   1946e:	4770      	bx	lr
   19470:	20014500 	.word	0x20014500

00019474 <bt_finalize_init>:
   19474:	4b05      	ldr	r3, [pc, #20]	; (1948c <bt_finalize_init+0x18>)
   19476:	e8d3 2fef 	ldaex	r2, [r3]
   1947a:	f042 0202 	orr.w	r2, r2, #2
   1947e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19482:	2900      	cmp	r1, #0
   19484:	d1f7      	bne.n	19476 <bt_finalize_init+0x2>
void bt_finalize_init(void)
{
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
   19486:	2000      	movs	r0, #0
   19488:	f000 baa0 	b.w	199cc <bt_le_scan_update>
   1948c:	20014598 	.word	0x20014598

00019490 <init_work>:
	bt_finalize_init();
	return 0;
}

static void init_work(struct k_work *work)
{
   19490:	b510      	push	{r4, lr}
	err = hci_init();
   19492:	f7ff f90f 	bl	186b4 <hci_init>
	if (err) {
   19496:	4604      	mov	r4, r0
   19498:	b928      	cbnz	r0, 194a6 <init_work+0x16>
		err = bt_conn_init();
   1949a:	f000 ffb5 	bl	1a408 <bt_conn_init>
		if (err) {
   1949e:	4604      	mov	r4, r0
   194a0:	b908      	cbnz	r0, 194a6 <init_work+0x16>
	bt_finalize_init();
   194a2:	f7ff ffe7 	bl	19474 <bt_finalize_init>
	int err;

	err = bt_init();
	if (ready_cb) {
   194a6:	4b04      	ldr	r3, [pc, #16]	; (194b8 <init_work+0x28>)
   194a8:	681b      	ldr	r3, [r3, #0]
   194aa:	b11b      	cbz	r3, 194b4 <init_work+0x24>
		ready_cb(err);
   194ac:	4620      	mov	r0, r4
	}
}
   194ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   194b2:	4718      	bx	r3
}
   194b4:	bd10      	pop	{r4, pc}
   194b6:	bf00      	nop
   194b8:	2001618c 	.word	0x2001618c

000194bc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   194bc:	4800      	ldr	r0, [pc, #0]	; (194c0 <bt_get_name+0x4>)
   194be:	4770      	bx	lr
   194c0:	00039aac 	.word	0x00039aac

000194c4 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   194c4:	4b01      	ldr	r3, [pc, #4]	; (194cc <atomic_get.constprop.0+0x8>)
   194c6:	e8d3 0faf 	lda	r0, [r3]
}
   194ca:	4770      	bx	lr
   194cc:	20014598 	.word	0x20014598

000194d0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   194d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194d2:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   194d4:	2500      	movs	r5, #0
   194d6:	4f0a      	ldr	r7, [pc, #40]	; (19500 <id_find+0x30>)
   194d8:	79fb      	ldrb	r3, [r7, #7]
   194da:	b2ec      	uxtb	r4, r5
   194dc:	42a3      	cmp	r3, r4
   194de:	d802      	bhi.n	194e6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   194e0:	f06f 0401 	mvn.w	r4, #1
   194e4:	e009      	b.n	194fa <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   194e6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   194ea:	2207      	movs	r2, #7
   194ec:	4630      	mov	r0, r6
   194ee:	4439      	add	r1, r7
   194f0:	f01c f83b 	bl	3556a <memcmp>
   194f4:	3501      	adds	r5, #1
   194f6:	2800      	cmp	r0, #0
   194f8:	d1ee      	bne.n	194d8 <id_find+0x8>
}
   194fa:	4620      	mov	r0, r4
   194fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   194fe:	bf00      	nop
   19500:	20014500 	.word	0x20014500

00019504 <set_random_address>:
	return memcmp(a, b, sizeof(*a));
   19504:	2206      	movs	r2, #6
{
   19506:	b538      	push	{r3, r4, r5, lr}
   19508:	4913      	ldr	r1, [pc, #76]	; (19558 <set_random_address+0x54>)
   1950a:	4605      	mov	r5, r0
   1950c:	f01c f82d 	bl	3556a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19510:	4602      	mov	r2, r0
   19512:	b1d8      	cbz	r0, 1954c <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   19514:	2106      	movs	r1, #6
   19516:	f242 0005 	movw	r0, #8197	; 0x2005
   1951a:	f7fe ffe1 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   1951e:	4604      	mov	r4, r0
   19520:	b1b0      	cbz	r0, 19550 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19522:	2206      	movs	r2, #6
   19524:	4629      	mov	r1, r5
   19526:	3008      	adds	r0, #8
   19528:	f018 f8cf 	bl	316ca <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1952c:	2200      	movs	r2, #0
   1952e:	4621      	mov	r1, r4
   19530:	f242 0005 	movw	r0, #8197	; 0x2005
   19534:	f7ff f81c 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   19538:	4602      	mov	r2, r0
   1953a:	b938      	cbnz	r0, 1954c <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   1953c:	4629      	mov	r1, r5
   1953e:	4806      	ldr	r0, [pc, #24]	; (19558 <set_random_address+0x54>)
   19540:	f017 f8fc 	bl	3073c <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   19544:	2101      	movs	r1, #1
   19546:	4b05      	ldr	r3, [pc, #20]	; (1955c <set_random_address+0x58>)
   19548:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
}
   1954c:	4610      	mov	r0, r2
   1954e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   19550:	f06f 0268 	mvn.w	r2, #104	; 0x68
   19554:	e7fa      	b.n	1954c <set_random_address+0x48>
   19556:	bf00      	nop
   19558:	2001452d 	.word	0x2001452d
   1955c:	20014500 	.word	0x20014500

00019560 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   19560:	b530      	push	{r4, r5, lr}
   19562:	4c14      	ldr	r4, [pc, #80]	; (195b4 <id_create.isra.0+0x54>)
   19564:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19568:	460d      	mov	r5, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1956a:	b085      	sub	sp, #20
   1956c:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1956e:	b179      	cbz	r1, 19590 <id_create.isra.0+0x30>
   19570:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   19572:	2207      	movs	r2, #7
   19574:	4669      	mov	r1, sp
   19576:	4628      	mov	r0, r5
   19578:	9300      	str	r3, [sp, #0]
   1957a:	f8cd 3003 	str.w	r3, [sp, #3]
   1957e:	f01b fff4 	bl	3556a <memcmp>
   19582:	b128      	cbz	r0, 19590 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   19584:	4629      	mov	r1, r5
   19586:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   19588:	f017 f8dd 	bl	30746 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   1958c:	b005      	add	sp, #20
   1958e:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   19590:	a802      	add	r0, sp, #8
   19592:	f016 ffea 	bl	3056a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   19596:	a802      	add	r0, sp, #8
   19598:	f7ff ff9a 	bl	194d0 <id_find>
   1959c:	2800      	cmp	r0, #0
   1959e:	daf7      	bge.n	19590 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   195a0:	4620      	mov	r0, r4
   195a2:	a902      	add	r1, sp, #8
   195a4:	f017 f8cf 	bl	30746 <bt_addr_le_copy>
		if (addr) {
   195a8:	2d00      	cmp	r5, #0
   195aa:	d0ef      	beq.n	1958c <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   195ac:	4621      	mov	r1, r4
   195ae:	4628      	mov	r0, r5
   195b0:	e7ea      	b.n	19588 <id_create.isra.0+0x28>
   195b2:	bf00      	nop
   195b4:	20014500 	.word	0x20014500

000195b8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   195b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   195ba:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   195bc:	4605      	mov	r5, r0
   195be:	b918      	cbnz	r0, 195c8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   195c0:	b34c      	cbz	r4, 19616 <bt_id_create+0x5e>
		return -EINVAL;
   195c2:	f06f 0415 	mvn.w	r4, #21
   195c6:	e023      	b.n	19610 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   195c8:	2300      	movs	r3, #0
   195ca:	2207      	movs	r2, #7
   195cc:	4669      	mov	r1, sp
   195ce:	9300      	str	r3, [sp, #0]
   195d0:	f8cd 3003 	str.w	r3, [sp, #3]
   195d4:	f01b ffc9 	bl	3556a <memcmp>
   195d8:	2800      	cmp	r0, #0
   195da:	d0f1      	beq.n	195c0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   195dc:	782b      	ldrb	r3, [r5, #0]
   195de:	2b01      	cmp	r3, #1
   195e0:	d104      	bne.n	195ec <bt_id_create+0x34>
   195e2:	79ab      	ldrb	r3, [r5, #6]
   195e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   195e8:	2bc0      	cmp	r3, #192	; 0xc0
   195ea:	d00a      	beq.n	19602 <bt_id_create+0x4a>
   195ec:	4b19      	ldr	r3, [pc, #100]	; (19654 <bt_id_create+0x9c>)
   195ee:	491a      	ldr	r1, [pc, #104]	; (19658 <bt_id_create+0xa0>)
			BT_ERR("Only static random identity address supported");
   195f0:	481a      	ldr	r0, [pc, #104]	; (1965c <bt_id_create+0xa4>)
   195f2:	1ac9      	subs	r1, r1, r3
   195f4:	08c9      	lsrs	r1, r1, #3
   195f6:	0189      	lsls	r1, r1, #6
   195f8:	f041 0101 	orr.w	r1, r1, #1
   195fc:	f014 fef8 	bl	2e3f0 <log_0>
			return -EINVAL;
   19600:	e7df      	b.n	195c2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   19602:	4628      	mov	r0, r5
   19604:	f7ff ff64 	bl	194d0 <id_find>
   19608:	2800      	cmp	r0, #0
   1960a:	dbd9      	blt.n	195c0 <bt_id_create+0x8>
			return -EALREADY;
   1960c:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   19610:	4620      	mov	r0, r4
   19612:	b002      	add	sp, #8
   19614:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   19616:	4e12      	ldr	r6, [pc, #72]	; (19660 <bt_id_create+0xa8>)
   19618:	79f3      	ldrb	r3, [r6, #7]
   1961a:	2b01      	cmp	r3, #1
   1961c:	d017      	beq.n	1964e <bt_id_create+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1961e:	f7ff ff51 	bl	194c4 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19622:	07c3      	lsls	r3, r0, #31
   19624:	d40b      	bmi.n	1963e <bt_id_create+0x86>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   19626:	2d00      	cmp	r5, #0
   19628:	d0cb      	beq.n	195c2 <bt_id_create+0xa>
   1962a:	2207      	movs	r2, #7
   1962c:	4669      	mov	r1, sp
   1962e:	4628      	mov	r0, r5
   19630:	9400      	str	r4, [sp, #0]
   19632:	f8cd 4003 	str.w	r4, [sp, #3]
   19636:	f01b ff98 	bl	3556a <memcmp>
   1963a:	2800      	cmp	r0, #0
   1963c:	d0c1      	beq.n	195c2 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   1963e:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   19640:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   19642:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   19644:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   19646:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   19648:	f7ff ff8a 	bl	19560 <id_create.isra.0>
	return new_id;
   1964c:	e7e0      	b.n	19610 <bt_id_create+0x58>
		return -ENOMEM;
   1964e:	f06f 040b 	mvn.w	r4, #11
   19652:	e7dd      	b.n	19610 <bt_id_create+0x58>
   19654:	000364b0 	.word	0x000364b0
   19658:	00036510 	.word	0x00036510
   1965c:	00039abf 	.word	0x00039abf
   19660:	20014500 	.word	0x20014500

00019664 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   19664:	b570      	push	{r4, r5, r6, lr}
   19666:	b086      	sub	sp, #24
   19668:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1966a:	2100      	movs	r1, #0
   1966c:	f241 0009 	movw	r0, #4105	; 0x1009
   19670:	aa01      	add	r2, sp, #4
   19672:	f7fe ff7d 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   19676:	4604      	mov	r4, r0
   19678:	b160      	cbz	r0, 19694 <bt_id_read_public_addr+0x30>
   1967a:	4919      	ldr	r1, [pc, #100]	; (196e0 <bt_id_read_public_addr+0x7c>)
   1967c:	4b19      	ldr	r3, [pc, #100]	; (196e4 <bt_id_read_public_addr+0x80>)
		BT_WARN("Failed to read public address");
   1967e:	481a      	ldr	r0, [pc, #104]	; (196e8 <bt_id_read_public_addr+0x84>)
   19680:	1ac9      	subs	r1, r1, r3
   19682:	08c9      	lsrs	r1, r1, #3
   19684:	0189      	lsls	r1, r1, #6
   19686:	f041 0102 	orr.w	r1, r1, #2
   1968a:	f014 feb1 	bl	2e3f0 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   1968e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   19690:	b006      	add	sp, #24
   19692:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   19694:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   19696:	9002      	str	r0, [sp, #8]
   19698:	689d      	ldr	r5, [r3, #8]
	return memcmp(a, b, sizeof(*a));
   1969a:	2206      	movs	r2, #6
   1969c:	3501      	adds	r5, #1
   1969e:	f8ad 000c 	strh.w	r0, [sp, #12]
   196a2:	a902      	add	r1, sp, #8
   196a4:	4628      	mov	r0, r5
   196a6:	f01b ff60 	bl	3556a <memcmp>
   196aa:	b918      	cbnz	r0, 196b4 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   196ac:	9801      	ldr	r0, [sp, #4]
   196ae:	f003 fb65 	bl	1cd7c <net_buf_unref>
   196b2:	e7ec      	b.n	1968e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   196b4:	f04f 33ff 	mov.w	r3, #4294967295
   196b8:	2206      	movs	r2, #6
   196ba:	4628      	mov	r0, r5
   196bc:	a904      	add	r1, sp, #16
   196be:	9304      	str	r3, [sp, #16]
   196c0:	f8ad 3014 	strh.w	r3, [sp, #20]
   196c4:	f01b ff51 	bl	3556a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   196c8:	2800      	cmp	r0, #0
   196ca:	d0ef      	beq.n	196ac <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   196cc:	4629      	mov	r1, r5
   196ce:	1c70      	adds	r0, r6, #1
   196d0:	f017 f834 	bl	3073c <bt_addr_copy>
	net_buf_unref(rsp);
   196d4:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   196d6:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   196d8:	f003 fb50 	bl	1cd7c <net_buf_unref>
	return 1U;
   196dc:	2001      	movs	r0, #1
   196de:	e7d7      	b.n	19690 <bt_id_read_public_addr+0x2c>
   196e0:	00036510 	.word	0x00036510
   196e4:	000364b0 	.word	0x000364b0
   196e8:	00039aed 	.word	0x00039aed

000196ec <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   196ec:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   196ee:	4668      	mov	r0, sp
   196f0:	f7ff ffb8 	bl	19664 <bt_id_read_public_addr>
   196f4:	4b04      	ldr	r3, [pc, #16]	; (19708 <bt_setup_public_id_addr+0x1c>)
   196f6:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   196f8:	b118      	cbz	r0, 19702 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   196fa:	4669      	mov	r1, sp
   196fc:	2000      	movs	r0, #0
   196fe:	f7ff ff2f 	bl	19560 <id_create.isra.0>
}
   19702:	b003      	add	sp, #12
   19704:	f85d fb04 	ldr.w	pc, [sp], #4
   19708:	20014500 	.word	0x20014500

0001970c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1970c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1970e:	4b27      	ldr	r3, [pc, #156]	; (197ac <bt_read_static_addr+0xa0>)
{
   19710:	4605      	mov	r5, r0
   19712:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   19716:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   19718:	f014 0401 	ands.w	r4, r4, #1
   1971c:	d10a      	bne.n	19734 <bt_read_static_addr+0x28>
   1971e:	4924      	ldr	r1, [pc, #144]	; (197b0 <bt_read_static_addr+0xa4>)
   19720:	4b24      	ldr	r3, [pc, #144]	; (197b4 <bt_read_static_addr+0xa8>)
		BT_WARN("Read Static Addresses command not available");
   19722:	4825      	ldr	r0, [pc, #148]	; (197b8 <bt_read_static_addr+0xac>)
   19724:	1ac9      	subs	r1, r1, r3
   19726:	08c9      	lsrs	r1, r1, #3
   19728:	0189      	lsls	r1, r1, #6
   1972a:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   1972e:	f014 fe5f 	bl	2e3f0 <log_0>
   19732:	e012      	b.n	1975a <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   19734:	2100      	movs	r1, #0
   19736:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1973a:	aa01      	add	r2, sp, #4
   1973c:	f7fe ff18 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   19740:	4603      	mov	r3, r0
   19742:	b168      	cbz	r0, 19760 <bt_read_static_addr+0x54>
   19744:	4b1b      	ldr	r3, [pc, #108]	; (197b4 <bt_read_static_addr+0xa8>)
   19746:	491a      	ldr	r1, [pc, #104]	; (197b0 <bt_read_static_addr+0xa4>)
		BT_WARN("Failed to read static addresses");
   19748:	481c      	ldr	r0, [pc, #112]	; (197bc <bt_read_static_addr+0xb0>)
   1974a:	1ac9      	subs	r1, r1, r3
   1974c:	08c9      	lsrs	r1, r1, #3
   1974e:	0189      	lsls	r1, r1, #6
   19750:	f041 0102 	orr.w	r1, r1, #2
   19754:	f014 fe4c 	bl	2e3f0 <log_0>
		return 0;
   19758:	2400      	movs	r4, #0
	}

	return cnt;
}
   1975a:	4620      	mov	r0, r4
   1975c:	b003      	add	sp, #12
   1975e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   19760:	9801      	ldr	r0, [sp, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19762:	f04f 0c16 	mov.w	ip, #22
   19766:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   19768:	7854      	ldrb	r4, [r2, #1]
   1976a:	eb02 070c 	add.w	r7, r2, ip
   1976e:	42b4      	cmp	r4, r6
   19770:	bf28      	it	cs
   19772:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   19774:	42a3      	cmp	r3, r4
   19776:	db0c      	blt.n	19792 <bt_read_static_addr+0x86>
	net_buf_unref(rsp);
   19778:	f003 fb00 	bl	1cd7c <net_buf_unref>
	if (!cnt) {
   1977c:	2c00      	cmp	r4, #0
   1977e:	d1ec      	bne.n	1975a <bt_read_static_addr+0x4e>
   19780:	490b      	ldr	r1, [pc, #44]	; (197b0 <bt_read_static_addr+0xa4>)
   19782:	4b0c      	ldr	r3, [pc, #48]	; (197b4 <bt_read_static_addr+0xa8>)
		BT_WARN("No static addresses stored in controller");
   19784:	480e      	ldr	r0, [pc, #56]	; (197c0 <bt_read_static_addr+0xb4>)
   19786:	1ac9      	subs	r1, r1, r3
   19788:	08c9      	lsrs	r1, r1, #3
   1978a:	0189      	lsls	r1, r1, #6
   1978c:	f041 0102 	orr.w	r1, r1, #2
   19790:	e7cd      	b.n	1972e <bt_read_static_addr+0x22>
   19792:	fb0c 5103 	mla	r1, ip, r3, r5
   19796:	1c96      	adds	r6, r2, #2
   19798:	f856 eb04 	ldr.w	lr, [r6], #4
   1979c:	42be      	cmp	r6, r7
   1979e:	f841 eb04 	str.w	lr, [r1], #4
   197a2:	d1f9      	bne.n	19798 <bt_read_static_addr+0x8c>
   197a4:	883e      	ldrh	r6, [r7, #0]
	for (i = 0; i < cnt; i++) {
   197a6:	3301      	adds	r3, #1
   197a8:	800e      	strh	r6, [r1, #0]
   197aa:	e7e3      	b.n	19774 <bt_read_static_addr+0x68>
   197ac:	20014500 	.word	0x20014500
   197b0:	00036510 	.word	0x00036510
   197b4:	000364b0 	.word	0x000364b0
   197b8:	00039b0b 	.word	0x00039b0b
   197bc:	00039b37 	.word	0x00039b37
   197c0:	00039b57 	.word	0x00039b57

000197c4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   197c4:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   197c6:	4d13      	ldr	r5, [pc, #76]	; (19814 <bt_setup_random_id_addr+0x50>)
{
   197c8:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   197ca:	79ec      	ldrb	r4, [r5, #7]
   197cc:	b9ec      	cbnz	r4, 1980a <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   197ce:	2101      	movs	r1, #1
   197d0:	a802      	add	r0, sp, #8
   197d2:	f7ff ff9b 	bl	1970c <bt_read_static_addr>
   197d6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   197d8:	b1b8      	cbz	r0, 1980a <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   197da:	2616      	movs	r6, #22
   197dc:	e00e      	b.n	197fc <bt_setup_random_id_addr+0x38>
   197de:	ab02      	add	r3, sp, #8
   197e0:	fb06 3102 	mla	r1, r6, r2, r3
   197e4:	f10d 0001 	add.w	r0, sp, #1
   197e8:	f016 ffa8 	bl	3073c <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   197ec:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   197ee:	4669      	mov	r1, sp
   197f0:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   197f2:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   197f6:	f7ff feb3 	bl	19560 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   197fa:	3401      	adds	r4, #1
   197fc:	79eb      	ldrb	r3, [r5, #7]
   197fe:	b2e2      	uxtb	r2, r4
   19800:	4293      	cmp	r3, r2
   19802:	d8ec      	bhi.n	197de <bt_setup_random_id_addr+0x1a>
			}

			return 0;
   19804:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   19806:	b008      	add	sp, #32
   19808:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
   1980a:	2100      	movs	r1, #0
   1980c:	4608      	mov	r0, r1
   1980e:	f7ff fed3 	bl	195b8 <bt_id_create>
   19812:	e7f8      	b.n	19806 <bt_setup_random_id_addr+0x42>
   19814:	20014500 	.word	0x20014500

00019818 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   19818:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1981a:	4c07      	ldr	r4, [pc, #28]	; (19838 <bt_id_set_create_conn_own_addr+0x20>)
{
   1981c:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1981e:	7823      	ldrb	r3, [r4, #0]
   19820:	2b01      	cmp	r3, #1
   19822:	d003      	beq.n	1982c <bt_id_set_create_conn_own_addr+0x14>
		}

		*own_addr_type = addr->type;
	}

	return 0;
   19824:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
   19826:	7823      	ldrb	r3, [r4, #0]
   19828:	702b      	strb	r3, [r5, #0]
}
   1982a:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   1982c:	1c60      	adds	r0, r4, #1
   1982e:	f7ff fe69 	bl	19504 <set_random_address>
			if (err) {
   19832:	2800      	cmp	r0, #0
   19834:	d0f6      	beq.n	19824 <bt_id_set_create_conn_own_addr+0xc>
   19836:	e7f8      	b.n	1982a <bt_id_set_create_conn_own_addr+0x12>
   19838:	20014500 	.word	0x20014500

0001983c <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   1983c:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   1983e:	4b05      	ldr	r3, [pc, #20]	; (19854 <bt_id_set_scan_own_addr+0x18>)
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   19840:	2000      	movs	r0, #0
		*own_addr_type = bt_dev.id_addr[0].type;
   19842:	781b      	ldrb	r3, [r3, #0]
{
   19844:	460c      	mov	r4, r1
		*own_addr_type = bt_dev.id_addr[0].type;
   19846:	700b      	strb	r3, [r1, #0]
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   19848:	f016 ff86 	bl	30758 <bt_id_set_private_addr>
			if (err) {
   1984c:	b908      	cbnz	r0, 19852 <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   1984e:	2301      	movs	r3, #1
   19850:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   19852:	bd10      	pop	{r4, pc}
   19854:	20014500 	.word	0x20014500

00019858 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   19858:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1985a:	4d14      	ldr	r5, [pc, #80]	; (198ac <bt_id_init+0x54>)
   1985c:	79eb      	ldrb	r3, [r5, #7]
   1985e:	b113      	cbz	r3, 19866 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   19860:	2400      	movs	r4, #0
}
   19862:	4620      	mov	r0, r4
   19864:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
   19866:	f7ff ff41 	bl	196ec <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1986a:	79eb      	ldrb	r3, [r5, #7]
   1986c:	2b00      	cmp	r3, #0
   1986e:	d1f7      	bne.n	19860 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   19870:	f7ff ffa8 	bl	197c4 <bt_setup_random_id_addr>
		if (err) {
   19874:	4604      	mov	r4, r0
   19876:	b150      	cbz	r0, 1988e <bt_id_init+0x36>
   19878:	490d      	ldr	r1, [pc, #52]	; (198b0 <bt_id_init+0x58>)
   1987a:	4b0e      	ldr	r3, [pc, #56]	; (198b4 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
   1987c:	480e      	ldr	r0, [pc, #56]	; (198b8 <bt_id_init+0x60>)
   1987e:	1ac9      	subs	r1, r1, r3
   19880:	08c9      	lsrs	r1, r1, #3
   19882:	0189      	lsls	r1, r1, #6
   19884:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   19888:	f014 fdb2 	bl	2e3f0 <log_0>
			return err;
   1988c:	e7e9      	b.n	19862 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1988e:	1c68      	adds	r0, r5, #1
   19890:	f7ff fe38 	bl	19504 <set_random_address>
		if (err) {
   19894:	4604      	mov	r4, r0
   19896:	2800      	cmp	r0, #0
   19898:	d0e3      	beq.n	19862 <bt_id_init+0xa>
   1989a:	4905      	ldr	r1, [pc, #20]	; (198b0 <bt_id_init+0x58>)
   1989c:	4b05      	ldr	r3, [pc, #20]	; (198b4 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
   1989e:	4807      	ldr	r0, [pc, #28]	; (198bc <bt_id_init+0x64>)
   198a0:	1ac9      	subs	r1, r1, r3
   198a2:	08c9      	lsrs	r1, r1, #3
   198a4:	0189      	lsls	r1, r1, #6
   198a6:	f041 0101 	orr.w	r1, r1, #1
   198aa:	e7ed      	b.n	19888 <bt_id_init+0x30>
   198ac:	20014500 	.word	0x20014500
   198b0:	00036510 	.word	0x00036510
   198b4:	000364b0 	.word	0x000364b0
   198b8:	00039b80 	.word	0x00039b80
   198bc:	00039b9f 	.word	0x00039b9f

000198c0 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198c0:	4b01      	ldr	r3, [pc, #4]	; (198c8 <atomic_get.constprop.0+0x8>)
   198c2:	e8d3 0faf 	lda	r0, [r3]
}
   198c6:	4770      	bx	lr
   198c8:	20014598 	.word	0x20014598

000198cc <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   198cc:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   198ce:	2102      	movs	r1, #2
{
   198d0:	4604      	mov	r4, r0
   198d2:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   198d4:	f242 000c 	movw	r0, #8204	; 0x200c
   198d8:	f7fe fe02 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   198dc:	4605      	mov	r5, r0
   198de:	b308      	cbz	r0, 19924 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   198e0:	2102      	movs	r1, #2
   198e2:	3008      	adds	r0, #8
   198e4:	f003 fb7a 	bl	1cfdc <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   198e8:	2c01      	cmp	r4, #1
   198ea:	4602      	mov	r2, r0
   198ec:	d117      	bne.n	1991e <bt_le_scan_set_enable_legacy+0x52>
   198ee:	f7ff ffe7 	bl	198c0 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   198f2:	f3c0 2000 	ubfx	r0, r0, #8, #1
   198f6:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   198f8:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   198fa:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   198fc:	425c      	negs	r4, r3
   198fe:	415c      	adcs	r4, r3
   19900:	4628      	mov	r0, r5
   19902:	4a0a      	ldr	r2, [pc, #40]	; (1992c <bt_le_scan_set_enable_legacy+0x60>)
   19904:	a903      	add	r1, sp, #12
   19906:	2305      	movs	r3, #5
   19908:	9400      	str	r4, [sp, #0]
   1990a:	f7fe fdd7 	bl	184bc <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   1990e:	2200      	movs	r2, #0
   19910:	4629      	mov	r1, r5
   19912:	f242 000c 	movw	r0, #8204	; 0x200c
   19916:	f7fe fe2b 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   1991a:	b007      	add	sp, #28
   1991c:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   1991e:	2300      	movs	r3, #0
   19920:	7043      	strb	r3, [r0, #1]
   19922:	e7e9      	b.n	198f8 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   19924:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19928:	e7f7      	b.n	1991a <bt_le_scan_set_enable_legacy+0x4e>
   1992a:	bf00      	nop
   1992c:	20014598 	.word	0x20014598

00019930 <start_le_scan_legacy>:
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   19930:	2300      	movs	r3, #0
{
   19932:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19934:	f88d 3005 	strb.w	r3, [sp, #5]

	if (IS_ENABLED(CONFIG_BT_WHITELIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_WL)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_USE_WHITELIST;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
   19938:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1993c:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   1993e:	f88d 0000 	strb.w	r0, [sp]
{
   19942:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   19944:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   19946:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1994a:	4158      	adcs	r0, r3
   1994c:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   19950:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   19954:	f7ff ff72 	bl	1983c <bt_id_set_scan_own_addr>
	if (err) {
   19958:	4604      	mov	r4, r0
   1995a:	bb18      	cbnz	r0, 199a4 <start_le_scan_legacy+0x74>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   1995c:	2107      	movs	r1, #7
   1995e:	f242 000b 	movw	r0, #8203	; 0x200b
   19962:	f7fe fdbd 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   19966:	4606      	mov	r6, r0
   19968:	b328      	cbz	r0, 199b6 <start_le_scan_legacy+0x86>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1996a:	2207      	movs	r2, #7
   1996c:	4669      	mov	r1, sp
   1996e:	3008      	adds	r0, #8
   19970:	f017 feab 	bl	316ca <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   19974:	4622      	mov	r2, r4
   19976:	4631      	mov	r1, r6
   19978:	f242 000b 	movw	r0, #8203	; 0x200b
   1997c:	f7fe fdf8 	bl	18570 <bt_hci_cmd_send_sync>
	if (err) {
   19980:	4604      	mov	r4, r0
   19982:	b978      	cbnz	r0, 199a4 <start_le_scan_legacy+0x74>
	return bt_le_scan_set_enable_legacy(enable);
   19984:	2001      	movs	r0, #1
   19986:	f7ff ffa1 	bl	198cc <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   1998a:	4604      	mov	r4, r0
   1998c:	b950      	cbnz	r0, 199a4 <start_le_scan_legacy+0x74>
	if (val) {
   1998e:	2d01      	cmp	r5, #1
   19990:	d10b      	bne.n	199aa <start_le_scan_legacy+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19992:	4b0a      	ldr	r3, [pc, #40]	; (199bc <start_le_scan_legacy+0x8c>)
   19994:	e8d3 2fef 	ldaex	r2, [r3]
   19998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1999c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   199a0:	2900      	cmp	r1, #0
   199a2:	d1f7      	bne.n	19994 <start_le_scan_legacy+0x64>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   199a4:	4620      	mov	r0, r4
   199a6:	b002      	add	sp, #8
   199a8:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   199aa:	f06f 0180 	mvn.w	r1, #128	; 0x80
   199ae:	4803      	ldr	r0, [pc, #12]	; (199bc <start_le_scan_legacy+0x8c>)
   199b0:	f016 fee4 	bl	3077c <atomic_and>
   199b4:	e7f6      	b.n	199a4 <start_le_scan_legacy+0x74>
		return -ENOBUFS;
   199b6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   199ba:	e7f3      	b.n	199a4 <start_le_scan_legacy+0x74>
   199bc:	20014598 	.word	0x20014598

000199c0 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   199c0:	2200      	movs	r2, #0
   199c2:	4b01      	ldr	r3, [pc, #4]	; (199c8 <bt_scan_reset+0x8>)
   199c4:	601a      	str	r2, [r3, #0]
}
   199c6:	4770      	bx	lr
   199c8:	20016198 	.word	0x20016198

000199cc <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   199cc:	b538      	push	{r3, r4, r5, lr}
   199ce:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   199d0:	f7ff ff76 	bl	198c0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   199d4:	0641      	lsls	r1, r0, #25
   199d6:	f3c0 1280 	ubfx	r2, r0, #6, #1
   199da:	d501      	bpl.n	199e0 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   199dc:	2000      	movs	r0, #0
   199de:	e02c      	b.n	19a3a <bt_le_scan_update+0x6e>
   199e0:	f7ff ff6e 	bl	198c0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   199e4:	0683      	lsls	r3, r0, #26
   199e6:	d423      	bmi.n	19a30 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   199e8:	2100      	movs	r1, #0
   199ea:	2206      	movs	r2, #6
   199ec:	4608      	mov	r0, r1
   199ee:	f000 fc7d 	bl	1a2ec <bt_conn_lookup_state_le>
		if (conn) {
   199f2:	4604      	mov	r4, r0
   199f4:	bb10      	cbnz	r0, 19a3c <bt_le_scan_update+0x70>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   199f6:	2202      	movs	r2, #2
   199f8:	4601      	mov	r1, r0
   199fa:	f000 fc77 	bl	1a2ec <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   199fe:	2800      	cmp	r0, #0
   19a00:	d0ec      	beq.n	199dc <bt_le_scan_update+0x10>
   19a02:	4b10      	ldr	r3, [pc, #64]	; (19a44 <bt_le_scan_update+0x78>)
   19a04:	e8d3 2fef 	ldaex	r2, [r3]
   19a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   19a0c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19a10:	2900      	cmp	r1, #0
   19a12:	d1f7      	bne.n	19a04 <bt_le_scan_update+0x38>
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   19a14:	f000 fb18 	bl	1a048 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   19a18:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   19a1a:	4620      	mov	r0, r4
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   19a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   19a20:	bf15      	itete	ne
   19a22:	2230      	movne	r2, #48	; 0x30
   19a24:	2212      	moveq	r2, #18
   19a26:	2160      	movne	r1, #96	; 0x60
   19a28:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   19a2c:	f7ff bf80 	b.w	19930 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   19a30:	4610      	mov	r0, r2
   19a32:	f7ff ff4b 	bl	198cc <bt_le_scan_set_enable_legacy>
		if (err) {
   19a36:	2800      	cmp	r0, #0
   19a38:	d0d6      	beq.n	199e8 <bt_le_scan_update+0x1c>
}
   19a3a:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   19a3c:	f000 fb04 	bl	1a048 <bt_conn_unref>
   19a40:	e7cc      	b.n	199dc <bt_le_scan_update+0x10>
   19a42:	bf00      	nop
   19a44:	20014598 	.word	0x20014598

00019a48 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   19a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_simple_pull_u8(&buf->b);
   19a4c:	f100 0708 	add.w	r7, r0, #8
   19a50:	b08d      	sub	sp, #52	; 0x34
   19a52:	4604      	mov	r4, r0
   19a54:	4638      	mov	r0, r7
   19a56:	f017 fe1c 	bl	31692 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   19a5a:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 19c44 <bt_hci_le_adv_report+0x1fc>
   19a5e:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   19a60:	9b01      	ldr	r3, [sp, #4]
   19a62:	b163      	cbz	r3, 19a7e <bt_hci_le_adv_report+0x36>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   19a64:	89a3      	ldrh	r3, [r4, #12]
   19a66:	2b08      	cmp	r3, #8
   19a68:	d80c      	bhi.n	19a84 <bt_hci_le_adv_report+0x3c>
   19a6a:	4971      	ldr	r1, [pc, #452]	; (19c30 <bt_hci_le_adv_report+0x1e8>)
   19a6c:	4b71      	ldr	r3, [pc, #452]	; (19c34 <bt_hci_le_adv_report+0x1ec>)
			BT_ERR("Unexpected end of buffer");
   19a6e:	4872      	ldr	r0, [pc, #456]	; (19c38 <bt_hci_le_adv_report+0x1f0>)
   19a70:	1ac9      	subs	r1, r1, r3
   19a72:	08c9      	lsrs	r1, r1, #3
   19a74:	0189      	lsls	r1, r1, #6
   19a76:	f041 0101 	orr.w	r1, r1, #1
   19a7a:	f014 fcb9 	bl	2e3f0 <log_0>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   19a7e:	b00d      	add	sp, #52	; 0x34
   19a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19a84:	2109      	movs	r1, #9
   19a86:	4638      	mov	r0, r7
   19a88:	f003 fa86 	bl	1cf98 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   19a8c:	237f      	movs	r3, #127	; 0x7f
		adv_info.rssi = evt->data[evt->length];
   19a8e:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   19a92:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   19a96:	eb00 0309 	add.w	r3, r0, r9
   19a9a:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   19a9c:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   19a9e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   19aa2:	23ff      	movs	r3, #255	; 0xff
   19aa4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   19aa8:	2300      	movs	r3, #0
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   19aaa:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.interval = 0U;
   19aae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
   19ab2:	7802      	ldrb	r2, [r0, #0]
   19ab4:	4606      	mov	r6, r0
   19ab6:	2a04      	cmp	r2, #4
   19ab8:	bf98      	it	ls
   19aba:	4b60      	ldrls	r3, [pc, #384]	; (19c3c <bt_hci_le_adv_report+0x1f4>)
   19abc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	switch (evt_type) {
   19ac0:	bf98      	it	ls
   19ac2:	5c9b      	ldrbls	r3, [r3, r2]
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   19ac4:	f100 0801 	add.w	r8, r0, #1
		adv_info.adv_props = get_adv_props(evt->evt_type);
   19ac8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   19acc:	f7ff fef8 	bl	198c0 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   19ad0:	0645      	lsls	r5, r0, #25
   19ad2:	d50d      	bpl.n	19af0 <bt_hci_le_adv_report+0xa8>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   19ad4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19ad8:	0758      	lsls	r0, r3, #29
   19ada:	d509      	bpl.n	19af0 <bt_hci_le_adv_report+0xa8>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   19adc:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   19ade:	4638      	mov	r0, r7
   19ae0:	3101      	adds	r1, #1
   19ae2:	f003 fa39 	bl	1cf58 <net_buf_simple_pull>
   19ae6:	9b01      	ldr	r3, [sp, #4]
   19ae8:	1e58      	subs	r0, r3, #1
   19aea:	b2c3      	uxtb	r3, r0
   19aec:	9301      	str	r3, [sp, #4]
   19aee:	e7b7      	b.n	19a60 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   19af0:	7873      	ldrb	r3, [r6, #1]
   19af2:	1e9a      	subs	r2, r3, #2
   19af4:	2a01      	cmp	r2, #1
   19af6:	d84e      	bhi.n	19b96 <bt_hci_le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, addr);
   19af8:	4641      	mov	r1, r8
   19afa:	a804      	add	r0, sp, #16
   19afc:	f016 fe49 	bl	30792 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19b00:	f89d 3010 	ldrb.w	r3, [sp, #16]
   19b04:	3b02      	subs	r3, #2
   19b06:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   19b0a:	ab04      	add	r3, sp, #16
   19b0c:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   19b0e:	f8da 3000 	ldr.w	r3, [sl]
   19b12:	b1b3      	cbz	r3, 19b42 <bt_hci_le_adv_report+0xfa>
	state->offset = net_buf_simple_headroom(buf);
   19b14:	4638      	mov	r0, r7
   19b16:	f017 fdcc 	bl	316b2 <net_buf_simple_headroom>
   19b1a:	4683      	mov	fp, r0
	state->len = buf->len;
   19b1c:	89a3      	ldrh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   19b1e:	a804      	add	r0, sp, #16
   19b20:	9302      	str	r3, [sp, #8]
   19b22:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   19b26:	463b      	mov	r3, r7
   19b28:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   19b2c:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
   19b30:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   19b34:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   19b36:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   19b38:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
   19b3a:	fa10 f08b 	uxtah	r0, r0, fp
   19b3e:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
   19b40:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   19b42:	4b3f      	ldr	r3, [pc, #252]	; (19c40 <bt_hci_le_adv_report+0x1f8>)
   19b44:	681b      	ldr	r3, [r3, #0]
   19b46:	2b00      	cmp	r3, #0
   19b48:	d036      	beq.n	19bb8 <bt_hci_le_adv_report+0x170>
   19b4a:	f1b3 0208 	subs.w	r2, r3, #8
   19b4e:	d033      	beq.n	19bb8 <bt_hci_le_adv_report+0x170>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19b50:	681d      	ldr	r5, [r3, #0]
   19b52:	b105      	cbz	r5, 19b56 <bt_hci_le_adv_report+0x10e>
   19b54:	3d08      	subs	r5, #8
		if (listener->recv) {
   19b56:	6813      	ldr	r3, [r2, #0]
   19b58:	9203      	str	r2, [sp, #12]
   19b5a:	b193      	cbz	r3, 19b82 <bt_hci_le_adv_report+0x13a>
	state->offset = net_buf_simple_headroom(buf);
   19b5c:	4638      	mov	r0, r7
   19b5e:	f017 fda8 	bl	316b2 <net_buf_simple_headroom>
   19b62:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
   19b64:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   19b66:	89a3      	ldrh	r3, [r4, #12]
   19b68:	a808      	add	r0, sp, #32
   19b6a:	4639      	mov	r1, r7
   19b6c:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   19b6e:	f8a4 900c 	strh.w	r9, [r4, #12]
   19b72:	9302      	str	r3, [sp, #8]
			listener->recv(info, &buf->b);
   19b74:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   19b76:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   19b78:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
   19b7a:	fa10 f08b 	uxtah	r0, r0, fp
   19b7e:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
   19b80:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   19b82:	b1cd      	cbz	r5, 19bb8 <bt_hci_le_adv_report+0x170>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19b84:	f115 0308 	adds.w	r3, r5, #8
   19b88:	d002      	beq.n	19b90 <bt_hci_le_adv_report+0x148>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19b8a:	68ab      	ldr	r3, [r5, #8]
   19b8c:	b103      	cbz	r3, 19b90 <bt_hci_le_adv_report+0x148>
   19b8e:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   19b90:	462a      	mov	r2, r5
   19b92:	461d      	mov	r5, r3
   19b94:	e7df      	b.n	19b56 <bt_hci_le_adv_report+0x10e>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   19b96:	2bff      	cmp	r3, #255	; 0xff
   19b98:	d108      	bne.n	19bac <bt_hci_le_adv_report+0x164>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   19b9a:	2300      	movs	r3, #0
   19b9c:	a906      	add	r1, sp, #24
   19b9e:	9306      	str	r3, [sp, #24]
   19ba0:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
   19ba4:	a804      	add	r0, sp, #16
   19ba6:	f016 fdf4 	bl	30792 <bt_addr_le_copy>
   19baa:	e7ae      	b.n	19b0a <bt_hci_le_adv_report+0xc2>
   19bac:	4641      	mov	r1, r8
   19bae:	2000      	movs	r0, #0
   19bb0:	f016 fdd0 	bl	30754 <bt_lookup_id_addr>
   19bb4:	4601      	mov	r1, r0
   19bb6:	e7f5      	b.n	19ba4 <bt_hci_le_adv_report+0x15c>
	check_pending_conn(&id_addr, addr, info->adv_props);
   19bb8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   19bbc:	f7ff fe80 	bl	198c0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19bc0:	0641      	lsls	r1, r0, #25
   19bc2:	f3c0 1580 	ubfx	r5, r0, #6, #1
   19bc6:	d489      	bmi.n	19adc <bt_hci_le_adv_report+0x94>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   19bc8:	07d2      	lsls	r2, r2, #31
   19bca:	d587      	bpl.n	19adc <bt_hci_le_adv_report+0x94>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   19bcc:	2202      	movs	r2, #2
   19bce:	4628      	mov	r0, r5
   19bd0:	a904      	add	r1, sp, #16
   19bd2:	f000 fb8b 	bl	1a2ec <bt_conn_lookup_state_le>
	if (!conn) {
   19bd6:	4681      	mov	r9, r0
   19bd8:	2800      	cmp	r0, #0
   19bda:	f43f af7f 	beq.w	19adc <bt_hci_le_adv_report+0x94>
   19bde:	f7ff fe6f 	bl	198c0 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   19be2:	0683      	lsls	r3, r0, #26
   19be4:	d410      	bmi.n	19c08 <bt_hci_le_adv_report+0x1c0>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   19be6:	f109 009e 	add.w	r0, r9, #158	; 0x9e
   19bea:	4641      	mov	r1, r8
   19bec:	f016 fdd1 	bl	30792 <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   19bf0:	4648      	mov	r0, r9
   19bf2:	f016 fce6 	bl	305c2 <bt_le_create_conn>
   19bf6:	b960      	cbnz	r0, 19c12 <bt_hci_le_adv_report+0x1ca>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   19bf8:	4648      	mov	r0, r9
   19bfa:	2106      	movs	r1, #6
   19bfc:	f000 fa56 	bl	1a0ac <bt_conn_set_state>
	bt_conn_unref(conn);
   19c00:	4648      	mov	r0, r9
   19c02:	f000 fa21 	bl	1a048 <bt_conn_unref>
	return;
   19c06:	e769      	b.n	19adc <bt_hci_le_adv_report+0x94>
	return bt_le_scan_set_enable_legacy(enable);
   19c08:	4628      	mov	r0, r5
   19c0a:	f7ff fe5f 	bl	198cc <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   19c0e:	2800      	cmp	r0, #0
   19c10:	d0e9      	beq.n	19be6 <bt_hci_le_adv_report+0x19e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   19c12:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19c14:	2100      	movs	r1, #0
   19c16:	4648      	mov	r0, r9
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   19c18:	f889 3009 	strb.w	r3, [r9, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19c1c:	f000 fa46 	bl	1a0ac <bt_conn_set_state>
	bt_conn_unref(conn);
   19c20:	4648      	mov	r0, r9
   19c22:	f000 fa11 	bl	1a048 <bt_conn_unref>
	bt_le_scan_update(false);
   19c26:	2000      	movs	r0, #0
   19c28:	f7ff fed0 	bl	199cc <bt_le_scan_update>
   19c2c:	e756      	b.n	19adc <bt_hci_le_adv_report+0x94>
   19c2e:	bf00      	nop
   19c30:	00036520 	.word	0x00036520
   19c34:	000364b0 	.word	0x000364b0
   19c38:	00039bc2 	.word	0x00039bc2
   19c3c:	00039bdb 	.word	0x00039bdb
   19c40:	20016190 	.word	0x20016190
   19c44:	20016198 	.word	0x20016198

00019c48 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   19c48:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   19c4c:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
   19c4e:	b08d      	sub	sp, #52	; 0x34
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   19c50:	2100      	movs	r1, #0
   19c52:	f242 0018 	movw	r0, #8216	; 0x2018
   19c56:	aa02      	add	r2, sp, #8
   19c58:	f7fe fc8a 	bl	18570 <bt_hci_cmd_send_sync>
		if (ret) {
   19c5c:	4604      	mov	r4, r0
   19c5e:	bba0      	cbnz	r0, 19cca <prng_reseed.constprop.0+0x82>
			return ret;
		}

		rp = (void *)rsp->data;
   19c60:	9802      	ldr	r0, [sp, #8]
   19c62:	ae04      	add	r6, sp, #16
   19c64:	6882      	ldr	r2, [r0, #8]
   19c66:	eb06 01c5 	add.w	r1, r6, r5, lsl #3
   19c6a:	f852 3f01 	ldr.w	r3, [r2, #1]!
   19c6e:	f846 3035 	str.w	r3, [r6, r5, lsl #3]
   19c72:	6853      	ldr	r3, [r2, #4]
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   19c74:	3501      	adds	r5, #1
   19c76:	604b      	str	r3, [r1, #4]
		memcpy(&seed[i * 8], rp->rand, 8);

		net_buf_unref(rsp);
   19c78:	f003 f880 	bl	1cd7c <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   19c7c:	2d04      	cmp	r5, #4
   19c7e:	d1e7      	bne.n	19c50 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
   19c80:	f01b fba5 	bl	353ce <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   19c84:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   19c88:	fba0 bc05 	umull	fp, ip, r0, r5
   19c8c:	fb05 cc01 	mla	ip, r5, r1, ip
   19c90:	ea4f 32db 	mov.w	r2, fp, lsr #15
   19c94:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   19c98:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
   19c9c:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   19ca0:	2308      	movs	r3, #8
   19ca2:	2220      	movs	r2, #32
   19ca4:	9300      	str	r3, [sp, #0]
   19ca6:	4631      	mov	r1, r6
   19ca8:	480a      	ldr	r0, [pc, #40]	; (19cd4 <prng_reseed.constprop.0+0x8c>)
   19caa:	446b      	add	r3, sp
   19cac:	f016 fa76 	bl	3019c <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   19cb0:	b958      	cbnz	r0, 19cca <prng_reseed.constprop.0+0x82>
   19cb2:	4b09      	ldr	r3, [pc, #36]	; (19cd8 <prng_reseed.constprop.0+0x90>)
   19cb4:	4909      	ldr	r1, [pc, #36]	; (19cdc <prng_reseed.constprop.0+0x94>)
		BT_ERR("Failed to re-seed PRNG");
   19cb6:	480a      	ldr	r0, [pc, #40]	; (19ce0 <prng_reseed.constprop.0+0x98>)
   19cb8:	1ac9      	subs	r1, r1, r3
   19cba:	08c9      	lsrs	r1, r1, #3
   19cbc:	0189      	lsls	r1, r1, #6
   19cbe:	f041 0101 	orr.w	r1, r1, #1
   19cc2:	f014 fb95 	bl	2e3f0 <log_0>
		return -EIO;
   19cc6:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   19cca:	4620      	mov	r0, r4
   19ccc:	b00d      	add	sp, #52	; 0x34
   19cce:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
   19cd2:	bf00      	nop
   19cd4:	200153a0 	.word	0x200153a0
   19cd8:	000364b0 	.word	0x000364b0
   19cdc:	000364e8 	.word	0x000364e8
   19ce0:	00039be0 	.word	0x00039be0

00019ce4 <prng_init>:

int prng_init(void)
{
   19ce4:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19ce6:	4b16      	ldr	r3, [pc, #88]	; (19d40 <prng_init+0x5c>)
   19ce8:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   19cec:	2b00      	cmp	r3, #0
   19cee:	da23      	bge.n	19d38 <prng_init+0x54>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   19cf0:	2100      	movs	r1, #0
   19cf2:	f242 0018 	movw	r0, #8216	; 0x2018
   19cf6:	aa01      	add	r2, sp, #4
   19cf8:	f7fe fc3a 	bl	18570 <bt_hci_cmd_send_sync>
	if (ret) {
   19cfc:	b9b8      	cbnz	r0, 19d2e <prng_init+0x4a>
		return ret;
	}

	rp = (void *)rsp->data;
   19cfe:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   19d00:	2208      	movs	r2, #8
   19d02:	6899      	ldr	r1, [r3, #8]
   19d04:	480f      	ldr	r0, [pc, #60]	; (19d44 <prng_init+0x60>)
   19d06:	3101      	adds	r1, #1
   19d08:	f016 fa28 	bl	3015c <tc_hmac_prng_init>
   19d0c:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   19d0e:	9801      	ldr	r0, [sp, #4]
   19d10:	f003 f834 	bl	1cd7c <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   19d14:	b96c      	cbnz	r4, 19d32 <prng_init+0x4e>
   19d16:	4b0c      	ldr	r3, [pc, #48]	; (19d48 <prng_init+0x64>)
   19d18:	490c      	ldr	r1, [pc, #48]	; (19d4c <prng_init+0x68>)
		BT_ERR("Failed to initialize PRNG");
   19d1a:	480d      	ldr	r0, [pc, #52]	; (19d50 <prng_init+0x6c>)
   19d1c:	1ac9      	subs	r1, r1, r3
   19d1e:	08c9      	lsrs	r1, r1, #3
   19d20:	0189      	lsls	r1, r1, #6
   19d22:	f041 0101 	orr.w	r1, r1, #1
   19d26:	f014 fb63 	bl	2e3f0 <log_0>
		return -EIO;
   19d2a:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   19d2e:	b002      	add	sp, #8
   19d30:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   19d32:	f7ff ff89 	bl	19c48 <prng_reseed.constprop.0>
   19d36:	e7fa      	b.n	19d2e <prng_init+0x4a>
		return -ENOTSUP;
   19d38:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19d3c:	e7f7      	b.n	19d2e <prng_init+0x4a>
   19d3e:	bf00      	nop
   19d40:	20014500 	.word	0x20014500
   19d44:	200153a0 	.word	0x200153a0
   19d48:	000364b0 	.word	0x000364b0
   19d4c:	000364e8 	.word	0x000364e8
   19d50:	00039bf7 	.word	0x00039bf7

00019d54 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   19d54:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   19d56:	4a0a      	ldr	r2, [pc, #40]	; (19d80 <bt_rand+0x2c>)
{
   19d58:	4604      	mov	r4, r0
   19d5a:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   19d5c:	f016 fa37 	bl	301ce <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   19d60:	1c43      	adds	r3, r0, #1
   19d62:	d107      	bne.n	19d74 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   19d64:	f7ff ff70 	bl	19c48 <prng_reseed.constprop.0>
		if (ret) {
   19d68:	b948      	cbnz	r0, 19d7e <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   19d6a:	4629      	mov	r1, r5
   19d6c:	4620      	mov	r0, r4
   19d6e:	4a04      	ldr	r2, [pc, #16]	; (19d80 <bt_rand+0x2c>)
   19d70:	f016 fa2d 	bl	301ce <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   19d74:	2801      	cmp	r0, #1
   19d76:	bf14      	ite	ne
   19d78:	f06f 0004 	mvnne.w	r0, #4
   19d7c:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   19d7e:	bd38      	pop	{r3, r4, r5, pc}
   19d80:	200153a0 	.word	0x200153a0

00019d84 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   19d84:	2300      	movs	r3, #0
{
   19d86:	4601      	mov	r1, r0
	tx->user_data = NULL;
   19d88:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   19d8c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   19d8e:	4801      	ldr	r0, [pc, #4]	; (19d94 <tx_free+0x10>)
   19d90:	f01b ba73 	b.w	3527a <k_queue_append>
   19d94:	20014ff8 	.word	0x20014ff8

00019d98 <notify_connected>:
{
   19d98:	b538      	push	{r3, r4, r5, lr}
   19d9a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   19d9c:	4b08      	ldr	r3, [pc, #32]	; (19dc0 <notify_connected+0x28>)
   19d9e:	681d      	ldr	r5, [r3, #0]
   19da0:	7a61      	ldrb	r1, [r4, #9]
   19da2:	b92d      	cbnz	r5, 19db0 <notify_connected+0x18>
	if (!conn->err) {
   19da4:	b951      	cbnz	r1, 19dbc <notify_connected+0x24>
		bt_gatt_connected(conn);
   19da6:	4620      	mov	r0, r4
}
   19da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   19dac:	f002 bd64 	b.w	1c878 <bt_gatt_connected>
		if (cb->connected) {
   19db0:	682b      	ldr	r3, [r5, #0]
   19db2:	b10b      	cbz	r3, 19db8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   19db4:	4620      	mov	r0, r4
   19db6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19db8:	692d      	ldr	r5, [r5, #16]
   19dba:	e7f1      	b.n	19da0 <notify_connected+0x8>
}
   19dbc:	bd38      	pop	{r3, r4, r5, pc}
   19dbe:	bf00      	nop
   19dc0:	2001619c 	.word	0x2001619c

00019dc4 <bt_conn_get_pkts>:
}
   19dc4:	4800      	ldr	r0, [pc, #0]	; (19dc8 <bt_conn_get_pkts+0x4>)
   19dc6:	4770      	bx	lr
   19dc8:	200145d0 	.word	0x200145d0

00019dcc <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   19dcc:	1d03      	adds	r3, r0, #4
{
   19dce:	b570      	push	{r4, r5, r6, lr}
   19dd0:	4604      	mov	r4, r0
   19dd2:	4618      	mov	r0, r3
   19dd4:	f016 fce4 	bl	307a0 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   19dd8:	0582      	lsls	r2, r0, #22
   19dda:	d515      	bpl.n	19e08 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   19ddc:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   19de0:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   19de4:	4291      	cmp	r1, r2
   19de6:	d80f      	bhi.n	19e08 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   19de8:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   19dec:	4291      	cmp	r1, r2
   19dee:	d30b      	bcc.n	19e08 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   19df0:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   19df4:	4291      	cmp	r1, r2
   19df6:	d107      	bne.n	19e08 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19df8:	e8d3 2fef 	ldaex	r2, [r3]
   19dfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   19e00:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19e04:	2900      	cmp	r1, #0
   19e06:	d1f7      	bne.n	19df8 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   19e08:	4b07      	ldr	r3, [pc, #28]	; (19e28 <notify_le_param_updated+0x5c>)
   19e0a:	681d      	ldr	r5, [r3, #0]
   19e0c:	b905      	cbnz	r5, 19e10 <notify_le_param_updated+0x44>
}
   19e0e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   19e10:	68ee      	ldr	r6, [r5, #12]
   19e12:	b13e      	cbz	r6, 19e24 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   19e14:	4620      	mov	r0, r4
   19e16:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   19e1a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   19e1e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   19e22:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   19e24:	692d      	ldr	r5, [r5, #16]
   19e26:	e7f1      	b.n	19e0c <notify_le_param_updated+0x40>
   19e28:	2001619c 	.word	0x2001619c

00019e2c <le_param_req>:
{
   19e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e2e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   19e30:	4608      	mov	r0, r1
{
   19e32:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19e34:	f016 fbe2 	bl	305fc <bt_le_conn_params_valid>
   19e38:	4604      	mov	r4, r0
   19e3a:	b910      	cbnz	r0, 19e42 <le_param_req+0x16>
		return false;
   19e3c:	2400      	movs	r4, #0
}
   19e3e:	4620      	mov	r0, r4
   19e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   19e42:	4b09      	ldr	r3, [pc, #36]	; (19e68 <le_param_req+0x3c>)
   19e44:	681e      	ldr	r6, [r3, #0]
   19e46:	2e00      	cmp	r6, #0
   19e48:	d0f9      	beq.n	19e3e <le_param_req+0x12>
		if (!cb->le_param_req) {
   19e4a:	68b3      	ldr	r3, [r6, #8]
   19e4c:	b90b      	cbnz	r3, 19e52 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   19e4e:	6936      	ldr	r6, [r6, #16]
   19e50:	e7f9      	b.n	19e46 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   19e52:	4629      	mov	r1, r5
   19e54:	4638      	mov	r0, r7
   19e56:	4798      	blx	r3
   19e58:	2800      	cmp	r0, #0
   19e5a:	d0ef      	beq.n	19e3c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   19e5c:	4628      	mov	r0, r5
   19e5e:	f016 fbcd 	bl	305fc <bt_le_conn_params_valid>
   19e62:	2800      	cmp	r0, #0
   19e64:	d1f3      	bne.n	19e4e <le_param_req+0x22>
   19e66:	e7e9      	b.n	19e3c <le_param_req+0x10>
   19e68:	2001619c 	.word	0x2001619c

00019e6c <bt_conn_recv>:
	net_buf_unref(conn->rx);
	conn->rx = NULL;
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, uint8_t flags)
{
   19e6c:	b570      	push	{r4, r5, r6, lr}
   19e6e:	4616      	mov	r6, r2
   19e70:	4604      	mov	r4, r0
   19e72:	460d      	mov	r5, r1
	uint16_t acl_total_len;
	/* Make sure we notify any pending TX callbacks before processing
	 * new data for this connection.
	 */
	tx_notify(conn);
   19e74:	f016 fc97 	bl	307a6 <tx_notify>
		bt_iso_recv(conn, buf, flags);
		return;
	}

	/* Check packet boundary flags */
	switch (flags) {
   19e78:	2e01      	cmp	r6, #1
   19e7a:	d02e      	beq.n	19eda <bt_conn_recv+0x6e>
   19e7c:	2e02      	cmp	r6, #2
   19e7e:	d15b      	bne.n	19f38 <bt_conn_recv+0xcc>
	case BT_ACL_START:
		if (conn->rx) {
   19e80:	6923      	ldr	r3, [r4, #16]
   19e82:	b163      	cbz	r3, 19e9e <bt_conn_recv+0x32>
   19e84:	4b37      	ldr	r3, [pc, #220]	; (19f64 <bt_conn_recv+0xf8>)
   19e86:	4938      	ldr	r1, [pc, #224]	; (19f68 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   19e88:	4838      	ldr	r0, [pc, #224]	; (19f6c <bt_conn_recv+0x100>)
   19e8a:	1ac9      	subs	r1, r1, r3
   19e8c:	08c9      	lsrs	r1, r1, #3
   19e8e:	0189      	lsls	r1, r1, #6
   19e90:	f041 0101 	orr.w	r1, r1, #1
   19e94:	f014 faac 	bl	2e3f0 <log_0>
			bt_conn_reset_rx_state(conn);
   19e98:	4620      	mov	r0, r4
   19e9a:	f016 fca9 	bl	307f0 <bt_conn_reset_rx_state>

		BT_DBG("First, len %u final %u", buf->len,
		       (buf->len < sizeof(uint16_t)) ?
		       0 : sys_get_le16(buf->data));

		conn->rx = buf;
   19e9e:	6125      	str	r5, [r4, #16]
		bt_conn_reset_rx_state(conn);
		net_buf_unref(buf);
		return;
	}

	if (conn->rx->len < sizeof(uint16_t)) {
   19ea0:	6923      	ldr	r3, [r4, #16]
   19ea2:	8999      	ldrh	r1, [r3, #12]
   19ea4:	2901      	cmp	r1, #1
   19ea6:	d95b      	bls.n	19f60 <bt_conn_recv+0xf4>
		 * length field.
		 */
		return;
	}

	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   19ea8:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   19eaa:	7845      	ldrb	r5, [r0, #1]
   19eac:	7802      	ldrb	r2, [r0, #0]
   19eae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   19eb2:	3204      	adds	r2, #4
   19eb4:	b292      	uxth	r2, r2

	if (conn->rx->len < acl_total_len) {
   19eb6:	4291      	cmp	r1, r2
   19eb8:	d352      	bcc.n	19f60 <bt_conn_recv+0xf4>
		/* L2CAP frame not complete. */
		return;
	}

	if (conn->rx->len > acl_total_len) {
   19eba:	d949      	bls.n	19f50 <bt_conn_recv+0xe4>
   19ebc:	4829      	ldr	r0, [pc, #164]	; (19f64 <bt_conn_recv+0xf8>)
   19ebe:	4b2a      	ldr	r3, [pc, #168]	; (19f68 <bt_conn_recv+0xfc>)
   19ec0:	1a1b      	subs	r3, r3, r0
   19ec2:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   19ec4:	019b      	lsls	r3, r3, #6
   19ec6:	482a      	ldr	r0, [pc, #168]	; (19f70 <bt_conn_recv+0x104>)
   19ec8:	f043 0301 	orr.w	r3, r3, #1
   19ecc:	f014 fab1 	bl	2e432 <log_2>
		       conn->rx->len, acl_total_len);
		bt_conn_reset_rx_state(conn);
   19ed0:	4620      	mov	r0, r4
	buf = conn->rx;
	conn->rx = NULL;

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
	bt_l2cap_recv(conn, buf);
}
   19ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   19ed6:	f016 bc8b 	b.w	307f0 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   19eda:	6920      	ldr	r0, [r4, #16]
   19edc:	b968      	cbnz	r0, 19efa <bt_conn_recv+0x8e>
   19ede:	4922      	ldr	r1, [pc, #136]	; (19f68 <bt_conn_recv+0xfc>)
   19ee0:	4b20      	ldr	r3, [pc, #128]	; (19f64 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   19ee2:	4824      	ldr	r0, [pc, #144]	; (19f74 <bt_conn_recv+0x108>)
   19ee4:	1ac9      	subs	r1, r1, r3
   19ee6:	08c9      	lsrs	r1, r1, #3
   19ee8:	0189      	lsls	r1, r1, #6
   19eea:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   19eee:	f014 fa7f 	bl	2e3f0 <log_0>
			bt_conn_reset_rx_state(conn);
   19ef2:	4620      	mov	r0, r4
   19ef4:	f016 fc7c 	bl	307f0 <bt_conn_reset_rx_state>
   19ef8:	e001      	b.n	19efe <bt_conn_recv+0x92>
		if (!buf->len) {
   19efa:	89ae      	ldrh	r6, [r5, #12]
   19efc:	b926      	cbnz	r6, 19f08 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   19efe:	4628      	mov	r0, r5
}
   19f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   19f04:	f002 bf3a 	b.w	1cd7c <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   19f08:	3008      	adds	r0, #8
   19f0a:	f017 fbd6 	bl	316ba <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   19f0e:	4286      	cmp	r6, r0
   19f10:	d908      	bls.n	19f24 <bt_conn_recv+0xb8>
   19f12:	4915      	ldr	r1, [pc, #84]	; (19f68 <bt_conn_recv+0xfc>)
   19f14:	4b13      	ldr	r3, [pc, #76]	; (19f64 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   19f16:	4818      	ldr	r0, [pc, #96]	; (19f78 <bt_conn_recv+0x10c>)
   19f18:	1ac9      	subs	r1, r1, r3
   19f1a:	08c9      	lsrs	r1, r1, #3
   19f1c:	0189      	lsls	r1, r1, #6
   19f1e:	f041 0101 	orr.w	r1, r1, #1
   19f22:	e7e4      	b.n	19eee <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19f24:	6920      	ldr	r0, [r4, #16]
   19f26:	89aa      	ldrh	r2, [r5, #12]
   19f28:	68a9      	ldr	r1, [r5, #8]
   19f2a:	3008      	adds	r0, #8
   19f2c:	f017 fbcd 	bl	316ca <net_buf_simple_add_mem>
		net_buf_unref(buf);
   19f30:	4628      	mov	r0, r5
   19f32:	f002 ff23 	bl	1cd7c <net_buf_unref>
		break;
   19f36:	e7b3      	b.n	19ea0 <bt_conn_recv+0x34>
   19f38:	4a0a      	ldr	r2, [pc, #40]	; (19f64 <bt_conn_recv+0xf8>)
   19f3a:	4b0b      	ldr	r3, [pc, #44]	; (19f68 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   19f3c:	4631      	mov	r1, r6
   19f3e:	1a9b      	subs	r3, r3, r2
   19f40:	08db      	lsrs	r3, r3, #3
   19f42:	019b      	lsls	r3, r3, #6
   19f44:	480d      	ldr	r0, [pc, #52]	; (19f7c <bt_conn_recv+0x110>)
   19f46:	f043 0201 	orr.w	r2, r3, #1
   19f4a:	f014 fa5e 	bl	2e40a <log_1>
		bt_conn_reset_rx_state(conn);
   19f4e:	e7d0      	b.n	19ef2 <bt_conn_recv+0x86>
	conn->rx = NULL;
   19f50:	2200      	movs	r2, #0
	bt_l2cap_recv(conn, buf);
   19f52:	4620      	mov	r0, r4
	conn->rx = NULL;
   19f54:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   19f56:	4619      	mov	r1, r3
}
   19f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   19f5c:	f000 bc14 	b.w	1a788 <bt_l2cap_recv>
}
   19f60:	bd70      	pop	{r4, r5, r6, pc}
   19f62:	bf00      	nop
   19f64:	000364b0 	.word	0x000364b0
   19f68:	000364e0 	.word	0x000364e0
   19f6c:	00039c5e 	.word	0x00039c5e
   19f70:	00039cde 	.word	0x00039cde
   19f74:	00039c7b 	.word	0x00039c7b
   19f78:	00039c99 	.word	0x00039c99
   19f7c:	00039cc0 	.word	0x00039cc0

00019f80 <bt_conn_send_cb>:
	return k_fifo_get(&free_tx, K_FOREVER);
}

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb, void *user_data)
{
   19f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f84:	4698      	mov	r8, r3
	struct bt_conn_tx *tx;

	BT_DBG("conn handle %u buf len %u cb %p user_data %p", conn->handle,
	       buf->len, cb, user_data);

	if (conn->state != BT_CONN_CONNECTED) {
   19f86:	7a83      	ldrb	r3, [r0, #10]
{
   19f88:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19f8a:	2b07      	cmp	r3, #7
{
   19f8c:	460e      	mov	r6, r1
   19f8e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   19f90:	d00c      	beq.n	19fac <bt_conn_send_cb+0x2c>
   19f92:	4926      	ldr	r1, [pc, #152]	; (1a02c <bt_conn_send_cb+0xac>)
   19f94:	4b26      	ldr	r3, [pc, #152]	; (1a030 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   19f96:	4827      	ldr	r0, [pc, #156]	; (1a034 <bt_conn_send_cb+0xb4>)
   19f98:	1ac9      	subs	r1, r1, r3
   19f9a:	08c9      	lsrs	r1, r1, #3
   19f9c:	0189      	lsls	r1, r1, #6
   19f9e:	f041 0101 	orr.w	r1, r1, #1
   19fa2:	f014 fa25 	bl	2e3f0 <log_0>

		/* Verify that we're still connected after blocking */
		if (conn->state != BT_CONN_CONNECTED) {
			BT_WARN("Disconnected while allocating context");
			tx_free(tx);
			return -ENOTCONN;
   19fa6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19faa:	e01d      	b.n	19fe8 <bt_conn_send_cb+0x68>
	if (cb) {
   19fac:	2a00      	cmp	r2, #0
   19fae:	d03a      	beq.n	1a026 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   19fb0:	f011 fbce 	bl	2b750 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19fb4:	4b20      	ldr	r3, [pc, #128]	; (1a038 <bt_conn_send_cb+0xb8>)
   19fb6:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   19fb8:	4820      	ldr	r0, [pc, #128]	; (1a03c <bt_conn_send_cb+0xbc>)
   19fba:	bf07      	ittee	eq
   19fbc:	2200      	moveq	r2, #0
   19fbe:	2300      	moveq	r3, #0
   19fc0:	f04f 32ff 	movne.w	r2, #4294967295
   19fc4:	f04f 33ff 	movne.w	r3, #4294967295
   19fc8:	f00f fc5c 	bl	29884 <z_impl_k_queue_get>
   19fcc:	4604      	mov	r4, r0
		if (!tx) {
   19fce:	b968      	cbnz	r0, 19fec <bt_conn_send_cb+0x6c>
   19fd0:	4b17      	ldr	r3, [pc, #92]	; (1a030 <bt_conn_send_cb+0xb0>)
   19fd2:	4916      	ldr	r1, [pc, #88]	; (1a02c <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   19fd4:	481a      	ldr	r0, [pc, #104]	; (1a040 <bt_conn_send_cb+0xc0>)
   19fd6:	1ac9      	subs	r1, r1, r3
   19fd8:	08c9      	lsrs	r1, r1, #3
   19fda:	0189      	lsls	r1, r1, #6
   19fdc:	f041 0101 	orr.w	r1, r1, #1
   19fe0:	f014 fa06 	bl	2e3f0 <log_0>
			return -ENOBUFS;
   19fe4:	f06f 0068 	mvn.w	r0, #104	; 0x68
		tx_data(buf)->tx = NULL;
	}

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
   19fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   19fec:	7aab      	ldrb	r3, [r5, #10]
   19fee:	2b07      	cmp	r3, #7
   19ff0:	d00d      	beq.n	1a00e <bt_conn_send_cb+0x8e>
   19ff2:	4b0f      	ldr	r3, [pc, #60]	; (1a030 <bt_conn_send_cb+0xb0>)
   19ff4:	490d      	ldr	r1, [pc, #52]	; (1a02c <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   19ff6:	4813      	ldr	r0, [pc, #76]	; (1a044 <bt_conn_send_cb+0xc4>)
   19ff8:	1ac9      	subs	r1, r1, r3
   19ffa:	08c9      	lsrs	r1, r1, #3
   19ffc:	0189      	lsls	r1, r1, #6
   19ffe:	f041 0102 	orr.w	r1, r1, #2
   1a002:	f014 f9f5 	bl	2e3f0 <log_0>
			tx_free(tx);
   1a006:	4620      	mov	r0, r4
   1a008:	f7ff febc 	bl	19d84 <tx_free>
   1a00c:	e7cb      	b.n	19fa6 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   1a00e:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1a010:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1a014:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1a016:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1a018:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1a01c:	4631      	mov	r1, r6
   1a01e:	f002 fe79 	bl	1cd14 <net_buf_put>
	return 0;
   1a022:	2000      	movs	r0, #0
   1a024:	e7e0      	b.n	19fe8 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   1a026:	614a      	str	r2, [r1, #20]
   1a028:	e7f6      	b.n	1a018 <bt_conn_send_cb+0x98>
   1a02a:	bf00      	nop
   1a02c:	000364e0 	.word	0x000364e0
   1a030:	000364b0 	.word	0x000364b0
   1a034:	00039cf9 	.word	0x00039cf9
   1a038:	20015df0 	.word	0x20015df0
   1a03c:	20014ff8 	.word	0x20014ff8
   1a040:	00039d08 	.word	0x00039d08
   1a044:	00039d26 	.word	0x00039d26

0001a048 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   1a048:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a04a:	30c0      	adds	r0, #192	; 0xc0
   1a04c:	e8d0 3fef 	ldaex	r3, [r0]
   1a050:	1e5a      	subs	r2, r3, #1
   1a052:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1a056:	2900      	cmp	r1, #0
   1a058:	d1f8      	bne.n	1a04c <bt_conn_unref+0x4>
	atomic_val_t old = atomic_dec(&conn->ref);

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   1a05a:	2b00      	cmp	r3, #0
   1a05c:	dc10      	bgt.n	1a080 <bt_conn_unref+0x38>
   1a05e:	f240 7361 	movw	r3, #1889	; 0x761
   1a062:	4908      	ldr	r1, [pc, #32]	; (1a084 <bt_conn_unref+0x3c>)
   1a064:	4a08      	ldr	r2, [pc, #32]	; (1a088 <bt_conn_unref+0x40>)
   1a066:	4809      	ldr	r0, [pc, #36]	; (1a08c <bt_conn_unref+0x44>)
   1a068:	f013 fe8e 	bl	2dd88 <printk>
   1a06c:	4808      	ldr	r0, [pc, #32]	; (1a090 <bt_conn_unref+0x48>)
   1a06e:	f013 fe8b 	bl	2dd88 <printk>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
		bt_le_adv_resume();
	}
}
   1a072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   1a076:	f240 7161 	movw	r1, #1889	; 0x761
   1a07a:	4803      	ldr	r0, [pc, #12]	; (1a088 <bt_conn_unref+0x40>)
   1a07c:	f014 b96a 	b.w	2e354 <assert_post_action>
}
   1a080:	bd08      	pop	{r3, pc}
   1a082:	bf00      	nop
   1a084:	00039d4c 	.word	0x00039d4c
   1a088:	00039c1b 	.word	0x00039c1b
   1a08c:	00037f2c 	.word	0x00037f2c
   1a090:	00039d54 	.word	0x00039d54

0001a094 <bt_conn_lookup_handle>:
{
   1a094:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1a096:	2101      	movs	r1, #1
{
   1a098:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1a09a:	4803      	ldr	r0, [pc, #12]	; (1a0a8 <bt_conn_lookup_handle+0x14>)
   1a09c:	f016 fbf1 	bl	30882 <conn_lookup_handle>
}
   1a0a0:	2800      	cmp	r0, #0
   1a0a2:	bf38      	it	cc
   1a0a4:	2000      	movcc	r0, #0
   1a0a6:	bd08      	pop	{r3, pc}
   1a0a8:	200154d8 	.word	0x200154d8

0001a0ac <bt_conn_set_state>:
{
   1a0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   1a0b0:	7a86      	ldrb	r6, [r0, #10]
{
   1a0b2:	4604      	mov	r4, r0
	if (conn->state == state) {
   1a0b4:	428e      	cmp	r6, r1
{
   1a0b6:	460d      	mov	r5, r1
	if (conn->state == state) {
   1a0b8:	d115      	bne.n	1a0e6 <bt_conn_set_state+0x3a>
   1a0ba:	4b73      	ldr	r3, [pc, #460]	; (1a288 <bt_conn_set_state+0x1dc>)
   1a0bc:	4a73      	ldr	r2, [pc, #460]	; (1a28c <bt_conn_set_state+0x1e0>)
   1a0be:	2e08      	cmp	r6, #8
   1a0c0:	eba2 0203 	sub.w	r2, r2, r3
   1a0c4:	bf98      	it	ls
   1a0c6:	4b72      	ldrls	r3, [pc, #456]	; (1a290 <bt_conn_set_state+0x1e4>)
   1a0c8:	ea4f 02d2 	mov.w	r2, r2, lsr #3
		BT_WARN("no transition %s", state2str(state));
   1a0cc:	ea4f 1282 	mov.w	r2, r2, lsl #6
   1a0d0:	bf94      	ite	ls
   1a0d2:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   1a0d6:	496f      	ldrhi	r1, [pc, #444]	; (1a294 <bt_conn_set_state+0x1e8>)
   1a0d8:	486f      	ldr	r0, [pc, #444]	; (1a298 <bt_conn_set_state+0x1ec>)
   1a0da:	f042 0202 	orr.w	r2, r2, #2
}
   1a0de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
   1a0e2:	f014 b992 	b.w	2e40a <log_1>
	conn->state = state;
   1a0e6:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1a0e8:	b166      	cbz	r6, 1a104 <bt_conn_set_state+0x58>
   1a0ea:	2e06      	cmp	r6, #6
   1a0ec:	d00d      	beq.n	1a10a <bt_conn_set_state+0x5e>
	switch (conn->state) {
   1a0ee:	7aa3      	ldrb	r3, [r4, #10]
   1a0f0:	2b08      	cmp	r3, #8
   1a0f2:	f200 80be 	bhi.w	1a272 <bt_conn_set_state+0x1c6>
   1a0f6:	e8df f003 	tbb	[pc, r3]
   1a0fa:	0f36      	.short	0x0f36
   1a0fc:	34343434 	.word	0x34343434
   1a100:	267f      	.short	0x267f
   1a102:	34          	.byte	0x34
   1a103:	00          	.byte	0x00
		bt_conn_ref(conn);
   1a104:	f016 fba6 	bl	30854 <bt_conn_ref>
		break;
   1a108:	e7f1      	b.n	1a0ee <bt_conn_set_state+0x42>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a10a:	7883      	ldrb	r3, [r0, #2]
   1a10c:	2b01      	cmp	r3, #1
   1a10e:	d1ee      	bne.n	1a0ee <bt_conn_set_state+0x42>
			k_work_cancel_delayable(&conn->deferred_work);
   1a110:	3060      	adds	r0, #96	; 0x60
   1a112:	f010 f927 	bl	2a364 <k_work_cancel_delayable>
   1a116:	e7ea      	b.n	1a0ee <bt_conn_set_state+0x42>
		tx->pending_no_cb = 0U;
   1a118:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   1a11a:	4d60      	ldr	r5, [pc, #384]	; (1a29c <bt_conn_set_state+0x1f0>)
	__asm__ volatile(
   1a11c:	f04f 0320 	mov.w	r3, #32
   1a120:	f3ef 8211 	mrs	r2, BASEPRI
   1a124:	f383 8811 	msr	BASEPRI, r3
   1a128:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1a12c:	69e3      	ldr	r3, [r4, #28]
   1a12e:	2b00      	cmp	r3, #0
   1a130:	d07f      	beq.n	1a232 <bt_conn_set_state+0x186>
			conn->pending_no_cb--;
   1a132:	3b01      	subs	r3, #1
   1a134:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1a136:	f382 8811 	msr	BASEPRI, r2
   1a13a:	f3bf 8f6f 	isb	sy
   1a13e:	4628      	mov	r0, r5
   1a140:	f00f fc0e 	bl	29960 <z_impl_k_sem_give>
}
   1a144:	e7ea      	b.n	1a11c <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a146:	78a3      	ldrb	r3, [r4, #2]
   1a148:	2b04      	cmp	r3, #4
   1a14a:	d00a      	beq.n	1a162 <bt_conn_set_state+0xb6>
	z_impl_k_queue_init(queue);
   1a14c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1a150:	f01b f886 	bl	35260 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1a154:	2100      	movs	r1, #0
   1a156:	4852      	ldr	r0, [pc, #328]	; (1a2a0 <bt_conn_set_state+0x1f4>)
   1a158:	f012 fb68 	bl	2c82c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1a15c:	2300      	movs	r3, #0
	list->tail = NULL;
   1a15e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   1a162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a166:	78a3      	ldrb	r3, [r4, #2]
   1a168:	2b04      	cmp	r3, #4
   1a16a:	d104      	bne.n	1a176 <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
   1a16c:	4620      	mov	r0, r4
}
   1a16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   1a172:	f7ff bf69 	b.w	1a048 <bt_conn_unref>
		switch (old_state) {
   1a176:	2e08      	cmp	r6, #8
   1a178:	d8f3      	bhi.n	1a162 <bt_conn_set_state+0xb6>
   1a17a:	a301      	add	r3, pc, #4	; (adr r3, 1a180 <bt_conn_set_state+0xd4>)
   1a17c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1a180:	0001a1e5 	.word	0x0001a1e5
   1a184:	0001a1a5 	.word	0x0001a1a5
   1a188:	0001a1d7 	.word	0x0001a1d7
   1a18c:	0001a16d 	.word	0x0001a16d
   1a190:	0001a16d 	.word	0x0001a16d
   1a194:	0001a1d7 	.word	0x0001a1d7
   1a198:	0001a1d7 	.word	0x0001a1d7
   1a19c:	0001a1e5 	.word	0x0001a1e5
   1a1a0:	0001a1e5 	.word	0x0001a1e5
			tx_notify(conn);
   1a1a4:	4620      	mov	r0, r4
   1a1a6:	f016 fafe 	bl	307a6 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1a1aa:	78a3      	ldrb	r3, [r4, #2]
   1a1ac:	2b01      	cmp	r3, #1
   1a1ae:	d103      	bne.n	1a1b8 <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
   1a1b0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1a1b4:	f010 f8d6 	bl	2a364 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a1b8:	3404      	adds	r4, #4
   1a1ba:	e8d4 3fef 	ldaex	r3, [r4]
   1a1be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a1c2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1a1c6:	2a00      	cmp	r2, #0
   1a1c8:	d1f7      	bne.n	1a1ba <bt_conn_set_state+0x10e>
}
   1a1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a1ce:	2100      	movs	r1, #0
   1a1d0:	4833      	ldr	r0, [pc, #204]	; (1a2a0 <bt_conn_set_state+0x1f4>)
   1a1d2:	f012 bb2b 	b.w	2c82c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1a1d6:	7a63      	ldrb	r3, [r4, #9]
   1a1d8:	2b00      	cmp	r3, #0
   1a1da:	d0c7      	beq.n	1a16c <bt_conn_set_state+0xc0>
				notify_connected(conn);
   1a1dc:	4620      	mov	r0, r4
   1a1de:	f7ff fddb 	bl	19d98 <notify_connected>
   1a1e2:	e7c3      	b.n	1a16c <bt_conn_set_state+0xc0>
   1a1e4:	4a29      	ldr	r2, [pc, #164]	; (1a28c <bt_conn_set_state+0x1e0>)
   1a1e6:	4b28      	ldr	r3, [pc, #160]	; (1a288 <bt_conn_set_state+0x1dc>)
			BT_WARN("Invalid (%u) old state", state);
   1a1e8:	4629      	mov	r1, r5
   1a1ea:	1ad2      	subs	r2, r2, r3
   1a1ec:	08d2      	lsrs	r2, r2, #3
   1a1ee:	0192      	lsls	r2, r2, #6
   1a1f0:	482c      	ldr	r0, [pc, #176]	; (1a2a4 <bt_conn_set_state+0x1f8>)
   1a1f2:	f042 0202 	orr.w	r2, r2, #2
   1a1f6:	e772      	b.n	1a0de <bt_conn_set_state+0x32>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a1f8:	78a3      	ldrb	r3, [r4, #2]
   1a1fa:	2b01      	cmp	r3, #1
   1a1fc:	d1b1      	bne.n	1a162 <bt_conn_set_state+0xb6>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1a1fe:	210a      	movs	r1, #10
   1a200:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1a204:	f240 36e7 	movw	r6, #999	; 0x3e7
   1a208:	2700      	movs	r7, #0
   1a20a:	4b27      	ldr	r3, [pc, #156]	; (1a2a8 <bt_conn_set_state+0x1fc>)
   1a20c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a210:	8a9b      	ldrh	r3, [r3, #20]
   1a212:	4359      	muls	r1, r3
   1a214:	fbc0 6701 	smlal	r6, r7, r0, r1
   1a218:	2300      	movs	r3, #0
   1a21a:	4630      	mov	r0, r6
   1a21c:	4639      	mov	r1, r7
   1a21e:	f7f6 ffe7 	bl	111f0 <__aeabi_uldivmod>
   1a222:	4602      	mov	r2, r0
   1a224:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1a226:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   1a22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   1a22e:	f010 b817 	b.w	2a260 <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   1a232:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1a234:	b128      	cbz	r0, 1a242 <bt_conn_set_state+0x196>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a236:	69a1      	ldr	r1, [r4, #24]
   1a238:	6803      	ldr	r3, [r0, #0]
   1a23a:	4288      	cmp	r0, r1
	list->head = node;
   1a23c:	6163      	str	r3, [r4, #20]
	list->tail = node;
   1a23e:	bf08      	it	eq
   1a240:	61a3      	streq	r3, [r4, #24]
   1a242:	f382 8811 	msr	BASEPRI, r2
   1a246:	f3bf 8f6f 	isb	sy
		if (!node) {
   1a24a:	2800      	cmp	r0, #0
   1a24c:	d089      	beq.n	1a162 <bt_conn_set_state+0xb6>
	__asm__ volatile(
   1a24e:	f04f 0220 	mov.w	r2, #32
   1a252:	f3ef 8311 	mrs	r3, BASEPRI
   1a256:	f382 8811 	msr	BASEPRI, r2
   1a25a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1a25e:	68c2      	ldr	r2, [r0, #12]
   1a260:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1a262:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   1a264:	f383 8811 	msr	BASEPRI, r3
   1a268:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   1a26c:	f7ff fd8a 	bl	19d84 <tx_free>
   1a270:	e765      	b.n	1a13e <bt_conn_set_state+0x92>
   1a272:	4a06      	ldr	r2, [pc, #24]	; (1a28c <bt_conn_set_state+0x1e0>)
   1a274:	4b04      	ldr	r3, [pc, #16]	; (1a288 <bt_conn_set_state+0x1dc>)
		BT_WARN("no valid (%u) state was set", state);
   1a276:	4629      	mov	r1, r5
   1a278:	1ad2      	subs	r2, r2, r3
   1a27a:	08d2      	lsrs	r2, r2, #3
   1a27c:	0192      	lsls	r2, r2, #6
   1a27e:	480b      	ldr	r0, [pc, #44]	; (1a2ac <bt_conn_set_state+0x200>)
   1a280:	f042 0202 	orr.w	r2, r2, #2
   1a284:	e72b      	b.n	1a0de <bt_conn_set_state+0x32>
   1a286:	bf00      	nop
   1a288:	000364b0 	.word	0x000364b0
   1a28c:	000364e0 	.word	0x000364e0
   1a290:	00036b24 	.word	0x00036b24
   1a294:	00039d72 	.word	0x00039d72
   1a298:	00039d7c 	.word	0x00039d7c
   1a29c:	200145d0 	.word	0x200145d0
   1a2a0:	20014774 	.word	0x20014774
   1a2a4:	00039d8d 	.word	0x00039d8d
   1a2a8:	20014500 	.word	0x20014500
   1a2ac:	00039da4 	.word	0x00039da4

0001a2b0 <bt_conn_lookup_addr_le>:
{
   1a2b0:	b570      	push	{r4, r5, r6, lr}
   1a2b2:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a2b4:	480c      	ldr	r0, [pc, #48]	; (1a2e8 <bt_conn_lookup_addr_le+0x38>)
{
   1a2b6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a2b8:	f016 facc 	bl	30854 <bt_conn_ref>
		if (!conn) {
   1a2bc:	4604      	mov	r4, r0
   1a2be:	b128      	cbz	r0, 1a2cc <bt_conn_lookup_addr_le+0x1c>
		if (conn->type != BT_CONN_TYPE_LE) {
   1a2c0:	7883      	ldrb	r3, [r0, #2]
   1a2c2:	2b01      	cmp	r3, #1
   1a2c4:	d004      	beq.n	1a2d0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1a2c6:	f7ff febf 	bl	1a048 <bt_conn_unref>
	return NULL;
   1a2ca:	2400      	movs	r4, #0
}
   1a2cc:	4620      	mov	r0, r4
   1a2ce:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a2d0:	4629      	mov	r1, r5
   1a2d2:	4632      	mov	r2, r6
   1a2d4:	f016 fa9e 	bl	30814 <bt_conn_is_peer_addr_le>
   1a2d8:	4605      	mov	r5, r0
   1a2da:	2800      	cmp	r0, #0
   1a2dc:	d1f6      	bne.n	1a2cc <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1a2de:	4620      	mov	r0, r4
   1a2e0:	f7ff feb2 	bl	1a048 <bt_conn_unref>
	return NULL;
   1a2e4:	462c      	mov	r4, r5
			continue;
   1a2e6:	e7f1      	b.n	1a2cc <bt_conn_lookup_addr_le+0x1c>
   1a2e8:	200154d8 	.word	0x200154d8

0001a2ec <bt_conn_lookup_state_le>:
{
   1a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2ee:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a2f0:	480e      	ldr	r0, [pc, #56]	; (1a32c <bt_conn_lookup_state_le+0x40>)
{
   1a2f2:	460e      	mov	r6, r1
   1a2f4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a2f6:	f016 faad 	bl	30854 <bt_conn_ref>
		if (!conn) {
   1a2fa:	4604      	mov	r4, r0
   1a2fc:	b1a0      	cbz	r0, 1a328 <bt_conn_lookup_state_le+0x3c>
		if (conn->type != BT_CONN_TYPE_LE) {
   1a2fe:	7883      	ldrb	r3, [r0, #2]
   1a300:	2b01      	cmp	r3, #1
   1a302:	d003      	beq.n	1a30c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
   1a304:	f7ff fea0 	bl	1a048 <bt_conn_unref>
	return NULL;
   1a308:	2400      	movs	r4, #0
			continue;
   1a30a:	e00d      	b.n	1a328 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a30c:	b136      	cbz	r6, 1a31c <bt_conn_lookup_state_le+0x30>
   1a30e:	4632      	mov	r2, r6
   1a310:	4629      	mov	r1, r5
   1a312:	f016 fa7f 	bl	30814 <bt_conn_is_peer_addr_le>
   1a316:	b908      	cbnz	r0, 1a31c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1a318:	4620      	mov	r0, r4
   1a31a:	e7f3      	b.n	1a304 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1a31c:	7aa3      	ldrb	r3, [r4, #10]
   1a31e:	42bb      	cmp	r3, r7
   1a320:	d1fa      	bne.n	1a318 <bt_conn_lookup_state_le+0x2c>
   1a322:	7a23      	ldrb	r3, [r4, #8]
   1a324:	42ab      	cmp	r3, r5
   1a326:	d1f7      	bne.n	1a318 <bt_conn_lookup_state_le+0x2c>
}
   1a328:	4620      	mov	r0, r4
   1a32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a32c:	200154d8 	.word	0x200154d8

0001a330 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   1a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a332:	4604      	mov	r4, r0
   1a334:	460d      	mov	r5, r1
   1a336:	4617      	mov	r7, r2
   1a338:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   1a33a:	f01a ff6a 	bl	35212 <k_is_in_isr>
   1a33e:	b158      	cbz	r0, 1a358 <bt_conn_create_pdu_timeout+0x28>
   1a340:	4913      	ldr	r1, [pc, #76]	; (1a390 <bt_conn_create_pdu_timeout+0x60>)
   1a342:	4814      	ldr	r0, [pc, #80]	; (1a394 <bt_conn_create_pdu_timeout+0x64>)
   1a344:	f640 13e1 	movw	r3, #2529	; 0x9e1
   1a348:	4a13      	ldr	r2, [pc, #76]	; (1a398 <bt_conn_create_pdu_timeout+0x68>)
   1a34a:	f013 fd1d 	bl	2dd88 <printk>
   1a34e:	f640 11e1 	movw	r1, #2529	; 0x9e1
   1a352:	4811      	ldr	r0, [pc, #68]	; (1a398 <bt_conn_create_pdu_timeout+0x68>)
   1a354:	f013 fffe 	bl	2e354 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1a358:	4810      	ldr	r0, [pc, #64]	; (1a39c <bt_conn_create_pdu_timeout+0x6c>)
   1a35a:	463a      	mov	r2, r7
   1a35c:	2c00      	cmp	r4, #0
   1a35e:	bf18      	it	ne
   1a360:	4620      	movne	r0, r4
   1a362:	4633      	mov	r3, r6
   1a364:	f017 f98a 	bl	3167c <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   1a368:	4604      	mov	r4, r0
   1a36a:	b958      	cbnz	r0, 1a384 <bt_conn_create_pdu_timeout+0x54>
   1a36c:	490c      	ldr	r1, [pc, #48]	; (1a3a0 <bt_conn_create_pdu_timeout+0x70>)
   1a36e:	4b0d      	ldr	r3, [pc, #52]	; (1a3a4 <bt_conn_create_pdu_timeout+0x74>)
		BT_WARN("Unable to allocate buffer within timeout");
   1a370:	480d      	ldr	r0, [pc, #52]	; (1a3a8 <bt_conn_create_pdu_timeout+0x78>)
   1a372:	1ac9      	subs	r1, r1, r3
   1a374:	08c9      	lsrs	r1, r1, #3
   1a376:	0189      	lsls	r1, r1, #6
   1a378:	f041 0102 	orr.w	r1, r1, #2
   1a37c:	f014 f838 	bl	2e3f0 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   1a380:	4620      	mov	r0, r4
   1a382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1a384:	1d29      	adds	r1, r5, #4
   1a386:	3008      	adds	r0, #8
   1a388:	f002 fc9a 	bl	1ccc0 <net_buf_simple_reserve>
	return buf;
   1a38c:	e7f8      	b.n	1a380 <bt_conn_create_pdu_timeout+0x50>
   1a38e:	bf00      	nop
   1a390:	00039dc0 	.word	0x00039dc0
   1a394:	00037f2c 	.word	0x00037f2c
   1a398:	00039c1b 	.word	0x00039c1b
   1a39c:	20015040 	.word	0x20015040
   1a3a0:	000364e0 	.word	0x000364e0
   1a3a4:	000364b0 	.word	0x000364b0
   1a3a8:	00039dcf 	.word	0x00039dcf

0001a3ac <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   1a3ac:	4a0c      	ldr	r2, [pc, #48]	; (1a3e0 <bt_conn_index+0x34>)
{
   1a3ae:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   1a3b0:	1a84      	subs	r4, r0, r2
   1a3b2:	10e3      	asrs	r3, r4, #3
   1a3b4:	4c0b      	ldr	r4, [pc, #44]	; (1a3e4 <bt_conn_index+0x38>)
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   1a3b6:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1a3b8:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   1a3bc:	d00e      	beq.n	1a3dc <bt_conn_index+0x30>
   1a3be:	490a      	ldr	r1, [pc, #40]	; (1a3e8 <bt_conn_index+0x3c>)
   1a3c0:	f640 2388 	movw	r3, #2696	; 0xa88
   1a3c4:	4a09      	ldr	r2, [pc, #36]	; (1a3ec <bt_conn_index+0x40>)
   1a3c6:	480a      	ldr	r0, [pc, #40]	; (1a3f0 <bt_conn_index+0x44>)
   1a3c8:	f013 fcde 	bl	2dd88 <printk>
   1a3cc:	4809      	ldr	r0, [pc, #36]	; (1a3f4 <bt_conn_index+0x48>)
   1a3ce:	f013 fcdb 	bl	2dd88 <printk>
   1a3d2:	f640 2188 	movw	r1, #2696	; 0xa88
   1a3d6:	4805      	ldr	r0, [pc, #20]	; (1a3ec <bt_conn_index+0x40>)
   1a3d8:	f013 ffbc 	bl	2e354 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   1a3dc:	b2e0      	uxtb	r0, r4
   1a3de:	bd10      	pop	{r4, pc}
   1a3e0:	200154d8 	.word	0x200154d8
   1a3e4:	c28f5c29 	.word	0xc28f5c29
   1a3e8:	00039df8 	.word	0x00039df8
   1a3ec:	00039c1b 	.word	0x00039c1b
   1a3f0:	00037f2c 	.word	0x00037f2c
   1a3f4:	00039ebf 	.word	0x00039ebf

0001a3f8 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1a3f8:	b910      	cbnz	r0, 1a400 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1a3fa:	4802      	ldr	r0, [pc, #8]	; (1a404 <bt_conn_lookup_index+0xc>)
   1a3fc:	f016 ba2a 	b.w	30854 <bt_conn_ref>
}
   1a400:	2000      	movs	r0, #0
   1a402:	4770      	bx	lr
   1a404:	200154d8 	.word	0x200154d8

0001a408 <bt_conn_init>:

int bt_conn_init(void)
{
   1a408:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1a40a:	4914      	ldr	r1, [pc, #80]	; (1a45c <bt_conn_init+0x54>)
   1a40c:	4814      	ldr	r0, [pc, #80]	; (1a460 <bt_conn_init+0x58>)
   1a40e:	f01a ff34 	bl	3527a <k_queue_append>
   1a412:	4914      	ldr	r1, [pc, #80]	; (1a464 <bt_conn_init+0x5c>)
   1a414:	4812      	ldr	r0, [pc, #72]	; (1a460 <bt_conn_init+0x58>)
   1a416:	f01a ff30 	bl	3527a <k_queue_append>
   1a41a:	4913      	ldr	r1, [pc, #76]	; (1a468 <bt_conn_init+0x60>)
   1a41c:	4810      	ldr	r0, [pc, #64]	; (1a460 <bt_conn_init+0x58>)
   1a41e:	f01a ff2c 	bl	3527a <k_queue_append>
	}

	bt_att_init();
   1a422:	f016 fde8 	bl	30ff6 <bt_att_init>

	err = bt_smp_init();
   1a426:	f017 f926 	bl	31676 <bt_smp_init>
	if (err) {
   1a42a:	4605      	mov	r5, r0
   1a42c:	b998      	cbnz	r0, 1a456 <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   1a42e:	f016 fb07 	bl	30a40 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a432:	480e      	ldr	r0, [pc, #56]	; (1a46c <bt_conn_init+0x64>)
   1a434:	f016 fa0e 	bl	30854 <bt_conn_ref>

			if (!conn) {
   1a438:	4604      	mov	r4, r0
   1a43a:	b160      	cbz	r0, 1a456 <bt_conn_init+0x4e>
   1a43c:	3004      	adds	r0, #4
   1a43e:	f016 f9af 	bl	307a0 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   1a442:	07c3      	lsls	r3, r0, #31
   1a444:	d504      	bpl.n	1a450 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1a446:	2102      	movs	r1, #2
   1a448:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   1a44a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1a44c:	f7ff fe2e 	bl	1a0ac <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   1a450:	4620      	mov	r0, r4
   1a452:	f7ff fdf9 	bl	1a048 <bt_conn_unref>
		}
	}

	return 0;
}
   1a456:	4628      	mov	r0, r5
   1a458:	bd38      	pop	{r3, r4, r5, pc}
   1a45a:	bf00      	nop
   1a45c:	200161a0 	.word	0x200161a0
   1a460:	20014ff8 	.word	0x20014ff8
   1a464:	200161b0 	.word	0x200161b0
   1a468:	200161c0 	.word	0x200161c0
   1a46c:	200154d8 	.word	0x200154d8

0001a470 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1a470:	4a0b      	ldr	r2, [pc, #44]	; (1a4a0 <l2cap_accept+0x30>)
{
   1a472:	b508      	push	{r3, lr}
   1a474:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1a476:	6810      	ldr	r0, [r2, #0]
   1a478:	b918      	cbnz	r0, 1a482 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1a47a:	4b0a      	ldr	r3, [pc, #40]	; (1a4a4 <l2cap_accept+0x34>)
   1a47c:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   1a47e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1a480:	bd08      	pop	{r3, pc}
   1a482:	4909      	ldr	r1, [pc, #36]	; (1a4a8 <l2cap_accept+0x38>)
   1a484:	4a09      	ldr	r2, [pc, #36]	; (1a4ac <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   1a486:	480a      	ldr	r0, [pc, #40]	; (1a4b0 <l2cap_accept+0x40>)
   1a488:	1a52      	subs	r2, r2, r1
   1a48a:	08d2      	lsrs	r2, r2, #3
   1a48c:	0192      	lsls	r2, r2, #6
   1a48e:	4619      	mov	r1, r3
   1a490:	f042 0201 	orr.w	r2, r2, #1
   1a494:	f013 ffb9 	bl	2e40a <log_1>
	return -ENOMEM;
   1a498:	f06f 000b 	mvn.w	r0, #11
   1a49c:	e7f0      	b.n	1a480 <l2cap_accept+0x10>
   1a49e:	bf00      	nop
   1a4a0:	200155a0 	.word	0x200155a0
   1a4a4:	00036b68 	.word	0x00036b68
   1a4a8:	000364b0 	.word	0x000364b0
   1a4ac:	00036518 	.word	0x00036518
   1a4b0:	00039f36 	.word	0x00039f36

0001a4b4 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4b6:	4605      	mov	r5, r0
   1a4b8:	460f      	mov	r7, r1
   1a4ba:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1a4bc:	2300      	movs	r3, #0
   1a4be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a4c2:	2104      	movs	r1, #4
   1a4c4:	2000      	movs	r0, #0
   1a4c6:	f7ff ff33 	bl	1a330 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1a4ca:	4604      	mov	r4, r0
   1a4cc:	b960      	cbnz	r0, 1a4e8 <l2cap_create_le_sig_pdu.isra.0+0x34>
   1a4ce:	4a0a      	ldr	r2, [pc, #40]	; (1a4f8 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   1a4d0:	4b0a      	ldr	r3, [pc, #40]	; (1a4fc <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1a4d2:	4629      	mov	r1, r5
   1a4d4:	1ad2      	subs	r2, r2, r3
   1a4d6:	08d2      	lsrs	r2, r2, #3
   1a4d8:	0192      	lsls	r2, r2, #6
   1a4da:	4809      	ldr	r0, [pc, #36]	; (1a500 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1a4dc:	f042 0201 	orr.w	r2, r2, #1
   1a4e0:	f013 ff93 	bl	2e40a <log_1>
}
   1a4e4:	4620      	mov	r0, r4
   1a4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1a4e8:	2104      	movs	r1, #4
   1a4ea:	3008      	adds	r0, #8
   1a4ec:	f002 fd76 	bl	1cfdc <net_buf_simple_add>
	hdr->code = code;
   1a4f0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1a4f2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1a4f4:	8046      	strh	r6, [r0, #2]
	return buf;
   1a4f6:	e7f5      	b.n	1a4e4 <l2cap_create_le_sig_pdu.isra.0+0x30>
   1a4f8:	00036518 	.word	0x00036518
   1a4fc:	000364b0 	.word	0x000364b0
   1a500:	00039f5d 	.word	0x00039f5d

0001a504 <l2cap_rtx_timeout>:
{
   1a504:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   1a506:	4604      	mov	r4, r0
   1a508:	4b0a      	ldr	r3, [pc, #40]	; (1a534 <l2cap_rtx_timeout+0x30>)
   1a50a:	4a0b      	ldr	r2, [pc, #44]	; (1a538 <l2cap_rtx_timeout+0x34>)
   1a50c:	f854 5d10 	ldr.w	r5, [r4, #-16]!
   1a510:	1ad2      	subs	r2, r2, r3
   1a512:	08d2      	lsrs	r2, r2, #3
	BT_ERR("chan %p timeout", chan);
   1a514:	0192      	lsls	r2, r2, #6
   1a516:	4621      	mov	r1, r4
   1a518:	4808      	ldr	r0, [pc, #32]	; (1a53c <l2cap_rtx_timeout+0x38>)
   1a51a:	f042 0201 	orr.w	r2, r2, #1
   1a51e:	f013 ff74 	bl	2e40a <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1a522:	4628      	mov	r0, r5
   1a524:	4621      	mov	r1, r4
   1a526:	f016 f9fa 	bl	3091e <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1a52a:	4620      	mov	r0, r4
}
   1a52c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   1a530:	f016 ba17 	b.w	30962 <bt_l2cap_chan_del>
   1a534:	000364b0 	.word	0x000364b0
   1a538:	00036518 	.word	0x00036518
   1a53c:	00039f85 	.word	0x00039f85

0001a540 <bt_l2cap_connected>:
{
   1a540:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a544:	4f2e      	ldr	r7, [pc, #184]	; (1a600 <bt_l2cap_connected+0xc0>)
{
   1a546:	4604      	mov	r4, r0
   1a548:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a54a:	4e2e      	ldr	r6, [pc, #184]	; (1a604 <bt_l2cap_connected+0xc4>)
   1a54c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1a618 <bt_l2cap_connected+0xd8>
   1a550:	42be      	cmp	r6, r7
   1a552:	d90e      	bls.n	1a572 <bt_l2cap_connected+0x32>
   1a554:	492c      	ldr	r1, [pc, #176]	; (1a608 <bt_l2cap_connected+0xc8>)
   1a556:	f240 1365 	movw	r3, #357	; 0x165
   1a55a:	4642      	mov	r2, r8
   1a55c:	482b      	ldr	r0, [pc, #172]	; (1a60c <bt_l2cap_connected+0xcc>)
   1a55e:	f013 fc13 	bl	2dd88 <printk>
   1a562:	482b      	ldr	r0, [pc, #172]	; (1a610 <bt_l2cap_connected+0xd0>)
   1a564:	f013 fc10 	bl	2dd88 <printk>
   1a568:	f240 1165 	movw	r1, #357	; 0x165
   1a56c:	4640      	mov	r0, r8
   1a56e:	f013 fef1 	bl	2e354 <assert_post_action>
   1a572:	454e      	cmp	r6, r9
   1a574:	d302      	bcc.n	1a57c <bt_l2cap_connected+0x3c>
}
   1a576:	b002      	add	sp, #8
   1a578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1a57c:	4620      	mov	r0, r4
   1a57e:	6873      	ldr	r3, [r6, #4]
   1a580:	a901      	add	r1, sp, #4
   1a582:	4798      	blx	r3
   1a584:	2800      	cmp	r0, #0
   1a586:	db35      	blt.n	1a5f4 <bt_l2cap_connected+0xb4>
		ch = BT_L2CAP_LE_CHAN(chan);
   1a588:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1a58a:	8833      	ldrh	r3, [r6, #0]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1a58c:	4921      	ldr	r1, [pc, #132]	; (1a614 <bt_l2cap_connected+0xd4>)
		ch->rx.cid = fchan->cid;
   1a58e:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1a592:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1a596:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1a59a:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1a59e:	f00f fdb7 	bl	2a110 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a5a2:	2200      	movs	r2, #0
   1a5a4:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1a5a8:	e8d3 1fef 	ldaex	r1, [r3]
   1a5ac:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1a5b0:	2800      	cmp	r0, #0
   1a5b2:	d1f9      	bne.n	1a5a8 <bt_l2cap_connected+0x68>
	parent->next = child;
   1a5b4:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1a5b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1a5b8:	f105 0308 	add.w	r3, r5, #8
   1a5bc:	b9e2      	cbnz	r2, 1a5f8 <bt_l2cap_connected+0xb8>
	list->head = node;
   1a5be:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   1a5c2:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1a5c4:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1a5c6:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1a5c8:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   1a5cc:	681b      	ldr	r3, [r3, #0]
   1a5ce:	b103      	cbz	r3, 1a5d2 <bt_l2cap_connected+0x92>
			chan->ops->connected(chan);
   1a5d0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a5d2:	9b01      	ldr	r3, [sp, #4]
   1a5d4:	3368      	adds	r3, #104	; 0x68
   1a5d6:	e8d3 2fef 	ldaex	r2, [r3]
   1a5da:	f042 0201 	orr.w	r2, r2, #1
   1a5de:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1a5e2:	2900      	cmp	r1, #0
   1a5e4:	d1f7      	bne.n	1a5d6 <bt_l2cap_connected+0x96>
		if (chan->ops->status) {
   1a5e6:	9801      	ldr	r0, [sp, #4]
   1a5e8:	6843      	ldr	r3, [r0, #4]
   1a5ea:	699b      	ldr	r3, [r3, #24]
   1a5ec:	b113      	cbz	r3, 1a5f4 <bt_l2cap_connected+0xb4>
			chan->ops->status(chan, chan->status);
   1a5ee:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1a5f2:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a5f4:	360c      	adds	r6, #12
   1a5f6:	e7ab      	b.n	1a550 <bt_l2cap_connected+0x10>
	parent->next = child;
   1a5f8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a5fa:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1a5fc:	e7e1      	b.n	1a5c2 <bt_l2cap_connected+0x82>
   1a5fe:	bf00      	nop
   1a600:	0003648c 	.word	0x0003648c
   1a604:	00036468 	.word	0x00036468
   1a608:	00039fc6 	.word	0x00039fc6
   1a60c:	00037f2c 	.word	0x00037f2c
   1a610:	00038636 	.word	0x00038636
   1a614:	0001a505 	.word	0x0001a505
   1a618:	00039f95 	.word	0x00039f95

0001a61c <l2cap_recv>:
{
   1a61c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1a61e:	898b      	ldrh	r3, [r1, #12]
{
   1a620:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1a622:	2b03      	cmp	r3, #3
{
   1a624:	460d      	mov	r5, r1
   1a626:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1a628:	d80a      	bhi.n	1a640 <l2cap_recv+0x24>
   1a62a:	494f      	ldr	r1, [pc, #316]	; (1a768 <l2cap_recv+0x14c>)
   1a62c:	4b4f      	ldr	r3, [pc, #316]	; (1a76c <l2cap_recv+0x150>)
		BT_ERR("Too small L2CAP signaling PDU");
   1a62e:	4850      	ldr	r0, [pc, #320]	; (1a770 <l2cap_recv+0x154>)
   1a630:	1ac9      	subs	r1, r1, r3
   1a632:	08c9      	lsrs	r1, r1, #3
   1a634:	0189      	lsls	r1, r1, #6
   1a636:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a63a:	f013 fed9 	bl	2e3f0 <log_0>
		return 0;
   1a63e:	e013      	b.n	1a668 <l2cap_recv+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a640:	2104      	movs	r1, #4
   1a642:	f105 0008 	add.w	r0, r5, #8
   1a646:	f002 fca7 	bl	1cf98 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1a64a:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1a64c:	8842      	ldrh	r2, [r0, #2]
   1a64e:	4604      	mov	r4, r0
	if (buf->len != len) {
   1a650:	428a      	cmp	r2, r1
   1a652:	d00c      	beq.n	1a66e <l2cap_recv+0x52>
   1a654:	4845      	ldr	r0, [pc, #276]	; (1a76c <l2cap_recv+0x150>)
   1a656:	4b44      	ldr	r3, [pc, #272]	; (1a768 <l2cap_recv+0x14c>)
   1a658:	1a1b      	subs	r3, r3, r0
   1a65a:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a65c:	019b      	lsls	r3, r3, #6
   1a65e:	4845      	ldr	r0, [pc, #276]	; (1a774 <l2cap_recv+0x158>)
   1a660:	f043 0301 	orr.w	r3, r3, #1
   1a664:	f013 fee5 	bl	2e432 <log_2>
}
   1a668:	2000      	movs	r0, #0
   1a66a:	b005      	add	sp, #20
   1a66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1a66e:	7841      	ldrb	r1, [r0, #1]
   1a670:	b941      	cbnz	r1, 1a684 <l2cap_recv+0x68>
   1a672:	493d      	ldr	r1, [pc, #244]	; (1a768 <l2cap_recv+0x14c>)
   1a674:	4b3d      	ldr	r3, [pc, #244]	; (1a76c <l2cap_recv+0x150>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a676:	4840      	ldr	r0, [pc, #256]	; (1a778 <l2cap_recv+0x15c>)
   1a678:	1ac9      	subs	r1, r1, r3
   1a67a:	08c9      	lsrs	r1, r1, #3
   1a67c:	0189      	lsls	r1, r1, #6
   1a67e:	f041 0101 	orr.w	r1, r1, #1
   1a682:	e7da      	b.n	1a63a <l2cap_recv+0x1e>
	switch (hdr->code) {
   1a684:	7803      	ldrb	r3, [r0, #0]
   1a686:	2b12      	cmp	r3, #18
   1a688:	d01c      	beq.n	1a6c4 <l2cap_recv+0xa8>
   1a68a:	2b13      	cmp	r3, #19
   1a68c:	d00f      	beq.n	1a6ae <l2cap_recv+0x92>
   1a68e:	2b01      	cmp	r3, #1
   1a690:	d0ea      	beq.n	1a668 <l2cap_recv+0x4c>
   1a692:	4936      	ldr	r1, [pc, #216]	; (1a76c <l2cap_recv+0x150>)
   1a694:	4a34      	ldr	r2, [pc, #208]	; (1a768 <l2cap_recv+0x14c>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1a696:	4839      	ldr	r0, [pc, #228]	; (1a77c <l2cap_recv+0x160>)
   1a698:	1a52      	subs	r2, r2, r1
   1a69a:	08d2      	lsrs	r2, r2, #3
   1a69c:	0192      	lsls	r2, r2, #6
   1a69e:	4619      	mov	r1, r3
   1a6a0:	f042 0202 	orr.w	r2, r2, #2
   1a6a4:	f013 feb1 	bl	2e40a <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   1a6a8:	7861      	ldrb	r1, [r4, #1]
   1a6aa:	6830      	ldr	r0, [r6, #0]
   1a6ac:	e019      	b.n	1a6e2 <l2cap_recv+0xc6>
	if (buf->len < sizeof(*rsp)) {
   1a6ae:	2a01      	cmp	r2, #1
   1a6b0:	d8da      	bhi.n	1a668 <l2cap_recv+0x4c>
   1a6b2:	492d      	ldr	r1, [pc, #180]	; (1a768 <l2cap_recv+0x14c>)
   1a6b4:	4b2d      	ldr	r3, [pc, #180]	; (1a76c <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn param rsp");
   1a6b6:	4832      	ldr	r0, [pc, #200]	; (1a780 <l2cap_recv+0x164>)
   1a6b8:	1ac9      	subs	r1, r1, r3
   1a6ba:	08c9      	lsrs	r1, r1, #3
   1a6bc:	0189      	lsls	r1, r1, #6
   1a6be:	f041 0101 	orr.w	r1, r1, #1
   1a6c2:	e7ba      	b.n	1a63a <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
   1a6c4:	2a07      	cmp	r2, #7
   1a6c6:	d808      	bhi.n	1a6da <l2cap_recv+0xbe>
   1a6c8:	4927      	ldr	r1, [pc, #156]	; (1a768 <l2cap_recv+0x14c>)
   1a6ca:	4b28      	ldr	r3, [pc, #160]	; (1a76c <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn update param req");
   1a6cc:	482d      	ldr	r0, [pc, #180]	; (1a784 <l2cap_recv+0x168>)
   1a6ce:	1ac9      	subs	r1, r1, r3
   1a6d0:	08c9      	lsrs	r1, r1, #3
   1a6d2:	0189      	lsls	r1, r1, #6
   1a6d4:	f041 0101 	orr.w	r1, r1, #1
   1a6d8:	e7af      	b.n	1a63a <l2cap_recv+0x1e>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1a6da:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   1a6dc:	78f7      	ldrb	r7, [r6, #3]
   1a6de:	b11f      	cbz	r7, 1a6e8 <l2cap_recv+0xcc>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1a6e0:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   1a6e2:	f016 f96f 	bl	309c4 <l2cap_send_reject.constprop.0>
		break;
   1a6e6:	e7bf      	b.n	1a668 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1a6e8:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1a6ea:	7850      	ldrb	r0, [r2, #1]
   1a6ec:	7813      	ldrb	r3, [r2, #0]
   1a6ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a6f2:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1a6f6:	78d0      	ldrb	r0, [r2, #3]
   1a6f8:	7893      	ldrb	r3, [r2, #2]
   1a6fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a6fe:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1a702:	7950      	ldrb	r0, [r2, #5]
   1a704:	7913      	ldrb	r3, [r2, #4]
   1a706:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a70a:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1a70e:	7993      	ldrb	r3, [r2, #6]
   1a710:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1a712:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1a714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1a718:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1a71a:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1a71e:	f7ff fec9 	bl	1a4b4 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1a722:	4604      	mov	r4, r0
   1a724:	2800      	cmp	r0, #0
   1a726:	d09f      	beq.n	1a668 <l2cap_recv+0x4c>
	accepted = le_param_req(conn, &param);
   1a728:	a902      	add	r1, sp, #8
   1a72a:	4630      	mov	r0, r6
   1a72c:	f7ff fb7e 	bl	19e2c <le_param_req>
   1a730:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   1a732:	2102      	movs	r1, #2
   1a734:	f104 0008 	add.w	r0, r4, #8
   1a738:	f002 fc50 	bl	1cfdc <net_buf_simple_add>
	if (accepted) {
   1a73c:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1a740:	b2db      	uxtb	r3, r3
   1a742:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1a744:	4622      	mov	r2, r4
   1a746:	463b      	mov	r3, r7
   1a748:	2105      	movs	r1, #5
   1a74a:	4630      	mov	r0, r6
   1a74c:	9700      	str	r7, [sp, #0]
   1a74e:	f016 f920 	bl	30992 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1a752:	b110      	cbz	r0, 1a75a <l2cap_recv+0x13e>
		net_buf_unref(buf);
   1a754:	4620      	mov	r0, r4
   1a756:	f002 fb11 	bl	1cd7c <net_buf_unref>
	if (accepted) {
   1a75a:	2d00      	cmp	r5, #0
   1a75c:	d084      	beq.n	1a668 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
   1a75e:	4630      	mov	r0, r6
   1a760:	a902      	add	r1, sp, #8
   1a762:	f016 f8b0 	bl	308c6 <bt_conn_le_conn_update>
   1a766:	e77f      	b.n	1a668 <l2cap_recv+0x4c>
   1a768:	00036518 	.word	0x00036518
   1a76c:	000364b0 	.word	0x000364b0
   1a770:	00039fed 	.word	0x00039fed
   1a774:	0003a00b 	.word	0x0003a00b
   1a778:	0003a02c 	.word	0x0003a02c
   1a77c:	0003a08c 	.word	0x0003a08c
   1a780:	0003a04d 	.word	0x0003a04d
   1a784:	0003a069 	.word	0x0003a069

0001a788 <bt_l2cap_recv>:
{
   1a788:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1a78a:	898b      	ldrh	r3, [r1, #12]
{
   1a78c:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1a78e:	2b03      	cmp	r3, #3
{
   1a790:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a792:	d80e      	bhi.n	1a7b2 <bt_l2cap_recv+0x2a>
   1a794:	4914      	ldr	r1, [pc, #80]	; (1a7e8 <bt_l2cap_recv+0x60>)
   1a796:	4b15      	ldr	r3, [pc, #84]	; (1a7ec <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   1a798:	4815      	ldr	r0, [pc, #84]	; (1a7f0 <bt_l2cap_recv+0x68>)
   1a79a:	1ac9      	subs	r1, r1, r3
   1a79c:	08c9      	lsrs	r1, r1, #3
   1a79e:	0189      	lsls	r1, r1, #6
   1a7a0:	f041 0101 	orr.w	r1, r1, #1
   1a7a4:	f013 fe24 	bl	2e3f0 <log_0>
	net_buf_unref(buf);
   1a7a8:	4620      	mov	r0, r4
}
   1a7aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1a7ae:	f002 bae5 	b.w	1cd7c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a7b2:	2104      	movs	r1, #4
   1a7b4:	f104 0008 	add.w	r0, r4, #8
   1a7b8:	f002 fbee 	bl	1cf98 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a7bc:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a7be:	4628      	mov	r0, r5
   1a7c0:	f016 f92e 	bl	30a20 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a7c4:	b950      	cbnz	r0, 1a7dc <bt_l2cap_recv+0x54>
   1a7c6:	4b09      	ldr	r3, [pc, #36]	; (1a7ec <bt_l2cap_recv+0x64>)
   1a7c8:	4a07      	ldr	r2, [pc, #28]	; (1a7e8 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a7ca:	480a      	ldr	r0, [pc, #40]	; (1a7f4 <bt_l2cap_recv+0x6c>)
   1a7cc:	1ad2      	subs	r2, r2, r3
   1a7ce:	08d2      	lsrs	r2, r2, #3
   1a7d0:	0192      	lsls	r2, r2, #6
   1a7d2:	f042 0202 	orr.w	r2, r2, #2
   1a7d6:	f013 fe18 	bl	2e40a <log_1>
		net_buf_unref(buf);
   1a7da:	e7e5      	b.n	1a7a8 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   1a7dc:	6843      	ldr	r3, [r0, #4]
   1a7de:	4621      	mov	r1, r4
   1a7e0:	691b      	ldr	r3, [r3, #16]
   1a7e2:	4798      	blx	r3
   1a7e4:	e7e0      	b.n	1a7a8 <bt_l2cap_recv+0x20>
   1a7e6:	bf00      	nop
   1a7e8:	00036518 	.word	0x00036518
   1a7ec:	000364b0 	.word	0x000364b0
   1a7f0:	0003a0aa 	.word	0x0003a0aa
   1a7f4:	0003a0c7 	.word	0x0003a0c7

0001a7f8 <bt_l2cap_update_conn_param>:
{
   1a7f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1a7fa:	4b17      	ldr	r3, [pc, #92]	; (1a858 <bt_l2cap_update_conn_param+0x60>)
{
   1a7fc:	4606      	mov	r6, r0
	ident++;
   1a7fe:	781a      	ldrb	r2, [r3, #0]
{
   1a800:	460d      	mov	r5, r1
	ident++;
   1a802:	3201      	adds	r2, #1
	if (!ident) {
   1a804:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   1a808:	bf08      	it	eq
   1a80a:	2201      	moveq	r2, #1
   1a80c:	701a      	strb	r2, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a80e:	2012      	movs	r0, #18
   1a810:	2208      	movs	r2, #8
   1a812:	7819      	ldrb	r1, [r3, #0]
   1a814:	f7ff fe4e 	bl	1a4b4 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1a818:	4604      	mov	r4, r0
   1a81a:	b1d0      	cbz	r0, 1a852 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1a81c:	2108      	movs	r1, #8
   1a81e:	4408      	add	r0, r1
   1a820:	f002 fbdc 	bl	1cfdc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1a824:	882b      	ldrh	r3, [r5, #0]
   1a826:	4622      	mov	r2, r4
   1a828:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1a82a:	886b      	ldrh	r3, [r5, #2]
   1a82c:	2105      	movs	r1, #5
   1a82e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1a830:	88ab      	ldrh	r3, [r5, #4]
   1a832:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1a834:	88eb      	ldrh	r3, [r5, #6]
   1a836:	80c3      	strh	r3, [r0, #6]
   1a838:	2300      	movs	r3, #0
   1a83a:	4630      	mov	r0, r6
   1a83c:	9300      	str	r3, [sp, #0]
   1a83e:	f016 f8a8 	bl	30992 <bt_l2cap_send_cb>
	if (err) {
   1a842:	4605      	mov	r5, r0
   1a844:	b110      	cbz	r0, 1a84c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1a846:	4620      	mov	r0, r4
   1a848:	f002 fa98 	bl	1cd7c <net_buf_unref>
}
   1a84c:	4628      	mov	r0, r5
   1a84e:	b002      	add	sp, #8
   1a850:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1a852:	f06f 050b 	mvn.w	r5, #11
   1a856:	e7f9      	b.n	1a84c <bt_l2cap_update_conn_param+0x54>
   1a858:	2001b9b3 	.word	0x2001b9b3

0001a85c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1a85c:	4b02      	ldr	r3, [pc, #8]	; (1a868 <att_cfm_sent+0xc>)
   1a85e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1a862:	f016 b91b 	b.w	30a9c <att_sent>
   1a866:	bf00      	nop
   1a868:	00030df7 	.word	0x00030df7

0001a86c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1a86c:	4b02      	ldr	r3, [pc, #8]	; (1a878 <att_rsp_sent+0xc>)
   1a86e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1a872:	f016 b913 	b.w	30a9c <att_sent>
   1a876:	bf00      	nop
   1a878:	00030de3 	.word	0x00030de3

0001a87c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1a87c:	4b02      	ldr	r3, [pc, #8]	; (1a888 <att_req_sent+0xc>)
   1a87e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1a882:	f016 b90b 	b.w	30a9c <att_sent>
   1a886:	bf00      	nop
   1a888:	00030d27 	.word	0x00030d27

0001a88c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1a88c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a88e:	3808      	subs	r0, #8
   1a890:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1a892:	a901      	add	r1, sp, #4
   1a894:	4802      	ldr	r0, [pc, #8]	; (1a8a0 <bt_att_released+0x14>)
   1a896:	f00e f9cb 	bl	28c30 <k_mem_slab_free>
}
   1a89a:	b003      	add	sp, #12
   1a89c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a8a0:	20014da8 	.word	0x20014da8

0001a8a4 <read_group_cb>:
{
   1a8a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a8a8:	f04f 0800 	mov.w	r8, #0
   1a8ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1a8b0:	4606      	mov	r6, r0
   1a8b2:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a8b4:	6800      	ldr	r0, [r0, #0]
   1a8b6:	a902      	add	r1, sp, #8
{
   1a8b8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1a8ba:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a8bc:	f88d 8008 	strb.w	r8, [sp, #8]
   1a8c0:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a8c4:	f015 fdfa 	bl	304bc <bt_uuid_cmp>
   1a8c8:	b1a0      	cbz	r0, 1a8f4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a8ca:	f642 0301 	movw	r3, #10241	; 0x2801
   1a8ce:	6830      	ldr	r0, [r6, #0]
   1a8d0:	a903      	add	r1, sp, #12
   1a8d2:	f88d 800c 	strb.w	r8, [sp, #12]
   1a8d6:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a8da:	f015 fdef 	bl	304bc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a8de:	b148      	cbz	r0, 1a8f4 <read_group_cb+0x50>
		if (data->group &&
   1a8e0:	6923      	ldr	r3, [r4, #16]
   1a8e2:	b11b      	cbz	r3, 1a8ec <read_group_cb+0x48>
   1a8e4:	885a      	ldrh	r2, [r3, #2]
   1a8e6:	42aa      	cmp	r2, r5
   1a8e8:	d200      	bcs.n	1a8ec <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a8ea:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a8ec:	2001      	movs	r0, #1
}
   1a8ee:	b004      	add	sp, #16
   1a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a8f4:	6861      	ldr	r1, [r4, #4]
   1a8f6:	6830      	ldr	r0, [r6, #0]
   1a8f8:	f015 fde0 	bl	304bc <bt_uuid_cmp>
   1a8fc:	b110      	cbz	r0, 1a904 <read_group_cb+0x60>
		data->group = NULL;
   1a8fe:	2300      	movs	r3, #0
   1a900:	6123      	str	r3, [r4, #16]
   1a902:	e7f3      	b.n	1a8ec <read_group_cb+0x48>
	if (data->rsp->len &&
   1a904:	68e3      	ldr	r3, [r4, #12]
   1a906:	68a0      	ldr	r0, [r4, #8]
   1a908:	781a      	ldrb	r2, [r3, #0]
   1a90a:	b13a      	cbz	r2, 1a91c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a90c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   1a910:	8981      	ldrh	r1, [r0, #12]
   1a912:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1a914:	4293      	cmp	r3, r2
   1a916:	da01      	bge.n	1a91c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1a918:	2000      	movs	r0, #0
   1a91a:	e7e8      	b.n	1a8ee <read_group_cb+0x4a>
   1a91c:	2104      	movs	r1, #4
   1a91e:	3008      	adds	r0, #8
   1a920:	f002 fb5c 	bl	1cfdc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a924:	4b09      	ldr	r3, [pc, #36]	; (1a94c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1a926:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a928:	4631      	mov	r1, r6
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a92a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a92c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a92e:	68a2      	ldr	r2, [r4, #8]
   1a930:	9300      	str	r3, [sp, #0]
   1a932:	4638      	mov	r0, r7
   1a934:	2300      	movs	r3, #0
   1a936:	9401      	str	r4, [sp, #4]
   1a938:	f016 f919 	bl	30b6e <att_chan_read>
	if (read < 0) {
   1a93c:	2800      	cmp	r0, #0
   1a93e:	dbeb      	blt.n	1a918 <read_group_cb+0x74>
	if (!data->group) {
   1a940:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1a942:	3800      	subs	r0, #0
   1a944:	bf18      	it	ne
   1a946:	2001      	movne	r0, #1
   1a948:	e7d1      	b.n	1a8ee <read_group_cb+0x4a>
   1a94a:	bf00      	nop
   1a94c:	00030c85 	.word	0x00030c85

0001a950 <read_type_cb>:
{
   1a950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1a954:	f8d2 8000 	ldr.w	r8, [r2]
{
   1a958:	4606      	mov	r6, r0
   1a95a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a95c:	6800      	ldr	r0, [r0, #0]
   1a95e:	6851      	ldr	r1, [r2, #4]
{
   1a960:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1a962:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a966:	f015 fda9 	bl	304bc <bt_uuid_cmp>
   1a96a:	4607      	mov	r7, r0
   1a96c:	2800      	cmp	r0, #0
   1a96e:	d13e      	bne.n	1a9ee <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a970:	4628      	mov	r0, r5
   1a972:	2215      	movs	r2, #21
   1a974:	4631      	mov	r1, r6
   1a976:	f016 fde1 	bl	3153c <bt_gatt_check_perm>
   1a97a:	4605      	mov	r5, r0
   1a97c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a97e:	b148      	cbz	r0, 1a994 <read_type_cb+0x44>
		if (data->rsp->len) {
   1a980:	68e3      	ldr	r3, [r4, #12]
   1a982:	781b      	ldrb	r3, [r3, #0]
   1a984:	b923      	cbnz	r3, 1a990 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1a986:	2500      	movs	r5, #0
}
   1a988:	4628      	mov	r0, r5
   1a98a:	b003      	add	sp, #12
   1a98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1a990:	7527      	strb	r7, [r4, #20]
   1a992:	e7f8      	b.n	1a986 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a994:	68a0      	ldr	r0, [r4, #8]
   1a996:	f002 fa51 	bl	1ce3c <net_buf_frag_last>
   1a99a:	2102      	movs	r1, #2
   1a99c:	3008      	adds	r0, #8
   1a99e:	f002 fb1d 	bl	1cfdc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a9a2:	4b14      	ldr	r3, [pc, #80]	; (1a9f4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a9a4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a9a6:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   1a9a8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a9ac:	68a2      	ldr	r2, [r4, #8]
   1a9ae:	9300      	str	r3, [sp, #0]
   1a9b0:	4640      	mov	r0, r8
   1a9b2:	462b      	mov	r3, r5
   1a9b4:	9401      	str	r4, [sp, #4]
   1a9b6:	f016 f8da 	bl	30b6e <att_chan_read>
	if (read < 0) {
   1a9ba:	2800      	cmp	r0, #0
   1a9bc:	da07      	bge.n	1a9ce <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1a9be:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1a9c2:	bf32      	itee	cc
   1a9c4:	200e      	movcc	r0, #14
		return -err;
   1a9c6:	4240      	negcs	r0, r0
   1a9c8:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1a9ca:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a9cc:	e7dc      	b.n	1a988 <read_type_cb+0x38>
	if (!data->item) {
   1a9ce:	6923      	ldr	r3, [r4, #16]
   1a9d0:	2b00      	cmp	r3, #0
   1a9d2:	d0d8      	beq.n	1a986 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a9d4:	68a0      	ldr	r0, [r4, #8]
   1a9d6:	f016 f859 	bl	30a8c <net_buf_frags_len>
   1a9da:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a9de:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a9e0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a9e2:	7818      	ldrb	r0, [r3, #0]
   1a9e4:	4285      	cmp	r5, r0
   1a9e6:	bf94      	ite	ls
   1a9e8:	2500      	movls	r5, #0
   1a9ea:	2501      	movhi	r5, #1
   1a9ec:	e7cc      	b.n	1a988 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1a9ee:	2501      	movs	r5, #1
   1a9f0:	e7ca      	b.n	1a988 <read_type_cb+0x38>
   1a9f2:	bf00      	nop
   1a9f4:	00030aa9 	.word	0x00030aa9

0001a9f8 <find_type_cb>:
{
   1a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a9fc:	f642 0301 	movw	r3, #10241	; 0x2801
   1aa00:	2500      	movs	r5, #0
{
   1aa02:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   1aa04:	f8d2 9000 	ldr.w	r9, [r2]
{
   1aa08:	4607      	mov	r7, r0
   1aa0a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aa0c:	6800      	ldr	r0, [r0, #0]
   1aa0e:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   1aa10:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   1aa14:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aa16:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1aa1a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1aa1e:	f015 fd4d 	bl	304bc <bt_uuid_cmp>
   1aa22:	2800      	cmp	r0, #0
   1aa24:	d066      	beq.n	1aaf4 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1aa26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aa2a:	6838      	ldr	r0, [r7, #0]
   1aa2c:	a90b      	add	r1, sp, #44	; 0x2c
   1aa2e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1aa32:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1aa36:	f015 fd41 	bl	304bc <bt_uuid_cmp>
   1aa3a:	b138      	cbz	r0, 1aa4c <find_type_cb+0x54>
		if (data->group &&
   1aa3c:	68a3      	ldr	r3, [r4, #8]
   1aa3e:	b11b      	cbz	r3, 1aa48 <find_type_cb+0x50>
   1aa40:	885a      	ldrh	r2, [r3, #2]
   1aa42:	42b2      	cmp	r2, r6
   1aa44:	d200      	bcs.n	1aa48 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1aa46:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1aa48:	2001      	movs	r0, #1
   1aa4a:	e009      	b.n	1aa60 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1aa4c:	6861      	ldr	r1, [r4, #4]
   1aa4e:	4608      	mov	r0, r1
   1aa50:	f016 f81c 	bl	30a8c <net_buf_frags_len>
   1aa54:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1aa58:	1a1b      	subs	r3, r3, r0
   1aa5a:	2b03      	cmp	r3, #3
   1aa5c:	d803      	bhi.n	1aa66 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1aa5e:	2000      	movs	r0, #0
}
   1aa60:	b011      	add	sp, #68	; 0x44
   1aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1aa66:	4608      	mov	r0, r1
   1aa68:	f002 f9e8 	bl	1ce3c <net_buf_frag_last>
   1aa6c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1aa6e:	6860      	ldr	r0, [r4, #4]
   1aa70:	f016 f80c 	bl	30a8c <net_buf_frags_len>
   1aa74:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1aa78:	f105 0b08 	add.w	fp, r5, #8
   1aa7c:	ebaa 0a00 	sub.w	sl, sl, r0
   1aa80:	4658      	mov	r0, fp
   1aa82:	f016 fe1a 	bl	316ba <net_buf_simple_tailroom>
   1aa86:	4582      	cmp	sl, r0
   1aa88:	d237      	bcs.n	1aafa <find_type_cb+0x102>
   1aa8a:	6860      	ldr	r0, [r4, #4]
   1aa8c:	f015 fffe 	bl	30a8c <net_buf_frags_len>
   1aa90:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1aa94:	1a18      	subs	r0, r3, r0
	if (!len) {
   1aa96:	b970      	cbnz	r0, 1aab6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1aa98:	6863      	ldr	r3, [r4, #4]
   1aa9a:	7998      	ldrb	r0, [r3, #6]
   1aa9c:	f001 ffce 	bl	1ca3c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1aaa0:	2200      	movs	r2, #0
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	f016 fdea 	bl	3167c <net_buf_alloc_fixed>
		if (!frag) {
   1aaa8:	4605      	mov	r5, r0
   1aaaa:	2800      	cmp	r0, #0
   1aaac:	d0d7      	beq.n	1aa5e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1aaae:	4601      	mov	r1, r0
   1aab0:	6860      	ldr	r0, [r4, #4]
   1aab2:	f002 fa0b 	bl	1cecc <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1aab6:	2300      	movs	r3, #0
   1aab8:	9300      	str	r3, [sp, #0]
   1aaba:	4639      	mov	r1, r7
   1aabc:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1aac0:	2310      	movs	r3, #16
   1aac2:	4640      	mov	r0, r8
   1aac4:	aa02      	add	r2, sp, #8
   1aac6:	47c8      	blx	r9
	if (read < 0) {
   1aac8:	1e07      	subs	r7, r0, #0
   1aaca:	db13      	blt.n	1aaf4 <find_type_cb+0xfc>
	if (read != data->value_len) {
   1aacc:	7c22      	ldrb	r2, [r4, #16]
   1aace:	68e0      	ldr	r0, [r4, #12]
   1aad0:	42ba      	cmp	r2, r7
   1aad2:	d037      	beq.n	1ab44 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1aad4:	4601      	mov	r1, r0
   1aad6:	a80b      	add	r0, sp, #44	; 0x2c
   1aad8:	f015 fd1a 	bl	30510 <bt_uuid_create>
   1aadc:	b988      	cbnz	r0, 1ab02 <find_type_cb+0x10a>
   1aade:	4a1b      	ldr	r2, [pc, #108]	; (1ab4c <find_type_cb+0x154>)
   1aae0:	4b1b      	ldr	r3, [pc, #108]	; (1ab50 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1aae2:	7c21      	ldrb	r1, [r4, #16]
   1aae4:	1ad2      	subs	r2, r2, r3
   1aae6:	08d2      	lsrs	r2, r2, #3
   1aae8:	0192      	lsls	r2, r2, #6
   1aaea:	481a      	ldr	r0, [pc, #104]	; (1ab54 <find_type_cb+0x15c>)
   1aaec:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   1aaf0:	f013 fc8b 	bl	2e40a <log_1>
	data->group = NULL;
   1aaf4:	2300      	movs	r3, #0
   1aaf6:	60a3      	str	r3, [r4, #8]
   1aaf8:	e7a6      	b.n	1aa48 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1aafa:	4658      	mov	r0, fp
   1aafc:	f016 fddd 	bl	316ba <net_buf_simple_tailroom>
   1ab00:	e7c9      	b.n	1aa96 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1ab02:	b2fa      	uxtb	r2, r7
   1ab04:	a902      	add	r1, sp, #8
   1ab06:	a806      	add	r0, sp, #24
   1ab08:	f015 fd02 	bl	30510 <bt_uuid_create>
   1ab0c:	b948      	cbnz	r0, 1ab22 <find_type_cb+0x12a>
   1ab0e:	4a0f      	ldr	r2, [pc, #60]	; (1ab4c <find_type_cb+0x154>)
   1ab10:	4b0f      	ldr	r3, [pc, #60]	; (1ab50 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   1ab12:	4639      	mov	r1, r7
   1ab14:	1ad2      	subs	r2, r2, r3
   1ab16:	08d2      	lsrs	r2, r2, #3
   1ab18:	0192      	lsls	r2, r2, #6
   1ab1a:	480f      	ldr	r0, [pc, #60]	; (1ab58 <find_type_cb+0x160>)
   1ab1c:	f042 0202 	orr.w	r2, r2, #2
   1ab20:	e7e6      	b.n	1aaf0 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ab22:	a906      	add	r1, sp, #24
   1ab24:	a80b      	add	r0, sp, #44	; 0x2c
   1ab26:	f015 fcc9 	bl	304bc <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1ab2a:	2800      	cmp	r0, #0
   1ab2c:	d1e2      	bne.n	1aaf4 <find_type_cb+0xfc>
	data->err = 0x00;
   1ab2e:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1ab30:	2104      	movs	r1, #4
   1ab32:	7463      	strb	r3, [r4, #17]
   1ab34:	f105 0008 	add.w	r0, r5, #8
   1ab38:	f002 fa50 	bl	1cfdc <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ab3c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ab3e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ab40:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1ab42:	e781      	b.n	1aa48 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1ab44:	a902      	add	r1, sp, #8
   1ab46:	f01a fd10 	bl	3556a <memcmp>
   1ab4a:	e7ee      	b.n	1ab2a <find_type_cb+0x132>
   1ab4c:	000364d0 	.word	0x000364d0
   1ab50:	000364b0 	.word	0x000364b0
   1ab54:	0003a0fc 	.word	0x0003a0fc
   1ab58:	0003a11b 	.word	0x0003a11b

0001ab5c <chan_send>:
{
   1ab5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ab60:	688b      	ldr	r3, [r1, #8]
{
   1ab62:	4606      	mov	r6, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ab64:	781b      	ldrb	r3, [r3, #0]
{
   1ab66:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ab68:	2bd2      	cmp	r3, #210	; 0xd2
{
   1ab6a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ab6c:	d116      	bne.n	1ab9c <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   1ab6e:	6803      	ldr	r3, [r0, #0]
   1ab70:	6818      	ldr	r0, [r3, #0]
   1ab72:	f016 fd7d 	bl	31670 <bt_smp_sign>
		if (err) {
   1ab76:	4605      	mov	r5, r0
   1ab78:	b180      	cbz	r0, 1ab9c <chan_send+0x40>
   1ab7a:	4b24      	ldr	r3, [pc, #144]	; (1ac0c <chan_send+0xb0>)
   1ab7c:	4924      	ldr	r1, [pc, #144]	; (1ac10 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   1ab7e:	4825      	ldr	r0, [pc, #148]	; (1ac14 <chan_send+0xb8>)
   1ab80:	1ac9      	subs	r1, r1, r3
   1ab82:	08c9      	lsrs	r1, r1, #3
   1ab84:	0189      	lsls	r1, r1, #6
   1ab86:	f041 0101 	orr.w	r1, r1, #1
   1ab8a:	f013 fc31 	bl	2e3f0 <log_0>
			net_buf_unref(buf);
   1ab8e:	4620      	mov	r0, r4
   1ab90:	f002 f8f4 	bl	1cd7c <net_buf_unref>
}
   1ab94:	4628      	mov	r0, r5
   1ab96:	b003      	add	sp, #12
   1ab98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1ab9c:	f104 0008 	add.w	r0, r4, #8
   1aba0:	f016 fd87 	bl	316b2 <net_buf_simple_headroom>
	state->len = buf->len;
   1aba4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1aba8:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1abaa:	b957      	cbnz	r7, 1abc2 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   1abac:	68a3      	ldr	r3, [r4, #8]
   1abae:	7818      	ldrb	r0, [r3, #0]
   1abb0:	f015 ff8c 	bl	30acc <att_op_get_type>
   1abb4:	1e43      	subs	r3, r0, #1
   1abb6:	b2db      	uxtb	r3, r3
   1abb8:	2b04      	cmp	r3, #4
   1abba:	bf9c      	itt	ls
   1abbc:	4a16      	ldrls	r2, [pc, #88]	; (1ac18 <chan_send+0xbc>)
   1abbe:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1abc2:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1abc4:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1abc8:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   1abca:	4b14      	ldr	r3, [pc, #80]	; (1ac1c <chan_send+0xc0>)
   1abcc:	429f      	cmp	r7, r3
   1abce:	d018      	beq.n	1ac02 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   1abd0:	4b13      	ldr	r3, [pc, #76]	; (1ac20 <chan_send+0xc4>)
   1abd2:	429f      	cmp	r7, r3
   1abd4:	d017      	beq.n	1ac06 <chan_send+0xaa>
		return att_sent;
   1abd6:	4913      	ldr	r1, [pc, #76]	; (1ac24 <chan_send+0xc8>)
   1abd8:	4b13      	ldr	r3, [pc, #76]	; (1ac28 <chan_send+0xcc>)
   1abda:	4a14      	ldr	r2, [pc, #80]	; (1ac2c <chan_send+0xd0>)
   1abdc:	428f      	cmp	r7, r1
   1abde:	bf18      	it	ne
   1abe0:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1abe2:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1abe4:	4622      	mov	r2, r4
   1abe6:	2104      	movs	r1, #4
   1abe8:	9600      	str	r6, [sp, #0]
   1abea:	f015 fed2 	bl	30992 <bt_l2cap_send_cb>
	if (err) {
   1abee:	4605      	mov	r5, r0
   1abf0:	2800      	cmp	r0, #0
   1abf2:	d0cf      	beq.n	1ab94 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   1abf4:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1abf6:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1abfa:	fa10 f088 	uxtah	r0, r0, r8
   1abfe:	60a0      	str	r0, [r4, #8]
}
   1ac00:	e7c8      	b.n	1ab94 <chan_send+0x38>
		return att_rsp_sent;
   1ac02:	4b0b      	ldr	r3, [pc, #44]	; (1ac30 <chan_send+0xd4>)
   1ac04:	e7ed      	b.n	1abe2 <chan_send+0x86>
		return att_cfm_sent;
   1ac06:	4b0b      	ldr	r3, [pc, #44]	; (1ac34 <chan_send+0xd8>)
   1ac08:	e7eb      	b.n	1abe2 <chan_send+0x86>
   1ac0a:	bf00      	nop
   1ac0c:	000364b0 	.word	0x000364b0
   1ac10:	000364d0 	.word	0x000364d0
   1ac14:	0003a13a 	.word	0x0003a13a
   1ac18:	00036b88 	.word	0x00036b88
   1ac1c:	00030de3 	.word	0x00030de3
   1ac20:	00030df7 	.word	0x00030df7
   1ac24:	00030d27 	.word	0x00030d27
   1ac28:	0001a87d 	.word	0x0001a87d
   1ac2c:	00030a9d 	.word	0x00030a9d
   1ac30:	0001a86d 	.word	0x0001a86d
   1ac34:	0001a85d 	.word	0x0001a85d

0001ac38 <bt_att_chan_req_send>:
{
   1ac38:	b538      	push	{r3, r4, r5, lr}
   1ac3a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   1ac3c:	4604      	mov	r4, r0
   1ac3e:	b958      	cbnz	r0, 1ac58 <bt_att_chan_req_send+0x20>
   1ac40:	491d      	ldr	r1, [pc, #116]	; (1acb8 <bt_att_chan_req_send+0x80>)
   1ac42:	481e      	ldr	r0, [pc, #120]	; (1acbc <bt_att_chan_req_send+0x84>)
   1ac44:	f240 2332 	movw	r3, #562	; 0x232
   1ac48:	4a1d      	ldr	r2, [pc, #116]	; (1acc0 <bt_att_chan_req_send+0x88>)
   1ac4a:	f013 f89d 	bl	2dd88 <printk>
   1ac4e:	f240 2132 	movw	r1, #562	; 0x232
   1ac52:	481b      	ldr	r0, [pc, #108]	; (1acc0 <bt_att_chan_req_send+0x88>)
   1ac54:	f013 fb7e 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1ac58:	b95d      	cbnz	r5, 1ac72 <bt_att_chan_req_send+0x3a>
   1ac5a:	491a      	ldr	r1, [pc, #104]	; (1acc4 <bt_att_chan_req_send+0x8c>)
   1ac5c:	4817      	ldr	r0, [pc, #92]	; (1acbc <bt_att_chan_req_send+0x84>)
   1ac5e:	f240 2333 	movw	r3, #563	; 0x233
   1ac62:	4a17      	ldr	r2, [pc, #92]	; (1acc0 <bt_att_chan_req_send+0x88>)
   1ac64:	f013 f890 	bl	2dd88 <printk>
   1ac68:	f240 2133 	movw	r1, #563	; 0x233
   1ac6c:	4814      	ldr	r0, [pc, #80]	; (1acc0 <bt_att_chan_req_send+0x88>)
   1ac6e:	f013 fb71 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1ac72:	686b      	ldr	r3, [r5, #4]
   1ac74:	b95b      	cbnz	r3, 1ac8e <bt_att_chan_req_send+0x56>
   1ac76:	4914      	ldr	r1, [pc, #80]	; (1acc8 <bt_att_chan_req_send+0x90>)
   1ac78:	4810      	ldr	r0, [pc, #64]	; (1acbc <bt_att_chan_req_send+0x84>)
   1ac7a:	f44f 730d 	mov.w	r3, #564	; 0x234
   1ac7e:	4a10      	ldr	r2, [pc, #64]	; (1acc0 <bt_att_chan_req_send+0x88>)
   1ac80:	f013 f882 	bl	2dd88 <printk>
   1ac84:	f44f 710d 	mov.w	r1, #564	; 0x234
   1ac88:	480d      	ldr	r0, [pc, #52]	; (1acc0 <bt_att_chan_req_send+0x88>)
   1ac8a:	f013 fb63 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1ac8e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1ac92:	b15b      	cbz	r3, 1acac <bt_att_chan_req_send+0x74>
   1ac94:	490d      	ldr	r1, [pc, #52]	; (1accc <bt_att_chan_req_send+0x94>)
   1ac96:	4809      	ldr	r0, [pc, #36]	; (1acbc <bt_att_chan_req_send+0x84>)
   1ac98:	f240 2335 	movw	r3, #565	; 0x235
   1ac9c:	4a08      	ldr	r2, [pc, #32]	; (1acc0 <bt_att_chan_req_send+0x88>)
   1ac9e:	f013 f873 	bl	2dd88 <printk>
   1aca2:	f240 2135 	movw	r1, #565	; 0x235
   1aca6:	4806      	ldr	r0, [pc, #24]	; (1acc0 <bt_att_chan_req_send+0x88>)
   1aca8:	f013 fb54 	bl	2e354 <assert_post_action>
	return chan_req_send(chan, req);
   1acac:	4629      	mov	r1, r5
   1acae:	4620      	mov	r0, r4
}
   1acb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   1acb4:	f015 bff6 	b.w	30ca4 <chan_req_send>
   1acb8:	0003a17c 	.word	0x0003a17c
   1acbc:	00037f2c 	.word	0x00037f2c
   1acc0:	0003a14d 	.word	0x0003a14d
   1acc4:	0003a088 	.word	0x0003a088
   1acc8:	0003a181 	.word	0x0003a181
   1accc:	0003a18b 	.word	0x0003a18b

0001acd0 <att_get>:
{
   1acd0:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1acd2:	7a83      	ldrb	r3, [r0, #10]
   1acd4:	2b07      	cmp	r3, #7
   1acd6:	d00b      	beq.n	1acf0 <att_get+0x20>
   1acd8:	4917      	ldr	r1, [pc, #92]	; (1ad38 <att_get+0x68>)
   1acda:	4b18      	ldr	r3, [pc, #96]	; (1ad3c <att_get+0x6c>)
		BT_WARN("Not connected");
   1acdc:	4818      	ldr	r0, [pc, #96]	; (1ad40 <att_get+0x70>)
   1acde:	1ac9      	subs	r1, r1, r3
   1ace0:	08c9      	lsrs	r1, r1, #3
   1ace2:	0189      	lsls	r1, r1, #6
   1ace4:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   1ace8:	f013 fb82 	bl	2e3f0 <log_0>
		return NULL;
   1acec:	2400      	movs	r4, #0
   1acee:	e00e      	b.n	1ad0e <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1acf0:	2104      	movs	r1, #4
   1acf2:	f015 fe95 	bl	30a20 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1acf6:	4604      	mov	r4, r0
   1acf8:	b958      	cbnz	r0, 1ad12 <att_get+0x42>
   1acfa:	490f      	ldr	r1, [pc, #60]	; (1ad38 <att_get+0x68>)
   1acfc:	4b0f      	ldr	r3, [pc, #60]	; (1ad3c <att_get+0x6c>)
		BT_ERR("Unable to find ATT channel");
   1acfe:	4811      	ldr	r0, [pc, #68]	; (1ad44 <att_get+0x74>)
   1ad00:	1ac9      	subs	r1, r1, r3
   1ad02:	08c9      	lsrs	r1, r1, #3
   1ad04:	0189      	lsls	r1, r1, #6
   1ad06:	f041 0101 	orr.w	r1, r1, #1
   1ad0a:	f013 fb71 	bl	2e3f0 <log_0>
}
   1ad0e:	4620      	mov	r0, r4
   1ad10:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ad12:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   1ad16:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1ad1a:	075b      	lsls	r3, r3, #29
   1ad1c:	d508      	bpl.n	1ad30 <att_get+0x60>
   1ad1e:	4906      	ldr	r1, [pc, #24]	; (1ad38 <att_get+0x68>)
   1ad20:	4b06      	ldr	r3, [pc, #24]	; (1ad3c <att_get+0x6c>)
		BT_WARN("ATT channel flagged as disconnected");
   1ad22:	4809      	ldr	r0, [pc, #36]	; (1ad48 <att_get+0x78>)
   1ad24:	1ac9      	subs	r1, r1, r3
   1ad26:	08c9      	lsrs	r1, r1, #3
   1ad28:	0189      	lsls	r1, r1, #6
   1ad2a:	f041 0102 	orr.w	r1, r1, #2
   1ad2e:	e7db      	b.n	1ace8 <att_get+0x18>
	return att_chan->att;
   1ad30:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1ad34:	e7eb      	b.n	1ad0e <att_get+0x3e>
   1ad36:	bf00      	nop
   1ad38:	000364d0 	.word	0x000364d0
   1ad3c:	000364b0 	.word	0x000364b0
   1ad40:	0003a196 	.word	0x0003a196
   1ad44:	0003a1a4 	.word	0x0003a1a4
   1ad48:	0003a1bf 	.word	0x0003a1bf

0001ad4c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1ad4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1ad4e:	2300      	movs	r3, #0
{
   1ad50:	4606      	mov	r6, r0
   1ad52:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1ad54:	2200      	movs	r2, #0
   1ad56:	4669      	mov	r1, sp
   1ad58:	4826      	ldr	r0, [pc, #152]	; (1adf4 <bt_att_accept+0xa8>)
   1ad5a:	f00d fefd 	bl	28b58 <k_mem_slab_alloc>
   1ad5e:	4604      	mov	r4, r0
   1ad60:	b178      	cbz	r0, 1ad82 <bt_att_accept+0x36>
		BT_ERR("No available ATT context for conn %p", conn);
   1ad62:	4631      	mov	r1, r6
   1ad64:	4a24      	ldr	r2, [pc, #144]	; (1adf8 <bt_att_accept+0xac>)
   1ad66:	4b25      	ldr	r3, [pc, #148]	; (1adfc <bt_att_accept+0xb0>)
   1ad68:	4825      	ldr	r0, [pc, #148]	; (1ae00 <bt_att_accept+0xb4>)
   1ad6a:	1ad2      	subs	r2, r2, r3
   1ad6c:	08d2      	lsrs	r2, r2, #3
   1ad6e:	0192      	lsls	r2, r2, #6
   1ad70:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1ad74:	f013 fb49 	bl	2e40a <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1ad78:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1ad7c:	4620      	mov	r0, r4
   1ad7e:	b003      	add	sp, #12
   1ad80:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
   1ad82:	4601      	mov	r1, r0
   1ad84:	2230      	movs	r2, #48	; 0x30
   1ad86:	9800      	ldr	r0, [sp, #0]
   1ad88:	f01a fc1d 	bl	355c6 <memset>
	att->conn = conn;
   1ad8c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1ad8e:	2200      	movs	r2, #0
	list->head = NULL;
   1ad90:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1ad94:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   1ad98:	60ac      	str	r4, [r5, #8]
   1ad9a:	2300      	movs	r3, #0
   1ad9c:	4819      	ldr	r0, [pc, #100]	; (1ae04 <bt_att_accept+0xb8>)
   1ad9e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1ada0:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1ada2:	f00d fed9 	bl	28b58 <k_mem_slab_alloc>
   1ada6:	4604      	mov	r4, r0
   1ada8:	b148      	cbz	r0, 1adbe <bt_att_accept+0x72>
   1adaa:	4a13      	ldr	r2, [pc, #76]	; (1adf8 <bt_att_accept+0xac>)
   1adac:	4b13      	ldr	r3, [pc, #76]	; (1adfc <bt_att_accept+0xb0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1adae:	6829      	ldr	r1, [r5, #0]
   1adb0:	1ad2      	subs	r2, r2, r3
   1adb2:	08d2      	lsrs	r2, r2, #3
   1adb4:	0192      	lsls	r2, r2, #6
   1adb6:	4814      	ldr	r0, [pc, #80]	; (1ae08 <bt_att_accept+0xbc>)
   1adb8:	f042 0201 	orr.w	r2, r2, #1
   1adbc:	e7da      	b.n	1ad74 <bt_att_accept+0x28>
   1adbe:	4601      	mov	r1, r0
   1adc0:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1adc4:	9801      	ldr	r0, [sp, #4]
   1adc6:	f01a fbfe 	bl	355c6 <memset>
	chan->chan.chan.ops = &ops;
   1adca:	9801      	ldr	r0, [sp, #4]
   1adcc:	4b0f      	ldr	r3, [pc, #60]	; (1ae0c <bt_att_accept+0xc0>)
   1adce:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1add0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1add4:	f01a fa44 	bl	35260 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1add8:	9b01      	ldr	r3, [sp, #4]
   1adda:	33f8      	adds	r3, #248	; 0xf8
   1addc:	e8d3 2fef 	ldaex	r2, [r3]
   1ade0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1ade4:	2900      	cmp	r1, #0
   1ade6:	d1f9      	bne.n	1addc <bt_att_accept+0x90>
	chan->att = att;
   1ade8:	9b01      	ldr	r3, [sp, #4]
   1adea:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1adee:	603b      	str	r3, [r7, #0]
	return 0;
   1adf0:	e7c4      	b.n	1ad7c <bt_att_accept+0x30>
   1adf2:	bf00      	nop
   1adf4:	20014d88 	.word	0x20014d88
   1adf8:	000364d0 	.word	0x000364d0
   1adfc:	000364b0 	.word	0x000364b0
   1ae00:	0003a1e3 	.word	0x0003a1e3
   1ae04:	20014da8 	.word	0x20014da8
   1ae08:	0003a208 	.word	0x0003a208
   1ae0c:	20014784 	.word	0x20014784

0001ae10 <bt_att_connected>:
{
   1ae10:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1ae12:	2104      	movs	r1, #4
{
   1ae14:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1ae16:	6800      	ldr	r0, [r0, #0]
   1ae18:	f015 fdf2 	bl	30a00 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   1ae1c:	4605      	mov	r5, r0
   1ae1e:	b970      	cbnz	r0, 1ae3e <bt_att_connected+0x2e>
   1ae20:	4919      	ldr	r1, [pc, #100]	; (1ae88 <bt_att_connected+0x78>)
   1ae22:	f640 2317 	movw	r3, #2583	; 0xa17
   1ae26:	4a19      	ldr	r2, [pc, #100]	; (1ae8c <bt_att_connected+0x7c>)
   1ae28:	4819      	ldr	r0, [pc, #100]	; (1ae90 <bt_att_connected+0x80>)
   1ae2a:	f012 ffad 	bl	2dd88 <printk>
   1ae2e:	4819      	ldr	r0, [pc, #100]	; (1ae94 <bt_att_connected+0x84>)
   1ae30:	f012 ffaa 	bl	2dd88 <printk>
   1ae34:	f640 2117 	movw	r1, #2583	; 0xa17
   1ae38:	4814      	ldr	r0, [pc, #80]	; (1ae8c <bt_att_connected+0x7c>)
   1ae3a:	f013 fa8b 	bl	2e354 <assert_post_action>
	struct bt_att *att = att_chan->att;
   1ae3e:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1ae42:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ae44:	b91b      	cbnz	r3, 1ae4e <bt_att_connected+0x3e>
   1ae46:	f105 000c 	add.w	r0, r5, #12
   1ae4a:	f01a fa09 	bl	35260 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   1ae4e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1ae50:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	parent->next = child;
   1ae54:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   1ae58:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   1ae5a:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1ae5c:	b902      	cbnz	r2, 1ae60 <bt_att_connected+0x50>
	list->tail = node;
   1ae5e:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ae60:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   1ae64:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1ae68:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ae6a:	bf58      	it	pl
   1ae6c:	2317      	movpl	r3, #23
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1ae6e:	f504 708c 	add.w	r0, r4, #280	; 0x118
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ae72:	bf5c      	itt	pl
   1ae74:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1ae78:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1ae7c:	4906      	ldr	r1, [pc, #24]	; (1ae98 <bt_att_connected+0x88>)
}
   1ae7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1ae82:	f00f b945 	b.w	2a110 <k_work_init_delayable>
   1ae86:	bf00      	nop
   1ae88:	0003a17c 	.word	0x0003a17c
   1ae8c:	0003a14d 	.word	0x0003a14d
   1ae90:	00037f2c 	.word	0x00037f2c
   1ae94:	0003a22d 	.word	0x0003a22d
   1ae98:	0001b8f5 	.word	0x0001b8f5

0001ae9c <att_write_cmd>:
{
   1ae9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae9e:	4604      	mov	r4, r0
   1aea0:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1aea2:	f101 0008 	add.w	r0, r1, #8
   1aea6:	460d      	mov	r5, r1
   1aea8:	f016 fbfb 	bl	316a2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1aeac:	6823      	ldr	r3, [r4, #0]
   1aeae:	4606      	mov	r6, r0
   1aeb0:	2100      	movs	r1, #0
   1aeb2:	6818      	ldr	r0, [r3, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1aeb4:	68af      	ldr	r7, [r5, #8]
   1aeb6:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1aeb8:	f016 fb8e 	bl	315d8 <bt_gatt_change_aware>
   1aebc:	b328      	cbz	r0, 1af0a <att_write_cmd+0x6e>
	if (!handle) {
   1aebe:	b336      	cbz	r6, 1af0e <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   1aec0:	2214      	movs	r2, #20
   1aec2:	2100      	movs	r1, #0
   1aec4:	a801      	add	r0, sp, #4
   1aec6:	f01a fb7e 	bl	355c6 <memset>
	data.conn = chan->att->conn;
   1aeca:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1aecc:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   1aece:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1aed0:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   1aed2:	9300      	str	r3, [sp, #0]
	data.req = req;
   1aed4:	2300      	movs	r3, #0
   1aed6:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   1aeda:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1aede:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1aee0:	4a0c      	ldr	r2, [pc, #48]	; (1af14 <att_write_cmd+0x78>)
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1aee2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1aee6:	466b      	mov	r3, sp
	data.value = value;
   1aee8:	9703      	str	r7, [sp, #12]
	data.len = len;
   1aeea:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1aeee:	f015 fe33 	bl	30b58 <bt_gatt_foreach_attr>
	if (data.err) {
   1aef2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1aef6:	b92b      	cbnz	r3, 1af04 <att_write_cmd+0x68>
	if (data.buf) {
   1aef8:	9901      	ldr	r1, [sp, #4]
   1aefa:	b119      	cbz	r1, 1af04 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1aefc:	4620      	mov	r0, r4
   1aefe:	4a06      	ldr	r2, [pc, #24]	; (1af18 <att_write_cmd+0x7c>)
   1af00:	f015 ff03 	bl	30d0a <bt_att_chan_send_rsp>
   1af04:	2000      	movs	r0, #0
}
   1af06:	b007      	add	sp, #28
   1af08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1af0a:	2012      	movs	r0, #18
   1af0c:	e7fb      	b.n	1af06 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1af0e:	2001      	movs	r0, #1
   1af10:	e7f9      	b.n	1af06 <att_write_cmd+0x6a>
   1af12:	bf00      	nop
   1af14:	00030ea5 	.word	0x00030ea5
   1af18:	00030de3 	.word	0x00030de3

0001af1c <bt_att_chan_create_pdu>:
{
   1af1c:	b538      	push	{r3, r4, r5, lr}
   1af1e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1af20:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   1af24:	3201      	adds	r2, #1
   1af26:	428a      	cmp	r2, r1
   1af28:	d90c      	bls.n	1af44 <bt_att_chan_create_pdu+0x28>
   1af2a:	481a      	ldr	r0, [pc, #104]	; (1af94 <bt_att_chan_create_pdu+0x78>)
   1af2c:	4b1a      	ldr	r3, [pc, #104]	; (1af98 <bt_att_chan_create_pdu+0x7c>)
		return NULL;
   1af2e:	2400      	movs	r4, #0
   1af30:	1a1b      	subs	r3, r3, r0
   1af32:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1af34:	019b      	lsls	r3, r3, #6
   1af36:	4819      	ldr	r0, [pc, #100]	; (1af9c <bt_att_chan_create_pdu+0x80>)
   1af38:	f043 0302 	orr.w	r3, r3, #2
   1af3c:	f013 fa79 	bl	2e432 <log_2>
}
   1af40:	4620      	mov	r0, r4
   1af42:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   1af44:	4628      	mov	r0, r5
   1af46:	f015 fdc1 	bl	30acc <att_op_get_type>
   1af4a:	2802      	cmp	r0, #2
   1af4c:	d001      	beq.n	1af52 <bt_att_chan_create_pdu+0x36>
   1af4e:	2804      	cmp	r0, #4
   1af50:	d114      	bne.n	1af7c <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1af52:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1af56:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1af58:	2100      	movs	r1, #0
   1af5a:	4608      	mov	r0, r1
   1af5c:	f015 fd16 	bl	3098c <bt_l2cap_create_pdu_timeout>
   1af60:	4604      	mov	r4, r0
	if (!buf) {
   1af62:	b980      	cbnz	r0, 1af86 <bt_att_chan_create_pdu+0x6a>
   1af64:	4b0b      	ldr	r3, [pc, #44]	; (1af94 <bt_att_chan_create_pdu+0x78>)
   1af66:	4a0c      	ldr	r2, [pc, #48]	; (1af98 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1af68:	4629      	mov	r1, r5
   1af6a:	1ad2      	subs	r2, r2, r3
   1af6c:	08d2      	lsrs	r2, r2, #3
   1af6e:	0192      	lsls	r2, r2, #6
   1af70:	480b      	ldr	r0, [pc, #44]	; (1afa0 <bt_att_chan_create_pdu+0x84>)
   1af72:	f042 0201 	orr.w	r2, r2, #1
   1af76:	f013 fa48 	bl	2e40a <log_1>
		return NULL;
   1af7a:	e7e1      	b.n	1af40 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1af7c:	f04f 32ff 	mov.w	r2, #4294967295
   1af80:	f04f 33ff 	mov.w	r3, #4294967295
   1af84:	e7e8      	b.n	1af58 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   1af86:	2101      	movs	r1, #1
   1af88:	3008      	adds	r0, #8
   1af8a:	f002 f827 	bl	1cfdc <net_buf_simple_add>
	hdr->code = op;
   1af8e:	7005      	strb	r5, [r0, #0]
	return buf;
   1af90:	e7d6      	b.n	1af40 <bt_att_chan_create_pdu+0x24>
   1af92:	bf00      	nop
   1af94:	000364b0 	.word	0x000364b0
   1af98:	000364d0 	.word	0x000364d0
   1af9c:	0003a244 	.word	0x0003a244
   1afa0:	00039f5d 	.word	0x00039f5d

0001afa4 <att_indicate>:
{
   1afa4:	b570      	push	{r4, r5, r6, lr}
   1afa6:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   1afa8:	f101 0008 	add.w	r0, r1, #8
   1afac:	460d      	mov	r5, r1
   1afae:	f016 fb78 	bl	316a2 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1afb2:	6826      	ldr	r6, [r4, #0]
   1afb4:	4601      	mov	r1, r0
   1afb6:	89ab      	ldrh	r3, [r5, #12]
   1afb8:	68aa      	ldr	r2, [r5, #8]
   1afba:	6830      	ldr	r0, [r6, #0]
   1afbc:	f016 fae1 	bl	31582 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1afc0:	211e      	movs	r1, #30
   1afc2:	2200      	movs	r2, #0
   1afc4:	4620      	mov	r0, r4
   1afc6:	f7ff ffa9 	bl	1af1c <bt_att_chan_create_pdu>
	if (!buf) {
   1afca:	4601      	mov	r1, r0
   1afcc:	b118      	cbz	r0, 1afd6 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1afce:	4620      	mov	r0, r4
   1afd0:	4a02      	ldr	r2, [pc, #8]	; (1afdc <att_indicate+0x38>)
   1afd2:	f015 fe9a 	bl	30d0a <bt_att_chan_send_rsp>
}
   1afd6:	2000      	movs	r0, #0
   1afd8:	bd70      	pop	{r4, r5, r6, pc}
   1afda:	bf00      	nop
   1afdc:	00030df7 	.word	0x00030df7

0001afe0 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1afe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afe4:	4688      	mov	r8, r1
   1afe6:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1afe8:	2101      	movs	r1, #1
   1afea:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1afec:	4605      	mov	r5, r0
   1afee:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1aff0:	f7ff ff94 	bl	1af1c <bt_att_chan_create_pdu>
	if (!buf) {
   1aff4:	4604      	mov	r4, r0
   1aff6:	b178      	cbz	r0, 1b018 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1aff8:	2104      	movs	r1, #4
   1affa:	3008      	adds	r0, #8
   1affc:	f001 ffee 	bl	1cfdc <net_buf_simple_add>
	rsp->request = req;
   1b000:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1b004:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1b006:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b00a:	4621      	mov	r1, r4
   1b00c:	4628      	mov	r0, r5
}
   1b00e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b012:	4a02      	ldr	r2, [pc, #8]	; (1b01c <send_err_rsp.part.0+0x3c>)
   1b014:	f015 be79 	b.w	30d0a <bt_att_chan_send_rsp>
}
   1b018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b01c:	00030de3 	.word	0x00030de3

0001b020 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1b020:	898b      	ldrh	r3, [r1, #12]
{
   1b022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b026:	4604      	mov	r4, r0
   1b028:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   1b02a:	b963      	cbnz	r3, 1b046 <bt_att_recv+0x26>
   1b02c:	4948      	ldr	r1, [pc, #288]	; (1b150 <bt_att_recv+0x130>)
   1b02e:	4b49      	ldr	r3, [pc, #292]	; (1b154 <bt_att_recv+0x134>)
		BT_ERR("Too small ATT PDU received");
   1b030:	4849      	ldr	r0, [pc, #292]	; (1b158 <bt_att_recv+0x138>)
   1b032:	1ac9      	subs	r1, r1, r3
   1b034:	08c9      	lsrs	r1, r1, #3
   1b036:	0189      	lsls	r1, r1, #6
   1b038:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   1b03c:	f013 f9d8 	bl	2e3f0 <log_0>
}
   1b040:	2000      	movs	r0, #0
   1b042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b046:	2101      	movs	r1, #1
   1b048:	f108 0008 	add.w	r0, r8, #8
   1b04c:	f001 ffa4 	bl	1cf98 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1b050:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b054:	4605      	mov	r5, r0
   1b056:	2b00      	cmp	r3, #0
   1b058:	d0f2      	beq.n	1b040 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   1b05a:	4a40      	ldr	r2, [pc, #256]	; (1b15c <bt_att_recv+0x13c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b05c:	2300      	movs	r3, #0
   1b05e:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1b060:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1b062:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   1b066:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1b06a:	4288      	cmp	r0, r1
   1b06c:	d119      	bne.n	1b0a2 <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
   1b06e:	00d8      	lsls	r0, r3, #3
   1b070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b074:	789f      	ldrb	r7, [r3, #2]
   1b076:	2f01      	cmp	r7, #1
   1b078:	d12e      	bne.n	1b0d8 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b07a:	34f0      	adds	r4, #240	; 0xf0
   1b07c:	e8d4 3fef 	ldaex	r3, [r4]
   1b080:	f043 0201 	orr.w	r2, r3, #1
   1b084:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1b088:	2900      	cmp	r1, #0
   1b08a:	d1f7      	bne.n	1b07c <bt_att_recv+0x5c>
   1b08c:	07da      	lsls	r2, r3, #31
   1b08e:	d539      	bpl.n	1b104 <bt_att_recv+0xe4>
   1b090:	492f      	ldr	r1, [pc, #188]	; (1b150 <bt_att_recv+0x130>)
   1b092:	4b30      	ldr	r3, [pc, #192]	; (1b154 <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected request");
   1b094:	4832      	ldr	r0, [pc, #200]	; (1b160 <bt_att_recv+0x140>)
   1b096:	1ac9      	subs	r1, r1, r3
   1b098:	08c9      	lsrs	r1, r1, #3
   1b09a:	0189      	lsls	r1, r1, #6
   1b09c:	f041 0102 	orr.w	r1, r1, #2
   1b0a0:	e7cc      	b.n	1b03c <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b0a2:	3301      	adds	r3, #1
   1b0a4:	2b1c      	cmp	r3, #28
   1b0a6:	d1de      	bne.n	1b066 <bt_att_recv+0x46>
   1b0a8:	4b2a      	ldr	r3, [pc, #168]	; (1b154 <bt_att_recv+0x134>)
   1b0aa:	4a29      	ldr	r2, [pc, #164]	; (1b150 <bt_att_recv+0x130>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1b0ac:	482d      	ldr	r0, [pc, #180]	; (1b164 <bt_att_recv+0x144>)
   1b0ae:	1ad2      	subs	r2, r2, r3
   1b0b0:	08d2      	lsrs	r2, r2, #3
   1b0b2:	0192      	lsls	r2, r2, #6
   1b0b4:	f042 0202 	orr.w	r2, r2, #2
   1b0b8:	f013 f9a7 	bl	2e40a <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   1b0bc:	7829      	ldrb	r1, [r5, #0]
   1b0be:	4608      	mov	r0, r1
   1b0c0:	f015 fd04 	bl	30acc <att_op_get_type>
   1b0c4:	2800      	cmp	r0, #0
   1b0c6:	d0bb      	beq.n	1b040 <bt_att_recv+0x20>
	if (!req) {
   1b0c8:	2900      	cmp	r1, #0
   1b0ca:	d0b9      	beq.n	1b040 <bt_att_recv+0x20>
   1b0cc:	2306      	movs	r3, #6
   1b0ce:	2200      	movs	r2, #0
   1b0d0:	4630      	mov	r0, r6
   1b0d2:	f7ff ff85 	bl	1afe0 <send_err_rsp.part.0>
   1b0d6:	e7b3      	b.n	1b040 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1b0d8:	2f05      	cmp	r7, #5
   1b0da:	d113      	bne.n	1b104 <bt_att_recv+0xe4>
   1b0dc:	34f0      	adds	r4, #240	; 0xf0
   1b0de:	e8d4 3fef 	ldaex	r3, [r4]
   1b0e2:	f043 0202 	orr.w	r2, r3, #2
   1b0e6:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1b0ea:	2900      	cmp	r1, #0
   1b0ec:	d1f7      	bne.n	1b0de <bt_att_recv+0xbe>
   1b0ee:	079b      	lsls	r3, r3, #30
   1b0f0:	d508      	bpl.n	1b104 <bt_att_recv+0xe4>
   1b0f2:	4917      	ldr	r1, [pc, #92]	; (1b150 <bt_att_recv+0x130>)
   1b0f4:	4b17      	ldr	r3, [pc, #92]	; (1b154 <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected indication");
   1b0f6:	481c      	ldr	r0, [pc, #112]	; (1b168 <bt_att_recv+0x148>)
   1b0f8:	1ac9      	subs	r1, r1, r3
   1b0fa:	08c9      	lsrs	r1, r1, #3
   1b0fc:	0189      	lsls	r1, r1, #6
   1b0fe:	f041 0102 	orr.w	r1, r1, #2
   1b102:	e79b      	b.n	1b03c <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   1b104:	eb0c 0300 	add.w	r3, ip, r0
   1b108:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   1b10c:	785a      	ldrb	r2, [r3, #1]
   1b10e:	428a      	cmp	r2, r1
   1b110:	d90e      	bls.n	1b130 <bt_att_recv+0x110>
   1b112:	4a10      	ldr	r2, [pc, #64]	; (1b154 <bt_att_recv+0x134>)
   1b114:	4b0e      	ldr	r3, [pc, #56]	; (1b150 <bt_att_recv+0x130>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b116:	4815      	ldr	r0, [pc, #84]	; (1b16c <bt_att_recv+0x14c>)
   1b118:	1a9b      	subs	r3, r3, r2
   1b11a:	08db      	lsrs	r3, r3, #3
   1b11c:	019b      	lsls	r3, r3, #6
   1b11e:	782a      	ldrb	r2, [r5, #0]
   1b120:	f043 0301 	orr.w	r3, r3, #1
   1b124:	f013 f985 	bl	2e432 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   1b128:	2f01      	cmp	r7, #1
   1b12a:	d189      	bne.n	1b040 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1b12c:	2304      	movs	r3, #4
   1b12e:	e009      	b.n	1b144 <bt_att_recv+0x124>
		err = handler->func(att_chan, buf);
   1b130:	685b      	ldr	r3, [r3, #4]
   1b132:	4641      	mov	r1, r8
   1b134:	4630      	mov	r0, r6
   1b136:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1b138:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   1b13a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1b13c:	d180      	bne.n	1b040 <bt_att_recv+0x20>
   1b13e:	2800      	cmp	r0, #0
   1b140:	f43f af7e 	beq.w	1b040 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1b144:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1b146:	2900      	cmp	r1, #0
   1b148:	f43f af7a 	beq.w	1b040 <bt_att_recv+0x20>
   1b14c:	e7bf      	b.n	1b0ce <bt_att_recv+0xae>
   1b14e:	bf00      	nop
   1b150:	000364d0 	.word	0x000364d0
   1b154:	000364b0 	.word	0x000364b0
   1b158:	0003a269 	.word	0x0003a269
   1b15c:	00036b9c 	.word	0x00036b9c
   1b160:	0003a284 	.word	0x0003a284
   1b164:	0003a2de 	.word	0x0003a2de
   1b168:	0003a2a0 	.word	0x0003a2a0
   1b16c:	0003a2bf 	.word	0x0003a2bf

0001b170 <att_write_req>:
{
   1b170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b174:	4604      	mov	r4, r0
   1b176:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1b178:	f101 0008 	add.w	r0, r1, #8
   1b17c:	460d      	mov	r5, r1
   1b17e:	f016 fa90 	bl	316a2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b182:	6823      	ldr	r3, [r4, #0]
   1b184:	4606      	mov	r6, r0
   1b186:	2101      	movs	r1, #1
   1b188:	6818      	ldr	r0, [r3, #0]
			     handle, 0, buf->data, buf->len);
   1b18a:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b18e:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b190:	f016 fa22 	bl	315d8 <bt_gatt_change_aware>
   1b194:	2800      	cmp	r0, #0
   1b196:	d040      	beq.n	1b21a <att_write_req+0xaa>
	if (!handle) {
   1b198:	2e00      	cmp	r6, #0
   1b19a:	d040      	beq.n	1b21e <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   1b19c:	2218      	movs	r2, #24
   1b19e:	2100      	movs	r1, #0
   1b1a0:	4668      	mov	r0, sp
   1b1a2:	f01a fa10 	bl	355c6 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1b1a6:	2200      	movs	r2, #0
   1b1a8:	2113      	movs	r1, #19
   1b1aa:	4620      	mov	r0, r4
   1b1ac:	f7ff feb6 	bl	1af1c <bt_att_chan_create_pdu>
   1b1b0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1b1b2:	b380      	cbz	r0, 1b216 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   1b1b4:	6823      	ldr	r3, [r4, #0]
	data.req = req;
   1b1b6:	f04f 0812 	mov.w	r8, #18
	data.conn = chan->att->conn;
   1b1ba:	681b      	ldr	r3, [r3, #0]
	data.offset = offset;
   1b1bc:	2700      	movs	r7, #0
	data.conn = chan->att->conn;
   1b1be:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b1c0:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b1c2:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b1c4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b1c8:	4630      	mov	r0, r6
   1b1ca:	466b      	mov	r3, sp
   1b1cc:	4a15      	ldr	r2, [pc, #84]	; (1b224 <att_write_req+0xb4>)
	data.len = len;
   1b1ce:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1b1d2:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   1b1d6:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   1b1da:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b1de:	f015 fcbb 	bl	30b58 <bt_gatt_foreach_attr>
	if (data.err) {
   1b1e2:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1b1e6:	b175      	cbz	r5, 1b206 <att_write_req+0x96>
			net_buf_unref(data.buf);
   1b1e8:	9801      	ldr	r0, [sp, #4]
   1b1ea:	f001 fdc7 	bl	1cd7c <net_buf_unref>
	if (!req) {
   1b1ee:	4632      	mov	r2, r6
   1b1f0:	4641      	mov	r1, r8
   1b1f2:	4620      	mov	r0, r4
   1b1f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b1f8:	f7ff fef2 	bl	1afe0 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1b1fc:	463d      	mov	r5, r7
}
   1b1fe:	4628      	mov	r0, r5
   1b200:	b007      	add	sp, #28
   1b202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   1b206:	9901      	ldr	r1, [sp, #4]
   1b208:	2900      	cmp	r1, #0
   1b20a:	d0f8      	beq.n	1b1fe <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b20c:	4620      	mov	r0, r4
   1b20e:	4a06      	ldr	r2, [pc, #24]	; (1b228 <att_write_req+0xb8>)
   1b210:	f015 fd7b 	bl	30d0a <bt_att_chan_send_rsp>
   1b214:	e7f3      	b.n	1b1fe <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   1b216:	250e      	movs	r5, #14
   1b218:	e7f1      	b.n	1b1fe <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b21a:	2512      	movs	r5, #18
   1b21c:	e7ef      	b.n	1b1fe <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b21e:	2501      	movs	r5, #1
   1b220:	e7ed      	b.n	1b1fe <att_write_req+0x8e>
   1b222:	bf00      	nop
   1b224:	00030ea5 	.word	0x00030ea5
   1b228:	00030de3 	.word	0x00030de3

0001b22c <bt_att_create_pdu>:
{
   1b22c:	b570      	push	{r4, r5, r6, lr}
   1b22e:	460e      	mov	r6, r1
   1b230:	4615      	mov	r5, r2
	att = att_get(conn);
   1b232:	f7ff fd4d 	bl	1acd0 <att_get>
	if (!att) {
   1b236:	b1c0      	cbz	r0, 1b26a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b238:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
   1b23a:	1c69      	adds	r1, r5, #1
   1b23c:	b15b      	cbz	r3, 1b256 <bt_att_create_pdu+0x2a>
   1b23e:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1b242:	d008      	beq.n	1b256 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b244:	681b      	ldr	r3, [r3, #0]
   1b246:	b10b      	cbz	r3, 1b24c <bt_att_create_pdu+0x20>
   1b248:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b24c:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   1b250:	4291      	cmp	r1, r2
   1b252:	d90c      	bls.n	1b26e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b254:	b98b      	cbnz	r3, 1b27a <bt_att_create_pdu+0x4e>
   1b256:	4a0e      	ldr	r2, [pc, #56]	; (1b290 <bt_att_create_pdu+0x64>)
   1b258:	4b0e      	ldr	r3, [pc, #56]	; (1b294 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1b25a:	480f      	ldr	r0, [pc, #60]	; (1b298 <bt_att_create_pdu+0x6c>)
   1b25c:	1ad2      	subs	r2, r2, r3
   1b25e:	08d2      	lsrs	r2, r2, #3
   1b260:	0192      	lsls	r2, r2, #6
   1b262:	f042 0202 	orr.w	r2, r2, #2
   1b266:	f013 f8d0 	bl	2e40a <log_1>
}
   1b26a:	2000      	movs	r0, #0
   1b26c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1b26e:	462a      	mov	r2, r5
   1b270:	4631      	mov	r1, r6
}
   1b272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1b276:	f7ff be51 	b.w	1af1c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b27a:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   1b27e:	d004      	beq.n	1b28a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b280:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b284:	b10c      	cbz	r4, 1b28a <bt_att_create_pdu+0x5e>
   1b286:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   1b28a:	4618      	mov	r0, r3
   1b28c:	4623      	mov	r3, r4
   1b28e:	e7dd      	b.n	1b24c <bt_att_create_pdu+0x20>
   1b290:	000364d0 	.word	0x000364d0
   1b294:	000364b0 	.word	0x000364b0
   1b298:	0003a2f8 	.word	0x0003a2f8

0001b29c <att_read_group_req>:
{
   1b29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b2a0:	7b0c      	ldrb	r4, [r1, #12]
{
   1b2a2:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b2a4:	3c04      	subs	r4, #4
   1b2a6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b2a8:	2c02      	cmp	r4, #2
{
   1b2aa:	4608      	mov	r0, r1
   1b2ac:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1b2ae:	d001      	beq.n	1b2b4 <att_read_group_req+0x18>
   1b2b0:	2c10      	cmp	r4, #16
   1b2b2:	d16f      	bne.n	1b394 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b2b4:	2104      	movs	r1, #4
   1b2b6:	3008      	adds	r0, #8
   1b2b8:	f001 fe6e 	bl	1cf98 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b2bc:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b2c0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b2c2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b2c4:	1d01      	adds	r1, r0, #4
   1b2c6:	4622      	mov	r2, r4
   1b2c8:	4640      	mov	r0, r8
   1b2ca:	f015 f921 	bl	30510 <bt_uuid_create>
   1b2ce:	2800      	cmp	r0, #0
   1b2d0:	d062      	beq.n	1b398 <att_read_group_req+0xfc>
	if (!start || !end) {
   1b2d2:	2e00      	cmp	r6, #0
   1b2d4:	d03a      	beq.n	1b34c <att_read_group_req+0xb0>
   1b2d6:	2400      	movs	r4, #0
   1b2d8:	2f00      	cmp	r7, #0
   1b2da:	d036      	beq.n	1b34a <att_read_group_req+0xae>
	if (start > end) {
   1b2dc:	42b7      	cmp	r7, r6
   1b2de:	d335      	bcc.n	1b34c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b2e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b2e4:	4640      	mov	r0, r8
   1b2e6:	a901      	add	r1, sp, #4
   1b2e8:	f88d 4004 	strb.w	r4, [sp, #4]
   1b2ec:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b2f0:	f015 f8e4 	bl	304bc <bt_uuid_cmp>
   1b2f4:	2800      	cmp	r0, #0
   1b2f6:	d134      	bne.n	1b362 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b2f8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b2fa:	2214      	movs	r2, #20
   1b2fc:	2100      	movs	r1, #0
   1b2fe:	a807      	add	r0, sp, #28
   1b300:	f01a f961 	bl	355c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1b304:	2201      	movs	r2, #1
   1b306:	2111      	movs	r1, #17
   1b308:	4620      	mov	r0, r4
   1b30a:	f7ff ff8f 	bl	1b22c <bt_att_create_pdu>
   1b30e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1b310:	2800      	cmp	r0, #0
   1b312:	d041      	beq.n	1b398 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   1b314:	2101      	movs	r1, #1
   1b316:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b318:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1b31c:	f001 fe5e 	bl	1cfdc <net_buf_simple_add>
	data.rsp->len = 0U;
   1b320:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b324:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b326:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1b328:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b32c:	4639      	mov	r1, r7
   1b32e:	4630      	mov	r0, r6
   1b330:	4a1a      	ldr	r2, [pc, #104]	; (1b39c <att_read_group_req+0x100>)
	data.group = NULL;
   1b332:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b336:	f015 fc0f 	bl	30b58 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1b33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b33c:	781c      	ldrb	r4, [r3, #0]
   1b33e:	bb1c      	cbnz	r4, 1b388 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1b340:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b342:	f001 fd1b 	bl	1cd7c <net_buf_unref>
	if (!req) {
   1b346:	230a      	movs	r3, #10
   1b348:	e018      	b.n	1b37c <att_read_group_req+0xe0>
			*err = 0U;
   1b34a:	463e      	mov	r6, r7
	if (!req) {
   1b34c:	2301      	movs	r3, #1
   1b34e:	4632      	mov	r2, r6
   1b350:	2110      	movs	r1, #16
   1b352:	4628      	mov	r0, r5
   1b354:	f7ff fe44 	bl	1afe0 <send_err_rsp.part.0>
		return 0;
   1b358:	2400      	movs	r4, #0
}
   1b35a:	4620      	mov	r0, r4
   1b35c:	b00c      	add	sp, #48	; 0x30
   1b35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1b362:	f642 0301 	movw	r3, #10241	; 0x2801
   1b366:	4640      	mov	r0, r8
   1b368:	a907      	add	r1, sp, #28
   1b36a:	f88d 401c 	strb.w	r4, [sp, #28]
   1b36e:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b372:	f015 f8a3 	bl	304bc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b376:	2800      	cmp	r0, #0
   1b378:	d0be      	beq.n	1b2f8 <att_read_group_req+0x5c>
	if (!req) {
   1b37a:	2310      	movs	r3, #16
   1b37c:	4632      	mov	r2, r6
   1b37e:	2110      	movs	r1, #16
   1b380:	4628      	mov	r0, r5
   1b382:	f7ff fe2d 	bl	1afe0 <send_err_rsp.part.0>
		return 0;
   1b386:	e7e8      	b.n	1b35a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b388:	4628      	mov	r0, r5
   1b38a:	4a05      	ldr	r2, [pc, #20]	; (1b3a0 <att_read_group_req+0x104>)
   1b38c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b38e:	f015 fcbc 	bl	30d0a <bt_att_chan_send_rsp>
	return 0;
   1b392:	e7e1      	b.n	1b358 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   1b394:	2404      	movs	r4, #4
   1b396:	e7e0      	b.n	1b35a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1b398:	240e      	movs	r4, #14
   1b39a:	e7de      	b.n	1b35a <att_read_group_req+0xbe>
   1b39c:	0001a8a5 	.word	0x0001a8a5
   1b3a0:	00030de3 	.word	0x00030de3

0001b3a4 <att_read_mult_req>:
{
   1b3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b3a8:	6886      	ldr	r6, [r0, #8]
{
   1b3aa:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   1b3ac:	2210      	movs	r2, #16
{
   1b3ae:	4604      	mov	r4, r0
   1b3b0:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   1b3b2:	4668      	mov	r0, sp
   1b3b4:	2100      	movs	r1, #0
   1b3b6:	f01a f906 	bl	355c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1b3ba:	2200      	movs	r2, #0
   1b3bc:	210f      	movs	r1, #15
   1b3be:	4630      	mov	r0, r6
   1b3c0:	f7ff ff34 	bl	1b22c <bt_att_create_pdu>
   1b3c4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b3c6:	b360      	cbz	r0, 1b422 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b3c8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b3cc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1b42c <att_read_mult_req+0x88>
	data.chan = chan;
   1b3d0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1b3d2:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   1b3d6:	89ab      	ldrh	r3, [r5, #12]
   1b3d8:	2b01      	cmp	r3, #1
   1b3da:	d805      	bhi.n	1b3e8 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b3dc:	4620      	mov	r0, r4
   1b3de:	4a12      	ldr	r2, [pc, #72]	; (1b428 <att_read_mult_req+0x84>)
   1b3e0:	9902      	ldr	r1, [sp, #8]
   1b3e2:	f015 fc92 	bl	30d0a <bt_att_chan_send_rsp>
   1b3e6:	e018      	b.n	1b41a <att_read_mult_req+0x76>
   1b3e8:	4638      	mov	r0, r7
   1b3ea:	f016 f95a 	bl	316a2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b3ee:	466b      	mov	r3, sp
   1b3f0:	464a      	mov	r2, r9
   1b3f2:	4601      	mov	r1, r0
   1b3f4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b3f6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b3fa:	f015 fbad 	bl	30b58 <bt_gatt_foreach_attr>
		if (data.err) {
   1b3fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b402:	2b00      	cmp	r3, #0
   1b404:	d0e7      	beq.n	1b3d6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   1b406:	9802      	ldr	r0, [sp, #8]
   1b408:	f001 fcb8 	bl	1cd7c <net_buf_unref>
	if (!req) {
   1b40c:	4632      	mov	r2, r6
   1b40e:	210e      	movs	r1, #14
   1b410:	4620      	mov	r0, r4
   1b412:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b416:	f7ff fde3 	bl	1afe0 <send_err_rsp.part.0>
	return 0;
   1b41a:	2000      	movs	r0, #0
}
   1b41c:	b005      	add	sp, #20
   1b41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   1b422:	200e      	movs	r0, #14
   1b424:	e7fa      	b.n	1b41c <att_read_mult_req+0x78>
   1b426:	bf00      	nop
   1b428:	00030de3 	.word	0x00030de3
   1b42c:	00030f73 	.word	0x00030f73

0001b430 <att_read_rsp>:
{
   1b430:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b434:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   1b438:	4605      	mov	r5, r0
   1b43a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b43c:	4640      	mov	r0, r8
   1b43e:	2101      	movs	r1, #1
{
   1b440:	4614      	mov	r4, r2
   1b442:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1b444:	f016 f8c8 	bl	315d8 <bt_gatt_change_aware>
   1b448:	b390      	cbz	r0, 1b4b0 <att_read_rsp+0x80>
	if (!handle) {
   1b44a:	b39e      	cbz	r6, 1b4b4 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   1b44c:	2210      	movs	r2, #16
   1b44e:	2100      	movs	r1, #0
   1b450:	4668      	mov	r0, sp
   1b452:	f01a f8b8 	bl	355c6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1b456:	2200      	movs	r2, #0
   1b458:	4621      	mov	r1, r4
   1b45a:	4640      	mov	r0, r8
   1b45c:	f7ff fee6 	bl	1b22c <bt_att_create_pdu>
   1b460:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b462:	b348      	cbz	r0, 1b4b8 <att_read_rsp+0x88>
	data.offset = offset;
   1b464:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b468:	4631      	mov	r1, r6
	data.offset = offset;
   1b46a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b46e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b470:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b472:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b476:	4a11      	ldr	r2, [pc, #68]	; (1b4bc <att_read_rsp+0x8c>)
   1b478:	466b      	mov	r3, sp
	data.chan = chan;
   1b47a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b47c:	f015 fb6c 	bl	30b58 <bt_gatt_foreach_attr>
	if (data.err) {
   1b480:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1b484:	b174      	cbz	r4, 1b4a4 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1b486:	9802      	ldr	r0, [sp, #8]
   1b488:	f001 fc78 	bl	1cd7c <net_buf_unref>
	if (!req) {
   1b48c:	4632      	mov	r2, r6
   1b48e:	4639      	mov	r1, r7
   1b490:	4628      	mov	r0, r5
   1b492:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b496:	f7ff fda3 	bl	1afe0 <send_err_rsp.part.0>
		return 0;
   1b49a:	2400      	movs	r4, #0
}
   1b49c:	4620      	mov	r0, r4
   1b49e:	b004      	add	sp, #16
   1b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b4a4:	4628      	mov	r0, r5
   1b4a6:	4a06      	ldr	r2, [pc, #24]	; (1b4c0 <att_read_rsp+0x90>)
   1b4a8:	9902      	ldr	r1, [sp, #8]
   1b4aa:	f015 fc2e 	bl	30d0a <bt_att_chan_send_rsp>
	return 0;
   1b4ae:	e7f5      	b.n	1b49c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b4b0:	2412      	movs	r4, #18
   1b4b2:	e7f3      	b.n	1b49c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b4b4:	2401      	movs	r4, #1
   1b4b6:	e7f1      	b.n	1b49c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1b4b8:	240e      	movs	r4, #14
   1b4ba:	e7ef      	b.n	1b49c <att_read_rsp+0x6c>
   1b4bc:	00030f73 	.word	0x00030f73
   1b4c0:	00030de3 	.word	0x00030de3

0001b4c4 <att_read_type_req>:
{
   1b4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b4c8:	7b0c      	ldrb	r4, [r1, #12]
{
   1b4ca:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b4cc:	3c04      	subs	r4, #4
   1b4ce:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b4d0:	2c02      	cmp	r4, #2
{
   1b4d2:	4608      	mov	r0, r1
   1b4d4:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1b4d6:	d001      	beq.n	1b4dc <att_read_type_req+0x18>
   1b4d8:	2c10      	cmp	r4, #16
   1b4da:	d150      	bne.n	1b57e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b4dc:	2104      	movs	r1, #4
   1b4de:	3008      	adds	r0, #8
   1b4e0:	f001 fd5a 	bl	1cf98 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b4e4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b4e8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b4ea:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b4ec:	1d01      	adds	r1, r0, #4
   1b4ee:	4622      	mov	r2, r4
   1b4f0:	4640      	mov	r0, r8
   1b4f2:	f015 f80d 	bl	30510 <bt_uuid_create>
   1b4f6:	b188      	cbz	r0, 1b51c <att_read_type_req+0x58>
	if (!start || !end) {
   1b4f8:	b19e      	cbz	r6, 1b522 <att_read_type_req+0x5e>
   1b4fa:	b18f      	cbz	r7, 1b520 <att_read_type_req+0x5c>
	if (start > end) {
   1b4fc:	42be      	cmp	r6, r7
   1b4fe:	d810      	bhi.n	1b522 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1b500:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1b502:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b504:	2100      	movs	r1, #0
   1b506:	eb0d 0002 	add.w	r0, sp, r2
   1b50a:	f01a f85c 	bl	355c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1b50e:	2201      	movs	r2, #1
   1b510:	2109      	movs	r1, #9
   1b512:	4620      	mov	r0, r4
   1b514:	f7ff fe8a 	bl	1b22c <bt_att_create_pdu>
   1b518:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1b51a:	b968      	cbnz	r0, 1b538 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1b51c:	240e      	movs	r4, #14
   1b51e:	e007      	b.n	1b530 <att_read_type_req+0x6c>
			*err = 0U;
   1b520:	463e      	mov	r6, r7
	if (!req) {
   1b522:	2301      	movs	r3, #1
   1b524:	4632      	mov	r2, r6
   1b526:	2108      	movs	r1, #8
   1b528:	4628      	mov	r0, r5
   1b52a:	f7ff fd59 	bl	1afe0 <send_err_rsp.part.0>
		return 0;
   1b52e:	2400      	movs	r4, #0
}
   1b530:	4620      	mov	r0, r4
   1b532:	b00c      	add	sp, #48	; 0x30
   1b534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1b538:	2101      	movs	r1, #1
   1b53a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b53c:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1b540:	f001 fd4c 	bl	1cfdc <net_buf_simple_add>
	data.rsp->len = 0U;
   1b544:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b548:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b54a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b54c:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1b54e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b552:	4a0c      	ldr	r2, [pc, #48]	; (1b584 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b554:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b558:	4630      	mov	r0, r6
   1b55a:	ab06      	add	r3, sp, #24
   1b55c:	f015 fafc 	bl	30b58 <bt_gatt_foreach_attr>
	if (data.err) {
   1b560:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1b564:	b12c      	cbz	r4, 1b572 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1b566:	9808      	ldr	r0, [sp, #32]
   1b568:	f001 fc08 	bl	1cd7c <net_buf_unref>
	if (!req) {
   1b56c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b570:	e7d8      	b.n	1b524 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b572:	4628      	mov	r0, r5
   1b574:	4a04      	ldr	r2, [pc, #16]	; (1b588 <att_read_type_req+0xc4>)
   1b576:	9908      	ldr	r1, [sp, #32]
   1b578:	f015 fbc7 	bl	30d0a <bt_att_chan_send_rsp>
	return 0;
   1b57c:	e7d8      	b.n	1b530 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1b57e:	2404      	movs	r4, #4
   1b580:	e7d6      	b.n	1b530 <att_read_type_req+0x6c>
   1b582:	bf00      	nop
   1b584:	0001a951 	.word	0x0001a951
   1b588:	00030de3 	.word	0x00030de3

0001b58c <att_find_type_req>:
{
   1b58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b590:	4688      	mov	r8, r1
   1b592:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1b594:	2106      	movs	r1, #6
   1b596:	b086      	sub	sp, #24
   1b598:	f108 0008 	add.w	r0, r8, #8
   1b59c:	f001 fcfc 	bl	1cf98 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b5a0:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1b5a2:	b317      	cbz	r7, 1b5ea <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b5a4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1b5a8:	f1b9 0f00 	cmp.w	r9, #0
   1b5ac:	d01c      	beq.n	1b5e8 <att_find_type_req+0x5c>
	if (start > end) {
   1b5ae:	45b9      	cmp	r9, r7
   1b5b0:	d31b      	bcc.n	1b5ea <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1b5b2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b5b4:	2400      	movs	r4, #0
   1b5b6:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b5ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b5be:	4668      	mov	r0, sp
   1b5c0:	a901      	add	r1, sp, #4
	value = buf->data;
   1b5c2:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b5c6:	f88d 4000 	strb.w	r4, [sp]
   1b5ca:	f88d 4004 	strb.w	r4, [sp, #4]
   1b5ce:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b5d2:	f014 ff73 	bl	304bc <bt_uuid_cmp>
   1b5d6:	4606      	mov	r6, r0
   1b5d8:	b190      	cbz	r0, 1b600 <att_find_type_req+0x74>
	if (!req) {
   1b5da:	230a      	movs	r3, #10
   1b5dc:	463a      	mov	r2, r7
   1b5de:	2106      	movs	r1, #6
   1b5e0:	4628      	mov	r0, r5
   1b5e2:	f7ff fcfd 	bl	1afe0 <send_err_rsp.part.0>
		return 0;
   1b5e6:	e007      	b.n	1b5f8 <att_find_type_req+0x6c>
			*err = 0U;
   1b5e8:	464f      	mov	r7, r9
	if (!req) {
   1b5ea:	2301      	movs	r3, #1
   1b5ec:	463a      	mov	r2, r7
   1b5ee:	2106      	movs	r1, #6
   1b5f0:	4628      	mov	r0, r5
   1b5f2:	f7ff fcf5 	bl	1afe0 <send_err_rsp.part.0>
		return 0;
   1b5f6:	2400      	movs	r4, #0
}
   1b5f8:	4620      	mov	r0, r4
   1b5fa:	b006      	add	sp, #24
   1b5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b600:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b604:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b608:	4601      	mov	r1, r0
   1b60a:	2214      	movs	r2, #20
   1b60c:	a801      	add	r0, sp, #4
   1b60e:	f019 ffda 	bl	355c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b612:	4632      	mov	r2, r6
   1b614:	2107      	movs	r1, #7
   1b616:	4640      	mov	r0, r8
   1b618:	f7ff fe08 	bl	1b22c <bt_att_create_pdu>
   1b61c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b61e:	b1e0      	cbz	r0, 1b65a <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b620:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b622:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b624:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b628:	4638      	mov	r0, r7
   1b62a:	4a0d      	ldr	r2, [pc, #52]	; (1b660 <att_find_type_req+0xd4>)
   1b62c:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   1b62e:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   1b632:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1b636:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b638:	f015 fa8e 	bl	30b58 <bt_gatt_foreach_attr>
	if (data.err) {
   1b63c:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1b640:	b12c      	cbz	r4, 1b64e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1b642:	9802      	ldr	r0, [sp, #8]
   1b644:	f001 fb9a 	bl	1cd7c <net_buf_unref>
	if (!req) {
   1b648:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b64c:	e7ce      	b.n	1b5ec <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b64e:	4628      	mov	r0, r5
   1b650:	4a04      	ldr	r2, [pc, #16]	; (1b664 <att_find_type_req+0xd8>)
   1b652:	9902      	ldr	r1, [sp, #8]
   1b654:	f015 fb59 	bl	30d0a <bt_att_chan_send_rsp>
	return 0;
   1b658:	e7ce      	b.n	1b5f8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1b65a:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b65c:	e7cc      	b.n	1b5f8 <att_find_type_req+0x6c>
   1b65e:	bf00      	nop
   1b660:	0001a9f9 	.word	0x0001a9f9
   1b664:	00030de3 	.word	0x00030de3

0001b668 <att_find_info_req>:
{
   1b668:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1b66a:	688b      	ldr	r3, [r1, #8]
{
   1b66c:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b66e:	881e      	ldrh	r6, [r3, #0]
{
   1b670:	b085      	sub	sp, #20
	if (!start || !end) {
   1b672:	b19e      	cbz	r6, 1b69c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b674:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1b676:	b184      	cbz	r4, 1b69a <att_find_info_req+0x32>
	if (start > end) {
   1b678:	42a6      	cmp	r6, r4
   1b67a:	d80f      	bhi.n	1b69c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b67c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1b67e:	2210      	movs	r2, #16
   1b680:	2100      	movs	r1, #0
   1b682:	4668      	mov	r0, sp
   1b684:	f019 ff9f 	bl	355c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b688:	2200      	movs	r2, #0
   1b68a:	2105      	movs	r1, #5
   1b68c:	4638      	mov	r0, r7
   1b68e:	f7ff fdcd 	bl	1b22c <bt_att_create_pdu>
   1b692:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1b694:	b958      	cbnz	r0, 1b6ae <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1b696:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1b698:	e007      	b.n	1b6aa <att_find_info_req+0x42>
			*err = 0U;
   1b69a:	4626      	mov	r6, r4
	if (!req) {
   1b69c:	2301      	movs	r3, #1
   1b69e:	4632      	mov	r2, r6
   1b6a0:	2104      	movs	r1, #4
   1b6a2:	4628      	mov	r0, r5
   1b6a4:	f7ff fc9c 	bl	1afe0 <send_err_rsp.part.0>
	return 0;
   1b6a8:	2000      	movs	r0, #0
}
   1b6aa:	b005      	add	sp, #20
   1b6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b6ae:	4621      	mov	r1, r4
   1b6b0:	466b      	mov	r3, sp
   1b6b2:	4630      	mov	r0, r6
   1b6b4:	4a08      	ldr	r2, [pc, #32]	; (1b6d8 <att_find_info_req+0x70>)
	data.chan = chan;
   1b6b6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b6b8:	f015 fa4e 	bl	30b58 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1b6bc:	9c02      	ldr	r4, [sp, #8]
   1b6be:	b924      	cbnz	r4, 1b6ca <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   1b6c0:	9801      	ldr	r0, [sp, #4]
   1b6c2:	f001 fb5b 	bl	1cd7c <net_buf_unref>
	if (!req) {
   1b6c6:	230a      	movs	r3, #10
   1b6c8:	e7e9      	b.n	1b69e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b6ca:	4628      	mov	r0, r5
   1b6cc:	4a03      	ldr	r2, [pc, #12]	; (1b6dc <att_find_info_req+0x74>)
   1b6ce:	9901      	ldr	r1, [sp, #4]
   1b6d0:	f015 fb1b 	bl	30d0a <bt_att_chan_send_rsp>
   1b6d4:	e7e8      	b.n	1b6a8 <att_find_info_req+0x40>
   1b6d6:	bf00      	nop
   1b6d8:	00030d3d 	.word	0x00030d3d
   1b6dc:	00030de3 	.word	0x00030de3

0001b6e0 <att_mtu_req>:
{
   1b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1b6e2:	4603      	mov	r3, r0
   1b6e4:	f853 2bf8 	ldr.w	r2, [r3], #248
{
   1b6e8:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1b6ea:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b6ec:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b6f0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1b6f4:	071b      	lsls	r3, r3, #28
   1b6f6:	d41b      	bmi.n	1b730 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b6f8:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b6fa:	881b      	ldrh	r3, [r3, #0]
   1b6fc:	2b16      	cmp	r3, #22
   1b6fe:	d919      	bls.n	1b734 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b700:	2202      	movs	r2, #2
   1b702:	2103      	movs	r1, #3
   1b704:	f7ff fd92 	bl	1b22c <bt_att_create_pdu>
	if (!pdu) {
   1b708:	4606      	mov	r6, r0
   1b70a:	b1a8      	cbz	r0, 1b738 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   1b70c:	2102      	movs	r1, #2
   1b70e:	3008      	adds	r0, #8
   1b710:	f001 fc64 	bl	1cfdc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b714:	2717      	movs	r7, #23
   1b716:	7044      	strb	r4, [r0, #1]
   1b718:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1b71a:	4631      	mov	r1, r6
   1b71c:	4628      	mov	r0, r5
   1b71e:	4a07      	ldr	r2, [pc, #28]	; (1b73c <att_mtu_req+0x5c>)
   1b720:	f015 faf3 	bl	30d0a <bt_att_chan_send_rsp>
	return 0;
   1b724:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b726:	f8a5 707a 	strh.w	r7, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b72a:	f8a5 7086 	strh.w	r7, [r5, #134]	; 0x86
}
   1b72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1b730:	2006      	movs	r0, #6
   1b732:	e7fc      	b.n	1b72e <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   1b734:	2004      	movs	r0, #4
   1b736:	e7fa      	b.n	1b72e <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   1b738:	200e      	movs	r0, #14
   1b73a:	e7f8      	b.n	1b72e <att_mtu_req+0x4e>
   1b73c:	00030de3 	.word	0x00030de3

0001b740 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1b740:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   1b742:	2400      	movs	r4, #0
{
   1b744:	4602      	mov	r2, r0
   1b746:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b748:	4807      	ldr	r0, [pc, #28]	; (1b768 <bt_att_req_alloc+0x28>)
   1b74a:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1b74c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b74e:	f00d fa03 	bl	28b58 <k_mem_slab_alloc>
   1b752:	4601      	mov	r1, r0
   1b754:	b930      	cbnz	r0, 1b764 <bt_att_req_alloc+0x24>
   1b756:	2210      	movs	r2, #16
   1b758:	9801      	ldr	r0, [sp, #4]
   1b75a:	f019 ff34 	bl	355c6 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   1b75e:	9801      	ldr	r0, [sp, #4]
}
   1b760:	b002      	add	sp, #8
   1b762:	bd10      	pop	{r4, pc}
		return NULL;
   1b764:	4620      	mov	r0, r4
   1b766:	e7fb      	b.n	1b760 <bt_att_req_alloc+0x20>
   1b768:	20014dc8 	.word	0x20014dc8

0001b76c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1b76c:	b507      	push	{r0, r1, r2, lr}
   1b76e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1b770:	6880      	ldr	r0, [r0, #8]
   1b772:	b120      	cbz	r0, 1b77e <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   1b774:	f001 fb02 	bl	1cd7c <net_buf_unref>
		req->buf = NULL;
   1b778:	2200      	movs	r2, #0
   1b77a:	9b01      	ldr	r3, [sp, #4]
   1b77c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1b77e:	4803      	ldr	r0, [pc, #12]	; (1b78c <bt_att_req_free+0x20>)
   1b780:	a901      	add	r1, sp, #4
   1b782:	f00d fa55 	bl	28c30 <k_mem_slab_free>
}
   1b786:	b003      	add	sp, #12
   1b788:	f85d fb04 	ldr.w	pc, [sp], #4
   1b78c:	20014dc8 	.word	0x20014dc8

0001b790 <att_handle_rsp>:
{
   1b790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b794:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1b796:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   1b79a:	460f      	mov	r7, r1
   1b79c:	4690      	mov	r8, r2
   1b79e:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1b7a0:	f00e fde0 	bl	2a364 <k_work_cancel_delayable>
	if (!chan->req) {
   1b7a4:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
   1b7a8:	b9e5      	cbnz	r5, 1b7e4 <att_handle_rsp+0x54>
   1b7aa:	4919      	ldr	r1, [pc, #100]	; (1b810 <att_handle_rsp+0x80>)
   1b7ac:	4819      	ldr	r0, [pc, #100]	; (1b814 <att_handle_rsp+0x84>)
	bt_att_func_t func = NULL;
   1b7ae:	46aa      	mov	sl, r5
   1b7b0:	1a40      	subs	r0, r0, r1
   1b7b2:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   1b7b4:	0180      	lsls	r0, r0, #6
   1b7b6:	f040 0102 	orr.w	r1, r0, #2
   1b7ba:	4817      	ldr	r0, [pc, #92]	; (1b818 <att_handle_rsp+0x88>)
   1b7bc:	f012 fe18 	bl	2e3f0 <log_0>
	att_req_send_process(chan->att);
   1b7c0:	6820      	ldr	r0, [r4, #0]
   1b7c2:	f015 fb43 	bl	30e4c <att_req_send_process>
	if (func) {
   1b7c6:	f1ba 0f00 	cmp.w	sl, #0
   1b7ca:	d007      	beq.n	1b7dc <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   1b7cc:	6820      	ldr	r0, [r4, #0]
   1b7ce:	f8cd 9000 	str.w	r9, [sp]
   1b7d2:	4643      	mov	r3, r8
   1b7d4:	463a      	mov	r2, r7
   1b7d6:	4631      	mov	r1, r6
   1b7d8:	6800      	ldr	r0, [r0, #0]
   1b7da:	47d0      	blx	sl
}
   1b7dc:	2000      	movs	r0, #0
   1b7de:	b003      	add	sp, #12
   1b7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1b7e4:	4b0d      	ldr	r3, [pc, #52]	; (1b81c <att_handle_rsp+0x8c>)
   1b7e6:	f04f 0b00 	mov.w	fp, #0
   1b7ea:	429d      	cmp	r5, r3
   1b7ec:	d103      	bne.n	1b7f6 <att_handle_rsp+0x66>
	bt_att_func_t func = NULL;
   1b7ee:	46da      	mov	sl, fp
		chan->req = NULL;
   1b7f0:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
		goto process;
   1b7f4:	e7e4      	b.n	1b7c0 <att_handle_rsp+0x30>
	func = chan->req->func;
   1b7f6:	f8d5 a004 	ldr.w	sl, [r5, #4]
	bt_att_req_free(chan->req);
   1b7fa:	4628      	mov	r0, r5
	chan->req->func = NULL;
   1b7fc:	f8c5 b004 	str.w	fp, [r5, #4]
	params = chan->req->user_data;
   1b800:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
   1b804:	f7ff ffb2 	bl	1b76c <bt_att_req_free>
	chan->req = NULL;
   1b808:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
   1b80c:	e7d8      	b.n	1b7c0 <att_handle_rsp+0x30>
   1b80e:	bf00      	nop
   1b810:	000364b0 	.word	0x000364b0
   1b814:	000364d0 	.word	0x000364d0
   1b818:	0003a313 	.word	0x0003a313
   1b81c:	200161d0 	.word	0x200161d0

0001b820 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1b820:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1b824:	b143      	cbz	r3, 1b838 <att_error_rsp+0x18>
   1b826:	4a05      	ldr	r2, [pc, #20]	; (1b83c <att_error_rsp+0x1c>)
   1b828:	4293      	cmp	r3, r2
   1b82a:	d005      	beq.n	1b838 <att_error_rsp+0x18>
	err = rsp->error;
   1b82c:	688b      	ldr	r3, [r1, #8]
   1b82e:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   1b830:	2200      	movs	r2, #0
   1b832:	4611      	mov	r1, r2
   1b834:	f7ff bfac 	b.w	1b790 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   1b838:	230e      	movs	r3, #14
   1b83a:	e7f9      	b.n	1b830 <att_error_rsp+0x10>
   1b83c:	200161d0 	.word	0x200161d0

0001b840 <bt_att_disconnected>:
{
   1b840:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1b842:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1b846:	4604      	mov	r4, r0
   1b848:	b085      	sub	sp, #20
	if (!att_chan->att) {
   1b84a:	b385      	cbz	r5, 1b8ae <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1b84c:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   1b850:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1b854:	f015 f8ff 	bl	30a56 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1b858:	f1a4 0608 	sub.w	r6, r4, #8
   1b85c:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   1b860:	2200      	movs	r2, #0
   1b862:	2300      	movs	r3, #0
   1b864:	4638      	mov	r0, r7
   1b866:	f001 f9f7 	bl	1cc58 <net_buf_get>
   1b86a:	4602      	mov	r2, r0
   1b86c:	bb08      	cbnz	r0, 1b8b2 <bt_att_disconnected+0x72>
	if (chan->req) {
   1b86e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1b872:	b123      	cbz	r3, 1b87e <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b874:	4601      	mov	r1, r0
   1b876:	230e      	movs	r3, #14
   1b878:	4630      	mov	r0, r6
   1b87a:	f7ff ff89 	bl	1b790 <att_handle_rsp>
	chan->att = NULL;
   1b87e:	2300      	movs	r3, #0
   1b880:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   1b884:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b886:	b993      	cbnz	r3, 1b8ae <bt_att_disconnected+0x6e>
	att_reset(att);
   1b888:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1b88a:	9803      	ldr	r0, [sp, #12]
   1b88c:	2200      	movs	r2, #0
   1b88e:	2300      	movs	r3, #0
   1b890:	300c      	adds	r0, #12
   1b892:	f001 f9e1 	bl	1cc58 <net_buf_get>
   1b896:	b978      	cbnz	r0, 1b8b8 <bt_att_disconnected+0x78>
	att->conn = NULL;
   1b898:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1b89a:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   1b89c:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1b89e:	b976      	cbnz	r6, 1b8be <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   1b8a0:	4813      	ldr	r0, [pc, #76]	; (1b8f0 <bt_att_disconnected+0xb0>)
   1b8a2:	a903      	add	r1, sp, #12
   1b8a4:	f00d f9c4 	bl	28c30 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1b8a8:	6820      	ldr	r0, [r4, #0]
   1b8aa:	f001 f83f 	bl	1c92c <bt_gatt_disconnected>
}
   1b8ae:	b005      	add	sp, #20
   1b8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1b8b2:	f001 fa63 	bl	1cd7c <net_buf_unref>
   1b8b6:	e7d3      	b.n	1b860 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   1b8b8:	f001 fa60 	bl	1cd7c <net_buf_unref>
   1b8bc:	e7e5      	b.n	1b88a <bt_att_disconnected+0x4a>
	return node->next;
   1b8be:	6835      	ldr	r5, [r6, #0]
   1b8c0:	2d00      	cmp	r5, #0
   1b8c2:	bf38      	it	cc
   1b8c4:	2500      	movcc	r5, #0
		if (req->func) {
   1b8c6:	6877      	ldr	r7, [r6, #4]
   1b8c8:	b137      	cbz	r7, 1b8d8 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1b8ca:	68f3      	ldr	r3, [r6, #12]
   1b8cc:	210e      	movs	r1, #14
   1b8ce:	9300      	str	r3, [sp, #0]
   1b8d0:	2300      	movs	r3, #0
   1b8d2:	461a      	mov	r2, r3
   1b8d4:	4618      	mov	r0, r3
   1b8d6:	47b8      	blx	r7
		bt_att_req_free(req);
   1b8d8:	4630      	mov	r0, r6
   1b8da:	f7ff ff47 	bl	1b76c <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1b8de:	2d00      	cmp	r5, #0
   1b8e0:	d0de      	beq.n	1b8a0 <bt_att_disconnected+0x60>
   1b8e2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b8e4:	462e      	mov	r6, r5
   1b8e6:	2b00      	cmp	r3, #0
   1b8e8:	bf38      	it	cc
   1b8ea:	2300      	movcc	r3, #0
   1b8ec:	461d      	mov	r5, r3
   1b8ee:	e7ea      	b.n	1b8c6 <bt_att_disconnected+0x86>
   1b8f0:	20014d88 	.word	0x20014d88

0001b8f4 <att_timeout>:
{
   1b8f4:	b510      	push	{r4, lr}
   1b8f6:	4604      	mov	r4, r0
   1b8f8:	4b07      	ldr	r3, [pc, #28]	; (1b918 <att_timeout+0x24>)
   1b8fa:	4908      	ldr	r1, [pc, #32]	; (1b91c <att_timeout+0x28>)
	BT_ERR("ATT Timeout");
   1b8fc:	4808      	ldr	r0, [pc, #32]	; (1b920 <att_timeout+0x2c>)
   1b8fe:	1ac9      	subs	r1, r1, r3
   1b900:	08c9      	lsrs	r1, r1, #3
   1b902:	0189      	lsls	r1, r1, #6
   1b904:	f041 0101 	orr.w	r1, r1, #1
   1b908:	f012 fd72 	bl	2e3f0 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1b90c:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   1b910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1b914:	f7ff bf94 	b.w	1b840 <bt_att_disconnected>
   1b918:	000364b0 	.word	0x000364b0
   1b91c:	000364d0 	.word	0x000364d0
   1b920:	0003a32a 	.word	0x0003a32a

0001b924 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1b924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b928:	460c      	mov	r4, r1
   1b92a:	4617      	mov	r7, r2
   1b92c:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1b92e:	4605      	mov	r5, r0
   1b930:	b958      	cbnz	r0, 1b94a <bt_att_send+0x26>
   1b932:	492f      	ldr	r1, [pc, #188]	; (1b9f0 <bt_att_send+0xcc>)
   1b934:	482f      	ldr	r0, [pc, #188]	; (1b9f4 <bt_att_send+0xd0>)
   1b936:	f640 33ae 	movw	r3, #2990	; 0xbae
   1b93a:	4a2f      	ldr	r2, [pc, #188]	; (1b9f8 <bt_att_send+0xd4>)
   1b93c:	f012 fa24 	bl	2dd88 <printk>
   1b940:	f640 31ae 	movw	r1, #2990	; 0xbae
   1b944:	482c      	ldr	r0, [pc, #176]	; (1b9f8 <bt_att_send+0xd4>)
   1b946:	f012 fd05 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1b94a:	b95c      	cbnz	r4, 1b964 <bt_att_send+0x40>
   1b94c:	492b      	ldr	r1, [pc, #172]	; (1b9fc <bt_att_send+0xd8>)
   1b94e:	4829      	ldr	r0, [pc, #164]	; (1b9f4 <bt_att_send+0xd0>)
   1b950:	f640 33af 	movw	r3, #2991	; 0xbaf
   1b954:	4a28      	ldr	r2, [pc, #160]	; (1b9f8 <bt_att_send+0xd4>)
   1b956:	f012 fa17 	bl	2dd88 <printk>
   1b95a:	f640 31af 	movw	r1, #2991	; 0xbaf
   1b95e:	4826      	ldr	r0, [pc, #152]	; (1b9f8 <bt_att_send+0xd4>)
   1b960:	f012 fcf8 	bl	2e354 <assert_post_action>

	att = att_get(conn);
   1b964:	4628      	mov	r0, r5
   1b966:	f7ff f9b3 	bl	1acd0 <att_get>
	if (!att) {
   1b96a:	4606      	mov	r6, r0
   1b96c:	b938      	cbnz	r0, 1b97e <bt_att_send+0x5a>
		net_buf_unref(buf);
   1b96e:	4620      	mov	r0, r4
   1b970:	f001 fa04 	bl	1cd7c <net_buf_unref>
		return -ENOTCONN;
   1b974:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1b978:	b002      	add	sp, #8
   1b97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1b97e:	b147      	cbz	r7, 1b992 <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1b980:	463b      	mov	r3, r7
   1b982:	4622      	mov	r2, r4
   1b984:	2104      	movs	r1, #4
   1b986:	4628      	mov	r0, r5
   1b988:	f8cd 8000 	str.w	r8, [sp]
   1b98c:	f015 f801 	bl	30992 <bt_l2cap_send_cb>
   1b990:	e7f2      	b.n	1b978 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1b992:	f100 070c 	add.w	r7, r0, #12
   1b996:	4621      	mov	r1, r4
   1b998:	4638      	mov	r0, r7
   1b99a:	f001 f9bb 	bl	1cd14 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1b99e:	2200      	movs	r2, #0
   1b9a0:	2300      	movs	r3, #0
   1b9a2:	4638      	mov	r0, r7
   1b9a4:	f001 f958 	bl	1cc58 <net_buf_get>
	if (!buf) {
   1b9a8:	4605      	mov	r5, r0
   1b9aa:	b908      	cbnz	r0, 1b9b0 <bt_att_send+0x8c>
	return 0;
   1b9ac:	2000      	movs	r0, #0
   1b9ae:	e7e3      	b.n	1b978 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b9b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1b9b2:	b1c3      	cbz	r3, 1b9e6 <bt_att_send+0xc2>
   1b9b4:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1b9b8:	d015      	beq.n	1b9e6 <bt_att_send+0xc2>
   1b9ba:	681c      	ldr	r4, [r3, #0]
   1b9bc:	b10c      	cbz	r4, 1b9c2 <bt_att_send+0x9e>
   1b9be:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   1b9c2:	2200      	movs	r2, #0
   1b9c4:	4629      	mov	r1, r5
   1b9c6:	f7ff f8c9 	bl	1ab5c <chan_send>
		if (err >= 0) {
   1b9ca:	2800      	cmp	r0, #0
   1b9cc:	daee      	bge.n	1b9ac <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b9ce:	b154      	cbz	r4, 1b9e6 <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b9d0:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1b9d4:	d004      	beq.n	1b9e0 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b9d6:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   1b9da:	b10b      	cbz	r3, 1b9e0 <bt_att_send+0xbc>
   1b9dc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1b9e0:	4620      	mov	r0, r4
   1b9e2:	461c      	mov	r4, r3
   1b9e4:	e7ed      	b.n	1b9c2 <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1b9e6:	4629      	mov	r1, r5
   1b9e8:	4638      	mov	r0, r7
   1b9ea:	f019 fc51 	bl	35290 <k_queue_prepend>
   1b9ee:	e7dd      	b.n	1b9ac <bt_att_send+0x88>
   1b9f0:	00039905 	.word	0x00039905
   1b9f4:	00037f2c 	.word	0x00037f2c
   1b9f8:	0003a14d 	.word	0x0003a14d
   1b9fc:	00039597 	.word	0x00039597

0001ba00 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1ba00:	b538      	push	{r3, r4, r5, lr}
   1ba02:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1ba04:	4605      	mov	r5, r0
   1ba06:	b958      	cbnz	r0, 1ba20 <bt_att_req_send+0x20>
   1ba08:	4916      	ldr	r1, [pc, #88]	; (1ba64 <bt_att_req_send+0x64>)
   1ba0a:	4817      	ldr	r0, [pc, #92]	; (1ba68 <bt_att_req_send+0x68>)
   1ba0c:	f640 33cb 	movw	r3, #3019	; 0xbcb
   1ba10:	4a16      	ldr	r2, [pc, #88]	; (1ba6c <bt_att_req_send+0x6c>)
   1ba12:	f012 f9b9 	bl	2dd88 <printk>
   1ba16:	f640 31cb 	movw	r1, #3019	; 0xbcb
   1ba1a:	4814      	ldr	r0, [pc, #80]	; (1ba6c <bt_att_req_send+0x6c>)
   1ba1c:	f012 fc9a 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1ba20:	b95c      	cbnz	r4, 1ba3a <bt_att_req_send+0x3a>
   1ba22:	4913      	ldr	r1, [pc, #76]	; (1ba70 <bt_att_req_send+0x70>)
   1ba24:	4810      	ldr	r0, [pc, #64]	; (1ba68 <bt_att_req_send+0x68>)
   1ba26:	f640 33cc 	movw	r3, #3020	; 0xbcc
   1ba2a:	4a10      	ldr	r2, [pc, #64]	; (1ba6c <bt_att_req_send+0x6c>)
   1ba2c:	f012 f9ac 	bl	2dd88 <printk>
   1ba30:	f640 31cc 	movw	r1, #3020	; 0xbcc
   1ba34:	480d      	ldr	r0, [pc, #52]	; (1ba6c <bt_att_req_send+0x6c>)
   1ba36:	f012 fc8d 	bl	2e354 <assert_post_action>

	att = att_get(conn);
   1ba3a:	4628      	mov	r0, r5
   1ba3c:	f7ff f948 	bl	1acd0 <att_get>
	if (!att) {
   1ba40:	b160      	cbz	r0, 1ba5c <bt_att_req_send+0x5c>
	parent->next = child;
   1ba42:	2300      	movs	r3, #0
   1ba44:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1ba46:	6883      	ldr	r3, [r0, #8]
   1ba48:	b92b      	cbnz	r3, 1ba56 <bt_att_req_send+0x56>
	list->head = node;
   1ba4a:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1ba4e:	f015 f9fd 	bl	30e4c <att_req_send_process>

	return 0;
   1ba52:	2000      	movs	r0, #0
}
   1ba54:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1ba56:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ba58:	6084      	str	r4, [r0, #8]
}
   1ba5a:	e7f8      	b.n	1ba4e <bt_att_req_send+0x4e>
		return -ENOTCONN;
   1ba5c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ba60:	e7f8      	b.n	1ba54 <bt_att_req_send+0x54>
   1ba62:	bf00      	nop
   1ba64:	00039905 	.word	0x00039905
   1ba68:	00037f2c 	.word	0x00037f2c
   1ba6c:	0003a14d 	.word	0x0003a14d
   1ba70:	0003a088 	.word	0x0003a088

0001ba74 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1ba74:	b510      	push	{r4, lr}
   1ba76:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1ba78:	b348      	cbz	r0, 1bace <bt_att_req_cancel+0x5a>
   1ba7a:	b341      	cbz	r1, 1bace <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   1ba7c:	f7ff f928 	bl	1acd0 <att_get>
	if (!att) {
   1ba80:	b328      	cbz	r0, 1bace <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba82:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1ba84:	b15b      	cbz	r3, 1ba9e <bt_att_req_cancel+0x2a>
   1ba86:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   1ba8a:	d008      	beq.n	1ba9e <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ba8c:	681b      	ldr	r3, [r3, #0]
   1ba8e:	b10b      	cbz	r3, 1ba94 <bt_att_req_cancel+0x20>
   1ba90:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   1ba94:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   1ba98:	4294      	cmp	r4, r2
   1ba9a:	d005      	beq.n	1baa8 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba9c:	b963      	cbnz	r3, 1bab8 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1ba9e:	4621      	mov	r1, r4
   1baa0:	3004      	adds	r0, #4
   1baa2:	f014 ffd8 	bl	30a56 <sys_slist_find_and_remove>
   1baa6:	e002      	b.n	1baae <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   1baa8:	4b09      	ldr	r3, [pc, #36]	; (1bad0 <bt_att_req_cancel+0x5c>)
   1baaa:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   1baae:	4620      	mov	r0, r4
}
   1bab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1bab4:	f7ff be5a 	b.w	1b76c <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bab8:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   1babc:	d004      	beq.n	1bac8 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1babe:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bac2:	b10a      	cbz	r2, 1bac8 <bt_att_req_cancel+0x54>
   1bac4:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   1bac8:	4619      	mov	r1, r3
   1baca:	4613      	mov	r3, r2
   1bacc:	e7e2      	b.n	1ba94 <bt_att_req_cancel+0x20>
}
   1bace:	bd10      	pop	{r4, pc}
   1bad0:	200161d0 	.word	0x200161d0

0001bad4 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1bad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1bad6:	4604      	mov	r4, r0
   1bad8:	4d0c      	ldr	r5, [pc, #48]	; (1bb0c <find_cf_cfg+0x38>)
   1bada:	b960      	cbnz	r0, 1baf6 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1badc:	9000      	str	r0, [sp, #0]
   1bade:	4669      	mov	r1, sp
   1bae0:	f8cd 0003 	str.w	r0, [sp, #3]
   1bae4:	1c68      	adds	r0, r5, #1
   1bae6:	f015 fb2f 	bl	31148 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1baea:	2800      	cmp	r0, #0
   1baec:	bf08      	it	eq
   1baee:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1baf0:	4620      	mov	r0, r4
   1baf2:	b003      	add	sp, #12
   1baf4:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1baf6:	462a      	mov	r2, r5
   1baf8:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bafc:	f014 fe8a 	bl	30814 <bt_conn_is_peer_addr_le>
   1bb00:	2800      	cmp	r0, #0
	return NULL;
   1bb02:	bf14      	ite	ne
   1bb04:	462c      	movne	r4, r5
   1bb06:	2400      	moveq	r4, #0
   1bb08:	e7f2      	b.n	1baf0 <find_cf_cfg+0x1c>
   1bb0a:	bf00      	nop
   1bb0c:	200161e0 	.word	0x200161e0

0001bb10 <find_sc_cfg>:
{
   1bb10:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1bb12:	4c06      	ldr	r4, [pc, #24]	; (1bb2c <find_sc_cfg+0x1c>)
   1bb14:	7823      	ldrb	r3, [r4, #0]
   1bb16:	4283      	cmp	r3, r0
   1bb18:	d103      	bne.n	1bb22 <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1bb1a:	1c60      	adds	r0, r4, #1
   1bb1c:	f015 fb14 	bl	31148 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1bb20:	b108      	cbz	r0, 1bb26 <find_sc_cfg+0x16>
	return NULL;
   1bb22:	2000      	movs	r0, #0
}
   1bb24:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1bb26:	4620      	mov	r0, r4
   1bb28:	e7fc      	b.n	1bb24 <find_sc_cfg+0x14>
   1bb2a:	bf00      	nop
   1bb2c:	2001abf8 	.word	0x2001abf8

0001bb30 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   1bb30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   1bb32:	4604      	mov	r4, r0
   1bb34:	4d0c      	ldr	r5, [pc, #48]	; (1bb68 <gatt_sub_find+0x38>)
   1bb36:	b960      	cbnz	r0, 1bb52 <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1bb38:	9000      	str	r0, [sp, #0]
   1bb3a:	4669      	mov	r1, sp
   1bb3c:	f8cd 0003 	str.w	r0, [sp, #3]
   1bb40:	1c68      	adds	r0, r5, #1
   1bb42:	f015 fb01 	bl	31148 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
   1bb46:	2800      	cmp	r0, #0
   1bb48:	bf08      	it	eq
   1bb4a:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
   1bb4c:	4620      	mov	r0, r4
   1bb4e:	b003      	add	sp, #12
   1bb50:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1bb52:	462a      	mov	r2, r5
   1bb54:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bb58:	f014 fe5c 	bl	30814 <bt_conn_is_peer_addr_le>
   1bb5c:	2800      	cmp	r0, #0
	return NULL;
   1bb5e:	bf14      	ite	ne
   1bb60:	462c      	movne	r4, r5
   1bb62:	2400      	moveq	r4, #0
   1bb64:	e7f2      	b.n	1bb4c <gatt_sub_find+0x1c>
   1bb66:	bf00      	nop
   1bb68:	20016210 	.word	0x20016210

0001bb6c <bt_gatt_attr_write_ccc>:
{
   1bb6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bb70:	461f      	mov	r7, r3
   1bb72:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1bb76:	4606      	mov	r6, r0
   1bb78:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1bb7a:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1bb7e:	2b00      	cmp	r3, #0
   1bb80:	d151      	bne.n	1bc26 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
   1bb82:	1e7b      	subs	r3, r7, #1
   1bb84:	2b01      	cmp	r3, #1
   1bb86:	d851      	bhi.n	1bc2c <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
   1bb88:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1bb8a:	7815      	ldrb	r5, [r2, #0]
   1bb8c:	bf18      	it	ne
   1bb8e:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1bb90:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1bb92:	bf0c      	ite	eq
   1bb94:	b2ad      	uxtheq	r5, r5
   1bb96:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1bb9a:	f015 fad8 	bl	3114e <find_ccc_cfg>
	if (!cfg) {
   1bb9e:	4604      	mov	r4, r0
   1bba0:	b9e8      	cbnz	r0, 1bbde <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
   1bba2:	b91d      	cbnz	r5, 1bbac <bt_gatt_attr_write_ccc+0x40>
			return len;
   1bba4:	4638      	mov	r0, r7
}
   1bba6:	b003      	add	sp, #12
   1bba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1bbac:	4649      	mov	r1, r9
   1bbae:	f015 face 	bl	3114e <find_ccc_cfg>
		if (!cfg) {
   1bbb2:	4604      	mov	r4, r0
   1bbb4:	b960      	cbnz	r0, 1bbd0 <bt_gatt_attr_write_ccc+0x64>
   1bbb6:	4b1f      	ldr	r3, [pc, #124]	; (1bc34 <bt_gatt_attr_write_ccc+0xc8>)
   1bbb8:	491f      	ldr	r1, [pc, #124]	; (1bc38 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
   1bbba:	4820      	ldr	r0, [pc, #128]	; (1bc3c <bt_gatt_attr_write_ccc+0xd0>)
   1bbbc:	1ac9      	subs	r1, r1, r3
   1bbbe:	08c9      	lsrs	r1, r1, #3
   1bbc0:	0189      	lsls	r1, r1, #6
   1bbc2:	f041 0102 	orr.w	r1, r1, #2
   1bbc6:	f012 fc13 	bl	2e3f0 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bbca:	f06f 0010 	mvn.w	r0, #16
   1bbce:	e7ea      	b.n	1bba6 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bbd0:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1bbd4:	3001      	adds	r0, #1
   1bbd6:	f015 fad2 	bl	3117e <bt_addr_le_copy>
		cfg->id = conn->id;
   1bbda:	7a33      	ldrb	r3, [r6, #8]
   1bbdc:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1bbde:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1bbe2:	b9a3      	cbnz	r3, 1bc0e <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
   1bbe4:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1bbe8:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1bbea:	42ab      	cmp	r3, r5
   1bbec:	d003      	beq.n	1bbf6 <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
   1bbee:	4649      	mov	r1, r9
   1bbf0:	4640      	mov	r0, r8
   1bbf2:	f015 fa30 	bl	31056 <gatt_ccc_changed>
	if (!value) {
   1bbf6:	2d00      	cmp	r5, #0
   1bbf8:	d1d4      	bne.n	1bba4 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bbfa:	4669      	mov	r1, sp
   1bbfc:	1c60      	adds	r0, r4, #1
   1bbfe:	9500      	str	r5, [sp, #0]
   1bc00:	f8cd 5003 	str.w	r5, [sp, #3]
   1bc04:	f015 fabb 	bl	3117e <bt_addr_le_copy>
	cfg->id = 0U;
   1bc08:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1bc0a:	8125      	strh	r5, [r4, #8]
}
   1bc0c:	e7ca      	b.n	1bba4 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1bc0e:	462a      	mov	r2, r5
   1bc10:	4641      	mov	r1, r8
   1bc12:	4630      	mov	r0, r6
   1bc14:	4798      	blx	r3
		if (write < 0) {
   1bc16:	2800      	cmp	r0, #0
   1bc18:	dbc5      	blt.n	1bba6 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1bc1a:	3801      	subs	r0, #1
   1bc1c:	2801      	cmp	r0, #1
   1bc1e:	d9e1      	bls.n	1bbe4 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1bc20:	f06f 000d 	mvn.w	r0, #13
   1bc24:	e7bf      	b.n	1bba6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bc26:	f06f 0006 	mvn.w	r0, #6
   1bc2a:	e7bc      	b.n	1bba6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1bc2c:	f06f 000c 	mvn.w	r0, #12
   1bc30:	e7b9      	b.n	1bba6 <bt_gatt_attr_write_ccc+0x3a>
   1bc32:	bf00      	nop
   1bc34:	000364b0 	.word	0x000364b0
   1bc38:	000364f8 	.word	0x000364f8
   1bc3c:	0003a33d 	.word	0x0003a33d

0001bc40 <sc_save>:
{
   1bc40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bc44:	4680      	mov	r8, r0
   1bc46:	460f      	mov	r7, r1
   1bc48:	4616      	mov	r6, r2
   1bc4a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1bc4c:	f7ff ff60 	bl	1bb10 <find_sc_cfg>
	if (!cfg) {
   1bc50:	4604      	mov	r4, r0
   1bc52:	b9c8      	cbnz	r0, 1bc88 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1bc54:	4669      	mov	r1, sp
   1bc56:	9000      	str	r0, [sp, #0]
   1bc58:	f8cd 0003 	str.w	r0, [sp, #3]
   1bc5c:	f7ff ff58 	bl	1bb10 <find_sc_cfg>
		if (!cfg) {
   1bc60:	4604      	mov	r4, r0
   1bc62:	b960      	cbnz	r0, 1bc7e <sc_save+0x3e>
   1bc64:	490f      	ldr	r1, [pc, #60]	; (1bca4 <sc_save+0x64>)
   1bc66:	4b10      	ldr	r3, [pc, #64]	; (1bca8 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
   1bc68:	4810      	ldr	r0, [pc, #64]	; (1bcac <sc_save+0x6c>)
   1bc6a:	1ac9      	subs	r1, r1, r3
   1bc6c:	08c9      	lsrs	r1, r1, #3
   1bc6e:	0189      	lsls	r1, r1, #6
   1bc70:	f041 0101 	orr.w	r1, r1, #1
   1bc74:	f012 fbbc 	bl	2e3f0 <log_0>
}
   1bc78:	b002      	add	sp, #8
   1bc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1bc7e:	4639      	mov	r1, r7
		cfg->id = id;
   1bc80:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1bc84:	f015 fa7b 	bl	3117e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1bc88:	8922      	ldrh	r2, [r4, #8]
   1bc8a:	8963      	ldrh	r3, [r4, #10]
   1bc8c:	b91a      	cbnz	r2, 1bc96 <sc_save+0x56>
   1bc8e:	b923      	cbnz	r3, 1bc9a <sc_save+0x5a>
		cfg->data.start = start;
   1bc90:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1bc92:	8165      	strh	r5, [r4, #10]
   1bc94:	e7f0      	b.n	1bc78 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   1bc96:	4296      	cmp	r6, r2
   1bc98:	d302      	bcc.n	1bca0 <sc_save+0x60>
   1bc9a:	429d      	cmp	r5, r3
   1bc9c:	d9ec      	bls.n	1bc78 <sc_save+0x38>
   1bc9e:	e7f8      	b.n	1bc92 <sc_save+0x52>
		*start = new_start;
   1bca0:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1bca2:	e7fa      	b.n	1bc9a <sc_save+0x5a>
   1bca4:	000364f8 	.word	0x000364f8
   1bca8:	000364b0 	.word	0x000364b0
   1bcac:	0003a357 	.word	0x0003a357

0001bcb0 <cf_write>:
{
   1bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bcb4:	4698      	mov	r8, r3
   1bcb6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1bcba:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1bcbc:	2b01      	cmp	r3, #1
{
   1bcbe:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1bcc0:	d83d      	bhi.n	1bd3e <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1bcc2:	4443      	add	r3, r8
   1bcc4:	2b01      	cmp	r3, #1
   1bcc6:	4645      	mov	r5, r8
   1bcc8:	dc3c      	bgt.n	1bd44 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1bcca:	f7ff ff03 	bl	1bad4 <find_cf_cfg>
	if (!cfg) {
   1bcce:	4604      	mov	r4, r0
   1bcd0:	b990      	cbnz	r0, 1bcf8 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1bcd2:	f7ff feff 	bl	1bad4 <find_cf_cfg>
	if (!cfg) {
   1bcd6:	4604      	mov	r4, r0
   1bcd8:	b970      	cbnz	r0, 1bcf8 <cf_write+0x48>
   1bcda:	4b1d      	ldr	r3, [pc, #116]	; (1bd50 <cf_write+0xa0>)
   1bcdc:	491d      	ldr	r1, [pc, #116]	; (1bd54 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   1bcde:	481e      	ldr	r0, [pc, #120]	; (1bd58 <cf_write+0xa8>)
   1bce0:	1ac9      	subs	r1, r1, r3
   1bce2:	08c9      	lsrs	r1, r1, #3
   1bce4:	0189      	lsls	r1, r1, #6
   1bce6:	f041 0102 	orr.w	r1, r1, #2
   1bcea:	f012 fb81 	bl	2e3f0 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bcee:	f06f 0510 	mvn.w	r5, #16
}
   1bcf2:	4628      	mov	r0, r5
   1bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1bcf8:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1bcfa:	f1b8 0f00 	cmp.w	r8, #0
   1bcfe:	d10c      	bne.n	1bd1a <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bd00:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1bd04:	1c60      	adds	r0, r4, #1
   1bd06:	f015 fa3a 	bl	3117e <bt_addr_le_copy>
	cfg->id = conn->id;
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bd0e:	2100      	movs	r1, #0
	cfg->id = conn->id;
   1bd10:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bd14:	f015 fb02 	bl	3131c <atomic_set_bit>
	return len;
   1bd18:	e7eb      	b.n	1bcf2 <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1bd1a:	7a20      	ldrb	r0, [r4, #8]
   1bd1c:	fa20 f301 	lsr.w	r3, r0, r1
   1bd20:	07da      	lsls	r2, r3, #31
   1bd22:	d503      	bpl.n	1bd2c <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   1bd24:	783b      	ldrb	r3, [r7, #0]
   1bd26:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1bd28:	07db      	lsls	r3, r3, #31
   1bd2a:	d50e      	bpl.n	1bd4a <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1bd2c:	3101      	adds	r1, #1
   1bd2e:	2903      	cmp	r1, #3
   1bd30:	d1e3      	bne.n	1bcfa <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1bd32:	783b      	ldrb	r3, [r7, #0]
   1bd34:	f003 0307 	and.w	r3, r3, #7
   1bd38:	4318      	orrs	r0, r3
   1bd3a:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1bd3c:	e7e0      	b.n	1bd00 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bd3e:	f06f 0506 	mvn.w	r5, #6
   1bd42:	e7d6      	b.n	1bcf2 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1bd44:	f06f 050c 	mvn.w	r5, #12
   1bd48:	e7d3      	b.n	1bcf2 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1bd4a:	f06f 0512 	mvn.w	r5, #18
   1bd4e:	e7d0      	b.n	1bcf2 <cf_write+0x42>
   1bd50:	000364b0 	.word	0x000364b0
   1bd54:	000364f8 	.word	0x000364f8
   1bd58:	0003a376 	.word	0x0003a376

0001bd5c <sc_indicate_rsp>:
{
   1bd5c:	b510      	push	{r4, lr}
   1bd5e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd60:	480f      	ldr	r0, [pc, #60]	; (1bda0 <sc_indicate_rsp+0x44>)
   1bd62:	e8d0 3fef 	ldaex	r3, [r0]
   1bd66:	f023 0302 	bic.w	r3, r3, #2
   1bd6a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1bd6e:	2a00      	cmp	r2, #0
   1bd70:	d1f7      	bne.n	1bd62 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bd72:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1bd76:	07da      	lsls	r2, r3, #31
   1bd78:	d504      	bpl.n	1bd84 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1bd7a:	2200      	movs	r2, #0
   1bd7c:	2300      	movs	r3, #0
   1bd7e:	3830      	subs	r0, #48	; 0x30
   1bd80:	f00e faea 	bl	2a358 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1bd84:	4620      	mov	r0, r4
   1bd86:	f7ff fea5 	bl	1bad4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1bd8a:	b140      	cbz	r0, 1bd9e <sc_indicate_rsp+0x42>
   1bd8c:	7a03      	ldrb	r3, [r0, #8]
   1bd8e:	07db      	lsls	r3, r3, #31
   1bd90:	d505      	bpl.n	1bd9e <sc_indicate_rsp+0x42>
}
   1bd92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bd96:	2100      	movs	r1, #0
   1bd98:	300c      	adds	r0, #12
   1bd9a:	f015 babf 	b.w	3131c <atomic_set_bit>
}
   1bd9e:	bd10      	pop	{r4, pc}
   1bda0:	20015748 	.word	0x20015748

0001bda4 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   1bda4:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1bda6:	2312      	movs	r3, #18
{
   1bda8:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1bdaa:	2104      	movs	r1, #4
   1bdac:	e9cd 3100 	strd	r3, r1, [sp]
   1bdb0:	4b03      	ldr	r3, [pc, #12]	; (1bdc0 <gatt_write_ccc+0x1c>)
   1bdb2:	4904      	ldr	r1, [pc, #16]	; (1bdc4 <gatt_write_ccc+0x20>)
   1bdb4:	f015 fb3a 	bl	3142c <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   1bdb8:	b003      	add	sp, #12
   1bdba:	f85d fb04 	ldr.w	pc, [sp], #4
   1bdbe:	bf00      	nop
   1bdc0:	0003134d 	.word	0x0003134d
   1bdc4:	000313bf 	.word	0x000313bf

0001bdc8 <disconnected_cb>:
{
   1bdc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bdcc:	4b23      	ldr	r3, [pc, #140]	; (1be5c <disconnected_cb+0x94>)
{
   1bdce:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bdd0:	6882      	ldr	r2, [r0, #8]
{
   1bdd2:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bdd4:	429a      	cmp	r2, r3
   1bdd6:	d102      	bne.n	1bdde <disconnected_cb+0x16>
	ccc = attr->user_data;
   1bdd8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1bdda:	8963      	ldrh	r3, [r4, #10]
   1bddc:	bb03      	cbnz	r3, 1be20 <disconnected_cb+0x58>
}
   1bdde:	2001      	movs	r0, #1
   1bde0:	b002      	add	sp, #8
   1bde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bde6:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1bdea:	4641      	mov	r1, r8
   1bdec:	7a28      	ldrb	r0, [r5, #8]
   1bdee:	f014 fca3 	bl	30738 <bt_addr_le_is_bonded>
   1bdf2:	b980      	cbnz	r0, 1be16 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   1bdf4:	4b1a      	ldr	r3, [pc, #104]	; (1be60 <disconnected_cb+0x98>)
   1bdf6:	429c      	cmp	r4, r3
   1bdf8:	d102      	bne.n	1be00 <disconnected_cb+0x38>
					sc_clear(conn);
   1bdfa:	4628      	mov	r0, r5
   1bdfc:	f015 f9d7 	bl	311ae <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1be00:	2200      	movs	r2, #0
   1be02:	4669      	mov	r1, sp
   1be04:	4630      	mov	r0, r6
   1be06:	9200      	str	r2, [sp, #0]
   1be08:	f8cd 2003 	str.w	r2, [sp, #3]
   1be0c:	f015 f9b7 	bl	3117e <bt_addr_le_copy>
	cfg->id = 0U;
   1be10:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   1be12:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   1be14:	e019      	b.n	1be4a <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1be16:	4641      	mov	r1, r8
   1be18:	4630      	mov	r0, r6
   1be1a:	f015 f9b0 	bl	3117e <bt_addr_le_copy>
	if (!value_used) {
   1be1e:	e014      	b.n	1be4a <disconnected_cb+0x82>
		if (!cfg->value) {
   1be20:	8923      	ldrh	r3, [r4, #8]
   1be22:	b193      	cbz	r3, 1be4a <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1be24:	4626      	mov	r6, r4
   1be26:	f816 1b01 	ldrb.w	r1, [r6], #1
   1be2a:	4628      	mov	r0, r5
   1be2c:	4632      	mov	r2, r6
   1be2e:	f014 fcf1 	bl	30814 <bt_conn_is_peer_addr_le>
   1be32:	2800      	cmp	r0, #0
   1be34:	d1d7      	bne.n	1bde6 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1be36:	4631      	mov	r1, r6
   1be38:	7820      	ldrb	r0, [r4, #0]
   1be3a:	f7fe fa39 	bl	1a2b0 <bt_conn_lookup_addr_le>
			if (tmp) {
   1be3e:	b120      	cbz	r0, 1be4a <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   1be40:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1be42:	f7fe f901 	bl	1a048 <bt_conn_unref>
	if (!value_used) {
   1be46:	2d07      	cmp	r5, #7
   1be48:	d0c9      	beq.n	1bdde <disconnected_cb+0x16>
		ccc->value = 0U;
   1be4a:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1be4c:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1be4e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1be50:	2b00      	cmp	r3, #0
   1be52:	d0c4      	beq.n	1bdde <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1be54:	4638      	mov	r0, r7
   1be56:	4798      	blx	r3
   1be58:	e7c1      	b.n	1bdde <disconnected_cb+0x16>
   1be5a:	bf00      	nop
   1be5c:	0001bb6d 	.word	0x0001bb6d
   1be60:	200147cc 	.word	0x200147cc

0001be64 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1be64:	2201      	movs	r2, #1
{
   1be66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be68:	4b21      	ldr	r3, [pc, #132]	; (1bef0 <bt_gatt_init+0x8c>)
   1be6a:	e8d3 1fef 	ldaex	r1, [r3]
   1be6e:	2900      	cmp	r1, #0
   1be70:	d103      	bne.n	1be7a <bt_gatt_init+0x16>
   1be72:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1be76:	2800      	cmp	r0, #0
   1be78:	d1f7      	bne.n	1be6a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1be7a:	d138      	bne.n	1beee <bt_gatt_init+0x8a>
   1be7c:	4b1d      	ldr	r3, [pc, #116]	; (1bef4 <bt_gatt_init+0x90>)
   1be7e:	e8d3 1fef 	ldaex	r1, [r3]
   1be82:	2900      	cmp	r1, #0
   1be84:	d103      	bne.n	1be8e <bt_gatt_init+0x2a>
   1be86:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1be8a:	2800      	cmp	r0, #0
   1be8c:	d1f7      	bne.n	1be7e <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1be8e:	d029      	beq.n	1bee4 <bt_gatt_init+0x80>
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1be90:	4919      	ldr	r1, [pc, #100]	; (1bef8 <bt_gatt_init+0x94>)
   1be92:	481a      	ldr	r0, [pc, #104]	; (1befc <bt_gatt_init+0x98>)
   1be94:	f00e f93c 	bl	2a110 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1be98:	2300      	movs	r3, #0
   1be9a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1be9e:	4817      	ldr	r0, [pc, #92]	; (1befc <bt_gatt_init+0x98>)
   1bea0:	f00e f9de 	bl	2a260 <k_work_schedule>
}
   1bea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1bea8:	4915      	ldr	r1, [pc, #84]	; (1bf00 <bt_gatt_init+0x9c>)
   1beaa:	4816      	ldr	r0, [pc, #88]	; (1bf04 <bt_gatt_init+0xa0>)
   1beac:	f00e b930 	b.w	2a110 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1beb0:	4a15      	ldr	r2, [pc, #84]	; (1bf08 <bt_gatt_init+0xa4>)
   1beb2:	6863      	ldr	r3, [r4, #4]
   1beb4:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1beb6:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   1beb8:	440b      	add	r3, r1
   1beba:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1bebc:	42ac      	cmp	r4, r5
   1bebe:	d90e      	bls.n	1bede <bt_gatt_init+0x7a>
   1bec0:	4912      	ldr	r1, [pc, #72]	; (1bf0c <bt_gatt_init+0xa8>)
   1bec2:	f44f 6389 	mov.w	r3, #1096	; 0x448
   1bec6:	4632      	mov	r2, r6
   1bec8:	4811      	ldr	r0, [pc, #68]	; (1bf10 <bt_gatt_init+0xac>)
   1beca:	f011 ff5d 	bl	2dd88 <printk>
   1bece:	4811      	ldr	r0, [pc, #68]	; (1bf14 <bt_gatt_init+0xb0>)
   1bed0:	f011 ff5a 	bl	2dd88 <printk>
   1bed4:	f44f 6189 	mov.w	r1, #1096	; 0x448
   1bed8:	4630      	mov	r0, r6
   1beda:	f012 fa3b 	bl	2e354 <assert_post_action>
   1bede:	42bc      	cmp	r4, r7
   1bee0:	d3e6      	bcc.n	1beb0 <bt_gatt_init+0x4c>
   1bee2:	e7d5      	b.n	1be90 <bt_gatt_init+0x2c>
   1bee4:	4d0c      	ldr	r5, [pc, #48]	; (1bf18 <bt_gatt_init+0xb4>)
   1bee6:	4c0d      	ldr	r4, [pc, #52]	; (1bf1c <bt_gatt_init+0xb8>)
   1bee8:	462f      	mov	r7, r5
   1beea:	4e0d      	ldr	r6, [pc, #52]	; (1bf20 <bt_gatt_init+0xbc>)
   1beec:	e7e6      	b.n	1bebc <bt_gatt_init+0x58>
}
   1beee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bef0:	200161f0 	.word	0x200161f0
   1bef4:	2001620c 	.word	0x2001620c
   1bef8:	00031539 	.word	0x00031539
   1befc:	200156a0 	.word	0x200156a0
   1bf00:	0001c35d 	.word	0x0001c35d
   1bf04:	20015718 	.word	0x20015718
   1bf08:	2001abf6 	.word	0x2001abf6
   1bf0c:	0003a3d9 	.word	0x0003a3d9
   1bf10:	00037f2c 	.word	0x00037f2c
   1bf14:	00038636 	.word	0x00038636
   1bf18:	0003649c 	.word	0x0003649c
   1bf1c:	0003648c 	.word	0x0003648c
   1bf20:	0003a3a2 	.word	0x0003a3a2

0001bf24 <bt_gatt_attr_get_handle>:
{
   1bf24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1bf28:	4604      	mov	r4, r0
   1bf2a:	b910      	cbnz	r0, 1bf32 <bt_gatt_attr_get_handle+0xe>
		return 0;
   1bf2c:	2000      	movs	r0, #0
}
   1bf2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1bf32:	8a00      	ldrh	r0, [r0, #16]
   1bf34:	2800      	cmp	r0, #0
   1bf36:	d1fa      	bne.n	1bf2e <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bf38:	4f1a      	ldr	r7, [pc, #104]	; (1bfa4 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   1bf3a:	2601      	movs	r6, #1
   1bf3c:	46b8      	mov	r8, r7
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bf3e:	4d1a      	ldr	r5, [pc, #104]	; (1bfa8 <bt_gatt_attr_get_handle+0x84>)
   1bf40:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1bfb8 <bt_gatt_attr_get_handle+0x94>
   1bf44:	42bd      	cmp	r5, r7
   1bf46:	d90e      	bls.n	1bf66 <bt_gatt_attr_get_handle+0x42>
   1bf48:	4918      	ldr	r1, [pc, #96]	; (1bfac <bt_gatt_attr_get_handle+0x88>)
   1bf4a:	f240 536a 	movw	r3, #1386	; 0x56a
   1bf4e:	464a      	mov	r2, r9
   1bf50:	4817      	ldr	r0, [pc, #92]	; (1bfb0 <bt_gatt_attr_get_handle+0x8c>)
   1bf52:	f011 ff19 	bl	2dd88 <printk>
   1bf56:	4817      	ldr	r0, [pc, #92]	; (1bfb4 <bt_gatt_attr_get_handle+0x90>)
   1bf58:	f011 ff16 	bl	2dd88 <printk>
   1bf5c:	f240 516a 	movw	r1, #1386	; 0x56a
   1bf60:	4648      	mov	r0, r9
   1bf62:	f012 f9f7 	bl	2e354 <assert_post_action>
   1bf66:	4545      	cmp	r5, r8
   1bf68:	d2e0      	bcs.n	1bf2c <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1bf6a:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1bf6e:	4574      	cmp	r4, lr
   1bf70:	d305      	bcc.n	1bf7e <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1bf72:	2114      	movs	r1, #20
   1bf74:	fb01 e30c 	mla	r3, r1, ip, lr
   1bf78:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1bf7a:	429c      	cmp	r4, r3
   1bf7c:	d90f      	bls.n	1bf9e <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1bf7e:	eb06 030c 	add.w	r3, r6, ip
   1bf82:	b298      	uxth	r0, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bf84:	4606      	mov	r6, r0
   1bf86:	3508      	adds	r5, #8
   1bf88:	e7dc      	b.n	1bf44 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1bf8a:	fb01 e302 	mla	r3, r1, r2, lr
   1bf8e:	429c      	cmp	r4, r3
   1bf90:	d0cd      	beq.n	1bf2e <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1bf92:	3201      	adds	r2, #1
   1bf94:	18b3      	adds	r3, r6, r2
   1bf96:	4562      	cmp	r2, ip
   1bf98:	b298      	uxth	r0, r3
   1bf9a:	d1f6      	bne.n	1bf8a <bt_gatt_attr_get_handle+0x66>
   1bf9c:	e7f2      	b.n	1bf84 <bt_gatt_attr_get_handle+0x60>
   1bf9e:	2200      	movs	r2, #0
   1bfa0:	e7f8      	b.n	1bf94 <bt_gatt_attr_get_handle+0x70>
   1bfa2:	bf00      	nop
   1bfa4:	0003649c 	.word	0x0003649c
   1bfa8:	0003648c 	.word	0x0003648c
   1bfac:	0003a3d2 	.word	0x0003a3d2
   1bfb0:	00037f2c 	.word	0x00037f2c
   1bfb4:	00038636 	.word	0x00038636
   1bfb8:	0003a3a2 	.word	0x0003a3a2

0001bfbc <bt_gatt_foreach_attr_type>:
{
   1bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfc0:	b085      	sub	sp, #20
   1bfc2:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   1bfc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1bfc8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   1bfcc:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   1bfce:	2d00      	cmp	r5, #0
   1bfd0:	bf08      	it	eq
   1bfd2:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1bfd4:	4b2d      	ldr	r3, [pc, #180]	; (1c08c <bt_gatt_foreach_attr_type+0xd0>)
{
   1bfd6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1bfd8:	881b      	ldrh	r3, [r3, #0]
{
   1bfda:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   1bfdc:	4283      	cmp	r3, r0
   1bfde:	d24e      	bcs.n	1c07e <bt_gatt_foreach_attr_type+0xc2>
}
   1bfe0:	b005      	add	sp, #20
   1bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1bfe6:	6873      	ldr	r3, [r6, #4]
   1bfe8:	4423      	add	r3, r4
   1bfea:	42bb      	cmp	r3, r7
   1bfec:	d244      	bcs.n	1c078 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   1bfee:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bff0:	3608      	adds	r6, #8
   1bff2:	4556      	cmp	r6, sl
   1bff4:	d90e      	bls.n	1c014 <bt_gatt_foreach_attr_type+0x58>
   1bff6:	4926      	ldr	r1, [pc, #152]	; (1c090 <bt_gatt_foreach_attr_type+0xd4>)
   1bff8:	f240 632e 	movw	r3, #1582	; 0x62e
   1bffc:	465a      	mov	r2, fp
   1bffe:	4825      	ldr	r0, [pc, #148]	; (1c094 <bt_gatt_foreach_attr_type+0xd8>)
   1c000:	f011 fec2 	bl	2dd88 <printk>
   1c004:	4824      	ldr	r0, [pc, #144]	; (1c098 <bt_gatt_foreach_attr_type+0xdc>)
   1c006:	f011 febf 	bl	2dd88 <printk>
   1c00a:	f240 612e 	movw	r1, #1582	; 0x62e
   1c00e:	4658      	mov	r0, fp
   1c010:	f012 f9a0 	bl	2e354 <assert_post_action>
   1c014:	4b21      	ldr	r3, [pc, #132]	; (1c09c <bt_gatt_foreach_attr_type+0xe0>)
   1c016:	429e      	cmp	r6, r3
   1c018:	d3e5      	bcc.n	1bfe6 <bt_gatt_foreach_attr_type+0x2a>
   1c01a:	e7e1      	b.n	1bfe0 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c01c:	4640      	mov	r0, r8
   1c01e:	5889      	ldr	r1, [r1, r2]
   1c020:	9303      	str	r3, [sp, #12]
   1c022:	f014 fa4b 	bl	304bc <bt_uuid_cmp>
   1c026:	9b03      	ldr	r3, [sp, #12]
   1c028:	b198      	cbz	r0, 1c052 <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c02a:	3401      	adds	r4, #1
   1c02c:	f109 0901 	add.w	r9, r9, #1
   1c030:	b2a4      	uxth	r4, r4
   1c032:	6873      	ldr	r3, [r6, #4]
   1c034:	454b      	cmp	r3, r9
   1c036:	d9db      	bls.n	1bff0 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1c038:	9b02      	ldr	r3, [sp, #8]
   1c03a:	429c      	cmp	r4, r3
   1c03c:	d8d0      	bhi.n	1bfe0 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1c03e:	42bc      	cmp	r4, r7
   1c040:	d3f3      	bcc.n	1c02a <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c042:	2314      	movs	r3, #20
   1c044:	fb03 f209 	mul.w	r2, r3, r9
   1c048:	6831      	ldr	r1, [r6, #0]
   1c04a:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c04c:	f1b8 0f00 	cmp.w	r8, #0
   1c050:	d1e4      	bne.n	1c01c <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1c052:	9a01      	ldr	r2, [sp, #4]
   1c054:	b95a      	cbnz	r2, 1c06e <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1c056:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1c058:	4618      	mov	r0, r3
	*num_matches -= 1;
   1c05a:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1c05c:	4621      	mov	r1, r4
   1c05e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c062:	4798      	blx	r3
	if (!*num_matches) {
   1c064:	2d00      	cmp	r5, #0
   1c066:	d0bb      	beq.n	1bfe0 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c068:	2800      	cmp	r0, #0
   1c06a:	d1de      	bne.n	1c02a <bt_gatt_foreach_attr_type+0x6e>
   1c06c:	e7b8      	b.n	1bfe0 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1c06e:	68da      	ldr	r2, [r3, #12]
   1c070:	9901      	ldr	r1, [sp, #4]
   1c072:	4291      	cmp	r1, r2
   1c074:	d1d9      	bne.n	1c02a <bt_gatt_foreach_attr_type+0x6e>
   1c076:	e7ee      	b.n	1c056 <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c078:	f04f 0900 	mov.w	r9, #0
   1c07c:	e7d9      	b.n	1c032 <bt_gatt_foreach_attr_type+0x76>
		uint16_t handle = 1;
   1c07e:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c080:	4e07      	ldr	r6, [pc, #28]	; (1c0a0 <bt_gatt_foreach_attr_type+0xe4>)
   1c082:	f8df a018 	ldr.w	sl, [pc, #24]	; 1c09c <bt_gatt_foreach_attr_type+0xe0>
   1c086:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1c0a4 <bt_gatt_foreach_attr_type+0xe8>
   1c08a:	e7b2      	b.n	1bff2 <bt_gatt_foreach_attr_type+0x36>
   1c08c:	2001abf6 	.word	0x2001abf6
   1c090:	0003a3d2 	.word	0x0003a3d2
   1c094:	00037f2c 	.word	0x00037f2c
   1c098:	00038636 	.word	0x00038636
   1c09c:	0003649c 	.word	0x0003649c
   1c0a0:	0003648c 	.word	0x0003648c
   1c0a4:	0003a3a2 	.word	0x0003a3a2

0001c0a8 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   1c0a8:	b510      	push	{r4, lr}
	uint8_t key[16] = {};
   1c0aa:	2400      	movs	r4, #0
static void db_hash_gen(bool store)
   1c0ac:	b0c8      	sub	sp, #288	; 0x120
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c0ae:	4669      	mov	r1, sp
   1c0b0:	aa1c      	add	r2, sp, #112	; 0x70
   1c0b2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1c0b4:	e9cd 4400 	strd	r4, r4, [sp]
   1c0b8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c0bc:	f013 fde1 	bl	2fc82 <tc_cmac_setup>
   1c0c0:	b958      	cbnz	r0, 1c0da <db_hash_gen.isra.0+0x32>
   1c0c2:	491b      	ldr	r1, [pc, #108]	; (1c130 <db_hash_gen.isra.0+0x88>)
   1c0c4:	4b1b      	ldr	r3, [pc, #108]	; (1c134 <db_hash_gen.isra.0+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   1c0c6:	481c      	ldr	r0, [pc, #112]	; (1c138 <db_hash_gen.isra.0+0x90>)
   1c0c8:	1ac9      	subs	r1, r1, r3
   1c0ca:	08c9      	lsrs	r1, r1, #3
   1c0cc:	0189      	lsls	r1, r1, #6
   1c0ce:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   1c0d2:	f012 f98d 	bl	2e3f0 <log_0>
}
   1c0d6:	b048      	add	sp, #288	; 0x120
   1c0d8:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1c0da:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c0de:	2001      	movs	r0, #1
   1c0e0:	4a16      	ldr	r2, [pc, #88]	; (1c13c <db_hash_gen.isra.0+0x94>)
   1c0e2:	ab04      	add	r3, sp, #16
   1c0e4:	f015 fa1d 	bl	31522 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c0e8:	4815      	ldr	r0, [pc, #84]	; (1c140 <db_hash_gen.isra.0+0x98>)
   1c0ea:	a904      	add	r1, sp, #16
   1c0ec:	f013 fe60 	bl	2fdb0 <tc_cmac_final>
   1c0f0:	b940      	cbnz	r0, 1c104 <db_hash_gen.isra.0+0x5c>
   1c0f2:	490f      	ldr	r1, [pc, #60]	; (1c130 <db_hash_gen.isra.0+0x88>)
   1c0f4:	4b0f      	ldr	r3, [pc, #60]	; (1c134 <db_hash_gen.isra.0+0x8c>)
		BT_ERR("Unable to calculate hash");
   1c0f6:	4813      	ldr	r0, [pc, #76]	; (1c144 <db_hash_gen.isra.0+0x9c>)
   1c0f8:	1ac9      	subs	r1, r1, r3
   1c0fa:	08c9      	lsrs	r1, r1, #3
   1c0fc:	0189      	lsls	r1, r1, #6
   1c0fe:	f041 0101 	orr.w	r1, r1, #1
   1c102:	e7e6      	b.n	1c0d2 <db_hash_gen.isra.0+0x2a>
   1c104:	4b0e      	ldr	r3, [pc, #56]	; (1c140 <db_hash_gen.isra.0+0x98>)
   1c106:	f103 020f 	add.w	r2, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c10a:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c10c:	7810      	ldrb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1c10e:	3401      	adds	r4, #1
   1c110:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c112:	f803 0b01 	strb.w	r0, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c116:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   1c11a:	d1f6      	bne.n	1c10a <db_hash_gen.isra.0+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c11c:	4b0a      	ldr	r3, [pc, #40]	; (1c148 <db_hash_gen.isra.0+0xa0>)
   1c11e:	e8d3 2fef 	ldaex	r2, [r3]
   1c122:	f042 0204 	orr.w	r2, r2, #4
   1c126:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c12a:	2900      	cmp	r1, #0
   1c12c:	d0d3      	beq.n	1c0d6 <db_hash_gen.isra.0+0x2e>
   1c12e:	e7f6      	b.n	1c11e <db_hash_gen.isra.0+0x76>
   1c130:	000364f8 	.word	0x000364f8
   1c134:	000364b0 	.word	0x000364b0
   1c138:	0003a401 	.word	0x0003a401
   1c13c:	0003109d 	.word	0x0003109d
   1c140:	20015690 	.word	0x20015690
   1c144:	0003a41a 	.word	0x0003a41a
   1c148:	20015748 	.word	0x20015748

0001c14c <gatt_indicate>:
{
   1c14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c150:	4615      	mov	r5, r2
   1c152:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1c154:	2214      	movs	r2, #20
   1c156:	6869      	ldr	r1, [r5, #4]
{
   1c158:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1c15a:	f015 f9ef 	bl	3153c <bt_gatt_check_perm>
   1c15e:	b170      	cbz	r0, 1c17e <gatt_indicate+0x32>
   1c160:	4b28      	ldr	r3, [pc, #160]	; (1c204 <gatt_indicate+0xb8>)
   1c162:	4929      	ldr	r1, [pc, #164]	; (1c208 <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
   1c164:	4829      	ldr	r0, [pc, #164]	; (1c20c <gatt_indicate+0xc0>)
   1c166:	1ac9      	subs	r1, r1, r3
   1c168:	08c9      	lsrs	r1, r1, #3
   1c16a:	0189      	lsls	r1, r1, #6
   1c16c:	f041 0102 	orr.w	r1, r1, #2
   1c170:	f012 f93e 	bl	2e3f0 <log_0>
		return -EPERM;
   1c174:	f04f 35ff 	mov.w	r5, #4294967295
}
   1c178:	4628      	mov	r0, r5
   1c17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c17e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1c182:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1c184:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c186:	f7ff fadb 	bl	1b740 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1c18a:	3602      	adds	r6, #2
	if (!req) {
   1c18c:	4604      	mov	r4, r0
   1c18e:	b910      	cbnz	r0, 1c196 <gatt_indicate+0x4a>
		return -ENOMEM;
   1c190:	f06f 050b 	mvn.w	r5, #11
   1c194:	e7f0      	b.n	1c178 <gatt_indicate+0x2c>
	req->func = func;
   1c196:	4b1e      	ldr	r3, [pc, #120]	; (1c210 <gatt_indicate+0xc4>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1c198:	4632      	mov	r2, r6
	req->func = func;
   1c19a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1c19c:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1c19e:	211d      	movs	r1, #29
   1c1a0:	4640      	mov	r0, r8
   1c1a2:	f7ff f843 	bl	1b22c <bt_att_create_pdu>
	if (!buf) {
   1c1a6:	4606      	mov	r6, r0
   1c1a8:	b968      	cbnz	r0, 1c1c6 <gatt_indicate+0x7a>
   1c1aa:	4b16      	ldr	r3, [pc, #88]	; (1c204 <gatt_indicate+0xb8>)
   1c1ac:	4916      	ldr	r1, [pc, #88]	; (1c208 <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
   1c1ae:	4819      	ldr	r0, [pc, #100]	; (1c214 <gatt_indicate+0xc8>)
   1c1b0:	1ac9      	subs	r1, r1, r3
   1c1b2:	08c9      	lsrs	r1, r1, #3
   1c1b4:	0189      	lsls	r1, r1, #6
   1c1b6:	f041 0102 	orr.w	r1, r1, #2
   1c1ba:	f012 f919 	bl	2e3f0 <log_0>
		bt_att_req_free(req);
   1c1be:	4620      	mov	r0, r4
   1c1c0:	f7ff fad4 	bl	1b76c <bt_att_req_free>
   1c1c4:	e7e4      	b.n	1c190 <gatt_indicate+0x44>
   1c1c6:	f100 0a08 	add.w	sl, r0, #8
   1c1ca:	2102      	movs	r1, #2
   1c1cc:	4650      	mov	r0, sl
   1c1ce:	f000 ff05 	bl	1cfdc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1c1d2:	4607      	mov	r7, r0
   1c1d4:	8aa9      	ldrh	r1, [r5, #20]
   1c1d6:	f827 9b02 	strh.w	r9, [r7], #2
   1c1da:	4650      	mov	r0, sl
   1c1dc:	f000 fefe 	bl	1cfdc <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c1e0:	8aaa      	ldrh	r2, [r5, #20]
   1c1e2:	6929      	ldr	r1, [r5, #16]
   1c1e4:	4638      	mov	r0, r7
   1c1e6:	f019 f9ce 	bl	35586 <memcpy>
	err = bt_att_req_send(conn, req);
   1c1ea:	4621      	mov	r1, r4
   1c1ec:	4640      	mov	r0, r8
	req->buf = buf;
   1c1ee:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1c1f0:	f7ff fc06 	bl	1ba00 <bt_att_req_send>
	if (err) {
   1c1f4:	4605      	mov	r5, r0
   1c1f6:	2800      	cmp	r0, #0
   1c1f8:	d0be      	beq.n	1c178 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   1c1fa:	4620      	mov	r0, r4
   1c1fc:	f7ff fab6 	bl	1b76c <bt_att_req_free>
   1c200:	e7ba      	b.n	1c178 <gatt_indicate+0x2c>
   1c202:	bf00      	nop
   1c204:	000364b0 	.word	0x000364b0
   1c208:	000364f8 	.word	0x000364f8
   1c20c:	0003a433 	.word	0x0003a433
   1c210:	0003106b 	.word	0x0003106b
   1c214:	0003a449 	.word	0x0003a449

0001c218 <bt_gatt_indicate>:
{
   1c218:	b530      	push	{r4, r5, lr}
   1c21a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1c21c:	460c      	mov	r4, r1
{
   1c21e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1c220:	b971      	cbnz	r1, 1c240 <bt_gatt_indicate+0x28>
   1c222:	4946      	ldr	r1, [pc, #280]	; (1c33c <bt_gatt_indicate+0x124>)
   1c224:	f640 1315 	movw	r3, #2325	; 0x915
   1c228:	4a45      	ldr	r2, [pc, #276]	; (1c340 <bt_gatt_indicate+0x128>)
   1c22a:	4846      	ldr	r0, [pc, #280]	; (1c344 <bt_gatt_indicate+0x12c>)
   1c22c:	f011 fdac 	bl	2dd88 <printk>
   1c230:	4845      	ldr	r0, [pc, #276]	; (1c348 <bt_gatt_indicate+0x130>)
   1c232:	f011 fda9 	bl	2dd88 <printk>
   1c236:	f640 1115 	movw	r1, #2325	; 0x915
   1c23a:	4841      	ldr	r0, [pc, #260]	; (1c340 <bt_gatt_indicate+0x128>)
   1c23c:	f012 f88a 	bl	2e354 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   1c240:	6863      	ldr	r3, [r4, #4]
   1c242:	b973      	cbnz	r3, 1c262 <bt_gatt_indicate+0x4a>
   1c244:	4941      	ldr	r1, [pc, #260]	; (1c34c <bt_gatt_indicate+0x134>)
   1c246:	f640 1316 	movw	r3, #2326	; 0x916
   1c24a:	4a3d      	ldr	r2, [pc, #244]	; (1c340 <bt_gatt_indicate+0x128>)
   1c24c:	483d      	ldr	r0, [pc, #244]	; (1c344 <bt_gatt_indicate+0x12c>)
   1c24e:	f011 fd9b 	bl	2dd88 <printk>
   1c252:	483d      	ldr	r0, [pc, #244]	; (1c348 <bt_gatt_indicate+0x130>)
   1c254:	f011 fd98 	bl	2dd88 <printk>
   1c258:	f640 1116 	movw	r1, #2326	; 0x916
   1c25c:	4838      	ldr	r0, [pc, #224]	; (1c340 <bt_gatt_indicate+0x128>)
   1c25e:	f012 f879 	bl	2e354 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c262:	4b3b      	ldr	r3, [pc, #236]	; (1c350 <bt_gatt_indicate+0x138>)
   1c264:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c268:	079a      	lsls	r2, r3, #30
   1c26a:	d561      	bpl.n	1c330 <bt_gatt_indicate+0x118>
	data.attr = params->attr;
   1c26c:	6860      	ldr	r0, [r4, #4]
   1c26e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1c270:	b115      	cbz	r5, 1c278 <bt_gatt_indicate+0x60>
   1c272:	7aab      	ldrb	r3, [r5, #10]
   1c274:	2b07      	cmp	r3, #7
   1c276:	d15e      	bne.n	1c336 <bt_gatt_indicate+0x11e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c278:	f7ff fe54 	bl	1bf24 <bt_gatt_attr_get_handle>
   1c27c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1c280:	b918      	cbnz	r0, 1c28a <bt_gatt_indicate+0x72>
		return -ENOENT;
   1c282:	f06f 0001 	mvn.w	r0, #1
}
   1c286:	b00b      	add	sp, #44	; 0x2c
   1c288:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1c28a:	6822      	ldr	r2, [r4, #0]
   1c28c:	b9ba      	cbnz	r2, 1c2be <bt_gatt_indicate+0xa6>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1c28e:	9b05      	ldr	r3, [sp, #20]
   1c290:	a904      	add	r1, sp, #16
   1c292:	6818      	ldr	r0, [r3, #0]
   1c294:	2300      	movs	r3, #0
   1c296:	f88d 3010 	strb.w	r3, [sp, #16]
   1c29a:	f642 0303 	movw	r3, #10243	; 0x2803
   1c29e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c2a2:	f014 f90b 	bl	304bc <bt_uuid_cmp>
   1c2a6:	b1d0      	cbz	r0, 1c2de <bt_gatt_indicate+0xc6>
	if (conn) {
   1c2a8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1c2ac:	b325      	cbz	r5, 1c2f8 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1c2ae:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1c2b0:	4601      	mov	r1, r0
   1c2b2:	4622      	mov	r2, r4
   1c2b4:	4628      	mov	r0, r5
		params->_ref = 1;
   1c2b6:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1c2b8:	f7ff ff48 	bl	1c14c <gatt_indicate>
   1c2bc:	e7e3      	b.n	1c286 <bt_gatt_indicate+0x6e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c2be:	a905      	add	r1, sp, #20
   1c2c0:	9102      	str	r1, [sp, #8]
   1c2c2:	4924      	ldr	r1, [pc, #144]	; (1c354 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   1c2c4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c2c6:	9101      	str	r1, [sp, #4]
   1c2c8:	2101      	movs	r1, #1
   1c2ca:	9100      	str	r1, [sp, #0]
   1c2cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1c2d0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c2d2:	f7ff fe73 	bl	1bfbc <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1c2d6:	9b05      	ldr	r3, [sp, #20]
   1c2d8:	2b00      	cmp	r3, #0
   1c2da:	d1d8      	bne.n	1c28e <bt_gatt_indicate+0x76>
   1c2dc:	e7d1      	b.n	1c282 <bt_gatt_indicate+0x6a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1c2de:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1c2e0:	68c3      	ldr	r3, [r0, #12]
   1c2e2:	799b      	ldrb	r3, [r3, #6]
   1c2e4:	069b      	lsls	r3, r3, #26
   1c2e6:	d402      	bmi.n	1c2ee <bt_gatt_indicate+0xd6>
			return -EINVAL;
   1c2e8:	f06f 0015 	mvn.w	r0, #21
   1c2ec:	e7cb      	b.n	1c286 <bt_gatt_indicate+0x6e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1c2ee:	f015 f8d1 	bl	31494 <bt_gatt_attr_value_handle>
   1c2f2:	f8ad 0018 	strh.w	r0, [sp, #24]
   1c2f6:	e7d7      	b.n	1c2a8 <bt_gatt_indicate+0x90>
	data.err = -ENOTCONN;
   1c2f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c2fc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1c2fe:	2302      	movs	r3, #2
   1c300:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c304:	f642 1302 	movw	r3, #10498	; 0x2902
   1c308:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c30c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1c30e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c310:	9302      	str	r3, [sp, #8]
   1c312:	4b11      	ldr	r3, [pc, #68]	; (1c358 <bt_gatt_indicate+0x140>)
   1c314:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c318:	9301      	str	r3, [sp, #4]
   1c31a:	2301      	movs	r3, #1
   1c31c:	aa04      	add	r2, sp, #16
   1c31e:	9300      	str	r3, [sp, #0]
   1c320:	462b      	mov	r3, r5
	data.ind_params = params;
   1c322:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c324:	f88d 5010 	strb.w	r5, [sp, #16]
   1c328:	f7ff fe48 	bl	1bfbc <bt_gatt_foreach_attr_type>
	return data.err;
   1c32c:	9807      	ldr	r0, [sp, #28]
   1c32e:	e7aa      	b.n	1c286 <bt_gatt_indicate+0x6e>
		return -EAGAIN;
   1c330:	f06f 000a 	mvn.w	r0, #10
   1c334:	e7a7      	b.n	1c286 <bt_gatt_indicate+0x6e>
		return -ENOTCONN;
   1c336:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c33a:	e7a4      	b.n	1c286 <bt_gatt_indicate+0x6e>
   1c33c:	0003c8af 	.word	0x0003c8af
   1c340:	0003a3a2 	.word	0x0003a3a2
   1c344:	00037f2c 	.word	0x00037f2c
   1c348:	0003a470 	.word	0x0003a470
   1c34c:	0003a486 	.word	0x0003a486
   1c350:	20014598 	.word	0x20014598
   1c354:	00031091 	.word	0x00031091
   1c358:	0001c491 	.word	0x0001c491

0001c35c <sc_process>:
{
   1c35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c35e:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1c360:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1c364:	e8d5 3faf 	lda	r3, [r5]
   1c368:	079b      	lsls	r3, r3, #30
   1c36a:	d50e      	bpl.n	1c38a <sc_process+0x2e>
   1c36c:	491a      	ldr	r1, [pc, #104]	; (1c3d8 <sc_process+0x7c>)
   1c36e:	f240 33de 	movw	r3, #990	; 0x3de
   1c372:	4a1a      	ldr	r2, [pc, #104]	; (1c3dc <sc_process+0x80>)
   1c374:	481a      	ldr	r0, [pc, #104]	; (1c3e0 <sc_process+0x84>)
   1c376:	f011 fd07 	bl	2dd88 <printk>
   1c37a:	481a      	ldr	r0, [pc, #104]	; (1c3e4 <sc_process+0x88>)
   1c37c:	f011 fd04 	bl	2dd88 <printk>
   1c380:	f240 31de 	movw	r1, #990	; 0x3de
   1c384:	4815      	ldr	r0, [pc, #84]	; (1c3dc <sc_process+0x80>)
   1c386:	f011 ffe5 	bl	2e354 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1c38a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1c38e:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c390:	e8d5 3fef 	ldaex	r3, [r5]
   1c394:	f023 0301 	bic.w	r3, r3, #1
   1c398:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c39c:	2a00      	cmp	r2, #0
   1c39e:	d1f7      	bne.n	1c390 <sc_process+0x34>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1c3a0:	4b11      	ldr	r3, [pc, #68]	; (1c3e8 <sc_process+0x8c>)
	sc->start = 0U;
   1c3a2:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1c3a4:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1c3a8:	4b10      	ldr	r3, [pc, #64]	; (1c3ec <sc_process+0x90>)
	sc->start = 0U;
   1c3aa:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   1c3ae:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1c3b2:	ab01      	add	r3, sp, #4
   1c3b4:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1c3b8:	2304      	movs	r3, #4
	sc->end = 0U;
   1c3ba:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1c3be:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1c3c2:	f1a4 0120 	sub.w	r1, r4, #32
   1c3c6:	f7ff ff27 	bl	1c218 <bt_gatt_indicate>
   1c3ca:	b918      	cbnz	r0, 1c3d4 <sc_process+0x78>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1c3cc:	2101      	movs	r1, #1
   1c3ce:	4628      	mov	r0, r5
   1c3d0:	f014 ffa4 	bl	3131c <atomic_set_bit>
}
   1c3d4:	b003      	add	sp, #12
   1c3d6:	bd30      	pop	{r4, r5, pc}
   1c3d8:	0003a493 	.word	0x0003a493
   1c3dc:	0003a3a2 	.word	0x0003a3a2
   1c3e0:	00037f2c 	.word	0x00037f2c
   1c3e4:	0003a4c4 	.word	0x0003a4c4
   1c3e8:	00036ca4 	.word	0x00036ca4
   1c3ec:	0001bd5d 	.word	0x0001bd5d

0001c3f0 <gatt_notify>:
{
   1c3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c3f4:	4614      	mov	r4, r2
   1c3f6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1c3f8:	2214      	movs	r2, #20
   1c3fa:	6861      	ldr	r1, [r4, #4]
{
   1c3fc:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1c3fe:	f015 f89d 	bl	3153c <bt_gatt_check_perm>
   1c402:	b168      	cbz	r0, 1c420 <gatt_notify+0x30>
   1c404:	4b1e      	ldr	r3, [pc, #120]	; (1c480 <gatt_notify+0x90>)
   1c406:	491f      	ldr	r1, [pc, #124]	; (1c484 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   1c408:	481f      	ldr	r0, [pc, #124]	; (1c488 <gatt_notify+0x98>)
   1c40a:	1ac9      	subs	r1, r1, r3
   1c40c:	08c9      	lsrs	r1, r1, #3
   1c40e:	0189      	lsls	r1, r1, #6
   1c410:	f041 0102 	orr.w	r1, r1, #2
   1c414:	f011 ffec 	bl	2e3f0 <log_0>
		return -EPERM;
   1c418:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   1c420:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1c422:	211b      	movs	r1, #27
   1c424:	4638      	mov	r0, r7
   1c426:	3202      	adds	r2, #2
   1c428:	f7fe ff00 	bl	1b22c <bt_att_create_pdu>
	if (!buf) {
   1c42c:	4605      	mov	r5, r0
   1c42e:	b960      	cbnz	r0, 1c44a <gatt_notify+0x5a>
   1c430:	4b13      	ldr	r3, [pc, #76]	; (1c480 <gatt_notify+0x90>)
   1c432:	4914      	ldr	r1, [pc, #80]	; (1c484 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   1c434:	4815      	ldr	r0, [pc, #84]	; (1c48c <gatt_notify+0x9c>)
   1c436:	1ac9      	subs	r1, r1, r3
   1c438:	08c9      	lsrs	r1, r1, #3
   1c43a:	0189      	lsls	r1, r1, #6
   1c43c:	f041 0102 	orr.w	r1, r1, #2
   1c440:	f011 ffd6 	bl	2e3f0 <log_0>
		return -ENOMEM;
   1c444:	f06f 000b 	mvn.w	r0, #11
   1c448:	e7e8      	b.n	1c41c <gatt_notify+0x2c>
   1c44a:	f100 0908 	add.w	r9, r0, #8
   1c44e:	2102      	movs	r1, #2
   1c450:	4648      	mov	r0, r9
   1c452:	f000 fdc3 	bl	1cfdc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1c456:	4606      	mov	r6, r0
   1c458:	89a1      	ldrh	r1, [r4, #12]
   1c45a:	f826 8b02 	strh.w	r8, [r6], #2
   1c45e:	4648      	mov	r0, r9
   1c460:	f000 fdbc 	bl	1cfdc <net_buf_simple_add>
   1c464:	89a2      	ldrh	r2, [r4, #12]
   1c466:	68a1      	ldr	r1, [r4, #8]
   1c468:	4630      	mov	r0, r6
   1c46a:	f019 f88c 	bl	35586 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1c46e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1c472:	4629      	mov	r1, r5
   1c474:	4638      	mov	r0, r7
}
   1c476:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1c47a:	f7ff ba53 	b.w	1b924 <bt_att_send>
   1c47e:	bf00      	nop
   1c480:	000364b0 	.word	0x000364b0
   1c484:	000364f8 	.word	0x000364f8
   1c488:	0003a433 	.word	0x0003a433
   1c48c:	0003a4df 	.word	0x0003a4df

0001c490 <notify_cb>:
{
   1c490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c492:	4b37      	ldr	r3, [pc, #220]	; (1c570 <notify_cb+0xe0>)
{
   1c494:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c496:	6882      	ldr	r2, [r0, #8]
{
   1c498:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c49a:	429a      	cmp	r2, r3
   1c49c:	d12d      	bne.n	1c4fa <notify_cb+0x6a>
	ccc = attr->user_data;
   1c49e:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1c4a0:	4b34      	ldr	r3, [pc, #208]	; (1c574 <notify_cb+0xe4>)
   1c4a2:	429f      	cmp	r7, r3
   1c4a4:	d119      	bne.n	1c4da <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c4a6:	2300      	movs	r3, #0
   1c4a8:	4d33      	ldr	r5, [pc, #204]	; (1c578 <notify_cb+0xe8>)
   1c4aa:	4669      	mov	r1, sp
   1c4ac:	1c68      	adds	r0, r5, #1
   1c4ae:	9300      	str	r3, [sp, #0]
   1c4b0:	f8cd 3003 	str.w	r3, [sp, #3]
   1c4b4:	f014 fe48 	bl	31148 <bt_addr_le_cmp>
   1c4b8:	b178      	cbz	r0, 1c4da <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1c4ba:	4629      	mov	r1, r5
   1c4bc:	2207      	movs	r2, #7
   1c4be:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c4c2:	f7fd ff13 	bl	1a2ec <bt_conn_lookup_state_le>
			if (!conn) {
   1c4c6:	b9e0      	cbnz	r0, 1c502 <notify_cb+0x72>
				sc_save(cfg->id, &cfg->peer,
   1c4c8:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1c4ca:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1c4cc:	f811 0b01 	ldrb.w	r0, [r1], #1
				sc = (struct sc_data *)data->ind_params->data;
   1c4d0:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1c4d2:	8853      	ldrh	r3, [r2, #2]
   1c4d4:	8812      	ldrh	r2, [r2, #0]
   1c4d6:	f7ff fbb3 	bl	1bc40 <sc_save>
		if (cfg->value != data->type) {
   1c4da:	893a      	ldrh	r2, [r7, #8]
   1c4dc:	89a3      	ldrh	r3, [r4, #12]
   1c4de:	429a      	cmp	r2, r3
   1c4e0:	d10b      	bne.n	1c4fa <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c4e2:	4639      	mov	r1, r7
   1c4e4:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c4e8:	f7fd fee2 	bl	1a2b0 <bt_conn_lookup_addr_le>
		if (!conn) {
   1c4ec:	4605      	mov	r5, r0
   1c4ee:	b120      	cbz	r0, 1c4fa <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
   1c4f0:	7a83      	ldrb	r3, [r0, #10]
   1c4f2:	2b07      	cmp	r3, #7
   1c4f4:	d008      	beq.n	1c508 <notify_cb+0x78>
			bt_conn_unref(conn);
   1c4f6:	f7fd fda7 	bl	1a048 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1c4fa:	2701      	movs	r7, #1
}
   1c4fc:	4638      	mov	r0, r7
   1c4fe:	b003      	add	sp, #12
   1c500:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1c502:	f7fd fda1 	bl	1a048 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c506:	e7e8      	b.n	1c4da <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1c508:	697b      	ldr	r3, [r7, #20]
   1c50a:	b123      	cbz	r3, 1c516 <notify_cb+0x86>
   1c50c:	4631      	mov	r1, r6
   1c50e:	4798      	blx	r3
   1c510:	b908      	cbnz	r0, 1c516 <notify_cb+0x86>
			bt_conn_unref(conn);
   1c512:	4628      	mov	r0, r5
   1c514:	e7ef      	b.n	1c4f6 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
   1c516:	2214      	movs	r2, #20
   1c518:	4631      	mov	r1, r6
   1c51a:	4628      	mov	r0, r5
   1c51c:	f015 f80e 	bl	3153c <bt_gatt_check_perm>
   1c520:	4607      	mov	r7, r0
   1c522:	b150      	cbz	r0, 1c53a <notify_cb+0xaa>
   1c524:	4b15      	ldr	r3, [pc, #84]	; (1c57c <notify_cb+0xec>)
   1c526:	4916      	ldr	r1, [pc, #88]	; (1c580 <notify_cb+0xf0>)
			BT_WARN("Link is not encrypted");
   1c528:	4816      	ldr	r0, [pc, #88]	; (1c584 <notify_cb+0xf4>)
   1c52a:	1ac9      	subs	r1, r1, r3
   1c52c:	08c9      	lsrs	r1, r1, #3
   1c52e:	0189      	lsls	r1, r1, #6
   1c530:	f041 0102 	orr.w	r1, r1, #2
   1c534:	f011 ff5c 	bl	2e3f0 <log_0>
			continue;
   1c538:	e7df      	b.n	1c4fa <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1c53a:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   1c53c:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1c53e:	2b02      	cmp	r3, #2
   1c540:	88a1      	ldrh	r1, [r4, #4]
   1c542:	6922      	ldr	r2, [r4, #16]
   1c544:	d10f      	bne.n	1c566 <notify_cb+0xd6>
			err = gatt_indicate(conn, data->handle,
   1c546:	f7ff fe01 	bl	1c14c <gatt_indicate>
			if (err == 0) {
   1c54a:	4606      	mov	r6, r0
   1c54c:	b918      	cbnz	r0, 1c556 <notify_cb+0xc6>
				data->ind_params->_ref++;
   1c54e:	6922      	ldr	r2, [r4, #16]
   1c550:	7d93      	ldrb	r3, [r2, #22]
   1c552:	3301      	adds	r3, #1
   1c554:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1c556:	4628      	mov	r0, r5
   1c558:	f7fd fd76 	bl	1a048 <bt_conn_unref>
		if (err < 0) {
   1c55c:	2e00      	cmp	r6, #0
   1c55e:	dbcd      	blt.n	1c4fc <notify_cb+0x6c>
		data->err = 0;
   1c560:	2300      	movs	r3, #0
   1c562:	60a3      	str	r3, [r4, #8]
   1c564:	e7c9      	b.n	1c4fa <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1c566:	f7ff ff43 	bl	1c3f0 <gatt_notify>
   1c56a:	4606      	mov	r6, r0
   1c56c:	e7f3      	b.n	1c556 <notify_cb+0xc6>
   1c56e:	bf00      	nop
   1c570:	0001bb6d 	.word	0x0001bb6d
   1c574:	200147cc 	.word	0x200147cc
   1c578:	2001abf8 	.word	0x2001abf8
   1c57c:	000364b0 	.word	0x000364b0
   1c580:	000364f8 	.word	0x000364f8
   1c584:	0003a433 	.word	0x0003a433

0001c588 <update_ccc>:
{
   1c588:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c58a:	4b31      	ldr	r3, [pc, #196]	; (1c650 <update_ccc+0xc8>)
	struct bt_conn *conn = data->conn;
   1c58c:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c58e:	6882      	ldr	r2, [r0, #8]
{
   1c590:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c592:	429a      	cmp	r2, r3
   1c594:	d11b      	bne.n	1c5ce <update_ccc+0x46>
	ccc = attr->user_data;
   1c596:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1c598:	8933      	ldrh	r3, [r6, #8]
   1c59a:	b1c3      	cbz	r3, 1c5ce <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c59c:	4632      	mov	r2, r6
   1c59e:	4628      	mov	r0, r5
   1c5a0:	f812 1b01 	ldrb.w	r1, [r2], #1
   1c5a4:	f014 f936 	bl	30814 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1c5a8:	b188      	cbz	r0, 1c5ce <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1c5aa:	222a      	movs	r2, #42	; 0x2a
   1c5ac:	4621      	mov	r1, r4
   1c5ae:	4628      	mov	r0, r5
   1c5b0:	f014 ffc4 	bl	3153c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1c5b4:	2803      	cmp	r0, #3
   1c5b6:	d10d      	bne.n	1c5d4 <update_ccc+0x4c>
   1c5b8:	4a26      	ldr	r2, [pc, #152]	; (1c654 <update_ccc+0xcc>)
   1c5ba:	4b27      	ldr	r3, [pc, #156]	; (1c658 <update_ccc+0xd0>)
				BT_WARN("CCC %p not writable", attr);
   1c5bc:	4621      	mov	r1, r4
   1c5be:	1ad2      	subs	r2, r2, r3
   1c5c0:	08d2      	lsrs	r2, r2, #3
   1c5c2:	0192      	lsls	r2, r2, #6
   1c5c4:	4825      	ldr	r0, [pc, #148]	; (1c65c <update_ccc+0xd4>)
   1c5c6:	f042 0202 	orr.w	r2, r2, #2
   1c5ca:	f011 ff1e 	bl	2e40a <log_1>
}
   1c5ce:	2001      	movs	r0, #1
   1c5d0:	b002      	add	sp, #8
   1c5d2:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   1c5d4:	4631      	mov	r1, r6
   1c5d6:	4620      	mov	r0, r4
   1c5d8:	f014 fd3d 	bl	31056 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1c5dc:	4b20      	ldr	r3, [pc, #128]	; (1c660 <update_ccc+0xd8>)
   1c5de:	429e      	cmp	r6, r3
   1c5e0:	d1f5      	bne.n	1c5ce <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c5e2:	7a28      	ldrb	r0, [r5, #8]
   1c5e4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1c5e8:	f7ff fa92 	bl	1bb10 <find_sc_cfg>
	if (!cfg) {
   1c5ec:	4604      	mov	r4, r0
   1c5ee:	2800      	cmp	r0, #0
   1c5f0:	d0ed      	beq.n	1c5ce <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
   1c5f2:	8902      	ldrh	r2, [r0, #8]
   1c5f4:	8943      	ldrh	r3, [r0, #10]
   1c5f6:	ea52 0103 	orrs.w	r1, r2, r3
   1c5fa:	d0e8      	beq.n	1c5ce <update_ccc+0x46>
	index = bt_conn_index(conn);
   1c5fc:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1c5fe:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1c602:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1c606:	f7fd fed1 	bl	1a3ac <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1c60a:	2318      	movs	r3, #24
   1c60c:	4915      	ldr	r1, [pc, #84]	; (1c664 <update_ccc+0xdc>)
   1c60e:	4a16      	ldr	r2, [pc, #88]	; (1c668 <update_ccc+0xe0>)
   1c610:	fb03 1300 	mla	r3, r3, r0, r1
   1c614:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1c616:	4a15      	ldr	r2, [pc, #84]	; (1c66c <update_ccc+0xe4>)
   1c618:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1c61a:	aa01      	add	r2, sp, #4
   1c61c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1c61e:	2204      	movs	r2, #4
   1c620:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c622:	b203      	sxth	r3, r0
   1c624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c628:	4628      	mov	r0, r5
   1c62a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1c62e:	f7ff fdf3 	bl	1c218 <bt_gatt_indicate>
   1c632:	b148      	cbz	r0, 1c648 <update_ccc+0xc0>
   1c634:	4907      	ldr	r1, [pc, #28]	; (1c654 <update_ccc+0xcc>)
   1c636:	4b08      	ldr	r3, [pc, #32]	; (1c658 <update_ccc+0xd0>)
		BT_ERR("SC restore indication failed");
   1c638:	480d      	ldr	r0, [pc, #52]	; (1c670 <update_ccc+0xe8>)
   1c63a:	1ac9      	subs	r1, r1, r3
   1c63c:	08c9      	lsrs	r1, r1, #3
   1c63e:	0189      	lsls	r1, r1, #6
   1c640:	f041 0101 	orr.w	r1, r1, #1
   1c644:	f011 fed4 	bl	2e3f0 <log_0>
__ssp_bos_icheck3(memset, void *, int)
   1c648:	2300      	movs	r3, #0
   1c64a:	60a3      	str	r3, [r4, #8]
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
   1c64c:	e7bf      	b.n	1c5ce <update_ccc+0x46>
   1c64e:	bf00      	nop
   1c650:	0001bb6d 	.word	0x0001bb6d
   1c654:	000364f8 	.word	0x000364f8
   1c658:	000364b0 	.word	0x000364b0
   1c65c:	0003a508 	.word	0x0003a508
   1c660:	200147cc 	.word	0x200147cc
   1c664:	200161f4 	.word	0x200161f4
   1c668:	00036ca4 	.word	0x00036ca4
   1c66c:	00031331 	.word	0x00031331
   1c670:	0003a51c 	.word	0x0003a51c

0001c674 <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   1c674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c678:	460e      	mov	r6, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp, *next;
	bool has_subscription = false, found = false;
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
   1c67a:	4680      	mov	r8, r0
   1c67c:	b970      	cbnz	r0, 1c69c <bt_gatt_unsubscribe+0x28>
   1c67e:	494a      	ldr	r1, [pc, #296]	; (1c7a8 <bt_gatt_unsubscribe+0x134>)
   1c680:	f241 13b5 	movw	r3, #4533	; 0x11b5
   1c684:	4a49      	ldr	r2, [pc, #292]	; (1c7ac <bt_gatt_unsubscribe+0x138>)
   1c686:	484a      	ldr	r0, [pc, #296]	; (1c7b0 <bt_gatt_unsubscribe+0x13c>)
   1c688:	f011 fb7e 	bl	2dd88 <printk>
   1c68c:	4849      	ldr	r0, [pc, #292]	; (1c7b4 <bt_gatt_unsubscribe+0x140>)
   1c68e:	f011 fb7b 	bl	2dd88 <printk>
   1c692:	f241 11b5 	movw	r1, #4533	; 0x11b5
   1c696:	4845      	ldr	r0, [pc, #276]	; (1c7ac <bt_gatt_unsubscribe+0x138>)
   1c698:	f011 fe5c 	bl	2e354 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   1c69c:	b976      	cbnz	r6, 1c6bc <bt_gatt_unsubscribe+0x48>
   1c69e:	4946      	ldr	r1, [pc, #280]	; (1c7b8 <bt_gatt_unsubscribe+0x144>)
   1c6a0:	f241 13b6 	movw	r3, #4534	; 0x11b6
   1c6a4:	4a41      	ldr	r2, [pc, #260]	; (1c7ac <bt_gatt_unsubscribe+0x138>)
   1c6a6:	4842      	ldr	r0, [pc, #264]	; (1c7b0 <bt_gatt_unsubscribe+0x13c>)
   1c6a8:	f011 fb6e 	bl	2dd88 <printk>
   1c6ac:	4841      	ldr	r0, [pc, #260]	; (1c7b4 <bt_gatt_unsubscribe+0x140>)
   1c6ae:	f011 fb6b 	bl	2dd88 <printk>
   1c6b2:	f241 11b6 	movw	r1, #4534	; 0x11b6
   1c6b6:	483d      	ldr	r0, [pc, #244]	; (1c7ac <bt_gatt_unsubscribe+0x138>)
   1c6b8:	f011 fe4c 	bl	2e354 <assert_post_action>

	if (conn->state != BT_CONN_CONNECTED) {
   1c6bc:	f898 300a 	ldrb.w	r3, [r8, #10]
   1c6c0:	2b07      	cmp	r3, #7
   1c6c2:	d16d      	bne.n	1c7a0 <bt_gatt_unsubscribe+0x12c>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   1c6c4:	4640      	mov	r0, r8
   1c6c6:	f7ff fa33 	bl	1bb30 <gatt_sub_find>
	if (!sub) {
   1c6ca:	4607      	mov	r7, r0
   1c6cc:	b920      	cbnz	r0, 1c6d8 <bt_gatt_unsubscribe+0x64>
		return -EINVAL;
   1c6ce:	f06f 0015 	mvn.w	r0, #21
	}

	params->value = 0x0000;

	return gatt_write_ccc(conn, params);
}
   1c6d2:	b003      	add	sp, #12
   1c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1c6d8:	6884      	ldr	r4, [r0, #8]
   1c6da:	b1d4      	cbz	r4, 1c712 <bt_gatt_unsubscribe+0x9e>
   1c6dc:	f1b4 0514 	subs.w	r5, r4, #20
   1c6e0:	d019      	beq.n	1c716 <bt_gatt_unsubscribe+0xa2>
   1c6e2:	6824      	ldr	r4, [r4, #0]
   1c6e4:	b104      	cbz	r4, 1c6e8 <bt_gatt_unsubscribe+0x74>
   1c6e6:	3c14      	subs	r4, #20
   1c6e8:	f04f 0900 	mov.w	r9, #0
   1c6ec:	46cb      	mov	fp, r9
   1c6ee:	46ca      	mov	sl, r9
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c6f0:	f106 0210 	add.w	r2, r6, #16
   1c6f4:	b98d      	cbnz	r5, 1c71a <bt_gatt_unsubscribe+0xa6>
	if (!found) {
   1c6f6:	f1bb 0f00 	cmp.w	fp, #0
   1c6fa:	d0e8      	beq.n	1c6ce <bt_gatt_unsubscribe+0x5a>
	if (has_subscription) {
   1c6fc:	f1ba 0f00 	cmp.w	sl, #0
   1c700:	d045      	beq.n	1c78e <bt_gatt_unsubscribe+0x11a>
		params->notify(conn, params, NULL, 0);
   1c702:	462b      	mov	r3, r5
   1c704:	462a      	mov	r2, r5
   1c706:	4631      	mov	r1, r6
   1c708:	4640      	mov	r0, r8
   1c70a:	6834      	ldr	r4, [r6, #0]
   1c70c:	47a0      	blx	r4
		return 0;
   1c70e:	4628      	mov	r0, r5
   1c710:	e7df      	b.n	1c6d2 <bt_gatt_unsubscribe+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1c712:	4625      	mov	r5, r4
   1c714:	e7e8      	b.n	1c6e8 <bt_gatt_unsubscribe+0x74>
   1c716:	462c      	mov	r4, r5
   1c718:	e7e6      	b.n	1c6e8 <bt_gatt_unsubscribe+0x74>
		if (params == tmp) {
   1c71a:	42b5      	cmp	r5, r6
   1c71c:	f105 0114 	add.w	r1, r5, #20
   1c720:	d128      	bne.n	1c774 <bt_gatt_unsubscribe+0x100>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1c722:	696b      	ldr	r3, [r5, #20]
   1c724:	f1b9 0f00 	cmp.w	r9, #0
   1c728:	d11c      	bne.n	1c764 <bt_gatt_unsubscribe+0xf0>
   1c72a:	68f8      	ldr	r0, [r7, #12]
	list->head = node;
   1c72c:	60bb      	str	r3, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   1c72e:	4281      	cmp	r1, r0
   1c730:	d100      	bne.n	1c734 <bt_gatt_unsubscribe+0xc0>
	list->tail = node;
   1c732:	60fb      	str	r3, [r7, #12]
	parent->next = child;
   1c734:	2300      	movs	r3, #0
   1c736:	616b      	str	r3, [r5, #20]
   1c738:	e8d2 1faf 	lda	r1, [r2]
			if (atomic_test_bit(params->flags,
   1c73c:	074b      	lsls	r3, r1, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c73e:	f3c1 0b80 	ubfx	fp, r1, #2, #1
   1c742:	d51f      	bpl.n	1c784 <bt_gatt_unsubscribe+0x110>

void bt_gatt_cancel(struct bt_conn *conn, void *params)
{
	bt_att_req_cancel(conn, params);
   1c744:	4631      	mov	r1, r6
   1c746:	4640      	mov	r0, r8
   1c748:	9201      	str	r2, [sp, #4]
   1c74a:	f7ff f993 	bl	1ba74 <bt_att_req_cancel>
}
   1c74e:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1c750:	b1dc      	cbz	r4, 1c78a <bt_gatt_unsubscribe+0x116>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c752:	f114 0114 	adds.w	r1, r4, #20
   1c756:	d002      	beq.n	1c75e <bt_gatt_unsubscribe+0xea>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c758:	6961      	ldr	r1, [r4, #20]
   1c75a:	b101      	cbz	r1, 1c75e <bt_gatt_unsubscribe+0xea>
   1c75c:	3914      	subs	r1, #20
   1c75e:	4625      	mov	r5, r4
   1c760:	460c      	mov	r4, r1
   1c762:	e7c7      	b.n	1c6f4 <bt_gatt_unsubscribe+0x80>
	parent->next = child;
   1c764:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_REMOVE(slist, snode)
   1c768:	68f8      	ldr	r0, [r7, #12]
   1c76a:	4281      	cmp	r1, r0
	list->tail = node;
   1c76c:	bf08      	it	eq
   1c76e:	f8c7 900c 	streq.w	r9, [r7, #12]
}
   1c772:	e7df      	b.n	1c734 <bt_gatt_unsubscribe+0xc0>
		if (tmp->value_handle == params->value_handle) {
   1c774:	892d      	ldrh	r5, [r5, #8]
   1c776:	8930      	ldrh	r0, [r6, #8]
   1c778:	4689      	mov	r9, r1
   1c77a:	4285      	cmp	r5, r0
   1c77c:	bf08      	it	eq
   1c77e:	f04f 0a01 	moveq.w	sl, #1
   1c782:	e7e5      	b.n	1c750 <bt_gatt_unsubscribe+0xdc>
			found = true;
   1c784:	f04f 0b01 	mov.w	fp, #1
   1c788:	e7e2      	b.n	1c750 <bt_gatt_unsubscribe+0xdc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1c78a:	4621      	mov	r1, r4
   1c78c:	e7e7      	b.n	1c75e <bt_gatt_unsubscribe+0xea>
	return gatt_write_ccc(conn, params);
   1c78e:	4631      	mov	r1, r6
   1c790:	4640      	mov	r0, r8
	params->value = 0x0000;
   1c792:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   1c796:	b003      	add	sp, #12
   1c798:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   1c79c:	f7ff bb02 	b.w	1bda4 <gatt_write_ccc>
		return -ENOTCONN;
   1c7a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c7a4:	e795      	b.n	1c6d2 <bt_gatt_unsubscribe+0x5e>
   1c7a6:	bf00      	nop
   1c7a8:	00039905 	.word	0x00039905
   1c7ac:	0003a3a2 	.word	0x0003a3a2
   1c7b0:	00037f2c 	.word	0x00037f2c
   1c7b4:	0003a470 	.word	0x0003a470
   1c7b8:	0003c8af 	.word	0x0003c8af

0001c7bc <bt_gatt_mult_notification>:
{
   1c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7c0:	b087      	sub	sp, #28
   1c7c2:	4682      	mov	sl, r0
   1c7c4:	460c      	mov	r4, r1
   1c7c6:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
   1c7c8:	f7ff f9b2 	bl	1bb30 <gatt_sub_find>
	if (!sub) {
   1c7cc:	4607      	mov	r7, r0
   1c7ce:	b1f8      	cbz	r0, 1c810 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1c7d0:	4632      	mov	r2, r6
   1c7d2:	4621      	mov	r1, r4
   1c7d4:	a803      	add	r0, sp, #12
   1c7d6:	f014 ff56 	bl	31686 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1c7da:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1c7de:	2b04      	cmp	r3, #4
   1c7e0:	d916      	bls.n	1c810 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1c7e2:	2104      	movs	r1, #4
   1c7e4:	a803      	add	r0, sp, #12
   1c7e6:	f000 fbd7 	bl	1cf98 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1c7ea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
   1c7ee:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1c7f2:	4605      	mov	r5, r0
		if (len > buf.len) {
   1c7f4:	4543      	cmp	r3, r8
   1c7f6:	d20e      	bcs.n	1c816 <bt_gatt_mult_notification+0x5a>
   1c7f8:	4a1c      	ldr	r2, [pc, #112]	; (1c86c <bt_gatt_mult_notification+0xb0>)
   1c7fa:	4b1d      	ldr	r3, [pc, #116]	; (1c870 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
   1c7fc:	4641      	mov	r1, r8
   1c7fe:	1a9b      	subs	r3, r3, r2
   1c800:	08db      	lsrs	r3, r3, #3
   1c802:	019b      	lsls	r3, r3, #6
   1c804:	4632      	mov	r2, r6
   1c806:	481b      	ldr	r0, [pc, #108]	; (1c874 <bt_gatt_mult_notification+0xb8>)
   1c808:	f043 0301 	orr.w	r3, r3, #1
   1c80c:	f011 fe11 	bl	2e432 <log_2>
}
   1c810:	b007      	add	sp, #28
   1c812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c816:	68bb      	ldr	r3, [r7, #8]
   1c818:	b31b      	cbz	r3, 1c862 <bt_gatt_mult_notification+0xa6>
   1c81a:	f1b3 0914 	subs.w	r9, r3, #20
   1c81e:	d020      	beq.n	1c862 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c820:	681c      	ldr	r4, [r3, #0]
   1c822:	b104      	cbz	r4, 1c826 <bt_gatt_mult_notification+0x6a>
   1c824:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1c826:	462b      	mov	r3, r5
   1c828:	f833 bb04 	ldrh.w	fp, [r3], #4
   1c82c:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
   1c82e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c832:	455b      	cmp	r3, fp
   1c834:	d10b      	bne.n	1c84e <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
   1c836:	4643      	mov	r3, r8
   1c838:	4649      	mov	r1, r9
   1c83a:	4650      	mov	r0, sl
   1c83c:	9a01      	ldr	r2, [sp, #4]
   1c83e:	f8d9 5000 	ldr.w	r5, [r9]
   1c842:	47a8      	blx	r5
   1c844:	b918      	cbnz	r0, 1c84e <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
   1c846:	4649      	mov	r1, r9
   1c848:	4650      	mov	r0, sl
   1c84a:	f7ff ff13 	bl	1c674 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c84e:	b144      	cbz	r4, 1c862 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c850:	f114 0314 	adds.w	r3, r4, #20
   1c854:	d002      	beq.n	1c85c <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c856:	6963      	ldr	r3, [r4, #20]
   1c858:	b103      	cbz	r3, 1c85c <bt_gatt_mult_notification+0xa0>
   1c85a:	3b14      	subs	r3, #20
{
   1c85c:	46a1      	mov	r9, r4
   1c85e:	461c      	mov	r4, r3
   1c860:	e7e5      	b.n	1c82e <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
   1c862:	4641      	mov	r1, r8
   1c864:	a803      	add	r0, sp, #12
   1c866:	f000 fb97 	bl	1cf98 <net_buf_simple_pull_mem>
   1c86a:	e7b6      	b.n	1c7da <bt_gatt_mult_notification+0x1e>
   1c86c:	000364b0 	.word	0x000364b0
   1c870:	000364f8 	.word	0x000364f8
   1c874:	0003a54e 	.word	0x0003a54e

0001c878 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1c878:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c87a:	4605      	mov	r5, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1c87c:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1c87e:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c880:	466b      	mov	r3, sp
   1c882:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c886:	4a14      	ldr	r2, [pc, #80]	; (1c8d8 <bt_gatt_connected+0x60>)
	data.sec = BT_SECURITY_L1;
   1c888:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c88c:	f014 fe49 	bl	31522 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1c890:	4628      	mov	r0, r5
   1c892:	f7ff f94d 	bl	1bb30 <gatt_sub_find>
	if (!sub) {
   1c896:	b128      	cbz	r0, 1c8a4 <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1c898:	6884      	ldr	r4, [r0, #8]
   1c89a:	b11c      	cbz	r4, 1c8a4 <bt_gatt_connected+0x2c>
   1c89c:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1c89e:	f105 0690 	add.w	r6, r5, #144	; 0x90
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1c8a2:	b90c      	cbnz	r4, 1c8a8 <bt_gatt_connected+0x30>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1c8a4:	b002      	add	sp, #8
   1c8a6:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1c8a8:	4631      	mov	r1, r6
   1c8aa:	7a28      	ldrb	r0, [r5, #8]
   1c8ac:	f013 ff44 	bl	30738 <bt_addr_le_is_bonded>
   1c8b0:	b148      	cbz	r0, 1c8c6 <bt_gatt_connected+0x4e>
   1c8b2:	f104 0310 	add.w	r3, r4, #16
   1c8b6:	e8d3 3faf 	lda	r3, [r3]
   1c8ba:	079b      	lsls	r3, r3, #30
   1c8bc:	d403      	bmi.n	1c8c6 <bt_gatt_connected+0x4e>
			gatt_write_ccc(conn, params);
   1c8be:	4621      	mov	r1, r4
   1c8c0:	4628      	mov	r0, r5
   1c8c2:	f7ff fa6f 	bl	1bda4 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c8c6:	f114 0f14 	cmn.w	r4, #20
   1c8ca:	d0eb      	beq.n	1c8a4 <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c8cc:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1c8ce:	2c00      	cmp	r4, #0
   1c8d0:	d0e8      	beq.n	1c8a4 <bt_gatt_connected+0x2c>
   1c8d2:	3c14      	subs	r4, #20
   1c8d4:	e7e5      	b.n	1c8a2 <bt_gatt_connected+0x2a>
   1c8d6:	bf00      	nop
   1c8d8:	0001c589 	.word	0x0001c589

0001c8dc <db_hash_read>:
{
   1c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c8e0:	490f      	ldr	r1, [pc, #60]	; (1c920 <db_hash_read+0x44>)
{
   1c8e2:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c8e4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1c8e8:	4614      	mov	r4, r2
   1c8ea:	461d      	mov	r5, r3
   1c8ec:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c8f0:	f00d fd96 	bl	2a420 <k_work_cancel_delayable_sync>
   1c8f4:	4b0b      	ldr	r3, [pc, #44]	; (1c924 <db_hash_read+0x48>)
   1c8f6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c8fa:	075b      	lsls	r3, r3, #29
   1c8fc:	d401      	bmi.n	1c902 <db_hash_read+0x26>
		db_hash_gen(true);
   1c8fe:	f7ff fbd3 	bl	1c0a8 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
   1c902:	2101      	movs	r1, #1
   1c904:	4630      	mov	r0, r6
   1c906:	f014 fe67 	bl	315d8 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1c90a:	2310      	movs	r3, #16
   1c90c:	463a      	mov	r2, r7
   1c90e:	9306      	str	r3, [sp, #24]
   1c910:	4629      	mov	r1, r5
   1c912:	4620      	mov	r0, r4
}
   1c914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1c918:	4b03      	ldr	r3, [pc, #12]	; (1c928 <db_hash_read+0x4c>)
   1c91a:	f014 bc69 	b.w	311f0 <bt_gatt_attr_read.constprop.0>
   1c91e:	bf00      	nop
   1c920:	200156d0 	.word	0x200156d0
   1c924:	20015748 	.word	0x20015748
   1c928:	20015690 	.word	0x20015690

0001c92c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1c92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c930:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1c932:	4603      	mov	r3, r0
   1c934:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c938:	2001      	movs	r0, #1
   1c93a:	4a2e      	ldr	r2, [pc, #184]	; (1c9f4 <bt_gatt_disconnected+0xc8>)
   1c93c:	f014 fdf1 	bl	31522 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1c940:	4620      	mov	r0, r4
   1c942:	f7ff f8f5 	bl	1bb30 <gatt_sub_find>
	if (!sub) {
   1c946:	4606      	mov	r6, r0
   1c948:	b3a0      	cbz	r0, 1c9b4 <bt_gatt_disconnected+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c94a:	6883      	ldr	r3, [r0, #8]
   1c94c:	b393      	cbz	r3, 1c9b4 <bt_gatt_disconnected+0x88>
   1c94e:	f1b3 0714 	subs.w	r7, r3, #20
   1c952:	d02f      	beq.n	1c9b4 <bt_gatt_disconnected+0x88>
   1c954:	681d      	ldr	r5, [r3, #0]
   1c956:	b105      	cbz	r5, 1c95a <bt_gatt_disconnected+0x2e>
   1c958:	3d14      	subs	r5, #20
{
   1c95a:	f04f 0b00 	mov.w	fp, #0
			params->value = 0U;
   1c95e:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1c960:	f104 0890 	add.w	r8, r4, #144	; 0x90
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1c964:	f106 0901 	add.w	r9, r6, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1c968:	4641      	mov	r1, r8
   1c96a:	7a20      	ldrb	r0, [r4, #8]
   1c96c:	f013 fee4 	bl	30738 <bt_addr_le_is_bonded>
   1c970:	b988      	cbnz	r0, 1c996 <bt_gatt_disconnected+0x6a>
			gatt_sub_remove(conn, sub, prev, params);
   1c972:	463b      	mov	r3, r7
   1c974:	465a      	mov	r2, fp
   1c976:	4631      	mov	r1, r6
   1c978:	4620      	mov	r0, r4
			params->value = 0U;
   1c97a:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1c97e:	f014 fcfe 	bl	3137e <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c982:	b1bd      	cbz	r5, 1c9b4 <bt_gatt_disconnected+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c984:	f115 0114 	adds.w	r1, r5, #20
   1c988:	d002      	beq.n	1c990 <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c98a:	6969      	ldr	r1, [r5, #20]
   1c98c:	b101      	cbz	r1, 1c990 <bt_gatt_disconnected+0x64>
   1c98e:	3914      	subs	r1, #20
{
   1c990:	462f      	mov	r7, r5
   1c992:	460d      	mov	r5, r1
   1c994:	e7e8      	b.n	1c968 <bt_gatt_disconnected+0x3c>
   1c996:	f107 0310 	add.w	r3, r7, #16
   1c99a:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1c99e:	07db      	lsls	r3, r3, #31
   1c9a0:	d4e7      	bmi.n	1c972 <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1c9a2:	7873      	ldrb	r3, [r6, #1]
   1c9a4:	b11b      	cbz	r3, 1c9ae <bt_gatt_disconnected+0x82>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1c9a6:	4641      	mov	r1, r8
   1c9a8:	4648      	mov	r0, r9
   1c9aa:	f014 fbe8 	bl	3117e <bt_addr_le_copy>
			prev = &params->node;
   1c9ae:	f107 0b14 	add.w	fp, r7, #20
   1c9b2:	e7e6      	b.n	1c982 <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
   1c9b4:	4620      	mov	r0, r4
   1c9b6:	f7ff f88d 	bl	1bad4 <find_cf_cfg>
	if (!cfg) {
   1c9ba:	4605      	mov	r5, r0
   1c9bc:	b1c0      	cbz	r0, 1c9f0 <bt_gatt_disconnected+0xc4>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c9be:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1c9c2:	4631      	mov	r1, r6
   1c9c4:	7a20      	ldrb	r0, [r4, #8]
   1c9c6:	f013 feb7 	bl	30738 <bt_addr_le_is_bonded>
   1c9ca:	b920      	cbnz	r0, 1c9d6 <bt_gatt_disconnected+0xaa>
		clear_cf_cfg(cfg);
   1c9cc:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1c9ce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   1c9d2:	f014 bc8f 	b.w	312f4 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c9d6:	1c68      	adds	r0, r5, #1
   1c9d8:	4631      	mov	r1, r6
   1c9da:	f014 fbd0 	bl	3117e <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c9de:	350c      	adds	r5, #12
   1c9e0:	e8d5 3fef 	ldaex	r3, [r5]
   1c9e4:	f023 0302 	bic.w	r3, r3, #2
   1c9e8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c9ec:	2a00      	cmp	r2, #0
   1c9ee:	d1f7      	bne.n	1c9e0 <bt_gatt_disconnected+0xb4>
}
   1c9f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9f4:	0001bdc9 	.word	0x0001bdc9

0001c9f8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1c9f8:	4a0b      	ldr	r2, [pc, #44]	; (1ca28 <bt_smp_accept+0x30>)
{
   1c9fa:	b508      	push	{r3, lr}
   1c9fc:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   1c9fe:	6810      	ldr	r0, [r2, #0]
   1ca00:	b918      	cbnz	r0, 1ca0a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   1ca02:	4b0a      	ldr	r3, [pc, #40]	; (1ca2c <bt_smp_accept+0x34>)
   1ca04:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   1ca06:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1ca08:	bd08      	pop	{r3, pc}
   1ca0a:	4909      	ldr	r1, [pc, #36]	; (1ca30 <bt_smp_accept+0x38>)
   1ca0c:	4a09      	ldr	r2, [pc, #36]	; (1ca34 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
   1ca0e:	480a      	ldr	r0, [pc, #40]	; (1ca38 <bt_smp_accept+0x40>)
   1ca10:	1a52      	subs	r2, r2, r1
   1ca12:	08d2      	lsrs	r2, r2, #3
   1ca14:	0192      	lsls	r2, r2, #6
   1ca16:	4619      	mov	r1, r3
   1ca18:	f042 0201 	orr.w	r2, r2, #1
   1ca1c:	f011 fcf5 	bl	2e40a <log_1>
	return -ENOMEM;
   1ca20:	f06f 000b 	mvn.w	r0, #11
   1ca24:	e7f0      	b.n	1ca08 <bt_smp_accept+0x10>
   1ca26:	bf00      	nop
   1ca28:	20015750 	.word	0x20015750
   1ca2c:	00036d80 	.word	0x00036d80
   1ca30:	000364b0 	.word	0x000364b0
   1ca34:	00036528 	.word	0x00036528
   1ca38:	0003a576 	.word	0x0003a576

0001ca3c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1ca3c:	222c      	movs	r2, #44	; 0x2c
   1ca3e:	4b02      	ldr	r3, [pc, #8]	; (1ca48 <net_buf_pool_get+0xc>)
   1ca40:	fb02 3000 	mla	r0, r2, r0, r3
   1ca44:	4770      	bx	lr
   1ca46:	bf00      	nop
   1ca48:	20015014 	.word	0x20015014

0001ca4c <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   1ca4c:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ca4e:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   1ca50:	4a04      	ldr	r2, [pc, #16]	; (1ca64 <net_buf_id+0x18>)
   1ca52:	fb01 2303 	mla	r3, r1, r3, r2
   1ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ca58:	1ac0      	subs	r0, r0, r3
}
   1ca5a:	4b03      	ldr	r3, [pc, #12]	; (1ca68 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1ca5c:	10c0      	asrs	r0, r0, #3
}
   1ca5e:	4358      	muls	r0, r3
   1ca60:	4770      	bx	lr
   1ca62:	bf00      	nop
   1ca64:	20015014 	.word	0x20015014
   1ca68:	aaaaaaab 	.word	0xaaaaaaab

0001ca6c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ca6c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ca6e:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ca70:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ca72:	4a09      	ldr	r2, [pc, #36]	; (1ca98 <fixed_data_alloc+0x2c>)
   1ca74:	fb04 2303 	mla	r3, r4, r3, r2
   1ca78:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1ca7a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ca7c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ca7e:	6823      	ldr	r3, [r4, #0]
   1ca80:	429a      	cmp	r2, r3
   1ca82:	bf94      	ite	ls
   1ca84:	600a      	strls	r2, [r1, #0]
   1ca86:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ca88:	f7ff ffe0 	bl	1ca4c <net_buf_id>
   1ca8c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1ca90:	fb02 3000 	mla	r0, r2, r0, r3
   1ca94:	bd10      	pop	{r4, pc}
   1ca96:	bf00      	nop
   1ca98:	20015014 	.word	0x20015014

0001ca9c <net_buf_reset>:
{
   1ca9c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ca9e:	7943      	ldrb	r3, [r0, #5]
{
   1caa0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1caa2:	b14b      	cbz	r3, 1cab8 <net_buf_reset+0x1c>
   1caa4:	490d      	ldr	r1, [pc, #52]	; (1cadc <net_buf_reset+0x40>)
   1caa6:	480e      	ldr	r0, [pc, #56]	; (1cae0 <net_buf_reset+0x44>)
   1caa8:	234f      	movs	r3, #79	; 0x4f
   1caaa:	4a0e      	ldr	r2, [pc, #56]	; (1cae4 <net_buf_reset+0x48>)
   1caac:	f011 f96c 	bl	2dd88 <printk>
   1cab0:	214f      	movs	r1, #79	; 0x4f
   1cab2:	480c      	ldr	r0, [pc, #48]	; (1cae4 <net_buf_reset+0x48>)
   1cab4:	f011 fc4e 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1cab8:	6823      	ldr	r3, [r4, #0]
   1caba:	b14b      	cbz	r3, 1cad0 <net_buf_reset+0x34>
   1cabc:	490a      	ldr	r1, [pc, #40]	; (1cae8 <net_buf_reset+0x4c>)
   1cabe:	4808      	ldr	r0, [pc, #32]	; (1cae0 <net_buf_reset+0x44>)
   1cac0:	2350      	movs	r3, #80	; 0x50
   1cac2:	4a08      	ldr	r2, [pc, #32]	; (1cae4 <net_buf_reset+0x48>)
   1cac4:	f011 f960 	bl	2dd88 <printk>
   1cac8:	2150      	movs	r1, #80	; 0x50
   1caca:	4806      	ldr	r0, [pc, #24]	; (1cae4 <net_buf_reset+0x48>)
   1cacc:	f011 fc42 	bl	2e354 <assert_post_action>
	buf->len  = 0U;
   1cad0:	2300      	movs	r3, #0
   1cad2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1cad4:	6923      	ldr	r3, [r4, #16]
   1cad6:	60a3      	str	r3, [r4, #8]
}
   1cad8:	bd10      	pop	{r4, pc}
   1cada:	bf00      	nop
   1cadc:	0003a5c6 	.word	0x0003a5c6
   1cae0:	00037f2c 	.word	0x00037f2c
   1cae4:	0003a5a2 	.word	0x0003a5a2
   1cae8:	0003a5d7 	.word	0x0003a5d7

0001caec <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1caec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1caf0:	4605      	mov	r5, r0
   1caf2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1caf4:	4610      	mov	r0, r2
   1caf6:	4619      	mov	r1, r3
{
   1caf8:	4616      	mov	r6, r2
   1cafa:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1cafc:	f018 fc6d 	bl	353da <sys_clock_timeout_end_calc>
   1cb00:	4680      	mov	r8, r0
   1cb02:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1cb04:	b94d      	cbnz	r5, 1cb1a <net_buf_alloc_len+0x2e>
   1cb06:	494d      	ldr	r1, [pc, #308]	; (1cc3c <net_buf_alloc_len+0x150>)
   1cb08:	484d      	ldr	r0, [pc, #308]	; (1cc40 <net_buf_alloc_len+0x154>)
   1cb0a:	23ed      	movs	r3, #237	; 0xed
   1cb0c:	4a4d      	ldr	r2, [pc, #308]	; (1cc44 <net_buf_alloc_len+0x158>)
   1cb0e:	f011 f93b 	bl	2dd88 <printk>
   1cb12:	21ed      	movs	r1, #237	; 0xed
   1cb14:	484b      	ldr	r0, [pc, #300]	; (1cc44 <net_buf_alloc_len+0x158>)
   1cb16:	f011 fc1d 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   1cb1a:	f04f 0320 	mov.w	r3, #32
   1cb1e:	f3ef 8a11 	mrs	sl, BASEPRI
   1cb22:	f383 8811 	msr	BASEPRI, r3
   1cb26:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1cb2a:	8beb      	ldrh	r3, [r5, #30]
   1cb2c:	2b00      	cmp	r3, #0
   1cb2e:	d055      	beq.n	1cbdc <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1cb30:	8baa      	ldrh	r2, [r5, #28]
   1cb32:	429a      	cmp	r2, r3
   1cb34:	d93e      	bls.n	1cbb4 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   1cb36:	2200      	movs	r2, #0
   1cb38:	2300      	movs	r3, #0
   1cb3a:	4628      	mov	r0, r5
   1cb3c:	f00c fea2 	bl	29884 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1cb40:	4604      	mov	r4, r0
   1cb42:	2800      	cmp	r0, #0
   1cb44:	d036      	beq.n	1cbb4 <net_buf_alloc_len+0xc8>
	__asm__ volatile(
   1cb46:	f38a 8811 	msr	BASEPRI, sl
   1cb4a:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1cb4e:	f8dd a004 	ldr.w	sl, [sp, #4]
   1cb52:	f1ba 0f00 	cmp.w	sl, #0
   1cb56:	d06d      	beq.n	1cc34 <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cb58:	ea56 0307 	orrs.w	r3, r6, r7
   1cb5c:	d010      	beq.n	1cb80 <net_buf_alloc_len+0x94>
   1cb5e:	1c7b      	adds	r3, r7, #1
   1cb60:	bf08      	it	eq
   1cb62:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1cb66:	d00b      	beq.n	1cb80 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1cb68:	f00f fa14 	bl	2bf94 <sys_clock_tick_get>
   1cb6c:	ebb8 0600 	subs.w	r6, r8, r0
   1cb70:	eb69 0701 	sbc.w	r7, r9, r1
   1cb74:	2e00      	cmp	r6, #0
   1cb76:	f177 0300 	sbcs.w	r3, r7, #0
   1cb7a:	bfbc      	itt	lt
   1cb7c:	2600      	movlt	r6, #0
   1cb7e:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
   1cb80:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cb84:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1cb86:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1cc48 <net_buf_alloc_len+0x15c>
   1cb8a:	4632      	mov	r2, r6
   1cb8c:	fb09 8303 	mla	r3, r9, r3, r8
   1cb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cb92:	4620      	mov	r0, r4
   1cb94:	681b      	ldr	r3, [r3, #0]
   1cb96:	a901      	add	r1, sp, #4
   1cb98:	681d      	ldr	r5, [r3, #0]
   1cb9a:	463b      	mov	r3, r7
   1cb9c:	47a8      	blx	r5
   1cb9e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1cba0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1cba2:	bb58      	cbnz	r0, 1cbfc <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
   1cba4:	79a0      	ldrb	r0, [r4, #6]
   1cba6:	4621      	mov	r1, r4
   1cba8:	fb00 8009 	mla	r0, r0, r9, r8
   1cbac:	f018 fb70 	bl	35290 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1cbb0:	462c      	mov	r4, r5
}
   1cbb2:	e01f      	b.n	1cbf4 <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
   1cbb4:	8be8      	ldrh	r0, [r5, #30]
   1cbb6:	1e43      	subs	r3, r0, #1
   1cbb8:	83eb      	strh	r3, [r5, #30]
   1cbba:	f38a 8811 	msr	BASEPRI, sl
   1cbbe:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1cbc2:	2318      	movs	r3, #24
   1cbc4:	8bac      	ldrh	r4, [r5, #28]
   1cbc6:	1a24      	subs	r4, r4, r0
   1cbc8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1cbca:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1cbce:	481e      	ldr	r0, [pc, #120]	; (1cc48 <net_buf_alloc_len+0x15c>)
   1cbd0:	4b1e      	ldr	r3, [pc, #120]	; (1cc4c <net_buf_alloc_len+0x160>)
   1cbd2:	1a2d      	subs	r5, r5, r0
   1cbd4:	10ad      	asrs	r5, r5, #2
   1cbd6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1cbd8:	71a5      	strb	r5, [r4, #6]
		goto success;
   1cbda:	e7b8      	b.n	1cb4e <net_buf_alloc_len+0x62>
   1cbdc:	f38a 8811 	msr	BASEPRI, sl
   1cbe0:	f3bf 8f6f 	isb	sy
   1cbe4:	4632      	mov	r2, r6
   1cbe6:	463b      	mov	r3, r7
   1cbe8:	4628      	mov	r0, r5
   1cbea:	f00c fe4b 	bl	29884 <z_impl_k_queue_get>
	if (!buf) {
   1cbee:	4604      	mov	r4, r0
   1cbf0:	2800      	cmp	r0, #0
   1cbf2:	d1ac      	bne.n	1cb4e <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1cbf4:	4620      	mov	r0, r4
   1cbf6:	b002      	add	sp, #8
   1cbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1cbfc:	9b01      	ldr	r3, [sp, #4]
   1cbfe:	459a      	cmp	sl, r3
   1cc00:	d90e      	bls.n	1cc20 <net_buf_alloc_len+0x134>
   1cc02:	4913      	ldr	r1, [pc, #76]	; (1cc50 <net_buf_alloc_len+0x164>)
   1cc04:	f240 134d 	movw	r3, #333	; 0x14d
   1cc08:	4a0e      	ldr	r2, [pc, #56]	; (1cc44 <net_buf_alloc_len+0x158>)
   1cc0a:	480d      	ldr	r0, [pc, #52]	; (1cc40 <net_buf_alloc_len+0x154>)
   1cc0c:	f011 f8bc 	bl	2dd88 <printk>
   1cc10:	4810      	ldr	r0, [pc, #64]	; (1cc54 <net_buf_alloc_len+0x168>)
   1cc12:	f011 f8b9 	bl	2dd88 <printk>
   1cc16:	f240 114d 	movw	r1, #333	; 0x14d
   1cc1a:	480a      	ldr	r0, [pc, #40]	; (1cc44 <net_buf_alloc_len+0x158>)
   1cc1c:	f011 fb9a 	bl	2e354 <assert_post_action>
	buf->frags = NULL;
   1cc20:	2300      	movs	r3, #0
   1cc22:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1cc24:	2301      	movs	r3, #1
   1cc26:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1cc28:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   1cc2a:	4620      	mov	r0, r4
	buf->size  = size;
   1cc2c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1cc2e:	f7ff ff35 	bl	1ca9c <net_buf_reset>
	return buf;
   1cc32:	e7df      	b.n	1cbf4 <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
   1cc34:	f8c4 a010 	str.w	sl, [r4, #16]
   1cc38:	e7f2      	b.n	1cc20 <net_buf_alloc_len+0x134>
   1cc3a:	bf00      	nop
   1cc3c:	0003a5f1 	.word	0x0003a5f1
   1cc40:	00037f2c 	.word	0x00037f2c
   1cc44:	0003a5a2 	.word	0x0003a5a2
   1cc48:	20015014 	.word	0x20015014
   1cc4c:	ba2e8ba3 	.word	0xba2e8ba3
   1cc50:	0003a5f6 	.word	0x0003a5f6
   1cc54:	000385b8 	.word	0x000385b8

0001cc58 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1cc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc5c:	4606      	mov	r6, r0
   1cc5e:	f00c fe11 	bl	29884 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1cc62:	4605      	mov	r5, r0
   1cc64:	b150      	cbz	r0, 1cc7c <net_buf_get+0x24>
   1cc66:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1cc68:	4f12      	ldr	r7, [pc, #72]	; (1ccb4 <net_buf_get+0x5c>)
   1cc6a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1ccb8 <net_buf_get+0x60>
   1cc6e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1ccbc <net_buf_get+0x64>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cc72:	7963      	ldrb	r3, [r4, #5]
   1cc74:	f013 0301 	ands.w	r3, r3, #1
   1cc78:	d103      	bne.n	1cc82 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1cc7a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1cc7c:	4628      	mov	r0, r5
   1cc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cc82:	2200      	movs	r2, #0
   1cc84:	2300      	movs	r3, #0
   1cc86:	4630      	mov	r0, r6
   1cc88:	f00c fdfc 	bl	29884 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1cc8c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1cc8e:	b958      	cbnz	r0, 1cca8 <net_buf_get+0x50>
   1cc90:	4641      	mov	r1, r8
   1cc92:	4648      	mov	r0, r9
   1cc94:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   1cc98:	463a      	mov	r2, r7
   1cc9a:	f011 f875 	bl	2dd88 <printk>
   1cc9e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1cca2:	4638      	mov	r0, r7
   1cca4:	f011 fb56 	bl	2e354 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1cca8:	7963      	ldrb	r3, [r4, #5]
   1ccaa:	f023 0301 	bic.w	r3, r3, #1
   1ccae:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ccb0:	6824      	ldr	r4, [r4, #0]
   1ccb2:	e7de      	b.n	1cc72 <net_buf_get+0x1a>
   1ccb4:	0003a5a2 	.word	0x0003a5a2
   1ccb8:	0003a607 	.word	0x0003a607
   1ccbc:	00037f2c 	.word	0x00037f2c

0001ccc0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1ccc0:	b538      	push	{r3, r4, r5, lr}
   1ccc2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1ccc4:	4604      	mov	r4, r0
   1ccc6:	b958      	cbnz	r0, 1cce0 <net_buf_simple_reserve+0x20>
   1ccc8:	490e      	ldr	r1, [pc, #56]	; (1cd04 <net_buf_simple_reserve+0x44>)
   1ccca:	480f      	ldr	r0, [pc, #60]	; (1cd08 <net_buf_simple_reserve+0x48>)
   1cccc:	f240 13bb 	movw	r3, #443	; 0x1bb
   1ccd0:	4a0e      	ldr	r2, [pc, #56]	; (1cd0c <net_buf_simple_reserve+0x4c>)
   1ccd2:	f011 f859 	bl	2dd88 <printk>
   1ccd6:	f240 11bb 	movw	r1, #443	; 0x1bb
   1ccda:	480c      	ldr	r0, [pc, #48]	; (1cd0c <net_buf_simple_reserve+0x4c>)
   1ccdc:	f011 fb3a 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1cce0:	88a3      	ldrh	r3, [r4, #4]
   1cce2:	b15b      	cbz	r3, 1ccfc <net_buf_simple_reserve+0x3c>
   1cce4:	490a      	ldr	r1, [pc, #40]	; (1cd10 <net_buf_simple_reserve+0x50>)
   1cce6:	4808      	ldr	r0, [pc, #32]	; (1cd08 <net_buf_simple_reserve+0x48>)
   1cce8:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   1ccec:	4a07      	ldr	r2, [pc, #28]	; (1cd0c <net_buf_simple_reserve+0x4c>)
   1ccee:	f011 f84b 	bl	2dd88 <printk>
   1ccf2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1ccf6:	4805      	ldr	r0, [pc, #20]	; (1cd0c <net_buf_simple_reserve+0x4c>)
   1ccf8:	f011 fb2c 	bl	2e354 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ccfc:	68a3      	ldr	r3, [r4, #8]
   1ccfe:	442b      	add	r3, r5
   1cd00:	6023      	str	r3, [r4, #0]
}
   1cd02:	bd38      	pop	{r3, r4, r5, pc}
   1cd04:	00039597 	.word	0x00039597
   1cd08:	00037f2c 	.word	0x00037f2c
   1cd0c:	0003a5a2 	.word	0x0003a5a2
   1cd10:	0003a613 	.word	0x0003a613

0001cd14 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1cd14:	b538      	push	{r3, r4, r5, lr}
   1cd16:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1cd18:	4605      	mov	r5, r0
   1cd1a:	b958      	cbnz	r0, 1cd34 <net_buf_put+0x20>
   1cd1c:	4913      	ldr	r1, [pc, #76]	; (1cd6c <net_buf_put+0x58>)
   1cd1e:	4814      	ldr	r0, [pc, #80]	; (1cd70 <net_buf_put+0x5c>)
   1cd20:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   1cd24:	4a13      	ldr	r2, [pc, #76]	; (1cd74 <net_buf_put+0x60>)
   1cd26:	f011 f82f 	bl	2dd88 <printk>
   1cd2a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1cd2e:	4811      	ldr	r0, [pc, #68]	; (1cd74 <net_buf_put+0x60>)
   1cd30:	f011 fb10 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1cd34:	b95c      	cbnz	r4, 1cd4e <net_buf_put+0x3a>
   1cd36:	4910      	ldr	r1, [pc, #64]	; (1cd78 <net_buf_put+0x64>)
   1cd38:	480d      	ldr	r0, [pc, #52]	; (1cd70 <net_buf_put+0x5c>)
   1cd3a:	f240 13f9 	movw	r3, #505	; 0x1f9
   1cd3e:	4a0d      	ldr	r2, [pc, #52]	; (1cd74 <net_buf_put+0x60>)
   1cd40:	f011 f822 	bl	2dd88 <printk>
   1cd44:	f240 11f9 	movw	r1, #505	; 0x1f9
   1cd48:	480a      	ldr	r0, [pc, #40]	; (1cd74 <net_buf_put+0x60>)
   1cd4a:	f011 fb03 	bl	2e354 <assert_post_action>
{
   1cd4e:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1cd50:	6811      	ldr	r1, [r2, #0]
   1cd52:	b929      	cbnz	r1, 1cd60 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1cd54:	4621      	mov	r1, r4
   1cd56:	4628      	mov	r0, r5
}
   1cd58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1cd5c:	f00c bd34 	b.w	297c8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1cd60:	7953      	ldrb	r3, [r2, #5]
   1cd62:	f043 0301 	orr.w	r3, r3, #1
   1cd66:	7153      	strb	r3, [r2, #5]
   1cd68:	460a      	mov	r2, r1
   1cd6a:	e7f1      	b.n	1cd50 <net_buf_put+0x3c>
   1cd6c:	0003a622 	.word	0x0003a622
   1cd70:	00037f2c 	.word	0x00037f2c
   1cd74:	0003a5a2 	.word	0x0003a5a2
   1cd78:	00039597 	.word	0x00039597

0001cd7c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1cd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1cd80:	4605      	mov	r5, r0
   1cd82:	b328      	cbz	r0, 1cdd0 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1cd84:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1cd86:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1cd8a:	4e1b      	ldr	r6, [pc, #108]	; (1cdf8 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   1cd8c:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1cd8e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1cd90:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1cd92:	3b01      	subs	r3, #1
   1cd94:	b2db      	uxtb	r3, r3
   1cd96:	7123      	strb	r3, [r4, #4]
   1cd98:	b9c3      	cbnz	r3, 1cdcc <net_buf_unref+0x50>
		if (buf->__buf) {
   1cd9a:	6921      	ldr	r1, [r4, #16]
   1cd9c:	b159      	cbz	r1, 1cdb6 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1cd9e:	7963      	ldrb	r3, [r4, #5]
   1cda0:	079b      	lsls	r3, r3, #30
   1cda2:	d407      	bmi.n	1cdb4 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   1cda4:	79a3      	ldrb	r3, [r4, #6]
   1cda6:	4620      	mov	r0, r4
   1cda8:	fb08 6303 	mla	r3, r8, r3, r6
   1cdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cdae:	681b      	ldr	r3, [r3, #0]
   1cdb0:	689b      	ldr	r3, [r3, #8]
   1cdb2:	4798      	blx	r3
			buf->__buf = NULL;
   1cdb4:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1cdb6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1cdb8:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1cdba:	fb08 6300 	mla	r3, r8, r0, r6
   1cdbe:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   1cdc0:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1cdc2:	b19b      	cbz	r3, 1cdec <net_buf_unref+0x70>
			pool->destroy(buf);
   1cdc4:	4620      	mov	r0, r4
   1cdc6:	4798      	blx	r3
	while (buf) {
   1cdc8:	2d00      	cmp	r5, #0
   1cdca:	d1df      	bne.n	1cd8c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1cdd0:	490a      	ldr	r1, [pc, #40]	; (1cdfc <net_buf_unref+0x80>)
   1cdd2:	480b      	ldr	r0, [pc, #44]	; (1ce00 <net_buf_unref+0x84>)
   1cdd4:	f44f 7302 	mov.w	r3, #520	; 0x208
   1cdd8:	4a0a      	ldr	r2, [pc, #40]	; (1ce04 <net_buf_unref+0x88>)
   1cdda:	f010 ffd5 	bl	2dd88 <printk>
}
   1cdde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1cde2:	f44f 7102 	mov.w	r1, #520	; 0x208
   1cde6:	4807      	ldr	r0, [pc, #28]	; (1ce04 <net_buf_unref+0x88>)
   1cde8:	f011 bab4 	b.w	2e354 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1cdec:	4621      	mov	r1, r4
   1cdee:	fb00 6008 	mla	r0, r0, r8, r6
   1cdf2:	f018 fa4d 	bl	35290 <k_queue_prepend>
}
   1cdf6:	e7e7      	b.n	1cdc8 <net_buf_unref+0x4c>
   1cdf8:	20015014 	.word	0x20015014
   1cdfc:	00039597 	.word	0x00039597
   1ce00:	00037f2c 	.word	0x00037f2c
   1ce04:	0003a5a2 	.word	0x0003a5a2

0001ce08 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1ce08:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1ce0a:	4604      	mov	r4, r0
   1ce0c:	b958      	cbnz	r0, 1ce26 <net_buf_ref+0x1e>
   1ce0e:	4908      	ldr	r1, [pc, #32]	; (1ce30 <net_buf_ref+0x28>)
   1ce10:	4808      	ldr	r0, [pc, #32]	; (1ce34 <net_buf_ref+0x2c>)
   1ce12:	f240 2337 	movw	r3, #567	; 0x237
   1ce16:	4a08      	ldr	r2, [pc, #32]	; (1ce38 <net_buf_ref+0x30>)
   1ce18:	f010 ffb6 	bl	2dd88 <printk>
   1ce1c:	f240 2137 	movw	r1, #567	; 0x237
   1ce20:	4805      	ldr	r0, [pc, #20]	; (1ce38 <net_buf_ref+0x30>)
   1ce22:	f011 fa97 	bl	2e354 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1ce26:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   1ce28:	4620      	mov	r0, r4
	buf->ref++;
   1ce2a:	3301      	adds	r3, #1
   1ce2c:	7123      	strb	r3, [r4, #4]
}
   1ce2e:	bd10      	pop	{r4, pc}
   1ce30:	00039597 	.word	0x00039597
   1ce34:	00037f2c 	.word	0x00037f2c
   1ce38:	0003a5a2 	.word	0x0003a5a2

0001ce3c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1ce3c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1ce3e:	4604      	mov	r4, r0
   1ce40:	b958      	cbnz	r0, 1ce5a <net_buf_frag_last+0x1e>
   1ce42:	4908      	ldr	r1, [pc, #32]	; (1ce64 <net_buf_frag_last+0x28>)
   1ce44:	4808      	ldr	r0, [pc, #32]	; (1ce68 <net_buf_frag_last+0x2c>)
   1ce46:	f44f 731d 	mov.w	r3, #628	; 0x274
   1ce4a:	4a08      	ldr	r2, [pc, #32]	; (1ce6c <net_buf_frag_last+0x30>)
   1ce4c:	f010 ff9c 	bl	2dd88 <printk>
   1ce50:	f44f 711d 	mov.w	r1, #628	; 0x274
   1ce54:	4805      	ldr	r0, [pc, #20]	; (1ce6c <net_buf_frag_last+0x30>)
   1ce56:	f011 fa7d 	bl	2e354 <assert_post_action>

	while (buf->frags) {
   1ce5a:	4620      	mov	r0, r4
   1ce5c:	6824      	ldr	r4, [r4, #0]
   1ce5e:	2c00      	cmp	r4, #0
   1ce60:	d1fb      	bne.n	1ce5a <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1ce62:	bd10      	pop	{r4, pc}
   1ce64:	00039597 	.word	0x00039597
   1ce68:	00037f2c 	.word	0x00037f2c
   1ce6c:	0003a5a2 	.word	0x0003a5a2

0001ce70 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1ce70:	b538      	push	{r3, r4, r5, lr}
   1ce72:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1ce74:	4604      	mov	r4, r0
   1ce76:	b958      	cbnz	r0, 1ce90 <net_buf_frag_insert+0x20>
   1ce78:	4910      	ldr	r1, [pc, #64]	; (1cebc <net_buf_frag_insert+0x4c>)
   1ce7a:	4811      	ldr	r0, [pc, #68]	; (1cec0 <net_buf_frag_insert+0x50>)
   1ce7c:	f240 237f 	movw	r3, #639	; 0x27f
   1ce80:	4a10      	ldr	r2, [pc, #64]	; (1cec4 <net_buf_frag_insert+0x54>)
   1ce82:	f010 ff81 	bl	2dd88 <printk>
   1ce86:	f240 217f 	movw	r1, #639	; 0x27f
   1ce8a:	480e      	ldr	r0, [pc, #56]	; (1cec4 <net_buf_frag_insert+0x54>)
   1ce8c:	f011 fa62 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1ce90:	b95d      	cbnz	r5, 1ceaa <net_buf_frag_insert+0x3a>
   1ce92:	490d      	ldr	r1, [pc, #52]	; (1cec8 <net_buf_frag_insert+0x58>)
   1ce94:	480a      	ldr	r0, [pc, #40]	; (1cec0 <net_buf_frag_insert+0x50>)
   1ce96:	f44f 7320 	mov.w	r3, #640	; 0x280
   1ce9a:	4a0a      	ldr	r2, [pc, #40]	; (1cec4 <net_buf_frag_insert+0x54>)
   1ce9c:	f010 ff74 	bl	2dd88 <printk>
   1cea0:	f44f 7120 	mov.w	r1, #640	; 0x280
   1cea4:	4807      	ldr	r0, [pc, #28]	; (1cec4 <net_buf_frag_insert+0x54>)
   1cea6:	f011 fa55 	bl	2e354 <assert_post_action>

	if (parent->frags) {
   1ceaa:	6823      	ldr	r3, [r4, #0]
   1ceac:	b123      	cbz	r3, 1ceb8 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ceae:	4628      	mov	r0, r5
   1ceb0:	f7ff ffc4 	bl	1ce3c <net_buf_frag_last>
   1ceb4:	6823      	ldr	r3, [r4, #0]
   1ceb6:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ceb8:	6025      	str	r5, [r4, #0]
}
   1ceba:	bd38      	pop	{r3, r4, r5, pc}
   1cebc:	0003a627 	.word	0x0003a627
   1cec0:	00037f2c 	.word	0x00037f2c
   1cec4:	0003a5a2 	.word	0x0003a5a2
   1cec8:	0003a62e 	.word	0x0003a62e

0001cecc <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1cecc:	b538      	push	{r3, r4, r5, lr}
   1cece:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1ced0:	460d      	mov	r5, r1
   1ced2:	b959      	cbnz	r1, 1ceec <net_buf_frag_add+0x20>
   1ced4:	490c      	ldr	r1, [pc, #48]	; (1cf08 <net_buf_frag_add+0x3c>)
   1ced6:	480d      	ldr	r0, [pc, #52]	; (1cf0c <net_buf_frag_add+0x40>)
   1ced8:	f240 238b 	movw	r3, #651	; 0x28b
   1cedc:	4a0c      	ldr	r2, [pc, #48]	; (1cf10 <net_buf_frag_add+0x44>)
   1cede:	f010 ff53 	bl	2dd88 <printk>
   1cee2:	f240 218b 	movw	r1, #651	; 0x28b
   1cee6:	480a      	ldr	r0, [pc, #40]	; (1cf10 <net_buf_frag_add+0x44>)
   1cee8:	f011 fa34 	bl	2e354 <assert_post_action>

	if (!head) {
   1ceec:	b924      	cbnz	r4, 1cef8 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   1ceee:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1cef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1cef4:	f7ff bf88 	b.w	1ce08 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1cef8:	4620      	mov	r0, r4
   1cefa:	f7ff ff9f 	bl	1ce3c <net_buf_frag_last>
   1cefe:	4629      	mov	r1, r5
   1cf00:	f7ff ffb6 	bl	1ce70 <net_buf_frag_insert>
}
   1cf04:	4620      	mov	r0, r4
   1cf06:	bd38      	pop	{r3, r4, r5, pc}
   1cf08:	0003a62e 	.word	0x0003a62e
   1cf0c:	00037f2c 	.word	0x00037f2c
   1cf10:	0003a5a2 	.word	0x0003a5a2

0001cf14 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1cf14:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1cf16:	6882      	ldr	r2, [r0, #8]
   1cf18:	6803      	ldr	r3, [r0, #0]
{
   1cf1a:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   1cf1c:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1cf1e:	4299      	cmp	r1, r3
{
   1cf20:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1cf22:	d90b      	bls.n	1cf3c <net_buf_simple_push+0x28>
   1cf24:	4909      	ldr	r1, [pc, #36]	; (1cf4c <net_buf_simple_push+0x38>)
   1cf26:	480a      	ldr	r0, [pc, #40]	; (1cf50 <net_buf_simple_push+0x3c>)
   1cf28:	f240 430f 	movw	r3, #1039	; 0x40f
   1cf2c:	4a09      	ldr	r2, [pc, #36]	; (1cf54 <net_buf_simple_push+0x40>)
   1cf2e:	f010 ff2b 	bl	2dd88 <printk>
   1cf32:	f240 410f 	movw	r1, #1039	; 0x40f
   1cf36:	4807      	ldr	r0, [pc, #28]	; (1cf54 <net_buf_simple_push+0x40>)
   1cf38:	f011 fa0c 	bl	2e354 <assert_post_action>
	buf->data -= len;
   1cf3c:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1cf3e:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1cf40:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1cf42:	440d      	add	r5, r1
	buf->data -= len;
   1cf44:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1cf46:	80a5      	strh	r5, [r4, #4]
}
   1cf48:	bd38      	pop	{r3, r4, r5, pc}
   1cf4a:	bf00      	nop
   1cf4c:	0003a643 	.word	0x0003a643
   1cf50:	00037f2c 	.word	0x00037f2c
   1cf54:	0003a5a2 	.word	0x0003a5a2

0001cf58 <net_buf_simple_pull>:
{
   1cf58:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1cf5a:	8883      	ldrh	r3, [r0, #4]
{
   1cf5c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1cf5e:	428b      	cmp	r3, r1
{
   1cf60:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1cf62:	d20b      	bcs.n	1cf7c <net_buf_simple_pull+0x24>
   1cf64:	4909      	ldr	r1, [pc, #36]	; (1cf8c <net_buf_simple_pull+0x34>)
   1cf66:	480a      	ldr	r0, [pc, #40]	; (1cf90 <net_buf_simple_pull+0x38>)
   1cf68:	f240 436f 	movw	r3, #1135	; 0x46f
   1cf6c:	4a09      	ldr	r2, [pc, #36]	; (1cf94 <net_buf_simple_pull+0x3c>)
   1cf6e:	f010 ff0b 	bl	2dd88 <printk>
   1cf72:	f240 416f 	movw	r1, #1135	; 0x46f
   1cf76:	4807      	ldr	r0, [pc, #28]	; (1cf94 <net_buf_simple_pull+0x3c>)
   1cf78:	f011 f9ec 	bl	2e354 <assert_post_action>
	buf->len -= len;
   1cf7c:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1cf7e:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1cf80:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1cf82:	4428      	add	r0, r5
	buf->len -= len;
   1cf84:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1cf86:	6020      	str	r0, [r4, #0]
}
   1cf88:	bd38      	pop	{r3, r4, r5, pc}
   1cf8a:	bf00      	nop
   1cf8c:	0003a633 	.word	0x0003a633
   1cf90:	00037f2c 	.word	0x00037f2c
   1cf94:	0003a5a2 	.word	0x0003a5a2

0001cf98 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1cf98:	8883      	ldrh	r3, [r0, #4]
{
   1cf9a:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1cf9c:	428b      	cmp	r3, r1
{
   1cf9e:	4604      	mov	r4, r0
   1cfa0:	460d      	mov	r5, r1
	void *data = buf->data;
   1cfa2:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1cfa4:	d20b      	bcs.n	1cfbe <net_buf_simple_pull_mem+0x26>
   1cfa6:	490a      	ldr	r1, [pc, #40]	; (1cfd0 <net_buf_simple_pull_mem+0x38>)
   1cfa8:	480a      	ldr	r0, [pc, #40]	; (1cfd4 <net_buf_simple_pull_mem+0x3c>)
   1cfaa:	f240 437b 	movw	r3, #1147	; 0x47b
   1cfae:	4a0a      	ldr	r2, [pc, #40]	; (1cfd8 <net_buf_simple_pull_mem+0x40>)
   1cfb0:	f010 feea 	bl	2dd88 <printk>
   1cfb4:	f240 417b 	movw	r1, #1147	; 0x47b
   1cfb8:	4807      	ldr	r0, [pc, #28]	; (1cfd8 <net_buf_simple_pull_mem+0x40>)
   1cfba:	f011 f9cb 	bl	2e354 <assert_post_action>
	buf->len -= len;
   1cfbe:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1cfc0:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1cfc2:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1cfc4:	4429      	add	r1, r5
}
   1cfc6:	4630      	mov	r0, r6
	buf->len -= len;
   1cfc8:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1cfca:	6021      	str	r1, [r4, #0]
}
   1cfcc:	bd70      	pop	{r4, r5, r6, pc}
   1cfce:	bf00      	nop
   1cfd0:	0003a633 	.word	0x0003a633
   1cfd4:	00037f2c 	.word	0x00037f2c
   1cfd8:	0003a5a2 	.word	0x0003a5a2

0001cfdc <net_buf_simple_add>:
{
   1cfdc:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1cfde:	6803      	ldr	r3, [r0, #0]
   1cfe0:	8886      	ldrh	r6, [r0, #4]
   1cfe2:	4604      	mov	r4, r0
   1cfe4:	460d      	mov	r5, r1
   1cfe6:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1cfe8:	f014 fb67 	bl	316ba <net_buf_simple_tailroom>
   1cfec:	4288      	cmp	r0, r1
   1cfee:	d20b      	bcs.n	1d008 <net_buf_simple_add+0x2c>
   1cff0:	4908      	ldr	r1, [pc, #32]	; (1d014 <net_buf_simple_add+0x38>)
   1cff2:	4809      	ldr	r0, [pc, #36]	; (1d018 <net_buf_simple_add+0x3c>)
   1cff4:	f44f 7348 	mov.w	r3, #800	; 0x320
   1cff8:	4a08      	ldr	r2, [pc, #32]	; (1d01c <net_buf_simple_add+0x40>)
   1cffa:	f010 fec5 	bl	2dd88 <printk>
   1cffe:	f44f 7148 	mov.w	r1, #800	; 0x320
   1d002:	4806      	ldr	r0, [pc, #24]	; (1d01c <net_buf_simple_add+0x40>)
   1d004:	f011 f9a6 	bl	2e354 <assert_post_action>
	buf->len += len;
   1d008:	88a1      	ldrh	r1, [r4, #4]
}
   1d00a:	4630      	mov	r0, r6
	buf->len += len;
   1d00c:	440d      	add	r5, r1
   1d00e:	80a5      	strh	r5, [r4, #4]
}
   1d010:	bd70      	pop	{r4, r5, r6, pc}
   1d012:	bf00      	nop
   1d014:	0003a667 	.word	0x0003a667
   1d018:	00037f2c 	.word	0x00037f2c
   1d01c:	0003a5a2 	.word	0x0003a5a2

0001d020 <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   1d020:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   1d022:	4604      	mov	r4, r0
   1d024:	b970      	cbnz	r0, 1d044 <net_if_flag_set.constprop.0+0x24>
   1d026:	490d      	ldr	r1, [pc, #52]	; (1d05c <net_if_flag_set.constprop.0+0x3c>)
   1d028:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   1d02c:	4a0c      	ldr	r2, [pc, #48]	; (1d060 <net_if_flag_set.constprop.0+0x40>)
   1d02e:	480d      	ldr	r0, [pc, #52]	; (1d064 <net_if_flag_set.constprop.0+0x44>)
   1d030:	f010 feaa 	bl	2dd88 <printk>
   1d034:	480c      	ldr	r0, [pc, #48]	; (1d068 <net_if_flag_set.constprop.0+0x48>)
   1d036:	f010 fea7 	bl	2dd88 <printk>
   1d03a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1d03e:	4808      	ldr	r0, [pc, #32]	; (1d060 <net_if_flag_set.constprop.0+0x40>)
   1d040:	f011 f988 	bl	2e354 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d044:	6823      	ldr	r3, [r4, #0]
   1d046:	330c      	adds	r3, #12
   1d048:	e8d3 2fef 	ldaex	r2, [r3]
   1d04c:	f042 0201 	orr.w	r2, r2, #1
   1d050:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d054:	2900      	cmp	r1, #0
   1d056:	d1f7      	bne.n	1d048 <net_if_flag_set.constprop.0+0x28>

	atomic_set_bit(iface->if_dev->flags, value);
}
   1d058:	bd10      	pop	{r4, pc}
   1d05a:	bf00      	nop
   1d05c:	0003a6bb 	.word	0x0003a6bb
   1d060:	0003a693 	.word	0x0003a693
   1d064:	00037f2c 	.word	0x00037f2c
   1d068:	000385b8 	.word	0x000385b8

0001d06c <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   1d06c:	4801      	ldr	r0, [pc, #4]	; (1d074 <k_mutex_unlock.constprop.0+0x8>)
   1d06e:	f00c ba49 	b.w	29504 <z_impl_k_mutex_unlock>
   1d072:	bf00      	nop
   1d074:	20014e90 	.word	0x20014e90

0001d078 <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1d078:	4602      	mov	r2, r0
   1d07a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1d07c:	4801      	ldr	r0, [pc, #4]	; (1d084 <k_mutex_lock.constprop.0+0xc>)
   1d07e:	f00c b947 	b.w	29310 <z_impl_k_mutex_lock>
   1d082:	bf00      	nop
   1d084:	20014e90 	.word	0x20014e90

0001d088 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1d088:	b538      	push	{r3, r4, r5, lr}
   1d08a:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   1d08c:	f04f 31ff 	mov.w	r1, #4294967295
   1d090:	f04f 30ff 	mov.w	r0, #4294967295
   1d094:	f7ff fff0 	bl	1d078 <k_mutex_lock.constprop.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d098:	2100      	movs	r1, #0
   1d09a:	4628      	mov	r0, r5
   1d09c:	f014 fb4a 	bl	31734 <net_if_flag_is_set>
   1d0a0:	4604      	mov	r4, r0
   1d0a2:	bb68      	cbnz	r0, 1d100 <net_if_up+0x78>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   1d0a4:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   1d0a6:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d0a8:	7e9b      	ldrb	r3, [r3, #26]
   1d0aa:	b12b      	cbz	r3, 1d0b8 <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   1d0ac:	f7ff ffb8 	bl	1d020 <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   1d0b0:	f7ff ffdc 	bl	1d06c <k_mutex_unlock.constprop.0>

	return status;
}
   1d0b4:	4620      	mov	r0, r4
   1d0b6:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d0b8:	f014 fb2a 	bl	31710 <net_if_l2>
   1d0bc:	4604      	mov	r4, r0
   1d0be:	b130      	cbz	r0, 1d0ce <net_if_up+0x46>
   1d0c0:	6884      	ldr	r4, [r0, #8]
   1d0c2:	b124      	cbz	r4, 1d0ce <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   1d0c4:	2101      	movs	r1, #1
   1d0c6:	4628      	mov	r0, r5
   1d0c8:	47a0      	blx	r4
	if (status < 0) {
   1d0ca:	1e04      	subs	r4, r0, #0
   1d0cc:	dbf0      	blt.n	1d0b0 <net_if_up+0x28>
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1d0ce:	682b      	ldr	r3, [r5, #0]
   1d0d0:	691b      	ldr	r3, [r3, #16]
   1d0d2:	b973      	cbnz	r3, 1d0f2 <net_if_up+0x6a>
   1d0d4:	490c      	ldr	r1, [pc, #48]	; (1d108 <net_if_up+0x80>)
   1d0d6:	f640 7399 	movw	r3, #3993	; 0xf99
   1d0da:	4a0c      	ldr	r2, [pc, #48]	; (1d10c <net_if_up+0x84>)
   1d0dc:	480c      	ldr	r0, [pc, #48]	; (1d110 <net_if_up+0x88>)
   1d0de:	f010 fe53 	bl	2dd88 <printk>
   1d0e2:	480c      	ldr	r0, [pc, #48]	; (1d114 <net_if_up+0x8c>)
   1d0e4:	f010 fe50 	bl	2dd88 <printk>
   1d0e8:	f640 7199 	movw	r1, #3993	; 0xf99
   1d0ec:	4807      	ldr	r0, [pc, #28]	; (1d10c <net_if_up+0x84>)
   1d0ee:	f011 f931 	bl	2e354 <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   1d0f2:	4628      	mov	r0, r5
   1d0f4:	f7ff ff94 	bl	1d020 <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d0f8:	4628      	mov	r0, r5
   1d0fa:	f014 fb0e 	bl	3171a <l2_flags_get>
notify:
   1d0fe:	e7d7      	b.n	1d0b0 <net_if_up+0x28>
		status = -EALREADY;
   1d100:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1d104:	e7d4      	b.n	1d0b0 <net_if_up+0x28>
   1d106:	bf00      	nop
   1d108:	0003a705 	.word	0x0003a705
   1d10c:	0003a6c1 	.word	0x0003a6c1
   1d110:	00037f2c 	.word	0x00037f2c
   1d114:	000385b8 	.word	0x000385b8

0001d118 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1d118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1d11c:	4e16      	ldr	r6, [pc, #88]	; (1d178 <net_if_init+0x60>)
	k_mutex_lock(&lock, K_FOREVER);
   1d11e:	f04f 30ff 	mov.w	r0, #4294967295
   1d122:	f04f 31ff 	mov.w	r1, #4294967295
   1d126:	f7ff ffa7 	bl	1d078 <k_mutex_lock.constprop.0>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1d12a:	46b0      	mov	r8, r6
   1d12c:	4c13      	ldr	r4, [pc, #76]	; (1d17c <net_if_init+0x64>)
   1d12e:	4f14      	ldr	r7, [pc, #80]	; (1d180 <net_if_init+0x68>)
   1d130:	42b4      	cmp	r4, r6
   1d132:	4625      	mov	r5, r4
   1d134:	d90e      	bls.n	1d154 <net_if_init+0x3c>
   1d136:	4913      	ldr	r1, [pc, #76]	; (1d184 <net_if_init+0x6c>)
   1d138:	f241 03b2 	movw	r3, #4274	; 0x10b2
   1d13c:	463a      	mov	r2, r7
   1d13e:	4812      	ldr	r0, [pc, #72]	; (1d188 <net_if_init+0x70>)
   1d140:	f010 fe22 	bl	2dd88 <printk>
   1d144:	4811      	ldr	r0, [pc, #68]	; (1d18c <net_if_init+0x74>)
   1d146:	f010 fe1f 	bl	2dd88 <printk>
   1d14a:	f241 01b2 	movw	r1, #4274	; 0x10b2
   1d14e:	4638      	mov	r0, r7
   1d150:	f011 f900 	bl	2e354 <assert_post_action>
   1d154:	4544      	cmp	r4, r8
   1d156:	d303      	bcc.n	1d160 <net_if_init+0x48>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1d158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&lock);
   1d15c:	f7ff bf86 	b.w	1d06c <k_mutex_unlock.constprop.0>
	return iface->if_dev->dev;
   1d160:	682b      	ldr	r3, [r5, #0]
   1d162:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1d164:	681b      	ldr	r3, [r3, #0]
   1d166:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1d168:	2b00      	cmp	r3, #0
   1d16a:	d0e1      	beq.n	1d130 <net_if_init+0x18>
   1d16c:	681b      	ldr	r3, [r3, #0]
   1d16e:	2b00      	cmp	r3, #0
   1d170:	d0de      	beq.n	1d130 <net_if_init+0x18>
	api->init(iface);
   1d172:	4628      	mov	r0, r5
   1d174:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1d176:	e7db      	b.n	1d130 <net_if_init+0x18>
   1d178:	2001514c 	.word	0x2001514c
   1d17c:	20015148 	.word	0x20015148
   1d180:	0003a6c1 	.word	0x0003a6c1
   1d184:	0003a6eb 	.word	0x0003a6eb
   1d188:	00037f2c 	.word	0x00037f2c
   1d18c:	00038636 	.word	0x00038636

0001d190 <net_if_post_init>:

void net_if_post_init(void)
{
   1d190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1d192:	4d11      	ldr	r5, [pc, #68]	; (1d1d8 <net_if_post_init+0x48>)
   1d194:	4c11      	ldr	r4, [pc, #68]	; (1d1dc <net_if_post_init+0x4c>)
   1d196:	462f      	mov	r7, r5
   1d198:	4e11      	ldr	r6, [pc, #68]	; (1d1e0 <net_if_post_init+0x50>)
   1d19a:	42ac      	cmp	r4, r5
   1d19c:	d90e      	bls.n	1d1bc <net_if_post_init+0x2c>
   1d19e:	4911      	ldr	r1, [pc, #68]	; (1d1e4 <net_if_post_init+0x54>)
   1d1a0:	f241 03e4 	movw	r3, #4324	; 0x10e4
   1d1a4:	4632      	mov	r2, r6
   1d1a6:	4810      	ldr	r0, [pc, #64]	; (1d1e8 <net_if_post_init+0x58>)
   1d1a8:	f010 fdee 	bl	2dd88 <printk>
   1d1ac:	480f      	ldr	r0, [pc, #60]	; (1d1ec <net_if_post_init+0x5c>)
   1d1ae:	f010 fdeb 	bl	2dd88 <printk>
   1d1b2:	f241 01e4 	movw	r1, #4324	; 0x10e4
   1d1b6:	4630      	mov	r0, r6
   1d1b8:	f011 f8cc 	bl	2e354 <assert_post_action>
   1d1bc:	42bc      	cmp	r4, r7
   1d1be:	d300      	bcc.n	1d1c2 <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1d1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1d1c2:	2103      	movs	r1, #3
   1d1c4:	4620      	mov	r0, r4
   1d1c6:	f014 fab5 	bl	31734 <net_if_flag_is_set>
   1d1ca:	b910      	cbnz	r0, 1d1d2 <net_if_post_init+0x42>
			net_if_up(iface);
   1d1cc:	4620      	mov	r0, r4
   1d1ce:	f7ff ff5b 	bl	1d088 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1d1d2:	3404      	adds	r4, #4
   1d1d4:	e7e1      	b.n	1d19a <net_if_post_init+0xa>
   1d1d6:	bf00      	nop
   1d1d8:	2001514c 	.word	0x2001514c
   1d1dc:	20015148 	.word	0x20015148
   1d1e0:	0003a6c1 	.word	0x0003a6c1
   1d1e4:	0003a6eb 	.word	0x0003a6eb
   1d1e8:	00037f2c 	.word	0x00037f2c
   1d1ec:	00038636 	.word	0x00038636

0001d1f0 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1d1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d1f4:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   1d1f6:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_HEXDUMP_TRC(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1d1fa:	4b3b      	ldr	r3, [pc, #236]	; (1d2e8 <connect_request_encode+0xf8>)
   1d1fc:	4a3b      	ldr	r2, [pc, #236]	; (1d2ec <connect_request_encode+0xfc>)
{
   1d1fe:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1d200:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d204:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1d206:	2804      	cmp	r0, #4
   1d208:	bf0c      	ite	eq
   1d20a:	4610      	moveq	r0, r2
   1d20c:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1d20e:	600d      	str	r5, [r1, #0]
{
   1d210:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1d212:	f014 fb60 	bl	318d6 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   1d216:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   1d21a:	4603      	mov	r3, r0
   1d21c:	b938      	cbnz	r0, 1d22e <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d21e:	e9d8 2000 	ldrd	r2, r0, [r8]
   1d222:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1d224:	f897 107a 	ldrb.w	r1, [r7, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d228:	d104      	bne.n	1d234 <connect_request_encode+0x44>
		return -ENOMEM;
   1d22a:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1d22e:	4618      	mov	r0, r3
   1d230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   1d234:	1c50      	adds	r0, r2, #1
   1d236:	f8c8 0000 	str.w	r0, [r8]
   1d23a:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1d23c:	e9d8 6200 	ldrd	r6, r2, [r8]
   1d240:	4296      	cmp	r6, r2
   1d242:	d0f2      	beq.n	1d22a <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1d244:	1c72      	adds	r2, r6, #1
   1d246:	f8c8 2000 	str.w	r2, [r8]
   1d24a:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   1d24c:	4641      	mov	r1, r8
   1d24e:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
   1d252:	f014 fb2e 	bl	318b2 <pack_uint16>
	if (err_code != 0) {
   1d256:	4603      	mov	r3, r0
   1d258:	2800      	cmp	r0, #0
   1d25a:	d1e8      	bne.n	1d22e <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1d25c:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1d260:	f014 fb39 	bl	318d6 <pack_utf8_str>
	if (err_code != 0) {
   1d264:	4603      	mov	r3, r0
   1d266:	2800      	cmp	r0, #0
   1d268:	d1e1      	bne.n	1d22e <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1d26a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
	uint8_t connect_flags = client->clean_session << 1;
   1d26c:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   1d26e:	b1d8      	cbz	r0, 1d2a8 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1d270:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1d274:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   1d278:	f003 0301 	and.w	r3, r3, #1
   1d27c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1d280:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1d282:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1d284:	00db      	lsls	r3, r3, #3
   1d286:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1d28a:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1d28c:	f014 fb23 	bl	318d6 <pack_utf8_str>
		if (err_code != 0) {
   1d290:	4603      	mov	r3, r0
   1d292:	2800      	cmp	r0, #0
   1d294:	d1cb      	bne.n	1d22e <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1d296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   1d298:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   1d29a:	b30b      	cbz	r3, 1d2e0 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   1d29c:	4618      	mov	r0, r3
   1d29e:	f014 fb1a 	bl	318d6 <pack_utf8_str>
			if (err_code != 0) {
   1d2a2:	4603      	mov	r3, r0
   1d2a4:	2800      	cmp	r0, #0
   1d2a6:	d1c2      	bne.n	1d22e <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   1d2a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1d2aa:	b138      	cbz	r0, 1d2bc <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   1d2ac:	4641      	mov	r1, r8
   1d2ae:	f014 fb12 	bl	318d6 <pack_utf8_str>
		if (err_code != 0) {
   1d2b2:	4603      	mov	r3, r0
   1d2b4:	2800      	cmp	r0, #0
   1d2b6:	d1ba      	bne.n	1d22e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   1d2b8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   1d2bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1d2be:	b138      	cbz	r0, 1d2d0 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   1d2c0:	4641      	mov	r1, r8
   1d2c2:	f014 fb08 	bl	318d6 <pack_utf8_str>
		if (err_code != 0) {
   1d2c6:	4603      	mov	r3, r0
   1d2c8:	2800      	cmp	r0, #0
   1d2ca:	d1b0      	bne.n	1d22e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1d2cc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1d2d0:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1d2d2:	4642      	mov	r2, r8
   1d2d4:	4629      	mov	r1, r5
}
   1d2d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1d2da:	2010      	movs	r0, #16
   1d2dc:	f014 bb16 	b.w	3190c <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1d2e0:	f014 fae7 	bl	318b2 <pack_uint16>
   1d2e4:	e7dd      	b.n	1d2a2 <connect_request_encode+0xb2>
   1d2e6:	bf00      	nop
   1d2e8:	00036dac 	.word	0x00036dac
   1d2ec:	00036db4 	.word	0x00036db4

0001d2f0 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1d2f0:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d2f4:	1a9b      	subs	r3, r3, r2
   1d2f6:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d2f8:	bf81      	itttt	hi
   1d2fa:	4b05      	ldrhi	r3, [pc, #20]	; (1d310 <disconnect_encode+0x20>)
   1d2fc:	881b      	ldrhhi	r3, [r3, #0]
   1d2fe:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1d300:	6803      	ldrhi	r3, [r0, #0]
   1d302:	bf83      	ittte	hi
   1d304:	3302      	addhi	r3, #2
   1d306:	6043      	strhi	r3, [r0, #4]

	return 0;
   1d308:	2000      	movhi	r0, #0
		return -ENOMEM;
   1d30a:	f06f 000b 	mvnls.w	r0, #11
}
   1d30e:	4770      	bx	lr
   1d310:	0003a736 	.word	0x0003a736

0001d314 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1d314:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d318:	1a9b      	subs	r3, r3, r2
   1d31a:	2b01      	cmp	r3, #1
   1d31c:	bf81      	itttt	hi
   1d31e:	4b05      	ldrhi	r3, [pc, #20]	; (1d334 <ping_request_encode+0x20>)
   1d320:	881b      	ldrhhi	r3, [r3, #0]
   1d322:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1d324:	6803      	ldrhi	r3, [r0, #0]
   1d326:	bf83      	ittte	hi
   1d328:	3302      	addhi	r3, #2
   1d32a:	6043      	strhi	r3, [r0, #4]

	return 0;
   1d32c:	2000      	movhi	r0, #0
		return -ENOMEM;
   1d32e:	f06f 000b 	mvnls.w	r0, #11
}
   1d332:	4770      	bx	lr
   1d334:	0003a738 	.word	0x0003a738

0001d338 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   1d338:	2314      	movs	r3, #20
   1d33a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1d33e:	4353      	muls	r3, r2
   1d340:	4a01      	ldr	r2, [pc, #4]	; (1d348 <mqtt_transport_connect+0x10>)
   1d342:	58d3      	ldr	r3, [r2, r3]
   1d344:	4718      	bx	r3
   1d346:	bf00      	nop
   1d348:	00036dbc 	.word	0x00036dbc

0001d34c <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   1d34c:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1d34e:	2514      	movs	r5, #20
   1d350:	4c03      	ldr	r4, [pc, #12]	; (1d360 <mqtt_transport_write+0x14>)
   1d352:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1d356:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   1d35a:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1d35c:	685b      	ldr	r3, [r3, #4]
   1d35e:	4718      	bx	r3
   1d360:	00036dbc 	.word	0x00036dbc

0001d364 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   1d364:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1d366:	2414      	movs	r4, #20
   1d368:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1d36c:	4a02      	ldr	r2, [pc, #8]	; (1d378 <mqtt_transport_write_msg+0x14>)
   1d36e:	fb04 2303 	mla	r3, r4, r3, r2
}
   1d372:	bc10      	pop	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1d374:	689b      	ldr	r3, [r3, #8]
   1d376:	4718      	bx	r3
   1d378:	00036dbc 	.word	0x00036dbc

0001d37c <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   1d37c:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1d37e:	2614      	movs	r6, #20
   1d380:	4d04      	ldr	r5, [pc, #16]	; (1d394 <mqtt_transport_read+0x18>)
   1d382:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1d386:	fb06 5404 	mla	r4, r6, r4, r5
   1d38a:	68e4      	ldr	r4, [r4, #12]
   1d38c:	46a4      	mov	ip, r4
							 shall_block);
}
   1d38e:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1d390:	4760      	bx	ip
   1d392:	bf00      	nop
   1d394:	00036dbc 	.word	0x00036dbc

0001d398 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1d398:	2114      	movs	r1, #20
   1d39a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1d39e:	4a02      	ldr	r2, [pc, #8]	; (1d3a8 <mqtt_transport_disconnect+0x10>)
   1d3a0:	fb01 2303 	mla	r3, r1, r3, r2
   1d3a4:	691b      	ldr	r3, [r3, #16]
   1d3a6:	4718      	bx	r3
   1d3a8:	00036dbc 	.word	0x00036dbc

0001d3ac <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1d3ac:	b510      	push	{r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   1d3ae:	f00c f8a9 	bl	29504 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1d3b2:	4604      	mov	r4, r0
   1d3b4:	b178      	cbz	r0, 1d3d6 <mqtt_mutex_unlock+0x2a>
   1d3b6:	234f      	movs	r3, #79	; 0x4f
   1d3b8:	4a07      	ldr	r2, [pc, #28]	; (1d3d8 <mqtt_mutex_unlock+0x2c>)
   1d3ba:	4908      	ldr	r1, [pc, #32]	; (1d3dc <mqtt_mutex_unlock+0x30>)
   1d3bc:	4808      	ldr	r0, [pc, #32]	; (1d3e0 <mqtt_mutex_unlock+0x34>)
   1d3be:	f010 fce3 	bl	2dd88 <printk>
   1d3c2:	4621      	mov	r1, r4
   1d3c4:	4807      	ldr	r0, [pc, #28]	; (1d3e4 <mqtt_mutex_unlock+0x38>)
   1d3c6:	f010 fcdf 	bl	2dd88 <printk>
	(void)ret;
}
   1d3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1d3ce:	214f      	movs	r1, #79	; 0x4f
   1d3d0:	4801      	ldr	r0, [pc, #4]	; (1d3d8 <mqtt_mutex_unlock+0x2c>)
   1d3d2:	f010 bfbf 	b.w	2e354 <assert_post_action>
}
   1d3d6:	bd10      	pop	{r4, pc}
   1d3d8:	0003a746 	.word	0x0003a746
   1d3dc:	0003a777 	.word	0x0003a777
   1d3e0:	00037f2c 	.word	0x00037f2c
   1d3e4:	0003a780 	.word	0x0003a780

0001d3e8 <mqtt_mutex_lock>:
{
   1d3e8:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1d3ea:	f04f 32ff 	mov.w	r2, #4294967295
   1d3ee:	f04f 33ff 	mov.w	r3, #4294967295
   1d3f2:	f00b ff8d 	bl	29310 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1d3f6:	4604      	mov	r4, r0
   1d3f8:	b178      	cbz	r0, 1d41a <mqtt_mutex_lock+0x32>
   1d3fa:	2345      	movs	r3, #69	; 0x45
   1d3fc:	4a07      	ldr	r2, [pc, #28]	; (1d41c <mqtt_mutex_lock+0x34>)
   1d3fe:	4908      	ldr	r1, [pc, #32]	; (1d420 <mqtt_mutex_lock+0x38>)
   1d400:	4808      	ldr	r0, [pc, #32]	; (1d424 <mqtt_mutex_lock+0x3c>)
   1d402:	f010 fcc1 	bl	2dd88 <printk>
   1d406:	4621      	mov	r1, r4
   1d408:	4807      	ldr	r0, [pc, #28]	; (1d428 <mqtt_mutex_lock+0x40>)
   1d40a:	f010 fcbd 	bl	2dd88 <printk>
}
   1d40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1d412:	2145      	movs	r1, #69	; 0x45
   1d414:	4801      	ldr	r0, [pc, #4]	; (1d41c <mqtt_mutex_lock+0x34>)
   1d416:	f010 bf9d 	b.w	2e354 <assert_post_action>
}
   1d41a:	bd10      	pop	{r4, pc}
   1d41c:	0003a746 	.word	0x0003a746
   1d420:	0003a777 	.word	0x0003a777
   1d424:	00037f2c 	.word	0x00037f2c
   1d428:	0003a7a2 	.word	0x0003a7a2

0001d42c <z_impl_entropy_get_entropy>:
				  uint16_t length);

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
   1d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   1d430:	6887      	ldr	r7, [r0, #8]
{
   1d432:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1d434:	683b      	ldr	r3, [r7, #0]
{
   1d436:	460d      	mov	r5, r1
   1d438:	4616      	mov	r6, r2
	__ASSERT(api->get_entropy != NULL,
   1d43a:	b963      	cbnz	r3, 1d456 <z_impl_entropy_get_entropy+0x2a>
   1d43c:	4909      	ldr	r1, [pc, #36]	; (1d464 <z_impl_entropy_get_entropy+0x38>)
   1d43e:	234b      	movs	r3, #75	; 0x4b
   1d440:	4a09      	ldr	r2, [pc, #36]	; (1d468 <z_impl_entropy_get_entropy+0x3c>)
   1d442:	480a      	ldr	r0, [pc, #40]	; (1d46c <z_impl_entropy_get_entropy+0x40>)
   1d444:	f010 fca0 	bl	2dd88 <printk>
   1d448:	4809      	ldr	r0, [pc, #36]	; (1d470 <z_impl_entropy_get_entropy+0x44>)
   1d44a:	f010 fc9d 	bl	2dd88 <printk>
   1d44e:	214b      	movs	r1, #75	; 0x4b
   1d450:	4805      	ldr	r0, [pc, #20]	; (1d468 <z_impl_entropy_get_entropy+0x3c>)
   1d452:	f010 ff7f 	bl	2e354 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1d456:	4632      	mov	r2, r6
   1d458:	4629      	mov	r1, r5
   1d45a:	4620      	mov	r0, r4
   1d45c:	683b      	ldr	r3, [r7, #0]
}
   1d45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   1d462:	4718      	bx	r3
   1d464:	0003a7ef 	.word	0x0003a7ef
   1d468:	0003a7c2 	.word	0x0003a7c2
   1d46c:	00037f2c 	.word	0x00037f2c
   1d470:	0003a80f 	.word	0x0003a80f

0001d474 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   1d474:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct device *dev = entropy_driver;
   1d476:	4d12      	ldr	r5, [pc, #72]	; (1d4c0 <z_impl_sys_rand32_get+0x4c>)
   1d478:	682c      	ldr	r4, [r5, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   1d47a:	b99c      	cbnz	r4, 1d4a4 <z_impl_sys_rand32_get+0x30>
   1d47c:	4811      	ldr	r0, [pc, #68]	; (1d4c4 <z_impl_sys_rand32_get+0x50>)
   1d47e:	f00b f8ab 	bl	285d8 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
   1d482:	4604      	mov	r4, r0
   1d484:	b968      	cbnz	r0, 1d4a2 <z_impl_sys_rand32_get+0x2e>
   1d486:	231a      	movs	r3, #26
   1d488:	4a0f      	ldr	r2, [pc, #60]	; (1d4c8 <z_impl_sys_rand32_get+0x54>)
   1d48a:	4910      	ldr	r1, [pc, #64]	; (1d4cc <z_impl_sys_rand32_get+0x58>)
   1d48c:	4810      	ldr	r0, [pc, #64]	; (1d4d0 <z_impl_sys_rand32_get+0x5c>)
   1d48e:	f010 fc7b 	bl	2dd88 <printk>
   1d492:	490c      	ldr	r1, [pc, #48]	; (1d4c4 <z_impl_sys_rand32_get+0x50>)
   1d494:	480f      	ldr	r0, [pc, #60]	; (1d4d4 <z_impl_sys_rand32_get+0x60>)
   1d496:	f010 fc77 	bl	2dd88 <printk>
   1d49a:	211a      	movs	r1, #26
   1d49c:	480a      	ldr	r0, [pc, #40]	; (1d4c8 <z_impl_sys_rand32_get+0x54>)
   1d49e:	f010 ff59 	bl	2e354 <assert_post_action>
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   1d4a2:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   1d4a4:	2204      	movs	r2, #4
   1d4a6:	4620      	mov	r0, r4
   1d4a8:	eb0d 0102 	add.w	r1, sp, r2
   1d4ac:	f7ff ffbe 	bl	1d42c <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1d4b0:	2800      	cmp	r0, #0
   1d4b2:	da02      	bge.n	1d4ba <z_impl_sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1d4b4:	f7f9 f91c 	bl	166f0 <sys_clock_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   1d4b8:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1d4ba:	9801      	ldr	r0, [sp, #4]
   1d4bc:	b003      	add	sp, #12
   1d4be:	bd30      	pop	{r4, r5, pc}
   1d4c0:	20016220 	.word	0x20016220
   1d4c4:	0003a835 	.word	0x0003a835
   1d4c8:	0003a843 	.word	0x0003a843
   1d4cc:	0003a87c 	.word	0x0003a87c
   1d4d0:	00037f2c 	.word	0x00037f2c
   1d4d4:	0003a891 	.word	0x0003a891

0001d4d8 <default_CSPRNG>:

	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
}

int default_CSPRNG(uint8_t *dest, unsigned int size)
{
   1d4d8:	b507      	push	{r0, r1, r2, lr}
	int res = tc_ctr_prng_generate(&prng_state, NULL, 0, dest, size);
   1d4da:	2200      	movs	r2, #0
{
   1d4dc:	4603      	mov	r3, r0
	int res = tc_ctr_prng_generate(&prng_state, NULL, 0, dest, size);
   1d4de:	9100      	str	r1, [sp, #0]
   1d4e0:	4803      	ldr	r0, [pc, #12]	; (1d4f0 <default_CSPRNG+0x18>)
   1d4e2:	4611      	mov	r1, r2
   1d4e4:	f012 ff4e 	bl	30384 <tc_ctr_prng_generate>
	return res;
}
   1d4e8:	b003      	add	sp, #12
   1d4ea:	f85d fb04 	ldr.w	pc, [sp], #4
   1d4ee:	bf00      	nop
   1d4f0:	20015840 	.word	0x20015840

0001d4f4 <jwt_add_payload>:
{
   1d4f4:	b530      	push	{r4, r5, lr}
   1d4f6:	b087      	sub	sp, #28
	struct jwt_payload payload = {
   1d4f8:	e9cd 1203 	strd	r1, r2, [sp, #12]
	base64_outch(builder, '.');
   1d4fc:	212e      	movs	r1, #46	; 0x2e
{
   1d4fe:	4604      	mov	r4, r0
	struct jwt_payload payload = {
   1d500:	9305      	str	r3, [sp, #20]
	base64_outch(builder, '.');
   1d502:	f014 ff6a 	bl	323da <base64_outch>
	int res = json_obj_encode(jwt_payload_desc,
   1d506:	2103      	movs	r1, #3
   1d508:	4b06      	ldr	r3, [pc, #24]	; (1d524 <jwt_add_payload+0x30>)
   1d50a:	9000      	str	r0, [sp, #0]
   1d50c:	aa03      	add	r2, sp, #12
   1d50e:	4806      	ldr	r0, [pc, #24]	; (1d528 <jwt_add_payload+0x34>)
   1d510:	f7f7 f8ba 	bl	14688 <json_obj_encode>
   1d514:	4605      	mov	r5, r0
	base64_flush(builder);
   1d516:	4620      	mov	r0, r4
   1d518:	f014 ff72 	bl	32400 <base64_flush>
}
   1d51c:	4628      	mov	r0, r5
   1d51e:	b007      	add	sp, #28
   1d520:	bd30      	pop	{r4, r5, pc}
   1d522:	bf00      	nop
   1d524:	00032479 	.word	0x00032479
   1d528:	200147e4 	.word	0x200147e4

0001d52c <jwt_sign>:

int jwt_sign(struct jwt_builder *builder,
	     const char *der_key,
	     size_t der_key_len)
{
   1d52c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d52e:	4604      	mov	r4, r0
   1d530:	b0b7      	sub	sp, #220	; 0xdc
	struct tc_sha256_state_struct ctx;
	uint8_t hash[32], sig[64];
	int res;

	tc_sha256_init(&ctx);
   1d532:	a81a      	add	r0, sp, #104	; 0x68
{
   1d534:	460e      	mov	r6, r1
	tc_sha256_init(&ctx);
   1d536:	f7f9 fbc1 	bl	16cbc <tc_sha256_init>
	tc_sha256_update(&ctx, builder->base, builder->buf - builder->base);
   1d53a:	e9d4 1200 	ldrd	r1, r2, [r4]
   1d53e:	a81a      	add	r0, sp, #104	; 0x68
   1d540:	1a52      	subs	r2, r2, r1
   1d542:	f012 fc6b 	bl	2fe1c <tc_sha256_update>
	tc_sha256_final(hash, &ctx);
   1d546:	a91a      	add	r1, sp, #104	; 0x68
   1d548:	a802      	add	r0, sp, #8
   1d54a:	f012 fc8d 	bl	2fe68 <tc_sha256_final>
	if (prng_init) {
   1d54e:	4b1b      	ldr	r3, [pc, #108]	; (1d5bc <jwt_sign+0x90>)
   1d550:	781d      	ldrb	r5, [r3, #0]
   1d552:	b17d      	cbz	r5, 1d574 <jwt_sign+0x48>
	res = setup_prng();

	if (res != 0) {
		return res;
	}
	uECC_set_rng(&default_CSPRNG);
   1d554:	481a      	ldr	r0, [pc, #104]	; (1d5c0 <jwt_sign+0x94>)
   1d556:	f7f9 f931 	bl	167bc <uECC_set_rng>

	/* Note that tinycrypt only supports P-256. */
	res = uECC_sign(der_key, hash, sizeof(hash),
   1d55a:	4b1a      	ldr	r3, [pc, #104]	; (1d5c4 <jwt_sign+0x98>)
   1d55c:	2220      	movs	r2, #32
   1d55e:	9300      	str	r3, [sp, #0]
   1d560:	4630      	mov	r0, r6
   1d562:	ab0a      	add	r3, sp, #40	; 0x28
   1d564:	a902      	add	r1, sp, #8
   1d566:	f011 fc91 	bl	2ee8c <uECC_sign>
			sig, &curve_secp256r1);
	if (res != TC_CRYPTO_SUCCESS) {
   1d56a:	2801      	cmp	r0, #1
   1d56c:	d017      	beq.n	1d59e <jwt_sign+0x72>
		return -EINVAL;
   1d56e:	f06f 0015 	mvn.w	r0, #21
   1d572:	e021      	b.n	1d5b8 <jwt_sign+0x8c>
	prng_init = true;
   1d574:	2201      	movs	r2, #1
   1d576:	af0a      	add	r7, sp, #40	; 0x28
   1d578:	701a      	strb	r2, [r3, #0]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
   1d57a:	f7ff ff7b 	bl	1d474 <z_impl_sys_rand32_get>
   1d57e:	3504      	adds	r5, #4
	for (int i = 0; i < sizeof(entropy); i += sizeof(uint32_t)) {
   1d580:	2d20      	cmp	r5, #32
   1d582:	f847 0b04 	str.w	r0, [r7], #4
   1d586:	d1f8      	bne.n	1d57a <jwt_sign+0x4e>
	int res = tc_ctr_prng_init(&prng_state,
   1d588:	2319      	movs	r3, #25
   1d58a:	462a      	mov	r2, r5
   1d58c:	9300      	str	r3, [sp, #0]
   1d58e:	480e      	ldr	r0, [pc, #56]	; (1d5c8 <jwt_sign+0x9c>)
   1d590:	4b0e      	ldr	r3, [pc, #56]	; (1d5cc <jwt_sign+0xa0>)
   1d592:	a90a      	add	r1, sp, #40	; 0x28
   1d594:	f012 fea4 	bl	302e0 <tc_ctr_prng_init>
	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
   1d598:	2801      	cmp	r0, #1
   1d59a:	d0db      	beq.n	1d554 <jwt_sign+0x28>
   1d59c:	e7e7      	b.n	1d56e <jwt_sign+0x42>
	}

	base64_outch(builder, '.');
   1d59e:	212e      	movs	r1, #46	; 0x2e
   1d5a0:	4620      	mov	r0, r4
   1d5a2:	f014 ff1a 	bl	323da <base64_outch>
	base64_append_bytes(sig, sizeof(sig), builder);
   1d5a6:	4622      	mov	r2, r4
   1d5a8:	2140      	movs	r1, #64	; 0x40
   1d5aa:	a80a      	add	r0, sp, #40	; 0x28
   1d5ac:	f014 ff64 	bl	32478 <base64_append_bytes>
	base64_flush(builder);
   1d5b0:	4620      	mov	r0, r4
   1d5b2:	f014 ff25 	bl	32400 <base64_flush>

	return 0;
   1d5b6:	2000      	movs	r0, #0
}
   1d5b8:	b037      	add	sp, #220	; 0xdc
   1d5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d5bc:	2001b9b4 	.word	0x2001b9b4
   1d5c0:	0001d4d9 	.word	0x0001d4d9
   1d5c4:	00036de4 	.word	0x00036de4
   1d5c8:	20015840 	.word	0x20015840
   1d5cc:	0003a925 	.word	0x0003a925

0001d5d0 <jwt_init_builder>:
#endif

int jwt_init_builder(struct jwt_builder *builder,
		     char *buffer,
		     size_t buffer_size)
{
   1d5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5d2:	b08b      	sub	sp, #44	; 0x2c
	const char jwt_header[] =
   1d5d4:	466d      	mov	r5, sp
	builder->base = buffer;
	builder->buf = buffer;
	builder->len = buffer_size;
	builder->overflowed = false;
   1d5d6:	2300      	movs	r3, #0
{
   1d5d8:	4604      	mov	r4, r0
   1d5da:	460e      	mov	r6, r1
   1d5dc:	46ac      	mov	ip, r5
	builder->overflowed = false;
   1d5de:	7303      	strb	r3, [r0, #12]
	builder->pending = 0;
   1d5e0:	6103      	str	r3, [r0, #16]
	builder->buf = buffer;
   1d5e2:	e9c0 1100 	strd	r1, r1, [r0]
	const char jwt_header[] =
   1d5e6:	4b12      	ldr	r3, [pc, #72]	; (1d630 <jwt_init_builder+0x60>)
	builder->len = buffer_size;
   1d5e8:	6082      	str	r2, [r0, #8]
	const char jwt_header[] =
   1d5ea:	f103 0e20 	add.w	lr, r3, #32
   1d5ee:	462f      	mov	r7, r5
   1d5f0:	6818      	ldr	r0, [r3, #0]
   1d5f2:	6859      	ldr	r1, [r3, #4]
   1d5f4:	3308      	adds	r3, #8
   1d5f6:	c703      	stmia	r7!, {r0, r1}
   1d5f8:	4573      	cmp	r3, lr
   1d5fa:	463d      	mov	r5, r7
   1d5fc:	d1f7      	bne.n	1d5ee <jwt_init_builder+0x1e>
   1d5fe:	6818      	ldr	r0, [r3, #0]
   1d600:	791b      	ldrb	r3, [r3, #4]
	if (jwt_header_len > builder->len) {
   1d602:	2a24      	cmp	r2, #36	; 0x24
	const char jwt_header[] =
   1d604:	6038      	str	r0, [r7, #0]
   1d606:	713b      	strb	r3, [r7, #4]
	if (jwt_header_len > builder->len) {
   1d608:	d805      	bhi.n	1d616 <jwt_init_builder+0x46>
		builder->overflowed = true;
   1d60a:	2301      	movs	r3, #1
		return -ENOSPC;
   1d60c:	f06f 001b 	mvn.w	r0, #27
		builder->overflowed = true;
   1d610:	7323      	strb	r3, [r4, #12]

	return jwt_add_header(builder);
}
   1d612:	b00b      	add	sp, #44	; 0x2c
   1d614:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1d616:	4661      	mov	r1, ip
   1d618:	4630      	mov	r0, r6
   1d61a:	f018 f911 	bl	35840 <strcpy>
	builder->buf += jwt_header_len - 1;
   1d61e:	6863      	ldr	r3, [r4, #4]
	return 0;
   1d620:	2000      	movs	r0, #0
	builder->buf += jwt_header_len - 1;
   1d622:	3324      	adds	r3, #36	; 0x24
   1d624:	6063      	str	r3, [r4, #4]
	builder->len -= jwt_header_len - 1;
   1d626:	68a3      	ldr	r3, [r4, #8]
   1d628:	3b24      	subs	r3, #36	; 0x24
   1d62a:	60a3      	str	r3, [r4, #8]
	return jwt_add_header(builder);
   1d62c:	e7f1      	b.n	1d612 <jwt_init_builder+0x42>
   1d62e:	bf00      	nop
   1d630:	0003a8f4 	.word	0x0003a8f4

0001d634 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1d634:	b570      	push	{r4, r5, r6, lr}
   1d636:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d638:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d63a:	6905      	ldr	r5, [r0, #16]
   1d63c:	b961      	cbnz	r1, 1d658 <gpio_nrfx_manage_callback+0x24>
   1d63e:	4922      	ldr	r1, [pc, #136]	; (1d6c8 <gpio_nrfx_manage_callback+0x94>)
   1d640:	2324      	movs	r3, #36	; 0x24
   1d642:	4a22      	ldr	r2, [pc, #136]	; (1d6cc <gpio_nrfx_manage_callback+0x98>)
   1d644:	4822      	ldr	r0, [pc, #136]	; (1d6d0 <gpio_nrfx_manage_callback+0x9c>)
   1d646:	f010 fb9f 	bl	2dd88 <printk>
   1d64a:	4822      	ldr	r0, [pc, #136]	; (1d6d4 <gpio_nrfx_manage_callback+0xa0>)
   1d64c:	f010 fb9c 	bl	2dd88 <printk>
   1d650:	2124      	movs	r1, #36	; 0x24
   1d652:	481e      	ldr	r0, [pc, #120]	; (1d6cc <gpio_nrfx_manage_callback+0x98>)
   1d654:	f010 fe7e 	bl	2e354 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1d658:	6863      	ldr	r3, [r4, #4]
   1d65a:	b963      	cbnz	r3, 1d676 <gpio_nrfx_manage_callback+0x42>
   1d65c:	491e      	ldr	r1, [pc, #120]	; (1d6d8 <gpio_nrfx_manage_callback+0xa4>)
   1d65e:	2325      	movs	r3, #37	; 0x25
   1d660:	4a1a      	ldr	r2, [pc, #104]	; (1d6cc <gpio_nrfx_manage_callback+0x98>)
   1d662:	481b      	ldr	r0, [pc, #108]	; (1d6d0 <gpio_nrfx_manage_callback+0x9c>)
   1d664:	f010 fb90 	bl	2dd88 <printk>
   1d668:	481c      	ldr	r0, [pc, #112]	; (1d6dc <gpio_nrfx_manage_callback+0xa8>)
   1d66a:	f010 fb8d 	bl	2dd88 <printk>
   1d66e:	2125      	movs	r1, #37	; 0x25
   1d670:	4816      	ldr	r0, [pc, #88]	; (1d6cc <gpio_nrfx_manage_callback+0x98>)
   1d672:	f010 fe6f 	bl	2e354 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1d676:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d678:	b15b      	cbz	r3, 1d692 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d67a:	2200      	movs	r2, #0
   1d67c:	429c      	cmp	r4, r3
   1d67e:	d113      	bne.n	1d6a8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1d680:	6823      	ldr	r3, [r4, #0]
   1d682:	b95a      	cbnz	r2, 1d69c <gpio_nrfx_manage_callback+0x68>
   1d684:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   1d686:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d688:	4294      	cmp	r4, r2
   1d68a:	d100      	bne.n	1d68e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1d68c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1d68e:	2300      	movs	r3, #0
   1d690:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d692:	b976      	cbnz	r6, 1d6b2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d694:	2000      	movs	r0, #0
				     callback, set);
}
   1d696:	bd70      	pop	{r4, r5, r6, pc}
   1d698:	460b      	mov	r3, r1
   1d69a:	e7ef      	b.n	1d67c <gpio_nrfx_manage_callback+0x48>
   1d69c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d69e:	68ab      	ldr	r3, [r5, #8]
   1d6a0:	429c      	cmp	r4, r3
	list->tail = node;
   1d6a2:	bf08      	it	eq
   1d6a4:	60aa      	streq	r2, [r5, #8]
}
   1d6a6:	e7f2      	b.n	1d68e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d6a8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d6aa:	461a      	mov	r2, r3
   1d6ac:	2900      	cmp	r1, #0
   1d6ae:	d1f3      	bne.n	1d698 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1d6b0:	b13e      	cbz	r6, 1d6c2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1d6b2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1d6b4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d6b6:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   1d6b8:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d6ba:	2800      	cmp	r0, #0
   1d6bc:	d1ea      	bne.n	1d694 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1d6be:	60ac      	str	r4, [r5, #8]
}
   1d6c0:	e7e9      	b.n	1d696 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1d6c2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d6c6:	e7e6      	b.n	1d696 <gpio_nrfx_manage_callback+0x62>
   1d6c8:	0003a96b 	.word	0x0003a96b
   1d6cc:	0003a93e 	.word	0x0003a93e
   1d6d0:	00037f2c 	.word	0x00037f2c
   1d6d4:	0003a974 	.word	0x0003a974
   1d6d8:	0003a983 	.word	0x0003a983
   1d6dc:	0003a995 	.word	0x0003a995

0001d6e0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d6e0:	6803      	ldr	r3, [r0, #0]
{
   1d6e2:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1d6e4:	095a      	lsrs	r2, r3, #5
   1d6e6:	bf0c      	ite	eq
   1d6e8:	f04f 32ff 	moveq.w	r2, #4294967295
   1d6ec:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1d6ee:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1d6f2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d6f6:	07db      	lsls	r3, r3, #31
{
   1d6f8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d6fa:	d40b      	bmi.n	1d714 <nrf_gpio_pin_port_decode+0x34>
   1d6fc:	490f      	ldr	r1, [pc, #60]	; (1d73c <nrf_gpio_pin_port_decode+0x5c>)
   1d6fe:	4810      	ldr	r0, [pc, #64]	; (1d740 <nrf_gpio_pin_port_decode+0x60>)
   1d700:	f44f 7305 	mov.w	r3, #532	; 0x214
   1d704:	4a0f      	ldr	r2, [pc, #60]	; (1d744 <nrf_gpio_pin_port_decode+0x64>)
   1d706:	f010 fb3f 	bl	2dd88 <printk>
   1d70a:	f44f 7105 	mov.w	r1, #532	; 0x214
   1d70e:	480d      	ldr	r0, [pc, #52]	; (1d744 <nrf_gpio_pin_port_decode+0x64>)
   1d710:	f010 fe20 	bl	2e354 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1d714:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1d716:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d71a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1d71c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d71e:	d00b      	beq.n	1d738 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   1d720:	4909      	ldr	r1, [pc, #36]	; (1d748 <nrf_gpio_pin_port_decode+0x68>)
   1d722:	4807      	ldr	r0, [pc, #28]	; (1d740 <nrf_gpio_pin_port_decode+0x60>)
   1d724:	f240 2319 	movw	r3, #537	; 0x219
   1d728:	4a06      	ldr	r2, [pc, #24]	; (1d744 <nrf_gpio_pin_port_decode+0x64>)
   1d72a:	f010 fb2d 	bl	2dd88 <printk>
   1d72e:	f240 2119 	movw	r1, #537	; 0x219
   1d732:	4804      	ldr	r0, [pc, #16]	; (1d744 <nrf_gpio_pin_port_decode+0x64>)
   1d734:	f010 fe0e 	bl	2e354 <assert_post_action>
}
   1d738:	4804      	ldr	r0, [pc, #16]	; (1d74c <nrf_gpio_pin_port_decode+0x6c>)
   1d73a:	bd10      	pop	{r4, pc}
   1d73c:	0003a9df 	.word	0x0003a9df
   1d740:	00037f2c 	.word	0x00037f2c
   1d744:	0003a9ac 	.word	0x0003a9ac
   1d748:	0003e845 	.word	0x0003e845
   1d74c:	40842500 	.word	0x40842500

0001d750 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d750:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d752:	4b09      	ldr	r3, [pc, #36]	; (1d778 <gpio_nrfx_init+0x28>)
   1d754:	781a      	ldrb	r2, [r3, #0]
   1d756:	b962      	cbnz	r2, 1d772 <gpio_nrfx_init+0x22>
		gpio_initialized = true;
   1d758:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d75a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   1d75c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d75e:	f7f9 fb25 	bl	16dac <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d762:	2031      	movs	r0, #49	; 0x31
   1d764:	f7f9 faf0 	bl	16d48 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d768:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d76c:	4b03      	ldr	r3, [pc, #12]	; (1d77c <gpio_nrfx_init+0x2c>)
   1d76e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d772:	2000      	movs	r0, #0
   1d774:	bd08      	pop	{r3, pc}
   1d776:	bf00      	nop
   1d778:	2001b9b5 	.word	0x2001b9b5
   1d77c:	40031000 	.word	0x40031000

0001d780 <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1d780:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1d784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d788:	4605      	mov	r5, r0
   1d78a:	460e      	mov	r6, r1
   1d78c:	4690      	mov	r8, r2
   1d78e:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   1d790:	6904      	ldr	r4, [r0, #16]
	return port->config;
   1d792:	f001 071f 	and.w	r7, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1d796:	f040 80a7 	bne.w	1d8e8 <gpio_nrfx_pin_interrupt_configure+0x168>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d79a:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d79c:	a801      	add	r0, sp, #4
   1d79e:	7a1b      	ldrb	r3, [r3, #8]
   1d7a0:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   1d7a4:	9301      	str	r3, [sp, #4]
   1d7a6:	f7ff ff9b 	bl	1d6e0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d7aa:	9b01      	ldr	r3, [sp, #4]
   1d7ac:	3380      	adds	r3, #128	; 0x80
   1d7ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d7b2:	07d9      	lsls	r1, r3, #31
   1d7b4:	f100 80b7 	bmi.w	1d926 <gpio_nrfx_pin_interrupt_configure+0x1a6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d7b8:	2101      	movs	r1, #1
   1d7ba:	68e3      	ldr	r3, [r4, #12]
   1d7bc:	40b1      	lsls	r1, r6
   1d7be:	4319      	orrs	r1, r3
   1d7c0:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d7c2:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d7c4:	2000      	movs	r0, #0
   1d7c6:	6963      	ldr	r3, [r4, #20]
   1d7c8:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d7ca:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   1d7ce:	bf0c      	ite	eq
   1d7d0:	430b      	orreq	r3, r1
   1d7d2:	438b      	bicne	r3, r1
   1d7d4:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d7d6:	69a3      	ldr	r3, [r4, #24]
   1d7d8:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   1d7dc:	bf0c      	ite	eq
   1d7de:	430b      	orreq	r3, r1
   1d7e0:	438b      	bicne	r3, r1
   1d7e2:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d7e4:	6923      	ldr	r3, [r4, #16]
   1d7e6:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1d7ea:	bf0c      	ite	eq
   1d7ec:	4319      	orreq	r1, r3
   1d7ee:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d7f2:	686b      	ldr	r3, [r5, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d7f4:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d7f6:	7a1b      	ldrb	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   1d7f8:	f8d5 8010 	ldr.w	r8, [r5, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1d7fc:	4d4b      	ldr	r5, [pc, #300]	; (1d92c <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d7fe:	ea47 1743 	orr.w	r7, r7, r3, lsl #5
   1d802:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1d806:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d808:	f500 72a2 	add.w	r2, r0, #324	; 0x144
   1d80c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1d810:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d814:	4297      	cmp	r7, r2
   1d816:	d172      	bne.n	1d8fe <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
   1d818:	fa23 f200 	lsr.w	r2, r3, r0
   1d81c:	07d2      	lsls	r2, r2, #31
   1d81e:	d56e      	bpl.n	1d8fe <gpio_nrfx_pin_interrupt_configure+0x17e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d820:	0083      	lsls	r3, r0, #2
   1d822:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d826:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1d82a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d82e:	f022 0201 	bic.w	r2, r2, #1
   1d832:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1d836:	2301      	movs	r3, #1
   1d838:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1d83a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1d83e:	b2c0      	uxtb	r0, r0
   1d840:	f005 ff3c 	bl	236bc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d844:	4638      	mov	r0, r7
   1d846:	2100      	movs	r1, #0
   1d848:	f014 fe4b 	bl	324e2 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1d84c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d850:	40f0      	lsrs	r0, r6
   1d852:	f010 0001 	ands.w	r0, r0, #1
   1d856:	d044      	beq.n	1d8e2 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   1d858:	f8d8 0014 	ldr.w	r0, [r8, #20]
   1d85c:	40f0      	lsrs	r0, r6
   1d85e:	f010 0401 	ands.w	r4, r0, #1
   1d862:	d053      	beq.n	1d90c <gpio_nrfx_pin_interrupt_configure+0x18c>
				if (data->double_edge & BIT(pin)) {
   1d864:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d868:	a801      	add	r0, sp, #4
				if (data->double_edge & BIT(pin)) {
   1d86a:	40f3      	lsrs	r3, r6
   1d86c:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d86e:	bf57      	itett	pl
   1d870:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1d874:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d876:	fa21 f606 	lsrpl.w	r6, r1, r6
   1d87a:	f006 0601 	andpl.w	r6, r6, #1
   1d87e:	bf5c      	itt	pl
   1d880:	f1c6 0602 	rsbpl	r6, r6, #2
   1d884:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d886:	f005 ff3b 	bl	23700 <nrfx_gpiote_channel_alloc>
   1d88a:	4b29      	ldr	r3, [pc, #164]	; (1d930 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1d88c:	4298      	cmp	r0, r3
   1d88e:	d13a      	bne.n	1d906 <gpio_nrfx_pin_interrupt_configure+0x186>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1d890:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d894:	023f      	lsls	r7, r7, #8
   1d896:	008b      	lsls	r3, r1, #2
   1d898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d89c:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d8a0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d8a4:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d8a8:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1d8ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1d8b0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d8b4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1d8b8:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d8ba:	4317      	orrs	r7, r2
    return ((uint32_t)p_reg + event);
   1d8bc:	4a1d      	ldr	r2, [pc, #116]	; (1d934 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d8be:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    return ((uint32_t)p_reg + event);
   1d8c2:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d8c4:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d8c6:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d8ca:	6010      	str	r0, [r2, #0]
   1d8cc:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d8ce:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d8d2:	f042 0201 	orr.w	r2, r2, #1
   1d8d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1d8da:	2301      	movs	r3, #1
   1d8dc:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   1d8de:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   1d8e2:	b003      	add	sp, #12
   1d8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d8e8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1d8ec:	f47f af64 	bne.w	1d7b8 <gpio_nrfx_pin_interrupt_configure+0x38>
   1d8f0:	2101      	movs	r1, #1
   1d8f2:	fa01 f306 	lsl.w	r3, r1, r6
   1d8f6:	68e1      	ldr	r1, [r4, #12]
   1d8f8:	ea21 0103 	bic.w	r1, r1, r3
   1d8fc:	e760      	b.n	1d7c0 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d8fe:	3001      	adds	r0, #1
   1d900:	2808      	cmp	r0, #8
   1d902:	d181      	bne.n	1d808 <gpio_nrfx_pin_interrupt_configure+0x88>
   1d904:	e79e      	b.n	1d844 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   1d906:	f06f 0012 	mvn.w	r0, #18
   1d90a:	e7ea      	b.n	1d8e2 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d90c:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d910:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d912:	40f1      	lsrs	r1, r6
   1d914:	f001 0101 	and.w	r1, r1, #1
   1d918:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d91c:	b2c9      	uxtb	r1, r1
   1d91e:	f014 fde0 	bl	324e2 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1d922:	4620      	mov	r0, r4
   1d924:	e7dd      	b.n	1d8e2 <gpio_nrfx_pin_interrupt_configure+0x162>
		return -ENOTSUP;
   1d926:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d92a:	e7da      	b.n	1d8e2 <gpio_nrfx_pin_interrupt_configure+0x162>
   1d92c:	40031000 	.word	0x40031000
   1d930:	0bad0000 	.word	0x0bad0000
   1d934:	40031100 	.word	0x40031100

0001d938 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d938:	4b2e      	ldr	r3, [pc, #184]	; (1d9f4 <gpio_nrfx_config+0xbc>)
{
   1d93a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d93c:	4c2e      	ldr	r4, [pc, #184]	; (1d9f8 <gpio_nrfx_config+0xc0>)
   1d93e:	4013      	ands	r3, r2
   1d940:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d942:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d944:	d044      	beq.n	1d9d0 <gpio_nrfx_config+0x98>
   1d946:	d80e      	bhi.n	1d966 <gpio_nrfx_config+0x2e>
   1d948:	2b06      	cmp	r3, #6
   1d94a:	d043      	beq.n	1d9d4 <gpio_nrfx_config+0x9c>
   1d94c:	d806      	bhi.n	1d95c <gpio_nrfx_config+0x24>
   1d94e:	2b00      	cmp	r3, #0
   1d950:	d040      	beq.n	1d9d4 <gpio_nrfx_config+0x9c>
   1d952:	2b02      	cmp	r3, #2
   1d954:	d040      	beq.n	1d9d8 <gpio_nrfx_config+0xa0>
   1d956:	f06f 0015 	mvn.w	r0, #21
   1d95a:	e037      	b.n	1d9cc <gpio_nrfx_config+0x94>
   1d95c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d960:	d1f9      	bne.n	1d956 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   1d962:	2401      	movs	r4, #1
   1d964:	e009      	b.n	1d97a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d966:	4c25      	ldr	r4, [pc, #148]	; (1d9fc <gpio_nrfx_config+0xc4>)
   1d968:	42a3      	cmp	r3, r4
   1d96a:	d037      	beq.n	1d9dc <gpio_nrfx_config+0xa4>
   1d96c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d970:	d036      	beq.n	1d9e0 <gpio_nrfx_config+0xa8>
   1d972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d976:	d1ee      	bne.n	1d956 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   1d978:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1d97a:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d97c:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   1d980:	bf4c      	ite	mi
   1d982:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   1d984:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d988:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1d98c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1d98e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1d992:	d507      	bpl.n	1d9a4 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d994:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d996:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d99a:	d523      	bpl.n	1d9e4 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1d99c:	2301      	movs	r3, #1
   1d99e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1d9a0:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1d9a4:	7a03      	ldrb	r3, [r0, #8]
   1d9a6:	f001 011f 	and.w	r1, r1, #31
   1d9aa:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d9ae:	a801      	add	r0, sp, #4
   1d9b0:	9101      	str	r1, [sp, #4]
   1d9b2:	f7ff fe95 	bl	1d6e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1d9b6:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d9b8:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   1d9bc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   1d9c0:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1d9c4:	3280      	adds	r2, #128	; 0x80
   1d9c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   1d9ca:	2000      	movs	r0, #0
}
   1d9cc:	b003      	add	sp, #12
   1d9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1d9d0:	2407      	movs	r4, #7
   1d9d2:	e7d2      	b.n	1d97a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d9d4:	461c      	mov	r4, r3
   1d9d6:	e7d0      	b.n	1d97a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   1d9d8:	2404      	movs	r4, #4
   1d9da:	e7ce      	b.n	1d97a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   1d9dc:	2405      	movs	r4, #5
   1d9de:	e7cc      	b.n	1d97a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   1d9e0:	2403      	movs	r4, #3
   1d9e2:	e7ca      	b.n	1d97a <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d9e4:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1d9e6:	bf42      	ittt	mi
   1d9e8:	2301      	movmi	r3, #1
   1d9ea:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   1d9ec:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   1d9f0:	e7d8      	b.n	1d9a4 <gpio_nrfx_config+0x6c>
   1d9f2:	bf00      	nop
   1d9f4:	00f00006 	.word	0x00f00006
   1d9f8:	00100006 	.word	0x00100006
   1d9fc:	00400002 	.word	0x00400002

0001da00 <gpiote_event_handler>:
{
   1da00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da04:	4d53      	ldr	r5, [pc, #332]	; (1db54 <gpiote_event_handler+0x154>)
   1da06:	682f      	ldr	r7, [r5, #0]
	if (port_event) {
   1da08:	2f00      	cmp	r7, #0
   1da0a:	d05f      	beq.n	1dacc <gpiote_event_handler+0xcc>
	uint32_t out = data->pin_int_en;
   1da0c:	4b52      	ldr	r3, [pc, #328]	; (1db58 <gpiote_event_handler+0x158>)
	uint32_t bit = 1U << pin;
   1da0e:	f04f 0801 	mov.w	r8, #1
	out &= ~data->trig_edge & ~data->double_edge;
   1da12:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   1da16:	68d9      	ldr	r1, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1da18:	4302      	orrs	r2, r0
   1da1a:	ea21 0902 	bic.w	r9, r1, r2
	uint32_t check_pins = level_pins;
   1da1e:	464e      	mov	r6, r9
	uint32_t pin = 0U;
   1da20:	f04f 0a00 	mov.w	sl, #0
    return p_reg->IN;
   1da24:	4a4d      	ldr	r2, [pc, #308]	; (1db5c <gpiote_event_handler+0x15c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1da26:	691b      	ldr	r3, [r3, #16]
   1da28:	6914      	ldr	r4, [r2, #16]
   1da2a:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1da2c:	ea29 0404 	bic.w	r4, r9, r4
	while (check_pins) {
   1da30:	bb86      	cbnz	r6, 1da94 <gpiote_event_handler+0x94>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da32:	602e      	str	r6, [r5, #0]
   1da34:	682b      	ldr	r3, [r5, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1da36:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1da38:	2501      	movs	r5, #1
   1da3a:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   1da3c:	4848      	ldr	r0, [pc, #288]	; (1db60 <gpiote_event_handler+0x160>)
   1da3e:	4949      	ldr	r1, [pc, #292]	; (1db64 <gpiote_event_handler+0x164>)
   1da40:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1da44:	fa05 fc03 	lsl.w	ip, r5, r3
   1da48:	ea1c 0f02 	tst.w	ip, r2
   1da4c:	d00f      	beq.n	1da6e <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da4e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   1da52:	b162      	cbz	r2, 1da6e <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1da54:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1da58:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da5c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1da60:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1da64:	fa05 f202 	lsl.w	r2, r5, r2
   1da68:	4314      	orrs	r4, r2
   1da6a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1da6e:	3301      	adds	r3, #1
   1da70:	2b08      	cmp	r3, #8
   1da72:	d1e5      	bne.n	1da40 <gpiote_event_handler+0x40>
	if (fired_triggers[0]) {
   1da74:	bb64      	cbnz	r4, 1dad0 <gpiote_event_handler+0xd0>
	if (port_event) {
   1da76:	b157      	cbz	r7, 1da8e <gpiote_event_handler+0x8e>
	uint32_t bit = 1U << pin;
   1da78:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1da7a:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   1da7c:	4d36      	ldr	r5, [pc, #216]	; (1db58 <gpiote_event_handler+0x158>)
   1da7e:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1da80:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   1da84:	430a      	orrs	r2, r1
   1da86:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   1da8a:	2c00      	cmp	r4, #0
   1da8c:	d14f      	bne.n	1db2e <gpiote_event_handler+0x12e>
}
   1da8e:	b003      	add	sp, #12
   1da90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   1da94:	ea18 0f06 	tst.w	r8, r6
   1da98:	d013      	beq.n	1dac2 <gpiote_event_handler+0xc2>
			if (!(level_pins & bit)) {
   1da9a:	ea18 0f09 	tst.w	r8, r9
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1da9e:	f00a 0b1f 	and.w	fp, sl, #31
			if (!(level_pins & bit)) {
   1daa2:	d108      	bne.n	1dab6 <gpiote_event_handler+0xb6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1daa4:	a801      	add	r0, sp, #4
   1daa6:	f8cd b004 	str.w	fp, [sp, #4]
   1daaa:	f7ff fe19 	bl	1d6e0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1daae:	9b01      	ldr	r3, [sp, #4]
   1dab0:	3380      	adds	r3, #128	; 0x80
   1dab2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1dab6:	2100      	movs	r1, #0
   1dab8:	4658      	mov	r0, fp
   1daba:	f014 fd12 	bl	324e2 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1dabe:	ea26 0608 	bic.w	r6, r6, r8
		++pin;
   1dac2:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   1dac6:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1daca:	e7b1      	b.n	1da30 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1dacc:	463c      	mov	r4, r7
   1dace:	e7b2      	b.n	1da36 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dad0:	4b21      	ldr	r3, [pc, #132]	; (1db58 <gpiote_event_handler+0x158>)
   1dad2:	685d      	ldr	r5, [r3, #4]
   1dad4:	2d00      	cmp	r5, #0
   1dad6:	d0ce      	beq.n	1da76 <gpiote_event_handler+0x76>
	return node->next;
   1dad8:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1dada:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1db70 <gpiote_event_handler+0x170>
   1dade:	2e00      	cmp	r6, #0
   1dae0:	bf38      	it	cc
   1dae2:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   1dae4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1db74 <gpiote_event_handler+0x174>
   1dae8:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1db78 <gpiote_event_handler+0x178>
		if (cb->pin_mask & pins) {
   1daec:	68ab      	ldr	r3, [r5, #8]
   1daee:	421c      	tst	r4, r3
   1daf0:	d014      	beq.n	1db1c <gpiote_event_handler+0x11c>
			__ASSERT(cb->handler, "No callback handler!");
   1daf2:	686b      	ldr	r3, [r5, #4]
   1daf4:	b963      	cbnz	r3, 1db10 <gpiote_event_handler+0x110>
   1daf6:	4651      	mov	r1, sl
   1daf8:	2345      	movs	r3, #69	; 0x45
   1dafa:	4642      	mov	r2, r8
   1dafc:	481a      	ldr	r0, [pc, #104]	; (1db68 <gpiote_event_handler+0x168>)
   1dafe:	f010 f943 	bl	2dd88 <printk>
   1db02:	481a      	ldr	r0, [pc, #104]	; (1db6c <gpiote_event_handler+0x16c>)
   1db04:	f010 f940 	bl	2dd88 <printk>
   1db08:	2145      	movs	r1, #69	; 0x45
   1db0a:	4640      	mov	r0, r8
   1db0c:	f010 fc22 	bl	2e354 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1db10:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   1db14:	4629      	mov	r1, r5
   1db16:	4648      	mov	r0, r9
   1db18:	4022      	ands	r2, r4
   1db1a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1db1c:	2e00      	cmp	r6, #0
   1db1e:	d0aa      	beq.n	1da76 <gpiote_event_handler+0x76>
   1db20:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1db22:	4635      	mov	r5, r6
   1db24:	2b00      	cmp	r3, #0
   1db26:	bf38      	it	cc
   1db28:	2300      	movcc	r3, #0
   1db2a:	461e      	mov	r6, r3
   1db2c:	e7de      	b.n	1daec <gpiote_event_handler+0xec>
		if (level_pins & bit) {
   1db2e:	4226      	tst	r6, r4
   1db30:	d00c      	beq.n	1db4c <gpiote_event_handler+0x14c>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1db32:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1db34:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1db38:	40f9      	lsrs	r1, r7
   1db3a:	f001 0101 	and.w	r1, r1, #1
   1db3e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1db42:	b2c9      	uxtb	r1, r1
   1db44:	f014 fccd 	bl	324e2 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1db48:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1db4c:	3701      	adds	r7, #1
		bit <<= 1;
   1db4e:	0076      	lsls	r6, r6, #1
   1db50:	e79b      	b.n	1da8a <gpiote_event_handler+0x8a>
   1db52:	bf00      	nop
   1db54:	4003117c 	.word	0x4003117c
   1db58:	20016228 	.word	0x20016228
   1db5c:	40842500 	.word	0x40842500
   1db60:	40031000 	.word	0x40031000
   1db64:	40031100 	.word	0x40031100
   1db68:	00037f2c 	.word	0x00037f2c
   1db6c:	0003a995 	.word	0x0003a995
   1db70:	20014cbc 	.word	0x20014cbc
   1db74:	0003a93e 	.word	0x0003a93e
   1db78:	0003d348 	.word	0x0003d348

0001db7c <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   1db7c:	b510      	push	{r4, lr}
   1db7e:	4604      	mov	r4, r0
   1db80:	2200      	movs	r2, #0
   1db82:	2101      	movs	r1, #1
   1db84:	200a      	movs	r0, #10
   1db86:	f7f9 f911 	bl	16dac <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1db8a:	6860      	ldr	r0, [r4, #4]
   1db8c:	6923      	ldr	r3, [r4, #16]
   1db8e:	4a0c      	ldr	r2, [pc, #48]	; (1dbc0 <twim_2_init+0x44>)
   1db90:	f100 0108 	add.w	r1, r0, #8
   1db94:	f006 fac4 	bl	24120 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1db98:	4b0a      	ldr	r3, [pc, #40]	; (1dbc4 <twim_2_init+0x48>)
   1db9a:	4298      	cmp	r0, r3
   1db9c:	d00d      	beq.n	1dbba <twim_2_init+0x3e>
   1db9e:	4b0a      	ldr	r3, [pc, #40]	; (1dbc8 <twim_2_init+0x4c>)
   1dba0:	4a0a      	ldr	r2, [pc, #40]	; (1dbcc <twim_2_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1dba2:	480b      	ldr	r0, [pc, #44]	; (1dbd0 <twim_2_init+0x54>)
   1dba4:	1ad2      	subs	r2, r2, r3
   1dba6:	08d2      	lsrs	r2, r2, #3
   1dba8:	0192      	lsls	r2, r2, #6
   1dbaa:	6821      	ldr	r1, [r4, #0]
   1dbac:	f042 0201 	orr.w	r2, r2, #1
   1dbb0:	f010 fc2b 	bl	2e40a <log_1>
		return -EBUSY;
   1dbb4:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
   1dbb8:	bd10      	pop	{r4, pc}
	return 0;
   1dbba:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
   1dbbc:	e7fc      	b.n	1dbb8 <twim_2_init+0x3c>
   1dbbe:	bf00      	nop
   1dbc0:	0001dc29 	.word	0x0001dc29
   1dbc4:	0bad0000 	.word	0x0bad0000
   1dbc8:	000364b0 	.word	0x000364b0
   1dbcc:	00036560 	.word	0x00036560
   1dbd0:	0003aa06 	.word	0x0003aa06

0001dbd4 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1dbd4:	07ca      	lsls	r2, r1, #31
{
   1dbd6:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1dbd8:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1dbda:	d40f      	bmi.n	1dbfc <i2c_nrfx_twim_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1dbdc:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1dbe0:	2a01      	cmp	r2, #1
   1dbe2:	d00e      	beq.n	1dc02 <i2c_nrfx_twim_configure+0x2e>
   1dbe4:	2a02      	cmp	r2, #2
   1dbe6:	d015      	beq.n	1dc14 <i2c_nrfx_twim_configure+0x40>
   1dbe8:	490c      	ldr	r1, [pc, #48]	; (1dc1c <i2c_nrfx_twim_configure+0x48>)
   1dbea:	4b0d      	ldr	r3, [pc, #52]	; (1dc20 <i2c_nrfx_twim_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1dbec:	480d      	ldr	r0, [pc, #52]	; (1dc24 <i2c_nrfx_twim_configure+0x50>)
   1dbee:	1ac9      	subs	r1, r1, r3
   1dbf0:	08c9      	lsrs	r1, r1, #3
   1dbf2:	0189      	lsls	r1, r1, #6
   1dbf4:	f041 0101 	orr.w	r1, r1, #1
   1dbf8:	f010 fbfa 	bl	2e3f0 <log_0>
		return -EINVAL;
   1dbfc:	f06f 0015 	mvn.w	r0, #21
   1dc00:	e007      	b.n	1dc12 <i2c_nrfx_twim_configure+0x3e>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1dc02:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1dc06:	681b      	ldr	r3, [r3, #0]
   1dc08:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1dc0c:	6903      	ldr	r3, [r0, #16]
	return 0;
   1dc0e:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1dc10:	6359      	str	r1, [r3, #52]	; 0x34
}
   1dc12:	bd08      	pop	{r3, pc}
   1dc14:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1dc18:	681b      	ldr	r3, [r3, #0]
   1dc1a:	e7f5      	b.n	1dc08 <i2c_nrfx_twim_configure+0x34>
   1dc1c:	00036560 	.word	0x00036560
   1dc20:	000364b0 	.word	0x000364b0
   1dc24:	0003aa26 	.word	0x0003aa26

0001dc28 <event_handler>:
	switch (p_event->type) {
   1dc28:	7803      	ldrb	r3, [r0, #0]
   1dc2a:	2b01      	cmp	r3, #1
   1dc2c:	d008      	beq.n	1dc40 <event_handler+0x18>
   1dc2e:	2b02      	cmp	r3, #2
   1dc30:	d008      	beq.n	1dc44 <event_handler+0x1c>
   1dc32:	b94b      	cbnz	r3, 1dc48 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1dc34:	4b05      	ldr	r3, [pc, #20]	; (1dc4c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1dc36:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1dc38:	f101 0018 	add.w	r0, r1, #24
   1dc3c:	f00b be90 	b.w	29960 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1dc40:	4b03      	ldr	r3, [pc, #12]	; (1dc50 <event_handler+0x28>)
   1dc42:	e7f8      	b.n	1dc36 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1dc44:	4b03      	ldr	r3, [pc, #12]	; (1dc54 <event_handler+0x2c>)
   1dc46:	e7f6      	b.n	1dc36 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1dc48:	4b03      	ldr	r3, [pc, #12]	; (1dc58 <event_handler+0x30>)
   1dc4a:	e7f4      	b.n	1dc36 <event_handler+0xe>
   1dc4c:	0bad0000 	.word	0x0bad0000
   1dc50:	0bae0001 	.word	0x0bae0001
   1dc54:	0bae0002 	.word	0x0bae0002
   1dc58:	0bad0001 	.word	0x0bad0001

0001dc5c <i2c_nrfx_twim_transfer>:
{
   1dc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc60:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   1dc62:	2214      	movs	r2, #20
{
   1dc64:	461e      	mov	r6, r3
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   1dc66:	6904      	ldr	r4, [r0, #16]
{
   1dc68:	b08b      	sub	sp, #44	; 0x2c
   1dc6a:	4605      	mov	r5, r0
   1dc6c:	4689      	mov	r9, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1dc6e:	eb0d 0002 	add.w	r0, sp, r2
   1dc72:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   1dc74:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   1dc78:	f8b4 a038 	ldrh.w	sl, [r4, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
   1dc7c:	f017 fca3 	bl	355c6 <memset>
   1dc80:	f88d 6015 	strb.w	r6, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   1dc84:	f04f 32ff 	mov.w	r2, #4294967295
   1dc88:	f04f 33ff 	mov.w	r3, #4294967295
   1dc8c:	4620      	mov	r0, r4
   1dc8e:	f00b feab 	bl	299e8 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1dc92:	6928      	ldr	r0, [r5, #16]
   1dc94:	3018      	adds	r0, #24
	for (size_t i = 0; i < num_msgs; i++) {
   1dc96:	2700      	movs	r7, #0
   1dc98:	2200      	movs	r2, #0
   1dc9a:	2300      	movs	r3, #0
   1dc9c:	f00b fea4 	bl	299e8 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   1dca0:	6868      	ldr	r0, [r5, #4]
   1dca2:	f006 fab7 	bl	24214 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1dca6:	464e      	mov	r6, r9
	uint32_t concat_len = 0;
   1dca8:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   1dcaa:	455f      	cmp	r7, fp
   1dcac:	d301      	bcc.n	1dcb2 <i2c_nrfx_twim_transfer+0x56>
   1dcae:	2400      	movs	r4, #0
   1dcb0:	e049      	b.n	1dd46 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1dcb2:	7a31      	ldrb	r1, [r6, #8]
   1dcb4:	070b      	lsls	r3, r1, #28
   1dcb6:	f100 80ae 	bmi.w	1de16 <i2c_nrfx_twim_transfer+0x1ba>
			&& ((msgs[i].flags & I2C_MSG_READ)
   1dcba:	f1ba 0f00 	cmp.w	sl, #0
   1dcbe:	d00d      	beq.n	1dcdc <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   1dcc0:	1c7b      	adds	r3, r7, #1
   1dcc2:	455b      	cmp	r3, fp
   1dcc4:	d20a      	bcs.n	1dcdc <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   1dcc6:	0788      	lsls	r0, r1, #30
   1dcc8:	d408      	bmi.n	1dcdc <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1dcca:	7d33      	ldrb	r3, [r6, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   1dccc:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   1dcd0:	f002 0201 	and.w	r2, r2, #1
   1dcd4:	f003 0304 	and.w	r3, r3, #4
   1dcd8:	4313      	orrs	r3, r2
   1dcda:	d01f      	beq.n	1dd1c <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
   1dcdc:	2c00      	cmp	r4, #0
   1dcde:	d13c      	bne.n	1dd5a <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1dce0:	2400      	movs	r4, #0
   1dce2:	6833      	ldr	r3, [r6, #0]
   1dce4:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   1dce6:	6873      	ldr	r3, [r6, #4]
   1dce8:	9306      	str	r3, [sp, #24]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1dcea:	7a33      	ldrb	r3, [r6, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1dcec:	6868      	ldr	r0, [r5, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1dcee:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1dcf2:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1dcf6:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1dcfa:	a905      	add	r1, sp, #20
   1dcfc:	bf0c      	ite	eq
   1dcfe:	2220      	moveq	r2, #32
   1dd00:	2200      	movne	r2, #0
   1dd02:	f006 fae9 	bl	242d8 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1dd06:	4b45      	ldr	r3, [pc, #276]	; (1de1c <i2c_nrfx_twim_transfer+0x1c0>)
   1dd08:	4298      	cmp	r0, r3
   1dd0a:	d03b      	beq.n	1dd84 <i2c_nrfx_twim_transfer+0x128>
			if (res == NRFX_ERROR_BUSY) {
   1dd0c:	330b      	adds	r3, #11
				ret = -EIO;
   1dd0e:	4298      	cmp	r0, r3
   1dd10:	bf0c      	ite	eq
   1dd12:	f06f 040f 	mvneq.w	r4, #15
   1dd16:	f06f 0404 	mvnne.w	r4, #4
   1dd1a:	e014      	b.n	1dd46 <i2c_nrfx_twim_transfer+0xea>
			&& ((msgs[i].flags & I2C_MSG_READ)
   1dd1c:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   1dd1e:	6872      	ldr	r2, [r6, #4]
   1dd20:	1910      	adds	r0, r2, r4
   1dd22:	4550      	cmp	r0, sl
   1dd24:	d91b      	bls.n	1dd5e <i2c_nrfx_twim_transfer+0x102>
   1dd26:	493e      	ldr	r1, [pc, #248]	; (1de20 <i2c_nrfx_twim_transfer+0x1c4>)
   1dd28:	4b3e      	ldr	r3, [pc, #248]	; (1de24 <i2c_nrfx_twim_transfer+0x1c8>)
				LOG_ERR("concat-buf overflow: %u + %u > %u",
   1dd2a:	483f      	ldr	r0, [pc, #252]	; (1de28 <i2c_nrfx_twim_transfer+0x1cc>)
   1dd2c:	1a5b      	subs	r3, r3, r1
   1dd2e:	08db      	lsrs	r3, r3, #3
   1dd30:	019b      	lsls	r3, r3, #6
   1dd32:	f043 0301 	orr.w	r3, r3, #1
   1dd36:	4621      	mov	r1, r4
   1dd38:	f8ad 3000 	strh.w	r3, [sp]
   1dd3c:	4653      	mov	r3, sl
   1dd3e:	f010 fb91 	bl	2e464 <log_3>
				ret = -ENOSPC;
   1dd42:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   1dd46:	6868      	ldr	r0, [r5, #4]
   1dd48:	f006 fa8e 	bl	24268 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1dd4c:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
   1dd4e:	f00b fe07 	bl	29960 <z_impl_k_sem_give>
}
   1dd52:	4620      	mov	r0, r4
   1dd54:	b00b      	add	sp, #44	; 0x2c
   1dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   1dd5a:	2300      	movs	r3, #0
   1dd5c:	e7df      	b.n	1dd1e <i2c_nrfx_twim_transfer+0xc2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1dd5e:	07c9      	lsls	r1, r1, #31
   1dd60:	d406      	bmi.n	1dd70 <i2c_nrfx_twim_transfer+0x114>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1dd62:	6831      	ldr	r1, [r6, #0]
   1dd64:	eb08 0004 	add.w	r0, r8, r4
   1dd68:	9303      	str	r3, [sp, #12]
   1dd6a:	f017 fc0c 	bl	35586 <memcpy>
   1dd6e:	9b03      	ldr	r3, [sp, #12]
			concat_len += msgs[i].len;
   1dd70:	6872      	ldr	r2, [r6, #4]
   1dd72:	4414      	add	r4, r2
		if (concat_next) {
   1dd74:	2b00      	cmp	r3, #0
   1dd76:	d138      	bne.n	1ddea <i2c_nrfx_twim_transfer+0x18e>
		if (concat_len == 0) {
   1dd78:	2c00      	cmp	r4, #0
   1dd7a:	d0b1      	beq.n	1dce0 <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
   1dd7c:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = concat_len;
   1dd80:	9406      	str	r4, [sp, #24]
   1dd82:	e7b2      	b.n	1dcea <i2c_nrfx_twim_transfer+0x8e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1dd84:	6928      	ldr	r0, [r5, #16]
   1dd86:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1dd88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1dd8c:	2300      	movs	r3, #0
   1dd8e:	f00b fe2b 	bl	299e8 <z_impl_k_sem_take>
		if (ret != 0) {
   1dd92:	b1a8      	cbz	r0, 1ddc0 <i2c_nrfx_twim_transfer+0x164>
   1dd94:	4b22      	ldr	r3, [pc, #136]	; (1de20 <i2c_nrfx_twim_transfer+0x1c4>)
   1dd96:	4a23      	ldr	r2, [pc, #140]	; (1de24 <i2c_nrfx_twim_transfer+0x1c8>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1dd98:	4639      	mov	r1, r7
   1dd9a:	1ad2      	subs	r2, r2, r3
   1dd9c:	08d2      	lsrs	r2, r2, #3
   1dd9e:	0192      	lsls	r2, r2, #6
   1dda0:	4822      	ldr	r0, [pc, #136]	; (1de2c <i2c_nrfx_twim_transfer+0x1d0>)
   1dda2:	f042 0201 	orr.w	r2, r2, #1
   1dda6:	f010 fb30 	bl	2e40a <log_1>
			nrfx_twim_disable(&get_dev_config(dev)->twim);
   1ddaa:	6868      	ldr	r0, [r5, #4]
   1ddac:	f006 fa5c 	bl	24268 <nrfx_twim_disable>
			nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
   1ddb0:	686b      	ldr	r3, [r5, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1ddb2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1ddb6:	f006 fd9b 	bl	248f0 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   1ddba:	f06f 0404 	mvn.w	r4, #4
			break;
   1ddbe:	e7c2      	b.n	1dd46 <i2c_nrfx_twim_transfer+0xea>
		res = get_dev_data(dev)->res;
   1ddc0:	692b      	ldr	r3, [r5, #16]
   1ddc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1ddc4:	4b15      	ldr	r3, [pc, #84]	; (1de1c <i2c_nrfx_twim_transfer+0x1c0>)
   1ddc6:	4299      	cmp	r1, r3
   1ddc8:	d00b      	beq.n	1dde2 <i2c_nrfx_twim_transfer+0x186>
   1ddca:	4a15      	ldr	r2, [pc, #84]	; (1de20 <i2c_nrfx_twim_transfer+0x1c4>)
   1ddcc:	4b15      	ldr	r3, [pc, #84]	; (1de24 <i2c_nrfx_twim_transfer+0x1c8>)
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1ddce:	4818      	ldr	r0, [pc, #96]	; (1de30 <i2c_nrfx_twim_transfer+0x1d4>)
   1ddd0:	1a9b      	subs	r3, r3, r2
   1ddd2:	08db      	lsrs	r3, r3, #3
   1ddd4:	019b      	lsls	r3, r3, #6
   1ddd6:	463a      	mov	r2, r7
   1ddd8:	f043 0301 	orr.w	r3, r3, #1
   1dddc:	f010 fb29 	bl	2e432 <log_2>
   1dde0:	e7eb      	b.n	1ddba <i2c_nrfx_twim_transfer+0x15e>
		if ((msgs[i].flags & I2C_MSG_READ)
   1dde2:	7a33      	ldrb	r3, [r6, #8]
   1dde4:	07db      	lsls	r3, r3, #31
   1dde6:	d403      	bmi.n	1ddf0 <i2c_nrfx_twim_transfer+0x194>
		concat_len = 0;
   1dde8:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   1ddea:	3701      	adds	r7, #1
   1ddec:	360c      	adds	r6, #12
   1ddee:	e75c      	b.n	1dcaa <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
   1ddf0:	9b08      	ldr	r3, [sp, #32]
   1ddf2:	4598      	cmp	r8, r3
   1ddf4:	d1f8      	bne.n	1dde8 <i2c_nrfx_twim_transfer+0x18c>
			while (concat_len >= msgs[j].len) {
   1ddf6:	230c      	movs	r3, #12
   1ddf8:	fb03 9307 	mla	r3, r3, r7, r9
   1ddfc:	685a      	ldr	r2, [r3, #4]
   1ddfe:	3b0c      	subs	r3, #12
   1de00:	4294      	cmp	r4, r2
   1de02:	d3f1      	bcc.n	1dde8 <i2c_nrfx_twim_transfer+0x18c>
				concat_len -= msgs[j].len;
   1de04:	1aa4      	subs	r4, r4, r2
   1de06:	68d8      	ldr	r0, [r3, #12]
   1de08:	eb08 0104 	add.w	r1, r8, r4
   1de0c:	9303      	str	r3, [sp, #12]
   1de0e:	f017 fbba 	bl	35586 <memcpy>
   1de12:	9b03      	ldr	r3, [sp, #12]
				j--;
   1de14:	e7f2      	b.n	1ddfc <i2c_nrfx_twim_transfer+0x1a0>
			ret = -ENOTSUP;
   1de16:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1de1a:	e794      	b.n	1dd46 <i2c_nrfx_twim_transfer+0xea>
   1de1c:	0bad0000 	.word	0x0bad0000
   1de20:	000364b0 	.word	0x000364b0
   1de24:	00036560 	.word	0x00036560
   1de28:	0003aa38 	.word	0x0003aa38
   1de2c:	0003aa5a 	.word	0x0003aa5a
   1de30:	0003aa84 	.word	0x0003aa84

0001de34 <gpio_pin_set>:
{
   1de34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1de38:	2501      	movs	r5, #1
   1de3a:	6843      	ldr	r3, [r0, #4]
   1de3c:	408d      	lsls	r5, r1
   1de3e:	681b      	ldr	r3, [r3, #0]
{
   1de40:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1de42:	421d      	tst	r5, r3
{
   1de44:	4616      	mov	r6, r2
	const struct gpio_driver_data *const data =
   1de46:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1de48:	d10e      	bne.n	1de68 <gpio_pin_set+0x34>
   1de4a:	4919      	ldr	r1, [pc, #100]	; (1deb0 <gpio_pin_set+0x7c>)
   1de4c:	f240 439f 	movw	r3, #1183	; 0x49f
   1de50:	4a18      	ldr	r2, [pc, #96]	; (1deb4 <gpio_pin_set+0x80>)
   1de52:	4819      	ldr	r0, [pc, #100]	; (1deb8 <gpio_pin_set+0x84>)
   1de54:	f00f ff98 	bl	2dd88 <printk>
   1de58:	4818      	ldr	r0, [pc, #96]	; (1debc <gpio_pin_set+0x88>)
   1de5a:	f00f ff95 	bl	2dd88 <printk>
   1de5e:	f240 419f 	movw	r1, #1183	; 0x49f
   1de62:	4814      	ldr	r0, [pc, #80]	; (1deb4 <gpio_pin_set+0x80>)
   1de64:	f010 fa76 	bl	2e354 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1de68:	683b      	ldr	r3, [r7, #0]
   1de6a:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1de6c:	6863      	ldr	r3, [r4, #4]
   1de6e:	bf18      	it	ne
   1de70:	f086 0601 	eorne.w	r6, r6, #1
   1de74:	681b      	ldr	r3, [r3, #0]
   1de76:	421d      	tst	r5, r3
   1de78:	d10e      	bne.n	1de98 <gpio_pin_set+0x64>
   1de7a:	490d      	ldr	r1, [pc, #52]	; (1deb0 <gpio_pin_set+0x7c>)
   1de7c:	f240 4375 	movw	r3, #1141	; 0x475
   1de80:	4a0c      	ldr	r2, [pc, #48]	; (1deb4 <gpio_pin_set+0x80>)
   1de82:	480d      	ldr	r0, [pc, #52]	; (1deb8 <gpio_pin_set+0x84>)
   1de84:	f00f ff80 	bl	2dd88 <printk>
   1de88:	480c      	ldr	r0, [pc, #48]	; (1debc <gpio_pin_set+0x88>)
   1de8a:	f00f ff7d 	bl	2dd88 <printk>
   1de8e:	f240 4175 	movw	r1, #1141	; 0x475
   1de92:	4808      	ldr	r0, [pc, #32]	; (1deb4 <gpio_pin_set+0x80>)
   1de94:	f010 fa5e 	bl	2e354 <assert_post_action>
	if (value != 0)	{
   1de98:	b136      	cbz	r6, 1dea8 <gpio_pin_set+0x74>
	return api->port_set_bits_raw(port, pins);
   1de9a:	68a3      	ldr	r3, [r4, #8]
   1de9c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1de9e:	4629      	mov	r1, r5
   1dea0:	4620      	mov	r0, r4
}
   1dea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1dea6:	4718      	bx	r3
   1dea8:	68a3      	ldr	r3, [r4, #8]
   1deaa:	691b      	ldr	r3, [r3, #16]
   1deac:	e7f7      	b.n	1de9e <gpio_pin_set+0x6a>
   1deae:	bf00      	nop
   1deb0:	00039426 	.word	0x00039426
   1deb4:	000393fc 	.word	0x000393fc
   1deb8:	00037f2c 	.word	0x00037f2c
   1debc:	00039464 	.word	0x00039464

0001dec0 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   1dec0:	b538      	push	{r3, r4, r5, lr}
   1dec2:	4604      	mov	r4, r0
   1dec4:	2200      	movs	r2, #0
   1dec6:	2101      	movs	r1, #1
   1dec8:	200b      	movs	r0, #11
   1deca:	f7f8 ff6f 	bl	16dac <z_arm_irq_priority_set>
	struct spi_nrfx_data *data = get_dev_data(dev);
   1dece:	6923      	ldr	r3, [r4, #16]
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   1ded0:	4a0e      	ldr	r2, [pc, #56]	; (1df0c <spi_3_init+0x4c>)
	data->dev = dev;
   1ded2:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   1ded4:	6860      	ldr	r0, [r4, #4]
   1ded6:	f100 0110 	add.w	r1, r0, #16
   1deda:	f005 fd6b 	bl	239b4 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1dede:	4b0c      	ldr	r3, [pc, #48]	; (1df10 <spi_3_init+0x50>)
   1dee0:	4298      	cmp	r0, r3
   1dee2:	d011      	beq.n	1df08 <spi_3_init+0x48>
   1dee4:	4b0b      	ldr	r3, [pc, #44]	; (1df14 <spi_3_init+0x54>)
   1dee6:	4a0c      	ldr	r2, [pc, #48]	; (1df18 <spi_3_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1dee8:	6821      	ldr	r1, [r4, #0]
   1deea:	1ad2      	subs	r2, r2, r3
   1deec:	08d2      	lsrs	r2, r2, #3
   1deee:	0192      	lsls	r2, r2, #6
   1def0:	480a      	ldr	r0, [pc, #40]	; (1df1c <spi_3_init+0x5c>)
   1def2:	f042 0201 	orr.w	r2, r2, #1
   1def6:	f010 fa88 	bl	2e40a <log_1>
		return -EBUSY;
   1defa:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPIM_DEVICE(3);
   1defe:	6920      	ldr	r0, [r4, #16]
   1df00:	f014 fb27 	bl	32552 <spi_context_unlock_unconditionally>
   1df04:	4628      	mov	r0, r5
   1df06:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1df08:	2500      	movs	r5, #0
   1df0a:	e7f8      	b.n	1defe <spi_3_init+0x3e>
   1df0c:	0001e361 	.word	0x0001e361
   1df10:	0bad0000 	.word	0x0bad0000
   1df14:	000364b0 	.word	0x000364b0
   1df18:	000365e8 	.word	0x000365e8
   1df1c:	0003aa06 	.word	0x0003aa06

0001df20 <transfer_next_chunk>:
{
   1df20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1df24:	6905      	ldr	r5, [r0, #16]
{
   1df26:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1df28:	6d2f      	ldr	r7, [r5, #80]	; 0x50
   1df2a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   1df2c:	b98f      	cbnz	r7, 1df52 <transfer_next_chunk+0x32>
	if (chunk_len > 0) {
   1df2e:	2c00      	cmp	r4, #0
   1df30:	d14c      	bne.n	1dfcc <transfer_next_chunk+0xac>
	_spi_context_cs_control(ctx, on, false);
   1df32:	2200      	movs	r2, #0
   1df34:	4628      	mov	r0, r5
   1df36:	4611      	mov	r1, r2
   1df38:	f014 fae6 	bl	32508 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   1df3c:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1df3e:	f105 0020 	add.w	r0, r5, #32
   1df42:	f00b fd0d 	bl	29960 <z_impl_k_sem_give>
	dev_data->busy = false;
   1df46:	2300      	movs	r3, #0
   1df48:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1df4c:	b005      	add	sp, #20
   1df4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1df52:	463e      	mov	r6, r7
   1df54:	b114      	cbz	r4, 1df5c <transfer_next_chunk+0x3c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1df56:	42a7      	cmp	r7, r4
   1df58:	bf28      	it	cs
   1df5a:	4626      	movcs	r6, r4
		const uint8_t *tx_buf = ctx->tx_buf;
   1df5c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   1df60:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   1df64:	f1b8 0f00 	cmp.w	r8, #0
   1df68:	d032      	beq.n	1dfd0 <transfer_next_chunk+0xb0>
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1df6a:	b38f      	cbz	r7, 1dfd0 <transfer_next_chunk+0xb0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1df6c:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
   1df70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1df74:	d02c      	beq.n	1dfd0 <transfer_next_chunk+0xb0>
			if (chunk_len > sizeof(dev_data->buffer)) {
   1df76:	2e08      	cmp	r6, #8
   1df78:	bf28      	it	cs
   1df7a:	2608      	movcs	r6, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   1df7c:	f105 0365 	add.w	r3, r5, #101	; 0x65
   1df80:	4618      	mov	r0, r3
   1df82:	4632      	mov	r2, r6
   1df84:	4641      	mov	r1, r8
   1df86:	f017 fafe 	bl	35586 <memcpy>
   1df8a:	4603      	mov	r3, r0
		if (chunk_len > dev_config->max_chunk_len) {
   1df8c:	f8d9 2008 	ldr.w	r2, [r9, #8]
		xfer.p_tx_buffer = tx_buf;
   1df90:	9300      	str	r3, [sp, #0]
   1df92:	4296      	cmp	r6, r2
   1df94:	bf28      	it	cs
   1df96:	4616      	movcs	r6, r2
		dev_data->chunk_len = chunk_len;
   1df98:	662e      	str	r6, [r5, #96]	; 0x60
   1df9a:	f1b8 0f00 	cmp.w	r8, #0
   1df9e:	d019      	beq.n	1dfd4 <transfer_next_chunk+0xb4>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dfa0:	2f00      	cmp	r7, #0
   1dfa2:	bf18      	it	ne
   1dfa4:	4637      	movne	r7, r6
		xfer.p_rx_buffer = ctx->rx_buf;
   1dfa6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dfa8:	9701      	str	r7, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1dfaa:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1dfac:	b1a3      	cbz	r3, 1dfd8 <transfer_next_chunk+0xb8>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dfae:	2c00      	cmp	r4, #0
   1dfb0:	bf18      	it	ne
   1dfb2:	4634      	movne	r4, r6
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1dfb4:	2200      	movs	r2, #0
   1dfb6:	4669      	mov	r1, sp
   1dfb8:	4648      	mov	r0, r9
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dfba:	9403      	str	r4, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1dfbc:	f005 fdc0 	bl	23b40 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1dfc0:	4b06      	ldr	r3, [pc, #24]	; (1dfdc <transfer_next_chunk+0xbc>)
   1dfc2:	4298      	cmp	r0, r3
   1dfc4:	d0c2      	beq.n	1df4c <transfer_next_chunk+0x2c>
			error = -EIO;
   1dfc6:	f06f 0404 	mvn.w	r4, #4
   1dfca:	e7b2      	b.n	1df32 <transfer_next_chunk+0x12>
   1dfcc:	4626      	mov	r6, r4
   1dfce:	e7c5      	b.n	1df5c <transfer_next_chunk+0x3c>
   1dfd0:	4643      	mov	r3, r8
   1dfd2:	e7db      	b.n	1df8c <transfer_next_chunk+0x6c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dfd4:	4647      	mov	r7, r8
   1dfd6:	e7e6      	b.n	1dfa6 <transfer_next_chunk+0x86>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dfd8:	461c      	mov	r4, r3
   1dfda:	e7eb      	b.n	1dfb4 <transfer_next_chunk+0x94>
   1dfdc:	0bad0000 	.word	0x0bad0000

0001dfe0 <spi_nrfx_transceive>:
{
   1dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfe4:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dfe6:	888b      	ldrh	r3, [r1, #4]
   1dfe8:	4681      	mov	r9, r0
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1dfea:	6904      	ldr	r4, [r0, #16]
   1dfec:	0458      	lsls	r0, r3, #17
{
   1dfee:	460d      	mov	r5, r1
   1dff0:	4617      	mov	r7, r2
   1dff2:	b087      	sub	sp, #28
   1dff4:	d42e      	bmi.n	1e054 <spi_nrfx_transceive+0x74>
	return z_impl_k_sem_take(sem, timeout);
   1dff6:	f04f 32ff 	mov.w	r2, #4294967295
   1dffa:	f04f 33ff 	mov.w	r3, #4294967295
   1dffe:	f104 0008 	add.w	r0, r4, #8
   1e002:	f00b fcf1 	bl	299e8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1e006:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   1e008:	f8d9 8010 	ldr.w	r8, [r9, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
   1e00c:	f8d8 3000 	ldr.w	r3, [r8]
   1e010:	429d      	cmp	r5, r3
   1e012:	f000 811a 	beq.w	1e24a <spi_nrfx_transceive+0x26a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1e016:	88ab      	ldrh	r3, [r5, #4]
   1e018:	07d9      	lsls	r1, r3, #31
   1e01a:	d522      	bpl.n	1e062 <spi_nrfx_transceive+0x82>
   1e01c:	4ab2      	ldr	r2, [pc, #712]	; (1e2e8 <spi_nrfx_transceive+0x308>)
   1e01e:	4bb3      	ldr	r3, [pc, #716]	; (1e2ec <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Slave mode is not supported on %s",
   1e020:	f8d9 1000 	ldr.w	r1, [r9]
   1e024:	1ad2      	subs	r2, r2, r3
   1e026:	08d2      	lsrs	r2, r2, #3
   1e028:	0192      	lsls	r2, r2, #6
   1e02a:	48b1      	ldr	r0, [pc, #708]	; (1e2f0 <spi_nrfx_transceive+0x310>)
   1e02c:	f042 0201 	orr.w	r2, r2, #1
   1e030:	f010 f9eb 	bl	2e40a <log_1>
		return -EINVAL;
   1e034:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1e038:	6823      	ldr	r3, [r4, #0]
   1e03a:	889b      	ldrh	r3, [r3, #4]
   1e03c:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1e040:	d104      	bne.n	1e04c <spi_nrfx_transceive+0x6c>
		ctx->owner = NULL;
   1e042:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1e044:	f104 0008 	add.w	r0, r4, #8
   1e048:	f00b fc8a 	bl	29960 <z_impl_k_sem_give>
}
   1e04c:	4628      	mov	r0, r5
   1e04e:	b007      	add	sp, #28
   1e050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1e054:	6923      	ldr	r3, [r4, #16]
   1e056:	2b00      	cmp	r3, #0
   1e058:	d1cd      	bne.n	1dff6 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1e05a:	6863      	ldr	r3, [r4, #4]
   1e05c:	4299      	cmp	r1, r3
   1e05e:	d1ca      	bne.n	1dff6 <spi_nrfx_transceive+0x16>
   1e060:	e7d2      	b.n	1e008 <spi_nrfx_transceive+0x28>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1e062:	071a      	lsls	r2, r3, #28
   1e064:	d50a      	bpl.n	1e07c <spi_nrfx_transceive+0x9c>
   1e066:	49a0      	ldr	r1, [pc, #640]	; (1e2e8 <spi_nrfx_transceive+0x308>)
   1e068:	4ba0      	ldr	r3, [pc, #640]	; (1e2ec <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Loopback mode is not supported");
   1e06a:	48a2      	ldr	r0, [pc, #648]	; (1e2f4 <spi_nrfx_transceive+0x314>)
   1e06c:	1ac9      	subs	r1, r1, r3
   1e06e:	08c9      	lsrs	r1, r1, #3
   1e070:	0189      	lsls	r1, r1, #6
   1e072:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1e076:	f010 f9bb 	bl	2e3f0 <log_0>
   1e07a:	e7db      	b.n	1e034 <spi_nrfx_transceive+0x54>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1e07c:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1e080:	d008      	beq.n	1e094 <spi_nrfx_transceive+0xb4>
   1e082:	4999      	ldr	r1, [pc, #612]	; (1e2e8 <spi_nrfx_transceive+0x308>)
   1e084:	4b99      	ldr	r3, [pc, #612]	; (1e2ec <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Only single line mode is supported");
   1e086:	489c      	ldr	r0, [pc, #624]	; (1e2f8 <spi_nrfx_transceive+0x318>)
   1e088:	1ac9      	subs	r1, r1, r3
   1e08a:	08c9      	lsrs	r1, r1, #3
   1e08c:	0189      	lsls	r1, r1, #6
   1e08e:	f041 0101 	orr.w	r1, r1, #1
   1e092:	e7f0      	b.n	1e076 <spi_nrfx_transceive+0x96>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1e094:	f3c3 1245 	ubfx	r2, r3, #5, #6
   1e098:	2a08      	cmp	r2, #8
   1e09a:	d008      	beq.n	1e0ae <spi_nrfx_transceive+0xce>
   1e09c:	4992      	ldr	r1, [pc, #584]	; (1e2e8 <spi_nrfx_transceive+0x308>)
   1e09e:	4b93      	ldr	r3, [pc, #588]	; (1e2ec <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Word sizes other than 8 bits"
   1e0a0:	4896      	ldr	r0, [pc, #600]	; (1e2fc <spi_nrfx_transceive+0x31c>)
   1e0a2:	1ac9      	subs	r1, r1, r3
   1e0a4:	08c9      	lsrs	r1, r1, #3
   1e0a6:	0189      	lsls	r1, r1, #6
   1e0a8:	f041 0101 	orr.w	r1, r1, #1
   1e0ac:	e7e3      	b.n	1e076 <spi_nrfx_transceive+0x96>
	if (spi_cfg->frequency < 125000) {
   1e0ae:	6829      	ldr	r1, [r5, #0]
   1e0b0:	4a93      	ldr	r2, [pc, #588]	; (1e300 <spi_nrfx_transceive+0x320>)
   1e0b2:	4291      	cmp	r1, r2
   1e0b4:	d808      	bhi.n	1e0c8 <spi_nrfx_transceive+0xe8>
   1e0b6:	498c      	ldr	r1, [pc, #560]	; (1e2e8 <spi_nrfx_transceive+0x308>)
   1e0b8:	4b8c      	ldr	r3, [pc, #560]	; (1e2ec <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e0ba:	4892      	ldr	r0, [pc, #584]	; (1e304 <spi_nrfx_transceive+0x324>)
   1e0bc:	1ac9      	subs	r1, r1, r3
   1e0be:	08c9      	lsrs	r1, r1, #3
   1e0c0:	0189      	lsls	r1, r1, #6
   1e0c2:	f041 0101 	orr.w	r1, r1, #1
   1e0c6:	e7d6      	b.n	1e076 <spi_nrfx_transceive+0x96>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   1e0c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
	ctx->config = spi_cfg;
   1e0cc:	f8c8 5000 	str.w	r5, [r8]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   1e0d0:	9202      	str	r2, [sp, #8]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1e0d2:	68aa      	ldr	r2, [r5, #8]
   1e0d4:	2a00      	cmp	r2, #0
   1e0d6:	f000 80e2 	beq.w	1e29e <spi_nrfx_transceive+0x2be>
   1e0da:	6811      	ldr	r1, [r2, #0]
   1e0dc:	2900      	cmp	r1, #0
   1e0de:	f000 80de 	beq.w	1e29e <spi_nrfx_transceive+0x2be>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   1e0e2:	43db      	mvns	r3, r3
		__ASSERT(spi_context_cs_active_level(ctx) ==
   1e0e4:	7a52      	ldrb	r2, [r2, #9]
   1e0e6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
   1e0ea:	f002 0201 	and.w	r2, r2, #1
   1e0ee:	4293      	cmp	r3, r2
   1e0f0:	d00c      	beq.n	1e10c <spi_nrfx_transceive+0x12c>
   1e0f2:	4985      	ldr	r1, [pc, #532]	; (1e308 <spi_nrfx_transceive+0x328>)
   1e0f4:	23b2      	movs	r3, #178	; 0xb2
   1e0f6:	4a85      	ldr	r2, [pc, #532]	; (1e30c <spi_nrfx_transceive+0x32c>)
   1e0f8:	4885      	ldr	r0, [pc, #532]	; (1e310 <spi_nrfx_transceive+0x330>)
   1e0fa:	f00f fe45 	bl	2dd88 <printk>
   1e0fe:	4885      	ldr	r0, [pc, #532]	; (1e314 <spi_nrfx_transceive+0x334>)
   1e100:	f00f fe42 	bl	2dd88 <printk>
   1e104:	21b2      	movs	r1, #178	; 0xb2
   1e106:	4881      	ldr	r0, [pc, #516]	; (1e30c <spi_nrfx_transceive+0x32c>)
   1e108:	f010 f924 	bl	2e354 <assert_post_action>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1e10c:	f8d8 3000 	ldr.w	r3, [r8]
   1e110:	689b      	ldr	r3, [r3, #8]
   1e112:	7a1a      	ldrb	r2, [r3, #8]
   1e114:	f8d3 b000 	ldr.w	fp, [r3]
				   ctx->config->cs->gpio_dt_flags |
   1e118:	f893 8009 	ldrb.w	r8, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1e11c:	9200      	str	r2, [sp, #0]
	const struct gpio_driver_api *api =
   1e11e:	f8db 3008 	ldr.w	r3, [fp, #8]
   1e122:	9303      	str	r3, [sp, #12]
	const struct gpio_driver_config *const cfg =
   1e124:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e128:	9304      	str	r3, [sp, #16]
	struct gpio_driver_data *data =
   1e12a:	f8db 3010 	ldr.w	r3, [fp, #16]
   1e12e:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1e130:	f008 0330 	and.w	r3, r8, #48	; 0x30
   1e134:	2b30      	cmp	r3, #48	; 0x30
   1e136:	d10e      	bne.n	1e156 <spi_nrfx_transceive+0x176>
   1e138:	4977      	ldr	r1, [pc, #476]	; (1e318 <spi_nrfx_transceive+0x338>)
   1e13a:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1e13e:	4a77      	ldr	r2, [pc, #476]	; (1e31c <spi_nrfx_transceive+0x33c>)
   1e140:	4873      	ldr	r0, [pc, #460]	; (1e310 <spi_nrfx_transceive+0x330>)
   1e142:	f00f fe21 	bl	2dd88 <printk>
   1e146:	4876      	ldr	r0, [pc, #472]	; (1e320 <spi_nrfx_transceive+0x340>)
   1e148:	f00f fe1e 	bl	2dd88 <printk>
   1e14c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   1e150:	4872      	ldr	r0, [pc, #456]	; (1e31c <spi_nrfx_transceive+0x33c>)
   1e152:	f010 f8ff 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1e156:	f008 0306 	and.w	r3, r8, #6
   1e15a:	2b04      	cmp	r3, #4
   1e15c:	d10b      	bne.n	1e176 <spi_nrfx_transceive+0x196>
   1e15e:	4971      	ldr	r1, [pc, #452]	; (1e324 <spi_nrfx_transceive+0x344>)
   1e160:	486b      	ldr	r0, [pc, #428]	; (1e310 <spi_nrfx_transceive+0x330>)
   1e162:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   1e166:	4a6d      	ldr	r2, [pc, #436]	; (1e31c <spi_nrfx_transceive+0x33c>)
   1e168:	f00f fe0e 	bl	2dd88 <printk>
   1e16c:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   1e170:	486a      	ldr	r0, [pc, #424]	; (1e31c <spi_nrfx_transceive+0x33c>)
   1e172:	f010 f8ef 	bl	2e354 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e176:	f04f 0a01 	mov.w	sl, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1e17a:	f018 0f01 	tst.w	r8, #1
   1e17e:	bf0c      	ite	eq
   1e180:	f448 58b0 	orreq.w	r8, r8, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1e184:	f488 58d0 	eorne.w	r8, r8, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1e188:	f428 5380 	bic.w	r3, r8, #4096	; 0x1000
   1e18c:	9305      	str	r3, [sp, #20]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e18e:	9b00      	ldr	r3, [sp, #0]
   1e190:	fa0a fa03 	lsl.w	sl, sl, r3
   1e194:	9b04      	ldr	r3, [sp, #16]
   1e196:	681b      	ldr	r3, [r3, #0]
   1e198:	ea1a 0f03 	tst.w	sl, r3
   1e19c:	d10e      	bne.n	1e1bc <spi_nrfx_transceive+0x1dc>
   1e19e:	4962      	ldr	r1, [pc, #392]	; (1e328 <spi_nrfx_transceive+0x348>)
   1e1a0:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   1e1a4:	4a5d      	ldr	r2, [pc, #372]	; (1e31c <spi_nrfx_transceive+0x33c>)
   1e1a6:	485a      	ldr	r0, [pc, #360]	; (1e310 <spi_nrfx_transceive+0x330>)
   1e1a8:	f00f fdee 	bl	2dd88 <printk>
   1e1ac:	485f      	ldr	r0, [pc, #380]	; (1e32c <spi_nrfx_transceive+0x34c>)
   1e1ae:	f00f fdeb 	bl	2dd88 <printk>
   1e1b2:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1e1b6:	4859      	ldr	r0, [pc, #356]	; (1e31c <spi_nrfx_transceive+0x33c>)
   1e1b8:	f010 f8cc 	bl	2e354 <assert_post_action>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1e1bc:	9b01      	ldr	r3, [sp, #4]
   1e1be:	9a01      	ldr	r2, [sp, #4]
   1e1c0:	681b      	ldr	r3, [r3, #0]
   1e1c2:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e1c6:	bf14      	ite	ne
   1e1c8:	ea4a 0303 	orrne.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e1cc:	ea23 030a 	biceq.w	r3, r3, sl
   1e1d0:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1e1d2:	9b03      	ldr	r3, [sp, #12]
   1e1d4:	4658      	mov	r0, fp
   1e1d6:	681b      	ldr	r3, [r3, #0]
   1e1d8:	9a05      	ldr	r2, [sp, #20]
   1e1da:	9900      	ldr	r1, [sp, #0]
   1e1dc:	4798      	blx	r3
	freq = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1e1de:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e1e2:	682a      	ldr	r2, [r5, #0]
   1e1e4:	68db      	ldr	r3, [r3, #12]
   1e1e6:	4293      	cmp	r3, r2
   1e1e8:	bf28      	it	cs
   1e1ea:	4613      	movcs	r3, r2
	if (frequency < 250000) {
   1e1ec:	4a50      	ldr	r2, [pc, #320]	; (1e330 <spi_nrfx_transceive+0x350>)
   1e1ee:	4293      	cmp	r3, r2
   1e1f0:	d960      	bls.n	1e2b4 <spi_nrfx_transceive+0x2d4>
	} else if (frequency < 500000) {
   1e1f2:	4a50      	ldr	r2, [pc, #320]	; (1e334 <spi_nrfx_transceive+0x354>)
   1e1f4:	4293      	cmp	r3, r2
   1e1f6:	d960      	bls.n	1e2ba <spi_nrfx_transceive+0x2da>
	} else if (frequency < 1000000) {
   1e1f8:	4a4f      	ldr	r2, [pc, #316]	; (1e338 <spi_nrfx_transceive+0x358>)
   1e1fa:	4293      	cmp	r3, r2
   1e1fc:	d960      	bls.n	1e2c0 <spi_nrfx_transceive+0x2e0>
	} else if (frequency < 2000000) {
   1e1fe:	4a4f      	ldr	r2, [pc, #316]	; (1e33c <spi_nrfx_transceive+0x35c>)
   1e200:	4293      	cmp	r3, r2
   1e202:	d960      	bls.n	1e2c6 <spi_nrfx_transceive+0x2e6>
	} else if (frequency < 4000000) {
   1e204:	4a4e      	ldr	r2, [pc, #312]	; (1e340 <spi_nrfx_transceive+0x360>)
   1e206:	4293      	cmp	r3, r2
   1e208:	d960      	bls.n	1e2cc <spi_nrfx_transceive+0x2ec>
		return NRF_SPIM_FREQ_8M;
   1e20a:	4a4e      	ldr	r2, [pc, #312]	; (1e344 <spi_nrfx_transceive+0x364>)
   1e20c:	4293      	cmp	r3, r2
   1e20e:	bf34      	ite	cc
   1e210:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
   1e214:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
	nrf_spim_configure(spim->p_reg,
   1e218:	9a02      	ldr	r2, [sp, #8]
   1e21a:	6810      	ldr	r0, [r2, #0]
   1e21c:	88aa      	ldrh	r2, [r5, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e21e:	0795      	lsls	r5, r2, #30
   1e220:	f002 0104 	and.w	r1, r2, #4
   1e224:	d555      	bpl.n	1e2d2 <spi_nrfx_transceive+0x2f2>
			return NRF_SPIM_MODE_2;
   1e226:	2900      	cmp	r1, #0
   1e228:	bf14      	ite	ne
   1e22a:	2103      	movne	r1, #3
   1e22c:	2102      	moveq	r1, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1e22e:	2902      	cmp	r1, #2
	if (operation & SPI_TRANSFER_LSB) {
   1e230:	f3c2 1200 	ubfx	r2, r2, #4, #1
   1e234:	d051      	beq.n	1e2da <spi_nrfx_transceive+0x2fa>
   1e236:	2903      	cmp	r1, #3
   1e238:	d052      	beq.n	1e2e0 <spi_nrfx_transceive+0x300>
   1e23a:	2901      	cmp	r1, #1
   1e23c:	d101      	bne.n	1e242 <spi_nrfx_transceive+0x262>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1e23e:	f042 0202 	orr.w	r2, r2, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1e242:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
    p_reg->FREQUENCY = (uint32_t)frequency;
   1e246:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
		dev_data->busy = true;
   1e24a:	2301      	movs	r3, #1
   1e24c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1e250:	2f00      	cmp	r7, #0
   1e252:	d07b      	beq.n	1e34c <spi_nrfx_transceive+0x36c>
		ctx->current_tx = tx_bufs->buffers;
   1e254:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1e256:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1e258:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1e25a:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1e25c:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1e25e:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1e260:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1e262:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1e264:	2e00      	cmp	r6, #0
   1e266:	d076      	beq.n	1e356 <spi_nrfx_transceive+0x376>
		ctx->current_rx = rx_bufs->buffers;
   1e268:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1e26a:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1e26c:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1e26e:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e270:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1e272:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e274:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1e276:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1e278:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
   1e27a:	2101      	movs	r1, #1
   1e27c:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   1e27e:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1e280:	f014 f942 	bl	32508 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   1e284:	4648      	mov	r0, r9
   1e286:	f7ff fe4b 	bl	1df20 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1e28a:	f04f 32ff 	mov.w	r2, #4294967295
   1e28e:	f04f 33ff 	mov.w	r3, #4294967295
   1e292:	f104 0020 	add.w	r0, r4, #32
   1e296:	f00b fba7 	bl	299e8 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1e29a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1e29c:	e6cc      	b.n	1e038 <spi_nrfx_transceive+0x58>
   1e29e:	4b13      	ldr	r3, [pc, #76]	; (1e2ec <spi_nrfx_transceive+0x30c>)
   1e2a0:	4911      	ldr	r1, [pc, #68]	; (1e2e8 <spi_nrfx_transceive+0x308>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1e2a2:	4829      	ldr	r0, [pc, #164]	; (1e348 <spi_nrfx_transceive+0x368>)
   1e2a4:	1ac9      	subs	r1, r1, r3
   1e2a6:	08c9      	lsrs	r1, r1, #3
   1e2a8:	0189      	lsls	r1, r1, #6
   1e2aa:	f041 0103 	orr.w	r1, r1, #3
   1e2ae:	f010 f89f 	bl	2e3f0 <log_0>
   1e2b2:	e794      	b.n	1e1de <spi_nrfx_transceive+0x1fe>
		return NRF_SPIM_FREQ_125K;
   1e2b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1e2b8:	e7ae      	b.n	1e218 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_250K;
   1e2ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e2be:	e7ab      	b.n	1e218 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_500K;
   1e2c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1e2c4:	e7a8      	b.n	1e218 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_1M;
   1e2c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e2ca:	e7a5      	b.n	1e218 <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_2M;
   1e2cc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1e2d0:	e7a2      	b.n	1e218 <spi_nrfx_transceive+0x238>
			return NRF_SPIM_MODE_0;
   1e2d2:	3900      	subs	r1, #0
   1e2d4:	bf18      	it	ne
   1e2d6:	2101      	movne	r1, #1
   1e2d8:	e7a9      	b.n	1e22e <spi_nrfx_transceive+0x24e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1e2da:	f042 0204 	orr.w	r2, r2, #4
        break;
   1e2de:	e7b0      	b.n	1e242 <spi_nrfx_transceive+0x262>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1e2e0:	f042 0206 	orr.w	r2, r2, #6
        break;
   1e2e4:	e7ad      	b.n	1e242 <spi_nrfx_transceive+0x262>
   1e2e6:	bf00      	nop
   1e2e8:	000365e8 	.word	0x000365e8
   1e2ec:	000364b0 	.word	0x000364b0
   1e2f0:	0003aabd 	.word	0x0003aabd
   1e2f4:	0003aadf 	.word	0x0003aadf
   1e2f8:	0003aafe 	.word	0x0003aafe
   1e2fc:	0003ab21 	.word	0x0003ab21
   1e300:	0001e847 	.word	0x0001e847
   1e304:	0003ab50 	.word	0x0003ab50
   1e308:	0003abae 	.word	0x0003abae
   1e30c:	0003ab81 	.word	0x0003ab81
   1e310:	00037f2c 	.word	0x00037f2c
   1e314:	0003abfe 	.word	0x0003abfe
   1e318:	0003ac33 	.word	0x0003ac33
   1e31c:	000393fc 	.word	0x000393fc
   1e320:	0003ac6c 	.word	0x0003ac6c
   1e324:	0003aca9 	.word	0x0003aca9
   1e328:	00039426 	.word	0x00039426
   1e32c:	00039464 	.word	0x00039464
   1e330:	0003d08f 	.word	0x0003d08f
   1e334:	0007a11f 	.word	0x0007a11f
   1e338:	000f423f 	.word	0x000f423f
   1e33c:	001e847f 	.word	0x001e847f
   1e340:	003d08ff 	.word	0x003d08ff
   1e344:	007a1200 	.word	0x007a1200
   1e348:	0003acdc 	.word	0x0003acdc
		ctx->tx_count = 0;
   1e34c:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1e350:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1e354:	e786      	b.n	1e264 <spi_nrfx_transceive+0x284>
		ctx->rx_count = 0;
   1e356:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1e35a:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1e35e:	e78b      	b.n	1e278 <spi_nrfx_transceive+0x298>

0001e360 <event_handler>:
{
   1e360:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1e362:	7803      	ldrb	r3, [r0, #0]
{
   1e364:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1e366:	2b00      	cmp	r3, #0
   1e368:	d14e      	bne.n	1e408 <event_handler+0xa8>
	if (!ctx->tx_len) {
   1e36a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1e36c:	b163      	cbz	r3, 1e388 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e36e:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1e370:	429a      	cmp	r2, r3
   1e372:	d91d      	bls.n	1e3b0 <event_handler+0x50>
   1e374:	4925      	ldr	r1, [pc, #148]	; (1e40c <event_handler+0xac>)
   1e376:	4b26      	ldr	r3, [pc, #152]	; (1e410 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1e378:	4826      	ldr	r0, [pc, #152]	; (1e414 <event_handler+0xb4>)
   1e37a:	1ac9      	subs	r1, r1, r3
   1e37c:	08c9      	lsrs	r1, r1, #3
   1e37e:	0189      	lsls	r1, r1, #6
   1e380:	f041 0101 	orr.w	r1, r1, #1
   1e384:	f010 f834 	bl	2e3f0 <log_0>
	if (!ctx->rx_len) {
   1e388:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1e38a:	b163      	cbz	r3, 1e3a6 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1e38c:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1e38e:	429a      	cmp	r2, r3
   1e390:	d924      	bls.n	1e3dc <event_handler+0x7c>
   1e392:	491e      	ldr	r1, [pc, #120]	; (1e40c <event_handler+0xac>)
   1e394:	4b1e      	ldr	r3, [pc, #120]	; (1e410 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1e396:	481f      	ldr	r0, [pc, #124]	; (1e414 <event_handler+0xb4>)
   1e398:	1ac9      	subs	r1, r1, r3
   1e39a:	08c9      	lsrs	r1, r1, #3
   1e39c:	0189      	lsls	r1, r1, #6
   1e39e:	f041 0101 	orr.w	r1, r1, #1
   1e3a2:	f010 f825 	bl	2e3f0 <log_0>
		transfer_next_chunk(dev_data->dev);
   1e3a6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1e3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1e3ac:	f7ff bdb8 	b.w	1df20 <transfer_next_chunk>
	ctx->tx_len -= len;
   1e3b0:	1a9b      	subs	r3, r3, r2
   1e3b2:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1e3b4:	b963      	cbnz	r3, 1e3d0 <event_handler+0x70>
		ctx->tx_count--;
   1e3b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1e3b8:	3b01      	subs	r3, #1
   1e3ba:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1e3bc:	b163      	cbz	r3, 1e3d8 <event_handler+0x78>
			ctx->current_tx++;
   1e3be:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1e3c0:	f103 0208 	add.w	r2, r3, #8
   1e3c4:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1e3c6:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1e3c8:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1e3ca:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1e3cc:	650b      	str	r3, [r1, #80]	; 0x50
   1e3ce:	e7db      	b.n	1e388 <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1e3d0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1e3d2:	2b00      	cmp	r3, #0
   1e3d4:	d0d8      	beq.n	1e388 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1e3d6:	4413      	add	r3, r2
   1e3d8:	64e3      	str	r3, [r4, #76]	; 0x4c
   1e3da:	e7d5      	b.n	1e388 <event_handler+0x28>
	ctx->rx_len -= len;
   1e3dc:	1a9b      	subs	r3, r3, r2
   1e3de:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1e3e0:	b963      	cbnz	r3, 1e3fc <event_handler+0x9c>
		ctx->rx_count--;
   1e3e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e3e4:	3b01      	subs	r3, #1
   1e3e6:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1e3e8:	b163      	cbz	r3, 1e404 <event_handler+0xa4>
			ctx->current_rx++;
   1e3ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e3ec:	f103 0208 	add.w	r2, r3, #8
   1e3f0:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e3f2:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1e3f4:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e3f6:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1e3f8:	65a3      	str	r3, [r4, #88]	; 0x58
   1e3fa:	e7d4      	b.n	1e3a6 <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1e3fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1e3fe:	2b00      	cmp	r3, #0
   1e400:	d0d1      	beq.n	1e3a6 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1e402:	4413      	add	r3, r2
   1e404:	6563      	str	r3, [r4, #84]	; 0x54
   1e406:	e7ce      	b.n	1e3a6 <event_handler+0x46>
}
   1e408:	bd10      	pop	{r4, pc}
   1e40a:	bf00      	nop
   1e40c:	000365e8 	.word	0x000365e8
   1e410:	000364b0 	.word	0x000364b0
   1e414:	0003ad02 	.word	0x0003ad02

0001e418 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e418:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e41a:	794b      	ldrb	r3, [r1, #5]
   1e41c:	2b01      	cmp	r3, #1
   1e41e:	d02a      	beq.n	1e476 <uarte_nrfx_configure+0x5e>
   1e420:	2b03      	cmp	r3, #3
   1e422:	d125      	bne.n	1e470 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e424:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e426:	798b      	ldrb	r3, [r1, #6]
   1e428:	2b03      	cmp	r3, #3
   1e42a:	d121      	bne.n	1e470 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e42c:	79cc      	ldrb	r4, [r1, #7]
   1e42e:	b12c      	cbz	r4, 1e43c <uarte_nrfx_configure+0x24>
   1e430:	2c01      	cmp	r4, #1
   1e432:	d11d      	bne.n	1e470 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   1e434:	6843      	ldr	r3, [r0, #4]
   1e436:	685b      	ldr	r3, [r3, #4]
   1e438:	079b      	lsls	r3, r3, #30
   1e43a:	d019      	beq.n	1e470 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e43c:	790a      	ldrb	r2, [r1, #4]
   1e43e:	b112      	cbz	r2, 1e446 <uarte_nrfx_configure+0x2e>
   1e440:	2a02      	cmp	r2, #2
   1e442:	d115      	bne.n	1e470 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e444:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e446:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e448:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e44a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e44e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e450:	d065      	beq.n	1e51e <uarte_nrfx_configure+0x106>
   1e452:	d82d      	bhi.n	1e4b0 <uarte_nrfx_configure+0x98>
   1e454:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e458:	d064      	beq.n	1e524 <uarte_nrfx_configure+0x10c>
   1e45a:	d816      	bhi.n	1e48a <uarte_nrfx_configure+0x72>
   1e45c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e460:	d062      	beq.n	1e528 <uarte_nrfx_configure+0x110>
   1e462:	d80a      	bhi.n	1e47a <uarte_nrfx_configure+0x62>
   1e464:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e468:	d061      	beq.n	1e52e <uarte_nrfx_configure+0x116>
   1e46a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e46e:	d061      	beq.n	1e534 <uarte_nrfx_configure+0x11c>
   1e470:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e474:	e052      	b.n	1e51c <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   1e476:	2600      	movs	r6, #0
   1e478:	e7d5      	b.n	1e426 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e47a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e47e:	d05c      	beq.n	1e53a <uarte_nrfx_configure+0x122>
   1e480:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e484:	d1f4      	bne.n	1e470 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e486:	4b37      	ldr	r3, [pc, #220]	; (1e564 <uarte_nrfx_configure+0x14c>)
   1e488:	e03c      	b.n	1e504 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e48a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e48e:	d057      	beq.n	1e540 <uarte_nrfx_configure+0x128>
   1e490:	d807      	bhi.n	1e4a2 <uarte_nrfx_configure+0x8a>
   1e492:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e496:	d055      	beq.n	1e544 <uarte_nrfx_configure+0x12c>
   1e498:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e49c:	d1e8      	bne.n	1e470 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e49e:	4b32      	ldr	r3, [pc, #200]	; (1e568 <uarte_nrfx_configure+0x150>)
   1e4a0:	e030      	b.n	1e504 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e4a2:	f647 2712 	movw	r7, #31250	; 0x7a12
   1e4a6:	42bb      	cmp	r3, r7
   1e4a8:	d1e2      	bne.n	1e470 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e4aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e4ae:	e029      	b.n	1e504 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e4b0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e4b4:	d048      	beq.n	1e548 <uarte_nrfx_configure+0x130>
   1e4b6:	d813      	bhi.n	1e4e0 <uarte_nrfx_configure+0xc8>
   1e4b8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e4bc:	d047      	beq.n	1e54e <uarte_nrfx_configure+0x136>
   1e4be:	d809      	bhi.n	1e4d4 <uarte_nrfx_configure+0xbc>
   1e4c0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1e4c4:	42bb      	cmp	r3, r7
   1e4c6:	d044      	beq.n	1e552 <uarte_nrfx_configure+0x13a>
   1e4c8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e4cc:	d1d0      	bne.n	1e470 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e4ce:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e4d2:	e017      	b.n	1e504 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e4d4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e4d8:	d1ca      	bne.n	1e470 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e4da:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e4de:	e011      	b.n	1e504 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e4e0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e4e4:	d038      	beq.n	1e558 <uarte_nrfx_configure+0x140>
   1e4e6:	d808      	bhi.n	1e4fa <uarte_nrfx_configure+0xe2>
   1e4e8:	4f20      	ldr	r7, [pc, #128]	; (1e56c <uarte_nrfx_configure+0x154>)
   1e4ea:	42bb      	cmp	r3, r7
   1e4ec:	d037      	beq.n	1e55e <uarte_nrfx_configure+0x146>
   1e4ee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e4f2:	d1bd      	bne.n	1e470 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e4f4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e4f8:	e004      	b.n	1e504 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e4fa:	4f1d      	ldr	r7, [pc, #116]	; (1e570 <uarte_nrfx_configure+0x158>)
   1e4fc:	42bb      	cmp	r3, r7
   1e4fe:	d1b7      	bne.n	1e470 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e500:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e504:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1e508:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   1e50a:	4334      	orrs	r4, r6
   1e50c:	4322      	orrs	r2, r4
   1e50e:	3304      	adds	r3, #4
   1e510:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e512:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e516:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e51a:	2000      	movs	r0, #0
}
   1e51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e51e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e522:	e7ef      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e524:	4b13      	ldr	r3, [pc, #76]	; (1e574 <uarte_nrfx_configure+0x15c>)
   1e526:	e7ed      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e528:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e52c:	e7ea      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   1e52e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e532:	e7e7      	b.n	1e504 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1e534:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e538:	e7e4      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e53a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e53e:	e7e1      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e540:	4b0d      	ldr	r3, [pc, #52]	; (1e578 <uarte_nrfx_configure+0x160>)
   1e542:	e7df      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e544:	4b0d      	ldr	r3, [pc, #52]	; (1e57c <uarte_nrfx_configure+0x164>)
   1e546:	e7dd      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e548:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e54c:	e7da      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e54e:	4b0c      	ldr	r3, [pc, #48]	; (1e580 <uarte_nrfx_configure+0x168>)
   1e550:	e7d8      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e552:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e556:	e7d5      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e558:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e55c:	e7d2      	b.n	1e504 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e55e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e562:	e7cf      	b.n	1e504 <uarte_nrfx_configure+0xec>
   1e564:	0013b000 	.word	0x0013b000
   1e568:	004ea000 	.word	0x004ea000
   1e56c:	0003d090 	.word	0x0003d090
   1e570:	000f4240 	.word	0x000f4240
   1e574:	00275000 	.word	0x00275000
   1e578:	0075c000 	.word	0x0075c000
   1e57c:	003af000 	.word	0x003af000
   1e580:	013a9000 	.word	0x013a9000

0001e584 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e584:	6803      	ldr	r3, [r0, #0]
{
   1e586:	b510      	push	{r4, lr}
    switch (port)
   1e588:	095a      	lsrs	r2, r3, #5
   1e58a:	bf0c      	ite	eq
   1e58c:	f04f 32ff 	moveq.w	r2, #4294967295
   1e590:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1e592:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e596:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e59a:	07db      	lsls	r3, r3, #31
{
   1e59c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e59e:	d40b      	bmi.n	1e5b8 <nrf_gpio_pin_port_decode+0x34>
   1e5a0:	490f      	ldr	r1, [pc, #60]	; (1e5e0 <nrf_gpio_pin_port_decode+0x5c>)
   1e5a2:	4810      	ldr	r0, [pc, #64]	; (1e5e4 <nrf_gpio_pin_port_decode+0x60>)
   1e5a4:	f44f 7305 	mov.w	r3, #532	; 0x214
   1e5a8:	4a0f      	ldr	r2, [pc, #60]	; (1e5e8 <nrf_gpio_pin_port_decode+0x64>)
   1e5aa:	f00f fbed 	bl	2dd88 <printk>
   1e5ae:	f44f 7105 	mov.w	r1, #532	; 0x214
   1e5b2:	480d      	ldr	r0, [pc, #52]	; (1e5e8 <nrf_gpio_pin_port_decode+0x64>)
   1e5b4:	f00f fece 	bl	2e354 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1e5b8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1e5ba:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e5be:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1e5c0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e5c2:	d00b      	beq.n	1e5dc <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   1e5c4:	4909      	ldr	r1, [pc, #36]	; (1e5ec <nrf_gpio_pin_port_decode+0x68>)
   1e5c6:	4807      	ldr	r0, [pc, #28]	; (1e5e4 <nrf_gpio_pin_port_decode+0x60>)
   1e5c8:	f240 2319 	movw	r3, #537	; 0x219
   1e5cc:	4a06      	ldr	r2, [pc, #24]	; (1e5e8 <nrf_gpio_pin_port_decode+0x64>)
   1e5ce:	f00f fbdb 	bl	2dd88 <printk>
   1e5d2:	f240 2119 	movw	r1, #537	; 0x219
   1e5d6:	4804      	ldr	r0, [pc, #16]	; (1e5e8 <nrf_gpio_pin_port_decode+0x64>)
   1e5d8:	f00f febc 	bl	2e354 <assert_post_action>
}
   1e5dc:	4804      	ldr	r0, [pc, #16]	; (1e5f0 <nrf_gpio_pin_port_decode+0x6c>)
   1e5de:	bd10      	pop	{r4, pc}
   1e5e0:	0003a9df 	.word	0x0003a9df
   1e5e4:	00037f2c 	.word	0x00037f2c
   1e5e8:	0003a9ac 	.word	0x0003a9ac
   1e5ec:	0003e845 	.word	0x0003e845
   1e5f0:	40842500 	.word	0x40842500

0001e5f4 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1e5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e5f8:	4614      	mov	r4, r2
	return config->uarte_regs;
   1e5fa:	6842      	ldr	r2, [r0, #4]
{
   1e5fc:	4605      	mov	r5, r0
	return config->uarte_regs;
   1e5fe:	6817      	ldr	r7, [r2, #0]
{
   1e600:	4688      	mov	r8, r1
    return p_reg->PSEL.RXD;
   1e602:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e606:	f8d0 9010 	ldr.w	r9, [r0, #16]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   1e60a:	3201      	adds	r2, #1
   1e60c:	d112      	bne.n	1e634 <uarte_nrfx_rx_enable+0x40>
		__ASSERT(false, "TX only UARTE instance");
   1e60e:	f240 3323 	movw	r3, #803	; 0x323
   1e612:	4a3a      	ldr	r2, [pc, #232]	; (1e6fc <uarte_nrfx_rx_enable+0x108>)
   1e614:	493a      	ldr	r1, [pc, #232]	; (1e700 <uarte_nrfx_rx_enable+0x10c>)
   1e616:	483b      	ldr	r0, [pc, #236]	; (1e704 <uarte_nrfx_rx_enable+0x110>)
   1e618:	f00f fbb6 	bl	2dd88 <printk>
   1e61c:	483a      	ldr	r0, [pc, #232]	; (1e708 <uarte_nrfx_rx_enable+0x114>)
   1e61e:	f00f fbb3 	bl	2dd88 <printk>
   1e622:	4836      	ldr	r0, [pc, #216]	; (1e6fc <uarte_nrfx_rx_enable+0x108>)
   1e624:	f240 3123 	movw	r1, #803	; 0x323
   1e628:	f00f fe94 	bl	2e354 <assert_post_action>
		return -ENOTSUP;
   1e62c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   1e630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		MAX(timeout / RX_TIMEOUT_DIV,
   1e634:	2b09      	cmp	r3, #9
   1e636:	bfc8      	it	gt
   1e638:	2205      	movgt	r2, #5
	data->async->rx_timeout = timeout;
   1e63a:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1e63e:	66cb      	str	r3, [r1, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   1e640:	bfcc      	ite	gt
   1e642:	fb93 f3f2 	sdivgt	r3, r3, r2
   1e646:	2301      	movle	r3, #1
	data->async->rx_timeout_slab =
   1e648:	670b      	str	r3, [r1, #112]	; 0x70
	data->async->rx_offset = 0;
   1e64a:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   1e64c:	e9c1 8414 	strd	r8, r4, [r1, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   1e650:	e9c1 3316 	strd	r3, r3, [r1, #88]	; 0x58
	data->async->rx_next_buf_len = 0;
   1e654:	660b      	str	r3, [r1, #96]	; 0x60
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e656:	6843      	ldr	r3, [r0, #4]
   1e658:	685b      	ldr	r3, [r3, #4]
   1e65a:	06da      	lsls	r2, r3, #27
   1e65c:	d524      	bpl.n	1e6a8 <uarte_nrfx_rx_enable+0xb4>
		if (data->async->rx_flush_cnt) {
   1e65e:	f891 60c1 	ldrb.w	r6, [r1, #193]	; 0xc1
   1e662:	b30e      	cbz	r6, 1e6a8 <uarte_nrfx_rx_enable+0xb4>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1e664:	42a6      	cmp	r6, r4
   1e666:	bf28      	it	cs
   1e668:	4626      	movcs	r6, r4
   1e66a:	4640      	mov	r0, r8
   1e66c:	4632      	mov	r2, r6
   1e66e:	31bc      	adds	r1, #188	; 0xbc
   1e670:	f016 ff89 	bl	35586 <memcpy>
			if (!len) {
   1e674:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   1e676:	44b0      	add	r8, r6
			if (!len) {
   1e678:	d116      	bne.n	1e6a8 <uarte_nrfx_rx_enable+0xb4>
				data->async->rx_flush_cnt -= cpy_len;
   1e67a:	f8d9 2010 	ldr.w	r2, [r9, #16]
				notify_uart_rx_rdy(dev, cpy_len);
   1e67e:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1e680:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   1e684:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1e686:	1b9b      	subs	r3, r3, r6
   1e688:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   1e68c:	f014 f80f 	bl	326ae <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   1e690:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1e694:	4628      	mov	r0, r5
   1e696:	2201      	movs	r2, #1
   1e698:	3150      	adds	r1, #80	; 0x50
   1e69a:	f014 f821 	bl	326e0 <notify_rx_buf_release>
				notify_rx_disable(dev);
   1e69e:	4628      	mov	r0, r5
   1e6a0:	f014 f838 	bl	32714 <notify_rx_disable>
	return 0;
   1e6a4:	2000      	movs	r0, #0
   1e6a6:	e7c3      	b.n	1e630 <uarte_nrfx_rx_enable+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6a8:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e6aa:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e6ae:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   1e6b6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
	data->async->rx_enabled = true;
   1e6ba:	2201      	movs	r2, #1
   1e6bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   1e6c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1e6c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1e6c8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e6cc:	686b      	ldr	r3, [r5, #4]
   1e6ce:	685b      	ldr	r3, [r3, #4]
   1e6d0:	06db      	lsls	r3, r3, #27
   1e6d2:	d50f      	bpl.n	1e6f4 <uarte_nrfx_rx_enable+0x100>
	__asm__ volatile(
   1e6d4:	f04f 0320 	mov.w	r3, #32
   1e6d8:	f3ef 8411 	mrs	r4, BASEPRI
   1e6dc:	f383 8811 	msr	BASEPRI, r3
   1e6e0:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   1e6e4:	2102      	movs	r1, #2
   1e6e6:	4628      	mov	r0, r5
   1e6e8:	f014 f8df 	bl	328aa <uarte_enable>
	__asm__ volatile(
   1e6ec:	f384 8811 	msr	BASEPRI, r4
   1e6f0:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e6f4:	2301      	movs	r3, #1
   1e6f6:	603b      	str	r3, [r7, #0]
   1e6f8:	e7d4      	b.n	1e6a4 <uarte_nrfx_rx_enable+0xb0>
   1e6fa:	bf00      	nop
   1e6fc:	0003ad34 	.word	0x0003ad34
   1e700:	0003e845 	.word	0x0003e845
   1e704:	00037f2c 	.word	0x00037f2c
   1e708:	0003ad68 	.word	0x0003ad68

0001e70c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1e70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e70e:	4604      	mov	r4, r0
   1e710:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e712:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e714:	f016 fd7d 	bl	35212 <k_is_in_isr>
   1e718:	b910      	cbnz	r0, 1e720 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1e71a:	4b28      	ldr	r3, [pc, #160]	; (1e7bc <uarte_nrfx_poll_out+0xb0>)
	int key;

	if (isr_mode) {
   1e71c:	781b      	ldrb	r3, [r3, #0]
   1e71e:	bb5b      	cbnz	r3, 1e778 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1e720:	f04f 0320 	mov.w	r3, #32
   1e724:	f3ef 8111 	mrs	r1, BASEPRI
   1e728:	f383 8811 	msr	BASEPRI, r3
   1e72c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1e730:	4620      	mov	r0, r4
			key = irq_lock();
   1e732:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   1e734:	f013 ffa3 	bl	3267e <is_tx_ready>
   1e738:	b1c8      	cbz	r0, 1e76e <uarte_nrfx_poll_out+0x62>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
   1e73a:	6933      	ldr	r3, [r6, #16]
   1e73c:	b15b      	cbz	r3, 1e756 <uarte_nrfx_poll_out+0x4a>
   1e73e:	68da      	ldr	r2, [r3, #12]
   1e740:	b14a      	cbz	r2, 1e756 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   1e742:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async && data->async->tx_size &&
   1e746:	2a00      	cmp	r2, #0
   1e748:	da05      	bge.n	1e756 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   1e74a:	6862      	ldr	r2, [r4, #4]
   1e74c:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   1e74e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1e752:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1e756:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1e758:	2201      	movs	r2, #1
   1e75a:	4620      	mov	r0, r4
	data->char_out = c;
   1e75c:	f801 7f18 	strb.w	r7, [r1, #24]!
	tx_start(dev, &data->char_out, 1);
   1e760:	f014 f8c8 	bl	328f4 <tx_start>
	__asm__ volatile(
   1e764:	f385 8811 	msr	BASEPRI, r5
   1e768:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1e76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e76e:	f381 8811 	msr	BASEPRI, r1
   1e772:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1e776:	e7d3      	b.n	1e720 <uarte_nrfx_poll_out+0x14>
{
   1e778:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e77a:	4620      	mov	r0, r4
   1e77c:	f013 ff7f 	bl	3267e <is_tx_ready>
   1e780:	b948      	cbnz	r0, 1e796 <uarte_nrfx_poll_out+0x8a>
   1e782:	2001      	movs	r0, #1
   1e784:	f015 fa1c 	bl	33bc0 <nrfx_busy_wait>
   1e788:	3d01      	subs	r5, #1
   1e78a:	d1f6      	bne.n	1e77a <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   1e78c:	2100      	movs	r1, #0
   1e78e:	2021      	movs	r0, #33	; 0x21
   1e790:	f00c ffa6 	bl	2b6e0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e794:	e7f0      	b.n	1e778 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1e796:	f04f 0320 	mov.w	r3, #32
   1e79a:	f3ef 8511 	mrs	r5, BASEPRI
   1e79e:	f383 8811 	msr	BASEPRI, r3
   1e7a2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e7a6:	4620      	mov	r0, r4
   1e7a8:	f013 ff69 	bl	3267e <is_tx_ready>
   1e7ac:	2800      	cmp	r0, #0
   1e7ae:	d1d2      	bne.n	1e756 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1e7b0:	f385 8811 	msr	BASEPRI, r5
   1e7b4:	f3bf 8f6f 	isb	sy
}
   1e7b8:	e7e8      	b.n	1e78c <uarte_nrfx_poll_out+0x80>
   1e7ba:	bf00      	nop
   1e7bc:	2001e74c 	.word	0x2001e74c

0001e7c0 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1e7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e7c4:	2700      	movs	r7, #0
	return config->uarte_regs;
   1e7c6:	6843      	ldr	r3, [r0, #4]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e7c8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return config->uarte_regs;
   1e7cc:	681c      	ldr	r4, [r3, #0]
   1e7ce:	680b      	ldr	r3, [r1, #0]
   1e7d0:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   1e7d4:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1e7d6:	f8c8 0000 	str.w	r0, [r8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e7da:	4668      	mov	r0, sp
static int uarte_instance_init(const struct device *dev,
   1e7dc:	460d      	mov	r5, r1
   1e7de:	9300      	str	r3, [sp, #0]
   1e7e0:	f7ff fed0 	bl	1e584 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e7e4:	2301      	movs	r3, #1
   1e7e6:	9a00      	ldr	r2, [sp, #0]
   1e7e8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e7ea:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   1e7ec:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e7ee:	4668      	mov	r0, sp
   1e7f0:	9300      	str	r3, [sp, #0]
   1e7f2:	f7ff fec7 	bl	1e584 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e7f6:	2203      	movs	r2, #3
   1e7f8:	9b00      	ldr	r3, [sp, #0]
   1e7fa:	3380      	adds	r3, #128	; 0x80
   1e7fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1e800:	686b      	ldr	r3, [r5, #4]
   1e802:	1c59      	adds	r1, r3, #1
   1e804:	d007      	beq.n	1e816 <uarte_instance_init.isra.0+0x56>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e806:	4668      	mov	r0, sp
   1e808:	9300      	str	r3, [sp, #0]
   1e80a:	f7ff febb 	bl	1e584 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e80e:	9b00      	ldr	r3, [sp, #0]
   1e810:	3380      	adds	r3, #128	; 0x80
   1e812:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1e816:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   1e81a:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1e81e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e822:	68ab      	ldr	r3, [r5, #8]
   1e824:	1c5a      	adds	r2, r3, #1
   1e826:	d008      	beq.n	1e83a <uarte_instance_init.isra.0+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e828:	4668      	mov	r0, sp
   1e82a:	9300      	str	r3, [sp, #0]
   1e82c:	f7ff feaa 	bl	1e584 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e830:	2200      	movs	r2, #0
   1e832:	9b00      	ldr	r3, [sp, #0]
   1e834:	3380      	adds	r3, #128	; 0x80
   1e836:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e83a:	68eb      	ldr	r3, [r5, #12]
   1e83c:	1c5f      	adds	r7, r3, #1
   1e83e:	d011      	beq.n	1e864 <uarte_instance_init.isra.0+0xa4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e840:	4668      	mov	r0, sp
   1e842:	9300      	str	r3, [sp, #0]
   1e844:	f7ff fe9e 	bl	1e584 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e848:	2301      	movs	r3, #1
   1e84a:	9a00      	ldr	r2, [sp, #0]
   1e84c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e84e:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   1e850:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e852:	4668      	mov	r0, sp
   1e854:	9300      	str	r3, [sp, #0]
   1e856:	f7ff fe95 	bl	1e584 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e85a:	2203      	movs	r2, #3
   1e85c:	9b00      	ldr	r3, [sp, #0]
   1e85e:	3380      	adds	r3, #128	; 0x80
   1e860:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e864:	6931      	ldr	r1, [r6, #16]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1e866:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e86a:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   1e86c:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1e870:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1e872:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1e876:	f7ff fdcf 	bl	1e418 <uarte_nrfx_configure>
	if (err) {
   1e87a:	4681      	mov	r9, r0
   1e87c:	2800      	cmp	r0, #0
   1e87e:	f040 80f2 	bne.w	1ea66 <uarte_instance_init.isra.0+0x2a6>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e882:	6873      	ldr	r3, [r6, #4]
   1e884:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e886:	0718      	lsls	r0, r3, #28
   1e888:	d540      	bpl.n	1e90c <uarte_instance_init.isra.0+0x14c>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e88a:	f108 001a 	add.w	r0, r8, #26
   1e88e:	f004 fed3 	bl	23638 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e892:	4b86      	ldr	r3, [pc, #536]	; (1eaac <uarte_instance_init.isra.0+0x2ec>)
   1e894:	4298      	cmp	r0, r3
   1e896:	d00c      	beq.n	1e8b2 <uarte_instance_init.isra.0+0xf2>
   1e898:	4985      	ldr	r1, [pc, #532]	; (1eab0 <uarte_instance_init.isra.0+0x2f0>)
   1e89a:	4b86      	ldr	r3, [pc, #536]	; (1eab4 <uarte_instance_init.isra.0+0x2f4>)
		LOG_ERR("Failed to allocate PPI Channel");
   1e89c:	4886      	ldr	r0, [pc, #536]	; (1eab8 <uarte_instance_init.isra.0+0x2f8>)
   1e89e:	1ac9      	subs	r1, r1, r3
   1e8a0:	08c9      	lsrs	r1, r1, #3
   1e8a2:	0189      	lsls	r1, r1, #6
   1e8a4:	f041 0101 	orr.w	r1, r1, #1
   1e8a8:	f00f fda2 	bl	2e3f0 <log_0>
		err = endtx_stoptx_ppi_init(uarte, data);
		if (err < 0) {
   1e8ac:	f06f 0904 	mvn.w	r9, #4
   1e8b0:	e0d9      	b.n	1ea66 <uarte_instance_init.isra.0+0x2a6>
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   1e8b2:	f514 7a90 	adds.w	sl, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e8b6:	f898 701a 	ldrb.w	r7, [r8, #26]
   1e8ba:	d10b      	bne.n	1e8d4 <uarte_instance_init.isra.0+0x114>
   1e8bc:	497f      	ldr	r1, [pc, #508]	; (1eabc <uarte_instance_init.isra.0+0x2fc>)
   1e8be:	4880      	ldr	r0, [pc, #512]	; (1eac0 <uarte_instance_init.isra.0+0x300>)
   1e8c0:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   1e8c4:	4a7f      	ldr	r2, [pc, #508]	; (1eac4 <uarte_instance_init.isra.0+0x304>)
   1e8c6:	f00f fa5f 	bl	2dd88 <printk>
   1e8ca:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   1e8ce:	487d      	ldr	r0, [pc, #500]	; (1eac4 <uarte_instance_init.isra.0+0x304>)
   1e8d0:	f00f fd40 	bl	2e354 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1e8d4:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   1e8d8:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1e8dc:	f8ca 7080 	str.w	r7, [sl, #128]	; 0x80
    NRFX_ASSERT(tep);
   1e8e0:	d10b      	bne.n	1e8fa <uarte_instance_init.isra.0+0x13a>
   1e8e2:	4979      	ldr	r1, [pc, #484]	; (1eac8 <uarte_instance_init.isra.0+0x308>)
   1e8e4:	4876      	ldr	r0, [pc, #472]	; (1eac0 <uarte_instance_init.isra.0+0x300>)
   1e8e6:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   1e8ea:	4a76      	ldr	r2, [pc, #472]	; (1eac4 <uarte_instance_init.isra.0+0x304>)
   1e8ec:	f00f fa4c 	bl	2dd88 <printk>
   1e8f0:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1e8f4:	4873      	ldr	r0, [pc, #460]	; (1eac4 <uarte_instance_init.isra.0+0x304>)
   1e8f6:	f00f fd2d 	bl	2e354 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e8fa:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1e8fc:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
   1e900:	f898 201a 	ldrb.w	r2, [r8, #26]
   1e904:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1e906:	4a71      	ldr	r2, [pc, #452]	; (1eacc <uarte_instance_init.isra.0+0x30c>)
   1e908:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   1e90c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1e910:	2b00      	cmp	r3, #0
   1e912:	f000 80b7 	beq.w	1ea84 <uarte_instance_init.isra.0+0x2c4>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e916:	6937      	ldr	r7, [r6, #16]
   1e918:	f8d6 a004 	ldr.w	sl, [r6, #4]
		return data->async->hw_rx_counting;
   1e91c:	693b      	ldr	r3, [r7, #16]
	return config->uarte_regs;
   1e91e:	f8da 5000 	ldr.w	r5, [sl]
	if (hw_rx_counting_enabled(data)) {
   1e922:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   1e926:	b1eb      	cbz	r3, 1e964 <uarte_instance_init.isra.0+0x1a4>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1e928:	2300      	movs	r3, #0
   1e92a:	4969      	ldr	r1, [pc, #420]	; (1ead0 <uarte_instance_init.isra.0+0x310>)
		ret = nrfx_timer_init(&cfg->timer,
   1e92c:	f10a 0b08 	add.w	fp, sl, #8
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1e930:	e9cd 1300 	strd	r1, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   1e934:	4a67      	ldr	r2, [pc, #412]	; (1ead4 <uarte_instance_init.isra.0+0x314>)
   1e936:	4669      	mov	r1, sp
   1e938:	4658      	mov	r0, fp
   1e93a:	f005 fa35 	bl	23da8 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   1e93e:	4a5b      	ldr	r2, [pc, #364]	; (1eaac <uarte_instance_init.isra.0+0x2ec>)
   1e940:	4290      	cmp	r0, r2
   1e942:	f000 8094 	beq.w	1ea6e <uarte_instance_init.isra.0+0x2ae>
   1e946:	4b5b      	ldr	r3, [pc, #364]	; (1eab4 <uarte_instance_init.isra.0+0x2f4>)
   1e948:	4959      	ldr	r1, [pc, #356]	; (1eab0 <uarte_instance_init.isra.0+0x2f0>)
			LOG_ERR("Timer already initialized, "
   1e94a:	4863      	ldr	r0, [pc, #396]	; (1ead8 <uarte_instance_init.isra.0+0x318>)
   1e94c:	1ac9      	subs	r1, r1, r3
   1e94e:	08c9      	lsrs	r1, r1, #3
   1e950:	0189      	lsls	r1, r1, #6
   1e952:	f041 0101 	orr.w	r1, r1, #1
   1e956:	f00f fd4b 	bl	2e3f0 <log_0>
			data->async->hw_rx_counting = false;
   1e95a:	f04f 0200 	mov.w	r2, #0
   1e95e:	693b      	ldr	r3, [r7, #16]
   1e960:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	if (hw_rx_counting_enabled(data)) {
   1e964:	6938      	ldr	r0, [r7, #16]
   1e966:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
   1e96a:	b1bb      	cbz	r3, 1e99c <uarte_instance_init.isra.0+0x1dc>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   1e96c:	30b0      	adds	r0, #176	; 0xb0
   1e96e:	f004 fe63 	bl	23638 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   1e972:	4b4e      	ldr	r3, [pc, #312]	; (1eaac <uarte_instance_init.isra.0+0x2ec>)
   1e974:	4298      	cmp	r0, r3
   1e976:	d011      	beq.n	1e99c <uarte_instance_init.isra.0+0x1dc>
   1e978:	4b4e      	ldr	r3, [pc, #312]	; (1eab4 <uarte_instance_init.isra.0+0x2f4>)
   1e97a:	494d      	ldr	r1, [pc, #308]	; (1eab0 <uarte_instance_init.isra.0+0x2f0>)
			LOG_ERR("Failed to allocate PPI Channel, "
   1e97c:	4857      	ldr	r0, [pc, #348]	; (1eadc <uarte_instance_init.isra.0+0x31c>)
   1e97e:	1ac9      	subs	r1, r1, r3
   1e980:	08c9      	lsrs	r1, r1, #3
   1e982:	0189      	lsls	r1, r1, #6
   1e984:	f041 0101 	orr.w	r1, r1, #1
   1e988:	f00f fd32 	bl	2e3f0 <log_0>
			data->async->hw_rx_counting = false;
   1e98c:	2200      	movs	r2, #0
   1e98e:	693b      	ldr	r3, [r7, #16]
			nrfx_timer_uninit(&cfg->timer);
   1e990:	f10a 0008 	add.w	r0, sl, #8
			data->async->hw_rx_counting = false;
   1e994:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
			nrfx_timer_uninit(&cfg->timer);
   1e998:	f005 fae4 	bl	23f64 <nrfx_timer_uninit>
	if (hw_rx_counting_enabled(data)) {
   1e99c:	693b      	ldr	r3, [r7, #16]
   1e99e:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
   1e9a2:	2a00      	cmp	r2, #0
   1e9a4:	d06a      	beq.n	1ea7c <uarte_instance_init.isra.0+0x2bc>
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   1e9a6:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   1e9aa:	f8da 1008 	ldr.w	r1, [sl, #8]
   1e9ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   1e9b2:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   1e9b6:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
   1e9ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   1e9be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   1e9c2:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   1e9c6:	f004 fe61 	bl	2368c <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   1e9ca:	4b38      	ldr	r3, [pc, #224]	; (1eaac <uarte_instance_init.isra.0+0x2ec>)
   1e9cc:	4298      	cmp	r0, r3
   1e9ce:	f47f af6d 	bne.w	1e8ac <uarte_instance_init.isra.0+0xec>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1e9d2:	2301      	movs	r3, #1
   1e9d4:	6938      	ldr	r0, [r7, #16]
    p_reg->INTENSET = mask;
   1e9d6:	4a42      	ldr	r2, [pc, #264]	; (1eae0 <uarte_instance_init.isra.0+0x320>)
   1e9d8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   1e9dc:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e9e0:	2208      	movs	r2, #8
   1e9e2:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e9e6:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1e9ea:	b1a2      	cbz	r2, 1ea16 <uarte_instance_init.isra.0+0x256>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9ec:	606b      	str	r3, [r5, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e9ee:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1e9f2:	b91b      	cbnz	r3, 1e9fc <uarte_instance_init.isra.0+0x23c>
   1e9f4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1e9f8:	2b00      	cmp	r3, #0
   1e9fa:	d0f8      	beq.n	1e9ee <uarte_instance_init.isra.0+0x22e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e9fc:	2300      	movs	r3, #0
   1e9fe:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   1ea02:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
   1ea06:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1ea0a:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1ea0e:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   1ea12:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1ea16:	2200      	movs	r2, #0
   1ea18:	4932      	ldr	r1, [pc, #200]	; (1eae4 <uarte_instance_init.isra.0+0x324>)
   1ea1a:	3078      	adds	r0, #120	; 0x78
   1ea1c:	f016 fd06 	bl	3542c <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1ea20:	693b      	ldr	r3, [r7, #16]
	timer->user_data = user_data;
   1ea22:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1ea26:	6938      	ldr	r0, [r7, #16]
   1ea28:	2200      	movs	r2, #0
   1ea2a:	492f      	ldr	r1, [pc, #188]	; (1eae8 <uarte_instance_init.isra.0+0x328>)
   1ea2c:	3018      	adds	r0, #24
   1ea2e:	f016 fcfd 	bl	3542c <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1ea32:	693b      	ldr	r3, [r7, #16]
   1ea34:	64df      	str	r7, [r3, #76]	; 0x4c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1ea36:	6873      	ldr	r3, [r6, #4]
   1ea38:	685b      	ldr	r3, [r3, #4]
   1ea3a:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   1ea3c:	bf5c      	itt	pl
   1ea3e:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1ea42:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ea46:	06db      	lsls	r3, r3, #27
   1ea48:	bf44      	itt	mi
   1ea4a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1ea4e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1ea52:	f108 0318 	add.w	r3, r8, #24
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ea56:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ea5a:	2300      	movs	r3, #0
   1ea5c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea60:	2301      	movs	r3, #1
   1ea62:	60a3      	str	r3, [r4, #8]
   1ea64:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1ea66:	4648      	mov	r0, r9
   1ea68:	b003      	add	sp, #12
   1ea6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nrfx_timer_enable(&cfg->timer);
   1ea6e:	4658      	mov	r0, fp
   1ea70:	f005 fa2e 	bl	23ed0 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   1ea74:	4658      	mov	r0, fp
   1ea76:	f005 fa93 	bl	23fa0 <nrfx_timer_clear>
   1ea7a:	e773      	b.n	1e964 <uarte_instance_init.isra.0+0x1a4>
    p_reg->INTENSET = mask;
   1ea7c:	2304      	movs	r3, #4
   1ea7e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (ret != 0) {
   1ea82:	e7a6      	b.n	1e9d2 <uarte_instance_init.isra.0+0x212>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ea84:	2208      	movs	r2, #8
   1ea86:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1ea8a:	686a      	ldr	r2, [r5, #4]
   1ea8c:	3201      	adds	r2, #1
   1ea8e:	d0d2      	beq.n	1ea36 <uarte_instance_init.isra.0+0x276>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea90:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ea94:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1ea98:	f108 0319 	add.w	r3, r8, #25
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ea9c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1eaa0:	2301      	movs	r3, #1
   1eaa2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eaa6:	6023      	str	r3, [r4, #0]
}
   1eaa8:	e7c5      	b.n	1ea36 <uarte_instance_init.isra.0+0x276>
   1eaaa:	bf00      	nop
   1eaac:	0bad0000 	.word	0x0bad0000
   1eab0:	000365f0 	.word	0x000365f0
   1eab4:	000364b0 	.word	0x000364b0
   1eab8:	0003ad81 	.word	0x0003ad81
   1eabc:	0003add8 	.word	0x0003add8
   1eac0:	00037f2c 	.word	0x00037f2c
   1eac4:	0003ada0 	.word	0x0003ada0
   1eac8:	0003addc 	.word	0x0003addc
   1eacc:	40017000 	.word	0x40017000
   1ead0:	07030100 	.word	0x07030100
   1ead4:	0003269f 	.word	0x0003269f
   1ead8:	0003ade0 	.word	0x0003ade0
   1eadc:	0003ae20 	.word	0x0003ae20
   1eae0:	000a0210 	.word	0x000a0210
   1eae4:	00032a65 	.word	0x00032a65
   1eae8:	00032c39 	.word	0x00032c39

0001eaec <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1eaec:	b530      	push	{r4, r5, lr}
   1eaee:	b085      	sub	sp, #20
   1eaf0:	466c      	mov	r4, sp
   1eaf2:	4605      	mov	r5, r0
   1eaf4:	4b08      	ldr	r3, [pc, #32]	; (1eb18 <uarte_0_init+0x2c>)
   1eaf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1eaf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1eafc:	2200      	movs	r2, #0
   1eafe:	2101      	movs	r1, #1
   1eb00:	2008      	movs	r0, #8
   1eb02:	f7f8 f953 	bl	16dac <z_arm_irq_priority_set>
   1eb06:	2008      	movs	r0, #8
   1eb08:	f7f8 f91e 	bl	16d48 <arch_irq_enable>
   1eb0c:	4621      	mov	r1, r4
   1eb0e:	4628      	mov	r0, r5
   1eb10:	f7ff fe56 	bl	1e7c0 <uarte_instance_init.isra.0>
   1eb14:	b005      	add	sp, #20
   1eb16:	bd30      	pop	{r4, r5, pc}
   1eb18:	0003668c 	.word	0x0003668c

0001eb1c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1eb1c:	b530      	push	{r4, r5, lr}
   1eb1e:	b085      	sub	sp, #20
   1eb20:	466c      	mov	r4, sp
   1eb22:	4605      	mov	r5, r0
   1eb24:	4b08      	ldr	r3, [pc, #32]	; (1eb48 <uarte_1_init+0x2c>)
   1eb26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1eb28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1eb2c:	2200      	movs	r2, #0
   1eb2e:	2101      	movs	r1, #1
   1eb30:	2009      	movs	r0, #9
   1eb32:	f7f8 f93b 	bl	16dac <z_arm_irq_priority_set>
   1eb36:	2009      	movs	r0, #9
   1eb38:	f7f8 f906 	bl	16d48 <arch_irq_enable>
   1eb3c:	4621      	mov	r1, r4
   1eb3e:	4628      	mov	r0, r5
   1eb40:	f7ff fe3e 	bl	1e7c0 <uarte_instance_init.isra.0>
   1eb44:	b005      	add	sp, #20
   1eb46:	bd30      	pop	{r4, r5, pc}
   1eb48:	0003669c 	.word	0x0003669c

0001eb4c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1eb4c:	6803      	ldr	r3, [r0, #0]
{
   1eb4e:	b510      	push	{r4, lr}
    switch (port)
   1eb50:	095a      	lsrs	r2, r3, #5
   1eb52:	bf0c      	ite	eq
   1eb54:	f04f 32ff 	moveq.w	r2, #4294967295
   1eb58:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1eb5a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1eb5e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1eb62:	07db      	lsls	r3, r3, #31
{
   1eb64:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1eb66:	d40b      	bmi.n	1eb80 <nrf_gpio_pin_port_decode+0x34>
   1eb68:	490f      	ldr	r1, [pc, #60]	; (1eba8 <nrf_gpio_pin_port_decode+0x5c>)
   1eb6a:	4810      	ldr	r0, [pc, #64]	; (1ebac <nrf_gpio_pin_port_decode+0x60>)
   1eb6c:	f44f 7305 	mov.w	r3, #532	; 0x214
   1eb70:	4a0f      	ldr	r2, [pc, #60]	; (1ebb0 <nrf_gpio_pin_port_decode+0x64>)
   1eb72:	f00f f909 	bl	2dd88 <printk>
   1eb76:	f44f 7105 	mov.w	r1, #532	; 0x214
   1eb7a:	480d      	ldr	r0, [pc, #52]	; (1ebb0 <nrf_gpio_pin_port_decode+0x64>)
   1eb7c:	f00f fbea 	bl	2e354 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1eb80:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1eb82:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1eb86:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1eb88:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1eb8a:	d00b      	beq.n	1eba4 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   1eb8c:	4909      	ldr	r1, [pc, #36]	; (1ebb4 <nrf_gpio_pin_port_decode+0x68>)
   1eb8e:	4807      	ldr	r0, [pc, #28]	; (1ebac <nrf_gpio_pin_port_decode+0x60>)
   1eb90:	f240 2319 	movw	r3, #537	; 0x219
   1eb94:	4a06      	ldr	r2, [pc, #24]	; (1ebb0 <nrf_gpio_pin_port_decode+0x64>)
   1eb96:	f00f f8f7 	bl	2dd88 <printk>
   1eb9a:	f240 2119 	movw	r1, #537	; 0x219
   1eb9e:	4804      	ldr	r0, [pc, #16]	; (1ebb0 <nrf_gpio_pin_port_decode+0x64>)
   1eba0:	f00f fbd8 	bl	2e354 <assert_post_action>
}
   1eba4:	4804      	ldr	r0, [pc, #16]	; (1ebb8 <nrf_gpio_pin_port_decode+0x6c>)
   1eba6:	bd10      	pop	{r4, pc}
   1eba8:	0003a9df 	.word	0x0003a9df
   1ebac:	00037f2c 	.word	0x00037f2c
   1ebb0:	0003a9ac 	.word	0x0003a9ac
   1ebb4:	0003e845 	.word	0x0003e845
   1ebb8:	40842500 	.word	0x40842500

0001ebbc <ctrl_pin_clear>:
	irq_unlock(key);
}

/* Sets pin to output and sets low state. */
static void ctrl_pin_clear(const struct lpuart_bidir_gpio *io)
{
   1ebbc:	b513      	push	{r0, r1, r4, lr}
	nrf_gpio_pin_clear(io->nrf_pin);
   1ebbe:	7c43      	ldrb	r3, [r0, #17]
{
   1ebc0:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ebc2:	a801      	add	r0, sp, #4
	nrf_gpio_pin_clear(io->nrf_pin);
   1ebc4:	9301      	str	r3, [sp, #4]
   1ebc6:	f7ff ffc1 	bl	1eb4c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ebca:	2301      	movs	r3, #1
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1ebcc:	2100      	movs	r1, #0
   1ebce:	9a01      	ldr	r2, [sp, #4]
   1ebd0:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1ebd2:	60c3      	str	r3, [r0, #12]
	nrf_gpiote_te_default(NRF_GPIOTE, io->ch);
   1ebd4:	7ca3      	ldrb	r3, [r4, #18]
   1ebd6:	4a08      	ldr	r2, [pc, #32]	; (1ebf8 <ctrl_pin_clear+0x3c>)
   1ebd8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1ebdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	nrf_gpio_cfg_output(io->nrf_pin);
   1ebe0:	7c63      	ldrb	r3, [r4, #17]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ebe2:	a801      	add	r0, sp, #4
   1ebe4:	9301      	str	r3, [sp, #4]
   1ebe6:	f7ff ffb1 	bl	1eb4c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ebea:	2203      	movs	r2, #3
   1ebec:	9b01      	ldr	r3, [sp, #4]
   1ebee:	3380      	adds	r3, #128	; 0x80
   1ebf0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   1ebf4:	b002      	add	sp, #8
   1ebf6:	bd10      	pop	{r4, pc}
   1ebf8:	40031000 	.word	0x40031000

0001ebfc <rx_hfclk_request>:

	activate_rx(data);
}

static void rx_hfclk_request(struct lpuart_data *data)
{
   1ebfc:	b570      	push	{r4, r5, r6, lr}
   1ebfe:	4604      	mov	r4, r0
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1ec00:	2000      	movs	r0, #0
   1ec02:	f7f7 f925 	bl	15e50 <z_nrf_clock_control_get_onoff>
 * @param handler a function pointer to use for notification.
 */
static inline void sys_notify_init_callback(struct sys_notify *notify,
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
   1ec06:	f114 0694 	adds.w	r6, r4, #148	; 0x94
   1ec0a:	4605      	mov	r5, r0
   1ec0c:	d10b      	bne.n	1ec26 <rx_hfclk_request+0x2a>
   1ec0e:	4914      	ldr	r1, [pc, #80]	; (1ec60 <rx_hfclk_request+0x64>)
   1ec10:	4814      	ldr	r0, [pc, #80]	; (1ec64 <rx_hfclk_request+0x68>)
   1ec12:	f44f 73a2 	mov.w	r3, #324	; 0x144
   1ec16:	4a14      	ldr	r2, [pc, #80]	; (1ec68 <rx_hfclk_request+0x6c>)
   1ec18:	f00f f8b6 	bl	2dd88 <printk>
   1ec1c:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1ec20:	4811      	ldr	r0, [pc, #68]	; (1ec68 <rx_hfclk_request+0x6c>)
   1ec22:	f00f fb97 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1ec26:	2300      	movs	r3, #0
   1ec28:	e9c6 3301 	strd	r3, r3, [r6, #4]
   1ec2c:	4b0f      	ldr	r3, [pc, #60]	; (1ec6c <rx_hfclk_request+0x70>)
	int err;

	sys_notify_init_callback(&data->rx_clk_cli.notify, rx_hfclk_callback);
	err = onoff_request(mgr, &data->rx_clk_cli);
   1ec2e:	4628      	mov	r0, r5
   1ec30:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   1ec34:	2303      	movs	r3, #3
   1ec36:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1ec3a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
   1ec3e:	f7f4 fd7f 	bl	13740 <onoff_request>
	__ASSERT_NO_MSG(err >= 0);
   1ec42:	2800      	cmp	r0, #0
   1ec44:	da0b      	bge.n	1ec5e <rx_hfclk_request+0x62>
   1ec46:	490a      	ldr	r1, [pc, #40]	; (1ec70 <rx_hfclk_request+0x74>)
   1ec48:	4806      	ldr	r0, [pc, #24]	; (1ec64 <rx_hfclk_request+0x68>)
   1ec4a:	23fb      	movs	r3, #251	; 0xfb
   1ec4c:	4a09      	ldr	r2, [pc, #36]	; (1ec74 <rx_hfclk_request+0x78>)
   1ec4e:	f00f f89b 	bl	2dd88 <printk>
}
   1ec52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	__ASSERT_NO_MSG(err >= 0);
   1ec56:	21fb      	movs	r1, #251	; 0xfb
   1ec58:	4806      	ldr	r0, [pc, #24]	; (1ec74 <rx_hfclk_request+0x78>)
   1ec5a:	f00f bb7b 	b.w	2e354 <assert_post_action>
}
   1ec5e:	bd70      	pop	{r4, r5, r6, pc}
   1ec60:	0003aea4 	.word	0x0003aea4
   1ec64:	00037f2c 	.word	0x00037f2c
   1ec68:	0003ae7c 	.word	0x0003ae7c
   1ec6c:	0001ec79 	.word	0x0001ec79
   1ec70:	00038835 	.word	0x00038835
   1ec74:	0003aeba 	.word	0x0003aeba

0001ec78 <rx_hfclk_callback>:
	__ASSERT_NO_MSG(res >= 0);
   1ec78:	2b00      	cmp	r3, #0
{
   1ec7a:	b538      	push	{r3, r4, r5, lr}
   1ec7c:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(res >= 0);
   1ec7e:	da09      	bge.n	1ec94 <rx_hfclk_callback+0x1c>
   1ec80:	491f      	ldr	r1, [pc, #124]	; (1ed00 <rx_hfclk_callback+0x88>)
   1ec82:	4820      	ldr	r0, [pc, #128]	; (1ed04 <rx_hfclk_callback+0x8c>)
   1ec84:	23ee      	movs	r3, #238	; 0xee
   1ec86:	4a20      	ldr	r2, [pc, #128]	; (1ed08 <rx_hfclk_callback+0x90>)
   1ec88:	f00f f87e 	bl	2dd88 <printk>
   1ec8c:	21ee      	movs	r1, #238	; 0xee
   1ec8e:	481e      	ldr	r0, [pc, #120]	; (1ed08 <rx_hfclk_callback+0x90>)
   1ec90:	f00f fb60 	bl	2e354 <assert_post_action>
	if (data->rx_buf == NULL) {
   1ec94:	f854 1c18 	ldr.w	r1, [r4, #-24]
   1ec98:	b959      	cbnz	r1, 1ecb2 <rx_hfclk_callback+0x3a>
   1ec9a:	4b1c      	ldr	r3, [pc, #112]	; (1ed0c <rx_hfclk_callback+0x94>)
   1ec9c:	491c      	ldr	r1, [pc, #112]	; (1ed10 <rx_hfclk_callback+0x98>)
		LOG_ERR("RX: Request before enabling RX");
   1ec9e:	481d      	ldr	r0, [pc, #116]	; (1ed14 <rx_hfclk_callback+0x9c>)
   1eca0:	1ac9      	subs	r1, r1, r3
   1eca2:	08c9      	lsrs	r1, r1, #3
   1eca4:	0189      	lsls	r1, r1, #6
   1eca6:	f041 0101 	orr.w	r1, r1, #1
}
   1ecaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("RX: Request before enabling RX");
   1ecae:	f00f bb9f 	b.w	2e3f0 <log_0>
	err = uart_rx_enable(data->uart, data->rx_buf,
   1ecb2:	f854 0c90 	ldr.w	r0, [r4, #-144]
   1ecb6:	e954 2305 	ldrd	r2, r3, [r4, #-20]
	return api->rx_enable(dev, buf, len, timeout);
   1ecba:	6885      	ldr	r5, [r0, #8]
   1ecbc:	68ed      	ldr	r5, [r5, #12]
   1ecbe:	47a8      	blx	r5
	__ASSERT(err == 0, "RX: Enabling failed (err:%d)", err);
   1ecc0:	4605      	mov	r5, r0
   1ecc2:	b168      	cbz	r0, 1ece0 <rx_hfclk_callback+0x68>
   1ecc4:	23dd      	movs	r3, #221	; 0xdd
   1ecc6:	4a10      	ldr	r2, [pc, #64]	; (1ed08 <rx_hfclk_callback+0x90>)
   1ecc8:	4913      	ldr	r1, [pc, #76]	; (1ed18 <rx_hfclk_callback+0xa0>)
   1ecca:	480e      	ldr	r0, [pc, #56]	; (1ed04 <rx_hfclk_callback+0x8c>)
   1eccc:	f00f f85c 	bl	2dd88 <printk>
   1ecd0:	4629      	mov	r1, r5
   1ecd2:	4812      	ldr	r0, [pc, #72]	; (1ed1c <rx_hfclk_callback+0xa4>)
   1ecd4:	f00f f858 	bl	2dd88 <printk>
   1ecd8:	21dd      	movs	r1, #221	; 0xdd
   1ecda:	480b      	ldr	r0, [pc, #44]	; (1ed08 <rx_hfclk_callback+0x90>)
   1ecdc:	f00f fb3a 	bl	2e354 <assert_post_action>
	ctrl_pin_clear(&data->rdy_pin);
   1ece0:	f1a4 0578 	sub.w	r5, r4, #120	; 0x78
   1ece4:	4628      	mov	r0, r5
   1ece6:	f7ff ff69 	bl	1ebbc <ctrl_pin_clear>
	ctrl_pin_set(&data->rdy_pin, false);
   1ecea:	4628      	mov	r0, r5
   1ecec:	f014 f9d6 	bl	3309c <ctrl_pin_set.constprop.0>
	data->rx_req = false;
   1ecf0:	2300      	movs	r3, #0
   1ecf2:	f804 3c03 	strb.w	r3, [r4, #-3]
	data->rx_state = RX_ACTIVE;
   1ecf6:	2303      	movs	r3, #3
   1ecf8:	f804 3c04 	strb.w	r3, [r4, #-4]
}
   1ecfc:	bd38      	pop	{r3, r4, r5, pc}
   1ecfe:	bf00      	nop
   1ed00:	0003aeee 	.word	0x0003aeee
   1ed04:	00037f2c 	.word	0x00037f2c
   1ed08:	0003aeba 	.word	0x0003aeba
   1ed0c:	000364b0 	.word	0x000364b0
   1ed10:	00036570 	.word	0x00036570
   1ed14:	0003aef7 	.word	0x0003aef7
   1ed18:	00039766 	.word	0x00039766
   1ed1c:	0003af16 	.word	0x0003af16

0001ed20 <api_poll_out>:
	return -ENOTSUP;
#endif
}

static void api_poll_out(const struct device *dev, unsigned char out_char)
{
   1ed20:	b570      	push	{r4, r5, r6, lr}
   1ed22:	4605      	mov	r5, r0
   1ed24:	460e      	mov	r6, r1
	struct lpuart_data *data = get_dev_data(dev);
   1ed26:	6904      	ldr	r4, [r0, #16]
	bool thread_ctx = !k_is_in_isr() && !k_is_pre_kernel();
   1ed28:	f016 fa73 	bl	35212 <k_is_in_isr>
   1ed2c:	b910      	cbnz	r0, 1ed34 <api_poll_out+0x14>
	return !z_sys_post_kernel;
   1ed2e:	4b12      	ldr	r3, [pc, #72]	; (1ed78 <api_poll_out+0x58>)
	int err;

	if (thread_ctx) {
   1ed30:	781b      	ldrb	r3, [r3, #0]
   1ed32:	b933      	cbnz	r3, 1ed42 <api_poll_out+0x22>
		/* in thread context pend until tx is in idle */
		while (data->tx_buf) {
			k_msleep(1);
		}
	} else if (data->tx_buf) {
   1ed34:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1ed36:	b993      	cbnz	r3, 1ed5e <api_poll_out+0x3e>
   1ed38:	e006      	b.n	1ed48 <api_poll_out+0x28>
   1ed3a:	2021      	movs	r0, #33	; 0x21
   1ed3c:	2100      	movs	r1, #0
   1ed3e:	f00c fccf 	bl	2b6e0 <z_impl_k_sleep>
		while (data->tx_buf) {
   1ed42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1ed44:	2b00      	cmp	r3, #0
   1ed46:	d1f8      	bne.n	1ed3a <api_poll_out+0x1a>
		return;
	}

	if (!atomic_cas(&data->txbyte, -1, out_char)) {
   1ed48:	f104 0168 	add.w	r1, r4, #104	; 0x68
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ed4c:	e8d1 3fef 	ldaex	r3, [r1]
   1ed50:	3301      	adds	r3, #1
   1ed52:	d103      	bne.n	1ed5c <api_poll_out+0x3c>
   1ed54:	e8c1 6fe2 	stlex	r2, r6, [r1]
   1ed58:	2a00      	cmp	r2, #0
   1ed5a:	d1f7      	bne.n	1ed4c <api_poll_out+0x2c>
   1ed5c:	d000      	beq.n	1ed60 <api_poll_out+0x40>
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
		     CONFIG_NRF_SW_LPUART_DEFAULT_TX_TIMEOUT);
	if (err < 0) {
		data->txbyte = -1;
	}
}
   1ed5e:	bd70      	pop	{r4, r5, r6, pc}
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
   1ed60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ed64:	2201      	movs	r2, #1
   1ed66:	4628      	mov	r0, r5
   1ed68:	f014 f9d9 	bl	3311e <api_tx>
	if (err < 0) {
   1ed6c:	2800      	cmp	r0, #0
		data->txbyte = -1;
   1ed6e:	bfbc      	itt	lt
   1ed70:	f04f 33ff 	movlt.w	r3, #4294967295
   1ed74:	66a3      	strlt	r3, [r4, #104]	; 0x68
   1ed76:	e7f2      	b.n	1ed5e <api_poll_out+0x3e>
   1ed78:	2001e74c 	.word	0x2001e74c

0001ed7c <uart_callback>:
{
   1ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed7e:	780b      	ldrb	r3, [r1, #0]
   1ed80:	460d      	mov	r5, r1
   1ed82:	4616      	mov	r6, r2
	struct lpuart_data *data = get_dev_data(dev);
   1ed84:	6914      	ldr	r4, [r2, #16]
	switch (evt->type) {
   1ed86:	2b06      	cmp	r3, #6
   1ed88:	d814      	bhi.n	1edb4 <uart_callback+0x38>
   1ed8a:	e8df f003 	tbb	[pc, r3]
   1ed8e:	1704      	.short	0x1704
   1ed90:	1d171417 	.word	0x1d171417
   1ed94:	17          	.byte	0x17
   1ed95:	00          	.byte	0x00
	ctrl_pin_idle(&data->req_pin);
   1ed96:	1d20      	adds	r0, r4, #4
		const uint8_t *txbuf = evt->data.tx.buf;
   1ed98:	684f      	ldr	r7, [r1, #4]
	ctrl_pin_idle(&data->req_pin);
   1ed9a:	f014 fa2a 	bl	331f2 <ctrl_pin_idle>
	data->tx_buf = NULL;
   1ed9e:	2300      	movs	r3, #0
   1eda0:	66e3      	str	r3, [r4, #108]	; 0x6c
	data->tx_active = false;
   1eda2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		if (txbuf == (void *)&data->txbyte) {
   1eda6:	f104 0368 	add.w	r3, r4, #104	; 0x68
   1edaa:	429f      	cmp	r7, r3
   1edac:	d106      	bne.n	1edbc <uart_callback+0x40>
			data->txbyte = -1;
   1edae:	f04f 33ff 	mov.w	r3, #4294967295
   1edb2:	66a3      	str	r3, [r4, #104]	; 0x68
}
   1edb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (data->rx_len < CONFIG_NRF_SW_LPUART_MAX_PACKET_SIZE) {
   1edb6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1edb8:	2b7f      	cmp	r3, #127	; 0x7f
   1edba:	d8fb      	bhi.n	1edb4 <uart_callback+0x38>
		user_callback(dev, evt);
   1edbc:	4629      	mov	r1, r5
   1edbe:	4630      	mov	r0, r6
}
   1edc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		user_callback(dev, evt);
   1edc4:	f014 b8e3 	b.w	32f8e <user_callback>
		__ASSERT_NO_MSG((data->rx_state != RX_IDLE) &&
   1edc8:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1edcc:	2b01      	cmp	r3, #1
   1edce:	d80b      	bhi.n	1ede8 <uart_callback+0x6c>
   1edd0:	490d      	ldr	r1, [pc, #52]	; (1ee08 <uart_callback+0x8c>)
   1edd2:	480e      	ldr	r0, [pc, #56]	; (1ee0c <uart_callback+0x90>)
   1edd4:	f240 13e7 	movw	r3, #487	; 0x1e7
   1edd8:	4a0d      	ldr	r2, [pc, #52]	; (1ee10 <uart_callback+0x94>)
   1edda:	f00e ffd5 	bl	2dd88 <printk>
   1edde:	f240 11e7 	movw	r1, #487	; 0x1e7
   1ede2:	480b      	ldr	r0, [pc, #44]	; (1ee10 <uart_callback+0x94>)
   1ede4:	f00f fab6 	bl	2e354 <assert_post_action>
		if (data->rx_state == RX_TO_IDLE) {
   1ede8:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1edec:	2b04      	cmp	r3, #4
			data->rx_state = RX_BLOCKED;
   1edee:	bf09      	itett	eq
   1edf0:	2305      	moveq	r3, #5
			data->rx_buf = NULL;
   1edf2:	2300      	movne	r3, #0
			data->rx_state = RX_BLOCKED;
   1edf4:	f884 308c 	strbeq.w	r3, [r4, #140]	; 0x8c
			evt->type = UART_RX_BUF_REQUEST;
   1edf8:	2303      	moveq	r3, #3
			data->rx_buf = NULL;
   1edfa:	bf16      	itet	ne
   1edfc:	67a3      	strne	r3, [r4, #120]	; 0x78
			evt->type = UART_RX_BUF_REQUEST;
   1edfe:	702b      	strbeq	r3, [r5, #0]
			data->rx_state = RX_OFF;
   1ee00:	f884 308c 	strbne.w	r3, [r4, #140]	; 0x8c
   1ee04:	e7da      	b.n	1edbc <uart_callback+0x40>
   1ee06:	bf00      	nop
   1ee08:	0003af35 	.word	0x0003af35
   1ee0c:	00037f2c 	.word	0x00037f2c
   1ee10:	0003aeba 	.word	0x0003aeba

0001ee14 <ctrl_pin_configure>:
{
   1ee14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	io->pin = cfg->pin;
   1ee18:	790b      	ldrb	r3, [r1, #4]
{
   1ee1a:	4604      	mov	r4, r0
	io->pin = cfg->pin;
   1ee1c:	7403      	strb	r3, [r0, #16]
	io->nrf_pin = cfg->nrf_pin;
   1ee1e:	794b      	ldrb	r3, [r1, #5]
{
   1ee20:	4617      	mov	r7, r2
	io->nrf_pin = cfg->nrf_pin;
   1ee22:	7443      	strb	r3, [r0, #17]
	io->req = req;
   1ee24:	74c2      	strb	r2, [r0, #19]
	io->port = device_get_binding(cfg->port_name);
   1ee26:	6808      	ldr	r0, [r1, #0]
   1ee28:	f009 fbd6 	bl	285d8 <z_impl_device_get_binding>
   1ee2c:	4605      	mov	r5, r0
   1ee2e:	60e0      	str	r0, [r4, #12]
	if (!io->port) {
   1ee30:	2800      	cmp	r0, #0
   1ee32:	f000 809b 	beq.w	1ef6c <ctrl_pin_configure+0x158>
	gpio_init_callback(&io->callback, gpio_handler, BIT(io->pin));
   1ee36:	2601      	movs	r6, #1
   1ee38:	f894 8010 	ldrb.w	r8, [r4, #16]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1ee3c:	4b4e      	ldr	r3, [pc, #312]	; (1ef78 <ctrl_pin_configure+0x164>)
   1ee3e:	fa06 f608 	lsl.w	r6, r6, r8
	callback->pin_mask = pin_mask;
   1ee42:	e9c4 3601 	strd	r3, r6, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ee46:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
   1ee48:	f8d0 a008 	ldr.w	sl, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ee4c:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   1ee4e:	f8d0 9010 	ldr.w	r9, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ee52:	421e      	tst	r6, r3
   1ee54:	d10e      	bne.n	1ee74 <ctrl_pin_configure+0x60>
   1ee56:	4949      	ldr	r1, [pc, #292]	; (1ef7c <ctrl_pin_configure+0x168>)
   1ee58:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   1ee5c:	4a48      	ldr	r2, [pc, #288]	; (1ef80 <ctrl_pin_configure+0x16c>)
   1ee5e:	4849      	ldr	r0, [pc, #292]	; (1ef84 <ctrl_pin_configure+0x170>)
   1ee60:	f00e ff92 	bl	2dd88 <printk>
   1ee64:	4848      	ldr	r0, [pc, #288]	; (1ef88 <ctrl_pin_configure+0x174>)
   1ee66:	f00e ff8f 	bl	2dd88 <printk>
   1ee6a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1ee6e:	4844      	ldr	r0, [pc, #272]	; (1ef80 <ctrl_pin_configure+0x16c>)
   1ee70:	f00f fa70 	bl	2e354 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ee74:	f8d9 3000 	ldr.w	r3, [r9]
	return api->pin_configure(port, pin, flags);
   1ee78:	f44f 7280 	mov.w	r2, #256	; 0x100
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ee7c:	ea23 0606 	bic.w	r6, r3, r6
	return api->pin_configure(port, pin, flags);
   1ee80:	4641      	mov	r1, r8
   1ee82:	4628      	mov	r0, r5
   1ee84:	f8da 3000 	ldr.w	r3, [sl]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ee88:	f8c9 6000 	str.w	r6, [r9]
	return api->pin_configure(port, pin, flags);
   1ee8c:	4798      	blx	r3
	if (err < 0) {
   1ee8e:	2800      	cmp	r0, #0
   1ee90:	db57      	blt.n	1ef42 <ctrl_pin_configure+0x12e>
	err = gpio_add_callback(io->port, &io->callback);
   1ee92:	68e0      	ldr	r0, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1ee94:	6883      	ldr	r3, [r0, #8]
   1ee96:	69db      	ldr	r3, [r3, #28]
   1ee98:	2b00      	cmp	r3, #0
   1ee9a:	d06a      	beq.n	1ef72 <ctrl_pin_configure+0x15e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1ee9c:	2201      	movs	r2, #1
   1ee9e:	4621      	mov	r1, r4
   1eea0:	4798      	blx	r3
	if (err < 0) {
   1eea2:	2800      	cmp	r0, #0
   1eea4:	db4d      	blt.n	1ef42 <ctrl_pin_configure+0x12e>
	err = gpio_pin_interrupt_configure(io->port, io->pin, req ?
   1eea6:	2f00      	cmp	r7, #0
   1eea8:	bf14      	ite	ne
   1eeaa:	f44f 3750 	movne.w	r7, #212992	; 0x34000
   1eeae:	f44f 27a8 	moveq.w	r7, #344064	; 0x54000
   1eeb2:	68e5      	ldr	r5, [r4, #12]
   1eeb4:	7c26      	ldrb	r6, [r4, #16]
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1eeb6:	f407 23c8 	and.w	r3, r7, #409600	; 0x64000
   1eeba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	const struct gpio_driver_config *const cfg =
   1eebe:	e9d5 9801 	ldrd	r9, r8, [r5, #4]
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1eec2:	d10e      	bne.n	1eee2 <ctrl_pin_configure+0xce>
   1eec4:	4931      	ldr	r1, [pc, #196]	; (1ef8c <ctrl_pin_configure+0x178>)
   1eec6:	f240 238a 	movw	r3, #650	; 0x28a
   1eeca:	4a2d      	ldr	r2, [pc, #180]	; (1ef80 <ctrl_pin_configure+0x16c>)
   1eecc:	482d      	ldr	r0, [pc, #180]	; (1ef84 <ctrl_pin_configure+0x170>)
   1eece:	f00e ff5b 	bl	2dd88 <printk>
   1eed2:	482f      	ldr	r0, [pc, #188]	; (1ef90 <ctrl_pin_configure+0x17c>)
   1eed4:	f00e ff58 	bl	2dd88 <printk>
   1eed8:	f240 218a 	movw	r1, #650	; 0x28a
   1eedc:	4828      	ldr	r0, [pc, #160]	; (1ef80 <ctrl_pin_configure+0x16c>)
   1eede:	f00f fa39 	bl	2e354 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1eee2:	2301      	movs	r3, #1
   1eee4:	f8d9 2000 	ldr.w	r2, [r9]
   1eee8:	40b3      	lsls	r3, r6
   1eeea:	4213      	tst	r3, r2
   1eeec:	d10e      	bne.n	1ef0c <ctrl_pin_configure+0xf8>
   1eeee:	4923      	ldr	r1, [pc, #140]	; (1ef7c <ctrl_pin_configure+0x168>)
   1eef0:	f44f 7324 	mov.w	r3, #656	; 0x290
   1eef4:	4a22      	ldr	r2, [pc, #136]	; (1ef80 <ctrl_pin_configure+0x16c>)
   1eef6:	4823      	ldr	r0, [pc, #140]	; (1ef84 <ctrl_pin_configure+0x170>)
   1eef8:	f00e ff46 	bl	2dd88 <printk>
   1eefc:	4822      	ldr	r0, [pc, #136]	; (1ef88 <ctrl_pin_configure+0x174>)
   1eefe:	f00e ff43 	bl	2dd88 <printk>
   1ef02:	f44f 7124 	mov.w	r1, #656	; 0x290
   1ef06:	481e      	ldr	r0, [pc, #120]	; (1ef80 <ctrl_pin_configure+0x16c>)
   1ef08:	f00f fa24 	bl	2e354 <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ef0c:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   1ef10:	4631      	mov	r1, r6
   1ef12:	4628      	mov	r0, r5
   1ef14:	f8d8 8018 	ldr.w	r8, [r8, #24]
   1ef18:	f407 23c0 	and.w	r3, r7, #393216	; 0x60000
   1ef1c:	47c0      	blx	r8
	if (err < 0) {
   1ef1e:	2800      	cmp	r0, #0
   1ef20:	db0f      	blt.n	1ef42 <ctrl_pin_configure+0x12e>
	for (i = 0; i < GPIOTE_CH_NUM; i++) {
   1ef22:	2300      	movs	r3, #0
		if (nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == io->nrf_pin) {
   1ef24:	7c61      	ldrb	r1, [r4, #17]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ef26:	481b      	ldr	r0, [pc, #108]	; (1ef94 <ctrl_pin_configure+0x180>)
   1ef28:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1ef2c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1ef30:	f3c2 2204 	ubfx	r2, r2, #8, #5
   1ef34:	428a      	cmp	r2, r1
   1ef36:	d106      	bne.n	1ef46 <ctrl_pin_configure+0x132>
			io->ch = i;
   1ef38:	74a3      	strb	r3, [r4, #18]
	ctrl_pin_idle(io);
   1ef3a:	4620      	mov	r0, r4
   1ef3c:	f014 f959 	bl	331f2 <ctrl_pin_idle>
	return 0;
   1ef40:	2000      	movs	r0, #0
}
   1ef42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < GPIOTE_CH_NUM; i++) {
   1ef46:	3301      	adds	r3, #1
   1ef48:	2b08      	cmp	r3, #8
   1ef4a:	d1ed      	bne.n	1ef28 <ctrl_pin_configure+0x114>
	__ASSERT(i < GPIOTE_CH_NUM, "Used channel not found");
   1ef4c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   1ef50:	4a11      	ldr	r2, [pc, #68]	; (1ef98 <ctrl_pin_configure+0x184>)
   1ef52:	4912      	ldr	r1, [pc, #72]	; (1ef9c <ctrl_pin_configure+0x188>)
   1ef54:	480b      	ldr	r0, [pc, #44]	; (1ef84 <ctrl_pin_configure+0x170>)
   1ef56:	f00e ff17 	bl	2dd88 <printk>
   1ef5a:	4811      	ldr	r0, [pc, #68]	; (1efa0 <ctrl_pin_configure+0x18c>)
   1ef5c:	f00e ff14 	bl	2dd88 <printk>
   1ef60:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   1ef64:	480c      	ldr	r0, [pc, #48]	; (1ef98 <ctrl_pin_configure+0x184>)
   1ef66:	f00f f9f5 	bl	2e354 <assert_post_action>
   1ef6a:	e7e6      	b.n	1ef3a <ctrl_pin_configure+0x126>
		return -ENODEV;
   1ef6c:	f06f 0012 	mvn.w	r0, #18
   1ef70:	e7e7      	b.n	1ef42 <ctrl_pin_configure+0x12e>
		return -ENOTSUP;
   1ef72:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ef76:	e7e4      	b.n	1ef42 <ctrl_pin_configure+0x12e>
   1ef78:	0001f2d5 	.word	0x0001f2d5
   1ef7c:	00039426 	.word	0x00039426
   1ef80:	000393fc 	.word	0x000393fc
   1ef84:	00037f2c 	.word	0x00037f2c
   1ef88:	00039464 	.word	0x00039464
   1ef8c:	0003af6f 	.word	0x0003af6f
   1ef90:	0003afb9 	.word	0x0003afb9
   1ef94:	40031000 	.word	0x40031000
   1ef98:	0003aeba 	.word	0x0003aeba
   1ef9c:	0003affe 	.word	0x0003affe
   1efa0:	0003b004 	.word	0x0003b004

0001efa4 <tx_timeout>:
{
   1efa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1efa6:	b087      	sub	sp, #28
	return z_impl_k_timer_user_data_get(timer);
   1efa8:	6b46      	ldr	r6, [r0, #52]	; 0x34
	struct lpuart_data *data = get_dev_data(dev);
   1efaa:	6934      	ldr	r4, [r6, #16]
	if (data->tx_active) {
   1efac:	f894 5074 	ldrb.w	r5, [r4, #116]	; 0x74
   1efb0:	b1dd      	cbz	r5, 1efea <tx_timeout+0x46>
		err = uart_tx_abort(data->uart);
   1efb2:	6820      	ldr	r0, [r4, #0]
	return api->tx_abort(dev);
   1efb4:	6883      	ldr	r3, [r0, #8]
   1efb6:	689b      	ldr	r3, [r3, #8]
   1efb8:	4798      	blx	r3
		if (err == -EFAULT) {
   1efba:	f110 0f0e 	cmn.w	r0, #14
   1efbe:	4604      	mov	r4, r0
   1efc0:	d011      	beq.n	1efe6 <tx_timeout+0x42>
		} else if (err < 0) {
   1efc2:	2800      	cmp	r0, #0
   1efc4:	da0f      	bge.n	1efe6 <tx_timeout+0x42>
			__ASSERT(0, "Unexpected tx_abort error:%d", err);
   1efc6:	f240 2307 	movw	r3, #519	; 0x207
   1efca:	4a16      	ldr	r2, [pc, #88]	; (1f024 <tx_timeout+0x80>)
   1efcc:	4916      	ldr	r1, [pc, #88]	; (1f028 <tx_timeout+0x84>)
   1efce:	4817      	ldr	r0, [pc, #92]	; (1f02c <tx_timeout+0x88>)
   1efd0:	f00e feda 	bl	2dd88 <printk>
   1efd4:	4621      	mov	r1, r4
   1efd6:	4816      	ldr	r0, [pc, #88]	; (1f030 <tx_timeout+0x8c>)
   1efd8:	f00e fed6 	bl	2dd88 <printk>
   1efdc:	f240 2107 	movw	r1, #519	; 0x207
   1efe0:	4810      	ldr	r0, [pc, #64]	; (1f024 <tx_timeout+0x80>)
   1efe2:	f00f f9b7 	bl	2e354 <assert_post_action>
}
   1efe6:	b007      	add	sp, #28
   1efe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const uint8_t *txbuf = data->tx_buf;
   1efea:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
	ctrl_pin_idle(&data->req_pin);
   1efec:	1d20      	adds	r0, r4, #4
   1efee:	f014 f900 	bl	331f2 <ctrl_pin_idle>
	if (txbuf == (void *)&data->txbyte) {
   1eff2:	f104 0368 	add.w	r3, r4, #104	; 0x68
   1eff6:	429f      	cmp	r7, r3
	data->tx_buf = NULL;
   1eff8:	66e5      	str	r5, [r4, #108]	; 0x6c
	data->tx_active = false;
   1effa:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	if (txbuf == (void *)&data->txbyte) {
   1effe:	d103      	bne.n	1f008 <tx_timeout+0x64>
		data->txbyte = -1;
   1f000:	f04f 33ff 	mov.w	r3, #4294967295
   1f004:	66a3      	str	r3, [r4, #104]	; 0x68
   1f006:	e7ee      	b.n	1efe6 <tx_timeout+0x42>
		struct uart_event evt = {
   1f008:	4629      	mov	r1, r5
   1f00a:	2214      	movs	r2, #20
   1f00c:	a801      	add	r0, sp, #4
   1f00e:	f016 fada 	bl	355c6 <memset>
   1f012:	2301      	movs	r3, #1
		user_callback(dev, &evt);
   1f014:	4630      	mov	r0, r6
   1f016:	a901      	add	r1, sp, #4
		struct uart_event evt = {
   1f018:	f88d 3004 	strb.w	r3, [sp, #4]
   1f01c:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   1f01e:	f013 ffb6 	bl	32f8e <user_callback>
   1f022:	e7e0      	b.n	1efe6 <tx_timeout+0x42>
   1f024:	0003aeba 	.word	0x0003aeba
   1f028:	0003e845 	.word	0x0003e845
   1f02c:	00037f2c 	.word	0x00037f2c
   1f030:	0003b01d 	.word	0x0003b01d

0001f034 <api_rx_enable>:
{
   1f034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lpuart_data *data = get_dev_data(dev);
   1f036:	6904      	ldr	r4, [r0, #16]
{
   1f038:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(data->rx_state == RX_OFF);
   1f03a:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
{
   1f03e:	460f      	mov	r7, r1
   1f040:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(data->rx_state == RX_OFF);
   1f042:	b15b      	cbz	r3, 1f05c <api_rx_enable+0x28>
   1f044:	4922      	ldr	r1, [pc, #136]	; (1f0d0 <api_rx_enable+0x9c>)
   1f046:	4823      	ldr	r0, [pc, #140]	; (1f0d4 <api_rx_enable+0xa0>)
   1f048:	f240 235f 	movw	r3, #607	; 0x25f
   1f04c:	4a22      	ldr	r2, [pc, #136]	; (1f0d8 <api_rx_enable+0xa4>)
   1f04e:	f00e fe9b 	bl	2dd88 <printk>
   1f052:	f240 215f 	movw	r1, #607	; 0x25f
   1f056:	4820      	ldr	r0, [pc, #128]	; (1f0d8 <api_rx_enable+0xa4>)
   1f058:	f00f f97c 	bl	2e354 <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f05c:	f104 0378 	add.w	r3, r4, #120	; 0x78
   1f060:	e8d3 2fef 	ldaex	r2, [r3]
   1f064:	2a00      	cmp	r2, #0
   1f066:	d103      	bne.n	1f070 <api_rx_enable+0x3c>
   1f068:	e8c3 7fe1 	stlex	r1, r7, [r3]
   1f06c:	2900      	cmp	r1, #0
   1f06e:	d1f7      	bne.n	1f060 <api_rx_enable+0x2c>
	if (atomic_ptr_cas((atomic_ptr_t *)&data->rx_buf, NULL, buf) == false) {
   1f070:	d12b      	bne.n	1f0ca <api_rx_enable+0x96>
	data->rx_state = RX_IDLE;
   1f072:	2301      	movs	r3, #1
	data->rx_timeout = timeout;
   1f074:	e9c4 651f 	strd	r6, r5, [r4, #124]	; 0x7c
	data->rx_state = RX_IDLE;
   1f078:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	__asm__ volatile(
   1f07c:	f04f 0320 	mov.w	r3, #32
   1f080:	f3ef 8511 	mrs	r5, BASEPRI
   1f084:	f383 8811 	msr	BASEPRI, r3
   1f088:	f3bf 8f6f 	isb	sy
	pending_rx = nrf_gpio_pin_read(data->rdy_pin.nrf_pin)
   1f08c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f090:	a801      	add	r0, sp, #4
   1f092:	9301      	str	r3, [sp, #4]
   1f094:	f7ff fd5a 	bl	1eb4c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f098:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f09a:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f09c:	40d8      	lsrs	r0, r3
		     && (data->rx_state == RX_IDLE);
   1f09e:	f010 0001 	ands.w	r0, r0, #1
   1f0a2:	d004      	beq.n	1f0ae <api_rx_enable+0x7a>
   1f0a4:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
   1f0a8:	1e43      	subs	r3, r0, #1
   1f0aa:	4258      	negs	r0, r3
   1f0ac:	4158      	adcs	r0, r3
	__asm__ volatile(
   1f0ae:	f385 8811 	msr	BASEPRI, r5
   1f0b2:	f3bf 8f6f 	isb	sy
	if (pending_rx) {
   1f0b6:	b130      	cbz	r0, 1f0c6 <api_rx_enable+0x92>
	data->rx_state = RX_PREPARE;
   1f0b8:	2302      	movs	r3, #2
		rx_hfclk_request(data);
   1f0ba:	4620      	mov	r0, r4
	data->rx_state = RX_PREPARE;
   1f0bc:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		rx_hfclk_request(data);
   1f0c0:	f7ff fd9c 	bl	1ebfc <rx_hfclk_request>
	return 0;
   1f0c4:	2000      	movs	r0, #0
}
   1f0c6:	b003      	add	sp, #12
   1f0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
   1f0ca:	f06f 000f 	mvn.w	r0, #15
   1f0ce:	e7fa      	b.n	1f0c6 <api_rx_enable+0x92>
   1f0d0:	0003b03c 	.word	0x0003b03c
   1f0d4:	00037f2c 	.word	0x00037f2c
   1f0d8:	0003aeba 	.word	0x0003aeba

0001f0dc <lpuart_init>:
{
   1f0dc:	b570      	push	{r4, r5, r6, lr}
	const struct lpuart_config *cfg = get_dev_config(dev);
   1f0de:	6846      	ldr	r6, [r0, #4]
{
   1f0e0:	4604      	mov	r4, r0
	struct lpuart_data *data = get_dev_data(dev);
   1f0e2:	6905      	ldr	r5, [r0, #16]
	data->uart = device_get_binding(cfg->uart_name);
   1f0e4:	6830      	ldr	r0, [r6, #0]
   1f0e6:	f009 fa77 	bl	285d8 <z_impl_device_get_binding>
   1f0ea:	6028      	str	r0, [r5, #0]
	if (data->uart == NULL) {
   1f0ec:	2800      	cmp	r0, #0
   1f0ee:	d034      	beq.n	1f15a <lpuart_init+0x7e>
	err = ctrl_pin_configure(&data->req_pin, &cfg->req, true);
   1f0f0:	2201      	movs	r2, #1
   1f0f2:	1d31      	adds	r1, r6, #4
   1f0f4:	1d28      	adds	r0, r5, #4
   1f0f6:	f7ff fe8d 	bl	1ee14 <ctrl_pin_configure>
	if (err < 0) {
   1f0fa:	2800      	cmp	r0, #0
   1f0fc:	da02      	bge.n	1f104 <lpuart_init+0x28>
		return -EINVAL;
   1f0fe:	f06f 0015 	mvn.w	r0, #21
}
   1f102:	bd70      	pop	{r4, r5, r6, pc}
	err = ctrl_pin_configure(&data->rdy_pin, &cfg->rdy, false);
   1f104:	2200      	movs	r2, #0
   1f106:	f106 010c 	add.w	r1, r6, #12
   1f10a:	f105 0018 	add.w	r0, r5, #24
   1f10e:	f7ff fe81 	bl	1ee14 <ctrl_pin_configure>
	if (err < 0) {
   1f112:	2800      	cmp	r0, #0
   1f114:	dbf3      	blt.n	1f0fe <lpuart_init+0x22>
	k_timer_init(&data->tx_timer, tx_timeout, NULL);
   1f116:	2200      	movs	r2, #0
   1f118:	4911      	ldr	r1, [pc, #68]	; (1f160 <lpuart_init+0x84>)
   1f11a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1f11e:	f016 f985 	bl	3542c <k_timer_init>
	err = uart_callback_set(data->uart, uart_callback, (void *)dev);
   1f122:	6828      	ldr	r0, [r5, #0]
	timer->user_data = user_data;
   1f124:	666c      	str	r4, [r5, #100]	; 0x64
	return api->callback_set(dev, callback, user_data);
   1f126:	6883      	ldr	r3, [r0, #8]
   1f128:	4622      	mov	r2, r4
   1f12a:	681b      	ldr	r3, [r3, #0]
   1f12c:	490d      	ldr	r1, [pc, #52]	; (1f164 <lpuart_init+0x88>)
   1f12e:	4798      	blx	r3
	if (err < 0) {
   1f130:	2800      	cmp	r0, #0
   1f132:	dbe4      	blt.n	1f0fe <lpuart_init+0x22>
   1f134:	68a3      	ldr	r3, [r4, #8]
   1f136:	2200      	movs	r2, #0
   1f138:	4620      	mov	r0, r4
   1f13a:	681b      	ldr	r3, [r3, #0]
   1f13c:	490a      	ldr	r1, [pc, #40]	; (1f168 <lpuart_init+0x8c>)
   1f13e:	4798      	blx	r3
	if (err < 0) {
   1f140:	2800      	cmp	r0, #0
   1f142:	dbdc      	blt.n	1f0fe <lpuart_init+0x22>
	err = api_rx_enable(dev, data->int_driven.rxbuf,
   1f144:	2301      	movs	r3, #1
   1f146:	2280      	movs	r2, #128	; 0x80
   1f148:	4620      	mov	r0, r4
   1f14a:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   1f14e:	f7ff ff71 	bl	1f034 <api_rx_enable>
	data->txbyte = -1;
   1f152:	f04f 33ff 	mov.w	r3, #4294967295
   1f156:	66ab      	str	r3, [r5, #104]	; 0x68
	return err;
   1f158:	e7d3      	b.n	1f102 <lpuart_init+0x26>
		return -ENODEV;
   1f15a:	f06f 0012 	mvn.w	r0, #18
   1f15e:	e7d0      	b.n	1f102 <lpuart_init+0x26>
   1f160:	0001efa5 	.word	0x0001efa5
   1f164:	0001ed7d 	.word	0x0001ed7d
   1f168:	0001f221 	.word	0x0001f221

0001f16c <api_rx_buf_rsp>:
{
   1f16c:	b570      	push	{r4, r5, r6, lr}
	struct lpuart_data *data = get_dev_data(dev);
   1f16e:	6904      	ldr	r4, [r0, #16]
{
   1f170:	460d      	mov	r5, r1
	__ASSERT_NO_MSG((data->rx_state != RX_OFF) &&
   1f172:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
{
   1f176:	4616      	mov	r6, r2
	__ASSERT_NO_MSG((data->rx_state != RX_OFF) &&
   1f178:	b10b      	cbz	r3, 1f17e <api_rx_buf_rsp+0x12>
   1f17a:	2b06      	cmp	r3, #6
   1f17c:	d10b      	bne.n	1f196 <api_rx_buf_rsp+0x2a>
   1f17e:	4915      	ldr	r1, [pc, #84]	; (1f1d4 <api_rx_buf_rsp+0x68>)
   1f180:	4815      	ldr	r0, [pc, #84]	; (1f1d8 <api_rx_buf_rsp+0x6c>)
   1f182:	f240 237b 	movw	r3, #635	; 0x27b
   1f186:	4a15      	ldr	r2, [pc, #84]	; (1f1dc <api_rx_buf_rsp+0x70>)
   1f188:	f00e fdfe 	bl	2dd88 <printk>
   1f18c:	f240 217b 	movw	r1, #635	; 0x27b
   1f190:	4812      	ldr	r0, [pc, #72]	; (1f1dc <api_rx_buf_rsp+0x70>)
   1f192:	f00f f8df 	bl	2e354 <assert_post_action>
	if (data->rx_state == RX_TO_IDLE || data->rx_state == RX_BLOCKED) {
   1f196:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1f19a:	3b04      	subs	r3, #4
   1f19c:	2b01      	cmp	r3, #1
   1f19e:	d810      	bhi.n	1f1c2 <api_rx_buf_rsp+0x56>
		if (data->rx_req) {
   1f1a0:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
		data->rx_len = len;
   1f1a4:	e9c4 561e 	strd	r5, r6, [r4, #120]	; 0x78
		if (data->rx_req) {
   1f1a8:	b13b      	cbz	r3, 1f1ba <api_rx_buf_rsp+0x4e>
	data->rx_state = RX_PREPARE;
   1f1aa:	2302      	movs	r3, #2
		rx_hfclk_request(data);
   1f1ac:	4620      	mov	r0, r4
	data->rx_state = RX_PREPARE;
   1f1ae:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		rx_hfclk_request(data);
   1f1b2:	f7ff fd23 	bl	1ebfc <rx_hfclk_request>
}
   1f1b6:	2000      	movs	r0, #0
   1f1b8:	bd70      	pop	{r4, r5, r6, pc}
			data->rx_state = RX_IDLE;
   1f1ba:	2301      	movs	r3, #1
   1f1bc:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
			LOG_DBG("RX: Idle");
   1f1c0:	e7f9      	b.n	1f1b6 <api_rx_buf_rsp+0x4a>
	return uart_rx_buf_rsp(data->uart, buf, len);
   1f1c2:	6820      	ldr	r0, [r4, #0]
	return api->rx_buf_rsp(dev, buf, len);
   1f1c4:	4632      	mov	r2, r6
   1f1c6:	6883      	ldr	r3, [r0, #8]
   1f1c8:	4629      	mov	r1, r5
}
   1f1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f1ce:	691b      	ldr	r3, [r3, #16]
   1f1d0:	4718      	bx	r3
   1f1d2:	bf00      	nop
   1f1d4:	0003b055 	.word	0x0003b055
   1f1d8:	00037f2c 	.word	0x00037f2c
   1f1dc:	0003aeba 	.word	0x0003aeba

0001f1e0 <int_driven_rx_feed>:
{
   1f1e0:	b508      	push	{r3, lr}
	data->int_driven.rxlen = 0;
   1f1e2:	2300      	movs	r3, #0
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   1f1e4:	2280      	movs	r2, #128	; 0x80
	data->int_driven.rxrd = 0;
   1f1e6:	e9c1 336b 	strd	r3, r3, [r1, #428]	; 0x1ac
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   1f1ea:	f501 7196 	add.w	r1, r1, #300	; 0x12c
   1f1ee:	f7ff ffbd 	bl	1f16c <api_rx_buf_rsp>
	__ASSERT_NO_MSG(err >= 0);
   1f1f2:	2800      	cmp	r0, #0
   1f1f4:	da0d      	bge.n	1f212 <int_driven_rx_feed+0x32>
   1f1f6:	f240 23a9 	movw	r3, #681	; 0x2a9
   1f1fa:	4906      	ldr	r1, [pc, #24]	; (1f214 <int_driven_rx_feed+0x34>)
   1f1fc:	4806      	ldr	r0, [pc, #24]	; (1f218 <int_driven_rx_feed+0x38>)
   1f1fe:	4a07      	ldr	r2, [pc, #28]	; (1f21c <int_driven_rx_feed+0x3c>)
   1f200:	f00e fdc2 	bl	2dd88 <printk>
}
   1f204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(err >= 0);
   1f208:	f240 21a9 	movw	r1, #681	; 0x2a9
   1f20c:	4803      	ldr	r0, [pc, #12]	; (1f21c <int_driven_rx_feed+0x3c>)
   1f20e:	f00f b8a1 	b.w	2e354 <assert_post_action>
}
   1f212:	bd08      	pop	{r3, pc}
   1f214:	00038835 	.word	0x00038835
   1f218:	00037f2c 	.word	0x00037f2c
   1f21c:	0003aeba 	.word	0x0003aeba

0001f220 <int_driven_evt_handler>:
{
   1f220:	b570      	push	{r4, r5, r6, lr}
   1f222:	780b      	ldrb	r3, [r1, #0]
   1f224:	4605      	mov	r5, r0
   1f226:	460e      	mov	r6, r1
	struct lpuart_data *data = get_dev_data(lpuart);
   1f228:	6904      	ldr	r4, [r0, #16]
	switch (evt->type) {
   1f22a:	2b06      	cmp	r3, #6
   1f22c:	d824      	bhi.n	1f278 <int_driven_evt_handler+0x58>
   1f22e:	e8df f003 	tbb	[pc, r3]
   1f232:	2304      	.short	0x2304
   1f234:	3023240d 	.word	0x3023240d
   1f238:	2d          	.byte	0x2d
   1f239:	00          	.byte	0x00
		data->int_driven.txlen = 0;
   1f23a:	2300      	movs	r3, #0
   1f23c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   1f240:	4628      	mov	r0, r5
   1f242:	e9d4 3128 	ldrd	r3, r1, [r4, #160]	; 0xa0
}
   1f246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   1f24a:	4718      	bx	r3
		__ASSERT_NO_MSG(data->int_driven.rxlen == 0);
   1f24c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
   1f250:	b15b      	cbz	r3, 1f26a <int_driven_evt_handler+0x4a>
   1f252:	491c      	ldr	r1, [pc, #112]	; (1f2c4 <int_driven_evt_handler+0xa4>)
   1f254:	481c      	ldr	r0, [pc, #112]	; (1f2c8 <int_driven_evt_handler+0xa8>)
   1f256:	f240 23b9 	movw	r3, #697	; 0x2b9
   1f25a:	4a1c      	ldr	r2, [pc, #112]	; (1f2cc <int_driven_evt_handler+0xac>)
   1f25c:	f00e fd94 	bl	2dd88 <printk>
   1f260:	f240 21b9 	movw	r1, #697	; 0x2b9
   1f264:	4819      	ldr	r0, [pc, #100]	; (1f2cc <int_driven_evt_handler+0xac>)
   1f266:	f00f f875 	bl	2e354 <assert_post_action>
		data->int_driven.rxlen = evt->data.rx.len;
   1f26a:	68f3      	ldr	r3, [r6, #12]
   1f26c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		call_handler = data->int_driven.rx_enabled;
   1f270:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
	if (call_handler) {
   1f274:	2b00      	cmp	r3, #0
   1f276:	d1e3      	bne.n	1f240 <int_driven_evt_handler+0x20>
}
   1f278:	bd70      	pop	{r4, r5, r6, pc}
		if (int_driven_rd_available(data) == 0) {
   1f27a:	e9d4 236b 	ldrd	r2, r3, [r4, #428]	; 0x1ac
   1f27e:	429a      	cmp	r2, r3
   1f280:	d1fa      	bne.n	1f278 <int_driven_evt_handler+0x58>
			int_driven_rx_feed(lpuart, data);
   1f282:	4621      	mov	r1, r4
}
   1f284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			int_driven_rx_feed(lpuart, data);
   1f288:	f7ff bfaa 	b.w	1f1e0 <int_driven_rx_feed>
		call_handler = data->int_driven.err_enabled;
   1f28c:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		break;
   1f290:	e7f0      	b.n	1f274 <int_driven_evt_handler+0x54>
		data->int_driven.rxlen = 0;
   1f292:	2300      	movs	r3, #0
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   1f294:	2280      	movs	r2, #128	; 0x80
		data->int_driven.rxrd = 0;
   1f296:	e9c4 336b 	strd	r3, r3, [r4, #428]	; 0x1ac
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   1f29a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1f29e:	2301      	movs	r3, #1
   1f2a0:	f7ff fec8 	bl	1f034 <api_rx_enable>
		__ASSERT_NO_MSG(err >= 0);
   1f2a4:	2800      	cmp	r0, #0
   1f2a6:	dae7      	bge.n	1f278 <int_driven_evt_handler+0x58>
   1f2a8:	4909      	ldr	r1, [pc, #36]	; (1f2d0 <int_driven_evt_handler+0xb0>)
   1f2aa:	4807      	ldr	r0, [pc, #28]	; (1f2c8 <int_driven_evt_handler+0xa8>)
   1f2ac:	f240 23cd 	movw	r3, #717	; 0x2cd
   1f2b0:	4a06      	ldr	r2, [pc, #24]	; (1f2cc <int_driven_evt_handler+0xac>)
   1f2b2:	f00e fd69 	bl	2dd88 <printk>
}
   1f2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT_NO_MSG(err >= 0);
   1f2ba:	f240 21cd 	movw	r1, #717	; 0x2cd
   1f2be:	4803      	ldr	r0, [pc, #12]	; (1f2cc <int_driven_evt_handler+0xac>)
   1f2c0:	f00f b848 	b.w	2e354 <assert_post_action>
   1f2c4:	0003b091 	.word	0x0003b091
   1f2c8:	00037f2c 	.word	0x00037f2c
   1f2cc:	0003aeba 	.word	0x0003aeba
   1f2d0:	00038835 	.word	0x00038835

0001f2d4 <gpio_handler>:
	if (io->req) {
   1f2d4:	7ccb      	ldrb	r3, [r1, #19]
{
   1f2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f2d8:	460c      	mov	r4, r1
	if (io->req) {
   1f2da:	2b00      	cmp	r3, #0
   1f2dc:	d055      	beq.n	1f38a <gpio_handler+0xb6>
	if (data->tx_buf == NULL) {
   1f2de:	6e8d      	ldr	r5, [r1, #104]	; 0x68
   1f2e0:	b98d      	cbnz	r5, 1f306 <gpio_handler+0x32>
   1f2e2:	4972      	ldr	r1, [pc, #456]	; (1f4ac <gpio_handler+0x1d8>)
   1f2e4:	4b72      	ldr	r3, [pc, #456]	; (1f4b0 <gpio_handler+0x1dc>)
		LOG_WRN("TX: request confirmed but no data to send");
   1f2e6:	4873      	ldr	r0, [pc, #460]	; (1f4b4 <gpio_handler+0x1e0>)
   1f2e8:	1ac9      	subs	r1, r1, r3
   1f2ea:	08c9      	lsrs	r1, r1, #3
   1f2ec:	0189      	lsls	r1, r1, #6
   1f2ee:	f041 0102 	orr.w	r1, r1, #2
   1f2f2:	f00f f87d 	bl	2e3f0 <log_0>
	ctrl_pin_idle(&data->req_pin);
   1f2f6:	4620      	mov	r0, r4
   1f2f8:	f013 ff7b 	bl	331f2 <ctrl_pin_idle>
	data->tx_buf = NULL;
   1f2fc:	66a5      	str	r5, [r4, #104]	; 0x68
	data->tx_active = false;
   1f2fe:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
}
   1f302:	b002      	add	sp, #8
   1f304:	bd70      	pop	{r4, r5, r6, pc}
		nrf_gpio_pin_set(io->nrf_pin);
   1f306:	7c4b      	ldrb	r3, [r1, #17]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f308:	2601      	movs	r6, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f30a:	a801      	add	r0, sp, #4
   1f30c:	9301      	str	r3, [sp, #4]
   1f30e:	f7ff fc1d 	bl	1eb4c <nrf_gpio_pin_port_decode>
    p_reg->CONFIG[idx] = 0;
   1f312:	2500      	movs	r5, #0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1f314:	9b01      	ldr	r3, [sp, #4]
   1f316:	4a68      	ldr	r2, [pc, #416]	; (1f4b8 <gpio_handler+0x1e4>)
   1f318:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTSET = set_mask;
   1f31c:	6083      	str	r3, [r0, #8]
		nrf_gpiote_te_default(NRF_GPIOTE, io->ch);
   1f31e:	7ca3      	ldrb	r3, [r4, #18]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f320:	a801      	add	r0, sp, #4
   1f322:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f326:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
		nrf_gpio_cfg_output(io->nrf_pin);
   1f32a:	7c63      	ldrb	r3, [r4, #17]
   1f32c:	9301      	str	r3, [sp, #4]
   1f32e:	f7ff fc0d 	bl	1eb4c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1f332:	2203      	movs	r2, #3
   1f334:	9b01      	ldr	r3, [sp, #4]
   1f336:	3380      	adds	r3, #128	; 0x80
   1f338:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	z_impl_k_timer_stop(timer);
   1f33c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1f340:	f016 f880 	bl	35444 <z_impl_k_timer_stop>
	__asm__ volatile(
   1f344:	f04f 0220 	mov.w	r2, #32
   1f348:	f3ef 8311 	mrs	r3, BASEPRI
   1f34c:	f382 8811 	msr	BASEPRI, r2
   1f350:	f3bf 8f6f 	isb	sy
	len = data->tx_len;
   1f354:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
	data->tx_active = true;
   1f358:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
	__asm__ volatile(
   1f35c:	f383 8811 	msr	BASEPRI, r3
   1f360:	f3bf 8f6f 	isb	sy
	err = uart_tx(data->uart, buf, len, 0);
   1f364:	f854 0c04 	ldr.w	r0, [r4, #-4]
	return api->tx(dev, buf, len, timeout);
   1f368:	6883      	ldr	r3, [r0, #8]
   1f36a:	685e      	ldr	r6, [r3, #4]
   1f36c:	462b      	mov	r3, r5
   1f36e:	47b0      	blx	r6
	if (err < 0) {
   1f370:	1e01      	subs	r1, r0, #0
   1f372:	dac6      	bge.n	1f302 <gpio_handler+0x2e>
   1f374:	4b4e      	ldr	r3, [pc, #312]	; (1f4b0 <gpio_handler+0x1dc>)
   1f376:	4a4d      	ldr	r2, [pc, #308]	; (1f4ac <gpio_handler+0x1d8>)
		LOG_ERR("TX: Not started (error: %d)", err);
   1f378:	4850      	ldr	r0, [pc, #320]	; (1f4bc <gpio_handler+0x1e8>)
   1f37a:	1ad2      	subs	r2, r2, r3
   1f37c:	08d2      	lsrs	r2, r2, #3
   1f37e:	0192      	lsls	r2, r2, #6
   1f380:	f042 0201 	orr.w	r2, r2, #1
   1f384:	f00f f841 	bl	2e40a <log_1>
   1f388:	e7b5      	b.n	1f2f6 <gpio_handler+0x22>
	if (nrf_gpiote_event_polarity_get(NRF_GPIOTE, data->rdy_pin.ch)
   1f38a:	7c8b      	ldrb	r3, [r1, #18]
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f38c:	4a4a      	ldr	r2, [pc, #296]	; (1f4b8 <gpio_handler+0x1e4>)
   1f38e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1f396:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
   1f39a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f39e:	2b01      	cmp	r3, #1
   1f3a0:	d11c      	bne.n	1f3dc <gpio_handler+0x108>
		__ASSERT_NO_MSG(data->rx_state != RX_ACTIVE);
   1f3a2:	2a03      	cmp	r2, #3
   1f3a4:	d10b      	bne.n	1f3be <gpio_handler+0xea>
   1f3a6:	4946      	ldr	r1, [pc, #280]	; (1f4c0 <gpio_handler+0x1ec>)
   1f3a8:	4846      	ldr	r0, [pc, #280]	; (1f4c4 <gpio_handler+0x1f0>)
   1f3aa:	f44f 73a9 	mov.w	r3, #338	; 0x152
   1f3ae:	4a46      	ldr	r2, [pc, #280]	; (1f4c8 <gpio_handler+0x1f4>)
   1f3b0:	f00e fcea 	bl	2dd88 <printk>
   1f3b4:	f44f 71a9 	mov.w	r1, #338	; 0x152
   1f3b8:	4843      	ldr	r0, [pc, #268]	; (1f4c8 <gpio_handler+0x1f4>)
   1f3ba:	f00e ffcb 	bl	2e354 <assert_post_action>
		data->rx_req = true;
   1f3be:	2301      	movs	r3, #1
   1f3c0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (data->rx_state == RX_IDLE) {
   1f3c4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1f3c8:	2b01      	cmp	r3, #1
   1f3ca:	d19a      	bne.n	1f302 <gpio_handler+0x2e>
	data->rx_state = RX_PREPARE;
   1f3cc:	2302      	movs	r3, #2
		rx_hfclk_request(data);
   1f3ce:	f1a4 0018 	sub.w	r0, r4, #24
	data->rx_state = RX_PREPARE;
   1f3d2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		rx_hfclk_request(data);
   1f3d6:	f7ff fc11 	bl	1ebfc <rx_hfclk_request>
}
   1f3da:	e792      	b.n	1f302 <gpio_handler+0x2e>
		__ASSERT_NO_MSG(data->rx_state == RX_ACTIVE);
   1f3dc:	2a03      	cmp	r2, #3
   1f3de:	d00b      	beq.n	1f3f8 <gpio_handler+0x124>
   1f3e0:	493a      	ldr	r1, [pc, #232]	; (1f4cc <gpio_handler+0x1f8>)
   1f3e2:	4838      	ldr	r0, [pc, #224]	; (1f4c4 <gpio_handler+0x1f0>)
   1f3e4:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   1f3e8:	4a37      	ldr	r2, [pc, #220]	; (1f4c8 <gpio_handler+0x1f4>)
   1f3ea:	f00e fccd 	bl	2dd88 <printk>
   1f3ee:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1f3f2:	4835      	ldr	r0, [pc, #212]	; (1f4c8 <gpio_handler+0x1f4>)
   1f3f4:	f00e ffae 	bl	2e354 <assert_post_action>
		     z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1f3f8:	2000      	movs	r0, #0
   1f3fa:	f7f6 fd29 	bl	15e50 <z_nrf_clock_control_get_onoff>
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   1f3fe:	f104 0178 	add.w	r1, r4, #120	; 0x78
   1f402:	4605      	mov	r5, r0
   1f404:	f7f4 faa4 	bl	13950 <onoff_cancel>

	if (rv == -EALREADY) {
   1f408:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1f40c:	d102      	bne.n	1f414 <gpio_handler+0x140>
		rv = onoff_release(mgr);
   1f40e:	4628      	mov	r0, r5
   1f410:	f7f4 fa2e 	bl	13870 <onoff_release>
		__ASSERT_NO_MSG(err >= 0);
   1f414:	2800      	cmp	r0, #0
   1f416:	da0b      	bge.n	1f430 <gpio_handler+0x15c>
   1f418:	492d      	ldr	r1, [pc, #180]	; (1f4d0 <gpio_handler+0x1fc>)
   1f41a:	482a      	ldr	r0, [pc, #168]	; (1f4c4 <gpio_handler+0x1f0>)
   1f41c:	f240 1315 	movw	r3, #277	; 0x115
   1f420:	4a29      	ldr	r2, [pc, #164]	; (1f4c8 <gpio_handler+0x1f4>)
   1f422:	f00e fcb1 	bl	2dd88 <printk>
   1f426:	f240 1115 	movw	r1, #277	; 0x115
   1f42a:	4827      	ldr	r0, [pc, #156]	; (1f4c8 <gpio_handler+0x1f4>)
   1f42c:	f00e ff92 	bl	2e354 <assert_post_action>
	ctrl_pin_idle(&data->rdy_pin);
   1f430:	4620      	mov	r0, r4
   1f432:	f013 fede 	bl	331f2 <ctrl_pin_idle>
	if (nrf_gpio_pin_read(data->rdy_pin.nrf_pin)) {
   1f436:	7c63      	ldrb	r3, [r4, #17]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f438:	a801      	add	r0, sp, #4
   1f43a:	9301      	str	r3, [sp, #4]
   1f43c:	f7ff fb86 	bl	1eb4c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f440:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1f442:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f444:	40d3      	lsrs	r3, r2
   1f446:	07db      	lsls	r3, r3, #31
   1f448:	d516      	bpl.n	1f478 <gpio_handler+0x1a4>
		nrf_gpiote_event_clear(NRF_GPIOTE,
   1f44a:	7ca5      	ldrb	r5, [r4, #18]
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   1f44c:	2d07      	cmp	r5, #7
   1f44e:	d90b      	bls.n	1f468 <gpio_handler+0x194>
   1f450:	4920      	ldr	r1, [pc, #128]	; (1f4d4 <gpio_handler+0x200>)
   1f452:	481c      	ldr	r0, [pc, #112]	; (1f4c4 <gpio_handler+0x1f0>)
   1f454:	f44f 7322 	mov.w	r3, #648	; 0x288
   1f458:	4a1f      	ldr	r2, [pc, #124]	; (1f4d8 <gpio_handler+0x204>)
   1f45a:	f00e fc95 	bl	2dd88 <printk>
   1f45e:	f44f 7122 	mov.w	r1, #648	; 0x288
   1f462:	481d      	ldr	r0, [pc, #116]	; (1f4d8 <gpio_handler+0x204>)
   1f464:	f00e ff76 	bl	2e354 <assert_post_action>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f468:	2200      	movs	r2, #0
    return ((uint32_t)p_reg + event);
   1f46a:	4b1c      	ldr	r3, [pc, #112]	; (1f4dc <gpio_handler+0x208>)
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f46c:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f46e:	515a      	str	r2, [r3, r5]
   1f470:	595b      	ldr	r3, [r3, r5]
		data->rx_req = true;
   1f472:	2301      	movs	r3, #1
   1f474:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	data->rx_state = RX_TO_IDLE;
   1f478:	2304      	movs	r3, #4
	err = uart_rx_disable(data->uart);
   1f47a:	f854 0c18 	ldr.w	r0, [r4, #-24]
	data->rx_state = RX_TO_IDLE;
   1f47e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
	return api->rx_disable(dev);
   1f482:	6883      	ldr	r3, [r0, #8]
   1f484:	695b      	ldr	r3, [r3, #20]
   1f486:	4798      	blx	r3
	if (err < 0 && err != -EFAULT) {
   1f488:	1e01      	subs	r1, r0, #0
   1f48a:	f6bf af3a 	bge.w	1f302 <gpio_handler+0x2e>
   1f48e:	f111 0f0e 	cmn.w	r1, #14
   1f492:	f43f af36 	beq.w	1f302 <gpio_handler+0x2e>
   1f496:	4b06      	ldr	r3, [pc, #24]	; (1f4b0 <gpio_handler+0x1dc>)
   1f498:	4a04      	ldr	r2, [pc, #16]	; (1f4ac <gpio_handler+0x1d8>)
		LOG_ERR("RX: Failed to disable (err: %d)", err);
   1f49a:	4811      	ldr	r0, [pc, #68]	; (1f4e0 <gpio_handler+0x20c>)
   1f49c:	1ad2      	subs	r2, r2, r3
   1f49e:	08d2      	lsrs	r2, r2, #3
   1f4a0:	0192      	lsls	r2, r2, #6
   1f4a2:	f042 0201 	orr.w	r2, r2, #1
   1f4a6:	f00e ffb0 	bl	2e40a <log_1>
   1f4aa:	e72a      	b.n	1f302 <gpio_handler+0x2e>
   1f4ac:	00036570 	.word	0x00036570
   1f4b0:	000364b0 	.word	0x000364b0
   1f4b4:	0003b0ad 	.word	0x0003b0ad
   1f4b8:	40031000 	.word	0x40031000
   1f4bc:	0003b0d7 	.word	0x0003b0d7
   1f4c0:	0003b0f3 	.word	0x0003b0f3
   1f4c4:	00037f2c 	.word	0x00037f2c
   1f4c8:	0003aeba 	.word	0x0003aeba
   1f4cc:	0003b10f 	.word	0x0003b10f
   1f4d0:	00038835 	.word	0x00038835
   1f4d4:	0003b160 	.word	0x0003b160
   1f4d8:	0003b12b 	.word	0x0003b12b
   1f4dc:	40031100 	.word	0x40031100
   1f4e0:	0003b16a 	.word	0x0003b16a

0001f4e4 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1f4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f4e6:	460f      	mov	r7, r1
   1f4e8:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   1f4ea:	b948      	cbnz	r0, 1f500 <entropy_cc3xx_rng_get_entropy+0x1c>
   1f4ec:	4918      	ldr	r1, [pc, #96]	; (1f550 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1f4ee:	4819      	ldr	r0, [pc, #100]	; (1f554 <entropy_cc3xx_rng_get_entropy+0x70>)
   1f4f0:	2326      	movs	r3, #38	; 0x26
   1f4f2:	4a19      	ldr	r2, [pc, #100]	; (1f558 <entropy_cc3xx_rng_get_entropy+0x74>)
   1f4f4:	f00e fc48 	bl	2dd88 <printk>
   1f4f8:	2126      	movs	r1, #38	; 0x26
   1f4fa:	4817      	ldr	r0, [pc, #92]	; (1f558 <entropy_cc3xx_rng_get_entropy+0x74>)
   1f4fc:	f00e ff2a 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1f500:	b94f      	cbnz	r7, 1f516 <entropy_cc3xx_rng_get_entropy+0x32>
   1f502:	4916      	ldr	r1, [pc, #88]	; (1f55c <entropy_cc3xx_rng_get_entropy+0x78>)
   1f504:	4813      	ldr	r0, [pc, #76]	; (1f554 <entropy_cc3xx_rng_get_entropy+0x70>)
   1f506:	2327      	movs	r3, #39	; 0x27
   1f508:	4a13      	ldr	r2, [pc, #76]	; (1f558 <entropy_cc3xx_rng_get_entropy+0x74>)
   1f50a:	f00e fc3d 	bl	2dd88 <printk>
   1f50e:	2127      	movs	r1, #39	; 0x27
   1f510:	4811      	ldr	r0, [pc, #68]	; (1f558 <entropy_cc3xx_rng_get_entropy+0x74>)
   1f512:	f00e ff1f 	bl	2e354 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1f516:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1f51a:	2400      	movs	r4, #0
   1f51c:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   1f520:	42a6      	cmp	r6, r4
   1f522:	d801      	bhi.n	1f528 <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   1f524:	b003      	add	sp, #12
   1f526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1f528:	1b33      	subs	r3, r6, r4
   1f52a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1f52e:	bf38      	it	cc
   1f530:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   1f532:	aa01      	add	r2, sp, #4
   1f534:	4629      	mov	r1, r5
   1f536:	1938      	adds	r0, r7, r4
   1f538:	f00f fb8f 	bl	2ec5a <spm_request_random_number>
		if (olen != chunk_size) {
   1f53c:	9b01      	ldr	r3, [sp, #4]
   1f53e:	42ab      	cmp	r3, r5
   1f540:	d103      	bne.n	1f54a <entropy_cc3xx_rng_get_entropy+0x66>
		if (res != 0) {
   1f542:	2800      	cmp	r0, #0
   1f544:	d1ee      	bne.n	1f524 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   1f546:	442c      	add	r4, r5
   1f548:	e7ea      	b.n	1f520 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   1f54a:	f06f 0015 	mvn.w	r0, #21
   1f54e:	e7e9      	b.n	1f524 <entropy_cc3xx_rng_get_entropy+0x40>
   1f550:	0003b1c1 	.word	0x0003b1c1
   1f554:	00037f2c 	.word	0x00037f2c
   1f558:	0003b191 	.word	0x0003b191
   1f55c:	0003b1d4 	.word	0x0003b1d4

0001f560 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   1f560:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   1f562:	4d19      	ldr	r5, [pc, #100]	; (1f5c8 <_nrf_modem_lib_init+0x68>)
   1f564:	4c19      	ldr	r4, [pc, #100]	; (1f5cc <_nrf_modem_lib_init+0x6c>)
   1f566:	782b      	ldrb	r3, [r5, #0]
   1f568:	b933      	cbnz	r3, 1f578 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   1f56a:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1f56e:	4818      	ldr	r0, [pc, #96]	; (1f5d0 <_nrf_modem_lib_init+0x70>)
   1f570:	f015 fe63 	bl	3523a <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1f574:	2301      	movs	r3, #1
   1f576:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   1f578:	2200      	movs	r2, #0
   1f57a:	202a      	movs	r0, #42	; 0x2a
   1f57c:	4611      	mov	r1, r2
   1f57e:	f7f7 fc15 	bl	16dac <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   1f582:	2100      	movs	r1, #0
   1f584:	4813      	ldr	r0, [pc, #76]	; (1f5d4 <_nrf_modem_lib_init+0x74>)
   1f586:	f008 ff2b 	bl	283e0 <nrf_modem_init>
   1f58a:	4b13      	ldr	r3, [pc, #76]	; (1f5d8 <_nrf_modem_lib_init+0x78>)
   1f58c:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1f58e:	f04f 32ff 	mov.w	r2, #4294967295
   1f592:	f04f 33ff 	mov.w	r3, #4294967295
   1f596:	480e      	ldr	r0, [pc, #56]	; (1f5d0 <_nrf_modem_lib_init+0x70>)
   1f598:	f009 feba 	bl	29310 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1f59c:	6820      	ldr	r0, [r4, #0]
   1f59e:	b170      	cbz	r0, 1f5be <_nrf_modem_lib_init+0x5e>
	return node->next;
   1f5a0:	6804      	ldr	r4, [r0, #0]
   1f5a2:	2c00      	cmp	r4, #0
   1f5a4:	bf38      	it	cc
   1f5a6:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   1f5a8:	3004      	adds	r0, #4
   1f5aa:	f00a f9d9 	bl	29960 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1f5ae:	b134      	cbz	r4, 1f5be <_nrf_modem_lib_init+0x5e>
   1f5b0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f5b2:	4620      	mov	r0, r4
   1f5b4:	2b00      	cmp	r3, #0
   1f5b6:	bf38      	it	cc
   1f5b8:	2300      	movcc	r3, #0
   1f5ba:	461c      	mov	r4, r3
   1f5bc:	e7f4      	b.n	1f5a8 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   1f5be:	4804      	ldr	r0, [pc, #16]	; (1f5d0 <_nrf_modem_lib_init+0x70>)
   1f5c0:	f009 ffa0 	bl	29504 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   1f5c4:	2000      	movs	r0, #0
   1f5c6:	bd38      	pop	{r3, r4, r5, pc}
   1f5c8:	2001b9d6 	.word	0x2001b9d6
   1f5cc:	20016260 	.word	0x20016260
   1f5d0:	20016268 	.word	0x20016268
   1f5d4:	0003701c 	.word	0x0003701c
   1f5d8:	2001625c 	.word	0x2001625c

0001f5dc <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
   1f5dc:	b530      	push	{r4, r5, lr}
   1f5de:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f5e0:	2201      	movs	r2, #1
   1f5e2:	2100      	movs	r1, #0
   1f5e4:	a802      	add	r0, sp, #8
   1f5e6:	f015 fe5d 	bl	352a4 <z_impl_k_sem_init>
   1f5ea:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   1f5ec:	f04f 33ff 	mov.w	r3, #4294967295
   1f5f0:	f04f 32ff 	mov.w	r2, #4294967295
   1f5f4:	481c      	ldr	r0, [pc, #112]	; (1f668 <nrf_modem_lib_shutdown_wait+0x8c>)
   1f5f6:	f009 fe8b 	bl	29310 <z_impl_k_mutex_lock>
	parent->next = child;
   1f5fa:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   1f5fc:	4c1b      	ldr	r4, [pc, #108]	; (1f66c <nrf_modem_lib_shutdown_wait+0x90>)
	parent->next = child;
   1f5fe:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1f600:	6863      	ldr	r3, [r4, #4]
   1f602:	bb2b      	cbnz	r3, 1f650 <nrf_modem_lib_shutdown_wait+0x74>
	list->head = node;
   1f604:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   1f608:	4817      	ldr	r0, [pc, #92]	; (1f668 <nrf_modem_lib_shutdown_wait+0x8c>)
   1f60a:	f009 ff7b 	bl	29504 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1f60e:	f04f 32ff 	mov.w	r2, #4294967295
   1f612:	f04f 33ff 	mov.w	r3, #4294967295
   1f616:	a802      	add	r0, sp, #8
   1f618:	f00a f9e6 	bl	299e8 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   1f61c:	f04f 32ff 	mov.w	r2, #4294967295
   1f620:	f04f 33ff 	mov.w	r3, #4294967295
   1f624:	4810      	ldr	r0, [pc, #64]	; (1f668 <nrf_modem_lib_shutdown_wait+0x8c>)
   1f626:	f009 fe73 	bl	29310 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f62a:	2200      	movs	r2, #0
   1f62c:	6823      	ldr	r3, [r4, #0]
   1f62e:	b153      	cbz	r3, 1f646 <nrf_modem_lib_shutdown_wait+0x6a>
   1f630:	42ab      	cmp	r3, r5
   1f632:	d116      	bne.n	1f662 <nrf_modem_lib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   1f634:	9901      	ldr	r1, [sp, #4]
   1f636:	b972      	cbnz	r2, 1f656 <nrf_modem_lib_shutdown_wait+0x7a>
   1f638:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1f63a:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f63c:	429a      	cmp	r2, r3
   1f63e:	d100      	bne.n	1f642 <nrf_modem_lib_shutdown_wait+0x66>
	list->tail = node;
   1f640:	6061      	str	r1, [r4, #4]
	parent->next = child;
   1f642:	2300      	movs	r3, #0
   1f644:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   1f646:	4808      	ldr	r0, [pc, #32]	; (1f668 <nrf_modem_lib_shutdown_wait+0x8c>)
   1f648:	f009 ff5c 	bl	29504 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   1f64c:	b009      	add	sp, #36	; 0x24
   1f64e:	bd30      	pop	{r4, r5, pc}
   1f650:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1f652:	6065      	str	r5, [r4, #4]
}
   1f654:	e7d8      	b.n	1f608 <nrf_modem_lib_shutdown_wait+0x2c>
	parent->next = child;
   1f656:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f658:	6861      	ldr	r1, [r4, #4]
   1f65a:	4299      	cmp	r1, r3
	list->tail = node;
   1f65c:	bf08      	it	eq
   1f65e:	6062      	streq	r2, [r4, #4]
}
   1f660:	e7ef      	b.n	1f642 <nrf_modem_lib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f662:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f664:	681b      	ldr	r3, [r3, #0]
   1f666:	e7e2      	b.n	1f62e <nrf_modem_lib_shutdown_wait+0x52>
   1f668:	20016268 	.word	0x20016268
   1f66c:	20016260 	.word	0x20016260

0001f670 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1f670:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1f672:	4c0d      	ldr	r4, [pc, #52]	; (1f6a8 <thread_monitor_entry_get+0x38>)
{
   1f674:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1f676:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1f678:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1f67a:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   1f67c:	4b0b      	ldr	r3, [pc, #44]	; (1f6ac <thread_monitor_entry_get+0x3c>)
   1f67e:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   1f680:	6801      	ldr	r1, [r0, #0]
   1f682:	4291      	cmp	r1, r2
   1f684:	d00e      	beq.n	1f6a4 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   1f686:	b151      	cbz	r1, 1f69e <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   1f688:	6841      	ldr	r1, [r0, #4]
   1f68a:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   1f68c:	42b1      	cmp	r1, r6
   1f68e:	bfc4      	itt	gt
   1f690:	4604      	movgt	r4, r0
   1f692:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1f694:	3d01      	subs	r5, #1
   1f696:	f100 0008 	add.w	r0, r0, #8
   1f69a:	d1f1      	bne.n	1f680 <thread_monitor_entry_get+0x10>
   1f69c:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   1f69e:	3b01      	subs	r3, #1
	new_entry->id = id;
   1f6a0:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1f6a2:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   1f6a4:	bd70      	pop	{r4, r5, r6, pc}
   1f6a6:	bf00      	nop
   1f6a8:	200166a8 	.word	0x200166a8
   1f6ac:	20016680 	.word	0x20016680

0001f6b0 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1f6b0:	4668      	mov	r0, sp
   1f6b2:	f020 0107 	bic.w	r1, r0, #7
   1f6b6:	468d      	mov	sp, r1
   1f6b8:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f6ba:	4b0f      	ldr	r3, [pc, #60]	; (1f6f8 <rpc_proxy_irq_handler+0x48>)
   1f6bc:	e8d3 2fef 	ldaex	r2, [r3]
   1f6c0:	3201      	adds	r2, #1
   1f6c2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1f6c6:	2900      	cmp	r1, #0
   1f6c8:	d1f8      	bne.n	1f6bc <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
   1f6ca:	f005 fb1d 	bl	24d08 <nrf_modem_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1f6ce:	4b0b      	ldr	r3, [pc, #44]	; (1f6fc <rpc_proxy_irq_handler+0x4c>)
   1f6d0:	681c      	ldr	r4, [r3, #0]
   1f6d2:	2c00      	cmp	r4, #0
   1f6d4:	bf38      	it	cc
   1f6d6:	2400      	movcc	r4, #0
   1f6d8:	b12c      	cbz	r4, 1f6e6 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   1f6da:	1d20      	adds	r0, r4, #4
   1f6dc:	f00a f940 	bl	29960 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f6e0:	6824      	ldr	r4, [r4, #0]
   1f6e2:	2c00      	cmp	r4, #0
   1f6e4:	d1f8      	bne.n	1f6d8 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1f6e6:	f7f7 fb93 	bl	16e10 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1f6ea:	f7f7 fcc9 	bl	17080 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1f6ee:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1f6f2:	4685      	mov	sp, r0
   1f6f4:	4770      	bx	lr
   1f6f6:	bf00      	nop
   1f6f8:	20016680 	.word	0x20016680
   1f6fc:	200166a0 	.word	0x200166a0

0001f700 <nrf_modem_os_timedwait>:
{
   1f700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f704:	460c      	mov	r4, r1
   1f706:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   1f708:	f015 fe61 	bl	353ce <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1f70c:	6823      	ldr	r3, [r4, #0]
   1f70e:	4680      	mov	r8, r0
   1f710:	2b00      	cmp	r3, #0
   1f712:	468a      	mov	sl, r1
   1f714:	d103      	bne.n	1f71e <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   1f716:	f00b fe93 	bl	2b440 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1f71a:	203c      	movs	r0, #60	; 0x3c
   1f71c:	e091      	b.n	1f842 <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   1f71e:	bfbc      	itt	lt
   1f720:	f04f 33ff 	movlt.w	r3, #4294967295
   1f724:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f726:	2201      	movs	r2, #1
   1f728:	2100      	movs	r1, #0
   1f72a:	a802      	add	r0, sp, #8
   1f72c:	f015 fdba 	bl	352a4 <z_impl_k_sem_init>
   1f730:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   1f732:	f04f 0320 	mov.w	r3, #32
   1f736:	f3ef 8b11 	mrs	fp, BASEPRI
   1f73a:	f383 8811 	msr	BASEPRI, r3
   1f73e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f742:	f00c f805 	bl	2b750 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1f746:	f7ff ff93 	bl	1f670 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1f74a:	4947      	ldr	r1, [pc, #284]	; (1f868 <nrf_modem_os_timedwait+0x168>)
   1f74c:	6843      	ldr	r3, [r0, #4]
   1f74e:	680a      	ldr	r2, [r1, #0]
   1f750:	4689      	mov	r9, r1
   1f752:	4293      	cmp	r3, r2
   1f754:	f04f 0300 	mov.w	r3, #0
   1f758:	d108      	bne.n	1f76c <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   1f75a:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1f75c:	4b43      	ldr	r3, [pc, #268]	; (1f86c <nrf_modem_os_timedwait+0x16c>)
   1f75e:	685a      	ldr	r2, [r3, #4]
   1f760:	2a00      	cmp	r2, #0
   1f762:	d171      	bne.n	1f848 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   1f764:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   1f768:	2301      	movs	r3, #1
}
   1f76a:	e000      	b.n	1f76e <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   1f76c:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1f76e:	f38b 8811 	msr	BASEPRI, fp
   1f772:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1f776:	2b00      	cmp	r3, #0
   1f778:	d062      	beq.n	1f840 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1f77a:	6823      	ldr	r3, [r4, #0]
   1f77c:	1c5a      	adds	r2, r3, #1
   1f77e:	d066      	beq.n	1f84e <nrf_modem_os_timedwait+0x14e>
   1f780:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1f784:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f788:	2100      	movs	r1, #0
   1f78a:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1f78e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f792:	2300      	movs	r3, #0
   1f794:	fbce 010c 	smlal	r0, r1, lr, ip
   1f798:	f7f1 fd2a 	bl	111f0 <__aeabi_uldivmod>
   1f79c:	4602      	mov	r2, r0
   1f79e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1f7a0:	a802      	add	r0, sp, #8
   1f7a2:	f00a f921 	bl	299e8 <z_impl_k_sem_take>
	__asm__ volatile(
   1f7a6:	f04f 0320 	mov.w	r3, #32
   1f7aa:	f3ef 8b11 	mrs	fp, BASEPRI
   1f7ae:	f383 8811 	msr	BASEPRI, r3
   1f7b2:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f7b6:	2000      	movs	r0, #0
   1f7b8:	4b2c      	ldr	r3, [pc, #176]	; (1f86c <nrf_modem_os_timedwait+0x16c>)
   1f7ba:	681a      	ldr	r2, [r3, #0]
   1f7bc:	b15a      	cbz	r2, 1f7d6 <nrf_modem_os_timedwait+0xd6>
   1f7be:	42aa      	cmp	r2, r5
   1f7c0:	d14f      	bne.n	1f862 <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   1f7c2:	9d01      	ldr	r5, [sp, #4]
   1f7c4:	2800      	cmp	r0, #0
   1f7c6:	d146      	bne.n	1f856 <nrf_modem_os_timedwait+0x156>
   1f7c8:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   1f7ca:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f7cc:	4291      	cmp	r1, r2
   1f7ce:	d100      	bne.n	1f7d2 <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   1f7d0:	605d      	str	r5, [r3, #4]
	parent->next = child;
   1f7d2:	2300      	movs	r3, #0
   1f7d4:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   1f7d6:	f00b ffbb 	bl	2b750 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1f7da:	f7ff ff49 	bl	1f670 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1f7de:	f8d9 3000 	ldr.w	r3, [r9]
   1f7e2:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1f7e4:	f38b 8811 	msr	BASEPRI, fp
   1f7e8:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   1f7ec:	6825      	ldr	r5, [r4, #0]
   1f7ee:	1c6b      	adds	r3, r5, #1
   1f7f0:	d026      	beq.n	1f840 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   1f7f2:	f015 fdec 	bl	353ce <z_impl_k_uptime_ticks>
   1f7f6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1f7fa:	468e      	mov	lr, r1
   1f7fc:	fba8 890c 	umull	r8, r9, r8, ip
   1f800:	fba0 010c 	umull	r0, r1, r0, ip
   1f804:	fb0c 990a 	mla	r9, ip, sl, r9
   1f808:	fb0c 110e 	mla	r1, ip, lr, r1
   1f80c:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   1f810:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   1f814:	1952      	adds	r2, r2, r5
   1f816:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   1f81a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   1f81e:	0bc5      	lsrs	r5, r0, #15
   1f820:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   1f824:	1b56      	subs	r6, r2, r5
   1f826:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   1f82a:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   1f82e:	2e00      	cmp	r6, #0
   1f830:	f177 0300 	sbcs.w	r3, r7, #0
   1f834:	bfb8      	it	lt
   1f836:	2600      	movlt	r6, #0
   1f838:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   1f83a:	2e00      	cmp	r6, #0
   1f83c:	f43f af6d 	beq.w	1f71a <nrf_modem_os_timedwait+0x1a>
	return 0;
   1f840:	2000      	movs	r0, #0
}
   1f842:	b009      	add	sp, #36	; 0x24
   1f844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f848:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1f84a:	605d      	str	r5, [r3, #4]
   1f84c:	e78c      	b.n	1f768 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1f84e:	f04f 32ff 	mov.w	r2, #4294967295
   1f852:	4613      	mov	r3, r2
   1f854:	e7a4      	b.n	1f7a0 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   1f856:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f858:	6859      	ldr	r1, [r3, #4]
   1f85a:	4291      	cmp	r1, r2
	list->tail = node;
   1f85c:	bf08      	it	eq
   1f85e:	6058      	streq	r0, [r3, #4]
}
   1f860:	e7b7      	b.n	1f7d2 <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f862:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f864:	6812      	ldr	r2, [r2, #0]
   1f866:	e7a9      	b.n	1f7bc <nrf_modem_os_timedwait+0xbc>
   1f868:	20016680 	.word	0x20016680
   1f86c:	200166a0 	.word	0x200166a0

0001f870 <nrf_modem_os_errno_set>:
	switch (err_code) {
   1f870:	283d      	cmp	r0, #61	; 0x3d
{
   1f872:	b510      	push	{r4, lr}
   1f874:	4604      	mov	r4, r0
	switch (err_code) {
   1f876:	f300 80a1 	bgt.w	1f9bc <nrf_modem_os_errno_set+0x14c>
   1f87a:	2800      	cmp	r0, #0
   1f87c:	dc1e      	bgt.n	1f8bc <nrf_modem_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by nrf_modem_lib!", err_code);
   1f87e:	f240 135f 	movw	r3, #351	; 0x15f
   1f882:	4abc      	ldr	r2, [pc, #752]	; (1fb74 <nrf_modem_os_errno_set+0x304>)
   1f884:	49bc      	ldr	r1, [pc, #752]	; (1fb78 <nrf_modem_os_errno_set+0x308>)
   1f886:	48bd      	ldr	r0, [pc, #756]	; (1fb7c <nrf_modem_os_errno_set+0x30c>)
   1f888:	f00e fa7e 	bl	2dd88 <printk>
   1f88c:	4621      	mov	r1, r4
   1f88e:	48bc      	ldr	r0, [pc, #752]	; (1fb80 <nrf_modem_os_errno_set+0x310>)
   1f890:	f00e fa7a 	bl	2dd88 <printk>
   1f894:	f240 115f 	movw	r1, #351	; 0x15f
   1f898:	48b6      	ldr	r0, [pc, #728]	; (1fb74 <nrf_modem_os_errno_set+0x304>)
   1f89a:	f00e fd5b 	bl	2e354 <assert_post_action>
   1f89e:	4bb9      	ldr	r3, [pc, #740]	; (1fb84 <nrf_modem_os_errno_set+0x314>)
   1f8a0:	4ab9      	ldr	r2, [pc, #740]	; (1fb88 <nrf_modem_os_errno_set+0x318>)
		LOG_ERR("Untranslated errno %d set by nrf_modem_lib!", err_code);
   1f8a2:	4621      	mov	r1, r4
   1f8a4:	1ad2      	subs	r2, r2, r3
   1f8a6:	08d2      	lsrs	r2, r2, #3
   1f8a8:	0192      	lsls	r2, r2, #6
   1f8aa:	48b8      	ldr	r0, [pc, #736]	; (1fb8c <nrf_modem_os_errno_set+0x31c>)
   1f8ac:	f042 0201 	orr.w	r2, r2, #1
   1f8b0:	f00e fdab 	bl	2e40a <log_1>
		errno = 0xBAADBAAD;
   1f8b4:	f010 fdfe 	bl	304b4 <__errno>
   1f8b8:	4bb5      	ldr	r3, [pc, #724]	; (1fb90 <nrf_modem_os_errno_set+0x320>)
   1f8ba:	e0c0      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
   1f8bc:	1e43      	subs	r3, r0, #1
   1f8be:	2b3c      	cmp	r3, #60	; 0x3c
   1f8c0:	d8dd      	bhi.n	1f87e <nrf_modem_os_errno_set+0xe>
   1f8c2:	a201      	add	r2, pc, #4	; (adr r2, 1f8c8 <nrf_modem_os_errno_set+0x58>)
   1f8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f8c8:	0001fa39 	.word	0x0001fa39
   1f8cc:	0001fa43 	.word	0x0001fa43
   1f8d0:	0001f87f 	.word	0x0001f87f
   1f8d4:	0001f87f 	.word	0x0001f87f
   1f8d8:	0001fa4b 	.word	0x0001fa4b
   1f8dc:	0001f87f 	.word	0x0001f87f
   1f8e0:	0001f87f 	.word	0x0001f87f
   1f8e4:	0001fa53 	.word	0x0001fa53
   1f8e8:	0001fa5b 	.word	0x0001fa5b
   1f8ec:	0001f87f 	.word	0x0001f87f
   1f8f0:	0001f87f 	.word	0x0001f87f
   1f8f4:	0001fa63 	.word	0x0001fa63
   1f8f8:	0001fa6b 	.word	0x0001fa6b
   1f8fc:	0001fa73 	.word	0x0001fa73
   1f900:	0001f87f 	.word	0x0001f87f
   1f904:	0001f87f 	.word	0x0001f87f
   1f908:	0001f87f 	.word	0x0001f87f
   1f90c:	0001f87f 	.word	0x0001f87f
   1f910:	0001f87f 	.word	0x0001f87f
   1f914:	0001f87f 	.word	0x0001f87f
   1f918:	0001f87f 	.word	0x0001f87f
   1f91c:	0001fa7b 	.word	0x0001fa7b
   1f920:	0001f87f 	.word	0x0001f87f
   1f924:	0001fa83 	.word	0x0001fa83
   1f928:	0001f87f 	.word	0x0001f87f
   1f92c:	0001f87f 	.word	0x0001f87f
   1f930:	0001f87f 	.word	0x0001f87f
   1f934:	0001f87f 	.word	0x0001f87f
   1f938:	0001f87f 	.word	0x0001f87f
   1f93c:	0001f87f 	.word	0x0001f87f
   1f940:	0001f87f 	.word	0x0001f87f
   1f944:	0001f87f 	.word	0x0001f87f
   1f948:	0001f87f 	.word	0x0001f87f
   1f94c:	0001f87f 	.word	0x0001f87f
   1f950:	0001fa8b 	.word	0x0001fa8b
   1f954:	0001f87f 	.word	0x0001f87f
   1f958:	0001fa93 	.word	0x0001fa93
   1f95c:	0001f87f 	.word	0x0001f87f
   1f960:	0001f87f 	.word	0x0001f87f
   1f964:	0001fb63 	.word	0x0001fb63
   1f968:	0001fa9b 	.word	0x0001fa9b
   1f96c:	0001faa3 	.word	0x0001faa3
   1f970:	0001faab 	.word	0x0001faab
   1f974:	0001fab3 	.word	0x0001fab3
   1f978:	0001fabb 	.word	0x0001fabb
   1f97c:	0001f87f 	.word	0x0001f87f
   1f980:	0001fac3 	.word	0x0001fac3
   1f984:	0001facb 	.word	0x0001facb
   1f988:	0001f87f 	.word	0x0001f87f
   1f98c:	0001fad3 	.word	0x0001fad3
   1f990:	0001fadb 	.word	0x0001fadb
   1f994:	0001fae3 	.word	0x0001fae3
   1f998:	0001fb6b 	.word	0x0001fb6b
   1f99c:	0001faeb 	.word	0x0001faeb
   1f9a0:	0001f87f 	.word	0x0001f87f
   1f9a4:	0001faf3 	.word	0x0001faf3
   1f9a8:	0001fafb 	.word	0x0001fafb
   1f9ac:	0001f87f 	.word	0x0001f87f
   1f9b0:	0001f87f 	.word	0x0001f87f
   1f9b4:	0001fb03 	.word	0x0001fb03
   1f9b8:	0001fb0b 	.word	0x0001fb0b
	switch (err_code) {
   1f9bc:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   1f9c0:	2b18      	cmp	r3, #24
   1f9c2:	f63f af5c 	bhi.w	1f87e <nrf_modem_os_errno_set+0xe>
   1f9c6:	2b18      	cmp	r3, #24
   1f9c8:	f63f af59 	bhi.w	1f87e <nrf_modem_os_errno_set+0xe>
   1f9cc:	a201      	add	r2, pc, #4	; (adr r2, 1f9d4 <nrf_modem_os_errno_set+0x164>)
   1f9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f9d2:	bf00      	nop
   1f9d4:	0001fb13 	.word	0x0001fb13
   1f9d8:	0001f87f 	.word	0x0001f87f
   1f9dc:	0001f87f 	.word	0x0001f87f
   1f9e0:	0001f87f 	.word	0x0001f87f
   1f9e4:	0001f87f 	.word	0x0001f87f
   1f9e8:	0001f87f 	.word	0x0001f87f
   1f9ec:	0001f87f 	.word	0x0001f87f
   1f9f0:	0001fb1b 	.word	0x0001fb1b
   1f9f4:	0001f87f 	.word	0x0001f87f
   1f9f8:	0001fb2b 	.word	0x0001fb2b
   1f9fc:	0001fb23 	.word	0x0001fb23
   1fa00:	0001f87f 	.word	0x0001f87f
   1fa04:	0001f87f 	.word	0x0001f87f
   1fa08:	0001f87f 	.word	0x0001f87f
   1fa0c:	0001f87f 	.word	0x0001f87f
   1fa10:	0001f87f 	.word	0x0001f87f
   1fa14:	0001f87f 	.word	0x0001f87f
   1fa18:	0001f87f 	.word	0x0001f87f
   1fa1c:	0001f87f 	.word	0x0001f87f
   1fa20:	0001f87f 	.word	0x0001f87f
   1fa24:	0001fb33 	.word	0x0001fb33
   1fa28:	0001fb3b 	.word	0x0001fb3b
   1fa2c:	0001fb45 	.word	0x0001fb45
   1fa30:	0001fb4f 	.word	0x0001fb4f
   1fa34:	0001fb59 	.word	0x0001fb59
		errno = EPERM;
   1fa38:	f010 fd3c 	bl	304b4 <__errno>
   1fa3c:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   1fa3e:	6003      	str	r3, [r0, #0]
}
   1fa40:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   1fa42:	f010 fd37 	bl	304b4 <__errno>
   1fa46:	2302      	movs	r3, #2
   1fa48:	e7f9      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EIO;
   1fa4a:	f010 fd33 	bl	304b4 <__errno>
   1fa4e:	2305      	movs	r3, #5
   1fa50:	e7f5      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOEXEC;
   1fa52:	f010 fd2f 	bl	304b4 <__errno>
   1fa56:	2308      	movs	r3, #8
   1fa58:	e7f1      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EBADF;
   1fa5a:	f010 fd2b 	bl	304b4 <__errno>
   1fa5e:	2309      	movs	r3, #9
   1fa60:	e7ed      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOMEM;
   1fa62:	f010 fd27 	bl	304b4 <__errno>
   1fa66:	230c      	movs	r3, #12
   1fa68:	e7e9      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EACCES;
   1fa6a:	f010 fd23 	bl	304b4 <__errno>
   1fa6e:	230d      	movs	r3, #13
   1fa70:	e7e5      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EFAULT;
   1fa72:	f010 fd1f 	bl	304b4 <__errno>
   1fa76:	230e      	movs	r3, #14
   1fa78:	e7e1      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EINVAL;
   1fa7a:	f010 fd1b 	bl	304b4 <__errno>
   1fa7e:	2316      	movs	r3, #22
   1fa80:	e7dd      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EMFILE;
   1fa82:	f010 fd17 	bl	304b4 <__errno>
   1fa86:	2318      	movs	r3, #24
   1fa88:	e7d9      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EAGAIN;
   1fa8a:	f010 fd13 	bl	304b4 <__errno>
   1fa8e:	230b      	movs	r3, #11
   1fa90:	e7d5      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EDOM;
   1fa92:	f010 fd0f 	bl	304b4 <__errno>
   1fa96:	2321      	movs	r3, #33	; 0x21
   1fa98:	e7d1      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EPROTOTYPE;
   1fa9a:	f010 fd0b 	bl	304b4 <__errno>
   1fa9e:	236b      	movs	r3, #107	; 0x6b
   1faa0:	e7cd      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOPROTOOPT;
   1faa2:	f010 fd07 	bl	304b4 <__errno>
   1faa6:	236d      	movs	r3, #109	; 0x6d
   1faa8:	e7c9      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EPROTONOSUPPORT;
   1faaa:	f010 fd03 	bl	304b4 <__errno>
   1faae:	237b      	movs	r3, #123	; 0x7b
   1fab0:	e7c5      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ESOCKTNOSUPPORT;
   1fab2:	f010 fcff 	bl	304b4 <__errno>
   1fab6:	237c      	movs	r3, #124	; 0x7c
   1fab8:	e7c1      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EOPNOTSUPP;
   1faba:	f010 fcfb 	bl	304b4 <__errno>
   1fabe:	235f      	movs	r3, #95	; 0x5f
   1fac0:	e7bd      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EAFNOSUPPORT;
   1fac2:	f010 fcf7 	bl	304b4 <__errno>
   1fac6:	236a      	movs	r3, #106	; 0x6a
   1fac8:	e7b9      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EADDRINUSE;
   1faca:	f010 fcf3 	bl	304b4 <__errno>
   1face:	2370      	movs	r3, #112	; 0x70
   1fad0:	e7b5      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENETDOWN;
   1fad2:	f010 fcef 	bl	304b4 <__errno>
   1fad6:	2373      	movs	r3, #115	; 0x73
   1fad8:	e7b1      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENETUNREACH;
   1fada:	f010 fceb 	bl	304b4 <__errno>
   1fade:	2372      	movs	r3, #114	; 0x72
   1fae0:	e7ad      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENETRESET;
   1fae2:	f010 fce7 	bl	304b4 <__errno>
   1fae6:	237e      	movs	r3, #126	; 0x7e
   1fae8:	e7a9      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNRESET;
   1faea:	f010 fce3 	bl	304b4 <__errno>
   1faee:	2368      	movs	r3, #104	; 0x68
   1faf0:	e7a5      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EISCONN;
   1faf2:	f010 fcdf 	bl	304b4 <__errno>
   1faf6:	237f      	movs	r3, #127	; 0x7f
   1faf8:	e7a1      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOTCONN;
   1fafa:	f010 fcdb 	bl	304b4 <__errno>
   1fafe:	2380      	movs	r3, #128	; 0x80
   1fb00:	e79d      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ETIMEDOUT;
   1fb02:	f010 fcd7 	bl	304b4 <__errno>
   1fb06:	2374      	movs	r3, #116	; 0x74
   1fb08:	e799      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNREFUSED;
   1fb0a:	f010 fcd3 	bl	304b4 <__errno>
   1fb0e:	236f      	movs	r3, #111	; 0x6f
   1fb10:	e795      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOBUFS;
   1fb12:	f010 fccf 	bl	304b4 <__errno>
   1fb16:	2369      	movs	r3, #105	; 0x69
   1fb18:	e791      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EHOSTDOWN;
   1fb1a:	f010 fccb 	bl	304b4 <__errno>
   1fb1e:	2375      	movs	r3, #117	; 0x75
   1fb20:	e78d      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EINPROGRESS;
   1fb22:	f010 fcc7 	bl	304b4 <__errno>
   1fb26:	2377      	movs	r3, #119	; 0x77
   1fb28:	e789      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EALREADY;
   1fb2a:	f010 fcc3 	bl	304b4 <__errno>
   1fb2e:	2378      	movs	r3, #120	; 0x78
   1fb30:	e785      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ECANCELED;
   1fb32:	f010 fcbf 	bl	304b4 <__errno>
   1fb36:	238c      	movs	r3, #140	; 0x8c
   1fb38:	e781      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOKEY;
   1fb3a:	f010 fcbb 	bl	304b4 <__errno>
   1fb3e:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1fb42:	e77c      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYEXPIRED;
   1fb44:	f010 fcb6 	bl	304b4 <__errno>
   1fb48:	f240 73d2 	movw	r3, #2002	; 0x7d2
   1fb4c:	e777      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYREVOKED;
   1fb4e:	f010 fcb1 	bl	304b4 <__errno>
   1fb52:	f240 73d3 	movw	r3, #2003	; 0x7d3
   1fb56:	e772      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYREJECTED;
   1fb58:	f010 fcac 	bl	304b4 <__errno>
   1fb5c:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1fb60:	e76d      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = EMSGSIZE;
   1fb62:	f010 fca7 	bl	304b4 <__errno>
   1fb66:	237a      	movs	r3, #122	; 0x7a
   1fb68:	e769      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNABORTED;
   1fb6a:	f010 fca3 	bl	304b4 <__errno>
   1fb6e:	2371      	movs	r3, #113	; 0x71
   1fb70:	e765      	b.n	1fa3e <nrf_modem_os_errno_set+0x1ce>
   1fb72:	bf00      	nop
   1fb74:	0003b1ea 	.word	0x0003b1ea
   1fb78:	0003e845 	.word	0x0003e845
   1fb7c:	00037f2c 	.word	0x00037f2c
   1fb80:	0003b21b 	.word	0x0003b21b
   1fb84:	000364b0 	.word	0x000364b0
   1fb88:	000365c0 	.word	0x000365c0
   1fb8c:	0003b249 	.word	0x0003b249
   1fb90:	baadbaad 	.word	0xbaadbaad

0001fb94 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fb98:	4b01      	ldr	r3, [pc, #4]	; (1fba0 <nrf_modem_os_application_irq_set+0xc>)
   1fb9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1fb9e:	4770      	bx	lr
   1fba0:	e000e100 	.word	0xe000e100

0001fba4 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fba8:	4b01      	ldr	r3, [pc, #4]	; (1fbb0 <nrf_modem_os_application_irq_clear+0xc>)
   1fbaa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1fbae:	4770      	bx	lr
   1fbb0:	e000e100 	.word	0xe000e100

0001fbb4 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fbb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1fbb8:	4b01      	ldr	r3, [pc, #4]	; (1fbc0 <nrf_modem_os_trace_irq_set+0xc>)
   1fbba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1fbbe:	4770      	bx	lr
   1fbc0:	e000e100 	.word	0xe000e100

0001fbc4 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fbc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1fbc8:	4b01      	ldr	r3, [pc, #4]	; (1fbd0 <nrf_modem_os_trace_irq_clear+0xc>)
   1fbca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1fbce:	4770      	bx	lr
   1fbd0:	e000e100 	.word	0xe000e100

0001fbd4 <nrf_modem_os_alloc>:
	nrfx_uarte_init(&uarte_inst, &config, NULL);
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   1fbd4:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   1fbd6:	2200      	movs	r2, #0
   1fbd8:	2300      	movs	r3, #0
   1fbda:	4801      	ldr	r0, [pc, #4]	; (1fbe0 <nrf_modem_os_alloc+0xc>)
   1fbdc:	f015 baf3 	b.w	351c6 <k_heap_alloc>
   1fbe0:	20014e00 	.word	0x20014e00

0001fbe4 <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   1fbe4:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   1fbe6:	4801      	ldr	r0, [pc, #4]	; (1fbec <nrf_modem_os_free+0x8>)
   1fbe8:	f008 bf26 	b.w	28a38 <k_heap_free>
   1fbec:	20014e00 	.word	0x20014e00

0001fbf0 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   1fbf0:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   1fbf2:	2200      	movs	r2, #0
   1fbf4:	2300      	movs	r3, #0
   1fbf6:	4801      	ldr	r0, [pc, #4]	; (1fbfc <nrf_modem_os_shm_tx_alloc+0xc>)
   1fbf8:	f015 bae5 	b.w	351c6 <k_heap_alloc>
   1fbfc:	20016688 	.word	0x20016688

0001fc00 <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   1fc00:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   1fc02:	4801      	ldr	r0, [pc, #4]	; (1fc08 <nrf_modem_os_shm_tx_free+0x8>)
   1fc04:	f008 bf18 	b.w	28a38 <k_heap_free>
   1fc08:	20016688 	.word	0x20016688

0001fc0c <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   1fc0c:	b510      	push	{r4, lr}
	list->head = NULL;
   1fc0e:	2400      	movs	r4, #0
   1fc10:	4b0c      	ldr	r3, [pc, #48]	; (1fc44 <nrf_modem_os_init+0x38>)
	list->tail = NULL;
   1fc12:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fc16:	4b0c      	ldr	r3, [pc, #48]	; (1fc48 <nrf_modem_os_init+0x3c>)
   1fc18:	e8d3 2fef 	ldaex	r2, [r3]
   1fc1c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1fc20:	2900      	cmp	r1, #0
   1fc22:	d1f9      	bne.n	1fc18 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   1fc24:	f013 fb8f 	bl	33346 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
   1fc28:	f013 fb82 	bl	33330 <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   1fc2c:	4b07      	ldr	r3, [pc, #28]	; (1fc4c <nrf_modem_os_init+0x40>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   1fc2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   1fc32:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1fc34:	4b06      	ldr	r3, [pc, #24]	; (1fc50 <nrf_modem_os_init+0x44>)
	k_heap_init(&shmem_heap,
   1fc36:	4907      	ldr	r1, [pc, #28]	; (1fc54 <nrf_modem_os_init+0x48>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1fc38:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   1fc3a:	4807      	ldr	r0, [pc, #28]	; (1fc58 <nrf_modem_os_init+0x4c>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   1fc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   1fc40:	f015 bab9 	b.w	351b6 <k_heap_init>
   1fc44:	200166a0 	.word	0x200166a0
   1fc48:	20016680 	.word	0x20016680
   1fc4c:	2001627c 	.word	0x2001627c
   1fc50:	20016684 	.word	0x20016684
   1fc54:	200104e8 	.word	0x200104e8
   1fc58:	20016688 	.word	0x20016688

0001fc5c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1fc5c:	f240 2302 	movw	r3, #514	; 0x202
   1fc60:	4298      	cmp	r0, r3
   1fc62:	f000 80db 	beq.w	1fe1c <z_to_nrf_optname+0x1c0>
   1fc66:	dc07      	bgt.n	1fc78 <z_to_nrf_optname+0x1c>
   1fc68:	2801      	cmp	r0, #1
   1fc6a:	d05b      	beq.n	1fd24 <z_to_nrf_optname+0xc8>
   1fc6c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1fc70:	d034      	beq.n	1fcdc <z_to_nrf_optname+0x80>
   1fc72:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1fc76:	4770      	bx	lr
	switch (z_in_level) {
   1fc78:	f240 2303 	movw	r3, #515	; 0x203
   1fc7c:	4298      	cmp	r0, r3
   1fc7e:	d1f8      	bne.n	1fc72 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   1fc80:	3901      	subs	r1, #1
   1fc82:	2913      	cmp	r1, #19
   1fc84:	d8f5      	bhi.n	1fc72 <z_to_nrf_optname+0x16>
   1fc86:	a301      	add	r3, pc, #4	; (adr r3, 1fc8c <z_to_nrf_optname+0x30>)
   1fc88:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1fc8c:	0001fe2b 	.word	0x0001fe2b
   1fc90:	0001fe05 	.word	0x0001fe05
   1fc94:	0001fe09 	.word	0x0001fe09
   1fc98:	0001fd35 	.word	0x0001fd35
   1fc9c:	0001fe0d 	.word	0x0001fe0d
   1fca0:	0001fe11 	.word	0x0001fe11
   1fca4:	0001fe15 	.word	0x0001fe15
   1fca8:	0001fc73 	.word	0x0001fc73
   1fcac:	0001fc73 	.word	0x0001fc73
   1fcb0:	0001fc73 	.word	0x0001fc73
   1fcb4:	0001fc73 	.word	0x0001fc73
   1fcb8:	0001fc73 	.word	0x0001fc73
   1fcbc:	0001fc73 	.word	0x0001fc73
   1fcc0:	0001fc73 	.word	0x0001fc73
   1fcc4:	0001fc73 	.word	0x0001fc73
   1fcc8:	0001fc73 	.word	0x0001fc73
   1fccc:	0001fc73 	.word	0x0001fc73
   1fcd0:	0001fc73 	.word	0x0001fc73
   1fcd4:	0001fc73 	.word	0x0001fc73
   1fcd8:	0001fe19 	.word	0x0001fe19
		switch (z_in_optname) {
   1fcdc:	3901      	subs	r1, #1
   1fcde:	290b      	cmp	r1, #11
   1fce0:	d8c7      	bhi.n	1fc72 <z_to_nrf_optname+0x16>
   1fce2:	a301      	add	r3, pc, #4	; (adr r3, 1fce8 <z_to_nrf_optname+0x8c>)
   1fce4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1fce8:	0001fe05 	.word	0x0001fe05
   1fcec:	0001fe0d 	.word	0x0001fe0d
   1fcf0:	0001fe11 	.word	0x0001fe11
   1fcf4:	0001fe15 	.word	0x0001fe15
   1fcf8:	0001fd35 	.word	0x0001fd35
   1fcfc:	0001fe2b 	.word	0x0001fe2b
   1fd00:	0001fc73 	.word	0x0001fc73
   1fd04:	0001fc73 	.word	0x0001fc73
   1fd08:	0001fc73 	.word	0x0001fc73
   1fd0c:	0001fe09 	.word	0x0001fe09
   1fd10:	0001fd19 	.word	0x0001fd19
   1fd14:	0001fd21 	.word	0x0001fd21
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   1fd18:	2309      	movs	r3, #9
	int retval = 0;
   1fd1a:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1fd1c:	6013      	str	r3, [r2, #0]
			break;
   1fd1e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   1fd20:	2308      	movs	r3, #8
   1fd22:	e7fa      	b.n	1fd1a <z_to_nrf_optname+0xbe>
		switch (z_in_optname) {
   1fd24:	2937      	cmp	r1, #55	; 0x37
   1fd26:	dca4      	bgt.n	1fc72 <z_to_nrf_optname+0x16>
   1fd28:	2913      	cmp	r1, #19
   1fd2a:	dc05      	bgt.n	1fd38 <z_to_nrf_optname+0xdc>
   1fd2c:	2902      	cmp	r1, #2
   1fd2e:	d055      	beq.n	1fddc <z_to_nrf_optname+0x180>
   1fd30:	2904      	cmp	r1, #4
   1fd32:	d19e      	bne.n	1fc72 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   1fd34:	2304      	movs	r3, #4
   1fd36:	e7f0      	b.n	1fd1a <z_to_nrf_optname+0xbe>
   1fd38:	3914      	subs	r1, #20
   1fd3a:	2923      	cmp	r1, #35	; 0x23
   1fd3c:	d899      	bhi.n	1fc72 <z_to_nrf_optname+0x16>
   1fd3e:	a301      	add	r3, pc, #4	; (adr r3, 1fd44 <z_to_nrf_optname+0xe8>)
   1fd40:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1fd44:	0001fe19 	.word	0x0001fe19
   1fd48:	0001fdd5 	.word	0x0001fdd5
   1fd4c:	0001fc73 	.word	0x0001fc73
   1fd50:	0001fc73 	.word	0x0001fc73
   1fd54:	0001fc73 	.word	0x0001fc73
   1fd58:	0001fdd9 	.word	0x0001fdd9
   1fd5c:	0001fc73 	.word	0x0001fc73
   1fd60:	0001fc73 	.word	0x0001fc73
   1fd64:	0001fc73 	.word	0x0001fc73
   1fd68:	0001fc73 	.word	0x0001fc73
   1fd6c:	0001fde1 	.word	0x0001fde1
   1fd70:	0001fde5 	.word	0x0001fde5
   1fd74:	0001fde9 	.word	0x0001fde9
   1fd78:	0001fc73 	.word	0x0001fc73
   1fd7c:	0001fc73 	.word	0x0001fc73
   1fd80:	0001fc73 	.word	0x0001fc73
   1fd84:	0001fc73 	.word	0x0001fc73
   1fd88:	0001fc73 	.word	0x0001fc73
   1fd8c:	0001fc73 	.word	0x0001fc73
   1fd90:	0001fc73 	.word	0x0001fc73
   1fd94:	0001fc73 	.word	0x0001fc73
   1fd98:	0001fc73 	.word	0x0001fc73
   1fd9c:	0001fc73 	.word	0x0001fc73
   1fda0:	0001fc73 	.word	0x0001fc73
   1fda4:	0001fc73 	.word	0x0001fc73
   1fda8:	0001fc73 	.word	0x0001fc73
   1fdac:	0001fc73 	.word	0x0001fc73
   1fdb0:	0001fc73 	.word	0x0001fc73
   1fdb4:	0001fc73 	.word	0x0001fc73
   1fdb8:	0001fc73 	.word	0x0001fc73
   1fdbc:	0001fdf1 	.word	0x0001fdf1
   1fdc0:	0001fdf5 	.word	0x0001fdf5
   1fdc4:	0001fdf9 	.word	0x0001fdf9
   1fdc8:	0001fdfd 	.word	0x0001fdfd
   1fdcc:	0001fe01 	.word	0x0001fe01
   1fdd0:	0001fded 	.word	0x0001fded
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   1fdd4:	2315      	movs	r3, #21
   1fdd6:	e7a0      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   1fdd8:	2319      	movs	r3, #25
   1fdda:	e79e      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   1fddc:	2328      	movs	r3, #40	; 0x28
   1fdde:	e79c      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   1fde0:	231e      	movs	r3, #30
   1fde2:	e79a      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   1fde4:	231f      	movs	r3, #31
   1fde6:	e798      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   1fde8:	2320      	movs	r3, #32
   1fdea:	e796      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   1fdec:	2337      	movs	r3, #55	; 0x37
   1fdee:	e794      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   1fdf0:	2332      	movs	r3, #50	; 0x32
   1fdf2:	e792      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   1fdf4:	2333      	movs	r3, #51	; 0x33
   1fdf6:	e790      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   1fdf8:	2334      	movs	r3, #52	; 0x34
   1fdfa:	e78e      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   1fdfc:	2335      	movs	r3, #53	; 0x35
   1fdfe:	e78c      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   1fe00:	2336      	movs	r3, #54	; 0x36
   1fe02:	e78a      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   1fe04:	2302      	movs	r3, #2
   1fe06:	e788      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   1fe08:	2303      	movs	r3, #3
   1fe0a:	e786      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1fe0c:	2305      	movs	r3, #5
   1fe0e:	e784      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   1fe10:	2306      	movs	r3, #6
   1fe12:	e782      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   1fe14:	2307      	movs	r3, #7
   1fe16:	e780      	b.n	1fd1a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1fe18:	2314      	movs	r3, #20
   1fe1a:	e77e      	b.n	1fd1a <z_to_nrf_optname+0xbe>
		switch (z_in_optname) {
   1fe1c:	2902      	cmp	r1, #2
   1fe1e:	d0f1      	beq.n	1fe04 <z_to_nrf_optname+0x1a8>
   1fe20:	2903      	cmp	r1, #3
   1fe22:	d0f1      	beq.n	1fe08 <z_to_nrf_optname+0x1ac>
   1fe24:	2901      	cmp	r1, #1
   1fe26:	f47f af24 	bne.w	1fc72 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_FW_VERSION;
   1fe2a:	2301      	movs	r3, #1
   1fe2c:	e775      	b.n	1fd1a <z_to_nrf_optname+0xbe>
   1fe2e:	bf00      	nop

0001fe30 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1fe30:	f04f 32ff 	mov.w	r2, #4294967295
   1fe34:	4b05      	ldr	r3, [pc, #20]	; (1fe4c <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   1fe36:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1fe38:	601a      	str	r2, [r3, #0]
   1fe3a:	609a      	str	r2, [r3, #8]
   1fe3c:	611a      	str	r2, [r3, #16]
   1fe3e:	619a      	str	r2, [r3, #24]
   1fe40:	621a      	str	r2, [r3, #32]
   1fe42:	629a      	str	r2, [r3, #40]	; 0x28
   1fe44:	631a      	str	r2, [r3, #48]	; 0x30
   1fe46:	639a      	str	r2, [r3, #56]	; 0x38
}
   1fe48:	4770      	bx	lr
   1fe4a:	bf00      	nop
   1fe4c:	20016700 	.word	0x20016700

0001fe50 <nrf91_socket_offload_ioctl>:
{
   1fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe54:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   1fe58:	b091      	sub	sp, #68	; 0x44
   1fe5a:	2b03      	cmp	r3, #3
   1fe5c:	d878      	bhi.n	1ff50 <nrf91_socket_offload_ioctl+0x100>
   1fe5e:	e8df f003 	tbb	[pc, r3]
   1fe62:	0295      	.short	0x0295
   1fe64:	7308      	.short	0x7308
		return 0;
   1fe66:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   1fe6a:	4620      	mov	r0, r4
   1fe6c:	b011      	add	sp, #68	; 0x44
   1fe6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   1fe72:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   1fe76:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   1fe7a:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   1fe7c:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   1fe80:	4668      	mov	r0, sp
   1fe82:	2240      	movs	r2, #64	; 0x40
   1fe84:	f015 fb9f 	bl	355c6 <memset>
	for (int i = 0; i < nfds; i++) {
   1fe88:	466e      	mov	r6, sp
   1fe8a:	464d      	mov	r5, r9
   1fe8c:	464f      	mov	r7, r9
	int retval = 0;
   1fe8e:	4654      	mov	r4, sl
		tmp[i].events = 0;
   1fe90:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   1fe92:	4940      	ldr	r1, [pc, #256]	; (1ff94 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   1fe94:	45d0      	cmp	r8, sl
   1fe96:	dc32      	bgt.n	1fefe <nrf91_socket_offload_ioctl+0xae>
	if (retval > 0) {
   1fe98:	2c00      	cmp	r4, #0
   1fe9a:	dce6      	bgt.n	1fe6a <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1fe9c:	465a      	mov	r2, fp
   1fe9e:	4641      	mov	r1, r8
   1fea0:	4668      	mov	r0, sp
   1fea2:	f015 f94b 	bl	3513c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1fea6:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1fea8:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1feaa:	4598      	cmp	r8, r3
   1feac:	dddd      	ble.n	1fe6a <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   1feae:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   1feb2:	2a00      	cmp	r2, #0
   1feb4:	db20      	blt.n	1fef8 <nrf91_socket_offload_ioctl+0xa8>
		if (tmp[i].revents & NRF_POLLIN) {
   1feb6:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   1feba:	88d2      	ldrh	r2, [r2, #6]
   1febc:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   1febe:	bf42      	ittt	mi
   1fec0:	88e9      	ldrhmi	r1, [r5, #6]
   1fec2:	f041 0101 	orrmi.w	r1, r1, #1
   1fec6:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1fec8:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   1feca:	bf42      	ittt	mi
   1fecc:	88e9      	ldrhmi	r1, [r5, #6]
   1fece:	f041 0104 	orrmi.w	r1, r1, #4
   1fed2:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1fed4:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1fed6:	bf42      	ittt	mi
   1fed8:	88e9      	ldrhmi	r1, [r5, #6]
   1feda:	f041 0108 	orrmi.w	r1, r1, #8
   1fede:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   1fee0:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   1fee2:	bf42      	ittt	mi
   1fee4:	88e9      	ldrhmi	r1, [r5, #6]
   1fee6:	f041 0120 	orrmi.w	r1, r1, #32
   1feea:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   1feec:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   1feee:	bf42      	ittt	mi
   1fef0:	88ea      	ldrhmi	r2, [r5, #6]
   1fef2:	f042 0210 	orrmi.w	r2, r2, #16
   1fef6:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1fef8:	3301      	adds	r3, #1
   1fefa:	3508      	adds	r5, #8
   1fefc:	e7d5      	b.n	1feaa <nrf91_socket_offload_ioctl+0x5a>
		if (fds[i].fd < 0) {
   1fefe:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   1ff00:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   1ff02:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   1ff04:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   1ff06:	da05      	bge.n	1ff14 <nrf91_socket_offload_ioctl+0xc4>
			tmp[i].fd = fds[i].fd;
   1ff08:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1ff0a:	f10a 0a01 	add.w	sl, sl, #1
   1ff0e:	3608      	adds	r6, #8
   1ff10:	3708      	adds	r7, #8
   1ff12:	e7bf      	b.n	1fe94 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   1ff14:	2286      	movs	r2, #134	; 0x86
   1ff16:	f7f3 f8e9 	bl	130ec <z_get_fd_obj>
			if (obj != NULL) {
   1ff1a:	2300      	movs	r3, #0
   1ff1c:	491d      	ldr	r1, [pc, #116]	; (1ff94 <nrf91_socket_offload_ioctl+0x144>)
   1ff1e:	b178      	cbz	r0, 1ff40 <nrf91_socket_offload_ioctl+0xf0>
				tmp[i].fd = OBJ_TO_SD(obj);
   1ff20:	6802      	ldr	r2, [r0, #0]
   1ff22:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   1ff24:	88b8      	ldrh	r0, [r7, #4]
   1ff26:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   1ff28:	bf42      	ittt	mi
   1ff2a:	88b2      	ldrhmi	r2, [r6, #4]
   1ff2c:	f042 0201 	orrmi.w	r2, r2, #1
   1ff30:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   1ff32:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   1ff34:	bf42      	ittt	mi
   1ff36:	88b2      	ldrhmi	r2, [r6, #4]
   1ff38:	f042 0202 	orrmi.w	r2, r2, #2
   1ff3c:	80b2      	strhmi	r2, [r6, #4]
   1ff3e:	e7e4      	b.n	1ff0a <nrf91_socket_offload_ioctl+0xba>
				fds[i].revents = POLLNVAL;
   1ff40:	2220      	movs	r2, #32
				retval++;
   1ff42:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   1ff44:	80fa      	strh	r2, [r7, #6]
				retval++;
   1ff46:	e7ed      	b.n	1ff24 <nrf91_socket_offload_ioctl+0xd4>
		ctx->lock = va_arg(args, struct k_mutex *);
   1ff48:	6813      	ldr	r3, [r2, #0]
		return 0;
   1ff4a:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   1ff4c:	6043      	str	r3, [r0, #4]
		return 0;
   1ff4e:	e78c      	b.n	1fe6a <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   1ff50:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   1ff52:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   1ff54:	d00b      	beq.n	1ff6e <nrf91_socket_offload_ioctl+0x11e>
   1ff56:	2904      	cmp	r1, #4
   1ff58:	d111      	bne.n	1ff7e <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   1ff5a:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1ff5c:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1ff60:	d10d      	bne.n	1ff7e <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1ff62:	2101      	movs	r1, #1
   1ff64:	1392      	asrs	r2, r2, #14
   1ff66:	f015 f8eb 	bl	35140 <nrf_fcntl>
   1ff6a:	4604      	mov	r4, r0
		break;
   1ff6c:	e77d      	b.n	1fe6a <nrf91_socket_offload_ioctl+0x1a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1ff6e:	2200      	movs	r2, #0
   1ff70:	2102      	movs	r1, #2
   1ff72:	f015 f8e5 	bl	35140 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1ff76:	0380      	lsls	r0, r0, #14
   1ff78:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   1ff7c:	e775      	b.n	1fe6a <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   1ff7e:	f010 fa99 	bl	304b4 <__errno>
   1ff82:	2316      	movs	r3, #22
	return retval;
   1ff84:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   1ff88:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   1ff8a:	e76e      	b.n	1fe6a <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   1ff8c:	f06f 0411 	mvn.w	r4, #17
   1ff90:	e76b      	b.n	1fe6a <nrf91_socket_offload_ioctl+0x1a>
   1ff92:	bf00      	nop
   1ff94:	00037048 	.word	0x00037048

0001ff98 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1ff98:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1ff9a:	4b03      	ldr	r3, [pc, #12]	; (1ffa8 <nrf91_socket_iface_init+0x10>)
   1ff9c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1ff9e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1ffa0:	4802      	ldr	r0, [pc, #8]	; (1ffac <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1ffa2:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1ffa4:	f7f5 bc6e 	b.w	15884 <socket_offload_dns_register>
   1ffa8:	200166fc 	.word	0x200166fc
   1ffac:	00037040 	.word	0x00037040

0001ffb0 <nrf91_socket_offload_getaddrinfo>:
{
   1ffb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ffb4:	4614      	mov	r4, r2
   1ffb6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1ffb8:	2100      	movs	r1, #0
{
   1ffba:	b093      	sub	sp, #76	; 0x4c
   1ffbc:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ffbe:	2220      	movs	r2, #32
   1ffc0:	a802      	add	r0, sp, #8
{
   1ffc2:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1ffc4:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ffc6:	f015 fafe 	bl	355c6 <memset>
	if (hints != NULL) {
   1ffca:	b194      	cbz	r4, 1fff2 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1ffcc:	4620      	mov	r0, r4
   1ffce:	a902      	add	r1, sp, #8
   1ffd0:	f013 fa94 	bl	334fc <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1ffd4:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   1ffd8:	f000 80e0 	beq.w	2019c <nrf91_socket_offload_getaddrinfo+0x1ec>
		} else if (error == -EAFNOSUPPORT) {
   1ffdc:	306a      	adds	r0, #106	; 0x6a
   1ffde:	f000 80e0 	beq.w	201a2 <nrf91_socket_offload_getaddrinfo+0x1f2>
		if (hints->ai_next != NULL) {
   1ffe2:	6820      	ldr	r0, [r4, #0]
   1ffe4:	b120      	cbz	r0, 1fff0 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1ffe6:	ac0a      	add	r4, sp, #40	; 0x28
   1ffe8:	4621      	mov	r1, r4
   1ffea:	f013 fa87 	bl	334fc <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1ffee:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1fff0:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1fff2:	f04f 32ff 	mov.w	r2, #4294967295
   1fff6:	f04f 33ff 	mov.w	r3, #4294967295
   1fffa:	486b      	ldr	r0, [pc, #428]	; (201a8 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   1fffc:	f013 fb50 	bl	336a0 <k_mutex_lock.constprop.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   20000:	4628      	mov	r0, r5
   20002:	4622      	mov	r2, r4
   20004:	4631      	mov	r1, r6
   20006:	ab01      	add	r3, sp, #4
   20008:	f015 f894 	bl	35134 <nrf_getaddrinfo>
	if (retval != 0) {
   2000c:	4605      	mov	r5, r0
   2000e:	b318      	cbz	r0, 20058 <nrf91_socket_offload_getaddrinfo+0xa8>
	switch (nrf_error) {
   20010:	282f      	cmp	r0, #47	; 0x2f
   20012:	f000 80bd 	beq.w	20190 <nrf91_socket_offload_getaddrinfo+0x1e0>
   20016:	dc0f      	bgt.n	20038 <nrf91_socket_offload_getaddrinfo+0x88>
   20018:	280c      	cmp	r0, #12
   2001a:	f000 80bc 	beq.w	20196 <nrf91_socket_offload_getaddrinfo+0x1e6>
		return DNS_EAI_AGAIN;
   2001e:	2823      	cmp	r0, #35	; 0x23
   20020:	bf14      	ite	ne
   20022:	f06f 050a 	mvnne.w	r5, #10
   20026:	f06f 0502 	mvneq.w	r5, #2
	k_mutex_unlock(&getaddrinfo_lock);
   2002a:	485f      	ldr	r0, [pc, #380]	; (201a8 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   2002c:	f013 f9f6 	bl	3341c <k_mutex_unlock>
}
   20030:	4628      	mov	r0, r5
   20032:	b013      	add	sp, #76	; 0x4c
   20034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   20038:	2833      	cmp	r0, #51	; 0x33
   2003a:	d006      	beq.n	2004a <nrf91_socket_offload_getaddrinfo+0x9a>
		return DNS_EAI_INPROGRESS;
   2003c:	2873      	cmp	r0, #115	; 0x73
   2003e:	bf14      	ite	ne
   20040:	f06f 050a 	mvnne.w	r5, #10
   20044:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   20048:	e7ef      	b.n	2002a <nrf91_socket_offload_getaddrinfo+0x7a>
		errno = ENETUNREACH;
   2004a:	f010 fa33 	bl	304b4 <__errno>
   2004e:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   20050:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   20054:	6003      	str	r3, [r0, #0]
   20056:	e7e8      	b.n	2002a <nrf91_socket_offload_getaddrinfo+0x7a>
	struct zsock_addrinfo *latest_z_res = NULL;
   20058:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2005a:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2005c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2005e:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   20060:	b91e      	cbnz	r6, 2006a <nrf91_socket_offload_getaddrinfo+0xba>
	nrf_freeaddrinfo(nrf_res);
   20062:	9801      	ldr	r0, [sp, #4]
   20064:	f015 f868 	bl	35138 <nrf_freeaddrinfo>
   20068:	e7df      	b.n	2002a <nrf91_socket_offload_getaddrinfo+0x7a>
					k_malloc(sizeof(struct zsock_addrinfo));
   2006a:	2050      	movs	r0, #80	; 0x50
   2006c:	f015 fa51 	bl	35512 <k_malloc>
		if (next_z_res == NULL) {
   20070:	4604      	mov	r4, r0
   20072:	2800      	cmp	r0, #0
   20074:	f000 8081 	beq.w	2017a <nrf91_socket_offload_getaddrinfo+0x1ca>
	family = nrf_to_z_family(nrf_in->ai_family);
   20078:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2007a:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2007c:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   2007e:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   20082:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   20086:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2008a:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2008c:	dc0b      	bgt.n	200a6 <nrf91_socket_offload_getaddrinfo+0xf6>
   2008e:	2900      	cmp	r1, #0
   20090:	db0b      	blt.n	200aa <nrf91_socket_offload_getaddrinfo+0xfa>
   20092:	290a      	cmp	r1, #10
   20094:	d809      	bhi.n	200aa <nrf91_socket_offload_getaddrinfo+0xfa>
   20096:	e8df f001 	tbb	[pc, r1]
   2009a:	262c      	.short	0x262c
   2009c:	0e08082a 	.word	0x0e08082a
   200a0:	08080808 	.word	0x08080808
   200a4:	28          	.byte	0x28
   200a5:	00          	.byte	0x00
   200a6:	2966      	cmp	r1, #102	; 0x66
   200a8:	d023      	beq.n	200f2 <nrf91_socket_offload_getaddrinfo+0x142>
			k_free(next_z_res);
   200aa:	4620      	mov	r0, r4
   200ac:	f015 fa2a 	bl	35504 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   200b0:	f06f 0508 	mvn.w	r5, #8
   200b4:	e063      	b.n	2017e <nrf91_socket_offload_getaddrinfo+0x1ce>
		return AF_PACKET;
   200b6:	2303      	movs	r3, #3
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   200b8:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   200ba:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   200bc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   200c0:	d043      	beq.n	2014a <nrf91_socket_offload_getaddrinfo+0x19a>
   200c2:	dc1e      	bgt.n	20102 <nrf91_socket_offload_getaddrinfo+0x152>
   200c4:	2a02      	cmp	r2, #2
   200c6:	d044      	beq.n	20152 <nrf91_socket_offload_getaddrinfo+0x1a2>
   200c8:	dc15      	bgt.n	200f6 <nrf91_socket_offload_getaddrinfo+0x146>
   200ca:	b332      	cbz	r2, 2011a <nrf91_socket_offload_getaddrinfo+0x16a>
   200cc:	2a01      	cmp	r2, #1
   200ce:	d042      	beq.n	20156 <nrf91_socket_offload_getaddrinfo+0x1a6>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   200d0:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   200d4:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   200d6:	2300      	movs	r3, #0
   200d8:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   200da:	4620      	mov	r0, r4
   200dc:	f015 fa12 	bl	35504 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   200e0:	f06f 0506 	mvn.w	r5, #6
   200e4:	e04b      	b.n	2017e <nrf91_socket_offload_getaddrinfo+0x1ce>
		return AF_LOCAL;
   200e6:	2306      	movs	r3, #6
   200e8:	e7e6      	b.n	200b8 <nrf91_socket_offload_getaddrinfo+0x108>
		return AF_INET6;
   200ea:	2302      	movs	r3, #2
   200ec:	e7e4      	b.n	200b8 <nrf91_socket_offload_getaddrinfo+0x108>
	switch (nrf_family) {
   200ee:	2301      	movs	r3, #1
   200f0:	e7e2      	b.n	200b8 <nrf91_socket_offload_getaddrinfo+0x108>
		return AF_LTE;
   200f2:	460b      	mov	r3, r1
   200f4:	e7e0      	b.n	200b8 <nrf91_socket_offload_getaddrinfo+0x108>
	switch (proto) {
   200f6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   200fa:	d1e9      	bne.n	200d0 <nrf91_socket_offload_getaddrinfo+0x120>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   200fc:	f44f 7381 	mov.w	r3, #258	; 0x102
   20100:	e025      	b.n	2014e <nrf91_socket_offload_getaddrinfo+0x19e>
	switch (proto) {
   20102:	f240 2302 	movw	r3, #514	; 0x202
   20106:	429a      	cmp	r2, r3
   20108:	d007      	beq.n	2011a <nrf91_socket_offload_getaddrinfo+0x16a>
   2010a:	f240 2303 	movw	r3, #515	; 0x203
   2010e:	429a      	cmp	r2, r3
   20110:	d003      	beq.n	2011a <nrf91_socket_offload_getaddrinfo+0x16a>
   20112:	f240 2301 	movw	r3, #513	; 0x201
   20116:	429a      	cmp	r2, r3
   20118:	d1da      	bne.n	200d0 <nrf91_socket_offload_getaddrinfo+0x120>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2011a:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2011c:	2902      	cmp	r1, #2
   2011e:	d11c      	bne.n	2015a <nrf91_socket_offload_getaddrinfo+0x1aa>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   20120:	2008      	movs	r0, #8
   20122:	f015 f9f6 	bl	35512 <k_malloc>
   20126:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   20128:	b320      	cbz	r0, 20174 <nrf91_socket_offload_getaddrinfo+0x1c4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2012a:	2308      	movs	r3, #8
   2012c:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2012e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   20130:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   20132:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   20134:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   20136:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   20138:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2013a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2013c:	f1b8 0f00 	cmp.w	r8, #0
   20140:	d123      	bne.n	2018a <nrf91_socket_offload_getaddrinfo+0x1da>
			*res = next_z_res;
   20142:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   20144:	46a0      	mov	r8, r4
   20146:	69f6      	ldr	r6, [r6, #28]
   20148:	e78a      	b.n	20060 <nrf91_socket_offload_getaddrinfo+0xb0>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2014a:	f240 1311 	movw	r3, #273	; 0x111
   2014e:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   20150:	e7e4      	b.n	2011c <nrf91_socket_offload_getaddrinfo+0x16c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   20152:	2311      	movs	r3, #17
   20154:	e7fb      	b.n	2014e <nrf91_socket_offload_getaddrinfo+0x19e>
   20156:	2306      	movs	r3, #6
   20158:	e7f9      	b.n	2014e <nrf91_socket_offload_getaddrinfo+0x19e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2015a:	290a      	cmp	r1, #10
   2015c:	d1bd      	bne.n	200da <nrf91_socket_offload_getaddrinfo+0x12a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2015e:	2018      	movs	r0, #24
   20160:	f015 f9d7 	bl	35512 <k_malloc>
   20164:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   20166:	b128      	cbz	r0, 20174 <nrf91_socket_offload_getaddrinfo+0x1c4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   20168:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2016a:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2016c:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2016e:	f013 f9f0 	bl	33552 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   20172:	e7e3      	b.n	2013c <nrf91_socket_offload_getaddrinfo+0x18c>
			k_free(next_z_res);
   20174:	4620      	mov	r0, r4
   20176:	f015 f9c5 	bl	35504 <k_free>
			retval = DNS_EAI_MEMORY;
   2017a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   2017e:	6838      	ldr	r0, [r7, #0]
   20180:	f013 f9af 	bl	334e2 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   20184:	2300      	movs	r3, #0
   20186:	603b      	str	r3, [r7, #0]
   20188:	e76b      	b.n	20062 <nrf91_socket_offload_getaddrinfo+0xb2>
			latest_z_res->ai_next = next_z_res;
   2018a:	f8c8 4000 	str.w	r4, [r8]
   2018e:	e7d9      	b.n	20144 <nrf91_socket_offload_getaddrinfo+0x194>
		return DNS_EAI_NONAME;
   20190:	f06f 0501 	mvn.w	r5, #1
   20194:	e749      	b.n	2002a <nrf91_socket_offload_getaddrinfo+0x7a>
		return DNS_EAI_MEMORY;
   20196:	f06f 0509 	mvn.w	r5, #9
   2019a:	e746      	b.n	2002a <nrf91_socket_offload_getaddrinfo+0x7a>
			return DNS_EAI_SOCKTYPE;
   2019c:	f06f 0506 	mvn.w	r5, #6
   201a0:	e746      	b.n	20030 <nrf91_socket_offload_getaddrinfo+0x80>
			return DNS_EAI_ADDRFAMILY;
   201a2:	f06f 0508 	mvn.w	r5, #8
   201a6:	e743      	b.n	20030 <nrf91_socket_offload_getaddrinfo+0x80>
   201a8:	20014e68 	.word	0x20014e68

000201ac <nrf91_socket_offload_sendmsg>:
{
   201ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   201b0:	4680      	mov	r8, r0
   201b2:	4691      	mov	r9, r2
	if (msg == NULL) {
   201b4:	460c      	mov	r4, r1
   201b6:	b1f9      	cbz	r1, 201f8 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   201b8:	2300      	movs	r3, #0
	ssize_t len = 0;
   201ba:	461a      	mov	r2, r3
   201bc:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   201be:	4298      	cmp	r0, r3
   201c0:	d124      	bne.n	2020c <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   201c2:	2a80      	cmp	r2, #128	; 0x80
   201c4:	d86d      	bhi.n	202a2 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   201c6:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   201c8:	f04f 32ff 	mov.w	r2, #4294967295
   201cc:	f04f 33ff 	mov.w	r3, #4294967295
   201d0:	4836      	ldr	r0, [pc, #216]	; (202ac <nrf91_socket_offload_sendmsg+0x100>)
   201d2:	f013 fa65 	bl	336a0 <k_mutex_lock.constprop.0>
		len = 0;
   201d6:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   201d8:	4e35      	ldr	r6, [pc, #212]	; (202b0 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   201da:	68e3      	ldr	r3, [r4, #12]
   201dc:	429d      	cmp	r5, r3
   201de:	d31c      	bcc.n	2021a <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   201e0:	2600      	movs	r6, #0
		ret = 0;
   201e2:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   201e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 202b0 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   201e8:	42b7      	cmp	r7, r6
   201ea:	dd01      	ble.n	201f0 <nrf91_socket_offload_sendmsg+0x44>
   201ec:	2d00      	cmp	r5, #0
   201ee:	da25      	bge.n	2023c <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   201f0:	482e      	ldr	r0, [pc, #184]	; (202ac <nrf91_socket_offload_sendmsg+0x100>)
   201f2:	f013 f913 	bl	3341c <k_mutex_unlock>
		return ret;
   201f6:	e005      	b.n	20204 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   201f8:	f010 f95c 	bl	304b4 <__errno>
   201fc:	2316      	movs	r3, #22
		return -1;
   201fe:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   20202:	6003      	str	r3, [r0, #0]
}
   20204:	4628      	mov	r0, r5
   20206:	b002      	add	sp, #8
   20208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   2020c:	68a1      	ldr	r1, [r4, #8]
   2020e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   20212:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   20214:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   20216:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   20218:	e7d1      	b.n	201be <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2021a:	68a1      	ldr	r1, [r4, #8]
   2021c:	19f0      	adds	r0, r6, r7
   2021e:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   20222:	685a      	ldr	r2, [r3, #4]
   20224:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   20228:	f015 f9ad 	bl	35586 <memcpy>
			len += msg->msg_iov[i].iov_len;
   2022c:	68a3      	ldr	r3, [r4, #8]
   2022e:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   20232:	4453      	add	r3, sl
   20234:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   20236:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   20238:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   2023a:	e7ce      	b.n	201da <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   2023c:	6863      	ldr	r3, [r4, #4]
   2023e:	1bba      	subs	r2, r7, r6
   20240:	9301      	str	r3, [sp, #4]
   20242:	6823      	ldr	r3, [r4, #0]
   20244:	eb0a 0106 	add.w	r1, sl, r6
   20248:	9300      	str	r3, [sp, #0]
   2024a:	4640      	mov	r0, r8
   2024c:	464b      	mov	r3, r9
   2024e:	f013 f9ad 	bl	335ac <nrf91_socket_offload_sendto>
			if (ret > 0) {
   20252:	1e05      	subs	r5, r0, #0
				offset += ret;
   20254:	bfc8      	it	gt
   20256:	1976      	addgt	r6, r6, r5
   20258:	e7c6      	b.n	201e8 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   2025a:	68a3      	ldr	r3, [r4, #8]
   2025c:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   20260:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   20264:	685b      	ldr	r3, [r3, #4]
   20266:	b133      	cbz	r3, 20276 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   20268:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   2026a:	68a3      	ldr	r3, [r4, #8]
   2026c:	eb03 020a 	add.w	r2, r3, sl
   20270:	6852      	ldr	r2, [r2, #4]
   20272:	4297      	cmp	r7, r2
   20274:	d304      	bcc.n	20280 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   20276:	3601      	adds	r6, #1
   20278:	68e3      	ldr	r3, [r4, #12]
   2027a:	42b3      	cmp	r3, r6
   2027c:	d8ed      	bhi.n	2025a <nrf91_socket_offload_sendmsg+0xae>
   2027e:	e7c1      	b.n	20204 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   20280:	f853 100a 	ldr.w	r1, [r3, sl]
   20284:	6863      	ldr	r3, [r4, #4]
   20286:	4640      	mov	r0, r8
   20288:	9301      	str	r3, [sp, #4]
   2028a:	6823      	ldr	r3, [r4, #0]
   2028c:	1bd2      	subs	r2, r2, r7
   2028e:	9300      	str	r3, [sp, #0]
   20290:	4439      	add	r1, r7
   20292:	464b      	mov	r3, r9
   20294:	f013 f98a 	bl	335ac <nrf91_socket_offload_sendto>
			if (ret < 0) {
   20298:	1e03      	subs	r3, r0, #0
   2029a:	db05      	blt.n	202a8 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   2029c:	441f      	add	r7, r3
			len += ret;
   2029e:	441d      	add	r5, r3
   202a0:	e7e3      	b.n	2026a <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   202a2:	2600      	movs	r6, #0
	len = 0;
   202a4:	4635      	mov	r5, r6
   202a6:	e7e7      	b.n	20278 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   202a8:	461d      	mov	r5, r3
   202aa:	e7ab      	b.n	20204 <nrf91_socket_offload_sendmsg+0x58>
   202ac:	20014eb8 	.word	0x20014eb8
   202b0:	2001b9d7 	.word	0x2001b9d7

000202b4 <allocate_ctx>:
{
   202b4:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   202b6:	f04f 32ff 	mov.w	r2, #4294967295
   202ba:	f04f 33ff 	mov.w	r3, #4294967295
{
   202be:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   202c0:	480b      	ldr	r0, [pc, #44]	; (202f0 <allocate_ctx+0x3c>)
   202c2:	f013 f9ed 	bl	336a0 <k_mutex_lock.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   202c6:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   202c8:	4a0a      	ldr	r2, [pc, #40]	; (202f4 <allocate_ctx+0x40>)
   202ca:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   202ce:	3101      	adds	r1, #1
   202d0:	d108      	bne.n	202e4 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   202d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   202d6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   202da:	4805      	ldr	r0, [pc, #20]	; (202f0 <allocate_ctx+0x3c>)
   202dc:	f013 f89e 	bl	3341c <k_mutex_unlock>
}
   202e0:	4628      	mov	r0, r5
   202e2:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   202e4:	3301      	adds	r3, #1
   202e6:	2b08      	cmp	r3, #8
   202e8:	d1ef      	bne.n	202ca <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   202ea:	2500      	movs	r5, #0
   202ec:	e7f5      	b.n	202da <allocate_ctx+0x26>
   202ee:	bf00      	nop
   202f0:	20014e2c 	.word	0x20014e2c
   202f4:	20016700 	.word	0x20016700

000202f8 <release_ctx>:
{
   202f8:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   202fa:	4d09      	ldr	r5, [pc, #36]	; (20320 <release_ctx+0x28>)
{
   202fc:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   202fe:	f04f 32ff 	mov.w	r2, #4294967295
   20302:	f04f 33ff 	mov.w	r3, #4294967295
   20306:	4628      	mov	r0, r5
   20308:	f013 f9ca 	bl	336a0 <k_mutex_lock.constprop.0>
	ctx->lock = NULL;
   2030c:	2300      	movs	r3, #0
   2030e:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_unlock(&ctx_lock);
   20312:	4628      	mov	r0, r5
	ctx->lock = NULL;
   20314:	e9c4 2300 	strd	r2, r3, [r4]
}
   20318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   2031c:	f013 b87e 	b.w	3341c <k_mutex_unlock>
   20320:	20014e2c 	.word	0x20014e2c

00020324 <nrf91_socket_offload_accept>:
{
   20324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20328:	b08b      	sub	sp, #44	; 0x2c
   2032a:	4607      	mov	r7, r0
   2032c:	460c      	mov	r4, r1
   2032e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   20330:	f7f2 ff0e 	bl	13150 <z_reserve_fd>
   20334:	4606      	mov	r6, r0
	if (fd < 0) {
   20336:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   20338:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   2033a:	da02      	bge.n	20342 <nrf91_socket_offload_accept+0x1e>
	return -1;
   2033c:	f04f 36ff 	mov.w	r6, #4294967295
   20340:	e03d      	b.n	203be <nrf91_socket_offload_accept+0x9a>
	if ((addr != NULL) && (addrlen != NULL)) {
   20342:	b31c      	cbz	r4, 2038c <nrf91_socket_offload_accept+0x68>
   20344:	b32d      	cbz	r5, 20392 <nrf91_socket_offload_accept+0x6e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   20346:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   20348:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2034a:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   2034c:	bf0c      	ite	eq
   2034e:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   20350:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   20352:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   20354:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   20356:	4639      	mov	r1, r7
   20358:	f014 fe90 	bl	3507c <nrf_accept>
	if (new_sd < 0) {
   2035c:	f1b0 0900 	subs.w	r9, r0, #0
   20360:	dbec      	blt.n	2033c <nrf91_socket_offload_accept+0x18>
	ctx = allocate_ctx(new_sd);
   20362:	f7ff ffa7 	bl	202b4 <allocate_ctx>
	if (ctx == NULL) {
   20366:	4680      	mov	r8, r0
   20368:	b9b0      	cbnz	r0, 20398 <nrf91_socket_offload_accept+0x74>
		errno = ENOMEM;
   2036a:	f010 f8a3 	bl	304b4 <__errno>
   2036e:	230c      	movs	r3, #12
   20370:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   20372:	4648      	mov	r0, r9
   20374:	f014 fe1f 	bl	34fb6 <nrf_close>
	if (ctx != NULL) {
   20378:	f1b8 0f00 	cmp.w	r8, #0
   2037c:	d002      	beq.n	20384 <nrf91_socket_offload_accept+0x60>
		release_ctx(ctx);
   2037e:	4640      	mov	r0, r8
   20380:	f7ff ffba 	bl	202f8 <release_ctx>
	z_free_fd(fd);
   20384:	4630      	mov	r0, r6
   20386:	f7f2 ff31 	bl	131ec <z_free_fd>
   2038a:	e7d7      	b.n	2033c <nrf91_socket_offload_accept+0x18>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2038c:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2038e:	4627      	mov	r7, r4
   20390:	e7e1      	b.n	20356 <nrf91_socket_offload_accept+0x32>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   20392:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   20394:	462f      	mov	r7, r5
   20396:	e7de      	b.n	20356 <nrf91_socket_offload_accept+0x32>
	if ((addr != NULL) && (addrlen != NULL)) {
   20398:	b164      	cbz	r4, 203b4 <nrf91_socket_offload_accept+0x90>
   2039a:	b15d      	cbz	r5, 203b4 <nrf91_socket_offload_accept+0x90>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   2039c:	687b      	ldr	r3, [r7, #4]
   2039e:	2b02      	cmp	r3, #2
   203a0:	d111      	bne.n	203c6 <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in);
   203a2:	2308      	movs	r3, #8
   203a4:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   203a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   203aa:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   203ac:	2301      	movs	r3, #1
   203ae:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   203b0:	9b04      	ldr	r3, [sp, #16]
   203b2:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   203b4:	4641      	mov	r1, r8
   203b6:	4630      	mov	r0, r6
   203b8:	4a07      	ldr	r2, [pc, #28]	; (203d8 <nrf91_socket_offload_accept+0xb4>)
   203ba:	f7f2 feff 	bl	131bc <z_finalize_fd>
}
   203be:	4630      	mov	r0, r6
   203c0:	b00b      	add	sp, #44	; 0x2c
   203c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   203c6:	2b0a      	cmp	r3, #10
   203c8:	d1d3      	bne.n	20372 <nrf91_socket_offload_accept+0x4e>
			*addrlen = sizeof(struct sockaddr_in6);
   203ca:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   203cc:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   203ce:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   203d0:	a901      	add	r1, sp, #4
   203d2:	f013 f8be 	bl	33552 <nrf_to_z_ipv6>
   203d6:	e7ed      	b.n	203b4 <nrf91_socket_offload_accept+0x90>
   203d8:	00037048 	.word	0x00037048

000203dc <nrf91_socket_create>:
{
   203dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203de:	4606      	mov	r6, r0
   203e0:	460d      	mov	r5, r1
   203e2:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   203e4:	f7f2 feb4 	bl	13150 <z_reserve_fd>
	if (fd < 0) {
   203e8:	1e04      	subs	r4, r0, #0
   203ea:	db0d      	blt.n	20408 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   203ec:	b2b0      	uxth	r0, r6
   203ee:	f012 ffc9 	bl	33384 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   203f2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   203f6:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   203f8:	d109      	bne.n	2040e <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   203fa:	f010 f85b 	bl	304b4 <__errno>
   203fe:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   20400:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   20402:	4620      	mov	r0, r4
   20404:	f7f2 fef2 	bl	131ec <z_free_fd>
		return -1;
   20408:	f04f 34ff 	mov.w	r4, #4294967295
   2040c:	e026      	b.n	2045c <nrf91_socket_create+0x80>
	switch (socktype) {
   2040e:	2d03      	cmp	r5, #3
   20410:	d003      	beq.n	2041a <nrf91_socket_create+0x3e>
   20412:	2d04      	cmp	r5, #4
   20414:	bf08      	it	eq
   20416:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   2041a:	4638      	mov	r0, r7
   2041c:	f012 ffcf 	bl	333be <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   20420:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   20424:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   20426:	d103      	bne.n	20430 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   20428:	f010 f844 	bl	304b4 <__errno>
   2042c:	237b      	movs	r3, #123	; 0x7b
   2042e:	e7e7      	b.n	20400 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   20430:	4629      	mov	r1, r5
   20432:	4630      	mov	r0, r6
   20434:	f014 fdae 	bl	34f94 <nrf_socket>
	if (sd < 0) {
   20438:	1e05      	subs	r5, r0, #0
   2043a:	dbe2      	blt.n	20402 <nrf91_socket_create+0x26>
	ctx = allocate_ctx(sd);
   2043c:	f7ff ff3a 	bl	202b4 <allocate_ctx>
	if (ctx == NULL) {
   20440:	4601      	mov	r1, r0
   20442:	b938      	cbnz	r0, 20454 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   20444:	f010 f836 	bl	304b4 <__errno>
   20448:	230c      	movs	r3, #12
   2044a:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   2044c:	4628      	mov	r0, r5
   2044e:	f014 fdb2 	bl	34fb6 <nrf_close>
   20452:	e7d6      	b.n	20402 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, ctx,
   20454:	4620      	mov	r0, r4
   20456:	4a02      	ldr	r2, [pc, #8]	; (20460 <nrf91_socket_create+0x84>)
   20458:	f7f2 feb0 	bl	131bc <z_finalize_fd>
}
   2045c:	4620      	mov	r0, r4
   2045e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20460:	00037048 	.word	0x00037048

00020464 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   20464:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   20466:	f240 2201 	movw	r2, #513	; 0x201
   2046a:	2102      	movs	r1, #2
   2046c:	2066      	movs	r0, #102	; 0x66
   2046e:	f7f5 f899 	bl	155a4 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   20472:	4b05      	ldr	r3, [pc, #20]	; (20488 <open_socket+0x24>)
   20474:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   20476:	3001      	adds	r0, #1
   20478:	d104      	bne.n	20484 <open_socket+0x20>
		return -errno;
   2047a:	f010 f81b 	bl	304b4 <__errno>
   2047e:	6800      	ldr	r0, [r0, #0]
   20480:	4240      	negs	r0, r0
	}

	return 0;
}
   20482:	bd08      	pop	{r3, pc}
	return 0;
   20484:	2000      	movs	r0, #0
   20486:	e7fc      	b.n	20482 <open_socket+0x1e>
   20488:	20016740 	.word	0x20016740

0002048c <complete_cmd>:
	return 0;
}

/* Clear the current command safely */
static void complete_cmd(void)
{
   2048c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2048e:	4c08      	ldr	r4, [pc, #32]	; (204b0 <complete_cmd+0x24>)
   20490:	f04f 32ff 	mov.w	r2, #4294967295
   20494:	f04f 33ff 	mov.w	r3, #4294967295
   20498:	4620      	mov	r0, r4
   2049a:	f008 ff39 	bl	29310 <z_impl_k_mutex_lock>
	k_mutex_lock(&current_cmd_mutex, K_FOREVER);
	current_cmd.cmd = NULL;
   2049e:	2200      	movs	r2, #0
   204a0:	4b04      	ldr	r3, [pc, #16]	; (204b4 <complete_cmd+0x28>)
	k_mutex_unlock(&current_cmd_mutex);
   204a2:	4620      	mov	r0, r4
}
   204a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_cmd.cmd = NULL;
   204a8:	601a      	str	r2, [r3, #0]
	k_mutex_unlock(&current_cmd_mutex);
   204aa:	f013 b9bf 	b.w	3382c <k_mutex_unlock>
   204ae:	bf00      	nop
   204b0:	20014e40 	.word	0x20014e40
   204b4:	20016744 	.word	0x20016744

000204b8 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   204b8:	b530      	push	{r4, r5, lr}
   204ba:	b089      	sub	sp, #36	; 0x24
	k_mutex_lock(&at_cmd_init_mutex, K_FOREVER);
	static bool initialized;
	if (initialized) {
   204bc:	4d1e      	ldr	r5, [pc, #120]	; (20538 <at_cmd_driver_init+0x80>)
   204be:	f04f 33ff 	mov.w	r3, #4294967295
   204c2:	f04f 32ff 	mov.w	r2, #4294967295
   204c6:	481d      	ldr	r0, [pc, #116]	; (2053c <at_cmd_driver_init+0x84>)
   204c8:	f008 ff22 	bl	29310 <z_impl_k_mutex_lock>
   204cc:	782b      	ldrb	r3, [r5, #0]
   204ce:	b133      	cbz	r3, 204de <at_cmd_driver_init+0x26>
		k_mutex_unlock(&at_cmd_init_mutex);
   204d0:	481a      	ldr	r0, [pc, #104]	; (2053c <at_cmd_driver_init+0x84>)
   204d2:	f013 f9ab 	bl	3382c <k_mutex_unlock>
		return 0;
   204d6:	2400      	movs	r4, #0

	LOG_DBG("Common AT socket processing thread created");
	initialized = true;
	k_mutex_unlock(&at_cmd_init_mutex);
	return 0;
}
   204d8:	4620      	mov	r0, r4
   204da:	b009      	add	sp, #36	; 0x24
   204dc:	bd30      	pop	{r4, r5, pc}
	err = open_socket();
   204de:	f7ff ffc1 	bl	20464 <open_socket>
	if (err) {
   204e2:	4604      	mov	r4, r0
   204e4:	b170      	cbz	r0, 20504 <at_cmd_driver_init+0x4c>
   204e6:	4a16      	ldr	r2, [pc, #88]	; (20540 <at_cmd_driver_init+0x88>)
   204e8:	4b16      	ldr	r3, [pc, #88]	; (20544 <at_cmd_driver_init+0x8c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   204ea:	4601      	mov	r1, r0
   204ec:	1ad2      	subs	r2, r2, r3
   204ee:	08d2      	lsrs	r2, r2, #3
   204f0:	0192      	lsls	r2, r2, #6
   204f2:	4815      	ldr	r0, [pc, #84]	; (20548 <at_cmd_driver_init+0x90>)
   204f4:	f042 0201 	orr.w	r2, r2, #1
   204f8:	f00d ff87 	bl	2e40a <log_1>
	k_mutex_unlock(&at_cmd_init_mutex);
   204fc:	480f      	ldr	r0, [pc, #60]	; (2053c <at_cmd_driver_init+0x84>)
   204fe:	f013 f995 	bl	3382c <k_mutex_unlock>
	return 0;
   20502:	e7e9      	b.n	204d8 <at_cmd_driver_init+0x20>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20504:	2200      	movs	r2, #0
   20506:	2300      	movs	r3, #0
   20508:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2050c:	230a      	movs	r3, #10
   2050e:	e9cd 0000 	strd	r0, r0, [sp]
   20512:	e9cd 0302 	strd	r0, r3, [sp, #8]
   20516:	9004      	str	r0, [sp, #16]
   20518:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
   2051c:	4b0b      	ldr	r3, [pc, #44]	; (2054c <at_cmd_driver_init+0x94>)
   2051e:	490c      	ldr	r1, [pc, #48]	; (20550 <at_cmd_driver_init+0x98>)
   20520:	480c      	ldr	r0, [pc, #48]	; (20554 <at_cmd_driver_init+0x9c>)
   20522:	f008 fc49 	bl	28db8 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   20526:	4b0c      	ldr	r3, [pc, #48]	; (20558 <at_cmd_driver_init+0xa0>)
   20528:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread, str);
   2052a:	490c      	ldr	r1, [pc, #48]	; (2055c <at_cmd_driver_init+0xa4>)
   2052c:	f014 fe77 	bl	3521e <z_impl_k_thread_name_set>
	initialized = true;
   20530:	2301      	movs	r3, #1
   20532:	702b      	strb	r3, [r5, #0]
   20534:	e7e2      	b.n	204fc <at_cmd_driver_init+0x44>
   20536:	bf00      	nop
   20538:	2001c4e3 	.word	0x2001c4e3
   2053c:	20014e18 	.word	0x20014e18
   20540:	000364b0 	.word	0x000364b0
   20544:	000364b0 	.word	0x000364b0
   20548:	0003b290 	.word	0x0003b290
   2054c:	00020659 	.word	0x00020659
   20550:	20020fb8 	.word	0x20020fb8
   20554:	20015ac0 	.word	0x20015ac0
   20558:	20016768 	.word	0x20016768
   2055c:	0003b2b2 	.word	0x0003b2b2

00020560 <load_cmd_and_write>:
{
   20560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		if (current_cmd.cmd != NULL ||
   20564:	4f33      	ldr	r7, [pc, #204]	; (20634 <load_cmd_and_write+0xd4>)
	return z_impl_k_mutex_lock(mutex, timeout);
   20566:	f04f 33ff 	mov.w	r3, #4294967295
   2056a:	46b8      	mov	r8, r7
   2056c:	f04f 32ff 	mov.w	r2, #4294967295
   20570:	4831      	ldr	r0, [pc, #196]	; (20638 <load_cmd_and_write+0xd8>)
   20572:	f008 fecd 	bl	29310 <z_impl_k_mutex_lock>
   20576:	4d31      	ldr	r5, [pc, #196]	; (2063c <load_cmd_and_write+0xdc>)
   20578:	4b31      	ldr	r3, [pc, #196]	; (20640 <load_cmd_and_write+0xe0>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   2057a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 20654 <load_cmd_and_write+0xf4>
   2057e:	1aed      	subs	r5, r5, r3
   20580:	08ed      	lsrs	r5, r5, #3
   20582:	683b      	ldr	r3, [r7, #0]
   20584:	2b00      	cmp	r3, #0
   20586:	d14e      	bne.n	20626 <load_cmd_and_write+0xc6>
   20588:	2200      	movs	r2, #0
   2058a:	2300      	movs	r3, #0
   2058c:	4639      	mov	r1, r7
   2058e:	4648      	mov	r0, r9
   20590:	f008 fdd2 	bl	29138 <z_impl_k_msgq_get>
   20594:	4604      	mov	r4, r0
   20596:	2800      	cmp	r0, #0
   20598:	d145      	bne.n	20626 <load_cmd_and_write+0xc6>
		ret = at_write(current_cmd.cmd);
   2059a:	f8d7 a000 	ldr.w	sl, [r7]
	int bytes_to_send = strlen(cmd);
   2059e:	4650      	mov	r0, sl
   205a0:	f7f0 ffae 	bl	11500 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   205a4:	4b27      	ldr	r3, [pc, #156]	; (20644 <load_cmd_and_write+0xe4>)
	int bytes_to_send = strlen(cmd);
   205a6:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   205a8:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   205aa:	4651      	mov	r1, sl
   205ac:	4623      	mov	r3, r4
   205ae:	4632      	mov	r2, r6
   205b0:	e9cd 4400 	strd	r4, r4, [sp]
   205b4:	f00e fa23 	bl	2e9fe <z_impl_zsock_sendto>
   205b8:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   205ba:	1c48      	adds	r0, r1, #1
   205bc:	d129      	bne.n	20612 <load_cmd_and_write+0xb2>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   205be:	f00f ff79 	bl	304b4 <__errno>
   205c2:	01ac      	lsls	r4, r5, #6
   205c4:	f044 0401 	orr.w	r4, r4, #1
   205c8:	4622      	mov	r2, r4
   205ca:	6801      	ldr	r1, [r0, #0]
   205cc:	481e      	ldr	r0, [pc, #120]	; (20648 <load_cmd_and_write+0xe8>)
   205ce:	f00d ff1c 	bl	2e40a <log_1>
		return -errno;
   205d2:	f00f ff6f 	bl	304b4 <__errno>
   205d6:	6804      	ldr	r4, [r0, #0]
   205d8:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   205da:	f898 3010 	ldrb.w	r3, [r8, #16]
   205de:	07da      	lsls	r2, r3, #31
   205e0:	d503      	bpl.n	205ea <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   205e2:	f8d8 0000 	ldr.w	r0, [r8]
   205e6:	f014 ff8d 	bl	35504 <k_free>
		if (ret != 0) {
   205ea:	b1e4      	cbz	r4, 20626 <load_cmd_and_write+0xc6>
			resp.state = AT_CMD_ERROR_WRITE;
   205ec:	2305      	movs	r3, #5
   205ee:	f88d 300c 	strb.w	r3, [sp, #12]
			if (current_cmd.flags & AT_CMD_SYNC) {
   205f2:	f898 3010 	ldrb.w	r3, [r8, #16]
			resp.code = ret;
   205f6:	9402      	str	r4, [sp, #8]
			if (current_cmd.flags & AT_CMD_SYNC) {
   205f8:	079b      	lsls	r3, r3, #30
   205fa:	d507      	bpl.n	2060c <load_cmd_and_write+0xac>
	return z_impl_k_msgq_put(msgq, data, timeout);
   205fc:	f04f 32ff 	mov.w	r2, #4294967295
   20600:	f04f 33ff 	mov.w	r3, #4294967295
   20604:	4811      	ldr	r0, [pc, #68]	; (2064c <load_cmd_and_write+0xec>)
   20606:	a902      	add	r1, sp, #8
   20608:	f008 fcee 	bl	28fe8 <z_impl_k_msgq_put>
			complete_cmd();
   2060c:	f7ff ff3e 	bl	2048c <complete_cmd>
	} while (ret != 0);
   20610:	e7b7      	b.n	20582 <load_cmd_and_write+0x22>
	if (bytes_sent != bytes_to_send) {
   20612:	428e      	cmp	r6, r1
   20614:	d0e1      	beq.n	205da <load_cmd_and_write+0x7a>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   20616:	01ab      	lsls	r3, r5, #6
   20618:	4632      	mov	r2, r6
   2061a:	480d      	ldr	r0, [pc, #52]	; (20650 <load_cmd_and_write+0xf0>)
   2061c:	f043 0302 	orr.w	r3, r3, #2
   20620:	f00d ff07 	bl	2e432 <log_2>
   20624:	e7d9      	b.n	205da <load_cmd_and_write+0x7a>
	k_mutex_unlock(&current_cmd_mutex);
   20626:	4804      	ldr	r0, [pc, #16]	; (20638 <load_cmd_and_write+0xd8>)
   20628:	f013 f900 	bl	3382c <k_mutex_unlock>
}
   2062c:	b004      	add	sp, #16
   2062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20632:	bf00      	nop
   20634:	20016744 	.word	0x20016744
   20638:	20014e40 	.word	0x20014e40
   2063c:	000364b0 	.word	0x000364b0
   20640:	000364b0 	.word	0x000364b0
   20644:	20016740 	.word	0x20016740
   20648:	0003b2c7 	.word	0x0003b2c7
   2064c:	20014f34 	.word	0x20014f34
   20650:	0003b2ea 	.word	0x0003b2ea
   20654:	20014ecc 	.word	0x20014ecc

00020658 <socket_thread_fn>:
{
   20658:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2065c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 208c0 <socket_thread_fn+0x268>
   20660:	4f83      	ldr	r7, [pc, #524]	; (20870 <socket_thread_fn+0x218>)
   20662:	46ca      	mov	sl, r9
   20664:	4b83      	ldr	r3, [pc, #524]	; (20874 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   20666:	4e84      	ldr	r6, [pc, #528]	; (20878 <socket_thread_fn+0x220>)
   20668:	1aff      	subs	r7, r7, r3
   2066a:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   2066c:	f7ff ff78 	bl	20560 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   20670:	f8d9 0000 	ldr.w	r0, [r9]
   20674:	2500      	movs	r5, #0
   20676:	f640 228c 	movw	r2, #2700	; 0xa8c
   2067a:	462b      	mov	r3, r5
   2067c:	e9cd 5500 	strd	r5, r5, [sp]
   20680:	497d      	ldr	r1, [pc, #500]	; (20878 <socket_thread_fn+0x220>)
   20682:	f00e fa13 	bl	2eaac <z_impl_zsock_recvfrom>
		ret.code  = 0;
   20686:	4c7d      	ldr	r4, [pc, #500]	; (2087c <socket_thread_fn+0x224>)
		if (bytes_read < 0) {
   20688:	f1b0 0800 	subs.w	r8, r0, #0
		ret.code  = 0;
   2068c:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   2068e:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   20690:	da6c      	bge.n	2076c <socket_thread_fn+0x114>
			if (errno == EHOSTDOWN) {
   20692:	f00f ff0f 	bl	304b4 <__errno>
   20696:	6803      	ldr	r3, [r0, #0]
   20698:	2b75      	cmp	r3, #117	; 0x75
   2069a:	d122      	bne.n	206e2 <socket_thread_fn+0x8a>
   2069c:	2301      	movs	r3, #1
   2069e:	4c78      	ldr	r4, [pc, #480]	; (20880 <socket_thread_fn+0x228>)
   206a0:	e8d4 2fef 	ldaex	r2, [r4]
   206a4:	e8c4 3fe1 	stlex	r1, r3, [r4]
   206a8:	2900      	cmp	r1, #0
   206aa:	d1f9      	bne.n	206a0 <socket_thread_fn+0x48>
				close(common_socket_fd);
   206ac:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   206b0:	f00e f95a 	bl	2e968 <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   206b4:	f7fe ff92 	bl	1f5dc <nrf_modem_lib_shutdown_wait>
   206b8:	e8d4 3fef 	ldaex	r3, [r4]
   206bc:	e8c4 5fe2 	stlex	r2, r5, [r4]
   206c0:	2a00      	cmp	r2, #0
   206c2:	d1f9      	bne.n	206b8 <socket_thread_fn+0x60>
				if (open_socket() != 0) {
   206c4:	f7ff fece 	bl	20464 <open_socket>
   206c8:	2800      	cmp	r0, #0
   206ca:	d0cf      	beq.n	2066c <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   206cc:	f00f fef2 	bl	304b4 <__errno>
   206d0:	01bc      	lsls	r4, r7, #6
   206d2:	f044 0401 	orr.w	r4, r4, #1
   206d6:	6801      	ldr	r1, [r0, #0]
   206d8:	4622      	mov	r2, r4
   206da:	486a      	ldr	r0, [pc, #424]	; (20884 <socket_thread_fn+0x22c>)
   206dc:	f00d fe95 	bl	2e40a <log_1>
   206e0:	e7c4      	b.n	2066c <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   206e2:	f00f fee7 	bl	304b4 <__errno>
   206e6:	01bd      	lsls	r5, r7, #6
   206e8:	f045 0801 	orr.w	r8, r5, #1
   206ec:	6801      	ldr	r1, [r0, #0]
   206ee:	4642      	mov	r2, r8
   206f0:	4865      	ldr	r0, [pc, #404]	; (20888 <socket_thread_fn+0x230>)
   206f2:	f00d fe8a 	bl	2e40a <log_1>
			if ((close(common_socket_fd) == 0) &&
   206f6:	f8d9 0000 	ldr.w	r0, [r9]
   206fa:	f00e f935 	bl	2e968 <z_impl_zsock_close>
   206fe:	bb28      	cbnz	r0, 2074c <socket_thread_fn+0xf4>
			    (open_socket() == 0)) {
   20700:	f7ff feb0 	bl	20464 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   20704:	bb10      	cbnz	r0, 2074c <socket_thread_fn+0xf4>
				LOG_INF("AT socket recovered");
   20706:	4861      	ldr	r0, [pc, #388]	; (2088c <socket_thread_fn+0x234>)
   20708:	f045 0103 	orr.w	r1, r5, #3
   2070c:	f00d fe70 	bl	2e3f0 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   20710:	2306      	movs	r3, #6
   20712:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   20714:	f00f fece 	bl	304b4 <__errno>
   20718:	6803      	ldr	r3, [r0, #0]
   2071a:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   2071c:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   2071e:	4b5c      	ldr	r3, [pc, #368]	; (20890 <socket_thread_fn+0x238>)
   20720:	681a      	ldr	r2, [r3, #0]
   20722:	b16a      	cbz	r2, 20740 <socket_thread_fn+0xe8>
   20724:	7c1b      	ldrb	r3, [r3, #16]
   20726:	079b      	lsls	r3, r3, #30
   20728:	d50a      	bpl.n	20740 <socket_thread_fn+0xe8>
		    current_cmd.flags & AT_CMD_SYNC &&
   2072a:	7923      	ldrb	r3, [r4, #4]
   2072c:	2b07      	cmp	r3, #7
   2072e:	d09d      	beq.n	2066c <socket_thread_fn+0x14>
   20730:	f04f 32ff 	mov.w	r2, #4294967295
   20734:	f04f 33ff 	mov.w	r3, #4294967295
   20738:	4950      	ldr	r1, [pc, #320]	; (2087c <socket_thread_fn+0x224>)
   2073a:	4856      	ldr	r0, [pc, #344]	; (20894 <socket_thread_fn+0x23c>)
   2073c:	f008 fc54 	bl	28fe8 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   20740:	7923      	ldrb	r3, [r4, #4]
   20742:	2b07      	cmp	r3, #7
   20744:	d092      	beq.n	2066c <socket_thread_fn+0x14>
			complete_cmd();
   20746:	f7ff fea1 	bl	2048c <complete_cmd>
   2074a:	e78f      	b.n	2066c <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2074c:	f00f feb2 	bl	304b4 <__errno>
   20750:	f045 0501 	orr.w	r5, r5, #1
   20754:	6801      	ldr	r1, [r0, #0]
   20756:	462a      	mov	r2, r5
   20758:	484f      	ldr	r0, [pc, #316]	; (20898 <socket_thread_fn+0x240>)
   2075a:	f00d fe56 	bl	2e40a <log_1>
			close(common_socket_fd);
   2075e:	f8da 0000 	ldr.w	r0, [sl]
}
   20762:	b002      	add	sp, #8
   20764:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20768:	f00e b8fe 	b.w	2e968 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   2076c:	d10a      	bne.n	20784 <socket_thread_fn+0x12c>
			LOG_ERR("AT message empty");
   2076e:	01b9      	lsls	r1, r7, #6
   20770:	484a      	ldr	r0, [pc, #296]	; (2089c <socket_thread_fn+0x244>)
   20772:	f041 0101 	orr.w	r1, r1, #1
   20776:	f00d fe3b 	bl	2e3f0 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2077a:	2306      	movs	r3, #6
   2077c:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   2077e:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   20782:	e7cb      	b.n	2071c <socket_thread_fn+0xc4>
		} else if (buf[bytes_read - 1] != '\0') {
   20784:	eb06 0308 	add.w	r3, r6, r8
   20788:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2078c:	b153      	cbz	r3, 207a4 <socket_thread_fn+0x14c>
			LOG_ERR("AT message too large for reception buffer or "
   2078e:	01b9      	lsls	r1, r7, #6
   20790:	4843      	ldr	r0, [pc, #268]	; (208a0 <socket_thread_fn+0x248>)
   20792:	f041 0101 	orr.w	r1, r1, #1
   20796:	f00d fe2b 	bl	2e3f0 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2079a:	2306      	movs	r3, #6
   2079c:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   2079e:	f06f 0368 	mvn.w	r3, #104	; 0x68
   207a2:	e7bb      	b.n	2071c <socket_thread_fn+0xc4>
	ret->state = AT_CMD_NOTIFICATION;
   207a4:	2307      	movs	r3, #7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   207a6:	483f      	ldr	r0, [pc, #252]	; (208a4 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   207a8:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   207aa:	f7f0 fea9 	bl	11500 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   207ae:	f1a8 0505 	sub.w	r5, r8, #5
   207b2:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   207b4:	4602      	mov	r2, r0
   207b6:	493b      	ldr	r1, [pc, #236]	; (208a4 <socket_thread_fn+0x24c>)
   207b8:	4628      	mov	r0, r5
   207ba:	f015 f849 	bl	35850 <strncmp>
		if (match) {
   207be:	b9c0      	cbnz	r0, 207f2 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   207c0:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   207c2:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   207c4:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   207c6:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   207c8:	3201      	adds	r2, #1
   207ca:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   207cc:	4d30      	ldr	r5, [pc, #192]	; (20890 <socket_thread_fn+0x238>)
   207ce:	682b      	ldr	r3, [r5, #0]
   207d0:	2b00      	cmp	r3, #0
   207d2:	d043      	beq.n	2085c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   207d4:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   207d6:	2800      	cmp	r0, #0
   207d8:	d040      	beq.n	2085c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   207da:	7923      	ldrb	r3, [r4, #4]
   207dc:	2b07      	cmp	r3, #7
   207de:	d12e      	bne.n	2083e <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   207e0:	4b31      	ldr	r3, [pc, #196]	; (208a8 <socket_thread_fn+0x250>)
   207e2:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   207e4:	b913      	cbnz	r3, 207ec <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   207e6:	68ab      	ldr	r3, [r5, #8]
   207e8:	2b00      	cmp	r3, #0
   207ea:	d098      	beq.n	2071e <socket_thread_fn+0xc6>
			current_cmd.callback(buf);
   207ec:	4630      	mov	r0, r6
   207ee:	4798      	blx	r3
   207f0:	e795      	b.n	2071e <socket_thread_fn+0xc6>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   207f2:	4630      	mov	r0, r6
   207f4:	492d      	ldr	r1, [pc, #180]	; (208ac <socket_thread_fn+0x254>)
   207f6:	f015 f85d 	bl	358b4 <strstr>
		if (tmpstr) {
   207fa:	4605      	mov	r5, r0
   207fc:	b128      	cbz	r0, 2080a <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   207fe:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   20800:	482b      	ldr	r0, [pc, #172]	; (208b0 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   20802:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   20804:	f014 fe9f 	bl	35546 <atoi>
   20808:	e7db      	b.n	207c2 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2080a:	4630      	mov	r0, r6
   2080c:	4929      	ldr	r1, [pc, #164]	; (208b4 <socket_thread_fn+0x25c>)
   2080e:	f015 f851 	bl	358b4 <strstr>
		if (tmpstr) {
   20812:	4605      	mov	r5, r0
   20814:	b108      	cbz	r0, 2081a <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   20816:	2303      	movs	r3, #3
   20818:	e7f2      	b.n	20800 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2081a:	4827      	ldr	r0, [pc, #156]	; (208b8 <socket_thread_fn+0x260>)
   2081c:	f7f0 fe70 	bl	11500 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   20820:	f1a8 0508 	sub.w	r5, r8, #8
   20824:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   20826:	4602      	mov	r2, r0
   20828:	4923      	ldr	r1, [pc, #140]	; (208b8 <socket_thread_fn+0x260>)
   2082a:	4628      	mov	r0, r5
   2082c:	f015 f810 	bl	35850 <strncmp>
		if (match) {
   20830:	b9c0      	cbnz	r0, 20864 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   20832:	2301      	movs	r3, #1
   20834:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   20836:	f06f 0307 	mvn.w	r3, #7
   2083a:	6023      	str	r3, [r4, #0]
			break;
   2083c:	e7c2      	b.n	207c4 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   2083e:	68eb      	ldr	r3, [r5, #12]
   20840:	429a      	cmp	r2, r3
   20842:	d908      	bls.n	20856 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   20844:	01b9      	lsls	r1, r7, #6
   20846:	481d      	ldr	r0, [pc, #116]	; (208bc <socket_thread_fn+0x264>)
   20848:	f041 0101 	orr.w	r1, r1, #1
   2084c:	f00d fdd0 	bl	2e3f0 <log_0>
				ret.code  = -EMSGSIZE;
   20850:	f06f 0379 	mvn.w	r3, #121	; 0x79
   20854:	e762      	b.n	2071c <socket_thread_fn+0xc4>
   20856:	4631      	mov	r1, r6
   20858:	f014 fe95 	bl	35586 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2085c:	7923      	ldrb	r3, [r4, #4]
   2085e:	2b07      	cmp	r3, #7
   20860:	d1c1      	bne.n	207e6 <socket_thread_fn+0x18e>
   20862:	e7bd      	b.n	207e0 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   20864:	4630      	mov	r0, r6
   20866:	f7f0 fe4b 	bl	11500 <strlen>
   2086a:	1c42      	adds	r2, r0, #1
   2086c:	e7ae      	b.n	207cc <socket_thread_fn+0x174>
   2086e:	bf00      	nop
   20870:	000364b0 	.word	0x000364b0
   20874:	000364b0 	.word	0x000364b0
   20878:	2001ba57 	.word	0x2001ba57
   2087c:	2001675c 	.word	0x2001675c
   20880:	20016764 	.word	0x20016764
   20884:	0003b31c 	.word	0x0003b31c
   20888:	0003b357 	.word	0x0003b357
   2088c:	0003b379 	.word	0x0003b379
   20890:	20016744 	.word	0x20016744
   20894:	20014f34 	.word	0x20014f34
   20898:	0003b38d 	.word	0x0003b38d
   2089c:	0003b3c4 	.word	0x0003b3c4
   208a0:	0003b3d5 	.word	0x0003b3d5
   208a4:	0003b420 	.word	0x0003b420
   208a8:	20016758 	.word	0x20016758
   208ac:	0003b425 	.word	0x0003b425
   208b0:	2001ba62 	.word	0x2001ba62
   208b4:	0003b431 	.word	0x0003b431
   208b8:	0003b43d 	.word	0x0003b43d
   208bc:	0003b445 	.word	0x0003b445
   208c0:	20016740 	.word	0x20016740

000208c4 <at_cmd_write>:
{
   208c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   208c6:	4605      	mov	r5, r0
   208c8:	460f      	mov	r7, r1
   208ca:	4616      	mov	r6, r2
   208cc:	461c      	mov	r4, r3
   208ce:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   208d0:	4b3c      	ldr	r3, [pc, #240]	; (209c4 <at_cmd_write+0x100>)
   208d2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   208d6:	2b01      	cmp	r3, #1
   208d8:	d071      	beq.n	209be <at_cmd_write+0xfa>
	return z_impl_k_current_get();
   208da:	f00a ff39 	bl	2b750 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   208de:	4b3a      	ldr	r3, [pc, #232]	; (209c8 <at_cmd_write+0x104>)
   208e0:	681b      	ldr	r3, [r3, #0]
   208e2:	4283      	cmp	r3, r0
   208e4:	d10e      	bne.n	20904 <at_cmd_write+0x40>
   208e6:	4939      	ldr	r1, [pc, #228]	; (209cc <at_cmd_write+0x108>)
   208e8:	f240 1389 	movw	r3, #393	; 0x189
   208ec:	4a38      	ldr	r2, [pc, #224]	; (209d0 <at_cmd_write+0x10c>)
   208ee:	4839      	ldr	r0, [pc, #228]	; (209d4 <at_cmd_write+0x110>)
   208f0:	f00d fa4a 	bl	2dd88 <printk>
   208f4:	4838      	ldr	r0, [pc, #224]	; (209d8 <at_cmd_write+0x114>)
   208f6:	f00d fa47 	bl	2dd88 <printk>
   208fa:	f240 1189 	movw	r1, #393	; 0x189
   208fe:	4834      	ldr	r0, [pc, #208]	; (209d0 <at_cmd_write+0x10c>)
   20900:	f00d fd28 	bl	2e354 <assert_post_action>
	if (cmd == NULL) {
   20904:	b165      	cbz	r5, 20920 <at_cmd_write+0x5c>
   20906:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   20908:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2090c:	b9d3      	cbnz	r3, 20944 <at_cmd_write+0x80>
   2090e:	4933      	ldr	r1, [pc, #204]	; (209dc <at_cmd_write+0x118>)
   20910:	4b33      	ldr	r3, [pc, #204]	; (209e0 <at_cmd_write+0x11c>)
		LOG_ERR("Invalid command");
   20912:	4834      	ldr	r0, [pc, #208]	; (209e4 <at_cmd_write+0x120>)
   20914:	1ac9      	subs	r1, r1, r3
   20916:	08c9      	lsrs	r1, r1, #3
   20918:	0189      	lsls	r1, r1, #6
   2091a:	f041 0101 	orr.w	r1, r1, #1
   2091e:	e007      	b.n	20930 <at_cmd_write+0x6c>
   20920:	492e      	ldr	r1, [pc, #184]	; (209dc <at_cmd_write+0x118>)
   20922:	4b2f      	ldr	r3, [pc, #188]	; (209e0 <at_cmd_write+0x11c>)
		LOG_ERR("cmd is NULL");
   20924:	4830      	ldr	r0, [pc, #192]	; (209e8 <at_cmd_write+0x124>)
   20926:	1ac9      	subs	r1, r1, r3
   20928:	08c9      	lsrs	r1, r1, #3
   2092a:	0189      	lsls	r1, r1, #6
   2092c:	f041 0101 	orr.w	r1, r1, #1
   20930:	f00d fd5e 	bl	2e3f0 <log_0>
		if (state) {
   20934:	b91c      	cbnz	r4, 2093e <at_cmd_write+0x7a>
		return -EINVAL;
   20936:	f06f 0015 	mvn.w	r0, #21
}
   2093a:	b009      	add	sp, #36	; 0x24
   2093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   2093e:	2304      	movs	r3, #4
   20940:	7023      	strb	r3, [r4, #0]
   20942:	e7f8      	b.n	20936 <at_cmd_write+0x72>
		if (*c > ' ') {
   20944:	2b20      	cmp	r3, #32
   20946:	d9df      	bls.n	20908 <at_cmd_write+0x44>
	command.callback = NULL;
   20948:	2300      	movs	r3, #0
   2094a:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   2094c:	2302      	movs	r3, #2
	command.resp = buf;
   2094e:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   20952:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   20954:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   20958:	f04f 32ff 	mov.w	r2, #4294967295
   2095c:	f04f 33ff 	mov.w	r3, #4294967295
   20960:	4822      	ldr	r0, [pc, #136]	; (209ec <at_cmd_write+0x128>)
   20962:	f008 fcd5 	bl	29310 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   20966:	f04f 32ff 	mov.w	r2, #4294967295
   2096a:	a903      	add	r1, sp, #12
   2096c:	f04f 33ff 	mov.w	r3, #4294967295
   20970:	481f      	ldr	r0, [pc, #124]	; (209f0 <at_cmd_write+0x12c>)
   20972:	f008 fb39 	bl	28fe8 <z_impl_k_msgq_put>
   20976:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   20978:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2097a:	b170      	cbz	r0, 2099a <at_cmd_write+0xd6>
   2097c:	4a17      	ldr	r2, [pc, #92]	; (209dc <at_cmd_write+0x118>)
   2097e:	4b18      	ldr	r3, [pc, #96]	; (209e0 <at_cmd_write+0x11c>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   20980:	481c      	ldr	r0, [pc, #112]	; (209f4 <at_cmd_write+0x130>)
   20982:	1ad2      	subs	r2, r2, r3
   20984:	08d2      	lsrs	r2, r2, #3
   20986:	0192      	lsls	r2, r2, #6
   20988:	f042 0201 	orr.w	r2, r2, #1
   2098c:	f00d fd3d 	bl	2e40a <log_1>
		if (state) {
   20990:	b10c      	cbz	r4, 20996 <at_cmd_write+0xd2>
			*state = AT_CMD_ERROR_QUEUE;
   20992:	2304      	movs	r3, #4
		*state = ret.state;
   20994:	7023      	strb	r3, [r4, #0]
	return ret.code;
   20996:	9801      	ldr	r0, [sp, #4]
   20998:	e7cf      	b.n	2093a <at_cmd_write+0x76>
	load_cmd_and_write();
   2099a:	f7ff fde1 	bl	20560 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2099e:	f04f 32ff 	mov.w	r2, #4294967295
   209a2:	f04f 33ff 	mov.w	r3, #4294967295
   209a6:	4814      	ldr	r0, [pc, #80]	; (209f8 <at_cmd_write+0x134>)
   209a8:	a901      	add	r1, sp, #4
   209aa:	f008 fbc5 	bl	29138 <z_impl_k_msgq_get>
	k_mutex_unlock(&response_sync_get);
   209ae:	480f      	ldr	r0, [pc, #60]	; (209ec <at_cmd_write+0x128>)
   209b0:	f012 ff3c 	bl	3382c <k_mutex_unlock>
	if (state) {
   209b4:	2c00      	cmp	r4, #0
   209b6:	d0ee      	beq.n	20996 <at_cmd_write+0xd2>
		*state = ret.state;
   209b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   209bc:	e7ea      	b.n	20994 <at_cmd_write+0xd0>
		return -EHOSTDOWN;
   209be:	f06f 0074 	mvn.w	r0, #116	; 0x74
   209c2:	e7ba      	b.n	2093a <at_cmd_write+0x76>
   209c4:	20016764 	.word	0x20016764
   209c8:	20016768 	.word	0x20016768
   209cc:	0003b4a6 	.word	0x0003b4a6
   209d0:	0003b482 	.word	0x0003b482
   209d4:	00037f2c 	.word	0x00037f2c
   209d8:	0003b4c4 	.word	0x0003b4c4
   209dc:	000364b0 	.word	0x000364b0
   209e0:	000364b0 	.word	0x000364b0
   209e4:	0003b472 	.word	0x0003b472
   209e8:	0003b466 	.word	0x0003b466
   209ec:	20014ea4 	.word	0x20014ea4
   209f0:	20014ecc 	.word	0x20014ecc
   209f4:	0003b4f4 	.word	0x0003b4f4
   209f8:	20014f34 	.word	0x20014f34

000209fc <at_cmd_set_notification_handler>:
{
   209fc:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   209fe:	4c09      	ldr	r4, [pc, #36]	; (20a24 <at_cmd_set_notification_handler+0x28>)
{
   20a00:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   20a02:	6821      	ldr	r1, [r4, #0]
   20a04:	b159      	cbz	r1, 20a1e <at_cmd_set_notification_handler+0x22>
   20a06:	4281      	cmp	r1, r0
   20a08:	d009      	beq.n	20a1e <at_cmd_set_notification_handler+0x22>
   20a0a:	4a07      	ldr	r2, [pc, #28]	; (20a28 <at_cmd_set_notification_handler+0x2c>)
   20a0c:	4b07      	ldr	r3, [pc, #28]	; (20a2c <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   20a0e:	4808      	ldr	r0, [pc, #32]	; (20a30 <at_cmd_set_notification_handler+0x34>)
   20a10:	1ad2      	subs	r2, r2, r3
   20a12:	08d2      	lsrs	r2, r2, #3
   20a14:	0192      	lsls	r2, r2, #6
   20a16:	f042 0202 	orr.w	r2, r2, #2
   20a1a:	f00d fcf6 	bl	2e40a <log_1>
	notification_handler = handler;
   20a1e:	6025      	str	r5, [r4, #0]
}
   20a20:	bd38      	pop	{r3, r4, r5, pc}
   20a22:	bf00      	nop
   20a24:	20016758 	.word	0x20016758
   20a28:	000364b0 	.word	0x000364b0
   20a2c:	000364b0 	.word	0x000364b0
   20a30:	0003b514 	.word	0x0003b514

00020a34 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20a34:	4b0f      	ldr	r3, [pc, #60]	; (20a74 <find_node+0x40>)
{
   20a36:	b570      	push	{r4, r5, r6, lr}
   20a38:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20a3a:	6818      	ldr	r0, [r3, #0]
   20a3c:	b170      	cbz	r0, 20a5c <find_node+0x28>
	return node->next;
   20a3e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20a40:	4603      	mov	r3, r0
   20a42:	2d00      	cmp	r5, #0
   20a44:	4628      	mov	r0, r5
   20a46:	bf38      	it	cc
   20a48:	2000      	movcc	r0, #0
   20a4a:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   20a4c:	685e      	ldr	r6, [r3, #4]
   20a4e:	428e      	cmp	r6, r1
   20a50:	d105      	bne.n	20a5e <find_node+0x2a>
   20a52:	689e      	ldr	r6, [r3, #8]
   20a54:	4296      	cmp	r6, r2
   20a56:	d102      	bne.n	20a5e <find_node+0x2a>
			*prev_out = prev;
			return curr;
   20a58:	4618      	mov	r0, r3
			*prev_out = prev;
   20a5a:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   20a5c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20a5e:	2800      	cmp	r0, #0
   20a60:	d0fc      	beq.n	20a5c <find_node+0x28>
	return node->next;
   20a62:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20a64:	461d      	mov	r5, r3
   20a66:	2e00      	cmp	r6, #0
   20a68:	4603      	mov	r3, r0
   20a6a:	4630      	mov	r0, r6
   20a6c:	bf38      	it	cc
   20a6e:	2000      	movcc	r0, #0
   20a70:	e7ec      	b.n	20a4c <find_node+0x18>
   20a72:	bf00      	nop
   20a74:	2001676c 	.word	0x2001676c

00020a78 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   20a78:	4a0c      	ldr	r2, [pc, #48]	; (20aac <module_init+0x34>)
{
   20a7a:	b508      	push	{r3, lr}
	if (initialized) {
   20a7c:	7813      	ldrb	r3, [r2, #0]
   20a7e:	b15b      	cbz	r3, 20a98 <module_init+0x20>
   20a80:	490b      	ldr	r1, [pc, #44]	; (20ab0 <module_init+0x38>)
   20a82:	4b0c      	ldr	r3, [pc, #48]	; (20ab4 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   20a84:	480c      	ldr	r0, [pc, #48]	; (20ab8 <module_init+0x40>)
   20a86:	1ac9      	subs	r1, r1, r3
   20a88:	08c9      	lsrs	r1, r1, #3
   20a8a:	0189      	lsls	r1, r1, #6
   20a8c:	f041 0102 	orr.w	r1, r1, #2
   20a90:	f00d fcae 	bl	2e3f0 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   20a94:	2000      	movs	r0, #0
   20a96:	bd08      	pop	{r3, pc}
	initialized = true;
   20a98:	2101      	movs	r1, #1
   20a9a:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   20a9c:	4a07      	ldr	r2, [pc, #28]	; (20abc <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   20a9e:	4808      	ldr	r0, [pc, #32]	; (20ac0 <module_init+0x48>)
	list->tail = NULL;
   20aa0:	e9c2 3300 	strd	r3, r3, [r2]
   20aa4:	f7ff ffaa 	bl	209fc <at_cmd_set_notification_handler>
	return 0;
   20aa8:	e7f4      	b.n	20a94 <module_init+0x1c>
   20aaa:	bf00      	nop
   20aac:	2001c4e4 	.word	0x2001c4e4
   20ab0:	000364c0 	.word	0x000364c0
   20ab4:	000364b0 	.word	0x000364b0
   20ab8:	0003b544 	.word	0x0003b544
   20abc:	2001676c 	.word	0x2001676c
   20ac0:	00020ad1 	.word	0x00020ad1

00020ac4 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   20ac4:	4801      	ldr	r0, [pc, #4]	; (20acc <k_mutex_unlock.constprop.0+0x8>)
   20ac6:	f008 bd1d 	b.w	29504 <z_impl_k_mutex_unlock>
   20aca:	bf00      	nop
   20acc:	20014e7c 	.word	0x20014e7c

00020ad0 <notif_dispatch>:
{
   20ad0:	b538      	push	{r3, r4, r5, lr}
   20ad2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   20ad4:	f04f 33ff 	mov.w	r3, #4294967295
   20ad8:	f04f 32ff 	mov.w	r2, #4294967295
   20adc:	480d      	ldr	r0, [pc, #52]	; (20b14 <notif_dispatch+0x44>)
   20ade:	f008 fc17 	bl	29310 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20ae2:	4b0d      	ldr	r3, [pc, #52]	; (20b18 <notif_dispatch+0x48>)
   20ae4:	681b      	ldr	r3, [r3, #0]
   20ae6:	b91b      	cbnz	r3, 20af0 <notif_dispatch+0x20>
}
   20ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   20aec:	f7ff bfea 	b.w	20ac4 <k_mutex_unlock.constprop.0>
	return node->next;
   20af0:	681c      	ldr	r4, [r3, #0]
   20af2:	2c00      	cmp	r4, #0
   20af4:	bf38      	it	cc
   20af6:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   20af8:	4629      	mov	r1, r5
   20afa:	689a      	ldr	r2, [r3, #8]
   20afc:	6858      	ldr	r0, [r3, #4]
   20afe:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20b00:	2c00      	cmp	r4, #0
   20b02:	d0f1      	beq.n	20ae8 <notif_dispatch+0x18>
   20b04:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20b06:	4623      	mov	r3, r4
   20b08:	2a00      	cmp	r2, #0
   20b0a:	bf38      	it	cc
   20b0c:	2200      	movcc	r2, #0
   20b0e:	4614      	mov	r4, r2
   20b10:	e7f2      	b.n	20af8 <notif_dispatch+0x28>
   20b12:	bf00      	nop
   20b14:	20014e7c 	.word	0x20014e7c
   20b18:	2001676c 	.word	0x2001676c

00020b1c <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   20b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20b1e:	4606      	mov	r6, r0
	if (handler == NULL) {
   20b20:	460d      	mov	r5, r1
   20b22:	b979      	cbnz	r1, 20b44 <at_notif_register_handler+0x28>
   20b24:	4a1d      	ldr	r2, [pc, #116]	; (20b9c <at_notif_register_handler+0x80>)
   20b26:	4b1e      	ldr	r3, [pc, #120]	; (20ba0 <at_notif_register_handler+0x84>)
   20b28:	1a9b      	subs	r3, r3, r2
   20b2a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   20b2c:	019b      	lsls	r3, r3, #6
   20b2e:	460a      	mov	r2, r1
   20b30:	f043 0301 	orr.w	r3, r3, #1
   20b34:	4601      	mov	r1, r0
   20b36:	481b      	ldr	r0, [pc, #108]	; (20ba4 <at_notif_register_handler+0x88>)
   20b38:	f00d fc7b 	bl	2e432 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   20b3c:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   20b40:	b002      	add	sp, #8
   20b42:	bd70      	pop	{r4, r5, r6, pc}
   20b44:	f04f 32ff 	mov.w	r2, #4294967295
   20b48:	f04f 33ff 	mov.w	r3, #4294967295
   20b4c:	4816      	ldr	r0, [pc, #88]	; (20ba8 <at_notif_register_handler+0x8c>)
   20b4e:	f008 fbdf 	bl	29310 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   20b52:	462a      	mov	r2, r5
   20b54:	4631      	mov	r1, r6
   20b56:	a801      	add	r0, sp, #4
   20b58:	f7ff ff6c 	bl	20a34 <find_node>
   20b5c:	4604      	mov	r4, r0
   20b5e:	b118      	cbz	r0, 20b68 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   20b60:	f7ff ffb0 	bl	20ac4 <k_mutex_unlock.constprop.0>
		return 0;
   20b64:	2000      	movs	r0, #0
   20b66:	e7eb      	b.n	20b40 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   20b68:	200c      	movs	r0, #12
   20b6a:	f014 fcd2 	bl	35512 <k_malloc>
   20b6e:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   20b70:	b920      	cbnz	r0, 20b7c <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   20b72:	f7ff ffa7 	bl	20ac4 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   20b76:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20b7a:	e7e1      	b.n	20b40 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   20b7c:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   20b7e:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   20b80:	4a0a      	ldr	r2, [pc, #40]	; (20bac <at_notif_register_handler+0x90>)
   20b82:	6044      	str	r4, [r0, #4]
   20b84:	6084      	str	r4, [r0, #8]
	parent->next = child;
   20b86:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   20b88:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   20b8a:	e9c3 6501 	strd	r6, r5, [r3, #4]
   20b8e:	b911      	cbnz	r1, 20b96 <at_notif_register_handler+0x7a>
	list->head = node;
   20b90:	e9c2 3300 	strd	r3, r3, [r2]
}
   20b94:	e7e4      	b.n	20b60 <at_notif_register_handler+0x44>
	parent->next = child;
   20b96:	600b      	str	r3, [r1, #0]
	list->tail = node;
   20b98:	6053      	str	r3, [r2, #4]
}
   20b9a:	e7e1      	b.n	20b60 <at_notif_register_handler+0x44>
   20b9c:	000364b0 	.word	0x000364b0
   20ba0:	000364c0 	.word	0x000364c0
   20ba4:	0003b567 	.word	0x0003b567
   20ba8:	20014e7c 	.word	0x20014e7c
   20bac:	2001676c 	.word	0x2001676c

00020bb0 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   20bb0:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   20bb2:	4d05      	ldr	r5, [pc, #20]	; (20bc8 <write_uart_string+0x18>)
   20bb4:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   20bb6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   20bba:	b901      	cbnz	r1, 20bbe <write_uart_string+0xe>
	}
}
   20bbc:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   20bbe:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   20bc0:	6883      	ldr	r3, [r0, #8]
   20bc2:	69db      	ldr	r3, [r3, #28]
   20bc4:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   20bc6:	e7f6      	b.n	20bb6 <write_uart_string+0x6>
   20bc8:	20016788 	.word	0x20016788

00020bcc <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   20bcc:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   20bce:	4922      	ldr	r1, [pc, #136]	; (20c58 <cmd_send+0x8c>)
{
   20bd0:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   20bd2:	4608      	mov	r0, r1
   20bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   20bd8:	f10d 030b 	add.w	r3, sp, #11
   20bdc:	f7ff fe72 	bl	208c4 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   20be0:	1e01      	subs	r1, r0, #0
   20be2:	da0e      	bge.n	20c02 <cmd_send+0x36>
   20be4:	4b1d      	ldr	r3, [pc, #116]	; (20c5c <cmd_send+0x90>)
   20be6:	4a1e      	ldr	r2, [pc, #120]	; (20c60 <cmd_send+0x94>)
		LOG_ERR("Error while processing AT command: %d", err);
   20be8:	481e      	ldr	r0, [pc, #120]	; (20c64 <cmd_send+0x98>)
   20bea:	1ad2      	subs	r2, r2, r3
   20bec:	08d2      	lsrs	r2, r2, #3
   20bee:	0192      	lsls	r2, r2, #6
   20bf0:	f042 0201 	orr.w	r2, r2, #1
   20bf4:	f00d fc09 	bl	2e40a <log_1>
		state = AT_CMD_ERROR;
   20bf8:	2301      	movs	r3, #1
   20bfa:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   20bfe:	481a      	ldr	r0, [pc, #104]	; (20c68 <cmd_send+0x9c>)
   20c00:	e012      	b.n	20c28 <cmd_send+0x5c>
	switch (state) {
   20c02:	f89d 300b 	ldrb.w	r3, [sp, #11]
   20c06:	2b03      	cmp	r3, #3
   20c08:	d810      	bhi.n	20c2c <cmd_send+0x60>
   20c0a:	a201      	add	r2, pc, #4	; (adr r2, 20c10 <cmd_send+0x44>)
   20c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20c10:	00020c21 	.word	0x00020c21
   20c14:	00020bff 	.word	0x00020bff
   20c18:	00020c41 	.word	0x00020c41
   20c1c:	00020c53 	.word	0x00020c53
		write_uart_string(at_buf);
   20c20:	480d      	ldr	r0, [pc, #52]	; (20c58 <cmd_send+0x8c>)
   20c22:	f7ff ffc5 	bl	20bb0 <write_uart_string>
		write_uart_string(OK_STR);
   20c26:	4811      	ldr	r0, [pc, #68]	; (20c6c <cmd_send+0xa0>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   20c28:	f7ff ffc2 	bl	20bb0 <write_uart_string>
		break;
	default:
		break;
	}
	at_buf_busy = false;
   20c2c:	2200      	movs	r2, #0
   20c2e:	4b10      	ldr	r3, [pc, #64]	; (20c70 <cmd_send+0xa4>)
   20c30:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
   20c32:	4b10      	ldr	r3, [pc, #64]	; (20c74 <cmd_send+0xa8>)
   20c34:	6818      	ldr	r0, [r3, #0]
	z_impl_uart_irq_rx_enable(dev);
   20c36:	f012 fdfb 	bl	33830 <z_impl_uart_irq_rx_enable>
}
   20c3a:	b00b      	add	sp, #44	; 0x2c
   20c3c:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   20c40:	4b0d      	ldr	r3, [pc, #52]	; (20c78 <cmd_send+0xac>)
   20c42:	9100      	str	r1, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   20c44:	2219      	movs	r2, #25
   20c46:	2100      	movs	r1, #0
   20c48:	a803      	add	r0, sp, #12
   20c4a:	f014 fdd2 	bl	357f2 <__sprintf_chk>
		write_uart_string(str);
   20c4e:	a803      	add	r0, sp, #12
   20c50:	e7ea      	b.n	20c28 <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   20c52:	4b0a      	ldr	r3, [pc, #40]	; (20c7c <cmd_send+0xb0>)
   20c54:	9100      	str	r1, [sp, #0]
   20c56:	e7f5      	b.n	20c44 <cmd_send+0x78>
   20c58:	2001c4e5 	.word	0x2001c4e5
   20c5c:	000364b0 	.word	0x000364b0
   20c60:	000364b8 	.word	0x000364b8
   20c64:	0003b5a1 	.word	0x0003b5a1
   20c68:	0003b43d 	.word	0x0003b43d
   20c6c:	0003b420 	.word	0x0003b420
   20c70:	2001d4e5 	.word	0x2001d4e5
   20c74:	20016788 	.word	0x20016788
   20c78:	0003b5c7 	.word	0x0003b5c7
   20c7c:	0003b5d8 	.word	0x0003b5d8

00020c80 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   20c80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20c84:	4604      	mov	r4, r0
	if (api->irq_update == NULL) {
   20c86:	6883      	ldr	r3, [r0, #8]
   20c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   20c8a:	b103      	cbz	r3, 20c8e <isr+0xe>
	return api->irq_update(dev);
   20c8c:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   20c8e:	68a3      	ldr	r3, [r4, #8]
   20c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20c92:	b9eb      	cbnz	r3, 20cd0 <isr+0x50>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   20c94:	4f41      	ldr	r7, [pc, #260]	; (20d9c <isr+0x11c>)
   20c96:	4e42      	ldr	r6, [pc, #264]	; (20da0 <isr+0x120>)
   20c98:	46b8      	mov	r8, r7
   20c9a:	4b42      	ldr	r3, [pc, #264]	; (20da4 <isr+0x124>)
		if (at_cmd_len > 0) {
   20c9c:	4d42      	ldr	r5, [pc, #264]	; (20da8 <isr+0x128>)
   20c9e:	1af6      	subs	r6, r6, r3
   20ca0:	08f6      	lsrs	r6, r6, #3
	while ((!at_buf_busy) &&
   20ca2:	783b      	ldrb	r3, [r7, #0]
   20ca4:	b9c3      	cbnz	r3, 20cd8 <isr+0x58>
	if (api->fifo_read != NULL) {
   20ca6:	68a3      	ldr	r3, [r4, #8]
   20ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20caa:	b1ab      	cbz	r3, 20cd8 <isr+0x58>
		return api->fifo_read(dev, rx_data, size);
   20cac:	2201      	movs	r2, #1
   20cae:	4620      	mov	r0, r4
   20cb0:	f10d 0107 	add.w	r1, sp, #7
   20cb4:	4798      	blx	r3
   20cb6:	b178      	cbz	r0, 20cd8 <isr+0x58>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   20cb8:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   20cbc:	2908      	cmp	r1, #8
   20cbe:	d001      	beq.n	20cc4 <isr+0x44>
   20cc0:	297f      	cmp	r1, #127	; 0x7f
   20cc2:	d10c      	bne.n	20cde <isr+0x5e>
		if (at_cmd_len > 0) {
   20cc4:	682b      	ldr	r3, [r5, #0]
   20cc6:	2b00      	cmp	r3, #0
   20cc8:	d0eb      	beq.n	20ca2 <isr+0x22>
			at_cmd_len--;
   20cca:	3b01      	subs	r3, #1
   20ccc:	602b      	str	r3, [r5, #0]
   20cce:	e7e8      	b.n	20ca2 <isr+0x22>
	return api->irq_rx_ready(dev);
   20cd0:	4620      	mov	r0, r4
   20cd2:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   20cd4:	2800      	cmp	r0, #0
   20cd6:	d1dd      	bne.n	20c94 <isr+0x14>
	}
}
   20cd8:	b002      	add	sp, #8
   20cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!inside_quotes) {
   20cde:	4833      	ldr	r0, [pc, #204]	; (20dac <isr+0x12c>)
   20ce0:	7803      	ldrb	r3, [r0, #0]
   20ce2:	b993      	cbnz	r3, 20d0a <isr+0x8a>
		switch (character) {
   20ce4:	290a      	cmp	r1, #10
   20ce6:	d01e      	beq.n	20d26 <isr+0xa6>
   20ce8:	290d      	cmp	r1, #13
   20cea:	d00a      	beq.n	20d02 <isr+0x82>
   20cec:	b969      	cbnz	r1, 20d0a <isr+0x8a>
			if (term_mode == MODE_NULL_TERM) {
   20cee:	4b30      	ldr	r3, [pc, #192]	; (20db0 <isr+0x130>)
   20cf0:	781b      	ldrb	r3, [r3, #0]
   20cf2:	b3a3      	cbz	r3, 20d5e <isr+0xde>
			LOG_WRN("Ignored null; would terminate string early.");
   20cf4:	01b1      	lsls	r1, r6, #6
   20cf6:	482f      	ldr	r0, [pc, #188]	; (20db4 <isr+0x134>)
   20cf8:	f041 0102 	orr.w	r1, r1, #2
   20cfc:	f00d fb78 	bl	2e3f0 <log_0>
			return;
   20d00:	e7cf      	b.n	20ca2 <isr+0x22>
			if (term_mode == MODE_CR) {
   20d02:	4a2b      	ldr	r2, [pc, #172]	; (20db0 <isr+0x130>)
   20d04:	7812      	ldrb	r2, [r2, #0]
   20d06:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   20d08:	d029      	beq.n	20d5e <isr+0xde>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   20d0a:	f8d5 c000 	ldr.w	ip, [r5]
   20d0e:	f10c 0201 	add.w	r2, ip, #1
   20d12:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   20d16:	d317      	bcc.n	20d48 <isr+0xc8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   20d18:	01b2      	lsls	r2, r6, #6
   20d1a:	4827      	ldr	r0, [pc, #156]	; (20db8 <isr+0x138>)
   20d1c:	f042 0201 	orr.w	r2, r2, #1
   20d20:	f00d fb73 	bl	2e40a <log_1>
		return;
   20d24:	e7bd      	b.n	20ca2 <isr+0x22>
			if (term_mode == MODE_LF) {
   20d26:	4a22      	ldr	r2, [pc, #136]	; (20db0 <isr+0x130>)
   20d28:	7812      	ldrb	r2, [r2, #0]
   20d2a:	2a02      	cmp	r2, #2
   20d2c:	d017      	beq.n	20d5e <isr+0xde>
			if (term_mode == MODE_CR_LF &&
   20d2e:	2a03      	cmp	r2, #3
   20d30:	d1eb      	bne.n	20d0a <isr+0x8a>
   20d32:	f8d5 c000 	ldr.w	ip, [r5]
   20d36:	f1bc 0f00 	cmp.w	ip, #0
   20d3a:	d0e6      	beq.n	20d0a <isr+0x8a>
			    at_buf[at_cmd_len - 1] == '\r') {
   20d3c:	4a1f      	ldr	r2, [pc, #124]	; (20dbc <isr+0x13c>)
   20d3e:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   20d40:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   20d44:	2a0d      	cmp	r2, #13
   20d46:	e7df      	b.n	20d08 <isr+0x88>
	at_buf[at_cmd_len] = character;
   20d48:	f8df e070 	ldr.w	lr, [pc, #112]	; 20dbc <isr+0x13c>
	if (character == '"') {
   20d4c:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   20d4e:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   20d52:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   20d54:	d1a5      	bne.n	20ca2 <isr+0x22>
	if (!inside_quotes) {
   20d56:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   20d5a:	7003      	strb	r3, [r0, #0]
   20d5c:	e7a1      	b.n	20ca2 <isr+0x22>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   20d5e:	2200      	movs	r2, #0
   20d60:	6829      	ldr	r1, [r5, #0]
   20d62:	4b16      	ldr	r3, [pc, #88]	; (20dbc <isr+0x13c>)
	inside_quotes = false;
   20d64:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   20d66:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   20d68:	4619      	mov	r1, r3
   20d6a:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   20d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   20d70:	2a20      	cmp	r2, #32
   20d72:	d802      	bhi.n	20d7a <isr+0xfa>
		} else if (*c == '\0') {
   20d74:	2a00      	cmp	r2, #0
   20d76:	d1f9      	bne.n	20d6c <isr+0xec>
   20d78:	e793      	b.n	20ca2 <isr+0x22>
	if (at_buf[0]) {
   20d7a:	780b      	ldrb	r3, [r1, #0]
   20d7c:	2b00      	cmp	r3, #0
   20d7e:	d090      	beq.n	20ca2 <isr+0x22>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   20d80:	4b0f      	ldr	r3, [pc, #60]	; (20dc0 <isr+0x140>)
   20d82:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable != NULL) {
   20d84:	6883      	ldr	r3, [r0, #8]
   20d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20d88:	b103      	cbz	r3, 20d8c <isr+0x10c>
		api->irq_rx_disable(dev);
   20d8a:	4798      	blx	r3
		at_buf_busy = true;
   20d8c:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   20d8e:	490d      	ldr	r1, [pc, #52]	; (20dc4 <isr+0x144>)
   20d90:	480d      	ldr	r0, [pc, #52]	; (20dc8 <isr+0x148>)
		at_buf_busy = true;
   20d92:	f888 3000 	strb.w	r3, [r8]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   20d96:	f009 f8df 	bl	29f58 <k_work_submit_to_queue>
   20d9a:	e782      	b.n	20ca2 <isr+0x22>
   20d9c:	2001d4e5 	.word	0x2001d4e5
   20da0:	000364b8 	.word	0x000364b8
   20da4:	000364b0 	.word	0x000364b0
   20da8:	20016774 	.word	0x20016774
   20dac:	2001d4e6 	.word	0x2001d4e6
   20db0:	2001d4e7 	.word	0x2001d4e7
   20db4:	0003b5e9 	.word	0x0003b5e9
   20db8:	0003b615 	.word	0x0003b615
   20dbc:	2001c4e5 	.word	0x2001c4e5
   20dc0:	20016788 	.word	0x20016788
   20dc4:	20016778 	.word	0x20016778
   20dc8:	20015b40 	.word	0x20015b40

00020dcc <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   20dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   20dd0:	2201      	movs	r2, #1
   20dd2:	4b49      	ldr	r3, [pc, #292]	; (20ef8 <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   20dd4:	2000      	movs	r0, #0
   20dd6:	4949      	ldr	r1, [pc, #292]	; (20efc <at_host_init+0x130>)
		term_mode = mode;
   20dd8:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   20dda:	f7ff fe9f 	bl	20b1c <at_notif_register_handler>
	if (err != 0) {
   20dde:	4d48      	ldr	r5, [pc, #288]	; (20f00 <at_host_init+0x134>)
   20de0:	4a48      	ldr	r2, [pc, #288]	; (20f04 <at_host_init+0x138>)
   20de2:	4604      	mov	r4, r0
   20de4:	1aad      	subs	r5, r5, r2
   20de6:	08ed      	lsrs	r5, r5, #3
   20de8:	b150      	cbz	r0, 20e00 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   20dea:	01aa      	lsls	r2, r5, #6
   20dec:	4601      	mov	r1, r0
   20dee:	f042 0201 	orr.w	r2, r2, #1
   20df2:	4845      	ldr	r0, [pc, #276]	; (20f08 <at_host_init+0x13c>)
   20df4:	f00d fb09 	bl	2e40a <log_1>
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   20df8:	4620      	mov	r0, r4
   20dfa:	b004      	add	sp, #16
   20dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20e00:	4842      	ldr	r0, [pc, #264]	; (20f0c <at_host_init+0x140>)
   20e02:	f007 fbe9 	bl	285d8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   20e06:	4e42      	ldr	r6, [pc, #264]	; (20f10 <at_host_init+0x144>)
   20e08:	6030      	str	r0, [r6, #0]
	if (uart_dev == NULL) {
   20e0a:	b988      	cbnz	r0, 20e30 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   20e0c:	01aa      	lsls	r2, r5, #6
   20e0e:	493f      	ldr	r1, [pc, #252]	; (20f0c <at_host_init+0x140>)
   20e10:	4840      	ldr	r0, [pc, #256]	; (20f14 <at_host_init+0x148>)
   20e12:	f042 0201 	orr.w	r2, r2, #1
   20e16:	f00d faf8 	bl	2e40a <log_1>
		return -EINVAL;
   20e1a:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   20e1e:	01aa      	lsls	r2, r5, #6
   20e20:	483d      	ldr	r0, [pc, #244]	; (20f18 <at_host_init+0x14c>)
   20e22:	f042 0201 	orr.w	r2, r2, #1
   20e26:	f00d faf0 	bl	2e40a <log_1>
		return -EFAULT;
   20e2a:	f06f 040d 	mvn.w	r4, #13
   20e2e:	e7e3      	b.n	20df8 <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   20e30:	f014 facd 	bl	353ce <z_impl_k_uptime_ticks>
   20e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20e38:	460a      	mov	r2, r1
   20e3a:	fba0 0103 	umull	r0, r1, r0, r3
   20e3e:	fb03 1102 	mla	r1, r3, r2, r1
   20e42:	0bc7      	lsrs	r7, r0, #15
   20e44:	ea4f 1885 	mov.w	r8, r5, lsl #6
			LOG_INF("UART check failed: %d. "
   20e48:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 20f34 <at_host_init+0x168>
   20e4c:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
   20e50:	f048 0903 	orr.w	r9, r8, #3
		err = uart_err_check(uart_dev);
   20e54:	6830      	ldr	r0, [r6, #0]
	if (api->err_check == NULL) {
   20e56:	6883      	ldr	r3, [r0, #8]
   20e58:	6a1b      	ldr	r3, [r3, #32]
   20e5a:	b1db      	cbz	r3, 20e94 <at_host_init+0xc8>
	return api->err_check(dev);
   20e5c:	4798      	blx	r3
		if (err) {
   20e5e:	4604      	mov	r4, r0
   20e60:	b388      	cbz	r0, 20ec6 <at_host_init+0xfa>
   20e62:	f014 fab4 	bl	353ce <z_impl_k_uptime_ticks>
   20e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20e6a:	460a      	mov	r2, r1
   20e6c:	fba0 0103 	umull	r0, r1, r0, r3
   20e70:	fb03 1102 	mla	r1, r3, r2, r1
   20e74:	0bc3      	lsrs	r3, r0, #15
   20e76:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   20e7a:	1bdb      	subs	r3, r3, r7
   20e7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   20e80:	d90b      	bls.n	20e9a <at_host_init+0xce>
				LOG_ERR("UART check failed: %d. "
   20e82:	4621      	mov	r1, r4
   20e84:	4825      	ldr	r0, [pc, #148]	; (20f1c <at_host_init+0x150>)
   20e86:	f048 0201 	orr.w	r2, r8, #1
   20e8a:	f00d fabe 	bl	2e40a <log_1>
				return -EIO;
   20e8e:	f06f 0104 	mvn.w	r1, #4
   20e92:	e7c4      	b.n	20e1e <at_host_init+0x52>
		return -ENOSYS;
   20e94:	f06f 0457 	mvn.w	r4, #87	; 0x57
   20e98:	e7e3      	b.n	20e62 <at_host_init+0x96>
			LOG_INF("UART check failed: %d. "
   20e9a:	464a      	mov	r2, r9
   20e9c:	4621      	mov	r1, r4
   20e9e:	4650      	mov	r0, sl
   20ea0:	f00d fab3 	bl	2e40a <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   20ea4:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read != NULL) {
   20ea6:	6883      	ldr	r3, [r0, #8]
   20ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20eaa:	b92b      	cbnz	r3, 20eb8 <at_host_init+0xec>
	return z_impl_k_sleep(timeout);
   20eac:	2100      	movs	r1, #0
   20eae:	f44f 70a4 	mov.w	r0, #328	; 0x148
   20eb2:	f00a fc15 	bl	2b6e0 <z_impl_k_sleep>
	} while (err);
   20eb6:	e7cd      	b.n	20e54 <at_host_init+0x88>
		return api->fifo_read(dev, rx_data, size);
   20eb8:	2201      	movs	r2, #1
   20eba:	f10d 010f 	add.w	r1, sp, #15
   20ebe:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   20ec0:	2800      	cmp	r0, #0
   20ec2:	d1ef      	bne.n	20ea4 <at_host_init+0xd8>
   20ec4:	e7f2      	b.n	20eac <at_host_init+0xe0>
	uart_irq_callback_set(uart_dev, isr);
   20ec6:	6830      	ldr	r0, [r6, #0]
	const struct uart_driver_api *api =
   20ec8:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   20eca:	b123      	cbz	r3, 20ed6 <at_host_init+0x10a>
   20ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   20ece:	b113      	cbz	r3, 20ed6 <at_host_init+0x10a>
		api->irq_callback_set(dev, cb, user_data);
   20ed0:	4622      	mov	r2, r4
   20ed2:	4913      	ldr	r1, [pc, #76]	; (20f20 <at_host_init+0x154>)
   20ed4:	4798      	blx	r3
	k_work_init(&cmd_send_work, cmd_send);
   20ed6:	4913      	ldr	r1, [pc, #76]	; (20f24 <at_host_init+0x158>)
   20ed8:	4813      	ldr	r0, [pc, #76]	; (20f28 <at_host_init+0x15c>)
   20eda:	f009 f815 	bl	29f08 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   20ede:	2300      	movs	r3, #0
   20ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20ee4:	9300      	str	r3, [sp, #0]
   20ee6:	4911      	ldr	r1, [pc, #68]	; (20f2c <at_host_init+0x160>)
   20ee8:	230a      	movs	r3, #10
   20eea:	4811      	ldr	r0, [pc, #68]	; (20f30 <at_host_init+0x164>)
   20eec:	f009 f89e 	bl	2a02c <k_work_queue_start>
	uart_irq_rx_enable(uart_dev);
   20ef0:	6830      	ldr	r0, [r6, #0]
   20ef2:	f012 fc9d 	bl	33830 <z_impl_uart_irq_rx_enable>
	return err;
   20ef6:	e77f      	b.n	20df8 <at_host_init+0x2c>
   20ef8:	2001d4e7 	.word	0x2001d4e7
   20efc:	0003383b 	.word	0x0003383b
   20f00:	000364b8 	.word	0x000364b8
   20f04:	000364b0 	.word	0x000364b0
   20f08:	0003b635 	.word	0x0003b635
   20f0c:	0003852d 	.word	0x0003852d
   20f10:	20016788 	.word	0x20016788
   20f14:	0003b653 	.word	0x0003b653
   20f18:	0003b6ce 	.word	0x0003b6ce
   20f1c:	0003b663 	.word	0x0003b663
   20f20:	00020c81 	.word	0x00020c81
   20f24:	00020bcd 	.word	0x00020bcd
   20f28:	20016778 	.word	0x20016778
   20f2c:	20021578 	.word	0x20021578
   20f30:	20015b40 	.word	0x20015b40
   20f34:	0003b699 	.word	0x0003b699

00020f38 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   20f38:	4b06      	ldr	r3, [pc, #24]	; (20f54 <is_valid_notification_char+0x1c>)
   20f3a:	5cc3      	ldrb	r3, [r0, r3]
   20f3c:	f003 0303 	and.w	r3, r3, #3
   20f40:	2b02      	cmp	r3, #2
   20f42:	bf08      	it	eq
   20f44:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   20f46:	3841      	subs	r0, #65	; 0x41
   20f48:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   20f4a:	2819      	cmp	r0, #25
   20f4c:	bf8c      	ite	hi
   20f4e:	2000      	movhi	r0, #0
   20f50:	2001      	movls	r0, #1
   20f52:	4770      	bx	lr
   20f54:	0003e8c1 	.word	0x0003e8c1

00020f58 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   20f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   20f5c:	6805      	ldr	r5, [r0, #0]
{
   20f5e:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   20f60:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   20f62:	782b      	ldrb	r3, [r5, #0]
{
   20f64:	4680      	mov	r8, r0
   20f66:	460f      	mov	r7, r1
   20f68:	4616      	mov	r6, r2
   20f6a:	2b00      	cmp	r3, #0
   20f6c:	f000 80ca 	beq.w	21104 <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   20f70:	4b66      	ldr	r3, [pc, #408]	; (2110c <at_parse_process_element+0x1b4>)
   20f72:	781c      	ldrb	r4, [r3, #0]
   20f74:	2c06      	cmp	r4, #6
   20f76:	d110      	bne.n	20f9a <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   20f78:	1c6b      	adds	r3, r5, #1
   20f7a:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   20f7c:	9a00      	ldr	r2, [sp, #0]
   20f7e:	7810      	ldrb	r0, [r2, #0]
   20f80:	f7ff ffda 	bl	20f38 <is_valid_notification_char>
   20f84:	b930      	cbnz	r0, 20f94 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   20f86:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   20f88:	462a      	mov	r2, r5
   20f8a:	4639      	mov	r1, r7
   20f8c:	4630      	mov	r0, r6
   20f8e:	f012 fcc0 	bl	33912 <at_params_string_put>
   20f92:	e01c      	b.n	20fce <at_parse_process_element+0x76>
			tmpstr++;
   20f94:	3201      	adds	r2, #1
   20f96:	9200      	str	r2, [sp, #0]
   20f98:	e7f0      	b.n	20f7c <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   20f9a:	2c07      	cmp	r4, #7
   20f9c:	d125      	bne.n	20fea <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   20f9e:	4668      	mov	r0, sp
   20fa0:	f012 fc57 	bl	33852 <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   20fa4:	4a5a      	ldr	r2, [pc, #360]	; (21110 <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   20fa6:	9b00      	ldr	r3, [sp, #0]
   20fa8:	7819      	ldrb	r1, [r3, #0]
   20faa:	5c89      	ldrb	r1, [r1, r2]
   20fac:	0749      	lsls	r1, r1, #29
   20fae:	d115      	bne.n	20fdc <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   20fb0:	462a      	mov	r2, r5
   20fb2:	1b5b      	subs	r3, r3, r5
   20fb4:	4639      	mov	r1, r7
   20fb6:	4630      	mov	r0, r6
   20fb8:	f012 fcab 	bl	33912 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   20fbc:	9b00      	ldr	r3, [sp, #0]
   20fbe:	781a      	ldrb	r2, [r3, #0]
   20fc0:	2a3d      	cmp	r2, #61	; 0x3d
   20fc2:	d10e      	bne.n	20fe2 <at_parse_process_element+0x8a>
   20fc4:	785a      	ldrb	r2, [r3, #1]
   20fc6:	2a3f      	cmp	r2, #63	; 0x3f
   20fc8:	d101      	bne.n	20fce <at_parse_process_element+0x76>
			tmpstr += 2;
   20fca:	3302      	adds	r3, #2
			tmpstr++;
   20fcc:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   20fce:	2000      	movs	r0, #0
	*str = tmpstr;
   20fd0:	9b00      	ldr	r3, [sp, #0]
   20fd2:	f8c8 3000 	str.w	r3, [r8]
}
   20fd6:	b023      	add	sp, #140	; 0x8c
   20fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   20fdc:	3301      	adds	r3, #1
   20fde:	9300      	str	r3, [sp, #0]
   20fe0:	e7e1      	b.n	20fa6 <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   20fe2:	2a3f      	cmp	r2, #63	; 0x3f
   20fe4:	d1f3      	bne.n	20fce <at_parse_process_element+0x76>
			tmpstr++;
   20fe6:	3301      	adds	r3, #1
   20fe8:	e7f0      	b.n	20fcc <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   20fea:	2c08      	cmp	r4, #8
   20fec:	d103      	bne.n	20ff6 <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   20fee:	4610      	mov	r0, r2
   20ff0:	f012 fc61 	bl	338b6 <at_params_empty_put>
   20ff4:	e7eb      	b.n	20fce <at_parse_process_element+0x76>
	} else if (state == STRING) {
   20ff6:	2c02      	cmp	r4, #2
   20ff8:	d111      	bne.n	2101e <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   20ffa:	9a00      	ldr	r2, [sp, #0]
   20ffc:	7811      	ldrb	r1, [r2, #0]
   20ffe:	4608      	mov	r0, r1
   21000:	f012 fc1e 	bl	33840 <is_lfcr>
   21004:	b918      	cbnz	r0, 2100e <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21006:	b111      	cbz	r1, 2100e <at_parse_process_element+0xb6>
			tmpstr++;
   21008:	3201      	adds	r2, #1
   2100a:	9200      	str	r2, [sp, #0]
   2100c:	e7f5      	b.n	20ffa <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   2100e:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   21010:	462a      	mov	r2, r5
   21012:	4639      	mov	r1, r7
   21014:	4630      	mov	r0, r6
   21016:	f012 fc7c 	bl	33912 <at_params_string_put>
		tmpstr++;
   2101a:	9b00      	ldr	r3, [sp, #0]
   2101c:	e7e3      	b.n	20fe6 <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   2101e:	2c03      	cmp	r4, #3
   21020:	d109      	bne.n	21036 <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   21022:	9b00      	ldr	r3, [sp, #0]
   21024:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   21026:	2a22      	cmp	r2, #34	; 0x22
   21028:	d003      	beq.n	21032 <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2102a:	b112      	cbz	r2, 21032 <at_parse_process_element+0xda>
			tmpstr++;
   2102c:	3301      	adds	r3, #1
   2102e:	9300      	str	r3, [sp, #0]
   21030:	e7f7      	b.n	21022 <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   21032:	1b5b      	subs	r3, r3, r5
   21034:	e7ec      	b.n	21010 <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   21036:	2c01      	cmp	r4, #1
   21038:	d13c      	bne.n	210b4 <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2103a:	4628      	mov	r0, r5
   2103c:	220a      	movs	r2, #10
   2103e:	a901      	add	r1, sp, #4
   21040:	f00c fcb4 	bl	2d9ac <strtoul>
		tmpstr = next;
   21044:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   21046:	4d33      	ldr	r5, [pc, #204]	; (21114 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   21048:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2104a:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2104c:	9800      	ldr	r0, [sp, #0]
   2104e:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   21050:	2b29      	cmp	r3, #41	; 0x29
   21052:	d01f      	beq.n	21094 <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21054:	b1f3      	cbz	r3, 21094 <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   21056:	3b2c      	subs	r3, #44	; 0x2c
   21058:	b2db      	uxtb	r3, r3
   2105a:	3001      	adds	r0, #1
   2105c:	2b11      	cmp	r3, #17
				tmparray[i++] =
   2105e:	9000      	str	r0, [sp, #0]
   21060:	d826      	bhi.n	210b0 <at_parse_process_element+0x158>
   21062:	fa25 f303 	lsr.w	r3, r5, r3
   21066:	07db      	lsls	r3, r3, #31
   21068:	d522      	bpl.n	210b0 <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2106a:	220a      	movs	r2, #10
   2106c:	a901      	add	r1, sp, #4
   2106e:	f00c fc9d 	bl	2d9ac <strtoul>
				tmparray[i++] =
   21072:	ab22      	add	r3, sp, #136	; 0x88
   21074:	f104 0901 	add.w	r9, r4, #1
   21078:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2107c:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   21080:	9800      	ldr	r0, [sp, #0]
   21082:	f7f0 fa3d 	bl	11500 <strlen>
   21086:	4604      	mov	r4, r0
   21088:	9801      	ldr	r0, [sp, #4]
   2108a:	f7f0 fa39 	bl	11500 <strlen>
   2108e:	4284      	cmp	r4, r0
   21090:	d107      	bne.n	210a2 <at_parse_process_element+0x14a>
				tmparray[i++] =
   21092:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   21094:	4639      	mov	r1, r7
   21096:	4630      	mov	r0, r6
   21098:	00a3      	lsls	r3, r4, #2
   2109a:	aa02      	add	r2, sp, #8
   2109c:	f012 fc5f 	bl	3395e <at_params_array_put>
		tmpstr++;
   210a0:	e7bb      	b.n	2101a <at_parse_process_element+0xc2>
					tmpstr = next;
   210a2:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   210a4:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   210a8:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   210aa:	d0f2      	beq.n	21092 <at_parse_process_element+0x13a>
				tmpstr++;
   210ac:	464c      	mov	r4, r9
   210ae:	e7cd      	b.n	2104c <at_parse_process_element+0xf4>
   210b0:	46a1      	mov	r9, r4
   210b2:	e7fb      	b.n	210ac <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   210b4:	2c04      	cmp	r4, #4
   210b6:	d10d      	bne.n	210d4 <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   210b8:	220a      	movs	r2, #10
   210ba:	4628      	mov	r0, r5
   210bc:	a902      	add	r1, sp, #8
   210be:	f00c fbf1 	bl	2d8a4 <strtoll>
   210c2:	460b      	mov	r3, r1
		tmpstr = next;
   210c4:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   210c6:	4602      	mov	r2, r0
		tmpstr = next;
   210c8:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   210ca:	4630      	mov	r0, r6
   210cc:	4639      	mov	r1, r7
   210ce:	f012 fc09 	bl	338e4 <at_params_int_put>
   210d2:	e77c      	b.n	20fce <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   210d4:	2c05      	cmp	r4, #5
   210d6:	d10b      	bne.n	210f0 <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   210d8:	490d      	ldr	r1, [pc, #52]	; (21110 <at_parse_process_element+0x1b8>)
   210da:	9b00      	ldr	r3, [sp, #0]
   210dc:	781a      	ldrb	r2, [r3, #0]
   210de:	5c52      	ldrb	r2, [r2, r1]
   210e0:	f012 0f44 	tst.w	r2, #68	; 0x44
   210e4:	d101      	bne.n	210ea <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   210e6:	1b5b      	subs	r3, r3, r5
   210e8:	e74e      	b.n	20f88 <at_parse_process_element+0x30>
			tmpstr++;
   210ea:	3301      	adds	r3, #1
   210ec:	9300      	str	r3, [sp, #0]
   210ee:	e7f4      	b.n	210da <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   210f0:	2c09      	cmp	r4, #9
   210f2:	f47f af6c 	bne.w	20fce <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   210f6:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   210f8:	781a      	ldrb	r2, [r3, #0]
   210fa:	2a00      	cmp	r2, #0
   210fc:	d0f3      	beq.n	210e6 <at_parse_process_element+0x18e>
			tmpstr++;
   210fe:	3301      	adds	r3, #1
   21100:	9300      	str	r3, [sp, #0]
   21102:	e7f8      	b.n	210f6 <at_parse_process_element+0x19e>
		return -1;
   21104:	f04f 30ff 	mov.w	r0, #4294967295
   21108:	e765      	b.n	20fd6 <at_parse_process_element+0x7e>
   2110a:	bf00      	nop
   2110c:	2001d4e9 	.word	0x2001d4e9
   21110:	0003e8c1 	.word	0x0003e8c1
   21114:	00024001 	.word	0x00024001

00021118 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   21118:	b510      	push	{r4, lr}
   2111a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   2111c:	f7f0 f9f0 	bl	11500 <strlen>
   21120:	2801      	cmp	r0, #1
   21122:	d922      	bls.n	2116a <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   21124:	7821      	ldrb	r1, [r4, #0]
   21126:	4b13      	ldr	r3, [pc, #76]	; (21174 <is_command+0x5c>)
   21128:	5cca      	ldrb	r2, [r1, r3]
   2112a:	f002 0203 	and.w	r2, r2, #3
   2112e:	2a02      	cmp	r2, #2
   21130:	bf08      	it	eq
   21132:	3920      	subeq	r1, #32
   21134:	2941      	cmp	r1, #65	; 0x41
   21136:	461a      	mov	r2, r3
   21138:	d117      	bne.n	2116a <is_command+0x52>
   2113a:	7863      	ldrb	r3, [r4, #1]
   2113c:	5cd2      	ldrb	r2, [r2, r3]
   2113e:	f002 0203 	and.w	r2, r2, #3
   21142:	2a02      	cmp	r2, #2
   21144:	bf08      	it	eq
   21146:	3b20      	subeq	r3, #32
   21148:	2b54      	cmp	r3, #84	; 0x54
   2114a:	d10e      	bne.n	2116a <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2114c:	78a2      	ldrb	r2, [r4, #2]
   2114e:	2a25      	cmp	r2, #37	; 0x25
   21150:	d00d      	beq.n	2116e <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   21152:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   21156:	2b23      	cmp	r3, #35	; 0x23
   21158:	d009      	beq.n	2116e <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2115a:	4610      	mov	r0, r2
   2115c:	f012 fb70 	bl	33840 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   21160:	b910      	cbnz	r0, 21168 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21162:	fab2 f082 	clz	r0, r2
   21166:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   21168:	bd10      	pop	{r4, pc}
		return false;
   2116a:	2000      	movs	r0, #0
   2116c:	e7fc      	b.n	21168 <is_command+0x50>
		return true;
   2116e:	2001      	movs	r0, #1
   21170:	e7fa      	b.n	21168 <is_command+0x50>
   21172:	bf00      	nop
   21174:	0003e8c1 	.word	0x0003e8c1

00021178 <at_parse_detect_type>:
{
   21178:	b570      	push	{r4, r5, r6, lr}
   2117a:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   2117c:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2117e:	4e64      	ldr	r6, [pc, #400]	; (21310 <at_parse_detect_type+0x198>)
   21180:	2900      	cmp	r1, #0
   21182:	d137      	bne.n	211f4 <at_parse_detect_type+0x7c>
   21184:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   21186:	2b2b      	cmp	r3, #43	; 0x2b
   21188:	d001      	beq.n	2118e <at_parse_detect_type+0x16>
   2118a:	2b25      	cmp	r3, #37	; 0x25
   2118c:	d132      	bne.n	211f4 <at_parse_detect_type+0x7c>
	state = new_state;
   2118e:	2206      	movs	r2, #6
   21190:	4b60      	ldr	r3, [pc, #384]	; (21314 <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   21192:	4620      	mov	r0, r4
	state = new_state;
   21194:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   21196:	4960      	ldr	r1, [pc, #384]	; (21318 <at_parse_detect_type+0x1a0>)
   21198:	2205      	movs	r2, #5
   2119a:	f014 fb59 	bl	35850 <strncmp>
   2119e:	b920      	cbnz	r0, 211aa <at_parse_detect_type+0x32>
			retval = true;
   211a0:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   211a2:	7030      	strb	r0, [r6, #0]
	return 0;
   211a4:	2000      	movs	r0, #0
	*str = tmpstr;
   211a6:	602c      	str	r4, [r5, #0]
	return 0;
   211a8:	e064      	b.n	21274 <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   211aa:	2205      	movs	r2, #5
   211ac:	4620      	mov	r0, r4
   211ae:	495b      	ldr	r1, [pc, #364]	; (2131c <at_parse_detect_type+0x1a4>)
   211b0:	f014 fb4e 	bl	35850 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   211b4:	2800      	cmp	r0, #0
   211b6:	d0f3      	beq.n	211a0 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   211b8:	220b      	movs	r2, #11
   211ba:	4620      	mov	r0, r4
   211bc:	4958      	ldr	r1, [pc, #352]	; (21320 <at_parse_detect_type+0x1a8>)
   211be:	f014 fb47 	bl	35850 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   211c2:	2800      	cmp	r0, #0
   211c4:	d0ec      	beq.n	211a0 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   211c6:	220a      	movs	r2, #10
   211c8:	4620      	mov	r0, r4
   211ca:	4956      	ldr	r1, [pc, #344]	; (21324 <at_parse_detect_type+0x1ac>)
   211cc:	f014 fb40 	bl	35850 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   211d0:	2800      	cmp	r0, #0
   211d2:	d0e5      	beq.n	211a0 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   211d4:	220b      	movs	r2, #11
   211d6:	4620      	mov	r0, r4
   211d8:	4953      	ldr	r1, [pc, #332]	; (21328 <at_parse_detect_type+0x1b0>)
   211da:	f014 fb39 	bl	35850 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   211de:	2800      	cmp	r0, #0
   211e0:	d0de      	beq.n	211a0 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   211e2:	2207      	movs	r2, #7
   211e4:	4620      	mov	r0, r4
   211e6:	4951      	ldr	r1, [pc, #324]	; (2132c <at_parse_detect_type+0x1b4>)
   211e8:	f014 fb32 	bl	35850 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   211ec:	fab0 f080 	clz	r0, r0
   211f0:	0940      	lsrs	r0, r0, #5
   211f2:	e7d6      	b.n	211a2 <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   211f4:	7833      	ldrb	r3, [r6, #0]
   211f6:	b113      	cbz	r3, 211fe <at_parse_detect_type+0x86>
	state = new_state;
   211f8:	4b46      	ldr	r3, [pc, #280]	; (21314 <at_parse_detect_type+0x19c>)
   211fa:	2202      	movs	r2, #2
   211fc:	e043      	b.n	21286 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   211fe:	2900      	cmp	r1, #0
   21200:	dd39      	ble.n	21276 <at_parse_detect_type+0xfe>
   21202:	4622      	mov	r2, r4
   21204:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   21206:	f812 0b01 	ldrb.w	r0, [r2], #1
   2120a:	f012 fb19 	bl	33840 <is_lfcr>
   2120e:	2800      	cmp	r0, #0
   21210:	d1f8      	bne.n	21204 <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   21212:	4630      	mov	r0, r6
   21214:	f7f0 f974 	bl	11500 <strlen>
   21218:	2803      	cmp	r0, #3
   2121a:	d970      	bls.n	212fe <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   2121c:	7832      	ldrb	r2, [r6, #0]
   2121e:	4b44      	ldr	r3, [pc, #272]	; (21330 <at_parse_detect_type+0x1b8>)
   21220:	5cd1      	ldrb	r1, [r2, r3]
   21222:	f001 0103 	and.w	r1, r1, #3
   21226:	2902      	cmp	r1, #2
   21228:	bf08      	it	eq
   2122a:	3a20      	subeq	r2, #32
   2122c:	2a41      	cmp	r2, #65	; 0x41
   2122e:	d166      	bne.n	212fe <at_parse_detect_type+0x186>
   21230:	7872      	ldrb	r2, [r6, #1]
   21232:	5c99      	ldrb	r1, [r3, r2]
   21234:	f001 0103 	and.w	r1, r1, #3
   21238:	2902      	cmp	r1, #2
   2123a:	bf08      	it	eq
   2123c:	3a20      	subeq	r2, #32
   2123e:	2a54      	cmp	r2, #84	; 0x54
   21240:	d15d      	bne.n	212fe <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   21242:	78b2      	ldrb	r2, [r6, #2]
   21244:	5c99      	ldrb	r1, [r3, r2]
   21246:	f001 0103 	and.w	r1, r1, #3
   2124a:	2902      	cmp	r1, #2
   2124c:	bf08      	it	eq
   2124e:	3a20      	subeq	r2, #32
   21250:	2a2b      	cmp	r2, #43	; 0x2b
   21252:	d00a      	beq.n	2126a <at_parse_detect_type+0xf2>
   21254:	2a25      	cmp	r2, #37	; 0x25
   21256:	d152      	bne.n	212fe <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   21258:	78f2      	ldrb	r2, [r6, #3]
   2125a:	5c9b      	ldrb	r3, [r3, r2]
   2125c:	f003 0303 	and.w	r3, r3, #3
   21260:	2b02      	cmp	r3, #2
   21262:	bf08      	it	eq
   21264:	3a20      	subeq	r2, #32
   21266:	2a58      	cmp	r2, #88	; 0x58
   21268:	d049      	beq.n	212fe <at_parse_detect_type+0x186>
	state = new_state;
   2126a:	2209      	movs	r2, #9
		return -2;
   2126c:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   21270:	4b28      	ldr	r3, [pc, #160]	; (21314 <at_parse_detect_type+0x19c>)
   21272:	701a      	strb	r2, [r3, #0]
}
   21274:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   21276:	d108      	bne.n	2128a <at_parse_detect_type+0x112>
   21278:	4620      	mov	r0, r4
   2127a:	f7ff ff4d 	bl	21118 <is_command>
   2127e:	4b25      	ldr	r3, [pc, #148]	; (21314 <at_parse_detect_type+0x19c>)
   21280:	2800      	cmp	r0, #0
   21282:	d0ba      	beq.n	211fa <at_parse_detect_type+0x82>
	state = new_state;
   21284:	2207      	movs	r2, #7
   21286:	701a      	strb	r2, [r3, #0]
}
   21288:	e78c      	b.n	211a4 <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   2128a:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2128c:	4b28      	ldr	r3, [pc, #160]	; (21330 <at_parse_detect_type+0x1b8>)
   2128e:	5cd3      	ldrb	r3, [r2, r3]
   21290:	0759      	lsls	r1, r3, #29
   21292:	d403      	bmi.n	2129c <at_parse_detect_type+0x124>
   21294:	2a2d      	cmp	r2, #45	; 0x2d
   21296:	d001      	beq.n	2129c <at_parse_detect_type+0x124>
   21298:	2a2b      	cmp	r2, #43	; 0x2b
   2129a:	d102      	bne.n	212a2 <at_parse_detect_type+0x12a>
	state = new_state;
   2129c:	2204      	movs	r2, #4
   2129e:	4b1d      	ldr	r3, [pc, #116]	; (21314 <at_parse_detect_type+0x19c>)
   212a0:	e7f1      	b.n	21286 <at_parse_detect_type+0x10e>
	if (chr == '"') {
   212a2:	2a22      	cmp	r2, #34	; 0x22
   212a4:	d006      	beq.n	212b4 <at_parse_detect_type+0x13c>
	if (chr == '(') {
   212a6:	2a28      	cmp	r2, #40	; 0x28
   212a8:	d109      	bne.n	212be <at_parse_detect_type+0x146>
   212aa:	2201      	movs	r2, #1
   212ac:	4b19      	ldr	r3, [pc, #100]	; (21314 <at_parse_detect_type+0x19c>)
		tmpstr++;
   212ae:	4414      	add	r4, r2
	state = new_state;
   212b0:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   212b2:	e777      	b.n	211a4 <at_parse_detect_type+0x2c>
	state = new_state;
   212b4:	2203      	movs	r2, #3
   212b6:	4b17      	ldr	r3, [pc, #92]	; (21314 <at_parse_detect_type+0x19c>)
		tmpstr++;
   212b8:	3401      	adds	r4, #1
	state = new_state;
   212ba:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   212bc:	e772      	b.n	211a4 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   212be:	4610      	mov	r0, r2
   212c0:	f012 fabe 	bl	33840 <is_lfcr>
   212c4:	b178      	cbz	r0, 212e6 <at_parse_detect_type+0x16e>
   212c6:	4913      	ldr	r1, [pc, #76]	; (21314 <at_parse_detect_type+0x19c>)
   212c8:	7808      	ldrb	r0, [r1, #0]
   212ca:	2804      	cmp	r0, #4
   212cc:	d108      	bne.n	212e0 <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   212ce:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   212d2:	f012 fab5 	bl	33840 <is_lfcr>
   212d6:	2800      	cmp	r0, #0
   212d8:	d1f9      	bne.n	212ce <at_parse_detect_type+0x156>
	state = new_state;
   212da:	2305      	movs	r3, #5
   212dc:	700b      	strb	r3, [r1, #0]
}
   212de:	e761      	b.n	211a4 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   212e0:	2808      	cmp	r0, #8
   212e2:	f43f af5f 	beq.w	211a4 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   212e6:	3a2c      	subs	r2, #44	; 0x2c
   212e8:	b2d2      	uxtb	r2, r2
   212ea:	2a11      	cmp	r2, #17
   212ec:	d80c      	bhi.n	21308 <at_parse_detect_type+0x190>
   212ee:	4b11      	ldr	r3, [pc, #68]	; (21334 <at_parse_detect_type+0x1bc>)
   212f0:	fa23 f202 	lsr.w	r2, r3, r2
   212f4:	07d3      	lsls	r3, r2, #31
   212f6:	d507      	bpl.n	21308 <at_parse_detect_type+0x190>
	state = new_state;
   212f8:	2208      	movs	r2, #8
   212fa:	4b06      	ldr	r3, [pc, #24]	; (21314 <at_parse_detect_type+0x19c>)
   212fc:	e7c3      	b.n	21286 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   212fe:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   21300:	2b2b      	cmp	r3, #43	; 0x2b
   21302:	d001      	beq.n	21308 <at_parse_detect_type+0x190>
   21304:	2b25      	cmp	r3, #37	; 0x25
   21306:	d1c0      	bne.n	2128a <at_parse_detect_type+0x112>
		return -1;
   21308:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   2130c:	602c      	str	r4, [r5, #0]
		return -1;
   2130e:	e7b1      	b.n	21274 <at_parse_detect_type+0xfc>
   21310:	2001d4e8 	.word	0x2001d4e8
   21314:	2001d4e9 	.word	0x2001d4e9
   21318:	0003b6f8 	.word	0x0003b6f8
   2131c:	0003b6fe 	.word	0x0003b6fe
   21320:	0003b704 	.word	0x0003b704
   21324:	0003b710 	.word	0x0003b710
   21328:	0003b71b 	.word	0x0003b71b
   2132c:	0003b727 	.word	0x0003b727
   21330:	0003e8c1 	.word	0x0003e8c1
   21334:	00024001 	.word	0x00024001

00021338 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   21338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2133c:	4689      	mov	r9, r1
   2133e:	4616      	mov	r6, r2
   21340:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   21342:	4680      	mov	r8, r0
{
   21344:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   21346:	2800      	cmp	r0, #0
   21348:	f000 808b 	beq.w	21462 <at_parser_max_params_from_str+0x12a>
   2134c:	2a00      	cmp	r2, #0
   2134e:	f000 8088 	beq.w	21462 <at_parser_max_params_from_str+0x12a>
   21352:	6853      	ldr	r3, [r2, #4]
   21354:	2b00      	cmp	r3, #0
   21356:	f000 8084 	beq.w	21462 <at_parser_max_params_from_str+0x12a>
	state = IDLE;
   2135a:	2500      	movs	r5, #0
	int index = 0;
   2135c:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   2135e:	4610      	mov	r0, r2
   21360:	f000 f8f4 	bl	2154c <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   21364:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   21366:	f8df a108 	ldr.w	sl, [pc, #264]	; 21470 <at_parser_max_params_from_str+0x138>
	max_params_count = MIN(max_params_count, list->param_count);
   2136a:	429f      	cmp	r7, r3
   2136c:	bf28      	it	cs
   2136e:	461f      	movcs	r7, r3
	state = IDLE;
   21370:	4b3d      	ldr	r3, [pc, #244]	; (21468 <at_parser_max_params_from_str+0x130>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   21372:	f8df b100 	ldr.w	fp, [pc, #256]	; 21474 <at_parser_max_params_from_str+0x13c>
   21376:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   21378:	4b3c      	ldr	r3, [pc, #240]	; (2146c <at_parser_max_params_from_str+0x134>)
	const char *str = *at_params_str;
   2137a:	f8cd 800c 	str.w	r8, [sp, #12]
	set_type_string = false;
   2137e:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   21380:	9b03      	ldr	r3, [sp, #12]
   21382:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21384:	2a00      	cmp	r2, #0
   21386:	d052      	beq.n	2142e <at_parser_max_params_from_str+0xf6>
   21388:	42a7      	cmp	r7, r4
   2138a:	d950      	bls.n	2142e <at_parser_max_params_from_str+0xf6>
		if (isspace((int)*str)) {
   2138c:	f812 200a 	ldrb.w	r2, [r2, sl]
		ret = at_parse_detect_type(&str, index);
   21390:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   21392:	0711      	lsls	r1, r2, #28
			str++;
   21394:	bf48      	it	mi
   21396:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   21398:	4621      	mov	r1, r4
			str++;
   2139a:	bf48      	it	mi
   2139c:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   2139e:	f7ff feeb 	bl	21178 <at_parse_detect_type>
		if (ret == -1) {
   213a2:	1c42      	adds	r2, r0, #1
   213a4:	d043      	beq.n	2142e <at_parser_max_params_from_str+0xf6>
		if (ret == -2) {
   213a6:	3002      	adds	r0, #2
			index = 0;
   213a8:	bf08      	it	eq
   213aa:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   213ac:	4632      	mov	r2, r6
   213ae:	4621      	mov	r1, r4
   213b0:	a803      	add	r0, sp, #12
			str = *at_params_str;
   213b2:	bf08      	it	eq
   213b4:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   213b8:	f7ff fdce 	bl	20f58 <at_parse_process_element>
   213bc:	1c43      	adds	r3, r0, #1
   213be:	d036      	beq.n	2142e <at_parser_max_params_from_str+0xf6>
		if (is_separator(*str)) {
   213c0:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   213c2:	7813      	ldrb	r3, [r2, #0]
   213c4:	3b2c      	subs	r3, #44	; 0x2c
   213c6:	b2db      	uxtb	r3, r3
   213c8:	2b11      	cmp	r3, #17
   213ca:	d81a      	bhi.n	21402 <at_parser_max_params_from_str+0xca>
   213cc:	fa2b f303 	lsr.w	r3, fp, r3
   213d0:	07d9      	lsls	r1, r3, #31
   213d2:	d516      	bpl.n	21402 <at_parser_max_params_from_str+0xca>
			if (is_lfcr(*(str + 1))) {
   213d4:	7850      	ldrb	r0, [r2, #1]
   213d6:	f012 fa33 	bl	33840 <is_lfcr>
   213da:	b178      	cbz	r0, 213fc <at_parser_max_params_from_str+0xc4>
				index++;
   213dc:	3401      	adds	r4, #1
				if (index == max_params) {
   213de:	42bc      	cmp	r4, r7
   213e0:	d03a      	beq.n	21458 <at_parser_max_params_from_str+0x120>
				if (at_parse_detect_type(&str, index) == -1) {
   213e2:	4621      	mov	r1, r4
   213e4:	a803      	add	r0, sp, #12
   213e6:	f7ff fec7 	bl	21178 <at_parse_detect_type>
   213ea:	1c42      	adds	r2, r0, #1
   213ec:	d01f      	beq.n	2142e <at_parser_max_params_from_str+0xf6>
				if (at_parse_process_element(&str, index,
   213ee:	4632      	mov	r2, r6
   213f0:	4621      	mov	r1, r4
   213f2:	a803      	add	r0, sp, #12
   213f4:	f7ff fdb0 	bl	20f58 <at_parse_process_element>
   213f8:	1c43      	adds	r3, r0, #1
   213fa:	d018      	beq.n	2142e <at_parser_max_params_from_str+0xf6>
			str++;
   213fc:	9b03      	ldr	r3, [sp, #12]
   213fe:	3301      	adds	r3, #1
   21400:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   21402:	9a03      	ldr	r2, [sp, #12]
   21404:	7810      	ldrb	r0, [r2, #0]
   21406:	f012 fa1b 	bl	33840 <is_lfcr>
   2140a:	b300      	cbz	r0, 2144e <at_parser_max_params_from_str+0x116>
   2140c:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2140e:	4613      	mov	r3, r2
   21410:	7811      	ldrb	r1, [r2, #0]
   21412:	9301      	str	r3, [sp, #4]
   21414:	4608      	mov	r0, r1
   21416:	3201      	adds	r2, #1
   21418:	f012 fa12 	bl	33840 <is_lfcr>
   2141c:	9b01      	ldr	r3, [sp, #4]
   2141e:	2800      	cmp	r0, #0
   21420:	d1f5      	bne.n	2140e <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21422:	b119      	cbz	r1, 2142c <at_parser_max_params_from_str+0xf4>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   21424:	292b      	cmp	r1, #43	; 0x2b
   21426:	d001      	beq.n	2142c <at_parser_max_params_from_str+0xf4>
   21428:	2925      	cmp	r1, #37	; 0x25
   2142a:	d110      	bne.n	2144e <at_parser_max_params_from_str+0x116>
				str += i;
   2142c:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   2142e:	9b03      	ldr	r3, [sp, #12]
	if (oversized) {
   21430:	b9a5      	cbnz	r5, 2145c <at_parser_max_params_from_str+0x124>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21432:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   21434:	2a00      	cmp	r2, #0
   21436:	bf0c      	ite	eq
   21438:	2000      	moveq	r0, #0
   2143a:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2143e:	f1b9 0f00 	cmp.w	r9, #0
   21442:	d001      	beq.n	21448 <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   21444:	f8c9 3000 	str.w	r3, [r9]
	}

	return err;
}
   21448:	b005      	add	sp, #20
   2144a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2144e:	3401      	adds	r4, #1
			oversized = true;
   21450:	42bc      	cmp	r4, r7
   21452:	bf08      	it	eq
   21454:	2501      	moveq	r5, #1
   21456:	e793      	b.n	21380 <at_parser_max_params_from_str+0x48>
					oversized = true;
   21458:	4605      	mov	r5, r0
   2145a:	e7e8      	b.n	2142e <at_parser_max_params_from_str+0xf6>
		return -E2BIG;
   2145c:	f06f 0006 	mvn.w	r0, #6
   21460:	e7ed      	b.n	2143e <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   21462:	f06f 0015 	mvn.w	r0, #21
   21466:	e7ef      	b.n	21448 <at_parser_max_params_from_str+0x110>
   21468:	2001d4e9 	.word	0x2001d4e9
   2146c:	2001d4e8 	.word	0x2001d4e8
   21470:	0003e8c1 	.word	0x0003e8c1
   21474:	00024001 	.word	0x00024001

00021478 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   21478:	b538      	push	{r3, r4, r5, lr}
   2147a:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2147c:	4604      	mov	r4, r0
   2147e:	b960      	cbnz	r0, 2149a <at_params_get+0x22>
   21480:	490a      	ldr	r1, [pc, #40]	; (214ac <at_params_get+0x34>)
   21482:	232b      	movs	r3, #43	; 0x2b
   21484:	4a0a      	ldr	r2, [pc, #40]	; (214b0 <at_params_get+0x38>)
   21486:	480b      	ldr	r0, [pc, #44]	; (214b4 <at_params_get+0x3c>)
   21488:	f00c fc7e 	bl	2dd88 <printk>
   2148c:	480a      	ldr	r0, [pc, #40]	; (214b8 <at_params_get+0x40>)
   2148e:	f00c fc7b 	bl	2dd88 <printk>
   21492:	212b      	movs	r1, #43	; 0x2b
   21494:	4806      	ldr	r0, [pc, #24]	; (214b0 <at_params_get+0x38>)
   21496:	f00c ff5d 	bl	2e354 <assert_post_action>

	if (index >= list->param_count) {
   2149a:	6823      	ldr	r3, [r4, #0]
   2149c:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2149e:	bf8a      	itet	hi
   214a0:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   214a2:	2000      	movls	r0, #0
	return &param[index];
   214a4:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   214a8:	bd38      	pop	{r3, r4, r5, pc}
   214aa:	bf00      	nop
   214ac:	0003b75d 	.word	0x0003b75d
   214b0:	0003b72f 	.word	0x0003b72f
   214b4:	00037f2c 	.word	0x00037f2c
   214b8:	0003b771 	.word	0x0003b771

000214bc <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   214bc:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   214be:	4604      	mov	r4, r0
   214c0:	b960      	cbnz	r0, 214dc <at_param_size+0x20>
   214c2:	490c      	ldr	r1, [pc, #48]	; (214f4 <at_param_size+0x38>)
   214c4:	2339      	movs	r3, #57	; 0x39
   214c6:	4a0c      	ldr	r2, [pc, #48]	; (214f8 <at_param_size+0x3c>)
   214c8:	480c      	ldr	r0, [pc, #48]	; (214fc <at_param_size+0x40>)
   214ca:	f00c fc5d 	bl	2dd88 <printk>
   214ce:	480c      	ldr	r0, [pc, #48]	; (21500 <at_param_size+0x44>)
   214d0:	f00c fc5a 	bl	2dd88 <printk>
   214d4:	2139      	movs	r1, #57	; 0x39
   214d6:	4808      	ldr	r0, [pc, #32]	; (214f8 <at_param_size+0x3c>)
   214d8:	f00c ff3c 	bl	2e354 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   214dc:	7823      	ldrb	r3, [r4, #0]
   214de:	2b01      	cmp	r3, #1
   214e0:	d004      	beq.n	214ec <at_param_size+0x30>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   214e2:	3b02      	subs	r3, #2
   214e4:	2b01      	cmp	r3, #1
   214e6:	d803      	bhi.n	214f0 <at_param_size+0x34>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   214e8:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   214ea:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   214ec:	2008      	movs	r0, #8
   214ee:	e7fc      	b.n	214ea <at_param_size+0x2e>
	return 0;
   214f0:	2000      	movs	r0, #0
   214f2:	e7fa      	b.n	214ea <at_param_size+0x2e>
   214f4:	0003b792 	.word	0x0003b792
   214f8:	0003b72f 	.word	0x0003b72f
   214fc:	00037f2c 	.word	0x00037f2c
   21500:	0003b7a7 	.word	0x0003b7a7

00021504 <at_param_clear>:
{
   21504:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   21506:	4604      	mov	r4, r0
   21508:	b960      	cbnz	r0, 21524 <at_param_clear+0x20>
   2150a:	490c      	ldr	r1, [pc, #48]	; (2153c <at_param_clear+0x38>)
   2150c:	231d      	movs	r3, #29
   2150e:	4a0c      	ldr	r2, [pc, #48]	; (21540 <at_param_clear+0x3c>)
   21510:	480c      	ldr	r0, [pc, #48]	; (21544 <at_param_clear+0x40>)
   21512:	f00c fc39 	bl	2dd88 <printk>
   21516:	480c      	ldr	r0, [pc, #48]	; (21548 <at_param_clear+0x44>)
   21518:	f00c fc36 	bl	2dd88 <printk>
   2151c:	211d      	movs	r1, #29
   2151e:	4808      	ldr	r0, [pc, #32]	; (21540 <at_param_clear+0x3c>)
   21520:	f00c ff18 	bl	2e354 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   21524:	7823      	ldrb	r3, [r4, #0]
   21526:	3b02      	subs	r3, #2
   21528:	2b01      	cmp	r3, #1
   2152a:	d802      	bhi.n	21532 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   2152c:	68a0      	ldr	r0, [r4, #8]
   2152e:	f013 ffe9 	bl	35504 <k_free>
	param->value.int_val = 0;
   21532:	2200      	movs	r2, #0
   21534:	2300      	movs	r3, #0
   21536:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   2153a:	bd10      	pop	{r4, pc}
   2153c:	0003b792 	.word	0x0003b792
   21540:	0003b72f 	.word	0x0003b72f
   21544:	00037f2c 	.word	0x00037f2c
   21548:	0003b7a7 	.word	0x0003b7a7

0002154c <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   2154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (list == NULL || list->params == NULL) {
   21550:	4604      	mov	r4, r0
   21552:	b150      	cbz	r0, 2156a <at_params_list_clear+0x1e>
   21554:	6843      	ldr	r3, [r0, #4]
   21556:	b143      	cbz	r3, 2156a <at_params_list_clear+0x1e>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   21558:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2155a:	4f12      	ldr	r7, [pc, #72]	; (215a4 <at_params_list_clear+0x58>)
   2155c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 215ac <at_params_list_clear+0x60>
   21560:	f8df 904c 	ldr.w	r9, [pc, #76]	; 215b0 <at_params_list_clear+0x64>
	for (size_t i = 0; i < list->param_count; ++i) {
   21564:	6823      	ldr	r3, [r4, #0]
   21566:	429e      	cmp	r6, r3
   21568:	d301      	bcc.n	2156e <at_params_list_clear+0x22>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2156a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		at_param_clear(&params[i]);
   2156e:	6865      	ldr	r5, [r4, #4]
   21570:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   21574:	4628      	mov	r0, r5
   21576:	f7ff ffc5 	bl	21504 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2157a:	b965      	cbnz	r5, 21596 <at_params_list_clear+0x4a>
   2157c:	4641      	mov	r1, r8
   2157e:	2314      	movs	r3, #20
   21580:	463a      	mov	r2, r7
   21582:	4648      	mov	r0, r9
   21584:	f00c fc00 	bl	2dd88 <printk>
   21588:	4807      	ldr	r0, [pc, #28]	; (215a8 <at_params_list_clear+0x5c>)
   2158a:	f00c fbfd 	bl	2dd88 <printk>
   2158e:	2114      	movs	r1, #20
   21590:	4638      	mov	r0, r7
   21592:	f00c fedf 	bl	2e354 <assert_post_action>
   21596:	2210      	movs	r2, #16
   21598:	2100      	movs	r1, #0
   2159a:	4628      	mov	r0, r5
   2159c:	f014 f813 	bl	355c6 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   215a0:	3601      	adds	r6, #1
   215a2:	e7df      	b.n	21564 <at_params_list_clear+0x18>
   215a4:	0003b72f 	.word	0x0003b72f
   215a8:	0003b7a7 	.word	0x0003b7a7
   215ac:	0003b792 	.word	0x0003b792
   215b0:	00037f2c 	.word	0x00037f2c

000215b4 <enable_notifications>:
{
	int err;
	char buf_sub[35];

	/* +CEREG notifications, level 5 */
	err = at_cmd_write(cereg_5_subscribe, NULL, 0, NULL);
   215b4:	2300      	movs	r3, #0
{
   215b6:	b530      	push	{r4, r5, lr}
	err = at_cmd_write(cereg_5_subscribe, NULL, 0, NULL);
   215b8:	461a      	mov	r2, r3
   215ba:	4619      	mov	r1, r3
   215bc:	481e      	ldr	r0, [pc, #120]	; (21638 <enable_notifications+0x84>)
{
   215be:	b08f      	sub	sp, #60	; 0x3c
	err = at_cmd_write(cereg_5_subscribe, NULL, 0, NULL);
   215c0:	f7ff f980 	bl	208c4 <at_cmd_write>
	if (err) {
   215c4:	4605      	mov	r5, r0
   215c6:	b160      	cbz	r0, 215e2 <enable_notifications+0x2e>
   215c8:	491c      	ldr	r1, [pc, #112]	; (2163c <enable_notifications+0x88>)
   215ca:	4b1d      	ldr	r3, [pc, #116]	; (21640 <enable_notifications+0x8c>)
		LOG_ERR("Failed to subscribe to CEREG notifications");
   215cc:	481d      	ldr	r0, [pc, #116]	; (21644 <enable_notifications+0x90>)
   215ce:	1ac9      	subs	r1, r1, r3
   215d0:	08c9      	lsrs	r1, r1, #3
   215d2:	0189      	lsls	r1, r1, #6
   215d4:	f041 0101 	orr.w	r1, r1, #1
   215d8:	f00c ff0a 	bl	2e3f0 <log_0>
				log_strdup(buf));
		}
	}

	return 0;
}
   215dc:	4628      	mov	r0, r5
   215de:	b00f      	add	sp, #60	; 0x3c
   215e0:	bd30      	pop	{r4, r5, pc}
	err = at_cmd_write(cscon, NULL, 0, NULL);
   215e2:	4602      	mov	r2, r0
   215e4:	4603      	mov	r3, r0
   215e6:	4601      	mov	r1, r0
   215e8:	4817      	ldr	r0, [pc, #92]	; (21648 <enable_notifications+0x94>)
   215ea:	f7ff f96b 	bl	208c4 <at_cmd_write>
	if (err) {
   215ee:	4602      	mov	r2, r0
   215f0:	2800      	cmp	r0, #0
   215f2:	d0f3      	beq.n	215dc <enable_notifications+0x28>
   215f4:	4b12      	ldr	r3, [pc, #72]	; (21640 <enable_notifications+0x8c>)
   215f6:	4c11      	ldr	r4, [pc, #68]	; (2163c <enable_notifications+0x88>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   215f8:	4913      	ldr	r1, [pc, #76]	; (21648 <enable_notifications+0x94>)
   215fa:	1ae4      	subs	r4, r4, r3
   215fc:	08e4      	lsrs	r4, r4, #3
   215fe:	01a4      	lsls	r4, r4, #6
   21600:	f044 0402 	orr.w	r4, r4, #2
   21604:	4623      	mov	r3, r4
   21606:	4811      	ldr	r0, [pc, #68]	; (2164c <enable_notifications+0x98>)
   21608:	f00c ff13 	bl	2e432 <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   2160c:	4622      	mov	r2, r4
   2160e:	490e      	ldr	r1, [pc, #56]	; (21648 <enable_notifications+0x94>)
   21610:	480f      	ldr	r0, [pc, #60]	; (21650 <enable_notifications+0x9c>)
   21612:	f00c fefa 	bl	2e40a <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   21616:	462b      	mov	r3, r5
   21618:	2232      	movs	r2, #50	; 0x32
   2161a:	480e      	ldr	r0, [pc, #56]	; (21654 <enable_notifications+0xa0>)
   2161c:	a901      	add	r1, sp, #4
   2161e:	f7ff f951 	bl	208c4 <at_cmd_write>
		if (err == 0) {
   21622:	2800      	cmp	r0, #0
   21624:	d1da      	bne.n	215dc <enable_notifications+0x28>
   21626:	a801      	add	r0, sp, #4
   21628:	f7f3 fa94 	bl	14b54 <z_log_strdup>
			LOG_WRN("Current modem firmware version: %s",
   2162c:	4622      	mov	r2, r4
   2162e:	4601      	mov	r1, r0
   21630:	4809      	ldr	r0, [pc, #36]	; (21658 <enable_notifications+0xa4>)
   21632:	f00c feea 	bl	2e40a <log_1>
   21636:	e7d1      	b.n	215dc <enable_notifications+0x28>
   21638:	0003c11c 	.word	0x0003c11c
   2163c:	00036578 	.word	0x00036578
   21640:	000364b0 	.word	0x000364b0
   21644:	0003b7c3 	.word	0x0003b7c3
   21648:	0003c127 	.word	0x0003c127
   2164c:	0003b7ee 	.word	0x0003b7ee
   21650:	0003b820 	.word	0x0003b820
   21654:	0003b84b 	.word	0x0003b84b
   21658:	0003b853 	.word	0x0003b853

0002165c <at_handler>:
{
   2165c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21660:	460e      	mov	r6, r1
   21662:	b09e      	sub	sp, #120	; 0x78
	struct lte_lc_evt evt = {0};
   21664:	2238      	movs	r2, #56	; 0x38
   21666:	2100      	movs	r1, #0
   21668:	a810      	add	r0, sp, #64	; 0x40
   2166a:	f013 ffac 	bl	355c6 <memset>
	if (response == NULL) {
   2166e:	b956      	cbnz	r6, 21686 <at_handler+0x2a>
   21670:	49ab      	ldr	r1, [pc, #684]	; (21920 <at_handler+0x2c4>)
   21672:	4bac      	ldr	r3, [pc, #688]	; (21924 <at_handler+0x2c8>)
		LOG_ERR("Response buffer is NULL-pointer");
   21674:	48ac      	ldr	r0, [pc, #688]	; (21928 <at_handler+0x2cc>)
   21676:	1ac9      	subs	r1, r1, r3
   21678:	08c9      	lsrs	r1, r1, #3
   2167a:	0189      	lsls	r1, r1, #6
   2167c:	f041 0101 	orr.w	r1, r1, #1
				LOG_ERR("Failed to allocate memory for neighbor cells");
   21680:	f00c feb6 	bl	2e3f0 <log_0>
				return;
   21684:	e01f      	b.n	216c6 <at_handler+0x6a>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   21686:	2500      	movs	r5, #0
   21688:	4ca8      	ldr	r4, [pc, #672]	; (2192c <at_handler+0x2d0>)
		if (strncmp(at_notifs[i], notif,
   2168a:	f854 7b04 	ldr.w	r7, [r4], #4
   2168e:	4638      	mov	r0, r7
   21690:	f7ef ff36 	bl	11500 <strlen>
   21694:	4631      	mov	r1, r6
   21696:	4602      	mov	r2, r0
   21698:	4638      	mov	r0, r7
   2169a:	f014 f8d9 	bl	35850 <strncmp>
   2169e:	b978      	cbnz	r0, 216c0 <at_handler+0x64>
	switch (notif_type) {
   216a0:	4c9f      	ldr	r4, [pc, #636]	; (21920 <at_handler+0x2c4>)
   216a2:	4ba0      	ldr	r3, [pc, #640]	; (21924 <at_handler+0x2c8>)
   216a4:	b2ed      	uxtb	r5, r5
   216a6:	1ae4      	subs	r4, r4, r3
   216a8:	08e4      	lsrs	r4, r4, #3
   216aa:	3d01      	subs	r5, #1
   216ac:	01a4      	lsls	r4, r4, #6
   216ae:	2d04      	cmp	r5, #4
   216b0:	d80c      	bhi.n	216cc <at_handler+0x70>
   216b2:	e8df f015 	tbh	[pc, r5, lsl #1]
   216b6:	00a6      	.short	0x00a6
   216b8:	00d000be 	.word	0x00d000be
   216bc:	016700ec 	.word	0x016700ec
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   216c0:	3501      	adds	r5, #1
   216c2:	2d06      	cmp	r5, #6
   216c4:	d1e1      	bne.n	2168a <at_handler+0x2e>
}
   216c6:	b01e      	add	sp, #120	; 0x78
   216c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		enum lte_lc_nw_reg_status reg_status = 0;
   216cc:	2300      	movs	r3, #0
   216ce:	4630      	mov	r0, r6
   216d0:	f88d 300e 	strb.w	r3, [sp, #14]
   216d4:	f7f3 fa3e 	bl	14b54 <z_log_strdup>
		LOG_DBG("+CEREG notification: %s", log_strdup(response));
   216d8:	f044 0504 	orr.w	r5, r4, #4
   216dc:	4602      	mov	r2, r0
   216de:	462b      	mov	r3, r5
   216e0:	4993      	ldr	r1, [pc, #588]	; (21930 <at_handler+0x2d4>)
   216e2:	4894      	ldr	r0, [pc, #592]	; (21934 <at_handler+0x2d8>)
   216e4:	f00c fea5 	bl	2e432 <log_2>
		err = parse_cereg(response, true, &reg_status, &cell, &lte_mode, &psm_cfg);
   216e8:	af04      	add	r7, sp, #16
   216ea:	f10d 030f 	add.w	r3, sp, #15
   216ee:	9300      	str	r3, [sp, #0]
   216f0:	2101      	movs	r1, #1
   216f2:	4630      	mov	r0, r6
   216f4:	9701      	str	r7, [sp, #4]
   216f6:	ab06      	add	r3, sp, #24
   216f8:	f10d 020e 	add.w	r2, sp, #14
   216fc:	f000 fe90 	bl	22420 <parse_cereg>
		if (err) {
   21700:	4605      	mov	r5, r0
   21702:	b158      	cbz	r0, 2171c <at_handler+0xc0>
   21704:	4630      	mov	r0, r6
   21706:	f7f3 fa25 	bl	14b54 <z_log_strdup>
			LOG_ERR("Failed to parse notification (error %d): %s",
   2170a:	f044 0401 	orr.w	r4, r4, #1
   2170e:	4602      	mov	r2, r0
   21710:	4623      	mov	r3, r4
   21712:	4629      	mov	r1, r5
   21714:	4888      	ldr	r0, [pc, #544]	; (21938 <at_handler+0x2dc>)
   21716:	f00c fe8c 	bl	2e432 <log_2>
			return;
   2171a:	e7d4      	b.n	216c6 <at_handler+0x6a>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2171c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   21720:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   21724:	2b01      	cmp	r3, #1
   21726:	d102      	bne.n	2172e <at_handler+0xd2>
	z_impl_k_sem_give(sem);
   21728:	4884      	ldr	r0, [pc, #528]	; (2193c <at_handler+0x2e0>)
   2172a:	f008 f919 	bl	29960 <z_impl_k_sem_give>
		if (!evt_handler) {
   2172e:	4b84      	ldr	r3, [pc, #528]	; (21940 <at_handler+0x2e4>)
   21730:	681a      	ldr	r2, [r3, #0]
   21732:	4698      	mov	r8, r3
   21734:	2a00      	cmp	r2, #0
   21736:	d0c6      	beq.n	216c6 <at_handler+0x6a>
		if (reg_status != prev_reg_status) {
   21738:	4982      	ldr	r1, [pc, #520]	; (21944 <at_handler+0x2e8>)
		switch (reg_status) {
   2173a:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (reg_status != prev_reg_status) {
   2173e:	7808      	ldrb	r0, [r1, #0]
   21740:	4298      	cmp	r0, r3
   21742:	d007      	beq.n	21754 <at_handler+0xf8>
			prev_reg_status = reg_status;
   21744:	700b      	strb	r3, [r1, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   21746:	2100      	movs	r1, #0
			evt.nw_reg_status = reg_status;
   21748:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   2174c:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
			evt_handler(&evt);
   21750:	a810      	add	r0, sp, #64	; 0x40
   21752:	4790      	blx	r2
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   21754:	2228      	movs	r2, #40	; 0x28
   21756:	497c      	ldr	r1, [pc, #496]	; (21948 <at_handler+0x2ec>)
   21758:	a806      	add	r0, sp, #24
   2175a:	f013 ff06 	bl	3556a <memcmp>
   2175e:	b1d0      	cbz	r0, 21796 <at_handler+0x13a>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   21760:	2304      	movs	r3, #4
   21762:	4c79      	ldr	r4, [pc, #484]	; (21948 <at_handler+0x2ec>)
   21764:	ad06      	add	r5, sp, #24
   21766:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   2176a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2176c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21772:	e895 0003 	ldmia.w	r5, {r0, r1}
   21776:	e884 0003 	stmia.w	r4, {r0, r1}
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   2177a:	ae12      	add	r6, sp, #72	; 0x48
   2177c:	ac06      	add	r4, sp, #24
   2177e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   21780:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   21784:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21786:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt_handler(&evt);
   2178a:	f8d8 3000 	ldr.w	r3, [r8]
   2178e:	e886 0003 	stmia.w	r6, {r0, r1}
   21792:	a810      	add	r0, sp, #64	; 0x40
   21794:	4798      	blx	r3
		if (lte_mode != prev_lte_mode) {
   21796:	4a6d      	ldr	r2, [pc, #436]	; (2194c <at_handler+0x2f0>)
   21798:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2179c:	7811      	ldrb	r1, [r2, #0]
   2179e:	4299      	cmp	r1, r3
   217a0:	d009      	beq.n	217b6 <at_handler+0x15a>
			prev_lte_mode = lte_mode;
   217a2:	7013      	strb	r3, [r2, #0]
			evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   217a4:	2205      	movs	r2, #5
			evt.lte_mode = lte_mode;
   217a6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
			evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   217aa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
			evt_handler(&evt);
   217ae:	f8d8 3000 	ldr.w	r3, [r8]
   217b2:	a810      	add	r0, sp, #64	; 0x40
   217b4:	4798      	blx	r3
		if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   217b6:	f89d 400e 	ldrb.w	r4, [sp, #14]
   217ba:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   217be:	2c01      	cmp	r4, #1
   217c0:	d181      	bne.n	216c6 <at_handler+0x6a>
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   217c2:	4d63      	ldr	r5, [pc, #396]	; (21950 <at_handler+0x2f4>)
   217c4:	2208      	movs	r2, #8
   217c6:	4629      	mov	r1, r5
   217c8:	4638      	mov	r0, r7
   217ca:	f013 fece 	bl	3556a <memcmp>
   217ce:	b160      	cbz	r0, 217ea <at_handler+0x18e>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   217d0:	e897 0003 	ldmia.w	r7, {r0, r1}
   217d4:	ab12      	add	r3, sp, #72	; 0x48
   217d6:	e883 0003 	stmia.w	r3, {r0, r1}
   217da:	e885 0003 	stmia.w	r5, {r0, r1}
			evt_handler(&evt);
   217de:	f8d8 3000 	ldr.w	r3, [r8]
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   217e2:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
			evt_handler(&evt);
   217e6:	a810      	add	r0, sp, #64	; 0x40
   217e8:	4798      	blx	r3
	bool notify = false;
   217ea:	2300      	movs	r3, #0
	if (evt_handler && notify) {
   217ec:	4a54      	ldr	r2, [pc, #336]	; (21940 <at_handler+0x2e4>)
   217ee:	6812      	ldr	r2, [r2, #0]
   217f0:	2a00      	cmp	r2, #0
   217f2:	f43f af68 	beq.w	216c6 <at_handler+0x6a>
   217f6:	2b00      	cmp	r3, #0
   217f8:	f43f af65 	beq.w	216c6 <at_handler+0x6a>
		evt_handler(&evt);
   217fc:	a810      	add	r0, sp, #64	; 0x40
   217fe:	4790      	blx	r2
   21800:	e761      	b.n	216c6 <at_handler+0x6a>
		LOG_DBG("+CSCON notification");
   21802:	494b      	ldr	r1, [pc, #300]	; (21930 <at_handler+0x2d4>)
   21804:	4853      	ldr	r0, [pc, #332]	; (21954 <at_handler+0x2f8>)
   21806:	f044 0204 	orr.w	r2, r4, #4
   2180a:	f00c fdfe 	bl	2e40a <log_1>
		err = parse_rrc_mode(response,
   2180e:	a912      	add	r1, sp, #72	; 0x48
   21810:	2201      	movs	r2, #1
   21812:	4630      	mov	r0, r6
   21814:	f000 fda0 	bl	22358 <parse_rrc_mode>
		if (err) {
   21818:	4601      	mov	r1, r0
   2181a:	b128      	cbz	r0, 21828 <at_handler+0x1cc>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
   2181c:	484e      	ldr	r0, [pc, #312]	; (21958 <at_handler+0x2fc>)
   2181e:	f044 0201 	orr.w	r2, r4, #1
			LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   21822:	f00c fdf2 	bl	2e40a <log_1>
			return;
   21826:	e74e      	b.n	216c6 <at_handler+0x6a>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   21828:	2303      	movs	r3, #3
			evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   2182a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		notify = true;
   2182e:	2301      	movs	r3, #1
   21830:	e7dc      	b.n	217ec <at_handler+0x190>
		LOG_DBG("+CEDRXP notification");
   21832:	493f      	ldr	r1, [pc, #252]	; (21930 <at_handler+0x2d4>)
   21834:	4849      	ldr	r0, [pc, #292]	; (2195c <at_handler+0x300>)
   21836:	f044 0204 	orr.w	r2, r4, #4
   2183a:	f00c fde6 	bl	2e40a <log_1>
		err = parse_edrx(response, &evt.edrx_cfg);
   2183e:	a912      	add	r1, sp, #72	; 0x48
   21840:	4630      	mov	r0, r6
   21842:	f7ef ff09 	bl	11658 <parse_edrx>
		if (err) {
   21846:	4601      	mov	r1, r0
   21848:	b118      	cbz	r0, 21852 <at_handler+0x1f6>
			LOG_ERR("Can't parse eDRX, error: %d", err);
   2184a:	4845      	ldr	r0, [pc, #276]	; (21960 <at_handler+0x304>)
   2184c:	f044 0201 	orr.w	r2, r4, #1
   21850:	e7e7      	b.n	21822 <at_handler+0x1c6>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   21852:	2302      	movs	r3, #2
   21854:	e7e9      	b.n	2182a <at_handler+0x1ce>
		LOG_DBG("%%XT3412 notification");
   21856:	4936      	ldr	r1, [pc, #216]	; (21930 <at_handler+0x2d4>)
   21858:	4842      	ldr	r0, [pc, #264]	; (21964 <at_handler+0x308>)
   2185a:	f044 0204 	orr.w	r2, r4, #4
   2185e:	f00c fdd4 	bl	2e40a <log_1>
		err = parse_xt3412(response, &evt.time);
   21862:	a912      	add	r1, sp, #72	; 0x48
   21864:	4630      	mov	r0, r6
   21866:	f000 ff3d 	bl	226e4 <parse_xt3412>
		if (err) {
   2186a:	4601      	mov	r1, r0
   2186c:	b118      	cbz	r0, 21876 <at_handler+0x21a>
			LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   2186e:	483e      	ldr	r0, [pc, #248]	; (21968 <at_handler+0x30c>)
   21870:	f044 0201 	orr.w	r2, r4, #1
   21874:	e7d5      	b.n	21822 <at_handler+0x1c6>
		if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   21876:	2300      	movs	r3, #0
   21878:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2187c:	f241 3288 	movw	r2, #5000	; 0x1388
   21880:	4299      	cmp	r1, r3
   21882:	bf08      	it	eq
   21884:	4290      	cmpeq	r0, r2
   21886:	f47f af1e 	bne.w	216c6 <at_handler+0x6a>
		evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   2188a:	2306      	movs	r3, #6
   2188c:	e7cd      	b.n	2182a <at_handler+0x1ce>
		int ncell_count = neighborcell_count_get(response);
   2188e:	4630      	mov	r0, r6
   21890:	f000 ff94 	bl	227bc <neighborcell_count_get>
   21894:	4605      	mov	r5, r0
		LOG_DBG("%%NCELLMEAS notification");
   21896:	f044 0704 	orr.w	r7, r4, #4
   2189a:	463a      	mov	r2, r7
   2189c:	4924      	ldr	r1, [pc, #144]	; (21930 <at_handler+0x2d4>)
   2189e:	4833      	ldr	r0, [pc, #204]	; (2196c <at_handler+0x310>)
   218a0:	f00c fdb3 	bl	2e40a <log_1>
		LOG_DBG("Neighbor cell count: %d", ncell_count);
   218a4:	463b      	mov	r3, r7
		if (!evt_handler) {
   218a6:	4f26      	ldr	r7, [pc, #152]	; (21940 <at_handler+0x2e4>)
		LOG_DBG("Neighbor cell count: %d", ncell_count);
   218a8:	462a      	mov	r2, r5
   218aa:	4921      	ldr	r1, [pc, #132]	; (21930 <at_handler+0x2d4>)
   218ac:	4830      	ldr	r0, [pc, #192]	; (21970 <at_handler+0x314>)
   218ae:	f00c fdc0 	bl	2e432 <log_2>
		if (!evt_handler) {
   218b2:	683a      	ldr	r2, [r7, #0]
   218b4:	2a00      	cmp	r2, #0
   218b6:	f43f af06 	beq.w	216c6 <at_handler+0x6a>
		if (ncell_count != 0) {
   218ba:	b14d      	cbz	r5, 218d0 <at_handler+0x274>
			neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   218bc:	4628      	mov	r0, r5
   218be:	2110      	movs	r1, #16
   218c0:	f013 fe2b 	bl	3551a <k_calloc>
			if (neighbor_cells == NULL) {
   218c4:	4605      	mov	r5, r0
   218c6:	b918      	cbnz	r0, 218d0 <at_handler+0x274>
				LOG_ERR("Failed to allocate memory for neighbor cells");
   218c8:	482a      	ldr	r0, [pc, #168]	; (21974 <at_handler+0x318>)
   218ca:	f044 0101 	orr.w	r1, r4, #1
   218ce:	e6d7      	b.n	21680 <at_handler+0x24>
		err = parse_ncellmeas(response, &evt.cells_info);
   218d0:	a912      	add	r1, sp, #72	; 0x48
   218d2:	4630      	mov	r0, r6
		evt.cells_info.neighbor_cells = neighbor_cells;
   218d4:	951d      	str	r5, [sp, #116]	; 0x74
		err = parse_ncellmeas(response, &evt.cells_info);
   218d6:	f000 ff97 	bl	22808 <parse_ncellmeas>
   218da:	1dc3      	adds	r3, r0, #7
   218dc:	4601      	mov	r1, r0
		switch (err) {
   218de:	d007      	beq.n	218f0 <at_handler+0x294>
   218e0:	2801      	cmp	r0, #1
   218e2:	d910      	bls.n	21906 <at_handler+0x2aa>
			LOG_ERR("Parsing of neighbour cells failed, err: %d", err);
   218e4:	4824      	ldr	r0, [pc, #144]	; (21978 <at_handler+0x31c>)
   218e6:	f044 0201 	orr.w	r2, r4, #1
   218ea:	f00c fd8e 	bl	2e40a <log_1>
   218ee:	e010      	b.n	21912 <at_handler+0x2b6>
			LOG_WRN("Not all neighbor cells could be parsed");
   218f0:	f044 0402 	orr.w	r4, r4, #2
   218f4:	4621      	mov	r1, r4
   218f6:	4821      	ldr	r0, [pc, #132]	; (2197c <at_handler+0x320>)
   218f8:	f00c fd7a 	bl	2e3f0 <log_0>
			LOG_WRN("More cells than the configured max count of %d were found",
   218fc:	4622      	mov	r2, r4
   218fe:	210a      	movs	r1, #10
   21900:	481f      	ldr	r0, [pc, #124]	; (21980 <at_handler+0x324>)
   21902:	f00c fd82 	bl	2e40a <log_1>
			evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   21906:	2307      	movs	r3, #7
			evt_handler(&evt);
   21908:	a810      	add	r0, sp, #64	; 0x40
			evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   2190a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
			evt_handler(&evt);
   2190e:	683b      	ldr	r3, [r7, #0]
   21910:	4798      	blx	r3
		if (neighbor_cells) {
   21912:	2d00      	cmp	r5, #0
   21914:	f43f aed7 	beq.w	216c6 <at_handler+0x6a>
			k_free(neighbor_cells);
   21918:	4628      	mov	r0, r5
   2191a:	f013 fdf3 	bl	35504 <k_free>
   2191e:	e6d2      	b.n	216c6 <at_handler+0x6a>
   21920:	00036578 	.word	0x00036578
   21924:	000364b0 	.word	0x000364b0
   21928:	0003b876 	.word	0x0003b876
   2192c:	00037080 	.word	0x00037080
   21930:	0003c0d3 	.word	0x0003c0d3
   21934:	0003b896 	.word	0x0003b896
   21938:	0003b8b2 	.word	0x0003b8b2
   2193c:	20016790 	.word	0x20016790
   21940:	2001678c 	.word	0x2001678c
   21944:	2001d4ee 	.word	0x2001d4ee
   21948:	20015be0 	.word	0x20015be0
   2194c:	2001d4ed 	.word	0x2001d4ed
   21950:	200167a8 	.word	0x200167a8
   21954:	0003b8de 	.word	0x0003b8de
   21958:	0003b8f6 	.word	0x0003b8f6
   2195c:	0003b91d 	.word	0x0003b91d
   21960:	0003b936 	.word	0x0003b936
   21964:	0003b952 	.word	0x0003b952
   21968:	0003b96c 	.word	0x0003b96c
   2196c:	0003b9a0 	.word	0x0003b9a0
   21970:	0003b9bd 	.word	0x0003b9bd
   21974:	0003b9d9 	.word	0x0003b9d9
   21978:	0003ba67 	.word	0x0003ba67
   2197c:	0003ba06 	.word	0x0003ba06
   21980:	0003ba2d 	.word	0x0003ba2d
		LOG_DBG("%%XMODEMSLEEP notification");
   21984:	4913      	ldr	r1, [pc, #76]	; (219d4 <at_handler+0x378>)
   21986:	4814      	ldr	r0, [pc, #80]	; (219d8 <at_handler+0x37c>)
   21988:	f044 0204 	orr.w	r2, r4, #4
   2198c:	f00c fd3d 	bl	2e40a <log_1>
		err = parse_xmodemsleep(response, &evt.modem_sleep);
   21990:	a912      	add	r1, sp, #72	; 0x48
   21992:	4630      	mov	r0, r6
   21994:	f001 f880 	bl	22a98 <parse_xmodemsleep>
		if (err) {
   21998:	4601      	mov	r1, r0
   2199a:	b118      	cbz	r0, 219a4 <at_handler+0x348>
			LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   2199c:	480f      	ldr	r0, [pc, #60]	; (219dc <at_handler+0x380>)
   2199e:	f044 0201 	orr.w	r2, r4, #1
   219a2:	e73e      	b.n	21822 <at_handler+0x1c6>
		if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   219a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   219a8:	1e5a      	subs	r2, r3, #1
   219aa:	2a01      	cmp	r2, #1
   219ac:	d902      	bls.n	219b4 <at_handler+0x358>
		    (evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   219ae:	2b04      	cmp	r3, #4
   219b0:	f47f ae89 	bne.w	216c6 <at_handler+0x6a>
		if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   219b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   219b8:	2100      	movs	r1, #0
   219ba:	f241 3088 	movw	r0, #5000	; 0x1388
   219be:	428b      	cmp	r3, r1
   219c0:	bf08      	it	eq
   219c2:	4282      	cmpeq	r2, r0
   219c4:	d101      	bne.n	219ca <at_handler+0x36e>
			evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   219c6:	2308      	movs	r3, #8
   219c8:	e72f      	b.n	2182a <at_handler+0x1ce>
		} else if (evt.modem_sleep.time == 0) {
   219ca:	4313      	orrs	r3, r2
			evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   219cc:	bf0c      	ite	eq
   219ce:	2309      	moveq	r3, #9
			evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   219d0:	230a      	movne	r3, #10
   219d2:	e72a      	b.n	2182a <at_handler+0x1ce>
   219d4:	0003c0d3 	.word	0x0003c0d3
   219d8:	0003ba92 	.word	0x0003ba92
   219dc:	0003bab1 	.word	0x0003bab1

000219e0 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   219e0:	b510      	push	{r4, lr}
	int err;

	if (enable) {
   219e2:	4603      	mov	r3, r0
{
   219e4:	b08c      	sub	sp, #48	; 0x30
	if (enable) {
   219e6:	2800      	cmp	r0, #0
   219e8:	d036      	beq.n	21a58 <lte_lc_psm_req+0x78>
		char psm_req[40];

		if (strlen(psm_param_rptau) == 8 &&
   219ea:	481d      	ldr	r0, [pc, #116]	; (21a60 <lte_lc_psm_req+0x80>)
   219ec:	f7ef fd88 	bl	11500 <strlen>
   219f0:	2808      	cmp	r0, #8
   219f2:	d118      	bne.n	21a26 <lte_lc_psm_req+0x46>
		    strlen(psm_param_rat) == 8) {
   219f4:	4c1b      	ldr	r4, [pc, #108]	; (21a64 <lte_lc_psm_req+0x84>)
   219f6:	4620      	mov	r0, r4
   219f8:	f7ef fd82 	bl	11500 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   219fc:	2808      	cmp	r0, #8
   219fe:	d112      	bne.n	21a26 <lte_lc_psm_req+0x46>
			snprintf(psm_req, sizeof(psm_req),
   21a00:	2128      	movs	r1, #40	; 0x28
   21a02:	4b17      	ldr	r3, [pc, #92]	; (21a60 <lte_lc_psm_req+0x80>)
   21a04:	4a18      	ldr	r2, [pc, #96]	; (21a68 <lte_lc_psm_req+0x88>)
   21a06:	9400      	str	r4, [sp, #0]
   21a08:	a802      	add	r0, sp, #8
   21a0a:	f00b fc0f 	bl	2d22c <sniprintf>
				psm_param_rat);
		} else {
			snprintf(psm_req, sizeof(psm_req),
				"AT+CPSMS=1");
		}
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   21a0e:	2300      	movs	r3, #0
   21a10:	461a      	mov	r2, r3
   21a12:	4619      	mov	r1, r3
   21a14:	a802      	add	r0, sp, #8
	} else {
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   21a16:	f7fe ff55 	bl	208c4 <at_cmd_write>
	}

	if (err != 0) {
		return -EIO;
   21a1a:	2800      	cmp	r0, #0
	}

	return 0;
}
   21a1c:	bf18      	it	ne
   21a1e:	f06f 0004 	mvnne.w	r0, #4
   21a22:	b00c      	add	sp, #48	; 0x30
   21a24:	bd10      	pop	{r4, pc}
		} else if (strlen(psm_param_rptau) == 8) {
   21a26:	480e      	ldr	r0, [pc, #56]	; (21a60 <lte_lc_psm_req+0x80>)
   21a28:	f7ef fd6a 	bl	11500 <strlen>
   21a2c:	2808      	cmp	r0, #8
   21a2e:	d106      	bne.n	21a3e <lte_lc_psm_req+0x5e>
			snprintf(psm_req, sizeof(psm_req),
   21a30:	4b0b      	ldr	r3, [pc, #44]	; (21a60 <lte_lc_psm_req+0x80>)
   21a32:	4a0e      	ldr	r2, [pc, #56]	; (21a6c <lte_lc_psm_req+0x8c>)
			snprintf(psm_req, sizeof(psm_req),
   21a34:	2128      	movs	r1, #40	; 0x28
   21a36:	a802      	add	r0, sp, #8
   21a38:	f00b fbf8 	bl	2d22c <sniprintf>
   21a3c:	e7e7      	b.n	21a0e <lte_lc_psm_req+0x2e>
		} else if (strlen(psm_param_rat) == 8) {
   21a3e:	4809      	ldr	r0, [pc, #36]	; (21a64 <lte_lc_psm_req+0x84>)
   21a40:	f7ef fd5e 	bl	11500 <strlen>
   21a44:	2808      	cmp	r0, #8
   21a46:	d102      	bne.n	21a4e <lte_lc_psm_req+0x6e>
			snprintf(psm_req, sizeof(psm_req),
   21a48:	4b06      	ldr	r3, [pc, #24]	; (21a64 <lte_lc_psm_req+0x84>)
   21a4a:	4a09      	ldr	r2, [pc, #36]	; (21a70 <lte_lc_psm_req+0x90>)
   21a4c:	e7f2      	b.n	21a34 <lte_lc_psm_req+0x54>
			snprintf(psm_req, sizeof(psm_req),
   21a4e:	4909      	ldr	r1, [pc, #36]	; (21a74 <lte_lc_psm_req+0x94>)
   21a50:	a802      	add	r0, sp, #8
   21a52:	f013 fef5 	bl	35840 <strcpy>
   21a56:	e7da      	b.n	21a0e <lte_lc_psm_req+0x2e>
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   21a58:	4602      	mov	r2, r0
   21a5a:	4601      	mov	r1, r0
   21a5c:	4806      	ldr	r0, [pc, #24]	; (21a78 <lte_lc_psm_req+0x98>)
   21a5e:	e7da      	b.n	21a16 <lte_lc_psm_req+0x36>
   21a60:	20014c1f 	.word	0x20014c1f
   21a64:	20014c16 	.word	0x20014c16
   21a68:	0003baed 	.word	0x0003baed
   21a6c:	0003bb04 	.word	0x0003bb04
   21a70:	0003bb16 	.word	0x0003bb16
   21a74:	0003bb29 	.word	0x0003bb29
   21a78:	0003c16c 	.word	0x0003c16c

00021a7c <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   21a7c:	2305      	movs	r3, #5
   21a7e:	2204      	movs	r2, #4
{
   21a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a84:	b08d      	sub	sp, #52	; 0x34
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   21a86:	e9cd 2303 	strd	r2, r3, [sp, #12]
	char req[25];

	if (!enable) {
   21a8a:	4603      	mov	r3, r0
   21a8c:	b9a8      	cbnz	r0, 21aba <lte_lc_edrx_req+0x3e>
		err = at_cmd_write(edrx_disable, NULL, 0, NULL);
   21a8e:	4602      	mov	r2, r0
   21a90:	4601      	mov	r1, r0
   21a92:	483b      	ldr	r0, [pc, #236]	; (21b80 <lte_lc_edrx_req+0x104>)
   21a94:	f7fe ff16 	bl	208c4 <at_cmd_write>
		if (err) {
   21a98:	4604      	mov	r4, r0
   21a9a:	b150      	cbz	r0, 21ab2 <lte_lc_edrx_req+0x36>
   21a9c:	4a39      	ldr	r2, [pc, #228]	; (21b84 <lte_lc_edrx_req+0x108>)
   21a9e:	4b3a      	ldr	r3, [pc, #232]	; (21b88 <lte_lc_edrx_req+0x10c>)
			LOG_ERR("Failed to disable eDRX, error: %d", err);
   21aa0:	4601      	mov	r1, r0
   21aa2:	1ad2      	subs	r2, r2, r3
   21aa4:	08d2      	lsrs	r2, r2, #3
   21aa6:	0192      	lsls	r2, r2, #6
   21aa8:	4838      	ldr	r0, [pc, #224]	; (21b8c <lte_lc_edrx_req+0x110>)
   21aaa:	f042 0201 	orr.w	r2, r2, #1
			snprintk(req, sizeof(req), "AT+CEDRXS=2,%d", actt[i]);
		}

		err = at_cmd_write(req, NULL, 0, NULL);
		if (err) {
			LOG_ERR("Failed to enable eDRX, error: %d", err);
   21aae:	f00c fcac 	bl	2e40a <log_1>
			return err;
		}
	}

	return 0;
}
   21ab2:	4620      	mov	r0, r4
   21ab4:	b00d      	add	sp, #52	; 0x34
   21ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   21aba:	2600      	movs	r6, #0
					edrx_param_ltem : edrx_param_nbiot;
   21abc:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 21ba8 <lte_lc_edrx_req+0x12c>
   21ac0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 21bac <lte_lc_edrx_req+0x130>
   21ac4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 21bb0 <lte_lc_edrx_req+0x134>
   21ac8:	af03      	add	r7, sp, #12
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   21aca:	f857 5b04 	ldr.w	r5, [r7], #4
					edrx_param_ltem : edrx_param_nbiot;
   21ace:	4b30      	ldr	r3, [pc, #192]	; (21b90 <lte_lc_edrx_req+0x114>)
   21ad0:	2d04      	cmp	r5, #4
   21ad2:	bf0c      	ite	eq
   21ad4:	4644      	moveq	r4, r8
   21ad6:	464c      	movne	r4, r9
		if (strlen(edrx_param) == 4) {
   21ad8:	4620      	mov	r0, r4
					edrx_param_ltem : edrx_param_nbiot;
   21ada:	bf0c      	ite	eq
   21adc:	46d3      	moveq	fp, sl
   21ade:	469b      	movne	fp, r3
		if (strlen(edrx_param) == 4) {
   21ae0:	f7ef fd0e 	bl	11500 <strlen>
   21ae4:	2804      	cmp	r0, #4
   21ae6:	d118      	bne.n	21b1a <lte_lc_edrx_req+0x9e>
			snprintk(req, sizeof(req), "AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   21ae8:	462b      	mov	r3, r5
   21aea:	2119      	movs	r1, #25
   21aec:	4a29      	ldr	r2, [pc, #164]	; (21b94 <lte_lc_edrx_req+0x118>)
   21aee:	9400      	str	r4, [sp, #0]
   21af0:	a805      	add	r0, sp, #20
   21af2:	f00c f956 	bl	2dda2 <snprintk>
		err = at_cmd_write(req, NULL, 0, NULL);
   21af6:	2300      	movs	r3, #0
   21af8:	a805      	add	r0, sp, #20
   21afa:	461a      	mov	r2, r3
   21afc:	4619      	mov	r1, r3
   21afe:	f7fe fee1 	bl	208c4 <at_cmd_write>
		if (err) {
   21b02:	4604      	mov	r4, r0
   21b04:	b180      	cbz	r0, 21b28 <lte_lc_edrx_req+0xac>
   21b06:	4a1f      	ldr	r2, [pc, #124]	; (21b84 <lte_lc_edrx_req+0x108>)
   21b08:	4b1f      	ldr	r3, [pc, #124]	; (21b88 <lte_lc_edrx_req+0x10c>)
			LOG_ERR("Failed to enable eDRX, error: %d", err);
   21b0a:	4601      	mov	r1, r0
   21b0c:	1ad2      	subs	r2, r2, r3
   21b0e:	08d2      	lsrs	r2, r2, #3
   21b10:	0192      	lsls	r2, r2, #6
   21b12:	4821      	ldr	r0, [pc, #132]	; (21b98 <lte_lc_edrx_req+0x11c>)
   21b14:	f042 0201 	orr.w	r2, r2, #1
   21b18:	e7c9      	b.n	21aae <lte_lc_edrx_req+0x32>
			snprintk(req, sizeof(req), "AT+CEDRXS=2,%d", actt[i]);
   21b1a:	462b      	mov	r3, r5
   21b1c:	2119      	movs	r1, #25
   21b1e:	4a1f      	ldr	r2, [pc, #124]	; (21b9c <lte_lc_edrx_req+0x120>)
   21b20:	a805      	add	r0, sp, #20
   21b22:	f00c f93e 	bl	2dda2 <snprintk>
   21b26:	e7e6      	b.n	21af6 <lte_lc_edrx_req+0x7a>
		if (strlen(ptw_param) != 4) {
   21b28:	4658      	mov	r0, fp
   21b2a:	f7ef fce9 	bl	11500 <strlen>
   21b2e:	2804      	cmp	r0, #4
   21b30:	d121      	bne.n	21b76 <lte_lc_edrx_req+0xfa>
		snprintk(req, sizeof(req), "AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   21b32:	462b      	mov	r3, r5
   21b34:	2119      	movs	r1, #25
   21b36:	4a1a      	ldr	r2, [pc, #104]	; (21ba0 <lte_lc_edrx_req+0x124>)
   21b38:	f8cd b000 	str.w	fp, [sp]
   21b3c:	a805      	add	r0, sp, #20
   21b3e:	f00c f930 	bl	2dda2 <snprintk>
		err = at_cmd_write(req, NULL, 0, NULL);
   21b42:	4623      	mov	r3, r4
   21b44:	4622      	mov	r2, r4
   21b46:	4621      	mov	r1, r4
   21b48:	a805      	add	r0, sp, #20
   21b4a:	f7fe febb 	bl	208c4 <at_cmd_write>
		if (err) {
   21b4e:	4605      	mov	r5, r0
   21b50:	b188      	cbz	r0, 21b76 <lte_lc_edrx_req+0xfa>
   21b52:	4b0d      	ldr	r3, [pc, #52]	; (21b88 <lte_lc_edrx_req+0x10c>)
   21b54:	4c0b      	ldr	r4, [pc, #44]	; (21b84 <lte_lc_edrx_req+0x108>)
   21b56:	a805      	add	r0, sp, #20
   21b58:	1ae4      	subs	r4, r4, r3
   21b5a:	f7f2 fffb 	bl	14b54 <z_log_strdup>
   21b5e:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Failed to request PTW (%s), error: %d", log_strdup(req), err);
   21b60:	01a4      	lsls	r4, r4, #6
   21b62:	f044 0401 	orr.w	r4, r4, #1
   21b66:	4601      	mov	r1, r0
   21b68:	4623      	mov	r3, r4
   21b6a:	462a      	mov	r2, r5
   21b6c:	480d      	ldr	r0, [pc, #52]	; (21ba4 <lte_lc_edrx_req+0x128>)
   21b6e:	f00c fc60 	bl	2e432 <log_2>
		err = at_cmd_write(req, NULL, 0, NULL);
   21b72:	462c      	mov	r4, r5
			return err;
   21b74:	e79d      	b.n	21ab2 <lte_lc_edrx_req+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   21b76:	2e00      	cmp	r6, #0
   21b78:	d19b      	bne.n	21ab2 <lte_lc_edrx_req+0x36>
   21b7a:	2601      	movs	r6, #1
   21b7c:	e7a5      	b.n	21aca <lte_lc_edrx_req+0x4e>
   21b7e:	bf00      	nop
   21b80:	0003c132 	.word	0x0003c132
   21b84:	00036578 	.word	0x00036578
   21b88:	000364b0 	.word	0x000364b0
   21b8c:	0003bb34 	.word	0x0003bb34
   21b90:	2001d4f4 	.word	0x2001d4f4
   21b94:	0003bb56 	.word	0x0003bb56
   21b98:	0003bb79 	.word	0x0003bb79
   21b9c:	0003bb6a 	.word	0x0003bb6a
   21ba0:	0003bb9a 	.word	0x0003bb9a
   21ba4:	0003bbab 	.word	0x0003bbab
   21ba8:	20014c0c 	.word	0x20014c0c
   21bac:	20014c11 	.word	0x20014c11
   21bb0:	2001d4ef 	.word	0x2001d4ef

00021bb4 <lte_lc_system_mode_set>:
	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   21bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bb6:	4b2a      	ldr	r3, [pc, #168]	; (21c60 <lte_lc_system_mode_set+0xac>)
   21bb8:	4c2a      	ldr	r4, [pc, #168]	; (21c64 <lte_lc_system_mode_set+0xb0>)
	int err, len;
	char cmd[50];

	switch (mode) {
   21bba:	2807      	cmp	r0, #7
   21bbc:	eba4 0403 	sub.w	r4, r4, r3
   21bc0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
{
   21bc4:	4607      	mov	r7, r0
   21bc6:	460e      	mov	r6, r1
   21bc8:	b091      	sub	sp, #68	; 0x44
   21bca:	ea4f 1484 	mov.w	r4, r4, lsl #6
	switch (mode) {
   21bce:	d909      	bls.n	21be4 <lte_lc_system_mode_set+0x30>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   21bd0:	4825      	ldr	r0, [pc, #148]	; (21c68 <lte_lc_system_mode_set+0xb4>)
   21bd2:	f044 0101 	orr.w	r1, r4, #1
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested");
   21bd6:	f00c fc0b 	bl	2e3f0 <log_0>
		return -EINVAL;
   21bda:	f06f 0515 	mvn.w	r5, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return err;
}
   21bde:	4628      	mov	r0, r5
   21be0:	b011      	add	sp, #68	; 0x44
   21be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (preference) {
   21be4:	2904      	cmp	r1, #4
   21be6:	d903      	bls.n	21bf0 <lte_lc_system_mode_set+0x3c>
		LOG_ERR("Invalid LTE preference requested");
   21be8:	4820      	ldr	r0, [pc, #128]	; (21c6c <lte_lc_system_mode_set+0xb8>)
   21bea:	f044 0101 	orr.w	r1, r4, #1
   21bee:	e7f2      	b.n	21bd6 <lte_lc_system_mode_set+0x22>
	len = snprintf(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s,%c",
   21bf0:	4b1f      	ldr	r3, [pc, #124]	; (21c70 <lte_lc_system_mode_set+0xbc>)
   21bf2:	4a20      	ldr	r2, [pc, #128]	; (21c74 <lte_lc_system_mode_set+0xc0>)
   21bf4:	5c5b      	ldrb	r3, [r3, r1]
   21bf6:	2132      	movs	r1, #50	; 0x32
   21bf8:	9300      	str	r3, [sp, #0]
   21bfa:	4b1f      	ldr	r3, [pc, #124]	; (21c78 <lte_lc_system_mode_set+0xc4>)
   21bfc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   21c00:	a803      	add	r0, sp, #12
   21c02:	f00b fb13 	bl	2d22c <sniprintf>
	if (len < 0) {
   21c06:	2800      	cmp	r0, #0
   21c08:	da07      	bge.n	21c1a <lte_lc_system_mode_set+0x66>
		LOG_ERR("Could not construct system mode command");
   21c0a:	481c      	ldr	r0, [pc, #112]	; (21c7c <lte_lc_system_mode_set+0xc8>)
   21c0c:	f044 0101 	orr.w	r1, r4, #1
   21c10:	f00c fbee 	bl	2e3f0 <log_0>
		return -EFAULT;
   21c14:	f06f 050d 	mvn.w	r5, #13
   21c18:	e7e1      	b.n	21bde <lte_lc_system_mode_set+0x2a>
   21c1a:	a803      	add	r0, sp, #12
   21c1c:	f7f2 ff9a 	bl	14b54 <z_log_strdup>
	LOG_DBG("Sending AT command to set system mode: %s", log_strdup(cmd));
   21c20:	f044 0504 	orr.w	r5, r4, #4
   21c24:	4602      	mov	r2, r0
   21c26:	462b      	mov	r3, r5
   21c28:	4915      	ldr	r1, [pc, #84]	; (21c80 <lte_lc_system_mode_set+0xcc>)
   21c2a:	4816      	ldr	r0, [pc, #88]	; (21c84 <lte_lc_system_mode_set+0xd0>)
   21c2c:	f00c fc01 	bl	2e432 <log_2>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   21c30:	2300      	movs	r3, #0
   21c32:	a803      	add	r0, sp, #12
   21c34:	461a      	mov	r2, r3
   21c36:	4619      	mov	r1, r3
   21c38:	f7fe fe44 	bl	208c4 <at_cmd_write>
	if (err) {
   21c3c:	4605      	mov	r5, r0
   21c3e:	b128      	cbz	r0, 21c4c <lte_lc_system_mode_set+0x98>
		LOG_ERR("Could not send AT command, error: %d", err);
   21c40:	4601      	mov	r1, r0
   21c42:	f044 0201 	orr.w	r2, r4, #1
   21c46:	4810      	ldr	r0, [pc, #64]	; (21c88 <lte_lc_system_mode_set+0xd4>)
   21c48:	f00c fbdf 	bl	2e40a <log_1>
	sys_mode_current = mode;
   21c4c:	4b0f      	ldr	r3, [pc, #60]	; (21c8c <lte_lc_system_mode_set+0xd8>)
   21c4e:	701f      	strb	r7, [r3, #0]
	sys_mode_target = mode;
   21c50:	4b0f      	ldr	r3, [pc, #60]	; (21c90 <lte_lc_system_mode_set+0xdc>)
   21c52:	701f      	strb	r7, [r3, #0]
	mode_pref_current = preference;
   21c54:	4b0f      	ldr	r3, [pc, #60]	; (21c94 <lte_lc_system_mode_set+0xe0>)
   21c56:	701e      	strb	r6, [r3, #0]
	mode_pref_target = preference;
   21c58:	4b0f      	ldr	r3, [pc, #60]	; (21c98 <lte_lc_system_mode_set+0xe4>)
   21c5a:	701e      	strb	r6, [r3, #0]
	return err;
   21c5c:	e7bf      	b.n	21bde <lte_lc_system_mode_set+0x2a>
   21c5e:	bf00      	nop
   21c60:	000364b0 	.word	0x000364b0
   21c64:	00036578 	.word	0x00036578
   21c68:	0003bbd1 	.word	0x0003bbd1
   21c6c:	0003bbef 	.word	0x0003bbef
   21c70:	0003c176 	.word	0x0003c176
   21c74:	0003bc10 	.word	0x0003bc10
   21c78:	00037098 	.word	0x00037098
   21c7c:	0003bc26 	.word	0x0003bc26
   21c80:	0003c0ee 	.word	0x0003c0ee
   21c84:	0003bc4e 	.word	0x0003bc4e
   21c88:	0003bc7c 	.word	0x0003bc7c
   21c8c:	2001d4f9 	.word	0x2001d4f9
   21c90:	20014c28 	.word	0x20014c28
   21c94:	2001d4eb 	.word	0x2001d4eb
   21c98:	2001d4ec 	.word	0x2001d4ec

00021c9c <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   21c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, temp_pref, mode_bitmask = 0;
	struct at_param_list resp_list = {0};
   21ca0:	2400      	movs	r4, #0
{
   21ca2:	b093      	sub	sp, #76	; 0x4c
   21ca4:	4605      	mov	r5, r0
   21ca6:	460e      	mov	r6, r1
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   21ca8:	221a      	movs	r2, #26
   21caa:	4621      	mov	r1, r4
   21cac:	a80b      	add	r0, sp, #44	; 0x2c
	struct at_param_list resp_list = {0};
   21cae:	e9cd 4404 	strd	r4, r4, [sp, #16]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   21cb2:	940a      	str	r4, [sp, #40]	; 0x28
   21cb4:	f013 fc87 	bl	355c6 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   21cb8:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   21cba:	e9cd 4406 	strd	r4, r4, [sp, #24]
   21cbe:	9408      	str	r4, [sp, #32]
   21cc0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   21cc4:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   21cc6:	2d00      	cmp	r5, #0
   21cc8:	f000 810d 	beq.w	21ee6 <lte_lc_system_mode_get+0x24a>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   21ccc:	4623      	mov	r3, r4
   21cce:	221e      	movs	r2, #30
   21cd0:	4886      	ldr	r0, [pc, #536]	; (21eec <lte_lc_system_mode_get+0x250>)
   21cd2:	a90a      	add	r1, sp, #40	; 0x28
   21cd4:	f7fe fdf6 	bl	208c4 <at_cmd_write>
			   NULL);
	if (err) {
   21cd8:	4604      	mov	r4, r0
   21cda:	b168      	cbz	r0, 21cf8 <lte_lc_system_mode_get+0x5c>
   21cdc:	4984      	ldr	r1, [pc, #528]	; (21ef0 <lte_lc_system_mode_get+0x254>)
   21cde:	4b85      	ldr	r3, [pc, #532]	; (21ef4 <lte_lc_system_mode_get+0x258>)
		LOG_ERR("Could not send AT command");
   21ce0:	4885      	ldr	r0, [pc, #532]	; (21ef8 <lte_lc_system_mode_get+0x25c>)
   21ce2:	1ac9      	subs	r1, r1, r3
   21ce4:	08c9      	lsrs	r1, r1, #3
   21ce6:	0189      	lsls	r1, r1, #6
   21ce8:	f041 0101 	orr.w	r1, r1, #1
   21cec:	f00c fb80 	bl	2e3f0 <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   21cf0:	4620      	mov	r0, r4
   21cf2:	b013      	add	sp, #76	; 0x4c
   21cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   21cf8:	2105      	movs	r1, #5
   21cfa:	a804      	add	r0, sp, #16
   21cfc:	f011 fdba 	bl	33874 <at_params_list_init>
	if (err) {
   21d00:	4604      	mov	r4, r0
   21d02:	b158      	cbz	r0, 21d1c <lte_lc_system_mode_get+0x80>
   21d04:	4b7b      	ldr	r3, [pc, #492]	; (21ef4 <lte_lc_system_mode_get+0x258>)
   21d06:	4a7a      	ldr	r2, [pc, #488]	; (21ef0 <lte_lc_system_mode_get+0x254>)
		LOG_ERR("Could init AT params list, error: %d", err);
   21d08:	4601      	mov	r1, r0
   21d0a:	1ad2      	subs	r2, r2, r3
   21d0c:	08d2      	lsrs	r2, r2, #3
   21d0e:	0192      	lsls	r2, r2, #6
   21d10:	487a      	ldr	r0, [pc, #488]	; (21efc <lte_lc_system_mode_get+0x260>)
   21d12:	f042 0201 	orr.w	r2, r2, #1
   21d16:	f00c fb78 	bl	2e40a <log_1>
		return err;
   21d1a:	e7e9      	b.n	21cf0 <lte_lc_system_mode_get+0x54>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   21d1c:	4601      	mov	r1, r0
   21d1e:	2305      	movs	r3, #5
   21d20:	aa04      	add	r2, sp, #16
   21d22:	a80a      	add	r0, sp, #40	; 0x28
   21d24:	f7ff fb08 	bl	21338 <at_parser_max_params_from_str>
	if (err) {
   21d28:	4604      	mov	r4, r0
   21d2a:	b158      	cbz	r0, 21d44 <lte_lc_system_mode_get+0xa8>
   21d2c:	4a70      	ldr	r2, [pc, #448]	; (21ef0 <lte_lc_system_mode_get+0x254>)
   21d2e:	4b71      	ldr	r3, [pc, #452]	; (21ef4 <lte_lc_system_mode_get+0x258>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   21d30:	4601      	mov	r1, r0
   21d32:	1ad2      	subs	r2, r2, r3
   21d34:	08d2      	lsrs	r2, r2, #3
   21d36:	0192      	lsls	r2, r2, #6
   21d38:	4871      	ldr	r0, [pc, #452]	; (21f00 <lte_lc_system_mode_get+0x264>)
   21d3a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   21d3e:	f00c fb64 	bl	2e40a <log_1>
			goto clean_exit;
   21d42:	e013      	b.n	21d6c <lte_lc_system_mode_get+0xd0>
	err = at_params_string_get(&resp_list,
   21d44:	4601      	mov	r1, r0
   21d46:	ab02      	add	r3, sp, #8
   21d48:	aa06      	add	r2, sp, #24
   21d4a:	a804      	add	r0, sp, #16
   21d4c:	f011 fea0 	bl	33a90 <at_params_string_get>
	if (err) {
   21d50:	4607      	mov	r7, r0
   21d52:	b178      	cbz	r0, 21d74 <lte_lc_system_mode_get+0xd8>
   21d54:	4b67      	ldr	r3, [pc, #412]	; (21ef4 <lte_lc_system_mode_get+0x258>)
   21d56:	4a66      	ldr	r2, [pc, #408]	; (21ef0 <lte_lc_system_mode_get+0x254>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   21d58:	4601      	mov	r1, r0
   21d5a:	1ad2      	subs	r2, r2, r3
   21d5c:	08d2      	lsrs	r2, r2, #3
   21d5e:	0192      	lsls	r2, r2, #6
   21d60:	4868      	ldr	r0, [pc, #416]	; (21f04 <lte_lc_system_mode_get+0x268>)
   21d62:	f042 0201 	orr.w	r2, r2, #1
   21d66:	f00c fb50 	bl	2e40a <log_1>
		goto clean_exit;
   21d6a:	463c      	mov	r4, r7
	at_params_list_free(&resp_list);
   21d6c:	a804      	add	r0, sp, #16
   21d6e:	f011 fd94 	bl	3389a <at_params_list_free>
	return err;
   21d72:	e7bd      	b.n	21cf0 <lte_lc_system_mode_get+0x54>
	if (!response_is_valid(response_prefix, response_prefix_len,
   21d74:	4a64      	ldr	r2, [pc, #400]	; (21f08 <lte_lc_system_mode_get+0x26c>)
   21d76:	9902      	ldr	r1, [sp, #8]
   21d78:	a806      	add	r0, sp, #24
   21d7a:	f000 fa31 	bl	221e0 <response_is_valid>
   21d7e:	b960      	cbnz	r0, 21d9a <lte_lc_system_mode_get+0xfe>
   21d80:	4b5c      	ldr	r3, [pc, #368]	; (21ef4 <lte_lc_system_mode_get+0x258>)
   21d82:	495b      	ldr	r1, [pc, #364]	; (21ef0 <lte_lc_system_mode_get+0x254>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   21d84:	4861      	ldr	r0, [pc, #388]	; (21f0c <lte_lc_system_mode_get+0x270>)
   21d86:	1ac9      	subs	r1, r1, r3
   21d88:	08c9      	lsrs	r1, r1, #3
   21d8a:	0189      	lsls	r1, r1, #6
   21d8c:	f041 0101 	orr.w	r1, r1, #1
   21d90:	f00c fb2e 	bl	2e3f0 <log_0>
		err = -EIO;
   21d94:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   21d98:	e7e8      	b.n	21d6c <lte_lc_system_mode_get+0xd0>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   21d9a:	f04f 0801 	mov.w	r8, #1
		mode_bitmask = param ? mode_bitmask | BIT(i) : mode_bitmask;
   21d9e:	46c1      	mov	r9, r8
		err = at_params_int_get(&resp_list, i, &param);
   21da0:	4641      	mov	r1, r8
   21da2:	aa03      	add	r2, sp, #12
   21da4:	a804      	add	r0, sp, #16
   21da6:	f011 fe3c 	bl	33a22 <at_params_int_get>
		if (err) {
   21daa:	4604      	mov	r4, r0
   21dac:	b148      	cbz	r0, 21dc2 <lte_lc_system_mode_get+0x126>
   21dae:	4a50      	ldr	r2, [pc, #320]	; (21ef0 <lte_lc_system_mode_get+0x254>)
   21db0:	4b50      	ldr	r3, [pc, #320]	; (21ef4 <lte_lc_system_mode_get+0x258>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   21db2:	4601      	mov	r1, r0
   21db4:	1ad2      	subs	r2, r2, r3
   21db6:	08d2      	lsrs	r2, r2, #3
   21db8:	0192      	lsls	r2, r2, #6
   21dba:	4855      	ldr	r0, [pc, #340]	; (21f10 <lte_lc_system_mode_get+0x274>)
   21dbc:	f042 0201 	orr.w	r2, r2, #1
   21dc0:	e7bd      	b.n	21d3e <lte_lc_system_mode_get+0xa2>
		mode_bitmask = param ? mode_bitmask | BIT(i) : mode_bitmask;
   21dc2:	9b03      	ldr	r3, [sp, #12]
   21dc4:	b113      	cbz	r3, 21dcc <lte_lc_system_mode_get+0x130>
   21dc6:	fa09 f308 	lsl.w	r3, r9, r8
   21dca:	431f      	orrs	r7, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   21dcc:	f108 0801 	add.w	r8, r8, #1
   21dd0:	f1b8 0f04 	cmp.w	r8, #4
   21dd4:	d1e4      	bne.n	21da0 <lte_lc_system_mode_get+0x104>
	if (preference != NULL) {
   21dd6:	b1ee      	cbz	r6, 21e14 <lte_lc_system_mode_get+0x178>
		err = at_params_int_get(&resp_list, AT_XSYSTEMMODE_READ_PREFERENCE_INDEX,
   21dd8:	4641      	mov	r1, r8
   21dda:	aa03      	add	r2, sp, #12
   21ddc:	a804      	add	r0, sp, #16
   21dde:	f011 fe20 	bl	33a22 <at_params_int_get>
		if (err) {
   21de2:	4680      	mov	r8, r0
   21de4:	b160      	cbz	r0, 21e00 <lte_lc_system_mode_get+0x164>
   21de6:	4b43      	ldr	r3, [pc, #268]	; (21ef4 <lte_lc_system_mode_get+0x258>)
   21de8:	4a41      	ldr	r2, [pc, #260]	; (21ef0 <lte_lc_system_mode_get+0x254>)
			LOG_ERR("Could not parse LTE preference parameter, err: %d", err);
   21dea:	4601      	mov	r1, r0
   21dec:	1ad2      	subs	r2, r2, r3
   21dee:	08d2      	lsrs	r2, r2, #3
   21df0:	0192      	lsls	r2, r2, #6
   21df2:	4848      	ldr	r0, [pc, #288]	; (21f14 <lte_lc_system_mode_get+0x278>)
   21df4:	f042 0201 	orr.w	r2, r2, #1
   21df8:	f00c fb07 	bl	2e40a <log_1>
			goto clean_exit;
   21dfc:	4644      	mov	r4, r8
   21dfe:	e7b5      	b.n	21d6c <lte_lc_system_mode_get+0xd0>
		switch (temp_pref) {
   21e00:	9903      	ldr	r1, [sp, #12]
   21e02:	2904      	cmp	r1, #4
   21e04:	d81a      	bhi.n	21e3c <lte_lc_system_mode_get+0x1a0>
   21e06:	e8df f001 	tbb	[pc, r1]
   21e0a:	1103      	.short	0x1103
   21e0c:	1513      	.short	0x1513
   21e0e:	17          	.byte	0x17
   21e0f:	00          	.byte	0x00
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   21e10:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   21e12:	7033      	strb	r3, [r6, #0]
	switch (mode_bitmask) {
   21e14:	2f0e      	cmp	r7, #14
   21e16:	d85b      	bhi.n	21ed0 <lte_lc_system_mode_get+0x234>
   21e18:	e8df f007 	tbb	[pc, r7]
   21e1c:	5a4c5a1d 	.word	0x5a4c5a1d
   21e20:	5a565a4e 	.word	0x5a565a4e
   21e24:	5a525a50 	.word	0x5a525a50
   21e28:	5a54      	.short	0x5a54
   21e2a:	58          	.byte	0x58
   21e2b:	00          	.byte	0x00
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   21e2c:	2301      	movs	r3, #1
   21e2e:	e7f0      	b.n	21e12 <lte_lc_system_mode_get+0x176>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   21e30:	2302      	movs	r3, #2
   21e32:	e7ee      	b.n	21e12 <lte_lc_system_mode_get+0x176>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   21e34:	2303      	movs	r3, #3
   21e36:	e7ec      	b.n	21e12 <lte_lc_system_mode_get+0x176>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   21e38:	2304      	movs	r3, #4
   21e3a:	e7ea      	b.n	21e12 <lte_lc_system_mode_get+0x176>
   21e3c:	4a2c      	ldr	r2, [pc, #176]	; (21ef0 <lte_lc_system_mode_get+0x254>)
   21e3e:	4b2d      	ldr	r3, [pc, #180]	; (21ef4 <lte_lc_system_mode_get+0x258>)
			LOG_ERR("Unsupported LTE preference: %d", temp_pref);
   21e40:	4835      	ldr	r0, [pc, #212]	; (21f18 <lte_lc_system_mode_get+0x27c>)
   21e42:	1ad2      	subs	r2, r2, r3
   21e44:	08d2      	lsrs	r2, r2, #3
   21e46:	0192      	lsls	r2, r2, #6
   21e48:	f042 0201 	orr.w	r2, r2, #1
   21e4c:	f00c fadd 	bl	2e40a <log_1>
		err = -EFAULT;
   21e50:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   21e54:	e78a      	b.n	21d6c <lte_lc_system_mode_get+0xd0>
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   21e56:	2300      	movs	r3, #0
	if (sys_mode_current != *mode) {
   21e58:	4f30      	ldr	r7, [pc, #192]	; (21f1c <lte_lc_system_mode_get+0x280>)
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   21e5a:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   21e5c:	782b      	ldrb	r3, [r5, #0]
   21e5e:	783a      	ldrb	r2, [r7, #0]
   21e60:	4293      	cmp	r3, r2
   21e62:	d00e      	beq.n	21e82 <lte_lc_system_mode_get+0x1e6>
   21e64:	4823      	ldr	r0, [pc, #140]	; (21ef4 <lte_lc_system_mode_get+0x258>)
   21e66:	4922      	ldr	r1, [pc, #136]	; (21ef0 <lte_lc_system_mode_get+0x254>)
   21e68:	1a09      	subs	r1, r1, r0
   21e6a:	08c9      	lsrs	r1, r1, #3
		LOG_DBG("Current system mode updated from %d to %d",
   21e6c:	0189      	lsls	r1, r1, #6
   21e6e:	f041 0104 	orr.w	r1, r1, #4
   21e72:	f8ad 1000 	strh.w	r1, [sp]
   21e76:	482a      	ldr	r0, [pc, #168]	; (21f20 <lte_lc_system_mode_get+0x284>)
   21e78:	492a      	ldr	r1, [pc, #168]	; (21f24 <lte_lc_system_mode_get+0x288>)
   21e7a:	f00c faf3 	bl	2e464 <log_3>
		sys_mode_current = *mode;
   21e7e:	782b      	ldrb	r3, [r5, #0]
   21e80:	703b      	strb	r3, [r7, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   21e82:	2e00      	cmp	r6, #0
   21e84:	f43f af72 	beq.w	21d6c <lte_lc_system_mode_get+0xd0>
   21e88:	4d27      	ldr	r5, [pc, #156]	; (21f28 <lte_lc_system_mode_get+0x28c>)
   21e8a:	7833      	ldrb	r3, [r6, #0]
   21e8c:	782a      	ldrb	r2, [r5, #0]
   21e8e:	4293      	cmp	r3, r2
   21e90:	f43f af6c 	beq.w	21d6c <lte_lc_system_mode_get+0xd0>
   21e94:	4817      	ldr	r0, [pc, #92]	; (21ef4 <lte_lc_system_mode_get+0x258>)
   21e96:	4916      	ldr	r1, [pc, #88]	; (21ef0 <lte_lc_system_mode_get+0x254>)
   21e98:	1a09      	subs	r1, r1, r0
   21e9a:	08c9      	lsrs	r1, r1, #3
		LOG_DBG("Current system mode preference updated from %d to %d",
   21e9c:	0189      	lsls	r1, r1, #6
   21e9e:	f041 0104 	orr.w	r1, r1, #4
   21ea2:	f8ad 1000 	strh.w	r1, [sp]
   21ea6:	4821      	ldr	r0, [pc, #132]	; (21f2c <lte_lc_system_mode_get+0x290>)
   21ea8:	491e      	ldr	r1, [pc, #120]	; (21f24 <lte_lc_system_mode_get+0x288>)
   21eaa:	f00c fadb 	bl	2e464 <log_3>
		mode_pref_current = *preference;
   21eae:	7833      	ldrb	r3, [r6, #0]
   21eb0:	702b      	strb	r3, [r5, #0]
   21eb2:	e75b      	b.n	21d6c <lte_lc_system_mode_get+0xd0>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   21eb4:	2301      	movs	r3, #1
   21eb6:	e7cf      	b.n	21e58 <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   21eb8:	2302      	movs	r3, #2
   21eba:	e7cd      	b.n	21e58 <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   21ebc:	2303      	movs	r3, #3
   21ebe:	e7cb      	b.n	21e58 <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   21ec0:	2304      	movs	r3, #4
   21ec2:	e7c9      	b.n	21e58 <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   21ec4:	2305      	movs	r3, #5
   21ec6:	e7c7      	b.n	21e58 <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   21ec8:	2306      	movs	r3, #6
   21eca:	e7c5      	b.n	21e58 <lte_lc_system_mode_get+0x1bc>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   21ecc:	2307      	movs	r3, #7
   21ece:	e7c3      	b.n	21e58 <lte_lc_system_mode_get+0x1bc>
   21ed0:	4b08      	ldr	r3, [pc, #32]	; (21ef4 <lte_lc_system_mode_get+0x258>)
   21ed2:	4907      	ldr	r1, [pc, #28]	; (21ef0 <lte_lc_system_mode_get+0x254>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   21ed4:	4816      	ldr	r0, [pc, #88]	; (21f30 <lte_lc_system_mode_get+0x294>)
   21ed6:	1ac9      	subs	r1, r1, r3
   21ed8:	08c9      	lsrs	r1, r1, #3
   21eda:	0189      	lsls	r1, r1, #6
   21edc:	f041 0101 	orr.w	r1, r1, #1
   21ee0:	f00c fa86 	bl	2e3f0 <log_0>
   21ee4:	e7b4      	b.n	21e50 <lte_lc_system_mode_get+0x1b4>
		return -EINVAL;
   21ee6:	f06f 0415 	mvn.w	r4, #21
   21eea:	e701      	b.n	21cf0 <lte_lc_system_mode_get+0x54>
   21eec:	0003bca1 	.word	0x0003bca1
   21ef0:	00036578 	.word	0x00036578
   21ef4:	000364b0 	.word	0x000364b0
   21ef8:	0003bcb1 	.word	0x0003bcb1
   21efc:	0003bccb 	.word	0x0003bccb
   21f00:	0003bcf0 	.word	0x0003bcf0
   21f04:	0003bd17 	.word	0x0003bd17
   21f08:	0003bd40 	.word	0x0003bd40
   21f0c:	0003bd4d 	.word	0x0003bd4d
   21f10:	0003bd6a 	.word	0x0003bd6a
   21f14:	0003bd92 	.word	0x0003bd92
   21f18:	0003bdc4 	.word	0x0003bdc4
   21f1c:	2001d4f9 	.word	0x2001d4f9
   21f20:	0003be0f 	.word	0x0003be0f
   21f24:	0003c105 	.word	0x0003c105
   21f28:	2001d4eb 	.word	0x2001d4eb
   21f2c:	0003be3d 	.word	0x0003be3d
   21f30:	0003bde3 	.word	0x0003bde3

00021f34 <init_and_config>:
{
   21f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (is_initialized) {
   21f38:	4e36      	ldr	r6, [pc, #216]	; (22014 <init_and_config+0xe0>)
   21f3a:	7831      	ldrb	r1, [r6, #0]
   21f3c:	2900      	cmp	r1, #0
   21f3e:	d163      	bne.n	22008 <init_and_config+0xd4>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   21f40:	4f35      	ldr	r7, [pc, #212]	; (22018 <init_and_config+0xe4>)
   21f42:	f8df 8110 	ldr.w	r8, [pc, #272]	; 22054 <init_and_config+0x120>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21f46:	2201      	movs	r2, #1
   21f48:	4834      	ldr	r0, [pc, #208]	; (2201c <init_and_config+0xe8>)
   21f4a:	f013 f9ab 	bl	352a4 <z_impl_k_sem_init>
   21f4e:	4639      	mov	r1, r7
   21f50:	4640      	mov	r0, r8
   21f52:	f7ff fea3 	bl	21c9c <lte_lc_system_mode_get>
	if (err) {
   21f56:	4d32      	ldr	r5, [pc, #200]	; (22020 <init_and_config+0xec>)
   21f58:	4b32      	ldr	r3, [pc, #200]	; (22024 <init_and_config+0xf0>)
   21f5a:	4604      	mov	r4, r0
   21f5c:	1aed      	subs	r5, r5, r3
   21f5e:	08ed      	lsrs	r5, r5, #3
   21f60:	01ad      	lsls	r5, r5, #6
   21f62:	b148      	cbz	r0, 21f78 <init_and_config+0x44>
		LOG_ERR("Could not get current system mode, error: %d", err);
   21f64:	4601      	mov	r1, r0
   21f66:	4830      	ldr	r0, [pc, #192]	; (22028 <init_and_config+0xf4>)
   21f68:	f045 0201 	orr.w	r2, r5, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   21f6c:	f00c fa4d 	bl	2e40a <log_1>
}
   21f70:	4620      	mov	r0, r4
   21f72:	b003      	add	sp, #12
   21f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_notif_register_handler(NULL, at_handler);
   21f78:	492c      	ldr	r1, [pc, #176]	; (2202c <init_and_config+0xf8>)
   21f7a:	f7fe fdcf 	bl	20b1c <at_notif_register_handler>
	if (err) {
   21f7e:	4604      	mov	r4, r0
   21f80:	b120      	cbz	r0, 21f8c <init_and_config+0x58>
		LOG_ERR("Can't register AT handler, error: %d", err);
   21f82:	4601      	mov	r1, r0
   21f84:	f045 0201 	orr.w	r2, r5, #1
   21f88:	4829      	ldr	r0, [pc, #164]	; (22030 <init_and_config+0xfc>)
   21f8a:	e7ef      	b.n	21f6c <init_and_config+0x38>
	if ((sys_mode_current != sys_mode_target) ||
   21f8c:	4c29      	ldr	r4, [pc, #164]	; (22034 <init_and_config+0x100>)
   21f8e:	f898 2000 	ldrb.w	r2, [r8]
   21f92:	7820      	ldrb	r0, [r4, #0]
   21f94:	4928      	ldr	r1, [pc, #160]	; (22038 <init_and_config+0x104>)
   21f96:	4282      	cmp	r2, r0
   21f98:	46a0      	mov	r8, r4
   21f9a:	4689      	mov	r9, r1
   21f9c:	780b      	ldrb	r3, [r1, #0]
   21f9e:	d102      	bne.n	21fa6 <init_and_config+0x72>
	    (mode_pref_current != mode_pref_target)) {
   21fa0:	7839      	ldrb	r1, [r7, #0]
	if ((sys_mode_current != sys_mode_target) ||
   21fa2:	428b      	cmp	r3, r1
   21fa4:	d026      	beq.n	21ff4 <init_and_config+0xc0>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   21fa6:	4619      	mov	r1, r3
   21fa8:	f7ff fe04 	bl	21bb4 <lte_lc_system_mode_set>
		if (err) {
   21fac:	4604      	mov	r4, r0
   21fae:	b120      	cbz	r0, 21fba <init_and_config+0x86>
			LOG_ERR("Could not set system mode, error: %d", err);
   21fb0:	4601      	mov	r1, r0
   21fb2:	f045 0201 	orr.w	r2, r5, #1
   21fb6:	4821      	ldr	r0, [pc, #132]	; (2203c <init_and_config+0x108>)
   21fb8:	e7d8      	b.n	21f6c <init_and_config+0x38>
		LOG_DBG("System mode (%d) and preference (%d) configured",
   21fba:	f045 0304 	orr.w	r3, r5, #4
   21fbe:	f8ad 3000 	strh.w	r3, [sp]
   21fc2:	f899 3000 	ldrb.w	r3, [r9]
   21fc6:	f898 2000 	ldrb.w	r2, [r8]
   21fca:	491d      	ldr	r1, [pc, #116]	; (22040 <init_and_config+0x10c>)
   21fcc:	481d      	ldr	r0, [pc, #116]	; (22044 <init_and_config+0x110>)
		LOG_DBG("System mode (%d) and preference (%d) are already configured",
   21fce:	f00c fa49 	bl	2e464 <log_3>
	if (at_cmd_write(lock_bands, NULL, 0, NULL) != 0) {
   21fd2:	2300      	movs	r3, #0
   21fd4:	481c      	ldr	r0, [pc, #112]	; (22048 <init_and_config+0x114>)
   21fd6:	461a      	mov	r2, r3
   21fd8:	4619      	mov	r1, r3
   21fda:	f7fe fc73 	bl	208c4 <at_cmd_write>
   21fde:	b9b0      	cbnz	r0, 2200e <init_and_config+0xda>
	err = enable_notifications();
   21fe0:	f7ff fae8 	bl	215b4 <enable_notifications>
	if (err) {
   21fe4:	4604      	mov	r4, r0
   21fe6:	b160      	cbz	r0, 22002 <init_and_config+0xce>
		LOG_ERR("Failed to enable notifications");
   21fe8:	4818      	ldr	r0, [pc, #96]	; (2204c <init_and_config+0x118>)
   21fea:	f045 0101 	orr.w	r1, r5, #1
   21fee:	f00c f9ff 	bl	2e3f0 <log_0>
		return err;
   21ff2:	e7bd      	b.n	21f70 <init_and_config+0x3c>
		LOG_DBG("System mode (%d) and preference (%d) are already configured",
   21ff4:	f045 0104 	orr.w	r1, r5, #4
   21ff8:	f8ad 1000 	strh.w	r1, [sp]
   21ffc:	4814      	ldr	r0, [pc, #80]	; (22050 <init_and_config+0x11c>)
   21ffe:	4910      	ldr	r1, [pc, #64]	; (22040 <init_and_config+0x10c>)
   22000:	e7e5      	b.n	21fce <init_and_config+0x9a>
	is_initialized = true;
   22002:	2301      	movs	r3, #1
   22004:	7033      	strb	r3, [r6, #0]
	return 0;
   22006:	e7b3      	b.n	21f70 <init_and_config+0x3c>
		return -EALREADY;
   22008:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2200c:	e7b0      	b.n	21f70 <init_and_config+0x3c>
		return -EIO;
   2200e:	f06f 0404 	mvn.w	r4, #4
   22012:	e7ad      	b.n	21f70 <init_and_config+0x3c>
   22014:	2001d4ea 	.word	0x2001d4ea
   22018:	2001d4eb 	.word	0x2001d4eb
   2201c:	20016790 	.word	0x20016790
   22020:	00036578 	.word	0x00036578
   22024:	000364b0 	.word	0x000364b0
   22028:	0003be76 	.word	0x0003be76
   2202c:	0002165d 	.word	0x0002165d
   22030:	0003bea3 	.word	0x0003bea3
   22034:	20014c28 	.word	0x20014c28
   22038:	2001d4ec 	.word	0x2001d4ec
   2203c:	0003bec8 	.word	0x0003bec8
   22040:	0003c0de 	.word	0x0003c0de
   22044:	0003beed 	.word	0x0003beed
   22048:	0003c13e 	.word	0x0003c13e
   2204c:	0003bf61 	.word	0x0003bf61
   22050:	0003bf21 	.word	0x0003bf21
   22054:	2001d4f9 	.word	0x2001d4f9

00022058 <lte_lc_func_mode_set>:

	return err;
}

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   22058:	b530      	push	{r4, r5, lr}
	char buf[12];
	int err;

	switch (mode) {
   2205a:	2804      	cmp	r0, #4
{
   2205c:	4605      	mov	r5, r0
   2205e:	b085      	sub	sp, #20
	switch (mode) {
   22060:	d820      	bhi.n	220a4 <lte_lc_func_mode_set+0x4c>
   22062:	2804      	cmp	r0, #4
   22064:	d823      	bhi.n	220ae <lte_lc_func_mode_set+0x56>
   22066:	e8df f000 	tbb	[pc, r0]
   2206a:	0b30      	.short	0x0b30
   2206c:	2230      	.short	0x2230
   2206e:	30          	.byte	0x30
   2206f:	00          	.byte	0x00
   22070:	2401      	movs	r4, #1
   22072:	4b24      	ldr	r3, [pc, #144]	; (22104 <lte_lc_func_mode_set+0xac>)
   22074:	fa04 f202 	lsl.w	r2, r4, r2
   22078:	421a      	tst	r2, r3
   2207a:	d126      	bne.n	220ca <lte_lc_func_mode_set+0x72>
   2207c:	0793      	lsls	r3, r2, #30
   2207e:	d516      	bpl.n	220ae <lte_lc_func_mode_set+0x56>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   22080:	f7ff fa98 	bl	215b4 <enable_notifications>
		if (err) {
   22084:	4604      	mov	r4, r0
   22086:	b300      	cbz	r0, 220ca <lte_lc_func_mode_set+0x72>
   22088:	4a1f      	ldr	r2, [pc, #124]	; (22108 <lte_lc_func_mode_set+0xb0>)
   2208a:	4b20      	ldr	r3, [pc, #128]	; (2210c <lte_lc_func_mode_set+0xb4>)
			LOG_ERR("Failed to enable notifications, error: %d", err);
   2208c:	4601      	mov	r1, r0
   2208e:	1ad2      	subs	r2, r2, r3
   22090:	08d2      	lsrs	r2, r2, #3
   22092:	0192      	lsls	r2, r2, #6
   22094:	481e      	ldr	r0, [pc, #120]	; (22110 <lte_lc_func_mode_set+0xb8>)
   22096:	f042 0201 	orr.w	r2, r2, #1
   2209a:	f00c f9b6 	bl	2e40a <log_1>
		LOG_ERR("Failed to create functional mode command");
		return -EFAULT;
	}

	return at_cmd_write(buf, NULL, 0, NULL);
}
   2209e:	4620      	mov	r0, r4
   220a0:	b005      	add	sp, #20
   220a2:	bd30      	pop	{r4, r5, pc}
	switch (mode) {
   220a4:	f1a0 0214 	sub.w	r2, r0, #20
   220a8:	b2d2      	uxtb	r2, r2
   220aa:	2a18      	cmp	r2, #24
   220ac:	d9e0      	bls.n	22070 <lte_lc_func_mode_set+0x18>
   220ae:	4b17      	ldr	r3, [pc, #92]	; (2210c <lte_lc_func_mode_set+0xb4>)
   220b0:	4a15      	ldr	r2, [pc, #84]	; (22108 <lte_lc_func_mode_set+0xb0>)
		LOG_ERR("Invalid functional mode: %d", mode);
   220b2:	4629      	mov	r1, r5
   220b4:	1ad2      	subs	r2, r2, r3
   220b6:	08d2      	lsrs	r2, r2, #3
   220b8:	0192      	lsls	r2, r2, #6
   220ba:	4816      	ldr	r0, [pc, #88]	; (22114 <lte_lc_func_mode_set+0xbc>)
   220bc:	f042 0201 	orr.w	r2, r2, #1
   220c0:	f00c f9a3 	bl	2e40a <log_1>
		return -EINVAL;
   220c4:	f06f 0415 	mvn.w	r4, #21
   220c8:	e7e9      	b.n	2209e <lte_lc_func_mode_set+0x46>
	err = snprintk(buf, sizeof(buf), "AT+CFUN=%d", mode);
   220ca:	462b      	mov	r3, r5
   220cc:	210c      	movs	r1, #12
   220ce:	4a12      	ldr	r2, [pc, #72]	; (22118 <lte_lc_func_mode_set+0xc0>)
   220d0:	a801      	add	r0, sp, #4
   220d2:	f00b fe66 	bl	2dda2 <snprintk>
	if ((err < 0) || (err >= sizeof(buf))) {
   220d6:	280b      	cmp	r0, #11
   220d8:	d90c      	bls.n	220f4 <lte_lc_func_mode_set+0x9c>
   220da:	4b0c      	ldr	r3, [pc, #48]	; (2210c <lte_lc_func_mode_set+0xb4>)
   220dc:	490a      	ldr	r1, [pc, #40]	; (22108 <lte_lc_func_mode_set+0xb0>)
		LOG_ERR("Failed to create functional mode command");
   220de:	480f      	ldr	r0, [pc, #60]	; (2211c <lte_lc_func_mode_set+0xc4>)
   220e0:	1ac9      	subs	r1, r1, r3
   220e2:	08c9      	lsrs	r1, r1, #3
   220e4:	0189      	lsls	r1, r1, #6
   220e6:	f041 0101 	orr.w	r1, r1, #1
   220ea:	f00c f981 	bl	2e3f0 <log_0>
		return -EFAULT;
   220ee:	f06f 040d 	mvn.w	r4, #13
   220f2:	e7d4      	b.n	2209e <lte_lc_func_mode_set+0x46>
	return at_cmd_write(buf, NULL, 0, NULL);
   220f4:	2300      	movs	r3, #0
   220f6:	a801      	add	r0, sp, #4
   220f8:	461a      	mov	r2, r3
   220fa:	4619      	mov	r1, r3
   220fc:	f7fe fbe2 	bl	208c4 <at_cmd_write>
   22100:	4604      	mov	r4, r0
   22102:	e7cc      	b.n	2209e <lte_lc_func_mode_set+0x46>
   22104:	01300c01 	.word	0x01300c01
   22108:	00036578 	.word	0x00036578
   2210c:	000364b0 	.word	0x000364b0
   22110:	0003bf80 	.word	0x0003bf80
   22114:	0003bfaa 	.word	0x0003bfaa
   22118:	0003bfc6 	.word	0x0003bfc6
   2211c:	0003bfd1 	.word	0x0003bfd1

00022120 <connect_lte>:
{
   22120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   22124:	4b25      	ldr	r3, [pc, #148]	; (221bc <connect_lte+0x9c>)
   22126:	4c26      	ldr	r4, [pc, #152]	; (221c0 <connect_lte+0xa0>)
   22128:	4926      	ldr	r1, [pc, #152]	; (221c4 <connect_lte+0xa4>)
   2212a:	781b      	ldrb	r3, [r3, #0]
   2212c:	1a64      	subs	r4, r4, r1
{
   2212e:	4605      	mov	r5, r0
   22130:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   22132:	b94b      	cbnz	r3, 22148 <connect_lte+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   22134:	01a1      	lsls	r1, r4, #6
   22136:	4824      	ldr	r0, [pc, #144]	; (221c8 <connect_lte+0xa8>)
   22138:	f041 0101 	orr.w	r1, r1, #1
   2213c:	f00c f958 	bl	2e3f0 <log_0>
		return -EPERM;
   22140:	f04f 30ff 	mov.w	r0, #4294967295
}
   22144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22148:	2201      	movs	r2, #1
   2214a:	2100      	movs	r1, #0
   2214c:	481f      	ldr	r0, [pc, #124]	; (221cc <connect_lte+0xac>)
   2214e:	f013 f8a9 	bl	352a4 <z_impl_k_sem_init>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   22152:	4f1f      	ldr	r7, [pc, #124]	; (221d0 <connect_lte+0xb0>)
   22154:	4e1f      	ldr	r6, [pc, #124]	; (221d4 <connect_lte+0xb4>)
	return z_impl_k_sem_take(sem, timeout);
   22156:	f8df 8074 	ldr.w	r8, [pc, #116]	; 221cc <connect_lte+0xac>
   2215a:	7839      	ldrb	r1, [r7, #0]
   2215c:	7830      	ldrb	r0, [r6, #0]
   2215e:	f7ff fd29 	bl	21bb4 <lte_lc_system_mode_set>
			if (err) {
   22162:	2800      	cmp	r0, #0
   22164:	d1ee      	bne.n	22144 <connect_lte+0x24>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   22166:	2001      	movs	r0, #1
   22168:	f7ff ff76 	bl	22058 <lte_lc_func_mode_set>
		if (err || !blocking) {
   2216c:	2800      	cmp	r0, #0
   2216e:	d1e9      	bne.n	22144 <connect_lte+0x24>
   22170:	2d00      	cmp	r5, #0
   22172:	d0e7      	beq.n	22144 <connect_lte+0x24>
   22174:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   22178:	2300      	movs	r3, #0
   2217a:	4640      	mov	r0, r8
   2217c:	f007 fc34 	bl	299e8 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   22180:	f110 0f0b 	cmn.w	r0, #11
   22184:	d1de      	bne.n	22144 <connect_lte+0x24>
			LOG_INF("Network connection attempt timed out");
   22186:	ea4f 1984 	mov.w	r9, r4, lsl #6
   2218a:	f049 0903 	orr.w	r9, r9, #3
   2218e:	4649      	mov	r1, r9
   22190:	4811      	ldr	r0, [pc, #68]	; (221d8 <connect_lte+0xb8>)
   22192:	f00c f92d 	bl	2e3f0 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   22196:	7833      	ldrb	r3, [r6, #0]
   22198:	2b01      	cmp	r3, #1
   2219a:	d10b      	bne.n	221b4 <connect_lte+0x94>
				sys_mode_target = sys_mode_fallback;
   2219c:	2302      	movs	r3, #2
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   2219e:	2004      	movs	r0, #4
				sys_mode_target = sys_mode_fallback;
   221a0:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   221a2:	f7ff ff59 	bl	22058 <lte_lc_func_mode_set>
				if (err) {
   221a6:	2800      	cmp	r0, #0
   221a8:	d1cc      	bne.n	22144 <connect_lte+0x24>
				LOG_INF("Using fallback network mode");
   221aa:	4649      	mov	r1, r9
   221ac:	480b      	ldr	r0, [pc, #44]	; (221dc <connect_lte+0xbc>)
   221ae:	f00c f91f 	bl	2e3f0 <log_0>
	} while (retry);
   221b2:	e7d2      	b.n	2215a <connect_lte+0x3a>
				err = -ETIMEDOUT;
   221b4:	f06f 0073 	mvn.w	r0, #115	; 0x73
   221b8:	e7c4      	b.n	22144 <connect_lte+0x24>
   221ba:	bf00      	nop
   221bc:	2001d4ea 	.word	0x2001d4ea
   221c0:	00036578 	.word	0x00036578
   221c4:	000364b0 	.word	0x000364b0
   221c8:	0003bffa 	.word	0x0003bffa
   221cc:	20016790 	.word	0x20016790
   221d0:	2001d4eb 	.word	0x2001d4eb
   221d4:	20014c28 	.word	0x20014c28
   221d8:	0003c025 	.word	0x0003c025
   221dc:	0003c04a 	.word	0x0003c04a

000221e0 <response_is_valid>:
{
   221e0:	b570      	push	{r4, r5, r6, lr}
   221e2:	460e      	mov	r6, r1
   221e4:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   221e6:	4605      	mov	r5, r0
   221e8:	b100      	cbz	r0, 221ec <response_is_valid+0xc>
   221ea:	b95a      	cbnz	r2, 22204 <response_is_valid+0x24>
   221ec:	490c      	ldr	r1, [pc, #48]	; (22220 <response_is_valid+0x40>)
   221ee:	4b0d      	ldr	r3, [pc, #52]	; (22224 <response_is_valid+0x44>)
		LOG_ERR("Invalid pointer provided");
   221f0:	480d      	ldr	r0, [pc, #52]	; (22228 <response_is_valid+0x48>)
   221f2:	1ac9      	subs	r1, r1, r3
   221f4:	08c9      	lsrs	r1, r1, #3
   221f6:	0189      	lsls	r1, r1, #6
   221f8:	f041 0101 	orr.w	r1, r1, #1
   221fc:	f00c f8f8 	bl	2e3f0 <log_0>
		return false;
   22200:	2000      	movs	r0, #0
   22202:	e00c      	b.n	2221e <response_is_valid+0x3e>
	if ((response_len < strlen(check)) ||
   22204:	4610      	mov	r0, r2
   22206:	f7ef f97b 	bl	11500 <strlen>
   2220a:	4286      	cmp	r6, r0
   2220c:	d3f8      	bcc.n	22200 <response_is_valid+0x20>
	    (memcmp(response, check, response_len) != 0)) {
   2220e:	4632      	mov	r2, r6
   22210:	4621      	mov	r1, r4
   22212:	4628      	mov	r0, r5
   22214:	f013 f9a9 	bl	3556a <memcmp>
	if ((response_len < strlen(check)) ||
   22218:	fab0 f080 	clz	r0, r0
   2221c:	0940      	lsrs	r0, r0, #5
}
   2221e:	bd70      	pop	{r4, r5, r6, pc}
   22220:	00036580 	.word	0x00036580
   22224:	000364b0 	.word	0x000364b0
   22228:	0003c17b 	.word	0x0003c17b

0002222c <parse_psm>:
	int err;
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
				    AT_CEREG_READ_TAU_INDEX;
	size_t active_time_idx = is_notif ? AT_CEREG_ACTIVE_TIME_INDEX :
					    AT_CEREG_READ_ACTIVE_TIME_INDEX;
	char timer_str[9] = {0};
   2222c:	2300      	movs	r3, #0
{
   2222e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22232:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   22234:	e9cd 3305 	strd	r3, r3, [sp, #20]
   22238:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   2223c:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   2223e:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   22240:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   22242:	9304      	str	r3, [sp, #16]
{
   22244:	4617      	mov	r7, r2
	 */
	static const uint32_t t3412_lookup[8] = {600, 3600, 36000, 2, 30, 60,
					      1152000, 0};

	/* Parse periodic TAU string */
	err = at_params_string_get(at_params,
   22246:	ab04      	add	r3, sp, #16
   22248:	bf14      	ite	ne
   2224a:	2108      	movne	r1, #8
   2224c:	2109      	moveq	r1, #9
   2224e:	aa05      	add	r2, sp, #20
{
   22250:	4680      	mov	r8, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   22252:	bf14      	ite	ne
   22254:	f04f 0907 	movne.w	r9, #7
   22258:	f04f 0908 	moveq.w	r9, #8
	err = at_params_string_get(at_params,
   2225c:	f011 fc18 	bl	33a90 <at_params_string_get>
				   tau_idx,
				   timer_str,
				   &timer_str_len);
	if (err) {
   22260:	4d34      	ldr	r5, [pc, #208]	; (22334 <parse_psm+0x108>)
   22262:	4b35      	ldr	r3, [pc, #212]	; (22338 <parse_psm+0x10c>)
   22264:	4604      	mov	r4, r0
   22266:	1aed      	subs	r5, r5, r3
   22268:	08ed      	lsrs	r5, r5, #3
   2226a:	01ad      	lsls	r5, r5, #6
   2226c:	b148      	cbz	r0, 22282 <parse_psm+0x56>
	err = at_params_string_get(at_params,
				   active_time_idx,
				   timer_str,
				   &timer_str_len);
	if (err) {
		LOG_ERR("Could not get TAU, error: %d", err);
   2226e:	4621      	mov	r1, r4
   22270:	4832      	ldr	r0, [pc, #200]	; (2233c <parse_psm+0x110>)
   22272:	f045 0201 	orr.w	r2, r5, #1
   22276:	f00c f8c8 	bl	2e40a <log_1>

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   2227a:	4620      	mov	r0, r4
   2227c:	b009      	add	sp, #36	; 0x24
   2227e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   22282:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   22284:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   22286:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2228a:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2228c:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2228e:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   22290:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   22294:	f00b fb8a 	bl	2d9ac <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   22298:	2807      	cmp	r0, #7
   2229a:	d907      	bls.n	222ac <parse_psm+0x80>
		LOG_ERR("Unable to parse periodic TAU string");
   2229c:	4828      	ldr	r0, [pc, #160]	; (22340 <parse_psm+0x114>)
   2229e:	f045 0101 	orr.w	r1, r5, #1
		LOG_ERR("Unable to parse active time string");
   222a2:	f00c f8a5 	bl	2e3f0 <log_0>
		return err;
   222a6:	f06f 0415 	mvn.w	r4, #21
   222aa:	e7e6      	b.n	2227a <parse_psm+0x4e>
	timer_unit = t3412_lookup[lut_idx];
   222ac:	4b25      	ldr	r3, [pc, #148]	; (22344 <parse_psm+0x118>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   222ae:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   222b0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   222b4:	4621      	mov	r1, r4
   222b6:	f10d 0017 	add.w	r0, sp, #23
   222ba:	f00b fb77 	bl	2d9ac <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   222be:	b1de      	cbz	r6, 222f8 <parse_psm+0xcc>
   222c0:	4346      	muls	r6, r0
	err = at_params_string_get(at_params,
   222c2:	4649      	mov	r1, r9
   222c4:	4640      	mov	r0, r8
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   222c6:	603e      	str	r6, [r7, #0]
	err = at_params_string_get(at_params,
   222c8:	ab04      	add	r3, sp, #16
   222ca:	aa05      	add	r2, sp, #20
   222cc:	f011 fbe0 	bl	33a90 <at_params_string_get>
	if (err) {
   222d0:	4604      	mov	r4, r0
   222d2:	2800      	cmp	r0, #0
   222d4:	d1cb      	bne.n	2226e <parse_psm+0x42>
	memcpy(unit_str, timer_str, unit_str_len);
   222d6:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   222d8:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   222da:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   222de:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   222e0:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   222e2:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   222e4:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   222e8:	f00b fb60 	bl	2d9ac <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   222ec:	2807      	cmp	r0, #7
   222ee:	d906      	bls.n	222fe <parse_psm+0xd2>
		LOG_ERR("Unable to parse active time string");
   222f0:	4815      	ldr	r0, [pc, #84]	; (22348 <parse_psm+0x11c>)
   222f2:	f045 0101 	orr.w	r1, r5, #1
   222f6:	e7d4      	b.n	222a2 <parse_psm+0x76>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   222f8:	f04f 36ff 	mov.w	r6, #4294967295
   222fc:	e7e1      	b.n	222c2 <parse_psm+0x96>
	timer_unit = t3324_lookup[lut_idx];
   222fe:	4b13      	ldr	r3, [pc, #76]	; (2234c <parse_psm+0x120>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   22300:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   22302:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   22306:	4621      	mov	r1, r4
   22308:	f10d 0017 	add.w	r0, sp, #23
   2230c:	f00b fb4e 	bl	2d9ac <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   22310:	b166      	cbz	r6, 2232c <parse_psm+0x100>
   22312:	fb06 f300 	mul.w	r3, r6, r0
	LOG_DBG("TAU: %d sec, active time: %d sec\n",
   22316:	f045 0504 	orr.w	r5, r5, #4
   2231a:	683a      	ldr	r2, [r7, #0]
   2231c:	490c      	ldr	r1, [pc, #48]	; (22350 <parse_psm+0x124>)
   2231e:	480d      	ldr	r0, [pc, #52]	; (22354 <parse_psm+0x128>)
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   22320:	607b      	str	r3, [r7, #4]
	LOG_DBG("TAU: %d sec, active time: %d sec\n",
   22322:	f8ad 5000 	strh.w	r5, [sp]
   22326:	f00c f89d 	bl	2e464 <log_3>
	return 0;
   2232a:	e7a6      	b.n	2227a <parse_psm+0x4e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2232c:	f04f 33ff 	mov.w	r3, #4294967295
   22330:	e7f1      	b.n	22316 <parse_psm+0xea>
   22332:	bf00      	nop
   22334:	00036580 	.word	0x00036580
   22338:	000364b0 	.word	0x000364b0
   2233c:	0003c305 	.word	0x0003c305
   22340:	0003c322 	.word	0x0003c322
   22344:	000370d8 	.word	0x000370d8
   22348:	0003c346 	.word	0x0003c346
   2234c:	000370b8 	.word	0x000370b8
   22350:	0003c728 	.word	0x0003c728
   22354:	0003c369 	.word	0x0003c369

00022358 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   22358:	2300      	movs	r3, #0
{
   2235a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2235c:	b085      	sub	sp, #20
   2235e:	4607      	mov	r7, r0
   22360:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   22362:	a802      	add	r0, sp, #8
   22364:	2104      	movs	r1, #4
{
   22366:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   22368:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   2236c:	f011 fa82 	bl	33874 <at_params_list_init>
	if (err) {
   22370:	4604      	mov	r4, r0
   22372:	b168      	cbz	r0, 22390 <parse_rrc_mode+0x38>
   22374:	4a24      	ldr	r2, [pc, #144]	; (22408 <parse_rrc_mode+0xb0>)
   22376:	4b25      	ldr	r3, [pc, #148]	; (2240c <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   22378:	4601      	mov	r1, r0
   2237a:	1ad2      	subs	r2, r2, r3
   2237c:	08d2      	lsrs	r2, r2, #3
   2237e:	0192      	lsls	r2, r2, #6
   22380:	4823      	ldr	r0, [pc, #140]	; (22410 <parse_rrc_mode+0xb8>)
   22382:	f042 0201 	orr.w	r2, r2, #1
   22386:	f00c f840 	bl	2e40a <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2238a:	4620      	mov	r0, r4
   2238c:	b005      	add	sp, #20
   2238e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   22390:	4601      	mov	r1, r0
   22392:	aa02      	add	r2, sp, #8
   22394:	4638      	mov	r0, r7
   22396:	f011 fa6a 	bl	3386e <at_parser_params_from_str>
	if (err) {
   2239a:	4604      	mov	r4, r0
   2239c:	b170      	cbz	r0, 223bc <parse_rrc_mode+0x64>
   2239e:	4a1a      	ldr	r2, [pc, #104]	; (22408 <parse_rrc_mode+0xb0>)
   223a0:	4b1a      	ldr	r3, [pc, #104]	; (2240c <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   223a2:	4601      	mov	r1, r0
   223a4:	1ad2      	subs	r2, r2, r3
   223a6:	08d2      	lsrs	r2, r2, #3
   223a8:	0192      	lsls	r2, r2, #6
   223aa:	481a      	ldr	r0, [pc, #104]	; (22414 <parse_rrc_mode+0xbc>)
   223ac:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get signalling mode, error: %d", err);
   223b0:	f00c f82b 	bl	2e40a <log_1>
	at_params_list_free(&resp_list);
   223b4:	a802      	add	r0, sp, #8
   223b6:	f011 fa70 	bl	3389a <at_params_list_free>
	return err;
   223ba:	e7e6      	b.n	2238a <parse_rrc_mode+0x32>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   223bc:	4631      	mov	r1, r6
   223be:	aa01      	add	r2, sp, #4
   223c0:	a802      	add	r0, sp, #8
   223c2:	f011 fb2e 	bl	33a22 <at_params_int_get>
	if (err) {
   223c6:	4604      	mov	r4, r0
   223c8:	b148      	cbz	r0, 223de <parse_rrc_mode+0x86>
   223ca:	4a0f      	ldr	r2, [pc, #60]	; (22408 <parse_rrc_mode+0xb0>)
   223cc:	4b0f      	ldr	r3, [pc, #60]	; (2240c <parse_rrc_mode+0xb4>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   223ce:	4601      	mov	r1, r0
   223d0:	1ad2      	subs	r2, r2, r3
   223d2:	08d2      	lsrs	r2, r2, #3
   223d4:	0192      	lsls	r2, r2, #6
   223d6:	4810      	ldr	r0, [pc, #64]	; (22418 <parse_rrc_mode+0xc0>)
   223d8:	f042 0201 	orr.w	r2, r2, #1
   223dc:	e7e8      	b.n	223b0 <parse_rrc_mode+0x58>
	if (temp_mode == 0) {
   223de:	9901      	ldr	r1, [sp, #4]
   223e0:	b909      	cbnz	r1, 223e6 <parse_rrc_mode+0x8e>
		*mode = LTE_LC_RRC_MODE_IDLE;
   223e2:	7028      	strb	r0, [r5, #0]
   223e4:	e7e6      	b.n	223b4 <parse_rrc_mode+0x5c>
	} else if (temp_mode == 1) {
   223e6:	2901      	cmp	r1, #1
   223e8:	d101      	bne.n	223ee <parse_rrc_mode+0x96>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   223ea:	7029      	strb	r1, [r5, #0]
   223ec:	e7e2      	b.n	223b4 <parse_rrc_mode+0x5c>
   223ee:	4b07      	ldr	r3, [pc, #28]	; (2240c <parse_rrc_mode+0xb4>)
   223f0:	4a05      	ldr	r2, [pc, #20]	; (22408 <parse_rrc_mode+0xb0>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   223f2:	480a      	ldr	r0, [pc, #40]	; (2241c <parse_rrc_mode+0xc4>)
   223f4:	1ad2      	subs	r2, r2, r3
   223f6:	08d2      	lsrs	r2, r2, #3
   223f8:	0192      	lsls	r2, r2, #6
   223fa:	f042 0201 	orr.w	r2, r2, #1
   223fe:	f00c f804 	bl	2e40a <log_1>
		err = -EINVAL;
   22402:	f06f 0415 	mvn.w	r4, #21
   22406:	e7d5      	b.n	223b4 <parse_rrc_mode+0x5c>
   22408:	00036580 	.word	0x00036580
   2240c:	000364b0 	.word	0x000364b0
   22410:	0003c194 	.word	0x0003c194
   22414:	0003c38f 	.word	0x0003c38f
   22418:	0003c3ba 	.word	0x0003c3ba
   2241c:	0003c3e3 	.word	0x0003c3e3

00022420 <parse_cereg>:
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode,
		struct lte_lc_psm_cfg *psm_cfg)
{
   22420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22424:	4699      	mov	r9, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   22426:	2300      	movs	r3, #0
{
   22428:	b08a      	sub	sp, #40	; 0x28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2242a:	9303      	str	r3, [sp, #12]
   2242c:	f8ad 3010 	strh.w	r3, [sp, #16]
   22430:	f88d 3012 	strb.w	r3, [sp, #18]
{
   22434:	4692      	mov	sl, r2
   22436:	e9dd 8712 	ldrd	r8, r7, [sp, #72]	; 0x48
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   2243a:	2207      	movs	r2, #7
   2243c:	2309      	movs	r3, #9
{
   2243e:	4605      	mov	r5, r0
   22440:	460e      	mov	r6, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   22442:	a805      	add	r0, sp, #20
   22444:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   22446:	e9cd 2300 	strd	r2, r3, [sp]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2244a:	f011 fa13 	bl	33874 <at_params_list_init>
	if (err) {
   2244e:	4604      	mov	r4, r0
   22450:	b170      	cbz	r0, 22470 <parse_cereg+0x50>
   22452:	4a94      	ldr	r2, [pc, #592]	; (226a4 <parse_cereg+0x284>)
   22454:	4b94      	ldr	r3, [pc, #592]	; (226a8 <parse_cereg+0x288>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   22456:	4601      	mov	r1, r0
   22458:	1ad2      	subs	r2, r2, r3
   2245a:	08d2      	lsrs	r2, r2, #3
   2245c:	0192      	lsls	r2, r2, #6
   2245e:	4893      	ldr	r0, [pc, #588]	; (226ac <parse_cereg+0x28c>)
   22460:	f042 0201 	orr.w	r2, r2, #1
   22464:	f00b ffd1 	bl	2e40a <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   22468:	4620      	mov	r0, r4
   2246a:	b00a      	add	sp, #40	; 0x28
   2246c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   22470:	4601      	mov	r1, r0
   22472:	aa05      	add	r2, sp, #20
   22474:	4628      	mov	r0, r5
   22476:	f011 f9fa 	bl	3386e <at_parser_params_from_str>
	if (err) {
   2247a:	4604      	mov	r4, r0
   2247c:	b158      	cbz	r0, 22496 <parse_cereg+0x76>
   2247e:	4a89      	ldr	r2, [pc, #548]	; (226a4 <parse_cereg+0x284>)
   22480:	4b89      	ldr	r3, [pc, #548]	; (226a8 <parse_cereg+0x288>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   22482:	4601      	mov	r1, r0
   22484:	1ad2      	subs	r2, r2, r3
   22486:	08d2      	lsrs	r2, r2, #3
   22488:	0192      	lsls	r2, r2, #6
   2248a:	4889      	ldr	r0, [pc, #548]	; (226b0 <parse_cereg+0x290>)
   2248c:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   22490:	f00b ffbb 	bl	2e40a <log_1>
			goto clean_exit;
   22494:	e04a      	b.n	2252c <parse_cereg+0x10c>
	err = at_params_string_get(&resp_list,
   22496:	4601      	mov	r1, r0
   22498:	466b      	mov	r3, sp
   2249a:	aa03      	add	r2, sp, #12
   2249c:	a805      	add	r0, sp, #20
   2249e:	f011 faf7 	bl	33a90 <at_params_string_get>
	if (err) {
   224a2:	4604      	mov	r4, r0
   224a4:	b148      	cbz	r0, 224ba <parse_cereg+0x9a>
   224a6:	4a7f      	ldr	r2, [pc, #508]	; (226a4 <parse_cereg+0x284>)
   224a8:	4b7f      	ldr	r3, [pc, #508]	; (226a8 <parse_cereg+0x288>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   224aa:	4601      	mov	r1, r0
   224ac:	1ad2      	subs	r2, r2, r3
   224ae:	08d2      	lsrs	r2, r2, #3
   224b0:	0192      	lsls	r2, r2, #6
   224b2:	4880      	ldr	r0, [pc, #512]	; (226b4 <parse_cereg+0x294>)
   224b4:	f042 0201 	orr.w	r2, r2, #1
   224b8:	e7ea      	b.n	22490 <parse_cereg+0x70>
	if (!response_is_valid(response_prefix, response_prefix_len,
   224ba:	4a7f      	ldr	r2, [pc, #508]	; (226b8 <parse_cereg+0x298>)
   224bc:	9900      	ldr	r1, [sp, #0]
   224be:	a803      	add	r0, sp, #12
   224c0:	f7ff fe8e 	bl	221e0 <response_is_valid>
   224c4:	b948      	cbnz	r0, 224da <parse_cereg+0xba>
   224c6:	4a77      	ldr	r2, [pc, #476]	; (226a4 <parse_cereg+0x284>)
   224c8:	4b77      	ldr	r3, [pc, #476]	; (226a8 <parse_cereg+0x288>)
		LOG_DBG("Not a valid CEREG response");
   224ca:	497c      	ldr	r1, [pc, #496]	; (226bc <parse_cereg+0x29c>)
   224cc:	1ad2      	subs	r2, r2, r3
   224ce:	08d2      	lsrs	r2, r2, #3
   224d0:	0192      	lsls	r2, r2, #6
   224d2:	487b      	ldr	r0, [pc, #492]	; (226c0 <parse_cereg+0x2a0>)
   224d4:	f042 0204 	orr.w	r2, r2, #4
   224d8:	e7da      	b.n	22490 <parse_cereg+0x70>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   224da:	2e00      	cmp	r6, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   224dc:	bf14      	ite	ne
   224de:	2101      	movne	r1, #1
   224e0:	2102      	moveq	r1, #2
   224e2:	aa07      	add	r2, sp, #28
   224e4:	a805      	add	r0, sp, #20
   224e6:	f011 fa9c 	bl	33a22 <at_params_int_get>
	if (err) {
   224ea:	1e05      	subs	r5, r0, #0
   224ec:	d159      	bne.n	225a2 <parse_cereg+0x182>
	switch (reg_status) {
   224ee:	9d07      	ldr	r5, [sp, #28]
   224f0:	2d08      	cmp	r5, #8
   224f2:	d021      	beq.n	22538 <parse_cereg+0x118>
   224f4:	dc1e      	bgt.n	22534 <parse_cereg+0x114>
   224f6:	2d05      	cmp	r5, #5
   224f8:	d91e      	bls.n	22538 <parse_cereg+0x118>
   224fa:	4b6b      	ldr	r3, [pc, #428]	; (226a8 <parse_cereg+0x288>)
   224fc:	4a69      	ldr	r2, [pc, #420]	; (226a4 <parse_cereg+0x284>)
		LOG_ERR("Invalid network registration status: %d", reg_status);
   224fe:	4629      	mov	r1, r5
   22500:	1ad2      	subs	r2, r2, r3
   22502:	08d2      	lsrs	r2, r2, #3
   22504:	0192      	lsls	r2, r2, #6
   22506:	486f      	ldr	r0, [pc, #444]	; (226c4 <parse_cereg+0x2a4>)
   22508:	f042 0201 	orr.w	r2, r2, #1
   2250c:	f00b ff7d 	bl	2e40a <log_1>
		return -EINVAL;
   22510:	f06f 0515 	mvn.w	r5, #21
   22514:	4b64      	ldr	r3, [pc, #400]	; (226a8 <parse_cereg+0x288>)
   22516:	4a63      	ldr	r2, [pc, #396]	; (226a4 <parse_cereg+0x284>)
		LOG_ERR("Could not get registration status, error: %d", status);
   22518:	4629      	mov	r1, r5
   2251a:	1ad2      	subs	r2, r2, r3
   2251c:	08d2      	lsrs	r2, r2, #3
   2251e:	0192      	lsls	r2, r2, #6
   22520:	4869      	ldr	r0, [pc, #420]	; (226c8 <parse_cereg+0x2a8>)
   22522:	f042 0201 	orr.w	r2, r2, #1
   22526:	f00b ff70 	bl	2e40a <log_1>
		goto clean_exit;
   2252a:	462c      	mov	r4, r5
	at_params_list_free(&resp_list);
   2252c:	a805      	add	r0, sp, #20
   2252e:	f011 f9b4 	bl	3389a <at_params_list_free>
	return err;
   22532:	e799      	b.n	22468 <parse_cereg+0x48>
	switch (reg_status) {
   22534:	2d5a      	cmp	r5, #90	; 0x5a
   22536:	d1e0      	bne.n	224fa <parse_cereg+0xda>
	if (reg_status) {
   22538:	f1ba 0f00 	cmp.w	sl, #0
   2253c:	d00d      	beq.n	2255a <parse_cereg+0x13a>
   2253e:	4a5a      	ldr	r2, [pc, #360]	; (226a8 <parse_cereg+0x288>)
   22540:	4b58      	ldr	r3, [pc, #352]	; (226a4 <parse_cereg+0x284>)
		LOG_DBG("Network registration status: %d", *reg_status);
   22542:	495e      	ldr	r1, [pc, #376]	; (226bc <parse_cereg+0x29c>)
   22544:	1a9b      	subs	r3, r3, r2
   22546:	08db      	lsrs	r3, r3, #3
   22548:	019b      	lsls	r3, r3, #6
   2254a:	4860      	ldr	r0, [pc, #384]	; (226cc <parse_cereg+0x2ac>)
		*reg_status = status;
   2254c:	f88a 5000 	strb.w	r5, [sl]
		LOG_DBG("Network registration status: %d", *reg_status);
   22550:	f043 0304 	orr.w	r3, r3, #4
   22554:	b2ea      	uxtb	r2, r5
   22556:	f00b ff6c 	bl	2e432 <log_2>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2255a:	f1b9 0f00 	cmp.w	r9, #0
   2255e:	d051      	beq.n	22604 <parse_cereg+0x1e4>
   22560:	2d5a      	cmp	r5, #90	; 0x5a
   22562:	f000 8099 	beq.w	22698 <parse_cereg+0x278>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   22566:	a805      	add	r0, sp, #20
   22568:	f011 fab9 	bl	33ade <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2256c:	2803      	cmp	r0, #3
   2256e:	f240 8093 	bls.w	22698 <parse_cereg+0x278>
		err = at_params_string_get(
   22572:	2e00      	cmp	r6, #0
   22574:	bf14      	ite	ne
   22576:	2102      	movne	r1, #2
   22578:	2103      	moveq	r1, #3
   2257a:	ab01      	add	r3, sp, #4
   2257c:	aa07      	add	r2, sp, #28
   2257e:	a805      	add	r0, sp, #20
   22580:	f011 fa86 	bl	33a90 <at_params_string_get>
		if (err) {
   22584:	4682      	mov	sl, r0
   22586:	b170      	cbz	r0, 225a6 <parse_cereg+0x186>
   22588:	4a46      	ldr	r2, [pc, #280]	; (226a4 <parse_cereg+0x284>)
   2258a:	4b47      	ldr	r3, [pc, #284]	; (226a8 <parse_cereg+0x288>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
   2258c:	4601      	mov	r1, r0
   2258e:	1ad2      	subs	r2, r2, r3
   22590:	08d2      	lsrs	r2, r2, #3
   22592:	0192      	lsls	r2, r2, #6
   22594:	484e      	ldr	r0, [pc, #312]	; (226d0 <parse_cereg+0x2b0>)
   22596:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
   2259a:	f00b ff36 	bl	2e40a <log_1>
			goto clean_exit;
   2259e:	4654      	mov	r4, sl
   225a0:	e7c4      	b.n	2252c <parse_cereg+0x10c>
	if (status < 0) {
   225a2:	dac9      	bge.n	22538 <parse_cereg+0x118>
   225a4:	e7b6      	b.n	22514 <parse_cereg+0xf4>
		str_buf[len] = '\0';
   225a6:	9b01      	ldr	r3, [sp, #4]
   225a8:	aa0a      	add	r2, sp, #40	; 0x28
   225aa:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   225ac:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   225ae:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   225b2:	2210      	movs	r2, #16
   225b4:	a807      	add	r0, sp, #28
   225b6:	f00b f9f9 	bl	2d9ac <strtoul>
		len = sizeof(str_buf) - 1;
   225ba:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   225bc:	2e00      	cmp	r6, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   225be:	f8c9 000c 	str.w	r0, [r9, #12]
		len = sizeof(str_buf) - 1;
   225c2:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   225c4:	bf14      	ite	ne
   225c6:	2103      	movne	r1, #3
   225c8:	2104      	moveq	r1, #4
   225ca:	ab01      	add	r3, sp, #4
   225cc:	aa07      	add	r2, sp, #28
   225ce:	a805      	add	r0, sp, #20
   225d0:	f011 fa5e 	bl	33a90 <at_params_string_get>
		if (err) {
   225d4:	4682      	mov	sl, r0
   225d6:	b148      	cbz	r0, 225ec <parse_cereg+0x1cc>
   225d8:	4a32      	ldr	r2, [pc, #200]	; (226a4 <parse_cereg+0x284>)
   225da:	4b33      	ldr	r3, [pc, #204]	; (226a8 <parse_cereg+0x288>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   225dc:	4601      	mov	r1, r0
   225de:	1ad2      	subs	r2, r2, r3
   225e0:	08d2      	lsrs	r2, r2, #3
   225e2:	0192      	lsls	r2, r2, #6
   225e4:	483b      	ldr	r0, [pc, #236]	; (226d4 <parse_cereg+0x2b4>)
   225e6:	f042 0201 	orr.w	r2, r2, #1
   225ea:	e7d6      	b.n	2259a <parse_cereg+0x17a>
		str_buf[len] = '\0';
   225ec:	9b01      	ldr	r3, [sp, #4]
   225ee:	aa0a      	add	r2, sp, #40	; 0x28
   225f0:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   225f2:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   225f4:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   225f8:	2210      	movs	r2, #16
   225fa:	a807      	add	r0, sp, #28
   225fc:	f00b f9d6 	bl	2d9ac <strtoul>
   22600:	f8c9 0008 	str.w	r0, [r9, #8]
	if (lte_mode) {
   22604:	f1b8 0f00 	cmp.w	r8, #0
   22608:	d017      	beq.n	2263a <parse_cereg+0x21a>
		err = at_params_int_get(&resp_list,
   2260a:	2e00      	cmp	r6, #0
   2260c:	aa02      	add	r2, sp, #8
   2260e:	bf14      	ite	ne
   22610:	2104      	movne	r1, #4
   22612:	2105      	moveq	r1, #5
   22614:	a805      	add	r0, sp, #20
   22616:	f011 fa04 	bl	33a22 <at_params_int_get>
		if (err) {
   2261a:	4a23      	ldr	r2, [pc, #140]	; (226a8 <parse_cereg+0x288>)
   2261c:	4b21      	ldr	r3, [pc, #132]	; (226a4 <parse_cereg+0x284>)
   2261e:	1a9b      	subs	r3, r3, r2
   22620:	08db      	lsrs	r3, r3, #3
   22622:	4602      	mov	r2, r0
   22624:	019b      	lsls	r3, r3, #6
   22626:	b338      	cbz	r0, 22678 <parse_cereg+0x258>
			LOG_DBG("LTE mode not found, error code: %d", err);
   22628:	f043 0304 	orr.w	r3, r3, #4
   2262c:	4923      	ldr	r1, [pc, #140]	; (226bc <parse_cereg+0x29c>)
   2262e:	482a      	ldr	r0, [pc, #168]	; (226d8 <parse_cereg+0x2b8>)
   22630:	f00b feff 	bl	2e432 <log_2>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   22634:	2300      	movs	r3, #0
   22636:	f888 3000 	strb.w	r3, [r8]
	if (psm_cfg && ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2263a:	2f00      	cmp	r7, #0
   2263c:	f43f af76 	beq.w	2252c <parse_cereg+0x10c>
   22640:	f025 0504 	bic.w	r5, r5, #4
   22644:	2d01      	cmp	r5, #1
   22646:	d122      	bne.n	2268e <parse_cereg+0x26e>
	     (at_params_valid_count_get(&resp_list) > AT_CEREG_TAU_INDEX)) {
   22648:	a805      	add	r0, sp, #20
   2264a:	f011 fa48 	bl	33ade <at_params_valid_count_get>
	    (status == LTE_LC_NW_REG_REGISTERED_ROAMING)) &&
   2264e:	2808      	cmp	r0, #8
   22650:	d91d      	bls.n	2268e <parse_cereg+0x26e>
		err = parse_psm(&resp_list, is_notif, psm_cfg);
   22652:	463a      	mov	r2, r7
   22654:	4631      	mov	r1, r6
   22656:	a805      	add	r0, sp, #20
   22658:	f7ff fde8 	bl	2222c <parse_psm>
		if (err) {
   2265c:	4604      	mov	r4, r0
   2265e:	2800      	cmp	r0, #0
   22660:	f43f af64 	beq.w	2252c <parse_cereg+0x10c>
   22664:	4a0f      	ldr	r2, [pc, #60]	; (226a4 <parse_cereg+0x284>)
   22666:	4b10      	ldr	r3, [pc, #64]	; (226a8 <parse_cereg+0x288>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   22668:	4601      	mov	r1, r0
   2266a:	1ad2      	subs	r2, r2, r3
   2266c:	08d2      	lsrs	r2, r2, #3
   2266e:	0192      	lsls	r2, r2, #6
   22670:	481a      	ldr	r0, [pc, #104]	; (226dc <parse_cereg+0x2bc>)
   22672:	f042 0201 	orr.w	r2, r2, #1
   22676:	e70b      	b.n	22490 <parse_cereg+0x70>
			*lte_mode = mode;
   22678:	9a02      	ldr	r2, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   2267a:	4910      	ldr	r1, [pc, #64]	; (226bc <parse_cereg+0x29c>)
			*lte_mode = mode;
   2267c:	f888 2000 	strb.w	r2, [r8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   22680:	4817      	ldr	r0, [pc, #92]	; (226e0 <parse_cereg+0x2c0>)
   22682:	f043 0304 	orr.w	r3, r3, #4
   22686:	b2d2      	uxtb	r2, r2
   22688:	f00b fed3 	bl	2e432 <log_2>
   2268c:	e7d5      	b.n	2263a <parse_cereg+0x21a>
		psm_cfg->tau = -1;
   2268e:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
   22692:	e9c7 3300 	strd	r3, r3, [r7]
   22696:	e749      	b.n	2252c <parse_cereg+0x10c>
		cell->tac = UINT32_MAX;
   22698:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
   2269c:	e9c9 3302 	strd	r3, r3, [r9, #8]
   226a0:	e7b0      	b.n	22604 <parse_cereg+0x1e4>
   226a2:	bf00      	nop
   226a4:	00036580 	.word	0x00036580
   226a8:	000364b0 	.word	0x000364b0
   226ac:	0003c194 	.word	0x0003c194
   226b0:	0003c3ff 	.word	0x0003c3ff
   226b4:	0003bd17 	.word	0x0003bd17
   226b8:	0003c066 	.word	0x0003c066
   226bc:	0003c732 	.word	0x0003c732
   226c0:	0003c42c 	.word	0x0003c42c
   226c4:	0003c44b 	.word	0x0003c44b
   226c8:	0003c473 	.word	0x0003c473
   226cc:	0003c4a0 	.word	0x0003c4a0
   226d0:	0003c4c4 	.word	0x0003c4c4
   226d4:	0003c4f0 	.word	0x0003c4f0
   226d8:	0003c511 	.word	0x0003c511
   226dc:	0003c549 	.word	0x0003c549
   226e0:	0003c538 	.word	0x0003c538

000226e4 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   226e4:	2300      	movs	r3, #0
{
   226e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   226e8:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   226ea:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   226ec:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   226f0:	2900      	cmp	r1, #0
   226f2:	d051      	beq.n	22798 <parse_xt3412+0xb4>
   226f4:	2800      	cmp	r0, #0
   226f6:	d04f      	beq.n	22798 <parse_xt3412+0xb4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   226f8:	2104      	movs	r1, #4
   226fa:	4668      	mov	r0, sp
   226fc:	f011 f8ba 	bl	33874 <at_params_list_init>
	if (err) {
   22700:	4604      	mov	r4, r0
   22702:	b168      	cbz	r0, 22720 <parse_xt3412+0x3c>
   22704:	4a26      	ldr	r2, [pc, #152]	; (227a0 <parse_xt3412+0xbc>)
   22706:	4b27      	ldr	r3, [pc, #156]	; (227a4 <parse_xt3412+0xc0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   22708:	4601      	mov	r1, r0
   2270a:	1ad2      	subs	r2, r2, r3
   2270c:	08d2      	lsrs	r2, r2, #3
   2270e:	0192      	lsls	r2, r2, #6
   22710:	4825      	ldr	r0, [pc, #148]	; (227a8 <parse_xt3412+0xc4>)
   22712:	f042 0201 	orr.w	r2, r2, #1
   22716:	f00b fe78 	bl	2e40a <log_1>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   2271a:	4620      	mov	r0, r4
   2271c:	b002      	add	sp, #8
   2271e:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   22720:	4601      	mov	r1, r0
   22722:	466a      	mov	r2, sp
   22724:	4630      	mov	r0, r6
   22726:	f011 f8a2 	bl	3386e <at_parser_params_from_str>
	if (err) {
   2272a:	4604      	mov	r4, r0
   2272c:	b170      	cbz	r0, 2274c <parse_xt3412+0x68>
   2272e:	4a1c      	ldr	r2, [pc, #112]	; (227a0 <parse_xt3412+0xbc>)
   22730:	4b1c      	ldr	r3, [pc, #112]	; (227a4 <parse_xt3412+0xc0>)
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   22732:	4601      	mov	r1, r0
   22734:	1ad2      	subs	r2, r2, r3
   22736:	08d2      	lsrs	r2, r2, #3
   22738:	0192      	lsls	r2, r2, #6
   2273a:	481c      	ldr	r0, [pc, #112]	; (227ac <parse_xt3412+0xc8>)
   2273c:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   22740:	f00b fe63 	bl	2e40a <log_1>
	at_params_list_free(&resp_list);
   22744:	4668      	mov	r0, sp
   22746:	f011 f8a8 	bl	3389a <at_params_list_free>
	return err;
   2274a:	e7e6      	b.n	2271a <parse_xt3412+0x36>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   2274c:	462a      	mov	r2, r5
   2274e:	2102      	movs	r1, #2
   22750:	4668      	mov	r0, sp
   22752:	f011 f985 	bl	33a60 <at_params_int64_get>
	if (err) {
   22756:	4604      	mov	r4, r0
   22758:	b148      	cbz	r0, 2276e <parse_xt3412+0x8a>
   2275a:	4a11      	ldr	r2, [pc, #68]	; (227a0 <parse_xt3412+0xbc>)
   2275c:	4b11      	ldr	r3, [pc, #68]	; (227a4 <parse_xt3412+0xc0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   2275e:	4601      	mov	r1, r0
   22760:	1ad2      	subs	r2, r2, r3
   22762:	08d2      	lsrs	r2, r2, #3
   22764:	0192      	lsls	r2, r2, #6
   22766:	4812      	ldr	r0, [pc, #72]	; (227b0 <parse_xt3412+0xcc>)
   22768:	f042 0201 	orr.w	r2, r2, #1
   2276c:	e7e8      	b.n	22740 <parse_xt3412+0x5c>
	if ((*time > T3412_MAX) || *time < 0) {
   2276e:	2108      	movs	r1, #8
   22770:	e9d5 2300 	ldrd	r2, r3, [r5]
   22774:	480f      	ldr	r0, [pc, #60]	; (227b4 <parse_xt3412+0xd0>)
   22776:	4299      	cmp	r1, r3
   22778:	bf08      	it	eq
   2277a:	4290      	cmpeq	r0, r2
   2277c:	d2e2      	bcs.n	22744 <parse_xt3412+0x60>
   2277e:	4b09      	ldr	r3, [pc, #36]	; (227a4 <parse_xt3412+0xc0>)
   22780:	4907      	ldr	r1, [pc, #28]	; (227a0 <parse_xt3412+0xbc>)
		LOG_WRN("Parsed time parameter not within valid range");
   22782:	480d      	ldr	r0, [pc, #52]	; (227b8 <parse_xt3412+0xd4>)
   22784:	1ac9      	subs	r1, r1, r3
   22786:	08c9      	lsrs	r1, r1, #3
   22788:	0189      	lsls	r1, r1, #6
   2278a:	f041 0102 	orr.w	r1, r1, #2
   2278e:	f00b fe2f 	bl	2e3f0 <log_0>
		err = -EINVAL;
   22792:	f06f 0415 	mvn.w	r4, #21
   22796:	e7d5      	b.n	22744 <parse_xt3412+0x60>
		return -EINVAL;
   22798:	f06f 0415 	mvn.w	r4, #21
   2279c:	e7bd      	b.n	2271a <parse_xt3412+0x36>
   2279e:	bf00      	nop
   227a0:	00036580 	.word	0x00036580
   227a4:	000364b0 	.word	0x000364b0
   227a8:	0003c194 	.word	0x0003c194
   227ac:	0003c576 	.word	0x0003c576
   227b0:	0003c5a3 	.word	0x0003c5a3
   227b4:	5099e000 	.word	0x5099e000
   227b8:	0003c5d0 	.word	0x0003c5d0

000227bc <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   227bc:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   227be:	4604      	mov	r4, r0
   227c0:	b958      	cbnz	r0, 227da <neighborcell_count_get+0x1e>
   227c2:	4b0e      	ldr	r3, [pc, #56]	; (227fc <neighborcell_count_get+0x40>)
   227c4:	490e      	ldr	r1, [pc, #56]	; (22800 <neighborcell_count_get+0x44>)
		LOG_ERR("at_response is NULL, can't get cell count");
   227c6:	480f      	ldr	r0, [pc, #60]	; (22804 <neighborcell_count_get+0x48>)
   227c8:	1ac9      	subs	r1, r1, r3
   227ca:	08c9      	lsrs	r1, r1, #3
   227cc:	0189      	lsls	r1, r1, #6
   227ce:	f041 0101 	orr.w	r1, r1, #1
   227d2:	f00b fe0d 	bl	2e3f0 <log_0>
		return 0;
   227d6:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   227d8:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   227da:	2400      	movs	r4, #0
   227dc:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   227de:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   227e2:	282c      	cmp	r0, #44	; 0x2c
   227e4:	d101      	bne.n	227ea <neighborcell_count_get+0x2e>
			count++;
   227e6:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   227e8:	e7f9      	b.n	227de <neighborcell_count_get+0x22>
   227ea:	2800      	cmp	r0, #0
   227ec:	d1f7      	bne.n	227de <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   227ee:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   227f0:	bf82      	ittt	hi
   227f2:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   227f4:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   227f6:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   227fa:	e7ed      	b.n	227d8 <neighborcell_count_get+0x1c>
   227fc:	000364b0 	.word	0x000364b0
   22800:	00036580 	.word	0x00036580
   22804:	0003c5fd 	.word	0x0003c5fd

00022808 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   22808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2280c:	230b      	movs	r3, #11
{
   2280e:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   22810:	2100      	movs	r1, #0
{
   22812:	4606      	mov	r6, r0
   22814:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   22816:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   2281a:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2281c:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   22820:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   22822:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   22826:	2b2c      	cmp	r3, #44	; 0x2c
   22828:	d101      	bne.n	2282e <parse_ncellmeas+0x26>
			count++;
   2282a:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   2282c:	e7f9      	b.n	22822 <parse_ncellmeas+0x1a>
   2282e:	2b00      	cmp	r3, #0
   22830:	d1f7      	bne.n	22822 <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   22832:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28

	err = at_params_list_init(&resp_list, param_count);
   22836:	3103      	adds	r1, #3
   22838:	a807      	add	r0, sp, #28
   2283a:	f011 f81b 	bl	33874 <at_params_list_init>
	if (err) {
   2283e:	4604      	mov	r4, r0
   22840:	b170      	cbz	r0, 22860 <parse_ncellmeas+0x58>
   22842:	4a8d      	ldr	r2, [pc, #564]	; (22a78 <parse_ncellmeas+0x270>)
   22844:	4b8d      	ldr	r3, [pc, #564]	; (22a7c <parse_ncellmeas+0x274>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   22846:	4601      	mov	r1, r0
   22848:	1ad2      	subs	r2, r2, r3
   2284a:	08d2      	lsrs	r2, r2, #3
   2284c:	0192      	lsls	r2, r2, #6
   2284e:	488c      	ldr	r0, [pc, #560]	; (22a80 <parse_ncellmeas+0x278>)
   22850:	f042 0201 	orr.w	r2, r2, #1
   22854:	f00b fdd9 	bl	2e40a <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   22858:	4620      	mov	r0, r4
   2285a:	b00d      	add	sp, #52	; 0x34
   2285c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   22860:	4601      	mov	r1, r0
   22862:	aa07      	add	r2, sp, #28
   22864:	4630      	mov	r0, r6
   22866:	f011 f802 	bl	3386e <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   2286a:	4604      	mov	r4, r0
   2286c:	b180      	cbz	r0, 22890 <parse_ncellmeas+0x88>
   2286e:	1dc3      	adds	r3, r0, #7
   22870:	d021      	beq.n	228b6 <parse_ncellmeas+0xae>
   22872:	4a81      	ldr	r2, [pc, #516]	; (22a78 <parse_ncellmeas+0x270>)
   22874:	4b81      	ldr	r3, [pc, #516]	; (22a7c <parse_ncellmeas+0x274>)
		LOG_ERR("Could not parse AT%%XNCELLMEAS  response, error: %d", err);
   22876:	4601      	mov	r1, r0
   22878:	1ad2      	subs	r2, r2, r3
   2287a:	08d2      	lsrs	r2, r2, #3
   2287c:	0192      	lsls	r2, r2, #6
   2287e:	4881      	ldr	r0, [pc, #516]	; (22a84 <parse_ncellmeas+0x27c>)
   22880:	f042 0201 	orr.w	r2, r2, #1
		LOG_DBG("Not a valid NCELLMEAS response");
   22884:	f00b fdc1 	bl	2e40a <log_1>
	at_params_list_free(&resp_list);
   22888:	a807      	add	r0, sp, #28
   2288a:	f011 f806 	bl	3389a <at_params_list_free>
	return err;
   2288e:	e7e3      	b.n	22858 <parse_ncellmeas+0x50>
	bool incomplete = false;
   22890:	4680      	mov	r8, r0
	err = at_params_string_get(&resp_list,
   22892:	2100      	movs	r1, #0
   22894:	ab04      	add	r3, sp, #16
   22896:	aa09      	add	r2, sp, #36	; 0x24
   22898:	a807      	add	r0, sp, #28
   2289a:	f011 f8f9 	bl	33a90 <at_params_string_get>
	if (err) {
   2289e:	4604      	mov	r4, r0
   228a0:	b160      	cbz	r0, 228bc <parse_ncellmeas+0xb4>
   228a2:	4a75      	ldr	r2, [pc, #468]	; (22a78 <parse_ncellmeas+0x270>)
   228a4:	4b75      	ldr	r3, [pc, #468]	; (22a7c <parse_ncellmeas+0x274>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   228a6:	4601      	mov	r1, r0
   228a8:	1ad2      	subs	r2, r2, r3
   228aa:	08d2      	lsrs	r2, r2, #3
   228ac:	0192      	lsls	r2, r2, #6
   228ae:	4876      	ldr	r0, [pc, #472]	; (22a88 <parse_ncellmeas+0x280>)
   228b0:	f042 0201 	orr.w	r2, r2, #1
   228b4:	e7e6      	b.n	22884 <parse_ncellmeas+0x7c>
		incomplete = true;
   228b6:	f04f 0801 	mov.w	r8, #1
   228ba:	e7ea      	b.n	22892 <parse_ncellmeas+0x8a>
	if (!response_is_valid(response_prefix, response_prefix_len,
   228bc:	4a73      	ldr	r2, [pc, #460]	; (22a8c <parse_ncellmeas+0x284>)
   228be:	9904      	ldr	r1, [sp, #16]
   228c0:	a809      	add	r0, sp, #36	; 0x24
   228c2:	f7ff fc8d 	bl	221e0 <response_is_valid>
   228c6:	b948      	cbnz	r0, 228dc <parse_ncellmeas+0xd4>
   228c8:	4a6b      	ldr	r2, [pc, #428]	; (22a78 <parse_ncellmeas+0x270>)
   228ca:	4b6c      	ldr	r3, [pc, #432]	; (22a7c <parse_ncellmeas+0x274>)
		LOG_DBG("Not a valid NCELLMEAS response");
   228cc:	4970      	ldr	r1, [pc, #448]	; (22a90 <parse_ncellmeas+0x288>)
   228ce:	1ad2      	subs	r2, r2, r3
   228d0:	08d2      	lsrs	r2, r2, #3
   228d2:	0192      	lsls	r2, r2, #6
   228d4:	486f      	ldr	r0, [pc, #444]	; (22a94 <parse_ncellmeas+0x28c>)
   228d6:	f042 0204 	orr.w	r2, r2, #4
   228da:	e7d3      	b.n	22884 <parse_ncellmeas+0x7c>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   228dc:	2101      	movs	r1, #1
   228de:	aa01      	add	r2, sp, #4
   228e0:	a807      	add	r0, sp, #28
   228e2:	f011 f89e 	bl	33a22 <at_params_int_get>
	if (err) {
   228e6:	4604      	mov	r4, r0
   228e8:	2800      	cmp	r0, #0
   228ea:	d1cd      	bne.n	22888 <parse_ncellmeas+0x80>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   228ec:	9b01      	ldr	r3, [sp, #4]
   228ee:	2b00      	cmp	r3, #0
   228f0:	f040 80bd 	bne.w	22a6e <parse_ncellmeas+0x266>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   228f4:	2102      	movs	r1, #2
   228f6:	aa02      	add	r2, sp, #8
   228f8:	a807      	add	r0, sp, #28
   228fa:	f011 f937 	bl	33b6c <string_param_to_int.constprop.0>
	if (err) {
   228fe:	4604      	mov	r4, r0
   22900:	2800      	cmp	r0, #0
   22902:	d1c1      	bne.n	22888 <parse_ncellmeas+0x80>
	cells->current_cell.id = tmp;
   22904:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   22906:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   22908:	60ab      	str	r3, [r5, #8]
	len = sizeof(tmp_str);
   2290a:	2307      	movs	r3, #7
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   2290c:	aa05      	add	r2, sp, #20
	len = sizeof(tmp_str);
   2290e:	9303      	str	r3, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   22910:	a807      	add	r0, sp, #28
   22912:	ab03      	add	r3, sp, #12
   22914:	f011 f8bc 	bl	33a90 <at_params_string_get>
	if (err) {
   22918:	4604      	mov	r4, r0
   2291a:	2800      	cmp	r0, #0
   2291c:	d1b4      	bne.n	22888 <parse_ncellmeas+0x80>
	tmp_str[len] = '\0';
   2291e:	9b03      	ldr	r3, [sp, #12]
   22920:	aa0c      	add	r2, sp, #48	; 0x30
   22922:	4413      	add	r3, r2
   22924:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   22928:	210a      	movs	r1, #10
   2292a:	1d2a      	adds	r2, r5, #4
   2292c:	f10d 0017 	add.w	r0, sp, #23
   22930:	f011 f8f6 	bl	33b20 <string_to_int>
	if (err) {
   22934:	4604      	mov	r4, r0
   22936:	2800      	cmp	r0, #0
   22938:	d1a6      	bne.n	22888 <parse_ncellmeas+0x80>
	tmp_str[3] = '\0';
   2293a:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   2293e:	462a      	mov	r2, r5
   22940:	210a      	movs	r1, #10
   22942:	a805      	add	r0, sp, #20
   22944:	f011 f8ec 	bl	33b20 <string_to_int>
	if (err) {
   22948:	4604      	mov	r4, r0
   2294a:	2800      	cmp	r0, #0
   2294c:	d19c      	bne.n	22888 <parse_ncellmeas+0x80>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   2294e:	2104      	movs	r1, #4
   22950:	aa02      	add	r2, sp, #8
   22952:	a807      	add	r0, sp, #28
   22954:	f011 f90a 	bl	33b6c <string_param_to_int.constprop.0>
	if (err) {
   22958:	4604      	mov	r4, r0
   2295a:	2800      	cmp	r0, #0
   2295c:	d194      	bne.n	22888 <parse_ncellmeas+0x80>
	cells->current_cell.tac = tmp;
   2295e:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   22960:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   22962:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   22964:	aa02      	add	r2, sp, #8
   22966:	a807      	add	r0, sp, #28
   22968:	f011 f85b 	bl	33a22 <at_params_int_get>
	if (err) {
   2296c:	4604      	mov	r4, r0
   2296e:	2800      	cmp	r0, #0
   22970:	d18a      	bne.n	22888 <parse_ncellmeas+0x80>
	cells->current_cell.timing_advance = tmp;
   22972:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   22974:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   22976:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   22978:	f105 0210 	add.w	r2, r5, #16
   2297c:	a807      	add	r0, sp, #28
   2297e:	f011 f850 	bl	33a22 <at_params_int_get>
	if (err) {
   22982:	4604      	mov	r4, r0
   22984:	2800      	cmp	r0, #0
   22986:	f47f af7f 	bne.w	22888 <parse_ncellmeas+0x80>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   2298a:	2107      	movs	r1, #7
   2298c:	f105 0220 	add.w	r2, r5, #32
   22990:	a807      	add	r0, sp, #28
   22992:	f011 f80a 	bl	339aa <at_params_short_get>
	if (err) {
   22996:	4604      	mov	r4, r0
   22998:	2800      	cmp	r0, #0
   2299a:	f47f af75 	bne.w	22888 <parse_ncellmeas+0x80>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   2299e:	2108      	movs	r1, #8
   229a0:	aa02      	add	r2, sp, #8
   229a2:	a807      	add	r0, sp, #28
   229a4:	f011 f83d 	bl	33a22 <at_params_int_get>
	if (err) {
   229a8:	4604      	mov	r4, r0
   229aa:	2800      	cmp	r0, #0
   229ac:	f47f af6c 	bne.w	22888 <parse_ncellmeas+0x80>
	cells->current_cell.rsrp = tmp;
   229b0:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   229b2:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   229b4:	846b      	strh	r3, [r5, #34]	; 0x22
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   229b6:	aa02      	add	r2, sp, #8
   229b8:	a807      	add	r0, sp, #28
   229ba:	f011 f832 	bl	33a22 <at_params_int_get>
	if (err) {
   229be:	4604      	mov	r4, r0
   229c0:	2800      	cmp	r0, #0
   229c2:	f47f af61 	bne.w	22888 <parse_ncellmeas+0x80>
	cells->current_cell.rsrq = tmp;
   229c6:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   229c8:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   229ca:	84ab      	strh	r3, [r5, #36]	; 0x24
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   229cc:	f105 0218 	add.w	r2, r5, #24
   229d0:	a807      	add	r0, sp, #28
   229d2:	f011 f845 	bl	33a60 <at_params_int64_get>
	if (err) {
   229d6:	4604      	mov	r4, r0
   229d8:	2800      	cmp	r0, #0
   229da:	f47f af55 	bne.w	22888 <parse_ncellmeas+0x80>
	cells->ncells_count = neighborcell_count_get(at_response);
   229de:	4630      	mov	r0, r6
   229e0:	f7ff feec 	bl	227bc <neighborcell_count_get>
   229e4:	b2c0      	uxtb	r0, r0
   229e6:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   229ea:	2800      	cmp	r0, #0
   229ec:	f43f af4c 	beq.w	22888 <parse_ncellmeas+0x80>
   229f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   229f2:	2b00      	cmp	r3, #0
   229f4:	f43f af48 	beq.w	22888 <parse_ncellmeas+0x80>
   229f8:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   229fa:	4627      	mov	r7, r4
   229fc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   22a00:	429f      	cmp	r7, r3
   22a02:	d305      	bcc.n	22a10 <parse_ncellmeas+0x208>
		err = -E2BIG;
   22a04:	f1b8 0f00 	cmp.w	r8, #0
   22a08:	bf18      	it	ne
   22a0a:	f06f 0406 	mvnne.w	r4, #6
   22a0e:	e73b      	b.n	22888 <parse_ncellmeas+0x80>
					&cells->neighbor_cells[i].earfcn);
   22a10:	6aea      	ldr	r2, [r5, #44]	; 0x2c
		err = at_params_int_get(&resp_list,
   22a12:	1f31      	subs	r1, r6, #4
   22a14:	eb02 1207 	add.w	r2, r2, r7, lsl #4
   22a18:	a807      	add	r0, sp, #28
   22a1a:	ea4f 1907 	mov.w	r9, r7, lsl #4
   22a1e:	f011 f800 	bl	33a22 <at_params_int_get>
		if (err) {
   22a22:	bb30      	cbnz	r0, 22a72 <parse_ncellmeas+0x26a>
					  &cells->neighbor_cells[i].phys_cell_id);
   22a24:	6aea      	ldr	r2, [r5, #44]	; 0x2c
		err = at_params_short_get(&resp_list,
   22a26:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   22a28:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   22a2a:	3208      	adds	r2, #8
   22a2c:	a807      	add	r0, sp, #28
   22a2e:	f010 ffbc 	bl	339aa <at_params_short_get>
		if (err) {
   22a32:	b9f0      	cbnz	r0, 22a72 <parse_ncellmeas+0x26a>
		err = at_params_int_get(&resp_list,
   22a34:	aa02      	add	r2, sp, #8
   22a36:	1eb1      	subs	r1, r6, #2
   22a38:	a807      	add	r0, sp, #28
   22a3a:	f010 fff2 	bl	33a22 <at_params_int_get>
		if (err) {
   22a3e:	b9c0      	cbnz	r0, 22a72 <parse_ncellmeas+0x26a>
		cells->neighbor_cells[i].rsrp = tmp;
   22a40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22a42:	9a02      	ldr	r2, [sp, #8]
   22a44:	444b      	add	r3, r9
   22a46:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   22a48:	1e71      	subs	r1, r6, #1
   22a4a:	aa02      	add	r2, sp, #8
   22a4c:	a807      	add	r0, sp, #28
   22a4e:	f010 ffe8 	bl	33a22 <at_params_int_get>
		if (err) {
   22a52:	b970      	cbnz	r0, 22a72 <parse_ncellmeas+0x26a>
		cells->neighbor_cells[i].rsrq = tmp;
   22a54:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   22a56:	9b02      	ldr	r3, [sp, #8]
   22a58:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   22a5a:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   22a5c:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   22a5e:	a807      	add	r0, sp, #28
   22a60:	3204      	adds	r2, #4
   22a62:	f010 ffde 	bl	33a22 <at_params_int_get>
		if (err) {
   22a66:	3605      	adds	r6, #5
   22a68:	b918      	cbnz	r0, 22a72 <parse_ncellmeas+0x26a>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   22a6a:	3701      	adds	r7, #1
   22a6c:	e7c6      	b.n	229fc <parse_ncellmeas+0x1f4>
		err = 1;
   22a6e:	2401      	movs	r4, #1
   22a70:	e70a      	b.n	22888 <parse_ncellmeas+0x80>
		err = at_params_int_get(&resp_list,
   22a72:	4604      	mov	r4, r0
   22a74:	e708      	b.n	22888 <parse_ncellmeas+0x80>
   22a76:	bf00      	nop
   22a78:	00036580 	.word	0x00036580
   22a7c:	000364b0 	.word	0x000364b0
   22a80:	0003c194 	.word	0x0003c194
   22a84:	0003c627 	.word	0x0003c627
   22a88:	0003bd17 	.word	0x0003bd17
   22a8c:	0003c084 	.word	0x0003c084
   22a90:	0003c73e 	.word	0x0003c73e
   22a94:	0003c65b 	.word	0x0003c65b

00022a98 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   22a98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   22a9a:	2300      	movs	r3, #0
{
   22a9c:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   22a9e:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   22aa0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   22aa4:	2900      	cmp	r1, #0
   22aa6:	d05f      	beq.n	22b68 <parse_xmodemsleep+0xd0>
   22aa8:	2800      	cmp	r0, #0
   22aaa:	d05d      	beq.n	22b68 <parse_xmodemsleep+0xd0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   22aac:	2104      	movs	r1, #4
   22aae:	a802      	add	r0, sp, #8
   22ab0:	f010 fee0 	bl	33874 <at_params_list_init>
	if (err) {
   22ab4:	4604      	mov	r4, r0
   22ab6:	b168      	cbz	r0, 22ad4 <parse_xmodemsleep+0x3c>
   22ab8:	4a2d      	ldr	r2, [pc, #180]	; (22b70 <parse_xmodemsleep+0xd8>)
   22aba:	4b2e      	ldr	r3, [pc, #184]	; (22b74 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   22abc:	4601      	mov	r1, r0
   22abe:	1ad2      	subs	r2, r2, r3
   22ac0:	08d2      	lsrs	r2, r2, #3
   22ac2:	0192      	lsls	r2, r2, #6
   22ac4:	482c      	ldr	r0, [pc, #176]	; (22b78 <parse_xmodemsleep+0xe0>)
   22ac6:	f042 0201 	orr.w	r2, r2, #1
   22aca:	f00b fc9e 	bl	2e40a <log_1>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   22ace:	4620      	mov	r0, r4
   22ad0:	b004      	add	sp, #16
   22ad2:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   22ad4:	4601      	mov	r1, r0
   22ad6:	aa02      	add	r2, sp, #8
   22ad8:	4630      	mov	r0, r6
   22ada:	f010 fec8 	bl	3386e <at_parser_params_from_str>
	if (err) {
   22ade:	4604      	mov	r4, r0
   22ae0:	b158      	cbz	r0, 22afa <parse_xmodemsleep+0x62>
   22ae2:	4a23      	ldr	r2, [pc, #140]	; (22b70 <parse_xmodemsleep+0xd8>)
   22ae4:	4b23      	ldr	r3, [pc, #140]	; (22b74 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   22ae6:	4601      	mov	r1, r0
   22ae8:	1ad2      	subs	r2, r2, r3
   22aea:	08d2      	lsrs	r2, r2, #3
   22aec:	0192      	lsls	r2, r2, #6
   22aee:	4823      	ldr	r0, [pc, #140]	; (22b7c <parse_xmodemsleep+0xe4>)
   22af0:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   22af4:	f00b fc89 	bl	2e40a <log_1>
		goto clean_exit;
   22af8:	e01f      	b.n	22b3a <parse_xmodemsleep+0xa2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   22afa:	2101      	movs	r1, #1
   22afc:	f10d 0206 	add.w	r2, sp, #6
   22b00:	a802      	add	r0, sp, #8
   22b02:	f010 ff72 	bl	339ea <at_params_unsigned_short_get>
	if (err) {
   22b06:	4604      	mov	r4, r0
   22b08:	b148      	cbz	r0, 22b1e <parse_xmodemsleep+0x86>
   22b0a:	4a19      	ldr	r2, [pc, #100]	; (22b70 <parse_xmodemsleep+0xd8>)
   22b0c:	4b19      	ldr	r3, [pc, #100]	; (22b74 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   22b0e:	4601      	mov	r1, r0
   22b10:	1ad2      	subs	r2, r2, r3
   22b12:	08d2      	lsrs	r2, r2, #3
   22b14:	0192      	lsls	r2, r2, #6
   22b16:	481a      	ldr	r0, [pc, #104]	; (22b80 <parse_xmodemsleep+0xe8>)
   22b18:	f042 0201 	orr.w	r2, r2, #1
   22b1c:	e7ea      	b.n	22af4 <parse_xmodemsleep+0x5c>
	modem_sleep->type = type;
   22b1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   22b22:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   22b24:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   22b26:	f010 ffda 	bl	33ade <at_params_valid_count_get>
   22b2a:	2802      	cmp	r0, #2
   22b2c:	d809      	bhi.n	22b42 <parse_xmodemsleep+0xaa>
		modem_sleep->time = -1;
   22b2e:	f04f 32ff 	mov.w	r2, #4294967295
   22b32:	f04f 33ff 	mov.w	r3, #4294967295
   22b36:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   22b3a:	a802      	add	r0, sp, #8
   22b3c:	f010 fead 	bl	3389a <at_params_list_free>
	return err;
   22b40:	e7c5      	b.n	22ace <parse_xmodemsleep+0x36>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   22b42:	2102      	movs	r1, #2
   22b44:	f105 0208 	add.w	r2, r5, #8
   22b48:	a802      	add	r0, sp, #8
   22b4a:	f010 ff89 	bl	33a60 <at_params_int64_get>
	if (err) {
   22b4e:	4604      	mov	r4, r0
   22b50:	2800      	cmp	r0, #0
   22b52:	d0f2      	beq.n	22b3a <parse_xmodemsleep+0xa2>
   22b54:	4a06      	ldr	r2, [pc, #24]	; (22b70 <parse_xmodemsleep+0xd8>)
   22b56:	4b07      	ldr	r3, [pc, #28]	; (22b74 <parse_xmodemsleep+0xdc>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   22b58:	4601      	mov	r1, r0
   22b5a:	1ad2      	subs	r2, r2, r3
   22b5c:	08d2      	lsrs	r2, r2, #3
   22b5e:	0192      	lsls	r2, r2, #6
   22b60:	4808      	ldr	r0, [pc, #32]	; (22b84 <parse_xmodemsleep+0xec>)
   22b62:	f042 0201 	orr.w	r2, r2, #1
   22b66:	e7c5      	b.n	22af4 <parse_xmodemsleep+0x5c>
		return -EINVAL;
   22b68:	f06f 0415 	mvn.w	r4, #21
   22b6c:	e7af      	b.n	22ace <parse_xmodemsleep+0x36>
   22b6e:	bf00      	nop
   22b70:	00036580 	.word	0x00036580
   22b74:	000364b0 	.word	0x000364b0
   22b78:	0003c194 	.word	0x0003c194
   22b7c:	0003c67e 	.word	0x0003c67e
   22b80:	0003c6b0 	.word	0x0003c6b0
   22b84:	0003c6d9 	.word	0x0003c6d9

00022b88 <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   22b88:	4803      	ldr	r0, [pc, #12]	; (22b98 <modem_info_init+0x10>)
   22b8a:	6843      	ldr	r3, [r0, #4]
   22b8c:	b913      	cbnz	r3, 22b94 <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   22b8e:	210a      	movs	r1, #10
   22b90:	f010 be70 	b.w	33874 <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   22b94:	2000      	movs	r0, #0
   22b96:	4770      	bx	lr
   22b98:	200167b0 	.word	0x200167b0

00022b9c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   22b9c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   22b9e:	f7f2 f967 	bl	14e70 <z_impl_log_panic>
   22ba2:	4b06      	ldr	r3, [pc, #24]	; (22bbc <k_sys_fatal_error_handler+0x20>)
   22ba4:	4906      	ldr	r1, [pc, #24]	; (22bc0 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   22ba6:	4807      	ldr	r0, [pc, #28]	; (22bc4 <k_sys_fatal_error_handler+0x28>)
   22ba8:	1ac9      	subs	r1, r1, r3
   22baa:	08c9      	lsrs	r1, r1, #3
   22bac:	0189      	lsls	r1, r1, #6
   22bae:	f041 0101 	orr.w	r1, r1, #1
   22bb2:	f00b fc1d 	bl	2e3f0 <log_0>
		sys_arch_reboot(0);
   22bb6:	2000      	movs	r0, #0
   22bb8:	f7f4 fcca 	bl	17550 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   22bbc:	000364b0 	.word	0x000364b0
   22bc0:	00036540 	.word	0x00036540
   22bc4:	0003c8c6 	.word	0x0003c8c6

00022bc8 <write_at_cmd_with_cme_enabled>:
	return err;
}

static int write_at_cmd_with_cme_enabled(char *cmd, char *buf, size_t buf_len,
					 enum at_cmd_state *state)
{
   22bc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   22bcc:	4605      	mov	r5, r0
   22bce:	460e      	mov	r6, r1
   22bd0:	4617      	mov	r7, r2
   22bd2:	4698      	mov	r8, r3
	err = at_cmd_write("AT+CMEE?", response, sizeof(response), NULL);
   22bd4:	220b      	movs	r2, #11
   22bd6:	2300      	movs	r3, #0
   22bd8:	4813      	ldr	r0, [pc, #76]	; (22c28 <write_at_cmd_with_cme_enabled+0x60>)
   22bda:	a901      	add	r1, sp, #4
   22bdc:	f7fd fe72 	bl	208c4 <at_cmd_write>
	if (err) {
   22be0:	1e04      	subs	r4, r0, #0
   22be2:	d11d      	bne.n	22c20 <write_at_cmd_with_cme_enabled+0x58>
	return (response[CMEE_STATUS] == '1');
   22be4:	f89d 300b 	ldrb.w	r3, [sp, #11]

	if (cmee_was_active < 0) {
		return -EFAULT;
	}

	if (!cmee_was_active) {
   22be8:	2b31      	cmp	r3, #49	; 0x31
   22bea:	d017      	beq.n	22c1c <write_at_cmd_with_cme_enabled+0x54>
	return at_cmd_write("AT+CMEE=1", NULL, 0, NULL);
   22bec:	4623      	mov	r3, r4
   22bee:	4622      	mov	r2, r4
   22bf0:	4621      	mov	r1, r4
   22bf2:	480e      	ldr	r0, [pc, #56]	; (22c2c <write_at_cmd_with_cme_enabled+0x64>)
   22bf4:	f7fd fe66 	bl	208c4 <at_cmd_write>
		cmee_enable();
	}

	err = at_cmd_write(cmd, buf, buf_len, state);
   22bf8:	4628      	mov	r0, r5
   22bfa:	4643      	mov	r3, r8
   22bfc:	463a      	mov	r2, r7
   22bfe:	4631      	mov	r1, r6
   22c00:	f7fd fe60 	bl	208c4 <at_cmd_write>
   22c04:	4605      	mov	r5, r0

	if (!cmee_was_active) {
   22c06:	b92c      	cbnz	r4, 22c14 <write_at_cmd_with_cme_enabled+0x4c>
	return at_cmd_write("AT+CMEE=0", NULL, 0, NULL);
   22c08:	4623      	mov	r3, r4
   22c0a:	4622      	mov	r2, r4
   22c0c:	4621      	mov	r1, r4
   22c0e:	4808      	ldr	r0, [pc, #32]	; (22c30 <write_at_cmd_with_cme_enabled+0x68>)
   22c10:	f7fd fe58 	bl	208c4 <at_cmd_write>
		cmee_disable();
	}

	return err;
}
   22c14:	4628      	mov	r0, r5
   22c16:	b004      	add	sp, #16
   22c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (response[CMEE_STATUS] == '1');
   22c1c:	2401      	movs	r4, #1
   22c1e:	e7eb      	b.n	22bf8 <write_at_cmd_with_cme_enabled+0x30>
	if (cmee_was_active < 0) {
   22c20:	daea      	bge.n	22bf8 <write_at_cmd_with_cme_enabled+0x30>
		return -EFAULT;
   22c22:	f06f 050d 	mvn.w	r5, #13
   22c26:	e7f5      	b.n	22c14 <write_at_cmd_with_cme_enabled+0x4c>
   22c28:	0003c8e3 	.word	0x0003c8e3
   22c2c:	0003c8ec 	.word	0x0003c8ec
   22c30:	0003c8f6 	.word	0x0003c8f6

00022c34 <translate_error>:
{
   22c34:	b510      	push	{r4, lr}
	if ((err > 0) && (state == AT_CMD_ERROR_CME)) {
   22c36:	1e04      	subs	r4, r0, #0
   22c38:	dd0d      	ble.n	22c56 <translate_error+0x22>
   22c3a:	2903      	cmp	r1, #3
   22c3c:	d10b      	bne.n	22c56 <translate_error+0x22>
		switch (err) {
   22c3e:	f46f 7300 	mvn.w	r3, #512	; 0x200
   22c42:	18e3      	adds	r3, r4, r3
   22c44:	2b05      	cmp	r3, #5
   22c46:	d80e      	bhi.n	22c66 <translate_error+0x32>
   22c48:	e8df f003 	tbb	[pc, r3]
   22c4c:	0d07031d 	.word	0x0d07031d
   22c50:	0a0d      	.short	0x0a0d
			return -EPERM;
   22c52:	f04f 34ff 	mov.w	r4, #4294967295
}
   22c56:	4620      	mov	r0, r4
   22c58:	bd10      	pop	{r4, pc}
			return -ENOMEM;
   22c5a:	f06f 040b 	mvn.w	r4, #11
   22c5e:	e7fa      	b.n	22c56 <translate_error+0x22>
			return -EACCES;
   22c60:	f06f 040c 	mvn.w	r4, #12
   22c64:	e7f7      	b.n	22c56 <translate_error+0x22>
			__ASSERT(false, "Untranslated CME error %d!", err);
   22c66:	234a      	movs	r3, #74	; 0x4a
   22c68:	4a08      	ldr	r2, [pc, #32]	; (22c8c <translate_error+0x58>)
   22c6a:	4909      	ldr	r1, [pc, #36]	; (22c90 <translate_error+0x5c>)
   22c6c:	4809      	ldr	r0, [pc, #36]	; (22c94 <translate_error+0x60>)
   22c6e:	f00b f88b 	bl	2dd88 <printk>
   22c72:	4621      	mov	r1, r4
   22c74:	4808      	ldr	r0, [pc, #32]	; (22c98 <translate_error+0x64>)
   22c76:	f00b f887 	bl	2dd88 <printk>
   22c7a:	214a      	movs	r1, #74	; 0x4a
   22c7c:	4803      	ldr	r0, [pc, #12]	; (22c8c <translate_error+0x58>)
   22c7e:	f00b fb69 	bl	2e354 <assert_post_action>
   22c82:	4c06      	ldr	r4, [pc, #24]	; (22c9c <translate_error+0x68>)
   22c84:	e7e7      	b.n	22c56 <translate_error+0x22>
	if ((err > 0) && (state == AT_CMD_ERROR_CME)) {
   22c86:	f06f 0401 	mvn.w	r4, #1
   22c8a:	e7e4      	b.n	22c56 <translate_error+0x22>
   22c8c:	0003c900 	.word	0x0003c900
   22c90:	0003e845 	.word	0x0003e845
   22c94:	00037f2c 	.word	0x00037f2c
   22c98:	0003c934 	.word	0x0003c934
   22c9c:	baadbaad 	.word	0xbaadbaad

00022ca0 <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   22ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	int written;
	enum at_cmd_state state;

	if (buf == NULL || len == 0) {
   22ca2:	b1e2      	cbz	r2, 22cde <modem_key_mgmt_write+0x3e>
   22ca4:	b1db      	cbz	r3, 22cde <modem_key_mgmt_write+0x3e>
		return -EINVAL;
	}

	written = snprintf(scratch_buf, sizeof(scratch_buf),
   22ca6:	e9cd 3202 	strd	r3, r2, [sp, #8]
   22caa:	e9cd 0100 	strd	r0, r1, [sp]
   22cae:	4b0f      	ldr	r3, [pc, #60]	; (22cec <modem_key_mgmt_write+0x4c>)
   22cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   22cb4:	4a0e      	ldr	r2, [pc, #56]	; (22cf0 <modem_key_mgmt_write+0x50>)
   22cb6:	480f      	ldr	r0, [pc, #60]	; (22cf4 <modem_key_mgmt_write+0x54>)
   22cb8:	f00a fab8 	bl	2d22c <sniprintf>
			   "%s,%d,%d,\"%.*s\"", MODEM_KEY_MGMT_OP_WR, sec_tag,
			   cred_type, len, (const char *)buf);

	if (written < 0 || written >= sizeof(scratch_buf)) {
   22cbc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   22cc0:	d210      	bcs.n	22ce4 <modem_key_mgmt_write+0x44>
		return -ENOBUFS;
	}

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   22cc2:	2200      	movs	r2, #0
   22cc4:	480b      	ldr	r0, [pc, #44]	; (22cf4 <modem_key_mgmt_write+0x54>)
   22cc6:	4611      	mov	r1, r2
   22cc8:	f10d 0317 	add.w	r3, sp, #23
   22ccc:	f7ff ff7c 	bl	22bc8 <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   22cd0:	f89d 1017 	ldrb.w	r1, [sp, #23]
   22cd4:	f7ff ffae 	bl	22c34 <translate_error>
}
   22cd8:	b007      	add	sp, #28
   22cda:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   22cde:	f06f 0015 	mvn.w	r0, #21
   22ce2:	e7f9      	b.n	22cd8 <modem_key_mgmt_write+0x38>
		return -ENOBUFS;
   22ce4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22ce8:	e7f6      	b.n	22cd8 <modem_key_mgmt_write+0x38>
   22cea:	bf00      	nop
   22cec:	0003c964 	.word	0x0003c964
   22cf0:	0003c96e 	.word	0x0003c96e
   22cf4:	2001d4fa 	.word	0x2001d4fa

00022cf8 <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   22cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	int written;
	enum at_cmd_state state;

	written = snprintf(scratch_buf, sizeof(scratch_buf), "%s,%d,%d",
   22cfa:	4c0b      	ldr	r4, [pc, #44]	; (22d28 <modem_key_mgmt_delete+0x30>)
   22cfc:	e9cd 0100 	strd	r0, r1, [sp]
   22d00:	4b0a      	ldr	r3, [pc, #40]	; (22d2c <modem_key_mgmt_delete+0x34>)
   22d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   22d06:	4620      	mov	r0, r4
   22d08:	4a09      	ldr	r2, [pc, #36]	; (22d30 <modem_key_mgmt_delete+0x38>)
   22d0a:	f00a fa8f 	bl	2d22c <sniprintf>

	if (written < 0 || written >= sizeof(scratch_buf)) {
		return -ENOBUFS;
	}

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   22d0e:	2200      	movs	r2, #0
   22d10:	f10d 030f 	add.w	r3, sp, #15
   22d14:	4611      	mov	r1, r2
   22d16:	4620      	mov	r0, r4
   22d18:	f7ff ff56 	bl	22bc8 <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   22d1c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   22d20:	f7ff ff88 	bl	22c34 <translate_error>
}
   22d24:	b004      	add	sp, #16
   22d26:	bd10      	pop	{r4, pc}
   22d28:	2001d4fa 	.word	0x2001d4fa
   22d2c:	0003c97e 	.word	0x0003c97e
   22d30:	0003c95b 	.word	0x0003c95b

00022d34 <date_time_init>:
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   22d34:	b510      	push	{r4, lr}
	k_work_init_delayable(&time_work, date_time_handler);
   22d36:	4c06      	ldr	r4, [pc, #24]	; (22d50 <date_time_init+0x1c>)
   22d38:	4906      	ldr	r1, [pc, #24]	; (22d54 <date_time_init+0x20>)
   22d3a:	4620      	mov	r0, r4
   22d3c:	f007 f9e8 	bl	2a110 <k_work_init_delayable>
	k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   22d40:	2200      	movs	r2, #0
   22d42:	2300      	movs	r3, #0
   22d44:	4620      	mov	r0, r4
   22d46:	f007 fa8b 	bl	2a260 <k_work_schedule>

	return 0;
}
   22d4a:	2000      	movs	r0, #0
   22d4c:	bd10      	pop	{r4, pc}
   22d4e:	bf00      	nop
   22d50:	20015ca8 	.word	0x20015ca8
   22d54:	00033ba1 	.word	0x00033ba1

00022d58 <date_time_notify_event.constprop.0>:
	if (app_evt_handler != NULL) {
   22d58:	4b02      	ldr	r3, [pc, #8]	; (22d64 <date_time_notify_event.constprop.0+0xc>)
   22d5a:	681b      	ldr	r3, [r3, #0]
   22d5c:	b10b      	cbz	r3, 22d62 <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   22d5e:	4802      	ldr	r0, [pc, #8]	; (22d68 <date_time_notify_event.constprop.0+0x10>)
   22d60:	4718      	bx	r3
}
   22d62:	4770      	bx	lr
   22d64:	200167b8 	.word	0x200167b8
   22d68:	2001e4fa 	.word	0x2001e4fa

00022d6c <new_date_time_get>:
{
   22d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   22d70:	f8df 8370 	ldr.w	r8, [pc, #880]	; 230e4 <new_date_time_get+0x378>
   22d74:	4bb5      	ldr	r3, [pc, #724]	; (2304c <new_date_time_get+0x2e0>)
   22d76:	46c1      	mov	r9, r8
   22d78:	4ab5      	ldr	r2, [pc, #724]	; (23050 <new_date_time_get+0x2e4>)
{
   22d7a:	b099      	sub	sp, #100	; 0x64
   22d7c:	1a9b      	subs	r3, r3, r2
   22d7e:	08db      	lsrs	r3, r3, #3
   22d80:	9302      	str	r3, [sp, #8]
   22d82:	f04f 32ff 	mov.w	r2, #4294967295
   22d86:	f04f 33ff 	mov.w	r3, #4294967295
   22d8a:	48b2      	ldr	r0, [pc, #712]	; (23054 <new_date_time_get+0x2e8>)
   22d8c:	f006 fe2c 	bl	299e8 <z_impl_k_sem_take>
		LOG_DBG("Updating date time UTC...");
   22d90:	9b02      	ldr	r3, [sp, #8]
   22d92:	49b1      	ldr	r1, [pc, #708]	; (23058 <new_date_time_get+0x2ec>)
   22d94:	019c      	lsls	r4, r3, #6
   22d96:	f044 0504 	orr.w	r5, r4, #4
   22d9a:	462a      	mov	r2, r5
   22d9c:	48af      	ldr	r0, [pc, #700]	; (2305c <new_date_time_get+0x2f0>)
   22d9e:	f00b fb34 	bl	2e40a <log_1>
	if (time_aux.last_date_time_update == 0 ||
   22da2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22da6:	b11b      	cbz	r3, 22db0 <new_date_time_get+0x44>
   22da8:	e9d8 2300 	ldrd	r2, r3, [r8]
   22dac:	4313      	orrs	r3, r2
   22dae:	d17a      	bne.n	22ea6 <new_date_time_get+0x13a>
		LOG_DBG("Date time never set");
   22db0:	49ab      	ldr	r1, [pc, #684]	; (23060 <new_date_time_get+0x2f4>)
   22db2:	48ac      	ldr	r0, [pc, #688]	; (23064 <new_date_time_get+0x2f8>)
   22db4:	f044 0204 	orr.w	r2, r4, #4
		LOG_DBG("Current time not valid");
   22db8:	f044 0504 	orr.w	r5, r4, #4
		LOG_DBG("Current date time too old");
   22dbc:	f00b fb25 	bl	2e40a <log_1>
		LOG_DBG("Current time not valid");
   22dc0:	462a      	mov	r2, r5
   22dc2:	49a5      	ldr	r1, [pc, #660]	; (23058 <new_date_time_get+0x2ec>)
   22dc4:	48a8      	ldr	r0, [pc, #672]	; (23068 <new_date_time_get+0x2fc>)
   22dc6:	f00b fb20 	bl	2e40a <log_1>
		LOG_DBG("Fallback on NTP server");
   22dca:	462a      	mov	r2, r5
   22dcc:	49a2      	ldr	r1, [pc, #648]	; (23058 <new_date_time_get+0x2ec>)
   22dce:	48a7      	ldr	r0, [pc, #668]	; (2306c <new_date_time_get+0x300>)
   22dd0:	f00b fb1b 	bl	2e40a <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   22dd4:	2700      	movs	r7, #0
   22dd6:	4da6      	ldr	r5, [pc, #664]	; (23070 <new_date_time_get+0x304>)
		hints.ai_family = AF_INET;
   22dd8:	f8df a30c 	ldr.w	sl, [pc, #780]	; 230e8 <new_date_time_get+0x37c>
	hints.ai_socktype = SOCK_DGRAM;
   22ddc:	2302      	movs	r3, #2
   22dde:	2201      	movs	r2, #1
   22de0:	e9ca 2302 	strd	r2, r3, [sl, #8]
	hints.ai_protocol = 0;
   22de4:	2300      	movs	r3, #0
   22de6:	f8ca 3010 	str.w	r3, [sl, #16]
	if (server->addrlen == 0) {
   22dea:	69ab      	ldr	r3, [r5, #24]
   22dec:	2b00      	cmp	r3, #0
   22dee:	f040 80c9 	bne.w	22f84 <new_date_time_get+0x218>
	return zsock_getaddrinfo(host, service, hints, res);
   22df2:	4652      	mov	r2, sl
   22df4:	499f      	ldr	r1, [pc, #636]	; (23074 <new_date_time_get+0x308>)
   22df6:	f855 0c04 	ldr.w	r0, [r5, #-4]
   22dfa:	ab06      	add	r3, sp, #24
   22dfc:	f00b fd9d 	bl	2e93a <zsock_getaddrinfo>
		if (err) {
   22e00:	4683      	mov	fp, r0
   22e02:	2800      	cmp	r0, #0
   22e04:	d066      	beq.n	22ed4 <new_date_time_get+0x168>
			LOG_WRN("getaddrinfo, error: %d", err);
   22e06:	4601      	mov	r1, r0
   22e08:	f044 0202 	orr.w	r2, r4, #2
   22e0c:	489a      	ldr	r0, [pc, #616]	; (23078 <new_date_time_get+0x30c>)
   22e0e:	f00b fafc 	bl	2e40a <log_1>
   22e12:	f855 0c04 	ldr.w	r0, [r5, #-4]
			LOG_DBG("Not getting time from NTP server %s, error %d",
   22e16:	f8ad 400c 	strh.w	r4, [sp, #12]
   22e1a:	f7f1 fe9b 	bl	14b54 <z_log_strdup>
   22e1e:	f044 0604 	orr.w	r6, r4, #4
   22e22:	4602      	mov	r2, r0
   22e24:	465b      	mov	r3, fp
   22e26:	4995      	ldr	r1, [pc, #596]	; (2307c <new_date_time_get+0x310>)
   22e28:	4895      	ldr	r0, [pc, #596]	; (23080 <new_date_time_get+0x314>)
   22e2a:	f8ad 6000 	strh.w	r6, [sp]
   22e2e:	f00b fb19 	bl	2e464 <log_3>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   22e32:	3701      	adds	r7, #1
			LOG_DBG("Trying another address...");
   22e34:	4632      	mov	r2, r6
   22e36:	4991      	ldr	r1, [pc, #580]	; (2307c <new_date_time_get+0x310>)
   22e38:	4892      	ldr	r0, [pc, #584]	; (23084 <new_date_time_get+0x318>)
   22e3a:	f00b fae6 	bl	2e40a <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   22e3e:	2f05      	cmp	r7, #5
   22e40:	f105 0520 	add.w	r5, r5, #32
   22e44:	d1ca      	bne.n	22ddc <new_date_time_get+0x70>
	LOG_WRN("Not getting time from any NTP server");
   22e46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   22e4a:	488f      	ldr	r0, [pc, #572]	; (23088 <new_date_time_get+0x31c>)
   22e4c:	f043 0102 	orr.w	r1, r3, #2
   22e50:	f00b face 	bl	2e3f0 <log_0>
		LOG_DBG("Not getting time from NTP server");
   22e54:	4632      	mov	r2, r6
   22e56:	4980      	ldr	r1, [pc, #512]	; (23058 <new_date_time_get+0x2ec>)
   22e58:	488c      	ldr	r0, [pc, #560]	; (2308c <new_date_time_get+0x320>)
   22e5a:	f00b fad6 	bl	2e40a <log_1>
		LOG_DBG("Fallback on cellular network time");
   22e5e:	4632      	mov	r2, r6
   22e60:	497d      	ldr	r1, [pc, #500]	; (23058 <new_date_time_get+0x2ec>)
   22e62:	488b      	ldr	r0, [pc, #556]	; (23090 <new_date_time_get+0x324>)
   22e64:	f00b fad1 	bl	2e40a <log_1>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   22e68:	2300      	movs	r3, #0
   22e6a:	2221      	movs	r2, #33	; 0x21
   22e6c:	4889      	ldr	r0, [pc, #548]	; (23094 <new_date_time_get+0x328>)
   22e6e:	a906      	add	r1, sp, #24
   22e70:	f7fd fd28 	bl	208c4 <at_cmd_write>
	if (err) {
   22e74:	4605      	mov	r5, r0
   22e76:	2800      	cmp	r0, #0
   22e78:	f000 8099 	beq.w	22fae <new_date_time_get+0x242>
		LOG_DBG("Could not get cellular network time, error: %d", err);
   22e7c:	4602      	mov	r2, r0
   22e7e:	4633      	mov	r3, r6
   22e80:	4985      	ldr	r1, [pc, #532]	; (23098 <new_date_time_get+0x32c>)
   22e82:	4886      	ldr	r0, [pc, #536]	; (2309c <new_date_time_get+0x330>)
   22e84:	f00b fad5 	bl	2e432 <log_2>
		LOG_DBG("Not getting cellular network time");
   22e88:	f044 0404 	orr.w	r4, r4, #4
   22e8c:	4622      	mov	r2, r4
   22e8e:	4972      	ldr	r1, [pc, #456]	; (23058 <new_date_time_get+0x2ec>)
   22e90:	4883      	ldr	r0, [pc, #524]	; (230a0 <new_date_time_get+0x334>)
   22e92:	f00b faba 	bl	2e40a <log_1>
		LOG_DBG("Not getting time from any time source");
   22e96:	4622      	mov	r2, r4
   22e98:	496f      	ldr	r1, [pc, #444]	; (23058 <new_date_time_get+0x2ec>)
   22e9a:	4882      	ldr	r0, [pc, #520]	; (230a4 <new_date_time_get+0x338>)
   22e9c:	f00b fab5 	bl	2e40a <log_1>
		evt.type = DATE_TIME_NOT_OBTAINED;
   22ea0:	2203      	movs	r2, #3
   22ea2:	4b81      	ldr	r3, [pc, #516]	; (230a8 <new_date_time_get+0x33c>)
   22ea4:	e014      	b.n	22ed0 <new_date_time_get+0x164>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   22ea6:	f010 fe7c 	bl	33ba2 <k_uptime_get>
   22eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
		LOG_DBG("Current date time too old");
   22eae:	462a      	mov	r2, r5
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   22eb0:	1ac0      	subs	r0, r0, r3
   22eb2:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   22eb6:	2801      	cmp	r0, #1
   22eb8:	f171 0300 	sbcs.w	r3, r1, #0
   22ebc:	db02      	blt.n	22ec4 <new_date_time_get+0x158>
		LOG_DBG("Current date time too old");
   22ebe:	4968      	ldr	r1, [pc, #416]	; (23060 <new_date_time_get+0x2f4>)
   22ec0:	487a      	ldr	r0, [pc, #488]	; (230ac <new_date_time_get+0x340>)
   22ec2:	e779      	b.n	22db8 <new_date_time_get+0x4c>
			LOG_DBG("Time successfully obtained");
   22ec4:	4964      	ldr	r1, [pc, #400]	; (23058 <new_date_time_get+0x2ec>)
   22ec6:	487a      	ldr	r0, [pc, #488]	; (230b0 <new_date_time_get+0x344>)
   22ec8:	f00b fa9f 	bl	2e40a <log_1>
			initial_valid_time = true;
   22ecc:	2201      	movs	r2, #1
   22ece:	4b79      	ldr	r3, [pc, #484]	; (230b4 <new_date_time_get+0x348>)
		evt.type = DATE_TIME_NOT_OBTAINED;
   22ed0:	701a      	strb	r2, [r3, #0]
   22ed2:	e054      	b.n	22f7e <new_date_time_get+0x212>
		if (addrinfo->ai_addrlen > sizeof(server->addr)) {
   22ed4:	9e06      	ldr	r6, [sp, #24]
   22ed6:	6971      	ldr	r1, [r6, #20]
   22ed8:	2918      	cmp	r1, #24
   22eda:	d90b      	bls.n	22ef4 <new_date_time_get+0x188>
			LOG_WRN("getaddrinfo, addrlen: %d > %d",
   22edc:	2218      	movs	r2, #24
   22ede:	4876      	ldr	r0, [pc, #472]	; (230b8 <new_date_time_get+0x34c>)
   22ee0:	f044 0302 	orr.w	r3, r4, #2
   22ee4:	f00b faa5 	bl	2e432 <log_2>
	zsock_freeaddrinfo(ai);
   22ee8:	9806      	ldr	r0, [sp, #24]
   22eea:	f00b fd28 	bl	2e93e <zsock_freeaddrinfo>
			return -ENOMEM;
   22eee:	f06f 0b0b 	mvn.w	fp, #11
   22ef2:	e78e      	b.n	22e12 <new_date_time_get+0xa6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22ef4:	460a      	mov	r2, r1
   22ef6:	4628      	mov	r0, r5
   22ef8:	69b1      	ldr	r1, [r6, #24]
   22efa:	f012 fb44 	bl	35586 <memcpy>
		server->addrlen = addrinfo->ai_addrlen;
   22efe:	6973      	ldr	r3, [r6, #20]
   22f00:	4630      	mov	r0, r6
   22f02:	61ab      	str	r3, [r5, #24]
   22f04:	f00b fd1b 	bl	2e93e <zsock_freeaddrinfo>
	err = sntp_init(&sntp_ctx, &server->addr, server->addrlen);
   22f08:	4629      	mov	r1, r5
   22f0a:	69aa      	ldr	r2, [r5, #24]
   22f0c:	a80f      	add	r0, sp, #60	; 0x3c
   22f0e:	f00b fce0 	bl	2e8d2 <sntp_init>
	if (err) {
   22f12:	4683      	mov	fp, r0
   22f14:	2800      	cmp	r0, #0
   22f16:	d03c      	beq.n	22f92 <new_date_time_get+0x226>
		LOG_WRN("sntp_init, error: %d", err);
   22f18:	4601      	mov	r1, r0
   22f1a:	4868      	ldr	r0, [pc, #416]	; (230bc <new_date_time_get+0x350>)
   22f1c:	f044 0202 	orr.w	r2, r4, #2
		LOG_WRN("sntp_query, error: %d", err);
   22f20:	f00b fa73 	bl	2e40a <log_1>
	sntp_close(&sntp_ctx);
   22f24:	a80f      	add	r0, sp, #60	; 0x3c
   22f26:	f00b fd03 	bl	2e930 <sntp_close>
		if (err) {
   22f2a:	f1bb 0f00 	cmp.w	fp, #0
   22f2e:	f47f af70 	bne.w	22e12 <new_date_time_get+0xa6>
   22f32:	4b63      	ldr	r3, [pc, #396]	; (230c0 <new_date_time_get+0x354>)
		LOG_DBG("Got time response from NTP server %s",
   22f34:	017f      	lsls	r7, r7, #5
   22f36:	59d8      	ldr	r0, [r3, r7]
   22f38:	f7f1 fe0c 	bl	14b54 <z_log_strdup>
   22f3c:	f044 0404 	orr.w	r4, r4, #4
   22f40:	4602      	mov	r2, r0
   22f42:	4623      	mov	r3, r4
   22f44:	494d      	ldr	r1, [pc, #308]	; (2307c <new_date_time_get+0x310>)
   22f46:	485f      	ldr	r0, [pc, #380]	; (230c4 <new_date_time_get+0x358>)
   22f48:	f00b fa73 	bl	2e432 <log_2>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   22f4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   22f50:	4b5d      	ldr	r3, [pc, #372]	; (230c8 <new_date_time_get+0x35c>)
   22f52:	681a      	ldr	r2, [r3, #0]
   22f54:	6858      	ldr	r0, [r3, #4]
   22f56:	fba2 2301 	umull	r2, r3, r2, r1
   22f5a:	fb01 3300 	mla	r3, r1, r0, r3
   22f5e:	e9c9 2300 	strd	r2, r3, [r9]
		time_aux.last_date_time_update = k_uptime_get();
   22f62:	f010 fe1e 	bl	33ba2 <k_uptime_get>
			LOG_DBG("Time from NTP server obtained");
   22f66:	4622      	mov	r2, r4
		time_aux.last_date_time_update = k_uptime_get();
   22f68:	f8c9 0008 	str.w	r0, [r9, #8]
			LOG_DBG("Time from NTP server obtained");
   22f6c:	493a      	ldr	r1, [pc, #232]	; (23058 <new_date_time_get+0x2ec>)
   22f6e:	4857      	ldr	r0, [pc, #348]	; (230cc <new_date_time_get+0x360>)
   22f70:	f00b fa4b 	bl	2e40a <log_1>
			initial_valid_time = true;
   22f74:	2301      	movs	r3, #1
   22f76:	4a4f      	ldr	r2, [pc, #316]	; (230b4 <new_date_time_get+0x348>)
   22f78:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   22f7a:	4a4b      	ldr	r2, [pc, #300]	; (230a8 <new_date_time_get+0x33c>)
   22f7c:	7013      	strb	r3, [r2, #0]
		date_time_notify_event(&evt);
   22f7e:	f7ff feeb 	bl	22d58 <date_time_notify_event.constprop.0>
   22f82:	e6fe      	b.n	22d82 <new_date_time_get+0x16>
		LOG_DBG("Server address already obtained, skipping DNS lookup");
   22f84:	4952      	ldr	r1, [pc, #328]	; (230d0 <new_date_time_get+0x364>)
   22f86:	4853      	ldr	r0, [pc, #332]	; (230d4 <new_date_time_get+0x368>)
   22f88:	f044 0204 	orr.w	r2, r4, #4
   22f8c:	f00b fa3d 	bl	2e40a <log_1>
   22f90:	e7ba      	b.n	22f08 <new_date_time_get+0x19c>
	err = sntp_query(&sntp_ctx, timeout, time);
   22f92:	f241 3188 	movw	r1, #5000	; 0x1388
   22f96:	4a4c      	ldr	r2, [pc, #304]	; (230c8 <new_date_time_get+0x35c>)
   22f98:	a80f      	add	r0, sp, #60	; 0x3c
   22f9a:	f7ee fab9 	bl	11510 <sntp_query>
	if (err) {
   22f9e:	4683      	mov	fp, r0
   22fa0:	2800      	cmp	r0, #0
   22fa2:	d0bf      	beq.n	22f24 <new_date_time_get+0x1b8>
		LOG_WRN("sntp_query, error: %d", err);
   22fa4:	4601      	mov	r1, r0
   22fa6:	f044 0202 	orr.w	r2, r4, #2
   22faa:	484b      	ldr	r0, [pc, #300]	; (230d8 <new_date_time_get+0x36c>)
   22fac:	e7b8      	b.n	22f20 <new_date_time_get+0x1b4>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   22fae:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   22fb2:	a806      	add	r0, sp, #24
   22fb4:	f7f1 fdce 	bl	14b54 <z_log_strdup>
	LOG_DBG("Response from modem: %s", log_strdup(buf));
   22fb8:	4937      	ldr	r1, [pc, #220]	; (23098 <new_date_time_get+0x32c>)
   22fba:	4602      	mov	r2, r0
   22fbc:	4633      	mov	r3, r6
   22fbe:	4847      	ldr	r0, [pc, #284]	; (230dc <new_date_time_get+0x370>)
   22fc0:	f00b fa37 	bl	2e432 <log_2>
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   22fc4:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   22fc8:	2020      	movs	r0, #32
   22fca:	aa06      	add	r2, sp, #24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   22fcc:	f812 3b01 	ldrb.w	r3, [r2], #1
   22fd0:	3b2c      	subs	r3, #44	; 0x2c
   22fd2:	b2db      	uxtb	r3, r3
   22fd4:	2b0e      	cmp	r3, #14
   22fd6:	d805      	bhi.n	22fe4 <new_date_time_get+0x278>
   22fd8:	fa21 f303 	lsr.w	r3, r1, r3
   22fdc:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   22fde:	bf48      	it	mi
   22fe0:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   22fe4:	3501      	adds	r5, #1
   22fe6:	2d20      	cmp	r5, #32
   22fe8:	d1f0      	bne.n	22fcc <new_date_time_get+0x260>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   22fea:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   22fec:	a808      	add	r0, sp, #32
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   22fee:	a905      	add	r1, sp, #20
	char *ptr_index = &buf[8];
   22ff0:	9005      	str	r0, [sp, #20]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   22ff2:	f00a fbb7 	bl	2d764 <strtol>
   22ff6:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   22ff8:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   22ffa:	9014      	str	r0, [sp, #80]	; 0x50
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   22ffc:	a905      	add	r1, sp, #20
   22ffe:	9805      	ldr	r0, [sp, #20]
   23000:	f00a fbb0 	bl	2d764 <strtol>
   23004:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   23006:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   23008:	9013      	str	r0, [sp, #76]	; 0x4c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2300a:	a905      	add	r1, sp, #20
   2300c:	9805      	ldr	r0, [sp, #20]
   2300e:	f00a fba9 	bl	2d764 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   23012:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   23014:	9012      	str	r0, [sp, #72]	; 0x48
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   23016:	a905      	add	r1, sp, #20
   23018:	9805      	ldr	r0, [sp, #20]
   2301a:	f00a fba3 	bl	2d764 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2301e:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   23020:	9011      	str	r0, [sp, #68]	; 0x44
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   23022:	a905      	add	r1, sp, #20
   23024:	9805      	ldr	r0, [sp, #20]
   23026:	f00a fb9d 	bl	2d764 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2302a:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2302c:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2302e:	a905      	add	r1, sp, #20
   23030:	9805      	ldr	r0, [sp, #20]
   23032:	f00a fb97 	bl	2d764 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   23036:	9b14      	ldr	r3, [sp, #80]	; 0x50
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   23038:	900f      	str	r0, [sp, #60]	; 0x3c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2303a:	2b73      	cmp	r3, #115	; 0x73
   2303c:	d156      	bne.n	230ec <new_date_time_get+0x380>
		LOG_DBG("Modem time never set");
   2303e:	4916      	ldr	r1, [pc, #88]	; (23098 <new_date_time_get+0x32c>)
   23040:	4827      	ldr	r0, [pc, #156]	; (230e0 <new_date_time_get+0x374>)
   23042:	f044 0204 	orr.w	r2, r4, #4
   23046:	f00b f9e0 	bl	2e40a <log_1>
		if (err == 0) {
   2304a:	e71d      	b.n	22e88 <new_date_time_get+0x11c>
   2304c:	00036538 	.word	0x00036538
   23050:	000364b0 	.word	0x000364b0
   23054:	20014fe0 	.word	0x20014fe0
   23058:	0003cfc5 	.word	0x0003cfc5
   2305c:	0003c997 	.word	0x0003c997
   23060:	0003cfb2 	.word	0x0003cfb2
   23064:	0003c9b5 	.word	0x0003c9b5
   23068:	0003ca0a 	.word	0x0003ca0a
   2306c:	0003ca25 	.word	0x0003ca25
   23070:	20014918 	.word	0x20014918
   23074:	0003ca40 	.word	0x0003ca40
   23078:	0003ca44 	.word	0x0003ca44
   2307c:	0003cf9e 	.word	0x0003cf9e
   23080:	0003cadd 	.word	0x0003cadd
   23084:	0003cb0f 	.word	0x0003cb0f
   23088:	0003cb78 	.word	0x0003cb78
   2308c:	0003cb9d 	.word	0x0003cb9d
   23090:	0003cbc2 	.word	0x0003cbc2
   23094:	0003c76b 	.word	0x0003c76b
   23098:	0003cf7d 	.word	0x0003cf7d
   2309c:	0003cbe8 	.word	0x0003cbe8
   230a0:	0003cc78 	.word	0x0003cc78
   230a4:	0003cc9e 	.word	0x0003cc9e
   230a8:	2001e4fa 	.word	0x2001e4fa
   230ac:	0003c9cd 	.word	0x0003c9cd
   230b0:	0003c9eb 	.word	0x0003c9eb
   230b4:	2001e4fb 	.word	0x2001e4fb
   230b8:	0003ca5b 	.word	0x0003ca5b
   230bc:	0003cab2 	.word	0x0003cab2
   230c0:	20014914 	.word	0x20014914
   230c4:	0003cb2d 	.word	0x0003cb2d
   230c8:	20015c88 	.word	0x20015c88
   230cc:	0003cb56 	.word	0x0003cb56
   230d0:	0003cf8c 	.word	0x0003cf8c
   230d4:	0003ca79 	.word	0x0003ca79
   230d8:	0003cac7 	.word	0x0003cac7
   230dc:	0003cc1b 	.word	0x0003cc1b
   230e0:	0003cc37 	.word	0x0003cc37
   230e4:	20015c98 	.word	0x20015c98
   230e8:	200167bc 	.word	0x200167bc
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   230ec:	a80f      	add	r0, sp, #60	; 0x3c
   230ee:	f7f0 fc9d 	bl	13a2c <timeutil_timegm64>
   230f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   230f6:	460a      	mov	r2, r1
   230f8:	fba0 0103 	umull	r0, r1, r0, r3
   230fc:	fb03 1102 	mla	r1, r3, r2, r1
   23100:	e9c9 0100 	strd	r0, r1, [r9]
	time_aux.last_date_time_update = k_uptime_get();
   23104:	f010 fd4d 	bl	33ba2 <k_uptime_get>
			LOG_DBG("Time from cellular network obtained");
   23108:	f044 0204 	orr.w	r2, r4, #4
	time_aux.last_date_time_update = k_uptime_get();
   2310c:	f8c9 0008 	str.w	r0, [r9, #8]
			LOG_DBG("Time from cellular network obtained");
   23110:	4904      	ldr	r1, [pc, #16]	; (23124 <new_date_time_get+0x3b8>)
   23112:	4805      	ldr	r0, [pc, #20]	; (23128 <new_date_time_get+0x3bc>)
   23114:	f00b f979 	bl	2e40a <log_1>
			initial_valid_time = true;
   23118:	2201      	movs	r2, #1
   2311a:	4b04      	ldr	r3, [pc, #16]	; (2312c <new_date_time_get+0x3c0>)
   2311c:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   2311e:	2200      	movs	r2, #0
   23120:	4b03      	ldr	r3, [pc, #12]	; (23130 <new_date_time_get+0x3c4>)
   23122:	e6d5      	b.n	22ed0 <new_date_time_get+0x164>
   23124:	0003cfc5 	.word	0x0003cfc5
   23128:	0003cc50 	.word	0x0003cc50
   2312c:	2001e4fb 	.word	0x2001e4fb
   23130:	2001e4fa 	.word	0x2001e4fa

00023134 <date_time_uptime_to_unix_time_ms>:

	return 0;
}

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   23134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev;

	if (uptime == NULL) {
   23138:	4604      	mov	r4, r0
   2313a:	b960      	cbnz	r0, 23156 <date_time_uptime_to_unix_time_ms+0x22>
   2313c:	492a      	ldr	r1, [pc, #168]	; (231e8 <date_time_uptime_to_unix_time_ms+0xb4>)
   2313e:	4b2b      	ldr	r3, [pc, #172]	; (231ec <date_time_uptime_to_unix_time_ms+0xb8>)
		LOG_ERR("The passed in pointer cannot be NULL");
   23140:	482b      	ldr	r0, [pc, #172]	; (231f0 <date_time_uptime_to_unix_time_ms+0xbc>)
   23142:	1ac9      	subs	r1, r1, r3
   23144:	08c9      	lsrs	r1, r1, #3
   23146:	0189      	lsls	r1, r1, #6
   23148:	f041 0101 	orr.w	r1, r1, #1
   2314c:	f00b f950 	bl	2e3f0 <log_0>
	if (*uptime > time_aux.date_time_utc +
	    (k_uptime_get() - time_aux.last_date_time_update)) {
		LOG_WRN("Uptime to large or previously converted");
		LOG_WRN("Clear variable or set a new uptime");
		*uptime = uptime_prev;
		return -EINVAL;
   23150:	f06f 0015 	mvn.w	r0, #21
   23154:	e012      	b.n	2317c <date_time_uptime_to_unix_time_ms+0x48>
	uptime_prev = *uptime;
   23156:	6803      	ldr	r3, [r0, #0]
   23158:	9300      	str	r3, [sp, #0]
   2315a:	6843      	ldr	r3, [r0, #4]
   2315c:	9301      	str	r3, [sp, #4]
	if (!initial_valid_time) {
   2315e:	4b25      	ldr	r3, [pc, #148]	; (231f4 <date_time_uptime_to_unix_time_ms+0xc0>)
   23160:	781b      	ldrb	r3, [r3, #0]
   23162:	b973      	cbnz	r3, 23182 <date_time_uptime_to_unix_time_ms+0x4e>
   23164:	4b21      	ldr	r3, [pc, #132]	; (231ec <date_time_uptime_to_unix_time_ms+0xb8>)
   23166:	4920      	ldr	r1, [pc, #128]	; (231e8 <date_time_uptime_to_unix_time_ms+0xb4>)
		LOG_WRN("Valid time not currently available");
   23168:	4823      	ldr	r0, [pc, #140]	; (231f8 <date_time_uptime_to_unix_time_ms+0xc4>)
   2316a:	1ac9      	subs	r1, r1, r3
   2316c:	08c9      	lsrs	r1, r1, #3
   2316e:	0189      	lsls	r1, r1, #6
   23170:	f041 0102 	orr.w	r1, r1, #2
   23174:	f00b f93c 	bl	2e3f0 <log_0>
		return -ENODATA;
   23178:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   2317c:	b003      	add	sp, #12
   2317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   23182:	4d1e      	ldr	r5, [pc, #120]	; (231fc <date_time_uptime_to_unix_time_ms+0xc8>)
   23184:	68a9      	ldr	r1, [r5, #8]
   23186:	e9d5 6700 	ldrd	r6, r7, [r5]
   2318a:	1a72      	subs	r2, r6, r1
   2318c:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   23190:	9900      	ldr	r1, [sp, #0]
   23192:	eb12 0801 	adds.w	r8, r2, r1
   23196:	9901      	ldr	r1, [sp, #4]
   23198:	eb43 0901 	adc.w	r9, r3, r1
   2319c:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   231a0:	f010 fcff 	bl	33ba2 <k_uptime_get>
   231a4:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   231a6:	1af6      	subs	r6, r6, r3
   231a8:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   231ac:	eb16 0a00 	adds.w	sl, r6, r0
   231b0:	eb47 0b01 	adc.w	fp, r7, r1
   231b4:	45c2      	cmp	sl, r8
   231b6:	eb7b 0309 	sbcs.w	r3, fp, r9
   231ba:	da13      	bge.n	231e4 <date_time_uptime_to_unix_time_ms+0xb0>
   231bc:	4b0b      	ldr	r3, [pc, #44]	; (231ec <date_time_uptime_to_unix_time_ms+0xb8>)
   231be:	4d0a      	ldr	r5, [pc, #40]	; (231e8 <date_time_uptime_to_unix_time_ms+0xb4>)
		LOG_WRN("Uptime to large or previously converted");
   231c0:	480f      	ldr	r0, [pc, #60]	; (23200 <date_time_uptime_to_unix_time_ms+0xcc>)
   231c2:	1aed      	subs	r5, r5, r3
   231c4:	08ed      	lsrs	r5, r5, #3
   231c6:	01ad      	lsls	r5, r5, #6
   231c8:	f045 0502 	orr.w	r5, r5, #2
   231cc:	4629      	mov	r1, r5
   231ce:	f00b f90f 	bl	2e3f0 <log_0>
		LOG_WRN("Clear variable or set a new uptime");
   231d2:	4629      	mov	r1, r5
   231d4:	480b      	ldr	r0, [pc, #44]	; (23204 <date_time_uptime_to_unix_time_ms+0xd0>)
   231d6:	f00b f90b 	bl	2e3f0 <log_0>
		*uptime = uptime_prev;
   231da:	9b00      	ldr	r3, [sp, #0]
   231dc:	6023      	str	r3, [r4, #0]
   231de:	9b01      	ldr	r3, [sp, #4]
   231e0:	6063      	str	r3, [r4, #4]
   231e2:	e7b5      	b.n	23150 <date_time_uptime_to_unix_time_ms+0x1c>
	return 0;
   231e4:	2000      	movs	r0, #0
   231e6:	e7c9      	b.n	2317c <date_time_uptime_to_unix_time_ms+0x48>
   231e8:	00036538 	.word	0x00036538
   231ec:	000364b0 	.word	0x000364b0
   231f0:	0003ccc8 	.word	0x0003ccc8
   231f4:	2001e4fb 	.word	0x2001e4fb
   231f8:	0003ce64 	.word	0x0003ce64
   231fc:	20015c98 	.word	0x20015c98
   23200:	0003ce87 	.word	0x0003ce87
   23204:	0003ceaf 	.word	0x0003ceaf

00023208 <date_time_now>:

int date_time_now(int64_t *unix_time_ms)
{
   23208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;
	int64_t unix_time_ms_prev;

	if (unix_time_ms == NULL) {
   2320a:	4604      	mov	r4, r0
   2320c:	b968      	cbnz	r0, 2322a <date_time_now+0x22>
   2320e:	4b14      	ldr	r3, [pc, #80]	; (23260 <date_time_now+0x58>)
   23210:	4914      	ldr	r1, [pc, #80]	; (23264 <date_time_now+0x5c>)
		LOG_ERR("The passed in pointer cannot be NULL");
   23212:	4815      	ldr	r0, [pc, #84]	; (23268 <date_time_now+0x60>)
   23214:	1ac9      	subs	r1, r1, r3
   23216:	08c9      	lsrs	r1, r1, #3
   23218:	0189      	lsls	r1, r1, #6
   2321a:	f041 0101 	orr.w	r1, r1, #1
   2321e:	f00b f8e7 	bl	2e3f0 <log_0>
		return -EINVAL;
   23222:	f06f 0515 	mvn.w	r5, #21
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
		*unix_time_ms = unix_time_ms_prev;
	}

	return err;
}
   23226:	4628      	mov	r0, r5
   23228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	unix_time_ms_prev = *unix_time_ms;
   2322a:	e9d0 6700 	ldrd	r6, r7, [r0]
	*unix_time_ms = k_uptime_get();
   2322e:	f010 fcb8 	bl	33ba2 <k_uptime_get>
   23232:	e9c4 0100 	strd	r0, r1, [r4]
	err = date_time_uptime_to_unix_time_ms(unix_time_ms);
   23236:	4620      	mov	r0, r4
   23238:	f7ff ff7c 	bl	23134 <date_time_uptime_to_unix_time_ms>
	if (err) {
   2323c:	4605      	mov	r5, r0
   2323e:	2800      	cmp	r0, #0
   23240:	d0f1      	beq.n	23226 <date_time_now+0x1e>
   23242:	4b07      	ldr	r3, [pc, #28]	; (23260 <date_time_now+0x58>)
   23244:	4a07      	ldr	r2, [pc, #28]	; (23264 <date_time_now+0x5c>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
   23246:	4601      	mov	r1, r0
   23248:	1ad2      	subs	r2, r2, r3
   2324a:	08d2      	lsrs	r2, r2, #3
   2324c:	0192      	lsls	r2, r2, #6
   2324e:	4807      	ldr	r0, [pc, #28]	; (2326c <date_time_now+0x64>)
   23250:	f042 0202 	orr.w	r2, r2, #2
   23254:	f00b f8d9 	bl	2e40a <log_1>
		*unix_time_ms = unix_time_ms_prev;
   23258:	e9c4 6700 	strd	r6, r7, [r4]
   2325c:	e7e3      	b.n	23226 <date_time_now+0x1e>
   2325e:	bf00      	nop
   23260:	000364b0 	.word	0x000364b0
   23264:	00036538 	.word	0x00036538
   23268:	0003ccc8 	.word	0x0003ccc8
   2326c:	0003ced2 	.word	0x0003ced2

00023270 <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   23270:	b508      	push	{r3, lr}
   23272:	4b0b      	ldr	r3, [pc, #44]	; (232a0 <date_time_update_async+0x30>)
	if (evt_handler) {
   23274:	b128      	cbz	r0, 23282 <date_time_update_async+0x12>
		app_evt_handler = evt_handler;
   23276:	6018      	str	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   23278:	480a      	ldr	r0, [pc, #40]	; (232a4 <date_time_update_async+0x34>)
   2327a:	f006 fb71 	bl	29960 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   2327e:	2000      	movs	r0, #0
   23280:	bd08      	pop	{r3, pc}
	} else if (app_evt_handler == NULL) {
   23282:	681b      	ldr	r3, [r3, #0]
   23284:	2b00      	cmp	r3, #0
   23286:	d1f7      	bne.n	23278 <date_time_update_async+0x8>
   23288:	4b07      	ldr	r3, [pc, #28]	; (232a8 <date_time_update_async+0x38>)
   2328a:	4a08      	ldr	r2, [pc, #32]	; (232ac <date_time_update_async+0x3c>)
		LOG_DBG("No handler registered");
   2328c:	4908      	ldr	r1, [pc, #32]	; (232b0 <date_time_update_async+0x40>)
   2328e:	1ad2      	subs	r2, r2, r3
   23290:	08d2      	lsrs	r2, r2, #3
   23292:	0192      	lsls	r2, r2, #6
   23294:	4807      	ldr	r0, [pc, #28]	; (232b4 <date_time_update_async+0x44>)
   23296:	f042 0204 	orr.w	r2, r2, #4
   2329a:	f00b f8b6 	bl	2e40a <log_1>
   2329e:	e7eb      	b.n	23278 <date_time_update_async+0x8>
   232a0:	200167b8 	.word	0x200167b8
   232a4:	20014fe0 	.word	0x20014fe0
   232a8:	000364b0 	.word	0x000364b0
   232ac:	00036538 	.word	0x00036538
   232b0:	0003cfd7 	.word	0x0003cfd7
   232b4:	0003cefe 	.word	0x0003cefe

000232b8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   232b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   232bc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   232be:	4c21      	ldr	r4, [pc, #132]	; (23344 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   232c0:	4e21      	ldr	r6, [pc, #132]	; (23348 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   232c2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   232c6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 23350 <check_ext_api_requests+0x98>
{
   232ca:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   232cc:	45a8      	cmp	r8, r5
   232ce:	d803      	bhi.n	232d8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   232d0:	2000      	movs	r0, #0
   232d2:	b005      	add	sp, #20
   232d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   232d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   232da:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   232de:	681f      	ldr	r7, [r3, #0]
   232e0:	ab01      	add	r3, sp, #4
   232e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   232e6:	220c      	movs	r2, #12
   232e8:	4619      	mov	r1, r3
   232ea:	4638      	mov	r0, r7
   232ec:	f012 f93d 	bl	3556a <memcmp>
   232f0:	b990      	cbnz	r0, 23318 <check_ext_api_requests+0x60>
   232f2:	b18f      	cbz	r7, 23318 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   232f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   232f6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   232f8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   232fa:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   232fc:	4291      	cmp	r1, r2
   232fe:	d10b      	bne.n	23318 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   23300:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   23302:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   23304:	4291      	cmp	r1, r2
   23306:	d807      	bhi.n	23318 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   23308:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2330a:	4291      	cmp	r1, r2
   2330c:	d904      	bls.n	23318 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2330e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   23310:	695b      	ldr	r3, [r3, #20]
   23312:	ea32 0303 	bics.w	r3, r2, r3
   23316:	d00a      	beq.n	2332e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   23318:	6a27      	ldr	r7, [r4, #32]
   2331a:	b167      	cbz	r7, 23336 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   2331c:	480b      	ldr	r0, [pc, #44]	; (2334c <check_ext_api_requests+0x94>)
   2331e:	f00a fd33 	bl	2dd88 <printk>
			k_panic();
   23322:	4040      	eors	r0, r0
   23324:	f380 8811 	msr	BASEPRI, r0
   23328:	f04f 0004 	mov.w	r0, #4
   2332c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2332e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   23330:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   23332:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   23334:	e7ca      	b.n	232cc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   23336:	4648      	mov	r0, r9
   23338:	f00a fd26 	bl	2dd88 <printk>
			*ext_api_req->ext_api = NULL;
   2333c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2333e:	601f      	str	r7, [r3, #0]
   23340:	e7f5      	b.n	2332e <check_ext_api_requests+0x76>
   23342:	bf00      	nop
   23344:	0001023c 	.word	0x0001023c
   23348:	000366ac 	.word	0x000366ac
   2334c:	0003cfee 	.word	0x0003cfee
   23350:	0003d017 	.word	0x0003d017

00023354 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   23354:	4b01      	ldr	r3, [pc, #4]	; (2335c <SystemInit+0x8>)
   23356:	4a02      	ldr	r2, [pc, #8]	; (23360 <SystemInit+0xc>)
   23358:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   2335a:	4770      	bx	lr
   2335c:	200149b4 	.word	0x200149b4
   23360:	03d09000 	.word	0x03d09000

00023364 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   23364:	b508      	push	{r3, lr}
    switch (domain)
   23366:	b178      	cbz	r0, 23388 <nrf_clock_is_running.constprop.0+0x24>
   23368:	2801      	cmp	r0, #1
   2336a:	d019      	beq.n	233a0 <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   2336c:	f44f 734f 	mov.w	r3, #828	; 0x33c
   23370:	4a10      	ldr	r2, [pc, #64]	; (233b4 <nrf_clock_is_running.constprop.0+0x50>)
   23372:	4911      	ldr	r1, [pc, #68]	; (233b8 <nrf_clock_is_running.constprop.0+0x54>)
   23374:	4811      	ldr	r0, [pc, #68]	; (233bc <nrf_clock_is_running.constprop.0+0x58>)
   23376:	f00a fd07 	bl	2dd88 <printk>
   2337a:	480e      	ldr	r0, [pc, #56]	; (233b4 <nrf_clock_is_running.constprop.0+0x50>)
   2337c:	f44f 714f 	mov.w	r1, #828	; 0x33c
   23380:	f00a ffe8 	bl	2e354 <assert_post_action>
            return false;
   23384:	2000      	movs	r0, #0
   23386:	e00a      	b.n	2339e <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   23388:	4a0d      	ldr	r2, [pc, #52]	; (233c0 <nrf_clock_is_running.constprop.0+0x5c>)
   2338a:	b121      	cbz	r1, 23396 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2338c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   23390:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   23394:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23396:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2339a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   2339e:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   233a0:	4a07      	ldr	r2, [pc, #28]	; (233c0 <nrf_clock_is_running.constprop.0+0x5c>)
   233a2:	b121      	cbz	r1, 233ae <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   233a4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   233a8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   233ac:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   233ae:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   233b2:	e7f2      	b.n	2339a <nrf_clock_is_running.constprop.0+0x36>
   233b4:	0003d04a 	.word	0x0003d04a
   233b8:	0003e845 	.word	0x0003e845
   233bc:	00037f2c 	.word	0x00037f2c
   233c0:	40005000 	.word	0x40005000

000233c4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   233c4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   233c6:	4604      	mov	r4, r0
   233c8:	b948      	cbnz	r0, 233de <nrfx_clock_init+0x1a>
   233ca:	490a      	ldr	r1, [pc, #40]	; (233f4 <nrfx_clock_init+0x30>)
   233cc:	480a      	ldr	r0, [pc, #40]	; (233f8 <nrfx_clock_init+0x34>)
   233ce:	23b5      	movs	r3, #181	; 0xb5
   233d0:	4a0a      	ldr	r2, [pc, #40]	; (233fc <nrfx_clock_init+0x38>)
   233d2:	f00a fcd9 	bl	2dd88 <printk>
   233d6:	21b5      	movs	r1, #181	; 0xb5
   233d8:	4808      	ldr	r0, [pc, #32]	; (233fc <nrfx_clock_init+0x38>)
   233da:	f00a ffbb 	bl	2e354 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   233de:	4b08      	ldr	r3, [pc, #32]	; (23400 <nrfx_clock_init+0x3c>)
   233e0:	791a      	ldrb	r2, [r3, #4]
   233e2:	b922      	cbnz	r2, 233ee <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   233e4:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   233e6:	4807      	ldr	r0, [pc, #28]	; (23404 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   233e8:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   233ea:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   233ec:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   233ee:	4806      	ldr	r0, [pc, #24]	; (23408 <nrfx_clock_init+0x44>)
    return err_code;
   233f0:	e7fc      	b.n	233ec <nrfx_clock_init+0x28>
   233f2:	bf00      	nop
   233f4:	0003d397 	.word	0x0003d397
   233f8:	00037f2c 	.word	0x00037f2c
   233fc:	0003d07e 	.word	0x0003d07e
   23400:	2001680c 	.word	0x2001680c
   23404:	0bad0000 	.word	0x0bad0000
   23408:	0bad000c 	.word	0x0bad000c

0002340c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2340c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2340e:	4b0b      	ldr	r3, [pc, #44]	; (2343c <nrfx_clock_enable+0x30>)
   23410:	791b      	ldrb	r3, [r3, #4]
   23412:	b94b      	cbnz	r3, 23428 <nrfx_clock_enable+0x1c>
   23414:	490a      	ldr	r1, [pc, #40]	; (23440 <nrfx_clock_enable+0x34>)
   23416:	480b      	ldr	r0, [pc, #44]	; (23444 <nrfx_clock_enable+0x38>)
   23418:	23ce      	movs	r3, #206	; 0xce
   2341a:	4a0b      	ldr	r2, [pc, #44]	; (23448 <nrfx_clock_enable+0x3c>)
   2341c:	f00a fcb4 	bl	2dd88 <printk>
   23420:	21ce      	movs	r1, #206	; 0xce
   23422:	4809      	ldr	r0, [pc, #36]	; (23448 <nrfx_clock_enable+0x3c>)
   23424:	f00a ff96 	bl	2e354 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   23428:	2005      	movs	r0, #5
   2342a:	f7f3 fcb1 	bl	16d90 <arch_irq_is_enabled>
   2342e:	b920      	cbnz	r0, 2343a <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   23430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   23434:	2005      	movs	r0, #5
   23436:	f7f3 bc87 	b.w	16d48 <arch_irq_enable>
   2343a:	bd08      	pop	{r3, pc}
   2343c:	2001680c 	.word	0x2001680c
   23440:	0003d0bb 	.word	0x0003d0bb
   23444:	00037f2c 	.word	0x00037f2c
   23448:	0003d07e 	.word	0x0003d07e

0002344c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2344c:	4b22      	ldr	r3, [pc, #136]	; (234d8 <nrfx_clock_start+0x8c>)
{
   2344e:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   23450:	791b      	ldrb	r3, [r3, #4]
{
   23452:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   23454:	b95b      	cbnz	r3, 2346e <nrfx_clock_start+0x22>
   23456:	4921      	ldr	r1, [pc, #132]	; (234dc <nrfx_clock_start+0x90>)
   23458:	4821      	ldr	r0, [pc, #132]	; (234e0 <nrfx_clock_start+0x94>)
   2345a:	f44f 7385 	mov.w	r3, #266	; 0x10a
   2345e:	4a21      	ldr	r2, [pc, #132]	; (234e4 <nrfx_clock_start+0x98>)
   23460:	f00a fc92 	bl	2dd88 <printk>
   23464:	f44f 7185 	mov.w	r1, #266	; 0x10a
   23468:	481e      	ldr	r0, [pc, #120]	; (234e4 <nrfx_clock_start+0x98>)
   2346a:	f00a ff73 	bl	2e354 <assert_post_action>
    switch (domain)
   2346e:	b174      	cbz	r4, 2348e <nrfx_clock_start+0x42>
   23470:	2c01      	cmp	r4, #1
   23472:	d027      	beq.n	234c4 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   23474:	f44f 739e 	mov.w	r3, #316	; 0x13c
   23478:	4a1a      	ldr	r2, [pc, #104]	; (234e4 <nrfx_clock_start+0x98>)
   2347a:	491b      	ldr	r1, [pc, #108]	; (234e8 <nrfx_clock_start+0x9c>)
   2347c:	4818      	ldr	r0, [pc, #96]	; (234e0 <nrfx_clock_start+0x94>)
   2347e:	f00a fc83 	bl	2dd88 <printk>
   23482:	f44f 719e 	mov.w	r1, #316	; 0x13c
   23486:	4817      	ldr	r0, [pc, #92]	; (234e4 <nrfx_clock_start+0x98>)
   23488:	f00a ff64 	bl	2e354 <assert_post_action>
            break;
    }
}
   2348c:	e016      	b.n	234bc <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2348e:	4620      	mov	r0, r4
   23490:	f10d 0107 	add.w	r1, sp, #7
   23494:	f7ff ff66 	bl	23364 <nrf_clock_is_running.constprop.0>
   23498:	4b14      	ldr	r3, [pc, #80]	; (234ec <nrfx_clock_start+0xa0>)
   2349a:	b188      	cbz	r0, 234c0 <nrfx_clock_start+0x74>
   2349c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   234a0:	2a02      	cmp	r2, #2
   234a2:	d10d      	bne.n	234c0 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   234a4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   234a8:	2200      	movs	r2, #0
   234aa:	4b11      	ldr	r3, [pc, #68]	; (234f0 <nrfx_clock_start+0xa4>)
   234ac:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   234ae:	2202      	movs	r2, #2
   234b0:	681b      	ldr	r3, [r3, #0]
   234b2:	4b0e      	ldr	r3, [pc, #56]	; (234ec <nrfx_clock_start+0xa0>)
   234b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   234b8:	2201      	movs	r2, #1
   234ba:	609a      	str	r2, [r3, #8]
}
   234bc:	b002      	add	sp, #8
   234be:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   234c0:	2201      	movs	r2, #1
   234c2:	e7ef      	b.n	234a4 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   234c4:	2200      	movs	r2, #0
   234c6:	4b0b      	ldr	r3, [pc, #44]	; (234f4 <nrfx_clock_start+0xa8>)
   234c8:	601a      	str	r2, [r3, #0]
   234ca:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   234cc:	4b07      	ldr	r3, [pc, #28]	; (234ec <nrfx_clock_start+0xa0>)
   234ce:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   234d2:	601c      	str	r4, [r3, #0]
}
   234d4:	e7f2      	b.n	234bc <nrfx_clock_start+0x70>
   234d6:	bf00      	nop
   234d8:	2001680c 	.word	0x2001680c
   234dc:	0003d0bb 	.word	0x0003d0bb
   234e0:	00037f2c 	.word	0x00037f2c
   234e4:	0003d07e 	.word	0x0003d07e
   234e8:	0003e845 	.word	0x0003e845
   234ec:	40005000 	.word	0x40005000
   234f0:	40005104 	.word	0x40005104
   234f4:	40005100 	.word	0x40005100

000234f8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   234f8:	4b2d      	ldr	r3, [pc, #180]	; (235b0 <nrfx_clock_stop+0xb8>)
{
   234fa:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   234fc:	791b      	ldrb	r3, [r3, #4]
{
   234fe:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   23500:	b95b      	cbnz	r3, 2351a <nrfx_clock_stop+0x22>
   23502:	492c      	ldr	r1, [pc, #176]	; (235b4 <nrfx_clock_stop+0xbc>)
   23504:	482c      	ldr	r0, [pc, #176]	; (235b8 <nrfx_clock_stop+0xc0>)
   23506:	f240 1343 	movw	r3, #323	; 0x143
   2350a:	4a2c      	ldr	r2, [pc, #176]	; (235bc <nrfx_clock_stop+0xc4>)
   2350c:	f00a fc3c 	bl	2dd88 <printk>
   23510:	f240 1143 	movw	r1, #323	; 0x143
   23514:	4829      	ldr	r0, [pc, #164]	; (235bc <nrfx_clock_stop+0xc4>)
   23516:	f00a ff1d 	bl	2e354 <assert_post_action>
    switch (domain)
   2351a:	b17c      	cbz	r4, 2353c <nrfx_clock_stop+0x44>
   2351c:	2c01      	cmp	r4, #1
   2351e:	d027      	beq.n	23570 <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   23520:	4927      	ldr	r1, [pc, #156]	; (235c0 <nrfx_clock_stop+0xc8>)
   23522:	4825      	ldr	r0, [pc, #148]	; (235b8 <nrfx_clock_stop+0xc0>)
   23524:	f240 135f 	movw	r3, #351	; 0x15f
   23528:	4a24      	ldr	r2, [pc, #144]	; (235bc <nrfx_clock_stop+0xc4>)
   2352a:	f00a fc2d 	bl	2dd88 <printk>
   2352e:	f240 115f 	movw	r1, #351	; 0x15f
   23532:	4822      	ldr	r0, [pc, #136]	; (235bc <nrfx_clock_stop+0xc4>)
   23534:	f00a ff0e 	bl	2e354 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   23538:	b002      	add	sp, #8
   2353a:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   2353c:	2202      	movs	r2, #2
   2353e:	4b21      	ldr	r3, [pc, #132]	; (235c4 <nrfx_clock_stop+0xcc>)
   23540:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23544:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23546:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2354a:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2354e:	f503 7382 	add.w	r3, r3, #260	; 0x104
   23552:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23554:	4b1c      	ldr	r3, [pc, #112]	; (235c8 <nrfx_clock_stop+0xd0>)
   23556:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   23558:	2100      	movs	r1, #0
   2355a:	4608      	mov	r0, r1
   2355c:	f7ff ff02 	bl	23364 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   23560:	2800      	cmp	r0, #0
   23562:	d0e9      	beq.n	23538 <nrfx_clock_stop+0x40>
   23564:	2001      	movs	r0, #1
   23566:	f010 fb2b 	bl	33bc0 <nrfx_busy_wait>
   2356a:	3c01      	subs	r4, #1
   2356c:	d1f4      	bne.n	23558 <nrfx_clock_stop+0x60>
   2356e:	e7e3      	b.n	23538 <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23570:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   23572:	4b14      	ldr	r3, [pc, #80]	; (235c4 <nrfx_clock_stop+0xcc>)
   23574:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23578:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2357c:	f503 7380 	add.w	r3, r3, #256	; 0x100
   23580:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23582:	4b12      	ldr	r3, [pc, #72]	; (235cc <nrfx_clock_stop+0xd4>)
   23584:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   23586:	f88d 4007 	strb.w	r4, [sp, #7]
   2358a:	f242 7410 	movw	r4, #10000	; 0x2710
   2358e:	2001      	movs	r0, #1
   23590:	f10d 0107 	add.w	r1, sp, #7
   23594:	f7ff fee6 	bl	23364 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   23598:	2800      	cmp	r0, #0
   2359a:	d0cd      	beq.n	23538 <nrfx_clock_stop+0x40>
   2359c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   235a0:	2801      	cmp	r0, #1
   235a2:	d1c9      	bne.n	23538 <nrfx_clock_stop+0x40>
   235a4:	f010 fb0c 	bl	33bc0 <nrfx_busy_wait>
   235a8:	3c01      	subs	r4, #1
   235aa:	d1f0      	bne.n	2358e <nrfx_clock_stop+0x96>
   235ac:	e7c4      	b.n	23538 <nrfx_clock_stop+0x40>
   235ae:	bf00      	nop
   235b0:	2001680c 	.word	0x2001680c
   235b4:	0003d0bb 	.word	0x0003d0bb
   235b8:	00037f2c 	.word	0x00037f2c
   235bc:	0003d07e 	.word	0x0003d07e
   235c0:	0003e845 	.word	0x0003e845
   235c4:	40005000 	.word	0x40005000
   235c8:	4000500c 	.word	0x4000500c
   235cc:	40005004 	.word	0x40005004

000235d0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   235d0:	4b15      	ldr	r3, [pc, #84]	; (23628 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   235d2:	b507      	push	{r0, r1, r2, lr}
   235d4:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   235d6:	b14a      	cbz	r2, 235ec <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   235d8:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   235da:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   235dc:	6018      	str	r0, [r3, #0]
   235de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   235e0:	4b12      	ldr	r3, [pc, #72]	; (2362c <nrfx_power_clock_irq_handler+0x5c>)
   235e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   235e6:	4b12      	ldr	r3, [pc, #72]	; (23630 <nrfx_power_clock_irq_handler+0x60>)
   235e8:	681b      	ldr	r3, [r3, #0]
   235ea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   235ec:	4b11      	ldr	r3, [pc, #68]	; (23634 <nrfx_power_clock_irq_handler+0x64>)
   235ee:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   235f0:	b17a      	cbz	r2, 23612 <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   235f2:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   235f4:	f10d 0107 	add.w	r1, sp, #7
   235f8:	6018      	str	r0, [r3, #0]
   235fa:	681b      	ldr	r3, [r3, #0]
   235fc:	f7ff feb2 	bl	23364 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   23600:	f89d 1007 	ldrb.w	r1, [sp, #7]
   23604:	2202      	movs	r2, #2
   23606:	2901      	cmp	r1, #1
   23608:	4b08      	ldr	r3, [pc, #32]	; (2362c <nrfx_power_clock_irq_handler+0x5c>)
   2360a:	d105      	bne.n	23618 <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2360c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23610:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   23612:	b003      	add	sp, #12
   23614:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   23618:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2361c:	4b04      	ldr	r3, [pc, #16]	; (23630 <nrfx_power_clock_irq_handler+0x60>)
   2361e:	2001      	movs	r0, #1
   23620:	681b      	ldr	r3, [r3, #0]
   23622:	4798      	blx	r3
}
   23624:	e7f5      	b.n	23612 <nrfx_power_clock_irq_handler+0x42>
   23626:	bf00      	nop
   23628:	40005100 	.word	0x40005100
   2362c:	40005000 	.word	0x40005000
   23630:	2001680c 	.word	0x2001680c
   23634:	40005104 	.word	0x40005104

00023638 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   23638:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   2363a:	f04f 0320 	mov.w	r3, #32
   2363e:	f3ef 8711 	mrs	r7, BASEPRI
   23642:	f383 8811 	msr	BASEPRI, r3
   23646:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   2364a:	4a0d      	ldr	r2, [pc, #52]	; (23680 <nrfx_dppi_channel_alloc+0x48>)
   2364c:	6816      	ldr	r6, [r2, #0]
   2364e:	43f1      	mvns	r1, r6
   23650:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   23652:	b191      	cbz	r1, 2367a <nrfx_dppi_channel_alloc+0x42>
   23654:	2500      	movs	r5, #0
   23656:	b2ec      	uxtb	r4, r5
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   23658:	fa21 f304 	lsr.w	r3, r1, r4
   2365c:	07db      	lsls	r3, r3, #31
   2365e:	f105 0501 	add.w	r5, r5, #1
   23662:	d5f8      	bpl.n	23656 <nrfx_dppi_channel_alloc+0x1e>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   23664:	2301      	movs	r3, #1
   23666:	40a3      	lsls	r3, r4
   23668:	4333      	orrs	r3, r6
        *p_channel = channel;
   2366a:	7004      	strb	r4, [r0, #0]

        err_code = NRFX_SUCCESS;
   2366c:	4805      	ldr	r0, [pc, #20]	; (23684 <nrfx_dppi_channel_alloc+0x4c>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
   2366e:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   23670:	f387 8811 	msr	BASEPRI, r7
   23674:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   23678:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
   2367a:	4803      	ldr	r0, [pc, #12]	; (23688 <nrfx_dppi_channel_alloc+0x50>)
   2367c:	e7f8      	b.n	23670 <nrfx_dppi_channel_alloc+0x38>
   2367e:	bf00      	nop
   23680:	20016814 	.word	0x20016814
   23684:	0bad0000 	.word	0x0bad0000
   23688:	0bad0002 	.word	0x0bad0002

0002368c <nrfx_dppi_channel_enable>:
    return ((m_allocated_channels & DPPI_BIT_SET(channel)) != 0);
   2368c:	4b07      	ldr	r3, [pc, #28]	; (236ac <nrfx_dppi_channel_enable+0x20>)
   2368e:	681b      	ldr	r3, [r3, #0]
   23690:	40c3      	lsrs	r3, r0

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!channel_is_allocated(channel))
   23692:	07db      	lsls	r3, r3, #31
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   23694:	bf41      	itttt	mi
   23696:	2301      	movmi	r3, #1
   23698:	fa03 f000 	lslmi.w	r0, r3, r0
   2369c:	4b04      	ldrmi	r3, [pc, #16]	; (236b0 <nrfx_dppi_channel_enable+0x24>)
   2369e:	f8c3 0504 	strmi.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   236a2:	bf4c      	ite	mi
   236a4:	4803      	ldrmi	r0, [pc, #12]	; (236b4 <nrfx_dppi_channel_enable+0x28>)
        err_code = NRFX_ERROR_INVALID_PARAM;
   236a6:	4804      	ldrpl	r0, [pc, #16]	; (236b8 <nrfx_dppi_channel_enable+0x2c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   236a8:	4770      	bx	lr
   236aa:	bf00      	nop
   236ac:	20016814 	.word	0x20016814
   236b0:	40017000 	.word	0x40017000
   236b4:	0bad0000 	.word	0x0bad0000
   236b8:	0bad0004 	.word	0x0bad0004

000236bc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   236bc:	2301      	movs	r3, #1
   236be:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   236c2:	f010 0fff 	tst.w	r0, #255	; 0xff
   236c6:	d012      	beq.n	236ee <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   236c8:	f04f 0320 	mov.w	r3, #32
   236cc:	f3ef 8111 	mrs	r1, BASEPRI
   236d0:	f383 8811 	msr	BASEPRI, r3
   236d4:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   236d8:	4a06      	ldr	r2, [pc, #24]	; (236f4 <nrfx_gpiote_channel_free+0x38>)
   236da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   236dc:	ea23 0000 	bic.w	r0, r3, r0
   236e0:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   236e2:	f381 8811 	msr	BASEPRI, r1
   236e6:	f3bf 8f6f 	isb	sy
   236ea:	4803      	ldr	r0, [pc, #12]	; (236f8 <nrfx_gpiote_channel_free+0x3c>)
   236ec:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   236ee:	4803      	ldr	r0, [pc, #12]	; (236fc <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   236f0:	4770      	bx	lr
   236f2:	bf00      	nop
   236f4:	20016818 	.word	0x20016818
   236f8:	0bad0000 	.word	0x0bad0000
   236fc:	0bad0004 	.word	0x0bad0004

00023700 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   23700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   23704:	22ff      	movs	r2, #255	; 0xff
{
   23706:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   23708:	2601      	movs	r6, #1
{
   2370a:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   2370c:	f8df e058 	ldr.w	lr, [pc, #88]	; 23768 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   23710:	4814      	ldr	r0, [pc, #80]	; (23764 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   23712:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2376c <nrfx_gpiote_channel_alloc+0x6c>
   23716:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   23718:	f04f 0120 	mov.w	r1, #32
   2371c:	f3ef 8c11 	mrs	ip, BASEPRI
   23720:	f381 8811 	msr	BASEPRI, r1
   23724:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   23728:	fa22 f103 	lsr.w	r1, r2, r3
   2372c:	07c9      	lsls	r1, r1, #31
   2372e:	d50a      	bpl.n	23746 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   23730:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   23734:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   23738:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   2373a:	bf01      	itttt	eq
   2373c:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   2373e:	4339      	orreq	r1, r7
   23740:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
   23744:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   23746:	f38c 8811 	msr	BASEPRI, ip
   2374a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   2374e:	4540      	cmp	r0, r8
   23750:	d005      	beq.n	2375e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   23752:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   23756:	439a      	bics	r2, r3
   23758:	f104 0401 	add.w	r4, r4, #1
   2375c:	d1db      	bne.n	23716 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2375e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23762:	bf00      	nop
   23764:	0bad0002 	.word	0x0bad0002
   23768:	20016818 	.word	0x20016818
   2376c:	0bad0000 	.word	0x0bad0000

00023770 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   23770:	b570      	push	{r4, r5, r6, lr}
   23772:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   23774:	460d      	mov	r5, r1
   23776:	b949      	cbnz	r1, 2378c <nrfx_ipc_init+0x1c>
   23778:	490b      	ldr	r1, [pc, #44]	; (237a8 <nrfx_ipc_init+0x38>)
   2377a:	480c      	ldr	r0, [pc, #48]	; (237ac <nrfx_ipc_init+0x3c>)
   2377c:	2334      	movs	r3, #52	; 0x34
   2377e:	4a0c      	ldr	r2, [pc, #48]	; (237b0 <nrfx_ipc_init+0x40>)
   23780:	f00a fb02 	bl	2dd88 <printk>
   23784:	2134      	movs	r1, #52	; 0x34
   23786:	480a      	ldr	r0, [pc, #40]	; (237b0 <nrfx_ipc_init+0x40>)
   23788:	f00a fde4 	bl	2e354 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2378c:	4c09      	ldr	r4, [pc, #36]	; (237b4 <nrfx_ipc_init+0x44>)
   2378e:	7923      	ldrb	r3, [r4, #4]
   23790:	b943      	cbnz	r3, 237a4 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   23792:	202a      	movs	r0, #42	; 0x2a
   23794:	f7f3 fad8 	bl	16d48 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23798:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   2379a:	4807      	ldr	r0, [pc, #28]	; (237b8 <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2379c:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   2379e:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   237a0:	60a6      	str	r6, [r4, #8]
}
   237a2:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   237a4:	4805      	ldr	r0, [pc, #20]	; (237bc <nrfx_ipc_init+0x4c>)
   237a6:	e7fc      	b.n	237a2 <nrfx_ipc_init+0x32>
   237a8:	0003d34c 	.word	0x0003d34c
   237ac:	00037f2c 	.word	0x00037f2c
   237b0:	0003d0d9 	.word	0x0003d0d9
   237b4:	20016868 	.word	0x20016868
   237b8:	0bad0000 	.word	0x0bad0000
   237bc:	0bad000c 	.word	0x0bad000c

000237c0 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   237c0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   237c2:	4604      	mov	r4, r0
   237c4:	b948      	cbnz	r0, 237da <nrfx_ipc_config_load+0x1a>
   237c6:	491a      	ldr	r1, [pc, #104]	; (23830 <nrfx_ipc_config_load+0x70>)
   237c8:	481a      	ldr	r0, [pc, #104]	; (23834 <nrfx_ipc_config_load+0x74>)
   237ca:	2346      	movs	r3, #70	; 0x46
   237cc:	4a1a      	ldr	r2, [pc, #104]	; (23838 <nrfx_ipc_config_load+0x78>)
   237ce:	f00a fadb 	bl	2dd88 <printk>
   237d2:	2146      	movs	r1, #70	; 0x46
   237d4:	4818      	ldr	r0, [pc, #96]	; (23838 <nrfx_ipc_config_load+0x78>)
   237d6:	f00a fdbd 	bl	2e354 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   237da:	4b18      	ldr	r3, [pc, #96]	; (2383c <nrfx_ipc_config_load+0x7c>)
   237dc:	791b      	ldrb	r3, [r3, #4]
   237de:	2b01      	cmp	r3, #1
   237e0:	d009      	beq.n	237f6 <nrfx_ipc_config_load+0x36>
   237e2:	4917      	ldr	r1, [pc, #92]	; (23840 <nrfx_ipc_config_load+0x80>)
   237e4:	4813      	ldr	r0, [pc, #76]	; (23834 <nrfx_ipc_config_load+0x74>)
   237e6:	2347      	movs	r3, #71	; 0x47
   237e8:	4a13      	ldr	r2, [pc, #76]	; (23838 <nrfx_ipc_config_load+0x78>)
   237ea:	f00a facd 	bl	2dd88 <printk>
   237ee:	2147      	movs	r1, #71	; 0x47
   237f0:	4811      	ldr	r0, [pc, #68]	; (23838 <nrfx_ipc_config_load+0x78>)
   237f2:	f00a fdaf 	bl	2e354 <assert_post_action>
{
   237f6:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   237f8:	4a12      	ldr	r2, [pc, #72]	; (23844 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   237fa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   237fe:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23802:	3301      	adds	r3, #1
   23804:	2b08      	cmp	r3, #8
   23806:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   2380a:	d1f6      	bne.n	237fa <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   2380c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2380e:	4a0d      	ldr	r2, [pc, #52]	; (23844 <nrfx_ipc_config_load+0x84>)
   23810:	f104 0120 	add.w	r1, r4, #32
   23814:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   23818:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2381c:	3301      	adds	r3, #1
   2381e:	2b08      	cmp	r3, #8
   23820:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   23824:	d1f6      	bne.n	23814 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   23826:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   23828:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2382c:	bd38      	pop	{r3, r4, r5, pc}
   2382e:	bf00      	nop
   23830:	0003d114 	.word	0x0003d114
   23834:	00037f2c 	.word	0x00037f2c
   23838:	0003d0d9 	.word	0x0003d0d9
   2383c:	20016868 	.word	0x20016868
   23840:	0003d11d 	.word	0x0003d11d
   23844:	4002a000 	.word	0x4002a000

00023848 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   23848:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2384a:	4c1b      	ldr	r4, [pc, #108]	; (238b8 <nrfx_ipc_uninit+0x70>)
   2384c:	7922      	ldrb	r2, [r4, #4]
   2384e:	2a01      	cmp	r2, #1
   23850:	d009      	beq.n	23866 <nrfx_ipc_uninit+0x1e>
   23852:	491a      	ldr	r1, [pc, #104]	; (238bc <nrfx_ipc_uninit+0x74>)
   23854:	481a      	ldr	r0, [pc, #104]	; (238c0 <nrfx_ipc_uninit+0x78>)
   23856:	2359      	movs	r3, #89	; 0x59
   23858:	4a1a      	ldr	r2, [pc, #104]	; (238c4 <nrfx_ipc_uninit+0x7c>)
   2385a:	f00a fa95 	bl	2dd88 <printk>
   2385e:	2159      	movs	r1, #89	; 0x59
   23860:	4818      	ldr	r0, [pc, #96]	; (238c4 <nrfx_ipc_uninit+0x7c>)
   23862:	f00a fd77 	bl	2e354 <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   23866:	2300      	movs	r3, #0
   23868:	4a17      	ldr	r2, [pc, #92]	; (238c8 <nrfx_ipc_uninit+0x80>)
   2386a:	4918      	ldr	r1, [pc, #96]	; (238cc <nrfx_ipc_uninit+0x84>)
   2386c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   23870:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   23874:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   23878:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   2387c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   23880:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   23884:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   23888:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2388c:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   23890:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   23894:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   23898:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   2389c:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   238a0:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   238a4:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   238a8:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   238ac:	f04f 32ff 	mov.w	r2, #4294967295
   238b0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   238b4:	7123      	strb	r3, [r4, #4]
}
   238b6:	bd10      	pop	{r4, pc}
   238b8:	20016868 	.word	0x20016868
   238bc:	0003d11d 	.word	0x0003d11d
   238c0:	00037f2c 	.word	0x00037f2c
   238c4:	0003d0d9 	.word	0x0003d0d9
   238c8:	4002a004 	.word	0x4002a004
   238cc:	4002a000 	.word	0x4002a000

000238d0 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   238d0:	4b16      	ldr	r3, [pc, #88]	; (2392c <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   238d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   238d6:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   238da:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2393c <nrfx_ipc_irq_handler+0x6c>
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   238de:	4635      	mov	r5, r6
   238e0:	4f13      	ldr	r7, [pc, #76]	; (23930 <nrfx_ipc_irq_handler+0x60>)
   238e2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 23940 <nrfx_ipc_irq_handler+0x70>
    while (bitmask)
   238e6:	b935      	cbnz	r5, 238f6 <nrfx_ipc_irq_handler+0x26>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   238e8:	4b12      	ldr	r3, [pc, #72]	; (23934 <nrfx_ipc_irq_handler+0x64>)
   238ea:	4630      	mov	r0, r6
}
   238ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   238f0:	681a      	ldr	r2, [r3, #0]
   238f2:	6899      	ldr	r1, [r3, #8]
   238f4:	4710      	bx	r2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   238f6:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   238fa:	2301      	movs	r3, #1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   238fc:	fab4 f484 	clz	r4, r4
   23900:	40a3      	lsls	r3, r4
   23902:	2c07      	cmp	r4, #7
   23904:	ea25 0503 	bic.w	r5, r5, r3
   23908:	d90b      	bls.n	23922 <nrfx_ipc_irq_handler+0x52>
   2390a:	4639      	mov	r1, r7
   2390c:	4640      	mov	r0, r8
   2390e:	f240 13e7 	movw	r3, #487	; 0x1e7
   23912:	464a      	mov	r2, r9
   23914:	f00a fa38 	bl	2dd88 <printk>
   23918:	f240 11e7 	movw	r1, #487	; 0x1e7
   2391c:	4648      	mov	r0, r9
   2391e:	f00a fd19 	bl	2e354 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23922:	2200      	movs	r2, #0
   23924:	4b04      	ldr	r3, [pc, #16]	; (23938 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   23926:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23928:	511a      	str	r2, [r3, r4]
}
   2392a:	e7dc      	b.n	238e6 <nrfx_ipc_irq_handler+0x16>
   2392c:	4002a000 	.word	0x4002a000
   23930:	0003b160 	.word	0x0003b160
   23934:	20016868 	.word	0x20016868
   23938:	4002a100 	.word	0x4002a100
   2393c:	0003d14a 	.word	0x0003d14a
   23940:	00037f2c 	.word	0x00037f2c

00023944 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   23944:	6803      	ldr	r3, [r0, #0]
{
   23946:	b510      	push	{r4, lr}
    switch (port)
   23948:	095a      	lsrs	r2, r3, #5
   2394a:	bf0c      	ite	eq
   2394c:	f04f 32ff 	moveq.w	r2, #4294967295
   23950:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   23952:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   23956:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2395a:	07db      	lsls	r3, r3, #31
{
   2395c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2395e:	d40b      	bmi.n	23978 <nrf_gpio_pin_port_decode+0x34>
   23960:	490f      	ldr	r1, [pc, #60]	; (239a0 <nrf_gpio_pin_port_decode+0x5c>)
   23962:	4810      	ldr	r0, [pc, #64]	; (239a4 <nrf_gpio_pin_port_decode+0x60>)
   23964:	f44f 7305 	mov.w	r3, #532	; 0x214
   23968:	4a0f      	ldr	r2, [pc, #60]	; (239a8 <nrf_gpio_pin_port_decode+0x64>)
   2396a:	f00a fa0d 	bl	2dd88 <printk>
   2396e:	f44f 7105 	mov.w	r1, #532	; 0x214
   23972:	480d      	ldr	r0, [pc, #52]	; (239a8 <nrf_gpio_pin_port_decode+0x64>)
   23974:	f00a fcee 	bl	2e354 <assert_post_action>
    uint32_t pin_number = *p_pin;
   23978:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2397a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2397e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   23980:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23982:	d00b      	beq.n	2399c <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   23984:	4909      	ldr	r1, [pc, #36]	; (239ac <nrf_gpio_pin_port_decode+0x68>)
   23986:	4807      	ldr	r0, [pc, #28]	; (239a4 <nrf_gpio_pin_port_decode+0x60>)
   23988:	f240 2319 	movw	r3, #537	; 0x219
   2398c:	4a06      	ldr	r2, [pc, #24]	; (239a8 <nrf_gpio_pin_port_decode+0x64>)
   2398e:	f00a f9fb 	bl	2dd88 <printk>
   23992:	f240 2119 	movw	r1, #537	; 0x219
   23996:	4804      	ldr	r0, [pc, #16]	; (239a8 <nrf_gpio_pin_port_decode+0x64>)
   23998:	f00a fcdc 	bl	2e354 <assert_post_action>
}
   2399c:	4804      	ldr	r0, [pc, #16]	; (239b0 <nrf_gpio_pin_port_decode+0x6c>)
   2399e:	bd10      	pop	{r4, pc}
   239a0:	0003a9df 	.word	0x0003a9df
   239a4:	00037f2c 	.word	0x00037f2c
   239a8:	0003a9ac 	.word	0x0003a9ac
   239ac:	0003e845 	.word	0x0003e845
   239b0:	40842500 	.word	0x40842500

000239b4 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   239b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239b8:	4681      	mov	r9, r0
   239ba:	4692      	mov	sl, r2
   239bc:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   239be:	460c      	mov	r4, r1
   239c0:	b959      	cbnz	r1, 239da <nrfx_spim_init+0x26>
   239c2:	4959      	ldr	r1, [pc, #356]	; (23b28 <nrfx_spim_init+0x174>)
   239c4:	4859      	ldr	r0, [pc, #356]	; (23b2c <nrfx_spim_init+0x178>)
   239c6:	f44f 7383 	mov.w	r3, #262	; 0x106
   239ca:	4a59      	ldr	r2, [pc, #356]	; (23b30 <nrfx_spim_init+0x17c>)
   239cc:	f00a f9dc 	bl	2dd88 <printk>
   239d0:	f44f 7183 	mov.w	r1, #262	; 0x106
   239d4:	4856      	ldr	r0, [pc, #344]	; (23b30 <nrfx_spim_init+0x17c>)
   239d6:	f00a fcbd 	bl	2e354 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   239da:	2124      	movs	r1, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   239dc:	f899 5004 	ldrb.w	r5, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   239e0:	4e54      	ldr	r6, [pc, #336]	; (23b34 <nrfx_spim_init+0x180>)
   239e2:	4369      	muls	r1, r5
   239e4:	1873      	adds	r3, r6, r1
   239e6:	7f1a      	ldrb	r2, [r3, #28]
   239e8:	2a00      	cmp	r2, #0
   239ea:	f040 809b 	bne.w	23b24 <nrfx_spim_init+0x170>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   239ee:	f8d9 7000 	ldr.w	r7, [r9]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   239f2:	f846 a001 	str.w	sl, [r6, r1]
    p_cb->p_context = p_context;
   239f6:	f8c3 8004 	str.w	r8, [r3, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   239fa:	7b23      	ldrb	r3, [r4, #12]
   239fc:	7820      	ldrb	r0, [r4, #0]
   239fe:	2b01      	cmp	r3, #1
   23a00:	d87e      	bhi.n	23b00 <nrfx_spim_init+0x14c>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   23a02:	f010 f8df 	bl	33bc4 <nrf_gpio_pin_clear>
    pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M) ? NRF_GPIO_PIN_H0H1 : NRF_GPIO_PIN_S0S1;
#else
    pin_drive = NRF_GPIO_PIN_S0S1;
#endif

    nrf_gpio_cfg(p_config->sck_pin,
   23a06:	7823      	ldrb	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a08:	a801      	add	r0, sp, #4
   23a0a:	9301      	str	r3, [sp, #4]
   23a0c:	f7ff ff9a 	bl	23944 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23a10:	2201      	movs	r2, #1
   23a12:	9b01      	ldr	r3, [sp, #4]
   23a14:	3380      	adds	r3, #128	; 0x80
   23a16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 pin_drive,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   23a1a:	f894 8001 	ldrb.w	r8, [r4, #1]
   23a1e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   23a22:	d070      	beq.n	23b06 <nrfx_spim_init+0x152>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   23a24:	4640      	mov	r0, r8
   23a26:	f010 f8cd 	bl	33bc4 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a2a:	a801      	add	r0, sp, #4
   23a2c:	f8cd 8004 	str.w	r8, [sp, #4]
   23a30:	f7ff ff88 	bl	23944 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23a34:	2203      	movs	r2, #3
   23a36:	9b01      	ldr	r3, [sp, #4]
   23a38:	3380      	adds	r3, #128	; 0x80
   23a3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   23a3e:	f894 a002 	ldrb.w	sl, [r4, #2]
   23a42:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   23a46:	d061      	beq.n	23b0c <nrfx_spim_init+0x158>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a48:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg(miso_pin,
   23a4a:	f894 b00e 	ldrb.w	fp, [r4, #14]
   23a4e:	f8cd a004 	str.w	sl, [sp, #4]
   23a52:	f7ff ff77 	bl	23944 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23a56:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   23a58:	ea4f 028b 	mov.w	r2, fp, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   23a5c:	3380      	adds	r3, #128	; 0x80
   23a5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   23a62:	2324      	movs	r3, #36	; 0x24
   23a64:	fb03 6305 	mla	r3, r3, r5, r6
   23a68:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   23a6a:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   23a6c:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   23a6e:	d013      	beq.n	23a98 <nrfx_spim_init+0xe4>
    {
        if (p_config->ss_active_high)
   23a70:	7923      	ldrb	r3, [r4, #4]
   23a72:	2b00      	cmp	r3, #0
   23a74:	d04d      	beq.n	23b12 <nrfx_spim_init+0x15e>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   23a76:	f010 f8a5 	bl	33bc4 <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg(p_config->ss_pin,
   23a7a:	78e3      	ldrb	r3, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a7c:	a801      	add	r0, sp, #4
   23a7e:	9301      	str	r3, [sp, #4]
   23a80:	f7ff ff60 	bl	23944 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23a84:	2203      	movs	r2, #3
   23a86:	9b01      	ldr	r3, [sp, #4]
   23a88:	3380      	adds	r3, #128	; 0x80
   23a8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   23a8e:	2324      	movs	r3, #36	; 0x24
   23a90:	fb03 6305 	mla	r3, r3, r5, r6
   23a94:	7922      	ldrb	r2, [r4, #4]
   23a96:	779a      	strb	r2, [r3, #30]

    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   23a98:	7823      	ldrb	r3, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
   23a9a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   23a9e:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   23aa0:	f8c7 850c 	str.w	r8, [r7, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   23aa4:	f8c7 a510 	str.w	sl, [r7, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   23aa8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   23aac:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   23aae:	7b22      	ldrb	r2, [r4, #12]
   23ab0:	3b00      	subs	r3, #0
   23ab2:	bf18      	it	ne
   23ab4:	2301      	movne	r3, #1
    switch (spi_mode)
   23ab6:	2a02      	cmp	r2, #2
   23ab8:	d02e      	beq.n	23b18 <nrfx_spim_init+0x164>
   23aba:	2a03      	cmp	r2, #3
   23abc:	d02f      	beq.n	23b1e <nrfx_spim_init+0x16a>
   23abe:	2a01      	cmp	r2, #1
   23ac0:	d101      	bne.n	23ac6 <nrfx_spim_init+0x112>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   23ac2:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   23ac6:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   23aca:	79a3      	ldrb	r3, [r4, #6]
   23acc:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   23ad0:	2307      	movs	r3, #7
   23ad2:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   23ad6:	2324      	movs	r3, #36	; 0x24
   23ad8:	436b      	muls	r3, r5
   23ada:	58f3      	ldr	r3, [r6, r3]
   23adc:	b12b      	cbz	r3, 23aea <nrfx_spim_init+0x136>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   23ade:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   23ae2:	f340 3007 	sbfx	r0, r0, #12, #8
   23ae6:	f7f3 f92f 	bl	16d48 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   23aea:	2324      	movs	r3, #36	; 0x24
   23aec:	fb03 6505 	mla	r5, r3, r5, r6
   23af0:	2300      	movs	r3, #0
   23af2:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23af4:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   23af6:	4810      	ldr	r0, [pc, #64]	; (23b38 <nrfx_spim_init+0x184>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23af8:	772b      	strb	r3, [r5, #28]
}
   23afa:	b003      	add	sp, #12
   23afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   23b00:	f010 f86c 	bl	33bdc <nrf_gpio_pin_set>
   23b04:	e77f      	b.n	23a06 <nrfx_spim_init+0x52>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   23b06:	f04f 38ff 	mov.w	r8, #4294967295
   23b0a:	e798      	b.n	23a3e <nrfx_spim_init+0x8a>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   23b0c:	f04f 3aff 	mov.w	sl, #4294967295
   23b10:	e7a7      	b.n	23a62 <nrfx_spim_init+0xae>
            nrf_gpio_pin_set(p_config->ss_pin);
   23b12:	f010 f863 	bl	33bdc <nrf_gpio_pin_set>
   23b16:	e7b0      	b.n	23a7a <nrfx_spim_init+0xc6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   23b18:	f043 0304 	orr.w	r3, r3, #4
        break;
   23b1c:	e7d3      	b.n	23ac6 <nrfx_spim_init+0x112>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   23b1e:	f043 0306 	orr.w	r3, r3, #6
        break;
   23b22:	e7d0      	b.n	23ac6 <nrfx_spim_init+0x112>
        return err_code;
   23b24:	4805      	ldr	r0, [pc, #20]	; (23b3c <nrfx_spim_init+0x188>)
   23b26:	e7e8      	b.n	23afa <nrfx_spim_init+0x146>
   23b28:	0003d114 	.word	0x0003d114
   23b2c:	00037f2c 	.word	0x00037f2c
   23b30:	0003d17c 	.word	0x0003d17c
   23b34:	20016874 	.word	0x20016874
   23b38:	0bad0000 	.word	0x0bad0000
   23b3c:	0bad0005 	.word	0x0bad0005

00023b40 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   23b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   23b44:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   23b46:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   23b48:	4f6f      	ldr	r7, [pc, #444]	; (23d08 <nrfx_spim_xfer+0x1c8>)
{
   23b4a:	4680      	mov	r8, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   23b4c:	fb03 7306 	mla	r3, r3, r6, r7
   23b50:	7f1b      	ldrb	r3, [r3, #28]
{
   23b52:	460c      	mov	r4, r1
   23b54:	4615      	mov	r5, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   23b56:	b95b      	cbnz	r3, 23b70 <nrfx_spim_xfer+0x30>
   23b58:	496c      	ldr	r1, [pc, #432]	; (23d0c <nrfx_spim_xfer+0x1cc>)
   23b5a:	486d      	ldr	r0, [pc, #436]	; (23d10 <nrfx_spim_xfer+0x1d0>)
   23b5c:	f240 23d5 	movw	r3, #725	; 0x2d5
   23b60:	4a6c      	ldr	r2, [pc, #432]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23b62:	f00a f911 	bl	2dd88 <printk>
   23b66:	f240 21d5 	movw	r1, #725	; 0x2d5
   23b6a:	486a      	ldr	r0, [pc, #424]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23b6c:	f00a fbf2 	bl	2e354 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   23b70:	6823      	ldr	r3, [r4, #0]
   23b72:	b96b      	cbnz	r3, 23b90 <nrfx_spim_xfer+0x50>
   23b74:	6863      	ldr	r3, [r4, #4]
   23b76:	b15b      	cbz	r3, 23b90 <nrfx_spim_xfer+0x50>
   23b78:	4967      	ldr	r1, [pc, #412]	; (23d18 <nrfx_spim_xfer+0x1d8>)
   23b7a:	4865      	ldr	r0, [pc, #404]	; (23d10 <nrfx_spim_xfer+0x1d0>)
   23b7c:	f240 23d6 	movw	r3, #726	; 0x2d6
   23b80:	4a64      	ldr	r2, [pc, #400]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23b82:	f00a f901 	bl	2dd88 <printk>
   23b86:	f240 21d6 	movw	r1, #726	; 0x2d6
   23b8a:	4862      	ldr	r0, [pc, #392]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23b8c:	f00a fbe2 	bl	2e354 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   23b90:	68a3      	ldr	r3, [r4, #8]
   23b92:	b96b      	cbnz	r3, 23bb0 <nrfx_spim_xfer+0x70>
   23b94:	68e3      	ldr	r3, [r4, #12]
   23b96:	b15b      	cbz	r3, 23bb0 <nrfx_spim_xfer+0x70>
   23b98:	4960      	ldr	r1, [pc, #384]	; (23d1c <nrfx_spim_xfer+0x1dc>)
   23b9a:	485d      	ldr	r0, [pc, #372]	; (23d10 <nrfx_spim_xfer+0x1d0>)
   23b9c:	f240 23d7 	movw	r3, #727	; 0x2d7
   23ba0:	4a5c      	ldr	r2, [pc, #368]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23ba2:	f00a f8f1 	bl	2dd88 <printk>
   23ba6:	f240 21d7 	movw	r1, #727	; 0x2d7
   23baa:	485a      	ldr	r0, [pc, #360]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23bac:	f00a fbd2 	bl	2e354 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   23bb0:	f898 3004 	ldrb.w	r3, [r8, #4]
   23bb4:	b93b      	cbnz	r3, 23bc6 <nrfx_spim_xfer+0x86>
   23bb6:	68e3      	ldr	r3, [r4, #12]
   23bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   23bbc:	d203      	bcs.n	23bc6 <nrfx_spim_xfer+0x86>
   23bbe:	6863      	ldr	r3, [r4, #4]
   23bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   23bc4:	d30b      	bcc.n	23bde <nrfx_spim_xfer+0x9e>
   23bc6:	4956      	ldr	r1, [pc, #344]	; (23d20 <nrfx_spim_xfer+0x1e0>)
   23bc8:	4851      	ldr	r0, [pc, #324]	; (23d10 <nrfx_spim_xfer+0x1d0>)
   23bca:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   23bce:	4a51      	ldr	r2, [pc, #324]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23bd0:	f00a f8da 	bl	2dd88 <printk>
   23bd4:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   23bd8:	484e      	ldr	r0, [pc, #312]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23bda:	f00a fbbb 	bl	2e354 <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   23bde:	f015 0908 	ands.w	r9, r5, #8
   23be2:	d011      	beq.n	23c08 <nrfx_spim_xfer+0xc8>
   23be4:	2324      	movs	r3, #36	; 0x24
   23be6:	fb03 7306 	mla	r3, r3, r6, r7
   23bea:	7fdb      	ldrb	r3, [r3, #31]
   23bec:	2bff      	cmp	r3, #255	; 0xff
   23bee:	d00b      	beq.n	23c08 <nrfx_spim_xfer+0xc8>
   23bf0:	494c      	ldr	r1, [pc, #304]	; (23d24 <nrfx_spim_xfer+0x1e4>)
   23bf2:	4847      	ldr	r0, [pc, #284]	; (23d10 <nrfx_spim_xfer+0x1d0>)
   23bf4:	f240 23db 	movw	r3, #731	; 0x2db
   23bf8:	4a46      	ldr	r2, [pc, #280]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23bfa:	f00a f8c5 	bl	2dd88 <printk>
   23bfe:	f240 21db 	movw	r1, #731	; 0x2db
   23c02:	4844      	ldr	r0, [pc, #272]	; (23d14 <nrfx_spim_xfer+0x1d4>)
   23c04:	f00a fba6 	bl	2e354 <assert_post_action>
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   23c08:	2324      	movs	r3, #36	; 0x24
   23c0a:	4373      	muls	r3, r6
   23c0c:	18fa      	adds	r2, r7, r3
   23c0e:	7f51      	ldrb	r1, [r2, #29]
   23c10:	2900      	cmp	r1, #0
   23c12:	d177      	bne.n	23d04 <nrfx_spim_xfer+0x1c4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   23c14:	58fb      	ldr	r3, [r7, r3]
   23c16:	b123      	cbz	r3, 23c22 <nrfx_spim_xfer+0xe2>
   23c18:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   23c1c:	bf04      	itt	eq
   23c1e:	2301      	moveq	r3, #1
   23c20:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   23c22:	f04f 0c24 	mov.w	ip, #36	; 0x24
   23c26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   23c2a:	fb0c 7c06 	mla	ip, ip, r6, r7
   23c2e:	f10c 0e0c 	add.w	lr, ip, #12
   23c32:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   23c36:	f89c 001f 	ldrb.w	r0, [ip, #31]
   23c3a:	28ff      	cmp	r0, #255	; 0xff
   23c3c:	d004      	beq.n	23c48 <nrfx_spim_xfer+0x108>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   23c3e:	f89c 301e 	ldrb.w	r3, [ip, #30]
   23c42:	b1bb      	cbz	r3, 23c74 <nrfx_spim_xfer+0x134>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   23c44:	f00f ffca 	bl	33bdc <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   23c48:	6821      	ldr	r1, [r4, #0]
   23c4a:	b121      	cbz	r1, 23c56 <nrfx_spim_xfer+0x116>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   23c4c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   23c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   23c54:	d106      	bne.n	23c64 <nrfx_spim_xfer+0x124>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   23c56:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   23c58:	b17a      	cbz	r2, 23c7a <nrfx_spim_xfer+0x13a>
   23c5a:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   23c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   23c62:	d00a      	beq.n	23c7a <nrfx_spim_xfer+0x13a>
        p_cb->transfer_in_progress = false;
   23c64:	2324      	movs	r3, #36	; 0x24
   23c66:	fb03 7606 	mla	r6, r3, r6, r7
   23c6a:	2300      	movs	r3, #0
        return err_code;
   23c6c:	482e      	ldr	r0, [pc, #184]	; (23d28 <nrfx_spim_xfer+0x1e8>)
        p_cb->transfer_in_progress = false;
   23c6e:	7773      	strb	r3, [r6, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   23c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   23c74:	f00f ffa6 	bl	33bc4 <nrf_gpio_pin_clear>
   23c78:	e7e6      	b.n	23c48 <nrfx_spim_xfer+0x108>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   23c7a:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   23c7e:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23c80:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   23c84:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   23c88:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   23c8a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23c8e:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   23c90:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23c94:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   23c98:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   23c9c:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   23ca0:	bf18      	it	ne
   23ca2:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   23ca4:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   23ca8:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   23cac:	bf18      	it	ne
   23cae:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   23cb0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   23cb4:	f1b9 0f00 	cmp.w	r9, #0
   23cb8:	d101      	bne.n	23cbe <nrfx_spim_xfer+0x17e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23cba:	2201      	movs	r2, #1
   23cbc:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   23cbe:	2224      	movs	r2, #36	; 0x24
   23cc0:	4372      	muls	r2, r6
   23cc2:	58ba      	ldr	r2, [r7, r2]
   23cc4:	b9aa      	cbnz	r2, 23cf2 <nrfx_spim_xfer+0x1b2>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   23cc6:	f1b9 0f00 	cmp.w	r9, #0
   23cca:	d103      	bne.n	23cd4 <nrfx_spim_xfer+0x194>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23ccc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   23cd0:	2a00      	cmp	r2, #0
   23cd2:	d0fb      	beq.n	23ccc <nrfx_spim_xfer+0x18c>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   23cd4:	2324      	movs	r3, #36	; 0x24
   23cd6:	fb03 7606 	mla	r6, r3, r6, r7
   23cda:	7ff0      	ldrb	r0, [r6, #31]
   23cdc:	28ff      	cmp	r0, #255	; 0xff
   23cde:	d003      	beq.n	23ce8 <nrfx_spim_xfer+0x1a8>
                if (p_cb->ss_active_high)
   23ce0:	7fb3      	ldrb	r3, [r6, #30]
   23ce2:	b11b      	cbz	r3, 23cec <nrfx_spim_xfer+0x1ac>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   23ce4:	f00f ff6e 	bl	33bc4 <nrf_gpio_pin_clear>
    return err_code;
   23ce8:	4810      	ldr	r0, [pc, #64]	; (23d2c <nrfx_spim_xfer+0x1ec>)
   23cea:	e7c1      	b.n	23c70 <nrfx_spim_xfer+0x130>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   23cec:	f00f ff76 	bl	33bdc <nrf_gpio_pin_set>
   23cf0:	e7fa      	b.n	23ce8 <nrfx_spim_xfer+0x1a8>
    if (!enable)
   23cf2:	2240      	movs	r2, #64	; 0x40
   23cf4:	f015 0f04 	tst.w	r5, #4
    p_reg->INTENCLR = mask;
   23cf8:	bf14      	ite	ne
   23cfa:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   23cfe:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   23d02:	e7f1      	b.n	23ce8 <nrfx_spim_xfer+0x1a8>
        return err_code;
   23d04:	480a      	ldr	r0, [pc, #40]	; (23d30 <nrfx_spim_xfer+0x1f0>)
   23d06:	e7b3      	b.n	23c70 <nrfx_spim_xfer+0x130>
   23d08:	20016874 	.word	0x20016874
   23d0c:	0003d1b8 	.word	0x0003d1b8
   23d10:	00037f2c 	.word	0x00037f2c
   23d14:	0003d17c 	.word	0x0003d17c
   23d18:	0003d1e4 	.word	0x0003d1e4
   23d1c:	0003d22b 	.word	0x0003d22b
   23d20:	0003d272 	.word	0x0003d272
   23d24:	0003d316 	.word	0x0003d316
   23d28:	0bad000a 	.word	0x0bad000a
   23d2c:	0bad0000 	.word	0x0bad0000
   23d30:	0bad000b 	.word	0x0bad000b

00023d34 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23d34:	4b16      	ldr	r3, [pc, #88]	; (23d90 <nrfx_spim_3_irq_handler+0x5c>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   23d36:	b510      	push	{r4, lr}
   23d38:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   23d3c:	b332      	cbz	r2, 23d8c <nrfx_spim_3_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23d3e:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   23d40:	4c14      	ldr	r4, [pc, #80]	; (23d94 <nrfx_spim_3_irq_handler+0x60>)
   23d42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   23d46:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   23d4a:	6823      	ldr	r3, [r4, #0]
   23d4c:	b95b      	cbnz	r3, 23d66 <nrfx_spim_3_irq_handler+0x32>
   23d4e:	4912      	ldr	r1, [pc, #72]	; (23d98 <nrfx_spim_3_irq_handler+0x64>)
   23d50:	4812      	ldr	r0, [pc, #72]	; (23d9c <nrfx_spim_3_irq_handler+0x68>)
   23d52:	f240 333e 	movw	r3, #830	; 0x33e
   23d56:	4a12      	ldr	r2, [pc, #72]	; (23da0 <nrfx_spim_3_irq_handler+0x6c>)
   23d58:	f00a f816 	bl	2dd88 <printk>
   23d5c:	f240 313e 	movw	r1, #830	; 0x33e
   23d60:	480f      	ldr	r0, [pc, #60]	; (23da0 <nrfx_spim_3_irq_handler+0x6c>)
   23d62:	f00a faf7 	bl	2e354 <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   23d66:	7fe0      	ldrb	r0, [r4, #31]
   23d68:	28ff      	cmp	r0, #255	; 0xff
   23d6a:	d003      	beq.n	23d74 <nrfx_spim_3_irq_handler+0x40>
            if (p_cb->ss_active_high)
   23d6c:	7fa3      	ldrb	r3, [r4, #30]
   23d6e:	b153      	cbz	r3, 23d86 <nrfx_spim_3_irq_handler+0x52>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   23d70:	f00f ff28 	bl	33bc4 <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   23d74:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   23d76:	480b      	ldr	r0, [pc, #44]	; (23da4 <nrfx_spim_3_irq_handler+0x70>)
    p_cb->transfer_in_progress = false;
   23d78:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   23d7a:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   23d7c:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   23d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   23d84:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   23d86:	f00f ff29 	bl	33bdc <nrf_gpio_pin_set>
   23d8a:	e7f3      	b.n	23d74 <nrfx_spim_3_irq_handler+0x40>
}
   23d8c:	bd10      	pop	{r4, pc}
   23d8e:	bf00      	nop
   23d90:	4000b000 	.word	0x4000b000
   23d94:	20016874 	.word	0x20016874
   23d98:	0003d346 	.word	0x0003d346
   23d9c:	00037f2c 	.word	0x00037f2c
   23da0:	0003d17c 	.word	0x0003d17c
   23da4:	2001687c 	.word	0x2001687c

00023da8 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   23da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23dac:	4605      	mov	r5, r0
   23dae:	4690      	mov	r8, r2
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   23db0:	460c      	mov	r4, r1
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   23db2:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_config);
   23db4:	b949      	cbnz	r1, 23dca <nrfx_timer_init+0x22>
   23db6:	493d      	ldr	r1, [pc, #244]	; (23eac <nrfx_timer_init+0x104>)
   23db8:	483d      	ldr	r0, [pc, #244]	; (23eb0 <nrfx_timer_init+0x108>)
   23dba:	2353      	movs	r3, #83	; 0x53
   23dbc:	4a3d      	ldr	r2, [pc, #244]	; (23eb4 <nrfx_timer_init+0x10c>)
   23dbe:	f009 ffe3 	bl	2dd88 <printk>
   23dc2:	2153      	movs	r1, #83	; 0x53
   23dc4:	483b      	ldr	r0, [pc, #236]	; (23eb4 <nrfx_timer_init+0x10c>)
   23dc6:	f00a fac5 	bl	2e354 <assert_post_action>
    NRFX_ASSERT(timer_event_handler);
   23dca:	f1b8 0f00 	cmp.w	r8, #0
   23dce:	d109      	bne.n	23de4 <nrfx_timer_init+0x3c>
   23dd0:	4939      	ldr	r1, [pc, #228]	; (23eb8 <nrfx_timer_init+0x110>)
   23dd2:	4837      	ldr	r0, [pc, #220]	; (23eb0 <nrfx_timer_init+0x108>)
   23dd4:	2354      	movs	r3, #84	; 0x54
   23dd6:	4a37      	ldr	r2, [pc, #220]	; (23eb4 <nrfx_timer_init+0x10c>)
   23dd8:	f009 ffd6 	bl	2dd88 <printk>
   23ddc:	2154      	movs	r1, #84	; 0x54
   23dde:	4835      	ldr	r0, [pc, #212]	; (23eb4 <nrfx_timer_init+0x10c>)
   23de0:	f00a fab8 	bl	2e354 <assert_post_action>

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   23de4:	230c      	movs	r3, #12
   23de6:	4e35      	ldr	r6, [pc, #212]	; (23ebc <nrfx_timer_init+0x114>)
   23de8:	fb03 6307 	mla	r3, r3, r7, r6
   23dec:	7a1b      	ldrb	r3, [r3, #8]
   23dee:	2b00      	cmp	r3, #0
   23df0:	d159      	bne.n	23ea6 <nrfx_timer_init+0xfe>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   23df2:	682b      	ldr	r3, [r5, #0]
   23df4:	4a32      	ldr	r2, [pc, #200]	; (23ec0 <nrfx_timer_init+0x118>)
   23df6:	4293      	cmp	r3, r2
   23df8:	d007      	beq.n	23e0a <nrfx_timer_init+0x62>
   23dfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   23dfe:	4293      	cmp	r3, r2
   23e00:	d003      	beq.n	23e0a <nrfx_timer_init+0x62>
   23e02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   23e06:	4293      	cmp	r3, r2
   23e08:	d102      	bne.n	23e10 <nrfx_timer_init+0x68>
   23e0a:	78a3      	ldrb	r3, [r4, #2]
   23e0c:	2b03      	cmp	r3, #3
   23e0e:	d909      	bls.n	23e24 <nrfx_timer_init+0x7c>
   23e10:	492c      	ldr	r1, [pc, #176]	; (23ec4 <nrfx_timer_init+0x11c>)
   23e12:	4827      	ldr	r0, [pc, #156]	; (23eb0 <nrfx_timer_init+0x108>)
   23e14:	2361      	movs	r3, #97	; 0x61
   23e16:	4a27      	ldr	r2, [pc, #156]	; (23eb4 <nrfx_timer_init+0x10c>)
   23e18:	f009 ffb6 	bl	2dd88 <printk>
   23e1c:	2161      	movs	r1, #97	; 0x61
   23e1e:	4825      	ldr	r0, [pc, #148]	; (23eb4 <nrfx_timer_init+0x10c>)
   23e20:	f00a fa98 	bl	2e354 <assert_post_action>

    p_cb->handler = timer_event_handler;
   23e24:	230c      	movs	r3, #12
   23e26:	437b      	muls	r3, r7
   23e28:	18f2      	adds	r2, r6, r3
   23e2a:	f846 8003 	str.w	r8, [r6, r3]
    p_cb->context = p_config->p_context;
   23e2e:	6863      	ldr	r3, [r4, #4]
   23e30:	6828      	ldr	r0, [r5, #0]
   23e32:	6053      	str	r3, [r2, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   23e34:	2300      	movs	r3, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23e36:	469c      	mov	ip, r3
   23e38:	7969      	ldrb	r1, [r5, #5]
   23e3a:	b2da      	uxtb	r2, r3
   23e3c:	4291      	cmp	r1, r2
   23e3e:	d82a      	bhi.n	23e96 <nrfx_timer_init+0xee>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   23e40:	f340 3007 	sbfx	r0, r0, #12, #8
   23e44:	f7f2 ff80 	bl	16d48 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   23e48:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   23e4a:	7862      	ldrb	r2, [r4, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   23e4c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   23e50:	f002 0203 	and.w	r2, r2, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   23e54:	f021 0103 	bic.w	r1, r1, #3
   23e58:	430a      	orrs	r2, r1
   23e5a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   23e5e:	f8d3 1508 	ldr.w	r1, [r3, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   23e62:	78a2      	ldrb	r2, [r4, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   23e64:	f021 0103 	bic.w	r1, r1, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   23e68:	f002 0203 	and.w	r2, r2, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   23e6c:	430a      	orrs	r2, r1
   23e6e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   23e72:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   23e76:	7822      	ldrb	r2, [r4, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   23e78:	f021 010f 	bic.w	r1, r1, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   23e7c:	f002 020f 	and.w	r2, r2, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   23e80:	430a      	orrs	r2, r1
   23e82:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23e86:	230c      	movs	r3, #12
   23e88:	fb03 6607 	mla	r6, r3, r7, r6
   23e8c:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   23e8e:	480e      	ldr	r0, [pc, #56]	; (23ec8 <nrfx_timer_init+0x120>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23e90:	7233      	strb	r3, [r6, #8]
}
   23e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23e96:	009a      	lsls	r2, r3, #2
   23e98:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   23e9c:	f840 c002 	str.w	ip, [r0, r2]
   23ea0:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   23ea2:	3301      	adds	r3, #1
   23ea4:	e7c9      	b.n	23e3a <nrfx_timer_init+0x92>
        return err_code;
   23ea6:	4809      	ldr	r0, [pc, #36]	; (23ecc <nrfx_timer_init+0x124>)
   23ea8:	e7f3      	b.n	23e92 <nrfx_timer_init+0xea>
   23eaa:	bf00      	nop
   23eac:	0003d114 	.word	0x0003d114
   23eb0:	00037f2c 	.word	0x00037f2c
   23eb4:	0003d354 	.word	0x0003d354
   23eb8:	0003d391 	.word	0x0003d391
   23ebc:	20016898 	.word	0x20016898
   23ec0:	4000f000 	.word	0x4000f000
   23ec4:	0003d3a5 	.word	0x0003d3a5
   23ec8:	0bad0000 	.word	0x0bad0000
   23ecc:	0bad0005 	.word	0x0bad0005

00023ed0 <nrfx_timer_enable>:
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   23ed0:	210c      	movs	r1, #12
{
   23ed2:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   23ed4:	4d0d      	ldr	r5, [pc, #52]	; (23f0c <nrfx_timer_enable+0x3c>)
   23ed6:	7902      	ldrb	r2, [r0, #4]
{
   23ed8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   23eda:	fb01 5202 	mla	r2, r1, r2, r5
   23ede:	7a12      	ldrb	r2, [r2, #8]
   23ee0:	2a01      	cmp	r2, #1
   23ee2:	d009      	beq.n	23ef8 <nrfx_timer_enable+0x28>
   23ee4:	490a      	ldr	r1, [pc, #40]	; (23f10 <nrfx_timer_enable+0x40>)
   23ee6:	480b      	ldr	r0, [pc, #44]	; (23f14 <nrfx_timer_enable+0x44>)
   23ee8:	238f      	movs	r3, #143	; 0x8f
   23eea:	4a0b      	ldr	r2, [pc, #44]	; (23f18 <nrfx_timer_enable+0x48>)
   23eec:	f009 ff4c 	bl	2dd88 <printk>
   23ef0:	218f      	movs	r1, #143	; 0x8f
   23ef2:	4809      	ldr	r0, [pc, #36]	; (23f18 <nrfx_timer_enable+0x48>)
   23ef4:	f00a fa2e 	bl	2e354 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23ef8:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   23efa:	6823      	ldr	r3, [r4, #0]
   23efc:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   23efe:	220c      	movs	r2, #12
   23f00:	7923      	ldrb	r3, [r4, #4]
   23f02:	fb02 5303 	mla	r3, r2, r3, r5
   23f06:	2202      	movs	r2, #2
   23f08:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   23f0a:	bd38      	pop	{r3, r4, r5, pc}
   23f0c:	20016898 	.word	0x20016898
   23f10:	0003dae6 	.word	0x0003dae6
   23f14:	00037f2c 	.word	0x00037f2c
   23f18:	0003d354 	.word	0x0003d354

00023f1c <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23f1c:	210c      	movs	r1, #12
{
   23f1e:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23f20:	4d0c      	ldr	r5, [pc, #48]	; (23f54 <nrfx_timer_disable+0x38>)
   23f22:	7902      	ldrb	r2, [r0, #4]
{
   23f24:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23f26:	fb01 5202 	mla	r2, r1, r2, r5
   23f2a:	7a12      	ldrb	r2, [r2, #8]
   23f2c:	b94a      	cbnz	r2, 23f42 <nrfx_timer_disable+0x26>
   23f2e:	490a      	ldr	r1, [pc, #40]	; (23f58 <nrfx_timer_disable+0x3c>)
   23f30:	480a      	ldr	r0, [pc, #40]	; (23f5c <nrfx_timer_disable+0x40>)
   23f32:	2397      	movs	r3, #151	; 0x97
   23f34:	4a0a      	ldr	r2, [pc, #40]	; (23f60 <nrfx_timer_disable+0x44>)
   23f36:	f009 ff27 	bl	2dd88 <printk>
   23f3a:	2197      	movs	r1, #151	; 0x97
   23f3c:	4808      	ldr	r0, [pc, #32]	; (23f60 <nrfx_timer_disable+0x44>)
   23f3e:	f00a fa09 	bl	2e354 <assert_post_action>
   23f42:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   23f44:	210c      	movs	r1, #12
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   23f46:	6823      	ldr	r3, [r4, #0]
   23f48:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   23f4a:	7923      	ldrb	r3, [r4, #4]
   23f4c:	fb01 5303 	mla	r3, r1, r3, r5
   23f50:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   23f52:	bd38      	pop	{r3, r4, r5, pc}
   23f54:	20016898 	.word	0x20016898
   23f58:	0003db28 	.word	0x0003db28
   23f5c:	00037f2c 	.word	0x00037f2c
   23f60:	0003d354 	.word	0x0003d354

00023f64 <nrfx_timer_uninit>:
{
   23f64:	b538      	push	{r3, r4, r5, lr}
   23f66:	4604      	mov	r4, r0
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   23f68:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   23f6a:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   23f6c:	f340 3007 	sbfx	r0, r0, #12, #8
   23f70:	f7f2 fefa 	bl	16d68 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   23f74:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   23f76:	4620      	mov	r0, r4
   23f78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   23f7c:	f04f 32ff 	mov.w	r2, #4294967295
    p_reg->SHORTS &= ~(mask);
   23f80:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   23f84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   23f88:	f7ff ffc8 	bl	23f1c <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   23f8c:	210c      	movs	r1, #12
   23f8e:	7923      	ldrb	r3, [r4, #4]
   23f90:	4a02      	ldr	r2, [pc, #8]	; (23f9c <nrfx_timer_uninit+0x38>)
   23f92:	fb01 2303 	mla	r3, r1, r3, r2
   23f96:	721d      	strb	r5, [r3, #8]
}
   23f98:	bd38      	pop	{r3, r4, r5, pc}
   23f9a:	bf00      	nop
   23f9c:	20016898 	.word	0x20016898

00023fa0 <nrfx_timer_clear>:
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23fa0:	210c      	movs	r1, #12
{
   23fa2:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23fa4:	4a0a      	ldr	r2, [pc, #40]	; (23fd0 <nrfx_timer_clear+0x30>)
   23fa6:	7903      	ldrb	r3, [r0, #4]
{
   23fa8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23faa:	fb01 2303 	mla	r3, r1, r3, r2
   23fae:	7a1b      	ldrb	r3, [r3, #8]
   23fb0:	b94b      	cbnz	r3, 23fc6 <nrfx_timer_clear+0x26>
   23fb2:	4908      	ldr	r1, [pc, #32]	; (23fd4 <nrfx_timer_clear+0x34>)
   23fb4:	4808      	ldr	r0, [pc, #32]	; (23fd8 <nrfx_timer_clear+0x38>)
   23fb6:	23b3      	movs	r3, #179	; 0xb3
   23fb8:	4a08      	ldr	r2, [pc, #32]	; (23fdc <nrfx_timer_clear+0x3c>)
   23fba:	f009 fee5 	bl	2dd88 <printk>
   23fbe:	21b3      	movs	r1, #179	; 0xb3
   23fc0:	4806      	ldr	r0, [pc, #24]	; (23fdc <nrfx_timer_clear+0x3c>)
   23fc2:	f00a f9c7 	bl	2e354 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23fc6:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   23fc8:	6823      	ldr	r3, [r4, #0]
   23fca:	60da      	str	r2, [r3, #12]
}
   23fcc:	bd10      	pop	{r4, pc}
   23fce:	bf00      	nop
   23fd0:	20016898 	.word	0x20016898
   23fd4:	0003db28 	.word	0x0003db28
   23fd8:	00037f2c 	.word	0x00037f2c
   23fdc:	0003d354 	.word	0x0003d354

00023fe0 <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23fe0:	210c      	movs	r1, #12
{
   23fe2:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23fe4:	4a12      	ldr	r2, [pc, #72]	; (24030 <nrfx_timer_increment+0x50>)
   23fe6:	7903      	ldrb	r3, [r0, #4]
{
   23fe8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   23fea:	fb01 2303 	mla	r3, r1, r3, r2
   23fee:	7a1b      	ldrb	r3, [r3, #8]
   23ff0:	b94b      	cbnz	r3, 24006 <nrfx_timer_increment+0x26>
   23ff2:	4910      	ldr	r1, [pc, #64]	; (24034 <nrfx_timer_increment+0x54>)
   23ff4:	4810      	ldr	r0, [pc, #64]	; (24038 <nrfx_timer_increment+0x58>)
   23ff6:	23b9      	movs	r3, #185	; 0xb9
   23ff8:	4a10      	ldr	r2, [pc, #64]	; (2403c <nrfx_timer_increment+0x5c>)
   23ffa:	f009 fec5 	bl	2dd88 <printk>
   23ffe:	21b9      	movs	r1, #185	; 0xb9
   24000:	480e      	ldr	r0, [pc, #56]	; (2403c <nrfx_timer_increment+0x5c>)
   24002:	f00a f9a7 	bl	2e354 <assert_post_action>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   24006:	6823      	ldr	r3, [r4, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   24008:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   2400c:	f013 0fff 	tst.w	r3, #255	; 0xff
   24010:	d109      	bne.n	24026 <nrfx_timer_increment+0x46>
   24012:	490b      	ldr	r1, [pc, #44]	; (24040 <nrfx_timer_increment+0x60>)
   24014:	4808      	ldr	r0, [pc, #32]	; (24038 <nrfx_timer_increment+0x58>)
   24016:	23ba      	movs	r3, #186	; 0xba
   24018:	4a08      	ldr	r2, [pc, #32]	; (2403c <nrfx_timer_increment+0x5c>)
   2401a:	f009 feb5 	bl	2dd88 <printk>
   2401e:	21ba      	movs	r1, #186	; 0xba
   24020:	4806      	ldr	r0, [pc, #24]	; (2403c <nrfx_timer_increment+0x5c>)
   24022:	f00a f997 	bl	2e354 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24026:	2201      	movs	r2, #1

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
   24028:	6823      	ldr	r3, [r4, #0]
   2402a:	609a      	str	r2, [r3, #8]
}
   2402c:	bd10      	pop	{r4, pc}
   2402e:	bf00      	nop
   24030:	20016898 	.word	0x20016898
   24034:	0003db28 	.word	0x0003db28
   24038:	00037f2c 	.word	0x00037f2c
   2403c:	0003d354 	.word	0x0003d354
   24040:	0003db6c 	.word	0x0003db6c

00024044 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   24044:	b538      	push	{r3, r4, r5, lr}
   24046:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   24048:	210c      	movs	r1, #12
   2404a:	7903      	ldrb	r3, [r0, #4]
   2404c:	4a13      	ldr	r2, [pc, #76]	; (2409c <nrfx_timer_capture+0x58>)
{
   2404e:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   24050:	fb01 2303 	mla	r3, r1, r3, r2
   24054:	7a1b      	ldrb	r3, [r3, #8]
   24056:	b94b      	cbnz	r3, 2406c <nrfx_timer_capture+0x28>
   24058:	4911      	ldr	r1, [pc, #68]	; (240a0 <nrfx_timer_capture+0x5c>)
   2405a:	4812      	ldr	r0, [pc, #72]	; (240a4 <nrfx_timer_capture+0x60>)
   2405c:	23c2      	movs	r3, #194	; 0xc2
   2405e:	4a12      	ldr	r2, [pc, #72]	; (240a8 <nrfx_timer_capture+0x64>)
   24060:	f009 fe92 	bl	2dd88 <printk>
   24064:	21c2      	movs	r1, #194	; 0xc2
   24066:	4810      	ldr	r0, [pc, #64]	; (240a8 <nrfx_timer_capture+0x64>)
   24068:	f00a f974 	bl	2e354 <assert_post_action>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   2406c:	796b      	ldrb	r3, [r5, #5]
   2406e:	42a3      	cmp	r3, r4
   24070:	d809      	bhi.n	24086 <nrfx_timer_capture+0x42>
   24072:	490e      	ldr	r1, [pc, #56]	; (240ac <nrfx_timer_capture+0x68>)
   24074:	480b      	ldr	r0, [pc, #44]	; (240a4 <nrfx_timer_capture+0x60>)
   24076:	23c3      	movs	r3, #195	; 0xc3
   24078:	4a0b      	ldr	r2, [pc, #44]	; (240a8 <nrfx_timer_capture+0x64>)
   2407a:	f009 fe85 	bl	2dd88 <printk>
   2407e:	21c3      	movs	r1, #195	; 0xc3
   24080:	4809      	ldr	r0, [pc, #36]	; (240a8 <nrfx_timer_capture+0x64>)
   24082:	f00a f967 	bl	2e354 <assert_post_action>
   24086:	2101      	movs	r1, #1
    return (uint32_t)p_reg->CC[cc_channel];
}

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   24088:	00a3      	lsls	r3, r4, #2

    nrf_timer_task_trigger(p_instance->p_reg,
   2408a:	682a      	ldr	r2, [r5, #0]
   2408c:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2408e:	b2db      	uxtb	r3, r3
   24090:	50d1      	str	r1, [r2, r3]
    return (uint32_t)p_reg->CC[cc_channel];
   24092:	f504 74a8 	add.w	r4, r4, #336	; 0x150
   24096:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
}
   2409a:	bd38      	pop	{r3, r4, r5, pc}
   2409c:	20016898 	.word	0x20016898
   240a0:	0003db28 	.word	0x0003db28
   240a4:	00037f2c 	.word	0x00037f2c
   240a8:	0003d354 	.word	0x0003d354
   240ac:	0003dbaa 	.word	0x0003dbaa

000240b0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   240b0:	6803      	ldr	r3, [r0, #0]
{
   240b2:	b510      	push	{r4, lr}
    switch (port)
   240b4:	095a      	lsrs	r2, r3, #5
   240b6:	bf0c      	ite	eq
   240b8:	f04f 32ff 	moveq.w	r2, #4294967295
   240bc:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   240be:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   240c2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   240c6:	07db      	lsls	r3, r3, #31
{
   240c8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   240ca:	d40b      	bmi.n	240e4 <nrf_gpio_pin_port_decode+0x34>
   240cc:	490f      	ldr	r1, [pc, #60]	; (2410c <nrf_gpio_pin_port_decode+0x5c>)
   240ce:	4810      	ldr	r0, [pc, #64]	; (24110 <nrf_gpio_pin_port_decode+0x60>)
   240d0:	f44f 7305 	mov.w	r3, #532	; 0x214
   240d4:	4a0f      	ldr	r2, [pc, #60]	; (24114 <nrf_gpio_pin_port_decode+0x64>)
   240d6:	f009 fe57 	bl	2dd88 <printk>
   240da:	f44f 7105 	mov.w	r1, #532	; 0x214
   240de:	480d      	ldr	r0, [pc, #52]	; (24114 <nrf_gpio_pin_port_decode+0x64>)
   240e0:	f00a f938 	bl	2e354 <assert_post_action>
    uint32_t pin_number = *p_pin;
   240e4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   240e6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   240ea:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   240ec:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   240ee:	d00b      	beq.n	24108 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   240f0:	4909      	ldr	r1, [pc, #36]	; (24118 <nrf_gpio_pin_port_decode+0x68>)
   240f2:	4807      	ldr	r0, [pc, #28]	; (24110 <nrf_gpio_pin_port_decode+0x60>)
   240f4:	f240 2319 	movw	r3, #537	; 0x219
   240f8:	4a06      	ldr	r2, [pc, #24]	; (24114 <nrf_gpio_pin_port_decode+0x64>)
   240fa:	f009 fe45 	bl	2dd88 <printk>
   240fe:	f240 2119 	movw	r1, #537	; 0x219
   24102:	4804      	ldr	r0, [pc, #16]	; (24114 <nrf_gpio_pin_port_decode+0x64>)
   24104:	f00a f926 	bl	2e354 <assert_post_action>
}
   24108:	4804      	ldr	r0, [pc, #16]	; (2411c <nrf_gpio_pin_port_decode+0x6c>)
   2410a:	bd10      	pop	{r4, pc}
   2410c:	0003a9df 	.word	0x0003a9df
   24110:	00037f2c 	.word	0x00037f2c
   24114:	0003a9ac 	.word	0x0003a9ac
   24118:	0003e845 	.word	0x0003e845
   2411c:	40842500 	.word	0x40842500

00024120 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   24120:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   24124:	4606      	mov	r6, r0
   24126:	4692      	mov	sl, r2
   24128:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   2412a:	460c      	mov	r4, r1
   2412c:	b959      	cbnz	r1, 24146 <nrfx_twim_init+0x26>
   2412e:	4932      	ldr	r1, [pc, #200]	; (241f8 <nrfx_twim_init+0xd8>)
   24130:	4832      	ldr	r0, [pc, #200]	; (241fc <nrfx_twim_init+0xdc>)
   24132:	f44f 7383 	mov.w	r3, #262	; 0x106
   24136:	4a32      	ldr	r2, [pc, #200]	; (24200 <nrfx_twim_init+0xe0>)
   24138:	f009 fe26 	bl	2dd88 <printk>
   2413c:	f44f 7183 	mov.w	r1, #262	; 0x106
   24140:	482f      	ldr	r0, [pc, #188]	; (24200 <nrfx_twim_init+0xe0>)
   24142:	f00a f907 	bl	2e354 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   24146:	e9d4 2300 	ldrd	r2, r3, [r4]
   2414a:	429a      	cmp	r2, r3
   2414c:	d10b      	bne.n	24166 <nrfx_twim_init+0x46>
   2414e:	492d      	ldr	r1, [pc, #180]	; (24204 <nrfx_twim_init+0xe4>)
   24150:	482a      	ldr	r0, [pc, #168]	; (241fc <nrfx_twim_init+0xdc>)
   24152:	f240 1307 	movw	r3, #263	; 0x107
   24156:	4a2a      	ldr	r2, [pc, #168]	; (24200 <nrfx_twim_init+0xe0>)
   24158:	f009 fe16 	bl	2dd88 <printk>
   2415c:	f240 1107 	movw	r1, #263	; 0x107
   24160:	4827      	ldr	r0, [pc, #156]	; (24200 <nrfx_twim_init+0xe0>)
   24162:	f00a f8f7 	bl	2e354 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   24166:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   24168:	f896 8004 	ldrb.w	r8, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2416c:	4d26      	ldr	r5, [pc, #152]	; (24208 <nrfx_twim_init+0xe8>)
   2416e:	fb07 f708 	mul.w	r7, r7, r8
   24172:	19e9      	adds	r1, r5, r7
   24174:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   24178:	2b00      	cmp	r3, #0
   2417a:	d13b      	bne.n	241f4 <nrfx_twim_init+0xd4>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   2417c:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
   2417e:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
   24182:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   24186:	7b63      	ldrb	r3, [r4, #13]
    p_cb->p_context       = p_context;
   24188:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2418c:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
   24190:	6823      	ldr	r3, [r4, #0]
    p_cb->handler         = event_handler;
   24192:	f845 a007 	str.w	sl, [r5, r7]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24196:	a801      	add	r0, sp, #4
#if NRFX_CHECK(NRFX_TWIM_NRF52_ANOMALY_109_WORKAROUND_ENABLED)
    p_cb->bus_frequency   = (nrf_twim_frequency_t)p_config->frequency;
#endif

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   24198:	f8d6 9000 	ldr.w	r9, [r6]
    reg->PIN_CNF[pin_number] = cnf;
   2419c:	f240 6a0c 	movw	sl, #1548	; 0x60c
   241a0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   241a2:	f7ff ff85 	bl	240b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   241a6:	9b01      	ldr	r3, [sp, #4]
   241a8:	3380      	adds	r3, #128	; 0x80
   241aa:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
   241ae:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   241b0:	a801      	add	r0, sp, #4
   241b2:	9301      	str	r3, [sp, #4]
   241b4:	f7ff ff7c 	bl	240b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   241b8:	9b01      	ldr	r3, [sp, #4]
   241ba:	3380      	adds	r3, #128	; 0x80
   241bc:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   241c0:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
   241c4:	f8c9 2508 	str.w	r2, [r9, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   241c8:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   241cc:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   241ce:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524

    if (p_cb->handler)
   241d2:	59eb      	ldr	r3, [r5, r7]
   241d4:	b123      	cbz	r3, 241e0 <nrfx_twim_init+0xc0>
   241d6:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   241d8:	f340 3007 	sbfx	r0, r0, #12, #8
   241dc:	f7f2 fdb4 	bl	16d48 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   241e0:	2334      	movs	r3, #52	; 0x34
   241e2:	fb03 5508 	mla	r5, r3, r8, r5
   241e6:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   241e8:	4808      	ldr	r0, [pc, #32]	; (2420c <nrfx_twim_init+0xec>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   241ea:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   241ee:	b002      	add	sp, #8
   241f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   241f4:	4806      	ldr	r0, [pc, #24]	; (24210 <nrfx_twim_init+0xf0>)
   241f6:	e7fa      	b.n	241ee <nrfx_twim_init+0xce>
   241f8:	0003d114 	.word	0x0003d114
   241fc:	00037f2c 	.word	0x00037f2c
   24200:	0003dbd4 	.word	0x0003dbd4
   24204:	0003dc10 	.word	0x0003dc10
   24208:	200168a4 	.word	0x200168a4
   2420c:	0bad0000 	.word	0x0bad0000
   24210:	0bad0005 	.word	0x0bad0005

00024214 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   24214:	2234      	movs	r2, #52	; 0x34
{
   24216:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   24218:	4d0f      	ldr	r5, [pc, #60]	; (24258 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2421a:	7904      	ldrb	r4, [r0, #4]
{
   2421c:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2421e:	fb02 5204 	mla	r2, r2, r4, r5
   24222:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   24226:	2a01      	cmp	r2, #1
   24228:	d00b      	beq.n	24242 <nrfx_twim_enable+0x2e>
   2422a:	490c      	ldr	r1, [pc, #48]	; (2425c <nrfx_twim_enable+0x48>)
   2422c:	480c      	ldr	r0, [pc, #48]	; (24260 <nrfx_twim_enable+0x4c>)
   2422e:	f44f 73b5 	mov.w	r3, #362	; 0x16a
   24232:	4a0c      	ldr	r2, [pc, #48]	; (24264 <nrfx_twim_enable+0x50>)
   24234:	f009 fda8 	bl	2dd88 <printk>
   24238:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   2423c:	4809      	ldr	r0, [pc, #36]	; (24264 <nrfx_twim_enable+0x50>)
   2423e:	f00a f889 	bl	2e354 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   24242:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   24244:	6833      	ldr	r3, [r6, #0]
   24246:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2424a:	2334      	movs	r3, #52	; 0x34
   2424c:	fb03 5404 	mla	r4, r3, r4, r5
   24250:	2302      	movs	r3, #2
   24252:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   24256:	bd70      	pop	{r4, r5, r6, pc}
   24258:	200168a4 	.word	0x200168a4
   2425c:	0003dc2f 	.word	0x0003dc2f
   24260:	00037f2c 	.word	0x00037f2c
   24264:	0003dbd4 	.word	0x0003dbd4

00024268 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   24268:	2234      	movs	r2, #52	; 0x34
{
   2426a:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2426c:	4d15      	ldr	r5, [pc, #84]	; (242c4 <nrfx_twim_disable+0x5c>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2426e:	7904      	ldrb	r4, [r0, #4]
{
   24270:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   24272:	fb02 5204 	mla	r2, r2, r4, r5
   24276:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   2427a:	b95a      	cbnz	r2, 24294 <nrfx_twim_disable+0x2c>
   2427c:	4912      	ldr	r1, [pc, #72]	; (242c8 <nrfx_twim_disable+0x60>)
   2427e:	4813      	ldr	r0, [pc, #76]	; (242cc <nrfx_twim_disable+0x64>)
   24280:	f240 1375 	movw	r3, #373	; 0x175
   24284:	4a12      	ldr	r2, [pc, #72]	; (242d0 <nrfx_twim_disable+0x68>)
   24286:	f009 fd7f 	bl	2dd88 <printk>
   2428a:	f240 1175 	movw	r1, #373	; 0x175
   2428e:	4810      	ldr	r0, [pc, #64]	; (242d0 <nrfx_twim_disable+0x68>)
   24290:	f00a f860 	bl	2e354 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   24294:	2334      	movs	r3, #52	; 0x34
   24296:	2100      	movs	r1, #0
   24298:	fb03 5304 	mla	r3, r3, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2429c:	6832      	ldr	r2, [r6, #0]
    p_reg->INTENCLR = mask;
   2429e:	480d      	ldr	r0, [pc, #52]	; (242d4 <nrfx_twim_disable+0x6c>)
    p_cb->int_mask = 0;
   242a0:	6099      	str	r1, [r3, #8]
   242a2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   242a6:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   242aa:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   242ae:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   242b2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   242b6:	2201      	movs	r2, #1
    p_cb->busy = false;
   242b8:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   242bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   242c0:	bd70      	pop	{r4, r5, r6, pc}
   242c2:	bf00      	nop
   242c4:	200168a4 	.word	0x200168a4
   242c8:	0003d1b8 	.word	0x0003d1b8
   242cc:	00037f2c 	.word	0x00037f2c
   242d0:	0003dbd4 	.word	0x0003dbd4
   242d4:	019c0202 	.word	0x019c0202

000242d8 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   242d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   242dc:	7903      	ldrb	r3, [r0, #4]
{
   242de:	4604      	mov	r4, r0
   242e0:	460d      	mov	r5, r1
   242e2:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   242e4:	b93b      	cbnz	r3, 242f6 <nrfx_twim_xfer+0x1e>
   242e6:	684b      	ldr	r3, [r1, #4]
   242e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   242ec:	d203      	bcs.n	242f6 <nrfx_twim_xfer+0x1e>
   242ee:	688b      	ldr	r3, [r1, #8]
   242f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   242f4:	d30b      	bcc.n	2430e <nrfx_twim_xfer+0x36>
   242f6:	49c0      	ldr	r1, [pc, #768]	; (245f8 <nrfx_twim_xfer+0x320>)
   242f8:	48c0      	ldr	r0, [pc, #768]	; (245fc <nrfx_twim_xfer+0x324>)
   242fa:	f240 238a 	movw	r3, #650	; 0x28a
   242fe:	4ac0      	ldr	r2, [pc, #768]	; (24600 <nrfx_twim_xfer+0x328>)
   24300:	f009 fd42 	bl	2dd88 <printk>
   24304:	f240 218a 	movw	r1, #650	; 0x28a
   24308:	48bd      	ldr	r0, [pc, #756]	; (24600 <nrfx_twim_xfer+0x328>)
   2430a:	f00a f823 	bl	2e354 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2430e:	f04f 0834 	mov.w	r8, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   24312:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   24316:	4ebb      	ldr	r6, [pc, #748]	; (24604 <nrfx_twim_xfer+0x32c>)
   24318:	fb08 f809 	mul.w	r8, r8, r9
   2431c:	f856 3008 	ldr.w	r3, [r6, r8]
   24320:	bb13      	cbnz	r3, 24368 <nrfx_twim_xfer+0x90>
   24322:	782b      	ldrb	r3, [r5, #0]
   24324:	2b02      	cmp	r3, #2
   24326:	d00f      	beq.n	24348 <nrfx_twim_xfer+0x70>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   24328:	782b      	ldrb	r3, [r5, #0]
   2432a:	2b03      	cmp	r3, #3
   2432c:	d11c      	bne.n	24368 <nrfx_twim_xfer+0x90>
   2432e:	f240 2393 	movw	r3, #659	; 0x293
   24332:	4ab3      	ldr	r2, [pc, #716]	; (24600 <nrfx_twim_xfer+0x328>)
   24334:	49b4      	ldr	r1, [pc, #720]	; (24608 <nrfx_twim_xfer+0x330>)
   24336:	48b1      	ldr	r0, [pc, #708]	; (245fc <nrfx_twim_xfer+0x324>)
   24338:	f009 fd26 	bl	2dd88 <printk>
   2433c:	f240 2193 	movw	r1, #659	; 0x293
   24340:	48af      	ldr	r0, [pc, #700]	; (24600 <nrfx_twim_xfer+0x328>)
   24342:	f00a f807 	bl	2e354 <assert_post_action>
   24346:	e00f      	b.n	24368 <nrfx_twim_xfer+0x90>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   24348:	f240 2392 	movw	r3, #658	; 0x292
   2434c:	4aac      	ldr	r2, [pc, #688]	; (24600 <nrfx_twim_xfer+0x328>)
   2434e:	49af      	ldr	r1, [pc, #700]	; (2460c <nrfx_twim_xfer+0x334>)
   24350:	48aa      	ldr	r0, [pc, #680]	; (245fc <nrfx_twim_xfer+0x324>)
   24352:	f009 fd19 	bl	2dd88 <printk>
   24356:	f240 2192 	movw	r1, #658	; 0x292
   2435a:	48a9      	ldr	r0, [pc, #676]	; (24600 <nrfx_twim_xfer+0x328>)
   2435c:	f009 fffa 	bl	2e354 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   24360:	f856 3008 	ldr.w	r3, [r6, r8]
   24364:	2b00      	cmp	r3, #0
   24366:	d0df      	beq.n	24328 <nrfx_twim_xfer+0x50>
    p_cb->error = false;
   24368:	2334      	movs	r3, #52	; 0x34
   2436a:	2200      	movs	r2, #0
   2436c:	fb03 6309 	mla	r3, r3, r9, r6
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   24370:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   24372:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   24376:	686b      	ldr	r3, [r5, #4]
   24378:	b153      	cbz	r3, 24390 <nrfx_twim_xfer+0xb8>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2437a:	68eb      	ldr	r3, [r5, #12]
   2437c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   24380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   24384:	d004      	beq.n	24390 <nrfx_twim_xfer+0xb8>
        return err_code;
   24386:	f8df 8298 	ldr.w	r8, [pc, #664]	; 24620 <nrfx_twim_xfer+0x348>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2438a:	4640      	mov	r0, r8
   2438c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   24390:	f04f 0c34 	mov.w	ip, #52	; 0x34
   24394:	fb0c 6c09 	mla	ip, ip, r9, r6
    p_reg->INTENCLR = mask;
   24398:	4b9d      	ldr	r3, [pc, #628]	; (24610 <nrfx_twim_xfer+0x338>)
   2439a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   2439e:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   243a2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   243a6:	b133      	cbz	r3, 243b6 <nrfx_twim_xfer+0xde>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   243a8:	f8dc 3008 	ldr.w	r3, [ip, #8]
        return err_code;
   243ac:	f8df 8274 	ldr.w	r8, [pc, #628]	; 24624 <nrfx_twim_xfer+0x34c>
    p_reg->INTENSET = mask;
   243b0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   243b4:	e7e9      	b.n	2438a <nrfx_twim_xfer+0xb2>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   243b6:	f017 0f14 	tst.w	r7, #20
   243ba:	bf0c      	ite	eq
   243bc:	2301      	moveq	r3, #1
   243be:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   243c0:	46a8      	mov	r8, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   243c2:	f88c 302f 	strb.w	r3, [ip, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   243c6:	f10c 0e0c 	add.w	lr, ip, #12
   243ca:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   243ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   243d2:	f8d8 3000 	ldr.w	r3, [r8]
    p_cb->flags = flags;
   243d6:	f8cc 7020 	str.w	r7, [ip, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   243da:	f8ce 3000 	str.w	r3, [lr]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   243de:	f3c7 1300 	ubfx	r3, r7, #4, #1
   243e2:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   243e6:	786b      	ldrb	r3, [r5, #1]
   243e8:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   243ec:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   243f0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   243f4:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   243f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   243fc:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   24400:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   24404:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   24408:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   2440c:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   24410:	bf18      	it	ne
   24412:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   24414:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   24418:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   2441c:	bf18      	it	ne
   2441e:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   24420:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   24424:	782b      	ldrb	r3, [r5, #0]
   24426:	2b03      	cmp	r3, #3
   24428:	f200 80e2 	bhi.w	245f0 <nrfx_twim_xfer+0x318>
   2442c:	e8df f003 	tbb	[pc, r3]
   24430:	0296cdb1 	.word	0x0296cdb1
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   24434:	06f9      	lsls	r1, r7, #27
   24436:	d50b      	bpl.n	24450 <nrfx_twim_xfer+0x178>
   24438:	4976      	ldr	r1, [pc, #472]	; (24614 <nrfx_twim_xfer+0x33c>)
   2443a:	4870      	ldr	r0, [pc, #448]	; (245fc <nrfx_twim_xfer+0x324>)
   2443c:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   24440:	4a6f      	ldr	r2, [pc, #444]	; (24600 <nrfx_twim_xfer+0x328>)
   24442:	f009 fca1 	bl	2dd88 <printk>
   24446:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   2444a:	486d      	ldr	r0, [pc, #436]	; (24600 <nrfx_twim_xfer+0x328>)
   2444c:	f009 ff82 	bl	2e354 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   24450:	073a      	lsls	r2, r7, #28
   24452:	d50b      	bpl.n	2446c <nrfx_twim_xfer+0x194>
   24454:	4970      	ldr	r1, [pc, #448]	; (24618 <nrfx_twim_xfer+0x340>)
   24456:	4869      	ldr	r0, [pc, #420]	; (245fc <nrfx_twim_xfer+0x324>)
   24458:	f240 13cf 	movw	r3, #463	; 0x1cf
   2445c:	4a68      	ldr	r2, [pc, #416]	; (24600 <nrfx_twim_xfer+0x328>)
   2445e:	f009 fc93 	bl	2dd88 <printk>
   24462:	f240 11cf 	movw	r1, #463	; 0x1cf
   24466:	4866      	ldr	r0, [pc, #408]	; (24600 <nrfx_twim_xfer+0x328>)
   24468:	f009 ff74 	bl	2e354 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   2446c:	077b      	lsls	r3, r7, #29
   2446e:	d50b      	bpl.n	24488 <nrfx_twim_xfer+0x1b0>
   24470:	496a      	ldr	r1, [pc, #424]	; (2461c <nrfx_twim_xfer+0x344>)
   24472:	4862      	ldr	r0, [pc, #392]	; (245fc <nrfx_twim_xfer+0x324>)
   24474:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   24478:	4a61      	ldr	r2, [pc, #388]	; (24600 <nrfx_twim_xfer+0x328>)
   2447a:	f009 fc85 	bl	2dd88 <printk>
   2447e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   24482:	485f      	ldr	r0, [pc, #380]	; (24600 <nrfx_twim_xfer+0x328>)
   24484:	f009 ff66 	bl	2e354 <assert_post_action>
   24488:	692a      	ldr	r2, [r5, #16]
   2448a:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2448e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   24492:	f47f af78 	bne.w	24386 <nrfx_twim_xfer+0xae>
    p_reg->SHORTS = mask;
   24496:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2449a:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   2449c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   244a0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   244a2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   244a6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244aa:	2300      	movs	r3, #0
   244ac:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   244b0:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   244b4:	2101      	movs	r1, #1
   244b6:	6221      	str	r1, [r4, #32]
   244b8:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   244ba:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   244be:	2900      	cmp	r1, #0
   244c0:	d0fb      	beq.n	244ba <nrfx_twim_xfer+0x1e2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244c2:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   244c6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   244ca:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   244cc:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   244d0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   244d4:	2334      	movs	r3, #52	; 0x34
   244d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   244da:	fb03 6309 	mla	r3, r3, r9, r6
   244de:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   244e0:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   244e2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 24628 <nrfx_twim_xfer+0x350>
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   244e6:	0738      	lsls	r0, r7, #28
   244e8:	d407      	bmi.n	244fa <nrfx_twim_xfer+0x222>
   244ea:	782a      	ldrb	r2, [r5, #0]
   244ec:	2a03      	cmp	r2, #3
   244ee:	d004      	beq.n	244fa <nrfx_twim_xfer+0x222>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   244f0:	2201      	movs	r2, #1
   244f2:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   244f4:	686b      	ldr	r3, [r5, #4]
   244f6:	b903      	cbnz	r3, 244fa <nrfx_twim_xfer+0x222>
   244f8:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   244fa:	2334      	movs	r3, #52	; 0x34
   244fc:	fb03 f309 	mul.w	r3, r3, r9
   24500:	18f2      	adds	r2, r6, r3
   24502:	58f3      	ldr	r3, [r6, r3]
   24504:	2b00      	cmp	r3, #0
   24506:	f040 8093 	bne.w	24630 <nrfx_twim_xfer+0x358>
                transmission_finished = true;
   2450a:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2450c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   24510:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   24514:	2900      	cmp	r1, #0
   24516:	f040 80a3 	bne.w	24660 <nrfx_twim_xfer+0x388>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   2451a:	3a00      	subs	r2, #0
   2451c:	bf18      	it	ne
   2451e:	2201      	movne	r2, #1
   24520:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   24524:	2900      	cmp	r1, #0
   24526:	f000 80a1 	beq.w	2466c <nrfx_twim_xfer+0x394>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2452a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2452e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24532:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   24536:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   2453a:	b110      	cbz	r0, 24542 <nrfx_twim_xfer+0x26a>
   2453c:	f411 7f00 	tst.w	r1, #512	; 0x200
   24540:	d104      	bne.n	2454c <nrfx_twim_xfer+0x274>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24542:	6225      	str	r5, [r4, #32]
   24544:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   24546:	2800      	cmp	r0, #0
   24548:	d0e0      	beq.n	2450c <nrfx_twim_xfer+0x234>
                    transmission_finished = false;
   2454a:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2454c:	05c9      	lsls	r1, r1, #23
   2454e:	f140 808d 	bpl.w	2466c <nrfx_twim_xfer+0x394>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24552:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   24556:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   2455a:	e7d7      	b.n	2450c <nrfx_twim_xfer+0x234>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2455c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2455e:	68ea      	ldr	r2, [r5, #12]
   24560:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24564:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   24568:	692b      	ldr	r3, [r5, #16]
   2456a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2456e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   24572:	f47f af08 	bne.w	24386 <nrfx_twim_xfer+0xae>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   24576:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24578:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   2457c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   24580:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   24584:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   24588:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2458a:	2202      	movs	r2, #2
   2458c:	fb03 6309 	mla	r3, r3, r9, r6
   24590:	e012      	b.n	245b8 <nrfx_twim_xfer+0x2e0>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   24592:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24594:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   24596:	f017 0f20 	tst.w	r7, #32
   2459a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2459e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   245a2:	f04f 0334 	mov.w	r3, #52	; 0x34
   245a6:	d00b      	beq.n	245c0 <nrfx_twim_xfer+0x2e8>
    p_reg->SHORTS = mask;
   245a8:	f44f 7280 	mov.w	r2, #256	; 0x100
   245ac:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   245b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   245b4:	fb03 6309 	mla	r3, r3, r9, r6
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   245b8:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245ba:	2301      	movs	r3, #1
   245bc:	6223      	str	r3, [r4, #32]
   245be:	e78f      	b.n	244e0 <nrfx_twim_xfer+0x208>
    p_reg->SHORTS = mask;
   245c0:	f44f 7200 	mov.w	r2, #512	; 0x200
   245c4:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   245c8:	e7df      	b.n	2458a <nrfx_twim_xfer+0x2b2>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   245ca:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   245cc:	68ea      	ldr	r2, [r5, #12]
   245ce:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   245d2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   245d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   245da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   245de:	2334      	movs	r3, #52	; 0x34
   245e0:	2202      	movs	r2, #2
   245e2:	fb03 6309 	mla	r3, r3, r9, r6
   245e6:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245e8:	2301      	movs	r3, #1
   245ea:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   245ec:	2300      	movs	r3, #0
   245ee:	e778      	b.n	244e2 <nrfx_twim_xfer+0x20a>
    switch (p_xfer_desc->type)
   245f0:	2308      	movs	r3, #8
   245f2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2462c <nrfx_twim_xfer+0x354>
   245f6:	e776      	b.n	244e6 <nrfx_twim_xfer+0x20e>
   245f8:	0003dc59 	.word	0x0003dc59
   245fc:	00037f2c 	.word	0x00037f2c
   24600:	0003dbd4 	.word	0x0003dbd4
   24604:	200168a4 	.word	0x200168a4
   24608:	0003dd54 	.word	0x0003dd54
   2460c:	0003dd04 	.word	0x0003dd04
   24610:	019c0202 	.word	0x019c0202
   24614:	0003dda4 	.word	0x0003dda4
   24618:	0003ddba 	.word	0x0003ddba
   2461c:	0003ddd0 	.word	0x0003ddd0
   24620:	0bad000a 	.word	0x0bad000a
   24624:	0bad000b 	.word	0x0bad000b
   24628:	0bad0000 	.word	0x0bad0000
   2462c:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   24630:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   24632:	bf44      	itt	mi
   24634:	2300      	movmi	r3, #0
   24636:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   24638:	067b      	lsls	r3, r7, #25
   2463a:	d406      	bmi.n	2464a <nrfx_twim_xfer+0x372>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   2463c:	2334      	movs	r3, #52	; 0x34
   2463e:	fb03 6309 	mla	r3, r3, r9, r6
   24642:	689a      	ldr	r2, [r3, #8]
   24644:	f042 0202 	orr.w	r2, r2, #2
   24648:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   2464a:	2334      	movs	r3, #52	; 0x34
   2464c:	fb03 6609 	mla	r6, r3, r9, r6
   24650:	68b3      	ldr	r3, [r6, #8]
   24652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   24656:	60b3      	str	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   24658:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   2465a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2465e:	e694      	b.n	2438a <nrfx_twim_xfer+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24660:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   24664:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   24668:	2201      	movs	r2, #1
   2466a:	e759      	b.n	24520 <nrfx_twim_xfer+0x248>
        } while (!transmission_finished);
   2466c:	2a00      	cmp	r2, #0
   2466e:	f43f af4d 	beq.w	2450c <nrfx_twim_xfer+0x234>
        p_cb->busy = false;
   24672:	2134      	movs	r1, #52	; 0x34
   24674:	2000      	movs	r0, #0
   24676:	fb01 6209 	mla	r2, r1, r9, r6
    uint32_t error_source = p_reg->ERRORSRC;
   2467a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2467e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   24682:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   24686:	b18b      	cbz	r3, 246ac <nrfx_twim_xfer+0x3d4>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   24688:	4a0f      	ldr	r2, [pc, #60]	; (246c8 <nrfx_twim_xfer+0x3f0>)
   2468a:	4910      	ldr	r1, [pc, #64]	; (246cc <nrfx_twim_xfer+0x3f4>)
   2468c:	f013 0f01 	tst.w	r3, #1
   24690:	bf14      	ite	ne
   24692:	4690      	movne	r8, r2
   24694:	4688      	moveq	r8, r1
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   24696:	3201      	adds	r2, #1
   24698:	f013 0f02 	tst.w	r3, #2
   2469c:	bf18      	it	ne
   2469e:	4690      	movne	r8, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   246a0:	f013 0f04 	tst.w	r3, #4
   246a4:	4b0a      	ldr	r3, [pc, #40]	; (246d0 <nrfx_twim_xfer+0x3f8>)
   246a6:	bf18      	it	ne
   246a8:	4698      	movne	r8, r3
   246aa:	e66e      	b.n	2438a <nrfx_twim_xfer+0xb2>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   246ac:	067b      	lsls	r3, r7, #25
   246ae:	f53f ae6c 	bmi.w	2438a <nrfx_twim_xfer+0xb2>
                !xfer_completeness_check(p_twim, p_cb))
   246b2:	4620      	mov	r0, r4
   246b4:	fb09 6101 	mla	r1, r9, r1, r6
   246b8:	f00f fa9c 	bl	33bf4 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   246bc:	4b03      	ldr	r3, [pc, #12]	; (246cc <nrfx_twim_xfer+0x3f4>)
   246be:	2800      	cmp	r0, #0
   246c0:	bf08      	it	eq
   246c2:	4698      	moveq	r8, r3
   246c4:	e661      	b.n	2438a <nrfx_twim_xfer+0xb2>
   246c6:	bf00      	nop
   246c8:	0bae0000 	.word	0x0bae0000
   246cc:	0bad0001 	.word	0x0bad0001
   246d0:	0bae0002 	.word	0x0bae0002

000246d4 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   246d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   246d6:	4c62      	ldr	r4, [pc, #392]	; (24860 <nrfx_twim_2_irq_handler+0x18c>)
{
   246d8:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   246da:	6823      	ldr	r3, [r4, #0]
   246dc:	b95b      	cbnz	r3, 246f6 <nrfx_twim_2_irq_handler+0x22>
   246de:	4961      	ldr	r1, [pc, #388]	; (24864 <nrfx_twim_2_irq_handler+0x190>)
   246e0:	4861      	ldr	r0, [pc, #388]	; (24868 <nrfx_twim_2_irq_handler+0x194>)
   246e2:	f240 23cd 	movw	r3, #717	; 0x2cd
   246e6:	4a61      	ldr	r2, [pc, #388]	; (2486c <nrfx_twim_2_irq_handler+0x198>)
   246e8:	f009 fb4e 	bl	2dd88 <printk>
   246ec:	f240 21cd 	movw	r1, #717	; 0x2cd
   246f0:	485e      	ldr	r0, [pc, #376]	; (2486c <nrfx_twim_2_irq_handler+0x198>)
   246f2:	f009 fe2f 	bl	2e354 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   246f6:	4b5e      	ldr	r3, [pc, #376]	; (24870 <nrfx_twim_2_irq_handler+0x19c>)
   246f8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   246fc:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   246fe:	b1fa      	cbz	r2, 24740 <nrfx_twim_2_irq_handler+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24700:	2200      	movs	r2, #0
   24702:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   24706:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2470a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2470e:	b9ba      	cbnz	r2, 24740 <nrfx_twim_2_irq_handler+0x6c>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   24710:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   24712:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   24716:	2202      	movs	r2, #2
   24718:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2471a:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   2471c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24720:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   24724:	b11a      	cbz	r2, 2472e <nrfx_twim_2_irq_handler+0x5a>
    return p_reg->SHORTS;
   24726:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2472a:	059e      	lsls	r6, r3, #22
   2472c:	d403      	bmi.n	24736 <nrfx_twim_2_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2472e:	2201      	movs	r2, #1
   24730:	4b4f      	ldr	r3, [pc, #316]	; (24870 <nrfx_twim_2_irq_handler+0x19c>)
   24732:	621a      	str	r2, [r3, #32]
   24734:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   24736:	2301      	movs	r3, #1
   24738:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   2473c:	b007      	add	sp, #28
   2473e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24740:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   24744:	2b00      	cmp	r3, #0
   24746:	d054      	beq.n	247f2 <nrfx_twim_2_irq_handler+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24748:	2300      	movs	r3, #0
   2474a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   2474e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   24752:	6a23      	ldr	r3, [r4, #32]
   24754:	065d      	lsls	r5, r3, #25
   24756:	d40a      	bmi.n	2476e <nrfx_twim_2_irq_handler+0x9a>
   24758:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2475c:	b93b      	cbnz	r3, 2476e <nrfx_twim_2_irq_handler+0x9a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   2475e:	4940      	ldr	r1, [pc, #256]	; (24860 <nrfx_twim_2_irq_handler+0x18c>)
   24760:	4843      	ldr	r0, [pc, #268]	; (24870 <nrfx_twim_2_irq_handler+0x19c>)
   24762:	f00f fa47 	bl	33bf4 <xfer_completeness_check>
   24766:	f080 0001 	eor.w	r0, r0, #1
   2476a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   2476e:	6a23      	ldr	r3, [r4, #32]
   24770:	f013 0704 	ands.w	r7, r3, #4
   24774:	d122      	bne.n	247bc <nrfx_twim_2_irq_handler+0xe8>
            event.xfer_desc = p_cb->xfer_desc;
   24776:	4e3f      	ldr	r6, [pc, #252]	; (24874 <nrfx_twim_2_irq_handler+0x1a0>)
   24778:	ad01      	add	r5, sp, #4
   2477a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2477c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2477e:	6833      	ldr	r3, [r6, #0]
   24780:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   24784:	602b      	str	r3, [r5, #0]
   24786:	4b3a      	ldr	r3, [pc, #232]	; (24870 <nrfx_twim_2_irq_handler+0x19c>)
   24788:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   2478c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   24790:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   24794:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   24798:	f1bc 0f00 	cmp.w	ip, #0
   2479c:	d002      	beq.n	247a4 <nrfx_twim_2_irq_handler+0xd0>
   2479e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   247a2:	b15a      	cbz	r2, 247bc <nrfx_twim_2_irq_handler+0xe8>
    p_reg->SHORTS = mask;
   247a4:	2200      	movs	r2, #0
   247a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   247aa:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   247ac:	4a32      	ldr	r2, [pc, #200]	; (24878 <nrfx_twim_2_irq_handler+0x1a4>)
   247ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   247b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   247b6:	4b31      	ldr	r3, [pc, #196]	; (2487c <nrfx_twim_2_irq_handler+0x1a8>)
   247b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   247bc:	4a2c      	ldr	r2, [pc, #176]	; (24870 <nrfx_twim_2_irq_handler+0x19c>)
   247be:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   247c2:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   247c4:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   247c8:	d53c      	bpl.n	24844 <nrfx_twim_2_irq_handler+0x170>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   247ca:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   247cc:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   247d0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   247d4:	b90b      	cbnz	r3, 247da <nrfx_twim_2_irq_handler+0x106>
        p_cb->busy = false;
   247d6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   247da:	6a23      	ldr	r3, [r4, #32]
   247dc:	075b      	lsls	r3, r3, #29
   247de:	d503      	bpl.n	247e8 <nrfx_twim_2_irq_handler+0x114>
   247e0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   247e4:	2b00      	cmp	r3, #0
   247e6:	d0a9      	beq.n	2473c <nrfx_twim_2_irq_handler+0x68>
        p_cb->handler(&event, p_cb->p_context);
   247e8:	e9d4 3100 	ldrd	r3, r1, [r4]
   247ec:	4668      	mov	r0, sp
   247ee:	4798      	blx	r3
}
   247f0:	e7a4      	b.n	2473c <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   247f2:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   247f6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   247fa:	7b23      	ldrb	r3, [r4, #12]
   247fc:	b983      	cbnz	r3, 24820 <nrfx_twim_2_irq_handler+0x14c>
            event.xfer_desc = p_cb->xfer_desc;
   247fe:	4f1d      	ldr	r7, [pc, #116]	; (24874 <nrfx_twim_2_irq_handler+0x1a0>)
   24800:	ae01      	add	r6, sp, #4
   24802:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   24804:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   24806:	683b      	ldr	r3, [r7, #0]
   24808:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   2480a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2480e:	2b00      	cmp	r3, #0
   24810:	d1d4      	bne.n	247bc <nrfx_twim_2_irq_handler+0xe8>
    p_reg->SHORTS = mask;
   24812:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   24816:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   24818:	4b17      	ldr	r3, [pc, #92]	; (24878 <nrfx_twim_2_irq_handler+0x1a4>)
   2481a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   2481e:	e7c8      	b.n	247b2 <nrfx_twim_2_irq_handler+0xde>
    p_reg->SHORTS = mask;
   24820:	f44f 7300 	mov.w	r3, #512	; 0x200
   24824:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   24828:	f240 2302 	movw	r3, #514	; 0x202
   2482c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2482e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   24832:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   24836:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   24838:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2483c:	2301      	movs	r3, #1
   2483e:	60ab      	str	r3, [r5, #8]
   24840:	622b      	str	r3, [r5, #32]
            return;
   24842:	e77b      	b.n	2473c <nrfx_twim_2_irq_handler+0x68>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   24844:	0759      	lsls	r1, r3, #29
   24846:	d501      	bpl.n	2484c <nrfx_twim_2_irq_handler+0x178>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   24848:	2302      	movs	r3, #2
   2484a:	e7bf      	b.n	247cc <nrfx_twim_2_irq_handler+0xf8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   2484c:	07da      	lsls	r2, r3, #31
   2484e:	d501      	bpl.n	24854 <nrfx_twim_2_irq_handler+0x180>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   24850:	2303      	movs	r3, #3
   24852:	e7bb      	b.n	247cc <nrfx_twim_2_irq_handler+0xf8>
    else if (p_cb->error)
   24854:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   24858:	2b00      	cmp	r3, #0
   2485a:	d0b7      	beq.n	247cc <nrfx_twim_2_irq_handler+0xf8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   2485c:	2304      	movs	r3, #4
   2485e:	e7b5      	b.n	247cc <nrfx_twim_2_irq_handler+0xf8>
   24860:	200168a4 	.word	0x200168a4
   24864:	0003d346 	.word	0x0003d346
   24868:	00037f2c 	.word	0x00037f2c
   2486c:	0003dbd4 	.word	0x0003dbd4
   24870:	4000a000 	.word	0x4000a000
   24874:	200168b0 	.word	0x200168b0
   24878:	019c0202 	.word	0x019c0202
   2487c:	e000e100 	.word	0xe000e100

00024880 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24880:	6803      	ldr	r3, [r0, #0]
{
   24882:	b510      	push	{r4, lr}
    switch (port)
   24884:	095a      	lsrs	r2, r3, #5
   24886:	bf0c      	ite	eq
   24888:	f04f 32ff 	moveq.w	r2, #4294967295
   2488c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2488e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   24892:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24896:	07db      	lsls	r3, r3, #31
{
   24898:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2489a:	d40b      	bmi.n	248b4 <nrf_gpio_pin_port_decode+0x34>
   2489c:	490f      	ldr	r1, [pc, #60]	; (248dc <nrf_gpio_pin_port_decode+0x5c>)
   2489e:	4810      	ldr	r0, [pc, #64]	; (248e0 <nrf_gpio_pin_port_decode+0x60>)
   248a0:	f44f 7305 	mov.w	r3, #532	; 0x214
   248a4:	4a0f      	ldr	r2, [pc, #60]	; (248e4 <nrf_gpio_pin_port_decode+0x64>)
   248a6:	f009 fa6f 	bl	2dd88 <printk>
   248aa:	f44f 7105 	mov.w	r1, #532	; 0x214
   248ae:	480d      	ldr	r0, [pc, #52]	; (248e4 <nrf_gpio_pin_port_decode+0x64>)
   248b0:	f009 fd50 	bl	2e354 <assert_post_action>
    uint32_t pin_number = *p_pin;
   248b4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   248b6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   248ba:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   248bc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   248be:	d00b      	beq.n	248d8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   248c0:	4909      	ldr	r1, [pc, #36]	; (248e8 <nrf_gpio_pin_port_decode+0x68>)
   248c2:	4807      	ldr	r0, [pc, #28]	; (248e0 <nrf_gpio_pin_port_decode+0x60>)
   248c4:	f240 2319 	movw	r3, #537	; 0x219
   248c8:	4a06      	ldr	r2, [pc, #24]	; (248e4 <nrf_gpio_pin_port_decode+0x64>)
   248ca:	f009 fa5d 	bl	2dd88 <printk>
   248ce:	f240 2119 	movw	r1, #537	; 0x219
   248d2:	4804      	ldr	r0, [pc, #16]	; (248e4 <nrf_gpio_pin_port_decode+0x64>)
   248d4:	f009 fd3e 	bl	2e354 <assert_post_action>
}
   248d8:	4804      	ldr	r0, [pc, #16]	; (248ec <nrf_gpio_pin_port_decode+0x6c>)
   248da:	bd10      	pop	{r4, pc}
   248dc:	0003a9df 	.word	0x0003a9df
   248e0:	00037f2c 	.word	0x00037f2c
   248e4:	0003a9ac 	.word	0x0003a9ac
   248e8:	0003e845 	.word	0x0003e845
   248ec:	40842500 	.word	0x40842500

000248f0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   248f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   248f2:	460c      	mov	r4, r1
   248f4:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   248f6:	f00f f9ad 	bl	33c54 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   248fa:	4620      	mov	r0, r4
   248fc:	f00f f9aa 	bl	33c54 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24900:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   24902:	f240 650d 	movw	r5, #1549	; 0x60d
   24906:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24908:	f7ff ffba 	bl	24880 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2490c:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2490e:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   24910:	3380      	adds	r3, #128	; 0x80
   24912:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24916:	a801      	add	r0, sp, #4
   24918:	9401      	str	r4, [sp, #4]
   2491a:	f7ff ffb1 	bl	24880 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2491e:	9b01      	ldr	r3, [sp, #4]
   24920:	3380      	adds	r3, #128	; 0x80
   24922:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   24926:	2004      	movs	r0, #4
   24928:	f00f f94a 	bl	33bc0 <nrfx_busy_wait>
   2492c:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2492e:	a801      	add	r0, sp, #4
   24930:	9401      	str	r4, [sp, #4]
   24932:	f7ff ffa5 	bl	24880 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   24936:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   24938:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2493a:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   2493c:	07db      	lsls	r3, r3, #31
   2493e:	d414      	bmi.n	2496a <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24940:	a801      	add	r0, sp, #4
   24942:	9601      	str	r6, [sp, #4]
   24944:	f7ff ff9c 	bl	24880 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   24948:	9b01      	ldr	r3, [sp, #4]
   2494a:	3d01      	subs	r5, #1
   2494c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   24950:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   24952:	2004      	movs	r0, #4
   24954:	f00f f934 	bl	33bc0 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   24958:	4630      	mov	r0, r6
   2495a:	f00f f97b 	bl	33c54 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   2495e:	2004      	movs	r0, #4
   24960:	f00f f92e 	bl	33bc0 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   24964:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   24968:	d1e1      	bne.n	2492e <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2496a:	a801      	add	r0, sp, #4
   2496c:	9401      	str	r4, [sp, #4]
   2496e:	f7ff ff87 	bl	24880 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   24972:	2301      	movs	r3, #1
   24974:	9a01      	ldr	r2, [sp, #4]
   24976:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   24978:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   2497a:	2004      	movs	r0, #4
   2497c:	f00f f920 	bl	33bc0 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   24980:	4620      	mov	r0, r4
   24982:	f00f f967 	bl	33c54 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   24986:	2004      	movs	r0, #4
   24988:	f00f f91a 	bl	33bc0 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2498c:	a801      	add	r0, sp, #4
   2498e:	9401      	str	r4, [sp, #4]
   24990:	f7ff ff76 	bl	24880 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   24994:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   24996:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   24998:	4803      	ldr	r0, [pc, #12]	; (249a8 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2499a:	40d3      	lsrs	r3, r2
   2499c:	f003 0301 	and.w	r3, r3, #1
   249a0:	1ac0      	subs	r0, r0, r3
   249a2:	b003      	add	sp, #12
   249a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   249a6:	bf00      	nop
   249a8:	0bad0001 	.word	0x0bad0001

000249ac <rpc_handle_data_message>:
   249ac:	6803      	ldr	r3, [r0, #0]
   249ae:	b510      	push	{r4, lr}
   249b0:	b29b      	uxth	r3, r3
   249b2:	2b04      	cmp	r3, #4
   249b4:	d009      	beq.n	249ca <rpc_handle_data_message+0x1e>
   249b6:	2b03      	cmp	r3, #3
   249b8:	d010      	beq.n	249dc <rpc_handle_data_message+0x30>
   249ba:	2b06      	cmp	r3, #6
   249bc:	d010      	beq.n	249e0 <rpc_handle_data_message+0x34>
   249be:	2b07      	cmp	r3, #7
   249c0:	d010      	beq.n	249e4 <rpc_handle_data_message+0x38>
   249c2:	6880      	ldr	r0, [r0, #8]
   249c4:	b980      	cbnz	r0, 249e8 <rpc_handle_data_message+0x3c>
   249c6:	2000      	movs	r0, #0
   249c8:	bd10      	pop	{r4, pc}
   249ca:	2300      	movs	r3, #0
   249cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   249d0:	4a07      	ldr	r2, [pc, #28]	; (249f0 <rpc_handle_data_message+0x44>)
   249d2:	2100      	movs	r1, #0
   249d4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   249d8:	685b      	ldr	r3, [r3, #4]
   249da:	4718      	bx	r3
   249dc:	2301      	movs	r3, #1
   249de:	e7f5      	b.n	249cc <rpc_handle_data_message+0x20>
   249e0:	2302      	movs	r3, #2
   249e2:	e7f3      	b.n	249cc <rpc_handle_data_message+0x20>
   249e4:	2303      	movs	r3, #3
   249e6:	e7f1      	b.n	249cc <rpc_handle_data_message+0x20>
   249e8:	f00f f98a 	bl	33d00 <rpc_transport_data_free>
   249ec:	e7eb      	b.n	249c6 <rpc_handle_data_message+0x1a>
   249ee:	bf00      	nop
   249f0:	000370f8 	.word	0x000370f8

000249f4 <ipc_trace_init>:
   249f4:	4b01      	ldr	r3, [pc, #4]	; (249fc <ipc_trace_init+0x8>)
   249f6:	6018      	str	r0, [r3, #0]
   249f8:	4770      	bx	lr
   249fa:	bf00      	nop
   249fc:	200168e4 	.word	0x200168e4

00024a00 <nrf_modem_os_trace_irq_handler>:
   24a00:	b508      	push	{r3, lr}
   24a02:	4b11      	ldr	r3, [pc, #68]	; (24a48 <nrf_modem_os_trace_irq_handler+0x48>)
   24a04:	781b      	ldrb	r3, [r3, #0]
   24a06:	b90b      	cbnz	r3, 24a0c <nrf_modem_os_trace_irq_handler+0xc>
   24a08:	f7fb f8dc 	bl	1fbc4 <nrf_modem_os_trace_irq_clear>
   24a0c:	4b0f      	ldr	r3, [pc, #60]	; (24a4c <nrf_modem_os_trace_irq_handler+0x4c>)
   24a0e:	6818      	ldr	r0, [r3, #0]
   24a10:	b128      	cbz	r0, 24a1e <nrf_modem_os_trace_irq_handler+0x1e>
   24a12:	6882      	ldr	r2, [r0, #8]
   24a14:	6843      	ldr	r3, [r0, #4]
   24a16:	429a      	cmp	r2, r3
   24a18:	d001      	beq.n	24a1e <nrf_modem_os_trace_irq_handler+0x1e>
   24a1a:	f00f f975 	bl	33d08 <trace_write>
   24a1e:	4b0c      	ldr	r3, [pc, #48]	; (24a50 <nrf_modem_os_trace_irq_handler+0x50>)
   24a20:	6818      	ldr	r0, [r3, #0]
   24a22:	b128      	cbz	r0, 24a30 <nrf_modem_os_trace_irq_handler+0x30>
   24a24:	6882      	ldr	r2, [r0, #8]
   24a26:	6843      	ldr	r3, [r0, #4]
   24a28:	429a      	cmp	r2, r3
   24a2a:	d001      	beq.n	24a30 <nrf_modem_os_trace_irq_handler+0x30>
   24a2c:	f00f f96c 	bl	33d08 <trace_write>
   24a30:	4b08      	ldr	r3, [pc, #32]	; (24a54 <nrf_modem_os_trace_irq_handler+0x54>)
   24a32:	6818      	ldr	r0, [r3, #0]
   24a34:	b138      	cbz	r0, 24a46 <nrf_modem_os_trace_irq_handler+0x46>
   24a36:	6882      	ldr	r2, [r0, #8]
   24a38:	6843      	ldr	r3, [r0, #4]
   24a3a:	429a      	cmp	r2, r3
   24a3c:	d003      	beq.n	24a46 <nrf_modem_os_trace_irq_handler+0x46>
   24a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24a42:	f00f b961 	b.w	33d08 <trace_write>
   24a46:	bd08      	pop	{r3, pc}
   24a48:	2001e4fc 	.word	0x2001e4fc
   24a4c:	200168e0 	.word	0x200168e0
   24a50:	200168d8 	.word	0x200168d8
   24a54:	200168dc 	.word	0x200168dc

00024a58 <ipc_trace_handle>:
   24a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a5c:	4b43      	ldr	r3, [pc, #268]	; (24b6c <ipc_trace_handle+0x114>)
   24a5e:	681b      	ldr	r3, [r3, #0]
   24a60:	6919      	ldr	r1, [r3, #16]
   24a62:	f8d3 b014 	ldr.w	fp, [r3, #20]
   24a66:	7c1a      	ldrb	r2, [r3, #16]
   24a68:	2200      	movs	r2, #0
   24a6a:	741a      	strb	r2, [r3, #16]
   24a6c:	7c58      	ldrb	r0, [r3, #17]
   24a6e:	745a      	strb	r2, [r3, #17]
   24a70:	7c98      	ldrb	r0, [r3, #18]
   24a72:	749a      	strb	r2, [r3, #18]
   24a74:	7cd8      	ldrb	r0, [r3, #19]
   24a76:	74da      	strb	r2, [r3, #19]
   24a78:	7d18      	ldrb	r0, [r3, #20]
   24a7a:	751a      	strb	r2, [r3, #20]
   24a7c:	7d58      	ldrb	r0, [r3, #21]
   24a7e:	755a      	strb	r2, [r3, #21]
   24a80:	7d98      	ldrb	r0, [r3, #22]
   24a82:	759a      	strb	r2, [r3, #22]
   24a84:	7dd8      	ldrb	r0, [r3, #23]
   24a86:	75da      	strb	r2, [r3, #23]
   24a88:	2900      	cmp	r1, #0
   24a8a:	d037      	beq.n	24afc <ipc_trace_handle+0xa4>
   24a8c:	3901      	subs	r1, #1
   24a8e:	2903      	cmp	r1, #3
   24a90:	d834      	bhi.n	24afc <ipc_trace_handle+0xa4>
   24a92:	e8df f001 	tbb	[pc, r1]
   24a96:	6502      	.short	0x6502
   24a98:	534c      	.short	0x534c
   24a9a:	4a35      	ldr	r2, [pc, #212]	; (24b70 <ipc_trace_handle+0x118>)
   24a9c:	7811      	ldrb	r1, [r2, #0]
   24a9e:	b109      	cbz	r1, 24aa4 <ipc_trace_handle+0x4c>
   24aa0:	2100      	movs	r1, #0
   24aa2:	7011      	strb	r1, [r2, #0]
   24aa4:	f8db 2008 	ldr.w	r2, [fp, #8]
   24aa8:	4f32      	ldr	r7, [pc, #200]	; (24b74 <ipc_trace_handle+0x11c>)
   24aaa:	9201      	str	r2, [sp, #4]
   24aac:	2200      	movs	r2, #0
   24aae:	4691      	mov	r9, r2
   24ab0:	4615      	mov	r5, r2
   24ab2:	4611      	mov	r1, r2
   24ab4:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 24b78 <ipc_trace_handle+0x120>
   24ab8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 24b7c <ipc_trace_handle+0x124>
   24abc:	f8d7 c000 	ldr.w	ip, [r7]
   24ac0:	f8de 8000 	ldr.w	r8, [lr]
   24ac4:	f8da 4000 	ldr.w	r4, [sl]
   24ac8:	9801      	ldr	r0, [sp, #4]
   24aca:	4288      	cmp	r0, r1
   24acc:	d119      	bne.n	24b02 <ipc_trace_handle+0xaa>
   24ace:	b10d      	cbz	r5, 24ad4 <ipc_trace_handle+0x7c>
   24ad0:	f8ca 4000 	str.w	r4, [sl]
   24ad4:	f1b9 0f00 	cmp.w	r9, #0
   24ad8:	d001      	beq.n	24ade <ipc_trace_handle+0x86>
   24ada:	f8ce 8000 	str.w	r8, [lr]
   24ade:	b10a      	cbz	r2, 24ae4 <ipc_trace_handle+0x8c>
   24ae0:	f8c7 c000 	str.w	ip, [r7]
   24ae4:	7a1a      	ldrb	r2, [r3, #8]
   24ae6:	2101      	movs	r1, #1
   24ae8:	2200      	movs	r2, #0
   24aea:	7219      	strb	r1, [r3, #8]
   24aec:	7a59      	ldrb	r1, [r3, #9]
   24aee:	725a      	strb	r2, [r3, #9]
   24af0:	7a99      	ldrb	r1, [r3, #10]
   24af2:	729a      	strb	r2, [r3, #10]
   24af4:	7ada      	ldrb	r2, [r3, #11]
   24af6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   24afa:	72da      	strb	r2, [r3, #11]
   24afc:	b003      	add	sp, #12
   24afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b02:	1c88      	adds	r0, r1, #2
   24b04:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   24b08:	6840      	ldr	r0, [r0, #4]
   24b0a:	7806      	ldrb	r6, [r0, #0]
   24b0c:	2e62      	cmp	r6, #98	; 0x62
   24b0e:	d007      	beq.n	24b20 <ipc_trace_handle+0xc8>
   24b10:	2e63      	cmp	r6, #99	; 0x63
   24b12:	d009      	beq.n	24b28 <ipc_trace_handle+0xd0>
   24b14:	2e61      	cmp	r6, #97	; 0x61
   24b16:	bf04      	itt	eq
   24b18:	4604      	moveq	r4, r0
   24b1a:	2501      	moveq	r5, #1
   24b1c:	3101      	adds	r1, #1
   24b1e:	e7d3      	b.n	24ac8 <ipc_trace_handle+0x70>
   24b20:	4680      	mov	r8, r0
   24b22:	f04f 0901 	mov.w	r9, #1
   24b26:	e7f9      	b.n	24b1c <ipc_trace_handle+0xc4>
   24b28:	4684      	mov	ip, r0
   24b2a:	2201      	movs	r2, #1
   24b2c:	e7f6      	b.n	24b1c <ipc_trace_handle+0xc4>
   24b2e:	2101      	movs	r1, #1
   24b30:	4a0f      	ldr	r2, [pc, #60]	; (24b70 <ipc_trace_handle+0x118>)
   24b32:	7011      	strb	r1, [r2, #0]
   24b34:	7a1a      	ldrb	r2, [r3, #8]
   24b36:	2103      	movs	r1, #3
   24b38:	2200      	movs	r2, #0
   24b3a:	e7d6      	b.n	24aea <ipc_trace_handle+0x92>
   24b3c:	7a19      	ldrb	r1, [r3, #8]
   24b3e:	2104      	movs	r1, #4
   24b40:	7219      	strb	r1, [r3, #8]
   24b42:	7a59      	ldrb	r1, [r3, #9]
   24b44:	725a      	strb	r2, [r3, #9]
   24b46:	7a99      	ldrb	r1, [r3, #10]
   24b48:	729a      	strb	r2, [r3, #10]
   24b4a:	7ad9      	ldrb	r1, [r3, #11]
   24b4c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   24b50:	72d9      	strb	r1, [r3, #11]
   24b52:	4b07      	ldr	r3, [pc, #28]	; (24b70 <ipc_trace_handle+0x118>)
   24b54:	701a      	strb	r2, [r3, #0]
   24b56:	b003      	add	sp, #12
   24b58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b5c:	f7ff bf50 	b.w	24a00 <nrf_modem_os_trace_irq_handler>
   24b60:	b003      	add	sp, #12
   24b62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b66:	f7fb b825 	b.w	1fbb4 <nrf_modem_os_trace_irq_set>
   24b6a:	bf00      	nop
   24b6c:	200168e4 	.word	0x200168e4
   24b70:	2001e4fc 	.word	0x2001e4fc
   24b74:	200168dc 	.word	0x200168dc
   24b78:	200168d8 	.word	0x200168d8
   24b7c:	200168e0 	.word	0x200168e0

00024b80 <rpc_trace_coredump_in_progress>:
   24b80:	4b01      	ldr	r3, [pc, #4]	; (24b88 <rpc_trace_coredump_in_progress+0x8>)
   24b82:	7818      	ldrb	r0, [r3, #0]
   24b84:	4770      	bx	lr
   24b86:	bf00      	nop
   24b88:	2001e4fc 	.word	0x2001e4fc

00024b8c <handle_modem_rpc_msg>:
   24b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b90:	4606      	mov	r6, r0
   24b92:	460f      	mov	r7, r1
   24b94:	2500      	movs	r5, #0
   24b96:	f8df 8074 	ldr.w	r8, [pc, #116]	; 24c0c <handle_modem_rpc_msg+0x80>
   24b9a:	6833      	ldr	r3, [r6, #0]
   24b9c:	42ab      	cmp	r3, r5
   24b9e:	d801      	bhi.n	24ba4 <handle_modem_rpc_msg+0x18>
   24ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24ba4:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   24ba8:	68a3      	ldr	r3, [r4, #8]
   24baa:	b1fb      	cbz	r3, 24bec <handle_modem_rpc_msg+0x60>
   24bac:	6863      	ldr	r3, [r4, #4]
   24bae:	b2db      	uxtb	r3, r3
   24bb0:	2b01      	cmp	r3, #1
   24bb2:	d11b      	bne.n	24bec <handle_modem_rpc_msg+0x60>
   24bb4:	6862      	ldr	r2, [r4, #4]
   24bb6:	f8b8 3000 	ldrh.w	r3, [r8]
   24bba:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   24bbe:	d115      	bne.n	24bec <handle_modem_rpc_msg+0x60>
   24bc0:	2f02      	cmp	r7, #2
   24bc2:	68a0      	ldr	r0, [r4, #8]
   24bc4:	d114      	bne.n	24bf0 <handle_modem_rpc_msg+0x64>
   24bc6:	f7ff fef1 	bl	249ac <rpc_handle_data_message>
   24bca:	2802      	cmp	r0, #2
   24bcc:	d00e      	beq.n	24bec <handle_modem_rpc_msg+0x60>
   24bce:	2801      	cmp	r0, #1
   24bd0:	d113      	bne.n	24bfa <handle_modem_rpc_msg+0x6e>
   24bd2:	6863      	ldr	r3, [r4, #4]
   24bd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24bd8:	f043 0302 	orr.w	r3, r3, #2
   24bdc:	6063      	str	r3, [r4, #4]
   24bde:	f8b8 3000 	ldrh.w	r3, [r8]
   24be2:	3301      	adds	r3, #1
   24be4:	f8a8 3000 	strh.w	r3, [r8]
   24be8:	f7fa ffd4 	bl	1fb94 <nrf_modem_os_application_irq_set>
   24bec:	3501      	adds	r5, #1
   24bee:	e7d4      	b.n	24b9a <handle_modem_rpc_msg+0xe>
   24bf0:	6801      	ldr	r1, [r0, #0]
   24bf2:	0c09      	lsrs	r1, r1, #16
   24bf4:	f00f f83a 	bl	33c6c <rpc_handle_ctrl_message>
   24bf8:	e7e7      	b.n	24bca <handle_modem_rpc_msg+0x3e>
   24bfa:	2800      	cmp	r0, #0
   24bfc:	d1ef      	bne.n	24bde <handle_modem_rpc_msg+0x52>
   24bfe:	6863      	ldr	r3, [r4, #4]
   24c00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24c04:	f043 0303 	orr.w	r3, r3, #3
   24c08:	e7e8      	b.n	24bdc <handle_modem_rpc_msg+0x50>
   24c0a:	bf00      	nop
   24c0c:	2001ac04 	.word	0x2001ac04

00024c10 <rpc_transport_ipc_data_msg_send>:
   24c10:	4b11      	ldr	r3, [pc, #68]	; (24c58 <rpc_transport_ipc_data_msg_send+0x48>)
   24c12:	b530      	push	{r4, r5, lr}
   24c14:	7819      	ldrb	r1, [r3, #0]
   24c16:	b9e1      	cbnz	r1, 24c52 <rpc_transport_ipc_data_msg_send+0x42>
   24c18:	4b10      	ldr	r3, [pc, #64]	; (24c5c <rpc_transport_ipc_data_msg_send+0x4c>)
   24c1a:	4a11      	ldr	r2, [pc, #68]	; (24c60 <rpc_transport_ipc_data_msg_send+0x50>)
   24c1c:	681b      	ldr	r3, [r3, #0]
   24c1e:	6812      	ldr	r2, [r2, #0]
   24c20:	1ac3      	subs	r3, r0, r3
   24c22:	f3c3 1389 	ubfx	r3, r3, #6, #10
   24c26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   24c2a:	4d0e      	ldr	r5, [pc, #56]	; (24c64 <rpc_transport_ipc_data_msg_send+0x54>)
   24c2c:	685a      	ldr	r2, [r3, #4]
   24c2e:	882c      	ldrh	r4, [r5, #0]
   24c30:	b292      	uxth	r2, r2
   24c32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   24c36:	605a      	str	r2, [r3, #4]
   24c38:	685a      	ldr	r2, [r3, #4]
   24c3a:	4608      	mov	r0, r1
   24c3c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   24c40:	f042 0201 	orr.w	r2, r2, #1
   24c44:	605a      	str	r2, [r3, #4]
   24c46:	2201      	movs	r2, #1
   24c48:	4b07      	ldr	r3, [pc, #28]	; (24c68 <rpc_transport_ipc_data_msg_send+0x58>)
   24c4a:	3401      	adds	r4, #1
   24c4c:	802c      	strh	r4, [r5, #0]
   24c4e:	60da      	str	r2, [r3, #12]
   24c50:	bd30      	pop	{r4, r5, pc}
   24c52:	f04f 30ff 	mov.w	r0, #4294967295
   24c56:	e7fb      	b.n	24c50 <rpc_transport_ipc_data_msg_send+0x40>
   24c58:	2001e4fe 	.word	0x2001e4fe
   24c5c:	20016900 	.word	0x20016900
   24c60:	20016904 	.word	0x20016904
   24c64:	2001ac06 	.word	0x2001ac06
   24c68:	4002a000 	.word	0x4002a000

00024c6c <rpc_transport_ipc_ctrl_msg_send>:
   24c6c:	4b0e      	ldr	r3, [pc, #56]	; (24ca8 <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   24c6e:	490f      	ldr	r1, [pc, #60]	; (24cac <rpc_transport_ipc_ctrl_msg_send+0x40>)
   24c70:	681b      	ldr	r3, [r3, #0]
   24c72:	880a      	ldrh	r2, [r1, #0]
   24c74:	1ac0      	subs	r0, r0, r3
   24c76:	f3c0 1389 	ubfx	r3, r0, #6, #10
   24c7a:	480d      	ldr	r0, [pc, #52]	; (24cb0 <rpc_transport_ipc_ctrl_msg_send+0x44>)
   24c7c:	6800      	ldr	r0, [r0, #0]
   24c7e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   24c82:	6843      	ldr	r3, [r0, #4]
   24c84:	b29b      	uxth	r3, r3
   24c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   24c8a:	3201      	adds	r2, #1
   24c8c:	800a      	strh	r2, [r1, #0]
   24c8e:	2201      	movs	r2, #1
   24c90:	6043      	str	r3, [r0, #4]
   24c92:	6843      	ldr	r3, [r0, #4]
   24c94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24c98:	f043 0301 	orr.w	r3, r3, #1
   24c9c:	6043      	str	r3, [r0, #4]
   24c9e:	4b05      	ldr	r3, [pc, #20]	; (24cb4 <rpc_transport_ipc_ctrl_msg_send+0x48>)
   24ca0:	2000      	movs	r0, #0
   24ca2:	605a      	str	r2, [r3, #4]
   24ca4:	4770      	bx	lr
   24ca6:	bf00      	nop
   24ca8:	200168f8 	.word	0x200168f8
   24cac:	2001ac06 	.word	0x2001ac06
   24cb0:	200168fc 	.word	0x200168fc
   24cb4:	4002a000 	.word	0x4002a000

00024cb8 <rpc_transport_ipc_data_msg_alloc>:
   24cb8:	4b05      	ldr	r3, [pc, #20]	; (24cd0 <rpc_transport_ipc_data_msg_alloc+0x18>)
   24cba:	781b      	ldrb	r3, [r3, #0]
   24cbc:	b933      	cbnz	r3, 24ccc <rpc_transport_ipc_data_msg_alloc+0x14>
   24cbe:	4b05      	ldr	r3, [pc, #20]	; (24cd4 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   24cc0:	2202      	movs	r2, #2
   24cc2:	6819      	ldr	r1, [r3, #0]
   24cc4:	4b04      	ldr	r3, [pc, #16]	; (24cd8 <rpc_transport_ipc_data_msg_alloc+0x20>)
   24cc6:	6818      	ldr	r0, [r3, #0]
   24cc8:	f00f b860 	b.w	33d8c <rpc_transport_ipc_msg_alloc>
   24ccc:	2000      	movs	r0, #0
   24cce:	4770      	bx	lr
   24cd0:	2001e4fe 	.word	0x2001e4fe
   24cd4:	20016900 	.word	0x20016900
   24cd8:	20016904 	.word	0x20016904

00024cdc <rpc_transport_ipc_ctrl_msg_alloc>:
   24cdc:	4b03      	ldr	r3, [pc, #12]	; (24cec <rpc_transport_ipc_ctrl_msg_alloc+0x10>)
   24cde:	2201      	movs	r2, #1
   24ce0:	6819      	ldr	r1, [r3, #0]
   24ce2:	4b03      	ldr	r3, [pc, #12]	; (24cf0 <rpc_transport_ipc_ctrl_msg_alloc+0x14>)
   24ce4:	6818      	ldr	r0, [r3, #0]
   24ce6:	f00f b851 	b.w	33d8c <rpc_transport_ipc_msg_alloc>
   24cea:	bf00      	nop
   24cec:	200168f8 	.word	0x200168f8
   24cf0:	200168fc 	.word	0x200168fc

00024cf4 <rpc_transport_ipc_data_alloc>:
   24cf4:	4b03      	ldr	r3, [pc, #12]	; (24d04 <rpc_transport_ipc_data_alloc+0x10>)
   24cf6:	781b      	ldrb	r3, [r3, #0]
   24cf8:	b90b      	cbnz	r3, 24cfe <rpc_transport_ipc_data_alloc+0xa>
   24cfa:	f7fa bf79 	b.w	1fbf0 <nrf_modem_os_shm_tx_alloc>
   24cfe:	2000      	movs	r0, #0
   24d00:	4770      	bx	lr
   24d02:	bf00      	nop
   24d04:	2001e4fe 	.word	0x2001e4fe

00024d08 <nrf_modem_os_application_irq_handler>:
   24d08:	b510      	push	{r4, lr}
   24d0a:	4c06      	ldr	r4, [pc, #24]	; (24d24 <nrf_modem_os_application_irq_handler+0x1c>)
   24d0c:	f7fa ff4a 	bl	1fba4 <nrf_modem_os_application_irq_clear>
   24d10:	6820      	ldr	r0, [r4, #0]
   24d12:	2101      	movs	r1, #1
   24d14:	f7ff ff3a 	bl	24b8c <handle_modem_rpc_msg>
   24d18:	6860      	ldr	r0, [r4, #4]
   24d1a:	2102      	movs	r1, #2
   24d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24d20:	f7ff bf34 	b.w	24b8c <handle_modem_rpc_msg>
   24d24:	200168ec 	.word	0x200168ec

00024d28 <rpc_transport_ipc_msg_free>:
   24d28:	2300      	movs	r3, #0
   24d2a:	4911      	ldr	r1, [pc, #68]	; (24d70 <rpc_transport_ipc_msg_free+0x48>)
   24d2c:	b530      	push	{r4, r5, lr}
   24d2e:	680a      	ldr	r2, [r1, #0]
   24d30:	6814      	ldr	r4, [r2, #0]
   24d32:	42a3      	cmp	r3, r4
   24d34:	d10b      	bne.n	24d4e <rpc_transport_ipc_msg_free+0x26>
   24d36:	2300      	movs	r3, #0
   24d38:	684a      	ldr	r2, [r1, #4]
   24d3a:	6811      	ldr	r1, [r2, #0]
   24d3c:	428b      	cmp	r3, r1
   24d3e:	d015      	beq.n	24d6c <rpc_transport_ipc_msg_free+0x44>
   24d40:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   24d44:	68a4      	ldr	r4, [r4, #8]
   24d46:	42a0      	cmp	r0, r4
   24d48:	d008      	beq.n	24d5c <rpc_transport_ipc_msg_free+0x34>
   24d4a:	3301      	adds	r3, #1
   24d4c:	e7f6      	b.n	24d3c <rpc_transport_ipc_msg_free+0x14>
   24d4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   24d52:	68ad      	ldr	r5, [r5, #8]
   24d54:	42a8      	cmp	r0, r5
   24d56:	d001      	beq.n	24d5c <rpc_transport_ipc_msg_free+0x34>
   24d58:	3301      	adds	r3, #1
   24d5a:	e7ea      	b.n	24d32 <rpc_transport_ipc_msg_free+0xa>
   24d5c:	00db      	lsls	r3, r3, #3
   24d5e:	3304      	adds	r3, #4
   24d60:	58d1      	ldr	r1, [r2, r3]
   24d62:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   24d66:	f041 0103 	orr.w	r1, r1, #3
   24d6a:	50d1      	str	r1, [r2, r3]
   24d6c:	bd30      	pop	{r4, r5, pc}
   24d6e:	bf00      	nop
   24d70:	200168ec 	.word	0x200168ec

00024d74 <rpc_transport_ipc_data_free>:
   24d74:	4b0d      	ldr	r3, [pc, #52]	; (24dac <rpc_transport_ipc_data_free+0x38>)
   24d76:	b510      	push	{r4, lr}
   24d78:	681b      	ldr	r3, [r3, #0]
   24d7a:	4604      	mov	r4, r0
   24d7c:	4298      	cmp	r0, r3
   24d7e:	d30a      	bcc.n	24d96 <rpc_transport_ipc_data_free+0x22>
   24d80:	4b0b      	ldr	r3, [pc, #44]	; (24db0 <rpc_transport_ipc_data_free+0x3c>)
   24d82:	681b      	ldr	r3, [r3, #0]
   24d84:	4298      	cmp	r0, r3
   24d86:	d206      	bcs.n	24d96 <rpc_transport_ipc_data_free+0x22>
   24d88:	f7ff ffa8 	bl	24cdc <rpc_transport_ipc_ctrl_msg_alloc>
   24d8c:	b938      	cbnz	r0, 24d9e <rpc_transport_ipc_data_free+0x2a>
   24d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24d92:	f7fa beff 	b.w	1fb94 <nrf_modem_os_application_irq_set>
   24d96:	4620      	mov	r0, r4
   24d98:	f7fa ff32 	bl	1fc00 <nrf_modem_os_shm_tx_free>
   24d9c:	e7f7      	b.n	24d8e <rpc_transport_ipc_data_free+0x1a>
   24d9e:	4a05      	ldr	r2, [pc, #20]	; (24db4 <rpc_transport_ipc_data_free+0x40>)
   24da0:	6084      	str	r4, [r0, #8]
   24da2:	6002      	str	r2, [r0, #0]
   24da4:	f7ff ff62 	bl	24c6c <rpc_transport_ipc_ctrl_msg_send>
   24da8:	e7f1      	b.n	24d8e <rpc_transport_ipc_data_free+0x1a>
   24daa:	bf00      	nop
   24dac:	2001690c 	.word	0x2001690c
   24db0:	20016908 	.word	0x20016908
   24db4:	00020001 	.word	0x00020001

00024db8 <rpc_transport_ipc_init>:
   24db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24dbc:	2200      	movs	r2, #0
   24dbe:	b095      	sub	sp, #84	; 0x54
   24dc0:	4605      	mov	r5, r0
   24dc2:	494f      	ldr	r1, [pc, #316]	; (24f00 <rpc_transport_ipc_init+0x148>)
   24dc4:	7900      	ldrb	r0, [r0, #4]
   24dc6:	f7fe fcd3 	bl	23770 <nrfx_ipc_init>
   24dca:	2238      	movs	r2, #56	; 0x38
   24dcc:	2100      	movs	r1, #0
   24dce:	a803      	add	r0, sp, #12
   24dd0:	f010 fbf9 	bl	355c6 <memset>
   24dd4:	2302      	movs	r3, #2
   24dd6:	9304      	str	r3, [sp, #16]
   24dd8:	2308      	movs	r3, #8
   24dda:	9306      	str	r3, [sp, #24]
   24ddc:	2320      	movs	r3, #32
   24dde:	9308      	str	r3, [sp, #32]
   24de0:	2301      	movs	r3, #1
   24de2:	930b      	str	r3, [sp, #44]	; 0x2c
   24de4:	2304      	movs	r3, #4
   24de6:	930d      	str	r3, [sp, #52]	; 0x34
   24de8:	2310      	movs	r3, #16
   24dea:	f04f 0c40 	mov.w	ip, #64	; 0x40
   24dee:	930f      	str	r3, [sp, #60]	; 0x3c
   24df0:	2380      	movs	r3, #128	; 0x80
   24df2:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   24df6:	23d5      	movs	r3, #213	; 0xd5
   24df8:	a803      	add	r0, sp, #12
   24dfa:	9313      	str	r3, [sp, #76]	; 0x4c
   24dfc:	f7fe fce0 	bl	237c0 <nrfx_ipc_config_load>
   24e00:	682b      	ldr	r3, [r5, #0]
   24e02:	2100      	movs	r1, #0
   24e04:	685a      	ldr	r2, [r3, #4]
   24e06:	6818      	ldr	r0, [r3, #0]
   24e08:	f010 fbdd 	bl	355c6 <memset>
   24e0c:	682a      	ldr	r2, [r5, #0]
   24e0e:	6814      	ldr	r4, [r2, #0]
   24e10:	69d3      	ldr	r3, [r2, #28]
   24e12:	f104 0660 	add.w	r6, r4, #96	; 0x60
   24e16:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   24e1a:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   24e1e:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   24e22:	f104 0920 	add.w	r9, r4, #32
   24e26:	2b00      	cmp	r3, #0
   24e28:	d05c      	beq.n	24ee4 <rpc_transport_ipc_init+0x12c>
   24e2a:	f104 0840 	add.w	r8, r4, #64	; 0x40
   24e2e:	4935      	ldr	r1, [pc, #212]	; (24f04 <rpc_transport_ipc_init+0x14c>)
   24e30:	f8c1 9000 	str.w	r9, [r1]
   24e34:	b13b      	cbz	r3, 24e46 <rpc_transport_ipc_init+0x8e>
   24e36:	6992      	ldr	r2, [r2, #24]
   24e38:	4640      	mov	r0, r8
   24e3a:	f8c8 2004 	str.w	r2, [r8, #4]
   24e3e:	f8c8 3000 	str.w	r3, [r8]
   24e42:	f7ff fdd7 	bl	249f4 <ipc_trace_init>
   24e46:	6828      	ldr	r0, [r5, #0]
   24e48:	4d2f      	ldr	r5, [pc, #188]	; (24f08 <rpc_transport_ipc_init+0x150>)
   24e4a:	2300      	movs	r3, #0
   24e4c:	602f      	str	r7, [r5, #0]
   24e4e:	4d2f      	ldr	r5, [pc, #188]	; (24f0c <rpc_transport_ipc_init+0x154>)
   24e50:	2101      	movs	r1, #1
   24e52:	602e      	str	r6, [r5, #0]
   24e54:	2508      	movs	r5, #8
   24e56:	6902      	ldr	r2, [r0, #16]
   24e58:	6940      	ldr	r0, [r0, #20]
   24e5a:	7023      	strb	r3, [r4, #0]
   24e5c:	7063      	strb	r3, [r4, #1]
   24e5e:	70e3      	strb	r3, [r4, #3]
   24e60:	70a1      	strb	r1, [r4, #2]
   24e62:	6062      	str	r2, [r4, #4]
   24e64:	60a0      	str	r0, [r4, #8]
   24e66:	60e6      	str	r6, [r4, #12]
   24e68:	6127      	str	r7, [r4, #16]
   24e6a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   24e6e:	f8c4 9014 	str.w	r9, [r4, #20]
   24e72:	f8c4 8018 	str.w	r8, [r4, #24]
   24e76:	707b      	strb	r3, [r7, #1]
   24e78:	70bb      	strb	r3, [r7, #2]
   24e7a:	70fb      	strb	r3, [r7, #3]
   24e7c:	2714      	movs	r7, #20
   24e7e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
   24e82:	4d23      	ldr	r5, [pc, #140]	; (24f10 <rpc_transport_ipc_init+0x158>)
   24e84:	7073      	strb	r3, [r6, #1]
   24e86:	f8c5 b000 	str.w	fp, [r5]
   24e8a:	4d22      	ldr	r5, [pc, #136]	; (24f14 <rpc_transport_ipc_init+0x15c>)
   24e8c:	70b3      	strb	r3, [r6, #2]
   24e8e:	f8c5 a000 	str.w	sl, [r5]
   24e92:	4d21      	ldr	r5, [pc, #132]	; (24f18 <rpc_transport_ipc_init+0x160>)
   24e94:	70f3      	strb	r3, [r6, #3]
   24e96:	602a      	str	r2, [r5, #0]
   24e98:	4402      	add	r2, r0
   24e9a:	4820      	ldr	r0, [pc, #128]	; (24f1c <rpc_transport_ipc_init+0x164>)
   24e9c:	4e20      	ldr	r6, [pc, #128]	; (24f20 <rpc_transport_ipc_init+0x168>)
   24e9e:	6002      	str	r2, [r0, #0]
   24ea0:	4a20      	ldr	r2, [pc, #128]	; (24f24 <rpc_transport_ipc_init+0x16c>)
   24ea2:	4d21      	ldr	r5, [pc, #132]	; (24f28 <rpc_transport_ipc_init+0x170>)
   24ea4:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   24ea8:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   24eac:	4c1f      	ldr	r4, [pc, #124]	; (24f2c <rpc_transport_ipc_init+0x174>)
   24eae:	4a20      	ldr	r2, [pc, #128]	; (24f30 <rpc_transport_ipc_init+0x178>)
   24eb0:	6023      	str	r3, [r4, #0]
   24eb2:	9302      	str	r3, [sp, #8]
   24eb4:	7031      	strb	r1, [r6, #0]
   24eb6:	6113      	str	r3, [r2, #16]
   24eb8:	6913      	ldr	r3, [r2, #16]
   24eba:	9302      	str	r3, [sp, #8]
   24ebc:	9b02      	ldr	r3, [sp, #8]
   24ebe:	7833      	ldrb	r3, [r6, #0]
   24ec0:	2b01      	cmp	r3, #1
   24ec2:	d103      	bne.n	24ecc <rpc_transport_ipc_init+0x114>
   24ec4:	b985      	cbnz	r5, 24ee8 <rpc_transport_ipc_init+0x130>
   24ec6:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   24eca:	6023      	str	r3, [r4, #0]
   24ecc:	6824      	ldr	r4, [r4, #0]
   24ece:	b9a4      	cbnz	r4, 24efa <rpc_transport_ipc_init+0x142>
   24ed0:	4b18      	ldr	r3, [pc, #96]	; (24f34 <rpc_transport_ipc_init+0x17c>)
   24ed2:	701c      	strb	r4, [r3, #0]
   24ed4:	4b18      	ldr	r3, [pc, #96]	; (24f38 <rpc_transport_ipc_init+0x180>)
   24ed6:	801c      	strh	r4, [r3, #0]
   24ed8:	4b18      	ldr	r3, [pc, #96]	; (24f3c <rpc_transport_ipc_init+0x184>)
   24eda:	801c      	strh	r4, [r3, #0]
   24edc:	4620      	mov	r0, r4
   24ede:	b015      	add	sp, #84	; 0x54
   24ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ee4:	4698      	mov	r8, r3
   24ee6:	e7a2      	b.n	24e2e <rpc_transport_ipc_init+0x76>
   24ee8:	2000      	movs	r0, #0
   24eea:	a901      	add	r1, sp, #4
   24eec:	9701      	str	r7, [sp, #4]
   24eee:	f7fa fc07 	bl	1f700 <nrf_modem_os_timedwait>
   24ef2:	9b01      	ldr	r3, [sp, #4]
   24ef4:	3b14      	subs	r3, #20
   24ef6:	441d      	add	r5, r3
   24ef8:	e7e1      	b.n	24ebe <rpc_transport_ipc_init+0x106>
   24efa:	f7fe fca5 	bl	23848 <nrfx_ipc_uninit>
   24efe:	e7ed      	b.n	24edc <rpc_transport_ipc_init+0x124>
   24f00:	00024f41 	.word	0x00024f41
   24f04:	200168f4 	.word	0x200168f4
   24f08:	20016904 	.word	0x20016904
   24f0c:	200168fc 	.word	0x200168fc
   24f10:	20016900 	.word	0x20016900
   24f14:	200168f8 	.word	0x200168f8
   24f18:	2001690c 	.word	0x2001690c
   24f1c:	20016908 	.word	0x20016908
   24f20:	2001e4fd 	.word	0x2001e4fd
   24f24:	4002a000 	.word	0x4002a000
   24f28:	000249f0 	.word	0x000249f0
   24f2c:	200168e8 	.word	0x200168e8
   24f30:	40005600 	.word	0x40005600
   24f34:	2001e4fe 	.word	0x2001e4fe
   24f38:	2001ac06 	.word	0x2001ac06
   24f3c:	2001ac04 	.word	0x2001ac04

00024f40 <ipc_irq_handler>:
   24f40:	b538      	push	{r3, r4, r5, lr}
   24f42:	4604      	mov	r4, r0
   24f44:	0620      	lsls	r0, r4, #24
   24f46:	d50c      	bpl.n	24f62 <ipc_irq_handler+0x22>
   24f48:	f7ff fd86 	bl	24a58 <ipc_trace_handle>
   24f4c:	f7ff fe18 	bl	24b80 <rpc_trace_coredump_in_progress>
   24f50:	b138      	cbz	r0, 24f62 <ipc_irq_handler+0x22>
   24f52:	22e0      	movs	r2, #224	; 0xe0
   24f54:	4b3f      	ldr	r3, [pc, #252]	; (25054 <ipc_irq_handler+0x114>)
   24f56:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   24f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24f5e:	605a      	str	r2, [r3, #4]
   24f60:	bd38      	pop	{r3, r4, r5, pc}
   24f62:	07e1      	lsls	r1, r4, #31
   24f64:	d548      	bpl.n	24ff8 <ipc_irq_handler+0xb8>
   24f66:	f248 0202 	movw	r2, #32770	; 0x8002
   24f6a:	4b3b      	ldr	r3, [pc, #236]	; (25058 <ipc_irq_handler+0x118>)
   24f6c:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   24f70:	4293      	cmp	r3, r2
   24f72:	d035      	beq.n	24fe0 <ipc_irq_handler+0xa0>
   24f74:	d81b      	bhi.n	24fae <ipc_irq_handler+0x6e>
   24f76:	f243 0232 	movw	r2, #12338	; 0x3032
   24f7a:	4293      	cmp	r3, r2
   24f7c:	d036      	beq.n	24fec <ipc_irq_handler+0xac>
   24f7e:	d80b      	bhi.n	24f98 <ipc_irq_handler+0x58>
   24f80:	3b01      	subs	r3, #1
   24f82:	2b01      	cmp	r3, #1
   24f84:	d8ec      	bhi.n	24f60 <ipc_irq_handler+0x20>
   24f86:	2203      	movs	r2, #3
   24f88:	200e      	movs	r0, #14
   24f8a:	4b34      	ldr	r3, [pc, #208]	; (2505c <ipc_irq_handler+0x11c>)
   24f8c:	701a      	strb	r2, [r3, #0]
   24f8e:	4b34      	ldr	r3, [pc, #208]	; (25060 <ipc_irq_handler+0x120>)
   24f90:	6018      	str	r0, [r3, #0]
   24f92:	f00f ff6f 	bl	34e74 <rpc_transport_ipc_fault_handler>
   24f96:	e7e3      	b.n	24f60 <ipc_irq_handler+0x20>
   24f98:	f248 0201 	movw	r2, #32769	; 0x8001
   24f9c:	4293      	cmp	r3, r2
   24f9e:	d1df      	bne.n	24f60 <ipc_irq_handler+0x20>
   24fa0:	2203      	movs	r2, #3
   24fa2:	4b2e      	ldr	r3, [pc, #184]	; (2505c <ipc_irq_handler+0x11c>)
   24fa4:	701a      	strb	r2, [r3, #0]
   24fa6:	2216      	movs	r2, #22
   24fa8:	4b2d      	ldr	r3, [pc, #180]	; (25060 <ipc_irq_handler+0x120>)
   24faa:	601a      	str	r2, [r3, #0]
   24fac:	e7d8      	b.n	24f60 <ipc_irq_handler+0x20>
   24fae:	4a2d      	ldr	r2, [pc, #180]	; (25064 <ipc_irq_handler+0x124>)
   24fb0:	4293      	cmp	r3, r2
   24fb2:	d80c      	bhi.n	24fce <ipc_irq_handler+0x8e>
   24fb4:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   24fb8:	d80c      	bhi.n	24fd4 <ipc_irq_handler+0x94>
   24fba:	f248 0203 	movw	r2, #32771	; 0x8003
   24fbe:	4293      	cmp	r3, r2
   24fc0:	d1ce      	bne.n	24f60 <ipc_irq_handler+0x20>
   24fc2:	2203      	movs	r2, #3
   24fc4:	4b25      	ldr	r3, [pc, #148]	; (2505c <ipc_irq_handler+0x11c>)
   24fc6:	701a      	strb	r2, [r3, #0]
   24fc8:	220c      	movs	r2, #12
   24fca:	4b25      	ldr	r3, [pc, #148]	; (25060 <ipc_irq_handler+0x120>)
   24fcc:	e7ed      	b.n	24faa <ipc_irq_handler+0x6a>
   24fce:	4a26      	ldr	r2, [pc, #152]	; (25068 <ipc_irq_handler+0x128>)
   24fd0:	4293      	cmp	r3, r2
   24fd2:	d1c5      	bne.n	24f60 <ipc_irq_handler+0x20>
   24fd4:	2103      	movs	r1, #3
   24fd6:	4a21      	ldr	r2, [pc, #132]	; (2505c <ipc_irq_handler+0x11c>)
   24fd8:	7011      	strb	r1, [r2, #0]
   24fda:	4a21      	ldr	r2, [pc, #132]	; (25060 <ipc_irq_handler+0x120>)
   24fdc:	6013      	str	r3, [r2, #0]
   24fde:	e7bf      	b.n	24f60 <ipc_irq_handler+0x20>
   24fe0:	2203      	movs	r2, #3
   24fe2:	4b1e      	ldr	r3, [pc, #120]	; (2505c <ipc_irq_handler+0x11c>)
   24fe4:	701a      	strb	r2, [r3, #0]
   24fe6:	222d      	movs	r2, #45	; 0x2d
   24fe8:	4b1d      	ldr	r3, [pc, #116]	; (25060 <ipc_irq_handler+0x120>)
   24fea:	e7de      	b.n	24faa <ipc_irq_handler+0x6a>
   24fec:	2203      	movs	r2, #3
   24fee:	4b1b      	ldr	r3, [pc, #108]	; (2505c <ipc_irq_handler+0x11c>)
   24ff0:	701a      	strb	r2, [r3, #0]
   24ff2:	2205      	movs	r2, #5
   24ff4:	4b1a      	ldr	r3, [pc, #104]	; (25060 <ipc_irq_handler+0x120>)
   24ff6:	e7d8      	b.n	24faa <ipc_irq_handler+0x6a>
   24ff8:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   24ffc:	d003      	beq.n	25006 <ipc_irq_handler+0xc6>
   24ffe:	2202      	movs	r2, #2
   25000:	4b16      	ldr	r3, [pc, #88]	; (2505c <ipc_irq_handler+0x11c>)
   25002:	701a      	strb	r2, [r3, #0]
   25004:	e7ac      	b.n	24f60 <ipc_irq_handler+0x20>
   25006:	0762      	lsls	r2, r4, #29
   25008:	d504      	bpl.n	25014 <ipc_irq_handler+0xd4>
   2500a:	4b14      	ldr	r3, [pc, #80]	; (2505c <ipc_irq_handler+0x11c>)
   2500c:	781a      	ldrb	r2, [r3, #0]
   2500e:	b93a      	cbnz	r2, 25020 <ipc_irq_handler+0xe0>
   25010:	f7fa fdc0 	bl	1fb94 <nrf_modem_os_application_irq_set>
   25014:	06e3      	lsls	r3, r4, #27
   25016:	d5a3      	bpl.n	24f60 <ipc_irq_handler+0x20>
   25018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2501c:	f7fa bdba 	b.w	1fb94 <nrf_modem_os_application_irq_set>
   25020:	2a01      	cmp	r2, #1
   25022:	d1f7      	bne.n	25014 <ipc_irq_handler+0xd4>
   25024:	4a11      	ldr	r2, [pc, #68]	; (2506c <ipc_irq_handler+0x12c>)
   25026:	4812      	ldr	r0, [pc, #72]	; (25070 <ipc_irq_handler+0x130>)
   25028:	6812      	ldr	r2, [r2, #0]
   2502a:	6891      	ldr	r1, [r2, #8]
   2502c:	6041      	str	r1, [r0, #4]
   2502e:	6852      	ldr	r2, [r2, #4]
   25030:	6002      	str	r2, [r0, #0]
   25032:	b101      	cbz	r1, 25036 <ipc_irq_handler+0xf6>
   25034:	b92a      	cbnz	r2, 25042 <ipc_irq_handler+0x102>
   25036:	2203      	movs	r2, #3
   25038:	701a      	strb	r2, [r3, #0]
   2503a:	2216      	movs	r2, #22
   2503c:	4b08      	ldr	r3, [pc, #32]	; (25060 <ipc_irq_handler+0x120>)
   2503e:	601a      	str	r2, [r3, #0]
   25040:	e7e8      	b.n	25014 <ipc_irq_handler+0xd4>
   25042:	6809      	ldr	r1, [r1, #0]
   25044:	2910      	cmp	r1, #16
   25046:	d8f6      	bhi.n	25036 <ipc_irq_handler+0xf6>
   25048:	6812      	ldr	r2, [r2, #0]
   2504a:	2a10      	cmp	r2, #16
   2504c:	d8f3      	bhi.n	25036 <ipc_irq_handler+0xf6>
   2504e:	701d      	strb	r5, [r3, #0]
   25050:	e7e0      	b.n	25014 <ipc_irq_handler+0xd4>
   25052:	bf00      	nop
   25054:	e000e100 	.word	0xe000e100
   25058:	4002a000 	.word	0x4002a000
   2505c:	2001e4fd 	.word	0x2001e4fd
   25060:	200168e8 	.word	0x200168e8
   25064:	04400004 	.word	0x04400004
   25068:	05500001 	.word	0x05500001
   2506c:	200168f4 	.word	0x200168f4
   25070:	200168ec 	.word	0x200168ec

00025074 <gnss_client_event_handler>:
   25074:	f850 1b08 	ldr.w	r1, [r0], #8
   25078:	4b01      	ldr	r3, [pc, #4]	; (25080 <gnss_client_event_handler+0xc>)
   2507a:	0c09      	lsrs	r1, r1, #16
   2507c:	681b      	ldr	r3, [r3, #0]
   2507e:	4718      	bx	r3
   25080:	20016910 	.word	0x20016910

00025084 <rpc_gnss_client_set_handler>:
   25084:	4b01      	ldr	r3, [pc, #4]	; (2508c <rpc_gnss_client_set_handler+0x8>)
   25086:	6018      	str	r0, [r3, #0]
   25088:	4770      	bx	lr
   2508a:	bf00      	nop
   2508c:	20016910 	.word	0x20016910

00025090 <interface_init>:
   25090:	b508      	push	{r3, lr}
   25092:	f44f 72c6 	mov.w	r2, #396	; 0x18c
   25096:	2100      	movs	r1, #0
   25098:	4802      	ldr	r0, [pc, #8]	; (250a4 <interface_init+0x14>)
   2509a:	f010 fa94 	bl	355c6 <memset>
   2509e:	2000      	movs	r0, #0
   250a0:	bd08      	pop	{r3, pc}
   250a2:	bf00      	nop
   250a4:	20016914 	.word	0x20016914

000250a8 <interface_socket_allocate>:
   250a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250aa:	4606      	mov	r6, r0
   250ac:	2400      	movs	r4, #0
   250ae:	272c      	movs	r7, #44	; 0x2c
   250b0:	4b0f      	ldr	r3, [pc, #60]	; (250f0 <interface_socket_allocate+0x48>)
   250b2:	fb07 f004 	mul.w	r0, r7, r4
   250b6:	181d      	adds	r5, r3, r0
   250b8:	5818      	ldr	r0, [r3, r0]
   250ba:	b988      	cbnz	r0, 250e0 <interface_socket_allocate+0x38>
   250bc:	f04f 37ff 	mov.w	r7, #4294967295
   250c0:	2301      	movs	r3, #1
   250c2:	4628      	mov	r0, r5
   250c4:	61af      	str	r7, [r5, #24]
   250c6:	602b      	str	r3, [r5, #0]
   250c8:	f00f f823 	bl	34112 <packet_handler_alloc_and_init>
   250cc:	b168      	cbz	r0, 250ea <interface_socket_allocate+0x42>
   250ce:	4628      	mov	r0, r5
   250d0:	f00f f836 	bl	34140 <socket_free>
   250d4:	200c      	movs	r0, #12
   250d6:	f7fa fbcb 	bl	1f870 <nrf_modem_os_errno_set>
   250da:	f04f 34ff 	mov.w	r4, #4294967295
   250de:	e005      	b.n	250ec <interface_socket_allocate+0x44>
   250e0:	3401      	adds	r4, #1
   250e2:	2c09      	cmp	r4, #9
   250e4:	d1e5      	bne.n	250b2 <interface_socket_allocate+0xa>
   250e6:	2069      	movs	r0, #105	; 0x69
   250e8:	e7f5      	b.n	250d6 <interface_socket_allocate+0x2e>
   250ea:	6035      	str	r5, [r6, #0]
   250ec:	4620      	mov	r0, r4
   250ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   250f0:	20016914 	.word	0x20016914

000250f4 <interface_socket_free>:
   250f4:	2808      	cmp	r0, #8
   250f6:	d805      	bhi.n	25104 <interface_socket_free+0x10>
   250f8:	222c      	movs	r2, #44	; 0x2c
   250fa:	4b03      	ldr	r3, [pc, #12]	; (25108 <interface_socket_free+0x14>)
   250fc:	fb02 3000 	mla	r0, r2, r0, r3
   25100:	f00f b81e 	b.w	34140 <socket_free>
   25104:	4770      	bx	lr
   25106:	bf00      	nop
   25108:	20016914 	.word	0x20016914

0002510c <interface_socket_packet_handler_update>:
   2510c:	2808      	cmp	r0, #8
   2510e:	b570      	push	{r4, r5, r6, lr}
   25110:	d812      	bhi.n	25138 <interface_socket_packet_handler_update+0x2c>
   25112:	242c      	movs	r4, #44	; 0x2c
   25114:	4360      	muls	r0, r4
   25116:	4b09      	ldr	r3, [pc, #36]	; (2513c <interface_socket_packet_handler_update+0x30>)
   25118:	181d      	adds	r5, r3, r0
   2511a:	581b      	ldr	r3, [r3, r0]
   2511c:	b163      	cbz	r3, 25138 <interface_socket_packet_handler_update+0x2c>
   2511e:	4628      	mov	r0, r5
   25120:	69ee      	ldr	r6, [r5, #28]
   25122:	f00e fff6 	bl	34112 <packet_handler_alloc_and_init>
   25126:	4604      	mov	r4, r0
   25128:	b920      	cbnz	r0, 25134 <interface_socket_packet_handler_update+0x28>
   2512a:	4630      	mov	r0, r6
   2512c:	f00f fe84 	bl	34e38 <packet_handler_delete>
   25130:	4620      	mov	r0, r4
   25132:	bd70      	pop	{r4, r5, r6, pc}
   25134:	61ee      	str	r6, [r5, #28]
   25136:	e7fb      	b.n	25130 <interface_socket_packet_handler_update+0x24>
   25138:	2402      	movs	r4, #2
   2513a:	e7f9      	b.n	25130 <interface_socket_packet_handler_update+0x24>
   2513c:	20016914 	.word	0x20016914

00025140 <interface_socket_wait>:
   25140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25142:	4616      	mov	r6, r2
   25144:	222c      	movs	r2, #44	; 0x2c
   25146:	4350      	muls	r0, r2
   25148:	461f      	mov	r7, r3
   2514a:	4b0d      	ldr	r3, [pc, #52]	; (25180 <interface_socket_wait+0x40>)
   2514c:	460d      	mov	r5, r1
   2514e:	181c      	adds	r4, r3, r0
   25150:	581b      	ldr	r3, [r3, r0]
   25152:	4033      	ands	r3, r6
   25154:	428b      	cmp	r3, r1
   25156:	d101      	bne.n	2515c <interface_socket_wait+0x1c>
   25158:	2000      	movs	r0, #0
   2515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2515c:	6863      	ldr	r3, [r4, #4]
   2515e:	2b00      	cmp	r3, #0
   25160:	d1fa      	bne.n	25158 <interface_socket_wait+0x18>
   25162:	6823      	ldr	r3, [r4, #0]
   25164:	4033      	ands	r3, r6
   25166:	42ab      	cmp	r3, r5
   25168:	d0f6      	beq.n	25158 <interface_socket_wait+0x18>
   2516a:	6863      	ldr	r3, [r4, #4]
   2516c:	2b00      	cmp	r3, #0
   2516e:	d1f3      	bne.n	25158 <interface_socket_wait+0x18>
   25170:	4639      	mov	r1, r7
   25172:	4620      	mov	r0, r4
   25174:	f7fa fac4 	bl	1f700 <nrf_modem_os_timedwait>
   25178:	2800      	cmp	r0, #0
   2517a:	d0f2      	beq.n	25162 <interface_socket_wait+0x22>
   2517c:	e7ed      	b.n	2515a <interface_socket_wait+0x1a>
   2517e:	bf00      	nop
   25180:	20016914 	.word	0x20016914

00025184 <interface_from_internal_id_search>:
   25184:	4b0a      	ldr	r3, [pc, #40]	; (251b0 <interface_from_internal_id_search+0x2c>)
   25186:	4602      	mov	r2, r0
   25188:	b530      	push	{r4, r5, lr}
   2518a:	2000      	movs	r0, #0
   2518c:	461c      	mov	r4, r3
   2518e:	212c      	movs	r1, #44	; 0x2c
   25190:	fb01 f500 	mul.w	r5, r1, r0
   25194:	5965      	ldr	r5, [r4, r5]
   25196:	b115      	cbz	r5, 2519e <interface_from_internal_id_search+0x1a>
   25198:	699d      	ldr	r5, [r3, #24]
   2519a:	4295      	cmp	r5, r2
   2519c:	d006      	beq.n	251ac <interface_from_internal_id_search+0x28>
   2519e:	3001      	adds	r0, #1
   251a0:	2809      	cmp	r0, #9
   251a2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   251a6:	d1f3      	bne.n	25190 <interface_from_internal_id_search+0xc>
   251a8:	f04f 30ff 	mov.w	r0, #4294967295
   251ac:	bd30      	pop	{r4, r5, pc}
   251ae:	bf00      	nop
   251b0:	20016914 	.word	0x20016914

000251b4 <interface_socket_from_handle_get>:
   251b4:	2808      	cmp	r0, #8
   251b6:	d808      	bhi.n	251ca <interface_socket_from_handle_get+0x16>
   251b8:	232c      	movs	r3, #44	; 0x2c
   251ba:	4343      	muls	r3, r0
   251bc:	4a04      	ldr	r2, [pc, #16]	; (251d0 <interface_socket_from_handle_get+0x1c>)
   251be:	18d0      	adds	r0, r2, r3
   251c0:	58d3      	ldr	r3, [r2, r3]
   251c2:	2b00      	cmp	r3, #0
   251c4:	bf08      	it	eq
   251c6:	2000      	moveq	r0, #0
   251c8:	4770      	bx	lr
   251ca:	2000      	movs	r0, #0
   251cc:	4770      	bx	lr
   251ce:	bf00      	nop
   251d0:	20016914 	.word	0x20016914

000251d4 <interface_socket_setopt>:
   251d4:	2808      	cmp	r0, #8
   251d6:	b570      	push	{r4, r5, r6, lr}
   251d8:	461c      	mov	r4, r3
   251da:	d82e      	bhi.n	2523a <interface_socket_setopt+0x66>
   251dc:	252c      	movs	r5, #44	; 0x2c
   251de:	4368      	muls	r0, r5
   251e0:	4b17      	ldr	r3, [pc, #92]	; (25240 <interface_socket_setopt+0x6c>)
   251e2:	181d      	adds	r5, r3, r0
   251e4:	581b      	ldr	r3, [r3, r0]
   251e6:	b343      	cbz	r3, 2523a <interface_socket_setopt+0x66>
   251e8:	2901      	cmp	r1, #1
   251ea:	d005      	beq.n	251f8 <interface_socket_setopt+0x24>
   251ec:	202a      	movs	r0, #42	; 0x2a
   251ee:	f7fa fb3f 	bl	1f870 <nrf_modem_os_errno_set>
   251f2:	f04f 30ff 	mov.w	r0, #4294967295
   251f6:	e01d      	b.n	25234 <interface_socket_setopt+0x60>
   251f8:	f1a2 0314 	sub.w	r3, r2, #20
   251fc:	2b01      	cmp	r3, #1
   251fe:	d8f5      	bhi.n	251ec <interface_socket_setopt+0x18>
   25200:	9b04      	ldr	r3, [sp, #16]
   25202:	2b08      	cmp	r3, #8
   25204:	d117      	bne.n	25236 <interface_socket_setopt+0x62>
   25206:	b1b4      	cbz	r4, 25236 <interface_socket_setopt+0x62>
   25208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2520c:	2000      	movs	r0, #0
   2520e:	6863      	ldr	r3, [r4, #4]
   25210:	4606      	mov	r6, r0
   25212:	fbb3 f3f1 	udiv	r3, r3, r1
   25216:	6824      	ldr	r4, [r4, #0]
   25218:	fbe4 3601 	umlal	r3, r6, r4, r1
   2521c:	f04f 34ff 	mov.w	r4, #4294967295
   25220:	429c      	cmp	r4, r3
   25222:	eb70 0106 	sbcs.w	r1, r0, r6
   25226:	d201      	bcs.n	2522c <interface_socket_setopt+0x58>
   25228:	2025      	movs	r0, #37	; 0x25
   2522a:	e7e0      	b.n	251ee <interface_socket_setopt+0x1a>
   2522c:	2a14      	cmp	r2, #20
   2522e:	bf0c      	ite	eq
   25230:	622b      	streq	r3, [r5, #32]
   25232:	626b      	strne	r3, [r5, #36]	; 0x24
   25234:	bd70      	pop	{r4, r5, r6, pc}
   25236:	2016      	movs	r0, #22
   25238:	e7d9      	b.n	251ee <interface_socket_setopt+0x1a>
   2523a:	2009      	movs	r0, #9
   2523c:	e7d7      	b.n	251ee <interface_socket_setopt+0x1a>
   2523e:	bf00      	nop
   25240:	20016914 	.word	0x20016914

00025244 <interface_socket_getopt>:
   25244:	b570      	push	{r4, r5, r6, lr}
   25246:	2808      	cmp	r0, #8
   25248:	9d04      	ldr	r5, [sp, #16]
   2524a:	d832      	bhi.n	252b2 <interface_socket_getopt+0x6e>
   2524c:	242c      	movs	r4, #44	; 0x2c
   2524e:	4360      	muls	r0, r4
   25250:	4e19      	ldr	r6, [pc, #100]	; (252b8 <interface_socket_getopt+0x74>)
   25252:	1834      	adds	r4, r6, r0
   25254:	5830      	ldr	r0, [r6, r0]
   25256:	b360      	cbz	r0, 252b2 <interface_socket_getopt+0x6e>
   25258:	2901      	cmp	r1, #1
   2525a:	d005      	beq.n	25268 <interface_socket_getopt+0x24>
   2525c:	202a      	movs	r0, #42	; 0x2a
   2525e:	f7fa fb07 	bl	1f870 <nrf_modem_os_errno_set>
   25262:	f04f 30ff 	mov.w	r0, #4294967295
   25266:	e00c      	b.n	25282 <interface_socket_getopt+0x3e>
   25268:	b103      	cbz	r3, 2526c <interface_socket_getopt+0x28>
   2526a:	b90d      	cbnz	r5, 25270 <interface_socket_getopt+0x2c>
   2526c:	2016      	movs	r0, #22
   2526e:	e7f6      	b.n	2525e <interface_socket_getopt+0x1a>
   25270:	2a04      	cmp	r2, #4
   25272:	d107      	bne.n	25284 <interface_socket_getopt+0x40>
   25274:	682a      	ldr	r2, [r5, #0]
   25276:	2a04      	cmp	r2, #4
   25278:	d1f8      	bne.n	2526c <interface_socket_getopt+0x28>
   2527a:	2000      	movs	r0, #0
   2527c:	6862      	ldr	r2, [r4, #4]
   2527e:	601a      	str	r2, [r3, #0]
   25280:	6060      	str	r0, [r4, #4]
   25282:	bd70      	pop	{r4, r5, r6, pc}
   25284:	f1a2 0114 	sub.w	r1, r2, #20
   25288:	2901      	cmp	r1, #1
   2528a:	d8e7      	bhi.n	2525c <interface_socket_getopt+0x18>
   2528c:	6829      	ldr	r1, [r5, #0]
   2528e:	2908      	cmp	r1, #8
   25290:	d1ec      	bne.n	2526c <interface_socket_getopt+0x28>
   25292:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   25296:	2a14      	cmp	r2, #20
   25298:	bf18      	it	ne
   2529a:	4601      	movne	r1, r0
   2529c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   252a0:	fbb1 f0f2 	udiv	r0, r1, r2
   252a4:	fb02 1110 	mls	r1, r2, r0, r1
   252a8:	4351      	muls	r1, r2
   252aa:	6018      	str	r0, [r3, #0]
   252ac:	6059      	str	r1, [r3, #4]
   252ae:	2000      	movs	r0, #0
   252b0:	e7e7      	b.n	25282 <interface_socket_getopt+0x3e>
   252b2:	2009      	movs	r0, #9
   252b4:	e7d3      	b.n	2525e <interface_socket_getopt+0x1a>
   252b6:	bf00      	nop
   252b8:	20016914 	.word	0x20016914

000252bc <interface_socket_fcntl>:
   252bc:	2808      	cmp	r0, #8
   252be:	b510      	push	{r4, lr}
   252c0:	d82c      	bhi.n	2531c <interface_socket_fcntl+0x60>
   252c2:	232c      	movs	r3, #44	; 0x2c
   252c4:	4343      	muls	r3, r0
   252c6:	4c16      	ldr	r4, [pc, #88]	; (25320 <interface_socket_fcntl+0x64>)
   252c8:	58e0      	ldr	r0, [r4, r3]
   252ca:	b338      	cbz	r0, 2531c <interface_socket_fcntl+0x60>
   252cc:	2901      	cmp	r1, #1
   252ce:	d11d      	bne.n	2530c <interface_socket_fcntl+0x50>
   252d0:	f012 0001 	ands.w	r0, r2, #1
   252d4:	58e2      	ldr	r2, [r4, r3]
   252d6:	d004      	beq.n	252e2 <interface_socket_fcntl+0x26>
   252d8:	2000      	movs	r0, #0
   252da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   252de:	50e2      	str	r2, [r4, r3]
   252e0:	bd10      	pop	{r4, pc}
   252e2:	0092      	lsls	r2, r2, #2
   252e4:	d407      	bmi.n	252f6 <interface_socket_fcntl+0x3a>
   252e6:	58e2      	ldr	r2, [r4, r3]
   252e8:	b292      	uxth	r2, r2
   252ea:	2a0a      	cmp	r2, #10
   252ec:	d003      	beq.n	252f6 <interface_socket_fcntl+0x3a>
   252ee:	58e2      	ldr	r2, [r4, r3]
   252f0:	b292      	uxth	r2, r2
   252f2:	2a0b      	cmp	r2, #11
   252f4:	d105      	bne.n	25302 <interface_socket_fcntl+0x46>
   252f6:	2023      	movs	r0, #35	; 0x23
   252f8:	f7fa faba 	bl	1f870 <nrf_modem_os_errno_set>
   252fc:	f04f 30ff 	mov.w	r0, #4294967295
   25300:	e7ee      	b.n	252e0 <interface_socket_fcntl+0x24>
   25302:	58e2      	ldr	r2, [r4, r3]
   25304:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   25308:	50e2      	str	r2, [r4, r3]
   2530a:	e7e9      	b.n	252e0 <interface_socket_fcntl+0x24>
   2530c:	2902      	cmp	r1, #2
   2530e:	d103      	bne.n	25318 <interface_socket_fcntl+0x5c>
   25310:	58e0      	ldr	r0, [r4, r3]
   25312:	f3c0 7000 	ubfx	r0, r0, #28, #1
   25316:	e7e3      	b.n	252e0 <interface_socket_fcntl+0x24>
   25318:	2016      	movs	r0, #22
   2531a:	e7ed      	b.n	252f8 <interface_socket_fcntl+0x3c>
   2531c:	2009      	movs	r0, #9
   2531e:	e7eb      	b.n	252f8 <interface_socket_fcntl+0x3c>
   25320:	20016914 	.word	0x20016914

00025324 <rpc_error_to_nrf_errno>:
   25324:	286a      	cmp	r0, #106	; 0x6a
   25326:	bf9a      	itte	ls
   25328:	4b01      	ldrls	r3, [pc, #4]	; (25330 <rpc_error_to_nrf_errno+0xc>)
   2532a:	5618      	ldrsbls	r0, [r3, r0]
   2532c:	202d      	movhi	r0, #45	; 0x2d
   2532e:	4770      	bx	lr
   25330:	0003ddf8 	.word	0x0003ddf8

00025334 <rpc_error_to_nrf_gai_errno>:
   25334:	2805      	cmp	r0, #5
   25336:	b508      	push	{r3, lr}
   25338:	d012      	beq.n	25360 <rpc_error_to_nrf_gai_errno+0x2c>
   2533a:	d807      	bhi.n	2534c <rpc_error_to_nrf_gai_errno+0x18>
   2533c:	b168      	cbz	r0, 2535a <rpc_error_to_nrf_gai_errno+0x26>
   2533e:	f7ff fff1 	bl	25324 <rpc_error_to_nrf_errno>
   25342:	4b09      	ldr	r3, [pc, #36]	; (25368 <rpc_error_to_nrf_gai_errno+0x34>)
   25344:	6018      	str	r0, [r3, #0]
   25346:	f240 1015 	movw	r0, #277	; 0x115
   2534a:	e008      	b.n	2535e <rpc_error_to_nrf_gai_errno+0x2a>
   2534c:	2806      	cmp	r0, #6
   2534e:	d001      	beq.n	25354 <rpc_error_to_nrf_gai_errno+0x20>
   25350:	280d      	cmp	r0, #13
   25352:	d1f4      	bne.n	2533e <rpc_error_to_nrf_gai_errno+0xa>
   25354:	f240 1011 	movw	r0, #273	; 0x111
   25358:	e001      	b.n	2535e <rpc_error_to_nrf_gai_errno+0x2a>
   2535a:	4b03      	ldr	r3, [pc, #12]	; (25368 <rpc_error_to_nrf_gai_errno+0x34>)
   2535c:	6018      	str	r0, [r3, #0]
   2535e:	bd08      	pop	{r3, pc}
   25360:	f44f 708a 	mov.w	r0, #276	; 0x114
   25364:	e7fb      	b.n	2535e <rpc_error_to_nrf_gai_errno+0x2a>
   25366:	bf00      	nop
   25368:	20016aa8 	.word	0x20016aa8

0002536c <ip_interface_init>:
   2536c:	b510      	push	{r4, lr}
   2536e:	2400      	movs	r4, #0
   25370:	4b06      	ldr	r3, [pc, #24]	; (2538c <ip_interface_init+0x20>)
   25372:	2224      	movs	r2, #36	; 0x24
   25374:	601c      	str	r4, [r3, #0]
   25376:	4b06      	ldr	r3, [pc, #24]	; (25390 <ip_interface_init+0x24>)
   25378:	4621      	mov	r1, r4
   2537a:	4806      	ldr	r0, [pc, #24]	; (25394 <ip_interface_init+0x28>)
   2537c:	601c      	str	r4, [r3, #0]
   2537e:	f010 f922 	bl	355c6 <memset>
   25382:	2201      	movs	r2, #1
   25384:	4b04      	ldr	r3, [pc, #16]	; (25398 <ip_interface_init+0x2c>)
   25386:	4620      	mov	r0, r4
   25388:	701a      	strb	r2, [r3, #0]
   2538a:	bd10      	pop	{r4, pc}
   2538c:	20016ab4 	.word	0x20016ab4
   25390:	20016ab0 	.word	0x20016ab0
   25394:	20016ab8 	.word	0x20016ab8
   25398:	2001e4ff 	.word	0x2001e4ff

0002539c <ip_interface_open>:
   2539c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   253a0:	2302      	movs	r3, #2
   253a2:	4616      	mov	r6, r2
   253a4:	2200      	movs	r2, #0
   253a6:	f04f 38ff 	mov.w	r8, #4294967295
   253aa:	e9cd 2301 	strd	r2, r3, [sp, #4]
   253ae:	4b36      	ldr	r3, [pc, #216]	; (25488 <ip_interface_open+0xec>)
   253b0:	4607      	mov	r7, r0
   253b2:	781b      	ldrb	r3, [r3, #0]
   253b4:	460d      	mov	r5, r1
   253b6:	f8cd 800c 	str.w	r8, [sp, #12]
   253ba:	b943      	cbnz	r3, 253ce <ip_interface_open+0x32>
   253bc:	2070      	movs	r0, #112	; 0x70
   253be:	f7fa fa57 	bl	1f870 <nrf_modem_os_errno_set>
   253c2:	f04f 34ff 	mov.w	r4, #4294967295
   253c6:	4620      	mov	r0, r4
   253c8:	b004      	add	sp, #16
   253ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   253ce:	f00e fedc 	bl	3418a <address_family_verify>
   253d2:	4604      	mov	r4, r0
   253d4:	2800      	cmp	r0, #0
   253d6:	d1f6      	bne.n	253c6 <ip_interface_open+0x2a>
   253d8:	1e6b      	subs	r3, r5, #1
   253da:	2b02      	cmp	r3, #2
   253dc:	d815      	bhi.n	2540a <ip_interface_open+0x6e>
   253de:	4631      	mov	r1, r6
   253e0:	4628      	mov	r0, r5
   253e2:	aa02      	add	r2, sp, #8
   253e4:	f00e ff15 	bl	34212 <protocol_verify>
   253e8:	4606      	mov	r6, r0
   253ea:	2800      	cmp	r0, #0
   253ec:	d149      	bne.n	25482 <ip_interface_open+0xe6>
   253ee:	4629      	mov	r1, r5
   253f0:	4a26      	ldr	r2, [pc, #152]	; (2548c <ip_interface_open+0xf0>)
   253f2:	a801      	add	r0, sp, #4
   253f4:	f7ff fe58 	bl	250a8 <interface_socket_allocate>
   253f8:	9b01      	ldr	r3, [sp, #4]
   253fa:	4604      	mov	r4, r0
   253fc:	b93b      	cbnz	r3, 2540e <ip_interface_open+0x72>
   253fe:	2669      	movs	r6, #105	; 0x69
   25400:	4620      	mov	r0, r4
   25402:	f7ff fe77 	bl	250f4 <interface_socket_free>
   25406:	4630      	mov	r0, r6
   25408:	e7d9      	b.n	253be <ip_interface_open+0x22>
   2540a:	2016      	movs	r0, #22
   2540c:	e7d7      	b.n	253be <ip_interface_open+0x22>
   2540e:	9a02      	ldr	r2, [sp, #8]
   25410:	4641      	mov	r1, r8
   25412:	615a      	str	r2, [r3, #20]
   25414:	e9c3 7503 	strd	r7, r5, [r3, #12]
   25418:	f247 0201 	movw	r2, #28673	; 0x7001
   2541c:	4633      	mov	r3, r6
   2541e:	f00e ff16 	bl	3424e <ip_interface_request_create>
   25422:	4601      	mov	r1, r0
   25424:	2800      	cmp	r0, #0
   25426:	d0ea      	beq.n	253fe <ip_interface_open+0x62>
   25428:	6883      	ldr	r3, [r0, #8]
   2542a:	3f02      	subs	r7, #2
   2542c:	330c      	adds	r3, #12
   2542e:	2f08      	cmp	r7, #8
   25430:	6083      	str	r3, [r0, #8]
   25432:	bf98      	it	ls
   25434:	4b16      	ldrls	r3, [pc, #88]	; (25490 <ip_interface_open+0xf4>)
   25436:	6185      	str	r5, [r0, #24]
   25438:	bf98      	it	ls
   2543a:	57de      	ldrsbls	r6, [r3, r7]
   2543c:	9b02      	ldr	r3, [sp, #8]
   2543e:	6146      	str	r6, [r0, #20]
   25440:	61c3      	str	r3, [r0, #28]
   25442:	f247 0201 	movw	r2, #28673	; 0x7001
   25446:	2301      	movs	r3, #1
   25448:	9801      	ldr	r0, [sp, #4]
   2544a:	f00e ff18 	bl	3427e <ip_interface_request_send>
   2544e:	4606      	mov	r6, r0
   25450:	2800      	cmp	r0, #0
   25452:	d1d5      	bne.n	25400 <ip_interface_open+0x64>
   25454:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25458:	2102      	movs	r1, #2
   2545a:	4620      	mov	r0, r4
   2545c:	ab03      	add	r3, sp, #12
   2545e:	f00e ff21 	bl	342a4 <ip_interface_wait>
   25462:	4606      	mov	r6, r0
   25464:	2800      	cmp	r0, #0
   25466:	d1cb      	bne.n	25400 <ip_interface_open+0x64>
   25468:	3d02      	subs	r5, #2
   2546a:	2d01      	cmp	r5, #1
   2546c:	d8ab      	bhi.n	253c6 <ip_interface_open+0x2a>
   2546e:	9b01      	ldr	r3, [sp, #4]
   25470:	681a      	ldr	r2, [r3, #0]
   25472:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   25476:	601a      	str	r2, [r3, #0]
   25478:	681a      	ldr	r2, [r3, #0]
   2547a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2547e:	601a      	str	r2, [r3, #0]
   25480:	e7a1      	b.n	253c6 <ip_interface_open+0x2a>
   25482:	4604      	mov	r4, r0
   25484:	e79f      	b.n	253c6 <ip_interface_open+0x2a>
   25486:	bf00      	nop
   25488:	2001e4ff 	.word	0x2001e4ff
   2548c:	000341b1 	.word	0x000341b1
   25490:	0003ddea 	.word	0x0003ddea

00025494 <ip_interface_close>:
   25494:	f04f 33ff 	mov.w	r3, #4294967295
   25498:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2549a:	4605      	mov	r5, r0
   2549c:	9301      	str	r3, [sp, #4]
   2549e:	f7ff fe89 	bl	251b4 <interface_socket_from_handle_get>
   254a2:	4604      	mov	r4, r0
   254a4:	b3a0      	cbz	r0, 25510 <ip_interface_close+0x7c>
   254a6:	6981      	ldr	r1, [r0, #24]
   254a8:	6806      	ldr	r6, [r0, #0]
   254aa:	2300      	movs	r3, #0
   254ac:	f247 0209 	movw	r2, #28681	; 0x7009
   254b0:	4628      	mov	r0, r5
   254b2:	f00e fecc 	bl	3424e <ip_interface_request_create>
   254b6:	4601      	mov	r1, r0
   254b8:	b388      	cbz	r0, 2551e <ip_interface_close+0x8a>
   254ba:	6823      	ldr	r3, [r4, #0]
   254bc:	4620      	mov	r0, r4
   254be:	0c1b      	lsrs	r3, r3, #16
   254c0:	041b      	lsls	r3, r3, #16
   254c2:	f043 030d 	orr.w	r3, r3, #13
   254c6:	6023      	str	r3, [r4, #0]
   254c8:	6823      	ldr	r3, [r4, #0]
   254ca:	f247 0209 	movw	r2, #28681	; 0x7009
   254ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   254d2:	6023      	str	r3, [r4, #0]
   254d4:	6823      	ldr	r3, [r4, #0]
   254d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   254da:	6023      	str	r3, [r4, #0]
   254dc:	4633      	mov	r3, r6
   254de:	f00e fece 	bl	3427e <ip_interface_request_send>
   254e2:	4604      	mov	r4, r0
   254e4:	b9a8      	cbnz	r0, 25512 <ip_interface_close+0x7e>
   254e6:	4e0f      	ldr	r6, [pc, #60]	; (25524 <ip_interface_close+0x90>)
   254e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   254ec:	210e      	movs	r1, #14
   254ee:	4628      	mov	r0, r5
   254f0:	ab01      	add	r3, sp, #4
   254f2:	f00e fed7 	bl	342a4 <ip_interface_wait>
   254f6:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
   254fa:	b118      	cbz	r0, 25504 <ip_interface_close+0x70>
   254fc:	f00e fcac 	bl	33e58 <rpc_ip_client_message_free>
   25500:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
   25504:	4628      	mov	r0, r5
   25506:	f7ff fdf5 	bl	250f4 <interface_socket_free>
   2550a:	4620      	mov	r0, r4
   2550c:	b002      	add	sp, #8
   2550e:	bd70      	pop	{r4, r5, r6, pc}
   25510:	2409      	movs	r4, #9
   25512:	4620      	mov	r0, r4
   25514:	f7fa f9ac 	bl	1f870 <nrf_modem_os_errno_set>
   25518:	f04f 34ff 	mov.w	r4, #4294967295
   2551c:	e7f5      	b.n	2550a <ip_interface_close+0x76>
   2551e:	240c      	movs	r4, #12
   25520:	e7f7      	b.n	25512 <ip_interface_close+0x7e>
   25522:	bf00      	nop
   25524:	20016ab8 	.word	0x20016ab8

00025528 <ip_interface_sendto>:
   25528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2552c:	461d      	mov	r5, r3
   2552e:	2300      	movs	r3, #0
   25530:	b089      	sub	sp, #36	; 0x24
   25532:	4606      	mov	r6, r0
   25534:	4690      	mov	r8, r2
   25536:	9102      	str	r1, [sp, #8]
   25538:	9305      	str	r3, [sp, #20]
   2553a:	f7ff fe3b 	bl	251b4 <interface_socket_from_handle_get>
   2553e:	4604      	mov	r4, r0
   25540:	2800      	cmp	r0, #0
   25542:	f000 8084 	beq.w	2564e <ip_interface_sendto+0x126>
   25546:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
   2554a:	f300 8082 	bgt.w	25652 <ip_interface_sendto+0x12a>
   2554e:	6903      	ldr	r3, [r0, #16]
   25550:	2b01      	cmp	r3, #1
   25552:	d102      	bne.n	2555a <ip_interface_sendto+0x32>
   25554:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25556:	2a00      	cmp	r2, #0
   25558:	d17d      	bne.n	25656 <ip_interface_sendto+0x12e>
   2555a:	6822      	ldr	r2, [r4, #0]
   2555c:	0391      	lsls	r1, r2, #14
   2555e:	d424      	bmi.n	255aa <ip_interface_sendto+0x82>
   25560:	6822      	ldr	r2, [r4, #0]
   25562:	0092      	lsls	r2, r2, #2
   25564:	d408      	bmi.n	25578 <ip_interface_sendto+0x50>
   25566:	2b01      	cmp	r3, #1
   25568:	d103      	bne.n	25572 <ip_interface_sendto+0x4a>
   2556a:	6823      	ldr	r3, [r4, #0]
   2556c:	b29b      	uxth	r3, r3
   2556e:	2b05      	cmp	r3, #5
   25570:	d102      	bne.n	25578 <ip_interface_sendto+0x50>
   25572:	6823      	ldr	r3, [r4, #0]
   25574:	031f      	lsls	r7, r3, #12
   25576:	d570      	bpl.n	2565a <ip_interface_sendto+0x132>
   25578:	6823      	ldr	r3, [r4, #0]
   2557a:	031d      	lsls	r5, r3, #12
   2557c:	d56f      	bpl.n	2565e <ip_interface_sendto+0x136>
   2557e:	2500      	movs	r5, #0
   25580:	68a7      	ldr	r7, [r4, #8]
   25582:	2f00      	cmp	r7, #0
   25584:	d06f      	beq.n	25666 <ip_interface_sendto+0x13e>
   25586:	4638      	mov	r0, r7
   25588:	f7fa f972 	bl	1f870 <nrf_modem_os_errno_set>
   2558c:	f04f 35ff 	mov.w	r5, #4294967295
   25590:	4c74      	ldr	r4, [pc, #464]	; (25764 <ip_interface_sendto+0x23c>)
   25592:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   25596:	b120      	cbz	r0, 255a2 <ip_interface_sendto+0x7a>
   25598:	f00e fc5e 	bl	33e58 <rpc_ip_client_message_free>
   2559c:	2300      	movs	r3, #0
   2559e:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   255a2:	4628      	mov	r0, r5
   255a4:	b009      	add	sp, #36	; 0x24
   255a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255aa:	2d00      	cmp	r5, #0
   255ac:	d03c      	beq.n	25628 <ip_interface_sendto+0x100>
   255ae:	07a8      	lsls	r0, r5, #30
   255b0:	d557      	bpl.n	25662 <ip_interface_sendto+0x13a>
   255b2:	f04f 0b00 	mov.w	fp, #0
   255b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   255b8:	2500      	movs	r5, #0
   255ba:	2b00      	cmp	r3, #0
   255bc:	bf08      	it	eq
   255be:	f04f 33ff 	moveq.w	r3, #4294967295
   255c2:	f247 0a06 	movw	sl, #28678	; 0x7006
   255c6:	270c      	movs	r7, #12
   255c8:	9306      	str	r3, [sp, #24]
   255ca:	0433      	lsls	r3, r6, #16
   255cc:	9303      	str	r3, [sp, #12]
   255ce:	eba8 0905 	sub.w	r9, r8, r5
   255d2:	4649      	mov	r1, r9
   255d4:	a805      	add	r0, sp, #20
   255d6:	f00e fc1f 	bl	33e18 <rpc_ip_client_request_alloc>
   255da:	280c      	cmp	r0, #12
   255dc:	d154      	bne.n	25688 <ip_interface_sendto+0x160>
   255de:	f1bb 0f00 	cmp.w	fp, #0
   255e2:	f000 80bc 	beq.w	2575e <ip_interface_sendto+0x236>
   255e6:	9a06      	ldr	r2, [sp, #24]
   255e8:	3201      	adds	r2, #1
   255ea:	d0f0      	beq.n	255ce <ip_interface_sendto+0xa6>
   255ec:	220a      	movs	r2, #10
   255ee:	a907      	add	r1, sp, #28
   255f0:	2000      	movs	r0, #0
   255f2:	9207      	str	r2, [sp, #28]
   255f4:	f7fa f884 	bl	1f700 <nrf_modem_os_timedwait>
   255f8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   255fc:	440a      	add	r2, r1
   255fe:	3a0a      	subs	r2, #10
   25600:	2a00      	cmp	r2, #0
   25602:	9206      	str	r2, [sp, #24]
   25604:	dce3      	bgt.n	255ce <ip_interface_sendto+0xa6>
   25606:	273c      	movs	r7, #60	; 0x3c
   25608:	6822      	ldr	r2, [r4, #0]
   2560a:	0313      	lsls	r3, r2, #12
   2560c:	d4b9      	bmi.n	25582 <ip_interface_sendto+0x5a>
   2560e:	6822      	ldr	r2, [r4, #0]
   25610:	b292      	uxth	r2, r2
   25612:	2a0d      	cmp	r2, #13
   25614:	d0b5      	beq.n	25582 <ip_interface_sendto+0x5a>
   25616:	6822      	ldr	r2, [r4, #0]
   25618:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   2561c:	6022      	str	r2, [r4, #0]
   2561e:	6822      	ldr	r2, [r4, #0]
   25620:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   25624:	6022      	str	r2, [r4, #0]
   25626:	e7ac      	b.n	25582 <ip_interface_sendto+0x5a>
   25628:	6827      	ldr	r7, [r4, #0]
   2562a:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   2562e:	f3c7 7b00 	ubfx	fp, r7, #28, #1
   25632:	e7c0      	b.n	255b6 <ip_interface_sendto+0x8e>
   25634:	68a7      	ldr	r7, [r4, #8]
   25636:	e7e7      	b.n	25608 <ip_interface_sendto+0xe0>
   25638:	4b4a      	ldr	r3, [pc, #296]	; (25764 <ip_interface_sendto+0x23c>)
   2563a:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
   2563e:	6992      	ldr	r2, [r2, #24]
   25640:	4415      	add	r5, r2
   25642:	f1bb 0f00 	cmp.w	fp, #0
   25646:	d0df      	beq.n	25608 <ip_interface_sendto+0xe0>
   25648:	45a8      	cmp	r8, r5
   2564a:	d1c0      	bne.n	255ce <ip_interface_sendto+0xa6>
   2564c:	e7dc      	b.n	25608 <ip_interface_sendto+0xe0>
   2564e:	2709      	movs	r7, #9
   25650:	e799      	b.n	25586 <ip_interface_sendto+0x5e>
   25652:	2728      	movs	r7, #40	; 0x28
   25654:	e797      	b.n	25586 <ip_interface_sendto+0x5e>
   25656:	2738      	movs	r7, #56	; 0x38
   25658:	e795      	b.n	25586 <ip_interface_sendto+0x5e>
   2565a:	2723      	movs	r7, #35	; 0x23
   2565c:	e793      	b.n	25586 <ip_interface_sendto+0x5e>
   2565e:	2739      	movs	r7, #57	; 0x39
   25660:	e791      	b.n	25586 <ip_interface_sendto+0x5e>
   25662:	272d      	movs	r7, #45	; 0x2d
   25664:	e78f      	b.n	25586 <ip_interface_sendto+0x5e>
   25666:	6823      	ldr	r3, [r4, #0]
   25668:	011a      	lsls	r2, r3, #4
   2566a:	bf41      	itttt	mi
   2566c:	6823      	ldrmi	r3, [r4, #0]
   2566e:	4645      	movmi	r5, r8
   25670:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   25674:	6023      	strmi	r3, [r4, #0]
   25676:	e78b      	b.n	25590 <ip_interface_sendto+0x68>
   25678:	6810      	ldr	r0, [r2, #0]
   2567a:	b108      	cbz	r0, 25680 <ip_interface_sendto+0x158>
   2567c:	f00e fbef 	bl	33e5e <rpc_ip_client_data_free>
   25680:	9805      	ldr	r0, [sp, #20]
   25682:	f00e fbe9 	bl	33e58 <rpc_ip_client_message_free>
   25686:	e7bf      	b.n	25608 <ip_interface_sendto+0xe0>
   25688:	2800      	cmp	r0, #0
   2568a:	d1bd      	bne.n	25608 <ip_interface_sendto+0xe0>
   2568c:	f04f 020c 	mov.w	r2, #12
   25690:	9b05      	ldr	r3, [sp, #20]
   25692:	721a      	strb	r2, [r3, #8]
   25694:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   25696:	7258      	strb	r0, [r3, #9]
   25698:	7298      	strb	r0, [r3, #10]
   2569a:	72d8      	strb	r0, [r3, #11]
   2569c:	7518      	strb	r0, [r3, #20]
   2569e:	7558      	strb	r0, [r3, #21]
   256a0:	7598      	strb	r0, [r3, #22]
   256a2:	75d8      	strb	r0, [r3, #23]
   256a4:	b10a      	cbz	r2, 256aa <ip_interface_sendto+0x182>
   256a6:	615a      	str	r2, [r3, #20]
   256a8:	62a0      	str	r0, [r4, #40]	; 0x28
   256aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   256ac:	b1b2      	cbz	r2, 256dc <ip_interface_sendto+0x1b4>
   256ae:	f103 021c 	add.w	r2, r3, #28
   256b2:	9201      	str	r2, [sp, #4]
   256b4:	f103 0218 	add.w	r2, r3, #24
   256b8:	9200      	str	r2, [sp, #0]
   256ba:	68e0      	ldr	r0, [r4, #12]
   256bc:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   256c0:	331a      	adds	r3, #26
   256c2:	f00e fd81 	bl	341c8 <ip_addr_parse>
   256c6:	9a05      	ldr	r2, [sp, #20]
   256c8:	4607      	mov	r7, r0
   256ca:	2800      	cmp	r0, #0
   256cc:	d1d4      	bne.n	25678 <ip_interface_sendto+0x150>
   256ce:	f247 0a07 	movw	sl, #28679	; 0x7007
   256d2:	6893      	ldr	r3, [r2, #8]
   256d4:	8b51      	ldrh	r1, [r2, #26]
   256d6:	3304      	adds	r3, #4
   256d8:	440b      	add	r3, r1
   256da:	6093      	str	r3, [r2, #8]
   256dc:	69a2      	ldr	r2, [r4, #24]
   256de:	9b05      	ldr	r3, [sp, #20]
   256e0:	611a      	str	r2, [r3, #16]
   256e2:	9a03      	ldr	r2, [sp, #12]
   256e4:	f8c3 9004 	str.w	r9, [r3, #4]
   256e8:	ea4a 0202 	orr.w	r2, sl, r2
   256ec:	60da      	str	r2, [r3, #12]
   256ee:	9a02      	ldr	r2, [sp, #8]
   256f0:	b12a      	cbz	r2, 256fe <ip_interface_sendto+0x1d6>
   256f2:	9902      	ldr	r1, [sp, #8]
   256f4:	464a      	mov	r2, r9
   256f6:	6818      	ldr	r0, [r3, #0]
   256f8:	4429      	add	r1, r5
   256fa:	f00f ff44 	bl	35586 <memcpy>
   256fe:	6823      	ldr	r3, [r4, #0]
   25700:	6822      	ldr	r2, [r4, #0]
   25702:	4620      	mov	r0, r4
   25704:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   25708:	6022      	str	r2, [r4, #0]
   2570a:	6822      	ldr	r2, [r4, #0]
   2570c:	9905      	ldr	r1, [sp, #20]
   2570e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   25712:	6022      	str	r2, [r4, #0]
   25714:	4652      	mov	r2, sl
   25716:	f00e fdb2 	bl	3427e <ip_interface_request_send>
   2571a:	4607      	mov	r7, r0
   2571c:	2800      	cmp	r0, #0
   2571e:	f47f af73 	bne.w	25608 <ip_interface_sendto+0xe0>
   25722:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   25726:	4630      	mov	r0, r6
   25728:	4611      	mov	r1, r2
   2572a:	ab06      	add	r3, sp, #24
   2572c:	f00e fdba 	bl	342a4 <ip_interface_wait>
   25730:	4607      	mov	r7, r0
   25732:	2800      	cmp	r0, #0
   25734:	d080      	beq.n	25638 <ip_interface_sendto+0x110>
   25736:	6822      	ldr	r2, [r4, #0]
   25738:	0311      	lsls	r1, r2, #12
   2573a:	f53f af7b 	bmi.w	25634 <ip_interface_sendto+0x10c>
   2573e:	283c      	cmp	r0, #60	; 0x3c
   25740:	f43f af62 	beq.w	25608 <ip_interface_sendto+0xe0>
   25744:	280c      	cmp	r0, #12
   25746:	f47f af5f 	bne.w	25608 <ip_interface_sendto+0xe0>
   2574a:	4b06      	ldr	r3, [pc, #24]	; (25764 <ip_interface_sendto+0x23c>)
   2574c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   25750:	b108      	cbz	r0, 25756 <ip_interface_sendto+0x22e>
   25752:	f00e fb81 	bl	33e58 <rpc_ip_client_message_free>
   25756:	f1bb 0f00 	cmp.w	fp, #0
   2575a:	f47f af38 	bne.w	255ce <ip_interface_sendto+0xa6>
   2575e:	2723      	movs	r7, #35	; 0x23
   25760:	e752      	b.n	25608 <ip_interface_sendto+0xe0>
   25762:	bf00      	nop
   25764:	20016ab8 	.word	0x20016ab8

00025768 <ip_interface_socketoption_get>:
   25768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2576c:	461c      	mov	r4, r3
   2576e:	f04f 33ff 	mov.w	r3, #4294967295
   25772:	9301      	str	r3, [sp, #4]
   25774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25776:	4607      	mov	r7, r0
   25778:	460d      	mov	r5, r1
   2577a:	4693      	mov	fp, r2
   2577c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   25780:	2b00      	cmp	r3, #0
   25782:	d06a      	beq.n	2585a <ip_interface_socketoption_get+0xf2>
   25784:	f8d8 3000 	ldr.w	r3, [r8]
   25788:	2b00      	cmp	r3, #0
   2578a:	d066      	beq.n	2585a <ip_interface_socketoption_get+0xf2>
   2578c:	680b      	ldr	r3, [r1, #0]
   2578e:	025e      	lsls	r6, r3, #9
   25790:	d465      	bmi.n	2585e <ip_interface_socketoption_get+0xf6>
   25792:	680b      	ldr	r3, [r1, #0]
   25794:	0219      	lsls	r1, r3, #8
   25796:	d462      	bmi.n	2585e <ip_interface_socketoption_get+0xf6>
   25798:	682b      	ldr	r3, [r5, #0]
   2579a:	01da      	lsls	r2, r3, #7
   2579c:	d45f      	bmi.n	2585e <ip_interface_socketoption_get+0xf6>
   2579e:	682b      	ldr	r3, [r5, #0]
   257a0:	019b      	lsls	r3, r3, #6
   257a2:	d45c      	bmi.n	2585e <ip_interface_socketoption_get+0xf6>
   257a4:	f8d5 a000 	ldr.w	sl, [r5]
   257a8:	682b      	ldr	r3, [r5, #0]
   257aa:	f247 0204 	movw	r2, #28676	; 0x7004
   257ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   257b2:	602b      	str	r3, [r5, #0]
   257b4:	f8d8 3000 	ldr.w	r3, [r8]
   257b8:	69a9      	ldr	r1, [r5, #24]
   257ba:	f00e fd48 	bl	3424e <ip_interface_request_create>
   257be:	4606      	mov	r6, r0
   257c0:	2800      	cmp	r0, #0
   257c2:	d048      	beq.n	25856 <ip_interface_socketoption_get+0xee>
   257c4:	6883      	ldr	r3, [r0, #8]
   257c6:	f8c0 b014 	str.w	fp, [r0, #20]
   257ca:	3308      	adds	r3, #8
   257cc:	6083      	str	r3, [r0, #8]
   257ce:	6184      	str	r4, [r0, #24]
   257d0:	4601      	mov	r1, r0
   257d2:	f8d0 b000 	ldr.w	fp, [r0]
   257d6:	4653      	mov	r3, sl
   257d8:	f247 0204 	movw	r2, #28676	; 0x7004
   257dc:	4628      	mov	r0, r5
   257de:	f00e fd4e 	bl	3427e <ip_interface_request_send>
   257e2:	4604      	mov	r4, r0
   257e4:	bb20      	cbnz	r0, 25830 <ip_interface_socketoption_get+0xc8>
   257e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   257ea:	4638      	mov	r0, r7
   257ec:	4611      	mov	r1, r2
   257ee:	ab01      	add	r3, sp, #4
   257f0:	f00e fd58 	bl	342a4 <ip_interface_wait>
   257f4:	4604      	mov	r4, r0
   257f6:	b9d8      	cbnz	r0, 25830 <ip_interface_socketoption_get+0xc8>
   257f8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 25864 <ip_interface_socketoption_get+0xfc>
   257fc:	f8d8 2000 	ldr.w	r2, [r8]
   25800:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
   25804:	b1f9      	cbz	r1, 25846 <ip_interface_socketoption_get+0xde>
   25806:	6848      	ldr	r0, [r1, #4]
   25808:	4290      	cmp	r0, r2
   2580a:	d81a      	bhi.n	25842 <ip_interface_socketoption_get+0xda>
   2580c:	6809      	ldr	r1, [r1, #0]
   2580e:	b1c1      	cbz	r1, 25842 <ip_interface_socketoption_get+0xda>
   25810:	4602      	mov	r2, r0
   25812:	980c      	ldr	r0, [sp, #48]	; 0x30
   25814:	f00f feb7 	bl	35586 <memcpy>
   25818:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
   2581c:	6852      	ldr	r2, [r2, #4]
   2581e:	f8c8 2000 	str.w	r2, [r8]
   25822:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   25826:	f00e fb17 	bl	33e58 <rpc_ip_client_message_free>
   2582a:	2200      	movs	r2, #0
   2582c:	f849 2027 	str.w	r2, [r9, r7, lsl #2]
   25830:	4658      	mov	r0, fp
   25832:	f00e fb14 	bl	33e5e <rpc_ip_client_data_free>
   25836:	f8c5 a000 	str.w	sl, [r5]
   2583a:	4620      	mov	r0, r4
   2583c:	b003      	add	sp, #12
   2583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25842:	2416      	movs	r4, #22
   25844:	e7ed      	b.n	25822 <ip_interface_socketoption_get+0xba>
   25846:	4659      	mov	r1, fp
   25848:	980c      	ldr	r0, [sp, #48]	; 0x30
   2584a:	f00f fe9c 	bl	35586 <memcpy>
   2584e:	6873      	ldr	r3, [r6, #4]
   25850:	f8c8 3000 	str.w	r3, [r8]
   25854:	e7ec      	b.n	25830 <ip_interface_socketoption_get+0xc8>
   25856:	240c      	movs	r4, #12
   25858:	e7ed      	b.n	25836 <ip_interface_socketoption_get+0xce>
   2585a:	2416      	movs	r4, #22
   2585c:	e7ed      	b.n	2583a <ip_interface_socketoption_get+0xd2>
   2585e:	2423      	movs	r4, #35	; 0x23
   25860:	e7eb      	b.n	2583a <ip_interface_socketoption_get+0xd2>
   25862:	bf00      	nop
   25864:	20016ab8 	.word	0x20016ab8

00025868 <ip_interface_bind>:
   25868:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2586c:	f04f 33ff 	mov.w	r3, #4294967295
   25870:	4607      	mov	r7, r0
   25872:	4690      	mov	r8, r2
   25874:	460e      	mov	r6, r1
   25876:	9303      	str	r3, [sp, #12]
   25878:	2900      	cmp	r1, #0
   2587a:	d04e      	beq.n	2591a <ip_interface_bind+0xb2>
   2587c:	2a00      	cmp	r2, #0
   2587e:	d04c      	beq.n	2591a <ip_interface_bind+0xb2>
   25880:	f7ff fc98 	bl	251b4 <interface_socket_from_handle_get>
   25884:	4604      	mov	r4, r0
   25886:	2800      	cmp	r0, #0
   25888:	d049      	beq.n	2591e <ip_interface_bind+0xb6>
   2588a:	6803      	ldr	r3, [r0, #0]
   2588c:	b29b      	uxth	r3, r3
   2588e:	2b02      	cmp	r3, #2
   25890:	d145      	bne.n	2591e <ip_interface_bind+0xb6>
   25892:	6981      	ldr	r1, [r0, #24]
   25894:	2300      	movs	r3, #0
   25896:	f247 0205 	movw	r2, #28677	; 0x7005
   2589a:	4638      	mov	r0, r7
   2589c:	f00e fcd7 	bl	3424e <ip_interface_request_create>
   258a0:	4605      	mov	r5, r0
   258a2:	2800      	cmp	r0, #0
   258a4:	d03d      	beq.n	25922 <ip_interface_bind+0xba>
   258a6:	6883      	ldr	r3, [r0, #8]
   258a8:	4642      	mov	r2, r8
   258aa:	3304      	adds	r3, #4
   258ac:	6083      	str	r3, [r0, #8]
   258ae:	f100 0318 	add.w	r3, r0, #24
   258b2:	9301      	str	r3, [sp, #4]
   258b4:	f100 0314 	add.w	r3, r0, #20
   258b8:	9300      	str	r3, [sp, #0]
   258ba:	4631      	mov	r1, r6
   258bc:	f100 0316 	add.w	r3, r0, #22
   258c0:	68e0      	ldr	r0, [r4, #12]
   258c2:	f00e fc81 	bl	341c8 <ip_addr_parse>
   258c6:	bb08      	cbnz	r0, 2590c <ip_interface_bind+0xa4>
   258c8:	68ab      	ldr	r3, [r5, #8]
   258ca:	8aea      	ldrh	r2, [r5, #22]
   258cc:	4e16      	ldr	r6, [pc, #88]	; (25928 <ip_interface_bind+0xc0>)
   258ce:	4413      	add	r3, r2
   258d0:	60ab      	str	r3, [r5, #8]
   258d2:	6823      	ldr	r3, [r4, #0]
   258d4:	f247 0205 	movw	r2, #28677	; 0x7005
   258d8:	4033      	ands	r3, r6
   258da:	f043 0303 	orr.w	r3, r3, #3
   258de:	6023      	str	r3, [r4, #0]
   258e0:	6823      	ldr	r3, [r4, #0]
   258e2:	4629      	mov	r1, r5
   258e4:	4033      	ands	r3, r6
   258e6:	4620      	mov	r0, r4
   258e8:	f043 0302 	orr.w	r3, r3, #2
   258ec:	f00e fcc7 	bl	3427e <ip_interface_request_send>
   258f0:	b960      	cbnz	r0, 2590c <ip_interface_bind+0xa4>
   258f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   258f6:	2104      	movs	r1, #4
   258f8:	4638      	mov	r0, r7
   258fa:	ab03      	add	r3, sp, #12
   258fc:	f00e fcd2 	bl	342a4 <ip_interface_wait>
   25900:	b140      	cbz	r0, 25914 <ip_interface_bind+0xac>
   25902:	6823      	ldr	r3, [r4, #0]
   25904:	4033      	ands	r3, r6
   25906:	f043 0302 	orr.w	r3, r3, #2
   2590a:	6023      	str	r3, [r4, #0]
   2590c:	f7f9 ffb0 	bl	1f870 <nrf_modem_os_errno_set>
   25910:	f04f 30ff 	mov.w	r0, #4294967295
   25914:	b004      	add	sp, #16
   25916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2591a:	2016      	movs	r0, #22
   2591c:	e7f6      	b.n	2590c <ip_interface_bind+0xa4>
   2591e:	2009      	movs	r0, #9
   25920:	e7f4      	b.n	2590c <ip_interface_bind+0xa4>
   25922:	200c      	movs	r0, #12
   25924:	e7f2      	b.n	2590c <ip_interface_bind+0xa4>
   25926:	bf00      	nop
   25928:	ffff0000 	.word	0xffff0000

0002592c <ip_interface_listen>:
   2592c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2592e:	4605      	mov	r5, r0
   25930:	f7ff fc40 	bl	251b4 <interface_socket_from_handle_get>
   25934:	4604      	mov	r4, r0
   25936:	2800      	cmp	r0, #0
   25938:	d03f      	beq.n	259ba <ip_interface_listen+0x8e>
   2593a:	6803      	ldr	r3, [r0, #0]
   2593c:	b29b      	uxth	r3, r3
   2593e:	2b04      	cmp	r3, #4
   25940:	d003      	beq.n	2594a <ip_interface_listen+0x1e>
   25942:	6803      	ldr	r3, [r0, #0]
   25944:	b29b      	uxth	r3, r3
   25946:	2b0b      	cmp	r3, #11
   25948:	d139      	bne.n	259be <ip_interface_listen+0x92>
   2594a:	2100      	movs	r1, #0
   2594c:	4628      	mov	r0, r5
   2594e:	4a1f      	ldr	r2, [pc, #124]	; (259cc <ip_interface_listen+0xa0>)
   25950:	f7ff fbdc 	bl	2510c <interface_socket_packet_handler_update>
   25954:	4603      	mov	r3, r0
   25956:	bba0      	cbnz	r0, 259c2 <ip_interface_listen+0x96>
   25958:	69a1      	ldr	r1, [r4, #24]
   2595a:	f247 0208 	movw	r2, #28680	; 0x7008
   2595e:	4628      	mov	r0, r5
   25960:	f00e fc75 	bl	3424e <ip_interface_request_create>
   25964:	4601      	mov	r1, r0
   25966:	b370      	cbz	r0, 259c6 <ip_interface_listen+0x9a>
   25968:	6883      	ldr	r3, [r0, #8]
   2596a:	4e19      	ldr	r6, [pc, #100]	; (259d0 <ip_interface_listen+0xa4>)
   2596c:	3304      	adds	r3, #4
   2596e:	6083      	str	r3, [r0, #8]
   25970:	6823      	ldr	r3, [r4, #0]
   25972:	f247 0208 	movw	r2, #28680	; 0x7008
   25976:	4033      	ands	r3, r6
   25978:	f043 0306 	orr.w	r3, r3, #6
   2597c:	6023      	str	r3, [r4, #0]
   2597e:	6823      	ldr	r3, [r4, #0]
   25980:	4620      	mov	r0, r4
   25982:	4033      	ands	r3, r6
   25984:	f043 0304 	orr.w	r3, r3, #4
   25988:	f00e fc79 	bl	3427e <ip_interface_request_send>
   2598c:	b978      	cbnz	r0, 259ae <ip_interface_listen+0x82>
   2598e:	f04f 33ff 	mov.w	r3, #4294967295
   25992:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25996:	9301      	str	r3, [sp, #4]
   25998:	2107      	movs	r1, #7
   2599a:	4628      	mov	r0, r5
   2599c:	ab01      	add	r3, sp, #4
   2599e:	f00e fc81 	bl	342a4 <ip_interface_wait>
   259a2:	b140      	cbz	r0, 259b6 <ip_interface_listen+0x8a>
   259a4:	6823      	ldr	r3, [r4, #0]
   259a6:	4033      	ands	r3, r6
   259a8:	f043 0304 	orr.w	r3, r3, #4
   259ac:	6023      	str	r3, [r4, #0]
   259ae:	f7f9 ff5f 	bl	1f870 <nrf_modem_os_errno_set>
   259b2:	f04f 30ff 	mov.w	r0, #4294967295
   259b6:	b002      	add	sp, #8
   259b8:	bd70      	pop	{r4, r5, r6, pc}
   259ba:	2009      	movs	r0, #9
   259bc:	e7f7      	b.n	259ae <ip_interface_listen+0x82>
   259be:	2016      	movs	r0, #22
   259c0:	e7f5      	b.n	259ae <ip_interface_listen+0x82>
   259c2:	2023      	movs	r0, #35	; 0x23
   259c4:	e7f3      	b.n	259ae <ip_interface_listen+0x82>
   259c6:	200c      	movs	r0, #12
   259c8:	e7f1      	b.n	259ae <ip_interface_listen+0x82>
   259ca:	bf00      	nop
   259cc:	000341b1 	.word	0x000341b1
   259d0:	ffff0000 	.word	0xffff0000

000259d4 <ip_interface_accept>:
   259d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259d8:	2600      	movs	r6, #0
   259da:	4680      	mov	r8, r0
   259dc:	460f      	mov	r7, r1
   259de:	4692      	mov	sl, r2
   259e0:	9600      	str	r6, [sp, #0]
   259e2:	f7ff fbe7 	bl	251b4 <interface_socket_from_handle_get>
   259e6:	4604      	mov	r4, r0
   259e8:	2800      	cmp	r0, #0
   259ea:	f000 80cb 	beq.w	25b84 <ip_interface_accept+0x1b0>
   259ee:	6903      	ldr	r3, [r0, #16]
   259f0:	2b01      	cmp	r3, #1
   259f2:	f040 80ca 	bne.w	25b8a <ip_interface_accept+0x1b6>
   259f6:	6803      	ldr	r3, [r0, #0]
   259f8:	b29b      	uxth	r3, r3
   259fa:	2b07      	cmp	r3, #7
   259fc:	f040 80c7 	bne.w	25b8e <ip_interface_accept+0x1ba>
   25a00:	f04f 33ff 	mov.w	r3, #4294967295
   25a04:	9301      	str	r3, [sp, #4]
   25a06:	6803      	ldr	r3, [r0, #0]
   25a08:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   25a0c:	d163      	bne.n	25ad6 <ip_interface_accept+0x102>
   25a0e:	6803      	ldr	r3, [r0, #0]
   25a10:	03db      	lsls	r3, r3, #15
   25a12:	d464      	bmi.n	25ade <ip_interface_accept+0x10a>
   25a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25a18:	4640      	mov	r0, r8
   25a1a:	4611      	mov	r1, r2
   25a1c:	ab01      	add	r3, sp, #4
   25a1e:	f00e fc41 	bl	342a4 <ip_interface_wait>
   25a22:	4605      	mov	r5, r0
   25a24:	6826      	ldr	r6, [r4, #0]
   25a26:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000
   25a2a:	d05a      	beq.n	25ae2 <ip_interface_accept+0x10e>
   25a2c:	4668      	mov	r0, sp
   25a2e:	4a5a      	ldr	r2, [pc, #360]	; (25b98 <ip_interface_accept+0x1c4>)
   25a30:	6921      	ldr	r1, [r4, #16]
   25a32:	f7ff fb39 	bl	250a8 <interface_socket_allocate>
   25a36:	9b00      	ldr	r3, [sp, #0]
   25a38:	4606      	mov	r6, r0
   25a3a:	2b00      	cmp	r3, #0
   25a3c:	f000 80a9 	beq.w	25b92 <ip_interface_accept+0x1be>
   25a40:	6962      	ldr	r2, [r4, #20]
   25a42:	69a1      	ldr	r1, [r4, #24]
   25a44:	615a      	str	r2, [r3, #20]
   25a46:	68e2      	ldr	r2, [r4, #12]
   25a48:	4640      	mov	r0, r8
   25a4a:	60da      	str	r2, [r3, #12]
   25a4c:	6922      	ldr	r2, [r4, #16]
   25a4e:	611a      	str	r2, [r3, #16]
   25a50:	2300      	movs	r3, #0
   25a52:	f247 020c 	movw	r2, #28684	; 0x700c
   25a56:	f00e fbfa 	bl	3424e <ip_interface_request_create>
   25a5a:	4601      	mov	r1, r0
   25a5c:	2800      	cmp	r0, #0
   25a5e:	f000 8098 	beq.w	25b92 <ip_interface_accept+0x1be>
   25a62:	6823      	ldr	r3, [r4, #0]
   25a64:	f8df b134 	ldr.w	fp, [pc, #308]	; 25b9c <ip_interface_accept+0x1c8>
   25a68:	f247 020c 	movw	r2, #28684	; 0x700c
   25a6c:	ea03 030b 	and.w	r3, r3, fp
   25a70:	f043 0308 	orr.w	r3, r3, #8
   25a74:	6023      	str	r3, [r4, #0]
   25a76:	6823      	ldr	r3, [r4, #0]
   25a78:	4620      	mov	r0, r4
   25a7a:	ea03 030b 	and.w	r3, r3, fp
   25a7e:	f043 0307 	orr.w	r3, r3, #7
   25a82:	f00e fbfc 	bl	3427e <ip_interface_request_send>
   25a86:	4605      	mov	r5, r0
   25a88:	b9d0      	cbnz	r0, 25ac0 <ip_interface_accept+0xec>
   25a8a:	6823      	ldr	r3, [r4, #0]
   25a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25a90:	ea23 0309 	bic.w	r3, r3, r9
   25a94:	6023      	str	r3, [r4, #0]
   25a96:	2109      	movs	r1, #9
   25a98:	ab01      	add	r3, sp, #4
   25a9a:	4640      	mov	r0, r8
   25a9c:	f00e fc02 	bl	342a4 <ip_interface_wait>
   25aa0:	6823      	ldr	r3, [r4, #0]
   25aa2:	4605      	mov	r5, r0
   25aa4:	ea43 0309 	orr.w	r3, r3, r9
   25aa8:	6023      	str	r3, [r4, #0]
   25aaa:	b1e0      	cbz	r0, 25ae6 <ip_interface_accept+0x112>
   25aac:	6823      	ldr	r3, [r4, #0]
   25aae:	ea03 030b 	and.w	r3, r3, fp
   25ab2:	f043 0307 	orr.w	r3, r3, #7
   25ab6:	6023      	str	r3, [r4, #0]
   25ab8:	6823      	ldr	r3, [r4, #0]
   25aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   25abe:	6023      	str	r3, [r4, #0]
   25ac0:	9b00      	ldr	r3, [sp, #0]
   25ac2:	b113      	cbz	r3, 25aca <ip_interface_accept+0xf6>
   25ac4:	4630      	mov	r0, r6
   25ac6:	f7ff fb15 	bl	250f4 <interface_socket_free>
   25aca:	4628      	mov	r0, r5
   25acc:	f7f9 fed0 	bl	1f870 <nrf_modem_os_errno_set>
   25ad0:	f04f 30ff 	mov.w	r0, #4294967295
   25ad4:	e041      	b.n	25b5a <ip_interface_accept+0x186>
   25ad6:	2523      	movs	r5, #35	; 0x23
   25ad8:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   25adc:	e7a2      	b.n	25a24 <ip_interface_accept+0x50>
   25ade:	2516      	movs	r5, #22
   25ae0:	e7a0      	b.n	25a24 <ip_interface_accept+0x50>
   25ae2:	2d00      	cmp	r5, #0
   25ae4:	d1ec      	bne.n	25ac0 <ip_interface_accept+0xec>
   25ae6:	4d2e      	ldr	r5, [pc, #184]	; (25ba0 <ip_interface_accept+0x1cc>)
   25ae8:	9b00      	ldr	r3, [sp, #0]
   25aea:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
   25aee:	698a      	ldr	r2, [r1, #24]
   25af0:	619a      	str	r2, [r3, #24]
   25af2:	b197      	cbz	r7, 25b1a <ip_interface_accept+0x146>
   25af4:	68db      	ldr	r3, [r3, #12]
   25af6:	2b0a      	cmp	r3, #10
   25af8:	d132      	bne.n	25b60 <ip_interface_accept+0x18c>
   25afa:	f8da 2000 	ldr.w	r2, [sl]
   25afe:	2a24      	cmp	r2, #36	; 0x24
   25b00:	d10b      	bne.n	25b1a <ip_interface_accept+0x146>
   25b02:	703a      	strb	r2, [r7, #0]
   25b04:	607b      	str	r3, [r7, #4]
   25b06:	7f4a      	ldrb	r2, [r1, #29]
   25b08:	7f0b      	ldrb	r3, [r1, #28]
   25b0a:	3120      	adds	r1, #32
   25b0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25b10:	2210      	movs	r2, #16
   25b12:	813b      	strh	r3, [r7, #8]
   25b14:	18b8      	adds	r0, r7, r2
   25b16:	f00f fd36 	bl	35586 <memcpy>
   25b1a:	9b00      	ldr	r3, [sp, #0]
   25b1c:	491f      	ldr	r1, [pc, #124]	; (25b9c <ip_interface_accept+0x1c8>)
   25b1e:	681a      	ldr	r2, [r3, #0]
   25b20:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
   25b24:	400a      	ands	r2, r1
   25b26:	f042 0205 	orr.w	r2, r2, #5
   25b2a:	601a      	str	r2, [r3, #0]
   25b2c:	681a      	ldr	r2, [r3, #0]
   25b2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   25b32:	601a      	str	r2, [r3, #0]
   25b34:	681a      	ldr	r2, [r3, #0]
   25b36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   25b3a:	601a      	str	r2, [r3, #0]
   25b3c:	6823      	ldr	r3, [r4, #0]
   25b3e:	400b      	ands	r3, r1
   25b40:	f043 0307 	orr.w	r3, r3, #7
   25b44:	6023      	str	r3, [r4, #0]
   25b46:	6823      	ldr	r3, [r4, #0]
   25b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   25b4c:	6023      	str	r3, [r4, #0]
   25b4e:	f00e f983 	bl	33e58 <rpc_ip_client_message_free>
   25b52:	2300      	movs	r3, #0
   25b54:	4630      	mov	r0, r6
   25b56:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
   25b5a:	b003      	add	sp, #12
   25b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b60:	2b02      	cmp	r3, #2
   25b62:	d1da      	bne.n	25b1a <ip_interface_accept+0x146>
   25b64:	f8da 2000 	ldr.w	r2, [sl]
   25b68:	2a10      	cmp	r2, #16
   25b6a:	d1d6      	bne.n	25b1a <ip_interface_accept+0x146>
   25b6c:	703a      	strb	r2, [r7, #0]
   25b6e:	607b      	str	r3, [r7, #4]
   25b70:	7f4a      	ldrb	r2, [r1, #29]
   25b72:	7f0b      	ldrb	r3, [r1, #28]
   25b74:	f107 000c 	add.w	r0, r7, #12
   25b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25b7c:	813b      	strh	r3, [r7, #8]
   25b7e:	2204      	movs	r2, #4
   25b80:	3120      	adds	r1, #32
   25b82:	e7c8      	b.n	25b16 <ip_interface_accept+0x142>
   25b84:	2509      	movs	r5, #9
   25b86:	4606      	mov	r6, r0
   25b88:	e79a      	b.n	25ac0 <ip_interface_accept+0xec>
   25b8a:	252d      	movs	r5, #45	; 0x2d
   25b8c:	e798      	b.n	25ac0 <ip_interface_accept+0xec>
   25b8e:	2516      	movs	r5, #22
   25b90:	e796      	b.n	25ac0 <ip_interface_accept+0xec>
   25b92:	250c      	movs	r5, #12
   25b94:	e794      	b.n	25ac0 <ip_interface_accept+0xec>
   25b96:	bf00      	nop
   25b98:	000341b1 	.word	0x000341b1
   25b9c:	ffff0000 	.word	0xffff0000
   25ba0:	20016ab8 	.word	0x20016ab8

00025ba4 <ip_interface_setopt>:
   25ba4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   25ba8:	2901      	cmp	r1, #1
   25baa:	4606      	mov	r6, r0
   25bac:	4690      	mov	r8, r2
   25bae:	461d      	mov	r5, r3
   25bb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   25bb2:	d008      	beq.n	25bc6 <ip_interface_setopt+0x22>
   25bb4:	202a      	movs	r0, #42	; 0x2a
   25bb6:	f7f9 fe5b 	bl	1f870 <nrf_modem_os_errno_set>
   25bba:	f04f 34ff 	mov.w	r4, #4294967295
   25bbe:	4620      	mov	r0, r4
   25bc0:	b004      	add	sp, #16
   25bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25bc6:	f7ff faf5 	bl	251b4 <interface_socket_from_handle_get>
   25bca:	4604      	mov	r4, r0
   25bcc:	b908      	cbnz	r0, 25bd2 <ip_interface_setopt+0x2e>
   25bce:	2009      	movs	r0, #9
   25bd0:	e7f1      	b.n	25bb6 <ip_interface_setopt+0x12>
   25bd2:	f1a8 0319 	sub.w	r3, r8, #25
   25bd6:	2b1e      	cmp	r3, #30
   25bd8:	f200 8092 	bhi.w	25d00 <ip_interface_setopt+0x15c>
   25bdc:	e8df f003 	tbb	[pc, r3]
   25be0:	90909010 	.word	0x90909010
   25be4:	58504490 	.word	0x58504490
   25be8:	90909090 	.word	0x90909090
   25bec:	60909090 	.word	0x60909090
   25bf0:	90909090 	.word	0x90909090
   25bf4:	90909090 	.word	0x90909090
   25bf8:	7a6d6890 	.word	0x7a6d6890
   25bfc:	807d      	.short	0x807d
   25bfe:	83          	.byte	0x83
   25bff:	00          	.byte	0x00
   25c00:	b90d      	cbnz	r5, 25c06 <ip_interface_setopt+0x62>
   25c02:	200e      	movs	r0, #14
   25c04:	e7d7      	b.n	25bb6 <ip_interface_setopt+0x12>
   25c06:	4628      	mov	r0, r5
   25c08:	f7eb fc7a 	bl	11500 <strlen>
   25c0c:	42b8      	cmp	r0, r7
   25c0e:	d1f8      	bne.n	25c02 <ip_interface_setopt+0x5e>
   25c10:	6823      	ldr	r3, [r4, #0]
   25c12:	b29b      	uxth	r3, r3
   25c14:	2b02      	cmp	r3, #2
   25c16:	d1da      	bne.n	25bce <ip_interface_setopt+0x2a>
   25c18:	4629      	mov	r1, r5
   25c1a:	68e0      	ldr	r0, [r4, #12]
   25c1c:	f002 fac0 	bl	281a0 <pdn_interface_pdn_id_get>
   25c20:	9003      	str	r0, [sp, #12]
   25c22:	3001      	adds	r0, #1
   25c24:	d111      	bne.n	25c4a <ip_interface_setopt+0xa6>
   25c26:	4628      	mov	r0, r5
   25c28:	493a      	ldr	r1, [pc, #232]	; (25d14 <ip_interface_setopt+0x170>)
   25c2a:	f00f fe43 	bl	358b4 <strstr>
   25c2e:	b108      	cbz	r0, 25c34 <ip_interface_setopt+0x90>
   25c30:	4285      	cmp	r5, r0
   25c32:	d001      	beq.n	25c38 <ip_interface_setopt+0x94>
   25c34:	2016      	movs	r0, #22
   25c36:	e7be      	b.n	25bb6 <ip_interface_setopt+0x12>
   25c38:	4836      	ldr	r0, [pc, #216]	; (25d14 <ip_interface_setopt+0x170>)
   25c3a:	f7eb fc61 	bl	11500 <strlen>
   25c3e:	220a      	movs	r2, #10
   25c40:	2100      	movs	r1, #0
   25c42:	4428      	add	r0, r5
   25c44:	f007 feb2 	bl	2d9ac <strtoul>
   25c48:	9003      	str	r0, [sp, #12]
   25c4a:	2304      	movs	r3, #4
   25c4c:	9301      	str	r3, [sp, #4]
   25c4e:	ab03      	add	r3, sp, #12
   25c50:	4621      	mov	r1, r4
   25c52:	9300      	str	r3, [sp, #0]
   25c54:	2208      	movs	r2, #8
   25c56:	f243 0310 	movw	r3, #12304	; 0x3010
   25c5a:	4630      	mov	r0, r6
   25c5c:	f00e fcc4 	bl	345e8 <ip_interface_socketoption_send>
   25c60:	4604      	mov	r4, r0
   25c62:	2800      	cmp	r0, #0
   25c64:	d0ab      	beq.n	25bbe <ip_interface_setopt+0x1a>
   25c66:	e7a6      	b.n	25bb6 <ip_interface_setopt+0x12>
   25c68:	4602      	mov	r2, r0
   25c6a:	4633      	mov	r3, r6
   25c6c:	f248 0101 	movw	r1, #32769	; 0x8001
   25c70:	f44f 7000 	mov.w	r0, #512	; 0x200
   25c74:	e9cd 5700 	strd	r5, r7, [sp]
   25c78:	f00e fd03 	bl	34682 <setopt_check_and_send_int>
   25c7c:	4604      	mov	r4, r0
   25c7e:	e79e      	b.n	25bbe <ip_interface_setopt+0x1a>
   25c80:	4602      	mov	r2, r0
   25c82:	4633      	mov	r3, r6
   25c84:	f244 0110 	movw	r1, #16400	; 0x4010
   25c88:	2004      	movs	r0, #4
   25c8a:	e9cd 5700 	strd	r5, r7, [sp]
   25c8e:	e7f3      	b.n	25c78 <ip_interface_setopt+0xd4>
   25c90:	4602      	mov	r2, r0
   25c92:	4633      	mov	r3, r6
   25c94:	f246 0110 	movw	r1, #24592	; 0x6010
   25c98:	2006      	movs	r0, #6
   25c9a:	e9cd 5700 	strd	r5, r7, [sp]
   25c9e:	e7eb      	b.n	25c78 <ip_interface_setopt+0xd4>
   25ca0:	4602      	mov	r2, r0
   25ca2:	4633      	mov	r3, r6
   25ca4:	f241 0104 	movw	r1, #4100	; 0x1004
   25ca8:	2008      	movs	r0, #8
   25caa:	e9cd 5700 	strd	r5, r7, [sp]
   25cae:	e7e3      	b.n	25c78 <ip_interface_setopt+0xd4>
   25cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   25cb4:	62a3      	str	r3, [r4, #40]	; 0x28
   25cb6:	2400      	movs	r4, #0
   25cb8:	e781      	b.n	25bbe <ip_interface_setopt+0x1a>
   25cba:	2400      	movs	r4, #0
   25cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   25cc0:	4622      	mov	r2, r4
   25cc2:	6283      	str	r3, [r0, #40]	; 0x28
   25cc4:	4621      	mov	r1, r4
   25cc6:	4623      	mov	r3, r4
   25cc8:	4630      	mov	r0, r6
   25cca:	e9cd 4400 	strd	r4, r4, [sp]
   25cce:	f7ff fc2b 	bl	25528 <ip_interface_sendto>
   25cd2:	e774      	b.n	25bbe <ip_interface_setopt+0x1a>
   25cd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   25cd8:	e7ec      	b.n	25cb4 <ip_interface_setopt+0x110>
   25cda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   25cde:	e7e9      	b.n	25cb4 <ip_interface_setopt+0x110>
   25ce0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25ce4:	e7e6      	b.n	25cb4 <ip_interface_setopt+0x110>
   25ce6:	2f04      	cmp	r7, #4
   25ce8:	d102      	bne.n	25cf0 <ip_interface_setopt+0x14c>
   25cea:	682b      	ldr	r3, [r5, #0]
   25cec:	2b87      	cmp	r3, #135	; 0x87
   25cee:	d8a1      	bhi.n	25c34 <ip_interface_setopt+0x90>
   25cf0:	4633      	mov	r3, r6
   25cf2:	4622      	mov	r2, r4
   25cf4:	f245 0106 	movw	r1, #20486	; 0x5006
   25cf8:	2001      	movs	r0, #1
   25cfa:	e9cd 5700 	strd	r5, r7, [sp]
   25cfe:	e7bb      	b.n	25c78 <ip_interface_setopt+0xd4>
   25d00:	462b      	mov	r3, r5
   25d02:	4642      	mov	r2, r8
   25d04:	2101      	movs	r1, #1
   25d06:	4630      	mov	r0, r6
   25d08:	970a      	str	r7, [sp, #40]	; 0x28
   25d0a:	b004      	add	sp, #16
   25d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25d10:	f7ff ba60 	b.w	251d4 <interface_socket_setopt>
   25d14:	0003dde6 	.word	0x0003dde6

00025d18 <ip_interface_getaddrinfo>:
   25d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d1c:	b085      	sub	sp, #20
   25d1e:	9300      	str	r3, [sp, #0]
   25d20:	2300      	movs	r3, #0
   25d22:	4f7b      	ldr	r7, [pc, #492]	; (25f10 <ip_interface_getaddrinfo+0x1f8>)
   25d24:	4614      	mov	r4, r2
   25d26:	803b      	strh	r3, [r7, #0]
   25d28:	2301      	movs	r3, #1
   25d2a:	4a7a      	ldr	r2, [pc, #488]	; (25f14 <ip_interface_getaddrinfo+0x1fc>)
   25d2c:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 25f18 <ip_interface_getaddrinfo+0x200>
   25d30:	6013      	str	r3, [r2, #0]
   25d32:	f8ca 3000 	str.w	r3, [sl]
   25d36:	4b79      	ldr	r3, [pc, #484]	; (25f1c <ip_interface_getaddrinfo+0x204>)
   25d38:	4605      	mov	r5, r0
   25d3a:	781b      	ldrb	r3, [r3, #0]
   25d3c:	460e      	mov	r6, r1
   25d3e:	b93b      	cbnz	r3, 25d50 <ip_interface_getaddrinfo+0x38>
   25d40:	2070      	movs	r0, #112	; 0x70
   25d42:	f7f9 fd95 	bl	1f870 <nrf_modem_os_errno_set>
   25d46:	f240 1015 	movw	r0, #277	; 0x115
   25d4a:	b005      	add	sp, #20
   25d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d50:	b1c9      	cbz	r1, 25d86 <ip_interface_getaddrinfo+0x6e>
   25d52:	b154      	cbz	r4, 25d6a <ip_interface_getaddrinfo+0x52>
   25d54:	6823      	ldr	r3, [r4, #0]
   25d56:	04d8      	lsls	r0, r3, #19
   25d58:	d507      	bpl.n	25d6a <ip_interface_getaddrinfo+0x52>
   25d5a:	0559      	lsls	r1, r3, #21
   25d5c:	d405      	bmi.n	25d6a <ip_interface_getaddrinfo+0x52>
   25d5e:	68a3      	ldr	r3, [r4, #8]
   25d60:	2b03      	cmp	r3, #3
   25d62:	d137      	bne.n	25dd4 <ip_interface_getaddrinfo+0xbc>
   25d64:	f44f 7089 	mov.w	r0, #274	; 0x112
   25d68:	e7ef      	b.n	25d4a <ip_interface_getaddrinfo+0x32>
   25d6a:	220a      	movs	r2, #10
   25d6c:	2100      	movs	r1, #0
   25d6e:	4630      	mov	r0, r6
   25d70:	f007 fcf8 	bl	2d764 <strtol>
   25d74:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   25d78:	1e42      	subs	r2, r0, #1
   25d7a:	429a      	cmp	r2, r3
   25d7c:	d8f2      	bhi.n	25d64 <ip_interface_getaddrinfo+0x4c>
   25d7e:	0203      	lsls	r3, r0, #8
   25d80:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   25d84:	8038      	strh	r0, [r7, #0]
   25d86:	2c00      	cmp	r4, #0
   25d88:	d1e9      	bne.n	25d5e <ip_interface_getaddrinfo+0x46>
   25d8a:	2300      	movs	r3, #0
   25d8c:	f8df b190 	ldr.w	fp, [pc, #400]	; 25f20 <ip_interface_getaddrinfo+0x208>
   25d90:	f8df 9190 	ldr.w	r9, [pc, #400]	; 25f24 <ip_interface_getaddrinfo+0x20c>
   25d94:	f8cb 3000 	str.w	r3, [fp]
   25d98:	f8c9 3000 	str.w	r3, [r9]
   25d9c:	b36d      	cbz	r5, 25dfa <ip_interface_getaddrinfo+0xe2>
   25d9e:	4628      	mov	r0, r5
   25da0:	f7eb fbae 	bl	11500 <strlen>
   25da4:	4680      	mov	r8, r0
   25da6:	bb54      	cbnz	r4, 25dfe <ip_interface_getaddrinfo+0xe6>
   25da8:	f04f 31ff 	mov.w	r1, #4294967295
   25dac:	4e5e      	ldr	r6, [pc, #376]	; (25f28 <ip_interface_getaddrinfo+0x210>)
   25dae:	6833      	ldr	r3, [r6, #0]
   25db0:	2b00      	cmp	r3, #0
   25db2:	f040 8096 	bne.w	25ee2 <ip_interface_getaddrinfo+0x1ca>
   25db6:	2301      	movs	r3, #1
   25db8:	f247 020d 	movw	r2, #28685	; 0x700d
   25dbc:	6033      	str	r3, [r6, #0]
   25dbe:	4608      	mov	r0, r1
   25dc0:	4643      	mov	r3, r8
   25dc2:	f00e fa44 	bl	3424e <ip_interface_request_create>
   25dc6:	4607      	mov	r7, r0
   25dc8:	2800      	cmp	r0, #0
   25dca:	d13a      	bne.n	25e42 <ip_interface_getaddrinfo+0x12a>
   25dcc:	6030      	str	r0, [r6, #0]
   25dce:	f240 100f 	movw	r0, #271	; 0x10f
   25dd2:	e7ba      	b.n	25d4a <ip_interface_getaddrinfo+0x32>
   25dd4:	6860      	ldr	r0, [r4, #4]
   25dd6:	f00e f9d8 	bl	3418a <address_family_verify>
   25dda:	b958      	cbnz	r0, 25df4 <ip_interface_getaddrinfo+0xdc>
   25ddc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   25de0:	2301      	movs	r3, #1
   25de2:	aa03      	add	r2, sp, #12
   25de4:	9303      	str	r3, [sp, #12]
   25de6:	f00e fa14 	bl	34212 <protocol_verify>
   25dea:	2800      	cmp	r0, #0
   25dec:	d0cd      	beq.n	25d8a <ip_interface_getaddrinfo+0x72>
   25dee:	f240 1013 	movw	r0, #275	; 0x113
   25df2:	e7aa      	b.n	25d4a <ip_interface_getaddrinfo+0x32>
   25df4:	f44f 7087 	mov.w	r0, #270	; 0x10e
   25df8:	e7a7      	b.n	25d4a <ip_interface_getaddrinfo+0x32>
   25dfa:	46a8      	mov	r8, r5
   25dfc:	e7d3      	b.n	25da6 <ip_interface_getaddrinfo+0x8e>
   25dfe:	69e7      	ldr	r7, [r4, #28]
   25e00:	2f00      	cmp	r7, #0
   25e02:	d071      	beq.n	25ee8 <ip_interface_getaddrinfo+0x1d0>
   25e04:	687b      	ldr	r3, [r7, #4]
   25e06:	2b66      	cmp	r3, #102	; 0x66
   25e08:	d1ce      	bne.n	25da8 <ip_interface_getaddrinfo+0x90>
   25e0a:	68bb      	ldr	r3, [r7, #8]
   25e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   25e10:	d1ca      	bne.n	25da8 <ip_interface_getaddrinfo+0x90>
   25e12:	f240 2302 	movw	r3, #514	; 0x202
   25e16:	68fa      	ldr	r2, [r7, #12]
   25e18:	429a      	cmp	r2, r3
   25e1a:	d1c5      	bne.n	25da8 <ip_interface_getaddrinfo+0x90>
   25e1c:	69b9      	ldr	r1, [r7, #24]
   25e1e:	2900      	cmp	r1, #0
   25e20:	d0c2      	beq.n	25da8 <ip_interface_getaddrinfo+0x90>
   25e22:	6860      	ldr	r0, [r4, #4]
   25e24:	f002 f9bc 	bl	281a0 <pdn_interface_pdn_id_get>
   25e28:	1c42      	adds	r2, r0, #1
   25e2a:	4601      	mov	r1, r0
   25e2c:	d1be      	bne.n	25dac <ip_interface_getaddrinfo+0x94>
   25e2e:	e7bb      	b.n	25da8 <ip_interface_getaddrinfo+0x90>
   25e30:	9001      	str	r0, [sp, #4]
   25e32:	483e      	ldr	r0, [pc, #248]	; (25f2c <ip_interface_getaddrinfo+0x214>)
   25e34:	f7eb fb64 	bl	11500 <strlen>
   25e38:	9b01      	ldr	r3, [sp, #4]
   25e3a:	220a      	movs	r2, #10
   25e3c:	4639      	mov	r1, r7
   25e3e:	4418      	add	r0, r3
   25e40:	e062      	b.n	25f08 <ip_interface_getaddrinfo+0x1f0>
   25e42:	b364      	cbz	r4, 25e9e <ip_interface_getaddrinfo+0x186>
   25e44:	68a3      	ldr	r3, [r4, #8]
   25e46:	2b02      	cmp	r3, #2
   25e48:	bf08      	it	eq
   25e4a:	4a32      	ldreq	r2, [pc, #200]	; (25f14 <ip_interface_getaddrinfo+0x1fc>)
   25e4c:	f8ca 3000 	str.w	r3, [sl]
   25e50:	bf08      	it	eq
   25e52:	6013      	streq	r3, [r2, #0]
   25e54:	6862      	ldr	r2, [r4, #4]
   25e56:	3a02      	subs	r2, #2
   25e58:	2a08      	cmp	r2, #8
   25e5a:	bf8e      	itee	hi
   25e5c:	2200      	movhi	r2, #0
   25e5e:	4934      	ldrls	r1, [pc, #208]	; (25f30 <ip_interface_getaddrinfo+0x218>)
   25e60:	568a      	ldrsbls	r2, [r1, r2]
   25e62:	6182      	str	r2, [r0, #24]
   25e64:	68e2      	ldr	r2, [r4, #12]
   25e66:	61c3      	str	r3, [r0, #28]
   25e68:	2300      	movs	r3, #0
   25e6a:	6202      	str	r2, [r0, #32]
   25e6c:	7503      	strb	r3, [r0, #20]
   25e6e:	7543      	strb	r3, [r0, #21]
   25e70:	7583      	strb	r3, [r0, #22]
   25e72:	75c3      	strb	r3, [r0, #23]
   25e74:	68bb      	ldr	r3, [r7, #8]
   25e76:	3310      	adds	r3, #16
   25e78:	60bb      	str	r3, [r7, #8]
   25e7a:	b12d      	cbz	r5, 25e88 <ip_interface_getaddrinfo+0x170>
   25e7c:	6838      	ldr	r0, [r7, #0]
   25e7e:	b118      	cbz	r0, 25e88 <ip_interface_getaddrinfo+0x170>
   25e80:	4642      	mov	r2, r8
   25e82:	4629      	mov	r1, r5
   25e84:	f00f fb7f 	bl	35586 <memcpy>
   25e88:	f247 010d 	movw	r1, #28685	; 0x700d
   25e8c:	4638      	mov	r0, r7
   25e8e:	f00d ffd2 	bl	33e36 <rpc_ip_client_request_send>
   25e92:	b150      	cbz	r0, 25eaa <ip_interface_getaddrinfo+0x192>
   25e94:	2300      	movs	r3, #0
   25e96:	f44f 7081 	mov.w	r0, #258	; 0x102
   25e9a:	6033      	str	r3, [r6, #0]
   25e9c:	e755      	b.n	25d4a <ip_interface_getaddrinfo+0x32>
   25e9e:	2210      	movs	r2, #16
   25ea0:	4621      	mov	r1, r4
   25ea2:	3014      	adds	r0, #20
   25ea4:	f00f fb8f 	bl	355c6 <memset>
   25ea8:	e7e4      	b.n	25e74 <ip_interface_getaddrinfo+0x15c>
   25eaa:	f04f 33ff 	mov.w	r3, #4294967295
   25eae:	9303      	str	r3, [sp, #12]
   25eb0:	4638      	mov	r0, r7
   25eb2:	a903      	add	r1, sp, #12
   25eb4:	f7f9 fc24 	bl	1f700 <nrf_modem_os_timedwait>
   25eb8:	6833      	ldr	r3, [r6, #0]
   25eba:	2b01      	cmp	r3, #1
   25ebc:	d0f8      	beq.n	25eb0 <ip_interface_getaddrinfo+0x198>
   25ebe:	f8d9 0000 	ldr.w	r0, [r9]
   25ec2:	b920      	cbnz	r0, 25ece <ip_interface_getaddrinfo+0x1b6>
   25ec4:	f8db 3000 	ldr.w	r3, [fp]
   25ec8:	9a00      	ldr	r2, [sp, #0]
   25eca:	6013      	str	r3, [r2, #0]
   25ecc:	e73d      	b.n	25d4a <ip_interface_getaddrinfo+0x32>
   25ece:	2300      	movs	r3, #0
   25ed0:	6033      	str	r3, [r6, #0]
   25ed2:	4b18      	ldr	r3, [pc, #96]	; (25f34 <ip_interface_getaddrinfo+0x21c>)
   25ed4:	6818      	ldr	r0, [r3, #0]
   25ed6:	b108      	cbz	r0, 25edc <ip_interface_getaddrinfo+0x1c4>
   25ed8:	f7f9 fcca 	bl	1f870 <nrf_modem_os_errno_set>
   25edc:	f8d9 0000 	ldr.w	r0, [r9]
   25ee0:	e733      	b.n	25d4a <ip_interface_getaddrinfo+0x32>
   25ee2:	f44f 708a 	mov.w	r0, #276	; 0x114
   25ee6:	e730      	b.n	25d4a <ip_interface_getaddrinfo+0x32>
   25ee8:	2e00      	cmp	r6, #0
   25eea:	f43f af5d 	beq.w	25da8 <ip_interface_getaddrinfo+0x90>
   25eee:	6823      	ldr	r3, [r4, #0]
   25ef0:	04db      	lsls	r3, r3, #19
   25ef2:	f57f af59 	bpl.w	25da8 <ip_interface_getaddrinfo+0x90>
   25ef6:	213a      	movs	r1, #58	; 0x3a
   25ef8:	4630      	mov	r0, r6
   25efa:	f00f fc94 	bl	35826 <strchr>
   25efe:	2800      	cmp	r0, #0
   25f00:	d196      	bne.n	25e30 <ip_interface_getaddrinfo+0x118>
   25f02:	4601      	mov	r1, r0
   25f04:	220a      	movs	r2, #10
   25f06:	4630      	mov	r0, r6
   25f08:	f007 fd50 	bl	2d9ac <strtoul>
   25f0c:	4601      	mov	r1, r0
   25f0e:	e74d      	b.n	25dac <ip_interface_getaddrinfo+0x94>
   25f10:	2001ac08 	.word	0x2001ac08
   25f14:	20016aa0 	.word	0x20016aa0
   25f18:	20016aa4 	.word	0x20016aa4
   25f1c:	2001e4ff 	.word	0x2001e4ff
   25f20:	20016ab4 	.word	0x20016ab4
   25f24:	20016aac 	.word	0x20016aac
   25f28:	20016ab0 	.word	0x20016ab0
   25f2c:	0003df14 	.word	0x0003df14
   25f30:	0003ddea 	.word	0x0003ddea
   25f34:	20016aa8 	.word	0x20016aa8

00025f38 <ip_interface_freeaddrinfo>:
   25f38:	b538      	push	{r3, r4, r5, lr}
   25f3a:	4d0a      	ldr	r5, [pc, #40]	; (25f64 <ip_interface_freeaddrinfo+0x2c>)
   25f3c:	4604      	mov	r4, r0
   25f3e:	682b      	ldr	r3, [r5, #0]
   25f40:	2b02      	cmp	r3, #2
   25f42:	d10e      	bne.n	25f62 <ip_interface_freeaddrinfo+0x2a>
   25f44:	b148      	cbz	r0, 25f5a <ip_interface_freeaddrinfo+0x22>
   25f46:	6940      	ldr	r0, [r0, #20]
   25f48:	f7f9 fe4c 	bl	1fbe4 <nrf_modem_os_free>
   25f4c:	69a0      	ldr	r0, [r4, #24]
   25f4e:	b108      	cbz	r0, 25f54 <ip_interface_freeaddrinfo+0x1c>
   25f50:	f7f9 fe48 	bl	1fbe4 <nrf_modem_os_free>
   25f54:	4620      	mov	r0, r4
   25f56:	f7f9 fe45 	bl	1fbe4 <nrf_modem_os_free>
   25f5a:	2300      	movs	r3, #0
   25f5c:	4a02      	ldr	r2, [pc, #8]	; (25f68 <ip_interface_freeaddrinfo+0x30>)
   25f5e:	602b      	str	r3, [r5, #0]
   25f60:	6013      	str	r3, [r2, #0]
   25f62:	bd38      	pop	{r3, r4, r5, pc}
   25f64:	20016ab0 	.word	0x20016ab0
   25f68:	20016aac 	.word	0x20016aac

00025f6c <rpc_ip_event_handler>:
   25f6c:	f248 030d 	movw	r3, #32781	; 0x800d
   25f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f74:	4299      	cmp	r1, r3
   25f76:	4604      	mov	r4, r0
   25f78:	460e      	mov	r6, r1
   25f7a:	b087      	sub	sp, #28
   25f7c:	d038      	beq.n	25ff0 <rpc_ip_event_handler+0x84>
   25f7e:	f248 030f 	movw	r3, #32783	; 0x800f
   25f82:	4299      	cmp	r1, r3
   25f84:	f000 80d2 	beq.w	2612c <rpc_ip_event_handler+0x1c0>
   25f88:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   25f8c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   25f90:	68c0      	ldr	r0, [r0, #12]
   25f92:	f040 80d5 	bne.w	26140 <rpc_ip_event_handler+0x1d4>
   25f96:	f7ff f8f5 	bl	25184 <interface_from_internal_id_search>
   25f9a:	4607      	mov	r7, r0
   25f9c:	4638      	mov	r0, r7
   25f9e:	f7ff f909 	bl	251b4 <interface_socket_from_handle_get>
   25fa2:	4605      	mov	r5, r0
   25fa4:	2800      	cmp	r0, #0
   25fa6:	d056      	beq.n	26056 <rpc_ip_event_handler+0xea>
   25fa8:	4601      	mov	r1, r0
   25faa:	4633      	mov	r3, r6
   25fac:	4622      	mov	r2, r4
   25fae:	4638      	mov	r0, r7
   25fb0:	f000 fdba 	bl	26b28 <tls_rpc_ip_event_handler>
   25fb4:	2800      	cmp	r0, #0
   25fb6:	f000 80c1 	beq.w	2613c <rpc_ip_event_handler+0x1d0>
   25fba:	f248 030c 	movw	r3, #32780	; 0x800c
   25fbe:	429e      	cmp	r6, r3
   25fc0:	f200 80c0 	bhi.w	26144 <rpc_ip_event_handler+0x1d8>
   25fc4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   25fc8:	d945      	bls.n	26056 <rpc_ip_event_handler+0xea>
   25fca:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   25fce:	3e01      	subs	r6, #1
   25fd0:	2e0b      	cmp	r6, #11
   25fd2:	d840      	bhi.n	26056 <rpc_ip_event_handler+0xea>
   25fd4:	e8df f016 	tbh	[pc, r6, lsl #1]
   25fd8:	013f00f7 	.word	0x013f00f7
   25fdc:	01ee01e4 	.word	0x01ee01e4
   25fe0:	01ba0130 	.word	0x01ba0130
   25fe4:	015901ba 	.word	0x015901ba
   25fe8:	003f0105 	.word	0x003f0105
   25fec:	0184003f 	.word	0x0184003f
   25ff0:	4bb2      	ldr	r3, [pc, #712]	; (262bc <rpc_ip_event_handler+0x350>)
   25ff2:	681b      	ldr	r3, [r3, #0]
   25ff4:	2b01      	cmp	r3, #1
   25ff6:	d12e      	bne.n	26056 <rpc_ip_event_handler+0xea>
   25ff8:	f8d0 8014 	ldr.w	r8, [r0, #20]
   25ffc:	f1b8 0f00 	cmp.w	r8, #0
   26000:	f040 808e 	bne.w	26120 <rpc_ip_event_handler+0x1b4>
   26004:	f8d0 a018 	ldr.w	sl, [r0, #24]
   26008:	f8d0 9000 	ldr.w	r9, [r0]
   2600c:	ea4f 134a 	mov.w	r3, sl, lsl #5
   26010:	4618      	mov	r0, r3
   26012:	9301      	str	r3, [sp, #4]
   26014:	f7f9 fdde 	bl	1fbd4 <nrf_modem_os_alloc>
   26018:	9000      	str	r0, [sp, #0]
   2601a:	b308      	cbz	r0, 26060 <rpc_ip_event_handler+0xf4>
   2601c:	2024      	movs	r0, #36	; 0x24
   2601e:	fb00 f00a 	mul.w	r0, r0, sl
   26022:	f7f9 fdd7 	bl	1fbd4 <nrf_modem_os_alloc>
   26026:	b1e8      	cbz	r0, 26064 <rpc_ip_event_handler+0xf8>
   26028:	2704      	movs	r7, #4
   2602a:	9b00      	ldr	r3, [sp, #0]
   2602c:	f100 050c 	add.w	r5, r0, #12
   26030:	f103 0620 	add.w	r6, r3, #32
   26034:	45c2      	cmp	sl, r8
   26036:	d119      	bne.n	2606c <rpc_ip_event_handler+0x100>
   26038:	f1ba 0f00 	cmp.w	sl, #0
   2603c:	d005      	beq.n	2604a <rpc_ip_event_handler+0xde>
   2603e:	e9dd 2300 	ldrd	r2, r3, [sp]
   26042:	4413      	add	r3, r2
   26044:	2200      	movs	r2, #0
   26046:	f843 2c04 	str.w	r2, [r3, #-4]
   2604a:	4b9d      	ldr	r3, [pc, #628]	; (262c0 <rpc_ip_event_handler+0x354>)
   2604c:	9a00      	ldr	r2, [sp, #0]
   2604e:	601a      	str	r2, [r3, #0]
   26050:	2302      	movs	r3, #2
   26052:	4a9a      	ldr	r2, [pc, #616]	; (262bc <rpc_ip_event_handler+0x350>)
   26054:	6013      	str	r3, [r2, #0]
   26056:	6820      	ldr	r0, [r4, #0]
   26058:	2800      	cmp	r0, #0
   2605a:	f040 8174 	bne.w	26346 <rpc_ip_event_handler+0x3da>
   2605e:	e06d      	b.n	2613c <rpc_ip_event_handler+0x1d0>
   26060:	f7f9 fdc0 	bl	1fbe4 <nrf_modem_os_free>
   26064:	220c      	movs	r2, #12
   26066:	4b97      	ldr	r3, [pc, #604]	; (262c4 <rpc_ip_event_handler+0x358>)
   26068:	601a      	str	r2, [r3, #0]
   2606a:	e7ee      	b.n	2604a <rpc_ip_event_handler+0xde>
   2606c:	f859 3007 	ldr.w	r3, [r9, r7]
   26070:	f1a5 010c 	sub.w	r1, r5, #12
   26074:	f846 3c20 	str.w	r3, [r6, #-32]
   26078:	eb09 0307 	add.w	r3, r9, r7
   2607c:	685b      	ldr	r3, [r3, #4]
   2607e:	3b01      	subs	r3, #1
   26080:	2b04      	cmp	r3, #4
   26082:	bf8e      	itee	hi
   26084:	2300      	movhi	r3, #0
   26086:	4a90      	ldrls	r2, [pc, #576]	; (262c8 <rpc_ip_event_handler+0x35c>)
   26088:	56d3      	ldrsbls	r3, [r2, r3]
   2608a:	f846 3c1c 	str.w	r3, [r6, #-28]
   2608e:	4b8f      	ldr	r3, [pc, #572]	; (262cc <rpc_ip_event_handler+0x360>)
   26090:	681b      	ldr	r3, [r3, #0]
   26092:	f846 3c18 	str.w	r3, [r6, #-24]
   26096:	4b8e      	ldr	r3, [pc, #568]	; (262d0 <rpc_ip_event_handler+0x364>)
   26098:	681b      	ldr	r3, [r3, #0]
   2609a:	f846 3c14 	str.w	r3, [r6, #-20]
   2609e:	eb09 0307 	add.w	r3, r9, r7
   260a2:	8a1a      	ldrh	r2, [r3, #16]
   260a4:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   260a8:	4b8a      	ldr	r3, [pc, #552]	; (262d4 <rpc_ip_event_handler+0x368>)
   260aa:	3714      	adds	r7, #20
   260ac:	2a04      	cmp	r2, #4
   260ae:	f846 1c0c 	str.w	r1, [r6, #-12]
   260b2:	881b      	ldrh	r3, [r3, #0]
   260b4:	f846 2c10 	str.w	r2, [r6, #-16]
   260b8:	eb09 0107 	add.w	r1, r9, r7
   260bc:	d126      	bne.n	2610c <rpc_ip_event_handler+0x1a0>
   260be:	2002      	movs	r0, #2
   260c0:	f845 0c08 	str.w	r0, [r5, #-8]
   260c4:	2010      	movs	r0, #16
   260c6:	f805 0c0c 	strb.w	r0, [r5, #-12]
   260ca:	4628      	mov	r0, r5
   260cc:	f825 3c04 	strh.w	r3, [r5, #-4]
   260d0:	f00f fa59 	bl	35586 <memcpy>
   260d4:	f856 3c10 	ldr.w	r3, [r6, #-16]
   260d8:	f10b 0001 	add.w	r0, fp, #1
   260dc:	441f      	add	r7, r3
   260de:	f7f9 fd79 	bl	1fbd4 <nrf_modem_os_alloc>
   260e2:	f846 0c08 	str.w	r0, [r6, #-8]
   260e6:	b148      	cbz	r0, 260fc <rpc_ip_event_handler+0x190>
   260e8:	465a      	mov	r2, fp
   260ea:	eb09 0107 	add.w	r1, r9, r7
   260ee:	f00f fa4a 	bl	35586 <memcpy>
   260f2:	2200      	movs	r2, #0
   260f4:	f856 3c08 	ldr.w	r3, [r6, #-8]
   260f8:	f803 200b 	strb.w	r2, [r3, fp]
   260fc:	f846 6c04 	str.w	r6, [r6, #-4]
   26100:	445f      	add	r7, fp
   26102:	f108 0801 	add.w	r8, r8, #1
   26106:	3620      	adds	r6, #32
   26108:	3508      	adds	r5, #8
   2610a:	e793      	b.n	26034 <rpc_ip_event_handler+0xc8>
   2610c:	200a      	movs	r0, #10
   2610e:	f845 0c08 	str.w	r0, [r5, #-8]
   26112:	2024      	movs	r0, #36	; 0x24
   26114:	f825 3c04 	strh.w	r3, [r5, #-4]
   26118:	f805 0c0c 	strb.w	r0, [r5, #-12]
   2611c:	1d28      	adds	r0, r5, #4
   2611e:	e7d7      	b.n	260d0 <rpc_ip_event_handler+0x164>
   26120:	4640      	mov	r0, r8
   26122:	f7ff f907 	bl	25334 <rpc_error_to_nrf_gai_errno>
   26126:	4b67      	ldr	r3, [pc, #412]	; (262c4 <rpc_ip_event_handler+0x358>)
   26128:	6018      	str	r0, [r3, #0]
   2612a:	e791      	b.n	26050 <rpc_ip_event_handler+0xe4>
   2612c:	6940      	ldr	r0, [r0, #20]
   2612e:	f7ff f8f9 	bl	25324 <rpc_error_to_nrf_errno>
   26132:	2201      	movs	r2, #1
   26134:	4b68      	ldr	r3, [pc, #416]	; (262d8 <rpc_ip_event_handler+0x36c>)
   26136:	6018      	str	r0, [r3, #0]
   26138:	4b68      	ldr	r3, [pc, #416]	; (262dc <rpc_ip_event_handler+0x370>)
   2613a:	701a      	strb	r2, [r3, #0]
   2613c:	2000      	movs	r0, #0
   2613e:	e04d      	b.n	261dc <rpc_ip_event_handler+0x270>
   26140:	0c07      	lsrs	r7, r0, #16
   26142:	e72b      	b.n	25f9c <rpc_ip_event_handler+0x30>
   26144:	f249 0302 	movw	r3, #36866	; 0x9002
   26148:	429e      	cmp	r6, r3
   2614a:	f000 80ad 	beq.w	262a8 <rpc_ip_event_handler+0x33c>
   2614e:	f249 0303 	movw	r3, #36867	; 0x9003
   26152:	429e      	cmp	r6, r3
   26154:	d054      	beq.n	26200 <rpc_ip_event_handler+0x294>
   26156:	f249 0301 	movw	r3, #36865	; 0x9001
   2615a:	429e      	cmp	r6, r3
   2615c:	f47f af7b 	bne.w	26056 <rpc_ip_event_handler+0xea>
   26160:	682e      	ldr	r6, [r5, #0]
   26162:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   26166:	f000 80ed 	beq.w	26344 <rpc_ip_event_handler+0x3d8>
   2616a:	68a3      	ldr	r3, [r4, #8]
   2616c:	2b04      	cmp	r3, #4
   2616e:	f240 80e6 	bls.w	2633e <rpc_ip_event_handler+0x3d2>
   26172:	8a67      	ldrh	r7, [r4, #18]
   26174:	2f00      	cmp	r7, #0
   26176:	f000 80e3 	beq.w	26340 <rpc_ip_event_handler+0x3d4>
   2617a:	2f10      	cmp	r7, #16
   2617c:	f040 80c3 	bne.w	26306 <rpc_ip_event_handler+0x39a>
   26180:	2024      	movs	r0, #36	; 0x24
   26182:	f7f9 fd27 	bl	1fbd4 <nrf_modem_os_alloc>
   26186:	4606      	mov	r6, r0
   26188:	b1d8      	cbz	r0, 261c2 <rpc_ip_event_handler+0x256>
   2618a:	230a      	movs	r3, #10
   2618c:	2724      	movs	r7, #36	; 0x24
   2618e:	6043      	str	r3, [r0, #4]
   26190:	7007      	strb	r7, [r0, #0]
   26192:	7c62      	ldrb	r2, [r4, #17]
   26194:	7c23      	ldrb	r3, [r4, #16]
   26196:	f104 0114 	add.w	r1, r4, #20
   2619a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2619e:	2210      	movs	r2, #16
   261a0:	8103      	strh	r3, [r0, #8]
   261a2:	4410      	add	r0, r2
   261a4:	f00f f9ef 	bl	35586 <memcpy>
   261a8:	6823      	ldr	r3, [r4, #0]
   261aa:	69e8      	ldr	r0, [r5, #28]
   261ac:	9302      	str	r3, [sp, #8]
   261ae:	6863      	ldr	r3, [r4, #4]
   261b0:	9705      	str	r7, [sp, #20]
   261b2:	e9cd 3603 	strd	r3, r6, [sp, #12]
   261b6:	6803      	ldr	r3, [r0, #0]
   261b8:	a902      	add	r1, sp, #8
   261ba:	685b      	ldr	r3, [r3, #4]
   261bc:	4798      	blx	r3
   261be:	3001      	adds	r0, #1
   261c0:	d177      	bne.n	262b2 <rpc_ip_event_handler+0x346>
   261c2:	2002      	movs	r0, #2
   261c4:	e00a      	b.n	261dc <rpc_ip_event_handler+0x270>
   261c6:	682b      	ldr	r3, [r5, #0]
   261c8:	2b01      	cmp	r3, #1
   261ca:	d1b7      	bne.n	2613c <rpc_ip_event_handler+0x1d0>
   261cc:	6960      	ldr	r0, [r4, #20]
   261ce:	2800      	cmp	r0, #0
   261d0:	f040 8100 	bne.w	263d4 <rpc_ip_event_handler+0x468>
   261d4:	2302      	movs	r3, #2
   261d6:	602b      	str	r3, [r5, #0]
   261d8:	69a3      	ldr	r3, [r4, #24]
   261da:	61ab      	str	r3, [r5, #24]
   261dc:	b007      	add	sp, #28
   261de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261e2:	682b      	ldr	r3, [r5, #0]
   261e4:	b29b      	uxth	r3, r3
   261e6:	2b0d      	cmp	r3, #13
   261e8:	d1a8      	bne.n	2613c <rpc_ip_event_handler+0x1d0>
   261ea:	6960      	ldr	r0, [r4, #20]
   261ec:	2800      	cmp	r0, #0
   261ee:	f040 80f1 	bne.w	263d4 <rpc_ip_event_handler+0x468>
   261f2:	682b      	ldr	r3, [r5, #0]
   261f4:	0c1b      	lsrs	r3, r3, #16
   261f6:	041b      	lsls	r3, r3, #16
   261f8:	f043 030e 	orr.w	r3, r3, #14
   261fc:	602b      	str	r3, [r5, #0]
   261fe:	e7ed      	b.n	261dc <rpc_ip_event_handler+0x270>
   26200:	682b      	ldr	r3, [r5, #0]
   26202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   26206:	602b      	str	r3, [r5, #0]
   26208:	682b      	ldr	r3, [r5, #0]
   2620a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2620e:	602b      	str	r3, [r5, #0]
   26210:	682b      	ldr	r3, [r5, #0]
   26212:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   26216:	602b      	str	r3, [r5, #0]
   26218:	6920      	ldr	r0, [r4, #16]
   2621a:	286c      	cmp	r0, #108	; 0x6c
   2621c:	d107      	bne.n	2622e <rpc_ip_event_handler+0x2c2>
   2621e:	682b      	ldr	r3, [r5, #0]
   26220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   26224:	602b      	str	r3, [r5, #0]
   26226:	2339      	movs	r3, #57	; 0x39
   26228:	606b      	str	r3, [r5, #4]
   2622a:	60ab      	str	r3, [r5, #8]
   2622c:	e786      	b.n	2613c <rpc_ip_event_handler+0x1d0>
   2622e:	f7ff f879 	bl	25324 <rpc_error_to_nrf_errno>
   26232:	6068      	str	r0, [r5, #4]
   26234:	60a8      	str	r0, [r5, #8]
   26236:	e781      	b.n	2613c <rpc_ip_event_handler+0x1d0>
   26238:	682b      	ldr	r3, [r5, #0]
   2623a:	b29b      	uxth	r3, r3
   2623c:	2b03      	cmp	r3, #3
   2623e:	f47f af7d 	bne.w	2613c <rpc_ip_event_handler+0x1d0>
   26242:	6960      	ldr	r0, [r4, #20]
   26244:	2800      	cmp	r0, #0
   26246:	f040 80c5 	bne.w	263d4 <rpc_ip_event_handler+0x468>
   2624a:	682b      	ldr	r3, [r5, #0]
   2624c:	0c1b      	lsrs	r3, r3, #16
   2624e:	041b      	lsls	r3, r3, #16
   26250:	f043 0304 	orr.w	r3, r3, #4
   26254:	e7d2      	b.n	261fc <rpc_ip_event_handler+0x290>
   26256:	682b      	ldr	r3, [r5, #0]
   26258:	0098      	lsls	r0, r3, #2
   2625a:	f57f af6f 	bpl.w	2613c <rpc_ip_event_handler+0x1d0>
   2625e:	682b      	ldr	r3, [r5, #0]
   26260:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   26264:	602b      	str	r3, [r5, #0]
   26266:	6960      	ldr	r0, [r4, #20]
   26268:	2800      	cmp	r0, #0
   2626a:	f040 8095 	bne.w	26398 <rpc_ip_event_handler+0x42c>
   2626e:	682b      	ldr	r3, [r5, #0]
   26270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26274:	602b      	str	r3, [r5, #0]
   26276:	682b      	ldr	r3, [r5, #0]
   26278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2627c:	602b      	str	r3, [r5, #0]
   2627e:	682b      	ldr	r3, [r5, #0]
   26280:	0c1b      	lsrs	r3, r3, #16
   26282:	041b      	lsls	r3, r3, #16
   26284:	f043 0305 	orr.w	r3, r3, #5
   26288:	e7b8      	b.n	261fc <rpc_ip_event_handler+0x290>
   2628a:	682b      	ldr	r3, [r5, #0]
   2628c:	b29b      	uxth	r3, r3
   2628e:	2b06      	cmp	r3, #6
   26290:	f47f af54 	bne.w	2613c <rpc_ip_event_handler+0x1d0>
   26294:	6960      	ldr	r0, [r4, #20]
   26296:	2800      	cmp	r0, #0
   26298:	f040 809c 	bne.w	263d4 <rpc_ip_event_handler+0x468>
   2629c:	682b      	ldr	r3, [r5, #0]
   2629e:	0c1b      	lsrs	r3, r3, #16
   262a0:	041b      	lsls	r3, r3, #16
   262a2:	f043 0307 	orr.w	r3, r3, #7
   262a6:	e7a9      	b.n	261fc <rpc_ip_event_handler+0x290>
   262a8:	682b      	ldr	r3, [r5, #0]
   262aa:	b29b      	uxth	r3, r3
   262ac:	2b07      	cmp	r3, #7
   262ae:	f47f af45 	bne.w	2613c <rpc_ip_event_handler+0x1d0>
   262b2:	682b      	ldr	r3, [r5, #0]
   262b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   262b8:	602b      	str	r3, [r5, #0]
   262ba:	e73f      	b.n	2613c <rpc_ip_event_handler+0x1d0>
   262bc:	20016ab0 	.word	0x20016ab0
   262c0:	20016ab4 	.word	0x20016ab4
   262c4:	20016aac 	.word	0x20016aac
   262c8:	0003ddf3 	.word	0x0003ddf3
   262cc:	20016aa4 	.word	0x20016aa4
   262d0:	20016aa0 	.word	0x20016aa0
   262d4:	2001ac08 	.word	0x2001ac08
   262d8:	20016adc 	.word	0x20016adc
   262dc:	2001e500 	.word	0x2001e500
   262e0:	682b      	ldr	r3, [r5, #0]
   262e2:	b29b      	uxth	r3, r3
   262e4:	2b08      	cmp	r3, #8
   262e6:	f47f af29 	bne.w	2613c <rpc_ip_event_handler+0x1d0>
   262ea:	6960      	ldr	r0, [r4, #20]
   262ec:	2800      	cmp	r0, #0
   262ee:	d171      	bne.n	263d4 <rpc_ip_event_handler+0x468>
   262f0:	4b3a      	ldr	r3, [pc, #232]	; (263dc <rpc_ip_event_handler+0x470>)
   262f2:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   262f6:	682b      	ldr	r3, [r5, #0]
   262f8:	0c1b      	lsrs	r3, r3, #16
   262fa:	041b      	lsls	r3, r3, #16
   262fc:	f043 0309 	orr.w	r3, r3, #9
   26300:	602b      	str	r3, [r5, #0]
   26302:	2001      	movs	r0, #1
   26304:	e76a      	b.n	261dc <rpc_ip_event_handler+0x270>
   26306:	2f04      	cmp	r7, #4
   26308:	d11c      	bne.n	26344 <rpc_ip_event_handler+0x3d8>
   2630a:	2010      	movs	r0, #16
   2630c:	f7f9 fc62 	bl	1fbd4 <nrf_modem_os_alloc>
   26310:	4606      	mov	r6, r0
   26312:	2800      	cmp	r0, #0
   26314:	f43f af55 	beq.w	261c2 <rpc_ip_event_handler+0x256>
   26318:	2302      	movs	r3, #2
   2631a:	f04f 0810 	mov.w	r8, #16
   2631e:	6043      	str	r3, [r0, #4]
   26320:	f880 8000 	strb.w	r8, [r0]
   26324:	7c62      	ldrb	r2, [r4, #17]
   26326:	7c23      	ldrb	r3, [r4, #16]
   26328:	f104 0114 	add.w	r1, r4, #20
   2632c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26330:	8103      	strh	r3, [r0, #8]
   26332:	463a      	mov	r2, r7
   26334:	300c      	adds	r0, #12
   26336:	f00f f926 	bl	35586 <memcpy>
   2633a:	4647      	mov	r7, r8
   2633c:	e734      	b.n	261a8 <rpc_ip_event_handler+0x23c>
   2633e:	2700      	movs	r7, #0
   26340:	463e      	mov	r6, r7
   26342:	e731      	b.n	261a8 <rpc_ip_event_handler+0x23c>
   26344:	6820      	ldr	r0, [r4, #0]
   26346:	f00d fd8a 	bl	33e5e <rpc_ip_client_data_free>
   2634a:	e6f7      	b.n	2613c <rpc_ip_event_handler+0x1d0>
   2634c:	682b      	ldr	r3, [r5, #0]
   2634e:	0299      	lsls	r1, r3, #10
   26350:	f57f aef4 	bpl.w	2613c <rpc_ip_event_handler+0x1d0>
   26354:	6960      	ldr	r0, [r4, #20]
   26356:	b938      	cbnz	r0, 26368 <rpc_ip_event_handler+0x3fc>
   26358:	682b      	ldr	r3, [r5, #0]
   2635a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2635e:	602b      	str	r3, [r5, #0]
   26360:	4b1e      	ldr	r3, [pc, #120]	; (263dc <rpc_ip_event_handler+0x470>)
   26362:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   26366:	e7cc      	b.n	26302 <rpc_ip_event_handler+0x396>
   26368:	286b      	cmp	r0, #107	; 0x6b
   2636a:	d10e      	bne.n	2638a <rpc_ip_event_handler+0x41e>
   2636c:	692b      	ldr	r3, [r5, #16]
   2636e:	220c      	movs	r2, #12
   26370:	2b01      	cmp	r3, #1
   26372:	d105      	bne.n	26380 <rpc_ip_event_handler+0x414>
   26374:	682b      	ldr	r3, [r5, #0]
   26376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   2637a:	602b      	str	r3, [r5, #0]
   2637c:	606a      	str	r2, [r5, #4]
   2637e:	e6dd      	b.n	2613c <rpc_ip_event_handler+0x1d0>
   26380:	606a      	str	r2, [r5, #4]
   26382:	682b      	ldr	r3, [r5, #0]
   26384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   26388:	e796      	b.n	262b8 <rpc_ip_event_handler+0x34c>
   2638a:	f020 0302 	bic.w	r3, r0, #2
   2638e:	2b01      	cmp	r3, #1
   26390:	d102      	bne.n	26398 <rpc_ip_event_handler+0x42c>
   26392:	230c      	movs	r3, #12
   26394:	606b      	str	r3, [r5, #4]
   26396:	e6d1      	b.n	2613c <rpc_ip_event_handler+0x1d0>
   26398:	f7fe ffc4 	bl	25324 <rpc_error_to_nrf_errno>
   2639c:	6068      	str	r0, [r5, #4]
   2639e:	e7f0      	b.n	26382 <rpc_ip_event_handler+0x416>
   263a0:	682b      	ldr	r3, [r5, #0]
   263a2:	025a      	lsls	r2, r3, #9
   263a4:	f57f aeca 	bpl.w	2613c <rpc_ip_event_handler+0x1d0>
   263a8:	6960      	ldr	r0, [r4, #20]
   263aa:	b998      	cbnz	r0, 263d4 <rpc_ip_event_handler+0x468>
   263ac:	682b      	ldr	r3, [r5, #0]
   263ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   263b2:	e723      	b.n	261fc <rpc_ip_event_handler+0x290>
   263b4:	682b      	ldr	r3, [r5, #0]
   263b6:	01db      	lsls	r3, r3, #7
   263b8:	f57f aec0 	bpl.w	2613c <rpc_ip_event_handler+0x1d0>
   263bc:	6960      	ldr	r0, [r4, #20]
   263be:	b948      	cbnz	r0, 263d4 <rpc_ip_event_handler+0x468>
   263c0:	6820      	ldr	r0, [r4, #0]
   263c2:	b118      	cbz	r0, 263cc <rpc_ip_event_handler+0x460>
   263c4:	2001      	movs	r0, #1
   263c6:	4b05      	ldr	r3, [pc, #20]	; (263dc <rpc_ip_event_handler+0x470>)
   263c8:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   263cc:	682b      	ldr	r3, [r5, #0]
   263ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   263d2:	e713      	b.n	261fc <rpc_ip_event_handler+0x290>
   263d4:	f7fe ffa6 	bl	25324 <rpc_error_to_nrf_errno>
   263d8:	6068      	str	r0, [r5, #4]
   263da:	e6af      	b.n	2613c <rpc_ip_event_handler+0x1d0>
   263dc:	20016ab8 	.word	0x20016ab8

000263e0 <secure_socket_dtls_timeout_check>:
   263e0:	281f      	cmp	r0, #31
   263e2:	dc0b      	bgt.n	263fc <secure_socket_dtls_timeout_check+0x1c>
   263e4:	2800      	cmp	r0, #0
   263e6:	dd10      	ble.n	2640a <secure_socket_dtls_timeout_check+0x2a>
   263e8:	2301      	movs	r3, #1
   263ea:	fa03 f000 	lsl.w	r0, r3, r0
   263ee:	4b09      	ldr	r3, [pc, #36]	; (26414 <secure_socket_dtls_timeout_check+0x34>)
   263f0:	4003      	ands	r3, r0
   263f2:	2b00      	cmp	r3, #0
   263f4:	bf0c      	ite	eq
   263f6:	2016      	moveq	r0, #22
   263f8:	2000      	movne	r0, #0
   263fa:	4770      	bx	lr
   263fc:	283f      	cmp	r0, #63	; 0x3f
   263fe:	d006      	beq.n	2640e <secure_socket_dtls_timeout_check+0x2e>
   26400:	287b      	cmp	r0, #123	; 0x7b
   26402:	bf14      	ite	ne
   26404:	2016      	movne	r0, #22
   26406:	2000      	moveq	r0, #0
   26408:	4770      	bx	lr
   2640a:	2016      	movs	r0, #22
   2640c:	4770      	bx	lr
   2640e:	2000      	movs	r0, #0
   26410:	4770      	bx	lr
   26412:	bf00      	nop
   26414:	8000808a 	.word	0x8000808a

00026418 <hostname_free>:
   26418:	b538      	push	{r3, r4, r5, lr}
   2641a:	4c07      	ldr	r4, [pc, #28]	; (26438 <hostname_free+0x20>)
   2641c:	4605      	mov	r5, r0
   2641e:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   26422:	b138      	cbz	r0, 26434 <hostname_free+0x1c>
   26424:	f7f9 fbde 	bl	1fbe4 <nrf_modem_os_free>
   26428:	2300      	movs	r3, #0
   2642a:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   2642e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   26432:	6063      	str	r3, [r4, #4]
   26434:	bd38      	pop	{r3, r4, r5, pc}
   26436:	bf00      	nop
   26438:	20016ae0 	.word	0x20016ae0

0002643c <secure_socket_attach_initiate>:
   2643c:	f04f 33ff 	mov.w	r3, #4294967295
   26440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26444:	f8df 8088 	ldr.w	r8, [pc, #136]	; 264d0 <secure_socket_attach_initiate+0x94>
   26448:	9301      	str	r3, [sp, #4]
   2644a:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   2644e:	460c      	mov	r4, r1
   26450:	4616      	mov	r6, r2
   26452:	f8d9 3004 	ldr.w	r3, [r9, #4]
   26456:	f247 0281 	movw	r2, #28801	; 0x7081
   2645a:	6989      	ldr	r1, [r1, #24]
   2645c:	4607      	mov	r7, r0
   2645e:	f00d fef6 	bl	3424e <ip_interface_request_create>
   26462:	4605      	mov	r5, r0
   26464:	b378      	cbz	r0, 264c6 <secure_socket_attach_initiate+0x8a>
   26466:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2646a:	b122      	cbz	r2, 26476 <secure_socket_attach_initiate+0x3a>
   2646c:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   26470:	6800      	ldr	r0, [r0, #0]
   26472:	f00f f888 	bl	35586 <memcpy>
   26476:	2224      	movs	r2, #36	; 0x24
   26478:	4916      	ldr	r1, [pc, #88]	; (264d4 <secure_socket_attach_initiate+0x98>)
   2647a:	f105 0014 	add.w	r0, r5, #20
   2647e:	fb02 1107 	mla	r1, r2, r7, r1
   26482:	f00f f880 	bl	35586 <memcpy>
   26486:	6821      	ldr	r1, [r4, #0]
   26488:	68ab      	ldr	r3, [r5, #8]
   2648a:	0c09      	lsrs	r1, r1, #16
   2648c:	0409      	lsls	r1, r1, #16
   2648e:	3324      	adds	r3, #36	; 0x24
   26490:	f041 010a 	orr.w	r1, r1, #10
   26494:	60ab      	str	r3, [r5, #8]
   26496:	f247 0281 	movw	r2, #28801	; 0x7081
   2649a:	6021      	str	r1, [r4, #0]
   2649c:	4633      	mov	r3, r6
   2649e:	4629      	mov	r1, r5
   264a0:	4620      	mov	r0, r4
   264a2:	f00d feec 	bl	3427e <ip_interface_request_send>
   264a6:	b958      	cbnz	r0, 264c0 <secure_socket_attach_initiate+0x84>
   264a8:	6823      	ldr	r3, [r4, #0]
   264aa:	00db      	lsls	r3, r3, #3
   264ac:	d40d      	bmi.n	264ca <secure_socket_attach_initiate+0x8e>
   264ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   264b2:	210b      	movs	r1, #11
   264b4:	4638      	mov	r0, r7
   264b6:	ab01      	add	r3, sp, #4
   264b8:	f00d fef4 	bl	342a4 <ip_interface_wait>
   264bc:	b100      	cbz	r0, 264c0 <secure_socket_attach_initiate+0x84>
   264be:	6026      	str	r6, [r4, #0]
   264c0:	b003      	add	sp, #12
   264c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   264c6:	200c      	movs	r0, #12
   264c8:	e7fa      	b.n	264c0 <secure_socket_attach_initiate+0x84>
   264ca:	2073      	movs	r0, #115	; 0x73
   264cc:	e7f8      	b.n	264c0 <secure_socket_attach_initiate+0x84>
   264ce:	bf00      	nop
   264d0:	20016ae0 	.word	0x20016ae0
   264d4:	2001e502 	.word	0x2001e502

000264d8 <tls_interface_init>:
   264d8:	2201      	movs	r2, #1
   264da:	4b02      	ldr	r3, [pc, #8]	; (264e4 <tls_interface_init+0xc>)
   264dc:	2000      	movs	r0, #0
   264de:	701a      	strb	r2, [r3, #0]
   264e0:	4770      	bx	lr
   264e2:	bf00      	nop
   264e4:	2001e501 	.word	0x2001e501

000264e8 <tls_interface_open>:
   264e8:	b538      	push	{r3, r4, r5, lr}
   264ea:	4b1e      	ldr	r3, [pc, #120]	; (26564 <tls_interface_open+0x7c>)
   264ec:	4615      	mov	r5, r2
   264ee:	781b      	ldrb	r3, [r3, #0]
   264f0:	b92b      	cbnz	r3, 264fe <tls_interface_open+0x16>
   264f2:	2070      	movs	r0, #112	; 0x70
   264f4:	f7f9 f9bc 	bl	1f870 <nrf_modem_os_errno_set>
   264f8:	f04f 34ff 	mov.w	r4, #4294967295
   264fc:	e02b      	b.n	26556 <tls_interface_open+0x6e>
   264fe:	1e4b      	subs	r3, r1, #1
   26500:	2b01      	cmp	r3, #1
   26502:	d809      	bhi.n	26518 <tls_interface_open+0x30>
   26504:	b952      	cbnz	r2, 2651c <tls_interface_open+0x34>
   26506:	2901      	cmp	r1, #1
   26508:	bf0b      	itete	eq
   2650a:	2201      	moveq	r2, #1
   2650c:	2202      	movne	r2, #2
   2650e:	f44f 7582 	moveq.w	r5, #260	; 0x104
   26512:	f44f 7587 	movne.w	r5, #270	; 0x10e
   26516:	e007      	b.n	26528 <tls_interface_open+0x40>
   26518:	2029      	movs	r0, #41	; 0x29
   2651a:	e7eb      	b.n	264f4 <tls_interface_open+0xc>
   2651c:	2901      	cmp	r1, #1
   2651e:	d11c      	bne.n	2655a <tls_interface_open+0x72>
   26520:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   26524:	d1f8      	bne.n	26518 <tls_interface_open+0x30>
   26526:	460a      	mov	r2, r1
   26528:	f7fe ff38 	bl	2539c <ip_interface_open>
   2652c:	1e04      	subs	r4, r0, #0
   2652e:	dbe3      	blt.n	264f8 <tls_interface_open+0x10>
   26530:	2224      	movs	r2, #36	; 0x24
   26532:	480d      	ldr	r0, [pc, #52]	; (26568 <tls_interface_open+0x80>)
   26534:	490d      	ldr	r1, [pc, #52]	; (2656c <tls_interface_open+0x84>)
   26536:	fb02 0004 	mla	r0, r2, r4, r0
   2653a:	f00f f824 	bl	35586 <memcpy>
   2653e:	4620      	mov	r0, r4
   26540:	f7fe fe38 	bl	251b4 <interface_socket_from_handle_get>
   26544:	6803      	ldr	r3, [r0, #0]
   26546:	6145      	str	r5, [r0, #20]
   26548:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2654c:	6003      	str	r3, [r0, #0]
   2654e:	6803      	ldr	r3, [r0, #0]
   26550:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   26554:	6003      	str	r3, [r0, #0]
   26556:	4620      	mov	r0, r4
   26558:	bd38      	pop	{r3, r4, r5, pc}
   2655a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2655e:	d1db      	bne.n	26518 <tls_interface_open+0x30>
   26560:	2202      	movs	r2, #2
   26562:	e7e1      	b.n	26528 <tls_interface_open+0x40>
   26564:	2001e501 	.word	0x2001e501
   26568:	2001e502 	.word	0x2001e502
   2656c:	0003de63 	.word	0x0003de63

00026570 <tls_interface_sendto>:
   26570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26574:	b087      	sub	sp, #28
   26576:	4607      	mov	r7, r0
   26578:	4698      	mov	r8, r3
   2657a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   2657e:	f7fe fe19 	bl	251b4 <interface_socket_from_handle_get>
   26582:	4606      	mov	r6, r0
   26584:	2800      	cmp	r0, #0
   26586:	d068      	beq.n	2665a <tls_interface_sendto+0xea>
   26588:	2500      	movs	r5, #0
   2658a:	f04f 0a24 	mov.w	sl, #36	; 0x24
   2658e:	f018 0f02 	tst.w	r8, #2
   26592:	bf18      	it	ne
   26594:	2300      	movne	r3, #0
   26596:	f04f 3bff 	mov.w	fp, #4294967295
   2659a:	462c      	mov	r4, r5
   2659c:	bf08      	it	eq
   2659e:	6803      	ldreq	r3, [r0, #0]
   265a0:	fb0a fa07 	mul.w	sl, sl, r7
   265a4:	bf04      	itt	eq
   265a6:	f083 5380 	eoreq.w	r3, r3, #268435456	; 0x10000000
   265aa:	f3c3 7300 	ubfxeq	r3, r3, #28, #1
   265ae:	9303      	str	r3, [sp, #12]
   265b0:	9b05      	ldr	r3, [sp, #20]
   265b2:	6831      	ldr	r1, [r6, #0]
   265b4:	eba3 0905 	sub.w	r9, r3, r5
   265b8:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
   265bc:	b289      	uxth	r1, r1
   265be:	bfa8      	it	ge
   265c0:	f44f 6900 	movge.w	r9, #2048	; 0x800
   265c4:	290c      	cmp	r1, #12
   265c6:	d110      	bne.n	265ea <tls_interface_sendto+0x7a>
   265c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   265ca:	9904      	ldr	r1, [sp, #16]
   265cc:	9301      	str	r3, [sp, #4]
   265ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   265d0:	464a      	mov	r2, r9
   265d2:	9300      	str	r3, [sp, #0]
   265d4:	4638      	mov	r0, r7
   265d6:	4643      	mov	r3, r8
   265d8:	4429      	add	r1, r5
   265da:	f7fe ffa5 	bl	25528 <ip_interface_sendto>
   265de:	f1b0 0b00 	subs.w	fp, r0, #0
   265e2:	da30      	bge.n	26646 <tls_interface_sendto+0xd6>
   265e4:	f04f 35ff 	mov.w	r5, #4294967295
   265e8:	e033      	b.n	26652 <tls_interface_sendto+0xe2>
   265ea:	6831      	ldr	r1, [r6, #0]
   265ec:	b289      	uxth	r1, r1
   265ee:	290b      	cmp	r1, #11
   265f0:	d109      	bne.n	26606 <tls_interface_sendto+0x96>
   265f2:	4b23      	ldr	r3, [pc, #140]	; (26680 <tls_interface_sendto+0x110>)
   265f4:	f813 200a 	ldrb.w	r2, [r3, sl]
   265f8:	2a02      	cmp	r2, #2
   265fa:	d030      	beq.n	2665e <tls_interface_sendto+0xee>
   265fc:	6932      	ldr	r2, [r6, #16]
   265fe:	2a01      	cmp	r2, #1
   26600:	d131      	bne.n	26666 <tls_interface_sendto+0xf6>
   26602:	242a      	movs	r4, #42	; 0x2a
   26604:	e038      	b.n	26678 <tls_interface_sendto+0x108>
   26606:	4630      	mov	r0, r6
   26608:	f00e f8b1 	bl	3476e <attach_trigger_condition_verify>
   2660c:	b348      	cbz	r0, 26662 <tls_interface_sendto+0xf2>
   2660e:	4b1c      	ldr	r3, [pc, #112]	; (26680 <tls_interface_sendto+0x110>)
   26610:	f813 100a 	ldrb.w	r1, [r3, sl]
   26614:	2902      	cmp	r1, #2
   26616:	d12a      	bne.n	2666e <tls_interface_sendto+0xfe>
   26618:	4631      	mov	r1, r6
   2661a:	4638      	mov	r0, r7
   2661c:	f00e f8be 	bl	3479c <secure_client_socket>
   26620:	4604      	mov	r4, r0
   26622:	b958      	cbnz	r0, 2663c <tls_interface_sendto+0xcc>
   26624:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26626:	9904      	ldr	r1, [sp, #16]
   26628:	9301      	str	r3, [sp, #4]
   2662a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2662c:	464a      	mov	r2, r9
   2662e:	9300      	str	r3, [sp, #0]
   26630:	4638      	mov	r0, r7
   26632:	4643      	mov	r3, r8
   26634:	4429      	add	r1, r5
   26636:	f7fe ff77 	bl	25528 <ip_interface_sendto>
   2663a:	4683      	mov	fp, r0
   2663c:	f1bb 0f00 	cmp.w	fp, #0
   26640:	db18      	blt.n	26674 <tls_interface_sendto+0x104>
   26642:	2c00      	cmp	r4, #0
   26644:	dc18      	bgt.n	26678 <tls_interface_sendto+0x108>
   26646:	9b03      	ldr	r3, [sp, #12]
   26648:	445d      	add	r5, fp
   2664a:	b113      	cbz	r3, 26652 <tls_interface_sendto+0xe2>
   2664c:	9b05      	ldr	r3, [sp, #20]
   2664e:	42ab      	cmp	r3, r5
   26650:	dcae      	bgt.n	265b0 <tls_interface_sendto+0x40>
   26652:	4628      	mov	r0, r5
   26654:	b007      	add	sp, #28
   26656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2665a:	2409      	movs	r4, #9
   2665c:	e00c      	b.n	26678 <tls_interface_sendto+0x108>
   2665e:	2423      	movs	r4, #35	; 0x23
   26660:	e00a      	b.n	26678 <tls_interface_sendto+0x108>
   26662:	2439      	movs	r4, #57	; 0x39
   26664:	e008      	b.n	26678 <tls_interface_sendto+0x108>
   26666:	f1bb 3fff 	cmp.w	fp, #4294967295
   2666a:	d1ec      	bne.n	26646 <tls_interface_sendto+0xd6>
   2666c:	e7ba      	b.n	265e4 <tls_interface_sendto+0x74>
   2666e:	f1bb 0f00 	cmp.w	fp, #0
   26672:	dae8      	bge.n	26646 <tls_interface_sendto+0xd6>
   26674:	2c00      	cmp	r4, #0
   26676:	ddb5      	ble.n	265e4 <tls_interface_sendto+0x74>
   26678:	4620      	mov	r0, r4
   2667a:	f7f9 f8f9 	bl	1f870 <nrf_modem_os_errno_set>
   2667e:	e7b1      	b.n	265e4 <tls_interface_sendto+0x74>
   26680:	2001e502 	.word	0x2001e502

00026684 <tls_interface_recvfrom>:
   26684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26688:	460d      	mov	r5, r1
   2668a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2668e:	4604      	mov	r4, r0
   26690:	4616      	mov	r6, r2
   26692:	461f      	mov	r7, r3
   26694:	f7fe fd8e 	bl	251b4 <interface_socket_from_handle_get>
   26698:	4601      	mov	r1, r0
   2669a:	b320      	cbz	r0, 266e6 <tls_interface_recvfrom+0x62>
   2669c:	6803      	ldr	r3, [r0, #0]
   2669e:	b29b      	uxth	r3, r3
   266a0:	2b0c      	cmp	r3, #12
   266a2:	d003      	beq.n	266ac <tls_interface_recvfrom+0x28>
   266a4:	6803      	ldr	r3, [r0, #0]
   266a6:	b29b      	uxth	r3, r3
   266a8:	2b0d      	cmp	r3, #13
   266aa:	d109      	bne.n	266c0 <tls_interface_recvfrom+0x3c>
   266ac:	463b      	mov	r3, r7
   266ae:	4632      	mov	r2, r6
   266b0:	4629      	mov	r1, r5
   266b2:	4620      	mov	r0, r4
   266b4:	e9cd 8908 	strd	r8, r9, [sp, #32]
   266b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   266bc:	f00d be02 	b.w	342c4 <ip_interface_recvfrom>
   266c0:	f00e f855 	bl	3476e <attach_trigger_condition_verify>
   266c4:	b198      	cbz	r0, 266ee <tls_interface_recvfrom+0x6a>
   266c6:	2324      	movs	r3, #36	; 0x24
   266c8:	4363      	muls	r3, r4
   266ca:	4a0a      	ldr	r2, [pc, #40]	; (266f4 <tls_interface_recvfrom+0x70>)
   266cc:	5cd3      	ldrb	r3, [r2, r3]
   266ce:	2b02      	cmp	r3, #2
   266d0:	d10d      	bne.n	266ee <tls_interface_recvfrom+0x6a>
   266d2:	4620      	mov	r0, r4
   266d4:	f00e f862 	bl	3479c <secure_client_socket>
   266d8:	2800      	cmp	r0, #0
   266da:	d0e7      	beq.n	266ac <tls_interface_recvfrom+0x28>
   266dc:	dc04      	bgt.n	266e8 <tls_interface_recvfrom+0x64>
   266de:	f04f 30ff 	mov.w	r0, #4294967295
   266e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   266e6:	2009      	movs	r0, #9
   266e8:	f7f9 f8c2 	bl	1f870 <nrf_modem_os_errno_set>
   266ec:	e7f7      	b.n	266de <tls_interface_recvfrom+0x5a>
   266ee:	2023      	movs	r0, #35	; 0x23
   266f0:	e7fa      	b.n	266e8 <tls_interface_recvfrom+0x64>
   266f2:	bf00      	nop
   266f4:	2001e502 	.word	0x2001e502

000266f8 <tls_interface_bind>:
   266f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   266fa:	4604      	mov	r4, r0
   266fc:	460e      	mov	r6, r1
   266fe:	4617      	mov	r7, r2
   26700:	f7fe fd58 	bl	251b4 <interface_socket_from_handle_get>
   26704:	4605      	mov	r5, r0
   26706:	b1d8      	cbz	r0, 26740 <tls_interface_bind+0x48>
   26708:	6803      	ldr	r3, [r0, #0]
   2670a:	b29b      	uxth	r3, r3
   2670c:	2b02      	cmp	r3, #2
   2670e:	d119      	bne.n	26744 <tls_interface_bind+0x4c>
   26710:	463a      	mov	r2, r7
   26712:	4631      	mov	r1, r6
   26714:	4620      	mov	r0, r4
   26716:	f7ff f8a7 	bl	25868 <ip_interface_bind>
   2671a:	b950      	cbnz	r0, 26732 <tls_interface_bind+0x3a>
   2671c:	2324      	movs	r3, #36	; 0x24
   2671e:	4363      	muls	r3, r4
   26720:	4a09      	ldr	r2, [pc, #36]	; (26748 <tls_interface_bind+0x50>)
   26722:	5cd3      	ldrb	r3, [r2, r3]
   26724:	2b01      	cmp	r3, #1
   26726:	d10a      	bne.n	2673e <tls_interface_bind+0x46>
   26728:	2204      	movs	r2, #4
   2672a:	4629      	mov	r1, r5
   2672c:	4620      	mov	r0, r4
   2672e:	f7ff fe85 	bl	2643c <secure_socket_attach_initiate>
   26732:	2800      	cmp	r0, #0
   26734:	dd03      	ble.n	2673e <tls_interface_bind+0x46>
   26736:	f7f9 f89b 	bl	1f870 <nrf_modem_os_errno_set>
   2673a:	f04f 30ff 	mov.w	r0, #4294967295
   2673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26740:	2009      	movs	r0, #9
   26742:	e7f8      	b.n	26736 <tls_interface_bind+0x3e>
   26744:	202d      	movs	r0, #45	; 0x2d
   26746:	e7f6      	b.n	26736 <tls_interface_bind+0x3e>
   26748:	2001e502 	.word	0x2001e502

0002674c <tls_interface_connect>:
   2674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2674e:	4605      	mov	r5, r0
   26750:	460e      	mov	r6, r1
   26752:	4617      	mov	r7, r2
   26754:	f7fe fd2e 	bl	251b4 <interface_socket_from_handle_get>
   26758:	4604      	mov	r4, r0
   2675a:	b1f0      	cbz	r0, 2679a <tls_interface_connect+0x4e>
   2675c:	2324      	movs	r3, #36	; 0x24
   2675e:	436b      	muls	r3, r5
   26760:	4a10      	ldr	r2, [pc, #64]	; (267a4 <tls_interface_connect+0x58>)
   26762:	5cd3      	ldrb	r3, [r2, r3]
   26764:	2b02      	cmp	r3, #2
   26766:	d11a      	bne.n	2679e <tls_interface_connect+0x52>
   26768:	6803      	ldr	r3, [r0, #0]
   2676a:	b29b      	uxth	r3, r3
   2676c:	2b02      	cmp	r3, #2
   2676e:	d003      	beq.n	26778 <tls_interface_connect+0x2c>
   26770:	6803      	ldr	r3, [r0, #0]
   26772:	b29b      	uxth	r3, r3
   26774:	2b04      	cmp	r3, #4
   26776:	d112      	bne.n	2679e <tls_interface_connect+0x52>
   26778:	463a      	mov	r2, r7
   2677a:	4631      	mov	r1, r6
   2677c:	4628      	mov	r0, r5
   2677e:	f00d fe9e 	bl	344be <ip_interface_connect>
   26782:	b918      	cbnz	r0, 2678c <tls_interface_connect+0x40>
   26784:	4621      	mov	r1, r4
   26786:	4628      	mov	r0, r5
   26788:	f00e f808 	bl	3479c <secure_client_socket>
   2678c:	2800      	cmp	r0, #0
   2678e:	dd03      	ble.n	26798 <tls_interface_connect+0x4c>
   26790:	f7f9 f86e 	bl	1f870 <nrf_modem_os_errno_set>
   26794:	f04f 30ff 	mov.w	r0, #4294967295
   26798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2679a:	2009      	movs	r0, #9
   2679c:	e7f8      	b.n	26790 <tls_interface_connect+0x44>
   2679e:	202d      	movs	r0, #45	; 0x2d
   267a0:	e7f6      	b.n	26790 <tls_interface_connect+0x44>
   267a2:	bf00      	nop
   267a4:	2001e502 	.word	0x2001e502

000267a8 <tls_interface_listen>:
   267a8:	b538      	push	{r3, r4, r5, lr}
   267aa:	460d      	mov	r5, r1
   267ac:	4604      	mov	r4, r0
   267ae:	f7fe fd01 	bl	251b4 <interface_socket_from_handle_get>
   267b2:	4601      	mov	r1, r0
   267b4:	2800      	cmp	r0, #0
   267b6:	d033      	beq.n	26820 <tls_interface_listen+0x78>
   267b8:	6803      	ldr	r3, [r0, #0]
   267ba:	00db      	lsls	r3, r3, #3
   267bc:	d432      	bmi.n	26824 <tls_interface_listen+0x7c>
   267be:	6903      	ldr	r3, [r0, #16]
   267c0:	2b01      	cmp	r3, #1
   267c2:	d12f      	bne.n	26824 <tls_interface_listen+0x7c>
   267c4:	6803      	ldr	r3, [r0, #0]
   267c6:	b29b      	uxth	r3, r3
   267c8:	2b04      	cmp	r3, #4
   267ca:	d105      	bne.n	267d8 <tls_interface_listen+0x30>
   267cc:	2324      	movs	r3, #36	; 0x24
   267ce:	4363      	muls	r3, r4
   267d0:	4a15      	ldr	r2, [pc, #84]	; (26828 <tls_interface_listen+0x80>)
   267d2:	5cd3      	ldrb	r3, [r2, r3]
   267d4:	2b02      	cmp	r3, #2
   267d6:	d009      	beq.n	267ec <tls_interface_listen+0x44>
   267d8:	680b      	ldr	r3, [r1, #0]
   267da:	b29b      	uxth	r3, r3
   267dc:	2b0b      	cmp	r3, #11
   267de:	d121      	bne.n	26824 <tls_interface_listen+0x7c>
   267e0:	2324      	movs	r3, #36	; 0x24
   267e2:	4363      	muls	r3, r4
   267e4:	4a10      	ldr	r2, [pc, #64]	; (26828 <tls_interface_listen+0x80>)
   267e6:	5cd3      	ldrb	r3, [r2, r3]
   267e8:	2b01      	cmp	r3, #1
   267ea:	d11b      	bne.n	26824 <tls_interface_listen+0x7c>
   267ec:	2324      	movs	r3, #36	; 0x24
   267ee:	2001      	movs	r0, #1
   267f0:	4363      	muls	r3, r4
   267f2:	4a0d      	ldr	r2, [pc, #52]	; (26828 <tls_interface_listen+0x80>)
   267f4:	54d0      	strb	r0, [r2, r3]
   267f6:	680b      	ldr	r3, [r1, #0]
   267f8:	2b0b      	cmp	r3, #11
   267fa:	d10a      	bne.n	26812 <tls_interface_listen+0x6a>
   267fc:	4629      	mov	r1, r5
   267fe:	4620      	mov	r0, r4
   26800:	f7ff f894 	bl	2592c <ip_interface_listen>
   26804:	2800      	cmp	r0, #0
   26806:	dd03      	ble.n	26810 <tls_interface_listen+0x68>
   26808:	f7f9 f832 	bl	1f870 <nrf_modem_os_errno_set>
   2680c:	f04f 30ff 	mov.w	r0, #4294967295
   26810:	bd38      	pop	{r3, r4, r5, pc}
   26812:	4620      	mov	r0, r4
   26814:	680a      	ldr	r2, [r1, #0]
   26816:	f7ff fe11 	bl	2643c <secure_socket_attach_initiate>
   2681a:	2800      	cmp	r0, #0
   2681c:	d0ee      	beq.n	267fc <tls_interface_listen+0x54>
   2681e:	e7f1      	b.n	26804 <tls_interface_listen+0x5c>
   26820:	2009      	movs	r0, #9
   26822:	e7f1      	b.n	26808 <tls_interface_listen+0x60>
   26824:	202d      	movs	r0, #45	; 0x2d
   26826:	e7ef      	b.n	26808 <tls_interface_listen+0x60>
   26828:	2001e502 	.word	0x2001e502

0002682c <tls_interface_accept>:
   2682c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26830:	4606      	mov	r6, r0
   26832:	460d      	mov	r5, r1
   26834:	4617      	mov	r7, r2
   26836:	4698      	mov	r8, r3
   26838:	f04f 34ff 	mov.w	r4, #4294967295
   2683c:	f7fe fcba 	bl	251b4 <interface_socket_from_handle_get>
   26840:	9401      	str	r4, [sp, #4]
   26842:	2800      	cmp	r0, #0
   26844:	d047      	beq.n	268d6 <tls_interface_accept+0xaa>
   26846:	6803      	ldr	r3, [r0, #0]
   26848:	b29b      	uxth	r3, r3
   2684a:	2b07      	cmp	r3, #7
   2684c:	d143      	bne.n	268d6 <tls_interface_accept+0xaa>
   2684e:	6803      	ldr	r3, [r0, #0]
   26850:	00db      	lsls	r3, r3, #3
   26852:	d506      	bpl.n	26862 <tls_interface_accept+0x36>
   26854:	202d      	movs	r0, #45	; 0x2d
   26856:	f7f9 f80b 	bl	1f870 <nrf_modem_os_errno_set>
   2685a:	4620      	mov	r0, r4
   2685c:	b002      	add	sp, #8
   2685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26862:	4643      	mov	r3, r8
   26864:	463a      	mov	r2, r7
   26866:	4629      	mov	r1, r5
   26868:	4630      	mov	r0, r6
   2686a:	f7ff f8b3 	bl	259d4 <ip_interface_accept>
   2686e:	1e04      	subs	r4, r0, #0
   26870:	db2b      	blt.n	268ca <tls_interface_accept+0x9e>
   26872:	f7fe fc9f 	bl	251b4 <interface_socket_from_handle_get>
   26876:	2224      	movs	r2, #36	; 0x24
   26878:	6803      	ldr	r3, [r0, #0]
   2687a:	fb02 f804 	mul.w	r8, r2, r4
   2687e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   26882:	6003      	str	r3, [r0, #0]
   26884:	6803      	ldr	r3, [r0, #0]
   26886:	4f15      	ldr	r7, [pc, #84]	; (268dc <tls_interface_accept+0xb0>)
   26888:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2688c:	4605      	mov	r5, r0
   2688e:	fb02 7106 	mla	r1, r2, r6, r7
   26892:	6003      	str	r3, [r0, #0]
   26894:	eb07 0008 	add.w	r0, r7, r8
   26898:	f00e fe75 	bl	35586 <memcpy>
   2689c:	2302      	movs	r3, #2
   2689e:	f807 3008 	strb.w	r3, [r7, r8]
   268a2:	682b      	ldr	r3, [r5, #0]
   268a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   268a8:	0c1b      	lsrs	r3, r3, #16
   268aa:	041b      	lsls	r3, r3, #16
   268ac:	f043 030b 	orr.w	r3, r3, #11
   268b0:	602b      	str	r3, [r5, #0]
   268b2:	210c      	movs	r1, #12
   268b4:	4620      	mov	r0, r4
   268b6:	ab01      	add	r3, sp, #4
   268b8:	f00d fcf4 	bl	342a4 <ip_interface_wait>
   268bc:	4605      	mov	r5, r0
   268be:	2800      	cmp	r0, #0
   268c0:	d0cb      	beq.n	2685a <tls_interface_accept+0x2e>
   268c2:	4620      	mov	r0, r4
   268c4:	f7fe fde6 	bl	25494 <ip_interface_close>
   268c8:	462c      	mov	r4, r5
   268ca:	4620      	mov	r0, r4
   268cc:	f7f8 ffd0 	bl	1f870 <nrf_modem_os_errno_set>
   268d0:	f04f 34ff 	mov.w	r4, #4294967295
   268d4:	e7c1      	b.n	2685a <tls_interface_accept+0x2e>
   268d6:	2409      	movs	r4, #9
   268d8:	e7f7      	b.n	268ca <tls_interface_accept+0x9e>
   268da:	bf00      	nop
   268dc:	2001e502 	.word	0x2001e502

000268e0 <tls_interface_setopt>:
   268e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   268e2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   268e6:	4606      	mov	r6, r0
   268e8:	4615      	mov	r5, r2
   268ea:	461f      	mov	r7, r3
   268ec:	9c08      	ldr	r4, [sp, #32]
   268ee:	d004      	beq.n	268fa <tls_interface_setopt+0x1a>
   268f0:	b003      	add	sp, #12
   268f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   268f6:	f7ff b955 	b.w	25ba4 <ip_interface_setopt>
   268fa:	b92b      	cbnz	r3, 26908 <tls_interface_setopt+0x28>
   268fc:	200e      	movs	r0, #14
   268fe:	f7f8 ffb7 	bl	1f870 <nrf_modem_os_errno_set>
   26902:	f04f 30ff 	mov.w	r0, #4294967295
   26906:	e024      	b.n	26952 <tls_interface_setopt+0x72>
   26908:	f7fe fc54 	bl	251b4 <interface_socket_from_handle_get>
   2690c:	4601      	mov	r1, r0
   2690e:	2800      	cmp	r0, #0
   26910:	f000 8082 	beq.w	26a18 <tls_interface_setopt+0x138>
   26914:	6803      	ldr	r3, [r0, #0]
   26916:	b29b      	uxth	r3, r3
   26918:	2b02      	cmp	r3, #2
   2691a:	d007      	beq.n	2692c <tls_interface_setopt+0x4c>
   2691c:	6803      	ldr	r3, [r0, #0]
   2691e:	b29b      	uxth	r3, r3
   26920:	2b04      	cmp	r3, #4
   26922:	d003      	beq.n	2692c <tls_interface_setopt+0x4c>
   26924:	6803      	ldr	r3, [r0, #0]
   26926:	b29b      	uxth	r3, r3
   26928:	2b05      	cmp	r3, #5
   2692a:	d175      	bne.n	26a18 <tls_interface_setopt+0x138>
   2692c:	1e6a      	subs	r2, r5, #1
   2692e:	2a08      	cmp	r2, #8
   26930:	d874      	bhi.n	26a1c <tls_interface_setopt+0x13c>
   26932:	e8df f002 	tbb	[pc, r2]
   26936:	2405      	.short	0x2405
   26938:	53413618 	.word	0x53413618
   2693c:	5f73      	.short	0x5f73
   2693e:	6c          	.byte	0x6c
   2693f:	00          	.byte	0x00
   26940:	2c04      	cmp	r4, #4
   26942:	d16f      	bne.n	26a24 <tls_interface_setopt+0x144>
   26944:	6838      	ldr	r0, [r7, #0]
   26946:	b930      	cbnz	r0, 26956 <tls_interface_setopt+0x76>
   26948:	2324      	movs	r3, #36	; 0x24
   2694a:	2202      	movs	r2, #2
   2694c:	435e      	muls	r6, r3
   2694e:	4b36      	ldr	r3, [pc, #216]	; (26a28 <tls_interface_setopt+0x148>)
   26950:	559a      	strb	r2, [r3, r6]
   26952:	b003      	add	sp, #12
   26954:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26956:	2801      	cmp	r0, #1
   26958:	d164      	bne.n	26a24 <tls_interface_setopt+0x144>
   2695a:	2324      	movs	r3, #36	; 0x24
   2695c:	435e      	muls	r6, r3
   2695e:	4b32      	ldr	r3, [pc, #200]	; (26a28 <tls_interface_setopt+0x148>)
   26960:	5598      	strb	r0, [r3, r6]
   26962:	2000      	movs	r0, #0
   26964:	e7f5      	b.n	26952 <tls_interface_setopt+0x72>
   26966:	2c01      	cmp	r4, #1
   26968:	d15c      	bne.n	26a24 <tls_interface_setopt+0x144>
   2696a:	2224      	movs	r2, #36	; 0x24
   2696c:	783b      	ldrb	r3, [r7, #0]
   2696e:	482e      	ldr	r0, [pc, #184]	; (26a28 <tls_interface_setopt+0x148>)
   26970:	3b00      	subs	r3, #0
   26972:	bf18      	it	ne
   26974:	2301      	movne	r3, #1
   26976:	fb02 0606 	mla	r6, r2, r6, r0
   2697a:	7073      	strb	r3, [r6, #1]
   2697c:	e7f1      	b.n	26962 <tls_interface_setopt+0x82>
   2697e:	2c03      	cmp	r4, #3
   26980:	d950      	bls.n	26a24 <tls_interface_setopt+0x144>
   26982:	f014 0503 	ands.w	r5, r4, #3
   26986:	d14d      	bne.n	26a24 <tls_interface_setopt+0x144>
   26988:	2324      	movs	r3, #36	; 0x24
   2698a:	435e      	muls	r6, r3
   2698c:	4826      	ldr	r0, [pc, #152]	; (26a28 <tls_interface_setopt+0x148>)
   2698e:	08a2      	lsrs	r2, r4, #2
   26990:	1983      	adds	r3, r0, r6
   26992:	70da      	strb	r2, [r3, #3]
   26994:	4639      	mov	r1, r7
   26996:	4622      	mov	r2, r4
   26998:	3604      	adds	r6, #4
   2699a:	4430      	add	r0, r6
   2699c:	f00e fdf3 	bl	35586 <memcpy>
   269a0:	e7df      	b.n	26962 <tls_interface_setopt+0x82>
   269a2:	2c04      	cmp	r4, #4
   269a4:	d13e      	bne.n	26a24 <tls_interface_setopt+0x144>
   269a6:	683b      	ldr	r3, [r7, #0]
   269a8:	2b02      	cmp	r3, #2
   269aa:	d83b      	bhi.n	26a24 <tls_interface_setopt+0x144>
   269ac:	2224      	movs	r2, #36	; 0x24
   269ae:	481e      	ldr	r0, [pc, #120]	; (26a28 <tls_interface_setopt+0x148>)
   269b0:	fb02 0606 	mla	r6, r2, r6, r0
   269b4:	70b3      	strb	r3, [r6, #2]
   269b6:	e7d4      	b.n	26962 <tls_interface_setopt+0x82>
   269b8:	4630      	mov	r0, r6
   269ba:	f7ff fd2d 	bl	26418 <hostname_free>
   269be:	2c00      	cmp	r4, #0
   269c0:	d0cf      	beq.n	26962 <tls_interface_setopt+0x82>
   269c2:	4620      	mov	r0, r4
   269c4:	f7f9 f906 	bl	1fbd4 <nrf_modem_os_alloc>
   269c8:	4b18      	ldr	r3, [pc, #96]	; (26a2c <tls_interface_setopt+0x14c>)
   269ca:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   269ce:	b338      	cbz	r0, 26a20 <tls_interface_setopt+0x140>
   269d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   269d4:	4622      	mov	r2, r4
   269d6:	4639      	mov	r1, r7
   269d8:	605c      	str	r4, [r3, #4]
   269da:	e7df      	b.n	2699c <tls_interface_setopt+0xbc>
   269dc:	f247 0301 	movw	r3, #28673	; 0x7001
   269e0:	e9cd 7400 	strd	r7, r4, [sp]
   269e4:	f44f 7280 	mov.w	r2, #256	; 0x100
   269e8:	4630      	mov	r0, r6
   269ea:	f00d fdfd 	bl	345e8 <ip_interface_socketoption_send>
   269ee:	2800      	cmp	r0, #0
   269f0:	d0b7      	beq.n	26962 <tls_interface_setopt+0x82>
   269f2:	e784      	b.n	268fe <tls_interface_setopt+0x1e>
   269f4:	2c04      	cmp	r4, #4
   269f6:	d115      	bne.n	26a24 <tls_interface_setopt+0x144>
   269f8:	6838      	ldr	r0, [r7, #0]
   269fa:	f7ff fcf1 	bl	263e0 <secure_socket_dtls_timeout_check>
   269fe:	2800      	cmp	r0, #0
   26a00:	f47f af7d 	bne.w	268fe <tls_interface_setopt+0x1e>
   26a04:	f247 0302 	movw	r3, #28674	; 0x7002
   26a08:	e9cd 7400 	strd	r7, r4, [sp]
   26a0c:	e7ea      	b.n	269e4 <tls_interface_setopt+0x104>
   26a0e:	f247 0303 	movw	r3, #28675	; 0x7003
   26a12:	e9cd 7400 	strd	r7, r4, [sp]
   26a16:	e7e5      	b.n	269e4 <tls_interface_setopt+0x104>
   26a18:	2009      	movs	r0, #9
   26a1a:	e770      	b.n	268fe <tls_interface_setopt+0x1e>
   26a1c:	202a      	movs	r0, #42	; 0x2a
   26a1e:	e76e      	b.n	268fe <tls_interface_setopt+0x1e>
   26a20:	200c      	movs	r0, #12
   26a22:	e76c      	b.n	268fe <tls_interface_setopt+0x1e>
   26a24:	2016      	movs	r0, #22
   26a26:	e76a      	b.n	268fe <tls_interface_setopt+0x1e>
   26a28:	2001e502 	.word	0x2001e502
   26a2c:	20016ae0 	.word	0x20016ae0

00026a30 <tls_interface_getopt>:
   26a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26a32:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   26a36:	4606      	mov	r6, r0
   26a38:	4617      	mov	r7, r2
   26a3a:	461d      	mov	r5, r3
   26a3c:	9c08      	ldr	r4, [sp, #32]
   26a3e:	d004      	beq.n	26a4a <tls_interface_getopt+0x1a>
   26a40:	b003      	add	sp, #12
   26a42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   26a46:	f00d be37 	b.w	346b8 <ip_interface_getopt>
   26a4a:	2b00      	cmp	r3, #0
   26a4c:	d062      	beq.n	26b14 <tls_interface_getopt+0xe4>
   26a4e:	2c00      	cmp	r4, #0
   26a50:	d060      	beq.n	26b14 <tls_interface_getopt+0xe4>
   26a52:	f7fe fbaf 	bl	251b4 <interface_socket_from_handle_get>
   26a56:	4601      	mov	r1, r0
   26a58:	2800      	cmp	r0, #0
   26a5a:	d05d      	beq.n	26b18 <tls_interface_getopt+0xe8>
   26a5c:	1e7a      	subs	r2, r7, #1
   26a5e:	2a07      	cmp	r2, #7
   26a60:	d85c      	bhi.n	26b1c <tls_interface_getopt+0xec>
   26a62:	e8df f002 	tbb	[pc, r2]
   26a66:	1c04      	.short	0x1c04
   26a68:	405b3710 	.word	0x405b3710
   26a6c:	4a5b      	.short	0x4a5b
   26a6e:	6823      	ldr	r3, [r4, #0]
   26a70:	2b04      	cmp	r3, #4
   26a72:	d155      	bne.n	26b20 <tls_interface_getopt+0xf0>
   26a74:	2124      	movs	r1, #36	; 0x24
   26a76:	434e      	muls	r6, r1
   26a78:	4b2a      	ldr	r3, [pc, #168]	; (26b24 <tls_interface_getopt+0xf4>)
   26a7a:	5d9b      	ldrb	r3, [r3, r6]
   26a7c:	1e59      	subs	r1, r3, #1
   26a7e:	424b      	negs	r3, r1
   26a80:	414b      	adcs	r3, r1
   26a82:	602b      	str	r3, [r5, #0]
   26a84:	e008      	b.n	26a98 <tls_interface_getopt+0x68>
   26a86:	6823      	ldr	r3, [r4, #0]
   26a88:	2b01      	cmp	r3, #1
   26a8a:	d149      	bne.n	26b20 <tls_interface_getopt+0xf0>
   26a8c:	2024      	movs	r0, #36	; 0x24
   26a8e:	4925      	ldr	r1, [pc, #148]	; (26b24 <tls_interface_getopt+0xf4>)
   26a90:	fb00 1606 	mla	r6, r0, r6, r1
   26a94:	7873      	ldrb	r3, [r6, #1]
   26a96:	702b      	strb	r3, [r5, #0]
   26a98:	2000      	movs	r0, #0
   26a9a:	b003      	add	sp, #12
   26a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26a9e:	2224      	movs	r2, #36	; 0x24
   26aa0:	4920      	ldr	r1, [pc, #128]	; (26b24 <tls_interface_getopt+0xf4>)
   26aa2:	6823      	ldr	r3, [r4, #0]
   26aa4:	fb02 1206 	mla	r2, r2, r6, r1
   26aa8:	78d0      	ldrb	r0, [r2, #3]
   26aaa:	079a      	lsls	r2, r3, #30
   26aac:	bf14      	ite	ne
   26aae:	2300      	movne	r3, #0
   26ab0:	089b      	lsreq	r3, r3, #2
   26ab2:	4283      	cmp	r3, r0
   26ab4:	bf28      	it	cs
   26ab6:	4603      	movcs	r3, r0
   26ab8:	009a      	lsls	r2, r3, #2
   26aba:	b143      	cbz	r3, 26ace <tls_interface_getopt+0x9e>
   26abc:	2024      	movs	r0, #36	; 0x24
   26abe:	fb00 1106 	mla	r1, r0, r6, r1
   26ac2:	6022      	str	r2, [r4, #0]
   26ac4:	4628      	mov	r0, r5
   26ac6:	3104      	adds	r1, #4
   26ac8:	f00e fd5d 	bl	35586 <memcpy>
   26acc:	e7e4      	b.n	26a98 <tls_interface_getopt+0x68>
   26ace:	bb38      	cbnz	r0, 26b20 <tls_interface_getopt+0xf0>
   26ad0:	6020      	str	r0, [r4, #0]
   26ad2:	e7e2      	b.n	26a9a <tls_interface_getopt+0x6a>
   26ad4:	6823      	ldr	r3, [r4, #0]
   26ad6:	2b04      	cmp	r3, #4
   26ad8:	d122      	bne.n	26b20 <tls_interface_getopt+0xf0>
   26ada:	2024      	movs	r0, #36	; 0x24
   26adc:	4911      	ldr	r1, [pc, #68]	; (26b24 <tls_interface_getopt+0xf4>)
   26ade:	fb00 1606 	mla	r6, r0, r6, r1
   26ae2:	78b3      	ldrb	r3, [r6, #2]
   26ae4:	e7cd      	b.n	26a82 <tls_interface_getopt+0x52>
   26ae6:	f247 0301 	movw	r3, #28673	; 0x7001
   26aea:	e9cd 5400 	strd	r5, r4, [sp]
   26aee:	f44f 7280 	mov.w	r2, #256	; 0x100
   26af2:	4630      	mov	r0, r6
   26af4:	f7fe fe38 	bl	25768 <ip_interface_socketoption_get>
   26af8:	e7cf      	b.n	26a9a <tls_interface_getopt+0x6a>
   26afa:	6823      	ldr	r3, [r4, #0]
   26afc:	2b04      	cmp	r3, #4
   26afe:	d10f      	bne.n	26b20 <tls_interface_getopt+0xf0>
   26b00:	6828      	ldr	r0, [r5, #0]
   26b02:	f7ff fc6d 	bl	263e0 <secure_socket_dtls_timeout_check>
   26b06:	2800      	cmp	r0, #0
   26b08:	d1c7      	bne.n	26a9a <tls_interface_getopt+0x6a>
   26b0a:	f247 0302 	movw	r3, #28674	; 0x7002
   26b0e:	e9cd 5400 	strd	r5, r4, [sp]
   26b12:	e7ec      	b.n	26aee <tls_interface_getopt+0xbe>
   26b14:	200e      	movs	r0, #14
   26b16:	e7c0      	b.n	26a9a <tls_interface_getopt+0x6a>
   26b18:	2009      	movs	r0, #9
   26b1a:	e7be      	b.n	26a9a <tls_interface_getopt+0x6a>
   26b1c:	202a      	movs	r0, #42	; 0x2a
   26b1e:	e7bc      	b.n	26a9a <tls_interface_getopt+0x6a>
   26b20:	2016      	movs	r0, #22
   26b22:	e7ba      	b.n	26a9a <tls_interface_getopt+0x6a>
   26b24:	2001e502 	.word	0x2001e502

00026b28 <tls_rpc_ip_event_handler>:
   26b28:	b570      	push	{r4, r5, r6, lr}
   26b2a:	460c      	mov	r4, r1
   26b2c:	f248 0181 	movw	r1, #32897	; 0x8081
   26b30:	428b      	cmp	r3, r1
   26b32:	4606      	mov	r6, r0
   26b34:	d035      	beq.n	26ba2 <tls_rpc_ip_event_handler+0x7a>
   26b36:	f249 0182 	movw	r1, #36994	; 0x9082
   26b3a:	428b      	cmp	r3, r1
   26b3c:	d040      	beq.n	26bc0 <tls_rpc_ip_event_handler+0x98>
   26b3e:	f248 0102 	movw	r1, #32770	; 0x8002
   26b42:	428b      	cmp	r3, r1
   26b44:	d161      	bne.n	26c0a <tls_rpc_ip_event_handler+0xe2>
   26b46:	2c00      	cmp	r4, #0
   26b48:	d05f      	beq.n	26c0a <tls_rpc_ip_event_handler+0xe2>
   26b4a:	6963      	ldr	r3, [r4, #20]
   26b4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   26b50:	d002      	beq.n	26b58 <tls_rpc_ip_event_handler+0x30>
   26b52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   26b56:	d158      	bne.n	26c0a <tls_rpc_ip_event_handler+0xe2>
   26b58:	6823      	ldr	r3, [r4, #0]
   26b5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   26b5e:	6023      	str	r3, [r4, #0]
   26b60:	6955      	ldr	r5, [r2, #20]
   26b62:	2d00      	cmp	r5, #0
   26b64:	d14d      	bne.n	26c02 <tls_rpc_ip_event_handler+0xda>
   26b66:	6823      	ldr	r3, [r4, #0]
   26b68:	0c1b      	lsrs	r3, r3, #16
   26b6a:	041b      	lsls	r3, r3, #16
   26b6c:	f043 0305 	orr.w	r3, r3, #5
   26b70:	6023      	str	r3, [r4, #0]
   26b72:	6823      	ldr	r3, [r4, #0]
   26b74:	00db      	lsls	r3, r3, #3
   26b76:	d401      	bmi.n	26b7c <tls_rpc_ip_event_handler+0x54>
   26b78:	2000      	movs	r0, #0
   26b7a:	e020      	b.n	26bbe <tls_rpc_ip_event_handler+0x96>
   26b7c:	2324      	movs	r3, #36	; 0x24
   26b7e:	4373      	muls	r3, r6
   26b80:	4a23      	ldr	r2, [pc, #140]	; (26c10 <tls_rpc_ip_event_handler+0xe8>)
   26b82:	5cd3      	ldrb	r3, [r2, r3]
   26b84:	2b02      	cmp	r3, #2
   26b86:	d1f7      	bne.n	26b78 <tls_rpc_ip_event_handler+0x50>
   26b88:	4621      	mov	r1, r4
   26b8a:	4630      	mov	r0, r6
   26b8c:	f00d fe06 	bl	3479c <secure_client_socket>
   26b90:	2800      	cmp	r0, #0
   26b92:	d0f1      	beq.n	26b78 <tls_rpc_ip_event_handler+0x50>
   26b94:	2873      	cmp	r0, #115	; 0x73
   26b96:	d0ef      	beq.n	26b78 <tls_rpc_ip_event_handler+0x50>
   26b98:	6060      	str	r0, [r4, #4]
   26b9a:	6823      	ldr	r3, [r4, #0]
   26b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   26ba0:	e02d      	b.n	26bfe <tls_rpc_ip_event_handler+0xd6>
   26ba2:	2c00      	cmp	r4, #0
   26ba4:	d0e8      	beq.n	26b78 <tls_rpc_ip_event_handler+0x50>
   26ba6:	6823      	ldr	r3, [r4, #0]
   26ba8:	b29b      	uxth	r3, r3
   26baa:	2b0a      	cmp	r3, #10
   26bac:	d1e4      	bne.n	26b78 <tls_rpc_ip_event_handler+0x50>
   26bae:	6950      	ldr	r0, [r2, #20]
   26bb0:	bb40      	cbnz	r0, 26c04 <tls_rpc_ip_event_handler+0xdc>
   26bb2:	6823      	ldr	r3, [r4, #0]
   26bb4:	0c1b      	lsrs	r3, r3, #16
   26bb6:	041b      	lsls	r3, r3, #16
   26bb8:	f043 030b 	orr.w	r3, r3, #11
   26bbc:	6023      	str	r3, [r4, #0]
   26bbe:	bd70      	pop	{r4, r5, r6, pc}
   26bc0:	2c00      	cmp	r4, #0
   26bc2:	d0d9      	beq.n	26b78 <tls_rpc_ip_event_handler+0x50>
   26bc4:	6823      	ldr	r3, [r4, #0]
   26bc6:	b29b      	uxth	r3, r3
   26bc8:	2b0b      	cmp	r3, #11
   26bca:	d1d5      	bne.n	26b78 <tls_rpc_ip_event_handler+0x50>
   26bcc:	6915      	ldr	r5, [r2, #16]
   26bce:	b9c5      	cbnz	r5, 26c02 <tls_rpc_ip_event_handler+0xda>
   26bd0:	6823      	ldr	r3, [r4, #0]
   26bd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   26bd6:	6023      	str	r3, [r4, #0]
   26bd8:	f7ff fc1e 	bl	26418 <hostname_free>
   26bdc:	6823      	ldr	r3, [r4, #0]
   26bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   26be2:	6023      	str	r3, [r4, #0]
   26be4:	6823      	ldr	r3, [r4, #0]
   26be6:	0c1b      	lsrs	r3, r3, #16
   26be8:	041b      	lsls	r3, r3, #16
   26bea:	f043 030c 	orr.w	r3, r3, #12
   26bee:	6023      	str	r3, [r4, #0]
   26bf0:	6823      	ldr	r3, [r4, #0]
   26bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26bf6:	6023      	str	r3, [r4, #0]
   26bf8:	6823      	ldr	r3, [r4, #0]
   26bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   26bfe:	6023      	str	r3, [r4, #0]
   26c00:	e7ba      	b.n	26b78 <tls_rpc_ip_event_handler+0x50>
   26c02:	4628      	mov	r0, r5
   26c04:	f7fe fb8e 	bl	25324 <rpc_error_to_nrf_errno>
   26c08:	e7c6      	b.n	26b98 <tls_rpc_ip_event_handler+0x70>
   26c0a:	2001      	movs	r0, #1
   26c0c:	e7d7      	b.n	26bbe <tls_rpc_ip_event_handler+0x96>
   26c0e:	bf00      	nop
   26c10:	2001e502 	.word	0x2001e502

00026c14 <at_interface_init>:
   26c14:	2201      	movs	r2, #1
   26c16:	4b02      	ldr	r3, [pc, #8]	; (26c20 <at_interface_init+0xc>)
   26c18:	2000      	movs	r0, #0
   26c1a:	701a      	strb	r2, [r3, #0]
   26c1c:	4770      	bx	lr
   26c1e:	bf00      	nop
   26c20:	2001e646 	.word	0x2001e646

00026c24 <at_interface_open>:
   26c24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26c28:	f04f 0800 	mov.w	r8, #0
   26c2c:	4b19      	ldr	r3, [pc, #100]	; (26c94 <at_interface_open+0x70>)
   26c2e:	4607      	mov	r7, r0
   26c30:	781b      	ldrb	r3, [r3, #0]
   26c32:	460d      	mov	r5, r1
   26c34:	4616      	mov	r6, r2
   26c36:	f8cd 800c 	str.w	r8, [sp, #12]
   26c3a:	b943      	cbnz	r3, 26c4e <at_interface_open+0x2a>
   26c3c:	2070      	movs	r0, #112	; 0x70
   26c3e:	f7f8 fe17 	bl	1f870 <nrf_modem_os_errno_set>
   26c42:	f04f 34ff 	mov.w	r4, #4294967295
   26c46:	4620      	mov	r0, r4
   26c48:	b004      	add	sp, #16
   26c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26c4e:	2902      	cmp	r1, #2
   26c50:	d001      	beq.n	26c56 <at_interface_open+0x32>
   26c52:	2029      	movs	r0, #41	; 0x29
   26c54:	e7f3      	b.n	26c3e <at_interface_open+0x1a>
   26c56:	4a10      	ldr	r2, [pc, #64]	; (26c98 <at_interface_open+0x74>)
   26c58:	a803      	add	r0, sp, #12
   26c5a:	f7fe fa25 	bl	250a8 <interface_socket_allocate>
   26c5e:	9b03      	ldr	r3, [sp, #12]
   26c60:	4604      	mov	r4, r0
   26c62:	2b00      	cmp	r3, #0
   26c64:	d0ef      	beq.n	26c46 <at_interface_open+0x22>
   26c66:	e9c3 7503 	strd	r7, r5, [r3, #12]
   26c6a:	615e      	str	r6, [r3, #20]
   26c6c:	4642      	mov	r2, r8
   26c6e:	9500      	str	r5, [sp, #0]
   26c70:	2305      	movs	r3, #5
   26c72:	4641      	mov	r1, r8
   26c74:	f00d fdf0 	bl	34858 <send_message>
   26c78:	4605      	mov	r5, r0
   26c7a:	b120      	cbz	r0, 26c86 <at_interface_open+0x62>
   26c7c:	4620      	mov	r0, r4
   26c7e:	f7fe fa39 	bl	250f4 <interface_socket_free>
   26c82:	4628      	mov	r0, r5
   26c84:	e7db      	b.n	26c3e <at_interface_open+0x1a>
   26c86:	9a03      	ldr	r2, [sp, #12]
   26c88:	6813      	ldr	r3, [r2, #0]
   26c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26c8e:	6013      	str	r3, [r2, #0]
   26c90:	e7d9      	b.n	26c46 <at_interface_open+0x22>
   26c92:	bf00      	nop
   26c94:	2001e646 	.word	0x2001e646
   26c98:	00034833 	.word	0x00034833

00026c9c <rpc_dfu_message_send>:
   26c9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26c9e:	4605      	mov	r5, r0
   26ca0:	460e      	mov	r6, r1
   26ca2:	4668      	mov	r0, sp
   26ca4:	4611      	mov	r1, r2
   26ca6:	4614      	mov	r4, r2
   26ca8:	f00d f8e0 	bl	33e6c <rpc_dfu_client_request_alloc>
   26cac:	b138      	cbz	r0, 26cbe <rpc_dfu_message_send+0x22>
   26cae:	200c      	movs	r0, #12
   26cb0:	f7f8 fdde 	bl	1f870 <nrf_modem_os_errno_set>
   26cb4:	f04f 34ff 	mov.w	r4, #4294967295
   26cb8:	4620      	mov	r0, r4
   26cba:	b002      	add	sp, #8
   26cbc:	bd70      	pop	{r4, r5, r6, pc}
   26cbe:	b12c      	cbz	r4, 26ccc <rpc_dfu_message_send+0x30>
   26cc0:	9b00      	ldr	r3, [sp, #0]
   26cc2:	4622      	mov	r2, r4
   26cc4:	4631      	mov	r1, r6
   26cc6:	6818      	ldr	r0, [r3, #0]
   26cc8:	f00e fc5d 	bl	35586 <memcpy>
   26ccc:	4a1c      	ldr	r2, [pc, #112]	; (26d40 <rpc_dfu_message_send+0xa4>)
   26cce:	9800      	ldr	r0, [sp, #0]
   26cd0:	8813      	ldrh	r3, [r2, #0]
   26cd2:	2d03      	cmp	r5, #3
   26cd4:	f103 0301 	add.w	r3, r3, #1
   26cd8:	b29b      	uxth	r3, r3
   26cda:	8013      	strh	r3, [r2, #0]
   26cdc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   26ce0:	60c3      	str	r3, [r0, #12]
   26ce2:	f04f 0300 	mov.w	r3, #0
   26ce6:	bf0a      	itet	eq
   26ce8:	4a16      	ldreq	r2, [pc, #88]	; (26d44 <rpc_dfu_message_send+0xa8>)
   26cea:	2204      	movne	r2, #4
   26cec:	6812      	ldreq	r2, [r2, #0]
   26cee:	7243      	strb	r3, [r0, #9]
   26cf0:	bf04      	itt	eq
   26cf2:	6102      	streq	r2, [r0, #16]
   26cf4:	2208      	moveq	r2, #8
   26cf6:	7283      	strb	r3, [r0, #10]
   26cf8:	72c3      	strb	r3, [r0, #11]
   26cfa:	2300      	movs	r3, #0
   26cfc:	4e12      	ldr	r6, [pc, #72]	; (26d48 <rpc_dfu_message_send+0xac>)
   26cfe:	6044      	str	r4, [r0, #4]
   26d00:	4629      	mov	r1, r5
   26d02:	7202      	strb	r2, [r0, #8]
   26d04:	6033      	str	r3, [r6, #0]
   26d06:	f00d f8c0 	bl	33e8a <rpc_dfu_client_request_send>
   26d0a:	4604      	mov	r4, r0
   26d0c:	b140      	cbz	r0, 26d20 <rpc_dfu_message_send+0x84>
   26d0e:	9b00      	ldr	r3, [sp, #0]
   26d10:	6818      	ldr	r0, [r3, #0]
   26d12:	b108      	cbz	r0, 26d18 <rpc_dfu_message_send+0x7c>
   26d14:	f00d f8cb 	bl	33eae <rpc_dfu_client_data_free>
   26d18:	9800      	ldr	r0, [sp, #0]
   26d1a:	f00d f8c5 	bl	33ea8 <rpc_dfu_client_message_free>
   26d1e:	e7c6      	b.n	26cae <rpc_dfu_message_send+0x12>
   26d20:	f04f 33ff 	mov.w	r3, #4294967295
   26d24:	4d09      	ldr	r5, [pc, #36]	; (26d4c <rpc_dfu_message_send+0xb0>)
   26d26:	9301      	str	r3, [sp, #4]
   26d28:	6833      	ldr	r3, [r6, #0]
   26d2a:	2b00      	cmp	r3, #0
   26d2c:	d1c4      	bne.n	26cb8 <rpc_dfu_message_send+0x1c>
   26d2e:	4628      	mov	r0, r5
   26d30:	a901      	add	r1, sp, #4
   26d32:	f7f8 fce5 	bl	1f700 <nrf_modem_os_timedwait>
   26d36:	2800      	cmp	r0, #0
   26d38:	d0f6      	beq.n	26d28 <rpc_dfu_message_send+0x8c>
   26d3a:	203c      	movs	r0, #60	; 0x3c
   26d3c:	e7b8      	b.n	26cb0 <rpc_dfu_message_send+0x14>
   26d3e:	bf00      	nop
   26d40:	2001ac0a 	.word	0x2001ac0a
   26d44:	20016b28 	.word	0x20016b28
   26d48:	20016b2c 	.word	0x20016b2c
   26d4c:	20016b20 	.word	0x20016b20

00026d50 <rpc_dfu_event_handler>:
   26d50:	b508      	push	{r3, lr}
   26d52:	4b08      	ldr	r3, [pc, #32]	; (26d74 <rpc_dfu_event_handler+0x24>)
   26d54:	68c2      	ldr	r2, [r0, #12]
   26d56:	881b      	ldrh	r3, [r3, #0]
   26d58:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   26d5c:	d103      	bne.n	26d66 <rpc_dfu_event_handler+0x16>
   26d5e:	4b06      	ldr	r3, [pc, #24]	; (26d78 <rpc_dfu_event_handler+0x28>)
   26d60:	6018      	str	r0, [r3, #0]
   26d62:	2001      	movs	r0, #1
   26d64:	bd08      	pop	{r3, pc}
   26d66:	6800      	ldr	r0, [r0, #0]
   26d68:	2800      	cmp	r0, #0
   26d6a:	d0fb      	beq.n	26d64 <rpc_dfu_event_handler+0x14>
   26d6c:	f00d f89f 	bl	33eae <rpc_dfu_client_data_free>
   26d70:	2000      	movs	r0, #0
   26d72:	e7f7      	b.n	26d64 <rpc_dfu_event_handler+0x14>
   26d74:	2001ac0a 	.word	0x2001ac0a
   26d78:	20016b2c 	.word	0x20016b2c

00026d7c <mfu_interface_init>:
   26d7c:	2000      	movs	r0, #0
   26d7e:	2201      	movs	r2, #1
   26d80:	4b04      	ldr	r3, [pc, #16]	; (26d94 <mfu_interface_init+0x18>)
   26d82:	8018      	strh	r0, [r3, #0]
   26d84:	4b04      	ldr	r3, [pc, #16]	; (26d98 <mfu_interface_init+0x1c>)
   26d86:	6018      	str	r0, [r3, #0]
   26d88:	4b04      	ldr	r3, [pc, #16]	; (26d9c <mfu_interface_init+0x20>)
   26d8a:	6018      	str	r0, [r3, #0]
   26d8c:	4b04      	ldr	r3, [pc, #16]	; (26da0 <mfu_interface_init+0x24>)
   26d8e:	601a      	str	r2, [r3, #0]
   26d90:	4770      	bx	lr
   26d92:	bf00      	nop
   26d94:	2001ac0a 	.word	0x2001ac0a
   26d98:	20016b2c 	.word	0x20016b2c
   26d9c:	20016b28 	.word	0x20016b28
   26da0:	20016b20 	.word	0x20016b20

00026da4 <mfu_interface_open>:
   26da4:	b508      	push	{r3, lr}
   26da6:	4b07      	ldr	r3, [pc, #28]	; (26dc4 <mfu_interface_open+0x20>)
   26da8:	681a      	ldr	r2, [r3, #0]
   26daa:	2a01      	cmp	r2, #1
   26dac:	d005      	beq.n	26dba <mfu_interface_open+0x16>
   26dae:	2001      	movs	r0, #1
   26db0:	f7f8 fd5e 	bl	1f870 <nrf_modem_os_errno_set>
   26db4:	f04f 30ff 	mov.w	r0, #4294967295
   26db8:	bd08      	pop	{r3, pc}
   26dba:	2202      	movs	r2, #2
   26dbc:	4802      	ldr	r0, [pc, #8]	; (26dc8 <mfu_interface_open+0x24>)
   26dbe:	601a      	str	r2, [r3, #0]
   26dc0:	e7fa      	b.n	26db8 <mfu_interface_open+0x14>
   26dc2:	bf00      	nop
   26dc4:	20016b20 	.word	0x20016b20
   26dc8:	49765432 	.word	0x49765432

00026dcc <mfu_interface_close>:
   26dcc:	b538      	push	{r3, r4, r5, lr}
   26dce:	4c11      	ldr	r4, [pc, #68]	; (26e14 <mfu_interface_close+0x48>)
   26dd0:	6823      	ldr	r3, [r4, #0]
   26dd2:	1e9a      	subs	r2, r3, #2
   26dd4:	2a01      	cmp	r2, #1
   26dd6:	d905      	bls.n	26de4 <mfu_interface_close+0x18>
   26dd8:	2001      	movs	r0, #1
   26dda:	f7f8 fd49 	bl	1f870 <nrf_modem_os_errno_set>
   26dde:	f04f 30ff 	mov.w	r0, #4294967295
   26de2:	e015      	b.n	26e10 <mfu_interface_close+0x44>
   26de4:	2b03      	cmp	r3, #3
   26de6:	d110      	bne.n	26e0a <mfu_interface_close+0x3e>
   26de8:	2200      	movs	r2, #0
   26dea:	2006      	movs	r0, #6
   26dec:	4611      	mov	r1, r2
   26dee:	f7ff ff55 	bl	26c9c <rpc_dfu_message_send>
   26df2:	2800      	cmp	r0, #0
   26df4:	d1f3      	bne.n	26dde <mfu_interface_close+0x12>
   26df6:	4b08      	ldr	r3, [pc, #32]	; (26e18 <mfu_interface_close+0x4c>)
   26df8:	6818      	ldr	r0, [r3, #0]
   26dfa:	6905      	ldr	r5, [r0, #16]
   26dfc:	f00d f854 	bl	33ea8 <rpc_dfu_client_message_free>
   26e00:	b11d      	cbz	r5, 26e0a <mfu_interface_close+0x3e>
   26e02:	4b06      	ldr	r3, [pc, #24]	; (26e1c <mfu_interface_close+0x50>)
   26e04:	2008      	movs	r0, #8
   26e06:	601d      	str	r5, [r3, #0]
   26e08:	e7e7      	b.n	26dda <mfu_interface_close+0xe>
   26e0a:	2301      	movs	r3, #1
   26e0c:	2000      	movs	r0, #0
   26e0e:	6023      	str	r3, [r4, #0]
   26e10:	bd38      	pop	{r3, r4, r5, pc}
   26e12:	bf00      	nop
   26e14:	20016b20 	.word	0x20016b20
   26e18:	20016b2c 	.word	0x20016b2c
   26e1c:	20016b24 	.word	0x20016b24

00026e20 <mfu_interface_sendto>:
   26e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e22:	4e1f      	ldr	r6, [pc, #124]	; (26ea0 <mfu_interface_sendto+0x80>)
   26e24:	460d      	mov	r5, r1
   26e26:	6831      	ldr	r1, [r6, #0]
   26e28:	4614      	mov	r4, r2
   26e2a:	1e88      	subs	r0, r1, #2
   26e2c:	2801      	cmp	r0, #1
   26e2e:	9a06      	ldr	r2, [sp, #24]
   26e30:	d903      	bls.n	26e3a <mfu_interface_sendto+0x1a>
   26e32:	2001      	movs	r0, #1
   26e34:	f7f8 fd1c 	bl	1f870 <nrf_modem_os_errno_set>
   26e38:	e010      	b.n	26e5c <mfu_interface_sendto+0x3c>
   26e3a:	b105      	cbz	r5, 26e3e <mfu_interface_sendto+0x1e>
   26e3c:	b90c      	cbnz	r4, 26e42 <mfu_interface_sendto+0x22>
   26e3e:	2016      	movs	r0, #22
   26e40:	e7f8      	b.n	26e34 <mfu_interface_sendto+0x14>
   26e42:	b10b      	cbz	r3, 26e48 <mfu_interface_sendto+0x28>
   26e44:	202d      	movs	r0, #45	; 0x2d
   26e46:	e7f5      	b.n	26e34 <mfu_interface_sendto+0x14>
   26e48:	b10a      	cbz	r2, 26e4e <mfu_interface_sendto+0x2e>
   26e4a:	2038      	movs	r0, #56	; 0x38
   26e4c:	e7f2      	b.n	26e34 <mfu_interface_sendto+0x14>
   26e4e:	2902      	cmp	r1, #2
   26e50:	d114      	bne.n	26e7c <mfu_interface_sendto+0x5c>
   26e52:	4611      	mov	r1, r2
   26e54:	2003      	movs	r0, #3
   26e56:	f7ff ff21 	bl	26c9c <rpc_dfu_message_send>
   26e5a:	b118      	cbz	r0, 26e64 <mfu_interface_sendto+0x44>
   26e5c:	f04f 34ff 	mov.w	r4, #4294967295
   26e60:	4620      	mov	r0, r4
   26e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26e64:	4b0f      	ldr	r3, [pc, #60]	; (26ea4 <mfu_interface_sendto+0x84>)
   26e66:	6818      	ldr	r0, [r3, #0]
   26e68:	6907      	ldr	r7, [r0, #16]
   26e6a:	f00d f81d 	bl	33ea8 <rpc_dfu_client_message_free>
   26e6e:	b11f      	cbz	r7, 26e78 <mfu_interface_sendto+0x58>
   26e70:	4b0d      	ldr	r3, [pc, #52]	; (26ea8 <mfu_interface_sendto+0x88>)
   26e72:	601f      	str	r7, [r3, #0]
   26e74:	2008      	movs	r0, #8
   26e76:	e7dd      	b.n	26e34 <mfu_interface_sendto+0x14>
   26e78:	2303      	movs	r3, #3
   26e7a:	6033      	str	r3, [r6, #0]
   26e7c:	4622      	mov	r2, r4
   26e7e:	4629      	mov	r1, r5
   26e80:	2004      	movs	r0, #4
   26e82:	f7ff ff0b 	bl	26c9c <rpc_dfu_message_send>
   26e86:	2800      	cmp	r0, #0
   26e88:	d1e8      	bne.n	26e5c <mfu_interface_sendto+0x3c>
   26e8a:	4b06      	ldr	r3, [pc, #24]	; (26ea4 <mfu_interface_sendto+0x84>)
   26e8c:	6818      	ldr	r0, [r3, #0]
   26e8e:	6905      	ldr	r5, [r0, #16]
   26e90:	f00d f80a 	bl	33ea8 <rpc_dfu_client_message_free>
   26e94:	2d00      	cmp	r5, #0
   26e96:	d0e3      	beq.n	26e60 <mfu_interface_sendto+0x40>
   26e98:	4b03      	ldr	r3, [pc, #12]	; (26ea8 <mfu_interface_sendto+0x88>)
   26e9a:	601d      	str	r5, [r3, #0]
   26e9c:	e7ea      	b.n	26e74 <mfu_interface_sendto+0x54>
   26e9e:	bf00      	nop
   26ea0:	20016b20 	.word	0x20016b20
   26ea4:	20016b2c 	.word	0x20016b2c
   26ea8:	20016b24 	.word	0x20016b24

00026eac <mfu_interface_setopt>:
   26eac:	481d      	ldr	r0, [pc, #116]	; (26f24 <mfu_interface_setopt+0x78>)
   26eae:	b510      	push	{r4, lr}
   26eb0:	6800      	ldr	r0, [r0, #0]
   26eb2:	3802      	subs	r0, #2
   26eb4:	2801      	cmp	r0, #1
   26eb6:	d905      	bls.n	26ec4 <mfu_interface_setopt+0x18>
   26eb8:	2001      	movs	r0, #1
   26eba:	f7f8 fcd9 	bl	1f870 <nrf_modem_os_errno_set>
   26ebe:	f04f 30ff 	mov.w	r0, #4294967295
   26ec2:	e026      	b.n	26f12 <mfu_interface_setopt+0x66>
   26ec4:	f240 2003 	movw	r0, #515	; 0x203
   26ec8:	4281      	cmp	r1, r0
   26eca:	d001      	beq.n	26ed0 <mfu_interface_setopt+0x24>
   26ecc:	2016      	movs	r0, #22
   26ece:	e7f4      	b.n	26eba <mfu_interface_setopt+0xe>
   26ed0:	3a04      	subs	r2, #4
   26ed2:	2a03      	cmp	r2, #3
   26ed4:	d81e      	bhi.n	26f14 <mfu_interface_setopt+0x68>
   26ed6:	e8df f002 	tbb	[pc, r2]
   26eda:	021f      	.short	0x021f
   26edc:	1321      	.short	0x1321
   26ede:	2007      	movs	r0, #7
   26ee0:	2200      	movs	r2, #0
   26ee2:	4611      	mov	r1, r2
   26ee4:	f7ff feda 	bl	26c9c <rpc_dfu_message_send>
   26ee8:	2800      	cmp	r0, #0
   26eea:	d1e8      	bne.n	26ebe <mfu_interface_setopt+0x12>
   26eec:	4b0e      	ldr	r3, [pc, #56]	; (26f28 <mfu_interface_setopt+0x7c>)
   26eee:	6818      	ldr	r0, [r3, #0]
   26ef0:	6904      	ldr	r4, [r0, #16]
   26ef2:	f00c ffd9 	bl	33ea8 <rpc_dfu_client_message_free>
   26ef6:	b19c      	cbz	r4, 26f20 <mfu_interface_setopt+0x74>
   26ef8:	4b0c      	ldr	r3, [pc, #48]	; (26f2c <mfu_interface_setopt+0x80>)
   26efa:	2008      	movs	r0, #8
   26efc:	601c      	str	r4, [r3, #0]
   26efe:	e7dc      	b.n	26eba <mfu_interface_setopt+0xe>
   26f00:	2b00      	cmp	r3, #0
   26f02:	d0e3      	beq.n	26ecc <mfu_interface_setopt+0x20>
   26f04:	9a02      	ldr	r2, [sp, #8]
   26f06:	2a04      	cmp	r2, #4
   26f08:	d1e0      	bne.n	26ecc <mfu_interface_setopt+0x20>
   26f0a:	2000      	movs	r0, #0
   26f0c:	681a      	ldr	r2, [r3, #0]
   26f0e:	4b08      	ldr	r3, [pc, #32]	; (26f30 <mfu_interface_setopt+0x84>)
   26f10:	601a      	str	r2, [r3, #0]
   26f12:	bd10      	pop	{r4, pc}
   26f14:	202a      	movs	r0, #42	; 0x2a
   26f16:	e7d0      	b.n	26eba <mfu_interface_setopt+0xe>
   26f18:	2005      	movs	r0, #5
   26f1a:	e7e1      	b.n	26ee0 <mfu_interface_setopt+0x34>
   26f1c:	2008      	movs	r0, #8
   26f1e:	e7df      	b.n	26ee0 <mfu_interface_setopt+0x34>
   26f20:	4620      	mov	r0, r4
   26f22:	e7f6      	b.n	26f12 <mfu_interface_setopt+0x66>
   26f24:	20016b20 	.word	0x20016b20
   26f28:	20016b2c 	.word	0x20016b2c
   26f2c:	20016b24 	.word	0x20016b24
   26f30:	20016b28 	.word	0x20016b28

00026f34 <mfu_interface_getopt>:
   26f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f36:	461e      	mov	r6, r3
   26f38:	f240 2303 	movw	r3, #515	; 0x203
   26f3c:	4299      	cmp	r1, r3
   26f3e:	4610      	mov	r0, r2
   26f40:	9d06      	ldr	r5, [sp, #24]
   26f42:	d101      	bne.n	26f48 <mfu_interface_getopt+0x14>
   26f44:	b106      	cbz	r6, 26f48 <mfu_interface_getopt+0x14>
   26f46:	b92d      	cbnz	r5, 26f54 <mfu_interface_getopt+0x20>
   26f48:	2016      	movs	r0, #22
   26f4a:	f7f8 fc91 	bl	1f870 <nrf_modem_os_errno_set>
   26f4e:	f04f 30ff 	mov.w	r0, #4294967295
   26f52:	e019      	b.n	26f88 <mfu_interface_getopt+0x54>
   26f54:	4b21      	ldr	r3, [pc, #132]	; (26fdc <mfu_interface_getopt+0xa8>)
   26f56:	681b      	ldr	r3, [r3, #0]
   26f58:	3b02      	subs	r3, #2
   26f5a:	2b01      	cmp	r3, #1
   26f5c:	d901      	bls.n	26f62 <mfu_interface_getopt+0x2e>
   26f5e:	2001      	movs	r0, #1
   26f60:	e7f3      	b.n	26f4a <mfu_interface_getopt+0x16>
   26f62:	2a07      	cmp	r2, #7
   26f64:	d02a      	beq.n	26fbc <mfu_interface_getopt+0x88>
   26f66:	dc05      	bgt.n	26f74 <mfu_interface_getopt+0x40>
   26f68:	2a01      	cmp	r2, #1
   26f6a:	d00e      	beq.n	26f8a <mfu_interface_getopt+0x56>
   26f6c:	2a02      	cmp	r2, #2
   26f6e:	d022      	beq.n	26fb6 <mfu_interface_getopt+0x82>
   26f70:	202a      	movs	r0, #42	; 0x2a
   26f72:	e7ea      	b.n	26f4a <mfu_interface_getopt+0x16>
   26f74:	2a14      	cmp	r2, #20
   26f76:	d1fb      	bne.n	26f70 <mfu_interface_getopt+0x3c>
   26f78:	682b      	ldr	r3, [r5, #0]
   26f7a:	2b04      	cmp	r3, #4
   26f7c:	d1e4      	bne.n	26f48 <mfu_interface_getopt+0x14>
   26f7e:	2000      	movs	r0, #0
   26f80:	4b17      	ldr	r3, [pc, #92]	; (26fe0 <mfu_interface_getopt+0xac>)
   26f82:	681a      	ldr	r2, [r3, #0]
   26f84:	6018      	str	r0, [r3, #0]
   26f86:	6032      	str	r2, [r6, #0]
   26f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f8a:	682b      	ldr	r3, [r5, #0]
   26f8c:	2b24      	cmp	r3, #36	; 0x24
   26f8e:	d1db      	bne.n	26f48 <mfu_interface_getopt+0x14>
   26f90:	2200      	movs	r2, #0
   26f92:	4611      	mov	r1, r2
   26f94:	f7ff fe82 	bl	26c9c <rpc_dfu_message_send>
   26f98:	2800      	cmp	r0, #0
   26f9a:	d1d8      	bne.n	26f4e <mfu_interface_getopt+0x1a>
   26f9c:	4f11      	ldr	r7, [pc, #68]	; (26fe4 <mfu_interface_getopt+0xb0>)
   26f9e:	6839      	ldr	r1, [r7, #0]
   26fa0:	690c      	ldr	r4, [r1, #16]
   26fa2:	b184      	cbz	r4, 26fc6 <mfu_interface_getopt+0x92>
   26fa4:	4b0e      	ldr	r3, [pc, #56]	; (26fe0 <mfu_interface_getopt+0xac>)
   26fa6:	2008      	movs	r0, #8
   26fa8:	601c      	str	r4, [r3, #0]
   26faa:	f7f8 fc61 	bl	1f870 <nrf_modem_os_errno_set>
   26fae:	6838      	ldr	r0, [r7, #0]
   26fb0:	f00c ff7a 	bl	33ea8 <rpc_dfu_client_message_free>
   26fb4:	e7cb      	b.n	26f4e <mfu_interface_getopt+0x1a>
   26fb6:	682b      	ldr	r3, [r5, #0]
   26fb8:	2b04      	cmp	r3, #4
   26fba:	e7e8      	b.n	26f8e <mfu_interface_getopt+0x5a>
   26fbc:	682b      	ldr	r3, [r5, #0]
   26fbe:	2b04      	cmp	r3, #4
   26fc0:	d1c2      	bne.n	26f48 <mfu_interface_getopt+0x14>
   26fc2:	2009      	movs	r0, #9
   26fc4:	e7e4      	b.n	26f90 <mfu_interface_getopt+0x5c>
   26fc6:	682a      	ldr	r2, [r5, #0]
   26fc8:	3114      	adds	r1, #20
   26fca:	4630      	mov	r0, r6
   26fcc:	f00e fadb 	bl	35586 <memcpy>
   26fd0:	6838      	ldr	r0, [r7, #0]
   26fd2:	f00c ff69 	bl	33ea8 <rpc_dfu_client_message_free>
   26fd6:	4620      	mov	r0, r4
   26fd8:	e7d6      	b.n	26f88 <mfu_interface_getopt+0x54>
   26fda:	bf00      	nop
   26fdc:	20016b20 	.word	0x20016b20
   26fe0:	20016b24 	.word	0x20016b24
   26fe4:	20016b2c 	.word	0x20016b2c

00026fe8 <rpc_gnss_event_handler>:
   26fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   26fea:	4b5b      	ldr	r3, [pc, #364]	; (27158 <rpc_gnss_event_handler+0x170>)
   26fec:	4605      	mov	r5, r0
   26fee:	6800      	ldr	r0, [r0, #0]
   26ff0:	881b      	ldrh	r3, [r3, #0]
   26ff2:	6802      	ldr	r2, [r0, #0]
   26ff4:	460c      	mov	r4, r1
   26ff6:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   26ffa:	b085      	sub	sp, #20
   26ffc:	d134      	bne.n	27068 <rpc_gnss_event_handler+0x80>
   26ffe:	4b57      	ldr	r3, [pc, #348]	; (2715c <rpc_gnss_event_handler+0x174>)
   27000:	4e57      	ldr	r6, [pc, #348]	; (27160 <rpc_gnss_event_handler+0x178>)
   27002:	681a      	ldr	r2, [r3, #0]
   27004:	6030      	str	r0, [r6, #0]
   27006:	01d2      	lsls	r2, r2, #7
   27008:	d50d      	bpl.n	27026 <rpc_gnss_event_handler+0x3e>
   2700a:	f242 1202 	movw	r2, #8450	; 0x2102
   2700e:	4291      	cmp	r1, r2
   27010:	d109      	bne.n	27026 <rpc_gnss_event_handler+0x3e>
   27012:	6842      	ldr	r2, [r0, #4]
   27014:	b91a      	cbnz	r2, 2701e <rpc_gnss_event_handler+0x36>
   27016:	681a      	ldr	r2, [r3, #0]
   27018:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   2701c:	601a      	str	r2, [r3, #0]
   2701e:	681a      	ldr	r2, [r3, #0]
   27020:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   27024:	601a      	str	r2, [r3, #0]
   27026:	681a      	ldr	r2, [r3, #0]
   27028:	0257      	lsls	r7, r2, #9
   2702a:	d50d      	bpl.n	27048 <rpc_gnss_event_handler+0x60>
   2702c:	f242 1203 	movw	r2, #8451	; 0x2103
   27030:	4294      	cmp	r4, r2
   27032:	d109      	bne.n	27048 <rpc_gnss_event_handler+0x60>
   27034:	6842      	ldr	r2, [r0, #4]
   27036:	b91a      	cbnz	r2, 27040 <rpc_gnss_event_handler+0x58>
   27038:	681a      	ldr	r2, [r3, #0]
   2703a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   2703e:	601a      	str	r2, [r3, #0]
   27040:	681a      	ldr	r2, [r3, #0]
   27042:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   27046:	e04a      	b.n	270de <rpc_gnss_event_handler+0xf6>
   27048:	f242 0201 	movw	r2, #8193	; 0x2001
   2704c:	4294      	cmp	r4, r2
   2704e:	d03e      	beq.n	270ce <rpc_gnss_event_handler+0xe6>
   27050:	f242 0204 	movw	r2, #8196	; 0x2004
   27054:	4294      	cmp	r4, r2
   27056:	d044      	beq.n	270e2 <rpc_gnss_event_handler+0xfa>
   27058:	f242 0205 	movw	r2, #8197	; 0x2005
   2705c:	4294      	cmp	r4, r2
   2705e:	d05d      	beq.n	2711c <rpc_gnss_event_handler+0x134>
   27060:	f00c ff43 	bl	33eea <rpc_gnss_client_data_free>
   27064:	2300      	movs	r3, #0
   27066:	6033      	str	r3, [r6, #0]
   27068:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   2706c:	33ff      	adds	r3, #255	; 0xff
   2706e:	b29b      	uxth	r3, r3
   27070:	2b02      	cmp	r3, #2
   27072:	d869      	bhi.n	27148 <rpc_gnss_event_handler+0x160>
   27074:	4f39      	ldr	r7, [pc, #228]	; (2715c <rpc_gnss_event_handler+0x174>)
   27076:	683b      	ldr	r3, [r7, #0]
   27078:	075a      	lsls	r2, r3, #29
   2707a:	d406      	bmi.n	2708a <rpc_gnss_event_handler+0xa2>
   2707c:	683b      	ldr	r3, [r7, #0]
   2707e:	079b      	lsls	r3, r3, #30
   27080:	d51c      	bpl.n	270bc <rpc_gnss_event_handler+0xd4>
   27082:	f244 0303 	movw	r3, #16387	; 0x4003
   27086:	429c      	cmp	r4, r3
   27088:	d118      	bne.n	270bc <rpc_gnss_event_handler+0xd4>
   2708a:	2002      	movs	r0, #2
   2708c:	f7f8 fda2 	bl	1fbd4 <nrf_modem_os_alloc>
   27090:	4606      	mov	r6, r0
   27092:	6828      	ldr	r0, [r5, #0]
   27094:	2e00      	cmp	r6, #0
   27096:	d052      	beq.n	2713e <rpc_gnss_event_handler+0x156>
   27098:	8034      	strh	r4, [r6, #0]
   2709a:	686b      	ldr	r3, [r5, #4]
   2709c:	9000      	str	r0, [sp, #0]
   2709e:	e9cd 3601 	strd	r3, r6, [sp, #4]
   270a2:	2302      	movs	r3, #2
   270a4:	9303      	str	r3, [sp, #12]
   270a6:	4b2f      	ldr	r3, [pc, #188]	; (27164 <rpc_gnss_event_handler+0x17c>)
   270a8:	4669      	mov	r1, sp
   270aa:	6818      	ldr	r0, [r3, #0]
   270ac:	6803      	ldr	r3, [r0, #0]
   270ae:	685b      	ldr	r3, [r3, #4]
   270b0:	4798      	blx	r3
   270b2:	3001      	adds	r0, #1
   270b4:	d14b      	bne.n	2714e <rpc_gnss_event_handler+0x166>
   270b6:	4630      	mov	r0, r6
   270b8:	f7f8 fd94 	bl	1fbe4 <nrf_modem_os_free>
   270bc:	6828      	ldr	r0, [r5, #0]
   270be:	2800      	cmp	r0, #0
   270c0:	d042      	beq.n	27148 <rpc_gnss_event_handler+0x160>
   270c2:	f00c ff12 	bl	33eea <rpc_gnss_client_data_free>
   270c6:	2200      	movs	r2, #0
   270c8:	4b25      	ldr	r3, [pc, #148]	; (27160 <rpc_gnss_event_handler+0x178>)
   270ca:	601a      	str	r2, [r3, #0]
   270cc:	e03c      	b.n	27148 <rpc_gnss_event_handler+0x160>
   270ce:	6842      	ldr	r2, [r0, #4]
   270d0:	2a00      	cmp	r2, #0
   270d2:	d1c5      	bne.n	27060 <rpc_gnss_event_handler+0x78>
   270d4:	681a      	ldr	r2, [r3, #0]
   270d6:	0c12      	lsrs	r2, r2, #16
   270d8:	0412      	lsls	r2, r2, #16
   270da:	f042 0202 	orr.w	r2, r2, #2
   270de:	601a      	str	r2, [r3, #0]
   270e0:	e7be      	b.n	27060 <rpc_gnss_event_handler+0x78>
   270e2:	6842      	ldr	r2, [r0, #4]
   270e4:	b9b2      	cbnz	r2, 27114 <rpc_gnss_event_handler+0x12c>
   270e6:	681a      	ldr	r2, [r3, #0]
   270e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   270ec:	601a      	str	r2, [r3, #0]
   270ee:	681a      	ldr	r2, [r3, #0]
   270f0:	b292      	uxth	r2, r2
   270f2:	2a03      	cmp	r2, #3
   270f4:	681a      	ldr	r2, [r3, #0]
   270f6:	d104      	bne.n	27102 <rpc_gnss_event_handler+0x11a>
   270f8:	0c12      	lsrs	r2, r2, #16
   270fa:	0412      	lsls	r2, r2, #16
   270fc:	f042 0204 	orr.w	r2, r2, #4
   27100:	e79d      	b.n	2703e <rpc_gnss_event_handler+0x56>
   27102:	b292      	uxth	r2, r2
   27104:	2a04      	cmp	r2, #4
   27106:	d19b      	bne.n	27040 <rpc_gnss_event_handler+0x58>
   27108:	681a      	ldr	r2, [r3, #0]
   2710a:	0c12      	lsrs	r2, r2, #16
   2710c:	0412      	lsls	r2, r2, #16
   2710e:	f042 0202 	orr.w	r2, r2, #2
   27112:	e794      	b.n	2703e <rpc_gnss_event_handler+0x56>
   27114:	681a      	ldr	r2, [r3, #0]
   27116:	b292      	uxth	r2, r2
   27118:	2a03      	cmp	r2, #3
   2711a:	e7f4      	b.n	27106 <rpc_gnss_event_handler+0x11e>
   2711c:	681a      	ldr	r2, [r3, #0]
   2711e:	0291      	lsls	r1, r2, #10
   27120:	d59e      	bpl.n	27060 <rpc_gnss_event_handler+0x78>
   27122:	6842      	ldr	r2, [r0, #4]
   27124:	b93a      	cbnz	r2, 27136 <rpc_gnss_event_handler+0x14e>
   27126:	681a      	ldr	r2, [r3, #0]
   27128:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   2712c:	601a      	str	r2, [r3, #0]
   2712e:	681a      	ldr	r2, [r3, #0]
   27130:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   27134:	e7d3      	b.n	270de <rpc_gnss_event_handler+0xf6>
   27136:	681a      	ldr	r2, [r3, #0]
   27138:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   2713c:	e7cf      	b.n	270de <rpc_gnss_event_handler+0xf6>
   2713e:	b118      	cbz	r0, 27148 <rpc_gnss_event_handler+0x160>
   27140:	f00c fed3 	bl	33eea <rpc_gnss_client_data_free>
   27144:	4b06      	ldr	r3, [pc, #24]	; (27160 <rpc_gnss_event_handler+0x178>)
   27146:	601e      	str	r6, [r3, #0]
   27148:	2000      	movs	r0, #0
   2714a:	b005      	add	sp, #20
   2714c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2714e:	683b      	ldr	r3, [r7, #0]
   27150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   27154:	603b      	str	r3, [r7, #0]
   27156:	e7f7      	b.n	27148 <rpc_gnss_event_handler+0x160>
   27158:	2001ac0c 	.word	0x2001ac0c
   2715c:	20016b30 	.word	0x20016b30
   27160:	20016b34 	.word	0x20016b34
   27164:	20016b38 	.word	0x20016b38

00027168 <send_message>:
   27168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2716c:	4607      	mov	r7, r0
   2716e:	4688      	mov	r8, r1
   27170:	a801      	add	r0, sp, #4
   27172:	4611      	mov	r1, r2
   27174:	4616      	mov	r6, r2
   27176:	f00c fe9c 	bl	33eb2 <rpc_gnss_client_request_alloc>
   2717a:	9b01      	ldr	r3, [sp, #4]
   2717c:	4604      	mov	r4, r0
   2717e:	b958      	cbnz	r0, 27198 <send_message+0x30>
   27180:	b993      	cbnz	r3, 271a8 <send_message+0x40>
   27182:	9801      	ldr	r0, [sp, #4]
   27184:	f00c feae 	bl	33ee4 <rpc_gnss_client_message_free>
   27188:	2023      	movs	r0, #35	; 0x23
   2718a:	f7f8 fb71 	bl	1f870 <nrf_modem_os_errno_set>
   2718e:	f04f 30ff 	mov.w	r0, #4294967295
   27192:	b002      	add	sp, #8
   27194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27198:	2b00      	cmp	r3, #0
   2719a:	d0f2      	beq.n	27182 <send_message+0x1a>
   2719c:	6818      	ldr	r0, [r3, #0]
   2719e:	2800      	cmp	r0, #0
   271a0:	d0ef      	beq.n	27182 <send_message+0x1a>
   271a2:	f00c fea2 	bl	33eea <rpc_gnss_client_data_free>
   271a6:	e7ec      	b.n	27182 <send_message+0x1a>
   271a8:	4a10      	ldr	r2, [pc, #64]	; (271ec <send_message+0x84>)
   271aa:	4641      	mov	r1, r8
   271ac:	8815      	ldrh	r5, [r2, #0]
   271ae:	3501      	adds	r5, #1
   271b0:	b2ad      	uxth	r5, r5
   271b2:	8015      	strh	r5, [r2, #0]
   271b4:	2243      	movs	r2, #67	; 0x43
   271b6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
   271ba:	f8c8 5000 	str.w	r5, [r8]
   271be:	731a      	strb	r2, [r3, #12]
   271c0:	2254      	movs	r2, #84	; 0x54
   271c2:	735a      	strb	r2, [r3, #13]
   271c4:	2276      	movs	r2, #118	; 0x76
   271c6:	739a      	strb	r2, [r3, #14]
   271c8:	2249      	movs	r2, #73	; 0x49
   271ca:	605e      	str	r6, [r3, #4]
   271cc:	7218      	strb	r0, [r3, #8]
   271ce:	7258      	strb	r0, [r3, #9]
   271d0:	7298      	strb	r0, [r3, #10]
   271d2:	72d8      	strb	r0, [r3, #11]
   271d4:	73da      	strb	r2, [r3, #15]
   271d6:	6818      	ldr	r0, [r3, #0]
   271d8:	4632      	mov	r2, r6
   271da:	f00e f9d4 	bl	35586 <memcpy>
   271de:	4b04      	ldr	r3, [pc, #16]	; (271f0 <send_message+0x88>)
   271e0:	4639      	mov	r1, r7
   271e2:	9801      	ldr	r0, [sp, #4]
   271e4:	601c      	str	r4, [r3, #0]
   271e6:	f00c fe73 	bl	33ed0 <rpc_gnss_client_request_send>
   271ea:	e7d2      	b.n	27192 <send_message+0x2a>
   271ec:	2001ac0c 	.word	0x2001ac0c
   271f0:	20016b34 	.word	0x20016b34

000271f4 <gnss_interface_write>:
   271f4:	b570      	push	{r4, r5, r6, lr}
   271f6:	4604      	mov	r4, r0
   271f8:	4a40      	ldr	r2, [pc, #256]	; (272fc <gnss_interface_write+0x108>)
   271fa:	b09e      	sub	sp, #120	; 0x78
   271fc:	4294      	cmp	r4, r2
   271fe:	4608      	mov	r0, r1
   27200:	9922      	ldr	r1, [sp, #136]	; 0x88
   27202:	d005      	beq.n	27210 <gnss_interface_write+0x1c>
   27204:	2009      	movs	r0, #9
   27206:	f7f8 fb33 	bl	1f870 <nrf_modem_os_errno_set>
   2720a:	f04f 33ff 	mov.w	r3, #4294967295
   2720e:	e060      	b.n	272d2 <gnss_interface_write+0xde>
   27210:	b118      	cbz	r0, 2721a <gnss_interface_write+0x26>
   27212:	b111      	cbz	r1, 2721a <gnss_interface_write+0x26>
   27214:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   27216:	2a02      	cmp	r2, #2
   27218:	d001      	beq.n	2721e <gnss_interface_write+0x2a>
   2721a:	2016      	movs	r0, #22
   2721c:	e7f3      	b.n	27206 <gnss_interface_write+0x12>
   2721e:	4c38      	ldr	r4, [pc, #224]	; (27300 <gnss_interface_write+0x10c>)
   27220:	6822      	ldr	r2, [r4, #0]
   27222:	b292      	uxth	r2, r2
   27224:	2a02      	cmp	r2, #2
   27226:	d005      	beq.n	27234 <gnss_interface_write+0x40>
   27228:	6822      	ldr	r2, [r4, #0]
   2722a:	b292      	uxth	r2, r2
   2722c:	2a04      	cmp	r2, #4
   2722e:	d001      	beq.n	27234 <gnss_interface_write+0x40>
   27230:	2039      	movs	r0, #57	; 0x39
   27232:	e7e8      	b.n	27206 <gnss_interface_write+0x12>
   27234:	b10b      	cbz	r3, 2723a <gnss_interface_write+0x46>
   27236:	202d      	movs	r0, #45	; 0x2d
   27238:	e7e5      	b.n	27206 <gnss_interface_write+0x12>
   2723a:	6822      	ldr	r2, [r4, #0]
   2723c:	0395      	lsls	r5, r2, #14
   2723e:	d548      	bpl.n	272d2 <gnss_interface_write+0xde>
   27240:	6823      	ldr	r3, [r4, #0]
   27242:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   27246:	6023      	str	r3, [r4, #0]
   27248:	6823      	ldr	r3, [r4, #0]
   2724a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2724e:	6023      	str	r3, [r4, #0]
   27250:	880b      	ldrh	r3, [r1, #0]
   27252:	3b01      	subs	r3, #1
   27254:	2b07      	cmp	r3, #7
   27256:	d8e0      	bhi.n	2721a <gnss_interface_write+0x26>
   27258:	e8df f003 	tbb	[pc, r3]
   2725c:	1f1b1704 	.word	0x1f1b1704
   27260:	2f2b2723 	.word	0x2f2b2723
   27264:	a902      	add	r1, sp, #8
   27266:	f00c fe42 	bl	33eee <rpc_gnss_serialize_utc>
   2726a:	2272      	movs	r2, #114	; 0x72
   2726c:	f241 0005 	movw	r0, #4101	; 0x1005
   27270:	a901      	add	r1, sp, #4
   27272:	f7ff ff79 	bl	27168 <send_message>
   27276:	4603      	mov	r3, r0
   27278:	bb18      	cbnz	r0, 272c2 <gnss_interface_write+0xce>
   2727a:	4d22      	ldr	r5, [pc, #136]	; (27304 <gnss_interface_write+0x110>)
   2727c:	4e1f      	ldr	r6, [pc, #124]	; (272fc <gnss_interface_write+0x108>)
   2727e:	6822      	ldr	r2, [r4, #0]
   27280:	0291      	lsls	r1, r2, #10
   27282:	d52f      	bpl.n	272e4 <gnss_interface_write+0xf0>
   27284:	b343      	cbz	r3, 272d8 <gnss_interface_write+0xe4>
   27286:	4618      	mov	r0, r3
   27288:	e7bd      	b.n	27206 <gnss_interface_write+0x12>
   2728a:	a902      	add	r1, sp, #8
   2728c:	f00c fe4c 	bl	33f28 <rpc_gnss_serialize_ephe>
   27290:	e7eb      	b.n	2726a <gnss_interface_write+0x76>
   27292:	a902      	add	r1, sp, #8
   27294:	f00c fe92 	bl	33fbc <rpc_gnss_serialize_alm>
   27298:	e7e7      	b.n	2726a <gnss_interface_write+0x76>
   2729a:	a902      	add	r1, sp, #8
   2729c:	f00c febb 	bl	34016 <rpc_gnss_serialize_klob>
   272a0:	e7e3      	b.n	2726a <gnss_interface_write+0x76>
   272a2:	a902      	add	r1, sp, #8
   272a4:	f00c fed2 	bl	3404c <rpc_gnss_serialize_nequick>
   272a8:	e7df      	b.n	2726a <gnss_interface_write+0x76>
   272aa:	a902      	add	r1, sp, #8
   272ac:	f00c fee3 	bl	34076 <rpc_gnss_serialize_time_and_sv_tow>
   272b0:	e7db      	b.n	2726a <gnss_interface_write+0x76>
   272b2:	a902      	add	r1, sp, #8
   272b4:	f00c ff02 	bl	340bc <rpc_gnss_serialize_location>
   272b8:	e7d7      	b.n	2726a <gnss_interface_write+0x76>
   272ba:	a902      	add	r1, sp, #8
   272bc:	f00c ff1b 	bl	340f6 <rpc_gnss_serialize_integrity>
   272c0:	e7d3      	b.n	2726a <gnss_interface_write+0x76>
   272c2:	6822      	ldr	r2, [r4, #0]
   272c4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   272c8:	6022      	str	r2, [r4, #0]
   272ca:	6822      	ldr	r2, [r4, #0]
   272cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   272d0:	6022      	str	r2, [r4, #0]
   272d2:	4618      	mov	r0, r3
   272d4:	b01e      	add	sp, #120	; 0x78
   272d6:	bd70      	pop	{r4, r5, r6, pc}
   272d8:	4629      	mov	r1, r5
   272da:	4630      	mov	r0, r6
   272dc:	f7f8 fa10 	bl	1f700 <nrf_modem_os_timedwait>
   272e0:	4603      	mov	r3, r0
   272e2:	e7cc      	b.n	2727e <gnss_interface_write+0x8a>
   272e4:	2b00      	cmp	r3, #0
   272e6:	d1ce      	bne.n	27286 <gnss_interface_write+0x92>
   272e8:	6822      	ldr	r2, [r4, #0]
   272ea:	0392      	lsls	r2, r2, #14
   272ec:	d4f1      	bmi.n	272d2 <gnss_interface_write+0xde>
   272ee:	6823      	ldr	r3, [r4, #0]
   272f0:	2005      	movs	r0, #5
   272f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   272f6:	6023      	str	r3, [r4, #0]
   272f8:	e785      	b.n	27206 <gnss_interface_write+0x12>
   272fa:	bf00      	nop
   272fc:	49765443 	.word	0x49765443
   27300:	20016b30 	.word	0x20016b30
   27304:	200149b8 	.word	0x200149b8

00027308 <gnss_interface_read>:
   27308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2730c:	469a      	mov	sl, r3
   2730e:	4b87      	ldr	r3, [pc, #540]	; (2752c <gnss_interface_read+0x224>)
   27310:	460c      	mov	r4, r1
   27312:	4298      	cmp	r0, r3
   27314:	b0b5      	sub	sp, #212	; 0xd4
   27316:	d005      	beq.n	27324 <gnss_interface_read+0x1c>
   27318:	2009      	movs	r0, #9
   2731a:	f7f8 faa9 	bl	1f870 <nrf_modem_os_errno_set>
   2731e:	f04f 35ff 	mov.w	r5, #4294967295
   27322:	e054      	b.n	273ce <gnss_interface_read+0xc6>
   27324:	b109      	cbz	r1, 2732a <gnss_interface_read+0x22>
   27326:	2ad7      	cmp	r2, #215	; 0xd7
   27328:	d801      	bhi.n	2732e <gnss_interface_read+0x26>
   2732a:	2016      	movs	r0, #22
   2732c:	e7f5      	b.n	2731a <gnss_interface_read+0x12>
   2732e:	4f80      	ldr	r7, [pc, #512]	; (27530 <gnss_interface_read+0x228>)
   27330:	683b      	ldr	r3, [r7, #0]
   27332:	b29b      	uxth	r3, r3
   27334:	2b04      	cmp	r3, #4
   27336:	d005      	beq.n	27344 <gnss_interface_read+0x3c>
   27338:	683b      	ldr	r3, [r7, #0]
   2733a:	b29b      	uxth	r3, r3
   2733c:	2b02      	cmp	r3, #2
   2733e:	d001      	beq.n	27344 <gnss_interface_read+0x3c>
   27340:	2039      	movs	r0, #57	; 0x39
   27342:	e7ea      	b.n	2731a <gnss_interface_read+0x12>
   27344:	f1ba 0f00 	cmp.w	sl, #0
   27348:	d004      	beq.n	27354 <gnss_interface_read+0x4c>
   2734a:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   2734e:	d101      	bne.n	27354 <gnss_interface_read+0x4c>
   27350:	202d      	movs	r0, #45	; 0x2d
   27352:	e7e2      	b.n	2731a <gnss_interface_read+0x12>
   27354:	683b      	ldr	r3, [r7, #0]
   27356:	f04f 0900 	mov.w	r9, #0
   2735a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2735e:	603b      	str	r3, [r7, #0]
   27360:	23ba      	movs	r3, #186	; 0xba
   27362:	9302      	str	r3, [sp, #8]
   27364:	f10d 0302 	add.w	r3, sp, #2
   27368:	9303      	str	r3, [sp, #12]
   2736a:	2302      	movs	r3, #2
   2736c:	f10d 0814 	add.w	r8, sp, #20
   27370:	4e70      	ldr	r6, [pc, #448]	; (27534 <gnss_interface_read+0x22c>)
   27372:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 2752c <gnss_interface_read+0x224>
   27376:	f8cd 8004 	str.w	r8, [sp, #4]
   2737a:	9304      	str	r3, [sp, #16]
   2737c:	6830      	ldr	r0, [r6, #0]
   2737e:	4652      	mov	r2, sl
   27380:	6803      	ldr	r3, [r0, #0]
   27382:	a901      	add	r1, sp, #4
   27384:	689b      	ldr	r3, [r3, #8]
   27386:	4798      	blx	r3
   27388:	1e05      	subs	r5, r0, #0
   2738a:	f280 80ac 	bge.w	274e6 <gnss_interface_read+0x1de>
   2738e:	f01a 0f02 	tst.w	sl, #2
   27392:	f040 80a5 	bne.w	274e0 <gnss_interface_read+0x1d8>
   27396:	4d68      	ldr	r5, [pc, #416]	; (27538 <gnss_interface_read+0x230>)
   27398:	683b      	ldr	r3, [r7, #0]
   2739a:	4968      	ldr	r1, [pc, #416]	; (2753c <gnss_interface_read+0x234>)
   2739c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   273a0:	ea53 0309 	orrs.w	r3, r3, r9
   273a4:	782a      	ldrb	r2, [r5, #0]
   273a6:	d109      	bne.n	273bc <gnss_interface_read+0xb4>
   273a8:	b91a      	cbnz	r2, 273b2 <gnss_interface_read+0xaa>
   273aa:	f04f 0970 	mov.w	r9, #112	; 0x70
   273ae:	4648      	mov	r0, r9
   273b0:	e7b3      	b.n	2731a <gnss_interface_read+0x12>
   273b2:	4658      	mov	r0, fp
   273b4:	f7f8 f9a4 	bl	1f700 <nrf_modem_os_timedwait>
   273b8:	4681      	mov	r9, r0
   273ba:	e7ed      	b.n	27398 <gnss_interface_read+0x90>
   273bc:	2a00      	cmp	r2, #0
   273be:	d1dd      	bne.n	2737c <gnss_interface_read+0x74>
   273c0:	e7f3      	b.n	273aa <gnss_interface_read+0xa2>
   273c2:	f1b9 0f00 	cmp.w	r9, #0
   273c6:	d1f2      	bne.n	273ae <gnss_interface_read+0xa6>
   273c8:	2023      	movs	r0, #35	; 0x23
   273ca:	f7f8 fa51 	bl	1f870 <nrf_modem_os_errno_set>
   273ce:	4628      	mov	r0, r5
   273d0:	b035      	add	sp, #212	; 0xd4
   273d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273d6:	f244 0201 	movw	r2, #16385	; 0x4001
   273da:	4293      	cmp	r3, r2
   273dc:	d170      	bne.n	274c0 <gnss_interface_read+0x1b8>
   273de:	2301      	movs	r3, #1
   273e0:	7023      	strb	r3, [r4, #0]
   273e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   273e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
   273ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   273ee:	e9c4 2304 	strd	r2, r3, [r4, #16]
   273f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   273f4:	200a      	movs	r0, #10
   273f6:	61a3      	str	r3, [r4, #24]
   273f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   273fa:	61e3      	str	r3, [r4, #28]
   273fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   273fe:	6223      	str	r3, [r4, #32]
   27400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27402:	6263      	str	r3, [r4, #36]	; 0x24
   27404:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   27408:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   2740c:	f8dd 3041 	ldr.w	r3, [sp, #65]	; 0x41
   27410:	6363      	str	r3, [r4, #52]	; 0x34
   27412:	f8dd 3045 	ldr.w	r3, [sp, #69]	; 0x45
   27416:	63a3      	str	r3, [r4, #56]	; 0x38
   27418:	f8dd 3049 	ldr.w	r3, [sp, #73]	; 0x49
   2741c:	63e3      	str	r3, [r4, #60]	; 0x3c
   2741e:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   27422:	6423      	str	r3, [r4, #64]	; 0x40
   27424:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   27428:	8523      	strh	r3, [r4, #40]	; 0x28
   2742a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   2742e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
   27432:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   27436:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   2743a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   2743e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   27442:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
   27446:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   2744a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   2744e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   27452:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   27456:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   2745a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2745e:	2200      	movs	r2, #0
   27460:	8623      	strh	r3, [r4, #48]	; 0x30
   27462:	ab34      	add	r3, sp, #208	; 0xd0
   27464:	fb00 3302 	mla	r3, r0, r2, r3
   27468:	f833 1c7e 	ldrh.w	r1, [r3, #-126]
   2746c:	3201      	adds	r2, #1
   2746e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
   27472:	f898 1040 	ldrb.w	r1, [r8, #64]	; 0x40
   27476:	2a0c      	cmp	r2, #12
   27478:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
   2747c:	f813 5c7a 	ldrb.w	r5, [r3, #-122]
   27480:	f813 1c7b 	ldrb.w	r1, [r3, #-123]
   27484:	f104 040c 	add.w	r4, r4, #12
   27488:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   2748c:	87e1      	strh	r1, [r4, #62]	; 0x3e
   2748e:	f813 1c79 	ldrb.w	r1, [r3, #-121]
   27492:	f813 5c78 	ldrb.w	r5, [r3, #-120]
   27496:	f108 080a 	add.w	r8, r8, #10
   2749a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   2749e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   274a2:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   274a6:	f813 3c76 	ldrb.w	r3, [r3, #-118]
   274aa:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   274ae:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   274b2:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
   274b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   274ba:	d1d2      	bne.n	27462 <gnss_interface_read+0x15a>
   274bc:	25d8      	movs	r5, #216	; 0xd8
   274be:	e028      	b.n	27512 <gnss_interface_read+0x20a>
   274c0:	f244 0203 	movw	r2, #16387	; 0x4003
   274c4:	4293      	cmp	r3, r2
   274c6:	f47f af30 	bne.w	2732a <gnss_interface_read+0x22>
   274ca:	2303      	movs	r3, #3
   274cc:	7023      	strb	r3, [r4, #0]
   274ce:	9b05      	ldr	r3, [sp, #20]
   274d0:	2514      	movs	r5, #20
   274d2:	60a3      	str	r3, [r4, #8]
   274d4:	9b06      	ldr	r3, [sp, #24]
   274d6:	60e3      	str	r3, [r4, #12]
   274d8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   274dc:	6123      	str	r3, [r4, #16]
   274de:	e018      	b.n	27512 <gnss_interface_read+0x20a>
   274e0:	1c6b      	adds	r3, r5, #1
   274e2:	f43f af6e 	beq.w	273c2 <gnss_interface_read+0xba>
   274e6:	f244 0202 	movw	r2, #16386	; 0x4002
   274ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   274ee:	4293      	cmp	r3, r2
   274f0:	f47f af71 	bne.w	273d6 <gnss_interface_read+0xce>
   274f4:	4640      	mov	r0, r8
   274f6:	f7ea f803 	bl	11500 <strlen>
   274fa:	4605      	mov	r5, r0
   274fc:	2302      	movs	r3, #2
   274fe:	4620      	mov	r0, r4
   27500:	3501      	adds	r5, #1
   27502:	b2ad      	uxth	r5, r5
   27504:	462a      	mov	r2, r5
   27506:	4641      	mov	r1, r8
   27508:	f800 3b08 	strb.w	r3, [r0], #8
   2750c:	f00e f83b 	bl	35586 <memcpy>
   27510:	3508      	adds	r5, #8
   27512:	6830      	ldr	r0, [r6, #0]
   27514:	6803      	ldr	r3, [r0, #0]
   27516:	68db      	ldr	r3, [r3, #12]
   27518:	4798      	blx	r3
   2751a:	2800      	cmp	r0, #0
   2751c:	f77f af57 	ble.w	273ce <gnss_interface_read+0xc6>
   27520:	683b      	ldr	r3, [r7, #0]
   27522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   27526:	603b      	str	r3, [r7, #0]
   27528:	e751      	b.n	273ce <gnss_interface_read+0xc6>
   2752a:	bf00      	nop
   2752c:	49765443 	.word	0x49765443
   27530:	20016b30 	.word	0x20016b30
   27534:	20016b38 	.word	0x20016b38
   27538:	2001e647 	.word	0x2001e647
   2753c:	200149b8 	.word	0x200149b8

00027540 <gnss_interface_setopt>:
   27540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27544:	4c75      	ldr	r4, [pc, #468]	; (2771c <gnss_interface_setopt+0x1dc>)
   27546:	4616      	mov	r6, r2
   27548:	6822      	ldr	r2, [r4, #0]
   2754a:	b087      	sub	sp, #28
   2754c:	b292      	uxth	r2, r2
   2754e:	2a02      	cmp	r2, #2
   27550:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   27552:	d007      	beq.n	27564 <gnss_interface_setopt+0x24>
   27554:	2e08      	cmp	r6, #8
   27556:	d005      	beq.n	27564 <gnss_interface_setopt+0x24>
   27558:	f1a6 020a 	sub.w	r2, r6, #10
   2755c:	2a01      	cmp	r2, #1
   2755e:	d901      	bls.n	27564 <gnss_interface_setopt+0x24>
   27560:	200e      	movs	r0, #14
   27562:	e003      	b.n	2756c <gnss_interface_setopt+0x2c>
   27564:	6822      	ldr	r2, [r4, #0]
   27566:	0252      	lsls	r2, r2, #9
   27568:	d508      	bpl.n	2757c <gnss_interface_setopt+0x3c>
   2756a:	2073      	movs	r0, #115	; 0x73
   2756c:	f7f8 f980 	bl	1f870 <nrf_modem_os_errno_set>
   27570:	f04f 35ff 	mov.w	r5, #4294967295
   27574:	4628      	mov	r0, r5
   27576:	b007      	add	sp, #28
   27578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2757c:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   27580:	d001      	beq.n	27586 <gnss_interface_setopt+0x46>
   27582:	202a      	movs	r0, #42	; 0x2a
   27584:	e7f2      	b.n	2756c <gnss_interface_setopt+0x2c>
   27586:	4a66      	ldr	r2, [pc, #408]	; (27720 <gnss_interface_setopt+0x1e0>)
   27588:	4290      	cmp	r0, r2
   2758a:	d001      	beq.n	27590 <gnss_interface_setopt+0x50>
   2758c:	2009      	movs	r0, #9
   2758e:	e7ed      	b.n	2756c <gnss_interface_setopt+0x2c>
   27590:	f1a6 020a 	sub.w	r2, r6, #10
   27594:	2a01      	cmp	r2, #1
   27596:	d902      	bls.n	2759e <gnss_interface_setopt+0x5e>
   27598:	b90b      	cbnz	r3, 2759e <gnss_interface_setopt+0x5e>
   2759a:	2016      	movs	r0, #22
   2759c:	e7e6      	b.n	2756c <gnss_interface_setopt+0x2c>
   2759e:	1e72      	subs	r2, r6, #1
   275a0:	2a0a      	cmp	r2, #10
   275a2:	d8fa      	bhi.n	2759a <gnss_interface_setopt+0x5a>
   275a4:	e8df f002 	tbb	[pc, r2]
   275a8:	4b45063d 	.word	0x4b45063d
   275ac:	806a5a53 	.word	0x806a5a53
   275b0:	9362      	.short	0x9362
   275b2:	a5          	.byte	0xa5
   275b3:	00          	.byte	0x00
   275b4:	2d02      	cmp	r5, #2
   275b6:	d1f0      	bne.n	2759a <gnss_interface_setopt+0x5a>
   275b8:	2210      	movs	r2, #16
   275ba:	881b      	ldrh	r3, [r3, #0]
   275bc:	9202      	str	r2, [sp, #8]
   275be:	f8ad 3011 	strh.w	r3, [sp, #17]
   275c2:	f241 1003 	movw	r0, #4355	; 0x1103
   275c6:	6823      	ldr	r3, [r4, #0]
   275c8:	2214      	movs	r2, #20
   275ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   275ce:	a901      	add	r1, sp, #4
   275d0:	6023      	str	r3, [r4, #0]
   275d2:	f7ff fdc9 	bl	27168 <send_message>
   275d6:	4605      	mov	r5, r0
   275d8:	2800      	cmp	r0, #0
   275da:	f040 8091 	bne.w	27700 <gnss_interface_setopt+0x1c0>
   275de:	f8df 9144 	ldr.w	r9, [pc, #324]	; 27724 <gnss_interface_setopt+0x1e4>
   275e2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 27720 <gnss_interface_setopt+0x1e0>
   275e6:	4649      	mov	r1, r9
   275e8:	4640      	mov	r0, r8
   275ea:	f7f8 f889 	bl	1f700 <nrf_modem_os_timedwait>
   275ee:	6827      	ldr	r7, [r4, #0]
   275f0:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   275f4:	d1f7      	bne.n	275e6 <gnss_interface_setopt+0xa6>
   275f6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 27728 <gnss_interface_setopt+0x1e8>
   275fa:	f8d8 0000 	ldr.w	r0, [r8]
   275fe:	b118      	cbz	r0, 27608 <gnss_interface_setopt+0xc8>
   27600:	f00c fc73 	bl	33eea <rpc_gnss_client_data_free>
   27604:	f8c8 7000 	str.w	r7, [r8]
   27608:	6823      	ldr	r3, [r4, #0]
   2760a:	021b      	lsls	r3, r3, #8
   2760c:	d47d      	bmi.n	2770a <gnss_interface_setopt+0x1ca>
   2760e:	200e      	movs	r0, #14
   27610:	f7f8 f92e 	bl	1f870 <nrf_modem_os_errno_set>
   27614:	f04f 35ff 	mov.w	r5, #4294967295
   27618:	6823      	ldr	r3, [r4, #0]
   2761a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2761e:	6023      	str	r3, [r4, #0]
   27620:	e7a8      	b.n	27574 <gnss_interface_setopt+0x34>
   27622:	2d02      	cmp	r5, #2
   27624:	d1b9      	bne.n	2759a <gnss_interface_setopt+0x5a>
   27626:	2208      	movs	r2, #8
   27628:	881b      	ldrh	r3, [r3, #0]
   2762a:	9202      	str	r2, [sp, #8]
   2762c:	f8ad 300f 	strh.w	r3, [sp, #15]
   27630:	e7c7      	b.n	275c2 <gnss_interface_setopt+0x82>
   27632:	2d01      	cmp	r5, #1
   27634:	d1b1      	bne.n	2759a <gnss_interface_setopt+0x5a>
   27636:	781b      	ldrb	r3, [r3, #0]
   27638:	2b01      	cmp	r3, #1
   2763a:	d0c2      	beq.n	275c2 <gnss_interface_setopt+0x82>
   2763c:	e7ad      	b.n	2759a <gnss_interface_setopt+0x5a>
   2763e:	2d02      	cmp	r5, #2
   27640:	d1ab      	bne.n	2759a <gnss_interface_setopt+0x5a>
   27642:	2220      	movs	r2, #32
   27644:	881b      	ldrh	r3, [r3, #0]
   27646:	9202      	str	r2, [sp, #8]
   27648:	f8ad 3013 	strh.w	r3, [sp, #19]
   2764c:	e7b9      	b.n	275c2 <gnss_interface_setopt+0x82>
   2764e:	2d01      	cmp	r5, #1
   27650:	d1a3      	bne.n	2759a <gnss_interface_setopt+0x5a>
   27652:	781b      	ldrb	r3, [r3, #0]
   27654:	9502      	str	r5, [sp, #8]
   27656:	f88d 300c 	strb.w	r3, [sp, #12]
   2765a:	e7b2      	b.n	275c2 <gnss_interface_setopt+0x82>
   2765c:	2d01      	cmp	r5, #1
   2765e:	d19c      	bne.n	2759a <gnss_interface_setopt+0x5a>
   27660:	2202      	movs	r2, #2
   27662:	781b      	ldrb	r3, [r3, #0]
   27664:	9202      	str	r2, [sp, #8]
   27666:	f88d 300d 	strb.w	r3, [sp, #13]
   2766a:	e7aa      	b.n	275c2 <gnss_interface_setopt+0x82>
   2766c:	2d01      	cmp	r5, #1
   2766e:	d194      	bne.n	2759a <gnss_interface_setopt+0x5a>
   27670:	2240      	movs	r2, #64	; 0x40
   27672:	781b      	ldrb	r3, [r3, #0]
   27674:	9202      	str	r2, [sp, #8]
   27676:	f88d 3015 	strb.w	r3, [sp, #21]
   2767a:	e7a2      	b.n	275c2 <gnss_interface_setopt+0x82>
   2767c:	6822      	ldr	r2, [r4, #0]
   2767e:	b292      	uxth	r2, r2
   27680:	2a02      	cmp	r2, #2
   27682:	f47f af6d 	bne.w	27560 <gnss_interface_setopt+0x20>
   27686:	2d04      	cmp	r5, #4
   27688:	d187      	bne.n	2759a <gnss_interface_setopt+0x5a>
   2768a:	2201      	movs	r2, #1
   2768c:	681b      	ldr	r3, [r3, #0]
   2768e:	f88d 2008 	strb.w	r2, [sp, #8]
   27692:	f8cd 3009 	str.w	r3, [sp, #9]
   27696:	6823      	ldr	r3, [r4, #0]
   27698:	0c1b      	lsrs	r3, r3, #16
   2769a:	041b      	lsls	r3, r3, #16
   2769c:	f043 0303 	orr.w	r3, r3, #3
   276a0:	6023      	str	r3, [r4, #0]
   276a2:	f241 0004 	movw	r0, #4100	; 0x1004
   276a6:	e78e      	b.n	275c6 <gnss_interface_setopt+0x86>
   276a8:	6822      	ldr	r2, [r4, #0]
   276aa:	b292      	uxth	r2, r2
   276ac:	2a04      	cmp	r2, #4
   276ae:	d004      	beq.n	276ba <gnss_interface_setopt+0x17a>
   276b0:	6822      	ldr	r2, [r4, #0]
   276b2:	b292      	uxth	r2, r2
   276b4:	2a02      	cmp	r2, #2
   276b6:	f47f af53 	bne.w	27560 <gnss_interface_setopt+0x20>
   276ba:	2200      	movs	r2, #0
   276bc:	2d04      	cmp	r5, #4
   276be:	f88d 2008 	strb.w	r2, [sp, #8]
   276c2:	f47f af6a 	bne.w	2759a <gnss_interface_setopt+0x5a>
   276c6:	681b      	ldr	r3, [r3, #0]
   276c8:	f8cd 3009 	str.w	r3, [sp, #9]
   276cc:	e7e9      	b.n	276a2 <gnss_interface_setopt+0x162>
   276ce:	6823      	ldr	r3, [r4, #0]
   276d0:	b29b      	uxth	r3, r3
   276d2:	2b04      	cmp	r3, #4
   276d4:	f47f af44 	bne.w	27560 <gnss_interface_setopt+0x20>
   276d8:	2302      	movs	r3, #2
   276da:	f88d 3008 	strb.w	r3, [sp, #8]
   276de:	2300      	movs	r3, #0
   276e0:	f88d 3009 	strb.w	r3, [sp, #9]
   276e4:	f88d 300a 	strb.w	r3, [sp, #10]
   276e8:	f88d 300b 	strb.w	r3, [sp, #11]
   276ec:	f88d 300c 	strb.w	r3, [sp, #12]
   276f0:	e7d7      	b.n	276a2 <gnss_interface_setopt+0x162>
   276f2:	6823      	ldr	r3, [r4, #0]
   276f4:	b29b      	uxth	r3, r3
   276f6:	2b04      	cmp	r3, #4
   276f8:	f47f af32 	bne.w	27560 <gnss_interface_setopt+0x20>
   276fc:	2303      	movs	r3, #3
   276fe:	e7ec      	b.n	276da <gnss_interface_setopt+0x19a>
   27700:	6823      	ldr	r3, [r4, #0]
   27702:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   27706:	6023      	str	r3, [r4, #0]
   27708:	e72a      	b.n	27560 <gnss_interface_setopt+0x20>
   2770a:	2e08      	cmp	r6, #8
   2770c:	d184      	bne.n	27618 <gnss_interface_setopt+0xd8>
   2770e:	4b07      	ldr	r3, [pc, #28]	; (2772c <gnss_interface_setopt+0x1ec>)
   27710:	6818      	ldr	r0, [r3, #0]
   27712:	6803      	ldr	r3, [r0, #0]
   27714:	691b      	ldr	r3, [r3, #16]
   27716:	4798      	blx	r3
   27718:	e77e      	b.n	27618 <gnss_interface_setopt+0xd8>
   2771a:	bf00      	nop
   2771c:	20016b30 	.word	0x20016b30
   27720:	49765443 	.word	0x49765443
   27724:	200149b8 	.word	0x200149b8
   27728:	20016b34 	.word	0x20016b34
   2772c:	20016b38 	.word	0x20016b38

00027730 <gnss_interface_getopt>:
   27730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27734:	4d44      	ldr	r5, [pc, #272]	; (27848 <gnss_interface_getopt+0x118>)
   27736:	b087      	sub	sp, #28
   27738:	682c      	ldr	r4, [r5, #0]
   2773a:	461e      	mov	r6, r3
   2773c:	b2a4      	uxth	r4, r4
   2773e:	2c02      	cmp	r4, #2
   27740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27742:	d001      	beq.n	27748 <gnss_interface_getopt+0x18>
   27744:	200e      	movs	r0, #14
   27746:	e003      	b.n	27750 <gnss_interface_getopt+0x20>
   27748:	682c      	ldr	r4, [r5, #0]
   2774a:	03e7      	lsls	r7, r4, #15
   2774c:	d508      	bpl.n	27760 <gnss_interface_getopt+0x30>
   2774e:	2005      	movs	r0, #5
   27750:	f7f8 f88e 	bl	1f870 <nrf_modem_os_errno_set>
   27754:	f04f 34ff 	mov.w	r4, #4294967295
   27758:	4620      	mov	r0, r4
   2775a:	b007      	add	sp, #28
   2775c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27760:	682c      	ldr	r4, [r5, #0]
   27762:	01e4      	lsls	r4, r4, #7
   27764:	d501      	bpl.n	2776a <gnss_interface_getopt+0x3a>
   27766:	2073      	movs	r0, #115	; 0x73
   27768:	e7f2      	b.n	27750 <gnss_interface_getopt+0x20>
   2776a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2776e:	d001      	beq.n	27774 <gnss_interface_getopt+0x44>
   27770:	202a      	movs	r0, #42	; 0x2a
   27772:	e7ed      	b.n	27750 <gnss_interface_getopt+0x20>
   27774:	4935      	ldr	r1, [pc, #212]	; (2784c <gnss_interface_getopt+0x11c>)
   27776:	4288      	cmp	r0, r1
   27778:	d001      	beq.n	2777e <gnss_interface_getopt+0x4e>
   2777a:	2009      	movs	r0, #9
   2777c:	e7e8      	b.n	27750 <gnss_interface_getopt+0x20>
   2777e:	b106      	cbz	r6, 27782 <gnss_interface_getopt+0x52>
   27780:	b90b      	cbnz	r3, 27786 <gnss_interface_getopt+0x56>
   27782:	2016      	movs	r0, #22
   27784:	e7e4      	b.n	27750 <gnss_interface_getopt+0x20>
   27786:	1e57      	subs	r7, r2, #1
   27788:	2f05      	cmp	r7, #5
   2778a:	d8fa      	bhi.n	27782 <gnss_interface_getopt+0x52>
   2778c:	e8df f007 	tbb	[pc, r7]
   27790:	03310303 	.word	0x03310303
   27794:	3131      	.short	0x3131
   27796:	681b      	ldr	r3, [r3, #0]
   27798:	2b02      	cmp	r3, #2
   2779a:	d1f2      	bne.n	27782 <gnss_interface_getopt+0x52>
   2779c:	682b      	ldr	r3, [r5, #0]
   2779e:	2214      	movs	r2, #20
   277a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   277a4:	2100      	movs	r1, #0
   277a6:	a801      	add	r0, sp, #4
   277a8:	602b      	str	r3, [r5, #0]
   277aa:	f00d ff0c 	bl	355c6 <memset>
   277ae:	2214      	movs	r2, #20
   277b0:	f241 1002 	movw	r0, #4354	; 0x1102
   277b4:	a901      	add	r1, sp, #4
   277b6:	f7ff fcd7 	bl	27168 <send_message>
   277ba:	4604      	mov	r4, r0
   277bc:	b9e0      	cbnz	r0, 277f8 <gnss_interface_getopt+0xc8>
   277be:	f8df 9090 	ldr.w	r9, [pc, #144]	; 27850 <gnss_interface_getopt+0x120>
   277c2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2784c <gnss_interface_getopt+0x11c>
   277c6:	4649      	mov	r1, r9
   277c8:	4640      	mov	r0, r8
   277ca:	f7f7 ff99 	bl	1f700 <nrf_modem_os_timedwait>
   277ce:	682b      	ldr	r3, [r5, #0]
   277d0:	01d9      	lsls	r1, r3, #7
   277d2:	d4f8      	bmi.n	277c6 <gnss_interface_getopt+0x96>
   277d4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 27854 <gnss_interface_getopt+0x124>
   277d8:	f8d8 3000 	ldr.w	r3, [r8]
   277dc:	b1db      	cbz	r3, 27816 <gnss_interface_getopt+0xe6>
   277de:	682a      	ldr	r2, [r5, #0]
   277e0:	0192      	lsls	r2, r2, #6
   277e2:	d518      	bpl.n	27816 <gnss_interface_getopt+0xe6>
   277e4:	2f05      	cmp	r7, #5
   277e6:	d828      	bhi.n	2783a <gnss_interface_getopt+0x10a>
   277e8:	e8df f007 	tbb	[pc, r7]
   277ec:	201d1a0b 	.word	0x201d1a0b
   277f0:	2523      	.short	0x2523
   277f2:	681b      	ldr	r3, [r3, #0]
   277f4:	2b01      	cmp	r3, #1
   277f6:	e7d0      	b.n	2779a <gnss_interface_getopt+0x6a>
   277f8:	682b      	ldr	r3, [r5, #0]
   277fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   277fe:	602b      	str	r3, [r5, #0]
   27800:	e7a0      	b.n	27744 <gnss_interface_getopt+0x14>
   27802:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   27806:	8033      	strh	r3, [r6, #0]
   27808:	f8d8 0000 	ldr.w	r0, [r8]
   2780c:	f00c fb6d 	bl	33eea <rpc_gnss_client_data_free>
   27810:	2300      	movs	r3, #0
   27812:	f8c8 3000 	str.w	r3, [r8]
   27816:	682b      	ldr	r3, [r5, #0]
   27818:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2781c:	602b      	str	r3, [r5, #0]
   2781e:	e79b      	b.n	27758 <gnss_interface_getopt+0x28>
   27820:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   27824:	e7ef      	b.n	27806 <gnss_interface_getopt+0xd6>
   27826:	7b9b      	ldrb	r3, [r3, #14]
   27828:	7033      	strb	r3, [r6, #0]
   2782a:	e7ed      	b.n	27808 <gnss_interface_getopt+0xd8>
   2782c:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   27830:	e7e9      	b.n	27806 <gnss_interface_getopt+0xd6>
   27832:	7b1b      	ldrb	r3, [r3, #12]
   27834:	e7f8      	b.n	27828 <gnss_interface_getopt+0xf8>
   27836:	7b5b      	ldrb	r3, [r3, #13]
   27838:	e7f6      	b.n	27828 <gnss_interface_getopt+0xf8>
   2783a:	2016      	movs	r0, #22
   2783c:	f7f8 f818 	bl	1f870 <nrf_modem_os_errno_set>
   27840:	f04f 34ff 	mov.w	r4, #4294967295
   27844:	e7e0      	b.n	27808 <gnss_interface_getopt+0xd8>
   27846:	bf00      	nop
   27848:	20016b30 	.word	0x20016b30
   2784c:	49765443 	.word	0x49765443
   27850:	200149b8 	.word	0x200149b8
   27854:	20016b34 	.word	0x20016b34

00027858 <gnss_interface_init>:
   27858:	b510      	push	{r4, lr}
   2785a:	2400      	movs	r4, #0
   2785c:	4a0a      	ldr	r2, [pc, #40]	; (27888 <gnss_interface_init+0x30>)
   2785e:	480b      	ldr	r0, [pc, #44]	; (2788c <gnss_interface_init+0x34>)
   27860:	6811      	ldr	r1, [r2, #0]
   27862:	4b0b      	ldr	r3, [pc, #44]	; (27890 <gnss_interface_init+0x38>)
   27864:	4001      	ands	r1, r0
   27866:	801c      	strh	r4, [r3, #0]
   27868:	4b0a      	ldr	r3, [pc, #40]	; (27894 <gnss_interface_init+0x3c>)
   2786a:	6011      	str	r1, [r2, #0]
   2786c:	601c      	str	r4, [r3, #0]
   2786e:	6813      	ldr	r3, [r2, #0]
   27870:	4003      	ands	r3, r0
   27872:	f043 0301 	orr.w	r3, r3, #1
   27876:	6013      	str	r3, [r2, #0]
   27878:	2201      	movs	r2, #1
   2787a:	4b07      	ldr	r3, [pc, #28]	; (27898 <gnss_interface_init+0x40>)
   2787c:	4807      	ldr	r0, [pc, #28]	; (2789c <gnss_interface_init+0x44>)
   2787e:	701a      	strb	r2, [r3, #0]
   27880:	f7fd fc00 	bl	25084 <rpc_gnss_client_set_handler>
   27884:	4620      	mov	r0, r4
   27886:	bd10      	pop	{r4, pc}
   27888:	20016b30 	.word	0x20016b30
   2788c:	ffff0000 	.word	0xffff0000
   27890:	2001ac0c 	.word	0x2001ac0c
   27894:	20016b34 	.word	0x20016b34
   27898:	2001e647 	.word	0x2001e647
   2789c:	00026fe9 	.word	0x00026fe9

000278a0 <gnss_interface_open>:
   278a0:	4b16      	ldr	r3, [pc, #88]	; (278fc <gnss_interface_open+0x5c>)
   278a2:	4608      	mov	r0, r1
   278a4:	781b      	ldrb	r3, [r3, #0]
   278a6:	b510      	push	{r4, lr}
   278a8:	b92b      	cbnz	r3, 278b6 <gnss_interface_open+0x16>
   278aa:	2070      	movs	r0, #112	; 0x70
   278ac:	f7f7 ffe0 	bl	1f870 <nrf_modem_os_errno_set>
   278b0:	f04f 30ff 	mov.w	r0, #4294967295
   278b4:	e01f      	b.n	278f6 <gnss_interface_open+0x56>
   278b6:	2902      	cmp	r1, #2
   278b8:	d001      	beq.n	278be <gnss_interface_open+0x1e>
   278ba:	2029      	movs	r0, #41	; 0x29
   278bc:	e7f6      	b.n	278ac <gnss_interface_open+0xc>
   278be:	4c10      	ldr	r4, [pc, #64]	; (27900 <gnss_interface_open+0x60>)
   278c0:	6823      	ldr	r3, [r4, #0]
   278c2:	b29b      	uxth	r3, r3
   278c4:	2b01      	cmp	r3, #1
   278c6:	d001      	beq.n	278cc <gnss_interface_open+0x2c>
   278c8:	2005      	movs	r0, #5
   278ca:	e7ef      	b.n	278ac <gnss_interface_open+0xc>
   278cc:	6823      	ldr	r3, [r4, #0]
   278ce:	2200      	movs	r2, #0
   278d0:	0c1b      	lsrs	r3, r3, #16
   278d2:	041b      	lsls	r3, r3, #16
   278d4:	f043 0302 	orr.w	r3, r3, #2
   278d8:	490a      	ldr	r1, [pc, #40]	; (27904 <gnss_interface_open+0x64>)
   278da:	6023      	str	r3, [r4, #0]
   278dc:	f000 fd4a 	bl	28374 <packet_handler_create>
   278e0:	4a09      	ldr	r2, [pc, #36]	; (27908 <gnss_interface_open+0x68>)
   278e2:	6010      	str	r0, [r2, #0]
   278e4:	b140      	cbz	r0, 278f8 <gnss_interface_open+0x58>
   278e6:	6822      	ldr	r2, [r4, #0]
   278e8:	6803      	ldr	r3, [r0, #0]
   278ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   278ee:	681b      	ldr	r3, [r3, #0]
   278f0:	6022      	str	r2, [r4, #0]
   278f2:	4798      	blx	r3
   278f4:	4805      	ldr	r0, [pc, #20]	; (2790c <gnss_interface_open+0x6c>)
   278f6:	bd10      	pop	{r4, pc}
   278f8:	200e      	movs	r0, #14
   278fa:	e7d7      	b.n	278ac <gnss_interface_open+0xc>
   278fc:	2001e647 	.word	0x2001e647
   27900:	20016b30 	.word	0x20016b30
   27904:	00034aeb 	.word	0x00034aeb
   27908:	20016b38 	.word	0x20016b38
   2790c:	49765443 	.word	0x49765443

00027910 <gnss_interface_close>:
   27910:	b530      	push	{r4, r5, lr}
   27912:	4b14      	ldr	r3, [pc, #80]	; (27964 <gnss_interface_close+0x54>)
   27914:	b085      	sub	sp, #20
   27916:	4298      	cmp	r0, r3
   27918:	d006      	beq.n	27928 <gnss_interface_close+0x18>
   2791a:	2009      	movs	r0, #9
   2791c:	f7f7 ffa8 	bl	1f870 <nrf_modem_os_errno_set>
   27920:	f04f 30ff 	mov.w	r0, #4294967295
   27924:	b005      	add	sp, #20
   27926:	bd30      	pop	{r4, r5, pc}
   27928:	4c0f      	ldr	r4, [pc, #60]	; (27968 <gnss_interface_close+0x58>)
   2792a:	6823      	ldr	r3, [r4, #0]
   2792c:	b29b      	uxth	r3, r3
   2792e:	2b04      	cmp	r3, #4
   27930:	d108      	bne.n	27944 <gnss_interface_close+0x34>
   27932:	2200      	movs	r2, #0
   27934:	9300      	str	r3, [sp, #0]
   27936:	9203      	str	r2, [sp, #12]
   27938:	f44f 7101 	mov.w	r1, #516	; 0x204
   2793c:	2208      	movs	r2, #8
   2793e:	ab03      	add	r3, sp, #12
   27940:	f00d fbc2 	bl	350c8 <nrf_setsockopt>
   27944:	4d09      	ldr	r5, [pc, #36]	; (2796c <gnss_interface_close+0x5c>)
   27946:	6828      	ldr	r0, [r5, #0]
   27948:	b118      	cbz	r0, 27952 <gnss_interface_close+0x42>
   2794a:	f00d fa75 	bl	34e38 <packet_handler_delete>
   2794e:	2300      	movs	r3, #0
   27950:	602b      	str	r3, [r5, #0]
   27952:	6823      	ldr	r3, [r4, #0]
   27954:	2000      	movs	r0, #0
   27956:	0c1b      	lsrs	r3, r3, #16
   27958:	041b      	lsls	r3, r3, #16
   2795a:	f043 0301 	orr.w	r3, r3, #1
   2795e:	6023      	str	r3, [r4, #0]
   27960:	e7e0      	b.n	27924 <gnss_interface_close+0x14>
   27962:	bf00      	nop
   27964:	49765443 	.word	0x49765443
   27968:	20016b30 	.word	0x20016b30
   2796c:	20016b38 	.word	0x20016b38

00027970 <handle_verify_and_covert>:
   27970:	4a0b      	ldr	r2, [pc, #44]	; (279a0 <handle_verify_and_covert+0x30>)
   27972:	0c03      	lsrs	r3, r0, #16
   27974:	041b      	lsls	r3, r3, #16
   27976:	4293      	cmp	r3, r2
   27978:	d10f      	bne.n	2799a <handle_verify_and_covert+0x2a>
   2797a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   2797e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   27982:	2809      	cmp	r0, #9
   27984:	dc09      	bgt.n	2799a <handle_verify_and_covert+0x2a>
   27986:	4b07      	ldr	r3, [pc, #28]	; (279a4 <handle_verify_and_covert+0x34>)
   27988:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2798c:	b12b      	cbz	r3, 2799a <handle_verify_and_covert+0x2a>
   2798e:	689b      	ldr	r3, [r3, #8]
   27990:	2b00      	cmp	r3, #0
   27992:	bf08      	it	eq
   27994:	f06f 0008 	mvneq.w	r0, #8
   27998:	4770      	bx	lr
   2799a:	f06f 0008 	mvn.w	r0, #8
   2799e:	4770      	bx	lr
   279a0:	789a0000 	.word	0x789a0000
   279a4:	20016b40 	.word	0x20016b40

000279a8 <command_write>:
   279a8:	4b0c      	ldr	r3, [pc, #48]	; (279dc <command_write+0x34>)
   279aa:	b513      	push	{r0, r1, r4, lr}
   279ac:	480c      	ldr	r0, [pc, #48]	; (279e0 <command_write+0x38>)
   279ae:	681c      	ldr	r4, [r3, #0]
   279b0:	f7e9 fda6 	bl	11500 <strlen>
   279b4:	2300      	movs	r3, #0
   279b6:	4602      	mov	r2, r0
   279b8:	e9cd 3300 	strd	r3, r3, [sp]
   279bc:	4908      	ldr	r1, [pc, #32]	; (279e0 <command_write+0x38>)
   279be:	4620      	mov	r0, r4
   279c0:	f00c ff87 	bl	348d2 <at_interface_write>
   279c4:	4604      	mov	r4, r0
   279c6:	4806      	ldr	r0, [pc, #24]	; (279e0 <command_write+0x38>)
   279c8:	f7e9 fd9a 	bl	11500 <strlen>
   279cc:	42a0      	cmp	r0, r4
   279ce:	bf14      	ite	ne
   279d0:	f06f 0004 	mvnne.w	r0, #4
   279d4:	2000      	moveq	r0, #0
   279d6:	b002      	add	sp, #8
   279d8:	bd10      	pop	{r4, pc}
   279da:	bf00      	nop
   279dc:	20016b3c 	.word	0x20016b3c
   279e0:	2001e649 	.word	0x2001e649

000279e4 <event_wait>:
   279e4:	2300      	movs	r3, #0
   279e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   279ea:	e9cd 3300 	strd	r3, r3, [sp]
   279ee:	4606      	mov	r6, r0
   279f0:	4818      	ldr	r0, [pc, #96]	; (27a54 <event_wait+0x70>)
   279f2:	460d      	mov	r5, r1
   279f4:	f44f 7280 	mov.w	r2, #256	; 0x100
   279f8:	4917      	ldr	r1, [pc, #92]	; (27a58 <event_wait+0x74>)
   279fa:	6800      	ldr	r0, [r0, #0]
   279fc:	f00c ffd3 	bl	349a6 <at_interface_read>
   27a00:	4c16      	ldr	r4, [pc, #88]	; (27a5c <event_wait+0x78>)
   27a02:	4607      	mov	r7, r0
   27a04:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   27a08:	4640      	mov	r0, r8
   27a0a:	f7e9 fd79 	bl	11500 <strlen>
   27a0e:	4287      	cmp	r7, r0
   27a10:	4602      	mov	r2, r0
   27a12:	db0d      	blt.n	27a30 <event_wait+0x4c>
   27a14:	4640      	mov	r0, r8
   27a16:	4910      	ldr	r1, [pc, #64]	; (27a58 <event_wait+0x74>)
   27a18:	f00d ff1a 	bl	35850 <strncmp>
   27a1c:	b940      	cbnz	r0, 27a30 <event_wait+0x4c>
   27a1e:	4630      	mov	r0, r6
   27a20:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   27a24:	6863      	ldr	r3, [r4, #4]
   27a26:	490c      	ldr	r1, [pc, #48]	; (27a58 <event_wait+0x74>)
   27a28:	b002      	add	sp, #8
   27a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27a2e:	4718      	bx	r3
   27a30:	480b      	ldr	r0, [pc, #44]	; (27a60 <event_wait+0x7c>)
   27a32:	f7e9 fd65 	bl	11500 <strlen>
   27a36:	4908      	ldr	r1, [pc, #32]	; (27a58 <event_wait+0x74>)
   27a38:	4602      	mov	r2, r0
   27a3a:	4809      	ldr	r0, [pc, #36]	; (27a60 <event_wait+0x7c>)
   27a3c:	f00d ff08 	bl	35850 <strncmp>
   27a40:	2800      	cmp	r0, #0
   27a42:	bf14      	ite	ne
   27a44:	f06f 0004 	mvnne.w	r0, #4
   27a48:	f06f 0007 	mvneq.w	r0, #7
   27a4c:	b002      	add	sp, #8
   27a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27a52:	bf00      	nop
   27a54:	20016b3c 	.word	0x20016b3c
   27a58:	2001e649 	.word	0x2001e649
   27a5c:	00037138 	.word	0x00037138
   27a60:	0003de87 	.word	0x0003de87

00027a64 <pdn_state_get_parser>:
   27a64:	2300      	movs	r3, #0
   27a66:	b530      	push	{r4, r5, lr}
   27a68:	4605      	mov	r5, r0
   27a6a:	460c      	mov	r4, r1
   27a6c:	b085      	sub	sp, #20
   27a6e:	4608      	mov	r0, r1
   27a70:	e9cd 3300 	strd	r3, r3, [sp]
   27a74:	e9cd 3302 	strd	r3, r3, [sp, #8]
   27a78:	f00d f845 	bl	34b06 <spaces_remove>
   27a7c:	4b08      	ldr	r3, [pc, #32]	; (27aa0 <pdn_state_get_parser+0x3c>)
   27a7e:	4a09      	ldr	r2, [pc, #36]	; (27aa4 <pdn_state_get_parser+0x40>)
   27a80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   27a84:	2110      	movs	r1, #16
   27a86:	681b      	ldr	r3, [r3, #0]
   27a88:	4668      	mov	r0, sp
   27a8a:	f005 fbcf 	bl	2d22c <sniprintf>
   27a8e:	4669      	mov	r1, sp
   27a90:	4620      	mov	r0, r4
   27a92:	f00d ff0f 	bl	358b4 <strstr>
   27a96:	3800      	subs	r0, #0
   27a98:	bf18      	it	ne
   27a9a:	2001      	movne	r0, #1
   27a9c:	b005      	add	sp, #20
   27a9e:	bd30      	pop	{r4, r5, pc}
   27aa0:	20016b40 	.word	0x20016b40
   27aa4:	0003de8d 	.word	0x0003de8d

00027aa8 <pdn_id_get_parser>:
   27aa8:	b510      	push	{r4, lr}
   27aaa:	4604      	mov	r4, r0
   27aac:	4608      	mov	r0, r1
   27aae:	f00d f82a 	bl	34b06 <spaces_remove>
   27ab2:	213a      	movs	r1, #58	; 0x3a
   27ab4:	f00d feb7 	bl	35826 <strchr>
   27ab8:	b130      	cbz	r0, 27ac8 <pdn_id_get_parser+0x20>
   27aba:	3001      	adds	r0, #1
   27abc:	f00d fd43 	bl	35546 <atoi>
   27ac0:	4b02      	ldr	r3, [pc, #8]	; (27acc <pdn_id_get_parser+0x24>)
   27ac2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   27ac6:	6058      	str	r0, [r3, #4]
   27ac8:	2000      	movs	r0, #0
   27aca:	bd10      	pop	{r4, pc}
   27acc:	20016b40 	.word	0x20016b40

00027ad0 <context_create_parser>:
   27ad0:	b510      	push	{r4, lr}
   27ad2:	4604      	mov	r4, r0
   27ad4:	4608      	mov	r0, r1
   27ad6:	f00d f816 	bl	34b06 <spaces_remove>
   27ada:	213a      	movs	r1, #58	; 0x3a
   27adc:	f00d fea3 	bl	35826 <strchr>
   27ae0:	b130      	cbz	r0, 27af0 <context_create_parser+0x20>
   27ae2:	4b04      	ldr	r3, [pc, #16]	; (27af4 <context_create_parser+0x24>)
   27ae4:	3001      	adds	r0, #1
   27ae6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   27aea:	f00d fd2c 	bl	35546 <atoi>
   27aee:	6020      	str	r0, [r4, #0]
   27af0:	2000      	movs	r0, #0
   27af2:	bd10      	pop	{r4, pc}
   27af4:	20016b40 	.word	0x20016b40

00027af8 <connection_free>:
   27af8:	b538      	push	{r3, r4, r5, lr}
   27afa:	4d05      	ldr	r5, [pc, #20]	; (27b10 <connection_free+0x18>)
   27afc:	4604      	mov	r4, r0
   27afe:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   27b02:	f7f8 f86f 	bl	1fbe4 <nrf_modem_os_free>
   27b06:	2300      	movs	r3, #0
   27b08:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   27b0c:	bd38      	pop	{r3, r4, r5, pc}
   27b0e:	bf00      	nop
   27b10:	20016b40 	.word	0x20016b40

00027b14 <pdn_id_get>:
   27b14:	b538      	push	{r3, r4, r5, lr}
   27b16:	4d0e      	ldr	r5, [pc, #56]	; (27b50 <pdn_id_get+0x3c>)
   27b18:	4604      	mov	r4, r0
   27b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
   27b1e:	4b0d      	ldr	r3, [pc, #52]	; (27b54 <pdn_id_get+0x40>)
   27b20:	4a0d      	ldr	r2, [pc, #52]	; (27b58 <pdn_id_get+0x44>)
   27b22:	4628      	mov	r0, r5
   27b24:	f005 fb82 	bl	2d22c <sniprintf>
   27b28:	4b0c      	ldr	r3, [pc, #48]	; (27b5c <pdn_id_get+0x48>)
   27b2a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27b2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   27b32:	4a0b      	ldr	r2, [pc, #44]	; (27b60 <pdn_id_get+0x4c>)
   27b34:	681b      	ldr	r3, [r3, #0]
   27b36:	4428      	add	r0, r5
   27b38:	f005 fb78 	bl	2d22c <sniprintf>
   27b3c:	f7ff ff34 	bl	279a8 <command_write>
   27b40:	b928      	cbnz	r0, 27b4e <pdn_id_get+0x3a>
   27b42:	4620      	mov	r0, r4
   27b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27b48:	2102      	movs	r1, #2
   27b4a:	f7ff bf4b 	b.w	279e4 <event_wait>
   27b4e:	bd38      	pop	{r3, r4, r5, pc}
   27b50:	2001e649 	.word	0x2001e649
   27b54:	0003de99 	.word	0x0003de99
   27b58:	0003b8db 	.word	0x0003b8db
   27b5c:	20016b40 	.word	0x20016b40
   27b60:	00037717 	.word	0x00037717

00027b64 <pdn_interface_init>:
   27b64:	b538      	push	{r3, r4, r5, lr}
   27b66:	f04f 34ff 	mov.w	r4, #4294967295
   27b6a:	4d0b      	ldr	r5, [pc, #44]	; (27b98 <pdn_interface_init+0x34>)
   27b6c:	2228      	movs	r2, #40	; 0x28
   27b6e:	2100      	movs	r1, #0
   27b70:	480a      	ldr	r0, [pc, #40]	; (27b9c <pdn_interface_init+0x38>)
   27b72:	602c      	str	r4, [r5, #0]
   27b74:	f00d fd27 	bl	355c6 <memset>
   27b78:	f240 2201 	movw	r2, #513	; 0x201
   27b7c:	2102      	movs	r1, #2
   27b7e:	2066      	movs	r0, #102	; 0x66
   27b80:	f7ff f850 	bl	26c24 <at_interface_open>
   27b84:	2800      	cmp	r0, #0
   27b86:	bfa4      	itt	ge
   27b88:	2201      	movge	r2, #1
   27b8a:	4b05      	ldrge	r3, [pc, #20]	; (27ba0 <pdn_interface_init+0x3c>)
   27b8c:	6028      	str	r0, [r5, #0]
   27b8e:	bfa6      	itte	ge
   27b90:	701a      	strbge	r2, [r3, #0]
   27b92:	2000      	movge	r0, #0
   27b94:	4620      	movlt	r0, r4
   27b96:	bd38      	pop	{r3, r4, r5, pc}
   27b98:	20016b3c 	.word	0x20016b3c
   27b9c:	20016b40 	.word	0x20016b40
   27ba0:	2001e648 	.word	0x2001e648

00027ba4 <pdn_interface_open>:
   27ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ba6:	4b28      	ldr	r3, [pc, #160]	; (27c48 <pdn_interface_open+0xa4>)
   27ba8:	781b      	ldrb	r3, [r3, #0]
   27baa:	b92b      	cbnz	r3, 27bb8 <pdn_interface_open+0x14>
   27bac:	2070      	movs	r0, #112	; 0x70
   27bae:	f7f7 fe5f 	bl	1f870 <nrf_modem_os_errno_set>
   27bb2:	f04f 30ff 	mov.w	r0, #4294967295
   27bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27bb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   27bbc:	d141      	bne.n	27c42 <pdn_interface_open+0x9e>
   27bbe:	4b23      	ldr	r3, [pc, #140]	; (27c4c <pdn_interface_open+0xa8>)
   27bc0:	2500      	movs	r5, #0
   27bc2:	461e      	mov	r6, r3
   27bc4:	f853 4b04 	ldr.w	r4, [r3], #4
   27bc8:	bb24      	cbnz	r4, 27c14 <pdn_interface_open+0x70>
   27bca:	2020      	movs	r0, #32
   27bcc:	f7f8 f802 	bl	1fbd4 <nrf_modem_os_alloc>
   27bd0:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   27bd4:	b308      	cbz	r0, 27c1a <pdn_interface_open+0x76>
   27bd6:	4621      	mov	r1, r4
   27bd8:	2220      	movs	r2, #32
   27bda:	f00d fcf4 	bl	355c6 <memset>
   27bde:	2203      	movs	r2, #3
   27be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   27be4:	2701      	movs	r7, #1
   27be6:	60da      	str	r2, [r3, #12]
   27be8:	f04f 32ff 	mov.w	r2, #4294967295
   27bec:	f44f 7180 	mov.w	r1, #256	; 0x100
   27bf0:	605a      	str	r2, [r3, #4]
   27bf2:	609f      	str	r7, [r3, #8]
   27bf4:	4a16      	ldr	r2, [pc, #88]	; (27c50 <pdn_interface_open+0xac>)
   27bf6:	4b17      	ldr	r3, [pc, #92]	; (27c54 <pdn_interface_open+0xb0>)
   27bf8:	4817      	ldr	r0, [pc, #92]	; (27c58 <pdn_interface_open+0xb4>)
   27bfa:	f005 fb17 	bl	2d22c <sniprintf>
   27bfe:	f7ff fed3 	bl	279a8 <command_write>
   27c02:	4604      	mov	r4, r0
   27c04:	b160      	cbz	r0, 27c20 <pdn_interface_open+0x7c>
   27c06:	4628      	mov	r0, r5
   27c08:	f7ff ff76 	bl	27af8 <connection_free>
   27c0c:	2c00      	cmp	r4, #0
   27c0e:	da13      	bge.n	27c38 <pdn_interface_open+0x94>
   27c10:	4260      	negs	r0, r4
   27c12:	e7cc      	b.n	27bae <pdn_interface_open+0xa>
   27c14:	3501      	adds	r5, #1
   27c16:	2d0a      	cmp	r5, #10
   27c18:	d1d4      	bne.n	27bc4 <pdn_interface_open+0x20>
   27c1a:	f06f 040b 	mvn.w	r4, #11
   27c1e:	e7f7      	b.n	27c10 <pdn_interface_open+0x6c>
   27c20:	4639      	mov	r1, r7
   27c22:	4628      	mov	r0, r5
   27c24:	f7ff fede 	bl	279e4 <event_wait>
   27c28:	4604      	mov	r4, r0
   27c2a:	2800      	cmp	r0, #0
   27c2c:	d1eb      	bne.n	27c06 <pdn_interface_open+0x62>
   27c2e:	2202      	movs	r2, #2
   27c30:	462c      	mov	r4, r5
   27c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   27c36:	609a      	str	r2, [r3, #8]
   27c38:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   27c3c:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   27c40:	e7b9      	b.n	27bb6 <pdn_interface_open+0x12>
   27c42:	2029      	movs	r0, #41	; 0x29
   27c44:	e7b3      	b.n	27bae <pdn_interface_open+0xa>
   27c46:	bf00      	nop
   27c48:	2001e648 	.word	0x2001e648
   27c4c:	20016b40 	.word	0x20016b40
   27c50:	0003b8db 	.word	0x0003b8db
   27c54:	0003dea7 	.word	0x0003dea7
   27c58:	2001e649 	.word	0x2001e649

00027c5c <pdn_interface_connect>:
   27c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c60:	4690      	mov	r8, r2
   27c62:	4689      	mov	r9, r1
   27c64:	b109      	cbz	r1, 27c6a <pdn_interface_connect+0xe>
   27c66:	2a64      	cmp	r2, #100	; 0x64
   27c68:	d905      	bls.n	27c76 <pdn_interface_connect+0x1a>
   27c6a:	2016      	movs	r0, #22
   27c6c:	f7f7 fe00 	bl	1f870 <nrf_modem_os_errno_set>
   27c70:	f04f 30ff 	mov.w	r0, #4294967295
   27c74:	e0f1      	b.n	27e5a <pdn_interface_connect+0x1fe>
   27c76:	f7ff fe7b 	bl	27970 <handle_verify_and_covert>
   27c7a:	1e04      	subs	r4, r0, #0
   27c7c:	da01      	bge.n	27c82 <pdn_interface_connect+0x26>
   27c7e:	4260      	negs	r0, r4
   27c80:	e7f4      	b.n	27c6c <pdn_interface_connect+0x10>
   27c82:	4e78      	ldr	r6, [pc, #480]	; (27e64 <pdn_interface_connect+0x208>)
   27c84:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27c88:	689b      	ldr	r3, [r3, #8]
   27c8a:	2b02      	cmp	r3, #2
   27c8c:	d001      	beq.n	27c92 <pdn_interface_connect+0x36>
   27c8e:	2009      	movs	r0, #9
   27c90:	e7ec      	b.n	27c6c <pdn_interface_connect+0x10>
   27c92:	4f75      	ldr	r7, [pc, #468]	; (27e68 <pdn_interface_connect+0x20c>)
   27c94:	f44f 7180 	mov.w	r1, #256	; 0x100
   27c98:	4b74      	ldr	r3, [pc, #464]	; (27e6c <pdn_interface_connect+0x210>)
   27c9a:	4a75      	ldr	r2, [pc, #468]	; (27e70 <pdn_interface_connect+0x214>)
   27c9c:	4638      	mov	r0, r7
   27c9e:	f005 fac5 	bl	2d22c <sniprintf>
   27ca2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27ca6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27caa:	4605      	mov	r5, r0
   27cac:	681b      	ldr	r3, [r3, #0]
   27cae:	4a71      	ldr	r2, [pc, #452]	; (27e74 <pdn_interface_connect+0x218>)
   27cb0:	1838      	adds	r0, r7, r0
   27cb2:	f005 fabb 	bl	2d22c <sniprintf>
   27cb6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27cba:	4405      	add	r5, r0
   27cbc:	68db      	ldr	r3, [r3, #12]
   27cbe:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   27cc2:	f003 0203 	and.w	r2, r3, #3
   27cc6:	2a03      	cmp	r2, #3
   27cc8:	eb07 0005 	add.w	r0, r7, r5
   27ccc:	d15b      	bne.n	27d86 <pdn_interface_connect+0x12a>
   27cce:	4b6a      	ldr	r3, [pc, #424]	; (27e78 <pdn_interface_connect+0x21c>)
   27cd0:	4a6a      	ldr	r2, [pc, #424]	; (27e7c <pdn_interface_connect+0x220>)
   27cd2:	f005 faab 	bl	2d22c <sniprintf>
   27cd6:	f108 0303 	add.w	r3, r8, #3
   27cda:	4405      	add	r5, r0
   27cdc:	442b      	add	r3, r5
   27cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   27ce2:	f300 80bc 	bgt.w	27e5e <pdn_interface_connect+0x202>
   27ce6:	f04f 0b22 	mov.w	fp, #34	; 0x22
   27cea:	f105 0a01 	add.w	sl, r5, #1
   27cee:	4642      	mov	r2, r8
   27cf0:	4649      	mov	r1, r9
   27cf2:	eb07 000a 	add.w	r0, r7, sl
   27cf6:	f807 b005 	strb.w	fp, [r7, r5]
   27cfa:	f00d fdbb 	bl	35874 <strncpy>
   27cfe:	eb08 030a 	add.w	r3, r8, sl
   27d02:	18fa      	adds	r2, r7, r3
   27d04:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   27d08:	b902      	cbnz	r2, 27d0c <pdn_interface_connect+0xb0>
   27d0a:	3b01      	subs	r3, #1
   27d0c:	2200      	movs	r2, #0
   27d0e:	f807 b003 	strb.w	fp, [r7, r3]
   27d12:	443b      	add	r3, r7
   27d14:	705a      	strb	r2, [r3, #1]
   27d16:	f7ff fe47 	bl	279a8 <command_write>
   27d1a:	2800      	cmp	r0, #0
   27d1c:	d17b      	bne.n	27e16 <pdn_interface_connect+0x1ba>
   27d1e:	4601      	mov	r1, r0
   27d20:	4620      	mov	r0, r4
   27d22:	f7ff fe5f 	bl	279e4 <event_wait>
   27d26:	2800      	cmp	r0, #0
   27d28:	d175      	bne.n	27e16 <pdn_interface_connect+0x1ba>
   27d2a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27d2e:	7c1b      	ldrb	r3, [r3, #16]
   27d30:	2b00      	cmp	r3, #0
   27d32:	d133      	bne.n	27d9c <pdn_interface_connect+0x140>
   27d34:	f44f 7180 	mov.w	r1, #256	; 0x100
   27d38:	4b51      	ldr	r3, [pc, #324]	; (27e80 <pdn_interface_connect+0x224>)
   27d3a:	4a4d      	ldr	r2, [pc, #308]	; (27e70 <pdn_interface_connect+0x214>)
   27d3c:	484a      	ldr	r0, [pc, #296]	; (27e68 <pdn_interface_connect+0x20c>)
   27d3e:	f005 fa75 	bl	2d22c <sniprintf>
   27d42:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27d46:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27d4a:	681b      	ldr	r3, [r3, #0]
   27d4c:	4a4d      	ldr	r2, [pc, #308]	; (27e84 <pdn_interface_connect+0x228>)
   27d4e:	4438      	add	r0, r7
   27d50:	f005 fa6c 	bl	2d22c <sniprintf>
   27d54:	f7ff fe28 	bl	279a8 <command_write>
   27d58:	2800      	cmp	r0, #0
   27d5a:	d15c      	bne.n	27e16 <pdn_interface_connect+0x1ba>
   27d5c:	4601      	mov	r1, r0
   27d5e:	4620      	mov	r0, r4
   27d60:	f7ff fe40 	bl	279e4 <event_wait>
   27d64:	2800      	cmp	r0, #0
   27d66:	d156      	bne.n	27e16 <pdn_interface_connect+0x1ba>
   27d68:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   27d6c:	f108 0320 	add.w	r3, r8, #32
   27d70:	6950      	ldr	r0, [r2, #20]
   27d72:	4403      	add	r3, r0
   27d74:	6990      	ldr	r0, [r2, #24]
   27d76:	4418      	add	r0, r3
   27d78:	f7f7 ff2c 	bl	1fbd4 <nrf_modem_os_alloc>
   27d7c:	4605      	mov	r5, r0
   27d7e:	2800      	cmp	r0, #0
   27d80:	d14b      	bne.n	27e1a <pdn_interface_connect+0x1be>
   27d82:	200c      	movs	r0, #12
   27d84:	e772      	b.n	27c6c <pdn_interface_connect+0x10>
   27d86:	f003 0205 	and.w	r2, r3, #5
   27d8a:	2a05      	cmp	r2, #5
   27d8c:	d101      	bne.n	27d92 <pdn_interface_connect+0x136>
   27d8e:	4b3e      	ldr	r3, [pc, #248]	; (27e88 <pdn_interface_connect+0x22c>)
   27d90:	e79e      	b.n	27cd0 <pdn_interface_connect+0x74>
   27d92:	079b      	lsls	r3, r3, #30
   27d94:	bf4c      	ite	mi
   27d96:	4b3d      	ldrmi	r3, [pc, #244]	; (27e8c <pdn_interface_connect+0x230>)
   27d98:	4b3d      	ldrpl	r3, [pc, #244]	; (27e90 <pdn_interface_connect+0x234>)
   27d9a:	e799      	b.n	27cd0 <pdn_interface_connect+0x74>
   27d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
   27da0:	4b3c      	ldr	r3, [pc, #240]	; (27e94 <pdn_interface_connect+0x238>)
   27da2:	4a33      	ldr	r2, [pc, #204]	; (27e70 <pdn_interface_connect+0x214>)
   27da4:	4830      	ldr	r0, [pc, #192]	; (27e68 <pdn_interface_connect+0x20c>)
   27da6:	f005 fa41 	bl	2d22c <sniprintf>
   27daa:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27dae:	4a31      	ldr	r2, [pc, #196]	; (27e74 <pdn_interface_connect+0x218>)
   27db0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27db4:	4605      	mov	r5, r0
   27db6:	681b      	ldr	r3, [r3, #0]
   27db8:	1838      	adds	r0, r7, r0
   27dba:	f005 fa37 	bl	2d22c <sniprintf>
   27dbe:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27dc2:	4405      	add	r5, r0
   27dc4:	7c1b      	ldrb	r3, [r3, #16]
   27dc6:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   27dca:	2b01      	cmp	r3, #1
   27dcc:	bf0c      	ite	eq
   27dce:	4a32      	ldreq	r2, [pc, #200]	; (27e98 <pdn_interface_connect+0x23c>)
   27dd0:	4a32      	ldrne	r2, [pc, #200]	; (27e9c <pdn_interface_connect+0x240>)
   27dd2:	1978      	adds	r0, r7, r5
   27dd4:	f005 fa2a 	bl	2d22c <sniprintf>
   27dd8:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27ddc:	4405      	add	r5, r0
   27dde:	4a27      	ldr	r2, [pc, #156]	; (27e7c <pdn_interface_connect+0x220>)
   27de0:	3320      	adds	r3, #32
   27de2:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   27de6:	1978      	adds	r0, r7, r5
   27de8:	f005 fa20 	bl	2d22c <sniprintf>
   27dec:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   27df0:	4428      	add	r0, r5
   27df2:	695a      	ldr	r2, [r3, #20]
   27df4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27df8:	3220      	adds	r2, #32
   27dfa:	4413      	add	r3, r2
   27dfc:	4438      	add	r0, r7
   27dfe:	4a28      	ldr	r2, [pc, #160]	; (27ea0 <pdn_interface_connect+0x244>)
   27e00:	f005 fa14 	bl	2d22c <sniprintf>
   27e04:	f7ff fdd0 	bl	279a8 <command_write>
   27e08:	b928      	cbnz	r0, 27e16 <pdn_interface_connect+0x1ba>
   27e0a:	4601      	mov	r1, r0
   27e0c:	4620      	mov	r0, r4
   27e0e:	f7ff fde9 	bl	279e4 <event_wait>
   27e12:	2800      	cmp	r0, #0
   27e14:	d08e      	beq.n	27d34 <pdn_interface_connect+0xd8>
   27e16:	4240      	negs	r0, r0
   27e18:	e728      	b.n	27c6c <pdn_interface_connect+0x10>
   27e1a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   27e1e:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   27e22:	441a      	add	r2, r3
   27e24:	3220      	adds	r2, #32
   27e26:	f00d fbae 	bl	35586 <memcpy>
   27e2a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   27e2e:	f7f7 fed9 	bl	1fbe4 <nrf_modem_os_free>
   27e32:	2303      	movs	r3, #3
   27e34:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
   27e38:	60ab      	str	r3, [r5, #8]
   27e3a:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   27e3e:	4403      	add	r3, r0
   27e40:	3320      	adds	r3, #32
   27e42:	4642      	mov	r2, r8
   27e44:	4649      	mov	r1, r9
   27e46:	f8c5 801c 	str.w	r8, [r5, #28]
   27e4a:	18e8      	adds	r0, r5, r3
   27e4c:	f00d fb9b 	bl	35586 <memcpy>
   27e50:	4620      	mov	r0, r4
   27e52:	f7ff fe5f 	bl	27b14 <pdn_id_get>
   27e56:	2800      	cmp	r0, #0
   27e58:	d1dd      	bne.n	27e16 <pdn_interface_connect+0x1ba>
   27e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e5e:	f04f 30ff 	mov.w	r0, #4294967295
   27e62:	e7d8      	b.n	27e16 <pdn_interface_connect+0x1ba>
   27e64:	20016b40 	.word	0x20016b40
   27e68:	2001e649 	.word	0x2001e649
   27e6c:	0003deb3 	.word	0x0003deb3
   27e70:	0003b8db 	.word	0x0003b8db
   27e74:	0003debf 	.word	0x0003debf
   27e78:	0003dec3 	.word	0x0003dec3
   27e7c:	0003deca 	.word	0x0003deca
   27e80:	0003dedc 	.word	0x0003dedc
   27e84:	00037717 	.word	0x00037717
   27e88:	0003ded0 	.word	0x0003ded0
   27e8c:	0003ded7 	.word	0x0003ded7
   27e90:	0003ded4 	.word	0x0003ded4
   27e94:	0003dee8 	.word	0x0003dee8
   27e98:	0003dee5 	.word	0x0003dee5
   27e9c:	0003def3 	.word	0x0003def3
   27ea0:	0003baff 	.word	0x0003baff

00027ea4 <pdn_interface_close>:
   27ea4:	b570      	push	{r4, r5, r6, lr}
   27ea6:	f7ff fd63 	bl	27970 <handle_verify_and_covert>
   27eaa:	1e04      	subs	r4, r0, #0
   27eac:	da05      	bge.n	27eba <pdn_interface_close+0x16>
   27eae:	4260      	negs	r0, r4
   27eb0:	f7f7 fcde 	bl	1f870 <nrf_modem_os_errno_set>
   27eb4:	f04f 30ff 	mov.w	r0, #4294967295
   27eb8:	bd70      	pop	{r4, r5, r6, pc}
   27eba:	4d22      	ldr	r5, [pc, #136]	; (27f44 <pdn_interface_close+0xa0>)
   27ebc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   27ec0:	689b      	ldr	r3, [r3, #8]
   27ec2:	2b03      	cmp	r3, #3
   27ec4:	d11b      	bne.n	27efe <pdn_interface_close+0x5a>
   27ec6:	4e20      	ldr	r6, [pc, #128]	; (27f48 <pdn_interface_close+0xa4>)
   27ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
   27ecc:	4b1f      	ldr	r3, [pc, #124]	; (27f4c <pdn_interface_close+0xa8>)
   27ece:	4a20      	ldr	r2, [pc, #128]	; (27f50 <pdn_interface_close+0xac>)
   27ed0:	4630      	mov	r0, r6
   27ed2:	f005 f9ab 	bl	2d22c <sniprintf>
   27ed6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   27eda:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27ede:	681b      	ldr	r3, [r3, #0]
   27ee0:	4a1c      	ldr	r2, [pc, #112]	; (27f54 <pdn_interface_close+0xb0>)
   27ee2:	4430      	add	r0, r6
   27ee4:	f005 f9a2 	bl	2d22c <sniprintf>
   27ee8:	f7ff fd5e 	bl	279a8 <command_write>
   27eec:	4601      	mov	r1, r0
   27eee:	b910      	cbnz	r0, 27ef6 <pdn_interface_close+0x52>
   27ef0:	4620      	mov	r0, r4
   27ef2:	f7ff fd77 	bl	279e4 <event_wait>
   27ef6:	2202      	movs	r2, #2
   27ef8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   27efc:	609a      	str	r2, [r3, #8]
   27efe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   27f02:	689b      	ldr	r3, [r3, #8]
   27f04:	2b02      	cmp	r3, #2
   27f06:	d117      	bne.n	27f38 <pdn_interface_close+0x94>
   27f08:	4e0f      	ldr	r6, [pc, #60]	; (27f48 <pdn_interface_close+0xa4>)
   27f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
   27f0e:	4b12      	ldr	r3, [pc, #72]	; (27f58 <pdn_interface_close+0xb4>)
   27f10:	4a0f      	ldr	r2, [pc, #60]	; (27f50 <pdn_interface_close+0xac>)
   27f12:	4630      	mov	r0, r6
   27f14:	f005 f98a 	bl	2d22c <sniprintf>
   27f18:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   27f1c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27f20:	681b      	ldr	r3, [r3, #0]
   27f22:	4a0c      	ldr	r2, [pc, #48]	; (27f54 <pdn_interface_close+0xb0>)
   27f24:	4430      	add	r0, r6
   27f26:	f005 f981 	bl	2d22c <sniprintf>
   27f2a:	f7ff fd3d 	bl	279a8 <command_write>
   27f2e:	4601      	mov	r1, r0
   27f30:	b910      	cbnz	r0, 27f38 <pdn_interface_close+0x94>
   27f32:	4620      	mov	r0, r4
   27f34:	f7ff fd56 	bl	279e4 <event_wait>
   27f38:	4620      	mov	r0, r4
   27f3a:	f7ff fddd 	bl	27af8 <connection_free>
   27f3e:	2000      	movs	r0, #0
   27f40:	e7ba      	b.n	27eb8 <pdn_interface_close+0x14>
   27f42:	bf00      	nop
   27f44:	20016b40 	.word	0x20016b40
   27f48:	2001e649 	.word	0x2001e649
   27f4c:	0003def6 	.word	0x0003def6
   27f50:	0003b8db 	.word	0x0003b8db
   27f54:	00037717 	.word	0x00037717
   27f58:	0003deb3 	.word	0x0003deb3

00027f5c <pdn_interface_setopt>:
   27f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27f60:	461c      	mov	r4, r3
   27f62:	f240 2302 	movw	r3, #514	; 0x202
   27f66:	4299      	cmp	r1, r3
   27f68:	4617      	mov	r7, r2
   27f6a:	9d08      	ldr	r5, [sp, #32]
   27f6c:	d101      	bne.n	27f72 <pdn_interface_setopt+0x16>
   27f6e:	b104      	cbz	r4, 27f72 <pdn_interface_setopt+0x16>
   27f70:	b92d      	cbnz	r5, 27f7e <pdn_interface_setopt+0x22>
   27f72:	2016      	movs	r0, #22
   27f74:	f7f7 fc7c 	bl	1f870 <nrf_modem_os_errno_set>
   27f78:	f04f 30ff 	mov.w	r0, #4294967295
   27f7c:	e02a      	b.n	27fd4 <pdn_interface_setopt+0x78>
   27f7e:	f7ff fcf7 	bl	27970 <handle_verify_and_covert>
   27f82:	1e06      	subs	r6, r0, #0
   27f84:	da01      	bge.n	27f8a <pdn_interface_setopt+0x2e>
   27f86:	4270      	negs	r0, r6
   27f88:	e7f4      	b.n	27f74 <pdn_interface_setopt+0x18>
   27f8a:	2f01      	cmp	r7, #1
   27f8c:	d005      	beq.n	27f9a <pdn_interface_setopt+0x3e>
   27f8e:	2f04      	cmp	r7, #4
   27f90:	d033      	beq.n	27ffa <pdn_interface_setopt+0x9e>
   27f92:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   27f96:	4240      	negs	r0, r0
   27f98:	e7ec      	b.n	27f74 <pdn_interface_setopt+0x18>
   27f9a:	4b3f      	ldr	r3, [pc, #252]	; (28098 <pdn_interface_setopt+0x13c>)
   27f9c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   27fa0:	688b      	ldr	r3, [r1, #8]
   27fa2:	2b00      	cmp	r3, #0
   27fa4:	d071      	beq.n	2808a <pdn_interface_setopt+0x12e>
   27fa6:	688b      	ldr	r3, [r1, #8]
   27fa8:	2b03      	cmp	r3, #3
   27faa:	d06e      	beq.n	2808a <pdn_interface_setopt+0x12e>
   27fac:	688b      	ldr	r3, [r1, #8]
   27fae:	2b04      	cmp	r3, #4
   27fb0:	d06b      	beq.n	2808a <pdn_interface_setopt+0x12e>
   27fb2:	08a8      	lsrs	r0, r5, #2
   27fb4:	1e43      	subs	r3, r0, #1
   27fb6:	2b01      	cmp	r3, #1
   27fb8:	f005 0503 	and.w	r5, r5, #3
   27fbc:	d902      	bls.n	27fc4 <pdn_interface_setopt+0x68>
   27fbe:	f06f 0015 	mvn.w	r0, #21
   27fc2:	e7e8      	b.n	27f96 <pdn_interface_setopt+0x3a>
   27fc4:	2d00      	cmp	r5, #0
   27fc6:	d1fa      	bne.n	27fbe <pdn_interface_setopt+0x62>
   27fc8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   27fcc:	4284      	cmp	r4, r0
   27fce:	d103      	bne.n	27fd8 <pdn_interface_setopt+0x7c>
   27fd0:	60cd      	str	r5, [r1, #12]
   27fd2:	2000      	movs	r0, #0
   27fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27fd8:	f854 3b04 	ldr.w	r3, [r4], #4
   27fdc:	2b02      	cmp	r3, #2
   27fde:	d102      	bne.n	27fe6 <pdn_interface_setopt+0x8a>
   27fe0:	f045 0501 	orr.w	r5, r5, #1
   27fe4:	e7f2      	b.n	27fcc <pdn_interface_setopt+0x70>
   27fe6:	2b0a      	cmp	r3, #10
   27fe8:	d102      	bne.n	27ff0 <pdn_interface_setopt+0x94>
   27fea:	f045 0502 	orr.w	r5, r5, #2
   27fee:	e7ed      	b.n	27fcc <pdn_interface_setopt+0x70>
   27ff0:	2b05      	cmp	r3, #5
   27ff2:	d1e4      	bne.n	27fbe <pdn_interface_setopt+0x62>
   27ff4:	f045 0505 	orr.w	r5, r5, #5
   27ff8:	e7e8      	b.n	27fcc <pdn_interface_setopt+0x70>
   27ffa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 28098 <pdn_interface_setopt+0x13c>
   27ffe:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
   28002:	689a      	ldr	r2, [r3, #8]
   28004:	2a00      	cmp	r2, #0
   28006:	d040      	beq.n	2808a <pdn_interface_setopt+0x12e>
   28008:	689a      	ldr	r2, [r3, #8]
   2800a:	2a03      	cmp	r2, #3
   2800c:	d03d      	beq.n	2808a <pdn_interface_setopt+0x12e>
   2800e:	689b      	ldr	r3, [r3, #8]
   28010:	2b04      	cmp	r3, #4
   28012:	d03a      	beq.n	2808a <pdn_interface_setopt+0x12e>
   28014:	4620      	mov	r0, r4
   28016:	f7e9 fa73 	bl	11500 <strlen>
   2801a:	f104 0a64 	add.w	sl, r4, #100	; 0x64
   2801e:	1c47      	adds	r7, r0, #1
   28020:	4650      	mov	r0, sl
   28022:	f7e9 fa6d 	bl	11500 <strlen>
   28026:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   2802a:	f100 0801 	add.w	r8, r0, #1
   2802e:	3b01      	subs	r3, #1
   28030:	2b01      	cmp	r3, #1
   28032:	d8c4      	bhi.n	27fbe <pdn_interface_setopt+0x62>
   28034:	2f63      	cmp	r7, #99	; 0x63
   28036:	d8c2      	bhi.n	27fbe <pdn_interface_setopt+0x62>
   28038:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   2803c:	d8bf      	bhi.n	27fbe <pdn_interface_setopt+0x62>
   2803e:	eb07 0008 	add.w	r0, r7, r8
   28042:	3020      	adds	r0, #32
   28044:	f7f7 fdc6 	bl	1fbd4 <nrf_modem_os_alloc>
   28048:	4605      	mov	r5, r0
   2804a:	b308      	cbz	r0, 28090 <pdn_interface_setopt+0x134>
   2804c:	2220      	movs	r2, #32
   2804e:	f859 1026 	ldr.w	r1, [r9, r6, lsl #2]
   28052:	f00d fa98 	bl	35586 <memcpy>
   28056:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   2805a:	f7f7 fdc3 	bl	1fbe4 <nrf_modem_os_free>
   2805e:	e9c5 7805 	strd	r7, r8, [r5, #20]
   28062:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   28066:	4639      	mov	r1, r7
   28068:	4a0c      	ldr	r2, [pc, #48]	; (2809c <pdn_interface_setopt+0x140>)
   2806a:	742b      	strb	r3, [r5, #16]
   2806c:	f105 0020 	add.w	r0, r5, #32
   28070:	4623      	mov	r3, r4
   28072:	f005 f8db 	bl	2d22c <sniprintf>
   28076:	3021      	adds	r0, #33	; 0x21
   28078:	4653      	mov	r3, sl
   2807a:	4a08      	ldr	r2, [pc, #32]	; (2809c <pdn_interface_setopt+0x140>)
   2807c:	69a9      	ldr	r1, [r5, #24]
   2807e:	4428      	add	r0, r5
   28080:	f005 f8d4 	bl	2d22c <sniprintf>
   28084:	f849 5026 	str.w	r5, [r9, r6, lsl #2]
   28088:	e7a3      	b.n	27fd2 <pdn_interface_setopt+0x76>
   2808a:	f06f 000d 	mvn.w	r0, #13
   2808e:	e782      	b.n	27f96 <pdn_interface_setopt+0x3a>
   28090:	f06f 000b 	mvn.w	r0, #11
   28094:	e77f      	b.n	27f96 <pdn_interface_setopt+0x3a>
   28096:	bf00      	nop
   28098:	20016b40 	.word	0x20016b40
   2809c:	0003b8db 	.word	0x0003b8db

000280a0 <pdn_interface_getopt>:
   280a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280a4:	461d      	mov	r5, r3
   280a6:	f240 2302 	movw	r3, #514	; 0x202
   280aa:	4299      	cmp	r1, r3
   280ac:	4690      	mov	r8, r2
   280ae:	9e06      	ldr	r6, [sp, #24]
   280b0:	d101      	bne.n	280b6 <pdn_interface_getopt+0x16>
   280b2:	b105      	cbz	r5, 280b6 <pdn_interface_getopt+0x16>
   280b4:	b92e      	cbnz	r6, 280c2 <pdn_interface_getopt+0x22>
   280b6:	2016      	movs	r0, #22
   280b8:	f7f7 fbda 	bl	1f870 <nrf_modem_os_errno_set>
   280bc:	f04f 34ff 	mov.w	r4, #4294967295
   280c0:	e034      	b.n	2812c <pdn_interface_getopt+0x8c>
   280c2:	f7ff fc55 	bl	27970 <handle_verify_and_covert>
   280c6:	1e07      	subs	r7, r0, #0
   280c8:	da01      	bge.n	280ce <pdn_interface_getopt+0x2e>
   280ca:	4278      	negs	r0, r7
   280cc:	e7f4      	b.n	280b8 <pdn_interface_getopt+0x18>
   280ce:	f1b8 0f02 	cmp.w	r8, #2
   280d2:	d02e      	beq.n	28132 <pdn_interface_getopt+0x92>
   280d4:	f1b8 0f03 	cmp.w	r8, #3
   280d8:	d035      	beq.n	28146 <pdn_interface_getopt+0xa6>
   280da:	f1b8 0f01 	cmp.w	r8, #1
   280de:	d149      	bne.n	28174 <pdn_interface_getopt+0xd4>
   280e0:	4b2b      	ldr	r3, [pc, #172]	; (28190 <pdn_interface_getopt+0xf0>)
   280e2:	6831      	ldr	r1, [r6, #0]
   280e4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   280e8:	689a      	ldr	r2, [r3, #8]
   280ea:	2a00      	cmp	r2, #0
   280ec:	d046      	beq.n	2817c <pdn_interface_getopt+0xdc>
   280ee:	689a      	ldr	r2, [r3, #8]
   280f0:	2a04      	cmp	r2, #4
   280f2:	d043      	beq.n	2817c <pdn_interface_getopt+0xdc>
   280f4:	2907      	cmp	r1, #7
   280f6:	f001 0203 	and.w	r2, r1, #3
   280fa:	d942      	bls.n	28182 <pdn_interface_getopt+0xe2>
   280fc:	2a00      	cmp	r2, #0
   280fe:	d140      	bne.n	28182 <pdn_interface_getopt+0xe2>
   28100:	68db      	ldr	r3, [r3, #12]
   28102:	0798      	lsls	r0, r3, #30
   28104:	bf42      	ittt	mi
   28106:	220a      	movmi	r2, #10
   28108:	602a      	strmi	r2, [r5, #0]
   2810a:	2201      	movmi	r2, #1
   2810c:	07d9      	lsls	r1, r3, #31
   2810e:	bf42      	ittt	mi
   28110:	2102      	movmi	r1, #2
   28112:	f845 1022 	strmi.w	r1, [r5, r2, lsl #2]
   28116:	3201      	addmi	r2, #1
   28118:	f013 0f05 	tst.w	r3, #5
   2811c:	bf1e      	ittt	ne
   2811e:	2305      	movne	r3, #5
   28120:	f845 3022 	strne.w	r3, [r5, r2, lsl #2]
   28124:	3201      	addne	r2, #1
   28126:	0092      	lsls	r2, r2, #2
   28128:	6032      	str	r2, [r6, #0]
   2812a:	2400      	movs	r4, #0
   2812c:	4620      	mov	r0, r4
   2812e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28132:	6833      	ldr	r3, [r6, #0]
   28134:	b343      	cbz	r3, 28188 <pdn_interface_getopt+0xe8>
   28136:	4b16      	ldr	r3, [pc, #88]	; (28190 <pdn_interface_getopt+0xf0>)
   28138:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   2813c:	681b      	ldr	r3, [r3, #0]
   2813e:	702b      	strb	r3, [r5, #0]
   28140:	2301      	movs	r3, #1
   28142:	6033      	str	r3, [r6, #0]
   28144:	e7f1      	b.n	2812a <pdn_interface_getopt+0x8a>
   28146:	6833      	ldr	r3, [r6, #0]
   28148:	b1f3      	cbz	r3, 28188 <pdn_interface_getopt+0xe8>
   2814a:	f44f 7180 	mov.w	r1, #256	; 0x100
   2814e:	4b11      	ldr	r3, [pc, #68]	; (28194 <pdn_interface_getopt+0xf4>)
   28150:	4a11      	ldr	r2, [pc, #68]	; (28198 <pdn_interface_getopt+0xf8>)
   28152:	4812      	ldr	r0, [pc, #72]	; (2819c <pdn_interface_getopt+0xfc>)
   28154:	f005 f86a 	bl	2d22c <sniprintf>
   28158:	f7ff fc26 	bl	279a8 <command_write>
   2815c:	4604      	mov	r4, r0
   2815e:	b958      	cbnz	r0, 28178 <pdn_interface_getopt+0xd8>
   28160:	4641      	mov	r1, r8
   28162:	4638      	mov	r0, r7
   28164:	f7ff fc3e 	bl	279e4 <event_wait>
   28168:	2800      	cmp	r0, #0
   2816a:	db0f      	blt.n	2818c <pdn_interface_getopt+0xec>
   2816c:	2301      	movs	r3, #1
   2816e:	7028      	strb	r0, [r5, #0]
   28170:	6033      	str	r3, [r6, #0]
   28172:	e7db      	b.n	2812c <pdn_interface_getopt+0x8c>
   28174:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   28178:	4260      	negs	r0, r4
   2817a:	e79d      	b.n	280b8 <pdn_interface_getopt+0x18>
   2817c:	f06f 040d 	mvn.w	r4, #13
   28180:	e7fa      	b.n	28178 <pdn_interface_getopt+0xd8>
   28182:	f06f 0415 	mvn.w	r4, #21
   28186:	e7f7      	b.n	28178 <pdn_interface_getopt+0xd8>
   28188:	2416      	movs	r4, #22
   2818a:	e7f5      	b.n	28178 <pdn_interface_getopt+0xd8>
   2818c:	4604      	mov	r4, r0
   2818e:	e7f3      	b.n	28178 <pdn_interface_getopt+0xd8>
   28190:	20016b40 	.word	0x20016b40
   28194:	0003df02 	.word	0x0003df02
   28198:	0003b8db 	.word	0x0003b8db
   2819c:	2001e649 	.word	0x2001e649

000281a0 <pdn_interface_pdn_id_get>:
   281a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   281a4:	4606      	mov	r6, r0
   281a6:	4688      	mov	r8, r1
   281a8:	b321      	cbz	r1, 281f4 <pdn_interface_pdn_id_get+0x54>
   281aa:	4c25      	ldr	r4, [pc, #148]	; (28240 <pdn_interface_pdn_id_get+0xa0>)
   281ac:	2500      	movs	r5, #0
   281ae:	4627      	mov	r7, r4
   281b0:	f854 3b04 	ldr.w	r3, [r4], #4
   281b4:	b1db      	cbz	r3, 281ee <pdn_interface_pdn_id_get+0x4e>
   281b6:	689b      	ldr	r3, [r3, #8]
   281b8:	2b03      	cmp	r3, #3
   281ba:	d118      	bne.n	281ee <pdn_interface_pdn_id_get+0x4e>
   281bc:	4640      	mov	r0, r8
   281be:	f7e9 f99f 	bl	11500 <strlen>
   281c2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   281c6:	69ca      	ldr	r2, [r1, #28]
   281c8:	4282      	cmp	r2, r0
   281ca:	d110      	bne.n	281ee <pdn_interface_pdn_id_get+0x4e>
   281cc:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   281d0:	4403      	add	r3, r0
   281d2:	3320      	adds	r3, #32
   281d4:	4640      	mov	r0, r8
   281d6:	4419      	add	r1, r3
   281d8:	f00d fb3a 	bl	35850 <strncmp>
   281dc:	b938      	cbnz	r0, 281ee <pdn_interface_pdn_id_get+0x4e>
   281de:	2e0a      	cmp	r6, #10
   281e0:	d10a      	bne.n	281f8 <pdn_interface_pdn_id_get+0x58>
   281e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   281e6:	68db      	ldr	r3, [r3, #12]
   281e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   281ec:	b95b      	cbnz	r3, 28206 <pdn_interface_pdn_id_get+0x66>
   281ee:	3501      	adds	r5, #1
   281f0:	2d0a      	cmp	r5, #10
   281f2:	d1dd      	bne.n	281b0 <pdn_interface_pdn_id_get+0x10>
   281f4:	2016      	movs	r0, #22
   281f6:	e010      	b.n	2821a <pdn_interface_pdn_id_get+0x7a>
   281f8:	2e02      	cmp	r6, #2
   281fa:	d113      	bne.n	28224 <pdn_interface_pdn_id_get+0x84>
   281fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   28200:	68db      	ldr	r3, [r3, #12]
   28202:	07db      	lsls	r3, r3, #31
   28204:	d5f3      	bpl.n	281ee <pdn_interface_pdn_id_get+0x4e>
   28206:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   2820a:	685c      	ldr	r4, [r3, #4]
   2820c:	3401      	adds	r4, #1
   2820e:	d112      	bne.n	28236 <pdn_interface_pdn_id_get+0x96>
   28210:	4628      	mov	r0, r5
   28212:	f7ff fc7f 	bl	27b14 <pdn_id_get>
   28216:	b170      	cbz	r0, 28236 <pdn_interface_pdn_id_get+0x96>
   28218:	4240      	negs	r0, r0
   2821a:	f7f7 fb29 	bl	1f870 <nrf_modem_os_errno_set>
   2821e:	f04f 30ff 	mov.w	r0, #4294967295
   28222:	e00b      	b.n	2823c <pdn_interface_pdn_id_get+0x9c>
   28224:	2e05      	cmp	r6, #5
   28226:	d1e2      	bne.n	281ee <pdn_interface_pdn_id_get+0x4e>
   28228:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2822c:	68db      	ldr	r3, [r3, #12]
   2822e:	3b00      	subs	r3, #0
   28230:	bf18      	it	ne
   28232:	2301      	movne	r3, #1
   28234:	e7da      	b.n	281ec <pdn_interface_pdn_id_get+0x4c>
   28236:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   2823a:	6858      	ldr	r0, [r3, #4]
   2823c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28240:	20016b40 	.word	0x20016b40

00028244 <full_dfu_ipc_irq_handler>:
   28244:	2301      	movs	r3, #1
   28246:	4a03      	ldr	r2, [pc, #12]	; (28254 <full_dfu_ipc_irq_handler+0x10>)
   28248:	6013      	str	r3, [r2, #0]
   2824a:	07c2      	lsls	r2, r0, #31
   2824c:	bf44      	itt	mi
   2824e:	4a02      	ldrmi	r2, [pc, #8]	; (28258 <full_dfu_ipc_irq_handler+0x14>)
   28250:	7013      	strbmi	r3, [r2, #0]
   28252:	4770      	bx	lr
   28254:	20016b68 	.word	0x20016b68
   28258:	2001e749 	.word	0x2001e749

0002825c <modem_ipc_wait_for_event>:
   2825c:	b538      	push	{r3, r4, r5, lr}
   2825e:	2300      	movs	r3, #0
   28260:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   28264:	4c0a      	ldr	r4, [pc, #40]	; (28290 <modem_ipc_wait_for_event+0x34>)
   28266:	6023      	str	r3, [r4, #0]
   28268:	6823      	ldr	r3, [r4, #0]
   2826a:	b92b      	cbnz	r3, 28278 <modem_ipc_wait_for_event+0x1c>
   2826c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   28270:	f000 f976 	bl	28560 <nrf_modem_busy_wait_us>
   28274:	3d01      	subs	r5, #1
   28276:	d1f7      	bne.n	28268 <modem_ipc_wait_for_event+0xc>
   28278:	6823      	ldr	r3, [r4, #0]
   2827a:	b90b      	cbnz	r3, 28280 <modem_ipc_wait_for_event+0x24>
   2827c:	203c      	movs	r0, #60	; 0x3c
   2827e:	e005      	b.n	2828c <modem_ipc_wait_for_event+0x30>
   28280:	4b04      	ldr	r3, [pc, #16]	; (28294 <modem_ipc_wait_for_event+0x38>)
   28282:	781b      	ldrb	r3, [r3, #0]
   28284:	2b01      	cmp	r3, #1
   28286:	bf14      	ite	ne
   28288:	2000      	movne	r0, #0
   2828a:	2005      	moveq	r0, #5
   2828c:	bd38      	pop	{r3, r4, r5, pc}
   2828e:	bf00      	nop
   28290:	20016b68 	.word	0x20016b68
   28294:	2001e749 	.word	0x2001e749

00028298 <nrf_modem_full_dfu_setup>:
   28298:	2200      	movs	r2, #0
   2829a:	2300      	movs	r3, #0
   2829c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2829e:	4d2d      	ldr	r5, [pc, #180]	; (28354 <nrf_modem_full_dfu_setup+0xbc>)
   282a0:	4f2d      	ldr	r7, [pc, #180]	; (28358 <nrf_modem_full_dfu_setup+0xc0>)
   282a2:	e9c5 2302 	strd	r2, r3, [r5, #8]
   282a6:	e9c5 2304 	strd	r2, r3, [r5, #16]
   282aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   282ae:	4b2b      	ldr	r3, [pc, #172]	; (2835c <nrf_modem_full_dfu_setup+0xc4>)
   282b0:	2400      	movs	r4, #0
   282b2:	601a      	str	r2, [r3, #0]
   282b4:	f100 031c 	add.w	r3, r0, #28
   282b8:	603b      	str	r3, [r7, #0]
   282ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   282be:	6043      	str	r3, [r0, #4]
   282c0:	231c      	movs	r3, #28
   282c2:	7203      	strb	r3, [r0, #8]
   282c4:	2320      	movs	r3, #32
   282c6:	2601      	movs	r6, #1
   282c8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   282cc:	7243      	strb	r3, [r0, #9]
   282ce:	4b24      	ldr	r3, [pc, #144]	; (28360 <nrf_modem_full_dfu_setup+0xc8>)
   282d0:	7086      	strb	r6, [r0, #2]
   282d2:	70c2      	strb	r2, [r0, #3]
   282d4:	7004      	strb	r4, [r0, #0]
   282d6:	7044      	strb	r4, [r0, #1]
   282d8:	7284      	strb	r4, [r0, #10]
   282da:	72c4      	strb	r4, [r0, #11]
   282dc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   282e0:	702c      	strb	r4, [r5, #0]
   282e2:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   282e6:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   282ea:	4b1e      	ldr	r3, [pc, #120]	; (28364 <nrf_modem_full_dfu_setup+0xcc>)
   282ec:	b093      	sub	sp, #76	; 0x4c
   282ee:	4622      	mov	r2, r4
   282f0:	491d      	ldr	r1, [pc, #116]	; (28368 <nrf_modem_full_dfu_setup+0xd0>)
   282f2:	4620      	mov	r0, r4
   282f4:	701c      	strb	r4, [r3, #0]
   282f6:	f7fb fa3b 	bl	23770 <nrfx_ipc_init>
   282fa:	2240      	movs	r2, #64	; 0x40
   282fc:	4621      	mov	r1, r4
   282fe:	a801      	add	r0, sp, #4
   28300:	f00d f961 	bl	355c6 <memset>
   28304:	2302      	movs	r3, #2
   28306:	9302      	str	r3, [sp, #8]
   28308:	2304      	movs	r3, #4
   2830a:	9609      	str	r6, [sp, #36]	; 0x24
   2830c:	2605      	movs	r6, #5
   2830e:	eb0d 0003 	add.w	r0, sp, r3
   28312:	930b      	str	r3, [sp, #44]	; 0x2c
   28314:	9611      	str	r6, [sp, #68]	; 0x44
   28316:	f7fb fa53 	bl	237c0 <nrfx_ipc_config_load>
   2831a:	4b14      	ldr	r3, [pc, #80]	; (2836c <nrf_modem_full_dfu_setup+0xd4>)
   2831c:	9400      	str	r4, [sp, #0]
   2831e:	683f      	ldr	r7, [r7, #0]
   28320:	611c      	str	r4, [r3, #16]
   28322:	691b      	ldr	r3, [r3, #16]
   28324:	9300      	str	r3, [sp, #0]
   28326:	9b00      	ldr	r3, [sp, #0]
   28328:	f7ff ff98 	bl	2825c <modem_ipc_wait_for_event>
   2832c:	4603      	mov	r3, r0
   2832e:	b150      	cbz	r0, 28346 <nrf_modem_full_dfu_setup+0xae>
   28330:	2303      	movs	r3, #3
   28332:	702b      	strb	r3, [r5, #0]
   28334:	f7f7 fa9c 	bl	1f870 <nrf_modem_os_errno_set>
   28338:	f7fb fa86 	bl	23848 <nrfx_ipc_uninit>
   2833c:	f04f 33ff 	mov.w	r3, #4294967295
   28340:	4618      	mov	r0, r3
   28342:	b013      	add	sp, #76	; 0x4c
   28344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28346:	6839      	ldr	r1, [r7, #0]
   28348:	4a09      	ldr	r2, [pc, #36]	; (28370 <nrf_modem_full_dfu_setup+0xd8>)
   2834a:	4291      	cmp	r1, r2
   2834c:	d0f8      	beq.n	28340 <nrf_modem_full_dfu_setup+0xa8>
   2834e:	4630      	mov	r0, r6
   28350:	e7f0      	b.n	28334 <nrf_modem_full_dfu_setup+0x9c>
   28352:	bf00      	nop
   28354:	20015cd8 	.word	0x20015cd8
   28358:	20016b6c 	.word	0x20016b6c
   2835c:	20016b70 	.word	0x20016b70
   28360:	4002a000 	.word	0x4002a000
   28364:	2001e749 	.word	0x2001e749
   28368:	00028245 	.word	0x00028245
   2836c:	40005600 	.word	0x40005600
   28370:	a5000001 	.word	0xa5000001

00028374 <packet_handler_create>:
   28374:	2801      	cmp	r0, #1
   28376:	b570      	push	{r4, r5, r6, lr}
   28378:	4604      	mov	r4, r0
   2837a:	460e      	mov	r6, r1
   2837c:	4615      	mov	r5, r2
   2837e:	d00f      	beq.n	283a0 <packet_handler_create+0x2c>
   28380:	1e84      	subs	r4, r0, #2
   28382:	2c01      	cmp	r4, #1
   28384:	d810      	bhi.n	283a8 <packet_handler_create+0x34>
   28386:	2010      	movs	r0, #16
   28388:	f7f7 fc24 	bl	1fbd4 <nrf_modem_os_alloc>
   2838c:	2400      	movs	r4, #0
   2838e:	b130      	cbz	r0, 2839e <packet_handler_create+0x2a>
   28390:	2218      	movs	r2, #24
   28392:	4b08      	ldr	r3, [pc, #32]	; (283b4 <packet_handler_create+0x40>)
   28394:	6085      	str	r5, [r0, #8]
   28396:	fb02 3404 	mla	r4, r2, r4, r3
   2839a:	e9c0 4600 	strd	r4, r6, [r0]
   2839e:	bd70      	pop	{r4, r5, r6, pc}
   283a0:	2014      	movs	r0, #20
   283a2:	f7f7 fc17 	bl	1fbd4 <nrf_modem_os_alloc>
   283a6:	e7f2      	b.n	2838e <packet_handler_create+0x1a>
   283a8:	200c      	movs	r0, #12
   283aa:	f7f7 fc13 	bl	1fbd4 <nrf_modem_os_alloc>
   283ae:	2402      	movs	r4, #2
   283b0:	e7ed      	b.n	2838e <packet_handler_create+0x1a>
   283b2:	bf00      	nop
   283b4:	00037160 	.word	0x00037160

000283b8 <modem_off>:
   283b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   283ba:	2501      	movs	r5, #1
   283bc:	4c07      	ldr	r4, [pc, #28]	; (283dc <modem_off+0x24>)
   283be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   283c2:	6165      	str	r5, [r4, #20]
   283c4:	f000 f8cc 	bl	28560 <nrf_modem_busy_wait_us>
   283c8:	2300      	movs	r3, #0
   283ca:	6163      	str	r3, [r4, #20]
   283cc:	9301      	str	r3, [sp, #4]
   283ce:	6125      	str	r5, [r4, #16]
   283d0:	6923      	ldr	r3, [r4, #16]
   283d2:	9301      	str	r3, [sp, #4]
   283d4:	9b01      	ldr	r3, [sp, #4]
   283d6:	b003      	add	sp, #12
   283d8:	bd30      	pop	{r4, r5, pc}
   283da:	bf00      	nop
   283dc:	40005600 	.word	0x40005600

000283e0 <nrf_modem_init>:
   283e0:	b570      	push	{r4, r5, r6, lr}
   283e2:	460d      	mov	r5, r1
   283e4:	b300      	cbz	r0, 28428 <nrf_modem_init+0x48>
   283e6:	4e13      	ldr	r6, [pc, #76]	; (28434 <nrf_modem_init+0x54>)
   283e8:	7832      	ldrb	r2, [r6, #0]
   283ea:	b9ea      	cbnz	r2, 28428 <nrf_modem_init+0x48>
   283ec:	2901      	cmp	r1, #1
   283ee:	d113      	bne.n	28418 <nrf_modem_init+0x38>
   283f0:	68c1      	ldr	r1, [r0, #12]
   283f2:	6842      	ldr	r2, [r0, #4]
   283f4:	440a      	add	r2, r1
   283f6:	6941      	ldr	r1, [r0, #20]
   283f8:	440a      	add	r2, r1
   283fa:	69c1      	ldr	r1, [r0, #28]
   283fc:	440a      	add	r2, r1
   283fe:	f242 011b 	movw	r1, #8219	; 0x201b
   28402:	428a      	cmp	r2, r1
   28404:	d913      	bls.n	2842e <nrf_modem_init+0x4e>
   28406:	6800      	ldr	r0, [r0, #0]
   28408:	f7ff ff46 	bl	28298 <nrf_modem_full_dfu_setup>
   2840c:	4604      	mov	r4, r0
   2840e:	b130      	cbz	r0, 2841e <nrf_modem_init+0x3e>
   28410:	f7ff ffd2 	bl	283b8 <modem_off>
   28414:	4620      	mov	r0, r4
   28416:	bd70      	pop	{r4, r5, r6, pc}
   28418:	f00c fd2e 	bl	34e78 <nrf_modem_platform_init>
   2841c:	e7f6      	b.n	2840c <nrf_modem_init+0x2c>
   2841e:	4b06      	ldr	r3, [pc, #24]	; (28438 <nrf_modem_init+0x58>)
   28420:	701d      	strb	r5, [r3, #0]
   28422:	2301      	movs	r3, #1
   28424:	7033      	strb	r3, [r6, #0]
   28426:	e7f5      	b.n	28414 <nrf_modem_init+0x34>
   28428:	f04f 34ff 	mov.w	r4, #4294967295
   2842c:	e7f2      	b.n	28414 <nrf_modem_init+0x34>
   2842e:	240c      	movs	r4, #12
   28430:	e7f0      	b.n	28414 <nrf_modem_init+0x34>
   28432:	bf00      	nop
   28434:	2001e74a 	.word	0x2001e74a
   28438:	2001e74b 	.word	0x2001e74b

0002843c <nrf_modem_platform_af_method_table_get>:
   2843c:	280a      	cmp	r0, #10
   2843e:	b508      	push	{r3, lr}
   28440:	d80b      	bhi.n	2845a <nrf_modem_platform_af_method_table_get+0x1e>
   28442:	2800      	cmp	r0, #0
   28444:	d036      	beq.n	284b4 <nrf_modem_platform_af_method_table_get+0x78>
   28446:	3801      	subs	r0, #1
   28448:	2809      	cmp	r0, #9
   2844a:	d833      	bhi.n	284b4 <nrf_modem_platform_af_method_table_get+0x78>
   2844c:	e8df f000 	tbb	[pc, r0]
   28450:	32321429 	.word	0x32321429
   28454:	32323224 	.word	0x32323224
   28458:	1432      	.short	0x1432
   2845a:	2866      	cmp	r0, #102	; 0x66
   2845c:	d12a      	bne.n	284b4 <nrf_modem_platform_af_method_table_get+0x78>
   2845e:	f240 2301 	movw	r3, #513	; 0x201
   28462:	429a      	cmp	r2, r3
   28464:	d028      	beq.n	284b8 <nrf_modem_platform_af_method_table_get+0x7c>
   28466:	f240 2302 	movw	r3, #514	; 0x202
   2846a:	429a      	cmp	r2, r3
   2846c:	d026      	beq.n	284bc <nrf_modem_platform_af_method_table_get+0x80>
   2846e:	202b      	movs	r0, #43	; 0x2b
   28470:	f7f7 f9fe 	bl	1f870 <nrf_modem_os_errno_set>
   28474:	2000      	movs	r0, #0
   28476:	e009      	b.n	2848c <nrf_modem_platform_af_method_table_get+0x50>
   28478:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   2847c:	d207      	bcs.n	2848e <nrf_modem_platform_af_method_table_get+0x52>
   2847e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   28482:	d207      	bcs.n	28494 <nrf_modem_platform_af_method_table_get+0x58>
   28484:	3a01      	subs	r2, #1
   28486:	2a01      	cmp	r2, #1
   28488:	d8f1      	bhi.n	2846e <nrf_modem_platform_af_method_table_get+0x32>
   2848a:	480e      	ldr	r0, [pc, #56]	; (284c4 <nrf_modem_platform_af_method_table_get+0x88>)
   2848c:	bd08      	pop	{r3, pc}
   2848e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   28492:	d1ec      	bne.n	2846e <nrf_modem_platform_af_method_table_get+0x32>
   28494:	480c      	ldr	r0, [pc, #48]	; (284c8 <nrf_modem_platform_af_method_table_get+0x8c>)
   28496:	e7f9      	b.n	2848c <nrf_modem_platform_af_method_table_get+0x50>
   28498:	2903      	cmp	r1, #3
   2849a:	480c      	ldr	r0, [pc, #48]	; (284cc <nrf_modem_platform_af_method_table_get+0x90>)
   2849c:	bf18      	it	ne
   2849e:	2000      	movne	r0, #0
   284a0:	e7f4      	b.n	2848c <nrf_modem_platform_af_method_table_get+0x50>
   284a2:	f240 2303 	movw	r3, #515	; 0x203
   284a6:	429a      	cmp	r2, r3
   284a8:	d00a      	beq.n	284c0 <nrf_modem_platform_af_method_table_get+0x84>
   284aa:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   284ae:	d1de      	bne.n	2846e <nrf_modem_platform_af_method_table_get+0x32>
   284b0:	4807      	ldr	r0, [pc, #28]	; (284d0 <nrf_modem_platform_af_method_table_get+0x94>)
   284b2:	e7eb      	b.n	2848c <nrf_modem_platform_af_method_table_get+0x50>
   284b4:	2016      	movs	r0, #22
   284b6:	e7db      	b.n	28470 <nrf_modem_platform_af_method_table_get+0x34>
   284b8:	4806      	ldr	r0, [pc, #24]	; (284d4 <nrf_modem_platform_af_method_table_get+0x98>)
   284ba:	e7e7      	b.n	2848c <nrf_modem_platform_af_method_table_get+0x50>
   284bc:	4806      	ldr	r0, [pc, #24]	; (284d8 <nrf_modem_platform_af_method_table_get+0x9c>)
   284be:	e7e5      	b.n	2848c <nrf_modem_platform_af_method_table_get+0x50>
   284c0:	4806      	ldr	r0, [pc, #24]	; (284dc <nrf_modem_platform_af_method_table_get+0xa0>)
   284c2:	e7e3      	b.n	2848c <nrf_modem_platform_af_method_table_get+0x50>
   284c4:	000371d0 	.word	0x000371d0
   284c8:	000371f8 	.word	0x000371f8
   284cc:	00037298 	.word	0x00037298
   284d0:	00037270 	.word	0x00037270
   284d4:	000371a8 	.word	0x000371a8
   284d8:	00037248 	.word	0x00037248
   284dc:	00037220 	.word	0x00037220

000284e0 <nrf_modem_platform_fd_method_table_get>:
   284e0:	b538      	push	{r3, r4, r5, lr}
   284e2:	4605      	mov	r5, r0
   284e4:	f7fc fe66 	bl	251b4 <interface_socket_from_handle_get>
   284e8:	4604      	mov	r4, r0
   284ea:	b130      	cbz	r0, 284fa <nrf_modem_platform_fd_method_table_get+0x1a>
   284ec:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   284f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   284f4:	68c0      	ldr	r0, [r0, #12]
   284f6:	f7ff bfa1 	b.w	2843c <nrf_modem_platform_af_method_table_get>
   284fa:	4b0b      	ldr	r3, [pc, #44]	; (28528 <nrf_modem_platform_fd_method_table_get+0x48>)
   284fc:	429d      	cmp	r5, r3
   284fe:	d00c      	beq.n	2851a <nrf_modem_platform_fd_method_table_get+0x3a>
   28500:	4a0a      	ldr	r2, [pc, #40]	; (2852c <nrf_modem_platform_fd_method_table_get+0x4c>)
   28502:	0c2b      	lsrs	r3, r5, #16
   28504:	041b      	lsls	r3, r3, #16
   28506:	4293      	cmp	r3, r2
   28508:	d009      	beq.n	2851e <nrf_modem_platform_fd_method_table_get+0x3e>
   2850a:	4b09      	ldr	r3, [pc, #36]	; (28530 <nrf_modem_platform_fd_method_table_get+0x50>)
   2850c:	429d      	cmp	r5, r3
   2850e:	d008      	beq.n	28522 <nrf_modem_platform_fd_method_table_get+0x42>
   28510:	2009      	movs	r0, #9
   28512:	f7f7 f9ad 	bl	1f870 <nrf_modem_os_errno_set>
   28516:	4620      	mov	r0, r4
   28518:	bd38      	pop	{r3, r4, r5, pc}
   2851a:	4c06      	ldr	r4, [pc, #24]	; (28534 <nrf_modem_platform_fd_method_table_get+0x54>)
   2851c:	e7fb      	b.n	28516 <nrf_modem_platform_fd_method_table_get+0x36>
   2851e:	4c06      	ldr	r4, [pc, #24]	; (28538 <nrf_modem_platform_fd_method_table_get+0x58>)
   28520:	e7f9      	b.n	28516 <nrf_modem_platform_fd_method_table_get+0x36>
   28522:	4c06      	ldr	r4, [pc, #24]	; (2853c <nrf_modem_platform_fd_method_table_get+0x5c>)
   28524:	e7f7      	b.n	28516 <nrf_modem_platform_fd_method_table_get+0x36>
   28526:	bf00      	nop
   28528:	49765432 	.word	0x49765432
   2852c:	789a0000 	.word	0x789a0000
   28530:	49765443 	.word	0x49765443
   28534:	00037220 	.word	0x00037220
   28538:	00037248 	.word	0x00037248
   2853c:	00037270 	.word	0x00037270

00028540 <nrf_modem_platform_fcntl>:
   28540:	b508      	push	{r3, lr}
   28542:	4b06      	ldr	r3, [pc, #24]	; (2855c <nrf_modem_platform_fcntl+0x1c>)
   28544:	4298      	cmp	r0, r3
   28546:	d003      	beq.n	28550 <nrf_modem_platform_fcntl+0x10>
   28548:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2854c:	f7fc beb6 	b.w	252bc <interface_socket_fcntl>
   28550:	202d      	movs	r0, #45	; 0x2d
   28552:	f7f7 f98d 	bl	1f870 <nrf_modem_os_errno_set>
   28556:	f04f 30ff 	mov.w	r0, #4294967295
   2855a:	bd08      	pop	{r3, pc}
   2855c:	49765432 	.word	0x49765432

00028560 <nrf_modem_busy_wait_us>:
   28560:	b508      	push	{r3, lr}
   28562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   28566:	4358      	muls	r0, r3
   28568:	f7e7 ffac 	bl	104c4 <__aeabi_ui2d>
   2856c:	4b08      	ldr	r3, [pc, #32]	; (28590 <nrf_modem_busy_wait_us+0x30>)
   2856e:	2200      	movs	r2, #0
   28570:	f7e8 f94c 	bl	1080c <__aeabi_ddiv>
   28574:	f7e8 faf8 	bl	10b68 <__aeabi_d2f>
   28578:	4906      	ldr	r1, [pc, #24]	; (28594 <nrf_modem_busy_wait_us+0x34>)
   2857a:	f7e8 fd07 	bl	10f8c <__aeabi_fdiv>
   2857e:	f7e8 fdc7 	bl	11110 <__aeabi_f2uiz>
   28582:	2300      	movs	r3, #0
   28584:	4283      	cmp	r3, r0
   28586:	d100      	bne.n	2858a <nrf_modem_busy_wait_us+0x2a>
   28588:	bd08      	pop	{r3, pc}
   2858a:	3301      	adds	r3, #1
   2858c:	e7fa      	b.n	28584 <nrf_modem_busy_wait_us+0x24>
   2858e:	bf00      	nop
   28590:	402f4000 	.word	0x402f4000
   28594:	40c00000 	.word	0x40c00000

00028598 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   28598:	4b0e      	ldr	r3, [pc, #56]	; (285d4 <z_sys_init_run_level+0x3c>)
{
   2859a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2859c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   285a0:	3001      	adds	r0, #1
   285a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   285a6:	42a6      	cmp	r6, r4
   285a8:	d800      	bhi.n	285ac <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   285aa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   285ac:	e9d4 3500 	ldrd	r3, r5, [r4]
   285b0:	4628      	mov	r0, r5
   285b2:	4798      	blx	r3
		if (dev != NULL) {
   285b4:	b165      	cbz	r5, 285d0 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   285b6:	68eb      	ldr	r3, [r5, #12]
   285b8:	b130      	cbz	r0, 285c8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   285ba:	2800      	cmp	r0, #0
   285bc:	bfb8      	it	lt
   285be:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   285c0:	28ff      	cmp	r0, #255	; 0xff
   285c2:	bfa8      	it	ge
   285c4:	20ff      	movge	r0, #255	; 0xff
   285c6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   285c8:	785a      	ldrb	r2, [r3, #1]
   285ca:	f042 0201 	orr.w	r2, r2, #1
   285ce:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   285d0:	3408      	adds	r4, #8
   285d2:	e7e8      	b.n	285a6 <z_sys_init_run_level+0xe>
   285d4:	000372c0 	.word	0x000372c0

000285d8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   285d8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   285da:	4605      	mov	r5, r0
   285dc:	b910      	cbnz	r0, 285e4 <z_impl_device_get_binding+0xc>
		return NULL;
   285de:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   285e0:	4620      	mov	r0, r4
   285e2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   285e4:	7803      	ldrb	r3, [r0, #0]
   285e6:	2b00      	cmp	r3, #0
   285e8:	d0f9      	beq.n	285de <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   285ea:	4a0f      	ldr	r2, [pc, #60]	; (28628 <z_impl_device_get_binding+0x50>)
   285ec:	4c0f      	ldr	r4, [pc, #60]	; (2862c <z_impl_device_get_binding+0x54>)
   285ee:	4616      	mov	r6, r2
   285f0:	4294      	cmp	r4, r2
   285f2:	d108      	bne.n	28606 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   285f4:	4c0d      	ldr	r4, [pc, #52]	; (2862c <z_impl_device_get_binding+0x54>)
   285f6:	42b4      	cmp	r4, r6
   285f8:	d0f1      	beq.n	285de <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   285fa:	4620      	mov	r0, r4
   285fc:	f00c fdd2 	bl	351a4 <z_device_ready>
   28600:	b950      	cbnz	r0, 28618 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   28602:	3418      	adds	r4, #24
   28604:	e7f7      	b.n	285f6 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   28606:	4620      	mov	r0, r4
   28608:	f00c fdcc 	bl	351a4 <z_device_ready>
   2860c:	b110      	cbz	r0, 28614 <z_impl_device_get_binding+0x3c>
   2860e:	6823      	ldr	r3, [r4, #0]
   28610:	42ab      	cmp	r3, r5
   28612:	d0e5      	beq.n	285e0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   28614:	3418      	adds	r4, #24
   28616:	e7eb      	b.n	285f0 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   28618:	4628      	mov	r0, r5
   2861a:	6821      	ldr	r1, [r4, #0]
   2861c:	f7e8 ff66 	bl	114ec <strcmp>
   28620:	2800      	cmp	r0, #0
   28622:	d1ee      	bne.n	28602 <z_impl_device_get_binding+0x2a>
   28624:	e7dc      	b.n	285e0 <z_impl_device_get_binding+0x8>
   28626:	bf00      	nop
   28628:	20014d1c 	.word	0x20014d1c
   2862c:	20014c2c 	.word	0x20014c2c

00028630 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   28630:	4b01      	ldr	r3, [pc, #4]	; (28638 <z_impl_z_errno+0x8>)
   28632:	6898      	ldr	r0, [r3, #8]
}
   28634:	3064      	adds	r0, #100	; 0x64
   28636:	4770      	bx	lr
   28638:	20016b74 	.word	0x20016b74

0002863c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2863c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28640:	4605      	mov	r5, r0
   28642:	460f      	mov	r7, r1
	__asm__ volatile(
   28644:	f04f 0320 	mov.w	r3, #32
   28648:	f3ef 8811 	mrs	r8, BASEPRI
   2864c:	f383 8811 	msr	BASEPRI, r3
   28650:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   28654:	f003 f87c 	bl	2b750 <z_impl_k_current_get>
   28658:	4c28      	ldr	r4, [pc, #160]	; (286fc <z_fatal_error+0xc0>)
   2865a:	4b29      	ldr	r3, [pc, #164]	; (28700 <z_fatal_error+0xc4>)
   2865c:	2d04      	cmp	r5, #4
   2865e:	eba4 0403 	sub.w	r4, r4, r3
   28662:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   28666:	bf98      	it	ls
   28668:	4a26      	ldrls	r2, [pc, #152]	; (28704 <z_fatal_error+0xc8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2866a:	ea4f 1484 	mov.w	r4, r4, lsl #6
   2866e:	f044 0301 	orr.w	r3, r4, #1
   28672:	4606      	mov	r6, r0
	switch (reason) {
   28674:	bf94      	ite	ls
   28676:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2867a:	4a23      	ldrhi	r2, [pc, #140]	; (28708 <z_fatal_error+0xcc>)
   2867c:	f8ad 3000 	strh.w	r3, [sp]
   28680:	4629      	mov	r1, r5
   28682:	2300      	movs	r3, #0
   28684:	4821      	ldr	r0, [pc, #132]	; (2870c <z_fatal_error+0xd0>)
   28686:	f005 feed 	bl	2e464 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2868a:	b147      	cbz	r7, 2869e <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2868c:	69fb      	ldr	r3, [r7, #28]
   2868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   28692:	b123      	cbz	r3, 2869e <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   28694:	481e      	ldr	r0, [pc, #120]	; (28710 <z_fatal_error+0xd4>)
   28696:	f044 0101 	orr.w	r1, r4, #1
   2869a:	f005 fea9 	bl	2e3f0 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2869e:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   286a2:	b12e      	cbz	r6, 286b0 <z_fatal_error+0x74>
   286a4:	4630      	mov	r0, r6
   286a6:	f00c fdbd 	bl	35224 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   286aa:	b108      	cbz	r0, 286b0 <z_fatal_error+0x74>
   286ac:	7803      	ldrb	r3, [r0, #0]
   286ae:	b903      	cbnz	r3, 286b2 <z_fatal_error+0x76>
		thread_name = "unknown";
   286b0:	4818      	ldr	r0, [pc, #96]	; (28714 <z_fatal_error+0xd8>)
   286b2:	f7ec fa4f 	bl	14b54 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   286b6:	4623      	mov	r3, r4
   286b8:	4602      	mov	r2, r0
   286ba:	4631      	mov	r1, r6
   286bc:	4816      	ldr	r0, [pc, #88]	; (28718 <z_fatal_error+0xdc>)
   286be:	f005 feb8 	bl	2e432 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   286c2:	4639      	mov	r1, r7
   286c4:	4628      	mov	r0, r5
   286c6:	f7fa fa69 	bl	22b9c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   286ca:	2d04      	cmp	r5, #4
   286cc:	d10c      	bne.n	286e8 <z_fatal_error+0xac>
   286ce:	4913      	ldr	r1, [pc, #76]	; (2871c <z_fatal_error+0xe0>)
   286d0:	238f      	movs	r3, #143	; 0x8f
   286d2:	4a13      	ldr	r2, [pc, #76]	; (28720 <z_fatal_error+0xe4>)
   286d4:	4813      	ldr	r0, [pc, #76]	; (28724 <z_fatal_error+0xe8>)
   286d6:	f005 fb57 	bl	2dd88 <printk>
   286da:	4813      	ldr	r0, [pc, #76]	; (28728 <z_fatal_error+0xec>)
   286dc:	f005 fb54 	bl	2dd88 <printk>
   286e0:	218f      	movs	r1, #143	; 0x8f
   286e2:	480f      	ldr	r0, [pc, #60]	; (28720 <z_fatal_error+0xe4>)
   286e4:	f005 fe36 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   286e8:	f388 8811 	msr	BASEPRI, r8
   286ec:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   286f0:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   286f2:	b002      	add	sp, #8
   286f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   286f8:	f7ee bf48 	b.w	1758c <z_impl_k_thread_abort>
   286fc:	000365c8 	.word	0x000365c8
   28700:	000364b0 	.word	0x000364b0
   28704:	000372d8 	.word	0x000372d8
   28708:	0003df34 	.word	0x0003df34
   2870c:	0003df4a 	.word	0x0003df4a
   28710:	0003df72 	.word	0x0003df72
   28714:	0003df42 	.word	0x0003df42
   28718:	0003df93 	.word	0x0003df93
   2871c:	0003dfcd 	.word	0x0003dfcd
   28720:	0003dfab 	.word	0x0003dfab
   28724:	00037f2c 	.word	0x00037f2c
   28728:	0003dfea 	.word	0x0003dfea

0002872c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2872c:	4802      	ldr	r0, [pc, #8]	; (28738 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   2872e:	4a03      	ldr	r2, [pc, #12]	; (2873c <z_bss_zero+0x10>)
   28730:	2100      	movs	r1, #0
   28732:	1a12      	subs	r2, r2, r0
   28734:	f00c bf47 	b.w	355c6 <memset>
   28738:	20015168 	.word	0x20015168
   2873c:	2001e760 	.word	0x2001e760

00028740 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   28740:	2201      	movs	r2, #1
{
   28742:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   28744:	4b09      	ldr	r3, [pc, #36]	; (2876c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   28746:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   28748:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2874a:	f7ff ff25 	bl	28598 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2874e:	f004 f951 	bl	2c9f4 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   28752:	2003      	movs	r0, #3
   28754:	f7ff ff20 	bl	28598 <z_sys_init_run_level>

	z_init_static_threads();
   28758:	f000 fb7c 	bl	28e54 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   2875c:	f7e9 feb8 	bl	124d0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   28760:	4a03      	ldr	r2, [pc, #12]	; (28770 <bg_thread_main+0x30>)
   28762:	7b13      	ldrb	r3, [r2, #12]
   28764:	f023 0301 	bic.w	r3, r3, #1
   28768:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2876a:	bd08      	pop	{r3, pc}
   2876c:	2001e74c 	.word	0x2001e74c
   28770:	20015d70 	.word	0x20015d70

00028774 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   28774:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   28778:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2877a:	f7ec f901 	bl	14980 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   2877e:	4b37      	ldr	r3, [pc, #220]	; (2885c <z_cstart+0xe8>)
	uint32_t msp =
   28780:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   28784:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   28788:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2878c:	2400      	movs	r4, #0
   2878e:	23e0      	movs	r3, #224	; 0xe0
   28790:	4d33      	ldr	r5, [pc, #204]	; (28860 <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   28792:	f04f 0b01 	mov.w	fp, #1
   28796:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2879a:	77ec      	strb	r4, [r5, #31]
   2879c:	762c      	strb	r4, [r5, #24]
   2879e:	766c      	strb	r4, [r5, #25]
   287a0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   287a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   287a4:	4e2f      	ldr	r6, [pc, #188]	; (28864 <z_cstart+0xf0>)
   287a6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   287aa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   287ac:	f7ee fec4 	bl	17538 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   287b0:	f7ee fc02 	bl	16fb8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   287b4:	f04f 33ff 	mov.w	r3, #4294967295
   287b8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   287ba:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   287bc:	f7ef f8a8 	bl	17910 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   287c0:	f7ee fef6 	bl	175b0 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   287c4:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   287c8:	4d27      	ldr	r5, [pc, #156]	; (28868 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   287ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   287ce:	ab06      	add	r3, sp, #24
   287d0:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   287d2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   287d6:	f00c fce4 	bl	351a2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   287da:	4620      	mov	r0, r4
   287dc:	f7ff fedc 	bl	28598 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   287e0:	2001      	movs	r0, #1
   287e2:	f7ff fed9 	bl	28598 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   287e6:	f8df a098 	ldr.w	sl, [pc, #152]	; 28880 <z_cstart+0x10c>
	z_sched_init();
   287ea:	f002 fe1d 	bl	2b428 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   287ee:	4b1f      	ldr	r3, [pc, #124]	; (2886c <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   287f0:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   287f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   287f6:	491e      	ldr	r1, [pc, #120]	; (28870 <z_cstart+0xfc>)
   287f8:	9305      	str	r3, [sp, #20]
   287fa:	4630      	mov	r0, r6
   287fc:	4653      	mov	r3, sl
   287fe:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   28802:	e9cd 4401 	strd	r4, r4, [sp, #4]
   28806:	9400      	str	r4, [sp, #0]
   28808:	f000 fa76 	bl	28cf8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2880c:	7b73      	ldrb	r3, [r6, #13]
   2880e:	4680      	mov	r8, r0
   28810:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   28814:	4630      	mov	r0, r6
   28816:	7373      	strb	r3, [r6, #13]
   28818:	f002 fbd6 	bl	2afc8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   2881c:	230f      	movs	r3, #15
   2881e:	4f15      	ldr	r7, [pc, #84]	; (28874 <z_cstart+0x100>)
   28820:	f44f 72a0 	mov.w	r2, #320	; 0x140
   28824:	e9cd 4302 	strd	r4, r3, [sp, #8]
   28828:	4913      	ldr	r1, [pc, #76]	; (28878 <z_cstart+0x104>)
   2882a:	4b14      	ldr	r3, [pc, #80]	; (2887c <z_cstart+0x108>)
   2882c:	4638      	mov	r0, r7
   2882e:	e9cd b404 	strd	fp, r4, [sp, #16]
   28832:	e9cd 5400 	strd	r5, r4, [sp]
   28836:	f000 fa5f 	bl	28cf8 <z_setup_new_thread>
   2883a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2883c:	4652      	mov	r2, sl
   2883e:	f023 0304 	bic.w	r3, r3, #4
   28842:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   28844:	f105 0318 	add.w	r3, r5, #24
   28848:	4641      	mov	r1, r8
   2884a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   2884c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   28850:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   28852:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   28854:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   28858:	f7ee fb04 	bl	16e64 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2885c:	20023eb8 	.word	0x20023eb8
   28860:	e000ed00 	.word	0xe000ed00
   28864:	20015d70 	.word	0x20015d70
   28868:	20016b74 	.word	0x20016b74
   2886c:	0003e069 	.word	0x0003e069
   28870:	20021d78 	.word	0x20021d78
   28874:	20015cf0 	.word	0x20015cf0
   28878:	20023d78 	.word	0x20023d78
   2887c:	00028fbd 	.word	0x00028fbd
   28880:	00028741 	.word	0x00028741

00028884 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   28884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   28886:	4d0f      	ldr	r5, [pc, #60]	; (288c4 <statics_init+0x40>)
   28888:	4c0f      	ldr	r4, [pc, #60]	; (288c8 <statics_init+0x44>)
   2888a:	462f      	mov	r7, r5
   2888c:	4e0f      	ldr	r6, [pc, #60]	; (288cc <statics_init+0x48>)
   2888e:	42ac      	cmp	r4, r5
   28890:	d90c      	bls.n	288ac <statics_init+0x28>
   28892:	490f      	ldr	r1, [pc, #60]	; (288d0 <statics_init+0x4c>)
   28894:	2317      	movs	r3, #23
   28896:	4632      	mov	r2, r6
   28898:	480e      	ldr	r0, [pc, #56]	; (288d4 <statics_init+0x50>)
   2889a:	f005 fa75 	bl	2dd88 <printk>
   2889e:	480e      	ldr	r0, [pc, #56]	; (288d8 <statics_init+0x54>)
   288a0:	f005 fa72 	bl	2dd88 <printk>
   288a4:	2117      	movs	r1, #23
   288a6:	4630      	mov	r0, r6
   288a8:	f005 fd54 	bl	2e354 <assert_post_action>
   288ac:	42bc      	cmp	r4, r7
   288ae:	d301      	bcc.n	288b4 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   288b0:	2000      	movs	r0, #0
   288b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   288b4:	4620      	mov	r0, r4
   288b6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   288ba:	f00c fc7c 	bl	351b6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   288be:	3418      	adds	r4, #24
   288c0:	e7e5      	b.n	2888e <statics_init+0xa>
   288c2:	bf00      	nop
   288c4:	20014e18 	.word	0x20014e18
   288c8:	20014de8 	.word	0x20014de8
   288cc:	0003e071 	.word	0x0003e071
   288d0:	0003e093 	.word	0x0003e093
   288d4:	00037f2c 	.word	0x00037f2c
   288d8:	00038636 	.word	0x00038636

000288dc <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   288dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   288e0:	b087      	sub	sp, #28
   288e2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   288e6:	4606      	mov	r6, r0
   288e8:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   288ea:	4640      	mov	r0, r8
   288ec:	4649      	mov	r1, r9
{
   288ee:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   288f0:	f00c fd73 	bl	353da <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   288f4:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   288f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   288fc:	f04f 0320 	mov.w	r3, #32
   28900:	f3ef 8511 	mrs	r5, BASEPRI
   28904:	f383 8811 	msr	BASEPRI, r3
   28908:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2890c:	4620      	mov	r0, r4
   2890e:	f000 fb31 	bl	28f74 <z_spin_lock_valid>
   28912:	b968      	cbnz	r0, 28930 <k_heap_aligned_alloc+0x54>
   28914:	2381      	movs	r3, #129	; 0x81
   28916:	4a3f      	ldr	r2, [pc, #252]	; (28a14 <k_heap_aligned_alloc+0x138>)
   28918:	493f      	ldr	r1, [pc, #252]	; (28a18 <k_heap_aligned_alloc+0x13c>)
   2891a:	4840      	ldr	r0, [pc, #256]	; (28a1c <k_heap_aligned_alloc+0x140>)
   2891c:	f005 fa34 	bl	2dd88 <printk>
   28920:	4621      	mov	r1, r4
   28922:	483f      	ldr	r0, [pc, #252]	; (28a20 <k_heap_aligned_alloc+0x144>)
   28924:	f005 fa30 	bl	2dd88 <printk>
   28928:	2181      	movs	r1, #129	; 0x81
   2892a:	483a      	ldr	r0, [pc, #232]	; (28a14 <k_heap_aligned_alloc+0x138>)
   2892c:	f005 fd12 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   28930:	4620      	mov	r0, r4
   28932:	f000 fb3b 	bl	28fac <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28936:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2893a:	b17b      	cbz	r3, 2895c <k_heap_aligned_alloc+0x80>
   2893c:	ea58 0309 	orrs.w	r3, r8, r9
   28940:	d00c      	beq.n	2895c <k_heap_aligned_alloc+0x80>
   28942:	4938      	ldr	r1, [pc, #224]	; (28a24 <k_heap_aligned_alloc+0x148>)
   28944:	2328      	movs	r3, #40	; 0x28
   28946:	4a38      	ldr	r2, [pc, #224]	; (28a28 <k_heap_aligned_alloc+0x14c>)
   28948:	4834      	ldr	r0, [pc, #208]	; (28a1c <k_heap_aligned_alloc+0x140>)
   2894a:	f005 fa1d 	bl	2dd88 <printk>
   2894e:	4837      	ldr	r0, [pc, #220]	; (28a2c <k_heap_aligned_alloc+0x150>)
   28950:	f005 fa1a 	bl	2dd88 <printk>
   28954:	2128      	movs	r1, #40	; 0x28
   28956:	4834      	ldr	r0, [pc, #208]	; (28a28 <k_heap_aligned_alloc+0x14c>)
   28958:	f005 fcfc 	bl	2e354 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2895c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 28a14 <k_heap_aligned_alloc+0x138>
   28960:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 28a18 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   28964:	4652      	mov	r2, sl
   28966:	4659      	mov	r1, fp
   28968:	4630      	mov	r0, r6
   2896a:	f7eb f937 	bl	13bdc <sys_heap_aligned_alloc>
   2896e:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   28970:	f003 fb10 	bl	2bf94 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   28974:	b1cf      	cbz	r7, 289aa <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28976:	4620      	mov	r0, r4
   28978:	f000 fb0a 	bl	28f90 <z_spin_unlock_valid>
   2897c:	b968      	cbnz	r0, 2899a <k_heap_aligned_alloc+0xbe>
   2897e:	23ac      	movs	r3, #172	; 0xac
   28980:	4a24      	ldr	r2, [pc, #144]	; (28a14 <k_heap_aligned_alloc+0x138>)
   28982:	492b      	ldr	r1, [pc, #172]	; (28a30 <k_heap_aligned_alloc+0x154>)
   28984:	4825      	ldr	r0, [pc, #148]	; (28a1c <k_heap_aligned_alloc+0x140>)
   28986:	f005 f9ff 	bl	2dd88 <printk>
   2898a:	4621      	mov	r1, r4
   2898c:	4829      	ldr	r0, [pc, #164]	; (28a34 <k_heap_aligned_alloc+0x158>)
   2898e:	f005 f9fb 	bl	2dd88 <printk>
   28992:	21ac      	movs	r1, #172	; 0xac
   28994:	481f      	ldr	r0, [pc, #124]	; (28a14 <k_heap_aligned_alloc+0x138>)
   28996:	f005 fcdd 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2899a:	f385 8811 	msr	BASEPRI, r5
   2899e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   289a2:	4638      	mov	r0, r7
   289a4:	b007      	add	sp, #28
   289a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   289aa:	9b04      	ldr	r3, [sp, #16]
   289ac:	1a1b      	subs	r3, r3, r0
   289ae:	9302      	str	r3, [sp, #8]
   289b0:	9b05      	ldr	r3, [sp, #20]
   289b2:	eb63 0301 	sbc.w	r3, r3, r1
   289b6:	9303      	str	r3, [sp, #12]
   289b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   289bc:	2a01      	cmp	r2, #1
   289be:	f173 0300 	sbcs.w	r3, r3, #0
   289c2:	dbd8      	blt.n	28976 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   289c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   289c8:	4629      	mov	r1, r5
   289ca:	e9cd 2300 	strd	r2, r3, [sp]
   289ce:	4620      	mov	r0, r4
   289d0:	f106 020c 	add.w	r2, r6, #12
   289d4:	f002 f8be 	bl	2ab54 <z_pend_curr>
	__asm__ volatile(
   289d8:	f04f 0320 	mov.w	r3, #32
   289dc:	f3ef 8511 	mrs	r5, BASEPRI
   289e0:	f383 8811 	msr	BASEPRI, r3
   289e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   289e8:	4620      	mov	r0, r4
   289ea:	f000 fac3 	bl	28f74 <z_spin_lock_valid>
   289ee:	b968      	cbnz	r0, 28a0c <k_heap_aligned_alloc+0x130>
   289f0:	2381      	movs	r3, #129	; 0x81
   289f2:	4642      	mov	r2, r8
   289f4:	4649      	mov	r1, r9
   289f6:	4809      	ldr	r0, [pc, #36]	; (28a1c <k_heap_aligned_alloc+0x140>)
   289f8:	f005 f9c6 	bl	2dd88 <printk>
   289fc:	4621      	mov	r1, r4
   289fe:	4808      	ldr	r0, [pc, #32]	; (28a20 <k_heap_aligned_alloc+0x144>)
   28a00:	f005 f9c2 	bl	2dd88 <printk>
   28a04:	2181      	movs	r1, #129	; 0x81
   28a06:	4640      	mov	r0, r8
   28a08:	f005 fca4 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   28a0c:	4620      	mov	r0, r4
   28a0e:	f000 facd 	bl	28fac <z_spin_lock_set_owner>
	return k;
   28a12:	e7a7      	b.n	28964 <k_heap_aligned_alloc+0x88>
   28a14:	00037fec 	.word	0x00037fec
   28a18:	0003803e 	.word	0x0003803e
   28a1c:	00037f2c 	.word	0x00037f2c
   28a20:	00038053 	.word	0x00038053
   28a24:	0003e0a9 	.word	0x0003e0a9
   28a28:	0003e071 	.word	0x0003e071
   28a2c:	000385b8 	.word	0x000385b8
   28a30:	00038012 	.word	0x00038012
   28a34:	00038029 	.word	0x00038029

00028a38 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   28a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a3a:	4605      	mov	r5, r0
   28a3c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28a3e:	f100 0414 	add.w	r4, r0, #20
   28a42:	f04f 0320 	mov.w	r3, #32
   28a46:	f3ef 8711 	mrs	r7, BASEPRI
   28a4a:	f383 8811 	msr	BASEPRI, r3
   28a4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a52:	4620      	mov	r0, r4
   28a54:	f000 fa8e 	bl	28f74 <z_spin_lock_valid>
   28a58:	b968      	cbnz	r0, 28a76 <k_heap_free+0x3e>
   28a5a:	2381      	movs	r3, #129	; 0x81
   28a5c:	4a1a      	ldr	r2, [pc, #104]	; (28ac8 <k_heap_free+0x90>)
   28a5e:	491b      	ldr	r1, [pc, #108]	; (28acc <k_heap_free+0x94>)
   28a60:	481b      	ldr	r0, [pc, #108]	; (28ad0 <k_heap_free+0x98>)
   28a62:	f005 f991 	bl	2dd88 <printk>
   28a66:	4621      	mov	r1, r4
   28a68:	481a      	ldr	r0, [pc, #104]	; (28ad4 <k_heap_free+0x9c>)
   28a6a:	f005 f98d 	bl	2dd88 <printk>
   28a6e:	2181      	movs	r1, #129	; 0x81
   28a70:	4815      	ldr	r0, [pc, #84]	; (28ac8 <k_heap_free+0x90>)
   28a72:	f005 fc6f 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   28a76:	4620      	mov	r0, r4
   28a78:	f000 fa98 	bl	28fac <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   28a7c:	4628      	mov	r0, r5
   28a7e:	4631      	mov	r1, r6
   28a80:	f7eb f856 	bl	13b30 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   28a84:	f105 000c 	add.w	r0, r5, #12
   28a88:	f00c fc8d 	bl	353a6 <z_unpend_all>
   28a8c:	b128      	cbz	r0, 28a9a <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   28a8e:	4639      	mov	r1, r7
   28a90:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   28a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   28a96:	f001 be1f 	b.w	2a6d8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28a9a:	4620      	mov	r0, r4
   28a9c:	f000 fa78 	bl	28f90 <z_spin_unlock_valid>
   28aa0:	b968      	cbnz	r0, 28abe <k_heap_free+0x86>
   28aa2:	23ac      	movs	r3, #172	; 0xac
   28aa4:	4a08      	ldr	r2, [pc, #32]	; (28ac8 <k_heap_free+0x90>)
   28aa6:	490c      	ldr	r1, [pc, #48]	; (28ad8 <k_heap_free+0xa0>)
   28aa8:	4809      	ldr	r0, [pc, #36]	; (28ad0 <k_heap_free+0x98>)
   28aaa:	f005 f96d 	bl	2dd88 <printk>
   28aae:	4621      	mov	r1, r4
   28ab0:	480a      	ldr	r0, [pc, #40]	; (28adc <k_heap_free+0xa4>)
   28ab2:	f005 f969 	bl	2dd88 <printk>
   28ab6:	21ac      	movs	r1, #172	; 0xac
   28ab8:	4803      	ldr	r0, [pc, #12]	; (28ac8 <k_heap_free+0x90>)
   28aba:	f005 fc4b 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   28abe:	f387 8811 	msr	BASEPRI, r7
   28ac2:	f3bf 8f6f 	isb	sy
}
   28ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28ac8:	00037fec 	.word	0x00037fec
   28acc:	0003803e 	.word	0x0003803e
   28ad0:	00037f2c 	.word	0x00037f2c
   28ad4:	00038053 	.word	0x00038053
   28ad8:	00038012 	.word	0x00038012
   28adc:	00038029 	.word	0x00038029

00028ae0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   28ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   28ae4:	4d16      	ldr	r5, [pc, #88]	; (28b40 <init_mem_slab_module+0x60>)
   28ae6:	4c17      	ldr	r4, [pc, #92]	; (28b44 <init_mem_slab_module+0x64>)
   28ae8:	46a8      	mov	r8, r5
   28aea:	4e17      	ldr	r6, [pc, #92]	; (28b48 <init_mem_slab_module+0x68>)
   28aec:	42ac      	cmp	r4, r5
   28aee:	d90c      	bls.n	28b0a <init_mem_slab_module+0x2a>
   28af0:	4916      	ldr	r1, [pc, #88]	; (28b4c <init_mem_slab_module+0x6c>)
   28af2:	233c      	movs	r3, #60	; 0x3c
   28af4:	4632      	mov	r2, r6
   28af6:	4816      	ldr	r0, [pc, #88]	; (28b50 <init_mem_slab_module+0x70>)
   28af8:	f005 f946 	bl	2dd88 <printk>
   28afc:	4815      	ldr	r0, [pc, #84]	; (28b54 <init_mem_slab_module+0x74>)
   28afe:	f005 f943 	bl	2dd88 <printk>
   28b02:	213c      	movs	r1, #60	; 0x3c
   28b04:	4630      	mov	r0, r6
   28b06:	f005 fc25 	bl	2e354 <assert_post_action>
   28b0a:	4544      	cmp	r4, r8
   28b0c:	d302      	bcc.n	28b14 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   28b0e:	2000      	movs	r0, #0
	return rc;
}
   28b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   28b14:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   28b18:	ea41 0302 	orr.w	r3, r1, r2
   28b1c:	f013 0303 	ands.w	r3, r3, #3
   28b20:	d10b      	bne.n	28b3a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   28b22:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   28b24:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   28b26:	4283      	cmp	r3, r0
   28b28:	d101      	bne.n	28b2e <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   28b2a:	3420      	adds	r4, #32
   28b2c:	e7de      	b.n	28aec <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   28b2e:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   28b30:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   28b32:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   28b34:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   28b36:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   28b38:	e7f5      	b.n	28b26 <init_mem_slab_module+0x46>
		return -EINVAL;
   28b3a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   28b3e:	e7e7      	b.n	28b10 <init_mem_slab_module+0x30>
   28b40:	20014de8 	.word	0x20014de8
   28b44:	20014d88 	.word	0x20014d88
   28b48:	0003e0ee 	.word	0x0003e0ee
   28b4c:	0003e113 	.word	0x0003e113
   28b50:	00037f2c 	.word	0x00037f2c
   28b54:	00038636 	.word	0x00038636

00028b58 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   28b58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28b5c:	4604      	mov	r4, r0
   28b5e:	460e      	mov	r6, r1
   28b60:	4690      	mov	r8, r2
   28b62:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   28b64:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28b68:	f04f 0320 	mov.w	r3, #32
   28b6c:	f3ef 8711 	mrs	r7, BASEPRI
   28b70:	f383 8811 	msr	BASEPRI, r3
   28b74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28b78:	4628      	mov	r0, r5
   28b7a:	f000 f9fb 	bl	28f74 <z_spin_lock_valid>
   28b7e:	b968      	cbnz	r0, 28b9c <k_mem_slab_alloc+0x44>
   28b80:	2381      	movs	r3, #129	; 0x81
   28b82:	4a24      	ldr	r2, [pc, #144]	; (28c14 <k_mem_slab_alloc+0xbc>)
   28b84:	4924      	ldr	r1, [pc, #144]	; (28c18 <k_mem_slab_alloc+0xc0>)
   28b86:	4825      	ldr	r0, [pc, #148]	; (28c1c <k_mem_slab_alloc+0xc4>)
   28b88:	f005 f8fe 	bl	2dd88 <printk>
   28b8c:	4629      	mov	r1, r5
   28b8e:	4824      	ldr	r0, [pc, #144]	; (28c20 <k_mem_slab_alloc+0xc8>)
   28b90:	f005 f8fa 	bl	2dd88 <printk>
   28b94:	2181      	movs	r1, #129	; 0x81
   28b96:	481f      	ldr	r0, [pc, #124]	; (28c14 <k_mem_slab_alloc+0xbc>)
   28b98:	f005 fbdc 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   28b9c:	4628      	mov	r0, r5
   28b9e:	f000 fa05 	bl	28fac <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   28ba2:	69a3      	ldr	r3, [r4, #24]
   28ba4:	b1eb      	cbz	r3, 28be2 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   28ba6:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   28ba8:	681b      	ldr	r3, [r3, #0]
   28baa:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   28bac:	69e3      	ldr	r3, [r4, #28]
   28bae:	3301      	adds	r3, #1
   28bb0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   28bb2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28bb4:	4628      	mov	r0, r5
   28bb6:	f000 f9eb 	bl	28f90 <z_spin_unlock_valid>
   28bba:	b968      	cbnz	r0, 28bd8 <k_mem_slab_alloc+0x80>
   28bbc:	23ac      	movs	r3, #172	; 0xac
   28bbe:	4a15      	ldr	r2, [pc, #84]	; (28c14 <k_mem_slab_alloc+0xbc>)
   28bc0:	4918      	ldr	r1, [pc, #96]	; (28c24 <k_mem_slab_alloc+0xcc>)
   28bc2:	4816      	ldr	r0, [pc, #88]	; (28c1c <k_mem_slab_alloc+0xc4>)
   28bc4:	f005 f8e0 	bl	2dd88 <printk>
   28bc8:	4629      	mov	r1, r5
   28bca:	4817      	ldr	r0, [pc, #92]	; (28c28 <k_mem_slab_alloc+0xd0>)
   28bcc:	f005 f8dc 	bl	2dd88 <printk>
   28bd0:	21ac      	movs	r1, #172	; 0xac
   28bd2:	4810      	ldr	r0, [pc, #64]	; (28c14 <k_mem_slab_alloc+0xbc>)
   28bd4:	f005 fbbe 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   28bd8:	f387 8811 	msr	BASEPRI, r7
   28bdc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   28be0:	e013      	b.n	28c0a <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   28be2:	ea58 0209 	orrs.w	r2, r8, r9
   28be6:	d103      	bne.n	28bf0 <k_mem_slab_alloc+0x98>
		result = -ENOMEM;
   28be8:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   28bec:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   28bee:	e7e1      	b.n	28bb4 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   28bf0:	4622      	mov	r2, r4
   28bf2:	4639      	mov	r1, r7
   28bf4:	4628      	mov	r0, r5
   28bf6:	e9cd 8900 	strd	r8, r9, [sp]
   28bfa:	f001 ffab 	bl	2ab54 <z_pend_curr>
		if (result == 0) {
   28bfe:	4604      	mov	r4, r0
   28c00:	b918      	cbnz	r0, 28c0a <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   28c02:	4b0a      	ldr	r3, [pc, #40]	; (28c2c <k_mem_slab_alloc+0xd4>)
   28c04:	689b      	ldr	r3, [r3, #8]
   28c06:	695b      	ldr	r3, [r3, #20]
   28c08:	6033      	str	r3, [r6, #0]
}
   28c0a:	4620      	mov	r0, r4
   28c0c:	b003      	add	sp, #12
   28c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28c12:	bf00      	nop
   28c14:	00037fec 	.word	0x00037fec
   28c18:	0003803e 	.word	0x0003803e
   28c1c:	00037f2c 	.word	0x00037f2c
   28c20:	00038053 	.word	0x00038053
   28c24:	00038012 	.word	0x00038012
   28c28:	00038029 	.word	0x00038029
   28c2c:	20016b74 	.word	0x20016b74

00028c30 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   28c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c34:	4604      	mov	r4, r0
   28c36:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   28c38:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28c3c:	f04f 0320 	mov.w	r3, #32
   28c40:	f3ef 8711 	mrs	r7, BASEPRI
   28c44:	f383 8811 	msr	BASEPRI, r3
   28c48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28c4c:	4628      	mov	r0, r5
   28c4e:	f000 f991 	bl	28f74 <z_spin_lock_valid>
   28c52:	b968      	cbnz	r0, 28c70 <k_mem_slab_free+0x40>
   28c54:	2381      	movs	r3, #129	; 0x81
   28c56:	4a22      	ldr	r2, [pc, #136]	; (28ce0 <k_mem_slab_free+0xb0>)
   28c58:	4922      	ldr	r1, [pc, #136]	; (28ce4 <k_mem_slab_free+0xb4>)
   28c5a:	4823      	ldr	r0, [pc, #140]	; (28ce8 <k_mem_slab_free+0xb8>)
   28c5c:	f005 f894 	bl	2dd88 <printk>
   28c60:	4629      	mov	r1, r5
   28c62:	4822      	ldr	r0, [pc, #136]	; (28cec <k_mem_slab_free+0xbc>)
   28c64:	f005 f890 	bl	2dd88 <printk>
   28c68:	2181      	movs	r1, #129	; 0x81
   28c6a:	481d      	ldr	r0, [pc, #116]	; (28ce0 <k_mem_slab_free+0xb0>)
   28c6c:	f005 fb72 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   28c70:	4628      	mov	r0, r5
   28c72:	f000 f99b 	bl	28fac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   28c76:	f8d4 8018 	ldr.w	r8, [r4, #24]
   28c7a:	f1b8 0f00 	cmp.w	r8, #0
   28c7e:	d10f      	bne.n	28ca0 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   28c80:	4620      	mov	r0, r4
   28c82:	f002 fb81 	bl	2b388 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   28c86:	b158      	cbz	r0, 28ca0 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   28c88:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   28c8a:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   28c8e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   28c90:	f002 f99a 	bl	2afc8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   28c94:	4639      	mov	r1, r7
   28c96:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   28c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   28c9c:	f001 bd1c 	b.w	2a6d8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   28ca0:	6833      	ldr	r3, [r6, #0]
   28ca2:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28ca4:	4628      	mov	r0, r5
   28ca6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   28ca8:	6833      	ldr	r3, [r6, #0]
   28caa:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   28cac:	69e3      	ldr	r3, [r4, #28]
   28cae:	3b01      	subs	r3, #1
   28cb0:	61e3      	str	r3, [r4, #28]
   28cb2:	f000 f96d 	bl	28f90 <z_spin_unlock_valid>
   28cb6:	b968      	cbnz	r0, 28cd4 <k_mem_slab_free+0xa4>
   28cb8:	23ac      	movs	r3, #172	; 0xac
   28cba:	4a09      	ldr	r2, [pc, #36]	; (28ce0 <k_mem_slab_free+0xb0>)
   28cbc:	490c      	ldr	r1, [pc, #48]	; (28cf0 <k_mem_slab_free+0xc0>)
   28cbe:	480a      	ldr	r0, [pc, #40]	; (28ce8 <k_mem_slab_free+0xb8>)
   28cc0:	f005 f862 	bl	2dd88 <printk>
   28cc4:	4629      	mov	r1, r5
   28cc6:	480b      	ldr	r0, [pc, #44]	; (28cf4 <k_mem_slab_free+0xc4>)
   28cc8:	f005 f85e 	bl	2dd88 <printk>
   28ccc:	21ac      	movs	r1, #172	; 0xac
   28cce:	4804      	ldr	r0, [pc, #16]	; (28ce0 <k_mem_slab_free+0xb0>)
   28cd0:	f005 fb40 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   28cd4:	f387 8811 	msr	BASEPRI, r7
   28cd8:	f3bf 8f6f 	isb	sy
}
   28cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28ce0:	00037fec 	.word	0x00037fec
   28ce4:	0003803e 	.word	0x0003803e
   28ce8:	00037f2c 	.word	0x00037f2c
   28cec:	00038053 	.word	0x00038053
   28cf0:	00038012 	.word	0x00038012
   28cf4:	00038029 	.word	0x00038029

00028cf8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   28cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28cfc:	b085      	sub	sp, #20
   28cfe:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   28d02:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   28d04:	f1b9 0f0f 	cmp.w	r9, #15
{
   28d08:	460f      	mov	r7, r1
   28d0a:	4615      	mov	r5, r2
   28d0c:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   28d0e:	d12e      	bne.n	28d6e <z_setup_new_thread+0x76>
   28d10:	4b23      	ldr	r3, [pc, #140]	; (28da0 <z_setup_new_thread+0xa8>)
   28d12:	4598      	cmp	r8, r3
   28d14:	d12f      	bne.n	28d76 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   28d16:	f104 0358 	add.w	r3, r4, #88	; 0x58
   28d1a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   28d1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   28d20:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   28d22:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   28d24:	2304      	movs	r3, #4
   28d26:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   28d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   28d2a:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   28d2c:	9302      	str	r3, [sp, #8]
   28d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   28d30:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   28d34:	9301      	str	r3, [sp, #4]
   28d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   28d38:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   28d3a:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   28d3e:	9300      	str	r3, [sp, #0]
   28d40:	462a      	mov	r2, r5
   28d42:	4643      	mov	r3, r8
   28d44:	4639      	mov	r1, r7
   28d46:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   28d48:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   28d4c:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   28d4e:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   28d52:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   28d54:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   28d56:	f7ee f869 	bl	16e2c <arch_new_thread>
	if (!_current) {
   28d5a:	4b12      	ldr	r3, [pc, #72]	; (28da4 <z_setup_new_thread+0xac>)
	new_thread->init_data = NULL;
   28d5c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   28d5e:	689b      	ldr	r3, [r3, #8]
   28d60:	b103      	cbz	r3, 28d64 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   28d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   28d64:	4628      	mov	r0, r5
   28d66:	6763      	str	r3, [r4, #116]	; 0x74
   28d68:	b005      	add	sp, #20
   28d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   28d6e:	f109 0310 	add.w	r3, r9, #16
   28d72:	2b1e      	cmp	r3, #30
   28d74:	d9cf      	bls.n	28d16 <z_setup_new_thread+0x1e>
   28d76:	f44f 7302 	mov.w	r3, #520	; 0x208
   28d7a:	4a0b      	ldr	r2, [pc, #44]	; (28da8 <z_setup_new_thread+0xb0>)
   28d7c:	490b      	ldr	r1, [pc, #44]	; (28dac <z_setup_new_thread+0xb4>)
   28d7e:	480c      	ldr	r0, [pc, #48]	; (28db0 <z_setup_new_thread+0xb8>)
   28d80:	f005 f802 	bl	2dd88 <printk>
   28d84:	4649      	mov	r1, r9
   28d86:	f06f 030f 	mvn.w	r3, #15
   28d8a:	220e      	movs	r2, #14
   28d8c:	4809      	ldr	r0, [pc, #36]	; (28db4 <z_setup_new_thread+0xbc>)
   28d8e:	f004 fffb 	bl	2dd88 <printk>
   28d92:	f44f 7102 	mov.w	r1, #520	; 0x208
   28d96:	4804      	ldr	r0, [pc, #16]	; (28da8 <z_setup_new_thread+0xb0>)
   28d98:	f005 fadc 	bl	2e354 <assert_post_action>
   28d9c:	e7bb      	b.n	28d16 <z_setup_new_thread+0x1e>
   28d9e:	bf00      	nop
   28da0:	00028fbd 	.word	0x00028fbd
   28da4:	20016b74 	.word	0x20016b74
   28da8:	0003e130 	.word	0x0003e130
   28dac:	0003e153 	.word	0x0003e153
   28db0:	00037f2c 	.word	0x00037f2c
   28db4:	0003e1d3 	.word	0x0003e1d3

00028db8 <z_impl_k_thread_create>:
{
   28db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28dbc:	b087      	sub	sp, #28
   28dbe:	4604      	mov	r4, r0
   28dc0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   28dc4:	460d      	mov	r5, r1
   28dc6:	4690      	mov	r8, r2
   28dc8:	4699      	mov	r9, r3
   28dca:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   28dce:	b173      	cbz	r3, 28dee <z_impl_k_thread_create+0x36>
   28dd0:	491b      	ldr	r1, [pc, #108]	; (28e40 <z_impl_k_thread_create+0x88>)
   28dd2:	f240 2371 	movw	r3, #625	; 0x271
   28dd6:	4a1b      	ldr	r2, [pc, #108]	; (28e44 <z_impl_k_thread_create+0x8c>)
   28dd8:	481b      	ldr	r0, [pc, #108]	; (28e48 <z_impl_k_thread_create+0x90>)
   28dda:	f004 ffd5 	bl	2dd88 <printk>
   28dde:	481b      	ldr	r0, [pc, #108]	; (28e4c <z_impl_k_thread_create+0x94>)
   28de0:	f004 ffd2 	bl	2dd88 <printk>
   28de4:	f240 2171 	movw	r1, #625	; 0x271
   28de8:	4816      	ldr	r0, [pc, #88]	; (28e44 <z_impl_k_thread_create+0x8c>)
   28dea:	f005 fab3 	bl	2e354 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28dee:	2300      	movs	r3, #0
   28df0:	9305      	str	r3, [sp, #20]
   28df2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28df4:	4642      	mov	r2, r8
   28df6:	9304      	str	r3, [sp, #16]
   28df8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   28dfa:	4629      	mov	r1, r5
   28dfc:	9303      	str	r3, [sp, #12]
   28dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   28e00:	4620      	mov	r0, r4
   28e02:	9302      	str	r3, [sp, #8]
   28e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   28e06:	9301      	str	r3, [sp, #4]
   28e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28e0a:	9300      	str	r3, [sp, #0]
   28e0c:	464b      	mov	r3, r9
   28e0e:	f7ff ff73 	bl	28cf8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   28e12:	1c7b      	adds	r3, r7, #1
   28e14:	bf08      	it	eq
   28e16:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   28e1a:	d005      	beq.n	28e28 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   28e1c:	ea56 0307 	orrs.w	r3, r6, r7
   28e20:	d106      	bne.n	28e30 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   28e22:	4620      	mov	r0, r4
   28e24:	f002 f918 	bl	2b058 <z_sched_start>
}
   28e28:	4620      	mov	r0, r4
   28e2a:	b007      	add	sp, #28
   28e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   28e30:	4632      	mov	r2, r6
   28e32:	463b      	mov	r3, r7
   28e34:	4906      	ldr	r1, [pc, #24]	; (28e50 <z_impl_k_thread_create+0x98>)
   28e36:	f104 0018 	add.w	r0, r4, #24
   28e3a:	f002 fe27 	bl	2ba8c <z_add_timeout>
   28e3e:	e7f3      	b.n	28e28 <z_impl_k_thread_create+0x70>
   28e40:	0003e204 	.word	0x0003e204
   28e44:	0003e130 	.word	0x0003e130
   28e48:	00037f2c 	.word	0x00037f2c
   28e4c:	0003e216 	.word	0x0003e216
   28e50:	0002b101 	.word	0x0002b101

00028e54 <z_init_static_threads>:
{
   28e54:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   28e58:	4f3f      	ldr	r7, [pc, #252]	; (28f58 <z_init_static_threads+0x104>)
   28e5a:	4d40      	ldr	r5, [pc, #256]	; (28f5c <z_init_static_threads+0x108>)
   28e5c:	463e      	mov	r6, r7
   28e5e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 28f6c <z_init_static_threads+0x118>
{
   28e62:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   28e64:	42bd      	cmp	r5, r7
   28e66:	d90e      	bls.n	28e86 <z_init_static_threads+0x32>
   28e68:	493d      	ldr	r1, [pc, #244]	; (28f60 <z_init_static_threads+0x10c>)
   28e6a:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   28e6e:	4642      	mov	r2, r8
   28e70:	483c      	ldr	r0, [pc, #240]	; (28f64 <z_init_static_threads+0x110>)
   28e72:	f004 ff89 	bl	2dd88 <printk>
   28e76:	483c      	ldr	r0, [pc, #240]	; (28f68 <z_init_static_threads+0x114>)
   28e78:	f004 ff86 	bl	2dd88 <printk>
   28e7c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   28e80:	4640      	mov	r0, r8
   28e82:	f005 fa67 	bl	2e354 <assert_post_action>
   28e86:	42b5      	cmp	r5, r6
   28e88:	f105 0430 	add.w	r4, r5, #48	; 0x30
   28e8c:	d31f      	bcc.n	28ece <z_init_static_threads+0x7a>
	k_sched_lock();
   28e8e:	f001 fc67 	bl	2a760 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   28e92:	4c32      	ldr	r4, [pc, #200]	; (28f5c <z_init_static_threads+0x108>)
   28e94:	4d35      	ldr	r5, [pc, #212]	; (28f6c <z_init_static_threads+0x118>)
   28e96:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 28f60 <z_init_static_threads+0x10c>
   28e9a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 28f64 <z_init_static_threads+0x110>
   28e9e:	42b4      	cmp	r4, r6
   28ea0:	d90e      	bls.n	28ec0 <z_init_static_threads+0x6c>
   28ea2:	4641      	mov	r1, r8
   28ea4:	f240 23f7 	movw	r3, #759	; 0x2f7
   28ea8:	462a      	mov	r2, r5
   28eaa:	4648      	mov	r0, r9
   28eac:	f004 ff6c 	bl	2dd88 <printk>
   28eb0:	482d      	ldr	r0, [pc, #180]	; (28f68 <z_init_static_threads+0x114>)
   28eb2:	f004 ff69 	bl	2dd88 <printk>
   28eb6:	f240 21f7 	movw	r1, #759	; 0x2f7
   28eba:	4628      	mov	r0, r5
   28ebc:	f005 fa4a 	bl	2e354 <assert_post_action>
   28ec0:	42b4      	cmp	r4, r6
   28ec2:	d321      	bcc.n	28f08 <z_init_static_threads+0xb4>
}
   28ec4:	b006      	add	sp, #24
   28ec6:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   28eca:	f001 bedd 	b.w	2ac88 <k_sched_unlock>
		z_setup_new_thread(
   28ece:	f854 3c04 	ldr.w	r3, [r4, #-4]
   28ed2:	9305      	str	r3, [sp, #20]
   28ed4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   28ed8:	9304      	str	r3, [sp, #16]
   28eda:	f854 3c14 	ldr.w	r3, [r4, #-20]
   28ede:	9303      	str	r3, [sp, #12]
   28ee0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   28ee4:	9302      	str	r3, [sp, #8]
   28ee6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   28eea:	9301      	str	r3, [sp, #4]
   28eec:	f854 3c20 	ldr.w	r3, [r4, #-32]
   28ef0:	9300      	str	r3, [sp, #0]
   28ef2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   28ef6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   28efa:	f7ff fefd 	bl	28cf8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   28efe:	f854 3c30 	ldr.w	r3, [r4, #-48]
   28f02:	655d      	str	r5, [r3, #84]	; 0x54
   28f04:	4625      	mov	r5, r4
   28f06:	e7ad      	b.n	28e64 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   28f08:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28f0a:	1c4b      	adds	r3, r1, #1
   28f0c:	d014      	beq.n	28f38 <z_init_static_threads+0xe4>
   28f0e:	f240 32e7 	movw	r2, #999	; 0x3e7
   28f12:	2300      	movs	r3, #0
   28f14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   28f18:	4693      	mov	fp, r2
   28f1a:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   28f1c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   28f20:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   28f24:	459c      	cmp	ip, r3
   28f26:	bf08      	it	eq
   28f28:	4593      	cmpeq	fp, r2
   28f2a:	4658      	mov	r0, fp
   28f2c:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   28f2e:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   28f30:	d104      	bne.n	28f3c <z_init_static_threads+0xe8>
	z_sched_start(thread);
   28f32:	4638      	mov	r0, r7
   28f34:	f002 f890 	bl	2b058 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   28f38:	3430      	adds	r4, #48	; 0x30
   28f3a:	e7b0      	b.n	28e9e <z_init_static_threads+0x4a>
   28f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28f40:	2300      	movs	r3, #0
   28f42:	f7e8 f955 	bl	111f0 <__aeabi_uldivmod>
   28f46:	4602      	mov	r2, r0
   28f48:	460b      	mov	r3, r1
   28f4a:	f107 0018 	add.w	r0, r7, #24
   28f4e:	4908      	ldr	r1, [pc, #32]	; (28f70 <z_init_static_threads+0x11c>)
   28f50:	f002 fd9c 	bl	2ba8c <z_add_timeout>
   28f54:	e7f0      	b.n	28f38 <z_init_static_threads+0xe4>
   28f56:	bf00      	nop
   28f58:	20014d4c 	.word	0x20014d4c
   28f5c:	20014d1c 	.word	0x20014d1c
   28f60:	0003e23b 	.word	0x0003e23b
   28f64:	00037f2c 	.word	0x00037f2c
   28f68:	00038636 	.word	0x00038636
   28f6c:	0003e130 	.word	0x0003e130
   28f70:	0002b101 	.word	0x0002b101

00028f74 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   28f74:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   28f76:	b138      	cbz	r0, 28f88 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   28f78:	4b04      	ldr	r3, [pc, #16]	; (28f8c <z_spin_lock_valid+0x18>)
   28f7a:	f000 0003 	and.w	r0, r0, #3
   28f7e:	7d1b      	ldrb	r3, [r3, #20]
   28f80:	1ac0      	subs	r0, r0, r3
   28f82:	bf18      	it	ne
   28f84:	2001      	movne	r0, #1
   28f86:	4770      	bx	lr
			return false;
		}
	}
	return true;
   28f88:	2001      	movs	r0, #1
}
   28f8a:	4770      	bx	lr
   28f8c:	20016b74 	.word	0x20016b74

00028f90 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   28f90:	4905      	ldr	r1, [pc, #20]	; (28fa8 <z_spin_unlock_valid+0x18>)
{
   28f92:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   28f94:	688a      	ldr	r2, [r1, #8]
   28f96:	7d08      	ldrb	r0, [r1, #20]
   28f98:	6819      	ldr	r1, [r3, #0]
   28f9a:	4302      	orrs	r2, r0
   28f9c:	2000      	movs	r0, #0
   28f9e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   28fa0:	bf04      	itt	eq
   28fa2:	6018      	streq	r0, [r3, #0]
	return true;
   28fa4:	2001      	moveq	r0, #1
}
   28fa6:	4770      	bx	lr
   28fa8:	20016b74 	.word	0x20016b74

00028fac <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   28fac:	4a02      	ldr	r2, [pc, #8]	; (28fb8 <z_spin_lock_set_owner+0xc>)
   28fae:	7d11      	ldrb	r1, [r2, #20]
   28fb0:	6893      	ldr	r3, [r2, #8]
   28fb2:	430b      	orrs	r3, r1
   28fb4:	6003      	str	r3, [r0, #0]
}
   28fb6:	4770      	bx	lr
   28fb8:	20016b74 	.word	0x20016b74

00028fbc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   28fbc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   28fbe:	4c09      	ldr	r4, [pc, #36]	; (28fe4 <idle+0x28>)
	__asm__ volatile(
   28fc0:	f04f 0220 	mov.w	r2, #32
   28fc4:	f3ef 8311 	mrs	r3, BASEPRI
   28fc8:	f382 8811 	msr	BASEPRI, r2
   28fcc:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   28fd0:	f002 fe7e 	bl	2bcd0 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   28fd4:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   28fd6:	f7ec fd4b 	bl	15a70 <pm_system_suspend>
   28fda:	2800      	cmp	r0, #0
   28fdc:	d1f0      	bne.n	28fc0 <idle+0x4>
	arch_cpu_idle();
   28fde:	f7ed fff1 	bl	16fc4 <arch_cpu_idle>
}
   28fe2:	e7ed      	b.n	28fc0 <idle+0x4>
   28fe4:	20016b74 	.word	0x20016b74

00028fe8 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   28fe8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   28fec:	4604      	mov	r4, r0
   28fee:	468a      	mov	sl, r1
   28ff0:	4690      	mov	r8, r2
   28ff2:	4699      	mov	r9, r3
   28ff4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   28ff8:	b17b      	cbz	r3, 2901a <z_impl_k_msgq_put+0x32>
   28ffa:	ea58 0309 	orrs.w	r3, r8, r9
   28ffe:	d00c      	beq.n	2901a <z_impl_k_msgq_put+0x32>
   29000:	4943      	ldr	r1, [pc, #268]	; (29110 <z_impl_k_msgq_put+0x128>)
   29002:	2376      	movs	r3, #118	; 0x76
   29004:	4a43      	ldr	r2, [pc, #268]	; (29114 <z_impl_k_msgq_put+0x12c>)
   29006:	4844      	ldr	r0, [pc, #272]	; (29118 <z_impl_k_msgq_put+0x130>)
   29008:	f004 febe 	bl	2dd88 <printk>
   2900c:	4843      	ldr	r0, [pc, #268]	; (2911c <z_impl_k_msgq_put+0x134>)
   2900e:	f004 febb 	bl	2dd88 <printk>
   29012:	2176      	movs	r1, #118	; 0x76
   29014:	483f      	ldr	r0, [pc, #252]	; (29114 <z_impl_k_msgq_put+0x12c>)
   29016:	f005 f99d 	bl	2e354 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2901a:	f104 0508 	add.w	r5, r4, #8
   2901e:	f04f 0320 	mov.w	r3, #32
   29022:	f3ef 8711 	mrs	r7, BASEPRI
   29026:	f383 8811 	msr	BASEPRI, r3
   2902a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2902e:	4628      	mov	r0, r5
   29030:	f7ff ffa0 	bl	28f74 <z_spin_lock_valid>
   29034:	b968      	cbnz	r0, 29052 <z_impl_k_msgq_put+0x6a>
   29036:	2381      	movs	r3, #129	; 0x81
   29038:	4a39      	ldr	r2, [pc, #228]	; (29120 <z_impl_k_msgq_put+0x138>)
   2903a:	493a      	ldr	r1, [pc, #232]	; (29124 <z_impl_k_msgq_put+0x13c>)
   2903c:	4836      	ldr	r0, [pc, #216]	; (29118 <z_impl_k_msgq_put+0x130>)
   2903e:	f004 fea3 	bl	2dd88 <printk>
   29042:	4629      	mov	r1, r5
   29044:	4838      	ldr	r0, [pc, #224]	; (29128 <z_impl_k_msgq_put+0x140>)
   29046:	f004 fe9f 	bl	2dd88 <printk>
   2904a:	2181      	movs	r1, #129	; 0x81
   2904c:	4834      	ldr	r0, [pc, #208]	; (29120 <z_impl_k_msgq_put+0x138>)
   2904e:	f005 f981 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29052:	4628      	mov	r0, r5
   29054:	f7ff ffaa 	bl	28fac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   29058:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2905a:	6923      	ldr	r3, [r4, #16]
   2905c:	429a      	cmp	r2, r3
   2905e:	d244      	bcs.n	290ea <z_impl_k_msgq_put+0x102>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   29060:	4620      	mov	r0, r4
   29062:	f002 f991 	bl	2b388 <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29066:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   29068:	4606      	mov	r6, r0
   2906a:	68e2      	ldr	r2, [r4, #12]
   2906c:	b178      	cbz	r0, 2908e <z_impl_k_msgq_put+0xa6>
   2906e:	2400      	movs	r4, #0
   29070:	6940      	ldr	r0, [r0, #20]
   29072:	f00c fa88 	bl	35586 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   29076:	4630      	mov	r0, r6
   29078:	67f4      	str	r4, [r6, #124]	; 0x7c
   2907a:	f001 ffa5 	bl	2afc8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2907e:	4639      	mov	r1, r7
   29080:	4628      	mov	r0, r5
   29082:	f001 fb29 	bl	2a6d8 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   29086:	4620      	mov	r0, r4
   29088:	b002      	add	sp, #8
   2908a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2908e:	6a20      	ldr	r0, [r4, #32]
   29090:	f00c fa79 	bl	35586 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   29094:	6a23      	ldr	r3, [r4, #32]
   29096:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   29098:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   2909c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2909e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   290a0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   290a2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   290a4:	bf08      	it	eq
   290a6:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   290a8:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   290ac:	bf08      	it	eq
   290ae:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   290b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   290b2:	3301      	adds	r3, #1
   290b4:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   290b6:	f00c fa17 	bl	354e8 <z_handle_obj_poll_events>
		result = 0;
   290ba:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   290bc:	4628      	mov	r0, r5
   290be:	f7ff ff67 	bl	28f90 <z_spin_unlock_valid>
   290c2:	b968      	cbnz	r0, 290e0 <z_impl_k_msgq_put+0xf8>
   290c4:	23ac      	movs	r3, #172	; 0xac
   290c6:	4a16      	ldr	r2, [pc, #88]	; (29120 <z_impl_k_msgq_put+0x138>)
   290c8:	4918      	ldr	r1, [pc, #96]	; (2912c <z_impl_k_msgq_put+0x144>)
   290ca:	4813      	ldr	r0, [pc, #76]	; (29118 <z_impl_k_msgq_put+0x130>)
   290cc:	f004 fe5c 	bl	2dd88 <printk>
   290d0:	4629      	mov	r1, r5
   290d2:	4817      	ldr	r0, [pc, #92]	; (29130 <z_impl_k_msgq_put+0x148>)
   290d4:	f004 fe58 	bl	2dd88 <printk>
   290d8:	21ac      	movs	r1, #172	; 0xac
   290da:	4811      	ldr	r0, [pc, #68]	; (29120 <z_impl_k_msgq_put+0x138>)
   290dc:	f005 f93a 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   290e0:	f387 8811 	msr	BASEPRI, r7
   290e4:	f3bf 8f6f 	isb	sy
	return result;
   290e8:	e7cd      	b.n	29086 <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   290ea:	ea58 0309 	orrs.w	r3, r8, r9
   290ee:	d00c      	beq.n	2910a <z_impl_k_msgq_put+0x122>
		_current->base.swap_data = (void *) data;
   290f0:	4b10      	ldr	r3, [pc, #64]	; (29134 <z_impl_k_msgq_put+0x14c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   290f2:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   290f4:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   290f6:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   290f8:	f8c3 a014 	str.w	sl, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   290fc:	4628      	mov	r0, r5
   290fe:	e9cd 8900 	strd	r8, r9, [sp]
   29102:	f001 fd27 	bl	2ab54 <z_pend_curr>
   29106:	4604      	mov	r4, r0
		return result;
   29108:	e7bd      	b.n	29086 <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   2910a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2910e:	e7d5      	b.n	290bc <z_impl_k_msgq_put+0xd4>
   29110:	0003e0a9 	.word	0x0003e0a9
   29114:	0003e268 	.word	0x0003e268
   29118:	00037f2c 	.word	0x00037f2c
   2911c:	000385b8 	.word	0x000385b8
   29120:	00037fec 	.word	0x00037fec
   29124:	0003803e 	.word	0x0003803e
   29128:	00038053 	.word	0x00038053
   2912c:	00038012 	.word	0x00038012
   29130:	00038029 	.word	0x00038029
   29134:	20016b74 	.word	0x20016b74

00029138 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   29138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2913c:	4604      	mov	r4, r0
   2913e:	460d      	mov	r5, r1
   29140:	4690      	mov	r8, r2
   29142:	4699      	mov	r9, r3
   29144:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   29148:	b17b      	cbz	r3, 2916a <z_impl_k_msgq_get+0x32>
   2914a:	ea58 0309 	orrs.w	r3, r8, r9
   2914e:	d00c      	beq.n	2916a <z_impl_k_msgq_get+0x32>
   29150:	4946      	ldr	r1, [pc, #280]	; (2926c <z_impl_k_msgq_get+0x134>)
   29152:	23d0      	movs	r3, #208	; 0xd0
   29154:	4a46      	ldr	r2, [pc, #280]	; (29270 <z_impl_k_msgq_get+0x138>)
   29156:	4847      	ldr	r0, [pc, #284]	; (29274 <z_impl_k_msgq_get+0x13c>)
   29158:	f004 fe16 	bl	2dd88 <printk>
   2915c:	4846      	ldr	r0, [pc, #280]	; (29278 <z_impl_k_msgq_get+0x140>)
   2915e:	f004 fe13 	bl	2dd88 <printk>
   29162:	21d0      	movs	r1, #208	; 0xd0
   29164:	4842      	ldr	r0, [pc, #264]	; (29270 <z_impl_k_msgq_get+0x138>)
   29166:	f005 f8f5 	bl	2e354 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   2916a:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   2916e:	f04f 0320 	mov.w	r3, #32
   29172:	f3ef 8711 	mrs	r7, BASEPRI
   29176:	f383 8811 	msr	BASEPRI, r3
   2917a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2917e:	4630      	mov	r0, r6
   29180:	f7ff fef8 	bl	28f74 <z_spin_lock_valid>
   29184:	b968      	cbnz	r0, 291a2 <z_impl_k_msgq_get+0x6a>
   29186:	2381      	movs	r3, #129	; 0x81
   29188:	4a3c      	ldr	r2, [pc, #240]	; (2927c <z_impl_k_msgq_get+0x144>)
   2918a:	493d      	ldr	r1, [pc, #244]	; (29280 <z_impl_k_msgq_get+0x148>)
   2918c:	4839      	ldr	r0, [pc, #228]	; (29274 <z_impl_k_msgq_get+0x13c>)
   2918e:	f004 fdfb 	bl	2dd88 <printk>
   29192:	4631      	mov	r1, r6
   29194:	483b      	ldr	r0, [pc, #236]	; (29284 <z_impl_k_msgq_get+0x14c>)
   29196:	f004 fdf7 	bl	2dd88 <printk>
   2919a:	2181      	movs	r1, #129	; 0x81
   2919c:	4837      	ldr	r0, [pc, #220]	; (2927c <z_impl_k_msgq_get+0x144>)
   2919e:	f005 f8d9 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   291a2:	4630      	mov	r0, r6
   291a4:	f7ff ff02 	bl	28fac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   291a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   291aa:	2b00      	cmp	r3, #0
   291ac:	d035      	beq.n	2921a <z_impl_k_msgq_get+0xe2>
   291ae:	4628      	mov	r0, r5
   291b0:	68e2      	ldr	r2, [r4, #12]
   291b2:	69e1      	ldr	r1, [r4, #28]
   291b4:	f00c f9e7 	bl	35586 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   291b8:	69e3      	ldr	r3, [r4, #28]
   291ba:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   291bc:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   291be:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   291c0:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   291c2:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   291c4:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   291c6:	bf04      	itt	eq
   291c8:	6963      	ldreq	r3, [r4, #20]
   291ca:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   291cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   291ce:	3b01      	subs	r3, #1
   291d0:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   291d2:	f002 f8d9 	bl	2b388 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   291d6:	4605      	mov	r5, r0
   291d8:	2800      	cmp	r0, #0
   291da:	d02f      	beq.n	2923c <z_impl_k_msgq_get+0x104>
   291dc:	6941      	ldr	r1, [r0, #20]
   291de:	68e2      	ldr	r2, [r4, #12]
   291e0:	6a20      	ldr	r0, [r4, #32]
   291e2:	f00c f9d0 	bl	35586 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   291e6:	6a23      	ldr	r3, [r4, #32]
   291e8:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   291ea:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   291ec:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   291ee:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   291f0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   291f2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   291f4:	bf04      	itt	eq
   291f6:	6963      	ldreq	r3, [r4, #20]
   291f8:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   291fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   291fc:	3301      	adds	r3, #1
   291fe:	6263      	str	r3, [r4, #36]	; 0x24
   29200:	2400      	movs	r4, #0
   29202:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   29204:	f001 fee0 	bl	2afc8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   29208:	4639      	mov	r1, r7
   2920a:	4630      	mov	r0, r6
   2920c:	f001 fa64 	bl	2a6d8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   29210:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   29212:	4628      	mov	r0, r5
   29214:	b003      	add	sp, #12
   29216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2921a:	ea58 0309 	orrs.w	r3, r8, r9
   2921e:	d00b      	beq.n	29238 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   29220:	4b19      	ldr	r3, [pc, #100]	; (29288 <z_impl_k_msgq_get+0x150>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   29222:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   29224:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   29226:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   29228:	615d      	str	r5, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2922a:	4630      	mov	r0, r6
   2922c:	e9cd 8900 	strd	r8, r9, [sp]
   29230:	f001 fc90 	bl	2ab54 <z_pend_curr>
   29234:	4605      	mov	r5, r0
		return result;
   29236:	e7ec      	b.n	29212 <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   29238:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2923c:	4630      	mov	r0, r6
   2923e:	f7ff fea7 	bl	28f90 <z_spin_unlock_valid>
   29242:	b968      	cbnz	r0, 29260 <z_impl_k_msgq_get+0x128>
   29244:	23ac      	movs	r3, #172	; 0xac
   29246:	4a0d      	ldr	r2, [pc, #52]	; (2927c <z_impl_k_msgq_get+0x144>)
   29248:	4910      	ldr	r1, [pc, #64]	; (2928c <z_impl_k_msgq_get+0x154>)
   2924a:	480a      	ldr	r0, [pc, #40]	; (29274 <z_impl_k_msgq_get+0x13c>)
   2924c:	f004 fd9c 	bl	2dd88 <printk>
   29250:	4631      	mov	r1, r6
   29252:	480f      	ldr	r0, [pc, #60]	; (29290 <z_impl_k_msgq_get+0x158>)
   29254:	f004 fd98 	bl	2dd88 <printk>
   29258:	21ac      	movs	r1, #172	; 0xac
   2925a:	4808      	ldr	r0, [pc, #32]	; (2927c <z_impl_k_msgq_get+0x144>)
   2925c:	f005 f87a 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29260:	f387 8811 	msr	BASEPRI, r7
   29264:	f3bf 8f6f 	isb	sy
	return result;
   29268:	e7d3      	b.n	29212 <z_impl_k_msgq_get+0xda>
   2926a:	bf00      	nop
   2926c:	0003e0a9 	.word	0x0003e0a9
   29270:	0003e268 	.word	0x0003e268
   29274:	00037f2c 	.word	0x00037f2c
   29278:	000385b8 	.word	0x000385b8
   2927c:	00037fec 	.word	0x00037fec
   29280:	0003803e 	.word	0x0003803e
   29284:	00038053 	.word	0x00038053
   29288:	20016b74 	.word	0x20016b74
   2928c:	00038012 	.word	0x00038012
   29290:	00038029 	.word	0x00038029

00029294 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
   29294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29296:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
   29298:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2929c:	f04f 0320 	mov.w	r3, #32
   292a0:	f3ef 8611 	mrs	r6, BASEPRI
   292a4:	f383 8811 	msr	BASEPRI, r3
   292a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   292ac:	4628      	mov	r0, r5
   292ae:	f7ff fe61 	bl	28f74 <z_spin_lock_valid>
   292b2:	b968      	cbnz	r0, 292d0 <z_impl_k_msgq_purge+0x3c>
   292b4:	2381      	movs	r3, #129	; 0x81
   292b6:	4a12      	ldr	r2, [pc, #72]	; (29300 <z_impl_k_msgq_purge+0x6c>)
   292b8:	4912      	ldr	r1, [pc, #72]	; (29304 <z_impl_k_msgq_purge+0x70>)
   292ba:	4813      	ldr	r0, [pc, #76]	; (29308 <z_impl_k_msgq_purge+0x74>)
   292bc:	f004 fd64 	bl	2dd88 <printk>
   292c0:	4629      	mov	r1, r5
   292c2:	4812      	ldr	r0, [pc, #72]	; (2930c <z_impl_k_msgq_purge+0x78>)
   292c4:	f004 fd60 	bl	2dd88 <printk>
   292c8:	2181      	movs	r1, #129	; 0x81
   292ca:	480d      	ldr	r0, [pc, #52]	; (29300 <z_impl_k_msgq_purge+0x6c>)
   292cc:	f005 f842 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   292d0:	4628      	mov	r0, r5
   292d2:	f7ff fe6b 	bl	28fac <z_spin_lock_set_owner>
   292d6:	f06f 0722 	mvn.w	r7, #34	; 0x22

	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
   292da:	4620      	mov	r0, r4
   292dc:	f002 f854 	bl	2b388 <z_unpend_first_thread>
   292e0:	4603      	mov	r3, r0
   292e2:	b940      	cbnz	r0, 292f6 <z_impl_k_msgq_purge+0x62>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
   292e4:	6a23      	ldr	r3, [r4, #32]
	msgq->used_msgs = 0;
   292e6:	6260      	str	r0, [r4, #36]	; 0x24

	z_reschedule(&msgq->lock, key);
   292e8:	4631      	mov	r1, r6
   292ea:	4628      	mov	r0, r5
	msgq->read_ptr = msgq->write_ptr;
   292ec:	61e3      	str	r3, [r4, #28]
}
   292ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
   292f2:	f001 b9f1 	b.w	2a6d8 <z_reschedule>
   292f6:	67df      	str	r7, [r3, #124]	; 0x7c
		z_ready_thread(pending_thread);
   292f8:	f001 fe66 	bl	2afc8 <z_ready_thread>
   292fc:	e7ed      	b.n	292da <z_impl_k_msgq_purge+0x46>
   292fe:	bf00      	nop
   29300:	00037fec 	.word	0x00037fec
   29304:	0003803e 	.word	0x0003803e
   29308:	00037f2c 	.word	0x00037f2c
   2930c:	00038053 	.word	0x00038053

00029310 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   29310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29314:	4604      	mov	r4, r0
   29316:	4616      	mov	r6, r2
   29318:	461f      	mov	r7, r3
   2931a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2931e:	b163      	cbz	r3, 2933a <z_impl_k_mutex_lock+0x2a>
   29320:	496d      	ldr	r1, [pc, #436]	; (294d8 <z_impl_k_mutex_lock+0x1c8>)
   29322:	2365      	movs	r3, #101	; 0x65
   29324:	4a6d      	ldr	r2, [pc, #436]	; (294dc <z_impl_k_mutex_lock+0x1cc>)
   29326:	486e      	ldr	r0, [pc, #440]	; (294e0 <z_impl_k_mutex_lock+0x1d0>)
   29328:	f004 fd2e 	bl	2dd88 <printk>
   2932c:	486d      	ldr	r0, [pc, #436]	; (294e4 <z_impl_k_mutex_lock+0x1d4>)
   2932e:	f004 fd2b 	bl	2dd88 <printk>
   29332:	2165      	movs	r1, #101	; 0x65
   29334:	4869      	ldr	r0, [pc, #420]	; (294dc <z_impl_k_mutex_lock+0x1cc>)
   29336:	f005 f80d 	bl	2e354 <assert_post_action>
   2933a:	f04f 0320 	mov.w	r3, #32
   2933e:	f3ef 8811 	mrs	r8, BASEPRI
   29342:	f383 8811 	msr	BASEPRI, r3
   29346:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2934a:	4867      	ldr	r0, [pc, #412]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   2934c:	f7ff fe12 	bl	28f74 <z_spin_lock_valid>
   29350:	b968      	cbnz	r0, 2936e <z_impl_k_mutex_lock+0x5e>
   29352:	2381      	movs	r3, #129	; 0x81
   29354:	4a65      	ldr	r2, [pc, #404]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   29356:	4966      	ldr	r1, [pc, #408]	; (294f0 <z_impl_k_mutex_lock+0x1e0>)
   29358:	4861      	ldr	r0, [pc, #388]	; (294e0 <z_impl_k_mutex_lock+0x1d0>)
   2935a:	f004 fd15 	bl	2dd88 <printk>
   2935e:	4962      	ldr	r1, [pc, #392]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   29360:	4864      	ldr	r0, [pc, #400]	; (294f4 <z_impl_k_mutex_lock+0x1e4>)
   29362:	f004 fd11 	bl	2dd88 <printk>
   29366:	2181      	movs	r1, #129	; 0x81
   29368:	4860      	ldr	r0, [pc, #384]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   2936a:	f004 fff3 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2936e:	485e      	ldr	r0, [pc, #376]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   29370:	f7ff fe1c 	bl	28fac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   29374:	68e3      	ldr	r3, [r4, #12]
   29376:	4a60      	ldr	r2, [pc, #384]	; (294f8 <z_impl_k_mutex_lock+0x1e8>)
   29378:	b1fb      	cbz	r3, 293ba <z_impl_k_mutex_lock+0xaa>
   2937a:	68a0      	ldr	r0, [r4, #8]
   2937c:	6891      	ldr	r1, [r2, #8]
   2937e:	4288      	cmp	r0, r1
   29380:	d03d      	beq.n	293fe <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   29382:	ea56 0307 	orrs.w	r3, r6, r7
   29386:	d13c      	bne.n	29402 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29388:	4857      	ldr	r0, [pc, #348]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   2938a:	f7ff fe01 	bl	28f90 <z_spin_unlock_valid>
   2938e:	b968      	cbnz	r0, 293ac <z_impl_k_mutex_lock+0x9c>
   29390:	23ac      	movs	r3, #172	; 0xac
   29392:	4a56      	ldr	r2, [pc, #344]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   29394:	4959      	ldr	r1, [pc, #356]	; (294fc <z_impl_k_mutex_lock+0x1ec>)
   29396:	4852      	ldr	r0, [pc, #328]	; (294e0 <z_impl_k_mutex_lock+0x1d0>)
   29398:	f004 fcf6 	bl	2dd88 <printk>
   2939c:	4952      	ldr	r1, [pc, #328]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   2939e:	4858      	ldr	r0, [pc, #352]	; (29500 <z_impl_k_mutex_lock+0x1f0>)
   293a0:	f004 fcf2 	bl	2dd88 <printk>
   293a4:	21ac      	movs	r1, #172	; 0xac
   293a6:	4851      	ldr	r0, [pc, #324]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   293a8:	f004 ffd4 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   293ac:	f388 8811 	msr	BASEPRI, r8
   293b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   293b4:	f06f 000f 	mvn.w	r0, #15
   293b8:	e01e      	b.n	293f8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   293ba:	6891      	ldr	r1, [r2, #8]
   293bc:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   293c0:	3301      	adds	r3, #1
   293c2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   293c4:	6893      	ldr	r3, [r2, #8]
   293c6:	4848      	ldr	r0, [pc, #288]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   293c8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   293ca:	60a3      	str	r3, [r4, #8]
   293cc:	f7ff fde0 	bl	28f90 <z_spin_unlock_valid>
   293d0:	b968      	cbnz	r0, 293ee <z_impl_k_mutex_lock+0xde>
   293d2:	23ac      	movs	r3, #172	; 0xac
   293d4:	4a45      	ldr	r2, [pc, #276]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   293d6:	4949      	ldr	r1, [pc, #292]	; (294fc <z_impl_k_mutex_lock+0x1ec>)
   293d8:	4841      	ldr	r0, [pc, #260]	; (294e0 <z_impl_k_mutex_lock+0x1d0>)
   293da:	f004 fcd5 	bl	2dd88 <printk>
   293de:	4942      	ldr	r1, [pc, #264]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   293e0:	4847      	ldr	r0, [pc, #284]	; (29500 <z_impl_k_mutex_lock+0x1f0>)
   293e2:	f004 fcd1 	bl	2dd88 <printk>
   293e6:	21ac      	movs	r1, #172	; 0xac
   293e8:	4840      	ldr	r0, [pc, #256]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   293ea:	f004 ffb3 	bl	2e354 <assert_post_action>
   293ee:	f388 8811 	msr	BASEPRI, r8
   293f2:	f3bf 8f6f 	isb	sy
		return 0;
   293f6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   293f8:	b002      	add	sp, #8
   293fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   293fe:	6921      	ldr	r1, [r4, #16]
   29400:	e7de      	b.n	293c0 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   29402:	f990 300e 	ldrsb.w	r3, [r0, #14]
   29406:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2940a:	4299      	cmp	r1, r3
   2940c:	bfa8      	it	ge
   2940e:	4619      	movge	r1, r3
   29410:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   29414:	428b      	cmp	r3, r1
   29416:	dd41      	ble.n	2949c <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   29418:	f001 fecc 	bl	2b1b4 <z_set_prio>
   2941c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2941e:	4622      	mov	r2, r4
   29420:	4641      	mov	r1, r8
   29422:	e9cd 6700 	strd	r6, r7, [sp]
   29426:	4830      	ldr	r0, [pc, #192]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   29428:	f001 fb94 	bl	2ab54 <z_pend_curr>
	if (got_mutex == 0) {
   2942c:	2800      	cmp	r0, #0
   2942e:	d0e3      	beq.n	293f8 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   29430:	f04f 0320 	mov.w	r3, #32
   29434:	f3ef 8611 	mrs	r6, BASEPRI
   29438:	f383 8811 	msr	BASEPRI, r3
   2943c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29440:	4829      	ldr	r0, [pc, #164]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   29442:	f7ff fd97 	bl	28f74 <z_spin_lock_valid>
   29446:	b968      	cbnz	r0, 29464 <z_impl_k_mutex_lock+0x154>
   29448:	2381      	movs	r3, #129	; 0x81
   2944a:	4a28      	ldr	r2, [pc, #160]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   2944c:	4928      	ldr	r1, [pc, #160]	; (294f0 <z_impl_k_mutex_lock+0x1e0>)
   2944e:	4824      	ldr	r0, [pc, #144]	; (294e0 <z_impl_k_mutex_lock+0x1d0>)
   29450:	f004 fc9a 	bl	2dd88 <printk>
   29454:	4924      	ldr	r1, [pc, #144]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   29456:	4827      	ldr	r0, [pc, #156]	; (294f4 <z_impl_k_mutex_lock+0x1e4>)
   29458:	f004 fc96 	bl	2dd88 <printk>
   2945c:	2181      	movs	r1, #129	; 0x81
   2945e:	4823      	ldr	r0, [pc, #140]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   29460:	f004 ff78 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29464:	4820      	ldr	r0, [pc, #128]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   29466:	f7ff fda1 	bl	28fac <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2946a:	6823      	ldr	r3, [r4, #0]
   2946c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2946e:	429c      	cmp	r4, r3
   29470:	d007      	beq.n	29482 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   29472:	b133      	cbz	r3, 29482 <z_impl_k_mutex_lock+0x172>
   29474:	f993 300e 	ldrsb.w	r3, [r3, #14]
   29478:	4299      	cmp	r1, r3
   2947a:	bfa8      	it	ge
   2947c:	4619      	movge	r1, r3
   2947e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   29482:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   29484:	f990 300e 	ldrsb.w	r3, [r0, #14]
   29488:	4299      	cmp	r1, r3
   2948a:	d109      	bne.n	294a0 <z_impl_k_mutex_lock+0x190>
	if (resched) {
   2948c:	b16d      	cbz	r5, 294aa <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   2948e:	4631      	mov	r1, r6
   29490:	4815      	ldr	r0, [pc, #84]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   29492:	f001 f921 	bl	2a6d8 <z_reschedule>
	return -EAGAIN;
   29496:	f06f 000a 	mvn.w	r0, #10
   2949a:	e7ad      	b.n	293f8 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   2949c:	2500      	movs	r5, #0
   2949e:	e7be      	b.n	2941e <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   294a0:	f001 fe88 	bl	2b1b4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   294a4:	2800      	cmp	r0, #0
   294a6:	d1f2      	bne.n	2948e <z_impl_k_mutex_lock+0x17e>
   294a8:	e7f0      	b.n	2948c <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   294aa:	480f      	ldr	r0, [pc, #60]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   294ac:	f7ff fd70 	bl	28f90 <z_spin_unlock_valid>
   294b0:	b968      	cbnz	r0, 294ce <z_impl_k_mutex_lock+0x1be>
   294b2:	23ac      	movs	r3, #172	; 0xac
   294b4:	4a0d      	ldr	r2, [pc, #52]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   294b6:	4911      	ldr	r1, [pc, #68]	; (294fc <z_impl_k_mutex_lock+0x1ec>)
   294b8:	4809      	ldr	r0, [pc, #36]	; (294e0 <z_impl_k_mutex_lock+0x1d0>)
   294ba:	f004 fc65 	bl	2dd88 <printk>
   294be:	490a      	ldr	r1, [pc, #40]	; (294e8 <z_impl_k_mutex_lock+0x1d8>)
   294c0:	480f      	ldr	r0, [pc, #60]	; (29500 <z_impl_k_mutex_lock+0x1f0>)
   294c2:	f004 fc61 	bl	2dd88 <printk>
   294c6:	21ac      	movs	r1, #172	; 0xac
   294c8:	4808      	ldr	r0, [pc, #32]	; (294ec <z_impl_k_mutex_lock+0x1dc>)
   294ca:	f004 ff43 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   294ce:	f386 8811 	msr	BASEPRI, r6
   294d2:	f3bf 8f6f 	isb	sy
   294d6:	e7de      	b.n	29496 <z_impl_k_mutex_lock+0x186>
   294d8:	0003e204 	.word	0x0003e204
   294dc:	0003e28a 	.word	0x0003e28a
   294e0:	00037f2c 	.word	0x00037f2c
   294e4:	0003e2ac 	.word	0x0003e2ac
   294e8:	20016ba4 	.word	0x20016ba4
   294ec:	00037fec 	.word	0x00037fec
   294f0:	0003803e 	.word	0x0003803e
   294f4:	00038053 	.word	0x00038053
   294f8:	20016b74 	.word	0x20016b74
   294fc:	00038012 	.word	0x00038012
   29500:	00038029 	.word	0x00038029

00029504 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   29504:	b538      	push	{r3, r4, r5, lr}
   29506:	4604      	mov	r4, r0
   29508:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2950c:	b163      	cbz	r3, 29528 <z_impl_k_mutex_unlock+0x24>
   2950e:	4952      	ldr	r1, [pc, #328]	; (29658 <z_impl_k_mutex_unlock+0x154>)
   29510:	23c7      	movs	r3, #199	; 0xc7
   29512:	4a52      	ldr	r2, [pc, #328]	; (2965c <z_impl_k_mutex_unlock+0x158>)
   29514:	4852      	ldr	r0, [pc, #328]	; (29660 <z_impl_k_mutex_unlock+0x15c>)
   29516:	f004 fc37 	bl	2dd88 <printk>
   2951a:	4852      	ldr	r0, [pc, #328]	; (29664 <z_impl_k_mutex_unlock+0x160>)
   2951c:	f004 fc34 	bl	2dd88 <printk>
   29520:	21c7      	movs	r1, #199	; 0xc7
   29522:	484e      	ldr	r0, [pc, #312]	; (2965c <z_impl_k_mutex_unlock+0x158>)
   29524:	f004 ff16 	bl	2e354 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   29528:	68a3      	ldr	r3, [r4, #8]
   2952a:	2b00      	cmp	r3, #0
   2952c:	f000 808d 	beq.w	2964a <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   29530:	4d4d      	ldr	r5, [pc, #308]	; (29668 <z_impl_k_mutex_unlock+0x164>)
   29532:	68aa      	ldr	r2, [r5, #8]
   29534:	4293      	cmp	r3, r2
   29536:	f040 808b 	bne.w	29650 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2953a:	68e3      	ldr	r3, [r4, #12]
   2953c:	b94b      	cbnz	r3, 29552 <z_impl_k_mutex_unlock+0x4e>
   2953e:	494b      	ldr	r1, [pc, #300]	; (2966c <z_impl_k_mutex_unlock+0x168>)
   29540:	4847      	ldr	r0, [pc, #284]	; (29660 <z_impl_k_mutex_unlock+0x15c>)
   29542:	23df      	movs	r3, #223	; 0xdf
   29544:	4a45      	ldr	r2, [pc, #276]	; (2965c <z_impl_k_mutex_unlock+0x158>)
   29546:	f004 fc1f 	bl	2dd88 <printk>
   2954a:	21df      	movs	r1, #223	; 0xdf
   2954c:	4843      	ldr	r0, [pc, #268]	; (2965c <z_impl_k_mutex_unlock+0x158>)
   2954e:	f004 ff01 	bl	2e354 <assert_post_action>
   29552:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   29556:	b163      	cbz	r3, 29572 <z_impl_k_mutex_unlock+0x6e>
   29558:	493f      	ldr	r1, [pc, #252]	; (29658 <z_impl_k_mutex_unlock+0x154>)
   2955a:	23fe      	movs	r3, #254	; 0xfe
   2955c:	4a44      	ldr	r2, [pc, #272]	; (29670 <z_impl_k_mutex_unlock+0x16c>)
   2955e:	4840      	ldr	r0, [pc, #256]	; (29660 <z_impl_k_mutex_unlock+0x15c>)
   29560:	f004 fc12 	bl	2dd88 <printk>
   29564:	4843      	ldr	r0, [pc, #268]	; (29674 <z_impl_k_mutex_unlock+0x170>)
   29566:	f004 fc0f 	bl	2dd88 <printk>
   2956a:	21fe      	movs	r1, #254	; 0xfe
   2956c:	4840      	ldr	r0, [pc, #256]	; (29670 <z_impl_k_mutex_unlock+0x16c>)
   2956e:	f004 fef1 	bl	2e354 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   29572:	68ab      	ldr	r3, [r5, #8]
   29574:	7bdb      	ldrb	r3, [r3, #15]
   29576:	2b01      	cmp	r3, #1
   29578:	d10c      	bne.n	29594 <z_impl_k_mutex_unlock+0x90>
   2957a:	493f      	ldr	r1, [pc, #252]	; (29678 <z_impl_k_mutex_unlock+0x174>)
   2957c:	23ff      	movs	r3, #255	; 0xff
   2957e:	4a3c      	ldr	r2, [pc, #240]	; (29670 <z_impl_k_mutex_unlock+0x16c>)
   29580:	4837      	ldr	r0, [pc, #220]	; (29660 <z_impl_k_mutex_unlock+0x15c>)
   29582:	f004 fc01 	bl	2dd88 <printk>
   29586:	483b      	ldr	r0, [pc, #236]	; (29674 <z_impl_k_mutex_unlock+0x170>)
   29588:	f004 fbfe 	bl	2dd88 <printk>
   2958c:	21ff      	movs	r1, #255	; 0xff
   2958e:	4838      	ldr	r0, [pc, #224]	; (29670 <z_impl_k_mutex_unlock+0x16c>)
   29590:	f004 fee0 	bl	2e354 <assert_post_action>

	--_current->base.sched_locked;
   29594:	68aa      	ldr	r2, [r5, #8]
   29596:	7bd3      	ldrb	r3, [r2, #15]
   29598:	3b01      	subs	r3, #1
   2959a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   2959c:	68e3      	ldr	r3, [r4, #12]
   2959e:	2b01      	cmp	r3, #1
   295a0:	d005      	beq.n	295ae <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   295a2:	3b01      	subs	r3, #1
   295a4:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   295a6:	f001 fb6f 	bl	2ac88 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   295aa:	2000      	movs	r0, #0
}
   295ac:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   295ae:	f04f 0320 	mov.w	r3, #32
   295b2:	f3ef 8511 	mrs	r5, BASEPRI
   295b6:	f383 8811 	msr	BASEPRI, r3
   295ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   295be:	482f      	ldr	r0, [pc, #188]	; (2967c <z_impl_k_mutex_unlock+0x178>)
   295c0:	f7ff fcd8 	bl	28f74 <z_spin_lock_valid>
   295c4:	b968      	cbnz	r0, 295e2 <z_impl_k_mutex_unlock+0xde>
   295c6:	2381      	movs	r3, #129	; 0x81
   295c8:	4a2d      	ldr	r2, [pc, #180]	; (29680 <z_impl_k_mutex_unlock+0x17c>)
   295ca:	492e      	ldr	r1, [pc, #184]	; (29684 <z_impl_k_mutex_unlock+0x180>)
   295cc:	4824      	ldr	r0, [pc, #144]	; (29660 <z_impl_k_mutex_unlock+0x15c>)
   295ce:	f004 fbdb 	bl	2dd88 <printk>
   295d2:	492a      	ldr	r1, [pc, #168]	; (2967c <z_impl_k_mutex_unlock+0x178>)
   295d4:	482c      	ldr	r0, [pc, #176]	; (29688 <z_impl_k_mutex_unlock+0x184>)
   295d6:	f004 fbd7 	bl	2dd88 <printk>
   295da:	2181      	movs	r1, #129	; 0x81
   295dc:	4828      	ldr	r0, [pc, #160]	; (29680 <z_impl_k_mutex_unlock+0x17c>)
   295de:	f004 feb9 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   295e2:	4826      	ldr	r0, [pc, #152]	; (2967c <z_impl_k_mutex_unlock+0x178>)
   295e4:	f7ff fce2 	bl	28fac <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   295e8:	68a0      	ldr	r0, [r4, #8]
   295ea:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   295ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
   295f0:	4299      	cmp	r1, r3
   295f2:	d001      	beq.n	295f8 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   295f4:	f001 fdde 	bl	2b1b4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   295f8:	4620      	mov	r0, r4
   295fa:	f001 fec5 	bl	2b388 <z_unpend_first_thread>
	mutex->owner = new_owner;
   295fe:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   29600:	b158      	cbz	r0, 2961a <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   29602:	f990 200e 	ldrsb.w	r2, [r0, #14]
   29606:	6122      	str	r2, [r4, #16]
   29608:	2200      	movs	r2, #0
   2960a:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2960c:	f001 fcdc 	bl	2afc8 <z_ready_thread>
		z_reschedule(&lock, key);
   29610:	4629      	mov	r1, r5
   29612:	481a      	ldr	r0, [pc, #104]	; (2967c <z_impl_k_mutex_unlock+0x178>)
   29614:	f001 f860 	bl	2a6d8 <z_reschedule>
   29618:	e7c5      	b.n	295a6 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   2961a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2961c:	4817      	ldr	r0, [pc, #92]	; (2967c <z_impl_k_mutex_unlock+0x178>)
   2961e:	f7ff fcb7 	bl	28f90 <z_spin_unlock_valid>
   29622:	b968      	cbnz	r0, 29640 <z_impl_k_mutex_unlock+0x13c>
   29624:	23ac      	movs	r3, #172	; 0xac
   29626:	4a16      	ldr	r2, [pc, #88]	; (29680 <z_impl_k_mutex_unlock+0x17c>)
   29628:	4918      	ldr	r1, [pc, #96]	; (2968c <z_impl_k_mutex_unlock+0x188>)
   2962a:	480d      	ldr	r0, [pc, #52]	; (29660 <z_impl_k_mutex_unlock+0x15c>)
   2962c:	f004 fbac 	bl	2dd88 <printk>
   29630:	4912      	ldr	r1, [pc, #72]	; (2967c <z_impl_k_mutex_unlock+0x178>)
   29632:	4817      	ldr	r0, [pc, #92]	; (29690 <z_impl_k_mutex_unlock+0x18c>)
   29634:	f004 fba8 	bl	2dd88 <printk>
   29638:	21ac      	movs	r1, #172	; 0xac
   2963a:	4811      	ldr	r0, [pc, #68]	; (29680 <z_impl_k_mutex_unlock+0x17c>)
   2963c:	f004 fe8a 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29640:	f385 8811 	msr	BASEPRI, r5
   29644:	f3bf 8f6f 	isb	sy
   29648:	e7ad      	b.n	295a6 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   2964a:	f06f 0015 	mvn.w	r0, #21
   2964e:	e7ad      	b.n	295ac <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   29650:	f04f 30ff 	mov.w	r0, #4294967295
   29654:	e7aa      	b.n	295ac <z_impl_k_mutex_unlock+0xa8>
   29656:	bf00      	nop
   29658:	0003e204 	.word	0x0003e204
   2965c:	0003e28a 	.word	0x0003e28a
   29660:	00037f2c 	.word	0x00037f2c
   29664:	0003e2ac 	.word	0x0003e2ac
   29668:	20016b74 	.word	0x20016b74
   2966c:	0003e2d1 	.word	0x0003e2d1
   29670:	0003e2e8 	.word	0x0003e2e8
   29674:	000385b8 	.word	0x000385b8
   29678:	0003e313 	.word	0x0003e313
   2967c:	20016ba4 	.word	0x20016ba4
   29680:	00037fec 	.word	0x00037fec
   29684:	0003803e 	.word	0x0003803e
   29688:	00038053 	.word	0x00038053
   2968c:	00038012 	.word	0x00038012
   29690:	00038029 	.word	0x00038029

00029694 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   29694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29698:	4604      	mov	r4, r0
   2969a:	460e      	mov	r6, r1
   2969c:	4690      	mov	r8, r2
   2969e:	4699      	mov	r9, r3
   296a0:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   296a4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   296a8:	f04f 0320 	mov.w	r3, #32
   296ac:	f3ef 8711 	mrs	r7, BASEPRI
   296b0:	f383 8811 	msr	BASEPRI, r3
   296b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   296b8:	4628      	mov	r0, r5
   296ba:	f7ff fc5b 	bl	28f74 <z_spin_lock_valid>
   296be:	b968      	cbnz	r0, 296dc <queue_insert+0x48>
   296c0:	2381      	movs	r3, #129	; 0x81
   296c2:	4a3b      	ldr	r2, [pc, #236]	; (297b0 <queue_insert+0x11c>)
   296c4:	493b      	ldr	r1, [pc, #236]	; (297b4 <queue_insert+0x120>)
   296c6:	483c      	ldr	r0, [pc, #240]	; (297b8 <queue_insert+0x124>)
   296c8:	f004 fb5e 	bl	2dd88 <printk>
   296cc:	4629      	mov	r1, r5
   296ce:	483b      	ldr	r0, [pc, #236]	; (297bc <queue_insert+0x128>)
   296d0:	f004 fb5a 	bl	2dd88 <printk>
   296d4:	2181      	movs	r1, #129	; 0x81
   296d6:	4836      	ldr	r0, [pc, #216]	; (297b0 <queue_insert+0x11c>)
   296d8:	f004 fe3c 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   296dc:	4628      	mov	r0, r5
   296de:	f7ff fc65 	bl	28fac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   296e2:	f1ba 0f00 	cmp.w	sl, #0
   296e6:	d000      	beq.n	296ea <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   296e8:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   296ea:	f104 000c 	add.w	r0, r4, #12
   296ee:	f001 fe4b 	bl	2b388 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   296f2:	b158      	cbz	r0, 2970c <queue_insert+0x78>
   296f4:	2400      	movs	r4, #0
   296f6:	f8c0 8014 	str.w	r8, [r0, #20]
   296fa:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   296fc:	f001 fc64 	bl	2afc8 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   29700:	4628      	mov	r0, r5
   29702:	4639      	mov	r1, r7
   29704:	f000 ffe8 	bl	2a6d8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   29708:	2000      	movs	r0, #0
   2970a:	e01e      	b.n	2974a <queue_insert+0xb6>
	if (alloc) {
   2970c:	f1b9 0f00 	cmp.w	r9, #0
   29710:	d02d      	beq.n	2976e <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   29712:	2108      	movs	r1, #8
   29714:	f003 f956 	bl	2c9c4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   29718:	b9c8      	cbnz	r0, 2974e <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2971a:	4628      	mov	r0, r5
   2971c:	f7ff fc38 	bl	28f90 <z_spin_unlock_valid>
   29720:	b968      	cbnz	r0, 2973e <queue_insert+0xaa>
   29722:	23ac      	movs	r3, #172	; 0xac
   29724:	4a22      	ldr	r2, [pc, #136]	; (297b0 <queue_insert+0x11c>)
   29726:	4926      	ldr	r1, [pc, #152]	; (297c0 <queue_insert+0x12c>)
   29728:	4823      	ldr	r0, [pc, #140]	; (297b8 <queue_insert+0x124>)
   2972a:	f004 fb2d 	bl	2dd88 <printk>
   2972e:	4629      	mov	r1, r5
   29730:	4824      	ldr	r0, [pc, #144]	; (297c4 <queue_insert+0x130>)
   29732:	f004 fb29 	bl	2dd88 <printk>
   29736:	21ac      	movs	r1, #172	; 0xac
   29738:	481d      	ldr	r0, [pc, #116]	; (297b0 <queue_insert+0x11c>)
   2973a:	f004 fe0b 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2973e:	f387 8811 	msr	BASEPRI, r7
   29742:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   29746:	f06f 000b 	mvn.w	r0, #11
}
   2974a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2974e:	2301      	movs	r3, #1
		anode->data = data;
   29750:	f8c0 8004 	str.w	r8, [r0, #4]
   29754:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   29756:	6803      	ldr	r3, [r0, #0]
   29758:	f003 0303 	and.w	r3, r3, #3
   2975c:	b95e      	cbnz	r6, 29776 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2975e:	6822      	ldr	r2, [r4, #0]
   29760:	4313      	orrs	r3, r2
   29762:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   29764:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   29766:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   29768:	b973      	cbnz	r3, 29788 <queue_insert+0xf4>
	list->tail = node;
   2976a:	6060      	str	r0, [r4, #4]
}
   2976c:	e00c      	b.n	29788 <queue_insert+0xf4>
}
   2976e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   29770:	f8c8 9000 	str.w	r9, [r8]
}
   29774:	e7ef      	b.n	29756 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   29776:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   29778:	f032 0203 	bics.w	r2, r2, #3
   2977c:	d110      	bne.n	297a0 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   2977e:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29780:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   29782:	b93a      	cbnz	r2, 29794 <queue_insert+0x100>
	list->head = node;
   29784:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   29788:	2104      	movs	r1, #4
   2978a:	f104 0014 	add.w	r0, r4, #20
   2978e:	f00b feab 	bl	354e8 <z_handle_obj_poll_events>
   29792:	e7b5      	b.n	29700 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29794:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29796:	f003 0303 	and.w	r3, r3, #3
   2979a:	4303      	orrs	r3, r0
   2979c:	6013      	str	r3, [r2, #0]
   2979e:	e7e4      	b.n	2976a <queue_insert+0xd6>
   297a0:	4313      	orrs	r3, r2
   297a2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   297a4:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   297a6:	f003 0303 	and.w	r3, r3, #3
   297aa:	4303      	orrs	r3, r0
   297ac:	6033      	str	r3, [r6, #0]
}
   297ae:	e7eb      	b.n	29788 <queue_insert+0xf4>
   297b0:	00037fec 	.word	0x00037fec
   297b4:	0003803e 	.word	0x0003803e
   297b8:	00037f2c 	.word	0x00037f2c
   297bc:	00038053 	.word	0x00038053
   297c0:	00038012 	.word	0x00038012
   297c4:	00038029 	.word	0x00038029

000297c8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   297c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   297cc:	4605      	mov	r5, r0
   297ce:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   297d0:	460c      	mov	r4, r1
   297d2:	2900      	cmp	r1, #0
   297d4:	d04a      	beq.n	2986c <k_queue_append_list+0xa4>
   297d6:	2a00      	cmp	r2, #0
   297d8:	d048      	beq.n	2986c <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   297da:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   297de:	f04f 0320 	mov.w	r3, #32
   297e2:	f3ef 8911 	mrs	r9, BASEPRI
   297e6:	f383 8811 	msr	BASEPRI, r3
   297ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   297ee:	4630      	mov	r0, r6
   297f0:	f7ff fbc0 	bl	28f74 <z_spin_lock_valid>
   297f4:	b968      	cbnz	r0, 29812 <k_queue_append_list+0x4a>
   297f6:	2381      	movs	r3, #129	; 0x81
   297f8:	4a1e      	ldr	r2, [pc, #120]	; (29874 <k_queue_append_list+0xac>)
   297fa:	491f      	ldr	r1, [pc, #124]	; (29878 <k_queue_append_list+0xb0>)
   297fc:	481f      	ldr	r0, [pc, #124]	; (2987c <k_queue_append_list+0xb4>)
   297fe:	f004 fac3 	bl	2dd88 <printk>
   29802:	4631      	mov	r1, r6
   29804:	481e      	ldr	r0, [pc, #120]	; (29880 <k_queue_append_list+0xb8>)
   29806:	f004 fabf 	bl	2dd88 <printk>
   2980a:	2181      	movs	r1, #129	; 0x81
   2980c:	4819      	ldr	r0, [pc, #100]	; (29874 <k_queue_append_list+0xac>)
   2980e:	f004 fda1 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29812:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   29814:	f105 080c 	add.w	r8, r5, #12
   29818:	f7ff fbc8 	bl	28fac <z_spin_lock_set_owner>
   2981c:	4640      	mov	r0, r8
   2981e:	f001 fdb3 	bl	2b388 <z_unpend_first_thread>
   29822:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   29826:	b920      	cbnz	r0, 29832 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   29828:	686b      	ldr	r3, [r5, #4]
   2982a:	b9cb      	cbnz	r3, 29860 <k_queue_append_list+0x98>
	list->head = node;
   2982c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2982e:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   29830:	e00a      	b.n	29848 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   29832:	6144      	str	r4, [r0, #20]
   29834:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   29838:	f001 fbc6 	bl	2afc8 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   2983c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2983e:	4640      	mov	r0, r8
   29840:	f001 fda2 	bl	2b388 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   29844:	2c00      	cmp	r4, #0
   29846:	d1ee      	bne.n	29826 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   29848:	2104      	movs	r1, #4
   2984a:	f105 0014 	add.w	r0, r5, #20
   2984e:	f00b fe4b 	bl	354e8 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   29852:	4630      	mov	r0, r6
   29854:	4649      	mov	r1, r9
   29856:	f000 ff3f 	bl	2a6d8 <z_reschedule>
	return 0;
   2985a:	2000      	movs	r0, #0
}
   2985c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29860:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29862:	f001 0103 	and.w	r1, r1, #3
   29866:	430c      	orrs	r4, r1
   29868:	601c      	str	r4, [r3, #0]
}
   2986a:	e7e0      	b.n	2982e <k_queue_append_list+0x66>
		return -EINVAL;
   2986c:	f06f 0015 	mvn.w	r0, #21
   29870:	e7f4      	b.n	2985c <k_queue_append_list+0x94>
   29872:	bf00      	nop
   29874:	00037fec 	.word	0x00037fec
   29878:	0003803e 	.word	0x0003803e
   2987c:	00037f2c 	.word	0x00037f2c
   29880:	00038053 	.word	0x00038053

00029884 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   29884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29888:	4606      	mov	r6, r0
   2988a:	4690      	mov	r8, r2
   2988c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2988e:	f100 0508 	add.w	r5, r0, #8
   29892:	f04f 0320 	mov.w	r3, #32
   29896:	f3ef 8711 	mrs	r7, BASEPRI
   2989a:	f383 8811 	msr	BASEPRI, r3
   2989e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   298a2:	4628      	mov	r0, r5
   298a4:	f7ff fb66 	bl	28f74 <z_spin_lock_valid>
   298a8:	b968      	cbnz	r0, 298c6 <z_impl_k_queue_get+0x42>
   298aa:	2381      	movs	r3, #129	; 0x81
   298ac:	4a25      	ldr	r2, [pc, #148]	; (29944 <z_impl_k_queue_get+0xc0>)
   298ae:	4926      	ldr	r1, [pc, #152]	; (29948 <z_impl_k_queue_get+0xc4>)
   298b0:	4826      	ldr	r0, [pc, #152]	; (2994c <z_impl_k_queue_get+0xc8>)
   298b2:	f004 fa69 	bl	2dd88 <printk>
   298b6:	4629      	mov	r1, r5
   298b8:	4825      	ldr	r0, [pc, #148]	; (29950 <z_impl_k_queue_get+0xcc>)
   298ba:	f004 fa65 	bl	2dd88 <printk>
   298be:	2181      	movs	r1, #129	; 0x81
   298c0:	4820      	ldr	r0, [pc, #128]	; (29944 <z_impl_k_queue_get+0xc0>)
   298c2:	f004 fd47 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   298c6:	4628      	mov	r0, r5
   298c8:	f7ff fb70 	bl	28fac <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   298cc:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   298ce:	b33c      	cbz	r4, 29920 <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   298d0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   298d2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   298d4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   298d8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   298da:	4620      	mov	r0, r4
   298dc:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   298e0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   298e2:	bf08      	it	eq
   298e4:	6073      	streq	r3, [r6, #4]
   298e6:	f00b fcaf 	bl	35248 <z_queue_node_peek>
   298ea:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   298ec:	4628      	mov	r0, r5
   298ee:	f7ff fb4f 	bl	28f90 <z_spin_unlock_valid>
   298f2:	b968      	cbnz	r0, 29910 <z_impl_k_queue_get+0x8c>
   298f4:	23ac      	movs	r3, #172	; 0xac
   298f6:	4a13      	ldr	r2, [pc, #76]	; (29944 <z_impl_k_queue_get+0xc0>)
   298f8:	4916      	ldr	r1, [pc, #88]	; (29954 <z_impl_k_queue_get+0xd0>)
   298fa:	4814      	ldr	r0, [pc, #80]	; (2994c <z_impl_k_queue_get+0xc8>)
   298fc:	f004 fa44 	bl	2dd88 <printk>
   29900:	4629      	mov	r1, r5
   29902:	4815      	ldr	r0, [pc, #84]	; (29958 <z_impl_k_queue_get+0xd4>)
   29904:	f004 fa40 	bl	2dd88 <printk>
   29908:	21ac      	movs	r1, #172	; 0xac
   2990a:	480e      	ldr	r0, [pc, #56]	; (29944 <z_impl_k_queue_get+0xc0>)
   2990c:	f004 fd22 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29910:	f387 8811 	msr	BASEPRI, r7
   29914:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   29918:	4620      	mov	r0, r4
   2991a:	b003      	add	sp, #12
   2991c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29920:	ea58 0309 	orrs.w	r3, r8, r9
   29924:	d0e2      	beq.n	298ec <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   29926:	4639      	mov	r1, r7
   29928:	4628      	mov	r0, r5
   2992a:	e9cd 8900 	strd	r8, r9, [sp]
   2992e:	f106 020c 	add.w	r2, r6, #12
   29932:	f001 f90f 	bl	2ab54 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   29936:	2800      	cmp	r0, #0
   29938:	d1ee      	bne.n	29918 <z_impl_k_queue_get+0x94>
   2993a:	4b08      	ldr	r3, [pc, #32]	; (2995c <z_impl_k_queue_get+0xd8>)
   2993c:	689b      	ldr	r3, [r3, #8]
   2993e:	695c      	ldr	r4, [r3, #20]
   29940:	e7ea      	b.n	29918 <z_impl_k_queue_get+0x94>
   29942:	bf00      	nop
   29944:	00037fec 	.word	0x00037fec
   29948:	0003803e 	.word	0x0003803e
   2994c:	00037f2c 	.word	0x00037f2c
   29950:	00038053 	.word	0x00038053
   29954:	00038012 	.word	0x00038012
   29958:	00038029 	.word	0x00038029
   2995c:	20016b74 	.word	0x20016b74

00029960 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   29960:	b538      	push	{r3, r4, r5, lr}
   29962:	4604      	mov	r4, r0
	__asm__ volatile(
   29964:	f04f 0320 	mov.w	r3, #32
   29968:	f3ef 8511 	mrs	r5, BASEPRI
   2996c:	f383 8811 	msr	BASEPRI, r3
   29970:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29974:	4817      	ldr	r0, [pc, #92]	; (299d4 <z_impl_k_sem_give+0x74>)
   29976:	f7ff fafd 	bl	28f74 <z_spin_lock_valid>
   2997a:	b968      	cbnz	r0, 29998 <z_impl_k_sem_give+0x38>
   2997c:	2381      	movs	r3, #129	; 0x81
   2997e:	4a16      	ldr	r2, [pc, #88]	; (299d8 <z_impl_k_sem_give+0x78>)
   29980:	4916      	ldr	r1, [pc, #88]	; (299dc <z_impl_k_sem_give+0x7c>)
   29982:	4817      	ldr	r0, [pc, #92]	; (299e0 <z_impl_k_sem_give+0x80>)
   29984:	f004 fa00 	bl	2dd88 <printk>
   29988:	4912      	ldr	r1, [pc, #72]	; (299d4 <z_impl_k_sem_give+0x74>)
   2998a:	4816      	ldr	r0, [pc, #88]	; (299e4 <z_impl_k_sem_give+0x84>)
   2998c:	f004 f9fc 	bl	2dd88 <printk>
   29990:	2181      	movs	r1, #129	; 0x81
   29992:	4811      	ldr	r0, [pc, #68]	; (299d8 <z_impl_k_sem_give+0x78>)
   29994:	f004 fcde 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29998:	480e      	ldr	r0, [pc, #56]	; (299d4 <z_impl_k_sem_give+0x74>)
   2999a:	f7ff fb07 	bl	28fac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2999e:	4620      	mov	r0, r4
   299a0:	f001 fcf2 	bl	2b388 <z_unpend_first_thread>

	if (thread != NULL) {
   299a4:	b148      	cbz	r0, 299ba <z_impl_k_sem_give+0x5a>
   299a6:	2200      	movs	r2, #0
   299a8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   299aa:	f001 fb0d 	bl	2afc8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   299ae:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   299b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   299b4:	4807      	ldr	r0, [pc, #28]	; (299d4 <z_impl_k_sem_give+0x74>)
   299b6:	f000 be8f 	b.w	2a6d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   299ba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   299be:	429a      	cmp	r2, r3
   299c0:	bf18      	it	ne
   299c2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   299c4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   299c6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   299c8:	f104 0010 	add.w	r0, r4, #16
   299cc:	f00b fd8c 	bl	354e8 <z_handle_obj_poll_events>
}
   299d0:	e7ed      	b.n	299ae <z_impl_k_sem_give+0x4e>
   299d2:	bf00      	nop
   299d4:	20016ba8 	.word	0x20016ba8
   299d8:	00037fec 	.word	0x00037fec
   299dc:	0003803e 	.word	0x0003803e
   299e0:	00037f2c 	.word	0x00037f2c
   299e4:	00038053 	.word	0x00038053

000299e8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   299e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   299ea:	4604      	mov	r4, r0
   299ec:	4616      	mov	r6, r2
   299ee:	461f      	mov	r7, r3
   299f0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   299f4:	b17b      	cbz	r3, 29a16 <z_impl_k_sem_take+0x2e>
   299f6:	ea56 0307 	orrs.w	r3, r6, r7
   299fa:	d00c      	beq.n	29a16 <z_impl_k_sem_take+0x2e>
   299fc:	4935      	ldr	r1, [pc, #212]	; (29ad4 <z_impl_k_sem_take+0xec>)
   299fe:	2379      	movs	r3, #121	; 0x79
   29a00:	4a35      	ldr	r2, [pc, #212]	; (29ad8 <z_impl_k_sem_take+0xf0>)
   29a02:	4836      	ldr	r0, [pc, #216]	; (29adc <z_impl_k_sem_take+0xf4>)
   29a04:	f004 f9c0 	bl	2dd88 <printk>
   29a08:	4835      	ldr	r0, [pc, #212]	; (29ae0 <z_impl_k_sem_take+0xf8>)
   29a0a:	f004 f9bd 	bl	2dd88 <printk>
   29a0e:	2179      	movs	r1, #121	; 0x79
   29a10:	4831      	ldr	r0, [pc, #196]	; (29ad8 <z_impl_k_sem_take+0xf0>)
   29a12:	f004 fc9f 	bl	2e354 <assert_post_action>
   29a16:	f04f 0320 	mov.w	r3, #32
   29a1a:	f3ef 8511 	mrs	r5, BASEPRI
   29a1e:	f383 8811 	msr	BASEPRI, r3
   29a22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29a26:	482f      	ldr	r0, [pc, #188]	; (29ae4 <z_impl_k_sem_take+0xfc>)
   29a28:	f7ff faa4 	bl	28f74 <z_spin_lock_valid>
   29a2c:	b968      	cbnz	r0, 29a4a <z_impl_k_sem_take+0x62>
   29a2e:	2381      	movs	r3, #129	; 0x81
   29a30:	4a2d      	ldr	r2, [pc, #180]	; (29ae8 <z_impl_k_sem_take+0x100>)
   29a32:	492e      	ldr	r1, [pc, #184]	; (29aec <z_impl_k_sem_take+0x104>)
   29a34:	4829      	ldr	r0, [pc, #164]	; (29adc <z_impl_k_sem_take+0xf4>)
   29a36:	f004 f9a7 	bl	2dd88 <printk>
   29a3a:	492a      	ldr	r1, [pc, #168]	; (29ae4 <z_impl_k_sem_take+0xfc>)
   29a3c:	482c      	ldr	r0, [pc, #176]	; (29af0 <z_impl_k_sem_take+0x108>)
   29a3e:	f004 f9a3 	bl	2dd88 <printk>
   29a42:	2181      	movs	r1, #129	; 0x81
   29a44:	4828      	ldr	r0, [pc, #160]	; (29ae8 <z_impl_k_sem_take+0x100>)
   29a46:	f004 fc85 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29a4a:	4826      	ldr	r0, [pc, #152]	; (29ae4 <z_impl_k_sem_take+0xfc>)
   29a4c:	f7ff faae 	bl	28fac <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   29a50:	68a3      	ldr	r3, [r4, #8]
   29a52:	b1d3      	cbz	r3, 29a8a <z_impl_k_sem_take+0xa2>
		sem->count--;
   29a54:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29a56:	4823      	ldr	r0, [pc, #140]	; (29ae4 <z_impl_k_sem_take+0xfc>)
   29a58:	60a3      	str	r3, [r4, #8]
   29a5a:	f7ff fa99 	bl	28f90 <z_spin_unlock_valid>
   29a5e:	b968      	cbnz	r0, 29a7c <z_impl_k_sem_take+0x94>
   29a60:	23ac      	movs	r3, #172	; 0xac
   29a62:	4a21      	ldr	r2, [pc, #132]	; (29ae8 <z_impl_k_sem_take+0x100>)
   29a64:	4923      	ldr	r1, [pc, #140]	; (29af4 <z_impl_k_sem_take+0x10c>)
   29a66:	481d      	ldr	r0, [pc, #116]	; (29adc <z_impl_k_sem_take+0xf4>)
   29a68:	f004 f98e 	bl	2dd88 <printk>
   29a6c:	491d      	ldr	r1, [pc, #116]	; (29ae4 <z_impl_k_sem_take+0xfc>)
   29a6e:	4822      	ldr	r0, [pc, #136]	; (29af8 <z_impl_k_sem_take+0x110>)
   29a70:	f004 f98a 	bl	2dd88 <printk>
   29a74:	21ac      	movs	r1, #172	; 0xac
   29a76:	481c      	ldr	r0, [pc, #112]	; (29ae8 <z_impl_k_sem_take+0x100>)
   29a78:	f004 fc6c 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29a7c:	f385 8811 	msr	BASEPRI, r5
   29a80:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   29a84:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   29a86:	b003      	add	sp, #12
   29a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29a8a:	ea56 0307 	orrs.w	r3, r6, r7
   29a8e:	d118      	bne.n	29ac2 <z_impl_k_sem_take+0xda>
   29a90:	4814      	ldr	r0, [pc, #80]	; (29ae4 <z_impl_k_sem_take+0xfc>)
   29a92:	f7ff fa7d 	bl	28f90 <z_spin_unlock_valid>
   29a96:	b968      	cbnz	r0, 29ab4 <z_impl_k_sem_take+0xcc>
   29a98:	23ac      	movs	r3, #172	; 0xac
   29a9a:	4a13      	ldr	r2, [pc, #76]	; (29ae8 <z_impl_k_sem_take+0x100>)
   29a9c:	4915      	ldr	r1, [pc, #84]	; (29af4 <z_impl_k_sem_take+0x10c>)
   29a9e:	480f      	ldr	r0, [pc, #60]	; (29adc <z_impl_k_sem_take+0xf4>)
   29aa0:	f004 f972 	bl	2dd88 <printk>
   29aa4:	490f      	ldr	r1, [pc, #60]	; (29ae4 <z_impl_k_sem_take+0xfc>)
   29aa6:	4814      	ldr	r0, [pc, #80]	; (29af8 <z_impl_k_sem_take+0x110>)
   29aa8:	f004 f96e 	bl	2dd88 <printk>
   29aac:	21ac      	movs	r1, #172	; 0xac
   29aae:	480e      	ldr	r0, [pc, #56]	; (29ae8 <z_impl_k_sem_take+0x100>)
   29ab0:	f004 fc50 	bl	2e354 <assert_post_action>
   29ab4:	f385 8811 	msr	BASEPRI, r5
   29ab8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   29abc:	f06f 000f 	mvn.w	r0, #15
   29ac0:	e7e1      	b.n	29a86 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   29ac2:	4622      	mov	r2, r4
   29ac4:	4629      	mov	r1, r5
   29ac6:	e9cd 6700 	strd	r6, r7, [sp]
   29aca:	4806      	ldr	r0, [pc, #24]	; (29ae4 <z_impl_k_sem_take+0xfc>)
   29acc:	f001 f842 	bl	2ab54 <z_pend_curr>
	return ret;
   29ad0:	e7d9      	b.n	29a86 <z_impl_k_sem_take+0x9e>
   29ad2:	bf00      	nop
   29ad4:	0003e364 	.word	0x0003e364
   29ad8:	0003e344 	.word	0x0003e344
   29adc:	00037f2c 	.word	0x00037f2c
   29ae0:	000385b8 	.word	0x000385b8
   29ae4:	20016ba8 	.word	0x20016ba8
   29ae8:	00037fec 	.word	0x00037fec
   29aec:	0003803e 	.word	0x0003803e
   29af0:	00038053 	.word	0x00038053
   29af4:	00038012 	.word	0x00038012
   29af8:	00038029 	.word	0x00038029

00029afc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   29afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   29afe:	2400      	movs	r4, #0
   29b00:	4b08      	ldr	r3, [pc, #32]	; (29b24 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   29b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	struct k_work_queue_config cfg = {
   29b06:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   29b08:	ab02      	add	r3, sp, #8
   29b0a:	9300      	str	r3, [sp, #0]
   29b0c:	4906      	ldr	r1, [pc, #24]	; (29b28 <k_sys_work_q_init+0x2c>)
   29b0e:	f04f 33ff 	mov.w	r3, #4294967295
   29b12:	4806      	ldr	r0, [pc, #24]	; (29b2c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   29b14:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   29b18:	f000 fa88 	bl	2a02c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   29b1c:	4620      	mov	r0, r4
   29b1e:	b004      	add	sp, #16
   29b20:	bd10      	pop	{r4, pc}
   29b22:	bf00      	nop
   29b24:	0003e3b1 	.word	0x0003e3b1
   29b28:	200246b8 	.word	0x200246b8
   29b2c:	20015df0 	.word	0x20015df0

00029b30 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   29b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b34:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29b36:	4e7e      	ldr	r6, [pc, #504]	; (29d30 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   29b38:	4f7e      	ldr	r7, [pc, #504]	; (29d34 <work_queue_main+0x204>)
{
   29b3a:	b085      	sub	sp, #20
	__asm__ volatile(
   29b3c:	f04f 0320 	mov.w	r3, #32
   29b40:	f3ef 8811 	mrs	r8, BASEPRI
   29b44:	f383 8811 	msr	BASEPRI, r3
   29b48:	f3bf 8f6f 	isb	sy
   29b4c:	4630      	mov	r0, r6
   29b4e:	f7ff fa11 	bl	28f74 <z_spin_lock_valid>
   29b52:	b968      	cbnz	r0, 29b70 <work_queue_main+0x40>
   29b54:	2381      	movs	r3, #129	; 0x81
   29b56:	4a78      	ldr	r2, [pc, #480]	; (29d38 <work_queue_main+0x208>)
   29b58:	4978      	ldr	r1, [pc, #480]	; (29d3c <work_queue_main+0x20c>)
   29b5a:	4879      	ldr	r0, [pc, #484]	; (29d40 <work_queue_main+0x210>)
   29b5c:	f004 f914 	bl	2dd88 <printk>
   29b60:	4631      	mov	r1, r6
   29b62:	4878      	ldr	r0, [pc, #480]	; (29d44 <work_queue_main+0x214>)
   29b64:	f004 f910 	bl	2dd88 <printk>
   29b68:	2181      	movs	r1, #129	; 0x81
   29b6a:	4873      	ldr	r0, [pc, #460]	; (29d38 <work_queue_main+0x208>)
   29b6c:	f004 fbf2 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29b70:	4630      	mov	r0, r6
   29b72:	f7ff fa1b 	bl	28fac <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   29b76:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   29b7a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   29b7e:	b9ad      	cbnz	r5, 29bac <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   29b80:	f023 0204 	bic.w	r2, r3, #4
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   29b84:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   29b86:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   29b8a:	f100 8092 	bmi.w	29cb2 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   29b8e:	2300      	movs	r3, #0
   29b90:	f04f 32ff 	mov.w	r2, #4294967295
   29b94:	9302      	str	r3, [sp, #8]
   29b96:	f04f 33ff 	mov.w	r3, #4294967295
   29b9a:	4641      	mov	r1, r8
   29b9c:	e9cd 2300 	strd	r2, r3, [sp]
   29ba0:	4630      	mov	r0, r6
   29ba2:	f104 0288 	add.w	r2, r4, #136	; 0x88
   29ba6:	f001 fef5 	bl	2b994 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   29baa:	e7c7      	b.n	29b3c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29bac:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   29bb0:	682a      	ldr	r2, [r5, #0]
   29bb2:	428d      	cmp	r5, r1
	list->head = node;
   29bb4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29bb8:	d101      	bne.n	29bbe <work_queue_main+0x8e>
	list->tail = node;
   29bba:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   29bbe:	f043 0302 	orr.w	r3, r3, #2
   29bc2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   29bc6:	68eb      	ldr	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29bc8:	4630      	mov	r0, r6
   29bca:	f023 0304 	bic.w	r3, r3, #4
   29bce:	f043 0301 	orr.w	r3, r3, #1
   29bd2:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   29bd4:	f8d5 9004 	ldr.w	r9, [r5, #4]
   29bd8:	f7ff f9da 	bl	28f90 <z_spin_unlock_valid>
   29bdc:	b968      	cbnz	r0, 29bfa <work_queue_main+0xca>
   29bde:	23ac      	movs	r3, #172	; 0xac
   29be0:	4a55      	ldr	r2, [pc, #340]	; (29d38 <work_queue_main+0x208>)
   29be2:	4959      	ldr	r1, [pc, #356]	; (29d48 <work_queue_main+0x218>)
   29be4:	4856      	ldr	r0, [pc, #344]	; (29d40 <work_queue_main+0x210>)
   29be6:	f004 f8cf 	bl	2dd88 <printk>
   29bea:	4631      	mov	r1, r6
   29bec:	4857      	ldr	r0, [pc, #348]	; (29d4c <work_queue_main+0x21c>)
   29bee:	f004 f8cb 	bl	2dd88 <printk>
   29bf2:	21ac      	movs	r1, #172	; 0xac
   29bf4:	4850      	ldr	r0, [pc, #320]	; (29d38 <work_queue_main+0x208>)
   29bf6:	f004 fbad 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29bfa:	f388 8811 	msr	BASEPRI, r8
   29bfe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   29c02:	f1b9 0f00 	cmp.w	r9, #0
   29c06:	d10b      	bne.n	29c20 <work_queue_main+0xf0>
   29c08:	4951      	ldr	r1, [pc, #324]	; (29d50 <work_queue_main+0x220>)
   29c0a:	484d      	ldr	r0, [pc, #308]	; (29d40 <work_queue_main+0x210>)
   29c0c:	f240 237d 	movw	r3, #637	; 0x27d
   29c10:	4a50      	ldr	r2, [pc, #320]	; (29d54 <work_queue_main+0x224>)
   29c12:	f004 f8b9 	bl	2dd88 <printk>
   29c16:	f240 217d 	movw	r1, #637	; 0x27d
   29c1a:	484e      	ldr	r0, [pc, #312]	; (29d54 <work_queue_main+0x224>)
   29c1c:	f004 fb9a 	bl	2e354 <assert_post_action>
			handler(work);
   29c20:	4628      	mov	r0, r5
   29c22:	47c8      	blx	r9
	__asm__ volatile(
   29c24:	f04f 0320 	mov.w	r3, #32
   29c28:	f3ef 8a11 	mrs	sl, BASEPRI
   29c2c:	f383 8811 	msr	BASEPRI, r3
   29c30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29c34:	4630      	mov	r0, r6
   29c36:	f7ff f99d 	bl	28f74 <z_spin_lock_valid>
   29c3a:	b968      	cbnz	r0, 29c58 <work_queue_main+0x128>
   29c3c:	2381      	movs	r3, #129	; 0x81
   29c3e:	4a3e      	ldr	r2, [pc, #248]	; (29d38 <work_queue_main+0x208>)
   29c40:	493e      	ldr	r1, [pc, #248]	; (29d3c <work_queue_main+0x20c>)
   29c42:	483f      	ldr	r0, [pc, #252]	; (29d40 <work_queue_main+0x210>)
   29c44:	f004 f8a0 	bl	2dd88 <printk>
   29c48:	4631      	mov	r1, r6
   29c4a:	483e      	ldr	r0, [pc, #248]	; (29d44 <work_queue_main+0x214>)
   29c4c:	f004 f89c 	bl	2dd88 <printk>
   29c50:	2181      	movs	r1, #129	; 0x81
   29c52:	4839      	ldr	r0, [pc, #228]	; (29d38 <work_queue_main+0x208>)
   29c54:	f004 fb7e 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29c58:	4630      	mov	r0, r6
   29c5a:	f7ff f9a7 	bl	28fac <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   29c5e:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29c60:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   29c62:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29c66:	d42e      	bmi.n	29cc6 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   29c68:	60ea      	str	r2, [r5, #12]
   29c6a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29c6e:	4630      	mov	r0, r6
   29c70:	f023 0302 	bic.w	r3, r3, #2
   29c74:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   29c78:	f3c3 2500 	ubfx	r5, r3, #8, #1
   29c7c:	f7ff f988 	bl	28f90 <z_spin_unlock_valid>
   29c80:	b968      	cbnz	r0, 29c9e <work_queue_main+0x16e>
   29c82:	23ac      	movs	r3, #172	; 0xac
   29c84:	4a2c      	ldr	r2, [pc, #176]	; (29d38 <work_queue_main+0x208>)
   29c86:	4930      	ldr	r1, [pc, #192]	; (29d48 <work_queue_main+0x218>)
   29c88:	482d      	ldr	r0, [pc, #180]	; (29d40 <work_queue_main+0x210>)
   29c8a:	f004 f87d 	bl	2dd88 <printk>
   29c8e:	4631      	mov	r1, r6
   29c90:	482e      	ldr	r0, [pc, #184]	; (29d4c <work_queue_main+0x21c>)
   29c92:	f004 f879 	bl	2dd88 <printk>
   29c96:	21ac      	movs	r1, #172	; 0xac
   29c98:	4827      	ldr	r0, [pc, #156]	; (29d38 <work_queue_main+0x208>)
   29c9a:	f004 fb5b 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29c9e:	f38a 8811 	msr	BASEPRI, sl
   29ca2:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   29ca6:	2d00      	cmp	r5, #0
   29ca8:	f47f af48 	bne.w	29b3c <work_queue_main+0xc>
	z_impl_k_yield();
   29cac:	f001 fbc8 	bl	2b440 <z_impl_k_yield>
}
   29cb0:	e744      	b.n	29b3c <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   29cb2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   29cb6:	2200      	movs	r2, #0
   29cb8:	2101      	movs	r1, #1
   29cba:	4628      	mov	r0, r5
   29cbc:	f001 fe12 	bl	2b8e4 <z_sched_wake>
   29cc0:	2800      	cmp	r0, #0
   29cc2:	d1f8      	bne.n	29cb6 <work_queue_main+0x186>
   29cc4:	e763      	b.n	29b8e <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   29cc6:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   29cc8:	f023 0303 	bic.w	r3, r3, #3
   29ccc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   29cce:	2800      	cmp	r0, #0
   29cd0:	d0cb      	beq.n	29c6a <work_queue_main+0x13a>
	return node->next;
   29cd2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29cd4:	f04f 0900 	mov.w	r9, #0
   29cd8:	2b00      	cmp	r3, #0
   29cda:	bf38      	it	cc
   29cdc:	2300      	movcc	r3, #0
	parent->next = child;
   29cde:	46cb      	mov	fp, r9
   29ce0:	4698      	mov	r8, r3
		if (wc->work == work) {
   29ce2:	6843      	ldr	r3, [r0, #4]
   29ce4:	4602      	mov	r2, r0
   29ce6:	429d      	cmp	r5, r3
   29ce8:	d10d      	bne.n	29d06 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   29cea:	6802      	ldr	r2, [r0, #0]
   29cec:	f1b9 0f00 	cmp.w	r9, #0
   29cf0:	d115      	bne.n	29d1e <work_queue_main+0x1ee>
   29cf2:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   29cf4:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   29cf6:	4283      	cmp	r3, r0
   29cf8:	d100      	bne.n	29cfc <work_queue_main+0x1cc>
	list->tail = node;
   29cfa:	607a      	str	r2, [r7, #4]
	parent->next = child;
   29cfc:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   29d00:	f7ff fe2e 	bl	29960 <z_impl_k_sem_give>
}
   29d04:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   29d06:	f1b8 0f00 	cmp.w	r8, #0
   29d0a:	d0ae      	beq.n	29c6a <work_queue_main+0x13a>
	return node->next;
   29d0c:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29d10:	4640      	mov	r0, r8
   29d12:	2b00      	cmp	r3, #0
   29d14:	bf38      	it	cc
   29d16:	2300      	movcc	r3, #0
   29d18:	4691      	mov	r9, r2
   29d1a:	4698      	mov	r8, r3
   29d1c:	e7e1      	b.n	29ce2 <work_queue_main+0x1b2>
	parent->next = child;
   29d1e:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   29d22:	687b      	ldr	r3, [r7, #4]
   29d24:	4283      	cmp	r3, r0
	list->tail = node;
   29d26:	bf08      	it	eq
   29d28:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   29d2c:	e7e6      	b.n	29cfc <work_queue_main+0x1cc>
   29d2e:	bf00      	nop
   29d30:	20016bac 	.word	0x20016bac
   29d34:	20016bb0 	.word	0x20016bb0
   29d38:	00037fec 	.word	0x00037fec
   29d3c:	0003803e 	.word	0x0003803e
   29d40:	00037f2c 	.word	0x00037f2c
   29d44:	00038053 	.word	0x00038053
   29d48:	00038012 	.word	0x00038012
   29d4c:	00038029 	.word	0x00038029
   29d50:	0003e3db 	.word	0x0003e3db
   29d54:	0003e3ba 	.word	0x0003e3ba

00029d58 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   29d58:	68c3      	ldr	r3, [r0, #12]
{
   29d5a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   29d5c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   29d60:	079b      	lsls	r3, r3, #30
{
   29d62:	4605      	mov	r5, r0
   29d64:	460c      	mov	r4, r1
	if (ret) {
   29d66:	d50d      	bpl.n	29d84 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   29d68:	2201      	movs	r2, #1
   29d6a:	2100      	movs	r1, #0
   29d6c:	f104 0008 	add.w	r0, r4, #8
   29d70:	f00b fa98 	bl	352a4 <z_impl_k_sem_init>
	parent->next = child;
   29d74:	2300      	movs	r3, #0
   29d76:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   29d78:	4b05      	ldr	r3, [pc, #20]	; (29d90 <cancel_sync_locked+0x38>)
	canceler->work = work;
   29d7a:	6065      	str	r5, [r4, #4]
   29d7c:	685a      	ldr	r2, [r3, #4]
   29d7e:	b91a      	cbnz	r2, 29d88 <cancel_sync_locked+0x30>
	list->head = node;
   29d80:	e9c3 4400 	strd	r4, r4, [r3]
}
   29d84:	4630      	mov	r0, r6
   29d86:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   29d88:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29d8a:	605c      	str	r4, [r3, #4]
}
   29d8c:	e7fa      	b.n	29d84 <cancel_sync_locked+0x2c>
   29d8e:	bf00      	nop
   29d90:	20016bb0 	.word	0x20016bb0

00029d94 <submit_to_queue_locked>:
{
   29d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29d96:	68c3      	ldr	r3, [r0, #12]
{
   29d98:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29d9a:	079a      	lsls	r2, r3, #30
{
   29d9c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29d9e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   29da2:	d42b      	bmi.n	29dfc <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   29da4:	075f      	lsls	r7, r3, #29
   29da6:	d42b      	bmi.n	29e00 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   29da8:	680a      	ldr	r2, [r1, #0]
   29daa:	b90a      	cbnz	r2, 29db0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   29dac:	6882      	ldr	r2, [r0, #8]
   29dae:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   29db0:	07d8      	lsls	r0, r3, #31
   29db2:	d528      	bpl.n	29e06 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   29db4:	68a3      	ldr	r3, [r4, #8]
   29db6:	b95b      	cbnz	r3, 29dd0 <submit_to_queue_locked+0x3c>
   29db8:	4924      	ldr	r1, [pc, #144]	; (29e4c <submit_to_queue_locked+0xb8>)
   29dba:	4825      	ldr	r0, [pc, #148]	; (29e50 <submit_to_queue_locked+0xbc>)
   29dbc:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   29dc0:	4a24      	ldr	r2, [pc, #144]	; (29e54 <submit_to_queue_locked+0xc0>)
   29dc2:	f003 ffe1 	bl	2dd88 <printk>
   29dc6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   29dca:	4822      	ldr	r0, [pc, #136]	; (29e54 <submit_to_queue_locked+0xc0>)
   29dcc:	f004 fac2 	bl	2e354 <assert_post_action>
			ret = 2;
   29dd0:	2502      	movs	r5, #2
			*queuep = work->queue;
   29dd2:	68a3      	ldr	r3, [r4, #8]
   29dd4:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   29dd6:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   29dd8:	b38f      	cbz	r7, 29e3e <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   29dda:	4b1f      	ldr	r3, [pc, #124]	; (29e58 <submit_to_queue_locked+0xc4>)
   29ddc:	689b      	ldr	r3, [r3, #8]
   29dde:	42bb      	cmp	r3, r7
   29de0:	d113      	bne.n	29e0a <submit_to_queue_locked+0x76>
   29de2:	f00b fa16 	bl	35212 <k_is_in_isr>
   29de6:	f080 0001 	eor.w	r0, r0, #1
   29dea:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   29dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29df0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   29df2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29df6:	d525      	bpl.n	29e44 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   29df8:	b14a      	cbz	r2, 29e0e <submit_to_queue_locked+0x7a>
   29dfa:	b950      	cbnz	r0, 29e12 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   29dfc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   29e00:	2300      	movs	r3, #0
   29e02:	6033      	str	r3, [r6, #0]
	return ret;
   29e04:	e015      	b.n	29e32 <submit_to_queue_locked+0x9e>
		ret = 1;
   29e06:	2501      	movs	r5, #1
   29e08:	e7e5      	b.n	29dd6 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   29e0a:	2000      	movs	r0, #0
   29e0c:	e7ee      	b.n	29dec <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   29e0e:	071b      	lsls	r3, r3, #28
   29e10:	d4f4      	bmi.n	29dfc <submit_to_queue_locked+0x68>
	parent->next = child;
   29e12:	2300      	movs	r3, #0
   29e14:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   29e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   29e1a:	b963      	cbnz	r3, 29e36 <submit_to_queue_locked+0xa2>
	list->head = node;
   29e1c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   29e20:	4638      	mov	r0, r7
   29e22:	f00b fa4f 	bl	352c4 <notify_queue_locked>
	*flagp |= BIT(bit);
   29e26:	68e3      	ldr	r3, [r4, #12]
   29e28:	f043 0304 	orr.w	r3, r3, #4
   29e2c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   29e2e:	6833      	ldr	r3, [r6, #0]
   29e30:	60a3      	str	r3, [r4, #8]
}
   29e32:	4628      	mov	r0, r5
   29e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   29e36:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29e38:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   29e3c:	e7f0      	b.n	29e20 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   29e3e:	f06f 0515 	mvn.w	r5, #21
   29e42:	e7dd      	b.n	29e00 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   29e44:	f06f 0512 	mvn.w	r5, #18
   29e48:	e7da      	b.n	29e00 <submit_to_queue_locked+0x6c>
   29e4a:	bf00      	nop
   29e4c:	0003e3f2 	.word	0x0003e3f2
   29e50:	00037f2c 	.word	0x00037f2c
   29e54:	0003e3ba 	.word	0x0003e3ba
   29e58:	20016b74 	.word	0x20016b74

00029e5c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   29e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29e5e:	4604      	mov	r4, r0
	__asm__ volatile(
   29e60:	f04f 0320 	mov.w	r3, #32
   29e64:	f3ef 8511 	mrs	r5, BASEPRI
   29e68:	f383 8811 	msr	BASEPRI, r3
   29e6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29e70:	481e      	ldr	r0, [pc, #120]	; (29eec <work_timeout+0x90>)
   29e72:	f7ff f87f 	bl	28f74 <z_spin_lock_valid>
   29e76:	b968      	cbnz	r0, 29e94 <work_timeout+0x38>
   29e78:	2381      	movs	r3, #129	; 0x81
   29e7a:	4a1d      	ldr	r2, [pc, #116]	; (29ef0 <work_timeout+0x94>)
   29e7c:	491d      	ldr	r1, [pc, #116]	; (29ef4 <work_timeout+0x98>)
   29e7e:	481e      	ldr	r0, [pc, #120]	; (29ef8 <work_timeout+0x9c>)
   29e80:	f003 ff82 	bl	2dd88 <printk>
   29e84:	4919      	ldr	r1, [pc, #100]	; (29eec <work_timeout+0x90>)
   29e86:	481d      	ldr	r0, [pc, #116]	; (29efc <work_timeout+0xa0>)
   29e88:	f003 ff7e 	bl	2dd88 <printk>
   29e8c:	2181      	movs	r1, #129	; 0x81
   29e8e:	4818      	ldr	r0, [pc, #96]	; (29ef0 <work_timeout+0x94>)
   29e90:	f004 fa60 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29e94:	4815      	ldr	r0, [pc, #84]	; (29eec <work_timeout+0x90>)
   29e96:	f7ff f889 	bl	28fac <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   29e9a:	2300      	movs	r3, #0
   29e9c:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   29e9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   29ea2:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29ea6:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   29ea8:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29eac:	d506      	bpl.n	29ebc <work_timeout+0x60>
		queue = dw->queue;
   29eae:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   29eb0:	a901      	add	r1, sp, #4
   29eb2:	f1a4 0010 	sub.w	r0, r4, #16
		queue = dw->queue;
   29eb6:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   29eb8:	f7ff ff6c 	bl	29d94 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29ebc:	480b      	ldr	r0, [pc, #44]	; (29eec <work_timeout+0x90>)
   29ebe:	f7ff f867 	bl	28f90 <z_spin_unlock_valid>
   29ec2:	b968      	cbnz	r0, 29ee0 <work_timeout+0x84>
   29ec4:	23ac      	movs	r3, #172	; 0xac
   29ec6:	4a0a      	ldr	r2, [pc, #40]	; (29ef0 <work_timeout+0x94>)
   29ec8:	490d      	ldr	r1, [pc, #52]	; (29f00 <work_timeout+0xa4>)
   29eca:	480b      	ldr	r0, [pc, #44]	; (29ef8 <work_timeout+0x9c>)
   29ecc:	f003 ff5c 	bl	2dd88 <printk>
   29ed0:	4906      	ldr	r1, [pc, #24]	; (29eec <work_timeout+0x90>)
   29ed2:	480c      	ldr	r0, [pc, #48]	; (29f04 <work_timeout+0xa8>)
   29ed4:	f003 ff58 	bl	2dd88 <printk>
   29ed8:	21ac      	movs	r1, #172	; 0xac
   29eda:	4805      	ldr	r0, [pc, #20]	; (29ef0 <work_timeout+0x94>)
   29edc:	f004 fa3a 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29ee0:	f385 8811 	msr	BASEPRI, r5
   29ee4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   29ee8:	b003      	add	sp, #12
   29eea:	bd30      	pop	{r4, r5, pc}
   29eec:	20016bac 	.word	0x20016bac
   29ef0:	00037fec 	.word	0x00037fec
   29ef4:	0003803e 	.word	0x0003803e
   29ef8:	00037f2c 	.word	0x00037f2c
   29efc:	00038053 	.word	0x00038053
   29f00:	00038012 	.word	0x00038012
   29f04:	00038029 	.word	0x00038029

00029f08 <k_work_init>:
{
   29f08:	b538      	push	{r3, r4, r5, lr}
   29f0a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   29f0c:	4604      	mov	r4, r0
   29f0e:	b948      	cbnz	r0, 29f24 <k_work_init+0x1c>
   29f10:	490d      	ldr	r1, [pc, #52]	; (29f48 <k_work_init+0x40>)
   29f12:	480e      	ldr	r0, [pc, #56]	; (29f4c <k_work_init+0x44>)
   29f14:	2389      	movs	r3, #137	; 0x89
   29f16:	4a0e      	ldr	r2, [pc, #56]	; (29f50 <k_work_init+0x48>)
   29f18:	f003 ff36 	bl	2dd88 <printk>
   29f1c:	2189      	movs	r1, #137	; 0x89
   29f1e:	480c      	ldr	r0, [pc, #48]	; (29f50 <k_work_init+0x48>)
   29f20:	f004 fa18 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   29f24:	b94d      	cbnz	r5, 29f3a <k_work_init+0x32>
   29f26:	490b      	ldr	r1, [pc, #44]	; (29f54 <k_work_init+0x4c>)
   29f28:	4808      	ldr	r0, [pc, #32]	; (29f4c <k_work_init+0x44>)
   29f2a:	238a      	movs	r3, #138	; 0x8a
   29f2c:	4a08      	ldr	r2, [pc, #32]	; (29f50 <k_work_init+0x48>)
   29f2e:	f003 ff2b 	bl	2dd88 <printk>
   29f32:	218a      	movs	r1, #138	; 0x8a
   29f34:	4806      	ldr	r0, [pc, #24]	; (29f50 <k_work_init+0x48>)
   29f36:	f004 fa0d 	bl	2e354 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   29f3a:	2210      	movs	r2, #16
   29f3c:	2100      	movs	r1, #0
   29f3e:	4620      	mov	r0, r4
   29f40:	f00b fb41 	bl	355c6 <memset>
   29f44:	6065      	str	r5, [r4, #4]
}
   29f46:	bd38      	pop	{r3, r4, r5, pc}
   29f48:	0003e491 	.word	0x0003e491
   29f4c:	00037f2c 	.word	0x00037f2c
   29f50:	0003e3ba 	.word	0x0003e3ba
   29f54:	0003e3db 	.word	0x0003e3db

00029f58 <k_work_submit_to_queue>:
{
   29f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   29f5a:	460c      	mov	r4, r1
{
   29f5c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   29f5e:	b959      	cbnz	r1, 29f78 <k_work_submit_to_queue+0x20>
   29f60:	4926      	ldr	r1, [pc, #152]	; (29ffc <k_work_submit_to_queue+0xa4>)
   29f62:	4827      	ldr	r0, [pc, #156]	; (2a000 <k_work_submit_to_queue+0xa8>)
   29f64:	f240 1369 	movw	r3, #361	; 0x169
   29f68:	4a26      	ldr	r2, [pc, #152]	; (2a004 <k_work_submit_to_queue+0xac>)
   29f6a:	f003 ff0d 	bl	2dd88 <printk>
   29f6e:	f240 1169 	movw	r1, #361	; 0x169
   29f72:	4824      	ldr	r0, [pc, #144]	; (2a004 <k_work_submit_to_queue+0xac>)
   29f74:	f004 f9ee 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29f78:	f04f 0320 	mov.w	r3, #32
   29f7c:	f3ef 8511 	mrs	r5, BASEPRI
   29f80:	f383 8811 	msr	BASEPRI, r3
   29f84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29f88:	481f      	ldr	r0, [pc, #124]	; (2a008 <k_work_submit_to_queue+0xb0>)
   29f8a:	f7fe fff3 	bl	28f74 <z_spin_lock_valid>
   29f8e:	b968      	cbnz	r0, 29fac <k_work_submit_to_queue+0x54>
   29f90:	2381      	movs	r3, #129	; 0x81
   29f92:	4a1e      	ldr	r2, [pc, #120]	; (2a00c <k_work_submit_to_queue+0xb4>)
   29f94:	491e      	ldr	r1, [pc, #120]	; (2a010 <k_work_submit_to_queue+0xb8>)
   29f96:	481a      	ldr	r0, [pc, #104]	; (2a000 <k_work_submit_to_queue+0xa8>)
   29f98:	f003 fef6 	bl	2dd88 <printk>
   29f9c:	491a      	ldr	r1, [pc, #104]	; (2a008 <k_work_submit_to_queue+0xb0>)
   29f9e:	481d      	ldr	r0, [pc, #116]	; (2a014 <k_work_submit_to_queue+0xbc>)
   29fa0:	f003 fef2 	bl	2dd88 <printk>
   29fa4:	2181      	movs	r1, #129	; 0x81
   29fa6:	4819      	ldr	r0, [pc, #100]	; (2a00c <k_work_submit_to_queue+0xb4>)
   29fa8:	f004 f9d4 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   29fac:	4816      	ldr	r0, [pc, #88]	; (2a008 <k_work_submit_to_queue+0xb0>)
   29fae:	f7fe fffd 	bl	28fac <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   29fb2:	4620      	mov	r0, r4
   29fb4:	a901      	add	r1, sp, #4
   29fb6:	f7ff feed 	bl	29d94 <submit_to_queue_locked>
   29fba:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29fbc:	4812      	ldr	r0, [pc, #72]	; (2a008 <k_work_submit_to_queue+0xb0>)
   29fbe:	f7fe ffe7 	bl	28f90 <z_spin_unlock_valid>
   29fc2:	b968      	cbnz	r0, 29fe0 <k_work_submit_to_queue+0x88>
   29fc4:	23ac      	movs	r3, #172	; 0xac
   29fc6:	4a11      	ldr	r2, [pc, #68]	; (2a00c <k_work_submit_to_queue+0xb4>)
   29fc8:	4913      	ldr	r1, [pc, #76]	; (2a018 <k_work_submit_to_queue+0xc0>)
   29fca:	480d      	ldr	r0, [pc, #52]	; (2a000 <k_work_submit_to_queue+0xa8>)
   29fcc:	f003 fedc 	bl	2dd88 <printk>
   29fd0:	490d      	ldr	r1, [pc, #52]	; (2a008 <k_work_submit_to_queue+0xb0>)
   29fd2:	4812      	ldr	r0, [pc, #72]	; (2a01c <k_work_submit_to_queue+0xc4>)
   29fd4:	f003 fed8 	bl	2dd88 <printk>
   29fd8:	21ac      	movs	r1, #172	; 0xac
   29fda:	480c      	ldr	r0, [pc, #48]	; (2a00c <k_work_submit_to_queue+0xb4>)
   29fdc:	f004 f9ba 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   29fe0:	f385 8811 	msr	BASEPRI, r5
   29fe4:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   29fe8:	2c00      	cmp	r4, #0
   29fea:	dd04      	ble.n	29ff6 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   29fec:	f001 fbb6 	bl	2b75c <z_impl_k_is_preempt_thread>
   29ff0:	b108      	cbz	r0, 29ff6 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   29ff2:	f001 fa25 	bl	2b440 <z_impl_k_yield>
}
   29ff6:	4620      	mov	r0, r4
   29ff8:	b003      	add	sp, #12
   29ffa:	bd30      	pop	{r4, r5, pc}
   29ffc:	0003e491 	.word	0x0003e491
   2a000:	00037f2c 	.word	0x00037f2c
   2a004:	0003e3ba 	.word	0x0003e3ba
   2a008:	20016bac 	.word	0x20016bac
   2a00c:	00037fec 	.word	0x00037fec
   2a010:	0003803e 	.word	0x0003803e
   2a014:	00038053 	.word	0x00038053
   2a018:	00038012 	.word	0x00038012
   2a01c:	00038029 	.word	0x00038029

0002a020 <k_work_submit>:
{
   2a020:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2a022:	4801      	ldr	r0, [pc, #4]	; (2a028 <k_work_submit+0x8>)
   2a024:	f7ff bf98 	b.w	29f58 <k_work_submit_to_queue>
   2a028:	20015df0 	.word	0x20015df0

0002a02c <k_work_queue_start>:
{
   2a02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a030:	b088      	sub	sp, #32
   2a032:	460e      	mov	r6, r1
   2a034:	4617      	mov	r7, r2
   2a036:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   2a038:	4604      	mov	r4, r0
{
   2a03a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   2a03c:	b958      	cbnz	r0, 2a056 <k_work_queue_start+0x2a>
   2a03e:	492e      	ldr	r1, [pc, #184]	; (2a0f8 <k_work_queue_start+0xcc>)
   2a040:	482e      	ldr	r0, [pc, #184]	; (2a0fc <k_work_queue_start+0xd0>)
   2a042:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   2a046:	4a2e      	ldr	r2, [pc, #184]	; (2a100 <k_work_queue_start+0xd4>)
   2a048:	f003 fe9e 	bl	2dd88 <printk>
   2a04c:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   2a050:	482b      	ldr	r0, [pc, #172]	; (2a100 <k_work_queue_start+0xd4>)
   2a052:	f004 f97f 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   2a056:	b95e      	cbnz	r6, 2a070 <k_work_queue_start+0x44>
   2a058:	492a      	ldr	r1, [pc, #168]	; (2a104 <k_work_queue_start+0xd8>)
   2a05a:	4828      	ldr	r0, [pc, #160]	; (2a0fc <k_work_queue_start+0xd0>)
   2a05c:	f240 23a1 	movw	r3, #673	; 0x2a1
   2a060:	4a27      	ldr	r2, [pc, #156]	; (2a100 <k_work_queue_start+0xd4>)
   2a062:	f003 fe91 	bl	2dd88 <printk>
   2a066:	f240 21a1 	movw	r1, #673	; 0x2a1
   2a06a:	4825      	ldr	r0, [pc, #148]	; (2a100 <k_work_queue_start+0xd4>)
   2a06c:	f004 f972 	bl	2e354 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   2a070:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   2a074:	07db      	lsls	r3, r3, #31
   2a076:	d50b      	bpl.n	2a090 <k_work_queue_start+0x64>
   2a078:	4923      	ldr	r1, [pc, #140]	; (2a108 <k_work_queue_start+0xdc>)
   2a07a:	4820      	ldr	r0, [pc, #128]	; (2a0fc <k_work_queue_start+0xd0>)
   2a07c:	f240 23a2 	movw	r3, #674	; 0x2a2
   2a080:	4a1f      	ldr	r2, [pc, #124]	; (2a100 <k_work_queue_start+0xd4>)
   2a082:	f003 fe81 	bl	2dd88 <printk>
   2a086:	f240 21a2 	movw	r1, #674	; 0x2a2
   2a08a:	481d      	ldr	r0, [pc, #116]	; (2a100 <k_work_queue_start+0xd4>)
   2a08c:	f004 f962 	bl	2e354 <assert_post_action>
	list->head = NULL;
   2a090:	2300      	movs	r3, #0
	list->tail = NULL;
   2a092:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   2a096:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2a09a:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   2a09e:	f104 0390 	add.w	r3, r4, #144	; 0x90
   2a0a2:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   2a0a6:	b32d      	cbz	r5, 2a0f4 <k_work_queue_start+0xc8>
   2a0a8:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2a0aa:	f240 1101 	movw	r1, #257	; 0x101
   2a0ae:	2b00      	cmp	r3, #0
   2a0b0:	bf08      	it	eq
   2a0b2:	2101      	moveq	r1, #1
	*flagp = flags;
   2a0b4:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2a0b8:	f04f 32ff 	mov.w	r2, #4294967295
   2a0bc:	f04f 33ff 	mov.w	r3, #4294967295
   2a0c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a0c4:	2200      	movs	r2, #0
   2a0c6:	4631      	mov	r1, r6
   2a0c8:	e9cd 8203 	strd	r8, r2, [sp, #12]
   2a0cc:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2a0d0:	4620      	mov	r0, r4
   2a0d2:	463a      	mov	r2, r7
   2a0d4:	4b0d      	ldr	r3, [pc, #52]	; (2a10c <k_work_queue_start+0xe0>)
   2a0d6:	9400      	str	r4, [sp, #0]
   2a0d8:	f7fe fe6e 	bl	28db8 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2a0dc:	b125      	cbz	r5, 2a0e8 <k_work_queue_start+0xbc>
   2a0de:	6829      	ldr	r1, [r5, #0]
   2a0e0:	b111      	cbz	r1, 2a0e8 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   2a0e2:	4620      	mov	r0, r4
   2a0e4:	f00b f89b 	bl	3521e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2a0e8:	4620      	mov	r0, r4
}
   2a0ea:	b008      	add	sp, #32
   2a0ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a0f0:	f00b b89a 	b.w	35228 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2a0f4:	2101      	movs	r1, #1
   2a0f6:	e7dd      	b.n	2a0b4 <k_work_queue_start+0x88>
   2a0f8:	0003e450 	.word	0x0003e450
   2a0fc:	00037f2c 	.word	0x00037f2c
   2a100:	0003e3ba 	.word	0x0003e3ba
   2a104:	0003e456 	.word	0x0003e456
   2a108:	0003e45c 	.word	0x0003e45c
   2a10c:	00029b31 	.word	0x00029b31

0002a110 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   2a110:	b538      	push	{r3, r4, r5, lr}
   2a112:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2a114:	4604      	mov	r4, r0
   2a116:	b958      	cbnz	r0, 2a130 <k_work_init_delayable+0x20>
   2a118:	4911      	ldr	r1, [pc, #68]	; (2a160 <k_work_init_delayable+0x50>)
   2a11a:	4812      	ldr	r0, [pc, #72]	; (2a164 <k_work_init_delayable+0x54>)
   2a11c:	f44f 7346 	mov.w	r3, #792	; 0x318
   2a120:	4a11      	ldr	r2, [pc, #68]	; (2a168 <k_work_init_delayable+0x58>)
   2a122:	f003 fe31 	bl	2dd88 <printk>
   2a126:	f44f 7146 	mov.w	r1, #792	; 0x318
   2a12a:	480f      	ldr	r0, [pc, #60]	; (2a168 <k_work_init_delayable+0x58>)
   2a12c:	f004 f912 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   2a130:	b95d      	cbnz	r5, 2a14a <k_work_init_delayable+0x3a>
   2a132:	490e      	ldr	r1, [pc, #56]	; (2a16c <k_work_init_delayable+0x5c>)
   2a134:	480b      	ldr	r0, [pc, #44]	; (2a164 <k_work_init_delayable+0x54>)
   2a136:	f240 3319 	movw	r3, #793	; 0x319
   2a13a:	4a0b      	ldr	r2, [pc, #44]	; (2a168 <k_work_init_delayable+0x58>)
   2a13c:	f003 fe24 	bl	2dd88 <printk>
   2a140:	f240 3119 	movw	r1, #793	; 0x319
   2a144:	4808      	ldr	r0, [pc, #32]	; (2a168 <k_work_init_delayable+0x58>)
   2a146:	f004 f905 	bl	2e354 <assert_post_action>

	*dwork = (struct k_work_delayable){
   2a14a:	2230      	movs	r2, #48	; 0x30
   2a14c:	2100      	movs	r1, #0
   2a14e:	4620      	mov	r0, r4
   2a150:	f00b fa39 	bl	355c6 <memset>
   2a154:	f44f 7380 	mov.w	r3, #256	; 0x100
   2a158:	6065      	str	r5, [r4, #4]
   2a15a:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   2a15c:	bd38      	pop	{r3, r4, r5, pc}
   2a15e:	bf00      	nop
   2a160:	0003e490 	.word	0x0003e490
   2a164:	00037f2c 	.word	0x00037f2c
   2a168:	0003e3ba 	.word	0x0003e3ba
   2a16c:	0003e3db 	.word	0x0003e3db

0002a170 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2a170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a172:	4616      	mov	r6, r2
   2a174:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2a176:	460c      	mov	r4, r1
{
   2a178:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2a17a:	b959      	cbnz	r1, 2a194 <k_work_schedule_for_queue+0x24>
   2a17c:	492e      	ldr	r1, [pc, #184]	; (2a238 <k_work_schedule_for_queue+0xc8>)
   2a17e:	482f      	ldr	r0, [pc, #188]	; (2a23c <k_work_schedule_for_queue+0xcc>)
   2a180:	f240 338f 	movw	r3, #911	; 0x38f
   2a184:	4a2e      	ldr	r2, [pc, #184]	; (2a240 <k_work_schedule_for_queue+0xd0>)
   2a186:	f003 fdff 	bl	2dd88 <printk>
   2a18a:	f240 318f 	movw	r1, #911	; 0x38f
   2a18e:	482c      	ldr	r0, [pc, #176]	; (2a240 <k_work_schedule_for_queue+0xd0>)
   2a190:	f004 f8e0 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a194:	f04f 0320 	mov.w	r3, #32
   2a198:	f3ef 8511 	mrs	r5, BASEPRI
   2a19c:	f383 8811 	msr	BASEPRI, r3
   2a1a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1a4:	4827      	ldr	r0, [pc, #156]	; (2a244 <k_work_schedule_for_queue+0xd4>)
   2a1a6:	f7fe fee5 	bl	28f74 <z_spin_lock_valid>
   2a1aa:	b968      	cbnz	r0, 2a1c8 <k_work_schedule_for_queue+0x58>
   2a1ac:	2381      	movs	r3, #129	; 0x81
   2a1ae:	4a26      	ldr	r2, [pc, #152]	; (2a248 <k_work_schedule_for_queue+0xd8>)
   2a1b0:	4926      	ldr	r1, [pc, #152]	; (2a24c <k_work_schedule_for_queue+0xdc>)
   2a1b2:	4822      	ldr	r0, [pc, #136]	; (2a23c <k_work_schedule_for_queue+0xcc>)
   2a1b4:	f003 fde8 	bl	2dd88 <printk>
   2a1b8:	4922      	ldr	r1, [pc, #136]	; (2a244 <k_work_schedule_for_queue+0xd4>)
   2a1ba:	4825      	ldr	r0, [pc, #148]	; (2a250 <k_work_schedule_for_queue+0xe0>)
   2a1bc:	f003 fde4 	bl	2dd88 <printk>
   2a1c0:	2181      	movs	r1, #129	; 0x81
   2a1c2:	4821      	ldr	r0, [pc, #132]	; (2a248 <k_work_schedule_for_queue+0xd8>)
   2a1c4:	f004 f8c6 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a1c8:	481e      	ldr	r0, [pc, #120]	; (2a244 <k_work_schedule_for_queue+0xd4>)
   2a1ca:	f7fe feef 	bl	28fac <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2a1ce:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2a1d0:	f013 0f0e 	tst.w	r3, #14
   2a1d4:	d12e      	bne.n	2a234 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a1d6:	ea56 0207 	orrs.w	r2, r6, r7
   2a1da:	d11d      	bne.n	2a218 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   2a1dc:	4620      	mov	r0, r4
   2a1de:	a901      	add	r1, sp, #4
   2a1e0:	f7ff fdd8 	bl	29d94 <submit_to_queue_locked>
   2a1e4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a1e6:	4817      	ldr	r0, [pc, #92]	; (2a244 <k_work_schedule_for_queue+0xd4>)
   2a1e8:	f7fe fed2 	bl	28f90 <z_spin_unlock_valid>
   2a1ec:	b968      	cbnz	r0, 2a20a <k_work_schedule_for_queue+0x9a>
   2a1ee:	23ac      	movs	r3, #172	; 0xac
   2a1f0:	4a15      	ldr	r2, [pc, #84]	; (2a248 <k_work_schedule_for_queue+0xd8>)
   2a1f2:	4918      	ldr	r1, [pc, #96]	; (2a254 <k_work_schedule_for_queue+0xe4>)
   2a1f4:	4811      	ldr	r0, [pc, #68]	; (2a23c <k_work_schedule_for_queue+0xcc>)
   2a1f6:	f003 fdc7 	bl	2dd88 <printk>
   2a1fa:	4912      	ldr	r1, [pc, #72]	; (2a244 <k_work_schedule_for_queue+0xd4>)
   2a1fc:	4816      	ldr	r0, [pc, #88]	; (2a258 <k_work_schedule_for_queue+0xe8>)
   2a1fe:	f003 fdc3 	bl	2dd88 <printk>
   2a202:	21ac      	movs	r1, #172	; 0xac
   2a204:	4810      	ldr	r0, [pc, #64]	; (2a248 <k_work_schedule_for_queue+0xd8>)
   2a206:	f004 f8a5 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a20a:	f385 8811 	msr	BASEPRI, r5
   2a20e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2a212:	4620      	mov	r0, r4
   2a214:	b003      	add	sp, #12
   2a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2a218:	f043 0308 	orr.w	r3, r3, #8
   2a21c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2a21e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2a220:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   2a224:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2a226:	4632      	mov	r2, r6
   2a228:	463b      	mov	r3, r7
   2a22a:	490c      	ldr	r1, [pc, #48]	; (2a25c <k_work_schedule_for_queue+0xec>)
   2a22c:	f001 fc2e 	bl	2ba8c <z_add_timeout>
	return ret;
   2a230:	2401      	movs	r4, #1
   2a232:	e7d8      	b.n	2a1e6 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   2a234:	2400      	movs	r4, #0
   2a236:	e7d6      	b.n	2a1e6 <k_work_schedule_for_queue+0x76>
   2a238:	0003e490 	.word	0x0003e490
   2a23c:	00037f2c 	.word	0x00037f2c
   2a240:	0003e3ba 	.word	0x0003e3ba
   2a244:	20016bac 	.word	0x20016bac
   2a248:	00037fec 	.word	0x00037fec
   2a24c:	0003803e 	.word	0x0003803e
   2a250:	00038053 	.word	0x00038053
   2a254:	00038012 	.word	0x00038012
   2a258:	00038029 	.word	0x00038029
   2a25c:	00029e5d 	.word	0x00029e5d

0002a260 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2a260:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2a262:	4801      	ldr	r0, [pc, #4]	; (2a268 <k_work_schedule+0x8>)
   2a264:	f7ff bf84 	b.w	2a170 <k_work_schedule_for_queue>
   2a268:	20015df0 	.word	0x20015df0

0002a26c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   2a26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a26e:	4616      	mov	r6, r2
   2a270:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2a272:	460c      	mov	r4, r1
{
   2a274:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2a276:	b959      	cbnz	r1, 2a290 <k_work_reschedule_for_queue+0x24>
   2a278:	492d      	ldr	r1, [pc, #180]	; (2a330 <k_work_reschedule_for_queue+0xc4>)
   2a27a:	482e      	ldr	r0, [pc, #184]	; (2a334 <k_work_reschedule_for_queue+0xc8>)
   2a27c:	f240 33b3 	movw	r3, #947	; 0x3b3
   2a280:	4a2d      	ldr	r2, [pc, #180]	; (2a338 <k_work_reschedule_for_queue+0xcc>)
   2a282:	f003 fd81 	bl	2dd88 <printk>
   2a286:	f240 31b3 	movw	r1, #947	; 0x3b3
   2a28a:	482b      	ldr	r0, [pc, #172]	; (2a338 <k_work_reschedule_for_queue+0xcc>)
   2a28c:	f004 f862 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a290:	f04f 0320 	mov.w	r3, #32
   2a294:	f3ef 8511 	mrs	r5, BASEPRI
   2a298:	f383 8811 	msr	BASEPRI, r3
   2a29c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a2a0:	4826      	ldr	r0, [pc, #152]	; (2a33c <k_work_reschedule_for_queue+0xd0>)
   2a2a2:	f7fe fe67 	bl	28f74 <z_spin_lock_valid>
   2a2a6:	b968      	cbnz	r0, 2a2c4 <k_work_reschedule_for_queue+0x58>
   2a2a8:	2381      	movs	r3, #129	; 0x81
   2a2aa:	4a25      	ldr	r2, [pc, #148]	; (2a340 <k_work_reschedule_for_queue+0xd4>)
   2a2ac:	4925      	ldr	r1, [pc, #148]	; (2a344 <k_work_reschedule_for_queue+0xd8>)
   2a2ae:	4821      	ldr	r0, [pc, #132]	; (2a334 <k_work_reschedule_for_queue+0xc8>)
   2a2b0:	f003 fd6a 	bl	2dd88 <printk>
   2a2b4:	4921      	ldr	r1, [pc, #132]	; (2a33c <k_work_reschedule_for_queue+0xd0>)
   2a2b6:	4824      	ldr	r0, [pc, #144]	; (2a348 <k_work_reschedule_for_queue+0xdc>)
   2a2b8:	f003 fd66 	bl	2dd88 <printk>
   2a2bc:	2181      	movs	r1, #129	; 0x81
   2a2be:	4820      	ldr	r0, [pc, #128]	; (2a340 <k_work_reschedule_for_queue+0xd4>)
   2a2c0:	f004 f848 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a2c4:	481d      	ldr	r0, [pc, #116]	; (2a33c <k_work_reschedule_for_queue+0xd0>)
   2a2c6:	f7fe fe71 	bl	28fac <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2a2ca:	4620      	mov	r0, r4
   2a2cc:	f00b f801 	bl	352d2 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a2d0:	ea56 0307 	orrs.w	r3, r6, r7
   2a2d4:	d11d      	bne.n	2a312 <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   2a2d6:	4620      	mov	r0, r4
   2a2d8:	a901      	add	r1, sp, #4
   2a2da:	f7ff fd5b 	bl	29d94 <submit_to_queue_locked>
   2a2de:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a2e0:	4816      	ldr	r0, [pc, #88]	; (2a33c <k_work_reschedule_for_queue+0xd0>)
   2a2e2:	f7fe fe55 	bl	28f90 <z_spin_unlock_valid>
   2a2e6:	b968      	cbnz	r0, 2a304 <k_work_reschedule_for_queue+0x98>
   2a2e8:	23ac      	movs	r3, #172	; 0xac
   2a2ea:	4a15      	ldr	r2, [pc, #84]	; (2a340 <k_work_reschedule_for_queue+0xd4>)
   2a2ec:	4917      	ldr	r1, [pc, #92]	; (2a34c <k_work_reschedule_for_queue+0xe0>)
   2a2ee:	4811      	ldr	r0, [pc, #68]	; (2a334 <k_work_reschedule_for_queue+0xc8>)
   2a2f0:	f003 fd4a 	bl	2dd88 <printk>
   2a2f4:	4911      	ldr	r1, [pc, #68]	; (2a33c <k_work_reschedule_for_queue+0xd0>)
   2a2f6:	4816      	ldr	r0, [pc, #88]	; (2a350 <k_work_reschedule_for_queue+0xe4>)
   2a2f8:	f003 fd46 	bl	2dd88 <printk>
   2a2fc:	21ac      	movs	r1, #172	; 0xac
   2a2fe:	4810      	ldr	r0, [pc, #64]	; (2a340 <k_work_reschedule_for_queue+0xd4>)
   2a300:	f004 f828 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a304:	f385 8811 	msr	BASEPRI, r5
   2a308:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2a30c:	4620      	mov	r0, r4
   2a30e:	b003      	add	sp, #12
   2a310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2a312:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2a314:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   2a318:	f043 0308 	orr.w	r3, r3, #8
   2a31c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2a31e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2a320:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   2a322:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2a324:	490b      	ldr	r1, [pc, #44]	; (2a354 <k_work_reschedule_for_queue+0xe8>)
   2a326:	463b      	mov	r3, r7
   2a328:	f001 fbb0 	bl	2ba8c <z_add_timeout>
	return ret;
   2a32c:	2401      	movs	r4, #1
   2a32e:	e7d7      	b.n	2a2e0 <k_work_reschedule_for_queue+0x74>
   2a330:	0003e490 	.word	0x0003e490
   2a334:	00037f2c 	.word	0x00037f2c
   2a338:	0003e3ba 	.word	0x0003e3ba
   2a33c:	20016bac 	.word	0x20016bac
   2a340:	00037fec 	.word	0x00037fec
   2a344:	0003803e 	.word	0x0003803e
   2a348:	00038053 	.word	0x00038053
   2a34c:	00038012 	.word	0x00038012
   2a350:	00038029 	.word	0x00038029
   2a354:	00029e5d 	.word	0x00029e5d

0002a358 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2a358:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2a35a:	4801      	ldr	r0, [pc, #4]	; (2a360 <k_work_reschedule+0x8>)
   2a35c:	f7ff bf86 	b.w	2a26c <k_work_reschedule_for_queue>
   2a360:	20015df0 	.word	0x20015df0

0002a364 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2a364:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2a366:	4604      	mov	r4, r0
   2a368:	b958      	cbnz	r0, 2a382 <k_work_cancel_delayable+0x1e>
   2a36a:	4924      	ldr	r1, [pc, #144]	; (2a3fc <k_work_cancel_delayable+0x98>)
   2a36c:	4824      	ldr	r0, [pc, #144]	; (2a400 <k_work_cancel_delayable+0x9c>)
   2a36e:	f240 33d5 	movw	r3, #981	; 0x3d5
   2a372:	4a24      	ldr	r2, [pc, #144]	; (2a404 <k_work_cancel_delayable+0xa0>)
   2a374:	f003 fd08 	bl	2dd88 <printk>
   2a378:	f240 31d5 	movw	r1, #981	; 0x3d5
   2a37c:	4821      	ldr	r0, [pc, #132]	; (2a404 <k_work_cancel_delayable+0xa0>)
   2a37e:	f003 ffe9 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a382:	f04f 0320 	mov.w	r3, #32
   2a386:	f3ef 8511 	mrs	r5, BASEPRI
   2a38a:	f383 8811 	msr	BASEPRI, r3
   2a38e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a392:	481d      	ldr	r0, [pc, #116]	; (2a408 <k_work_cancel_delayable+0xa4>)
   2a394:	f7fe fdee 	bl	28f74 <z_spin_lock_valid>
   2a398:	b968      	cbnz	r0, 2a3b6 <k_work_cancel_delayable+0x52>
   2a39a:	2381      	movs	r3, #129	; 0x81
   2a39c:	4a1b      	ldr	r2, [pc, #108]	; (2a40c <k_work_cancel_delayable+0xa8>)
   2a39e:	491c      	ldr	r1, [pc, #112]	; (2a410 <k_work_cancel_delayable+0xac>)
   2a3a0:	4817      	ldr	r0, [pc, #92]	; (2a400 <k_work_cancel_delayable+0x9c>)
   2a3a2:	f003 fcf1 	bl	2dd88 <printk>
   2a3a6:	4918      	ldr	r1, [pc, #96]	; (2a408 <k_work_cancel_delayable+0xa4>)
   2a3a8:	481a      	ldr	r0, [pc, #104]	; (2a414 <k_work_cancel_delayable+0xb0>)
   2a3aa:	f003 fced 	bl	2dd88 <printk>
   2a3ae:	2181      	movs	r1, #129	; 0x81
   2a3b0:	4816      	ldr	r0, [pc, #88]	; (2a40c <k_work_cancel_delayable+0xa8>)
   2a3b2:	f003 ffcf 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a3b6:	4814      	ldr	r0, [pc, #80]	; (2a408 <k_work_cancel_delayable+0xa4>)
   2a3b8:	f7fe fdf8 	bl	28fac <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2a3bc:	4620      	mov	r0, r4
   2a3be:	f00a ff88 	bl	352d2 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a3c2:	4620      	mov	r0, r4
   2a3c4:	f00a ff93 	bl	352ee <cancel_async_locked>
   2a3c8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a3ca:	480f      	ldr	r0, [pc, #60]	; (2a408 <k_work_cancel_delayable+0xa4>)
   2a3cc:	f7fe fde0 	bl	28f90 <z_spin_unlock_valid>
   2a3d0:	b968      	cbnz	r0, 2a3ee <k_work_cancel_delayable+0x8a>
   2a3d2:	23ac      	movs	r3, #172	; 0xac
   2a3d4:	4a0d      	ldr	r2, [pc, #52]	; (2a40c <k_work_cancel_delayable+0xa8>)
   2a3d6:	4910      	ldr	r1, [pc, #64]	; (2a418 <k_work_cancel_delayable+0xb4>)
   2a3d8:	4809      	ldr	r0, [pc, #36]	; (2a400 <k_work_cancel_delayable+0x9c>)
   2a3da:	f003 fcd5 	bl	2dd88 <printk>
   2a3de:	490a      	ldr	r1, [pc, #40]	; (2a408 <k_work_cancel_delayable+0xa4>)
   2a3e0:	480e      	ldr	r0, [pc, #56]	; (2a41c <k_work_cancel_delayable+0xb8>)
   2a3e2:	f003 fcd1 	bl	2dd88 <printk>
   2a3e6:	21ac      	movs	r1, #172	; 0xac
   2a3e8:	4808      	ldr	r0, [pc, #32]	; (2a40c <k_work_cancel_delayable+0xa8>)
   2a3ea:	f003 ffb3 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a3ee:	f385 8811 	msr	BASEPRI, r5
   2a3f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2a3f6:	4620      	mov	r0, r4
   2a3f8:	bd38      	pop	{r3, r4, r5, pc}
   2a3fa:	bf00      	nop
   2a3fc:	0003e490 	.word	0x0003e490
   2a400:	00037f2c 	.word	0x00037f2c
   2a404:	0003e3ba 	.word	0x0003e3ba
   2a408:	20016bac 	.word	0x20016bac
   2a40c:	00037fec 	.word	0x00037fec
   2a410:	0003803e 	.word	0x0003803e
   2a414:	00038053 	.word	0x00038053
   2a418:	00038012 	.word	0x00038012
   2a41c:	00038029 	.word	0x00038029

0002a420 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2a420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a424:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2a426:	4605      	mov	r5, r0
   2a428:	b958      	cbnz	r0, 2a442 <k_work_cancel_delayable_sync+0x22>
   2a42a:	493e      	ldr	r1, [pc, #248]	; (2a524 <k_work_cancel_delayable_sync+0x104>)
   2a42c:	483e      	ldr	r0, [pc, #248]	; (2a528 <k_work_cancel_delayable_sync+0x108>)
   2a42e:	f240 33e6 	movw	r3, #998	; 0x3e6
   2a432:	4a3e      	ldr	r2, [pc, #248]	; (2a52c <k_work_cancel_delayable_sync+0x10c>)
   2a434:	f003 fca8 	bl	2dd88 <printk>
   2a438:	f240 31e6 	movw	r1, #998	; 0x3e6
   2a43c:	483b      	ldr	r0, [pc, #236]	; (2a52c <k_work_cancel_delayable_sync+0x10c>)
   2a43e:	f003 ff89 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   2a442:	b95e      	cbnz	r6, 2a45c <k_work_cancel_delayable_sync+0x3c>
   2a444:	493a      	ldr	r1, [pc, #232]	; (2a530 <k_work_cancel_delayable_sync+0x110>)
   2a446:	4838      	ldr	r0, [pc, #224]	; (2a528 <k_work_cancel_delayable_sync+0x108>)
   2a448:	f240 33e7 	movw	r3, #999	; 0x3e7
   2a44c:	4a37      	ldr	r2, [pc, #220]	; (2a52c <k_work_cancel_delayable_sync+0x10c>)
   2a44e:	f003 fc9b 	bl	2dd88 <printk>
   2a452:	f240 31e7 	movw	r1, #999	; 0x3e7
   2a456:	4835      	ldr	r0, [pc, #212]	; (2a52c <k_work_cancel_delayable_sync+0x10c>)
   2a458:	f003 ff7c 	bl	2e354 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   2a45c:	f00a fed9 	bl	35212 <k_is_in_isr>
   2a460:	b158      	cbz	r0, 2a47a <k_work_cancel_delayable_sync+0x5a>
   2a462:	4934      	ldr	r1, [pc, #208]	; (2a534 <k_work_cancel_delayable_sync+0x114>)
   2a464:	4830      	ldr	r0, [pc, #192]	; (2a528 <k_work_cancel_delayable_sync+0x108>)
   2a466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2a46a:	4a30      	ldr	r2, [pc, #192]	; (2a52c <k_work_cancel_delayable_sync+0x10c>)
   2a46c:	f003 fc8c 	bl	2dd88 <printk>
   2a470:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2a474:	482d      	ldr	r0, [pc, #180]	; (2a52c <k_work_cancel_delayable_sync+0x10c>)
   2a476:	f003 ff6d 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a47a:	f04f 0320 	mov.w	r3, #32
   2a47e:	f3ef 8811 	mrs	r8, BASEPRI
   2a482:	f383 8811 	msr	BASEPRI, r3
   2a486:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a48a:	482b      	ldr	r0, [pc, #172]	; (2a538 <k_work_cancel_delayable_sync+0x118>)
   2a48c:	f7fe fd72 	bl	28f74 <z_spin_lock_valid>
   2a490:	b968      	cbnz	r0, 2a4ae <k_work_cancel_delayable_sync+0x8e>
   2a492:	2381      	movs	r3, #129	; 0x81
   2a494:	4a29      	ldr	r2, [pc, #164]	; (2a53c <k_work_cancel_delayable_sync+0x11c>)
   2a496:	492a      	ldr	r1, [pc, #168]	; (2a540 <k_work_cancel_delayable_sync+0x120>)
   2a498:	4823      	ldr	r0, [pc, #140]	; (2a528 <k_work_cancel_delayable_sync+0x108>)
   2a49a:	f003 fc75 	bl	2dd88 <printk>
   2a49e:	4926      	ldr	r1, [pc, #152]	; (2a538 <k_work_cancel_delayable_sync+0x118>)
   2a4a0:	4828      	ldr	r0, [pc, #160]	; (2a544 <k_work_cancel_delayable_sync+0x124>)
   2a4a2:	f003 fc71 	bl	2dd88 <printk>
   2a4a6:	2181      	movs	r1, #129	; 0x81
   2a4a8:	4824      	ldr	r0, [pc, #144]	; (2a53c <k_work_cancel_delayable_sync+0x11c>)
   2a4aa:	f003 ff53 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a4ae:	4822      	ldr	r0, [pc, #136]	; (2a538 <k_work_cancel_delayable_sync+0x118>)
   2a4b0:	f7fe fd7c 	bl	28fac <z_spin_lock_set_owner>
   2a4b4:	f105 030c 	add.w	r3, r5, #12
   2a4b8:	e8d3 4faf 	lda	r4, [r3]
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2a4bc:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2a4c0:	2c00      	cmp	r4, #0
   2a4c2:	bf14      	ite	ne
   2a4c4:	2701      	movne	r7, #1
   2a4c6:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2a4c8:	d00a      	beq.n	2a4e0 <k_work_cancel_delayable_sync+0xc0>
	(void)unschedule_locked(dwork);
   2a4ca:	4628      	mov	r0, r5
   2a4cc:	f00a ff01 	bl	352d2 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a4d0:	4628      	mov	r0, r5
   2a4d2:	f00a ff0c 	bl	352ee <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2a4d6:	4631      	mov	r1, r6
   2a4d8:	4628      	mov	r0, r5
   2a4da:	f7ff fc3d 	bl	29d58 <cancel_sync_locked>
   2a4de:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a4e0:	4815      	ldr	r0, [pc, #84]	; (2a538 <k_work_cancel_delayable_sync+0x118>)
   2a4e2:	f7fe fd55 	bl	28f90 <z_spin_unlock_valid>
   2a4e6:	b968      	cbnz	r0, 2a504 <k_work_cancel_delayable_sync+0xe4>
   2a4e8:	23ac      	movs	r3, #172	; 0xac
   2a4ea:	4a14      	ldr	r2, [pc, #80]	; (2a53c <k_work_cancel_delayable_sync+0x11c>)
   2a4ec:	4916      	ldr	r1, [pc, #88]	; (2a548 <k_work_cancel_delayable_sync+0x128>)
   2a4ee:	480e      	ldr	r0, [pc, #56]	; (2a528 <k_work_cancel_delayable_sync+0x108>)
   2a4f0:	f003 fc4a 	bl	2dd88 <printk>
   2a4f4:	4910      	ldr	r1, [pc, #64]	; (2a538 <k_work_cancel_delayable_sync+0x118>)
   2a4f6:	4815      	ldr	r0, [pc, #84]	; (2a54c <k_work_cancel_delayable_sync+0x12c>)
   2a4f8:	f003 fc46 	bl	2dd88 <printk>
   2a4fc:	21ac      	movs	r1, #172	; 0xac
   2a4fe:	480f      	ldr	r0, [pc, #60]	; (2a53c <k_work_cancel_delayable_sync+0x11c>)
   2a500:	f003 ff28 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a504:	f388 8811 	msr	BASEPRI, r8
   2a508:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2a50c:	b13c      	cbz	r4, 2a51e <k_work_cancel_delayable_sync+0xfe>
	return z_impl_k_sem_take(sem, timeout);
   2a50e:	f04f 32ff 	mov.w	r2, #4294967295
   2a512:	f04f 33ff 	mov.w	r3, #4294967295
   2a516:	f106 0008 	add.w	r0, r6, #8
   2a51a:	f7ff fa65 	bl	299e8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2a51e:	4638      	mov	r0, r7
   2a520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a524:	0003e490 	.word	0x0003e490
   2a528:	00037f2c 	.word	0x00037f2c
   2a52c:	0003e3ba 	.word	0x0003e3ba
   2a530:	0003e43c 	.word	0x0003e43c
   2a534:	00039dc0 	.word	0x00039dc0
   2a538:	20016bac 	.word	0x20016bac
   2a53c:	00037fec 	.word	0x00037fec
   2a540:	0003803e 	.word	0x0003803e
   2a544:	00038053 	.word	0x00038053
   2a548:	00038012 	.word	0x00038012
   2a54c:	00038029 	.word	0x00038029

0002a550 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   2a550:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2a552:	4c08      	ldr	r4, [pc, #32]	; (2a574 <z_reset_time_slice+0x24>)
   2a554:	6823      	ldr	r3, [r4, #0]
   2a556:	b15b      	cbz	r3, 2a570 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2a558:	f7ec f8bc 	bl	166d4 <sys_clock_elapsed>
   2a55c:	4603      	mov	r3, r0
   2a55e:	6820      	ldr	r0, [r4, #0]
   2a560:	4a05      	ldr	r2, [pc, #20]	; (2a578 <z_reset_time_slice+0x28>)
   2a562:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   2a564:	2100      	movs	r1, #0
	}
}
   2a566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2a56a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2a56c:	f001 bbf8 	b.w	2bd60 <z_set_timeout_expiry>
}
   2a570:	bd10      	pop	{r4, pc}
   2a572:	bf00      	nop
   2a574:	20016bc4 	.word	0x20016bc4
   2a578:	20016b74 	.word	0x20016b74

0002a57c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a57e:	4604      	mov	r4, r0
   2a580:	460d      	mov	r5, r1
	__asm__ volatile(
   2a582:	f04f 0320 	mov.w	r3, #32
   2a586:	f3ef 8611 	mrs	r6, BASEPRI
   2a58a:	f383 8811 	msr	BASEPRI, r3
   2a58e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a592:	4823      	ldr	r0, [pc, #140]	; (2a620 <k_sched_time_slice_set+0xa4>)
   2a594:	f7fe fcee 	bl	28f74 <z_spin_lock_valid>
   2a598:	b968      	cbnz	r0, 2a5b6 <k_sched_time_slice_set+0x3a>
   2a59a:	2381      	movs	r3, #129	; 0x81
   2a59c:	4a21      	ldr	r2, [pc, #132]	; (2a624 <k_sched_time_slice_set+0xa8>)
   2a59e:	4922      	ldr	r1, [pc, #136]	; (2a628 <k_sched_time_slice_set+0xac>)
   2a5a0:	4822      	ldr	r0, [pc, #136]	; (2a62c <k_sched_time_slice_set+0xb0>)
   2a5a2:	f003 fbf1 	bl	2dd88 <printk>
   2a5a6:	491e      	ldr	r1, [pc, #120]	; (2a620 <k_sched_time_slice_set+0xa4>)
   2a5a8:	4821      	ldr	r0, [pc, #132]	; (2a630 <k_sched_time_slice_set+0xb4>)
   2a5aa:	f003 fbed 	bl	2dd88 <printk>
   2a5ae:	2181      	movs	r1, #129	; 0x81
   2a5b0:	481c      	ldr	r0, [pc, #112]	; (2a624 <k_sched_time_slice_set+0xa8>)
   2a5b2:	f003 fecf 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a5b6:	481a      	ldr	r0, [pc, #104]	; (2a620 <k_sched_time_slice_set+0xa4>)
   2a5b8:	f7fe fcf8 	bl	28fac <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2a5bc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2a5c0:	2200      	movs	r2, #0
   2a5c2:	f240 30e7 	movw	r0, #999	; 0x3e7
   2a5c6:	2100      	movs	r1, #0
   2a5c8:	4b1a      	ldr	r3, [pc, #104]	; (2a634 <k_sched_time_slice_set+0xb8>)
   2a5ca:	fbe7 0104 	umlal	r0, r1, r7, r4
   2a5ce:	611a      	str	r2, [r3, #16]
   2a5d0:	2300      	movs	r3, #0
   2a5d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a5d6:	f7e6 fe0b 	bl	111f0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2a5da:	2c00      	cmp	r4, #0
   2a5dc:	4b16      	ldr	r3, [pc, #88]	; (2a638 <k_sched_time_slice_set+0xbc>)
   2a5de:	dc1b      	bgt.n	2a618 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   2a5e0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2a5e2:	4b16      	ldr	r3, [pc, #88]	; (2a63c <k_sched_time_slice_set+0xc0>)
   2a5e4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2a5e6:	f7ff ffb3 	bl	2a550 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a5ea:	480d      	ldr	r0, [pc, #52]	; (2a620 <k_sched_time_slice_set+0xa4>)
   2a5ec:	f7fe fcd0 	bl	28f90 <z_spin_unlock_valid>
   2a5f0:	b968      	cbnz	r0, 2a60e <k_sched_time_slice_set+0x92>
   2a5f2:	23ac      	movs	r3, #172	; 0xac
   2a5f4:	4a0b      	ldr	r2, [pc, #44]	; (2a624 <k_sched_time_slice_set+0xa8>)
   2a5f6:	4912      	ldr	r1, [pc, #72]	; (2a640 <k_sched_time_slice_set+0xc4>)
   2a5f8:	480c      	ldr	r0, [pc, #48]	; (2a62c <k_sched_time_slice_set+0xb0>)
   2a5fa:	f003 fbc5 	bl	2dd88 <printk>
   2a5fe:	4908      	ldr	r1, [pc, #32]	; (2a620 <k_sched_time_slice_set+0xa4>)
   2a600:	4810      	ldr	r0, [pc, #64]	; (2a644 <k_sched_time_slice_set+0xc8>)
   2a602:	f003 fbc1 	bl	2dd88 <printk>
   2a606:	21ac      	movs	r1, #172	; 0xac
   2a608:	4806      	ldr	r0, [pc, #24]	; (2a624 <k_sched_time_slice_set+0xa8>)
   2a60a:	f003 fea3 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a60e:	f386 8811 	msr	BASEPRI, r6
   2a612:	f3bf 8f6f 	isb	sy
	}
}
   2a616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   2a618:	2802      	cmp	r0, #2
   2a61a:	bfb8      	it	lt
   2a61c:	2002      	movlt	r0, #2
   2a61e:	e7df      	b.n	2a5e0 <k_sched_time_slice_set+0x64>
   2a620:	20016bbc 	.word	0x20016bbc
   2a624:	00037fec 	.word	0x00037fec
   2a628:	0003803e 	.word	0x0003803e
   2a62c:	00037f2c 	.word	0x00037f2c
   2a630:	00038053 	.word	0x00038053
   2a634:	20016b74 	.word	0x20016b74
   2a638:	20016bc4 	.word	0x20016bc4
   2a63c:	20016bc0 	.word	0x20016bc0
   2a640:	00038012 	.word	0x00038012
   2a644:	00038029 	.word	0x00038029

0002a648 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   2a648:	b538      	push	{r3, r4, r5, lr}
   2a64a:	4604      	mov	r4, r0
	__asm__ volatile(
   2a64c:	f04f 0320 	mov.w	r3, #32
   2a650:	f3ef 8511 	mrs	r5, BASEPRI
   2a654:	f383 8811 	msr	BASEPRI, r3
   2a658:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a65c:	4817      	ldr	r0, [pc, #92]	; (2a6bc <z_unpend_thread_no_timeout+0x74>)
   2a65e:	f7fe fc89 	bl	28f74 <z_spin_lock_valid>
   2a662:	b968      	cbnz	r0, 2a680 <z_unpend_thread_no_timeout+0x38>
   2a664:	2381      	movs	r3, #129	; 0x81
   2a666:	4a16      	ldr	r2, [pc, #88]	; (2a6c0 <z_unpend_thread_no_timeout+0x78>)
   2a668:	4916      	ldr	r1, [pc, #88]	; (2a6c4 <z_unpend_thread_no_timeout+0x7c>)
   2a66a:	4817      	ldr	r0, [pc, #92]	; (2a6c8 <z_unpend_thread_no_timeout+0x80>)
   2a66c:	f003 fb8c 	bl	2dd88 <printk>
   2a670:	4912      	ldr	r1, [pc, #72]	; (2a6bc <z_unpend_thread_no_timeout+0x74>)
   2a672:	4816      	ldr	r0, [pc, #88]	; (2a6cc <z_unpend_thread_no_timeout+0x84>)
   2a674:	f003 fb88 	bl	2dd88 <printk>
   2a678:	2181      	movs	r1, #129	; 0x81
   2a67a:	4811      	ldr	r0, [pc, #68]	; (2a6c0 <z_unpend_thread_no_timeout+0x78>)
   2a67c:	f003 fe6a 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a680:	480e      	ldr	r0, [pc, #56]	; (2a6bc <z_unpend_thread_no_timeout+0x74>)
   2a682:	f7fe fc93 	bl	28fac <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   2a686:	4620      	mov	r0, r4
   2a688:	f000 f900 	bl	2a88c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a68c:	480b      	ldr	r0, [pc, #44]	; (2a6bc <z_unpend_thread_no_timeout+0x74>)
   2a68e:	f7fe fc7f 	bl	28f90 <z_spin_unlock_valid>
   2a692:	b968      	cbnz	r0, 2a6b0 <z_unpend_thread_no_timeout+0x68>
   2a694:	23ac      	movs	r3, #172	; 0xac
   2a696:	4a0a      	ldr	r2, [pc, #40]	; (2a6c0 <z_unpend_thread_no_timeout+0x78>)
   2a698:	490d      	ldr	r1, [pc, #52]	; (2a6d0 <z_unpend_thread_no_timeout+0x88>)
   2a69a:	480b      	ldr	r0, [pc, #44]	; (2a6c8 <z_unpend_thread_no_timeout+0x80>)
   2a69c:	f003 fb74 	bl	2dd88 <printk>
   2a6a0:	4906      	ldr	r1, [pc, #24]	; (2a6bc <z_unpend_thread_no_timeout+0x74>)
   2a6a2:	480c      	ldr	r0, [pc, #48]	; (2a6d4 <z_unpend_thread_no_timeout+0x8c>)
   2a6a4:	f003 fb70 	bl	2dd88 <printk>
   2a6a8:	21ac      	movs	r1, #172	; 0xac
   2a6aa:	4805      	ldr	r0, [pc, #20]	; (2a6c0 <z_unpend_thread_no_timeout+0x78>)
   2a6ac:	f003 fe52 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a6b0:	f385 8811 	msr	BASEPRI, r5
   2a6b4:	f3bf 8f6f 	isb	sy
	}
}
   2a6b8:	bd38      	pop	{r3, r4, r5, pc}
   2a6ba:	bf00      	nop
   2a6bc:	20016bbc 	.word	0x20016bbc
   2a6c0:	00037fec 	.word	0x00037fec
   2a6c4:	0003803e 	.word	0x0003803e
   2a6c8:	00037f2c 	.word	0x00037f2c
   2a6cc:	00038053 	.word	0x00038053
   2a6d0:	00038012 	.word	0x00038012
   2a6d4:	00038029 	.word	0x00038029

0002a6d8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2a6d8:	b538      	push	{r3, r4, r5, lr}
   2a6da:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2a6dc:	460d      	mov	r5, r1
   2a6de:	b9e9      	cbnz	r1, 2a71c <z_reschedule+0x44>
   2a6e0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   2a6e4:	b9d3      	cbnz	r3, 2a71c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   2a6e6:	4b19      	ldr	r3, [pc, #100]	; (2a74c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   2a6e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2a6ea:	689b      	ldr	r3, [r3, #8]
   2a6ec:	429a      	cmp	r2, r3
   2a6ee:	d015      	beq.n	2a71c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a6f0:	f7fe fc4e 	bl	28f90 <z_spin_unlock_valid>
   2a6f4:	b968      	cbnz	r0, 2a712 <z_reschedule+0x3a>
   2a6f6:	23c3      	movs	r3, #195	; 0xc3
   2a6f8:	4a15      	ldr	r2, [pc, #84]	; (2a750 <z_reschedule+0x78>)
   2a6fa:	4916      	ldr	r1, [pc, #88]	; (2a754 <z_reschedule+0x7c>)
   2a6fc:	4816      	ldr	r0, [pc, #88]	; (2a758 <z_reschedule+0x80>)
   2a6fe:	f003 fb43 	bl	2dd88 <printk>
   2a702:	4621      	mov	r1, r4
   2a704:	4815      	ldr	r0, [pc, #84]	; (2a75c <z_reschedule+0x84>)
   2a706:	f003 fb3f 	bl	2dd88 <printk>
   2a70a:	21c3      	movs	r1, #195	; 0xc3
   2a70c:	4810      	ldr	r0, [pc, #64]	; (2a750 <z_reschedule+0x78>)
   2a70e:	f003 fe21 	bl	2e354 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2a712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   2a716:	2000      	movs	r0, #0
   2a718:	f7ec bafc 	b.w	16d14 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a71c:	4620      	mov	r0, r4
   2a71e:	f7fe fc37 	bl	28f90 <z_spin_unlock_valid>
   2a722:	b968      	cbnz	r0, 2a740 <z_reschedule+0x68>
   2a724:	23ac      	movs	r3, #172	; 0xac
   2a726:	4a0a      	ldr	r2, [pc, #40]	; (2a750 <z_reschedule+0x78>)
   2a728:	490a      	ldr	r1, [pc, #40]	; (2a754 <z_reschedule+0x7c>)
   2a72a:	480b      	ldr	r0, [pc, #44]	; (2a758 <z_reschedule+0x80>)
   2a72c:	f003 fb2c 	bl	2dd88 <printk>
   2a730:	4621      	mov	r1, r4
   2a732:	480a      	ldr	r0, [pc, #40]	; (2a75c <z_reschedule+0x84>)
   2a734:	f003 fb28 	bl	2dd88 <printk>
   2a738:	21ac      	movs	r1, #172	; 0xac
   2a73a:	4805      	ldr	r0, [pc, #20]	; (2a750 <z_reschedule+0x78>)
   2a73c:	f003 fe0a 	bl	2e354 <assert_post_action>
   2a740:	f385 8811 	msr	BASEPRI, r5
   2a744:	f3bf 8f6f 	isb	sy
   2a748:	bd38      	pop	{r3, r4, r5, pc}
   2a74a:	bf00      	nop
   2a74c:	20016b74 	.word	0x20016b74
   2a750:	00037fec 	.word	0x00037fec
   2a754:	00038012 	.word	0x00038012
   2a758:	00037f2c 	.word	0x00037f2c
   2a75c:	00038029 	.word	0x00038029

0002a760 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   2a760:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a762:	f04f 0320 	mov.w	r3, #32
   2a766:	f3ef 8511 	mrs	r5, BASEPRI
   2a76a:	f383 8811 	msr	BASEPRI, r3
   2a76e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a772:	4829      	ldr	r0, [pc, #164]	; (2a818 <k_sched_lock+0xb8>)
   2a774:	f7fe fbfe 	bl	28f74 <z_spin_lock_valid>
   2a778:	b968      	cbnz	r0, 2a796 <k_sched_lock+0x36>
   2a77a:	2381      	movs	r3, #129	; 0x81
   2a77c:	4a27      	ldr	r2, [pc, #156]	; (2a81c <k_sched_lock+0xbc>)
   2a77e:	4928      	ldr	r1, [pc, #160]	; (2a820 <k_sched_lock+0xc0>)
   2a780:	4828      	ldr	r0, [pc, #160]	; (2a824 <k_sched_lock+0xc4>)
   2a782:	f003 fb01 	bl	2dd88 <printk>
   2a786:	4924      	ldr	r1, [pc, #144]	; (2a818 <k_sched_lock+0xb8>)
   2a788:	4827      	ldr	r0, [pc, #156]	; (2a828 <k_sched_lock+0xc8>)
   2a78a:	f003 fafd 	bl	2dd88 <printk>
   2a78e:	2181      	movs	r1, #129	; 0x81
   2a790:	4822      	ldr	r0, [pc, #136]	; (2a81c <k_sched_lock+0xbc>)
   2a792:	f003 fddf 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a796:	4820      	ldr	r0, [pc, #128]	; (2a818 <k_sched_lock+0xb8>)
   2a798:	f7fe fc08 	bl	28fac <z_spin_lock_set_owner>
   2a79c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2a7a0:	b163      	cbz	r3, 2a7bc <k_sched_lock+0x5c>
   2a7a2:	4922      	ldr	r1, [pc, #136]	; (2a82c <k_sched_lock+0xcc>)
   2a7a4:	23fe      	movs	r3, #254	; 0xfe
   2a7a6:	4a22      	ldr	r2, [pc, #136]	; (2a830 <k_sched_lock+0xd0>)
   2a7a8:	481e      	ldr	r0, [pc, #120]	; (2a824 <k_sched_lock+0xc4>)
   2a7aa:	f003 faed 	bl	2dd88 <printk>
   2a7ae:	4821      	ldr	r0, [pc, #132]	; (2a834 <k_sched_lock+0xd4>)
   2a7b0:	f003 faea 	bl	2dd88 <printk>
   2a7b4:	21fe      	movs	r1, #254	; 0xfe
   2a7b6:	481e      	ldr	r0, [pc, #120]	; (2a830 <k_sched_lock+0xd0>)
   2a7b8:	f003 fdcc 	bl	2e354 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2a7bc:	4c1e      	ldr	r4, [pc, #120]	; (2a838 <k_sched_lock+0xd8>)
   2a7be:	68a2      	ldr	r2, [r4, #8]
   2a7c0:	7bd2      	ldrb	r2, [r2, #15]
   2a7c2:	2a01      	cmp	r2, #1
   2a7c4:	d10c      	bne.n	2a7e0 <k_sched_lock+0x80>
   2a7c6:	491d      	ldr	r1, [pc, #116]	; (2a83c <k_sched_lock+0xdc>)
   2a7c8:	23ff      	movs	r3, #255	; 0xff
   2a7ca:	4a19      	ldr	r2, [pc, #100]	; (2a830 <k_sched_lock+0xd0>)
   2a7cc:	4815      	ldr	r0, [pc, #84]	; (2a824 <k_sched_lock+0xc4>)
   2a7ce:	f003 fadb 	bl	2dd88 <printk>
   2a7d2:	4818      	ldr	r0, [pc, #96]	; (2a834 <k_sched_lock+0xd4>)
   2a7d4:	f003 fad8 	bl	2dd88 <printk>
   2a7d8:	21ff      	movs	r1, #255	; 0xff
   2a7da:	4815      	ldr	r0, [pc, #84]	; (2a830 <k_sched_lock+0xd0>)
   2a7dc:	f003 fdba 	bl	2e354 <assert_post_action>
	--_current->base.sched_locked;
   2a7e0:	68a2      	ldr	r2, [r4, #8]
   2a7e2:	7bd3      	ldrb	r3, [r2, #15]
   2a7e4:	3b01      	subs	r3, #1
   2a7e6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a7e8:	480b      	ldr	r0, [pc, #44]	; (2a818 <k_sched_lock+0xb8>)
   2a7ea:	f7fe fbd1 	bl	28f90 <z_spin_unlock_valid>
   2a7ee:	b968      	cbnz	r0, 2a80c <k_sched_lock+0xac>
   2a7f0:	23ac      	movs	r3, #172	; 0xac
   2a7f2:	4a0a      	ldr	r2, [pc, #40]	; (2a81c <k_sched_lock+0xbc>)
   2a7f4:	4912      	ldr	r1, [pc, #72]	; (2a840 <k_sched_lock+0xe0>)
   2a7f6:	480b      	ldr	r0, [pc, #44]	; (2a824 <k_sched_lock+0xc4>)
   2a7f8:	f003 fac6 	bl	2dd88 <printk>
   2a7fc:	4906      	ldr	r1, [pc, #24]	; (2a818 <k_sched_lock+0xb8>)
   2a7fe:	4811      	ldr	r0, [pc, #68]	; (2a844 <k_sched_lock+0xe4>)
   2a800:	f003 fac2 	bl	2dd88 <printk>
   2a804:	21ac      	movs	r1, #172	; 0xac
   2a806:	4805      	ldr	r0, [pc, #20]	; (2a81c <k_sched_lock+0xbc>)
   2a808:	f003 fda4 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a80c:	f385 8811 	msr	BASEPRI, r5
   2a810:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2a814:	bd38      	pop	{r3, r4, r5, pc}
   2a816:	bf00      	nop
   2a818:	20016bbc 	.word	0x20016bbc
   2a81c:	00037fec 	.word	0x00037fec
   2a820:	0003803e 	.word	0x0003803e
   2a824:	00037f2c 	.word	0x00037f2c
   2a828:	00038053 	.word	0x00038053
   2a82c:	0003e204 	.word	0x0003e204
   2a830:	0003e2e8 	.word	0x0003e2e8
   2a834:	000385b8 	.word	0x000385b8
   2a838:	20016b74 	.word	0x20016b74
   2a83c:	0003e313 	.word	0x0003e313
   2a840:	00038012 	.word	0x00038012
   2a844:	00038029 	.word	0x00038029

0002a848 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a848:	4b0c      	ldr	r3, [pc, #48]	; (2a87c <z_priq_dumb_remove+0x34>)
{
   2a84a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a84c:	4299      	cmp	r1, r3
{
   2a84e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a850:	d10b      	bne.n	2a86a <z_priq_dumb_remove+0x22>
   2a852:	490b      	ldr	r1, [pc, #44]	; (2a880 <z_priq_dumb_remove+0x38>)
   2a854:	480b      	ldr	r0, [pc, #44]	; (2a884 <z_priq_dumb_remove+0x3c>)
   2a856:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   2a85a:	4a0b      	ldr	r2, [pc, #44]	; (2a888 <z_priq_dumb_remove+0x40>)
   2a85c:	f003 fa94 	bl	2dd88 <printk>
   2a860:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   2a864:	4808      	ldr	r0, [pc, #32]	; (2a888 <z_priq_dumb_remove+0x40>)
   2a866:	f003 fd75 	bl	2e354 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2a86a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   2a86e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a870:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a872:	2300      	movs	r3, #0
	node->prev = NULL;
   2a874:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2a878:	bd10      	pop	{r4, pc}
   2a87a:	bf00      	nop
   2a87c:	20015cf0 	.word	0x20015cf0
   2a880:	0003e4c7 	.word	0x0003e4c7
   2a884:	00037f2c 	.word	0x00037f2c
   2a888:	0003e4a5 	.word	0x0003e4a5

0002a88c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   2a88c:	6883      	ldr	r3, [r0, #8]
{
   2a88e:	b510      	push	{r4, lr}
   2a890:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2a892:	b95b      	cbnz	r3, 2a8ac <unpend_thread_no_timeout+0x20>
   2a894:	490b      	ldr	r1, [pc, #44]	; (2a8c4 <unpend_thread_no_timeout+0x38>)
   2a896:	480c      	ldr	r0, [pc, #48]	; (2a8c8 <unpend_thread_no_timeout+0x3c>)
   2a898:	f240 234f 	movw	r3, #591	; 0x24f
   2a89c:	4a0b      	ldr	r2, [pc, #44]	; (2a8cc <unpend_thread_no_timeout+0x40>)
   2a89e:	f003 fa73 	bl	2dd88 <printk>
   2a8a2:	f240 214f 	movw	r1, #591	; 0x24f
   2a8a6:	4809      	ldr	r0, [pc, #36]	; (2a8cc <unpend_thread_no_timeout+0x40>)
   2a8a8:	f003 fd54 	bl	2e354 <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2a8ac:	4621      	mov	r1, r4
   2a8ae:	68a0      	ldr	r0, [r4, #8]
   2a8b0:	f7ff ffca 	bl	2a848 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a8b4:	7b63      	ldrb	r3, [r4, #13]
   2a8b6:	f023 0302 	bic.w	r3, r3, #2
   2a8ba:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2a8bc:	2300      	movs	r3, #0
   2a8be:	60a3      	str	r3, [r4, #8]
}
   2a8c0:	bd10      	pop	{r4, pc}
   2a8c2:	bf00      	nop
   2a8c4:	0003e4e8 	.word	0x0003e4e8
   2a8c8:	00037f2c 	.word	0x00037f2c
   2a8cc:	0003e4a5 	.word	0x0003e4a5

0002a8d0 <z_unpend_thread>:
{
   2a8d0:	b538      	push	{r3, r4, r5, lr}
   2a8d2:	4604      	mov	r4, r0
	__asm__ volatile(
   2a8d4:	f04f 0320 	mov.w	r3, #32
   2a8d8:	f3ef 8511 	mrs	r5, BASEPRI
   2a8dc:	f383 8811 	msr	BASEPRI, r3
   2a8e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a8e4:	4819      	ldr	r0, [pc, #100]	; (2a94c <z_unpend_thread+0x7c>)
   2a8e6:	f7fe fb45 	bl	28f74 <z_spin_lock_valid>
   2a8ea:	b968      	cbnz	r0, 2a908 <z_unpend_thread+0x38>
   2a8ec:	2381      	movs	r3, #129	; 0x81
   2a8ee:	4a18      	ldr	r2, [pc, #96]	; (2a950 <z_unpend_thread+0x80>)
   2a8f0:	4918      	ldr	r1, [pc, #96]	; (2a954 <z_unpend_thread+0x84>)
   2a8f2:	4819      	ldr	r0, [pc, #100]	; (2a958 <z_unpend_thread+0x88>)
   2a8f4:	f003 fa48 	bl	2dd88 <printk>
   2a8f8:	4914      	ldr	r1, [pc, #80]	; (2a94c <z_unpend_thread+0x7c>)
   2a8fa:	4818      	ldr	r0, [pc, #96]	; (2a95c <z_unpend_thread+0x8c>)
   2a8fc:	f003 fa44 	bl	2dd88 <printk>
   2a900:	2181      	movs	r1, #129	; 0x81
   2a902:	4813      	ldr	r0, [pc, #76]	; (2a950 <z_unpend_thread+0x80>)
   2a904:	f003 fd26 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a908:	4810      	ldr	r0, [pc, #64]	; (2a94c <z_unpend_thread+0x7c>)
   2a90a:	f7fe fb4f 	bl	28fac <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   2a90e:	4620      	mov	r0, r4
   2a910:	f7ff ffbc 	bl	2a88c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a914:	480d      	ldr	r0, [pc, #52]	; (2a94c <z_unpend_thread+0x7c>)
   2a916:	f7fe fb3b 	bl	28f90 <z_spin_unlock_valid>
   2a91a:	b968      	cbnz	r0, 2a938 <z_unpend_thread+0x68>
   2a91c:	23ac      	movs	r3, #172	; 0xac
   2a91e:	4a0c      	ldr	r2, [pc, #48]	; (2a950 <z_unpend_thread+0x80>)
   2a920:	490f      	ldr	r1, [pc, #60]	; (2a960 <z_unpend_thread+0x90>)
   2a922:	480d      	ldr	r0, [pc, #52]	; (2a958 <z_unpend_thread+0x88>)
   2a924:	f003 fa30 	bl	2dd88 <printk>
   2a928:	4908      	ldr	r1, [pc, #32]	; (2a94c <z_unpend_thread+0x7c>)
   2a92a:	480e      	ldr	r0, [pc, #56]	; (2a964 <z_unpend_thread+0x94>)
   2a92c:	f003 fa2c 	bl	2dd88 <printk>
   2a930:	21ac      	movs	r1, #172	; 0xac
   2a932:	4807      	ldr	r0, [pc, #28]	; (2a950 <z_unpend_thread+0x80>)
   2a934:	f003 fd0e 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2a938:	f385 8811 	msr	BASEPRI, r5
   2a93c:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2a940:	f104 0018 	add.w	r0, r4, #24
}
   2a944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a948:	f001 b974 	b.w	2bc34 <z_abort_timeout>
   2a94c:	20016bbc 	.word	0x20016bbc
   2a950:	00037fec 	.word	0x00037fec
   2a954:	0003803e 	.word	0x0003803e
   2a958:	00037f2c 	.word	0x00037f2c
   2a95c:	00038053 	.word	0x00038053
   2a960:	00038012 	.word	0x00038012
   2a964:	00038029 	.word	0x00038029

0002a968 <update_cache>:
{
   2a968:	b538      	push	{r3, r4, r5, lr}
   2a96a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   2a96c:	4814      	ldr	r0, [pc, #80]	; (2a9c0 <update_cache+0x58>)
   2a96e:	f00a fd10 	bl	35392 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2a972:	4d14      	ldr	r5, [pc, #80]	; (2a9c4 <update_cache+0x5c>)
   2a974:	4604      	mov	r4, r0
   2a976:	b900      	cbnz	r0, 2a97a <update_cache+0x12>
   2a978:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   2a97a:	b9ca      	cbnz	r2, 2a9b0 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   2a97c:	68ab      	ldr	r3, [r5, #8]
   2a97e:	b963      	cbnz	r3, 2a99a <update_cache+0x32>
   2a980:	4911      	ldr	r1, [pc, #68]	; (2a9c8 <update_cache+0x60>)
   2a982:	2385      	movs	r3, #133	; 0x85
   2a984:	4a11      	ldr	r2, [pc, #68]	; (2a9cc <update_cache+0x64>)
   2a986:	4812      	ldr	r0, [pc, #72]	; (2a9d0 <update_cache+0x68>)
   2a988:	f003 f9fe 	bl	2dd88 <printk>
   2a98c:	4811      	ldr	r0, [pc, #68]	; (2a9d4 <update_cache+0x6c>)
   2a98e:	f003 f9fb 	bl	2dd88 <printk>
   2a992:	2185      	movs	r1, #133	; 0x85
   2a994:	480d      	ldr	r0, [pc, #52]	; (2a9cc <update_cache+0x64>)
   2a996:	f003 fcdd 	bl	2e354 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2a99a:	68ab      	ldr	r3, [r5, #8]
   2a99c:	7b5a      	ldrb	r2, [r3, #13]
   2a99e:	06d2      	lsls	r2, r2, #27
   2a9a0:	d106      	bne.n	2a9b0 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2a9a2:	69a2      	ldr	r2, [r4, #24]
   2a9a4:	b922      	cbnz	r2, 2a9b0 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   2a9a6:	89da      	ldrh	r2, [r3, #14]
   2a9a8:	2a7f      	cmp	r2, #127	; 0x7f
   2a9aa:	d901      	bls.n	2a9b0 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   2a9ac:	626b      	str	r3, [r5, #36]	; 0x24
}
   2a9ae:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2a9b0:	68ab      	ldr	r3, [r5, #8]
   2a9b2:	42a3      	cmp	r3, r4
   2a9b4:	d001      	beq.n	2a9ba <update_cache+0x52>
			z_reset_time_slice();
   2a9b6:	f7ff fdcb 	bl	2a550 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2a9ba:	626c      	str	r4, [r5, #36]	; 0x24
}
   2a9bc:	e7f7      	b.n	2a9ae <update_cache+0x46>
   2a9be:	bf00      	nop
   2a9c0:	20016b9c 	.word	0x20016b9c
   2a9c4:	20016b74 	.word	0x20016b74
   2a9c8:	0003e4ff 	.word	0x0003e4ff
   2a9cc:	0003e4a5 	.word	0x0003e4a5
   2a9d0:	00037f2c 	.word	0x00037f2c
   2a9d4:	000385b8 	.word	0x000385b8

0002a9d8 <unready_thread>:
{
   2a9d8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2a9da:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2a9de:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2a9e0:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2a9e2:	7b43      	ldrb	r3, [r0, #13]
   2a9e4:	da06      	bge.n	2a9f4 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   2a9ea:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a9ec:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   2a9ee:	4806      	ldr	r0, [pc, #24]	; (2aa08 <unready_thread+0x30>)
   2a9f0:	f7ff ff2a 	bl	2a848 <z_priq_dumb_remove>
	update_cache(thread == _current);
   2a9f4:	4b05      	ldr	r3, [pc, #20]	; (2aa0c <unready_thread+0x34>)
   2a9f6:	6898      	ldr	r0, [r3, #8]
   2a9f8:	1b03      	subs	r3, r0, r4
   2a9fa:	4258      	negs	r0, r3
   2a9fc:	4158      	adcs	r0, r3
}
   2a9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2aa02:	f7ff bfb1 	b.w	2a968 <update_cache>
   2aa06:	bf00      	nop
   2aa08:	20016b9c 	.word	0x20016b9c
   2aa0c:	20016b74 	.word	0x20016b74

0002aa10 <add_to_waitq_locked>:
{
   2aa10:	b538      	push	{r3, r4, r5, lr}
   2aa12:	4604      	mov	r4, r0
   2aa14:	460d      	mov	r5, r1
	unready_thread(thread);
   2aa16:	f7ff ffdf 	bl	2a9d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2aa1a:	7b63      	ldrb	r3, [r4, #13]
   2aa1c:	f043 0302 	orr.w	r3, r3, #2
   2aa20:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2aa22:	b32d      	cbz	r5, 2aa70 <add_to_waitq_locked+0x60>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2aa24:	4b18      	ldr	r3, [pc, #96]	; (2aa88 <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
   2aa26:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2aa28:	429c      	cmp	r4, r3
   2aa2a:	d10b      	bne.n	2aa44 <add_to_waitq_locked+0x34>
   2aa2c:	4917      	ldr	r1, [pc, #92]	; (2aa8c <add_to_waitq_locked+0x7c>)
   2aa2e:	4818      	ldr	r0, [pc, #96]	; (2aa90 <add_to_waitq_locked+0x80>)
   2aa30:	f240 33b5 	movw	r3, #949	; 0x3b5
   2aa34:	4a17      	ldr	r2, [pc, #92]	; (2aa94 <add_to_waitq_locked+0x84>)
   2aa36:	f003 f9a7 	bl	2dd88 <printk>
   2aa3a:	f240 31b5 	movw	r1, #949	; 0x3b5
   2aa3e:	4815      	ldr	r0, [pc, #84]	; (2aa94 <add_to_waitq_locked+0x84>)
   2aa40:	f003 fc88 	bl	2e354 <assert_post_action>
	return list->head == list;
   2aa44:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aa46:	429d      	cmp	r5, r3
   2aa48:	bf08      	it	eq
   2aa4a:	2300      	moveq	r3, #0
   2aa4c:	2b00      	cmp	r3, #0
   2aa4e:	bf38      	it	cc
   2aa50:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2aa52:	b19b      	cbz	r3, 2aa7c <add_to_waitq_locked+0x6c>
	int32_t b1 = thread_1->base.prio;
   2aa54:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2aa58:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2aa5c:	4291      	cmp	r1, r2
   2aa5e:	d008      	beq.n	2aa72 <add_to_waitq_locked+0x62>
		return b2 - b1;
   2aa60:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2aa62:	2a00      	cmp	r2, #0
   2aa64:	dd05      	ble.n	2aa72 <add_to_waitq_locked+0x62>
	sys_dnode_t *const prev = successor->prev;
   2aa66:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2aa68:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2aa6c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2aa6e:	605c      	str	r4, [r3, #4]
}
   2aa70:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2aa72:	686a      	ldr	r2, [r5, #4]
   2aa74:	4293      	cmp	r3, r2
   2aa76:	d001      	beq.n	2aa7c <add_to_waitq_locked+0x6c>
   2aa78:	681b      	ldr	r3, [r3, #0]
   2aa7a:	e7ea      	b.n	2aa52 <add_to_waitq_locked+0x42>
	sys_dnode_t *const tail = list->tail;
   2aa7c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2aa7e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2aa82:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2aa84:	606c      	str	r4, [r5, #4]
   2aa86:	e7f3      	b.n	2aa70 <add_to_waitq_locked+0x60>
   2aa88:	20015cf0 	.word	0x20015cf0
   2aa8c:	0003e4c7 	.word	0x0003e4c7
   2aa90:	00037f2c 	.word	0x00037f2c
   2aa94:	0003e4a5 	.word	0x0003e4a5

0002aa98 <pend>:
{
   2aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa9c:	4604      	mov	r4, r0
   2aa9e:	460d      	mov	r5, r1
   2aaa0:	4616      	mov	r6, r2
   2aaa2:	461f      	mov	r7, r3
	__asm__ volatile(
   2aaa4:	f04f 0320 	mov.w	r3, #32
   2aaa8:	f3ef 8811 	mrs	r8, BASEPRI
   2aaac:	f383 8811 	msr	BASEPRI, r3
   2aab0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aab4:	481f      	ldr	r0, [pc, #124]	; (2ab34 <pend+0x9c>)
   2aab6:	f7fe fa5d 	bl	28f74 <z_spin_lock_valid>
   2aaba:	b968      	cbnz	r0, 2aad8 <pend+0x40>
   2aabc:	2381      	movs	r3, #129	; 0x81
   2aabe:	4a1e      	ldr	r2, [pc, #120]	; (2ab38 <pend+0xa0>)
   2aac0:	491e      	ldr	r1, [pc, #120]	; (2ab3c <pend+0xa4>)
   2aac2:	481f      	ldr	r0, [pc, #124]	; (2ab40 <pend+0xa8>)
   2aac4:	f003 f960 	bl	2dd88 <printk>
   2aac8:	491a      	ldr	r1, [pc, #104]	; (2ab34 <pend+0x9c>)
   2aaca:	481e      	ldr	r0, [pc, #120]	; (2ab44 <pend+0xac>)
   2aacc:	f003 f95c 	bl	2dd88 <printk>
   2aad0:	2181      	movs	r1, #129	; 0x81
   2aad2:	4819      	ldr	r0, [pc, #100]	; (2ab38 <pend+0xa0>)
   2aad4:	f003 fc3e 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2aad8:	4816      	ldr	r0, [pc, #88]	; (2ab34 <pend+0x9c>)
   2aada:	f7fe fa67 	bl	28fac <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   2aade:	4620      	mov	r0, r4
   2aae0:	4629      	mov	r1, r5
   2aae2:	f7ff ff95 	bl	2aa10 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aae6:	4813      	ldr	r0, [pc, #76]	; (2ab34 <pend+0x9c>)
   2aae8:	f7fe fa52 	bl	28f90 <z_spin_unlock_valid>
   2aaec:	b968      	cbnz	r0, 2ab0a <pend+0x72>
   2aaee:	23ac      	movs	r3, #172	; 0xac
   2aaf0:	4a11      	ldr	r2, [pc, #68]	; (2ab38 <pend+0xa0>)
   2aaf2:	4915      	ldr	r1, [pc, #84]	; (2ab48 <pend+0xb0>)
   2aaf4:	4812      	ldr	r0, [pc, #72]	; (2ab40 <pend+0xa8>)
   2aaf6:	f003 f947 	bl	2dd88 <printk>
   2aafa:	490e      	ldr	r1, [pc, #56]	; (2ab34 <pend+0x9c>)
   2aafc:	4813      	ldr	r0, [pc, #76]	; (2ab4c <pend+0xb4>)
   2aafe:	f003 f943 	bl	2dd88 <printk>
   2ab02:	21ac      	movs	r1, #172	; 0xac
   2ab04:	480c      	ldr	r0, [pc, #48]	; (2ab38 <pend+0xa0>)
   2ab06:	f003 fc25 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2ab0a:	f388 8811 	msr	BASEPRI, r8
   2ab0e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ab12:	1c7b      	adds	r3, r7, #1
   2ab14:	bf08      	it	eq
   2ab16:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2ab1a:	d008      	beq.n	2ab2e <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2ab1c:	4632      	mov	r2, r6
   2ab1e:	463b      	mov	r3, r7
   2ab20:	f104 0018 	add.w	r0, r4, #24
   2ab24:	490a      	ldr	r1, [pc, #40]	; (2ab50 <pend+0xb8>)
}
   2ab26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2ab2a:	f000 bfaf 	b.w	2ba8c <z_add_timeout>
   2ab2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ab32:	bf00      	nop
   2ab34:	20016bbc 	.word	0x20016bbc
   2ab38:	00037fec 	.word	0x00037fec
   2ab3c:	0003803e 	.word	0x0003803e
   2ab40:	00037f2c 	.word	0x00037f2c
   2ab44:	00038053 	.word	0x00038053
   2ab48:	00038012 	.word	0x00038012
   2ab4c:	00038029 	.word	0x00038029
   2ab50:	0002b101 	.word	0x0002b101

0002ab54 <z_pend_curr>:
{
   2ab54:	b538      	push	{r3, r4, r5, lr}
   2ab56:	4604      	mov	r4, r0
	pending_current = _current;
   2ab58:	4b10      	ldr	r3, [pc, #64]	; (2ab9c <z_pend_curr+0x48>)
{
   2ab5a:	460d      	mov	r5, r1
	pending_current = _current;
   2ab5c:	6898      	ldr	r0, [r3, #8]
   2ab5e:	4b10      	ldr	r3, [pc, #64]	; (2aba0 <z_pend_curr+0x4c>)
{
   2ab60:	4611      	mov	r1, r2
	pending_current = _current;
   2ab62:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   2ab64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2ab68:	f7ff ff96 	bl	2aa98 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ab6c:	4620      	mov	r0, r4
   2ab6e:	f7fe fa0f 	bl	28f90 <z_spin_unlock_valid>
   2ab72:	b968      	cbnz	r0, 2ab90 <z_pend_curr+0x3c>
   2ab74:	23c3      	movs	r3, #195	; 0xc3
   2ab76:	4a0b      	ldr	r2, [pc, #44]	; (2aba4 <z_pend_curr+0x50>)
   2ab78:	490b      	ldr	r1, [pc, #44]	; (2aba8 <z_pend_curr+0x54>)
   2ab7a:	480c      	ldr	r0, [pc, #48]	; (2abac <z_pend_curr+0x58>)
   2ab7c:	f003 f904 	bl	2dd88 <printk>
   2ab80:	4621      	mov	r1, r4
   2ab82:	480b      	ldr	r0, [pc, #44]	; (2abb0 <z_pend_curr+0x5c>)
   2ab84:	f003 f900 	bl	2dd88 <printk>
   2ab88:	21c3      	movs	r1, #195	; 0xc3
   2ab8a:	4806      	ldr	r0, [pc, #24]	; (2aba4 <z_pend_curr+0x50>)
   2ab8c:	f003 fbe2 	bl	2e354 <assert_post_action>
   2ab90:	4628      	mov	r0, r5
}
   2ab92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ab96:	f7ec b8bd 	b.w	16d14 <arch_swap>
   2ab9a:	bf00      	nop
   2ab9c:	20016b74 	.word	0x20016b74
   2aba0:	20016bb8 	.word	0x20016bb8
   2aba4:	00037fec 	.word	0x00037fec
   2aba8:	00038012 	.word	0x00038012
   2abac:	00037f2c 	.word	0x00037f2c
   2abb0:	00038029 	.word	0x00038029

0002abb4 <z_impl_k_thread_suspend>:
{
   2abb4:	b570      	push	{r4, r5, r6, lr}
   2abb6:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   2abb8:	3018      	adds	r0, #24
   2abba:	f001 f83b 	bl	2bc34 <z_abort_timeout>
	__asm__ volatile(
   2abbe:	f04f 0320 	mov.w	r3, #32
   2abc2:	f3ef 8611 	mrs	r6, BASEPRI
   2abc6:	f383 8811 	msr	BASEPRI, r3
   2abca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2abce:	4825      	ldr	r0, [pc, #148]	; (2ac64 <z_impl_k_thread_suspend+0xb0>)
   2abd0:	f7fe f9d0 	bl	28f74 <z_spin_lock_valid>
   2abd4:	b968      	cbnz	r0, 2abf2 <z_impl_k_thread_suspend+0x3e>
   2abd6:	2381      	movs	r3, #129	; 0x81
   2abd8:	4a23      	ldr	r2, [pc, #140]	; (2ac68 <z_impl_k_thread_suspend+0xb4>)
   2abda:	4924      	ldr	r1, [pc, #144]	; (2ac6c <z_impl_k_thread_suspend+0xb8>)
   2abdc:	4824      	ldr	r0, [pc, #144]	; (2ac70 <z_impl_k_thread_suspend+0xbc>)
   2abde:	f003 f8d3 	bl	2dd88 <printk>
   2abe2:	4920      	ldr	r1, [pc, #128]	; (2ac64 <z_impl_k_thread_suspend+0xb0>)
   2abe4:	4823      	ldr	r0, [pc, #140]	; (2ac74 <z_impl_k_thread_suspend+0xc0>)
   2abe6:	f003 f8cf 	bl	2dd88 <printk>
   2abea:	2181      	movs	r1, #129	; 0x81
   2abec:	481e      	ldr	r0, [pc, #120]	; (2ac68 <z_impl_k_thread_suspend+0xb4>)
   2abee:	f003 fbb1 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2abf2:	481c      	ldr	r0, [pc, #112]	; (2ac64 <z_impl_k_thread_suspend+0xb0>)
   2abf4:	f7fe f9da 	bl	28fac <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2abf8:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2abfc:	7b63      	ldrb	r3, [r4, #13]
   2abfe:	2a00      	cmp	r2, #0
   2ac00:	da06      	bge.n	2ac10 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ac02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   2ac06:	4621      	mov	r1, r4
   2ac08:	481b      	ldr	r0, [pc, #108]	; (2ac78 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ac0a:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   2ac0c:	f7ff fe1c 	bl	2a848 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2ac10:	4d1a      	ldr	r5, [pc, #104]	; (2ac7c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2ac12:	7b63      	ldrb	r3, [r4, #13]
   2ac14:	68a8      	ldr	r0, [r5, #8]
   2ac16:	f043 0310 	orr.w	r3, r3, #16
   2ac1a:	7363      	strb	r3, [r4, #13]
   2ac1c:	1b03      	subs	r3, r0, r4
   2ac1e:	4258      	negs	r0, r3
   2ac20:	4158      	adcs	r0, r3
   2ac22:	f7ff fea1 	bl	2a968 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ac26:	480f      	ldr	r0, [pc, #60]	; (2ac64 <z_impl_k_thread_suspend+0xb0>)
   2ac28:	f7fe f9b2 	bl	28f90 <z_spin_unlock_valid>
   2ac2c:	b968      	cbnz	r0, 2ac4a <z_impl_k_thread_suspend+0x96>
   2ac2e:	23ac      	movs	r3, #172	; 0xac
   2ac30:	4a0d      	ldr	r2, [pc, #52]	; (2ac68 <z_impl_k_thread_suspend+0xb4>)
   2ac32:	4913      	ldr	r1, [pc, #76]	; (2ac80 <z_impl_k_thread_suspend+0xcc>)
   2ac34:	480e      	ldr	r0, [pc, #56]	; (2ac70 <z_impl_k_thread_suspend+0xbc>)
   2ac36:	f003 f8a7 	bl	2dd88 <printk>
   2ac3a:	490a      	ldr	r1, [pc, #40]	; (2ac64 <z_impl_k_thread_suspend+0xb0>)
   2ac3c:	4811      	ldr	r0, [pc, #68]	; (2ac84 <z_impl_k_thread_suspend+0xd0>)
   2ac3e:	f003 f8a3 	bl	2dd88 <printk>
   2ac42:	21ac      	movs	r1, #172	; 0xac
   2ac44:	4808      	ldr	r0, [pc, #32]	; (2ac68 <z_impl_k_thread_suspend+0xb4>)
   2ac46:	f003 fb85 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2ac4a:	f386 8811 	msr	BASEPRI, r6
   2ac4e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2ac52:	68ab      	ldr	r3, [r5, #8]
   2ac54:	42a3      	cmp	r3, r4
   2ac56:	d103      	bne.n	2ac60 <z_impl_k_thread_suspend+0xac>
}
   2ac58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2ac5c:	f00a bb8f 	b.w	3537e <z_reschedule_unlocked>
}
   2ac60:	bd70      	pop	{r4, r5, r6, pc}
   2ac62:	bf00      	nop
   2ac64:	20016bbc 	.word	0x20016bbc
   2ac68:	00037fec 	.word	0x00037fec
   2ac6c:	0003803e 	.word	0x0003803e
   2ac70:	00037f2c 	.word	0x00037f2c
   2ac74:	00038053 	.word	0x00038053
   2ac78:	20016b9c 	.word	0x20016b9c
   2ac7c:	20016b74 	.word	0x20016b74
   2ac80:	00038012 	.word	0x00038012
   2ac84:	00038029 	.word	0x00038029

0002ac88 <k_sched_unlock>:
{
   2ac88:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ac8a:	f04f 0320 	mov.w	r3, #32
   2ac8e:	f3ef 8511 	mrs	r5, BASEPRI
   2ac92:	f383 8811 	msr	BASEPRI, r3
   2ac96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ac9a:	482d      	ldr	r0, [pc, #180]	; (2ad50 <k_sched_unlock+0xc8>)
   2ac9c:	f7fe f96a 	bl	28f74 <z_spin_lock_valid>
   2aca0:	b968      	cbnz	r0, 2acbe <k_sched_unlock+0x36>
   2aca2:	2381      	movs	r3, #129	; 0x81
   2aca4:	4a2b      	ldr	r2, [pc, #172]	; (2ad54 <k_sched_unlock+0xcc>)
   2aca6:	492c      	ldr	r1, [pc, #176]	; (2ad58 <k_sched_unlock+0xd0>)
   2aca8:	482c      	ldr	r0, [pc, #176]	; (2ad5c <k_sched_unlock+0xd4>)
   2acaa:	f003 f86d 	bl	2dd88 <printk>
   2acae:	4928      	ldr	r1, [pc, #160]	; (2ad50 <k_sched_unlock+0xc8>)
   2acb0:	482b      	ldr	r0, [pc, #172]	; (2ad60 <k_sched_unlock+0xd8>)
   2acb2:	f003 f869 	bl	2dd88 <printk>
   2acb6:	2181      	movs	r1, #129	; 0x81
   2acb8:	4826      	ldr	r0, [pc, #152]	; (2ad54 <k_sched_unlock+0xcc>)
   2acba:	f003 fb4b 	bl	2e354 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   2acbe:	4c29      	ldr	r4, [pc, #164]	; (2ad64 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   2acc0:	4823      	ldr	r0, [pc, #140]	; (2ad50 <k_sched_unlock+0xc8>)
   2acc2:	f7fe f973 	bl	28fac <z_spin_lock_set_owner>
   2acc6:	68a2      	ldr	r2, [r4, #8]
   2acc8:	7bd2      	ldrb	r2, [r2, #15]
   2acca:	b972      	cbnz	r2, 2acea <k_sched_unlock+0x62>
   2accc:	4926      	ldr	r1, [pc, #152]	; (2ad68 <k_sched_unlock+0xe0>)
   2acce:	f240 3352 	movw	r3, #850	; 0x352
   2acd2:	4a26      	ldr	r2, [pc, #152]	; (2ad6c <k_sched_unlock+0xe4>)
   2acd4:	4821      	ldr	r0, [pc, #132]	; (2ad5c <k_sched_unlock+0xd4>)
   2acd6:	f003 f857 	bl	2dd88 <printk>
   2acda:	4825      	ldr	r0, [pc, #148]	; (2ad70 <k_sched_unlock+0xe8>)
   2acdc:	f003 f854 	bl	2dd88 <printk>
   2ace0:	f240 3152 	movw	r1, #850	; 0x352
   2ace4:	4821      	ldr	r0, [pc, #132]	; (2ad6c <k_sched_unlock+0xe4>)
   2ace6:	f003 fb35 	bl	2e354 <assert_post_action>
   2acea:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2acee:	b173      	cbz	r3, 2ad0e <k_sched_unlock+0x86>
   2acf0:	4920      	ldr	r1, [pc, #128]	; (2ad74 <k_sched_unlock+0xec>)
   2acf2:	f240 3353 	movw	r3, #851	; 0x353
   2acf6:	4a1d      	ldr	r2, [pc, #116]	; (2ad6c <k_sched_unlock+0xe4>)
   2acf8:	4818      	ldr	r0, [pc, #96]	; (2ad5c <k_sched_unlock+0xd4>)
   2acfa:	f003 f845 	bl	2dd88 <printk>
   2acfe:	481c      	ldr	r0, [pc, #112]	; (2ad70 <k_sched_unlock+0xe8>)
   2ad00:	f003 f842 	bl	2dd88 <printk>
   2ad04:	f240 3153 	movw	r1, #851	; 0x353
   2ad08:	4818      	ldr	r0, [pc, #96]	; (2ad6c <k_sched_unlock+0xe4>)
   2ad0a:	f003 fb23 	bl	2e354 <assert_post_action>
		++_current->base.sched_locked;
   2ad0e:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   2ad10:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2ad12:	7bd3      	ldrb	r3, [r2, #15]
   2ad14:	3301      	adds	r3, #1
   2ad16:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2ad18:	f7ff fe26 	bl	2a968 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ad1c:	480c      	ldr	r0, [pc, #48]	; (2ad50 <k_sched_unlock+0xc8>)
   2ad1e:	f7fe f937 	bl	28f90 <z_spin_unlock_valid>
   2ad22:	b968      	cbnz	r0, 2ad40 <k_sched_unlock+0xb8>
   2ad24:	23ac      	movs	r3, #172	; 0xac
   2ad26:	4a0b      	ldr	r2, [pc, #44]	; (2ad54 <k_sched_unlock+0xcc>)
   2ad28:	4913      	ldr	r1, [pc, #76]	; (2ad78 <k_sched_unlock+0xf0>)
   2ad2a:	480c      	ldr	r0, [pc, #48]	; (2ad5c <k_sched_unlock+0xd4>)
   2ad2c:	f003 f82c 	bl	2dd88 <printk>
   2ad30:	4907      	ldr	r1, [pc, #28]	; (2ad50 <k_sched_unlock+0xc8>)
   2ad32:	4812      	ldr	r0, [pc, #72]	; (2ad7c <k_sched_unlock+0xf4>)
   2ad34:	f003 f828 	bl	2dd88 <printk>
   2ad38:	21ac      	movs	r1, #172	; 0xac
   2ad3a:	4806      	ldr	r0, [pc, #24]	; (2ad54 <k_sched_unlock+0xcc>)
   2ad3c:	f003 fb0a 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2ad40:	f385 8811 	msr	BASEPRI, r5
   2ad44:	f3bf 8f6f 	isb	sy
}
   2ad48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2ad4c:	f00a bb17 	b.w	3537e <z_reschedule_unlocked>
   2ad50:	20016bbc 	.word	0x20016bbc
   2ad54:	00037fec 	.word	0x00037fec
   2ad58:	0003803e 	.word	0x0003803e
   2ad5c:	00037f2c 	.word	0x00037f2c
   2ad60:	00038053 	.word	0x00038053
   2ad64:	20016b74 	.word	0x20016b74
   2ad68:	0003e526 	.word	0x0003e526
   2ad6c:	0003e4a5 	.word	0x0003e4a5
   2ad70:	000385b8 	.word	0x000385b8
   2ad74:	0003e204 	.word	0x0003e204
   2ad78:	00038012 	.word	0x00038012
   2ad7c:	00038029 	.word	0x00038029

0002ad80 <move_thread_to_end_of_prio_q>:
{
   2ad80:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2ad82:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2ad86:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2ad88:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2ad8a:	7b43      	ldrb	r3, [r0, #13]
   2ad8c:	da06      	bge.n	2ad9c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ad8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   2ad92:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ad94:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   2ad96:	4820      	ldr	r0, [pc, #128]	; (2ae18 <move_thread_to_end_of_prio_q+0x98>)
   2ad98:	f7ff fd56 	bl	2a848 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2ad9c:	7b63      	ldrb	r3, [r4, #13]
   2ad9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2ada2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2ada4:	4b1d      	ldr	r3, [pc, #116]	; (2ae1c <move_thread_to_end_of_prio_q+0x9c>)
   2ada6:	429c      	cmp	r4, r3
   2ada8:	d10b      	bne.n	2adc2 <move_thread_to_end_of_prio_q+0x42>
   2adaa:	491d      	ldr	r1, [pc, #116]	; (2ae20 <move_thread_to_end_of_prio_q+0xa0>)
   2adac:	481d      	ldr	r0, [pc, #116]	; (2ae24 <move_thread_to_end_of_prio_q+0xa4>)
   2adae:	f240 33b5 	movw	r3, #949	; 0x3b5
   2adb2:	4a1d      	ldr	r2, [pc, #116]	; (2ae28 <move_thread_to_end_of_prio_q+0xa8>)
   2adb4:	f002 ffe8 	bl	2dd88 <printk>
   2adb8:	f240 31b5 	movw	r1, #949	; 0x3b5
   2adbc:	481a      	ldr	r0, [pc, #104]	; (2ae28 <move_thread_to_end_of_prio_q+0xa8>)
   2adbe:	f003 fac9 	bl	2e354 <assert_post_action>
	return list->head == list;
   2adc2:	4a1a      	ldr	r2, [pc, #104]	; (2ae2c <move_thread_to_end_of_prio_q+0xac>)
   2adc4:	4611      	mov	r1, r2
   2adc6:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2adca:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2adcc:	428b      	cmp	r3, r1
   2adce:	bf08      	it	eq
   2add0:	2300      	moveq	r3, #0
   2add2:	2b00      	cmp	r3, #0
   2add4:	bf38      	it	cc
   2add6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2add8:	b1cb      	cbz	r3, 2ae0e <move_thread_to_end_of_prio_q+0x8e>
	int32_t b1 = thread_1->base.prio;
   2adda:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2adde:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2ade2:	4286      	cmp	r6, r0
   2ade4:	d00f      	beq.n	2ae06 <move_thread_to_end_of_prio_q+0x86>
		return b2 - b1;
   2ade6:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ade8:	2800      	cmp	r0, #0
   2adea:	dd0c      	ble.n	2ae06 <move_thread_to_end_of_prio_q+0x86>
	sys_dnode_t *const prev = successor->prev;
   2adec:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2adee:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2adf2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2adf4:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   2adf6:	6890      	ldr	r0, [r2, #8]
   2adf8:	1b03      	subs	r3, r0, r4
   2adfa:	4258      	negs	r0, r3
   2adfc:	4158      	adcs	r0, r3
}
   2adfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2ae02:	f7ff bdb1 	b.w	2a968 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2ae06:	42ab      	cmp	r3, r5
   2ae08:	d001      	beq.n	2ae0e <move_thread_to_end_of_prio_q+0x8e>
   2ae0a:	681b      	ldr	r3, [r3, #0]
   2ae0c:	e7e4      	b.n	2add8 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   2ae0e:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   2ae12:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2ae14:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2ae16:	e7ee      	b.n	2adf6 <move_thread_to_end_of_prio_q+0x76>
   2ae18:	20016b9c 	.word	0x20016b9c
   2ae1c:	20015cf0 	.word	0x20015cf0
   2ae20:	0003e4c7 	.word	0x0003e4c7
   2ae24:	00037f2c 	.word	0x00037f2c
   2ae28:	0003e4a5 	.word	0x0003e4a5
   2ae2c:	20016b74 	.word	0x20016b74

0002ae30 <z_time_slice>:
{
   2ae30:	b570      	push	{r4, r5, r6, lr}
   2ae32:	4604      	mov	r4, r0
	__asm__ volatile(
   2ae34:	f04f 0320 	mov.w	r3, #32
   2ae38:	f3ef 8511 	mrs	r5, BASEPRI
   2ae3c:	f383 8811 	msr	BASEPRI, r3
   2ae40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ae44:	482a      	ldr	r0, [pc, #168]	; (2aef0 <__kernel_ram_size+0x58>)
   2ae46:	f7fe f895 	bl	28f74 <z_spin_lock_valid>
   2ae4a:	b968      	cbnz	r0, 2ae68 <z_time_slice+0x38>
   2ae4c:	2381      	movs	r3, #129	; 0x81
   2ae4e:	4a29      	ldr	r2, [pc, #164]	; (2aef4 <__kernel_ram_size+0x5c>)
   2ae50:	4929      	ldr	r1, [pc, #164]	; (2aef8 <__kernel_ram_size+0x60>)
   2ae52:	482a      	ldr	r0, [pc, #168]	; (2aefc <__kernel_ram_size+0x64>)
   2ae54:	f002 ff98 	bl	2dd88 <printk>
   2ae58:	4925      	ldr	r1, [pc, #148]	; (2aef0 <__kernel_ram_size+0x58>)
   2ae5a:	4829      	ldr	r0, [pc, #164]	; (2af00 <__kernel_ram_size+0x68>)
   2ae5c:	f002 ff94 	bl	2dd88 <printk>
   2ae60:	2181      	movs	r1, #129	; 0x81
   2ae62:	4824      	ldr	r0, [pc, #144]	; (2aef4 <__kernel_ram_size+0x5c>)
   2ae64:	f003 fa76 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ae68:	4821      	ldr	r0, [pc, #132]	; (2aef0 <__kernel_ram_size+0x58>)
   2ae6a:	f7fe f89f 	bl	28fac <z_spin_lock_set_owner>
	if (pending_current == _current) {
   2ae6e:	4b25      	ldr	r3, [pc, #148]	; (2af04 <__kernel_ram_size+0x6c>)
   2ae70:	4a25      	ldr	r2, [pc, #148]	; (2af08 <__kernel_ram_size+0x70>)
   2ae72:	6898      	ldr	r0, [r3, #8]
   2ae74:	6811      	ldr	r1, [r2, #0]
   2ae76:	4288      	cmp	r0, r1
   2ae78:	4619      	mov	r1, r3
   2ae7a:	d118      	bne.n	2aeae <__kernel_ram_size+0x16>
			z_reset_time_slice();
   2ae7c:	f7ff fb68 	bl	2a550 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ae80:	481b      	ldr	r0, [pc, #108]	; (2aef0 <__kernel_ram_size+0x58>)
   2ae82:	f7fe f885 	bl	28f90 <z_spin_unlock_valid>
   2ae86:	b968      	cbnz	r0, 2aea4 <__kernel_ram_size+0xc>
   2ae88:	23ac      	movs	r3, #172	; 0xac
   2ae8a:	4a1a      	ldr	r2, [pc, #104]	; (2aef4 <__kernel_ram_size+0x5c>)
   2ae8c:	491f      	ldr	r1, [pc, #124]	; (2af0c <__kernel_ram_size+0x74>)
   2ae8e:	481b      	ldr	r0, [pc, #108]	; (2aefc <__kernel_ram_size+0x64>)
   2ae90:	f002 ff7a 	bl	2dd88 <printk>
   2ae94:	4916      	ldr	r1, [pc, #88]	; (2aef0 <__kernel_ram_size+0x58>)
   2ae96:	481e      	ldr	r0, [pc, #120]	; (2af10 <__kernel_ram_size+0x78>)
   2ae98:	f002 ff76 	bl	2dd88 <printk>
   2ae9c:	21ac      	movs	r1, #172	; 0xac
   2ae9e:	4815      	ldr	r0, [pc, #84]	; (2aef4 <__kernel_ram_size+0x5c>)
   2aea0:	f003 fa58 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2aea4:	f385 8811 	msr	BASEPRI, r5
   2aea8:	f3bf 8f6f 	isb	sy
}
   2aeac:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   2aeae:	2600      	movs	r6, #0
   2aeb0:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2aeb2:	4a18      	ldr	r2, [pc, #96]	; (2af14 <__kernel_ram_size+0x7c>)
   2aeb4:	6812      	ldr	r2, [r2, #0]
   2aeb6:	b1ba      	cbz	r2, 2aee8 <__kernel_ram_size+0x50>
		&& !z_is_idle_thread_object(thread);
   2aeb8:	89c2      	ldrh	r2, [r0, #14]
   2aeba:	2a7f      	cmp	r2, #127	; 0x7f
   2aebc:	d814      	bhi.n	2aee8 <__kernel_ram_size+0x50>
		&& !z_is_thread_prevented_from_running(thread)
   2aebe:	7b42      	ldrb	r2, [r0, #13]
   2aec0:	06d2      	lsls	r2, r2, #27
   2aec2:	d111      	bne.n	2aee8 <__kernel_ram_size+0x50>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2aec4:	4a14      	ldr	r2, [pc, #80]	; (2af18 <__kernel_ram_size+0x80>)
   2aec6:	f990 600e 	ldrsb.w	r6, [r0, #14]
   2aeca:	6812      	ldr	r2, [r2, #0]
   2aecc:	4296      	cmp	r6, r2
   2aece:	db0b      	blt.n	2aee8 <__kernel_ram_size+0x50>
		&& !z_is_idle_thread_object(thread);
   2aed0:	4a12      	ldr	r2, [pc, #72]	; (2af1c <__kernel_ram_size+0x84>)
   2aed2:	4290      	cmp	r0, r2
   2aed4:	d008      	beq.n	2aee8 <__kernel_ram_size+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
   2aed6:	691a      	ldr	r2, [r3, #16]
   2aed8:	42a2      	cmp	r2, r4
   2aeda:	dc02      	bgt.n	2aee2 <__kernel_ram_size+0x4a>
			move_thread_to_end_of_prio_q(_current);
   2aedc:	f7ff ff50 	bl	2ad80 <move_thread_to_end_of_prio_q>
   2aee0:	e7cc      	b.n	2ae7c <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   2aee2:	1b12      	subs	r2, r2, r4
   2aee4:	611a      	str	r2, [r3, #16]
   2aee6:	e7cb      	b.n	2ae80 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   2aee8:	2300      	movs	r3, #0
   2aeea:	610b      	str	r3, [r1, #16]
   2aeec:	e7c8      	b.n	2ae80 <z_time_slice+0x50>
   2aeee:	bf00      	nop
   2aef0:	20016bbc 	.word	0x20016bbc
   2aef4:	00037fec 	.word	0x00037fec
   2aef8:	0003803e 	.word	0x0003803e
   2aefc:	00037f2c 	.word	0x00037f2c
   2af00:	00038053 	.word	0x00038053
   2af04:	20016b74 	.word	0x20016b74
   2af08:	20016bb8 	.word	0x20016bb8
   2af0c:	00038012 	.word	0x00038012
   2af10:	00038029 	.word	0x00038029
   2af14:	20016bc4 	.word	0x20016bc4
   2af18:	20016bc0 	.word	0x20016bc0
   2af1c:	20015cf0 	.word	0x20015cf0

0002af20 <ready_thread>:
{
   2af20:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2af22:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2af26:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2af28:	2a00      	cmp	r2, #0
   2af2a:	7b43      	ldrb	r3, [r0, #13]
   2af2c:	db40      	blt.n	2afb0 <ready_thread+0x90>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2af2e:	06da      	lsls	r2, r3, #27
   2af30:	d13e      	bne.n	2afb0 <ready_thread+0x90>
	return !sys_dnode_is_linked(&to->node);
   2af32:	6985      	ldr	r5, [r0, #24]
   2af34:	2d00      	cmp	r5, #0
   2af36:	d13b      	bne.n	2afb0 <ready_thread+0x90>
	thread->base.thread_state |= _THREAD_QUEUED;
   2af38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2af3c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2af3e:	4b1d      	ldr	r3, [pc, #116]	; (2afb4 <ready_thread+0x94>)
   2af40:	4298      	cmp	r0, r3
   2af42:	d10b      	bne.n	2af5c <ready_thread+0x3c>
   2af44:	491c      	ldr	r1, [pc, #112]	; (2afb8 <ready_thread+0x98>)
   2af46:	481d      	ldr	r0, [pc, #116]	; (2afbc <ready_thread+0x9c>)
   2af48:	f240 33b5 	movw	r3, #949	; 0x3b5
   2af4c:	4a1c      	ldr	r2, [pc, #112]	; (2afc0 <ready_thread+0xa0>)
   2af4e:	f002 ff1b 	bl	2dd88 <printk>
   2af52:	f240 31b5 	movw	r1, #949	; 0x3b5
   2af56:	481a      	ldr	r0, [pc, #104]	; (2afc0 <ready_thread+0xa0>)
   2af58:	f003 f9fc 	bl	2e354 <assert_post_action>
	return list->head == list;
   2af5c:	4919      	ldr	r1, [pc, #100]	; (2afc4 <ready_thread+0xa4>)
   2af5e:	460b      	mov	r3, r1
   2af60:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2af64:	4298      	cmp	r0, r3
   2af66:	bf18      	it	ne
   2af68:	4605      	movne	r5, r0
   2af6a:	2d00      	cmp	r5, #0
   2af6c:	461a      	mov	r2, r3
   2af6e:	462b      	mov	r3, r5
   2af70:	bf38      	it	cc
   2af72:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2af74:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2af76:	b1b3      	cbz	r3, 2afa6 <ready_thread+0x86>
	int32_t b1 = thread_1->base.prio;
   2af78:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2af7c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2af80:	4286      	cmp	r6, r0
   2af82:	d00c      	beq.n	2af9e <ready_thread+0x7e>
		return b2 - b1;
   2af84:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2af86:	2800      	cmp	r0, #0
   2af88:	dd09      	ble.n	2af9e <ready_thread+0x7e>
	sys_dnode_t *const prev = successor->prev;
   2af8a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2af8c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2af90:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2af92:	605c      	str	r4, [r3, #4]
		update_cache(0);
   2af94:	2000      	movs	r0, #0
}
   2af96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2af9a:	f7ff bce5 	b.w	2a968 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2af9e:	42ab      	cmp	r3, r5
   2afa0:	d001      	beq.n	2afa6 <ready_thread+0x86>
   2afa2:	681b      	ldr	r3, [r3, #0]
   2afa4:	e7e7      	b.n	2af76 <ready_thread+0x56>
	node->prev = tail;
   2afa6:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2afaa:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2afac:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   2afae:	e7f1      	b.n	2af94 <ready_thread+0x74>
}
   2afb0:	bd70      	pop	{r4, r5, r6, pc}
   2afb2:	bf00      	nop
   2afb4:	20015cf0 	.word	0x20015cf0
   2afb8:	0003e4c7 	.word	0x0003e4c7
   2afbc:	00037f2c 	.word	0x00037f2c
   2afc0:	0003e4a5 	.word	0x0003e4a5
   2afc4:	20016b74 	.word	0x20016b74

0002afc8 <z_ready_thread>:
{
   2afc8:	b538      	push	{r3, r4, r5, lr}
   2afca:	4604      	mov	r4, r0
	__asm__ volatile(
   2afcc:	f04f 0320 	mov.w	r3, #32
   2afd0:	f3ef 8511 	mrs	r5, BASEPRI
   2afd4:	f383 8811 	msr	BASEPRI, r3
   2afd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2afdc:	4817      	ldr	r0, [pc, #92]	; (2b03c <z_ready_thread+0x74>)
   2afde:	f7fd ffc9 	bl	28f74 <z_spin_lock_valid>
   2afe2:	b968      	cbnz	r0, 2b000 <z_ready_thread+0x38>
   2afe4:	2381      	movs	r3, #129	; 0x81
   2afe6:	4a16      	ldr	r2, [pc, #88]	; (2b040 <z_ready_thread+0x78>)
   2afe8:	4916      	ldr	r1, [pc, #88]	; (2b044 <z_ready_thread+0x7c>)
   2afea:	4817      	ldr	r0, [pc, #92]	; (2b048 <z_ready_thread+0x80>)
   2afec:	f002 fecc 	bl	2dd88 <printk>
   2aff0:	4912      	ldr	r1, [pc, #72]	; (2b03c <z_ready_thread+0x74>)
   2aff2:	4816      	ldr	r0, [pc, #88]	; (2b04c <z_ready_thread+0x84>)
   2aff4:	f002 fec8 	bl	2dd88 <printk>
   2aff8:	2181      	movs	r1, #129	; 0x81
   2affa:	4811      	ldr	r0, [pc, #68]	; (2b040 <z_ready_thread+0x78>)
   2affc:	f003 f9aa 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b000:	480e      	ldr	r0, [pc, #56]	; (2b03c <z_ready_thread+0x74>)
   2b002:	f7fd ffd3 	bl	28fac <z_spin_lock_set_owner>
			ready_thread(thread);
   2b006:	4620      	mov	r0, r4
   2b008:	f7ff ff8a 	bl	2af20 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b00c:	480b      	ldr	r0, [pc, #44]	; (2b03c <z_ready_thread+0x74>)
   2b00e:	f7fd ffbf 	bl	28f90 <z_spin_unlock_valid>
   2b012:	b968      	cbnz	r0, 2b030 <z_ready_thread+0x68>
   2b014:	23ac      	movs	r3, #172	; 0xac
   2b016:	4a0a      	ldr	r2, [pc, #40]	; (2b040 <z_ready_thread+0x78>)
   2b018:	490d      	ldr	r1, [pc, #52]	; (2b050 <z_ready_thread+0x88>)
   2b01a:	480b      	ldr	r0, [pc, #44]	; (2b048 <z_ready_thread+0x80>)
   2b01c:	f002 feb4 	bl	2dd88 <printk>
   2b020:	4906      	ldr	r1, [pc, #24]	; (2b03c <z_ready_thread+0x74>)
   2b022:	480c      	ldr	r0, [pc, #48]	; (2b054 <z_ready_thread+0x8c>)
   2b024:	f002 feb0 	bl	2dd88 <printk>
   2b028:	21ac      	movs	r1, #172	; 0xac
   2b02a:	4805      	ldr	r0, [pc, #20]	; (2b040 <z_ready_thread+0x78>)
   2b02c:	f003 f992 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2b030:	f385 8811 	msr	BASEPRI, r5
   2b034:	f3bf 8f6f 	isb	sy
}
   2b038:	bd38      	pop	{r3, r4, r5, pc}
   2b03a:	bf00      	nop
   2b03c:	20016bbc 	.word	0x20016bbc
   2b040:	00037fec 	.word	0x00037fec
   2b044:	0003803e 	.word	0x0003803e
   2b048:	00037f2c 	.word	0x00037f2c
   2b04c:	00038053 	.word	0x00038053
   2b050:	00038012 	.word	0x00038012
   2b054:	00038029 	.word	0x00038029

0002b058 <z_sched_start>:
{
   2b058:	b538      	push	{r3, r4, r5, lr}
   2b05a:	4604      	mov	r4, r0
	__asm__ volatile(
   2b05c:	f04f 0320 	mov.w	r3, #32
   2b060:	f3ef 8511 	mrs	r5, BASEPRI
   2b064:	f383 8811 	msr	BASEPRI, r3
   2b068:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b06c:	481d      	ldr	r0, [pc, #116]	; (2b0e4 <z_sched_start+0x8c>)
   2b06e:	f7fd ff81 	bl	28f74 <z_spin_lock_valid>
   2b072:	b968      	cbnz	r0, 2b090 <z_sched_start+0x38>
   2b074:	2381      	movs	r3, #129	; 0x81
   2b076:	4a1c      	ldr	r2, [pc, #112]	; (2b0e8 <z_sched_start+0x90>)
   2b078:	491c      	ldr	r1, [pc, #112]	; (2b0ec <z_sched_start+0x94>)
   2b07a:	481d      	ldr	r0, [pc, #116]	; (2b0f0 <z_sched_start+0x98>)
   2b07c:	f002 fe84 	bl	2dd88 <printk>
   2b080:	4918      	ldr	r1, [pc, #96]	; (2b0e4 <z_sched_start+0x8c>)
   2b082:	481c      	ldr	r0, [pc, #112]	; (2b0f4 <z_sched_start+0x9c>)
   2b084:	f002 fe80 	bl	2dd88 <printk>
   2b088:	2181      	movs	r1, #129	; 0x81
   2b08a:	4817      	ldr	r0, [pc, #92]	; (2b0e8 <z_sched_start+0x90>)
   2b08c:	f003 f962 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b090:	4814      	ldr	r0, [pc, #80]	; (2b0e4 <z_sched_start+0x8c>)
   2b092:	f7fd ff8b 	bl	28fac <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2b096:	7b63      	ldrb	r3, [r4, #13]
   2b098:	075a      	lsls	r2, r3, #29
   2b09a:	d416      	bmi.n	2b0ca <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b09c:	4811      	ldr	r0, [pc, #68]	; (2b0e4 <z_sched_start+0x8c>)
   2b09e:	f7fd ff77 	bl	28f90 <z_spin_unlock_valid>
   2b0a2:	b968      	cbnz	r0, 2b0c0 <z_sched_start+0x68>
   2b0a4:	23ac      	movs	r3, #172	; 0xac
   2b0a6:	4a10      	ldr	r2, [pc, #64]	; (2b0e8 <z_sched_start+0x90>)
   2b0a8:	4913      	ldr	r1, [pc, #76]	; (2b0f8 <z_sched_start+0xa0>)
   2b0aa:	4811      	ldr	r0, [pc, #68]	; (2b0f0 <z_sched_start+0x98>)
   2b0ac:	f002 fe6c 	bl	2dd88 <printk>
   2b0b0:	490c      	ldr	r1, [pc, #48]	; (2b0e4 <z_sched_start+0x8c>)
   2b0b2:	4812      	ldr	r0, [pc, #72]	; (2b0fc <z_sched_start+0xa4>)
   2b0b4:	f002 fe68 	bl	2dd88 <printk>
   2b0b8:	21ac      	movs	r1, #172	; 0xac
   2b0ba:	480b      	ldr	r0, [pc, #44]	; (2b0e8 <z_sched_start+0x90>)
   2b0bc:	f003 f94a 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2b0c0:	f385 8811 	msr	BASEPRI, r5
   2b0c4:	f3bf 8f6f 	isb	sy
}
   2b0c8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b0ca:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2b0ce:	4620      	mov	r0, r4
   2b0d0:	7363      	strb	r3, [r4, #13]
   2b0d2:	f7ff ff25 	bl	2af20 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2b0d6:	4629      	mov	r1, r5
}
   2b0d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2b0dc:	4801      	ldr	r0, [pc, #4]	; (2b0e4 <z_sched_start+0x8c>)
   2b0de:	f7ff bafb 	b.w	2a6d8 <z_reschedule>
   2b0e2:	bf00      	nop
   2b0e4:	20016bbc 	.word	0x20016bbc
   2b0e8:	00037fec 	.word	0x00037fec
   2b0ec:	0003803e 	.word	0x0003803e
   2b0f0:	00037f2c 	.word	0x00037f2c
   2b0f4:	00038053 	.word	0x00038053
   2b0f8:	00038012 	.word	0x00038012
   2b0fc:	00038029 	.word	0x00038029

0002b100 <z_thread_timeout>:
{
   2b100:	b570      	push	{r4, r5, r6, lr}
   2b102:	4604      	mov	r4, r0
	__asm__ volatile(
   2b104:	f04f 0320 	mov.w	r3, #32
   2b108:	f3ef 8611 	mrs	r6, BASEPRI
   2b10c:	f383 8811 	msr	BASEPRI, r3
   2b110:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b114:	4820      	ldr	r0, [pc, #128]	; (2b198 <z_thread_timeout+0x98>)
   2b116:	f7fd ff2d 	bl	28f74 <z_spin_lock_valid>
   2b11a:	b968      	cbnz	r0, 2b138 <z_thread_timeout+0x38>
   2b11c:	2381      	movs	r3, #129	; 0x81
   2b11e:	4a1f      	ldr	r2, [pc, #124]	; (2b19c <z_thread_timeout+0x9c>)
   2b120:	491f      	ldr	r1, [pc, #124]	; (2b1a0 <z_thread_timeout+0xa0>)
   2b122:	4820      	ldr	r0, [pc, #128]	; (2b1a4 <z_thread_timeout+0xa4>)
   2b124:	f002 fe30 	bl	2dd88 <printk>
   2b128:	491b      	ldr	r1, [pc, #108]	; (2b198 <z_thread_timeout+0x98>)
   2b12a:	481f      	ldr	r0, [pc, #124]	; (2b1a8 <z_thread_timeout+0xa8>)
   2b12c:	f002 fe2c 	bl	2dd88 <printk>
   2b130:	2181      	movs	r1, #129	; 0x81
   2b132:	481a      	ldr	r0, [pc, #104]	; (2b19c <z_thread_timeout+0x9c>)
   2b134:	f003 f90e 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b138:	4817      	ldr	r0, [pc, #92]	; (2b198 <z_thread_timeout+0x98>)
   2b13a:	f7fd ff37 	bl	28fac <z_spin_lock_set_owner>
		if (!killed) {
   2b13e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2b142:	f013 0f28 	tst.w	r3, #40	; 0x28
   2b146:	d110      	bne.n	2b16a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   2b148:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2b14c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   2b150:	b113      	cbz	r3, 2b158 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   2b152:	4628      	mov	r0, r5
   2b154:	f7ff fb9a 	bl	2a88c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2b158:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   2b15c:	4628      	mov	r0, r5
   2b15e:	f023 0314 	bic.w	r3, r3, #20
   2b162:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2b166:	f7ff fedb 	bl	2af20 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b16a:	480b      	ldr	r0, [pc, #44]	; (2b198 <z_thread_timeout+0x98>)
   2b16c:	f7fd ff10 	bl	28f90 <z_spin_unlock_valid>
   2b170:	b968      	cbnz	r0, 2b18e <z_thread_timeout+0x8e>
   2b172:	23ac      	movs	r3, #172	; 0xac
   2b174:	4a09      	ldr	r2, [pc, #36]	; (2b19c <z_thread_timeout+0x9c>)
   2b176:	490d      	ldr	r1, [pc, #52]	; (2b1ac <z_thread_timeout+0xac>)
   2b178:	480a      	ldr	r0, [pc, #40]	; (2b1a4 <z_thread_timeout+0xa4>)
   2b17a:	f002 fe05 	bl	2dd88 <printk>
   2b17e:	4906      	ldr	r1, [pc, #24]	; (2b198 <z_thread_timeout+0x98>)
   2b180:	480b      	ldr	r0, [pc, #44]	; (2b1b0 <z_thread_timeout+0xb0>)
   2b182:	f002 fe01 	bl	2dd88 <printk>
   2b186:	21ac      	movs	r1, #172	; 0xac
   2b188:	4804      	ldr	r0, [pc, #16]	; (2b19c <z_thread_timeout+0x9c>)
   2b18a:	f003 f8e3 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2b18e:	f386 8811 	msr	BASEPRI, r6
   2b192:	f3bf 8f6f 	isb	sy
}
   2b196:	bd70      	pop	{r4, r5, r6, pc}
   2b198:	20016bbc 	.word	0x20016bbc
   2b19c:	00037fec 	.word	0x00037fec
   2b1a0:	0003803e 	.word	0x0003803e
   2b1a4:	00037f2c 	.word	0x00037f2c
   2b1a8:	00038053 	.word	0x00038053
   2b1ac:	00038012 	.word	0x00038012
   2b1b0:	00038029 	.word	0x00038029

0002b1b4 <z_set_prio>:
{
   2b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b1b6:	4604      	mov	r4, r0
   2b1b8:	460e      	mov	r6, r1
	__asm__ volatile(
   2b1ba:	f04f 0320 	mov.w	r3, #32
   2b1be:	f3ef 8711 	mrs	r7, BASEPRI
   2b1c2:	f383 8811 	msr	BASEPRI, r3
   2b1c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b1ca:	483d      	ldr	r0, [pc, #244]	; (2b2c0 <z_set_prio+0x10c>)
   2b1cc:	f7fd fed2 	bl	28f74 <z_spin_lock_valid>
   2b1d0:	b968      	cbnz	r0, 2b1ee <z_set_prio+0x3a>
   2b1d2:	2381      	movs	r3, #129	; 0x81
   2b1d4:	4a3b      	ldr	r2, [pc, #236]	; (2b2c4 <z_set_prio+0x110>)
   2b1d6:	493c      	ldr	r1, [pc, #240]	; (2b2c8 <z_set_prio+0x114>)
   2b1d8:	483c      	ldr	r0, [pc, #240]	; (2b2cc <z_set_prio+0x118>)
   2b1da:	f002 fdd5 	bl	2dd88 <printk>
   2b1de:	4938      	ldr	r1, [pc, #224]	; (2b2c0 <z_set_prio+0x10c>)
   2b1e0:	483b      	ldr	r0, [pc, #236]	; (2b2d0 <z_set_prio+0x11c>)
   2b1e2:	f002 fdd1 	bl	2dd88 <printk>
   2b1e6:	2181      	movs	r1, #129	; 0x81
   2b1e8:	4836      	ldr	r0, [pc, #216]	; (2b2c4 <z_set_prio+0x110>)
   2b1ea:	f003 f8b3 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b1ee:	4834      	ldr	r0, [pc, #208]	; (2b2c0 <z_set_prio+0x10c>)
   2b1f0:	f7fd fedc 	bl	28fac <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2b1f4:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   2b1f6:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2b1f8:	06da      	lsls	r2, r3, #27
   2b1fa:	d15e      	bne.n	2b2ba <z_set_prio+0x106>
   2b1fc:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   2b1fe:	2d00      	cmp	r5, #0
   2b200:	d15b      	bne.n	2b2ba <z_set_prio+0x106>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2b206:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   2b208:	4621      	mov	r1, r4
   2b20a:	4832      	ldr	r0, [pc, #200]	; (2b2d4 <z_set_prio+0x120>)
   2b20c:	f7ff fb1c 	bl	2a848 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2b210:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2b212:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2b214:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2b218:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2b21a:	4b2f      	ldr	r3, [pc, #188]	; (2b2d8 <z_set_prio+0x124>)
   2b21c:	429c      	cmp	r4, r3
   2b21e:	d10b      	bne.n	2b238 <z_set_prio+0x84>
   2b220:	492e      	ldr	r1, [pc, #184]	; (2b2dc <z_set_prio+0x128>)
   2b222:	482a      	ldr	r0, [pc, #168]	; (2b2cc <z_set_prio+0x118>)
   2b224:	f240 33b5 	movw	r3, #949	; 0x3b5
   2b228:	4a2d      	ldr	r2, [pc, #180]	; (2b2e0 <z_set_prio+0x12c>)
   2b22a:	f002 fdad 	bl	2dd88 <printk>
   2b22e:	f240 31b5 	movw	r1, #949	; 0x3b5
   2b232:	482b      	ldr	r0, [pc, #172]	; (2b2e0 <z_set_prio+0x12c>)
   2b234:	f003 f88e 	bl	2e354 <assert_post_action>
	return list->head == list;
   2b238:	492a      	ldr	r1, [pc, #168]	; (2b2e4 <z_set_prio+0x130>)
   2b23a:	460b      	mov	r3, r1
   2b23c:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b240:	4298      	cmp	r0, r3
   2b242:	bf18      	it	ne
   2b244:	4605      	movne	r5, r0
   2b246:	2d00      	cmp	r5, #0
   2b248:	461a      	mov	r2, r3
   2b24a:	462b      	mov	r3, r5
   2b24c:	bf38      	it	cc
   2b24e:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b250:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b252:	b36b      	cbz	r3, 2b2b0 <z_set_prio+0xfc>
	int32_t b1 = thread_1->base.prio;
   2b254:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2b258:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2b25c:	4286      	cmp	r6, r0
   2b25e:	d023      	beq.n	2b2a8 <z_set_prio+0xf4>
		return b2 - b1;
   2b260:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2b262:	2800      	cmp	r0, #0
   2b264:	dd20      	ble.n	2b2a8 <z_set_prio+0xf4>
	sys_dnode_t *const prev = successor->prev;
   2b266:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2b268:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2b26c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2b26e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2b270:	2001      	movs	r0, #1
   2b272:	f7ff fb79 	bl	2a968 <update_cache>
   2b276:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b278:	4811      	ldr	r0, [pc, #68]	; (2b2c0 <z_set_prio+0x10c>)
   2b27a:	f7fd fe89 	bl	28f90 <z_spin_unlock_valid>
   2b27e:	b968      	cbnz	r0, 2b29c <z_set_prio+0xe8>
   2b280:	23ac      	movs	r3, #172	; 0xac
   2b282:	4a10      	ldr	r2, [pc, #64]	; (2b2c4 <z_set_prio+0x110>)
   2b284:	4918      	ldr	r1, [pc, #96]	; (2b2e8 <z_set_prio+0x134>)
   2b286:	4811      	ldr	r0, [pc, #68]	; (2b2cc <z_set_prio+0x118>)
   2b288:	f002 fd7e 	bl	2dd88 <printk>
   2b28c:	490c      	ldr	r1, [pc, #48]	; (2b2c0 <z_set_prio+0x10c>)
   2b28e:	4817      	ldr	r0, [pc, #92]	; (2b2ec <z_set_prio+0x138>)
   2b290:	f002 fd7a 	bl	2dd88 <printk>
   2b294:	21ac      	movs	r1, #172	; 0xac
   2b296:	480b      	ldr	r0, [pc, #44]	; (2b2c4 <z_set_prio+0x110>)
   2b298:	f003 f85c 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2b29c:	f387 8811 	msr	BASEPRI, r7
   2b2a0:	f3bf 8f6f 	isb	sy
}
   2b2a4:	4620      	mov	r0, r4
   2b2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2b2a8:	42ab      	cmp	r3, r5
   2b2aa:	d001      	beq.n	2b2b0 <z_set_prio+0xfc>
   2b2ac:	681b      	ldr	r3, [r3, #0]
   2b2ae:	e7d0      	b.n	2b252 <z_set_prio+0x9e>
	node->prev = tail;
   2b2b0:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2b2b4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2b2b6:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   2b2b8:	e7da      	b.n	2b270 <z_set_prio+0xbc>
			thread->base.prio = prio;
   2b2ba:	73a6      	strb	r6, [r4, #14]
   2b2bc:	2400      	movs	r4, #0
   2b2be:	e7db      	b.n	2b278 <z_set_prio+0xc4>
   2b2c0:	20016bbc 	.word	0x20016bbc
   2b2c4:	00037fec 	.word	0x00037fec
   2b2c8:	0003803e 	.word	0x0003803e
   2b2cc:	00037f2c 	.word	0x00037f2c
   2b2d0:	00038053 	.word	0x00038053
   2b2d4:	20016b9c 	.word	0x20016b9c
   2b2d8:	20015cf0 	.word	0x20015cf0
   2b2dc:	0003e4c7 	.word	0x0003e4c7
   2b2e0:	0003e4a5 	.word	0x0003e4a5
   2b2e4:	20016b74 	.word	0x20016b74
   2b2e8:	00038012 	.word	0x00038012
   2b2ec:	00038029 	.word	0x00038029

0002b2f0 <z_unpend1_no_timeout>:
{
   2b2f0:	b538      	push	{r3, r4, r5, lr}
   2b2f2:	4604      	mov	r4, r0
	__asm__ volatile(
   2b2f4:	f04f 0320 	mov.w	r3, #32
   2b2f8:	f3ef 8511 	mrs	r5, BASEPRI
   2b2fc:	f383 8811 	msr	BASEPRI, r3
   2b300:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b304:	4819      	ldr	r0, [pc, #100]	; (2b36c <z_unpend1_no_timeout+0x7c>)
   2b306:	f7fd fe35 	bl	28f74 <z_spin_lock_valid>
   2b30a:	b968      	cbnz	r0, 2b328 <z_unpend1_no_timeout+0x38>
   2b30c:	2381      	movs	r3, #129	; 0x81
   2b30e:	4a18      	ldr	r2, [pc, #96]	; (2b370 <z_unpend1_no_timeout+0x80>)
   2b310:	4918      	ldr	r1, [pc, #96]	; (2b374 <z_unpend1_no_timeout+0x84>)
   2b312:	4819      	ldr	r0, [pc, #100]	; (2b378 <z_unpend1_no_timeout+0x88>)
   2b314:	f002 fd38 	bl	2dd88 <printk>
   2b318:	4914      	ldr	r1, [pc, #80]	; (2b36c <z_unpend1_no_timeout+0x7c>)
   2b31a:	4818      	ldr	r0, [pc, #96]	; (2b37c <z_unpend1_no_timeout+0x8c>)
   2b31c:	f002 fd34 	bl	2dd88 <printk>
   2b320:	2181      	movs	r1, #129	; 0x81
   2b322:	4813      	ldr	r0, [pc, #76]	; (2b370 <z_unpend1_no_timeout+0x80>)
   2b324:	f003 f816 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b328:	4810      	ldr	r0, [pc, #64]	; (2b36c <z_unpend1_no_timeout+0x7c>)
   2b32a:	f7fd fe3f 	bl	28fac <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2b32e:	4620      	mov	r0, r4
   2b330:	f00a f82f 	bl	35392 <z_priq_dumb_best>
		if (thread != NULL) {
   2b334:	4604      	mov	r4, r0
   2b336:	b108      	cbz	r0, 2b33c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2b338:	f7ff faa8 	bl	2a88c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b33c:	480b      	ldr	r0, [pc, #44]	; (2b36c <z_unpend1_no_timeout+0x7c>)
   2b33e:	f7fd fe27 	bl	28f90 <z_spin_unlock_valid>
   2b342:	b968      	cbnz	r0, 2b360 <z_unpend1_no_timeout+0x70>
   2b344:	23ac      	movs	r3, #172	; 0xac
   2b346:	4a0a      	ldr	r2, [pc, #40]	; (2b370 <z_unpend1_no_timeout+0x80>)
   2b348:	490d      	ldr	r1, [pc, #52]	; (2b380 <z_unpend1_no_timeout+0x90>)
   2b34a:	480b      	ldr	r0, [pc, #44]	; (2b378 <z_unpend1_no_timeout+0x88>)
   2b34c:	f002 fd1c 	bl	2dd88 <printk>
   2b350:	4906      	ldr	r1, [pc, #24]	; (2b36c <z_unpend1_no_timeout+0x7c>)
   2b352:	480c      	ldr	r0, [pc, #48]	; (2b384 <z_unpend1_no_timeout+0x94>)
   2b354:	f002 fd18 	bl	2dd88 <printk>
   2b358:	21ac      	movs	r1, #172	; 0xac
   2b35a:	4805      	ldr	r0, [pc, #20]	; (2b370 <z_unpend1_no_timeout+0x80>)
   2b35c:	f002 fffa 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2b360:	f385 8811 	msr	BASEPRI, r5
   2b364:	f3bf 8f6f 	isb	sy
}
   2b368:	4620      	mov	r0, r4
   2b36a:	bd38      	pop	{r3, r4, r5, pc}
   2b36c:	20016bbc 	.word	0x20016bbc
   2b370:	00037fec 	.word	0x00037fec
   2b374:	0003803e 	.word	0x0003803e
   2b378:	00037f2c 	.word	0x00037f2c
   2b37c:	00038053 	.word	0x00038053
   2b380:	00038012 	.word	0x00038012
   2b384:	00038029 	.word	0x00038029

0002b388 <z_unpend_first_thread>:
{
   2b388:	b538      	push	{r3, r4, r5, lr}
   2b38a:	4604      	mov	r4, r0
	__asm__ volatile(
   2b38c:	f04f 0320 	mov.w	r3, #32
   2b390:	f3ef 8511 	mrs	r5, BASEPRI
   2b394:	f383 8811 	msr	BASEPRI, r3
   2b398:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b39c:	481b      	ldr	r0, [pc, #108]	; (2b40c <z_unpend_first_thread+0x84>)
   2b39e:	f7fd fde9 	bl	28f74 <z_spin_lock_valid>
   2b3a2:	b968      	cbnz	r0, 2b3c0 <z_unpend_first_thread+0x38>
   2b3a4:	2381      	movs	r3, #129	; 0x81
   2b3a6:	4a1a      	ldr	r2, [pc, #104]	; (2b410 <z_unpend_first_thread+0x88>)
   2b3a8:	491a      	ldr	r1, [pc, #104]	; (2b414 <z_unpend_first_thread+0x8c>)
   2b3aa:	481b      	ldr	r0, [pc, #108]	; (2b418 <z_unpend_first_thread+0x90>)
   2b3ac:	f002 fcec 	bl	2dd88 <printk>
   2b3b0:	4916      	ldr	r1, [pc, #88]	; (2b40c <z_unpend_first_thread+0x84>)
   2b3b2:	481a      	ldr	r0, [pc, #104]	; (2b41c <z_unpend_first_thread+0x94>)
   2b3b4:	f002 fce8 	bl	2dd88 <printk>
   2b3b8:	2181      	movs	r1, #129	; 0x81
   2b3ba:	4815      	ldr	r0, [pc, #84]	; (2b410 <z_unpend_first_thread+0x88>)
   2b3bc:	f002 ffca 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b3c0:	4812      	ldr	r0, [pc, #72]	; (2b40c <z_unpend_first_thread+0x84>)
   2b3c2:	f7fd fdf3 	bl	28fac <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2b3c6:	4620      	mov	r0, r4
   2b3c8:	f009 ffe3 	bl	35392 <z_priq_dumb_best>
		if (thread != NULL) {
   2b3cc:	4604      	mov	r4, r0
   2b3ce:	b128      	cbz	r0, 2b3dc <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   2b3d0:	f7ff fa5c 	bl	2a88c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2b3d4:	f104 0018 	add.w	r0, r4, #24
   2b3d8:	f000 fc2c 	bl	2bc34 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b3dc:	480b      	ldr	r0, [pc, #44]	; (2b40c <z_unpend_first_thread+0x84>)
   2b3de:	f7fd fdd7 	bl	28f90 <z_spin_unlock_valid>
   2b3e2:	b968      	cbnz	r0, 2b400 <z_unpend_first_thread+0x78>
   2b3e4:	23ac      	movs	r3, #172	; 0xac
   2b3e6:	4a0a      	ldr	r2, [pc, #40]	; (2b410 <z_unpend_first_thread+0x88>)
   2b3e8:	490d      	ldr	r1, [pc, #52]	; (2b420 <z_unpend_first_thread+0x98>)
   2b3ea:	480b      	ldr	r0, [pc, #44]	; (2b418 <z_unpend_first_thread+0x90>)
   2b3ec:	f002 fccc 	bl	2dd88 <printk>
   2b3f0:	4906      	ldr	r1, [pc, #24]	; (2b40c <z_unpend_first_thread+0x84>)
   2b3f2:	480c      	ldr	r0, [pc, #48]	; (2b424 <z_unpend_first_thread+0x9c>)
   2b3f4:	f002 fcc8 	bl	2dd88 <printk>
   2b3f8:	21ac      	movs	r1, #172	; 0xac
   2b3fa:	4805      	ldr	r0, [pc, #20]	; (2b410 <z_unpend_first_thread+0x88>)
   2b3fc:	f002 ffaa 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2b400:	f385 8811 	msr	BASEPRI, r5
   2b404:	f3bf 8f6f 	isb	sy
}
   2b408:	4620      	mov	r0, r4
   2b40a:	bd38      	pop	{r3, r4, r5, pc}
   2b40c:	20016bbc 	.word	0x20016bbc
   2b410:	00037fec 	.word	0x00037fec
   2b414:	0003803e 	.word	0x0003803e
   2b418:	00037f2c 	.word	0x00037f2c
   2b41c:	00038053 	.word	0x00038053
   2b420:	00038012 	.word	0x00038012
   2b424:	00038029 	.word	0x00038029

0002b428 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2b428:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2b42a:	4b04      	ldr	r3, [pc, #16]	; (2b43c <z_sched_init+0x14>)
   2b42c:	4608      	mov	r0, r1
   2b42e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2b432:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2b436:	f7ff b8a1 	b.w	2a57c <k_sched_time_slice_set>
   2b43a:	bf00      	nop
   2b43c:	20016b74 	.word	0x20016b74

0002b440 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b442:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2b446:	b173      	cbz	r3, 2b466 <z_impl_k_yield+0x26>
   2b448:	4947      	ldr	r1, [pc, #284]	; (2b568 <z_impl_k_yield+0x128>)
   2b44a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   2b44e:	4a47      	ldr	r2, [pc, #284]	; (2b56c <z_impl_k_yield+0x12c>)
   2b450:	4847      	ldr	r0, [pc, #284]	; (2b570 <z_impl_k_yield+0x130>)
   2b452:	f002 fc99 	bl	2dd88 <printk>
   2b456:	4847      	ldr	r0, [pc, #284]	; (2b574 <z_impl_k_yield+0x134>)
   2b458:	f002 fc96 	bl	2dd88 <printk>
   2b45c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   2b460:	4842      	ldr	r0, [pc, #264]	; (2b56c <z_impl_k_yield+0x12c>)
   2b462:	f002 ff77 	bl	2e354 <assert_post_action>

	SYS_PORT_TRACING_FUNC(k_thread, yield);

	if (!z_is_idle_thread_object(_current)) {
   2b466:	4d44      	ldr	r5, [pc, #272]	; (2b578 <z_impl_k_yield+0x138>)
   2b468:	4e44      	ldr	r6, [pc, #272]	; (2b57c <z_impl_k_yield+0x13c>)
   2b46a:	68ab      	ldr	r3, [r5, #8]
   2b46c:	42b3      	cmp	r3, r6
   2b46e:	d072      	beq.n	2b556 <z_impl_k_yield+0x116>
	__asm__ volatile(
   2b470:	f04f 0320 	mov.w	r3, #32
   2b474:	f3ef 8711 	mrs	r7, BASEPRI
   2b478:	f383 8811 	msr	BASEPRI, r3
   2b47c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b480:	483f      	ldr	r0, [pc, #252]	; (2b580 <z_impl_k_yield+0x140>)
   2b482:	f7fd fd77 	bl	28f74 <z_spin_lock_valid>
   2b486:	b968      	cbnz	r0, 2b4a4 <z_impl_k_yield+0x64>
   2b488:	2381      	movs	r3, #129	; 0x81
   2b48a:	4a3e      	ldr	r2, [pc, #248]	; (2b584 <z_impl_k_yield+0x144>)
   2b48c:	493e      	ldr	r1, [pc, #248]	; (2b588 <z_impl_k_yield+0x148>)
   2b48e:	4838      	ldr	r0, [pc, #224]	; (2b570 <z_impl_k_yield+0x130>)
   2b490:	f002 fc7a 	bl	2dd88 <printk>
   2b494:	493a      	ldr	r1, [pc, #232]	; (2b580 <z_impl_k_yield+0x140>)
   2b496:	483d      	ldr	r0, [pc, #244]	; (2b58c <z_impl_k_yield+0x14c>)
   2b498:	f002 fc76 	bl	2dd88 <printk>
   2b49c:	2181      	movs	r1, #129	; 0x81
   2b49e:	4839      	ldr	r0, [pc, #228]	; (2b584 <z_impl_k_yield+0x144>)
   2b4a0:	f002 ff58 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b4a4:	4836      	ldr	r0, [pc, #216]	; (2b580 <z_impl_k_yield+0x140>)
   2b4a6:	f7fd fd81 	bl	28fac <z_spin_lock_set_owner>
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
   2b4aa:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
   2b4ac:	4838      	ldr	r0, [pc, #224]	; (2b590 <z_impl_k_yield+0x150>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b4ae:	7b4b      	ldrb	r3, [r1, #13]
   2b4b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2b4b4:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   2b4b6:	f7ff f9c7 	bl	2a848 <z_priq_dumb_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
   2b4ba:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2b4bc:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2b4be:	42b4      	cmp	r4, r6
	thread->base.thread_state |= _THREAD_QUEUED;
   2b4c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2b4c4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2b4c6:	d10b      	bne.n	2b4e0 <z_impl_k_yield+0xa0>
   2b4c8:	4932      	ldr	r1, [pc, #200]	; (2b594 <z_impl_k_yield+0x154>)
   2b4ca:	4829      	ldr	r0, [pc, #164]	; (2b570 <z_impl_k_yield+0x130>)
   2b4cc:	f240 33b5 	movw	r3, #949	; 0x3b5
   2b4d0:	4a26      	ldr	r2, [pc, #152]	; (2b56c <z_impl_k_yield+0x12c>)
   2b4d2:	f002 fc59 	bl	2dd88 <printk>
   2b4d6:	f240 31b5 	movw	r1, #949	; 0x3b5
   2b4da:	4824      	ldr	r0, [pc, #144]	; (2b56c <z_impl_k_yield+0x12c>)
   2b4dc:	f002 ff3a 	bl	2e354 <assert_post_action>
	return list->head == list;
   2b4e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b4e2:	482b      	ldr	r0, [pc, #172]	; (2b590 <z_impl_k_yield+0x150>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b4e4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b4e6:	4283      	cmp	r3, r0
   2b4e8:	bf08      	it	eq
   2b4ea:	2300      	moveq	r3, #0
   2b4ec:	2b00      	cmp	r3, #0
   2b4ee:	bf38      	it	cc
   2b4f0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b4f2:	b35b      	cbz	r3, 2b54c <z_impl_k_yield+0x10c>
	int32_t b1 = thread_1->base.prio;
   2b4f4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2b4f8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2b4fc:	4296      	cmp	r6, r2
   2b4fe:	d021      	beq.n	2b544 <z_impl_k_yield+0x104>
		return b2 - b1;
   2b500:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2b502:	2a00      	cmp	r2, #0
   2b504:	dd1e      	ble.n	2b544 <z_impl_k_yield+0x104>
	sys_dnode_t *const prev = successor->prev;
   2b506:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2b508:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2b50c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2b50e:	605c      	str	r4, [r3, #4]
		update_cache(1);
   2b510:	2001      	movs	r0, #1
   2b512:	f7ff fa29 	bl	2a968 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b516:	481a      	ldr	r0, [pc, #104]	; (2b580 <z_impl_k_yield+0x140>)
   2b518:	f7fd fd3a 	bl	28f90 <z_spin_unlock_valid>
   2b51c:	b968      	cbnz	r0, 2b53a <z_impl_k_yield+0xfa>
   2b51e:	23c3      	movs	r3, #195	; 0xc3
   2b520:	4a18      	ldr	r2, [pc, #96]	; (2b584 <z_impl_k_yield+0x144>)
   2b522:	491d      	ldr	r1, [pc, #116]	; (2b598 <z_impl_k_yield+0x158>)
   2b524:	4812      	ldr	r0, [pc, #72]	; (2b570 <z_impl_k_yield+0x130>)
   2b526:	f002 fc2f 	bl	2dd88 <printk>
   2b52a:	4915      	ldr	r1, [pc, #84]	; (2b580 <z_impl_k_yield+0x140>)
   2b52c:	481b      	ldr	r0, [pc, #108]	; (2b59c <z_impl_k_yield+0x15c>)
   2b52e:	f002 fc2b 	bl	2dd88 <printk>
   2b532:	21c3      	movs	r1, #195	; 0xc3
   2b534:	4813      	ldr	r0, [pc, #76]	; (2b584 <z_impl_k_yield+0x144>)
   2b536:	f002 ff0d 	bl	2e354 <assert_post_action>
   2b53a:	4638      	mov	r0, r7
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
   2b53c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b540:	f7eb bbe8 	b.w	16d14 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2b544:	428b      	cmp	r3, r1
   2b546:	d001      	beq.n	2b54c <z_impl_k_yield+0x10c>
   2b548:	681b      	ldr	r3, [r3, #0]
   2b54a:	e7d2      	b.n	2b4f2 <z_impl_k_yield+0xb2>
	node->prev = tail;
   2b54c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   2b550:	600c      	str	r4, [r1, #0]
	list->tail = node;
   2b552:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   2b554:	e7dc      	b.n	2b510 <z_impl_k_yield+0xd0>
   2b556:	f04f 0320 	mov.w	r3, #32
   2b55a:	f3ef 8011 	mrs	r0, BASEPRI
   2b55e:	f383 8811 	msr	BASEPRI, r3
   2b562:	f3bf 8f6f 	isb	sy
   2b566:	e7e9      	b.n	2b53c <z_impl_k_yield+0xfc>
   2b568:	0003e204 	.word	0x0003e204
   2b56c:	0003e4a5 	.word	0x0003e4a5
   2b570:	00037f2c 	.word	0x00037f2c
   2b574:	000385b8 	.word	0x000385b8
   2b578:	20016b74 	.word	0x20016b74
   2b57c:	20015cf0 	.word	0x20015cf0
   2b580:	20016bbc 	.word	0x20016bbc
   2b584:	00037fec 	.word	0x00037fec
   2b588:	0003803e 	.word	0x0003803e
   2b58c:	00038053 	.word	0x00038053
   2b590:	20016b9c 	.word	0x20016b9c
   2b594:	0003e4c7 	.word	0x0003e4c7
   2b598:	00038012 	.word	0x00038012
   2b59c:	00038029 	.word	0x00038029

0002b5a0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   2b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5a4:	4606      	mov	r6, r0
   2b5a6:	460f      	mov	r7, r1
   2b5a8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2b5ac:	b173      	cbz	r3, 2b5cc <z_tick_sleep+0x2c>
   2b5ae:	493e      	ldr	r1, [pc, #248]	; (2b6a8 <z_tick_sleep+0x108>)
   2b5b0:	f240 43d1 	movw	r3, #1233	; 0x4d1
   2b5b4:	4a3d      	ldr	r2, [pc, #244]	; (2b6ac <z_tick_sleep+0x10c>)
   2b5b6:	483e      	ldr	r0, [pc, #248]	; (2b6b0 <z_tick_sleep+0x110>)
   2b5b8:	f002 fbe6 	bl	2dd88 <printk>
   2b5bc:	483d      	ldr	r0, [pc, #244]	; (2b6b4 <z_tick_sleep+0x114>)
   2b5be:	f002 fbe3 	bl	2dd88 <printk>
   2b5c2:	f240 41d1 	movw	r1, #1233	; 0x4d1
   2b5c6:	4839      	ldr	r0, [pc, #228]	; (2b6ac <z_tick_sleep+0x10c>)
   2b5c8:	f002 fec4 	bl	2e354 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2b5cc:	ea56 0307 	orrs.w	r3, r6, r7
   2b5d0:	d104      	bne.n	2b5dc <z_tick_sleep+0x3c>
	z_impl_k_yield();
   2b5d2:	f7ff ff35 	bl	2b440 <z_impl_k_yield>
		k_yield();
		return 0;
   2b5d6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   2b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2b5dc:	f009 fef3 	bl	353c6 <sys_clock_tick_get_32>
   2b5e0:	1984      	adds	r4, r0, r6
   2b5e2:	f04f 0320 	mov.w	r3, #32
   2b5e6:	f3ef 8811 	mrs	r8, BASEPRI
   2b5ea:	f383 8811 	msr	BASEPRI, r3
   2b5ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b5f2:	4831      	ldr	r0, [pc, #196]	; (2b6b8 <z_tick_sleep+0x118>)
   2b5f4:	f7fd fcbe 	bl	28f74 <z_spin_lock_valid>
   2b5f8:	b968      	cbnz	r0, 2b616 <z_tick_sleep+0x76>
   2b5fa:	2381      	movs	r3, #129	; 0x81
   2b5fc:	4a2f      	ldr	r2, [pc, #188]	; (2b6bc <z_tick_sleep+0x11c>)
   2b5fe:	4930      	ldr	r1, [pc, #192]	; (2b6c0 <z_tick_sleep+0x120>)
   2b600:	482b      	ldr	r0, [pc, #172]	; (2b6b0 <z_tick_sleep+0x110>)
   2b602:	f002 fbc1 	bl	2dd88 <printk>
   2b606:	492c      	ldr	r1, [pc, #176]	; (2b6b8 <z_tick_sleep+0x118>)
   2b608:	482e      	ldr	r0, [pc, #184]	; (2b6c4 <z_tick_sleep+0x124>)
   2b60a:	f002 fbbd 	bl	2dd88 <printk>
   2b60e:	2181      	movs	r1, #129	; 0x81
   2b610:	482a      	ldr	r0, [pc, #168]	; (2b6bc <z_tick_sleep+0x11c>)
   2b612:	f002 fe9f 	bl	2e354 <assert_post_action>
	pending_current = _current;
   2b616:	4d2c      	ldr	r5, [pc, #176]	; (2b6c8 <z_tick_sleep+0x128>)
	z_spin_lock_set_owner(l);
   2b618:	4827      	ldr	r0, [pc, #156]	; (2b6b8 <z_tick_sleep+0x118>)
   2b61a:	f7fd fcc7 	bl	28fac <z_spin_lock_set_owner>
   2b61e:	68a8      	ldr	r0, [r5, #8]
   2b620:	4b2a      	ldr	r3, [pc, #168]	; (2b6cc <z_tick_sleep+0x12c>)
   2b622:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2b624:	f7ff f9d8 	bl	2a9d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2b628:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2b62a:	4632      	mov	r2, r6
   2b62c:	463b      	mov	r3, r7
   2b62e:	3018      	adds	r0, #24
   2b630:	4927      	ldr	r1, [pc, #156]	; (2b6d0 <z_tick_sleep+0x130>)
   2b632:	f000 fa2b 	bl	2ba8c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2b636:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b638:	481f      	ldr	r0, [pc, #124]	; (2b6b8 <z_tick_sleep+0x118>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2b63a:	7b53      	ldrb	r3, [r2, #13]
   2b63c:	f043 0310 	orr.w	r3, r3, #16
   2b640:	7353      	strb	r3, [r2, #13]
   2b642:	f7fd fca5 	bl	28f90 <z_spin_unlock_valid>
   2b646:	b968      	cbnz	r0, 2b664 <z_tick_sleep+0xc4>
   2b648:	23c3      	movs	r3, #195	; 0xc3
   2b64a:	4a1c      	ldr	r2, [pc, #112]	; (2b6bc <z_tick_sleep+0x11c>)
   2b64c:	4921      	ldr	r1, [pc, #132]	; (2b6d4 <z_tick_sleep+0x134>)
   2b64e:	4818      	ldr	r0, [pc, #96]	; (2b6b0 <z_tick_sleep+0x110>)
   2b650:	f002 fb9a 	bl	2dd88 <printk>
   2b654:	4918      	ldr	r1, [pc, #96]	; (2b6b8 <z_tick_sleep+0x118>)
   2b656:	4820      	ldr	r0, [pc, #128]	; (2b6d8 <z_tick_sleep+0x138>)
   2b658:	f002 fb96 	bl	2dd88 <printk>
   2b65c:	21c3      	movs	r1, #195	; 0xc3
   2b65e:	4817      	ldr	r0, [pc, #92]	; (2b6bc <z_tick_sleep+0x11c>)
   2b660:	f002 fe78 	bl	2e354 <assert_post_action>
   2b664:	4640      	mov	r0, r8
   2b666:	f7eb fb55 	bl	16d14 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2b66a:	68ab      	ldr	r3, [r5, #8]
   2b66c:	7b5b      	ldrb	r3, [r3, #13]
   2b66e:	06db      	lsls	r3, r3, #27
   2b670:	d50e      	bpl.n	2b690 <z_tick_sleep+0xf0>
   2b672:	491a      	ldr	r1, [pc, #104]	; (2b6dc <z_tick_sleep+0x13c>)
   2b674:	f240 43ef 	movw	r3, #1263	; 0x4ef
   2b678:	4a0c      	ldr	r2, [pc, #48]	; (2b6ac <z_tick_sleep+0x10c>)
   2b67a:	480d      	ldr	r0, [pc, #52]	; (2b6b0 <z_tick_sleep+0x110>)
   2b67c:	f002 fb84 	bl	2dd88 <printk>
   2b680:	480c      	ldr	r0, [pc, #48]	; (2b6b4 <z_tick_sleep+0x114>)
   2b682:	f002 fb81 	bl	2dd88 <printk>
   2b686:	f240 41ef 	movw	r1, #1263	; 0x4ef
   2b68a:	4808      	ldr	r0, [pc, #32]	; (2b6ac <z_tick_sleep+0x10c>)
   2b68c:	f002 fe62 	bl	2e354 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2b690:	f009 fe99 	bl	353c6 <sys_clock_tick_get_32>
   2b694:	1a20      	subs	r0, r4, r0
   2b696:	eb64 0104 	sbc.w	r1, r4, r4
   2b69a:	2800      	cmp	r0, #0
   2b69c:	f171 0300 	sbcs.w	r3, r1, #0
   2b6a0:	bfb8      	it	lt
   2b6a2:	2000      	movlt	r0, #0
   2b6a4:	e798      	b.n	2b5d8 <z_tick_sleep+0x38>
   2b6a6:	bf00      	nop
   2b6a8:	0003e204 	.word	0x0003e204
   2b6ac:	0003e4a5 	.word	0x0003e4a5
   2b6b0:	00037f2c 	.word	0x00037f2c
   2b6b4:	000385b8 	.word	0x000385b8
   2b6b8:	20016bbc 	.word	0x20016bbc
   2b6bc:	00037fec 	.word	0x00037fec
   2b6c0:	0003803e 	.word	0x0003803e
   2b6c4:	00038053 	.word	0x00038053
   2b6c8:	20016b74 	.word	0x20016b74
   2b6cc:	20016bb8 	.word	0x20016bb8
   2b6d0:	0002b101 	.word	0x0002b101
   2b6d4:	00038012 	.word	0x00038012
   2b6d8:	00038029 	.word	0x00038029
   2b6dc:	0003e557 	.word	0x0003e557

0002b6e0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2b6e0:	b538      	push	{r3, r4, r5, lr}
   2b6e2:	4604      	mov	r4, r0
   2b6e4:	460d      	mov	r5, r1
   2b6e6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2b6ea:	b173      	cbz	r3, 2b70a <z_impl_k_sleep+0x2a>
   2b6ec:	4913      	ldr	r1, [pc, #76]	; (2b73c <z_impl_k_sleep+0x5c>)
   2b6ee:	f240 43fe 	movw	r3, #1278	; 0x4fe
   2b6f2:	4a13      	ldr	r2, [pc, #76]	; (2b740 <z_impl_k_sleep+0x60>)
   2b6f4:	4813      	ldr	r0, [pc, #76]	; (2b744 <z_impl_k_sleep+0x64>)
   2b6f6:	f002 fb47 	bl	2dd88 <printk>
   2b6fa:	4813      	ldr	r0, [pc, #76]	; (2b748 <z_impl_k_sleep+0x68>)
   2b6fc:	f002 fb44 	bl	2dd88 <printk>
   2b700:	f240 41fe 	movw	r1, #1278	; 0x4fe
   2b704:	480e      	ldr	r0, [pc, #56]	; (2b740 <z_impl_k_sleep+0x60>)
   2b706:	f002 fe25 	bl	2e354 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b70a:	1c6b      	adds	r3, r5, #1
   2b70c:	bf08      	it	eq
   2b70e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2b712:	d106      	bne.n	2b722 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   2b714:	4b0d      	ldr	r3, [pc, #52]	; (2b74c <z_impl_k_sleep+0x6c>)
   2b716:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2b718:	f7ff fa4c 	bl	2abb4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2b71c:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2b720:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   2b722:	4620      	mov	r0, r4
   2b724:	4629      	mov	r1, r5
   2b726:	f7ff ff3b 	bl	2b5a0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   2b72a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2b72e:	fb80 3403 	smull	r3, r4, r0, r3
   2b732:	0bd8      	lsrs	r0, r3, #15
   2b734:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   2b738:	e7f2      	b.n	2b720 <z_impl_k_sleep+0x40>
   2b73a:	bf00      	nop
   2b73c:	0003e204 	.word	0x0003e204
   2b740:	0003e4a5 	.word	0x0003e4a5
   2b744:	00037f2c 	.word	0x00037f2c
   2b748:	000385b8 	.word	0x000385b8
   2b74c:	20016b74 	.word	0x20016b74

0002b750 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2b750:	4b01      	ldr	r3, [pc, #4]	; (2b758 <z_impl_k_current_get+0x8>)
   2b752:	6898      	ldr	r0, [r3, #8]
   2b754:	4770      	bx	lr
   2b756:	bf00      	nop
   2b758:	20016b74 	.word	0x20016b74

0002b75c <z_impl_k_is_preempt_thread>:
   2b75c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   2b760:	b93b      	cbnz	r3, 2b772 <z_impl_k_is_preempt_thread+0x16>
   2b762:	4b05      	ldr	r3, [pc, #20]	; (2b778 <z_impl_k_is_preempt_thread+0x1c>)
   2b764:	689b      	ldr	r3, [r3, #8]
   2b766:	89d8      	ldrh	r0, [r3, #14]
   2b768:	287f      	cmp	r0, #127	; 0x7f
   2b76a:	bf8c      	ite	hi
   2b76c:	2000      	movhi	r0, #0
   2b76e:	2001      	movls	r0, #1
   2b770:	4770      	bx	lr
   2b772:	2000      	movs	r0, #0
}
   2b774:	4770      	bx	lr
   2b776:	bf00      	nop
   2b778:	20016b74 	.word	0x20016b74

0002b77c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b780:	4604      	mov	r4, r0
   2b782:	f04f 0320 	mov.w	r3, #32
   2b786:	f3ef 8611 	mrs	r6, BASEPRI
   2b78a:	f383 8811 	msr	BASEPRI, r3
   2b78e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b792:	4848      	ldr	r0, [pc, #288]	; (2b8b4 <z_thread_abort+0x138>)
   2b794:	f7fd fbee 	bl	28f74 <z_spin_lock_valid>
   2b798:	b968      	cbnz	r0, 2b7b6 <z_thread_abort+0x3a>
   2b79a:	2381      	movs	r3, #129	; 0x81
   2b79c:	4a46      	ldr	r2, [pc, #280]	; (2b8b8 <z_thread_abort+0x13c>)
   2b79e:	4947      	ldr	r1, [pc, #284]	; (2b8bc <z_thread_abort+0x140>)
   2b7a0:	4847      	ldr	r0, [pc, #284]	; (2b8c0 <z_thread_abort+0x144>)
   2b7a2:	f002 faf1 	bl	2dd88 <printk>
   2b7a6:	4943      	ldr	r1, [pc, #268]	; (2b8b4 <z_thread_abort+0x138>)
   2b7a8:	4846      	ldr	r0, [pc, #280]	; (2b8c4 <z_thread_abort+0x148>)
   2b7aa:	f002 faed 	bl	2dd88 <printk>
   2b7ae:	2181      	movs	r1, #129	; 0x81
   2b7b0:	4841      	ldr	r0, [pc, #260]	; (2b8b8 <z_thread_abort+0x13c>)
   2b7b2:	f002 fdcf 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b7b6:	483f      	ldr	r0, [pc, #252]	; (2b8b4 <z_thread_abort+0x138>)
   2b7b8:	f7fd fbf8 	bl	28fac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2b7bc:	7b63      	ldrb	r3, [r4, #13]
   2b7be:	071a      	lsls	r2, r3, #28
   2b7c0:	d517      	bpl.n	2b7f2 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b7c2:	483c      	ldr	r0, [pc, #240]	; (2b8b4 <z_thread_abort+0x138>)
   2b7c4:	f7fd fbe4 	bl	28f90 <z_spin_unlock_valid>
   2b7c8:	b968      	cbnz	r0, 2b7e6 <z_thread_abort+0x6a>
   2b7ca:	23ac      	movs	r3, #172	; 0xac
   2b7cc:	4a3a      	ldr	r2, [pc, #232]	; (2b8b8 <z_thread_abort+0x13c>)
   2b7ce:	493e      	ldr	r1, [pc, #248]	; (2b8c8 <z_thread_abort+0x14c>)
   2b7d0:	483b      	ldr	r0, [pc, #236]	; (2b8c0 <z_thread_abort+0x144>)
   2b7d2:	f002 fad9 	bl	2dd88 <printk>
   2b7d6:	4937      	ldr	r1, [pc, #220]	; (2b8b4 <z_thread_abort+0x138>)
   2b7d8:	483c      	ldr	r0, [pc, #240]	; (2b8cc <z_thread_abort+0x150>)
   2b7da:	f002 fad5 	bl	2dd88 <printk>
   2b7de:	21ac      	movs	r1, #172	; 0xac
   2b7e0:	4835      	ldr	r0, [pc, #212]	; (2b8b8 <z_thread_abort+0x13c>)
   2b7e2:	f002 fdb7 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2b7e6:	f386 8811 	msr	BASEPRI, r6
   2b7ea:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2b7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2b7f2:	f023 0220 	bic.w	r2, r3, #32
   2b7f6:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2b7fa:	09d2      	lsrs	r2, r2, #7
   2b7fc:	d142      	bne.n	2b884 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2b7fe:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   2b800:	68a3      	ldr	r3, [r4, #8]
   2b802:	b113      	cbz	r3, 2b80a <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   2b804:	4620      	mov	r0, r4
   2b806:	f7ff f841 	bl	2a88c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2b80a:	f104 0018 	add.w	r0, r4, #24
   2b80e:	f000 fa11 	bl	2bc34 <z_abort_timeout>
   2b812:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2b816:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   2b81a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b81c:	42bd      	cmp	r5, r7
   2b81e:	d001      	beq.n	2b824 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2b820:	2d00      	cmp	r5, #0
   2b822:	d139      	bne.n	2b898 <z_thread_abort+0x11c>
		update_cache(1);
   2b824:	2001      	movs	r0, #1
   2b826:	f7ff f89f 	bl	2a968 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2b82a:	4b29      	ldr	r3, [pc, #164]	; (2b8d0 <z_thread_abort+0x154>)
   2b82c:	689b      	ldr	r3, [r3, #8]
   2b82e:	42a3      	cmp	r3, r4
   2b830:	d1c7      	bne.n	2b7c2 <z_thread_abort+0x46>
   2b832:	f3ef 8305 	mrs	r3, IPSR
   2b836:	2b00      	cmp	r3, #0
   2b838:	d1c3      	bne.n	2b7c2 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b83a:	481e      	ldr	r0, [pc, #120]	; (2b8b4 <z_thread_abort+0x138>)
   2b83c:	f7fd fba8 	bl	28f90 <z_spin_unlock_valid>
   2b840:	b968      	cbnz	r0, 2b85e <z_thread_abort+0xe2>
   2b842:	23c3      	movs	r3, #195	; 0xc3
   2b844:	4a1c      	ldr	r2, [pc, #112]	; (2b8b8 <z_thread_abort+0x13c>)
   2b846:	4920      	ldr	r1, [pc, #128]	; (2b8c8 <z_thread_abort+0x14c>)
   2b848:	481d      	ldr	r0, [pc, #116]	; (2b8c0 <z_thread_abort+0x144>)
   2b84a:	f002 fa9d 	bl	2dd88 <printk>
   2b84e:	4919      	ldr	r1, [pc, #100]	; (2b8b4 <z_thread_abort+0x138>)
   2b850:	481e      	ldr	r0, [pc, #120]	; (2b8cc <z_thread_abort+0x150>)
   2b852:	f002 fa99 	bl	2dd88 <printk>
   2b856:	21c3      	movs	r1, #195	; 0xc3
   2b858:	4817      	ldr	r0, [pc, #92]	; (2b8b8 <z_thread_abort+0x13c>)
   2b85a:	f002 fd7b 	bl	2e354 <assert_post_action>
   2b85e:	4630      	mov	r0, r6
   2b860:	f7eb fa58 	bl	16d14 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   2b864:	f240 6311 	movw	r3, #1553	; 0x611
   2b868:	4a1a      	ldr	r2, [pc, #104]	; (2b8d4 <z_thread_abort+0x158>)
   2b86a:	491b      	ldr	r1, [pc, #108]	; (2b8d8 <z_thread_abort+0x15c>)
   2b86c:	4814      	ldr	r0, [pc, #80]	; (2b8c0 <z_thread_abort+0x144>)
   2b86e:	f002 fa8b 	bl	2dd88 <printk>
   2b872:	481a      	ldr	r0, [pc, #104]	; (2b8dc <z_thread_abort+0x160>)
   2b874:	f002 fa88 	bl	2dd88 <printk>
   2b878:	f240 6111 	movw	r1, #1553	; 0x611
   2b87c:	4815      	ldr	r0, [pc, #84]	; (2b8d4 <z_thread_abort+0x158>)
   2b87e:	f002 fd69 	bl	2e354 <assert_post_action>
   2b882:	e79e      	b.n	2b7c2 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b884:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2b888:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   2b88c:	4621      	mov	r1, r4
   2b88e:	4814      	ldr	r0, [pc, #80]	; (2b8e0 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b890:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   2b892:	f7fe ffd9 	bl	2a848 <z_priq_dumb_remove>
}
   2b896:	e7b3      	b.n	2b800 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   2b898:	4628      	mov	r0, r5
   2b89a:	f7fe fff7 	bl	2a88c <unpend_thread_no_timeout>
   2b89e:	f105 0018 	add.w	r0, r5, #24
   2b8a2:	f000 f9c7 	bl	2bc34 <z_abort_timeout>
		ready_thread(thread);
   2b8a6:	4628      	mov	r0, r5
   2b8a8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   2b8ac:	f7ff fb38 	bl	2af20 <ready_thread>
   2b8b0:	e7b3      	b.n	2b81a <z_thread_abort+0x9e>
   2b8b2:	bf00      	nop
   2b8b4:	20016bbc 	.word	0x20016bbc
   2b8b8:	00037fec 	.word	0x00037fec
   2b8bc:	0003803e 	.word	0x0003803e
   2b8c0:	00037f2c 	.word	0x00037f2c
   2b8c4:	00038053 	.word	0x00038053
   2b8c8:	00038012 	.word	0x00038012
   2b8cc:	00038029 	.word	0x00038029
   2b8d0:	20016b74 	.word	0x20016b74
   2b8d4:	0003e4a5 	.word	0x0003e4a5
   2b8d8:	0003e845 	.word	0x0003e845
   2b8dc:	0003e597 	.word	0x0003e597
   2b8e0:	20016b9c 	.word	0x20016b9c

0002b8e4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b8e6:	4604      	mov	r4, r0
   2b8e8:	460e      	mov	r6, r1
   2b8ea:	4615      	mov	r5, r2
	__asm__ volatile(
   2b8ec:	f04f 0320 	mov.w	r3, #32
   2b8f0:	f3ef 8711 	mrs	r7, BASEPRI
   2b8f4:	f383 8811 	msr	BASEPRI, r3
   2b8f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b8fc:	481e      	ldr	r0, [pc, #120]	; (2b978 <z_sched_wake+0x94>)
   2b8fe:	f7fd fb39 	bl	28f74 <z_spin_lock_valid>
   2b902:	b968      	cbnz	r0, 2b920 <z_sched_wake+0x3c>
   2b904:	2381      	movs	r3, #129	; 0x81
   2b906:	4a1d      	ldr	r2, [pc, #116]	; (2b97c <z_sched_wake+0x98>)
   2b908:	491d      	ldr	r1, [pc, #116]	; (2b980 <z_sched_wake+0x9c>)
   2b90a:	481e      	ldr	r0, [pc, #120]	; (2b984 <z_sched_wake+0xa0>)
   2b90c:	f002 fa3c 	bl	2dd88 <printk>
   2b910:	4919      	ldr	r1, [pc, #100]	; (2b978 <z_sched_wake+0x94>)
   2b912:	481d      	ldr	r0, [pc, #116]	; (2b988 <z_sched_wake+0xa4>)
   2b914:	f002 fa38 	bl	2dd88 <printk>
   2b918:	2181      	movs	r1, #129	; 0x81
   2b91a:	4818      	ldr	r0, [pc, #96]	; (2b97c <z_sched_wake+0x98>)
   2b91c:	f002 fd1a 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b920:	4815      	ldr	r0, [pc, #84]	; (2b978 <z_sched_wake+0x94>)
   2b922:	f7fd fb43 	bl	28fac <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   2b926:	4620      	mov	r0, r4
   2b928:	f009 fd33 	bl	35392 <z_priq_dumb_best>

		if (thread != NULL) {
   2b92c:	4604      	mov	r4, r0
   2b92e:	b158      	cbz	r0, 2b948 <z_sched_wake+0x64>
   2b930:	67c6      	str	r6, [r0, #124]	; 0x7c
   2b932:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   2b934:	f7fe ffaa 	bl	2a88c <unpend_thread_no_timeout>
   2b938:	f104 0018 	add.w	r0, r4, #24
   2b93c:	f000 f97a 	bl	2bc34 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   2b940:	4620      	mov	r0, r4
   2b942:	f7ff faed 	bl	2af20 <ready_thread>
			ret = true;
   2b946:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b948:	480b      	ldr	r0, [pc, #44]	; (2b978 <z_sched_wake+0x94>)
   2b94a:	f7fd fb21 	bl	28f90 <z_spin_unlock_valid>
   2b94e:	b968      	cbnz	r0, 2b96c <z_sched_wake+0x88>
   2b950:	23ac      	movs	r3, #172	; 0xac
   2b952:	4a0a      	ldr	r2, [pc, #40]	; (2b97c <z_sched_wake+0x98>)
   2b954:	490d      	ldr	r1, [pc, #52]	; (2b98c <z_sched_wake+0xa8>)
   2b956:	480b      	ldr	r0, [pc, #44]	; (2b984 <z_sched_wake+0xa0>)
   2b958:	f002 fa16 	bl	2dd88 <printk>
   2b95c:	4906      	ldr	r1, [pc, #24]	; (2b978 <z_sched_wake+0x94>)
   2b95e:	480c      	ldr	r0, [pc, #48]	; (2b990 <z_sched_wake+0xac>)
   2b960:	f002 fa12 	bl	2dd88 <printk>
   2b964:	21ac      	movs	r1, #172	; 0xac
   2b966:	4805      	ldr	r0, [pc, #20]	; (2b97c <z_sched_wake+0x98>)
   2b968:	f002 fcf4 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2b96c:	f387 8811 	msr	BASEPRI, r7
   2b970:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2b974:	4620      	mov	r0, r4
   2b976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b978:	20016bbc 	.word	0x20016bbc
   2b97c:	00037fec 	.word	0x00037fec
   2b980:	0003803e 	.word	0x0003803e
   2b984:	00037f2c 	.word	0x00037f2c
   2b988:	00038053 	.word	0x00038053
   2b98c:	00038012 	.word	0x00038012
   2b990:	00038029 	.word	0x00038029

0002b994 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2b994:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2b996:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2b99a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2b99c:	e9cd 6700 	strd	r6, r7, [sp]
   2b9a0:	f7ff f8d8 	bl	2ab54 <z_pend_curr>

	if (data != NULL) {
   2b9a4:	b11c      	cbz	r4, 2b9ae <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2b9a6:	4b03      	ldr	r3, [pc, #12]	; (2b9b4 <z_sched_wait+0x20>)
   2b9a8:	689b      	ldr	r3, [r3, #8]
   2b9aa:	695b      	ldr	r3, [r3, #20]
   2b9ac:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2b9ae:	b002      	add	sp, #8
   2b9b0:	bdd0      	pop	{r4, r6, r7, pc}
   2b9b2:	bf00      	nop
   2b9b4:	20016b74 	.word	0x20016b74

0002b9b8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   2b9b8:	b508      	push	{r3, lr}
   2b9ba:	4806      	ldr	r0, [pc, #24]	; (2b9d4 <z_data_copy+0x1c>)
   2b9bc:	4a06      	ldr	r2, [pc, #24]	; (2b9d8 <z_data_copy+0x20>)
   2b9be:	4907      	ldr	r1, [pc, #28]	; (2b9dc <z_data_copy+0x24>)
   2b9c0:	1a12      	subs	r2, r2, r0
   2b9c2:	f009 fde0 	bl	35586 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2b9c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2b9ca:	4a05      	ldr	r2, [pc, #20]	; (2b9e0 <z_data_copy+0x28>)
   2b9cc:	4905      	ldr	r1, [pc, #20]	; (2b9e4 <z_data_copy+0x2c>)
   2b9ce:	4806      	ldr	r0, [pc, #24]	; (2b9e8 <z_data_copy+0x30>)
   2b9d0:	f009 bdd9 	b.w	35586 <memcpy>
   2b9d4:	20014500 	.word	0x20014500
   2b9d8:	20015168 	.word	0x20015168
   2b9dc:	0003f0c8 	.word	0x0003f0c8
   2b9e0:	00000000 	.word	0x00000000
   2b9e4:	0003f0b0 	.word	0x0003f0b0
   2b9e8:	20014500 	.word	0x20014500

0002b9ec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2b9ec:	4b03      	ldr	r3, [pc, #12]	; (2b9fc <elapsed+0x10>)
   2b9ee:	681b      	ldr	r3, [r3, #0]
   2b9f0:	b90b      	cbnz	r3, 2b9f6 <elapsed+0xa>
   2b9f2:	f7ea be6f 	b.w	166d4 <sys_clock_elapsed>
}
   2b9f6:	2000      	movs	r0, #0
   2b9f8:	4770      	bx	lr
   2b9fa:	bf00      	nop
   2b9fc:	20016bc8 	.word	0x20016bc8

0002ba00 <next_timeout>:

static int32_t next_timeout(void)
{
   2ba00:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2ba02:	4b13      	ldr	r3, [pc, #76]	; (2ba50 <next_timeout+0x50>)
   2ba04:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ba06:	429c      	cmp	r4, r3
   2ba08:	bf08      	it	eq
   2ba0a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2ba0c:	f7ff ffee 	bl	2b9ec <elapsed>
   2ba10:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   2ba12:	b1bc      	cbz	r4, 2ba44 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2ba14:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   2ba18:	1b40      	subs	r0, r0, r5
   2ba1a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2ba1e:	2801      	cmp	r0, #1
   2ba20:	f171 0300 	sbcs.w	r3, r1, #0
   2ba24:	db11      	blt.n	2ba4a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2ba26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2ba2a:	2300      	movs	r3, #0
   2ba2c:	4282      	cmp	r2, r0
   2ba2e:	eb73 0401 	sbcs.w	r4, r3, r1
   2ba32:	da00      	bge.n	2ba36 <next_timeout+0x36>
   2ba34:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2ba36:	4b07      	ldr	r3, [pc, #28]	; (2ba54 <next_timeout+0x54>)
   2ba38:	691b      	ldr	r3, [r3, #16]
   2ba3a:	b113      	cbz	r3, 2ba42 <next_timeout+0x42>
   2ba3c:	4298      	cmp	r0, r3
   2ba3e:	bfa8      	it	ge
   2ba40:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2ba42:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   2ba44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2ba48:	e7f5      	b.n	2ba36 <next_timeout+0x36>
   2ba4a:	2000      	movs	r0, #0
   2ba4c:	e7f3      	b.n	2ba36 <next_timeout+0x36>
   2ba4e:	bf00      	nop
   2ba50:	200149bc 	.word	0x200149bc
   2ba54:	20016b74 	.word	0x20016b74

0002ba58 <remove_timeout>:
{
   2ba58:	b530      	push	{r4, r5, lr}
   2ba5a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2ba5c:	b168      	cbz	r0, 2ba7a <remove_timeout+0x22>
   2ba5e:	4a0a      	ldr	r2, [pc, #40]	; (2ba88 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   2ba60:	6852      	ldr	r2, [r2, #4]
   2ba62:	4290      	cmp	r0, r2
   2ba64:	d009      	beq.n	2ba7a <remove_timeout+0x22>
	if (next(t) != NULL) {
   2ba66:	b143      	cbz	r3, 2ba7a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2ba68:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2ba6c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2ba70:	1912      	adds	r2, r2, r4
   2ba72:	eb45 0101 	adc.w	r1, r5, r1
   2ba76:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   2ba7a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   2ba7c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ba7e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ba80:	2300      	movs	r3, #0
	node->prev = NULL;
   2ba82:	e9c0 3300 	strd	r3, r3, [r0]
}
   2ba86:	bd30      	pop	{r4, r5, pc}
   2ba88:	200149bc 	.word	0x200149bc

0002ba8c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   2ba8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba90:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ba92:	1c6b      	adds	r3, r5, #1
   2ba94:	bf08      	it	eq
   2ba96:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2ba9a:	4682      	mov	sl, r0
   2ba9c:	468b      	mov	fp, r1
   2ba9e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2baa0:	f000 80aa 	beq.w	2bbf8 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2baa4:	6803      	ldr	r3, [r0, #0]
   2baa6:	b163      	cbz	r3, 2bac2 <z_add_timeout+0x36>
   2baa8:	4955      	ldr	r1, [pc, #340]	; (2bc00 <z_add_timeout+0x174>)
   2baaa:	235d      	movs	r3, #93	; 0x5d
   2baac:	4a55      	ldr	r2, [pc, #340]	; (2bc04 <z_add_timeout+0x178>)
   2baae:	4856      	ldr	r0, [pc, #344]	; (2bc08 <z_add_timeout+0x17c>)
   2bab0:	f002 f96a 	bl	2dd88 <printk>
   2bab4:	4855      	ldr	r0, [pc, #340]	; (2bc0c <z_add_timeout+0x180>)
   2bab6:	f002 f967 	bl	2dd88 <printk>
   2baba:	215d      	movs	r1, #93	; 0x5d
   2babc:	4851      	ldr	r0, [pc, #324]	; (2bc04 <z_add_timeout+0x178>)
   2babe:	f002 fc49 	bl	2e354 <assert_post_action>
	to->fn = fn;
   2bac2:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   2bac6:	f04f 0320 	mov.w	r3, #32
   2baca:	f3ef 8b11 	mrs	fp, BASEPRI
   2bace:	f383 8811 	msr	BASEPRI, r3
   2bad2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bad6:	484e      	ldr	r0, [pc, #312]	; (2bc10 <z_add_timeout+0x184>)
   2bad8:	f7fd fa4c 	bl	28f74 <z_spin_lock_valid>
   2badc:	b968      	cbnz	r0, 2bafa <z_add_timeout+0x6e>
   2bade:	2381      	movs	r3, #129	; 0x81
   2bae0:	4a4c      	ldr	r2, [pc, #304]	; (2bc14 <z_add_timeout+0x188>)
   2bae2:	494d      	ldr	r1, [pc, #308]	; (2bc18 <z_add_timeout+0x18c>)
   2bae4:	4848      	ldr	r0, [pc, #288]	; (2bc08 <z_add_timeout+0x17c>)
   2bae6:	f002 f94f 	bl	2dd88 <printk>
   2baea:	4949      	ldr	r1, [pc, #292]	; (2bc10 <z_add_timeout+0x184>)
   2baec:	484b      	ldr	r0, [pc, #300]	; (2bc1c <z_add_timeout+0x190>)
   2baee:	f002 f94b 	bl	2dd88 <printk>
   2baf2:	2181      	movs	r1, #129	; 0x81
   2baf4:	4847      	ldr	r0, [pc, #284]	; (2bc14 <z_add_timeout+0x188>)
   2baf6:	f002 fc2d 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bafa:	4845      	ldr	r0, [pc, #276]	; (2bc10 <z_add_timeout+0x184>)
   2bafc:	f7fd fa56 	bl	28fac <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2bb00:	f06f 0301 	mvn.w	r3, #1
   2bb04:	f04f 32ff 	mov.w	r2, #4294967295
   2bb08:	ebb3 0804 	subs.w	r8, r3, r4
   2bb0c:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2bb10:	f1b8 0f00 	cmp.w	r8, #0
   2bb14:	f179 0100 	sbcs.w	r1, r9, #0
   2bb18:	db1c      	blt.n	2bb54 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2bb1a:	4841      	ldr	r0, [pc, #260]	; (2bc20 <z_add_timeout+0x194>)
   2bb1c:	e9d0 1000 	ldrd	r1, r0, [r0]
   2bb20:	1a5b      	subs	r3, r3, r1
   2bb22:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   2bb26:	1b1e      	subs	r6, r3, r4
   2bb28:	eb62 0705 	sbc.w	r7, r2, r5
   2bb2c:	2e01      	cmp	r6, #1
   2bb2e:	f177 0300 	sbcs.w	r3, r7, #0
   2bb32:	bfbc      	itt	lt
   2bb34:	2601      	movlt	r6, #1
   2bb36:	2700      	movlt	r7, #0
   2bb38:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   2bb3c:	4a39      	ldr	r2, [pc, #228]	; (2bc24 <z_add_timeout+0x198>)
   2bb3e:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bb42:	4293      	cmp	r3, r2
   2bb44:	d11d      	bne.n	2bb82 <z_add_timeout+0xf6>
	node->prev = tail;
   2bb46:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   2bb4a:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   2bb4e:	f8c2 a004 	str.w	sl, [r2, #4]
}
   2bb52:	e02c      	b.n	2bbae <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   2bb54:	f7ff ff4a 	bl	2b9ec <elapsed>
   2bb58:	1c63      	adds	r3, r4, #1
   2bb5a:	9300      	str	r3, [sp, #0]
   2bb5c:	f145 0300 	adc.w	r3, r5, #0
   2bb60:	9301      	str	r3, [sp, #4]
   2bb62:	e9dd 2300 	ldrd	r2, r3, [sp]
   2bb66:	1812      	adds	r2, r2, r0
   2bb68:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   2bb6c:	e9ca 2304 	strd	r2, r3, [sl, #16]
   2bb70:	e7e4      	b.n	2bb3c <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   2bb72:	1be0      	subs	r0, r4, r7
   2bb74:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   2bb78:	42b3      	cmp	r3, r6
   2bb7a:	e9ca 0104 	strd	r0, r1, [sl, #16]
   2bb7e:	d0e2      	beq.n	2bb46 <z_add_timeout+0xba>
   2bb80:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   2bb82:	2b00      	cmp	r3, #0
   2bb84:	d0df      	beq.n	2bb46 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   2bb86:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   2bb8a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   2bb8e:	42bc      	cmp	r4, r7
   2bb90:	eb75 0108 	sbcs.w	r1, r5, r8
   2bb94:	daed      	bge.n	2bb72 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   2bb96:	1b38      	subs	r0, r7, r4
   2bb98:	eb68 0105 	sbc.w	r1, r8, r5
   2bb9c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2bba0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2bba2:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   2bba6:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   2bbaa:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   2bbae:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bbb0:	4293      	cmp	r3, r2
   2bbb2:	d00b      	beq.n	2bbcc <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2bbb4:	459a      	cmp	sl, r3
   2bbb6:	d109      	bne.n	2bbcc <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2bbb8:	f7ff ff22 	bl	2ba00 <next_timeout>

			if (next_time == 0 ||
   2bbbc:	b118      	cbz	r0, 2bbc6 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   2bbbe:	4b1a      	ldr	r3, [pc, #104]	; (2bc28 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   2bbc0:	691b      	ldr	r3, [r3, #16]
   2bbc2:	4283      	cmp	r3, r0
   2bbc4:	d002      	beq.n	2bbcc <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   2bbc6:	2100      	movs	r1, #0
   2bbc8:	f7ea fd52 	bl	16670 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bbcc:	4810      	ldr	r0, [pc, #64]	; (2bc10 <z_add_timeout+0x184>)
   2bbce:	f7fd f9df 	bl	28f90 <z_spin_unlock_valid>
   2bbd2:	b968      	cbnz	r0, 2bbf0 <z_add_timeout+0x164>
   2bbd4:	23ac      	movs	r3, #172	; 0xac
   2bbd6:	4a0f      	ldr	r2, [pc, #60]	; (2bc14 <z_add_timeout+0x188>)
   2bbd8:	4914      	ldr	r1, [pc, #80]	; (2bc2c <z_add_timeout+0x1a0>)
   2bbda:	480b      	ldr	r0, [pc, #44]	; (2bc08 <z_add_timeout+0x17c>)
   2bbdc:	f002 f8d4 	bl	2dd88 <printk>
   2bbe0:	490b      	ldr	r1, [pc, #44]	; (2bc10 <z_add_timeout+0x184>)
   2bbe2:	4813      	ldr	r0, [pc, #76]	; (2bc30 <z_add_timeout+0x1a4>)
   2bbe4:	f002 f8d0 	bl	2dd88 <printk>
   2bbe8:	21ac      	movs	r1, #172	; 0xac
   2bbea:	480a      	ldr	r0, [pc, #40]	; (2bc14 <z_add_timeout+0x188>)
   2bbec:	f002 fbb2 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2bbf0:	f38b 8811 	msr	BASEPRI, fp
   2bbf4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2bbf8:	b003      	add	sp, #12
   2bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbfe:	bf00      	nop
   2bc00:	0003e5dd 	.word	0x0003e5dd
   2bc04:	0003e5b9 	.word	0x0003e5b9
   2bc08:	00037f2c 	.word	0x00037f2c
   2bc0c:	000385b8 	.word	0x000385b8
   2bc10:	20016bcc 	.word	0x20016bcc
   2bc14:	00037fec 	.word	0x00037fec
   2bc18:	0003803e 	.word	0x0003803e
   2bc1c:	00038053 	.word	0x00038053
   2bc20:	20015e90 	.word	0x20015e90
   2bc24:	200149bc 	.word	0x200149bc
   2bc28:	20016b74 	.word	0x20016b74
   2bc2c:	00038012 	.word	0x00038012
   2bc30:	00038029 	.word	0x00038029

0002bc34 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2bc34:	b538      	push	{r3, r4, r5, lr}
   2bc36:	4604      	mov	r4, r0
	__asm__ volatile(
   2bc38:	f04f 0320 	mov.w	r3, #32
   2bc3c:	f3ef 8511 	mrs	r5, BASEPRI
   2bc40:	f383 8811 	msr	BASEPRI, r3
   2bc44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bc48:	481a      	ldr	r0, [pc, #104]	; (2bcb4 <z_abort_timeout+0x80>)
   2bc4a:	f7fd f993 	bl	28f74 <z_spin_lock_valid>
   2bc4e:	b968      	cbnz	r0, 2bc6c <z_abort_timeout+0x38>
   2bc50:	2381      	movs	r3, #129	; 0x81
   2bc52:	4a19      	ldr	r2, [pc, #100]	; (2bcb8 <z_abort_timeout+0x84>)
   2bc54:	4919      	ldr	r1, [pc, #100]	; (2bcbc <z_abort_timeout+0x88>)
   2bc56:	481a      	ldr	r0, [pc, #104]	; (2bcc0 <z_abort_timeout+0x8c>)
   2bc58:	f002 f896 	bl	2dd88 <printk>
   2bc5c:	4915      	ldr	r1, [pc, #84]	; (2bcb4 <z_abort_timeout+0x80>)
   2bc5e:	4819      	ldr	r0, [pc, #100]	; (2bcc4 <z_abort_timeout+0x90>)
   2bc60:	f002 f892 	bl	2dd88 <printk>
   2bc64:	2181      	movs	r1, #129	; 0x81
   2bc66:	4814      	ldr	r0, [pc, #80]	; (2bcb8 <z_abort_timeout+0x84>)
   2bc68:	f002 fb74 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bc6c:	4811      	ldr	r0, [pc, #68]	; (2bcb4 <z_abort_timeout+0x80>)
   2bc6e:	f7fd f99d 	bl	28fac <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2bc72:	6823      	ldr	r3, [r4, #0]
   2bc74:	b1db      	cbz	r3, 2bcae <z_abort_timeout+0x7a>
			remove_timeout(to);
   2bc76:	4620      	mov	r0, r4
   2bc78:	f7ff feee 	bl	2ba58 <remove_timeout>
			ret = 0;
   2bc7c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bc7e:	480d      	ldr	r0, [pc, #52]	; (2bcb4 <z_abort_timeout+0x80>)
   2bc80:	f7fd f986 	bl	28f90 <z_spin_unlock_valid>
   2bc84:	b968      	cbnz	r0, 2bca2 <z_abort_timeout+0x6e>
   2bc86:	23ac      	movs	r3, #172	; 0xac
   2bc88:	4a0b      	ldr	r2, [pc, #44]	; (2bcb8 <z_abort_timeout+0x84>)
   2bc8a:	490f      	ldr	r1, [pc, #60]	; (2bcc8 <z_abort_timeout+0x94>)
   2bc8c:	480c      	ldr	r0, [pc, #48]	; (2bcc0 <z_abort_timeout+0x8c>)
   2bc8e:	f002 f87b 	bl	2dd88 <printk>
   2bc92:	4908      	ldr	r1, [pc, #32]	; (2bcb4 <z_abort_timeout+0x80>)
   2bc94:	480d      	ldr	r0, [pc, #52]	; (2bccc <z_abort_timeout+0x98>)
   2bc96:	f002 f877 	bl	2dd88 <printk>
   2bc9a:	21ac      	movs	r1, #172	; 0xac
   2bc9c:	4806      	ldr	r0, [pc, #24]	; (2bcb8 <z_abort_timeout+0x84>)
   2bc9e:	f002 fb59 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2bca2:	f385 8811 	msr	BASEPRI, r5
   2bca6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2bcaa:	4620      	mov	r0, r4
   2bcac:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2bcae:	f06f 0415 	mvn.w	r4, #21
   2bcb2:	e7e4      	b.n	2bc7e <z_abort_timeout+0x4a>
   2bcb4:	20016bcc 	.word	0x20016bcc
   2bcb8:	00037fec 	.word	0x00037fec
   2bcbc:	0003803e 	.word	0x0003803e
   2bcc0:	00037f2c 	.word	0x00037f2c
   2bcc4:	00038053 	.word	0x00038053
   2bcc8:	00038012 	.word	0x00038012
   2bccc:	00038029 	.word	0x00038029

0002bcd0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2bcd0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2bcd2:	f04f 0320 	mov.w	r3, #32
   2bcd6:	f3ef 8511 	mrs	r5, BASEPRI
   2bcda:	f383 8811 	msr	BASEPRI, r3
   2bcde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bce2:	4818      	ldr	r0, [pc, #96]	; (2bd44 <z_get_next_timeout_expiry+0x74>)
   2bce4:	f7fd f946 	bl	28f74 <z_spin_lock_valid>
   2bce8:	b968      	cbnz	r0, 2bd06 <z_get_next_timeout_expiry+0x36>
   2bcea:	2381      	movs	r3, #129	; 0x81
   2bcec:	4a16      	ldr	r2, [pc, #88]	; (2bd48 <z_get_next_timeout_expiry+0x78>)
   2bcee:	4917      	ldr	r1, [pc, #92]	; (2bd4c <z_get_next_timeout_expiry+0x7c>)
   2bcf0:	4817      	ldr	r0, [pc, #92]	; (2bd50 <z_get_next_timeout_expiry+0x80>)
   2bcf2:	f002 f849 	bl	2dd88 <printk>
   2bcf6:	4913      	ldr	r1, [pc, #76]	; (2bd44 <z_get_next_timeout_expiry+0x74>)
   2bcf8:	4816      	ldr	r0, [pc, #88]	; (2bd54 <z_get_next_timeout_expiry+0x84>)
   2bcfa:	f002 f845 	bl	2dd88 <printk>
   2bcfe:	2181      	movs	r1, #129	; 0x81
   2bd00:	4811      	ldr	r0, [pc, #68]	; (2bd48 <z_get_next_timeout_expiry+0x78>)
   2bd02:	f002 fb27 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bd06:	480f      	ldr	r0, [pc, #60]	; (2bd44 <z_get_next_timeout_expiry+0x74>)
   2bd08:	f7fd f950 	bl	28fac <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2bd0c:	f7ff fe78 	bl	2ba00 <next_timeout>
   2bd10:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bd12:	480c      	ldr	r0, [pc, #48]	; (2bd44 <z_get_next_timeout_expiry+0x74>)
   2bd14:	f7fd f93c 	bl	28f90 <z_spin_unlock_valid>
   2bd18:	b968      	cbnz	r0, 2bd36 <z_get_next_timeout_expiry+0x66>
   2bd1a:	23ac      	movs	r3, #172	; 0xac
   2bd1c:	4a0a      	ldr	r2, [pc, #40]	; (2bd48 <z_get_next_timeout_expiry+0x78>)
   2bd1e:	490e      	ldr	r1, [pc, #56]	; (2bd58 <z_get_next_timeout_expiry+0x88>)
   2bd20:	480b      	ldr	r0, [pc, #44]	; (2bd50 <z_get_next_timeout_expiry+0x80>)
   2bd22:	f002 f831 	bl	2dd88 <printk>
   2bd26:	4907      	ldr	r1, [pc, #28]	; (2bd44 <z_get_next_timeout_expiry+0x74>)
   2bd28:	480c      	ldr	r0, [pc, #48]	; (2bd5c <z_get_next_timeout_expiry+0x8c>)
   2bd2a:	f002 f82d 	bl	2dd88 <printk>
   2bd2e:	21ac      	movs	r1, #172	; 0xac
   2bd30:	4805      	ldr	r0, [pc, #20]	; (2bd48 <z_get_next_timeout_expiry+0x78>)
   2bd32:	f002 fb0f 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2bd36:	f385 8811 	msr	BASEPRI, r5
   2bd3a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2bd3e:	4620      	mov	r0, r4
   2bd40:	bd38      	pop	{r3, r4, r5, pc}
   2bd42:	bf00      	nop
   2bd44:	20016bcc 	.word	0x20016bcc
   2bd48:	00037fec 	.word	0x00037fec
   2bd4c:	0003803e 	.word	0x0003803e
   2bd50:	00037f2c 	.word	0x00037f2c
   2bd54:	00038053 	.word	0x00038053
   2bd58:	00038012 	.word	0x00038012
   2bd5c:	00038029 	.word	0x00038029

0002bd60 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   2bd60:	b570      	push	{r4, r5, r6, lr}
   2bd62:	4604      	mov	r4, r0
   2bd64:	460d      	mov	r5, r1
	__asm__ volatile(
   2bd66:	f04f 0320 	mov.w	r3, #32
   2bd6a:	f3ef 8611 	mrs	r6, BASEPRI
   2bd6e:	f383 8811 	msr	BASEPRI, r3
   2bd72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bd76:	481b      	ldr	r0, [pc, #108]	; (2bde4 <z_set_timeout_expiry+0x84>)
   2bd78:	f7fd f8fc 	bl	28f74 <z_spin_lock_valid>
   2bd7c:	b968      	cbnz	r0, 2bd9a <z_set_timeout_expiry+0x3a>
   2bd7e:	2381      	movs	r3, #129	; 0x81
   2bd80:	4a19      	ldr	r2, [pc, #100]	; (2bde8 <z_set_timeout_expiry+0x88>)
   2bd82:	491a      	ldr	r1, [pc, #104]	; (2bdec <z_set_timeout_expiry+0x8c>)
   2bd84:	481a      	ldr	r0, [pc, #104]	; (2bdf0 <z_set_timeout_expiry+0x90>)
   2bd86:	f001 ffff 	bl	2dd88 <printk>
   2bd8a:	4916      	ldr	r1, [pc, #88]	; (2bde4 <z_set_timeout_expiry+0x84>)
   2bd8c:	4819      	ldr	r0, [pc, #100]	; (2bdf4 <z_set_timeout_expiry+0x94>)
   2bd8e:	f001 fffb 	bl	2dd88 <printk>
   2bd92:	2181      	movs	r1, #129	; 0x81
   2bd94:	4814      	ldr	r0, [pc, #80]	; (2bde8 <z_set_timeout_expiry+0x88>)
   2bd96:	f002 fadd 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bd9a:	4812      	ldr	r0, [pc, #72]	; (2bde4 <z_set_timeout_expiry+0x84>)
   2bd9c:	f7fd f906 	bl	28fac <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   2bda0:	f7ff fe2e 	bl	2ba00 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2bda4:	2801      	cmp	r0, #1
   2bda6:	dd05      	ble.n	2bdb4 <z_set_timeout_expiry+0x54>
   2bda8:	42a0      	cmp	r0, r4
   2bdaa:	db03      	blt.n	2bdb4 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2bdac:	4629      	mov	r1, r5
   2bdae:	4620      	mov	r0, r4
   2bdb0:	f7ea fc5e 	bl	16670 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bdb4:	480b      	ldr	r0, [pc, #44]	; (2bde4 <z_set_timeout_expiry+0x84>)
   2bdb6:	f7fd f8eb 	bl	28f90 <z_spin_unlock_valid>
   2bdba:	b968      	cbnz	r0, 2bdd8 <z_set_timeout_expiry+0x78>
   2bdbc:	23ac      	movs	r3, #172	; 0xac
   2bdbe:	4a0a      	ldr	r2, [pc, #40]	; (2bde8 <z_set_timeout_expiry+0x88>)
   2bdc0:	490d      	ldr	r1, [pc, #52]	; (2bdf8 <z_set_timeout_expiry+0x98>)
   2bdc2:	480b      	ldr	r0, [pc, #44]	; (2bdf0 <z_set_timeout_expiry+0x90>)
   2bdc4:	f001 ffe0 	bl	2dd88 <printk>
   2bdc8:	4906      	ldr	r1, [pc, #24]	; (2bde4 <z_set_timeout_expiry+0x84>)
   2bdca:	480c      	ldr	r0, [pc, #48]	; (2bdfc <z_set_timeout_expiry+0x9c>)
   2bdcc:	f001 ffdc 	bl	2dd88 <printk>
   2bdd0:	21ac      	movs	r1, #172	; 0xac
   2bdd2:	4805      	ldr	r0, [pc, #20]	; (2bde8 <z_set_timeout_expiry+0x88>)
   2bdd4:	f002 fabe 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2bdd8:	f386 8811 	msr	BASEPRI, r6
   2bddc:	f3bf 8f6f 	isb	sy
		}
	}
}
   2bde0:	bd70      	pop	{r4, r5, r6, pc}
   2bde2:	bf00      	nop
   2bde4:	20016bcc 	.word	0x20016bcc
   2bde8:	00037fec 	.word	0x00037fec
   2bdec:	0003803e 	.word	0x0003803e
   2bdf0:	00037f2c 	.word	0x00037f2c
   2bdf4:	00038053 	.word	0x00038053
   2bdf8:	00038012 	.word	0x00038012
   2bdfc:	00038029 	.word	0x00038029

0002be00 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2be00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be04:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2be06:	f7ff f813 	bl	2ae30 <z_time_slice>
	__asm__ volatile(
   2be0a:	f04f 0320 	mov.w	r3, #32
   2be0e:	f3ef 8711 	mrs	r7, BASEPRI
   2be12:	f383 8811 	msr	BASEPRI, r3
   2be16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2be1a:	4854      	ldr	r0, [pc, #336]	; (2bf6c <sys_clock_announce+0x16c>)
   2be1c:	f7fd f8aa 	bl	28f74 <z_spin_lock_valid>
   2be20:	b968      	cbnz	r0, 2be3e <sys_clock_announce+0x3e>
   2be22:	2381      	movs	r3, #129	; 0x81
   2be24:	4a52      	ldr	r2, [pc, #328]	; (2bf70 <sys_clock_announce+0x170>)
   2be26:	4953      	ldr	r1, [pc, #332]	; (2bf74 <sys_clock_announce+0x174>)
   2be28:	4853      	ldr	r0, [pc, #332]	; (2bf78 <sys_clock_announce+0x178>)
   2be2a:	f001 ffad 	bl	2dd88 <printk>
   2be2e:	494f      	ldr	r1, [pc, #316]	; (2bf6c <sys_clock_announce+0x16c>)
   2be30:	4852      	ldr	r0, [pc, #328]	; (2bf7c <sys_clock_announce+0x17c>)
   2be32:	f001 ffa9 	bl	2dd88 <printk>
   2be36:	2181      	movs	r1, #129	; 0x81
   2be38:	484d      	ldr	r0, [pc, #308]	; (2bf70 <sys_clock_announce+0x170>)
   2be3a:	f002 fa8b 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2be3e:	4e50      	ldr	r6, [pc, #320]	; (2bf80 <sys_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2be40:	4d50      	ldr	r5, [pc, #320]	; (2bf84 <sys_clock_announce+0x184>)
   2be42:	46b3      	mov	fp, r6
   2be44:	4849      	ldr	r0, [pc, #292]	; (2bf6c <sys_clock_announce+0x16c>)
	return list->head == list;
   2be46:	f8df a148 	ldr.w	sl, [pc, #328]	; 2bf90 <sys_clock_announce+0x190>
   2be4a:	f7fd f8af 	bl	28fac <z_spin_lock_set_owner>
   2be4e:	602c      	str	r4, [r5, #0]
   2be50:	f8d5 c000 	ldr.w	ip, [r5]
   2be54:	e9d6 2300 	ldrd	r2, r3, [r6]
   2be58:	e9cd 2300 	strd	r2, r3, [sp]
   2be5c:	4662      	mov	r2, ip
   2be5e:	f8da 4000 	ldr.w	r4, [sl]
   2be62:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2be64:	4554      	cmp	r4, sl
   2be66:	46e0      	mov	r8, ip
   2be68:	4699      	mov	r9, r3
   2be6a:	d00c      	beq.n	2be86 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2be6c:	b15c      	cbz	r4, 2be86 <sys_clock_announce+0x86>
   2be6e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2be72:	458c      	cmp	ip, r1
   2be74:	eb79 0302 	sbcs.w	r3, r9, r2
   2be78:	da2e      	bge.n	2bed8 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2be7a:	ebb1 000c 	subs.w	r0, r1, ip
   2be7e:	eb62 0109 	sbc.w	r1, r2, r9
   2be82:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   2be86:	464b      	mov	r3, r9
	announce_remaining = 0;
   2be88:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2be8a:	9a00      	ldr	r2, [sp, #0]
   2be8c:	9901      	ldr	r1, [sp, #4]
   2be8e:	eb18 0202 	adds.w	r2, r8, r2
   2be92:	eb43 0101 	adc.w	r1, r3, r1
   2be96:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   2be9a:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2be9c:	f7ff fdb0 	bl	2ba00 <next_timeout>
   2bea0:	4621      	mov	r1, r4
   2bea2:	f7ea fbe5 	bl	16670 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bea6:	4831      	ldr	r0, [pc, #196]	; (2bf6c <sys_clock_announce+0x16c>)
   2bea8:	f7fd f872 	bl	28f90 <z_spin_unlock_valid>
   2beac:	b968      	cbnz	r0, 2beca <sys_clock_announce+0xca>
   2beae:	23ac      	movs	r3, #172	; 0xac
   2beb0:	4a2f      	ldr	r2, [pc, #188]	; (2bf70 <sys_clock_announce+0x170>)
   2beb2:	4935      	ldr	r1, [pc, #212]	; (2bf88 <sys_clock_announce+0x188>)
   2beb4:	4830      	ldr	r0, [pc, #192]	; (2bf78 <sys_clock_announce+0x178>)
   2beb6:	f001 ff67 	bl	2dd88 <printk>
   2beba:	492c      	ldr	r1, [pc, #176]	; (2bf6c <sys_clock_announce+0x16c>)
   2bebc:	4833      	ldr	r0, [pc, #204]	; (2bf8c <sys_clock_announce+0x18c>)
   2bebe:	f001 ff63 	bl	2dd88 <printk>
   2bec2:	21ac      	movs	r1, #172	; 0xac
   2bec4:	482a      	ldr	r0, [pc, #168]	; (2bf70 <sys_clock_announce+0x170>)
   2bec6:	f002 fa45 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2beca:	f387 8811 	msr	BASEPRI, r7
   2bece:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2bed2:	b003      	add	sp, #12
   2bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   2bed8:	2200      	movs	r2, #0
		curr_tick += dt;
   2beda:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   2bede:	2300      	movs	r3, #0
		curr_tick += dt;
   2bee0:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   2bee4:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   2bee8:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   2beec:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   2beee:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   2bef2:	4620      	mov	r0, r4
		curr_tick += dt;
   2bef4:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   2bef8:	f7ff fdae 	bl	2ba58 <remove_timeout>
   2befc:	481b      	ldr	r0, [pc, #108]	; (2bf6c <sys_clock_announce+0x16c>)
   2befe:	f7fd f847 	bl	28f90 <z_spin_unlock_valid>
   2bf02:	b968      	cbnz	r0, 2bf20 <sys_clock_announce+0x120>
   2bf04:	23ac      	movs	r3, #172	; 0xac
   2bf06:	4a1a      	ldr	r2, [pc, #104]	; (2bf70 <sys_clock_announce+0x170>)
   2bf08:	491f      	ldr	r1, [pc, #124]	; (2bf88 <sys_clock_announce+0x188>)
   2bf0a:	481b      	ldr	r0, [pc, #108]	; (2bf78 <sys_clock_announce+0x178>)
   2bf0c:	f001 ff3c 	bl	2dd88 <printk>
   2bf10:	4916      	ldr	r1, [pc, #88]	; (2bf6c <sys_clock_announce+0x16c>)
   2bf12:	481e      	ldr	r0, [pc, #120]	; (2bf8c <sys_clock_announce+0x18c>)
   2bf14:	f001 ff38 	bl	2dd88 <printk>
   2bf18:	21ac      	movs	r1, #172	; 0xac
   2bf1a:	4815      	ldr	r0, [pc, #84]	; (2bf70 <sys_clock_announce+0x170>)
   2bf1c:	f002 fa1a 	bl	2e354 <assert_post_action>
   2bf20:	f387 8811 	msr	BASEPRI, r7
   2bf24:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2bf28:	4620      	mov	r0, r4
   2bf2a:	68a3      	ldr	r3, [r4, #8]
   2bf2c:	4798      	blx	r3
	__asm__ volatile(
   2bf2e:	f04f 0320 	mov.w	r3, #32
   2bf32:	f3ef 8711 	mrs	r7, BASEPRI
   2bf36:	f383 8811 	msr	BASEPRI, r3
   2bf3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bf3e:	480b      	ldr	r0, [pc, #44]	; (2bf6c <sys_clock_announce+0x16c>)
   2bf40:	f7fd f818 	bl	28f74 <z_spin_lock_valid>
   2bf44:	b968      	cbnz	r0, 2bf62 <sys_clock_announce+0x162>
   2bf46:	2381      	movs	r3, #129	; 0x81
   2bf48:	4a09      	ldr	r2, [pc, #36]	; (2bf70 <sys_clock_announce+0x170>)
   2bf4a:	490a      	ldr	r1, [pc, #40]	; (2bf74 <sys_clock_announce+0x174>)
   2bf4c:	480a      	ldr	r0, [pc, #40]	; (2bf78 <sys_clock_announce+0x178>)
   2bf4e:	f001 ff1b 	bl	2dd88 <printk>
   2bf52:	4906      	ldr	r1, [pc, #24]	; (2bf6c <sys_clock_announce+0x16c>)
   2bf54:	4809      	ldr	r0, [pc, #36]	; (2bf7c <sys_clock_announce+0x17c>)
   2bf56:	f001 ff17 	bl	2dd88 <printk>
   2bf5a:	2181      	movs	r1, #129	; 0x81
   2bf5c:	4804      	ldr	r0, [pc, #16]	; (2bf70 <sys_clock_announce+0x170>)
   2bf5e:	f002 f9f9 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bf62:	4802      	ldr	r0, [pc, #8]	; (2bf6c <sys_clock_announce+0x16c>)
   2bf64:	f7fd f822 	bl	28fac <z_spin_lock_set_owner>
	return k;
   2bf68:	e772      	b.n	2be50 <sys_clock_announce+0x50>
   2bf6a:	bf00      	nop
   2bf6c:	20016bcc 	.word	0x20016bcc
   2bf70:	00037fec 	.word	0x00037fec
   2bf74:	0003803e 	.word	0x0003803e
   2bf78:	00037f2c 	.word	0x00037f2c
   2bf7c:	00038053 	.word	0x00038053
   2bf80:	20015e90 	.word	0x20015e90
   2bf84:	20016bc8 	.word	0x20016bc8
   2bf88:	00038012 	.word	0x00038012
   2bf8c:	00038029 	.word	0x00038029
   2bf90:	200149bc 	.word	0x200149bc

0002bf94 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2bf94:	b570      	push	{r4, r5, r6, lr}
   2bf96:	f04f 0320 	mov.w	r3, #32
   2bf9a:	f3ef 8611 	mrs	r6, BASEPRI
   2bf9e:	f383 8811 	msr	BASEPRI, r3
   2bfa2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bfa6:	481b      	ldr	r0, [pc, #108]	; (2c014 <sys_clock_tick_get+0x80>)
   2bfa8:	f7fc ffe4 	bl	28f74 <z_spin_lock_valid>
   2bfac:	b968      	cbnz	r0, 2bfca <sys_clock_tick_get+0x36>
   2bfae:	2381      	movs	r3, #129	; 0x81
   2bfb0:	4a19      	ldr	r2, [pc, #100]	; (2c018 <sys_clock_tick_get+0x84>)
   2bfb2:	491a      	ldr	r1, [pc, #104]	; (2c01c <sys_clock_tick_get+0x88>)
   2bfb4:	481a      	ldr	r0, [pc, #104]	; (2c020 <sys_clock_tick_get+0x8c>)
   2bfb6:	f001 fee7 	bl	2dd88 <printk>
   2bfba:	4916      	ldr	r1, [pc, #88]	; (2c014 <sys_clock_tick_get+0x80>)
   2bfbc:	4819      	ldr	r0, [pc, #100]	; (2c024 <sys_clock_tick_get+0x90>)
   2bfbe:	f001 fee3 	bl	2dd88 <printk>
   2bfc2:	2181      	movs	r1, #129	; 0x81
   2bfc4:	4814      	ldr	r0, [pc, #80]	; (2c018 <sys_clock_tick_get+0x84>)
   2bfc6:	f002 f9c5 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bfca:	4812      	ldr	r0, [pc, #72]	; (2c014 <sys_clock_tick_get+0x80>)
   2bfcc:	f7fc ffee 	bl	28fac <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2bfd0:	f7ea fb80 	bl	166d4 <sys_clock_elapsed>
   2bfd4:	4b14      	ldr	r3, [pc, #80]	; (2c028 <sys_clock_tick_get+0x94>)
   2bfd6:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bfda:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bfdc:	480d      	ldr	r0, [pc, #52]	; (2c014 <sys_clock_tick_get+0x80>)
   2bfde:	f145 0500 	adc.w	r5, r5, #0
   2bfe2:	f7fc ffd5 	bl	28f90 <z_spin_unlock_valid>
   2bfe6:	b968      	cbnz	r0, 2c004 <sys_clock_tick_get+0x70>
   2bfe8:	23ac      	movs	r3, #172	; 0xac
   2bfea:	4a0b      	ldr	r2, [pc, #44]	; (2c018 <sys_clock_tick_get+0x84>)
   2bfec:	490f      	ldr	r1, [pc, #60]	; (2c02c <sys_clock_tick_get+0x98>)
   2bfee:	480c      	ldr	r0, [pc, #48]	; (2c020 <sys_clock_tick_get+0x8c>)
   2bff0:	f001 feca 	bl	2dd88 <printk>
   2bff4:	4907      	ldr	r1, [pc, #28]	; (2c014 <sys_clock_tick_get+0x80>)
   2bff6:	480e      	ldr	r0, [pc, #56]	; (2c030 <sys_clock_tick_get+0x9c>)
   2bff8:	f001 fec6 	bl	2dd88 <printk>
   2bffc:	21ac      	movs	r1, #172	; 0xac
   2bffe:	4806      	ldr	r0, [pc, #24]	; (2c018 <sys_clock_tick_get+0x84>)
   2c000:	f002 f9a8 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2c004:	f386 8811 	msr	BASEPRI, r6
   2c008:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2c00c:	4620      	mov	r0, r4
   2c00e:	4629      	mov	r1, r5
   2c010:	bd70      	pop	{r4, r5, r6, pc}
   2c012:	bf00      	nop
   2c014:	20016bcc 	.word	0x20016bcc
   2c018:	00037fec 	.word	0x00037fec
   2c01c:	0003803e 	.word	0x0003803e
   2c020:	00037f2c 	.word	0x00037f2c
   2c024:	00038053 	.word	0x00038053
   2c028:	20015e90 	.word	0x20015e90
   2c02c:	00038012 	.word	0x00038012
   2c030:	00038029 	.word	0x00038029

0002c034 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2c036:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2c03a:	1c56      	adds	r6, r2, #1
   2c03c:	f143 0700 	adc.w	r7, r3, #0
   2c040:	2f00      	cmp	r7, #0
   2c042:	bf08      	it	eq
   2c044:	2e02      	cmpeq	r6, #2
{
   2c046:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2c048:	d302      	bcc.n	2c050 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2c04a:	490d      	ldr	r1, [pc, #52]	; (2c080 <z_timer_expiration_handler+0x4c>)
   2c04c:	f7ff fd1e 	bl	2ba8c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2c050:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c052:	3301      	adds	r3, #1
   2c054:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2c056:	6a23      	ldr	r3, [r4, #32]
   2c058:	b10b      	cbz	r3, 2c05e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2c05a:	4620      	mov	r0, r4
   2c05c:	4798      	blx	r3
	return list->head == list;
   2c05e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c062:	42a5      	cmp	r5, r4
   2c064:	d00a      	beq.n	2c07c <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2c066:	b14d      	cbz	r5, 2c07c <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2c068:	4628      	mov	r0, r5
   2c06a:	f7fe faed 	bl	2a648 <z_unpend_thread_no_timeout>
   2c06e:	2300      	movs	r3, #0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   2c070:	4628      	mov	r0, r5
   2c072:	67eb      	str	r3, [r5, #124]	; 0x7c
}
   2c074:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   2c078:	f7fe bfa6 	b.w	2afc8 <z_ready_thread>
}
   2c07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c07e:	bf00      	nop
   2c080:	0002c035 	.word	0x0002c035

0002c084 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2c084:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   2c088:	4619      	mov	r1, r3
   2c08a:	4606      	mov	r6, r0
   2c08c:	4610      	mov	r0, r2
   2c08e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2c092:	1c4c      	adds	r4, r1, #1
   2c094:	bf08      	it	eq
   2c096:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2c09a:	4680      	mov	r8, r0
   2c09c:	4689      	mov	r9, r1
   2c09e:	d04c      	beq.n	2c13a <z_impl_k_timer_start+0xb6>
   2c0a0:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2c0a2:	1c6b      	adds	r3, r5, #1
   2c0a4:	bf08      	it	eq
   2c0a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2c0aa:	4614      	mov	r4, r2
   2c0ac:	d019      	beq.n	2c0e2 <z_impl_k_timer_start+0x5e>
   2c0ae:	ea54 0305 	orrs.w	r3, r4, r5
   2c0b2:	d016      	beq.n	2c0e2 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   2c0b4:	f06f 0301 	mvn.w	r3, #1
   2c0b8:	ebb3 0a02 	subs.w	sl, r3, r2
   2c0bc:	f04f 33ff 	mov.w	r3, #4294967295
   2c0c0:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2c0c4:	f1ba 0f00 	cmp.w	sl, #0
   2c0c8:	f17b 0300 	sbcs.w	r3, fp, #0
   2c0cc:	da09      	bge.n	2c0e2 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   2c0ce:	f112 34ff 	adds.w	r4, r2, #4294967295
   2c0d2:	f145 35ff 	adc.w	r5, r5, #4294967295
   2c0d6:	2c01      	cmp	r4, #1
   2c0d8:	f175 0300 	sbcs.w	r3, r5, #0
   2c0dc:	bfbc      	itt	lt
   2c0de:	2401      	movlt	r4, #1
   2c0e0:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2c0e2:	f06f 0301 	mvn.w	r3, #1
   2c0e6:	1a1b      	subs	r3, r3, r0
   2c0e8:	9300      	str	r3, [sp, #0]
   2c0ea:	f04f 33ff 	mov.w	r3, #4294967295
   2c0ee:	eb63 0301 	sbc.w	r3, r3, r1
   2c0f2:	9301      	str	r3, [sp, #4]
   2c0f4:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c0f8:	2a00      	cmp	r2, #0
   2c0fa:	f173 0300 	sbcs.w	r3, r3, #0
   2c0fe:	da0c      	bge.n	2c11a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2c100:	f110 38ff 	adds.w	r8, r0, #4294967295
   2c104:	f141 39ff 	adc.w	r9, r1, #4294967295
   2c108:	f1b8 0f00 	cmp.w	r8, #0
   2c10c:	f179 0300 	sbcs.w	r3, r9, #0
   2c110:	bfbc      	itt	lt
   2c112:	f04f 0800 	movlt.w	r8, #0
   2c116:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   2c11a:	4630      	mov	r0, r6
   2c11c:	f7ff fd8a 	bl	2bc34 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2c120:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2c122:	4642      	mov	r2, r8
	timer->status = 0U;
   2c124:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2c126:	4630      	mov	r0, r6
   2c128:	464b      	mov	r3, r9
   2c12a:	4905      	ldr	r1, [pc, #20]	; (2c140 <z_impl_k_timer_start+0xbc>)
	timer->period = period;
   2c12c:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   2c130:	b002      	add	sp, #8
   2c132:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2c136:	f7ff bca9 	b.w	2ba8c <z_add_timeout>
}
   2c13a:	b002      	add	sp, #8
   2c13c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   2c140:	0002c035 	.word	0x0002c035

0002c144 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   2c144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c148:	2414      	movs	r4, #20
   2c14a:	4680      	mov	r8, r0
   2c14c:	4617      	mov	r7, r2
	while (num_events--) {
   2c14e:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2c152:	4d51      	ldr	r5, [pc, #324]	; (2c298 <clear_event_registrations+0x154>)
   2c154:	f8df 9184 	ldr.w	r9, [pc, #388]	; 2c2dc <clear_event_registrations+0x198>
   2c158:	4e50      	ldr	r6, [pc, #320]	; (2c29c <clear_event_registrations+0x158>)
	while (num_events--) {
   2c15a:	45a0      	cmp	r8, r4
   2c15c:	d101      	bne.n	2c162 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   2c15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2c162:	2300      	movs	r3, #0
   2c164:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2c168:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2c16c:	f003 031f 	and.w	r3, r3, #31
   2c170:	2b08      	cmp	r3, #8
   2c172:	d84f      	bhi.n	2c214 <clear_event_registrations+0xd0>
   2c174:	e8df f003 	tbb	[pc, r3]
   2c178:	4e05305b 	.word	0x4e05305b
   2c17c:	4e4e4e21 	.word	0x4e4e4e21
   2c180:	3f          	.byte	0x3f
   2c181:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2c182:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c186:	b963      	cbnz	r3, 2c1a2 <clear_event_registrations+0x5e>
   2c188:	4945      	ldr	r1, [pc, #276]	; (2c2a0 <clear_event_registrations+0x15c>)
   2c18a:	23a9      	movs	r3, #169	; 0xa9
   2c18c:	462a      	mov	r2, r5
   2c18e:	4630      	mov	r0, r6
   2c190:	f001 fdfa 	bl	2dd88 <printk>
   2c194:	4843      	ldr	r0, [pc, #268]	; (2c2a4 <clear_event_registrations+0x160>)
   2c196:	f001 fdf7 	bl	2dd88 <printk>
   2c19a:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2c19c:	4628      	mov	r0, r5
   2c19e:	f002 f8d9 	bl	2e354 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2c1a2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2c1a6:	2b00      	cmp	r3, #0
   2c1a8:	d041      	beq.n	2c22e <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   2c1aa:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   2c1ae:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c1b0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c1b2:	2300      	movs	r3, #0
	node->prev = NULL;
   2c1b4:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   2c1b8:	e039      	b.n	2c22e <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2c1ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c1be:	2b00      	cmp	r3, #0
   2c1c0:	d1ef      	bne.n	2c1a2 <clear_event_registrations+0x5e>
   2c1c2:	4939      	ldr	r1, [pc, #228]	; (2c2a8 <clear_event_registrations+0x164>)
   2c1c4:	23ad      	movs	r3, #173	; 0xad
   2c1c6:	462a      	mov	r2, r5
   2c1c8:	4630      	mov	r0, r6
   2c1ca:	f001 fddd 	bl	2dd88 <printk>
   2c1ce:	4837      	ldr	r0, [pc, #220]	; (2c2ac <clear_event_registrations+0x168>)
   2c1d0:	f001 fdda 	bl	2dd88 <printk>
   2c1d4:	21ad      	movs	r1, #173	; 0xad
   2c1d6:	e7e1      	b.n	2c19c <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2c1d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c1dc:	2b00      	cmp	r3, #0
   2c1de:	d1e0      	bne.n	2c1a2 <clear_event_registrations+0x5e>
   2c1e0:	4933      	ldr	r1, [pc, #204]	; (2c2b0 <clear_event_registrations+0x16c>)
   2c1e2:	23b1      	movs	r3, #177	; 0xb1
   2c1e4:	462a      	mov	r2, r5
   2c1e6:	4630      	mov	r0, r6
   2c1e8:	f001 fdce 	bl	2dd88 <printk>
   2c1ec:	4831      	ldr	r0, [pc, #196]	; (2c2b4 <clear_event_registrations+0x170>)
   2c1ee:	f001 fdcb 	bl	2dd88 <printk>
   2c1f2:	21b1      	movs	r1, #177	; 0xb1
   2c1f4:	e7d2      	b.n	2c19c <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2c1f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c1fa:	2b00      	cmp	r3, #0
   2c1fc:	d1d1      	bne.n	2c1a2 <clear_event_registrations+0x5e>
   2c1fe:	492e      	ldr	r1, [pc, #184]	; (2c2b8 <clear_event_registrations+0x174>)
   2c200:	23b5      	movs	r3, #181	; 0xb5
   2c202:	462a      	mov	r2, r5
   2c204:	4630      	mov	r0, r6
   2c206:	f001 fdbf 	bl	2dd88 <printk>
   2c20a:	482c      	ldr	r0, [pc, #176]	; (2c2bc <clear_event_registrations+0x178>)
   2c20c:	f001 fdbc 	bl	2dd88 <printk>
   2c210:	21b5      	movs	r1, #181	; 0xb5
   2c212:	e7c3      	b.n	2c19c <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   2c214:	4649      	mov	r1, r9
   2c216:	23bc      	movs	r3, #188	; 0xbc
   2c218:	462a      	mov	r2, r5
   2c21a:	4630      	mov	r0, r6
   2c21c:	f001 fdb4 	bl	2dd88 <printk>
   2c220:	4827      	ldr	r0, [pc, #156]	; (2c2c0 <clear_event_registrations+0x17c>)
   2c222:	f001 fdb1 	bl	2dd88 <printk>
   2c226:	21bc      	movs	r1, #188	; 0xbc
   2c228:	4628      	mov	r0, r5
   2c22a:	f002 f893 	bl	2e354 <assert_post_action>
   2c22e:	4825      	ldr	r0, [pc, #148]	; (2c2c4 <clear_event_registrations+0x180>)
   2c230:	f7fc feae 	bl	28f90 <z_spin_unlock_valid>
   2c234:	b968      	cbnz	r0, 2c252 <clear_event_registrations+0x10e>
   2c236:	23ac      	movs	r3, #172	; 0xac
   2c238:	4630      	mov	r0, r6
   2c23a:	4a23      	ldr	r2, [pc, #140]	; (2c2c8 <clear_event_registrations+0x184>)
   2c23c:	4923      	ldr	r1, [pc, #140]	; (2c2cc <clear_event_registrations+0x188>)
   2c23e:	f001 fda3 	bl	2dd88 <printk>
   2c242:	4920      	ldr	r1, [pc, #128]	; (2c2c4 <clear_event_registrations+0x180>)
   2c244:	4822      	ldr	r0, [pc, #136]	; (2c2d0 <clear_event_registrations+0x18c>)
   2c246:	f001 fd9f 	bl	2dd88 <printk>
   2c24a:	21ac      	movs	r1, #172	; 0xac
   2c24c:	481e      	ldr	r0, [pc, #120]	; (2c2c8 <clear_event_registrations+0x184>)
   2c24e:	f002 f881 	bl	2e354 <assert_post_action>
   2c252:	f387 8811 	msr	BASEPRI, r7
   2c256:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2c25a:	f04f 0320 	mov.w	r3, #32
   2c25e:	f3ef 8711 	mrs	r7, BASEPRI
   2c262:	f383 8811 	msr	BASEPRI, r3
   2c266:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c26a:	4816      	ldr	r0, [pc, #88]	; (2c2c4 <clear_event_registrations+0x180>)
   2c26c:	f7fc fe82 	bl	28f74 <z_spin_lock_valid>
   2c270:	b968      	cbnz	r0, 2c28e <clear_event_registrations+0x14a>
   2c272:	2381      	movs	r3, #129	; 0x81
   2c274:	4630      	mov	r0, r6
   2c276:	4a14      	ldr	r2, [pc, #80]	; (2c2c8 <clear_event_registrations+0x184>)
   2c278:	4916      	ldr	r1, [pc, #88]	; (2c2d4 <clear_event_registrations+0x190>)
   2c27a:	f001 fd85 	bl	2dd88 <printk>
   2c27e:	4911      	ldr	r1, [pc, #68]	; (2c2c4 <clear_event_registrations+0x180>)
   2c280:	4815      	ldr	r0, [pc, #84]	; (2c2d8 <clear_event_registrations+0x194>)
   2c282:	f001 fd81 	bl	2dd88 <printk>
   2c286:	2181      	movs	r1, #129	; 0x81
   2c288:	480f      	ldr	r0, [pc, #60]	; (2c2c8 <clear_event_registrations+0x184>)
   2c28a:	f002 f863 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c28e:	480d      	ldr	r0, [pc, #52]	; (2c2c4 <clear_event_registrations+0x180>)
   2c290:	f7fc fe8c 	bl	28fac <z_spin_lock_set_owner>
	return k;
   2c294:	3c14      	subs	r4, #20
   2c296:	e760      	b.n	2c15a <clear_event_registrations+0x16>
   2c298:	0003e5fd 	.word	0x0003e5fd
   2c29c:	00037f2c 	.word	0x00037f2c
   2c2a0:	0003e61e 	.word	0x0003e61e
   2c2a4:	0003e638 	.word	0x0003e638
   2c2a8:	0003e64d 	.word	0x0003e64d
   2c2ac:	0003e669 	.word	0x0003e669
   2c2b0:	0003e67a 	.word	0x0003e67a
   2c2b4:	0003e697 	.word	0x0003e697
   2c2b8:	0003e6ae 	.word	0x0003e6ae
   2c2bc:	0003e6c9 	.word	0x0003e6c9
   2c2c0:	0003e6e2 	.word	0x0003e6e2
   2c2c4:	20016bd0 	.word	0x20016bd0
   2c2c8:	00037fec 	.word	0x00037fec
   2c2cc:	00038012 	.word	0x00038012
   2c2d0:	00038029 	.word	0x00038029
   2c2d4:	0003803e 	.word	0x0003803e
   2c2d8:	00038053 	.word	0x00038053
   2c2dc:	0003e845 	.word	0x0003e845

0002c2e0 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2c2e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2c2e4:	2700      	movs	r7, #0
{
   2c2e6:	4615      	mov	r5, r2
   2c2e8:	4604      	mov	r4, r0
	int events_registered = 0;
   2c2ea:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c2ec:	4e7a      	ldr	r6, [pc, #488]	; (2c4d8 <register_events+0x1f8>)
   2c2ee:	f8df 822c 	ldr.w	r8, [pc, #556]	; 2c51c <register_events+0x23c>
   2c2f2:	f8df a22c 	ldr.w	sl, [pc, #556]	; 2c520 <register_events+0x240>
{
   2c2f6:	9100      	str	r1, [sp, #0]
   2c2f8:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2c2fa:	9b00      	ldr	r3, [sp, #0]
   2c2fc:	429f      	cmp	r7, r3
   2c2fe:	db03      	blt.n	2c308 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2c300:	4648      	mov	r0, r9
   2c302:	b003      	add	sp, #12
   2c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c308:	f04f 0320 	mov.w	r3, #32
   2c30c:	f3ef 8b11 	mrs	fp, BASEPRI
   2c310:	f383 8811 	msr	BASEPRI, r3
   2c314:	f3bf 8f6f 	isb	sy
   2c318:	4630      	mov	r0, r6
   2c31a:	f7fc fe2b 	bl	28f74 <z_spin_lock_valid>
   2c31e:	b968      	cbnz	r0, 2c33c <register_events+0x5c>
   2c320:	2381      	movs	r3, #129	; 0x81
   2c322:	4642      	mov	r2, r8
   2c324:	4651      	mov	r1, sl
   2c326:	486d      	ldr	r0, [pc, #436]	; (2c4dc <register_events+0x1fc>)
   2c328:	f001 fd2e 	bl	2dd88 <printk>
   2c32c:	4631      	mov	r1, r6
   2c32e:	486c      	ldr	r0, [pc, #432]	; (2c4e0 <register_events+0x200>)
   2c330:	f001 fd2a 	bl	2dd88 <printk>
   2c334:	2181      	movs	r1, #129	; 0x81
   2c336:	4640      	mov	r0, r8
   2c338:	f002 f80c 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c33c:	4630      	mov	r0, r6
   2c33e:	f7fc fe35 	bl	28fac <z_spin_lock_set_owner>
	switch (event->type) {
   2c342:	7b63      	ldrb	r3, [r4, #13]
   2c344:	f003 031f 	and.w	r3, r3, #31
   2c348:	2b08      	cmp	r3, #8
   2c34a:	d84f      	bhi.n	2c3ec <register_events+0x10c>
   2c34c:	e8df f003 	tbb	[pc, r3]
   2c350:	4e054230 	.word	0x4e054230
   2c354:	4e4e4e2c 	.word	0x4e4e4e2c
   2c358:	48          	.byte	0x48
   2c359:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   2c35a:	6923      	ldr	r3, [r4, #16]
   2c35c:	689b      	ldr	r3, [r3, #8]
   2c35e:	b33b      	cbz	r3, 2c3b0 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2c360:	2302      	movs	r3, #2
	event->poller = NULL;
   2c362:	2100      	movs	r1, #0
	event->state |= state;
   2c364:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   2c366:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2c368:	f3c2 3045 	ubfx	r0, r2, #13, #6
   2c36c:	4303      	orrs	r3, r0
   2c36e:	f363 3252 	bfi	r2, r3, #13, #6
   2c372:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   2c374:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c376:	4630      	mov	r0, r6
   2c378:	f7fc fe0a 	bl	28f90 <z_spin_unlock_valid>
   2c37c:	b968      	cbnz	r0, 2c39a <register_events+0xba>
   2c37e:	23ac      	movs	r3, #172	; 0xac
   2c380:	4642      	mov	r2, r8
   2c382:	4958      	ldr	r1, [pc, #352]	; (2c4e4 <register_events+0x204>)
   2c384:	4855      	ldr	r0, [pc, #340]	; (2c4dc <register_events+0x1fc>)
   2c386:	f001 fcff 	bl	2dd88 <printk>
   2c38a:	4631      	mov	r1, r6
   2c38c:	4856      	ldr	r0, [pc, #344]	; (2c4e8 <register_events+0x208>)
   2c38e:	f001 fcfb 	bl	2dd88 <printk>
   2c392:	21ac      	movs	r1, #172	; 0xac
   2c394:	4640      	mov	r0, r8
   2c396:	f001 ffdd 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2c39a:	f38b 8811 	msr	BASEPRI, fp
   2c39e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2c3a2:	3701      	adds	r7, #1
   2c3a4:	3414      	adds	r4, #20
   2c3a6:	e7a8      	b.n	2c2fa <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   2c3a8:	6923      	ldr	r3, [r4, #16]
   2c3aa:	681b      	ldr	r3, [r3, #0]
   2c3ac:	2b00      	cmp	r3, #0
   2c3ae:	d12e      	bne.n	2c40e <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   2c3b0:	9b01      	ldr	r3, [sp, #4]
   2c3b2:	2b00      	cmp	r3, #0
   2c3b4:	d1df      	bne.n	2c376 <register_events+0x96>
   2c3b6:	782b      	ldrb	r3, [r5, #0]
   2c3b8:	2b00      	cmp	r3, #0
   2c3ba:	d0dc      	beq.n	2c376 <register_events+0x96>
	switch (event->type) {
   2c3bc:	7b63      	ldrb	r3, [r4, #13]
   2c3be:	f003 031f 	and.w	r3, r3, #31
   2c3c2:	2b08      	cmp	r3, #8
   2c3c4:	d879      	bhi.n	2c4ba <register_events+0x1da>
   2c3c6:	e8df f003 	tbb	[pc, r3]
   2c3ca:	5139      	.short	0x5139
   2c3cc:	783d7824 	.word	0x783d7824
   2c3d0:	7878      	.short	0x7878
   2c3d2:	64          	.byte	0x64
   2c3d3:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2c3d4:	6923      	ldr	r3, [r4, #16]
   2c3d6:	689b      	ldr	r3, [r3, #8]
   2c3d8:	2b00      	cmp	r3, #0
   2c3da:	d0e9      	beq.n	2c3b0 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   2c3dc:	2301      	movs	r3, #1
   2c3de:	e7c0      	b.n	2c362 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   2c3e0:	6923      	ldr	r3, [r4, #16]
   2c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c3e4:	2b00      	cmp	r3, #0
   2c3e6:	d0e3      	beq.n	2c3b0 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2c3e8:	2310      	movs	r3, #16
   2c3ea:	e7ba      	b.n	2c362 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2c3ec:	235c      	movs	r3, #92	; 0x5c
   2c3ee:	4a3f      	ldr	r2, [pc, #252]	; (2c4ec <register_events+0x20c>)
   2c3f0:	493f      	ldr	r1, [pc, #252]	; (2c4f0 <register_events+0x210>)
   2c3f2:	483a      	ldr	r0, [pc, #232]	; (2c4dc <register_events+0x1fc>)
   2c3f4:	f001 fcc8 	bl	2dd88 <printk>
   2c3f8:	7b61      	ldrb	r1, [r4, #13]
   2c3fa:	483e      	ldr	r0, [pc, #248]	; (2c4f4 <register_events+0x214>)
   2c3fc:	f001 011f 	and.w	r1, r1, #31
   2c400:	f001 fcc2 	bl	2dd88 <printk>
   2c404:	215c      	movs	r1, #92	; 0x5c
   2c406:	4839      	ldr	r0, [pc, #228]	; (2c4ec <register_events+0x20c>)
   2c408:	f001 ffa4 	bl	2e354 <assert_post_action>
		break;
   2c40c:	e7d0      	b.n	2c3b0 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2c40e:	2304      	movs	r3, #4
   2c410:	e7a7      	b.n	2c362 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2c412:	6923      	ldr	r3, [r4, #16]
   2c414:	b963      	cbnz	r3, 2c430 <register_events+0x150>
   2c416:	4938      	ldr	r1, [pc, #224]	; (2c4f8 <register_events+0x218>)
   2c418:	2386      	movs	r3, #134	; 0x86
   2c41a:	4a34      	ldr	r2, [pc, #208]	; (2c4ec <register_events+0x20c>)
   2c41c:	482f      	ldr	r0, [pc, #188]	; (2c4dc <register_events+0x1fc>)
   2c41e:	f001 fcb3 	bl	2dd88 <printk>
   2c422:	4836      	ldr	r0, [pc, #216]	; (2c4fc <register_events+0x21c>)
   2c424:	f001 fcb0 	bl	2dd88 <printk>
   2c428:	2186      	movs	r1, #134	; 0x86
   2c42a:	4830      	ldr	r0, [pc, #192]	; (2c4ec <register_events+0x20c>)
   2c42c:	f001 ff92 	bl	2e354 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2c430:	462a      	mov	r2, r5
   2c432:	4621      	mov	r1, r4
   2c434:	6920      	ldr	r0, [r4, #16]
   2c436:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2c438:	f009 f821 	bl	3547e <add_event>
	event->poller = poller;
   2c43c:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   2c43e:	f109 0901 	add.w	r9, r9, #1
   2c442:	e798      	b.n	2c376 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2c444:	6923      	ldr	r3, [r4, #16]
   2c446:	b963      	cbnz	r3, 2c462 <register_events+0x182>
   2c448:	492d      	ldr	r1, [pc, #180]	; (2c500 <register_events+0x220>)
   2c44a:	238a      	movs	r3, #138	; 0x8a
   2c44c:	4a27      	ldr	r2, [pc, #156]	; (2c4ec <register_events+0x20c>)
   2c44e:	4823      	ldr	r0, [pc, #140]	; (2c4dc <register_events+0x1fc>)
   2c450:	f001 fc9a 	bl	2dd88 <printk>
   2c454:	482b      	ldr	r0, [pc, #172]	; (2c504 <register_events+0x224>)
   2c456:	f001 fc97 	bl	2dd88 <printk>
   2c45a:	218a      	movs	r1, #138	; 0x8a
   2c45c:	4823      	ldr	r0, [pc, #140]	; (2c4ec <register_events+0x20c>)
   2c45e:	f001 ff79 	bl	2e354 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   2c462:	6920      	ldr	r0, [r4, #16]
   2c464:	462a      	mov	r2, r5
   2c466:	4621      	mov	r1, r4
   2c468:	3014      	adds	r0, #20
   2c46a:	e7e5      	b.n	2c438 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2c46c:	6923      	ldr	r3, [r4, #16]
   2c46e:	b963      	cbnz	r3, 2c48a <register_events+0x1aa>
   2c470:	4925      	ldr	r1, [pc, #148]	; (2c508 <register_events+0x228>)
   2c472:	238e      	movs	r3, #142	; 0x8e
   2c474:	4a1d      	ldr	r2, [pc, #116]	; (2c4ec <register_events+0x20c>)
   2c476:	4819      	ldr	r0, [pc, #100]	; (2c4dc <register_events+0x1fc>)
   2c478:	f001 fc86 	bl	2dd88 <printk>
   2c47c:	4823      	ldr	r0, [pc, #140]	; (2c50c <register_events+0x22c>)
   2c47e:	f001 fc83 	bl	2dd88 <printk>
   2c482:	218e      	movs	r1, #142	; 0x8e
   2c484:	4819      	ldr	r0, [pc, #100]	; (2c4ec <register_events+0x20c>)
   2c486:	f001 ff65 	bl	2e354 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2c48a:	462a      	mov	r2, r5
   2c48c:	4621      	mov	r1, r4
   2c48e:	6920      	ldr	r0, [r4, #16]
   2c490:	e7d2      	b.n	2c438 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2c492:	6923      	ldr	r3, [r4, #16]
   2c494:	b963      	cbnz	r3, 2c4b0 <register_events+0x1d0>
   2c496:	491e      	ldr	r1, [pc, #120]	; (2c510 <register_events+0x230>)
   2c498:	2392      	movs	r3, #146	; 0x92
   2c49a:	4a14      	ldr	r2, [pc, #80]	; (2c4ec <register_events+0x20c>)
   2c49c:	480f      	ldr	r0, [pc, #60]	; (2c4dc <register_events+0x1fc>)
   2c49e:	f001 fc73 	bl	2dd88 <printk>
   2c4a2:	481c      	ldr	r0, [pc, #112]	; (2c514 <register_events+0x234>)
   2c4a4:	f001 fc70 	bl	2dd88 <printk>
   2c4a8:	2192      	movs	r1, #146	; 0x92
   2c4aa:	4810      	ldr	r0, [pc, #64]	; (2c4ec <register_events+0x20c>)
   2c4ac:	f001 ff52 	bl	2e354 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   2c4b0:	6920      	ldr	r0, [r4, #16]
   2c4b2:	462a      	mov	r2, r5
   2c4b4:	4621      	mov	r1, r4
   2c4b6:	3028      	adds	r0, #40	; 0x28
   2c4b8:	e7be      	b.n	2c438 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   2c4ba:	2399      	movs	r3, #153	; 0x99
   2c4bc:	4a0b      	ldr	r2, [pc, #44]	; (2c4ec <register_events+0x20c>)
   2c4be:	490c      	ldr	r1, [pc, #48]	; (2c4f0 <register_events+0x210>)
   2c4c0:	4806      	ldr	r0, [pc, #24]	; (2c4dc <register_events+0x1fc>)
   2c4c2:	f001 fc61 	bl	2dd88 <printk>
   2c4c6:	4814      	ldr	r0, [pc, #80]	; (2c518 <register_events+0x238>)
   2c4c8:	f001 fc5e 	bl	2dd88 <printk>
   2c4cc:	2199      	movs	r1, #153	; 0x99
   2c4ce:	4807      	ldr	r0, [pc, #28]	; (2c4ec <register_events+0x20c>)
   2c4d0:	f001 ff40 	bl	2e354 <assert_post_action>
		break;
   2c4d4:	e7b2      	b.n	2c43c <register_events+0x15c>
   2c4d6:	bf00      	nop
   2c4d8:	20016bd0 	.word	0x20016bd0
   2c4dc:	00037f2c 	.word	0x00037f2c
   2c4e0:	00038053 	.word	0x00038053
   2c4e4:	00038012 	.word	0x00038012
   2c4e8:	00038029 	.word	0x00038029
   2c4ec:	0003e5fd 	.word	0x0003e5fd
   2c4f0:	0003e845 	.word	0x0003e845
   2c4f4:	0003e6f8 	.word	0x0003e6f8
   2c4f8:	0003e61e 	.word	0x0003e61e
   2c4fc:	0003e638 	.word	0x0003e638
   2c500:	0003e64d 	.word	0x0003e64d
   2c504:	0003e669 	.word	0x0003e669
   2c508:	0003e67a 	.word	0x0003e67a
   2c50c:	0003e697 	.word	0x0003e697
   2c510:	0003e6ae 	.word	0x0003e6ae
   2c514:	0003e6c9 	.word	0x0003e6c9
   2c518:	0003e6e2 	.word	0x0003e6e2
   2c51c:	00037fec 	.word	0x00037fec
   2c520:	0003803e 	.word	0x0003803e

0002c524 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   2c524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2c528:	6884      	ldr	r4, [r0, #8]
{
   2c52a:	4605      	mov	r5, r0
   2c52c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   2c52e:	b1d4      	cbz	r4, 2c566 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   2c530:	7863      	ldrb	r3, [r4, #1]
   2c532:	2b01      	cmp	r3, #1
   2c534:	d14b      	bne.n	2c5ce <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   2c536:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   2c53a:	d10e      	bne.n	2c55a <signal_poll_event+0x36>
   2c53c:	23f5      	movs	r3, #245	; 0xf5
   2c53e:	4a30      	ldr	r2, [pc, #192]	; (2c600 <signal_poll_event+0xdc>)
   2c540:	4930      	ldr	r1, [pc, #192]	; (2c604 <signal_poll_event+0xe0>)
   2c542:	4831      	ldr	r0, [pc, #196]	; (2c608 <signal_poll_event+0xe4>)
   2c544:	f001 fc20 	bl	2dd88 <printk>
   2c548:	4830      	ldr	r0, [pc, #192]	; (2c60c <signal_poll_event+0xe8>)
   2c54a:	f001 fc1d 	bl	2dd88 <printk>
   2c54e:	21f5      	movs	r1, #245	; 0xf5
   2c550:	482b      	ldr	r0, [pc, #172]	; (2c600 <signal_poll_event+0xdc>)
   2c552:	f001 feff 	bl	2e354 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   2c556:	7b7b      	ldrb	r3, [r7, #13]
   2c558:	deff      	udf	#255	; 0xff
   2c55a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2c55e:	f013 0302 	ands.w	r3, r3, #2
   2c562:	d10a      	bne.n	2c57a <signal_poll_event+0x56>
			retcode = signal_triggered_work(event, state);
		} else {
			;
		}

		poller->is_polling = false;
   2c564:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2c566:	2000      	movs	r0, #0
	event->state |= state;
   2c568:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2c56a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2c56c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2c570:	430e      	orrs	r6, r1
   2c572:	f366 3352 	bfi	r3, r6, #13, #6
   2c576:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   2c578:	e00d      	b.n	2c596 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   2c57a:	f04f 31ff 	mov.w	r1, #4294967295
   2c57e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2c582:	f06f 0001 	mvn.w	r0, #1
   2c586:	428b      	cmp	r3, r1
   2c588:	bf08      	it	eq
   2c58a:	4282      	cmpeq	r2, r0
   2c58c:	d105      	bne.n	2c59a <signal_poll_event+0x76>
		poller->is_polling = false;
   2c58e:	2300      	movs	r3, #0
		return -EAGAIN;
   2c590:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2c594:	7023      	strb	r3, [r4, #0]
}
   2c596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   2c59a:	4638      	mov	r0, r7
   2c59c:	f7fe f998 	bl	2a8d0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2c5a0:	2e08      	cmp	r6, #8
   2c5a2:	bf0c      	ite	eq
   2c5a4:	f06f 0303 	mvneq.w	r3, #3
   2c5a8:	2300      	movne	r3, #0
   2c5aa:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2c5ac:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2c5b0:	06db      	lsls	r3, r3, #27
   2c5b2:	d104      	bne.n	2c5be <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   2c5b4:	f854 8c48 	ldr.w	r8, [r4, #-72]
   2c5b8:	f1b8 0f00 	cmp.w	r8, #0
   2c5bc:	d001      	beq.n	2c5c2 <signal_poll_event+0x9e>
		poller->is_polling = false;
   2c5be:	2300      	movs	r3, #0
   2c5c0:	e7d0      	b.n	2c564 <signal_poll_event+0x40>
	z_ready_thread(thread);
   2c5c2:	4638      	mov	r0, r7
   2c5c4:	f7fe fd00 	bl	2afc8 <z_ready_thread>
		poller->is_polling = false;
   2c5c8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2c5cc:	e7cb      	b.n	2c566 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   2c5ce:	2b02      	cmp	r3, #2
   2c5d0:	d1f5      	bne.n	2c5be <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2c5d2:	7823      	ldrb	r3, [r4, #0]
   2c5d4:	2b00      	cmp	r3, #0
   2c5d6:	d0c6      	beq.n	2c566 <signal_poll_event+0x42>
   2c5d8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2c5dc:	b177      	cbz	r7, 2c5fc <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2c5de:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2c5e2:	f1a4 0914 	sub.w	r9, r4, #20
   2c5e6:	f104 0014 	add.w	r0, r4, #20
   2c5ea:	f7ff fb23 	bl	2bc34 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   2c5ee:	4649      	mov	r1, r9
   2c5f0:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2c5f2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2c5f6:	f7fd fcaf 	bl	29f58 <k_work_submit_to_queue>
   2c5fa:	e7e5      	b.n	2c5c8 <signal_poll_event+0xa4>
		poller->is_polling = false;
   2c5fc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2c5fe:	e7b2      	b.n	2c566 <signal_poll_event+0x42>
   2c600:	0003e5fd 	.word	0x0003e5fd
   2c604:	0003e715 	.word	0x0003e715
   2c608:	00037f2c 	.word	0x00037f2c
   2c60c:	0003e72b 	.word	0x0003e72b

0002c610 <z_impl_k_poll>:
{
   2c610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c614:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   2c616:	4b75      	ldr	r3, [pc, #468]	; (2c7ec <z_impl_k_poll+0x1dc>)
{
   2c618:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   2c61a:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   2c61c:	2301      	movs	r3, #1
{
   2c61e:	4688      	mov	r8, r1
   2c620:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   2c622:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   2c626:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   2c62a:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   2c62e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2c632:	b173      	cbz	r3, 2c652 <z_impl_k_poll+0x42>
   2c634:	496e      	ldr	r1, [pc, #440]	; (2c7f0 <z_impl_k_poll+0x1e0>)
   2c636:	f44f 738b 	mov.w	r3, #278	; 0x116
   2c63a:	4a6e      	ldr	r2, [pc, #440]	; (2c7f4 <z_impl_k_poll+0x1e4>)
   2c63c:	486e      	ldr	r0, [pc, #440]	; (2c7f8 <z_impl_k_poll+0x1e8>)
   2c63e:	f001 fba3 	bl	2dd88 <printk>
   2c642:	486e      	ldr	r0, [pc, #440]	; (2c7fc <z_impl_k_poll+0x1ec>)
   2c644:	f001 fba0 	bl	2dd88 <printk>
   2c648:	f44f 718b 	mov.w	r1, #278	; 0x116
   2c64c:	4869      	ldr	r0, [pc, #420]	; (2c7f4 <z_impl_k_poll+0x1e4>)
   2c64e:	f001 fe81 	bl	2e354 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2c652:	b974      	cbnz	r4, 2c672 <z_impl_k_poll+0x62>
   2c654:	496a      	ldr	r1, [pc, #424]	; (2c800 <z_impl_k_poll+0x1f0>)
   2c656:	f240 1317 	movw	r3, #279	; 0x117
   2c65a:	4a66      	ldr	r2, [pc, #408]	; (2c7f4 <z_impl_k_poll+0x1e4>)
   2c65c:	4866      	ldr	r0, [pc, #408]	; (2c7f8 <z_impl_k_poll+0x1e8>)
   2c65e:	f001 fb93 	bl	2dd88 <printk>
   2c662:	4868      	ldr	r0, [pc, #416]	; (2c804 <z_impl_k_poll+0x1f4>)
   2c664:	f001 fb90 	bl	2dd88 <printk>
   2c668:	f240 1117 	movw	r1, #279	; 0x117
   2c66c:	4861      	ldr	r0, [pc, #388]	; (2c7f4 <z_impl_k_poll+0x1e4>)
   2c66e:	f001 fe71 	bl	2e354 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2c672:	f1b8 0f00 	cmp.w	r8, #0
   2c676:	da0e      	bge.n	2c696 <z_impl_k_poll+0x86>
   2c678:	4963      	ldr	r1, [pc, #396]	; (2c808 <z_impl_k_poll+0x1f8>)
   2c67a:	f44f 738c 	mov.w	r3, #280	; 0x118
   2c67e:	4a5d      	ldr	r2, [pc, #372]	; (2c7f4 <z_impl_k_poll+0x1e4>)
   2c680:	485d      	ldr	r0, [pc, #372]	; (2c7f8 <z_impl_k_poll+0x1e8>)
   2c682:	f001 fb81 	bl	2dd88 <printk>
   2c686:	4861      	ldr	r0, [pc, #388]	; (2c80c <z_impl_k_poll+0x1fc>)
   2c688:	f001 fb7e 	bl	2dd88 <printk>
   2c68c:	f44f 718c 	mov.w	r1, #280	; 0x118
   2c690:	4858      	ldr	r0, [pc, #352]	; (2c7f4 <z_impl_k_poll+0x1e4>)
   2c692:	f001 fe5f 	bl	2e354 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   2c696:	ea56 0307 	orrs.w	r3, r6, r7
   2c69a:	bf0c      	ite	eq
   2c69c:	2301      	moveq	r3, #1
   2c69e:	2300      	movne	r3, #0
   2c6a0:	4641      	mov	r1, r8
   2c6a2:	464a      	mov	r2, r9
   2c6a4:	4620      	mov	r0, r4
   2c6a6:	f7ff fe1b 	bl	2c2e0 <register_events>
   2c6aa:	4680      	mov	r8, r0
	__asm__ volatile(
   2c6ac:	f04f 0320 	mov.w	r3, #32
   2c6b0:	f3ef 8911 	mrs	r9, BASEPRI
   2c6b4:	f383 8811 	msr	BASEPRI, r3
   2c6b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c6bc:	4854      	ldr	r0, [pc, #336]	; (2c810 <z_impl_k_poll+0x200>)
   2c6be:	f7fc fc59 	bl	28f74 <z_spin_lock_valid>
   2c6c2:	b968      	cbnz	r0, 2c6e0 <z_impl_k_poll+0xd0>
   2c6c4:	2381      	movs	r3, #129	; 0x81
   2c6c6:	4a53      	ldr	r2, [pc, #332]	; (2c814 <z_impl_k_poll+0x204>)
   2c6c8:	4953      	ldr	r1, [pc, #332]	; (2c818 <z_impl_k_poll+0x208>)
   2c6ca:	484b      	ldr	r0, [pc, #300]	; (2c7f8 <z_impl_k_poll+0x1e8>)
   2c6cc:	f001 fb5c 	bl	2dd88 <printk>
   2c6d0:	494f      	ldr	r1, [pc, #316]	; (2c810 <z_impl_k_poll+0x200>)
   2c6d2:	4852      	ldr	r0, [pc, #328]	; (2c81c <z_impl_k_poll+0x20c>)
   2c6d4:	f001 fb58 	bl	2dd88 <printk>
   2c6d8:	2181      	movs	r1, #129	; 0x81
   2c6da:	484e      	ldr	r0, [pc, #312]	; (2c814 <z_impl_k_poll+0x204>)
   2c6dc:	f001 fe3a 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c6e0:	484b      	ldr	r0, [pc, #300]	; (2c810 <z_impl_k_poll+0x200>)
   2c6e2:	f7fc fc63 	bl	28fac <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   2c6e6:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   2c6ea:	b9fb      	cbnz	r3, 2c72c <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   2c6ec:	4620      	mov	r0, r4
   2c6ee:	464a      	mov	r2, r9
   2c6f0:	4641      	mov	r1, r8
   2c6f2:	f7ff fd27 	bl	2c144 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c6f6:	4846      	ldr	r0, [pc, #280]	; (2c810 <z_impl_k_poll+0x200>)
   2c6f8:	f7fc fc4a 	bl	28f90 <z_spin_unlock_valid>
   2c6fc:	b968      	cbnz	r0, 2c71a <z_impl_k_poll+0x10a>
   2c6fe:	23ac      	movs	r3, #172	; 0xac
   2c700:	4a44      	ldr	r2, [pc, #272]	; (2c814 <z_impl_k_poll+0x204>)
   2c702:	4947      	ldr	r1, [pc, #284]	; (2c820 <z_impl_k_poll+0x210>)
   2c704:	483c      	ldr	r0, [pc, #240]	; (2c7f8 <z_impl_k_poll+0x1e8>)
   2c706:	f001 fb3f 	bl	2dd88 <printk>
   2c70a:	4941      	ldr	r1, [pc, #260]	; (2c810 <z_impl_k_poll+0x200>)
   2c70c:	4845      	ldr	r0, [pc, #276]	; (2c824 <z_impl_k_poll+0x214>)
   2c70e:	f001 fb3b 	bl	2dd88 <printk>
   2c712:	21ac      	movs	r1, #172	; 0xac
   2c714:	483f      	ldr	r0, [pc, #252]	; (2c814 <z_impl_k_poll+0x204>)
   2c716:	f001 fe1d 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2c71a:	f389 8811 	msr	BASEPRI, r9
   2c71e:	f3bf 8f6f 	isb	sy
		return 0;
   2c722:	2500      	movs	r5, #0
}
   2c724:	4628      	mov	r0, r5
   2c726:	b003      	add	sp, #12
   2c728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   2c72c:	2300      	movs	r3, #0
   2c72e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c732:	ea56 0307 	orrs.w	r3, r6, r7
   2c736:	d118      	bne.n	2c76a <z_impl_k_poll+0x15a>
   2c738:	4835      	ldr	r0, [pc, #212]	; (2c810 <z_impl_k_poll+0x200>)
   2c73a:	f7fc fc29 	bl	28f90 <z_spin_unlock_valid>
   2c73e:	b968      	cbnz	r0, 2c75c <z_impl_k_poll+0x14c>
   2c740:	23ac      	movs	r3, #172	; 0xac
   2c742:	4a34      	ldr	r2, [pc, #208]	; (2c814 <z_impl_k_poll+0x204>)
   2c744:	4936      	ldr	r1, [pc, #216]	; (2c820 <z_impl_k_poll+0x210>)
   2c746:	482c      	ldr	r0, [pc, #176]	; (2c7f8 <z_impl_k_poll+0x1e8>)
   2c748:	f001 fb1e 	bl	2dd88 <printk>
   2c74c:	4930      	ldr	r1, [pc, #192]	; (2c810 <z_impl_k_poll+0x200>)
   2c74e:	4835      	ldr	r0, [pc, #212]	; (2c824 <z_impl_k_poll+0x214>)
   2c750:	f001 fb1a 	bl	2dd88 <printk>
   2c754:	21ac      	movs	r1, #172	; 0xac
   2c756:	482f      	ldr	r0, [pc, #188]	; (2c814 <z_impl_k_poll+0x204>)
   2c758:	f001 fdfc 	bl	2e354 <assert_post_action>
   2c75c:	f389 8811 	msr	BASEPRI, r9
   2c760:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2c764:	f06f 050a 	mvn.w	r5, #10
   2c768:	e7dc      	b.n	2c724 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2c76a:	4649      	mov	r1, r9
   2c76c:	e9cd 6700 	strd	r6, r7, [sp]
   2c770:	4a2d      	ldr	r2, [pc, #180]	; (2c828 <z_impl_k_poll+0x218>)
   2c772:	4827      	ldr	r0, [pc, #156]	; (2c810 <z_impl_k_poll+0x200>)
   2c774:	f7fe f9ee 	bl	2ab54 <z_pend_curr>
   2c778:	4605      	mov	r5, r0
	__asm__ volatile(
   2c77a:	f04f 0320 	mov.w	r3, #32
   2c77e:	f3ef 8611 	mrs	r6, BASEPRI
   2c782:	f383 8811 	msr	BASEPRI, r3
   2c786:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c78a:	4821      	ldr	r0, [pc, #132]	; (2c810 <z_impl_k_poll+0x200>)
   2c78c:	f7fc fbf2 	bl	28f74 <z_spin_lock_valid>
   2c790:	b968      	cbnz	r0, 2c7ae <z_impl_k_poll+0x19e>
   2c792:	2381      	movs	r3, #129	; 0x81
   2c794:	4a1f      	ldr	r2, [pc, #124]	; (2c814 <z_impl_k_poll+0x204>)
   2c796:	4920      	ldr	r1, [pc, #128]	; (2c818 <z_impl_k_poll+0x208>)
   2c798:	4817      	ldr	r0, [pc, #92]	; (2c7f8 <z_impl_k_poll+0x1e8>)
   2c79a:	f001 faf5 	bl	2dd88 <printk>
   2c79e:	491c      	ldr	r1, [pc, #112]	; (2c810 <z_impl_k_poll+0x200>)
   2c7a0:	481e      	ldr	r0, [pc, #120]	; (2c81c <z_impl_k_poll+0x20c>)
   2c7a2:	f001 faf1 	bl	2dd88 <printk>
   2c7a6:	2181      	movs	r1, #129	; 0x81
   2c7a8:	481a      	ldr	r0, [pc, #104]	; (2c814 <z_impl_k_poll+0x204>)
   2c7aa:	f001 fdd3 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c7ae:	4818      	ldr	r0, [pc, #96]	; (2c810 <z_impl_k_poll+0x200>)
   2c7b0:	f7fc fbfc 	bl	28fac <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2c7b4:	4620      	mov	r0, r4
   2c7b6:	4632      	mov	r2, r6
   2c7b8:	4641      	mov	r1, r8
   2c7ba:	f7ff fcc3 	bl	2c144 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c7be:	4814      	ldr	r0, [pc, #80]	; (2c810 <z_impl_k_poll+0x200>)
   2c7c0:	f7fc fbe6 	bl	28f90 <z_spin_unlock_valid>
   2c7c4:	b968      	cbnz	r0, 2c7e2 <z_impl_k_poll+0x1d2>
   2c7c6:	23ac      	movs	r3, #172	; 0xac
   2c7c8:	4a12      	ldr	r2, [pc, #72]	; (2c814 <z_impl_k_poll+0x204>)
   2c7ca:	4915      	ldr	r1, [pc, #84]	; (2c820 <z_impl_k_poll+0x210>)
   2c7cc:	480a      	ldr	r0, [pc, #40]	; (2c7f8 <z_impl_k_poll+0x1e8>)
   2c7ce:	f001 fadb 	bl	2dd88 <printk>
   2c7d2:	490f      	ldr	r1, [pc, #60]	; (2c810 <z_impl_k_poll+0x200>)
   2c7d4:	4813      	ldr	r0, [pc, #76]	; (2c824 <z_impl_k_poll+0x214>)
   2c7d6:	f001 fad7 	bl	2dd88 <printk>
   2c7da:	21ac      	movs	r1, #172	; 0xac
   2c7dc:	480d      	ldr	r0, [pc, #52]	; (2c814 <z_impl_k_poll+0x204>)
   2c7de:	f001 fdb9 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2c7e2:	f386 8811 	msr	BASEPRI, r6
   2c7e6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2c7ea:	e79b      	b.n	2c724 <z_impl_k_poll+0x114>
   2c7ec:	20016b74 	.word	0x20016b74
   2c7f0:	0003e204 	.word	0x0003e204
   2c7f4:	0003e5fd 	.word	0x0003e5fd
   2c7f8:	00037f2c 	.word	0x00037f2c
   2c7fc:	000385b8 	.word	0x000385b8
   2c800:	0003e74a 	.word	0x0003e74a
   2c804:	0003e760 	.word	0x0003e760
   2c808:	0003e76f 	.word	0x0003e76f
   2c80c:	0003e77f 	.word	0x0003e77f
   2c810:	20016bd0 	.word	0x20016bd0
   2c814:	00037fec 	.word	0x00037fec
   2c818:	0003803e 	.word	0x0003803e
   2c81c:	00038053 	.word	0x00038053
   2c820:	00038012 	.word	0x00038012
   2c824:	00038029 	.word	0x00038029
   2c828:	200149c4 	.word	0x200149c4

0002c82c <z_impl_k_poll_signal_raise>:
{
   2c82c:	b570      	push	{r4, r5, r6, lr}
   2c82e:	4604      	mov	r4, r0
   2c830:	460d      	mov	r5, r1
	__asm__ volatile(
   2c832:	f04f 0320 	mov.w	r3, #32
   2c836:	f3ef 8611 	mrs	r6, BASEPRI
   2c83a:	f383 8811 	msr	BASEPRI, r3
   2c83e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c842:	4821      	ldr	r0, [pc, #132]	; (2c8c8 <z_impl_k_poll_signal_raise+0x9c>)
   2c844:	f7fc fb96 	bl	28f74 <z_spin_lock_valid>
   2c848:	b968      	cbnz	r0, 2c866 <z_impl_k_poll_signal_raise+0x3a>
   2c84a:	2381      	movs	r3, #129	; 0x81
   2c84c:	4a1f      	ldr	r2, [pc, #124]	; (2c8cc <z_impl_k_poll_signal_raise+0xa0>)
   2c84e:	4920      	ldr	r1, [pc, #128]	; (2c8d0 <z_impl_k_poll_signal_raise+0xa4>)
   2c850:	4820      	ldr	r0, [pc, #128]	; (2c8d4 <z_impl_k_poll_signal_raise+0xa8>)
   2c852:	f001 fa99 	bl	2dd88 <printk>
   2c856:	491c      	ldr	r1, [pc, #112]	; (2c8c8 <z_impl_k_poll_signal_raise+0x9c>)
   2c858:	481f      	ldr	r0, [pc, #124]	; (2c8d8 <z_impl_k_poll_signal_raise+0xac>)
   2c85a:	f001 fa95 	bl	2dd88 <printk>
   2c85e:	2181      	movs	r1, #129	; 0x81
   2c860:	481a      	ldr	r0, [pc, #104]	; (2c8cc <z_impl_k_poll_signal_raise+0xa0>)
   2c862:	f001 fd77 	bl	2e354 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c866:	4818      	ldr	r0, [pc, #96]	; (2c8c8 <z_impl_k_poll_signal_raise+0x9c>)
   2c868:	f7fc fba0 	bl	28fac <z_spin_lock_set_owner>
	sig->signaled = 1U;
   2c86c:	2101      	movs	r1, #1
	return list->head == list;
   2c86e:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   2c870:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2c872:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   2c874:	60a1      	str	r1, [r4, #8]
   2c876:	d117      	bne.n	2c8a8 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c878:	4813      	ldr	r0, [pc, #76]	; (2c8c8 <z_impl_k_poll_signal_raise+0x9c>)
   2c87a:	f7fc fb89 	bl	28f90 <z_spin_unlock_valid>
   2c87e:	b968      	cbnz	r0, 2c89c <z_impl_k_poll_signal_raise+0x70>
   2c880:	23ac      	movs	r3, #172	; 0xac
   2c882:	4a12      	ldr	r2, [pc, #72]	; (2c8cc <z_impl_k_poll_signal_raise+0xa0>)
   2c884:	4915      	ldr	r1, [pc, #84]	; (2c8dc <z_impl_k_poll_signal_raise+0xb0>)
   2c886:	4813      	ldr	r0, [pc, #76]	; (2c8d4 <z_impl_k_poll_signal_raise+0xa8>)
   2c888:	f001 fa7e 	bl	2dd88 <printk>
   2c88c:	490e      	ldr	r1, [pc, #56]	; (2c8c8 <z_impl_k_poll_signal_raise+0x9c>)
   2c88e:	4814      	ldr	r0, [pc, #80]	; (2c8e0 <z_impl_k_poll_signal_raise+0xb4>)
   2c890:	f001 fa7a 	bl	2dd88 <printk>
   2c894:	21ac      	movs	r1, #172	; 0xac
   2c896:	480d      	ldr	r0, [pc, #52]	; (2c8cc <z_impl_k_poll_signal_raise+0xa0>)
   2c898:	f001 fd5c 	bl	2e354 <assert_post_action>
	__asm__ volatile(
   2c89c:	f386 8811 	msr	BASEPRI, r6
   2c8a0:	f3bf 8f6f 	isb	sy
		return 0;
   2c8a4:	2400      	movs	r4, #0
   2c8a6:	e00d      	b.n	2c8c4 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   2c8a8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2c8ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c8ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c8b0:	2300      	movs	r3, #0
	node->prev = NULL;
   2c8b2:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2c8b6:	f7ff fe35 	bl	2c524 <signal_poll_event>
	z_reschedule(&lock, key);
   2c8ba:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2c8bc:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2c8be:	4802      	ldr	r0, [pc, #8]	; (2c8c8 <z_impl_k_poll_signal_raise+0x9c>)
   2c8c0:	f7fd ff0a 	bl	2a6d8 <z_reschedule>
}
   2c8c4:	4620      	mov	r0, r4
   2c8c6:	bd70      	pop	{r4, r5, r6, pc}
   2c8c8:	20016bd0 	.word	0x20016bd0
   2c8cc:	00037fec 	.word	0x00037fec
   2c8d0:	0003803e 	.word	0x0003803e
   2c8d4:	00037f2c 	.word	0x00037f2c
   2c8d8:	00038053 	.word	0x00038053
   2c8dc:	00038012 	.word	0x00038012
   2c8e0:	00038029 	.word	0x00038029

0002c8e4 <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2c8e4:	2304      	movs	r3, #4
   2c8e6:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2c8e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2c8ec:	4606      	mov	r6, r0
   2c8ee:	460d      	mov	r5, r1
   2c8f0:	d20a      	bcs.n	2c908 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2c8f2:	f04f 0800 	mov.w	r8, #0
   2c8f6:	f04f 0900 	mov.w	r9, #0
   2c8fa:	4319      	orrs	r1, r3
   2c8fc:	e9cd 8900 	strd	r8, r9, [sp]
   2c900:	f7fb ffec 	bl	288dc <k_heap_aligned_alloc>
	if (mem == NULL) {
   2c904:	4604      	mov	r4, r0
   2c906:	b920      	cbnz	r0, 2c912 <z_heap_aligned_alloc+0x2e>
		return NULL;
   2c908:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   2c90a:	4620      	mov	r0, r4
   2c90c:	b002      	add	sp, #8
   2c90e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   2c912:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   2c916:	2d00      	cmp	r5, #0
   2c918:	d0f7      	beq.n	2c90a <z_heap_aligned_alloc+0x26>
   2c91a:	1e6b      	subs	r3, r5, #1
   2c91c:	421c      	tst	r4, r3
   2c91e:	d0f4      	beq.n	2c90a <z_heap_aligned_alloc+0x26>
   2c920:	2325      	movs	r3, #37	; 0x25
   2c922:	4a07      	ldr	r2, [pc, #28]	; (2c940 <z_heap_aligned_alloc+0x5c>)
   2c924:	4907      	ldr	r1, [pc, #28]	; (2c944 <z_heap_aligned_alloc+0x60>)
   2c926:	4808      	ldr	r0, [pc, #32]	; (2c948 <z_heap_aligned_alloc+0x64>)
   2c928:	f001 fa2e 	bl	2dd88 <printk>
   2c92c:	4621      	mov	r1, r4
   2c92e:	462a      	mov	r2, r5
   2c930:	4806      	ldr	r0, [pc, #24]	; (2c94c <z_heap_aligned_alloc+0x68>)
   2c932:	f001 fa29 	bl	2dd88 <printk>
   2c936:	2125      	movs	r1, #37	; 0x25
   2c938:	4801      	ldr	r0, [pc, #4]	; (2c940 <z_heap_aligned_alloc+0x5c>)
   2c93a:	f001 fd0b 	bl	2e354 <assert_post_action>
   2c93e:	e7e4      	b.n	2c90a <z_heap_aligned_alloc+0x26>
   2c940:	0003e78c 	.word	0x0003e78c
   2c944:	0003e7b0 	.word	0x0003e7b0
   2c948:	00037f2c 	.word	0x00037f2c
   2c94c:	0003e7e2 	.word	0x0003e7e2

0002c950 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   2c950:	2803      	cmp	r0, #3
{
   2c952:	b538      	push	{r3, r4, r5, lr}
   2c954:	4604      	mov	r4, r0
   2c956:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   2c958:	d901      	bls.n	2c95e <k_aligned_alloc+0xe>
   2c95a:	0783      	lsls	r3, r0, #30
   2c95c:	d00c      	beq.n	2c978 <k_aligned_alloc+0x28>
   2c95e:	4912      	ldr	r1, [pc, #72]	; (2c9a8 <k_aligned_alloc+0x58>)
   2c960:	2342      	movs	r3, #66	; 0x42
   2c962:	4a12      	ldr	r2, [pc, #72]	; (2c9ac <k_aligned_alloc+0x5c>)
   2c964:	4812      	ldr	r0, [pc, #72]	; (2c9b0 <k_aligned_alloc+0x60>)
   2c966:	f001 fa0f 	bl	2dd88 <printk>
   2c96a:	4812      	ldr	r0, [pc, #72]	; (2c9b4 <k_aligned_alloc+0x64>)
   2c96c:	f001 fa0c 	bl	2dd88 <printk>
   2c970:	2142      	movs	r1, #66	; 0x42
   2c972:	480e      	ldr	r0, [pc, #56]	; (2c9ac <k_aligned_alloc+0x5c>)
   2c974:	f001 fcee 	bl	2e354 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   2c978:	1e63      	subs	r3, r4, #1
   2c97a:	4223      	tst	r3, r4
   2c97c:	d00c      	beq.n	2c998 <k_aligned_alloc+0x48>
   2c97e:	490e      	ldr	r1, [pc, #56]	; (2c9b8 <k_aligned_alloc+0x68>)
   2c980:	2346      	movs	r3, #70	; 0x46
   2c982:	4a0a      	ldr	r2, [pc, #40]	; (2c9ac <k_aligned_alloc+0x5c>)
   2c984:	480a      	ldr	r0, [pc, #40]	; (2c9b0 <k_aligned_alloc+0x60>)
   2c986:	f001 f9ff 	bl	2dd88 <printk>
   2c98a:	480c      	ldr	r0, [pc, #48]	; (2c9bc <k_aligned_alloc+0x6c>)
   2c98c:	f001 f9fc 	bl	2dd88 <printk>
   2c990:	2146      	movs	r1, #70	; 0x46
   2c992:	4806      	ldr	r0, [pc, #24]	; (2c9ac <k_aligned_alloc+0x5c>)
   2c994:	f001 fcde 	bl	2e354 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2c998:	462a      	mov	r2, r5
   2c99a:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   2c99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2c9a0:	4807      	ldr	r0, [pc, #28]	; (2c9c0 <k_aligned_alloc+0x70>)
   2c9a2:	f7ff bf9f 	b.w	2c8e4 <z_heap_aligned_alloc>
   2c9a6:	bf00      	nop
   2c9a8:	0003e80a 	.word	0x0003e80a
   2c9ac:	0003e78c 	.word	0x0003e78c
   2c9b0:	00037f2c 	.word	0x00037f2c
   2c9b4:	0003e847 	.word	0x0003e847
   2c9b8:	000381bc 	.word	0x000381bc
   2c9bc:	000381d7 	.word	0x000381d7
   2c9c0:	20014de8 	.word	0x20014de8

0002c9c4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2c9c4:	b538      	push	{r3, r4, r5, lr}
   2c9c6:	4604      	mov	r4, r0
   2c9c8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2c9ca:	f008 fc22 	bl	35212 <k_is_in_isr>
   2c9ce:	b950      	cbnz	r0, 2c9e6 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2c9d0:	4b06      	ldr	r3, [pc, #24]	; (2c9ec <z_thread_aligned_alloc+0x28>)
   2c9d2:	689b      	ldr	r3, [r3, #8]
   2c9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2c9d6:	b143      	cbz	r3, 2c9ea <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   2c9d8:	462a      	mov	r2, r5
   2c9da:	4621      	mov	r1, r4
   2c9dc:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   2c9de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2c9e2:	f7ff bf7f 	b.w	2c8e4 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   2c9e6:	4b02      	ldr	r3, [pc, #8]	; (2c9f0 <z_thread_aligned_alloc+0x2c>)
   2c9e8:	e7f6      	b.n	2c9d8 <z_thread_aligned_alloc+0x14>
}
   2c9ea:	bd38      	pop	{r3, r4, r5, pc}
   2c9ec:	20016b74 	.word	0x20016b74
   2c9f0:	20014de8 	.word	0x20014de8

0002c9f4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2c9f4:	4a02      	ldr	r2, [pc, #8]	; (2ca00 <boot_banner+0xc>)
   2c9f6:	4903      	ldr	r1, [pc, #12]	; (2ca04 <boot_banner+0x10>)
   2c9f8:	4803      	ldr	r0, [pc, #12]	; (2ca08 <boot_banner+0x14>)
   2c9fa:	f001 b9c5 	b.w	2dd88 <printk>
   2c9fe:	bf00      	nop
   2ca00:	000385ba 	.word	0x000385ba
   2ca04:	0003e874 	.word	0x0003e874
   2ca08:	0003e899 	.word	0x0003e899

0002ca0c <malloc>:
   2ca0c:	4b02      	ldr	r3, [pc, #8]	; (2ca18 <malloc+0xc>)
   2ca0e:	4601      	mov	r1, r0
   2ca10:	6818      	ldr	r0, [r3, #0]
   2ca12:	f000 b851 	b.w	2cab8 <_malloc_r>
   2ca16:	bf00      	nop
   2ca18:	200149cc 	.word	0x200149cc

0002ca1c <_free_r>:
   2ca1c:	b538      	push	{r3, r4, r5, lr}
   2ca1e:	4605      	mov	r5, r0
   2ca20:	2900      	cmp	r1, #0
   2ca22:	d045      	beq.n	2cab0 <_free_r+0x94>
   2ca24:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2ca28:	1f0c      	subs	r4, r1, #4
   2ca2a:	2b00      	cmp	r3, #0
   2ca2c:	bfb8      	it	lt
   2ca2e:	18e4      	addlt	r4, r4, r3
   2ca30:	f000 fff8 	bl	2da24 <__malloc_lock>
   2ca34:	4a1f      	ldr	r2, [pc, #124]	; (2cab4 <_free_r+0x98>)
   2ca36:	6813      	ldr	r3, [r2, #0]
   2ca38:	4610      	mov	r0, r2
   2ca3a:	b933      	cbnz	r3, 2ca4a <_free_r+0x2e>
   2ca3c:	6063      	str	r3, [r4, #4]
   2ca3e:	6014      	str	r4, [r2, #0]
   2ca40:	4628      	mov	r0, r5
   2ca42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ca46:	f000 bff3 	b.w	2da30 <__malloc_unlock>
   2ca4a:	42a3      	cmp	r3, r4
   2ca4c:	d90b      	bls.n	2ca66 <_free_r+0x4a>
   2ca4e:	6821      	ldr	r1, [r4, #0]
   2ca50:	1862      	adds	r2, r4, r1
   2ca52:	4293      	cmp	r3, r2
   2ca54:	bf02      	ittt	eq
   2ca56:	681a      	ldreq	r2, [r3, #0]
   2ca58:	685b      	ldreq	r3, [r3, #4]
   2ca5a:	1852      	addeq	r2, r2, r1
   2ca5c:	6063      	str	r3, [r4, #4]
   2ca5e:	bf08      	it	eq
   2ca60:	6022      	streq	r2, [r4, #0]
   2ca62:	6004      	str	r4, [r0, #0]
   2ca64:	e7ec      	b.n	2ca40 <_free_r+0x24>
   2ca66:	461a      	mov	r2, r3
   2ca68:	685b      	ldr	r3, [r3, #4]
   2ca6a:	b10b      	cbz	r3, 2ca70 <_free_r+0x54>
   2ca6c:	42a3      	cmp	r3, r4
   2ca6e:	d9fa      	bls.n	2ca66 <_free_r+0x4a>
   2ca70:	6811      	ldr	r1, [r2, #0]
   2ca72:	1850      	adds	r0, r2, r1
   2ca74:	42a0      	cmp	r0, r4
   2ca76:	d10b      	bne.n	2ca90 <_free_r+0x74>
   2ca78:	6820      	ldr	r0, [r4, #0]
   2ca7a:	4401      	add	r1, r0
   2ca7c:	1850      	adds	r0, r2, r1
   2ca7e:	6011      	str	r1, [r2, #0]
   2ca80:	4283      	cmp	r3, r0
   2ca82:	d1dd      	bne.n	2ca40 <_free_r+0x24>
   2ca84:	6818      	ldr	r0, [r3, #0]
   2ca86:	685b      	ldr	r3, [r3, #4]
   2ca88:	4401      	add	r1, r0
   2ca8a:	6053      	str	r3, [r2, #4]
   2ca8c:	6011      	str	r1, [r2, #0]
   2ca8e:	e7d7      	b.n	2ca40 <_free_r+0x24>
   2ca90:	d902      	bls.n	2ca98 <_free_r+0x7c>
   2ca92:	230c      	movs	r3, #12
   2ca94:	602b      	str	r3, [r5, #0]
   2ca96:	e7d3      	b.n	2ca40 <_free_r+0x24>
   2ca98:	6820      	ldr	r0, [r4, #0]
   2ca9a:	1821      	adds	r1, r4, r0
   2ca9c:	428b      	cmp	r3, r1
   2ca9e:	bf02      	ittt	eq
   2caa0:	6819      	ldreq	r1, [r3, #0]
   2caa2:	685b      	ldreq	r3, [r3, #4]
   2caa4:	1809      	addeq	r1, r1, r0
   2caa6:	6063      	str	r3, [r4, #4]
   2caa8:	bf08      	it	eq
   2caaa:	6021      	streq	r1, [r4, #0]
   2caac:	6054      	str	r4, [r2, #4]
   2caae:	e7c7      	b.n	2ca40 <_free_r+0x24>
   2cab0:	bd38      	pop	{r3, r4, r5, pc}
   2cab2:	bf00      	nop
   2cab4:	2001abd4 	.word	0x2001abd4

0002cab8 <_malloc_r>:
   2cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2caba:	1ccd      	adds	r5, r1, #3
   2cabc:	4606      	mov	r6, r0
   2cabe:	f025 0503 	bic.w	r5, r5, #3
   2cac2:	3508      	adds	r5, #8
   2cac4:	2d0c      	cmp	r5, #12
   2cac6:	bf38      	it	cc
   2cac8:	250c      	movcc	r5, #12
   2caca:	2d00      	cmp	r5, #0
   2cacc:	db01      	blt.n	2cad2 <_malloc_r+0x1a>
   2cace:	42a9      	cmp	r1, r5
   2cad0:	d903      	bls.n	2cada <_malloc_r+0x22>
   2cad2:	230c      	movs	r3, #12
   2cad4:	6033      	str	r3, [r6, #0]
   2cad6:	2000      	movs	r0, #0
   2cad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cada:	f000 ffa3 	bl	2da24 <__malloc_lock>
   2cade:	4921      	ldr	r1, [pc, #132]	; (2cb64 <_malloc_r+0xac>)
   2cae0:	680a      	ldr	r2, [r1, #0]
   2cae2:	4614      	mov	r4, r2
   2cae4:	b99c      	cbnz	r4, 2cb0e <_malloc_r+0x56>
   2cae6:	4f20      	ldr	r7, [pc, #128]	; (2cb68 <_malloc_r+0xb0>)
   2cae8:	683b      	ldr	r3, [r7, #0]
   2caea:	b923      	cbnz	r3, 2caf6 <_malloc_r+0x3e>
   2caec:	4621      	mov	r1, r4
   2caee:	4630      	mov	r0, r6
   2caf0:	f000 fb8c 	bl	2d20c <_sbrk_r>
   2caf4:	6038      	str	r0, [r7, #0]
   2caf6:	4629      	mov	r1, r5
   2caf8:	4630      	mov	r0, r6
   2cafa:	f000 fb87 	bl	2d20c <_sbrk_r>
   2cafe:	1c43      	adds	r3, r0, #1
   2cb00:	d123      	bne.n	2cb4a <_malloc_r+0x92>
   2cb02:	230c      	movs	r3, #12
   2cb04:	4630      	mov	r0, r6
   2cb06:	6033      	str	r3, [r6, #0]
   2cb08:	f000 ff92 	bl	2da30 <__malloc_unlock>
   2cb0c:	e7e3      	b.n	2cad6 <_malloc_r+0x1e>
   2cb0e:	6823      	ldr	r3, [r4, #0]
   2cb10:	1b5b      	subs	r3, r3, r5
   2cb12:	d417      	bmi.n	2cb44 <_malloc_r+0x8c>
   2cb14:	2b0b      	cmp	r3, #11
   2cb16:	d903      	bls.n	2cb20 <_malloc_r+0x68>
   2cb18:	6023      	str	r3, [r4, #0]
   2cb1a:	441c      	add	r4, r3
   2cb1c:	6025      	str	r5, [r4, #0]
   2cb1e:	e004      	b.n	2cb2a <_malloc_r+0x72>
   2cb20:	6863      	ldr	r3, [r4, #4]
   2cb22:	42a2      	cmp	r2, r4
   2cb24:	bf0c      	ite	eq
   2cb26:	600b      	streq	r3, [r1, #0]
   2cb28:	6053      	strne	r3, [r2, #4]
   2cb2a:	4630      	mov	r0, r6
   2cb2c:	f000 ff80 	bl	2da30 <__malloc_unlock>
   2cb30:	f104 000b 	add.w	r0, r4, #11
   2cb34:	1d23      	adds	r3, r4, #4
   2cb36:	f020 0007 	bic.w	r0, r0, #7
   2cb3a:	1ac2      	subs	r2, r0, r3
   2cb3c:	d0cc      	beq.n	2cad8 <_malloc_r+0x20>
   2cb3e:	1a1b      	subs	r3, r3, r0
   2cb40:	50a3      	str	r3, [r4, r2]
   2cb42:	e7c9      	b.n	2cad8 <_malloc_r+0x20>
   2cb44:	4622      	mov	r2, r4
   2cb46:	6864      	ldr	r4, [r4, #4]
   2cb48:	e7cc      	b.n	2cae4 <_malloc_r+0x2c>
   2cb4a:	1cc4      	adds	r4, r0, #3
   2cb4c:	f024 0403 	bic.w	r4, r4, #3
   2cb50:	42a0      	cmp	r0, r4
   2cb52:	d0e3      	beq.n	2cb1c <_malloc_r+0x64>
   2cb54:	1a21      	subs	r1, r4, r0
   2cb56:	4630      	mov	r0, r6
   2cb58:	f000 fb58 	bl	2d20c <_sbrk_r>
   2cb5c:	3001      	adds	r0, #1
   2cb5e:	d1dd      	bne.n	2cb1c <_malloc_r+0x64>
   2cb60:	e7cf      	b.n	2cb02 <_malloc_r+0x4a>
   2cb62:	bf00      	nop
   2cb64:	2001abd4 	.word	0x2001abd4
   2cb68:	2001abd8 	.word	0x2001abd8

0002cb6c <_printf_float>:
   2cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb70:	b091      	sub	sp, #68	; 0x44
   2cb72:	460c      	mov	r4, r1
   2cb74:	4616      	mov	r6, r2
   2cb76:	461f      	mov	r7, r3
   2cb78:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2cb7c:	4605      	mov	r5, r0
   2cb7e:	f000 ff4d 	bl	2da1c <_localeconv_r>
   2cb82:	6803      	ldr	r3, [r0, #0]
   2cb84:	4618      	mov	r0, r3
   2cb86:	9309      	str	r3, [sp, #36]	; 0x24
   2cb88:	f7e4 fcba 	bl	11500 <strlen>
   2cb8c:	2300      	movs	r3, #0
   2cb8e:	900a      	str	r0, [sp, #40]	; 0x28
   2cb90:	930e      	str	r3, [sp, #56]	; 0x38
   2cb92:	f8d8 3000 	ldr.w	r3, [r8]
   2cb96:	f894 9018 	ldrb.w	r9, [r4, #24]
   2cb9a:	3307      	adds	r3, #7
   2cb9c:	f8d4 b000 	ldr.w	fp, [r4]
   2cba0:	f023 0307 	bic.w	r3, r3, #7
   2cba4:	f103 0208 	add.w	r2, r3, #8
   2cba8:	f8c8 2000 	str.w	r2, [r8]
   2cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cbb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2cbb4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   2cbb8:	f04f 32ff 	mov.w	r2, #4294967295
   2cbbc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   2cbc0:	4640      	mov	r0, r8
   2cbc2:	930b      	str	r3, [sp, #44]	; 0x2c
   2cbc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cbc6:	4b9b      	ldr	r3, [pc, #620]	; (2ce34 <_printf_float+0x2c8>)
   2cbc8:	f7e3 ff90 	bl	10aec <__aeabi_dcmpun>
   2cbcc:	bb70      	cbnz	r0, 2cc2c <_printf_float+0xc0>
   2cbce:	f04f 32ff 	mov.w	r2, #4294967295
   2cbd2:	4b98      	ldr	r3, [pc, #608]	; (2ce34 <_printf_float+0x2c8>)
   2cbd4:	4640      	mov	r0, r8
   2cbd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cbd8:	f7e3 ff6a 	bl	10ab0 <__aeabi_dcmple>
   2cbdc:	bb30      	cbnz	r0, 2cc2c <_printf_float+0xc0>
   2cbde:	2200      	movs	r2, #0
   2cbe0:	2300      	movs	r3, #0
   2cbe2:	4640      	mov	r0, r8
   2cbe4:	4651      	mov	r1, sl
   2cbe6:	f7e3 ff59 	bl	10a9c <__aeabi_dcmplt>
   2cbea:	b110      	cbz	r0, 2cbf2 <_printf_float+0x86>
   2cbec:	232d      	movs	r3, #45	; 0x2d
   2cbee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2cbf2:	4b91      	ldr	r3, [pc, #580]	; (2ce38 <_printf_float+0x2cc>)
   2cbf4:	4891      	ldr	r0, [pc, #580]	; (2ce3c <_printf_float+0x2d0>)
   2cbf6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2cbfa:	bf94      	ite	ls
   2cbfc:	4698      	movls	r8, r3
   2cbfe:	4680      	movhi	r8, r0
   2cc00:	2303      	movs	r3, #3
   2cc02:	f04f 0a00 	mov.w	sl, #0
   2cc06:	6123      	str	r3, [r4, #16]
   2cc08:	f02b 0304 	bic.w	r3, fp, #4
   2cc0c:	6023      	str	r3, [r4, #0]
   2cc0e:	4633      	mov	r3, r6
   2cc10:	aa0f      	add	r2, sp, #60	; 0x3c
   2cc12:	4621      	mov	r1, r4
   2cc14:	4628      	mov	r0, r5
   2cc16:	9700      	str	r7, [sp, #0]
   2cc18:	f008 fd7b 	bl	35712 <_printf_common>
   2cc1c:	3001      	adds	r0, #1
   2cc1e:	f040 808f 	bne.w	2cd40 <_printf_float+0x1d4>
   2cc22:	f04f 30ff 	mov.w	r0, #4294967295
   2cc26:	b011      	add	sp, #68	; 0x44
   2cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc2c:	4642      	mov	r2, r8
   2cc2e:	4653      	mov	r3, sl
   2cc30:	4640      	mov	r0, r8
   2cc32:	4651      	mov	r1, sl
   2cc34:	f7e3 ff5a 	bl	10aec <__aeabi_dcmpun>
   2cc38:	b140      	cbz	r0, 2cc4c <_printf_float+0xe0>
   2cc3a:	f1ba 0f00 	cmp.w	sl, #0
   2cc3e:	4880      	ldr	r0, [pc, #512]	; (2ce40 <_printf_float+0x2d4>)
   2cc40:	bfbc      	itt	lt
   2cc42:	232d      	movlt	r3, #45	; 0x2d
   2cc44:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2cc48:	4b7e      	ldr	r3, [pc, #504]	; (2ce44 <_printf_float+0x2d8>)
   2cc4a:	e7d4      	b.n	2cbf6 <_printf_float+0x8a>
   2cc4c:	6863      	ldr	r3, [r4, #4]
   2cc4e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   2cc52:	1c5a      	adds	r2, r3, #1
   2cc54:	d142      	bne.n	2ccdc <_printf_float+0x170>
   2cc56:	2306      	movs	r3, #6
   2cc58:	6063      	str	r3, [r4, #4]
   2cc5a:	2200      	movs	r2, #0
   2cc5c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2cc60:	4628      	mov	r0, r5
   2cc62:	910b      	str	r1, [sp, #44]	; 0x2c
   2cc64:	9206      	str	r2, [sp, #24]
   2cc66:	aa0e      	add	r2, sp, #56	; 0x38
   2cc68:	6023      	str	r3, [r4, #0]
   2cc6a:	e9cd 9204 	strd	r9, r2, [sp, #16]
   2cc6e:	aa0d      	add	r2, sp, #52	; 0x34
   2cc70:	9203      	str	r2, [sp, #12]
   2cc72:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2cc76:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2cc7a:	6863      	ldr	r3, [r4, #4]
   2cc7c:	4642      	mov	r2, r8
   2cc7e:	9300      	str	r3, [sp, #0]
   2cc80:	4653      	mov	r3, sl
   2cc82:	f008 fca8 	bl	355d6 <__cvt>
   2cc86:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cc88:	4680      	mov	r8, r0
   2cc8a:	2947      	cmp	r1, #71	; 0x47
   2cc8c:	990d      	ldr	r1, [sp, #52]	; 0x34
   2cc8e:	d108      	bne.n	2cca2 <_printf_float+0x136>
   2cc90:	1cc8      	adds	r0, r1, #3
   2cc92:	db02      	blt.n	2cc9a <_printf_float+0x12e>
   2cc94:	6863      	ldr	r3, [r4, #4]
   2cc96:	4299      	cmp	r1, r3
   2cc98:	dd40      	ble.n	2cd1c <_printf_float+0x1b0>
   2cc9a:	f1a9 0902 	sub.w	r9, r9, #2
   2cc9e:	fa5f f989 	uxtb.w	r9, r9
   2cca2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2cca6:	d81f      	bhi.n	2cce8 <_printf_float+0x17c>
   2cca8:	3901      	subs	r1, #1
   2ccaa:	464a      	mov	r2, r9
   2ccac:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2ccb0:	910d      	str	r1, [sp, #52]	; 0x34
   2ccb2:	f008 fcf0 	bl	35696 <__exponent>
   2ccb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ccb8:	4682      	mov	sl, r0
   2ccba:	1813      	adds	r3, r2, r0
   2ccbc:	2a01      	cmp	r2, #1
   2ccbe:	6123      	str	r3, [r4, #16]
   2ccc0:	dc02      	bgt.n	2ccc8 <_printf_float+0x15c>
   2ccc2:	6822      	ldr	r2, [r4, #0]
   2ccc4:	07d2      	lsls	r2, r2, #31
   2ccc6:	d501      	bpl.n	2cccc <_printf_float+0x160>
   2ccc8:	3301      	adds	r3, #1
   2ccca:	6123      	str	r3, [r4, #16]
   2cccc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2ccd0:	2b00      	cmp	r3, #0
   2ccd2:	d09c      	beq.n	2cc0e <_printf_float+0xa2>
   2ccd4:	232d      	movs	r3, #45	; 0x2d
   2ccd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2ccda:	e798      	b.n	2cc0e <_printf_float+0xa2>
   2ccdc:	2947      	cmp	r1, #71	; 0x47
   2ccde:	d1bc      	bne.n	2cc5a <_printf_float+0xee>
   2cce0:	2b00      	cmp	r3, #0
   2cce2:	d1ba      	bne.n	2cc5a <_printf_float+0xee>
   2cce4:	2301      	movs	r3, #1
   2cce6:	e7b7      	b.n	2cc58 <_printf_float+0xec>
   2cce8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   2ccec:	d118      	bne.n	2cd20 <_printf_float+0x1b4>
   2ccee:	2900      	cmp	r1, #0
   2ccf0:	6863      	ldr	r3, [r4, #4]
   2ccf2:	dd0b      	ble.n	2cd0c <_printf_float+0x1a0>
   2ccf4:	6121      	str	r1, [r4, #16]
   2ccf6:	b913      	cbnz	r3, 2ccfe <_printf_float+0x192>
   2ccf8:	6822      	ldr	r2, [r4, #0]
   2ccfa:	07d0      	lsls	r0, r2, #31
   2ccfc:	d502      	bpl.n	2cd04 <_printf_float+0x198>
   2ccfe:	3301      	adds	r3, #1
   2cd00:	440b      	add	r3, r1
   2cd02:	6123      	str	r3, [r4, #16]
   2cd04:	f04f 0a00 	mov.w	sl, #0
   2cd08:	65a1      	str	r1, [r4, #88]	; 0x58
   2cd0a:	e7df      	b.n	2cccc <_printf_float+0x160>
   2cd0c:	b913      	cbnz	r3, 2cd14 <_printf_float+0x1a8>
   2cd0e:	6822      	ldr	r2, [r4, #0]
   2cd10:	07d2      	lsls	r2, r2, #31
   2cd12:	d501      	bpl.n	2cd18 <_printf_float+0x1ac>
   2cd14:	3302      	adds	r3, #2
   2cd16:	e7f4      	b.n	2cd02 <_printf_float+0x196>
   2cd18:	2301      	movs	r3, #1
   2cd1a:	e7f2      	b.n	2cd02 <_printf_float+0x196>
   2cd1c:	f04f 0967 	mov.w	r9, #103	; 0x67
   2cd20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cd22:	4299      	cmp	r1, r3
   2cd24:	db05      	blt.n	2cd32 <_printf_float+0x1c6>
   2cd26:	6823      	ldr	r3, [r4, #0]
   2cd28:	6121      	str	r1, [r4, #16]
   2cd2a:	07d8      	lsls	r0, r3, #31
   2cd2c:	d5ea      	bpl.n	2cd04 <_printf_float+0x198>
   2cd2e:	1c4b      	adds	r3, r1, #1
   2cd30:	e7e7      	b.n	2cd02 <_printf_float+0x196>
   2cd32:	2900      	cmp	r1, #0
   2cd34:	bfd4      	ite	le
   2cd36:	f1c1 0202 	rsble	r2, r1, #2
   2cd3a:	2201      	movgt	r2, #1
   2cd3c:	4413      	add	r3, r2
   2cd3e:	e7e0      	b.n	2cd02 <_printf_float+0x196>
   2cd40:	6823      	ldr	r3, [r4, #0]
   2cd42:	055a      	lsls	r2, r3, #21
   2cd44:	d407      	bmi.n	2cd56 <_printf_float+0x1ea>
   2cd46:	6923      	ldr	r3, [r4, #16]
   2cd48:	4642      	mov	r2, r8
   2cd4a:	4631      	mov	r1, r6
   2cd4c:	4628      	mov	r0, r5
   2cd4e:	47b8      	blx	r7
   2cd50:	3001      	adds	r0, #1
   2cd52:	d12b      	bne.n	2cdac <_printf_float+0x240>
   2cd54:	e765      	b.n	2cc22 <_printf_float+0xb6>
   2cd56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2cd5a:	f240 80dc 	bls.w	2cf16 <_printf_float+0x3aa>
   2cd5e:	2200      	movs	r2, #0
   2cd60:	2300      	movs	r3, #0
   2cd62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2cd66:	f7e3 fe8f 	bl	10a88 <__aeabi_dcmpeq>
   2cd6a:	2800      	cmp	r0, #0
   2cd6c:	d033      	beq.n	2cdd6 <_printf_float+0x26a>
   2cd6e:	2301      	movs	r3, #1
   2cd70:	4a35      	ldr	r2, [pc, #212]	; (2ce48 <_printf_float+0x2dc>)
   2cd72:	4631      	mov	r1, r6
   2cd74:	4628      	mov	r0, r5
   2cd76:	47b8      	blx	r7
   2cd78:	3001      	adds	r0, #1
   2cd7a:	f43f af52 	beq.w	2cc22 <_printf_float+0xb6>
   2cd7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2cd82:	429a      	cmp	r2, r3
   2cd84:	db02      	blt.n	2cd8c <_printf_float+0x220>
   2cd86:	6823      	ldr	r3, [r4, #0]
   2cd88:	07d8      	lsls	r0, r3, #31
   2cd8a:	d50f      	bpl.n	2cdac <_printf_float+0x240>
   2cd8c:	4631      	mov	r1, r6
   2cd8e:	4628      	mov	r0, r5
   2cd90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2cd94:	47b8      	blx	r7
   2cd96:	3001      	adds	r0, #1
   2cd98:	f43f af43 	beq.w	2cc22 <_printf_float+0xb6>
   2cd9c:	f04f 0800 	mov.w	r8, #0
   2cda0:	f104 091a 	add.w	r9, r4, #26
   2cda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cda6:	3b01      	subs	r3, #1
   2cda8:	4543      	cmp	r3, r8
   2cdaa:	dc09      	bgt.n	2cdc0 <_printf_float+0x254>
   2cdac:	6823      	ldr	r3, [r4, #0]
   2cdae:	079b      	lsls	r3, r3, #30
   2cdb0:	f100 8101 	bmi.w	2cfb6 <_printf_float+0x44a>
   2cdb4:	68e0      	ldr	r0, [r4, #12]
   2cdb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2cdb8:	4298      	cmp	r0, r3
   2cdba:	bfb8      	it	lt
   2cdbc:	4618      	movlt	r0, r3
   2cdbe:	e732      	b.n	2cc26 <_printf_float+0xba>
   2cdc0:	2301      	movs	r3, #1
   2cdc2:	464a      	mov	r2, r9
   2cdc4:	4631      	mov	r1, r6
   2cdc6:	4628      	mov	r0, r5
   2cdc8:	47b8      	blx	r7
   2cdca:	3001      	adds	r0, #1
   2cdcc:	f43f af29 	beq.w	2cc22 <_printf_float+0xb6>
   2cdd0:	f108 0801 	add.w	r8, r8, #1
   2cdd4:	e7e6      	b.n	2cda4 <_printf_float+0x238>
   2cdd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2cdd8:	2b00      	cmp	r3, #0
   2cdda:	dc37      	bgt.n	2ce4c <_printf_float+0x2e0>
   2cddc:	2301      	movs	r3, #1
   2cdde:	4a1a      	ldr	r2, [pc, #104]	; (2ce48 <_printf_float+0x2dc>)
   2cde0:	4631      	mov	r1, r6
   2cde2:	4628      	mov	r0, r5
   2cde4:	47b8      	blx	r7
   2cde6:	3001      	adds	r0, #1
   2cde8:	f43f af1b 	beq.w	2cc22 <_printf_float+0xb6>
   2cdec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2cdf0:	4313      	orrs	r3, r2
   2cdf2:	d102      	bne.n	2cdfa <_printf_float+0x28e>
   2cdf4:	6823      	ldr	r3, [r4, #0]
   2cdf6:	07d9      	lsls	r1, r3, #31
   2cdf8:	d5d8      	bpl.n	2cdac <_printf_float+0x240>
   2cdfa:	4631      	mov	r1, r6
   2cdfc:	4628      	mov	r0, r5
   2cdfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2ce02:	47b8      	blx	r7
   2ce04:	3001      	adds	r0, #1
   2ce06:	f43f af0c 	beq.w	2cc22 <_printf_float+0xb6>
   2ce0a:	f04f 0900 	mov.w	r9, #0
   2ce0e:	f104 0a1a 	add.w	sl, r4, #26
   2ce12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2ce14:	425b      	negs	r3, r3
   2ce16:	454b      	cmp	r3, r9
   2ce18:	dc01      	bgt.n	2ce1e <_printf_float+0x2b2>
   2ce1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ce1c:	e794      	b.n	2cd48 <_printf_float+0x1dc>
   2ce1e:	2301      	movs	r3, #1
   2ce20:	4652      	mov	r2, sl
   2ce22:	4631      	mov	r1, r6
   2ce24:	4628      	mov	r0, r5
   2ce26:	47b8      	blx	r7
   2ce28:	3001      	adds	r0, #1
   2ce2a:	f43f aefa 	beq.w	2cc22 <_printf_float+0xb6>
   2ce2e:	f109 0901 	add.w	r9, r9, #1
   2ce32:	e7ee      	b.n	2ce12 <_printf_float+0x2a6>
   2ce34:	7fefffff 	.word	0x7fefffff
   2ce38:	0003e9c1 	.word	0x0003e9c1
   2ce3c:	000384fd 	.word	0x000384fd
   2ce40:	0003e9c9 	.word	0x0003e9c9
   2ce44:	0003e9c5 	.word	0x0003e9c5
   2ce48:	0003e845 	.word	0x0003e845
   2ce4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ce4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2ce50:	429a      	cmp	r2, r3
   2ce52:	bfa8      	it	ge
   2ce54:	461a      	movge	r2, r3
   2ce56:	2a00      	cmp	r2, #0
   2ce58:	4691      	mov	r9, r2
   2ce5a:	dc37      	bgt.n	2cecc <_printf_float+0x360>
   2ce5c:	f04f 0b00 	mov.w	fp, #0
   2ce60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2ce64:	f104 021a 	add.w	r2, r4, #26
   2ce68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   2ce6c:	ebaa 0309 	sub.w	r3, sl, r9
   2ce70:	455b      	cmp	r3, fp
   2ce72:	dc33      	bgt.n	2cedc <_printf_float+0x370>
   2ce74:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2ce78:	429a      	cmp	r2, r3
   2ce7a:	db3b      	blt.n	2cef4 <_printf_float+0x388>
   2ce7c:	6823      	ldr	r3, [r4, #0]
   2ce7e:	07da      	lsls	r2, r3, #31
   2ce80:	d438      	bmi.n	2cef4 <_printf_float+0x388>
   2ce82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ce84:	990d      	ldr	r1, [sp, #52]	; 0x34
   2ce86:	eba2 030a 	sub.w	r3, r2, sl
   2ce8a:	eba2 0901 	sub.w	r9, r2, r1
   2ce8e:	4599      	cmp	r9, r3
   2ce90:	bfa8      	it	ge
   2ce92:	4699      	movge	r9, r3
   2ce94:	f1b9 0f00 	cmp.w	r9, #0
   2ce98:	dc34      	bgt.n	2cf04 <_printf_float+0x398>
   2ce9a:	f04f 0800 	mov.w	r8, #0
   2ce9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2cea2:	f104 0a1a 	add.w	sl, r4, #26
   2cea6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2ceaa:	1a9b      	subs	r3, r3, r2
   2ceac:	eba3 0309 	sub.w	r3, r3, r9
   2ceb0:	4543      	cmp	r3, r8
   2ceb2:	f77f af7b 	ble.w	2cdac <_printf_float+0x240>
   2ceb6:	2301      	movs	r3, #1
   2ceb8:	4652      	mov	r2, sl
   2ceba:	4631      	mov	r1, r6
   2cebc:	4628      	mov	r0, r5
   2cebe:	47b8      	blx	r7
   2cec0:	3001      	adds	r0, #1
   2cec2:	f43f aeae 	beq.w	2cc22 <_printf_float+0xb6>
   2cec6:	f108 0801 	add.w	r8, r8, #1
   2ceca:	e7ec      	b.n	2cea6 <_printf_float+0x33a>
   2cecc:	4613      	mov	r3, r2
   2cece:	4631      	mov	r1, r6
   2ced0:	4642      	mov	r2, r8
   2ced2:	4628      	mov	r0, r5
   2ced4:	47b8      	blx	r7
   2ced6:	3001      	adds	r0, #1
   2ced8:	d1c0      	bne.n	2ce5c <_printf_float+0x2f0>
   2ceda:	e6a2      	b.n	2cc22 <_printf_float+0xb6>
   2cedc:	2301      	movs	r3, #1
   2cede:	4631      	mov	r1, r6
   2cee0:	4628      	mov	r0, r5
   2cee2:	920b      	str	r2, [sp, #44]	; 0x2c
   2cee4:	47b8      	blx	r7
   2cee6:	3001      	adds	r0, #1
   2cee8:	f43f ae9b 	beq.w	2cc22 <_printf_float+0xb6>
   2ceec:	f10b 0b01 	add.w	fp, fp, #1
   2cef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2cef2:	e7b9      	b.n	2ce68 <_printf_float+0x2fc>
   2cef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2cef8:	4631      	mov	r1, r6
   2cefa:	4628      	mov	r0, r5
   2cefc:	47b8      	blx	r7
   2cefe:	3001      	adds	r0, #1
   2cf00:	d1bf      	bne.n	2ce82 <_printf_float+0x316>
   2cf02:	e68e      	b.n	2cc22 <_printf_float+0xb6>
   2cf04:	464b      	mov	r3, r9
   2cf06:	eb08 020a 	add.w	r2, r8, sl
   2cf0a:	4631      	mov	r1, r6
   2cf0c:	4628      	mov	r0, r5
   2cf0e:	47b8      	blx	r7
   2cf10:	3001      	adds	r0, #1
   2cf12:	d1c2      	bne.n	2ce9a <_printf_float+0x32e>
   2cf14:	e685      	b.n	2cc22 <_printf_float+0xb6>
   2cf16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2cf18:	2a01      	cmp	r2, #1
   2cf1a:	dc01      	bgt.n	2cf20 <_printf_float+0x3b4>
   2cf1c:	07db      	lsls	r3, r3, #31
   2cf1e:	d537      	bpl.n	2cf90 <_printf_float+0x424>
   2cf20:	2301      	movs	r3, #1
   2cf22:	4642      	mov	r2, r8
   2cf24:	4631      	mov	r1, r6
   2cf26:	4628      	mov	r0, r5
   2cf28:	47b8      	blx	r7
   2cf2a:	3001      	adds	r0, #1
   2cf2c:	f43f ae79 	beq.w	2cc22 <_printf_float+0xb6>
   2cf30:	4631      	mov	r1, r6
   2cf32:	4628      	mov	r0, r5
   2cf34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2cf38:	47b8      	blx	r7
   2cf3a:	3001      	adds	r0, #1
   2cf3c:	f43f ae71 	beq.w	2cc22 <_printf_float+0xb6>
   2cf40:	2200      	movs	r2, #0
   2cf42:	2300      	movs	r3, #0
   2cf44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2cf48:	f7e3 fd9e 	bl	10a88 <__aeabi_dcmpeq>
   2cf4c:	b9d8      	cbnz	r0, 2cf86 <_printf_float+0x41a>
   2cf4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cf50:	f108 0201 	add.w	r2, r8, #1
   2cf54:	3b01      	subs	r3, #1
   2cf56:	4631      	mov	r1, r6
   2cf58:	4628      	mov	r0, r5
   2cf5a:	47b8      	blx	r7
   2cf5c:	3001      	adds	r0, #1
   2cf5e:	d10e      	bne.n	2cf7e <_printf_float+0x412>
   2cf60:	e65f      	b.n	2cc22 <_printf_float+0xb6>
   2cf62:	2301      	movs	r3, #1
   2cf64:	464a      	mov	r2, r9
   2cf66:	4631      	mov	r1, r6
   2cf68:	4628      	mov	r0, r5
   2cf6a:	47b8      	blx	r7
   2cf6c:	3001      	adds	r0, #1
   2cf6e:	f43f ae58 	beq.w	2cc22 <_printf_float+0xb6>
   2cf72:	f108 0801 	add.w	r8, r8, #1
   2cf76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cf78:	3b01      	subs	r3, #1
   2cf7a:	4543      	cmp	r3, r8
   2cf7c:	dcf1      	bgt.n	2cf62 <_printf_float+0x3f6>
   2cf7e:	4653      	mov	r3, sl
   2cf80:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2cf84:	e6e1      	b.n	2cd4a <_printf_float+0x1de>
   2cf86:	f04f 0800 	mov.w	r8, #0
   2cf8a:	f104 091a 	add.w	r9, r4, #26
   2cf8e:	e7f2      	b.n	2cf76 <_printf_float+0x40a>
   2cf90:	2301      	movs	r3, #1
   2cf92:	4642      	mov	r2, r8
   2cf94:	e7df      	b.n	2cf56 <_printf_float+0x3ea>
   2cf96:	2301      	movs	r3, #1
   2cf98:	464a      	mov	r2, r9
   2cf9a:	4631      	mov	r1, r6
   2cf9c:	4628      	mov	r0, r5
   2cf9e:	47b8      	blx	r7
   2cfa0:	3001      	adds	r0, #1
   2cfa2:	f43f ae3e 	beq.w	2cc22 <_printf_float+0xb6>
   2cfa6:	f108 0801 	add.w	r8, r8, #1
   2cfaa:	68e3      	ldr	r3, [r4, #12]
   2cfac:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2cfae:	1a5b      	subs	r3, r3, r1
   2cfb0:	4543      	cmp	r3, r8
   2cfb2:	dcf0      	bgt.n	2cf96 <_printf_float+0x42a>
   2cfb4:	e6fe      	b.n	2cdb4 <_printf_float+0x248>
   2cfb6:	f04f 0800 	mov.w	r8, #0
   2cfba:	f104 0919 	add.w	r9, r4, #25
   2cfbe:	e7f4      	b.n	2cfaa <_printf_float+0x43e>

0002cfc0 <_printf_i>:
   2cfc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2cfc4:	460c      	mov	r4, r1
   2cfc6:	4691      	mov	r9, r2
   2cfc8:	4680      	mov	r8, r0
   2cfca:	469a      	mov	sl, r3
   2cfcc:	7e27      	ldrb	r7, [r4, #24]
   2cfce:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2cfd2:	990c      	ldr	r1, [sp, #48]	; 0x30
   2cfd4:	2f78      	cmp	r7, #120	; 0x78
   2cfd6:	d807      	bhi.n	2cfe8 <_printf_i+0x28>
   2cfd8:	2f62      	cmp	r7, #98	; 0x62
   2cfda:	d80a      	bhi.n	2cff2 <_printf_i+0x32>
   2cfdc:	2f00      	cmp	r7, #0
   2cfde:	f000 80d8 	beq.w	2d192 <_printf_i+0x1d2>
   2cfe2:	2f58      	cmp	r7, #88	; 0x58
   2cfe4:	f000 80a3 	beq.w	2d12e <_printf_i+0x16e>
   2cfe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2cfec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2cff0:	e03a      	b.n	2d068 <_printf_i+0xa8>
   2cff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2cff6:	2b15      	cmp	r3, #21
   2cff8:	d8f6      	bhi.n	2cfe8 <_printf_i+0x28>
   2cffa:	a001      	add	r0, pc, #4	; (adr r0, 2d000 <_printf_i+0x40>)
   2cffc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   2d000:	0002d059 	.word	0x0002d059
   2d004:	0002d06d 	.word	0x0002d06d
   2d008:	0002cfe9 	.word	0x0002cfe9
   2d00c:	0002cfe9 	.word	0x0002cfe9
   2d010:	0002cfe9 	.word	0x0002cfe9
   2d014:	0002cfe9 	.word	0x0002cfe9
   2d018:	0002d06d 	.word	0x0002d06d
   2d01c:	0002cfe9 	.word	0x0002cfe9
   2d020:	0002cfe9 	.word	0x0002cfe9
   2d024:	0002cfe9 	.word	0x0002cfe9
   2d028:	0002cfe9 	.word	0x0002cfe9
   2d02c:	0002d179 	.word	0x0002d179
   2d030:	0002d09d 	.word	0x0002d09d
   2d034:	0002d15b 	.word	0x0002d15b
   2d038:	0002cfe9 	.word	0x0002cfe9
   2d03c:	0002cfe9 	.word	0x0002cfe9
   2d040:	0002d19b 	.word	0x0002d19b
   2d044:	0002cfe9 	.word	0x0002cfe9
   2d048:	0002d09d 	.word	0x0002d09d
   2d04c:	0002cfe9 	.word	0x0002cfe9
   2d050:	0002cfe9 	.word	0x0002cfe9
   2d054:	0002d163 	.word	0x0002d163
   2d058:	680b      	ldr	r3, [r1, #0]
   2d05a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2d05e:	1d1a      	adds	r2, r3, #4
   2d060:	681b      	ldr	r3, [r3, #0]
   2d062:	600a      	str	r2, [r1, #0]
   2d064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2d068:	2301      	movs	r3, #1
   2d06a:	e0a3      	b.n	2d1b4 <_printf_i+0x1f4>
   2d06c:	6825      	ldr	r5, [r4, #0]
   2d06e:	6808      	ldr	r0, [r1, #0]
   2d070:	062e      	lsls	r6, r5, #24
   2d072:	f100 0304 	add.w	r3, r0, #4
   2d076:	d50a      	bpl.n	2d08e <_printf_i+0xce>
   2d078:	6805      	ldr	r5, [r0, #0]
   2d07a:	600b      	str	r3, [r1, #0]
   2d07c:	2d00      	cmp	r5, #0
   2d07e:	da03      	bge.n	2d088 <_printf_i+0xc8>
   2d080:	232d      	movs	r3, #45	; 0x2d
   2d082:	426d      	negs	r5, r5
   2d084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2d088:	485e      	ldr	r0, [pc, #376]	; (2d204 <_printf_i+0x244>)
   2d08a:	230a      	movs	r3, #10
   2d08c:	e019      	b.n	2d0c2 <_printf_i+0x102>
   2d08e:	f015 0f40 	tst.w	r5, #64	; 0x40
   2d092:	6805      	ldr	r5, [r0, #0]
   2d094:	600b      	str	r3, [r1, #0]
   2d096:	bf18      	it	ne
   2d098:	b22d      	sxthne	r5, r5
   2d09a:	e7ef      	b.n	2d07c <_printf_i+0xbc>
   2d09c:	680b      	ldr	r3, [r1, #0]
   2d09e:	6825      	ldr	r5, [r4, #0]
   2d0a0:	1d18      	adds	r0, r3, #4
   2d0a2:	6008      	str	r0, [r1, #0]
   2d0a4:	0628      	lsls	r0, r5, #24
   2d0a6:	d501      	bpl.n	2d0ac <_printf_i+0xec>
   2d0a8:	681d      	ldr	r5, [r3, #0]
   2d0aa:	e002      	b.n	2d0b2 <_printf_i+0xf2>
   2d0ac:	0669      	lsls	r1, r5, #25
   2d0ae:	d5fb      	bpl.n	2d0a8 <_printf_i+0xe8>
   2d0b0:	881d      	ldrh	r5, [r3, #0]
   2d0b2:	2f6f      	cmp	r7, #111	; 0x6f
   2d0b4:	4853      	ldr	r0, [pc, #332]	; (2d204 <_printf_i+0x244>)
   2d0b6:	bf0c      	ite	eq
   2d0b8:	2308      	moveq	r3, #8
   2d0ba:	230a      	movne	r3, #10
   2d0bc:	2100      	movs	r1, #0
   2d0be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2d0c2:	6866      	ldr	r6, [r4, #4]
   2d0c4:	2e00      	cmp	r6, #0
   2d0c6:	60a6      	str	r6, [r4, #8]
   2d0c8:	bfa2      	ittt	ge
   2d0ca:	6821      	ldrge	r1, [r4, #0]
   2d0cc:	f021 0104 	bicge.w	r1, r1, #4
   2d0d0:	6021      	strge	r1, [r4, #0]
   2d0d2:	b90d      	cbnz	r5, 2d0d8 <_printf_i+0x118>
   2d0d4:	2e00      	cmp	r6, #0
   2d0d6:	d04d      	beq.n	2d174 <_printf_i+0x1b4>
   2d0d8:	4616      	mov	r6, r2
   2d0da:	fbb5 f1f3 	udiv	r1, r5, r3
   2d0de:	fb03 5711 	mls	r7, r3, r1, r5
   2d0e2:	5dc7      	ldrb	r7, [r0, r7]
   2d0e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2d0e8:	462f      	mov	r7, r5
   2d0ea:	460d      	mov	r5, r1
   2d0ec:	42bb      	cmp	r3, r7
   2d0ee:	d9f4      	bls.n	2d0da <_printf_i+0x11a>
   2d0f0:	2b08      	cmp	r3, #8
   2d0f2:	d10b      	bne.n	2d10c <_printf_i+0x14c>
   2d0f4:	6823      	ldr	r3, [r4, #0]
   2d0f6:	07df      	lsls	r7, r3, #31
   2d0f8:	d508      	bpl.n	2d10c <_printf_i+0x14c>
   2d0fa:	6923      	ldr	r3, [r4, #16]
   2d0fc:	6861      	ldr	r1, [r4, #4]
   2d0fe:	4299      	cmp	r1, r3
   2d100:	bfde      	ittt	le
   2d102:	2330      	movle	r3, #48	; 0x30
   2d104:	f806 3c01 	strble.w	r3, [r6, #-1]
   2d108:	f106 36ff 	addle.w	r6, r6, #4294967295
   2d10c:	1b92      	subs	r2, r2, r6
   2d10e:	6122      	str	r2, [r4, #16]
   2d110:	464b      	mov	r3, r9
   2d112:	aa03      	add	r2, sp, #12
   2d114:	4621      	mov	r1, r4
   2d116:	4640      	mov	r0, r8
   2d118:	f8cd a000 	str.w	sl, [sp]
   2d11c:	f008 faf9 	bl	35712 <_printf_common>
   2d120:	3001      	adds	r0, #1
   2d122:	d14c      	bne.n	2d1be <_printf_i+0x1fe>
   2d124:	f04f 30ff 	mov.w	r0, #4294967295
   2d128:	b004      	add	sp, #16
   2d12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d12e:	4835      	ldr	r0, [pc, #212]	; (2d204 <_printf_i+0x244>)
   2d130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2d134:	6823      	ldr	r3, [r4, #0]
   2d136:	680e      	ldr	r6, [r1, #0]
   2d138:	061f      	lsls	r7, r3, #24
   2d13a:	f856 5b04 	ldr.w	r5, [r6], #4
   2d13e:	600e      	str	r6, [r1, #0]
   2d140:	d514      	bpl.n	2d16c <_printf_i+0x1ac>
   2d142:	07d9      	lsls	r1, r3, #31
   2d144:	bf44      	itt	mi
   2d146:	f043 0320 	orrmi.w	r3, r3, #32
   2d14a:	6023      	strmi	r3, [r4, #0]
   2d14c:	b91d      	cbnz	r5, 2d156 <_printf_i+0x196>
   2d14e:	6823      	ldr	r3, [r4, #0]
   2d150:	f023 0320 	bic.w	r3, r3, #32
   2d154:	6023      	str	r3, [r4, #0]
   2d156:	2310      	movs	r3, #16
   2d158:	e7b0      	b.n	2d0bc <_printf_i+0xfc>
   2d15a:	6823      	ldr	r3, [r4, #0]
   2d15c:	f043 0320 	orr.w	r3, r3, #32
   2d160:	6023      	str	r3, [r4, #0]
   2d162:	2378      	movs	r3, #120	; 0x78
   2d164:	4828      	ldr	r0, [pc, #160]	; (2d208 <_printf_i+0x248>)
   2d166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2d16a:	e7e3      	b.n	2d134 <_printf_i+0x174>
   2d16c:	065e      	lsls	r6, r3, #25
   2d16e:	bf48      	it	mi
   2d170:	b2ad      	uxthmi	r5, r5
   2d172:	e7e6      	b.n	2d142 <_printf_i+0x182>
   2d174:	4616      	mov	r6, r2
   2d176:	e7bb      	b.n	2d0f0 <_printf_i+0x130>
   2d178:	680b      	ldr	r3, [r1, #0]
   2d17a:	6826      	ldr	r6, [r4, #0]
   2d17c:	1d1d      	adds	r5, r3, #4
   2d17e:	6960      	ldr	r0, [r4, #20]
   2d180:	600d      	str	r5, [r1, #0]
   2d182:	0635      	lsls	r5, r6, #24
   2d184:	681b      	ldr	r3, [r3, #0]
   2d186:	d501      	bpl.n	2d18c <_printf_i+0x1cc>
   2d188:	6018      	str	r0, [r3, #0]
   2d18a:	e002      	b.n	2d192 <_printf_i+0x1d2>
   2d18c:	0671      	lsls	r1, r6, #25
   2d18e:	d5fb      	bpl.n	2d188 <_printf_i+0x1c8>
   2d190:	8018      	strh	r0, [r3, #0]
   2d192:	2300      	movs	r3, #0
   2d194:	4616      	mov	r6, r2
   2d196:	6123      	str	r3, [r4, #16]
   2d198:	e7ba      	b.n	2d110 <_printf_i+0x150>
   2d19a:	680b      	ldr	r3, [r1, #0]
   2d19c:	1d1a      	adds	r2, r3, #4
   2d19e:	600a      	str	r2, [r1, #0]
   2d1a0:	2100      	movs	r1, #0
   2d1a2:	681e      	ldr	r6, [r3, #0]
   2d1a4:	6862      	ldr	r2, [r4, #4]
   2d1a6:	4630      	mov	r0, r6
   2d1a8:	f008 f9d1 	bl	3554e <memchr>
   2d1ac:	b108      	cbz	r0, 2d1b2 <_printf_i+0x1f2>
   2d1ae:	1b80      	subs	r0, r0, r6
   2d1b0:	6060      	str	r0, [r4, #4]
   2d1b2:	6863      	ldr	r3, [r4, #4]
   2d1b4:	6123      	str	r3, [r4, #16]
   2d1b6:	2300      	movs	r3, #0
   2d1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2d1bc:	e7a8      	b.n	2d110 <_printf_i+0x150>
   2d1be:	6923      	ldr	r3, [r4, #16]
   2d1c0:	4632      	mov	r2, r6
   2d1c2:	4649      	mov	r1, r9
   2d1c4:	4640      	mov	r0, r8
   2d1c6:	47d0      	blx	sl
   2d1c8:	3001      	adds	r0, #1
   2d1ca:	d0ab      	beq.n	2d124 <_printf_i+0x164>
   2d1cc:	6823      	ldr	r3, [r4, #0]
   2d1ce:	079b      	lsls	r3, r3, #30
   2d1d0:	d413      	bmi.n	2d1fa <_printf_i+0x23a>
   2d1d2:	68e0      	ldr	r0, [r4, #12]
   2d1d4:	9b03      	ldr	r3, [sp, #12]
   2d1d6:	4298      	cmp	r0, r3
   2d1d8:	bfb8      	it	lt
   2d1da:	4618      	movlt	r0, r3
   2d1dc:	e7a4      	b.n	2d128 <_printf_i+0x168>
   2d1de:	2301      	movs	r3, #1
   2d1e0:	4632      	mov	r2, r6
   2d1e2:	4649      	mov	r1, r9
   2d1e4:	4640      	mov	r0, r8
   2d1e6:	47d0      	blx	sl
   2d1e8:	3001      	adds	r0, #1
   2d1ea:	d09b      	beq.n	2d124 <_printf_i+0x164>
   2d1ec:	3501      	adds	r5, #1
   2d1ee:	68e3      	ldr	r3, [r4, #12]
   2d1f0:	9903      	ldr	r1, [sp, #12]
   2d1f2:	1a5b      	subs	r3, r3, r1
   2d1f4:	42ab      	cmp	r3, r5
   2d1f6:	dcf2      	bgt.n	2d1de <_printf_i+0x21e>
   2d1f8:	e7eb      	b.n	2d1d2 <_printf_i+0x212>
   2d1fa:	2500      	movs	r5, #0
   2d1fc:	f104 0619 	add.w	r6, r4, #25
   2d200:	e7f5      	b.n	2d1ee <_printf_i+0x22e>
   2d202:	bf00      	nop
   2d204:	0003e9cd 	.word	0x0003e9cd
   2d208:	0003e9de 	.word	0x0003e9de

0002d20c <_sbrk_r>:
   2d20c:	b538      	push	{r3, r4, r5, lr}
   2d20e:	2300      	movs	r3, #0
   2d210:	4d05      	ldr	r5, [pc, #20]	; (2d228 <_sbrk_r+0x1c>)
   2d212:	4604      	mov	r4, r0
   2d214:	4608      	mov	r0, r1
   2d216:	602b      	str	r3, [r5, #0]
   2d218:	f7ea fbee 	bl	179f8 <_sbrk>
   2d21c:	1c43      	adds	r3, r0, #1
   2d21e:	d102      	bne.n	2d226 <_sbrk_r+0x1a>
   2d220:	682b      	ldr	r3, [r5, #0]
   2d222:	b103      	cbz	r3, 2d226 <_sbrk_r+0x1a>
   2d224:	6023      	str	r3, [r4, #0]
   2d226:	bd38      	pop	{r3, r4, r5, pc}
   2d228:	2001e750 	.word	0x2001e750

0002d22c <sniprintf>:
   2d22c:	b40c      	push	{r2, r3}
   2d22e:	4b18      	ldr	r3, [pc, #96]	; (2d290 <sniprintf+0x64>)
   2d230:	b530      	push	{r4, r5, lr}
   2d232:	1e0c      	subs	r4, r1, #0
   2d234:	b09d      	sub	sp, #116	; 0x74
   2d236:	681d      	ldr	r5, [r3, #0]
   2d238:	da08      	bge.n	2d24c <sniprintf+0x20>
   2d23a:	238b      	movs	r3, #139	; 0x8b
   2d23c:	f04f 30ff 	mov.w	r0, #4294967295
   2d240:	602b      	str	r3, [r5, #0]
   2d242:	b01d      	add	sp, #116	; 0x74
   2d244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2d248:	b002      	add	sp, #8
   2d24a:	4770      	bx	lr
   2d24c:	f44f 7302 	mov.w	r3, #520	; 0x208
   2d250:	9002      	str	r0, [sp, #8]
   2d252:	9006      	str	r0, [sp, #24]
   2d254:	a902      	add	r1, sp, #8
   2d256:	f8ad 3014 	strh.w	r3, [sp, #20]
   2d25a:	bf14      	ite	ne
   2d25c:	f104 33ff 	addne.w	r3, r4, #4294967295
   2d260:	4623      	moveq	r3, r4
   2d262:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2d264:	4628      	mov	r0, r5
   2d266:	9304      	str	r3, [sp, #16]
   2d268:	9307      	str	r3, [sp, #28]
   2d26a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2d26e:	f8ad 3016 	strh.w	r3, [sp, #22]
   2d272:	ab21      	add	r3, sp, #132	; 0x84
   2d274:	9301      	str	r3, [sp, #4]
   2d276:	f000 fc2f 	bl	2dad8 <_svfiprintf_r>
   2d27a:	1c43      	adds	r3, r0, #1
   2d27c:	bfbc      	itt	lt
   2d27e:	238b      	movlt	r3, #139	; 0x8b
   2d280:	602b      	strlt	r3, [r5, #0]
   2d282:	2c00      	cmp	r4, #0
   2d284:	d0dd      	beq.n	2d242 <sniprintf+0x16>
   2d286:	9b02      	ldr	r3, [sp, #8]
   2d288:	2200      	movs	r2, #0
   2d28a:	701a      	strb	r2, [r3, #0]
   2d28c:	e7d9      	b.n	2d242 <sniprintf+0x16>
   2d28e:	bf00      	nop
   2d290:	200149cc 	.word	0x200149cc

0002d294 <_strerror_r>:
   2d294:	b510      	push	{r4, lr}
   2d296:	4604      	mov	r4, r0
   2d298:	4608      	mov	r0, r1
   2d29a:	4611      	mov	r1, r2
   2d29c:	288e      	cmp	r0, #142	; 0x8e
   2d29e:	f200 812f 	bhi.w	2d500 <_strerror_r+0x26c>
   2d2a2:	e8df f010 	tbh	[pc, r0, lsl #1]
   2d2a6:	0138      	.short	0x0138
   2d2a8:	0091008f 	.word	0x0091008f
   2d2ac:	00950093 	.word	0x00950093
   2d2b0:	00990097 	.word	0x00990097
   2d2b4:	009d009b 	.word	0x009d009b
   2d2b8:	00a300a1 	.word	0x00a300a1
   2d2bc:	00a900a7 	.word	0x00a900a7
   2d2c0:	00ad00ab 	.word	0x00ad00ab
   2d2c4:	00af012d 	.word	0x00af012d
   2d2c8:	00b300b1 	.word	0x00b300b1
   2d2cc:	00b700b5 	.word	0x00b700b5
   2d2d0:	00bf00bd 	.word	0x00bf00bd
   2d2d4:	00c700c5 	.word	0x00c700c5
   2d2d8:	00cb00c9 	.word	0x00cb00c9
   2d2dc:	00d100cd 	.word	0x00d100cd
   2d2e0:	00d700d5 	.word	0x00d700d5
   2d2e4:	00db00d9 	.word	0x00db00d9
   2d2e8:	00df00dd 	.word	0x00df00dd
   2d2ec:	00e300e1 	.word	0x00e300e1
   2d2f0:	012d012d 	.word	0x012d012d
   2d2f4:	012d012d 	.word	0x012d012d
   2d2f8:	012d012d 	.word	0x012d012d
   2d2fc:	012d012d 	.word	0x012d012d
   2d300:	00eb00e7 	.word	0x00eb00e7
   2d304:	012d012d 	.word	0x012d012d
   2d308:	012d012d 	.word	0x012d012d
   2d30c:	012d012d 	.word	0x012d012d
   2d310:	012d012d 	.word	0x012d012d
   2d314:	012d012d 	.word	0x012d012d
   2d318:	012d012d 	.word	0x012d012d
   2d31c:	00ed012d 	.word	0x00ed012d
   2d320:	00ef0107 	.word	0x00ef0107
   2d324:	012d00f1 	.word	0x012d00f1
   2d328:	012d012d 	.word	0x012d012d
   2d32c:	012d00f3 	.word	0x012d00f3
   2d330:	012d012d 	.word	0x012d012d
   2d334:	012d00f5 	.word	0x012d00f5
   2d338:	00f9012d 	.word	0x00f9012d
   2d33c:	012d012d 	.word	0x012d012d
   2d340:	012d00fb 	.word	0x012d00fb
   2d344:	012d012d 	.word	0x012d012d
   2d348:	012d012d 	.word	0x012d012d
   2d34c:	012d012d 	.word	0x012d012d
   2d350:	012d012d 	.word	0x012d012d
   2d354:	00fd012d 	.word	0x00fd012d
   2d358:	00ff012d 	.word	0x00ff012d
   2d35c:	01030101 	.word	0x01030101
   2d360:	012d012d 	.word	0x012d012d
   2d364:	012d0125 	.word	0x012d0125
   2d368:	012d012d 	.word	0x012d012d
   2d36c:	012d012d 	.word	0x012d012d
   2d370:	012d012d 	.word	0x012d012d
   2d374:	0113012d 	.word	0x0113012d
   2d378:	01090105 	.word	0x01090105
   2d37c:	010d010b 	.word	0x010d010b
   2d380:	012d010f 	.word	0x012d010f
   2d384:	01150111 	.word	0x01150111
   2d388:	00e90119 	.word	0x00e90119
   2d38c:	012b00c1 	.word	0x012b00c1
   2d390:	00cf00b9 	.word	0x00cf00b9
   2d394:	009f00bb 	.word	0x009f00bb
   2d398:	012900a5 	.word	0x012900a5
   2d39c:	012d00f7 	.word	0x012d00f7
   2d3a0:	00c30117 	.word	0x00c30117
   2d3a4:	011b011d 	.word	0x011b011d
   2d3a8:	012d012d 	.word	0x012d012d
   2d3ac:	012d012d 	.word	0x012d012d
   2d3b0:	00d3012d 	.word	0x00d3012d
   2d3b4:	012d012d 	.word	0x012d012d
   2d3b8:	00e5012d 	.word	0x00e5012d
   2d3bc:	011f0127 	.word	0x011f0127
   2d3c0:	01230121 	.word	0x01230121
   2d3c4:	4855      	ldr	r0, [pc, #340]	; (2d51c <_strerror_r+0x288>)
   2d3c6:	bd10      	pop	{r4, pc}
   2d3c8:	4855      	ldr	r0, [pc, #340]	; (2d520 <_strerror_r+0x28c>)
   2d3ca:	e7fc      	b.n	2d3c6 <_strerror_r+0x132>
   2d3cc:	4855      	ldr	r0, [pc, #340]	; (2d524 <_strerror_r+0x290>)
   2d3ce:	e7fa      	b.n	2d3c6 <_strerror_r+0x132>
   2d3d0:	4855      	ldr	r0, [pc, #340]	; (2d528 <_strerror_r+0x294>)
   2d3d2:	e7f8      	b.n	2d3c6 <_strerror_r+0x132>
   2d3d4:	4855      	ldr	r0, [pc, #340]	; (2d52c <_strerror_r+0x298>)
   2d3d6:	e7f6      	b.n	2d3c6 <_strerror_r+0x132>
   2d3d8:	4855      	ldr	r0, [pc, #340]	; (2d530 <_strerror_r+0x29c>)
   2d3da:	e7f4      	b.n	2d3c6 <_strerror_r+0x132>
   2d3dc:	4855      	ldr	r0, [pc, #340]	; (2d534 <_strerror_r+0x2a0>)
   2d3de:	e7f2      	b.n	2d3c6 <_strerror_r+0x132>
   2d3e0:	4855      	ldr	r0, [pc, #340]	; (2d538 <_strerror_r+0x2a4>)
   2d3e2:	e7f0      	b.n	2d3c6 <_strerror_r+0x132>
   2d3e4:	4855      	ldr	r0, [pc, #340]	; (2d53c <_strerror_r+0x2a8>)
   2d3e6:	e7ee      	b.n	2d3c6 <_strerror_r+0x132>
   2d3e8:	4855      	ldr	r0, [pc, #340]	; (2d540 <_strerror_r+0x2ac>)
   2d3ea:	e7ec      	b.n	2d3c6 <_strerror_r+0x132>
   2d3ec:	4855      	ldr	r0, [pc, #340]	; (2d544 <_strerror_r+0x2b0>)
   2d3ee:	e7ea      	b.n	2d3c6 <_strerror_r+0x132>
   2d3f0:	4855      	ldr	r0, [pc, #340]	; (2d548 <_strerror_r+0x2b4>)
   2d3f2:	e7e8      	b.n	2d3c6 <_strerror_r+0x132>
   2d3f4:	4855      	ldr	r0, [pc, #340]	; (2d54c <_strerror_r+0x2b8>)
   2d3f6:	e7e6      	b.n	2d3c6 <_strerror_r+0x132>
   2d3f8:	4855      	ldr	r0, [pc, #340]	; (2d550 <_strerror_r+0x2bc>)
   2d3fa:	e7e4      	b.n	2d3c6 <_strerror_r+0x132>
   2d3fc:	4855      	ldr	r0, [pc, #340]	; (2d554 <_strerror_r+0x2c0>)
   2d3fe:	e7e2      	b.n	2d3c6 <_strerror_r+0x132>
   2d400:	4855      	ldr	r0, [pc, #340]	; (2d558 <_strerror_r+0x2c4>)
   2d402:	e7e0      	b.n	2d3c6 <_strerror_r+0x132>
   2d404:	4855      	ldr	r0, [pc, #340]	; (2d55c <_strerror_r+0x2c8>)
   2d406:	e7de      	b.n	2d3c6 <_strerror_r+0x132>
   2d408:	4855      	ldr	r0, [pc, #340]	; (2d560 <_strerror_r+0x2cc>)
   2d40a:	e7dc      	b.n	2d3c6 <_strerror_r+0x132>
   2d40c:	4855      	ldr	r0, [pc, #340]	; (2d564 <_strerror_r+0x2d0>)
   2d40e:	e7da      	b.n	2d3c6 <_strerror_r+0x132>
   2d410:	4855      	ldr	r0, [pc, #340]	; (2d568 <_strerror_r+0x2d4>)
   2d412:	e7d8      	b.n	2d3c6 <_strerror_r+0x132>
   2d414:	4855      	ldr	r0, [pc, #340]	; (2d56c <_strerror_r+0x2d8>)
   2d416:	e7d6      	b.n	2d3c6 <_strerror_r+0x132>
   2d418:	4855      	ldr	r0, [pc, #340]	; (2d570 <_strerror_r+0x2dc>)
   2d41a:	e7d4      	b.n	2d3c6 <_strerror_r+0x132>
   2d41c:	4855      	ldr	r0, [pc, #340]	; (2d574 <_strerror_r+0x2e0>)
   2d41e:	e7d2      	b.n	2d3c6 <_strerror_r+0x132>
   2d420:	4855      	ldr	r0, [pc, #340]	; (2d578 <_strerror_r+0x2e4>)
   2d422:	e7d0      	b.n	2d3c6 <_strerror_r+0x132>
   2d424:	4855      	ldr	r0, [pc, #340]	; (2d57c <_strerror_r+0x2e8>)
   2d426:	e7ce      	b.n	2d3c6 <_strerror_r+0x132>
   2d428:	4855      	ldr	r0, [pc, #340]	; (2d580 <_strerror_r+0x2ec>)
   2d42a:	e7cc      	b.n	2d3c6 <_strerror_r+0x132>
   2d42c:	4855      	ldr	r0, [pc, #340]	; (2d584 <_strerror_r+0x2f0>)
   2d42e:	e7ca      	b.n	2d3c6 <_strerror_r+0x132>
   2d430:	4855      	ldr	r0, [pc, #340]	; (2d588 <_strerror_r+0x2f4>)
   2d432:	e7c8      	b.n	2d3c6 <_strerror_r+0x132>
   2d434:	4855      	ldr	r0, [pc, #340]	; (2d58c <_strerror_r+0x2f8>)
   2d436:	e7c6      	b.n	2d3c6 <_strerror_r+0x132>
   2d438:	4855      	ldr	r0, [pc, #340]	; (2d590 <_strerror_r+0x2fc>)
   2d43a:	e7c4      	b.n	2d3c6 <_strerror_r+0x132>
   2d43c:	4855      	ldr	r0, [pc, #340]	; (2d594 <_strerror_r+0x300>)
   2d43e:	e7c2      	b.n	2d3c6 <_strerror_r+0x132>
   2d440:	4855      	ldr	r0, [pc, #340]	; (2d598 <_strerror_r+0x304>)
   2d442:	e7c0      	b.n	2d3c6 <_strerror_r+0x132>
   2d444:	4855      	ldr	r0, [pc, #340]	; (2d59c <_strerror_r+0x308>)
   2d446:	e7be      	b.n	2d3c6 <_strerror_r+0x132>
   2d448:	4855      	ldr	r0, [pc, #340]	; (2d5a0 <_strerror_r+0x30c>)
   2d44a:	e7bc      	b.n	2d3c6 <_strerror_r+0x132>
   2d44c:	4855      	ldr	r0, [pc, #340]	; (2d5a4 <_strerror_r+0x310>)
   2d44e:	e7ba      	b.n	2d3c6 <_strerror_r+0x132>
   2d450:	4855      	ldr	r0, [pc, #340]	; (2d5a8 <_strerror_r+0x314>)
   2d452:	e7b8      	b.n	2d3c6 <_strerror_r+0x132>
   2d454:	4855      	ldr	r0, [pc, #340]	; (2d5ac <_strerror_r+0x318>)
   2d456:	e7b6      	b.n	2d3c6 <_strerror_r+0x132>
   2d458:	4855      	ldr	r0, [pc, #340]	; (2d5b0 <_strerror_r+0x31c>)
   2d45a:	e7b4      	b.n	2d3c6 <_strerror_r+0x132>
   2d45c:	4855      	ldr	r0, [pc, #340]	; (2d5b4 <_strerror_r+0x320>)
   2d45e:	e7b2      	b.n	2d3c6 <_strerror_r+0x132>
   2d460:	4855      	ldr	r0, [pc, #340]	; (2d5b8 <_strerror_r+0x324>)
   2d462:	e7b0      	b.n	2d3c6 <_strerror_r+0x132>
   2d464:	4855      	ldr	r0, [pc, #340]	; (2d5bc <_strerror_r+0x328>)
   2d466:	e7ae      	b.n	2d3c6 <_strerror_r+0x132>
   2d468:	4855      	ldr	r0, [pc, #340]	; (2d5c0 <_strerror_r+0x32c>)
   2d46a:	e7ac      	b.n	2d3c6 <_strerror_r+0x132>
   2d46c:	4855      	ldr	r0, [pc, #340]	; (2d5c4 <_strerror_r+0x330>)
   2d46e:	e7aa      	b.n	2d3c6 <_strerror_r+0x132>
   2d470:	4855      	ldr	r0, [pc, #340]	; (2d5c8 <_strerror_r+0x334>)
   2d472:	e7a8      	b.n	2d3c6 <_strerror_r+0x132>
   2d474:	4855      	ldr	r0, [pc, #340]	; (2d5cc <_strerror_r+0x338>)
   2d476:	e7a6      	b.n	2d3c6 <_strerror_r+0x132>
   2d478:	4855      	ldr	r0, [pc, #340]	; (2d5d0 <_strerror_r+0x33c>)
   2d47a:	e7a4      	b.n	2d3c6 <_strerror_r+0x132>
   2d47c:	4855      	ldr	r0, [pc, #340]	; (2d5d4 <_strerror_r+0x340>)
   2d47e:	e7a2      	b.n	2d3c6 <_strerror_r+0x132>
   2d480:	4855      	ldr	r0, [pc, #340]	; (2d5d8 <_strerror_r+0x344>)
   2d482:	e7a0      	b.n	2d3c6 <_strerror_r+0x132>
   2d484:	4855      	ldr	r0, [pc, #340]	; (2d5dc <_strerror_r+0x348>)
   2d486:	e79e      	b.n	2d3c6 <_strerror_r+0x132>
   2d488:	4855      	ldr	r0, [pc, #340]	; (2d5e0 <_strerror_r+0x34c>)
   2d48a:	e79c      	b.n	2d3c6 <_strerror_r+0x132>
   2d48c:	4855      	ldr	r0, [pc, #340]	; (2d5e4 <_strerror_r+0x350>)
   2d48e:	e79a      	b.n	2d3c6 <_strerror_r+0x132>
   2d490:	4855      	ldr	r0, [pc, #340]	; (2d5e8 <_strerror_r+0x354>)
   2d492:	e798      	b.n	2d3c6 <_strerror_r+0x132>
   2d494:	4855      	ldr	r0, [pc, #340]	; (2d5ec <_strerror_r+0x358>)
   2d496:	e796      	b.n	2d3c6 <_strerror_r+0x132>
   2d498:	4855      	ldr	r0, [pc, #340]	; (2d5f0 <_strerror_r+0x35c>)
   2d49a:	e794      	b.n	2d3c6 <_strerror_r+0x132>
   2d49c:	4855      	ldr	r0, [pc, #340]	; (2d5f4 <_strerror_r+0x360>)
   2d49e:	e792      	b.n	2d3c6 <_strerror_r+0x132>
   2d4a0:	4855      	ldr	r0, [pc, #340]	; (2d5f8 <_strerror_r+0x364>)
   2d4a2:	e790      	b.n	2d3c6 <_strerror_r+0x132>
   2d4a4:	4855      	ldr	r0, [pc, #340]	; (2d5fc <_strerror_r+0x368>)
   2d4a6:	e78e      	b.n	2d3c6 <_strerror_r+0x132>
   2d4a8:	4855      	ldr	r0, [pc, #340]	; (2d600 <_strerror_r+0x36c>)
   2d4aa:	e78c      	b.n	2d3c6 <_strerror_r+0x132>
   2d4ac:	4855      	ldr	r0, [pc, #340]	; (2d604 <_strerror_r+0x370>)
   2d4ae:	e78a      	b.n	2d3c6 <_strerror_r+0x132>
   2d4b0:	4855      	ldr	r0, [pc, #340]	; (2d608 <_strerror_r+0x374>)
   2d4b2:	e788      	b.n	2d3c6 <_strerror_r+0x132>
   2d4b4:	4855      	ldr	r0, [pc, #340]	; (2d60c <_strerror_r+0x378>)
   2d4b6:	e786      	b.n	2d3c6 <_strerror_r+0x132>
   2d4b8:	4855      	ldr	r0, [pc, #340]	; (2d610 <_strerror_r+0x37c>)
   2d4ba:	e784      	b.n	2d3c6 <_strerror_r+0x132>
   2d4bc:	4855      	ldr	r0, [pc, #340]	; (2d614 <_strerror_r+0x380>)
   2d4be:	e782      	b.n	2d3c6 <_strerror_r+0x132>
   2d4c0:	4855      	ldr	r0, [pc, #340]	; (2d618 <_strerror_r+0x384>)
   2d4c2:	e780      	b.n	2d3c6 <_strerror_r+0x132>
   2d4c4:	4855      	ldr	r0, [pc, #340]	; (2d61c <_strerror_r+0x388>)
   2d4c6:	e77e      	b.n	2d3c6 <_strerror_r+0x132>
   2d4c8:	4855      	ldr	r0, [pc, #340]	; (2d620 <_strerror_r+0x38c>)
   2d4ca:	e77c      	b.n	2d3c6 <_strerror_r+0x132>
   2d4cc:	4855      	ldr	r0, [pc, #340]	; (2d624 <_strerror_r+0x390>)
   2d4ce:	e77a      	b.n	2d3c6 <_strerror_r+0x132>
   2d4d0:	4855      	ldr	r0, [pc, #340]	; (2d628 <_strerror_r+0x394>)
   2d4d2:	e778      	b.n	2d3c6 <_strerror_r+0x132>
   2d4d4:	4855      	ldr	r0, [pc, #340]	; (2d62c <_strerror_r+0x398>)
   2d4d6:	e776      	b.n	2d3c6 <_strerror_r+0x132>
   2d4d8:	4855      	ldr	r0, [pc, #340]	; (2d630 <_strerror_r+0x39c>)
   2d4da:	e774      	b.n	2d3c6 <_strerror_r+0x132>
   2d4dc:	4855      	ldr	r0, [pc, #340]	; (2d634 <_strerror_r+0x3a0>)
   2d4de:	e772      	b.n	2d3c6 <_strerror_r+0x132>
   2d4e0:	4855      	ldr	r0, [pc, #340]	; (2d638 <_strerror_r+0x3a4>)
   2d4e2:	e770      	b.n	2d3c6 <_strerror_r+0x132>
   2d4e4:	4855      	ldr	r0, [pc, #340]	; (2d63c <_strerror_r+0x3a8>)
   2d4e6:	e76e      	b.n	2d3c6 <_strerror_r+0x132>
   2d4e8:	4855      	ldr	r0, [pc, #340]	; (2d640 <_strerror_r+0x3ac>)
   2d4ea:	e76c      	b.n	2d3c6 <_strerror_r+0x132>
   2d4ec:	4855      	ldr	r0, [pc, #340]	; (2d644 <_strerror_r+0x3b0>)
   2d4ee:	e76a      	b.n	2d3c6 <_strerror_r+0x132>
   2d4f0:	4855      	ldr	r0, [pc, #340]	; (2d648 <_strerror_r+0x3b4>)
   2d4f2:	e768      	b.n	2d3c6 <_strerror_r+0x132>
   2d4f4:	4855      	ldr	r0, [pc, #340]	; (2d64c <_strerror_r+0x3b8>)
   2d4f6:	e766      	b.n	2d3c6 <_strerror_r+0x132>
   2d4f8:	4855      	ldr	r0, [pc, #340]	; (2d650 <_strerror_r+0x3bc>)
   2d4fa:	e764      	b.n	2d3c6 <_strerror_r+0x132>
   2d4fc:	4855      	ldr	r0, [pc, #340]	; (2d654 <_strerror_r+0x3c0>)
   2d4fe:	e762      	b.n	2d3c6 <_strerror_r+0x132>
   2d500:	2b00      	cmp	r3, #0
   2d502:	bf14      	ite	ne
   2d504:	461a      	movne	r2, r3
   2d506:	4622      	moveq	r2, r4
   2d508:	f008 f9eb 	bl	358e2 <_user_strerror>
   2d50c:	4b52      	ldr	r3, [pc, #328]	; (2d658 <_strerror_r+0x3c4>)
   2d50e:	2800      	cmp	r0, #0
   2d510:	bf08      	it	eq
   2d512:	4618      	moveq	r0, r3
   2d514:	e757      	b.n	2d3c6 <_strerror_r+0x132>
   2d516:	4851      	ldr	r0, [pc, #324]	; (2d65c <_strerror_r+0x3c8>)
   2d518:	e755      	b.n	2d3c6 <_strerror_r+0x132>
   2d51a:	bf00      	nop
   2d51c:	0003e9ef 	.word	0x0003e9ef
   2d520:	0003e9f9 	.word	0x0003e9f9
   2d524:	0003ea13 	.word	0x0003ea13
   2d528:	0003ea23 	.word	0x0003ea23
   2d52c:	0003ea3b 	.word	0x0003ea3b
   2d530:	0003ea45 	.word	0x0003ea45
   2d534:	0003ea5f 	.word	0x0003ea5f
   2d538:	0003ea71 	.word	0x0003ea71
   2d53c:	0003ea83 	.word	0x0003ea83
   2d540:	0003ea9c 	.word	0x0003ea9c
   2d544:	0003eaac 	.word	0x0003eaac
   2d548:	0003eab8 	.word	0x0003eab8
   2d54c:	0003ead5 	.word	0x0003ead5
   2d550:	0003eae7 	.word	0x0003eae7
   2d554:	0003eaf8 	.word	0x0003eaf8
   2d558:	0003eb0a 	.word	0x0003eb0a
   2d55c:	0003eb16 	.word	0x0003eb16
   2d560:	0003eb2e 	.word	0x0003eb2e
   2d564:	0003eb3a 	.word	0x0003eb3a
   2d568:	0003eb4c 	.word	0x0003eb4c
   2d56c:	0003eb5b 	.word	0x0003eb5b
   2d570:	0003eb6b 	.word	0x0003eb6b
   2d574:	0003eb78 	.word	0x0003eb78
   2d578:	0003eb97 	.word	0x0003eb97
   2d57c:	0003eba6 	.word	0x0003eba6
   2d580:	0003ebb7 	.word	0x0003ebb7
   2d584:	0003ebdb 	.word	0x0003ebdb
   2d588:	0003ebf9 	.word	0x0003ebf9
   2d58c:	0003ec17 	.word	0x0003ec17
   2d590:	0003ec37 	.word	0x0003ec37
   2d594:	0003ec4e 	.word	0x0003ec4e
   2d598:	0003ec5d 	.word	0x0003ec5d
   2d59c:	0003ec6c 	.word	0x0003ec6c
   2d5a0:	0003ec80 	.word	0x0003ec80
   2d5a4:	0003ec98 	.word	0x0003ec98
   2d5a8:	0003eca6 	.word	0x0003eca6
   2d5ac:	0003ecb3 	.word	0x0003ecb3
   2d5b0:	0003ecc9 	.word	0x0003ecc9
   2d5b4:	0003ecd8 	.word	0x0003ecd8
   2d5b8:	0003ece4 	.word	0x0003ece4
   2d5bc:	0003ed13 	.word	0x0003ed13
   2d5c0:	0003ed24 	.word	0x0003ed24
   2d5c4:	0003ed3f 	.word	0x0003ed3f
   2d5c8:	0003ed52 	.word	0x0003ed52
   2d5cc:	0003ed68 	.word	0x0003ed68
   2d5d0:	0003ed71 	.word	0x0003ed71
   2d5d4:	0003ed88 	.word	0x0003ed88
   2d5d8:	0003ed90 	.word	0x0003ed90
   2d5dc:	0003ed9d 	.word	0x0003ed9d
   2d5e0:	0003edb2 	.word	0x0003edb2
   2d5e4:	0003edc6 	.word	0x0003edc6
   2d5e8:	0003edde 	.word	0x0003edde
   2d5ec:	0003eded 	.word	0x0003eded
   2d5f0:	0003edfe 	.word	0x0003edfe
   2d5f4:	0003ee11 	.word	0x0003ee11
   2d5f8:	0003ee1d 	.word	0x0003ee1d
   2d5fc:	0003ee36 	.word	0x0003ee36
   2d600:	0003ee4a 	.word	0x0003ee4a
   2d604:	0003ee65 	.word	0x0003ee65
   2d608:	0003ee7d 	.word	0x0003ee7d
   2d60c:	0003ee97 	.word	0x0003ee97
   2d610:	0003ee9f 	.word	0x0003ee9f
   2d614:	0003eecf 	.word	0x0003eecf
   2d618:	0003eeee 	.word	0x0003eeee
   2d61c:	0003ef0d 	.word	0x0003ef0d
   2d620:	0003ef24 	.word	0x0003ef24
   2d624:	0003ef37 	.word	0x0003ef37
   2d628:	0003ef50 	.word	0x0003ef50
   2d62c:	0003ef67 	.word	0x0003ef67
   2d630:	0003ef7d 	.word	0x0003ef7d
   2d634:	0003ef9e 	.word	0x0003ef9e
   2d638:	0003efb6 	.word	0x0003efb6
   2d63c:	0003efd2 	.word	0x0003efd2
   2d640:	0003efe5 	.word	0x0003efe5
   2d644:	0003effb 	.word	0x0003effb
   2d648:	0003f00f 	.word	0x0003f00f
   2d64c:	0003f031 	.word	0x0003f031
   2d650:	0003f057 	.word	0x0003f057
   2d654:	0003f068 	.word	0x0003f068
   2d658:	000385ba 	.word	0x000385ba
   2d65c:	0003f07d 	.word	0x0003f07d

0002d660 <strerror>:
   2d660:	4601      	mov	r1, r0
   2d662:	2300      	movs	r3, #0
   2d664:	4802      	ldr	r0, [pc, #8]	; (2d670 <strerror+0x10>)
   2d666:	461a      	mov	r2, r3
   2d668:	6800      	ldr	r0, [r0, #0]
   2d66a:	f7ff be13 	b.w	2d294 <_strerror_r>
   2d66e:	bf00      	nop
   2d670:	200149cc 	.word	0x200149cc

0002d674 <_strtol_l.isra.0>:
   2d674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d678:	468c      	mov	ip, r1
   2d67a:	4686      	mov	lr, r0
   2d67c:	4e38      	ldr	r6, [pc, #224]	; (2d760 <_strtol_l.isra.0+0xec>)
   2d67e:	4660      	mov	r0, ip
   2d680:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2d684:	5da5      	ldrb	r5, [r4, r6]
   2d686:	f015 0508 	ands.w	r5, r5, #8
   2d68a:	d1f8      	bne.n	2d67e <_strtol_l.isra.0+0xa>
   2d68c:	2c2d      	cmp	r4, #45	; 0x2d
   2d68e:	d133      	bne.n	2d6f8 <_strtol_l.isra.0+0x84>
   2d690:	f89c 4000 	ldrb.w	r4, [ip]
   2d694:	f04f 0801 	mov.w	r8, #1
   2d698:	f100 0c02 	add.w	ip, r0, #2
   2d69c:	2b00      	cmp	r3, #0
   2d69e:	d05b      	beq.n	2d758 <_strtol_l.isra.0+0xe4>
   2d6a0:	2b10      	cmp	r3, #16
   2d6a2:	d10c      	bne.n	2d6be <_strtol_l.isra.0+0x4a>
   2d6a4:	2c30      	cmp	r4, #48	; 0x30
   2d6a6:	d10a      	bne.n	2d6be <_strtol_l.isra.0+0x4a>
   2d6a8:	f89c 0000 	ldrb.w	r0, [ip]
   2d6ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2d6b0:	2858      	cmp	r0, #88	; 0x58
   2d6b2:	d14c      	bne.n	2d74e <_strtol_l.isra.0+0xda>
   2d6b4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   2d6b8:	2310      	movs	r3, #16
   2d6ba:	f10c 0c02 	add.w	ip, ip, #2
   2d6be:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   2d6c2:	2600      	movs	r6, #0
   2d6c4:	3f01      	subs	r7, #1
   2d6c6:	4630      	mov	r0, r6
   2d6c8:	fbb7 f9f3 	udiv	r9, r7, r3
   2d6cc:	fb03 7a19 	mls	sl, r3, r9, r7
   2d6d0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   2d6d4:	2d09      	cmp	r5, #9
   2d6d6:	d817      	bhi.n	2d708 <_strtol_l.isra.0+0x94>
   2d6d8:	462c      	mov	r4, r5
   2d6da:	42a3      	cmp	r3, r4
   2d6dc:	dd23      	ble.n	2d726 <_strtol_l.isra.0+0xb2>
   2d6de:	1c75      	adds	r5, r6, #1
   2d6e0:	d007      	beq.n	2d6f2 <_strtol_l.isra.0+0x7e>
   2d6e2:	4581      	cmp	r9, r0
   2d6e4:	d31c      	bcc.n	2d720 <_strtol_l.isra.0+0xac>
   2d6e6:	d101      	bne.n	2d6ec <_strtol_l.isra.0+0x78>
   2d6e8:	45a2      	cmp	sl, r4
   2d6ea:	db19      	blt.n	2d720 <_strtol_l.isra.0+0xac>
   2d6ec:	fb00 4003 	mla	r0, r0, r3, r4
   2d6f0:	2601      	movs	r6, #1
   2d6f2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2d6f6:	e7eb      	b.n	2d6d0 <_strtol_l.isra.0+0x5c>
   2d6f8:	2c2b      	cmp	r4, #43	; 0x2b
   2d6fa:	46a8      	mov	r8, r5
   2d6fc:	bf04      	itt	eq
   2d6fe:	f89c 4000 	ldrbeq.w	r4, [ip]
   2d702:	f100 0c02 	addeq.w	ip, r0, #2
   2d706:	e7c9      	b.n	2d69c <_strtol_l.isra.0+0x28>
   2d708:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   2d70c:	2d19      	cmp	r5, #25
   2d70e:	d801      	bhi.n	2d714 <_strtol_l.isra.0+0xa0>
   2d710:	3c37      	subs	r4, #55	; 0x37
   2d712:	e7e2      	b.n	2d6da <_strtol_l.isra.0+0x66>
   2d714:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   2d718:	2d19      	cmp	r5, #25
   2d71a:	d804      	bhi.n	2d726 <_strtol_l.isra.0+0xb2>
   2d71c:	3c57      	subs	r4, #87	; 0x57
   2d71e:	e7dc      	b.n	2d6da <_strtol_l.isra.0+0x66>
   2d720:	f04f 36ff 	mov.w	r6, #4294967295
   2d724:	e7e5      	b.n	2d6f2 <_strtol_l.isra.0+0x7e>
   2d726:	1c73      	adds	r3, r6, #1
   2d728:	d106      	bne.n	2d738 <_strtol_l.isra.0+0xc4>
   2d72a:	2322      	movs	r3, #34	; 0x22
   2d72c:	4638      	mov	r0, r7
   2d72e:	f8ce 3000 	str.w	r3, [lr]
   2d732:	b942      	cbnz	r2, 2d746 <_strtol_l.isra.0+0xd2>
   2d734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d738:	f1b8 0f00 	cmp.w	r8, #0
   2d73c:	d000      	beq.n	2d740 <_strtol_l.isra.0+0xcc>
   2d73e:	4240      	negs	r0, r0
   2d740:	2a00      	cmp	r2, #0
   2d742:	d0f7      	beq.n	2d734 <_strtol_l.isra.0+0xc0>
   2d744:	b10e      	cbz	r6, 2d74a <_strtol_l.isra.0+0xd6>
   2d746:	f10c 31ff 	add.w	r1, ip, #4294967295
   2d74a:	6011      	str	r1, [r2, #0]
   2d74c:	e7f2      	b.n	2d734 <_strtol_l.isra.0+0xc0>
   2d74e:	2430      	movs	r4, #48	; 0x30
   2d750:	2b00      	cmp	r3, #0
   2d752:	d1b4      	bne.n	2d6be <_strtol_l.isra.0+0x4a>
   2d754:	2308      	movs	r3, #8
   2d756:	e7b2      	b.n	2d6be <_strtol_l.isra.0+0x4a>
   2d758:	2c30      	cmp	r4, #48	; 0x30
   2d75a:	d0a5      	beq.n	2d6a8 <_strtol_l.isra.0+0x34>
   2d75c:	230a      	movs	r3, #10
   2d75e:	e7ae      	b.n	2d6be <_strtol_l.isra.0+0x4a>
   2d760:	0003e8c1 	.word	0x0003e8c1

0002d764 <strtol>:
   2d764:	4613      	mov	r3, r2
   2d766:	460a      	mov	r2, r1
   2d768:	4601      	mov	r1, r0
   2d76a:	4802      	ldr	r0, [pc, #8]	; (2d774 <strtol+0x10>)
   2d76c:	6800      	ldr	r0, [r0, #0]
   2d76e:	f7ff bf81 	b.w	2d674 <_strtol_l.isra.0>
   2d772:	bf00      	nop
   2d774:	200149cc 	.word	0x200149cc

0002d778 <_strtoll_l.isra.0>:
   2d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d77c:	4691      	mov	r9, r2
   2d77e:	b087      	sub	sp, #28
   2d780:	4688      	mov	r8, r1
   2d782:	461f      	mov	r7, r3
   2d784:	460d      	mov	r5, r1
   2d786:	4a46      	ldr	r2, [pc, #280]	; (2d8a0 <_strtoll_l.isra.0+0x128>)
   2d788:	9005      	str	r0, [sp, #20]
   2d78a:	462b      	mov	r3, r5
   2d78c:	f815 4b01 	ldrb.w	r4, [r5], #1
   2d790:	5ca6      	ldrb	r6, [r4, r2]
   2d792:	f016 0608 	ands.w	r6, r6, #8
   2d796:	d1f8      	bne.n	2d78a <_strtoll_l.isra.0+0x12>
   2d798:	2c2d      	cmp	r4, #45	; 0x2d
   2d79a:	d148      	bne.n	2d82e <_strtoll_l.isra.0+0xb6>
   2d79c:	782c      	ldrb	r4, [r5, #0]
   2d79e:	2601      	movs	r6, #1
   2d7a0:	1c9d      	adds	r5, r3, #2
   2d7a2:	2f00      	cmp	r7, #0
   2d7a4:	d078      	beq.n	2d898 <_strtoll_l.isra.0+0x120>
   2d7a6:	2f10      	cmp	r7, #16
   2d7a8:	d109      	bne.n	2d7be <_strtoll_l.isra.0+0x46>
   2d7aa:	2c30      	cmp	r4, #48	; 0x30
   2d7ac:	d107      	bne.n	2d7be <_strtoll_l.isra.0+0x46>
   2d7ae:	782b      	ldrb	r3, [r5, #0]
   2d7b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2d7b4:	2b58      	cmp	r3, #88	; 0x58
   2d7b6:	d16a      	bne.n	2d88e <_strtoll_l.isra.0+0x116>
   2d7b8:	786c      	ldrb	r4, [r5, #1]
   2d7ba:	2710      	movs	r7, #16
   2d7bc:	3502      	adds	r5, #2
   2d7be:	f04f 32ff 	mov.w	r2, #4294967295
   2d7c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2d7c6:	ea4f 7be7 	mov.w	fp, r7, asr #31
   2d7ca:	46ba      	mov	sl, r7
   2d7cc:	1990      	adds	r0, r2, r6
   2d7ce:	463a      	mov	r2, r7
   2d7d0:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
   2d7d4:	465b      	mov	r3, fp
   2d7d6:	e9cd 0100 	strd	r0, r1, [sp]
   2d7da:	f7e3 fd09 	bl	111f0 <__aeabi_uldivmod>
   2d7de:	2300      	movs	r3, #0
   2d7e0:	4696      	mov	lr, r2
   2d7e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2d7e6:	2000      	movs	r0, #0
   2d7e8:	2100      	movs	r1, #0
   2d7ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2d7ee:	f1bc 0f09 	cmp.w	ip, #9
   2d7f2:	d821      	bhi.n	2d838 <_strtoll_l.isra.0+0xc0>
   2d7f4:	4664      	mov	r4, ip
   2d7f6:	42a7      	cmp	r7, r4
   2d7f8:	dd2f      	ble.n	2d85a <_strtoll_l.isra.0+0xe2>
   2d7fa:	1c5a      	adds	r2, r3, #1
   2d7fc:	d014      	beq.n	2d828 <_strtoll_l.isra.0+0xb0>
   2d7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2d802:	428b      	cmp	r3, r1
   2d804:	bf08      	it	eq
   2d806:	4282      	cmpeq	r2, r0
   2d808:	d324      	bcc.n	2d854 <_strtoll_l.isra.0+0xdc>
   2d80a:	d101      	bne.n	2d810 <_strtoll_l.isra.0+0x98>
   2d80c:	45a6      	cmp	lr, r4
   2d80e:	db21      	blt.n	2d854 <_strtoll_l.isra.0+0xdc>
   2d810:	fb0a f301 	mul.w	r3, sl, r1
   2d814:	fb00 330b 	mla	r3, r0, fp, r3
   2d818:	fbaa 0100 	umull	r0, r1, sl, r0
   2d81c:	4419      	add	r1, r3
   2d81e:	1900      	adds	r0, r0, r4
   2d820:	f04f 0301 	mov.w	r3, #1
   2d824:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2d828:	f815 4b01 	ldrb.w	r4, [r5], #1
   2d82c:	e7dd      	b.n	2d7ea <_strtoll_l.isra.0+0x72>
   2d82e:	2c2b      	cmp	r4, #43	; 0x2b
   2d830:	bf04      	itt	eq
   2d832:	782c      	ldrbeq	r4, [r5, #0]
   2d834:	1c9d      	addeq	r5, r3, #2
   2d836:	e7b4      	b.n	2d7a2 <_strtoll_l.isra.0+0x2a>
   2d838:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2d83c:	f1bc 0f19 	cmp.w	ip, #25
   2d840:	d801      	bhi.n	2d846 <_strtoll_l.isra.0+0xce>
   2d842:	3c37      	subs	r4, #55	; 0x37
   2d844:	e7d7      	b.n	2d7f6 <_strtoll_l.isra.0+0x7e>
   2d846:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2d84a:	f1bc 0f19 	cmp.w	ip, #25
   2d84e:	d804      	bhi.n	2d85a <_strtoll_l.isra.0+0xe2>
   2d850:	3c57      	subs	r4, #87	; 0x57
   2d852:	e7d0      	b.n	2d7f6 <_strtoll_l.isra.0+0x7e>
   2d854:	f04f 33ff 	mov.w	r3, #4294967295
   2d858:	e7e6      	b.n	2d828 <_strtoll_l.isra.0+0xb0>
   2d85a:	1c5a      	adds	r2, r3, #1
   2d85c:	d10a      	bne.n	2d874 <_strtoll_l.isra.0+0xfc>
   2d85e:	2322      	movs	r3, #34	; 0x22
   2d860:	9a05      	ldr	r2, [sp, #20]
   2d862:	e9dd 0100 	ldrd	r0, r1, [sp]
   2d866:	6013      	str	r3, [r2, #0]
   2d868:	f1b9 0f00 	cmp.w	r9, #0
   2d86c:	d10a      	bne.n	2d884 <_strtoll_l.isra.0+0x10c>
   2d86e:	b007      	add	sp, #28
   2d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d874:	b116      	cbz	r6, 2d87c <_strtoll_l.isra.0+0x104>
   2d876:	4240      	negs	r0, r0
   2d878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2d87c:	f1b9 0f00 	cmp.w	r9, #0
   2d880:	d0f5      	beq.n	2d86e <_strtoll_l.isra.0+0xf6>
   2d882:	b10b      	cbz	r3, 2d888 <_strtoll_l.isra.0+0x110>
   2d884:	f105 38ff 	add.w	r8, r5, #4294967295
   2d888:	f8c9 8000 	str.w	r8, [r9]
   2d88c:	e7ef      	b.n	2d86e <_strtoll_l.isra.0+0xf6>
   2d88e:	2430      	movs	r4, #48	; 0x30
   2d890:	2f00      	cmp	r7, #0
   2d892:	d194      	bne.n	2d7be <_strtoll_l.isra.0+0x46>
   2d894:	2708      	movs	r7, #8
   2d896:	e792      	b.n	2d7be <_strtoll_l.isra.0+0x46>
   2d898:	2c30      	cmp	r4, #48	; 0x30
   2d89a:	d088      	beq.n	2d7ae <_strtoll_l.isra.0+0x36>
   2d89c:	270a      	movs	r7, #10
   2d89e:	e78e      	b.n	2d7be <_strtoll_l.isra.0+0x46>
   2d8a0:	0003e8c1 	.word	0x0003e8c1

0002d8a4 <strtoll>:
   2d8a4:	4613      	mov	r3, r2
   2d8a6:	460a      	mov	r2, r1
   2d8a8:	4601      	mov	r1, r0
   2d8aa:	4802      	ldr	r0, [pc, #8]	; (2d8b4 <strtoll+0x10>)
   2d8ac:	6800      	ldr	r0, [r0, #0]
   2d8ae:	f7ff bf63 	b.w	2d778 <_strtoll_l.isra.0>
   2d8b2:	bf00      	nop
   2d8b4:	200149cc 	.word	0x200149cc

0002d8b8 <_strtoul_l.isra.0>:
   2d8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d8bc:	468c      	mov	ip, r1
   2d8be:	4686      	mov	lr, r0
   2d8c0:	4e39      	ldr	r6, [pc, #228]	; (2d9a8 <_strtoul_l.isra.0+0xf0>)
   2d8c2:	4660      	mov	r0, ip
   2d8c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2d8c8:	5da5      	ldrb	r5, [r4, r6]
   2d8ca:	f015 0508 	ands.w	r5, r5, #8
   2d8ce:	d1f8      	bne.n	2d8c2 <_strtoul_l.isra.0+0xa>
   2d8d0:	2c2d      	cmp	r4, #45	; 0x2d
   2d8d2:	d134      	bne.n	2d93e <_strtoul_l.isra.0+0x86>
   2d8d4:	f89c 4000 	ldrb.w	r4, [ip]
   2d8d8:	f04f 0801 	mov.w	r8, #1
   2d8dc:	f100 0c02 	add.w	ip, r0, #2
   2d8e0:	2b00      	cmp	r3, #0
   2d8e2:	d05d      	beq.n	2d9a0 <_strtoul_l.isra.0+0xe8>
   2d8e4:	2b10      	cmp	r3, #16
   2d8e6:	d10c      	bne.n	2d902 <_strtoul_l.isra.0+0x4a>
   2d8e8:	2c30      	cmp	r4, #48	; 0x30
   2d8ea:	d10a      	bne.n	2d902 <_strtoul_l.isra.0+0x4a>
   2d8ec:	f89c 0000 	ldrb.w	r0, [ip]
   2d8f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2d8f4:	2858      	cmp	r0, #88	; 0x58
   2d8f6:	d14e      	bne.n	2d996 <_strtoul_l.isra.0+0xde>
   2d8f8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   2d8fc:	2310      	movs	r3, #16
   2d8fe:	f10c 0c02 	add.w	ip, ip, #2
   2d902:	f04f 37ff 	mov.w	r7, #4294967295
   2d906:	2500      	movs	r5, #0
   2d908:	fbb7 f7f3 	udiv	r7, r7, r3
   2d90c:	fb03 f907 	mul.w	r9, r3, r7
   2d910:	4628      	mov	r0, r5
   2d912:	ea6f 0909 	mvn.w	r9, r9
   2d916:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2d91a:	2e09      	cmp	r6, #9
   2d91c:	d817      	bhi.n	2d94e <_strtoul_l.isra.0+0x96>
   2d91e:	4634      	mov	r4, r6
   2d920:	42a3      	cmp	r3, r4
   2d922:	dd23      	ble.n	2d96c <_strtoul_l.isra.0+0xb4>
   2d924:	2d00      	cmp	r5, #0
   2d926:	db1e      	blt.n	2d966 <_strtoul_l.isra.0+0xae>
   2d928:	4287      	cmp	r7, r0
   2d92a:	d31c      	bcc.n	2d966 <_strtoul_l.isra.0+0xae>
   2d92c:	d101      	bne.n	2d932 <_strtoul_l.isra.0+0x7a>
   2d92e:	45a1      	cmp	r9, r4
   2d930:	db19      	blt.n	2d966 <_strtoul_l.isra.0+0xae>
   2d932:	fb00 4003 	mla	r0, r0, r3, r4
   2d936:	2501      	movs	r5, #1
   2d938:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2d93c:	e7eb      	b.n	2d916 <_strtoul_l.isra.0+0x5e>
   2d93e:	2c2b      	cmp	r4, #43	; 0x2b
   2d940:	46a8      	mov	r8, r5
   2d942:	bf04      	itt	eq
   2d944:	f89c 4000 	ldrbeq.w	r4, [ip]
   2d948:	f100 0c02 	addeq.w	ip, r0, #2
   2d94c:	e7c8      	b.n	2d8e0 <_strtoul_l.isra.0+0x28>
   2d94e:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2d952:	2e19      	cmp	r6, #25
   2d954:	d801      	bhi.n	2d95a <_strtoul_l.isra.0+0xa2>
   2d956:	3c37      	subs	r4, #55	; 0x37
   2d958:	e7e2      	b.n	2d920 <_strtoul_l.isra.0+0x68>
   2d95a:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2d95e:	2e19      	cmp	r6, #25
   2d960:	d804      	bhi.n	2d96c <_strtoul_l.isra.0+0xb4>
   2d962:	3c57      	subs	r4, #87	; 0x57
   2d964:	e7dc      	b.n	2d920 <_strtoul_l.isra.0+0x68>
   2d966:	f04f 35ff 	mov.w	r5, #4294967295
   2d96a:	e7e5      	b.n	2d938 <_strtoul_l.isra.0+0x80>
   2d96c:	2d00      	cmp	r5, #0
   2d96e:	da07      	bge.n	2d980 <_strtoul_l.isra.0+0xc8>
   2d970:	2322      	movs	r3, #34	; 0x22
   2d972:	f04f 30ff 	mov.w	r0, #4294967295
   2d976:	f8ce 3000 	str.w	r3, [lr]
   2d97a:	b942      	cbnz	r2, 2d98e <_strtoul_l.isra.0+0xd6>
   2d97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d980:	f1b8 0f00 	cmp.w	r8, #0
   2d984:	d000      	beq.n	2d988 <_strtoul_l.isra.0+0xd0>
   2d986:	4240      	negs	r0, r0
   2d988:	2a00      	cmp	r2, #0
   2d98a:	d0f7      	beq.n	2d97c <_strtoul_l.isra.0+0xc4>
   2d98c:	b10d      	cbz	r5, 2d992 <_strtoul_l.isra.0+0xda>
   2d98e:	f10c 31ff 	add.w	r1, ip, #4294967295
   2d992:	6011      	str	r1, [r2, #0]
   2d994:	e7f2      	b.n	2d97c <_strtoul_l.isra.0+0xc4>
   2d996:	2430      	movs	r4, #48	; 0x30
   2d998:	2b00      	cmp	r3, #0
   2d99a:	d1b2      	bne.n	2d902 <_strtoul_l.isra.0+0x4a>
   2d99c:	2308      	movs	r3, #8
   2d99e:	e7b0      	b.n	2d902 <_strtoul_l.isra.0+0x4a>
   2d9a0:	2c30      	cmp	r4, #48	; 0x30
   2d9a2:	d0a3      	beq.n	2d8ec <_strtoul_l.isra.0+0x34>
   2d9a4:	230a      	movs	r3, #10
   2d9a6:	e7ac      	b.n	2d902 <_strtoul_l.isra.0+0x4a>
   2d9a8:	0003e8c1 	.word	0x0003e8c1

0002d9ac <strtoul>:
   2d9ac:	4613      	mov	r3, r2
   2d9ae:	460a      	mov	r2, r1
   2d9b0:	4601      	mov	r1, r0
   2d9b2:	4802      	ldr	r0, [pc, #8]	; (2d9bc <strtoul+0x10>)
   2d9b4:	6800      	ldr	r0, [r0, #0]
   2d9b6:	f7ff bf7f 	b.w	2d8b8 <_strtoul_l.isra.0>
   2d9ba:	bf00      	nop
   2d9bc:	200149cc 	.word	0x200149cc

0002d9c0 <vsniprintf>:
   2d9c0:	b507      	push	{r0, r1, r2, lr}
   2d9c2:	9300      	str	r3, [sp, #0]
   2d9c4:	4613      	mov	r3, r2
   2d9c6:	460a      	mov	r2, r1
   2d9c8:	4601      	mov	r1, r0
   2d9ca:	4803      	ldr	r0, [pc, #12]	; (2d9d8 <vsniprintf+0x18>)
   2d9cc:	6800      	ldr	r0, [r0, #0]
   2d9ce:	f007 ff8a 	bl	358e6 <_vsniprintf_r>
   2d9d2:	b003      	add	sp, #12
   2d9d4:	f85d fb04 	ldr.w	pc, [sp], #4
   2d9d8:	200149cc 	.word	0x200149cc

0002d9dc <_vsiprintf_r>:
   2d9dc:	b500      	push	{lr}
   2d9de:	b09b      	sub	sp, #108	; 0x6c
   2d9e0:	9100      	str	r1, [sp, #0]
   2d9e2:	9104      	str	r1, [sp, #16]
   2d9e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2d9e8:	9105      	str	r1, [sp, #20]
   2d9ea:	9102      	str	r1, [sp, #8]
   2d9ec:	4905      	ldr	r1, [pc, #20]	; (2da04 <_vsiprintf_r+0x28>)
   2d9ee:	9103      	str	r1, [sp, #12]
   2d9f0:	4669      	mov	r1, sp
   2d9f2:	f000 f871 	bl	2dad8 <_svfiprintf_r>
   2d9f6:	9b00      	ldr	r3, [sp, #0]
   2d9f8:	2200      	movs	r2, #0
   2d9fa:	701a      	strb	r2, [r3, #0]
   2d9fc:	b01b      	add	sp, #108	; 0x6c
   2d9fe:	f85d fb04 	ldr.w	pc, [sp], #4
   2da02:	bf00      	nop
   2da04:	ffff0208 	.word	0xffff0208

0002da08 <vsiprintf>:
   2da08:	4613      	mov	r3, r2
   2da0a:	460a      	mov	r2, r1
   2da0c:	4601      	mov	r1, r0
   2da0e:	4802      	ldr	r0, [pc, #8]	; (2da18 <vsiprintf+0x10>)
   2da10:	6800      	ldr	r0, [r0, #0]
   2da12:	f7ff bfe3 	b.w	2d9dc <_vsiprintf_r>
   2da16:	bf00      	nop
   2da18:	200149cc 	.word	0x200149cc

0002da1c <_localeconv_r>:
   2da1c:	4800      	ldr	r0, [pc, #0]	; (2da20 <_localeconv_r+0x4>)
   2da1e:	4770      	bx	lr
   2da20:	20014b20 	.word	0x20014b20

0002da24 <__malloc_lock>:
   2da24:	4801      	ldr	r0, [pc, #4]	; (2da2c <__malloc_lock+0x8>)
   2da26:	f008 bb89 	b.w	3613c <__retarget_lock_acquire_recursive>
   2da2a:	bf00      	nop
   2da2c:	2001e758 	.word	0x2001e758

0002da30 <__malloc_unlock>:
   2da30:	4801      	ldr	r0, [pc, #4]	; (2da38 <__malloc_unlock+0x8>)
   2da32:	f008 bb84 	b.w	3613e <__retarget_lock_release_recursive>
   2da36:	bf00      	nop
   2da38:	2001e758 	.word	0x2001e758

0002da3c <__pow5mult>:
   2da3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2da40:	4615      	mov	r5, r2
   2da42:	f012 0203 	ands.w	r2, r2, #3
   2da46:	4606      	mov	r6, r0
   2da48:	460f      	mov	r7, r1
   2da4a:	d007      	beq.n	2da5c <__pow5mult+0x20>
   2da4c:	3a01      	subs	r2, #1
   2da4e:	4c21      	ldr	r4, [pc, #132]	; (2dad4 <__pow5mult+0x98>)
   2da50:	2300      	movs	r3, #0
   2da52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2da56:	f008 f85e 	bl	35b16 <__multadd>
   2da5a:	4607      	mov	r7, r0
   2da5c:	10ad      	asrs	r5, r5, #2
   2da5e:	d035      	beq.n	2dacc <__pow5mult+0x90>
   2da60:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2da62:	b93c      	cbnz	r4, 2da74 <__pow5mult+0x38>
   2da64:	2010      	movs	r0, #16
   2da66:	f7fe ffd1 	bl	2ca0c <malloc>
   2da6a:	6270      	str	r0, [r6, #36]	; 0x24
   2da6c:	6004      	str	r4, [r0, #0]
   2da6e:	60c4      	str	r4, [r0, #12]
   2da70:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2da74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2da78:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2da7c:	b94c      	cbnz	r4, 2da92 <__pow5mult+0x56>
   2da7e:	f240 2171 	movw	r1, #625	; 0x271
   2da82:	4630      	mov	r0, r6
   2da84:	f008 f8d4 	bl	35c30 <__i2b>
   2da88:	2300      	movs	r3, #0
   2da8a:	4604      	mov	r4, r0
   2da8c:	f8c8 0008 	str.w	r0, [r8, #8]
   2da90:	6003      	str	r3, [r0, #0]
   2da92:	f04f 0900 	mov.w	r9, #0
   2da96:	07eb      	lsls	r3, r5, #31
   2da98:	d50a      	bpl.n	2dab0 <__pow5mult+0x74>
   2da9a:	4639      	mov	r1, r7
   2da9c:	4622      	mov	r2, r4
   2da9e:	4630      	mov	r0, r6
   2daa0:	f008 f8cf 	bl	35c42 <__multiply>
   2daa4:	4680      	mov	r8, r0
   2daa6:	4639      	mov	r1, r7
   2daa8:	4630      	mov	r0, r6
   2daaa:	4647      	mov	r7, r8
   2daac:	f008 f81c 	bl	35ae8 <_Bfree>
   2dab0:	106d      	asrs	r5, r5, #1
   2dab2:	d00b      	beq.n	2dacc <__pow5mult+0x90>
   2dab4:	6820      	ldr	r0, [r4, #0]
   2dab6:	b938      	cbnz	r0, 2dac8 <__pow5mult+0x8c>
   2dab8:	4622      	mov	r2, r4
   2daba:	4621      	mov	r1, r4
   2dabc:	4630      	mov	r0, r6
   2dabe:	f008 f8c0 	bl	35c42 <__multiply>
   2dac2:	6020      	str	r0, [r4, #0]
   2dac4:	f8c0 9000 	str.w	r9, [r0]
   2dac8:	4604      	mov	r4, r0
   2daca:	e7e4      	b.n	2da96 <__pow5mult+0x5a>
   2dacc:	4638      	mov	r0, r7
   2dace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2dad2:	bf00      	nop
   2dad4:	000372ec 	.word	0x000372ec

0002dad8 <_svfiprintf_r>:
   2dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dadc:	4698      	mov	r8, r3
   2dade:	898b      	ldrh	r3, [r1, #12]
   2dae0:	b09d      	sub	sp, #116	; 0x74
   2dae2:	4607      	mov	r7, r0
   2dae4:	061b      	lsls	r3, r3, #24
   2dae6:	460d      	mov	r5, r1
   2dae8:	4614      	mov	r4, r2
   2daea:	d50e      	bpl.n	2db0a <_svfiprintf_r+0x32>
   2daec:	690b      	ldr	r3, [r1, #16]
   2daee:	b963      	cbnz	r3, 2db0a <_svfiprintf_r+0x32>
   2daf0:	2140      	movs	r1, #64	; 0x40
   2daf2:	f7fe ffe1 	bl	2cab8 <_malloc_r>
   2daf6:	6028      	str	r0, [r5, #0]
   2daf8:	6128      	str	r0, [r5, #16]
   2dafa:	b920      	cbnz	r0, 2db06 <_svfiprintf_r+0x2e>
   2dafc:	230c      	movs	r3, #12
   2dafe:	603b      	str	r3, [r7, #0]
   2db00:	f04f 30ff 	mov.w	r0, #4294967295
   2db04:	e0d1      	b.n	2dcaa <_svfiprintf_r+0x1d2>
   2db06:	2340      	movs	r3, #64	; 0x40
   2db08:	616b      	str	r3, [r5, #20]
   2db0a:	2300      	movs	r3, #0
   2db0c:	f8cd 800c 	str.w	r8, [sp, #12]
   2db10:	f04f 0901 	mov.w	r9, #1
   2db14:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 2dcc4 <_svfiprintf_r+0x1ec>
   2db18:	9309      	str	r3, [sp, #36]	; 0x24
   2db1a:	2320      	movs	r3, #32
   2db1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2db20:	2330      	movs	r3, #48	; 0x30
   2db22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2db26:	4623      	mov	r3, r4
   2db28:	469a      	mov	sl, r3
   2db2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2db2e:	b10a      	cbz	r2, 2db34 <_svfiprintf_r+0x5c>
   2db30:	2a25      	cmp	r2, #37	; 0x25
   2db32:	d1f9      	bne.n	2db28 <_svfiprintf_r+0x50>
   2db34:	ebba 0b04 	subs.w	fp, sl, r4
   2db38:	d00b      	beq.n	2db52 <_svfiprintf_r+0x7a>
   2db3a:	465b      	mov	r3, fp
   2db3c:	4622      	mov	r2, r4
   2db3e:	4629      	mov	r1, r5
   2db40:	4638      	mov	r0, r7
   2db42:	f008 fa93 	bl	3606c <__ssputs_r>
   2db46:	3001      	adds	r0, #1
   2db48:	f000 80aa 	beq.w	2dca0 <_svfiprintf_r+0x1c8>
   2db4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2db4e:	445a      	add	r2, fp
   2db50:	9209      	str	r2, [sp, #36]	; 0x24
   2db52:	f89a 3000 	ldrb.w	r3, [sl]
   2db56:	2b00      	cmp	r3, #0
   2db58:	f000 80a2 	beq.w	2dca0 <_svfiprintf_r+0x1c8>
   2db5c:	2300      	movs	r3, #0
   2db5e:	f04f 32ff 	mov.w	r2, #4294967295
   2db62:	f10a 0a01 	add.w	sl, sl, #1
   2db66:	9304      	str	r3, [sp, #16]
   2db68:	9307      	str	r3, [sp, #28]
   2db6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2db6e:	931a      	str	r3, [sp, #104]	; 0x68
   2db70:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2db74:	4654      	mov	r4, sl
   2db76:	2205      	movs	r2, #5
   2db78:	4852      	ldr	r0, [pc, #328]	; (2dcc4 <_svfiprintf_r+0x1ec>)
   2db7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2db7e:	f007 fce6 	bl	3554e <memchr>
   2db82:	9a04      	ldr	r2, [sp, #16]
   2db84:	b9d8      	cbnz	r0, 2dbbe <_svfiprintf_r+0xe6>
   2db86:	06d0      	lsls	r0, r2, #27
   2db88:	bf44      	itt	mi
   2db8a:	2320      	movmi	r3, #32
   2db8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2db90:	0711      	lsls	r1, r2, #28
   2db92:	bf44      	itt	mi
   2db94:	232b      	movmi	r3, #43	; 0x2b
   2db96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2db9a:	f89a 3000 	ldrb.w	r3, [sl]
   2db9e:	2b2a      	cmp	r3, #42	; 0x2a
   2dba0:	d015      	beq.n	2dbce <_svfiprintf_r+0xf6>
   2dba2:	9a07      	ldr	r2, [sp, #28]
   2dba4:	4654      	mov	r4, sl
   2dba6:	2000      	movs	r0, #0
   2dba8:	f04f 0c0a 	mov.w	ip, #10
   2dbac:	4621      	mov	r1, r4
   2dbae:	f811 3b01 	ldrb.w	r3, [r1], #1
   2dbb2:	3b30      	subs	r3, #48	; 0x30
   2dbb4:	2b09      	cmp	r3, #9
   2dbb6:	d94e      	bls.n	2dc56 <_svfiprintf_r+0x17e>
   2dbb8:	b1b0      	cbz	r0, 2dbe8 <_svfiprintf_r+0x110>
   2dbba:	9207      	str	r2, [sp, #28]
   2dbbc:	e014      	b.n	2dbe8 <_svfiprintf_r+0x110>
   2dbbe:	eba0 0308 	sub.w	r3, r0, r8
   2dbc2:	46a2      	mov	sl, r4
   2dbc4:	fa09 f303 	lsl.w	r3, r9, r3
   2dbc8:	4313      	orrs	r3, r2
   2dbca:	9304      	str	r3, [sp, #16]
   2dbcc:	e7d2      	b.n	2db74 <_svfiprintf_r+0x9c>
   2dbce:	9b03      	ldr	r3, [sp, #12]
   2dbd0:	1d19      	adds	r1, r3, #4
   2dbd2:	681b      	ldr	r3, [r3, #0]
   2dbd4:	2b00      	cmp	r3, #0
   2dbd6:	9103      	str	r1, [sp, #12]
   2dbd8:	bfbb      	ittet	lt
   2dbda:	425b      	neglt	r3, r3
   2dbdc:	f042 0202 	orrlt.w	r2, r2, #2
   2dbe0:	9307      	strge	r3, [sp, #28]
   2dbe2:	9307      	strlt	r3, [sp, #28]
   2dbe4:	bfb8      	it	lt
   2dbe6:	9204      	strlt	r2, [sp, #16]
   2dbe8:	7823      	ldrb	r3, [r4, #0]
   2dbea:	2b2e      	cmp	r3, #46	; 0x2e
   2dbec:	d10c      	bne.n	2dc08 <_svfiprintf_r+0x130>
   2dbee:	7863      	ldrb	r3, [r4, #1]
   2dbf0:	2b2a      	cmp	r3, #42	; 0x2a
   2dbf2:	d135      	bne.n	2dc60 <_svfiprintf_r+0x188>
   2dbf4:	9b03      	ldr	r3, [sp, #12]
   2dbf6:	3402      	adds	r4, #2
   2dbf8:	1d1a      	adds	r2, r3, #4
   2dbfa:	681b      	ldr	r3, [r3, #0]
   2dbfc:	2b00      	cmp	r3, #0
   2dbfe:	9203      	str	r2, [sp, #12]
   2dc00:	bfb8      	it	lt
   2dc02:	f04f 33ff 	movlt.w	r3, #4294967295
   2dc06:	9305      	str	r3, [sp, #20]
   2dc08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2dcd4 <_svfiprintf_r+0x1fc>
   2dc0c:	2203      	movs	r2, #3
   2dc0e:	7821      	ldrb	r1, [r4, #0]
   2dc10:	4650      	mov	r0, sl
   2dc12:	f007 fc9c 	bl	3554e <memchr>
   2dc16:	b140      	cbz	r0, 2dc2a <_svfiprintf_r+0x152>
   2dc18:	2340      	movs	r3, #64	; 0x40
   2dc1a:	eba0 000a 	sub.w	r0, r0, sl
   2dc1e:	3401      	adds	r4, #1
   2dc20:	fa03 f000 	lsl.w	r0, r3, r0
   2dc24:	9b04      	ldr	r3, [sp, #16]
   2dc26:	4303      	orrs	r3, r0
   2dc28:	9304      	str	r3, [sp, #16]
   2dc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2dc2e:	2206      	movs	r2, #6
   2dc30:	4825      	ldr	r0, [pc, #148]	; (2dcc8 <_svfiprintf_r+0x1f0>)
   2dc32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2dc36:	f007 fc8a 	bl	3554e <memchr>
   2dc3a:	2800      	cmp	r0, #0
   2dc3c:	d038      	beq.n	2dcb0 <_svfiprintf_r+0x1d8>
   2dc3e:	4b23      	ldr	r3, [pc, #140]	; (2dccc <_svfiprintf_r+0x1f4>)
   2dc40:	bb1b      	cbnz	r3, 2dc8a <_svfiprintf_r+0x1b2>
   2dc42:	9b03      	ldr	r3, [sp, #12]
   2dc44:	3307      	adds	r3, #7
   2dc46:	f023 0307 	bic.w	r3, r3, #7
   2dc4a:	3308      	adds	r3, #8
   2dc4c:	9303      	str	r3, [sp, #12]
   2dc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dc50:	4433      	add	r3, r6
   2dc52:	9309      	str	r3, [sp, #36]	; 0x24
   2dc54:	e767      	b.n	2db26 <_svfiprintf_r+0x4e>
   2dc56:	fb0c 3202 	mla	r2, ip, r2, r3
   2dc5a:	460c      	mov	r4, r1
   2dc5c:	2001      	movs	r0, #1
   2dc5e:	e7a5      	b.n	2dbac <_svfiprintf_r+0xd4>
   2dc60:	2300      	movs	r3, #0
   2dc62:	3401      	adds	r4, #1
   2dc64:	f04f 0c0a 	mov.w	ip, #10
   2dc68:	4619      	mov	r1, r3
   2dc6a:	9305      	str	r3, [sp, #20]
   2dc6c:	4620      	mov	r0, r4
   2dc6e:	f810 2b01 	ldrb.w	r2, [r0], #1
   2dc72:	3a30      	subs	r2, #48	; 0x30
   2dc74:	2a09      	cmp	r2, #9
   2dc76:	d903      	bls.n	2dc80 <_svfiprintf_r+0x1a8>
   2dc78:	2b00      	cmp	r3, #0
   2dc7a:	d0c5      	beq.n	2dc08 <_svfiprintf_r+0x130>
   2dc7c:	9105      	str	r1, [sp, #20]
   2dc7e:	e7c3      	b.n	2dc08 <_svfiprintf_r+0x130>
   2dc80:	fb0c 2101 	mla	r1, ip, r1, r2
   2dc84:	4604      	mov	r4, r0
   2dc86:	2301      	movs	r3, #1
   2dc88:	e7f0      	b.n	2dc6c <_svfiprintf_r+0x194>
   2dc8a:	ab03      	add	r3, sp, #12
   2dc8c:	462a      	mov	r2, r5
   2dc8e:	a904      	add	r1, sp, #16
   2dc90:	4638      	mov	r0, r7
   2dc92:	9300      	str	r3, [sp, #0]
   2dc94:	4b0e      	ldr	r3, [pc, #56]	; (2dcd0 <_svfiprintf_r+0x1f8>)
   2dc96:	f7fe ff69 	bl	2cb6c <_printf_float>
   2dc9a:	1c42      	adds	r2, r0, #1
   2dc9c:	4606      	mov	r6, r0
   2dc9e:	d1d6      	bne.n	2dc4e <_svfiprintf_r+0x176>
   2dca0:	89ab      	ldrh	r3, [r5, #12]
   2dca2:	065b      	lsls	r3, r3, #25
   2dca4:	f53f af2c 	bmi.w	2db00 <_svfiprintf_r+0x28>
   2dca8:	9809      	ldr	r0, [sp, #36]	; 0x24
   2dcaa:	b01d      	add	sp, #116	; 0x74
   2dcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dcb0:	ab03      	add	r3, sp, #12
   2dcb2:	462a      	mov	r2, r5
   2dcb4:	a904      	add	r1, sp, #16
   2dcb6:	4638      	mov	r0, r7
   2dcb8:	9300      	str	r3, [sp, #0]
   2dcba:	4b05      	ldr	r3, [pc, #20]	; (2dcd0 <_svfiprintf_r+0x1f8>)
   2dcbc:	f7ff f980 	bl	2cfc0 <_printf_i>
   2dcc0:	e7eb      	b.n	2dc9a <_svfiprintf_r+0x1c2>
   2dcc2:	bf00      	nop
   2dcc4:	0003f098 	.word	0x0003f098
   2dcc8:	0003f0a2 	.word	0x0003f0a2
   2dccc:	0002cb6d 	.word	0x0002cb6d
   2dcd0:	0003606d 	.word	0x0003606d
   2dcd4:	0003f09e 	.word	0x0003f09e

0002dcd8 <k_msgq_get_atomic>:
int k_msgq_get_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   2dcd8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2dcda:	f04f 0520 	mov.w	r5, #32
   2dcde:	f3ef 8411 	mrs	r4, BASEPRI
   2dce2:	f385 8811 	msr	BASEPRI, r5
   2dce6:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_get(msgq, data, timeout);
   2dcea:	f7fb fa25 	bl	29138 <z_impl_k_msgq_get>
	__asm__ volatile(
   2dcee:	f384 8811 	msr	BASEPRI, r4
   2dcf2:	f3bf 8f6f 	isb	sy
}
   2dcf6:	bd38      	pop	{r3, r4, r5, pc}

0002dcf8 <k_msgq_put_atomic>:
int k_msgq_put_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   2dcf8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2dcfa:	f04f 0520 	mov.w	r5, #32
   2dcfe:	f3ef 8411 	mrs	r4, BASEPRI
   2dd02:	f385 8811 	msr	BASEPRI, r5
   2dd06:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_put(msgq, data, timeout);
   2dd0a:	f7fb f96d 	bl	28fe8 <z_impl_k_msgq_put>
	__asm__ volatile(
   2dd0e:	f384 8811 	msr	BASEPRI, r4
   2dd12:	f3bf 8f6f 	isb	sy
}
   2dd16:	bd38      	pop	{r3, r4, r5, pc}

0002dd18 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2dd18:	b40c      	push	{r2, r3}
   2dd1a:	4603      	mov	r3, r0
   2dd1c:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2dd1e:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2dd20:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2dd22:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   2dd24:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   2dd28:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2dd2a:	4798      	blx	r3
	va_end(args);

	return res;
}
   2dd2c:	b003      	add	sp, #12
   2dd2e:	f85d eb04 	ldr.w	lr, [sp], #4
   2dd32:	b002      	add	sp, #8
   2dd34:	4770      	bx	lr

0002dd36 <sys_notify_validate>:
	if (notify == NULL) {
   2dd36:	4603      	mov	r3, r0
   2dd38:	b140      	cbz	r0, 2dd4c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2dd3a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2dd3c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2dd40:	2a02      	cmp	r2, #2
   2dd42:	d006      	beq.n	2dd52 <sys_notify_validate+0x1c>
   2dd44:	2a03      	cmp	r2, #3
   2dd46:	d004      	beq.n	2dd52 <sys_notify_validate+0x1c>
   2dd48:	2a01      	cmp	r2, #1
   2dd4a:	d005      	beq.n	2dd58 <sys_notify_validate+0x22>
		return -EINVAL;
   2dd4c:	f06f 0015 	mvn.w	r0, #21
}
   2dd50:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2dd52:	681a      	ldr	r2, [r3, #0]
   2dd54:	2a00      	cmp	r2, #0
   2dd56:	d0f9      	beq.n	2dd4c <sys_notify_validate+0x16>
		notify->result = 0;
   2dd58:	2000      	movs	r0, #0
   2dd5a:	6098      	str	r0, [r3, #8]
   2dd5c:	4770      	bx	lr

0002dd5e <arch_printk_char_out>:
}
   2dd5e:	2000      	movs	r0, #0
   2dd60:	4770      	bx	lr

0002dd62 <str_out>:
{
   2dd62:	b530      	push	{r4, r5, lr}
   2dd64:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2dd66:	680c      	ldr	r4, [r1, #0]
   2dd68:	1c55      	adds	r5, r2, #1
   2dd6a:	b114      	cbz	r4, 2dd72 <str_out+0x10>
   2dd6c:	684b      	ldr	r3, [r1, #4]
   2dd6e:	4293      	cmp	r3, r2
   2dd70:	dc01      	bgt.n	2dd76 <str_out+0x14>
		ctx->count++;
   2dd72:	608d      	str	r5, [r1, #8]
}
   2dd74:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2dd76:	3b01      	subs	r3, #1
   2dd78:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2dd7a:	bf08      	it	eq
   2dd7c:	2200      	moveq	r2, #0
   2dd7e:	608d      	str	r5, [r1, #8]
   2dd80:	bf0c      	ite	eq
   2dd82:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2dd84:	54a0      	strbne	r0, [r4, r2]
   2dd86:	e7f5      	b.n	2dd74 <str_out+0x12>

0002dd88 <printk>:
{
   2dd88:	b40f      	push	{r0, r1, r2, r3}
   2dd8a:	b507      	push	{r0, r1, r2, lr}
   2dd8c:	a904      	add	r1, sp, #16
   2dd8e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2dd92:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2dd94:	f7e5 fa86 	bl	132a4 <vprintk>
}
   2dd98:	b003      	add	sp, #12
   2dd9a:	f85d eb04 	ldr.w	lr, [sp], #4
   2dd9e:	b004      	add	sp, #16
   2dda0:	4770      	bx	lr

0002dda2 <snprintk>:
{
   2dda2:	b40c      	push	{r2, r3}
   2dda4:	b507      	push	{r0, r1, r2, lr}
   2dda6:	ab04      	add	r3, sp, #16
   2dda8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2ddac:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2ddae:	f7e5 fa87 	bl	132c0 <vsnprintk>
}
   2ddb2:	b003      	add	sp, #12
   2ddb4:	f85d eb04 	ldr.w	lr, [sp], #4
   2ddb8:	b002      	add	sp, #8
   2ddba:	4770      	bx	lr

0002ddbc <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ddbc:	2200      	movs	r2, #0
   2ddbe:	4603      	mov	r3, r0
   2ddc0:	6800      	ldr	r0, [r0, #0]
   2ddc2:	b900      	cbnz	r0, 2ddc6 <sys_slist_find_and_remove+0xa>
   2ddc4:	4770      	bx	lr
   2ddc6:	4288      	cmp	r0, r1
   2ddc8:	d110      	bne.n	2ddec <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2ddca:	6808      	ldr	r0, [r1, #0]
   2ddcc:	b942      	cbnz	r2, 2dde0 <sys_slist_find_and_remove+0x24>
   2ddce:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2ddd0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ddd2:	4291      	cmp	r1, r2
   2ddd4:	d100      	bne.n	2ddd8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2ddd6:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2ddd8:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ddda:	2001      	movs	r0, #1
	parent->next = child;
   2dddc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ddde:	4770      	bx	lr
	parent->next = child;
   2dde0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dde2:	6858      	ldr	r0, [r3, #4]
   2dde4:	4281      	cmp	r1, r0
	list->tail = node;
   2dde6:	bf08      	it	eq
   2dde8:	605a      	streq	r2, [r3, #4]
}
   2ddea:	e7f5      	b.n	2ddd8 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ddec:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ddee:	6800      	ldr	r0, [r0, #0]
   2ddf0:	e7e7      	b.n	2ddc2 <sys_slist_find_and_remove+0x6>

0002ddf2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2ddf2:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2ddf4:	f013 0307 	ands.w	r3, r3, #7
   2ddf8:	d105      	bne.n	2de06 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2ddfa:	6803      	ldr	r3, [r0, #0]
   2ddfc:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2ddfe:	bf0c      	ite	eq
   2de00:	2000      	moveq	r0, #0
   2de02:	2003      	movne	r0, #3
   2de04:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2de06:	2b02      	cmp	r3, #2
   2de08:	d105      	bne.n	2de16 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2de0a:	8bc3      	ldrh	r3, [r0, #30]
   2de0c:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2de0e:	bf14      	ite	ne
   2de10:	2000      	movne	r0, #0
   2de12:	2004      	moveq	r0, #4
   2de14:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2de16:	2b01      	cmp	r3, #1
   2de18:	d105      	bne.n	2de26 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2de1a:	6803      	ldr	r3, [r0, #0]
   2de1c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2de1e:	bf0c      	ite	eq
   2de20:	2000      	moveq	r0, #0
   2de22:	2005      	movne	r0, #5
   2de24:	4770      	bx	lr
	int evt = EVT_NOP;
   2de26:	2000      	movs	r0, #0
}
   2de28:	4770      	bx	lr

0002de2a <notify_one>:
{
   2de2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2de2e:	460d      	mov	r5, r1
   2de30:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2de32:	4619      	mov	r1, r3
   2de34:	1d28      	adds	r0, r5, #4
{
   2de36:	4690      	mov	r8, r2
   2de38:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2de3a:	f7e5 f9f5 	bl	13228 <sys_notify_finalize>
	if (cb) {
   2de3e:	4604      	mov	r4, r0
   2de40:	b138      	cbz	r0, 2de52 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2de42:	4633      	mov	r3, r6
   2de44:	4642      	mov	r2, r8
   2de46:	4629      	mov	r1, r5
   2de48:	4638      	mov	r0, r7
   2de4a:	46a4      	mov	ip, r4
}
   2de4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2de50:	4760      	bx	ip
}
   2de52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002de56 <validate_args>:
{
   2de56:	b510      	push	{r4, lr}
   2de58:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2de5a:	b140      	cbz	r0, 2de6e <validate_args+0x18>
   2de5c:	b139      	cbz	r1, 2de6e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2de5e:	1d08      	adds	r0, r1, #4
   2de60:	f7ff ff69 	bl	2dd36 <sys_notify_validate>
	if ((rv == 0)
   2de64:	b928      	cbnz	r0, 2de72 <validate_args+0x1c>
	    && ((cli->notify.flags
   2de66:	68a3      	ldr	r3, [r4, #8]
   2de68:	f033 0303 	bics.w	r3, r3, #3
   2de6c:	d001      	beq.n	2de72 <validate_args+0x1c>
		rv = -EINVAL;
   2de6e:	f06f 0015 	mvn.w	r0, #21
}
   2de72:	bd10      	pop	{r4, pc}

0002de74 <onoff_manager_init>:
{
   2de74:	b538      	push	{r3, r4, r5, lr}
   2de76:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2de78:	4605      	mov	r5, r0
   2de7a:	b158      	cbz	r0, 2de94 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2de7c:	b151      	cbz	r1, 2de94 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2de7e:	680b      	ldr	r3, [r1, #0]
   2de80:	b143      	cbz	r3, 2de94 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2de82:	684b      	ldr	r3, [r1, #4]
   2de84:	b133      	cbz	r3, 2de94 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2de86:	2220      	movs	r2, #32
   2de88:	2100      	movs	r1, #0
   2de8a:	f007 fb9c 	bl	355c6 <memset>
	return 0;
   2de8e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2de90:	612c      	str	r4, [r5, #16]
}
   2de92:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2de94:	f06f 0015 	mvn.w	r0, #21
   2de98:	e7fb      	b.n	2de92 <onoff_manager_init+0x1e>

0002de9a <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2de9a:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2de9c:	f7fb fd60 	bl	29960 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2dea0:	2000      	movs	r0, #0
   2dea2:	bd08      	pop	{r3, pc}

0002dea4 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2dea4:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2dea6:	f7fb fd9f 	bl	299e8 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2deaa:	f110 0f0b 	cmn.w	r0, #11
   2deae:	d005      	beq.n	2debc <sys_sem_take+0x18>
   2deb0:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2deb4:	bf08      	it	eq
   2deb6:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2deba:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2debc:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2dec0:	e7fb      	b.n	2deba <sys_sem_take+0x16>

0002dec2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2dec2:	4604      	mov	r4, r0
   2dec4:	b508      	push	{r3, lr}
   2dec6:	4608      	mov	r0, r1
   2dec8:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2deca:	461a      	mov	r2, r3
   2decc:	47a0      	blx	r4
	return z_impl_k_current_get();
   2dece:	f7fd fc3f 	bl	2b750 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2ded2:	f7e9 fb5b 	bl	1758c <z_impl_k_thread_abort>

0002ded6 <chunk_field>:
	if (big_heap(h)) {
   2ded6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2ded8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2dedc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2dee0:	bf2c      	ite	cs
   2dee2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   2dee6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   2deea:	4770      	bx	lr

0002deec <chunk_set>:
	void *cmem = &buf[c];
   2deec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2def0:	6880      	ldr	r0, [r0, #8]
   2def2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   2def6:	bf2c      	ite	cs
   2def8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2defc:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   2df00:	4770      	bx	lr

0002df02 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2df02:	2201      	movs	r2, #1
{
   2df04:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2df06:	f7ff ffe6 	bl	2ded6 <chunk_field>
}
   2df0a:	0840      	lsrs	r0, r0, #1
   2df0c:	bd08      	pop	{r3, pc}

0002df0e <set_chunk_used>:
	if (big_heap(h)) {
   2df0e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2df10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2df14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2df18:	d308      	bcc.n	2df2c <set_chunk_used+0x1e>
		if (used) {
   2df1a:	684b      	ldr	r3, [r1, #4]
   2df1c:	b11a      	cbz	r2, 2df26 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2df1e:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2df22:	604b      	str	r3, [r1, #4]
   2df24:	4770      	bx	lr
   2df26:	f023 0301 	bic.w	r3, r3, #1
   2df2a:	e7fa      	b.n	2df22 <set_chunk_used+0x14>
		if (used) {
   2df2c:	884b      	ldrh	r3, [r1, #2]
   2df2e:	b11a      	cbz	r2, 2df38 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2df30:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2df34:	804b      	strh	r3, [r1, #2]
}
   2df36:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2df38:	f023 0301 	bic.w	r3, r3, #1
   2df3c:	e7fa      	b.n	2df34 <set_chunk_used+0x26>

0002df3e <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2df3e:	0053      	lsls	r3, r2, #1
   2df40:	2201      	movs	r2, #1
   2df42:	f7ff bfd3 	b.w	2deec <chunk_set>

0002df46 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   2df46:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2df48:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   2df4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2df4e:	bf2c      	ite	cs
   2df50:	2008      	movcs	r0, #8
   2df52:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2df54:	4408      	add	r0, r1
}
   2df56:	08c0      	lsrs	r0, r0, #3
   2df58:	4770      	bx	lr

0002df5a <bucket_idx>:
{
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   2df5a:	460a      	mov	r2, r1
   2df5c:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2df5e:	2101      	movs	r1, #1
   2df60:	f7ff fff1 	bl	2df46 <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   2df64:	3201      	adds	r2, #1
   2df66:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   2df68:	fab2 f082 	clz	r0, r2
}
   2df6c:	f1c0 001f 	rsb	r0, r0, #31
   2df70:	bd08      	pop	{r3, pc}

0002df72 <merge_chunks>:
{
   2df72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2df76:	4616      	mov	r6, r2
   2df78:	4604      	mov	r4, r0
   2df7a:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2df7c:	f7ff ffc1 	bl	2df02 <chunk_size>
   2df80:	4631      	mov	r1, r6
   2df82:	4605      	mov	r5, r0
   2df84:	4620      	mov	r0, r4
   2df86:	f7ff ffbc 	bl	2df02 <chunk_size>
   2df8a:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   2df8c:	462a      	mov	r2, r5
   2df8e:	4639      	mov	r1, r7
   2df90:	4620      	mov	r0, r4
   2df92:	f7ff ffd4 	bl	2df3e <set_chunk_size>
	return c + chunk_size(h, c);
   2df96:	4631      	mov	r1, r6
   2df98:	4620      	mov	r0, r4
   2df9a:	f7ff ffb2 	bl	2df02 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2df9e:	462b      	mov	r3, r5
   2dfa0:	1831      	adds	r1, r6, r0
   2dfa2:	2200      	movs	r2, #0
   2dfa4:	4620      	mov	r0, r4
}
   2dfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2dfaa:	f7ff bf9f 	b.w	2deec <chunk_set>

0002dfae <split_chunks>:
{
   2dfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dfb2:	4614      	mov	r4, r2
   2dfb4:	460e      	mov	r6, r1
   2dfb6:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2dfb8:	f7ff ffa3 	bl	2df02 <chunk_size>
	chunksz_t lsz = rc - lc;
   2dfbc:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   2dfc0:	1b37      	subs	r7, r6, r4
   2dfc2:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   2dfc4:	4642      	mov	r2, r8
   2dfc6:	4631      	mov	r1, r6
   2dfc8:	4628      	mov	r0, r5
   2dfca:	f7ff ffb8 	bl	2df3e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2dfce:	463a      	mov	r2, r7
   2dfd0:	4621      	mov	r1, r4
   2dfd2:	4628      	mov	r0, r5
   2dfd4:	f7ff ffb3 	bl	2df3e <set_chunk_size>
   2dfd8:	4643      	mov	r3, r8
   2dfda:	2200      	movs	r2, #0
   2dfdc:	4621      	mov	r1, r4
   2dfde:	4628      	mov	r0, r5
   2dfe0:	f7ff ff84 	bl	2deec <chunk_set>
	return c + chunk_size(h, c);
   2dfe4:	4621      	mov	r1, r4
   2dfe6:	4628      	mov	r0, r5
   2dfe8:	f7ff ff8b 	bl	2df02 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2dfec:	463b      	mov	r3, r7
   2dfee:	1821      	adds	r1, r4, r0
   2dff0:	2200      	movs	r2, #0
   2dff2:	4628      	mov	r0, r5
}
   2dff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2dff8:	f7ff bf78 	b.w	2deec <chunk_set>

0002dffc <free_list_remove_bidx>:
{
   2dffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e000:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2e002:	2203      	movs	r2, #3
   2e004:	460e      	mov	r6, r1
   2e006:	4604      	mov	r4, r0
   2e008:	f7ff ff65 	bl	2ded6 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   2e00c:	4286      	cmp	r6, r0
   2e00e:	4605      	mov	r5, r0
   2e010:	f107 0804 	add.w	r8, r7, #4
   2e014:	d10b      	bne.n	2e02e <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2e016:	2301      	movs	r3, #1
   2e018:	fa03 f707 	lsl.w	r7, r3, r7
   2e01c:	68e3      	ldr	r3, [r4, #12]
   2e01e:	ea23 0307 	bic.w	r3, r3, r7
   2e022:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   2e024:	2300      	movs	r3, #0
   2e026:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2e02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2e02e:	4631      	mov	r1, r6
   2e030:	2202      	movs	r2, #2
   2e032:	4620      	mov	r0, r4
   2e034:	f7ff ff4f 	bl	2ded6 <chunk_field>
   2e038:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2e03a:	462b      	mov	r3, r5
   2e03c:	4601      	mov	r1, r0
   2e03e:	2203      	movs	r2, #3
   2e040:	4620      	mov	r0, r4
		b->next = second;
   2e042:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2e046:	f7ff ff51 	bl	2deec <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2e04a:	4633      	mov	r3, r6
   2e04c:	4629      	mov	r1, r5
   2e04e:	4620      	mov	r0, r4
}
   2e050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e054:	2202      	movs	r2, #2
   2e056:	f7ff bf49 	b.w	2deec <chunk_set>

0002e05a <alloc_chunk>:
{
   2e05a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e05e:	4605      	mov	r5, r0
   2e060:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   2e062:	f7ff ff7a 	bl	2df5a <bucket_idx>
   2e066:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	if (b->next) {
   2e06a:	f8da 9010 	ldr.w	r9, [sl, #16]
	int bi = bucket_idx(h, sz);
   2e06e:	4606      	mov	r6, r0
	if (b->next) {
   2e070:	f1b9 0f00 	cmp.w	r9, #0
   2e074:	d01b      	beq.n	2e0ae <alloc_chunk+0x54>
   2e076:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2e078:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   2e07c:	4628      	mov	r0, r5
   2e07e:	4621      	mov	r1, r4
   2e080:	f7ff ff3f 	bl	2df02 <chunk_size>
   2e084:	4540      	cmp	r0, r8
   2e086:	d307      	bcc.n	2e098 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   2e088:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   2e08a:	4621      	mov	r1, r4
   2e08c:	4628      	mov	r0, r5
   2e08e:	f7ff ffb5 	bl	2dffc <free_list_remove_bidx>
}
   2e092:	4620      	mov	r0, r4
   2e094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   2e098:	2203      	movs	r2, #3
   2e09a:	4621      	mov	r1, r4
   2e09c:	4628      	mov	r0, r5
   2e09e:	f7ff ff1a 	bl	2ded6 <chunk_field>
		} while (--i && b->next != first);
   2e0a2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2e0a4:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   2e0a8:	d001      	beq.n	2e0ae <alloc_chunk+0x54>
   2e0aa:	4581      	cmp	r9, r0
   2e0ac:	d1e4      	bne.n	2e078 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2e0ae:	f04f 34ff 	mov.w	r4, #4294967295
   2e0b2:	68e9      	ldr	r1, [r5, #12]
   2e0b4:	3601      	adds	r6, #1
   2e0b6:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   2e0b8:	400c      	ands	r4, r1
   2e0ba:	d0ea      	beq.n	2e092 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   2e0bc:	fa94 f2a4 	rbit	r2, r4
   2e0c0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2e0c4:	1d13      	adds	r3, r2, #4
   2e0c6:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   2e0ca:	e7de      	b.n	2e08a <alloc_chunk+0x30>

0002e0cc <free_list_add>:
{
   2e0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e0d0:	4604      	mov	r4, r0
   2e0d2:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   2e0d4:	f7ff ff15 	bl	2df02 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   2e0d8:	68a3      	ldr	r3, [r4, #8]
   2e0da:	4601      	mov	r1, r0
   2e0dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2e0e0:	d301      	bcc.n	2e0e6 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2e0e2:	2801      	cmp	r0, #1
   2e0e4:	d035      	beq.n	2e152 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2e0e6:	4620      	mov	r0, r4
   2e0e8:	f7ff ff37 	bl	2df5a <bucket_idx>
	if (b->next == 0U) {
   2e0ec:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2e0f0:	6916      	ldr	r6, [r2, #16]
   2e0f2:	b99e      	cbnz	r6, 2e11c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2e0f4:	2301      	movs	r3, #1
   2e0f6:	fa03 f000 	lsl.w	r0, r3, r0
   2e0fa:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2e0fc:	4629      	mov	r1, r5
   2e0fe:	4303      	orrs	r3, r0
   2e100:	60e3      	str	r3, [r4, #12]
   2e102:	4620      	mov	r0, r4
		b->next = c;
   2e104:	6115      	str	r5, [r2, #16]
   2e106:	462b      	mov	r3, r5
   2e108:	2202      	movs	r2, #2
   2e10a:	f7ff feef 	bl	2deec <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2e10e:	2203      	movs	r2, #3
   2e110:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2e112:	4620      	mov	r0, r4
}
   2e114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e118:	f7ff bee8 	b.w	2deec <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2e11c:	2202      	movs	r2, #2
   2e11e:	4631      	mov	r1, r6
   2e120:	4620      	mov	r0, r4
   2e122:	f7ff fed8 	bl	2ded6 <chunk_field>
   2e126:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2e128:	4603      	mov	r3, r0
   2e12a:	2202      	movs	r2, #2
   2e12c:	4629      	mov	r1, r5
   2e12e:	4620      	mov	r0, r4
   2e130:	f7ff fedc 	bl	2deec <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2e134:	4633      	mov	r3, r6
   2e136:	2203      	movs	r2, #3
   2e138:	4629      	mov	r1, r5
   2e13a:	4620      	mov	r0, r4
   2e13c:	f7ff fed6 	bl	2deec <chunk_set>
   2e140:	2203      	movs	r2, #3
   2e142:	4639      	mov	r1, r7
   2e144:	462b      	mov	r3, r5
   2e146:	4620      	mov	r0, r4
   2e148:	f7ff fed0 	bl	2deec <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2e14c:	2202      	movs	r2, #2
   2e14e:	4631      	mov	r1, r6
   2e150:	e7df      	b.n	2e112 <free_list_add+0x46>
   2e152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e156 <free_list_remove>:
{
   2e156:	b538      	push	{r3, r4, r5, lr}
   2e158:	4604      	mov	r4, r0
   2e15a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   2e15c:	f7ff fed1 	bl	2df02 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   2e160:	68a3      	ldr	r3, [r4, #8]
   2e162:	4601      	mov	r1, r0
   2e164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2e168:	d301      	bcc.n	2e16e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2e16a:	2801      	cmp	r0, #1
   2e16c:	d009      	beq.n	2e182 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2e16e:	4620      	mov	r0, r4
   2e170:	f7ff fef3 	bl	2df5a <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   2e174:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   2e176:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2e178:	4620      	mov	r0, r4
}
   2e17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2e17e:	f7ff bf3d 	b.w	2dffc <free_list_remove_bidx>
}
   2e182:	bd38      	pop	{r3, r4, r5, pc}

0002e184 <free_chunk>:
{
   2e184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e186:	460c      	mov	r4, r1
   2e188:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2e18a:	f7ff feba 	bl	2df02 <chunk_size>
   2e18e:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2e190:	2201      	movs	r2, #1
   2e192:	4631      	mov	r1, r6
   2e194:	4628      	mov	r0, r5
   2e196:	f7ff fe9e 	bl	2ded6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   2e19a:	07c3      	lsls	r3, r0, #31
   2e19c:	d40c      	bmi.n	2e1b8 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   2e19e:	4631      	mov	r1, r6
   2e1a0:	4628      	mov	r0, r5
   2e1a2:	f7ff ffd8 	bl	2e156 <free_list_remove>
	return c + chunk_size(h, c);
   2e1a6:	4621      	mov	r1, r4
   2e1a8:	4628      	mov	r0, r5
   2e1aa:	f7ff feaa 	bl	2df02 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2e1ae:	4621      	mov	r1, r4
   2e1b0:	1822      	adds	r2, r4, r0
   2e1b2:	4628      	mov	r0, r5
   2e1b4:	f7ff fedd 	bl	2df72 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   2e1b8:	2200      	movs	r2, #0
   2e1ba:	4621      	mov	r1, r4
   2e1bc:	4628      	mov	r0, r5
   2e1be:	f7ff fe8a 	bl	2ded6 <chunk_field>
   2e1c2:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2e1c4:	2201      	movs	r2, #1
   2e1c6:	4639      	mov	r1, r7
   2e1c8:	4628      	mov	r0, r5
   2e1ca:	f7ff fe84 	bl	2ded6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   2e1ce:	f010 0601 	ands.w	r6, r0, #1
   2e1d2:	d113      	bne.n	2e1fc <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   2e1d4:	4639      	mov	r1, r7
   2e1d6:	4628      	mov	r0, r5
   2e1d8:	f7ff ffbd 	bl	2e156 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   2e1dc:	4621      	mov	r1, r4
   2e1de:	4632      	mov	r2, r6
   2e1e0:	4628      	mov	r0, r5
   2e1e2:	f7ff fe78 	bl	2ded6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   2e1e6:	4622      	mov	r2, r4
   2e1e8:	1a21      	subs	r1, r4, r0
   2e1ea:	4628      	mov	r0, r5
   2e1ec:	f7ff fec1 	bl	2df72 <merge_chunks>
   2e1f0:	4621      	mov	r1, r4
   2e1f2:	4632      	mov	r2, r6
   2e1f4:	4628      	mov	r0, r5
   2e1f6:	f7ff fe6e 	bl	2ded6 <chunk_field>
   2e1fa:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   2e1fc:	4621      	mov	r1, r4
   2e1fe:	4628      	mov	r0, r5
}
   2e200:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   2e204:	f7ff bf62 	b.w	2e0cc <free_list_add>

0002e208 <sys_heap_alloc>:
{
   2e208:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2e20a:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2e20c:	b909      	cbnz	r1, 2e212 <sys_heap_alloc+0xa>
		return NULL;
   2e20e:	2000      	movs	r0, #0
}
   2e210:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2e212:	68a2      	ldr	r2, [r4, #8]
   2e214:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   2e218:	d9f9      	bls.n	2e20e <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   2e21a:	4620      	mov	r0, r4
   2e21c:	f7ff fe93 	bl	2df46 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2e220:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   2e222:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2e224:	4620      	mov	r0, r4
   2e226:	f7ff ff18 	bl	2e05a <alloc_chunk>
	if (c == 0U) {
   2e22a:	4605      	mov	r5, r0
   2e22c:	2800      	cmp	r0, #0
   2e22e:	d0ee      	beq.n	2e20e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2e230:	4601      	mov	r1, r0
   2e232:	4620      	mov	r0, r4
   2e234:	f7ff fe65 	bl	2df02 <chunk_size>
   2e238:	42b0      	cmp	r0, r6
   2e23a:	d909      	bls.n	2e250 <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   2e23c:	442e      	add	r6, r5
   2e23e:	4629      	mov	r1, r5
   2e240:	4620      	mov	r0, r4
   2e242:	4632      	mov	r2, r6
   2e244:	f7ff feb3 	bl	2dfae <split_chunks>
		free_list_add(h, c + chunk_sz);
   2e248:	4631      	mov	r1, r6
   2e24a:	4620      	mov	r0, r4
   2e24c:	f7ff ff3e 	bl	2e0cc <free_list_add>
	set_chunk_used(h, c, true);
   2e250:	4620      	mov	r0, r4
   2e252:	2201      	movs	r2, #1
   2e254:	4629      	mov	r1, r5
   2e256:	f7ff fe5a 	bl	2df0e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   2e25a:	68a3      	ldr	r3, [r4, #8]
   2e25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2e260:	bf2c      	ite	cs
   2e262:	2008      	movcs	r0, #8
   2e264:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2e266:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   2e26a:	4420      	add	r0, r4
	return chunk_mem(h, c);
   2e26c:	e7d0      	b.n	2e210 <sys_heap_alloc+0x8>

0002e26e <outs>:
{
   2e26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e272:	4607      	mov	r7, r0
   2e274:	4688      	mov	r8, r1
   2e276:	4615      	mov	r5, r2
   2e278:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2e27a:	4614      	mov	r4, r2
   2e27c:	42b4      	cmp	r4, r6
   2e27e:	eba4 0005 	sub.w	r0, r4, r5
   2e282:	d302      	bcc.n	2e28a <outs+0x1c>
   2e284:	b93e      	cbnz	r6, 2e296 <outs+0x28>
   2e286:	7823      	ldrb	r3, [r4, #0]
   2e288:	b12b      	cbz	r3, 2e296 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   2e28a:	4641      	mov	r1, r8
   2e28c:	f814 0b01 	ldrb.w	r0, [r4], #1
   2e290:	47b8      	blx	r7
		if (rc < 0) {
   2e292:	2800      	cmp	r0, #0
   2e294:	daf2      	bge.n	2e27c <outs+0xe>
}
   2e296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e29a <get_elem_size>:
{
   2e29a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e29e:	4605      	mov	r5, r0
   2e2a0:	2701      	movs	r7, #1
	switch (descr->type) {
   2e2a2:	796b      	ldrb	r3, [r5, #5]
   2e2a4:	085b      	lsrs	r3, r3, #1
   2e2a6:	2b66      	cmp	r3, #102	; 0x66
   2e2a8:	d031      	beq.n	2e30e <get_elem_size+0x74>
   2e2aa:	d80d      	bhi.n	2e2c8 <get_elem_size+0x2e>
   2e2ac:	2b5b      	cmp	r3, #91	; 0x5b
   2e2ae:	d028      	beq.n	2e302 <get_elem_size+0x68>
   2e2b0:	d82f      	bhi.n	2e312 <get_elem_size+0x78>
   2e2b2:	2b22      	cmp	r3, #34	; 0x22
   2e2b4:	d029      	beq.n	2e30a <get_elem_size+0x70>
		return sizeof(int32_t);
   2e2b6:	2b30      	cmp	r3, #48	; 0x30
   2e2b8:	bf14      	ite	ne
   2e2ba:	f06f 0415 	mvnne.w	r4, #21
   2e2be:	2404      	moveq	r4, #4
}
   2e2c0:	fb07 f004 	mul.w	r0, r7, r4
   2e2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (descr->type) {
   2e2c8:	2b74      	cmp	r3, #116	; 0x74
   2e2ca:	d020      	beq.n	2e30e <get_elem_size+0x74>
   2e2cc:	2b7b      	cmp	r3, #123	; 0x7b
   2e2ce:	d120      	bne.n	2e312 <get_elem_size+0x78>
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2e2d0:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   2e2d2:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   2e2d6:	4634      	mov	r4, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2e2d8:	f8d5 800c 	ldr.w	r8, [r5, #12]
   2e2dc:	45b0      	cmp	r8, r6
   2e2de:	d0ef      	beq.n	2e2c0 <get_elem_size+0x26>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   2e2e0:	68a8      	ldr	r0, [r5, #8]
   2e2e2:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   2e2e6:	f7ff ffd8 	bl	2e29a <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   2e2ea:	792b      	ldrb	r3, [r5, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2e2ec:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   2e2ee:	f003 0303 	and.w	r3, r3, #3
   2e2f2:	fa09 f303 	lsl.w	r3, r9, r3
   2e2f6:	1e5a      	subs	r2, r3, #1
   2e2f8:	4402      	add	r2, r0
   2e2fa:	425b      	negs	r3, r3
   2e2fc:	4013      	ands	r3, r2
   2e2fe:	441c      	add	r4, r3
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   2e300:	e7ec      	b.n	2e2dc <get_elem_size+0x42>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   2e302:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
   2e306:	435f      	muls	r7, r3
   2e308:	e7cb      	b.n	2e2a2 <get_elem_size+0x8>
		return sizeof(int32_t);
   2e30a:	2404      	movs	r4, #4
   2e30c:	e7d8      	b.n	2e2c0 <get_elem_size+0x26>
		return sizeof(bool);
   2e30e:	2401      	movs	r4, #1
   2e310:	e7d6      	b.n	2e2c0 <get_elem_size+0x26>
		return -EINVAL;
   2e312:	f06f 0415 	mvn.w	r4, #21
   2e316:	e7d3      	b.n	2e2c0 <get_elem_size+0x26>

0002e318 <escape_as>:
	switch (chr) {
   2e318:	280d      	cmp	r0, #13
   2e31a:	d80b      	bhi.n	2e334 <escape_as+0x1c>
   2e31c:	2807      	cmp	r0, #7
   2e31e:	d915      	bls.n	2e34c <escape_as+0x34>
   2e320:	3808      	subs	r0, #8
   2e322:	2805      	cmp	r0, #5
   2e324:	d812      	bhi.n	2e34c <escape_as+0x34>
   2e326:	e8df f000 	tbb	[pc, r0]
   2e32a:	0f03      	.short	0x0f03
   2e32c:	0d13110b 	.word	0x0d13110b
		return 'b';
   2e330:	2062      	movs	r0, #98	; 0x62
   2e332:	4770      	bx	lr
	switch (chr) {
   2e334:	2822      	cmp	r0, #34	; 0x22
   2e336:	d00c      	beq.n	2e352 <escape_as+0x3a>
	return 0;
   2e338:	285c      	cmp	r0, #92	; 0x5c
   2e33a:	bf18      	it	ne
   2e33c:	2000      	movne	r0, #0
   2e33e:	4770      	bx	lr
		return 'n';
   2e340:	206e      	movs	r0, #110	; 0x6e
   2e342:	4770      	bx	lr
		return 'r';
   2e344:	2072      	movs	r0, #114	; 0x72
   2e346:	4770      	bx	lr
		return 't';
   2e348:	2074      	movs	r0, #116	; 0x74
   2e34a:	4770      	bx	lr
	return 0;
   2e34c:	2000      	movs	r0, #0
   2e34e:	4770      	bx	lr
		return 'f';
   2e350:	2066      	movs	r0, #102	; 0x66
}
   2e352:	4770      	bx	lr

0002e354 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2e354:	4040      	eors	r0, r0
   2e356:	f380 8811 	msr	BASEPRI, r0
   2e35a:	f04f 0004 	mov.w	r0, #4
   2e35e:	df02      	svc	2
}
   2e360:	4770      	bx	lr

0002e362 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2e362:	4770      	bx	lr

0002e364 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2e364:	f7f4 bff6 	b.w	23354 <SystemInit>

0002e368 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   2e368:	b084      	sub	sp, #16
   2e36a:	ab04      	add	r3, sp, #16
   2e36c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2e370:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2e374:	2b06      	cmp	r3, #6
   2e376:	d108      	bne.n	2e38a <pm_power_state_set+0x22>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2e378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2e37c:	2201      	movs	r2, #1
   2e37e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2e382:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2e386:	bf20      	wfe
    while (true)
   2e388:	e7fd      	b.n	2e386 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2e38a:	b004      	add	sp, #16
   2e38c:	4770      	bx	lr

0002e38e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2e38e:	b084      	sub	sp, #16
   2e390:	ab04      	add	r3, sp, #16
   2e392:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2e396:	2300      	movs	r3, #0
   2e398:	f383 8811 	msr	BASEPRI, r3
   2e39c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2e3a0:	b004      	add	sp, #16
   2e3a2:	4770      	bx	lr

0002e3a4 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2e3a4:	2300      	movs	r3, #0
	list->head = NULL;
   2e3a6:	e9c0 3300 	strd	r3, r3, [r0]
}
   2e3aa:	4770      	bx	lr

0002e3ac <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2e3ac:	6803      	ldr	r3, [r0, #0]
   2e3ae:	b923      	cbnz	r3, 2e3ba <log_list_add_tail+0xe>
		list->head = msg;
   2e3b0:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   2e3b2:	2300      	movs	r3, #0
	list->tail = msg;
   2e3b4:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2e3b6:	600b      	str	r3, [r1, #0]
}
   2e3b8:	4770      	bx	lr
		list->tail->next = msg;
   2e3ba:	6843      	ldr	r3, [r0, #4]
   2e3bc:	6019      	str	r1, [r3, #0]
   2e3be:	e7f8      	b.n	2e3b2 <log_list_add_tail+0x6>

0002e3c0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2e3c0:	6800      	ldr	r0, [r0, #0]
   2e3c2:	4770      	bx	lr

0002e3c4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2e3c4:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2e3c6:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2e3c8:	b108      	cbz	r0, 2e3ce <log_list_head_get+0xa>
		list->head = list->head->next;
   2e3ca:	6802      	ldr	r2, [r0, #0]
   2e3cc:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   2e3ce:	4770      	bx	lr

0002e3d0 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   2e3d0:	6843      	ldr	r3, [r0, #4]
}
   2e3d2:	7958      	ldrb	r0, [r3, #5]
   2e3d4:	4770      	bx	lr

0002e3d6 <z_log_msg_std_alloc>:
{
   2e3d6:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2e3d8:	f7e6 fda8 	bl	14f2c <log_msg_chunk_alloc>
	if (msg != NULL) {
   2e3dc:	b118      	cbz	r0, 2e3e6 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   2e3de:	2301      	movs	r3, #1
   2e3e0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2e3e2:	2300      	movs	r3, #0
   2e3e4:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   2e3e6:	bd08      	pop	{r3, pc}

0002e3e8 <default_get_timestamp>:
   2e3e8:	f7e8 b982 	b.w	166f0 <sys_clock_cycle_get_32>

0002e3ec <dummy_timestamp>:
   2e3ec:	2000      	movs	r0, #0
   2e3ee:	4770      	bx	lr

0002e3f0 <log_0>:
{
   2e3f0:	b538      	push	{r3, r4, r5, lr}
   2e3f2:	4605      	mov	r5, r0
   2e3f4:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   2e3f6:	f7ff ffee 	bl	2e3d6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2e3fa:	b128      	cbz	r0, 2e408 <log_0+0x18>
		msg_finalize(msg, src_level);
   2e3fc:	4621      	mov	r1, r4
		msg->str = str;
   2e3fe:	6105      	str	r5, [r0, #16]
}
   2e400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   2e404:	f7e6 bc98 	b.w	14d38 <msg_finalize>
}
   2e408:	bd38      	pop	{r3, r4, r5, pc}

0002e40a <log_1>:
{
   2e40a:	b570      	push	{r4, r5, r6, lr}
   2e40c:	4606      	mov	r6, r0
   2e40e:	460d      	mov	r5, r1
   2e410:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2e412:	f7ff ffe0 	bl	2e3d6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2e416:	b158      	cbz	r0, 2e430 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   2e418:	2101      	movs	r1, #1
   2e41a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   2e41c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2e41e:	f361 1207 	bfi	r2, r1, #4, #4
   2e422:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   2e424:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   2e426:	6145      	str	r5, [r0, #20]
}
   2e428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   2e42c:	f7e6 bc84 	b.w	14d38 <msg_finalize>
}
   2e430:	bd70      	pop	{r4, r5, r6, pc}

0002e432 <log_2>:
{
   2e432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e436:	4680      	mov	r8, r0
   2e438:	460f      	mov	r7, r1
   2e43a:	4616      	mov	r6, r2
   2e43c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2e43e:	f7ff ffca 	bl	2e3d6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2e442:	b168      	cbz	r0, 2e460 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   2e444:	2202      	movs	r2, #2
   2e446:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2e448:	4629      	mov	r1, r5
   2e44a:	f362 1307 	bfi	r3, r2, #4, #4
   2e44e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2e450:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   2e454:	f8c0 8010 	str.w	r8, [r0, #16]
}
   2e458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2e45c:	f7e6 bc6c 	b.w	14d38 <msg_finalize>
}
   2e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e464 <log_3>:
{
   2e464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e468:	4680      	mov	r8, r0
   2e46a:	460f      	mov	r7, r1
   2e46c:	4616      	mov	r6, r2
   2e46e:	461d      	mov	r5, r3
   2e470:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2e474:	f7ff ffaf 	bl	2e3d6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2e478:	b170      	cbz	r0, 2e498 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2e47a:	2203      	movs	r2, #3
   2e47c:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2e47e:	4649      	mov	r1, r9
   2e480:	f362 1307 	bfi	r3, r2, #4, #4
   2e484:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2e486:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   2e48a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   2e48e:	61c5      	str	r5, [r0, #28]
}
   2e490:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   2e494:	f7e6 bc50 	b.w	14d38 <msg_finalize>
}
   2e498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002e49c <log_n>:
{
   2e49c:	b510      	push	{r4, lr}
   2e49e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2e4a0:	f7e6 fd96 	bl	14fd0 <log_msg_create_n>
		if (msg == NULL) {
   2e4a4:	b120      	cbz	r0, 2e4b0 <log_n+0x14>
		msg_finalize(msg, src_level);
   2e4a6:	4621      	mov	r1, r4
}
   2e4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2e4ac:	f7e6 bc44 	b.w	14d38 <msg_finalize>
}
   2e4b0:	bd10      	pop	{r4, pc}

0002e4b2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2e4b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e4b6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2e4b8:	8903      	ldrh	r3, [r0, #8]
{
   2e4ba:	460e      	mov	r6, r1
   2e4bc:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2e4be:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2e4c2:	42a2      	cmp	r2, r4
{
   2e4c4:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   2e4c8:	d803      	bhi.n	2e4d2 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   2e4ca:	2300      	movs	r3, #0
   2e4cc:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2e4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   2e4d2:	680b      	ldr	r3, [r1, #0]
   2e4d4:	4423      	add	r3, r4
   2e4d6:	4293      	cmp	r3, r2
		*length = available_len - offset;
   2e4d8:	bf84      	itt	hi
   2e4da:	1b13      	subhi	r3, r2, r4
   2e4dc:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2e4de:	2a0c      	cmp	r2, #12
	req_len = *length;
   2e4e0:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2e4e4:	d92a      	bls.n	2e53c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   2e4e6:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2e4e8:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2e4ec:	d82d      	bhi.n	2e54a <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2e4ee:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   2e4f0:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2e4f2:	454a      	cmp	r2, r9
   2e4f4:	bf28      	it	cs
   2e4f6:	464a      	movcs	r2, r9
   2e4f8:	4420      	add	r0, r4
   2e4fa:	4615      	mov	r5, r2
		if (put_op) {
   2e4fc:	b317      	cbz	r7, 2e544 <log_msg_hexdump_data_op+0x92>
   2e4fe:	4631      	mov	r1, r6
   2e500:	f007 f841 	bl	35586 <memcpy>
		req_len -= cpy_len;
   2e504:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2e508:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2e50a:	f1b9 0f00 	cmp.w	r9, #0
   2e50e:	d0de      	beq.n	2e4ce <log_msg_hexdump_data_op+0x1c>
   2e510:	f1b8 0f00 	cmp.w	r8, #0
   2e514:	d0db      	beq.n	2e4ce <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2e516:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2e51a:	454d      	cmp	r5, r9
   2e51c:	bf28      	it	cs
   2e51e:	464d      	movcs	r5, r9
		if (put_op) {
   2e520:	1d20      	adds	r0, r4, #4
   2e522:	462a      	mov	r2, r5
   2e524:	4440      	add	r0, r8
   2e526:	b1bf      	cbz	r7, 2e558 <log_msg_hexdump_data_op+0xa6>
   2e528:	4631      	mov	r1, r6
   2e52a:	f007 f82c 	bl	35586 <memcpy>
		offset = 0;
   2e52e:	2400      	movs	r4, #0
		cont = cont->next;
   2e530:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   2e534:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2e538:	442e      	add	r6, r5
   2e53a:	e7e6      	b.n	2e50a <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   2e53c:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   2e540:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   2e542:	e7d6      	b.n	2e4f2 <log_msg_hexdump_data_op+0x40>
   2e544:	4601      	mov	r1, r0
   2e546:	4630      	mov	r0, r6
   2e548:	e7da      	b.n	2e500 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2e54a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2e54c:	2c1b      	cmp	r4, #27
   2e54e:	d9dc      	bls.n	2e50a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   2e550:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   2e554:	3c1c      	subs	r4, #28
   2e556:	e7f9      	b.n	2e54c <log_msg_hexdump_data_op+0x9a>
   2e558:	4601      	mov	r1, r0
   2e55a:	4630      	mov	r0, r6
   2e55c:	e7e5      	b.n	2e52a <log_msg_hexdump_data_op+0x78>

0002e55e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2e55e:	3004      	adds	r0, #4
   2e560:	e8d0 3fef 	ldaex	r3, [r0]
   2e564:	3301      	adds	r3, #1
   2e566:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2e56a:	2a00      	cmp	r2, #0
   2e56c:	d1f8      	bne.n	2e560 <log_msg_get+0x2>
}
   2e56e:	4770      	bx	lr

0002e570 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   2e570:	7a40      	ldrb	r0, [r0, #9]
}
   2e572:	0900      	lsrs	r0, r0, #4
   2e574:	4770      	bx	lr

0002e576 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2e576:	7a43      	ldrb	r3, [r0, #9]
   2e578:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2e57c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   2e580:	d216      	bcs.n	2e5b0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2e582:	2a03      	cmp	r2, #3
   2e584:	d803      	bhi.n	2e58e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2e586:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2e58a:	6948      	ldr	r0, [r1, #20]
   2e58c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2e58e:	2901      	cmp	r1, #1
   2e590:	d803      	bhi.n	2e59a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   2e592:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2e596:	6988      	ldr	r0, [r1, #24]
   2e598:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2e59a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2e59c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2e59e:	2906      	cmp	r1, #6
   2e5a0:	d803      	bhi.n	2e5aa <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2e5a2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2e5a6:	6848      	ldr	r0, [r1, #4]
   2e5a8:	4770      	bx	lr
		cont = cont->next;
   2e5aa:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2e5ac:	3907      	subs	r1, #7
		cont = cont->next;
   2e5ae:	e7f6      	b.n	2e59e <log_msg_arg_get+0x28>
		return 0;
   2e5b0:	2000      	movs	r0, #0
}
   2e5b2:	4770      	bx	lr

0002e5b4 <log_msg_put>:
{
   2e5b4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2e5b6:	1d02      	adds	r2, r0, #4
   2e5b8:	e8d2 1fef 	ldaex	r1, [r2]
   2e5bc:	3901      	subs	r1, #1
   2e5be:	e8c2 1fec 	stlex	ip, r1, [r2]
   2e5c2:	f1bc 0f00 	cmp.w	ip, #0
   2e5c6:	d1f7      	bne.n	2e5b8 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   2e5c8:	685b      	ldr	r3, [r3, #4]
   2e5ca:	b90b      	cbnz	r3, 2e5d0 <log_msg_put+0x1c>
		msg_free(msg);
   2e5cc:	f7e6 bcc2 	b.w	14f54 <msg_free>
}
   2e5d0:	4770      	bx	lr

0002e5d2 <log_msg_str_get>:
}
   2e5d2:	6900      	ldr	r0, [r0, #16]
   2e5d4:	4770      	bx	lr

0002e5d6 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2e5d6:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2e5d8:	2400      	movs	r4, #0
   2e5da:	9400      	str	r4, [sp, #0]
   2e5dc:	f7ff ff69 	bl	2e4b2 <log_msg_hexdump_data_op>
}
   2e5e0:	b002      	add	sp, #8
   2e5e2:	bd10      	pop	{r4, pc}

0002e5e4 <buffer_write>:
{
   2e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e5e6:	4606      	mov	r6, r0
   2e5e8:	460d      	mov	r5, r1
   2e5ea:	4614      	mov	r4, r2
   2e5ec:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2e5ee:	4621      	mov	r1, r4
   2e5f0:	4628      	mov	r0, r5
   2e5f2:	463a      	mov	r2, r7
   2e5f4:	47b0      	blx	r6
	} while (len != 0);
   2e5f6:	1a24      	subs	r4, r4, r0
		buf += processed;
   2e5f8:	4405      	add	r5, r0
	} while (len != 0);
   2e5fa:	d1f8      	bne.n	2e5ee <buffer_write+0xa>
}
   2e5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e5fe <std_print>:
{
   2e5fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e602:	b08e      	sub	sp, #56	; 0x38
   2e604:	af0e      	add	r7, sp, #56	; 0x38
   2e606:	4680      	mov	r8, r0
   2e608:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   2e60a:	f7ff ffe2 	bl	2e5d2 <log_msg_str_get>
   2e60e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2e610:	4640      	mov	r0, r8
   2e612:	f7ff ffad 	bl	2e570 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   2e616:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   2e61a:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2e61c:	0083      	lsls	r3, r0, #2
   2e61e:	3307      	adds	r3, #7
   2e620:	f023 0307 	bic.w	r3, r3, #7
   2e624:	ebad 0d03 	sub.w	sp, sp, r3
   2e628:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2e62a:	45d1      	cmp	r9, sl
   2e62c:	d116      	bne.n	2e65c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   2e62e:	4640      	mov	r0, r8
   2e630:	f7ff ff9e 	bl	2e570 <log_msg_nargs_get>
   2e634:	280f      	cmp	r0, #15
   2e636:	d81e      	bhi.n	2e676 <std_print+0x78>
   2e638:	e8df f010 	tbh	[pc, r0, lsl #1]
   2e63c:	00200019 	.word	0x00200019
   2e640:	002d0026 	.word	0x002d0026
   2e644:	00410036 	.word	0x00410036
   2e648:	005d004e 	.word	0x005d004e
   2e64c:	0081006e 	.word	0x0081006e
   2e650:	00ad0096 	.word	0x00ad0096
   2e654:	00e100c6 	.word	0x00e100c6
   2e658:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   2e65c:	4649      	mov	r1, r9
   2e65e:	4640      	mov	r0, r8
   2e660:	f7ff ff89 	bl	2e576 <log_msg_arg_get>
   2e664:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   2e668:	f109 0901 	add.w	r9, r9, #1
   2e66c:	e7dd      	b.n	2e62a <std_print+0x2c>
		print_formatted(output, str);
   2e66e:	4631      	mov	r1, r6
   2e670:	4628      	mov	r0, r5
   2e672:	f7e6 fd15 	bl	150a0 <print_formatted>
}
   2e676:	46bd      	mov	sp, r7
   2e678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   2e67c:	4631      	mov	r1, r6
   2e67e:	4628      	mov	r0, r5
   2e680:	6822      	ldr	r2, [r4, #0]
   2e682:	f7e6 fd0d 	bl	150a0 <print_formatted>
		break;
   2e686:	e7f6      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   2e688:	4631      	mov	r1, r6
   2e68a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e68e:	4628      	mov	r0, r5
   2e690:	f7e6 fd06 	bl	150a0 <print_formatted>
		break;
   2e694:	e7ef      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   2e696:	68a3      	ldr	r3, [r4, #8]
   2e698:	4631      	mov	r1, r6
   2e69a:	9300      	str	r3, [sp, #0]
   2e69c:	4628      	mov	r0, r5
   2e69e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e6a2:	f7e6 fcfd 	bl	150a0 <print_formatted>
		break;
   2e6a6:	e7e6      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e6a8:	68e3      	ldr	r3, [r4, #12]
   2e6aa:	4631      	mov	r1, r6
   2e6ac:	9301      	str	r3, [sp, #4]
   2e6ae:	68a3      	ldr	r3, [r4, #8]
   2e6b0:	4628      	mov	r0, r5
   2e6b2:	9300      	str	r3, [sp, #0]
   2e6b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e6b8:	f7e6 fcf2 	bl	150a0 <print_formatted>
		break;
   2e6bc:	e7db      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e6be:	6923      	ldr	r3, [r4, #16]
   2e6c0:	4631      	mov	r1, r6
   2e6c2:	9302      	str	r3, [sp, #8]
   2e6c4:	68e3      	ldr	r3, [r4, #12]
   2e6c6:	4628      	mov	r0, r5
   2e6c8:	9301      	str	r3, [sp, #4]
   2e6ca:	68a3      	ldr	r3, [r4, #8]
   2e6cc:	9300      	str	r3, [sp, #0]
   2e6ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e6d2:	f7e6 fce5 	bl	150a0 <print_formatted>
		break;
   2e6d6:	e7ce      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e6d8:	6963      	ldr	r3, [r4, #20]
   2e6da:	4631      	mov	r1, r6
   2e6dc:	9303      	str	r3, [sp, #12]
   2e6de:	6923      	ldr	r3, [r4, #16]
   2e6e0:	4628      	mov	r0, r5
   2e6e2:	9302      	str	r3, [sp, #8]
   2e6e4:	68e3      	ldr	r3, [r4, #12]
   2e6e6:	9301      	str	r3, [sp, #4]
   2e6e8:	68a3      	ldr	r3, [r4, #8]
   2e6ea:	9300      	str	r3, [sp, #0]
   2e6ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e6f0:	f7e6 fcd6 	bl	150a0 <print_formatted>
		break;
   2e6f4:	e7bf      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e6f6:	69a3      	ldr	r3, [r4, #24]
   2e6f8:	4631      	mov	r1, r6
   2e6fa:	9304      	str	r3, [sp, #16]
   2e6fc:	6963      	ldr	r3, [r4, #20]
   2e6fe:	4628      	mov	r0, r5
   2e700:	9303      	str	r3, [sp, #12]
   2e702:	6923      	ldr	r3, [r4, #16]
   2e704:	9302      	str	r3, [sp, #8]
   2e706:	68e3      	ldr	r3, [r4, #12]
   2e708:	9301      	str	r3, [sp, #4]
   2e70a:	68a3      	ldr	r3, [r4, #8]
   2e70c:	9300      	str	r3, [sp, #0]
   2e70e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e712:	f7e6 fcc5 	bl	150a0 <print_formatted>
		break;
   2e716:	e7ae      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e718:	69e3      	ldr	r3, [r4, #28]
   2e71a:	4631      	mov	r1, r6
   2e71c:	9305      	str	r3, [sp, #20]
   2e71e:	69a3      	ldr	r3, [r4, #24]
   2e720:	4628      	mov	r0, r5
   2e722:	9304      	str	r3, [sp, #16]
   2e724:	6963      	ldr	r3, [r4, #20]
   2e726:	9303      	str	r3, [sp, #12]
   2e728:	6923      	ldr	r3, [r4, #16]
   2e72a:	9302      	str	r3, [sp, #8]
   2e72c:	68e3      	ldr	r3, [r4, #12]
   2e72e:	9301      	str	r3, [sp, #4]
   2e730:	68a3      	ldr	r3, [r4, #8]
   2e732:	9300      	str	r3, [sp, #0]
   2e734:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e738:	f7e6 fcb2 	bl	150a0 <print_formatted>
		break;
   2e73c:	e79b      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e73e:	6a23      	ldr	r3, [r4, #32]
   2e740:	4631      	mov	r1, r6
   2e742:	9306      	str	r3, [sp, #24]
   2e744:	69e3      	ldr	r3, [r4, #28]
   2e746:	4628      	mov	r0, r5
   2e748:	9305      	str	r3, [sp, #20]
   2e74a:	69a3      	ldr	r3, [r4, #24]
   2e74c:	9304      	str	r3, [sp, #16]
   2e74e:	6963      	ldr	r3, [r4, #20]
   2e750:	9303      	str	r3, [sp, #12]
   2e752:	6923      	ldr	r3, [r4, #16]
   2e754:	9302      	str	r3, [sp, #8]
   2e756:	68e3      	ldr	r3, [r4, #12]
   2e758:	9301      	str	r3, [sp, #4]
   2e75a:	68a3      	ldr	r3, [r4, #8]
   2e75c:	9300      	str	r3, [sp, #0]
   2e75e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e762:	f7e6 fc9d 	bl	150a0 <print_formatted>
		break;
   2e766:	e786      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e768:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e76a:	4631      	mov	r1, r6
   2e76c:	9307      	str	r3, [sp, #28]
   2e76e:	6a23      	ldr	r3, [r4, #32]
   2e770:	4628      	mov	r0, r5
   2e772:	9306      	str	r3, [sp, #24]
   2e774:	69e3      	ldr	r3, [r4, #28]
   2e776:	9305      	str	r3, [sp, #20]
   2e778:	69a3      	ldr	r3, [r4, #24]
   2e77a:	9304      	str	r3, [sp, #16]
   2e77c:	6963      	ldr	r3, [r4, #20]
   2e77e:	9303      	str	r3, [sp, #12]
   2e780:	6923      	ldr	r3, [r4, #16]
   2e782:	9302      	str	r3, [sp, #8]
   2e784:	68e3      	ldr	r3, [r4, #12]
   2e786:	9301      	str	r3, [sp, #4]
   2e788:	68a3      	ldr	r3, [r4, #8]
   2e78a:	9300      	str	r3, [sp, #0]
   2e78c:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e790:	f7e6 fc86 	bl	150a0 <print_formatted>
		break;
   2e794:	e76f      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2e798:	4631      	mov	r1, r6
   2e79a:	9308      	str	r3, [sp, #32]
   2e79c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e79e:	4628      	mov	r0, r5
   2e7a0:	9307      	str	r3, [sp, #28]
   2e7a2:	6a23      	ldr	r3, [r4, #32]
   2e7a4:	9306      	str	r3, [sp, #24]
   2e7a6:	69e3      	ldr	r3, [r4, #28]
   2e7a8:	9305      	str	r3, [sp, #20]
   2e7aa:	69a3      	ldr	r3, [r4, #24]
   2e7ac:	9304      	str	r3, [sp, #16]
   2e7ae:	6963      	ldr	r3, [r4, #20]
   2e7b0:	9303      	str	r3, [sp, #12]
   2e7b2:	6923      	ldr	r3, [r4, #16]
   2e7b4:	9302      	str	r3, [sp, #8]
   2e7b6:	68e3      	ldr	r3, [r4, #12]
   2e7b8:	9301      	str	r3, [sp, #4]
   2e7ba:	68a3      	ldr	r3, [r4, #8]
   2e7bc:	9300      	str	r3, [sp, #0]
   2e7be:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e7c2:	f7e6 fc6d 	bl	150a0 <print_formatted>
		break;
   2e7c6:	e756      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e7c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2e7ca:	4631      	mov	r1, r6
   2e7cc:	9309      	str	r3, [sp, #36]	; 0x24
   2e7ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2e7d0:	4628      	mov	r0, r5
   2e7d2:	9308      	str	r3, [sp, #32]
   2e7d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e7d6:	9307      	str	r3, [sp, #28]
   2e7d8:	6a23      	ldr	r3, [r4, #32]
   2e7da:	9306      	str	r3, [sp, #24]
   2e7dc:	69e3      	ldr	r3, [r4, #28]
   2e7de:	9305      	str	r3, [sp, #20]
   2e7e0:	69a3      	ldr	r3, [r4, #24]
   2e7e2:	9304      	str	r3, [sp, #16]
   2e7e4:	6963      	ldr	r3, [r4, #20]
   2e7e6:	9303      	str	r3, [sp, #12]
   2e7e8:	6923      	ldr	r3, [r4, #16]
   2e7ea:	9302      	str	r3, [sp, #8]
   2e7ec:	68e3      	ldr	r3, [r4, #12]
   2e7ee:	9301      	str	r3, [sp, #4]
   2e7f0:	68a3      	ldr	r3, [r4, #8]
   2e7f2:	9300      	str	r3, [sp, #0]
   2e7f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e7f8:	f7e6 fc52 	bl	150a0 <print_formatted>
		break;
   2e7fc:	e73b      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e7fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e800:	4631      	mov	r1, r6
   2e802:	930a      	str	r3, [sp, #40]	; 0x28
   2e804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2e806:	4628      	mov	r0, r5
   2e808:	9309      	str	r3, [sp, #36]	; 0x24
   2e80a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2e80c:	9308      	str	r3, [sp, #32]
   2e80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e810:	9307      	str	r3, [sp, #28]
   2e812:	6a23      	ldr	r3, [r4, #32]
   2e814:	9306      	str	r3, [sp, #24]
   2e816:	69e3      	ldr	r3, [r4, #28]
   2e818:	9305      	str	r3, [sp, #20]
   2e81a:	69a3      	ldr	r3, [r4, #24]
   2e81c:	9304      	str	r3, [sp, #16]
   2e81e:	6963      	ldr	r3, [r4, #20]
   2e820:	9303      	str	r3, [sp, #12]
   2e822:	6923      	ldr	r3, [r4, #16]
   2e824:	9302      	str	r3, [sp, #8]
   2e826:	68e3      	ldr	r3, [r4, #12]
   2e828:	9301      	str	r3, [sp, #4]
   2e82a:	68a3      	ldr	r3, [r4, #8]
   2e82c:	9300      	str	r3, [sp, #0]
   2e82e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e832:	f7e6 fc35 	bl	150a0 <print_formatted>
		break;
   2e836:	e71e      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e838:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e83a:	4631      	mov	r1, r6
   2e83c:	930b      	str	r3, [sp, #44]	; 0x2c
   2e83e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e840:	4628      	mov	r0, r5
   2e842:	930a      	str	r3, [sp, #40]	; 0x28
   2e844:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2e846:	9309      	str	r3, [sp, #36]	; 0x24
   2e848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2e84a:	9308      	str	r3, [sp, #32]
   2e84c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e84e:	9307      	str	r3, [sp, #28]
   2e850:	6a23      	ldr	r3, [r4, #32]
   2e852:	9306      	str	r3, [sp, #24]
   2e854:	69e3      	ldr	r3, [r4, #28]
   2e856:	9305      	str	r3, [sp, #20]
   2e858:	69a3      	ldr	r3, [r4, #24]
   2e85a:	9304      	str	r3, [sp, #16]
   2e85c:	6963      	ldr	r3, [r4, #20]
   2e85e:	9303      	str	r3, [sp, #12]
   2e860:	6923      	ldr	r3, [r4, #16]
   2e862:	9302      	str	r3, [sp, #8]
   2e864:	68e3      	ldr	r3, [r4, #12]
   2e866:	9301      	str	r3, [sp, #4]
   2e868:	68a3      	ldr	r3, [r4, #8]
   2e86a:	9300      	str	r3, [sp, #0]
   2e86c:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e870:	f7e6 fc16 	bl	150a0 <print_formatted>
		break;
   2e874:	e6ff      	b.n	2e676 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2e876:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2e878:	4631      	mov	r1, r6
   2e87a:	930c      	str	r3, [sp, #48]	; 0x30
   2e87c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e87e:	4628      	mov	r0, r5
   2e880:	930b      	str	r3, [sp, #44]	; 0x2c
   2e882:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e884:	930a      	str	r3, [sp, #40]	; 0x28
   2e886:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2e888:	9309      	str	r3, [sp, #36]	; 0x24
   2e88a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2e88c:	9308      	str	r3, [sp, #32]
   2e88e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e890:	9307      	str	r3, [sp, #28]
   2e892:	6a23      	ldr	r3, [r4, #32]
   2e894:	9306      	str	r3, [sp, #24]
   2e896:	69e3      	ldr	r3, [r4, #28]
   2e898:	9305      	str	r3, [sp, #20]
   2e89a:	69a3      	ldr	r3, [r4, #24]
   2e89c:	9304      	str	r3, [sp, #16]
   2e89e:	6963      	ldr	r3, [r4, #20]
   2e8a0:	9303      	str	r3, [sp, #12]
   2e8a2:	6923      	ldr	r3, [r4, #16]
   2e8a4:	9302      	str	r3, [sp, #8]
   2e8a6:	68e3      	ldr	r3, [r4, #12]
   2e8a8:	9301      	str	r3, [sp, #4]
   2e8aa:	68a3      	ldr	r3, [r4, #8]
   2e8ac:	9300      	str	r3, [sp, #0]
   2e8ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   2e8b2:	f7e6 fbf5 	bl	150a0 <print_formatted>
}
   2e8b6:	e6de      	b.n	2e676 <std_print+0x78>

0002e8b8 <log_output_flush>:
		     output->control_block->offset,
   2e8b8:	6842      	ldr	r2, [r0, #4]
{
   2e8ba:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   2e8bc:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   2e8c0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2e8c2:	6881      	ldr	r1, [r0, #8]
   2e8c4:	6800      	ldr	r0, [r0, #0]
   2e8c6:	f7ff fe8d 	bl	2e5e4 <buffer_write>
	output->control_block->offset = 0;
   2e8ca:	2200      	movs	r2, #0
   2e8cc:	6863      	ldr	r3, [r4, #4]
   2e8ce:	601a      	str	r2, [r3, #0]
}
   2e8d0:	bd10      	pop	{r4, pc}

0002e8d2 <sntp_init>:
{
   2e8d2:	b570      	push	{r4, r5, r6, lr}
   2e8d4:	460d      	mov	r5, r1
   2e8d6:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2e8d8:	4604      	mov	r4, r0
   2e8da:	b330      	cbz	r0, 2e92a <sntp_init+0x58>
   2e8dc:	b329      	cbz	r1, 2e92a <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2e8de:	2214      	movs	r2, #20
   2e8e0:	2100      	movs	r1, #0
   2e8e2:	f006 fe70 	bl	355c6 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2e8e6:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2e8e8:	2211      	movs	r2, #17
   2e8ea:	2102      	movs	r1, #2
   2e8ec:	f7e6 fe5a 	bl	155a4 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2e8f0:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2e8f2:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2e8f4:	da04      	bge.n	2e900 <sntp_init+0x2e>
		return -errno;
   2e8f6:	f001 fddd 	bl	304b4 <__errno>
   2e8fa:	6800      	ldr	r0, [r0, #0]
   2e8fc:	4240      	negs	r0, r0
}
   2e8fe:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2e900:	4632      	mov	r2, r6
   2e902:	4629      	mov	r1, r5
   2e904:	f000 f854 	bl	2e9b0 <z_impl_zsock_connect>
	if (ret < 0) {
   2e908:	2800      	cmp	r0, #0
   2e90a:	68e0      	ldr	r0, [r4, #12]
   2e90c:	da02      	bge.n	2e914 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2e90e:	f000 f82b 	bl	2e968 <z_impl_zsock_close>
   2e912:	e7f0      	b.n	2e8f6 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2e914:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2e916:	68a3      	ldr	r3, [r4, #8]
   2e918:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2e91c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2e920:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2e922:	8091      	strh	r1, [r2, #4]
	return 0;
   2e924:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2e926:	60a3      	str	r3, [r4, #8]
	return 0;
   2e928:	e7e9      	b.n	2e8fe <sntp_init+0x2c>
		return -EFAULT;
   2e92a:	f06f 000d 	mvn.w	r0, #13
   2e92e:	e7e6      	b.n	2e8fe <sntp_init+0x2c>

0002e930 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2e930:	b110      	cbz	r0, 2e938 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2e932:	68c0      	ldr	r0, [r0, #12]
   2e934:	f000 b818 	b.w	2e968 <z_impl_zsock_close>
	}
}
   2e938:	4770      	bx	lr

0002e93a <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2e93a:	f7e6 bfc9 	b.w	158d0 <socket_offload_getaddrinfo>

0002e93e <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2e93e:	f7e6 bffb 	b.w	15938 <socket_offload_freeaddrinfo>

0002e942 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   2e942:	f7fa bddf 	b.w	29504 <z_impl_k_mutex_unlock>

0002e946 <z_fdtable_call_ioctl>:
{
   2e946:	b40c      	push	{r2, r3}
   2e948:	4603      	mov	r3, r0
   2e94a:	b507      	push	{r0, r1, r2, lr}
   2e94c:	aa04      	add	r2, sp, #16
   2e94e:	4608      	mov	r0, r1
   2e950:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   2e954:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2e956:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2e958:	4798      	blx	r3
}
   2e95a:	b003      	add	sp, #12
   2e95c:	f85d eb04 	ldr.w	lr, [sp], #4
   2e960:	b002      	add	sp, #8
   2e962:	4770      	bx	lr

0002e964 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2e964:	f7fa bcd4 	b.w	29310 <z_impl_k_mutex_lock>

0002e968 <z_impl_zsock_close>:
{
   2e968:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2e96a:	4669      	mov	r1, sp
   2e96c:	aa01      	add	r2, sp, #4
{
   2e96e:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2e970:	f7e4 fbd4 	bl	1311c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2e974:	4604      	mov	r4, r0
   2e976:	b940      	cbnz	r0, 2e98a <z_impl_zsock_close+0x22>
		errno = EBADF;
   2e978:	f001 fd9c 	bl	304b4 <__errno>
   2e97c:	2309      	movs	r3, #9
		return -1;
   2e97e:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2e982:	6003      	str	r3, [r0, #0]
}
   2e984:	4620      	mov	r0, r4
   2e986:	b003      	add	sp, #12
   2e988:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   2e98a:	f04f 32ff 	mov.w	r2, #4294967295
   2e98e:	f04f 33ff 	mov.w	r3, #4294967295
   2e992:	9801      	ldr	r0, [sp, #4]
   2e994:	f7ff ffe6 	bl	2e964 <k_mutex_lock.constprop.0>
	z_free_fd(sock);
   2e998:	4628      	mov	r0, r5
   2e99a:	f7e4 fc27 	bl	131ec <z_free_fd>
	ret = vtable->fd_vtable.close(ctx);
   2e99e:	9b00      	ldr	r3, [sp, #0]
   2e9a0:	4620      	mov	r0, r4
   2e9a2:	689b      	ldr	r3, [r3, #8]
   2e9a4:	4798      	blx	r3
   2e9a6:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   2e9a8:	9801      	ldr	r0, [sp, #4]
   2e9aa:	f7ff ffca 	bl	2e942 <k_mutex_unlock>
	return ret;
   2e9ae:	e7e9      	b.n	2e984 <z_impl_zsock_close+0x1c>

0002e9b0 <z_impl_zsock_connect>:
{
   2e9b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e9b2:	460d      	mov	r5, r1
   2e9b4:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2e9b6:	4669      	mov	r1, sp
   2e9b8:	aa01      	add	r2, sp, #4
   2e9ba:	f7e4 fbaf 	bl	1311c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2e9be:	4604      	mov	r4, r0
   2e9c0:	b110      	cbz	r0, 2e9c8 <z_impl_zsock_connect+0x18>
   2e9c2:	9b00      	ldr	r3, [sp, #0]
   2e9c4:	695b      	ldr	r3, [r3, #20]
   2e9c6:	b943      	cbnz	r3, 2e9da <z_impl_zsock_connect+0x2a>
   2e9c8:	f001 fd74 	bl	304b4 <__errno>
   2e9cc:	2309      	movs	r3, #9
   2e9ce:	f04f 34ff 	mov.w	r4, #4294967295
   2e9d2:	6003      	str	r3, [r0, #0]
}
   2e9d4:	4620      	mov	r0, r4
   2e9d6:	b002      	add	sp, #8
   2e9d8:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2e9da:	f04f 32ff 	mov.w	r2, #4294967295
   2e9de:	f04f 33ff 	mov.w	r3, #4294967295
   2e9e2:	9801      	ldr	r0, [sp, #4]
   2e9e4:	f7ff ffbe 	bl	2e964 <k_mutex_lock.constprop.0>
   2e9e8:	9b00      	ldr	r3, [sp, #0]
   2e9ea:	4632      	mov	r2, r6
   2e9ec:	4629      	mov	r1, r5
   2e9ee:	4620      	mov	r0, r4
   2e9f0:	695b      	ldr	r3, [r3, #20]
   2e9f2:	4798      	blx	r3
   2e9f4:	4604      	mov	r4, r0
   2e9f6:	9801      	ldr	r0, [sp, #4]
   2e9f8:	f7ff ffa3 	bl	2e942 <k_mutex_unlock>
   2e9fc:	e7ea      	b.n	2e9d4 <z_impl_zsock_connect+0x24>

0002e9fe <z_impl_zsock_sendto>:
{
   2e9fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2ea02:	460d      	mov	r5, r1
   2ea04:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2ea06:	a902      	add	r1, sp, #8
   2ea08:	aa03      	add	r2, sp, #12
{
   2ea0a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2ea0c:	f7e4 fb86 	bl	1311c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ea10:	4604      	mov	r4, r0
   2ea12:	b110      	cbz	r0, 2ea1a <z_impl_zsock_sendto+0x1c>
   2ea14:	9b02      	ldr	r3, [sp, #8]
   2ea16:	6a1b      	ldr	r3, [r3, #32]
   2ea18:	b94b      	cbnz	r3, 2ea2e <z_impl_zsock_sendto+0x30>
   2ea1a:	f001 fd4b 	bl	304b4 <__errno>
   2ea1e:	2309      	movs	r3, #9
   2ea20:	f04f 34ff 	mov.w	r4, #4294967295
   2ea24:	6003      	str	r3, [r0, #0]
}
   2ea26:	4620      	mov	r0, r4
   2ea28:	b004      	add	sp, #16
   2ea2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ea2e:	f04f 32ff 	mov.w	r2, #4294967295
   2ea32:	f04f 33ff 	mov.w	r3, #4294967295
   2ea36:	9803      	ldr	r0, [sp, #12]
   2ea38:	f7ff ff94 	bl	2e964 <k_mutex_lock.constprop.0>
   2ea3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ea3e:	4632      	mov	r2, r6
   2ea40:	9301      	str	r3, [sp, #4]
   2ea42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ea44:	4629      	mov	r1, r5
   2ea46:	9300      	str	r3, [sp, #0]
   2ea48:	9b02      	ldr	r3, [sp, #8]
   2ea4a:	4620      	mov	r0, r4
   2ea4c:	f8d3 8020 	ldr.w	r8, [r3, #32]
   2ea50:	463b      	mov	r3, r7
   2ea52:	47c0      	blx	r8
   2ea54:	4604      	mov	r4, r0
   2ea56:	9803      	ldr	r0, [sp, #12]
   2ea58:	f7ff ff73 	bl	2e942 <k_mutex_unlock>
   2ea5c:	e7e3      	b.n	2ea26 <z_impl_zsock_sendto+0x28>

0002ea5e <z_impl_zsock_sendmsg>:
{
   2ea5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ea60:	460d      	mov	r5, r1
   2ea62:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2ea64:	4669      	mov	r1, sp
   2ea66:	aa01      	add	r2, sp, #4
   2ea68:	f7e4 fb58 	bl	1311c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2ea6c:	4604      	mov	r4, r0
   2ea6e:	b110      	cbz	r0, 2ea76 <z_impl_zsock_sendmsg+0x18>
   2ea70:	9b00      	ldr	r3, [sp, #0]
   2ea72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2ea74:	b943      	cbnz	r3, 2ea88 <z_impl_zsock_sendmsg+0x2a>
   2ea76:	f001 fd1d 	bl	304b4 <__errno>
   2ea7a:	2309      	movs	r3, #9
   2ea7c:	f04f 34ff 	mov.w	r4, #4294967295
   2ea80:	6003      	str	r3, [r0, #0]
}
   2ea82:	4620      	mov	r0, r4
   2ea84:	b002      	add	sp, #8
   2ea86:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2ea88:	f04f 32ff 	mov.w	r2, #4294967295
   2ea8c:	f04f 33ff 	mov.w	r3, #4294967295
   2ea90:	9801      	ldr	r0, [sp, #4]
   2ea92:	f7ff ff67 	bl	2e964 <k_mutex_lock.constprop.0>
   2ea96:	9b00      	ldr	r3, [sp, #0]
   2ea98:	4632      	mov	r2, r6
   2ea9a:	4629      	mov	r1, r5
   2ea9c:	4620      	mov	r0, r4
   2ea9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2eaa0:	4798      	blx	r3
   2eaa2:	4604      	mov	r4, r0
   2eaa4:	9801      	ldr	r0, [sp, #4]
   2eaa6:	f7ff ff4c 	bl	2e942 <k_mutex_unlock>
   2eaaa:	e7ea      	b.n	2ea82 <z_impl_zsock_sendmsg+0x24>

0002eaac <z_impl_zsock_recvfrom>:
{
   2eaac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2eab0:	460d      	mov	r5, r1
   2eab2:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2eab4:	a902      	add	r1, sp, #8
   2eab6:	aa03      	add	r2, sp, #12
{
   2eab8:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2eaba:	f7e4 fb2f 	bl	1311c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2eabe:	4604      	mov	r4, r0
   2eac0:	b110      	cbz	r0, 2eac8 <z_impl_zsock_recvfrom+0x1c>
   2eac2:	9b02      	ldr	r3, [sp, #8]
   2eac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2eac6:	b94b      	cbnz	r3, 2eadc <z_impl_zsock_recvfrom+0x30>
   2eac8:	f001 fcf4 	bl	304b4 <__errno>
   2eacc:	2309      	movs	r3, #9
   2eace:	f04f 34ff 	mov.w	r4, #4294967295
   2ead2:	6003      	str	r3, [r0, #0]
}
   2ead4:	4620      	mov	r0, r4
   2ead6:	b004      	add	sp, #16
   2ead8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2eadc:	f04f 32ff 	mov.w	r2, #4294967295
   2eae0:	f04f 33ff 	mov.w	r3, #4294967295
   2eae4:	9803      	ldr	r0, [sp, #12]
   2eae6:	f7ff ff3d 	bl	2e964 <k_mutex_lock.constprop.0>
   2eaea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2eaec:	4632      	mov	r2, r6
   2eaee:	9301      	str	r3, [sp, #4]
   2eaf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2eaf2:	4629      	mov	r1, r5
   2eaf4:	9300      	str	r3, [sp, #0]
   2eaf6:	9b02      	ldr	r3, [sp, #8]
   2eaf8:	4620      	mov	r0, r4
   2eafa:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   2eafe:	463b      	mov	r3, r7
   2eb00:	47c0      	blx	r8
   2eb02:	4604      	mov	r4, r0
   2eb04:	9803      	ldr	r0, [sp, #12]
   2eb06:	f7ff ff1c 	bl	2e942 <k_mutex_unlock>
   2eb0a:	e7e3      	b.n	2ead4 <z_impl_zsock_recvfrom+0x28>

0002eb0c <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   2eb0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2eb10:	460d      	mov	r5, r1
   2eb12:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2eb14:	a902      	add	r1, sp, #8
   2eb16:	aa03      	add	r2, sp, #12
{
   2eb18:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2eb1a:	f7e4 faff 	bl	1311c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   2eb1e:	4604      	mov	r4, r0
   2eb20:	b110      	cbz	r0, 2eb28 <z_impl_zsock_setsockopt+0x1c>
   2eb22:	9b02      	ldr	r3, [sp, #8]
   2eb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2eb26:	b94b      	cbnz	r3, 2eb3c <z_impl_zsock_setsockopt+0x30>
   2eb28:	f001 fcc4 	bl	304b4 <__errno>
   2eb2c:	2309      	movs	r3, #9
   2eb2e:	f04f 34ff 	mov.w	r4, #4294967295
   2eb32:	6003      	str	r3, [r0, #0]
}
   2eb34:	4620      	mov	r0, r4
   2eb36:	b004      	add	sp, #16
   2eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   2eb3c:	f04f 32ff 	mov.w	r2, #4294967295
   2eb40:	f04f 33ff 	mov.w	r3, #4294967295
   2eb44:	9803      	ldr	r0, [sp, #12]
   2eb46:	f7ff ff0d 	bl	2e964 <k_mutex_lock.constprop.0>
   2eb4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2eb4c:	4632      	mov	r2, r6
   2eb4e:	9300      	str	r3, [sp, #0]
   2eb50:	9b02      	ldr	r3, [sp, #8]
   2eb52:	4629      	mov	r1, r5
   2eb54:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
   2eb58:	4620      	mov	r0, r4
   2eb5a:	463b      	mov	r3, r7
   2eb5c:	47c0      	blx	r8
   2eb5e:	4604      	mov	r4, r0
   2eb60:	9803      	ldr	r0, [sp, #12]
   2eb62:	f7ff feee 	bl	2e942 <k_mutex_unlock>
   2eb66:	e7e5      	b.n	2eb34 <z_impl_zsock_setsockopt+0x28>

0002eb68 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2eb68:	2200      	movs	r2, #0
   2eb6a:	e9c0 2200 	strd	r2, r2, [r0]
   2eb6e:	6082      	str	r2, [r0, #8]
}
   2eb70:	4770      	bx	lr

0002eb72 <set_starting_state>:
{
   2eb72:	b510      	push	{r4, lr}
	__asm__ volatile(
   2eb74:	f04f 0320 	mov.w	r3, #32
   2eb78:	f3ef 8211 	mrs	r2, BASEPRI
   2eb7c:	f383 8811 	msr	BASEPRI, r3
   2eb80:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2eb84:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2eb86:	f003 0407 	and.w	r4, r3, #7
   2eb8a:	2c01      	cmp	r4, #1
   2eb8c:	d106      	bne.n	2eb9c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2eb8e:	6001      	str	r1, [r0, #0]
	int err = 0;
   2eb90:	2000      	movs	r0, #0
	__asm__ volatile(
   2eb92:	f382 8811 	msr	BASEPRI, r2
   2eb96:	f3bf 8f6f 	isb	sy
}
   2eb9a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2eb9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2eba0:	428b      	cmp	r3, r1
		err = -EALREADY;
   2eba2:	bf14      	ite	ne
   2eba4:	f04f 30ff 	movne.w	r0, #4294967295
   2eba8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2ebac:	e7f1      	b.n	2eb92 <set_starting_state+0x20>

0002ebae <set_on_state>:
	__asm__ volatile(
   2ebae:	f04f 0320 	mov.w	r3, #32
   2ebb2:	f3ef 8211 	mrs	r2, BASEPRI
   2ebb6:	f383 8811 	msr	BASEPRI, r3
   2ebba:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2ebbe:	6803      	ldr	r3, [r0, #0]
   2ebc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2ebc4:	f043 0302 	orr.w	r3, r3, #2
   2ebc8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2ebca:	f382 8811 	msr	BASEPRI, r2
   2ebce:	f3bf 8f6f 	isb	sy
}
   2ebd2:	4770      	bx	lr

0002ebd4 <onoff_started_callback>:
	return &data->mgr[type];
   2ebd4:	6900      	ldr	r0, [r0, #16]
   2ebd6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2ebd8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2ebdc:	2100      	movs	r1, #0
   2ebde:	4710      	bx	r2

0002ebe0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2ebe0:	2000      	movs	r0, #0
   2ebe2:	f7f4 bc33 	b.w	2344c <nrfx_clock_start>

0002ebe6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2ebe6:	2000      	movs	r0, #0
   2ebe8:	f7f4 bc86 	b.w	234f8 <nrfx_clock_stop>

0002ebec <api_stop>:
	return stop(dev, subsys, CTX_API);
   2ebec:	2280      	movs	r2, #128	; 0x80
   2ebee:	f7e6 bfff 	b.w	15bf0 <stop>

0002ebf2 <blocking_start_callback>:
{
   2ebf2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2ebf4:	f7fa beb4 	b.w	29960 <z_impl_k_sem_give>

0002ebf8 <api_start>:
{
   2ebf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   2ebfc:	240c      	movs	r4, #12
   2ebfe:	b2c9      	uxtb	r1, r1
   2ec00:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2ec02:	6905      	ldr	r5, [r0, #16]
{
   2ec04:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2ec06:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2ec0a:	2180      	movs	r1, #128	; 0x80
   2ec0c:	4428      	add	r0, r5
{
   2ec0e:	4690      	mov	r8, r2
   2ec10:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2ec12:	f7ff ffae 	bl	2eb72 <set_starting_state>
	if (err < 0) {
   2ec16:	2800      	cmp	r0, #0
   2ec18:	db06      	blt.n	2ec28 <api_start+0x30>
	subdata->cb = cb;
   2ec1a:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2ec1c:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2ec20:	6873      	ldr	r3, [r6, #4]
   2ec22:	591b      	ldr	r3, [r3, r4]
   2ec24:	4798      	blx	r3
	return 0;
   2ec26:	2000      	movs	r0, #0
}
   2ec28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ec2c <uart_fifo_read>:
	if (api->fifo_read != NULL) {
   2ec2c:	6883      	ldr	r3, [r0, #8]
   2ec2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2ec30:	b103      	cbz	r3, 2ec34 <uart_fifo_read+0x8>
		return api->fifo_read(dev, rx_data, size);
   2ec32:	4718      	bx	r3
}
   2ec34:	4618      	mov	r0, r3
   2ec36:	4770      	bx	lr

0002ec38 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   2ec38:	6883      	ldr	r3, [r0, #8]
   2ec3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2ec3c:	b103      	cbz	r3, 2ec40 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   2ec3e:	4718      	bx	r3
}
   2ec40:	4770      	bx	lr

0002ec42 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable != NULL) {
   2ec42:	6883      	ldr	r3, [r0, #8]
   2ec44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2ec46:	b103      	cbz	r3, 2ec4a <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2ec48:	4718      	bx	r3
}
   2ec4a:	4770      	bx	lr

0002ec4c <z_impl_uart_irq_rx_disable>:
	if (api->irq_rx_disable != NULL) {
   2ec4c:	6883      	ldr	r3, [r0, #8]
   2ec4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2ec50:	b103      	cbz	r3, 2ec54 <z_impl_uart_irq_rx_disable+0x8>
		api->irq_rx_disable(dev);
   2ec52:	4718      	bx	r3
}
   2ec54:	4770      	bx	lr

0002ec56 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2ec56:	4770      	bx	lr

0002ec58 <sys_clock_disable>:
   2ec58:	4770      	bx	lr

0002ec5a <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   2ec5a:	b510      	push	{r4, lr}
   2ec5c:	b40f      	push	{r0, r1, r2, r3}
   2ec5e:	f7e7 fd99 	bl	16794 <before_nse>
   2ec62:	bc0f      	pop	{r0, r1, r2, r3}
   2ec64:	f7e1 f9c0 	bl	ffe8 <spm_request_random_number_nse>
   2ec68:	b40f      	push	{r0, r1, r2, r3}
   2ec6a:	f7e7 fd9d 	bl	167a8 <after_nse>
   2ec6e:	bc0f      	pop	{r0, r1, r2, r3}
   2ec70:	bd10      	pop	{r4, pc}

0002ec72 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2ec72:	b538      	push	{r3, r4, r5, lr}
   2ec74:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2ec76:	42ab      	cmp	r3, r5
{
   2ec78:	4611      	mov	r1, r2
   2ec7a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2ec7c:	d804      	bhi.n	2ec88 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ec7e:	461a      	mov	r2, r3
   2ec80:	f006 fc81 	bl	35586 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2ec84:	4620      	mov	r0, r4
   2ec86:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2ec88:	2400      	movs	r4, #0
   2ec8a:	e7fb      	b.n	2ec84 <_copy+0x12>

0002ec8c <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2ec8c:	f006 bc9b 	b.w	355c6 <memset>

0002ec90 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2ec90:	09c3      	lsrs	r3, r0, #7
   2ec92:	005a      	lsls	r2, r3, #1
   2ec94:	4413      	add	r3, r2
   2ec96:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2ec9a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2ec9e:	b2c0      	uxtb	r0, r0
   2eca0:	4770      	bx	lr

0002eca2 <bits2int>:
static uECC_RNG_Function g_rng_function = 0;
#endif

static void bits2int(uECC_word_t *native, const uint8_t *bits,
		     unsigned bits_size, uECC_Curve curve)
{
   2eca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2eca6:	4698      	mov	r8, r3
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   2eca8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2ecac:	4689      	mov	r9, r1
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2ecae:	f113 011f 	adds.w	r1, r3, #31
   2ecb2:	bf48      	it	mi
   2ecb4:	f103 013e 	addmi.w	r1, r3, #62	; 0x3e
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   2ecb8:	1ddd      	adds	r5, r3, #7
   2ecba:	bf48      	it	mi
   2ecbc:	f103 050e 	addmi.w	r5, r3, #14
   2ecc0:	10ec      	asrs	r4, r5, #3
   2ecc2:	4294      	cmp	r4, r2
   2ecc4:	bf28      	it	cs
   2ecc6:	4614      	movcs	r4, r2
{
   2ecc8:	4607      	mov	r7, r0
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2ecca:	114e      	asrs	r6, r1, #5

	if (bits_size > num_n_bytes) {
		bits_size = num_n_bytes;
	}

	uECC_vli_clear(native, num_n_words);
   2eccc:	b275      	sxtb	r5, r6
   2ecce:	4629      	mov	r1, r5
   2ecd0:	f000 f9c8 	bl	2f064 <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
   2ecd4:	4622      	mov	r2, r4
   2ecd6:	4649      	mov	r1, r9
   2ecd8:	4638      	mov	r0, r7
   2ecda:	f000 fec2 	bl	2fa62 <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
   2ecde:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
   2ece2:	00e2      	lsls	r2, r4, #3
   2ece4:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
   2ece8:	d221      	bcs.n	2ed2e <bits2int+0x8c>
		return;
	}
	shift = bits_size * 8 - curve->num_n_bits;
	carry = 0;
   2ecea:	2000      	movs	r0, #0
	shift = bits_size * 8 - curve->num_n_bits;
   2ecec:	1ad2      	subs	r2, r2, r3
	ptr = native + num_n_words;
   2ecee:	eb07 0186 	add.w	r1, r7, r6, lsl #2
	while (ptr-- > native) {
		uECC_word_t temp = *ptr;
		*ptr = (temp >> shift) | carry;
		carry = temp << (uECC_WORD_BITS - shift);
   2ecf2:	f1c2 0620 	rsb	r6, r2, #32
	while (ptr-- > native) {
   2ecf6:	428f      	cmp	r7, r1
   2ecf8:	d310      	bcc.n	2ed1c <bits2int+0x7a>
	}

	/* Reduce mod curve_n */
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
   2ecfa:	f108 0824 	add.w	r8, r8, #36	; 0x24
   2ecfe:	462a      	mov	r2, r5
   2ed00:	4639      	mov	r1, r7
   2ed02:	4640      	mov	r0, r8
   2ed04:	f000 f9ff 	bl	2f106 <uECC_vli_cmp_unsafe>
   2ed08:	2801      	cmp	r0, #1
   2ed0a:	d010      	beq.n	2ed2e <bits2int+0x8c>
		uECC_vli_sub(native, native, curve->n, num_n_words);
   2ed0c:	462b      	mov	r3, r5
   2ed0e:	4642      	mov	r2, r8
   2ed10:	4639      	mov	r1, r7
   2ed12:	4638      	mov	r0, r7
	}
}
   2ed14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uECC_vli_sub(native, native, curve->n, num_n_words);
   2ed18:	f000 ba0c 	b.w	2f134 <uECC_vli_sub>
		uECC_word_t temp = *ptr;
   2ed1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
		*ptr = (temp >> shift) | carry;
   2ed20:	fa24 f302 	lsr.w	r3, r4, r2
   2ed24:	4303      	orrs	r3, r0
   2ed26:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - shift);
   2ed28:	fa04 f006 	lsl.w	r0, r4, r6
   2ed2c:	e7e3      	b.n	2ecf6 <bits2int+0x54>
}
   2ed2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002ed32 <uECC_sign_with_k>:

int uECC_sign_with_k(const uint8_t *private_key, const uint8_t *message_hash,
		     unsigned hash_size, uECC_word_t *k, uint8_t *signature,
		     uECC_Curve curve)
{
   2ed32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed36:	461d      	mov	r5, r3
   2ed38:	b0a9      	sub	sp, #164	; 0xa4
   2ed3a:	9e33      	ldr	r6, [sp, #204]	; 0xcc
   2ed3c:	e9cd 0103 	strd	r0, r1, [sp, #12]
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t s[NUM_ECC_WORDS];
	uECC_word_t *k2[2] = {tmp, s};
	uECC_word_t p[NUM_ECC_WORDS * 2];
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   2ed40:	f996 b000 	ldrsb.w	fp, [r6]
	uECC_word_t *k2[2] = {tmp, s};
   2ed44:	f10d 0920 	add.w	r9, sp, #32
   2ed48:	ab10      	add	r3, sp, #64	; 0x40
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
	bitcount_t num_n_bits = curve->num_n_bits;

	/* Make sure 0 < k < curve_n */
  	if (uECC_vli_isZero(k, num_words) ||
   2ed4a:	4659      	mov	r1, fp
   2ed4c:	4628      	mov	r0, r5
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2ed4e:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
{
   2ed52:	9205      	str	r2, [sp, #20]
	uECC_word_t *k2[2] = {tmp, s};
   2ed54:	f8cd 9018 	str.w	r9, [sp, #24]
   2ed58:	9307      	str	r3, [sp, #28]
  	if (uECC_vli_isZero(k, num_words) ||
   2ed5a:	f000 f98e 	bl	2f07a <uECC_vli_isZero>
   2ed5e:	b118      	cbz	r0, 2ed68 <uECC_sign_with_k+0x36>
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
		return 0;
   2ed60:	2000      	movs	r0, #0
		return 0;
	}

	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
	return 1;
}
   2ed62:	b029      	add	sp, #164	; 0xa4
   2ed64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2ed68:	f117 041f 	adds.w	r4, r7, #31
   2ed6c:	bf48      	it	mi
   2ed6e:	f107 043e 	addmi.w	r4, r7, #62	; 0x3e
   2ed72:	f344 1447 	sbfx	r4, r4, #5, #8
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   2ed76:	f106 0824 	add.w	r8, r6, #36	; 0x24
   2ed7a:	4622      	mov	r2, r4
   2ed7c:	4629      	mov	r1, r5
   2ed7e:	4640      	mov	r0, r8
   2ed80:	f000 f9f1 	bl	2f166 <uECC_vli_cmp>
  	if (uECC_vli_isZero(k, num_words) ||
   2ed84:	2801      	cmp	r0, #1
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   2ed86:	4682      	mov	sl, r0
  	if (uECC_vli_isZero(k, num_words) ||
   2ed88:	d1ea      	bne.n	2ed60 <uECC_sign_with_k+0x2e>
	carry = regularize_k(k, tmp, s, curve);
   2ed8a:	4633      	mov	r3, r6
   2ed8c:	4649      	mov	r1, r9
   2ed8e:	aa10      	add	r2, sp, #64	; 0x40
   2ed90:	4628      	mov	r0, r5
   2ed92:	f000 fe26 	bl	2f9e2 <regularize_k>
	EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
   2ed96:	fab0 f080 	clz	r0, r0
   2ed9a:	3701      	adds	r7, #1
   2ed9c:	ab28      	add	r3, sp, #160	; 0xa0
   2ed9e:	0940      	lsrs	r0, r0, #5
   2eda0:	b23f      	sxth	r7, r7
   2eda2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2eda6:	9601      	str	r6, [sp, #4]
   2eda8:	9700      	str	r7, [sp, #0]
   2edaa:	f850 2c88 	ldr.w	r2, [r0, #-136]
   2edae:	f106 0144 	add.w	r1, r6, #68	; 0x44
   2edb2:	a818      	add	r0, sp, #96	; 0x60
   2edb4:	2300      	movs	r3, #0
   2edb6:	f000 fd45 	bl	2f844 <EccPoint_mult>
	if (uECC_vli_isZero(p, num_words)) {
   2edba:	4659      	mov	r1, fp
   2edbc:	a818      	add	r0, sp, #96	; 0x60
   2edbe:	f000 f95c 	bl	2f07a <uECC_vli_isZero>
   2edc2:	2800      	cmp	r0, #0
   2edc4:	d1cc      	bne.n	2ed60 <uECC_sign_with_k+0x2e>
		uECC_vli_clear(tmp, num_n_words);
   2edc6:	4621      	mov	r1, r4
   2edc8:	4648      	mov	r0, r9
   2edca:	f000 f94b 	bl	2f064 <uECC_vli_clear>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   2edce:	4643      	mov	r3, r8
   2edd0:	464a      	mov	r2, r9
   2edd2:	4629      	mov	r1, r5
   2edd4:	4628      	mov	r0, r5
   2edd6:	9400      	str	r4, [sp, #0]
		tmp[0] = 1;
   2edd8:	f8cd a020 	str.w	sl, [sp, #32]
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   2eddc:	f000 fa9f 	bl	2f31e <uECC_vli_modMult>
	uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
   2ede0:	4623      	mov	r3, r4
   2ede2:	4642      	mov	r2, r8
   2ede4:	4629      	mov	r1, r5
   2ede6:	4628      	mov	r0, r5
   2ede8:	f000 fc23 	bl	2f632 <uECC_vli_modInv>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
   2edec:	4643      	mov	r3, r8
   2edee:	464a      	mov	r2, r9
   2edf0:	4629      	mov	r1, r5
   2edf2:	4628      	mov	r0, r5
   2edf4:	9400      	str	r4, [sp, #0]
   2edf6:	f000 fa92 	bl	2f31e <uECC_vli_modMult>
	uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
   2edfa:	f996 1001 	ldrsb.w	r1, [r6, #1]
   2edfe:	9832      	ldr	r0, [sp, #200]	; 0xc8
   2ee00:	aa18      	add	r2, sp, #96	; 0x60
   2ee02:	f000 fe1a 	bl	2fa3a <uECC_vli_nativeToBytes>
	uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
   2ee06:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   2ee0a:	9903      	ldr	r1, [sp, #12]
   2ee0c:	1dda      	adds	r2, r3, #7
   2ee0e:	bf48      	it	mi
   2ee10:	f103 020e 	addmi.w	r2, r3, #14
   2ee14:	10d2      	asrs	r2, r2, #3
   2ee16:	a808      	add	r0, sp, #32
   2ee18:	f000 fe23 	bl	2fa62 <uECC_vli_bytesToNative>
	s[num_n_words - 1] = 0;
   2ee1c:	aa28      	add	r2, sp, #160	; 0xa0
   2ee1e:	1e63      	subs	r3, r4, #1
   2ee20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2ee24:	2200      	movs	r2, #0
	uECC_vli_set(s, p, num_words);
   2ee26:	a918      	add	r1, sp, #96	; 0x60
	s[num_n_words - 1] = 0;
   2ee28:	f843 2c60 	str.w	r2, [r3, #-96]
	uECC_vli_set(s, p, num_words);
   2ee2c:	a810      	add	r0, sp, #64	; 0x40
   2ee2e:	465a      	mov	r2, fp
   2ee30:	f000 f95d 	bl	2f0ee <uECC_vli_set>
	uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
   2ee34:	aa10      	add	r2, sp, #64	; 0x40
   2ee36:	4610      	mov	r0, r2
   2ee38:	4643      	mov	r3, r8
   2ee3a:	a908      	add	r1, sp, #32
   2ee3c:	9400      	str	r4, [sp, #0]
   2ee3e:	f000 fa6e 	bl	2f31e <uECC_vli_modMult>
	bits2int(tmp, message_hash, hash_size, curve);
   2ee42:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   2ee46:	4633      	mov	r3, r6
   2ee48:	a808      	add	r0, sp, #32
   2ee4a:	f7ff ff2a 	bl	2eca2 <bits2int>
	uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
   2ee4e:	aa10      	add	r2, sp, #64	; 0x40
   2ee50:	4610      	mov	r0, r2
   2ee52:	4643      	mov	r3, r8
   2ee54:	a908      	add	r1, sp, #32
   2ee56:	9400      	str	r4, [sp, #0]
   2ee58:	f000 f99e 	bl	2f198 <uECC_vli_modAdd>
	uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
   2ee5c:	a910      	add	r1, sp, #64	; 0x40
   2ee5e:	4608      	mov	r0, r1
   2ee60:	4643      	mov	r3, r8
   2ee62:	462a      	mov	r2, r5
   2ee64:	9400      	str	r4, [sp, #0]
   2ee66:	f000 fa5a 	bl	2f31e <uECC_vli_modMult>
	if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
   2ee6a:	4621      	mov	r1, r4
   2ee6c:	a810      	add	r0, sp, #64	; 0x40
   2ee6e:	f000 f91d 	bl	2f0ac <uECC_vli_numBits>
   2ee72:	f996 1001 	ldrsb.w	r1, [r6, #1]
   2ee76:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
   2ee7a:	f73f af71 	bgt.w	2ed60 <uECC_sign_with_k+0x2e>
	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
   2ee7e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   2ee80:	aa10      	add	r2, sp, #64	; 0x40
   2ee82:	1858      	adds	r0, r3, r1
   2ee84:	f000 fdd9 	bl	2fa3a <uECC_vli_nativeToBytes>
	return 1;
   2ee88:	2001      	movs	r0, #1
   2ee8a:	e76a      	b.n	2ed62 <uECC_sign_with_k+0x30>

0002ee8c <uECC_sign>:

int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,
	      unsigned hash_size, uint8_t *signature, uECC_Curve curve)
{
   2ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ee90:	4606      	mov	r6, r0
   2ee92:	460f      	mov	r7, r1
   2ee94:	4690      	mov	r8, r2
   2ee96:	4699      	mov	r9, r3
   2ee98:	2540      	movs	r5, #64	; 0x40
   2ee9a:	b09b      	sub	sp, #108	; 0x6c
   2ee9c:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
			return 0;
		}

		// computing k as modular reduction of _random (see FIPS 186.4 B.5.1):
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2eea0:	f10a 0b24 	add.w	fp, sl, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   2eea4:	f7e7 fc90 	bl	167c8 <uECC_get_rng>
		if (!rng_function ||
   2eea8:	4604      	mov	r4, r0
   2eeaa:	b1e0      	cbz	r0, 2eee6 <uECC_sign+0x5a>
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2eeac:	2140      	movs	r1, #64	; 0x40
   2eeae:	a80a      	add	r0, sp, #40	; 0x28
   2eeb0:	47a0      	blx	r4
		if (!rng_function ||
   2eeb2:	b1c0      	cbz	r0, 2eee6 <uECC_sign+0x5a>
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2eeb4:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
   2eeb8:	a90a      	add	r1, sp, #40	; 0x28
   2eeba:	f112 031f 	adds.w	r3, r2, #31
   2eebe:	bf48      	it	mi
   2eec0:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   2eec4:	f343 1347 	sbfx	r3, r3, #5, #8
   2eec8:	465a      	mov	r2, fp
   2eeca:	a802      	add	r0, sp, #8
   2eecc:	f000 f98f 	bl	2f1ee <uECC_vli_mmod>

		if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, 
   2eed0:	4642      	mov	r2, r8
   2eed2:	4639      	mov	r1, r7
   2eed4:	4630      	mov	r0, r6
   2eed6:	e9cd 9a00 	strd	r9, sl, [sp]
   2eeda:	ab02      	add	r3, sp, #8
   2eedc:	f7ff ff29 	bl	2ed32 <uECC_sign_with_k>
   2eee0:	b928      	cbnz	r0, 2eeee <uECC_sign+0x62>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2eee2:	3d01      	subs	r5, #1
   2eee4:	d1de      	bne.n	2eea4 <uECC_sign+0x18>
			return 0;
   2eee6:	2000      	movs	r0, #0
		    curve)) {
			return 1;
		}
	}
	return 0;
}
   2eee8:	b01b      	add	sp, #108	; 0x6c
   2eeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 1;
   2eeee:	2001      	movs	r0, #1
   2eef0:	e7fa      	b.n	2eee8 <uECC_sign+0x5c>

0002eef2 <uECC_vli_add>:
{
   2eef2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2eef4:	2400      	movs	r4, #0
{
   2eef6:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   2eef8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2eefa:	b265      	sxtb	r5, r4
   2eefc:	42ab      	cmp	r3, r5
   2eefe:	dc00      	bgt.n	2ef02 <uECC_vli_add+0x10>
}
   2ef00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   2ef02:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2ef06:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2ef0a:	443d      	add	r5, r7
   2ef0c:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   2ef0e:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   2ef10:	bf8c      	ite	hi
   2ef12:	2701      	movhi	r7, #1
   2ef14:	2700      	movls	r7, #0
		result[i] = sum;
   2ef16:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2ef1a:	bf18      	it	ne
   2ef1c:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   2ef1e:	3401      	adds	r4, #1
   2ef20:	e7eb      	b.n	2eefa <uECC_vli_add+0x8>

0002ef22 <uECC_vli_rshift1>:
	uECC_word_t carry = 0;
   2ef22:	2300      	movs	r3, #0
	vli += num_words;
   2ef24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	while (vli-- > end) {
   2ef28:	4288      	cmp	r0, r1
   2ef2a:	d300      	bcc.n	2ef2e <uECC_vli_rshift1+0xc>
}
   2ef2c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2ef2e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   2ef32:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2ef36:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   2ef38:	07d3      	lsls	r3, r2, #31
   2ef3a:	e7f5      	b.n	2ef28 <uECC_vli_rshift1+0x6>

0002ef3c <vli_modInv_update>:
	if (!EVEN(uv)) {
   2ef3c:	6803      	ldr	r3, [r0, #0]
{
   2ef3e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   2ef40:	f013 0601 	ands.w	r6, r3, #1
{
   2ef44:	4605      	mov	r5, r0
   2ef46:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   2ef48:	d005      	beq.n	2ef56 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2ef4a:	4613      	mov	r3, r2
   2ef4c:	460a      	mov	r2, r1
   2ef4e:	4601      	mov	r1, r0
   2ef50:	f7ff ffcf 	bl	2eef2 <uECC_vli_add>
   2ef54:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2ef56:	4621      	mov	r1, r4
   2ef58:	4628      	mov	r0, r5
   2ef5a:	f7ff ffe2 	bl	2ef22 <uECC_vli_rshift1>
	if (carry) {
   2ef5e:	b146      	cbz	r6, 2ef72 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   2ef60:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2ef64:	3a01      	subs	r2, #1
   2ef66:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2ef6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2ef6e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   2ef72:	bd70      	pop	{r4, r5, r6, pc}

0002ef74 <uECC_vli_mult>:
{
   2ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   2ef78:	2500      	movs	r5, #0
{
   2ef7a:	b087      	sub	sp, #28
   2ef7c:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   2ef80:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   2ef82:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   2ef84:	fa4f f885 	sxtb.w	r8, r5
   2ef88:	4543      	cmp	r3, r8
   2ef8a:	dc16      	bgt.n	2efba <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2ef8c:	f04f 35ff 	mov.w	r5, #4294967295
   2ef90:	f04f 0a00 	mov.w	sl, #0
   2ef94:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   2ef98:	9502      	str	r5, [sp, #8]
   2ef9a:	9e02      	ldr	r6, [sp, #8]
   2ef9c:	fa53 fe8a 	uxtab	lr, r3, sl
   2efa0:	fa4f fe8e 	sxtb.w	lr, lr
   2efa4:	45b6      	cmp	lr, r6
   2efa6:	fa5f f58a 	uxtb.w	r5, sl
   2efaa:	db2d      	blt.n	2f008 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   2efac:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2efb0:	f840 2c04 	str.w	r2, [r0, #-4]
}
   2efb4:	b007      	add	sp, #28
   2efb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   2efba:	f04f 0c00 	mov.w	ip, #0
   2efbe:	46e6      	mov	lr, ip
   2efc0:	9e01      	ldr	r6, [sp, #4]
   2efc2:	eb06 0985 	add.w	r9, r6, r5, lsl #2
	uECC_dword_t p = (uECC_dword_t)a * b;
   2efc6:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2efc8:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   2efcc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2efd0:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2efd4:	fba7 ab06 	umull	sl, fp, r7, r6
   2efd8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2efdc:	eb1a 0601 	adds.w	r6, sl, r1
   2efe0:	eb5b 0702 	adcs.w	r7, fp, r2
   2efe4:	bf2c      	ite	cs
   2efe6:	2201      	movcs	r2, #1
   2efe8:	2200      	movcc	r2, #0
	*r2 += (r01 < p);
   2efea:	f10c 0c01 	add.w	ip, ip, #1
		for (i = 0; i <= k; ++i) {
   2efee:	fa4f fa8c 	sxtb.w	sl, ip
   2eff2:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   2eff4:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2eff6:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   2eff8:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   2effa:	dde4      	ble.n	2efc6 <uECC_vli_mult+0x52>
		result[k] = r0;
   2effc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   2f000:	463a      	mov	r2, r7
	*r2 += (r01 < p);
   2f002:	4674      	mov	r4, lr
   2f004:	3501      	adds	r5, #1
   2f006:	e7bd      	b.n	2ef84 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2f008:	9900      	ldr	r1, [sp, #0]
   2f00a:	3501      	adds	r5, #1
   2f00c:	fa4f fc85 	sxtb.w	ip, r5
   2f010:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   2f014:	4621      	mov	r1, r4
   2f016:	2400      	movs	r4, #0
   2f018:	9e01      	ldr	r6, [sp, #4]
   2f01a:	ebae 0b0c 	sub.w	fp, lr, ip
   2f01e:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   2f022:	459c      	cmp	ip, r3
   2f024:	db05      	blt.n	2f032 <uECC_vli_mult+0xbe>
		result[k] = r0;
   2f026:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2f02a:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   2f02e:	460a      	mov	r2, r1
   2f030:	e7b3      	b.n	2ef9a <uECC_vli_mult+0x26>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2f032:	f855 7b04 	ldr.w	r7, [r5], #4
   2f036:	f85b 6904 	ldr.w	r6, [fp], #-4
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2f03a:	e9cd 2104 	strd	r2, r1, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2f03e:	fba7 6706 	umull	r6, r7, r7, r6
   2f042:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   2f046:	eb16 0801 	adds.w	r8, r6, r1
   2f04a:	eb57 0902 	adcs.w	r9, r7, r2
   2f04e:	bf2c      	ite	cs
   2f050:	2201      	movcs	r2, #1
   2f052:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2f054:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   2f058:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2f05a:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   2f05c:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2f05e:	fa4f fc8c 	sxtb.w	ip, ip
   2f062:	e7de      	b.n	2f022 <uECC_vli_mult+0xae>

0002f064 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2f064:	2300      	movs	r3, #0
{
   2f066:	b510      	push	{r4, lr}
		 vli[i] = 0;
   2f068:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   2f06a:	b25a      	sxtb	r2, r3
   2f06c:	4291      	cmp	r1, r2
   2f06e:	dc00      	bgt.n	2f072 <uECC_vli_clear+0xe>
}
   2f070:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   2f072:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2f076:	3301      	adds	r3, #1
   2f078:	e7f7      	b.n	2f06a <uECC_vli_clear+0x6>

0002f07a <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   2f07a:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2f07c:	461a      	mov	r2, r3
{
   2f07e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2f080:	b25c      	sxtb	r4, r3
   2f082:	42a1      	cmp	r1, r4
   2f084:	dc03      	bgt.n	2f08e <uECC_vli_isZero+0x14>
}
   2f086:	fab2 f082 	clz	r0, r2
   2f08a:	0940      	lsrs	r0, r0, #5
   2f08c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   2f08e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2f092:	3301      	adds	r3, #1
   2f094:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2f096:	e7f3      	b.n	2f080 <uECC_vli_isZero+0x6>

0002f098 <uECC_vli_testBit>:
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2f098:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f09a:	114a      	asrs	r2, r1, #5
   2f09c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2f0a0:	f001 011f 	and.w	r1, r1, #31
   2f0a4:	fa03 f101 	lsl.w	r1, r3, r1
}
   2f0a8:	4008      	ands	r0, r1
   2f0aa:	4770      	bx	lr

0002f0ac <uECC_vli_numBits>:
{
   2f0ac:	4602      	mov	r2, r0
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2f0ae:	3901      	subs	r1, #1
   2f0b0:	b24b      	sxtb	r3, r1
   2f0b2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   2f0b6:	2b00      	cmp	r3, #0
   2f0b8:	da03      	bge.n	2f0c2 <uECC_vli_numBits+0x16>
	return (i + 1);
   2f0ba:	3301      	adds	r3, #1
   2f0bc:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   2f0be:	b938      	cbnz	r0, 2f0d0 <uECC_vli_numBits+0x24>
   2f0c0:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2f0c2:	f851 0904 	ldr.w	r0, [r1], #-4
   2f0c6:	2800      	cmp	r0, #0
   2f0c8:	d1f7      	bne.n	2f0ba <uECC_vli_numBits+0xe>
   2f0ca:	3b01      	subs	r3, #1
   2f0cc:	b25b      	sxtb	r3, r3
   2f0ce:	e7f2      	b.n	2f0b6 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   2f0d0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2f0d4:	3b01      	subs	r3, #1
   2f0d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   2f0da:	2300      	movs	r3, #0
   2f0dc:	b922      	cbnz	r2, 2f0e8 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2f0de:	3801      	subs	r0, #1
   2f0e0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2f0e4:	b200      	sxth	r0, r0
}
   2f0e6:	4770      	bx	lr
		digit >>= 1;
   2f0e8:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   2f0ea:	3301      	adds	r3, #1
   2f0ec:	e7f6      	b.n	2f0dc <uECC_vli_numBits+0x30>

0002f0ee <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   2f0ee:	2300      	movs	r3, #0
{
   2f0f0:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2f0f2:	b25c      	sxtb	r4, r3
   2f0f4:	42a2      	cmp	r2, r4
   2f0f6:	dc00      	bgt.n	2f0fa <uECC_vli_set+0xc>
}
   2f0f8:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   2f0fa:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   2f0fe:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2f102:	3301      	adds	r3, #1
   2f104:	e7f5      	b.n	2f0f2 <uECC_vli_set+0x4>

0002f106 <uECC_vli_cmp_unsafe>:
{
   2f106:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2f108:	3a01      	subs	r2, #1
   2f10a:	b253      	sxtb	r3, r2
   2f10c:	009a      	lsls	r2, r3, #2
   2f10e:	2b00      	cmp	r3, #0
   2f110:	da01      	bge.n	2f116 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   2f112:	2000      	movs	r0, #0
}
   2f114:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   2f116:	5885      	ldr	r5, [r0, r2]
   2f118:	588c      	ldr	r4, [r1, r2]
   2f11a:	42a5      	cmp	r5, r4
   2f11c:	d805      	bhi.n	2f12a <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   2f11e:	f1a2 0204 	sub.w	r2, r2, #4
   2f122:	d304      	bcc.n	2f12e <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   2f124:	3b01      	subs	r3, #1
   2f126:	b25b      	sxtb	r3, r3
   2f128:	e7f1      	b.n	2f10e <uECC_vli_cmp_unsafe+0x8>
			return 1;
   2f12a:	2001      	movs	r0, #1
   2f12c:	e7f2      	b.n	2f114 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   2f12e:	f04f 30ff 	mov.w	r0, #4294967295
   2f132:	e7ef      	b.n	2f114 <uECC_vli_cmp_unsafe+0xe>

0002f134 <uECC_vli_sub>:
{
   2f134:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2f136:	2400      	movs	r4, #0
{
   2f138:	4606      	mov	r6, r0
   2f13a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   2f13c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2f13e:	b265      	sxtb	r5, r4
   2f140:	45ac      	cmp	ip, r5
   2f142:	dc00      	bgt.n	2f146 <uECC_vli_sub+0x12>
}
   2f144:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   2f146:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2f14a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   2f14e:	1a3d      	subs	r5, r7, r0
   2f150:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   2f152:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   2f154:	bf34      	ite	cc
   2f156:	2701      	movcc	r7, #1
   2f158:	2700      	movcs	r7, #0
		result[i] = diff;
   2f15a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2f15e:	bf18      	it	ne
   2f160:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   2f162:	3401      	adds	r4, #1
   2f164:	e7eb      	b.n	2f13e <uECC_vli_sub+0xa>

0002f166 <uECC_vli_cmp>:
{
   2f166:	b530      	push	{r4, r5, lr}
   2f168:	b089      	sub	sp, #36	; 0x24
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   2f16a:	4613      	mov	r3, r2
{
   2f16c:	4615      	mov	r5, r2
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   2f16e:	460a      	mov	r2, r1
   2f170:	4601      	mov	r1, r0
   2f172:	4668      	mov	r0, sp
   2f174:	f7ff ffde 	bl	2f134 <uECC_vli_sub>
   2f178:	4604      	mov	r4, r0
	uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
   2f17a:	4629      	mov	r1, r5
   2f17c:	4668      	mov	r0, sp
   2f17e:	f7ff ff7c 	bl	2f07a <uECC_vli_isZero>
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   2f182:	3c00      	subs	r4, #0
   2f184:	bf18      	it	ne
   2f186:	2401      	movne	r4, #1
	return (!equal - 2 * neg);
   2f188:	0064      	lsls	r4, r4, #1
}
   2f18a:	2800      	cmp	r0, #0
   2f18c:	bf14      	ite	ne
   2f18e:	4260      	negne	r0, r4
   2f190:	f1c4 0001 	rsbeq	r0, r4, #1
   2f194:	b009      	add	sp, #36	; 0x24
   2f196:	bd30      	pop	{r4, r5, pc}

0002f198 <uECC_vli_modAdd>:
{
   2f198:	b570      	push	{r4, r5, r6, lr}
   2f19a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2f19e:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2f1a0:	4633      	mov	r3, r6
{
   2f1a2:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2f1a4:	f7ff fea5 	bl	2eef2 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   2f1a8:	b930      	cbnz	r0, 2f1b8 <uECC_vli_modAdd+0x20>
   2f1aa:	4632      	mov	r2, r6
   2f1ac:	4621      	mov	r1, r4
   2f1ae:	4628      	mov	r0, r5
   2f1b0:	f7ff ffa9 	bl	2f106 <uECC_vli_cmp_unsafe>
   2f1b4:	2801      	cmp	r0, #1
   2f1b6:	d007      	beq.n	2f1c8 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   2f1b8:	4633      	mov	r3, r6
   2f1ba:	462a      	mov	r2, r5
   2f1bc:	4621      	mov	r1, r4
   2f1be:	4620      	mov	r0, r4
}
   2f1c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   2f1c4:	f7ff bfb6 	b.w	2f134 <uECC_vli_sub>
}
   2f1c8:	bd70      	pop	{r4, r5, r6, pc}

0002f1ca <uECC_vli_modSub>:
{
   2f1ca:	b570      	push	{r4, r5, r6, lr}
   2f1cc:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2f1d0:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2f1d2:	4633      	mov	r3, r6
{
   2f1d4:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2f1d6:	f7ff ffad 	bl	2f134 <uECC_vli_sub>
	if (l_borrow) {
   2f1da:	b138      	cbz	r0, 2f1ec <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   2f1dc:	4633      	mov	r3, r6
   2f1de:	462a      	mov	r2, r5
   2f1e0:	4621      	mov	r1, r4
   2f1e2:	4620      	mov	r0, r4
}
   2f1e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   2f1e8:	f7ff be83 	b.w	2eef2 <uECC_vli_add>
}
   2f1ec:	bd70      	pop	{r4, r5, r6, pc}

0002f1ee <uECC_vli_mmod>:
{
   2f1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f1f2:	461d      	mov	r5, r3
   2f1f4:	b0a5      	sub	sp, #148	; 0x94
	uECC_word_t *v[2] = {tmp, product};
   2f1f6:	ab14      	add	r3, sp, #80	; 0x50
   2f1f8:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   2f1fc:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   2f1fe:	4629      	mov	r1, r5
   2f200:	4610      	mov	r0, r2
{
   2f202:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   2f204:	f7ff ff52 	bl	2f0ac <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2f208:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   2f20c:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2f20e:	4621      	mov	r1, r4
   2f210:	2c00      	cmp	r4, #0
   2f212:	bfb8      	it	lt
   2f214:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2f218:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2f21a:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2f21e:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   2f222:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2f224:	f004 071f 	and.w	r7, r4, #31
   2f228:	bf58      	it	pl
   2f22a:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   2f22c:	f7ff ff1a 	bl	2f064 <uECC_vli_clear>
	if (bit_shift > 0) {
   2f230:	2f00      	cmp	r7, #0
   2f232:	b208      	sxth	r0, r1
   2f234:	dd2b      	ble.n	2f28e <uECC_vli_mmod+0xa0>
	uECC_word_t carry = 0;
   2f236:	2200      	movs	r2, #0
   2f238:	ab04      	add	r3, sp, #16
   2f23a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2f23e:	4613      	mov	r3, r2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2f240:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2f244:	429d      	cmp	r5, r3
   2f246:	d817      	bhi.n	2f278 <uECC_vli_mmod+0x8a>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f248:	2601      	movs	r6, #1
		for (i = 0; i < num_words * 2; ++i) {
   2f24a:	006b      	lsls	r3, r5, #1
   2f24c:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f24e:	ab04      	add	r3, sp, #16
   2f250:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2f254:	1e6f      	subs	r7, r5, #1
   2f256:	ab24      	add	r3, sp, #144	; 0x90
   2f258:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   2f25c:	2c00      	cmp	r4, #0
   2f25e:	da54      	bge.n	2f30a <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   2f260:	ab24      	add	r3, sp, #144	; 0x90
   2f262:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2f266:	462a      	mov	r2, r5
   2f268:	4640      	mov	r0, r8
   2f26a:	f856 1c88 	ldr.w	r1, [r6, #-136]
   2f26e:	f7ff ff3e 	bl	2f0ee <uECC_vli_set>
}
   2f272:	b025      	add	sp, #148	; 0x94
   2f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2f278:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2f27c:	3301      	adds	r3, #1
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2f27e:	fa0c f007 	lsl.w	r0, ip, r7
   2f282:	4302      	orrs	r2, r0
   2f284:	f841 2b04 	str.w	r2, [r1], #4
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2f288:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2f28c:	e7da      	b.n	2f244 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2f28e:	ab04      	add	r3, sp, #16
   2f290:	462a      	mov	r2, r5
   2f292:	4631      	mov	r1, r6
   2f294:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2f298:	f7ff ff29 	bl	2f0ee <uECC_vli_set>
   2f29c:	e7d4      	b.n	2f248 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2f29e:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   2f2a2:	fa0f fe82 	sxth.w	lr, r2
   2f2a6:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   2f2aa:	ab24      	add	r3, sp, #144	; 0x90
   2f2ac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2f2b0:	f852 3c80 	ldr.w	r3, [r2, #-128]
   2f2b4:	3001      	adds	r0, #1
   2f2b6:	440b      	add	r3, r1
   2f2b8:	ebbb 0303 	subs.w	r3, fp, r3
   2f2bc:	bf34      	ite	cc
   2f2be:	2201      	movcc	r2, #1
   2f2c0:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   2f2c2:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   2f2c4:	bf18      	it	ne
   2f2c6:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   2f2c8:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   2f2cc:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   2f2d0:	9b01      	ldr	r3, [sp, #4]
   2f2d2:	b242      	sxtb	r2, r0
   2f2d4:	429a      	cmp	r2, r3
   2f2d6:	dbe2      	blt.n	2f29e <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   2f2d8:	1a73      	subs	r3, r6, r1
   2f2da:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2f2dc:	4629      	mov	r1, r5
   2f2de:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2f2e0:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2f2e2:	f7ff fe1e 	bl	2ef22 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2f2e6:	ab24      	add	r3, sp, #144	; 0x90
   2f2e8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2f2ec:	f853 2c80 	ldr.w	r2, [r3, #-128]
   2f2f0:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f2f4:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2f2f6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f2fa:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   2f2fc:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2f2fe:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   2f302:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2f304:	f7ff fe0d 	bl	2ef22 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   2f308:	e7a8      	b.n	2f25c <uECC_vli_mmod+0x6e>
   2f30a:	2000      	movs	r0, #0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2f30c:	ab24      	add	r3, sp, #144	; 0x90
			v[1 - index][i] = diff;
   2f30e:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   2f312:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2f314:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   2f318:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   2f31c:	e7d8      	b.n	2f2d0 <uECC_vli_mmod+0xe2>

0002f31e <uECC_vli_modMult>:
{
   2f31e:	b530      	push	{r4, r5, lr}
   2f320:	4604      	mov	r4, r0
   2f322:	461d      	mov	r5, r3
   2f324:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, num_words);
   2f326:	4668      	mov	r0, sp
{
   2f328:	f99d 3050 	ldrsb.w	r3, [sp, #80]	; 0x50
	uECC_vli_mult(product, left, right, num_words);
   2f32c:	f7ff fe22 	bl	2ef74 <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
   2f330:	462a      	mov	r2, r5
   2f332:	4669      	mov	r1, sp
   2f334:	4620      	mov	r0, r4
   2f336:	f7ff ff5a 	bl	2f1ee <uECC_vli_mmod>
}
   2f33a:	b011      	add	sp, #68	; 0x44
   2f33c:	bd30      	pop	{r4, r5, pc}

0002f33e <uECC_vli_modMult_fast>:
{
   2f33e:	b530      	push	{r4, r5, lr}
   2f340:	4605      	mov	r5, r0
   2f342:	461c      	mov	r4, r3
   2f344:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, curve->num_words);
   2f346:	4668      	mov	r0, sp
   2f348:	f993 3000 	ldrsb.w	r3, [r3]
   2f34c:	f7ff fe12 	bl	2ef74 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   2f350:	4669      	mov	r1, sp
   2f352:	4628      	mov	r0, r5
   2f354:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   2f358:	4798      	blx	r3
}
   2f35a:	b011      	add	sp, #68	; 0x44
   2f35c:	bd30      	pop	{r4, r5, pc}

0002f35e <uECC_vli_modSquare_fast>:
{
   2f35e:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   2f360:	460a      	mov	r2, r1
   2f362:	f7ff bfec 	b.w	2f33e <uECC_vli_modMult_fast>

0002f366 <double_jacobian_default>:
{
   2f366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   2f36a:	f993 6000 	ldrsb.w	r6, [r3]
{
   2f36e:	4604      	mov	r4, r0
   2f370:	4689      	mov	r9, r1
   2f372:	b092      	sub	sp, #72	; 0x48
	if (uECC_vli_isZero(Z1, num_words)) {
   2f374:	4631      	mov	r1, r6
   2f376:	4610      	mov	r0, r2
{
   2f378:	4615      	mov	r5, r2
   2f37a:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   2f37c:	f7ff fe7d 	bl	2f07a <uECC_vli_isZero>
   2f380:	2800      	cmp	r0, #0
   2f382:	f040 8091 	bne.w	2f4a8 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   2f386:	463a      	mov	r2, r7
   2f388:	4649      	mov	r1, r9
   2f38a:	a802      	add	r0, sp, #8
   2f38c:	f7ff ffe7 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2f390:	463b      	mov	r3, r7
   2f392:	4621      	mov	r1, r4
   2f394:	aa02      	add	r2, sp, #8
   2f396:	a80a      	add	r0, sp, #40	; 0x28
   2f398:	f7ff ffd1 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2f39c:	a902      	add	r1, sp, #8
   2f39e:	4608      	mov	r0, r1
   2f3a0:	463a      	mov	r2, r7
   2f3a2:	f7ff ffdc 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   2f3a6:	463b      	mov	r3, r7
   2f3a8:	462a      	mov	r2, r5
   2f3aa:	4649      	mov	r1, r9
   2f3ac:	4648      	mov	r0, r9
   2f3ae:	f7ff ffc6 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2f3b2:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   2f3b6:	463a      	mov	r2, r7
   2f3b8:	4629      	mov	r1, r5
   2f3ba:	4628      	mov	r0, r5
   2f3bc:	f7ff ffcf 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2f3c0:	4643      	mov	r3, r8
   2f3c2:	462a      	mov	r2, r5
   2f3c4:	4621      	mov	r1, r4
   2f3c6:	4620      	mov	r0, r4
   2f3c8:	9600      	str	r6, [sp, #0]
   2f3ca:	f7ff fee5 	bl	2f198 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   2f3ce:	4643      	mov	r3, r8
   2f3d0:	462a      	mov	r2, r5
   2f3d2:	4629      	mov	r1, r5
   2f3d4:	4628      	mov	r0, r5
   2f3d6:	9600      	str	r6, [sp, #0]
   2f3d8:	f7ff fede 	bl	2f198 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   2f3dc:	4643      	mov	r3, r8
   2f3de:	462a      	mov	r2, r5
   2f3e0:	4621      	mov	r1, r4
   2f3e2:	4628      	mov	r0, r5
   2f3e4:	9600      	str	r6, [sp, #0]
   2f3e6:	f7ff fef0 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   2f3ea:	463b      	mov	r3, r7
   2f3ec:	462a      	mov	r2, r5
   2f3ee:	4621      	mov	r1, r4
   2f3f0:	4620      	mov	r0, r4
   2f3f2:	f7ff ffa4 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   2f3f6:	4643      	mov	r3, r8
   2f3f8:	4622      	mov	r2, r4
   2f3fa:	4621      	mov	r1, r4
   2f3fc:	4628      	mov	r0, r5
   2f3fe:	9600      	str	r6, [sp, #0]
   2f400:	f7ff feca 	bl	2f198 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   2f404:	4643      	mov	r3, r8
   2f406:	462a      	mov	r2, r5
   2f408:	4621      	mov	r1, r4
   2f40a:	4620      	mov	r0, r4
   2f40c:	9600      	str	r6, [sp, #0]
   2f40e:	f7ff fec3 	bl	2f198 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f412:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   2f414:	07db      	lsls	r3, r3, #31
   2f416:	d54a      	bpl.n	2f4ae <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2f418:	4633      	mov	r3, r6
   2f41a:	4642      	mov	r2, r8
   2f41c:	4621      	mov	r1, r4
   2f41e:	4620      	mov	r0, r4
   2f420:	f7ff fd67 	bl	2eef2 <uECC_vli_add>
   2f424:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   2f426:	4631      	mov	r1, r6
   2f428:	4620      	mov	r0, r4
   2f42a:	f7ff fd7a 	bl	2ef22 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2f42e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2f432:	3b01      	subs	r3, #1
   2f434:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2f438:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   2f43c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2f440:	463a      	mov	r2, r7
   2f442:	4621      	mov	r1, r4
   2f444:	4628      	mov	r0, r5
   2f446:	f7ff ff8a 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2f44a:	4643      	mov	r3, r8
   2f44c:	4629      	mov	r1, r5
   2f44e:	4628      	mov	r0, r5
   2f450:	aa0a      	add	r2, sp, #40	; 0x28
   2f452:	9600      	str	r6, [sp, #0]
   2f454:	f7ff feb9 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   2f458:	4643      	mov	r3, r8
   2f45a:	4629      	mov	r1, r5
   2f45c:	4628      	mov	r0, r5
   2f45e:	aa0a      	add	r2, sp, #40	; 0x28
   2f460:	9600      	str	r6, [sp, #0]
   2f462:	f7ff feb2 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   2f466:	a90a      	add	r1, sp, #40	; 0x28
   2f468:	4608      	mov	r0, r1
   2f46a:	4643      	mov	r3, r8
   2f46c:	462a      	mov	r2, r5
   2f46e:	9600      	str	r6, [sp, #0]
   2f470:	f7ff feab 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   2f474:	463b      	mov	r3, r7
   2f476:	4621      	mov	r1, r4
   2f478:	4620      	mov	r0, r4
   2f47a:	aa0a      	add	r2, sp, #40	; 0x28
   2f47c:	f7ff ff5f 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2f480:	aa02      	add	r2, sp, #8
   2f482:	4643      	mov	r3, r8
   2f484:	4610      	mov	r0, r2
   2f486:	4621      	mov	r1, r4
   2f488:	9600      	str	r6, [sp, #0]
   2f48a:	f7ff fe9e 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2f48e:	4632      	mov	r2, r6
   2f490:	4629      	mov	r1, r5
   2f492:	4620      	mov	r0, r4
   2f494:	f7ff fe2b 	bl	2f0ee <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   2f498:	4649      	mov	r1, r9
   2f49a:	4628      	mov	r0, r5
   2f49c:	f7ff fe27 	bl	2f0ee <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2f4a0:	4648      	mov	r0, r9
   2f4a2:	a902      	add	r1, sp, #8
   2f4a4:	f7ff fe23 	bl	2f0ee <uECC_vli_set>
}
   2f4a8:	b012      	add	sp, #72	; 0x48
   2f4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2f4ae:	4631      	mov	r1, r6
   2f4b0:	4620      	mov	r0, r4
   2f4b2:	f7ff fd36 	bl	2ef22 <uECC_vli_rshift1>
   2f4b6:	e7c3      	b.n	2f440 <double_jacobian_default+0xda>

0002f4b8 <x_side_default>:
{
   2f4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f4bc:	4615      	mov	r5, r2
   2f4be:	b08a      	sub	sp, #40	; 0x28
   2f4c0:	4604      	mov	r4, r0
   2f4c2:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2f4c4:	221c      	movs	r2, #28
   2f4c6:	2100      	movs	r1, #0
   2f4c8:	a803      	add	r0, sp, #12
   2f4ca:	f006 f87c 	bl	355c6 <memset>
   2f4ce:	2303      	movs	r3, #3
	wordcount_t num_words = curve->num_words;
   2f4d0:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2f4d4:	462a      	mov	r2, r5
   2f4d6:	4631      	mov	r1, r6
   2f4d8:	4620      	mov	r0, r4
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2f4da:	1d2f      	adds	r7, r5, #4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2f4dc:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2f4de:	f7ff ff3e 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2f4e2:	463b      	mov	r3, r7
   2f4e4:	4621      	mov	r1, r4
   2f4e6:	4620      	mov	r0, r4
   2f4e8:	aa02      	add	r2, sp, #8
   2f4ea:	f8cd 8000 	str.w	r8, [sp]
   2f4ee:	f7ff fe6c 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2f4f2:	462b      	mov	r3, r5
   2f4f4:	4632      	mov	r2, r6
   2f4f6:	4621      	mov	r1, r4
   2f4f8:	4620      	mov	r0, r4
   2f4fa:	f7ff ff20 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2f4fe:	463b      	mov	r3, r7
   2f500:	4621      	mov	r1, r4
   2f502:	4620      	mov	r0, r4
   2f504:	f8cd 8000 	str.w	r8, [sp]
   2f508:	f105 0284 	add.w	r2, r5, #132	; 0x84
   2f50c:	f7ff fe44 	bl	2f198 <uECC_vli_modAdd>
}
   2f510:	b00a      	add	sp, #40	; 0x28
   2f512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f516 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   2f516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f51a:	b09a      	sub	sp, #104	; 0x68
   2f51c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
   2f520:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2f522:	4644      	mov	r4, r8
{
   2f524:	4607      	mov	r7, r0
   2f526:	4699      	mov	r9, r3
   2f528:	468a      	mov	sl, r1
	wordcount_t num_words = curve->num_words;
   2f52a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2f52e:	4602      	mov	r2, r0
   2f530:	4623      	mov	r3, r4
   2f532:	4631      	mov	r1, r6
   2f534:	a802      	add	r0, sp, #8
   2f536:	9500      	str	r5, [sp, #0]
   2f538:	f7ff fe47 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2f53c:	a902      	add	r1, sp, #8
   2f53e:	4642      	mov	r2, r8
   2f540:	4608      	mov	r0, r1
   2f542:	f7ff ff0c 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2f546:	4643      	mov	r3, r8
   2f548:	4639      	mov	r1, r7
   2f54a:	4638      	mov	r0, r7
   2f54c:	aa02      	add	r2, sp, #8
   2f54e:	f7ff fef6 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2f552:	4643      	mov	r3, r8
   2f554:	4631      	mov	r1, r6
   2f556:	4630      	mov	r0, r6
   2f558:	aa02      	add	r2, sp, #8
   2f55a:	f7ff fef0 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2f55e:	4623      	mov	r3, r4
   2f560:	4652      	mov	r2, sl
   2f562:	4649      	mov	r1, r9
   2f564:	a802      	add	r0, sp, #8
   2f566:	9500      	str	r5, [sp, #0]
   2f568:	f7ff fe16 	bl	2f198 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2f56c:	4623      	mov	r3, r4
   2f56e:	4652      	mov	r2, sl
   2f570:	4649      	mov	r1, r9
   2f572:	4648      	mov	r0, r9
   2f574:	9500      	str	r5, [sp, #0]
   2f576:	f7ff fe28 	bl	2f1ca <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2f57a:	4623      	mov	r3, r4
   2f57c:	463a      	mov	r2, r7
   2f57e:	4631      	mov	r1, r6
   2f580:	a80a      	add	r0, sp, #40	; 0x28
   2f582:	9500      	str	r5, [sp, #0]
   2f584:	f7ff fe21 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2f588:	4643      	mov	r3, r8
   2f58a:	4651      	mov	r1, sl
   2f58c:	4650      	mov	r0, sl
   2f58e:	aa0a      	add	r2, sp, #40	; 0x28
   2f590:	f7ff fed5 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2f594:	4623      	mov	r3, r4
   2f596:	4632      	mov	r2, r6
   2f598:	4639      	mov	r1, r7
   2f59a:	a80a      	add	r0, sp, #40	; 0x28
   2f59c:	9500      	str	r5, [sp, #0]
   2f59e:	f7ff fdfb 	bl	2f198 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   2f5a2:	4642      	mov	r2, r8
   2f5a4:	4649      	mov	r1, r9
   2f5a6:	4630      	mov	r0, r6
   2f5a8:	f7ff fed9 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2f5ac:	4623      	mov	r3, r4
   2f5ae:	4631      	mov	r1, r6
   2f5b0:	4630      	mov	r0, r6
   2f5b2:	aa0a      	add	r2, sp, #40	; 0x28
   2f5b4:	9500      	str	r5, [sp, #0]
   2f5b6:	f7ff fe08 	bl	2f1ca <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2f5ba:	4623      	mov	r3, r4
   2f5bc:	4632      	mov	r2, r6
   2f5be:	4639      	mov	r1, r7
   2f5c0:	a812      	add	r0, sp, #72	; 0x48
   2f5c2:	9500      	str	r5, [sp, #0]
   2f5c4:	f7ff fe01 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   2f5c8:	4643      	mov	r3, r8
   2f5ca:	4649      	mov	r1, r9
   2f5cc:	4648      	mov	r0, r9
   2f5ce:	aa12      	add	r2, sp, #72	; 0x48
   2f5d0:	f7ff feb5 	bl	2f33e <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   2f5d4:	4623      	mov	r3, r4
   2f5d6:	4652      	mov	r2, sl
   2f5d8:	4649      	mov	r1, r9
   2f5da:	4648      	mov	r0, r9
   2f5dc:	9500      	str	r5, [sp, #0]
   2f5de:	f7ff fdf4 	bl	2f1ca <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2f5e2:	4642      	mov	r2, r8
   2f5e4:	a902      	add	r1, sp, #8
   2f5e6:	a812      	add	r0, sp, #72	; 0x48
   2f5e8:	f7ff feb9 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2f5ec:	a912      	add	r1, sp, #72	; 0x48
   2f5ee:	4623      	mov	r3, r4
   2f5f0:	4608      	mov	r0, r1
   2f5f2:	aa0a      	add	r2, sp, #40	; 0x28
   2f5f4:	9500      	str	r5, [sp, #0]
   2f5f6:	f7ff fde8 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   2f5fa:	4623      	mov	r3, r4
   2f5fc:	463a      	mov	r2, r7
   2f5fe:	a912      	add	r1, sp, #72	; 0x48
   2f600:	a80a      	add	r0, sp, #40	; 0x28
   2f602:	9500      	str	r5, [sp, #0]
   2f604:	f7ff fde1 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   2f608:	a90a      	add	r1, sp, #40	; 0x28
   2f60a:	4643      	mov	r3, r8
   2f60c:	4608      	mov	r0, r1
   2f60e:	aa02      	add	r2, sp, #8
   2f610:	f7ff fe95 	bl	2f33e <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   2f614:	4623      	mov	r3, r4
   2f616:	4652      	mov	r2, sl
   2f618:	4650      	mov	r0, sl
   2f61a:	a90a      	add	r1, sp, #40	; 0x28
   2f61c:	9500      	str	r5, [sp, #0]
   2f61e:	f7ff fdd4 	bl	2f1ca <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2f622:	462a      	mov	r2, r5
   2f624:	4638      	mov	r0, r7
   2f626:	a912      	add	r1, sp, #72	; 0x48
   2f628:	f7ff fd61 	bl	2f0ee <uECC_vli_set>
}
   2f62c:	b01a      	add	sp, #104	; 0x68
   2f62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002f632 <uECC_vli_modInv>:
{
   2f632:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f634:	460f      	mov	r7, r1
   2f636:	4606      	mov	r6, r0
   2f638:	b0a1      	sub	sp, #132	; 0x84
	if (uECC_vli_isZero(input, num_words)) {
   2f63a:	4619      	mov	r1, r3
   2f63c:	4638      	mov	r0, r7
{
   2f63e:	4615      	mov	r5, r2
   2f640:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2f642:	f7ff fd1a 	bl	2f07a <uECC_vli_isZero>
   2f646:	b120      	cbz	r0, 2f652 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   2f648:	4630      	mov	r0, r6
   2f64a:	f7ff fd0b 	bl	2f064 <uECC_vli_clear>
}
   2f64e:	b021      	add	sp, #132	; 0x84
   2f650:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   2f652:	4622      	mov	r2, r4
   2f654:	4639      	mov	r1, r7
   2f656:	4668      	mov	r0, sp
   2f658:	f7ff fd49 	bl	2f0ee <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2f65c:	4629      	mov	r1, r5
   2f65e:	a808      	add	r0, sp, #32
   2f660:	f7ff fd45 	bl	2f0ee <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2f664:	a810      	add	r0, sp, #64	; 0x40
   2f666:	4621      	mov	r1, r4
   2f668:	f7ff fcfc 	bl	2f064 <uECC_vli_clear>
	u[0] = 1;
   2f66c:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2f66e:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2f670:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2f672:	f7ff fcf7 	bl	2f064 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2f676:	4622      	mov	r2, r4
   2f678:	4668      	mov	r0, sp
   2f67a:	a908      	add	r1, sp, #32
   2f67c:	f7ff fd43 	bl	2f106 <uECC_vli_cmp_unsafe>
   2f680:	b928      	cbnz	r0, 2f68e <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   2f682:	4622      	mov	r2, r4
   2f684:	4630      	mov	r0, r6
   2f686:	a910      	add	r1, sp, #64	; 0x40
   2f688:	f7ff fd31 	bl	2f0ee <uECC_vli_set>
   2f68c:	e7df      	b.n	2f64e <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   2f68e:	9b00      	ldr	r3, [sp, #0]
   2f690:	07da      	lsls	r2, r3, #31
   2f692:	d409      	bmi.n	2f6a8 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   2f694:	4621      	mov	r1, r4
   2f696:	4668      	mov	r0, sp
   2f698:	f7ff fc43 	bl	2ef22 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2f69c:	4622      	mov	r2, r4
   2f69e:	4629      	mov	r1, r5
   2f6a0:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   2f6a2:	f7ff fc4b 	bl	2ef3c <vli_modInv_update>
   2f6a6:	e7e6      	b.n	2f676 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   2f6a8:	9b08      	ldr	r3, [sp, #32]
   2f6aa:	07db      	lsls	r3, r3, #31
   2f6ac:	d407      	bmi.n	2f6be <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   2f6ae:	4621      	mov	r1, r4
   2f6b0:	a808      	add	r0, sp, #32
   2f6b2:	f7ff fc36 	bl	2ef22 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2f6b6:	4622      	mov	r2, r4
   2f6b8:	4629      	mov	r1, r5
   2f6ba:	a818      	add	r0, sp, #96	; 0x60
   2f6bc:	e7f1      	b.n	2f6a2 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   2f6be:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   2f6c0:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   2f6c2:	dd1c      	ble.n	2f6fe <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   2f6c4:	aa08      	add	r2, sp, #32
   2f6c6:	4669      	mov	r1, sp
   2f6c8:	4668      	mov	r0, sp
   2f6ca:	f7ff fd33 	bl	2f134 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2f6ce:	4621      	mov	r1, r4
   2f6d0:	4668      	mov	r0, sp
   2f6d2:	f7ff fc26 	bl	2ef22 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2f6d6:	4622      	mov	r2, r4
   2f6d8:	a918      	add	r1, sp, #96	; 0x60
   2f6da:	a810      	add	r0, sp, #64	; 0x40
   2f6dc:	f7ff fd13 	bl	2f106 <uECC_vli_cmp_unsafe>
   2f6e0:	2800      	cmp	r0, #0
   2f6e2:	da05      	bge.n	2f6f0 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   2f6e4:	a910      	add	r1, sp, #64	; 0x40
   2f6e6:	4623      	mov	r3, r4
   2f6e8:	462a      	mov	r2, r5
   2f6ea:	4608      	mov	r0, r1
   2f6ec:	f7ff fc01 	bl	2eef2 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2f6f0:	a910      	add	r1, sp, #64	; 0x40
   2f6f2:	4623      	mov	r3, r4
   2f6f4:	4608      	mov	r0, r1
   2f6f6:	aa18      	add	r2, sp, #96	; 0x60
   2f6f8:	f7ff fd1c 	bl	2f134 <uECC_vli_sub>
   2f6fc:	e7ce      	b.n	2f69c <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   2f6fe:	a908      	add	r1, sp, #32
   2f700:	466a      	mov	r2, sp
   2f702:	4608      	mov	r0, r1
   2f704:	f7ff fd16 	bl	2f134 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2f708:	4621      	mov	r1, r4
   2f70a:	a808      	add	r0, sp, #32
   2f70c:	f7ff fc09 	bl	2ef22 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2f710:	4622      	mov	r2, r4
   2f712:	a910      	add	r1, sp, #64	; 0x40
   2f714:	a818      	add	r0, sp, #96	; 0x60
   2f716:	f7ff fcf6 	bl	2f106 <uECC_vli_cmp_unsafe>
   2f71a:	2800      	cmp	r0, #0
   2f71c:	da05      	bge.n	2f72a <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   2f71e:	a918      	add	r1, sp, #96	; 0x60
   2f720:	4623      	mov	r3, r4
   2f722:	462a      	mov	r2, r5
   2f724:	4608      	mov	r0, r1
   2f726:	f7ff fbe4 	bl	2eef2 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2f72a:	a918      	add	r1, sp, #96	; 0x60
   2f72c:	4623      	mov	r3, r4
   2f72e:	4608      	mov	r0, r1
   2f730:	aa10      	add	r2, sp, #64	; 0x40
   2f732:	f7ff fcff 	bl	2f134 <uECC_vli_sub>
   2f736:	e7be      	b.n	2f6b6 <uECC_vli_modInv+0x84>

0002f738 <apply_z>:
{
   2f738:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f73a:	4615      	mov	r5, r2
   2f73c:	461c      	mov	r4, r3
   2f73e:	4607      	mov	r7, r0
   2f740:	460e      	mov	r6, r1
   2f742:	b089      	sub	sp, #36	; 0x24
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2f744:	461a      	mov	r2, r3
   2f746:	4629      	mov	r1, r5
   2f748:	4668      	mov	r0, sp
   2f74a:	f7ff fe08 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2f74e:	4623      	mov	r3, r4
   2f750:	466a      	mov	r2, sp
   2f752:	4639      	mov	r1, r7
   2f754:	4638      	mov	r0, r7
   2f756:	f7ff fdf2 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2f75a:	4623      	mov	r3, r4
   2f75c:	462a      	mov	r2, r5
   2f75e:	4669      	mov	r1, sp
   2f760:	4668      	mov	r0, sp
   2f762:	f7ff fdec 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2f766:	4623      	mov	r3, r4
   2f768:	466a      	mov	r2, sp
   2f76a:	4631      	mov	r1, r6
   2f76c:	4630      	mov	r0, r6
   2f76e:	f7ff fde6 	bl	2f33e <uECC_vli_modMult_fast>
}
   2f772:	b009      	add	sp, #36	; 0x24
   2f774:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f776 <XYcZ_add>:
{
   2f776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f77a:	b08a      	sub	sp, #40	; 0x28
   2f77c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2f780:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   2f782:	4655      	mov	r5, sl
{
   2f784:	4680      	mov	r8, r0
   2f786:	461f      	mov	r7, r3
   2f788:	4689      	mov	r9, r1
	wordcount_t num_words = curve->num_words;
   2f78a:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2f78e:	4602      	mov	r2, r0
   2f790:	462b      	mov	r3, r5
   2f792:	4621      	mov	r1, r4
   2f794:	a802      	add	r0, sp, #8
   2f796:	9600      	str	r6, [sp, #0]
   2f798:	f7ff fd17 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2f79c:	a902      	add	r1, sp, #8
   2f79e:	4652      	mov	r2, sl
   2f7a0:	4608      	mov	r0, r1
   2f7a2:	f7ff fddc 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2f7a6:	4653      	mov	r3, sl
   2f7a8:	4641      	mov	r1, r8
   2f7aa:	4640      	mov	r0, r8
   2f7ac:	aa02      	add	r2, sp, #8
   2f7ae:	f7ff fdc6 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2f7b2:	4653      	mov	r3, sl
   2f7b4:	4621      	mov	r1, r4
   2f7b6:	4620      	mov	r0, r4
   2f7b8:	aa02      	add	r2, sp, #8
   2f7ba:	f7ff fdc0 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2f7be:	462b      	mov	r3, r5
   2f7c0:	464a      	mov	r2, r9
   2f7c2:	4639      	mov	r1, r7
   2f7c4:	4638      	mov	r0, r7
   2f7c6:	9600      	str	r6, [sp, #0]
   2f7c8:	f7ff fcff 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2f7cc:	4652      	mov	r2, sl
   2f7ce:	4639      	mov	r1, r7
   2f7d0:	a802      	add	r0, sp, #8
   2f7d2:	f7ff fdc4 	bl	2f35e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   2f7d6:	a902      	add	r1, sp, #8
   2f7d8:	462b      	mov	r3, r5
   2f7da:	4642      	mov	r2, r8
   2f7dc:	4608      	mov	r0, r1
   2f7de:	9600      	str	r6, [sp, #0]
   2f7e0:	f7ff fcf3 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2f7e4:	a902      	add	r1, sp, #8
   2f7e6:	462b      	mov	r3, r5
   2f7e8:	4622      	mov	r2, r4
   2f7ea:	4608      	mov	r0, r1
   2f7ec:	9600      	str	r6, [sp, #0]
   2f7ee:	f7ff fcec 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2f7f2:	462b      	mov	r3, r5
   2f7f4:	4642      	mov	r2, r8
   2f7f6:	4621      	mov	r1, r4
   2f7f8:	4620      	mov	r0, r4
   2f7fa:	9600      	str	r6, [sp, #0]
   2f7fc:	f7ff fce5 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2f800:	4653      	mov	r3, sl
   2f802:	4622      	mov	r2, r4
   2f804:	4649      	mov	r1, r9
   2f806:	4648      	mov	r0, r9
   2f808:	f7ff fd99 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2f80c:	462b      	mov	r3, r5
   2f80e:	4641      	mov	r1, r8
   2f810:	4620      	mov	r0, r4
   2f812:	aa02      	add	r2, sp, #8
   2f814:	9600      	str	r6, [sp, #0]
   2f816:	f7ff fcd8 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2f81a:	4653      	mov	r3, sl
   2f81c:	4622      	mov	r2, r4
   2f81e:	4639      	mov	r1, r7
   2f820:	4638      	mov	r0, r7
   2f822:	f7ff fd8c 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2f826:	462b      	mov	r3, r5
   2f828:	464a      	mov	r2, r9
   2f82a:	4639      	mov	r1, r7
   2f82c:	4638      	mov	r0, r7
   2f82e:	9600      	str	r6, [sp, #0]
   2f830:	f7ff fccb 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2f834:	4632      	mov	r2, r6
   2f836:	4620      	mov	r0, r4
   2f838:	a902      	add	r1, sp, #8
   2f83a:	f7ff fc58 	bl	2f0ee <uECC_vli_set>
}
   2f83e:	b00a      	add	sp, #40	; 0x28
   2f840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002f844 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2f844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f848:	461e      	mov	r6, r3
   2f84a:	b0b1      	sub	sp, #196	; 0xc4
   2f84c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   2f84e:	e9cd 0103 	strd	r0, r1, [sp, #12]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2f852:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2f856:	a818      	add	r0, sp, #96	; 0x60
{
   2f858:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   2f85a:	463a      	mov	r2, r7
   2f85c:	f7ff fc47 	bl	2f0ee <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2f860:	00bb      	lsls	r3, r7, #2
   2f862:	9305      	str	r3, [sp, #20]
   2f864:	9b04      	ldr	r3, [sp, #16]
   2f866:	a828      	add	r0, sp, #160	; 0xa0
   2f868:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   2f86c:	4619      	mov	r1, r3
   2f86e:	9302      	str	r3, [sp, #8]
   2f870:	f7ff fc3d 	bl	2f0ee <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2f874:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   2f878:	2e00      	cmp	r6, #0
   2f87a:	f000 8088 	beq.w	2f98e <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   2f87e:	462a      	mov	r2, r5
   2f880:	4631      	mov	r1, r6
   2f882:	a808      	add	r0, sp, #32
   2f884:	f7ff fc33 	bl	2f0ee <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2f888:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2f88c:	462a      	mov	r2, r5
   2f88e:	4640      	mov	r0, r8
   2f890:	a918      	add	r1, sp, #96	; 0x60
	uECC_vli_set(Y2, Y1, num_words);
   2f892:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   2f896:	f7ff fc2a 	bl	2f0ee <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   2f89a:	4648      	mov	r0, r9
   2f89c:	a928      	add	r1, sp, #160	; 0xa0
   2f89e:	f7ff fc26 	bl	2f0ee <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2f8a2:	4623      	mov	r3, r4
   2f8a4:	aa08      	add	r2, sp, #32
   2f8a6:	a928      	add	r1, sp, #160	; 0xa0
   2f8a8:	a818      	add	r0, sp, #96	; 0x60
   2f8aa:	f7ff ff45 	bl	2f738 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2f8ae:	4623      	mov	r3, r4
   2f8b0:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2f8b4:	aa08      	add	r2, sp, #32
   2f8b6:	a928      	add	r1, sp, #160	; 0xa0
   2f8b8:	a818      	add	r0, sp, #96	; 0x60
   2f8ba:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   2f8bc:	4623      	mov	r3, r4
   2f8be:	4649      	mov	r1, r9
   2f8c0:	4640      	mov	r0, r8
   2f8c2:	aa08      	add	r2, sp, #32
   2f8c4:	f7ff ff38 	bl	2f738 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2f8c8:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   2f8cc:	3d02      	subs	r5, #2
   2f8ce:	b22d      	sxth	r5, r5
   2f8d0:	2d00      	cmp	r5, #0
   2f8d2:	dc63      	bgt.n	2f99c <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f8d4:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2f8d8:	ab10      	add	r3, sp, #64	; 0x40
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2f8da:	f005 0601 	and.w	r6, r5, #1
   2f8de:	43ed      	mvns	r5, r5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2f8e0:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2f8e4:	ab20      	add	r3, sp, #128	; 0x80
   2f8e6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2f8ea:	f005 0501 	and.w	r5, r5, #1
   2f8ee:	ab10      	add	r3, sp, #64	; 0x40
   2f8f0:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   2f8f4:	ab20      	add	r3, sp, #128	; 0x80
   2f8f6:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2f8fa:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2f8fe:	462b      	mov	r3, r5
   2f900:	464a      	mov	r2, r9
   2f902:	4631      	mov	r1, r6
   2f904:	4640      	mov	r0, r8
   2f906:	9400      	str	r4, [sp, #0]
   2f908:	f7ff fe05 	bl	2f516 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2f90c:	4653      	mov	r3, sl
   2f90e:	aa10      	add	r2, sp, #64	; 0x40
   2f910:	a918      	add	r1, sp, #96	; 0x60
   2f912:	a808      	add	r0, sp, #32
   2f914:	9700      	str	r7, [sp, #0]
   2f916:	f7ff fc58 	bl	2f1ca <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2f91a:	a908      	add	r1, sp, #32
   2f91c:	4623      	mov	r3, r4
   2f91e:	4632      	mov	r2, r6
   2f920:	4608      	mov	r0, r1
   2f922:	f7ff fd0c 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2f926:	a908      	add	r1, sp, #32
   2f928:	4623      	mov	r3, r4
   2f92a:	4608      	mov	r0, r1
   2f92c:	9a04      	ldr	r2, [sp, #16]
   2f92e:	f7ff fd06 	bl	2f33e <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2f932:	a908      	add	r1, sp, #32
   2f934:	463b      	mov	r3, r7
   2f936:	4652      	mov	r2, sl
   2f938:	4608      	mov	r0, r1
   2f93a:	f7ff fe7a 	bl	2f632 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2f93e:	a908      	add	r1, sp, #32
   2f940:	4623      	mov	r3, r4
   2f942:	4608      	mov	r0, r1
   2f944:	9a02      	ldr	r2, [sp, #8]
   2f946:	f7ff fcfa 	bl	2f33e <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2f94a:	a908      	add	r1, sp, #32
   2f94c:	4623      	mov	r3, r4
   2f94e:	4642      	mov	r2, r8
   2f950:	4608      	mov	r0, r1
   2f952:	f7ff fcf4 	bl	2f33e <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2f956:	4633      	mov	r3, r6
   2f958:	4642      	mov	r2, r8
   2f95a:	4629      	mov	r1, r5
   2f95c:	4648      	mov	r0, r9
   2f95e:	9400      	str	r4, [sp, #0]
   2f960:	f7ff ff09 	bl	2f776 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2f964:	4623      	mov	r3, r4
   2f966:	aa08      	add	r2, sp, #32
   2f968:	a920      	add	r1, sp, #128	; 0x80
   2f96a:	a810      	add	r0, sp, #64	; 0x40
   2f96c:	f7ff fee4 	bl	2f738 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2f970:	463a      	mov	r2, r7
   2f972:	9803      	ldr	r0, [sp, #12]
   2f974:	a910      	add	r1, sp, #64	; 0x40
   2f976:	f7ff fbba 	bl	2f0ee <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2f97a:	9b03      	ldr	r3, [sp, #12]
   2f97c:	9c05      	ldr	r4, [sp, #20]
   2f97e:	a920      	add	r1, sp, #128	; 0x80
   2f980:	4423      	add	r3, r4
   2f982:	4618      	mov	r0, r3
   2f984:	f7ff fbb3 	bl	2f0ee <uECC_vli_set>
}
   2f988:	b031      	add	sp, #196	; 0xc4
   2f98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2f98e:	4629      	mov	r1, r5
   2f990:	a808      	add	r0, sp, #32
   2f992:	f7ff fb67 	bl	2f064 <uECC_vli_clear>
		z[0] = 1;
   2f996:	2301      	movs	r3, #1
   2f998:	9308      	str	r3, [sp, #32]
   2f99a:	e775      	b.n	2f888 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   2f99c:	4629      	mov	r1, r5
   2f99e:	4650      	mov	r0, sl
   2f9a0:	f7ff fb7a 	bl	2f098 <uECC_vli_testBit>
   2f9a4:	fab0 f680 	clz	r6, r0
   2f9a8:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2f9aa:	f1c6 0101 	rsb	r1, r6, #1
   2f9ae:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   2f9b2:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   2f9b6:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   2f9ba:	4633      	mov	r3, r6
   2f9bc:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   2f9c0:	465a      	mov	r2, fp
   2f9c2:	9400      	str	r4, [sp, #0]
   2f9c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2f9c8:	f7ff fda5 	bl	2f516 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2f9cc:	9907      	ldr	r1, [sp, #28]
   2f9ce:	9806      	ldr	r0, [sp, #24]
   2f9d0:	460b      	mov	r3, r1
   2f9d2:	4602      	mov	r2, r0
   2f9d4:	4631      	mov	r1, r6
   2f9d6:	4658      	mov	r0, fp
   2f9d8:	9400      	str	r4, [sp, #0]
   2f9da:	f7ff fecc 	bl	2f776 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2f9de:	3d01      	subs	r5, #1
   2f9e0:	e775      	b.n	2f8ce <EccPoint_mult+0x8a>

0002f9e2 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2f9e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f9e6:	461d      	mov	r5, r3
   2f9e8:	460e      	mov	r6, r1

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2f9ea:	f9b3 9002 	ldrsh.w	r9, [r3, #2]

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2f9ee:	3524      	adds	r5, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2f9f0:	f119 081f 	adds.w	r8, r9, #31
   2f9f4:	bf48      	it	mi
   2f9f6:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
   2f9fa:	f348 1847 	sbfx	r8, r8, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2f9fe:	4601      	mov	r1, r0
{
   2fa00:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2fa02:	4643      	mov	r3, r8
   2fa04:	462a      	mov	r2, r5
   2fa06:	4630      	mov	r0, r6
   2fa08:	f7ff fa73 	bl	2eef2 <uECC_vli_add>
   2fa0c:	4604      	mov	r4, r0
   2fa0e:	b990      	cbnz	r0, 2fa36 <regularize_k+0x54>
   2fa10:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2fa14:	da06      	bge.n	2fa24 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2fa16:	4649      	mov	r1, r9
   2fa18:	4630      	mov	r0, r6
   2fa1a:	f7ff fb3d 	bl	2f098 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2fa1e:	1e04      	subs	r4, r0, #0
   2fa20:	bf18      	it	ne
   2fa22:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2fa24:	4643      	mov	r3, r8
   2fa26:	462a      	mov	r2, r5
   2fa28:	4631      	mov	r1, r6
   2fa2a:	4638      	mov	r0, r7
   2fa2c:	f7ff fa61 	bl	2eef2 <uECC_vli_add>

	return carry;
}
   2fa30:	4620      	mov	r0, r4
   2fa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2fa36:	2401      	movs	r4, #1
   2fa38:	e7f4      	b.n	2fa24 <regularize_k+0x42>

0002fa3a <uECC_vli_nativeToBytes>:
}

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2fa3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2fa3c:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2fa3e:	1e4f      	subs	r7, r1, #1
   2fa40:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2fa42:	428c      	cmp	r4, r1
   2fa44:	f105 0501 	add.w	r5, r5, #1
   2fa48:	db00      	blt.n	2fa4c <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   2fa4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2fa4c:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2fa4e:	f023 0603 	bic.w	r6, r3, #3
   2fa52:	5996      	ldr	r6, [r2, r6]
   2fa54:	f003 0303 	and.w	r3, r3, #3
   2fa58:	00db      	lsls	r3, r3, #3
   2fa5a:	fa26 f303 	lsr.w	r3, r6, r3
   2fa5e:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2fa60:	e7ee      	b.n	2fa40 <uECC_vli_nativeToBytes+0x6>

0002fa62 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2fa62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fa64:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2fa66:	1cd1      	adds	r1, r2, #3
   2fa68:	bf48      	it	mi
   2fa6a:	1d91      	addmi	r1, r2, #6
{
   2fa6c:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2fa6e:	f341 0187 	sbfx	r1, r1, #2, #8
   2fa72:	f7ff faf7 	bl	2f064 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2fa76:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2fa78:	1e67      	subs	r7, r4, #1
   2fa7a:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2fa7c:	42a2      	cmp	r2, r4
   2fa7e:	f105 0501 	add.w	r5, r5, #1
   2fa82:	db00      	blt.n	2fa86 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2fa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2fa86:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2fa88:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2fa8c:	5cb2      	ldrb	r2, [r6, r2]
   2fa8e:	f003 0303 	and.w	r3, r3, #3
   2fa92:	00db      	lsls	r3, r3, #3
   2fa94:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2fa98:	5842      	ldr	r2, [r0, r1]
   2fa9a:	431a      	orrs	r2, r3
   2fa9c:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   2fa9e:	e7ec      	b.n	2fa7a <uECC_vli_bytesToNative+0x18>

0002faa0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2faa0:	78cb      	ldrb	r3, [r1, #3]
   2faa2:	7802      	ldrb	r2, [r0, #0]
   2faa4:	4053      	eors	r3, r2
   2faa6:	7003      	strb	r3, [r0, #0]
   2faa8:	884b      	ldrh	r3, [r1, #2]
   2faaa:	7842      	ldrb	r2, [r0, #1]
   2faac:	4053      	eors	r3, r2
   2faae:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2fab0:	680a      	ldr	r2, [r1, #0]
   2fab2:	7883      	ldrb	r3, [r0, #2]
   2fab4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2fab8:	7083      	strb	r3, [r0, #2]
   2faba:	680a      	ldr	r2, [r1, #0]
   2fabc:	78c3      	ldrb	r3, [r0, #3]
   2fabe:	4053      	eors	r3, r2
   2fac0:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2fac2:	79cb      	ldrb	r3, [r1, #7]
   2fac4:	7902      	ldrb	r2, [r0, #4]
   2fac6:	4053      	eors	r3, r2
   2fac8:	7103      	strb	r3, [r0, #4]
   2faca:	88cb      	ldrh	r3, [r1, #6]
   2facc:	7942      	ldrb	r2, [r0, #5]
   2face:	4053      	eors	r3, r2
   2fad0:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2fad2:	684a      	ldr	r2, [r1, #4]
   2fad4:	7983      	ldrb	r3, [r0, #6]
   2fad6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2fada:	7183      	strb	r3, [r0, #6]
   2fadc:	684a      	ldr	r2, [r1, #4]
   2fade:	79c3      	ldrb	r3, [r0, #7]
   2fae0:	4053      	eors	r3, r2
   2fae2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2fae4:	7acb      	ldrb	r3, [r1, #11]
   2fae6:	7a02      	ldrb	r2, [r0, #8]
   2fae8:	4053      	eors	r3, r2
   2faea:	7203      	strb	r3, [r0, #8]
   2faec:	7a42      	ldrb	r2, [r0, #9]
   2faee:	894b      	ldrh	r3, [r1, #10]
   2faf0:	4053      	eors	r3, r2
   2faf2:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2faf4:	688a      	ldr	r2, [r1, #8]
   2faf6:	7a83      	ldrb	r3, [r0, #10]
   2faf8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2fafc:	7283      	strb	r3, [r0, #10]
   2fafe:	688a      	ldr	r2, [r1, #8]
   2fb00:	7ac3      	ldrb	r3, [r0, #11]
   2fb02:	4053      	eors	r3, r2
   2fb04:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2fb06:	7bcb      	ldrb	r3, [r1, #15]
   2fb08:	7b02      	ldrb	r2, [r0, #12]
   2fb0a:	4053      	eors	r3, r2
   2fb0c:	7303      	strb	r3, [r0, #12]
   2fb0e:	89cb      	ldrh	r3, [r1, #14]
   2fb10:	7b42      	ldrb	r2, [r0, #13]
   2fb12:	4053      	eors	r3, r2
   2fb14:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2fb16:	68ca      	ldr	r2, [r1, #12]
   2fb18:	7b83      	ldrb	r3, [r0, #14]
   2fb1a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2fb1e:	7383      	strb	r3, [r0, #14]
   2fb20:	68ca      	ldr	r2, [r1, #12]
   2fb22:	7bc3      	ldrb	r3, [r0, #15]
   2fb24:	4053      	eors	r3, r2
   2fb26:	73c3      	strb	r3, [r0, #15]
}
   2fb28:	4770      	bx	lr

0002fb2a <shift_rows>:
{
   2fb2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2fb2c:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2fb2e:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2fb30:	f88d 2000 	strb.w	r2, [sp]
   2fb34:	7942      	ldrb	r2, [r0, #5]
   2fb36:	f88d 2001 	strb.w	r2, [sp, #1]
   2fb3a:	7a82      	ldrb	r2, [r0, #10]
   2fb3c:	f88d 2002 	strb.w	r2, [sp, #2]
   2fb40:	7bc2      	ldrb	r2, [r0, #15]
   2fb42:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2fb46:	7902      	ldrb	r2, [r0, #4]
   2fb48:	f88d 2004 	strb.w	r2, [sp, #4]
   2fb4c:	7a42      	ldrb	r2, [r0, #9]
   2fb4e:	f88d 2005 	strb.w	r2, [sp, #5]
   2fb52:	7b82      	ldrb	r2, [r0, #14]
   2fb54:	f88d 2006 	strb.w	r2, [sp, #6]
   2fb58:	78c2      	ldrb	r2, [r0, #3]
   2fb5a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2fb5e:	7a02      	ldrb	r2, [r0, #8]
   2fb60:	f88d 2008 	strb.w	r2, [sp, #8]
   2fb64:	7b42      	ldrb	r2, [r0, #13]
   2fb66:	f88d 2009 	strb.w	r2, [sp, #9]
   2fb6a:	7882      	ldrb	r2, [r0, #2]
   2fb6c:	f88d 200a 	strb.w	r2, [sp, #10]
   2fb70:	79c2      	ldrb	r2, [r0, #7]
   2fb72:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2fb76:	7b02      	ldrb	r2, [r0, #12]
   2fb78:	f88d 200c 	strb.w	r2, [sp, #12]
   2fb7c:	7842      	ldrb	r2, [r0, #1]
   2fb7e:	f88d 200d 	strb.w	r2, [sp, #13]
   2fb82:	7982      	ldrb	r2, [r0, #6]
   2fb84:	f88d 200e 	strb.w	r2, [sp, #14]
   2fb88:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2fb8c:	2310      	movs	r3, #16
   2fb8e:	466a      	mov	r2, sp
   2fb90:	4619      	mov	r1, r3
   2fb92:	f7ff f86e 	bl	2ec72 <_copy>
}
   2fb96:	b005      	add	sp, #20
   2fb98:	f85d fb04 	ldr.w	pc, [sp], #4

0002fb9c <mult_row_column>:
{
   2fb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fb9e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2fba0:	7808      	ldrb	r0, [r1, #0]
{
   2fba2:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2fba4:	f7ff f874 	bl	2ec90 <_double_byte>
   2fba8:	4605      	mov	r5, r0
   2fbaa:	7860      	ldrb	r0, [r4, #1]
   2fbac:	f7ff f870 	bl	2ec90 <_double_byte>
   2fbb0:	78a2      	ldrb	r2, [r4, #2]
   2fbb2:	7863      	ldrb	r3, [r4, #1]
   2fbb4:	4053      	eors	r3, r2
   2fbb6:	78e2      	ldrb	r2, [r4, #3]
   2fbb8:	4053      	eors	r3, r2
   2fbba:	405d      	eors	r5, r3
   2fbbc:	4045      	eors	r5, r0
   2fbbe:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2fbc0:	7860      	ldrb	r0, [r4, #1]
   2fbc2:	7827      	ldrb	r7, [r4, #0]
   2fbc4:	f7ff f864 	bl	2ec90 <_double_byte>
   2fbc8:	4605      	mov	r5, r0
   2fbca:	78a0      	ldrb	r0, [r4, #2]
   2fbcc:	f7ff f860 	bl	2ec90 <_double_byte>
   2fbd0:	78a3      	ldrb	r3, [r4, #2]
   2fbd2:	405f      	eors	r7, r3
   2fbd4:	78e3      	ldrb	r3, [r4, #3]
   2fbd6:	405f      	eors	r7, r3
   2fbd8:	407d      	eors	r5, r7
   2fbda:	4045      	eors	r5, r0
   2fbdc:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2fbde:	78a0      	ldrb	r0, [r4, #2]
   2fbe0:	7865      	ldrb	r5, [r4, #1]
   2fbe2:	7827      	ldrb	r7, [r4, #0]
   2fbe4:	f7ff f854 	bl	2ec90 <_double_byte>
   2fbe8:	406f      	eors	r7, r5
   2fbea:	4605      	mov	r5, r0
   2fbec:	78e0      	ldrb	r0, [r4, #3]
   2fbee:	f7ff f84f 	bl	2ec90 <_double_byte>
   2fbf2:	78e3      	ldrb	r3, [r4, #3]
   2fbf4:	405f      	eors	r7, r3
   2fbf6:	407d      	eors	r5, r7
   2fbf8:	4045      	eors	r5, r0
   2fbfa:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2fbfc:	7820      	ldrb	r0, [r4, #0]
   2fbfe:	f7ff f847 	bl	2ec90 <_double_byte>
   2fc02:	7863      	ldrb	r3, [r4, #1]
   2fc04:	7825      	ldrb	r5, [r4, #0]
   2fc06:	405d      	eors	r5, r3
   2fc08:	78a3      	ldrb	r3, [r4, #2]
   2fc0a:	405d      	eors	r5, r3
   2fc0c:	4045      	eors	r5, r0
   2fc0e:	78e0      	ldrb	r0, [r4, #3]
   2fc10:	f7ff f83e 	bl	2ec90 <_double_byte>
   2fc14:	b2ed      	uxtb	r5, r5
   2fc16:	4045      	eors	r5, r0
   2fc18:	70f5      	strb	r5, [r6, #3]
}
   2fc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fc1c <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2fc1c:	460a      	mov	r2, r1
{
   2fc1e:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2fc20:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2fc24:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2fc26:	2b00      	cmp	r3, #0
   2fc28:	bfb4      	ite	lt
   2fc2a:	2387      	movlt	r3, #135	; 0x87
   2fc2c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2fc2e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2fc32:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2fc36:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2fc38:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2fc3c:	d002      	beq.n	2fc44 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2fc3e:	7813      	ldrb	r3, [r2, #0]
   2fc40:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2fc42:	e7f4      	b.n	2fc2e <gf_double+0x12>
	}
}
   2fc44:	bd10      	pop	{r4, pc}

0002fc46 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2fc46:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2fc48:	b120      	cbz	r0, 2fc54 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2fc4a:	2258      	movs	r2, #88	; 0x58
   2fc4c:	2100      	movs	r1, #0
   2fc4e:	f7ff f81d 	bl	2ec8c <_set>
   2fc52:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2fc54:	bd08      	pop	{r3, pc}

0002fc56 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2fc56:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2fc58:	4604      	mov	r4, r0
   2fc5a:	b188      	cbz	r0, 2fc80 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2fc5c:	2210      	movs	r2, #16
   2fc5e:	2100      	movs	r1, #0
   2fc60:	f7ff f814 	bl	2ec8c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2fc64:	2210      	movs	r2, #16
   2fc66:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2fc6a:	2100      	movs	r1, #0
   2fc6c:	f7ff f80e 	bl	2ec8c <_set>
	s->leftover_offset = 0;
   2fc70:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2fc72:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2fc74:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2fc76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2fc7a:	2001      	movs	r0, #1
   2fc7c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2fc80:	bd10      	pop	{r4, pc}

0002fc82 <tc_cmac_setup>:
{
   2fc82:	b570      	push	{r4, r5, r6, lr}
   2fc84:	460d      	mov	r5, r1
   2fc86:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2fc88:	4604      	mov	r4, r0
   2fc8a:	b310      	cbz	r0, 2fcd2 <tc_cmac_setup+0x50>
   2fc8c:	b311      	cbz	r1, 2fcd4 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2fc8e:	2258      	movs	r2, #88	; 0x58
   2fc90:	2100      	movs	r1, #0
   2fc92:	f7fe fffb 	bl	2ec8c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2fc96:	4629      	mov	r1, r5
   2fc98:	4630      	mov	r0, r6
	s->sched = sched;
   2fc9a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2fc9c:	f7e6 fe6a 	bl	16974 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2fca0:	2210      	movs	r2, #16
   2fca2:	2100      	movs	r1, #0
   2fca4:	4620      	mov	r0, r4
   2fca6:	f7fe fff1 	bl	2ec8c <_set>
	gf_double (s->K1, s->iv);
   2fcaa:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2fcae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2fcb0:	4621      	mov	r1, r4
   2fcb2:	4620      	mov	r0, r4
   2fcb4:	f7e6 feb2 	bl	16a1c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2fcb8:	4621      	mov	r1, r4
   2fcba:	4628      	mov	r0, r5
   2fcbc:	f7ff ffae 	bl	2fc1c <gf_double>
	gf_double (s->K2, s->K1);
   2fcc0:	4629      	mov	r1, r5
   2fcc2:	f104 0020 	add.w	r0, r4, #32
   2fcc6:	f7ff ffa9 	bl	2fc1c <gf_double>
	tc_cmac_init(s);
   2fcca:	4620      	mov	r0, r4
   2fccc:	f7ff ffc3 	bl	2fc56 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2fcd0:	2001      	movs	r0, #1
}
   2fcd2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2fcd4:	4608      	mov	r0, r1
   2fcd6:	e7fc      	b.n	2fcd2 <tc_cmac_setup+0x50>

0002fcd8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2fcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fcdc:	460d      	mov	r5, r1
   2fcde:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2fce0:	4604      	mov	r4, r0
   2fce2:	2800      	cmp	r0, #0
   2fce4:	d062      	beq.n	2fdac <_flash_used+0x7c>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2fce6:	b912      	cbnz	r2, 2fcee <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2fce8:	2001      	movs	r0, #1
}
   2fcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2fcee:	2900      	cmp	r1, #0
   2fcf0:	d05c      	beq.n	2fdac <_flash_used+0x7c>
	if (s->countdown == 0) {
   2fcf2:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2fcf6:	ea50 0301 	orrs.w	r3, r0, r1
   2fcfa:	d057      	beq.n	2fdac <_flash_used+0x7c>
	s->countdown--;
   2fcfc:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2fd00:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2fd04:	f141 33ff 	adc.w	r3, r1, #4294967295
   2fd08:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2fd0c:	f1b8 0f00 	cmp.w	r8, #0
   2fd10:	d02a      	beq.n	2fd68 <_flash_used+0x38>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2fd12:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2fd16:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2fd1a:	42be      	cmp	r6, r7
   2fd1c:	4420      	add	r0, r4
   2fd1e:	d208      	bcs.n	2fd32 <_flash_used+0x2>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2fd20:	462a      	mov	r2, r5
   2fd22:	4633      	mov	r3, r6
   2fd24:	4631      	mov	r1, r6
   2fd26:	f7fe ffa4 	bl	2ec72 <_copy>
			s->leftover_offset += data_length;
   2fd2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2fd2c:	4432      	add	r2, r6
   2fd2e:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2fd30:	e7da      	b.n	2fce8 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2fd32:	463b      	mov	r3, r7
   2fd34:	462a      	mov	r2, r5
   2fd36:	4639      	mov	r1, r7
   2fd38:	f7fe ff9b 	bl	2ec72 <_copy>
		s->leftover_offset = 0;
   2fd3c:	2300      	movs	r3, #0
   2fd3e:	3e10      	subs	r6, #16
   2fd40:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2fd42:	4446      	add	r6, r8
		data += remaining_space;
   2fd44:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2fd46:	1e63      	subs	r3, r4, #1
   2fd48:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2fd4c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2fd50:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2fd54:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2fd56:	ea82 0200 	eor.w	r2, r2, r0
   2fd5a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2fd5c:	d1f6      	bne.n	2fd4c <_flash_used+0x1c>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2fd5e:	4621      	mov	r1, r4
   2fd60:	4620      	mov	r0, r4
   2fd62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2fd64:	f7e6 fe5a 	bl	16a1c <tc_aes_encrypt>
   2fd68:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2fd6c:	2e10      	cmp	r6, #16
   2fd6e:	d80a      	bhi.n	2fd86 <_flash_used+0x56>
	if (data_length > 0) {
   2fd70:	2e00      	cmp	r6, #0
   2fd72:	d0b9      	beq.n	2fce8 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2fd74:	4633      	mov	r3, r6
   2fd76:	462a      	mov	r2, r5
   2fd78:	4631      	mov	r1, r6
   2fd7a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2fd7e:	f7fe ff78 	bl	2ec72 <_copy>
		s->leftover_offset = data_length;
   2fd82:	6466      	str	r6, [r4, #68]	; 0x44
   2fd84:	e7b0      	b.n	2fce8 <tc_cmac_update+0x10>
   2fd86:	1e63      	subs	r3, r4, #1
   2fd88:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2fd8a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2fd8e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2fd92:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2fd94:	ea82 0200 	eor.w	r2, r2, r0
   2fd98:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2fd9a:	d1f6      	bne.n	2fd8a <_flash_used+0x5a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2fd9c:	4621      	mov	r1, r4
   2fd9e:	4620      	mov	r0, r4
   2fda0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2fda2:	f7e6 fe3b 	bl	16a1c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2fda6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2fda8:	3e10      	subs	r6, #16
   2fdaa:	e7df      	b.n	2fd6c <_flash_used+0x3c>
		return TC_CRYPTO_FAIL;
   2fdac:	2000      	movs	r0, #0
   2fdae:	e79c      	b.n	2fcea <tc_cmac_update+0x12>

0002fdb0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2fdb0:	b570      	push	{r4, r5, r6, lr}
   2fdb2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2fdb4:	4605      	mov	r5, r0
   2fdb6:	b1f0      	cbz	r0, 2fdf6 <tc_cmac_final+0x46>
   2fdb8:	b371      	cbz	r1, 2fe18 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2fdba:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2fdbc:	2a10      	cmp	r2, #16
   2fdbe:	d11b      	bne.n	2fdf8 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2fdc0:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2fdc2:	1e63      	subs	r3, r4, #1
   2fdc4:	3901      	subs	r1, #1
   2fdc6:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2fdca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2fdce:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2fdd2:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2fdd4:	ea82 0206 	eor.w	r2, r2, r6
   2fdd8:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2fddc:	ea82 0206 	eor.w	r2, r2, r6
   2fde0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2fde2:	d1f2      	bne.n	2fdca <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2fde4:	4621      	mov	r1, r4
   2fde6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2fde8:	4628      	mov	r0, r5
   2fdea:	f7e6 fe17 	bl	16a1c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2fdee:	4620      	mov	r0, r4
   2fdf0:	f7ff ff29 	bl	2fc46 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2fdf4:	2001      	movs	r0, #1
}
   2fdf6:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2fdf8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2fdfc:	2100      	movs	r1, #0
   2fdfe:	f1c2 0210 	rsb	r2, r2, #16
   2fe02:	4420      	add	r0, r4
   2fe04:	f7fe ff42 	bl	2ec8c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2fe08:	2280      	movs	r2, #128	; 0x80
   2fe0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2fe0c:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2fe10:	4423      	add	r3, r4
   2fe12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2fe16:	e7d4      	b.n	2fdc2 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2fe18:	4608      	mov	r0, r1
   2fe1a:	e7ec      	b.n	2fdf6 <tc_cmac_final+0x46>

0002fe1c <tc_sha256_update>:
{
   2fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fe1e:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2fe20:	b110      	cbz	r0, 2fe28 <tc_sha256_update+0xc>
   2fe22:	b1f9      	cbz	r1, 2fe64 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2fe24:	b90a      	cbnz	r2, 2fe2a <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2fe26:	2001      	movs	r0, #1
}
   2fe28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2fe2a:	2600      	movs	r6, #0
   2fe2c:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2fe2e:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   2fe32:	42a5      	cmp	r5, r4
   2fe34:	d0f7      	beq.n	2fe26 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   2fe36:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2fe38:	1c5a      	adds	r2, r3, #1
   2fe3a:	6682      	str	r2, [r0, #104]	; 0x68
   2fe3c:	f814 1b01 	ldrb.w	r1, [r4], #1
   2fe40:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2fe42:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2fe44:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2fe48:	d9f3      	bls.n	2fe32 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   2fe4a:	4639      	mov	r1, r7
   2fe4c:	f7e6 fe50 	bl	16af0 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2fe50:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2fe54:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2fe58:	f142 0200 	adc.w	r2, r2, #0
   2fe5c:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2fe60:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2fe62:	e7e6      	b.n	2fe32 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   2fe64:	4608      	mov	r0, r1
   2fe66:	e7df      	b.n	2fe28 <tc_sha256_update+0xc>

0002fe68 <tc_sha256_final>:
{
   2fe68:	b570      	push	{r4, r5, r6, lr}
   2fe6a:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2fe6c:	4605      	mov	r5, r0
   2fe6e:	2800      	cmp	r0, #0
   2fe70:	d054      	beq.n	2ff1c <tc_sha256_final+0xb4>
   2fe72:	2900      	cmp	r1, #0
   2fe74:	d053      	beq.n	2ff1e <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2fe76:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   2fe7a:	6e89      	ldr	r1, [r1, #104]	; 0x68
   2fe7c:	f104 0628 	add.w	r6, r4, #40	; 0x28
   2fe80:	00c8      	lsls	r0, r1, #3
   2fe82:	1812      	adds	r2, r2, r0
   2fe84:	f143 0300 	adc.w	r3, r3, #0
   2fe88:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2fe8c:	2380      	movs	r3, #128	; 0x80
   2fe8e:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2fe90:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2fe92:	4421      	add	r1, r4
   2fe94:	66a0      	str	r0, [r4, #104]	; 0x68
   2fe96:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2fe9a:	d90b      	bls.n	2feb4 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   2fe9c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2fea0:	2100      	movs	r1, #0
   2fea2:	4430      	add	r0, r6
   2fea4:	f7fe fef2 	bl	2ec8c <_set>
		compress(s->iv, s->leftover);
   2fea8:	4631      	mov	r1, r6
   2feaa:	4620      	mov	r0, r4
   2feac:	f7e6 fe20 	bl	16af0 <compress>
		s->leftover_offset = 0;
   2feb0:	2300      	movs	r3, #0
   2feb2:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2feb4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2feb6:	2100      	movs	r1, #0
   2feb8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2febc:	4430      	add	r0, r6
   2febe:	f7fe fee5 	bl	2ec8c <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2fec2:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2fec4:	4631      	mov	r1, r6
   2fec6:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2fec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2feca:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2fecc:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2fece:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2fed2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2fed6:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2fed8:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   2feda:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2fedc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2fee0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2fee4:	f7e6 fe04 	bl	16af0 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2fee8:	1f26      	subs	r6, r4, #4
   2feea:	1d2b      	adds	r3, r5, #4
   2feec:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2fef0:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
   2fef4:	3304      	adds	r3, #4
   2fef6:	0e11      	lsrs	r1, r2, #24
   2fef8:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2fefc:	0c11      	lsrs	r1, r2, #16
   2fefe:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2ff02:	0a11      	lsrs	r1, r2, #8
   2ff04:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2ff08:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2ff0c:	4283      	cmp	r3, r0
   2ff0e:	d1ef      	bne.n	2fef0 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2ff10:	4620      	mov	r0, r4
   2ff12:	2270      	movs	r2, #112	; 0x70
   2ff14:	2100      	movs	r1, #0
   2ff16:	f7fe feb9 	bl	2ec8c <_set>
	return TC_CRYPTO_SUCCESS;
   2ff1a:	2001      	movs	r0, #1
}
   2ff1c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2ff1e:	4608      	mov	r0, r1
   2ff20:	e7fc      	b.n	2ff1c <tc_sha256_final+0xb4>

0002ff22 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2ff22:	b530      	push	{r4, r5, lr}
   2ff24:	1e43      	subs	r3, r0, #1
   2ff26:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2ff28:	42a9      	cmp	r1, r5
   2ff2a:	d106      	bne.n	2ff3a <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2ff2c:	2136      	movs	r1, #54	; 0x36
   2ff2e:	245c      	movs	r4, #92	; 0x5c
   2ff30:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2ff32:	1a13      	subs	r3, r2, r0
   2ff34:	2b3f      	cmp	r3, #63	; 0x3f
   2ff36:	d90c      	bls.n	2ff52 <rekey+0x30>
	}
}
   2ff38:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   2ff3a:	780c      	ldrb	r4, [r1, #0]
   2ff3c:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   2ff40:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2ff44:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ff48:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   2ff4c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2ff50:	e7ea      	b.n	2ff28 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2ff52:	f802 1b01 	strb.w	r1, [r2], #1
   2ff56:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2ff5a:	e7ea      	b.n	2ff32 <rekey+0x10>

0002ff5c <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2ff5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ff5e:	460e      	mov	r6, r1
   2ff60:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2ff62:	4605      	mov	r5, r0
{
   2ff64:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2ff66:	b1b8      	cbz	r0, 2ff98 <tc_hmac_set_key+0x3c>
   2ff68:	b341      	cbz	r1, 2ffbc <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2ff6a:	b34a      	cbz	r2, 2ffc0 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2ff6c:	2a40      	cmp	r2, #64	; 0x40
   2ff6e:	f100 0770 	add.w	r7, r0, #112	; 0x70
   2ff72:	d813      	bhi.n	2ff9c <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   2ff74:	a810      	add	r0, sp, #64	; 0x40
   2ff76:	f7e6 fea1 	bl	16cbc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2ff7a:	4622      	mov	r2, r4
   2ff7c:	4669      	mov	r1, sp
   2ff7e:	a810      	add	r0, sp, #64	; 0x40
   2ff80:	f7ff ff4c 	bl	2fe1c <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2ff84:	a910      	add	r1, sp, #64	; 0x40
   2ff86:	a834      	add	r0, sp, #208	; 0xd0
   2ff88:	f7ff ff6e 	bl	2fe68 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2ff8c:	4622      	mov	r2, r4
   2ff8e:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2ff90:	4638      	mov	r0, r7
   2ff92:	f7ff ffc6 	bl	2ff22 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2ff96:	2001      	movs	r0, #1
}
   2ff98:	b04d      	add	sp, #308	; 0x134
   2ff9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2ff9c:	f7e6 fe8e 	bl	16cbc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2ffa0:	4622      	mov	r2, r4
   2ffa2:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2ffa4:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2ffa8:	4628      	mov	r0, r5
   2ffaa:	f7ff ff37 	bl	2fe1c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2ffae:	4629      	mov	r1, r5
   2ffb0:	4620      	mov	r0, r4
   2ffb2:	f7ff ff59 	bl	2fe68 <tc_sha256_final>
		rekey(ctx->key,
   2ffb6:	2220      	movs	r2, #32
   2ffb8:	4621      	mov	r1, r4
   2ffba:	e7e9      	b.n	2ff90 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2ffbc:	4608      	mov	r0, r1
   2ffbe:	e7eb      	b.n	2ff98 <tc_hmac_set_key+0x3c>
   2ffc0:	4610      	mov	r0, r2
   2ffc2:	e7e9      	b.n	2ff98 <tc_hmac_set_key+0x3c>

0002ffc4 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2ffc4:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2ffc6:	4604      	mov	r4, r0
   2ffc8:	b140      	cbz	r0, 2ffdc <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2ffca:	f7e6 fe77 	bl	16cbc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2ffce:	2240      	movs	r2, #64	; 0x40
   2ffd0:	4620      	mov	r0, r4
   2ffd2:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2ffd6:	f7ff ff21 	bl	2fe1c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2ffda:	2001      	movs	r0, #1
}
   2ffdc:	bd10      	pop	{r4, pc}

0002ffde <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2ffde:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2ffe0:	b110      	cbz	r0, 2ffe8 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2ffe2:	f7ff ff1b 	bl	2fe1c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2ffe6:	2001      	movs	r0, #1
}
   2ffe8:	bd08      	pop	{r3, pc}

0002ffea <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2ffea:	b570      	push	{r4, r5, r6, lr}
   2ffec:	460e      	mov	r6, r1
   2ffee:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2fff0:	4605      	mov	r5, r0
   2fff2:	b1f0      	cbz	r0, 30032 <tc_hmac_final+0x48>
   2fff4:	2920      	cmp	r1, #32
   2fff6:	d11c      	bne.n	30032 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2fff8:	b1ea      	cbz	r2, 30036 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2fffa:	4611      	mov	r1, r2
   2fffc:	f7ff ff34 	bl	2fe68 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   30000:	4620      	mov	r0, r4
   30002:	f7e6 fe5b 	bl	16cbc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   30006:	2240      	movs	r2, #64	; 0x40
   30008:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   3000c:	4620      	mov	r0, r4
   3000e:	f7ff ff05 	bl	2fe1c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   30012:	4632      	mov	r2, r6
   30014:	4629      	mov	r1, r5
   30016:	4620      	mov	r0, r4
   30018:	f7ff ff00 	bl	2fe1c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   3001c:	4621      	mov	r1, r4
   3001e:	4628      	mov	r0, r5
   30020:	f7ff ff22 	bl	2fe68 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   30024:	4620      	mov	r0, r4
   30026:	22f0      	movs	r2, #240	; 0xf0
   30028:	2100      	movs	r1, #0
   3002a:	f7fe fe2f 	bl	2ec8c <_set>

	return TC_CRYPTO_SUCCESS;
   3002e:	2001      	movs	r0, #1
}
   30030:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   30032:	2000      	movs	r0, #0
   30034:	e7fc      	b.n	30030 <tc_hmac_final+0x46>
   30036:	4610      	mov	r0, r2
   30038:	e7fa      	b.n	30030 <tc_hmac_final+0x46>

0003003a <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   3003a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3003e:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   30040:	f04f 0b01 	mov.w	fp, #1
{
   30044:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   30046:	2300      	movs	r3, #0
{
   30048:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   3004a:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   3004e:	4631      	mov	r1, r6
{
   30050:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30052:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   30054:	f88d 3006 	strb.w	r3, [sp, #6]
{
   30058:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   3005c:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30060:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30064:	f7ff ff7a 	bl	2ff5c <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   30068:	4620      	mov	r0, r4
   3006a:	f7ff ffab 	bl	2ffc4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   3006e:	2220      	movs	r2, #32
   30070:	4629      	mov	r1, r5
   30072:	4620      	mov	r0, r4
   30074:	f7ff ffb3 	bl	2ffde <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   30078:	465a      	mov	r2, fp
   3007a:	4620      	mov	r0, r4
   3007c:	f10d 0106 	add.w	r1, sp, #6
   30080:	f7ff ffad 	bl	2ffde <tc_hmac_update>

	if (data && datalen)
   30084:	f1b8 0f00 	cmp.w	r8, #0
   30088:	d007      	beq.n	3009a <update+0x60>
   3008a:	f1b9 0f00 	cmp.w	r9, #0
   3008e:	d004      	beq.n	3009a <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   30090:	464a      	mov	r2, r9
   30092:	4641      	mov	r1, r8
   30094:	4620      	mov	r0, r4
   30096:	f7ff ffa2 	bl	2ffde <tc_hmac_update>
	if (additional_data && additional_datalen)
   3009a:	b13f      	cbz	r7, 300ac <update+0x72>
   3009c:	f1ba 0f00 	cmp.w	sl, #0
   300a0:	d004      	beq.n	300ac <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   300a2:	4652      	mov	r2, sl
   300a4:	4639      	mov	r1, r7
   300a6:	4620      	mov	r0, r4
   300a8:	f7ff ff99 	bl	2ffde <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   300ac:	4622      	mov	r2, r4
   300ae:	2120      	movs	r1, #32
   300b0:	4630      	mov	r0, r6
   300b2:	f7ff ff9a 	bl	2ffea <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   300b6:	2220      	movs	r2, #32
   300b8:	4631      	mov	r1, r6
   300ba:	4620      	mov	r0, r4
   300bc:	f7ff ff4e 	bl	2ff5c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   300c0:	4620      	mov	r0, r4
   300c2:	f7ff ff7f 	bl	2ffc4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   300c6:	2220      	movs	r2, #32
   300c8:	4629      	mov	r1, r5
   300ca:	4620      	mov	r0, r4
   300cc:	f7ff ff87 	bl	2ffde <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   300d0:	4622      	mov	r2, r4
   300d2:	2120      	movs	r1, #32
   300d4:	4628      	mov	r0, r5
   300d6:	f7ff ff88 	bl	2ffea <tc_hmac_final>

	if (data == 0 || datalen == 0)
   300da:	f1b8 0f00 	cmp.w	r8, #0
   300de:	d03a      	beq.n	30156 <update+0x11c>
   300e0:	f1b9 0f00 	cmp.w	r9, #0
   300e4:	d037      	beq.n	30156 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   300e6:	2220      	movs	r2, #32
   300e8:	4631      	mov	r1, r6
   300ea:	4620      	mov	r0, r4
   300ec:	f7ff ff36 	bl	2ff5c <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   300f0:	4620      	mov	r0, r4
   300f2:	f7ff ff67 	bl	2ffc4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   300f6:	2220      	movs	r2, #32
   300f8:	4629      	mov	r1, r5
   300fa:	4620      	mov	r0, r4
   300fc:	f7ff ff6f 	bl	2ffde <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   30100:	2201      	movs	r2, #1
   30102:	f10d 0107 	add.w	r1, sp, #7
   30106:	4620      	mov	r0, r4
   30108:	f7ff ff69 	bl	2ffde <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   3010c:	464a      	mov	r2, r9
   3010e:	4641      	mov	r1, r8
   30110:	4620      	mov	r0, r4
   30112:	f7ff ff64 	bl	2ffde <tc_hmac_update>
	if (additional_data && additional_datalen)
   30116:	b13f      	cbz	r7, 30128 <update+0xee>
   30118:	f1ba 0f00 	cmp.w	sl, #0
   3011c:	d004      	beq.n	30128 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   3011e:	4652      	mov	r2, sl
   30120:	4639      	mov	r1, r7
   30122:	4620      	mov	r0, r4
   30124:	f7ff ff5b 	bl	2ffde <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   30128:	4622      	mov	r2, r4
   3012a:	2120      	movs	r1, #32
   3012c:	4630      	mov	r0, r6
   3012e:	f7ff ff5c 	bl	2ffea <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30132:	2220      	movs	r2, #32
   30134:	4631      	mov	r1, r6
   30136:	4620      	mov	r0, r4
   30138:	f7ff ff10 	bl	2ff5c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   3013c:	4620      	mov	r0, r4
   3013e:	f7ff ff41 	bl	2ffc4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30142:	2220      	movs	r2, #32
   30144:	4629      	mov	r1, r5
   30146:	4620      	mov	r0, r4
   30148:	f7ff ff49 	bl	2ffde <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   3014c:	4622      	mov	r2, r4
   3014e:	2120      	movs	r1, #32
   30150:	4628      	mov	r0, r5
   30152:	f7ff ff4a 	bl	2ffea <tc_hmac_final>
}
   30156:	b003      	add	sp, #12
   30158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003015c <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   3015c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3015e:	460c      	mov	r4, r1
   30160:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   30162:	4605      	mov	r5, r0
   30164:	b1b0      	cbz	r0, 30194 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   30166:	b1b9      	cbz	r1, 30198 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   30168:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   3016a:	2220      	movs	r2, #32
   3016c:	2100      	movs	r1, #0
   3016e:	30f0      	adds	r0, #240	; 0xf0
   30170:	f7fe fd8c 	bl	2ec8c <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   30174:	2220      	movs	r2, #32
   30176:	2101      	movs	r1, #1
   30178:	f505 7088 	add.w	r0, r5, #272	; 0x110
   3017c:	f7fe fd86 	bl	2ec8c <_set>
	update(prng, personalization, plen, 0, 0);
   30180:	4628      	mov	r0, r5
   30182:	4633      	mov	r3, r6
   30184:	463a      	mov	r2, r7
   30186:	4621      	mov	r1, r4
   30188:	9600      	str	r6, [sp, #0]
   3018a:	f7ff ff56 	bl	3003a <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   3018e:	2001      	movs	r0, #1
	prng->countdown = 0;
   30190:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   30194:	b003      	add	sp, #12
   30196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   30198:	4608      	mov	r0, r1
   3019a:	e7fb      	b.n	30194 <tc_hmac_prng_init+0x38>

0003019c <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   3019c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3019e:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   301a0:	4605      	mov	r5, r0
   301a2:	b180      	cbz	r0, 301c6 <tc_hmac_prng_reseed+0x2a>
   301a4:	b179      	cbz	r1, 301c6 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   301a6:	2a1f      	cmp	r2, #31
   301a8:	d90d      	bls.n	301c6 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   301aa:	b153      	cbz	r3, 301c2 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   301ac:	b16c      	cbz	r4, 301ca <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   301ae:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   301b0:	f7ff ff43 	bl	3003a <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   301b4:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   301b8:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   301ba:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   301be:	b003      	add	sp, #12
   301c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   301c2:	9300      	str	r3, [sp, #0]
   301c4:	e7f4      	b.n	301b0 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   301c6:	2000      	movs	r0, #0
   301c8:	e7f9      	b.n	301be <tc_hmac_prng_reseed+0x22>
   301ca:	4620      	mov	r0, r4
   301cc:	e7f7      	b.n	301be <tc_hmac_prng_reseed+0x22>

000301ce <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   301ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   301d2:	460d      	mov	r5, r1
   301d4:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   301d6:	4680      	mov	r8, r0
   301d8:	b3d8      	cbz	r0, 30252 <tc_hmac_prng_generate+0x84>
   301da:	b3d2      	cbz	r2, 30252 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   301dc:	1e4b      	subs	r3, r1, #1
   301de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   301e2:	d236      	bcs.n	30252 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   301e4:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   301e8:	b3ab      	cbz	r3, 30256 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   301ea:	3b01      	subs	r3, #1
   301ec:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   301f0:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   301f4:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   301f8:	2220      	movs	r2, #32
   301fa:	4649      	mov	r1, r9
   301fc:	4620      	mov	r0, r4
   301fe:	f7ff fead 	bl	2ff5c <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   30202:	4620      	mov	r0, r4
   30204:	f7ff fede 	bl	2ffc4 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30208:	2220      	movs	r2, #32
   3020a:	4639      	mov	r1, r7
   3020c:	4620      	mov	r0, r4
   3020e:	f7ff fee6 	bl	2ffde <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   30212:	4622      	mov	r2, r4
   30214:	2120      	movs	r1, #32
   30216:	4638      	mov	r0, r7
   30218:	f7ff fee7 	bl	2ffea <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   3021c:	2d20      	cmp	r5, #32
   3021e:	462e      	mov	r6, r5
   30220:	bf28      	it	cs
   30222:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   30224:	4640      	mov	r0, r8
   30226:	4633      	mov	r3, r6
   30228:	463a      	mov	r2, r7
   3022a:	4631      	mov	r1, r6
   3022c:	f7fe fd21 	bl	2ec72 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   30230:	2d20      	cmp	r5, #32
   30232:	bf38      	it	cc
   30234:	2520      	movcc	r5, #32
	while (outlen != 0) {
   30236:	3d20      	subs	r5, #32
		out += bufferlen;
   30238:	44b0      	add	r8, r6
	while (outlen != 0) {
   3023a:	d1dd      	bne.n	301f8 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   3023c:	4620      	mov	r0, r4
   3023e:	462b      	mov	r3, r5
   30240:	462a      	mov	r2, r5
   30242:	4629      	mov	r1, r5
   30244:	9500      	str	r5, [sp, #0]
   30246:	f7ff fef8 	bl	3003a <update>

	return TC_CRYPTO_SUCCESS;
   3024a:	2001      	movs	r0, #1
}
   3024c:	b003      	add	sp, #12
   3024e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   30252:	2000      	movs	r0, #0
   30254:	e7fa      	b.n	3024c <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   30256:	f04f 30ff 	mov.w	r0, #4294967295
   3025a:	e7f7      	b.n	3024c <tc_hmac_prng_generate+0x7e>

0003025c <tc_ctr_prng_update.part.0>:
 *  @return none
 *  @note Assumes: providedData is (TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE) bytes long
 *  @param ctx IN/OUT -- CTR PRNG state
 *  @param providedData IN -- data used when updating the internal state
 */
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   3025c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30260:	4604      	mov	r4, r0
   30262:	460d      	mov	r5, r1
{
	if (0 != ctx) {
		/* 10.2.1.2 step 1 */
		uint8_t temp[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
		unsigned int len = 0U;
   30264:	2600      	movs	r6, #0
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   30266:	b08c      	sub	sp, #48	; 0x30
   30268:	f100 0810 	add.w	r8, r0, #16

		/* 10.2.1.2 step 2 */
		while (len < sizeof temp) {
			unsigned int blocklen = sizeof(temp) - len;
   3026c:	f1c6 0720 	rsb	r7, r6, #32
	if (0 != arr) {
   30270:	b144      	cbz	r4, 30284 <tc_ctr_prng_update.part.0+0x28>
   30272:	4642      	mov	r2, r8
			if (++arr[i-1] != 0U) {
   30274:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   30278:	3301      	adds	r3, #1
   3027a:	b2db      	uxtb	r3, r3
   3027c:	7013      	strb	r3, [r2, #0]
   3027e:	b90b      	cbnz	r3, 30284 <tc_ctr_prng_update.part.0+0x28>
		for (i = len; i > 0U; i--) {
   30280:	42a2      	cmp	r2, r4
   30282:	d1f7      	bne.n	30274 <tc_ctr_prng_update.part.0+0x18>

			/* 10.2.1.2 step 2.1 */
			arrInc(ctx->V, sizeof ctx->V);

			/* 10.2.1.2 step 2.2 */
			if (blocklen > TC_AES_BLOCK_SIZE) {
   30284:	2f10      	cmp	r7, #16
   30286:	bf28      	it	cs
   30288:	2710      	movcs	r7, #16
				blocklen = TC_AES_BLOCK_SIZE;
			}
			(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   3028a:	4642      	mov	r2, r8
   3028c:	4621      	mov	r1, r4
   3028e:	4668      	mov	r0, sp
   30290:	f7e6 fbc4 	bl	16a1c <tc_aes_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30294:	ab04      	add	r3, sp, #16
   30296:	1998      	adds	r0, r3, r6
   30298:	463a      	mov	r2, r7
   3029a:	4669      	mov	r1, sp

			/* 10.2.1.2 step 2.3/step 3 */
			memcpy(&(temp[len]), output_block, blocklen);

			len += blocklen;
   3029c:	443e      	add	r6, r7
   3029e:	f005 f972 	bl	35586 <memcpy>
		while (len < sizeof temp) {
   302a2:	2e1f      	cmp	r6, #31
   302a4:	d9e2      	bls.n	3026c <tc_ctr_prng_update.part.0+0x10>
   302a6:	1e6b      	subs	r3, r5, #1
   302a8:	aa04      	add	r2, sp, #16
   302aa:	351f      	adds	r5, #31

		/* 10.2.1.2 step 4 */
		if (0 != providedData) {
			unsigned int i;
			for (i = 0U; i < sizeof temp; i++) {
				temp[i] ^= providedData[i];
   302ac:	7811      	ldrb	r1, [r2, #0]
   302ae:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   302b2:	4041      	eors	r1, r0
			for (i = 0U; i < sizeof temp; i++) {
   302b4:	42ab      	cmp	r3, r5
				temp[i] ^= providedData[i];
   302b6:	f802 1b01 	strb.w	r1, [r2], #1
			for (i = 0U; i < sizeof temp; i++) {
   302ba:	d1f7      	bne.n	302ac <tc_ctr_prng_update.part.0+0x50>
			}
		}

		/* 10.2.1.2 step 5 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, temp);
   302bc:	4640      	mov	r0, r8
   302be:	a904      	add	r1, sp, #16
   302c0:	f7e6 fb58 	bl	16974 <tc_aes128_set_encrypt_key>
   302c4:	ad0c      	add	r5, sp, #48	; 0x30
   302c6:	aa08      	add	r2, sp, #32
   302c8:	4613      	mov	r3, r2
   302ca:	cb03      	ldmia	r3!, {r0, r1}
   302cc:	42ab      	cmp	r3, r5
   302ce:	6020      	str	r0, [r4, #0]
   302d0:	6061      	str	r1, [r4, #4]
   302d2:	461a      	mov	r2, r3
   302d4:	f104 0408 	add.w	r4, r4, #8
   302d8:	d1f6      	bne.n	302c8 <tc_ctr_prng_update.part.0+0x6c>
    
		/* 10.2.1.2 step 6 */
		memcpy(ctx->V, &(temp[TC_AES_KEY_SIZE]), TC_AES_BLOCK_SIZE);
	}
}
   302da:	b00c      	add	sp, #48	; 0x30
   302dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000302e0 <tc_ctr_prng_init>:
int tc_ctr_prng_init(TCCtrPrng_t * const ctx, 
		     uint8_t const * const entropy,
		     unsigned int entropyLen, 
		     uint8_t const * const personalization,
		     unsigned int pLen)
{
   302e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int result = TC_CRYPTO_FAIL;	
	unsigned int i;
	uint8_t personalization_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   302e4:	2600      	movs	r6, #0
{
   302e6:	461f      	mov	r7, r3
   302e8:	b094      	sub	sp, #80	; 0x50
   302ea:	4605      	mov	r5, r0
   302ec:	460c      	mov	r4, r1
   302ee:	4690      	mov	r8, r2
	uint8_t personalization_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   302f0:	4631      	mov	r1, r6
   302f2:	221c      	movs	r2, #28
   302f4:	a805      	add	r0, sp, #20
   302f6:	9604      	str	r6, [sp, #16]
   302f8:	f005 f965 	bl	355c6 <memset>
	uint8_t seed_material[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
	uint8_t zeroArr[TC_AES_BLOCK_SIZE] = {0U};
   302fc:	e9cd 6600 	strd	r6, r6, [sp]
   30300:	e9cd 6602 	strd	r6, r6, [sp, #8]
  
	if (0 != personalization) {
   30304:	b147      	cbz	r7, 30318 <tc_ctr_prng_init+0x38>
		if (len > sizeof personalization_buf) {
			len = sizeof personalization_buf;
		}

		/* 10.2.1.3.1 step 2 */
		memcpy(personalization_buf, personalization, len);
   30306:	2320      	movs	r3, #32
   30308:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   3030a:	4639      	mov	r1, r7
   3030c:	429a      	cmp	r2, r3
   3030e:	bf28      	it	cs
   30310:	461a      	movcs	r2, r3
   30312:	a804      	add	r0, sp, #16
   30314:	f005 f944 	bl	355a0 <__memcpy_chk>
	}

	if ((0 != ctx) && (0 != entropy) && (entropyLen >= sizeof seed_material)) {
   30318:	b395      	cbz	r5, 30380 <tc_ctr_prng_init+0xa0>
   3031a:	b38c      	cbz	r4, 30380 <tc_ctr_prng_init+0xa0>
   3031c:	f1b8 0f1f 	cmp.w	r8, #31
   30320:	d92e      	bls.n	30380 <tc_ctr_prng_init+0xa0>
		/* 10.2.1.3.1 step 3 */
		memcpy(seed_material, entropy, sizeof seed_material);
   30322:	aa0c      	add	r2, sp, #48	; 0x30
   30324:	4623      	mov	r3, r4
   30326:	4616      	mov	r6, r2
   30328:	f104 0720 	add.w	r7, r4, #32
   3032c:	4614      	mov	r4, r2
   3032e:	6818      	ldr	r0, [r3, #0]
   30330:	6859      	ldr	r1, [r3, #4]
   30332:	3308      	adds	r3, #8
   30334:	c403      	stmia	r4!, {r0, r1}
   30336:	42bb      	cmp	r3, r7
   30338:	4622      	mov	r2, r4
   3033a:	d1f7      	bne.n	3032c <tc_ctr_prng_init+0x4c>
		for (i = 0U; i < sizeof seed_material; i++) {
   3033c:	4633      	mov	r3, r6
	if ((0 != ctx) && (0 != entropy) && (entropyLen >= sizeof seed_material)) {
   3033e:	2420      	movs	r4, #32
   30340:	a904      	add	r1, sp, #16
			seed_material[i] ^= personalization_buf[i];
   30342:	781a      	ldrb	r2, [r3, #0]
   30344:	f811 0b01 	ldrb.w	r0, [r1], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   30348:	3c01      	subs	r4, #1
			seed_material[i] ^= personalization_buf[i];
   3034a:	ea82 0200 	eor.w	r2, r2, r0
   3034e:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   30352:	d1f6      	bne.n	30342 <tc_ctr_prng_init+0x62>
		}

		/* 10.2.1.3.1 step 4 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, zeroArr);
   30354:	4669      	mov	r1, sp
   30356:	f105 0010 	add.w	r0, r5, #16
   3035a:	f7e6 fb0b 	bl	16974 <tc_aes128_set_encrypt_key>
__ssp_bos_icheck3(memset, void *, int)
   3035e:	2210      	movs	r2, #16
   30360:	4621      	mov	r1, r4
   30362:	4628      	mov	r0, r5
   30364:	f005 f92f 	bl	355c6 <memset>
	if (0 != ctx) {
   30368:	4628      	mov	r0, r5
   3036a:	4631      	mov	r1, r6
   3036c:	f7ff ff76 	bl	3025c <tc_ctr_prng_update.part.0>
    
		/* 10.2.1.3.1 step 6 */    
		tc_ctr_prng_update(ctx, seed_material);

		/* 10.2.1.3.1 step 7 */
		ctx->reseedCount = 1U;
   30370:	2201      	movs	r2, #1
   30372:	2300      	movs	r3, #0

		result = TC_CRYPTO_SUCCESS;
   30374:	2001      	movs	r0, #1
		ctx->reseedCount = 1U;
   30376:	e9c5 2330 	strd	r2, r3, [r5, #192]	; 0xc0
	}
	return result;
}
   3037a:	b014      	add	sp, #80	; 0x50
   3037c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int result = TC_CRYPTO_FAIL;	
   30380:	2000      	movs	r0, #0
	return result;
   30382:	e7fa      	b.n	3037a <tc_ctr_prng_init+0x9a>

00030384 <tc_ctr_prng_generate>:
int tc_ctr_prng_generate(TCCtrPrng_t * const ctx,
			uint8_t const * const additional_input,
			unsigned int additionallen,
			uint8_t * const out,
			unsigned int outlen)
{
   30384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30388:	b08c      	sub	sp, #48	; 0x30
   3038a:	460e      	mov	r6, r1
   3038c:	4690      	mov	r8, r2
   3038e:	461d      	mov	r5, r3
	/* 2^19 bits - see section 10.2.1 */ 
	static const unsigned int MAX_BYTES_PER_REQ = 65536U; 

	unsigned int result = TC_CRYPTO_FAIL;

	if ((0 != ctx) && (0 != out) && (outlen < MAX_BYTES_PER_REQ)) {
   30390:	4604      	mov	r4, r0
{
   30392:	9f12      	ldr	r7, [sp, #72]	; 0x48
	if ((0 != ctx) && (0 != out) && (outlen < MAX_BYTES_PER_REQ)) {
   30394:	2800      	cmp	r0, #0
   30396:	d04e      	beq.n	30436 <tc_ctr_prng_generate+0xb2>
   30398:	2b00      	cmp	r3, #0
   3039a:	d04c      	beq.n	30436 <tc_ctr_prng_generate+0xb2>
   3039c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   303a0:	d249      	bcs.n	30436 <tc_ctr_prng_generate+0xb2>
		/* 10.2.1.5.1 step 1 */
		if (ctx->reseedCount > MAX_REQS_BEFORE_RESEED) {
   303a2:	e9d0 2330 	ldrd	r2, r3, [r0, #192]	; 0xc0
   303a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   303aa:	bf08      	it	eq
   303ac:	2a01      	cmpeq	r2, #1
   303ae:	d244      	bcs.n	3043a <tc_ctr_prng_generate+0xb6>
			result = TC_CTR_PRNG_RESEED_REQ;
		} else {
			uint8_t additional_input_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   303b0:	2100      	movs	r1, #0
   303b2:	221c      	movs	r2, #28
   303b4:	a805      	add	r0, sp, #20
   303b6:	9104      	str	r1, [sp, #16]
   303b8:	f005 f905 	bl	355c6 <memset>
			if (0 != additional_input) {
   303bc:	b166      	cbz	r6, 303d8 <tc_ctr_prng_generate+0x54>
				/* 10.2.1.5.1 step 2  */
				unsigned int len = additionallen;
				if (len > sizeof additional_input_buf) {
					len = sizeof additional_input_buf;
				}
				memcpy(additional_input_buf, additional_input, len);
   303be:	2320      	movs	r3, #32
   303c0:	4598      	cmp	r8, r3
   303c2:	4642      	mov	r2, r8
   303c4:	4631      	mov	r1, r6
   303c6:	bf28      	it	cs
   303c8:	461a      	movcs	r2, r3
   303ca:	a804      	add	r0, sp, #16
   303cc:	f005 f8e8 	bl	355a0 <__memcpy_chk>
	if (0 != ctx) {
   303d0:	4620      	mov	r0, r4
   303d2:	a904      	add	r1, sp, #16
   303d4:	f7ff ff42 	bl	3025c <tc_ctr_prng_update.part.0>
{
   303d8:	2600      	movs	r6, #0
      
			/* 10.2.1.5.1 step 3 - implicit */

			/* 10.2.1.5.1 step 4 */
			unsigned int len = 0U;      
			while (len < outlen) {
   303da:	42be      	cmp	r6, r7
   303dc:	d30e      	bcc.n	303fc <tc_ctr_prng_generate+0x78>
	if (0 != ctx) {
   303de:	4620      	mov	r0, r4
   303e0:	a904      	add	r1, sp, #16
   303e2:	f7ff ff3b 	bl	3025c <tc_ctr_prng_update.part.0>
      
			/* 10.2.1.5.1 step 6 */
			tc_ctr_prng_update(ctx, additional_input_buf);

			/* 10.2.1.5.1 step 7 */
			ctx->reseedCount++;
   303e6:	e9d4 3230 	ldrd	r3, r2, [r4, #192]	; 0xc0

			/* 10.2.1.5.1 step 8 */
			result = TC_CRYPTO_SUCCESS;
   303ea:	2001      	movs	r0, #1
			ctx->reseedCount++;
   303ec:	3301      	adds	r3, #1
   303ee:	f142 0200 	adc.w	r2, r2, #0
   303f2:	e9c4 3230 	strd	r3, r2, [r4, #192]	; 0xc0
		}
	}

	return result;
}
   303f6:	b00c      	add	sp, #48	; 0x30
   303f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				unsigned int blocklen = outlen - len;
   303fc:	f104 0110 	add.w	r1, r4, #16
   30400:	460a      	mov	r2, r1
   30402:	eba7 0806 	sub.w	r8, r7, r6
			if (++arr[i-1] != 0U) {
   30406:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   3040a:	3301      	adds	r3, #1
   3040c:	b2db      	uxtb	r3, r3
   3040e:	700b      	strb	r3, [r1, #0]
   30410:	b90b      	cbnz	r3, 30416 <tc_ctr_prng_generate+0x92>
		for (i = len; i > 0U; i--) {
   30412:	428c      	cmp	r4, r1
   30414:	d1f7      	bne.n	30406 <tc_ctr_prng_generate+0x82>
				(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   30416:	4621      	mov	r1, r4
   30418:	4668      	mov	r0, sp
   3041a:	f7e6 faff 	bl	16a1c <tc_aes_encrypt>
				if (blocklen > TC_AES_BLOCK_SIZE) {
   3041e:	f1b8 0f10 	cmp.w	r8, #16
   30422:	bf28      	it	cs
   30424:	f04f 0810 	movcs.w	r8, #16
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30428:	19a8      	adds	r0, r5, r6
   3042a:	4642      	mov	r2, r8
   3042c:	4669      	mov	r1, sp
   3042e:	f005 f8aa 	bl	35586 <memcpy>
				len += blocklen;
   30432:	4446      	add	r6, r8
   30434:	e7d1      	b.n	303da <tc_ctr_prng_generate+0x56>
	unsigned int result = TC_CRYPTO_FAIL;
   30436:	2000      	movs	r0, #0
   30438:	e7dd      	b.n	303f6 <tc_ctr_prng_generate+0x72>
			result = TC_CTR_PRNG_RESEED_REQ;
   3043a:	f04f 30ff 	mov.w	r0, #4294967295
   3043e:	e7da      	b.n	303f6 <tc_ctr_prng_generate+0x72>

00030440 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   30440:	2100      	movs	r1, #0
   30442:	2001      	movs	r0, #1
   30444:	f7e6 bd22 	b.w	16e8c <z_arm_fatal_error>

00030448 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   30448:	6e83      	ldr	r3, [r0, #104]	; 0x68
   3044a:	f383 880b 	msr	PSPLIM, r3
}
   3044e:	4770      	bx	lr

00030450 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   30450:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   30452:	6800      	ldr	r0, [r0, #0]
   30454:	f7e6 bd1a 	b.w	16e8c <z_arm_fatal_error>

00030458 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   30458:	b508      	push	{r3, lr}
	handler();
   3045a:	f7e6 fdcb 	bl	16ff4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3045e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   30462:	f7e6 be0d 	b.w	17080 <z_arm_exc_exit>

00030466 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   30466:	4770      	bx	lr

00030468 <z_arm_restore_fp_context>:
   30468:	4770      	bx	lr

0003046a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3046a:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3046e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   30472:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   30474:	bf08      	it	eq
   30476:	f06f 0015 	mvneq.w	r0, #21
   3047a:	4770      	bx	lr

0003047c <mpu_configure_region>:
{
   3047c:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   3047e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   30480:	680c      	ldr	r4, [r1, #0]
{
   30482:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   30484:	890a      	ldrh	r2, [r1, #8]
   30486:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   30488:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3048a:	3b01      	subs	r3, #1
   3048c:	f024 041f 	bic.w	r4, r4, #31
   30490:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   30492:	f002 021f 	and.w	r2, r2, #31
   30496:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3049a:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   3049e:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   304a0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   304a4:	9303      	str	r3, [sp, #12]
   304a6:	f7e7 f8b7 	bl	17618 <region_allocate_and_init>
}
   304aa:	b005      	add	sp, #20
   304ac:	bd30      	pop	{r4, r5, pc}

000304ae <_stdout_hook_default>:
}
   304ae:	f04f 30ff 	mov.w	r0, #4294967295
   304b2:	4770      	bx	lr

000304b4 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   304b4:	f7f8 b8bc 	b.w	28630 <z_impl_z_errno>

000304b8 <close>:
   304b8:	f7fe ba56 	b.w	2e968 <z_impl_zsock_close>

000304bc <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   304bc:	b510      	push	{r4, lr}
   304be:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   304c0:	7801      	ldrb	r1, [r0, #0]
   304c2:	7822      	ldrb	r2, [r4, #0]
{
   304c4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   304c6:	428a      	cmp	r2, r1
   304c8:	d00e      	beq.n	304e8 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   304ca:	4669      	mov	r1, sp
   304cc:	f7e7 fc92 	bl	17df4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   304d0:	4620      	mov	r0, r4
   304d2:	a905      	add	r1, sp, #20
   304d4:	f7e7 fc8e 	bl	17df4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   304d8:	2210      	movs	r2, #16
   304da:	f10d 0115 	add.w	r1, sp, #21
   304de:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   304e2:	f005 f842 	bl	3556a <memcmp>
   304e6:	e007      	b.n	304f8 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   304e8:	2a01      	cmp	r2, #1
   304ea:	d007      	beq.n	304fc <bt_uuid_cmp+0x40>
   304ec:	2a02      	cmp	r2, #2
   304ee:	d008      	beq.n	30502 <bt_uuid_cmp+0x46>
   304f0:	b95a      	cbnz	r2, 3050a <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   304f2:	8840      	ldrh	r0, [r0, #2]
   304f4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   304f6:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   304f8:	b00a      	add	sp, #40	; 0x28
   304fa:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   304fc:	6840      	ldr	r0, [r0, #4]
   304fe:	6863      	ldr	r3, [r4, #4]
   30500:	e7f9      	b.n	304f6 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   30502:	2210      	movs	r2, #16
   30504:	1c61      	adds	r1, r4, #1
   30506:	3001      	adds	r0, #1
   30508:	e7eb      	b.n	304e2 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   3050a:	f06f 0015 	mvn.w	r0, #21
   3050e:	e7f3      	b.n	304f8 <bt_uuid_cmp+0x3c>

00030510 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   30510:	2a04      	cmp	r2, #4
{
   30512:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   30514:	d00d      	beq.n	30532 <bt_uuid_create+0x22>
   30516:	2a10      	cmp	r2, #16
   30518:	d019      	beq.n	3054e <bt_uuid_create+0x3e>
   3051a:	2a02      	cmp	r2, #2
   3051c:	f04f 0300 	mov.w	r3, #0
   30520:	d121      	bne.n	30566 <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   30522:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   30524:	784a      	ldrb	r2, [r1, #1]
   30526:	780b      	ldrb	r3, [r1, #0]
   30528:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   3052c:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   3052e:	2001      	movs	r0, #1
}
   30530:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   30532:	2301      	movs	r3, #1
   30534:	7003      	strb	r3, [r0, #0]
   30536:	788a      	ldrb	r2, [r1, #2]
   30538:	78cc      	ldrb	r4, [r1, #3]
   3053a:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   3053c:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   30540:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   30542:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   30546:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   3054a:	6042      	str	r2, [r0, #4]
		break;
   3054c:	e7ef      	b.n	3052e <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   3054e:	2302      	movs	r3, #2
   30550:	f800 3b01 	strb.w	r3, [r0], #1
   30554:	f101 0310 	add.w	r3, r1, #16
   30558:	f851 2b04 	ldr.w	r2, [r1], #4
   3055c:	4299      	cmp	r1, r3
   3055e:	f840 2b04 	str.w	r2, [r0], #4
   30562:	d1f9      	bne.n	30558 <bt_uuid_create+0x48>
   30564:	e7e3      	b.n	3052e <bt_uuid_create+0x1e>
	switch (data_len) {
   30566:	4618      	mov	r0, r3
   30568:	e7e2      	b.n	30530 <bt_uuid_create+0x20>

0003056a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   3056a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   3056c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   3056e:	2106      	movs	r1, #6
{
   30570:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   30572:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   30576:	f7e9 fbed 	bl	19d54 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   3057a:	b918      	cbnz	r0, 30584 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   3057c:	79a3      	ldrb	r3, [r4, #6]
   3057e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   30582:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   30584:	bd10      	pop	{r4, pc}

00030586 <bt_hci_evt_get_flags>:
   30586:	280f      	cmp	r0, #15
   30588:	d806      	bhi.n	30598 <bt_hci_evt_get_flags+0x12>
   3058a:	280d      	cmp	r0, #13
   3058c:	d80b      	bhi.n	305a6 <bt_hci_evt_get_flags+0x20>
   3058e:	2805      	cmp	r0, #5
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   30590:	bf14      	ite	ne
   30592:	2002      	movne	r0, #2
   30594:	2003      	moveq	r0, #3
   30596:	4770      	bx	lr
	switch (evt) {
   30598:	2813      	cmp	r0, #19
   3059a:	d004      	beq.n	305a6 <bt_hci_evt_get_flags+0x20>
   3059c:	281a      	cmp	r0, #26
   3059e:	bf14      	ite	ne
   305a0:	2002      	movne	r0, #2
   305a2:	2001      	moveq	r0, #1
   305a4:	4770      	bx	lr
   305a6:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   305a8:	4770      	bx	lr

000305aa <bt_addr_le_copy>:
   305aa:	680b      	ldr	r3, [r1, #0]
   305ac:	6003      	str	r3, [r0, #0]
   305ae:	888b      	ldrh	r3, [r1, #4]
   305b0:	8083      	strh	r3, [r0, #4]
   305b2:	798b      	ldrb	r3, [r1, #6]
   305b4:	7183      	strb	r3, [r0, #6]
}
   305b6:	4770      	bx	lr

000305b8 <bt_addr_copy>:
   305b8:	680b      	ldr	r3, [r1, #0]
   305ba:	6003      	str	r3, [r0, #0]
   305bc:	888b      	ldrh	r3, [r1, #4]
   305be:	8083      	strh	r3, [r0, #4]
}
   305c0:	4770      	bx	lr

000305c2 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   305c2:	f7e8 bab7 	b.w	18b34 <bt_le_create_conn_legacy>

000305c6 <bt_hci_disconnect>:
{
   305c6:	b570      	push	{r4, r5, r6, lr}
   305c8:	4606      	mov	r6, r0
   305ca:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   305cc:	f240 4006 	movw	r0, #1030	; 0x406
   305d0:	2103      	movs	r1, #3
   305d2:	f7e7 ff85 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   305d6:	4604      	mov	r4, r0
   305d8:	b168      	cbz	r0, 305f6 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   305da:	2103      	movs	r1, #3
   305dc:	3008      	adds	r0, #8
   305de:	f7ec fcfd 	bl	1cfdc <net_buf_simple_add>
	disconn->reason = reason;
   305e2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   305e4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   305e6:	4621      	mov	r1, r4
}
   305e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   305ec:	2200      	movs	r2, #0
   305ee:	f240 4006 	movw	r0, #1030	; 0x406
   305f2:	f7e7 bfbd 	b.w	18570 <bt_hci_cmd_send_sync>
}
   305f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   305fa:	bd70      	pop	{r4, r5, r6, pc}

000305fc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   305fc:	8802      	ldrh	r2, [r0, #0]
   305fe:	8843      	ldrh	r3, [r0, #2]
{
   30600:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   30602:	429a      	cmp	r2, r3
   30604:	d818      	bhi.n	30638 <bt_le_conn_params_valid+0x3c>
   30606:	2a05      	cmp	r2, #5
   30608:	d916      	bls.n	30638 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   3060a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   3060e:	d813      	bhi.n	30638 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   30610:	8884      	ldrh	r4, [r0, #4]
   30612:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   30616:	d20f      	bcs.n	30638 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   30618:	88c1      	ldrh	r1, [r0, #6]
   3061a:	f640 4076 	movw	r0, #3190	; 0xc76
   3061e:	f1a1 020a 	sub.w	r2, r1, #10
   30622:	b292      	uxth	r2, r2
   30624:	4282      	cmp	r2, r0
   30626:	d807      	bhi.n	30638 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   30628:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   3062c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   30630:	bf34      	ite	cc
   30632:	2001      	movcc	r0, #1
   30634:	2000      	movcs	r0, #0
}
   30636:	bd10      	pop	{r4, pc}
		return false;
   30638:	2000      	movs	r0, #0
   3063a:	e7fc      	b.n	30636 <bt_le_conn_params_valid+0x3a>

0003063c <bt_le_set_data_len>:
{
   3063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3063e:	4607      	mov	r7, r0
   30640:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   30642:	f242 0022 	movw	r0, #8226	; 0x2022
   30646:	2106      	movs	r1, #6
{
   30648:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   3064a:	f7e7 ff49 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   3064e:	4604      	mov	r4, r0
   30650:	b170      	cbz	r0, 30670 <bt_le_set_data_len+0x34>
   30652:	2106      	movs	r1, #6
   30654:	3008      	adds	r0, #8
   30656:	f7ec fcc1 	bl	1cfdc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   3065a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   3065c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   3065e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   30660:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   30662:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   30664:	f242 0022 	movw	r0, #8226	; 0x2022
}
   30668:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   3066c:	f7e8 bac6 	b.w	18bfc <bt_hci_cmd_send>
}
   30670:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030676 <bt_le_set_phy>:
{
   30676:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3067a:	4680      	mov	r8, r0
   3067c:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   3067e:	f242 0032 	movw	r0, #8242	; 0x2032
   30682:	2107      	movs	r1, #7
{
   30684:	4616      	mov	r6, r2
   30686:	461d      	mov	r5, r3
   30688:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   3068c:	f7e7 ff28 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   30690:	4604      	mov	r4, r0
   30692:	b190      	cbz	r0, 306ba <bt_le_set_phy+0x44>
   30694:	2107      	movs	r1, #7
   30696:	3008      	adds	r0, #8
   30698:	f7ec fca0 	bl	1cfdc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   3069c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   306a0:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   306a2:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   306a4:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   306a6:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   306a8:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   306ac:	4621      	mov	r1, r4
}
   306ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   306b2:	f242 0032 	movw	r0, #8242	; 0x2032
   306b6:	f7e8 baa1 	b.w	18bfc <bt_hci_cmd_send>
}
   306ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   306be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000306c2 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   306c2:	6880      	ldr	r0, [r0, #8]
   306c4:	f7e8 bbb8 	b.w	18e38 <bt_hci_le_enh_conn_complete>

000306c8 <le_legacy_conn_complete>:
{
   306c8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   306ca:	6881      	ldr	r1, [r0, #8]
{
   306cc:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   306ce:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   306d0:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   306d2:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   306d6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   306da:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   306dc:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   306e0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   306e4:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   306e8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   306ec:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   306f0:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   306f4:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   306f8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   306fc:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   30700:	7b4b      	ldrb	r3, [r1, #13]
   30702:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   30706:	f7ff ff50 	bl	305aa <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   3070a:	2200      	movs	r2, #0
   3070c:	4669      	mov	r1, sp
   3070e:	f10d 0013 	add.w	r0, sp, #19
   30712:	9200      	str	r2, [sp, #0]
   30714:	f8ad 2004 	strh.w	r2, [sp, #4]
   30718:	f7ff ff4e 	bl	305b8 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   3071c:	4669      	mov	r1, sp
   3071e:	f10d 0019 	add.w	r0, sp, #25
   30722:	9200      	str	r2, [sp, #0]
   30724:	f8ad 2004 	strh.w	r2, [sp, #4]
   30728:	f7ff ff46 	bl	305b8 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   3072c:	a802      	add	r0, sp, #8
   3072e:	f7e8 fb83 	bl	18e38 <bt_hci_le_enh_conn_complete>
}
   30732:	b00b      	add	sp, #44	; 0x2c
   30734:	f85d fb04 	ldr.w	pc, [sp], #4

00030738 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   30738:	2000      	movs	r0, #0
   3073a:	4770      	bx	lr

0003073c <bt_addr_copy>:
   3073c:	680b      	ldr	r3, [r1, #0]
   3073e:	6003      	str	r3, [r0, #0]
   30740:	888b      	ldrh	r3, [r1, #4]
   30742:	8083      	strh	r3, [r0, #4]
   30744:	4770      	bx	lr

00030746 <bt_addr_le_copy>:
   30746:	680b      	ldr	r3, [r1, #0]
   30748:	6003      	str	r3, [r0, #0]
   3074a:	888b      	ldrh	r3, [r1, #4]
   3074c:	8083      	strh	r3, [r0, #4]
   3074e:	798b      	ldrb	r3, [r1, #6]
   30750:	7183      	strb	r3, [r0, #6]
}
   30752:	4770      	bx	lr

00030754 <bt_lookup_id_addr>:
}
   30754:	4608      	mov	r0, r1
   30756:	4770      	bx	lr

00030758 <bt_id_set_private_addr>:
{
   30758:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   3075a:	2106      	movs	r1, #6
   3075c:	4668      	mov	r0, sp
   3075e:	f7e9 faf9 	bl	19d54 <bt_rand>
	if (err) {
   30762:	b940      	cbnz	r0, 30776 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   30764:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   30768:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   3076a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3076e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   30772:	f7e8 fec7 	bl	19504 <set_random_address>
}
   30776:	b003      	add	sp, #12
   30778:	f85d fb04 	ldr.w	pc, [sp], #4

0003077c <atomic_and>:
{
   3077c:	4603      	mov	r3, r0
}
   3077e:	e8d3 0fef 	ldaex	r0, [r3]
   30782:	ea00 0201 	and.w	r2, r0, r1
   30786:	e8c3 2fec 	stlex	ip, r2, [r3]
   3078a:	f1bc 0f00 	cmp.w	ip, #0
   3078e:	d1f6      	bne.n	3077e <atomic_and+0x2>
   30790:	4770      	bx	lr

00030792 <bt_addr_le_copy>:
   30792:	680b      	ldr	r3, [r1, #0]
   30794:	6003      	str	r3, [r0, #0]
   30796:	888b      	ldrh	r3, [r1, #4]
   30798:	8083      	strh	r3, [r0, #4]
   3079a:	798b      	ldrb	r3, [r1, #6]
   3079c:	7183      	strb	r3, [r0, #6]
   3079e:	4770      	bx	lr

000307a0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   307a0:	e8d0 0faf 	lda	r0, [r0]
}
   307a4:	4770      	bx	lr

000307a6 <tx_notify>:
{
   307a6:	b570      	push	{r4, r5, r6, lr}
   307a8:	4604      	mov	r4, r0
	__asm__ volatile(
   307aa:	f04f 0220 	mov.w	r2, #32
   307ae:	f3ef 8311 	mrs	r3, BASEPRI
   307b2:	f382 8811 	msr	BASEPRI, r2
   307b6:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   307ba:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   307bc:	b920      	cbnz	r0, 307c8 <tx_notify+0x22>
	__asm__ volatile(
   307be:	f383 8811 	msr	BASEPRI, r3
   307c2:	f3bf 8f6f 	isb	sy
}
   307c6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   307c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   307ca:	6802      	ldr	r2, [r0, #0]
   307cc:	4288      	cmp	r0, r1
	list->tail = node;
   307ce:	bf08      	it	eq
   307d0:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   307d2:	6222      	str	r2, [r4, #32]
   307d4:	f383 8811 	msr	BASEPRI, r3
   307d8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   307dc:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   307e0:	f7e9 fad0 	bl	19d84 <tx_free>
		cb(conn, user_data);
   307e4:	4631      	mov	r1, r6
   307e6:	4620      	mov	r0, r4
   307e8:	47a8      	blx	r5
	while (1) {
   307ea:	e7de      	b.n	307aa <tx_notify+0x4>

000307ec <bt_conn_get_security>:
}
   307ec:	2001      	movs	r0, #1
   307ee:	4770      	bx	lr

000307f0 <bt_conn_reset_rx_state>:
{
   307f0:	b510      	push	{r4, lr}
   307f2:	4604      	mov	r4, r0
	if (!conn->rx) {
   307f4:	6900      	ldr	r0, [r0, #16]
   307f6:	b118      	cbz	r0, 30800 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   307f8:	f7ec fac0 	bl	1cd7c <net_buf_unref>
	conn->rx = NULL;
   307fc:	2300      	movs	r3, #0
   307fe:	6123      	str	r3, [r4, #16]
}
   30800:	bd10      	pop	{r4, pc}

00030802 <bt_conn_connected>:
{
   30802:	b510      	push	{r4, lr}
   30804:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   30806:	f7e9 fe9b 	bl	1a540 <bt_l2cap_connected>
	notify_connected(conn);
   3080a:	4620      	mov	r0, r4
}
   3080c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   30810:	f7e9 bac2 	b.w	19d98 <notify_connected>

00030814 <bt_conn_is_peer_addr_le>:
{
   30814:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   30816:	7a03      	ldrb	r3, [r0, #8]
{
   30818:	4604      	mov	r4, r0
	if (id != conn->id) {
   3081a:	428b      	cmp	r3, r1
{
   3081c:	4615      	mov	r5, r2
	if (id != conn->id) {
   3081e:	d115      	bne.n	3084c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   30820:	f100 0190 	add.w	r1, r0, #144	; 0x90
   30824:	2207      	movs	r2, #7
   30826:	4628      	mov	r0, r5
   30828:	f004 fe9f 	bl	3556a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   3082c:	b180      	cbz	r0, 30850 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   3082e:	78e3      	ldrb	r3, [r4, #3]
   30830:	2207      	movs	r2, #7
   30832:	b943      	cbnz	r3, 30846 <bt_conn_is_peer_addr_le+0x32>
   30834:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   30838:	4628      	mov	r0, r5
   3083a:	f004 fe96 	bl	3556a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   3083e:	fab0 f080 	clz	r0, r0
   30842:	0940      	lsrs	r0, r0, #5
}
   30844:	bd38      	pop	{r3, r4, r5, pc}
   30846:	f104 0197 	add.w	r1, r4, #151	; 0x97
   3084a:	e7f5      	b.n	30838 <bt_conn_is_peer_addr_le+0x24>
		return false;
   3084c:	2000      	movs	r0, #0
   3084e:	e7f9      	b.n	30844 <bt_conn_is_peer_addr_le+0x30>
		return true;
   30850:	2001      	movs	r0, #1
   30852:	e7f7      	b.n	30844 <bt_conn_is_peer_addr_le+0x30>

00030854 <bt_conn_ref>:
{
   30854:	4603      	mov	r3, r0
   30856:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   30858:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   3085c:	4610      	mov	r0, r2
   3085e:	f7ff ff9f 	bl	307a0 <atomic_get>
		if (!old) {
   30862:	b160      	cbz	r0, 3087e <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   30864:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   30866:	e8d2 4fef 	ldaex	r4, [r2]
   3086a:	4284      	cmp	r4, r0
   3086c:	d104      	bne.n	30878 <bt_conn_ref+0x24>
   3086e:	e8c2 1fec 	stlex	ip, r1, [r2]
   30872:	f1bc 0f00 	cmp.w	ip, #0
   30876:	d1f6      	bne.n	30866 <bt_conn_ref+0x12>
   30878:	d1f0      	bne.n	3085c <bt_conn_ref+0x8>
}
   3087a:	4618      	mov	r0, r3
   3087c:	bd10      	pop	{r4, pc}
			return NULL;
   3087e:	4603      	mov	r3, r0
   30880:	e7fb      	b.n	3087a <bt_conn_ref+0x26>

00030882 <conn_lookup_handle>:
{
   30882:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30886:	4607      	mov	r7, r0
   30888:	460e      	mov	r6, r1
   3088a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   3088c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   3088e:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   30892:	42b4      	cmp	r4, r6
   30894:	d103      	bne.n	3089e <conn_lookup_handle+0x1c>
	return NULL;
   30896:	2300      	movs	r3, #0
}
   30898:	4618      	mov	r0, r3
   3089a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   3089e:	fb09 7004 	mla	r0, r9, r4, r7
   308a2:	f7ff ffd7 	bl	30854 <bt_conn_ref>
   308a6:	4603      	mov	r3, r0
		if (!conn) {
   308a8:	b158      	cbz	r0, 308c2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   308aa:	7a85      	ldrb	r5, [r0, #10]
   308ac:	2d01      	cmp	r5, #1
   308ae:	d002      	beq.n	308b6 <conn_lookup_handle+0x34>
   308b0:	3d07      	subs	r5, #7
   308b2:	2d01      	cmp	r5, #1
   308b4:	d803      	bhi.n	308be <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   308b6:	881a      	ldrh	r2, [r3, #0]
   308b8:	4542      	cmp	r2, r8
   308ba:	d0ed      	beq.n	30898 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   308bc:	4618      	mov	r0, r3
   308be:	f7e9 fbc3 	bl	1a048 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   308c2:	3401      	adds	r4, #1
   308c4:	e7e5      	b.n	30892 <conn_lookup_handle+0x10>

000308c6 <bt_conn_le_conn_update>:
{
   308c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   308c8:	4607      	mov	r7, r0
   308ca:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   308cc:	f242 0013 	movw	r0, #8211	; 0x2013
   308d0:	210e      	movs	r1, #14
   308d2:	f7e7 fe05 	bl	184e0 <bt_hci_cmd_create>
	if (!buf) {
   308d6:	4606      	mov	r6, r0
   308d8:	b1d0      	cbz	r0, 30910 <bt_conn_le_conn_update+0x4a>
   308da:	210e      	movs	r1, #14
   308dc:	3008      	adds	r0, #8
   308de:	f7ec fb7d 	bl	1cfdc <net_buf_simple_add>
   308e2:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   308e4:	220e      	movs	r2, #14
   308e6:	2100      	movs	r1, #0
   308e8:	f004 fe6d 	bl	355c6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   308ec:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   308ee:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   308f0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   308f2:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   308f4:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   308f6:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   308f8:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   308fa:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   308fe:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   30900:	88ab      	ldrh	r3, [r5, #4]
   30902:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   30904:	88eb      	ldrh	r3, [r5, #6]
   30906:	8123      	strh	r3, [r4, #8]
}
   30908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   3090c:	f7e7 be30 	b.w	18570 <bt_hci_cmd_send_sync>
}
   30910:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030916 <l2cap_connected>:
}
   30916:	4770      	bx	lr

00030918 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   30918:	3010      	adds	r0, #16
   3091a:	f7f9 bd23 	b.w	2a364 <k_work_cancel_delayable>

0003091e <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   3091e:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   30920:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   30922:	b17b      	cbz	r3, 30944 <bt_l2cap_chan_remove+0x26>
   30924:	2200      	movs	r2, #0
   30926:	3b08      	subs	r3, #8
   30928:	b163      	cbz	r3, 30944 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   3092a:	428b      	cmp	r3, r1
   3092c:	f103 0408 	add.w	r4, r3, #8
   30930:	d10f      	bne.n	30952 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   30932:	688b      	ldr	r3, [r1, #8]
   30934:	b93a      	cbnz	r2, 30946 <bt_l2cap_chan_remove+0x28>
   30936:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   30938:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   3093a:	4294      	cmp	r4, r2
   3093c:	d100      	bne.n	30940 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   3093e:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   30940:	2300      	movs	r3, #0
   30942:	608b      	str	r3, [r1, #8]
}
   30944:	bd10      	pop	{r4, pc}
   30946:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   30948:	6d83      	ldr	r3, [r0, #88]	; 0x58
   3094a:	429c      	cmp	r4, r3
	list->tail = node;
   3094c:	bf08      	it	eq
   3094e:	6582      	streq	r2, [r0, #88]	; 0x58
}
   30950:	e7f6      	b.n	30940 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   30952:	2c00      	cmp	r4, #0
   30954:	d0f6      	beq.n	30944 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   30956:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   30958:	2b00      	cmp	r3, #0
   3095a:	d0f3      	beq.n	30944 <bt_l2cap_chan_remove+0x26>
   3095c:	4622      	mov	r2, r4
   3095e:	3b08      	subs	r3, #8
   30960:	e7e2      	b.n	30928 <bt_l2cap_chan_remove+0xa>

00030962 <bt_l2cap_chan_del>:
{
   30962:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   30964:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   30968:	4604      	mov	r4, r0
	if (!chan->conn) {
   3096a:	b123      	cbz	r3, 30976 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   3096c:	686b      	ldr	r3, [r5, #4]
   3096e:	b103      	cbz	r3, 30972 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   30970:	4798      	blx	r3
	chan->conn = NULL;
   30972:	2300      	movs	r3, #0
   30974:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   30976:	68e3      	ldr	r3, [r4, #12]
   30978:	b10b      	cbz	r3, 3097e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   3097a:	4620      	mov	r0, r4
   3097c:	4798      	blx	r3
	if (ops->released) {
   3097e:	69eb      	ldr	r3, [r5, #28]
   30980:	b11b      	cbz	r3, 3098a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   30982:	4620      	mov	r0, r4
}
   30984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   30988:	4718      	bx	r3
}
   3098a:	bd70      	pop	{r4, r5, r6, pc}

0003098c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   3098c:	3104      	adds	r1, #4
   3098e:	f7e9 bccf 	b.w	1a330 <bt_conn_create_pdu_timeout>

00030992 <bt_l2cap_send_cb>:
{
   30992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30996:	4614      	mov	r4, r2
   30998:	4605      	mov	r5, r0
   3099a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   3099c:	f102 0008 	add.w	r0, r2, #8
   309a0:	2104      	movs	r1, #4
   309a2:	461e      	mov	r6, r3
   309a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   309a8:	f7ec fab4 	bl	1cf14 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   309ac:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   309ae:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   309b0:	3a04      	subs	r2, #4
   309b2:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   309b4:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   309b6:	4632      	mov	r2, r6
   309b8:	4621      	mov	r1, r4
   309ba:	4628      	mov	r0, r5
}
   309bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   309c0:	f7e9 bade 	b.w	19f80 <bt_conn_send_cb>

000309c4 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   309c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   309c6:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   309c8:	2202      	movs	r2, #2
   309ca:	2001      	movs	r0, #1
   309cc:	f7e9 fd72 	bl	1a4b4 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   309d0:	4604      	mov	r4, r0
   309d2:	b198      	cbz	r0, 309fc <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   309d4:	2102      	movs	r1, #2
   309d6:	3008      	adds	r0, #8
   309d8:	f7ec fb00 	bl	1cfdc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   309dc:	2300      	movs	r3, #0
   309de:	4622      	mov	r2, r4
   309e0:	7003      	strb	r3, [r0, #0]
   309e2:	7043      	strb	r3, [r0, #1]
   309e4:	2105      	movs	r1, #5
   309e6:	4628      	mov	r0, r5
   309e8:	9300      	str	r3, [sp, #0]
   309ea:	f7ff ffd2 	bl	30992 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   309ee:	b128      	cbz	r0, 309fc <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   309f0:	4620      	mov	r0, r4
}
   309f2:	b003      	add	sp, #12
   309f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   309f8:	f7ec b9c0 	b.w	1cd7c <net_buf_unref>
}
   309fc:	b003      	add	sp, #12
   309fe:	bd30      	pop	{r4, r5, pc}

00030a00 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   30a00:	6d40      	ldr	r0, [r0, #84]	; 0x54
   30a02:	b160      	cbz	r0, 30a1e <bt_l2cap_le_lookup_tx_cid+0x1e>
   30a04:	3808      	subs	r0, #8
   30a06:	b900      	cbnz	r0, 30a0a <bt_l2cap_le_lookup_tx_cid+0xa>
   30a08:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   30a0a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   30a0e:	428b      	cmp	r3, r1
   30a10:	d005      	beq.n	30a1e <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   30a12:	f110 0308 	adds.w	r3, r0, #8
   30a16:	d001      	beq.n	30a1c <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   30a18:	6880      	ldr	r0, [r0, #8]
   30a1a:	e7f2      	b.n	30a02 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   30a1c:	4618      	mov	r0, r3
}
   30a1e:	4770      	bx	lr

00030a20 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   30a20:	6d40      	ldr	r0, [r0, #84]	; 0x54
   30a22:	b160      	cbz	r0, 30a3e <bt_l2cap_le_lookup_rx_cid+0x1e>
   30a24:	3808      	subs	r0, #8
   30a26:	b900      	cbnz	r0, 30a2a <bt_l2cap_le_lookup_rx_cid+0xa>
   30a28:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   30a2a:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   30a2e:	428b      	cmp	r3, r1
   30a30:	d005      	beq.n	30a3e <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   30a32:	f110 0308 	adds.w	r3, r0, #8
   30a36:	d001      	beq.n	30a3c <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   30a38:	6880      	ldr	r0, [r0, #8]
   30a3a:	e7f2      	b.n	30a22 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   30a3c:	4618      	mov	r0, r3
}
   30a3e:	4770      	bx	lr

00030a40 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   30a40:	4770      	bx	lr

00030a42 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   30a42:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   30a44:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   30a46:	b128      	cbz	r0, 30a54 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30a48:	6859      	ldr	r1, [r3, #4]
   30a4a:	6802      	ldr	r2, [r0, #0]
   30a4c:	4288      	cmp	r0, r1
	list->head = node;
   30a4e:	601a      	str	r2, [r3, #0]
	list->tail = node;
   30a50:	bf08      	it	eq
   30a52:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   30a54:	4770      	bx	lr

00030a56 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30a56:	2200      	movs	r2, #0
   30a58:	4603      	mov	r3, r0
   30a5a:	6800      	ldr	r0, [r0, #0]
   30a5c:	b900      	cbnz	r0, 30a60 <sys_slist_find_and_remove+0xa>
   30a5e:	4770      	bx	lr
   30a60:	4288      	cmp	r0, r1
   30a62:	d110      	bne.n	30a86 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   30a64:	6808      	ldr	r0, [r1, #0]
   30a66:	b942      	cbnz	r2, 30a7a <sys_slist_find_and_remove+0x24>
   30a68:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   30a6a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   30a6c:	4291      	cmp	r1, r2
   30a6e:	d100      	bne.n	30a72 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   30a70:	6058      	str	r0, [r3, #4]
	parent->next = child;
   30a72:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30a74:	2001      	movs	r0, #1
	parent->next = child;
   30a76:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   30a78:	4770      	bx	lr
	parent->next = child;
   30a7a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   30a7c:	6858      	ldr	r0, [r3, #4]
   30a7e:	4281      	cmp	r1, r0
	list->tail = node;
   30a80:	bf08      	it	eq
   30a82:	605a      	streq	r2, [r3, #4]
}
   30a84:	e7f5      	b.n	30a72 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   30a86:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30a88:	6800      	ldr	r0, [r0, #0]
   30a8a:	e7e7      	b.n	30a5c <sys_slist_find_and_remove+0x6>

00030a8c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   30a8c:	4603      	mov	r3, r0
	size_t bytes = 0;
   30a8e:	2000      	movs	r0, #0

	while (buf) {
   30a90:	b903      	cbnz	r3, 30a94 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   30a92:	4770      	bx	lr
		bytes += buf->len;
   30a94:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   30a96:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   30a98:	4410      	add	r0, r2
		buf = buf->frags;
   30a9a:	e7f9      	b.n	30a90 <net_buf_frags_len+0x4>

00030a9c <att_sent>:
	if (chan->ops->sent) {
   30a9c:	684b      	ldr	r3, [r1, #4]
{
   30a9e:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   30aa0:	695b      	ldr	r3, [r3, #20]
   30aa2:	b103      	cbz	r3, 30aa6 <att_sent+0xa>
		chan->ops->sent(chan);
   30aa4:	4718      	bx	r3
}
   30aa6:	4770      	bx	lr

00030aa8 <attr_read_type_cb>:
{
   30aa8:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   30aaa:	68d4      	ldr	r4, [r2, #12]
   30aac:	3102      	adds	r1, #2
   30aae:	7823      	ldrb	r3, [r4, #0]
   30ab0:	b913      	cbnz	r3, 30ab8 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   30ab2:	7021      	strb	r1, [r4, #0]
	return true;
   30ab4:	2001      	movs	r0, #1
   30ab6:	e006      	b.n	30ac6 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   30ab8:	428b      	cmp	r3, r1
   30aba:	d0fb      	beq.n	30ab4 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   30abc:	8983      	ldrh	r3, [r0, #12]
   30abe:	3b02      	subs	r3, #2
   30ac0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   30ac2:	2000      	movs	r0, #0
   30ac4:	6110      	str	r0, [r2, #16]
}
   30ac6:	bd10      	pop	{r4, pc}

00030ac8 <att_prepare_write_req>:
}
   30ac8:	2006      	movs	r0, #6
   30aca:	4770      	bx	lr

00030acc <att_op_get_type>:
	switch (op) {
   30acc:	281e      	cmp	r0, #30
   30ace:	d816      	bhi.n	30afe <att_op_get_type+0x32>
   30ad0:	b308      	cbz	r0, 30b16 <att_op_get_type+0x4a>
   30ad2:	1e43      	subs	r3, r0, #1
   30ad4:	2b1d      	cmp	r3, #29
   30ad6:	d81e      	bhi.n	30b16 <att_op_get_type+0x4a>
   30ad8:	e8df f003 	tbb	[pc, r3]
   30adc:	23172317 	.word	0x23172317
   30ae0:	23172317 	.word	0x23172317
   30ae4:	23172317 	.word	0x23172317
   30ae8:	23172317 	.word	0x23172317
   30aec:	1d172317 	.word	0x1d172317
   30af0:	2317231d 	.word	0x2317231d
   30af4:	1d191d17 	.word	0x1d191d17
   30af8:	0f1b      	.short	0x0f1b
   30afa:	2004      	movs	r0, #4
   30afc:	4770      	bx	lr
   30afe:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   30b02:	2b52      	cmp	r3, #82	; 0x52
   30b04:	d107      	bne.n	30b16 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   30b06:	2000      	movs	r0, #0
}
   30b08:	4770      	bx	lr
		return ATT_RESPONSE;
   30b0a:	2002      	movs	r0, #2
   30b0c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   30b0e:	2003      	movs	r0, #3
   30b10:	4770      	bx	lr
		return ATT_INDICATION;
   30b12:	2005      	movs	r0, #5
   30b14:	4770      	bx	lr
		return ATT_COMMAND;
   30b16:	f010 0f40 	tst.w	r0, #64	; 0x40
   30b1a:	bf0c      	ite	eq
   30b1c:	2006      	moveq	r0, #6
   30b1e:	2000      	movne	r0, #0
   30b20:	4770      	bx	lr
		return ATT_REQUEST;
   30b22:	2001      	movs	r0, #1
   30b24:	4770      	bx	lr

00030b26 <att_notify_mult>:
{
   30b26:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   30b28:	6803      	ldr	r3, [r0, #0]
   30b2a:	898a      	ldrh	r2, [r1, #12]
   30b2c:	6818      	ldr	r0, [r3, #0]
   30b2e:	6889      	ldr	r1, [r1, #8]
   30b30:	f7eb fe44 	bl	1c7bc <bt_gatt_mult_notification>
}
   30b34:	2000      	movs	r0, #0
   30b36:	bd08      	pop	{r3, pc}

00030b38 <att_notify>:
{
   30b38:	b538      	push	{r3, r4, r5, lr}
   30b3a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   30b3c:	f101 0008 	add.w	r0, r1, #8
   30b40:	460c      	mov	r4, r1
   30b42:	f000 fdae 	bl	316a2 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   30b46:	682d      	ldr	r5, [r5, #0]
   30b48:	4601      	mov	r1, r0
   30b4a:	89a3      	ldrh	r3, [r4, #12]
   30b4c:	6828      	ldr	r0, [r5, #0]
   30b4e:	68a2      	ldr	r2, [r4, #8]
   30b50:	f000 fd17 	bl	31582 <bt_gatt_notification>
}
   30b54:	2000      	movs	r0, #0
   30b56:	bd38      	pop	{r3, r4, r5, pc}

00030b58 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   30b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   30b5a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   30b5e:	2300      	movs	r3, #0
   30b60:	461a      	mov	r2, r3
   30b62:	9300      	str	r3, [sp, #0]
   30b64:	f7eb fa2a 	bl	1bfbc <bt_gatt_foreach_attr_type>
				  user_data);
}
   30b68:	b005      	add	sp, #20
   30b6a:	f85d fb04 	ldr.w	pc, [sp], #4

00030b6e <att_chan_read>:
{
   30b6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b72:	4680      	mov	r8, r0
   30b74:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   30b76:	4610      	mov	r0, r2
{
   30b78:	4699      	mov	r9, r3
   30b7a:	468b      	mov	fp, r1
   30b7c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   30b7e:	f7ff ff85 	bl	30a8c <net_buf_frags_len>
   30b82:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   30b86:	4283      	cmp	r3, r0
   30b88:	d97a      	bls.n	30c80 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   30b8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   30b8e:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   30b90:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   30b92:	f7ec f953 	bl	1ce3c <net_buf_frag_last>
	size_t len, total = 0;
   30b96:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   30b9a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   30b9c:	4630      	mov	r0, r6
   30b9e:	f7ff ff75 	bl	30a8c <net_buf_frags_len>
   30ba2:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   30ba6:	f105 0708 	add.w	r7, r5, #8
   30baa:	1a24      	subs	r4, r4, r0
   30bac:	4638      	mov	r0, r7
   30bae:	f000 fd84 	bl	316ba <net_buf_simple_tailroom>
   30bb2:	4284      	cmp	r4, r0
   30bb4:	d211      	bcs.n	30bda <att_chan_read+0x6c>
   30bb6:	4630      	mov	r0, r6
   30bb8:	f7ff ff68 	bl	30a8c <net_buf_frags_len>
   30bbc:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   30bc0:	1a24      	subs	r4, r4, r0
		if (!len) {
   30bc2:	bb34      	cbnz	r4, 30c12 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   30bc4:	79b0      	ldrb	r0, [r6, #6]
   30bc6:	f7eb ff39 	bl	1ca3c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   30bca:	2200      	movs	r2, #0
   30bcc:	2300      	movs	r3, #0
   30bce:	f000 fd55 	bl	3167c <net_buf_alloc_fixed>
			if (!frag) {
   30bd2:	4605      	mov	r5, r0
   30bd4:	b930      	cbnz	r0, 30be4 <att_chan_read+0x76>
	return total;
   30bd6:	4657      	mov	r7, sl
   30bd8:	e02c      	b.n	30c34 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   30bda:	4638      	mov	r0, r7
   30bdc:	f000 fd6d 	bl	316ba <net_buf_simple_tailroom>
   30be0:	4604      	mov	r4, r0
   30be2:	e7ee      	b.n	30bc2 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   30be4:	4601      	mov	r1, r0
   30be6:	4630      	mov	r0, r6
   30be8:	f7ec f970 	bl	1cecc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   30bec:	4630      	mov	r0, r6
   30bee:	f7ff ff4d 	bl	30a8c <net_buf_frags_len>
   30bf2:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   30bf6:	f105 0708 	add.w	r7, r5, #8
   30bfa:	1a24      	subs	r4, r4, r0
   30bfc:	4638      	mov	r0, r7
   30bfe:	f000 fd5c 	bl	316ba <net_buf_simple_tailroom>
   30c02:	4284      	cmp	r4, r0
   30c04:	d21a      	bcs.n	30c3c <att_chan_read+0xce>
   30c06:	4630      	mov	r0, r6
   30c08:	f7ff ff40 	bl	30a8c <net_buf_frags_len>
   30c0c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   30c10:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   30c12:	68a9      	ldr	r1, [r5, #8]
   30c14:	89aa      	ldrh	r2, [r5, #12]
   30c16:	f8db 7004 	ldr.w	r7, [fp, #4]
   30c1a:	440a      	add	r2, r1
   30c1c:	9803      	ldr	r0, [sp, #12]
   30c1e:	4659      	mov	r1, fp
   30c20:	f8cd 9000 	str.w	r9, [sp]
   30c24:	b2a3      	uxth	r3, r4
   30c26:	47b8      	blx	r7
		if (read < 0) {
   30c28:	1e07      	subs	r7, r0, #0
   30c2a:	da0c      	bge.n	30c46 <att_chan_read+0xd8>
				return total;
   30c2c:	f1ba 0f00 	cmp.w	sl, #0
   30c30:	bf18      	it	ne
   30c32:	4657      	movne	r7, sl
}
   30c34:	4638      	mov	r0, r7
   30c36:	b005      	add	sp, #20
   30c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30c3c:	4638      	mov	r0, r7
   30c3e:	f000 fd3c 	bl	316ba <net_buf_simple_tailroom>
   30c42:	4604      	mov	r4, r0
   30c44:	e7e5      	b.n	30c12 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   30c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   30c48:	b993      	cbnz	r3, 30c70 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   30c4a:	4639      	mov	r1, r7
   30c4c:	f105 0008 	add.w	r0, r5, #8
   30c50:	f7ec f9c4 	bl	1cfdc <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   30c54:	4630      	mov	r0, r6
   30c56:	f7ff ff19 	bl	30a8c <net_buf_frags_len>
   30c5a:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   30c5e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   30c60:	4283      	cmp	r3, r0
		total += read;
   30c62:	44ba      	add	sl, r7
		offset += read;
   30c64:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   30c68:	d9b5      	bls.n	30bd6 <att_chan_read+0x68>
   30c6a:	42a7      	cmp	r7, r4
   30c6c:	d096      	beq.n	30b9c <att_chan_read+0x2e>
   30c6e:	e7b2      	b.n	30bd6 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   30c70:	4639      	mov	r1, r7
   30c72:	4628      	mov	r0, r5
   30c74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   30c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   30c78:	4798      	blx	r3
   30c7a:	2800      	cmp	r0, #0
   30c7c:	d1e5      	bne.n	30c4a <att_chan_read+0xdc>
   30c7e:	e7aa      	b.n	30bd6 <att_chan_read+0x68>
		return 0;
   30c80:	2700      	movs	r7, #0
   30c82:	e7d7      	b.n	30c34 <att_chan_read+0xc6>

00030c84 <attr_read_group_cb>:
	if (!data->rsp->len) {
   30c84:	68d0      	ldr	r0, [r2, #12]
   30c86:	3104      	adds	r1, #4
   30c88:	7803      	ldrb	r3, [r0, #0]
   30c8a:	b913      	cbnz	r3, 30c92 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   30c8c:	7001      	strb	r1, [r0, #0]
	return true;
   30c8e:	2001      	movs	r0, #1
}
   30c90:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   30c92:	428b      	cmp	r3, r1
   30c94:	d0fb      	beq.n	30c8e <attr_read_group_cb+0xa>
		data->group = NULL;
   30c96:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   30c98:	6891      	ldr	r1, [r2, #8]
   30c9a:	898b      	ldrh	r3, [r1, #12]
   30c9c:	3b04      	subs	r3, #4
   30c9e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   30ca0:	6110      	str	r0, [r2, #16]
		return false;
   30ca2:	4770      	bx	lr

00030ca4 <chan_req_send>:
{
   30ca4:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   30ca6:	688e      	ldr	r6, [r1, #8]
{
   30ca8:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   30caa:	4630      	mov	r0, r6
{
   30cac:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   30cae:	f7ff feed 	bl	30a8c <net_buf_frags_len>
   30cb2:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   30cb6:	4283      	cmp	r3, r0
   30cb8:	d30a      	bcc.n	30cd0 <chan_req_send+0x2c>
	req->buf = NULL;
   30cba:	2200      	movs	r2, #0
	chan->req = req;
   30cbc:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   30cc0:	4628      	mov	r0, r5
	req->buf = NULL;
   30cc2:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   30cc4:	4631      	mov	r1, r6
   30cc6:	f7e9 ff49 	bl	1ab5c <chan_send>
	if (err) {
   30cca:	b100      	cbz	r0, 30cce <chan_req_send+0x2a>
		req->buf = buf;
   30ccc:	60a6      	str	r6, [r4, #8]
}
   30cce:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   30cd0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   30cd4:	e7fb      	b.n	30cce <chan_req_send+0x2a>

00030cd6 <process_queue>:
{
   30cd6:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   30cd8:	2200      	movs	r2, #0
{
   30cda:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   30cdc:	2300      	movs	r3, #0
   30cde:	4608      	mov	r0, r1
{
   30ce0:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   30ce2:	f7eb ffb9 	bl	1cc58 <net_buf_get>
	if (buf) {
   30ce6:	4605      	mov	r5, r0
   30ce8:	b160      	cbz	r0, 30d04 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   30cea:	4601      	mov	r1, r0
   30cec:	2200      	movs	r2, #0
   30cee:	4620      	mov	r0, r4
   30cf0:	f7e9 ff34 	bl	1ab5c <chan_send>
		if (err) {
   30cf4:	4604      	mov	r4, r0
   30cf6:	b118      	cbz	r0, 30d00 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   30cf8:	4629      	mov	r1, r5
   30cfa:	4630      	mov	r0, r6
   30cfc:	f004 fac8 	bl	35290 <k_queue_prepend>
}
   30d00:	4620      	mov	r0, r4
   30d02:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   30d04:	f06f 0401 	mvn.w	r4, #1
   30d08:	e7fa      	b.n	30d00 <process_queue+0x2a>

00030d0a <bt_att_chan_send_rsp>:
{
   30d0a:	b538      	push	{r3, r4, r5, lr}
   30d0c:	4604      	mov	r4, r0
   30d0e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   30d10:	f7e9 ff24 	bl	1ab5c <chan_send>
	if (err) {
   30d14:	b130      	cbz	r0, 30d24 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   30d16:	4629      	mov	r1, r5
   30d18:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   30d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   30d20:	f7eb bff8 	b.w	1cd14 <net_buf_put>
}
   30d24:	bd38      	pop	{r3, r4, r5, pc}

00030d26 <chan_req_sent>:
	if (chan->req) {
   30d26:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   30d2a:	b133      	cbz	r3, 30d3a <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   30d2c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   30d30:	2300      	movs	r3, #0
   30d32:	f500 7090 	add.w	r0, r0, #288	; 0x120
   30d36:	f7f9 bb0f 	b.w	2a358 <k_work_reschedule>
}
   30d3a:	4770      	bx	lr

00030d3c <find_info_cb>:
{
   30d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   30d3e:	6893      	ldr	r3, [r2, #8]
{
   30d40:	4605      	mov	r5, r0
   30d42:	460f      	mov	r7, r1
   30d44:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   30d46:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   30d48:	b963      	cbnz	r3, 30d64 <find_info_cb+0x28>
   30d4a:	6850      	ldr	r0, [r2, #4]
   30d4c:	2101      	movs	r1, #1
   30d4e:	3008      	adds	r0, #8
   30d50:	f7ec f944 	bl	1cfdc <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   30d54:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   30d56:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   30d58:	781b      	ldrb	r3, [r3, #0]
   30d5a:	2b00      	cmp	r3, #0
   30d5c:	bf0c      	ite	eq
   30d5e:	2301      	moveq	r3, #1
   30d60:	2302      	movne	r3, #2
   30d62:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   30d64:	68a3      	ldr	r3, [r4, #8]
   30d66:	781b      	ldrb	r3, [r3, #0]
   30d68:	2b01      	cmp	r3, #1
   30d6a:	d003      	beq.n	30d74 <find_info_cb+0x38>
   30d6c:	2b02      	cmp	r3, #2
   30d6e:	d019      	beq.n	30da4 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   30d70:	2000      	movs	r0, #0
   30d72:	e016      	b.n	30da2 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   30d74:	682b      	ldr	r3, [r5, #0]
   30d76:	781b      	ldrb	r3, [r3, #0]
   30d78:	2b00      	cmp	r3, #0
   30d7a:	d1f9      	bne.n	30d70 <find_info_cb+0x34>
   30d7c:	6860      	ldr	r0, [r4, #4]
   30d7e:	2104      	movs	r1, #4
   30d80:	3008      	adds	r0, #8
   30d82:	f7ec f92b 	bl	1cfdc <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   30d86:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   30d88:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   30d8a:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   30d8c:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   30d8e:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   30d90:	6863      	ldr	r3, [r4, #4]
   30d92:	f8b6 0086 	ldrh.w	r0, [r6, #134]	; 0x86
   30d96:	899b      	ldrh	r3, [r3, #12]
   30d98:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   30d9a:	2804      	cmp	r0, #4
   30d9c:	bf94      	ite	ls
   30d9e:	2000      	movls	r0, #0
   30da0:	2001      	movhi	r0, #1
}
   30da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   30da4:	682b      	ldr	r3, [r5, #0]
   30da6:	781b      	ldrb	r3, [r3, #0]
   30da8:	2b02      	cmp	r3, #2
   30daa:	d1e1      	bne.n	30d70 <find_info_cb+0x34>
   30dac:	6860      	ldr	r0, [r4, #4]
   30dae:	2112      	movs	r1, #18
   30db0:	3008      	adds	r0, #8
   30db2:	f7ec f913 	bl	1cfdc <net_buf_simple_add>
   30db6:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30db8:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   30dba:	60e0      	str	r0, [r4, #12]
   30dbc:	1c51      	adds	r1, r2, #1
		data->info128->handle = sys_cpu_to_le16(handle);
   30dbe:	f823 7b02 	strh.w	r7, [r3], #2
   30dc2:	3211      	adds	r2, #17
   30dc4:	f851 0b04 	ldr.w	r0, [r1], #4
   30dc8:	4291      	cmp	r1, r2
   30dca:	f843 0b04 	str.w	r0, [r3], #4
   30dce:	d1f9      	bne.n	30dc4 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   30dd0:	6863      	ldr	r3, [r4, #4]
   30dd2:	f8b6 0086 	ldrh.w	r0, [r6, #134]	; 0x86
   30dd6:	899b      	ldrh	r3, [r3, #12]
   30dd8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   30dda:	2812      	cmp	r0, #18
   30ddc:	e7de      	b.n	30d9c <find_info_cb+0x60>

00030dde <att_exec_write_req>:
   30dde:	2006      	movs	r0, #6
   30de0:	4770      	bx	lr

00030de2 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   30de2:	30f8      	adds	r0, #248	; 0xf8
   30de4:	e8d0 3fef 	ldaex	r3, [r0]
   30de8:	f023 0301 	bic.w	r3, r3, #1
   30dec:	e8c0 3fe2 	stlex	r2, r3, [r0]
   30df0:	2a00      	cmp	r2, #0
   30df2:	d1f7      	bne.n	30de4 <chan_rsp_sent+0x2>
}
   30df4:	4770      	bx	lr

00030df6 <chan_cfm_sent>:
   30df6:	30f8      	adds	r0, #248	; 0xf8
   30df8:	e8d0 3fef 	ldaex	r3, [r0]
   30dfc:	f023 0302 	bic.w	r3, r3, #2
   30e00:	e8c0 3fe2 	stlex	r2, r3, [r0]
   30e04:	2a00      	cmp	r2, #0
   30e06:	d1f7      	bne.n	30df8 <chan_cfm_sent+0x2>
}
   30e08:	4770      	bx	lr

00030e0a <bt_att_status>:
{
   30e0a:	b538      	push	{r3, r4, r5, lr}
   30e0c:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30e0e:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   30e12:	07db      	lsls	r3, r3, #31
   30e14:	d519      	bpl.n	30e4a <bt_att_status+0x40>
	if (!chan->att) {
   30e16:	f850 0c08 	ldr.w	r0, [r0, #-8]
   30e1a:	b1b0      	cbz	r0, 30e4a <bt_att_status+0x40>
	if (chan->req) {
   30e1c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   30e20:	b99b      	cbnz	r3, 30e4a <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   30e22:	3004      	adds	r0, #4
   30e24:	f7ff fe0d 	bl	30a42 <sys_slist_get>
	if (!node) {
   30e28:	4604      	mov	r4, r0
   30e2a:	b170      	cbz	r0, 30e4a <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   30e2c:	4601      	mov	r1, r0
   30e2e:	f1a5 0008 	sub.w	r0, r5, #8
   30e32:	f7e9 ff01 	bl	1ac38 <bt_att_chan_req_send>
   30e36:	2800      	cmp	r0, #0
   30e38:	da07      	bge.n	30e4a <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   30e3a:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   30e3e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   30e40:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   30e42:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   30e44:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   30e46:	b902      	cbnz	r2, 30e4a <bt_att_status+0x40>
	list->tail = node;
   30e48:	609c      	str	r4, [r3, #8]
}
   30e4a:	bd38      	pop	{r3, r4, r5, pc}

00030e4c <att_req_send_process>:
{
   30e4c:	b570      	push	{r4, r5, r6, lr}
   30e4e:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   30e50:	3004      	adds	r0, #4
   30e52:	f7ff fdf6 	bl	30a42 <sys_slist_get>
	if (!node) {
   30e56:	4606      	mov	r6, r0
   30e58:	b1c0      	cbz	r0, 30e8c <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30e5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   30e5c:	b153      	cbz	r3, 30e74 <att_req_send_process+0x28>
   30e5e:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   30e62:	d007      	beq.n	30e74 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   30e64:	681c      	ldr	r4, [r3, #0]
   30e66:	b10c      	cbz	r4, 30e6c <att_req_send_process+0x20>
   30e68:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   30e6c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   30e70:	b13b      	cbz	r3, 30e82 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30e72:	b964      	cbnz	r4, 30e8e <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   30e74:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   30e76:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   30e78:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   30e7a:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   30e7c:	b933      	cbnz	r3, 30e8c <att_req_send_process+0x40>
	list->tail = node;
   30e7e:	60ae      	str	r6, [r5, #8]
}
   30e80:	e004      	b.n	30e8c <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   30e82:	4631      	mov	r1, r6
   30e84:	f7e9 fed8 	bl	1ac38 <bt_att_chan_req_send>
   30e88:	2800      	cmp	r0, #0
   30e8a:	dbf2      	blt.n	30e72 <att_req_send_process+0x26>
}
   30e8c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   30e8e:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   30e92:	d004      	beq.n	30e9e <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   30e94:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30e98:	b10b      	cbz	r3, 30e9e <att_req_send_process+0x52>
   30e9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   30e9e:	4620      	mov	r0, r4
   30ea0:	461c      	mov	r4, r3
   30ea2:	e7e3      	b.n	30e6c <att_req_send_process+0x20>

00030ea4 <write_cb>:
{
   30ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30ea6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   30ea8:	4601      	mov	r1, r0
{
   30eaa:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   30eac:	222a      	movs	r2, #42	; 0x2a
   30eae:	6820      	ldr	r0, [r4, #0]
   30eb0:	f000 fb44 	bl	3153c <bt_gatt_check_perm>
   30eb4:	4605      	mov	r5, r0
   30eb6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   30eb8:	bb00      	cbnz	r0, 30efc <write_cb+0x58>
	if (!data->req) {
   30eba:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   30ebc:	4631      	mov	r1, r6
	if (!data->req) {
   30ebe:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   30ec0:	bf14      	ite	ne
   30ec2:	2300      	movne	r3, #0
   30ec4:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   30ec6:	9301      	str	r3, [sp, #4]
   30ec8:	8a63      	ldrh	r3, [r4, #18]
   30eca:	68b7      	ldr	r7, [r6, #8]
   30ecc:	9300      	str	r3, [sp, #0]
   30ece:	68e2      	ldr	r2, [r4, #12]
   30ed0:	8a23      	ldrh	r3, [r4, #16]
   30ed2:	6820      	ldr	r0, [r4, #0]
   30ed4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   30ed6:	1e03      	subs	r3, r0, #0
   30ed8:	db05      	blt.n	30ee6 <write_cb+0x42>
   30eda:	8a22      	ldrh	r2, [r4, #16]
   30edc:	4293      	cmp	r3, r2
   30ede:	d10b      	bne.n	30ef8 <write_cb+0x54>
	data->err = 0U;
   30ee0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   30ee2:	2501      	movs	r5, #1
   30ee4:	e005      	b.n	30ef2 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   30ee6:	f113 0fff 	cmn.w	r3, #255	; 0xff
   30eea:	d305      	bcc.n	30ef8 <write_cb+0x54>
		return -err;
   30eec:	425b      	negs	r3, r3
   30eee:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   30ef0:	7523      	strb	r3, [r4, #20]
}
   30ef2:	4628      	mov	r0, r5
   30ef4:	b003      	add	sp, #12
   30ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   30ef8:	230e      	movs	r3, #14
   30efa:	e7f9      	b.n	30ef0 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   30efc:	2500      	movs	r5, #0
   30efe:	e7f8      	b.n	30ef2 <write_cb+0x4e>

00030f00 <bt_att_sent>:
{
   30f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   30f02:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
   30f06:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   30f08:	f850 4c08 	ldr.w	r4, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   30f0c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   30f10:	b10b      	cbz	r3, 30f16 <bt_att_sent+0x16>
		chan->sent(chan);
   30f12:	4638      	mov	r0, r7
   30f14:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   30f16:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   30f1a:	e8d3 2fef 	ldaex	r2, [r3]
   30f1e:	f022 0210 	bic.w	r2, r2, #16
   30f22:	e8c3 2fe1 	stlex	r1, r2, [r3]
   30f26:	2900      	cmp	r1, #0
   30f28:	d1f7      	bne.n	30f1a <bt_att_sent+0x1a>
	if (!att) {
   30f2a:	b30c      	cbz	r4, 30f70 <bt_att_sent+0x70>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   30f2c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   30f30:	b98b      	cbnz	r3, 30f56 <bt_att_sent+0x56>
   30f32:	6863      	ldr	r3, [r4, #4]
   30f34:	b17b      	cbz	r3, 30f56 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   30f36:	1d20      	adds	r0, r4, #4
   30f38:	f7ff fd83 	bl	30a42 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   30f3c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   30f3e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   30f40:	4638      	mov	r0, r7
   30f42:	f7ff feaf 	bl	30ca4 <chan_req_send>
   30f46:	2800      	cmp	r0, #0
   30f48:	da12      	bge.n	30f70 <bt_att_sent+0x70>
Z_GENLIST_PREPEND(slist, snode)
   30f4a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   30f4c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   30f4e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   30f50:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   30f52:	b903      	cbnz	r3, 30f56 <bt_att_sent+0x56>
	list->tail = node;
   30f54:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   30f56:	4638      	mov	r0, r7
   30f58:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   30f5c:	f7ff febb 	bl	30cd6 <process_queue>
	if (!err) {
   30f60:	b130      	cbz	r0, 30f70 <bt_att_sent+0x70>
	(void)process_queue(chan, &att->tx_queue);
   30f62:	4638      	mov	r0, r7
   30f64:	f104 010c 	add.w	r1, r4, #12
}
   30f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   30f6c:	f7ff beb3 	b.w	30cd6 <process_queue>
}
   30f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030f72 <read_cb>:
{
   30f72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30f76:	4606      	mov	r6, r0
	data->err = 0x00;
   30f78:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   30f7a:	f8d2 8000 	ldr.w	r8, [r2]
{
   30f7e:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   30f80:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   30f84:	4631      	mov	r1, r6
	data->err = 0x00;
   30f86:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   30f88:	2215      	movs	r2, #21
   30f8a:	f000 fad7 	bl	3153c <bt_gatt_check_perm>
   30f8e:	4604      	mov	r4, r0
   30f90:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   30f92:	b9a0      	cbnz	r0, 30fbe <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   30f94:	e9cd 0000 	strd	r0, r0, [sp]
   30f98:	88ab      	ldrh	r3, [r5, #4]
   30f9a:	4631      	mov	r1, r6
   30f9c:	4640      	mov	r0, r8
   30f9e:	68aa      	ldr	r2, [r5, #8]
   30fa0:	f7ff fde5 	bl	30b6e <att_chan_read>
	if (ret < 0) {
   30fa4:	1e03      	subs	r3, r0, #0
   30fa6:	da0c      	bge.n	30fc2 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   30fa8:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   30fac:	bf32      	itee	cc
   30fae:	230e      	movcc	r3, #14
		return -err;
   30fb0:	425b      	negcs	r3, r3
   30fb2:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   30fb4:	732b      	strb	r3, [r5, #12]
}
   30fb6:	4620      	mov	r0, r4
   30fb8:	b002      	add	sp, #8
   30fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   30fbe:	463c      	mov	r4, r7
   30fc0:	e7f9      	b.n	30fb6 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   30fc2:	2401      	movs	r4, #1
   30fc4:	e7f7      	b.n	30fb6 <read_cb+0x44>

00030fc6 <att_read_blob_req>:
{
   30fc6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   30fc8:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   30fca:	210c      	movs	r1, #12
   30fcc:	8813      	ldrh	r3, [r2, #0]
   30fce:	8852      	ldrh	r2, [r2, #2]
   30fd0:	9200      	str	r2, [sp, #0]
   30fd2:	220d      	movs	r2, #13
   30fd4:	f7ea fa2c 	bl	1b430 <att_read_rsp>
}
   30fd8:	b003      	add	sp, #12
   30fda:	f85d fb04 	ldr.w	pc, [sp], #4

00030fde <att_read_req>:
{
   30fde:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   30fe0:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   30fe2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   30fe4:	210a      	movs	r1, #10
   30fe6:	881b      	ldrh	r3, [r3, #0]
   30fe8:	9200      	str	r2, [sp, #0]
   30fea:	220b      	movs	r2, #11
   30fec:	f7ea fa20 	bl	1b430 <att_read_rsp>
}
   30ff0:	b003      	add	sp, #12
   30ff2:	f85d fb04 	ldr.w	pc, [sp], #4

00030ff6 <bt_att_init>:
	bt_gatt_init();
   30ff6:	f7ea bf35 	b.w	1be64 <bt_gatt_init>

00030ffa <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   30ffa:	898a      	ldrh	r2, [r1, #12]
   30ffc:	2300      	movs	r3, #0
   30ffe:	6889      	ldr	r1, [r1, #8]
   31000:	f7ea bbc6 	b.w	1b790 <att_handle_rsp>

00031004 <att_handle_find_type_rsp>:
   31004:	f7ff bff9 	b.w	30ffa <att_handle_find_info_rsp>

00031008 <att_handle_read_type_rsp>:
   31008:	f7ff bff7 	b.w	30ffa <att_handle_find_info_rsp>

0003100c <att_handle_read_rsp>:
   3100c:	f7ff bff5 	b.w	30ffa <att_handle_find_info_rsp>

00031010 <att_handle_read_blob_rsp>:
   31010:	f7ff bff3 	b.w	30ffa <att_handle_find_info_rsp>

00031014 <att_handle_read_mult_rsp>:
   31014:	f7ff bff1 	b.w	30ffa <att_handle_find_info_rsp>

00031018 <att_handle_read_group_rsp>:
   31018:	f7ff bfef 	b.w	30ffa <att_handle_find_info_rsp>

0003101c <att_handle_write_rsp>:
   3101c:	f7ff bfed 	b.w	30ffa <att_handle_find_info_rsp>

00031020 <att_handle_prepare_write_rsp>:
   31020:	f7ff bfeb 	b.w	30ffa <att_handle_find_info_rsp>

00031024 <att_handle_exec_write_rsp>:
   31024:	f7ff bfe9 	b.w	30ffa <att_handle_find_info_rsp>

00031028 <att_confirm>:
   31028:	f7ff bfe7 	b.w	30ffa <att_handle_find_info_rsp>

0003102c <att_mtu_rsp>:
{
   3102c:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   3102e:	6889      	ldr	r1, [r1, #8]
{
   31030:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   31032:	880c      	ldrh	r4, [r1, #0]
{
   31034:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   31036:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   31038:	bf89      	itett	hi
   3103a:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   3103c:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   3103e:	f8a3 407a 	strhhi.w	r4, [r3, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   31042:	f8a3 4086 	strhhi.w	r4, [r3, #134]	; 0x86
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   31046:	bf99      	ittee	ls
   31048:	2304      	movls	r3, #4
   3104a:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   3104c:	2300      	movhi	r3, #0
   3104e:	8992      	ldrhhi	r2, [r2, #12]
}
   31050:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   31052:	f7ea bb9d 	b.w	1b790 <att_handle_rsp>

00031056 <gatt_ccc_changed>:
{
   31056:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   31058:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   3105a:	895a      	ldrh	r2, [r3, #10]
   3105c:	428a      	cmp	r2, r1
   3105e:	d003      	beq.n	31068 <gatt_ccc_changed+0x12>
		ccc->value = value;
   31060:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   31062:	68db      	ldr	r3, [r3, #12]
   31064:	b103      	cbz	r3, 31068 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   31066:	4718      	bx	r3
}
   31068:	4770      	bx	lr

0003106a <gatt_indicate_rsp>:
{
   3106a:	b510      	push	{r4, lr}
   3106c:	9c02      	ldr	r4, [sp, #8]
   3106e:	460a      	mov	r2, r1
	if (params->func) {
   31070:	68a3      	ldr	r3, [r4, #8]
   31072:	b10b      	cbz	r3, 31078 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   31074:	4621      	mov	r1, r4
   31076:	4798      	blx	r3
	params->_ref--;
   31078:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   3107a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   3107c:	3b01      	subs	r3, #1
   3107e:	b2db      	uxtb	r3, r3
   31080:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   31082:	b122      	cbz	r2, 3108e <gatt_indicate_rsp+0x24>
   31084:	b91b      	cbnz	r3, 3108e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   31086:	4620      	mov	r0, r4
}
   31088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   3108c:	4710      	bx	r2
}
   3108e:	bd10      	pop	{r4, pc}

00031090 <match_uuid>:
	data->attr = attr;
   31090:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   31092:	8091      	strh	r1, [r2, #4]
}
   31094:	2000      	movs	r0, #0
   31096:	4770      	bx	lr

00031098 <ccc_set_cb>:
}
   31098:	2000      	movs	r0, #0
   3109a:	4770      	bx	lr

0003109c <gen_hash_m>:
{
   3109c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   3109e:	6807      	ldr	r7, [r0, #0]
{
   310a0:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   310a2:	783d      	ldrb	r5, [r7, #0]
{
   310a4:	4614      	mov	r4, r2
   310a6:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   310a8:	b10d      	cbz	r5, 310ae <gen_hash_m+0x12>
	switch (u16->val) {
   310aa:	2501      	movs	r5, #1
   310ac:	e014      	b.n	310d8 <gen_hash_m+0x3c>
   310ae:	887b      	ldrh	r3, [r7, #2]
   310b0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   310b4:	d004      	beq.n	310c0 <gen_hash_m+0x24>
   310b6:	d812      	bhi.n	310de <gen_hash_m+0x42>
   310b8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   310bc:	2b03      	cmp	r3, #3
   310be:	d8f4      	bhi.n	310aa <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   310c0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   310c4:	2202      	movs	r2, #2
   310c6:	4620      	mov	r0, r4
   310c8:	f10d 010e 	add.w	r1, sp, #14
   310cc:	f7fe fe04 	bl	2fcd8 <tc_cmac_update>
   310d0:	b9e0      	cbnz	r0, 3110c <gen_hash_m+0x70>
			state->err = -EINVAL;
   310d2:	f06f 0315 	mvn.w	r3, #21
   310d6:	65a3      	str	r3, [r4, #88]	; 0x58
}
   310d8:	4628      	mov	r0, r5
   310da:	b009      	add	sp, #36	; 0x24
   310dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   310de:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   310e2:	33ff      	adds	r3, #255	; 0xff
   310e4:	b29b      	uxth	r3, r3
   310e6:	2b04      	cmp	r3, #4
   310e8:	d8df      	bhi.n	310aa <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   310ea:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   310ee:	2202      	movs	r2, #2
   310f0:	4620      	mov	r0, r4
   310f2:	f10d 010e 	add.w	r1, sp, #14
   310f6:	f7fe fdef 	bl	2fcd8 <tc_cmac_update>
   310fa:	2800      	cmp	r0, #0
   310fc:	d0e9      	beq.n	310d2 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   310fe:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   31100:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   31102:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   31106:	f10d 010e 	add.w	r1, sp, #14
   3110a:	e017      	b.n	3113c <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   3110c:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3110e:	2202      	movs	r2, #2
   31110:	4620      	mov	r0, r4
   31112:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   31116:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3111a:	f7fe fddd 	bl	2fcd8 <tc_cmac_update>
   3111e:	2800      	cmp	r0, #0
   31120:	d0d7      	beq.n	310d2 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   31122:	2000      	movs	r0, #0
   31124:	2310      	movs	r3, #16
   31126:	4631      	mov	r1, r6
   31128:	eb0d 0203 	add.w	r2, sp, r3
   3112c:	6877      	ldr	r7, [r6, #4]
   3112e:	9000      	str	r0, [sp, #0]
   31130:	47b8      	blx	r7
		if (len < 0) {
   31132:	1e02      	subs	r2, r0, #0
   31134:	da01      	bge.n	3113a <gen_hash_m+0x9e>
			state->err = len;
   31136:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   31138:	e7ce      	b.n	310d8 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   3113a:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3113c:	4620      	mov	r0, r4
   3113e:	f7fe fdcb 	bl	2fcd8 <tc_cmac_update>
   31142:	2800      	cmp	r0, #0
   31144:	d1b1      	bne.n	310aa <gen_hash_m+0xe>
   31146:	e7c4      	b.n	310d2 <gen_hash_m+0x36>

00031148 <bt_addr_le_cmp>:
   31148:	2207      	movs	r2, #7
   3114a:	f004 ba0e 	b.w	3556a <memcmp>

0003114e <find_ccc_cfg>:
{
   3114e:	b513      	push	{r0, r1, r4, lr}
   31150:	1c4a      	adds	r2, r1, #1
   31152:	460c      	mov	r4, r1
		if (conn) {
   31154:	b140      	cbz	r0, 31168 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   31156:	7809      	ldrb	r1, [r1, #0]
   31158:	f7ff fb5c 	bl	30814 <bt_conn_is_peer_addr_le>
   3115c:	2800      	cmp	r0, #0
	return NULL;
   3115e:	bf08      	it	eq
   31160:	2400      	moveq	r4, #0
}
   31162:	4620      	mov	r0, r4
   31164:	b002      	add	sp, #8
   31166:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   31168:	9000      	str	r0, [sp, #0]
   3116a:	4669      	mov	r1, sp
   3116c:	f8cd 0003 	str.w	r0, [sp, #3]
   31170:	4610      	mov	r0, r2
   31172:	f7ff ffe9 	bl	31148 <bt_addr_le_cmp>
   31176:	2800      	cmp	r0, #0
	return NULL;
   31178:	bf18      	it	ne
   3117a:	2400      	movne	r4, #0
   3117c:	e7f1      	b.n	31162 <find_ccc_cfg+0x14>

0003117e <bt_addr_le_copy>:
   3117e:	680b      	ldr	r3, [r1, #0]
   31180:	6003      	str	r3, [r0, #0]
   31182:	888b      	ldrh	r3, [r1, #4]
   31184:	8083      	strh	r3, [r0, #4]
   31186:	798b      	ldrb	r3, [r1, #6]
   31188:	7183      	strb	r3, [r0, #6]
}
   3118a:	4770      	bx	lr

0003118c <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   3118c:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   3118e:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   31190:	3001      	adds	r0, #1
   31192:	4669      	mov	r1, sp
   31194:	9300      	str	r3, [sp, #0]
   31196:	f8cd 3003 	str.w	r3, [sp, #3]
   3119a:	f7ff fff0 	bl	3117e <bt_addr_le_copy>
}
   3119e:	b003      	add	sp, #12
   311a0:	f85d fb04 	ldr.w	pc, [sp], #4

000311a4 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   311a4:	2300      	movs	r3, #0
   311a6:	6003      	str	r3, [r0, #0]
   311a8:	6043      	str	r3, [r0, #4]
   311aa:	6083      	str	r3, [r0, #8]
}
   311ac:	4770      	bx	lr

000311ae <sc_clear>:
{
   311ae:	b538      	push	{r3, r4, r5, lr}
   311b0:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   311b2:	f100 0590 	add.w	r5, r0, #144	; 0x90
   311b6:	4629      	mov	r1, r5
   311b8:	7a00      	ldrb	r0, [r0, #8]
   311ba:	f7ff fabd 	bl	30738 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   311be:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   311c0:	7a20      	ldrb	r0, [r4, #8]
   311c2:	f7ea fca5 	bl	1bb10 <find_sc_cfg>
		if (cfg) {
   311c6:	b118      	cbz	r0, 311d0 <sc_clear+0x22>
}
   311c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   311cc:	f7ff bfea 	b.w	311a4 <clear_sc_cfg>
}
   311d0:	bd38      	pop	{r3, r4, r5, pc}

000311d2 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   311d2:	2a02      	cmp	r2, #2
{
   311d4:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   311d6:	d108      	bne.n	311ea <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   311d8:	2300      	movs	r3, #0
   311da:	f100 0190 	add.w	r1, r0, #144	; 0x90
   311de:	461a      	mov	r2, r3
   311e0:	7a00      	ldrb	r0, [r0, #8]
   311e2:	f7ea fd2d 	bl	1bc40 <sc_save>
}
   311e6:	2002      	movs	r0, #2
   311e8:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   311ea:	f7ff ffe0 	bl	311ae <sc_clear>
   311ee:	e7fa      	b.n	311e6 <sc_ccc_cfg_write+0x14>

000311f0 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   311f0:	b538      	push	{r3, r4, r5, lr}
   311f2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
   311f6:	460c      	mov	r4, r1
	if (offset > value_len) {
   311f8:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   311fa:	4611      	mov	r1, r2
	if (offset > value_len) {
   311fc:	d30a      	bcc.n	31214 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   311fe:	1aad      	subs	r5, r5, r2
   31200:	42a5      	cmp	r5, r4
   31202:	bfa8      	it	ge
   31204:	4625      	movge	r5, r4
   31206:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31208:	462a      	mov	r2, r5
   3120a:	4419      	add	r1, r3
   3120c:	f004 f9bb 	bl	35586 <memcpy>
}
   31210:	4628      	mov	r0, r5
   31212:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   31214:	f06f 0506 	mvn.w	r5, #6
   31218:	e7fa      	b.n	31210 <bt_gatt_attr_read.constprop.0+0x20>

0003121a <bt_gatt_attr_read_ccc>:
{
   3121a:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   3121c:	68c9      	ldr	r1, [r1, #12]
{
   3121e:	b085      	sub	sp, #20
   31220:	4614      	mov	r4, r2
   31222:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   31224:	f7ff ff93 	bl	3114e <find_ccc_cfg>
	if (cfg) {
   31228:	b100      	cbz	r0, 3122c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   3122a:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   3122c:	2302      	movs	r3, #2
   3122e:	f8ad 000e 	strh.w	r0, [sp, #14]
   31232:	9300      	str	r3, [sp, #0]
   31234:	4629      	mov	r1, r5
   31236:	4620      	mov	r0, r4
   31238:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   3123c:	f10d 030e 	add.w	r3, sp, #14
   31240:	f7ff ffd6 	bl	311f0 <bt_gatt_attr_read.constprop.0>
}
   31244:	b005      	add	sp, #20
   31246:	bd30      	pop	{r4, r5, pc}

00031248 <bt_gatt_attr_read_service>:
{
   31248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3124a:	460c      	mov	r4, r1
   3124c:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   3124e:	68e3      	ldr	r3, [r4, #12]
{
   31250:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   31252:	781c      	ldrb	r4, [r3, #0]
{
   31254:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   31258:	b954      	cbnz	r4, 31270 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   3125a:	885b      	ldrh	r3, [r3, #2]
   3125c:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   31260:	2302      	movs	r3, #2
   31262:	9300      	str	r3, [sp, #0]
   31264:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   31268:	f7ff ffc2 	bl	311f0 <bt_gatt_attr_read.constprop.0>
}
   3126c:	b004      	add	sp, #16
   3126e:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   31270:	2410      	movs	r4, #16
   31272:	3301      	adds	r3, #1
   31274:	9400      	str	r4, [sp, #0]
   31276:	e7f7      	b.n	31268 <bt_gatt_attr_read_service+0x20>

00031278 <cf_read>:
{
   31278:	b530      	push	{r4, r5, lr}
   3127a:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   3127c:	2300      	movs	r3, #0
{
   3127e:	b085      	sub	sp, #20
   31280:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   31282:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   31286:	f7ea fc25 	bl	1bad4 <find_cf_cfg>
	if (cfg) {
   3128a:	b110      	cbz	r0, 31292 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   3128c:	7a03      	ldrb	r3, [r0, #8]
   3128e:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   31292:	2301      	movs	r3, #1
   31294:	4629      	mov	r1, r5
   31296:	9300      	str	r3, [sp, #0]
   31298:	4620      	mov	r0, r4
   3129a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   3129e:	ab03      	add	r3, sp, #12
   312a0:	f7ff ffa6 	bl	311f0 <bt_gatt_attr_read.constprop.0>
}
   312a4:	b005      	add	sp, #20
   312a6:	bd30      	pop	{r4, r5, pc}

000312a8 <read_name>:
{
   312a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   312ac:	4614      	mov	r4, r2
   312ae:	461d      	mov	r5, r3
   312b0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   312b4:	f7e8 f902 	bl	194bc <bt_get_name>
   312b8:	4606      	mov	r6, r0
				 strlen(name));
   312ba:	f7e0 f921 	bl	11500 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   312be:	b280      	uxth	r0, r0
   312c0:	9006      	str	r0, [sp, #24]
   312c2:	4633      	mov	r3, r6
   312c4:	463a      	mov	r2, r7
   312c6:	4629      	mov	r1, r5
   312c8:	4620      	mov	r0, r4
}
   312ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   312ce:	f7ff bf8f 	b.w	311f0 <bt_gatt_attr_read.constprop.0>

000312d2 <read_appearance>:
{
   312d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   312d4:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   312d6:	2300      	movs	r3, #0
   312d8:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   312dc:	2302      	movs	r3, #2
{
   312de:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   312e0:	9300      	str	r3, [sp, #0]
   312e2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   312e6:	f10d 030e 	add.w	r3, sp, #14
   312ea:	f7ff ff81 	bl	311f0 <bt_gatt_attr_read.constprop.0>
}
   312ee:	b005      	add	sp, #20
   312f0:	f85d fb04 	ldr.w	pc, [sp], #4

000312f4 <clear_cf_cfg>:
{
   312f4:	b513      	push	{r0, r1, r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   312f6:	2400      	movs	r4, #0
{
   312f8:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   312fa:	4669      	mov	r1, sp
   312fc:	3001      	adds	r0, #1
   312fe:	9400      	str	r4, [sp, #0]
   31300:	f8cd 4003 	str.w	r4, [sp, #3]
   31304:	f7ff ff3b 	bl	3117e <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   31308:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3130a:	320c      	adds	r2, #12
   3130c:	e8d2 3fef 	ldaex	r3, [r2]
   31310:	e8c2 4fe1 	stlex	r1, r4, [r2]
   31314:	2900      	cmp	r1, #0
   31316:	d1f9      	bne.n	3130c <clear_cf_cfg+0x18>
}
   31318:	b002      	add	sp, #8
   3131a:	bd10      	pop	{r4, pc}

0003131c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   3131c:	2301      	movs	r3, #1
   3131e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   31320:	e8d0 2fef 	ldaex	r2, [r0]
   31324:	431a      	orrs	r2, r3
   31326:	e8c0 2fe1 	stlex	r1, r2, [r0]
   3132a:	2900      	cmp	r1, #0
   3132c:	d1f8      	bne.n	31320 <atomic_set_bit+0x4>
}
   3132e:	4770      	bx	lr

00031330 <sc_restore_rsp>:
{
   31330:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   31332:	f7ea fbcf 	bl	1bad4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   31336:	b140      	cbz	r0, 3134a <sc_restore_rsp+0x1a>
   31338:	7a03      	ldrb	r3, [r0, #8]
   3133a:	07db      	lsls	r3, r3, #31
   3133c:	d505      	bpl.n	3134a <sc_restore_rsp+0x1a>
}
   3133e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   31342:	2100      	movs	r1, #0
   31344:	300c      	adds	r0, #12
   31346:	f7ff bfe9 	b.w	3131c <atomic_set_bit>
}
   3134a:	bd08      	pop	{r3, pc}

0003134c <gatt_write_ccc_buf>:
{
   3134c:	b538      	push	{r3, r4, r5, lr}
   3134e:	4614      	mov	r4, r2
   31350:	f100 0508 	add.w	r5, r0, #8
   31354:	2102      	movs	r1, #2
   31356:	4628      	mov	r0, r5
   31358:	f7eb fe40 	bl	1cfdc <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   3135c:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   3135e:	89a1      	ldrh	r1, [r4, #12]
   31360:	8003      	strh	r3, [r0, #0]
   31362:	4628      	mov	r0, r5
   31364:	f000 f9c4 	bl	316f0 <net_buf_simple_add_le16>
   31368:	3410      	adds	r4, #16
   3136a:	e8d4 3fef 	ldaex	r3, [r4]
   3136e:	f043 0304 	orr.w	r3, r3, #4
   31372:	e8c4 3fe2 	stlex	r2, r3, [r4]
   31376:	2a00      	cmp	r2, #0
   31378:	d1f7      	bne.n	3136a <gatt_write_ccc_buf+0x1e>
}
   3137a:	2000      	movs	r0, #0
   3137c:	bd38      	pop	{r3, r4, r5, pc}

0003137e <gatt_sub_remove>:
{
   3137e:	b538      	push	{r3, r4, r5, lr}
   31380:	460c      	mov	r4, r1
	if (params) {
   31382:	4619      	mov	r1, r3
   31384:	b16b      	cbz	r3, 313a2 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   31386:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   3138a:	695b      	ldr	r3, [r3, #20]
   3138c:	b982      	cbnz	r2, 313b0 <gatt_sub_remove+0x32>
   3138e:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   31390:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   31392:	4295      	cmp	r5, r2
   31394:	d100      	bne.n	31398 <gatt_sub_remove+0x1a>
	list->tail = node;
   31396:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   31398:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   3139a:	680d      	ldr	r5, [r1, #0]
   3139c:	461a      	mov	r2, r3
   3139e:	614b      	str	r3, [r1, #20]
   313a0:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   313a2:	68a3      	ldr	r3, [r4, #8]
   313a4:	b953      	cbnz	r3, 313bc <gatt_sub_remove+0x3e>
   313a6:	4620      	mov	r0, r4
}
   313a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   313ac:	f7ff beee 	b.w	3118c <gatt_sub_remove.part.0>
   313b0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   313b2:	68e3      	ldr	r3, [r4, #12]
   313b4:	429d      	cmp	r5, r3
	list->tail = node;
   313b6:	bf08      	it	eq
   313b8:	60e2      	streq	r2, [r4, #12]
}
   313ba:	e7ed      	b.n	31398 <gatt_sub_remove+0x1a>
   313bc:	bd38      	pop	{r3, r4, r5, pc}

000313be <gatt_write_ccc_rsp>:
{
   313be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   313c2:	4606      	mov	r6, r0
   313c4:	460d      	mov	r5, r1
   313c6:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   313c8:	f104 0310 	add.w	r3, r4, #16
   313cc:	e8d3 2fef 	ldaex	r2, [r3]
   313d0:	f022 0204 	bic.w	r2, r2, #4
   313d4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   313d8:	2900      	cmp	r1, #0
   313da:	d1f7      	bne.n	313cc <gatt_write_ccc_rsp+0xe>
	if (err) {
   313dc:	b1dd      	cbz	r5, 31416 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   313de:	f7ea fba7 	bl	1bb30 <gatt_sub_find>
		if (!sub) {
   313e2:	4601      	mov	r1, r0
   313e4:	b300      	cbz	r0, 31428 <gatt_write_ccc_rsp+0x6a>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   313e6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   313e8:	b143      	cbz	r3, 313fc <gatt_write_ccc_rsp+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   313ea:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   313ec:	f104 0014 	add.w	r0, r4, #20
   313f0:	4283      	cmp	r3, r0
   313f2:	d10b      	bne.n	3140c <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   313f4:	4623      	mov	r3, r4
   313f6:	4630      	mov	r0, r6
   313f8:	f7ff ffc1 	bl	3137e <gatt_sub_remove>
	if (params->write) {
   313fc:	6863      	ldr	r3, [r4, #4]
   313fe:	b19b      	cbz	r3, 31428 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   31400:	4629      	mov	r1, r5
   31402:	4630      	mov	r0, r6
}
   31404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   31408:	2200      	movs	r2, #0
   3140a:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   3140c:	2a00      	cmp	r2, #0
   3140e:	d0f5      	beq.n	313fc <gatt_write_ccc_rsp+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   31410:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   31412:	6812      	ldr	r2, [r2, #0]
   31414:	e7ec      	b.n	313f0 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   31416:	89a3      	ldrh	r3, [r4, #12]
   31418:	2b00      	cmp	r3, #0
   3141a:	d1ef      	bne.n	313fc <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   3141c:	462b      	mov	r3, r5
   3141e:	462a      	mov	r2, r5
   31420:	4621      	mov	r1, r4
   31422:	6827      	ldr	r7, [r4, #0]
   31424:	47b8      	blx	r7
   31426:	e7e9      	b.n	313fc <gatt_write_ccc_rsp+0x3e>
}
   31428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003142c <gatt_req_send>:
{
   3142c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31430:	4606      	mov	r6, r0
   31432:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31434:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   31438:	2100      	movs	r1, #0
{
   3143a:	4614      	mov	r4, r2
   3143c:	461f      	mov	r7, r3
   3143e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31442:	f7ea f97d 	bl	1b740 <bt_att_req_alloc>
	if (!req) {
   31446:	4605      	mov	r5, r0
   31448:	b920      	cbnz	r0, 31454 <gatt_req_send+0x28>
		return -ENOMEM;
   3144a:	f06f 040b 	mvn.w	r4, #11
}
   3144e:	4620      	mov	r0, r4
   31450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   31454:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   31458:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   3145a:	464a      	mov	r2, r9
   3145c:	4630      	mov	r0, r6
   3145e:	f89d 1020 	ldrb.w	r1, [sp, #32]
   31462:	f7e9 fee3 	bl	1b22c <bt_att_create_pdu>
	if (!buf) {
   31466:	b918      	cbnz	r0, 31470 <gatt_req_send+0x44>
		bt_att_req_free(req);
   31468:	4628      	mov	r0, r5
   3146a:	f7ea f97f 	bl	1b76c <bt_att_req_free>
   3146e:	e7ec      	b.n	3144a <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   31470:	4622      	mov	r2, r4
   31472:	4649      	mov	r1, r9
	req->buf = buf;
   31474:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   31476:	47b8      	blx	r7
	if (err) {
   31478:	4604      	mov	r4, r0
   3147a:	b118      	cbz	r0, 31484 <gatt_req_send+0x58>
		bt_att_req_free(req);
   3147c:	4628      	mov	r0, r5
   3147e:	f7ea f975 	bl	1b76c <bt_att_req_free>
   31482:	e7e4      	b.n	3144e <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   31484:	4629      	mov	r1, r5
   31486:	4630      	mov	r0, r6
   31488:	f7ea faba 	bl	1ba00 <bt_att_req_send>
	if (err) {
   3148c:	4604      	mov	r4, r0
   3148e:	2800      	cmp	r0, #0
   31490:	d0dd      	beq.n	3144e <gatt_req_send+0x22>
   31492:	e7f3      	b.n	3147c <gatt_req_send+0x50>

00031494 <bt_gatt_attr_value_handle>:
{
   31494:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   31496:	4604      	mov	r4, r0
   31498:	b910      	cbnz	r0, 314a0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   3149a:	2000      	movs	r0, #0
}
   3149c:	b002      	add	sp, #8
   3149e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   314a0:	2300      	movs	r3, #0
   314a2:	f88d 3004 	strb.w	r3, [sp, #4]
   314a6:	f642 0303 	movw	r3, #10243	; 0x2803
   314aa:	6800      	ldr	r0, [r0, #0]
   314ac:	a901      	add	r1, sp, #4
   314ae:	f8ad 3006 	strh.w	r3, [sp, #6]
   314b2:	f7ff f803 	bl	304bc <bt_uuid_cmp>
   314b6:	2800      	cmp	r0, #0
   314b8:	d1ef      	bne.n	3149a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   314ba:	68e3      	ldr	r3, [r4, #12]
   314bc:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   314be:	2800      	cmp	r0, #0
   314c0:	d1ec      	bne.n	3149c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   314c2:	4620      	mov	r0, r4
   314c4:	f7ea fd2e 	bl	1bf24 <bt_gatt_attr_get_handle>
   314c8:	3001      	adds	r0, #1
   314ca:	b280      	uxth	r0, r0
	return handle;
   314cc:	e7e6      	b.n	3149c <bt_gatt_attr_value_handle+0x8>

000314ce <bt_gatt_attr_read_chrc>:
{
   314ce:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   314d0:	68ce      	ldr	r6, [r1, #12]
{
   314d2:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   314d4:	79b3      	ldrb	r3, [r6, #6]
{
   314d6:	b088      	sub	sp, #32
   314d8:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   314da:	f88d 300c 	strb.w	r3, [sp, #12]
{
   314de:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   314e0:	f7ff ffd8 	bl	31494 <bt_gatt_attr_value_handle>
   314e4:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   314e8:	6830      	ldr	r0, [r6, #0]
   314ea:	7803      	ldrb	r3, [r0, #0]
   314ec:	b96b      	cbnz	r3, 3150a <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   314ee:	8843      	ldrh	r3, [r0, #2]
   314f0:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   314f4:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   314f6:	9300      	str	r3, [sp, #0]
   314f8:	4629      	mov	r1, r5
   314fa:	4620      	mov	r0, r4
   314fc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   31500:	ab03      	add	r3, sp, #12
   31502:	f7ff fe75 	bl	311f0 <bt_gatt_attr_read.constprop.0>
}
   31506:	b008      	add	sp, #32
   31508:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   3150a:	1c43      	adds	r3, r0, #1
   3150c:	f10d 020f 	add.w	r2, sp, #15
   31510:	3011      	adds	r0, #17
   31512:	f853 1b04 	ldr.w	r1, [r3], #4
   31516:	4283      	cmp	r3, r0
   31518:	f842 1b04 	str.w	r1, [r2], #4
   3151c:	d1f9      	bne.n	31512 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   3151e:	2313      	movs	r3, #19
   31520:	e7e9      	b.n	314f6 <bt_gatt_attr_read_chrc+0x28>

00031522 <bt_gatt_foreach_attr>:
{
   31522:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   31524:	e9cd 2301 	strd	r2, r3, [sp, #4]
   31528:	2300      	movs	r3, #0
   3152a:	461a      	mov	r2, r3
   3152c:	9300      	str	r3, [sp, #0]
   3152e:	f7ea fd45 	bl	1bfbc <bt_gatt_foreach_attr_type>
}
   31532:	b005      	add	sp, #20
   31534:	f85d fb04 	ldr.w	pc, [sp], #4

00031538 <db_hash_process>:
	db_hash_gen(true);
   31538:	f7ea bdb6 	b.w	1c0a8 <db_hash_gen.isra.0>

0003153c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   3153c:	07d3      	lsls	r3, r2, #31
{
   3153e:	b510      	push	{r4, lr}
   31540:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   31542:	d504      	bpl.n	3154e <bt_gatt_check_perm+0x12>
   31544:	f014 0f15 	tst.w	r4, #21
   31548:	d017      	beq.n	3157a <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   3154a:	684b      	ldr	r3, [r1, #4]
   3154c:	b1ab      	cbz	r3, 3157a <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   3154e:	0793      	lsls	r3, r2, #30
   31550:	d504      	bpl.n	3155c <bt_gatt_check_perm+0x20>
   31552:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   31556:	d012      	beq.n	3157e <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   31558:	688b      	ldr	r3, [r1, #8]
   3155a:	b183      	cbz	r3, 3157e <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   3155c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   3155e:	f014 0f30 	tst.w	r4, #48	; 0x30
   31562:	d104      	bne.n	3156e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   31564:	f014 000c 	ands.w	r0, r4, #12
   31568:	bf18      	it	ne
   3156a:	200f      	movne	r0, #15
}
   3156c:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   3156e:	f7ff f93d 	bl	307ec <bt_conn_get_security>
   31572:	2802      	cmp	r0, #2
   31574:	d8f6      	bhi.n	31564 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   31576:	2005      	movs	r0, #5
   31578:	e7f8      	b.n	3156c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   3157a:	2002      	movs	r0, #2
   3157c:	e7f6      	b.n	3156c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   3157e:	2003      	movs	r0, #3
   31580:	e7f4      	b.n	3156c <bt_gatt_check_perm+0x30>

00031582 <bt_gatt_notification>:
{
   31582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31586:	4607      	mov	r7, r0
   31588:	4688      	mov	r8, r1
   3158a:	4691      	mov	r9, r2
   3158c:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   3158e:	f7ea facf 	bl	1bb30 <gatt_sub_find>
	if (!sub) {
   31592:	b1f8      	cbz	r0, 315d4 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   31594:	6883      	ldr	r3, [r0, #8]
   31596:	b1eb      	cbz	r3, 315d4 <bt_gatt_notification+0x52>
   31598:	f1b3 0614 	subs.w	r6, r3, #20
   3159c:	d01a      	beq.n	315d4 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3159e:	681c      	ldr	r4, [r3, #0]
   315a0:	b104      	cbz	r4, 315a4 <bt_gatt_notification+0x22>
   315a2:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   315a4:	8933      	ldrh	r3, [r6, #8]
   315a6:	4543      	cmp	r3, r8
   315a8:	d10a      	bne.n	315c0 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   315aa:	4653      	mov	r3, sl
   315ac:	464a      	mov	r2, r9
   315ae:	4631      	mov	r1, r6
   315b0:	4638      	mov	r0, r7
   315b2:	6835      	ldr	r5, [r6, #0]
   315b4:	47a8      	blx	r5
   315b6:	b918      	cbnz	r0, 315c0 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   315b8:	4631      	mov	r1, r6
   315ba:	4638      	mov	r0, r7
   315bc:	f7eb f85a 	bl	1c674 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   315c0:	b144      	cbz	r4, 315d4 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   315c2:	f114 0514 	adds.w	r5, r4, #20
   315c6:	d002      	beq.n	315ce <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   315c8:	6965      	ldr	r5, [r4, #20]
   315ca:	b105      	cbz	r5, 315ce <bt_gatt_notification+0x4c>
   315cc:	3d14      	subs	r5, #20
{
   315ce:	4626      	mov	r6, r4
   315d0:	462c      	mov	r4, r5
   315d2:	e7e7      	b.n	315a4 <bt_gatt_notification+0x22>
}
   315d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000315d8 <bt_gatt_change_aware>:
{
   315d8:	b510      	push	{r4, lr}
   315da:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   315dc:	f7ea fa7a 	bl	1bad4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   315e0:	b910      	cbnz	r0, 315e8 <bt_gatt_change_aware+0x10>
		return true;
   315e2:	2401      	movs	r4, #1
}
   315e4:	4620      	mov	r0, r4
   315e6:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   315e8:	7a03      	ldrb	r3, [r0, #8]
   315ea:	07da      	lsls	r2, r3, #31
   315ec:	d5f9      	bpl.n	315e2 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   315ee:	300c      	adds	r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   315f0:	e8d0 1faf 	lda	r1, [r0]
   315f4:	f011 0101 	ands.w	r1, r1, #1
   315f8:	d1f3      	bne.n	315e2 <bt_gatt_change_aware+0xa>
	if (!req) {
   315fa:	2c00      	cmp	r4, #0
   315fc:	d0f2      	beq.n	315e4 <bt_gatt_change_aware+0xc>
   315fe:	e8d0 3faf 	lda	r3, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   31602:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   31606:	079b      	lsls	r3, r3, #30
   31608:	d50a      	bpl.n	31620 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3160a:	e8d0 3fef 	ldaex	r3, [r0]
   3160e:	f023 0302 	bic.w	r3, r3, #2
   31612:	e8c0 3fe2 	stlex	r2, r3, [r0]
   31616:	2a00      	cmp	r2, #0
   31618:	d1f7      	bne.n	3160a <bt_gatt_change_aware+0x32>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   3161a:	f7ff fe7f 	bl	3131c <atomic_set_bit>
	return false;
   3161e:	e7e1      	b.n	315e4 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   31620:	2101      	movs	r1, #1
   31622:	e7fa      	b.n	3161a <bt_gatt_change_aware+0x42>

00031624 <bt_smp_recv>:
{
   31624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   31626:	2100      	movs	r1, #0
   31628:	f04f 32ff 	mov.w	r2, #4294967295
   3162c:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   31630:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   31632:	4608      	mov	r0, r1
   31634:	f7ff f9aa 	bl	3098c <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   31638:	f100 0608 	add.w	r6, r0, #8
   3163c:	4604      	mov	r4, r0
   3163e:	2101      	movs	r1, #1
   31640:	4630      	mov	r0, r6
   31642:	f7eb fccb 	bl	1cfdc <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   31646:	2505      	movs	r5, #5
   31648:	2101      	movs	r1, #1
   3164a:	7005      	strb	r5, [r0, #0]
   3164c:	4630      	mov	r0, r6
   3164e:	f7eb fcc5 	bl	1cfdc <net_buf_simple_add>
   31652:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   31654:	7005      	strb	r5, [r0, #0]
   31656:	4622      	mov	r2, r4
   31658:	2106      	movs	r1, #6
   3165a:	4638      	mov	r0, r7
   3165c:	9300      	str	r3, [sp, #0]
   3165e:	f7ff f998 	bl	30992 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   31662:	b110      	cbz	r0, 3166a <bt_smp_recv+0x46>
		net_buf_unref(buf);
   31664:	4620      	mov	r0, r4
   31666:	f7eb fb89 	bl	1cd7c <net_buf_unref>
}
   3166a:	2000      	movs	r0, #0
   3166c:	b003      	add	sp, #12
   3166e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00031670 <bt_smp_sign>:
   31670:	f06f 0085 	mvn.w	r0, #133	; 0x85
   31674:	4770      	bx	lr

00031676 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   31676:	2000      	movs	r0, #0
   31678:	4770      	bx	lr

0003167a <fixed_data_unref>:
}
   3167a:	4770      	bx	lr

0003167c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3167c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   3167e:	6849      	ldr	r1, [r1, #4]
   31680:	6809      	ldr	r1, [r1, #0]
   31682:	f7eb ba33 	b.w	1caec <net_buf_alloc_len>

00031686 <net_buf_simple_init_with_data>:
	buf->size  = size;
   31686:	b292      	uxth	r2, r2
	buf->__buf = data;
   31688:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   3168a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   3168c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   3168e:	8082      	strh	r2, [r0, #4]
}
   31690:	4770      	bx	lr

00031692 <net_buf_simple_pull_u8>:
{
   31692:	b510      	push	{r4, lr}
	val = buf->data[0];
   31694:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   31696:	2101      	movs	r1, #1
	val = buf->data[0];
   31698:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   3169a:	f7eb fc5d 	bl	1cf58 <net_buf_simple_pull>
}
   3169e:	4620      	mov	r0, r4
   316a0:	bd10      	pop	{r4, pc}

000316a2 <net_buf_simple_pull_le16>:
{
   316a2:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   316a4:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   316a6:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   316a8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   316aa:	f7eb fc55 	bl	1cf58 <net_buf_simple_pull>
}
   316ae:	4620      	mov	r0, r4
   316b0:	bd10      	pop	{r4, pc}

000316b2 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   316b2:	6802      	ldr	r2, [r0, #0]
   316b4:	6880      	ldr	r0, [r0, #8]
}
   316b6:	1a10      	subs	r0, r2, r0
   316b8:	4770      	bx	lr

000316ba <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   316ba:	8883      	ldrh	r3, [r0, #4]
   316bc:	88c2      	ldrh	r2, [r0, #6]
   316be:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   316c0:	6803      	ldr	r3, [r0, #0]
   316c2:	6880      	ldr	r0, [r0, #8]
   316c4:	1a18      	subs	r0, r3, r0
}
   316c6:	1a10      	subs	r0, r2, r0
   316c8:	4770      	bx	lr

000316ca <net_buf_simple_add_mem>:
{
   316ca:	b538      	push	{r3, r4, r5, lr}
   316cc:	460d      	mov	r5, r1
   316ce:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   316d0:	4611      	mov	r1, r2
   316d2:	f7eb fc83 	bl	1cfdc <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   316d6:	4622      	mov	r2, r4
   316d8:	4629      	mov	r1, r5
}
   316da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   316de:	f003 bf52 	b.w	35586 <memcpy>

000316e2 <net_buf_simple_add_u8>:
{
   316e2:	b510      	push	{r4, lr}
   316e4:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   316e6:	2101      	movs	r1, #1
   316e8:	f7eb fc78 	bl	1cfdc <net_buf_simple_add>
	*u8 = val;
   316ec:	7004      	strb	r4, [r0, #0]
}
   316ee:	bd10      	pop	{r4, pc}

000316f0 <net_buf_simple_add_le16>:
{
   316f0:	b510      	push	{r4, lr}
   316f2:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   316f4:	2102      	movs	r1, #2
   316f6:	f7eb fc71 	bl	1cfdc <net_buf_simple_add>
	dst[0] = val;
   316fa:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   316fc:	0a24      	lsrs	r4, r4, #8
   316fe:	7044      	strb	r4, [r0, #1]
}
   31700:	bd10      	pop	{r4, pc}

00031702 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   31702:	b508      	push	{r3, lr}
	net_if_init();
   31704:	f7eb fd08 	bl	1d118 <net_if_init>
	net_if_post_init();
   31708:	f7eb fd42 	bl	1d190 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3170c:	2000      	movs	r0, #0
   3170e:	bd08      	pop	{r3, pc}

00031710 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   31710:	b110      	cbz	r0, 31718 <net_if_l2+0x8>
   31712:	6800      	ldr	r0, [r0, #0]
   31714:	b100      	cbz	r0, 31718 <net_if_l2+0x8>
	return iface->if_dev->l2;
   31716:	6840      	ldr	r0, [r0, #4]
}
   31718:	4770      	bx	lr

0003171a <l2_flags_get>:
{
   3171a:	b510      	push	{r4, lr}
   3171c:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3171e:	f7ff fff7 	bl	31710 <net_if_l2>
   31722:	b128      	cbz	r0, 31730 <l2_flags_get+0x16>
   31724:	68c2      	ldr	r2, [r0, #12]
   31726:	b11a      	cbz	r2, 31730 <l2_flags_get+0x16>
}
   31728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3172c:	4618      	mov	r0, r3
   3172e:	4710      	bx	r2
}
   31730:	2000      	movs	r0, #0
   31732:	bd10      	pop	{r4, pc}

00031734 <net_if_flag_is_set>:
	if (iface == NULL) {
   31734:	b130      	cbz	r0, 31744 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   31736:	6803      	ldr	r3, [r0, #0]
   31738:	330c      	adds	r3, #12
   3173a:	e8d3 0faf 	lda	r0, [r3]
   3173e:	4108      	asrs	r0, r1
   31740:	f000 0001 	and.w	r0, r0, #1
}
   31744:	4770      	bx	lr

00031746 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   31746:	e9d0 2300 	ldrd	r2, r3, [r0]
   3174a:	1a9b      	subs	r3, r3, r2
   3174c:	2b01      	cmp	r3, #1
{
   3174e:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   31750:	d90c      	bls.n	3176c <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   31752:	4614      	mov	r4, r2
   31754:	1c53      	adds	r3, r2, #1
   31756:	6003      	str	r3, [r0, #0]
   31758:	f814 3b02 	ldrb.w	r3, [r4], #2
   3175c:	021b      	lsls	r3, r3, #8
   3175e:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   31760:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   31762:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   31764:	7852      	ldrb	r2, [r2, #1]
   31766:	4313      	orrs	r3, r2
   31768:	800b      	strh	r3, [r1, #0]
}
   3176a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3176c:	f06f 0015 	mvn.w	r0, #21
   31770:	e7fb      	b.n	3176a <unpack_uint16+0x24>

00031772 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   31772:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   31774:	e9d0 3400 	ldrd	r3, r4, [r0]
   31778:	429c      	cmp	r4, r3
   3177a:	d01f      	beq.n	317bc <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   3177c:	1c5c      	adds	r4, r3, #1
   3177e:	6004      	str	r4, [r0, #0]
   31780:	781b      	ldrb	r3, [r3, #0]
   31782:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   31784:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   31786:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   31788:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   3178a:	6804      	ldr	r4, [r0, #0]
   3178c:	42bc      	cmp	r4, r7
   3178e:	d218      	bcs.n	317c2 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   31790:	4625      	mov	r5, r4
   31792:	f815 3b01 	ldrb.w	r3, [r5], #1
   31796:	6816      	ldr	r6, [r2, #0]
   31798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   3179c:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3179e:	4433      	add	r3, r6
   317a0:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   317a2:	6005      	str	r5, [r0, #0]
   317a4:	f994 4000 	ldrsb.w	r4, [r4]
   317a8:	2c00      	cmp	r4, #0
   317aa:	db04      	blt.n	317b6 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   317ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   317b0:	d204      	bcs.n	317bc <fixed_header_decode+0x4a>
	return 0;
   317b2:	2000      	movs	r0, #0
   317b4:	e004      	b.n	317c0 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   317b6:	3107      	adds	r1, #7
   317b8:	291c      	cmp	r1, #28
   317ba:	d1e6      	bne.n	3178a <fixed_header_decode+0x18>
		return -EINVAL;
   317bc:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   317c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   317c2:	f06f 000a 	mvn.w	r0, #10
   317c6:	e7fb      	b.n	317c0 <fixed_header_decode+0x4e>

000317c8 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   317c8:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   317ca:	e9d1 3500 	ldrd	r3, r5, [r1]
   317ce:	429d      	cmp	r5, r3
   317d0:	d102      	bne.n	317d8 <connect_ack_decode+0x10>
		return -EINVAL;
   317d2:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   317d6:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   317d8:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   317da:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   317dc:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   317de:	d0f8      	beq.n	317d2 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   317e0:	461d      	mov	r5, r3
   317e2:	f815 4b02 	ldrb.w	r4, [r5], #2
   317e6:	600d      	str	r5, [r1, #0]
   317e8:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   317ea:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
	return 0;
   317ee:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   317f0:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   317f2:	bf04      	itt	eq
   317f4:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   317f8:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   317fa:	7051      	strb	r1, [r2, #1]
	return 0;
   317fc:	e7eb      	b.n	317d6 <connect_ack_decode+0xe>

000317fe <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   317fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31802:	461c      	mov	r4, r3
   31804:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   31806:	7da2      	ldrb	r2, [r4, #22]
   31808:	0043      	lsls	r3, r0, #1
   3180a:	f022 0203 	bic.w	r2, r2, #3
   3180e:	f003 0302 	and.w	r3, r3, #2
   31812:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   31814:	f3c0 0041 	ubfx	r0, r0, #1, #2
   31818:	7220      	strb	r0, [r4, #8]
{
   3181a:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   3181c:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3181e:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   31820:	f10d 0106 	add.w	r1, sp, #6
   31824:	f7ff ff8f 	bl	31746 <unpack_uint16>
	if (err_code != 0) {
   31828:	4606      	mov	r6, r0
   3182a:	b9c0      	cbnz	r0, 3185e <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3182c:	683b      	ldr	r3, [r7, #0]
   3182e:	687a      	ldr	r2, [r7, #4]
   31830:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   31834:	1ad2      	subs	r2, r2, r3
   31836:	42aa      	cmp	r2, r5
   31838:	da02      	bge.n	31840 <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   3183a:	f06f 0615 	mvn.w	r6, #21
   3183e:	e00e      	b.n	3185e <publish_decode+0x60>
	str->size = utf8_strlen;
   31840:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   31842:	b185      	cbz	r5, 31866 <publish_decode+0x68>
		str->utf8 = buf->cur;
   31844:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   31846:	442b      	add	r3, r5
   31848:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3184a:	7a23      	ldrb	r3, [r4, #8]
   3184c:	b96b      	cbnz	r3, 3186a <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   3184e:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   31850:	45a8      	cmp	r8, r5
   31852:	d3f2      	bcc.n	3183a <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   31854:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   31856:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3185a:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3185c:	6125      	str	r5, [r4, #16]

	return 0;
}
   3185e:	4630      	mov	r0, r6
   31860:	b002      	add	sp, #8
   31862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   31866:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   31868:	e7ef      	b.n	3184a <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   3186a:	4638      	mov	r0, r7
   3186c:	f104 0114 	add.w	r1, r4, #20
   31870:	f7ff ff69 	bl	31746 <unpack_uint16>
		if (err_code != 0) {
   31874:	b908      	cbnz	r0, 3187a <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   31876:	3504      	adds	r5, #4
   31878:	e7ea      	b.n	31850 <publish_decode+0x52>
   3187a:	4606      	mov	r6, r0
   3187c:	e7ef      	b.n	3185e <publish_decode+0x60>

0003187e <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3187e:	f7ff bf62 	b.w	31746 <unpack_uint16>

00031882 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   31882:	f7ff bf60 	b.w	31746 <unpack_uint16>

00031886 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   31886:	f7ff bf5e 	b.w	31746 <unpack_uint16>

0003188a <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3188a:	f7ff bf5c 	b.w	31746 <unpack_uint16>

0003188e <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3188e:	b538      	push	{r3, r4, r5, lr}
   31890:	4605      	mov	r5, r0
   31892:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   31894:	f7ff ff57 	bl	31746 <unpack_uint16>
	if (err_code != 0) {
   31898:	b930      	cbnz	r0, 318a8 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3189a:	e9d5 2300 	ldrd	r2, r3, [r5]
   3189e:	1a99      	subs	r1, r3, r2
	str->len = length;
   318a0:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   318a2:	b111      	cbz	r1, 318aa <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   318a4:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   318a6:	602b      	str	r3, [r5, #0]
}
   318a8:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   318aa:	6060      	str	r0, [r4, #4]
   318ac:	e7fc      	b.n	318a8 <subscribe_ack_decode+0x1a>

000318ae <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   318ae:	f7ff bf4a 	b.w	31746 <unpack_uint16>

000318b2 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   318b2:	e9d1 3200 	ldrd	r3, r2, [r1]
   318b6:	1ad2      	subs	r2, r2, r3
   318b8:	2a01      	cmp	r2, #1
   318ba:	d909      	bls.n	318d0 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   318bc:	1c5a      	adds	r2, r3, #1
   318be:	600a      	str	r2, [r1, #0]
   318c0:	0a02      	lsrs	r2, r0, #8
   318c2:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   318c4:	680b      	ldr	r3, [r1, #0]
   318c6:	1c5a      	adds	r2, r3, #1
   318c8:	600a      	str	r2, [r1, #0]
   318ca:	7018      	strb	r0, [r3, #0]
	return 0;
   318cc:	2000      	movs	r0, #0
   318ce:	4770      	bx	lr
		return -ENOMEM;
   318d0:	f06f 000b 	mvn.w	r0, #11
}
   318d4:	4770      	bx	lr

000318d6 <pack_utf8_str>:
{
   318d6:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   318d8:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   318dc:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   318de:	6840      	ldr	r0, [r0, #4]
   318e0:	1a9b      	subs	r3, r3, r2
   318e2:	1c82      	adds	r2, r0, #2
   318e4:	4293      	cmp	r3, r2
{
   318e6:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   318e8:	d30d      	bcc.n	31906 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   318ea:	b280      	uxth	r0, r0
   318ec:	f7ff ffe1 	bl	318b2 <pack_uint16>
   318f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   318f4:	6820      	ldr	r0, [r4, #0]
   318f6:	f003 fe46 	bl	35586 <memcpy>
	return 0;
   318fa:	2000      	movs	r0, #0
	buf->cur += str->size;
   318fc:	6823      	ldr	r3, [r4, #0]
   318fe:	686a      	ldr	r2, [r5, #4]
   31900:	4413      	add	r3, r2
   31902:	6023      	str	r3, [r4, #0]
}
   31904:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   31906:	f06f 000b 	mvn.w	r0, #11
   3190a:	e7fb      	b.n	31904 <pack_utf8_str+0x2e>

0003190c <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   3190c:	6813      	ldr	r3, [r2, #0]
{
   3190e:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   31910:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   31912:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   31916:	d227      	bcs.n	31968 <mqtt_encode_fixed_header+0x5c>
   31918:	4625      	mov	r5, r4
   3191a:	2600      	movs	r6, #0
	} while (length > 0);
   3191c:	09ed      	lsrs	r5, r5, #7
   3191e:	b2f3      	uxtb	r3, r6
   31920:	f106 0601 	add.w	r6, r6, #1
   31924:	d1fa      	bne.n	3191c <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   31926:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   31928:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3192a:	b2db      	uxtb	r3, r3
   3192c:	425d      	negs	r5, r3
   3192e:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   31930:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   31932:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   31934:	bf1e      	ittt	ne
   31936:	3301      	addne	r3, #1
   31938:	6013      	strne	r3, [r2, #0]
   3193a:	5548      	strbne	r0, [r1, r5]
	return 0;
   3193c:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3193e:	6813      	ldr	r3, [r2, #0]
   31940:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   31944:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   31946:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   31948:	bf1f      	itttt	ne
   3194a:	6811      	ldrne	r1, [r2, #0]
   3194c:	780b      	ldrbne	r3, [r1, #0]
   3194e:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   31952:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   31954:	6813      	ldr	r3, [r2, #0]
   31956:	3301      	adds	r3, #1
   31958:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   3195a:	2800      	cmp	r0, #0
   3195c:	d1ef      	bne.n	3193e <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3195e:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   31960:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   31962:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   31964:	6053      	str	r3, [r2, #4]
}
   31966:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   31968:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3196c:	e7fb      	b.n	31966 <mqtt_encode_fixed_header+0x5a>

0003196e <mqtt_message_id_only_enc>:
{
   3196e:	b570      	push	{r4, r5, r6, lr}
   31970:	4606      	mov	r6, r0
   31972:	4614      	mov	r4, r2
	if (message_id == 0U) {
   31974:	4608      	mov	r0, r1
   31976:	b169      	cbz	r1, 31994 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31978:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3197a:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3197c:	3505      	adds	r5, #5
   3197e:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   31980:	f7ff ff97 	bl	318b2 <pack_uint16>
	if (err_code != 0) {
   31984:	b940      	cbnz	r0, 31998 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   31986:	4622      	mov	r2, r4
   31988:	4629      	mov	r1, r5
   3198a:	4630      	mov	r0, r6
}
   3198c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   31990:	f7ff bfbc 	b.w	3190c <mqtt_encode_fixed_header>
		return -EINVAL;
   31994:	f06f 0015 	mvn.w	r0, #21
}
   31998:	bd70      	pop	{r4, r5, r6, pc}

0003199a <publish_encode>:
{
   3199a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3199e:	7d87      	ldrb	r7, [r0, #22]
   319a0:	7a04      	ldrb	r4, [r0, #8]
   319a2:	f007 0801 	and.w	r8, r7, #1
{
   319a6:	4605      	mov	r5, r0
   319a8:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   319aa:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   319ae:	b10c      	cbz	r4, 319b4 <publish_encode+0x1a>
   319b0:	8a83      	ldrh	r3, [r0, #20]
   319b2:	b383      	cbz	r3, 31a16 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   319b4:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   319b8:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   319ba:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   319bc:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   319be:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   319c2:	f7ff ff88 	bl	318d6 <pack_utf8_str>
	if (err_code != 0) {
   319c6:	b9b0      	cbnz	r0, 319f6 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   319c8:	7a2b      	ldrb	r3, [r5, #8]
   319ca:	b9b3      	cbnz	r3, 319fa <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   319cc:	0060      	lsls	r0, r4, #1
   319ce:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   319d2:	692a      	ldr	r2, [r5, #16]
   319d4:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   319d8:	4338      	orrs	r0, r7
   319da:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   319de:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   319e0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   319e4:	464a      	mov	r2, r9
   319e6:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   319e8:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   319ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   319f0:	f7ff ff8c 	bl	3190c <mqtt_encode_fixed_header>
	if (err_code != 0) {
   319f4:	b140      	cbz	r0, 31a08 <publish_encode+0x6e>
}
   319f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   319fa:	4649      	mov	r1, r9
   319fc:	8aa8      	ldrh	r0, [r5, #20]
   319fe:	f7ff ff58 	bl	318b2 <pack_uint16>
		if (err_code != 0) {
   31a02:	2800      	cmp	r0, #0
   31a04:	d0e2      	beq.n	319cc <publish_encode+0x32>
   31a06:	e7f6      	b.n	319f6 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   31a08:	f8d9 3004 	ldr.w	r3, [r9, #4]
   31a0c:	692a      	ldr	r2, [r5, #16]
   31a0e:	1a9b      	subs	r3, r3, r2
   31a10:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   31a14:	e7ef      	b.n	319f6 <publish_encode+0x5c>
		return -EINVAL;
   31a16:	f06f 0015 	mvn.w	r0, #21
   31a1a:	e7ec      	b.n	319f6 <publish_encode+0x5c>

00031a1c <publish_ack_encode>:
{
   31a1c:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   31a1e:	8801      	ldrh	r1, [r0, #0]
   31a20:	2040      	movs	r0, #64	; 0x40
   31a22:	f7ff bfa4 	b.w	3196e <mqtt_message_id_only_enc>

00031a26 <publish_release_encode>:
{
   31a26:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   31a28:	8801      	ldrh	r1, [r0, #0]
   31a2a:	2062      	movs	r0, #98	; 0x62
   31a2c:	f7ff bf9f 	b.w	3196e <mqtt_message_id_only_enc>

00031a30 <subscribe_encode>:
{
   31a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31a34:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   31a36:	88c0      	ldrh	r0, [r0, #6]
{
   31a38:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   31a3a:	b330      	cbz	r0, 31a8a <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31a3c:	680f      	ldr	r7, [r1, #0]
   31a3e:	3705      	adds	r7, #5
   31a40:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   31a42:	f7ff ff36 	bl	318b2 <pack_uint16>
	if (err_code != 0) {
   31a46:	4604      	mov	r4, r0
   31a48:	bb08      	cbnz	r0, 31a8e <subscribe_encode+0x5e>
   31a4a:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   31a4e:	88b3      	ldrh	r3, [r6, #4]
   31a50:	42a3      	cmp	r3, r4
   31a52:	dc06      	bgt.n	31a62 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   31a54:	462a      	mov	r2, r5
   31a56:	4639      	mov	r1, r7
}
   31a58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   31a5c:	2082      	movs	r0, #130	; 0x82
   31a5e:	f7ff bf55 	b.w	3190c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   31a62:	fb08 f904 	mul.w	r9, r8, r4
   31a66:	6830      	ldr	r0, [r6, #0]
   31a68:	4629      	mov	r1, r5
   31a6a:	4448      	add	r0, r9
   31a6c:	f7ff ff33 	bl	318d6 <pack_utf8_str>
		if (err_code != 0) {
   31a70:	b980      	cbnz	r0, 31a94 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   31a72:	6833      	ldr	r3, [r6, #0]
   31a74:	444b      	add	r3, r9
   31a76:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   31a78:	e9d5 3100 	ldrd	r3, r1, [r5]
   31a7c:	4299      	cmp	r1, r3
   31a7e:	d00b      	beq.n	31a98 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   31a80:	1c59      	adds	r1, r3, #1
   31a82:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   31a84:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   31a86:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   31a88:	e7e1      	b.n	31a4e <subscribe_encode+0x1e>
		return -EINVAL;
   31a8a:	f06f 0415 	mvn.w	r4, #21
}
   31a8e:	4620      	mov	r0, r4
   31a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   31a94:	4604      	mov	r4, r0
   31a96:	e7fa      	b.n	31a8e <subscribe_encode+0x5e>
		return -ENOMEM;
   31a98:	f06f 040b 	mvn.w	r4, #11
   31a9c:	e7f7      	b.n	31a8e <subscribe_encode+0x5e>

00031a9e <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   31a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31aa0:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   31aa2:	e9d1 3100 	ldrd	r3, r1, [r1]
   31aa6:	1acb      	subs	r3, r1, r3
   31aa8:	4293      	cmp	r3, r2
{
   31aaa:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   31aac:	d301      	bcc.n	31ab2 <mqtt_read_message_chunk+0x14>
		return 0;
   31aae:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   31ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   31ab2:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   31ab4:	190f      	adds	r7, r1, r4
   31ab6:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   31aba:	4413      	add	r3, r2
   31abc:	429f      	cmp	r7, r3
   31abe:	d813      	bhi.n	31ae8 <mqtt_read_message_chunk+0x4a>
   31ac0:	4297      	cmp	r7, r2
   31ac2:	d311      	bcc.n	31ae8 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   31ac4:	2300      	movs	r3, #0
   31ac6:	4622      	mov	r2, r4
   31ac8:	f7eb fc58 	bl	1d37c <mqtt_transport_read>
	if (len < 0) {
   31acc:	2800      	cmp	r0, #0
   31ace:	dbef      	blt.n	31ab0 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   31ad0:	d00d      	beq.n	31aee <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   31ad2:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   31ad4:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   31ad6:	4403      	add	r3, r0
   31ad8:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   31ada:	686b      	ldr	r3, [r5, #4]
   31adc:	4403      	add	r3, r0
   31ade:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   31ae0:	d2e5      	bcs.n	31aae <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   31ae2:	f06f 000a 	mvn.w	r0, #10
   31ae6:	e7e3      	b.n	31ab0 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   31ae8:	f06f 000b 	mvn.w	r0, #11
   31aec:	e7e0      	b.n	31ab0 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   31aee:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31af2:	e7dd      	b.n	31ab0 <mqtt_read_message_chunk+0x12>

00031af4 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   31af4:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   31af6:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   31af8:	69c2      	ldr	r2, [r0, #28]
{
   31afa:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   31afc:	9302      	str	r3, [sp, #8]
{
   31afe:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   31b00:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   31b02:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   31b04:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   31b06:	4628      	mov	r0, r5
   31b08:	a902      	add	r1, sp, #8
   31b0a:	f7ff ffc8 	bl	31a9e <mqtt_read_message_chunk>
		if (err_code < 0) {
   31b0e:	1e04      	subs	r4, r0, #0
   31b10:	db2d      	blt.n	31b6e <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   31b12:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   31b14:	aa01      	add	r2, sp, #4
   31b16:	f10d 0103 	add.w	r1, sp, #3
   31b1a:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   31b1c:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   31b1e:	f7ff fe28 	bl	31772 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   31b22:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   31b26:	4604      	mov	r4, r0
		chunk_size = 1U;
   31b28:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   31b2c:	d0eb      	beq.n	31b06 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   31b2e:	2800      	cmp	r0, #0
   31b30:	db21      	blt.n	31b76 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   31b32:	f89d 6003 	ldrb.w	r6, [sp, #3]
   31b36:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   31b3a:	2b30      	cmp	r3, #48	; 0x30
   31b3c:	d11e      	bne.n	31b7c <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   31b3e:	2202      	movs	r2, #2
   31b40:	4628      	mov	r0, r5
   31b42:	a902      	add	r1, sp, #8
   31b44:	f7ff ffab 	bl	31a9e <mqtt_read_message_chunk>
	if (err_code < 0) {
   31b48:	1e04      	subs	r4, r0, #0
   31b4a:	db10      	blt.n	31b6e <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   31b4c:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   31b4e:	f016 0f06 	tst.w	r6, #6
   31b52:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   31b54:	4628      	mov	r0, r5
   31b56:	ba52      	rev16	r2, r2
   31b58:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   31b5a:	bf0c      	ite	eq
   31b5c:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   31b5e:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   31b60:	a902      	add	r1, sp, #8
   31b62:	f7ff ff9c 	bl	31a9e <mqtt_read_message_chunk>
	if (err_code < 0) {
   31b66:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   31b6a:	2c00      	cmp	r4, #0
   31b6c:	da0d      	bge.n	31b8a <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   31b6e:	f114 0f0b 	cmn.w	r4, #11
   31b72:	d100      	bne.n	31b76 <mqtt_handle_rx+0x82>
   31b74:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   31b76:	4620      	mov	r0, r4
   31b78:	b00c      	add	sp, #48	; 0x30
   31b7a:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   31b7c:	4628      	mov	r0, r5
   31b7e:	9a01      	ldr	r2, [sp, #4]
   31b80:	a902      	add	r1, sp, #8
   31b82:	f7ff ff8c 	bl	31a9e <mqtt_read_message_chunk>
   31b86:	4604      	mov	r4, r0
   31b88:	e7ef      	b.n	31b6a <mqtt_handle_rx+0x76>
	evt.result = 0;
   31b8a:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   31b8c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   31b90:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   31b92:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   31b96:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   31b98:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   31b9a:	d066      	beq.n	31c6a <mqtt_handle_rx+0x176>
   31b9c:	d813      	bhi.n	31bc6 <mqtt_handle_rx+0xd2>
   31b9e:	2b40      	cmp	r3, #64	; 0x40
   31ba0:	d059      	beq.n	31c56 <mqtt_handle_rx+0x162>
   31ba2:	d806      	bhi.n	31bb2 <mqtt_handle_rx+0xbe>
   31ba4:	2b20      	cmp	r3, #32
   31ba6:	d02f      	beq.n	31c08 <mqtt_handle_rx+0x114>
   31ba8:	2b30      	cmp	r3, #48	; 0x30
   31baa:	d048      	beq.n	31c3e <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   31bac:	2400      	movs	r4, #0
   31bae:	61ec      	str	r4, [r5, #28]
	return 0;
   31bb0:	e7e1      	b.n	31b76 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   31bb2:	2b50      	cmp	r3, #80	; 0x50
   31bb4:	d1fa      	bne.n	31bac <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   31bb6:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   31bb8:	a905      	add	r1, sp, #20
   31bba:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   31bbc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   31bc0:	f7ff fe5f 	bl	31882 <publish_receive_decode>
   31bc4:	e04e      	b.n	31c64 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   31bc6:	2bb0      	cmp	r3, #176	; 0xb0
   31bc8:	d05f      	beq.n	31c8a <mqtt_handle_rx+0x196>
   31bca:	d80b      	bhi.n	31be4 <mqtt_handle_rx+0xf0>
   31bcc:	2b70      	cmp	r3, #112	; 0x70
   31bce:	d054      	beq.n	31c7a <mqtt_handle_rx+0x186>
   31bd0:	2b90      	cmp	r3, #144	; 0x90
   31bd2:	d1eb      	bne.n	31bac <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   31bd4:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   31bd6:	a905      	add	r1, sp, #20
   31bd8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   31bda:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   31bde:	f7ff fe56 	bl	3188e <subscribe_ack_decode>
   31be2:	e03f      	b.n	31c64 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   31be4:	2bd0      	cmp	r3, #208	; 0xd0
   31be6:	d1e1      	bne.n	31bac <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   31be8:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   31bec:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   31bee:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   31bf0:	bfc8      	it	gt
   31bf2:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   31bf6:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   31bfa:	bfc8      	it	gt
   31bfc:	b252      	sxtbgt	r2, r2
   31bfe:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   31c02:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   31c06:	e010      	b.n	31c2a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   31c08:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   31c0c:	4628      	mov	r0, r5
   31c0e:	aa05      	add	r2, sp, #20
   31c10:	a902      	add	r1, sp, #8
   31c12:	f7ff fdd9 	bl	317c8 <connect_ack_decode>
		if (err_code == 0) {
   31c16:	4604      	mov	r4, r0
   31c18:	bb28      	cbnz	r0, 31c66 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   31c1a:	f89d 2015 	ldrb.w	r2, [sp, #21]
   31c1e:	b95a      	cbnz	r2, 31c38 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   31c20:	69ab      	ldr	r3, [r5, #24]
   31c22:	f043 0304 	orr.w	r3, r3, #4
   31c26:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   31c28:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   31c2a:	4628      	mov	r0, r5
   31c2c:	a904      	add	r1, sp, #16
   31c2e:	f000 f8bd 	bl	31dac <event_notify>
	if (err_code < 0) {
   31c32:	2c00      	cmp	r4, #0
   31c34:	daba      	bge.n	31bac <mqtt_handle_rx+0xb8>
   31c36:	e79e      	b.n	31b76 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   31c38:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   31c3c:	e7f4      	b.n	31c28 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   31c3e:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   31c40:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   31c42:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   31c46:	ab05      	add	r3, sp, #20
   31c48:	f7ff fdd9 	bl	317fe <publish_decode>
		client->internal.remaining_payload =
   31c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   31c4e:	4604      	mov	r4, r0
		evt.result = err_code;
   31c50:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   31c52:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   31c54:	e7e9      	b.n	31c2a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   31c56:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   31c58:	a905      	add	r1, sp, #20
   31c5a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   31c5c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   31c60:	f7ff fe0d 	bl	3187e <publish_ack_decode>
   31c64:	4604      	mov	r4, r0
		evt.result = err_code;
   31c66:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   31c68:	e7df      	b.n	31c2a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   31c6a:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   31c6c:	a905      	add	r1, sp, #20
   31c6e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   31c70:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   31c74:	f7ff fe07 	bl	31886 <publish_release_decode>
   31c78:	e7f4      	b.n	31c64 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   31c7a:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   31c7c:	a905      	add	r1, sp, #20
   31c7e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   31c80:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   31c84:	f7ff fe01 	bl	3188a <publish_complete_decode>
   31c88:	e7ec      	b.n	31c64 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   31c8a:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   31c8c:	a905      	add	r1, sp, #20
   31c8e:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   31c92:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   31c96:	f7ff fe0a 	bl	318ae <unsubscribe_ack_decode>
   31c9a:	e7e3      	b.n	31c64 <mqtt_handle_rx+0x170>

00031c9c <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   31c9c:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   31c9e:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   31ca0:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   31ca2:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   31ca4:	2206      	movs	r2, #6
   31ca6:	2101      	movs	r1, #1
   31ca8:	f7e3 fc7c 	bl	155a4 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   31cac:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   31cae:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   31cb0:	da04      	bge.n	31cbc <mqtt_client_tcp_connect+0x20>

	ret = zsock_connect(client->transport.tcp.sock, client->broker,
			    peer_addr_size);
	if (ret < 0) {
		(void) zsock_close(client->transport.tcp.sock);
		return -errno;
   31cb2:	f7fe fbff 	bl	304b4 <__errno>
   31cb6:	6800      	ldr	r0, [r0, #0]
   31cb8:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   31cba:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   31cbc:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   31cbe:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   31cc0:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   31cc2:	bf14      	ite	ne
   31cc4:	2218      	movne	r2, #24
   31cc6:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   31cc8:	f7fc fe72 	bl	2e9b0 <z_impl_zsock_connect>
	if (ret < 0) {
   31ccc:	2800      	cmp	r0, #0
   31cce:	da03      	bge.n	31cd8 <mqtt_client_tcp_connect+0x3c>
		(void) zsock_close(client->transport.tcp.sock);
   31cd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   31cd2:	f7fc fe49 	bl	2e968 <z_impl_zsock_close>
   31cd6:	e7ec      	b.n	31cb2 <mqtt_client_tcp_connect+0x16>
	return 0;
   31cd8:	2000      	movs	r0, #0
   31cda:	e7ee      	b.n	31cba <mqtt_client_tcp_connect+0x1e>

00031cdc <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   31cdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   31ce0:	2400      	movs	r4, #0
{
   31ce2:	4606      	mov	r6, r0
   31ce4:	460f      	mov	r7, r1
   31ce6:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   31ce8:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   31cea:	42ac      	cmp	r4, r5
   31cec:	d301      	bcc.n	31cf2 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   31cee:	2000      	movs	r0, #0
   31cf0:	e00d      	b.n	31d0e <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   31cf2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   31cf4:	2300      	movs	r3, #0
   31cf6:	e9cd 8800 	strd	r8, r8, [sp]
   31cfa:	1b2a      	subs	r2, r5, r4
   31cfc:	1939      	adds	r1, r7, r4
   31cfe:	f7fc fe7e 	bl	2e9fe <z_impl_zsock_sendto>
		if (ret < 0) {
   31d02:	1e03      	subs	r3, r0, #0
   31d04:	da06      	bge.n	31d14 <mqtt_client_tcp_write+0x38>
			return -errno;
   31d06:	f7fe fbd5 	bl	304b4 <__errno>
   31d0a:	6800      	ldr	r0, [r0, #0]
   31d0c:	4240      	negs	r0, r0
}
   31d0e:	b002      	add	sp, #8
   31d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   31d14:	441c      	add	r4, r3
   31d16:	e7e8      	b.n	31cea <mqtt_client_tcp_write+0xe>

00031d18 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   31d18:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   31d1a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   31d1c:	2200      	movs	r2, #0
   31d1e:	f7fc fe9e 	bl	2ea5e <z_impl_zsock_sendmsg>
	if (ret < 0) {
   31d22:	2800      	cmp	r0, #0
   31d24:	da04      	bge.n	31d30 <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   31d26:	f7fe fbc5 	bl	304b4 <__errno>
   31d2a:	6800      	ldr	r0, [r0, #0]
   31d2c:	4240      	negs	r0, r0
	}

	return 0;
}
   31d2e:	bd08      	pop	{r3, pc}
	return 0;
   31d30:	2000      	movs	r0, #0
   31d32:	e7fc      	b.n	31d2e <mqtt_client_tcp_write_msg+0x16>

00031d34 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   31d34:	b513      	push	{r0, r1, r4, lr}
   31d36:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   31d38:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   31d3a:	bf14      	ite	ne
   31d3c:	4623      	movne	r3, r4
   31d3e:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   31d40:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   31d42:	e9cd 4400 	strd	r4, r4, [sp]
   31d46:	f7fc feb1 	bl	2eaac <z_impl_zsock_recvfrom>
	if (ret < 0) {
   31d4a:	2800      	cmp	r0, #0
   31d4c:	da03      	bge.n	31d56 <mqtt_client_tcp_read+0x22>
		return -errno;
   31d4e:	f7fe fbb1 	bl	304b4 <__errno>
   31d52:	6800      	ldr	r0, [r0, #0]
   31d54:	4240      	negs	r0, r0
	}

	return ret;
}
   31d56:	b002      	add	sp, #8
   31d58:	bd10      	pop	{r4, pc}

00031d5a <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   31d5a:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   31d5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   31d5e:	f7fc fe03 	bl	2e968 <z_impl_zsock_close>
	if (ret < 0) {
   31d62:	2800      	cmp	r0, #0
   31d64:	da04      	bge.n	31d70 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   31d66:	f7fe fba5 	bl	304b4 <__errno>
   31d6a:	6800      	ldr	r0, [r0, #0]
   31d6c:	4240      	negs	r0, r0
	}

	return 0;
}
   31d6e:	bd08      	pop	{r3, pc}
	return 0;
   31d70:	2000      	movs	r0, #0
   31d72:	e7fc      	b.n	31d6e <mqtt_client_tcp_disconnect+0x14>

00031d74 <k_uptime_get>:
{
   31d74:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   31d76:	f003 fb2a 	bl	353ce <z_impl_k_uptime_ticks>
   31d7a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   31d7e:	fba0 2304 	umull	r2, r3, r0, r4
   31d82:	fb04 3301 	mla	r3, r4, r1, r3
   31d86:	0bd0      	lsrs	r0, r2, #15
}
   31d88:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   31d8c:	0bd9      	lsrs	r1, r3, #15
   31d8e:	bd10      	pop	{r4, pc}

00031d90 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   31d90:	b538      	push	{r3, r4, r5, lr}
   31d92:	4604      	mov	r4, r0
   31d94:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   31d96:	6f42      	ldr	r2, [r0, #116]	; 0x74
   31d98:	2100      	movs	r1, #0
   31d9a:	6f00      	ldr	r0, [r0, #112]	; 0x70
   31d9c:	f003 fc13 	bl	355c6 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   31da0:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   31da2:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   31da4:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   31da6:	4413      	add	r3, r2
   31da8:	606b      	str	r3, [r5, #4]
}
   31daa:	bd38      	pop	{r3, r4, r5, pc}

00031dac <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   31dac:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   31dae:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   31db0:	4604      	mov	r4, r0
   31db2:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   31db4:	b153      	cbz	r3, 31dcc <event_notify+0x20>
		mqtt_mutex_unlock(client);
   31db6:	f7eb faf9 	bl	1d3ac <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   31dba:	4620      	mov	r0, r4
   31dbc:	4629      	mov	r1, r5
   31dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   31dc0:	4798      	blx	r3

		mqtt_mutex_lock(client);
   31dc2:	4620      	mov	r0, r4
	}
}
   31dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   31dc8:	f7eb bb0e 	b.w	1d3e8 <mqtt_mutex_lock>
}
   31dcc:	bd38      	pop	{r3, r4, r5, pc}

00031dce <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   31dce:	b530      	push	{r4, r5, lr}
   31dd0:	b089      	sub	sp, #36	; 0x24
   31dd2:	4604      	mov	r4, r0
   31dd4:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   31dd6:	f7eb fadf 	bl	1d398 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   31dda:	2100      	movs	r1, #0

	/* Reset internal state. */
	client_reset(client);

	if (notify) {
		struct mqtt_evt evt = {
   31ddc:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   31dde:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   31de2:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   31de6:	4668      	mov	r0, sp
   31de8:	f003 fbed 	bl	355c6 <memset>
   31dec:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   31dee:	4669      	mov	r1, sp
   31df0:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   31df2:	f88d 3000 	strb.w	r3, [sp]
   31df6:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   31df8:	f7ff ffd8 	bl	31dac <event_notify>
	}
}
   31dfc:	b009      	add	sp, #36	; 0x24
   31dfe:	bd30      	pop	{r4, r5, pc}

00031e00 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   31e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31e04:	460f      	mov	r7, r1
   31e06:	4690      	mov	r8, r2
   31e08:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   31e0a:	4605      	mov	r5, r0
   31e0c:	b320      	cbz	r0, 31e58 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   31e0e:	f7eb faeb 	bl	1d3e8 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   31e12:	6a2c      	ldr	r4, [r5, #32]
   31e14:	b1b4      	cbz	r4, 31e44 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   31e16:	4544      	cmp	r4, r8
   31e18:	4622      	mov	r2, r4
   31e1a:	4633      	mov	r3, r6
   31e1c:	bf28      	it	cs
   31e1e:	4642      	movcs	r2, r8
   31e20:	4639      	mov	r1, r7
   31e22:	4628      	mov	r0, r5
   31e24:	f7eb faaa 	bl	1d37c <mqtt_transport_read>
   31e28:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   31e2a:	b916      	cbnz	r6, 31e32 <read_publish_payload+0x32>
   31e2c:	f110 0f0b 	cmn.w	r0, #11
   31e30:	d008      	beq.n	31e44 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   31e32:	2c00      	cmp	r4, #0
   31e34:	dc0c      	bgt.n	31e50 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   31e36:	bf08      	it	eq
   31e38:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   31e3c:	4628      	mov	r0, r5
   31e3e:	4621      	mov	r1, r4
   31e40:	f7ff ffc5 	bl	31dce <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   31e44:	4628      	mov	r0, r5
   31e46:	f7eb fab1 	bl	1d3ac <mqtt_mutex_unlock>

	return ret;
}
   31e4a:	4620      	mov	r0, r4
   31e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   31e50:	6a2b      	ldr	r3, [r5, #32]
   31e52:	1b1b      	subs	r3, r3, r4
   31e54:	622b      	str	r3, [r5, #32]
   31e56:	e7f5      	b.n	31e44 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   31e58:	f06f 0415 	mvn.w	r4, #21
   31e5c:	e7f5      	b.n	31e4a <read_publish_payload+0x4a>

00031e5e <client_write>:
{
   31e5e:	b538      	push	{r3, r4, r5, lr}
   31e60:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   31e62:	f7eb fa73 	bl	1d34c <mqtt_transport_write>
	if (err_code < 0) {
   31e66:	1e04      	subs	r4, r0, #0
   31e68:	da05      	bge.n	31e76 <client_write+0x18>
		client_disconnect(client, err_code, true);
   31e6a:	4621      	mov	r1, r4
   31e6c:	4628      	mov	r0, r5
   31e6e:	f7ff ffae 	bl	31dce <client_disconnect.constprop.0>
}
   31e72:	4620      	mov	r0, r4
   31e74:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   31e76:	f7ff ff7d 	bl	31d74 <k_uptime_get>
	return 0;
   31e7a:	2400      	movs	r4, #0
   31e7c:	6168      	str	r0, [r5, #20]
   31e7e:	e7f8      	b.n	31e72 <client_write+0x14>

00031e80 <mqtt_client_init>:
{
   31e80:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   31e82:	4604      	mov	r4, r0
   31e84:	b1a0      	cbz	r0, 31eb0 <mqtt_client_init+0x30>
   31e86:	2280      	movs	r2, #128	; 0x80
   31e88:	2100      	movs	r1, #0
   31e8a:	f003 fb9c 	bl	355c6 <memset>
	MQTT_STATE_INIT(client);
   31e8e:	2300      	movs	r3, #0
   31e90:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   31e92:	4620      	mov	r0, r4
   31e94:	f003 f9d1 	bl	3523a <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   31e98:	2304      	movs	r3, #4
   31e9a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = MQTT_CLEAN_SESSION;
   31e9e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   31ea2:	f043 0302 	orr.w	r3, r3, #2
   31ea6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   31eaa:	233c      	movs	r3, #60	; 0x3c
   31eac:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   31eb0:	bd10      	pop	{r4, pc}

00031eb2 <mqtt_connect>:
{
   31eb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   31eb4:	4605      	mov	r5, r0
   31eb6:	2800      	cmp	r0, #0
   31eb8:	d03b      	beq.n	31f32 <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   31eba:	6c83      	ldr	r3, [r0, #72]	; 0x48
   31ebc:	2b00      	cmp	r3, #0
   31ebe:	d038      	beq.n	31f32 <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   31ec0:	f7eb fa92 	bl	1d3e8 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   31ec4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   31ec6:	b38b      	cbz	r3, 31f2c <mqtt_connect+0x7a>
   31ec8:	6eab      	ldr	r3, [r5, #104]	; 0x68
   31eca:	b37b      	cbz	r3, 31f2c <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   31ecc:	4628      	mov	r0, r5
   31ece:	f7eb fa33 	bl	1d338 <mqtt_transport_connect>
	if (err_code < 0) {
   31ed2:	1e04      	subs	r4, r0, #0
   31ed4:	db24      	blt.n	31f20 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   31ed6:	4669      	mov	r1, sp
   31ed8:	4628      	mov	r0, r5
   31eda:	f7ff ff59 	bl	31d90 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   31ede:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   31ee0:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   31ee2:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   31ee6:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   31ee8:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   31eea:	f7eb f981 	bl	1d1f0 <connect_request_encode>
	if (err_code < 0) {
   31eee:	1e04      	subs	r4, r0, #0
   31ef0:	db13      	blt.n	31f1a <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   31ef2:	e9dd 1200 	ldrd	r1, r2, [sp]
   31ef6:	4628      	mov	r0, r5
   31ef8:	1a52      	subs	r2, r2, r1
   31efa:	f7eb fa27 	bl	1d34c <mqtt_transport_write>
	if (err_code < 0) {
   31efe:	1e04      	subs	r4, r0, #0
   31f00:	db0b      	blt.n	31f1a <mqtt_connect+0x68>
   31f02:	f7ff ff37 	bl	31d74 <k_uptime_get>
	client->unacked_ping = 0;
   31f06:	2400      	movs	r4, #0
   31f08:	6168      	str	r0, [r5, #20]
   31f0a:	f885 407b 	strb.w	r4, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   31f0e:	4628      	mov	r0, r5
   31f10:	f7eb fa4c 	bl	1d3ac <mqtt_mutex_unlock>
}
   31f14:	4620      	mov	r0, r4
   31f16:	b003      	add	sp, #12
   31f18:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   31f1a:	4628      	mov	r0, r5
   31f1c:	f7eb fa3c 	bl	1d398 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   31f20:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   31f22:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   31f26:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   31f2a:	e7f0      	b.n	31f0e <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   31f2c:	f06f 040b 	mvn.w	r4, #11
   31f30:	e7f6      	b.n	31f20 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   31f32:	f06f 0415 	mvn.w	r4, #21
   31f36:	e7ed      	b.n	31f14 <mqtt_connect+0x62>

00031f38 <mqtt_publish>:
{
   31f38:	b570      	push	{r4, r5, r6, lr}
   31f3a:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   31f3c:	4605      	mov	r5, r0
{
   31f3e:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   31f40:	2800      	cmp	r0, #0
   31f42:	d03b      	beq.n	31fbc <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   31f44:	2900      	cmp	r1, #0
   31f46:	d039      	beq.n	31fbc <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   31f48:	f7eb fa4e 	bl	1d3e8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   31f4c:	4628      	mov	r0, r5
   31f4e:	a901      	add	r1, sp, #4
   31f50:	f7ff ff1e 	bl	31d90 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   31f54:	69ab      	ldr	r3, [r5, #24]
   31f56:	075b      	lsls	r3, r3, #29
   31f58:	d52d      	bpl.n	31fb6 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   31f5a:	4630      	mov	r0, r6
   31f5c:	a901      	add	r1, sp, #4
   31f5e:	f7ff fd1c 	bl	3199a <publish_encode>
	if (err_code < 0) {
   31f62:	1e04      	subs	r4, r0, #0
   31f64:	db1c      	blt.n	31fa0 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   31f66:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   31f68:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   31f6a:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   31f6c:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   31f6e:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   31f70:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   31f72:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   31f74:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   31f76:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   31f78:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   31f7a:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   31f7e:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   31f80:	f003 fb21 	bl	355c6 <memset>
	msg.msg_iov = io_vector;
   31f84:	ab03      	add	r3, sp, #12
   31f86:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   31f88:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   31f8a:	4628      	mov	r0, r5
   31f8c:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   31f8e:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   31f90:	f7eb f9e8 	bl	1d364 <mqtt_transport_write_msg>
	if (err_code < 0) {
   31f94:	1e04      	subs	r4, r0, #0
   31f96:	da09      	bge.n	31fac <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   31f98:	4621      	mov	r1, r4
   31f9a:	4628      	mov	r0, r5
   31f9c:	f7ff ff17 	bl	31dce <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   31fa0:	4628      	mov	r0, r5
   31fa2:	f7eb fa03 	bl	1d3ac <mqtt_mutex_unlock>
}
   31fa6:	4620      	mov	r0, r4
   31fa8:	b00e      	add	sp, #56	; 0x38
   31faa:	bd70      	pop	{r4, r5, r6, pc}
   31fac:	f7ff fee2 	bl	31d74 <k_uptime_get>
	return 0;
   31fb0:	2400      	movs	r4, #0
   31fb2:	6168      	str	r0, [r5, #20]
   31fb4:	e7f4      	b.n	31fa0 <mqtt_publish+0x68>
		return -ENOTCONN;
   31fb6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   31fba:	e7f1      	b.n	31fa0 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   31fbc:	f06f 0415 	mvn.w	r4, #21
   31fc0:	e7f1      	b.n	31fa6 <mqtt_publish+0x6e>

00031fc2 <mqtt_publish_qos1_ack>:
{
   31fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31fc4:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   31fc6:	4605      	mov	r5, r0
   31fc8:	b1f8      	cbz	r0, 3200a <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   31fca:	b1f1      	cbz	r1, 3200a <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   31fcc:	f7eb fa0c 	bl	1d3e8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   31fd0:	4669      	mov	r1, sp
   31fd2:	4628      	mov	r0, r5
   31fd4:	f7ff fedc 	bl	31d90 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   31fd8:	69ab      	ldr	r3, [r5, #24]
   31fda:	075b      	lsls	r3, r3, #29
   31fdc:	d512      	bpl.n	32004 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   31fde:	4620      	mov	r0, r4
   31fe0:	4669      	mov	r1, sp
   31fe2:	f7ff fd1b 	bl	31a1c <publish_ack_encode>
	if (err_code < 0) {
   31fe6:	1e04      	subs	r4, r0, #0
   31fe8:	db06      	blt.n	31ff8 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   31fea:	e9dd 1200 	ldrd	r1, r2, [sp]
   31fee:	4628      	mov	r0, r5
   31ff0:	1a52      	subs	r2, r2, r1
   31ff2:	f7ff ff34 	bl	31e5e <client_write>
   31ff6:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   31ff8:	4628      	mov	r0, r5
   31ffa:	f7eb f9d7 	bl	1d3ac <mqtt_mutex_unlock>
}
   31ffe:	4620      	mov	r0, r4
   32000:	b003      	add	sp, #12
   32002:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   32004:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   32008:	e7f6      	b.n	31ff8 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   3200a:	f06f 0415 	mvn.w	r4, #21
   3200e:	e7f6      	b.n	31ffe <mqtt_publish_qos1_ack+0x3c>

00032010 <mqtt_publish_qos2_release>:
{
   32010:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32012:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   32014:	4605      	mov	r5, r0
   32016:	b1f8      	cbz	r0, 32058 <mqtt_publish_qos2_release+0x48>
	NULL_PARAM_CHECK(param);
   32018:	b1f1      	cbz	r1, 32058 <mqtt_publish_qos2_release+0x48>
	mqtt_mutex_lock(client);
   3201a:	f7eb f9e5 	bl	1d3e8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3201e:	4669      	mov	r1, sp
   32020:	4628      	mov	r0, r5
   32022:	f7ff feb5 	bl	31d90 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   32026:	69ab      	ldr	r3, [r5, #24]
   32028:	075b      	lsls	r3, r3, #29
   3202a:	d512      	bpl.n	32052 <mqtt_publish_qos2_release+0x42>
	err_code = publish_release_encode(param, &packet);
   3202c:	4620      	mov	r0, r4
   3202e:	4669      	mov	r1, sp
   32030:	f7ff fcf9 	bl	31a26 <publish_release_encode>
	if (err_code < 0) {
   32034:	1e04      	subs	r4, r0, #0
   32036:	db06      	blt.n	32046 <mqtt_publish_qos2_release+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   32038:	e9dd 1200 	ldrd	r1, r2, [sp]
   3203c:	4628      	mov	r0, r5
   3203e:	1a52      	subs	r2, r2, r1
   32040:	f7ff ff0d 	bl	31e5e <client_write>
   32044:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   32046:	4628      	mov	r0, r5
   32048:	f7eb f9b0 	bl	1d3ac <mqtt_mutex_unlock>
}
   3204c:	4620      	mov	r0, r4
   3204e:	b003      	add	sp, #12
   32050:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   32052:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   32056:	e7f6      	b.n	32046 <mqtt_publish_qos2_release+0x36>
	NULL_PARAM_CHECK(client);
   32058:	f06f 0415 	mvn.w	r4, #21
   3205c:	e7f6      	b.n	3204c <mqtt_publish_qos2_release+0x3c>

0003205e <mqtt_disconnect>:
{
   3205e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   32060:	4605      	mov	r5, r0
   32062:	b310      	cbz	r0, 320aa <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   32064:	f7eb f9c0 	bl	1d3e8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   32068:	4669      	mov	r1, sp
   3206a:	4628      	mov	r0, r5
   3206c:	f7ff fe90 	bl	31d90 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   32070:	69ab      	ldr	r3, [r5, #24]
   32072:	075b      	lsls	r3, r3, #29
   32074:	d516      	bpl.n	320a4 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   32076:	4668      	mov	r0, sp
   32078:	f7eb f93a 	bl	1d2f0 <disconnect_encode>
	if (err_code < 0) {
   3207c:	1e04      	subs	r4, r0, #0
   3207e:	db0b      	blt.n	32098 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   32080:	e9dd 1200 	ldrd	r1, r2, [sp]
   32084:	4628      	mov	r0, r5
   32086:	1a52      	subs	r2, r2, r1
   32088:	f7ff fee9 	bl	31e5e <client_write>
	if (err_code < 0) {
   3208c:	1e04      	subs	r4, r0, #0
   3208e:	db03      	blt.n	32098 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   32090:	2100      	movs	r1, #0
   32092:	4628      	mov	r0, r5
   32094:	f7ff fe9b 	bl	31dce <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   32098:	4628      	mov	r0, r5
   3209a:	f7eb f987 	bl	1d3ac <mqtt_mutex_unlock>
}
   3209e:	4620      	mov	r0, r4
   320a0:	b003      	add	sp, #12
   320a2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   320a4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   320a8:	e7f6      	b.n	32098 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   320aa:	f06f 0415 	mvn.w	r4, #21
   320ae:	e7f6      	b.n	3209e <mqtt_disconnect+0x40>

000320b0 <mqtt_subscribe>:
{
   320b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   320b2:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   320b4:	4605      	mov	r5, r0
   320b6:	b1f8      	cbz	r0, 320f8 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   320b8:	b1f1      	cbz	r1, 320f8 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   320ba:	f7eb f995 	bl	1d3e8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   320be:	4669      	mov	r1, sp
   320c0:	4628      	mov	r0, r5
   320c2:	f7ff fe65 	bl	31d90 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   320c6:	69ab      	ldr	r3, [r5, #24]
   320c8:	075b      	lsls	r3, r3, #29
   320ca:	d512      	bpl.n	320f2 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   320cc:	4620      	mov	r0, r4
   320ce:	4669      	mov	r1, sp
   320d0:	f7ff fcae 	bl	31a30 <subscribe_encode>
	if (err_code < 0) {
   320d4:	1e04      	subs	r4, r0, #0
   320d6:	db06      	blt.n	320e6 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   320d8:	e9dd 1200 	ldrd	r1, r2, [sp]
   320dc:	4628      	mov	r0, r5
   320de:	1a52      	subs	r2, r2, r1
   320e0:	f7ff febd 	bl	31e5e <client_write>
   320e4:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   320e6:	4628      	mov	r0, r5
   320e8:	f7eb f960 	bl	1d3ac <mqtt_mutex_unlock>
}
   320ec:	4620      	mov	r0, r4
   320ee:	b003      	add	sp, #12
   320f0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   320f2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   320f6:	e7f6      	b.n	320e6 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   320f8:	f06f 0415 	mvn.w	r4, #21
   320fc:	e7f6      	b.n	320ec <mqtt_subscribe+0x3c>

000320fe <mqtt_ping>:
{
   320fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   32100:	4605      	mov	r5, r0
   32102:	b320      	cbz	r0, 3214e <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   32104:	f7eb f970 	bl	1d3e8 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   32108:	4669      	mov	r1, sp
   3210a:	4628      	mov	r0, r5
   3210c:	f7ff fe40 	bl	31d90 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   32110:	69ab      	ldr	r3, [r5, #24]
   32112:	075b      	lsls	r3, r3, #29
   32114:	d518      	bpl.n	32148 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   32116:	4668      	mov	r0, sp
   32118:	f7eb f8fc 	bl	1d314 <ping_request_encode>
	if (err_code < 0) {
   3211c:	1e04      	subs	r4, r0, #0
   3211e:	db0d      	blt.n	3213c <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   32120:	e9dd 1200 	ldrd	r1, r2, [sp]
   32124:	4628      	mov	r0, r5
   32126:	1a52      	subs	r2, r2, r1
   32128:	f7ff fe99 	bl	31e5e <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   3212c:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   32130:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   32132:	2b7f      	cmp	r3, #127	; 0x7f
   32134:	d002      	beq.n	3213c <mqtt_ping+0x3e>
		client->unacked_ping++;
   32136:	3301      	adds	r3, #1
   32138:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   3213c:	4628      	mov	r0, r5
   3213e:	f7eb f935 	bl	1d3ac <mqtt_mutex_unlock>
}
   32142:	4620      	mov	r0, r4
   32144:	b003      	add	sp, #12
   32146:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   32148:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3214c:	e7f6      	b.n	3213c <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   3214e:	f06f 0415 	mvn.w	r4, #21
   32152:	e7f6      	b.n	32142 <mqtt_ping+0x44>

00032154 <mqtt_live>:
{
   32154:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   32156:	4606      	mov	r6, r0
   32158:	b300      	cbz	r0, 3219c <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3215a:	f7eb f945 	bl	1d3e8 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3215e:	6974      	ldr	r4, [r6, #20]
   32160:	f7ff fe08 	bl	31d74 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   32164:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   32166:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   3216a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3216e:	b19c      	cbz	r4, 32198 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   32170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   32174:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   32176:	4284      	cmp	r4, r0
   32178:	d80d      	bhi.n	32196 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3217a:	4630      	mov	r0, r6
   3217c:	f7ff ffbf 	bl	320fe <mqtt_ping>
		ping_sent = true;
   32180:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   32182:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   32184:	4630      	mov	r0, r6
   32186:	f7eb f911 	bl	1d3ac <mqtt_mutex_unlock>
		return -EAGAIN;
   3218a:	2c00      	cmp	r4, #0
   3218c:	bf08      	it	eq
   3218e:	f06f 050a 	mvneq.w	r5, #10
}
   32192:	4628      	mov	r0, r5
   32194:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   32196:	2400      	movs	r4, #0
	int err_code = 0;
   32198:	4625      	mov	r5, r4
   3219a:	e7f3      	b.n	32184 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3219c:	f06f 0515 	mvn.w	r5, #21
   321a0:	e7f7      	b.n	32192 <mqtt_live+0x3e>

000321a2 <mqtt_keepalive_time_left>:
{
   321a2:	b538      	push	{r3, r4, r5, lr}
   321a4:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   321a6:	6945      	ldr	r5, [r0, #20]
   321a8:	f7ff fde4 	bl	31d74 <k_uptime_get>
	int32_t diff = k_uptime_get_32() - last_activity;
   321ac:	1b43      	subs	r3, r0, r5
	uint32_t keepalive_ms = 1000U * client->keepalive;
   321ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   321b2:	f8b4 2078 	ldrh.w	r2, [r4, #120]	; 0x78
		return 0;
   321b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   321ba:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   321bc:	b11a      	cbz	r2, 321c6 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   321be:	4298      	cmp	r0, r3
   321c0:	d904      	bls.n	321cc <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   321c2:	1ac0      	subs	r0, r0, r3
}
   321c4:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   321c6:	f04f 30ff 	mov.w	r0, #4294967295
   321ca:	e7fb      	b.n	321c4 <mqtt_keepalive_time_left+0x22>
		return 0;
   321cc:	2000      	movs	r0, #0
   321ce:	e7f9      	b.n	321c4 <mqtt_keepalive_time_left+0x22>

000321d0 <mqtt_input>:
{
   321d0:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   321d2:	4605      	mov	r5, r0
   321d4:	b1d0      	cbz	r0, 3220c <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   321d6:	f7eb f907 	bl	1d3e8 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   321da:	69ab      	ldr	r3, [r5, #24]
   321dc:	079b      	lsls	r3, r3, #30
   321de:	d50f      	bpl.n	32200 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   321e0:	6a2b      	ldr	r3, [r5, #32]
   321e2:	b983      	cbnz	r3, 32206 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   321e4:	4628      	mov	r0, r5
   321e6:	f7ff fc85 	bl	31af4 <mqtt_handle_rx>
	if (err_code < 0) {
   321ea:	1e04      	subs	r4, r0, #0
   321ec:	da03      	bge.n	321f6 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   321ee:	4621      	mov	r1, r4
   321f0:	4628      	mov	r0, r5
   321f2:	f7ff fdec 	bl	31dce <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   321f6:	4628      	mov	r0, r5
   321f8:	f7eb f8d8 	bl	1d3ac <mqtt_mutex_unlock>
}
   321fc:	4620      	mov	r0, r4
   321fe:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   32200:	f06f 040c 	mvn.w	r4, #12
   32204:	e7f7      	b.n	321f6 <mqtt_input+0x26>
		return -EBUSY;
   32206:	f06f 040f 	mvn.w	r4, #15
   3220a:	e7f4      	b.n	321f6 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3220c:	f06f 0415 	mvn.w	r4, #21
   32210:	e7f4      	b.n	321fc <mqtt_input+0x2c>

00032212 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   32212:	2301      	movs	r3, #1
   32214:	f7ff bdf4 	b.w	31e00 <read_publish_payload>

00032218 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   32218:	b570      	push	{r4, r5, r6, lr}
   3221a:	4606      	mov	r6, r0
   3221c:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   3221e:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   32220:	42ac      	cmp	r4, r5
   32222:	d301      	bcc.n	32228 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   32224:	2000      	movs	r0, #0
}
   32226:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   32228:	4621      	mov	r1, r4
   3222a:	4630      	mov	r0, r6
   3222c:	1b2a      	subs	r2, r5, r4
   3222e:	f7ff fff0 	bl	32212 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   32232:	2800      	cmp	r0, #0
   32234:	dbf7      	blt.n	32226 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   32236:	d001      	beq.n	3223c <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   32238:	4404      	add	r4, r0
   3223a:	e7f1      	b.n	32220 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3223c:	f06f 0004 	mvn.w	r0, #4
   32240:	e7f1      	b.n	32226 <mqtt_readall_publish_payload+0xe>

00032242 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   32242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sockaddr *broker = client->broker;
   32244:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   32246:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   32248:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3224a:	f44f 7281 	mov.w	r2, #258	; 0x102
   3224e:	2101      	movs	r1, #1
   32250:	f7e3 f9a8 	bl	155a4 <z_impl_zsock_socket>
						  SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   32254:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   32256:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   32258:	da05      	bge.n	32266 <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   3225a:	f7fe f92b 	bl	304b4 <__errno>
   3225e:	6800      	ldr	r0, [r0, #0]
   32260:	4240      	negs	r0, r0
}
   32262:	b003      	add	sp, #12
   32264:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   32266:	2304      	movs	r3, #4
   32268:	2205      	movs	r2, #5
   3226a:	9300      	str	r3, [sp, #0]
   3226c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   32270:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   32274:	f7fc fc4a 	bl	2eb0c <z_impl_zsock_setsockopt>
	if (ret < 0) {
   32278:	2800      	cmp	r0, #0
   3227a:	da03      	bge.n	32284 <mqtt_client_tls_connect+0x42>
	(void) zsock_close(client->transport.tls.sock);
   3227c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3227e:	f7fc fb73 	bl	2e968 <z_impl_zsock_close>
   32282:	e7ea      	b.n	3225a <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   32284:	6b63      	ldr	r3, [r4, #52]	; 0x34
   32286:	bb03      	cbnz	r3, 322ca <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   32288:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3228a:	bb63      	cbnz	r3, 322e6 <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   3228c:	6c26      	ldr	r6, [r4, #64]	; 0x40
   3228e:	2e00      	cmp	r6, #0
   32290:	d137      	bne.n	32302 <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   32292:	6c63      	ldr	r3, [r4, #68]	; 0x44
   32294:	2b01      	cmp	r3, #1
   32296:	d10b      	bne.n	322b0 <mqtt_client_tls_connect+0x6e>
   32298:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3229a:	2304      	movs	r3, #4
   3229c:	220a      	movs	r2, #10
   3229e:	9300      	str	r3, [sp, #0]
   322a0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   322a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   322a8:	f7fc fc30 	bl	2eb0c <z_impl_zsock_setsockopt>
		if (ret < 0) {
   322ac:	2800      	cmp	r0, #0
   322ae:	dbe5      	blt.n	3227c <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   322b0:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   322b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   322b4:	2b01      	cmp	r3, #1
   322b6:	bf0c      	ite	eq
   322b8:	2208      	moveq	r2, #8
   322ba:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   322bc:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   322be:	f7fc fb77 	bl	2e9b0 <z_impl_zsock_connect>
	if (ret < 0) {
   322c2:	2800      	cmp	r0, #0
   322c4:	dbda      	blt.n	3227c <mqtt_client_tls_connect+0x3a>
	return 0;
   322c6:	2000      	movs	r0, #0
   322c8:	e7cb      	b.n	32262 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   322ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
   322cc:	2a00      	cmp	r2, #0
   322ce:	d0db      	beq.n	32288 <mqtt_client_tls_connect+0x46>
   322d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   322d2:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   322d4:	9200      	str	r2, [sp, #0]
   322d6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   322da:	2203      	movs	r2, #3
   322dc:	f7fc fc16 	bl	2eb0c <z_impl_zsock_setsockopt>
		if (ret < 0) {
   322e0:	2800      	cmp	r0, #0
   322e2:	dad1      	bge.n	32288 <mqtt_client_tls_connect+0x46>
   322e4:	e7ca      	b.n	3227c <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   322e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   322e8:	2a00      	cmp	r2, #0
   322ea:	d0cf      	beq.n	3228c <mqtt_client_tls_connect+0x4a>
   322ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   322ee:	0092      	lsls	r2, r2, #2
   322f0:	9200      	str	r2, [sp, #0]
   322f2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   322f6:	2201      	movs	r2, #1
   322f8:	f7fc fc08 	bl	2eb0c <z_impl_zsock_setsockopt>
		if (ret < 0) {
   322fc:	2800      	cmp	r0, #0
   322fe:	dac5      	bge.n	3228c <mqtt_client_tls_connect+0x4a>
   32300:	e7bc      	b.n	3227c <mqtt_client_tls_connect+0x3a>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   32302:	4630      	mov	r0, r6
   32304:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   32306:	f7df f8fb 	bl	11500 <strlen>
   3230a:	2202      	movs	r2, #2
   3230c:	9000      	str	r0, [sp, #0]
   3230e:	4633      	mov	r3, r6
   32310:	f44f 718d 	mov.w	r1, #282	; 0x11a
   32314:	4638      	mov	r0, r7
   32316:	f7fc fbf9 	bl	2eb0c <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3231a:	2800      	cmp	r0, #0
   3231c:	dab9      	bge.n	32292 <mqtt_client_tls_connect+0x50>
   3231e:	e7ad      	b.n	3227c <mqtt_client_tls_connect+0x3a>

00032320 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   32320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   32324:	2400      	movs	r4, #0
{
   32326:	4606      	mov	r6, r0
   32328:	460f      	mov	r7, r1
   3232a:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3232c:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3232e:	42ac      	cmp	r4, r5
   32330:	d301      	bcc.n	32336 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   32332:	2000      	movs	r0, #0
   32334:	e00d      	b.n	32352 <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   32336:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   32338:	2300      	movs	r3, #0
   3233a:	e9cd 8800 	strd	r8, r8, [sp]
   3233e:	1b2a      	subs	r2, r5, r4
   32340:	1939      	adds	r1, r7, r4
   32342:	f7fc fb5c 	bl	2e9fe <z_impl_zsock_sendto>
		if (ret < 0) {
   32346:	1e03      	subs	r3, r0, #0
   32348:	da06      	bge.n	32358 <mqtt_client_tls_write+0x38>
			return -errno;
   3234a:	f7fe f8b3 	bl	304b4 <__errno>
   3234e:	6800      	ldr	r0, [r0, #0]
   32350:	4240      	negs	r0, r0
}
   32352:	b002      	add	sp, #8
   32354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   32358:	441c      	add	r4, r3
   3235a:	e7e8      	b.n	3232e <mqtt_client_tls_write+0xe>

0003235c <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   3235c:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   3235e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   32360:	2200      	movs	r2, #0
   32362:	f7fc fb7c 	bl	2ea5e <z_impl_zsock_sendmsg>
	if (ret < 0) {
   32366:	2800      	cmp	r0, #0
   32368:	da04      	bge.n	32374 <mqtt_client_tls_write_msg+0x18>
		return -errno;
   3236a:	f7fe f8a3 	bl	304b4 <__errno>
   3236e:	6800      	ldr	r0, [r0, #0]
   32370:	4240      	negs	r0, r0
	}

	return 0;
}
   32372:	bd08      	pop	{r3, pc}
	return 0;
   32374:	2000      	movs	r0, #0
   32376:	e7fc      	b.n	32372 <mqtt_client_tls_write_msg+0x16>

00032378 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   32378:	b513      	push	{r0, r1, r4, lr}
   3237a:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   3237c:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   3237e:	bf14      	ite	ne
   32380:	4623      	movne	r3, r4
   32382:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   32384:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   32386:	e9cd 4400 	strd	r4, r4, [sp]
   3238a:	f7fc fb8f 	bl	2eaac <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3238e:	2800      	cmp	r0, #0
   32390:	da03      	bge.n	3239a <mqtt_client_tls_read+0x22>
		return -errno;
   32392:	f7fe f88f 	bl	304b4 <__errno>
   32396:	6800      	ldr	r0, [r0, #0]
   32398:	4240      	negs	r0, r0
	}

	return ret;
}
   3239a:	b002      	add	sp, #8
   3239c:	bd10      	pop	{r4, pc}

0003239e <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3239e:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   323a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   323a2:	f7fc fae1 	bl	2e968 <z_impl_zsock_close>
	if (ret < 0) {
   323a6:	2800      	cmp	r0, #0
   323a8:	da04      	bge.n	323b4 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   323aa:	f7fe f883 	bl	304b4 <__errno>
   323ae:	6800      	ldr	r0, [r0, #0]
   323b0:	4240      	negs	r0, r0
	}

	return 0;
}
   323b2:	bd08      	pop	{r3, pc}
	return 0;
   323b4:	2000      	movs	r0, #0
   323b6:	e7fc      	b.n	323b2 <mqtt_client_tls_disconnect+0x14>

000323b8 <base64_char>:
	if (value < 26) {
   323b8:	2819      	cmp	r0, #25
   323ba:	dc01      	bgt.n	323c0 <base64_char+0x8>
		return value + 'A';
   323bc:	3041      	adds	r0, #65	; 0x41
   323be:	4770      	bx	lr
	} else if (value < 52) {
   323c0:	2833      	cmp	r0, #51	; 0x33
   323c2:	dc01      	bgt.n	323c8 <base64_char+0x10>
		return value + 'a' - 26;
   323c4:	3047      	adds	r0, #71	; 0x47
   323c6:	4770      	bx	lr
	} else if (value < 62) {
   323c8:	283d      	cmp	r0, #61	; 0x3d
   323ca:	dc01      	bgt.n	323d0 <base64_char+0x18>
		return value + '0' - 52;
   323cc:	3804      	subs	r0, #4
   323ce:	4770      	bx	lr
	} else if (value == 62) {
   323d0:	283e      	cmp	r0, #62	; 0x3e
		return '_';
   323d2:	bf0c      	ite	eq
   323d4:	202d      	moveq	r0, #45	; 0x2d
   323d6:	205f      	movne	r0, #95	; 0x5f
}
   323d8:	4770      	bx	lr

000323da <base64_outch>:
	if (st->overflowed) {
   323da:	7b02      	ldrb	r2, [r0, #12]
{
   323dc:	b510      	push	{r4, lr}
	if (st->overflowed) {
   323de:	b922      	cbnz	r2, 323ea <base64_outch+0x10>
	if (st->len < 2) {
   323e0:	6883      	ldr	r3, [r0, #8]
   323e2:	2b01      	cmp	r3, #1
   323e4:	d802      	bhi.n	323ec <base64_outch+0x12>
		st->overflowed = true;
   323e6:	2301      	movs	r3, #1
   323e8:	7303      	strb	r3, [r0, #12]
}
   323ea:	bd10      	pop	{r4, pc}
	*st->buf++ = ch;
   323ec:	6843      	ldr	r3, [r0, #4]
   323ee:	1c5c      	adds	r4, r3, #1
   323f0:	6044      	str	r4, [r0, #4]
   323f2:	7019      	strb	r1, [r3, #0]
	st->len--;
   323f4:	6883      	ldr	r3, [r0, #8]
   323f6:	3b01      	subs	r3, #1
   323f8:	6083      	str	r3, [r0, #8]
	*st->buf = 0;
   323fa:	6843      	ldr	r3, [r0, #4]
   323fc:	701a      	strb	r2, [r3, #0]
   323fe:	e7f4      	b.n	323ea <base64_outch+0x10>

00032400 <base64_flush>:
	if (st->pending < 1) {
   32400:	6903      	ldr	r3, [r0, #16]
{
   32402:	b510      	push	{r4, lr}
	if (st->pending < 1) {
   32404:	2b00      	cmp	r3, #0
{
   32406:	4604      	mov	r4, r0
	if (st->pending < 1) {
   32408:	dd35      	ble.n	32476 <base64_flush+0x76>
	base64_outch(st, base64_char(st->wip[0] >> 2));
   3240a:	7b40      	ldrb	r0, [r0, #13]
   3240c:	0880      	lsrs	r0, r0, #2
   3240e:	f7ff ffd3 	bl	323b8 <base64_char>
   32412:	b2c1      	uxtb	r1, r0
   32414:	4620      	mov	r0, r4
   32416:	f7ff ffe0 	bl	323da <base64_outch>
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   3241a:	7b63      	ldrb	r3, [r4, #13]
				(st->wip[1] >> 4)));
   3241c:	7ba0      	ldrb	r0, [r4, #14]
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   3241e:	011b      	lsls	r3, r3, #4
   32420:	f003 0330 	and.w	r3, r3, #48	; 0x30
   32424:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   32428:	f7ff ffc6 	bl	323b8 <base64_char>
   3242c:	b2c1      	uxtb	r1, r0
   3242e:	4620      	mov	r0, r4
   32430:	f7ff ffd3 	bl	323da <base64_outch>
	if (st->pending >= 2) {
   32434:	6923      	ldr	r3, [r4, #16]
   32436:	2b01      	cmp	r3, #1
   32438:	dd0c      	ble.n	32454 <base64_flush+0x54>
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   3243a:	7ba3      	ldrb	r3, [r4, #14]
				(st->wip[2] >> 6)));
   3243c:	7be0      	ldrb	r0, [r4, #15]
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   3243e:	009b      	lsls	r3, r3, #2
   32440:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   32444:	ea43 1090 	orr.w	r0, r3, r0, lsr #6
   32448:	f7ff ffb6 	bl	323b8 <base64_char>
   3244c:	b2c1      	uxtb	r1, r0
   3244e:	4620      	mov	r0, r4
   32450:	f7ff ffc3 	bl	323da <base64_outch>
	if (st->pending >= 3) {
   32454:	6923      	ldr	r3, [r4, #16]
   32456:	2b02      	cmp	r3, #2
   32458:	dd08      	ble.n	3246c <base64_flush+0x6c>
		base64_outch(st, base64_char(st->wip[2] & 0x3f));
   3245a:	7be0      	ldrb	r0, [r4, #15]
   3245c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   32460:	f7ff ffaa 	bl	323b8 <base64_char>
   32464:	b2c1      	uxtb	r1, r0
   32466:	4620      	mov	r0, r4
   32468:	f7ff ffb7 	bl	323da <base64_outch>
	st->pending = 0;
   3246c:	2300      	movs	r3, #0
   3246e:	6123      	str	r3, [r4, #16]
   32470:	f8a4 300d 	strh.w	r3, [r4, #13]
   32474:	73e3      	strb	r3, [r4, #15]
}
   32476:	bd10      	pop	{r4, pc}

00032478 <base64_append_bytes>:
{
   32478:	b570      	push	{r4, r5, r6, lr}
   3247a:	4604      	mov	r4, r0
   3247c:	4615      	mov	r5, r2
	while (len-- > 0) {
   3247e:	1846      	adds	r6, r0, r1
   32480:	42b4      	cmp	r4, r6
   32482:	d101      	bne.n	32488 <base64_append_bytes+0x10>
}
   32484:	2000      	movs	r0, #0
   32486:	bd70      	pop	{r4, r5, r6, pc}
	st->wip[st->pending++] = byte;
   32488:	692b      	ldr	r3, [r5, #16]
		base64_addbyte(st, *bytes++);
   3248a:	f814 1b01 	ldrb.w	r1, [r4], #1
	st->wip[st->pending++] = byte;
   3248e:	1c5a      	adds	r2, r3, #1
	if (st->pending == 3) {
   32490:	2a03      	cmp	r2, #3
	st->wip[st->pending++] = byte;
   32492:	442b      	add	r3, r5
   32494:	612a      	str	r2, [r5, #16]
   32496:	7359      	strb	r1, [r3, #13]
	if (st->pending == 3) {
   32498:	d1f2      	bne.n	32480 <base64_append_bytes+0x8>
		base64_flush(st);
   3249a:	4628      	mov	r0, r5
   3249c:	f7ff ffb0 	bl	32400 <base64_flush>
   324a0:	e7ee      	b.n	32480 <base64_append_bytes+0x8>

000324a2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324a2:	6843      	ldr	r3, [r0, #4]
}
   324a4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324a6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   324a8:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   324aa:	600b      	str	r3, [r1, #0]
}
   324ac:	4770      	bx	lr

000324ae <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324ae:	6843      	ldr	r3, [r0, #4]
   324b0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   324b2:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   324b4:	4042      	eors	r2, r0
   324b6:	400a      	ands	r2, r1
   324b8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   324ba:	605a      	str	r2, [r3, #4]
}
   324bc:	2000      	movs	r0, #0
   324be:	4770      	bx	lr

000324c0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324c0:	6843      	ldr	r3, [r0, #4]
}
   324c2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324c4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   324c6:	6099      	str	r1, [r3, #8]
}
   324c8:	4770      	bx	lr

000324ca <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324ca:	6843      	ldr	r3, [r0, #4]
}
   324cc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324ce:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   324d0:	60d9      	str	r1, [r3, #12]
}
   324d2:	4770      	bx	lr

000324d4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324d4:	6843      	ldr	r3, [r0, #4]
}
   324d6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   324d8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   324da:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   324dc:	404b      	eors	r3, r1
    p_reg->OUT = value;
   324de:	6053      	str	r3, [r2, #4]
}
   324e0:	4770      	bx	lr

000324e2 <nrf_gpio_cfg_sense_set>:
{
   324e2:	b513      	push	{r0, r1, r4, lr}
   324e4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   324e6:	a801      	add	r0, sp, #4
{
   324e8:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   324ea:	f7eb f8f9 	bl	1d6e0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   324ee:	9b01      	ldr	r3, [sp, #4]
   324f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   324f4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   324f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   324fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   32500:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   32504:	b002      	add	sp, #8
   32506:	bd10      	pop	{r4, pc}

00032508 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   32508:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   3250a:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   3250c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   3250e:	b1fd      	cbz	r5, 32550 <_spi_context_cs_control.isra.0+0x48>
   32510:	68ab      	ldr	r3, [r5, #8]
   32512:	b1eb      	cbz	r3, 32550 <_spi_context_cs_control.isra.0+0x48>
   32514:	6818      	ldr	r0, [r3, #0]
   32516:	b1d8      	cbz	r0, 32550 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   32518:	b151      	cbz	r1, 32530 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3251a:	7a19      	ldrb	r1, [r3, #8]
   3251c:	2201      	movs	r2, #1
   3251e:	f7eb fc89 	bl	1de34 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   32522:	6823      	ldr	r3, [r4, #0]
   32524:	689b      	ldr	r3, [r3, #8]
   32526:	6858      	ldr	r0, [r3, #4]
}
   32528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   3252c:	f002 bf51 	b.w	353d2 <z_impl_k_busy_wait>
			if (!force_off &&
   32530:	b912      	cbnz	r2, 32538 <_spi_context_cs_control.isra.0+0x30>
   32532:	88aa      	ldrh	r2, [r5, #4]
   32534:	0492      	lsls	r2, r2, #18
   32536:	d40b      	bmi.n	32550 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   32538:	6858      	ldr	r0, [r3, #4]
   3253a:	f002 ff4a 	bl	353d2 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3253e:	6823      	ldr	r3, [r4, #0]
   32540:	2200      	movs	r2, #0
   32542:	689b      	ldr	r3, [r3, #8]
   32544:	7a19      	ldrb	r1, [r3, #8]
   32546:	6818      	ldr	r0, [r3, #0]
}
   32548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3254c:	f7eb bc72 	b.w	1de34 <gpio_pin_set>
}
   32550:	bd38      	pop	{r3, r4, r5, pc}

00032552 <spi_context_unlock_unconditionally>:
{
   32552:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   32554:	2201      	movs	r2, #1
   32556:	2100      	movs	r1, #0
{
   32558:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   3255a:	f7ff ffd5 	bl	32508 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   3255e:	6923      	ldr	r3, [r4, #16]
   32560:	b933      	cbnz	r3, 32570 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   32562:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   32564:	f104 0008 	add.w	r0, r4, #8
}
   32568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3256c:	f7f7 b9f8 	b.w	29960 <z_impl_k_sem_give>
   32570:	bd10      	pop	{r4, pc}

00032572 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   32572:	6900      	ldr	r0, [r0, #16]
{
   32574:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   32576:	6803      	ldr	r3, [r0, #0]
   32578:	428b      	cmp	r3, r1
   3257a:	d106      	bne.n	3258a <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   3257c:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   32580:	b934      	cbnz	r4, 32590 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   32582:	f7ff ffe6 	bl	32552 <spi_context_unlock_unconditionally>
	return 0;
   32586:	4620      	mov	r0, r4
}
   32588:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3258a:	f06f 0015 	mvn.w	r0, #21
   3258e:	e7fb      	b.n	32588 <spi_nrfx_release+0x16>
		return -EBUSY;
   32590:	f06f 000f 	mvn.w	r0, #15
   32594:	e7f8      	b.n	32588 <spi_nrfx_release+0x16>

00032596 <endtx_isr>:
	return config->uarte_regs;
   32596:	6843      	ldr	r3, [r0, #4]
   32598:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   3259a:	f04f 0120 	mov.w	r1, #32
   3259e:	f3ef 8211 	mrs	r2, BASEPRI
   325a2:	f381 8811 	msr	BASEPRI, r1
   325a6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   325aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   325ae:	b131      	cbz	r1, 325be <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   325b0:	2100      	movs	r1, #0
   325b2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   325b6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   325ba:	2101      	movs	r1, #1
   325bc:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   325be:	f382 8811 	msr	BASEPRI, r2
   325c2:	f3bf 8f6f 	isb	sy
}
   325c6:	4770      	bx	lr

000325c8 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   325c8:	6843      	ldr	r3, [r0, #4]
{
   325ca:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   325cc:	681c      	ldr	r4, [r3, #0]
{
   325ce:	4605      	mov	r5, r0
    return p_reg->INTENSET & mask;
   325d0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   325d4:	05da      	lsls	r2, r3, #23
   325d6:	d504      	bpl.n	325e2 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   325d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   325dc:	b10b      	cbz	r3, 325e2 <uarte_nrfx_isr_int+0x1a>
		endtx_isr(dev);
   325de:	f7ff ffda 	bl	32596 <endtx_isr>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   325e2:	686b      	ldr	r3, [r5, #4]
   325e4:	685b      	ldr	r3, [r3, #4]
   325e6:	06db      	lsls	r3, r3, #27
   325e8:	d51a      	bpl.n	32620 <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
   325ea:	f04f 0320 	mov.w	r3, #32
   325ee:	f3ef 8211 	mrs	r2, BASEPRI
   325f2:	f383 8811 	msr	BASEPRI, r3
   325f6:	f3bf 8f6f 	isb	sy
   325fa:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   325fe:	b113      	cbz	r3, 32606 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   32600:	2300      	movs	r3, #0
   32602:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   32606:	692b      	ldr	r3, [r5, #16]
   32608:	68db      	ldr	r3, [r3, #12]
   3260a:	b10b      	cbz	r3, 32610 <uarte_nrfx_isr_int+0x48>
   3260c:	691b      	ldr	r3, [r3, #16]
   3260e:	b91b      	cbnz	r3, 32618 <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
   32610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   32614:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	__asm__ volatile(
   32618:	f382 8811 	msr	BASEPRI, r2
   3261c:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   32620:	692b      	ldr	r3, [r5, #16]
   32622:	68db      	ldr	r3, [r3, #12]
   32624:	b15b      	cbz	r3, 3263e <uarte_nrfx_isr_int+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32626:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3262a:	b14a      	cbz	r2, 32640 <uarte_nrfx_isr_int+0x78>
		data->int_driven->fifo_fill_lock = 0;
   3262c:	2200      	movs	r2, #0
		if (data->int_driven->disable_tx_irq) {
   3262e:	7b99      	ldrb	r1, [r3, #14]
		data->int_driven->fifo_fill_lock = 0;
   32630:	611a      	str	r2, [r3, #16]
		if (data->int_driven->disable_tx_irq) {
   32632:	b129      	cbz	r1, 32640 <uarte_nrfx_isr_int+0x78>
    p_reg->INTENCLR = mask;
   32634:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   32638:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3263c:	739a      	strb	r2, [r3, #14]
}
   3263e:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32640:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   32644:	b122      	cbz	r2, 32650 <uarte_nrfx_isr_int+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32646:	2200      	movs	r2, #0
   32648:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   3264c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (data->int_driven->cb) {
   32650:	681a      	ldr	r2, [r3, #0]
   32652:	2a00      	cmp	r2, #0
   32654:	d0f3      	beq.n	3263e <uarte_nrfx_isr_int+0x76>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   32656:	4628      	mov	r0, r5
}
   32658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3265c:	6859      	ldr	r1, [r3, #4]
   3265e:	4710      	bx	r2

00032660 <uarte_nrfx_config_get>:
{
   32660:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   32662:	6902      	ldr	r2, [r0, #16]
   32664:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   32668:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3266c:	2000      	movs	r0, #0
   3266e:	4770      	bx	lr

00032670 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   32670:	6843      	ldr	r3, [r0, #4]
   32672:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   32674:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   32678:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3267c:	4770      	bx	lr

0003267e <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   3267e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   32680:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32682:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   32686:	b940      	cbnz	r0, 3269a <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   32688:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3268a:	0712      	lsls	r2, r2, #28
   3268c:	d406      	bmi.n	3269c <is_tx_ready+0x1e>
   3268e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   32692:	3800      	subs	r0, #0
   32694:	bf18      	it	ne
   32696:	2001      	movne	r0, #1
   32698:	4770      	bx	lr
   3269a:	2001      	movs	r0, #1
}
   3269c:	4770      	bx	lr

0003269e <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   3269e:	4770      	bx	lr

000326a0 <user_callback>:
	if (data->async->user_callback) {
   326a0:	6903      	ldr	r3, [r0, #16]
   326a2:	691a      	ldr	r2, [r3, #16]
   326a4:	6813      	ldr	r3, [r2, #0]
   326a6:	b10b      	cbz	r3, 326ac <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   326a8:	6852      	ldr	r2, [r2, #4]
   326aa:	4718      	bx	r3
}
   326ac:	4770      	bx	lr

000326ae <notify_uart_rx_rdy>:
{
   326ae:	b570      	push	{r4, r5, r6, lr}
   326b0:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   326b2:	6906      	ldr	r6, [r0, #16]
{
   326b4:	4604      	mov	r4, r0
   326b6:	460d      	mov	r5, r1
	struct uart_event evt = {
   326b8:	2214      	movs	r2, #20
   326ba:	2100      	movs	r1, #0
   326bc:	a801      	add	r0, sp, #4
   326be:	f002 ff82 	bl	355c6 <memset>
   326c2:	2302      	movs	r3, #2
   326c4:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   326c8:	6933      	ldr	r3, [r6, #16]
	user_callback(dev, &evt);
   326ca:	4620      	mov	r0, r4
	struct uart_event evt = {
   326cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   326ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	user_callback(dev, &evt);
   326d0:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   326d2:	e9cd 3503 	strd	r3, r5, [sp, #12]
   326d6:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   326d8:	f7ff ffe2 	bl	326a0 <user_callback>
}
   326dc:	b006      	add	sp, #24
   326de:	bd70      	pop	{r4, r5, r6, pc}

000326e0 <notify_rx_buf_release>:
{
   326e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   326e2:	680f      	ldr	r7, [r1, #0]
{
   326e4:	4606      	mov	r6, r0
   326e6:	460c      	mov	r4, r1
   326e8:	4615      	mov	r5, r2
   326ea:	b087      	sub	sp, #28
	if (*buf) {
   326ec:	b187      	cbz	r7, 32710 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   326ee:	2100      	movs	r1, #0
   326f0:	2214      	movs	r2, #20
   326f2:	a801      	add	r0, sp, #4
   326f4:	f002 ff67 	bl	355c6 <memset>
   326f8:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   326fa:	4630      	mov	r0, r6
   326fc:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   32700:	f88d 3004 	strb.w	r3, [sp, #4]
   32704:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   32706:	f7ff ffcb 	bl	326a0 <user_callback>
		if (clear) {
   3270a:	b10d      	cbz	r5, 32710 <notify_rx_buf_release+0x30>
			*buf = NULL;
   3270c:	2300      	movs	r3, #0
   3270e:	6023      	str	r3, [r4, #0]
}
   32710:	b007      	add	sp, #28
   32712:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032714 <notify_rx_disable>:
{
   32714:	b510      	push	{r4, lr}
   32716:	b086      	sub	sp, #24
   32718:	4604      	mov	r4, r0
	struct uart_event evt = {
   3271a:	2214      	movs	r2, #20
   3271c:	2100      	movs	r1, #0
   3271e:	a801      	add	r0, sp, #4
   32720:	f002 ff51 	bl	355c6 <memset>
   32724:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   32726:	4620      	mov	r0, r4
   32728:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   3272a:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   3272e:	f7ff ffb7 	bl	326a0 <user_callback>
}
   32732:	b006      	add	sp, #24
   32734:	bd10      	pop	{r4, pc}

00032736 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   32736:	6843      	ldr	r3, [r0, #4]
{
   32738:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   3273a:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3273c:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   3273e:	f04f 0020 	mov.w	r0, #32
   32742:	f3ef 8511 	mrs	r5, BASEPRI
   32746:	f380 8811 	msr	BASEPRI, r0
   3274a:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   3274e:	6924      	ldr	r4, [r4, #16]
   32750:	6d20      	ldr	r0, [r4, #80]	; 0x50
   32752:	b190      	cbz	r0, 3277a <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   32754:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   32756:	b998      	cbnz	r0, 32780 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   32758:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3275c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   32760:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   32764:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   32768:	f042 0220 	orr.w	r2, r2, #32
   3276c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   32770:	f385 8811 	msr	BASEPRI, r5
   32774:	f3bf 8f6f 	isb	sy
}
   32778:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   3277a:	f06f 000c 	mvn.w	r0, #12
   3277e:	e7f7      	b.n	32770 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   32780:	f06f 000f 	mvn.w	r0, #15
   32784:	e7f4      	b.n	32770 <uarte_nrfx_rx_buf_rsp+0x3a>

00032786 <uarte_nrfx_callback_set>:
	if (!data->async) {
   32786:	6903      	ldr	r3, [r0, #16]
   32788:	691b      	ldr	r3, [r3, #16]
   3278a:	b11b      	cbz	r3, 32794 <uarte_nrfx_callback_set+0xe>
	return 0;
   3278c:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   3278e:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   32792:	4770      	bx	lr
		return -ENOTSUP;
   32794:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   32798:	4770      	bx	lr

0003279a <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3279a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3279c:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   3279e:	6910      	ldr	r0, [r2, #16]
{
   327a0:	b510      	push	{r4, lr}
	return config->uarte_regs;
   327a2:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   327a4:	b958      	cbnz	r0, 327be <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   327a6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   327aa:	b15c      	cbz	r4, 327c4 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   327ac:	7e52      	ldrb	r2, [r2, #25]
   327ae:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   327b0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   327b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   327b8:	2201      	movs	r2, #1
   327ba:	601a      	str	r2, [r3, #0]
}
   327bc:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   327be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   327c2:	e7fb      	b.n	327bc <uarte_nrfx_poll_in+0x22>
		return -1;
   327c4:	f04f 30ff 	mov.w	r0, #4294967295
   327c8:	e7f8      	b.n	327bc <uarte_nrfx_poll_in+0x22>

000327ca <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   327ca:	2a00      	cmp	r2, #0
{
   327cc:	b510      	push	{r4, lr}
   327ce:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   327d0:	dd0f      	ble.n	327f2 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   327d2:	6843      	ldr	r3, [r0, #4]
   327d4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   327d6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   327da:	b148      	cbz	r0, 327f0 <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   327dc:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   327de:	6922      	ldr	r2, [r4, #16]
   327e0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   327e4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   327e8:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   327ea:	7e52      	ldrb	r2, [r2, #25]
   327ec:	700a      	strb	r2, [r1, #0]
   327ee:	6018      	str	r0, [r3, #0]
}
   327f0:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   327f2:	2000      	movs	r0, #0
   327f4:	e7fc      	b.n	327f0 <uarte_nrfx_fifo_read+0x26>

000327f6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   327f6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   327f8:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   327fa:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   327fc:	f04f 0020 	mov.w	r0, #32
   32800:	f3ef 8311 	mrs	r3, BASEPRI
   32804:	f380 8811 	msr	BASEPRI, r0
   32808:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3280c:	2000      	movs	r0, #0
   3280e:	68c9      	ldr	r1, [r1, #12]
   32810:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   32812:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   32816:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   3281a:	f383 8811 	msr	BASEPRI, r3
   3281e:	f3bf 8f6f 	isb	sy
}
   32822:	4770      	bx	lr

00032824 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   32824:	2201      	movs	r2, #1
   32826:	6903      	ldr	r3, [r0, #16]
   32828:	68db      	ldr	r3, [r3, #12]
   3282a:	739a      	strb	r2, [r3, #14]
}
   3282c:	4770      	bx	lr

0003282e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   3282e:	6903      	ldr	r3, [r0, #16]
   32830:	68db      	ldr	r3, [r3, #12]
   32832:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   32834:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   32838:	b962      	cbnz	r2, 32854 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   3283a:	6842      	ldr	r2, [r0, #4]
   3283c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3283e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   32842:	b140      	cbz	r0, 32856 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   32844:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   32848:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   3284c:	d003      	beq.n	32856 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3284e:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   32850:	6119      	str	r1, [r3, #16]
   32852:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   32854:	2000      	movs	r0, #0
}
   32856:	4770      	bx	lr

00032858 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   32858:	6843      	ldr	r3, [r0, #4]
   3285a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3285c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   32860:	3800      	subs	r0, #0
   32862:	bf18      	it	ne
   32864:	2001      	movne	r0, #1
   32866:	4770      	bx	lr

00032868 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   32868:	2210      	movs	r2, #16
	return config->uarte_regs;
   3286a:	6843      	ldr	r3, [r0, #4]
   3286c:	681b      	ldr	r3, [r3, #0]
   3286e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   32872:	4770      	bx	lr

00032874 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   32874:	2210      	movs	r2, #16
	return config->uarte_regs;
   32876:	6843      	ldr	r3, [r0, #4]
   32878:	681b      	ldr	r3, [r3, #0]
   3287a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3287e:	4770      	bx	lr

00032880 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   32880:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   32884:	6843      	ldr	r3, [r0, #4]
   32886:	681b      	ldr	r3, [r3, #0]
   32888:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3288c:	4770      	bx	lr

0003288e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3288e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   32892:	6843      	ldr	r3, [r0, #4]
   32894:	681b      	ldr	r3, [r3, #0]
   32896:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3289a:	4770      	bx	lr

0003289c <uarte_nrfx_irq_update>:
}
   3289c:	2001      	movs	r0, #1
   3289e:	4770      	bx	lr

000328a0 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   328a0:	6903      	ldr	r3, [r0, #16]
   328a2:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   328a4:	e9c3 1200 	strd	r1, r2, [r3]
}
   328a8:	4770      	bx	lr

000328aa <uarte_enable>:
{
   328aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   328ac:	6907      	ldr	r7, [r0, #16]
{
   328ae:	4604      	mov	r4, r0
	if (data->async) {
   328b0:	693b      	ldr	r3, [r7, #16]
   328b2:	b92b      	cbnz	r3, 328c0 <uarte_enable+0x16>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   328b4:	2208      	movs	r2, #8
	return config->uarte_regs;
   328b6:	6863      	ldr	r3, [r4, #4]
   328b8:	681b      	ldr	r3, [r3, #0]
   328ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   328be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
   328c0:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
   328c4:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
   328c6:	4329      	orrs	r1, r5
   328c8:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
		if (hw_rx_counting_enabled(data) && disabled) {
   328cc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   328d0:	2b00      	cmp	r3, #0
   328d2:	d0ef      	beq.n	328b4 <uarte_enable+0xa>
   328d4:	2d00      	cmp	r5, #0
   328d6:	d1ed      	bne.n	328b4 <uarte_enable+0xa>
			const nrfx_timer_t *timer = &get_dev_config(dev)->timer;
   328d8:	3608      	adds	r6, #8
			nrfx_timer_enable(timer);
   328da:	4630      	mov	r0, r6
   328dc:	f7f1 faf8 	bl	23ed0 <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   328e0:	693b      	ldr	r3, [r7, #16]
   328e2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   328e6:	42ab      	cmp	r3, r5
   328e8:	dde4      	ble.n	328b4 <uarte_enable+0xa>
				nrfx_timer_increment(timer);
   328ea:	4630      	mov	r0, r6
   328ec:	f7f1 fb78 	bl	23fe0 <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   328f0:	3501      	adds	r5, #1
   328f2:	e7f5      	b.n	328e0 <uarte_enable+0x36>

000328f4 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   328f4:	6843      	ldr	r3, [r0, #4]
{
   328f6:	b510      	push	{r4, lr}
	return config->uarte_regs;
   328f8:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   328fa:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   328fe:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32902:	2200      	movs	r2, #0
   32904:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   32908:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   3290c:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   32910:	685b      	ldr	r3, [r3, #4]
   32912:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
   32916:	06db      	lsls	r3, r3, #27
   32918:	d506      	bpl.n	32928 <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   3291a:	2101      	movs	r1, #1
   3291c:	f7ff ffc5 	bl	328aa <uarte_enable>
    p_reg->INTENSET = mask;
   32920:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   32924:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32928:	2301      	movs	r3, #1
   3292a:	60a3      	str	r3, [r4, #8]
}
   3292c:	bd10      	pop	{r4, pc}

0003292e <uarte_nrfx_fifo_fill>:
{
   3292e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32930:	6906      	ldr	r6, [r0, #16]
{
   32932:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   32934:	68f3      	ldr	r3, [r6, #12]
   32936:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   32938:	3310      	adds	r3, #16
   3293a:	4294      	cmp	r4, r2
   3293c:	bfa8      	it	ge
   3293e:	4614      	movge	r4, r2
   32940:	2201      	movs	r2, #1
   32942:	e8d3 0fef 	ldaex	r0, [r3]
   32946:	2800      	cmp	r0, #0
   32948:	d103      	bne.n	32952 <uarte_nrfx_fifo_fill+0x24>
   3294a:	e8c3 2fe7 	stlex	r7, r2, [r3]
   3294e:	2f00      	cmp	r7, #0
   32950:	d1f7      	bne.n	32942 <uarte_nrfx_fifo_fill+0x14>
   32952:	bf0c      	ite	eq
   32954:	4613      	moveq	r3, r2
   32956:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   32958:	d01d      	beq.n	32996 <uarte_nrfx_fifo_fill+0x68>
		return 0;
   3295a:	461c      	mov	r4, r3
}
   3295c:	4620      	mov	r0, r4
   3295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   32960:	68f2      	ldr	r2, [r6, #12]
   32962:	5cc8      	ldrb	r0, [r1, r3]
   32964:	6892      	ldr	r2, [r2, #8]
   32966:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   32968:	3301      	adds	r3, #1
   3296a:	42a3      	cmp	r3, r4
   3296c:	dbf8      	blt.n	32960 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   3296e:	f04f 0320 	mov.w	r3, #32
   32972:	f3ef 8711 	mrs	r7, BASEPRI
   32976:	f383 8811 	msr	BASEPRI, r3
   3297a:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3297e:	4628      	mov	r0, r5
   32980:	f7ff fe7d 	bl	3267e <is_tx_ready>
   32984:	68f3      	ldr	r3, [r6, #12]
   32986:	b940      	cbnz	r0, 3299a <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   32988:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   3298a:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   3298c:	f387 8811 	msr	BASEPRI, r7
   32990:	f3bf 8f6f 	isb	sy
	return len;
   32994:	e7e2      	b.n	3295c <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   32996:	2300      	movs	r3, #0
   32998:	e7e7      	b.n	3296a <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   3299a:	4622      	mov	r2, r4
   3299c:	4628      	mov	r0, r5
   3299e:	6899      	ldr	r1, [r3, #8]
   329a0:	f7ff ffa8 	bl	328f4 <tx_start>
   329a4:	e7f2      	b.n	3298c <uarte_nrfx_fifo_fill+0x5e>

000329a6 <uarte_nrfx_tx>:
{
   329a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   329aa:	461c      	mov	r4, r3
	return config->uarte_regs;
   329ac:	6843      	ldr	r3, [r0, #4]
{
   329ae:	4617      	mov	r7, r2
	return config->uarte_regs;
   329b0:	681a      	ldr	r2, [r3, #0]
   329b2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   329b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   329ba:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   329bc:	6906      	ldr	r6, [r0, #16]
	if (!nrfx_is_in_ram(buf)) {
   329be:	d14e      	bne.n	32a5e <uarte_nrfx_tx+0xb8>
	__asm__ volatile(
   329c0:	f04f 0320 	mov.w	r3, #32
   329c4:	f3ef 8811 	mrs	r8, BASEPRI
   329c8:	f383 8811 	msr	BASEPRI, r3
   329cc:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   329d0:	6933      	ldr	r3, [r6, #16]
   329d2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   329d6:	f1bc 0f00 	cmp.w	ip, #0
   329da:	d008      	beq.n	329ee <uarte_nrfx_tx+0x48>
	__asm__ volatile(
   329dc:	f388 8811 	msr	BASEPRI, r8
   329e0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   329e4:	f06f 000f 	mvn.w	r0, #15
}
   329e8:	b002      	add	sp, #8
   329ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->async->tx_size = len;
   329ee:	60df      	str	r7, [r3, #12]
    p_reg->INTENSET = mask;
   329f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   329f4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   329f8:	f7ff fe41 	bl	3267e <is_tx_ready>
   329fc:	6933      	ldr	r3, [r6, #16]
   329fe:	bb20      	cbnz	r0, 32a4a <uarte_nrfx_tx+0xa4>
		data->async->pend_tx_buf = (uint8_t *)buf;
   32a00:	6119      	str	r1, [r3, #16]
   32a02:	f388 8811 	msr	BASEPRI, r8
   32a06:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   32a0a:	7af3      	ldrb	r3, [r6, #11]
   32a0c:	2b01      	cmp	r3, #1
   32a0e:	d11a      	bne.n	32a46 <uarte_nrfx_tx+0xa0>
	    && timeout != SYS_FOREVER_MS) {
   32a10:	1c63      	adds	r3, r4, #1
   32a12:	d018      	beq.n	32a46 <uarte_nrfx_tx+0xa0>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   32a14:	6935      	ldr	r5, [r6, #16]
   32a16:	f240 30e7 	movw	r0, #999	; 0x3e7
   32a1a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   32a1e:	2100      	movs	r1, #0
   32a20:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   32a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   32a28:	2300      	movs	r3, #0
   32a2a:	fbc6 0104 	smlal	r0, r1, r6, r4
   32a2e:	f7de fbdf 	bl	111f0 <__aeabi_uldivmod>
   32a32:	3518      	adds	r5, #24
   32a34:	4602      	mov	r2, r0
   32a36:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   32a38:	2000      	movs	r0, #0
   32a3a:	2100      	movs	r1, #0
   32a3c:	e9cd 0100 	strd	r0, r1, [sp]
   32a40:	4628      	mov	r0, r5
   32a42:	f7f9 fb1f 	bl	2c084 <z_impl_k_timer_start>
	return 0;
   32a46:	2000      	movs	r0, #0
   32a48:	e7ce      	b.n	329e8 <uarte_nrfx_tx+0x42>
		data->async->tx_amount = -1;
   32a4a:	f04f 32ff 	mov.w	r2, #4294967295
		tx_start(dev, buf, len);
   32a4e:	4628      	mov	r0, r5
		data->async->tx_amount = -1;
   32a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		data->async->tx_buf = buf;
   32a54:	6099      	str	r1, [r3, #8]
		tx_start(dev, buf, len);
   32a56:	463a      	mov	r2, r7
   32a58:	f7ff ff4c 	bl	328f4 <tx_start>
   32a5c:	e7d1      	b.n	32a02 <uarte_nrfx_tx+0x5c>
		return -ENOTSUP;
   32a5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   32a62:	e7c1      	b.n	329e8 <uarte_nrfx_tx+0x42>

00032a64 <rx_timeout>:
{
   32a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   32a66:	6b45      	ldr	r5, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   32a68:	692b      	ldr	r3, [r5, #16]
   32a6a:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   32a6e:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   32a72:	2a00      	cmp	r2, #0
   32a74:	d132      	bne.n	32adc <rx_timeout+0x78>
    p_reg->INTENCLR = mask;
   32a76:	2110      	movs	r1, #16
	const struct device *dev = data->dev;
   32a78:	682e      	ldr	r6, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   32a7a:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   32a7c:	6802      	ldr	r2, [r0, #0]
   32a7e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	if (hw_rx_counting_enabled(data)) {
   32a82:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
   32a86:	b1fa      	cbz	r2, 32ac8 <rx_timeout+0x64>
		read = nrfx_timer_capture(&cfg->timer, 0);
   32a88:	4639      	mov	r1, r7
   32a8a:	3008      	adds	r0, #8
   32a8c:	f7f1 fada 	bl	24044 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   32a90:	692b      	ldr	r3, [r5, #16]
   32a92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   32a94:	4282      	cmp	r2, r0
		data->async->rx_timeout_left = data->async->rx_timeout;
   32a96:	bf1e      	ittt	ne
   32a98:	6eda      	ldrne	r2, [r3, #108]	; 0x6c
		data->async->rx_total_byte_cnt = read;
   32a9a:	6658      	strne	r0, [r3, #100]	; 0x64
		data->async->rx_timeout_left = data->async->rx_timeout;
   32a9c:	675a      	strne	r2, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
   32a9e:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
		    - data->async->rx_total_user_byte_cnt;
   32aa2:	e9d3 4019 	ldrd	r4, r0, [r3, #100]	; 0x64
   32aa6:	1a24      	subs	r4, r4, r0
	if (!hw_rx_counting_enabled(data) &&
   32aa8:	b922      	cbnz	r2, 32ab4 <rx_timeout+0x50>
   32aaa:	2c00      	cmp	r4, #0
		len = 0;
   32aac:	bfbc      	itt	lt
   32aae:	4614      	movlt	r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   32ab0:	f8c3 00b0 	strlt.w	r0, [r3, #176]	; 0xb0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   32ab4:	e9d3 1215 	ldrd	r1, r2, [r3, #84]	; 0x54
   32ab8:	18a0      	adds	r0, r4, r2
   32aba:	4288      	cmp	r0, r1
   32abc:	d90f      	bls.n	32ade <rx_timeout+0x7a>
		len = data->async->rx_buf_len - data->async->rx_offset;
   32abe:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   32ac0:	2c00      	cmp	r4, #0
   32ac2:	dd06      	ble.n	32ad2 <rx_timeout+0x6e>
		clipped = true;
   32ac4:	2701      	movs	r7, #1
   32ac6:	e010      	b.n	32aea <rx_timeout+0x86>
		read = data->async->rx_cnt.cnt;
   32ac8:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   32acc:	e7e0      	b.n	32a90 <rx_timeout+0x2c>
			data->async->rx_timeout_left -=
   32ace:	1a52      	subs	r2, r2, r1
   32ad0:	675a      	str	r2, [r3, #116]	; 0x74
    p_reg->INTENSET = mask;
   32ad2:	2210      	movs	r2, #16
	return config->uarte_regs;
   32ad4:	6873      	ldr	r3, [r6, #4]
   32ad6:	681b      	ldr	r3, [r3, #0]
   32ad8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   32adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   32ade:	2c00      	cmp	r4, #0
   32ae0:	ddf7      	ble.n	32ad2 <rx_timeout+0x6e>
				< data->async->rx_timeout_slab)) {
   32ae2:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
		if (clipped ||
   32ae6:	428a      	cmp	r2, r1
   32ae8:	daf1      	bge.n	32ace <rx_timeout+0x6a>
			notify_uart_rx_rdy(dev, len);
   32aea:	4621      	mov	r1, r4
   32aec:	4630      	mov	r0, r6
   32aee:	f7ff fdde 	bl	326ae <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   32af2:	6928      	ldr	r0, [r5, #16]
   32af4:	6d83      	ldr	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   32af6:	6e81      	ldr	r1, [r0, #104]	; 0x68
			data->async->rx_offset += len;
   32af8:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   32afa:	4421      	add	r1, r4
			data->async->rx_offset += len;
   32afc:	6583      	str	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   32afe:	6681      	str	r1, [r0, #104]	; 0x68
		if (clipped) {
   32b00:	2f00      	cmp	r7, #0
   32b02:	d0e6      	beq.n	32ad2 <rx_timeout+0x6e>
	z_impl_k_timer_stop(timer);
   32b04:	3078      	adds	r0, #120	; 0x78
   32b06:	f002 fc9d 	bl	35444 <z_impl_k_timer_stop>
}
   32b0a:	e7e2      	b.n	32ad2 <rx_timeout+0x6e>

00032b0c <uarte_nrfx_irq_is_pending>:
{
   32b0c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   32b0e:	6843      	ldr	r3, [r0, #4]
{
   32b10:	4604      	mov	r4, r0
	return config->uarte_regs;
   32b12:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   32b14:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   32b18:	025b      	lsls	r3, r3, #9
   32b1a:	d405      	bmi.n	32b28 <uarte_nrfx_irq_is_pending+0x1c>
   32b1c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   32b20:	f010 0010 	ands.w	r0, r0, #16
   32b24:	d106      	bne.n	32b34 <uarte_nrfx_irq_is_pending+0x28>
}
   32b26:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   32b28:	f7ff fe81 	bl	3282e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   32b2c:	2800      	cmp	r0, #0
   32b2e:	d0f5      	beq.n	32b1c <uarte_nrfx_irq_is_pending+0x10>
		||
   32b30:	2001      	movs	r0, #1
   32b32:	e7f8      	b.n	32b26 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   32b34:	4620      	mov	r0, r4
   32b36:	f7ff fe8f 	bl	32858 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   32b3a:	3800      	subs	r0, #0
   32b3c:	bf18      	it	ne
   32b3e:	2001      	movne	r0, #1
   32b40:	e7f1      	b.n	32b26 <uarte_nrfx_irq_is_pending+0x1a>

00032b42 <rx_flush>:
	return config->uarte_regs;
   32b42:	6843      	ldr	r3, [r0, #4]
{
   32b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   32b46:	681c      	ldr	r4, [r3, #0]
{
   32b48:	4615      	mov	r5, r2
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   32b4a:	460b      	mov	r3, r1
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   32b4c:	f8d4 653c 	ldr.w	r6, [r4, #1340]	; 0x53c
   32b50:	bb31      	cbnz	r1, 32ba0 <rx_flush+0x5e>
   32b52:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   32b54:	466a      	mov	r2, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   32b56:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32b5a:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   32b5c:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32b60:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   32b64:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32b68:	2101      	movs	r1, #1
   32b6a:	62e1      	str	r1, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32b6c:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   32b70:	2900      	cmp	r1, #0
   32b72:	d0fb      	beq.n	32b6c <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32b74:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   32b78:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   32b7c:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (!buf) {
   32b80:	b913      	cbnz	r3, 32b88 <rx_flush+0x46>
			return rx_amount;
   32b82:	b2c0      	uxtb	r0, r0
}
   32b84:	b002      	add	sp, #8
   32b86:	bd70      	pop	{r4, r5, r6, pc}
	if (rx_amount != prev_rx_amount) {
   32b88:	4286      	cmp	r6, r0
   32b8a:	d1fa      	bne.n	32b82 <rx_flush+0x40>
   32b8c:	441d      	add	r5, r3
	for (int i = 0; i < flush_len; i++) {
   32b8e:	429d      	cmp	r5, r3
   32b90:	d101      	bne.n	32b96 <rx_flush+0x54>
	return 0;
   32b92:	2000      	movs	r0, #0
   32b94:	e7f6      	b.n	32b84 <rx_flush+0x42>
		if (buf[i] != dirty) {
   32b96:	f813 2b01 	ldrb.w	r2, [r3], #1
   32b9a:	2a00      	cmp	r2, #0
   32b9c:	d0f7      	beq.n	32b8e <rx_flush+0x4c>
   32b9e:	e7f0      	b.n	32b82 <rx_flush+0x40>
   32ba0:	4618      	mov	r0, r3
   32ba2:	2100      	movs	r1, #0
   32ba4:	f002 fd0f 	bl	355c6 <memset>
   32ba8:	4603      	mov	r3, r0
   32baa:	4602      	mov	r2, r0
   32bac:	e7d3      	b.n	32b56 <rx_flush+0x14>

00032bae <async_uart_release>:
{
   32bae:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32bb0:	6903      	ldr	r3, [r0, #16]
{
   32bb2:	4604      	mov	r4, r0
	__asm__ volatile(
   32bb4:	f04f 0220 	mov.w	r2, #32
   32bb8:	f3ef 8611 	mrs	r6, BASEPRI
   32bbc:	f382 8811 	msr	BASEPRI, r2
   32bc0:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   32bc4:	691d      	ldr	r5, [r3, #16]
   32bc6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   32bca:	ea23 0301 	bic.w	r3, r3, r1
   32bce:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	if (!data->async->low_power_mask) {
   32bd2:	b9db      	cbnz	r3, 32c0c <async_uart_release+0x5e>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   32bd4:	2902      	cmp	r1, #2
   32bd6:	d106      	bne.n	32be6 <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   32bd8:	2205      	movs	r2, #5
   32bda:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
   32bde:	f7ff ffb0 	bl	32b42 <rx_flush>
			data->async->rx_flush_cnt =
   32be2:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32be6:	6925      	ldr	r5, [r4, #16]
	if (data->async && hw_rx_counting_enabled(data)) {
   32be8:	692b      	ldr	r3, [r5, #16]
   32bea:	b153      	cbz	r3, 32c02 <async_uart_release+0x54>
   32bec:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   32bf0:	b13b      	cbz	r3, 32c02 <async_uart_release+0x54>
		nrfx_timer_disable(&get_dev_config(dev)->timer);
   32bf2:	6860      	ldr	r0, [r4, #4]
   32bf4:	3008      	adds	r0, #8
   32bf6:	f7f1 f991 	bl	23f1c <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   32bfa:	2200      	movs	r2, #0
   32bfc:	692b      	ldr	r3, [r5, #16]
		data->async->rx_total_user_byte_cnt = 0;
   32bfe:	e9c3 2219 	strd	r2, r2, [r3, #100]	; 0x64
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   32c02:	2200      	movs	r2, #0
	return config->uarte_regs;
   32c04:	6863      	ldr	r3, [r4, #4]
   32c06:	681b      	ldr	r3, [r3, #0]
   32c08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   32c0c:	f386 8811 	msr	BASEPRI, r6
   32c10:	f3bf 8f6f 	isb	sy
}
   32c14:	bd70      	pop	{r4, r5, r6, pc}

00032c16 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   32c16:	6843      	ldr	r3, [r0, #4]
{
   32c18:	b510      	push	{r4, lr}
	return config->uarte_regs;
   32c1a:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   32c1c:	6903      	ldr	r3, [r0, #16]
   32c1e:	6918      	ldr	r0, [r3, #16]
   32c20:	6883      	ldr	r3, [r0, #8]
   32c22:	b133      	cbz	r3, 32c32 <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   32c24:	3018      	adds	r0, #24
   32c26:	f002 fc0d 	bl	35444 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32c2a:	2301      	movs	r3, #1
	return 0;
   32c2c:	2000      	movs	r0, #0
   32c2e:	60e3      	str	r3, [r4, #12]
}
   32c30:	bd10      	pop	{r4, pc}
		return -EFAULT;
   32c32:	f06f 000d 	mvn.w	r0, #13
   32c36:	e7fb      	b.n	32c30 <uarte_nrfx_tx_abort+0x1a>

00032c38 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   32c38:	6b43      	ldr	r3, [r0, #52]	; 0x34
   32c3a:	6818      	ldr	r0, [r3, #0]
   32c3c:	f7ff bfeb 	b.w	32c16 <uarte_nrfx_tx_abort>

00032c40 <uarte_nrfx_rx_disable>:
{
   32c40:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32c42:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   32c44:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   32c46:	6928      	ldr	r0, [r5, #16]
	return config->uarte_regs;
   32c48:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   32c4a:	6d03      	ldr	r3, [r0, #80]	; 0x50
   32c4c:	b1b3      	cbz	r3, 32c7c <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   32c4e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   32c50:	b153      	cbz	r3, 32c68 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   32c52:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   32c56:	f023 0320 	bic.w	r3, r3, #32
   32c5a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32c5e:	2300      	movs	r3, #0
   32c60:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   32c64:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   32c68:	3078      	adds	r0, #120	; 0x78
   32c6a:	f002 fbeb 	bl	35444 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   32c6e:	2000      	movs	r0, #0
   32c70:	692b      	ldr	r3, [r5, #16]
   32c72:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32c76:	2301      	movs	r3, #1
   32c78:	6063      	str	r3, [r4, #4]
}
   32c7a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   32c7c:	f06f 000d 	mvn.w	r0, #13
   32c80:	e7fb      	b.n	32c7a <uarte_nrfx_rx_disable+0x3a>

00032c82 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   32c82:	6843      	ldr	r3, [r0, #4]
{
   32c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   32c88:	681d      	ldr	r5, [r3, #0]
	if (!hw_rx_counting_enabled(data)
   32c8a:	6903      	ldr	r3, [r0, #16]
{
   32c8c:	4604      	mov	r4, r0
	if (!hw_rx_counting_enabled(data)
   32c8e:	691b      	ldr	r3, [r3, #16]
{
   32c90:	b089      	sub	sp, #36	; 0x24
	if (!hw_rx_counting_enabled(data)
   32c92:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
   32c96:	b972      	cbnz	r2, 32cb6 <uarte_nrfx_isr_async+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32c98:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   32c9c:	b159      	cbz	r1, 32cb6 <uarte_nrfx_isr_async+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32c9e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   32ca2:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   32ca6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   32caa:	3201      	adds	r2, #1
   32cac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
   32cb0:	b009      	add	sp, #36	; 0x24
   32cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32cb6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   32cba:	b31b      	cbz	r3, 32d04 <uarte_nrfx_isr_async+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32cbc:	2100      	movs	r1, #0
   32cbe:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   32cc2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   32cc6:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   32cca:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   32ccc:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   32cd0:	a803      	add	r0, sp, #12
   32cd2:	f002 fc78 	bl	355c6 <memset>
   32cd6:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   32cd8:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   32cda:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   32cde:	f100 80dd 	bmi.w	32e9c <uarte_nrfx_isr_async+0x21a>
   32ce2:	07b1      	lsls	r1, r6, #30
   32ce4:	f100 80dc 	bmi.w	32ea0 <uarte_nrfx_isr_async+0x21e>
   32ce8:	0772      	lsls	r2, r6, #29
   32cea:	f100 80db 	bmi.w	32ea4 <uarte_nrfx_isr_async+0x222>
   32cee:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   32cf2:	4620      	mov	r0, r4
   32cf4:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   32cf6:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   32cfa:	f7ff fcd1 	bl	326a0 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   32cfe:	4620      	mov	r0, r4
   32d00:	f7ff ff9e 	bl	32c40 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32d04:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   32d08:	b37b      	cbz	r3, 32d6a <uarte_nrfx_isr_async+0xe8>
    return p_reg->INTENSET & mask;
   32d0a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   32d0e:	06db      	lsls	r3, r3, #27
   32d10:	d52b      	bpl.n	32d6a <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32d12:	f04f 0800 	mov.w	r8, #0
   32d16:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   32d1a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   32d1e:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32d20:	6927      	ldr	r7, [r4, #16]
	return config->uarte_regs;
   32d22:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   32d24:	2301      	movs	r3, #1
   32d26:	6938      	ldr	r0, [r7, #16]
   32d28:	f880 30c4 	strb.w	r3, [r0, #196]	; 0xc4
   32d2c:	3078      	adds	r0, #120	; 0x78
   32d2e:	f002 fb89 	bl	35444 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   32d32:	693a      	ldr	r2, [r7, #16]
    return p_reg->RXD.AMOUNT;
   32d34:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   32d38:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   32d3c:	6d90      	ldr	r0, [r2, #88]	; 0x58
	data->async->rx_flush_cnt = 0;
   32d3e:	f882 80c1 	strb.w	r8, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   32d42:	1a1b      	subs	r3, r3, r0
   32d44:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   32d46:	6e90      	ldr	r0, [r2, #104]	; 0x68
   32d48:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   32d4c:	4408      	add	r0, r1
	if (rx_len > 0) {
   32d4e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   32d50:	6690      	str	r0, [r2, #104]	; 0x68
	if (rx_len > 0) {
   32d52:	dd02      	ble.n	32d5a <uarte_nrfx_isr_async+0xd8>
		notify_uart_rx_rdy(dev, rx_len);
   32d54:	4620      	mov	r0, r4
   32d56:	f7ff fcaa 	bl	326ae <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   32d5a:	6939      	ldr	r1, [r7, #16]
   32d5c:	f891 30c2 	ldrb.w	r3, [r1, #194]	; 0xc2
   32d60:	2b00      	cmp	r3, #0
   32d62:	f040 80a1 	bne.w	32ea8 <uarte_nrfx_isr_async+0x226>
		data->async->is_in_irq = false;
   32d66:	f881 30c4 	strb.w	r3, [r1, #196]	; 0xc4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32d6a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   32d6e:	b37b      	cbz	r3, 32dd0 <uarte_nrfx_isr_async+0x14e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32d70:	2100      	movs	r1, #0
	struct uart_event evt = {
   32d72:	2214      	movs	r2, #20
   32d74:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
   32d78:	a803      	add	r0, sp, #12
   32d7a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32d7e:	6926      	ldr	r6, [r4, #16]
	struct uart_event evt = {
   32d80:	f002 fc21 	bl	355c6 <memset>
   32d84:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   32d86:	4620      	mov	r0, r4
   32d88:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   32d8a:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   32d8e:	f7ff fc87 	bl	326a0 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   32d92:	6936      	ldr	r6, [r6, #16]
   32d94:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   32d96:	1c5f      	adds	r7, r3, #1
   32d98:	d01a      	beq.n	32dd0 <uarte_nrfx_isr_async+0x14e>
   32d9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   32d9e:	f240 38e7 	movw	r8, #999	; 0x3e7
   32da2:	f04f 0900 	mov.w	r9, #0
		data->async->rx_timeout_left = data->async->rx_timeout;
   32da6:	6773      	str	r3, [r6, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   32da8:	6f33      	ldr	r3, [r6, #112]	; 0x70
   32daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   32dae:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   32db2:	fbc0 8901 	smlal	r8, r9, r0, r1
   32db6:	2300      	movs	r3, #0
   32db8:	4640      	mov	r0, r8
   32dba:	4649      	mov	r1, r9
   32dbc:	f7de fa18 	bl	111f0 <__aeabi_uldivmod>
   32dc0:	4602      	mov	r2, r0
   32dc2:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   32dc4:	e9cd 0100 	strd	r0, r1, [sp]
   32dc8:	f106 0078 	add.w	r0, r6, #120	; 0x78
   32dcc:	f7f9 f95a 	bl	2c084 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32dd0:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   32dd4:	b323      	cbz	r3, 32e20 <uarte_nrfx_isr_async+0x19e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32dd6:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32dd8:	6926      	ldr	r6, [r4, #16]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   32dda:	2201      	movs	r2, #1
   32ddc:	6931      	ldr	r1, [r6, #16]
   32dde:	4620      	mov	r0, r4
   32de0:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   32de4:	3150      	adds	r1, #80	; 0x50
   32de6:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   32dea:	f7ff fc79 	bl	326e0 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   32dee:	6931      	ldr	r1, [r6, #16]
   32df0:	2201      	movs	r2, #1
   32df2:	4620      	mov	r0, r4
   32df4:	315c      	adds	r1, #92	; 0x5c
   32df6:	f7ff fc73 	bl	326e0 <notify_rx_buf_release>
	if (!data->async->rx_enabled) {
   32dfa:	6933      	ldr	r3, [r6, #16]
   32dfc:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   32e00:	b91a      	cbnz	r2, 32e0a <uarte_nrfx_isr_async+0x188>
		(void)rx_flush(dev, NULL, 0);
   32e02:	4611      	mov	r1, r2
   32e04:	4620      	mov	r0, r4
   32e06:	f7ff fe9c 	bl	32b42 <rx_flush>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   32e0a:	6863      	ldr	r3, [r4, #4]
   32e0c:	685b      	ldr	r3, [r3, #4]
   32e0e:	06d8      	lsls	r0, r3, #27
   32e10:	d503      	bpl.n	32e1a <uarte_nrfx_isr_async+0x198>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   32e12:	2102      	movs	r1, #2
   32e14:	4620      	mov	r0, r4
   32e16:	f7ff feca 	bl	32bae <async_uart_release>
	notify_rx_disable(dev);
   32e1a:	4620      	mov	r0, r4
   32e1c:	f7ff fc7a 	bl	32714 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32e20:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   32e24:	b133      	cbz	r3, 32e34 <uarte_nrfx_isr_async+0x1b2>
    return p_reg->INTENSET & mask;
   32e26:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   32e2a:	05d9      	lsls	r1, r3, #23
   32e2c:	d502      	bpl.n	32e34 <uarte_nrfx_isr_async+0x1b2>
		endtx_isr(dev);
   32e2e:	4620      	mov	r0, r4
   32e30:	f7ff fbb1 	bl	32596 <endtx_isr>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32e34:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   32e38:	2b00      	cmp	r3, #0
   32e3a:	f43f af39 	beq.w	32cb0 <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   32e3e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   32e42:	025a      	lsls	r2, r3, #9
   32e44:	f57f af34 	bpl.w	32cb0 <uarte_nrfx_isr_async+0x2e>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   32e48:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32e4a:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   32e4c:	e9d3 7300 	ldrd	r7, r3, [r3]
   32e50:	06db      	lsls	r3, r3, #27
   32e52:	d457      	bmi.n	32f04 <uarte_nrfx_isr_async+0x282>
	if (!data->async->tx_buf) {
   32e54:	6930      	ldr	r0, [r6, #16]
   32e56:	6882      	ldr	r2, [r0, #8]
   32e58:	2a00      	cmp	r2, #0
   32e5a:	d160      	bne.n	32f1e <uarte_nrfx_isr_async+0x29c>
		if (data->async->pend_tx_buf) {
   32e5c:	6903      	ldr	r3, [r0, #16]
   32e5e:	2b00      	cmp	r3, #0
   32e60:	f43f af26 	beq.w	32cb0 <uarte_nrfx_isr_async+0x2e>
	__asm__ volatile(
   32e64:	f04f 0320 	mov.w	r3, #32
   32e68:	f3ef 8511 	mrs	r5, BASEPRI
   32e6c:	f383 8811 	msr	BASEPRI, r3
   32e70:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32e74:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   32e78:	b15b      	cbz	r3, 32e92 <uarte_nrfx_isr_async+0x210>
				data->async->tx_buf = data->async->pend_tx_buf;
   32e7a:	6933      	ldr	r3, [r6, #16]
				tx_start(dev, data->async->tx_buf,
   32e7c:	4620      	mov	r0, r4
				data->async->tx_buf = data->async->pend_tx_buf;
   32e7e:	6919      	ldr	r1, [r3, #16]
				data->async->pend_tx_buf = NULL;
   32e80:	611a      	str	r2, [r3, #16]
				data->async->tx_amount = -1;
   32e82:	f04f 32ff 	mov.w	r2, #4294967295
   32e86:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				tx_start(dev, data->async->tx_buf,
   32e8a:	68da      	ldr	r2, [r3, #12]
				data->async->tx_buf = data->async->pend_tx_buf;
   32e8c:	6099      	str	r1, [r3, #8]
				tx_start(dev, data->async->tx_buf,
   32e8e:	f7ff fd31 	bl	328f4 <tx_start>
	__asm__ volatile(
   32e92:	f385 8811 	msr	BASEPRI, r5
   32e96:	f3bf 8f6f 	isb	sy
}
   32e9a:	e709      	b.n	32cb0 <uarte_nrfx_isr_async+0x2e>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   32e9c:	2601      	movs	r6, #1
   32e9e:	e728      	b.n	32cf2 <uarte_nrfx_isr_async+0x70>
   32ea0:	2602      	movs	r6, #2
   32ea2:	e726      	b.n	32cf2 <uarte_nrfx_isr_async+0x70>
   32ea4:	2604      	movs	r6, #4
   32ea6:	e724      	b.n	32cf2 <uarte_nrfx_isr_async+0x70>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   32ea8:	2200      	movs	r2, #0
   32eaa:	4620      	mov	r0, r4
   32eac:	3150      	adds	r1, #80	; 0x50
   32eae:	f7ff fc17 	bl	326e0 <notify_rx_buf_release>
	__asm__ volatile(
   32eb2:	f04f 0320 	mov.w	r3, #32
   32eb6:	f3ef 8111 	mrs	r1, BASEPRI
   32eba:	f383 8811 	msr	BASEPRI, r3
   32ebe:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   32ec2:	693b      	ldr	r3, [r7, #16]
   32ec4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32ec6:	b1d2      	cbz	r2, 32efe <uarte_nrfx_isr_async+0x27c>
		data->async->rx_buf = data->async->rx_next_buf;
   32ec8:	651a      	str	r2, [r3, #80]	; 0x50
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   32eca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   32ecc:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   32ece:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   32ed0:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   32ed4:	659a      	str	r2, [r3, #88]	; 0x58
   32ed6:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   32eda:	b90b      	cbnz	r3, 32ee0 <uarte_nrfx_isr_async+0x25e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32edc:	2301      	movs	r3, #1
   32ede:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   32ee0:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   32ee4:	f023 0320 	bic.w	r3, r3, #32
   32ee8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   32eec:	f381 8811 	msr	BASEPRI, r1
   32ef0:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   32ef4:	2200      	movs	r2, #0
   32ef6:	693b      	ldr	r3, [r7, #16]
   32ef8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
   32efc:	e735      	b.n	32d6a <uarte_nrfx_isr_async+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32efe:	2301      	movs	r3, #1
   32f00:	6073      	str	r3, [r6, #4]
}
   32f02:	e7f3      	b.n	32eec <uarte_nrfx_isr_async+0x26a>
    p_reg->INTENCLR = mask;
   32f04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   32f08:	2101      	movs	r1, #1
   32f0a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   32f0e:	4620      	mov	r0, r4
   32f10:	f7ff fe4d 	bl	32bae <async_uart_release>
		if (!data->async->tx_size) {
   32f14:	6933      	ldr	r3, [r6, #16]
   32f16:	68db      	ldr	r3, [r3, #12]
   32f18:	2b00      	cmp	r3, #0
   32f1a:	d19b      	bne.n	32e54 <uarte_nrfx_isr_async+0x1d2>
   32f1c:	e6c8      	b.n	32cb0 <uarte_nrfx_isr_async+0x2e>
	z_impl_k_timer_stop(timer);
   32f1e:	3018      	adds	r0, #24
   32f20:	f002 fa90 	bl	35444 <z_impl_k_timer_stop>
	__asm__ volatile(
   32f24:	f04f 0320 	mov.w	r3, #32
   32f28:	f3ef 8211 	mrs	r2, BASEPRI
   32f2c:	f383 8811 	msr	BASEPRI, r3
   32f30:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   32f34:	6933      	ldr	r3, [r6, #16]
   32f36:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   32f3a:	2900      	cmp	r1, #0
   32f3c:	bfac      	ite	ge
   32f3e:	f8d3 50b4 	ldrge.w	r5, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   32f42:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   32f46:	f382 8811 	msr	BASEPRI, r2
   32f4a:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   32f4e:	2214      	movs	r2, #20
   32f50:	2100      	movs	r1, #0
   32f52:	a803      	add	r0, sp, #12
   32f54:	f002 fb37 	bl	355c6 <memset>
		.data.tx.buf = data->async->tx_buf,
   32f58:	6933      	ldr	r3, [r6, #16]
	user_callback(dev, &evt);
   32f5a:	4620      	mov	r0, r4
	struct uart_event evt = {
   32f5c:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   32f5e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   32f60:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   32f64:	68da      	ldr	r2, [r3, #12]
   32f66:	1aad      	subs	r5, r5, r2
   32f68:	bf18      	it	ne
   32f6a:	2501      	movne	r5, #1
    p_reg->INTENCLR = mask;
   32f6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   32f70:	f88d 500c 	strb.w	r5, [sp, #12]
   32f74:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   32f78:	2200      	movs	r2, #0
   32f7a:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   32f7c:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   32f7e:	f7ff fb8f 	bl	326a0 <user_callback>
   32f82:	e695      	b.n	32cb0 <uarte_nrfx_isr_async+0x2e>

00032f84 <api_callback_set>:
	struct lpuart_data *data = get_dev_data(dev);
   32f84:	6903      	ldr	r3, [r0, #16]
}
   32f86:	2000      	movs	r0, #0
	data->user_data = user_data;
   32f88:	e9c3 1221 	strd	r1, r2, [r3, #132]	; 0x84
}
   32f8c:	4770      	bx	lr

00032f8e <user_callback>:
	const struct lpuart_data *data = get_dev_data(dev);
   32f8e:	6902      	ldr	r2, [r0, #16]
	if (data->user_callback) {
   32f90:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   32f94:	b113      	cbz	r3, 32f9c <user_callback+0xe>
		data->user_callback(dev, evt, data->user_data);
   32f96:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
   32f9a:	4718      	bx	r3
}
   32f9c:	4770      	bx	lr

00032f9e <api_irq_tx_enable>:
	data->int_driven.tx_enabled = true;
   32f9e:	2201      	movs	r2, #1
	struct lpuart_data *data = get_dev_data(dev);
   32fa0:	6903      	ldr	r3, [r0, #16]
	data->int_driven.tx_enabled = true;
   32fa2:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	if (data->tx_buf == NULL) {
   32fa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   32fa8:	b912      	cbnz	r2, 32fb0 <api_irq_tx_enable+0x12>
		data->int_driven.callback(dev, data->int_driven.user_data);
   32faa:	e9d3 2128 	ldrd	r2, r1, [r3, #160]	; 0xa0
   32fae:	4710      	bx	r2
}
   32fb0:	4770      	bx	lr

00032fb2 <api_irq_tx_disable>:
	data->int_driven.tx_enabled = false;
   32fb2:	2200      	movs	r2, #0
   32fb4:	6903      	ldr	r3, [r0, #16]
   32fb6:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
}
   32fba:	4770      	bx	lr

00032fbc <api_irq_tx_ready>:
	struct lpuart_data *data = get_dev_data(dev);
   32fbc:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.tx_enabled && (data->tx_buf == NULL);
   32fbe:	f893 01b4 	ldrb.w	r0, [r3, #436]	; 0x1b4
   32fc2:	b118      	cbz	r0, 32fcc <api_irq_tx_ready+0x10>
   32fc4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   32fc6:	fab0 f080 	clz	r0, r0
   32fca:	0940      	lsrs	r0, r0, #5
}
   32fcc:	4770      	bx	lr

00032fce <api_irq_callback_set>:
	struct lpuart_data *data = get_dev_data(dev);
   32fce:	6903      	ldr	r3, [r0, #16]
	data->int_driven.user_data = user_data;
   32fd0:	e9c3 1228 	strd	r1, r2, [r3, #160]	; 0xa0
}
   32fd4:	4770      	bx	lr

00032fd6 <api_irq_rx_disable>:
	data->int_driven.rx_enabled = false;
   32fd6:	2200      	movs	r2, #0
   32fd8:	6903      	ldr	r3, [r0, #16]
   32fda:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
}
   32fde:	4770      	bx	lr

00032fe0 <api_irq_rx_ready>:
	struct lpuart_data *data = get_dev_data(dev);
   32fe0:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.rx_enabled &&
   32fe2:	f893 01b5 	ldrb.w	r0, [r3, #437]	; 0x1b5
   32fe6:	b120      	cbz	r0, 32ff2 <api_irq_rx_ready+0x12>
   32fe8:	e9d3 306b 	ldrd	r3, r0, [r3, #428]	; 0x1ac
   32fec:	1ac0      	subs	r0, r0, r3
   32fee:	bf18      	it	ne
   32ff0:	2001      	movne	r0, #1
}
   32ff2:	4770      	bx	lr

00032ff4 <api_irq_tx_complete>:
	return api_irq_tx_ready(dev);
   32ff4:	f7ff bfe2 	b.w	32fbc <api_irq_tx_ready>

00032ff8 <api_irq_err_enable>:
	data->int_driven.err_enabled = true;
   32ff8:	2201      	movs	r2, #1
   32ffa:	6903      	ldr	r3, [r0, #16]
   32ffc:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
}
   33000:	4770      	bx	lr

00033002 <api_irq_err_disable>:
	data->int_driven.err_enabled = false;
   33002:	2200      	movs	r2, #0
   33004:	6903      	ldr	r3, [r0, #16]
   33006:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
}
   3300a:	4770      	bx	lr

0003300c <api_irq_update>:
}
   3300c:	2001      	movs	r0, #1
   3300e:	4770      	bx	lr

00033010 <api_configure>:

static int api_configure(const struct device *dev, const struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   33010:	79ca      	ldrb	r2, [r1, #7]
	const struct lpuart_data *data = get_dev_data(dev);
   33012:	6903      	ldr	r3, [r0, #16]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   33014:	b922      	cbnz	r2, 33020 <api_configure+0x10>
		return -ENOTSUP;
	}

	return uart_configure(data->uart, cfg);
   33016:	6818      	ldr	r0, [r3, #0]
	if (api->configure == NULL) {
   33018:	6883      	ldr	r3, [r0, #8]
   3301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3301c:	b11b      	cbz	r3, 33026 <api_configure+0x16>
	return api->configure(dev, cfg);
   3301e:	4718      	bx	r3
		return -ENOTSUP;
   33020:	f06f 0085 	mvn.w	r0, #133	; 0x85
   33024:	4770      	bx	lr
		return -ENOSYS;
   33026:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   3302a:	4770      	bx	lr

0003302c <api_config_get>:

static int api_config_get(const struct device *dev, struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	return uart_config_get(data->uart, cfg);
   3302c:	6903      	ldr	r3, [r0, #16]
   3302e:	6818      	ldr	r0, [r3, #0]
	if (api->config_get == NULL) {
   33030:	6883      	ldr	r3, [r0, #8]
   33032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   33034:	b103      	cbz	r3, 33038 <api_config_get+0xc>
	return api->config_get(dev, cfg);
   33036:	4718      	bx	r3
}
   33038:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3303c:	4770      	bx	lr

0003303e <api_irq_is_pending>:
{
   3303e:	b508      	push	{r3, lr}
   33040:	4602      	mov	r2, r0
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   33042:	f7ff ffcd 	bl	32fe0 <api_irq_rx_ready>
   33046:	b930      	cbnz	r0, 33056 <api_irq_is_pending+0x18>
   33048:	4610      	mov	r0, r2
   3304a:	f7ff ffb7 	bl	32fbc <api_irq_tx_ready>
   3304e:	3800      	subs	r0, #0
   33050:	bf18      	it	ne
   33052:	2001      	movne	r0, #1
}
   33054:	bd08      	pop	{r3, pc}
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   33056:	2001      	movs	r0, #1
   33058:	e7fc      	b.n	33054 <api_irq_is_pending+0x16>

0003305a <api_fifo_read>:
{
   3305a:	b538      	push	{r3, r4, r5, lr}
   3305c:	4603      	mov	r3, r0
	struct lpuart_data *data = get_dev_data(dev);
   3305e:	691d      	ldr	r5, [r3, #16]
{
   33060:	4608      	mov	r0, r1
	return data->int_driven.rxlen - data->int_driven.rxrd;
   33062:	e9d5 436b 	ldrd	r4, r3, [r5, #428]	; 0x1ac
	if (available) {
   33066:	1ae4      	subs	r4, r4, r3
   33068:	d00d      	beq.n	33086 <api_fifo_read+0x2c>
		cpylen = MIN(available, size);
   3306a:	4294      	cmp	r4, r2
   3306c:	bf28      	it	cs
   3306e:	4614      	movcs	r4, r2
		memcpy(rx_data,
   33070:	f503 7396 	add.w	r3, r3, #300	; 0x12c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33074:	18e9      	adds	r1, r5, r3
   33076:	4622      	mov	r2, r4
   33078:	f002 fa85 	bl	35586 <memcpy>
		data->int_driven.rxrd += cpylen;
   3307c:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   33080:	4423      	add	r3, r4
   33082:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
}
   33086:	4620      	mov	r0, r4
   33088:	bd38      	pop	{r3, r4, r5, pc}

0003308a <api_poll_in>:
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   3308a:	2201      	movs	r2, #1
{
   3308c:	b508      	push	{r3, lr}
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   3308e:	f7ff ffe4 	bl	3305a <api_fifo_read>
   33092:	fab0 f080 	clz	r0, r0
   33096:	0940      	lsrs	r0, r0, #5
}
   33098:	4240      	negs	r0, r0
   3309a:	bd08      	pop	{r3, pc}

0003309c <ctrl_pin_set.constprop.0>:
static void ctrl_pin_set(const struct lpuart_bidir_gpio *io, bool force)
   3309c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3309e:	4605      	mov	r5, r0
	__asm__ volatile(
   330a0:	f04f 0320 	mov.w	r3, #32
   330a4:	f3ef 8411 	mrs	r4, BASEPRI
   330a8:	f383 8811 	msr	BASEPRI, r3
   330ac:	f3bf 8f6f 	isb	sy
    p_reg->CONFIG[idx] = 0;
   330b0:	2200      	movs	r2, #0
   330b2:	7c83      	ldrb	r3, [r0, #18]
   330b4:	009b      	lsls	r3, r3, #2
   330b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   330ba:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   330be:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   330c2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_event_configure(NRF_GPIOTE, io->ch, io->nrf_pin,
   330c6:	7c41      	ldrb	r1, [r0, #17]
   330c8:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   330cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   330d0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   330d4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   330d8:	020a      	lsls	r2, r1, #8
   330da:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
   330de:	4302      	orrs	r2, r0
   330e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   330e4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   330e8:	a801      	add	r0, sp, #4
   330ea:	9101      	str	r1, [sp, #4]
   330ec:	f7eb fd2e 	bl	1eb4c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   330f0:	220c      	movs	r2, #12
   330f2:	9b01      	ldr	r3, [sp, #4]
   330f4:	3380      	adds	r3, #128	; 0x80
   330f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   330fa:	7cab      	ldrb	r3, [r5, #18]
   330fc:	009b      	lsls	r3, r3, #2
   330fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   33102:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   33106:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3310a:	f042 0201 	orr.w	r2, r2, #1
   3310e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	__asm__ volatile(
   33112:	f384 8811 	msr	BASEPRI, r4
   33116:	f3bf 8f6f 	isb	sy
}
   3311a:	b003      	add	sp, #12
   3311c:	bd30      	pop	{r4, r5, pc}

0003311e <api_tx>:
{
   3311e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lpuart_data *data = get_dev_data(dev);
   33120:	6904      	ldr	r4, [r0, #16]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   33122:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   33126:	e8d0 5fef 	ldaex	r5, [r0]
   3312a:	2d00      	cmp	r5, #0
   3312c:	d103      	bne.n	33136 <api_tx+0x18>
   3312e:	e8c0 1fe6 	stlex	r6, r1, [r0]
   33132:	2e00      	cmp	r6, #0
   33134:	d1f7      	bne.n	33126 <api_tx+0x8>
	if (!atomic_ptr_cas((atomic_ptr_t *)&data->tx_buf, NULL, (void *)buf)) {
   33136:	d127      	bne.n	33188 <api_tx+0x6a>
	data->tx_len = len;
   33138:	6722      	str	r2, [r4, #112]	; 0x70
	k_timer_start(&data->tx_timer, SYS_TIMEOUT_MS(timeout), K_NO_WAIT);
   3313a:	1c5a      	adds	r2, r3, #1
   3313c:	f104 0530 	add.w	r5, r4, #48	; 0x30
   33140:	d01e      	beq.n	33180 <api_tx+0x62>
   33142:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   33146:	f240 36e7 	movw	r6, #999	; 0x3e7
   3314a:	2700      	movs	r7, #0
   3314c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   33150:	fbc0 6701 	smlal	r6, r7, r0, r1
   33154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   33158:	2300      	movs	r3, #0
   3315a:	4630      	mov	r0, r6
   3315c:	4639      	mov	r1, r7
   3315e:	f7de f847 	bl	111f0 <__aeabi_uldivmod>
   33162:	4602      	mov	r2, r0
   33164:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   33166:	2100      	movs	r1, #0
   33168:	2000      	movs	r0, #0
   3316a:	e9cd 0100 	strd	r0, r1, [sp]
   3316e:	4628      	mov	r0, r5
   33170:	f7f8 ff88 	bl	2c084 <z_impl_k_timer_start>
	ctrl_pin_set(&data->req_pin, false);
   33174:	1d20      	adds	r0, r4, #4
   33176:	f7ff ff91 	bl	3309c <ctrl_pin_set.constprop.0>
	return 0;
   3317a:	2000      	movs	r0, #0
}
   3317c:	b003      	add	sp, #12
   3317e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_timer_start(&data->tx_timer, SYS_TIMEOUT_MS(timeout), K_NO_WAIT);
   33180:	f04f 32ff 	mov.w	r2, #4294967295
   33184:	4613      	mov	r3, r2
   33186:	e7ee      	b.n	33166 <api_tx+0x48>
		return -EBUSY;
   33188:	f06f 000f 	mvn.w	r0, #15
   3318c:	e7f6      	b.n	3317c <api_tx+0x5e>

0003318e <api_fifo_fill>:
	size = MIN(size, sizeof(data->int_driven.txbuf));
   3318e:	2a80      	cmp	r2, #128	; 0x80
   33190:	bf28      	it	cs
   33192:	2280      	movcs	r2, #128	; 0x80
{
   33194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33196:	4607      	mov	r7, r0
	size = MIN(size, sizeof(data->int_driven.txbuf));
   33198:	4614      	mov	r4, r2
	struct lpuart_data *data = get_dev_data(dev);
   3319a:	6905      	ldr	r5, [r0, #16]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3319c:	f505 7394 	add.w	r3, r5, #296	; 0x128
   331a0:	e8d3 2fef 	ldaex	r2, [r3]
   331a4:	2a00      	cmp	r2, #0
   331a6:	d103      	bne.n	331b0 <api_fifo_fill+0x22>
   331a8:	e8c3 4fe0 	stlex	r0, r4, [r3]
   331ac:	2800      	cmp	r0, #0
   331ae:	d1f7      	bne.n	331a0 <api_fifo_fill+0x12>
   331b0:	bf0c      	ite	eq
   331b2:	2001      	moveq	r0, #1
   331b4:	2000      	movne	r0, #0
	if (!atomic_cas((atomic_t *)&data->int_driven.txlen, 0, size)) {
   331b6:	d113      	bne.n	331e0 <api_fifo_fill+0x52>
	memcpy(data->int_driven.txbuf, tx_data, size);
   331b8:	f105 06a8 	add.w	r6, r5, #168	; 0xa8
   331bc:	4622      	mov	r2, r4
   331be:	4630      	mov	r0, r6
   331c0:	f002 f9e1 	bl	35586 <memcpy>
	err = api_tx(dev, data->int_driven.txbuf,
   331c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   331c8:	4631      	mov	r1, r6
   331ca:	4638      	mov	r0, r7
   331cc:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
   331d0:	f7ff ffa5 	bl	3311e <api_tx>
	if (err < 0) {
   331d4:	2800      	cmp	r0, #0
		data->int_driven.txlen = 0;
   331d6:	bfb6      	itet	lt
   331d8:	2000      	movlt	r0, #0
	size = MIN(size, sizeof(data->int_driven.txbuf));
   331da:	4620      	movge	r0, r4
		data->int_driven.txlen = 0;
   331dc:	f8c5 0128 	strlt.w	r0, [r5, #296]	; 0x128
}
   331e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000331e2 <api_rx_disable>:
	data->rx_state = RX_TO_OFF;
   331e2:	2206      	movs	r2, #6
	struct lpuart_data *data = get_dev_data(dev);
   331e4:	6903      	ldr	r3, [r0, #16]
	return uart_rx_disable(data->uart);
   331e6:	6818      	ldr	r0, [r3, #0]
	data->rx_state = RX_TO_OFF;
   331e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	return api->rx_disable(dev);
   331ec:	6883      	ldr	r3, [r0, #8]
   331ee:	695b      	ldr	r3, [r3, #20]
   331f0:	4718      	bx	r3

000331f2 <ctrl_pin_idle>:
{
   331f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (io->req) {
   331f4:	7cc5      	ldrb	r5, [r0, #19]
{
   331f6:	4604      	mov	r4, r0
	if (io->req) {
   331f8:	b11d      	cbz	r5, 33202 <ctrl_pin_idle+0x10>
		ctrl_pin_clear(io);
   331fa:	f7eb fcdf 	bl	1ebbc <ctrl_pin_clear>
}
   331fe:	b003      	add	sp, #12
   33200:	bd30      	pop	{r4, r5, pc}
    p_reg->CONFIG[idx] = 0;
   33202:	7c83      	ldrb	r3, [r0, #18]
   33204:	009b      	lsls	r3, r3, #2
   33206:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3320a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   3320e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   33212:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_event_configure(NRF_GPIOTE, io->ch, io->nrf_pin,
   33216:	7c41      	ldrb	r1, [r0, #17]
   33218:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   3321c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   33220:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   33224:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   33228:	020a      	lsls	r2, r1, #8
   3322a:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
   3322e:	4302      	orrs	r2, r0
   33230:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   33234:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33238:	a801      	add	r0, sp, #4
   3323a:	9101      	str	r1, [sp, #4]
   3323c:	f7eb fc86 	bl	1eb4c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33240:	9b01      	ldr	r3, [sp, #4]
   33242:	3380      	adds	r3, #128	; 0x80
   33244:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   33248:	7ca3      	ldrb	r3, [r4, #18]
   3324a:	009b      	lsls	r3, r3, #2
   3324c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   33250:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   33254:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   33258:	f042 0201 	orr.w	r2, r2, #1
   3325c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   33260:	e7cd      	b.n	331fe <ctrl_pin_idle+0xc>

00033262 <api_tx_abort>:
{
   33262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lpuart_data *data = get_dev_data(dev);
   33266:	6904      	ldr	r4, [r0, #16]
{
   33268:	4605      	mov	r5, r0
	const uint8_t *buf = data->tx_buf;
   3326a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
{
   3326c:	b086      	sub	sp, #24
	if (data->tx_buf == NULL) {
   3326e:	b37f      	cbz	r7, 332d0 <api_tx_abort+0x6e>
	z_impl_k_timer_stop(timer);
   33270:	f104 0030 	add.w	r0, r4, #48	; 0x30
   33274:	f002 f8e6 	bl	35444 <z_impl_k_timer_stop>
	__asm__ volatile(
   33278:	f04f 0320 	mov.w	r3, #32
   3327c:	f3ef 8811 	mrs	r8, BASEPRI
   33280:	f383 8811 	msr	BASEPRI, r3
   33284:	f3bf 8f6f 	isb	sy
	data->tx_buf = NULL;
   33288:	2600      	movs	r6, #0
	ctrl_pin_idle(&data->req_pin);
   3328a:	1d20      	adds	r0, r4, #4
   3328c:	f7ff ffb1 	bl	331f2 <ctrl_pin_idle>
	data->tx_buf = NULL;
   33290:	66e6      	str	r6, [r4, #108]	; 0x6c
	data->tx_active = false;
   33292:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
	__asm__ volatile(
   33296:	f388 8811 	msr	BASEPRI, r8
   3329a:	f3bf 8f6f 	isb	sy
	err = uart_tx_abort(data->uart);
   3329e:	6820      	ldr	r0, [r4, #0]
	return api->tx_abort(dev);
   332a0:	6883      	ldr	r3, [r0, #8]
   332a2:	689b      	ldr	r3, [r3, #8]
   332a4:	4798      	blx	r3
	if (err != -EFAULT) {
   332a6:	f110 0f0e 	cmn.w	r0, #14
   332aa:	4604      	mov	r4, r0
   332ac:	d10c      	bne.n	332c8 <api_tx_abort+0x66>
	struct uart_event event = {
   332ae:	4631      	mov	r1, r6
   332b0:	2214      	movs	r2, #20
   332b2:	a801      	add	r0, sp, #4
   332b4:	f002 f987 	bl	355c6 <memset>
   332b8:	2301      	movs	r3, #1
	user_callback(dev, &event);
   332ba:	4628      	mov	r0, r5
   332bc:	a901      	add	r1, sp, #4
	struct uart_event event = {
   332be:	f88d 3004 	strb.w	r3, [sp, #4]
   332c2:	9702      	str	r7, [sp, #8]
	user_callback(dev, &event);
   332c4:	f7ff fe63 	bl	32f8e <user_callback>
}
   332c8:	4620      	mov	r0, r4
   332ca:	b006      	add	sp, #24
   332cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EFAULT;
   332d0:	f06f 040d 	mvn.w	r4, #13
   332d4:	e7f8      	b.n	332c8 <api_tx_abort+0x66>

000332d6 <api_irq_rx_enable>:
{
   332d6:	b538      	push	{r3, r4, r5, lr}
	data->int_driven.rx_enabled = true;
   332d8:	2301      	movs	r3, #1
	struct lpuart_data *data = get_dev_data(dev);
   332da:	6904      	ldr	r4, [r0, #16]
{
   332dc:	4605      	mov	r5, r0
	data->int_driven.rx_enabled = true;
   332de:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
	if (int_driven_rd_available(data)) {
   332e2:	e9d4 326b 	ldrd	r3, r2, [r4, #428]	; 0x1ac
   332e6:	429a      	cmp	r2, r3
   332e8:	d109      	bne.n	332fe <api_irq_rx_enable+0x28>
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   332ea:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   332ee:	2b05      	cmp	r3, #5
   332f0:	d10c      	bne.n	3330c <api_irq_rx_enable+0x36>
		int_driven_rx_feed(dev, data);
   332f2:	4621      	mov	r1, r4
   332f4:	4628      	mov	r0, r5
}
   332f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		int_driven_rx_feed(dev, data);
   332fa:	f7eb bf71 	b.w	1f1e0 <int_driven_rx_feed>
		data->int_driven.callback(dev, data->int_driven.user_data);
   332fe:	e9d4 3128 	ldrd	r3, r1, [r4, #160]	; 0xa0
   33302:	4798      	blx	r3
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   33304:	e9d4 236b 	ldrd	r2, r3, [r4, #428]	; 0x1ac
   33308:	429a      	cmp	r2, r3
   3330a:	d0ee      	beq.n	332ea <api_irq_rx_enable+0x14>
}
   3330c:	bd38      	pop	{r3, r4, r5, pc}

0003330e <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   3330e:	2000      	movs	r0, #0
   33310:	4770      	bx	lr

00033312 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   33312:	4668      	mov	r0, sp
   33314:	f020 0107 	bic.w	r1, r0, #7
   33318:	468d      	mov	sp, r1
   3331a:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   3331c:	f7f1 fb70 	bl	24a00 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   33320:	f7e3 fd76 	bl	16e10 <_arch_isr_direct_pm>
   33324:	f7e3 feac 	bl	17080 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   33328:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3332c:	4685      	mov	sp, r0
   3332e:	4770      	bx	lr

00033330 <trace_task_create>:
{
   33330:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   33332:	201d      	movs	r0, #29
   33334:	2200      	movs	r2, #0
   33336:	2106      	movs	r1, #6
   33338:	f7e3 fd38 	bl	16dac <z_arm_irq_priority_set>
}
   3333c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   33340:	201d      	movs	r0, #29
   33342:	f7e3 bd01 	b.w	16d48 <arch_irq_enable>

00033346 <read_task_create>:
{
   33346:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   33348:	201c      	movs	r0, #28
   3334a:	2200      	movs	r2, #0
   3334c:	2106      	movs	r1, #6
   3334e:	f7e3 fd2d 	bl	16dac <z_arm_irq_priority_set>
}
   33352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   33356:	201c      	movs	r0, #28
   33358:	f7e3 bcf6 	b.w	16d48 <arch_irq_enable>

0003335c <nrf_modem_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   3335c:	2000      	movs	r0, #0
   3335e:	4770      	bx	lr

00033360 <z_to_nrf_flags>:
{
   33360:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   33362:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   33366:	bf18      	it	ne
   33368:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   3336a:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   3336c:	bf48      	it	mi
   3336e:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   33372:	069a      	lsls	r2, r3, #26
		nrf_flags |= NRF_MSG_TRUNC;
   33374:	bf48      	it	mi
   33376:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   3337a:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   3337c:	bf48      	it	mi
   3337e:	f040 0010 	orrmi.w	r0, r0, #16
}
   33382:	4770      	bx	lr

00033384 <z_to_nrf_family>:
	switch (z_family) {
   33384:	2806      	cmp	r0, #6
   33386:	d809      	bhi.n	3339c <z_to_nrf_family+0x18>
   33388:	2806      	cmp	r0, #6
   3338a:	d813      	bhi.n	333b4 <z_to_nrf_family+0x30>
   3338c:	e8df f000 	tbb	[pc, r0]
   33390:	0e041510 	.word	0x0e041510
   33394:	1212      	.short	0x1212
   33396:	0c          	.byte	0x0c
   33397:	00          	.byte	0x00
   33398:	200a      	movs	r0, #10
   3339a:	4770      	bx	lr
   3339c:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   3339e:	bf14      	ite	ne
   333a0:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   333a4:	2066      	moveq	r0, #102	; 0x66
   333a6:	4770      	bx	lr
		return NRF_AF_LOCAL;
   333a8:	2001      	movs	r0, #1
   333aa:	4770      	bx	lr
		return NRF_AF_PACKET;
   333ac:	2005      	movs	r0, #5
   333ae:	4770      	bx	lr
		return NRF_AF_UNSPEC;
   333b0:	2000      	movs	r0, #0
   333b2:	4770      	bx	lr
		return -EAFNOSUPPORT;
   333b4:	f06f 0069 	mvn.w	r0, #105	; 0x69
   333b8:	4770      	bx	lr
		return NRF_AF_INET;
   333ba:	2002      	movs	r0, #2
}
   333bc:	4770      	bx	lr

000333be <z_to_nrf_protocol>:
	switch (proto) {
   333be:	f240 1311 	movw	r3, #273	; 0x111
   333c2:	4298      	cmp	r0, r3
   333c4:	d023      	beq.n	3340e <z_to_nrf_protocol+0x50>
   333c6:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   333ca:	da11      	bge.n	333f0 <z_to_nrf_protocol+0x32>
   333cc:	2811      	cmp	r0, #17
   333ce:	d021      	beq.n	33414 <z_to_nrf_protocol+0x56>
   333d0:	dc06      	bgt.n	333e0 <z_to_nrf_protocol+0x22>
   333d2:	b300      	cbz	r0, 33416 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   333d4:	2806      	cmp	r0, #6
   333d6:	bf14      	ite	ne
   333d8:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   333dc:	2001      	moveq	r0, #1
   333de:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   333e0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   333e4:	bf14      	ite	ne
   333e6:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   333ea:	f44f 7082 	moveq.w	r0, #260	; 0x104
   333ee:	4770      	bx	lr
	switch (proto) {
   333f0:	f240 2302 	movw	r3, #514	; 0x202
   333f4:	4298      	cmp	r0, r3
   333f6:	d00e      	beq.n	33416 <z_to_nrf_protocol+0x58>
   333f8:	f240 2303 	movw	r3, #515	; 0x203
   333fc:	4298      	cmp	r0, r3
   333fe:	d00a      	beq.n	33416 <z_to_nrf_protocol+0x58>
   33400:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   33404:	4298      	cmp	r0, r3
   33406:	bf18      	it	ne
   33408:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3340c:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   3340e:	f44f 7087 	mov.w	r0, #270	; 0x10e
   33412:	4770      	bx	lr
	switch (proto) {
   33414:	2002      	movs	r0, #2
}
   33416:	4770      	bx	lr

00033418 <nrf91_socket_is_supported>:
}
   33418:	2001      	movs	r0, #1
   3341a:	4770      	bx	lr

0003341c <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   3341c:	f7f6 b872 	b.w	29504 <z_impl_k_mutex_unlock>

00033420 <nrf91_socket_offload_getsockopt>:
{
   33420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33424:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   33426:	2300      	movs	r3, #0
{
   33428:	b086      	sub	sp, #24
   3342a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3342e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   33432:	f8d8 3000 	ldr.w	r3, [r8]
{
   33436:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   33438:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3343a:	f240 2302 	movw	r3, #514	; 0x202
   3343e:	4299      	cmp	r1, r3
{
   33440:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   33442:	6807      	ldr	r7, [r0, #0]
	switch (z_in_level) {
   33444:	d005      	beq.n	33452 <nrf91_socket_offload_getsockopt+0x32>
   33446:	dc31      	bgt.n	334ac <nrf91_socket_offload_getsockopt+0x8c>
   33448:	2901      	cmp	r1, #1
   3344a:	d002      	beq.n	33452 <nrf91_socket_offload_getsockopt+0x32>
   3344c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   33450:	d13d      	bne.n	334ce <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   33452:	4631      	mov	r1, r6
   33454:	4620      	mov	r0, r4
   33456:	aa02      	add	r2, sp, #8
   33458:	f7ec fc00 	bl	1fc5c <z_to_nrf_optname>
   3345c:	2800      	cmp	r0, #0
   3345e:	db36      	blt.n	334ce <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   33460:	2c01      	cmp	r4, #1
   33462:	d127      	bne.n	334b4 <nrf91_socket_offload_getsockopt+0x94>
   33464:	f1a6 0314 	sub.w	r3, r6, #20
   33468:	2b01      	cmp	r3, #1
   3346a:	d823      	bhi.n	334b4 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   3346c:	2308      	movs	r3, #8
   3346e:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   33470:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   33472:	aa03      	add	r2, sp, #12
   33474:	4638      	mov	r0, r7
   33476:	9200      	str	r2, [sp, #0]
   33478:	4621      	mov	r1, r4
   3347a:	9a02      	ldr	r2, [sp, #8]
   3347c:	f001 fe3f 	bl	350fe <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   33480:	4607      	mov	r7, r0
   33482:	b978      	cbnz	r0, 334a4 <nrf91_socket_offload_getsockopt+0x84>
   33484:	b175      	cbz	r5, 334a4 <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   33486:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   33488:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3348a:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3348e:	d109      	bne.n	334a4 <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   33490:	2e04      	cmp	r6, #4
   33492:	d111      	bne.n	334b8 <nrf91_socket_offload_getsockopt+0x98>
				if (*(int *)optval != 0) {
   33494:	6828      	ldr	r0, [r5, #0]
   33496:	b128      	cbz	r0, 334a4 <nrf91_socket_offload_getsockopt+0x84>
					nrf_modem_os_errno_set(*(int *)optval);
   33498:	f7ec f9ea 	bl	1f870 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3349c:	f7fd f80a 	bl	304b4 <__errno>
   334a0:	6803      	ldr	r3, [r0, #0]
   334a2:	602b      	str	r3, [r5, #0]
}
   334a4:	4638      	mov	r0, r7
   334a6:	b006      	add	sp, #24
   334a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   334ac:	f240 2303 	movw	r3, #515	; 0x203
   334b0:	4299      	cmp	r1, r3
   334b2:	e7cd      	b.n	33450 <nrf91_socket_offload_getsockopt+0x30>
   334b4:	462b      	mov	r3, r5
   334b6:	e7dc      	b.n	33472 <nrf91_socket_offload_getsockopt+0x52>
			} else if ((optname == SO_RCVTIMEO) ||
   334b8:	3e14      	subs	r6, #20
   334ba:	2e01      	cmp	r6, #1
   334bc:	d8f2      	bhi.n	334a4 <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   334be:	9b04      	ldr	r3, [sp, #16]
   334c0:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   334c2:	9b05      	ldr	r3, [sp, #20]
   334c4:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   334c6:	2308      	movs	r3, #8
   334c8:	f8c8 3000 	str.w	r3, [r8]
   334cc:	e7ea      	b.n	334a4 <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   334ce:	f7fc fff1 	bl	304b4 <__errno>
   334d2:	236d      	movs	r3, #109	; 0x6d
	return retval;
   334d4:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   334d8:	6003      	str	r3, [r0, #0]
	return retval;
   334da:	e7e3      	b.n	334a4 <nrf91_socket_offload_getsockopt+0x84>

000334dc <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   334dc:	6800      	ldr	r0, [r0, #0]
   334de:	f001 bdbe 	b.w	3505e <nrf_listen>

000334e2 <nrf91_socket_offload_freeaddrinfo>:
{
   334e2:	b538      	push	{r3, r4, r5, lr}
   334e4:	4604      	mov	r4, r0
	while (next != NULL) {
   334e6:	b904      	cbnz	r4, 334ea <nrf91_socket_offload_freeaddrinfo+0x8>
}
   334e8:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   334ea:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   334ec:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   334ee:	f002 f809 	bl	35504 <k_free>
		k_free(this);
   334f2:	4620      	mov	r0, r4
   334f4:	f002 f806 	bl	35504 <k_free>
		next = next->ai_next;
   334f8:	462c      	mov	r4, r5
   334fa:	e7f4      	b.n	334e6 <nrf91_socket_offload_freeaddrinfo+0x4>

000334fc <z_to_nrf_addrinfo_hints>:
{
   334fc:	b538      	push	{r3, r4, r5, lr}
   334fe:	460c      	mov	r4, r1
   33500:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   33502:	2220      	movs	r2, #32
   33504:	2100      	movs	r1, #0
   33506:	4620      	mov	r0, r4
   33508:	f002 f85d 	bl	355c6 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3350c:	686a      	ldr	r2, [r5, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   3350e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   33512:	04d2      	lsls	r2, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   33514:	bf48      	it	mi
   33516:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3351a:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3351c:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   3351e:	2b03      	cmp	r3, #3
   33520:	d003      	beq.n	3352a <z_to_nrf_addrinfo_hints+0x2e>
   33522:	2b04      	cmp	r3, #4
   33524:	bf08      	it	eq
   33526:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   3352a:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3352c:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3352e:	f7ff ff29 	bl	33384 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   33532:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   33536:	d00b      	beq.n	33550 <z_to_nrf_addrinfo_hints+0x54>
	nrf_out->ai_family = family;
   33538:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3353a:	6928      	ldr	r0, [r5, #16]
   3353c:	f7ff ff3f 	bl	333be <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   33540:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   33544:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   33546:	d003      	beq.n	33550 <z_to_nrf_addrinfo_hints+0x54>
	if (z_in->ai_canonname != NULL) {
   33548:	69e8      	ldr	r0, [r5, #28]
   3354a:	b108      	cbz	r0, 33550 <z_to_nrf_addrinfo_hints+0x54>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3354c:	61a0      	str	r0, [r4, #24]
	return 0;
   3354e:	2000      	movs	r0, #0
}
   33550:	bd38      	pop	{r3, r4, r5, pc}

00033552 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   33552:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   33554:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   33556:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   33558:	4603      	mov	r3, r0
{
   3355a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3355c:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33560:	f101 0420 	add.w	r4, r1, #32
   33564:	f101 0210 	add.w	r2, r1, #16
   33568:	f852 5b04 	ldr.w	r5, [r2], #4
   3356c:	42a2      	cmp	r2, r4
   3356e:	f843 5b04 	str.w	r5, [r3], #4
   33572:	d1f9      	bne.n	33568 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   33574:	6a0b      	ldr	r3, [r1, #32]
   33576:	7503      	strb	r3, [r0, #20]
}
   33578:	bd30      	pop	{r4, r5, pc}

0003357a <z_to_nrf_ipv6>:
{
   3357a:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3357c:	2124      	movs	r1, #36	; 0x24
   3357e:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   33580:	8841      	ldrh	r1, [r0, #2]
{
   33582:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   33584:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   33586:	210a      	movs	r1, #10
{
   33588:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3358a:	6059      	str	r1, [r3, #4]
   3358c:	1d04      	adds	r4, r0, #4
   3358e:	f103 0610 	add.w	r6, r3, #16
   33592:	f100 0714 	add.w	r7, r0, #20
   33596:	4635      	mov	r5, r6
   33598:	6820      	ldr	r0, [r4, #0]
   3359a:	6861      	ldr	r1, [r4, #4]
   3359c:	3408      	adds	r4, #8
   3359e:	c503      	stmia	r5!, {r0, r1}
   335a0:	42bc      	cmp	r4, r7
   335a2:	462e      	mov	r6, r5
   335a4:	d1f7      	bne.n	33596 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   335a6:	7d12      	ldrb	r2, [r2, #20]
   335a8:	621a      	str	r2, [r3, #32]
}
   335aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000335ac <nrf91_socket_offload_sendto>:
{
   335ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   335b0:	b08d      	sub	sp, #52	; 0x34
   335b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   335b4:	460d      	mov	r5, r1
   335b6:	4616      	mov	r6, r2
   335b8:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   335ba:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   335be:	b96c      	cbnz	r4, 335dc <nrf91_socket_offload_sendto+0x30>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   335c0:	4618      	mov	r0, r3
   335c2:	f7ff fecd 	bl	33360 <z_to_nrf_flags>
   335c6:	4603      	mov	r3, r0
   335c8:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   335cc:	4632      	mov	r2, r6
   335ce:	4629      	mov	r1, r5
   335d0:	4640      	mov	r0, r8
   335d2:	f001 fcfd 	bl	34fd0 <nrf_sendto>
}
   335d6:	b00d      	add	sp, #52	; 0x34
   335d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   335dc:	8823      	ldrh	r3, [r4, #0]
   335de:	2b01      	cmp	r3, #1
   335e0:	d113      	bne.n	3360a <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   335e2:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   335e4:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   335e8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   335ec:	2302      	movs	r3, #2
   335ee:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   335f0:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   335f2:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   335f4:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   335f6:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   335fa:	f7ff feb1 	bl	33360 <z_to_nrf_flags>
   335fe:	aa03      	add	r2, sp, #12
   33600:	4603      	mov	r3, r0
   33602:	f8cd 9004 	str.w	r9, [sp, #4]
   33606:	9200      	str	r2, [sp, #0]
   33608:	e7e0      	b.n	335cc <nrf91_socket_offload_sendto+0x20>
	} else if (to->sa_family == AF_INET6) {
   3360a:	2b02      	cmp	r3, #2
   3360c:	d10d      	bne.n	3362a <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   3360e:	f10d 090c 	add.w	r9, sp, #12
   33612:	4649      	mov	r1, r9
   33614:	4620      	mov	r0, r4
   33616:	f7ff ffb0 	bl	3357a <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3361a:	4638      	mov	r0, r7
   3361c:	f7ff fea0 	bl	33360 <z_to_nrf_flags>
   33620:	2224      	movs	r2, #36	; 0x24
   33622:	4603      	mov	r3, r0
   33624:	e9cd 9200 	strd	r9, r2, [sp]
   33628:	e7d0      	b.n	335cc <nrf91_socket_offload_sendto+0x20>
	errno = ENOTSUP;
   3362a:	f7fc ff43 	bl	304b4 <__errno>
   3362e:	2386      	movs	r3, #134	; 0x86
   33630:	6003      	str	r3, [r0, #0]
	return retval;
   33632:	f04f 30ff 	mov.w	r0, #4294967295
   33636:	e7ce      	b.n	335d6 <nrf91_socket_offload_sendto+0x2a>

00033638 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   33638:	2300      	movs	r3, #0
{
   3363a:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3363c:	e9cd 3300 	strd	r3, r3, [sp]
   33640:	f7ff ffb4 	bl	335ac <nrf91_socket_offload_sendto>
}
   33644:	b003      	add	sp, #12
   33646:	f85d fb04 	ldr.w	pc, [sp], #4

0003364a <nrf91_socket_offload_connect>:
{
   3364a:	4603      	mov	r3, r0
   3364c:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3364e:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   33650:	880b      	ldrh	r3, [r1, #0]
{
   33652:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   33654:	2b01      	cmp	r3, #1
{
   33656:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   33658:	d10f      	bne.n	3367a <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   3365a:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3365c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3365e:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   33662:	2302      	movs	r3, #2
   33664:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   33666:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   33668:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3366c:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3366e:	4620      	mov	r0, r4
   33670:	a901      	add	r1, sp, #4
   33672:	f001 fce3 	bl	3503c <nrf_connect>
}
   33676:	b00a      	add	sp, #40	; 0x28
   33678:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3367a:	2b02      	cmp	r3, #2
   3367c:	d104      	bne.n	33688 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   3367e:	a901      	add	r1, sp, #4
   33680:	f7ff ff7b 	bl	3357a <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   33684:	2224      	movs	r2, #36	; 0x24
   33686:	e7f2      	b.n	3366e <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   33688:	4620      	mov	r0, r4
   3368a:	f001 fcd7 	bl	3503c <nrf_connect>
		if (retval < 0) {
   3368e:	2800      	cmp	r0, #0
   33690:	daf1      	bge.n	33676 <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   33692:	f7fc ff0f 	bl	304b4 <__errno>
   33696:	2386      	movs	r3, #134	; 0x86
   33698:	6003      	str	r3, [r0, #0]
   3369a:	f04f 30ff 	mov.w	r0, #4294967295
   3369e:	e7ea      	b.n	33676 <nrf91_socket_offload_connect+0x2c>

000336a0 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   336a0:	f7f5 be36 	b.w	29310 <z_impl_k_mutex_lock>

000336a4 <nrf91_socket_offload_recvfrom>:
{
   336a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   336a8:	4699      	mov	r9, r3
   336aa:	b08d      	sub	sp, #52	; 0x34
   336ac:	4606      	mov	r6, r0
   336ae:	e9dd 4814 	ldrd	r4, r8, [sp, #80]	; 0x50
	k_mutex_unlock(ctx->lock);
   336b2:	6840      	ldr	r0, [r0, #4]
{
   336b4:	460d      	mov	r5, r1
   336b6:	4617      	mov	r7, r2
	k_mutex_unlock(ctx->lock);
   336b8:	f7ff feb0 	bl	3341c <k_mutex_unlock>
	if (from == NULL) {
   336bc:	4648      	mov	r0, r9
   336be:	f7ff fe4f 	bl	33360 <z_to_nrf_flags>
   336c2:	4603      	mov	r3, r0
   336c4:	b994      	cbnz	r4, 336ec <nrf91_socket_offload_recvfrom+0x48>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   336c6:	4629      	mov	r1, r5
   336c8:	463a      	mov	r2, r7
   336ca:	e9cd 4400 	strd	r4, r4, [sp]
   336ce:	6830      	ldr	r0, [r6, #0]
   336d0:	f001 fc99 	bl	35006 <nrf_recvfrom>
   336d4:	4605      	mov	r5, r0
	k_mutex_lock(ctx->lock, K_FOREVER);
   336d6:	f04f 32ff 	mov.w	r2, #4294967295
   336da:	f04f 33ff 	mov.w	r3, #4294967295
   336de:	6870      	ldr	r0, [r6, #4]
   336e0:	f7ff ffde 	bl	336a0 <k_mutex_lock.constprop.0>
}
   336e4:	4628      	mov	r0, r5
   336e6:	b00d      	add	sp, #52	; 0x34
   336e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   336ec:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   336ee:	f10d 090c 	add.w	r9, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   336f2:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   336f4:	aa02      	add	r2, sp, #8
   336f6:	4629      	mov	r1, r5
   336f8:	9201      	str	r2, [sp, #4]
   336fa:	6830      	ldr	r0, [r6, #0]
   336fc:	463a      	mov	r2, r7
   336fe:	f8cd 9000 	str.w	r9, [sp]
   33702:	f001 fc80 	bl	35006 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   33706:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   33708:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   3370a:	2b02      	cmp	r3, #2
   3370c:	d10a      	bne.n	33724 <nrf91_socket_offload_recvfrom+0x80>
	ptr->sin_port = nrf_in->sin_port;
   3370e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   33712:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   33714:	2301      	movs	r3, #1
   33716:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   33718:	9b06      	ldr	r3, [sp, #24]
   3371a:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3371c:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3371e:	f8c8 3000 	str.w	r3, [r8]
   33722:	e7d8      	b.n	336d6 <nrf91_socket_offload_recvfrom+0x32>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   33724:	2b0a      	cmp	r3, #10
   33726:	d1d6      	bne.n	336d6 <nrf91_socket_offload_recvfrom+0x32>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   33728:	4649      	mov	r1, r9
   3372a:	4620      	mov	r0, r4
   3372c:	f7ff ff11 	bl	33552 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   33730:	2318      	movs	r3, #24
   33732:	e7f4      	b.n	3371e <nrf91_socket_offload_recvfrom+0x7a>

00033734 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   33734:	2300      	movs	r3, #0
{
   33736:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   33738:	e9cd 3300 	strd	r3, r3, [sp]
   3373c:	f7ff ffb2 	bl	336a4 <nrf91_socket_offload_recvfrom>
}
   33740:	b003      	add	sp, #12
   33742:	f85d fb04 	ldr.w	pc, [sp], #4

00033746 <nrf91_socket_offload_close>:
{
   33746:	b538      	push	{r3, r4, r5, lr}
   33748:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   3374a:	6800      	ldr	r0, [r0, #0]
   3374c:	f001 fc33 	bl	34fb6 <nrf_close>
	if (retval == 0) {
   33750:	4604      	mov	r4, r0
   33752:	b910      	cbnz	r0, 3375a <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   33754:	4628      	mov	r0, r5
   33756:	f7ec fdcf 	bl	202f8 <release_ctx>
}
   3375a:	4620      	mov	r0, r4
   3375c:	bd38      	pop	{r3, r4, r5, pc}

0003375e <nrf91_socket_offload_setsockopt>:
{
   3375e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33762:	461e      	mov	r6, r3
	switch (z_in_level) {
   33764:	f240 2302 	movw	r3, #514	; 0x202
{
   33768:	b086      	sub	sp, #24
	switch (z_in_level) {
   3376a:	4299      	cmp	r1, r3
{
   3376c:	460c      	mov	r4, r1
   3376e:	4615      	mov	r5, r2
   33770:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   33772:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   33776:	d005      	beq.n	33784 <nrf91_socket_offload_setsockopt+0x26>
   33778:	dc20      	bgt.n	337bc <nrf91_socket_offload_setsockopt+0x5e>
   3377a:	2901      	cmp	r1, #1
   3377c:	d002      	beq.n	33784 <nrf91_socket_offload_setsockopt+0x26>
   3377e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   33782:	d126      	bne.n	337d2 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   33784:	4629      	mov	r1, r5
   33786:	4620      	mov	r0, r4
   33788:	aa03      	add	r2, sp, #12
   3378a:	f7ec fa67 	bl	1fc5c <z_to_nrf_optname>
   3378e:	2800      	cmp	r0, #0
   33790:	db1f      	blt.n	337d2 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   33792:	2c01      	cmp	r4, #1
   33794:	d116      	bne.n	337c4 <nrf91_socket_offload_setsockopt+0x66>
   33796:	3d14      	subs	r5, #20
   33798:	2d01      	cmp	r5, #1
   3379a:	d805      	bhi.n	337a8 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   3379c:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3379e:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   337a0:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   337a2:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   337a4:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   337a6:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   337a8:	4633      	mov	r3, r6
   337aa:	4621      	mov	r1, r4
   337ac:	4640      	mov	r0, r8
   337ae:	9a03      	ldr	r2, [sp, #12]
   337b0:	9700      	str	r7, [sp, #0]
   337b2:	f001 fc89 	bl	350c8 <nrf_setsockopt>
}
   337b6:	b006      	add	sp, #24
   337b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   337bc:	f240 2303 	movw	r3, #515	; 0x203
   337c0:	4299      	cmp	r1, r3
   337c2:	e7de      	b.n	33782 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   337c4:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   337c8:	d1ee      	bne.n	337a8 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   337ca:	2d0a      	cmp	r5, #10
   337cc:	bf08      	it	eq
   337ce:	2701      	moveq	r7, #1
   337d0:	e7ea      	b.n	337a8 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   337d2:	f7fc fe6f 	bl	304b4 <__errno>
   337d6:	236d      	movs	r3, #109	; 0x6d
   337d8:	6003      	str	r3, [r0, #0]
   337da:	f04f 30ff 	mov.w	r0, #4294967295
   337de:	e7ea      	b.n	337b6 <nrf91_socket_offload_setsockopt+0x58>

000337e0 <nrf91_socket_offload_bind>:
{
   337e0:	4603      	mov	r3, r0
   337e2:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   337e4:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   337e6:	880b      	ldrh	r3, [r1, #0]
{
   337e8:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   337ea:	2b01      	cmp	r3, #1
{
   337ec:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   337ee:	d10f      	bne.n	33810 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   337f0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   337f2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   337f4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   337f8:	2302      	movs	r3, #2
   337fa:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   337fc:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   337fe:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   33802:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   33804:	4620      	mov	r0, r4
   33806:	a901      	add	r1, sp, #4
   33808:	f001 fc4d 	bl	350a6 <nrf_bind>
}
   3380c:	b00a      	add	sp, #40	; 0x28
   3380e:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   33810:	2b02      	cmp	r3, #2
   33812:	d104      	bne.n	3381e <nrf91_socket_offload_bind+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   33814:	a901      	add	r1, sp, #4
   33816:	f7ff feb0 	bl	3357a <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3381a:	2224      	movs	r2, #36	; 0x24
   3381c:	e7f2      	b.n	33804 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   3381e:	f7fc fe49 	bl	304b4 <__errno>
   33822:	2386      	movs	r3, #134	; 0x86
   33824:	6003      	str	r3, [r0, #0]
   33826:	f04f 30ff 	mov.w	r0, #4294967295
   3382a:	e7ef      	b.n	3380c <nrf91_socket_offload_bind+0x2c>

0003382c <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   3382c:	f7f5 be6a 	b.w	29504 <z_impl_k_mutex_unlock>

00033830 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable != NULL) {
   33830:	6883      	ldr	r3, [r0, #8]
   33832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   33834:	b103      	cbz	r3, 33838 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   33836:	4718      	bx	r3
}
   33838:	4770      	bx	lr

0003383a <response_handler>:
	write_uart_string(response);
   3383a:	4608      	mov	r0, r1
   3383c:	f7ed b9b8 	b.w	20bb0 <write_uart_string>

00033840 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   33840:	280d      	cmp	r0, #13
   33842:	d004      	beq.n	3384e <is_lfcr+0xe>
   33844:	f1a0 030a 	sub.w	r3, r0, #10
   33848:	4258      	negs	r0, r3
   3384a:	4158      	adcs	r0, r3
   3384c:	4770      	bx	lr
		return true;
   3384e:	2001      	movs	r0, #1
}
   33850:	4770      	bx	lr

00033852 <skip_command_prefix>:
{
   33852:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   33854:	6801      	ldr	r1, [r0, #0]
{
   33856:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   33858:	1c8b      	adds	r3, r1, #2
   3385a:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3385c:	788c      	ldrb	r4, [r1, #2]
   3385e:	4620      	mov	r0, r4
   33860:	f7ff ffee 	bl	33840 <is_lfcr>
   33864:	b910      	cbnz	r0, 3386c <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   33866:	b10c      	cbz	r4, 3386c <skip_command_prefix+0x1a>
	(*cmd)++;
   33868:	3103      	adds	r1, #3
   3386a:	6011      	str	r1, [r2, #0]
}
   3386c:	bd10      	pop	{r4, pc}

0003386e <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3386e:	6813      	ldr	r3, [r2, #0]
   33870:	f7ed bd62 	b.w	21338 <at_parser_max_params_from_str>

00033874 <at_params_list_init>:
{
   33874:	b538      	push	{r3, r4, r5, lr}
   33876:	460d      	mov	r5, r1
	if (list == NULL) {
   33878:	4604      	mov	r4, r0
   3387a:	b140      	cbz	r0, 3388e <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3387c:	2110      	movs	r1, #16
   3387e:	4628      	mov	r0, r5
   33880:	f001 fe4b 	bl	3551a <k_calloc>
   33884:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   33886:	b128      	cbz	r0, 33894 <at_params_list_init+0x20>
	return 0;
   33888:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3388a:	6025      	str	r5, [r4, #0]
}
   3388c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3388e:	f06f 0015 	mvn.w	r0, #21
   33892:	e7fb      	b.n	3388c <at_params_list_init+0x18>
		return -ENOMEM;
   33894:	f06f 000b 	mvn.w	r0, #11
   33898:	e7f8      	b.n	3388c <at_params_list_init+0x18>

0003389a <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3389a:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3389c:	4604      	mov	r4, r0
   3389e:	b148      	cbz	r0, 338b4 <at_params_list_free+0x1a>
   338a0:	6843      	ldr	r3, [r0, #4]
   338a2:	b13b      	cbz	r3, 338b4 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   338a4:	2500      	movs	r5, #0
	at_params_list_clear(list);
   338a6:	f7ed fe51 	bl	2154c <at_params_list_clear>
	k_free(list->params);
   338aa:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   338ac:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   338ae:	f001 fe29 	bl	35504 <k_free>
	list->params = NULL;
   338b2:	6065      	str	r5, [r4, #4]
}
   338b4:	bd38      	pop	{r3, r4, r5, pc}

000338b6 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   338b6:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   338b8:	b910      	cbnz	r0, 338c0 <at_params_empty_put+0xa>
		return -EINVAL;
   338ba:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   338be:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   338c0:	6843      	ldr	r3, [r0, #4]
   338c2:	2b00      	cmp	r3, #0
   338c4:	d0f9      	beq.n	338ba <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   338c6:	f7ed fdd7 	bl	21478 <at_params_get>
	if (param == NULL) {
   338ca:	4604      	mov	r4, r0
   338cc:	2800      	cmp	r0, #0
   338ce:	d0f4      	beq.n	338ba <at_params_empty_put+0x4>
	at_param_clear(param);
   338d0:	f7ed fe18 	bl	21504 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   338d4:	2304      	movs	r3, #4
	param->value.int_val = 0;
   338d6:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   338d8:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   338da:	2300      	movs	r3, #0
	return 0;
   338dc:	2000      	movs	r0, #0
	param->value.int_val = 0;
   338de:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   338e2:	e7ec      	b.n	338be <at_params_empty_put+0x8>

000338e4 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   338e4:	b570      	push	{r4, r5, r6, lr}
   338e6:	4616      	mov	r6, r2
   338e8:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   338ea:	b910      	cbnz	r0, 338f2 <at_params_int_put+0xe>
		return -EINVAL;
   338ec:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   338f0:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   338f2:	6843      	ldr	r3, [r0, #4]
   338f4:	2b00      	cmp	r3, #0
   338f6:	d0f9      	beq.n	338ec <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   338f8:	f7ed fdbe 	bl	21478 <at_params_get>
	if (param == NULL) {
   338fc:	4604      	mov	r4, r0
   338fe:	2800      	cmp	r0, #0
   33900:	d0f4      	beq.n	338ec <at_params_int_put+0x8>
	at_param_clear(param);
   33902:	f7ed fdff 	bl	21504 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   33906:	2301      	movs	r3, #1
	return 0;
   33908:	2000      	movs	r0, #0
	param->value.int_val = value;
   3390a:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   3390e:	7023      	strb	r3, [r4, #0]
	return 0;
   33910:	e7ee      	b.n	338f0 <at_params_int_put+0xc>

00033912 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   33912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33914:	4617      	mov	r7, r2
   33916:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   33918:	b910      	cbnz	r0, 33920 <at_params_string_put+0xe>
		return -EINVAL;
   3391a:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   33920:	6843      	ldr	r3, [r0, #4]
   33922:	2b00      	cmp	r3, #0
   33924:	d0f9      	beq.n	3391a <at_params_string_put+0x8>
   33926:	2a00      	cmp	r2, #0
   33928:	d0f7      	beq.n	3391a <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3392a:	f7ed fda5 	bl	21478 <at_params_get>
	if (param == NULL) {
   3392e:	4604      	mov	r4, r0
   33930:	2800      	cmp	r0, #0
   33932:	d0f2      	beq.n	3391a <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   33934:	1c68      	adds	r0, r5, #1
   33936:	f001 fdec 	bl	35512 <k_malloc>
	if (param_value == NULL) {
   3393a:	4606      	mov	r6, r0
   3393c:	b160      	cbz	r0, 33958 <at_params_string_put+0x46>
   3393e:	462a      	mov	r2, r5
   33940:	4639      	mov	r1, r7
   33942:	f001 fe20 	bl	35586 <memcpy>
	at_param_clear(param);
   33946:	4620      	mov	r0, r4
   33948:	f7ed fddc 	bl	21504 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3394c:	2302      	movs	r3, #2
	return 0;
   3394e:	2000      	movs	r0, #0
	param->size = str_len;
   33950:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   33952:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   33954:	60a6      	str	r6, [r4, #8]
	return 0;
   33956:	e7e2      	b.n	3391e <at_params_string_put+0xc>
		return -ENOMEM;
   33958:	f06f 000b 	mvn.w	r0, #11
   3395c:	e7df      	b.n	3391e <at_params_string_put+0xc>

0003395e <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   3395e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33960:	4617      	mov	r7, r2
   33962:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   33964:	b910      	cbnz	r0, 3396c <at_params_array_put+0xe>
		return -EINVAL;
   33966:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3396c:	6843      	ldr	r3, [r0, #4]
   3396e:	2b00      	cmp	r3, #0
   33970:	d0f9      	beq.n	33966 <at_params_array_put+0x8>
   33972:	2a00      	cmp	r2, #0
   33974:	d0f7      	beq.n	33966 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   33976:	f7ed fd7f 	bl	21478 <at_params_get>
	if (param == NULL) {
   3397a:	4604      	mov	r4, r0
   3397c:	2800      	cmp	r0, #0
   3397e:	d0f2      	beq.n	33966 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   33980:	4628      	mov	r0, r5
   33982:	f001 fdc6 	bl	35512 <k_malloc>
	if (param_value == NULL) {
   33986:	4606      	mov	r6, r0
   33988:	b160      	cbz	r0, 339a4 <at_params_array_put+0x46>
   3398a:	462a      	mov	r2, r5
   3398c:	4639      	mov	r1, r7
   3398e:	f001 fdfa 	bl	35586 <memcpy>
	at_param_clear(param);
   33992:	4620      	mov	r0, r4
   33994:	f7ed fdb6 	bl	21504 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   33998:	2303      	movs	r3, #3
	return 0;
   3399a:	2000      	movs	r0, #0
	param->size = array_len;
   3399c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3399e:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   339a0:	60a6      	str	r6, [r4, #8]
	return 0;
   339a2:	e7e2      	b.n	3396a <at_params_array_put+0xc>
		return -ENOMEM;
   339a4:	f06f 000b 	mvn.w	r0, #11
   339a8:	e7df      	b.n	3396a <at_params_array_put+0xc>

000339aa <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   339aa:	b5d0      	push	{r4, r6, r7, lr}
   339ac:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   339ae:	b910      	cbnz	r0, 339b6 <at_params_short_get+0xc>
		return -EINVAL;
   339b0:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   339b4:	bdd0      	pop	{r4, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   339b6:	6843      	ldr	r3, [r0, #4]
   339b8:	2b00      	cmp	r3, #0
   339ba:	d0f9      	beq.n	339b0 <at_params_short_get+0x6>
   339bc:	2a00      	cmp	r2, #0
   339be:	d0f7      	beq.n	339b0 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   339c0:	f7ed fd5a 	bl	21478 <at_params_get>
	if (param == NULL) {
   339c4:	2800      	cmp	r0, #0
   339c6:	d0f3      	beq.n	339b0 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   339c8:	7803      	ldrb	r3, [r0, #0]
   339ca:	2b01      	cmp	r3, #1
   339cc:	d1f0      	bne.n	339b0 <at_params_short_get+0x6>
	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   339ce:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   339d2:	f513 4600 	adds.w	r6, r3, #32768	; 0x8000
   339d6:	f142 0700 	adc.w	r7, r2, #0
   339da:	2f00      	cmp	r7, #0
   339dc:	bf08      	it	eq
   339de:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
   339e2:	d2e5      	bcs.n	339b0 <at_params_short_get+0x6>
	return 0;
   339e4:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   339e6:	8023      	strh	r3, [r4, #0]
	return 0;
   339e8:	e7e4      	b.n	339b4 <at_params_short_get+0xa>

000339ea <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   339ea:	b510      	push	{r4, lr}
   339ec:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   339ee:	b910      	cbnz	r0, 339f6 <at_params_unsigned_short_get+0xc>
		return -EINVAL;
   339f0:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   339f4:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   339f6:	6843      	ldr	r3, [r0, #4]
   339f8:	2b00      	cmp	r3, #0
   339fa:	d0f9      	beq.n	339f0 <at_params_unsigned_short_get+0x6>
   339fc:	2a00      	cmp	r2, #0
   339fe:	d0f7      	beq.n	339f0 <at_params_unsigned_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   33a00:	f7ed fd3a 	bl	21478 <at_params_get>
	if (param == NULL) {
   33a04:	2800      	cmp	r0, #0
   33a06:	d0f3      	beq.n	339f0 <at_params_unsigned_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   33a08:	7803      	ldrb	r3, [r0, #0]
   33a0a:	2b01      	cmp	r3, #1
   33a0c:	d1f0      	bne.n	339f0 <at_params_unsigned_short_get+0x6>
	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   33a0e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   33a12:	2b00      	cmp	r3, #0
   33a14:	bf08      	it	eq
   33a16:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   33a1a:	d2e9      	bcs.n	339f0 <at_params_unsigned_short_get+0x6>
	return 0;
   33a1c:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   33a1e:	8022      	strh	r2, [r4, #0]
	return 0;
   33a20:	e7e8      	b.n	339f4 <at_params_unsigned_short_get+0xa>

00033a22 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   33a22:	b5d0      	push	{r4, r6, r7, lr}
   33a24:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   33a26:	b910      	cbnz	r0, 33a2e <at_params_int_get+0xc>
		return -EINVAL;
   33a28:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   33a2c:	bdd0      	pop	{r4, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   33a2e:	6843      	ldr	r3, [r0, #4]
   33a30:	2b00      	cmp	r3, #0
   33a32:	d0f9      	beq.n	33a28 <at_params_int_get+0x6>
   33a34:	2a00      	cmp	r2, #0
   33a36:	d0f7      	beq.n	33a28 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   33a38:	f7ed fd1e 	bl	21478 <at_params_get>
	if (param == NULL) {
   33a3c:	2800      	cmp	r0, #0
   33a3e:	d0f3      	beq.n	33a28 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   33a40:	7803      	ldrb	r3, [r0, #0]
   33a42:	2b01      	cmp	r3, #1
   33a44:	d1f0      	bne.n	33a28 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   33a46:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   33a4a:	f113 4600 	adds.w	r6, r3, #2147483648	; 0x80000000
   33a4e:	f142 0700 	adc.w	r7, r2, #0
   33a52:	2f01      	cmp	r7, #1
   33a54:	bf08      	it	eq
   33a56:	2e00      	cmpeq	r6, #0
   33a58:	d2e6      	bcs.n	33a28 <at_params_int_get+0x6>
	return 0;
   33a5a:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   33a5c:	6023      	str	r3, [r4, #0]
	return 0;
   33a5e:	e7e5      	b.n	33a2c <at_params_int_get+0xa>

00033a60 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   33a60:	b510      	push	{r4, lr}
   33a62:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   33a64:	b910      	cbnz	r0, 33a6c <at_params_int64_get+0xc>
		return -EINVAL;
   33a66:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   33a6a:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   33a6c:	6843      	ldr	r3, [r0, #4]
   33a6e:	2b00      	cmp	r3, #0
   33a70:	d0f9      	beq.n	33a66 <at_params_int64_get+0x6>
   33a72:	2a00      	cmp	r2, #0
   33a74:	d0f7      	beq.n	33a66 <at_params_int64_get+0x6>
	struct at_param *param = at_params_get(list, index);
   33a76:	f7ed fcff 	bl	21478 <at_params_get>
	if (param == NULL) {
   33a7a:	2800      	cmp	r0, #0
   33a7c:	d0f3      	beq.n	33a66 <at_params_int64_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   33a7e:	7803      	ldrb	r3, [r0, #0]
   33a80:	2b01      	cmp	r3, #1
   33a82:	d1f0      	bne.n	33a66 <at_params_int64_get+0x6>
	*value = param->value.int_val;
   33a84:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   33a88:	2000      	movs	r0, #0
	*value = param->value.int_val;
   33a8a:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   33a8e:	e7ec      	b.n	33a6a <at_params_int64_get+0xa>

00033a90 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   33a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33a92:	4617      	mov	r7, r2
   33a94:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   33a96:	b910      	cbnz	r0, 33a9e <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   33a98:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   33a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   33a9e:	6843      	ldr	r3, [r0, #4]
   33aa0:	2b00      	cmp	r3, #0
   33aa2:	d0f9      	beq.n	33a98 <at_params_string_get+0x8>
   33aa4:	2a00      	cmp	r2, #0
   33aa6:	d0f7      	beq.n	33a98 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   33aa8:	2c00      	cmp	r4, #0
   33aaa:	d0f5      	beq.n	33a98 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   33aac:	f7ed fce4 	bl	21478 <at_params_get>
	if (param == NULL) {
   33ab0:	4606      	mov	r6, r0
   33ab2:	2800      	cmp	r0, #0
   33ab4:	d0f0      	beq.n	33a98 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   33ab6:	7803      	ldrb	r3, [r0, #0]
   33ab8:	2b02      	cmp	r3, #2
   33aba:	d1ed      	bne.n	33a98 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   33abc:	f7ed fcfe 	bl	214bc <at_param_size>
	if (*len < param_len) {
   33ac0:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   33ac2:	4605      	mov	r5, r0
	if (*len < param_len) {
   33ac4:	4283      	cmp	r3, r0
   33ac6:	d307      	bcc.n	33ad8 <at_params_string_get+0x48>
   33ac8:	4602      	mov	r2, r0
   33aca:	68b1      	ldr	r1, [r6, #8]
   33acc:	4638      	mov	r0, r7
   33ace:	f001 fd5a 	bl	35586 <memcpy>
	return 0;
   33ad2:	2000      	movs	r0, #0
	*len = param_len;
   33ad4:	6025      	str	r5, [r4, #0]
	return 0;
   33ad6:	e7e1      	b.n	33a9c <at_params_string_get+0xc>
		return -ENOMEM;
   33ad8:	f06f 000b 	mvn.w	r0, #11
   33adc:	e7de      	b.n	33a9c <at_params_string_get+0xc>

00033ade <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   33ade:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   33ae0:	4605      	mov	r5, r0
   33ae2:	b180      	cbz	r0, 33b06 <at_params_valid_count_get+0x28>
   33ae4:	6843      	ldr	r3, [r0, #4]
   33ae6:	b173      	cbz	r3, 33b06 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   33ae8:	2100      	movs	r1, #0
   33aea:	f7ed fcc5 	bl	21478 <at_params_get>
	size_t valid_i = 0;
   33aee:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   33af0:	b108      	cbz	r0, 33af6 <at_params_valid_count_get+0x18>
   33af2:	7803      	ldrb	r3, [r0, #0]
   33af4:	b90b      	cbnz	r3, 33afa <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   33af6:	4620      	mov	r0, r4
   33af8:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   33afa:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   33afc:	4621      	mov	r1, r4
   33afe:	4628      	mov	r0, r5
   33b00:	f7ed fcba 	bl	21478 <at_params_get>
   33b04:	e7f4      	b.n	33af0 <at_params_valid_count_get+0x12>
		return -EINVAL;
   33b06:	f06f 0415 	mvn.w	r4, #21
   33b0a:	e7f4      	b.n	33af6 <at_params_valid_count_get+0x18>

00033b0c <lte_lc_init_and_connect>:
{
   33b0c:	b508      	push	{r3, lr}
	ret = init_and_config();
   33b0e:	f7ee fa11 	bl	21f34 <init_and_config>
	if (ret) {
   33b12:	b920      	cbnz	r0, 33b1e <lte_lc_init_and_connect+0x12>
}
   33b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(true);
   33b18:	2001      	movs	r0, #1
   33b1a:	f7ee bb01 	b.w	22120 <connect_lte>
}
   33b1e:	bd08      	pop	{r3, pc}

00033b20 <string_to_int>:
{
   33b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33b22:	460c      	mov	r4, r1
   33b24:	4605      	mov	r5, r0
   33b26:	4616      	mov	r6, r2
	errno = 0;
   33b28:	f7fc fcc4 	bl	304b4 <__errno>
   33b2c:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   33b2e:	4622      	mov	r2, r4
	errno = 0;
   33b30:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   33b32:	a901      	add	r1, sp, #4
   33b34:	4628      	mov	r0, r5
   33b36:	f7f9 fe15 	bl	2d764 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   33b3a:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   33b3c:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   33b3e:	42ab      	cmp	r3, r5
   33b40:	d103      	bne.n	33b4a <string_to_int+0x2a>
		return -ENODATA;
   33b42:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   33b46:	b002      	add	sp, #8
   33b48:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   33b4a:	781b      	ldrb	r3, [r3, #0]
   33b4c:	2b00      	cmp	r3, #0
   33b4e:	d1f8      	bne.n	33b42 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   33b50:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   33b54:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   33b56:	3303      	adds	r3, #3
   33b58:	d802      	bhi.n	33b60 <string_to_int+0x40>
	return 0;
   33b5a:	2000      	movs	r0, #0
	*output = temp;
   33b5c:	6034      	str	r4, [r6, #0]
	return 0;
   33b5e:	e7f2      	b.n	33b46 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   33b60:	f7fc fca8 	bl	304b4 <__errno>
   33b64:	6803      	ldr	r3, [r0, #0]
   33b66:	2b22      	cmp	r3, #34	; 0x22
   33b68:	d1f7      	bne.n	33b5a <string_to_int+0x3a>
   33b6a:	e7ea      	b.n	33b42 <string_to_int+0x22>

00033b6c <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   33b6c:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   33b6e:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   33b70:	b087      	sub	sp, #28
   33b72:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   33b74:	ab01      	add	r3, sp, #4
   33b76:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   33b78:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   33b7a:	f7ff ff89 	bl	33a90 <at_params_string_get>
	if (err) {
   33b7e:	b968      	cbnz	r0, 33b9c <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   33b80:	9b01      	ldr	r3, [sp, #4]
   33b82:	aa06      	add	r2, sp, #24
   33b84:	4413      	add	r3, r2
   33b86:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   33b8a:	4622      	mov	r2, r4
   33b8c:	4629      	mov	r1, r5
   33b8e:	a802      	add	r0, sp, #8
   33b90:	f7ff ffc6 	bl	33b20 <string_to_int>
   33b94:	2800      	cmp	r0, #0
		return -ENODATA;
   33b96:	bf18      	it	ne
   33b98:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   33b9c:	b007      	add	sp, #28
   33b9e:	bd30      	pop	{r4, r5, pc}

00033ba0 <date_time_handler>:
}
   33ba0:	4770      	bx	lr

00033ba2 <k_uptime_get>:
{
   33ba2:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   33ba4:	f001 fc13 	bl	353ce <z_impl_k_uptime_ticks>
   33ba8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   33bac:	fba0 2304 	umull	r2, r3, r0, r4
   33bb0:	fb04 3301 	mla	r3, r4, r1, r3
   33bb4:	0bd0      	lsrs	r0, r2, #15
}
   33bb6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   33bba:	0bd9      	lsrs	r1, r3, #15
   33bbc:	bd10      	pop	{r4, pc}

00033bbe <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   33bbe:	4700      	bx	r0

00033bc0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   33bc0:	f001 bc07 	b.w	353d2 <z_impl_k_busy_wait>

00033bc4 <nrf_gpio_pin_clear>:
{
   33bc4:	b507      	push	{r0, r1, r2, lr}
   33bc6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33bc8:	a801      	add	r0, sp, #4
   33bca:	f7ef febb 	bl	23944 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   33bce:	2301      	movs	r3, #1
   33bd0:	9a01      	ldr	r2, [sp, #4]
   33bd2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   33bd4:	60c3      	str	r3, [r0, #12]
}
   33bd6:	b003      	add	sp, #12
   33bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00033bdc <nrf_gpio_pin_set>:
{
   33bdc:	b507      	push	{r0, r1, r2, lr}
   33bde:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33be0:	a801      	add	r0, sp, #4
   33be2:	f7ef feaf 	bl	23944 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   33be6:	2301      	movs	r3, #1
   33be8:	9a01      	ldr	r2, [sp, #4]
   33bea:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   33bec:	6083      	str	r3, [r0, #8]
}
   33bee:	b003      	add	sp, #12
   33bf0:	f85d fb04 	ldr.w	pc, [sp], #4

00033bf4 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   33bf4:	7b0a      	ldrb	r2, [r1, #12]
{
   33bf6:	4603      	mov	r3, r0
   33bf8:	2a03      	cmp	r2, #3
   33bfa:	d829      	bhi.n	33c50 <xfer_completeness_check+0x5c>
   33bfc:	e8df f002 	tbb	[pc, r2]
   33c00:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   33c04:	688a      	ldr	r2, [r1, #8]
   33c06:	0350      	lsls	r0, r2, #13
   33c08:	d504      	bpl.n	33c14 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   33c0a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   33c0e:	6908      	ldr	r0, [r1, #16]
   33c10:	4290      	cmp	r0, r2
   33c12:	d107      	bne.n	33c24 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   33c14:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   33c16:	0352      	lsls	r2, r2, #13
   33c18:	d41a      	bmi.n	33c50 <xfer_completeness_check+0x5c>
   33c1a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   33c1e:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   33c20:	4291      	cmp	r1, r2
   33c22:	d015      	beq.n	33c50 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   33c24:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   33c26:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   33c28:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   33c2c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   33c30:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   33c32:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   33c36:	6908      	ldr	r0, [r1, #16]
   33c38:	4290      	cmp	r0, r2
   33c3a:	d1f3      	bne.n	33c24 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   33c3c:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   33c40:	e7ed      	b.n	33c1e <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   33c42:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   33c46:	6909      	ldr	r1, [r1, #16]
   33c48:	e7ea      	b.n	33c20 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   33c4a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   33c4e:	e7fa      	b.n	33c46 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   33c50:	2001      	movs	r0, #1
}
   33c52:	4770      	bx	lr

00033c54 <nrf_gpio_pin_set>:
{
   33c54:	b507      	push	{r0, r1, r2, lr}
   33c56:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33c58:	a801      	add	r0, sp, #4
   33c5a:	f7f0 fe11 	bl	24880 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   33c5e:	2301      	movs	r3, #1
   33c60:	9a01      	ldr	r2, [sp, #4]
   33c62:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   33c64:	6083      	str	r3, [r0, #8]
}
   33c66:	b003      	add	sp, #12
   33c68:	f85d fb04 	ldr.w	pc, [sp], #4

00033c6c <rpc_handle_ctrl_message>:
   33c6c:	2902      	cmp	r1, #2
   33c6e:	b510      	push	{r4, lr}
   33c70:	4604      	mov	r4, r0
   33c72:	d005      	beq.n	33c80 <rpc_handle_ctrl_message+0x14>
   33c74:	2904      	cmp	r1, #4
   33c76:	d001      	beq.n	33c7c <rpc_handle_ctrl_message+0x10>
   33c78:	2901      	cmp	r1, #1
   33c7a:	d107      	bne.n	33c8c <rpc_handle_ctrl_message+0x20>
   33c7c:	2000      	movs	r0, #0
   33c7e:	bd10      	pop	{r4, pc}
   33c80:	6880      	ldr	r0, [r0, #8]
   33c82:	2800      	cmp	r0, #0
   33c84:	d0fa      	beq.n	33c7c <rpc_handle_ctrl_message+0x10>
   33c86:	f000 f83b 	bl	33d00 <rpc_transport_data_free>
   33c8a:	e7f7      	b.n	33c7c <rpc_handle_ctrl_message+0x10>
   33c8c:	6880      	ldr	r0, [r0, #8]
   33c8e:	b108      	cbz	r0, 33c94 <rpc_handle_ctrl_message+0x28>
   33c90:	f000 f836 	bl	33d00 <rpc_transport_data_free>
   33c94:	4620      	mov	r0, r4
   33c96:	f000 f82f 	bl	33cf8 <rpc_transport_msg_free>
   33c9a:	e7ef      	b.n	33c7c <rpc_handle_ctrl_message+0x10>

00033c9c <rpc_message_send>:
   33c9c:	684b      	ldr	r3, [r1, #4]
   33c9e:	8008      	strh	r0, [r1, #0]
   33ca0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33ca4:	f043 0302 	orr.w	r3, r3, #2
   33ca8:	4608      	mov	r0, r1
   33caa:	604b      	str	r3, [r1, #4]
   33cac:	f000 b82a 	b.w	33d04 <rpc_transport_data_msg_send>

00033cb0 <rpc_message_alloc>:
   33cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33cb2:	2300      	movs	r3, #0
   33cb4:	4607      	mov	r7, r0
   33cb6:	4616      	mov	r6, r2
   33cb8:	460d      	mov	r5, r1
   33cba:	6013      	str	r3, [r2, #0]
   33cbc:	b131      	cbz	r1, 33ccc <rpc_message_alloc+0x1c>
   33cbe:	4608      	mov	r0, r1
   33cc0:	f000 f81c 	bl	33cfc <rpc_transport_data_alloc>
   33cc4:	4604      	mov	r4, r0
   33cc6:	b910      	cbnz	r0, 33cce <rpc_message_alloc+0x1e>
   33cc8:	200c      	movs	r0, #12
   33cca:	e008      	b.n	33cde <rpc_message_alloc+0x2e>
   33ccc:	460c      	mov	r4, r1
   33cce:	f000 f811 	bl	33cf4 <rpc_transport_data_msg_alloc>
   33cd2:	b128      	cbz	r0, 33ce0 <rpc_message_alloc+0x30>
   33cd4:	60c5      	str	r5, [r0, #12]
   33cd6:	6084      	str	r4, [r0, #8]
   33cd8:	8007      	strh	r7, [r0, #0]
   33cda:	6030      	str	r0, [r6, #0]
   33cdc:	2000      	movs	r0, #0
   33cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33ce0:	2c00      	cmp	r4, #0
   33ce2:	d0f1      	beq.n	33cc8 <rpc_message_alloc+0x18>
   33ce4:	4620      	mov	r0, r4
   33ce6:	f000 f80b 	bl	33d00 <rpc_transport_data_free>
   33cea:	e7ed      	b.n	33cc8 <rpc_message_alloc+0x18>

00033cec <rpc_message_free>:
   33cec:	f000 b804 	b.w	33cf8 <rpc_transport_msg_free>

00033cf0 <rpc_message_data_free>:
   33cf0:	f000 b806 	b.w	33d00 <rpc_transport_data_free>

00033cf4 <rpc_transport_data_msg_alloc>:
   33cf4:	f7f0 bfe0 	b.w	24cb8 <rpc_transport_ipc_data_msg_alloc>

00033cf8 <rpc_transport_msg_free>:
   33cf8:	f7f1 b816 	b.w	24d28 <rpc_transport_ipc_msg_free>

00033cfc <rpc_transport_data_alloc>:
   33cfc:	f7f0 bffa 	b.w	24cf4 <rpc_transport_ipc_data_alloc>

00033d00 <rpc_transport_data_free>:
   33d00:	f7f1 b838 	b.w	24d74 <rpc_transport_ipc_data_free>

00033d04 <rpc_transport_data_msg_send>:
   33d04:	f7f0 bf84 	b.w	24c10 <rpc_transport_ipc_data_msg_send>

00033d08 <trace_write>:
   33d08:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   33d0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33d0e:	f8ad 3000 	strh.w	r3, [sp]
   33d12:	7803      	ldrb	r3, [r0, #0]
   33d14:	4604      	mov	r4, r0
   33d16:	f88d 3004 	strb.w	r3, [sp, #4]
   33d1a:	6843      	ldr	r3, [r0, #4]
   33d1c:	6882      	ldr	r2, [r0, #8]
   33d1e:	2105      	movs	r1, #5
   33d20:	4293      	cmp	r3, r2
   33d22:	bf96      	itet	ls
   33d24:	6906      	ldrls	r6, [r0, #16]
   33d26:	1a9e      	subhi	r6, r3, r2
   33d28:	1ab6      	subls	r6, r6, r2
   33d2a:	4293      	cmp	r3, r2
   33d2c:	bf2c      	ite	cs
   33d2e:	2500      	movcs	r5, #0
   33d30:	68c5      	ldrcc	r5, [r0, #12]
   33d32:	b2b6      	uxth	r6, r6
   33d34:	bf38      	it	cc
   33d36:	1b5b      	subcc	r3, r3, r5
   33d38:	4668      	mov	r0, sp
   33d3a:	bf38      	it	cc
   33d3c:	b29d      	uxthcc	r5, r3
   33d3e:	f8ad 6002 	strh.w	r6, [sp, #2]
   33d42:	f7ff fb0b 	bl	3335c <nrf_modem_os_trace_put>
   33d46:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33d4a:	68a0      	ldr	r0, [r4, #8]
   33d4c:	b289      	uxth	r1, r1
   33d4e:	f7ff fb05 	bl	3335c <nrf_modem_os_trace_put>
   33d52:	68a3      	ldr	r3, [r4, #8]
   33d54:	441e      	add	r6, r3
   33d56:	6923      	ldr	r3, [r4, #16]
   33d58:	60a6      	str	r6, [r4, #8]
   33d5a:	429e      	cmp	r6, r3
   33d5c:	bf04      	itt	eq
   33d5e:	68e3      	ldreq	r3, [r4, #12]
   33d60:	60a3      	streq	r3, [r4, #8]
   33d62:	b18d      	cbz	r5, 33d88 <trace_write+0x80>
   33d64:	2105      	movs	r1, #5
   33d66:	4668      	mov	r0, sp
   33d68:	f8ad 5002 	strh.w	r5, [sp, #2]
   33d6c:	f7ff faf6 	bl	3335c <nrf_modem_os_trace_put>
   33d70:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33d74:	68e0      	ldr	r0, [r4, #12]
   33d76:	b289      	uxth	r1, r1
   33d78:	f7ff faf0 	bl	3335c <nrf_modem_os_trace_put>
   33d7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   33d80:	68e2      	ldr	r2, [r4, #12]
   33d82:	fa12 f383 	uxtah	r3, r2, r3
   33d86:	60a3      	str	r3, [r4, #8]
   33d88:	b002      	add	sp, #8
   33d8a:	bd70      	pop	{r4, r5, r6, pc}

00033d8c <rpc_transport_ipc_msg_alloc>:
   33d8c:	2300      	movs	r3, #0
   33d8e:	b570      	push	{r4, r5, r6, lr}
   33d90:	6806      	ldr	r6, [r0, #0]
   33d92:	429e      	cmp	r6, r3
   33d94:	d101      	bne.n	33d9a <rpc_transport_ipc_msg_alloc+0xe>
   33d96:	2000      	movs	r0, #0
   33d98:	e00d      	b.n	33db6 <rpc_transport_ipc_msg_alloc+0x2a>
   33d9a:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
   33d9e:	6865      	ldr	r5, [r4, #4]
   33da0:	b2ed      	uxtb	r5, r5
   33da2:	2d03      	cmp	r5, #3
   33da4:	d108      	bne.n	33db8 <rpc_transport_ipc_msg_alloc+0x2c>
   33da6:	eb01 1083 	add.w	r0, r1, r3, lsl #6
   33daa:	60a0      	str	r0, [r4, #8]
   33dac:	6863      	ldr	r3, [r4, #4]
   33dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33db2:	6063      	str	r3, [r4, #4]
   33db4:	7102      	strb	r2, [r0, #4]
   33db6:	bd70      	pop	{r4, r5, r6, pc}
   33db8:	b915      	cbnz	r5, 33dc0 <rpc_transport_ipc_msg_alloc+0x34>
   33dba:	68a5      	ldr	r5, [r4, #8]
   33dbc:	2d00      	cmp	r5, #0
   33dbe:	d0f2      	beq.n	33da6 <rpc_transport_ipc_msg_alloc+0x1a>
   33dc0:	3301      	adds	r3, #1
   33dc2:	e7e6      	b.n	33d92 <rpc_transport_ipc_msg_alloc+0x6>

00033dc4 <at_client_evt_handler>:
   33dc4:	b120      	cbz	r0, 33dd0 <at_client_evt_handler+0xc>
   33dc6:	f850 1b08 	ldr.w	r1, [r0], #8
   33dca:	0c09      	lsrs	r1, r1, #16
   33dcc:	f000 be43 	b.w	34a56 <rpc_at_event_handler>
   33dd0:	4770      	bx	lr

00033dd2 <rpc_at_client_request_alloc>:
   33dd2:	2300      	movs	r3, #0
   33dd4:	b513      	push	{r0, r1, r4, lr}
   33dd6:	4604      	mov	r4, r0
   33dd8:	aa01      	add	r2, sp, #4
   33dda:	2003      	movs	r0, #3
   33ddc:	9301      	str	r3, [sp, #4]
   33dde:	f7ff ff67 	bl	33cb0 <rpc_message_alloc>
   33de2:	b918      	cbnz	r0, 33dec <rpc_at_client_request_alloc+0x1a>
   33de4:	9b01      	ldr	r3, [sp, #4]
   33de6:	b10b      	cbz	r3, 33dec <rpc_at_client_request_alloc+0x1a>
   33de8:	3308      	adds	r3, #8
   33dea:	6023      	str	r3, [r4, #0]
   33dec:	b002      	add	sp, #8
   33dee:	bd10      	pop	{r4, pc}

00033df0 <rpc_at_client_request_send>:
   33df0:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   33df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   33df8:	4601      	mov	r1, r0
   33dfa:	2003      	movs	r0, #3
   33dfc:	f841 3d08 	str.w	r3, [r1, #-8]!
   33e00:	f7ff bf4c 	b.w	33c9c <rpc_message_send>

00033e04 <rpc_at_client_message_free>:
   33e04:	3808      	subs	r0, #8
   33e06:	f7ff bf71 	b.w	33cec <rpc_message_free>

00033e0a <rpc_at_client_data_free>:
   33e0a:	f7ff bf71 	b.w	33cf0 <rpc_message_data_free>

00033e0e <ip_client_event_handler>:
   33e0e:	f850 1b08 	ldr.w	r1, [r0], #8
   33e12:	0c09      	lsrs	r1, r1, #16
   33e14:	f7f2 b8aa 	b.w	25f6c <rpc_ip_event_handler>

00033e18 <rpc_ip_client_request_alloc>:
   33e18:	2300      	movs	r3, #0
   33e1a:	b513      	push	{r0, r1, r4, lr}
   33e1c:	4604      	mov	r4, r0
   33e1e:	aa01      	add	r2, sp, #4
   33e20:	2004      	movs	r0, #4
   33e22:	9301      	str	r3, [sp, #4]
   33e24:	f7ff ff44 	bl	33cb0 <rpc_message_alloc>
   33e28:	b918      	cbnz	r0, 33e32 <rpc_ip_client_request_alloc+0x1a>
   33e2a:	9b01      	ldr	r3, [sp, #4]
   33e2c:	b10b      	cbz	r3, 33e32 <rpc_ip_client_request_alloc+0x1a>
   33e2e:	3308      	adds	r3, #8
   33e30:	6023      	str	r3, [r4, #0]
   33e32:	b002      	add	sp, #8
   33e34:	bd10      	pop	{r4, pc}

00033e36 <rpc_ip_client_request_send>:
   33e36:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   33e3a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   33e3e:	d109      	bne.n	33e54 <rpc_ip_client_request_send+0x1e>
   33e40:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   33e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   33e48:	4601      	mov	r1, r0
   33e4a:	2004      	movs	r0, #4
   33e4c:	f841 3d08 	str.w	r3, [r1, #-8]!
   33e50:	f7ff bf24 	b.w	33c9c <rpc_message_send>
   33e54:	2001      	movs	r0, #1
   33e56:	4770      	bx	lr

00033e58 <rpc_ip_client_message_free>:
   33e58:	3808      	subs	r0, #8
   33e5a:	f7ff bf47 	b.w	33cec <rpc_message_free>

00033e5e <rpc_ip_client_data_free>:
   33e5e:	f7ff bf47 	b.w	33cf0 <rpc_message_data_free>

00033e62 <dfu_client_event_handler>:
   33e62:	f850 1b08 	ldr.w	r1, [r0], #8
   33e66:	0c09      	lsrs	r1, r1, #16
   33e68:	f7f2 bf72 	b.w	26d50 <rpc_dfu_event_handler>

00033e6c <rpc_dfu_client_request_alloc>:
   33e6c:	2300      	movs	r3, #0
   33e6e:	b513      	push	{r0, r1, r4, lr}
   33e70:	4604      	mov	r4, r0
   33e72:	aa01      	add	r2, sp, #4
   33e74:	2006      	movs	r0, #6
   33e76:	9301      	str	r3, [sp, #4]
   33e78:	f7ff ff1a 	bl	33cb0 <rpc_message_alloc>
   33e7c:	b918      	cbnz	r0, 33e86 <rpc_dfu_client_request_alloc+0x1a>
   33e7e:	9b01      	ldr	r3, [sp, #4]
   33e80:	b10b      	cbz	r3, 33e86 <rpc_dfu_client_request_alloc+0x1a>
   33e82:	3308      	adds	r3, #8
   33e84:	6023      	str	r3, [r4, #0]
   33e86:	b002      	add	sp, #8
   33e88:	bd10      	pop	{r4, pc}

00033e8a <rpc_dfu_client_request_send>:
   33e8a:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   33e8e:	d109      	bne.n	33ea4 <rpc_dfu_client_request_send+0x1a>
   33e90:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   33e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   33e98:	4601      	mov	r1, r0
   33e9a:	2006      	movs	r0, #6
   33e9c:	f841 3d08 	str.w	r3, [r1, #-8]!
   33ea0:	f7ff befc 	b.w	33c9c <rpc_message_send>
   33ea4:	2001      	movs	r0, #1
   33ea6:	4770      	bx	lr

00033ea8 <rpc_dfu_client_message_free>:
   33ea8:	3808      	subs	r0, #8
   33eaa:	f7ff bf1f 	b.w	33cec <rpc_message_free>

00033eae <rpc_dfu_client_data_free>:
   33eae:	f7ff bf1f 	b.w	33cf0 <rpc_message_data_free>

00033eb2 <rpc_gnss_client_request_alloc>:
   33eb2:	2300      	movs	r3, #0
   33eb4:	b513      	push	{r0, r1, r4, lr}
   33eb6:	4604      	mov	r4, r0
   33eb8:	aa01      	add	r2, sp, #4
   33eba:	2007      	movs	r0, #7
   33ebc:	9301      	str	r3, [sp, #4]
   33ebe:	f7ff fef7 	bl	33cb0 <rpc_message_alloc>
   33ec2:	b918      	cbnz	r0, 33ecc <rpc_gnss_client_request_alloc+0x1a>
   33ec4:	9b01      	ldr	r3, [sp, #4]
   33ec6:	b10b      	cbz	r3, 33ecc <rpc_gnss_client_request_alloc+0x1a>
   33ec8:	3308      	adds	r3, #8
   33eca:	6023      	str	r3, [r4, #0]
   33ecc:	b002      	add	sp, #8
   33ece:	bd10      	pop	{r4, pc}

00033ed0 <rpc_gnss_client_request_send>:
   33ed0:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   33ed4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   33ed8:	4601      	mov	r1, r0
   33eda:	2007      	movs	r0, #7
   33edc:	f841 3d08 	str.w	r3, [r1, #-8]!
   33ee0:	f7ff bedc 	b.w	33c9c <rpc_message_send>

00033ee4 <rpc_gnss_client_message_free>:
   33ee4:	3808      	subs	r0, #8
   33ee6:	f7ff bf01 	b.w	33cec <rpc_message_free>

00033eea <rpc_gnss_client_data_free>:
   33eea:	f7ff bf01 	b.w	33cf0 <rpc_message_data_free>

00033eee <rpc_gnss_serialize_utc>:
   33eee:	b1c0      	cbz	r0, 33f22 <rpc_gnss_serialize_utc+0x34>
   33ef0:	b1b9      	cbz	r1, 33f22 <rpc_gnss_serialize_utc+0x34>
   33ef2:	2301      	movs	r3, #1
   33ef4:	700b      	strb	r3, [r1, #0]
   33ef6:	2300      	movs	r3, #0
   33ef8:	704b      	strb	r3, [r1, #1]
   33efa:	6843      	ldr	r3, [r0, #4]
   33efc:	f8c1 3006 	str.w	r3, [r1, #6]
   33f00:	6803      	ldr	r3, [r0, #0]
   33f02:	f8c1 3002 	str.w	r3, [r1, #2]
   33f06:	7a83      	ldrb	r3, [r0, #10]
   33f08:	730b      	strb	r3, [r1, #12]
   33f0a:	7b43      	ldrb	r3, [r0, #13]
   33f0c:	73cb      	strb	r3, [r1, #15]
   33f0e:	7b03      	ldrb	r3, [r0, #12]
   33f10:	738b      	strb	r3, [r1, #14]
   33f12:	7a03      	ldrb	r3, [r0, #8]
   33f14:	728b      	strb	r3, [r1, #10]
   33f16:	7ac3      	ldrb	r3, [r0, #11]
   33f18:	734b      	strb	r3, [r1, #13]
   33f1a:	7a43      	ldrb	r3, [r0, #9]
   33f1c:	2010      	movs	r0, #16
   33f1e:	72cb      	strb	r3, [r1, #11]
   33f20:	4770      	bx	lr
   33f22:	f04f 30ff 	mov.w	r0, #4294967295
   33f26:	4770      	bx	lr

00033f28 <rpc_gnss_serialize_ephe>:
   33f28:	2800      	cmp	r0, #0
   33f2a:	d044      	beq.n	33fb6 <rpc_gnss_serialize_ephe+0x8e>
   33f2c:	2900      	cmp	r1, #0
   33f2e:	d042      	beq.n	33fb6 <rpc_gnss_serialize_ephe+0x8e>
   33f30:	2302      	movs	r3, #2
   33f32:	700b      	strb	r3, [r1, #0]
   33f34:	2300      	movs	r3, #0
   33f36:	704b      	strb	r3, [r1, #1]
   33f38:	68c3      	ldr	r3, [r0, #12]
   33f3a:	f8c1 300b 	str.w	r3, [r1, #11]
   33f3e:	8903      	ldrh	r3, [r0, #8]
   33f40:	f8a1 3009 	strh.w	r3, [r1, #9]
   33f44:	7983      	ldrb	r3, [r0, #6]
   33f46:	720b      	strb	r3, [r1, #8]
   33f48:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   33f4c:	878b      	strh	r3, [r1, #60]	; 0x3c
   33f4e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   33f50:	86cb      	strh	r3, [r1, #54]	; 0x36
   33f52:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   33f56:	874b      	strh	r3, [r1, #58]	; 0x3a
   33f58:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   33f5a:	868b      	strh	r3, [r1, #52]	; 0x34
   33f5c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   33f60:	87cb      	strh	r3, [r1, #62]	; 0x3e
   33f62:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   33f66:	870b      	strh	r3, [r1, #56]	; 0x38
   33f68:	8b83      	ldrh	r3, [r0, #28]
   33f6a:	830b      	strh	r3, [r1, #24]
   33f6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   33f6e:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   33f72:	7c83      	ldrb	r3, [r0, #18]
   33f74:	744b      	strb	r3, [r1, #17]
   33f76:	7843      	ldrb	r3, [r0, #1]
   33f78:	70cb      	strb	r3, [r1, #3]
   33f7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   33f7c:	62cb      	str	r3, [r1, #44]	; 0x2c
   33f7e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   33f80:	84cb      	strh	r3, [r1, #38]	; 0x26
   33f82:	8843      	ldrh	r3, [r0, #2]
   33f84:	808b      	strh	r3, [r1, #4]
   33f86:	6a03      	ldr	r3, [r0, #32]
   33f88:	f8c1 301a 	str.w	r3, [r1, #26]
   33f8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   33f8e:	630b      	str	r3, [r1, #48]	; 0x30
   33f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
   33f92:	f8c1 301e 	str.w	r3, [r1, #30]
   33f96:	6b03      	ldr	r3, [r0, #48]	; 0x30
   33f98:	628b      	str	r3, [r1, #40]	; 0x28
   33f9a:	7803      	ldrb	r3, [r0, #0]
   33f9c:	708b      	strb	r3, [r1, #2]
   33f9e:	7c03      	ldrb	r3, [r0, #16]
   33fa0:	73cb      	strb	r3, [r1, #15]
   33fa2:	8883      	ldrh	r3, [r0, #4]
   33fa4:	80cb      	strh	r3, [r1, #6]
   33fa6:	8a83      	ldrh	r3, [r0, #20]
   33fa8:	824b      	strh	r3, [r1, #18]
   33faa:	7c43      	ldrb	r3, [r0, #17]
   33fac:	740b      	strb	r3, [r1, #16]
   33fae:	6983      	ldr	r3, [r0, #24]
   33fb0:	2040      	movs	r0, #64	; 0x40
   33fb2:	614b      	str	r3, [r1, #20]
   33fb4:	4770      	bx	lr
   33fb6:	f04f 30ff 	mov.w	r0, #4294967295
   33fba:	4770      	bx	lr

00033fbc <rpc_gnss_serialize_alm>:
   33fbc:	b340      	cbz	r0, 34010 <rpc_gnss_serialize_alm+0x54>
   33fbe:	b339      	cbz	r1, 34010 <rpc_gnss_serialize_alm+0x54>
   33fc0:	2303      	movs	r3, #3
   33fc2:	700b      	strb	r3, [r1, #0]
   33fc4:	2300      	movs	r3, #0
   33fc6:	704b      	strb	r3, [r1, #1]
   33fc8:	8b83      	ldrh	r3, [r0, #28]
   33fca:	f8a1 301d 	strh.w	r3, [r1, #29]
   33fce:	8bc3      	ldrh	r3, [r0, #30]
   33fd0:	f8a1 301f 	strh.w	r3, [r1, #31]
   33fd4:	88c3      	ldrh	r3, [r0, #6]
   33fd6:	810b      	strh	r3, [r1, #8]
   33fd8:	8883      	ldrh	r3, [r0, #4]
   33fda:	80cb      	strh	r3, [r1, #6]
   33fdc:	78c3      	ldrb	r3, [r0, #3]
   33fde:	714b      	strb	r3, [r1, #5]
   33fe0:	6983      	ldr	r3, [r0, #24]
   33fe2:	f8c1 3019 	str.w	r3, [r1, #25]
   33fe6:	6903      	ldr	r3, [r0, #16]
   33fe8:	f8c1 3011 	str.w	r3, [r1, #17]
   33fec:	8903      	ldrh	r3, [r0, #8]
   33fee:	814b      	strh	r3, [r1, #10]
   33ff0:	68c3      	ldr	r3, [r0, #12]
   33ff2:	f8c1 300d 	str.w	r3, [r1, #13]
   33ff6:	7a83      	ldrb	r3, [r0, #10]
   33ff8:	730b      	strb	r3, [r1, #12]
   33ffa:	7803      	ldrb	r3, [r0, #0]
   33ffc:	708b      	strb	r3, [r1, #2]
   33ffe:	7883      	ldrb	r3, [r0, #2]
   34000:	710b      	strb	r3, [r1, #4]
   34002:	6943      	ldr	r3, [r0, #20]
   34004:	f8c1 3015 	str.w	r3, [r1, #21]
   34008:	7843      	ldrb	r3, [r0, #1]
   3400a:	2021      	movs	r0, #33	; 0x21
   3400c:	70cb      	strb	r3, [r1, #3]
   3400e:	4770      	bx	lr
   34010:	f04f 30ff 	mov.w	r0, #4294967295
   34014:	4770      	bx	lr

00034016 <rpc_gnss_serialize_klob>:
   34016:	b1b0      	cbz	r0, 34046 <rpc_gnss_serialize_klob+0x30>
   34018:	b1a9      	cbz	r1, 34046 <rpc_gnss_serialize_klob+0x30>
   3401a:	2304      	movs	r3, #4
   3401c:	700b      	strb	r3, [r1, #0]
   3401e:	2300      	movs	r3, #0
   34020:	704b      	strb	r3, [r1, #1]
   34022:	7803      	ldrb	r3, [r0, #0]
   34024:	708b      	strb	r3, [r1, #2]
   34026:	7843      	ldrb	r3, [r0, #1]
   34028:	70cb      	strb	r3, [r1, #3]
   3402a:	7883      	ldrb	r3, [r0, #2]
   3402c:	710b      	strb	r3, [r1, #4]
   3402e:	78c3      	ldrb	r3, [r0, #3]
   34030:	714b      	strb	r3, [r1, #5]
   34032:	7903      	ldrb	r3, [r0, #4]
   34034:	718b      	strb	r3, [r1, #6]
   34036:	7943      	ldrb	r3, [r0, #5]
   34038:	71cb      	strb	r3, [r1, #7]
   3403a:	7983      	ldrb	r3, [r0, #6]
   3403c:	720b      	strb	r3, [r1, #8]
   3403e:	79c3      	ldrb	r3, [r0, #7]
   34040:	200a      	movs	r0, #10
   34042:	724b      	strb	r3, [r1, #9]
   34044:	4770      	bx	lr
   34046:	f04f 30ff 	mov.w	r0, #4294967295
   3404a:	4770      	bx	lr

0003404c <rpc_gnss_serialize_nequick>:
   3404c:	b180      	cbz	r0, 34070 <rpc_gnss_serialize_nequick+0x24>
   3404e:	b179      	cbz	r1, 34070 <rpc_gnss_serialize_nequick+0x24>
   34050:	2305      	movs	r3, #5
   34052:	700b      	strb	r3, [r1, #0]
   34054:	2300      	movs	r3, #0
   34056:	704b      	strb	r3, [r1, #1]
   34058:	8803      	ldrh	r3, [r0, #0]
   3405a:	804b      	strh	r3, [r1, #2]
   3405c:	8843      	ldrh	r3, [r0, #2]
   3405e:	808b      	strh	r3, [r1, #4]
   34060:	8883      	ldrh	r3, [r0, #4]
   34062:	80cb      	strh	r3, [r1, #6]
   34064:	7983      	ldrb	r3, [r0, #6]
   34066:	720b      	strb	r3, [r1, #8]
   34068:	79c3      	ldrb	r3, [r0, #7]
   3406a:	200a      	movs	r0, #10
   3406c:	724b      	strb	r3, [r1, #9]
   3406e:	4770      	bx	lr
   34070:	f04f 30ff 	mov.w	r0, #4294967295
   34074:	4770      	bx	lr

00034076 <rpc_gnss_serialize_time_and_sv_tow>:
   34076:	b570      	push	{r4, r5, r6, lr}
   34078:	b1e8      	cbz	r0, 340b6 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   3407a:	b1e1      	cbz	r1, 340b6 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   3407c:	2206      	movs	r2, #6
   3407e:	2300      	movs	r3, #0
   34080:	700a      	strb	r2, [r1, #0]
   34082:	8802      	ldrh	r2, [r0, #0]
   34084:	704b      	strb	r3, [r1, #1]
   34086:	804a      	strh	r2, [r1, #2]
   34088:	68c2      	ldr	r2, [r0, #12]
   3408a:	f101 0410 	add.w	r4, r1, #16
   3408e:	f8c1 200a 	str.w	r2, [r1, #10]
   34092:	8902      	ldrh	r2, [r0, #8]
   34094:	810a      	strh	r2, [r1, #8]
   34096:	6842      	ldr	r2, [r0, #4]
   34098:	604a      	str	r2, [r1, #4]
   3409a:	8a06      	ldrh	r6, [r0, #16]
   3409c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   340a0:	188d      	adds	r5, r1, r2
   340a2:	81ee      	strh	r6, [r5, #14]
   340a4:	7c85      	ldrb	r5, [r0, #18]
   340a6:	3301      	adds	r3, #1
   340a8:	2b20      	cmp	r3, #32
   340aa:	54a5      	strb	r5, [r4, r2]
   340ac:	f100 0004 	add.w	r0, r0, #4
   340b0:	d1f3      	bne.n	3409a <rpc_gnss_serialize_time_and_sv_tow+0x24>
   340b2:	206e      	movs	r0, #110	; 0x6e
   340b4:	bd70      	pop	{r4, r5, r6, pc}
   340b6:	f04f 30ff 	mov.w	r0, #4294967295
   340ba:	e7fb      	b.n	340b4 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

000340bc <rpc_gnss_serialize_location>:
   340bc:	b1c0      	cbz	r0, 340f0 <rpc_gnss_serialize_location+0x34>
   340be:	b1b9      	cbz	r1, 340f0 <rpc_gnss_serialize_location+0x34>
   340c0:	2307      	movs	r3, #7
   340c2:	700b      	strb	r3, [r1, #0]
   340c4:	2300      	movs	r3, #0
   340c6:	704b      	strb	r3, [r1, #1]
   340c8:	8903      	ldrh	r3, [r0, #8]
   340ca:	814b      	strh	r3, [r1, #10]
   340cc:	7b83      	ldrb	r3, [r0, #14]
   340ce:	740b      	strb	r3, [r1, #16]
   340d0:	6803      	ldr	r3, [r0, #0]
   340d2:	f8c1 3002 	str.w	r3, [r1, #2]
   340d6:	6843      	ldr	r3, [r0, #4]
   340d8:	f8c1 3006 	str.w	r3, [r1, #6]
   340dc:	7b03      	ldrb	r3, [r0, #12]
   340de:	738b      	strb	r3, [r1, #14]
   340e0:	7b43      	ldrb	r3, [r0, #13]
   340e2:	73cb      	strb	r3, [r1, #15]
   340e4:	7a83      	ldrb	r3, [r0, #10]
   340e6:	730b      	strb	r3, [r1, #12]
   340e8:	7ac3      	ldrb	r3, [r0, #11]
   340ea:	2011      	movs	r0, #17
   340ec:	734b      	strb	r3, [r1, #13]
   340ee:	4770      	bx	lr
   340f0:	f04f 30ff 	mov.w	r0, #4294967295
   340f4:	4770      	bx	lr

000340f6 <rpc_gnss_serialize_integrity>:
   340f6:	b148      	cbz	r0, 3410c <rpc_gnss_serialize_integrity+0x16>
   340f8:	b141      	cbz	r1, 3410c <rpc_gnss_serialize_integrity+0x16>
   340fa:	2308      	movs	r3, #8
   340fc:	700b      	strb	r3, [r1, #0]
   340fe:	2300      	movs	r3, #0
   34100:	704b      	strb	r3, [r1, #1]
   34102:	6803      	ldr	r3, [r0, #0]
   34104:	2006      	movs	r0, #6
   34106:	f8c1 3002 	str.w	r3, [r1, #2]
   3410a:	4770      	bx	lr
   3410c:	f04f 30ff 	mov.w	r0, #4294967295
   34110:	4770      	bx	lr

00034112 <packet_handler_alloc_and_init>:
   34112:	b538      	push	{r3, r4, r5, lr}
   34114:	4604      	mov	r4, r0
   34116:	4608      	mov	r0, r1
   34118:	4611      	mov	r1, r2
   3411a:	4622      	mov	r2, r4
   3411c:	f7f4 f92a 	bl	28374 <packet_handler_create>
   34120:	61e0      	str	r0, [r4, #28]
   34122:	b158      	cbz	r0, 3413c <packet_handler_alloc_and_init+0x2a>
   34124:	6803      	ldr	r3, [r0, #0]
   34126:	681b      	ldr	r3, [r3, #0]
   34128:	4798      	blx	r3
   3412a:	4605      	mov	r5, r0
   3412c:	b120      	cbz	r0, 34138 <packet_handler_alloc_and_init+0x26>
   3412e:	69e0      	ldr	r0, [r4, #28]
   34130:	f000 fe82 	bl	34e38 <packet_handler_delete>
   34134:	2300      	movs	r3, #0
   34136:	61e3      	str	r3, [r4, #28]
   34138:	4628      	mov	r0, r5
   3413a:	bd38      	pop	{r3, r4, r5, pc}
   3413c:	250c      	movs	r5, #12
   3413e:	e7fb      	b.n	34138 <packet_handler_alloc_and_init+0x26>

00034140 <socket_free>:
   34140:	b510      	push	{r4, lr}
   34142:	4604      	mov	r4, r0
   34144:	69c0      	ldr	r0, [r0, #28]
   34146:	b108      	cbz	r0, 3414c <socket_free+0xc>
   34148:	f000 fe76 	bl	34e38 <packet_handler_delete>
   3414c:	4620      	mov	r0, r4
   3414e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34152:	222c      	movs	r2, #44	; 0x2c
   34154:	2100      	movs	r1, #0
   34156:	f001 ba36 	b.w	355c6 <memset>

0003415a <interface_socket_event_get>:
   3415a:	b510      	push	{r4, lr}
   3415c:	4604      	mov	r4, r0
   3415e:	b189      	cbz	r1, 34184 <interface_socket_event_get+0x2a>
   34160:	f7f1 f828 	bl	251b4 <interface_socket_from_handle_get>
   34164:	b158      	cbz	r0, 3417e <interface_socket_event_get+0x24>
   34166:	6803      	ldr	r3, [r0, #0]
   34168:	0c1b      	lsrs	r3, r3, #16
   3416a:	f003 020a 	and.w	r2, r3, #10
   3416e:	2a0a      	cmp	r2, #10
   34170:	bf14      	ite	ne
   34172:	f003 030f 	andne.w	r3, r3, #15
   34176:	f003 030d 	andeq.w	r3, r3, #13
   3417a:	600b      	str	r3, [r1, #0]
   3417c:	e002      	b.n	34184 <interface_socket_event_get+0x2a>
   3417e:	2c00      	cmp	r4, #0
   34180:	da01      	bge.n	34186 <interface_socket_event_get+0x2c>
   34182:	6008      	str	r0, [r1, #0]
   34184:	bd10      	pop	{r4, pc}
   34186:	2310      	movs	r3, #16
   34188:	e7f7      	b.n	3417a <interface_socket_event_get+0x20>

0003418a <address_family_verify>:
   3418a:	3802      	subs	r0, #2
   3418c:	2808      	cmp	r0, #8
   3418e:	b508      	push	{r3, lr}
   34190:	d806      	bhi.n	341a0 <address_family_verify+0x16>
   34192:	2301      	movs	r3, #1
   34194:	fa03 f000 	lsl.w	r0, r3, r0
   34198:	f240 1309 	movw	r3, #265	; 0x109
   3419c:	4218      	tst	r0, r3
   3419e:	d105      	bne.n	341ac <address_family_verify+0x22>
   341a0:	202f      	movs	r0, #47	; 0x2f
   341a2:	f7eb fb65 	bl	1f870 <nrf_modem_os_errno_set>
   341a6:	f04f 30ff 	mov.w	r0, #4294967295
   341aa:	bd08      	pop	{r3, pc}
   341ac:	2000      	movs	r0, #0
   341ae:	e7fc      	b.n	341aa <address_family_verify+0x20>

000341b0 <ip_recvd_packet_free_cb>:
   341b0:	b510      	push	{r4, lr}
   341b2:	4604      	mov	r4, r0
   341b4:	6800      	ldr	r0, [r0, #0]
   341b6:	f7ff fe52 	bl	33e5e <rpc_ip_client_data_free>
   341ba:	68a0      	ldr	r0, [r4, #8]
   341bc:	b118      	cbz	r0, 341c6 <ip_recvd_packet_free_cb+0x16>
   341be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   341c2:	f7eb bd0f 	b.w	1fbe4 <nrf_modem_os_free>
   341c6:	bd10      	pop	{r4, pc}

000341c8 <ip_addr_parse>:
   341c8:	b570      	push	{r4, r5, r6, lr}
   341ca:	4604      	mov	r4, r0
   341cc:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
   341d0:	684d      	ldr	r5, [r1, #4]
   341d2:	42a5      	cmp	r5, r4
   341d4:	d119      	bne.n	3420a <ip_addr_parse+0x42>
   341d6:	780c      	ldrb	r4, [r1, #0]
   341d8:	4294      	cmp	r4, r2
   341da:	d118      	bne.n	3420e <ip_addr_parse+0x46>
   341dc:	2d02      	cmp	r5, #2
   341de:	d10a      	bne.n	341f6 <ip_addr_parse+0x2e>
   341e0:	2c10      	cmp	r4, #16
   341e2:	d114      	bne.n	3420e <ip_addr_parse+0x46>
   341e4:	890a      	ldrh	r2, [r1, #8]
   341e6:	310c      	adds	r1, #12
   341e8:	8032      	strh	r2, [r6, #0]
   341ea:	2204      	movs	r2, #4
   341ec:	801a      	strh	r2, [r3, #0]
   341ee:	f001 f9ca 	bl	35586 <memcpy>
   341f2:	2000      	movs	r0, #0
   341f4:	bd70      	pop	{r4, r5, r6, pc}
   341f6:	2d0a      	cmp	r5, #10
   341f8:	d109      	bne.n	3420e <ip_addr_parse+0x46>
   341fa:	2c24      	cmp	r4, #36	; 0x24
   341fc:	d107      	bne.n	3420e <ip_addr_parse+0x46>
   341fe:	890a      	ldrh	r2, [r1, #8]
   34200:	8032      	strh	r2, [r6, #0]
   34202:	2210      	movs	r2, #16
   34204:	801a      	strh	r2, [r3, #0]
   34206:	4411      	add	r1, r2
   34208:	e7f1      	b.n	341ee <ip_addr_parse+0x26>
   3420a:	202f      	movs	r0, #47	; 0x2f
   3420c:	e7f2      	b.n	341f4 <ip_addr_parse+0x2c>
   3420e:	2016      	movs	r0, #22
   34210:	e7f0      	b.n	341f4 <ip_addr_parse+0x2c>

00034212 <protocol_verify>:
   34212:	b508      	push	{r3, lr}
   34214:	4603      	mov	r3, r0
   34216:	4608      	mov	r0, r1
   34218:	b169      	cbz	r1, 34236 <protocol_verify+0x24>
   3421a:	2b01      	cmp	r3, #1
   3421c:	d107      	bne.n	3422e <protocol_verify+0x1c>
   3421e:	2901      	cmp	r1, #1
   34220:	d013      	beq.n	3424a <protocol_verify+0x38>
   34222:	2029      	movs	r0, #41	; 0x29
   34224:	f7eb fb24 	bl	1f870 <nrf_modem_os_errno_set>
   34228:	f04f 30ff 	mov.w	r0, #4294967295
   3422c:	bd08      	pop	{r3, pc}
   3422e:	2b02      	cmp	r3, #2
   34230:	d10b      	bne.n	3424a <protocol_verify+0x38>
   34232:	2902      	cmp	r1, #2
   34234:	e7f4      	b.n	34220 <protocol_verify+0xe>
   34236:	2b01      	cmp	r3, #1
   34238:	d101      	bne.n	3423e <protocol_verify+0x2c>
   3423a:	6013      	str	r3, [r2, #0]
   3423c:	e7f6      	b.n	3422c <protocol_verify+0x1a>
   3423e:	2b03      	cmp	r3, #3
   34240:	d101      	bne.n	34246 <protocol_verify+0x34>
   34242:	6011      	str	r1, [r2, #0]
   34244:	e7f2      	b.n	3422c <protocol_verify+0x1a>
   34246:	2302      	movs	r3, #2
   34248:	e7f7      	b.n	3423a <protocol_verify+0x28>
   3424a:	2000      	movs	r0, #0
   3424c:	e7ee      	b.n	3422c <protocol_verify+0x1a>

0003424e <ip_interface_request_create>:
   3424e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34250:	4614      	mov	r4, r2
   34252:	2200      	movs	r2, #0
   34254:	4606      	mov	r6, r0
   34256:	460d      	mov	r5, r1
   34258:	a801      	add	r0, sp, #4
   3425a:	4619      	mov	r1, r3
   3425c:	9201      	str	r2, [sp, #4]
   3425e:	f7ff fddb 	bl	33e18 <rpc_ip_client_request_alloc>
   34262:	4603      	mov	r3, r0
   34264:	9801      	ldr	r0, [sp, #4]
   34266:	b943      	cbnz	r3, 3427a <ip_interface_request_create+0x2c>
   34268:	2208      	movs	r2, #8
   3426a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   3426e:	60c4      	str	r4, [r0, #12]
   34270:	6105      	str	r5, [r0, #16]
   34272:	7202      	strb	r2, [r0, #8]
   34274:	7243      	strb	r3, [r0, #9]
   34276:	7283      	strb	r3, [r0, #10]
   34278:	72c3      	strb	r3, [r0, #11]
   3427a:	b002      	add	sp, #8
   3427c:	bd70      	pop	{r4, r5, r6, pc}

0003427e <ip_interface_request_send>:
   3427e:	b570      	push	{r4, r5, r6, lr}
   34280:	460c      	mov	r4, r1
   34282:	4605      	mov	r5, r0
   34284:	4611      	mov	r1, r2
   34286:	4620      	mov	r0, r4
   34288:	461e      	mov	r6, r3
   3428a:	f7ff fdd4 	bl	33e36 <rpc_ip_client_request_send>
   3428e:	b140      	cbz	r0, 342a2 <ip_interface_request_send+0x24>
   34290:	6820      	ldr	r0, [r4, #0]
   34292:	b108      	cbz	r0, 34298 <ip_interface_request_send+0x1a>
   34294:	f7ff fde3 	bl	33e5e <rpc_ip_client_data_free>
   34298:	4620      	mov	r0, r4
   3429a:	f7ff fddd 	bl	33e58 <rpc_ip_client_message_free>
   3429e:	2023      	movs	r0, #35	; 0x23
   342a0:	602e      	str	r6, [r5, #0]
   342a2:	bd70      	pop	{r4, r5, r6, pc}

000342a4 <ip_interface_wait>:
   342a4:	b538      	push	{r3, r4, r5, lr}
   342a6:	4605      	mov	r5, r0
   342a8:	f7f0 ff4a 	bl	25140 <interface_socket_wait>
   342ac:	4604      	mov	r4, r0
   342ae:	b938      	cbnz	r0, 342c0 <ip_interface_wait+0x1c>
   342b0:	4628      	mov	r0, r5
   342b2:	f7f0 ff7f 	bl	251b4 <interface_socket_from_handle_get>
   342b6:	b118      	cbz	r0, 342c0 <ip_interface_wait+0x1c>
   342b8:	6844      	ldr	r4, [r0, #4]
   342ba:	b10c      	cbz	r4, 342c0 <ip_interface_wait+0x1c>
   342bc:	2300      	movs	r3, #0
   342be:	6043      	str	r3, [r0, #4]
   342c0:	4620      	mov	r0, r4
   342c2:	bd38      	pop	{r3, r4, r5, pc}

000342c4 <ip_interface_recvfrom>:
   342c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   342c8:	b087      	sub	sp, #28
   342ca:	4681      	mov	r9, r0
   342cc:	461e      	mov	r6, r3
   342ce:	4690      	mov	r8, r2
   342d0:	9f11      	ldr	r7, [sp, #68]	; 0x44
   342d2:	9101      	str	r1, [sp, #4]
   342d4:	2a00      	cmp	r2, #0
   342d6:	f000 80e3 	beq.w	344a0 <ip_interface_recvfrom+0x1dc>
   342da:	b11b      	cbz	r3, 342e4 <ip_interface_recvfrom+0x20>
   342dc:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   342e0:	f000 80e0 	beq.w	344a4 <ip_interface_recvfrom+0x1e0>
   342e4:	4648      	mov	r0, r9
   342e6:	f7f0 ff65 	bl	251b4 <interface_socket_from_handle_get>
   342ea:	4604      	mov	r4, r0
   342ec:	2800      	cmp	r0, #0
   342ee:	f000 80db 	beq.w	344a8 <ip_interface_recvfrom+0x1e4>
   342f2:	6803      	ldr	r3, [r0, #0]
   342f4:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   342f8:	d10f      	bne.n	3431a <ip_interface_recvfrom+0x56>
   342fa:	6802      	ldr	r2, [r0, #0]
   342fc:	b292      	uxth	r2, r2
   342fe:	2a06      	cmp	r2, #6
   34300:	f000 8094 	beq.w	3442c <ip_interface_recvfrom+0x168>
   34304:	6802      	ldr	r2, [r0, #0]
   34306:	461e      	mov	r6, r3
   34308:	b292      	uxth	r2, r2
   3430a:	2a07      	cmp	r2, #7
   3430c:	469a      	mov	sl, r3
   3430e:	f000 808f 	beq.w	34430 <ip_interface_recvfrom+0x16c>
   34312:	2239      	movs	r2, #57	; 0x39
   34314:	f04f 35ff 	mov.w	r5, #4294967295
   34318:	e07a      	b.n	34410 <ip_interface_recvfrom+0x14c>
   3431a:	07b1      	lsls	r1, r6, #30
   3431c:	d422      	bmi.n	34364 <ip_interface_recvfrom+0xa0>
   3431e:	6803      	ldr	r3, [r0, #0]
   34320:	00da      	lsls	r2, r3, #3
   34322:	d522      	bpl.n	3436a <ip_interface_recvfrom+0xa6>
   34324:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   34328:	f04f 35ff 	mov.w	r5, #4294967295
   3432c:	f006 0b10 	and.w	fp, r6, #16
   34330:	6822      	ldr	r2, [r4, #0]
   34332:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   34336:	d01b      	beq.n	34370 <ip_interface_recvfrom+0xac>
   34338:	6822      	ldr	r2, [r4, #0]
   3433a:	69e0      	ldr	r0, [r4, #28]
   3433c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   34340:	6022      	str	r2, [r4, #0]
   34342:	6802      	ldr	r2, [r0, #0]
   34344:	68d2      	ldr	r2, [r2, #12]
   34346:	4790      	blx	r2
   34348:	1c43      	adds	r3, r0, #1
   3434a:	4605      	mov	r5, r0
   3434c:	d029      	beq.n	343a2 <ip_interface_recvfrom+0xde>
   3434e:	4580      	cmp	r8, r0
   34350:	dd05      	ble.n	3435e <ip_interface_recvfrom+0x9a>
   34352:	6923      	ldr	r3, [r4, #16]
   34354:	2b01      	cmp	r3, #1
   34356:	d102      	bne.n	3435e <ip_interface_recvfrom+0x9a>
   34358:	f1bb 0f00 	cmp.w	fp, #0
   3435c:	d125      	bne.n	343aa <ip_interface_recvfrom+0xe6>
   3435e:	f04f 0a00 	mov.w	sl, #0
   34362:	e040      	b.n	343e6 <ip_interface_recvfrom+0x122>
   34364:	f04f 0a00 	mov.w	sl, #0
   34368:	e7de      	b.n	34328 <ip_interface_recvfrom+0x64>
   3436a:	f04f 0a01 	mov.w	sl, #1
   3436e:	e7db      	b.n	34328 <ip_interface_recvfrom+0x64>
   34370:	6821      	ldr	r1, [r4, #0]
   34372:	0308      	lsls	r0, r1, #12
   34374:	d515      	bpl.n	343a2 <ip_interface_recvfrom+0xde>
   34376:	6821      	ldr	r1, [r4, #0]
   34378:	b289      	uxth	r1, r1
   3437a:	290d      	cmp	r1, #13
   3437c:	d011      	beq.n	343a2 <ip_interface_recvfrom+0xde>
   3437e:	6923      	ldr	r3, [r4, #16]
   34380:	2b01      	cmp	r3, #1
   34382:	f000 8099 	beq.w	344b8 <ip_interface_recvfrom+0x1f4>
   34386:	4692      	mov	sl, r2
   34388:	2239      	movs	r2, #57	; 0x39
   3438a:	6823      	ldr	r3, [r4, #0]
   3438c:	0c1b      	lsrs	r3, r3, #16
   3438e:	041b      	lsls	r3, r3, #16
   34390:	f043 030d 	orr.w	r3, r3, #13
   34394:	6023      	str	r3, [r4, #0]
   34396:	6823      	ldr	r3, [r4, #0]
   34398:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3439c:	6023      	str	r3, [r4, #0]
   3439e:	2600      	movs	r6, #0
   343a0:	e036      	b.n	34410 <ip_interface_recvfrom+0x14c>
   343a2:	f1ba 0f00 	cmp.w	sl, #0
   343a6:	f000 8088 	beq.w	344ba <ip_interface_recvfrom+0x1f6>
   343aa:	6a23      	ldr	r3, [r4, #32]
   343ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   343b0:	2b00      	cmp	r3, #0
   343b2:	bf08      	it	eq
   343b4:	f04f 33ff 	moveq.w	r3, #4294967295
   343b8:	4611      	mov	r1, r2
   343ba:	9302      	str	r3, [sp, #8]
   343bc:	4648      	mov	r0, r9
   343be:	ab02      	add	r3, sp, #8
   343c0:	f7ff ff70 	bl	342a4 <ip_interface_wait>
   343c4:	4602      	mov	r2, r0
   343c6:	2800      	cmp	r0, #0
   343c8:	d070      	beq.n	344ac <ip_interface_recvfrom+0x1e8>
   343ca:	6823      	ldr	r3, [r4, #0]
   343cc:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   343d0:	d06f      	beq.n	344b2 <ip_interface_recvfrom+0x1ee>
   343d2:	6823      	ldr	r3, [r4, #0]
   343d4:	b29b      	uxth	r3, r3
   343d6:	2b0d      	cmp	r3, #13
   343d8:	d06b      	beq.n	344b2 <ip_interface_recvfrom+0x1ee>
   343da:	6923      	ldr	r3, [r4, #16]
   343dc:	1e59      	subs	r1, r3, #1
   343de:	f1d1 0a00 	rsbs	sl, r1, #0
   343e2:	eb4a 0a01 	adc.w	sl, sl, r1
   343e6:	b107      	cbz	r7, 343ea <ip_interface_recvfrom+0x126>
   343e8:	683f      	ldr	r7, [r7, #0]
   343ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   343ec:	69e0      	ldr	r0, [r4, #28]
   343ee:	e9cd 2704 	strd	r2, r7, [sp, #16]
   343f2:	9b01      	ldr	r3, [sp, #4]
   343f4:	6802      	ldr	r2, [r0, #0]
   343f6:	e9cd 3802 	strd	r3, r8, [sp, #8]
   343fa:	6895      	ldr	r5, [r2, #8]
   343fc:	a902      	add	r1, sp, #8
   343fe:	4632      	mov	r2, r6
   34400:	47a8      	blx	r5
   34402:	1c42      	adds	r2, r0, #1
   34404:	4605      	mov	r5, r0
   34406:	bf0b      	itete	eq
   34408:	2600      	moveq	r6, #0
   3440a:	2601      	movne	r6, #1
   3440c:	2223      	moveq	r2, #35	; 0x23
   3440e:	2200      	movne	r2, #0
   34410:	69e0      	ldr	r0, [r4, #28]
   34412:	9201      	str	r2, [sp, #4]
   34414:	6801      	ldr	r1, [r0, #0]
   34416:	68c9      	ldr	r1, [r1, #12]
   34418:	4788      	blx	r1
   3441a:	3001      	adds	r0, #1
   3441c:	9a01      	ldr	r2, [sp, #4]
   3441e:	d009      	beq.n	34434 <ip_interface_recvfrom+0x170>
   34420:	6823      	ldr	r3, [r4, #0]
   34422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   34426:	6023      	str	r3, [r4, #0]
   34428:	b1a2      	cbz	r2, 34454 <ip_interface_recvfrom+0x190>
   3442a:	e028      	b.n	3447e <ip_interface_recvfrom+0x1ba>
   3442c:	461e      	mov	r6, r3
   3442e:	469a      	mov	sl, r3
   34430:	2209      	movs	r2, #9
   34432:	e76f      	b.n	34314 <ip_interface_recvfrom+0x50>
   34434:	f1ba 0f00 	cmp.w	sl, #0
   34438:	d010      	beq.n	3445c <ip_interface_recvfrom+0x198>
   3443a:	2e00      	cmp	r6, #0
   3443c:	d1f4      	bne.n	34428 <ip_interface_recvfrom+0x164>
   3443e:	4635      	mov	r5, r6
   34440:	6823      	ldr	r3, [r4, #0]
   34442:	0c1b      	lsrs	r3, r3, #16
   34444:	041b      	lsls	r3, r3, #16
   34446:	f043 030d 	orr.w	r3, r3, #13
   3444a:	6023      	str	r3, [r4, #0]
   3444c:	6823      	ldr	r3, [r4, #0]
   3444e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34452:	6023      	str	r3, [r4, #0]
   34454:	4628      	mov	r0, r5
   34456:	b007      	add	sp, #28
   34458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3445c:	2e00      	cmp	r6, #0
   3445e:	d1e3      	bne.n	34428 <ip_interface_recvfrom+0x164>
   34460:	6823      	ldr	r3, [r4, #0]
   34462:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   34466:	6823      	ldr	r3, [r4, #0]
   34468:	d00f      	beq.n	3448a <ip_interface_recvfrom+0x1c6>
   3446a:	2269      	movs	r2, #105	; 0x69
   3446c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   34470:	6023      	str	r3, [r4, #0]
   34472:	6823      	ldr	r3, [r4, #0]
   34474:	0c1b      	lsrs	r3, r3, #16
   34476:	041b      	lsls	r3, r3, #16
   34478:	f043 030d 	orr.w	r3, r3, #13
   3447c:	6023      	str	r3, [r4, #0]
   3447e:	4610      	mov	r0, r2
   34480:	f7eb f9f6 	bl	1f870 <nrf_modem_os_errno_set>
   34484:	f04f 35ff 	mov.w	r5, #4294967295
   34488:	e7e4      	b.n	34454 <ip_interface_recvfrom+0x190>
   3448a:	031b      	lsls	r3, r3, #12
   3448c:	d5cc      	bpl.n	34428 <ip_interface_recvfrom+0x164>
   3448e:	6823      	ldr	r3, [r4, #0]
   34490:	b29b      	uxth	r3, r3
   34492:	2b0d      	cmp	r3, #13
   34494:	d1c8      	bne.n	34428 <ip_interface_recvfrom+0x164>
   34496:	68a3      	ldr	r3, [r4, #8]
   34498:	2b00      	cmp	r3, #0
   3449a:	d0c5      	beq.n	34428 <ip_interface_recvfrom+0x164>
   3449c:	68a2      	ldr	r2, [r4, #8]
   3449e:	e7c3      	b.n	34428 <ip_interface_recvfrom+0x164>
   344a0:	2216      	movs	r2, #22
   344a2:	e7ec      	b.n	3447e <ip_interface_recvfrom+0x1ba>
   344a4:	222d      	movs	r2, #45	; 0x2d
   344a6:	e7ea      	b.n	3447e <ip_interface_recvfrom+0x1ba>
   344a8:	2209      	movs	r2, #9
   344aa:	e7e8      	b.n	3447e <ip_interface_recvfrom+0x1ba>
   344ac:	f04f 0a01 	mov.w	sl, #1
   344b0:	e73e      	b.n	34330 <ip_interface_recvfrom+0x6c>
   344b2:	2600      	movs	r6, #0
   344b4:	46b2      	mov	sl, r6
   344b6:	e7ab      	b.n	34410 <ip_interface_recvfrom+0x14c>
   344b8:	469a      	mov	sl, r3
   344ba:	2223      	movs	r2, #35	; 0x23
   344bc:	e76f      	b.n	3439e <ip_interface_recvfrom+0xda>

000344be <ip_interface_connect>:
   344be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   344c2:	4606      	mov	r6, r0
   344c4:	4691      	mov	r9, r2
   344c6:	460f      	mov	r7, r1
   344c8:	b085      	sub	sp, #20
   344ca:	2900      	cmp	r1, #0
   344cc:	d065      	beq.n	3459a <ip_interface_connect+0xdc>
   344ce:	2a00      	cmp	r2, #0
   344d0:	d063      	beq.n	3459a <ip_interface_connect+0xdc>
   344d2:	f7f0 fe6f 	bl	251b4 <interface_socket_from_handle_get>
   344d6:	4604      	mov	r4, r0
   344d8:	2800      	cmp	r0, #0
   344da:	d060      	beq.n	3459e <ip_interface_connect+0xe0>
   344dc:	6803      	ldr	r3, [r0, #0]
   344de:	b29b      	uxth	r3, r3
   344e0:	2b02      	cmp	r3, #2
   344e2:	d003      	beq.n	344ec <ip_interface_connect+0x2e>
   344e4:	6803      	ldr	r3, [r0, #0]
   344e6:	b29b      	uxth	r3, r3
   344e8:	2b04      	cmp	r3, #4
   344ea:	d14f      	bne.n	3458c <ip_interface_connect+0xce>
   344ec:	6823      	ldr	r3, [r4, #0]
   344ee:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   344f2:	d156      	bne.n	345a2 <ip_interface_connect+0xe4>
   344f4:	f247 0202 	movw	r2, #28674	; 0x7002
   344f8:	4630      	mov	r0, r6
   344fa:	69a1      	ldr	r1, [r4, #24]
   344fc:	f7ff fea7 	bl	3424e <ip_interface_request_create>
   34500:	4605      	mov	r5, r0
   34502:	2800      	cmp	r0, #0
   34504:	d04f      	beq.n	345a6 <ip_interface_connect+0xe8>
   34506:	f247 0802 	movw	r8, #28674	; 0x7002
   3450a:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   3450e:	60c3      	str	r3, [r0, #12]
   34510:	69a3      	ldr	r3, [r4, #24]
   34512:	464a      	mov	r2, r9
   34514:	6103      	str	r3, [r0, #16]
   34516:	6883      	ldr	r3, [r0, #8]
   34518:	4639      	mov	r1, r7
   3451a:	3304      	adds	r3, #4
   3451c:	6083      	str	r3, [r0, #8]
   3451e:	f100 0318 	add.w	r3, r0, #24
   34522:	9301      	str	r3, [sp, #4]
   34524:	f100 0314 	add.w	r3, r0, #20
   34528:	9300      	str	r3, [sp, #0]
   3452a:	f100 0316 	add.w	r3, r0, #22
   3452e:	68e0      	ldr	r0, [r4, #12]
   34530:	f7ff fe4a 	bl	341c8 <ip_addr_parse>
   34534:	bb18      	cbnz	r0, 3457e <ip_interface_connect+0xc0>
   34536:	68ab      	ldr	r3, [r5, #8]
   34538:	8aea      	ldrh	r2, [r5, #22]
   3453a:	6827      	ldr	r7, [r4, #0]
   3453c:	4413      	add	r3, r2
   3453e:	60ab      	str	r3, [r5, #8]
   34540:	6823      	ldr	r3, [r4, #0]
   34542:	4642      	mov	r2, r8
   34544:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   34548:	6023      	str	r3, [r4, #0]
   3454a:	4629      	mov	r1, r5
   3454c:	463b      	mov	r3, r7
   3454e:	4620      	mov	r0, r4
   34550:	f7ff fe95 	bl	3427e <ip_interface_request_send>
   34554:	b998      	cbnz	r0, 3457e <ip_interface_connect+0xc0>
   34556:	6823      	ldr	r3, [r4, #0]
   34558:	00db      	lsls	r3, r3, #3
   3455a:	d426      	bmi.n	345aa <ip_interface_connect+0xec>
   3455c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3455e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34562:	2b00      	cmp	r3, #0
   34564:	bf08      	it	eq
   34566:	f04f 33ff 	moveq.w	r3, #4294967295
   3456a:	2105      	movs	r1, #5
   3456c:	9303      	str	r3, [sp, #12]
   3456e:	4630      	mov	r0, r6
   34570:	ab03      	add	r3, sp, #12
   34572:	f7ff fe97 	bl	342a4 <ip_interface_wait>
   34576:	b130      	cbz	r0, 34586 <ip_interface_connect+0xc8>
   34578:	2873      	cmp	r0, #115	; 0x73
   3457a:	d000      	beq.n	3457e <ip_interface_connect+0xc0>
   3457c:	6027      	str	r7, [r4, #0]
   3457e:	f7eb f977 	bl	1f870 <nrf_modem_os_errno_set>
   34582:	f04f 30ff 	mov.w	r0, #4294967295
   34586:	b005      	add	sp, #20
   34588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3458c:	6803      	ldr	r3, [r0, #0]
   3458e:	b29b      	uxth	r3, r3
   34590:	2b05      	cmp	r3, #5
   34592:	bf14      	ite	ne
   34594:	2009      	movne	r0, #9
   34596:	2038      	moveq	r0, #56	; 0x38
   34598:	e7f1      	b.n	3457e <ip_interface_connect+0xc0>
   3459a:	2016      	movs	r0, #22
   3459c:	e7ef      	b.n	3457e <ip_interface_connect+0xc0>
   3459e:	2009      	movs	r0, #9
   345a0:	e7ed      	b.n	3457e <ip_interface_connect+0xc0>
   345a2:	2072      	movs	r0, #114	; 0x72
   345a4:	e7eb      	b.n	3457e <ip_interface_connect+0xc0>
   345a6:	200c      	movs	r0, #12
   345a8:	e7e9      	b.n	3457e <ip_interface_connect+0xc0>
   345aa:	2073      	movs	r0, #115	; 0x73
   345ac:	e7e7      	b.n	3457e <ip_interface_connect+0xc0>

000345ae <getopt_check_and_send_int>:
   345ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   345b0:	4604      	mov	r4, r0
   345b2:	460d      	mov	r5, r1
   345b4:	4618      	mov	r0, r3
   345b6:	4611      	mov	r1, r2
   345b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   345bc:	b193      	cbz	r3, 345e4 <getopt_check_and_send_int+0x36>
   345be:	681e      	ldr	r6, [r3, #0]
   345c0:	2e04      	cmp	r6, #4
   345c2:	d10f      	bne.n	345e4 <getopt_check_and_send_int+0x36>
   345c4:	b172      	cbz	r2, 345e4 <getopt_check_and_send_int+0x36>
   345c6:	e9cd 2300 	strd	r2, r3, [sp]
   345ca:	462b      	mov	r3, r5
   345cc:	4622      	mov	r2, r4
   345ce:	f7f1 f8cb 	bl	25768 <ip_interface_socketoption_get>
   345d2:	4603      	mov	r3, r0
   345d4:	b118      	cbz	r0, 345de <getopt_check_and_send_int+0x30>
   345d6:	f7eb f94b 	bl	1f870 <nrf_modem_os_errno_set>
   345da:	f04f 33ff 	mov.w	r3, #4294967295
   345de:	4618      	mov	r0, r3
   345e0:	b002      	add	sp, #8
   345e2:	bd70      	pop	{r4, r5, r6, pc}
   345e4:	2016      	movs	r0, #22
   345e6:	e7f6      	b.n	345d6 <getopt_check_and_send_int+0x28>

000345e8 <ip_interface_socketoption_send>:
   345e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   345ec:	4699      	mov	r9, r3
   345ee:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   345f2:	f04f 33ff 	mov.w	r3, #4294967295
   345f6:	9301      	str	r3, [sp, #4]
   345f8:	680b      	ldr	r3, [r1, #0]
   345fa:	4606      	mov	r6, r0
   345fc:	025d      	lsls	r5, r3, #9
   345fe:	460c      	mov	r4, r1
   34600:	4692      	mov	sl, r2
   34602:	d43c      	bmi.n	3467e <ip_interface_socketoption_send+0x96>
   34604:	680b      	ldr	r3, [r1, #0]
   34606:	0219      	lsls	r1, r3, #8
   34608:	d439      	bmi.n	3467e <ip_interface_socketoption_send+0x96>
   3460a:	6823      	ldr	r3, [r4, #0]
   3460c:	01da      	lsls	r2, r3, #7
   3460e:	d436      	bmi.n	3467e <ip_interface_socketoption_send+0x96>
   34610:	6823      	ldr	r3, [r4, #0]
   34612:	019b      	lsls	r3, r3, #6
   34614:	d433      	bmi.n	3467e <ip_interface_socketoption_send+0x96>
   34616:	f8d4 8000 	ldr.w	r8, [r4]
   3461a:	6823      	ldr	r3, [r4, #0]
   3461c:	f247 0203 	movw	r2, #28675	; 0x7003
   34620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   34624:	6023      	str	r3, [r4, #0]
   34626:	69a1      	ldr	r1, [r4, #24]
   34628:	463b      	mov	r3, r7
   3462a:	f7ff fe10 	bl	3424e <ip_interface_request_create>
   3462e:	4605      	mov	r5, r0
   34630:	b318      	cbz	r0, 3467a <ip_interface_socketoption_send+0x92>
   34632:	6883      	ldr	r3, [r0, #8]
   34634:	f8c0 a014 	str.w	sl, [r0, #20]
   34638:	3308      	adds	r3, #8
   3463a:	6083      	str	r3, [r0, #8]
   3463c:	f8c0 9018 	str.w	r9, [r0, #24]
   34640:	b13f      	cbz	r7, 34652 <ip_interface_socketoption_send+0x6a>
   34642:	f1bb 0f00 	cmp.w	fp, #0
   34646:	d004      	beq.n	34652 <ip_interface_socketoption_send+0x6a>
   34648:	463a      	mov	r2, r7
   3464a:	4659      	mov	r1, fp
   3464c:	6800      	ldr	r0, [r0, #0]
   3464e:	f000 ff9a 	bl	35586 <memcpy>
   34652:	4643      	mov	r3, r8
   34654:	f247 0203 	movw	r2, #28675	; 0x7003
   34658:	4629      	mov	r1, r5
   3465a:	4620      	mov	r0, r4
   3465c:	f7ff fe0f 	bl	3427e <ip_interface_request_send>
   34660:	b930      	cbnz	r0, 34670 <ip_interface_socketoption_send+0x88>
   34662:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   34666:	4630      	mov	r0, r6
   34668:	4611      	mov	r1, r2
   3466a:	ab01      	add	r3, sp, #4
   3466c:	f7ff fe1a 	bl	342a4 <ip_interface_wait>
   34670:	f8c4 8000 	str.w	r8, [r4]
   34674:	b003      	add	sp, #12
   34676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3467a:	200c      	movs	r0, #12
   3467c:	e7f8      	b.n	34670 <ip_interface_socketoption_send+0x88>
   3467e:	2023      	movs	r0, #35	; 0x23
   34680:	e7f8      	b.n	34674 <ip_interface_socketoption_send+0x8c>

00034682 <setopt_check_and_send_int>:
   34682:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34684:	4604      	mov	r4, r0
   34686:	460d      	mov	r5, r1
   34688:	4618      	mov	r0, r3
   3468a:	4611      	mov	r1, r2
   3468c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   34690:	2a04      	cmp	r2, #4
   34692:	d10f      	bne.n	346b4 <setopt_check_and_send_int+0x32>
   34694:	b173      	cbz	r3, 346b4 <setopt_check_and_send_int+0x32>
   34696:	e9cd 3200 	strd	r3, r2, [sp]
   3469a:	462b      	mov	r3, r5
   3469c:	4622      	mov	r2, r4
   3469e:	f7ff ffa3 	bl	345e8 <ip_interface_socketoption_send>
   346a2:	4603      	mov	r3, r0
   346a4:	b118      	cbz	r0, 346ae <setopt_check_and_send_int+0x2c>
   346a6:	f7eb f8e3 	bl	1f870 <nrf_modem_os_errno_set>
   346aa:	f04f 33ff 	mov.w	r3, #4294967295
   346ae:	4618      	mov	r0, r3
   346b0:	b003      	add	sp, #12
   346b2:	bd30      	pop	{r4, r5, pc}
   346b4:	2016      	movs	r0, #22
   346b6:	e7f6      	b.n	346a6 <setopt_check_and_send_int+0x24>

000346b8 <ip_interface_getopt>:
   346b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   346bc:	2901      	cmp	r1, #1
   346be:	4604      	mov	r4, r0
   346c0:	460f      	mov	r7, r1
   346c2:	4616      	mov	r6, r2
   346c4:	461d      	mov	r5, r3
   346c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   346ca:	d007      	beq.n	346dc <ip_interface_getopt+0x24>
   346cc:	202a      	movs	r0, #42	; 0x2a
   346ce:	f7eb f8cf 	bl	1f870 <nrf_modem_os_errno_set>
   346d2:	f04f 30ff 	mov.w	r0, #4294967295
   346d6:	b002      	add	sp, #8
   346d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   346dc:	f7f0 fd6a 	bl	251b4 <interface_socket_from_handle_get>
   346e0:	4602      	mov	r2, r0
   346e2:	b908      	cbnz	r0, 346e8 <ip_interface_getopt+0x30>
   346e4:	2009      	movs	r0, #9
   346e6:	e7f2      	b.n	346ce <ip_interface_getopt+0x16>
   346e8:	2e28      	cmp	r6, #40	; 0x28
   346ea:	dc0d      	bgt.n	34708 <ip_interface_getopt+0x50>
   346ec:	2e1d      	cmp	r6, #29
   346ee:	dd0d      	ble.n	3470c <ip_interface_getopt+0x54>
   346f0:	f1a6 031e 	sub.w	r3, r6, #30
   346f4:	2b0a      	cmp	r3, #10
   346f6:	d809      	bhi.n	3470c <ip_interface_getopt+0x54>
   346f8:	e8df f003 	tbb	[pc, r3]
   346fc:	08241d13 	.word	0x08241d13
   34700:	08080808 	.word	0x08080808
   34704:	0808      	.short	0x0808
   34706:	2b          	.byte	0x2b
   34707:	00          	.byte	0x00
   34708:	2e37      	cmp	r6, #55	; 0x37
   3470a:	d029      	beq.n	34760 <ip_interface_getopt+0xa8>
   3470c:	462b      	mov	r3, r5
   3470e:	4632      	mov	r2, r6
   34710:	2101      	movs	r1, #1
   34712:	4620      	mov	r0, r4
   34714:	f8cd 8020 	str.w	r8, [sp, #32]
   34718:	b002      	add	sp, #8
   3471a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3471e:	f7f0 bd91 	b.w	25244 <interface_socket_getopt>
   34722:	4623      	mov	r3, r4
   34724:	f248 0101 	movw	r1, #32769	; 0x8001
   34728:	f44f 7000 	mov.w	r0, #512	; 0x200
   3472c:	e9cd 5800 	strd	r5, r8, [sp]
   34730:	f7ff ff3d 	bl	345ae <getopt_check_and_send_int>
   34734:	e7cf      	b.n	346d6 <ip_interface_getopt+0x1e>
   34736:	4623      	mov	r3, r4
   34738:	f244 0110 	movw	r1, #16400	; 0x4010
   3473c:	2004      	movs	r0, #4
   3473e:	e9cd 5800 	strd	r5, r8, [sp]
   34742:	e7f5      	b.n	34730 <ip_interface_getopt+0x78>
   34744:	4623      	mov	r3, r4
   34746:	f246 0110 	movw	r1, #24592	; 0x6010
   3474a:	2006      	movs	r0, #6
   3474c:	e9cd 5800 	strd	r5, r8, [sp]
   34750:	e7ee      	b.n	34730 <ip_interface_getopt+0x78>
   34752:	4623      	mov	r3, r4
   34754:	f241 0104 	movw	r1, #4100	; 0x1004
   34758:	2008      	movs	r0, #8
   3475a:	e9cd 5800 	strd	r5, r8, [sp]
   3475e:	e7e7      	b.n	34730 <ip_interface_getopt+0x78>
   34760:	4623      	mov	r3, r4
   34762:	f245 0106 	movw	r1, #20486	; 0x5006
   34766:	4638      	mov	r0, r7
   34768:	e9cd 5800 	strd	r5, r8, [sp]
   3476c:	e7e0      	b.n	34730 <ip_interface_getopt+0x78>

0003476e <attach_trigger_condition_verify>:
   3476e:	6903      	ldr	r3, [r0, #16]
   34770:	2b01      	cmp	r3, #1
   34772:	d105      	bne.n	34780 <attach_trigger_condition_verify+0x12>
   34774:	6800      	ldr	r0, [r0, #0]
   34776:	b280      	uxth	r0, r0
   34778:	1f43      	subs	r3, r0, #5
   3477a:	4258      	negs	r0, r3
   3477c:	4158      	adcs	r0, r3
   3477e:	4770      	bx	lr
   34780:	2b02      	cmp	r3, #2
   34782:	d109      	bne.n	34798 <attach_trigger_condition_verify+0x2a>
   34784:	6803      	ldr	r3, [r0, #0]
   34786:	b29b      	uxth	r3, r3
   34788:	2b02      	cmp	r3, #2
   3478a:	d003      	beq.n	34794 <attach_trigger_condition_verify+0x26>
   3478c:	6803      	ldr	r3, [r0, #0]
   3478e:	b29b      	uxth	r3, r3
   34790:	2b04      	cmp	r3, #4
   34792:	d1ef      	bne.n	34774 <attach_trigger_condition_verify+0x6>
   34794:	2001      	movs	r0, #1
   34796:	4770      	bx	lr
   34798:	2000      	movs	r0, #0
   3479a:	4770      	bx	lr

0003479c <secure_client_socket>:
   3479c:	f04f 33ff 	mov.w	r3, #4294967295
   347a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   347a2:	9301      	str	r3, [sp, #4]
   347a4:	680b      	ldr	r3, [r1, #0]
   347a6:	4606      	mov	r6, r0
   347a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   347ac:	600b      	str	r3, [r1, #0]
   347ae:	680b      	ldr	r3, [r1, #0]
   347b0:	460c      	mov	r4, r1
   347b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   347b6:	600b      	str	r3, [r1, #0]
   347b8:	680f      	ldr	r7, [r1, #0]
   347ba:	463a      	mov	r2, r7
   347bc:	f7f1 fe3e 	bl	2643c <secure_socket_attach_initiate>
   347c0:	4605      	mov	r5, r0
   347c2:	b950      	cbnz	r0, 347da <secure_client_socket+0x3e>
   347c4:	220c      	movs	r2, #12
   347c6:	4630      	mov	r0, r6
   347c8:	4611      	mov	r1, r2
   347ca:	ab01      	add	r3, sp, #4
   347cc:	f7ff fd6a 	bl	342a4 <ip_interface_wait>
   347d0:	4605      	mov	r5, r0
   347d2:	b128      	cbz	r0, 347e0 <secure_client_socket+0x44>
   347d4:	2873      	cmp	r0, #115	; 0x73
   347d6:	d000      	beq.n	347da <secure_client_socket+0x3e>
   347d8:	6027      	str	r7, [r4, #0]
   347da:	4628      	mov	r0, r5
   347dc:	b003      	add	sp, #12
   347de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   347e0:	4630      	mov	r0, r6
   347e2:	f7f1 fe19 	bl	26418 <hostname_free>
   347e6:	6823      	ldr	r3, [r4, #0]
   347e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   347ec:	6023      	str	r3, [r4, #0]
   347ee:	6823      	ldr	r3, [r4, #0]
   347f0:	0c1b      	lsrs	r3, r3, #16
   347f2:	041b      	lsls	r3, r3, #16
   347f4:	f043 030c 	orr.w	r3, r3, #12
   347f8:	6023      	str	r3, [r4, #0]
   347fa:	6823      	ldr	r3, [r4, #0]
   347fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34800:	6023      	str	r3, [r4, #0]
   34802:	6823      	ldr	r3, [r4, #0]
   34804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   34808:	6023      	str	r3, [r4, #0]
   3480a:	e7e6      	b.n	347da <secure_client_socket+0x3e>

0003480c <tls_interface_close>:
   3480c:	b510      	push	{r4, lr}
   3480e:	4604      	mov	r4, r0
   34810:	f7f0 fcd0 	bl	251b4 <interface_socket_from_handle_get>
   34814:	b138      	cbz	r0, 34826 <tls_interface_close+0x1a>
   34816:	4620      	mov	r0, r4
   34818:	f7f1 fdfe 	bl	26418 <hostname_free>
   3481c:	4620      	mov	r0, r4
   3481e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34822:	f7f0 be37 	b.w	25494 <ip_interface_close>
   34826:	2009      	movs	r0, #9
   34828:	f7eb f822 	bl	1f870 <nrf_modem_os_errno_set>
   3482c:	f04f 30ff 	mov.w	r0, #4294967295
   34830:	bd10      	pop	{r4, pc}

00034832 <packet_free_cb>:
   34832:	6800      	ldr	r0, [r0, #0]
   34834:	f7ff bae9 	b.w	33e0a <rpc_at_client_data_free>

00034838 <at_interface_wait>:
   34838:	b538      	push	{r3, r4, r5, lr}
   3483a:	4605      	mov	r5, r0
   3483c:	f7f0 fc80 	bl	25140 <interface_socket_wait>
   34840:	4604      	mov	r4, r0
   34842:	b938      	cbnz	r0, 34854 <at_interface_wait+0x1c>
   34844:	4628      	mov	r0, r5
   34846:	f7f0 fcb5 	bl	251b4 <interface_socket_from_handle_get>
   3484a:	b118      	cbz	r0, 34854 <at_interface_wait+0x1c>
   3484c:	6844      	ldr	r4, [r0, #4]
   3484e:	b10c      	cbz	r4, 34854 <at_interface_wait+0x1c>
   34850:	2300      	movs	r3, #0
   34852:	6043      	str	r3, [r0, #4]
   34854:	4620      	mov	r0, r4
   34856:	bd38      	pop	{r3, r4, r5, pc}

00034858 <send_message>:
   34858:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3485c:	4606      	mov	r6, r0
   3485e:	4668      	mov	r0, sp
   34860:	460f      	mov	r7, r1
   34862:	4692      	mov	sl, r2
   34864:	4699      	mov	r9, r3
   34866:	f7ff fab4 	bl	33dd2 <rpc_at_client_request_alloc>
   3486a:	4605      	mov	r5, r0
   3486c:	4630      	mov	r0, r6
   3486e:	f7f0 fca1 	bl	251b4 <interface_socket_from_handle_get>
   34872:	4680      	mov	r8, r0
   34874:	bb5d      	cbnz	r5, 348ce <send_message+0x76>
   34876:	2304      	movs	r3, #4
   34878:	9c00      	ldr	r4, [sp, #0]
   3487a:	7223      	strb	r3, [r4, #8]
   3487c:	7265      	strb	r5, [r4, #9]
   3487e:	72a5      	strb	r5, [r4, #10]
   34880:	72e5      	strb	r5, [r4, #11]
   34882:	60e6      	str	r6, [r4, #12]
   34884:	b127      	cbz	r7, 34890 <send_message+0x38>
   34886:	463a      	mov	r2, r7
   34888:	4651      	mov	r1, sl
   3488a:	6820      	ldr	r0, [r4, #0]
   3488c:	f000 fe7b 	bl	35586 <memcpy>
   34890:	4649      	mov	r1, r9
   34892:	9800      	ldr	r0, [sp, #0]
   34894:	f7ff faac 	bl	33df0 <rpc_at_client_request_send>
   34898:	b158      	cbz	r0, 348b2 <send_message+0x5a>
   3489a:	b11f      	cbz	r7, 348a4 <send_message+0x4c>
   3489c:	9b00      	ldr	r3, [sp, #0]
   3489e:	6818      	ldr	r0, [r3, #0]
   348a0:	f7ff fab3 	bl	33e0a <rpc_at_client_data_free>
   348a4:	9800      	ldr	r0, [sp, #0]
   348a6:	f7ff faad 	bl	33e04 <rpc_at_client_message_free>
   348aa:	2023      	movs	r0, #35	; 0x23
   348ac:	b002      	add	sp, #8
   348ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   348b2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   348b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   348b8:	2b00      	cmp	r3, #0
   348ba:	bf08      	it	eq
   348bc:	f04f 33ff 	moveq.w	r3, #4294967295
   348c0:	4611      	mov	r1, r2
   348c2:	9301      	str	r3, [sp, #4]
   348c4:	4630      	mov	r0, r6
   348c6:	ab01      	add	r3, sp, #4
   348c8:	f7ff ffb6 	bl	34838 <at_interface_wait>
   348cc:	e7ee      	b.n	348ac <send_message+0x54>
   348ce:	200c      	movs	r0, #12
   348d0:	e7ec      	b.n	348ac <send_message+0x54>

000348d2 <at_interface_write>:
   348d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   348d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   348d8:	4607      	mov	r7, r0
   348da:	4688      	mov	r8, r1
   348dc:	4615      	mov	r5, r2
   348de:	4699      	mov	r9, r3
   348e0:	b146      	cbz	r6, 348f4 <at_interface_write+0x22>
   348e2:	2038      	movs	r0, #56	; 0x38
   348e4:	f7ea ffc4 	bl	1f870 <nrf_modem_os_errno_set>
   348e8:	f04f 35ff 	mov.w	r5, #4294967295
   348ec:	4628      	mov	r0, r5
   348ee:	b003      	add	sp, #12
   348f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   348f4:	f7f0 fc5e 	bl	251b4 <interface_socket_from_handle_get>
   348f8:	4604      	mov	r4, r0
   348fa:	f1b9 0f00 	cmp.w	r9, #0
   348fe:	d124      	bne.n	3494a <at_interface_write+0x78>
   34900:	b908      	cbnz	r0, 34906 <at_interface_write+0x34>
   34902:	2016      	movs	r0, #22
   34904:	e7ee      	b.n	348e4 <at_interface_write+0x12>
   34906:	2601      	movs	r6, #1
   34908:	6822      	ldr	r2, [r4, #0]
   3490a:	0393      	lsls	r3, r2, #14
   3490c:	d518      	bpl.n	34940 <at_interface_write+0x6e>
   3490e:	b1f6      	cbz	r6, 3494e <at_interface_write+0x7c>
   34910:	6823      	ldr	r3, [r4, #0]
   34912:	4642      	mov	r2, r8
   34914:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   34918:	6023      	str	r3, [r4, #0]
   3491a:	6823      	ldr	r3, [r4, #0]
   3491c:	4629      	mov	r1, r5
   3491e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   34922:	6023      	str	r3, [r4, #0]
   34924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   34928:	4638      	mov	r0, r7
   3492a:	9300      	str	r3, [sp, #0]
   3492c:	2301      	movs	r3, #1
   3492e:	f7ff ff93 	bl	34858 <send_message>
   34932:	2800      	cmp	r0, #0
   34934:	d0da      	beq.n	348ec <at_interface_write+0x1a>
   34936:	6823      	ldr	r3, [r4, #0]
   34938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3493c:	6023      	str	r3, [r4, #0]
   3493e:	e7d1      	b.n	348e4 <at_interface_write+0x12>
   34940:	2e00      	cmp	r6, #0
   34942:	bf14      	ite	ne
   34944:	2016      	movne	r0, #22
   34946:	202d      	moveq	r0, #45	; 0x2d
   34948:	e7cc      	b.n	348e4 <at_interface_write+0x12>
   3494a:	2800      	cmp	r0, #0
   3494c:	d1dc      	bne.n	34908 <at_interface_write+0x36>
   3494e:	202d      	movs	r0, #45	; 0x2d
   34950:	e7c8      	b.n	348e4 <at_interface_write+0x12>

00034952 <at_interface_close>:
   34952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34954:	4606      	mov	r6, r0
   34956:	f7f0 fc2d 	bl	251b4 <interface_socket_from_handle_get>
   3495a:	4604      	mov	r4, r0
   3495c:	b308      	cbz	r0, 349a2 <at_interface_close+0x50>
   3495e:	230d      	movs	r3, #13
   34960:	6807      	ldr	r7, [r0, #0]
   34962:	6003      	str	r3, [r0, #0]
   34964:	6803      	ldr	r3, [r0, #0]
   34966:	2200      	movs	r2, #0
   34968:	039b      	lsls	r3, r3, #14
   3496a:	bf48      	it	mi
   3496c:	6803      	ldrmi	r3, [r0, #0]
   3496e:	4611      	mov	r1, r2
   34970:	bf44      	itt	mi
   34972:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   34976:	6003      	strmi	r3, [r0, #0]
   34978:	230e      	movs	r3, #14
   3497a:	4630      	mov	r0, r6
   3497c:	9300      	str	r3, [sp, #0]
   3497e:	2306      	movs	r3, #6
   34980:	f7ff ff6a 	bl	34858 <send_message>
   34984:	4605      	mov	r5, r0
   34986:	b130      	cbz	r0, 34996 <at_interface_close+0x44>
   34988:	6027      	str	r7, [r4, #0]
   3498a:	4628      	mov	r0, r5
   3498c:	f7ea ff70 	bl	1f870 <nrf_modem_os_errno_set>
   34990:	f04f 35ff 	mov.w	r5, #4294967295
   34994:	e002      	b.n	3499c <at_interface_close+0x4a>
   34996:	4630      	mov	r0, r6
   34998:	f7f0 fbac 	bl	250f4 <interface_socket_free>
   3499c:	4628      	mov	r0, r5
   3499e:	b003      	add	sp, #12
   349a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   349a2:	2516      	movs	r5, #22
   349a4:	e7f1      	b.n	3498a <at_interface_close+0x38>

000349a6 <at_interface_read>:
   349a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   349aa:	b087      	sub	sp, #28
   349ac:	4680      	mov	r8, r0
   349ae:	460e      	mov	r6, r1
   349b0:	4614      	mov	r4, r2
   349b2:	461f      	mov	r7, r3
   349b4:	f7f0 fbfe 	bl	251b4 <interface_socket_from_handle_get>
   349b8:	4605      	mov	r5, r0
   349ba:	2800      	cmp	r0, #0
   349bc:	d045      	beq.n	34a4a <at_interface_read+0xa4>
   349be:	2300      	movs	r3, #0
   349c0:	e9cd 6402 	strd	r6, r4, [sp, #8]
   349c4:	9304      	str	r3, [sp, #16]
   349c6:	b117      	cbz	r7, 349ce <at_interface_read+0x28>
   349c8:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   349cc:	d022      	beq.n	34a14 <at_interface_read+0x6e>
   349ce:	2400      	movs	r4, #0
   349d0:	9305      	str	r3, [sp, #20]
   349d2:	f007 0902 	and.w	r9, r7, #2
   349d6:	682b      	ldr	r3, [r5, #0]
   349d8:	69e8      	ldr	r0, [r5, #28]
   349da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   349de:	602b      	str	r3, [r5, #0]
   349e0:	6803      	ldr	r3, [r0, #0]
   349e2:	463a      	mov	r2, r7
   349e4:	689b      	ldr	r3, [r3, #8]
   349e6:	a902      	add	r1, sp, #8
   349e8:	4798      	blx	r3
   349ea:	1e06      	subs	r6, r0, #0
   349ec:	da1b      	bge.n	34a26 <at_interface_read+0x80>
   349ee:	f1b9 0f00 	cmp.w	r9, #0
   349f2:	d113      	bne.n	34a1c <at_interface_read+0x76>
   349f4:	b9bc      	cbnz	r4, 34a26 <at_interface_read+0x80>
   349f6:	6a2b      	ldr	r3, [r5, #32]
   349f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   349fc:	2b00      	cmp	r3, #0
   349fe:	bf08      	it	eq
   34a00:	f04f 33ff 	moveq.w	r3, #4294967295
   34a04:	4611      	mov	r1, r2
   34a06:	9301      	str	r3, [sp, #4]
   34a08:	4640      	mov	r0, r8
   34a0a:	ab01      	add	r3, sp, #4
   34a0c:	f7ff ff14 	bl	34838 <at_interface_wait>
   34a10:	4604      	mov	r4, r0
   34a12:	e7e0      	b.n	349d6 <at_interface_read+0x30>
   34a14:	242d      	movs	r4, #45	; 0x2d
   34a16:	f04f 36ff 	mov.w	r6, #4294967295
   34a1a:	e00f      	b.n	34a3c <at_interface_read+0x96>
   34a1c:	1c73      	adds	r3, r6, #1
   34a1e:	d102      	bne.n	34a26 <at_interface_read+0x80>
   34a20:	2c00      	cmp	r4, #0
   34a22:	bf08      	it	eq
   34a24:	2423      	moveq	r4, #35	; 0x23
   34a26:	69e8      	ldr	r0, [r5, #28]
   34a28:	6803      	ldr	r3, [r0, #0]
   34a2a:	68db      	ldr	r3, [r3, #12]
   34a2c:	4798      	blx	r3
   34a2e:	3001      	adds	r0, #1
   34a30:	bf1e      	ittt	ne
   34a32:	682b      	ldrne	r3, [r5, #0]
   34a34:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   34a38:	602b      	strne	r3, [r5, #0]
   34a3a:	b114      	cbz	r4, 34a42 <at_interface_read+0x9c>
   34a3c:	4620      	mov	r0, r4
   34a3e:	f7ea ff17 	bl	1f870 <nrf_modem_os_errno_set>
   34a42:	4630      	mov	r0, r6
   34a44:	b007      	add	sp, #28
   34a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   34a4a:	2416      	movs	r4, #22
   34a4c:	e7e3      	b.n	34a16 <at_interface_read+0x70>

00034a4e <at_interface_getopt>:
   34a4e:	f7f0 bbf9 	b.w	25244 <interface_socket_getopt>

00034a52 <at_interface_setopt>:
   34a52:	f7f0 bbbf 	b.w	251d4 <interface_socket_setopt>

00034a56 <rpc_at_event_handler>:
   34a56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   34a58:	4606      	mov	r6, r0
   34a5a:	68c0      	ldr	r0, [r0, #12]
   34a5c:	460d      	mov	r5, r1
   34a5e:	f7f0 fba9 	bl	251b4 <interface_socket_from_handle_get>
   34a62:	4604      	mov	r4, r0
   34a64:	2800      	cmp	r0, #0
   34a66:	d03a      	beq.n	34ade <rpc_at_event_handler+0x88>
   34a68:	6803      	ldr	r3, [r0, #0]
   34a6a:	b29b      	uxth	r3, r3
   34a6c:	2b01      	cmp	r3, #1
   34a6e:	d104      	bne.n	34a7a <rpc_at_event_handler+0x24>
   34a70:	2d02      	cmp	r5, #2
   34a72:	d11c      	bne.n	34aae <rpc_at_event_handler+0x58>
   34a74:	6005      	str	r5, [r0, #0]
   34a76:	2000      	movs	r0, #0
   34a78:	e02b      	b.n	34ad2 <rpc_at_event_handler+0x7c>
   34a7a:	6803      	ldr	r3, [r0, #0]
   34a7c:	b29b      	uxth	r3, r3
   34a7e:	2b0d      	cmp	r3, #13
   34a80:	d104      	bne.n	34a8c <rpc_at_event_handler+0x36>
   34a82:	2d02      	cmp	r5, #2
   34a84:	d113      	bne.n	34aae <rpc_at_event_handler+0x58>
   34a86:	230e      	movs	r3, #14
   34a88:	6023      	str	r3, [r4, #0]
   34a8a:	e7f4      	b.n	34a76 <rpc_at_event_handler+0x20>
   34a8c:	6803      	ldr	r3, [r0, #0]
   34a8e:	b29b      	uxth	r3, r3
   34a90:	2b02      	cmp	r3, #2
   34a92:	d10c      	bne.n	34aae <rpc_at_event_handler+0x58>
   34a94:	6803      	ldr	r3, [r0, #0]
   34a96:	029b      	lsls	r3, r3, #10
   34a98:	d509      	bpl.n	34aae <rpc_at_event_handler+0x58>
   34a9a:	2d02      	cmp	r5, #2
   34a9c:	d107      	bne.n	34aae <rpc_at_event_handler+0x58>
   34a9e:	6803      	ldr	r3, [r0, #0]
   34aa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   34aa4:	6003      	str	r3, [r0, #0]
   34aa6:	6803      	ldr	r3, [r0, #0]
   34aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34aac:	e7ec      	b.n	34a88 <rpc_at_event_handler+0x32>
   34aae:	3d03      	subs	r5, #3
   34ab0:	2d01      	cmp	r5, #1
   34ab2:	d8e0      	bhi.n	34a76 <rpc_at_event_handler+0x20>
   34ab4:	2500      	movs	r5, #0
   34ab6:	6833      	ldr	r3, [r6, #0]
   34ab8:	69e0      	ldr	r0, [r4, #28]
   34aba:	9300      	str	r3, [sp, #0]
   34abc:	6873      	ldr	r3, [r6, #4]
   34abe:	4669      	mov	r1, sp
   34ac0:	9301      	str	r3, [sp, #4]
   34ac2:	6803      	ldr	r3, [r0, #0]
   34ac4:	e9cd 5502 	strd	r5, r5, [sp, #8]
   34ac8:	685b      	ldr	r3, [r3, #4]
   34aca:	4798      	blx	r3
   34acc:	3001      	adds	r0, #1
   34ace:	d102      	bne.n	34ad6 <rpc_at_event_handler+0x80>
   34ad0:	2002      	movs	r0, #2
   34ad2:	b004      	add	sp, #16
   34ad4:	bd70      	pop	{r4, r5, r6, pc}
   34ad6:	6823      	ldr	r3, [r4, #0]
   34ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   34adc:	e7d4      	b.n	34a88 <rpc_at_event_handler+0x32>
   34ade:	6830      	ldr	r0, [r6, #0]
   34ae0:	2800      	cmp	r0, #0
   34ae2:	d0c8      	beq.n	34a76 <rpc_at_event_handler+0x20>
   34ae4:	f7ff f991 	bl	33e0a <rpc_at_client_data_free>
   34ae8:	e7c5      	b.n	34a76 <rpc_at_event_handler+0x20>

00034aea <packet_free_cb>:
   34aea:	b510      	push	{r4, lr}
   34aec:	4604      	mov	r4, r0
   34aee:	b118      	cbz	r0, 34af8 <packet_free_cb+0xe>
   34af0:	6800      	ldr	r0, [r0, #0]
   34af2:	b108      	cbz	r0, 34af8 <packet_free_cb+0xe>
   34af4:	f7ff f9f9 	bl	33eea <rpc_gnss_client_data_free>
   34af8:	68a0      	ldr	r0, [r4, #8]
   34afa:	b118      	cbz	r0, 34b04 <packet_free_cb+0x1a>
   34afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34b00:	f7eb b870 	b.w	1fbe4 <nrf_modem_os_free>
   34b04:	bd10      	pop	{r4, pc}

00034b06 <spaces_remove>:
   34b06:	2200      	movs	r2, #0
   34b08:	b510      	push	{r4, lr}
   34b0a:	1e44      	subs	r4, r0, #1
   34b0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   34b10:	1881      	adds	r1, r0, r2
   34b12:	b90b      	cbnz	r3, 34b18 <spaces_remove+0x12>
   34b14:	700b      	strb	r3, [r1, #0]
   34b16:	bd10      	pop	{r4, pc}
   34b18:	2b20      	cmp	r3, #32
   34b1a:	bf1c      	itt	ne
   34b1c:	700b      	strbne	r3, [r1, #0]
   34b1e:	3201      	addne	r2, #1
   34b20:	e7f4      	b.n	34b0c <spaces_remove+0x6>

00034b22 <ok_rsp_parser>:
   34b22:	2000      	movs	r0, #0
   34b24:	4770      	bx	lr

00034b26 <context_query_parser>:
   34b26:	f06f 0004 	mvn.w	r0, #4
   34b2a:	4770      	bx	lr

00034b2c <null_handler_init>:
   34b2c:	2000      	movs	r0, #0
   34b2e:	4770      	bx	lr

00034b30 <null_handler_put>:
   34b30:	b510      	push	{r4, lr}
   34b32:	460c      	mov	r4, r1
   34b34:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   34b38:	4620      	mov	r0, r4
   34b3a:	4798      	blx	r3
   34b3c:	6860      	ldr	r0, [r4, #4]
   34b3e:	bd10      	pop	{r4, pc}

00034b40 <null_handler_get>:
   34b40:	f04f 30ff 	mov.w	r0, #4294967295
   34b44:	4770      	bx	lr

00034b46 <null_handler_available>:
   34b46:	f04f 30ff 	mov.w	r0, #4294967295
   34b4a:	4770      	bx	lr

00034b4c <null_handler_flush>:
   34b4c:	2000      	movs	r0, #0
   34b4e:	4770      	bx	lr

00034b50 <null_handler_free>:
   34b50:	4770      	bx	lr

00034b52 <stream_handler_free_packet>:
   34b52:	b530      	push	{r4, r5, lr}
   34b54:	4605      	mov	r5, r0
   34b56:	b085      	sub	sp, #20
   34b58:	68c0      	ldr	r0, [r0, #12]
   34b5a:	f000 fb0f 	bl	3517c <linked_list_pop>
   34b5e:	4604      	mov	r4, r0
   34b60:	b170      	cbz	r0, 34b80 <stream_handler_free_packet+0x2e>
   34b62:	6843      	ldr	r3, [r0, #4]
   34b64:	9300      	str	r3, [sp, #0]
   34b66:	6883      	ldr	r3, [r0, #8]
   34b68:	9301      	str	r3, [sp, #4]
   34b6a:	6903      	ldr	r3, [r0, #16]
   34b6c:	9302      	str	r3, [sp, #8]
   34b6e:	68c3      	ldr	r3, [r0, #12]
   34b70:	4668      	mov	r0, sp
   34b72:	9303      	str	r3, [sp, #12]
   34b74:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   34b78:	4798      	blx	r3
   34b7a:	4620      	mov	r0, r4
   34b7c:	f7eb f832 	bl	1fbe4 <nrf_modem_os_free>
   34b80:	b005      	add	sp, #20
   34b82:	bd30      	pop	{r4, r5, pc}

00034b84 <stream_handler_init>:
   34b84:	b510      	push	{r4, lr}
   34b86:	4604      	mov	r4, r0
   34b88:	200c      	movs	r0, #12
   34b8a:	f7eb f823 	bl	1fbd4 <nrf_modem_os_alloc>
   34b8e:	60e0      	str	r0, [r4, #12]
   34b90:	b128      	cbz	r0, 34b9e <stream_handler_init+0x1a>
   34b92:	2300      	movs	r3, #0
   34b94:	6123      	str	r3, [r4, #16]
   34b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34b9a:	f000 bad3 	b.w	35144 <linked_list_init>
   34b9e:	200c      	movs	r0, #12
   34ba0:	bd10      	pop	{r4, pc}

00034ba2 <stream_handler_put>:
   34ba2:	b570      	push	{r4, r5, r6, lr}
   34ba4:	4606      	mov	r6, r0
   34ba6:	2014      	movs	r0, #20
   34ba8:	460d      	mov	r5, r1
   34baa:	f7eb f813 	bl	1fbd4 <nrf_modem_os_alloc>
   34bae:	4604      	mov	r4, r0
   34bb0:	b178      	cbz	r0, 34bd2 <stream_handler_put+0x30>
   34bb2:	682b      	ldr	r3, [r5, #0]
   34bb4:	4601      	mov	r1, r0
   34bb6:	6043      	str	r3, [r0, #4]
   34bb8:	686b      	ldr	r3, [r5, #4]
   34bba:	6083      	str	r3, [r0, #8]
   34bbc:	68eb      	ldr	r3, [r5, #12]
   34bbe:	60c3      	str	r3, [r0, #12]
   34bc0:	68ab      	ldr	r3, [r5, #8]
   34bc2:	6103      	str	r3, [r0, #16]
   34bc4:	68f0      	ldr	r0, [r6, #12]
   34bc6:	f000 fac6 	bl	35156 <linked_list_push>
   34bca:	b128      	cbz	r0, 34bd8 <stream_handler_put+0x36>
   34bcc:	4620      	mov	r0, r4
   34bce:	f7eb f809 	bl	1fbe4 <nrf_modem_os_free>
   34bd2:	f04f 30ff 	mov.w	r0, #4294967295
   34bd6:	e000      	b.n	34bda <stream_handler_put+0x38>
   34bd8:	6868      	ldr	r0, [r5, #4]
   34bda:	bd70      	pop	{r4, r5, r6, pc}

00034bdc <stream_handler_get>:
   34bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34be0:	4606      	mov	r6, r0
   34be2:	b085      	sub	sp, #20
   34be4:	68c0      	ldr	r0, [r0, #12]
   34be6:	468a      	mov	sl, r1
   34be8:	4617      	mov	r7, r2
   34bea:	f000 fad1 	bl	35190 <linked_list_peek>
   34bee:	4604      	mov	r4, r0
   34bf0:	2800      	cmp	r0, #0
   34bf2:	d055      	beq.n	34ca0 <stream_handler_get+0xc4>
   34bf4:	f8da 0008 	ldr.w	r0, [sl, #8]
   34bf8:	2800      	cmp	r0, #0
   34bfa:	d049      	beq.n	34c90 <stream_handler_get+0xb4>
   34bfc:	6921      	ldr	r1, [r4, #16]
   34bfe:	2900      	cmp	r1, #0
   34c00:	d046      	beq.n	34c90 <stream_handler_get+0xb4>
   34c02:	68e2      	ldr	r2, [r4, #12]
   34c04:	2a00      	cmp	r2, #0
   34c06:	d043      	beq.n	34c90 <stream_handler_get+0xb4>
   34c08:	f8da 500c 	ldr.w	r5, [sl, #12]
   34c0c:	42aa      	cmp	r2, r5
   34c0e:	bf28      	it	cs
   34c10:	462a      	movcs	r2, r5
   34c12:	f8ca 200c 	str.w	r2, [sl, #12]
   34c16:	f000 fcb6 	bl	35586 <memcpy>
   34c1a:	2500      	movs	r5, #0
   34c1c:	f8da 3004 	ldr.w	r3, [sl, #4]
   34c20:	6931      	ldr	r1, [r6, #16]
   34c22:	9301      	str	r3, [sp, #4]
   34c24:	f8da 3000 	ldr.w	r3, [sl]
   34c28:	9302      	str	r3, [sp, #8]
   34c2a:	f007 0320 	and.w	r3, r7, #32
   34c2e:	9303      	str	r3, [sp, #12]
   34c30:	f007 0708 	and.w	r7, r7, #8
   34c34:	9b01      	ldr	r3, [sp, #4]
   34c36:	42ab      	cmp	r3, r5
   34c38:	d924      	bls.n	34c84 <stream_handler_get+0xa8>
   34c3a:	68a2      	ldr	r2, [r4, #8]
   34c3c:	9b01      	ldr	r3, [sp, #4]
   34c3e:	eba2 0801 	sub.w	r8, r2, r1
   34c42:	eba3 0b05 	sub.w	fp, r3, r5
   34c46:	f8da 2000 	ldr.w	r2, [sl]
   34c4a:	45d8      	cmp	r8, fp
   34c4c:	46c1      	mov	r9, r8
   34c4e:	bf28      	it	cs
   34c50:	46d9      	movcs	r9, fp
   34c52:	b142      	cbz	r2, 34c66 <stream_handler_get+0x8a>
   34c54:	9b03      	ldr	r3, [sp, #12]
   34c56:	b933      	cbnz	r3, 34c66 <stream_handler_get+0x8a>
   34c58:	6860      	ldr	r0, [r4, #4]
   34c5a:	9b02      	ldr	r3, [sp, #8]
   34c5c:	4401      	add	r1, r0
   34c5e:	464a      	mov	r2, r9
   34c60:	1958      	adds	r0, r3, r5
   34c62:	f000 fc90 	bl	35586 <memcpy>
   34c66:	4620      	mov	r0, r4
   34c68:	f000 fa99 	bl	3519e <linked_list_get_next>
   34c6c:	4604      	mov	r4, r0
   34c6e:	b92f      	cbnz	r7, 34c7c <stream_handler_get+0xa0>
   34c70:	45d8      	cmp	r8, fp
   34c72:	d811      	bhi.n	34c98 <stream_handler_get+0xbc>
   34c74:	4630      	mov	r0, r6
   34c76:	f7ff ff6c 	bl	34b52 <stream_handler_free_packet>
   34c7a:	6137      	str	r7, [r6, #16]
   34c7c:	2100      	movs	r1, #0
   34c7e:	444d      	add	r5, r9
   34c80:	2c00      	cmp	r4, #0
   34c82:	d1d7      	bne.n	34c34 <stream_handler_get+0x58>
   34c84:	4628      	mov	r0, r5
   34c86:	f8ca 5004 	str.w	r5, [sl, #4]
   34c8a:	b005      	add	sp, #20
   34c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c90:	2200      	movs	r2, #0
   34c92:	f8ca 200c 	str.w	r2, [sl, #12]
   34c96:	e7c0      	b.n	34c1a <stream_handler_get+0x3e>
   34c98:	6932      	ldr	r2, [r6, #16]
   34c9a:	444a      	add	r2, r9
   34c9c:	6132      	str	r2, [r6, #16]
   34c9e:	e7ed      	b.n	34c7c <stream_handler_get+0xa0>
   34ca0:	f04f 30ff 	mov.w	r0, #4294967295
   34ca4:	e7f1      	b.n	34c8a <stream_handler_get+0xae>

00034ca6 <stream_handler_available>:
   34ca6:	b510      	push	{r4, lr}
   34ca8:	4604      	mov	r4, r0
   34caa:	68c0      	ldr	r0, [r0, #12]
   34cac:	f000 fa70 	bl	35190 <linked_list_peek>
   34cb0:	b150      	cbz	r0, 34cc8 <stream_handler_available+0x22>
   34cb2:	6924      	ldr	r4, [r4, #16]
   34cb4:	4264      	negs	r4, r4
   34cb6:	6883      	ldr	r3, [r0, #8]
   34cb8:	441c      	add	r4, r3
   34cba:	f000 fa70 	bl	3519e <linked_list_get_next>
   34cbe:	2800      	cmp	r0, #0
   34cc0:	d1f9      	bne.n	34cb6 <stream_handler_available+0x10>
   34cc2:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   34cc6:	bd10      	pop	{r4, pc}
   34cc8:	f04f 30ff 	mov.w	r0, #4294967295
   34ccc:	e7fb      	b.n	34cc6 <stream_handler_available+0x20>

00034cce <stream_handler_flush>:
   34cce:	68c3      	ldr	r3, [r0, #12]
   34cd0:	b510      	push	{r4, lr}
   34cd2:	4604      	mov	r4, r0
   34cd4:	b923      	cbnz	r3, 34ce0 <stream_handler_flush+0x12>
   34cd6:	2016      	movs	r0, #22
   34cd8:	e007      	b.n	34cea <stream_handler_flush+0x1c>
   34cda:	4620      	mov	r0, r4
   34cdc:	f7ff ff39 	bl	34b52 <stream_handler_free_packet>
   34ce0:	68e0      	ldr	r0, [r4, #12]
   34ce2:	f000 fa5a 	bl	3519a <linked_list_size_get>
   34ce6:	2800      	cmp	r0, #0
   34ce8:	d1f7      	bne.n	34cda <stream_handler_flush+0xc>
   34cea:	bd10      	pop	{r4, pc}

00034cec <stream_handler_free>:
   34cec:	68c3      	ldr	r3, [r0, #12]
   34cee:	b510      	push	{r4, lr}
   34cf0:	4604      	mov	r4, r0
   34cf2:	b133      	cbz	r3, 34d02 <stream_handler_free+0x16>
   34cf4:	f7ff ffeb 	bl	34cce <stream_handler_flush>
   34cf8:	68e0      	ldr	r0, [r4, #12]
   34cfa:	f7ea ff73 	bl	1fbe4 <nrf_modem_os_free>
   34cfe:	2300      	movs	r3, #0
   34d00:	60e3      	str	r3, [r4, #12]
   34d02:	bd10      	pop	{r4, pc}

00034d04 <datagram_handler_free_packet>:
   34d04:	b530      	push	{r4, r5, lr}
   34d06:	4605      	mov	r5, r0
   34d08:	b085      	sub	sp, #20
   34d0a:	68c0      	ldr	r0, [r0, #12]
   34d0c:	f000 fa36 	bl	3517c <linked_list_pop>
   34d10:	4604      	mov	r4, r0
   34d12:	b170      	cbz	r0, 34d32 <datagram_handler_free_packet+0x2e>
   34d14:	6843      	ldr	r3, [r0, #4]
   34d16:	9300      	str	r3, [sp, #0]
   34d18:	6883      	ldr	r3, [r0, #8]
   34d1a:	9301      	str	r3, [sp, #4]
   34d1c:	6903      	ldr	r3, [r0, #16]
   34d1e:	9302      	str	r3, [sp, #8]
   34d20:	68c3      	ldr	r3, [r0, #12]
   34d22:	4668      	mov	r0, sp
   34d24:	9303      	str	r3, [sp, #12]
   34d26:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   34d2a:	4798      	blx	r3
   34d2c:	4620      	mov	r0, r4
   34d2e:	f7ea ff59 	bl	1fbe4 <nrf_modem_os_free>
   34d32:	b005      	add	sp, #20
   34d34:	bd30      	pop	{r4, r5, pc}

00034d36 <datagram_handler_init>:
   34d36:	b510      	push	{r4, lr}
   34d38:	4604      	mov	r4, r0
   34d3a:	200c      	movs	r0, #12
   34d3c:	f7ea ff4a 	bl	1fbd4 <nrf_modem_os_alloc>
   34d40:	60e0      	str	r0, [r4, #12]
   34d42:	b118      	cbz	r0, 34d4c <datagram_handler_init+0x16>
   34d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34d48:	f000 b9fc 	b.w	35144 <linked_list_init>
   34d4c:	200c      	movs	r0, #12
   34d4e:	bd10      	pop	{r4, pc}

00034d50 <datagram_handler_put>:
   34d50:	b570      	push	{r4, r5, r6, lr}
   34d52:	4606      	mov	r6, r0
   34d54:	2014      	movs	r0, #20
   34d56:	460d      	mov	r5, r1
   34d58:	f7ea ff3c 	bl	1fbd4 <nrf_modem_os_alloc>
   34d5c:	4604      	mov	r4, r0
   34d5e:	b178      	cbz	r0, 34d80 <datagram_handler_put+0x30>
   34d60:	682b      	ldr	r3, [r5, #0]
   34d62:	4601      	mov	r1, r0
   34d64:	6043      	str	r3, [r0, #4]
   34d66:	686b      	ldr	r3, [r5, #4]
   34d68:	6083      	str	r3, [r0, #8]
   34d6a:	68eb      	ldr	r3, [r5, #12]
   34d6c:	60c3      	str	r3, [r0, #12]
   34d6e:	68ab      	ldr	r3, [r5, #8]
   34d70:	6103      	str	r3, [r0, #16]
   34d72:	68f0      	ldr	r0, [r6, #12]
   34d74:	f000 f9ef 	bl	35156 <linked_list_push>
   34d78:	b128      	cbz	r0, 34d86 <datagram_handler_put+0x36>
   34d7a:	4620      	mov	r0, r4
   34d7c:	f7ea ff32 	bl	1fbe4 <nrf_modem_os_free>
   34d80:	f04f 30ff 	mov.w	r0, #4294967295
   34d84:	e000      	b.n	34d88 <datagram_handler_put+0x38>
   34d86:	6868      	ldr	r0, [r5, #4]
   34d88:	bd70      	pop	{r4, r5, r6, pc}

00034d8a <datagram_handler_get>:
   34d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34d8c:	4607      	mov	r7, r0
   34d8e:	68c0      	ldr	r0, [r0, #12]
   34d90:	460c      	mov	r4, r1
   34d92:	4616      	mov	r6, r2
   34d94:	f000 f9fc 	bl	35190 <linked_list_peek>
   34d98:	4605      	mov	r5, r0
   34d9a:	b328      	cbz	r0, 34de8 <datagram_handler_get+0x5e>
   34d9c:	6882      	ldr	r2, [r0, #8]
   34d9e:	6863      	ldr	r3, [r4, #4]
   34da0:	6820      	ldr	r0, [r4, #0]
   34da2:	429a      	cmp	r2, r3
   34da4:	bf28      	it	cs
   34da6:	461a      	movcs	r2, r3
   34da8:	6062      	str	r2, [r4, #4]
   34daa:	b110      	cbz	r0, 34db2 <datagram_handler_get+0x28>
   34dac:	6869      	ldr	r1, [r5, #4]
   34dae:	f000 fbea 	bl	35586 <memcpy>
   34db2:	68a0      	ldr	r0, [r4, #8]
   34db4:	b1a8      	cbz	r0, 34de2 <datagram_handler_get+0x58>
   34db6:	6929      	ldr	r1, [r5, #16]
   34db8:	b199      	cbz	r1, 34de2 <datagram_handler_get+0x58>
   34dba:	68ea      	ldr	r2, [r5, #12]
   34dbc:	b18a      	cbz	r2, 34de2 <datagram_handler_get+0x58>
   34dbe:	68e3      	ldr	r3, [r4, #12]
   34dc0:	429a      	cmp	r2, r3
   34dc2:	bf28      	it	cs
   34dc4:	461a      	movcs	r2, r3
   34dc6:	60e2      	str	r2, [r4, #12]
   34dc8:	f000 fbdd 	bl	35586 <memcpy>
   34dcc:	0732      	lsls	r2, r6, #28
   34dce:	68ad      	ldr	r5, [r5, #8]
   34dd0:	d402      	bmi.n	34dd8 <datagram_handler_get+0x4e>
   34dd2:	4638      	mov	r0, r7
   34dd4:	f7ff ff96 	bl	34d04 <datagram_handler_free_packet>
   34dd8:	06b3      	lsls	r3, r6, #26
   34dda:	bf4c      	ite	mi
   34ddc:	4628      	movmi	r0, r5
   34dde:	6860      	ldrpl	r0, [r4, #4]
   34de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34de2:	2300      	movs	r3, #0
   34de4:	60e3      	str	r3, [r4, #12]
   34de6:	e7f1      	b.n	34dcc <datagram_handler_get+0x42>
   34de8:	f04f 30ff 	mov.w	r0, #4294967295
   34dec:	e7f8      	b.n	34de0 <datagram_handler_get+0x56>

00034dee <datagram_handler_available>:
   34dee:	b508      	push	{r3, lr}
   34df0:	68c0      	ldr	r0, [r0, #12]
   34df2:	f000 f9cd 	bl	35190 <linked_list_peek>
   34df6:	b108      	cbz	r0, 34dfc <datagram_handler_available+0xe>
   34df8:	6880      	ldr	r0, [r0, #8]
   34dfa:	bd08      	pop	{r3, pc}
   34dfc:	f04f 30ff 	mov.w	r0, #4294967295
   34e00:	e7fb      	b.n	34dfa <datagram_handler_available+0xc>

00034e02 <datagram_handler_flush>:
   34e02:	68c3      	ldr	r3, [r0, #12]
   34e04:	b510      	push	{r4, lr}
   34e06:	4604      	mov	r4, r0
   34e08:	b923      	cbnz	r3, 34e14 <datagram_handler_flush+0x12>
   34e0a:	2016      	movs	r0, #22
   34e0c:	e007      	b.n	34e1e <datagram_handler_flush+0x1c>
   34e0e:	4620      	mov	r0, r4
   34e10:	f7ff ff78 	bl	34d04 <datagram_handler_free_packet>
   34e14:	68e0      	ldr	r0, [r4, #12]
   34e16:	f000 f9c0 	bl	3519a <linked_list_size_get>
   34e1a:	2800      	cmp	r0, #0
   34e1c:	d1f7      	bne.n	34e0e <datagram_handler_flush+0xc>
   34e1e:	bd10      	pop	{r4, pc}

00034e20 <datagram_handler_free>:
   34e20:	68c3      	ldr	r3, [r0, #12]
   34e22:	b510      	push	{r4, lr}
   34e24:	4604      	mov	r4, r0
   34e26:	b133      	cbz	r3, 34e36 <datagram_handler_free+0x16>
   34e28:	f7ff ffeb 	bl	34e02 <datagram_handler_flush>
   34e2c:	68e0      	ldr	r0, [r4, #12]
   34e2e:	f7ea fed9 	bl	1fbe4 <nrf_modem_os_free>
   34e32:	2300      	movs	r3, #0
   34e34:	60e3      	str	r3, [r4, #12]
   34e36:	bd10      	pop	{r4, pc}

00034e38 <packet_handler_delete>:
   34e38:	b510      	push	{r4, lr}
   34e3a:	4604      	mov	r4, r0
   34e3c:	6803      	ldr	r3, [r0, #0]
   34e3e:	691b      	ldr	r3, [r3, #16]
   34e40:	4798      	blx	r3
   34e42:	6823      	ldr	r3, [r4, #0]
   34e44:	4620      	mov	r0, r4
   34e46:	695b      	ldr	r3, [r3, #20]
   34e48:	4798      	blx	r3
   34e4a:	4620      	mov	r0, r4
   34e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34e50:	f7ea bec8 	b.w	1fbe4 <nrf_modem_os_free>

00034e54 <nrf_modem_recoverable_error_handler>:
   34e54:	4770      	bx	lr

00034e56 <nrf_modem_platform_error_handler>:
   34e56:	b508      	push	{r3, lr}
   34e58:	f7ff fffc 	bl	34e54 <nrf_modem_recoverable_error_handler>
   34e5c:	bd08      	pop	{r3, pc}

00034e5e <unimplemented_method>:
   34e5e:	b40f      	push	{r0, r1, r2, r3}
   34e60:	b508      	push	{r3, lr}
   34e62:	202d      	movs	r0, #45	; 0x2d
   34e64:	f7ea fd04 	bl	1f870 <nrf_modem_os_errno_set>
   34e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   34e6c:	f04f 30ff 	mov.w	r0, #4294967295
   34e70:	b004      	add	sp, #16
   34e72:	4770      	bx	lr

00034e74 <rpc_transport_ipc_fault_handler>:
   34e74:	f7ff bfef 	b.w	34e56 <nrf_modem_platform_error_handler>

00034e78 <nrf_modem_platform_init>:
   34e78:	b513      	push	{r0, r1, r4, lr}
   34e7a:	4604      	mov	r4, r0
   34e7c:	f7ea fec6 	bl	1fc0c <nrf_modem_os_init>
   34e80:	6a23      	ldr	r3, [r4, #32]
   34e82:	4668      	mov	r0, sp
   34e84:	9400      	str	r4, [sp, #0]
   34e86:	f88d 3004 	strb.w	r3, [sp, #4]
   34e8a:	f7ef ff95 	bl	24db8 <rpc_transport_ipc_init>
   34e8e:	b920      	cbnz	r0, 34e9a <nrf_modem_platform_init+0x22>
   34e90:	f7f0 f8fe 	bl	25090 <interface_init>
   34e94:	b118      	cbz	r0, 34e9e <nrf_modem_platform_init+0x26>
   34e96:	f04f 30ff 	mov.w	r0, #4294967295
   34e9a:	b002      	add	sp, #8
   34e9c:	bd10      	pop	{r4, pc}
   34e9e:	f7f1 feb9 	bl	26c14 <at_interface_init>
   34ea2:	2800      	cmp	r0, #0
   34ea4:	d1f7      	bne.n	34e96 <nrf_modem_platform_init+0x1e>
   34ea6:	f7f0 fa61 	bl	2536c <ip_interface_init>
   34eaa:	2800      	cmp	r0, #0
   34eac:	d1f3      	bne.n	34e96 <nrf_modem_platform_init+0x1e>
   34eae:	f7f1 fb13 	bl	264d8 <tls_interface_init>
   34eb2:	2800      	cmp	r0, #0
   34eb4:	d1ef      	bne.n	34e96 <nrf_modem_platform_init+0x1e>
   34eb6:	f7f1 ff61 	bl	26d7c <mfu_interface_init>
   34eba:	2800      	cmp	r0, #0
   34ebc:	d1eb      	bne.n	34e96 <nrf_modem_platform_init+0x1e>
   34ebe:	f7f2 fe51 	bl	27b64 <pdn_interface_init>
   34ec2:	2800      	cmp	r0, #0
   34ec4:	d1e7      	bne.n	34e96 <nrf_modem_platform_init+0x1e>
   34ec6:	f7f2 fcc7 	bl	27858 <gnss_interface_init>
   34eca:	3800      	subs	r0, #0
   34ecc:	bf18      	it	ne
   34ece:	2001      	movne	r0, #1
   34ed0:	4240      	negs	r0, r0
   34ed2:	e7e2      	b.n	34e9a <nrf_modem_platform_init+0x22>

00034ed4 <internal_poll>:
   34ed4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34ed8:	2600      	movs	r6, #0
   34eda:	4688      	mov	r8, r1
   34edc:	4604      	mov	r4, r0
   34ede:	4637      	mov	r7, r6
   34ee0:	4546      	cmp	r6, r8
   34ee2:	d103      	bne.n	34eec <internal_poll+0x18>
   34ee4:	4638      	mov	r0, r7
   34ee6:	b002      	add	sp, #8
   34ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34eec:	88a5      	ldrh	r5, [r4, #4]
   34eee:	6820      	ldr	r0, [r4, #0]
   34ef0:	a901      	add	r1, sp, #4
   34ef2:	f7ff f932 	bl	3415a <interface_socket_event_get>
   34ef6:	f005 0503 	and.w	r5, r5, #3
   34efa:	9b01      	ldr	r3, [sp, #4]
   34efc:	f045 051c 	orr.w	r5, r5, #28
   34f00:	401d      	ands	r5, r3
   34f02:	6820      	ldr	r0, [r4, #0]
   34f04:	80e5      	strh	r5, [r4, #6]
   34f06:	f7f0 f955 	bl	251b4 <interface_socket_from_handle_get>
   34f0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   34f0e:	b168      	cbz	r0, 34f2c <internal_poll+0x58>
   34f10:	071a      	lsls	r2, r3, #28
   34f12:	d50b      	bpl.n	34f2c <internal_poll+0x58>
   34f14:	6942      	ldr	r2, [r0, #20]
   34f16:	2a01      	cmp	r2, #1
   34f18:	d003      	beq.n	34f22 <internal_poll+0x4e>
   34f1a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   34f1e:	2a01      	cmp	r2, #1
   34f20:	d802      	bhi.n	34f28 <internal_poll+0x54>
   34f22:	f043 0301 	orr.w	r3, r3, #1
   34f26:	80e3      	strh	r3, [r4, #6]
   34f28:	3701      	adds	r7, #1
   34f2a:	e001      	b.n	34f30 <internal_poll+0x5c>
   34f2c:	2b00      	cmp	r3, #0
   34f2e:	d1fb      	bne.n	34f28 <internal_poll+0x54>
   34f30:	3601      	adds	r6, #1
   34f32:	3408      	adds	r4, #8
   34f34:	e7d4      	b.n	34ee0 <internal_poll+0xc>

00034f36 <nrf_modem_platform_getaddrinfo>:
   34f36:	f7f0 beef 	b.w	25d18 <ip_interface_getaddrinfo>

00034f3a <nrf_modem_platform_freeaddrinfo>:
   34f3a:	f7f0 bffd 	b.w	25f38 <ip_interface_freeaddrinfo>

00034f3e <nrf_modem_platform_poll>:
   34f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34f40:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   34f44:	2909      	cmp	r1, #9
   34f46:	4605      	mov	r5, r0
   34f48:	460e      	mov	r6, r1
   34f4a:	9201      	str	r2, [sp, #4]
   34f4c:	d906      	bls.n	34f5c <nrf_modem_platform_poll+0x1e>
   34f4e:	2016      	movs	r0, #22
   34f50:	f7ea fc8e 	bl	1f870 <nrf_modem_os_errno_set>
   34f54:	f04f 30ff 	mov.w	r0, #4294967295
   34f58:	b002      	add	sp, #8
   34f5a:	bd70      	pop	{r4, r5, r6, pc}
   34f5c:	b910      	cbnz	r0, 34f64 <nrf_modem_platform_poll+0x26>
   34f5e:	b109      	cbz	r1, 34f64 <nrf_modem_platform_poll+0x26>
   34f60:	200e      	movs	r0, #14
   34f62:	e7f5      	b.n	34f50 <nrf_modem_platform_poll+0x12>
   34f64:	4631      	mov	r1, r6
   34f66:	4628      	mov	r0, r5
   34f68:	f7ff ffb4 	bl	34ed4 <internal_poll>
   34f6c:	2400      	movs	r4, #0
   34f6e:	2800      	cmp	r0, #0
   34f70:	d1f2      	bne.n	34f58 <nrf_modem_platform_poll+0x1a>
   34f72:	2c00      	cmp	r4, #0
   34f74:	d1f0      	bne.n	34f58 <nrf_modem_platform_poll+0x1a>
   34f76:	4628      	mov	r0, r5
   34f78:	a901      	add	r1, sp, #4
   34f7a:	f7ea fbc1 	bl	1f700 <nrf_modem_os_timedwait>
   34f7e:	4604      	mov	r4, r0
   34f80:	b118      	cbz	r0, 34f8a <nrf_modem_platform_poll+0x4c>
   34f82:	283c      	cmp	r0, #60	; 0x3c
   34f84:	d001      	beq.n	34f8a <nrf_modem_platform_poll+0x4c>
   34f86:	2023      	movs	r0, #35	; 0x23
   34f88:	e7e2      	b.n	34f50 <nrf_modem_platform_poll+0x12>
   34f8a:	4631      	mov	r1, r6
   34f8c:	4628      	mov	r0, r5
   34f8e:	f7ff ffa1 	bl	34ed4 <internal_poll>
   34f92:	e7ec      	b.n	34f6e <nrf_modem_platform_poll+0x30>

00034f94 <nrf_socket>:
   34f94:	b570      	push	{r4, r5, r6, lr}
   34f96:	4604      	mov	r4, r0
   34f98:	460d      	mov	r5, r1
   34f9a:	4616      	mov	r6, r2
   34f9c:	f7f3 fa4e 	bl	2843c <nrf_modem_platform_af_method_table_get>
   34fa0:	b130      	cbz	r0, 34fb0 <nrf_socket+0x1c>
   34fa2:	4632      	mov	r2, r6
   34fa4:	4629      	mov	r1, r5
   34fa6:	6803      	ldr	r3, [r0, #0]
   34fa8:	4620      	mov	r0, r4
   34faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   34fae:	4718      	bx	r3
   34fb0:	f04f 30ff 	mov.w	r0, #4294967295
   34fb4:	bd70      	pop	{r4, r5, r6, pc}

00034fb6 <nrf_close>:
   34fb6:	b510      	push	{r4, lr}
   34fb8:	4604      	mov	r4, r0
   34fba:	f7f3 fa91 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   34fbe:	b120      	cbz	r0, 34fca <nrf_close+0x14>
   34fc0:	6843      	ldr	r3, [r0, #4]
   34fc2:	4620      	mov	r0, r4
   34fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34fc8:	4718      	bx	r3
   34fca:	f04f 30ff 	mov.w	r0, #4294967295
   34fce:	bd10      	pop	{r4, pc}

00034fd0 <nrf_sendto>:
   34fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34fd4:	4604      	mov	r4, r0
   34fd6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   34fda:	460d      	mov	r5, r1
   34fdc:	4616      	mov	r6, r2
   34fde:	461f      	mov	r7, r3
   34fe0:	f7f3 fa7e 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   34fe4:	b158      	cbz	r0, 34ffe <nrf_sendto+0x2e>
   34fe6:	e9cd 8908 	strd	r8, r9, [sp, #32]
   34fea:	f8d0 e008 	ldr.w	lr, [r0, #8]
   34fee:	463b      	mov	r3, r7
   34ff0:	4632      	mov	r2, r6
   34ff2:	4629      	mov	r1, r5
   34ff4:	4620      	mov	r0, r4
   34ff6:	46f4      	mov	ip, lr
   34ff8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34ffc:	4760      	bx	ip
   34ffe:	f04f 30ff 	mov.w	r0, #4294967295
   35002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00035006 <nrf_recvfrom>:
   35006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3500a:	4604      	mov	r4, r0
   3500c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   35010:	460d      	mov	r5, r1
   35012:	4616      	mov	r6, r2
   35014:	461f      	mov	r7, r3
   35016:	f7f3 fa63 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   3501a:	b158      	cbz	r0, 35034 <nrf_recvfrom+0x2e>
   3501c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   35020:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   35024:	463b      	mov	r3, r7
   35026:	4632      	mov	r2, r6
   35028:	4629      	mov	r1, r5
   3502a:	4620      	mov	r0, r4
   3502c:	46f4      	mov	ip, lr
   3502e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35032:	4760      	bx	ip
   35034:	f04f 30ff 	mov.w	r0, #4294967295
   35038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003503c <nrf_connect>:
   3503c:	b570      	push	{r4, r5, r6, lr}
   3503e:	4604      	mov	r4, r0
   35040:	460d      	mov	r5, r1
   35042:	4616      	mov	r6, r2
   35044:	f7f3 fa4c 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   35048:	b130      	cbz	r0, 35058 <nrf_connect+0x1c>
   3504a:	4632      	mov	r2, r6
   3504c:	4629      	mov	r1, r5
   3504e:	6943      	ldr	r3, [r0, #20]
   35050:	4620      	mov	r0, r4
   35052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   35056:	4718      	bx	r3
   35058:	f04f 30ff 	mov.w	r0, #4294967295
   3505c:	bd70      	pop	{r4, r5, r6, pc}

0003505e <nrf_listen>:
   3505e:	b570      	push	{r4, r5, r6, lr}
   35060:	4604      	mov	r4, r0
   35062:	460d      	mov	r5, r1
   35064:	f7f3 fa3c 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   35068:	b128      	cbz	r0, 35076 <nrf_listen+0x18>
   3506a:	4629      	mov	r1, r5
   3506c:	6983      	ldr	r3, [r0, #24]
   3506e:	4620      	mov	r0, r4
   35070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   35074:	4718      	bx	r3
   35076:	f04f 30ff 	mov.w	r0, #4294967295
   3507a:	bd70      	pop	{r4, r5, r6, pc}

0003507c <nrf_accept>:
   3507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35080:	4604      	mov	r4, r0
   35082:	460d      	mov	r5, r1
   35084:	4616      	mov	r6, r2
   35086:	f7f3 fa2b 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   3508a:	b140      	cbz	r0, 3509e <nrf_accept+0x22>
   3508c:	69c7      	ldr	r7, [r0, #28]
   3508e:	4632      	mov	r2, r6
   35090:	4629      	mov	r1, r5
   35092:	4620      	mov	r0, r4
   35094:	46bc      	mov	ip, r7
   35096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3509a:	2300      	movs	r3, #0
   3509c:	4760      	bx	ip
   3509e:	f04f 30ff 	mov.w	r0, #4294967295
   350a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000350a6 <nrf_bind>:
   350a6:	b570      	push	{r4, r5, r6, lr}
   350a8:	4604      	mov	r4, r0
   350aa:	460d      	mov	r5, r1
   350ac:	4616      	mov	r6, r2
   350ae:	f7f3 fa17 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   350b2:	b130      	cbz	r0, 350c2 <nrf_bind+0x1c>
   350b4:	4632      	mov	r2, r6
   350b6:	4629      	mov	r1, r5
   350b8:	6903      	ldr	r3, [r0, #16]
   350ba:	4620      	mov	r0, r4
   350bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   350c0:	4718      	bx	r3
   350c2:	f04f 30ff 	mov.w	r0, #4294967295
   350c6:	bd70      	pop	{r4, r5, r6, pc}

000350c8 <nrf_setsockopt>:
   350c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   350cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   350d0:	4604      	mov	r4, r0
   350d2:	460d      	mov	r5, r1
   350d4:	4616      	mov	r6, r2
   350d6:	461f      	mov	r7, r3
   350d8:	f7f3 fa02 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   350dc:	b158      	cbz	r0, 350f6 <nrf_setsockopt+0x2e>
   350de:	f8cd 8018 	str.w	r8, [sp, #24]
   350e2:	f8d0 e020 	ldr.w	lr, [r0, #32]
   350e6:	463b      	mov	r3, r7
   350e8:	4632      	mov	r2, r6
   350ea:	4629      	mov	r1, r5
   350ec:	4620      	mov	r0, r4
   350ee:	46f4      	mov	ip, lr
   350f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   350f4:	4760      	bx	ip
   350f6:	f04f 30ff 	mov.w	r0, #4294967295
   350fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000350fe <nrf_getsockopt>:
   350fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35102:	f8dd 8018 	ldr.w	r8, [sp, #24]
   35106:	4604      	mov	r4, r0
   35108:	460d      	mov	r5, r1
   3510a:	4616      	mov	r6, r2
   3510c:	461f      	mov	r7, r3
   3510e:	f7f3 f9e7 	bl	284e0 <nrf_modem_platform_fd_method_table_get>
   35112:	b158      	cbz	r0, 3512c <nrf_getsockopt+0x2e>
   35114:	f8cd 8018 	str.w	r8, [sp, #24]
   35118:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   3511c:	463b      	mov	r3, r7
   3511e:	4632      	mov	r2, r6
   35120:	4629      	mov	r1, r5
   35122:	4620      	mov	r0, r4
   35124:	46f4      	mov	ip, lr
   35126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3512a:	4760      	bx	ip
   3512c:	f04f 30ff 	mov.w	r0, #4294967295
   35130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035134 <nrf_getaddrinfo>:
   35134:	f7ff beff 	b.w	34f36 <nrf_modem_platform_getaddrinfo>

00035138 <nrf_freeaddrinfo>:
   35138:	f7ff beff 	b.w	34f3a <nrf_modem_platform_freeaddrinfo>

0003513c <nrf_poll>:
   3513c:	f7ff beff 	b.w	34f3e <nrf_modem_platform_poll>

00035140 <nrf_fcntl>:
   35140:	f7f3 b9fe 	b.w	28540 <nrf_modem_platform_fcntl>

00035144 <linked_list_init>:
   35144:	4603      	mov	r3, r0
   35146:	b120      	cbz	r0, 35152 <linked_list_init+0xe>
   35148:	2000      	movs	r0, #0
   3514a:	e9c3 0001 	strd	r0, r0, [r3, #4]
   3514e:	6018      	str	r0, [r3, #0]
   35150:	4770      	bx	lr
   35152:	2016      	movs	r0, #22
   35154:	4770      	bx	lr

00035156 <linked_list_push>:
   35156:	6803      	ldr	r3, [r0, #0]
   35158:	3301      	adds	r3, #1
   3515a:	d00d      	beq.n	35178 <linked_list_push+0x22>
   3515c:	2300      	movs	r3, #0
   3515e:	600b      	str	r3, [r1, #0]
   35160:	6803      	ldr	r3, [r0, #0]
   35162:	b933      	cbnz	r3, 35172 <linked_list_push+0x1c>
   35164:	6041      	str	r1, [r0, #4]
   35166:	6803      	ldr	r3, [r0, #0]
   35168:	6081      	str	r1, [r0, #8]
   3516a:	3301      	adds	r3, #1
   3516c:	6003      	str	r3, [r0, #0]
   3516e:	2000      	movs	r0, #0
   35170:	4770      	bx	lr
   35172:	6883      	ldr	r3, [r0, #8]
   35174:	6019      	str	r1, [r3, #0]
   35176:	e7f6      	b.n	35166 <linked_list_push+0x10>
   35178:	200c      	movs	r0, #12
   3517a:	4770      	bx	lr

0003517c <linked_list_pop>:
   3517c:	4603      	mov	r3, r0
   3517e:	6800      	ldr	r0, [r0, #0]
   35180:	b128      	cbz	r0, 3518e <linked_list_pop+0x12>
   35182:	6858      	ldr	r0, [r3, #4]
   35184:	6802      	ldr	r2, [r0, #0]
   35186:	605a      	str	r2, [r3, #4]
   35188:	681a      	ldr	r2, [r3, #0]
   3518a:	3a01      	subs	r2, #1
   3518c:	601a      	str	r2, [r3, #0]
   3518e:	4770      	bx	lr

00035190 <linked_list_peek>:
   35190:	4603      	mov	r3, r0
   35192:	6800      	ldr	r0, [r0, #0]
   35194:	b100      	cbz	r0, 35198 <linked_list_peek+0x8>
   35196:	6858      	ldr	r0, [r3, #4]
   35198:	4770      	bx	lr

0003519a <linked_list_size_get>:
   3519a:	6800      	ldr	r0, [r0, #0]
   3519c:	4770      	bx	lr

0003519e <linked_list_get_next>:
   3519e:	6800      	ldr	r0, [r0, #0]
   351a0:	4770      	bx	lr

000351a2 <z_device_state_init>:
}
   351a2:	4770      	bx	lr

000351a4 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   351a4:	68c3      	ldr	r3, [r0, #12]
   351a6:	8818      	ldrh	r0, [r3, #0]
   351a8:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   351ac:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   351b0:	4258      	negs	r0, r3
   351b2:	4158      	adcs	r0, r3
   351b4:	4770      	bx	lr

000351b6 <k_heap_init>:
{
   351b6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   351b8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   351bc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   351c0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   351c2:	f7de bd99 	b.w	13cf8 <sys_heap_init>

000351c6 <k_heap_alloc>:
{
   351c6:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   351c8:	e9cd 2300 	strd	r2, r3, [sp]
   351cc:	460a      	mov	r2, r1
   351ce:	2104      	movs	r1, #4
   351d0:	f7f3 fb84 	bl	288dc <k_heap_aligned_alloc>
}
   351d4:	b003      	add	sp, #12
   351d6:	f85d fb04 	ldr.w	pc, [sp], #4

000351da <k_mem_slab_init>:
{
   351da:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   351dc:	2400      	movs	r4, #0
   351de:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   351e0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   351e2:	ea41 0402 	orr.w	r4, r1, r2
   351e6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   351ea:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   351ee:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   351f0:	d10c      	bne.n	3520c <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   351f2:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   351f4:	42a3      	cmp	r3, r4
   351f6:	d103      	bne.n	35200 <k_mem_slab_init+0x26>
   351f8:	e9c0 0000 	strd	r0, r0, [r0]
}
   351fc:	2000      	movs	r0, #0
}
   351fe:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   35200:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   35202:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   35204:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   35206:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   35208:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   3520a:	e7f3      	b.n	351f4 <k_mem_slab_init+0x1a>
		return -EINVAL;
   3520c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   35210:	e7f5      	b.n	351fe <k_mem_slab_init+0x24>

00035212 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   35212:	f3ef 8005 	mrs	r0, IPSR
}
   35216:	3800      	subs	r0, #0
   35218:	bf18      	it	ne
   3521a:	2001      	movne	r0, #1
   3521c:	4770      	bx	lr

0003521e <z_impl_k_thread_name_set>:
}
   3521e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   35222:	4770      	bx	lr

00035224 <k_thread_name_get>:
}
   35224:	2000      	movs	r0, #0
   35226:	4770      	bx	lr

00035228 <z_impl_k_thread_start>:
	z_sched_start(thread);
   35228:	f7f5 bf16 	b.w	2b058 <z_sched_start>

0003522c <z_pm_save_idle_exit>:
{
   3522c:	b508      	push	{r3, lr}
	pm_system_resume();
   3522e:	f7e0 fc09 	bl	15a44 <pm_system_resume>
}
   35232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   35236:	f7f9 bd0e 	b.w	2ec56 <sys_clock_idle_exit>

0003523a <z_impl_k_mutex_init>:
{
   3523a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3523c:	2000      	movs	r0, #0
   3523e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   35242:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   35246:	4770      	bx	lr

00035248 <z_queue_node_peek>:
{
   35248:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3524a:	4604      	mov	r4, r0
   3524c:	b130      	cbz	r0, 3525c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3524e:	6802      	ldr	r2, [r0, #0]
   35250:	0793      	lsls	r3, r2, #30
   35252:	d003      	beq.n	3525c <z_queue_node_peek+0x14>
		ret = anode->data;
   35254:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   35256:	b109      	cbz	r1, 3525c <z_queue_node_peek+0x14>
			k_free(anode);
   35258:	f000 f954 	bl	35504 <k_free>
}
   3525c:	4620      	mov	r0, r4
   3525e:	bd10      	pop	{r4, pc}

00035260 <z_impl_k_queue_init>:
	list->head = NULL;
   35260:	2300      	movs	r3, #0
	list->tail = NULL;
   35262:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   35266:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   35268:	f100 030c 	add.w	r3, r0, #12
   3526c:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   35270:	f100 0314 	add.w	r3, r0, #20
   35274:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   35278:	4770      	bx	lr

0003527a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   3527a:	2301      	movs	r3, #1
{
   3527c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3527e:	9300      	str	r3, [sp, #0]
   35280:	2300      	movs	r3, #0
{
   35282:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   35284:	4619      	mov	r1, r3
   35286:	f7f4 fa05 	bl	29694 <queue_insert>
}
   3528a:	b003      	add	sp, #12
   3528c:	f85d fb04 	ldr.w	pc, [sp], #4

00035290 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   35290:	2300      	movs	r3, #0
{
   35292:	b507      	push	{r0, r1, r2, lr}
   35294:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   35296:	9300      	str	r3, [sp, #0]
   35298:	4619      	mov	r1, r3
   3529a:	f7f4 f9fb 	bl	29694 <queue_insert>
}
   3529e:	b003      	add	sp, #12
   352a0:	f85d fb04 	ldr.w	pc, [sp], #4

000352a4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   352a4:	b15a      	cbz	r2, 352be <z_impl_k_sem_init+0x1a>
   352a6:	428a      	cmp	r2, r1
   352a8:	d309      	bcc.n	352be <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   352aa:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   352ae:	e9c0 1202 	strd	r1, r2, [r0, #8]
   352b2:	e9c0 0000 	strd	r0, r0, [r0]
   352b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   352ba:	2000      	movs	r0, #0
   352bc:	4770      	bx	lr
		return -EINVAL;
   352be:	f06f 0015 	mvn.w	r0, #21
}
   352c2:	4770      	bx	lr

000352c4 <notify_queue_locked>:
	if (queue != NULL) {
   352c4:	b120      	cbz	r0, 352d0 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   352c6:	2200      	movs	r2, #0
   352c8:	3088      	adds	r0, #136	; 0x88
   352ca:	4611      	mov	r1, r2
   352cc:	f7f6 bb0a 	b.w	2b8e4 <z_sched_wake>
}
   352d0:	4770      	bx	lr

000352d2 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   352d2:	68c3      	ldr	r3, [r0, #12]
{
   352d4:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   352d6:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   352da:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   352de:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   352e0:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   352e2:	d502      	bpl.n	352ea <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   352e4:	3010      	adds	r0, #16
   352e6:	f7f6 fca5 	bl	2bc34 <z_abort_timeout>
}
   352ea:	4620      	mov	r0, r4
   352ec:	bd10      	pop	{r4, pc}

000352ee <cancel_async_locked>:
{
   352ee:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   352f0:	68c0      	ldr	r0, [r0, #12]
{
   352f2:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   352f4:	0784      	lsls	r4, r0, #30
   352f6:	f3c0 0140 	ubfx	r1, r0, #1, #1
   352fa:	d416      	bmi.n	3532a <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   352fc:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   35300:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   35302:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   35304:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   35306:	d510      	bpl.n	3532a <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   35308:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   3530c:	b168      	cbz	r0, 3532a <cancel_async_locked+0x3c>
   3530e:	4283      	cmp	r3, r0
   35310:	d11d      	bne.n	3534e <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   35312:	6818      	ldr	r0, [r3, #0]
   35314:	b999      	cbnz	r1, 3533e <cancel_async_locked+0x50>
   35316:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   3531a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   3531e:	428b      	cmp	r3, r1
   35320:	d101      	bne.n	35326 <cancel_async_locked+0x38>
	list->tail = node;
   35322:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   35326:	2200      	movs	r2, #0
   35328:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   3532a:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   3532c:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   35330:	bf1e      	ittt	ne
   35332:	f042 0202 	orrne.w	r2, r2, #2
   35336:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   35338:	f002 000f 	andne.w	r0, r2, #15
}
   3533c:	bd10      	pop	{r4, pc}
   3533e:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   35340:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   35344:	4283      	cmp	r3, r0
	list->tail = node;
   35346:	bf08      	it	eq
   35348:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   3534c:	e7eb      	b.n	35326 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3534e:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   35350:	6800      	ldr	r0, [r0, #0]
   35352:	e7db      	b.n	3530c <cancel_async_locked+0x1e>

00035354 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   35354:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   35358:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3535c:	4283      	cmp	r3, r0
		return b2 - b1;
   3535e:	bf14      	ite	ne
   35360:	1ac0      	subne	r0, r0, r3
	return 0;
   35362:	2000      	moveq	r0, #0
}
   35364:	4770      	bx	lr

00035366 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   35366:	4603      	mov	r3, r0
   35368:	b920      	cbnz	r0, 35374 <z_reschedule_irqlock+0xe>
   3536a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   3536e:	b90a      	cbnz	r2, 35374 <z_reschedule_irqlock+0xe>
   35370:	f7e1 bcd0 	b.w	16d14 <arch_swap>
   35374:	f383 8811 	msr	BASEPRI, r3
   35378:	f3bf 8f6f 	isb	sy
}
   3537c:	4770      	bx	lr

0003537e <z_reschedule_unlocked>:
	__asm__ volatile(
   3537e:	f04f 0320 	mov.w	r3, #32
   35382:	f3ef 8011 	mrs	r0, BASEPRI
   35386:	f383 8811 	msr	BASEPRI, r3
   3538a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3538e:	f7ff bfea 	b.w	35366 <z_reschedule_irqlock>

00035392 <z_priq_dumb_best>:
{
   35392:	4603      	mov	r3, r0
	return list->head == list;
   35394:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35396:	4283      	cmp	r3, r0
   35398:	d003      	beq.n	353a2 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   3539a:	2800      	cmp	r0, #0
   3539c:	bf38      	it	cc
   3539e:	2000      	movcc	r0, #0
   353a0:	4770      	bx	lr
	struct k_thread *thread = NULL;
   353a2:	2000      	movs	r0, #0
}
   353a4:	4770      	bx	lr

000353a6 <z_unpend_all>:
{
   353a6:	b538      	push	{r3, r4, r5, lr}
   353a8:	4605      	mov	r5, r0
	int need_sched = 0;
   353aa:	2000      	movs	r0, #0
	return list->head == list;
   353ac:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   353ae:	42a5      	cmp	r5, r4
   353b0:	d000      	beq.n	353b4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   353b2:	b904      	cbnz	r4, 353b6 <z_unpend_all+0x10>
}
   353b4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   353b6:	4620      	mov	r0, r4
   353b8:	f7f5 fa8a 	bl	2a8d0 <z_unpend_thread>
		z_ready_thread(thread);
   353bc:	4620      	mov	r0, r4
   353be:	f7f5 fe03 	bl	2afc8 <z_ready_thread>
		need_sched = 1;
   353c2:	2001      	movs	r0, #1
   353c4:	e7f2      	b.n	353ac <z_unpend_all+0x6>

000353c6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   353c6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   353c8:	f7f6 fde4 	bl	2bf94 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   353cc:	bd08      	pop	{r3, pc}

000353ce <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   353ce:	f7f6 bde1 	b.w	2bf94 <sys_clock_tick_get>

000353d2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   353d2:	b108      	cbz	r0, 353d8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   353d4:	f7df ba60 	b.w	14898 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   353d8:	4770      	bx	lr

000353da <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   353da:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   353dc:	1c4b      	adds	r3, r1, #1
   353de:	bf08      	it	eq
   353e0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   353e4:	4604      	mov	r4, r0
   353e6:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   353e8:	d013      	beq.n	35412 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   353ea:	ea54 0105 	orrs.w	r1, r4, r5
   353ee:	d103      	bne.n	353f8 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   353f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   353f4:	f7f6 bdce 	b.w	2bf94 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   353f8:	f06f 0101 	mvn.w	r1, #1
   353fc:	1a0a      	subs	r2, r1, r0
   353fe:	f04f 31ff 	mov.w	r1, #4294967295
   35402:	eb61 0305 	sbc.w	r3, r1, r5
   35406:	2a00      	cmp	r2, #0
   35408:	f173 0100 	sbcs.w	r1, r3, #0
   3540c:	db02      	blt.n	35414 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   3540e:	4610      	mov	r0, r2
   35410:	4619      	mov	r1, r3
}
   35412:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   35414:	f7f6 fdbe 	bl	2bf94 <sys_clock_tick_get>
   35418:	2c01      	cmp	r4, #1
   3541a:	f175 0300 	sbcs.w	r3, r5, #0
   3541e:	bfbc      	itt	lt
   35420:	2401      	movlt	r4, #1
   35422:	2500      	movlt	r5, #0
   35424:	1820      	adds	r0, r4, r0
   35426:	eb45 0101 	adc.w	r1, r5, r1
   3542a:	e7f2      	b.n	35412 <sys_clock_timeout_end_calc+0x38>

0003542c <k_timer_init>:
	timer->status = 0U;
   3542c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3542e:	e9c0 1208 	strd	r1, r2, [r0, #32]
   35432:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   35436:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   3543a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3543e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   35440:	6343      	str	r3, [r0, #52]	; 0x34
}
   35442:	4770      	bx	lr

00035444 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   35444:	b510      	push	{r4, lr}
   35446:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   35448:	f7f6 fbf4 	bl	2bc34 <z_abort_timeout>

	if (inactive) {
   3544c:	b9b0      	cbnz	r0, 3547c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   3544e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   35450:	b10b      	cbz	r3, 35456 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   35452:	4620      	mov	r0, r4
   35454:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   35456:	f104 0018 	add.w	r0, r4, #24
   3545a:	f7f5 ff49 	bl	2b2f0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3545e:	b168      	cbz	r0, 3547c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   35460:	f7f5 fdb2 	bl	2afc8 <z_ready_thread>
   35464:	f04f 0320 	mov.w	r3, #32
   35468:	f3ef 8011 	mrs	r0, BASEPRI
   3546c:	f383 8811 	msr	BASEPRI, r3
   35470:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   35474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35478:	f7ff bf75 	b.w	35366 <z_reschedule_irqlock>
   3547c:	bd10      	pop	{r4, pc}

0003547e <add_event>:
{
   3547e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35480:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   35482:	e9d0 2300 	ldrd	r2, r3, [r0]
   35486:	4290      	cmp	r0, r2
   35488:	4604      	mov	r4, r0
   3548a:	460d      	mov	r5, r1
   3548c:	d105      	bne.n	3549a <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   3548e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   35490:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   35494:	601d      	str	r5, [r3, #0]
	list->tail = node;
   35496:	6065      	str	r5, [r4, #4]
}
   35498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   3549a:	2b00      	cmp	r3, #0
   3549c:	d0f7      	beq.n	3548e <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3549e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   354a0:	b100      	cbz	r0, 354a4 <add_event+0x26>
   354a2:	3860      	subs	r0, #96	; 0x60
   354a4:	b107      	cbz	r7, 354a8 <add_event+0x2a>
   354a6:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   354a8:	4639      	mov	r1, r7
   354aa:	f7ff ff53 	bl	35354 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   354ae:	2800      	cmp	r0, #0
   354b0:	dced      	bgt.n	3548e <add_event+0x10>
	return list->head == list;
   354b2:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   354b4:	42b4      	cmp	r4, r6
   354b6:	d0ea      	beq.n	3548e <add_event+0x10>
   354b8:	2e00      	cmp	r6, #0
   354ba:	bf38      	it	cc
   354bc:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   354be:	2e00      	cmp	r6, #0
   354c0:	d0e5      	beq.n	3548e <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   354c2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   354c4:	b101      	cbz	r1, 354c8 <add_event+0x4a>
   354c6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   354c8:	4638      	mov	r0, r7
   354ca:	f7ff ff43 	bl	35354 <z_sched_prio_cmp>
   354ce:	2800      	cmp	r0, #0
   354d0:	dd05      	ble.n	354de <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   354d2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   354d4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   354d8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   354da:	6075      	str	r5, [r6, #4]
			return;
   354dc:	e7dc      	b.n	35498 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   354de:	6863      	ldr	r3, [r4, #4]
   354e0:	42b3      	cmp	r3, r6
   354e2:	d0d4      	beq.n	3548e <add_event+0x10>
   354e4:	6836      	ldr	r6, [r6, #0]
   354e6:	e7ea      	b.n	354be <add_event+0x40>

000354e8 <z_handle_obj_poll_events>:
{
   354e8:	4603      	mov	r3, r0
	return list->head == list;
   354ea:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   354ec:	4283      	cmp	r3, r0
   354ee:	d008      	beq.n	35502 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   354f0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   354f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   354f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   354f8:	2300      	movs	r3, #0
	node->prev = NULL;
   354fa:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   354fe:	f7f7 b811 	b.w	2c524 <signal_poll_event>
}
   35502:	4770      	bx	lr

00035504 <k_free>:
	if (ptr != NULL) {
   35504:	b120      	cbz	r0, 35510 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   35506:	1f01      	subs	r1, r0, #4
   35508:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3550c:	f7f3 ba94 	b.w	28a38 <k_heap_free>
}
   35510:	4770      	bx	lr

00035512 <k_malloc>:
{
   35512:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   35514:	2004      	movs	r0, #4
   35516:	f7f7 ba1b 	b.w	2c950 <k_aligned_alloc>

0003551a <k_calloc>:
{
   3551a:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   3551c:	fb01 f500 	mul.w	r5, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   35520:	b118      	cbz	r0, 3552a <k_calloc+0x10>
   35522:	fbb5 f0f0 	udiv	r0, r5, r0
   35526:	4281      	cmp	r1, r0
   35528:	d10a      	bne.n	35540 <k_calloc+0x26>
	ret = k_malloc(bounds);
   3552a:	4628      	mov	r0, r5
   3552c:	f7ff fff1 	bl	35512 <k_malloc>
	if (ret != NULL) {
   35530:	4604      	mov	r4, r0
   35532:	b118      	cbz	r0, 3553c <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   35534:	462a      	mov	r2, r5
   35536:	2100      	movs	r1, #0
   35538:	f000 f845 	bl	355c6 <memset>
}
   3553c:	4620      	mov	r0, r4
   3553e:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   35540:	2400      	movs	r4, #0
   35542:	e7fb      	b.n	3553c <k_calloc+0x22>

00035544 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   35544:	4770      	bx	lr

00035546 <atoi>:
   35546:	220a      	movs	r2, #10
   35548:	2100      	movs	r1, #0
   3554a:	f7f8 b90b 	b.w	2d764 <strtol>

0003554e <memchr>:
   3554e:	b2c9      	uxtb	r1, r1
   35550:	4603      	mov	r3, r0
   35552:	4402      	add	r2, r0
   35554:	b510      	push	{r4, lr}
   35556:	4293      	cmp	r3, r2
   35558:	4618      	mov	r0, r3
   3555a:	d101      	bne.n	35560 <memchr+0x12>
   3555c:	2000      	movs	r0, #0
   3555e:	e003      	b.n	35568 <memchr+0x1a>
   35560:	7804      	ldrb	r4, [r0, #0]
   35562:	3301      	adds	r3, #1
   35564:	428c      	cmp	r4, r1
   35566:	d1f6      	bne.n	35556 <memchr+0x8>
   35568:	bd10      	pop	{r4, pc}

0003556a <memcmp>:
   3556a:	b530      	push	{r4, r5, lr}
   3556c:	3901      	subs	r1, #1
   3556e:	2400      	movs	r4, #0
   35570:	42a2      	cmp	r2, r4
   35572:	d101      	bne.n	35578 <memcmp+0xe>
   35574:	2000      	movs	r0, #0
   35576:	e005      	b.n	35584 <memcmp+0x1a>
   35578:	5d03      	ldrb	r3, [r0, r4]
   3557a:	3401      	adds	r4, #1
   3557c:	5d0d      	ldrb	r5, [r1, r4]
   3557e:	42ab      	cmp	r3, r5
   35580:	d0f6      	beq.n	35570 <memcmp+0x6>
   35582:	1b58      	subs	r0, r3, r5
   35584:	bd30      	pop	{r4, r5, pc}

00035586 <memcpy>:
   35586:	440a      	add	r2, r1
   35588:	1e43      	subs	r3, r0, #1
   3558a:	4291      	cmp	r1, r2
   3558c:	d100      	bne.n	35590 <memcpy+0xa>
   3558e:	4770      	bx	lr
   35590:	b510      	push	{r4, lr}
   35592:	f811 4b01 	ldrb.w	r4, [r1], #1
   35596:	4291      	cmp	r1, r2
   35598:	f803 4f01 	strb.w	r4, [r3, #1]!
   3559c:	d1f9      	bne.n	35592 <memcpy+0xc>
   3559e:	bd10      	pop	{r4, pc}

000355a0 <__memcpy_chk>:
   355a0:	429a      	cmp	r2, r3
   355a2:	b508      	push	{r3, lr}
   355a4:	d901      	bls.n	355aa <__memcpy_chk+0xa>
   355a6:	f7e2 fa49 	bl	17a3c <__chk_fail>
   355aa:	4281      	cmp	r1, r0
   355ac:	d804      	bhi.n	355b8 <__memcpy_chk+0x18>
   355ae:	188b      	adds	r3, r1, r2
   355b0:	4298      	cmp	r0, r3
   355b2:	d3f8      	bcc.n	355a6 <__memcpy_chk+0x6>
   355b4:	4281      	cmp	r1, r0
   355b6:	d102      	bne.n	355be <__memcpy_chk+0x1e>
   355b8:	1883      	adds	r3, r0, r2
   355ba:	4299      	cmp	r1, r3
   355bc:	d3f3      	bcc.n	355a6 <__memcpy_chk+0x6>
   355be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   355c2:	f7ff bfe0 	b.w	35586 <memcpy>

000355c6 <memset>:
   355c6:	4402      	add	r2, r0
   355c8:	4603      	mov	r3, r0
   355ca:	4293      	cmp	r3, r2
   355cc:	d100      	bne.n	355d0 <memset+0xa>
   355ce:	4770      	bx	lr
   355d0:	f803 1b01 	strb.w	r1, [r3], #1
   355d4:	e7f9      	b.n	355ca <memset+0x4>

000355d6 <__cvt>:
   355d6:	2b00      	cmp	r3, #0
   355d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   355dc:	461f      	mov	r7, r3
   355de:	b088      	sub	sp, #32
   355e0:	bfb4      	ite	lt
   355e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   355e6:	2300      	movge	r3, #0
   355e8:	4614      	mov	r4, r2
   355ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   355ec:	bfbc      	itt	lt
   355ee:	461f      	movlt	r7, r3
   355f0:	232d      	movlt	r3, #45	; 0x2d
   355f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   355f4:	7013      	strb	r3, [r2, #0]
   355f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   355f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   355fc:	f023 0820 	bic.w	r8, r3, #32
   35600:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   35604:	d005      	beq.n	35612 <__cvt+0x3c>
   35606:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   3560a:	d100      	bne.n	3560e <__cvt+0x38>
   3560c:	3501      	adds	r5, #1
   3560e:	2302      	movs	r3, #2
   35610:	e000      	b.n	35614 <__cvt+0x3e>
   35612:	2303      	movs	r3, #3
   35614:	aa07      	add	r2, sp, #28
   35616:	9204      	str	r2, [sp, #16]
   35618:	aa06      	add	r2, sp, #24
   3561a:	e9cd 3500 	strd	r3, r5, [sp]
   3561e:	e9cd a202 	strd	sl, r2, [sp, #8]
   35622:	463b      	mov	r3, r7
   35624:	4622      	mov	r2, r4
   35626:	f7dc f93b 	bl	118a0 <_dtoa_r>
   3562a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3562e:	4606      	mov	r6, r0
   35630:	d102      	bne.n	35638 <__cvt+0x62>
   35632:	9b11      	ldr	r3, [sp, #68]	; 0x44
   35634:	07db      	lsls	r3, r3, #31
   35636:	d522      	bpl.n	3567e <__cvt+0xa8>
   35638:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3563c:	eb06 0905 	add.w	r9, r6, r5
   35640:	d110      	bne.n	35664 <__cvt+0x8e>
   35642:	7833      	ldrb	r3, [r6, #0]
   35644:	2b30      	cmp	r3, #48	; 0x30
   35646:	d10a      	bne.n	3565e <__cvt+0x88>
   35648:	2200      	movs	r2, #0
   3564a:	2300      	movs	r3, #0
   3564c:	4620      	mov	r0, r4
   3564e:	4639      	mov	r1, r7
   35650:	f7db fa1a 	bl	10a88 <__aeabi_dcmpeq>
   35654:	b918      	cbnz	r0, 3565e <__cvt+0x88>
   35656:	f1c5 0501 	rsb	r5, r5, #1
   3565a:	f8ca 5000 	str.w	r5, [sl]
   3565e:	f8da 3000 	ldr.w	r3, [sl]
   35662:	4499      	add	r9, r3
   35664:	2200      	movs	r2, #0
   35666:	2300      	movs	r3, #0
   35668:	4620      	mov	r0, r4
   3566a:	4639      	mov	r1, r7
   3566c:	f7db fa0c 	bl	10a88 <__aeabi_dcmpeq>
   35670:	b108      	cbz	r0, 35676 <__cvt+0xa0>
   35672:	f8cd 901c 	str.w	r9, [sp, #28]
   35676:	2230      	movs	r2, #48	; 0x30
   35678:	9b07      	ldr	r3, [sp, #28]
   3567a:	454b      	cmp	r3, r9
   3567c:	d307      	bcc.n	3568e <__cvt+0xb8>
   3567e:	9b07      	ldr	r3, [sp, #28]
   35680:	4630      	mov	r0, r6
   35682:	9a15      	ldr	r2, [sp, #84]	; 0x54
   35684:	1b9b      	subs	r3, r3, r6
   35686:	6013      	str	r3, [r2, #0]
   35688:	b008      	add	sp, #32
   3568a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3568e:	1c59      	adds	r1, r3, #1
   35690:	9107      	str	r1, [sp, #28]
   35692:	701a      	strb	r2, [r3, #0]
   35694:	e7f0      	b.n	35678 <__cvt+0xa2>

00035696 <__exponent>:
   35696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35698:	2900      	cmp	r1, #0
   3569a:	4603      	mov	r3, r0
   3569c:	bfb8      	it	lt
   3569e:	4249      	neglt	r1, r1
   356a0:	f803 2b02 	strb.w	r2, [r3], #2
   356a4:	bfb4      	ite	lt
   356a6:	222d      	movlt	r2, #45	; 0x2d
   356a8:	222b      	movge	r2, #43	; 0x2b
   356aa:	2909      	cmp	r1, #9
   356ac:	7042      	strb	r2, [r0, #1]
   356ae:	dd2a      	ble.n	35706 <__exponent+0x70>
   356b0:	f10d 0407 	add.w	r4, sp, #7
   356b4:	270a      	movs	r7, #10
   356b6:	46a4      	mov	ip, r4
   356b8:	460a      	mov	r2, r1
   356ba:	46a6      	mov	lr, r4
   356bc:	3c01      	subs	r4, #1
   356be:	2a63      	cmp	r2, #99	; 0x63
   356c0:	fb91 f6f7 	sdiv	r6, r1, r7
   356c4:	fb07 1516 	mls	r5, r7, r6, r1
   356c8:	4631      	mov	r1, r6
   356ca:	f105 0530 	add.w	r5, r5, #48	; 0x30
   356ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
   356d2:	dcf1      	bgt.n	356b8 <__exponent+0x22>
   356d4:	3130      	adds	r1, #48	; 0x30
   356d6:	f1ae 0502 	sub.w	r5, lr, #2
   356da:	f804 1c01 	strb.w	r1, [r4, #-1]
   356de:	1c44      	adds	r4, r0, #1
   356e0:	4629      	mov	r1, r5
   356e2:	4561      	cmp	r1, ip
   356e4:	d30a      	bcc.n	356fc <__exponent+0x66>
   356e6:	f10d 0209 	add.w	r2, sp, #9
   356ea:	eba2 020e 	sub.w	r2, r2, lr
   356ee:	4565      	cmp	r5, ip
   356f0:	bf88      	it	hi
   356f2:	2200      	movhi	r2, #0
   356f4:	4413      	add	r3, r2
   356f6:	1a18      	subs	r0, r3, r0
   356f8:	b003      	add	sp, #12
   356fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   356fc:	f811 2b01 	ldrb.w	r2, [r1], #1
   35700:	f804 2f01 	strb.w	r2, [r4, #1]!
   35704:	e7ed      	b.n	356e2 <__exponent+0x4c>
   35706:	2330      	movs	r3, #48	; 0x30
   35708:	3130      	adds	r1, #48	; 0x30
   3570a:	7083      	strb	r3, [r0, #2]
   3570c:	1d03      	adds	r3, r0, #4
   3570e:	70c1      	strb	r1, [r0, #3]
   35710:	e7f1      	b.n	356f6 <__exponent+0x60>

00035712 <_printf_common>:
   35712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35716:	4616      	mov	r6, r2
   35718:	4699      	mov	r9, r3
   3571a:	688a      	ldr	r2, [r1, #8]
   3571c:	4607      	mov	r7, r0
   3571e:	690b      	ldr	r3, [r1, #16]
   35720:	460c      	mov	r4, r1
   35722:	f8dd 8020 	ldr.w	r8, [sp, #32]
   35726:	4293      	cmp	r3, r2
   35728:	bfb8      	it	lt
   3572a:	4613      	movlt	r3, r2
   3572c:	6033      	str	r3, [r6, #0]
   3572e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   35732:	b10a      	cbz	r2, 35738 <_printf_common+0x26>
   35734:	3301      	adds	r3, #1
   35736:	6033      	str	r3, [r6, #0]
   35738:	6823      	ldr	r3, [r4, #0]
   3573a:	0699      	lsls	r1, r3, #26
   3573c:	bf42      	ittt	mi
   3573e:	6833      	ldrmi	r3, [r6, #0]
   35740:	3302      	addmi	r3, #2
   35742:	6033      	strmi	r3, [r6, #0]
   35744:	6825      	ldr	r5, [r4, #0]
   35746:	f015 0506 	ands.w	r5, r5, #6
   3574a:	d106      	bne.n	3575a <_printf_common+0x48>
   3574c:	f104 0a19 	add.w	sl, r4, #25
   35750:	68e3      	ldr	r3, [r4, #12]
   35752:	6832      	ldr	r2, [r6, #0]
   35754:	1a9b      	subs	r3, r3, r2
   35756:	42ab      	cmp	r3, r5
   35758:	dc29      	bgt.n	357ae <_printf_common+0x9c>
   3575a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   3575e:	1e13      	subs	r3, r2, #0
   35760:	6822      	ldr	r2, [r4, #0]
   35762:	bf18      	it	ne
   35764:	2301      	movne	r3, #1
   35766:	0692      	lsls	r2, r2, #26
   35768:	d42e      	bmi.n	357c8 <_printf_common+0xb6>
   3576a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3576e:	4649      	mov	r1, r9
   35770:	4638      	mov	r0, r7
   35772:	47c0      	blx	r8
   35774:	3001      	adds	r0, #1
   35776:	d021      	beq.n	357bc <_printf_common+0xaa>
   35778:	6823      	ldr	r3, [r4, #0]
   3577a:	341a      	adds	r4, #26
   3577c:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   35780:	f003 0306 	and.w	r3, r3, #6
   35784:	6832      	ldr	r2, [r6, #0]
   35786:	2600      	movs	r6, #0
   35788:	2b04      	cmp	r3, #4
   3578a:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3578e:	bf08      	it	eq
   35790:	1aad      	subeq	r5, r5, r2
   35792:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   35796:	bf14      	ite	ne
   35798:	2500      	movne	r5, #0
   3579a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3579e:	4293      	cmp	r3, r2
   357a0:	bfc4      	itt	gt
   357a2:	1a9b      	subgt	r3, r3, r2
   357a4:	18ed      	addgt	r5, r5, r3
   357a6:	42b5      	cmp	r5, r6
   357a8:	d11a      	bne.n	357e0 <_printf_common+0xce>
   357aa:	2000      	movs	r0, #0
   357ac:	e008      	b.n	357c0 <_printf_common+0xae>
   357ae:	2301      	movs	r3, #1
   357b0:	4652      	mov	r2, sl
   357b2:	4649      	mov	r1, r9
   357b4:	4638      	mov	r0, r7
   357b6:	47c0      	blx	r8
   357b8:	3001      	adds	r0, #1
   357ba:	d103      	bne.n	357c4 <_printf_common+0xb2>
   357bc:	f04f 30ff 	mov.w	r0, #4294967295
   357c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   357c4:	3501      	adds	r5, #1
   357c6:	e7c3      	b.n	35750 <_printf_common+0x3e>
   357c8:	18e1      	adds	r1, r4, r3
   357ca:	1c5a      	adds	r2, r3, #1
   357cc:	2030      	movs	r0, #48	; 0x30
   357ce:	3302      	adds	r3, #2
   357d0:	4422      	add	r2, r4
   357d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   357d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   357da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   357de:	e7c4      	b.n	3576a <_printf_common+0x58>
   357e0:	2301      	movs	r3, #1
   357e2:	4622      	mov	r2, r4
   357e4:	4649      	mov	r1, r9
   357e6:	4638      	mov	r0, r7
   357e8:	47c0      	blx	r8
   357ea:	3001      	adds	r0, #1
   357ec:	d0e6      	beq.n	357bc <_printf_common+0xaa>
   357ee:	3601      	adds	r6, #1
   357f0:	e7d9      	b.n	357a6 <_printf_common+0x94>

000357f2 <__sprintf_chk>:
   357f2:	b408      	push	{r3}
   357f4:	b517      	push	{r0, r1, r2, r4, lr}
   357f6:	ab05      	add	r3, sp, #20
   357f8:	1e14      	subs	r4, r2, #0
   357fa:	f853 1b04 	ldr.w	r1, [r3], #4
   357fe:	9301      	str	r3, [sp, #4]
   35800:	da07      	bge.n	35812 <__sprintf_chk+0x20>
   35802:	461a      	mov	r2, r3
   35804:	f7f8 f900 	bl	2da08 <vsiprintf>
   35808:	b003      	add	sp, #12
   3580a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3580e:	b001      	add	sp, #4
   35810:	4770      	bx	lr
   35812:	460a      	mov	r2, r1
   35814:	4621      	mov	r1, r4
   35816:	f7f8 f8d3 	bl	2d9c0 <vsniprintf>
   3581a:	2800      	cmp	r0, #0
   3581c:	dbf4      	blt.n	35808 <__sprintf_chk+0x16>
   3581e:	42a0      	cmp	r0, r4
   35820:	d3f2      	bcc.n	35808 <__sprintf_chk+0x16>
   35822:	f7e2 f90b 	bl	17a3c <__chk_fail>

00035826 <strchr>:
   35826:	b2c9      	uxtb	r1, r1
   35828:	4603      	mov	r3, r0
   3582a:	4618      	mov	r0, r3
   3582c:	f813 2b01 	ldrb.w	r2, [r3], #1
   35830:	b112      	cbz	r2, 35838 <strchr+0x12>
   35832:	428a      	cmp	r2, r1
   35834:	d1f9      	bne.n	3582a <strchr+0x4>
   35836:	4770      	bx	lr
   35838:	2900      	cmp	r1, #0
   3583a:	bf18      	it	ne
   3583c:	2000      	movne	r0, #0
   3583e:	4770      	bx	lr

00035840 <strcpy>:
   35840:	4603      	mov	r3, r0
   35842:	f811 2b01 	ldrb.w	r2, [r1], #1
   35846:	f803 2b01 	strb.w	r2, [r3], #1
   3584a:	2a00      	cmp	r2, #0
   3584c:	d1f9      	bne.n	35842 <strcpy+0x2>
   3584e:	4770      	bx	lr

00035850 <strncmp>:
   35850:	b510      	push	{r4, lr}
   35852:	b16a      	cbz	r2, 35870 <strncmp+0x20>
   35854:	3901      	subs	r1, #1
   35856:	1884      	adds	r4, r0, r2
   35858:	f810 3b01 	ldrb.w	r3, [r0], #1
   3585c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   35860:	4293      	cmp	r3, r2
   35862:	d103      	bne.n	3586c <strncmp+0x1c>
   35864:	42a0      	cmp	r0, r4
   35866:	d001      	beq.n	3586c <strncmp+0x1c>
   35868:	2b00      	cmp	r3, #0
   3586a:	d1f5      	bne.n	35858 <strncmp+0x8>
   3586c:	1a98      	subs	r0, r3, r2
   3586e:	bd10      	pop	{r4, pc}
   35870:	4610      	mov	r0, r2
   35872:	e7fc      	b.n	3586e <strncmp+0x1e>

00035874 <strncpy>:
   35874:	3901      	subs	r1, #1
   35876:	4603      	mov	r3, r0
   35878:	b510      	push	{r4, lr}
   3587a:	b132      	cbz	r2, 3588a <strncpy+0x16>
   3587c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   35880:	3a01      	subs	r2, #1
   35882:	f803 4b01 	strb.w	r4, [r3], #1
   35886:	2c00      	cmp	r4, #0
   35888:	d1f7      	bne.n	3587a <strncpy+0x6>
   3588a:	441a      	add	r2, r3
   3588c:	2100      	movs	r1, #0
   3588e:	4293      	cmp	r3, r2
   35890:	d100      	bne.n	35894 <strncpy+0x20>
   35892:	bd10      	pop	{r4, pc}
   35894:	f803 1b01 	strb.w	r1, [r3], #1
   35898:	e7f9      	b.n	3588e <strncpy+0x1a>

0003589a <strnlen>:
   3589a:	4602      	mov	r2, r0
   3589c:	4401      	add	r1, r0
   3589e:	b510      	push	{r4, lr}
   358a0:	428a      	cmp	r2, r1
   358a2:	4613      	mov	r3, r2
   358a4:	d101      	bne.n	358aa <strnlen+0x10>
   358a6:	1a18      	subs	r0, r3, r0
   358a8:	bd10      	pop	{r4, pc}
   358aa:	781c      	ldrb	r4, [r3, #0]
   358ac:	3201      	adds	r2, #1
   358ae:	2c00      	cmp	r4, #0
   358b0:	d1f6      	bne.n	358a0 <strnlen+0x6>
   358b2:	e7f8      	b.n	358a6 <strnlen+0xc>

000358b4 <strstr>:
   358b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   358b6:	780c      	ldrb	r4, [r1, #0]
   358b8:	b164      	cbz	r4, 358d4 <strstr+0x20>
   358ba:	4603      	mov	r3, r0
   358bc:	781a      	ldrb	r2, [r3, #0]
   358be:	4618      	mov	r0, r3
   358c0:	1c5e      	adds	r6, r3, #1
   358c2:	b90a      	cbnz	r2, 358c8 <strstr+0x14>
   358c4:	4610      	mov	r0, r2
   358c6:	e005      	b.n	358d4 <strstr+0x20>
   358c8:	4294      	cmp	r4, r2
   358ca:	d108      	bne.n	358de <strstr+0x2a>
   358cc:	460d      	mov	r5, r1
   358ce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   358d2:	b902      	cbnz	r2, 358d6 <strstr+0x22>
   358d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   358d6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   358da:	4297      	cmp	r7, r2
   358dc:	d0f7      	beq.n	358ce <strstr+0x1a>
   358de:	4633      	mov	r3, r6
   358e0:	e7ec      	b.n	358bc <strstr+0x8>

000358e2 <_user_strerror>:
   358e2:	2000      	movs	r0, #0
   358e4:	4770      	bx	lr

000358e6 <_vsniprintf_r>:
   358e6:	b530      	push	{r4, r5, lr}
   358e8:	1e14      	subs	r4, r2, #0
   358ea:	4605      	mov	r5, r0
   358ec:	b09b      	sub	sp, #108	; 0x6c
   358ee:	4618      	mov	r0, r3
   358f0:	da05      	bge.n	358fe <_vsniprintf_r+0x18>
   358f2:	238b      	movs	r3, #139	; 0x8b
   358f4:	f04f 30ff 	mov.w	r0, #4294967295
   358f8:	602b      	str	r3, [r5, #0]
   358fa:	b01b      	add	sp, #108	; 0x6c
   358fc:	bd30      	pop	{r4, r5, pc}
   358fe:	f44f 7302 	mov.w	r3, #520	; 0x208
   35902:	4602      	mov	r2, r0
   35904:	9100      	str	r1, [sp, #0]
   35906:	4628      	mov	r0, r5
   35908:	f8ad 300c 	strh.w	r3, [sp, #12]
   3590c:	bf14      	ite	ne
   3590e:	f104 33ff 	addne.w	r3, r4, #4294967295
   35912:	4623      	moveq	r3, r4
   35914:	9104      	str	r1, [sp, #16]
   35916:	4669      	mov	r1, sp
   35918:	9302      	str	r3, [sp, #8]
   3591a:	9305      	str	r3, [sp, #20]
   3591c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   35920:	f8ad 300e 	strh.w	r3, [sp, #14]
   35924:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35926:	f7f8 f8d7 	bl	2dad8 <_svfiprintf_r>
   3592a:	1c43      	adds	r3, r0, #1
   3592c:	bfbc      	itt	lt
   3592e:	238b      	movlt	r3, #139	; 0x8b
   35930:	602b      	strlt	r3, [r5, #0]
   35932:	2c00      	cmp	r4, #0
   35934:	d0e1      	beq.n	358fa <_vsniprintf_r+0x14>
   35936:	9b00      	ldr	r3, [sp, #0]
   35938:	2200      	movs	r2, #0
   3593a:	701a      	strb	r2, [r3, #0]
   3593c:	e7dd      	b.n	358fa <_vsniprintf_r+0x14>

0003593e <quorem>:
   3593e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35942:	6903      	ldr	r3, [r0, #16]
   35944:	4607      	mov	r7, r0
   35946:	690c      	ldr	r4, [r1, #16]
   35948:	42a3      	cmp	r3, r4
   3594a:	f2c0 8085 	blt.w	35a58 <quorem+0x11a>
   3594e:	3c01      	subs	r4, #1
   35950:	f100 0514 	add.w	r5, r0, #20
   35954:	f101 0814 	add.w	r8, r1, #20
   35958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3595c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   35960:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   35964:	9301      	str	r3, [sp, #4]
   35966:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   3596a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   3596e:	3301      	adds	r3, #1
   35970:	429a      	cmp	r2, r3
   35972:	fbb2 f6f3 	udiv	r6, r2, r3
   35976:	d333      	bcc.n	359e0 <quorem+0xa2>
   35978:	f04f 0e00 	mov.w	lr, #0
   3597c:	4640      	mov	r0, r8
   3597e:	46ac      	mov	ip, r5
   35980:	46f2      	mov	sl, lr
   35982:	f850 2b04 	ldr.w	r2, [r0], #4
   35986:	b293      	uxth	r3, r2
   35988:	4581      	cmp	r9, r0
   3598a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   3598e:	fb06 e303 	mla	r3, r6, r3, lr
   35992:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   35996:	b29b      	uxth	r3, r3
   35998:	fb06 e202 	mla	r2, r6, r2, lr
   3599c:	ebaa 0303 	sub.w	r3, sl, r3
   359a0:	f8dc a000 	ldr.w	sl, [ip]
   359a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   359a8:	fa1f fa8a 	uxth.w	sl, sl
   359ac:	4453      	add	r3, sl
   359ae:	fa1f fa82 	uxth.w	sl, r2
   359b2:	f8dc 2000 	ldr.w	r2, [ip]
   359b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   359ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
   359be:	b29b      	uxth	r3, r3
   359c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
   359c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   359c8:	f84c 3b04 	str.w	r3, [ip], #4
   359cc:	d2d9      	bcs.n	35982 <quorem+0x44>
   359ce:	f855 300b 	ldr.w	r3, [r5, fp]
   359d2:	b92b      	cbnz	r3, 359e0 <quorem+0xa2>
   359d4:	9b01      	ldr	r3, [sp, #4]
   359d6:	3b04      	subs	r3, #4
   359d8:	429d      	cmp	r5, r3
   359da:	461a      	mov	r2, r3
   359dc:	d330      	bcc.n	35a40 <quorem+0x102>
   359de:	613c      	str	r4, [r7, #16]
   359e0:	4638      	mov	r0, r7
   359e2:	f000 fa28 	bl	35e36 <__mcmp>
   359e6:	2800      	cmp	r0, #0
   359e8:	db26      	blt.n	35a38 <quorem+0xfa>
   359ea:	3601      	adds	r6, #1
   359ec:	4628      	mov	r0, r5
   359ee:	f04f 0c00 	mov.w	ip, #0
   359f2:	f858 1b04 	ldr.w	r1, [r8], #4
   359f6:	f8d0 e000 	ldr.w	lr, [r0]
   359fa:	b28b      	uxth	r3, r1
   359fc:	45c1      	cmp	r9, r8
   359fe:	fa1f f28e 	uxth.w	r2, lr
   35a02:	ebac 0303 	sub.w	r3, ip, r3
   35a06:	4413      	add	r3, r2
   35a08:	ea4f 4211 	mov.w	r2, r1, lsr #16
   35a0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   35a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
   35a14:	b29b      	uxth	r3, r3
   35a16:	ea4f 4c22 	mov.w	ip, r2, asr #16
   35a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   35a1e:	f840 3b04 	str.w	r3, [r0], #4
   35a22:	d2e6      	bcs.n	359f2 <quorem+0xb4>
   35a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   35a28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   35a2c:	b922      	cbnz	r2, 35a38 <quorem+0xfa>
   35a2e:	3b04      	subs	r3, #4
   35a30:	429d      	cmp	r5, r3
   35a32:	461a      	mov	r2, r3
   35a34:	d30a      	bcc.n	35a4c <quorem+0x10e>
   35a36:	613c      	str	r4, [r7, #16]
   35a38:	4630      	mov	r0, r6
   35a3a:	b003      	add	sp, #12
   35a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35a40:	6812      	ldr	r2, [r2, #0]
   35a42:	3b04      	subs	r3, #4
   35a44:	2a00      	cmp	r2, #0
   35a46:	d1ca      	bne.n	359de <quorem+0xa0>
   35a48:	3c01      	subs	r4, #1
   35a4a:	e7c5      	b.n	359d8 <quorem+0x9a>
   35a4c:	6812      	ldr	r2, [r2, #0]
   35a4e:	3b04      	subs	r3, #4
   35a50:	2a00      	cmp	r2, #0
   35a52:	d1f0      	bne.n	35a36 <quorem+0xf8>
   35a54:	3c01      	subs	r4, #1
   35a56:	e7eb      	b.n	35a30 <quorem+0xf2>
   35a58:	2000      	movs	r0, #0
   35a5a:	e7ee      	b.n	35a3a <quorem+0xfc>

00035a5c <__ascii_mbtowc>:
   35a5c:	b082      	sub	sp, #8
   35a5e:	b901      	cbnz	r1, 35a62 <__ascii_mbtowc+0x6>
   35a60:	a901      	add	r1, sp, #4
   35a62:	b142      	cbz	r2, 35a76 <__ascii_mbtowc+0x1a>
   35a64:	b14b      	cbz	r3, 35a7a <__ascii_mbtowc+0x1e>
   35a66:	7813      	ldrb	r3, [r2, #0]
   35a68:	600b      	str	r3, [r1, #0]
   35a6a:	7812      	ldrb	r2, [r2, #0]
   35a6c:	1e10      	subs	r0, r2, #0
   35a6e:	bf18      	it	ne
   35a70:	2001      	movne	r0, #1
   35a72:	b002      	add	sp, #8
   35a74:	4770      	bx	lr
   35a76:	4610      	mov	r0, r2
   35a78:	e7fb      	b.n	35a72 <__ascii_mbtowc+0x16>
   35a7a:	f06f 0001 	mvn.w	r0, #1
   35a7e:	e7f8      	b.n	35a72 <__ascii_mbtowc+0x16>

00035a80 <_Balloc>:
   35a80:	b570      	push	{r4, r5, r6, lr}
   35a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
   35a84:	4604      	mov	r4, r0
   35a86:	460d      	mov	r5, r1
   35a88:	b93e      	cbnz	r6, 35a9a <_Balloc+0x1a>
   35a8a:	2010      	movs	r0, #16
   35a8c:	f7f6 ffbe 	bl	2ca0c <malloc>
   35a90:	6260      	str	r0, [r4, #36]	; 0x24
   35a92:	6006      	str	r6, [r0, #0]
   35a94:	60c6      	str	r6, [r0, #12]
   35a96:	e9c0 6601 	strd	r6, r6, [r0, #4]
   35a9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   35a9c:	68f3      	ldr	r3, [r6, #12]
   35a9e:	b183      	cbz	r3, 35ac2 <_Balloc+0x42>
   35aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   35aa2:	68db      	ldr	r3, [r3, #12]
   35aa4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   35aa8:	b9b8      	cbnz	r0, 35ada <_Balloc+0x5a>
   35aaa:	2101      	movs	r1, #1
   35aac:	4620      	mov	r0, r4
   35aae:	fa01 f605 	lsl.w	r6, r1, r5
   35ab2:	1d72      	adds	r2, r6, #5
   35ab4:	0092      	lsls	r2, r2, #2
   35ab6:	f000 faa5 	bl	36004 <_calloc_r>
   35aba:	b160      	cbz	r0, 35ad6 <_Balloc+0x56>
   35abc:	e9c0 5601 	strd	r5, r6, [r0, #4]
   35ac0:	e00e      	b.n	35ae0 <_Balloc+0x60>
   35ac2:	2221      	movs	r2, #33	; 0x21
   35ac4:	2104      	movs	r1, #4
   35ac6:	4620      	mov	r0, r4
   35ac8:	f000 fa9c 	bl	36004 <_calloc_r>
   35acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   35ace:	60f0      	str	r0, [r6, #12]
   35ad0:	68db      	ldr	r3, [r3, #12]
   35ad2:	2b00      	cmp	r3, #0
   35ad4:	d1e4      	bne.n	35aa0 <_Balloc+0x20>
   35ad6:	2000      	movs	r0, #0
   35ad8:	bd70      	pop	{r4, r5, r6, pc}
   35ada:	6802      	ldr	r2, [r0, #0]
   35adc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   35ae0:	2300      	movs	r3, #0
   35ae2:	e9c0 3303 	strd	r3, r3, [r0, #12]
   35ae6:	e7f7      	b.n	35ad8 <_Balloc+0x58>

00035ae8 <_Bfree>:
   35ae8:	b570      	push	{r4, r5, r6, lr}
   35aea:	6a46      	ldr	r6, [r0, #36]	; 0x24
   35aec:	4605      	mov	r5, r0
   35aee:	460c      	mov	r4, r1
   35af0:	b93e      	cbnz	r6, 35b02 <_Bfree+0x1a>
   35af2:	2010      	movs	r0, #16
   35af4:	f7f6 ff8a 	bl	2ca0c <malloc>
   35af8:	6268      	str	r0, [r5, #36]	; 0x24
   35afa:	6006      	str	r6, [r0, #0]
   35afc:	60c6      	str	r6, [r0, #12]
   35afe:	e9c0 6601 	strd	r6, r6, [r0, #4]
   35b02:	b13c      	cbz	r4, 35b14 <_Bfree+0x2c>
   35b04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   35b06:	6862      	ldr	r2, [r4, #4]
   35b08:	68db      	ldr	r3, [r3, #12]
   35b0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   35b0e:	6021      	str	r1, [r4, #0]
   35b10:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   35b14:	bd70      	pop	{r4, r5, r6, pc}

00035b16 <__multadd>:
   35b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35b1a:	4607      	mov	r7, r0
   35b1c:	4698      	mov	r8, r3
   35b1e:	460c      	mov	r4, r1
   35b20:	690e      	ldr	r6, [r1, #16]
   35b22:	f101 0014 	add.w	r0, r1, #20
   35b26:	2300      	movs	r3, #0
   35b28:	6805      	ldr	r5, [r0, #0]
   35b2a:	3301      	adds	r3, #1
   35b2c:	b2a9      	uxth	r1, r5
   35b2e:	429e      	cmp	r6, r3
   35b30:	ea4f 4515 	mov.w	r5, r5, lsr #16
   35b34:	fb02 8101 	mla	r1, r2, r1, r8
   35b38:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   35b3c:	b289      	uxth	r1, r1
   35b3e:	fb02 c505 	mla	r5, r2, r5, ip
   35b42:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   35b46:	ea4f 4815 	mov.w	r8, r5, lsr #16
   35b4a:	f840 1b04 	str.w	r1, [r0], #4
   35b4e:	dceb      	bgt.n	35b28 <__multadd+0x12>
   35b50:	f1b8 0f00 	cmp.w	r8, #0
   35b54:	d01b      	beq.n	35b8e <__multadd+0x78>
   35b56:	68a3      	ldr	r3, [r4, #8]
   35b58:	42b3      	cmp	r3, r6
   35b5a:	dc12      	bgt.n	35b82 <__multadd+0x6c>
   35b5c:	6861      	ldr	r1, [r4, #4]
   35b5e:	4638      	mov	r0, r7
   35b60:	3101      	adds	r1, #1
   35b62:	f7ff ff8d 	bl	35a80 <_Balloc>
   35b66:	6922      	ldr	r2, [r4, #16]
   35b68:	4605      	mov	r5, r0
   35b6a:	f104 010c 	add.w	r1, r4, #12
   35b6e:	3202      	adds	r2, #2
   35b70:	300c      	adds	r0, #12
   35b72:	0092      	lsls	r2, r2, #2
   35b74:	f7ff fd07 	bl	35586 <memcpy>
   35b78:	4621      	mov	r1, r4
   35b7a:	462c      	mov	r4, r5
   35b7c:	4638      	mov	r0, r7
   35b7e:	f7ff ffb3 	bl	35ae8 <_Bfree>
   35b82:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   35b86:	3601      	adds	r6, #1
   35b88:	f8c3 8014 	str.w	r8, [r3, #20]
   35b8c:	6126      	str	r6, [r4, #16]
   35b8e:	4620      	mov	r0, r4
   35b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035b94 <__hi0bits>:
   35b94:	0c02      	lsrs	r2, r0, #16
   35b96:	4603      	mov	r3, r0
   35b98:	0412      	lsls	r2, r2, #16
   35b9a:	b9ca      	cbnz	r2, 35bd0 <__hi0bits+0x3c>
   35b9c:	0403      	lsls	r3, r0, #16
   35b9e:	2010      	movs	r0, #16
   35ba0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   35ba4:	bf04      	itt	eq
   35ba6:	021b      	lsleq	r3, r3, #8
   35ba8:	3008      	addeq	r0, #8
   35baa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   35bae:	bf04      	itt	eq
   35bb0:	011b      	lsleq	r3, r3, #4
   35bb2:	3004      	addeq	r0, #4
   35bb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   35bb8:	bf04      	itt	eq
   35bba:	009b      	lsleq	r3, r3, #2
   35bbc:	3002      	addeq	r0, #2
   35bbe:	2b00      	cmp	r3, #0
   35bc0:	db05      	blt.n	35bce <__hi0bits+0x3a>
   35bc2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   35bc6:	f100 0001 	add.w	r0, r0, #1
   35bca:	bf08      	it	eq
   35bcc:	2020      	moveq	r0, #32
   35bce:	4770      	bx	lr
   35bd0:	2000      	movs	r0, #0
   35bd2:	e7e5      	b.n	35ba0 <__hi0bits+0xc>

00035bd4 <__lo0bits>:
   35bd4:	6803      	ldr	r3, [r0, #0]
   35bd6:	4602      	mov	r2, r0
   35bd8:	f013 0007 	ands.w	r0, r3, #7
   35bdc:	d00b      	beq.n	35bf6 <__lo0bits+0x22>
   35bde:	07d9      	lsls	r1, r3, #31
   35be0:	d422      	bmi.n	35c28 <__lo0bits+0x54>
   35be2:	0798      	lsls	r0, r3, #30
   35be4:	bf47      	ittee	mi
   35be6:	085b      	lsrmi	r3, r3, #1
   35be8:	2001      	movmi	r0, #1
   35bea:	089b      	lsrpl	r3, r3, #2
   35bec:	2002      	movpl	r0, #2
   35bee:	bf4c      	ite	mi
   35bf0:	6013      	strmi	r3, [r2, #0]
   35bf2:	6013      	strpl	r3, [r2, #0]
   35bf4:	4770      	bx	lr
   35bf6:	b299      	uxth	r1, r3
   35bf8:	b909      	cbnz	r1, 35bfe <__lo0bits+0x2a>
   35bfa:	0c1b      	lsrs	r3, r3, #16
   35bfc:	2010      	movs	r0, #16
   35bfe:	f013 0fff 	tst.w	r3, #255	; 0xff
   35c02:	bf04      	itt	eq
   35c04:	0a1b      	lsreq	r3, r3, #8
   35c06:	3008      	addeq	r0, #8
   35c08:	0719      	lsls	r1, r3, #28
   35c0a:	bf04      	itt	eq
   35c0c:	091b      	lsreq	r3, r3, #4
   35c0e:	3004      	addeq	r0, #4
   35c10:	0799      	lsls	r1, r3, #30
   35c12:	bf04      	itt	eq
   35c14:	089b      	lsreq	r3, r3, #2
   35c16:	3002      	addeq	r0, #2
   35c18:	07d9      	lsls	r1, r3, #31
   35c1a:	d403      	bmi.n	35c24 <__lo0bits+0x50>
   35c1c:	085b      	lsrs	r3, r3, #1
   35c1e:	f100 0001 	add.w	r0, r0, #1
   35c22:	d003      	beq.n	35c2c <__lo0bits+0x58>
   35c24:	6013      	str	r3, [r2, #0]
   35c26:	4770      	bx	lr
   35c28:	2000      	movs	r0, #0
   35c2a:	4770      	bx	lr
   35c2c:	2020      	movs	r0, #32
   35c2e:	4770      	bx	lr

00035c30 <__i2b>:
   35c30:	b510      	push	{r4, lr}
   35c32:	460c      	mov	r4, r1
   35c34:	2101      	movs	r1, #1
   35c36:	f7ff ff23 	bl	35a80 <_Balloc>
   35c3a:	2201      	movs	r2, #1
   35c3c:	6144      	str	r4, [r0, #20]
   35c3e:	6102      	str	r2, [r0, #16]
   35c40:	bd10      	pop	{r4, pc}

00035c42 <__multiply>:
   35c42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35c46:	4615      	mov	r5, r2
   35c48:	690a      	ldr	r2, [r1, #16]
   35c4a:	460c      	mov	r4, r1
   35c4c:	b085      	sub	sp, #20
   35c4e:	692b      	ldr	r3, [r5, #16]
   35c50:	429a      	cmp	r2, r3
   35c52:	bfbe      	ittt	lt
   35c54:	460b      	movlt	r3, r1
   35c56:	462c      	movlt	r4, r5
   35c58:	461d      	movlt	r5, r3
   35c5a:	6927      	ldr	r7, [r4, #16]
   35c5c:	68a3      	ldr	r3, [r4, #8]
   35c5e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   35c62:	6861      	ldr	r1, [r4, #4]
   35c64:	eb07 0609 	add.w	r6, r7, r9
   35c68:	42b3      	cmp	r3, r6
   35c6a:	bfb8      	it	lt
   35c6c:	3101      	addlt	r1, #1
   35c6e:	f7ff ff07 	bl	35a80 <_Balloc>
   35c72:	f100 0114 	add.w	r1, r0, #20
   35c76:	2200      	movs	r2, #0
   35c78:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   35c7c:	460b      	mov	r3, r1
   35c7e:	4543      	cmp	r3, r8
   35c80:	d31d      	bcc.n	35cbe <__multiply+0x7c>
   35c82:	f104 0314 	add.w	r3, r4, #20
   35c86:	f105 0214 	add.w	r2, r5, #20
   35c8a:	f104 0515 	add.w	r5, r4, #21
   35c8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   35c92:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   35c96:	9302      	str	r3, [sp, #8]
   35c98:	1b3b      	subs	r3, r7, r4
   35c9a:	3b15      	subs	r3, #21
   35c9c:	f023 0303 	bic.w	r3, r3, #3
   35ca0:	3304      	adds	r3, #4
   35ca2:	42af      	cmp	r7, r5
   35ca4:	bf38      	it	cc
   35ca6:	2304      	movcc	r3, #4
   35ca8:	9301      	str	r3, [sp, #4]
   35caa:	9b02      	ldr	r3, [sp, #8]
   35cac:	9203      	str	r2, [sp, #12]
   35cae:	4293      	cmp	r3, r2
   35cb0:	d808      	bhi.n	35cc4 <__multiply+0x82>
   35cb2:	2e00      	cmp	r6, #0
   35cb4:	dc5a      	bgt.n	35d6c <__multiply+0x12a>
   35cb6:	6106      	str	r6, [r0, #16]
   35cb8:	b005      	add	sp, #20
   35cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35cbe:	f843 2b04 	str.w	r2, [r3], #4
   35cc2:	e7dc      	b.n	35c7e <__multiply+0x3c>
   35cc4:	f8b2 a000 	ldrh.w	sl, [r2]
   35cc8:	f1ba 0f00 	cmp.w	sl, #0
   35ccc:	d024      	beq.n	35d18 <__multiply+0xd6>
   35cce:	f104 0e14 	add.w	lr, r4, #20
   35cd2:	4689      	mov	r9, r1
   35cd4:	f04f 0c00 	mov.w	ip, #0
   35cd8:	f85e 5b04 	ldr.w	r5, [lr], #4
   35cdc:	f8d9 b000 	ldr.w	fp, [r9]
   35ce0:	b2ab      	uxth	r3, r5
   35ce2:	4577      	cmp	r7, lr
   35ce4:	fa1f fb8b 	uxth.w	fp, fp
   35ce8:	fb0a b303 	mla	r3, sl, r3, fp
   35cec:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   35cf0:	f8d9 5000 	ldr.w	r5, [r9]
   35cf4:	4463      	add	r3, ip
   35cf6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   35cfa:	fb0a c50b 	mla	r5, sl, fp, ip
   35cfe:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   35d02:	b29b      	uxth	r3, r3
   35d04:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   35d08:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   35d0c:	f849 3b04 	str.w	r3, [r9], #4
   35d10:	d8e2      	bhi.n	35cd8 <__multiply+0x96>
   35d12:	9b01      	ldr	r3, [sp, #4]
   35d14:	f841 c003 	str.w	ip, [r1, r3]
   35d18:	9b03      	ldr	r3, [sp, #12]
   35d1a:	3204      	adds	r2, #4
   35d1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   35d20:	f1b9 0f00 	cmp.w	r9, #0
   35d24:	d020      	beq.n	35d68 <__multiply+0x126>
   35d26:	680b      	ldr	r3, [r1, #0]
   35d28:	f104 0c14 	add.w	ip, r4, #20
   35d2c:	468e      	mov	lr, r1
   35d2e:	f04f 0a00 	mov.w	sl, #0
   35d32:	f8bc 5000 	ldrh.w	r5, [ip]
   35d36:	b29b      	uxth	r3, r3
   35d38:	f8be b002 	ldrh.w	fp, [lr, #2]
   35d3c:	fb09 b505 	mla	r5, r9, r5, fp
   35d40:	44aa      	add	sl, r5
   35d42:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   35d46:	f84e 3b04 	str.w	r3, [lr], #4
   35d4a:	f85c 3b04 	ldr.w	r3, [ip], #4
   35d4e:	f8be 5000 	ldrh.w	r5, [lr]
   35d52:	0c1b      	lsrs	r3, r3, #16
   35d54:	4567      	cmp	r7, ip
   35d56:	fb09 5303 	mla	r3, r9, r3, r5
   35d5a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   35d5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   35d62:	d8e6      	bhi.n	35d32 <__multiply+0xf0>
   35d64:	9d01      	ldr	r5, [sp, #4]
   35d66:	514b      	str	r3, [r1, r5]
   35d68:	3104      	adds	r1, #4
   35d6a:	e79e      	b.n	35caa <__multiply+0x68>
   35d6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   35d70:	2b00      	cmp	r3, #0
   35d72:	d1a0      	bne.n	35cb6 <__multiply+0x74>
   35d74:	3e01      	subs	r6, #1
   35d76:	e79c      	b.n	35cb2 <__multiply+0x70>

00035d78 <__lshift>:
   35d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35d7c:	460c      	mov	r4, r1
   35d7e:	4607      	mov	r7, r0
   35d80:	4691      	mov	r9, r2
   35d82:	ea4f 1a62 	mov.w	sl, r2, asr #5
   35d86:	6923      	ldr	r3, [r4, #16]
   35d88:	6849      	ldr	r1, [r1, #4]
   35d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   35d8e:	68a3      	ldr	r3, [r4, #8]
   35d90:	f108 0601 	add.w	r6, r8, #1
   35d94:	42b3      	cmp	r3, r6
   35d96:	db3f      	blt.n	35e18 <__lshift+0xa0>
   35d98:	4638      	mov	r0, r7
   35d9a:	f7ff fe71 	bl	35a80 <_Balloc>
   35d9e:	2300      	movs	r3, #0
   35da0:	4605      	mov	r5, r0
   35da2:	f100 0114 	add.w	r1, r0, #20
   35da6:	f100 0210 	add.w	r2, r0, #16
   35daa:	4618      	mov	r0, r3
   35dac:	4553      	cmp	r3, sl
   35dae:	db36      	blt.n	35e1e <__lshift+0xa6>
   35db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   35db4:	f104 0314 	add.w	r3, r4, #20
   35db8:	6920      	ldr	r0, [r4, #16]
   35dba:	f019 091f 	ands.w	r9, r9, #31
   35dbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   35dc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   35dc6:	d02e      	beq.n	35e26 <__lshift+0xae>
   35dc8:	f1c9 0e20 	rsb	lr, r9, #32
   35dcc:	468a      	mov	sl, r1
   35dce:	2200      	movs	r2, #0
   35dd0:	6818      	ldr	r0, [r3, #0]
   35dd2:	fa00 f009 	lsl.w	r0, r0, r9
   35dd6:	4302      	orrs	r2, r0
   35dd8:	f84a 2b04 	str.w	r2, [sl], #4
   35ddc:	f853 2b04 	ldr.w	r2, [r3], #4
   35de0:	459c      	cmp	ip, r3
   35de2:	fa22 f20e 	lsr.w	r2, r2, lr
   35de6:	d8f3      	bhi.n	35dd0 <__lshift+0x58>
   35de8:	ebac 0304 	sub.w	r3, ip, r4
   35dec:	f104 0015 	add.w	r0, r4, #21
   35df0:	3b15      	subs	r3, #21
   35df2:	f023 0303 	bic.w	r3, r3, #3
   35df6:	3304      	adds	r3, #4
   35df8:	4560      	cmp	r0, ip
   35dfa:	bf88      	it	hi
   35dfc:	2304      	movhi	r3, #4
   35dfe:	50ca      	str	r2, [r1, r3]
   35e00:	b10a      	cbz	r2, 35e06 <__lshift+0x8e>
   35e02:	f108 0602 	add.w	r6, r8, #2
   35e06:	3e01      	subs	r6, #1
   35e08:	4638      	mov	r0, r7
   35e0a:	4621      	mov	r1, r4
   35e0c:	612e      	str	r6, [r5, #16]
   35e0e:	f7ff fe6b 	bl	35ae8 <_Bfree>
   35e12:	4628      	mov	r0, r5
   35e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35e18:	3101      	adds	r1, #1
   35e1a:	005b      	lsls	r3, r3, #1
   35e1c:	e7ba      	b.n	35d94 <__lshift+0x1c>
   35e1e:	3301      	adds	r3, #1
   35e20:	f842 0f04 	str.w	r0, [r2, #4]!
   35e24:	e7c2      	b.n	35dac <__lshift+0x34>
   35e26:	3904      	subs	r1, #4
   35e28:	f853 2b04 	ldr.w	r2, [r3], #4
   35e2c:	459c      	cmp	ip, r3
   35e2e:	f841 2f04 	str.w	r2, [r1, #4]!
   35e32:	d8f9      	bhi.n	35e28 <__lshift+0xb0>
   35e34:	e7e7      	b.n	35e06 <__lshift+0x8e>

00035e36 <__mcmp>:
   35e36:	4603      	mov	r3, r0
   35e38:	690a      	ldr	r2, [r1, #16]
   35e3a:	6900      	ldr	r0, [r0, #16]
   35e3c:	1a80      	subs	r0, r0, r2
   35e3e:	b530      	push	{r4, r5, lr}
   35e40:	d10d      	bne.n	35e5e <__mcmp+0x28>
   35e42:	3314      	adds	r3, #20
   35e44:	3114      	adds	r1, #20
   35e46:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   35e4a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   35e4e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   35e52:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   35e56:	4295      	cmp	r5, r2
   35e58:	d002      	beq.n	35e60 <__mcmp+0x2a>
   35e5a:	d304      	bcc.n	35e66 <__mcmp+0x30>
   35e5c:	2001      	movs	r0, #1
   35e5e:	bd30      	pop	{r4, r5, pc}
   35e60:	42a3      	cmp	r3, r4
   35e62:	d3f4      	bcc.n	35e4e <__mcmp+0x18>
   35e64:	e7fb      	b.n	35e5e <__mcmp+0x28>
   35e66:	f04f 30ff 	mov.w	r0, #4294967295
   35e6a:	e7f8      	b.n	35e5e <__mcmp+0x28>

00035e6c <__mdiff>:
   35e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35e70:	460c      	mov	r4, r1
   35e72:	4606      	mov	r6, r0
   35e74:	4611      	mov	r1, r2
   35e76:	4692      	mov	sl, r2
   35e78:	4620      	mov	r0, r4
   35e7a:	f7ff ffdc 	bl	35e36 <__mcmp>
   35e7e:	1e05      	subs	r5, r0, #0
   35e80:	d108      	bne.n	35e94 <__mdiff+0x28>
   35e82:	4629      	mov	r1, r5
   35e84:	4630      	mov	r0, r6
   35e86:	f7ff fdfb 	bl	35a80 <_Balloc>
   35e8a:	2301      	movs	r3, #1
   35e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   35e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35e94:	bfa3      	ittte	ge
   35e96:	4653      	movge	r3, sl
   35e98:	46a2      	movge	sl, r4
   35e9a:	2500      	movge	r5, #0
   35e9c:	2501      	movlt	r5, #1
   35e9e:	bfa8      	it	ge
   35ea0:	461c      	movge	r4, r3
   35ea2:	f8da 1004 	ldr.w	r1, [sl, #4]
   35ea6:	4630      	mov	r0, r6
   35ea8:	f7ff fdea 	bl	35a80 <_Balloc>
   35eac:	f104 0914 	add.w	r9, r4, #20
   35eb0:	f8da 7010 	ldr.w	r7, [sl, #16]
   35eb4:	f100 0814 	add.w	r8, r0, #20
   35eb8:	6926      	ldr	r6, [r4, #16]
   35eba:	f10a 0210 	add.w	r2, sl, #16
   35ebe:	60c5      	str	r5, [r0, #12]
   35ec0:	f10a 0514 	add.w	r5, sl, #20
   35ec4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   35ec8:	46c2      	mov	sl, r8
   35eca:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   35ece:	f04f 0c00 	mov.w	ip, #0
   35ed2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   35ed6:	f859 3b04 	ldr.w	r3, [r9], #4
   35eda:	fa1f f18b 	uxth.w	r1, fp
   35ede:	454e      	cmp	r6, r9
   35ee0:	4461      	add	r1, ip
   35ee2:	fa1f fc83 	uxth.w	ip, r3
   35ee6:	ea4f 4313 	mov.w	r3, r3, lsr #16
   35eea:	eba1 010c 	sub.w	r1, r1, ip
   35eee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   35ef2:	eb03 4321 	add.w	r3, r3, r1, asr #16
   35ef6:	b289      	uxth	r1, r1
   35ef8:	ea4f 4c23 	mov.w	ip, r3, asr #16
   35efc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   35f00:	f84a 3b04 	str.w	r3, [sl], #4
   35f04:	d8e5      	bhi.n	35ed2 <__mdiff+0x66>
   35f06:	1b33      	subs	r3, r6, r4
   35f08:	3415      	adds	r4, #21
   35f0a:	3b15      	subs	r3, #21
   35f0c:	f023 0303 	bic.w	r3, r3, #3
   35f10:	3304      	adds	r3, #4
   35f12:	42a6      	cmp	r6, r4
   35f14:	bf38      	it	cc
   35f16:	2304      	movcc	r3, #4
   35f18:	441d      	add	r5, r3
   35f1a:	4443      	add	r3, r8
   35f1c:	462c      	mov	r4, r5
   35f1e:	461e      	mov	r6, r3
   35f20:	4574      	cmp	r4, lr
   35f22:	d30e      	bcc.n	35f42 <__mdiff+0xd6>
   35f24:	f10e 0203 	add.w	r2, lr, #3
   35f28:	1b52      	subs	r2, r2, r5
   35f2a:	3d03      	subs	r5, #3
   35f2c:	f022 0203 	bic.w	r2, r2, #3
   35f30:	45ae      	cmp	lr, r5
   35f32:	bf38      	it	cc
   35f34:	2200      	movcc	r2, #0
   35f36:	441a      	add	r2, r3
   35f38:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   35f3c:	b18b      	cbz	r3, 35f62 <__mdiff+0xf6>
   35f3e:	6107      	str	r7, [r0, #16]
   35f40:	e7a6      	b.n	35e90 <__mdiff+0x24>
   35f42:	f854 8b04 	ldr.w	r8, [r4], #4
   35f46:	fa1f f288 	uxth.w	r2, r8
   35f4a:	4462      	add	r2, ip
   35f4c:	1411      	asrs	r1, r2, #16
   35f4e:	b292      	uxth	r2, r2
   35f50:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   35f54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   35f58:	ea4f 4c21 	mov.w	ip, r1, asr #16
   35f5c:	f846 2b04 	str.w	r2, [r6], #4
   35f60:	e7de      	b.n	35f20 <__mdiff+0xb4>
   35f62:	3f01      	subs	r7, #1
   35f64:	e7e8      	b.n	35f38 <__mdiff+0xcc>

00035f66 <__d2b>:
   35f66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   35f6a:	461c      	mov	r4, r3
   35f6c:	2101      	movs	r1, #1
   35f6e:	4690      	mov	r8, r2
   35f70:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   35f74:	f7ff fd84 	bl	35a80 <_Balloc>
   35f78:	f3c4 0313 	ubfx	r3, r4, #0, #20
   35f7c:	f3c4 540a 	ubfx	r4, r4, #20, #11
   35f80:	4607      	mov	r7, r0
   35f82:	bb2c      	cbnz	r4, 35fd0 <__d2b+0x6a>
   35f84:	9301      	str	r3, [sp, #4]
   35f86:	f1b8 0300 	subs.w	r3, r8, #0
   35f8a:	d026      	beq.n	35fda <__d2b+0x74>
   35f8c:	4668      	mov	r0, sp
   35f8e:	9300      	str	r3, [sp, #0]
   35f90:	f7ff fe20 	bl	35bd4 <__lo0bits>
   35f94:	9900      	ldr	r1, [sp, #0]
   35f96:	b1f0      	cbz	r0, 35fd6 <__d2b+0x70>
   35f98:	9a01      	ldr	r2, [sp, #4]
   35f9a:	f1c0 0320 	rsb	r3, r0, #32
   35f9e:	fa02 f303 	lsl.w	r3, r2, r3
   35fa2:	40c2      	lsrs	r2, r0
   35fa4:	430b      	orrs	r3, r1
   35fa6:	9201      	str	r2, [sp, #4]
   35fa8:	617b      	str	r3, [r7, #20]
   35faa:	9b01      	ldr	r3, [sp, #4]
   35fac:	2b00      	cmp	r3, #0
   35fae:	61bb      	str	r3, [r7, #24]
   35fb0:	bf14      	ite	ne
   35fb2:	2102      	movne	r1, #2
   35fb4:	2101      	moveq	r1, #1
   35fb6:	6139      	str	r1, [r7, #16]
   35fb8:	b1c4      	cbz	r4, 35fec <__d2b+0x86>
   35fba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   35fbe:	4404      	add	r4, r0
   35fc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   35fc4:	6034      	str	r4, [r6, #0]
   35fc6:	6028      	str	r0, [r5, #0]
   35fc8:	4638      	mov	r0, r7
   35fca:	b002      	add	sp, #8
   35fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   35fd4:	e7d6      	b.n	35f84 <__d2b+0x1e>
   35fd6:	6179      	str	r1, [r7, #20]
   35fd8:	e7e7      	b.n	35faa <__d2b+0x44>
   35fda:	a801      	add	r0, sp, #4
   35fdc:	f7ff fdfa 	bl	35bd4 <__lo0bits>
   35fe0:	9b01      	ldr	r3, [sp, #4]
   35fe2:	2101      	movs	r1, #1
   35fe4:	3020      	adds	r0, #32
   35fe6:	617b      	str	r3, [r7, #20]
   35fe8:	6139      	str	r1, [r7, #16]
   35fea:	e7e5      	b.n	35fb8 <__d2b+0x52>
   35fec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   35ff0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   35ff4:	6030      	str	r0, [r6, #0]
   35ff6:	6918      	ldr	r0, [r3, #16]
   35ff8:	f7ff fdcc 	bl	35b94 <__hi0bits>
   35ffc:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   36000:	6029      	str	r1, [r5, #0]
   36002:	e7e1      	b.n	35fc8 <__d2b+0x62>

00036004 <_calloc_r>:
   36004:	b538      	push	{r3, r4, r5, lr}
   36006:	fb02 f501 	mul.w	r5, r2, r1
   3600a:	4629      	mov	r1, r5
   3600c:	f7f6 fd54 	bl	2cab8 <_malloc_r>
   36010:	4604      	mov	r4, r0
   36012:	b118      	cbz	r0, 3601c <_calloc_r+0x18>
   36014:	462a      	mov	r2, r5
   36016:	2100      	movs	r1, #0
   36018:	f7ff fad5 	bl	355c6 <memset>
   3601c:	4620      	mov	r0, r4
   3601e:	bd38      	pop	{r3, r4, r5, pc}

00036020 <_realloc_r>:
   36020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36022:	4607      	mov	r7, r0
   36024:	4614      	mov	r4, r2
   36026:	460e      	mov	r6, r1
   36028:	b921      	cbnz	r1, 36034 <_realloc_r+0x14>
   3602a:	4611      	mov	r1, r2
   3602c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   36030:	f7f6 bd42 	b.w	2cab8 <_malloc_r>
   36034:	b922      	cbnz	r2, 36040 <_realloc_r+0x20>
   36036:	4625      	mov	r5, r4
   36038:	f7f6 fcf0 	bl	2ca1c <_free_r>
   3603c:	4628      	mov	r0, r5
   3603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36040:	f000 f898 	bl	36174 <_malloc_usable_size_r>
   36044:	42a0      	cmp	r0, r4
   36046:	d20f      	bcs.n	36068 <_realloc_r+0x48>
   36048:	4621      	mov	r1, r4
   3604a:	4638      	mov	r0, r7
   3604c:	f7f6 fd34 	bl	2cab8 <_malloc_r>
   36050:	4605      	mov	r5, r0
   36052:	2800      	cmp	r0, #0
   36054:	d0f2      	beq.n	3603c <_realloc_r+0x1c>
   36056:	4631      	mov	r1, r6
   36058:	4622      	mov	r2, r4
   3605a:	f7ff fa94 	bl	35586 <memcpy>
   3605e:	4631      	mov	r1, r6
   36060:	4638      	mov	r0, r7
   36062:	f7f6 fcdb 	bl	2ca1c <_free_r>
   36066:	e7e9      	b.n	3603c <_realloc_r+0x1c>
   36068:	4635      	mov	r5, r6
   3606a:	e7e7      	b.n	3603c <_realloc_r+0x1c>

0003606c <__ssputs_r>:
   3606c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36070:	688e      	ldr	r6, [r1, #8]
   36072:	4682      	mov	sl, r0
   36074:	460c      	mov	r4, r1
   36076:	4690      	mov	r8, r2
   36078:	429e      	cmp	r6, r3
   3607a:	461f      	mov	r7, r3
   3607c:	d838      	bhi.n	360f0 <__ssputs_r+0x84>
   3607e:	898a      	ldrh	r2, [r1, #12]
   36080:	f412 6f90 	tst.w	r2, #1152	; 0x480
   36084:	d032      	beq.n	360ec <__ssputs_r+0x80>
   36086:	6825      	ldr	r5, [r4, #0]
   36088:	3301      	adds	r3, #1
   3608a:	6909      	ldr	r1, [r1, #16]
   3608c:	eba5 0901 	sub.w	r9, r5, r1
   36090:	6965      	ldr	r5, [r4, #20]
   36092:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   36096:	444b      	add	r3, r9
   36098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   3609c:	106d      	asrs	r5, r5, #1
   3609e:	429d      	cmp	r5, r3
   360a0:	bf38      	it	cc
   360a2:	461d      	movcc	r5, r3
   360a4:	0553      	lsls	r3, r2, #21
   360a6:	d531      	bpl.n	3610c <__ssputs_r+0xa0>
   360a8:	4629      	mov	r1, r5
   360aa:	f7f6 fd05 	bl	2cab8 <_malloc_r>
   360ae:	4606      	mov	r6, r0
   360b0:	b950      	cbnz	r0, 360c8 <__ssputs_r+0x5c>
   360b2:	230c      	movs	r3, #12
   360b4:	f04f 30ff 	mov.w	r0, #4294967295
   360b8:	f8ca 3000 	str.w	r3, [sl]
   360bc:	89a3      	ldrh	r3, [r4, #12]
   360be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   360c2:	81a3      	strh	r3, [r4, #12]
   360c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   360c8:	464a      	mov	r2, r9
   360ca:	6921      	ldr	r1, [r4, #16]
   360cc:	f7ff fa5b 	bl	35586 <memcpy>
   360d0:	89a3      	ldrh	r3, [r4, #12]
   360d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   360d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   360da:	81a3      	strh	r3, [r4, #12]
   360dc:	6126      	str	r6, [r4, #16]
   360de:	444e      	add	r6, r9
   360e0:	6165      	str	r5, [r4, #20]
   360e2:	eba5 0509 	sub.w	r5, r5, r9
   360e6:	6026      	str	r6, [r4, #0]
   360e8:	463e      	mov	r6, r7
   360ea:	60a5      	str	r5, [r4, #8]
   360ec:	42be      	cmp	r6, r7
   360ee:	d900      	bls.n	360f2 <__ssputs_r+0x86>
   360f0:	463e      	mov	r6, r7
   360f2:	4632      	mov	r2, r6
   360f4:	4641      	mov	r1, r8
   360f6:	6820      	ldr	r0, [r4, #0]
   360f8:	f000 f822 	bl	36140 <memmove>
   360fc:	68a3      	ldr	r3, [r4, #8]
   360fe:	6822      	ldr	r2, [r4, #0]
   36100:	2000      	movs	r0, #0
   36102:	1b9b      	subs	r3, r3, r6
   36104:	4432      	add	r2, r6
   36106:	60a3      	str	r3, [r4, #8]
   36108:	6022      	str	r2, [r4, #0]
   3610a:	e7db      	b.n	360c4 <__ssputs_r+0x58>
   3610c:	462a      	mov	r2, r5
   3610e:	f7ff ff87 	bl	36020 <_realloc_r>
   36112:	4606      	mov	r6, r0
   36114:	2800      	cmp	r0, #0
   36116:	d1e1      	bne.n	360dc <__ssputs_r+0x70>
   36118:	6921      	ldr	r1, [r4, #16]
   3611a:	4650      	mov	r0, sl
   3611c:	f7f6 fc7e 	bl	2ca1c <_free_r>
   36120:	e7c7      	b.n	360b2 <__ssputs_r+0x46>

00036122 <__ascii_wctomb>:
   36122:	4603      	mov	r3, r0
   36124:	4608      	mov	r0, r1
   36126:	b141      	cbz	r1, 3613a <__ascii_wctomb+0x18>
   36128:	2aff      	cmp	r2, #255	; 0xff
   3612a:	d904      	bls.n	36136 <__ascii_wctomb+0x14>
   3612c:	228a      	movs	r2, #138	; 0x8a
   3612e:	f04f 30ff 	mov.w	r0, #4294967295
   36132:	601a      	str	r2, [r3, #0]
   36134:	4770      	bx	lr
   36136:	2001      	movs	r0, #1
   36138:	700a      	strb	r2, [r1, #0]
   3613a:	4770      	bx	lr

0003613c <__retarget_lock_acquire_recursive>:
   3613c:	4770      	bx	lr

0003613e <__retarget_lock_release_recursive>:
   3613e:	4770      	bx	lr

00036140 <memmove>:
   36140:	4288      	cmp	r0, r1
   36142:	b510      	push	{r4, lr}
   36144:	eb01 0402 	add.w	r4, r1, r2
   36148:	d902      	bls.n	36150 <memmove+0x10>
   3614a:	4284      	cmp	r4, r0
   3614c:	4623      	mov	r3, r4
   3614e:	d807      	bhi.n	36160 <memmove+0x20>
   36150:	1e43      	subs	r3, r0, #1
   36152:	42a1      	cmp	r1, r4
   36154:	d008      	beq.n	36168 <memmove+0x28>
   36156:	f811 2b01 	ldrb.w	r2, [r1], #1
   3615a:	f803 2f01 	strb.w	r2, [r3, #1]!
   3615e:	e7f8      	b.n	36152 <memmove+0x12>
   36160:	4402      	add	r2, r0
   36162:	4601      	mov	r1, r0
   36164:	428a      	cmp	r2, r1
   36166:	d100      	bne.n	3616a <memmove+0x2a>
   36168:	bd10      	pop	{r4, pc}
   3616a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3616e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   36172:	e7f7      	b.n	36164 <memmove+0x24>

00036174 <_malloc_usable_size_r>:
   36174:	f851 3c04 	ldr.w	r3, [r1, #-4]
   36178:	1f18      	subs	r0, r3, #4
   3617a:	2b00      	cmp	r3, #0
   3617c:	bfbc      	itt	lt
   3617e:	580b      	ldrlt	r3, [r1, r0]
   36180:	18c0      	addlt	r0, r0, r3
   36182:	4770      	bx	lr
