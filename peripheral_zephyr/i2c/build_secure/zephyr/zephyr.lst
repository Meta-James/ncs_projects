
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20004e18 	.word	0x20004e18
}
   4:	00002d5d 	.word	0x00002d5d
   8:	000079c5 	.word	0x000079c5
   c:	00002dbd 	.word	0x00002dbd
  10:	00002dbd 	.word	0x00002dbd
  14:	00002dbd 	.word	0x00002dbd
  18:	00002dbd 	.word	0x00002dbd
  1c:	00002dbd 	.word	0x00002dbd
	...
  2c:	00002b11 	.word	0x00002b11
  30:	00002dbd 	.word	0x00002dbd
  34:	00000000 	.word	0x00000000
  38:	00002ab9 	.word	0x00002ab9
  3c:	0000262d 	.word	0x0000262d

00000040 <_irq_vector_table>:
  40:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  50:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  60:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  70:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  80:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  90:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  a0:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  b0:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  c0:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  d0:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  e0:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
  f0:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
 100:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
 110:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
 120:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
 130:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
 140:	00002d1d 00002d1d 00002d1d 00002d1d     .-...-...-...-..
 150:	00002d1d                                .-..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b970 	b.w	44c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     188:	9e08      	ldr	r6, [sp, #32]
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	468a      	mov	sl, r1
     190:	2b00      	cmp	r3, #0
     192:	d17f      	bne.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     194:	428a      	cmp	r2, r1
     196:	4617      	mov	r7, r2
     198:	d941      	bls.n	21e <CONFIG_SRAM_SIZE+0x5e>
     19a:	fab2 f282 	clz	r2, r2
     19e:	b14a      	cbz	r2, 1b4 <__udivmoddi4+0x30>
     1a0:	f1c2 0120 	rsb	r1, r2, #32
     1a4:	fa05 f302 	lsl.w	r3, r5, r2
     1a8:	4097      	lsls	r7, r2
     1aa:	4094      	lsls	r4, r2
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	ea41 0a03 	orr.w	sl, r1, r3
     1b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1b8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1bc:	fa1f f987 	uxth.w	r9, r7
     1c0:	fbba fef8 	udiv	lr, sl, r8
     1c4:	fb08 a31e 	mls	r3, r8, lr, sl
     1c8:	fb0e f109 	mul.w	r1, lr, r9
     1cc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1d0:	4299      	cmp	r1, r3
     1d2:	d906      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	d202      	bcs.n	1de <CONFIG_SRAM_SIZE+0x1e>
     1d8:	4299      	cmp	r1, r3
     1da:	f200 8124 	bhi.w	426 <CONFIG_FLASH_SIZE+0x26>
     1de:	f10e 3eff 	add.w	lr, lr, #4294967295
     1e2:	1a59      	subs	r1, r3, r1
     1e4:	b2a3      	uxth	r3, r4
     1e6:	fbb1 f0f8 	udiv	r0, r1, r8
     1ea:	fb08 1110 	mls	r1, r8, r0, r1
     1ee:	fb00 f909 	mul.w	r9, r0, r9
     1f2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1f6:	45a1      	cmp	r9, r4
     1f8:	d905      	bls.n	206 <CONFIG_SRAM_SIZE+0x46>
     1fa:	193c      	adds	r4, r7, r4
     1fc:	d202      	bcs.n	204 <CONFIG_SRAM_SIZE+0x44>
     1fe:	45a1      	cmp	r9, r4
     200:	f200 810e 	bhi.w	420 <CONFIG_FLASH_SIZE+0x20>
     204:	3801      	subs	r0, #1
     206:	eba4 0409 	sub.w	r4, r4, r9
     20a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     20e:	2100      	movs	r1, #0
     210:	b11e      	cbz	r6, 21a <CONFIG_SRAM_SIZE+0x5a>
     212:	40d4      	lsrs	r4, r2
     214:	2300      	movs	r3, #0
     216:	e9c6 4300 	strd	r4, r3, [r6]
     21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21e:	b902      	cbnz	r2, 222 <CONFIG_SRAM_SIZE+0x62>
     220:	deff      	udf	#255	; 0xff
     222:	fab2 f282 	clz	r2, r2
     226:	2a00      	cmp	r2, #0
     228:	d14f      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     22a:	1bcb      	subs	r3, r1, r7
     22c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     230:	fa1f f887 	uxth.w	r8, r7
     234:	2101      	movs	r1, #1
     236:	0c25      	lsrs	r5, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 301c 	mls	r0, lr, ip, r3
     240:	462b      	mov	r3, r5
     242:	fb08 f90c 	mul.w	r9, r8, ip
     246:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     24a:	45a9      	cmp	r9, r5
     24c:	d90a      	bls.n	264 <CONFIG_SRAM_SIZE+0xa4>
     24e:	197d      	adds	r5, r7, r5
     250:	bf2c      	ite	cs
     252:	2301      	movcs	r3, #1
     254:	2300      	movcc	r3, #0
     256:	45a9      	cmp	r9, r5
     258:	d902      	bls.n	260 <CONFIG_SRAM_SIZE+0xa0>
     25a:	2b00      	cmp	r3, #0
     25c:	f000 80d9 	beq.w	412 <CONFIG_FLASH_SIZE+0x12>
     260:	f10c 3cff 	add.w	ip, ip, #4294967295
     264:	eba5 0509 	sub.w	r5, r5, r9
     268:	b2a3      	uxth	r3, r4
     26a:	fbb5 f0fe 	udiv	r0, r5, lr
     26e:	fb0e 5510 	mls	r5, lr, r0, r5
     272:	fb08 f800 	mul.w	r8, r8, r0
     276:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     27a:	45a0      	cmp	r8, r4
     27c:	d905      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     27e:	193c      	adds	r4, r7, r4
     280:	d202      	bcs.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     282:	45a0      	cmp	r8, r4
     284:	f200 80c9 	bhi.w	41a <CONFIG_FLASH_SIZE+0x1a>
     288:	3801      	subs	r0, #1
     28a:	eba4 0408 	sub.w	r4, r4, r8
     28e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     292:	e7bd      	b.n	210 <CONFIG_SRAM_SIZE+0x50>
     294:	428b      	cmp	r3, r1
     296:	d908      	bls.n	2aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2a>
     298:	2e00      	cmp	r6, #0
     29a:	f000 80b1 	beq.w	400 <CONFIG_FLASH_SIZE>
     29e:	2100      	movs	r1, #0
     2a0:	e9c6 0500 	strd	r0, r5, [r6]
     2a4:	4608      	mov	r0, r1
     2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2aa:	fab3 f183 	clz	r1, r3
     2ae:	2900      	cmp	r1, #0
     2b0:	d146      	bne.n	340 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x40>
     2b2:	42ab      	cmp	r3, r5
     2b4:	f0c0 80a7 	bcc.w	406 <CONFIG_FLASH_SIZE+0x6>
     2b8:	4282      	cmp	r2, r0
     2ba:	f240 80a4 	bls.w	406 <CONFIG_FLASH_SIZE+0x6>
     2be:	4608      	mov	r0, r1
     2c0:	2e00      	cmp	r6, #0
     2c2:	d0aa      	beq.n	21a <CONFIG_SRAM_SIZE+0x5a>
     2c4:	e9c6 4a00 	strd	r4, sl, [r6]
     2c8:	e7a7      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     2ca:	f1c2 0020 	rsb	r0, r2, #32
     2ce:	4097      	lsls	r7, r2
     2d0:	fa01 f302 	lsl.w	r3, r1, r2
     2d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2d8:	40c1      	lsrs	r1, r0
     2da:	fa24 f500 	lsr.w	r5, r4, r0
     2de:	fa1f f887 	uxth.w	r8, r7
     2e2:	4094      	lsls	r4, r2
     2e4:	431d      	orrs	r5, r3
     2e6:	fbb1 f0fe 	udiv	r0, r1, lr
     2ea:	0c2b      	lsrs	r3, r5, #16
     2ec:	fb0e 1110 	mls	r1, lr, r0, r1
     2f0:	fb00 fc08 	mul.w	ip, r0, r8
     2f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f8:	459c      	cmp	ip, r3
     2fa:	d909      	bls.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	bf2c      	ite	cs
     300:	2101      	movcs	r1, #1
     302:	2100      	movcc	r1, #0
     304:	459c      	cmp	ip, r3
     306:	d902      	bls.n	30e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe>
     308:	2900      	cmp	r1, #0
     30a:	f000 8095 	beq.w	438 <CONFIG_FLASH_SIZE+0x38>
     30e:	3801      	subs	r0, #1
     310:	eba3 030c 	sub.w	r3, r3, ip
     314:	b2ad      	uxth	r5, r5
     316:	fbb3 f1fe 	udiv	r1, r3, lr
     31a:	fb0e 3311 	mls	r3, lr, r1, r3
     31e:	fb01 fc08 	mul.w	ip, r1, r8
     322:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     326:	45ac      	cmp	ip, r5
     328:	d905      	bls.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>
     32a:	197d      	adds	r5, r7, r5
     32c:	d202      	bcs.n	334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     32e:	45ac      	cmp	ip, r5
     330:	f200 8089 	bhi.w	446 <CONFIG_FLASH_SIZE+0x46>
     334:	3901      	subs	r1, #1
     336:	eba5 030c 	sub.w	r3, r5, ip
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     33e:	e77a      	b.n	236 <CONFIG_SRAM_SIZE+0x76>
     340:	f1c1 0420 	rsb	r4, r1, #32
     344:	408b      	lsls	r3, r1
     346:	fa02 f701 	lsl.w	r7, r2, r1
     34a:	fa05 fc01 	lsl.w	ip, r5, r1
     34e:	40e2      	lsrs	r2, r4
     350:	fa20 f804 	lsr.w	r8, r0, r4
     354:	40e5      	lsrs	r5, r4
     356:	fa00 fe01 	lsl.w	lr, r0, r1
     35a:	4313      	orrs	r3, r2
     35c:	ea48 020c 	orr.w	r2, r8, ip
     360:	ea4f 4813 	mov.w	r8, r3, lsr #16
     364:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     368:	fa1f f983 	uxth.w	r9, r3
     36c:	fbb5 faf8 	udiv	sl, r5, r8
     370:	fb08 551a 	mls	r5, r8, sl, r5
     374:	fb0a f009 	mul.w	r0, sl, r9
     378:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     37c:	4560      	cmp	r0, ip
     37e:	d90a      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     380:	eb13 0c0c 	adds.w	ip, r3, ip
     384:	bf2c      	ite	cs
     386:	2501      	movcs	r5, #1
     388:	2500      	movcc	r5, #0
     38a:	4560      	cmp	r0, ip
     38c:	d901      	bls.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     38e:	2d00      	cmp	r5, #0
     390:	d055      	beq.n	43e <CONFIG_FLASH_SIZE+0x3e>
     392:	f10a 3aff 	add.w	sl, sl, #4294967295
     396:	ebac 0c00 	sub.w	ip, ip, r0
     39a:	b292      	uxth	r2, r2
     39c:	fbbc f0f8 	udiv	r0, ip, r8
     3a0:	fb08 cc10 	mls	ip, r8, r0, ip
     3a4:	fb00 f909 	mul.w	r9, r0, r9
     3a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     3ac:	45e1      	cmp	r9, ip
     3ae:	d905      	bls.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     3b0:	eb13 0c0c 	adds.w	ip, r3, ip
     3b4:	d201      	bcs.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     3b6:	45e1      	cmp	r9, ip
     3b8:	d83b      	bhi.n	432 <CONFIG_FLASH_SIZE+0x32>
     3ba:	3801      	subs	r0, #1
     3bc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3c0:	ebac 0c09 	sub.w	ip, ip, r9
     3c4:	fba0 8907 	umull	r8, r9, r0, r7
     3c8:	45cc      	cmp	ip, r9
     3ca:	4645      	mov	r5, r8
     3cc:	464a      	mov	r2, r9
     3ce:	d302      	bcc.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3d0:	d106      	bne.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3d2:	45c6      	cmp	lr, r8
     3d4:	d204      	bcs.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3d6:	3801      	subs	r0, #1
     3d8:	ebb8 0507 	subs.w	r5, r8, r7
     3dc:	eb69 0203 	sbc.w	r2, r9, r3
     3e0:	b32e      	cbz	r6, 42e <CONFIG_FLASH_SIZE+0x2e>
     3e2:	ebbe 0305 	subs.w	r3, lr, r5
     3e6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3ea:	fa23 f201 	lsr.w	r2, r3, r1
     3ee:	fa0c f404 	lsl.w	r4, ip, r4
     3f2:	fa2c f301 	lsr.w	r3, ip, r1
     3f6:	2100      	movs	r1, #0
     3f8:	4314      	orrs	r4, r2
     3fa:	e9c6 4300 	strd	r4, r3, [r6]
     3fe:	e70c      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     400:	4631      	mov	r1, r6
     402:	4630      	mov	r0, r6
     404:	e709      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     406:	1a84      	subs	r4, r0, r2
     408:	eb65 0303 	sbc.w	r3, r5, r3
     40c:	2001      	movs	r0, #1
     40e:	469a      	mov	sl, r3
     410:	e756      	b.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     412:	f1ac 0c02 	sub.w	ip, ip, #2
     416:	443d      	add	r5, r7
     418:	e724      	b.n	264 <CONFIG_SRAM_SIZE+0xa4>
     41a:	3802      	subs	r0, #2
     41c:	443c      	add	r4, r7
     41e:	e734      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     420:	3802      	subs	r0, #2
     422:	443c      	add	r4, r7
     424:	e6ef      	b.n	206 <CONFIG_SRAM_SIZE+0x46>
     426:	f1ae 0e02 	sub.w	lr, lr, #2
     42a:	443b      	add	r3, r7
     42c:	e6d9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     42e:	4631      	mov	r1, r6
     430:	e6f3      	b.n	21a <CONFIG_SRAM_SIZE+0x5a>
     432:	3802      	subs	r0, #2
     434:	449c      	add	ip, r3
     436:	e7c1      	b.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     438:	3802      	subs	r0, #2
     43a:	443b      	add	r3, r7
     43c:	e768      	b.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     43e:	f1aa 0a02 	sub.w	sl, sl, #2
     442:	449c      	add	ip, r3
     444:	e7a7      	b.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     446:	3902      	subs	r1, #2
     448:	443d      	add	r5, r7
     44a:	e774      	b.n	336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>

0000044c <__aeabi_idiv0>:
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <main>:
#include <device.h>

#define TEST_BUF_SIZE 128

void main(void)
{
     450:	b530      	push	{r4, r5, lr}
	printk("The I2C scanner started\n");
     452:	481e      	ldr	r0, [pc, #120]	; (4cc <main+0x7c>)
{
     454:	b0a5      	sub	sp, #148	; 0x94
	printk("The I2C scanner started\n");
     456:	f006 febf 	bl	71d8 <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     45a:	481d      	ldr	r0, [pc, #116]	; (4d0 <main+0x80>)
     45c:	f004 f992 	bl	4784 <z_impl_device_get_binding>
    const struct device *i2c_dev;
	int error;

    i2c_dev = device_get_binding("I2C_3");
    if (!i2c_dev) {
     460:	4604      	mov	r4, r0
     462:	b920      	cbnz	r0, 46e <main+0x1e>
        printk("Binding failed.");
     464:	481b      	ldr	r0, [pc, #108]	; (4d4 <main+0x84>)
     466:	f006 feb7 	bl	71d8 <printk>
	// 	else {
	// 		//printk("error %d \n", error);
	// 	}
		
	// }
}
     46a:	b025      	add	sp, #148	; 0x94
     46c:	bd30      	pop	{r4, r5, pc}
				       uint32_t dev_config)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	return api->configure(dev, dev_config);
     46e:	6883      	ldr	r3, [r0, #8]
    printk("Value of NRF_TWIM2->PSEL.SCL : %d \n",NRF_TWIM3->PSEL.SCL);
     470:	4d19      	ldr	r5, [pc, #100]	; (4d8 <main+0x88>)
     472:	681b      	ldr	r3, [r3, #0]
     474:	2102      	movs	r1, #2
     476:	4798      	blx	r3
     478:	f8d5 1508 	ldr.w	r1, [r5, #1288]	; 0x508
     47c:	4817      	ldr	r0, [pc, #92]	; (4dc <main+0x8c>)
     47e:	f006 feab 	bl	71d8 <printk>
	printk("Value of NRF_TWIM2->PSEL.SDA : %d \n",NRF_TWIM3->PSEL.SDA);
     482:	f8d5 150c 	ldr.w	r1, [r5, #1292]	; 0x50c
     486:	4816      	ldr	r0, [pc, #88]	; (4e0 <main+0x90>)
     488:	f006 fea6 	bl	71d8 <printk>
	printk("Value of NRF_TWIM2->FREQUENCY: %d \n",NRF_TWIM3->FREQUENCY);
     48c:	f8d5 1524 	ldr.w	r1, [r5, #1316]	; 0x524
     490:	4814      	ldr	r0, [pc, #80]	; (4e4 <main+0x94>)
     492:	f006 fea1 	bl	71d8 <printk>
	memset(testbuf, 0, TEST_BUF_SIZE);
     496:	ad04      	add	r5, sp, #16
	printk("26738688 -> 100k\n");
     498:	4813      	ldr	r0, [pc, #76]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     49a:	f006 fe9d 	bl	71d8 <printk>
	memset(testbuf, 0, TEST_BUF_SIZE);
     49e:	2280      	movs	r2, #128	; 0x80
     4a0:	2100      	movs	r1, #0
     4a2:	4628      	mov	r0, r5
     4a4:	f007 fb11 	bl	7aca <memset>
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
     4a8:	237f      	movs	r3, #127	; 0x7f
     4aa:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     4ac:	2302      	movs	r3, #2
	msg.buf = (uint8_t *)buf;
     4ae:	9501      	str	r5, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     4b0:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
     4b4:	68a3      	ldr	r3, [r4, #8]
     4b6:	a901      	add	r1, sp, #4
     4b8:	685d      	ldr	r5, [r3, #4]
     4ba:	2201      	movs	r2, #1
     4bc:	2376      	movs	r3, #118	; 0x76
     4be:	4620      	mov	r0, r4
     4c0:	47a8      	blx	r5
     4c2:	4601      	mov	r1, r0
	printk("Error: %d",error);
     4c4:	4809      	ldr	r0, [pc, #36]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4c6:	f006 fe87 	bl	71d8 <printk>
     4ca:	e7ce      	b.n	46a <main+0x1a>
     4cc:	000083bc 	.word	0x000083bc
     4d0:	000083d5 	.word	0x000083d5
     4d4:	000083db 	.word	0x000083db
     4d8:	5000c000 	.word	0x5000c000
     4dc:	000083eb 	.word	0x000083eb
     4e0:	0000840f 	.word	0x0000840f
     4e4:	00008433 	.word	0x00008433
     4e8:	00008457 	.word	0x00008457
     4ec:	00008469 	.word	0x00008469

000004f0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     4f0:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     4f2:	6844      	ldr	r4, [r0, #4]
     4f4:	4605      	mov	r5, r0

	return method & SYS_NOTIFY_METHOD_MASK;
     4f6:	f004 0403 	and.w	r4, r4, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
     4fa:	2c03      	cmp	r4, #3
	notify->result = res;
     4fc:	6081      	str	r1, [r0, #8]
	switch (method) {
     4fe:	d002      	beq.n	506 <sys_notify_finalize+0x16>
     500:	b12c      	cbz	r4, 50e <sys_notify_finalize+0x1e>
     502:	2000      	movs	r0, #0
     504:	e000      	b.n	508 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     506:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     508:	2300      	movs	r3, #0
     50a:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     50c:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     50e:	2345      	movs	r3, #69	; 0x45
     510:	4a04      	ldr	r2, [pc, #16]	; (524 <sys_notify_finalize+0x34>)
     512:	4905      	ldr	r1, [pc, #20]	; (528 <sys_notify_finalize+0x38>)
     514:	4805      	ldr	r0, [pc, #20]	; (52c <sys_notify_finalize+0x3c>)
     516:	f006 fe5f 	bl	71d8 <printk>
     51a:	2145      	movs	r1, #69	; 0x45
     51c:	4801      	ldr	r0, [pc, #4]	; (524 <sys_notify_finalize+0x34>)
     51e:	f006 ff34 	bl	738a <assert_post_action>
     522:	e7ee      	b.n	502 <sys_notify_finalize+0x12>
     524:	00008473 	.word	0x00008473
     528:	0000853e 	.word	0x0000853e
     52c:	00008496 	.word	0x00008496

00000530 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     530:	680b      	ldr	r3, [r1, #0]
     532:	3301      	adds	r3, #1
     534:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     536:	4b01      	ldr	r3, [pc, #4]	; (53c <char_out+0xc>)
     538:	681b      	ldr	r3, [r3, #0]
     53a:	4718      	bx	r3
     53c:	20000000 	.word	0x20000000

00000540 <__printk_hook_install>:
	_char_out = fn;
     540:	4b01      	ldr	r3, [pc, #4]	; (548 <__printk_hook_install+0x8>)
     542:	6018      	str	r0, [r3, #0]
}
     544:	4770      	bx	lr
     546:	bf00      	nop
     548:	20000000 	.word	0x20000000

0000054c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     54c:	b507      	push	{r0, r1, r2, lr}
     54e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     550:	2100      	movs	r1, #0
{
     552:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     554:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     556:	4803      	ldr	r0, [pc, #12]	; (564 <vprintk+0x18>)
     558:	a901      	add	r1, sp, #4
     55a:	f000 fadd 	bl	b18 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     55e:	b003      	add	sp, #12
     560:	f85d fb04 	ldr.w	pc, [sp], #4
     564:	00000531 	.word	0x00000531

00000568 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     568:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     56a:	2500      	movs	r5, #0
{
     56c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     56e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     572:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
     574:	a901      	add	r1, sp, #4
     576:	4805      	ldr	r0, [pc, #20]	; (58c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     578:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     57a:	f000 facd 	bl	b18 <cbvprintf>

	if (ctx.count < ctx.max) {
     57e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     582:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     584:	bfb8      	it	lt
     586:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     588:	b005      	add	sp, #20
     58a:	bd30      	pop	{r4, r5, pc}
     58c:	000071b3 	.word	0x000071b3

00000590 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     594:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     598:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     59a:	f019 0f08 	tst.w	r9, #8
{
     59e:	4604      	mov	r4, r0
     5a0:	9203      	str	r2, [sp, #12]
	if (processing) {
     5a2:	d022      	beq.n	5ea <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
     5a4:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5a6:	bf0c      	ite	eq
     5a8:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5ac:	f049 0920 	orrne.w	r9, r9, #32
     5b0:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     5b4:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     5b6:	4620      	mov	r0, r4
     5b8:	f004 fca4 	bl	4f04 <z_spin_unlock_valid>
     5bc:	b968      	cbnz	r0, 5da <process_event+0x4a>
     5be:	23ac      	movs	r3, #172	; 0xac
     5c0:	4a9e      	ldr	r2, [pc, #632]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     5c2:	499f      	ldr	r1, [pc, #636]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     5c4:	489f      	ldr	r0, [pc, #636]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     5c6:	f006 fe07 	bl	71d8 <printk>
     5ca:	4621      	mov	r1, r4
     5cc:	489e      	ldr	r0, [pc, #632]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     5ce:	f006 fe03 	bl	71d8 <printk>
     5d2:	21ac      	movs	r1, #172	; 0xac
     5d4:	4899      	ldr	r0, [pc, #612]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     5d6:	f006 fed8 	bl	738a <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5da:	9b03      	ldr	r3, [sp, #12]
     5dc:	f383 8811 	msr	BASEPRI, r3
     5e0:	f3bf 8f6f 	isb	sy
}
     5e4:	b005      	add	sp, #20
     5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     5ea:	4f98      	ldr	r7, [pc, #608]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     5ec:	f8df 8254 	ldr.w	r8, [pc, #596]	; 844 <CONFIG_ISR_STACK_SIZE+0x44>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5f0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     5f4:	2902      	cmp	r1, #2
     5f6:	d106      	bne.n	606 <process_event+0x76>
			evt = process_recheck(mgr);
     5f8:	4620      	mov	r0, r4
     5fa:	f006 fe07 	bl	720c <process_recheck>
		if (evt == EVT_NOP) {
     5fe:	2800      	cmp	r0, #0
     600:	d0d8      	beq.n	5b4 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
     602:	2801      	cmp	r0, #1
     604:	d168      	bne.n	6d8 <process_event+0x148>
			res = mgr->last_res;
     606:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     60a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     60c:	f1bb 0f00 	cmp.w	fp, #0
     610:	da0a      	bge.n	628 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     612:	2600      	movs	r6, #0
		*clients = mgr->clients;
     614:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     616:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     61a:	e9c4 6600 	strd	r6, r6, [r4]
     61e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     622:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     624:	9601      	str	r6, [sp, #4]
     626:	e027      	b.n	678 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     628:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     62c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     62e:	2901      	cmp	r1, #1
     630:	d834      	bhi.n	69c <process_event+0x10c>
	list->head = NULL;
     632:	2100      	movs	r1, #0
     634:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     638:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     63a:	6825      	ldr	r5, [r4, #0]
     63c:	b29b      	uxth	r3, r3
	list->tail = NULL;
     63e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     642:	d10c      	bne.n	65e <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     644:	428d      	cmp	r5, r1
     646:	462a      	mov	r2, r5
     648:	bf38      	it	cc
     64a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     64c:	b12a      	cbz	r2, 65a <process_event+0xca>
				mgr->refs += 1U;
     64e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     650:	6812      	ldr	r2, [r2, #0]
     652:	3101      	adds	r1, #1
     654:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     656:	2a00      	cmp	r2, #0
     658:	d1f8      	bne.n	64c <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     65a:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
     65e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     660:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     662:	f006 fdd3 	bl	720c <process_recheck>
     666:	4606      	mov	r6, r0
     668:	2800      	cmp	r0, #0
     66a:	d0db      	beq.n	624 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     66c:	8ba3      	ldrh	r3, [r4, #28]
     66e:	f043 0320 	orr.w	r3, r3, #32
     672:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     674:	2300      	movs	r3, #0
     676:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     678:	8ba3      	ldrh	r3, [r4, #28]
     67a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     67e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     680:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
     682:	d003      	beq.n	68c <process_event+0xfc>
		if (do_monitors
     684:	68a2      	ldr	r2, [r4, #8]
     686:	2a00      	cmp	r2, #0
     688:	f040 80f0 	bne.w	86c <CONFIG_ISR_STACK_SIZE+0x6c>
		    || !sys_slist_is_empty(&clients)
     68c:	b91d      	cbnz	r5, 696 <process_event+0x106>
		    || (transit != NULL)) {
     68e:	9a01      	ldr	r2, [sp, #4]
     690:	2a00      	cmp	r2, #0
     692:	f000 8136 	beq.w	902 <CONFIG_ISR_STACK_SIZE+0x102>
     696:	f04f 0900 	mov.w	r9, #0
     69a:	e0e9      	b.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
	} else if (state == ONOFF_STATE_TO_OFF) {
     69c:	2a04      	cmp	r2, #4
     69e:	d10e      	bne.n	6be <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a0:	f023 0307 	bic.w	r3, r3, #7
     6a4:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
     6a6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6a8:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     6aa:	f006 fdaf 	bl	720c <process_recheck>
     6ae:	4605      	mov	r5, r0
     6b0:	b118      	cbz	r0, 6ba <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6b2:	f042 0220 	orr.w	r2, r2, #32
     6b6:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
     6b8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     6ba:	9501      	str	r5, [sp, #4]
     6bc:	e7dc      	b.n	678 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
     6be:	4640      	mov	r0, r8
     6c0:	f240 131b 	movw	r3, #283	; 0x11b
     6c4:	463a      	mov	r2, r7
     6c6:	4962      	ldr	r1, [pc, #392]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     6c8:	f006 fd86 	bl	71d8 <printk>
     6cc:	f240 111b 	movw	r1, #283	; 0x11b
     6d0:	4638      	mov	r0, r7
     6d2:	f006 fe5a 	bl	738a <assert_post_action>
     6d6:	e7ef      	b.n	6b8 <process_event+0x128>
		} else if (evt == EVT_START) {
     6d8:	2803      	cmp	r0, #3
     6da:	d135      	bne.n	748 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     6dc:	f1b9 0f00 	cmp.w	r9, #0
     6e0:	d00b      	beq.n	6fa <process_event+0x16a>
     6e2:	4640      	mov	r0, r8
     6e4:	495b      	ldr	r1, [pc, #364]	; (854 <CONFIG_ISR_STACK_SIZE+0x54>)
     6e6:	f44f 73ab 	mov.w	r3, #342	; 0x156
     6ea:	463a      	mov	r2, r7
     6ec:	f006 fd74 	bl	71d8 <printk>
     6f0:	f44f 71ab 	mov.w	r1, #342	; 0x156
     6f4:	4638      	mov	r0, r7
     6f6:	f006 fe48 	bl	738a <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     6fa:	6823      	ldr	r3, [r4, #0]
     6fc:	b95b      	cbnz	r3, 716 <process_event+0x186>
     6fe:	4640      	mov	r0, r8
     700:	4955      	ldr	r1, [pc, #340]	; (858 <CONFIG_ISR_STACK_SIZE+0x58>)
     702:	f240 1357 	movw	r3, #343	; 0x157
     706:	463a      	mov	r2, r7
     708:	f006 fd66 	bl	71d8 <printk>
     70c:	f240 1157 	movw	r1, #343	; 0x157
     710:	4638      	mov	r0, r7
     712:	f006 fe3a 	bl	738a <assert_post_action>
			transit = mgr->transitions->start;
     716:	6923      	ldr	r3, [r4, #16]
     718:	681b      	ldr	r3, [r3, #0]
     71a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
     71c:	b95b      	cbnz	r3, 736 <process_event+0x1a6>
     71e:	4640      	mov	r0, r8
     720:	494e      	ldr	r1, [pc, #312]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
     722:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     726:	463a      	mov	r2, r7
     728:	f006 fd56 	bl	71d8 <printk>
     72c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     730:	4638      	mov	r0, r7
     732:	f006 fe2a 	bl	738a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     736:	8ba3      	ldrh	r3, [r4, #28]
     738:	f023 0307 	bic.w	r3, r3, #7
     73c:	f043 0306 	orr.w	r3, r3, #6
}
     740:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     742:	83a3      	strh	r3, [r4, #28]
		res = 0;
     744:	46ab      	mov	fp, r5
}
     746:	e797      	b.n	678 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
     748:	2804      	cmp	r0, #4
     74a:	d132      	bne.n	7b2 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     74c:	f1b9 0f02 	cmp.w	r9, #2
     750:	d00b      	beq.n	76a <process_event+0x1da>
     752:	4640      	mov	r0, r8
     754:	4942      	ldr	r1, [pc, #264]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
     756:	f240 135d 	movw	r3, #349	; 0x15d
     75a:	463a      	mov	r2, r7
     75c:	f006 fd3c 	bl	71d8 <printk>
     760:	f240 115d 	movw	r1, #349	; 0x15d
     764:	4638      	mov	r0, r7
     766:	f006 fe10 	bl	738a <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     76a:	8be3      	ldrh	r3, [r4, #30]
     76c:	b15b      	cbz	r3, 786 <process_event+0x1f6>
     76e:	4640      	mov	r0, r8
     770:	493c      	ldr	r1, [pc, #240]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     772:	f44f 73af 	mov.w	r3, #350	; 0x15e
     776:	463a      	mov	r2, r7
     778:	f006 fd2e 	bl	71d8 <printk>
     77c:	f44f 71af 	mov.w	r1, #350	; 0x15e
     780:	4638      	mov	r0, r7
     782:	f006 fe02 	bl	738a <assert_post_action>
			transit = mgr->transitions->stop;
     786:	6923      	ldr	r3, [r4, #16]
     788:	685b      	ldr	r3, [r3, #4]
     78a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
     78c:	b95b      	cbnz	r3, 7a6 <process_event+0x216>
     78e:	4640      	mov	r0, r8
     790:	4932      	ldr	r1, [pc, #200]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
     792:	f240 1361 	movw	r3, #353	; 0x161
     796:	463a      	mov	r2, r7
     798:	f006 fd1e 	bl	71d8 <printk>
     79c:	f240 1161 	movw	r1, #353	; 0x161
     7a0:	4638      	mov	r0, r7
     7a2:	f006 fdf2 	bl	738a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7a6:	8ba3      	ldrh	r3, [r4, #28]
     7a8:	f023 0307 	bic.w	r3, r3, #7
     7ac:	f043 0304 	orr.w	r3, r3, #4
     7b0:	e7c6      	b.n	740 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
     7b2:	2805      	cmp	r0, #5
     7b4:	d132      	bne.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     7b6:	f1b9 0f01 	cmp.w	r9, #1
     7ba:	d00b      	beq.n	7d4 <process_event+0x244>
     7bc:	4640      	mov	r0, r8
     7be:	492a      	ldr	r1, [pc, #168]	; (868 <CONFIG_ISR_STACK_SIZE+0x68>)
     7c0:	f44f 73b2 	mov.w	r3, #356	; 0x164
     7c4:	463a      	mov	r2, r7
     7c6:	f006 fd07 	bl	71d8 <printk>
     7ca:	f44f 71b2 	mov.w	r1, #356	; 0x164
     7ce:	4638      	mov	r0, r7
     7d0:	f006 fddb 	bl	738a <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     7d4:	6823      	ldr	r3, [r4, #0]
     7d6:	b95b      	cbnz	r3, 7f0 <process_event+0x260>
     7d8:	4640      	mov	r0, r8
     7da:	491f      	ldr	r1, [pc, #124]	; (858 <CONFIG_ISR_STACK_SIZE+0x58>)
     7dc:	f240 1365 	movw	r3, #357	; 0x165
     7e0:	463a      	mov	r2, r7
     7e2:	f006 fcf9 	bl	71d8 <printk>
     7e6:	f240 1165 	movw	r1, #357	; 0x165
     7ea:	4638      	mov	r0, r7
     7ec:	f006 fdcd 	bl	738a <assert_post_action>
			transit = mgr->transitions->reset;
     7f0:	6923      	ldr	r3, [r4, #16]
     7f2:	689b      	ldr	r3, [r3, #8]
     7f4:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
     7f6:	b95b      	cbnz	r3, 810 <CONFIG_ISR_STACK_SIZE+0x10>
     7f8:	4640      	mov	r0, r8
     7fa:	4918      	ldr	r1, [pc, #96]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
     7fc:	f44f 73b4 	mov.w	r3, #360	; 0x168
     800:	463a      	mov	r2, r7
     802:	f006 fce9 	bl	71d8 <printk>
     806:	f44f 71b4 	mov.w	r1, #360	; 0x168
     80a:	4638      	mov	r0, r7
     80c:	f006 fdbd 	bl	738a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     810:	8ba3      	ldrh	r3, [r4, #28]
     812:	f023 0307 	bic.w	r3, r3, #7
     816:	f043 0305 	orr.w	r3, r3, #5
     81a:	e791      	b.n	740 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
     81c:	2500      	movs	r5, #0
     81e:	f240 136b 	movw	r3, #363	; 0x16b
     822:	463a      	mov	r2, r7
     824:	4640      	mov	r0, r8
     826:	490a      	ldr	r1, [pc, #40]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     828:	f006 fcd6 	bl	71d8 <printk>
     82c:	f240 116b 	movw	r1, #363	; 0x16b
     830:	4638      	mov	r0, r7
     832:	f006 fdaa 	bl	738a <assert_post_action>
		onoff_transition_fn transit = NULL;
     836:	9501      	str	r5, [sp, #4]
     838:	e784      	b.n	744 <process_event+0x1b4>
     83a:	bf00      	nop
     83c:	00008556 	.word	0x00008556
     840:	0000857c 	.word	0x0000857c
     844:	00008496 	.word	0x00008496
     848:	00008593 	.word	0x00008593
     84c:	000084b3 	.word	0x000084b3
     850:	0000853e 	.word	0x0000853e
     854:	000084d5 	.word	0x000084d5
     858:	000084e1 	.word	0x000084e1
     85c:	00008504 	.word	0x00008504
     860:	0000851b 	.word	0x0000851b
     864:	00008531 	.word	0x00008531
     868:	00008540 	.word	0x00008540
				   && !sys_slist_is_empty(&mgr->monitors);
     86c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     870:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
     874:	f104 0a14 	add.w	sl, r4, #20
     878:	4650      	mov	r0, sl
			mgr->flags = flags;
     87a:	83a3      	strh	r3, [r4, #28]
     87c:	f004 fb42 	bl	4f04 <z_spin_unlock_valid>
     880:	b968      	cbnz	r0, 89e <CONFIG_ISR_STACK_SIZE+0x9e>
     882:	23ac      	movs	r3, #172	; 0xac
     884:	4640      	mov	r0, r8
     886:	4a39      	ldr	r2, [pc, #228]	; (96c <CONFIG_ISR_STACK_SIZE+0x16c>)
     888:	4939      	ldr	r1, [pc, #228]	; (970 <CONFIG_ISR_STACK_SIZE+0x170>)
     88a:	f006 fca5 	bl	71d8 <printk>
     88e:	4651      	mov	r1, sl
     890:	4838      	ldr	r0, [pc, #224]	; (974 <CONFIG_ISR_STACK_SIZE+0x174>)
     892:	f006 fca1 	bl	71d8 <printk>
     896:	21ac      	movs	r1, #172	; 0xac
     898:	4834      	ldr	r0, [pc, #208]	; (96c <CONFIG_ISR_STACK_SIZE+0x16c>)
     89a:	f006 fd76 	bl	738a <assert_post_action>
     89e:	9b03      	ldr	r3, [sp, #12]
     8a0:	f383 8811 	msr	BASEPRI, r3
     8a4:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     8a8:	f1b9 0f00 	cmp.w	r9, #0
     8ac:	d138      	bne.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
	while (!sys_slist_is_empty(list)) {
     8ae:	2d00      	cmp	r5, #0
     8b0:	d14b      	bne.n	94a <CONFIG_ISR_STACK_SIZE+0x14a>
			if (transit != NULL) {
     8b2:	9b01      	ldr	r3, [sp, #4]
     8b4:	b113      	cbz	r3, 8bc <CONFIG_ISR_STACK_SIZE+0xbc>
				transit(mgr, transition_complete);
     8b6:	4620      	mov	r0, r4
     8b8:	492f      	ldr	r1, [pc, #188]	; (978 <CONFIG_ISR_STACK_SIZE+0x178>)
     8ba:	4798      	blx	r3
	__asm__ volatile(
     8bc:	f04f 0320 	mov.w	r3, #32
     8c0:	f3ef 8b11 	mrs	fp, BASEPRI
     8c4:	f383 8811 	msr	BASEPRI, r3
     8c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     8cc:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
     8ce:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     8d2:	f004 fb09 	bl	4ee8 <z_spin_lock_valid>
     8d6:	b968      	cbnz	r0, 8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8d8:	2381      	movs	r3, #129	; 0x81
     8da:	4640      	mov	r0, r8
     8dc:	4a23      	ldr	r2, [pc, #140]	; (96c <CONFIG_ISR_STACK_SIZE+0x16c>)
     8de:	4927      	ldr	r1, [pc, #156]	; (97c <CONFIG_ISR_STACK_SIZE+0x17c>)
     8e0:	f006 fc7a 	bl	71d8 <printk>
     8e4:	4651      	mov	r1, sl
     8e6:	4826      	ldr	r0, [pc, #152]	; (980 <CONFIG_ISR_STACK_SIZE+0x180>)
     8e8:	f006 fc76 	bl	71d8 <printk>
     8ec:	2181      	movs	r1, #129	; 0x81
     8ee:	481f      	ldr	r0, [pc, #124]	; (96c <CONFIG_ISR_STACK_SIZE+0x16c>)
     8f0:	f006 fd4b 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
     8f4:	4650      	mov	r0, sl
     8f6:	f004 fb13 	bl	4f20 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     8fa:	8ba3      	ldrh	r3, [r4, #28]
     8fc:	f023 0308 	bic.w	r3, r3, #8
     900:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     902:	8ba3      	ldrh	r3, [r4, #28]
     904:	06da      	lsls	r2, r3, #27
     906:	d528      	bpl.n	95a <CONFIG_ISR_STACK_SIZE+0x15a>
			evt = EVT_COMPLETE;
     908:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     90a:	f023 0310 	bic.w	r3, r3, #16
     90e:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
     910:	f8b4 901c 	ldrh.w	r9, [r4, #28]
     914:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     918:	2900      	cmp	r1, #0
     91a:	f47f ae6b 	bne.w	5f4 <process_event+0x64>
out:
     91e:	e649      	b.n	5b4 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     920:	68a1      	ldr	r1, [r4, #8]
     922:	2900      	cmp	r1, #0
     924:	d0c3      	beq.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
	return node->next;
     926:	680b      	ldr	r3, [r1, #0]
     928:	2b00      	cmp	r3, #0
     92a:	bf38      	it	cc
     92c:	2300      	movcc	r3, #0
     92e:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
     930:	684b      	ldr	r3, [r1, #4]
     932:	4620      	mov	r0, r4
     934:	461e      	mov	r6, r3
     936:	9a02      	ldr	r2, [sp, #8]
     938:	465b      	mov	r3, fp
     93a:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     93c:	f1b9 0f00 	cmp.w	r9, #0
     940:	d0b5      	beq.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     942:	4649      	mov	r1, r9
     944:	f8d9 3000 	ldr.w	r3, [r9]
     948:	e7ee      	b.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     94a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     94c:	465b      	mov	r3, fp
     94e:	4620      	mov	r0, r4
     950:	9a02      	ldr	r2, [sp, #8]
     952:	682d      	ldr	r5, [r5, #0]
     954:	f006 fc76 	bl	7244 <notify_one>
     958:	e7a9      	b.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     95a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     95e:	bf1e      	ittt	ne
     960:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     964:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     966:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     968:	e7d2      	b.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
     96a:	bf00      	nop
     96c:	00008556 	.word	0x00008556
     970:	0000857c 	.word	0x0000857c
     974:	00008593 	.word	0x00008593
     978:	00000985 	.word	0x00000985
     97c:	000085a8 	.word	0x000085a8
     980:	000085bd 	.word	0x000085bd

00000984 <transition_complete>:
{
     984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     986:	4604      	mov	r4, r0
     988:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     98a:	f100 0614 	add.w	r6, r0, #20
     98e:	f04f 0320 	mov.w	r3, #32
     992:	f3ef 8711 	mrs	r7, BASEPRI
     996:	f383 8811 	msr	BASEPRI, r3
     99a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     99e:	4630      	mov	r0, r6
     9a0:	f004 faa2 	bl	4ee8 <z_spin_lock_valid>
     9a4:	b968      	cbnz	r0, 9c2 <transition_complete+0x3e>
     9a6:	2381      	movs	r3, #129	; 0x81
     9a8:	4a0b      	ldr	r2, [pc, #44]	; (9d8 <transition_complete+0x54>)
     9aa:	490c      	ldr	r1, [pc, #48]	; (9dc <transition_complete+0x58>)
     9ac:	480c      	ldr	r0, [pc, #48]	; (9e0 <transition_complete+0x5c>)
     9ae:	f006 fc13 	bl	71d8 <printk>
     9b2:	4631      	mov	r1, r6
     9b4:	480b      	ldr	r0, [pc, #44]	; (9e4 <transition_complete+0x60>)
     9b6:	f006 fc0f 	bl	71d8 <printk>
     9ba:	2181      	movs	r1, #129	; 0x81
     9bc:	4806      	ldr	r0, [pc, #24]	; (9d8 <transition_complete+0x54>)
     9be:	f006 fce4 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
     9c2:	4630      	mov	r0, r6
     9c4:	f004 faac 	bl	4f20 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
     9c8:	463a      	mov	r2, r7
     9ca:	4620      	mov	r0, r4
	mgr->last_res = res;
     9cc:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     9ce:	2101      	movs	r1, #1
}
     9d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     9d4:	f7ff bddc 	b.w	590 <process_event>
     9d8:	00008556 	.word	0x00008556
     9dc:	000085a8 	.word	0x000085a8
     9e0:	00008496 	.word	0x00008496
     9e4:	000085bd 	.word	0x000085bd

000009e8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9ec:	4604      	mov	r4, r0
     9ee:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     9f0:	f006 fc3e 	bl	7270 <validate_args>

	if (rv < 0) {
     9f4:	1e05      	subs	r5, r0, #0
     9f6:	db5e      	blt.n	ab6 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     9f8:	f104 0914 	add.w	r9, r4, #20
     9fc:	f04f 0320 	mov.w	r3, #32
     a00:	f3ef 8a11 	mrs	sl, BASEPRI
     a04:	f383 8811 	msr	BASEPRI, r3
     a08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a0c:	4648      	mov	r0, r9
     a0e:	f004 fa6b 	bl	4ee8 <z_spin_lock_valid>
     a12:	b968      	cbnz	r0, a30 <onoff_request+0x48>
     a14:	2381      	movs	r3, #129	; 0x81
     a16:	4a38      	ldr	r2, [pc, #224]	; (af8 <onoff_request+0x110>)
     a18:	4938      	ldr	r1, [pc, #224]	; (afc <onoff_request+0x114>)
     a1a:	4839      	ldr	r0, [pc, #228]	; (b00 <onoff_request+0x118>)
     a1c:	f006 fbdc 	bl	71d8 <printk>
     a20:	4649      	mov	r1, r9
     a22:	4838      	ldr	r0, [pc, #224]	; (b04 <onoff_request+0x11c>)
     a24:	f006 fbd8 	bl	71d8 <printk>
     a28:	2181      	movs	r1, #129	; 0x81
     a2a:	4833      	ldr	r0, [pc, #204]	; (af8 <onoff_request+0x110>)
     a2c:	f006 fcad 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
     a30:	4648      	mov	r0, r9
     a32:	f004 fa75 	bl	4f20 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     a36:	f64f 71ff 	movw	r1, #65535	; 0xffff
     a3a:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     a3c:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
     a3e:	428b      	cmp	r3, r1
     a40:	f002 0607 	and.w	r6, r2, #7
     a44:	d050      	beq.n	ae8 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     a46:	2e02      	cmp	r6, #2
     a48:	d124      	bne.n	a94 <onoff_request+0xac>
	rv = state;
     a4a:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
     a4c:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
     a50:	3301      	adds	r3, #1
     a52:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     a54:	4648      	mov	r0, r9
     a56:	f004 fa55 	bl	4f04 <z_spin_unlock_valid>
     a5a:	b968      	cbnz	r0, a78 <onoff_request+0x90>
     a5c:	23ac      	movs	r3, #172	; 0xac
     a5e:	4a26      	ldr	r2, [pc, #152]	; (af8 <onoff_request+0x110>)
     a60:	4929      	ldr	r1, [pc, #164]	; (b08 <onoff_request+0x120>)
     a62:	4827      	ldr	r0, [pc, #156]	; (b00 <onoff_request+0x118>)
     a64:	f006 fbb8 	bl	71d8 <printk>
     a68:	4649      	mov	r1, r9
     a6a:	4828      	ldr	r0, [pc, #160]	; (b0c <onoff_request+0x124>)
     a6c:	f006 fbb4 	bl	71d8 <printk>
     a70:	21ac      	movs	r1, #172	; 0xac
     a72:	4821      	ldr	r0, [pc, #132]	; (af8 <onoff_request+0x110>)
     a74:	f006 fc89 	bl	738a <assert_post_action>
	__asm__ volatile(
     a78:	f38a 8811 	msr	BASEPRI, sl
     a7c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     a80:	f1b8 0f00 	cmp.w	r8, #0
     a84:	d017      	beq.n	ab6 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
     a86:	2300      	movs	r3, #0
     a88:	4632      	mov	r2, r6
     a8a:	4639      	mov	r1, r7
     a8c:	4620      	mov	r0, r4
     a8e:	f006 fbd9 	bl	7244 <notify_one>
     a92:	e010      	b.n	ab6 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
     a94:	0793      	lsls	r3, r2, #30
     a96:	d001      	beq.n	a9c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
     a98:	2e06      	cmp	r6, #6
     a9a:	d10f      	bne.n	abc <onoff_request+0xd4>
	parent->next = child;
     a9c:	2300      	movs	r3, #0
     a9e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
     aa0:	6863      	ldr	r3, [r4, #4]
     aa2:	b9f3      	cbnz	r3, ae2 <onoff_request+0xfa>
	list->head = node;
     aa4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     aa8:	4635      	mov	r5, r6
     aaa:	b9fe      	cbnz	r6, aec <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
     aac:	4652      	mov	r2, sl
     aae:	2102      	movs	r1, #2
     ab0:	4620      	mov	r0, r4
     ab2:	f7ff fd6d 	bl	590 <process_event>
		}
	}

	return rv;
}
     ab6:	4628      	mov	r0, r5
     ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
     abc:	2e05      	cmp	r6, #5
     abe:	d018      	beq.n	af2 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     ac0:	2e01      	cmp	r6, #1
     ac2:	d00b      	beq.n	adc <onoff_request+0xf4>
     ac4:	4912      	ldr	r1, [pc, #72]	; (b10 <onoff_request+0x128>)
     ac6:	480e      	ldr	r0, [pc, #56]	; (b00 <onoff_request+0x118>)
     ac8:	f240 13c9 	movw	r3, #457	; 0x1c9
     acc:	4a11      	ldr	r2, [pc, #68]	; (b14 <onoff_request+0x12c>)
     ace:	f006 fb83 	bl	71d8 <printk>
     ad2:	f240 11c9 	movw	r1, #457	; 0x1c9
     ad6:	480f      	ldr	r0, [pc, #60]	; (b14 <onoff_request+0x12c>)
     ad8:	f006 fc57 	bl	738a <assert_post_action>
		rv = -EIO;
     adc:	f06f 0504 	mvn.w	r5, #4
     ae0:	e004      	b.n	aec <onoff_request+0x104>
	parent->next = child;
     ae2:	601f      	str	r7, [r3, #0]
	list->tail = node;
     ae4:	6067      	str	r7, [r4, #4]
}
     ae6:	e7df      	b.n	aa8 <onoff_request+0xc0>
		rv = -EAGAIN;
     ae8:	f06f 050a 	mvn.w	r5, #10
     aec:	f04f 0800 	mov.w	r8, #0
     af0:	e7b0      	b.n	a54 <onoff_request+0x6c>
		rv = -ENOTSUP;
     af2:	f06f 0585 	mvn.w	r5, #133	; 0x85
     af6:	e7f9      	b.n	aec <onoff_request+0x104>
     af8:	00008556 	.word	0x00008556
     afc:	000085a8 	.word	0x000085a8
     b00:	00008496 	.word	0x00008496
     b04:	000085bd 	.word	0x000085bd
     b08:	0000857c 	.word	0x0000857c
     b0c:	00008593 	.word	0x00008593
     b10:	00008540 	.word	0x00008540
     b14:	000084b3 	.word	0x000084b3

00000b18 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b1c:	468b      	mov	fp, r1
     b1e:	4692      	mov	sl, r2
     b20:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     b22:	2500      	movs	r5, #0
{
     b24:	b091      	sub	sp, #68	; 0x44
     b26:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     b28:	f89a 0000 	ldrb.w	r0, [sl]
     b2c:	b908      	cbnz	r0, b32 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     b2e:	4628      	mov	r0, r5
     b30:	e35e      	b.n	11f0 <cbvprintf+0x6d8>
		if (*fp != '%') {
     b32:	2825      	cmp	r0, #37	; 0x25
     b34:	f10a 0701 	add.w	r7, sl, #1
     b38:	d007      	beq.n	b4a <cbvprintf+0x32>
			OUTC('%');
     b3a:	4659      	mov	r1, fp
     b3c:	9b02      	ldr	r3, [sp, #8]
     b3e:	4798      	blx	r3
     b40:	2800      	cmp	r0, #0
     b42:	f2c0 8355 	blt.w	11f0 <cbvprintf+0x6d8>
     b46:	3501      	adds	r5, #1
			break;
     b48:	e210      	b.n	f6c <cbvprintf+0x454>
		} state = {
     b4a:	2218      	movs	r2, #24
     b4c:	2100      	movs	r1, #0
     b4e:	a80a      	add	r0, sp, #40	; 0x28
     b50:	f006 ffbb 	bl	7aca <memset>
	if (*sp == '%') {
     b54:	f89a 3001 	ldrb.w	r3, [sl, #1]
     b58:	2b25      	cmp	r3, #37	; 0x25
     b5a:	d078      	beq.n	c4e <cbvprintf+0x136>
     b5c:	2200      	movs	r2, #0
     b5e:	4694      	mov	ip, r2
     b60:	4616      	mov	r6, r2
     b62:	4696      	mov	lr, r2
     b64:	4610      	mov	r0, r2
     b66:	4639      	mov	r1, r7
		switch (*sp) {
     b68:	f817 3b01 	ldrb.w	r3, [r7], #1
     b6c:	2b2b      	cmp	r3, #43	; 0x2b
     b6e:	f000 809d 	beq.w	cac <cbvprintf+0x194>
     b72:	f200 8094 	bhi.w	c9e <cbvprintf+0x186>
     b76:	2b20      	cmp	r3, #32
     b78:	f000 809b 	beq.w	cb2 <cbvprintf+0x19a>
     b7c:	2b23      	cmp	r3, #35	; 0x23
     b7e:	f000 809a 	beq.w	cb6 <cbvprintf+0x19e>
     b82:	b128      	cbz	r0, b90 <cbvprintf+0x78>
     b84:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b88:	f040 0004 	orr.w	r0, r0, #4
     b8c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b90:	f1be 0f00 	cmp.w	lr, #0
     b94:	d005      	beq.n	ba2 <cbvprintf+0x8a>
     b96:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b9a:	f040 0008 	orr.w	r0, r0, #8
     b9e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ba2:	b12e      	cbz	r6, bb0 <cbvprintf+0x98>
     ba4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     ba8:	f040 0010 	orr.w	r0, r0, #16
     bac:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     bb0:	f1bc 0f00 	cmp.w	ip, #0
     bb4:	d005      	beq.n	bc2 <cbvprintf+0xaa>
     bb6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     bba:	f040 0020 	orr.w	r0, r0, #32
     bbe:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     bc2:	b12a      	cbz	r2, bd0 <cbvprintf+0xb8>
     bc4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     bcc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     bd0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bd4:	f002 0044 	and.w	r0, r2, #68	; 0x44
     bd8:	2844      	cmp	r0, #68	; 0x44
     bda:	d103      	bne.n	be4 <cbvprintf+0xcc>
		conv->flag_zero = false;
     bdc:	f36f 1286 	bfc	r2, #6, #1
     be0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     be4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     be8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     bee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     bf2:	d17b      	bne.n	cec <cbvprintf+0x1d4>
		conv->width_star = true;
     bf4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     bf8:	1c4b      	adds	r3, r1, #1
     bfa:	f042 0201 	orr.w	r2, r2, #1
     bfe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     c02:	781a      	ldrb	r2, [r3, #0]
     c04:	2a2e      	cmp	r2, #46	; 0x2e
     c06:	bf0c      	ite	eq
     c08:	2101      	moveq	r1, #1
     c0a:	2100      	movne	r1, #0
     c0c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c10:	f361 0241 	bfi	r2, r1, #1, #1
     c14:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     c18:	d174      	bne.n	d04 <cbvprintf+0x1ec>
	if (*sp == '*') {
     c1a:	785a      	ldrb	r2, [r3, #1]
     c1c:	2a2a      	cmp	r2, #42	; 0x2a
     c1e:	d06a      	beq.n	cf6 <cbvprintf+0x1de>
	size_t val = 0;
     c20:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     c22:	260a      	movs	r6, #10
     c24:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     c26:	4618      	mov	r0, r3
     c28:	f810 2b01 	ldrb.w	r2, [r0], #1
     c2c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c30:	2f09      	cmp	r7, #9
     c32:	f240 808e 	bls.w	d52 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     c36:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     c3a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     c3c:	f3c2 0040 	ubfx	r0, r2, #1, #1
     c40:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     c44:	f361 0241 	bfi	r2, r1, #1, #1
     c48:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     c4c:	e05a      	b.n	d04 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     c4e:	f10a 0702 	add.w	r7, sl, #2
     c52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     c56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c5a:	07d9      	lsls	r1, r3, #31
     c5c:	f140 8149 	bpl.w	ef2 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     c60:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     c64:	f1b9 0f00 	cmp.w	r9, #0
     c68:	da07      	bge.n	c7a <cbvprintf+0x162>
				conv->flag_dash = true;
     c6a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     c6e:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     c72:	f042 0204 	orr.w	r2, r2, #4
     c76:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     c7a:	075a      	lsls	r2, r3, #29
     c7c:	f140 8142 	bpl.w	f04 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     c80:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     c84:	f1b8 0f00 	cmp.w	r8, #0
     c88:	f280 8141 	bge.w	f0e <cbvprintf+0x3f6>
				conv->prec_present = false;
     c8c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c90:	f36f 0341 	bfc	r3, #1, #1
     c94:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c98:	f04f 38ff 	mov.w	r8, #4294967295
     c9c:	e137      	b.n	f0e <cbvprintf+0x3f6>
		switch (*sp) {
     c9e:	2b2d      	cmp	r3, #45	; 0x2d
     ca0:	d00c      	beq.n	cbc <cbvprintf+0x1a4>
     ca2:	2b30      	cmp	r3, #48	; 0x30
     ca4:	f47f af6d 	bne.w	b82 <cbvprintf+0x6a>
			conv->flag_zero = true;
     ca8:	2201      	movs	r2, #1
	} while (loop);
     caa:	e75c      	b.n	b66 <cbvprintf+0x4e>
			conv->flag_plus = true;
     cac:	f04f 0e01 	mov.w	lr, #1
     cb0:	e759      	b.n	b66 <cbvprintf+0x4e>
			conv->flag_space = true;
     cb2:	2601      	movs	r6, #1
     cb4:	e757      	b.n	b66 <cbvprintf+0x4e>
			conv->flag_hash = true;
     cb6:	f04f 0c01 	mov.w	ip, #1
     cba:	e754      	b.n	b66 <cbvprintf+0x4e>
		switch (*sp) {
     cbc:	2001      	movs	r0, #1
     cbe:	e752      	b.n	b66 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     cc0:	4633      	mov	r3, r6
     cc2:	fb0c 0202 	mla	r2, ip, r2, r0
     cc6:	3a30      	subs	r2, #48	; 0x30
     cc8:	461e      	mov	r6, r3
     cca:	f816 0b01 	ldrb.w	r0, [r6], #1
     cce:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     cd2:	2f09      	cmp	r7, #9
     cd4:	d9f4      	bls.n	cc0 <cbvprintf+0x1a8>
	if (sp != wp) {
     cd6:	4299      	cmp	r1, r3
     cd8:	d093      	beq.n	c02 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     cda:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     cde:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     ce0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     ce2:	f362 0141 	bfi	r1, r2, #1, #1
     ce6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     cea:	e78a      	b.n	c02 <cbvprintf+0xea>
     cec:	460b      	mov	r3, r1
	size_t val = 0;
     cee:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     cf0:	f04f 0c0a 	mov.w	ip, #10
     cf4:	e7e8      	b.n	cc8 <cbvprintf+0x1b0>
		conv->prec_star = true;
     cf6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     cfa:	3302      	adds	r3, #2
		conv->prec_star = true;
     cfc:	f042 0204 	orr.w	r2, r2, #4
     d00:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     d04:	461f      	mov	r7, r3
     d06:	f817 2b01 	ldrb.w	r2, [r7], #1
     d0a:	2a6c      	cmp	r2, #108	; 0x6c
     d0c:	d041      	beq.n	d92 <cbvprintf+0x27a>
     d0e:	d825      	bhi.n	d5c <cbvprintf+0x244>
     d10:	2a68      	cmp	r2, #104	; 0x68
     d12:	d02b      	beq.n	d6c <cbvprintf+0x254>
     d14:	2a6a      	cmp	r2, #106	; 0x6a
     d16:	d046      	beq.n	da6 <cbvprintf+0x28e>
     d18:	2a4c      	cmp	r2, #76	; 0x4c
     d1a:	d04c      	beq.n	db6 <cbvprintf+0x29e>
     d1c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     d1e:	f817 2b01 	ldrb.w	r2, [r7], #1
     d22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     d26:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     d28:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     d2c:	f200 80d9 	bhi.w	ee2 <cbvprintf+0x3ca>
     d30:	2a57      	cmp	r2, #87	; 0x57
     d32:	d84d      	bhi.n	dd0 <cbvprintf+0x2b8>
     d34:	2a41      	cmp	r2, #65	; 0x41
     d36:	d003      	beq.n	d40 <cbvprintf+0x228>
     d38:	3a45      	subs	r2, #69	; 0x45
     d3a:	2a02      	cmp	r2, #2
     d3c:	f200 80d1 	bhi.w	ee2 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     d40:	2204      	movs	r2, #4
     d42:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d46:	f362 0302 	bfi	r3, r2, #0, #3
     d4a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     d4e:	2301      	movs	r3, #1
			break;
     d50:	e09e      	b.n	e90 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     d52:	fb06 2101 	mla	r1, r6, r1, r2
     d56:	4603      	mov	r3, r0
     d58:	3930      	subs	r1, #48	; 0x30
     d5a:	e764      	b.n	c26 <cbvprintf+0x10e>
	switch (*sp) {
     d5c:	2a74      	cmp	r2, #116	; 0x74
     d5e:	d026      	beq.n	dae <cbvprintf+0x296>
     d60:	2a7a      	cmp	r2, #122	; 0x7a
     d62:	d1db      	bne.n	d1c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     d64:	2206      	movs	r2, #6
     d66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d6a:	e00d      	b.n	d88 <cbvprintf+0x270>
		if (*++sp == 'h') {
     d6c:	785a      	ldrb	r2, [r3, #1]
     d6e:	2a68      	cmp	r2, #104	; 0x68
     d70:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d74:	d106      	bne.n	d84 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     d76:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d78:	f361 02c6 	bfi	r2, r1, #3, #4
     d7c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     d80:	1c9f      	adds	r7, r3, #2
     d82:	e7cc      	b.n	d1e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     d84:	4613      	mov	r3, r2
     d86:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     d88:	f362 03c6 	bfi	r3, r2, #3, #4
     d8c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d90:	e7c5      	b.n	d1e <cbvprintf+0x206>
		if (*++sp == 'l') {
     d92:	785a      	ldrb	r2, [r3, #1]
     d94:	2a6c      	cmp	r2, #108	; 0x6c
     d96:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d9a:	d101      	bne.n	da0 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     d9c:	2104      	movs	r1, #4
     d9e:	e7eb      	b.n	d78 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     da0:	4613      	mov	r3, r2
     da2:	2203      	movs	r2, #3
     da4:	e7f0      	b.n	d88 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     da6:	2205      	movs	r2, #5
     da8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     dac:	e7ec      	b.n	d88 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     dae:	2207      	movs	r2, #7
     db0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     db4:	e7e8      	b.n	d88 <cbvprintf+0x270>
		conv->unsupported = true;
     db6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     dba:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     dbe:	f023 0302 	bic.w	r3, r3, #2
     dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     dc6:	f043 0302 	orr.w	r3, r3, #2
     dca:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     dce:	e7a6      	b.n	d1e <cbvprintf+0x206>
     dd0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     dd4:	2920      	cmp	r1, #32
     dd6:	f200 8084 	bhi.w	ee2 <cbvprintf+0x3ca>
     dda:	a001      	add	r0, pc, #4	; (adr r0, de0 <cbvprintf+0x2c8>)
     ddc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     de0:	00000ea5 	.word	0x00000ea5
     de4:	00000ee3 	.word	0x00000ee3
     de8:	00000ee3 	.word	0x00000ee3
     dec:	00000ee3 	.word	0x00000ee3
     df0:	00000ee3 	.word	0x00000ee3
     df4:	00000ee3 	.word	0x00000ee3
     df8:	00000ee3 	.word	0x00000ee3
     dfc:	00000ee3 	.word	0x00000ee3
     e00:	00000ee3 	.word	0x00000ee3
     e04:	00000d41 	.word	0x00000d41
     e08:	00000ee3 	.word	0x00000ee3
     e0c:	00000ea5 	.word	0x00000ea5
     e10:	00000e65 	.word	0x00000e65
     e14:	00000d41 	.word	0x00000d41
     e18:	00000d41 	.word	0x00000d41
     e1c:	00000d41 	.word	0x00000d41
     e20:	00000ee3 	.word	0x00000ee3
     e24:	00000e65 	.word	0x00000e65
     e28:	00000ee3 	.word	0x00000ee3
     e2c:	00000ee3 	.word	0x00000ee3
     e30:	00000ee3 	.word	0x00000ee3
     e34:	00000ee3 	.word	0x00000ee3
     e38:	00000ead 	.word	0x00000ead
     e3c:	00000ea5 	.word	0x00000ea5
     e40:	00000ec9 	.word	0x00000ec9
     e44:	00000ee3 	.word	0x00000ee3
     e48:	00000ee3 	.word	0x00000ee3
     e4c:	00000ec9 	.word	0x00000ec9
     e50:	00000ee3 	.word	0x00000ee3
     e54:	00000ea5 	.word	0x00000ea5
     e58:	00000ee3 	.word	0x00000ee3
     e5c:	00000ee3 	.word	0x00000ee3
     e60:	00000ea5 	.word	0x00000ea5
		conv->specifier_cat = SPECIFIER_SINT;
     e64:	2001      	movs	r0, #1
     e66:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e6a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     e6e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e72:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e74:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     e78:	bf02      	ittt	eq
     e7a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     e7e:	f041 0101 	orreq.w	r1, r1, #1
     e82:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     e86:	2a63      	cmp	r2, #99	; 0x63
     e88:	d131      	bne.n	eee <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e8a:	3b00      	subs	r3, #0
     e8c:	bf18      	it	ne
     e8e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e90:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e94:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e98:	430b      	orrs	r3, r1
     e9a:	f363 0241 	bfi	r2, r3, #1, #1
     e9e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     ea2:	e6d8      	b.n	c56 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     ea4:	2002      	movs	r0, #2
     ea6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     eaa:	e7de      	b.n	e6a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     eac:	2103      	movs	r1, #3
     eae:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     eb2:	f003 0378 	and.w	r3, r3, #120	; 0x78
     eb6:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     eba:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     ebe:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     ec0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ec4:	4143      	adcs	r3, r0
     ec6:	e7e3      	b.n	e90 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     ec8:	2103      	movs	r1, #3
     eca:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     ece:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     ed2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     ed6:	bf14      	ite	ne
     ed8:	2301      	movne	r3, #1
     eda:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     edc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     ee0:	e7d6      	b.n	e90 <cbvprintf+0x378>
		conv->invalid = true;
     ee2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ee6:	f043 0301 	orr.w	r3, r3, #1
     eea:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     eee:	2300      	movs	r3, #0
     ef0:	e7ce      	b.n	e90 <cbvprintf+0x378>
		} else if (conv->width_present) {
     ef2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     ef6:	2a00      	cmp	r2, #0
		int width = -1;
     ef8:	bfac      	ite	ge
     efa:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     efe:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     f02:	e6ba      	b.n	c7a <cbvprintf+0x162>
		} else if (conv->prec_present) {
     f04:	079b      	lsls	r3, r3, #30
     f06:	f57f aec7 	bpl.w	c98 <cbvprintf+0x180>
			precision = conv->prec_value;
     f0a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     f0e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     f10:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     f14:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     f18:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     f1c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     f20:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     f22:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     f26:	d136      	bne.n	f96 <cbvprintf+0x47e>
			switch (length_mod) {
     f28:	1ed3      	subs	r3, r2, #3
     f2a:	2b04      	cmp	r3, #4
     f2c:	d820      	bhi.n	f70 <cbvprintf+0x458>
     f2e:	e8df f003 	tbb	[pc, r3]
     f32:	0703      	.short	0x0703
     f34:	1f07      	.short	0x1f07
     f36:	1f          	.byte	0x1f
     f37:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     f38:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     f3c:	17c1      	asrs	r1, r0, #31
     f3e:	e004      	b.n	f4a <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     f40:	3407      	adds	r4, #7
     f42:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     f46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     f4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     f4e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     f52:	f013 0603 	ands.w	r6, r3, #3
     f56:	d054      	beq.n	1002 <cbvprintf+0x4ea>
			OUTS(sp, fp);
     f58:	463b      	mov	r3, r7
     f5a:	4652      	mov	r2, sl
     f5c:	4659      	mov	r1, fp
     f5e:	9802      	ldr	r0, [sp, #8]
     f60:	f006 f9fd 	bl	735e <outs>
     f64:	2800      	cmp	r0, #0
     f66:	f2c0 8143 	blt.w	11f0 <cbvprintf+0x6d8>
     f6a:	4405      	add	r5, r0
			continue;
     f6c:	46ba      	mov	sl, r7
     f6e:	e5db      	b.n	b28 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f70:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     f74:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f76:	ea4f 71e0 	mov.w	r1, r0, asr #31
     f7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f7e:	d105      	bne.n	f8c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     f80:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     f84:	930a      	str	r3, [sp, #40]	; 0x28
     f86:	2300      	movs	r3, #0
     f88:	930b      	str	r3, [sp, #44]	; 0x2c
     f8a:	e7e0      	b.n	f4e <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     f8c:	2a02      	cmp	r2, #2
     f8e:	d1de      	bne.n	f4e <cbvprintf+0x436>
				value->sint = (short)value->sint;
     f90:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     f94:	e7d2      	b.n	f3c <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f96:	2b02      	cmp	r3, #2
     f98:	d123      	bne.n	fe2 <cbvprintf+0x4ca>
			switch (length_mod) {
     f9a:	1ed3      	subs	r3, r2, #3
     f9c:	2b04      	cmp	r3, #4
     f9e:	d813      	bhi.n	fc8 <cbvprintf+0x4b0>
     fa0:	e8df f003 	tbb	[pc, r3]
     fa4:	120a0a03 	.word	0x120a0a03
     fa8:	12          	.byte	0x12
     fa9:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     faa:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     fac:	6820      	ldr	r0, [r4, #0]
     fae:	1d23      	adds	r3, r4, #4
     fb0:	900a      	str	r0, [sp, #40]	; 0x28
     fb2:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     fb4:	461c      	mov	r4, r3
     fb6:	e7ca      	b.n	f4e <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     fb8:	3407      	adds	r4, #7
     fba:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     fbe:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     fc2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     fc6:	e7f5      	b.n	fb4 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     fc8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     fcc:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     fce:	930a      	str	r3, [sp, #40]	; 0x28
     fd0:	f04f 0300 	mov.w	r3, #0
     fd4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     fd6:	d0d3      	beq.n	f80 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     fd8:	2a02      	cmp	r2, #2
     fda:	d1b8      	bne.n	f4e <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     fdc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     fe0:	e7d0      	b.n	f84 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     fe2:	2b04      	cmp	r3, #4
     fe4:	d107      	bne.n	ff6 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     fe6:	3407      	adds	r4, #7
     fe8:	f024 0407 	bic.w	r4, r4, #7
     fec:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     ff0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     ff4:	e7ab      	b.n	f4e <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     ff6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     ff8:	bf04      	itt	eq
     ffa:	f854 3b04 	ldreq.w	r3, [r4], #4
     ffe:	930a      	streq	r3, [sp, #40]	; 0x28
    1000:	e7a5      	b.n	f4e <cbvprintf+0x436>
		switch (conv->specifier) {
    1002:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1006:	2878      	cmp	r0, #120	; 0x78
    1008:	d8b0      	bhi.n	f6c <cbvprintf+0x454>
    100a:	2862      	cmp	r0, #98	; 0x62
    100c:	d822      	bhi.n	1054 <cbvprintf+0x53c>
    100e:	2825      	cmp	r0, #37	; 0x25
    1010:	f43f ad93 	beq.w	b3a <cbvprintf+0x22>
    1014:	2858      	cmp	r0, #88	; 0x58
    1016:	d1a9      	bne.n	f6c <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1018:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    101c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1020:	9300      	str	r3, [sp, #0]
    1022:	aa0c      	add	r2, sp, #48	; 0x30
    1024:	ab04      	add	r3, sp, #16
    1026:	f006 f94f 	bl	72c8 <encode_uint>
    102a:	4682      	mov	sl, r0
			if (precision >= 0) {
    102c:	f1b8 0f00 	cmp.w	r8, #0
    1030:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1034:	db0c      	blt.n	1050 <cbvprintf+0x538>
				conv->flag_zero = false;
    1036:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    103a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    103e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1042:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1044:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1048:	d902      	bls.n	1050 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    104a:	eba8 0303 	sub.w	r3, r8, r3
    104e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1050:	4680      	mov	r8, r0
    1052:	e03d      	b.n	10d0 <cbvprintf+0x5b8>
    1054:	3863      	subs	r0, #99	; 0x63
    1056:	2815      	cmp	r0, #21
    1058:	d888      	bhi.n	f6c <cbvprintf+0x454>
    105a:	a101      	add	r1, pc, #4	; (adr r1, 1060 <cbvprintf+0x548>)
    105c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1060:	000010e1 	.word	0x000010e1
    1064:	00001145 	.word	0x00001145
    1068:	00000f6d 	.word	0x00000f6d
    106c:	00000f6d 	.word	0x00000f6d
    1070:	00000f6d 	.word	0x00000f6d
    1074:	00000f6d 	.word	0x00000f6d
    1078:	00001145 	.word	0x00001145
    107c:	00000f6d 	.word	0x00000f6d
    1080:	00000f6d 	.word	0x00000f6d
    1084:	00000f6d 	.word	0x00000f6d
    1088:	00000f6d 	.word	0x00000f6d
    108c:	000011a3 	.word	0x000011a3
    1090:	00001171 	.word	0x00001171
    1094:	00001175 	.word	0x00001175
    1098:	00000f6d 	.word	0x00000f6d
    109c:	00000f6d 	.word	0x00000f6d
    10a0:	000010b9 	.word	0x000010b9
    10a4:	00000f6d 	.word	0x00000f6d
    10a8:	00001171 	.word	0x00001171
    10ac:	00000f6d 	.word	0x00000f6d
    10b0:	00000f6d 	.word	0x00000f6d
    10b4:	00001171 	.word	0x00001171
			if (precision >= 0) {
    10b8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    10bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    10c0:	db0a      	blt.n	10d8 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    10c2:	4641      	mov	r1, r8
    10c4:	4650      	mov	r0, sl
    10c6:	f006 fcc0 	bl	7a4a <strnlen>
		char sign = 0;
    10ca:	2600      	movs	r6, #0
			bpe = bps + len;
    10cc:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    10d0:	f1ba 0f00 	cmp.w	sl, #0
    10d4:	d10c      	bne.n	10f0 <cbvprintf+0x5d8>
    10d6:	e749      	b.n	f6c <cbvprintf+0x454>
				len = strlen(bps);
    10d8:	4650      	mov	r0, sl
    10da:	f006 fcaf 	bl	7a3c <strlen>
    10de:	e7f4      	b.n	10ca <cbvprintf+0x5b2>
			break;
    10e0:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    10e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    10e4:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    10e8:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    10ec:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    10f0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    10f4:	b106      	cbz	r6, 10f8 <cbvprintf+0x5e0>
			nj_len += 1U;
    10f6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    10f8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    10fc:	06d0      	lsls	r0, r2, #27
    10fe:	d56b      	bpl.n	11d8 <cbvprintf+0x6c0>
			nj_len += 2U;
    1100:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1102:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1104:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1106:	bf48      	it	mi
    1108:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    110a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    110c:	bf48      	it	mi
    110e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1110:	f1b9 0f00 	cmp.w	r9, #0
    1114:	dd79      	ble.n	120a <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    1116:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    111a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    111e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1122:	9303      	str	r3, [sp, #12]
    1124:	0753      	lsls	r3, r2, #29
    1126:	d470      	bmi.n	120a <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    1128:	0650      	lsls	r0, r2, #25
    112a:	d564      	bpl.n	11f6 <cbvprintf+0x6de>
					if (sign != 0) {
    112c:	b146      	cbz	r6, 1140 <cbvprintf+0x628>
						OUTC(sign);
    112e:	4659      	mov	r1, fp
    1130:	4630      	mov	r0, r6
    1132:	9b02      	ldr	r3, [sp, #8]
    1134:	4798      	blx	r3
    1136:	2800      	cmp	r0, #0
    1138:	db5a      	blt.n	11f0 <cbvprintf+0x6d8>
						sign = 0;
    113a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    113c:	3501      	adds	r5, #1
						sign = 0;
    113e:	461e      	mov	r6, r3
					pad = '0';
    1140:	2330      	movs	r3, #48	; 0x30
    1142:	e059      	b.n	11f8 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    1144:	071e      	lsls	r6, r3, #28
    1146:	d411      	bmi.n	116c <cbvprintf+0x654>
				sign = ' ';
    1148:	f013 0610 	ands.w	r6, r3, #16
    114c:	bf18      	it	ne
    114e:	2620      	movne	r6, #32
			sint = value->sint;
    1150:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1154:	2a00      	cmp	r2, #0
    1156:	f173 0100 	sbcs.w	r1, r3, #0
    115a:	f6bf af5d 	bge.w	1018 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    115e:	4252      	negs	r2, r2
    1160:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    1164:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    1166:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    116a:	e755      	b.n	1018 <cbvprintf+0x500>
				sign = '+';
    116c:	262b      	movs	r6, #43	; 0x2b
    116e:	e7ef      	b.n	1150 <cbvprintf+0x638>
		switch (conv->specifier) {
    1170:	2600      	movs	r6, #0
    1172:	e751      	b.n	1018 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1174:	980a      	ldr	r0, [sp, #40]	; 0x28
    1176:	b348      	cbz	r0, 11cc <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1178:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    117c:	9300      	str	r3, [sp, #0]
    117e:	2100      	movs	r1, #0
    1180:	ab04      	add	r3, sp, #16
    1182:	aa0c      	add	r2, sp, #48	; 0x30
    1184:	f006 f8a0 	bl	72c8 <encode_uint>
				conv->altform_0c = true;
    1188:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    118c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    118e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1192:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1196:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    119a:	2600      	movs	r6, #0
				conv->altform_0c = true;
    119c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    11a0:	e744      	b.n	102c <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    11a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    11a4:	2a07      	cmp	r2, #7
    11a6:	f63f aee1 	bhi.w	f6c <cbvprintf+0x454>
    11aa:	e8df f002 	tbb	[pc, r2]
    11ae:	040d      	.short	0x040d
    11b0:	08080d06 	.word	0x08080d06
    11b4:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    11b6:	701d      	strb	r5, [r3, #0]
		break;
    11b8:	e6d8      	b.n	f6c <cbvprintf+0x454>
		*(short *)dp = (short)count;
    11ba:	801d      	strh	r5, [r3, #0]
		break;
    11bc:	e6d6      	b.n	f6c <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    11be:	4628      	mov	r0, r5
    11c0:	17e9      	asrs	r1, r5, #31
    11c2:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    11c6:	e6d1      	b.n	f6c <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    11c8:	601d      	str	r5, [r3, #0]
		break;
    11ca:	e6cf      	b.n	f6c <cbvprintf+0x454>
			bpe = bps + 5;
    11cc:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1294 <cbvprintf+0x77c>
    11d0:	4606      	mov	r6, r0
			bps = "(nil)";
    11d2:	f1a8 0a05 	sub.w	sl, r8, #5
    11d6:	e78b      	b.n	10f0 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    11d8:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    11da:	bf48      	it	mi
    11dc:	3301      	addmi	r3, #1
    11de:	e790      	b.n	1102 <cbvprintf+0x5ea>
					OUTC(pad);
    11e0:	4618      	mov	r0, r3
    11e2:	9303      	str	r3, [sp, #12]
    11e4:	4659      	mov	r1, fp
    11e6:	9b02      	ldr	r3, [sp, #8]
    11e8:	4798      	blx	r3
    11ea:	2800      	cmp	r0, #0
    11ec:	9b03      	ldr	r3, [sp, #12]
    11ee:	da04      	bge.n	11fa <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    11f0:	b011      	add	sp, #68	; 0x44
    11f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    11f6:	2320      	movs	r3, #32
    11f8:	444d      	add	r5, r9
    11fa:	464a      	mov	r2, r9
				while (width-- > 0) {
    11fc:	2a00      	cmp	r2, #0
    11fe:	eba5 0109 	sub.w	r1, r5, r9
    1202:	f109 39ff 	add.w	r9, r9, #4294967295
    1206:	dceb      	bgt.n	11e0 <cbvprintf+0x6c8>
    1208:	460d      	mov	r5, r1
		if (sign != 0) {
    120a:	b136      	cbz	r6, 121a <cbvprintf+0x702>
			OUTC(sign);
    120c:	4659      	mov	r1, fp
    120e:	4630      	mov	r0, r6
    1210:	9b02      	ldr	r3, [sp, #8]
    1212:	4798      	blx	r3
    1214:	2800      	cmp	r0, #0
    1216:	dbeb      	blt.n	11f0 <cbvprintf+0x6d8>
    1218:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    121a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    121e:	06d9      	lsls	r1, r3, #27
    1220:	d401      	bmi.n	1226 <cbvprintf+0x70e>
    1222:	071a      	lsls	r2, r3, #28
    1224:	d506      	bpl.n	1234 <cbvprintf+0x71c>
				OUTC('0');
    1226:	4659      	mov	r1, fp
    1228:	2030      	movs	r0, #48	; 0x30
    122a:	9b02      	ldr	r3, [sp, #8]
    122c:	4798      	blx	r3
    122e:	2800      	cmp	r0, #0
    1230:	dbde      	blt.n	11f0 <cbvprintf+0x6d8>
    1232:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1234:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1238:	06db      	lsls	r3, r3, #27
    123a:	d507      	bpl.n	124c <cbvprintf+0x734>
				OUTC(conv->specifier);
    123c:	4659      	mov	r1, fp
    123e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1242:	9b02      	ldr	r3, [sp, #8]
    1244:	4798      	blx	r3
    1246:	2800      	cmp	r0, #0
    1248:	dbd2      	blt.n	11f0 <cbvprintf+0x6d8>
    124a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    124c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    124e:	442e      	add	r6, r5
    1250:	1b73      	subs	r3, r6, r5
    1252:	2b00      	cmp	r3, #0
    1254:	dc16      	bgt.n	1284 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    1256:	4643      	mov	r3, r8
    1258:	4652      	mov	r2, sl
    125a:	4659      	mov	r1, fp
    125c:	9802      	ldr	r0, [sp, #8]
    125e:	f006 f87e 	bl	735e <outs>
    1262:	2800      	cmp	r0, #0
    1264:	dbc4      	blt.n	11f0 <cbvprintf+0x6d8>
    1266:	4405      	add	r5, r0
		while (width > 0) {
    1268:	44a9      	add	r9, r5
    126a:	eba9 0305 	sub.w	r3, r9, r5
    126e:	2b00      	cmp	r3, #0
    1270:	f77f ae7c 	ble.w	f6c <cbvprintf+0x454>
			OUTC(' ');
    1274:	4659      	mov	r1, fp
    1276:	2020      	movs	r0, #32
    1278:	9b02      	ldr	r3, [sp, #8]
    127a:	4798      	blx	r3
    127c:	2800      	cmp	r0, #0
    127e:	dbb7      	blt.n	11f0 <cbvprintf+0x6d8>
    1280:	3501      	adds	r5, #1
			--width;
    1282:	e7f2      	b.n	126a <cbvprintf+0x752>
				OUTC('0');
    1284:	4659      	mov	r1, fp
    1286:	2030      	movs	r0, #48	; 0x30
    1288:	9b02      	ldr	r3, [sp, #8]
    128a:	4798      	blx	r3
    128c:	2800      	cmp	r0, #0
    128e:	dbaf      	blt.n	11f0 <cbvprintf+0x6d8>
    1290:	3501      	adds	r5, #1
    1292:	e7dd      	b.n	1250 <cbvprintf+0x738>
    1294:	000085da 	.word	0x000085da

00001298 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    1298:	6802      	ldr	r2, [r0, #0]
{
    129a:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    129c:	0953      	lsrs	r3, r2, #5
{
    129e:	4604      	mov	r4, r0
    switch (port)
    12a0:	d02b      	beq.n	12fa <nrf_gpio_pin_port_decode+0x62>
    12a2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    12a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12a8:	bf18      	it	ne
    12aa:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    12ac:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    12b0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    12b2:	07db      	lsls	r3, r3, #31
    12b4:	d40b      	bmi.n	12ce <nrf_gpio_pin_port_decode+0x36>
    12b6:	4913      	ldr	r1, [pc, #76]	; (1304 <nrf_gpio_pin_port_decode+0x6c>)
    12b8:	4813      	ldr	r0, [pc, #76]	; (1308 <nrf_gpio_pin_port_decode+0x70>)
    12ba:	f44f 7305 	mov.w	r3, #532	; 0x214
    12be:	4a13      	ldr	r2, [pc, #76]	; (130c <nrf_gpio_pin_port_decode+0x74>)
    12c0:	f005 ff8a 	bl	71d8 <printk>
    12c4:	f44f 7105 	mov.w	r1, #532	; 0x214
    12c8:	4810      	ldr	r0, [pc, #64]	; (130c <nrf_gpio_pin_port_decode+0x74>)
    12ca:	f006 f85e 	bl	738a <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    12ce:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    12d0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    12d4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    12d6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    12d8:	d00d      	beq.n	12f6 <nrf_gpio_pin_port_decode+0x5e>
    12da:	2b01      	cmp	r3, #1
    12dc:	d010      	beq.n	1300 <nrf_gpio_pin_port_decode+0x68>
            NRFX_ASSERT(0);
    12de:	490c      	ldr	r1, [pc, #48]	; (1310 <nrf_gpio_pin_port_decode+0x78>)
    12e0:	4809      	ldr	r0, [pc, #36]	; (1308 <nrf_gpio_pin_port_decode+0x70>)
    12e2:	f240 2319 	movw	r3, #537	; 0x219
    12e6:	4a09      	ldr	r2, [pc, #36]	; (130c <nrf_gpio_pin_port_decode+0x74>)
    12e8:	f005 ff76 	bl	71d8 <printk>
    12ec:	f240 2119 	movw	r1, #537	; 0x219
    12f0:	4806      	ldr	r0, [pc, #24]	; (130c <nrf_gpio_pin_port_decode+0x74>)
    12f2:	f006 f84a 	bl	738a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    12f6:	4807      	ldr	r0, [pc, #28]	; (1314 <nrf_gpio_pin_port_decode+0x7c>)
}
    12f8:	bd10      	pop	{r4, pc}
    switch (port)
    12fa:	f04f 33ff 	mov.w	r3, #4294967295
    12fe:	e7d5      	b.n	12ac <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    1300:	4805      	ldr	r0, [pc, #20]	; (1318 <nrf_gpio_pin_port_decode+0x80>)
    1302:	e7f9      	b.n	12f8 <nrf_gpio_pin_port_decode+0x60>
    1304:	0000860e 	.word	0x0000860e
    1308:	00008496 	.word	0x00008496
    130c:	000085db 	.word	0x000085db
    1310:	0000853e 	.word	0x0000853e
    1314:	50842500 	.word	0x50842500
    1318:	50842800 	.word	0x50842800

0000131c <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    131c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__asm__ volatile(
    131e:	f04f 0320 	mov.w	r3, #32
    1322:	f3ef 8711 	mrs	r7, BASEPRI
    1326:	f383 8811 	msr	BASEPRI, r3
    132a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    132e:	2401      	movs	r4, #1
    1330:	4b19      	ldr	r3, [pc, #100]	; (1398 <nordicsemi_nrf53_init+0x7c>)
    1332:	2600      	movs	r6, #0
    1334:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1338:	2302      	movs	r3, #2
    133a:	4d18      	ldr	r5, [pc, #96]	; (139c <nordicsemi_nrf53_init+0x80>)
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    133c:	a801      	add	r0, sp, #4
    133e:	f8c5 36d0 	str.w	r3, [r5, #1744]	; 0x6d0
			NRF_OSCILLATORS_LFXO_CAP_7PF :
		IS_ENABLED(CONFIG_SOC_LFXO_CAP_INT_9PF) ?
			NRF_OSCILLATORS_LFXO_CAP_9PF :
			NRF_OSCILLATORS_LFXO_CAP_EXTERNAL);
	/* This can only be done from secure code. */
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    1342:	9601      	str	r6, [sp, #4]
    1344:	f7ff ffa8 	bl	1298 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1348:	9b01      	ldr	r3, [sp, #4]
    134a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    134e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1352:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    1356:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    135a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    135e:	a801      	add	r0, sp, #4
    1360:	9401      	str	r4, [sp, #4]
    1362:	f7ff ff99 	bl	1298 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1366:	9b01      	ldr	r3, [sp, #4]
    1368:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    136c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1370:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    1374:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1378:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    137c:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1380:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1384:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
    1388:	f387 8811 	msr	BASEPRI, r7
    138c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1390:	4630      	mov	r0, r6
    1392:	b003      	add	sp, #12
    1394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1396:	bf00      	nop
    1398:	50001000 	.word	0x50001000
    139c:	50004000 	.word	0x50004000

000013a0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    13a0:	b148      	cbz	r0, 13b6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    13a2:	4b05      	ldr	r3, [pc, #20]	; (13b8 <arch_busy_wait+0x18>)
    13a4:	681a      	ldr	r2, [r3, #0]
    13a6:	4b05      	ldr	r3, [pc, #20]	; (13bc <arch_busy_wait+0x1c>)
    13a8:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    13ae:	4350      	muls	r0, r2
    13b0:	f043 0301 	orr.w	r3, r3, #1
    13b4:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    13b6:	4770      	bx	lr
    13b8:	20000044 	.word	0x20000044
    13bc:	000f4240 	.word	0x000f4240
    13c0:	000081a0 	.word	0x000081a0

000013c4 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    13c4:	b084      	sub	sp, #16
    13c6:	ab04      	add	r3, sp, #16
    13c8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    13cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    13d0:	2b06      	cmp	r3, #6
    13d2:	d107      	bne.n	13e4 <pm_power_state_set+0x20>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    13d4:	2201      	movs	r2, #1
    13d6:	4b04      	ldr	r3, [pc, #16]	; (13e8 <pm_power_state_set+0x24>)
    13d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    13dc:	f3bf 8f4f 	dsb	sy
        __WFE();
    13e0:	bf20      	wfe
    while (true)
    13e2:	e7fd      	b.n	13e0 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    13e4:	b004      	add	sp, #16
    13e6:	4770      	bx	lr
    13e8:	50004000 	.word	0x50004000

000013ec <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    13ec:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    13ee:	2200      	movs	r2, #0
{
    13f0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    13f2:	490f      	ldr	r1, [pc, #60]	; (1430 <enable_logger+0x44>)
    13f4:	480f      	ldr	r0, [pc, #60]	; (1434 <enable_logger+0x48>)
    13f6:	f006 fd26 	bl	7e46 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    13fa:	2200      	movs	r2, #0
    13fc:	2300      	movs	r3, #0
    13fe:	2400      	movs	r4, #0
    1400:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1404:	230e      	movs	r3, #14
    1406:	4d0c      	ldr	r5, [pc, #48]	; (1438 <enable_logger+0x4c>)
    1408:	e9cd 3403 	strd	r3, r4, [sp, #12]
    140c:	f44f 7240 	mov.w	r2, #768	; 0x300
    1410:	4628      	mov	r0, r5
    1412:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1416:	4b09      	ldr	r3, [pc, #36]	; (143c <enable_logger+0x50>)
    1418:	4909      	ldr	r1, [pc, #36]	; (1440 <enable_logger+0x54>)
    141a:	9400      	str	r4, [sp, #0]
    141c:	f003 fc86 	bl	4d2c <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1420:	4908      	ldr	r1, [pc, #32]	; (1444 <enable_logger+0x58>)
    1422:	4628      	mov	r0, r5
    1424:	f006 fcd4 	bl	7dd0 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1428:	4620      	mov	r0, r4
    142a:	b009      	add	sp, #36	; 0x24
    142c:	bd30      	pop	{r4, r5, pc}
    142e:	bf00      	nop
    1430:	00001449 	.word	0x00001449
    1434:	20000188 	.word	0x20000188
    1438:	200001c0 	.word	0x200001c0
    143c:	00001925 	.word	0x00001925
    1440:	20000b18 	.word	0x20000b18
    1444:	00008635 	.word	0x00008635

00001448 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1448:	4801      	ldr	r0, [pc, #4]	; (1450 <log_process_thread_timer_expiry_fn+0x8>)
    144a:	f003 bf49 	b.w	52e0 <z_impl_k_sem_give>
    144e:	bf00      	nop
    1450:	20000178 	.word	0x20000178

00001454 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    1454:	2920      	cmp	r1, #32
{
    1456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1458:	4605      	mov	r5, r0
    145a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    145c:	d909      	bls.n	1472 <z_log_get_s_mask+0x1e>
    145e:	4914      	ldr	r1, [pc, #80]	; (14b0 <z_log_get_s_mask+0x5c>)
    1460:	4814      	ldr	r0, [pc, #80]	; (14b4 <z_log_get_s_mask+0x60>)
    1462:	2380      	movs	r3, #128	; 0x80
    1464:	4a14      	ldr	r2, [pc, #80]	; (14b8 <z_log_get_s_mask+0x64>)
    1466:	f005 feb7 	bl	71d8 <printk>
    146a:	2180      	movs	r1, #128	; 0x80
    146c:	4812      	ldr	r0, [pc, #72]	; (14b8 <z_log_get_s_mask+0x64>)
    146e:	f005 ff8c 	bl	738a <assert_post_action>
			arm = false;
    1472:	2000      	movs	r0, #0
				mask |= BIT(arg);
    1474:	2701      	movs	r7, #1
			arm = false;
    1476:	4603      	mov	r3, r0
    1478:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
    147a:	f815 1b01 	ldrb.w	r1, [r5], #1
    147e:	b109      	cbz	r1, 1484 <z_log_get_s_mask+0x30>
    1480:	42a3      	cmp	r3, r4
    1482:	d300      	bcc.n	1486 <z_log_get_s_mask+0x32>
}
    1484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
    1486:	2925      	cmp	r1, #37	; 0x25
    1488:	d102      	bne.n	1490 <z_log_get_s_mask+0x3c>
			arm = !arm;
    148a:	f082 0201 	eor.w	r2, r2, #1
    148e:	e7f4      	b.n	147a <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
    1490:	2a00      	cmp	r2, #0
    1492:	d0f2      	beq.n	147a <z_log_get_s_mask+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    1494:	f041 0620 	orr.w	r6, r1, #32
    1498:	3e61      	subs	r6, #97	; 0x61
    149a:	2e19      	cmp	r6, #25
    149c:	d8ed      	bhi.n	147a <z_log_get_s_mask+0x26>
			if (curr == 's') {
    149e:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
    14a0:	bf04      	itt	eq
    14a2:	fa07 f203 	lsleq.w	r2, r7, r3
    14a6:	4310      	orreq	r0, r2
			arg++;
    14a8:	3301      	adds	r3, #1
			arm = false;
    14aa:	2200      	movs	r2, #0
    14ac:	e7e5      	b.n	147a <z_log_get_s_mask+0x26>
    14ae:	bf00      	nop
    14b0:	0000866a 	.word	0x0000866a
    14b4:	00008496 	.word	0x00008496
    14b8:	0000863d 	.word	0x0000863d

000014bc <log_core_init>:
	panic_mode = false;
    14bc:	2200      	movs	r2, #0
{
    14be:	b510      	push	{r4, lr}
	panic_mode = false;
    14c0:	4b0a      	ldr	r3, [pc, #40]	; (14ec <log_core_init+0x30>)
	log_output_timestamp_freq_set(freq);
    14c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
    14c6:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
    14c8:	4b09      	ldr	r3, [pc, #36]	; (14f0 <log_core_init+0x34>)
    14ca:	4a0a      	ldr	r2, [pc, #40]	; (14f4 <log_core_init+0x38>)
    14cc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    14ce:	f000 fd2f 	bl	1f30 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    14d2:	f000 faa1 	bl	1a18 <log_msg_pool_init>
		log_list_init(&list);
    14d6:	4808      	ldr	r0, [pc, #32]	; (14f8 <log_core_init+0x3c>)
    14d8:	f005 ff6c 	bl	73b4 <log_list_init>
}
    14dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    14e0:	2304      	movs	r3, #4
    14e2:	2228      	movs	r2, #40	; 0x28
    14e4:	4905      	ldr	r1, [pc, #20]	; (14fc <log_core_init+0x40>)
    14e6:	4806      	ldr	r0, [pc, #24]	; (1500 <log_core_init+0x44>)
    14e8:	f006 bc50 	b.w	7d8c <k_mem_slab_init>
    14ec:	20000b0d 	.word	0x20000b0d
    14f0:	20000004 	.word	0x20000004
    14f4:	000073f9 	.word	0x000073f9
    14f8:	20000354 	.word	0x20000354
    14fc:	20005758 	.word	0x20005758
    1500:	2000035c 	.word	0x2000035c

00001504 <get_msg>:
{
    1504:	b510      	push	{r4, lr}
	__asm__ volatile(
    1506:	f04f 0320 	mov.w	r3, #32
    150a:	f3ef 8411 	mrs	r4, BASEPRI
    150e:	f383 8811 	msr	BASEPRI, r3
    1512:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    1516:	4804      	ldr	r0, [pc, #16]	; (1528 <get_msg+0x24>)
    1518:	f005 ff5c 	bl	73d4 <log_list_head_get>
	__asm__ volatile(
    151c:	f384 8811 	msr	BASEPRI, r4
    1520:	f3bf 8f6f 	isb	sy
}
    1524:	bd10      	pop	{r4, pc}
    1526:	bf00      	nop
    1528:	20000354 	.word	0x20000354

0000152c <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    152c:	4b04      	ldr	r3, [pc, #16]	; (1540 <z_log_dropped+0x14>)
    152e:	e8d3 2fef 	ldaex	r2, [r3]
    1532:	3201      	adds	r2, #1
    1534:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1538:	2900      	cmp	r1, #0
    153a:	d1f8      	bne.n	152e <z_log_dropped+0x2>
}
    153c:	4770      	bx	lr
    153e:	bf00      	nop
    1540:	2000034c 	.word	0x2000034c

00001544 <z_log_dropped_read_and_clear>:
}
    1544:	2000      	movs	r0, #0
    1546:	4602      	mov	r2, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1548:	4b03      	ldr	r3, [pc, #12]	; (1558 <z_log_dropped_read_and_clear+0x14>)
    154a:	e8d3 0fef 	ldaex	r0, [r3]
    154e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1552:	2900      	cmp	r1, #0
    1554:	d1f9      	bne.n	154a <z_log_dropped_read_and_clear+0x6>
    1556:	4770      	bx	lr
    1558:	2000034c 	.word	0x2000034c

0000155c <dropped_notify>:
{
    155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    155e:	f7ff fff1 	bl	1544 <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1562:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
    1564:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1566:	4c0a      	ldr	r4, [pc, #40]	; (1590 <dropped_notify+0x34>)
    1568:	4d0a      	ldr	r5, [pc, #40]	; (1594 <dropped_notify+0x38>)
    156a:	1b2d      	subs	r5, r5, r4
    156c:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    156e:	42ae      	cmp	r6, r5
    1570:	db00      	blt.n	1574 <dropped_notify+0x18>
}
    1572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    1574:	4620      	mov	r0, r4
    1576:	f005 ff33 	bl	73e0 <log_backend_is_active>
    157a:	b128      	cbz	r0, 1588 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
    157c:	6823      	ldr	r3, [r4, #0]
    157e:	691b      	ldr	r3, [r3, #16]
    1580:	b113      	cbz	r3, 1588 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
    1582:	4639      	mov	r1, r7
    1584:	4620      	mov	r0, r4
    1586:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1588:	3601      	adds	r6, #1
    158a:	3410      	adds	r4, #16
    158c:	e7ef      	b.n	156e <dropped_notify+0x12>
    158e:	bf00      	nop
    1590:	0000815c 	.word	0x0000815c
    1594:	0000816c 	.word	0x0000816c

00001598 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    1598:	4a04      	ldr	r2, [pc, #16]	; (15ac <log_source_name_get+0x14>)
    159a:	4b05      	ldr	r3, [pc, #20]	; (15b0 <log_source_name_get+0x18>)
    159c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    159e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    15a2:	bf34      	ite	cc
    15a4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    15a8:	2000      	movcs	r0, #0
}
    15aa:	4770      	bx	lr
    15ac:	00008124 	.word	0x00008124
    15b0:	0000815c 	.word	0x0000815c

000015b4 <log_backend_enable>:
{
    15b4:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    15b6:	4c10      	ldr	r4, [pc, #64]	; (15f8 <log_backend_enable+0x44>)
{
    15b8:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
    15ba:	1b04      	subs	r4, r0, r4
    15bc:	1124      	asrs	r4, r4, #4
    15be:	3401      	adds	r4, #1
{
    15c0:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
    15c2:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
    15c4:	b948      	cbnz	r0, 15da <log_backend_enable+0x26>
    15c6:	490d      	ldr	r1, [pc, #52]	; (15fc <log_backend_enable+0x48>)
    15c8:	480d      	ldr	r0, [pc, #52]	; (1600 <log_backend_enable+0x4c>)
    15ca:	23d1      	movs	r3, #209	; 0xd1
    15cc:	4a0d      	ldr	r2, [pc, #52]	; (1604 <log_backend_enable+0x50>)
    15ce:	f005 fe03 	bl	71d8 <printk>
    15d2:	21d1      	movs	r1, #209	; 0xd1
    15d4:	480b      	ldr	r0, [pc, #44]	; (1604 <log_backend_enable+0x50>)
    15d6:	f005 fed8 	bl	738a <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    15da:	2201      	movs	r2, #1
	backend->cb->id = id;
    15dc:	686b      	ldr	r3, [r5, #4]
    15de:	711c      	strb	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    15e0:	4c09      	ldr	r4, [pc, #36]	; (1608 <log_backend_enable+0x54>)
	backend->cb->active = true;
    15e2:	715a      	strb	r2, [r3, #5]
    15e4:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    15e6:	601e      	str	r6, [r3, #0]
    15e8:	b912      	cbnz	r2, 15f0 <log_backend_enable+0x3c>
    15ea:	4808      	ldr	r0, [pc, #32]	; (160c <log_backend_enable+0x58>)
    15ec:	f003 fe78 	bl	52e0 <z_impl_k_sem_give>
	backend_attached = true;
    15f0:	2301      	movs	r3, #1
    15f2:	7023      	strb	r3, [r4, #0]
}
    15f4:	bd70      	pop	{r4, r5, r6, pc}
    15f6:	bf00      	nop
    15f8:	0000815c 	.word	0x0000815c
    15fc:	000086b3 	.word	0x000086b3
    1600:	00008496 	.word	0x00008496
    1604:	00008682 	.word	0x00008682
    1608:	20000b0c 	.word	0x20000b0c
    160c:	20000178 	.word	0x20000178

00001610 <log_init>:
	return __log_backends_end - __log_backends_start;
    1610:	4b18      	ldr	r3, [pc, #96]	; (1674 <log_init+0x64>)
    1612:	4a19      	ldr	r2, [pc, #100]	; (1678 <log_init+0x68>)
{
    1614:	b570      	push	{r4, r5, r6, lr}
    1616:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1618:	2b9f      	cmp	r3, #159	; 0x9f
    161a:	ea4f 1623 	mov.w	r6, r3, asr #4
    161e:	d90b      	bls.n	1638 <log_init+0x28>
    1620:	4916      	ldr	r1, [pc, #88]	; (167c <log_init+0x6c>)
    1622:	4817      	ldr	r0, [pc, #92]	; (1680 <log_init+0x70>)
    1624:	f240 234d 	movw	r3, #589	; 0x24d
    1628:	4a16      	ldr	r2, [pc, #88]	; (1684 <log_init+0x74>)
    162a:	f005 fdd5 	bl	71d8 <printk>
    162e:	f240 214d 	movw	r1, #589	; 0x24d
    1632:	4814      	ldr	r0, [pc, #80]	; (1684 <log_init+0x74>)
    1634:	f005 fea9 	bl	738a <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1638:	4b13      	ldr	r3, [pc, #76]	; (1688 <log_init+0x78>)
    163a:	e8d3 5fef 	ldaex	r5, [r3]
    163e:	1c6a      	adds	r2, r5, #1
    1640:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1644:	2900      	cmp	r1, #0
    1646:	d1f8      	bne.n	163a <log_init+0x2a>
	if (atomic_inc(&initialized) != 0) {
    1648:	b915      	cbnz	r5, 1650 <log_init+0x40>
    164a:	4c0b      	ldr	r4, [pc, #44]	; (1678 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    164c:	42b5      	cmp	r5, r6
    164e:	db00      	blt.n	1652 <log_init+0x42>
}
    1650:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1652:	7b23      	ldrb	r3, [r4, #12]
    1654:	b153      	cbz	r3, 166c <log_init+0x5c>
			if (backend->api->init != NULL) {
    1656:	6823      	ldr	r3, [r4, #0]
    1658:	699b      	ldr	r3, [r3, #24]
    165a:	b10b      	cbz	r3, 1660 <log_init+0x50>
				backend->api->init(backend);
    165c:	4620      	mov	r0, r4
    165e:	4798      	blx	r3
			log_backend_enable(backend,
    1660:	6863      	ldr	r3, [r4, #4]
    1662:	2204      	movs	r2, #4
    1664:	4620      	mov	r0, r4
    1666:	6819      	ldr	r1, [r3, #0]
    1668:	f7ff ffa4 	bl	15b4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    166c:	3501      	adds	r5, #1
    166e:	3410      	adds	r4, #16
    1670:	e7ec      	b.n	164c <log_init+0x3c>
    1672:	bf00      	nop
    1674:	0000816c 	.word	0x0000816c
    1678:	0000815c 	.word	0x0000815c
    167c:	000086ca 	.word	0x000086ca
    1680:	00008496 	.word	0x00008496
    1684:	0000863d 	.word	0x0000863d
    1688:	20000350 	.word	0x20000350

0000168c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    168c:	4b14      	ldr	r3, [pc, #80]	; (16e0 <z_log_strdup+0x54>)
{
    168e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    1690:	4298      	cmp	r0, r3
{
    1692:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1694:	d302      	bcc.n	169c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    1696:	4b13      	ldr	r3, [pc, #76]	; (16e4 <z_log_strdup+0x58>)
    1698:	4298      	cmp	r0, r3
    169a:	d31c      	bcc.n	16d6 <z_log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    169c:	2200      	movs	r2, #0
    169e:	2300      	movs	r3, #0
    16a0:	4811      	ldr	r0, [pc, #68]	; (16e8 <z_log_strdup+0x5c>)
    16a2:	a901      	add	r1, sp, #4
    16a4:	f003 fa12 	bl	4acc <k_mem_slab_alloc>
	if (err != 0) {
    16a8:	4605      	mov	r5, r0
    16aa:	b9b8      	cbnz	r0, 16dc <z_log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    16ac:	2201      	movs	r2, #1
    16ae:	9b01      	ldr	r3, [sp, #4]
    16b0:	e8d3 1fef 	ldaex	r1, [r3]
    16b4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    16b8:	2800      	cmp	r0, #0
    16ba:	d1f9      	bne.n	16b0 <z_log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    16bc:	9801      	ldr	r0, [sp, #4]
    16be:	4621      	mov	r1, r4
    16c0:	221f      	movs	r2, #31
    16c2:	3004      	adds	r0, #4
    16c4:	f006 f9a7 	bl	7a16 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    16c8:	237e      	movs	r3, #126	; 0x7e
    16ca:	9c01      	ldr	r4, [sp, #4]
    16cc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    16d0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    16d4:	3404      	adds	r4, #4
}
    16d6:	4620      	mov	r0, r4
    16d8:	b003      	add	sp, #12
    16da:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    16dc:	4c03      	ldr	r4, [pc, #12]	; (16ec <z_log_strdup+0x60>)
    16de:	e7fa      	b.n	16d6 <z_log_strdup+0x4a>
    16e0:	00007ea4 	.word	0x00007ea4
    16e4:	000099b0 	.word	0x000099b0
    16e8:	2000035c 	.word	0x2000035c
    16ec:	000086ee 	.word	0x000086ee

000016f0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    16f0:	b148      	cbz	r0, 1706 <log_is_strdup+0x16>
    16f2:	4b05      	ldr	r3, [pc, #20]	; (1708 <log_is_strdup+0x18>)
    16f4:	4298      	cmp	r0, r3
    16f6:	d305      	bcc.n	1704 <log_is_strdup+0x14>
    16f8:	33a0      	adds	r3, #160	; 0xa0
    16fa:	4298      	cmp	r0, r3
    16fc:	bf2c      	ite	cs
    16fe:	2000      	movcs	r0, #0
    1700:	2001      	movcc	r0, #1
    1702:	4770      	bx	lr
    1704:	2000      	movs	r0, #0
}
    1706:	4770      	bx	lr
    1708:	20005758 	.word	0x20005758

0000170c <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    170c:	4b46      	ldr	r3, [pc, #280]	; (1828 <z_impl_log_process+0x11c>)
{
    170e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    1712:	781b      	ldrb	r3, [r3, #0]
{
    1714:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1716:	b903      	cbnz	r3, 171a <z_impl_log_process+0xe>
    1718:	b1e0      	cbz	r0, 1754 <z_impl_log_process+0x48>
	msg = get_msg();
    171a:	f7ff fef3 	bl	1504 <get_msg>
	if (msg.msg) {
    171e:	4605      	mov	r5, r0
    1720:	b158      	cbz	r0, 173a <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1722:	4b42      	ldr	r3, [pc, #264]	; (182c <z_impl_log_process+0x120>)
    1724:	e8d3 2fef 	ldaex	r2, [r3]
    1728:	3a01      	subs	r2, #1
    172a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    172e:	2900      	cmp	r1, #0
    1730:	d1f8      	bne.n	1724 <z_impl_log_process+0x18>
	if (!bypass) {
    1732:	b19c      	cbz	r4, 175c <z_impl_log_process+0x50>
			log_msg_put(msg.msg);
    1734:	4628      	mov	r0, r5
    1736:	f005 ff3a 	bl	75ae <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    173a:	b92c      	cbnz	r4, 1748 <z_impl_log_process+0x3c>
	return dropped_cnt > 0;
    173c:	4b3c      	ldr	r3, [pc, #240]	; (1830 <z_impl_log_process+0x124>)
	if (!bypass && z_log_dropped_pending()) {
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	2b00      	cmp	r3, #0
    1742:	dd01      	ble.n	1748 <z_impl_log_process+0x3c>
		dropped_notify();
    1744:	f7ff ff0a 	bl	155c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    1748:	483a      	ldr	r0, [pc, #232]	; (1834 <z_impl_log_process+0x128>)
    174a:	f005 fe41 	bl	73d0 <log_list_head_peek>
    174e:	1e04      	subs	r4, r0, #0
    1750:	bf18      	it	ne
    1752:	2401      	movne	r4, #1
}
    1754:	4620      	mov	r0, r4
    1756:	b003      	add	sp, #12
    1758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    175c:	4b36      	ldr	r3, [pc, #216]	; (1838 <z_impl_log_process+0x12c>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    175e:	781b      	ldrb	r3, [r3, #0]
    1760:	b9b3      	cbnz	r3, 1790 <z_impl_log_process+0x84>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1762:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    1764:	07db      	lsls	r3, r3, #31
    1766:	d413      	bmi.n	1790 <z_impl_log_process+0x84>
	msg_str = log_msg_str_get(msg);
    1768:	f005 ff30 	bl	75cc <log_msg_str_get>
    176c:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    176e:	4628      	mov	r0, r5
    1770:	f005 fefb 	bl	756a <log_msg_nargs_get>
    1774:	4601      	mov	r1, r0
    1776:	4648      	mov	r0, r9
    1778:	f7ff fe6c 	bl	1454 <z_log_get_s_mask>
    177c:	4607      	mov	r7, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    177e:	4a2f      	ldr	r2, [pc, #188]	; (183c <z_impl_log_process+0x130>)
    1780:	4b2f      	ldr	r3, [pc, #188]	; (1840 <z_impl_log_process+0x134>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    1782:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1864 <z_impl_log_process+0x158>
    1786:	1a9b      	subs	r3, r3, r2
    1788:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
    178c:	9201      	str	r2, [sp, #4]
	while (mask) {
    178e:	b937      	cbnz	r7, 179e <z_impl_log_process+0x92>
    1790:	4e2c      	ldr	r6, [pc, #176]	; (1844 <z_impl_log_process+0x138>)
    1792:	4f2d      	ldr	r7, [pc, #180]	; (1848 <z_impl_log_process+0x13c>)
    1794:	f04f 0800 	mov.w	r8, #0
    1798:	1bbf      	subs	r7, r7, r6
    179a:	113f      	asrs	r7, r7, #4
    179c:	e041      	b.n	1822 <z_impl_log_process+0x116>
		idx = 31 - __builtin_clz(mask);
    179e:	fab7 f887 	clz	r8, r7
    17a2:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    17a6:	4641      	mov	r1, r8
    17a8:	4628      	mov	r0, r5
    17aa:	f005 fee1 	bl	7570 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    17ae:	4b27      	ldr	r3, [pc, #156]	; (184c <z_impl_log_process+0x140>)
		str = (const char *)log_msg_arg_get(msg, idx);
    17b0:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    17b2:	4298      	cmp	r0, r3
    17b4:	d302      	bcc.n	17bc <z_impl_log_process+0xb0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    17b6:	4b26      	ldr	r3, [pc, #152]	; (1850 <z_impl_log_process+0x144>)
    17b8:	4298      	cmp	r0, r3
    17ba:	d320      	bcc.n	17fe <z_impl_log_process+0xf2>
    17bc:	4610      	mov	r0, r2
    17be:	f7ff ff97 	bl	16f0 <log_is_strdup>
    17c2:	4606      	mov	r6, r0
    17c4:	b9d8      	cbnz	r0, 17fe <z_impl_log_process+0xf2>
    17c6:	4b23      	ldr	r3, [pc, #140]	; (1854 <z_impl_log_process+0x148>)
    17c8:	429a      	cmp	r2, r3
    17ca:	d018      	beq.n	17fe <z_impl_log_process+0xf2>
	return msg->hdr.ids.source_id;
    17cc:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    17ce:	4922      	ldr	r1, [pc, #136]	; (1858 <z_impl_log_process+0x14c>)
    17d0:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    17d4:	455b      	cmp	r3, fp
	return __log_const_start[source_id].name;
    17d6:	bf38      	it	cc
    17d8:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    17da:	4820      	ldr	r0, [pc, #128]	; (185c <z_impl_log_process+0x150>)
    17dc:	bf38      	it	cc
    17de:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
    17e2:	23d0      	movs	r3, #208	; 0xd0
    17e4:	4652      	mov	r2, sl
    17e6:	f005 fcf7 	bl	71d8 <printk>
    17ea:	4641      	mov	r1, r8
    17ec:	481c      	ldr	r0, [pc, #112]	; (1860 <z_impl_log_process+0x154>)
    17ee:	464b      	mov	r3, r9
    17f0:	4632      	mov	r2, r6
    17f2:	f005 fcf1 	bl	71d8 <printk>
    17f6:	21d0      	movs	r1, #208	; 0xd0
    17f8:	4650      	mov	r0, sl
    17fa:	f005 fdc6 	bl	738a <assert_post_action>
		mask &= ~BIT(idx);
    17fe:	2301      	movs	r3, #1
    1800:	fa03 f808 	lsl.w	r8, r3, r8
    1804:	ea27 0708 	bic.w	r7, r7, r8
    1808:	e7c1      	b.n	178e <z_impl_log_process+0x82>
			if (log_backend_is_active(backend) &&
    180a:	4630      	mov	r0, r6
    180c:	f005 fde8 	bl	73e0 <log_backend_is_active>
    1810:	b120      	cbz	r0, 181c <z_impl_log_process+0x110>
	backend->api->put(backend, msg);
    1812:	6833      	ldr	r3, [r6, #0]
    1814:	4629      	mov	r1, r5
    1816:	4630      	mov	r0, r6
    1818:	685b      	ldr	r3, [r3, #4]
    181a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    181c:	f108 0801 	add.w	r8, r8, #1
    1820:	3610      	adds	r6, #16
    1822:	45b8      	cmp	r8, r7
    1824:	dbf1      	blt.n	180a <z_impl_log_process+0xfe>
    1826:	e785      	b.n	1734 <z_impl_log_process+0x28>
    1828:	20000b0c 	.word	0x20000b0c
    182c:	20000348 	.word	0x20000348
    1830:	2000034c 	.word	0x2000034c
    1834:	20000354 	.word	0x20000354
    1838:	20000b0d 	.word	0x20000b0d
    183c:	00008124 	.word	0x00008124
    1840:	0000815c 	.word	0x0000815c
    1844:	0000815c 	.word	0x0000815c
    1848:	0000816c 	.word	0x0000816c
    184c:	00007ea4 	.word	0x00007ea4
    1850:	000099b0 	.word	0x000099b0
    1854:	000086ee 	.word	0x000086ee
    1858:	0000853e 	.word	0x0000853e
    185c:	00008496 	.word	0x00008496
    1860:	00008708 	.word	0x00008708
    1864:	0000863d 	.word	0x0000863d

00001868 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    1868:	4b27      	ldr	r3, [pc, #156]	; (1908 <msg_finalize+0xa0>)
{
    186a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    186c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    186e:	8141      	strh	r1, [r0, #10]
{
    1870:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1872:	4798      	blx	r3
    1874:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1876:	f04f 0320 	mov.w	r3, #32
    187a:	f3ef 8511 	mrs	r5, BASEPRI
    187e:	f383 8811 	msr	BASEPRI, r3
    1882:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1886:	4821      	ldr	r0, [pc, #132]	; (190c <msg_finalize+0xa4>)
    1888:	4621      	mov	r1, r4
    188a:	f005 fd97 	bl	73bc <log_list_add_tail>
	__asm__ volatile(
    188e:	f385 8811 	msr	BASEPRI, r5
    1892:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1896:	4b1e      	ldr	r3, [pc, #120]	; (1910 <msg_finalize+0xa8>)
    1898:	e8d3 2fef 	ldaex	r2, [r3]
    189c:	3201      	adds	r2, #1
    189e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    18a2:	2900      	cmp	r1, #0
    18a4:	d1f8      	bne.n	1898 <msg_finalize+0x30>
	if (panic_mode) {
    18a6:	4a1b      	ldr	r2, [pc, #108]	; (1914 <msg_finalize+0xac>)
    18a8:	7812      	ldrb	r2, [r2, #0]
    18aa:	b182      	cbz	r2, 18ce <msg_finalize+0x66>
	__asm__ volatile(
    18ac:	f04f 0320 	mov.w	r3, #32
    18b0:	f3ef 8411 	mrs	r4, BASEPRI
    18b4:	f383 8811 	msr	BASEPRI, r3
    18b8:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    18bc:	2000      	movs	r0, #0
    18be:	f7ff ff25 	bl	170c <z_impl_log_process>
	__asm__ volatile(
    18c2:	f384 8811 	msr	BASEPRI, r4
    18c6:	f3bf 8f6f 	isb	sy
}
    18ca:	b003      	add	sp, #12
    18cc:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    18ce:	4a12      	ldr	r2, [pc, #72]	; (1918 <msg_finalize+0xb0>)
    18d0:	681b      	ldr	r3, [r3, #0]
    18d2:	6812      	ldr	r2, [r2, #0]
    18d4:	2a00      	cmp	r2, #0
    18d6:	d0f8      	beq.n	18ca <msg_finalize+0x62>
    18d8:	2b01      	cmp	r3, #1
    18da:	d10a      	bne.n	18f2 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    18dc:	2200      	movs	r2, #0
    18de:	2300      	movs	r3, #0
    18e0:	480e      	ldr	r0, [pc, #56]	; (191c <msg_finalize+0xb4>)
    18e2:	e9cd 2300 	strd	r2, r3, [sp]
    18e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    18ea:	2300      	movs	r3, #0
    18ec:	f005 fa94 	bl	6e18 <z_impl_k_timer_start>
    18f0:	e7eb      	b.n	18ca <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    18f2:	2b0a      	cmp	r3, #10
    18f4:	d1e9      	bne.n	18ca <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    18f6:	4809      	ldr	r0, [pc, #36]	; (191c <msg_finalize+0xb4>)
    18f8:	f006 fab1 	bl	7e5e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    18fc:	4808      	ldr	r0, [pc, #32]	; (1920 <msg_finalize+0xb8>)
}
    18fe:	b003      	add	sp, #12
    1900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1904:	f003 bcec 	b.w	52e0 <z_impl_k_sem_give>
    1908:	20000004 	.word	0x20000004
    190c:	20000354 	.word	0x20000354
    1910:	20000348 	.word	0x20000348
    1914:	20000b0d 	.word	0x20000b0d
    1918:	2000037c 	.word	0x2000037c
    191c:	20000188 	.word	0x20000188
    1920:	20000178 	.word	0x20000178

00001924 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
    1924:	4b16      	ldr	r3, [pc, #88]	; (1980 <log_process_thread_func+0x5c>)
    1926:	4a17      	ldr	r2, [pc, #92]	; (1984 <log_process_thread_func+0x60>)
{
    1928:	b510      	push	{r4, lr}
    192a:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    192c:	2b00      	cmp	r3, #0
    192e:	dc0b      	bgt.n	1948 <log_process_thread_func+0x24>
    1930:	4915      	ldr	r1, [pc, #84]	; (1988 <log_process_thread_func+0x64>)
    1932:	4816      	ldr	r0, [pc, #88]	; (198c <log_process_thread_func+0x68>)
    1934:	f240 536d 	movw	r3, #1389	; 0x56d
    1938:	4a15      	ldr	r2, [pc, #84]	; (1990 <log_process_thread_func+0x6c>)
    193a:	f005 fc4d 	bl	71d8 <printk>
    193e:	f240 516d 	movw	r1, #1389	; 0x56d
    1942:	4813      	ldr	r0, [pc, #76]	; (1990 <log_process_thread_func+0x6c>)
    1944:	f005 fd21 	bl	738a <assert_post_action>
	log_init();
    1948:	f7ff fe62 	bl	1610 <log_init>
	return z_impl_k_current_get();
    194c:	f004 fe44 	bl	65d8 <z_impl_k_current_get>
	proc_tid = process_tid;
    1950:	4b10      	ldr	r3, [pc, #64]	; (1994 <log_process_thread_func+0x70>)
    1952:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1954:	b130      	cbz	r0, 1964 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1956:	4b10      	ldr	r3, [pc, #64]	; (1998 <log_process_thread_func+0x74>)
	    process_tid &&
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	2b09      	cmp	r3, #9
    195c:	dd02      	ble.n	1964 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
    195e:	480f      	ldr	r0, [pc, #60]	; (199c <log_process_thread_func+0x78>)
    1960:	f003 fcbe 	bl	52e0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    1964:	4c0d      	ldr	r4, [pc, #52]	; (199c <log_process_thread_func+0x78>)
    1966:	2000      	movs	r0, #0
    1968:	f7ff fed0 	bl	170c <z_impl_log_process>
		if (log_process(false) == false) {
    196c:	2800      	cmp	r0, #0
    196e:	d1fa      	bne.n	1966 <log_process_thread_func+0x42>
    1970:	f04f 32ff 	mov.w	r2, #4294967295
    1974:	f04f 33ff 	mov.w	r3, #4294967295
    1978:	4620      	mov	r0, r4
    197a:	f003 fcef 	bl	535c <z_impl_k_sem_take>
    197e:	e7f2      	b.n	1966 <log_process_thread_func+0x42>
    1980:	0000816c 	.word	0x0000816c
    1984:	0000815c 	.word	0x0000815c
    1988:	00008749 	.word	0x00008749
    198c:	00008496 	.word	0x00008496
    1990:	0000863d 	.word	0x0000863d
    1994:	2000037c 	.word	0x2000037c
    1998:	20000348 	.word	0x20000348
    199c:	20000178 	.word	0x20000178

000019a0 <z_impl_log_panic>:
{
    19a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    19a2:	4f0f      	ldr	r7, [pc, #60]	; (19e0 <z_impl_log_panic+0x40>)
    19a4:	783d      	ldrb	r5, [r7, #0]
    19a6:	b975      	cbnz	r5, 19c6 <z_impl_log_panic+0x26>
	log_init();
    19a8:	f7ff fe32 	bl	1610 <log_init>
    19ac:	4c0d      	ldr	r4, [pc, #52]	; (19e4 <z_impl_log_panic+0x44>)
    19ae:	4e0e      	ldr	r6, [pc, #56]	; (19e8 <z_impl_log_panic+0x48>)
    19b0:	1b36      	subs	r6, r6, r4
    19b2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    19b4:	42b5      	cmp	r5, r6
    19b6:	db07      	blt.n	19c8 <z_impl_log_panic+0x28>
    19b8:	2000      	movs	r0, #0
    19ba:	f7ff fea7 	bl	170c <z_impl_log_process>
		while (log_process(false) == true) {
    19be:	2800      	cmp	r0, #0
    19c0:	d1fa      	bne.n	19b8 <z_impl_log_panic+0x18>
	panic_mode = true;
    19c2:	2301      	movs	r3, #1
    19c4:	703b      	strb	r3, [r7, #0]
}
    19c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    19c8:	4620      	mov	r0, r4
    19ca:	f005 fd09 	bl	73e0 <log_backend_is_active>
    19ce:	b118      	cbz	r0, 19d8 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
    19d0:	6823      	ldr	r3, [r4, #0]
    19d2:	4620      	mov	r0, r4
    19d4:	695b      	ldr	r3, [r3, #20]
    19d6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    19d8:	3501      	adds	r5, #1
    19da:	3410      	adds	r4, #16
    19dc:	e7ea      	b.n	19b4 <z_impl_log_panic+0x14>
    19de:	bf00      	nop
    19e0:	20000b0d 	.word	0x20000b0d
    19e4:	0000815c 	.word	0x0000815c
    19e8:	0000816c 	.word	0x0000816c

000019ec <log_free>:
{
    19ec:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    19ee:	3804      	subs	r0, #4
    19f0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    19f2:	e8d0 3fef 	ldaex	r3, [r0]
    19f6:	1e5a      	subs	r2, r3, #1
    19f8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    19fc:	2900      	cmp	r1, #0
    19fe:	d1f8      	bne.n	19f2 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    1a00:	2b01      	cmp	r3, #1
    1a02:	d103      	bne.n	1a0c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1a04:	4803      	ldr	r0, [pc, #12]	; (1a14 <log_free+0x28>)
    1a06:	a901      	add	r1, sp, #4
    1a08:	f003 f8cc 	bl	4ba4 <k_mem_slab_free>
}
    1a0c:	b003      	add	sp, #12
    1a0e:	f85d fb04 	ldr.w	pc, [sp], #4
    1a12:	bf00      	nop
    1a14:	2000035c 	.word	0x2000035c

00001a18 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1a18:	2320      	movs	r3, #32
    1a1a:	4902      	ldr	r1, [pc, #8]	; (1a24 <log_msg_pool_init+0xc>)
    1a1c:	461a      	mov	r2, r3
    1a1e:	4802      	ldr	r0, [pc, #8]	; (1a28 <log_msg_pool_init+0x10>)
    1a20:	f006 b9b4 	b.w	7d8c <k_mem_slab_init>
    1a24:	200057f8 	.word	0x200057f8
    1a28:	20000380 	.word	0x20000380

00001a2c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    1a2c:	2300      	movs	r3, #0
{
    1a2e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    1a30:	4d09      	ldr	r5, [pc, #36]	; (1a58 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    1a32:	9301      	str	r3, [sp, #4]
    1a34:	2001      	movs	r0, #1
    1a36:	f7ff fe69 	bl	170c <z_impl_log_process>
    1a3a:	4604      	mov	r4, r0
			z_log_dropped();
    1a3c:	f7ff fd76 	bl	152c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1a40:	2200      	movs	r2, #0
    1a42:	2300      	movs	r3, #0
    1a44:	4628      	mov	r0, r5
    1a46:	a901      	add	r1, sp, #4
    1a48:	f003 f840 	bl	4acc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1a4c:	b108      	cbz	r0, 1a52 <log_msg_no_space_handle+0x26>
    1a4e:	2c00      	cmp	r4, #0
    1a50:	d1f0      	bne.n	1a34 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    1a52:	9801      	ldr	r0, [sp, #4]
    1a54:	b003      	add	sp, #12
    1a56:	bd30      	pop	{r4, r5, pc}
    1a58:	20000380 	.word	0x20000380

00001a5c <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    1a5c:	2300      	movs	r3, #0
{
    1a5e:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1a60:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    1a62:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1a64:	4806      	ldr	r0, [pc, #24]	; (1a80 <log_msg_chunk_alloc+0x24>)
    1a66:	2300      	movs	r3, #0
    1a68:	a901      	add	r1, sp, #4
    1a6a:	f003 f82f 	bl	4acc <k_mem_slab_alloc>
	if (err != 0) {
    1a6e:	b110      	cbz	r0, 1a76 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    1a70:	f7ff ffdc 	bl	1a2c <log_msg_no_space_handle>
    1a74:	9001      	str	r0, [sp, #4]
}
    1a76:	9801      	ldr	r0, [sp, #4]
    1a78:	b003      	add	sp, #12
    1a7a:	f85d fb04 	ldr.w	pc, [sp], #4
    1a7e:	bf00      	nop
    1a80:	20000380 	.word	0x20000380

00001a84 <msg_free>:
{
    1a84:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1a86:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    1a88:	7a45      	ldrb	r5, [r0, #9]
{
    1a8a:	b085      	sub	sp, #20
    1a8c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    1a8e:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    1a90:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    1a94:	d41c      	bmi.n	1ad0 <msg_free+0x4c>
    1a96:	b1dd      	cbz	r5, 1ad0 <msg_free+0x4c>
		uint32_t smask = 0U;
    1a98:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    1a9a:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    1a9c:	4631      	mov	r1, r6
    1a9e:	9801      	ldr	r0, [sp, #4]
    1aa0:	f005 fd66 	bl	7570 <log_msg_arg_get>
    1aa4:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    1aa6:	f7ff fe23 	bl	16f0 <log_is_strdup>
    1aaa:	b170      	cbz	r0, 1aca <msg_free+0x46>
				if (smask == 0U) {
    1aac:	b934      	cbnz	r4, 1abc <msg_free+0x38>
					smask = z_log_get_s_mask(
    1aae:	9b01      	ldr	r3, [sp, #4]
    1ab0:	4629      	mov	r1, r5
    1ab2:	6918      	ldr	r0, [r3, #16]
    1ab4:	f7ff fcce 	bl	1454 <z_log_get_s_mask>
					if (smask == 0U) {
    1ab8:	4604      	mov	r4, r0
    1aba:	b148      	cbz	r0, 1ad0 <msg_free+0x4c>
				if (smask & BIT(i)) {
    1abc:	fa24 f306 	lsr.w	r3, r4, r6
    1ac0:	07d9      	lsls	r1, r3, #31
    1ac2:	d502      	bpl.n	1aca <msg_free+0x46>
					log_free(buf);
    1ac4:	4638      	mov	r0, r7
    1ac6:	f7ff ff91 	bl	19ec <log_free>
		for (i = 0U; i < nargs; i++) {
    1aca:	3601      	adds	r6, #1
    1acc:	42ae      	cmp	r6, r5
    1ace:	d3e5      	bcc.n	1a9c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    1ad0:	9b01      	ldr	r3, [sp, #4]
    1ad2:	7a1a      	ldrb	r2, [r3, #8]
    1ad4:	0792      	lsls	r2, r2, #30
    1ad6:	d504      	bpl.n	1ae2 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    1ad8:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1ada:	4c08      	ldr	r4, [pc, #32]	; (1afc <msg_free+0x78>)
    1adc:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    1ade:	9b03      	ldr	r3, [sp, #12]
    1ae0:	b92b      	cbnz	r3, 1aee <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <msg_free+0x78>)
    1ae4:	a901      	add	r1, sp, #4
    1ae6:	f003 f85d 	bl	4ba4 <k_mem_slab_free>
}
    1aea:	b005      	add	sp, #20
    1aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    1aee:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1af0:	4620      	mov	r0, r4
    1af2:	a903      	add	r1, sp, #12
    1af4:	f003 f856 	bl	4ba4 <k_mem_slab_free>
		cont = next;
    1af8:	9503      	str	r5, [sp, #12]
    1afa:	e7f0      	b.n	1ade <msg_free+0x5a>
    1afc:	20000380 	.word	0x20000380

00001b00 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1b00:	b40e      	push	{r1, r2, r3}
    1b02:	b503      	push	{r0, r1, lr}
    1b04:	ab03      	add	r3, sp, #12
    1b06:	f853 2b04 	ldr.w	r2, [r3], #4
    1b0a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1b0c:	4804      	ldr	r0, [pc, #16]	; (1b20 <print_formatted+0x20>)
	va_start(args, fmt);
    1b0e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1b10:	f7ff f802 	bl	b18 <cbvprintf>
	va_end(args);

	return length;
}
    1b14:	b002      	add	sp, #8
    1b16:	f85d eb04 	ldr.w	lr, [sp], #4
    1b1a:	b003      	add	sp, #12
    1b1c:	4770      	bx	lr
    1b1e:	bf00      	nop
    1b20:	00001d5d 	.word	0x00001d5d

00001b24 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    1b28:	f011 0602 	ands.w	r6, r1, #2
{
    1b2c:	b087      	sub	sp, #28
    1b2e:	9205      	str	r2, [sp, #20]
    1b30:	4607      	mov	r7, r0
    1b32:	461a      	mov	r2, r3
    1b34:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    1b38:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1b3c:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1b40:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    1b44:	d006      	beq.n	1b54 <prefix_print+0x30>
	if (!format) {
    1b46:	f011 0f44 	tst.w	r1, #68	; 0x44
    1b4a:	d138      	bne.n	1bbe <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1b4c:	4932      	ldr	r1, [pc, #200]	; (1c18 <prefix_print+0xf4>)
    1b4e:	f7ff ffd7 	bl	1b00 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1b52:	4606      	mov	r6, r0
	if (color) {
    1b54:	f1ba 0f00 	cmp.w	sl, #0
    1b58:	d00a      	beq.n	1b70 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    1b5a:	4b30      	ldr	r3, [pc, #192]	; (1c1c <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
    1b5c:	4638      	mov	r0, r7
		const char *log_color = start && (colors[level] != NULL) ?
    1b5e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    1b62:	4b2f      	ldr	r3, [pc, #188]	; (1c20 <prefix_print+0xfc>)
    1b64:	492f      	ldr	r1, [pc, #188]	; (1c24 <prefix_print+0x100>)
    1b66:	2a00      	cmp	r2, #0
    1b68:	bf08      	it	eq
    1b6a:	461a      	moveq	r2, r3
    1b6c:	f7ff ffc8 	bl	1b00 <print_formatted>
	if (level_on) {
    1b70:	b13d      	cbz	r5, 1b82 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    1b72:	4b2d      	ldr	r3, [pc, #180]	; (1c28 <prefix_print+0x104>)
    1b74:	4638      	mov	r0, r7
    1b76:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    1b7a:	492c      	ldr	r1, [pc, #176]	; (1c2c <prefix_print+0x108>)
    1b7c:	f7ff ffc0 	bl	1b00 <print_formatted>
    1b80:	4605      	mov	r5, r0
	if (source_id >= 0) {
    1b82:	f1b9 0f00 	cmp.w	r9, #0
    1b86:	db16      	blt.n	1bb6 <prefix_print+0x92>
		total += print_formatted(output,
    1b88:	9b05      	ldr	r3, [sp, #20]
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d041      	beq.n	1c12 <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1b8e:	2301      	movs	r3, #1
    1b90:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    1b94:	4b26      	ldr	r3, [pc, #152]	; (1c30 <prefix_print+0x10c>)
    1b96:	f018 0f10 	tst.w	r8, #16
    1b9a:	4c26      	ldr	r4, [pc, #152]	; (1c34 <prefix_print+0x110>)
    1b9c:	bf18      	it	ne
    1b9e:	461c      	movne	r4, r3
    1ba0:	4649      	mov	r1, r9
    1ba2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1ba6:	f7ff fcf7 	bl	1598 <log_source_name_get>
    1baa:	4621      	mov	r1, r4
    1bac:	4602      	mov	r2, r0
    1bae:	4638      	mov	r0, r7
    1bb0:	f7ff ffa6 	bl	1b00 <print_formatted>
    1bb4:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1bb6:	19a8      	adds	r0, r5, r6
    1bb8:	b007      	add	sp, #28
    1bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    1bbe:	4b1e      	ldr	r3, [pc, #120]	; (1c38 <prefix_print+0x114>)
    1bc0:	6819      	ldr	r1, [r3, #0]
    1bc2:	b321      	cbz	r1, 1c0e <prefix_print+0xea>
		timestamp /= timestamp_div;
    1bc4:	4b1d      	ldr	r3, [pc, #116]	; (1c3c <prefix_print+0x118>)
    1bc6:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    1bca:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
    1bcc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1bd0:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
    1bd4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    1bd8:	fbb4 f2fc 	udiv	r2, r4, ip
    1bdc:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    1be0:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    1be4:	4374      	muls	r4, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1be6:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    1bea:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1bee:	fb01 441b 	mls	r4, r1, fp, r4
    1bf2:	4374      	muls	r4, r6
		mins = seconds / 60U;
    1bf4:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1bf8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    1bfc:	e9cd b101 	strd	fp, r1, [sp, #4]
    1c00:	fb0e c113 	mls	r1, lr, r3, ip
    1c04:	9100      	str	r1, [sp, #0]
    1c06:	490e      	ldr	r1, [pc, #56]	; (1c40 <prefix_print+0x11c>)
    1c08:	f7ff ff7a 	bl	1b00 <print_formatted>
    1c0c:	e7a1      	b.n	1b52 <prefix_print+0x2e>
		length = 0;
    1c0e:	4608      	mov	r0, r1
    1c10:	e79f      	b.n	1b52 <prefix_print+0x2e>
		total += print_formatted(output,
    1c12:	4c08      	ldr	r4, [pc, #32]	; (1c34 <prefix_print+0x110>)
    1c14:	e7c4      	b.n	1ba0 <prefix_print+0x7c>
    1c16:	bf00      	nop
    1c18:	00008777 	.word	0x00008777
    1c1c:	000081a8 	.word	0x000081a8
    1c20:	00008769 	.word	0x00008769
    1c24:	0000879c 	.word	0x0000879c
    1c28:	000081bc 	.word	0x000081bc
    1c2c:	0000879f 	.word	0x0000879f
    1c30:	00008773 	.word	0x00008773
    1c34:	0000876e 	.word	0x0000876e
    1c38:	200003a0 	.word	0x200003a0
    1c3c:	200003a4 	.word	0x200003a4
    1c40:	00008780 	.word	0x00008780

00001c44 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1c44:	b538      	push	{r3, r4, r5, lr}
    1c46:	460c      	mov	r4, r1
	if (color) {
    1c48:	07e1      	lsls	r1, r4, #31
{
    1c4a:	4605      	mov	r5, r0
	if (color) {
    1c4c:	d503      	bpl.n	1c56 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1c4e:	4a08      	ldr	r2, [pc, #32]	; (1c70 <postfix_print+0x2c>)
    1c50:	4908      	ldr	r1, [pc, #32]	; (1c74 <postfix_print+0x30>)
    1c52:	f7ff ff55 	bl	1b00 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c56:	06e2      	lsls	r2, r4, #27
    1c58:	d408      	bmi.n	1c6c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c5a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1c5c:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    1c62:	bf4c      	ite	mi
    1c64:	4904      	ldrmi	r1, [pc, #16]	; (1c78 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1c66:	4905      	ldrpl	r1, [pc, #20]	; (1c7c <postfix_print+0x38>)
    1c68:	f7ff bf4a 	b.w	1b00 <print_formatted>
}
    1c6c:	bd38      	pop	{r3, r4, r5, pc}
    1c6e:	bf00      	nop
    1c70:	00008769 	.word	0x00008769
    1c74:	0000879c 	.word	0x0000879c
    1c78:	0000977e 	.word	0x0000977e
    1c7c:	000087a5 	.word	0x000087a5

00001c80 <hexdump_line_print>:
{
    1c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c84:	461d      	mov	r5, r3
    1c86:	9b08      	ldr	r3, [sp, #32]
    1c88:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c8a:	06da      	lsls	r2, r3, #27
{
    1c8c:	4604      	mov	r4, r0
    1c8e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c90:	d405      	bmi.n	1c9e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c92:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1c94:	bf4c      	ite	mi
    1c96:	492a      	ldrmi	r1, [pc, #168]	; (1d40 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1c98:	492a      	ldrpl	r1, [pc, #168]	; (1d44 <hexdump_line_print+0xc4>)
    1c9a:	f7ff ff31 	bl	1b00 <print_formatted>
{
    1c9e:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
    1ca2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1d4c <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    1ca6:	45a8      	cmp	r8, r5
    1ca8:	db2a      	blt.n	1d00 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1caa:	2500      	movs	r5, #0
			print_formatted(output, "   ");
    1cac:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1d50 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    1cb0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1d54 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    1cb4:	f8df a094 	ldr.w	sl, [pc, #148]	; 1d4c <hexdump_line_print+0xcc>
		if (i < length) {
    1cb8:	42bd      	cmp	r5, r7
    1cba:	d22f      	bcs.n	1d1c <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1cbc:	4649      	mov	r1, r9
    1cbe:	4620      	mov	r0, r4
    1cc0:	5d72      	ldrb	r2, [r6, r5]
    1cc2:	f7ff ff1d 	bl	1b00 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cc6:	3501      	adds	r5, #1
    1cc8:	2d10      	cmp	r5, #16
    1cca:	d120      	bne.n	1d0e <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    1ccc:	4620      	mov	r0, r4
    1cce:	491e      	ldr	r1, [pc, #120]	; (1d48 <hexdump_line_print+0xc8>)
    1cd0:	f7ff ff16 	bl	1b00 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cd4:	2500      	movs	r5, #0
			print_formatted(output, " ");
    1cd6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1d4c <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
    1cda:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1d58 <hexdump_line_print+0xd8>
		if (i < length) {
    1cde:	42af      	cmp	r7, r5
    1ce0:	d928      	bls.n	1d34 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1ce2:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    1ce4:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    1ce6:	f1a2 0320 	sub.w	r3, r2, #32
    1cea:	2b5f      	cmp	r3, #95	; 0x5f
    1cec:	bf28      	it	cs
    1cee:	222e      	movcs	r2, #46	; 0x2e
    1cf0:	4620      	mov	r0, r4
    1cf2:	f7ff ff05 	bl	1b00 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cf6:	3501      	adds	r5, #1
    1cf8:	2d10      	cmp	r5, #16
    1cfa:	d114      	bne.n	1d26 <hexdump_line_print+0xa6>
}
    1cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1d00:	4649      	mov	r1, r9
    1d02:	4620      	mov	r0, r4
    1d04:	f7ff fefc 	bl	1b00 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1d08:	f108 0801 	add.w	r8, r8, #1
    1d0c:	e7cb      	b.n	1ca6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1d0e:	076a      	lsls	r2, r5, #29
    1d10:	d1d2      	bne.n	1cb8 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1d12:	4651      	mov	r1, sl
    1d14:	4620      	mov	r0, r4
    1d16:	f7ff fef3 	bl	1b00 <print_formatted>
    1d1a:	e7cd      	b.n	1cb8 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1d1c:	4641      	mov	r1, r8
    1d1e:	4620      	mov	r0, r4
    1d20:	f7ff feee 	bl	1b00 <print_formatted>
    1d24:	e7cf      	b.n	1cc6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1d26:	076b      	lsls	r3, r5, #29
    1d28:	d1d9      	bne.n	1cde <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1d2a:	4641      	mov	r1, r8
    1d2c:	4620      	mov	r0, r4
    1d2e:	f7ff fee7 	bl	1b00 <print_formatted>
    1d32:	e7d4      	b.n	1cde <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1d34:	4641      	mov	r1, r8
    1d36:	4620      	mov	r0, r4
    1d38:	f7ff fee2 	bl	1b00 <print_formatted>
    1d3c:	e7db      	b.n	1cf6 <hexdump_line_print+0x76>
    1d3e:	bf00      	nop
    1d40:	0000977e 	.word	0x0000977e
    1d44:	000087a5 	.word	0x000087a5
    1d48:	000087b2 	.word	0x000087b2
    1d4c:	000087b0 	.word	0x000087b0
    1d50:	000087ae 	.word	0x000087ae
    1d54:	000087a8 	.word	0x000087a8
    1d58:	000087b4 	.word	0x000087b4

00001d5c <out_func>:
{
    1d5c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    1d5e:	684b      	ldr	r3, [r1, #4]
{
    1d60:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    1d62:	681a      	ldr	r2, [r3, #0]
    1d64:	68cb      	ldr	r3, [r1, #12]
{
    1d66:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    1d68:	429a      	cmp	r2, r3
    1d6a:	d102      	bne.n	1d72 <out_func+0x16>
		log_output_flush(out_ctx);
    1d6c:	4608      	mov	r0, r1
    1d6e:	f005 fda0 	bl	78b2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1d72:	6863      	ldr	r3, [r4, #4]
    1d74:	e8d3 2fef 	ldaex	r2, [r3]
    1d78:	1c51      	adds	r1, r2, #1
    1d7a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1d7e:	2800      	cmp	r0, #0
    1d80:	d1f8      	bne.n	1d74 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    1d82:	68a3      	ldr	r3, [r4, #8]
    1d84:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    1d86:	6863      	ldr	r3, [r4, #4]
    1d88:	681a      	ldr	r2, [r3, #0]
    1d8a:	68e3      	ldr	r3, [r4, #12]
    1d8c:	429a      	cmp	r2, r3
    1d8e:	d909      	bls.n	1da4 <out_func+0x48>
    1d90:	4905      	ldr	r1, [pc, #20]	; (1da8 <out_func+0x4c>)
    1d92:	4806      	ldr	r0, [pc, #24]	; (1dac <out_func+0x50>)
    1d94:	2373      	movs	r3, #115	; 0x73
    1d96:	4a06      	ldr	r2, [pc, #24]	; (1db0 <out_func+0x54>)
    1d98:	f005 fa1e 	bl	71d8 <printk>
    1d9c:	2173      	movs	r1, #115	; 0x73
    1d9e:	4804      	ldr	r0, [pc, #16]	; (1db0 <out_func+0x54>)
    1da0:	f005 faf3 	bl	738a <assert_post_action>
}
    1da4:	2000      	movs	r0, #0
    1da6:	bd38      	pop	{r3, r4, r5, pc}
    1da8:	000087e6 	.word	0x000087e6
    1dac:	00008496 	.word	0x00008496
    1db0:	000087b7 	.word	0x000087b7

00001db4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    1db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1db8:	7a8b      	ldrb	r3, [r1, #10]
    1dba:	4616      	mov	r6, r2
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    1dbc:	f013 0707 	ands.w	r7, r3, #7
{
    1dc0:	4604      	mov	r4, r0
    1dc2:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1dc4:	7a0a      	ldrb	r2, [r1, #8]
    1dc6:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(output, flags, std_msg, timestamp,
    1dc8:	d020      	beq.n	1e0c <log_output_msg_process+0x58>
    1dca:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    1dcc:	8949      	ldrh	r1, [r1, #10]
    1dce:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1dd2:	f3c1 1189 	ubfx	r1, r1, #6, #10
    1dd6:	e9cd 7300 	strd	r7, r3, [sp]
    1dda:	9102      	str	r1, [sp, #8]
    1ddc:	68eb      	ldr	r3, [r5, #12]
    1dde:	4631      	mov	r1, r6
    1de0:	f002 0201 	and.w	r2, r2, #1
    1de4:	f7ff fe9e 	bl	1b24 <prefix_print>
    1de8:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1dea:	7a2b      	ldrb	r3, [r5, #8]
    1dec:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    1dee:	f013 0801 	ands.w	r8, r3, #1
    1df2:	d00d      	beq.n	1e10 <log_output_msg_process+0x5c>
		std_print(msg, output);
    1df4:	4621      	mov	r1, r4
    1df6:	4628      	mov	r0, r5
    1df8:	f005 fbfe 	bl	75f8 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    1dfc:	2f00      	cmp	r7, #0
    1dfe:	d03c      	beq.n	1e7a <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
    1e00:	463a      	mov	r2, r7
    1e02:	4631      	mov	r1, r6
    1e04:	4620      	mov	r0, r4
    1e06:	f7ff ff1d 	bl	1c44 <postfix_print>
    1e0a:	e036      	b.n	1e7a <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    1e0c:	46b9      	mov	r9, r7
    1e0e:	e7ec      	b.n	1dea <log_output_msg_process+0x36>
	} else if (raw_string) {
    1e10:	2f00      	cmp	r7, #0
    1e12:	d138      	bne.n	1e86 <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
    1e14:	68e3      	ldr	r3, [r4, #12]
    1e16:	b95b      	cbnz	r3, 1e30 <log_output_msg_process+0x7c>
    1e18:	492a      	ldr	r1, [pc, #168]	; (1ec4 <log_output_msg_process+0x110>)
    1e1a:	482b      	ldr	r0, [pc, #172]	; (1ec8 <log_output_msg_process+0x114>)
    1e1c:	f240 13cf 	movw	r3, #463	; 0x1cf
    1e20:	4a2a      	ldr	r2, [pc, #168]	; (1ecc <log_output_msg_process+0x118>)
    1e22:	f005 f9d9 	bl	71d8 <printk>
    1e26:	f240 11cf 	movw	r1, #463	; 0x1cf
    1e2a:	4828      	ldr	r0, [pc, #160]	; (1ecc <log_output_msg_process+0x118>)
    1e2c:	f005 faad 	bl	738a <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
    1e30:	2600      	movs	r6, #0
		length = output->size;
    1e32:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    1e34:	aa06      	add	r2, sp, #24
		length = output->size;
    1e36:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    1e38:	4628      	mov	r0, r5
    1e3a:	4633      	mov	r3, r6
    1e3c:	68a1      	ldr	r1, [r4, #8]
    1e3e:	f005 fbc7 	bl	75d0 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    1e42:	9a06      	ldr	r2, [sp, #24]
    1e44:	6863      	ldr	r3, [r4, #4]
    1e46:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1e48:	b14a      	cbz	r2, 1e5e <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
    1e4a:	68a3      	ldr	r3, [r4, #8]
    1e4c:	4413      	add	r3, r2
    1e4e:	f813 8c01 	ldrb.w	r8, [r3, #-1]
    1e52:	f1a8 030a 	sub.w	r3, r8, #10
    1e56:	f1d3 0800 	rsbs	r8, r3, #0
    1e5a:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
    1e5e:	4620      	mov	r0, r4
    1e60:	f005 fd27 	bl	78b2 <log_output_flush>
		offset += length;
    1e64:	9b06      	ldr	r3, [sp, #24]
    1e66:	441e      	add	r6, r3
	} while (length > 0);
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d1e2      	bne.n	1e32 <log_output_msg_process+0x7e>
	if (eol) {
    1e6c:	f1b8 0f00 	cmp.w	r8, #0
    1e70:	d003      	beq.n	1e7a <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
    1e72:	4620      	mov	r0, r4
    1e74:	4916      	ldr	r1, [pc, #88]	; (1ed0 <log_output_msg_process+0x11c>)
    1e76:	f7ff fe43 	bl	1b00 <print_formatted>
	}

	log_output_flush(output);
    1e7a:	4620      	mov	r0, r4
    1e7c:	f005 fd19 	bl	78b2 <log_output_flush>
}
    1e80:	b00a      	add	sp, #40	; 0x28
    1e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    1e86:	4628      	mov	r0, r5
    1e88:	f005 fba0 	bl	75cc <log_msg_str_get>
    1e8c:	4911      	ldr	r1, [pc, #68]	; (1ed4 <log_output_msg_process+0x120>)
    1e8e:	4602      	mov	r2, r0
    1e90:	4620      	mov	r0, r4
    1e92:	f7ff fe35 	bl	1b00 <print_formatted>
		length = sizeof(buf);
    1e96:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1e9a:	aa05      	add	r2, sp, #20
    1e9c:	4643      	mov	r3, r8
    1e9e:	4628      	mov	r0, r5
    1ea0:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    1ea2:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1ea6:	f005 fb93 	bl	75d0 <log_msg_hexdump_data_get>
		if (length) {
    1eaa:	9a05      	ldr	r2, [sp, #20]
    1eac:	2a00      	cmp	r2, #0
    1eae:	d0a7      	beq.n	1e00 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
    1eb0:	464b      	mov	r3, r9
    1eb2:	4620      	mov	r0, r4
    1eb4:	9600      	str	r6, [sp, #0]
    1eb6:	a906      	add	r1, sp, #24
    1eb8:	f7ff fee2 	bl	1c80 <hexdump_line_print>
			offset += length;
    1ebc:	9b05      	ldr	r3, [sp, #20]
    1ebe:	4498      	add	r8, r3
		length = sizeof(buf);
    1ec0:	e7eb      	b.n	1e9a <log_output_msg_process+0xe6>
    1ec2:	bf00      	nop
    1ec4:	00008816 	.word	0x00008816
    1ec8:	00008496 	.word	0x00008496
    1ecc:	000087b7 	.word	0x000087b7
    1ed0:	00008823 	.word	0x00008823
    1ed4:	0000879c 	.word	0x0000879c

00001ed8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ed8:	f242 730f 	movw	r3, #9999	; 0x270f
{
    1edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ede:	428b      	cmp	r3, r1
    1ee0:	bf28      	it	cs
    1ee2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1ee4:	6805      	ldr	r5, [r0, #0]
{
    1ee6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ee8:	2105      	movs	r1, #5
    1eea:	4668      	mov	r0, sp
    1eec:	4a0d      	ldr	r2, [pc, #52]	; (1f24 <log_output_dropped_process+0x4c>)
    1eee:	f005 f980 	bl	71f2 <snprintk>
    1ef2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1ef4:	6863      	ldr	r3, [r4, #4]
    1ef6:	4628      	mov	r0, r5
    1ef8:	220b      	movs	r2, #11
    1efa:	685b      	ldr	r3, [r3, #4]
    1efc:	490a      	ldr	r1, [pc, #40]	; (1f28 <log_output_dropped_process+0x50>)
    1efe:	f005 fb6e 	bl	75de <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1f02:	6863      	ldr	r3, [r4, #4]
    1f04:	4632      	mov	r2, r6
    1f06:	4669      	mov	r1, sp
    1f08:	4628      	mov	r0, r5
    1f0a:	685b      	ldr	r3, [r3, #4]
    1f0c:	f005 fb67 	bl	75de <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1f10:	6863      	ldr	r3, [r4, #4]
    1f12:	221b      	movs	r2, #27
    1f14:	4628      	mov	r0, r5
    1f16:	685b      	ldr	r3, [r3, #4]
    1f18:	4904      	ldr	r1, [pc, #16]	; (1f2c <log_output_dropped_process+0x54>)
    1f1a:	f005 fb60 	bl	75de <buffer_write>
		     output->control_block->ctx);
}
    1f1e:	b002      	add	sp, #8
    1f20:	bd70      	pop	{r4, r5, r6, pc}
    1f22:	bf00      	nop
    1f24:	00008470 	.word	0x00008470
    1f28:	00008861 	.word	0x00008861
    1f2c:	00008845 	.word	0x00008845

00001f30 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1f30:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1f32:	2100      	movs	r1, #0
	timestamp_div = 1U;
    1f34:	4a07      	ldr	r2, [pc, #28]	; (1f54 <log_output_timestamp_freq_set+0x24>)
{
    1f36:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    1f38:	4c07      	ldr	r4, [pc, #28]	; (1f58 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1f3a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1f3c:	42a0      	cmp	r0, r4
    1f3e:	d804      	bhi.n	1f4a <log_output_timestamp_freq_set+0x1a>
    1f40:	b101      	cbz	r1, 1f44 <log_output_timestamp_freq_set+0x14>
    1f42:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1f44:	4b05      	ldr	r3, [pc, #20]	; (1f5c <log_output_timestamp_freq_set+0x2c>)
    1f46:	6018      	str	r0, [r3, #0]
}
    1f48:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    1f4a:	2101      	movs	r1, #1
		frequency /= 2U;
    1f4c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1f4e:	005b      	lsls	r3, r3, #1
    1f50:	e7f4      	b.n	1f3c <log_output_timestamp_freq_set+0xc>
    1f52:	bf00      	nop
    1f54:	200003a4 	.word	0x200003a4
    1f58:	000f4240 	.word	0x000f4240
    1f5c:	200003a0 	.word	0x200003a0

00001f60 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f62:	460d      	mov	r5, r1
    1f64:	4604      	mov	r4, r0
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    1f66:	4f06      	ldr	r7, [pc, #24]	; (1f80 <char_out+0x20>)
    1f68:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    1f6a:	42b4      	cmp	r4, r6
    1f6c:	d101      	bne.n	1f72 <char_out+0x12>
#endif
	}

	return length;
}
    1f6e:	4628      	mov	r0, r5
    1f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    1f72:	6838      	ldr	r0, [r7, #0]
    1f74:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1f78:	6883      	ldr	r3, [r0, #8]
    1f7a:	685b      	ldr	r3, [r3, #4]
    1f7c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    1f7e:	e7f4      	b.n	1f6a <char_out+0xa>
    1f80:	200003bc 	.word	0x200003bc

00001f84 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1f84:	4801      	ldr	r0, [pc, #4]	; (1f8c <panic+0x8>)
    1f86:	f005 bc94 	b.w	78b2 <log_output_flush>
    1f8a:	bf00      	nop
    1f8c:	000081ec 	.word	0x000081ec

00001f90 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1f90:	4801      	ldr	r0, [pc, #4]	; (1f98 <dropped+0x8>)
    1f92:	f7ff bfa1 	b.w	1ed8 <log_output_dropped_process>
    1f96:	bf00      	nop
    1f98:	000081ec 	.word	0x000081ec

00001f9c <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
    1f9c:	b508      	push	{r3, lr}
    1f9e:	4809      	ldr	r0, [pc, #36]	; (1fc4 <log_backend_uart_init+0x28>)
    1fa0:	f002 fbf0 	bl	4784 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1fa4:	4b08      	ldr	r3, [pc, #32]	; (1fc8 <log_backend_uart_init+0x2c>)
    1fa6:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
    1fa8:	b958      	cbnz	r0, 1fc2 <log_backend_uart_init+0x26>
    1faa:	234f      	movs	r3, #79	; 0x4f
    1fac:	4907      	ldr	r1, [pc, #28]	; (1fcc <log_backend_uart_init+0x30>)
    1fae:	4808      	ldr	r0, [pc, #32]	; (1fd0 <log_backend_uart_init+0x34>)
    1fb0:	4a08      	ldr	r2, [pc, #32]	; (1fd4 <log_backend_uart_init+0x38>)
    1fb2:	f005 f911 	bl	71d8 <printk>
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    1fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG((void *)uart_dev);
    1fba:	214f      	movs	r1, #79	; 0x4f
    1fbc:	4805      	ldr	r0, [pc, #20]	; (1fd4 <log_backend_uart_init+0x38>)
    1fbe:	f005 b9e4 	b.w	738a <assert_post_action>
}
    1fc2:	bd08      	pop	{r3, pc}
    1fc4:	0000886d 	.word	0x0000886d
    1fc8:	200003bc 	.word	0x200003bc
    1fcc:	000088a9 	.word	0x000088a9
    1fd0:	00008496 	.word	0x00008496
    1fd4:	00008874 	.word	0x00008874

00001fd8 <put>:
{
    1fd8:	b510      	push	{r4, lr}
    1fda:	460c      	mov	r4, r1
	log_msg_get(msg);
    1fdc:	4608      	mov	r0, r1
    1fde:	f005 fabb 	bl	7558 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    1fe2:	4621      	mov	r1, r4
    1fe4:	4804      	ldr	r0, [pc, #16]	; (1ff8 <put+0x20>)
    1fe6:	220f      	movs	r2, #15
    1fe8:	f7ff fee4 	bl	1db4 <log_output_msg_process>
	log_msg_put(msg);
    1fec:	4620      	mov	r0, r4
}
    1fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ff2:	f005 badc 	b.w	75ae <log_msg_put>
    1ff6:	bf00      	nop
    1ff8:	000081ec 	.word	0x000081ec

00001ffc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ffe:	4605      	mov	r5, r0
	__asm__ volatile(
    2000:	f04f 0320 	mov.w	r3, #32
    2004:	f3ef 8611 	mrs	r6, BASEPRI
    2008:	f383 8811 	msr	BASEPRI, r3
    200c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2010:	481e      	ldr	r0, [pc, #120]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    2012:	f002 ff69 	bl	4ee8 <z_spin_lock_valid>
    2016:	b968      	cbnz	r0, 2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>
    2018:	2381      	movs	r3, #129	; 0x81
    201a:	4a1d      	ldr	r2, [pc, #116]	; (2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>)
    201c:	491d      	ldr	r1, [pc, #116]	; (2094 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x94>)
    201e:	481e      	ldr	r0, [pc, #120]	; (2098 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x98>)
    2020:	f005 f8da 	bl	71d8 <printk>
    2024:	4919      	ldr	r1, [pc, #100]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    2026:	481d      	ldr	r0, [pc, #116]	; (209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>)
    2028:	f005 f8d6 	bl	71d8 <printk>
    202c:	2181      	movs	r1, #129	; 0x81
    202e:	4818      	ldr	r0, [pc, #96]	; (2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>)
    2030:	f005 f9ab 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    2034:	4815      	ldr	r0, [pc, #84]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    2036:	f002 ff73 	bl	4f20 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    203a:	4b19      	ldr	r3, [pc, #100]	; (20a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa0>)
    203c:	681c      	ldr	r4, [r3, #0]
    203e:	2c00      	cmp	r4, #0
    2040:	bf38      	it	cc
    2042:	2400      	movcc	r4, #0
    2044:	b15c      	cbz	r4, 205e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    2046:	4f17      	ldr	r7, [pc, #92]	; (20a4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa4>)
			callback = notifier->state_exit;
    2048:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    204c:	2d00      	cmp	r5, #0
    204e:	bf08      	it	eq
    2050:	4613      	moveq	r3, r2
		if (callback) {
    2052:	b10b      	cbz	r3, 2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>
			callback(z_power_state.state);
    2054:	7838      	ldrb	r0, [r7, #0]
    2056:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2058:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    205a:	2c00      	cmp	r4, #0
    205c:	d1f4      	bne.n	2048 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    205e:	480b      	ldr	r0, [pc, #44]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    2060:	f002 ff50 	bl	4f04 <z_spin_unlock_valid>
    2064:	b968      	cbnz	r0, 2082 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x82>
    2066:	23ac      	movs	r3, #172	; 0xac
    2068:	4a09      	ldr	r2, [pc, #36]	; (2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>)
    206a:	490f      	ldr	r1, [pc, #60]	; (20a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa8>)
    206c:	480a      	ldr	r0, [pc, #40]	; (2098 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x98>)
    206e:	f005 f8b3 	bl	71d8 <printk>
    2072:	4906      	ldr	r1, [pc, #24]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    2074:	480d      	ldr	r0, [pc, #52]	; (20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>)
    2076:	f005 f8af 	bl	71d8 <printk>
    207a:	21ac      	movs	r1, #172	; 0xac
    207c:	4804      	ldr	r0, [pc, #16]	; (2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>)
    207e:	f005 f984 	bl	738a <assert_post_action>
	__asm__ volatile(
    2082:	f386 8811 	msr	BASEPRI, r6
    2086:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    208c:	200003c0 	.word	0x200003c0
    2090:	00008556 	.word	0x00008556
    2094:	000085a8 	.word	0x000085a8
    2098:	00008496 	.word	0x00008496
    209c:	000085bd 	.word	0x000085bd
    20a0:	200003c4 	.word	0x200003c4
    20a4:	200003cc 	.word	0x200003cc
    20a8:	0000857c 	.word	0x0000857c
    20ac:	00008593 	.word	0x00008593

000020b0 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    20b0:	4b08      	ldr	r3, [pc, #32]	; (20d4 <pm_system_resume+0x24>)
{
    20b2:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    20b4:	681c      	ldr	r4, [r3, #0]
    20b6:	b95c      	cbnz	r4, 20d0 <pm_system_resume+0x20>
		post_ops_done = 1;
    20b8:	2201      	movs	r2, #1
    20ba:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    20bc:	4b06      	ldr	r3, [pc, #24]	; (20d8 <pm_system_resume+0x28>)
    20be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    20c2:	f005 f96c 	bl	739e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    20c6:	4620      	mov	r0, r4
	}
}
    20c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    20cc:	f7ff bf96 	b.w	1ffc <pm_state_notify>
}
    20d0:	bd10      	pop	{r4, pc}
    20d2:	bf00      	nop
    20d4:	20000008 	.word	0x20000008
    20d8:	200003cc 	.word	0x200003cc

000020dc <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    20dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20de:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
    20e0:	466e      	mov	r6, sp
    20e2:	4c1f      	ldr	r4, [pc, #124]	; (2160 <pm_system_suspend+0x84>)
    20e4:	4601      	mov	r1, r0
{
    20e6:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    20e8:	4630      	mov	r0, r6
    20ea:	f005 fbef 	bl	78cc <pm_policy_next_state>
    20ee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    20f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    20f6:	7820      	ldrb	r0, [r4, #0]
    20f8:	b380      	cbz	r0, 215c <pm_system_suspend+0x80>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    20fa:	2000      	movs	r0, #0
    20fc:	4b19      	ldr	r3, [pc, #100]	; (2164 <pm_system_suspend+0x88>)
    20fe:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    2100:	1c6b      	adds	r3, r5, #1
    2102:	d01d      	beq.n	2140 <pm_system_suspend+0x64>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    2104:	4291      	cmp	r1, r2
    2106:	d20c      	bcs.n	2122 <pm_system_suspend+0x46>
    2108:	4917      	ldr	r1, [pc, #92]	; (2168 <pm_system_suspend+0x8c>)
    210a:	23bd      	movs	r3, #189	; 0xbd
    210c:	4a17      	ldr	r2, [pc, #92]	; (216c <pm_system_suspend+0x90>)
    210e:	4818      	ldr	r0, [pc, #96]	; (2170 <pm_system_suspend+0x94>)
    2110:	f005 f862 	bl	71d8 <printk>
    2114:	4817      	ldr	r0, [pc, #92]	; (2174 <pm_system_suspend+0x98>)
    2116:	f005 f85f 	bl	71d8 <printk>
    211a:	21bd      	movs	r1, #189	; 0xbd
    211c:	4813      	ldr	r0, [pc, #76]	; (216c <pm_system_suspend+0x90>)
    211e:	f005 f934 	bl	738a <assert_post_action>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2122:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2126:	2100      	movs	r1, #0
    2128:	68a7      	ldr	r7, [r4, #8]
    212a:	4813      	ldr	r0, [pc, #76]	; (2178 <pm_system_suspend+0x9c>)
    212c:	2300      	movs	r3, #0
    212e:	fbe6 0107 	umlal	r0, r1, r6, r7
    2132:	4a12      	ldr	r2, [pc, #72]	; (217c <pm_system_suspend+0xa0>)
    2134:	f7fe f80e 	bl	154 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2138:	2101      	movs	r1, #1
    213a:	1a28      	subs	r0, r5, r0
    213c:	f004 fcda 	bl	6af4 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2140:	f003 fa9e 	bl	5680 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    2144:	2001      	movs	r0, #1
    2146:	f7ff ff59 	bl	1ffc <pm_state_notify>
	pm_power_state_set(z_power_state);
    214a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    214e:	f7ff f939 	bl	13c4 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    2152:	f7ff ffad 	bl	20b0 <pm_system_resume>
	k_sched_unlock();
    2156:	f003 fcdb 	bl	5b10 <k_sched_unlock>

	return z_power_state.state;
    215a:	7820      	ldrb	r0, [r4, #0]
}
    215c:	b005      	add	sp, #20
    215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2160:	200003cc 	.word	0x200003cc
    2164:	20000008 	.word	0x20000008
    2168:	00008941 	.word	0x00008941
    216c:	000088cb 	.word	0x000088cb
    2170:	00008496 	.word	0x00008496
    2174:	00008981 	.word	0x00008981
    2178:	000f423f 	.word	0x000f423f
    217c:	000f4240 	.word	0x000f4240

00002180 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2180:	b510      	push	{r4, lr}
    2182:	4807      	ldr	r0, [pc, #28]	; (21a0 <uart_console_init+0x20>)
    2184:	f002 fafe 	bl	4784 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    2188:	4c06      	ldr	r4, [pc, #24]	; (21a4 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    218a:	4b07      	ldr	r3, [pc, #28]	; (21a8 <uart_console_init+0x28>)
    218c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    218e:	4620      	mov	r0, r4
    2190:	f001 fad4 	bl	373c <__stdout_hook_install>
	__printk_hook_install(console_out);
    2194:	4620      	mov	r0, r4
    2196:	f7fe f9d3 	bl	540 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    219a:	2000      	movs	r0, #0
    219c:	bd10      	pop	{r4, pc}
    219e:	bf00      	nop
    21a0:	0000886d 	.word	0x0000886d
    21a4:	000021ad 	.word	0x000021ad
    21a8:	200003d8 	.word	0x200003d8

000021ac <console_out>:
	if ('\n' == c) {
    21ac:	280a      	cmp	r0, #10
{
    21ae:	b538      	push	{r3, r4, r5, lr}
    21b0:	4604      	mov	r4, r0
    21b2:	4d07      	ldr	r5, [pc, #28]	; (21d0 <console_out+0x24>)
	if ('\n' == c) {
    21b4:	d104      	bne.n	21c0 <console_out+0x14>
    21b6:	6828      	ldr	r0, [r5, #0]
    21b8:	6883      	ldr	r3, [r0, #8]
    21ba:	210d      	movs	r1, #13
    21bc:	685b      	ldr	r3, [r3, #4]
    21be:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    21c0:	6828      	ldr	r0, [r5, #0]
    21c2:	6883      	ldr	r3, [r0, #8]
    21c4:	b2e1      	uxtb	r1, r4
    21c6:	685b      	ldr	r3, [r3, #4]
    21c8:	4798      	blx	r3
}
    21ca:	4620      	mov	r0, r4
    21cc:	bd38      	pop	{r3, r4, r5, pc}
    21ce:	bf00      	nop
    21d0:	200003d8 	.word	0x200003d8

000021d4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    21d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    21d8:	4c0e      	ldr	r4, [pc, #56]	; (2214 <onoff_start+0x40>)
{
    21da:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    21dc:	1b05      	subs	r5, r0, r4
    21de:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    21e2:	250c      	movs	r5, #12
    21e4:	435d      	muls	r5, r3
    21e6:	f105 0088 	add.w	r0, r5, #136	; 0x88
{
    21ea:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    21ec:	4420      	add	r0, r4
    21ee:	2140      	movs	r1, #64	; 0x40
    21f0:	f005 fb71 	bl	78d6 <set_starting_state>
	if (err < 0) {
    21f4:	1e01      	subs	r1, r0, #0
    21f6:	db08      	blt.n	220a <onoff_start+0x36>
	subdata->cb = cb;
    21f8:	4b07      	ldr	r3, [pc, #28]	; (2218 <onoff_start+0x44>)
    21fa:	442c      	add	r4, r5
	subdata->user_data = user_data;
    21fc:	e9c4 3620 	strd	r3, r6, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
    2200:	4b06      	ldr	r3, [pc, #24]	; (221c <onoff_start+0x48>)
    2202:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2208:	4718      	bx	r3
		notify(mgr, err);
    220a:	4638      	mov	r0, r7
    220c:	4633      	mov	r3, r6
}
    220e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2212:	4718      	bx	r3
    2214:	200003f0 	.word	0x200003f0
    2218:	00007939 	.word	0x00007939
    221c:	00008210 	.word	0x00008210

00002220 <get_status>:
{
    2220:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2222:	b2cc      	uxtb	r4, r1
    2224:	2c03      	cmp	r4, #3
{
    2226:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2228:	d909      	bls.n	223e <get_status+0x1e>
    222a:	4909      	ldr	r1, [pc, #36]	; (2250 <get_status+0x30>)
    222c:	4809      	ldr	r0, [pc, #36]	; (2254 <get_status+0x34>)
    222e:	237e      	movs	r3, #126	; 0x7e
    2230:	4a09      	ldr	r2, [pc, #36]	; (2258 <get_status+0x38>)
    2232:	f004 ffd1 	bl	71d8 <printk>
    2236:	217e      	movs	r1, #126	; 0x7e
    2238:	4807      	ldr	r0, [pc, #28]	; (2258 <get_status+0x38>)
    223a:	f005 f8a6 	bl	738a <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    223e:	210c      	movs	r1, #12
    2240:	692b      	ldr	r3, [r5, #16]
    2242:	fb04 3401 	mla	r4, r4, r1, r3
    2246:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    224a:	f000 0007 	and.w	r0, r0, #7
    224e:	bd38      	pop	{r3, r4, r5, pc}
    2250:	000089e9 	.word	0x000089e9
    2254:	00008496 	.word	0x00008496
    2258:	000089ac 	.word	0x000089ac

0000225c <stop>:
{
    225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    225e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2260:	2c03      	cmp	r4, #3
{
    2262:	4605      	mov	r5, r0
    2264:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2266:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2268:	d90b      	bls.n	2282 <stop+0x26>
    226a:	491a      	ldr	r1, [pc, #104]	; (22d4 <stop+0x78>)
    226c:	481a      	ldr	r0, [pc, #104]	; (22d8 <stop+0x7c>)
    226e:	f240 1353 	movw	r3, #339	; 0x153
    2272:	4a1a      	ldr	r2, [pc, #104]	; (22dc <stop+0x80>)
    2274:	f004 ffb0 	bl	71d8 <printk>
    2278:	f240 1153 	movw	r1, #339	; 0x153
    227c:	4817      	ldr	r0, [pc, #92]	; (22dc <stop+0x80>)
    227e:	f005 f884 	bl	738a <assert_post_action>
	__asm__ volatile(
    2282:	f04f 0320 	mov.w	r3, #32
    2286:	f3ef 8211 	mrs	r2, BASEPRI
    228a:	f383 8811 	msr	BASEPRI, r3
    228e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2292:	230c      	movs	r3, #12
    2294:	fb03 7104 	mla	r1, r3, r4, r7
    2298:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    229c:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    22a0:	d001      	beq.n	22a6 <stop+0x4a>
    22a2:	428e      	cmp	r6, r1
    22a4:	d112      	bne.n	22cc <stop+0x70>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    22a6:	2101      	movs	r1, #1
	int err = 0;
    22a8:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    22aa:	fb03 7304 	mla	r3, r3, r4, r7
    22ae:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	__asm__ volatile(
    22b2:	f382 8811 	msr	BASEPRI, r2
    22b6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    22ba:	b930      	cbnz	r0, 22ca <stop+0x6e>
	get_sub_config(dev, type)->stop();
    22bc:	230c      	movs	r3, #12
    22be:	6869      	ldr	r1, [r5, #4]
    22c0:	fb03 1404 	mla	r4, r3, r4, r1
    22c4:	6863      	ldr	r3, [r4, #4]
    22c6:	4798      	blx	r3
	return 0;
    22c8:	2000      	movs	r0, #0
}
    22ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    22cc:	f04f 30ff 	mov.w	r0, #4294967295
    22d0:	e7ef      	b.n	22b2 <stop+0x56>
    22d2:	bf00      	nop
    22d4:	000089e9 	.word	0x000089e9
    22d8:	00008496 	.word	0x00008496
    22dc:	000089ac 	.word	0x000089ac

000022e0 <onoff_stop>:
{
    22e0:	b570      	push	{r4, r5, r6, lr}
    22e2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    22e4:	4906      	ldr	r1, [pc, #24]	; (2300 <onoff_stop+0x20>)
{
    22e6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    22e8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    22ea:	1149      	asrs	r1, r1, #5
    22ec:	2240      	movs	r2, #64	; 0x40
    22ee:	4805      	ldr	r0, [pc, #20]	; (2304 <onoff_stop+0x24>)
    22f0:	f7ff ffb4 	bl	225c <stop>
	notify(mgr, res);
    22f4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    22f6:	4601      	mov	r1, r0
	notify(mgr, res);
    22f8:	4620      	mov	r0, r4
}
    22fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    22fe:	4718      	bx	r3
    2300:	200003f0 	.word	0x200003f0
    2304:	200000b0 	.word	0x200000b0

00002308 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    2308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    230c:	2200      	movs	r2, #0
    230e:	2101      	movs	r1, #1
{
    2310:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2312:	2005      	movs	r0, #5
    2314:	f000 fc2a 	bl	2b6c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2318:	2005      	movs	r0, #5
    231a:	f000 fc09 	bl	2b30 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    231e:	4811      	ldr	r0, [pc, #68]	; (2364 <clk_init+0x5c>)
    2320:	f001 ffe8 	bl	42f4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2324:	4b10      	ldr	r3, [pc, #64]	; (2368 <clk_init+0x60>)
    2326:	4298      	cmp	r0, r3
    2328:	d119      	bne.n	235e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    232a:	f002 f807 	bl	433c <nrfx_clock_enable>
    232e:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2330:	f04f 080c 	mov.w	r8, #12
    2334:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2336:	f8df 9034 	ldr.w	r9, [pc, #52]	; 236c <clk_init+0x64>
						get_sub_data(dev, i);
    233a:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    233c:	4649      	mov	r1, r9
    233e:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    2342:	f004 ffa4 	bl	728e <onoff_manager_init>
		if (err < 0) {
    2346:	2800      	cmp	r0, #0
    2348:	db07      	blt.n	235a <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    234a:	fb08 5504 	mla	r5, r8, r4, r5
    234e:	3401      	adds	r4, #1
	for (enum clock_control_nrf_type i = 0;
    2350:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2352:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    2356:	d1f0      	bne.n	233a <clk_init+0x32>
	}

	return 0;
    2358:	2000      	movs	r0, #0
}
    235a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    235e:	f06f 0004 	mvn.w	r0, #4
    2362:	e7fa      	b.n	235a <clk_init+0x52>
    2364:	000023a9 	.word	0x000023a9
    2368:	0bad0000 	.word	0x0bad0000
    236c:	00008240 	.word	0x00008240

00002370 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2370:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2372:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    2374:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    2376:	434b      	muls	r3, r1
    2378:	4809      	ldr	r0, [pc, #36]	; (23a0 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    237a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    237c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    237e:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    2380:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    2384:	4418      	add	r0, r3
	sub_data->cb = NULL;
    2386:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    238a:	f005 fac2 	bl	7912 <set_on_state>
	if (callback) {
    238e:	b12d      	cbz	r5, 239c <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2390:	4632      	mov	r2, r6
    2392:	462b      	mov	r3, r5
}
    2394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2398:	4802      	ldr	r0, [pc, #8]	; (23a4 <clkstarted_handle.constprop.0+0x34>)
    239a:	4718      	bx	r3
}
    239c:	bd70      	pop	{r4, r5, r6, pc}
    239e:	bf00      	nop
    23a0:	200003f0 	.word	0x200003f0
    23a4:	200000b0 	.word	0x200000b0

000023a8 <clock_event_handler>:
{
    23a8:	b508      	push	{r3, lr}
    23aa:	2805      	cmp	r0, #5
    23ac:	d822      	bhi.n	23f4 <clock_event_handler+0x4c>
    23ae:	e8df f000 	tbb	[pc, r0]
    23b2:	1103      	.short	0x1103
    23b4:	0d0f1321 	.word	0x0d0f1321
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    23b8:	4b14      	ldr	r3, [pc, #80]	; (240c <clock_event_handler+0x64>)
    23ba:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    23be:	f010 0007 	ands.w	r0, r0, #7
    23c2:	d121      	bne.n	2408 <clock_event_handler+0x60>
}
    23c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    23c8:	f7ff bfd2 	b.w	2370 <clkstarted_handle.constprop.0>
    23cc:	2002      	movs	r0, #2
    23ce:	e7f9      	b.n	23c4 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    23d0:	2003      	movs	r0, #3
    23d2:	e7f7      	b.n	23c4 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    23d4:	2001      	movs	r0, #1
    23d6:	e7f5      	b.n	23c4 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    23d8:	490d      	ldr	r1, [pc, #52]	; (2410 <clock_event_handler+0x68>)
    23da:	f240 2366 	movw	r3, #614	; 0x266
    23de:	4a0d      	ldr	r2, [pc, #52]	; (2414 <clock_event_handler+0x6c>)
    23e0:	480d      	ldr	r0, [pc, #52]	; (2418 <clock_event_handler+0x70>)
    23e2:	f004 fef9 	bl	71d8 <printk>
    23e6:	f240 2166 	movw	r1, #614	; 0x266
}
    23ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    23ee:	4809      	ldr	r0, [pc, #36]	; (2414 <clock_event_handler+0x6c>)
    23f0:	f004 bfcb 	b.w	738a <assert_post_action>
    23f4:	4906      	ldr	r1, [pc, #24]	; (2410 <clock_event_handler+0x68>)
    23f6:	f240 236a 	movw	r3, #618	; 0x26a
    23fa:	4a06      	ldr	r2, [pc, #24]	; (2414 <clock_event_handler+0x6c>)
    23fc:	4806      	ldr	r0, [pc, #24]	; (2418 <clock_event_handler+0x70>)
    23fe:	f004 feeb 	bl	71d8 <printk>
    2402:	f240 216a 	movw	r1, #618	; 0x26a
    2406:	e7f0      	b.n	23ea <clock_event_handler+0x42>
}
    2408:	bd08      	pop	{r3, pc}
    240a:	bf00      	nop
    240c:	200003f0 	.word	0x200003f0
    2410:	0000853e 	.word	0x0000853e
    2414:	000089ac 	.word	0x000089ac
    2418:	00008496 	.word	0x00008496

0000241c <generic_hfclk_start>:
{
    241c:	b508      	push	{r3, lr}
	__asm__ volatile(
    241e:	f04f 0320 	mov.w	r3, #32
    2422:	f3ef 8111 	mrs	r1, BASEPRI
    2426:	f383 8811 	msr	BASEPRI, r3
    242a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    242e:	4a12      	ldr	r2, [pc, #72]	; (2478 <generic_hfclk_start+0x5c>)
    2430:	6813      	ldr	r3, [r2, #0]
    2432:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2436:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    243a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    243c:	d00c      	beq.n	2458 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    243e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2442:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2446:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    244a:	f013 0301 	ands.w	r3, r3, #1
    244e:	d003      	beq.n	2458 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2450:	480a      	ldr	r0, [pc, #40]	; (247c <generic_hfclk_start+0x60>)
    2452:	f005 fa5e 	bl	7912 <set_on_state>
			already_started = true;
    2456:	2301      	movs	r3, #1
	__asm__ volatile(
    2458:	f381 8811 	msr	BASEPRI, r1
    245c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2460:	b123      	cbz	r3, 246c <generic_hfclk_start+0x50>
}
    2462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2466:	2000      	movs	r0, #0
    2468:	f7ff bf82 	b.w	2370 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    246c:	2001      	movs	r0, #1
}
    246e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2472:	f001 bf89 	b.w	4388 <nrfx_clock_start>
    2476:	bf00      	nop
    2478:	200004a0 	.word	0x200004a0
    247c:	20000478 	.word	0x20000478

00002480 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2480:	4b07      	ldr	r3, [pc, #28]	; (24a0 <generic_hfclk_stop+0x20>)
    2482:	e8d3 2fef 	ldaex	r2, [r3]
    2486:	f022 0102 	bic.w	r1, r2, #2
    248a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    248e:	2800      	cmp	r0, #0
    2490:	d1f7      	bne.n	2482 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2492:	07d3      	lsls	r3, r2, #31
    2494:	d402      	bmi.n	249c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2496:	2001      	movs	r0, #1
    2498:	f001 bfee 	b.w	4478 <nrfx_clock_stop>
}
    249c:	4770      	bx	lr
    249e:	bf00      	nop
    24a0:	200004a0 	.word	0x200004a0

000024a4 <api_blocking_start>:
{
    24a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    24a6:	2200      	movs	r2, #0
    24a8:	2301      	movs	r3, #1
    24aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    24ae:	466b      	mov	r3, sp
    24b0:	4a08      	ldr	r2, [pc, #32]	; (24d4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    24b2:	f8cd d000 	str.w	sp, [sp]
    24b6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    24ba:	f005 fa5b 	bl	7974 <api_start>
	if (err < 0) {
    24be:	2800      	cmp	r0, #0
    24c0:	db05      	blt.n	24ce <api_blocking_start+0x2a>
    24c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    24c6:	2300      	movs	r3, #0
    24c8:	4668      	mov	r0, sp
    24ca:	f002 ff47 	bl	535c <z_impl_k_sem_take>
}
    24ce:	b005      	add	sp, #20
    24d0:	f85d fb04 	ldr.w	pc, [sp], #4
    24d4:	0000796f 	.word	0x0000796f

000024d8 <z_nrf_clock_control_lf_on>:
{
    24d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    24dc:	2201      	movs	r2, #1
    24de:	4605      	mov	r5, r0
    24e0:	4947      	ldr	r1, [pc, #284]	; (2600 <z_nrf_clock_control_lf_on+0x128>)
    24e2:	e8d1 3fef 	ldaex	r3, [r1]
    24e6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    24ea:	2800      	cmp	r0, #0
    24ec:	d1f9      	bne.n	24e2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    24ee:	b9a3      	cbnz	r3, 251a <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    24f0:	4944      	ldr	r1, [pc, #272]	; (2604 <z_nrf_clock_control_lf_on+0x12c>)
		err = onoff_request(mgr, &cli);
    24f2:	4845      	ldr	r0, [pc, #276]	; (2608 <z_nrf_clock_control_lf_on+0x130>)
    24f4:	604b      	str	r3, [r1, #4]
    24f6:	60cb      	str	r3, [r1, #12]
    24f8:	608a      	str	r2, [r1, #8]
    24fa:	f7fe fa75 	bl	9e8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    24fe:	2800      	cmp	r0, #0
    2500:	da0b      	bge.n	251a <z_nrf_clock_control_lf_on+0x42>
    2502:	4942      	ldr	r1, [pc, #264]	; (260c <z_nrf_clock_control_lf_on+0x134>)
    2504:	4842      	ldr	r0, [pc, #264]	; (2610 <z_nrf_clock_control_lf_on+0x138>)
    2506:	f240 2326 	movw	r3, #550	; 0x226
    250a:	4a42      	ldr	r2, [pc, #264]	; (2614 <z_nrf_clock_control_lf_on+0x13c>)
    250c:	f004 fe64 	bl	71d8 <printk>
    2510:	f240 2126 	movw	r1, #550	; 0x226
    2514:	483f      	ldr	r0, [pc, #252]	; (2614 <z_nrf_clock_control_lf_on+0x13c>)
    2516:	f004 ff38 	bl	738a <assert_post_action>
	switch (start_mode) {
    251a:	b3ad      	cbz	r5, 2588 <z_nrf_clock_control_lf_on+0xb0>
    251c:	1e6b      	subs	r3, r5, #1
    251e:	2b01      	cmp	r3, #1
    2520:	d859      	bhi.n	25d6 <z_nrf_clock_control_lf_on+0xfe>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2522:	2d01      	cmp	r5, #1
    2524:	d107      	bne.n	2536 <z_nrf_clock_control_lf_on+0x5e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2526:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    252a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    252e:	f003 0303 	and.w	r3, r3, #3
    2532:	2b02      	cmp	r3, #2
    2534:	d028      	beq.n	2588 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2536:	f005 fc45 	bl	7dc4 <k_is_in_isr>
    253a:	4604      	mov	r4, r0
    253c:	b918      	cbnz	r0, 2546 <z_nrf_clock_control_lf_on+0x6e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    253e:	4b36      	ldr	r3, [pc, #216]	; (2618 <z_nrf_clock_control_lf_on+0x140>)
	int key = isr_mode ? irq_lock() : 0;
    2540:	781b      	ldrb	r3, [r3, #0]
    2542:	2b00      	cmp	r3, #0
    2544:	d155      	bne.n	25f2 <z_nrf_clock_control_lf_on+0x11a>
	__asm__ volatile(
    2546:	f04f 0320 	mov.w	r3, #32
    254a:	f3ef 8611 	mrs	r6, BASEPRI
    254e:	f383 8811 	msr	BASEPRI, r3
    2552:	f3bf 8f6f 	isb	sy
    2556:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2558:	4f30      	ldr	r7, [pc, #192]	; (261c <z_nrf_clock_control_lf_on+0x144>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    255a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2624 <z_nrf_clock_control_lf_on+0x14c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    255e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2628 <z_nrf_clock_control_lf_on+0x150>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2562:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2566:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    256a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    256e:	03d2      	lsls	r2, r2, #15
    2570:	d50c      	bpl.n	258c <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2572:	f003 0303 	and.w	r3, r3, #3
    2576:	2b02      	cmp	r3, #2
    2578:	d001      	beq.n	257e <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    257a:	2d01      	cmp	r5, #1
    257c:	d106      	bne.n	258c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
    257e:	b324      	cbz	r4, 25ca <z_nrf_clock_control_lf_on+0xf2>
	__asm__ volatile(
    2580:	f386 8811 	msr	BASEPRI, r6
    2584:	f3bf 8f6f 	isb	sy
}
    2588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    258c:	b1c4      	cbz	r4, 25c0 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    258e:	4630      	mov	r0, r6
    2590:	f000 fb62 	bl	2c58 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2594:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2598:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    259c:	b2db      	uxtb	r3, r3
    259e:	2b01      	cmp	r3, #1
    25a0:	d1df      	bne.n	2562 <z_nrf_clock_control_lf_on+0x8a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    25a2:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    25a4:	2900      	cmp	r1, #0
    25a6:	d0dc      	beq.n	2562 <z_nrf_clock_control_lf_on+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    25a8:	2100      	movs	r1, #0
    25aa:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    25ac:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    25ae:	2102      	movs	r1, #2
    25b0:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    25b4:	2220      	movs	r2, #32
    25b6:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25ba:	f8c9 3000 	str.w	r3, [r9]
}
    25be:	e7d0      	b.n	2562 <z_nrf_clock_control_lf_on+0x8a>
	return z_impl_k_sleep(timeout);
    25c0:	2100      	movs	r1, #0
    25c2:	2021      	movs	r0, #33	; 0x21
    25c4:	f003 ffd0 	bl	6568 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    25c8:	e7e4      	b.n	2594 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
    25ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    25ce:	2202      	movs	r2, #2
    25d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    25d4:	e7d8      	b.n	2588 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
    25d6:	f44f 730e 	mov.w	r3, #568	; 0x238
    25da:	4911      	ldr	r1, [pc, #68]	; (2620 <z_nrf_clock_control_lf_on+0x148>)
    25dc:	480c      	ldr	r0, [pc, #48]	; (2610 <z_nrf_clock_control_lf_on+0x138>)
    25de:	4a0d      	ldr	r2, [pc, #52]	; (2614 <z_nrf_clock_control_lf_on+0x13c>)
    25e0:	f004 fdfa 	bl	71d8 <printk>
}
    25e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    25e8:	f44f 710e 	mov.w	r1, #568	; 0x238
    25ec:	4809      	ldr	r0, [pc, #36]	; (2614 <z_nrf_clock_control_lf_on+0x13c>)
    25ee:	f004 becc 	b.w	738a <assert_post_action>
    p_reg->INTENCLR = mask;
    25f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    25f6:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    25f8:	4606      	mov	r6, r0
    25fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    25fe:	e7ab      	b.n	2558 <z_nrf_clock_control_lf_on+0x80>
    2600:	200004a4 	.word	0x200004a4
    2604:	200003e0 	.word	0x200003e0
    2608:	20000410 	.word	0x20000410
    260c:	00008a0d 	.word	0x00008a0d
    2610:	00008496 	.word	0x00008496
    2614:	000089ac 	.word	0x000089ac
    2618:	20000b11 	.word	0x20000b11
    261c:	50005104 	.word	0x50005104
    2620:	0000853e 	.word	0x0000853e
    2624:	e000e100 	.word	0xe000e100
    2628:	50005008 	.word	0x50005008

0000262c <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    262c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    262e:	4c06      	ldr	r4, [pc, #24]	; (2648 <sys_clock_isr+0x1c>)
    2630:	4906      	ldr	r1, [pc, #24]	; (264c <sys_clock_isr+0x20>)
    2632:	4622      	mov	r2, r4
    2634:	4806      	ldr	r0, [pc, #24]	; (2650 <sys_clock_isr+0x24>)
    2636:	2317      	movs	r3, #23
    2638:	f004 fdce 	bl	71d8 <printk>
    263c:	4620      	mov	r0, r4
}
    263e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    2642:	2117      	movs	r1, #23
    2644:	f004 bea1 	b.w	738a <assert_post_action>
    2648:	00008a4b 	.word	0x00008a4b
    264c:	0000853e 	.word	0x0000853e
    2650:	00008496 	.word	0x00008496

00002654 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    2654:	4a04      	ldr	r2, [pc, #16]	; (2668 <sys_clock_timeout_handler+0x14>)
    2656:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2658:	1ac8      	subs	r0, r1, r3
    265a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    265e:	4403      	add	r3, r0
    2660:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2662:	f004 ba97 	b.w	6b94 <sys_clock_announce>
    2666:	bf00      	nop
    2668:	200004b8 	.word	0x200004b8

0000266c <set_absolute_alarm>:
{
    266c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2670:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2674:	f04f 0900 	mov.w	r9, #0
    2678:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    267a:	f100 0450 	add.w	r4, r0, #80	; 0x50
    267e:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    2682:	00a4      	lsls	r4, r4, #2
    2684:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    2688:	b2a4      	uxth	r4, r4
    268a:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    268e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2692:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2700 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2696:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    269a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    269e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    26a0:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    26a4:	eba3 030a 	sub.w	r3, r3, sl
    26a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26ac:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    26b0:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    26b2:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    26b6:	d102      	bne.n	26be <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    26b8:	2013      	movs	r0, #19
    26ba:	f005 fbc0 	bl	7e3e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    26be:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    26c2:	1aab      	subs	r3, r5, r2
    26c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    26c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    26cc:	bf88      	it	hi
    26ce:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26d0:	f8c4 9000 	str.w	r9, [r4]
    26d4:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26d6:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    26da:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    26de:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    26e2:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    26e6:	459a      	cmp	sl, r3
    26e8:	d006      	beq.n	26f8 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    26ea:	1aeb      	subs	r3, r5, r3
    26ec:	3b02      	subs	r3, #2
    26ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    26f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    26f6:	d801      	bhi.n	26fc <set_absolute_alarm+0x90>
}
    26f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    26fc:	462b      	mov	r3, r5
    26fe:	e7cf      	b.n	26a0 <set_absolute_alarm+0x34>
    2700:	50015000 	.word	0x50015000

00002704 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    2704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2706:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2708:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    270a:	4e0f      	ldr	r6, [pc, #60]	; (2748 <rtc_nrf_isr+0x44>)
    270c:	4b0f      	ldr	r3, [pc, #60]	; (274c <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    270e:	4a10      	ldr	r2, [pc, #64]	; (2750 <rtc_nrf_isr+0x4c>)
    2710:	4618      	mov	r0, r3
    2712:	681d      	ldr	r5, [r3, #0]
    2714:	b104      	cbz	r4, 2718 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    2716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2718:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    271c:	03c9      	lsls	r1, r1, #15
    271e:	d5fa      	bpl.n	2716 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2720:	6831      	ldr	r1, [r6, #0]
    2722:	2900      	cmp	r1, #0
    2724:	d0f7      	beq.n	2716 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2726:	6034      	str	r4, [r6, #0]
    2728:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    272a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    272e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2732:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    2734:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    2738:	b125      	cbz	r5, 2744 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    273a:	2000      	movs	r0, #0
    273c:	685a      	ldr	r2, [r3, #4]
    273e:	601f      	str	r7, [r3, #0]
    2740:	47a8      	blx	r5
    2742:	e7e3      	b.n	270c <rtc_nrf_isr+0x8>
    2744:	6005      	str	r5, [r0, #0]
}
    2746:	e7e6      	b.n	2716 <rtc_nrf_isr+0x12>
    2748:	50015140 	.word	0x50015140
    274c:	200004ac 	.word	0x200004ac
    2750:	50015000 	.word	0x50015000

00002754 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    2754:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    2756:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    2758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    275c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    2760:	4d0d      	ldr	r5, [pc, #52]	; (2798 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2762:	2101      	movs	r1, #1
    2764:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    2768:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    276c:	4b0b      	ldr	r3, [pc, #44]	; (279c <sys_clock_driver_init+0x48>)
    276e:	2015      	movs	r0, #21
    2770:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2774:	4622      	mov	r2, r4
    2776:	f000 f9f9 	bl	2b6c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    277a:	2015      	movs	r0, #21
    277c:	f000 f9d8 	bl	2b30 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2780:	2301      	movs	r3, #1
    2782:	4a07      	ldr	r2, [pc, #28]	; (27a0 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    2784:	2002      	movs	r0, #2
    2786:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    2788:	4a06      	ldr	r2, [pc, #24]	; (27a4 <sys_clock_driver_init+0x50>)
    278a:	602b      	str	r3, [r5, #0]
    278c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    278e:	f7ff fea3 	bl	24d8 <z_nrf_clock_control_lf_on>

	return 0;
}
    2792:	4620      	mov	r0, r4
    2794:	bd38      	pop	{r3, r4, r5, pc}
    2796:	bf00      	nop
    2798:	50015000 	.word	0x50015000
    279c:	e000e100 	.word	0xe000e100
    27a0:	50015008 	.word	0x50015008
    27a4:	200004b4 	.word	0x200004b4

000027a8 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    27a8:	4b13      	ldr	r3, [pc, #76]	; (27f8 <sys_clock_set_timeout+0x50>)
    27aa:	f1b0 3fff 	cmp.w	r0, #4294967295
    27ae:	bf08      	it	eq
    27b0:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    27b2:	3801      	subs	r0, #1
    27b4:	2800      	cmp	r0, #0
    27b6:	dd1c      	ble.n	27f2 <sys_clock_set_timeout+0x4a>
    27b8:	4298      	cmp	r0, r3
    27ba:	bfa8      	it	ge
    27bc:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    27be:	4b0f      	ldr	r3, [pc, #60]	; (27fc <sys_clock_set_timeout+0x54>)
    27c0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    27c4:	4b0e      	ldr	r3, [pc, #56]	; (2800 <sys_clock_set_timeout+0x58>)
    27c6:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    27c8:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    27ca:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    27ce:	bf18      	it	ne
    27d0:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    27d2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    27d6:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    27d8:	4a0a      	ldr	r2, [pc, #40]	; (2804 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    27da:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    27dc:	480a      	ldr	r0, [pc, #40]	; (2808 <sys_clock_set_timeout+0x60>)
    27de:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    27e0:	2000      	movs	r0, #0
    27e2:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    27e4:	4a04      	ldr	r2, [pc, #16]	; (27f8 <sys_clock_set_timeout+0x50>)
    27e6:	4293      	cmp	r3, r2
    27e8:	bf94      	ite	ls
    27ea:	18c9      	addls	r1, r1, r3
    27ec:	1889      	addhi	r1, r1, r2
    27ee:	f7ff bf3d 	b.w	266c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    27f2:	2000      	movs	r0, #0
    27f4:	e7e3      	b.n	27be <sys_clock_set_timeout+0x16>
    27f6:	bf00      	nop
    27f8:	007fffff 	.word	0x007fffff
    27fc:	50015000 	.word	0x50015000
    2800:	200004b8 	.word	0x200004b8
    2804:	200004ac 	.word	0x200004ac
    2808:	00002655 	.word	0x00002655

0000280c <sys_clock_elapsed>:
    280c:	4b04      	ldr	r3, [pc, #16]	; (2820 <sys_clock_elapsed+0x14>)
    280e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    2812:	4b04      	ldr	r3, [pc, #16]	; (2824 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    2814:	681b      	ldr	r3, [r3, #0]
    2816:	1ac0      	subs	r0, r0, r3
}
    2818:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    281c:	4770      	bx	lr
    281e:	bf00      	nop
    2820:	50015000 	.word	0x50015000
    2824:	200004b8 	.word	0x200004b8

00002828 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
    2828:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    282a:	f04f 0320 	mov.w	r3, #32
    282e:	f3ef 8511 	mrs	r5, BASEPRI
    2832:	f383 8811 	msr	BASEPRI, r3
    2836:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    283a:	481b      	ldr	r0, [pc, #108]	; (28a8 <sys_clock_cycle_get_32+0x80>)
    283c:	f002 fb54 	bl	4ee8 <z_spin_lock_valid>
    2840:	b968      	cbnz	r0, 285e <sys_clock_cycle_get_32+0x36>
    2842:	2381      	movs	r3, #129	; 0x81
    2844:	4a19      	ldr	r2, [pc, #100]	; (28ac <sys_clock_cycle_get_32+0x84>)
    2846:	491a      	ldr	r1, [pc, #104]	; (28b0 <sys_clock_cycle_get_32+0x88>)
    2848:	481a      	ldr	r0, [pc, #104]	; (28b4 <sys_clock_cycle_get_32+0x8c>)
    284a:	f004 fcc5 	bl	71d8 <printk>
    284e:	4916      	ldr	r1, [pc, #88]	; (28a8 <sys_clock_cycle_get_32+0x80>)
    2850:	4819      	ldr	r0, [pc, #100]	; (28b8 <sys_clock_cycle_get_32+0x90>)
    2852:	f004 fcc1 	bl	71d8 <printk>
    2856:	2181      	movs	r1, #129	; 0x81
    2858:	4814      	ldr	r0, [pc, #80]	; (28ac <sys_clock_cycle_get_32+0x84>)
    285a:	f004 fd96 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    285e:	4812      	ldr	r0, [pc, #72]	; (28a8 <sys_clock_cycle_get_32+0x80>)
    2860:	f002 fb5e 	bl	4f20 <z_spin_lock_set_owner>
    2864:	4b15      	ldr	r3, [pc, #84]	; (28bc <sys_clock_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2866:	4810      	ldr	r0, [pc, #64]	; (28a8 <sys_clock_cycle_get_32+0x80>)
    2868:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    286c:	4b14      	ldr	r3, [pc, #80]	; (28c0 <sys_clock_cycle_get_32+0x98>)
    286e:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    2870:	1ae4      	subs	r4, r4, r3
    2872:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    2876:	441c      	add	r4, r3
    2878:	f002 fb44 	bl	4f04 <z_spin_unlock_valid>
    287c:	b968      	cbnz	r0, 289a <sys_clock_cycle_get_32+0x72>
    287e:	23ac      	movs	r3, #172	; 0xac
    2880:	4a0a      	ldr	r2, [pc, #40]	; (28ac <sys_clock_cycle_get_32+0x84>)
    2882:	4910      	ldr	r1, [pc, #64]	; (28c4 <sys_clock_cycle_get_32+0x9c>)
    2884:	480b      	ldr	r0, [pc, #44]	; (28b4 <sys_clock_cycle_get_32+0x8c>)
    2886:	f004 fca7 	bl	71d8 <printk>
    288a:	4907      	ldr	r1, [pc, #28]	; (28a8 <sys_clock_cycle_get_32+0x80>)
    288c:	480e      	ldr	r0, [pc, #56]	; (28c8 <sys_clock_cycle_get_32+0xa0>)
    288e:	f004 fca3 	bl	71d8 <printk>
    2892:	21ac      	movs	r1, #172	; 0xac
    2894:	4805      	ldr	r0, [pc, #20]	; (28ac <sys_clock_cycle_get_32+0x84>)
    2896:	f004 fd78 	bl	738a <assert_post_action>
	__asm__ volatile(
    289a:	f385 8811 	msr	BASEPRI, r5
    289e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    28a2:	4620      	mov	r0, r4
    28a4:	bd38      	pop	{r3, r4, r5, pc}
    28a6:	bf00      	nop
    28a8:	200004bc 	.word	0x200004bc
    28ac:	00008556 	.word	0x00008556
    28b0:	000085a8 	.word	0x000085a8
    28b4:	00008496 	.word	0x00008496
    28b8:	000085bd 	.word	0x000085bd
    28bc:	50015000 	.word	0x50015000
    28c0:	200004b8 	.word	0x200004b8
    28c4:	0000857c 	.word	0x0000857c
    28c8:	00008593 	.word	0x00008593

000028cc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    28cc:	4801      	ldr	r0, [pc, #4]	; (28d4 <nrf_cc3xx_platform_abort_init+0x8>)
    28ce:	f004 bb5d 	b.w	6f8c <nrf_cc3xx_platform_set_abort>
    28d2:	bf00      	nop
    28d4:	0000824c 	.word	0x0000824c

000028d8 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    28d8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    28da:	b308      	cbz	r0, 2920 <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    28dc:	6843      	ldr	r3, [r0, #4]
    28de:	2b04      	cmp	r3, #4
    28e0:	d007      	beq.n	28f2 <mutex_unlock_platform+0x1a>
    28e2:	2b08      	cmp	r3, #8
    28e4:	d013      	beq.n	290e <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    28e6:	b1f3      	cbz	r3, 2926 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    28e8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    28ea:	f002 fc31 	bl	5150 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    28ee:	2000      	movs	r0, #0
    28f0:	e00c      	b.n	290c <mutex_unlock_platform+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    28f2:	2200      	movs	r2, #0
    28f4:	6803      	ldr	r3, [r0, #0]
    28f6:	e8d3 1fef 	ldaex	r1, [r3]
    28fa:	2901      	cmp	r1, #1
    28fc:	d103      	bne.n	2906 <mutex_unlock_platform+0x2e>
    28fe:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2902:	2800      	cmp	r0, #0
    2904:	d1f7      	bne.n	28f6 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2906:	4809      	ldr	r0, [pc, #36]	; (292c <mutex_unlock_platform+0x54>)
    2908:	bf08      	it	eq
    290a:	4610      	moveq	r0, r2
    }
}
    290c:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    290e:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    2910:	2000      	movs	r0, #0
    2912:	781b      	ldrb	r3, [r3, #0]
    2914:	4a06      	ldr	r2, [pc, #24]	; (2930 <mutex_unlock_platform+0x58>)
    2916:	f503 7380 	add.w	r3, r3, #256	; 0x100
    291a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    291e:	e7f5      	b.n	290c <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2920:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2924:	e7f2      	b.n	290c <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2926:	4803      	ldr	r0, [pc, #12]	; (2934 <mutex_unlock_platform+0x5c>)
    2928:	e7f0      	b.n	290c <mutex_unlock_platform+0x34>
    292a:	bf00      	nop
    292c:	ffff8fe9 	.word	0xffff8fe9
    2930:	50030000 	.word	0x50030000
    2934:	ffff8fea 	.word	0xffff8fea

00002938 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2938:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    293a:	4604      	mov	r4, r0
    293c:	b918      	cbnz	r0, 2946 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    293e:	4b0d      	ldr	r3, [pc, #52]	; (2974 <mutex_free_platform+0x3c>)
    2940:	480d      	ldr	r0, [pc, #52]	; (2978 <mutex_free_platform+0x40>)
    2942:	685b      	ldr	r3, [r3, #4]
    2944:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2946:	6861      	ldr	r1, [r4, #4]
    2948:	2908      	cmp	r1, #8
    294a:	d00d      	beq.n	2968 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    294c:	f031 0304 	bics.w	r3, r1, #4
    2950:	d00a      	beq.n	2968 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2952:	f011 0102 	ands.w	r1, r1, #2
    2956:	d008      	beq.n	296a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2958:	4621      	mov	r1, r4
    295a:	4808      	ldr	r0, [pc, #32]	; (297c <mutex_free_platform+0x44>)
    295c:	f002 f922 	bl	4ba4 <k_mem_slab_free>
        mutex->mutex = NULL;
    2960:	2300      	movs	r3, #0
    2962:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2964:	2300      	movs	r3, #0
    2966:	6063      	str	r3, [r4, #4]
}
    2968:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    296a:	2214      	movs	r2, #20
    296c:	6820      	ldr	r0, [r4, #0]
    296e:	f005 f8ac 	bl	7aca <memset>
    2972:	e7f7      	b.n	2964 <mutex_free_platform+0x2c>
    2974:	20000050 	.word	0x20000050
    2978:	00008ac7 	.word	0x00008ac7
    297c:	200004c0 	.word	0x200004c0

00002980 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2980:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2982:	4604      	mov	r4, r0
    2984:	b918      	cbnz	r0, 298e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2986:	4b16      	ldr	r3, [pc, #88]	; (29e0 <mutex_init_platform+0x60>)
    2988:	4816      	ldr	r0, [pc, #88]	; (29e4 <mutex_init_platform+0x64>)
    298a:	685b      	ldr	r3, [r3, #4]
    298c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    298e:	6863      	ldr	r3, [r4, #4]
    2990:	2b04      	cmp	r3, #4
    2992:	d023      	beq.n	29dc <mutex_init_platform+0x5c>
    2994:	2b08      	cmp	r3, #8
    2996:	d021      	beq.n	29dc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2998:	b9cb      	cbnz	r3, 29ce <mutex_init_platform+0x4e>
    299a:	6823      	ldr	r3, [r4, #0]
    299c:	b9bb      	cbnz	r3, 29ce <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    299e:	f04f 32ff 	mov.w	r2, #4294967295
    29a2:	f04f 33ff 	mov.w	r3, #4294967295
    29a6:	4621      	mov	r1, r4
    29a8:	480f      	ldr	r0, [pc, #60]	; (29e8 <mutex_init_platform+0x68>)
    29aa:	f002 f88f 	bl	4acc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    29ae:	b908      	cbnz	r0, 29b4 <mutex_init_platform+0x34>
    29b0:	6823      	ldr	r3, [r4, #0]
    29b2:	b91b      	cbnz	r3, 29bc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    29b4:	4b0a      	ldr	r3, [pc, #40]	; (29e0 <mutex_init_platform+0x60>)
    29b6:	480d      	ldr	r0, [pc, #52]	; (29ec <mutex_init_platform+0x6c>)
    29b8:	685b      	ldr	r3, [r3, #4]
    29ba:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    29bc:	2214      	movs	r2, #20
    29be:	2100      	movs	r1, #0
    29c0:	6820      	ldr	r0, [r4, #0]
    29c2:	f005 f882 	bl	7aca <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    29c6:	6863      	ldr	r3, [r4, #4]
    29c8:	f043 0302 	orr.w	r3, r3, #2
    29cc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    29ce:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    29d0:	f005 fa0a 	bl	7de8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    29d4:	6863      	ldr	r3, [r4, #4]
    29d6:	f043 0301 	orr.w	r3, r3, #1
    29da:	6063      	str	r3, [r4, #4]
}
    29dc:	bd10      	pop	{r4, pc}
    29de:	bf00      	nop
    29e0:	20000050 	.word	0x20000050
    29e4:	00008ac7 	.word	0x00008ac7
    29e8:	200004c0 	.word	0x200004c0
    29ec:	00008aed 	.word	0x00008aed

000029f0 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    29f0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    29f2:	b340      	cbz	r0, 2a46 <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    29f4:	6843      	ldr	r3, [r0, #4]
    29f6:	2b04      	cmp	r3, #4
    29f8:	d00b      	beq.n	2a12 <mutex_lock_platform+0x22>
    29fa:	2b08      	cmp	r3, #8
    29fc:	d016      	beq.n	2a2c <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    29fe:	b303      	cbz	r3, 2a42 <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2a00:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2a02:	f04f 32ff 	mov.w	r2, #4294967295
    2a06:	f04f 33ff 	mov.w	r3, #4294967295
    2a0a:	f002 faa7 	bl	4f5c <z_impl_k_mutex_lock>
        if (ret == 0) {
    2a0e:	b158      	cbz	r0, 2a28 <mutex_lock_platform+0x38>
    2a10:	e015      	b.n	2a3e <mutex_lock_platform+0x4e>
    2a12:	2201      	movs	r2, #1
    2a14:	6803      	ldr	r3, [r0, #0]
    2a16:	e8d3 1fef 	ldaex	r1, [r3]
    2a1a:	2900      	cmp	r1, #0
    2a1c:	d103      	bne.n	2a26 <mutex_lock_platform+0x36>
    2a1e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2a22:	2800      	cmp	r0, #0
    2a24:	d1f7      	bne.n	2a16 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a26:	d10a      	bne.n	2a3e <mutex_lock_platform+0x4e>
    2a28:	2000      	movs	r0, #0
}
    2a2a:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    2a2c:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    2a2e:	4a07      	ldr	r2, [pc, #28]	; (2a4c <mutex_lock_platform+0x5c>)
    2a30:	781b      	ldrb	r3, [r3, #0]
    2a32:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d0f4      	beq.n	2a28 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a3e:	4804      	ldr	r0, [pc, #16]	; (2a50 <mutex_lock_platform+0x60>)
    2a40:	e7f3      	b.n	2a2a <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2a42:	4804      	ldr	r0, [pc, #16]	; (2a54 <mutex_lock_platform+0x64>)
    2a44:	e7f1      	b.n	2a2a <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2a46:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2a4a:	e7ee      	b.n	2a2a <mutex_lock_platform+0x3a>
    2a4c:	50030000 	.word	0x50030000
    2a50:	ffff8fe9 	.word	0xffff8fe9
    2a54:	ffff8fea 	.word	0xffff8fea

00002a58 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2a58:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2a5a:	4906      	ldr	r1, [pc, #24]	; (2a74 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2a5c:	2340      	movs	r3, #64	; 0x40
    2a5e:	2214      	movs	r2, #20
    2a60:	4805      	ldr	r0, [pc, #20]	; (2a78 <nrf_cc3xx_platform_mutex_init+0x20>)
    2a62:	f005 f993 	bl	7d8c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2a6a:	4904      	ldr	r1, [pc, #16]	; (2a7c <nrf_cc3xx_platform_mutex_init+0x24>)
    2a6c:	4804      	ldr	r0, [pc, #16]	; (2a80 <nrf_cc3xx_platform_mutex_init+0x28>)
    2a6e:	f004 badf 	b.w	7030 <nrf_cc3xx_platform_set_mutexes>
    2a72:	bf00      	nop
    2a74:	200004e0 	.word	0x200004e0
    2a78:	200004c0 	.word	0x200004c0
    2a7c:	00008264 	.word	0x00008264
    2a80:	00008254 	.word	0x00008254

00002a84 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2a84:	4a09      	ldr	r2, [pc, #36]	; (2aac <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2a86:	490a      	ldr	r1, [pc, #40]	; (2ab0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2a88:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2a8a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2a8c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    2a8e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2a90:	4908      	ldr	r1, [pc, #32]	; (2ab4 <arch_swap+0x30>)
    2a92:	684b      	ldr	r3, [r1, #4]
    2a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2a98:	604b      	str	r3, [r1, #4]
    2a9a:	2300      	movs	r3, #0
    2a9c:	f383 8811 	msr	BASEPRI, r3
    2aa0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2aa4:	6893      	ldr	r3, [r2, #8]
}
    2aa6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2aa8:	4770      	bx	lr
    2aaa:	bf00      	nop
    2aac:	20000aa4 	.word	0x20000aa4
    2ab0:	00008318 	.word	0x00008318
    2ab4:	e000ed00 	.word	0xe000ed00

00002ab8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2ab8:	4913      	ldr	r1, [pc, #76]	; (2b08 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2aba:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2abc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2ac0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2ac2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2ac6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2aca:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2acc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2ad0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2ad4:	4f0d      	ldr	r7, [pc, #52]	; (2b0c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2ad6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2ada:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2adc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2ade:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2ae0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2ae2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2ae4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2ae6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2aea:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2aee:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2af2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2af6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    2afa:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2afc:	f004 ff5a 	bl	79b4 <configure_builtin_stack_guard>
    pop {r2, lr}
    2b00:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2b04:	4770      	bx	lr
    2b06:	0000      	.short	0x0000
    ldr r1, =_kernel
    2b08:	20000aa4 	.word	0x20000aa4
    ldr v4, =_SCS_ICSR
    2b0c:	e000ed04 	.word	0xe000ed04

00002b10 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2b10:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2b14:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2b16:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2b1a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2b1e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2b20:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2b24:	2902      	cmp	r1, #2
    beq _oops
    2b26:	d0ff      	beq.n	2b28 <_oops>

00002b28 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2b28:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2b2a:	f004 ff47 	bl	79bc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2b2e:	bd01      	pop	{r0, pc}

00002b30 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2b30:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2b32:	2b00      	cmp	r3, #0
    2b34:	db08      	blt.n	2b48 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b36:	2201      	movs	r2, #1
    2b38:	f000 001f 	and.w	r0, r0, #31
    2b3c:	fa02 f000 	lsl.w	r0, r2, r0
    2b40:	4a02      	ldr	r2, [pc, #8]	; (2b4c <arch_irq_enable+0x1c>)
    2b42:	095b      	lsrs	r3, r3, #5
    2b44:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2b48:	4770      	bx	lr
    2b4a:	bf00      	nop
    2b4c:	e000e100 	.word	0xe000e100

00002b50 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2b50:	4b05      	ldr	r3, [pc, #20]	; (2b68 <arch_irq_is_enabled+0x18>)
    2b52:	0942      	lsrs	r2, r0, #5
    2b54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2b58:	2301      	movs	r3, #1
    2b5a:	f000 001f 	and.w	r0, r0, #31
    2b5e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2b62:	4010      	ands	r0, r2
    2b64:	4770      	bx	lr
    2b66:	bf00      	nop
    2b68:	e000e100 	.word	0xe000e100

00002b6c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2b6c:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2b6e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2b70:	2c07      	cmp	r4, #7
{
    2b72:	4605      	mov	r5, r0
    2b74:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2b76:	d90f      	bls.n	2b98 <z_arm_irq_priority_set+0x2c>
    2b78:	2358      	movs	r3, #88	; 0x58
    2b7a:	4a10      	ldr	r2, [pc, #64]	; (2bbc <z_arm_irq_priority_set+0x50>)
    2b7c:	4910      	ldr	r1, [pc, #64]	; (2bc0 <z_arm_irq_priority_set+0x54>)
    2b7e:	4811      	ldr	r0, [pc, #68]	; (2bc4 <z_arm_irq_priority_set+0x58>)
    2b80:	f004 fb2a 	bl	71d8 <printk>
    2b84:	4631      	mov	r1, r6
    2b86:	4810      	ldr	r0, [pc, #64]	; (2bc8 <z_arm_irq_priority_set+0x5c>)
    2b88:	2307      	movs	r3, #7
    2b8a:	462a      	mov	r2, r5
    2b8c:	f004 fb24 	bl	71d8 <printk>
    2b90:	2158      	movs	r1, #88	; 0x58
    2b92:	480a      	ldr	r0, [pc, #40]	; (2bbc <z_arm_irq_priority_set+0x50>)
    2b94:	f004 fbf9 	bl	738a <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2b98:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2b9a:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b9c:	bfac      	ite	ge
    2b9e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ba2:	4b0a      	ldrlt	r3, [pc, #40]	; (2bcc <z_arm_irq_priority_set+0x60>)
    2ba4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2ba8:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2baa:	bfab      	itete	ge
    2bac:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bb0:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bb4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bb8:	555c      	strblt	r4, [r3, r5]
}
    2bba:	bd70      	pop	{r4, r5, r6, pc}
    2bbc:	00008b1a 	.word	0x00008b1a
    2bc0:	00008b50 	.word	0x00008b50
    2bc4:	00008496 	.word	0x00008496
    2bc8:	00008b6b 	.word	0x00008b6b
    2bcc:	e000ed14 	.word	0xe000ed14

00002bd0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2bd0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2bd4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2bd6:	490b      	ldr	r1, [pc, #44]	; (2c04 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2bd8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2bdc:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    2bde:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    2be2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2be6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2be8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2bec:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2bf4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2bf8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2bfa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2bfc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2bfe:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2c00:	4770      	bx	lr
    2c02:	bf00      	nop
    2c04:	000072b5 	.word	0x000072b5

00002c08 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2c08:	4b08      	ldr	r3, [pc, #32]	; (2c2c <arch_switch_to_main_thread+0x24>)
    2c0a:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2c0c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    2c0e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2c12:	4610      	mov	r0, r2
    2c14:	f381 8809 	msr	PSP, r1
    2c18:	2100      	movs	r1, #0
    2c1a:	b663      	cpsie	if
    2c1c:	f381 8811 	msr	BASEPRI, r1
    2c20:	f3bf 8f6f 	isb	sy
    2c24:	2200      	movs	r2, #0
    2c26:	2300      	movs	r3, #0
    2c28:	f004 fb44 	bl	72b4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2c2c:	20000aa4 	.word	0x20000aa4

00002c30 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2c30:	4901      	ldr	r1, [pc, #4]	; (2c38 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2c32:	2210      	movs	r2, #16
	str	r2, [r1]
    2c34:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2c36:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2c38:	e000ed10 	.word	0xe000ed10

00002c3c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2c3c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2c3e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2c40:	f380 8811 	msr	BASEPRI, r0
	isb
    2c44:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2c48:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2c4c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2c4e:	b662      	cpsie	i
	isb
    2c50:	f3bf 8f6f 	isb	sy

	bx	lr
    2c54:	4770      	bx	lr
    2c56:	bf00      	nop

00002c58 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2c58:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2c5a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2c5c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2c60:	bf20      	wfe

	msr	BASEPRI, r0
    2c62:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2c66:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2c68:	4770      	bx	lr
    2c6a:	bf00      	nop

00002c6c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2c6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2c6e:	4606      	mov	r6, r0

	if (esf != NULL) {
    2c70:	460c      	mov	r4, r1
    2c72:	b301      	cbz	r1, 2cb6 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2c74:	4b13      	ldr	r3, [pc, #76]	; (2cc4 <z_arm_fatal_error+0x58>)
    2c76:	4d14      	ldr	r5, [pc, #80]	; (2cc8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2c78:	4814      	ldr	r0, [pc, #80]	; (2ccc <z_arm_fatal_error+0x60>)
    2c7a:	1aed      	subs	r5, r5, r3
    2c7c:	08ed      	lsrs	r5, r5, #3
    2c7e:	01ad      	lsls	r5, r5, #6
    2c80:	f045 0501 	orr.w	r5, r5, #1
    2c84:	f8ad 5000 	strh.w	r5, [sp]
    2c88:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    2c8c:	6809      	ldr	r1, [r1, #0]
    2c8e:	f004 fbf1 	bl	7474 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2c92:	f8ad 5000 	strh.w	r5, [sp]
    2c96:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    2c9a:	68e1      	ldr	r1, [r4, #12]
    2c9c:	480c      	ldr	r0, [pc, #48]	; (2cd0 <z_arm_fatal_error+0x64>)
    2c9e:	f004 fbe9 	bl	7474 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2ca2:	462a      	mov	r2, r5
    2ca4:	69e1      	ldr	r1, [r4, #28]
    2ca6:	480b      	ldr	r0, [pc, #44]	; (2cd4 <z_arm_fatal_error+0x68>)
    2ca8:	f004 fbb7 	bl	741a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2cac:	462a      	mov	r2, r5
    2cae:	69a1      	ldr	r1, [r4, #24]
    2cb0:	4809      	ldr	r0, [pc, #36]	; (2cd8 <z_arm_fatal_error+0x6c>)
    2cb2:	f004 fbb2 	bl	741a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2cb6:	4621      	mov	r1, r4
    2cb8:	4630      	mov	r0, r6
}
    2cba:	b002      	add	sp, #8
    2cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2cc0:	f001 bda4 	b.w	480c <z_fatal_error>
    2cc4:	00008124 	.word	0x00008124
    2cc8:	0000813c 	.word	0x0000813c
    2ccc:	00008bab 	.word	0x00008bab
    2cd0:	00008bda 	.word	0x00008bda
    2cd4:	00008c09 	.word	0x00008c09
    2cd8:	00008c18 	.word	0x00008c18

00002cdc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2cdc:	bf30      	wfi
    b z_SysNmiOnReset
    2cde:	f7ff bffd 	b.w	2cdc <z_SysNmiOnReset>
    2ce2:	bf00      	nop

00002ce4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2ce4:	4a0b      	ldr	r2, [pc, #44]	; (2d14 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2ce6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2ce8:	4b0b      	ldr	r3, [pc, #44]	; (2d18 <z_arm_prep_c+0x34>)
    2cea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2cee:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2cf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cf4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2cf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2cfc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2d04:	f001 fdfa 	bl	48fc <z_bss_zero>
	z_data_copy();
    2d08:	f003 fd20 	bl	674c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2d0c:	f000 faf2 	bl	32f4 <z_arm_interrupt_init>
	z_cstart();
    2d10:	f001 fe18 	bl	4944 <z_cstart>
    2d14:	00000000 	.word	0x00000000
    2d18:	e000ed00 	.word	0xe000ed00

00002d1c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2d1c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2d1e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2d20:	4a0b      	ldr	r2, [pc, #44]	; (2d50 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2d22:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    2d24:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2d26:	bf1e      	ittt	ne
	movne	r1, #0
    2d28:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2d2a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    2d2c:	f005 f855 	blne	7dda <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2d30:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2d32:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2d36:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2d3a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2d3e:	4905      	ldr	r1, [pc, #20]	; (2d54 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2d40:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2d42:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2d44:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2d46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2d4a:	4903      	ldr	r1, [pc, #12]	; (2d58 <_isr_wrapper+0x3c>)
	bx r1
    2d4c:	4708      	bx	r1
    2d4e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2d50:	20000aa4 	.word	0x20000aa4
	ldr r1, =_sw_isr_table
    2d54:	00007efc 	.word	0x00007efc
	ldr r1, =z_arm_int_exit
    2d58:	0000326d 	.word	0x0000326d

00002d5c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2d5c:	2000      	movs	r0, #0
    msr CONTROL, r0
    2d5e:	f380 8814 	msr	CONTROL, r0
    isb
    2d62:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2d66:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2d68:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2d6c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    2d70:	f004 fb13 	bl	739a <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2d74:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2d76:	490e      	ldr	r1, [pc, #56]	; (2db0 <__start+0x54>)
    str r0, [r1]
    2d78:	6008      	str	r0, [r1, #0]
    dsb
    2d7a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2d7e:	480d      	ldr	r0, [pc, #52]	; (2db4 <__start+0x58>)
    msr msp, r0
    2d80:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2d84:	f000 fa90 	bl	32a8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2d88:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2d8a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2d8e:	480a      	ldr	r0, [pc, #40]	; (2db8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2d90:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2d94:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2d96:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2d9a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2d9e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2da0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2da2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2da6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2daa:	f7ff ff9b 	bl	2ce4 <z_arm_prep_c>
    2dae:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2db0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2db4:	20004e18 	.word	0x20004e18
    ldr r0, =z_interrupt_stacks
    2db8:	20004f58 	.word	0x20004f58

00002dbc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2dbc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2dc0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2dc4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2dc6:	4672      	mov	r2, lr
	bl z_arm_fault
    2dc8:	f000 f95e 	bl	3088 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2dcc:	bd01      	pop	{r0, pc}
    2dce:	bf00      	nop

00002dd0 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2dd0:	b570      	push	{r4, r5, r6, lr}
    2dd2:	4b28      	ldr	r3, [pc, #160]	; (2e74 <usage_fault.isra.0+0xa4>)
    2dd4:	4c28      	ldr	r4, [pc, #160]	; (2e78 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2dd6:	4d29      	ldr	r5, [pc, #164]	; (2e7c <usage_fault.isra.0+0xac>)
    2dd8:	1ae4      	subs	r4, r4, r3
    2dda:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2ddc:	01a4      	lsls	r4, r4, #6
    2dde:	f044 0601 	orr.w	r6, r4, #1
    2de2:	4631      	mov	r1, r6
    2de4:	4826      	ldr	r0, [pc, #152]	; (2e80 <usage_fault.isra.0+0xb0>)
    2de6:	f004 fb0b 	bl	7400 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2dea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2dec:	0193      	lsls	r3, r2, #6
    2dee:	d503      	bpl.n	2df8 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    2df0:	4631      	mov	r1, r6
    2df2:	4824      	ldr	r0, [pc, #144]	; (2e84 <usage_fault.isra.0+0xb4>)
    2df4:	f004 fb04 	bl	7400 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2df8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2dfa:	01dd      	lsls	r5, r3, #7
    2dfc:	d504      	bpl.n	2e08 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    2dfe:	4822      	ldr	r0, [pc, #136]	; (2e88 <usage_fault.isra.0+0xb8>)
    2e00:	f044 0101 	orr.w	r1, r4, #1
    2e04:	f004 fafc 	bl	7400 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2e08:	4d1c      	ldr	r5, [pc, #112]	; (2e7c <usage_fault.isra.0+0xac>)
    2e0a:	6aae      	ldr	r6, [r5, #40]	; 0x28
    2e0c:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
    2e10:	d005      	beq.n	2e1e <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2e12:	481e      	ldr	r0, [pc, #120]	; (2e8c <usage_fault.isra.0+0xbc>)
    2e14:	f044 0101 	orr.w	r1, r4, #1
    2e18:	f004 faf2 	bl	7400 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2e1c:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2e1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e20:	0318      	lsls	r0, r3, #12
    2e22:	d504      	bpl.n	2e2e <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
    2e24:	481a      	ldr	r0, [pc, #104]	; (2e90 <usage_fault.isra.0+0xc0>)
    2e26:	f044 0101 	orr.w	r1, r4, #1
    2e2a:	f004 fae9 	bl	7400 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2e2e:	4d13      	ldr	r5, [pc, #76]	; (2e7c <usage_fault.isra.0+0xac>)
    2e30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2e32:	0351      	lsls	r1, r2, #13
    2e34:	d504      	bpl.n	2e40 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2e36:	4817      	ldr	r0, [pc, #92]	; (2e94 <usage_fault.isra.0+0xc4>)
    2e38:	f044 0101 	orr.w	r1, r4, #1
    2e3c:	f004 fae0 	bl	7400 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2e40:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e42:	039a      	lsls	r2, r3, #14
    2e44:	d504      	bpl.n	2e50 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2e46:	4814      	ldr	r0, [pc, #80]	; (2e98 <usage_fault.isra.0+0xc8>)
    2e48:	f044 0101 	orr.w	r1, r4, #1
    2e4c:	f004 fad8 	bl	7400 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2e50:	4d0a      	ldr	r5, [pc, #40]	; (2e7c <usage_fault.isra.0+0xac>)
    2e52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e54:	03db      	lsls	r3, r3, #15
    2e56:	d504      	bpl.n	2e62 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2e58:	4810      	ldr	r0, [pc, #64]	; (2e9c <usage_fault.isra.0+0xcc>)
    2e5a:	f044 0101 	orr.w	r1, r4, #1
    2e5e:	f004 facf 	bl	7400 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2e62:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2e64:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2e66:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2e6a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2e6e:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2e70:	bd70      	pop	{r4, r5, r6, pc}
    2e72:	bf00      	nop
    2e74:	00008124 	.word	0x00008124
    2e78:	0000813c 	.word	0x0000813c
    2e7c:	e000ed00 	.word	0xe000ed00
    2e80:	00008c46 	.word	0x00008c46
    2e84:	00008c5e 	.word	0x00008c5e
    2e88:	00008c71 	.word	0x00008c71
    2e8c:	00008c8b 	.word	0x00008c8b
    2e90:	00008cb5 	.word	0x00008cb5
    2e94:	00008cd3 	.word	0x00008cd3
    2e98:	00008cf8 	.word	0x00008cf8
    2e9c:	00008d12 	.word	0x00008d12

00002ea0 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ea4:	4b33      	ldr	r3, [pc, #204]	; (2f74 <mem_manage_fault.isra.0+0xd4>)
    2ea6:	4c34      	ldr	r4, [pc, #208]	; (2f78 <mem_manage_fault.isra.0+0xd8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2ea8:	4d34      	ldr	r5, [pc, #208]	; (2f7c <mem_manage_fault.isra.0+0xdc>)
    2eaa:	1ae4      	subs	r4, r4, r3
    2eac:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    2eae:	01a4      	lsls	r4, r4, #6
    2eb0:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2eb4:	4607      	mov	r7, r0
    2eb6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2eb8:	4831      	ldr	r0, [pc, #196]	; (2f80 <mem_manage_fault.isra.0+0xe0>)
    2eba:	4641      	mov	r1, r8
    2ebc:	f004 faa0 	bl	7400 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2ec0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2ec2:	06d0      	lsls	r0, r2, #27
    2ec4:	d503      	bpl.n	2ece <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2ec6:	4641      	mov	r1, r8
    2ec8:	482e      	ldr	r0, [pc, #184]	; (2f84 <mem_manage_fault.isra.0+0xe4>)
    2eca:	f004 fa99 	bl	7400 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2ece:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ed0:	0719      	lsls	r1, r3, #28
    2ed2:	d504      	bpl.n	2ede <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    2ed4:	482c      	ldr	r0, [pc, #176]	; (2f88 <mem_manage_fault.isra.0+0xe8>)
    2ed6:	f044 0101 	orr.w	r1, r4, #1
    2eda:	f004 fa91 	bl	7400 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2ede:	4d27      	ldr	r5, [pc, #156]	; (2f7c <mem_manage_fault.isra.0+0xdc>)
    2ee0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ee2:	079a      	lsls	r2, r3, #30
    2ee4:	d512      	bpl.n	2f0c <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    2ee6:	f044 0801 	orr.w	r8, r4, #1
    2eea:	4641      	mov	r1, r8
    2eec:	4827      	ldr	r0, [pc, #156]	; (2f8c <mem_manage_fault.isra.0+0xec>)
    2eee:	f004 fa87 	bl	7400 <log_0>
		uint32_t temp = SCB->MMFAR;
    2ef2:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2ef4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ef6:	061b      	lsls	r3, r3, #24
    2ef8:	d508      	bpl.n	2f0c <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2efa:	4642      	mov	r2, r8
    2efc:	4824      	ldr	r0, [pc, #144]	; (2f90 <mem_manage_fault.isra.0+0xf0>)
    2efe:	f004 fa8c 	bl	741a <log_1>
			if (from_hard_fault != 0) {
    2f02:	b11f      	cbz	r7, 2f0c <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2f04:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2f0a:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2f0c:	4d1b      	ldr	r5, [pc, #108]	; (2f7c <mem_manage_fault.isra.0+0xdc>)
    2f0e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2f10:	07d7      	lsls	r7, r2, #31
    2f12:	d504      	bpl.n	2f1e <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    2f14:	481f      	ldr	r0, [pc, #124]	; (2f94 <mem_manage_fault.isra.0+0xf4>)
    2f16:	f044 0101 	orr.w	r1, r4, #1
    2f1a:	f004 fa71 	bl	7400 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2f1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f20:	0698      	lsls	r0, r3, #26
    2f22:	d504      	bpl.n	2f2e <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    2f24:	481c      	ldr	r0, [pc, #112]	; (2f98 <mem_manage_fault.isra.0+0xf8>)
    2f26:	f044 0101 	orr.w	r1, r4, #1
    2f2a:	f004 fa69 	bl	7400 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f2e:	4b13      	ldr	r3, [pc, #76]	; (2f7c <mem_manage_fault.isra.0+0xdc>)
    2f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f32:	06d1      	lsls	r1, r2, #27
    2f34:	d402      	bmi.n	2f3c <mem_manage_fault.isra.0+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f38:	0792      	lsls	r2, r2, #30
    2f3a:	d511      	bpl.n	2f60 <mem_manage_fault.isra.0+0xc0>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f3e:	06db      	lsls	r3, r3, #27
    2f40:	d50e      	bpl.n	2f60 <mem_manage_fault.isra.0+0xc0>
    2f42:	4916      	ldr	r1, [pc, #88]	; (2f9c <mem_manage_fault.isra.0+0xfc>)
    2f44:	f240 134f 	movw	r3, #335	; 0x14f
    2f48:	4a15      	ldr	r2, [pc, #84]	; (2fa0 <mem_manage_fault.isra.0+0x100>)
    2f4a:	4816      	ldr	r0, [pc, #88]	; (2fa4 <mem_manage_fault.isra.0+0x104>)
    2f4c:	f004 f944 	bl	71d8 <printk>
    2f50:	4815      	ldr	r0, [pc, #84]	; (2fa8 <mem_manage_fault.isra.0+0x108>)
    2f52:	f004 f941 	bl	71d8 <printk>
    2f56:	f240 114f 	movw	r1, #335	; 0x14f
    2f5a:	4811      	ldr	r0, [pc, #68]	; (2fa0 <mem_manage_fault.isra.0+0x100>)
    2f5c:	f004 fa15 	bl	738a <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
    2f60:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2f62:	4a06      	ldr	r2, [pc, #24]	; (2f7c <mem_manage_fault.isra.0+0xdc>)
    2f64:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f66:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2f6a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2f6c:	7030      	strb	r0, [r6, #0]
}
    2f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f72:	bf00      	nop
    2f74:	00008124 	.word	0x00008124
    2f78:	0000813c 	.word	0x0000813c
    2f7c:	e000ed00 	.word	0xe000ed00
    2f80:	00008d3d 	.word	0x00008d3d
    2f84:	00008d53 	.word	0x00008d53
    2f88:	00008d86 	.word	0x00008d86
    2f8c:	00008d99 	.word	0x00008d99
    2f90:	00008db1 	.word	0x00008db1
    2f94:	00008dc7 	.word	0x00008dc7
    2f98:	00008de6 	.word	0x00008de6
    2f9c:	00008e4f 	.word	0x00008e4f
    2fa0:	00008e15 	.word	0x00008e15
    2fa4:	00008496 	.word	0x00008496
    2fa8:	00008e99 	.word	0x00008e99

00002fac <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fb0:	4b2a      	ldr	r3, [pc, #168]	; (305c <bus_fault.isra.0+0xb0>)
    2fb2:	4c2b      	ldr	r4, [pc, #172]	; (3060 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2fb4:	4d2b      	ldr	r5, [pc, #172]	; (3064 <bus_fault.isra.0+0xb8>)
    2fb6:	1ae4      	subs	r4, r4, r3
    2fb8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    2fba:	01a4      	lsls	r4, r4, #6
    2fbc:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2fc0:	4607      	mov	r7, r0
    2fc2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2fc4:	4828      	ldr	r0, [pc, #160]	; (3068 <bus_fault.isra.0+0xbc>)
    2fc6:	4641      	mov	r1, r8
    2fc8:	f004 fa1a 	bl	7400 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2fcc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2fce:	04d1      	lsls	r1, r2, #19
    2fd0:	d503      	bpl.n	2fda <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    2fd2:	4641      	mov	r1, r8
    2fd4:	4825      	ldr	r0, [pc, #148]	; (306c <bus_fault.isra.0+0xc0>)
    2fd6:	f004 fa13 	bl	7400 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2fda:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fdc:	051a      	lsls	r2, r3, #20
    2fde:	d504      	bpl.n	2fea <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    2fe0:	4823      	ldr	r0, [pc, #140]	; (3070 <bus_fault.isra.0+0xc4>)
    2fe2:	f044 0101 	orr.w	r1, r4, #1
    2fe6:	f004 fa0b 	bl	7400 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2fea:	4d1e      	ldr	r5, [pc, #120]	; (3064 <bus_fault.isra.0+0xb8>)
    2fec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fee:	059b      	lsls	r3, r3, #22
    2ff0:	d512      	bpl.n	3018 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    2ff2:	f044 0801 	orr.w	r8, r4, #1
    2ff6:	4641      	mov	r1, r8
    2ff8:	481e      	ldr	r0, [pc, #120]	; (3074 <bus_fault.isra.0+0xc8>)
    2ffa:	f004 fa01 	bl	7400 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    2ffe:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3000:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3002:	0418      	lsls	r0, r3, #16
    3004:	d508      	bpl.n	3018 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3006:	4642      	mov	r2, r8
    3008:	481b      	ldr	r0, [pc, #108]	; (3078 <bus_fault.isra.0+0xcc>)
    300a:	f004 fa06 	bl	741a <log_1>
			if (from_hard_fault != 0) {
    300e:	b11f      	cbz	r7, 3018 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3010:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3012:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3016:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3018:	4d12      	ldr	r5, [pc, #72]	; (3064 <bus_fault.isra.0+0xb8>)
    301a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    301c:	0559      	lsls	r1, r3, #21
    301e:	d504      	bpl.n	302a <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    3020:	4816      	ldr	r0, [pc, #88]	; (307c <bus_fault.isra.0+0xd0>)
    3022:	f044 0101 	orr.w	r1, r4, #1
    3026:	f004 f9eb 	bl	7400 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    302a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    302c:	05da      	lsls	r2, r3, #23
    302e:	d50d      	bpl.n	304c <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    3030:	4813      	ldr	r0, [pc, #76]	; (3080 <bus_fault.isra.0+0xd4>)
    3032:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3036:	f004 f9e3 	bl	7400 <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
    303a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    303c:	4a09      	ldr	r2, [pc, #36]	; (3064 <bus_fault.isra.0+0xb8>)
    303e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3040:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3044:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3046:	7030      	strb	r0, [r6, #0]
}
    3048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    304c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    304e:	049b      	lsls	r3, r3, #18
    3050:	d5f3      	bpl.n	303a <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3052:	480c      	ldr	r0, [pc, #48]	; (3084 <bus_fault.isra.0+0xd8>)
    3054:	f044 0101 	orr.w	r1, r4, #1
    3058:	e7ed      	b.n	3036 <bus_fault.isra.0+0x8a>
    305a:	bf00      	nop
    305c:	00008124 	.word	0x00008124
    3060:	0000813c 	.word	0x0000813c
    3064:	e000ed00 	.word	0xe000ed00
    3068:	00008efd 	.word	0x00008efd
    306c:	00008f13 	.word	0x00008f13
    3070:	00008d86 	.word	0x00008d86
    3074:	00008f24 	.word	0x00008f24
    3078:	00008f3d 	.word	0x00008f3d
    307c:	00008f52 	.word	0x00008f52
    3080:	00008f6d 	.word	0x00008f6d
    3084:	00008de6 	.word	0x00008de6

00003088 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    308c:	4b5f      	ldr	r3, [pc, #380]	; (320c <z_arm_fault+0x184>)
{
    308e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3090:	685d      	ldr	r5, [r3, #4]
    3092:	2600      	movs	r6, #0
{
    3094:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3096:	f3c5 0408 	ubfx	r4, r5, #0, #9
    309a:	f386 8811 	msr	BASEPRI, r6
    309e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    30a2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    30a6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    30aa:	d10d      	bne.n	30c8 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    30ac:	f002 030c 	and.w	r3, r2, #12
    30b0:	2b08      	cmp	r3, #8
    30b2:	d11a      	bne.n	30ea <z_arm_fault+0x62>
    30b4:	4956      	ldr	r1, [pc, #344]	; (3210 <z_arm_fault+0x188>)
    30b6:	4b57      	ldr	r3, [pc, #348]	; (3214 <z_arm_fault+0x18c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    30b8:	4857      	ldr	r0, [pc, #348]	; (3218 <z_arm_fault+0x190>)
    30ba:	1ac9      	subs	r1, r1, r3
    30bc:	08c9      	lsrs	r1, r1, #3
    30be:	0189      	lsls	r1, r1, #6
    30c0:	f041 0101 	orr.w	r1, r1, #1
    30c4:	f004 f99c 	bl	7400 <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    30c8:	f240 33e1 	movw	r3, #993	; 0x3e1
    30cc:	4a53      	ldr	r2, [pc, #332]	; (321c <z_arm_fault+0x194>)
    30ce:	4954      	ldr	r1, [pc, #336]	; (3220 <z_arm_fault+0x198>)
    30d0:	4854      	ldr	r0, [pc, #336]	; (3224 <z_arm_fault+0x19c>)
    30d2:	f004 f881 	bl	71d8 <printk>
    30d6:	4854      	ldr	r0, [pc, #336]	; (3228 <z_arm_fault+0x1a0>)
    30d8:	f004 f87e 	bl	71d8 <printk>
    30dc:	f240 31e1 	movw	r1, #993	; 0x3e1
    30e0:	484e      	ldr	r0, [pc, #312]	; (321c <z_arm_fault+0x194>)
    30e2:	f004 f952 	bl	738a <assert_post_action>
    30e6:	2700      	movs	r7, #0
    30e8:	e005      	b.n	30f6 <z_arm_fault+0x6e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    30ea:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    30ec:	bf5c      	itt	pl
    30ee:	4607      	movpl	r7, r0
			*nested_exc = true;
    30f0:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    30f2:	2f00      	cmp	r7, #0
    30f4:	d0e8      	beq.n	30c8 <z_arm_fault+0x40>
	*recoverable = false;
    30f6:	2300      	movs	r3, #0
    30f8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    30fc:	1ee3      	subs	r3, r4, #3
    30fe:	2b09      	cmp	r3, #9
    3100:	d86a      	bhi.n	31d8 <z_arm_fault+0x150>
    3102:	e8df f003 	tbb	[pc, r3]
    3106:	5805      	.short	0x5805
    3108:	69693c5c 	.word	0x69693c5c
    310c:	60696969 	.word	0x60696969
	*recoverable = false;
    3110:	f04f 0800 	mov.w	r8, #0
    3114:	4b3f      	ldr	r3, [pc, #252]	; (3214 <z_arm_fault+0x18c>)
    3116:	4d3e      	ldr	r5, [pc, #248]	; (3210 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    3118:	4844      	ldr	r0, [pc, #272]	; (322c <z_arm_fault+0x1a4>)
    311a:	1aed      	subs	r5, r5, r3
    311c:	08ed      	lsrs	r5, r5, #3
    311e:	01ad      	lsls	r5, r5, #6
    3120:	f045 0501 	orr.w	r5, r5, #1
    3124:	4629      	mov	r1, r5
    3126:	f004 f96b 	bl	7400 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    312a:	4b38      	ldr	r3, [pc, #224]	; (320c <z_arm_fault+0x184>)
	*recoverable = false;
    312c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3130:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3132:	f014 0402 	ands.w	r4, r4, #2
    3136:	d005      	beq.n	3144 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
    3138:	4629      	mov	r1, r5
    313a:	483d      	ldr	r0, [pc, #244]	; (3230 <z_arm_fault+0x1a8>)
	PR_FAULT_INFO(
    313c:	f004 f960 	bl	7400 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3140:	2400      	movs	r4, #0
}
    3142:	e01f      	b.n	3184 <z_arm_fault+0xfc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3146:	005b      	lsls	r3, r3, #1
    3148:	d51c      	bpl.n	3184 <z_arm_fault+0xfc>
		PR_EXC("  Fault escalation (see below)");
    314a:	4629      	mov	r1, r5
    314c:	4839      	ldr	r0, [pc, #228]	; (3234 <z_arm_fault+0x1ac>)
    314e:	f004 f957 	bl	7400 <log_0>
		if (SCB_MMFSR != 0) {
    3152:	4b39      	ldr	r3, [pc, #228]	; (3238 <z_arm_fault+0x1b0>)
    3154:	781b      	ldrb	r3, [r3, #0]
    3156:	b12b      	cbz	r3, 3164 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    3158:	2001      	movs	r0, #1
    315a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    315e:	f7ff fe9f 	bl	2ea0 <mem_manage_fault.isra.0>
    3162:	e00e      	b.n	3182 <z_arm_fault+0xfa>
		} else if (SCB_BFSR != 0) {
    3164:	4b35      	ldr	r3, [pc, #212]	; (323c <z_arm_fault+0x1b4>)
    3166:	781b      	ldrb	r3, [r3, #0]
    3168:	b12b      	cbz	r3, 3176 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    316a:	2001      	movs	r0, #1
    316c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    3170:	f7ff ff1c 	bl	2fac <bus_fault.isra.0>
    3174:	e005      	b.n	3182 <z_arm_fault+0xfa>
		} else if (SCB_UFSR != 0) {
    3176:	4b32      	ldr	r3, [pc, #200]	; (3240 <z_arm_fault+0x1b8>)
    3178:	881b      	ldrh	r3, [r3, #0]
    317a:	b29b      	uxth	r3, r3
    317c:	b113      	cbz	r3, 3184 <z_arm_fault+0xfc>
			reason = usage_fault(esf);
    317e:	f7ff fe27 	bl	2dd0 <usage_fault.isra.0>
    3182:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3184:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3188:	b993      	cbnz	r3, 31b0 <z_arm_fault+0x128>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    318a:	2220      	movs	r2, #32
    318c:	4639      	mov	r1, r7
    318e:	a802      	add	r0, sp, #8
    3190:	f004 fc70 	bl	7a74 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3194:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3196:	b39e      	cbz	r6, 3200 <z_arm_fault+0x178>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3198:	f3c3 0208 	ubfx	r2, r3, #0, #9
    319c:	b922      	cbnz	r2, 31a8 <z_arm_fault+0x120>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    319e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    31a2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    31a6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    31a8:	4620      	mov	r0, r4
    31aa:	a902      	add	r1, sp, #8
    31ac:	f7ff fd5e 	bl	2c6c <z_arm_fatal_error>
}
    31b0:	b00a      	add	sp, #40	; 0x28
    31b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    31b6:	2000      	movs	r0, #0
    31b8:	f10d 0107 	add.w	r1, sp, #7
    31bc:	e7cf      	b.n	315e <z_arm_fault+0xd6>
		reason = bus_fault(esf, 0, recoverable);
    31be:	2000      	movs	r0, #0
    31c0:	f10d 0107 	add.w	r1, sp, #7
    31c4:	e7d4      	b.n	3170 <z_arm_fault+0xe8>
    31c6:	4912      	ldr	r1, [pc, #72]	; (3210 <z_arm_fault+0x188>)
    31c8:	4b12      	ldr	r3, [pc, #72]	; (3214 <z_arm_fault+0x18c>)
	PR_FAULT_INFO(
    31ca:	481e      	ldr	r0, [pc, #120]	; (3244 <z_arm_fault+0x1bc>)
    31cc:	1ac9      	subs	r1, r1, r3
    31ce:	08c9      	lsrs	r1, r1, #3
    31d0:	0189      	lsls	r1, r1, #6
    31d2:	f041 0101 	orr.w	r1, r1, #1
    31d6:	e7b1      	b.n	313c <z_arm_fault+0xb4>
    31d8:	4a0e      	ldr	r2, [pc, #56]	; (3214 <z_arm_fault+0x18c>)
    31da:	4b0d      	ldr	r3, [pc, #52]	; (3210 <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** %s %d) *****",
    31dc:	481a      	ldr	r0, [pc, #104]	; (3248 <z_arm_fault+0x1c0>)
    31de:	1a9b      	subs	r3, r3, r2
    31e0:	08db      	lsrs	r3, r3, #3
    31e2:	f415 7ff8 	tst.w	r5, #496	; 0x1f0
    31e6:	ea4f 1383 	mov.w	r3, r3, lsl #6
    31ea:	4918      	ldr	r1, [pc, #96]	; (324c <z_arm_fault+0x1c4>)
    31ec:	f043 0301 	orr.w	r3, r3, #1
    31f0:	bf18      	it	ne
    31f2:	4601      	movne	r1, r0
    31f4:	f1a4 0210 	sub.w	r2, r4, #16
    31f8:	4815      	ldr	r0, [pc, #84]	; (3250 <z_arm_fault+0x1c8>)
    31fa:	f004 f922 	bl	7442 <log_2>
    31fe:	e79f      	b.n	3140 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3200:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3204:	f023 0301 	bic.w	r3, r3, #1
    3208:	e7cd      	b.n	31a6 <z_arm_fault+0x11e>
    320a:	bf00      	nop
    320c:	e000ed00 	.word	0xe000ed00
    3210:	0000813c 	.word	0x0000813c
    3214:	00008124 	.word	0x00008124
    3218:	00008f85 	.word	0x00008f85
    321c:	00008e15 	.word	0x00008e15
    3220:	00008fb0 	.word	0x00008fb0
    3224:	00008496 	.word	0x00008496
    3228:	00008fc3 	.word	0x00008fc3
    322c:	00009001 	.word	0x00009001
    3230:	00009018 	.word	0x00009018
    3234:	00009039 	.word	0x00009039
    3238:	e000ed28 	.word	0xe000ed28
    323c:	e000ed29 	.word	0xe000ed29
    3240:	e000ed2a 	.word	0xe000ed2a
    3244:	00009058 	.word	0x00009058
    3248:	00009091 	.word	0x00009091
    324c:	0000907c 	.word	0x0000907c
    3250:	000090aa 	.word	0x000090aa

00003254 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3254:	4b04      	ldr	r3, [pc, #16]	; (3268 <z_arm_fault_init+0x14>)
    3256:	695a      	ldr	r2, [r3, #20]
    3258:	f042 0210 	orr.w	r2, r2, #16
    325c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    325e:	695a      	ldr	r2, [r3, #20]
    3260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3264:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3266:	4770      	bx	lr
    3268:	e000ed00 	.word	0xe000ed00

0000326c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    326c:	4b04      	ldr	r3, [pc, #16]	; (3280 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    326e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3270:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    3272:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3274:	d003      	beq.n	327e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3276:	4903      	ldr	r1, [pc, #12]	; (3284 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    327c:	600a      	str	r2, [r1, #0]

0000327e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    327e:	4770      	bx	lr
	ldr r3, =_kernel
    3280:	20000aa4 	.word	0x20000aa4
	ldr r1, =_SCS_ICSR
    3284:	e000ed04 	.word	0xe000ed04

00003288 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    3288:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    328a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    328c:	4a05      	ldr	r2, [pc, #20]	; (32a4 <z_arm_clear_arm_mpu_config+0x1c>)
    328e:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    3290:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    3294:	428b      	cmp	r3, r1
    3296:	d100      	bne.n	329a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    3298:	4770      	bx	lr
  mpu->RNR = rnr;
    329a:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    329c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    329e:	3301      	adds	r3, #1
    32a0:	e7f8      	b.n	3294 <z_arm_clear_arm_mpu_config+0xc>
    32a2:	bf00      	nop
    32a4:	e000ed90 	.word	0xe000ed90

000032a8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    32a8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    32aa:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    32ac:	2400      	movs	r4, #0
    32ae:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    32b2:	f7ff ffe9 	bl	3288 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    32b6:	4a0e      	ldr	r2, [pc, #56]	; (32f0 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    32b8:	4623      	mov	r3, r4
    32ba:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    32bc:	f04f 34ff 	mov.w	r4, #4294967295
    32c0:	f103 0020 	add.w	r0, r3, #32
    32c4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    32c6:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    32c8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    32cc:	d1f8      	bne.n	32c0 <z_arm_init_arch_hw_at_boot+0x18>
    32ce:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    32d0:	f04f 30ff 	mov.w	r0, #4294967295
    32d4:	f103 0260 	add.w	r2, r3, #96	; 0x60
    32d8:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    32da:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    32dc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    32e0:	d1f8      	bne.n	32d4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    32e2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    32e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32e8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    32ec:	bd10      	pop	{r4, pc}
    32ee:	bf00      	nop
    32f0:	e000e100 	.word	0xe000e100

000032f4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    32f4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    32f6:	2120      	movs	r1, #32
    32f8:	4803      	ldr	r0, [pc, #12]	; (3308 <z_arm_interrupt_init+0x14>)
    32fa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    32fc:	3301      	adds	r3, #1
    32fe:	2b45      	cmp	r3, #69	; 0x45
    3300:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3304:	d1f9      	bne.n	32fa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3306:	4770      	bx	lr
    3308:	e000e100 	.word	0xe000e100

0000330c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    330c:	4b06      	ldr	r3, [pc, #24]	; (3328 <z_impl_k_thread_abort+0x1c>)
    330e:	689b      	ldr	r3, [r3, #8]
    3310:	4283      	cmp	r3, r0
    3312:	d107      	bne.n	3324 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3314:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3318:	b123      	cbz	r3, 3324 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    331a:	4a04      	ldr	r2, [pc, #16]	; (332c <z_impl_k_thread_abort+0x20>)
    331c:	6853      	ldr	r3, [r2, #4]
    331e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3322:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3324:	f003 b95e 	b.w	65e4 <z_thread_abort>
    3328:	20000aa4 	.word	0x20000aa4
    332c:	e000ed00 	.word	0xe000ed00

00003330 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3332:	4c09      	ldr	r4, [pc, #36]	; (3358 <z_arm_configure_static_mpu_regions+0x28>)
    3334:	4a09      	ldr	r2, [pc, #36]	; (335c <z_arm_configure_static_mpu_regions+0x2c>)
    3336:	4623      	mov	r3, r4
    3338:	2101      	movs	r1, #1
    333a:	4809      	ldr	r0, [pc, #36]	; (3360 <z_arm_configure_static_mpu_regions+0x30>)
    333c:	f000 f912 	bl	3564 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    3340:	2300      	movs	r3, #0
    3342:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    3344:	4b07      	ldr	r3, [pc, #28]	; (3364 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3346:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    3348:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    334a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    334c:	9301      	str	r3, [sp, #4]
    334e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3350:	f000 f92e 	bl	35b0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3354:	b004      	add	sp, #16
    3356:	bd10      	pop	{r4, pc}
    3358:	20070000 	.word	0x20070000
    335c:	20000000 	.word	0x20000000
    3360:	00008278 	.word	0x00008278
    3364:	20000188 	.word	0x20000188

00003368 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    3368:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    336a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    336c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    336e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    3372:	f004 031f 	and.w	r3, r4, #31
    3376:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3378:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    337a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    337c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    3380:	4904      	ldr	r1, [pc, #16]	; (3394 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    3382:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    3386:	f043 0301 	orr.w	r3, r3, #1
    338a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    338c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    338e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    3390:	bd10      	pop	{r4, pc}
    3392:	bf00      	nop
    3394:	e000ed90 	.word	0xe000ed90

00003398 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    3398:	2807      	cmp	r0, #7
{
    339a:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
    339c:	d90d      	bls.n	33ba <region_allocate_and_init+0x22>
    339e:	4b08      	ldr	r3, [pc, #32]	; (33c0 <region_allocate_and_init+0x28>)
    33a0:	4a08      	ldr	r2, [pc, #32]	; (33c4 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    33a2:	4601      	mov	r1, r0
    33a4:	1ad2      	subs	r2, r2, r3
    33a6:	08d2      	lsrs	r2, r2, #3
    33a8:	0192      	lsls	r2, r2, #6
    33aa:	4807      	ldr	r0, [pc, #28]	; (33c8 <region_allocate_and_init+0x30>)
    33ac:	f042 0201 	orr.w	r2, r2, #1
    33b0:	f004 f833 	bl	741a <log_1>
		return -EINVAL;
    33b4:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    33b8:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    33ba:	f7ff ffd5 	bl	3368 <region_init>
	return index;
    33be:	e7fb      	b.n	33b8 <region_allocate_and_init+0x20>
    33c0:	00008124 	.word	0x00008124
    33c4:	00008134 	.word	0x00008134
    33c8:	000090c1 	.word	0x000090c1

000033cc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    33cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33d0:	4689      	mov	r9, r1
    33d2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    33d4:	4606      	mov	r6, r0
    33d6:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    33da:	4d54      	ldr	r5, [pc, #336]	; (352c <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    33dc:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    33de:	45c8      	cmp	r8, r9
    33e0:	da33      	bge.n	344a <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
    33e2:	f8d6 a004 	ldr.w	sl, [r6, #4]
    33e6:	f1ba 0f00 	cmp.w	sl, #0
    33ea:	d04d      	beq.n	3488 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
    33ec:	f1ba 0f1f 	cmp.w	sl, #31
    33f0:	d91e      	bls.n	3430 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
    33f2:	f01a 0f1f 	tst.w	sl, #31
    33f6:	d11b      	bne.n	3430 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
    33f8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    33fc:	f01b 0f1f 	tst.w	fp, #31
    3400:	d116      	bne.n	3430 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3402:	4658      	mov	r0, fp
    3404:	f004 fae5 	bl	79d2 <arm_cmse_mpu_region_get>
    3408:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    340a:	eb0a 000b 	add.w	r0, sl, fp
    340e:	3801      	subs	r0, #1
    3410:	f004 fadf 	bl	79d2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    3414:	4287      	cmp	r7, r0
    3416:	d01c      	beq.n	3452 <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
    3418:	f06f 0715 	mvn.w	r7, #21
    341c:	4a44      	ldr	r2, [pc, #272]	; (3530 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    341e:	4b45      	ldr	r3, [pc, #276]	; (3534 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    3420:	4639      	mov	r1, r7
    3422:	1ad2      	subs	r2, r2, r3
    3424:	08d2      	lsrs	r2, r2, #3
    3426:	0192      	lsls	r2, r2, #6
    3428:	4843      	ldr	r0, [pc, #268]	; (3538 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    342a:	f042 0201 	orr.w	r2, r2, #1
    342e:	e008      	b.n	3442 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3430:	4641      	mov	r1, r8
    3432:	4a3f      	ldr	r2, [pc, #252]	; (3530 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    3434:	4b3f      	ldr	r3, [pc, #252]	; (3534 <mpu_configure_regions_and_partition.constprop.0+0x168>)
    3436:	4841      	ldr	r0, [pc, #260]	; (353c <mpu_configure_regions_and_partition.constprop.0+0x170>)
    3438:	1ad2      	subs	r2, r2, r3
    343a:	08d2      	lsrs	r2, r2, #3
    343c:	0192      	lsls	r2, r2, #6
    343e:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
    3442:	f003 ffea 	bl	741a <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    3446:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    344a:	4620      	mov	r0, r4
    344c:	b005      	add	sp, #20
    344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    3452:	f117 0f16 	cmn.w	r7, #22
    3456:	d0e1      	beq.n	341c <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    3458:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    345a:	42bb      	cmp	r3, r7
    345c:	dbde      	blt.n	341c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    345e:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3460:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    3462:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3464:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3466:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    346a:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    346e:	e9d6 3200 	ldrd	r3, r2, [r6]
    3472:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    3474:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3476:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    347a:	d11a      	bne.n	34b2 <mpu_configure_regions_and_partition.constprop.0+0xe6>
    347c:	45d3      	cmp	fp, sl
    347e:	d107      	bne.n	3490 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
    3480:	4631      	mov	r1, r6
    3482:	b2f8      	uxtb	r0, r7
    3484:	f004 faae 	bl	79e4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    3488:	f108 0801 	add.w	r8, r8, #1
    348c:	360c      	adds	r6, #12
    348e:	e7a6      	b.n	33de <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    3490:	4631      	mov	r1, r6
	MPU->RNR = index;
    3492:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3494:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    3496:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    349a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    349e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    34a0:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    34a2:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    34a4:	f004 fa9e 	bl	79e4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    34a8:	f110 0f16 	cmn.w	r0, #22
    34ac:	d0cb      	beq.n	3446 <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
    34ae:	1c44      	adds	r4, r0, #1
    34b0:	e7ea      	b.n	3488 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
    34b2:	3b01      	subs	r3, #1
    34b4:	45d3      	cmp	fp, sl
    34b6:	b2e0      	uxtb	r0, r4
    34b8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    34bc:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
    34be:	d106      	bne.n	34ce <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    34c0:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    34c2:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    34c4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    34c8:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    34ca:	612b      	str	r3, [r5, #16]
			reg_index =
    34cc:	e7ea      	b.n	34a4 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    34ce:	6929      	ldr	r1, [r5, #16]
    34d0:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    34d4:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    34d6:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    34d8:	4631      	mov	r1, r6
    34da:	f004 fa83 	bl	79e4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    34de:	f110 0f16 	cmn.w	r0, #22
    34e2:	d0b0      	beq.n	3446 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
    34e4:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
    34e6:	68ea      	ldr	r2, [r5, #12]
    34e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    34ec:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    34f0:	f362 0304 	bfi	r3, r2, #0, #5
    34f4:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    34f8:	692b      	ldr	r3, [r5, #16]
    34fa:	f89d 2008 	ldrb.w	r2, [sp, #8]
    34fe:	085b      	lsrs	r3, r3, #1
    3500:	f363 1247 	bfi	r2, r3, #5, #3
    3504:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    3508:	e9d6 3200 	ldrd	r3, r2, [r6]
    350c:	4413      	add	r3, r2
    350e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    3510:	f023 031f 	bic.w	r3, r3, #31
    3514:	445b      	add	r3, fp
    3516:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
    351a:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    351c:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    3520:	4669      	mov	r1, sp
    3522:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    3524:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
    3526:	f7ff ff37 	bl	3398 <region_allocate_and_init>
    352a:	e7bd      	b.n	34a8 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    352c:	e000ed90 	.word	0xe000ed90
    3530:	00008134 	.word	0x00008134
    3534:	00008124 	.word	0x00008124
    3538:	0000910a 	.word	0x0000910a
    353c:	000090e7 	.word	0x000090e7

00003540 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3540:	2205      	movs	r2, #5
    3542:	4b03      	ldr	r3, [pc, #12]	; (3550 <arm_core_mpu_enable+0x10>)
    3544:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3546:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    354a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    354e:	4770      	bx	lr
    3550:	e000ed90 	.word	0xe000ed90

00003554 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3554:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3558:	2200      	movs	r2, #0
    355a:	4b01      	ldr	r3, [pc, #4]	; (3560 <arm_core_mpu_disable+0xc>)
    355c:	605a      	str	r2, [r3, #4]
}
    355e:	4770      	bx	lr
    3560:	e000ed90 	.word	0xe000ed90

00003564 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3564:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3566:	4d0d      	ldr	r5, [pc, #52]	; (359c <arm_core_mpu_configure_static_mpu_regions+0x38>)
    3568:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    356a:	782a      	ldrb	r2, [r5, #0]
    356c:	f7ff ff2e 	bl	33cc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3570:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3572:	3016      	adds	r0, #22
    3574:	d111      	bne.n	359a <arm_core_mpu_configure_static_mpu_regions+0x36>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3576:	f240 1305 	movw	r3, #261	; 0x105
    357a:	4a09      	ldr	r2, [pc, #36]	; (35a0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    357c:	4909      	ldr	r1, [pc, #36]	; (35a4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    357e:	480a      	ldr	r0, [pc, #40]	; (35a8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    3580:	f003 fe2a 	bl	71d8 <printk>
    3584:	4621      	mov	r1, r4
    3586:	4809      	ldr	r0, [pc, #36]	; (35ac <arm_core_mpu_configure_static_mpu_regions+0x48>)
    3588:	f003 fe26 	bl	71d8 <printk>
			regions_num);
	}
}
    358c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3590:	f240 1105 	movw	r1, #261	; 0x105
    3594:	4802      	ldr	r0, [pc, #8]	; (35a0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    3596:	f003 bef8 	b.w	738a <assert_post_action>
}
    359a:	bd38      	pop	{r3, r4, r5, pc}
    359c:	20000b0f 	.word	0x20000b0f
    35a0:	0000912d 	.word	0x0000912d
    35a4:	0000853e 	.word	0x0000853e
    35a8:	00008496 	.word	0x00008496
    35ac:	00009164 	.word	0x00009164

000035b0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    35b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35b4:	4e2f      	ldr	r6, [pc, #188]	; (3674 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    35b6:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    35b8:	4605      	mov	r5, r0
    35ba:	f04f 0800 	mov.w	r8, #0
    35be:	46b3      	mov	fp, r6
	MPU->RNR = index;
    35c0:	4f2d      	ldr	r7, [pc, #180]	; (3678 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    35c2:	45c8      	cmp	r8, r9
    35c4:	db02      	blt.n	35cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    35c6:	b003      	add	sp, #12
    35c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    35cc:	f8d5 a004 	ldr.w	sl, [r5, #4]
    35d0:	f1ba 0f00 	cmp.w	sl, #0
    35d4:	d049      	beq.n	366a <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    35d6:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    35d8:	4608      	mov	r0, r1
    35da:	9101      	str	r1, [sp, #4]
    35dc:	f004 f9f9 	bl	79d2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    35e0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    35e2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    35e4:	eb0a 0001 	add.w	r0, sl, r1
    35e8:	3801      	subs	r0, #1
    35ea:	f004 f9f2 	bl	79d2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    35ee:	4284      	cmp	r4, r0
    35f0:	f04f 0214 	mov.w	r2, #20
    35f4:	4b21      	ldr	r3, [pc, #132]	; (367c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    35f6:	d018      	beq.n	362a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
    35f8:	f06f 0315 	mvn.w	r3, #21
    35fc:	fb02 f808 	mul.w	r8, r2, r8
    3600:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    3604:	f240 1315 	movw	r3, #277	; 0x115
    3608:	4a1d      	ldr	r2, [pc, #116]	; (3680 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    360a:	491e      	ldr	r1, [pc, #120]	; (3684 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    360c:	481e      	ldr	r0, [pc, #120]	; (3688 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    360e:	f003 fde3 	bl	71d8 <printk>
    3612:	4649      	mov	r1, r9
    3614:	481d      	ldr	r0, [pc, #116]	; (368c <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
    3616:	f003 fddf 	bl	71d8 <printk>
    361a:	f240 1115 	movw	r1, #277	; 0x115
    361e:	4818      	ldr	r0, [pc, #96]	; (3680 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
    3620:	b003      	add	sp, #12
    3622:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    3626:	f003 beb0 	b.w	738a <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    362a:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    362e:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    3630:	d0e8      	beq.n	3604 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    3632:	7819      	ldrb	r1, [r3, #0]
    3634:	42a1      	cmp	r1, r4
    3636:	dde5      	ble.n	3604 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    3638:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    363c:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    363e:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    3640:	68fc      	ldr	r4, [r7, #12]
    3642:	f100 0108 	add.w	r1, r0, #8
    3646:	7b00      	ldrb	r0, [r0, #12]
    3648:	f364 0004 	bfi	r0, r4, #0, #5
    364c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    364e:	6938      	ldr	r0, [r7, #16]
    3650:	790c      	ldrb	r4, [r1, #4]
    3652:	0840      	lsrs	r0, r0, #1
    3654:	f360 1447 	bfi	r4, r0, #5, #3
    3658:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    365a:	68f9      	ldr	r1, [r7, #12]
    365c:	f021 011f 	bic.w	r1, r1, #31
    3660:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    3662:	6939      	ldr	r1, [r7, #16]
    3664:	f021 011f 	bic.w	r1, r1, #31
    3668:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    366a:	f108 0801 	add.w	r8, r8, #1
    366e:	3614      	adds	r6, #20
    3670:	350c      	adds	r5, #12
    3672:	e7a6      	b.n	35c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    3674:	200009e0 	.word	0x200009e0
    3678:	e000ed90 	.word	0xe000ed90
    367c:	20000b0f 	.word	0x20000b0f
    3680:	0000912d 	.word	0x0000912d
    3684:	0000853e 	.word	0x0000853e
    3688:	00008496 	.word	0x00008496
    368c:	00009190 	.word	0x00009190

00003690 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3690:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3692:	4e20      	ldr	r6, [pc, #128]	; (3714 <z_arm_mpu_init+0x84>)
    3694:	6835      	ldr	r5, [r6, #0]
    3696:	2d08      	cmp	r5, #8
    3698:	d913      	bls.n	36c2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    369a:	f44f 739e 	mov.w	r3, #316	; 0x13c
    369e:	4a1e      	ldr	r2, [pc, #120]	; (3718 <z_arm_mpu_init+0x88>)
    36a0:	491e      	ldr	r1, [pc, #120]	; (371c <z_arm_mpu_init+0x8c>)
    36a2:	481f      	ldr	r0, [pc, #124]	; (3720 <z_arm_mpu_init+0x90>)
    36a4:	f003 fd98 	bl	71d8 <printk>
    36a8:	2208      	movs	r2, #8
    36aa:	4629      	mov	r1, r5
    36ac:	481d      	ldr	r0, [pc, #116]	; (3724 <z_arm_mpu_init+0x94>)
    36ae:	f003 fd93 	bl	71d8 <printk>
    36b2:	4819      	ldr	r0, [pc, #100]	; (3718 <z_arm_mpu_init+0x88>)
    36b4:	f44f 719e 	mov.w	r1, #316	; 0x13c
    36b8:	f003 fe67 	bl	738a <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    36bc:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    36c0:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    36c2:	f7ff ff47 	bl	3554 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    36c6:	2000      	movs	r0, #0
	MPU->MAIR0 =
    36c8:	4c17      	ldr	r4, [pc, #92]	; (3728 <z_arm_mpu_init+0x98>)
    36ca:	4a18      	ldr	r2, [pc, #96]	; (372c <z_arm_mpu_init+0x9c>)
    36cc:	6322      	str	r2, [r4, #48]	; 0x30
    36ce:	4285      	cmp	r5, r0
    36d0:	d119      	bne.n	3706 <z_arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    36d2:	4b17      	ldr	r3, [pc, #92]	; (3730 <z_arm_mpu_init+0xa0>)
    36d4:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
    36d6:	f7ff ff33 	bl	3540 <arm_core_mpu_enable>
	__ASSERT(
    36da:	6823      	ldr	r3, [r4, #0]
    36dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    36e0:	2b08      	cmp	r3, #8
    36e2:	d00e      	beq.n	3702 <z_arm_mpu_init+0x72>
    36e4:	4913      	ldr	r1, [pc, #76]	; (3734 <z_arm_mpu_init+0xa4>)
    36e6:	f44f 73cf 	mov.w	r3, #414	; 0x19e
    36ea:	4a0b      	ldr	r2, [pc, #44]	; (3718 <z_arm_mpu_init+0x88>)
    36ec:	480c      	ldr	r0, [pc, #48]	; (3720 <z_arm_mpu_init+0x90>)
    36ee:	f003 fd73 	bl	71d8 <printk>
    36f2:	4811      	ldr	r0, [pc, #68]	; (3738 <z_arm_mpu_init+0xa8>)
    36f4:	f003 fd70 	bl	71d8 <printk>
    36f8:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    36fc:	4806      	ldr	r0, [pc, #24]	; (3718 <z_arm_mpu_init+0x88>)
    36fe:	f003 fe44 	bl	738a <assert_post_action>
	return 0;
    3702:	2000      	movs	r0, #0
    3704:	e7dc      	b.n	36c0 <z_arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3706:	6871      	ldr	r1, [r6, #4]
    3708:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    370c:	f7ff fe2c 	bl	3368 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3710:	3001      	adds	r0, #1
    3712:	e7dc      	b.n	36ce <z_arm_mpu_init+0x3e>
    3714:	00008284 	.word	0x00008284
    3718:	0000912d 	.word	0x0000912d
    371c:	0000853e 	.word	0x0000853e
    3720:	00008496 	.word	0x00008496
    3724:	000091bf 	.word	0x000091bf
    3728:	e000ed90 	.word	0xe000ed90
    372c:	0044ffaa 	.word	0x0044ffaa
    3730:	20000b0f 	.word	0x20000b0f
    3734:	000091f3 	.word	0x000091f3
    3738:	00009243 	.word	0x00009243

0000373c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    373c:	4b01      	ldr	r3, [pc, #4]	; (3744 <__stdout_hook_install+0x8>)
    373e:	6018      	str	r0, [r3, #0]
}
    3740:	4770      	bx	lr
    3742:	bf00      	nop
    3744:	2000002c 	.word	0x2000002c

00003748 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    3748:	b570      	push	{r4, r5, r6, lr}
    374a:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    374c:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    374e:	6905      	ldr	r5, [r0, #16]
    3750:	b961      	cbnz	r1, 376c <gpio_nrfx_manage_callback+0x24>
    3752:	4922      	ldr	r1, [pc, #136]	; (37dc <gpio_nrfx_manage_callback+0x94>)
    3754:	2324      	movs	r3, #36	; 0x24
    3756:	4a22      	ldr	r2, [pc, #136]	; (37e0 <gpio_nrfx_manage_callback+0x98>)
    3758:	4822      	ldr	r0, [pc, #136]	; (37e4 <gpio_nrfx_manage_callback+0x9c>)
    375a:	f003 fd3d 	bl	71d8 <printk>
    375e:	4822      	ldr	r0, [pc, #136]	; (37e8 <gpio_nrfx_manage_callback+0xa0>)
    3760:	f003 fd3a 	bl	71d8 <printk>
    3764:	2124      	movs	r1, #36	; 0x24
    3766:	481e      	ldr	r0, [pc, #120]	; (37e0 <gpio_nrfx_manage_callback+0x98>)
    3768:	f003 fe0f 	bl	738a <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    376c:	6863      	ldr	r3, [r4, #4]
    376e:	b963      	cbnz	r3, 378a <gpio_nrfx_manage_callback+0x42>
    3770:	491e      	ldr	r1, [pc, #120]	; (37ec <gpio_nrfx_manage_callback+0xa4>)
    3772:	2325      	movs	r3, #37	; 0x25
    3774:	4a1a      	ldr	r2, [pc, #104]	; (37e0 <gpio_nrfx_manage_callback+0x98>)
    3776:	481b      	ldr	r0, [pc, #108]	; (37e4 <gpio_nrfx_manage_callback+0x9c>)
    3778:	f003 fd2e 	bl	71d8 <printk>
    377c:	481c      	ldr	r0, [pc, #112]	; (37f0 <gpio_nrfx_manage_callback+0xa8>)
    377e:	f003 fd2b 	bl	71d8 <printk>
    3782:	2125      	movs	r1, #37	; 0x25
    3784:	4816      	ldr	r0, [pc, #88]	; (37e0 <gpio_nrfx_manage_callback+0x98>)
    3786:	f003 fe00 	bl	738a <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    378a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    378c:	b15b      	cbz	r3, 37a6 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    378e:	2200      	movs	r2, #0
    3790:	429c      	cmp	r4, r3
    3792:	d113      	bne.n	37bc <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    3794:	6823      	ldr	r3, [r4, #0]
    3796:	b95a      	cbnz	r2, 37b0 <gpio_nrfx_manage_callback+0x68>
    3798:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    379a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    379c:	4294      	cmp	r4, r2
    379e:	d100      	bne.n	37a2 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    37a0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    37a2:	2300      	movs	r3, #0
    37a4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    37a6:	b976      	cbnz	r6, 37c6 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    37a8:	2000      	movs	r0, #0
				     callback, set);
}
    37aa:	bd70      	pop	{r4, r5, r6, pc}
    37ac:	460b      	mov	r3, r1
    37ae:	e7ef      	b.n	3790 <gpio_nrfx_manage_callback+0x48>
    37b0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    37b2:	68ab      	ldr	r3, [r5, #8]
    37b4:	429c      	cmp	r4, r3
	list->tail = node;
    37b6:	bf08      	it	eq
    37b8:	60aa      	streq	r2, [r5, #8]
}
    37ba:	e7f2      	b.n	37a2 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    37bc:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    37be:	461a      	mov	r2, r3
    37c0:	2900      	cmp	r1, #0
    37c2:	d1f3      	bne.n	37ac <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    37c4:	b13e      	cbz	r6, 37d6 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    37c6:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    37c8:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    37ca:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    37cc:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    37ce:	2800      	cmp	r0, #0
    37d0:	d1ea      	bne.n	37a8 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    37d2:	60ac      	str	r4, [r5, #8]
}
    37d4:	e7e9      	b.n	37aa <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    37d6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    37da:	e7e6      	b.n	37aa <gpio_nrfx_manage_callback+0x62>
    37dc:	000092a0 	.word	0x000092a0
    37e0:	00009273 	.word	0x00009273
    37e4:	00008496 	.word	0x00008496
    37e8:	000092a9 	.word	0x000092a9
    37ec:	000092b8 	.word	0x000092b8
    37f0:	000092ca 	.word	0x000092ca

000037f4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    37f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    37f8:	6804      	ldr	r4, [r0, #0]
{
    37fa:	460f      	mov	r7, r1
    37fc:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    37fe:	b34c      	cbz	r4, 3854 <gpio_fire_callbacks+0x60>
	return node->next;
    3800:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    3802:	f8df 8058 	ldr.w	r8, [pc, #88]	; 385c <gpio_fire_callbacks+0x68>
    3806:	2d00      	cmp	r5, #0
    3808:	bf38      	it	cc
    380a:	2500      	movcc	r5, #0
    380c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3860 <gpio_fire_callbacks+0x6c>
    3810:	f8df a050 	ldr.w	sl, [pc, #80]	; 3864 <gpio_fire_callbacks+0x70>
		if (cb->pin_mask & pins) {
    3814:	68a3      	ldr	r3, [r4, #8]
    3816:	421e      	tst	r6, r3
    3818:	d014      	beq.n	3844 <gpio_fire_callbacks+0x50>
			__ASSERT(cb->handler, "No callback handler!");
    381a:	6863      	ldr	r3, [r4, #4]
    381c:	b963      	cbnz	r3, 3838 <gpio_fire_callbacks+0x44>
    381e:	4649      	mov	r1, r9
    3820:	2345      	movs	r3, #69	; 0x45
    3822:	4642      	mov	r2, r8
    3824:	4650      	mov	r0, sl
    3826:	f003 fcd7 	bl	71d8 <printk>
    382a:	480b      	ldr	r0, [pc, #44]	; (3858 <gpio_fire_callbacks+0x64>)
    382c:	f003 fcd4 	bl	71d8 <printk>
    3830:	2145      	movs	r1, #69	; 0x45
    3832:	4640      	mov	r0, r8
    3834:	f003 fda9 	bl	738a <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    3838:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    383c:	4621      	mov	r1, r4
    383e:	4638      	mov	r0, r7
    3840:	4032      	ands	r2, r6
    3842:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3844:	b135      	cbz	r5, 3854 <gpio_fire_callbacks+0x60>
    3846:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3848:	462c      	mov	r4, r5
    384a:	2b00      	cmp	r3, #0
    384c:	bf38      	it	cc
    384e:	2300      	movcc	r3, #0
    3850:	461d      	mov	r5, r3
    3852:	e7df      	b.n	3814 <gpio_fire_callbacks+0x20>
		}
	}
}
    3854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3858:	000092ca 	.word	0x000092ca
    385c:	00009273 	.word	0x00009273
    3860:	000092e1 	.word	0x000092e1
    3864:	00008496 	.word	0x00008496

00003868 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3868:	6802      	ldr	r2, [r0, #0]
{
    386a:	b510      	push	{r4, lr}
    switch (port)
    386c:	0953      	lsrs	r3, r2, #5
{
    386e:	4604      	mov	r4, r0
    switch (port)
    3870:	d02b      	beq.n	38ca <nrf_gpio_pin_port_decode+0x62>
    3872:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3874:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3878:	bf18      	it	ne
    387a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    387c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3880:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3882:	07db      	lsls	r3, r3, #31
    3884:	d40b      	bmi.n	389e <nrf_gpio_pin_port_decode+0x36>
    3886:	4913      	ldr	r1, [pc, #76]	; (38d4 <nrf_gpio_pin_port_decode+0x6c>)
    3888:	4813      	ldr	r0, [pc, #76]	; (38d8 <nrf_gpio_pin_port_decode+0x70>)
    388a:	f44f 7305 	mov.w	r3, #532	; 0x214
    388e:	4a13      	ldr	r2, [pc, #76]	; (38dc <nrf_gpio_pin_port_decode+0x74>)
    3890:	f003 fca2 	bl	71d8 <printk>
    3894:	f44f 7105 	mov.w	r1, #532	; 0x214
    3898:	4810      	ldr	r0, [pc, #64]	; (38dc <nrf_gpio_pin_port_decode+0x74>)
    389a:	f003 fd76 	bl	738a <assert_post_action>
    uint32_t pin_number = *p_pin;
    389e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    38a0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    38a4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    38a6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    38a8:	d00d      	beq.n	38c6 <nrf_gpio_pin_port_decode+0x5e>
    38aa:	2b01      	cmp	r3, #1
    38ac:	d010      	beq.n	38d0 <nrf_gpio_pin_port_decode+0x68>
            NRFX_ASSERT(0);
    38ae:	490c      	ldr	r1, [pc, #48]	; (38e0 <nrf_gpio_pin_port_decode+0x78>)
    38b0:	4809      	ldr	r0, [pc, #36]	; (38d8 <nrf_gpio_pin_port_decode+0x70>)
    38b2:	f240 2319 	movw	r3, #537	; 0x219
    38b6:	4a09      	ldr	r2, [pc, #36]	; (38dc <nrf_gpio_pin_port_decode+0x74>)
    38b8:	f003 fc8e 	bl	71d8 <printk>
    38bc:	f240 2119 	movw	r1, #537	; 0x219
    38c0:	4806      	ldr	r0, [pc, #24]	; (38dc <nrf_gpio_pin_port_decode+0x74>)
    38c2:	f003 fd62 	bl	738a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    38c6:	4807      	ldr	r0, [pc, #28]	; (38e4 <nrf_gpio_pin_port_decode+0x7c>)
}
    38c8:	bd10      	pop	{r4, pc}
    switch (port)
    38ca:	f04f 33ff 	mov.w	r3, #4294967295
    38ce:	e7d5      	b.n	387c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    38d0:	4805      	ldr	r0, [pc, #20]	; (38e8 <nrf_gpio_pin_port_decode+0x80>)
    38d2:	e7f9      	b.n	38c8 <nrf_gpio_pin_port_decode+0x60>
    38d4:	0000860e 	.word	0x0000860e
    38d8:	00008496 	.word	0x00008496
    38dc:	000085db 	.word	0x000085db
    38e0:	0000853e 	.word	0x0000853e
    38e4:	50842500 	.word	0x50842500
    38e8:	50842800 	.word	0x50842800

000038ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    38ec:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    38ee:	4b09      	ldr	r3, [pc, #36]	; (3914 <gpio_nrfx_init+0x28>)
    38f0:	781a      	ldrb	r2, [r3, #0]
    38f2:	b96a      	cbnz	r2, 3910 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    38f4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    38f6:	200d      	movs	r0, #13
		gpio_initialized = true;
    38f8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    38fa:	2105      	movs	r1, #5
    38fc:	f7ff f936 	bl	2b6c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    3900:	200d      	movs	r0, #13
    3902:	f7ff f915 	bl	2b30 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    3906:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    390a:	4b03      	ldr	r3, [pc, #12]	; (3918 <gpio_nrfx_init+0x2c>)
    390c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    3910:	2000      	movs	r0, #0
    3912:	bd08      	pop	{r3, pc}
    3914:	20000b10 	.word	0x20000b10
    3918:	5000d000 	.word	0x5000d000

0000391c <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    391c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    3920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3924:	4607      	mov	r7, r0
    3926:	460e      	mov	r6, r1
    3928:	4690      	mov	r8, r2
    392a:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
    392c:	6904      	ldr	r4, [r0, #16]
	return port->config;
    392e:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    3932:	f040 80aa 	bne.w	3a8a <gpio_nrfx_pin_interrupt_configure+0x16e>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3936:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3938:	a801      	add	r0, sp, #4
    393a:	7a1b      	ldrb	r3, [r3, #8]
    393c:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
    3940:	9301      	str	r3, [sp, #4]
    3942:	f7ff ff91 	bl	3868 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3946:	9b01      	ldr	r3, [sp, #4]
    3948:	3380      	adds	r3, #128	; 0x80
    394a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    394e:	07d8      	lsls	r0, r3, #31
    3950:	f100 80bb 	bmi.w	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3954:	2101      	movs	r1, #1
    3956:	68e3      	ldr	r3, [r4, #12]
    3958:	40b1      	lsls	r1, r6
    395a:	4319      	orrs	r1, r3
    395c:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    395e:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3960:	2000      	movs	r0, #0
    3962:	6963      	ldr	r3, [r4, #20]
    3964:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3966:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
    396a:	bf0c      	ite	eq
    396c:	430b      	orreq	r3, r1
    396e:	438b      	bicne	r3, r1
    3970:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3972:	69a3      	ldr	r3, [r4, #24]
    3974:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
    3978:	bf0c      	ite	eq
    397a:	430b      	orreq	r3, r1
    397c:	438b      	bicne	r3, r1
    397e:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3980:	6923      	ldr	r3, [r4, #16]
    3982:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
    3986:	bf0c      	ite	eq
    3988:	4319      	orreq	r1, r3
    398a:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    398e:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3990:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3992:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    3994:	4a4e      	ldr	r2, [pc, #312]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3996:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
    399a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    399e:	f8d7 8010 	ldr.w	r8, [r7, #16]
    39a2:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    39a4:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    39a8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    39ac:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    39b0:	428d      	cmp	r5, r1
    39b2:	d175      	bne.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
		    && (intenset & BIT(i))) {
    39b4:	fa23 f100 	lsr.w	r1, r3, r0
    39b8:	07c9      	lsls	r1, r1, #31
    39ba:	d571      	bpl.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    39bc:	0083      	lsls	r3, r0, #2
    39be:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    39c2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    39c6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    39ca:	f021 0101 	bic.w	r1, r1, #1
    39ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    39d2:	2301      	movs	r3, #1
    39d4:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    39d6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    39da:	b2c0      	uxtb	r0, r0
    39dc:	f000 fe58 	bl	4690 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    39e0:	4628      	mov	r0, r5
    39e2:	2100      	movs	r1, #0
    39e4:	f004 f8b7 	bl	7b56 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    39e8:	f8d8 000c 	ldr.w	r0, [r8, #12]
    39ec:	40f0      	lsrs	r0, r6
    39ee:	f010 0001 	ands.w	r0, r0, #1
    39f2:	d047      	beq.n	3a84 <gpio_nrfx_pin_interrupt_configure+0x168>
		if (data->trig_edge & BIT(pin)) {
    39f4:	f8d8 0014 	ldr.w	r0, [r8, #20]
    39f8:	40f0      	lsrs	r0, r6
    39fa:	f010 0401 	ands.w	r4, r0, #1
    39fe:	d057      	beq.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
				if (data->double_edge & BIT(pin)) {
    3a00:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    3a04:	a801      	add	r0, sp, #4
				if (data->double_edge & BIT(pin)) {
    3a06:	40f3      	lsrs	r3, r6
    3a08:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3a0a:	bf57      	itett	pl
    3a0c:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3a10:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3a12:	fa21 f606 	lsrpl.w	r6, r1, r6
    3a16:	f006 0601 	andpl.w	r6, r6, #1
    3a1a:	bf5c      	itt	pl
    3a1c:	f1c6 0602 	rsbpl	r6, r6, #2
    3a20:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    3a22:	f000 fe57 	bl	46d4 <nrfx_gpiote_channel_alloc>
    3a26:	4b2b      	ldr	r3, [pc, #172]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a28:	4298      	cmp	r0, r3
    3a2a:	d13e      	bne.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a2c:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    3a2e:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a32:	022d      	lsls	r5, r5, #8
    3a34:	008b      	lsls	r3, r1, #2
    3a36:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3a3a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3a3e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a42:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3a46:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    3a4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    3a4e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a52:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3a56:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    3a58:	008a      	lsls	r2, r1, #2
    3a5a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    3a5e:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a62:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    3a66:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a6a:	6010      	str	r0, [r2, #0]
    3a6c:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3a6e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3a72:	f042 0201 	orr.w	r2, r2, #1
    3a76:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    3a7a:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    3a7c:	4a14      	ldr	r2, [pc, #80]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3a7e:	408b      	lsls	r3, r1
    3a80:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3a84:	b003      	add	sp, #12
    3a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3a8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3a8e:	f47f af61 	bne.w	3954 <gpio_nrfx_pin_interrupt_configure+0x38>
    3a92:	2101      	movs	r1, #1
    3a94:	fa01 f306 	lsl.w	r3, r1, r6
    3a98:	68e1      	ldr	r1, [r4, #12]
    3a9a:	ea21 0103 	bic.w	r1, r1, r3
    3a9e:	e75d      	b.n	395c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3aa0:	3001      	adds	r0, #1
    3aa2:	2808      	cmp	r0, #8
    3aa4:	f47f af7e 	bne.w	39a4 <gpio_nrfx_pin_interrupt_configure+0x88>
    3aa8:	e79a      	b.n	39e0 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
    3aaa:	f06f 0012 	mvn.w	r0, #18
    3aae:	e7e9      	b.n	3a84 <gpio_nrfx_pin_interrupt_configure+0x168>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3ab0:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3ab4:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3ab6:	40f1      	lsrs	r1, r6
    3ab8:	f001 0101 	and.w	r1, r1, #1
    3abc:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3ac0:	b2c9      	uxtb	r1, r1
    3ac2:	f004 f848 	bl	7b56 <nrf_gpio_cfg_sense_set>
	int res = 0;
    3ac6:	4620      	mov	r0, r4
    3ac8:	e7dc      	b.n	3a84 <gpio_nrfx_pin_interrupt_configure+0x168>
		return -ENOTSUP;
    3aca:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3ace:	e7d9      	b.n	3a84 <gpio_nrfx_pin_interrupt_configure+0x168>
    3ad0:	5000d000 	.word	0x5000d000
    3ad4:	0bad0000 	.word	0x0bad0000

00003ad8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3ad8:	4b31      	ldr	r3, [pc, #196]	; (3ba0 <gpio_nrfx_config+0xc8>)
{
    3ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3adc:	4c31      	ldr	r4, [pc, #196]	; (3ba4 <gpio_nrfx_config+0xcc>)
    3ade:	4013      	ands	r3, r2
    3ae0:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3ae2:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3ae4:	d04a      	beq.n	3b7c <gpio_nrfx_config+0xa4>
    3ae6:	d80e      	bhi.n	3b06 <gpio_nrfx_config+0x2e>
    3ae8:	2b06      	cmp	r3, #6
    3aea:	d049      	beq.n	3b80 <gpio_nrfx_config+0xa8>
    3aec:	d806      	bhi.n	3afc <gpio_nrfx_config+0x24>
    3aee:	2b00      	cmp	r3, #0
    3af0:	d046      	beq.n	3b80 <gpio_nrfx_config+0xa8>
    3af2:	2b02      	cmp	r3, #2
    3af4:	d046      	beq.n	3b84 <gpio_nrfx_config+0xac>
    3af6:	f06f 0015 	mvn.w	r0, #21
    3afa:	e03d      	b.n	3b78 <gpio_nrfx_config+0xa0>
    3afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3b00:	d1f9      	bne.n	3af6 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    3b02:	2401      	movs	r4, #1
    3b04:	e009      	b.n	3b1a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3b06:	4c28      	ldr	r4, [pc, #160]	; (3ba8 <gpio_nrfx_config+0xd0>)
    3b08:	42a3      	cmp	r3, r4
    3b0a:	d03d      	beq.n	3b88 <gpio_nrfx_config+0xb0>
    3b0c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3b10:	d03c      	beq.n	3b8c <gpio_nrfx_config+0xb4>
    3b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3b16:	d1ee      	bne.n	3af6 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    3b18:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    3b1a:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    3b1c:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
    3b20:	bf4c      	ite	mi
    3b22:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    3b24:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    3b28:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    3b2c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    3b2e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    3b32:	d507      	bpl.n	3b44 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    3b34:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3b36:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    3b3a:	d529      	bpl.n	3b90 <gpio_nrfx_config+0xb8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    3b3c:	2301      	movs	r3, #1
    3b3e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    3b40:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    3b44:	7a03      	ldrb	r3, [r0, #8]
    3b46:	f001 011f 	and.w	r1, r1, #31
    3b4a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b4e:	a801      	add	r0, sp, #4
    3b50:	9101      	str	r1, [sp, #4]
    3b52:	f7ff fe89 	bl	3868 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3b56:	9b01      	ldr	r3, [sp, #4]
    3b58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3b5c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3b60:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    3b64:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3b68:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3b6c:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3b70:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    3b72:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	return 0;
    3b76:	2000      	movs	r0, #0
}
    3b78:	b003      	add	sp, #12
    3b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    3b7c:	2407      	movs	r4, #7
    3b7e:	e7cc      	b.n	3b1a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3b80:	461c      	mov	r4, r3
    3b82:	e7ca      	b.n	3b1a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    3b84:	2404      	movs	r4, #4
    3b86:	e7c8      	b.n	3b1a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    3b88:	2405      	movs	r4, #5
    3b8a:	e7c6      	b.n	3b1a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    3b8c:	2403      	movs	r4, #3
    3b8e:	e7c4      	b.n	3b1a <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    3b90:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    3b92:	bf42      	ittt	mi
    3b94:	2301      	movmi	r3, #1
    3b96:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    3b98:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
    3b9c:	e7d2      	b.n	3b44 <gpio_nrfx_config+0x6c>
    3b9e:	bf00      	nop
    3ba0:	00f00006 	.word	0x00f00006
    3ba4:	00100006 	.word	0x00100006
    3ba8:	00400002 	.word	0x00400002

00003bac <gpiote_event_handler>:
{
    3bac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3bae:	2400      	movs	r4, #0
{
    3bb0:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3bb2:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    3bb6:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bba:	4e26      	ldr	r6, [pc, #152]	; (3c54 <gpiote_event_handler+0xa8>)
    3bbc:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    3bbe:	b15d      	cbz	r5, 3bd8 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    3bc0:	a902      	add	r1, sp, #8
    3bc2:	4825      	ldr	r0, [pc, #148]	; (3c58 <gpiote_event_handler+0xac>)
    3bc4:	f003 ffda 	bl	7b7c <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    3bc8:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    3bca:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    3bcc:	4823      	ldr	r0, [pc, #140]	; (3c5c <gpiote_event_handler+0xb0>)
    3bce:	f003 ffd5 	bl	7b7c <check_level_trigger_pins>
		fired_triggers[1] =
    3bd2:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bd4:	6034      	str	r4, [r6, #0]
    3bd6:	6833      	ldr	r3, [r6, #0]
{
    3bd8:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    3bda:	2601      	movs	r6, #1
    3bdc:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    3bde:	4c20      	ldr	r4, [pc, #128]	; (3c60 <gpiote_event_handler+0xb4>)
    3be0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    3be4:	fa06 f102 	lsl.w	r1, r6, r2
    3be8:	4219      	tst	r1, r3
    3bea:	d01b      	beq.n	3c24 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bec:	0091      	lsls	r1, r2, #2
    3bee:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    3bf2:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    3bf6:	680b      	ldr	r3, [r1, #0]
    3bf8:	b1a3      	cbz	r3, 3c24 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3bfa:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    3bfe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    3c02:	af04      	add	r7, sp, #16
    3c04:	f3c3 3040 	ubfx	r0, r3, #13, #1
    3c08:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3c0c:	f850 7c10 	ldr.w	r7, [r0, #-16]
    3c10:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3c14:	fa06 f303 	lsl.w	r3, r6, r3
    3c18:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3c1a:	f8c1 c000 	str.w	ip, [r1]
    3c1e:	f840 3c10 	str.w	r3, [r0, #-16]
    3c22:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3c24:	3201      	adds	r2, #1
    3c26:	2a08      	cmp	r2, #8
    3c28:	d1da      	bne.n	3be0 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    3c2a:	9a00      	ldr	r2, [sp, #0]
    3c2c:	b11a      	cbz	r2, 3c36 <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    3c2e:	490a      	ldr	r1, [pc, #40]	; (3c58 <gpiote_event_handler+0xac>)
    3c30:	480c      	ldr	r0, [pc, #48]	; (3c64 <gpiote_event_handler+0xb8>)
    3c32:	f7ff fddf 	bl	37f4 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    3c36:	9a01      	ldr	r2, [sp, #4]
    3c38:	b11a      	cbz	r2, 3c42 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    3c3a:	4908      	ldr	r1, [pc, #32]	; (3c5c <gpiote_event_handler+0xb0>)
    3c3c:	480a      	ldr	r0, [pc, #40]	; (3c68 <gpiote_event_handler+0xbc>)
    3c3e:	f7ff fdd9 	bl	37f4 <gpio_fire_callbacks>
	if (port_event) {
    3c42:	b12d      	cbz	r5, 3c50 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    3c44:	4804      	ldr	r0, [pc, #16]	; (3c58 <gpiote_event_handler+0xac>)
    3c46:	f003 ffdb 	bl	7c00 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    3c4a:	4804      	ldr	r0, [pc, #16]	; (3c5c <gpiote_event_handler+0xb0>)
    3c4c:	f003 ffd8 	bl	7c00 <cfg_level_pins>
}
    3c50:	b005      	add	sp, #20
    3c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c54:	5000d17c 	.word	0x5000d17c
    3c58:	200000f8 	.word	0x200000f8
    3c5c:	20000110 	.word	0x20000110
    3c60:	5000d000 	.word	0x5000d000
    3c64:	20000a00 	.word	0x20000a00
    3c68:	20000a1c 	.word	0x20000a1c

00003c6c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3c6e:	794b      	ldrb	r3, [r1, #5]
    3c70:	2b01      	cmp	r3, #1
    3c72:	d02c      	beq.n	3cce <uarte_nrfx_configure+0x62>
    3c74:	2b03      	cmp	r3, #3
    3c76:	d127      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3c78:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3c7a:	798b      	ldrb	r3, [r1, #6]
    3c7c:	2b03      	cmp	r3, #3
    3c7e:	d123      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3c80:	79cd      	ldrb	r5, [r1, #7]
    3c82:	b12d      	cbz	r5, 3c90 <uarte_nrfx_configure+0x24>
    3c84:	2d01      	cmp	r5, #1
    3c86:	d11f      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    3c88:	6843      	ldr	r3, [r0, #4]
    3c8a:	685b      	ldr	r3, [r3, #4]
    3c8c:	079b      	lsls	r3, r3, #30
    3c8e:	d01b      	beq.n	3cc8 <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3c90:	790a      	ldrb	r2, [r1, #4]
    3c92:	2a01      	cmp	r2, #1
    3c94:	d01d      	beq.n	3cd2 <uarte_nrfx_configure+0x66>
    3c96:	2a02      	cmp	r2, #2
    3c98:	d01f      	beq.n	3cda <uarte_nrfx_configure+0x6e>
    3c9a:	b9aa      	cbnz	r2, 3cc8 <uarte_nrfx_configure+0x5c>
    3c9c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3c9e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3ca0:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    3ca2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3ca6:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    3ca8:	d06e      	beq.n	3d88 <uarte_nrfx_configure+0x11c>
    3caa:	d833      	bhi.n	3d14 <uarte_nrfx_configure+0xa8>
    3cac:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3cb0:	d06d      	beq.n	3d8e <uarte_nrfx_configure+0x122>
    3cb2:	d81c      	bhi.n	3cee <uarte_nrfx_configure+0x82>
    3cb4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3cb8:	d06b      	beq.n	3d92 <uarte_nrfx_configure+0x126>
    3cba:	d810      	bhi.n	3cde <uarte_nrfx_configure+0x72>
    3cbc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3cc0:	d06a      	beq.n	3d98 <uarte_nrfx_configure+0x12c>
    3cc2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3cc6:	d06a      	beq.n	3d9e <uarte_nrfx_configure+0x132>
    3cc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3ccc:	e05b      	b.n	3d86 <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
    3cce:	2700      	movs	r7, #0
    3cd0:	e7d3      	b.n	3c7a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    3cd2:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3cd6:	220e      	movs	r2, #14
    3cd8:	e7e1      	b.n	3c9e <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    3cda:	2400      	movs	r4, #0
    3cdc:	e7fb      	b.n	3cd6 <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
    3cde:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3ce2:	d05f      	beq.n	3da4 <uarte_nrfx_configure+0x138>
    3ce4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3ce8:	d1ee      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3cea:	4b39      	ldr	r3, [pc, #228]	; (3dd0 <uarte_nrfx_configure+0x164>)
    3cec:	e03e      	b.n	3d6c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3cee:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3cf2:	d05a      	beq.n	3daa <uarte_nrfx_configure+0x13e>
    3cf4:	d807      	bhi.n	3d06 <uarte_nrfx_configure+0x9a>
    3cf6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3cfa:	d058      	beq.n	3dae <uarte_nrfx_configure+0x142>
    3cfc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3d00:	d1e2      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3d02:	4b34      	ldr	r3, [pc, #208]	; (3dd4 <uarte_nrfx_configure+0x168>)
    3d04:	e032      	b.n	3d6c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3d06:	f647 2c12 	movw	ip, #31250	; 0x7a12
    3d0a:	4563      	cmp	r3, ip
    3d0c:	d1dc      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3d0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3d12:	e02b      	b.n	3d6c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3d14:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3d18:	d04b      	beq.n	3db2 <uarte_nrfx_configure+0x146>
    3d1a:	d813      	bhi.n	3d44 <uarte_nrfx_configure+0xd8>
    3d1c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3d20:	d04a      	beq.n	3db8 <uarte_nrfx_configure+0x14c>
    3d22:	d809      	bhi.n	3d38 <uarte_nrfx_configure+0xcc>
    3d24:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    3d28:	4563      	cmp	r3, ip
    3d2a:	d047      	beq.n	3dbc <uarte_nrfx_configure+0x150>
    3d2c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3d30:	d1ca      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3d32:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3d36:	e019      	b.n	3d6c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3d38:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3d3c:	d1c4      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3d3e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3d42:	e013      	b.n	3d6c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3d44:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3d48:	d03b      	beq.n	3dc2 <uarte_nrfx_configure+0x156>
    3d4a:	d809      	bhi.n	3d60 <uarte_nrfx_configure+0xf4>
    3d4c:	f8df c098 	ldr.w	ip, [pc, #152]	; 3de8 <uarte_nrfx_configure+0x17c>
    3d50:	4563      	cmp	r3, ip
    3d52:	d039      	beq.n	3dc8 <uarte_nrfx_configure+0x15c>
    3d54:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3d58:	d1b6      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3d5a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3d5e:	e005      	b.n	3d6c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3d60:	f8df c088 	ldr.w	ip, [pc, #136]	; 3dec <uarte_nrfx_configure+0x180>
    3d64:	4563      	cmp	r3, ip
    3d66:	d1af      	bne.n	3cc8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3d68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3d6c:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3d70:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    3d72:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    3d74:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    3d76:	4322      	orrs	r2, r4
    3d78:	3304      	adds	r3, #4
    3d7a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3d7c:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    3d80:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3d84:	2000      	movs	r0, #0
}
    3d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3d88:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3d8c:	e7ee      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3d8e:	4b12      	ldr	r3, [pc, #72]	; (3dd8 <uarte_nrfx_configure+0x16c>)
    3d90:	e7ec      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3d92:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3d96:	e7e9      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
    3d98:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3d9c:	e7e6      	b.n	3d6c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3d9e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3da2:	e7e3      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3da4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3da8:	e7e0      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3daa:	4b0c      	ldr	r3, [pc, #48]	; (3ddc <uarte_nrfx_configure+0x170>)
    3dac:	e7de      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3dae:	4b0c      	ldr	r3, [pc, #48]	; (3de0 <uarte_nrfx_configure+0x174>)
    3db0:	e7dc      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3db2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3db6:	e7d9      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3db8:	4b0a      	ldr	r3, [pc, #40]	; (3de4 <uarte_nrfx_configure+0x178>)
    3dba:	e7d7      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3dbc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3dc0:	e7d4      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3dc2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3dc6:	e7d1      	b.n	3d6c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3dc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3dcc:	e7ce      	b.n	3d6c <uarte_nrfx_configure+0x100>
    3dce:	bf00      	nop
    3dd0:	0013b000 	.word	0x0013b000
    3dd4:	004ea000 	.word	0x004ea000
    3dd8:	00275000 	.word	0x00275000
    3ddc:	0075c000 	.word	0x0075c000
    3de0:	003af000 	.word	0x003af000
    3de4:	013a9000 	.word	0x013a9000
    3de8:	0003d090 	.word	0x0003d090
    3dec:	000f4240 	.word	0x000f4240

00003df0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3df0:	6802      	ldr	r2, [r0, #0]
{
    3df2:	b510      	push	{r4, lr}
    switch (port)
    3df4:	0953      	lsrs	r3, r2, #5
{
    3df6:	4604      	mov	r4, r0
    switch (port)
    3df8:	d02b      	beq.n	3e52 <nrf_gpio_pin_port_decode+0x62>
    3dfa:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3e00:	bf18      	it	ne
    3e02:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3e04:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3e08:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3e0a:	07db      	lsls	r3, r3, #31
    3e0c:	d40b      	bmi.n	3e26 <nrf_gpio_pin_port_decode+0x36>
    3e0e:	4913      	ldr	r1, [pc, #76]	; (3e5c <nrf_gpio_pin_port_decode+0x6c>)
    3e10:	4813      	ldr	r0, [pc, #76]	; (3e60 <nrf_gpio_pin_port_decode+0x70>)
    3e12:	f44f 7305 	mov.w	r3, #532	; 0x214
    3e16:	4a13      	ldr	r2, [pc, #76]	; (3e64 <nrf_gpio_pin_port_decode+0x74>)
    3e18:	f003 f9de 	bl	71d8 <printk>
    3e1c:	f44f 7105 	mov.w	r1, #532	; 0x214
    3e20:	4810      	ldr	r0, [pc, #64]	; (3e64 <nrf_gpio_pin_port_decode+0x74>)
    3e22:	f003 fab2 	bl	738a <assert_post_action>
    uint32_t pin_number = *p_pin;
    3e26:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3e28:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3e2c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3e2e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3e30:	d00d      	beq.n	3e4e <nrf_gpio_pin_port_decode+0x5e>
    3e32:	2b01      	cmp	r3, #1
    3e34:	d010      	beq.n	3e58 <nrf_gpio_pin_port_decode+0x68>
            NRFX_ASSERT(0);
    3e36:	490c      	ldr	r1, [pc, #48]	; (3e68 <nrf_gpio_pin_port_decode+0x78>)
    3e38:	4809      	ldr	r0, [pc, #36]	; (3e60 <nrf_gpio_pin_port_decode+0x70>)
    3e3a:	f240 2319 	movw	r3, #537	; 0x219
    3e3e:	4a09      	ldr	r2, [pc, #36]	; (3e64 <nrf_gpio_pin_port_decode+0x74>)
    3e40:	f003 f9ca 	bl	71d8 <printk>
    3e44:	f240 2119 	movw	r1, #537	; 0x219
    3e48:	4806      	ldr	r0, [pc, #24]	; (3e64 <nrf_gpio_pin_port_decode+0x74>)
    3e4a:	f003 fa9e 	bl	738a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3e4e:	4807      	ldr	r0, [pc, #28]	; (3e6c <nrf_gpio_pin_port_decode+0x7c>)
}
    3e50:	bd10      	pop	{r4, pc}
    switch (port)
    3e52:	f04f 33ff 	mov.w	r3, #4294967295
    3e56:	e7d5      	b.n	3e04 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3e58:	4805      	ldr	r0, [pc, #20]	; (3e70 <nrf_gpio_pin_port_decode+0x80>)
    3e5a:	e7f9      	b.n	3e50 <nrf_gpio_pin_port_decode+0x60>
    3e5c:	0000860e 	.word	0x0000860e
    3e60:	00008496 	.word	0x00008496
    3e64:	000085db 	.word	0x000085db
    3e68:	0000853e 	.word	0x0000853e
    3e6c:	50842500 	.word	0x50842500
    3e70:	50842800 	.word	0x50842800

00003e74 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e76:	4605      	mov	r5, r0
    3e78:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3e7a:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3e7c:	f003 ffa2 	bl	7dc4 <k_is_in_isr>
    3e80:	b910      	cbnz	r0, 3e88 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3e82:	4b2c      	ldr	r3, [pc, #176]	; (3f34 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3e84:	781b      	ldrb	r3, [r3, #0]
    3e86:	b983      	cbnz	r3, 3eaa <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3e88:	f04f 0320 	mov.w	r3, #32
    3e8c:	f3ef 8411 	mrs	r4, BASEPRI
    3e90:	f383 8811 	msr	BASEPRI, r3
    3e94:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3e98:	4628      	mov	r0, r5
    3e9a:	f003 ff20 	bl	7cde <is_tx_ready>
    3e9e:	bb28      	cbnz	r0, 3eec <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3ea0:	f384 8811 	msr	BASEPRI, r4
    3ea4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3ea8:	e7ee      	b.n	3e88 <uarte_nrfx_poll_out+0x14>
{
    3eaa:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3eac:	4628      	mov	r0, r5
    3eae:	f003 ff16 	bl	7cde <is_tx_ready>
    3eb2:	b970      	cbnz	r0, 3ed2 <uarte_nrfx_poll_out+0x5e>
    3eb4:	2001      	movs	r0, #1
    3eb6:	f003 ff54 	bl	7d62 <nrfx_busy_wait>
    3eba:	3c01      	subs	r4, #1
    3ebc:	d1f6      	bne.n	3eac <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    3ebe:	2100      	movs	r1, #0
    3ec0:	2021      	movs	r0, #33	; 0x21
    3ec2:	f002 fb51 	bl	6568 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3ec6:	e7f0      	b.n	3eaa <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3ec8:	f384 8811 	msr	BASEPRI, r4
    3ecc:	f3bf 8f6f 	isb	sy
}
    3ed0:	e7f5      	b.n	3ebe <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3ed2:	f04f 0320 	mov.w	r3, #32
    3ed6:	f3ef 8411 	mrs	r4, BASEPRI
    3eda:	f383 8811 	msr	BASEPRI, r3
    3ede:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3ee2:	4628      	mov	r0, r5
    3ee4:	f003 fefb 	bl	7cde <is_tx_ready>
    3ee8:	2800      	cmp	r0, #0
    3eea:	d0ed      	beq.n	3ec8 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3eec:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3eee:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3ef2:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3ef4:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3ef6:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3efa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3efe:	2200      	movs	r2, #0
    3f00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3f04:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3f08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3f0c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3f10:	684a      	ldr	r2, [r1, #4]
    3f12:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3f14:	bf41      	itttt	mi
    3f16:	2208      	movmi	r2, #8
    3f18:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3f1c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3f20:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f24:	2201      	movs	r2, #1
    3f26:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3f28:	f384 8811 	msr	BASEPRI, r4
    3f2c:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f32:	bf00      	nop
    3f34:	20000b11 	.word	0x20000b11

00003f38 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3f3c:	4605      	mov	r5, r0
    3f3e:	2200      	movs	r2, #0
    3f40:	2101      	movs	r1, #1
    3f42:	2008      	movs	r0, #8
    3f44:	f7fe fe12 	bl	2b6c <z_arm_irq_priority_set>
    3f48:	2008      	movs	r0, #8
    3f4a:	f7fe fdf1 	bl	2b30 <arch_irq_enable>
	return config->uarte_regs;
    3f4e:	686b      	ldr	r3, [r5, #4]
    3f50:	f04f 0814 	mov.w	r8, #20
    3f54:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3f56:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3f58:	692e      	ldr	r6, [r5, #16]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3f5a:	2701      	movs	r7, #1
    3f5c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f60:	a801      	add	r0, sp, #4
	data->dev = dev;
    3f62:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
    3f64:	f8cd 8004 	str.w	r8, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f68:	f7ff ff42 	bl	3df0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3f6c:	f04f 0916 	mov.w	r9, #22
    3f70:	9b01      	ldr	r3, [sp, #4]
    3f72:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    3f76:	6083      	str	r3, [r0, #8]
	nrf_gpio_cfg_output(config->pseltxd);
    3f78:	4640      	mov	r0, r8
    3f7a:	f003 fed3 	bl	7d24 <nrf_gpio_cfg_output>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f7e:	a801      	add	r0, sp, #4
    3f80:	f8cd 9004 	str.w	r9, [sp, #4]
    3f84:	f7ff ff34 	bl	3df0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3f88:	9b01      	ldr	r3, [sp, #4]
    3f8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3f8e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3f92:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3f96:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
    3f9a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->PSEL.TXD = pseltxd;
    3f9e:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3fa2:	f04f 0815 	mov.w	r8, #21
    3fa6:	f8c4 9514 	str.w	r9, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3faa:	a801      	add	r0, sp, #4
    3fac:	f8cd 8004 	str.w	r8, [sp, #4]
    3fb0:	f7ff ff1e 	bl	3df0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3fb4:	f04f 0913 	mov.w	r9, #19
    3fb8:	9b01      	ldr	r3, [sp, #4]
    3fba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3fbe:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3fc2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3fc6:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
    3fca:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3fce:	a801      	add	r0, sp, #4
    3fd0:	f8cd 9004 	str.w	r9, [sp, #4]
    3fd4:	f7ff ff0c 	bl	3df0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3fd8:	9b01      	ldr	r3, [sp, #4]
    3fda:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
    3fdc:	6087      	str	r7, [r0, #8]
		nrf_gpio_cfg_output(config->pselrts);
    3fde:	4648      	mov	r0, r9
    3fe0:	f003 fea0 	bl	7d24 <nrf_gpio_cfg_output>
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3fe4:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
    3fe6:	f8c4 9508 	str.w	r9, [r4, #1288]	; 0x508
    3fea:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
    3fec:	f8c4 8510 	str.w	r8, [r4, #1296]	; 0x510
    3ff0:	3104      	adds	r1, #4
    3ff2:	f7ff fe3b 	bl	3c6c <uarte_nrfx_configure>
	if (err) {
    3ff6:	4607      	mov	r7, r0
    3ff8:	b9b0      	cbnz	r0, 4028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3ffa:	686b      	ldr	r3, [r5, #4]
    3ffc:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3ffe:	0719      	lsls	r1, r3, #28
    4000:	d542      	bpl.n	4088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4002:	f106 0012 	add.w	r0, r6, #18
    4006:	f000 fb1b 	bl	4640 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    400a:	4b33      	ldr	r3, [pc, #204]	; (40d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
    400c:	4298      	cmp	r0, r3
    400e:	d00f      	beq.n	4030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    4010:	4b32      	ldr	r3, [pc, #200]	; (40dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
    4012:	4933      	ldr	r1, [pc, #204]	; (40e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
		LOG_ERR("Failed to allocate PPI Channel");
    4014:	4833      	ldr	r0, [pc, #204]	; (40e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>)
    4016:	1ac9      	subs	r1, r1, r3
    4018:	08c9      	lsrs	r1, r1, #3
    401a:	0189      	lsls	r1, r1, #6
    401c:	f041 0101 	orr.w	r1, r1, #1
    4020:	f003 f9ee 	bl	7400 <log_0>
		return -EIO;
    4024:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    4028:	4638      	mov	r0, r7
    402a:	b003      	add	sp, #12
    402c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    4030:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4034:	f896 8012 	ldrb.w	r8, [r6, #18]
    4038:	d10b      	bne.n	4052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
    403a:	492b      	ldr	r1, [pc, #172]	; (40e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
    403c:	482b      	ldr	r0, [pc, #172]	; (40ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    403e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
    4042:	4a2b      	ldr	r2, [pc, #172]	; (40f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    4044:	f003 f8c8 	bl	71d8 <printk>
    4048:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    404c:	4828      	ldr	r0, [pc, #160]	; (40f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    404e:	f003 f99c 	bl	738a <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    4052:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    4056:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    405a:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
    405e:	d10b      	bne.n	4078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    4060:	4924      	ldr	r1, [pc, #144]	; (40f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    4062:	4822      	ldr	r0, [pc, #136]	; (40ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    4064:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    4068:	4a21      	ldr	r2, [pc, #132]	; (40f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    406a:	f003 f8b5 	bl	71d8 <printk>
    406e:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    4072:	481f      	ldr	r0, [pc, #124]	; (40f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    4074:	f003 f989 	bl	738a <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4078:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    407a:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    407e:	7cb2      	ldrb	r2, [r6, #18]
    4080:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    4082:	4a1d      	ldr	r2, [pc, #116]	; (40f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    4084:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4088:	2308      	movs	r3, #8
    408a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    408e:	2300      	movs	r3, #0
    4090:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4094:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4098:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    409c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    40a0:	2301      	movs	r3, #1
    40a2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40a6:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    40a8:	686b      	ldr	r3, [r5, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    40aa:	3610      	adds	r6, #16
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    40ac:	685b      	ldr	r3, [r3, #4]
    40ae:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    40b0:	bf5c      	itt	pl
    40b2:	f44f 7280 	movpl.w	r2, #256	; 0x100
    40b6:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    40ba:	06db      	lsls	r3, r3, #27
    40bc:	bf44      	itt	mi
    40be:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    40c2:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    40c6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    40c8:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    40cc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40d0:	2301      	movs	r3, #1
    40d2:	60a3      	str	r3, [r4, #8]
    40d4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    40d6:	e7a7      	b.n	4028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    40d8:	0bad0000 	.word	0x0bad0000
    40dc:	00008124 	.word	0x00008124
    40e0:	00008154 	.word	0x00008154
    40e4:	000092fb 	.word	0x000092fb
    40e8:	00009352 	.word	0x00009352
    40ec:	00008496 	.word	0x00008496
    40f0:	0000931a 	.word	0x0000931a
    40f4:	00009356 	.word	0x00009356
    40f8:	50017000 	.word	0x50017000

000040fc <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    40fc:	4b06      	ldr	r3, [pc, #24]	; (4118 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    40fe:	681b      	ldr	r3, [r3, #0]
    4100:	2b07      	cmp	r3, #7
    4102:	d107      	bne.n	4114 <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    4104:	4b05      	ldr	r3, [pc, #20]	; (411c <nrf53_errata_42+0x20>)
    4106:	681b      	ldr	r3, [r3, #0]
    4108:	3b02      	subs	r3, #2
    410a:	2b03      	cmp	r3, #3
    410c:	d802      	bhi.n	4114 <nrf53_errata_42+0x18>
    410e:	4a04      	ldr	r2, [pc, #16]	; (4120 <nrf53_errata_42+0x24>)
    4110:	5cd0      	ldrb	r0, [r2, r3]
    4112:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    4114:	2000      	movs	r0, #0
    #endif
}
    4116:	4770      	bx	lr
    4118:	00ff0130 	.word	0x00ff0130
    411c:	00ff0134 	.word	0x00ff0134
    4120:	0000936a 	.word	0x0000936a

00004124 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    4124:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4128:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    412c:	4b03      	ldr	r3, [pc, #12]	; (413c <SystemCoreClockUpdate+0x18>)
    412e:	f002 0203 	and.w	r2, r2, #3
    4132:	40d3      	lsrs	r3, r2
    4134:	4a02      	ldr	r2, [pc, #8]	; (4140 <SystemCoreClockUpdate+0x1c>)
    4136:	6013      	str	r3, [r2, #0]
#endif
}
    4138:	4770      	bx	lr
    413a:	bf00      	nop
    413c:	07a12000 	.word	0x07a12000
    4140:	20000044 	.word	0x20000044

00004144 <SystemInit>:

void SystemInit(void)
{
    4144:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    4146:	f7ff ffd9 	bl	40fc <nrf53_errata_42>
    414a:	b148      	cbz	r0, 4160 <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    414c:	4b39      	ldr	r3, [pc, #228]	; (4234 <SystemInit+0xf0>)
    414e:	681a      	ldr	r2, [r3, #0]
    4150:	b932      	cbnz	r2, 4160 <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    4152:	210d      	movs	r1, #13
    4154:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    4156:	2101      	movs	r1, #1
    4158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    415c:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    415e:	601a      	str	r2, [r3, #0]
{
    4160:	2200      	movs	r2, #0
    4162:	00d3      	lsls	r3, r2, #3
    4164:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4168:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    416c:	3101      	adds	r1, #1
    416e:	d007      	beq.n	4180 <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4170:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4174:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4176:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    417a:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    417c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    417e:	d1f0      	bne.n	4162 <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    4180:	f7ff ffbc 	bl	40fc <nrf53_errata_42>
    4184:	2800      	cmp	r0, #0
    4186:	d14e      	bne.n	4226 <SystemInit+0xe2>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    4188:	f7ff ffb8 	bl	40fc <nrf53_errata_42>
    418c:	b138      	cbz	r0, 419e <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    418e:	4b2a      	ldr	r3, [pc, #168]	; (4238 <SystemInit+0xf4>)
    4190:	4a2a      	ldr	r2, [pc, #168]	; (423c <SystemInit+0xf8>)
    4192:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    4194:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4198:	2201      	movs	r2, #1
    419a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    419e:	4b28      	ldr	r3, [pc, #160]	; (4240 <SystemInit+0xfc>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    41a0:	681b      	ldr	r3, [r3, #0]
    41a2:	2b07      	cmp	r3, #7
    41a4:	d10a      	bne.n	41bc <SystemInit+0x78>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    41a6:	4b27      	ldr	r3, [pc, #156]	; (4244 <SystemInit+0x100>)
    41a8:	681b      	ldr	r3, [r3, #0]
    41aa:	3b02      	subs	r3, #2
    41ac:	2b03      	cmp	r3, #3
    41ae:	d805      	bhi.n	41bc <SystemInit+0x78>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    41b0:	4a25      	ldr	r2, [pc, #148]	; (4248 <SystemInit+0x104>)
    41b2:	5cd3      	ldrb	r3, [r2, r3]
    41b4:	b113      	cbz	r3, 41bc <SystemInit+0x78>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    41b6:	2200      	movs	r2, #0
    41b8:	4b24      	ldr	r3, [pc, #144]	; (424c <SystemInit+0x108>)
    41ba:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    41bc:	f7ff ff9e 	bl	40fc <nrf53_errata_42>
    41c0:	b150      	cbz	r0, 41d8 <SystemInit+0x94>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    41c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    41c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    41ca:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    41cc:	bf42      	ittt	mi
    41ce:	2200      	movmi	r2, #0
    41d0:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    41d4:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    41d8:	4b19      	ldr	r3, [pc, #100]	; (4240 <SystemInit+0xfc>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    41da:	681b      	ldr	r3, [r3, #0]
    41dc:	2b07      	cmp	r3, #7
    41de:	d109      	bne.n	41f4 <SystemInit+0xb0>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    41e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    41e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    41e8:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    41ea:	bf44      	itt	mi
    41ec:	f06f 0201 	mvnmi.w	r2, #1
    41f0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    41f4:	f7ff ff82 	bl	40fc <nrf53_errata_42>
    41f8:	b110      	cbz	r0, 4200 <SystemInit+0xbc>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    41fa:	2265      	movs	r2, #101	; 0x65
    41fc:	4b14      	ldr	r3, [pc, #80]	; (4250 <SystemInit+0x10c>)
    41fe:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    4200:	4a14      	ldr	r2, [pc, #80]	; (4254 <SystemInit+0x110>)
    4202:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4206:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    420a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    420e:	4a12      	ldr	r2, [pc, #72]	; (4258 <SystemInit+0x114>)
    4210:	4b12      	ldr	r3, [pc, #72]	; (425c <SystemInit+0x118>)
    4212:	6811      	ldr	r1, [r2, #0]
    4214:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    4218:	69d2      	ldr	r2, [r2, #28]
    421a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    421e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    4222:	f7ff bf7f 	b.w	4124 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    4226:	2229      	movs	r2, #41	; 0x29
    4228:	4b09      	ldr	r3, [pc, #36]	; (4250 <SystemInit+0x10c>)
    422a:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    422c:	2203      	movs	r2, #3
    422e:	631a      	str	r2, [r3, #48]	; 0x30
    4230:	e7aa      	b.n	4188 <SystemInit+0x44>
    4232:	bf00      	nop
    4234:	50004a20 	.word	0x50004a20
    4238:	50039530 	.word	0x50039530
    423c:	beef0044 	.word	0xbeef0044
    4240:	00ff0130 	.word	0x00ff0130
    4244:	00ff0134 	.word	0x00ff0134
    4248:	0000936e 	.word	0x0000936e
    424c:	5003254c 	.word	0x5003254c
    4250:	5000470c 	.word	0x5000470c
    4254:	e000ed00 	.word	0xe000ed00
    4258:	00ff8000 	.word	0x00ff8000
    425c:	50006000 	.word	0x50006000

00004260 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    4260:	b508      	push	{r3, lr}
    4262:	2803      	cmp	r0, #3
    4264:	d831      	bhi.n	42ca <nrf_clock_is_running.constprop.0+0x6a>
    4266:	e8df f000 	tbb	[pc, r0]
    426a:	1102      	.short	0x1102
    426c:	2b1e      	.short	0x2b1e
            if (p_clk_src != NULL)
    426e:	b131      	cbz	r1, 427e <nrf_clock_is_running.constprop.0+0x1e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4270:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4274:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    4278:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    427c:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    427e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4282:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    4286:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    428a:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    428c:	b131      	cbz	r1, 429c <nrf_clock_is_running.constprop.0+0x3c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    428e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4292:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4296:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    429a:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    429c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    42a0:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    42a4:	e7ef      	b.n	4286 <nrf_clock_is_running.constprop.0+0x26>
            if (p_clk_src != NULL)
    42a6:	b131      	cbz	r1, 42b6 <nrf_clock_is_running.constprop.0+0x56>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    42a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    42ac:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    42b0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    42b4:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    42b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    42ba:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
    42be:	e7e2      	b.n	4286 <nrf_clock_is_running.constprop.0+0x26>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    42c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    42c4:	f8d3 0454 	ldr.w	r0, [r3, #1108]	; 0x454
    42c8:	e7dd      	b.n	4286 <nrf_clock_is_running.constprop.0+0x26>
            NRFX_ASSERT(0);
    42ca:	f44f 734f 	mov.w	r3, #828	; 0x33c
    42ce:	4a06      	ldr	r2, [pc, #24]	; (42e8 <nrf_clock_is_running.constprop.0+0x88>)
    42d0:	4906      	ldr	r1, [pc, #24]	; (42ec <nrf_clock_is_running.constprop.0+0x8c>)
    42d2:	4807      	ldr	r0, [pc, #28]	; (42f0 <nrf_clock_is_running.constprop.0+0x90>)
    42d4:	f002 ff80 	bl	71d8 <printk>
    42d8:	4803      	ldr	r0, [pc, #12]	; (42e8 <nrf_clock_is_running.constprop.0+0x88>)
    42da:	f44f 714f 	mov.w	r1, #828	; 0x33c
    42de:	f003 f854 	bl	738a <assert_post_action>
            return false;
    42e2:	2000      	movs	r0, #0
    42e4:	e7d1      	b.n	428a <nrf_clock_is_running.constprop.0+0x2a>
    42e6:	bf00      	nop
    42e8:	00009372 	.word	0x00009372
    42ec:	0000853e 	.word	0x0000853e
    42f0:	00008496 	.word	0x00008496

000042f4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    42f4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    42f6:	4604      	mov	r4, r0
    42f8:	b948      	cbnz	r0, 430e <nrfx_clock_init+0x1a>
    42fa:	490a      	ldr	r1, [pc, #40]	; (4324 <nrfx_clock_init+0x30>)
    42fc:	480a      	ldr	r0, [pc, #40]	; (4328 <nrfx_clock_init+0x34>)
    42fe:	23b5      	movs	r3, #181	; 0xb5
    4300:	4a0a      	ldr	r2, [pc, #40]	; (432c <nrfx_clock_init+0x38>)
    4302:	f002 ff69 	bl	71d8 <printk>
    4306:	21b5      	movs	r1, #181	; 0xb5
    4308:	4808      	ldr	r0, [pc, #32]	; (432c <nrfx_clock_init+0x38>)
    430a:	f003 f83e 	bl	738a <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    430e:	4b08      	ldr	r3, [pc, #32]	; (4330 <nrfx_clock_init+0x3c>)
    4310:	791a      	ldrb	r2, [r3, #4]
    4312:	b922      	cbnz	r2, 431e <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4314:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    4316:	4807      	ldr	r0, [pc, #28]	; (4334 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    4318:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    431a:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    431c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    431e:	4806      	ldr	r0, [pc, #24]	; (4338 <nrfx_clock_init+0x44>)
    return err_code;
    4320:	e7fc      	b.n	431c <nrfx_clock_init+0x28>
    4322:	bf00      	nop
    4324:	000093e3 	.word	0x000093e3
    4328:	00008496 	.word	0x00008496
    432c:	000093a6 	.word	0x000093a6
    4330:	20000a38 	.word	0x20000a38
    4334:	0bad0000 	.word	0x0bad0000
    4338:	0bad000c 	.word	0x0bad000c

0000433c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    433c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    433e:	4b0e      	ldr	r3, [pc, #56]	; (4378 <nrfx_clock_enable+0x3c>)
    4340:	791b      	ldrb	r3, [r3, #4]
    4342:	b94b      	cbnz	r3, 4358 <nrfx_clock_enable+0x1c>
    4344:	490d      	ldr	r1, [pc, #52]	; (437c <nrfx_clock_enable+0x40>)
    4346:	480e      	ldr	r0, [pc, #56]	; (4380 <nrfx_clock_enable+0x44>)
    4348:	23ce      	movs	r3, #206	; 0xce
    434a:	4a0e      	ldr	r2, [pc, #56]	; (4384 <nrfx_clock_enable+0x48>)
    434c:	f002 ff44 	bl	71d8 <printk>
    4350:	21ce      	movs	r1, #206	; 0xce
    4352:	480c      	ldr	r0, [pc, #48]	; (4384 <nrfx_clock_enable+0x48>)
    4354:	f003 f819 	bl	738a <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4358:	2005      	movs	r0, #5
    435a:	f7fe fbf9 	bl	2b50 <arch_irq_is_enabled>
    435e:	b910      	cbnz	r0, 4366 <nrfx_clock_enable+0x2a>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4360:	2005      	movs	r0, #5
    4362:	f7fe fbe5 	bl	2b30 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    4366:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    436a:	2201      	movs	r2, #1
    436c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    4370:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    4374:	bd08      	pop	{r3, pc}
    4376:	bf00      	nop
    4378:	20000a38 	.word	0x20000a38
    437c:	000093f1 	.word	0x000093f1
    4380:	00008496 	.word	0x00008496
    4384:	000093a6 	.word	0x000093a6

00004388 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4388:	4b32      	ldr	r3, [pc, #200]	; (4454 <nrfx_clock_start+0xcc>)
{
    438a:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    438c:	791b      	ldrb	r3, [r3, #4]
{
    438e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4390:	b95b      	cbnz	r3, 43aa <nrfx_clock_start+0x22>
    4392:	4931      	ldr	r1, [pc, #196]	; (4458 <nrfx_clock_start+0xd0>)
    4394:	4831      	ldr	r0, [pc, #196]	; (445c <nrfx_clock_start+0xd4>)
    4396:	f44f 7385 	mov.w	r3, #266	; 0x10a
    439a:	4a31      	ldr	r2, [pc, #196]	; (4460 <nrfx_clock_start+0xd8>)
    439c:	f002 ff1c 	bl	71d8 <printk>
    43a0:	f44f 7185 	mov.w	r1, #266	; 0x10a
    43a4:	482e      	ldr	r0, [pc, #184]	; (4460 <nrfx_clock_start+0xd8>)
    43a6:	f002 fff0 	bl	738a <assert_post_action>
    switch (domain)
    43aa:	2c03      	cmp	r4, #3
    43ac:	d845      	bhi.n	443a <nrfx_clock_start+0xb2>
    43ae:	e8df f004 	tbb	[pc, r4]
    43b2:	1f02      	.short	0x1f02
    43b4:	372a      	.short	0x372a
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    43b6:	2000      	movs	r0, #0
    43b8:	f10d 0107 	add.w	r1, sp, #7
    43bc:	f7ff ff50 	bl	4260 <nrf_clock_is_running.constprop.0>
    43c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    43c4:	b190      	cbz	r0, 43ec <nrfx_clock_start+0x64>
    43c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    43ca:	2a02      	cmp	r2, #2
    43cc:	d10e      	bne.n	43ec <nrfx_clock_start+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    43ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43d2:	2200      	movs	r2, #0
    43d4:	4b23      	ldr	r3, [pc, #140]	; (4464 <nrfx_clock_start+0xdc>)
    43d6:	601a      	str	r2, [r3, #0]
    43d8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    43da:	2202      	movs	r2, #2
    43dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    43e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43e4:	2201      	movs	r2, #1
    43e6:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    43e8:	b002      	add	sp, #8
    43ea:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    43ec:	2201      	movs	r2, #1
    43ee:	e7ee      	b.n	43ce <nrfx_clock_start+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43f0:	2200      	movs	r2, #0
    43f2:	4b1d      	ldr	r3, [pc, #116]	; (4468 <nrfx_clock_start+0xe0>)
    43f4:	601a      	str	r2, [r3, #0]
    43f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    43f8:	2201      	movs	r2, #1
    43fa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    43fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4402:	601a      	str	r2, [r3, #0]
}
    4404:	e7f0      	b.n	43e8 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4406:	2200      	movs	r2, #0
    4408:	4b18      	ldr	r3, [pc, #96]	; (446c <nrfx_clock_start+0xe4>)
    440a:	601a      	str	r2, [r3, #0]
    440c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    440e:	f44f 7200 	mov.w	r2, #512	; 0x200
    4412:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4416:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    441a:	2201      	movs	r2, #1
    441c:	621a      	str	r2, [r3, #32]
}
    441e:	e7e3      	b.n	43e8 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4420:	2200      	movs	r2, #0
    4422:	4b13      	ldr	r3, [pc, #76]	; (4470 <nrfx_clock_start+0xe8>)
    4424:	601a      	str	r2, [r3, #0]
    4426:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4428:	f44f 7280 	mov.w	r2, #256	; 0x100
    442c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4430:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4434:	2201      	movs	r2, #1
    4436:	619a      	str	r2, [r3, #24]
}
    4438:	e7d6      	b.n	43e8 <nrfx_clock_start+0x60>
            NRFX_ASSERT(0);
    443a:	f44f 739e 	mov.w	r3, #316	; 0x13c
    443e:	4a08      	ldr	r2, [pc, #32]	; (4460 <nrfx_clock_start+0xd8>)
    4440:	490c      	ldr	r1, [pc, #48]	; (4474 <nrfx_clock_start+0xec>)
    4442:	4806      	ldr	r0, [pc, #24]	; (445c <nrfx_clock_start+0xd4>)
    4444:	f002 fec8 	bl	71d8 <printk>
    4448:	f44f 719e 	mov.w	r1, #316	; 0x13c
    444c:	4804      	ldr	r0, [pc, #16]	; (4460 <nrfx_clock_start+0xd8>)
    444e:	f002 ff9c 	bl	738a <assert_post_action>
}
    4452:	e7c9      	b.n	43e8 <nrfx_clock_start+0x60>
    4454:	20000a38 	.word	0x20000a38
    4458:	000093f1 	.word	0x000093f1
    445c:	00008496 	.word	0x00008496
    4460:	000093a6 	.word	0x000093a6
    4464:	50005104 	.word	0x50005104
    4468:	50005100 	.word	0x50005100
    446c:	50005124 	.word	0x50005124
    4470:	50005120 	.word	0x50005120
    4474:	0000853e 	.word	0x0000853e

00004478 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4478:	4b3c      	ldr	r3, [pc, #240]	; (456c <nrfx_clock_stop+0xf4>)
{
    447a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    447c:	791b      	ldrb	r3, [r3, #4]
{
    447e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4480:	b95b      	cbnz	r3, 449a <nrfx_clock_stop+0x22>
    4482:	493b      	ldr	r1, [pc, #236]	; (4570 <nrfx_clock_stop+0xf8>)
    4484:	483b      	ldr	r0, [pc, #236]	; (4574 <nrfx_clock_stop+0xfc>)
    4486:	f240 1343 	movw	r3, #323	; 0x143
    448a:	4a3b      	ldr	r2, [pc, #236]	; (4578 <nrfx_clock_stop+0x100>)
    448c:	f002 fea4 	bl	71d8 <printk>
    4490:	f240 1143 	movw	r1, #323	; 0x143
    4494:	4838      	ldr	r0, [pc, #224]	; (4578 <nrfx_clock_stop+0x100>)
    4496:	f002 ff78 	bl	738a <assert_post_action>
    switch (domain)
    449a:	2c03      	cmp	r4, #3
    449c:	d858      	bhi.n	4550 <nrfx_clock_stop+0xd8>
    449e:	e8df f004 	tbb	[pc, r4]
    44a2:	1d02      	.short	0x1d02
    44a4:	4a3d      	.short	0x4a3d
    p_reg->INTENCLR = mask;
    44a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    44aa:	2202      	movs	r2, #2
    44ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44b0:	2200      	movs	r2, #0
    44b2:	f503 7382 	add.w	r3, r3, #260	; 0x104
    44b6:	601a      	str	r2, [r3, #0]
    44b8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44ba:	4b30      	ldr	r3, [pc, #192]	; (457c <nrfx_clock_stop+0x104>)
    44bc:	2201      	movs	r2, #1
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    44be:	f242 7510 	movw	r5, #10000	; 0x2710
    44c2:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    44c4:	2100      	movs	r1, #0
    44c6:	4620      	mov	r0, r4
    44c8:	f7ff feca 	bl	4260 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    44cc:	2800      	cmp	r0, #0
    44ce:	d04b      	beq.n	4568 <nrfx_clock_stop+0xf0>
    44d0:	2001      	movs	r0, #1
    44d2:	f003 fc46 	bl	7d62 <nrfx_busy_wait>
    44d6:	3d01      	subs	r5, #1
    44d8:	d1f4      	bne.n	44c4 <nrfx_clock_stop+0x4c>
    44da:	e045      	b.n	4568 <nrfx_clock_stop+0xf0>
    p_reg->INTENCLR = mask;
    44dc:	2301      	movs	r3, #1
    44de:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44e2:	2100      	movs	r1, #0
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    44e4:	f242 7410 	movw	r4, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    44e8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44ec:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    44f0:	f502 7280 	add.w	r2, r2, #256	; 0x100
    44f4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44f6:	4a22      	ldr	r2, [pc, #136]	; (4580 <nrfx_clock_stop+0x108>)
    44f8:	6013      	str	r3, [r2, #0]
    44fa:	f88d 3007 	strb.w	r3, [sp, #7]
    44fe:	2001      	movs	r0, #1
    4500:	f10d 0107 	add.w	r1, sp, #7
    4504:	f7ff feac 	bl	4260 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4508:	b370      	cbz	r0, 4568 <nrfx_clock_stop+0xf0>
    450a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    450e:	2801      	cmp	r0, #1
    4510:	d12a      	bne.n	4568 <nrfx_clock_stop+0xf0>
    4512:	f003 fc26 	bl	7d62 <nrfx_busy_wait>
    4516:	3c01      	subs	r4, #1
    4518:	d1f1      	bne.n	44fe <nrfx_clock_stop+0x86>
    451a:	e025      	b.n	4568 <nrfx_clock_stop+0xf0>
    p_reg->INTENCLR = mask;
    451c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4520:	f44f 7200 	mov.w	r2, #512	; 0x200
    4524:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4528:	2200      	movs	r2, #0
    452a:	f503 7392 	add.w	r3, r3, #292	; 0x124
    452e:	601a      	str	r2, [r3, #0]
    4530:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4532:	4b14      	ldr	r3, [pc, #80]	; (4584 <nrfx_clock_stop+0x10c>)
    4534:	e7c2      	b.n	44bc <nrfx_clock_stop+0x44>
    p_reg->INTENCLR = mask;
    4536:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    453a:	f44f 7280 	mov.w	r2, #256	; 0x100
    453e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4542:	2200      	movs	r2, #0
    4544:	f503 7390 	add.w	r3, r3, #288	; 0x120
    4548:	601a      	str	r2, [r3, #0]
    454a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    454c:	4b0e      	ldr	r3, [pc, #56]	; (4588 <nrfx_clock_stop+0x110>)
    454e:	e7b5      	b.n	44bc <nrfx_clock_stop+0x44>
            NRFX_ASSERT(0);
    4550:	490e      	ldr	r1, [pc, #56]	; (458c <nrfx_clock_stop+0x114>)
    4552:	4808      	ldr	r0, [pc, #32]	; (4574 <nrfx_clock_stop+0xfc>)
    4554:	f240 135f 	movw	r3, #351	; 0x15f
    4558:	4a07      	ldr	r2, [pc, #28]	; (4578 <nrfx_clock_stop+0x100>)
    455a:	f002 fe3d 	bl	71d8 <printk>
    455e:	f240 115f 	movw	r1, #351	; 0x15f
    4562:	4805      	ldr	r0, [pc, #20]	; (4578 <nrfx_clock_stop+0x100>)
    4564:	f002 ff11 	bl	738a <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4568:	b003      	add	sp, #12
    456a:	bd30      	pop	{r4, r5, pc}
    456c:	20000a38 	.word	0x20000a38
    4570:	000093f1 	.word	0x000093f1
    4574:	00008496 	.word	0x00008496
    4578:	000093a6 	.word	0x000093a6
    457c:	5000500c 	.word	0x5000500c
    4580:	50005004 	.word	0x50005004
    4584:	50005024 	.word	0x50005024
    4588:	5000501c 	.word	0x5000501c
    458c:	0000853e 	.word	0x0000853e

00004590 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4590:	4b26      	ldr	r3, [pc, #152]	; (462c <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4592:	b507      	push	{r0, r1, r2, lr}
    4594:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4596:	b152      	cbz	r2, 45ae <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4598:	2000      	movs	r0, #0
    459a:	6018      	str	r0, [r3, #0]
    459c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    459e:	2201      	movs	r2, #1
    45a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    45a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    45a8:	4b21      	ldr	r3, [pc, #132]	; (4630 <nrfx_power_clock_irq_handler+0xa0>)
    45aa:	681b      	ldr	r3, [r3, #0]
    45ac:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    45ae:	4b21      	ldr	r3, [pc, #132]	; (4634 <nrfx_power_clock_irq_handler+0xa4>)
    45b0:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    45b2:	b18a      	cbz	r2, 45d8 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45b4:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    45b6:	f10d 0107 	add.w	r1, sp, #7
    45ba:	6018      	str	r0, [r3, #0]
    45bc:	681b      	ldr	r3, [r3, #0]
    45be:	f7ff fe4f 	bl	4260 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    45c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    45c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    45ca:	2901      	cmp	r1, #1
    45cc:	f04f 0202 	mov.w	r2, #2
    45d0:	d125      	bne.n	461e <nrfx_power_clock_irq_handler+0x8e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    45d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45d6:	6099      	str	r1, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    45d8:	4b17      	ldr	r3, [pc, #92]	; (4638 <nrfx_power_clock_irq_handler+0xa8>)
    45da:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    45dc:	b162      	cbz	r2, 45f8 <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45de:	2200      	movs	r2, #0
    45e0:	601a      	str	r2, [r3, #0]
    45e2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    45e4:	f44f 7280 	mov.w	r2, #256	; 0x100
    45e8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    45ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    45f0:	4b0f      	ldr	r3, [pc, #60]	; (4630 <nrfx_power_clock_irq_handler+0xa0>)
    45f2:	2004      	movs	r0, #4
    45f4:	681b      	ldr	r3, [r3, #0]
    45f6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    45f8:	4b10      	ldr	r3, [pc, #64]	; (463c <nrfx_power_clock_irq_handler+0xac>)
    45fa:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    45fc:	b162      	cbz	r2, 4618 <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45fe:	2200      	movs	r2, #0
    4600:	601a      	str	r2, [r3, #0]
    4602:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    4604:	f44f 7200 	mov.w	r2, #512	; 0x200
    4608:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    460c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    4610:	4b07      	ldr	r3, [pc, #28]	; (4630 <nrfx_power_clock_irq_handler+0xa0>)
    4612:	2005      	movs	r0, #5
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	4798      	blx	r3
    }
#endif
}
    4618:	b003      	add	sp, #12
    461a:	f85d fb04 	ldr.w	pc, [sp], #4
    461e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4622:	4b03      	ldr	r3, [pc, #12]	; (4630 <nrfx_power_clock_irq_handler+0xa0>)
    4624:	2001      	movs	r0, #1
    4626:	681b      	ldr	r3, [r3, #0]
    4628:	4798      	blx	r3
    462a:	e7d5      	b.n	45d8 <nrfx_power_clock_irq_handler+0x48>
    462c:	50005100 	.word	0x50005100
    4630:	20000a38 	.word	0x20000a38
    4634:	50005104 	.word	0x50005104
    4638:	50005120 	.word	0x50005120
    463c:	50005124 	.word	0x50005124

00004640 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4640:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    4642:	f04f 0320 	mov.w	r3, #32
    4646:	f3ef 8511 	mrs	r5, BASEPRI
    464a:	f383 8811 	msr	BASEPRI, r3
    464e:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    4652:	4a0c      	ldr	r2, [pc, #48]	; (4684 <nrfx_dppi_channel_alloc+0x44>)
    4654:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    4656:	43e7      	mvns	r7, r4
    4658:	d012      	beq.n	4680 <nrfx_dppi_channel_alloc+0x40>
    465a:	2300      	movs	r3, #0
    465c:	b2d9      	uxtb	r1, r3
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    465e:	fa27 f601 	lsr.w	r6, r7, r1
    4662:	07f6      	lsls	r6, r6, #31
    4664:	f103 0301 	add.w	r3, r3, #1
    4668:	d5f8      	bpl.n	465c <nrfx_dppi_channel_alloc+0x1c>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    466a:	2301      	movs	r3, #1
    466c:	408b      	lsls	r3, r1
    466e:	4323      	orrs	r3, r4
        *p_channel = channel;
    4670:	7001      	strb	r1, [r0, #0]

        err_code = NRFX_SUCCESS;
    4672:	4805      	ldr	r0, [pc, #20]	; (4688 <nrfx_dppi_channel_alloc+0x48>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
    4674:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4676:	f385 8811 	msr	BASEPRI, r5
    467a:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    467e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
    4680:	4802      	ldr	r0, [pc, #8]	; (468c <nrfx_dppi_channel_alloc+0x4c>)
    4682:	e7f8      	b.n	4676 <nrfx_dppi_channel_alloc+0x36>
    4684:	20000a40 	.word	0x20000a40
    4688:	0bad0000 	.word	0x0bad0000
    468c:	0bad0002 	.word	0x0bad0002

00004690 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    4690:	2301      	movs	r3, #1
    4692:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    4696:	f010 0fff 	tst.w	r0, #255	; 0xff
    469a:	d012      	beq.n	46c2 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    469c:	f04f 0320 	mov.w	r3, #32
    46a0:	f3ef 8111 	mrs	r1, BASEPRI
    46a4:	f383 8811 	msr	BASEPRI, r3
    46a8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    46ac:	4a06      	ldr	r2, [pc, #24]	; (46c8 <nrfx_gpiote_channel_free+0x38>)
    46ae:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    46b0:	ea23 0000 	bic.w	r0, r3, r0
    46b4:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    46b6:	f381 8811 	msr	BASEPRI, r1
    46ba:	f3bf 8f6f 	isb	sy
    46be:	4803      	ldr	r0, [pc, #12]	; (46cc <nrfx_gpiote_channel_free+0x3c>)
    46c0:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    46c2:	4803      	ldr	r0, [pc, #12]	; (46d0 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    46c4:	4770      	bx	lr
    46c6:	bf00      	nop
    46c8:	20000a44 	.word	0x20000a44
    46cc:	0bad0000 	.word	0x0bad0000
    46d0:	0bad0004 	.word	0x0bad0004

000046d4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    46d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    46d8:	22ff      	movs	r2, #255	; 0xff
{
    46da:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    46dc:	2601      	movs	r6, #1
{
    46de:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    46e0:	f8df e058 	ldr.w	lr, [pc, #88]	; 473c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    46e4:	4814      	ldr	r0, [pc, #80]	; (4738 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    46e6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4740 <nrfx_gpiote_channel_alloc+0x6c>
    46ea:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    46ec:	f04f 0120 	mov.w	r1, #32
    46f0:	f3ef 8c11 	mrs	ip, BASEPRI
    46f4:	f381 8811 	msr	BASEPRI, r1
    46f8:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    46fc:	fa22 f103 	lsr.w	r1, r2, r3
    4700:	07c9      	lsls	r1, r1, #31
    4702:	d50a      	bpl.n	471a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    4704:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    4708:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    470c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    470e:	bf01      	itttt	eq
    4710:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    4712:	4339      	orreq	r1, r7
    4714:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
    4718:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    471a:	f38c 8811 	msr	BASEPRI, ip
    471e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    4722:	4540      	cmp	r0, r8
    4724:	d005      	beq.n	4732 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    4726:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    472a:	439a      	bics	r2, r3
    472c:	f104 0401 	add.w	r4, r4, #1
    4730:	d1db      	bne.n	46ea <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4736:	bf00      	nop
    4738:	0bad0002 	.word	0x0bad0002
    473c:	20000a44 	.word	0x20000a44
    4740:	0bad0000 	.word	0x0bad0000

00004744 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4744:	4b0e      	ldr	r3, [pc, #56]	; (4780 <z_sys_init_run_level+0x3c>)
{
    4746:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4748:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    474c:	3001      	adds	r0, #1
    474e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4752:	42a6      	cmp	r6, r4
    4754:	d800      	bhi.n	4758 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4756:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4758:	e9d4 3500 	ldrd	r3, r5, [r4]
    475c:	4628      	mov	r0, r5
    475e:	4798      	blx	r3
		if (dev != NULL) {
    4760:	b165      	cbz	r5, 477c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4762:	68eb      	ldr	r3, [r5, #12]
    4764:	b130      	cbz	r0, 4774 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4766:	2800      	cmp	r0, #0
    4768:	bfb8      	it	lt
    476a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    476c:	28ff      	cmp	r0, #255	; 0xff
    476e:	bfa8      	it	ge
    4770:	20ff      	movge	r0, #255	; 0xff
    4772:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4774:	785a      	ldrb	r2, [r3, #1]
    4776:	f042 0201 	orr.w	r2, r2, #1
    477a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    477c:	3408      	adds	r4, #8
    477e:	e7e8      	b.n	4752 <z_sys_init_run_level+0xe>
    4780:	00008304 	.word	0x00008304

00004784 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4784:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4786:	4605      	mov	r5, r0
    4788:	b910      	cbnz	r0, 4790 <z_impl_device_get_binding+0xc>
		return NULL;
    478a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    478c:	4620      	mov	r0, r4
    478e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4790:	7803      	ldrb	r3, [r0, #0]
    4792:	2b00      	cmp	r3, #0
    4794:	d0f9      	beq.n	478a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4796:	4a0f      	ldr	r2, [pc, #60]	; (47d4 <z_impl_device_get_binding+0x50>)
    4798:	4c0f      	ldr	r4, [pc, #60]	; (47d8 <z_impl_device_get_binding+0x54>)
    479a:	4616      	mov	r6, r2
    479c:	4294      	cmp	r4, r2
    479e:	d108      	bne.n	47b2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    47a0:	4c0d      	ldr	r4, [pc, #52]	; (47d8 <z_impl_device_get_binding+0x54>)
    47a2:	42b4      	cmp	r4, r6
    47a4:	d0f1      	beq.n	478a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    47a6:	4620      	mov	r0, r4
    47a8:	f003 fade 	bl	7d68 <z_device_ready>
    47ac:	b950      	cbnz	r0, 47c4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    47ae:	3418      	adds	r4, #24
    47b0:	e7f7      	b.n	47a2 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    47b2:	4620      	mov	r0, r4
    47b4:	f003 fad8 	bl	7d68 <z_device_ready>
    47b8:	b110      	cbz	r0, 47c0 <z_impl_device_get_binding+0x3c>
    47ba:	6823      	ldr	r3, [r4, #0]
    47bc:	42ab      	cmp	r3, r5
    47be:	d0e5      	beq.n	478c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    47c0:	3418      	adds	r4, #24
    47c2:	e7eb      	b.n	479c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    47c4:	4628      	mov	r0, r5
    47c6:	6821      	ldr	r1, [r4, #0]
    47c8:	f003 f948 	bl	7a5c <strcmp>
    47cc:	2800      	cmp	r0, #0
    47ce:	d1ee      	bne.n	47ae <z_impl_device_get_binding+0x2a>
    47d0:	e7dc      	b.n	478c <z_impl_device_get_binding+0x8>
    47d2:	bf00      	nop
    47d4:	20000128 	.word	0x20000128
    47d8:	200000b0 	.word	0x200000b0

000047dc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    47dc:	b510      	push	{r4, lr}
    47de:	4604      	mov	r4, r0
	z_impl_log_panic();
    47e0:	f7fd f8de 	bl	19a0 <z_impl_log_panic>
    47e4:	4b06      	ldr	r3, [pc, #24]	; (4800 <k_sys_fatal_error_handler+0x24>)
    47e6:	4907      	ldr	r1, [pc, #28]	; (4804 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    47e8:	4807      	ldr	r0, [pc, #28]	; (4808 <k_sys_fatal_error_handler+0x2c>)
    47ea:	1ac9      	subs	r1, r1, r3
    47ec:	08c9      	lsrs	r1, r1, #3
    47ee:	0189      	lsls	r1, r1, #6
    47f0:	f041 0101 	orr.w	r1, r1, #1
    47f4:	f002 fe04 	bl	7400 <log_0>
	arch_system_halt(reason);
    47f8:	4620      	mov	r0, r4
    47fa:	f003 fabe 	bl	7d7a <arch_system_halt>
    47fe:	bf00      	nop
    4800:	00008124 	.word	0x00008124
    4804:	0000813c 	.word	0x0000813c
    4808:	0000940f 	.word	0x0000940f

0000480c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    480c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4810:	4605      	mov	r5, r0
    4812:	460f      	mov	r7, r1
	__asm__ volatile(
    4814:	f04f 0320 	mov.w	r3, #32
    4818:	f3ef 8811 	mrs	r8, BASEPRI
    481c:	f383 8811 	msr	BASEPRI, r3
    4820:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4824:	f001 fed8 	bl	65d8 <z_impl_k_current_get>
    4828:	4c28      	ldr	r4, [pc, #160]	; (48cc <z_fatal_error+0xc0>)
    482a:	4b29      	ldr	r3, [pc, #164]	; (48d0 <z_fatal_error+0xc4>)
    482c:	2d04      	cmp	r5, #4
    482e:	eba4 0403 	sub.w	r4, r4, r3
    4832:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    4836:	bf98      	it	ls
    4838:	4a26      	ldrls	r2, [pc, #152]	; (48d4 <z_fatal_error+0xc8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    483a:	ea4f 1484 	mov.w	r4, r4, lsl #6
    483e:	f044 0301 	orr.w	r3, r4, #1
    4842:	4606      	mov	r6, r0
	switch (reason) {
    4844:	bf94      	ite	ls
    4846:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    484a:	4a23      	ldrhi	r2, [pc, #140]	; (48d8 <z_fatal_error+0xcc>)
    484c:	f8ad 3000 	strh.w	r3, [sp]
    4850:	4629      	mov	r1, r5
    4852:	2300      	movs	r3, #0
    4854:	4821      	ldr	r0, [pc, #132]	; (48dc <z_fatal_error+0xd0>)
    4856:	f002 fe0d 	bl	7474 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    485a:	b147      	cbz	r7, 486e <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    485c:	69fb      	ldr	r3, [r7, #28]
    485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4862:	b123      	cbz	r3, 486e <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
    4864:	481e      	ldr	r0, [pc, #120]	; (48e0 <z_fatal_error+0xd4>)
    4866:	f044 0101 	orr.w	r1, r4, #1
    486a:	f002 fdc9 	bl	7400 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    486e:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4872:	b12e      	cbz	r6, 4880 <z_fatal_error+0x74>
    4874:	4630      	mov	r0, r6
    4876:	f003 faae 	bl	7dd6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    487a:	b108      	cbz	r0, 4880 <z_fatal_error+0x74>
    487c:	7803      	ldrb	r3, [r0, #0]
    487e:	b903      	cbnz	r3, 4882 <z_fatal_error+0x76>
		thread_name = "unknown";
    4880:	4818      	ldr	r0, [pc, #96]	; (48e4 <z_fatal_error+0xd8>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    4882:	f7fc ff03 	bl	168c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
    4886:	4623      	mov	r3, r4
    4888:	4602      	mov	r2, r0
    488a:	4631      	mov	r1, r6
    488c:	4816      	ldr	r0, [pc, #88]	; (48e8 <z_fatal_error+0xdc>)
    488e:	f002 fdd8 	bl	7442 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4892:	4639      	mov	r1, r7
    4894:	4628      	mov	r0, r5
    4896:	f7ff ffa1 	bl	47dc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    489a:	2d04      	cmp	r5, #4
    489c:	d10c      	bne.n	48b8 <z_fatal_error+0xac>
    489e:	4913      	ldr	r1, [pc, #76]	; (48ec <z_fatal_error+0xe0>)
    48a0:	238f      	movs	r3, #143	; 0x8f
    48a2:	4a13      	ldr	r2, [pc, #76]	; (48f0 <z_fatal_error+0xe4>)
    48a4:	4813      	ldr	r0, [pc, #76]	; (48f4 <z_fatal_error+0xe8>)
    48a6:	f002 fc97 	bl	71d8 <printk>
    48aa:	4813      	ldr	r0, [pc, #76]	; (48f8 <z_fatal_error+0xec>)
    48ac:	f002 fc94 	bl	71d8 <printk>
    48b0:	218f      	movs	r1, #143	; 0x8f
    48b2:	480f      	ldr	r0, [pc, #60]	; (48f0 <z_fatal_error+0xe4>)
    48b4:	f002 fd69 	bl	738a <assert_post_action>
	__asm__ volatile(
    48b8:	f388 8811 	msr	BASEPRI, r8
    48bc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    48c0:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    48c2:	b002      	add	sp, #8
    48c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    48c8:	f7fe bd20 	b.w	330c <z_impl_k_thread_abort>
    48cc:	0000813c 	.word	0x0000813c
    48d0:	00008124 	.word	0x00008124
    48d4:	0000831c 	.word	0x0000831c
    48d8:	0000941e 	.word	0x0000941e
    48dc:	00009434 	.word	0x00009434
    48e0:	0000945c 	.word	0x0000945c
    48e4:	0000942c 	.word	0x0000942c
    48e8:	0000947d 	.word	0x0000947d
    48ec:	000094b7 	.word	0x000094b7
    48f0:	00009495 	.word	0x00009495
    48f4:	00008496 	.word	0x00008496
    48f8:	000094d4 	.word	0x000094d4

000048fc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    48fc:	4802      	ldr	r0, [pc, #8]	; (4908 <z_bss_zero+0xc>)
    48fe:	4a03      	ldr	r2, [pc, #12]	; (490c <z_bss_zero+0x10>)
    4900:	2100      	movs	r1, #0
    4902:	1a12      	subs	r2, r2, r0
    4904:	f003 b8e1 	b.w	7aca <memset>
    4908:	20000188 	.word	0x20000188
    490c:	20000b14 	.word	0x20000b14

00004910 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4910:	2201      	movs	r2, #1
{
    4912:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4914:	4b09      	ldr	r3, [pc, #36]	; (493c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4916:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4918:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    491a:	f7ff ff13 	bl	4744 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    491e:	f002 fadb 	bl	6ed8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4922:	2003      	movs	r0, #3
    4924:	f7ff ff0e 	bl	4744 <z_sys_init_run_level>

	z_init_static_threads();
    4928:	f000 fa4e 	bl	4dc8 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    492c:	f7fb fd90 	bl	450 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4930:	4a03      	ldr	r2, [pc, #12]	; (4940 <bg_thread_main+0x30>)
    4932:	7b13      	ldrb	r3, [r2, #12]
    4934:	f023 0301 	bic.w	r3, r3, #1
    4938:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    493a:	bd08      	pop	{r3, pc}
    493c:	20000b11 	.word	0x20000b11
    4940:	200002c0 	.word	0x200002c0

00004944 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4944:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    4948:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    494a:	f7fc fdb7 	bl	14bc <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    494e:	4b37      	ldr	r3, [pc, #220]	; (4a2c <z_cstart+0xe8>)
	uint32_t msp =
    4950:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4954:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    4958:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    495c:	2400      	movs	r4, #0
    495e:	23e0      	movs	r3, #224	; 0xe0
    4960:	4d33      	ldr	r5, [pc, #204]	; (4a30 <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4962:	f04f 0b01 	mov.w	fp, #1
    4966:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    496a:	77ec      	strb	r4, [r5, #31]
    496c:	762c      	strb	r4, [r5, #24]
    496e:	766c      	strb	r4, [r5, #25]
    4970:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    4974:	4e2f      	ldr	r6, [pc, #188]	; (4a34 <z_cstart+0xf0>)
    4976:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    497a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    497c:	f7fe fc6a 	bl	3254 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4980:	f7fe f956 	bl	2c30 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4984:	f04f 33ff 	mov.w	r3, #4294967295
    4988:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    498a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    498c:	f7fe fe80 	bl	3690 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4990:	f7fe fcce 	bl	3330 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    4994:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4998:	4d27      	ldr	r5, [pc, #156]	; (4a38 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    499a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    499e:	ab06      	add	r3, sp, #24
    49a0:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    49a2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    49a6:	f003 f9de 	bl	7d66 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    49aa:	4620      	mov	r0, r4
    49ac:	f7ff feca 	bl	4744 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    49b0:	2001      	movs	r0, #1
    49b2:	f7ff fec7 	bl	4744 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    49b6:	f8df a098 	ldr.w	sl, [pc, #152]	; 4a50 <z_cstart+0x10c>
	z_sched_init();
    49ba:	f001 fc79 	bl	62b0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    49be:	4b1f      	ldr	r3, [pc, #124]	; (4a3c <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
    49c0:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    49c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    49c6:	491e      	ldr	r1, [pc, #120]	; (4a40 <z_cstart+0xfc>)
    49c8:	9305      	str	r3, [sp, #20]
    49ca:	4630      	mov	r0, r6
    49cc:	4653      	mov	r3, sl
    49ce:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    49d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    49d6:	9400      	str	r4, [sp, #0]
    49d8:	f000 f948 	bl	4c6c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    49dc:	7b73      	ldrb	r3, [r6, #13]
    49de:	4680      	mov	r8, r0
    49e0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    49e4:	4630      	mov	r0, r6
    49e6:	7373      	strb	r3, [r6, #13]
    49e8:	f001 fa32 	bl	5e50 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    49ec:	230f      	movs	r3, #15
    49ee:	4f15      	ldr	r7, [pc, #84]	; (4a44 <z_cstart+0x100>)
    49f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    49f4:	e9cd 4302 	strd	r4, r3, [sp, #8]
    49f8:	4913      	ldr	r1, [pc, #76]	; (4a48 <z_cstart+0x104>)
    49fa:	4b14      	ldr	r3, [pc, #80]	; (4a4c <z_cstart+0x108>)
    49fc:	4638      	mov	r0, r7
    49fe:	e9cd b404 	strd	fp, r4, [sp, #16]
    4a02:	e9cd 5400 	strd	r5, r4, [sp]
    4a06:	f000 f931 	bl	4c6c <z_setup_new_thread>
    4a0a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4a0c:	4652      	mov	r2, sl
    4a0e:	f023 0304 	bic.w	r3, r3, #4
    4a12:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    4a14:	f105 0318 	add.w	r3, r5, #24
    4a18:	4641      	mov	r1, r8
    4a1a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    4a1c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4a20:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    4a22:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    4a24:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4a28:	f7fe f8ee 	bl	2c08 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4a2c:	20004f58 	.word	0x20004f58
    4a30:	e000ed00 	.word	0xe000ed00
    4a34:	200002c0 	.word	0x200002c0
    4a38:	20000aa4 	.word	0x20000aa4
    4a3c:	00009553 	.word	0x00009553
    4a40:	20000e18 	.word	0x20000e18
    4a44:	20000240 	.word	0x20000240
    4a48:	20004e18 	.word	0x20004e18
    4a4c:	00004f31 	.word	0x00004f31
    4a50:	00004911 	.word	0x00004911

00004a54 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a58:	4d16      	ldr	r5, [pc, #88]	; (4ab4 <init_mem_slab_module+0x60>)
    4a5a:	4c17      	ldr	r4, [pc, #92]	; (4ab8 <init_mem_slab_module+0x64>)
    4a5c:	46a8      	mov	r8, r5
    4a5e:	4e17      	ldr	r6, [pc, #92]	; (4abc <init_mem_slab_module+0x68>)
    4a60:	42ac      	cmp	r4, r5
    4a62:	d90c      	bls.n	4a7e <init_mem_slab_module+0x2a>
    4a64:	4916      	ldr	r1, [pc, #88]	; (4ac0 <init_mem_slab_module+0x6c>)
    4a66:	233c      	movs	r3, #60	; 0x3c
    4a68:	4632      	mov	r2, r6
    4a6a:	4816      	ldr	r0, [pc, #88]	; (4ac4 <init_mem_slab_module+0x70>)
    4a6c:	f002 fbb4 	bl	71d8 <printk>
    4a70:	4815      	ldr	r0, [pc, #84]	; (4ac8 <init_mem_slab_module+0x74>)
    4a72:	f002 fbb1 	bl	71d8 <printk>
    4a76:	213c      	movs	r1, #60	; 0x3c
    4a78:	4630      	mov	r0, r6
    4a7a:	f002 fc86 	bl	738a <assert_post_action>
    4a7e:	4544      	cmp	r4, r8
    4a80:	d302      	bcc.n	4a88 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4a82:	2000      	movs	r0, #0
	return rc;
}
    4a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4a88:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    4a8c:	ea41 0302 	orr.w	r3, r1, r2
    4a90:	f013 0303 	ands.w	r3, r3, #3
    4a94:	d10b      	bne.n	4aae <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    4a96:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    4a98:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4a9a:	4283      	cmp	r3, r0
    4a9c:	d101      	bne.n	4aa2 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a9e:	3420      	adds	r4, #32
    4aa0:	e7de      	b.n	4a60 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    4aa2:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4aa4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    4aa6:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
    4aa8:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    4aaa:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4aac:	e7f5      	b.n	4a9a <init_mem_slab_module+0x46>
		return -EINVAL;
    4aae:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4ab2:	e7e7      	b.n	4a84 <init_mem_slab_module+0x30>
    4ab4:	20000128 	.word	0x20000128
    4ab8:	20000128 	.word	0x20000128
    4abc:	0000955b 	.word	0x0000955b
    4ac0:	00009580 	.word	0x00009580
    4ac4:	00008496 	.word	0x00008496
    4ac8:	0000959d 	.word	0x0000959d

00004acc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4acc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4ad0:	4604      	mov	r4, r0
    4ad2:	460e      	mov	r6, r1
    4ad4:	4690      	mov	r8, r2
    4ad6:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4ad8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4adc:	f04f 0320 	mov.w	r3, #32
    4ae0:	f3ef 8711 	mrs	r7, BASEPRI
    4ae4:	f383 8811 	msr	BASEPRI, r3
    4ae8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4aec:	4628      	mov	r0, r5
    4aee:	f000 f9fb 	bl	4ee8 <z_spin_lock_valid>
    4af2:	b968      	cbnz	r0, 4b10 <k_mem_slab_alloc+0x44>
    4af4:	2381      	movs	r3, #129	; 0x81
    4af6:	4a24      	ldr	r2, [pc, #144]	; (4b88 <k_mem_slab_alloc+0xbc>)
    4af8:	4924      	ldr	r1, [pc, #144]	; (4b8c <k_mem_slab_alloc+0xc0>)
    4afa:	4825      	ldr	r0, [pc, #148]	; (4b90 <k_mem_slab_alloc+0xc4>)
    4afc:	f002 fb6c 	bl	71d8 <printk>
    4b00:	4629      	mov	r1, r5
    4b02:	4824      	ldr	r0, [pc, #144]	; (4b94 <k_mem_slab_alloc+0xc8>)
    4b04:	f002 fb68 	bl	71d8 <printk>
    4b08:	2181      	movs	r1, #129	; 0x81
    4b0a:	481f      	ldr	r0, [pc, #124]	; (4b88 <k_mem_slab_alloc+0xbc>)
    4b0c:	f002 fc3d 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    4b10:	4628      	mov	r0, r5
    4b12:	f000 fa05 	bl	4f20 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4b16:	69a3      	ldr	r3, [r4, #24]
    4b18:	b1eb      	cbz	r3, 4b56 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    4b1a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    4b1c:	681b      	ldr	r3, [r3, #0]
    4b1e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    4b20:	69e3      	ldr	r3, [r4, #28]
    4b22:	3301      	adds	r3, #1
    4b24:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4b26:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b28:	4628      	mov	r0, r5
    4b2a:	f000 f9eb 	bl	4f04 <z_spin_unlock_valid>
    4b2e:	b968      	cbnz	r0, 4b4c <k_mem_slab_alloc+0x80>
    4b30:	23ac      	movs	r3, #172	; 0xac
    4b32:	4a15      	ldr	r2, [pc, #84]	; (4b88 <k_mem_slab_alloc+0xbc>)
    4b34:	4918      	ldr	r1, [pc, #96]	; (4b98 <k_mem_slab_alloc+0xcc>)
    4b36:	4816      	ldr	r0, [pc, #88]	; (4b90 <k_mem_slab_alloc+0xc4>)
    4b38:	f002 fb4e 	bl	71d8 <printk>
    4b3c:	4629      	mov	r1, r5
    4b3e:	4817      	ldr	r0, [pc, #92]	; (4b9c <k_mem_slab_alloc+0xd0>)
    4b40:	f002 fb4a 	bl	71d8 <printk>
    4b44:	21ac      	movs	r1, #172	; 0xac
    4b46:	4810      	ldr	r0, [pc, #64]	; (4b88 <k_mem_slab_alloc+0xbc>)
    4b48:	f002 fc1f 	bl	738a <assert_post_action>
	__asm__ volatile(
    4b4c:	f387 8811 	msr	BASEPRI, r7
    4b50:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4b54:	e013      	b.n	4b7e <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4b56:	ea58 0209 	orrs.w	r2, r8, r9
    4b5a:	d103      	bne.n	4b64 <k_mem_slab_alloc+0x98>
		result = -ENOMEM;
    4b5c:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    4b60:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    4b62:	e7e1      	b.n	4b28 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4b64:	4622      	mov	r2, r4
    4b66:	4639      	mov	r1, r7
    4b68:	4628      	mov	r0, r5
    4b6a:	e9cd 8900 	strd	r8, r9, [sp]
    4b6e:	f000 ff35 	bl	59dc <z_pend_curr>
		if (result == 0) {
    4b72:	4604      	mov	r4, r0
    4b74:	b918      	cbnz	r0, 4b7e <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    4b76:	4b0a      	ldr	r3, [pc, #40]	; (4ba0 <k_mem_slab_alloc+0xd4>)
    4b78:	689b      	ldr	r3, [r3, #8]
    4b7a:	695b      	ldr	r3, [r3, #20]
    4b7c:	6033      	str	r3, [r6, #0]
}
    4b7e:	4620      	mov	r0, r4
    4b80:	b003      	add	sp, #12
    4b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b86:	bf00      	nop
    4b88:	00008556 	.word	0x00008556
    4b8c:	000085a8 	.word	0x000085a8
    4b90:	00008496 	.word	0x00008496
    4b94:	000085bd 	.word	0x000085bd
    4b98:	0000857c 	.word	0x0000857c
    4b9c:	00008593 	.word	0x00008593
    4ba0:	20000aa4 	.word	0x20000aa4

00004ba4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ba8:	4604      	mov	r4, r0
    4baa:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4bac:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4bb0:	f04f 0320 	mov.w	r3, #32
    4bb4:	f3ef 8711 	mrs	r7, BASEPRI
    4bb8:	f383 8811 	msr	BASEPRI, r3
    4bbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4bc0:	4628      	mov	r0, r5
    4bc2:	f000 f991 	bl	4ee8 <z_spin_lock_valid>
    4bc6:	b968      	cbnz	r0, 4be4 <k_mem_slab_free+0x40>
    4bc8:	2381      	movs	r3, #129	; 0x81
    4bca:	4a22      	ldr	r2, [pc, #136]	; (4c54 <k_mem_slab_free+0xb0>)
    4bcc:	4922      	ldr	r1, [pc, #136]	; (4c58 <k_mem_slab_free+0xb4>)
    4bce:	4823      	ldr	r0, [pc, #140]	; (4c5c <k_mem_slab_free+0xb8>)
    4bd0:	f002 fb02 	bl	71d8 <printk>
    4bd4:	4629      	mov	r1, r5
    4bd6:	4822      	ldr	r0, [pc, #136]	; (4c60 <k_mem_slab_free+0xbc>)
    4bd8:	f002 fafe 	bl	71d8 <printk>
    4bdc:	2181      	movs	r1, #129	; 0x81
    4bde:	481d      	ldr	r0, [pc, #116]	; (4c54 <k_mem_slab_free+0xb0>)
    4be0:	f002 fbd3 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    4be4:	4628      	mov	r0, r5
    4be6:	f000 f99b 	bl	4f20 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4bea:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4bee:	f1b8 0f00 	cmp.w	r8, #0
    4bf2:	d10f      	bne.n	4c14 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4bf4:	4620      	mov	r0, r4
    4bf6:	f001 fb0b 	bl	6210 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4bfa:	b158      	cbz	r0, 4c14 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4bfc:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4bfe:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4c02:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    4c04:	f001 f924 	bl	5e50 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4c08:	4639      	mov	r1, r7
    4c0a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    4c10:	f000 bcf2 	b.w	55f8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4c14:	6833      	ldr	r3, [r6, #0]
    4c16:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c18:	4628      	mov	r0, r5
    4c1a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4c1c:	6833      	ldr	r3, [r6, #0]
    4c1e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    4c20:	69e3      	ldr	r3, [r4, #28]
    4c22:	3b01      	subs	r3, #1
    4c24:	61e3      	str	r3, [r4, #28]
    4c26:	f000 f96d 	bl	4f04 <z_spin_unlock_valid>
    4c2a:	b968      	cbnz	r0, 4c48 <k_mem_slab_free+0xa4>
    4c2c:	23ac      	movs	r3, #172	; 0xac
    4c2e:	4a09      	ldr	r2, [pc, #36]	; (4c54 <k_mem_slab_free+0xb0>)
    4c30:	490c      	ldr	r1, [pc, #48]	; (4c64 <k_mem_slab_free+0xc0>)
    4c32:	480a      	ldr	r0, [pc, #40]	; (4c5c <k_mem_slab_free+0xb8>)
    4c34:	f002 fad0 	bl	71d8 <printk>
    4c38:	4629      	mov	r1, r5
    4c3a:	480b      	ldr	r0, [pc, #44]	; (4c68 <k_mem_slab_free+0xc4>)
    4c3c:	f002 facc 	bl	71d8 <printk>
    4c40:	21ac      	movs	r1, #172	; 0xac
    4c42:	4804      	ldr	r0, [pc, #16]	; (4c54 <k_mem_slab_free+0xb0>)
    4c44:	f002 fba1 	bl	738a <assert_post_action>
	__asm__ volatile(
    4c48:	f387 8811 	msr	BASEPRI, r7
    4c4c:	f3bf 8f6f 	isb	sy
}
    4c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c54:	00008556 	.word	0x00008556
    4c58:	000085a8 	.word	0x000085a8
    4c5c:	00008496 	.word	0x00008496
    4c60:	000085bd 	.word	0x000085bd
    4c64:	0000857c 	.word	0x0000857c
    4c68:	00008593 	.word	0x00008593

00004c6c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c70:	b085      	sub	sp, #20
    4c72:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    4c76:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    4c78:	f1b9 0f0f 	cmp.w	r9, #15
{
    4c7c:	460f      	mov	r7, r1
    4c7e:	4615      	mov	r5, r2
    4c80:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    4c82:	d12e      	bne.n	4ce2 <z_setup_new_thread+0x76>
    4c84:	4b23      	ldr	r3, [pc, #140]	; (4d14 <z_setup_new_thread+0xa8>)
    4c86:	4598      	cmp	r8, r3
    4c88:	d12f      	bne.n	4cea <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4c8a:	f104 0358 	add.w	r3, r4, #88	; 0x58
    4c8e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    4c94:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    4c96:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4c98:	2304      	movs	r3, #4
    4c9a:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4c9e:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4ca0:	9302      	str	r3, [sp, #8]
    4ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4ca4:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4ca8:	9301      	str	r3, [sp, #4]
    4caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    4cac:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
    4cae:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4cb2:	9300      	str	r3, [sp, #0]
    4cb4:	462a      	mov	r2, r5
    4cb6:	4643      	mov	r3, r8
    4cb8:	4639      	mov	r1, r7
    4cba:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4cbc:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    4cc0:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
    4cc2:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
    4cc6:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    4cc8:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4cca:	f7fd ff81 	bl	2bd0 <arch_new_thread>
	if (!_current) {
    4cce:	4b12      	ldr	r3, [pc, #72]	; (4d18 <z_setup_new_thread+0xac>)
	new_thread->init_data = NULL;
    4cd0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    4cd2:	689b      	ldr	r3, [r3, #8]
    4cd4:	b103      	cbz	r3, 4cd8 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
    4cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    4cd8:	4628      	mov	r0, r5
    4cda:	6723      	str	r3, [r4, #112]	; 0x70
    4cdc:	b005      	add	sp, #20
    4cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    4ce2:	f109 0310 	add.w	r3, r9, #16
    4ce6:	2b1e      	cmp	r3, #30
    4ce8:	d9cf      	bls.n	4c8a <z_setup_new_thread+0x1e>
    4cea:	f44f 7302 	mov.w	r3, #520	; 0x208
    4cee:	4a0b      	ldr	r2, [pc, #44]	; (4d1c <z_setup_new_thread+0xb0>)
    4cf0:	490b      	ldr	r1, [pc, #44]	; (4d20 <z_setup_new_thread+0xb4>)
    4cf2:	480c      	ldr	r0, [pc, #48]	; (4d24 <z_setup_new_thread+0xb8>)
    4cf4:	f002 fa70 	bl	71d8 <printk>
    4cf8:	4649      	mov	r1, r9
    4cfa:	f06f 030f 	mvn.w	r3, #15
    4cfe:	220e      	movs	r2, #14
    4d00:	4809      	ldr	r0, [pc, #36]	; (4d28 <z_setup_new_thread+0xbc>)
    4d02:	f002 fa69 	bl	71d8 <printk>
    4d06:	f44f 7102 	mov.w	r1, #520	; 0x208
    4d0a:	4804      	ldr	r0, [pc, #16]	; (4d1c <z_setup_new_thread+0xb0>)
    4d0c:	f002 fb3d 	bl	738a <assert_post_action>
    4d10:	e7bb      	b.n	4c8a <z_setup_new_thread+0x1e>
    4d12:	bf00      	nop
    4d14:	00004f31 	.word	0x00004f31
    4d18:	20000aa4 	.word	0x20000aa4
    4d1c:	000095bc 	.word	0x000095bc
    4d20:	000095df 	.word	0x000095df
    4d24:	00008496 	.word	0x00008496
    4d28:	0000965f 	.word	0x0000965f

00004d2c <z_impl_k_thread_create>:
{
    4d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d30:	b087      	sub	sp, #28
    4d32:	4604      	mov	r4, r0
    4d34:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    4d38:	460d      	mov	r5, r1
    4d3a:	4690      	mov	r8, r2
    4d3c:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4d3e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    4d42:	b173      	cbz	r3, 4d62 <z_impl_k_thread_create+0x36>
    4d44:	491b      	ldr	r1, [pc, #108]	; (4db4 <z_impl_k_thread_create+0x88>)
    4d46:	f240 2371 	movw	r3, #625	; 0x271
    4d4a:	4a1b      	ldr	r2, [pc, #108]	; (4db8 <z_impl_k_thread_create+0x8c>)
    4d4c:	481b      	ldr	r0, [pc, #108]	; (4dbc <z_impl_k_thread_create+0x90>)
    4d4e:	f002 fa43 	bl	71d8 <printk>
    4d52:	481b      	ldr	r0, [pc, #108]	; (4dc0 <z_impl_k_thread_create+0x94>)
    4d54:	f002 fa40 	bl	71d8 <printk>
    4d58:	f240 2171 	movw	r1, #625	; 0x271
    4d5c:	4816      	ldr	r0, [pc, #88]	; (4db8 <z_impl_k_thread_create+0x8c>)
    4d5e:	f002 fb14 	bl	738a <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4d62:	2300      	movs	r3, #0
    4d64:	9305      	str	r3, [sp, #20]
    4d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4d68:	4642      	mov	r2, r8
    4d6a:	9304      	str	r3, [sp, #16]
    4d6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4d6e:	4629      	mov	r1, r5
    4d70:	9303      	str	r3, [sp, #12]
    4d72:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4d74:	4620      	mov	r0, r4
    4d76:	9302      	str	r3, [sp, #8]
    4d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4d7a:	9301      	str	r3, [sp, #4]
    4d7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d7e:	9300      	str	r3, [sp, #0]
    4d80:	464b      	mov	r3, r9
    4d82:	f7ff ff73 	bl	4c6c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4d86:	1c7b      	adds	r3, r7, #1
    4d88:	bf08      	it	eq
    4d8a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    4d8e:	d005      	beq.n	4d9c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4d90:	ea56 0307 	orrs.w	r3, r6, r7
    4d94:	d106      	bne.n	4da4 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    4d96:	4620      	mov	r0, r4
    4d98:	f001 f8a2 	bl	5ee0 <z_sched_start>
}
    4d9c:	4620      	mov	r0, r4
    4d9e:	b007      	add	sp, #28
    4da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4da4:	4632      	mov	r2, r6
    4da6:	463b      	mov	r3, r7
    4da8:	4906      	ldr	r1, [pc, #24]	; (4dc4 <z_impl_k_thread_create+0x98>)
    4daa:	f104 0018 	add.w	r0, r4, #24
    4dae:	f001 fd37 	bl	6820 <z_add_timeout>
    4db2:	e7f3      	b.n	4d9c <z_impl_k_thread_create+0x70>
    4db4:	00009690 	.word	0x00009690
    4db8:	000095bc 	.word	0x000095bc
    4dbc:	00008496 	.word	0x00008496
    4dc0:	000096a2 	.word	0x000096a2
    4dc4:	00005f89 	.word	0x00005f89

00004dc8 <z_init_static_threads>:
{
    4dc8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    4dcc:	4f3f      	ldr	r7, [pc, #252]	; (4ecc <z_init_static_threads+0x104>)
    4dce:	4d40      	ldr	r5, [pc, #256]	; (4ed0 <z_init_static_threads+0x108>)
    4dd0:	463e      	mov	r6, r7
    4dd2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 4ee0 <z_init_static_threads+0x118>
{
    4dd6:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    4dd8:	42bd      	cmp	r5, r7
    4dda:	d90e      	bls.n	4dfa <z_init_static_threads+0x32>
    4ddc:	493d      	ldr	r1, [pc, #244]	; (4ed4 <z_init_static_threads+0x10c>)
    4dde:	f44f 7336 	mov.w	r3, #728	; 0x2d8
    4de2:	4642      	mov	r2, r8
    4de4:	483c      	ldr	r0, [pc, #240]	; (4ed8 <z_init_static_threads+0x110>)
    4de6:	f002 f9f7 	bl	71d8 <printk>
    4dea:	483c      	ldr	r0, [pc, #240]	; (4edc <z_init_static_threads+0x114>)
    4dec:	f002 f9f4 	bl	71d8 <printk>
    4df0:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    4df4:	4640      	mov	r0, r8
    4df6:	f002 fac8 	bl	738a <assert_post_action>
    4dfa:	42b5      	cmp	r5, r6
    4dfc:	f105 0430 	add.w	r4, r5, #48	; 0x30
    4e00:	d31f      	bcc.n	4e42 <z_init_static_threads+0x7a>
	k_sched_lock();
    4e02:	f000 fc3d 	bl	5680 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4e06:	4c32      	ldr	r4, [pc, #200]	; (4ed0 <z_init_static_threads+0x108>)
    4e08:	4d35      	ldr	r5, [pc, #212]	; (4ee0 <z_init_static_threads+0x118>)
    4e0a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4ed4 <z_init_static_threads+0x10c>
    4e0e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 4ed8 <z_init_static_threads+0x110>
    4e12:	42b4      	cmp	r4, r6
    4e14:	d90e      	bls.n	4e34 <z_init_static_threads+0x6c>
    4e16:	4641      	mov	r1, r8
    4e18:	f240 23f7 	movw	r3, #759	; 0x2f7
    4e1c:	462a      	mov	r2, r5
    4e1e:	4648      	mov	r0, r9
    4e20:	f002 f9da 	bl	71d8 <printk>
    4e24:	482d      	ldr	r0, [pc, #180]	; (4edc <z_init_static_threads+0x114>)
    4e26:	f002 f9d7 	bl	71d8 <printk>
    4e2a:	f240 21f7 	movw	r1, #759	; 0x2f7
    4e2e:	4628      	mov	r0, r5
    4e30:	f002 faab 	bl	738a <assert_post_action>
    4e34:	42b4      	cmp	r4, r6
    4e36:	d321      	bcc.n	4e7c <z_init_static_threads+0xb4>
}
    4e38:	b006      	add	sp, #24
    4e3a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    4e3e:	f000 be67 	b.w	5b10 <k_sched_unlock>
		z_setup_new_thread(
    4e42:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4e46:	9305      	str	r3, [sp, #20]
    4e48:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4e4c:	9304      	str	r3, [sp, #16]
    4e4e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4e52:	9303      	str	r3, [sp, #12]
    4e54:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4e58:	9302      	str	r3, [sp, #8]
    4e5a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4e5e:	9301      	str	r3, [sp, #4]
    4e60:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4e64:	9300      	str	r3, [sp, #0]
    4e66:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4e6a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4e6e:	f7ff fefd 	bl	4c6c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4e72:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4e76:	655d      	str	r5, [r3, #84]	; 0x54
    4e78:	4625      	mov	r5, r4
    4e7a:	e7ad      	b.n	4dd8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4e7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4e7e:	1c4b      	adds	r3, r1, #1
    4e80:	d014      	beq.n	4eac <z_init_static_threads+0xe4>
		} else {
			return (t * to_hz + off) / from_hz;
    4e82:	f240 32e7 	movw	r2, #999	; 0x3e7
    4e86:	2300      	movs	r3, #0
    4e88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4e8c:	4693      	mov	fp, r2
    4e8e:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
    4e90:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    4e94:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4e98:	459c      	cmp	ip, r3
    4e9a:	bf08      	it	eq
    4e9c:	4593      	cmpeq	fp, r2
    4e9e:	4658      	mov	r0, fp
    4ea0:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
    4ea2:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4ea4:	d104      	bne.n	4eb0 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    4ea6:	4638      	mov	r0, r7
    4ea8:	f001 f81a 	bl	5ee0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4eac:	3430      	adds	r4, #48	; 0x30
    4eae:	e7b0      	b.n	4e12 <z_init_static_threads+0x4a>
    4eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4eb4:	2300      	movs	r3, #0
    4eb6:	f7fb f94d 	bl	154 <__aeabi_uldivmod>
    4eba:	4602      	mov	r2, r0
    4ebc:	460b      	mov	r3, r1
    4ebe:	f107 0018 	add.w	r0, r7, #24
    4ec2:	4908      	ldr	r1, [pc, #32]	; (4ee4 <z_init_static_threads+0x11c>)
    4ec4:	f001 fcac 	bl	6820 <z_add_timeout>
    4ec8:	e7f0      	b.n	4eac <z_init_static_threads+0xe4>
    4eca:	bf00      	nop
    4ecc:	20000128 	.word	0x20000128
    4ed0:	20000128 	.word	0x20000128
    4ed4:	000096c7 	.word	0x000096c7
    4ed8:	00008496 	.word	0x00008496
    4edc:	0000959d 	.word	0x0000959d
    4ee0:	000095bc 	.word	0x000095bc
    4ee4:	00005f89 	.word	0x00005f89

00004ee8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    4ee8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    4eea:	b138      	cbz	r0, 4efc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    4eec:	4b04      	ldr	r3, [pc, #16]	; (4f00 <z_spin_lock_valid+0x18>)
    4eee:	f000 0003 	and.w	r0, r0, #3
    4ef2:	7d1b      	ldrb	r3, [r3, #20]
    4ef4:	1ac0      	subs	r0, r0, r3
    4ef6:	bf18      	it	ne
    4ef8:	2001      	movne	r0, #1
    4efa:	4770      	bx	lr
			return false;
		}
	}
	return true;
    4efc:	2001      	movs	r0, #1
}
    4efe:	4770      	bx	lr
    4f00:	20000aa4 	.word	0x20000aa4

00004f04 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4f04:	4905      	ldr	r1, [pc, #20]	; (4f1c <z_spin_unlock_valid+0x18>)
{
    4f06:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4f08:	688a      	ldr	r2, [r1, #8]
    4f0a:	7d08      	ldrb	r0, [r1, #20]
    4f0c:	6819      	ldr	r1, [r3, #0]
    4f0e:	4302      	orrs	r2, r0
    4f10:	2000      	movs	r0, #0
    4f12:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    4f14:	bf04      	itt	eq
    4f16:	6018      	streq	r0, [r3, #0]
	return true;
    4f18:	2001      	moveq	r0, #1
}
    4f1a:	4770      	bx	lr
    4f1c:	20000aa4 	.word	0x20000aa4

00004f20 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    4f20:	4a02      	ldr	r2, [pc, #8]	; (4f2c <z_spin_lock_set_owner+0xc>)
    4f22:	7d11      	ldrb	r1, [r2, #20]
    4f24:	6893      	ldr	r3, [r2, #8]
    4f26:	430b      	orrs	r3, r1
    4f28:	6003      	str	r3, [r0, #0]
}
    4f2a:	4770      	bx	lr
    4f2c:	20000aa4 	.word	0x20000aa4

00004f30 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4f30:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    4f32:	4c09      	ldr	r4, [pc, #36]	; (4f58 <idle+0x28>)
	__asm__ volatile(
    4f34:	f04f 0220 	mov.w	r2, #32
    4f38:	f3ef 8311 	mrs	r3, BASEPRI
    4f3c:	f382 8811 	msr	BASEPRI, r2
    4f40:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    4f44:	f001 fd8e 	bl	6a64 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    4f48:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    4f4a:	f7fd f8c7 	bl	20dc <pm_system_suspend>
    4f4e:	2800      	cmp	r0, #0
    4f50:	d1f0      	bne.n	4f34 <idle+0x4>
	arch_cpu_idle();
    4f52:	f7fd fe73 	bl	2c3c <arch_cpu_idle>
}
    4f56:	e7ed      	b.n	4f34 <idle+0x4>
    4f58:	20000aa4 	.word	0x20000aa4

00004f5c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4f5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4f60:	4604      	mov	r4, r0
    4f62:	4616      	mov	r6, r2
    4f64:	461f      	mov	r7, r3
    4f66:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4f6a:	b163      	cbz	r3, 4f86 <z_impl_k_mutex_lock+0x2a>
    4f6c:	496d      	ldr	r1, [pc, #436]	; (5124 <z_impl_k_mutex_lock+0x1c8>)
    4f6e:	2365      	movs	r3, #101	; 0x65
    4f70:	4a6d      	ldr	r2, [pc, #436]	; (5128 <z_impl_k_mutex_lock+0x1cc>)
    4f72:	486e      	ldr	r0, [pc, #440]	; (512c <z_impl_k_mutex_lock+0x1d0>)
    4f74:	f002 f930 	bl	71d8 <printk>
    4f78:	486d      	ldr	r0, [pc, #436]	; (5130 <z_impl_k_mutex_lock+0x1d4>)
    4f7a:	f002 f92d 	bl	71d8 <printk>
    4f7e:	2165      	movs	r1, #101	; 0x65
    4f80:	4869      	ldr	r0, [pc, #420]	; (5128 <z_impl_k_mutex_lock+0x1cc>)
    4f82:	f002 fa02 	bl	738a <assert_post_action>
    4f86:	f04f 0320 	mov.w	r3, #32
    4f8a:	f3ef 8811 	mrs	r8, BASEPRI
    4f8e:	f383 8811 	msr	BASEPRI, r3
    4f92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f96:	4867      	ldr	r0, [pc, #412]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    4f98:	f7ff ffa6 	bl	4ee8 <z_spin_lock_valid>
    4f9c:	b968      	cbnz	r0, 4fba <z_impl_k_mutex_lock+0x5e>
    4f9e:	2381      	movs	r3, #129	; 0x81
    4fa0:	4a65      	ldr	r2, [pc, #404]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    4fa2:	4966      	ldr	r1, [pc, #408]	; (513c <z_impl_k_mutex_lock+0x1e0>)
    4fa4:	4861      	ldr	r0, [pc, #388]	; (512c <z_impl_k_mutex_lock+0x1d0>)
    4fa6:	f002 f917 	bl	71d8 <printk>
    4faa:	4962      	ldr	r1, [pc, #392]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    4fac:	4864      	ldr	r0, [pc, #400]	; (5140 <z_impl_k_mutex_lock+0x1e4>)
    4fae:	f002 f913 	bl	71d8 <printk>
    4fb2:	2181      	movs	r1, #129	; 0x81
    4fb4:	4860      	ldr	r0, [pc, #384]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    4fb6:	f002 f9e8 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    4fba:	485e      	ldr	r0, [pc, #376]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    4fbc:	f7ff ffb0 	bl	4f20 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4fc0:	68e3      	ldr	r3, [r4, #12]
    4fc2:	4a60      	ldr	r2, [pc, #384]	; (5144 <z_impl_k_mutex_lock+0x1e8>)
    4fc4:	b1fb      	cbz	r3, 5006 <z_impl_k_mutex_lock+0xaa>
    4fc6:	68a0      	ldr	r0, [r4, #8]
    4fc8:	6891      	ldr	r1, [r2, #8]
    4fca:	4288      	cmp	r0, r1
    4fcc:	d03d      	beq.n	504a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4fce:	ea56 0307 	orrs.w	r3, r6, r7
    4fd2:	d13c      	bne.n	504e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fd4:	4857      	ldr	r0, [pc, #348]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    4fd6:	f7ff ff95 	bl	4f04 <z_spin_unlock_valid>
    4fda:	b968      	cbnz	r0, 4ff8 <z_impl_k_mutex_lock+0x9c>
    4fdc:	23ac      	movs	r3, #172	; 0xac
    4fde:	4a56      	ldr	r2, [pc, #344]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    4fe0:	4959      	ldr	r1, [pc, #356]	; (5148 <z_impl_k_mutex_lock+0x1ec>)
    4fe2:	4852      	ldr	r0, [pc, #328]	; (512c <z_impl_k_mutex_lock+0x1d0>)
    4fe4:	f002 f8f8 	bl	71d8 <printk>
    4fe8:	4952      	ldr	r1, [pc, #328]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    4fea:	4858      	ldr	r0, [pc, #352]	; (514c <z_impl_k_mutex_lock+0x1f0>)
    4fec:	f002 f8f4 	bl	71d8 <printk>
    4ff0:	21ac      	movs	r1, #172	; 0xac
    4ff2:	4851      	ldr	r0, [pc, #324]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    4ff4:	f002 f9c9 	bl	738a <assert_post_action>
	__asm__ volatile(
    4ff8:	f388 8811 	msr	BASEPRI, r8
    4ffc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5000:	f06f 000f 	mvn.w	r0, #15
    5004:	e01e      	b.n	5044 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    5006:	6891      	ldr	r1, [r2, #8]
    5008:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    500c:	3301      	adds	r3, #1
    500e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5010:	6893      	ldr	r3, [r2, #8]
    5012:	4848      	ldr	r0, [pc, #288]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5014:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    5016:	60a3      	str	r3, [r4, #8]
    5018:	f7ff ff74 	bl	4f04 <z_spin_unlock_valid>
    501c:	b968      	cbnz	r0, 503a <z_impl_k_mutex_lock+0xde>
    501e:	23ac      	movs	r3, #172	; 0xac
    5020:	4a45      	ldr	r2, [pc, #276]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    5022:	4949      	ldr	r1, [pc, #292]	; (5148 <z_impl_k_mutex_lock+0x1ec>)
    5024:	4841      	ldr	r0, [pc, #260]	; (512c <z_impl_k_mutex_lock+0x1d0>)
    5026:	f002 f8d7 	bl	71d8 <printk>
    502a:	4942      	ldr	r1, [pc, #264]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    502c:	4847      	ldr	r0, [pc, #284]	; (514c <z_impl_k_mutex_lock+0x1f0>)
    502e:	f002 f8d3 	bl	71d8 <printk>
    5032:	21ac      	movs	r1, #172	; 0xac
    5034:	4840      	ldr	r0, [pc, #256]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    5036:	f002 f9a8 	bl	738a <assert_post_action>
    503a:	f388 8811 	msr	BASEPRI, r8
    503e:	f3bf 8f6f 	isb	sy
		return 0;
    5042:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5044:	b002      	add	sp, #8
    5046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    504a:	6921      	ldr	r1, [r4, #16]
    504c:	e7de      	b.n	500c <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    504e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5052:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5056:	4299      	cmp	r1, r3
    5058:	bfa8      	it	ge
    505a:	4619      	movge	r1, r3
    505c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5060:	428b      	cmp	r3, r1
    5062:	dd41      	ble.n	50e8 <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
    5064:	f000 ffea 	bl	603c <z_set_prio>
    5068:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    506a:	4622      	mov	r2, r4
    506c:	4641      	mov	r1, r8
    506e:	e9cd 6700 	strd	r6, r7, [sp]
    5072:	4830      	ldr	r0, [pc, #192]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    5074:	f000 fcb2 	bl	59dc <z_pend_curr>
	if (got_mutex == 0) {
    5078:	2800      	cmp	r0, #0
    507a:	d0e3      	beq.n	5044 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    507c:	f04f 0320 	mov.w	r3, #32
    5080:	f3ef 8611 	mrs	r6, BASEPRI
    5084:	f383 8811 	msr	BASEPRI, r3
    5088:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    508c:	4829      	ldr	r0, [pc, #164]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    508e:	f7ff ff2b 	bl	4ee8 <z_spin_lock_valid>
    5092:	b968      	cbnz	r0, 50b0 <z_impl_k_mutex_lock+0x154>
    5094:	2381      	movs	r3, #129	; 0x81
    5096:	4a28      	ldr	r2, [pc, #160]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    5098:	4928      	ldr	r1, [pc, #160]	; (513c <z_impl_k_mutex_lock+0x1e0>)
    509a:	4824      	ldr	r0, [pc, #144]	; (512c <z_impl_k_mutex_lock+0x1d0>)
    509c:	f002 f89c 	bl	71d8 <printk>
    50a0:	4924      	ldr	r1, [pc, #144]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    50a2:	4827      	ldr	r0, [pc, #156]	; (5140 <z_impl_k_mutex_lock+0x1e4>)
    50a4:	f002 f898 	bl	71d8 <printk>
    50a8:	2181      	movs	r1, #129	; 0x81
    50aa:	4823      	ldr	r0, [pc, #140]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    50ac:	f002 f96d 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    50b0:	4820      	ldr	r0, [pc, #128]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    50b2:	f7ff ff35 	bl	4f20 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    50b6:	6823      	ldr	r3, [r4, #0]
    50b8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50ba:	429c      	cmp	r4, r3
    50bc:	d007      	beq.n	50ce <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    50be:	b133      	cbz	r3, 50ce <z_impl_k_mutex_lock+0x172>
    50c0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    50c4:	4299      	cmp	r1, r3
    50c6:	bfa8      	it	ge
    50c8:	4619      	movge	r1, r3
    50ca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    50ce:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    50d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    50d4:	4299      	cmp	r1, r3
    50d6:	d109      	bne.n	50ec <z_impl_k_mutex_lock+0x190>
	if (resched) {
    50d8:	b16d      	cbz	r5, 50f6 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    50da:	4631      	mov	r1, r6
    50dc:	4815      	ldr	r0, [pc, #84]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    50de:	f000 fa8b 	bl	55f8 <z_reschedule>
	return -EAGAIN;
    50e2:	f06f 000a 	mvn.w	r0, #10
    50e6:	e7ad      	b.n	5044 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    50e8:	2500      	movs	r5, #0
    50ea:	e7be      	b.n	506a <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
    50ec:	f000 ffa6 	bl	603c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    50f0:	2800      	cmp	r0, #0
    50f2:	d1f2      	bne.n	50da <z_impl_k_mutex_lock+0x17e>
    50f4:	e7f0      	b.n	50d8 <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    50f6:	480f      	ldr	r0, [pc, #60]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    50f8:	f7ff ff04 	bl	4f04 <z_spin_unlock_valid>
    50fc:	b968      	cbnz	r0, 511a <z_impl_k_mutex_lock+0x1be>
    50fe:	23ac      	movs	r3, #172	; 0xac
    5100:	4a0d      	ldr	r2, [pc, #52]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    5102:	4911      	ldr	r1, [pc, #68]	; (5148 <z_impl_k_mutex_lock+0x1ec>)
    5104:	4809      	ldr	r0, [pc, #36]	; (512c <z_impl_k_mutex_lock+0x1d0>)
    5106:	f002 f867 	bl	71d8 <printk>
    510a:	490a      	ldr	r1, [pc, #40]	; (5134 <z_impl_k_mutex_lock+0x1d8>)
    510c:	480f      	ldr	r0, [pc, #60]	; (514c <z_impl_k_mutex_lock+0x1f0>)
    510e:	f002 f863 	bl	71d8 <printk>
    5112:	21ac      	movs	r1, #172	; 0xac
    5114:	4808      	ldr	r0, [pc, #32]	; (5138 <z_impl_k_mutex_lock+0x1dc>)
    5116:	f002 f938 	bl	738a <assert_post_action>
	__asm__ volatile(
    511a:	f386 8811 	msr	BASEPRI, r6
    511e:	f3bf 8f6f 	isb	sy
    5122:	e7de      	b.n	50e2 <z_impl_k_mutex_lock+0x186>
    5124:	00009690 	.word	0x00009690
    5128:	000096f4 	.word	0x000096f4
    512c:	00008496 	.word	0x00008496
    5130:	00009716 	.word	0x00009716
    5134:	20000ad4 	.word	0x20000ad4
    5138:	00008556 	.word	0x00008556
    513c:	000085a8 	.word	0x000085a8
    5140:	000085bd 	.word	0x000085bd
    5144:	20000aa4 	.word	0x20000aa4
    5148:	0000857c 	.word	0x0000857c
    514c:	00008593 	.word	0x00008593

00005150 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5150:	b538      	push	{r3, r4, r5, lr}
    5152:	4604      	mov	r4, r0
    5154:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5158:	b163      	cbz	r3, 5174 <z_impl_k_mutex_unlock+0x24>
    515a:	4952      	ldr	r1, [pc, #328]	; (52a4 <z_impl_k_mutex_unlock+0x154>)
    515c:	23c7      	movs	r3, #199	; 0xc7
    515e:	4a52      	ldr	r2, [pc, #328]	; (52a8 <z_impl_k_mutex_unlock+0x158>)
    5160:	4852      	ldr	r0, [pc, #328]	; (52ac <z_impl_k_mutex_unlock+0x15c>)
    5162:	f002 f839 	bl	71d8 <printk>
    5166:	4852      	ldr	r0, [pc, #328]	; (52b0 <z_impl_k_mutex_unlock+0x160>)
    5168:	f002 f836 	bl	71d8 <printk>
    516c:	21c7      	movs	r1, #199	; 0xc7
    516e:	484e      	ldr	r0, [pc, #312]	; (52a8 <z_impl_k_mutex_unlock+0x158>)
    5170:	f002 f90b 	bl	738a <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5174:	68a3      	ldr	r3, [r4, #8]
    5176:	2b00      	cmp	r3, #0
    5178:	f000 808d 	beq.w	5296 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    517c:	4d4d      	ldr	r5, [pc, #308]	; (52b4 <z_impl_k_mutex_unlock+0x164>)
    517e:	68aa      	ldr	r2, [r5, #8]
    5180:	4293      	cmp	r3, r2
    5182:	f040 808b 	bne.w	529c <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5186:	68e3      	ldr	r3, [r4, #12]
    5188:	b94b      	cbnz	r3, 519e <z_impl_k_mutex_unlock+0x4e>
    518a:	494b      	ldr	r1, [pc, #300]	; (52b8 <z_impl_k_mutex_unlock+0x168>)
    518c:	4847      	ldr	r0, [pc, #284]	; (52ac <z_impl_k_mutex_unlock+0x15c>)
    518e:	23df      	movs	r3, #223	; 0xdf
    5190:	4a45      	ldr	r2, [pc, #276]	; (52a8 <z_impl_k_mutex_unlock+0x158>)
    5192:	f002 f821 	bl	71d8 <printk>
    5196:	21df      	movs	r1, #223	; 0xdf
    5198:	4843      	ldr	r0, [pc, #268]	; (52a8 <z_impl_k_mutex_unlock+0x158>)
    519a:	f002 f8f6 	bl	738a <assert_post_action>
    519e:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    51a2:	b163      	cbz	r3, 51be <z_impl_k_mutex_unlock+0x6e>
    51a4:	493f      	ldr	r1, [pc, #252]	; (52a4 <z_impl_k_mutex_unlock+0x154>)
    51a6:	23fe      	movs	r3, #254	; 0xfe
    51a8:	4a44      	ldr	r2, [pc, #272]	; (52bc <z_impl_k_mutex_unlock+0x16c>)
    51aa:	4840      	ldr	r0, [pc, #256]	; (52ac <z_impl_k_mutex_unlock+0x15c>)
    51ac:	f002 f814 	bl	71d8 <printk>
    51b0:	4843      	ldr	r0, [pc, #268]	; (52c0 <z_impl_k_mutex_unlock+0x170>)
    51b2:	f002 f811 	bl	71d8 <printk>
    51b6:	21fe      	movs	r1, #254	; 0xfe
    51b8:	4840      	ldr	r0, [pc, #256]	; (52bc <z_impl_k_mutex_unlock+0x16c>)
    51ba:	f002 f8e6 	bl	738a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    51be:	68ab      	ldr	r3, [r5, #8]
    51c0:	7bdb      	ldrb	r3, [r3, #15]
    51c2:	2b01      	cmp	r3, #1
    51c4:	d10c      	bne.n	51e0 <z_impl_k_mutex_unlock+0x90>
    51c6:	493f      	ldr	r1, [pc, #252]	; (52c4 <z_impl_k_mutex_unlock+0x174>)
    51c8:	23ff      	movs	r3, #255	; 0xff
    51ca:	4a3c      	ldr	r2, [pc, #240]	; (52bc <z_impl_k_mutex_unlock+0x16c>)
    51cc:	4837      	ldr	r0, [pc, #220]	; (52ac <z_impl_k_mutex_unlock+0x15c>)
    51ce:	f002 f803 	bl	71d8 <printk>
    51d2:	483b      	ldr	r0, [pc, #236]	; (52c0 <z_impl_k_mutex_unlock+0x170>)
    51d4:	f002 f800 	bl	71d8 <printk>
    51d8:	21ff      	movs	r1, #255	; 0xff
    51da:	4838      	ldr	r0, [pc, #224]	; (52bc <z_impl_k_mutex_unlock+0x16c>)
    51dc:	f002 f8d5 	bl	738a <assert_post_action>

	--_current->base.sched_locked;
    51e0:	68aa      	ldr	r2, [r5, #8]
    51e2:	7bd3      	ldrb	r3, [r2, #15]
    51e4:	3b01      	subs	r3, #1
    51e6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    51e8:	68e3      	ldr	r3, [r4, #12]
    51ea:	2b01      	cmp	r3, #1
    51ec:	d005      	beq.n	51fa <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    51ee:	3b01      	subs	r3, #1
    51f0:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    51f2:	f000 fc8d 	bl	5b10 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    51f6:	2000      	movs	r0, #0
}
    51f8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    51fa:	f04f 0320 	mov.w	r3, #32
    51fe:	f3ef 8511 	mrs	r5, BASEPRI
    5202:	f383 8811 	msr	BASEPRI, r3
    5206:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    520a:	482f      	ldr	r0, [pc, #188]	; (52c8 <z_impl_k_mutex_unlock+0x178>)
    520c:	f7ff fe6c 	bl	4ee8 <z_spin_lock_valid>
    5210:	b968      	cbnz	r0, 522e <z_impl_k_mutex_unlock+0xde>
    5212:	2381      	movs	r3, #129	; 0x81
    5214:	4a2d      	ldr	r2, [pc, #180]	; (52cc <z_impl_k_mutex_unlock+0x17c>)
    5216:	492e      	ldr	r1, [pc, #184]	; (52d0 <z_impl_k_mutex_unlock+0x180>)
    5218:	4824      	ldr	r0, [pc, #144]	; (52ac <z_impl_k_mutex_unlock+0x15c>)
    521a:	f001 ffdd 	bl	71d8 <printk>
    521e:	492a      	ldr	r1, [pc, #168]	; (52c8 <z_impl_k_mutex_unlock+0x178>)
    5220:	482c      	ldr	r0, [pc, #176]	; (52d4 <z_impl_k_mutex_unlock+0x184>)
    5222:	f001 ffd9 	bl	71d8 <printk>
    5226:	2181      	movs	r1, #129	; 0x81
    5228:	4828      	ldr	r0, [pc, #160]	; (52cc <z_impl_k_mutex_unlock+0x17c>)
    522a:	f002 f8ae 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    522e:	4826      	ldr	r0, [pc, #152]	; (52c8 <z_impl_k_mutex_unlock+0x178>)
    5230:	f7ff fe76 	bl	4f20 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5234:	68a0      	ldr	r0, [r4, #8]
    5236:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    5238:	f990 300e 	ldrsb.w	r3, [r0, #14]
    523c:	4299      	cmp	r1, r3
    523e:	d001      	beq.n	5244 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    5240:	f000 fefc 	bl	603c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5244:	4620      	mov	r0, r4
    5246:	f000 ffe3 	bl	6210 <z_unpend_first_thread>
	mutex->owner = new_owner;
    524a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    524c:	b158      	cbz	r0, 5266 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    524e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5252:	6122      	str	r2, [r4, #16]
    5254:	2200      	movs	r2, #0
    5256:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5258:	f000 fdfa 	bl	5e50 <z_ready_thread>
		z_reschedule(&lock, key);
    525c:	4629      	mov	r1, r5
    525e:	481a      	ldr	r0, [pc, #104]	; (52c8 <z_impl_k_mutex_unlock+0x178>)
    5260:	f000 f9ca 	bl	55f8 <z_reschedule>
    5264:	e7c5      	b.n	51f2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    5266:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5268:	4817      	ldr	r0, [pc, #92]	; (52c8 <z_impl_k_mutex_unlock+0x178>)
    526a:	f7ff fe4b 	bl	4f04 <z_spin_unlock_valid>
    526e:	b968      	cbnz	r0, 528c <z_impl_k_mutex_unlock+0x13c>
    5270:	23ac      	movs	r3, #172	; 0xac
    5272:	4a16      	ldr	r2, [pc, #88]	; (52cc <z_impl_k_mutex_unlock+0x17c>)
    5274:	4918      	ldr	r1, [pc, #96]	; (52d8 <z_impl_k_mutex_unlock+0x188>)
    5276:	480d      	ldr	r0, [pc, #52]	; (52ac <z_impl_k_mutex_unlock+0x15c>)
    5278:	f001 ffae 	bl	71d8 <printk>
    527c:	4912      	ldr	r1, [pc, #72]	; (52c8 <z_impl_k_mutex_unlock+0x178>)
    527e:	4817      	ldr	r0, [pc, #92]	; (52dc <z_impl_k_mutex_unlock+0x18c>)
    5280:	f001 ffaa 	bl	71d8 <printk>
    5284:	21ac      	movs	r1, #172	; 0xac
    5286:	4811      	ldr	r0, [pc, #68]	; (52cc <z_impl_k_mutex_unlock+0x17c>)
    5288:	f002 f87f 	bl	738a <assert_post_action>
	__asm__ volatile(
    528c:	f385 8811 	msr	BASEPRI, r5
    5290:	f3bf 8f6f 	isb	sy
    5294:	e7ad      	b.n	51f2 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    5296:	f06f 0015 	mvn.w	r0, #21
    529a:	e7ad      	b.n	51f8 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    529c:	f04f 30ff 	mov.w	r0, #4294967295
    52a0:	e7aa      	b.n	51f8 <z_impl_k_mutex_unlock+0xa8>
    52a2:	bf00      	nop
    52a4:	00009690 	.word	0x00009690
    52a8:	000096f4 	.word	0x000096f4
    52ac:	00008496 	.word	0x00008496
    52b0:	00009716 	.word	0x00009716
    52b4:	20000aa4 	.word	0x20000aa4
    52b8:	0000973b 	.word	0x0000973b
    52bc:	00009752 	.word	0x00009752
    52c0:	0000977d 	.word	0x0000977d
    52c4:	00009780 	.word	0x00009780
    52c8:	20000ad4 	.word	0x20000ad4
    52cc:	00008556 	.word	0x00008556
    52d0:	000085a8 	.word	0x000085a8
    52d4:	000085bd 	.word	0x000085bd
    52d8:	0000857c 	.word	0x0000857c
    52dc:	00008593 	.word	0x00008593

000052e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    52e0:	b538      	push	{r3, r4, r5, lr}
    52e2:	4604      	mov	r4, r0
	__asm__ volatile(
    52e4:	f04f 0320 	mov.w	r3, #32
    52e8:	f3ef 8511 	mrs	r5, BASEPRI
    52ec:	f383 8811 	msr	BASEPRI, r3
    52f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    52f4:	4814      	ldr	r0, [pc, #80]	; (5348 <z_impl_k_sem_give+0x68>)
    52f6:	f7ff fdf7 	bl	4ee8 <z_spin_lock_valid>
    52fa:	b968      	cbnz	r0, 5318 <z_impl_k_sem_give+0x38>
    52fc:	2381      	movs	r3, #129	; 0x81
    52fe:	4a13      	ldr	r2, [pc, #76]	; (534c <z_impl_k_sem_give+0x6c>)
    5300:	4913      	ldr	r1, [pc, #76]	; (5350 <z_impl_k_sem_give+0x70>)
    5302:	4814      	ldr	r0, [pc, #80]	; (5354 <z_impl_k_sem_give+0x74>)
    5304:	f001 ff68 	bl	71d8 <printk>
    5308:	490f      	ldr	r1, [pc, #60]	; (5348 <z_impl_k_sem_give+0x68>)
    530a:	4813      	ldr	r0, [pc, #76]	; (5358 <z_impl_k_sem_give+0x78>)
    530c:	f001 ff64 	bl	71d8 <printk>
    5310:	2181      	movs	r1, #129	; 0x81
    5312:	480e      	ldr	r0, [pc, #56]	; (534c <z_impl_k_sem_give+0x6c>)
    5314:	f002 f839 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    5318:	480b      	ldr	r0, [pc, #44]	; (5348 <z_impl_k_sem_give+0x68>)
    531a:	f7ff fe01 	bl	4f20 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    531e:	4620      	mov	r0, r4
    5320:	f000 ff76 	bl	6210 <z_unpend_first_thread>

	if (thread != NULL) {
    5324:	b148      	cbz	r0, 533a <z_impl_k_sem_give+0x5a>
    5326:	2200      	movs	r2, #0
    5328:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    532a:	f000 fd91 	bl	5e50 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    532e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5334:	4804      	ldr	r0, [pc, #16]	; (5348 <z_impl_k_sem_give+0x68>)
    5336:	f000 b95f 	b.w	55f8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    533a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    533e:	429a      	cmp	r2, r3
    5340:	bf18      	it	ne
    5342:	3301      	addne	r3, #1
    5344:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    5346:	e7f2      	b.n	532e <z_impl_k_sem_give+0x4e>
    5348:	20000ad8 	.word	0x20000ad8
    534c:	00008556 	.word	0x00008556
    5350:	000085a8 	.word	0x000085a8
    5354:	00008496 	.word	0x00008496
    5358:	000085bd 	.word	0x000085bd

0000535c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    535c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    535e:	4604      	mov	r4, r0
    5360:	4616      	mov	r6, r2
    5362:	461f      	mov	r7, r3
    5364:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5368:	b17b      	cbz	r3, 538a <z_impl_k_sem_take+0x2e>
    536a:	ea56 0307 	orrs.w	r3, r6, r7
    536e:	d00c      	beq.n	538a <z_impl_k_sem_take+0x2e>
    5370:	4935      	ldr	r1, [pc, #212]	; (5448 <z_impl_k_sem_take+0xec>)
    5372:	2379      	movs	r3, #121	; 0x79
    5374:	4a35      	ldr	r2, [pc, #212]	; (544c <z_impl_k_sem_take+0xf0>)
    5376:	4836      	ldr	r0, [pc, #216]	; (5450 <z_impl_k_sem_take+0xf4>)
    5378:	f001 ff2e 	bl	71d8 <printk>
    537c:	4835      	ldr	r0, [pc, #212]	; (5454 <z_impl_k_sem_take+0xf8>)
    537e:	f001 ff2b 	bl	71d8 <printk>
    5382:	2179      	movs	r1, #121	; 0x79
    5384:	4831      	ldr	r0, [pc, #196]	; (544c <z_impl_k_sem_take+0xf0>)
    5386:	f002 f800 	bl	738a <assert_post_action>
    538a:	f04f 0320 	mov.w	r3, #32
    538e:	f3ef 8511 	mrs	r5, BASEPRI
    5392:	f383 8811 	msr	BASEPRI, r3
    5396:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    539a:	482f      	ldr	r0, [pc, #188]	; (5458 <z_impl_k_sem_take+0xfc>)
    539c:	f7ff fda4 	bl	4ee8 <z_spin_lock_valid>
    53a0:	b968      	cbnz	r0, 53be <z_impl_k_sem_take+0x62>
    53a2:	2381      	movs	r3, #129	; 0x81
    53a4:	4a2d      	ldr	r2, [pc, #180]	; (545c <z_impl_k_sem_take+0x100>)
    53a6:	492e      	ldr	r1, [pc, #184]	; (5460 <z_impl_k_sem_take+0x104>)
    53a8:	4829      	ldr	r0, [pc, #164]	; (5450 <z_impl_k_sem_take+0xf4>)
    53aa:	f001 ff15 	bl	71d8 <printk>
    53ae:	492a      	ldr	r1, [pc, #168]	; (5458 <z_impl_k_sem_take+0xfc>)
    53b0:	482c      	ldr	r0, [pc, #176]	; (5464 <z_impl_k_sem_take+0x108>)
    53b2:	f001 ff11 	bl	71d8 <printk>
    53b6:	2181      	movs	r1, #129	; 0x81
    53b8:	4828      	ldr	r0, [pc, #160]	; (545c <z_impl_k_sem_take+0x100>)
    53ba:	f001 ffe6 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    53be:	4826      	ldr	r0, [pc, #152]	; (5458 <z_impl_k_sem_take+0xfc>)
    53c0:	f7ff fdae 	bl	4f20 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    53c4:	68a3      	ldr	r3, [r4, #8]
    53c6:	b1d3      	cbz	r3, 53fe <z_impl_k_sem_take+0xa2>
		sem->count--;
    53c8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53ca:	4823      	ldr	r0, [pc, #140]	; (5458 <z_impl_k_sem_take+0xfc>)
    53cc:	60a3      	str	r3, [r4, #8]
    53ce:	f7ff fd99 	bl	4f04 <z_spin_unlock_valid>
    53d2:	b968      	cbnz	r0, 53f0 <z_impl_k_sem_take+0x94>
    53d4:	23ac      	movs	r3, #172	; 0xac
    53d6:	4a21      	ldr	r2, [pc, #132]	; (545c <z_impl_k_sem_take+0x100>)
    53d8:	4923      	ldr	r1, [pc, #140]	; (5468 <z_impl_k_sem_take+0x10c>)
    53da:	481d      	ldr	r0, [pc, #116]	; (5450 <z_impl_k_sem_take+0xf4>)
    53dc:	f001 fefc 	bl	71d8 <printk>
    53e0:	491d      	ldr	r1, [pc, #116]	; (5458 <z_impl_k_sem_take+0xfc>)
    53e2:	4822      	ldr	r0, [pc, #136]	; (546c <z_impl_k_sem_take+0x110>)
    53e4:	f001 fef8 	bl	71d8 <printk>
    53e8:	21ac      	movs	r1, #172	; 0xac
    53ea:	481c      	ldr	r0, [pc, #112]	; (545c <z_impl_k_sem_take+0x100>)
    53ec:	f001 ffcd 	bl	738a <assert_post_action>
	__asm__ volatile(
    53f0:	f385 8811 	msr	BASEPRI, r5
    53f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    53f8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    53fa:	b003      	add	sp, #12
    53fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    53fe:	ea56 0307 	orrs.w	r3, r6, r7
    5402:	d118      	bne.n	5436 <z_impl_k_sem_take+0xda>
    5404:	4814      	ldr	r0, [pc, #80]	; (5458 <z_impl_k_sem_take+0xfc>)
    5406:	f7ff fd7d 	bl	4f04 <z_spin_unlock_valid>
    540a:	b968      	cbnz	r0, 5428 <z_impl_k_sem_take+0xcc>
    540c:	23ac      	movs	r3, #172	; 0xac
    540e:	4a13      	ldr	r2, [pc, #76]	; (545c <z_impl_k_sem_take+0x100>)
    5410:	4915      	ldr	r1, [pc, #84]	; (5468 <z_impl_k_sem_take+0x10c>)
    5412:	480f      	ldr	r0, [pc, #60]	; (5450 <z_impl_k_sem_take+0xf4>)
    5414:	f001 fee0 	bl	71d8 <printk>
    5418:	490f      	ldr	r1, [pc, #60]	; (5458 <z_impl_k_sem_take+0xfc>)
    541a:	4814      	ldr	r0, [pc, #80]	; (546c <z_impl_k_sem_take+0x110>)
    541c:	f001 fedc 	bl	71d8 <printk>
    5420:	21ac      	movs	r1, #172	; 0xac
    5422:	480e      	ldr	r0, [pc, #56]	; (545c <z_impl_k_sem_take+0x100>)
    5424:	f001 ffb1 	bl	738a <assert_post_action>
    5428:	f385 8811 	msr	BASEPRI, r5
    542c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5430:	f06f 000f 	mvn.w	r0, #15
    5434:	e7e1      	b.n	53fa <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5436:	4622      	mov	r2, r4
    5438:	4629      	mov	r1, r5
    543a:	e9cd 6700 	strd	r6, r7, [sp]
    543e:	4806      	ldr	r0, [pc, #24]	; (5458 <z_impl_k_sem_take+0xfc>)
    5440:	f000 facc 	bl	59dc <z_pend_curr>
	return ret;
    5444:	e7d9      	b.n	53fa <z_impl_k_sem_take+0x9e>
    5446:	bf00      	nop
    5448:	000097d1 	.word	0x000097d1
    544c:	000097b1 	.word	0x000097b1
    5450:	00008496 	.word	0x00008496
    5454:	0000977d 	.word	0x0000977d
    5458:	20000ad8 	.word	0x20000ad8
    545c:	00008556 	.word	0x00008556
    5460:	000085a8 	.word	0x000085a8
    5464:	000085bd 	.word	0x000085bd
    5468:	0000857c 	.word	0x0000857c
    546c:	00008593 	.word	0x00008593

00005470 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    5470:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    5472:	4c08      	ldr	r4, [pc, #32]	; (5494 <z_reset_time_slice+0x24>)
    5474:	6823      	ldr	r3, [r4, #0]
    5476:	b15b      	cbz	r3, 5490 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5478:	f7fd f9c8 	bl	280c <sys_clock_elapsed>
    547c:	4603      	mov	r3, r0
    547e:	6820      	ldr	r0, [r4, #0]
    5480:	4a05      	ldr	r2, [pc, #20]	; (5498 <z_reset_time_slice+0x28>)
    5482:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    5484:	2100      	movs	r1, #0
	}
}
    5486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    548a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    548c:	f001 bb32 	b.w	6af4 <z_set_timeout_expiry>
}
    5490:	bd10      	pop	{r4, pc}
    5492:	bf00      	nop
    5494:	20000ae8 	.word	0x20000ae8
    5498:	20000aa4 	.word	0x20000aa4

0000549c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    549e:	4604      	mov	r4, r0
    54a0:	460d      	mov	r5, r1
	__asm__ volatile(
    54a2:	f04f 0320 	mov.w	r3, #32
    54a6:	f3ef 8611 	mrs	r6, BASEPRI
    54aa:	f383 8811 	msr	BASEPRI, r3
    54ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54b2:	4823      	ldr	r0, [pc, #140]	; (5540 <k_sched_time_slice_set+0xa4>)
    54b4:	f7ff fd18 	bl	4ee8 <z_spin_lock_valid>
    54b8:	b968      	cbnz	r0, 54d6 <k_sched_time_slice_set+0x3a>
    54ba:	2381      	movs	r3, #129	; 0x81
    54bc:	4a21      	ldr	r2, [pc, #132]	; (5544 <k_sched_time_slice_set+0xa8>)
    54be:	4922      	ldr	r1, [pc, #136]	; (5548 <k_sched_time_slice_set+0xac>)
    54c0:	4822      	ldr	r0, [pc, #136]	; (554c <k_sched_time_slice_set+0xb0>)
    54c2:	f001 fe89 	bl	71d8 <printk>
    54c6:	491e      	ldr	r1, [pc, #120]	; (5540 <k_sched_time_slice_set+0xa4>)
    54c8:	4821      	ldr	r0, [pc, #132]	; (5550 <k_sched_time_slice_set+0xb4>)
    54ca:	f001 fe85 	bl	71d8 <printk>
    54ce:	2181      	movs	r1, #129	; 0x81
    54d0:	481c      	ldr	r0, [pc, #112]	; (5544 <k_sched_time_slice_set+0xa8>)
    54d2:	f001 ff5a 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    54d6:	481a      	ldr	r0, [pc, #104]	; (5540 <k_sched_time_slice_set+0xa4>)
    54d8:	f7ff fd22 	bl	4f20 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
    54dc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    54e0:	2200      	movs	r2, #0
    54e2:	f240 30e7 	movw	r0, #999	; 0x3e7
    54e6:	2100      	movs	r1, #0
    54e8:	4b1a      	ldr	r3, [pc, #104]	; (5554 <k_sched_time_slice_set+0xb8>)
    54ea:	fbe7 0104 	umlal	r0, r1, r7, r4
    54ee:	611a      	str	r2, [r3, #16]
    54f0:	2300      	movs	r3, #0
    54f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    54f6:	f7fa fe2d 	bl	154 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    54fa:	2c00      	cmp	r4, #0
    54fc:	4b16      	ldr	r3, [pc, #88]	; (5558 <k_sched_time_slice_set+0xbc>)
    54fe:	dc1b      	bgt.n	5538 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    5500:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5502:	4b16      	ldr	r3, [pc, #88]	; (555c <k_sched_time_slice_set+0xc0>)
    5504:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    5506:	f7ff ffb3 	bl	5470 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    550a:	480d      	ldr	r0, [pc, #52]	; (5540 <k_sched_time_slice_set+0xa4>)
    550c:	f7ff fcfa 	bl	4f04 <z_spin_unlock_valid>
    5510:	b968      	cbnz	r0, 552e <k_sched_time_slice_set+0x92>
    5512:	23ac      	movs	r3, #172	; 0xac
    5514:	4a0b      	ldr	r2, [pc, #44]	; (5544 <k_sched_time_slice_set+0xa8>)
    5516:	4912      	ldr	r1, [pc, #72]	; (5560 <k_sched_time_slice_set+0xc4>)
    5518:	480c      	ldr	r0, [pc, #48]	; (554c <k_sched_time_slice_set+0xb0>)
    551a:	f001 fe5d 	bl	71d8 <printk>
    551e:	4908      	ldr	r1, [pc, #32]	; (5540 <k_sched_time_slice_set+0xa4>)
    5520:	4810      	ldr	r0, [pc, #64]	; (5564 <k_sched_time_slice_set+0xc8>)
    5522:	f001 fe59 	bl	71d8 <printk>
    5526:	21ac      	movs	r1, #172	; 0xac
    5528:	4806      	ldr	r0, [pc, #24]	; (5544 <k_sched_time_slice_set+0xa8>)
    552a:	f001 ff2e 	bl	738a <assert_post_action>
	__asm__ volatile(
    552e:	f386 8811 	msr	BASEPRI, r6
    5532:	f3bf 8f6f 	isb	sy
	}
}
    5536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    5538:	2802      	cmp	r0, #2
    553a:	bfb8      	it	lt
    553c:	2002      	movlt	r0, #2
    553e:	e7df      	b.n	5500 <k_sched_time_slice_set+0x64>
    5540:	20000ae0 	.word	0x20000ae0
    5544:	00008556 	.word	0x00008556
    5548:	000085a8 	.word	0x000085a8
    554c:	00008496 	.word	0x00008496
    5550:	000085bd 	.word	0x000085bd
    5554:	20000aa4 	.word	0x20000aa4
    5558:	20000ae8 	.word	0x20000ae8
    555c:	20000ae4 	.word	0x20000ae4
    5560:	0000857c 	.word	0x0000857c
    5564:	00008593 	.word	0x00008593

00005568 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    5568:	b538      	push	{r3, r4, r5, lr}
    556a:	4604      	mov	r4, r0
	__asm__ volatile(
    556c:	f04f 0320 	mov.w	r3, #32
    5570:	f3ef 8511 	mrs	r5, BASEPRI
    5574:	f383 8811 	msr	BASEPRI, r3
    5578:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    557c:	4817      	ldr	r0, [pc, #92]	; (55dc <z_unpend_thread_no_timeout+0x74>)
    557e:	f7ff fcb3 	bl	4ee8 <z_spin_lock_valid>
    5582:	b968      	cbnz	r0, 55a0 <z_unpend_thread_no_timeout+0x38>
    5584:	2381      	movs	r3, #129	; 0x81
    5586:	4a16      	ldr	r2, [pc, #88]	; (55e0 <z_unpend_thread_no_timeout+0x78>)
    5588:	4916      	ldr	r1, [pc, #88]	; (55e4 <z_unpend_thread_no_timeout+0x7c>)
    558a:	4817      	ldr	r0, [pc, #92]	; (55e8 <z_unpend_thread_no_timeout+0x80>)
    558c:	f001 fe24 	bl	71d8 <printk>
    5590:	4912      	ldr	r1, [pc, #72]	; (55dc <z_unpend_thread_no_timeout+0x74>)
    5592:	4816      	ldr	r0, [pc, #88]	; (55ec <z_unpend_thread_no_timeout+0x84>)
    5594:	f001 fe20 	bl	71d8 <printk>
    5598:	2181      	movs	r1, #129	; 0x81
    559a:	4811      	ldr	r0, [pc, #68]	; (55e0 <z_unpend_thread_no_timeout+0x78>)
    559c:	f001 fef5 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    55a0:	480e      	ldr	r0, [pc, #56]	; (55dc <z_unpend_thread_no_timeout+0x74>)
    55a2:	f7ff fcbd 	bl	4f20 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    55a6:	4620      	mov	r0, r4
    55a8:	f000 f900 	bl	57ac <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55ac:	480b      	ldr	r0, [pc, #44]	; (55dc <z_unpend_thread_no_timeout+0x74>)
    55ae:	f7ff fca9 	bl	4f04 <z_spin_unlock_valid>
    55b2:	b968      	cbnz	r0, 55d0 <z_unpend_thread_no_timeout+0x68>
    55b4:	23ac      	movs	r3, #172	; 0xac
    55b6:	4a0a      	ldr	r2, [pc, #40]	; (55e0 <z_unpend_thread_no_timeout+0x78>)
    55b8:	490d      	ldr	r1, [pc, #52]	; (55f0 <z_unpend_thread_no_timeout+0x88>)
    55ba:	480b      	ldr	r0, [pc, #44]	; (55e8 <z_unpend_thread_no_timeout+0x80>)
    55bc:	f001 fe0c 	bl	71d8 <printk>
    55c0:	4906      	ldr	r1, [pc, #24]	; (55dc <z_unpend_thread_no_timeout+0x74>)
    55c2:	480c      	ldr	r0, [pc, #48]	; (55f4 <z_unpend_thread_no_timeout+0x8c>)
    55c4:	f001 fe08 	bl	71d8 <printk>
    55c8:	21ac      	movs	r1, #172	; 0xac
    55ca:	4805      	ldr	r0, [pc, #20]	; (55e0 <z_unpend_thread_no_timeout+0x78>)
    55cc:	f001 fedd 	bl	738a <assert_post_action>
	__asm__ volatile(
    55d0:	f385 8811 	msr	BASEPRI, r5
    55d4:	f3bf 8f6f 	isb	sy
	}
}
    55d8:	bd38      	pop	{r3, r4, r5, pc}
    55da:	bf00      	nop
    55dc:	20000ae0 	.word	0x20000ae0
    55e0:	00008556 	.word	0x00008556
    55e4:	000085a8 	.word	0x000085a8
    55e8:	00008496 	.word	0x00008496
    55ec:	000085bd 	.word	0x000085bd
    55f0:	0000857c 	.word	0x0000857c
    55f4:	00008593 	.word	0x00008593

000055f8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    55f8:	b538      	push	{r3, r4, r5, lr}
    55fa:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    55fc:	460d      	mov	r5, r1
    55fe:	b9e9      	cbnz	r1, 563c <z_reschedule+0x44>
    5600:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    5604:	b9d3      	cbnz	r3, 563c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    5606:	4b19      	ldr	r3, [pc, #100]	; (566c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    5608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    560a:	689b      	ldr	r3, [r3, #8]
    560c:	429a      	cmp	r2, r3
    560e:	d015      	beq.n	563c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5610:	f7ff fc78 	bl	4f04 <z_spin_unlock_valid>
    5614:	b968      	cbnz	r0, 5632 <z_reschedule+0x3a>
    5616:	23c3      	movs	r3, #195	; 0xc3
    5618:	4a15      	ldr	r2, [pc, #84]	; (5670 <z_reschedule+0x78>)
    561a:	4916      	ldr	r1, [pc, #88]	; (5674 <z_reschedule+0x7c>)
    561c:	4816      	ldr	r0, [pc, #88]	; (5678 <z_reschedule+0x80>)
    561e:	f001 fddb 	bl	71d8 <printk>
    5622:	4621      	mov	r1, r4
    5624:	4815      	ldr	r0, [pc, #84]	; (567c <z_reschedule+0x84>)
    5626:	f001 fdd7 	bl	71d8 <printk>
    562a:	21c3      	movs	r1, #195	; 0xc3
    562c:	4810      	ldr	r0, [pc, #64]	; (5670 <z_reschedule+0x78>)
    562e:	f001 feac 	bl	738a <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    5636:	2000      	movs	r0, #0
    5638:	f7fd ba24 	b.w	2a84 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    563c:	4620      	mov	r0, r4
    563e:	f7ff fc61 	bl	4f04 <z_spin_unlock_valid>
    5642:	b968      	cbnz	r0, 5660 <z_reschedule+0x68>
    5644:	23ac      	movs	r3, #172	; 0xac
    5646:	4a0a      	ldr	r2, [pc, #40]	; (5670 <z_reschedule+0x78>)
    5648:	490a      	ldr	r1, [pc, #40]	; (5674 <z_reschedule+0x7c>)
    564a:	480b      	ldr	r0, [pc, #44]	; (5678 <z_reschedule+0x80>)
    564c:	f001 fdc4 	bl	71d8 <printk>
    5650:	4621      	mov	r1, r4
    5652:	480a      	ldr	r0, [pc, #40]	; (567c <z_reschedule+0x84>)
    5654:	f001 fdc0 	bl	71d8 <printk>
    5658:	21ac      	movs	r1, #172	; 0xac
    565a:	4805      	ldr	r0, [pc, #20]	; (5670 <z_reschedule+0x78>)
    565c:	f001 fe95 	bl	738a <assert_post_action>
    5660:	f385 8811 	msr	BASEPRI, r5
    5664:	f3bf 8f6f 	isb	sy
    5668:	bd38      	pop	{r3, r4, r5, pc}
    566a:	bf00      	nop
    566c:	20000aa4 	.word	0x20000aa4
    5670:	00008556 	.word	0x00008556
    5674:	0000857c 	.word	0x0000857c
    5678:	00008496 	.word	0x00008496
    567c:	00008593 	.word	0x00008593

00005680 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5680:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5682:	f04f 0320 	mov.w	r3, #32
    5686:	f3ef 8511 	mrs	r5, BASEPRI
    568a:	f383 8811 	msr	BASEPRI, r3
    568e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5692:	4829      	ldr	r0, [pc, #164]	; (5738 <k_sched_lock+0xb8>)
    5694:	f7ff fc28 	bl	4ee8 <z_spin_lock_valid>
    5698:	b968      	cbnz	r0, 56b6 <k_sched_lock+0x36>
    569a:	2381      	movs	r3, #129	; 0x81
    569c:	4a27      	ldr	r2, [pc, #156]	; (573c <k_sched_lock+0xbc>)
    569e:	4928      	ldr	r1, [pc, #160]	; (5740 <k_sched_lock+0xc0>)
    56a0:	4828      	ldr	r0, [pc, #160]	; (5744 <k_sched_lock+0xc4>)
    56a2:	f001 fd99 	bl	71d8 <printk>
    56a6:	4924      	ldr	r1, [pc, #144]	; (5738 <k_sched_lock+0xb8>)
    56a8:	4827      	ldr	r0, [pc, #156]	; (5748 <k_sched_lock+0xc8>)
    56aa:	f001 fd95 	bl	71d8 <printk>
    56ae:	2181      	movs	r1, #129	; 0x81
    56b0:	4822      	ldr	r0, [pc, #136]	; (573c <k_sched_lock+0xbc>)
    56b2:	f001 fe6a 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    56b6:	4820      	ldr	r0, [pc, #128]	; (5738 <k_sched_lock+0xb8>)
    56b8:	f7ff fc32 	bl	4f20 <z_spin_lock_set_owner>
    56bc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    56c0:	b163      	cbz	r3, 56dc <k_sched_lock+0x5c>
    56c2:	4922      	ldr	r1, [pc, #136]	; (574c <k_sched_lock+0xcc>)
    56c4:	23fe      	movs	r3, #254	; 0xfe
    56c6:	4a22      	ldr	r2, [pc, #136]	; (5750 <k_sched_lock+0xd0>)
    56c8:	481e      	ldr	r0, [pc, #120]	; (5744 <k_sched_lock+0xc4>)
    56ca:	f001 fd85 	bl	71d8 <printk>
    56ce:	4821      	ldr	r0, [pc, #132]	; (5754 <k_sched_lock+0xd4>)
    56d0:	f001 fd82 	bl	71d8 <printk>
    56d4:	21fe      	movs	r1, #254	; 0xfe
    56d6:	481e      	ldr	r0, [pc, #120]	; (5750 <k_sched_lock+0xd0>)
    56d8:	f001 fe57 	bl	738a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    56dc:	4c1e      	ldr	r4, [pc, #120]	; (5758 <k_sched_lock+0xd8>)
    56de:	68a2      	ldr	r2, [r4, #8]
    56e0:	7bd2      	ldrb	r2, [r2, #15]
    56e2:	2a01      	cmp	r2, #1
    56e4:	d10c      	bne.n	5700 <k_sched_lock+0x80>
    56e6:	491d      	ldr	r1, [pc, #116]	; (575c <k_sched_lock+0xdc>)
    56e8:	23ff      	movs	r3, #255	; 0xff
    56ea:	4a19      	ldr	r2, [pc, #100]	; (5750 <k_sched_lock+0xd0>)
    56ec:	4815      	ldr	r0, [pc, #84]	; (5744 <k_sched_lock+0xc4>)
    56ee:	f001 fd73 	bl	71d8 <printk>
    56f2:	4818      	ldr	r0, [pc, #96]	; (5754 <k_sched_lock+0xd4>)
    56f4:	f001 fd70 	bl	71d8 <printk>
    56f8:	21ff      	movs	r1, #255	; 0xff
    56fa:	4815      	ldr	r0, [pc, #84]	; (5750 <k_sched_lock+0xd0>)
    56fc:	f001 fe45 	bl	738a <assert_post_action>
	--_current->base.sched_locked;
    5700:	68a2      	ldr	r2, [r4, #8]
    5702:	7bd3      	ldrb	r3, [r2, #15]
    5704:	3b01      	subs	r3, #1
    5706:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5708:	480b      	ldr	r0, [pc, #44]	; (5738 <k_sched_lock+0xb8>)
    570a:	f7ff fbfb 	bl	4f04 <z_spin_unlock_valid>
    570e:	b968      	cbnz	r0, 572c <k_sched_lock+0xac>
    5710:	23ac      	movs	r3, #172	; 0xac
    5712:	4a0a      	ldr	r2, [pc, #40]	; (573c <k_sched_lock+0xbc>)
    5714:	4912      	ldr	r1, [pc, #72]	; (5760 <k_sched_lock+0xe0>)
    5716:	480b      	ldr	r0, [pc, #44]	; (5744 <k_sched_lock+0xc4>)
    5718:	f001 fd5e 	bl	71d8 <printk>
    571c:	4906      	ldr	r1, [pc, #24]	; (5738 <k_sched_lock+0xb8>)
    571e:	4811      	ldr	r0, [pc, #68]	; (5764 <k_sched_lock+0xe4>)
    5720:	f001 fd5a 	bl	71d8 <printk>
    5724:	21ac      	movs	r1, #172	; 0xac
    5726:	4805      	ldr	r0, [pc, #20]	; (573c <k_sched_lock+0xbc>)
    5728:	f001 fe2f 	bl	738a <assert_post_action>
	__asm__ volatile(
    572c:	f385 8811 	msr	BASEPRI, r5
    5730:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5734:	bd38      	pop	{r3, r4, r5, pc}
    5736:	bf00      	nop
    5738:	20000ae0 	.word	0x20000ae0
    573c:	00008556 	.word	0x00008556
    5740:	000085a8 	.word	0x000085a8
    5744:	00008496 	.word	0x00008496
    5748:	000085bd 	.word	0x000085bd
    574c:	00009690 	.word	0x00009690
    5750:	00009752 	.word	0x00009752
    5754:	0000977d 	.word	0x0000977d
    5758:	20000aa4 	.word	0x20000aa4
    575c:	00009780 	.word	0x00009780
    5760:	0000857c 	.word	0x0000857c
    5764:	00008593 	.word	0x00008593

00005768 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5768:	4b0c      	ldr	r3, [pc, #48]	; (579c <z_priq_dumb_remove+0x34>)
{
    576a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    576c:	4299      	cmp	r1, r3
{
    576e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5770:	d10b      	bne.n	578a <z_priq_dumb_remove+0x22>
    5772:	490b      	ldr	r1, [pc, #44]	; (57a0 <z_priq_dumb_remove+0x38>)
    5774:	480b      	ldr	r0, [pc, #44]	; (57a4 <z_priq_dumb_remove+0x3c>)
    5776:	f44f 7371 	mov.w	r3, #964	; 0x3c4
    577a:	4a0b      	ldr	r2, [pc, #44]	; (57a8 <z_priq_dumb_remove+0x40>)
    577c:	f001 fd2c 	bl	71d8 <printk>
    5780:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    5784:	4808      	ldr	r0, [pc, #32]	; (57a8 <z_priq_dumb_remove+0x40>)
    5786:	f001 fe00 	bl	738a <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    578a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    578e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5790:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5792:	2300      	movs	r3, #0
	node->prev = NULL;
    5794:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5798:	bd10      	pop	{r4, pc}
    579a:	bf00      	nop
    579c:	20000240 	.word	0x20000240
    57a0:	00009840 	.word	0x00009840
    57a4:	00008496 	.word	0x00008496
    57a8:	0000981e 	.word	0x0000981e

000057ac <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    57ac:	6883      	ldr	r3, [r0, #8]
{
    57ae:	b510      	push	{r4, lr}
    57b0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    57b2:	b95b      	cbnz	r3, 57cc <unpend_thread_no_timeout+0x20>
    57b4:	490b      	ldr	r1, [pc, #44]	; (57e4 <unpend_thread_no_timeout+0x38>)
    57b6:	480c      	ldr	r0, [pc, #48]	; (57e8 <unpend_thread_no_timeout+0x3c>)
    57b8:	f240 234f 	movw	r3, #591	; 0x24f
    57bc:	4a0b      	ldr	r2, [pc, #44]	; (57ec <unpend_thread_no_timeout+0x40>)
    57be:	f001 fd0b 	bl	71d8 <printk>
    57c2:	f240 214f 	movw	r1, #591	; 0x24f
    57c6:	4809      	ldr	r0, [pc, #36]	; (57ec <unpend_thread_no_timeout+0x40>)
    57c8:	f001 fddf 	bl	738a <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    57cc:	4621      	mov	r1, r4
    57ce:	68a0      	ldr	r0, [r4, #8]
    57d0:	f7ff ffca 	bl	5768 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    57d4:	7b63      	ldrb	r3, [r4, #13]
    57d6:	f023 0302 	bic.w	r3, r3, #2
    57da:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    57dc:	2300      	movs	r3, #0
    57de:	60a3      	str	r3, [r4, #8]
}
    57e0:	bd10      	pop	{r4, pc}
    57e2:	bf00      	nop
    57e4:	00009861 	.word	0x00009861
    57e8:	00008496 	.word	0x00008496
    57ec:	0000981e 	.word	0x0000981e

000057f0 <update_cache>:
{
    57f0:	b538      	push	{r3, r4, r5, lr}
    57f2:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    57f4:	4814      	ldr	r0, [pc, #80]	; (5848 <update_cache+0x58>)
    57f6:	f002 fb14 	bl	7e22 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    57fa:	4d14      	ldr	r5, [pc, #80]	; (584c <update_cache+0x5c>)
    57fc:	4604      	mov	r4, r0
    57fe:	b900      	cbnz	r0, 5802 <update_cache+0x12>
    5800:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    5802:	b9ca      	cbnz	r2, 5838 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    5804:	68ab      	ldr	r3, [r5, #8]
    5806:	b963      	cbnz	r3, 5822 <update_cache+0x32>
    5808:	4911      	ldr	r1, [pc, #68]	; (5850 <update_cache+0x60>)
    580a:	2385      	movs	r3, #133	; 0x85
    580c:	4a11      	ldr	r2, [pc, #68]	; (5854 <update_cache+0x64>)
    580e:	4812      	ldr	r0, [pc, #72]	; (5858 <update_cache+0x68>)
    5810:	f001 fce2 	bl	71d8 <printk>
    5814:	4811      	ldr	r0, [pc, #68]	; (585c <update_cache+0x6c>)
    5816:	f001 fcdf 	bl	71d8 <printk>
    581a:	2185      	movs	r1, #133	; 0x85
    581c:	480d      	ldr	r0, [pc, #52]	; (5854 <update_cache+0x64>)
    581e:	f001 fdb4 	bl	738a <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5822:	68ab      	ldr	r3, [r5, #8]
    5824:	7b5a      	ldrb	r2, [r3, #13]
    5826:	06d2      	lsls	r2, r2, #27
    5828:	d106      	bne.n	5838 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    582a:	69a2      	ldr	r2, [r4, #24]
    582c:	b922      	cbnz	r2, 5838 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    582e:	89da      	ldrh	r2, [r3, #14]
    5830:	2a7f      	cmp	r2, #127	; 0x7f
    5832:	d901      	bls.n	5838 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5834:	626b      	str	r3, [r5, #36]	; 0x24
}
    5836:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5838:	68ab      	ldr	r3, [r5, #8]
    583a:	42a3      	cmp	r3, r4
    583c:	d001      	beq.n	5842 <update_cache+0x52>
			z_reset_time_slice();
    583e:	f7ff fe17 	bl	5470 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5842:	626c      	str	r4, [r5, #36]	; 0x24
}
    5844:	e7f7      	b.n	5836 <update_cache+0x46>
    5846:	bf00      	nop
    5848:	20000acc 	.word	0x20000acc
    584c:	20000aa4 	.word	0x20000aa4
    5850:	00009878 	.word	0x00009878
    5854:	0000981e 	.word	0x0000981e
    5858:	00008496 	.word	0x00008496
    585c:	0000977d 	.word	0x0000977d

00005860 <unready_thread>:
{
    5860:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5862:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5866:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5868:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    586a:	7b43      	ldrb	r3, [r0, #13]
    586c:	da06      	bge.n	587c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    586e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    5872:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5874:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    5876:	4806      	ldr	r0, [pc, #24]	; (5890 <unready_thread+0x30>)
    5878:	f7ff ff76 	bl	5768 <z_priq_dumb_remove>
	update_cache(thread == _current);
    587c:	4b05      	ldr	r3, [pc, #20]	; (5894 <unready_thread+0x34>)
    587e:	6898      	ldr	r0, [r3, #8]
    5880:	1b03      	subs	r3, r0, r4
    5882:	4258      	negs	r0, r3
    5884:	4158      	adcs	r0, r3
}
    5886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    588a:	f7ff bfb1 	b.w	57f0 <update_cache>
    588e:	bf00      	nop
    5890:	20000acc 	.word	0x20000acc
    5894:	20000aa4 	.word	0x20000aa4

00005898 <add_to_waitq_locked>:
{
    5898:	b538      	push	{r3, r4, r5, lr}
    589a:	4604      	mov	r4, r0
    589c:	460d      	mov	r5, r1
	unready_thread(thread);
    589e:	f7ff ffdf 	bl	5860 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    58a2:	7b63      	ldrb	r3, [r4, #13]
    58a4:	f043 0302 	orr.w	r3, r3, #2
    58a8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    58aa:	b32d      	cbz	r5, 58f8 <add_to_waitq_locked+0x60>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    58ac:	4b18      	ldr	r3, [pc, #96]	; (5910 <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
    58ae:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    58b0:	429c      	cmp	r4, r3
    58b2:	d10b      	bne.n	58cc <add_to_waitq_locked+0x34>
    58b4:	4917      	ldr	r1, [pc, #92]	; (5914 <add_to_waitq_locked+0x7c>)
    58b6:	4818      	ldr	r0, [pc, #96]	; (5918 <add_to_waitq_locked+0x80>)
    58b8:	f240 33b5 	movw	r3, #949	; 0x3b5
    58bc:	4a17      	ldr	r2, [pc, #92]	; (591c <add_to_waitq_locked+0x84>)
    58be:	f001 fc8b 	bl	71d8 <printk>
    58c2:	f240 31b5 	movw	r1, #949	; 0x3b5
    58c6:	4815      	ldr	r0, [pc, #84]	; (591c <add_to_waitq_locked+0x84>)
    58c8:	f001 fd5f 	bl	738a <assert_post_action>
	return list->head == list;
    58cc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58ce:	429d      	cmp	r5, r3
    58d0:	bf08      	it	eq
    58d2:	2300      	moveq	r3, #0
    58d4:	2b00      	cmp	r3, #0
    58d6:	bf38      	it	cc
    58d8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    58da:	b19b      	cbz	r3, 5904 <add_to_waitq_locked+0x6c>
	int32_t b1 = thread_1->base.prio;
    58dc:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    58e0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    58e4:	4291      	cmp	r1, r2
    58e6:	d008      	beq.n	58fa <add_to_waitq_locked+0x62>
		return b2 - b1;
    58e8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    58ea:	2a00      	cmp	r2, #0
    58ec:	dd05      	ble.n	58fa <add_to_waitq_locked+0x62>
	sys_dnode_t *const prev = successor->prev;
    58ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    58f0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    58f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    58f6:	605c      	str	r4, [r3, #4]
}
    58f8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    58fa:	686a      	ldr	r2, [r5, #4]
    58fc:	4293      	cmp	r3, r2
    58fe:	d001      	beq.n	5904 <add_to_waitq_locked+0x6c>
    5900:	681b      	ldr	r3, [r3, #0]
    5902:	e7ea      	b.n	58da <add_to_waitq_locked+0x42>
	sys_dnode_t *const tail = list->tail;
    5904:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5906:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    590a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    590c:	606c      	str	r4, [r5, #4]
    590e:	e7f3      	b.n	58f8 <add_to_waitq_locked+0x60>
    5910:	20000240 	.word	0x20000240
    5914:	00009840 	.word	0x00009840
    5918:	00008496 	.word	0x00008496
    591c:	0000981e 	.word	0x0000981e

00005920 <pend>:
{
    5920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5924:	4604      	mov	r4, r0
    5926:	460d      	mov	r5, r1
    5928:	4616      	mov	r6, r2
    592a:	461f      	mov	r7, r3
	__asm__ volatile(
    592c:	f04f 0320 	mov.w	r3, #32
    5930:	f3ef 8811 	mrs	r8, BASEPRI
    5934:	f383 8811 	msr	BASEPRI, r3
    5938:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    593c:	481f      	ldr	r0, [pc, #124]	; (59bc <pend+0x9c>)
    593e:	f7ff fad3 	bl	4ee8 <z_spin_lock_valid>
    5942:	b968      	cbnz	r0, 5960 <pend+0x40>
    5944:	2381      	movs	r3, #129	; 0x81
    5946:	4a1e      	ldr	r2, [pc, #120]	; (59c0 <pend+0xa0>)
    5948:	491e      	ldr	r1, [pc, #120]	; (59c4 <pend+0xa4>)
    594a:	481f      	ldr	r0, [pc, #124]	; (59c8 <pend+0xa8>)
    594c:	f001 fc44 	bl	71d8 <printk>
    5950:	491a      	ldr	r1, [pc, #104]	; (59bc <pend+0x9c>)
    5952:	481e      	ldr	r0, [pc, #120]	; (59cc <pend+0xac>)
    5954:	f001 fc40 	bl	71d8 <printk>
    5958:	2181      	movs	r1, #129	; 0x81
    595a:	4819      	ldr	r0, [pc, #100]	; (59c0 <pend+0xa0>)
    595c:	f001 fd15 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    5960:	4816      	ldr	r0, [pc, #88]	; (59bc <pend+0x9c>)
    5962:	f7ff fadd 	bl	4f20 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5966:	4620      	mov	r0, r4
    5968:	4629      	mov	r1, r5
    596a:	f7ff ff95 	bl	5898 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    596e:	4813      	ldr	r0, [pc, #76]	; (59bc <pend+0x9c>)
    5970:	f7ff fac8 	bl	4f04 <z_spin_unlock_valid>
    5974:	b968      	cbnz	r0, 5992 <pend+0x72>
    5976:	23ac      	movs	r3, #172	; 0xac
    5978:	4a11      	ldr	r2, [pc, #68]	; (59c0 <pend+0xa0>)
    597a:	4915      	ldr	r1, [pc, #84]	; (59d0 <pend+0xb0>)
    597c:	4812      	ldr	r0, [pc, #72]	; (59c8 <pend+0xa8>)
    597e:	f001 fc2b 	bl	71d8 <printk>
    5982:	490e      	ldr	r1, [pc, #56]	; (59bc <pend+0x9c>)
    5984:	4813      	ldr	r0, [pc, #76]	; (59d4 <pend+0xb4>)
    5986:	f001 fc27 	bl	71d8 <printk>
    598a:	21ac      	movs	r1, #172	; 0xac
    598c:	480c      	ldr	r0, [pc, #48]	; (59c0 <pend+0xa0>)
    598e:	f001 fcfc 	bl	738a <assert_post_action>
	__asm__ volatile(
    5992:	f388 8811 	msr	BASEPRI, r8
    5996:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    599a:	1c7b      	adds	r3, r7, #1
    599c:	bf08      	it	eq
    599e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    59a2:	d008      	beq.n	59b6 <pend+0x96>
    59a4:	4632      	mov	r2, r6
    59a6:	463b      	mov	r3, r7
    59a8:	f104 0018 	add.w	r0, r4, #24
    59ac:	490a      	ldr	r1, [pc, #40]	; (59d8 <pend+0xb8>)
}
    59ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59b2:	f000 bf35 	b.w	6820 <z_add_timeout>
    59b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59ba:	bf00      	nop
    59bc:	20000ae0 	.word	0x20000ae0
    59c0:	00008556 	.word	0x00008556
    59c4:	000085a8 	.word	0x000085a8
    59c8:	00008496 	.word	0x00008496
    59cc:	000085bd 	.word	0x000085bd
    59d0:	0000857c 	.word	0x0000857c
    59d4:	00008593 	.word	0x00008593
    59d8:	00005f89 	.word	0x00005f89

000059dc <z_pend_curr>:
{
    59dc:	b538      	push	{r3, r4, r5, lr}
    59de:	4604      	mov	r4, r0
	pending_current = _current;
    59e0:	4b10      	ldr	r3, [pc, #64]	; (5a24 <z_pend_curr+0x48>)
{
    59e2:	460d      	mov	r5, r1
	pending_current = _current;
    59e4:	6898      	ldr	r0, [r3, #8]
    59e6:	4b10      	ldr	r3, [pc, #64]	; (5a28 <z_pend_curr+0x4c>)
{
    59e8:	4611      	mov	r1, r2
	pending_current = _current;
    59ea:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    59ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    59f0:	f7ff ff96 	bl	5920 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59f4:	4620      	mov	r0, r4
    59f6:	f7ff fa85 	bl	4f04 <z_spin_unlock_valid>
    59fa:	b968      	cbnz	r0, 5a18 <z_pend_curr+0x3c>
    59fc:	23c3      	movs	r3, #195	; 0xc3
    59fe:	4a0b      	ldr	r2, [pc, #44]	; (5a2c <z_pend_curr+0x50>)
    5a00:	490b      	ldr	r1, [pc, #44]	; (5a30 <z_pend_curr+0x54>)
    5a02:	480c      	ldr	r0, [pc, #48]	; (5a34 <z_pend_curr+0x58>)
    5a04:	f001 fbe8 	bl	71d8 <printk>
    5a08:	4621      	mov	r1, r4
    5a0a:	480b      	ldr	r0, [pc, #44]	; (5a38 <z_pend_curr+0x5c>)
    5a0c:	f001 fbe4 	bl	71d8 <printk>
    5a10:	21c3      	movs	r1, #195	; 0xc3
    5a12:	4806      	ldr	r0, [pc, #24]	; (5a2c <z_pend_curr+0x50>)
    5a14:	f001 fcb9 	bl	738a <assert_post_action>
    5a18:	4628      	mov	r0, r5
}
    5a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5a1e:	f7fd b831 	b.w	2a84 <arch_swap>
    5a22:	bf00      	nop
    5a24:	20000aa4 	.word	0x20000aa4
    5a28:	20000adc 	.word	0x20000adc
    5a2c:	00008556 	.word	0x00008556
    5a30:	0000857c 	.word	0x0000857c
    5a34:	00008496 	.word	0x00008496
    5a38:	00008593 	.word	0x00008593

00005a3c <z_impl_k_thread_suspend>:
{
    5a3c:	b570      	push	{r4, r5, r6, lr}
    5a3e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5a40:	3018      	adds	r0, #24
    5a42:	f000 ffc1 	bl	69c8 <z_abort_timeout>
	__asm__ volatile(
    5a46:	f04f 0320 	mov.w	r3, #32
    5a4a:	f3ef 8611 	mrs	r6, BASEPRI
    5a4e:	f383 8811 	msr	BASEPRI, r3
    5a52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a56:	4825      	ldr	r0, [pc, #148]	; (5aec <z_impl_k_thread_suspend+0xb0>)
    5a58:	f7ff fa46 	bl	4ee8 <z_spin_lock_valid>
    5a5c:	b968      	cbnz	r0, 5a7a <z_impl_k_thread_suspend+0x3e>
    5a5e:	2381      	movs	r3, #129	; 0x81
    5a60:	4a23      	ldr	r2, [pc, #140]	; (5af0 <z_impl_k_thread_suspend+0xb4>)
    5a62:	4924      	ldr	r1, [pc, #144]	; (5af4 <z_impl_k_thread_suspend+0xb8>)
    5a64:	4824      	ldr	r0, [pc, #144]	; (5af8 <z_impl_k_thread_suspend+0xbc>)
    5a66:	f001 fbb7 	bl	71d8 <printk>
    5a6a:	4920      	ldr	r1, [pc, #128]	; (5aec <z_impl_k_thread_suspend+0xb0>)
    5a6c:	4823      	ldr	r0, [pc, #140]	; (5afc <z_impl_k_thread_suspend+0xc0>)
    5a6e:	f001 fbb3 	bl	71d8 <printk>
    5a72:	2181      	movs	r1, #129	; 0x81
    5a74:	481e      	ldr	r0, [pc, #120]	; (5af0 <z_impl_k_thread_suspend+0xb4>)
    5a76:	f001 fc88 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    5a7a:	481c      	ldr	r0, [pc, #112]	; (5aec <z_impl_k_thread_suspend+0xb0>)
    5a7c:	f7ff fa50 	bl	4f20 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    5a80:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5a84:	7b63      	ldrb	r3, [r4, #13]
    5a86:	2a00      	cmp	r2, #0
    5a88:	da06      	bge.n	5a98 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    5a8e:	4621      	mov	r1, r4
    5a90:	481b      	ldr	r0, [pc, #108]	; (5b00 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a92:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    5a94:	f7ff fe68 	bl	5768 <z_priq_dumb_remove>
		update_cache(thread == _current);
    5a98:	4d1a      	ldr	r5, [pc, #104]	; (5b04 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5a9a:	7b63      	ldrb	r3, [r4, #13]
    5a9c:	68a8      	ldr	r0, [r5, #8]
    5a9e:	f043 0310 	orr.w	r3, r3, #16
    5aa2:	7363      	strb	r3, [r4, #13]
    5aa4:	1b03      	subs	r3, r0, r4
    5aa6:	4258      	negs	r0, r3
    5aa8:	4158      	adcs	r0, r3
    5aaa:	f7ff fea1 	bl	57f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5aae:	480f      	ldr	r0, [pc, #60]	; (5aec <z_impl_k_thread_suspend+0xb0>)
    5ab0:	f7ff fa28 	bl	4f04 <z_spin_unlock_valid>
    5ab4:	b968      	cbnz	r0, 5ad2 <z_impl_k_thread_suspend+0x96>
    5ab6:	23ac      	movs	r3, #172	; 0xac
    5ab8:	4a0d      	ldr	r2, [pc, #52]	; (5af0 <z_impl_k_thread_suspend+0xb4>)
    5aba:	4913      	ldr	r1, [pc, #76]	; (5b08 <z_impl_k_thread_suspend+0xcc>)
    5abc:	480e      	ldr	r0, [pc, #56]	; (5af8 <z_impl_k_thread_suspend+0xbc>)
    5abe:	f001 fb8b 	bl	71d8 <printk>
    5ac2:	490a      	ldr	r1, [pc, #40]	; (5aec <z_impl_k_thread_suspend+0xb0>)
    5ac4:	4811      	ldr	r0, [pc, #68]	; (5b0c <z_impl_k_thread_suspend+0xd0>)
    5ac6:	f001 fb87 	bl	71d8 <printk>
    5aca:	21ac      	movs	r1, #172	; 0xac
    5acc:	4808      	ldr	r0, [pc, #32]	; (5af0 <z_impl_k_thread_suspend+0xb4>)
    5ace:	f001 fc5c 	bl	738a <assert_post_action>
	__asm__ volatile(
    5ad2:	f386 8811 	msr	BASEPRI, r6
    5ad6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5ada:	68ab      	ldr	r3, [r5, #8]
    5adc:	42a3      	cmp	r3, r4
    5ade:	d103      	bne.n	5ae8 <z_impl_k_thread_suspend+0xac>
}
    5ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5ae4:	f002 b993 	b.w	7e0e <z_reschedule_unlocked>
}
    5ae8:	bd70      	pop	{r4, r5, r6, pc}
    5aea:	bf00      	nop
    5aec:	20000ae0 	.word	0x20000ae0
    5af0:	00008556 	.word	0x00008556
    5af4:	000085a8 	.word	0x000085a8
    5af8:	00008496 	.word	0x00008496
    5afc:	000085bd 	.word	0x000085bd
    5b00:	20000acc 	.word	0x20000acc
    5b04:	20000aa4 	.word	0x20000aa4
    5b08:	0000857c 	.word	0x0000857c
    5b0c:	00008593 	.word	0x00008593

00005b10 <k_sched_unlock>:
{
    5b10:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5b12:	f04f 0320 	mov.w	r3, #32
    5b16:	f3ef 8511 	mrs	r5, BASEPRI
    5b1a:	f383 8811 	msr	BASEPRI, r3
    5b1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b22:	482d      	ldr	r0, [pc, #180]	; (5bd8 <k_sched_unlock+0xc8>)
    5b24:	f7ff f9e0 	bl	4ee8 <z_spin_lock_valid>
    5b28:	b968      	cbnz	r0, 5b46 <k_sched_unlock+0x36>
    5b2a:	2381      	movs	r3, #129	; 0x81
    5b2c:	4a2b      	ldr	r2, [pc, #172]	; (5bdc <k_sched_unlock+0xcc>)
    5b2e:	492c      	ldr	r1, [pc, #176]	; (5be0 <k_sched_unlock+0xd0>)
    5b30:	482c      	ldr	r0, [pc, #176]	; (5be4 <k_sched_unlock+0xd4>)
    5b32:	f001 fb51 	bl	71d8 <printk>
    5b36:	4928      	ldr	r1, [pc, #160]	; (5bd8 <k_sched_unlock+0xc8>)
    5b38:	482b      	ldr	r0, [pc, #172]	; (5be8 <k_sched_unlock+0xd8>)
    5b3a:	f001 fb4d 	bl	71d8 <printk>
    5b3e:	2181      	movs	r1, #129	; 0x81
    5b40:	4826      	ldr	r0, [pc, #152]	; (5bdc <k_sched_unlock+0xcc>)
    5b42:	f001 fc22 	bl	738a <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    5b46:	4c29      	ldr	r4, [pc, #164]	; (5bec <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    5b48:	4823      	ldr	r0, [pc, #140]	; (5bd8 <k_sched_unlock+0xc8>)
    5b4a:	f7ff f9e9 	bl	4f20 <z_spin_lock_set_owner>
    5b4e:	68a2      	ldr	r2, [r4, #8]
    5b50:	7bd2      	ldrb	r2, [r2, #15]
    5b52:	b972      	cbnz	r2, 5b72 <k_sched_unlock+0x62>
    5b54:	4926      	ldr	r1, [pc, #152]	; (5bf0 <k_sched_unlock+0xe0>)
    5b56:	f240 3352 	movw	r3, #850	; 0x352
    5b5a:	4a26      	ldr	r2, [pc, #152]	; (5bf4 <k_sched_unlock+0xe4>)
    5b5c:	4821      	ldr	r0, [pc, #132]	; (5be4 <k_sched_unlock+0xd4>)
    5b5e:	f001 fb3b 	bl	71d8 <printk>
    5b62:	4825      	ldr	r0, [pc, #148]	; (5bf8 <k_sched_unlock+0xe8>)
    5b64:	f001 fb38 	bl	71d8 <printk>
    5b68:	f240 3152 	movw	r1, #850	; 0x352
    5b6c:	4821      	ldr	r0, [pc, #132]	; (5bf4 <k_sched_unlock+0xe4>)
    5b6e:	f001 fc0c 	bl	738a <assert_post_action>
    5b72:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    5b76:	b173      	cbz	r3, 5b96 <k_sched_unlock+0x86>
    5b78:	4920      	ldr	r1, [pc, #128]	; (5bfc <k_sched_unlock+0xec>)
    5b7a:	f240 3353 	movw	r3, #851	; 0x353
    5b7e:	4a1d      	ldr	r2, [pc, #116]	; (5bf4 <k_sched_unlock+0xe4>)
    5b80:	4818      	ldr	r0, [pc, #96]	; (5be4 <k_sched_unlock+0xd4>)
    5b82:	f001 fb29 	bl	71d8 <printk>
    5b86:	481c      	ldr	r0, [pc, #112]	; (5bf8 <k_sched_unlock+0xe8>)
    5b88:	f001 fb26 	bl	71d8 <printk>
    5b8c:	f240 3153 	movw	r1, #851	; 0x353
    5b90:	4818      	ldr	r0, [pc, #96]	; (5bf4 <k_sched_unlock+0xe4>)
    5b92:	f001 fbfa 	bl	738a <assert_post_action>
		++_current->base.sched_locked;
    5b96:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    5b98:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5b9a:	7bd3      	ldrb	r3, [r2, #15]
    5b9c:	3301      	adds	r3, #1
    5b9e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5ba0:	f7ff fe26 	bl	57f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ba4:	480c      	ldr	r0, [pc, #48]	; (5bd8 <k_sched_unlock+0xc8>)
    5ba6:	f7ff f9ad 	bl	4f04 <z_spin_unlock_valid>
    5baa:	b968      	cbnz	r0, 5bc8 <k_sched_unlock+0xb8>
    5bac:	23ac      	movs	r3, #172	; 0xac
    5bae:	4a0b      	ldr	r2, [pc, #44]	; (5bdc <k_sched_unlock+0xcc>)
    5bb0:	4913      	ldr	r1, [pc, #76]	; (5c00 <k_sched_unlock+0xf0>)
    5bb2:	480c      	ldr	r0, [pc, #48]	; (5be4 <k_sched_unlock+0xd4>)
    5bb4:	f001 fb10 	bl	71d8 <printk>
    5bb8:	4907      	ldr	r1, [pc, #28]	; (5bd8 <k_sched_unlock+0xc8>)
    5bba:	4812      	ldr	r0, [pc, #72]	; (5c04 <k_sched_unlock+0xf4>)
    5bbc:	f001 fb0c 	bl	71d8 <printk>
    5bc0:	21ac      	movs	r1, #172	; 0xac
    5bc2:	4806      	ldr	r0, [pc, #24]	; (5bdc <k_sched_unlock+0xcc>)
    5bc4:	f001 fbe1 	bl	738a <assert_post_action>
	__asm__ volatile(
    5bc8:	f385 8811 	msr	BASEPRI, r5
    5bcc:	f3bf 8f6f 	isb	sy
}
    5bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    5bd4:	f002 b91b 	b.w	7e0e <z_reschedule_unlocked>
    5bd8:	20000ae0 	.word	0x20000ae0
    5bdc:	00008556 	.word	0x00008556
    5be0:	000085a8 	.word	0x000085a8
    5be4:	00008496 	.word	0x00008496
    5be8:	000085bd 	.word	0x000085bd
    5bec:	20000aa4 	.word	0x20000aa4
    5bf0:	0000989f 	.word	0x0000989f
    5bf4:	0000981e 	.word	0x0000981e
    5bf8:	0000977d 	.word	0x0000977d
    5bfc:	00009690 	.word	0x00009690
    5c00:	0000857c 	.word	0x0000857c
    5c04:	00008593 	.word	0x00008593

00005c08 <move_thread_to_end_of_prio_q>:
{
    5c08:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5c0a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5c0e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5c10:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5c12:	7b43      	ldrb	r3, [r0, #13]
    5c14:	da06      	bge.n	5c24 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    5c1a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c1c:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    5c1e:	4820      	ldr	r0, [pc, #128]	; (5ca0 <move_thread_to_end_of_prio_q+0x98>)
    5c20:	f7ff fda2 	bl	5768 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5c24:	7b63      	ldrb	r3, [r4, #13]
    5c26:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c2a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5c2c:	4b1d      	ldr	r3, [pc, #116]	; (5ca4 <move_thread_to_end_of_prio_q+0x9c>)
    5c2e:	429c      	cmp	r4, r3
    5c30:	d10b      	bne.n	5c4a <move_thread_to_end_of_prio_q+0x42>
    5c32:	491d      	ldr	r1, [pc, #116]	; (5ca8 <move_thread_to_end_of_prio_q+0xa0>)
    5c34:	481d      	ldr	r0, [pc, #116]	; (5cac <move_thread_to_end_of_prio_q+0xa4>)
    5c36:	f240 33b5 	movw	r3, #949	; 0x3b5
    5c3a:	4a1d      	ldr	r2, [pc, #116]	; (5cb0 <move_thread_to_end_of_prio_q+0xa8>)
    5c3c:	f001 facc 	bl	71d8 <printk>
    5c40:	f240 31b5 	movw	r1, #949	; 0x3b5
    5c44:	481a      	ldr	r0, [pc, #104]	; (5cb0 <move_thread_to_end_of_prio_q+0xa8>)
    5c46:	f001 fba0 	bl	738a <assert_post_action>
	return list->head == list;
    5c4a:	4a1a      	ldr	r2, [pc, #104]	; (5cb4 <move_thread_to_end_of_prio_q+0xac>)
    5c4c:	4611      	mov	r1, r2
    5c4e:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5c52:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c54:	428b      	cmp	r3, r1
    5c56:	bf08      	it	eq
    5c58:	2300      	moveq	r3, #0
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	bf38      	it	cc
    5c5e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c60:	b1cb      	cbz	r3, 5c96 <move_thread_to_end_of_prio_q+0x8e>
	int32_t b1 = thread_1->base.prio;
    5c62:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5c66:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5c6a:	4286      	cmp	r6, r0
    5c6c:	d00f      	beq.n	5c8e <move_thread_to_end_of_prio_q+0x86>
		return b2 - b1;
    5c6e:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5c70:	2800      	cmp	r0, #0
    5c72:	dd0c      	ble.n	5c8e <move_thread_to_end_of_prio_q+0x86>
	sys_dnode_t *const prev = successor->prev;
    5c74:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5c76:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5c7a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5c7c:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5c7e:	6890      	ldr	r0, [r2, #8]
    5c80:	1b03      	subs	r3, r0, r4
    5c82:	4258      	negs	r0, r3
    5c84:	4158      	adcs	r0, r3
}
    5c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5c8a:	f7ff bdb1 	b.w	57f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5c8e:	42ab      	cmp	r3, r5
    5c90:	d001      	beq.n	5c96 <move_thread_to_end_of_prio_q+0x8e>
    5c92:	681b      	ldr	r3, [r3, #0]
    5c94:	e7e4      	b.n	5c60 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
    5c96:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    5c9a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5c9c:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    5c9e:	e7ee      	b.n	5c7e <move_thread_to_end_of_prio_q+0x76>
    5ca0:	20000acc 	.word	0x20000acc
    5ca4:	20000240 	.word	0x20000240
    5ca8:	00009840 	.word	0x00009840
    5cac:	00008496 	.word	0x00008496
    5cb0:	0000981e 	.word	0x0000981e
    5cb4:	20000aa4 	.word	0x20000aa4

00005cb8 <z_time_slice>:
{
    5cb8:	b570      	push	{r4, r5, r6, lr}
    5cba:	4604      	mov	r4, r0
	__asm__ volatile(
    5cbc:	f04f 0320 	mov.w	r3, #32
    5cc0:	f3ef 8511 	mrs	r5, BASEPRI
    5cc4:	f383 8811 	msr	BASEPRI, r3
    5cc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ccc:	482a      	ldr	r0, [pc, #168]	; (5d78 <z_time_slice+0xc0>)
    5cce:	f7ff f90b 	bl	4ee8 <z_spin_lock_valid>
    5cd2:	b968      	cbnz	r0, 5cf0 <z_time_slice+0x38>
    5cd4:	2381      	movs	r3, #129	; 0x81
    5cd6:	4a29      	ldr	r2, [pc, #164]	; (5d7c <z_time_slice+0xc4>)
    5cd8:	4929      	ldr	r1, [pc, #164]	; (5d80 <z_time_slice+0xc8>)
    5cda:	482a      	ldr	r0, [pc, #168]	; (5d84 <z_time_slice+0xcc>)
    5cdc:	f001 fa7c 	bl	71d8 <printk>
    5ce0:	4925      	ldr	r1, [pc, #148]	; (5d78 <z_time_slice+0xc0>)
    5ce2:	4829      	ldr	r0, [pc, #164]	; (5d88 <z_time_slice+0xd0>)
    5ce4:	f001 fa78 	bl	71d8 <printk>
    5ce8:	2181      	movs	r1, #129	; 0x81
    5cea:	4824      	ldr	r0, [pc, #144]	; (5d7c <z_time_slice+0xc4>)
    5cec:	f001 fb4d 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    5cf0:	4821      	ldr	r0, [pc, #132]	; (5d78 <z_time_slice+0xc0>)
    5cf2:	f7ff f915 	bl	4f20 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5cf6:	4b25      	ldr	r3, [pc, #148]	; (5d8c <z_time_slice+0xd4>)
    5cf8:	4a25      	ldr	r2, [pc, #148]	; (5d90 <z_time_slice+0xd8>)
    5cfa:	6898      	ldr	r0, [r3, #8]
    5cfc:	6811      	ldr	r1, [r2, #0]
    5cfe:	4288      	cmp	r0, r1
    5d00:	4619      	mov	r1, r3
    5d02:	d118      	bne.n	5d36 <z_time_slice+0x7e>
			z_reset_time_slice();
    5d04:	f7ff fbb4 	bl	5470 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d08:	481b      	ldr	r0, [pc, #108]	; (5d78 <z_time_slice+0xc0>)
    5d0a:	f7ff f8fb 	bl	4f04 <z_spin_unlock_valid>
    5d0e:	b968      	cbnz	r0, 5d2c <z_time_slice+0x74>
    5d10:	23ac      	movs	r3, #172	; 0xac
    5d12:	4a1a      	ldr	r2, [pc, #104]	; (5d7c <z_time_slice+0xc4>)
    5d14:	491f      	ldr	r1, [pc, #124]	; (5d94 <z_time_slice+0xdc>)
    5d16:	481b      	ldr	r0, [pc, #108]	; (5d84 <z_time_slice+0xcc>)
    5d18:	f001 fa5e 	bl	71d8 <printk>
    5d1c:	4916      	ldr	r1, [pc, #88]	; (5d78 <z_time_slice+0xc0>)
    5d1e:	481e      	ldr	r0, [pc, #120]	; (5d98 <z_time_slice+0xe0>)
    5d20:	f001 fa5a 	bl	71d8 <printk>
    5d24:	21ac      	movs	r1, #172	; 0xac
    5d26:	4815      	ldr	r0, [pc, #84]	; (5d7c <z_time_slice+0xc4>)
    5d28:	f001 fb2f 	bl	738a <assert_post_action>
	__asm__ volatile(
    5d2c:	f385 8811 	msr	BASEPRI, r5
    5d30:	f3bf 8f6f 	isb	sy
}
    5d34:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    5d36:	2600      	movs	r6, #0
    5d38:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5d3a:	4a18      	ldr	r2, [pc, #96]	; (5d9c <z_time_slice+0xe4>)
    5d3c:	6812      	ldr	r2, [r2, #0]
    5d3e:	b1ba      	cbz	r2, 5d70 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5d40:	89c2      	ldrh	r2, [r0, #14]
    5d42:	2a7f      	cmp	r2, #127	; 0x7f
    5d44:	d814      	bhi.n	5d70 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    5d46:	7b42      	ldrb	r2, [r0, #13]
    5d48:	06d2      	lsls	r2, r2, #27
    5d4a:	d111      	bne.n	5d70 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5d4c:	4a14      	ldr	r2, [pc, #80]	; (5da0 <z_time_slice+0xe8>)
    5d4e:	f990 600e 	ldrsb.w	r6, [r0, #14]
    5d52:	6812      	ldr	r2, [r2, #0]
    5d54:	4296      	cmp	r6, r2
    5d56:	db0b      	blt.n	5d70 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5d58:	4a12      	ldr	r2, [pc, #72]	; (5da4 <z_time_slice+0xec>)
    5d5a:	4290      	cmp	r0, r2
    5d5c:	d008      	beq.n	5d70 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    5d5e:	691a      	ldr	r2, [r3, #16]
    5d60:	42a2      	cmp	r2, r4
    5d62:	dc02      	bgt.n	5d6a <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    5d64:	f7ff ff50 	bl	5c08 <move_thread_to_end_of_prio_q>
    5d68:	e7cc      	b.n	5d04 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    5d6a:	1b12      	subs	r2, r2, r4
    5d6c:	611a      	str	r2, [r3, #16]
    5d6e:	e7cb      	b.n	5d08 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    5d70:	2300      	movs	r3, #0
    5d72:	610b      	str	r3, [r1, #16]
    5d74:	e7c8      	b.n	5d08 <z_time_slice+0x50>
    5d76:	bf00      	nop
    5d78:	20000ae0 	.word	0x20000ae0
    5d7c:	00008556 	.word	0x00008556
    5d80:	000085a8 	.word	0x000085a8
    5d84:	00008496 	.word	0x00008496
    5d88:	000085bd 	.word	0x000085bd
    5d8c:	20000aa4 	.word	0x20000aa4
    5d90:	20000adc 	.word	0x20000adc
    5d94:	0000857c 	.word	0x0000857c
    5d98:	00008593 	.word	0x00008593
    5d9c:	20000ae8 	.word	0x20000ae8
    5da0:	20000ae4 	.word	0x20000ae4
    5da4:	20000240 	.word	0x20000240

00005da8 <ready_thread>:
{
    5da8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5daa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5dae:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5db0:	2a00      	cmp	r2, #0
    5db2:	7b43      	ldrb	r3, [r0, #13]
    5db4:	db40      	blt.n	5e38 <ready_thread+0x90>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5db6:	06da      	lsls	r2, r3, #27
    5db8:	d13e      	bne.n	5e38 <ready_thread+0x90>
	return !sys_dnode_is_linked(&to->node);
    5dba:	6985      	ldr	r5, [r0, #24]
    5dbc:	2d00      	cmp	r5, #0
    5dbe:	d13b      	bne.n	5e38 <ready_thread+0x90>
	thread->base.thread_state |= _THREAD_QUEUED;
    5dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5dc4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5dc6:	4b1d      	ldr	r3, [pc, #116]	; (5e3c <ready_thread+0x94>)
    5dc8:	4298      	cmp	r0, r3
    5dca:	d10b      	bne.n	5de4 <ready_thread+0x3c>
    5dcc:	491c      	ldr	r1, [pc, #112]	; (5e40 <ready_thread+0x98>)
    5dce:	481d      	ldr	r0, [pc, #116]	; (5e44 <ready_thread+0x9c>)
    5dd0:	f240 33b5 	movw	r3, #949	; 0x3b5
    5dd4:	4a1c      	ldr	r2, [pc, #112]	; (5e48 <ready_thread+0xa0>)
    5dd6:	f001 f9ff 	bl	71d8 <printk>
    5dda:	f240 31b5 	movw	r1, #949	; 0x3b5
    5dde:	481a      	ldr	r0, [pc, #104]	; (5e48 <ready_thread+0xa0>)
    5de0:	f001 fad3 	bl	738a <assert_post_action>
	return list->head == list;
    5de4:	4919      	ldr	r1, [pc, #100]	; (5e4c <ready_thread+0xa4>)
    5de6:	460b      	mov	r3, r1
    5de8:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5dec:	4298      	cmp	r0, r3
    5dee:	bf18      	it	ne
    5df0:	4605      	movne	r5, r0
    5df2:	2d00      	cmp	r5, #0
    5df4:	461a      	mov	r2, r3
    5df6:	462b      	mov	r3, r5
    5df8:	bf38      	it	cc
    5dfa:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5dfc:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5dfe:	b1b3      	cbz	r3, 5e2e <ready_thread+0x86>
	int32_t b1 = thread_1->base.prio;
    5e00:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5e04:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5e08:	4286      	cmp	r6, r0
    5e0a:	d00c      	beq.n	5e26 <ready_thread+0x7e>
		return b2 - b1;
    5e0c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5e0e:	2800      	cmp	r0, #0
    5e10:	dd09      	ble.n	5e26 <ready_thread+0x7e>
	sys_dnode_t *const prev = successor->prev;
    5e12:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5e14:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5e18:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5e1a:	605c      	str	r4, [r3, #4]
		update_cache(0);
    5e1c:	2000      	movs	r0, #0
}
    5e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5e22:	f7ff bce5 	b.w	57f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5e26:	42ab      	cmp	r3, r5
    5e28:	d001      	beq.n	5e2e <ready_thread+0x86>
    5e2a:	681b      	ldr	r3, [r3, #0]
    5e2c:	e7e7      	b.n	5dfe <ready_thread+0x56>
	node->prev = tail;
    5e2e:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5e32:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5e34:	62cc      	str	r4, [r1, #44]	; 0x2c
}
    5e36:	e7f1      	b.n	5e1c <ready_thread+0x74>
}
    5e38:	bd70      	pop	{r4, r5, r6, pc}
    5e3a:	bf00      	nop
    5e3c:	20000240 	.word	0x20000240
    5e40:	00009840 	.word	0x00009840
    5e44:	00008496 	.word	0x00008496
    5e48:	0000981e 	.word	0x0000981e
    5e4c:	20000aa4 	.word	0x20000aa4

00005e50 <z_ready_thread>:
{
    5e50:	b538      	push	{r3, r4, r5, lr}
    5e52:	4604      	mov	r4, r0
	__asm__ volatile(
    5e54:	f04f 0320 	mov.w	r3, #32
    5e58:	f3ef 8511 	mrs	r5, BASEPRI
    5e5c:	f383 8811 	msr	BASEPRI, r3
    5e60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e64:	4817      	ldr	r0, [pc, #92]	; (5ec4 <z_ready_thread+0x74>)
    5e66:	f7ff f83f 	bl	4ee8 <z_spin_lock_valid>
    5e6a:	b968      	cbnz	r0, 5e88 <z_ready_thread+0x38>
    5e6c:	2381      	movs	r3, #129	; 0x81
    5e6e:	4a16      	ldr	r2, [pc, #88]	; (5ec8 <z_ready_thread+0x78>)
    5e70:	4916      	ldr	r1, [pc, #88]	; (5ecc <z_ready_thread+0x7c>)
    5e72:	4817      	ldr	r0, [pc, #92]	; (5ed0 <z_ready_thread+0x80>)
    5e74:	f001 f9b0 	bl	71d8 <printk>
    5e78:	4912      	ldr	r1, [pc, #72]	; (5ec4 <z_ready_thread+0x74>)
    5e7a:	4816      	ldr	r0, [pc, #88]	; (5ed4 <z_ready_thread+0x84>)
    5e7c:	f001 f9ac 	bl	71d8 <printk>
    5e80:	2181      	movs	r1, #129	; 0x81
    5e82:	4811      	ldr	r0, [pc, #68]	; (5ec8 <z_ready_thread+0x78>)
    5e84:	f001 fa81 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    5e88:	480e      	ldr	r0, [pc, #56]	; (5ec4 <z_ready_thread+0x74>)
    5e8a:	f7ff f849 	bl	4f20 <z_spin_lock_set_owner>
			ready_thread(thread);
    5e8e:	4620      	mov	r0, r4
    5e90:	f7ff ff8a 	bl	5da8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e94:	480b      	ldr	r0, [pc, #44]	; (5ec4 <z_ready_thread+0x74>)
    5e96:	f7ff f835 	bl	4f04 <z_spin_unlock_valid>
    5e9a:	b968      	cbnz	r0, 5eb8 <z_ready_thread+0x68>
    5e9c:	23ac      	movs	r3, #172	; 0xac
    5e9e:	4a0a      	ldr	r2, [pc, #40]	; (5ec8 <z_ready_thread+0x78>)
    5ea0:	490d      	ldr	r1, [pc, #52]	; (5ed8 <z_ready_thread+0x88>)
    5ea2:	480b      	ldr	r0, [pc, #44]	; (5ed0 <z_ready_thread+0x80>)
    5ea4:	f001 f998 	bl	71d8 <printk>
    5ea8:	4906      	ldr	r1, [pc, #24]	; (5ec4 <z_ready_thread+0x74>)
    5eaa:	480c      	ldr	r0, [pc, #48]	; (5edc <z_ready_thread+0x8c>)
    5eac:	f001 f994 	bl	71d8 <printk>
    5eb0:	21ac      	movs	r1, #172	; 0xac
    5eb2:	4805      	ldr	r0, [pc, #20]	; (5ec8 <z_ready_thread+0x78>)
    5eb4:	f001 fa69 	bl	738a <assert_post_action>
	__asm__ volatile(
    5eb8:	f385 8811 	msr	BASEPRI, r5
    5ebc:	f3bf 8f6f 	isb	sy
}
    5ec0:	bd38      	pop	{r3, r4, r5, pc}
    5ec2:	bf00      	nop
    5ec4:	20000ae0 	.word	0x20000ae0
    5ec8:	00008556 	.word	0x00008556
    5ecc:	000085a8 	.word	0x000085a8
    5ed0:	00008496 	.word	0x00008496
    5ed4:	000085bd 	.word	0x000085bd
    5ed8:	0000857c 	.word	0x0000857c
    5edc:	00008593 	.word	0x00008593

00005ee0 <z_sched_start>:
{
    5ee0:	b538      	push	{r3, r4, r5, lr}
    5ee2:	4604      	mov	r4, r0
	__asm__ volatile(
    5ee4:	f04f 0320 	mov.w	r3, #32
    5ee8:	f3ef 8511 	mrs	r5, BASEPRI
    5eec:	f383 8811 	msr	BASEPRI, r3
    5ef0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ef4:	481d      	ldr	r0, [pc, #116]	; (5f6c <z_sched_start+0x8c>)
    5ef6:	f7fe fff7 	bl	4ee8 <z_spin_lock_valid>
    5efa:	b968      	cbnz	r0, 5f18 <z_sched_start+0x38>
    5efc:	2381      	movs	r3, #129	; 0x81
    5efe:	4a1c      	ldr	r2, [pc, #112]	; (5f70 <z_sched_start+0x90>)
    5f00:	491c      	ldr	r1, [pc, #112]	; (5f74 <z_sched_start+0x94>)
    5f02:	481d      	ldr	r0, [pc, #116]	; (5f78 <z_sched_start+0x98>)
    5f04:	f001 f968 	bl	71d8 <printk>
    5f08:	4918      	ldr	r1, [pc, #96]	; (5f6c <z_sched_start+0x8c>)
    5f0a:	481c      	ldr	r0, [pc, #112]	; (5f7c <z_sched_start+0x9c>)
    5f0c:	f001 f964 	bl	71d8 <printk>
    5f10:	2181      	movs	r1, #129	; 0x81
    5f12:	4817      	ldr	r0, [pc, #92]	; (5f70 <z_sched_start+0x90>)
    5f14:	f001 fa39 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    5f18:	4814      	ldr	r0, [pc, #80]	; (5f6c <z_sched_start+0x8c>)
    5f1a:	f7ff f801 	bl	4f20 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    5f1e:	7b63      	ldrb	r3, [r4, #13]
    5f20:	075a      	lsls	r2, r3, #29
    5f22:	d416      	bmi.n	5f52 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f24:	4811      	ldr	r0, [pc, #68]	; (5f6c <z_sched_start+0x8c>)
    5f26:	f7fe ffed 	bl	4f04 <z_spin_unlock_valid>
    5f2a:	b968      	cbnz	r0, 5f48 <z_sched_start+0x68>
    5f2c:	23ac      	movs	r3, #172	; 0xac
    5f2e:	4a10      	ldr	r2, [pc, #64]	; (5f70 <z_sched_start+0x90>)
    5f30:	4913      	ldr	r1, [pc, #76]	; (5f80 <z_sched_start+0xa0>)
    5f32:	4811      	ldr	r0, [pc, #68]	; (5f78 <z_sched_start+0x98>)
    5f34:	f001 f950 	bl	71d8 <printk>
    5f38:	490c      	ldr	r1, [pc, #48]	; (5f6c <z_sched_start+0x8c>)
    5f3a:	4812      	ldr	r0, [pc, #72]	; (5f84 <z_sched_start+0xa4>)
    5f3c:	f001 f94c 	bl	71d8 <printk>
    5f40:	21ac      	movs	r1, #172	; 0xac
    5f42:	480b      	ldr	r0, [pc, #44]	; (5f70 <z_sched_start+0x90>)
    5f44:	f001 fa21 	bl	738a <assert_post_action>
	__asm__ volatile(
    5f48:	f385 8811 	msr	BASEPRI, r5
    5f4c:	f3bf 8f6f 	isb	sy
}
    5f50:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5f52:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    5f56:	4620      	mov	r0, r4
    5f58:	7363      	strb	r3, [r4, #13]
    5f5a:	f7ff ff25 	bl	5da8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5f5e:	4629      	mov	r1, r5
}
    5f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    5f64:	4801      	ldr	r0, [pc, #4]	; (5f6c <z_sched_start+0x8c>)
    5f66:	f7ff bb47 	b.w	55f8 <z_reschedule>
    5f6a:	bf00      	nop
    5f6c:	20000ae0 	.word	0x20000ae0
    5f70:	00008556 	.word	0x00008556
    5f74:	000085a8 	.word	0x000085a8
    5f78:	00008496 	.word	0x00008496
    5f7c:	000085bd 	.word	0x000085bd
    5f80:	0000857c 	.word	0x0000857c
    5f84:	00008593 	.word	0x00008593

00005f88 <z_thread_timeout>:
{
    5f88:	b570      	push	{r4, r5, r6, lr}
    5f8a:	4604      	mov	r4, r0
	__asm__ volatile(
    5f8c:	f04f 0320 	mov.w	r3, #32
    5f90:	f3ef 8611 	mrs	r6, BASEPRI
    5f94:	f383 8811 	msr	BASEPRI, r3
    5f98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f9c:	4820      	ldr	r0, [pc, #128]	; (6020 <z_thread_timeout+0x98>)
    5f9e:	f7fe ffa3 	bl	4ee8 <z_spin_lock_valid>
    5fa2:	b968      	cbnz	r0, 5fc0 <z_thread_timeout+0x38>
    5fa4:	2381      	movs	r3, #129	; 0x81
    5fa6:	4a1f      	ldr	r2, [pc, #124]	; (6024 <z_thread_timeout+0x9c>)
    5fa8:	491f      	ldr	r1, [pc, #124]	; (6028 <z_thread_timeout+0xa0>)
    5faa:	4820      	ldr	r0, [pc, #128]	; (602c <z_thread_timeout+0xa4>)
    5fac:	f001 f914 	bl	71d8 <printk>
    5fb0:	491b      	ldr	r1, [pc, #108]	; (6020 <z_thread_timeout+0x98>)
    5fb2:	481f      	ldr	r0, [pc, #124]	; (6030 <z_thread_timeout+0xa8>)
    5fb4:	f001 f910 	bl	71d8 <printk>
    5fb8:	2181      	movs	r1, #129	; 0x81
    5fba:	481a      	ldr	r0, [pc, #104]	; (6024 <z_thread_timeout+0x9c>)
    5fbc:	f001 f9e5 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    5fc0:	4817      	ldr	r0, [pc, #92]	; (6020 <z_thread_timeout+0x98>)
    5fc2:	f7fe ffad 	bl	4f20 <z_spin_lock_set_owner>
		if (!killed) {
    5fc6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5fca:	f013 0f28 	tst.w	r3, #40	; 0x28
    5fce:	d110      	bne.n	5ff2 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    5fd0:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5fd4:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    5fd8:	b113      	cbz	r3, 5fe0 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    5fda:	4628      	mov	r0, r5
    5fdc:	f7ff fbe6 	bl	57ac <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5fe0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    5fe4:	4628      	mov	r0, r5
    5fe6:	f023 0314 	bic.w	r3, r3, #20
    5fea:	f804 3c0b 	strb.w	r3, [r4, #-11]
    5fee:	f7ff fedb 	bl	5da8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ff2:	480b      	ldr	r0, [pc, #44]	; (6020 <z_thread_timeout+0x98>)
    5ff4:	f7fe ff86 	bl	4f04 <z_spin_unlock_valid>
    5ff8:	b968      	cbnz	r0, 6016 <z_thread_timeout+0x8e>
    5ffa:	23ac      	movs	r3, #172	; 0xac
    5ffc:	4a09      	ldr	r2, [pc, #36]	; (6024 <z_thread_timeout+0x9c>)
    5ffe:	490d      	ldr	r1, [pc, #52]	; (6034 <z_thread_timeout+0xac>)
    6000:	480a      	ldr	r0, [pc, #40]	; (602c <z_thread_timeout+0xa4>)
    6002:	f001 f8e9 	bl	71d8 <printk>
    6006:	4906      	ldr	r1, [pc, #24]	; (6020 <z_thread_timeout+0x98>)
    6008:	480b      	ldr	r0, [pc, #44]	; (6038 <z_thread_timeout+0xb0>)
    600a:	f001 f8e5 	bl	71d8 <printk>
    600e:	21ac      	movs	r1, #172	; 0xac
    6010:	4804      	ldr	r0, [pc, #16]	; (6024 <z_thread_timeout+0x9c>)
    6012:	f001 f9ba 	bl	738a <assert_post_action>
	__asm__ volatile(
    6016:	f386 8811 	msr	BASEPRI, r6
    601a:	f3bf 8f6f 	isb	sy
}
    601e:	bd70      	pop	{r4, r5, r6, pc}
    6020:	20000ae0 	.word	0x20000ae0
    6024:	00008556 	.word	0x00008556
    6028:	000085a8 	.word	0x000085a8
    602c:	00008496 	.word	0x00008496
    6030:	000085bd 	.word	0x000085bd
    6034:	0000857c 	.word	0x0000857c
    6038:	00008593 	.word	0x00008593

0000603c <z_set_prio>:
{
    603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    603e:	4604      	mov	r4, r0
    6040:	460e      	mov	r6, r1
	__asm__ volatile(
    6042:	f04f 0320 	mov.w	r3, #32
    6046:	f3ef 8711 	mrs	r7, BASEPRI
    604a:	f383 8811 	msr	BASEPRI, r3
    604e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6052:	483d      	ldr	r0, [pc, #244]	; (6148 <z_set_prio+0x10c>)
    6054:	f7fe ff48 	bl	4ee8 <z_spin_lock_valid>
    6058:	b968      	cbnz	r0, 6076 <z_set_prio+0x3a>
    605a:	2381      	movs	r3, #129	; 0x81
    605c:	4a3b      	ldr	r2, [pc, #236]	; (614c <z_set_prio+0x110>)
    605e:	493c      	ldr	r1, [pc, #240]	; (6150 <z_set_prio+0x114>)
    6060:	483c      	ldr	r0, [pc, #240]	; (6154 <z_set_prio+0x118>)
    6062:	f001 f8b9 	bl	71d8 <printk>
    6066:	4938      	ldr	r1, [pc, #224]	; (6148 <z_set_prio+0x10c>)
    6068:	483b      	ldr	r0, [pc, #236]	; (6158 <z_set_prio+0x11c>)
    606a:	f001 f8b5 	bl	71d8 <printk>
    606e:	2181      	movs	r1, #129	; 0x81
    6070:	4836      	ldr	r0, [pc, #216]	; (614c <z_set_prio+0x110>)
    6072:	f001 f98a 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    6076:	4834      	ldr	r0, [pc, #208]	; (6148 <z_set_prio+0x10c>)
    6078:	f7fe ff52 	bl	4f20 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    607c:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    607e:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6080:	06da      	lsls	r2, r3, #27
    6082:	d15e      	bne.n	6142 <z_set_prio+0x106>
    6084:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    6086:	2d00      	cmp	r5, #0
    6088:	d15b      	bne.n	6142 <z_set_prio+0x106>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    608a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    608e:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    6090:	4621      	mov	r1, r4
    6092:	4832      	ldr	r0, [pc, #200]	; (615c <z_set_prio+0x120>)
    6094:	f7ff fb68 	bl	5768 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6098:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    609a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    609c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    60a0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    60a2:	4b2f      	ldr	r3, [pc, #188]	; (6160 <z_set_prio+0x124>)
    60a4:	429c      	cmp	r4, r3
    60a6:	d10b      	bne.n	60c0 <z_set_prio+0x84>
    60a8:	492e      	ldr	r1, [pc, #184]	; (6164 <z_set_prio+0x128>)
    60aa:	482a      	ldr	r0, [pc, #168]	; (6154 <z_set_prio+0x118>)
    60ac:	f240 33b5 	movw	r3, #949	; 0x3b5
    60b0:	4a2d      	ldr	r2, [pc, #180]	; (6168 <z_set_prio+0x12c>)
    60b2:	f001 f891 	bl	71d8 <printk>
    60b6:	f240 31b5 	movw	r1, #949	; 0x3b5
    60ba:	482b      	ldr	r0, [pc, #172]	; (6168 <z_set_prio+0x12c>)
    60bc:	f001 f965 	bl	738a <assert_post_action>
	return list->head == list;
    60c0:	492a      	ldr	r1, [pc, #168]	; (616c <z_set_prio+0x130>)
    60c2:	460b      	mov	r3, r1
    60c4:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60c8:	4298      	cmp	r0, r3
    60ca:	bf18      	it	ne
    60cc:	4605      	movne	r5, r0
    60ce:	2d00      	cmp	r5, #0
    60d0:	461a      	mov	r2, r3
    60d2:	462b      	mov	r3, r5
    60d4:	bf38      	it	cc
    60d6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    60d8:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    60da:	b36b      	cbz	r3, 6138 <z_set_prio+0xfc>
	int32_t b1 = thread_1->base.prio;
    60dc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    60e0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    60e4:	4286      	cmp	r6, r0
    60e6:	d023      	beq.n	6130 <z_set_prio+0xf4>
		return b2 - b1;
    60e8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    60ea:	2800      	cmp	r0, #0
    60ec:	dd20      	ble.n	6130 <z_set_prio+0xf4>
	sys_dnode_t *const prev = successor->prev;
    60ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    60f0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    60f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    60f6:	605c      	str	r4, [r3, #4]
			update_cache(1);
    60f8:	2001      	movs	r0, #1
    60fa:	f7ff fb79 	bl	57f0 <update_cache>
    60fe:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6100:	4811      	ldr	r0, [pc, #68]	; (6148 <z_set_prio+0x10c>)
    6102:	f7fe feff 	bl	4f04 <z_spin_unlock_valid>
    6106:	b968      	cbnz	r0, 6124 <z_set_prio+0xe8>
    6108:	23ac      	movs	r3, #172	; 0xac
    610a:	4a10      	ldr	r2, [pc, #64]	; (614c <z_set_prio+0x110>)
    610c:	4918      	ldr	r1, [pc, #96]	; (6170 <z_set_prio+0x134>)
    610e:	4811      	ldr	r0, [pc, #68]	; (6154 <z_set_prio+0x118>)
    6110:	f001 f862 	bl	71d8 <printk>
    6114:	490c      	ldr	r1, [pc, #48]	; (6148 <z_set_prio+0x10c>)
    6116:	4817      	ldr	r0, [pc, #92]	; (6174 <z_set_prio+0x138>)
    6118:	f001 f85e 	bl	71d8 <printk>
    611c:	21ac      	movs	r1, #172	; 0xac
    611e:	480b      	ldr	r0, [pc, #44]	; (614c <z_set_prio+0x110>)
    6120:	f001 f933 	bl	738a <assert_post_action>
	__asm__ volatile(
    6124:	f387 8811 	msr	BASEPRI, r7
    6128:	f3bf 8f6f 	isb	sy
}
    612c:	4620      	mov	r0, r4
    612e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6130:	42ab      	cmp	r3, r5
    6132:	d001      	beq.n	6138 <z_set_prio+0xfc>
    6134:	681b      	ldr	r3, [r3, #0]
    6136:	e7d0      	b.n	60da <z_set_prio+0x9e>
	node->prev = tail;
    6138:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    613c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    613e:	62cc      	str	r4, [r1, #44]	; 0x2c
}
    6140:	e7da      	b.n	60f8 <z_set_prio+0xbc>
			thread->base.prio = prio;
    6142:	73a6      	strb	r6, [r4, #14]
    6144:	2400      	movs	r4, #0
    6146:	e7db      	b.n	6100 <z_set_prio+0xc4>
    6148:	20000ae0 	.word	0x20000ae0
    614c:	00008556 	.word	0x00008556
    6150:	000085a8 	.word	0x000085a8
    6154:	00008496 	.word	0x00008496
    6158:	000085bd 	.word	0x000085bd
    615c:	20000acc 	.word	0x20000acc
    6160:	20000240 	.word	0x20000240
    6164:	00009840 	.word	0x00009840
    6168:	0000981e 	.word	0x0000981e
    616c:	20000aa4 	.word	0x20000aa4
    6170:	0000857c 	.word	0x0000857c
    6174:	00008593 	.word	0x00008593

00006178 <z_unpend1_no_timeout>:
{
    6178:	b538      	push	{r3, r4, r5, lr}
    617a:	4604      	mov	r4, r0
	__asm__ volatile(
    617c:	f04f 0320 	mov.w	r3, #32
    6180:	f3ef 8511 	mrs	r5, BASEPRI
    6184:	f383 8811 	msr	BASEPRI, r3
    6188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    618c:	4819      	ldr	r0, [pc, #100]	; (61f4 <z_unpend1_no_timeout+0x7c>)
    618e:	f7fe feab 	bl	4ee8 <z_spin_lock_valid>
    6192:	b968      	cbnz	r0, 61b0 <z_unpend1_no_timeout+0x38>
    6194:	2381      	movs	r3, #129	; 0x81
    6196:	4a18      	ldr	r2, [pc, #96]	; (61f8 <z_unpend1_no_timeout+0x80>)
    6198:	4918      	ldr	r1, [pc, #96]	; (61fc <z_unpend1_no_timeout+0x84>)
    619a:	4819      	ldr	r0, [pc, #100]	; (6200 <z_unpend1_no_timeout+0x88>)
    619c:	f001 f81c 	bl	71d8 <printk>
    61a0:	4914      	ldr	r1, [pc, #80]	; (61f4 <z_unpend1_no_timeout+0x7c>)
    61a2:	4818      	ldr	r0, [pc, #96]	; (6204 <z_unpend1_no_timeout+0x8c>)
    61a4:	f001 f818 	bl	71d8 <printk>
    61a8:	2181      	movs	r1, #129	; 0x81
    61aa:	4813      	ldr	r0, [pc, #76]	; (61f8 <z_unpend1_no_timeout+0x80>)
    61ac:	f001 f8ed 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    61b0:	4810      	ldr	r0, [pc, #64]	; (61f4 <z_unpend1_no_timeout+0x7c>)
    61b2:	f7fe feb5 	bl	4f20 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    61b6:	4620      	mov	r0, r4
    61b8:	f001 fe33 	bl	7e22 <z_priq_dumb_best>
		if (thread != NULL) {
    61bc:	4604      	mov	r4, r0
    61be:	b108      	cbz	r0, 61c4 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    61c0:	f7ff faf4 	bl	57ac <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61c4:	480b      	ldr	r0, [pc, #44]	; (61f4 <z_unpend1_no_timeout+0x7c>)
    61c6:	f7fe fe9d 	bl	4f04 <z_spin_unlock_valid>
    61ca:	b968      	cbnz	r0, 61e8 <z_unpend1_no_timeout+0x70>
    61cc:	23ac      	movs	r3, #172	; 0xac
    61ce:	4a0a      	ldr	r2, [pc, #40]	; (61f8 <z_unpend1_no_timeout+0x80>)
    61d0:	490d      	ldr	r1, [pc, #52]	; (6208 <z_unpend1_no_timeout+0x90>)
    61d2:	480b      	ldr	r0, [pc, #44]	; (6200 <z_unpend1_no_timeout+0x88>)
    61d4:	f001 f800 	bl	71d8 <printk>
    61d8:	4906      	ldr	r1, [pc, #24]	; (61f4 <z_unpend1_no_timeout+0x7c>)
    61da:	480c      	ldr	r0, [pc, #48]	; (620c <z_unpend1_no_timeout+0x94>)
    61dc:	f000 fffc 	bl	71d8 <printk>
    61e0:	21ac      	movs	r1, #172	; 0xac
    61e2:	4805      	ldr	r0, [pc, #20]	; (61f8 <z_unpend1_no_timeout+0x80>)
    61e4:	f001 f8d1 	bl	738a <assert_post_action>
	__asm__ volatile(
    61e8:	f385 8811 	msr	BASEPRI, r5
    61ec:	f3bf 8f6f 	isb	sy
}
    61f0:	4620      	mov	r0, r4
    61f2:	bd38      	pop	{r3, r4, r5, pc}
    61f4:	20000ae0 	.word	0x20000ae0
    61f8:	00008556 	.word	0x00008556
    61fc:	000085a8 	.word	0x000085a8
    6200:	00008496 	.word	0x00008496
    6204:	000085bd 	.word	0x000085bd
    6208:	0000857c 	.word	0x0000857c
    620c:	00008593 	.word	0x00008593

00006210 <z_unpend_first_thread>:
{
    6210:	b538      	push	{r3, r4, r5, lr}
    6212:	4604      	mov	r4, r0
	__asm__ volatile(
    6214:	f04f 0320 	mov.w	r3, #32
    6218:	f3ef 8511 	mrs	r5, BASEPRI
    621c:	f383 8811 	msr	BASEPRI, r3
    6220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6224:	481b      	ldr	r0, [pc, #108]	; (6294 <z_unpend_first_thread+0x84>)
    6226:	f7fe fe5f 	bl	4ee8 <z_spin_lock_valid>
    622a:	b968      	cbnz	r0, 6248 <z_unpend_first_thread+0x38>
    622c:	2381      	movs	r3, #129	; 0x81
    622e:	4a1a      	ldr	r2, [pc, #104]	; (6298 <z_unpend_first_thread+0x88>)
    6230:	491a      	ldr	r1, [pc, #104]	; (629c <z_unpend_first_thread+0x8c>)
    6232:	481b      	ldr	r0, [pc, #108]	; (62a0 <z_unpend_first_thread+0x90>)
    6234:	f000 ffd0 	bl	71d8 <printk>
    6238:	4916      	ldr	r1, [pc, #88]	; (6294 <z_unpend_first_thread+0x84>)
    623a:	481a      	ldr	r0, [pc, #104]	; (62a4 <z_unpend_first_thread+0x94>)
    623c:	f000 ffcc 	bl	71d8 <printk>
    6240:	2181      	movs	r1, #129	; 0x81
    6242:	4815      	ldr	r0, [pc, #84]	; (6298 <z_unpend_first_thread+0x88>)
    6244:	f001 f8a1 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    6248:	4812      	ldr	r0, [pc, #72]	; (6294 <z_unpend_first_thread+0x84>)
    624a:	f7fe fe69 	bl	4f20 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    624e:	4620      	mov	r0, r4
    6250:	f001 fde7 	bl	7e22 <z_priq_dumb_best>
		if (thread != NULL) {
    6254:	4604      	mov	r4, r0
    6256:	b128      	cbz	r0, 6264 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    6258:	f7ff faa8 	bl	57ac <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    625c:	f104 0018 	add.w	r0, r4, #24
    6260:	f000 fbb2 	bl	69c8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6264:	480b      	ldr	r0, [pc, #44]	; (6294 <z_unpend_first_thread+0x84>)
    6266:	f7fe fe4d 	bl	4f04 <z_spin_unlock_valid>
    626a:	b968      	cbnz	r0, 6288 <z_unpend_first_thread+0x78>
    626c:	23ac      	movs	r3, #172	; 0xac
    626e:	4a0a      	ldr	r2, [pc, #40]	; (6298 <z_unpend_first_thread+0x88>)
    6270:	490d      	ldr	r1, [pc, #52]	; (62a8 <z_unpend_first_thread+0x98>)
    6272:	480b      	ldr	r0, [pc, #44]	; (62a0 <z_unpend_first_thread+0x90>)
    6274:	f000 ffb0 	bl	71d8 <printk>
    6278:	4906      	ldr	r1, [pc, #24]	; (6294 <z_unpend_first_thread+0x84>)
    627a:	480c      	ldr	r0, [pc, #48]	; (62ac <z_unpend_first_thread+0x9c>)
    627c:	f000 ffac 	bl	71d8 <printk>
    6280:	21ac      	movs	r1, #172	; 0xac
    6282:	4805      	ldr	r0, [pc, #20]	; (6298 <z_unpend_first_thread+0x88>)
    6284:	f001 f881 	bl	738a <assert_post_action>
	__asm__ volatile(
    6288:	f385 8811 	msr	BASEPRI, r5
    628c:	f3bf 8f6f 	isb	sy
}
    6290:	4620      	mov	r0, r4
    6292:	bd38      	pop	{r3, r4, r5, pc}
    6294:	20000ae0 	.word	0x20000ae0
    6298:	00008556 	.word	0x00008556
    629c:	000085a8 	.word	0x000085a8
    62a0:	00008496 	.word	0x00008496
    62a4:	000085bd 	.word	0x000085bd
    62a8:	0000857c 	.word	0x0000857c
    62ac:	00008593 	.word	0x00008593

000062b0 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    62b0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    62b2:	4b04      	ldr	r3, [pc, #16]	; (62c4 <z_sched_init+0x14>)
    62b4:	4608      	mov	r0, r1
    62b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    62ba:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    62be:	f7ff b8ed 	b.w	549c <k_sched_time_slice_set>
    62c2:	bf00      	nop
    62c4:	20000aa4 	.word	0x20000aa4

000062c8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    62c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62ca:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    62ce:	b173      	cbz	r3, 62ee <z_impl_k_yield+0x26>
    62d0:	4947      	ldr	r1, [pc, #284]	; (63f0 <z_impl_k_yield+0x128>)
    62d2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
    62d6:	4a47      	ldr	r2, [pc, #284]	; (63f4 <z_impl_k_yield+0x12c>)
    62d8:	4847      	ldr	r0, [pc, #284]	; (63f8 <z_impl_k_yield+0x130>)
    62da:	f000 ff7d 	bl	71d8 <printk>
    62de:	4847      	ldr	r0, [pc, #284]	; (63fc <z_impl_k_yield+0x134>)
    62e0:	f000 ff7a 	bl	71d8 <printk>
    62e4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
    62e8:	4842      	ldr	r0, [pc, #264]	; (63f4 <z_impl_k_yield+0x12c>)
    62ea:	f001 f84e 	bl	738a <assert_post_action>

	SYS_PORT_TRACING_FUNC(k_thread, yield);

	if (!z_is_idle_thread_object(_current)) {
    62ee:	4d44      	ldr	r5, [pc, #272]	; (6400 <z_impl_k_yield+0x138>)
    62f0:	4e44      	ldr	r6, [pc, #272]	; (6404 <z_impl_k_yield+0x13c>)
    62f2:	68ab      	ldr	r3, [r5, #8]
    62f4:	42b3      	cmp	r3, r6
    62f6:	d072      	beq.n	63de <z_impl_k_yield+0x116>
	__asm__ volatile(
    62f8:	f04f 0320 	mov.w	r3, #32
    62fc:	f3ef 8711 	mrs	r7, BASEPRI
    6300:	f383 8811 	msr	BASEPRI, r3
    6304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6308:	483f      	ldr	r0, [pc, #252]	; (6408 <z_impl_k_yield+0x140>)
    630a:	f7fe fded 	bl	4ee8 <z_spin_lock_valid>
    630e:	b968      	cbnz	r0, 632c <z_impl_k_yield+0x64>
    6310:	2381      	movs	r3, #129	; 0x81
    6312:	4a3e      	ldr	r2, [pc, #248]	; (640c <z_impl_k_yield+0x144>)
    6314:	493e      	ldr	r1, [pc, #248]	; (6410 <z_impl_k_yield+0x148>)
    6316:	4838      	ldr	r0, [pc, #224]	; (63f8 <z_impl_k_yield+0x130>)
    6318:	f000 ff5e 	bl	71d8 <printk>
    631c:	493a      	ldr	r1, [pc, #232]	; (6408 <z_impl_k_yield+0x140>)
    631e:	483d      	ldr	r0, [pc, #244]	; (6414 <z_impl_k_yield+0x14c>)
    6320:	f000 ff5a 	bl	71d8 <printk>
    6324:	2181      	movs	r1, #129	; 0x81
    6326:	4839      	ldr	r0, [pc, #228]	; (640c <z_impl_k_yield+0x144>)
    6328:	f001 f82f 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    632c:	4836      	ldr	r0, [pc, #216]	; (6408 <z_impl_k_yield+0x140>)
    632e:	f7fe fdf7 	bl	4f20 <z_spin_lock_set_owner>
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
    6332:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
    6334:	4838      	ldr	r0, [pc, #224]	; (6418 <z_impl_k_yield+0x150>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6336:	7b4b      	ldrb	r3, [r1, #13]
    6338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    633c:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    633e:	f7ff fa13 	bl	5768 <z_priq_dumb_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
    6342:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6344:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6346:	42b4      	cmp	r4, r6
	thread->base.thread_state |= _THREAD_QUEUED;
    6348:	f063 037f 	orn	r3, r3, #127	; 0x7f
    634c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    634e:	d10b      	bne.n	6368 <z_impl_k_yield+0xa0>
    6350:	4932      	ldr	r1, [pc, #200]	; (641c <z_impl_k_yield+0x154>)
    6352:	4829      	ldr	r0, [pc, #164]	; (63f8 <z_impl_k_yield+0x130>)
    6354:	f240 33b5 	movw	r3, #949	; 0x3b5
    6358:	4a26      	ldr	r2, [pc, #152]	; (63f4 <z_impl_k_yield+0x12c>)
    635a:	f000 ff3d 	bl	71d8 <printk>
    635e:	f240 31b5 	movw	r1, #949	; 0x3b5
    6362:	4824      	ldr	r0, [pc, #144]	; (63f4 <z_impl_k_yield+0x12c>)
    6364:	f001 f811 	bl	738a <assert_post_action>
	return list->head == list;
    6368:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    636a:	482b      	ldr	r0, [pc, #172]	; (6418 <z_impl_k_yield+0x150>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    636c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    636e:	4283      	cmp	r3, r0
    6370:	bf08      	it	eq
    6372:	2300      	moveq	r3, #0
    6374:	2b00      	cmp	r3, #0
    6376:	bf38      	it	cc
    6378:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    637a:	b35b      	cbz	r3, 63d4 <z_impl_k_yield+0x10c>
	int32_t b1 = thread_1->base.prio;
    637c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6380:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6384:	4296      	cmp	r6, r2
    6386:	d021      	beq.n	63cc <z_impl_k_yield+0x104>
		return b2 - b1;
    6388:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    638a:	2a00      	cmp	r2, #0
    638c:	dd1e      	ble.n	63cc <z_impl_k_yield+0x104>
	sys_dnode_t *const prev = successor->prev;
    638e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6390:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6394:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6396:	605c      	str	r4, [r3, #4]
		update_cache(1);
    6398:	2001      	movs	r0, #1
    639a:	f7ff fa29 	bl	57f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    639e:	481a      	ldr	r0, [pc, #104]	; (6408 <z_impl_k_yield+0x140>)
    63a0:	f7fe fdb0 	bl	4f04 <z_spin_unlock_valid>
    63a4:	b968      	cbnz	r0, 63c2 <z_impl_k_yield+0xfa>
    63a6:	23c3      	movs	r3, #195	; 0xc3
    63a8:	4a18      	ldr	r2, [pc, #96]	; (640c <z_impl_k_yield+0x144>)
    63aa:	491d      	ldr	r1, [pc, #116]	; (6420 <z_impl_k_yield+0x158>)
    63ac:	4812      	ldr	r0, [pc, #72]	; (63f8 <z_impl_k_yield+0x130>)
    63ae:	f000 ff13 	bl	71d8 <printk>
    63b2:	4915      	ldr	r1, [pc, #84]	; (6408 <z_impl_k_yield+0x140>)
    63b4:	481b      	ldr	r0, [pc, #108]	; (6424 <z_impl_k_yield+0x15c>)
    63b6:	f000 ff0f 	bl	71d8 <printk>
    63ba:	21c3      	movs	r1, #195	; 0xc3
    63bc:	4813      	ldr	r0, [pc, #76]	; (640c <z_impl_k_yield+0x144>)
    63be:	f000 ffe4 	bl	738a <assert_post_action>
    63c2:	4638      	mov	r0, r7
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
    63c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    63c8:	f7fc bb5c 	b.w	2a84 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    63cc:	428b      	cmp	r3, r1
    63ce:	d001      	beq.n	63d4 <z_impl_k_yield+0x10c>
    63d0:	681b      	ldr	r3, [r3, #0]
    63d2:	e7d2      	b.n	637a <z_impl_k_yield+0xb2>
	node->prev = tail;
    63d4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    63d8:	600c      	str	r4, [r1, #0]
	list->tail = node;
    63da:	62ec      	str	r4, [r5, #44]	; 0x2c
}
    63dc:	e7dc      	b.n	6398 <z_impl_k_yield+0xd0>
    63de:	f04f 0320 	mov.w	r3, #32
    63e2:	f3ef 8011 	mrs	r0, BASEPRI
    63e6:	f383 8811 	msr	BASEPRI, r3
    63ea:	f3bf 8f6f 	isb	sy
    63ee:	e7e9      	b.n	63c4 <z_impl_k_yield+0xfc>
    63f0:	00009690 	.word	0x00009690
    63f4:	0000981e 	.word	0x0000981e
    63f8:	00008496 	.word	0x00008496
    63fc:	0000977d 	.word	0x0000977d
    6400:	20000aa4 	.word	0x20000aa4
    6404:	20000240 	.word	0x20000240
    6408:	20000ae0 	.word	0x20000ae0
    640c:	00008556 	.word	0x00008556
    6410:	000085a8 	.word	0x000085a8
    6414:	000085bd 	.word	0x000085bd
    6418:	20000acc 	.word	0x20000acc
    641c:	00009840 	.word	0x00009840
    6420:	0000857c 	.word	0x0000857c
    6424:	00008593 	.word	0x00008593

00006428 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    6428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    642c:	4606      	mov	r6, r0
    642e:	460f      	mov	r7, r1
    6430:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6434:	b173      	cbz	r3, 6454 <z_tick_sleep+0x2c>
    6436:	493e      	ldr	r1, [pc, #248]	; (6530 <z_tick_sleep+0x108>)
    6438:	f240 43d1 	movw	r3, #1233	; 0x4d1
    643c:	4a3d      	ldr	r2, [pc, #244]	; (6534 <z_tick_sleep+0x10c>)
    643e:	483e      	ldr	r0, [pc, #248]	; (6538 <z_tick_sleep+0x110>)
    6440:	f000 feca 	bl	71d8 <printk>
    6444:	483d      	ldr	r0, [pc, #244]	; (653c <z_tick_sleep+0x114>)
    6446:	f000 fec7 	bl	71d8 <printk>
    644a:	f240 41d1 	movw	r1, #1233	; 0x4d1
    644e:	4839      	ldr	r0, [pc, #228]	; (6534 <z_tick_sleep+0x10c>)
    6450:	f000 ff9b 	bl	738a <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6454:	ea56 0307 	orrs.w	r3, r6, r7
    6458:	d104      	bne.n	6464 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    645a:	f7ff ff35 	bl	62c8 <z_impl_k_yield>
		k_yield();
		return 0;
    645e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    6460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6464:	f001 fce7 	bl	7e36 <sys_clock_tick_get_32>
    6468:	1984      	adds	r4, r0, r6
    646a:	f04f 0320 	mov.w	r3, #32
    646e:	f3ef 8811 	mrs	r8, BASEPRI
    6472:	f383 8811 	msr	BASEPRI, r3
    6476:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    647a:	4831      	ldr	r0, [pc, #196]	; (6540 <z_tick_sleep+0x118>)
    647c:	f7fe fd34 	bl	4ee8 <z_spin_lock_valid>
    6480:	b968      	cbnz	r0, 649e <z_tick_sleep+0x76>
    6482:	2381      	movs	r3, #129	; 0x81
    6484:	4a2f      	ldr	r2, [pc, #188]	; (6544 <z_tick_sleep+0x11c>)
    6486:	4930      	ldr	r1, [pc, #192]	; (6548 <z_tick_sleep+0x120>)
    6488:	482b      	ldr	r0, [pc, #172]	; (6538 <z_tick_sleep+0x110>)
    648a:	f000 fea5 	bl	71d8 <printk>
    648e:	492c      	ldr	r1, [pc, #176]	; (6540 <z_tick_sleep+0x118>)
    6490:	482e      	ldr	r0, [pc, #184]	; (654c <z_tick_sleep+0x124>)
    6492:	f000 fea1 	bl	71d8 <printk>
    6496:	2181      	movs	r1, #129	; 0x81
    6498:	482a      	ldr	r0, [pc, #168]	; (6544 <z_tick_sleep+0x11c>)
    649a:	f000 ff76 	bl	738a <assert_post_action>
	pending_current = _current;
    649e:	4d2c      	ldr	r5, [pc, #176]	; (6550 <z_tick_sleep+0x128>)
	z_spin_lock_set_owner(l);
    64a0:	4827      	ldr	r0, [pc, #156]	; (6540 <z_tick_sleep+0x118>)
    64a2:	f7fe fd3d 	bl	4f20 <z_spin_lock_set_owner>
    64a6:	68a8      	ldr	r0, [r5, #8]
    64a8:	4b2a      	ldr	r3, [pc, #168]	; (6554 <z_tick_sleep+0x12c>)
    64aa:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    64ac:	f7ff f9d8 	bl	5860 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    64b0:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    64b2:	4632      	mov	r2, r6
    64b4:	463b      	mov	r3, r7
    64b6:	3018      	adds	r0, #24
    64b8:	4927      	ldr	r1, [pc, #156]	; (6558 <z_tick_sleep+0x130>)
    64ba:	f000 f9b1 	bl	6820 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    64be:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64c0:	481f      	ldr	r0, [pc, #124]	; (6540 <z_tick_sleep+0x118>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    64c2:	7b53      	ldrb	r3, [r2, #13]
    64c4:	f043 0310 	orr.w	r3, r3, #16
    64c8:	7353      	strb	r3, [r2, #13]
    64ca:	f7fe fd1b 	bl	4f04 <z_spin_unlock_valid>
    64ce:	b968      	cbnz	r0, 64ec <z_tick_sleep+0xc4>
    64d0:	23c3      	movs	r3, #195	; 0xc3
    64d2:	4a1c      	ldr	r2, [pc, #112]	; (6544 <z_tick_sleep+0x11c>)
    64d4:	4921      	ldr	r1, [pc, #132]	; (655c <z_tick_sleep+0x134>)
    64d6:	4818      	ldr	r0, [pc, #96]	; (6538 <z_tick_sleep+0x110>)
    64d8:	f000 fe7e 	bl	71d8 <printk>
    64dc:	4918      	ldr	r1, [pc, #96]	; (6540 <z_tick_sleep+0x118>)
    64de:	4820      	ldr	r0, [pc, #128]	; (6560 <z_tick_sleep+0x138>)
    64e0:	f000 fe7a 	bl	71d8 <printk>
    64e4:	21c3      	movs	r1, #195	; 0xc3
    64e6:	4817      	ldr	r0, [pc, #92]	; (6544 <z_tick_sleep+0x11c>)
    64e8:	f000 ff4f 	bl	738a <assert_post_action>
    64ec:	4640      	mov	r0, r8
    64ee:	f7fc fac9 	bl	2a84 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    64f2:	68ab      	ldr	r3, [r5, #8]
    64f4:	7b5b      	ldrb	r3, [r3, #13]
    64f6:	06db      	lsls	r3, r3, #27
    64f8:	d50e      	bpl.n	6518 <z_tick_sleep+0xf0>
    64fa:	491a      	ldr	r1, [pc, #104]	; (6564 <z_tick_sleep+0x13c>)
    64fc:	f240 43ef 	movw	r3, #1263	; 0x4ef
    6500:	4a0c      	ldr	r2, [pc, #48]	; (6534 <z_tick_sleep+0x10c>)
    6502:	480d      	ldr	r0, [pc, #52]	; (6538 <z_tick_sleep+0x110>)
    6504:	f000 fe68 	bl	71d8 <printk>
    6508:	480c      	ldr	r0, [pc, #48]	; (653c <z_tick_sleep+0x114>)
    650a:	f000 fe65 	bl	71d8 <printk>
    650e:	f240 41ef 	movw	r1, #1263	; 0x4ef
    6512:	4808      	ldr	r0, [pc, #32]	; (6534 <z_tick_sleep+0x10c>)
    6514:	f000 ff39 	bl	738a <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6518:	f001 fc8d 	bl	7e36 <sys_clock_tick_get_32>
    651c:	1a20      	subs	r0, r4, r0
    651e:	eb64 0104 	sbc.w	r1, r4, r4
    6522:	2800      	cmp	r0, #0
    6524:	f171 0300 	sbcs.w	r3, r1, #0
    6528:	bfb8      	it	lt
    652a:	2000      	movlt	r0, #0
    652c:	e798      	b.n	6460 <z_tick_sleep+0x38>
    652e:	bf00      	nop
    6530:	00009690 	.word	0x00009690
    6534:	0000981e 	.word	0x0000981e
    6538:	00008496 	.word	0x00008496
    653c:	0000977d 	.word	0x0000977d
    6540:	20000ae0 	.word	0x20000ae0
    6544:	00008556 	.word	0x00008556
    6548:	000085a8 	.word	0x000085a8
    654c:	000085bd 	.word	0x000085bd
    6550:	20000aa4 	.word	0x20000aa4
    6554:	20000adc 	.word	0x20000adc
    6558:	00005f89 	.word	0x00005f89
    655c:	0000857c 	.word	0x0000857c
    6560:	00008593 	.word	0x00008593
    6564:	000098d0 	.word	0x000098d0

00006568 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6568:	b538      	push	{r3, r4, r5, lr}
    656a:	4604      	mov	r4, r0
    656c:	460d      	mov	r5, r1
    656e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6572:	b173      	cbz	r3, 6592 <z_impl_k_sleep+0x2a>
    6574:	4913      	ldr	r1, [pc, #76]	; (65c4 <z_impl_k_sleep+0x5c>)
    6576:	f240 43fe 	movw	r3, #1278	; 0x4fe
    657a:	4a13      	ldr	r2, [pc, #76]	; (65c8 <z_impl_k_sleep+0x60>)
    657c:	4813      	ldr	r0, [pc, #76]	; (65cc <z_impl_k_sleep+0x64>)
    657e:	f000 fe2b 	bl	71d8 <printk>
    6582:	4813      	ldr	r0, [pc, #76]	; (65d0 <z_impl_k_sleep+0x68>)
    6584:	f000 fe28 	bl	71d8 <printk>
    6588:	f240 41fe 	movw	r1, #1278	; 0x4fe
    658c:	480e      	ldr	r0, [pc, #56]	; (65c8 <z_impl_k_sleep+0x60>)
    658e:	f000 fefc 	bl	738a <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6592:	1c6b      	adds	r3, r5, #1
    6594:	bf08      	it	eq
    6596:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    659a:	d106      	bne.n	65aa <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    659c:	4b0d      	ldr	r3, [pc, #52]	; (65d4 <z_impl_k_sleep+0x6c>)
    659e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    65a0:	f7ff fa4c 	bl	5a3c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    65a4:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    65a8:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    65aa:	4620      	mov	r0, r4
    65ac:	4629      	mov	r1, r5
    65ae:	f7ff ff3b 	bl	6428 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    65b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    65b6:	fb80 3403 	smull	r3, r4, r0, r3
    65ba:	0bd8      	lsrs	r0, r3, #15
    65bc:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    65c0:	e7f2      	b.n	65a8 <z_impl_k_sleep+0x40>
    65c2:	bf00      	nop
    65c4:	00009690 	.word	0x00009690
    65c8:	0000981e 	.word	0x0000981e
    65cc:	00008496 	.word	0x00008496
    65d0:	0000977d 	.word	0x0000977d
    65d4:	20000aa4 	.word	0x20000aa4

000065d8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    65d8:	4b01      	ldr	r3, [pc, #4]	; (65e0 <z_impl_k_current_get+0x8>)
    65da:	6898      	ldr	r0, [r3, #8]
    65dc:	4770      	bx	lr
    65de:	bf00      	nop
    65e0:	20000aa4 	.word	0x20000aa4

000065e4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    65e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65e8:	4604      	mov	r4, r0
    65ea:	f04f 0320 	mov.w	r3, #32
    65ee:	f3ef 8611 	mrs	r6, BASEPRI
    65f2:	f383 8811 	msr	BASEPRI, r3
    65f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65fa:	4848      	ldr	r0, [pc, #288]	; (671c <z_thread_abort+0x138>)
    65fc:	f7fe fc74 	bl	4ee8 <z_spin_lock_valid>
    6600:	b968      	cbnz	r0, 661e <z_thread_abort+0x3a>
    6602:	2381      	movs	r3, #129	; 0x81
    6604:	4a46      	ldr	r2, [pc, #280]	; (6720 <z_thread_abort+0x13c>)
    6606:	4947      	ldr	r1, [pc, #284]	; (6724 <z_thread_abort+0x140>)
    6608:	4847      	ldr	r0, [pc, #284]	; (6728 <z_thread_abort+0x144>)
    660a:	f000 fde5 	bl	71d8 <printk>
    660e:	4943      	ldr	r1, [pc, #268]	; (671c <z_thread_abort+0x138>)
    6610:	4846      	ldr	r0, [pc, #280]	; (672c <z_thread_abort+0x148>)
    6612:	f000 fde1 	bl	71d8 <printk>
    6616:	2181      	movs	r1, #129	; 0x81
    6618:	4841      	ldr	r0, [pc, #260]	; (6720 <z_thread_abort+0x13c>)
    661a:	f000 feb6 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    661e:	483f      	ldr	r0, [pc, #252]	; (671c <z_thread_abort+0x138>)
    6620:	f7fe fc7e 	bl	4f20 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6624:	7b63      	ldrb	r3, [r4, #13]
    6626:	071a      	lsls	r2, r3, #28
    6628:	d517      	bpl.n	665a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    662a:	483c      	ldr	r0, [pc, #240]	; (671c <z_thread_abort+0x138>)
    662c:	f7fe fc6a 	bl	4f04 <z_spin_unlock_valid>
    6630:	b968      	cbnz	r0, 664e <z_thread_abort+0x6a>
    6632:	23ac      	movs	r3, #172	; 0xac
    6634:	4a3a      	ldr	r2, [pc, #232]	; (6720 <z_thread_abort+0x13c>)
    6636:	493e      	ldr	r1, [pc, #248]	; (6730 <z_thread_abort+0x14c>)
    6638:	483b      	ldr	r0, [pc, #236]	; (6728 <z_thread_abort+0x144>)
    663a:	f000 fdcd 	bl	71d8 <printk>
    663e:	4937      	ldr	r1, [pc, #220]	; (671c <z_thread_abort+0x138>)
    6640:	483c      	ldr	r0, [pc, #240]	; (6734 <z_thread_abort+0x150>)
    6642:	f000 fdc9 	bl	71d8 <printk>
    6646:	21ac      	movs	r1, #172	; 0xac
    6648:	4835      	ldr	r0, [pc, #212]	; (6720 <z_thread_abort+0x13c>)
    664a:	f000 fe9e 	bl	738a <assert_post_action>
	__asm__ volatile(
    664e:	f386 8811 	msr	BASEPRI, r6
    6652:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    665a:	f023 0220 	bic.w	r2, r3, #32
    665e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6662:	09d2      	lsrs	r2, r2, #7
    6664:	d142      	bne.n	66ec <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6666:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6668:	68a3      	ldr	r3, [r4, #8]
    666a:	b113      	cbz	r3, 6672 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    666c:	4620      	mov	r0, r4
    666e:	f7ff f89d 	bl	57ac <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6672:	f104 0018 	add.w	r0, r4, #24
    6676:	f000 f9a7 	bl	69c8 <z_abort_timeout>
    667a:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    667e:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    6682:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6684:	42bd      	cmp	r5, r7
    6686:	d001      	beq.n	668c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6688:	2d00      	cmp	r5, #0
    668a:	d139      	bne.n	6700 <z_thread_abort+0x11c>
		update_cache(1);
    668c:	2001      	movs	r0, #1
    668e:	f7ff f8af 	bl	57f0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6692:	4b29      	ldr	r3, [pc, #164]	; (6738 <z_thread_abort+0x154>)
    6694:	689b      	ldr	r3, [r3, #8]
    6696:	42a3      	cmp	r3, r4
    6698:	d1c7      	bne.n	662a <z_thread_abort+0x46>
    669a:	f3ef 8305 	mrs	r3, IPSR
    669e:	2b00      	cmp	r3, #0
    66a0:	d1c3      	bne.n	662a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66a2:	481e      	ldr	r0, [pc, #120]	; (671c <z_thread_abort+0x138>)
    66a4:	f7fe fc2e 	bl	4f04 <z_spin_unlock_valid>
    66a8:	b968      	cbnz	r0, 66c6 <z_thread_abort+0xe2>
    66aa:	23c3      	movs	r3, #195	; 0xc3
    66ac:	4a1c      	ldr	r2, [pc, #112]	; (6720 <z_thread_abort+0x13c>)
    66ae:	4920      	ldr	r1, [pc, #128]	; (6730 <z_thread_abort+0x14c>)
    66b0:	481d      	ldr	r0, [pc, #116]	; (6728 <z_thread_abort+0x144>)
    66b2:	f000 fd91 	bl	71d8 <printk>
    66b6:	4919      	ldr	r1, [pc, #100]	; (671c <z_thread_abort+0x138>)
    66b8:	481e      	ldr	r0, [pc, #120]	; (6734 <z_thread_abort+0x150>)
    66ba:	f000 fd8d 	bl	71d8 <printk>
    66be:	21c3      	movs	r1, #195	; 0xc3
    66c0:	4817      	ldr	r0, [pc, #92]	; (6720 <z_thread_abort+0x13c>)
    66c2:	f000 fe62 	bl	738a <assert_post_action>
    66c6:	4630      	mov	r0, r6
    66c8:	f7fc f9dc 	bl	2a84 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    66cc:	f240 6311 	movw	r3, #1553	; 0x611
    66d0:	4a1a      	ldr	r2, [pc, #104]	; (673c <z_thread_abort+0x158>)
    66d2:	491b      	ldr	r1, [pc, #108]	; (6740 <z_thread_abort+0x15c>)
    66d4:	4814      	ldr	r0, [pc, #80]	; (6728 <z_thread_abort+0x144>)
    66d6:	f000 fd7f 	bl	71d8 <printk>
    66da:	481a      	ldr	r0, [pc, #104]	; (6744 <z_thread_abort+0x160>)
    66dc:	f000 fd7c 	bl	71d8 <printk>
    66e0:	f240 6111 	movw	r1, #1553	; 0x611
    66e4:	4815      	ldr	r0, [pc, #84]	; (673c <z_thread_abort+0x158>)
    66e6:	f000 fe50 	bl	738a <assert_post_action>
    66ea:	e79e      	b.n	662a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    66ec:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    66f0:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    66f4:	4621      	mov	r1, r4
    66f6:	4814      	ldr	r0, [pc, #80]	; (6748 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    66f8:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    66fa:	f7ff f835 	bl	5768 <z_priq_dumb_remove>
}
    66fe:	e7b3      	b.n	6668 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6700:	4628      	mov	r0, r5
    6702:	f7ff f853 	bl	57ac <unpend_thread_no_timeout>
    6706:	f105 0018 	add.w	r0, r5, #24
    670a:	f000 f95d 	bl	69c8 <z_abort_timeout>
		ready_thread(thread);
    670e:	4628      	mov	r0, r5
    6710:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    6714:	f7ff fb48 	bl	5da8 <ready_thread>
    6718:	e7b3      	b.n	6682 <z_thread_abort+0x9e>
    671a:	bf00      	nop
    671c:	20000ae0 	.word	0x20000ae0
    6720:	00008556 	.word	0x00008556
    6724:	000085a8 	.word	0x000085a8
    6728:	00008496 	.word	0x00008496
    672c:	000085bd 	.word	0x000085bd
    6730:	0000857c 	.word	0x0000857c
    6734:	00008593 	.word	0x00008593
    6738:	20000aa4 	.word	0x20000aa4
    673c:	0000981e 	.word	0x0000981e
    6740:	0000853e 	.word	0x0000853e
    6744:	00009910 	.word	0x00009910
    6748:	20000acc 	.word	0x20000acc

0000674c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    674c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    674e:	4806      	ldr	r0, [pc, #24]	; (6768 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    6750:	4a06      	ldr	r2, [pc, #24]	; (676c <z_data_copy+0x20>)
    6752:	4907      	ldr	r1, [pc, #28]	; (6770 <z_data_copy+0x24>)
    6754:	1a12      	subs	r2, r2, r0
    6756:	f001 f98d 	bl	7a74 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    675a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    675e:	4a05      	ldr	r2, [pc, #20]	; (6774 <z_data_copy+0x28>)
    6760:	4905      	ldr	r1, [pc, #20]	; (6778 <z_data_copy+0x2c>)
    6762:	4806      	ldr	r0, [pc, #24]	; (677c <z_data_copy+0x30>)
    6764:	f001 b986 	b.w	7a74 <memcpy>
    6768:	20000000 	.word	0x20000000
    676c:	20000188 	.word	0x20000188
    6770:	000099b0 	.word	0x000099b0
    6774:	00000000 	.word	0x00000000
    6778:	000099b0 	.word	0x000099b0
    677c:	20000000 	.word	0x20000000

00006780 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6780:	4b03      	ldr	r3, [pc, #12]	; (6790 <elapsed+0x10>)
    6782:	681b      	ldr	r3, [r3, #0]
    6784:	b90b      	cbnz	r3, 678a <elapsed+0xa>
    6786:	f7fc b841 	b.w	280c <sys_clock_elapsed>
}
    678a:	2000      	movs	r0, #0
    678c:	4770      	bx	lr
    678e:	bf00      	nop
    6790:	20000aec 	.word	0x20000aec

00006794 <next_timeout>:

static int32_t next_timeout(void)
{
    6794:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    6796:	4b13      	ldr	r3, [pc, #76]	; (67e4 <next_timeout+0x50>)
    6798:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    679a:	429c      	cmp	r4, r3
    679c:	bf08      	it	eq
    679e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    67a0:	f7ff ffee 	bl	6780 <elapsed>
    67a4:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    67a6:	b1bc      	cbz	r4, 67d8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    67a8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    67ac:	1b40      	subs	r0, r0, r5
    67ae:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    67b2:	2801      	cmp	r0, #1
    67b4:	f171 0300 	sbcs.w	r3, r1, #0
    67b8:	db11      	blt.n	67de <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    67ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    67be:	2300      	movs	r3, #0
    67c0:	4282      	cmp	r2, r0
    67c2:	eb73 0401 	sbcs.w	r4, r3, r1
    67c6:	da00      	bge.n	67ca <next_timeout+0x36>
    67c8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    67ca:	4b07      	ldr	r3, [pc, #28]	; (67e8 <next_timeout+0x54>)
    67cc:	691b      	ldr	r3, [r3, #16]
    67ce:	b113      	cbz	r3, 67d6 <next_timeout+0x42>
    67d0:	4298      	cmp	r0, r3
    67d2:	bfa8      	it	ge
    67d4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    67d6:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    67d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    67dc:	e7f5      	b.n	67ca <next_timeout+0x36>
    67de:	2000      	movs	r0, #0
    67e0:	e7f3      	b.n	67ca <next_timeout+0x36>
    67e2:	bf00      	nop
    67e4:	20000048 	.word	0x20000048
    67e8:	20000aa4 	.word	0x20000aa4

000067ec <remove_timeout>:
{
    67ec:	b530      	push	{r4, r5, lr}
    67ee:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    67f0:	b168      	cbz	r0, 680e <remove_timeout+0x22>
    67f2:	4a0a      	ldr	r2, [pc, #40]	; (681c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    67f4:	6852      	ldr	r2, [r2, #4]
    67f6:	4290      	cmp	r0, r2
    67f8:	d009      	beq.n	680e <remove_timeout+0x22>
	if (next(t) != NULL) {
    67fa:	b143      	cbz	r3, 680e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    67fc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6800:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6804:	1912      	adds	r2, r2, r4
    6806:	eb45 0101 	adc.w	r1, r5, r1
    680a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    680e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    6810:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6812:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6814:	2300      	movs	r3, #0
	node->prev = NULL;
    6816:	e9c0 3300 	strd	r3, r3, [r0]
}
    681a:	bd30      	pop	{r4, r5, pc}
    681c:	20000048 	.word	0x20000048

00006820 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    6820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6824:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6826:	1c6b      	adds	r3, r5, #1
    6828:	bf08      	it	eq
    682a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    682e:	4682      	mov	sl, r0
    6830:	468b      	mov	fp, r1
    6832:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6834:	f000 80aa 	beq.w	698c <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6838:	6803      	ldr	r3, [r0, #0]
    683a:	b163      	cbz	r3, 6856 <z_add_timeout+0x36>
    683c:	4955      	ldr	r1, [pc, #340]	; (6994 <z_add_timeout+0x174>)
    683e:	235d      	movs	r3, #93	; 0x5d
    6840:	4a55      	ldr	r2, [pc, #340]	; (6998 <z_add_timeout+0x178>)
    6842:	4856      	ldr	r0, [pc, #344]	; (699c <z_add_timeout+0x17c>)
    6844:	f000 fcc8 	bl	71d8 <printk>
    6848:	4855      	ldr	r0, [pc, #340]	; (69a0 <z_add_timeout+0x180>)
    684a:	f000 fcc5 	bl	71d8 <printk>
    684e:	215d      	movs	r1, #93	; 0x5d
    6850:	4851      	ldr	r0, [pc, #324]	; (6998 <z_add_timeout+0x178>)
    6852:	f000 fd9a 	bl	738a <assert_post_action>
	to->fn = fn;
    6856:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    685a:	f04f 0320 	mov.w	r3, #32
    685e:	f3ef 8b11 	mrs	fp, BASEPRI
    6862:	f383 8811 	msr	BASEPRI, r3
    6866:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    686a:	484e      	ldr	r0, [pc, #312]	; (69a4 <z_add_timeout+0x184>)
    686c:	f7fe fb3c 	bl	4ee8 <z_spin_lock_valid>
    6870:	b968      	cbnz	r0, 688e <z_add_timeout+0x6e>
    6872:	2381      	movs	r3, #129	; 0x81
    6874:	4a4c      	ldr	r2, [pc, #304]	; (69a8 <z_add_timeout+0x188>)
    6876:	494d      	ldr	r1, [pc, #308]	; (69ac <z_add_timeout+0x18c>)
    6878:	4848      	ldr	r0, [pc, #288]	; (699c <z_add_timeout+0x17c>)
    687a:	f000 fcad 	bl	71d8 <printk>
    687e:	4949      	ldr	r1, [pc, #292]	; (69a4 <z_add_timeout+0x184>)
    6880:	484b      	ldr	r0, [pc, #300]	; (69b0 <z_add_timeout+0x190>)
    6882:	f000 fca9 	bl	71d8 <printk>
    6886:	2181      	movs	r1, #129	; 0x81
    6888:	4847      	ldr	r0, [pc, #284]	; (69a8 <z_add_timeout+0x188>)
    688a:	f000 fd7e 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    688e:	4845      	ldr	r0, [pc, #276]	; (69a4 <z_add_timeout+0x184>)
    6890:	f7fe fb46 	bl	4f20 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6894:	f06f 0301 	mvn.w	r3, #1
    6898:	f04f 32ff 	mov.w	r2, #4294967295
    689c:	ebb3 0804 	subs.w	r8, r3, r4
    68a0:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    68a4:	f1b8 0f00 	cmp.w	r8, #0
    68a8:	f179 0100 	sbcs.w	r1, r9, #0
    68ac:	db1c      	blt.n	68e8 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    68ae:	4841      	ldr	r0, [pc, #260]	; (69b4 <z_add_timeout+0x194>)
    68b0:	e9d0 1000 	ldrd	r1, r0, [r0]
    68b4:	1a5b      	subs	r3, r3, r1
    68b6:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    68ba:	1b1e      	subs	r6, r3, r4
    68bc:	eb62 0705 	sbc.w	r7, r2, r5
    68c0:	2e01      	cmp	r6, #1
    68c2:	f177 0300 	sbcs.w	r3, r7, #0
    68c6:	bfbc      	itt	lt
    68c8:	2601      	movlt	r6, #1
    68ca:	2700      	movlt	r7, #0
    68cc:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    68d0:	4a39      	ldr	r2, [pc, #228]	; (69b8 <z_add_timeout+0x198>)
    68d2:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68d6:	4293      	cmp	r3, r2
    68d8:	d11d      	bne.n	6916 <z_add_timeout+0xf6>
	node->prev = tail;
    68da:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    68de:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    68e2:	f8c2 a004 	str.w	sl, [r2, #4]
}
    68e6:	e02c      	b.n	6942 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    68e8:	f7ff ff4a 	bl	6780 <elapsed>
    68ec:	1c63      	adds	r3, r4, #1
    68ee:	9300      	str	r3, [sp, #0]
    68f0:	f145 0300 	adc.w	r3, r5, #0
    68f4:	9301      	str	r3, [sp, #4]
    68f6:	e9dd 2300 	ldrd	r2, r3, [sp]
    68fa:	1812      	adds	r2, r2, r0
    68fc:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    6900:	e9ca 2304 	strd	r2, r3, [sl, #16]
    6904:	e7e4      	b.n	68d0 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    6906:	1be0      	subs	r0, r4, r7
    6908:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    690c:	42b3      	cmp	r3, r6
    690e:	e9ca 0104 	strd	r0, r1, [sl, #16]
    6912:	d0e2      	beq.n	68da <z_add_timeout+0xba>
    6914:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    6916:	2b00      	cmp	r3, #0
    6918:	d0df      	beq.n	68da <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    691a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    691e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    6922:	42bc      	cmp	r4, r7
    6924:	eb75 0108 	sbcs.w	r1, r5, r8
    6928:	daed      	bge.n	6906 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    692a:	1b38      	subs	r0, r7, r4
    692c:	eb68 0105 	sbc.w	r1, r8, r5
    6930:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6934:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6936:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    693a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    693e:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    6942:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6944:	4293      	cmp	r3, r2
    6946:	d00b      	beq.n	6960 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6948:	459a      	cmp	sl, r3
    694a:	d109      	bne.n	6960 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    694c:	f7ff ff22 	bl	6794 <next_timeout>

			if (next_time == 0 ||
    6950:	b118      	cbz	r0, 695a <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    6952:	4b1a      	ldr	r3, [pc, #104]	; (69bc <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    6954:	691b      	ldr	r3, [r3, #16]
    6956:	4283      	cmp	r3, r0
    6958:	d002      	beq.n	6960 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    695a:	2100      	movs	r1, #0
    695c:	f7fb ff24 	bl	27a8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6960:	4810      	ldr	r0, [pc, #64]	; (69a4 <z_add_timeout+0x184>)
    6962:	f7fe facf 	bl	4f04 <z_spin_unlock_valid>
    6966:	b968      	cbnz	r0, 6984 <z_add_timeout+0x164>
    6968:	23ac      	movs	r3, #172	; 0xac
    696a:	4a0f      	ldr	r2, [pc, #60]	; (69a8 <z_add_timeout+0x188>)
    696c:	4914      	ldr	r1, [pc, #80]	; (69c0 <z_add_timeout+0x1a0>)
    696e:	480b      	ldr	r0, [pc, #44]	; (699c <z_add_timeout+0x17c>)
    6970:	f000 fc32 	bl	71d8 <printk>
    6974:	490b      	ldr	r1, [pc, #44]	; (69a4 <z_add_timeout+0x184>)
    6976:	4813      	ldr	r0, [pc, #76]	; (69c4 <z_add_timeout+0x1a4>)
    6978:	f000 fc2e 	bl	71d8 <printk>
    697c:	21ac      	movs	r1, #172	; 0xac
    697e:	480a      	ldr	r0, [pc, #40]	; (69a8 <z_add_timeout+0x188>)
    6980:	f000 fd03 	bl	738a <assert_post_action>
	__asm__ volatile(
    6984:	f38b 8811 	msr	BASEPRI, fp
    6988:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    698c:	b003      	add	sp, #12
    698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6992:	bf00      	nop
    6994:	00009956 	.word	0x00009956
    6998:	00009932 	.word	0x00009932
    699c:	00008496 	.word	0x00008496
    69a0:	0000977d 	.word	0x0000977d
    69a4:	20000af0 	.word	0x20000af0
    69a8:	00008556 	.word	0x00008556
    69ac:	000085a8 	.word	0x000085a8
    69b0:	000085bd 	.word	0x000085bd
    69b4:	20000340 	.word	0x20000340
    69b8:	20000048 	.word	0x20000048
    69bc:	20000aa4 	.word	0x20000aa4
    69c0:	0000857c 	.word	0x0000857c
    69c4:	00008593 	.word	0x00008593

000069c8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    69c8:	b538      	push	{r3, r4, r5, lr}
    69ca:	4604      	mov	r4, r0
	__asm__ volatile(
    69cc:	f04f 0320 	mov.w	r3, #32
    69d0:	f3ef 8511 	mrs	r5, BASEPRI
    69d4:	f383 8811 	msr	BASEPRI, r3
    69d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69dc:	481a      	ldr	r0, [pc, #104]	; (6a48 <z_abort_timeout+0x80>)
    69de:	f7fe fa83 	bl	4ee8 <z_spin_lock_valid>
    69e2:	b968      	cbnz	r0, 6a00 <z_abort_timeout+0x38>
    69e4:	2381      	movs	r3, #129	; 0x81
    69e6:	4a19      	ldr	r2, [pc, #100]	; (6a4c <z_abort_timeout+0x84>)
    69e8:	4919      	ldr	r1, [pc, #100]	; (6a50 <z_abort_timeout+0x88>)
    69ea:	481a      	ldr	r0, [pc, #104]	; (6a54 <z_abort_timeout+0x8c>)
    69ec:	f000 fbf4 	bl	71d8 <printk>
    69f0:	4915      	ldr	r1, [pc, #84]	; (6a48 <z_abort_timeout+0x80>)
    69f2:	4819      	ldr	r0, [pc, #100]	; (6a58 <z_abort_timeout+0x90>)
    69f4:	f000 fbf0 	bl	71d8 <printk>
    69f8:	2181      	movs	r1, #129	; 0x81
    69fa:	4814      	ldr	r0, [pc, #80]	; (6a4c <z_abort_timeout+0x84>)
    69fc:	f000 fcc5 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    6a00:	4811      	ldr	r0, [pc, #68]	; (6a48 <z_abort_timeout+0x80>)
    6a02:	f7fe fa8d 	bl	4f20 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    6a06:	6823      	ldr	r3, [r4, #0]
    6a08:	b1db      	cbz	r3, 6a42 <z_abort_timeout+0x7a>
			remove_timeout(to);
    6a0a:	4620      	mov	r0, r4
    6a0c:	f7ff feee 	bl	67ec <remove_timeout>
			ret = 0;
    6a10:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a12:	480d      	ldr	r0, [pc, #52]	; (6a48 <z_abort_timeout+0x80>)
    6a14:	f7fe fa76 	bl	4f04 <z_spin_unlock_valid>
    6a18:	b968      	cbnz	r0, 6a36 <z_abort_timeout+0x6e>
    6a1a:	23ac      	movs	r3, #172	; 0xac
    6a1c:	4a0b      	ldr	r2, [pc, #44]	; (6a4c <z_abort_timeout+0x84>)
    6a1e:	490f      	ldr	r1, [pc, #60]	; (6a5c <z_abort_timeout+0x94>)
    6a20:	480c      	ldr	r0, [pc, #48]	; (6a54 <z_abort_timeout+0x8c>)
    6a22:	f000 fbd9 	bl	71d8 <printk>
    6a26:	4908      	ldr	r1, [pc, #32]	; (6a48 <z_abort_timeout+0x80>)
    6a28:	480d      	ldr	r0, [pc, #52]	; (6a60 <z_abort_timeout+0x98>)
    6a2a:	f000 fbd5 	bl	71d8 <printk>
    6a2e:	21ac      	movs	r1, #172	; 0xac
    6a30:	4806      	ldr	r0, [pc, #24]	; (6a4c <z_abort_timeout+0x84>)
    6a32:	f000 fcaa 	bl	738a <assert_post_action>
	__asm__ volatile(
    6a36:	f385 8811 	msr	BASEPRI, r5
    6a3a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6a3e:	4620      	mov	r0, r4
    6a40:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    6a42:	f06f 0415 	mvn.w	r4, #21
    6a46:	e7e4      	b.n	6a12 <z_abort_timeout+0x4a>
    6a48:	20000af0 	.word	0x20000af0
    6a4c:	00008556 	.word	0x00008556
    6a50:	000085a8 	.word	0x000085a8
    6a54:	00008496 	.word	0x00008496
    6a58:	000085bd 	.word	0x000085bd
    6a5c:	0000857c 	.word	0x0000857c
    6a60:	00008593 	.word	0x00008593

00006a64 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    6a64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6a66:	f04f 0320 	mov.w	r3, #32
    6a6a:	f3ef 8511 	mrs	r5, BASEPRI
    6a6e:	f383 8811 	msr	BASEPRI, r3
    6a72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a76:	4818      	ldr	r0, [pc, #96]	; (6ad8 <z_get_next_timeout_expiry+0x74>)
    6a78:	f7fe fa36 	bl	4ee8 <z_spin_lock_valid>
    6a7c:	b968      	cbnz	r0, 6a9a <z_get_next_timeout_expiry+0x36>
    6a7e:	2381      	movs	r3, #129	; 0x81
    6a80:	4a16      	ldr	r2, [pc, #88]	; (6adc <z_get_next_timeout_expiry+0x78>)
    6a82:	4917      	ldr	r1, [pc, #92]	; (6ae0 <z_get_next_timeout_expiry+0x7c>)
    6a84:	4817      	ldr	r0, [pc, #92]	; (6ae4 <z_get_next_timeout_expiry+0x80>)
    6a86:	f000 fba7 	bl	71d8 <printk>
    6a8a:	4913      	ldr	r1, [pc, #76]	; (6ad8 <z_get_next_timeout_expiry+0x74>)
    6a8c:	4816      	ldr	r0, [pc, #88]	; (6ae8 <z_get_next_timeout_expiry+0x84>)
    6a8e:	f000 fba3 	bl	71d8 <printk>
    6a92:	2181      	movs	r1, #129	; 0x81
    6a94:	4811      	ldr	r0, [pc, #68]	; (6adc <z_get_next_timeout_expiry+0x78>)
    6a96:	f000 fc78 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    6a9a:	480f      	ldr	r0, [pc, #60]	; (6ad8 <z_get_next_timeout_expiry+0x74>)
    6a9c:	f7fe fa40 	bl	4f20 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6aa0:	f7ff fe78 	bl	6794 <next_timeout>
    6aa4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6aa6:	480c      	ldr	r0, [pc, #48]	; (6ad8 <z_get_next_timeout_expiry+0x74>)
    6aa8:	f7fe fa2c 	bl	4f04 <z_spin_unlock_valid>
    6aac:	b968      	cbnz	r0, 6aca <z_get_next_timeout_expiry+0x66>
    6aae:	23ac      	movs	r3, #172	; 0xac
    6ab0:	4a0a      	ldr	r2, [pc, #40]	; (6adc <z_get_next_timeout_expiry+0x78>)
    6ab2:	490e      	ldr	r1, [pc, #56]	; (6aec <z_get_next_timeout_expiry+0x88>)
    6ab4:	480b      	ldr	r0, [pc, #44]	; (6ae4 <z_get_next_timeout_expiry+0x80>)
    6ab6:	f000 fb8f 	bl	71d8 <printk>
    6aba:	4907      	ldr	r1, [pc, #28]	; (6ad8 <z_get_next_timeout_expiry+0x74>)
    6abc:	480c      	ldr	r0, [pc, #48]	; (6af0 <z_get_next_timeout_expiry+0x8c>)
    6abe:	f000 fb8b 	bl	71d8 <printk>
    6ac2:	21ac      	movs	r1, #172	; 0xac
    6ac4:	4805      	ldr	r0, [pc, #20]	; (6adc <z_get_next_timeout_expiry+0x78>)
    6ac6:	f000 fc60 	bl	738a <assert_post_action>
	__asm__ volatile(
    6aca:	f385 8811 	msr	BASEPRI, r5
    6ace:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    6ad2:	4620      	mov	r0, r4
    6ad4:	bd38      	pop	{r3, r4, r5, pc}
    6ad6:	bf00      	nop
    6ad8:	20000af0 	.word	0x20000af0
    6adc:	00008556 	.word	0x00008556
    6ae0:	000085a8 	.word	0x000085a8
    6ae4:	00008496 	.word	0x00008496
    6ae8:	000085bd 	.word	0x000085bd
    6aec:	0000857c 	.word	0x0000857c
    6af0:	00008593 	.word	0x00008593

00006af4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6af4:	b570      	push	{r4, r5, r6, lr}
    6af6:	4604      	mov	r4, r0
    6af8:	460d      	mov	r5, r1
	__asm__ volatile(
    6afa:	f04f 0320 	mov.w	r3, #32
    6afe:	f3ef 8611 	mrs	r6, BASEPRI
    6b02:	f383 8811 	msr	BASEPRI, r3
    6b06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b0a:	481b      	ldr	r0, [pc, #108]	; (6b78 <z_set_timeout_expiry+0x84>)
    6b0c:	f7fe f9ec 	bl	4ee8 <z_spin_lock_valid>
    6b10:	b968      	cbnz	r0, 6b2e <z_set_timeout_expiry+0x3a>
    6b12:	2381      	movs	r3, #129	; 0x81
    6b14:	4a19      	ldr	r2, [pc, #100]	; (6b7c <z_set_timeout_expiry+0x88>)
    6b16:	491a      	ldr	r1, [pc, #104]	; (6b80 <z_set_timeout_expiry+0x8c>)
    6b18:	481a      	ldr	r0, [pc, #104]	; (6b84 <z_set_timeout_expiry+0x90>)
    6b1a:	f000 fb5d 	bl	71d8 <printk>
    6b1e:	4916      	ldr	r1, [pc, #88]	; (6b78 <z_set_timeout_expiry+0x84>)
    6b20:	4819      	ldr	r0, [pc, #100]	; (6b88 <z_set_timeout_expiry+0x94>)
    6b22:	f000 fb59 	bl	71d8 <printk>
    6b26:	2181      	movs	r1, #129	; 0x81
    6b28:	4814      	ldr	r0, [pc, #80]	; (6b7c <z_set_timeout_expiry+0x88>)
    6b2a:	f000 fc2e 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    6b2e:	4812      	ldr	r0, [pc, #72]	; (6b78 <z_set_timeout_expiry+0x84>)
    6b30:	f7fe f9f6 	bl	4f20 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    6b34:	f7ff fe2e 	bl	6794 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6b38:	2801      	cmp	r0, #1
    6b3a:	dd05      	ble.n	6b48 <z_set_timeout_expiry+0x54>
    6b3c:	42a0      	cmp	r0, r4
    6b3e:	db03      	blt.n	6b48 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6b40:	4629      	mov	r1, r5
    6b42:	4620      	mov	r0, r4
    6b44:	f7fb fe30 	bl	27a8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b48:	480b      	ldr	r0, [pc, #44]	; (6b78 <z_set_timeout_expiry+0x84>)
    6b4a:	f7fe f9db 	bl	4f04 <z_spin_unlock_valid>
    6b4e:	b968      	cbnz	r0, 6b6c <z_set_timeout_expiry+0x78>
    6b50:	23ac      	movs	r3, #172	; 0xac
    6b52:	4a0a      	ldr	r2, [pc, #40]	; (6b7c <z_set_timeout_expiry+0x88>)
    6b54:	490d      	ldr	r1, [pc, #52]	; (6b8c <z_set_timeout_expiry+0x98>)
    6b56:	480b      	ldr	r0, [pc, #44]	; (6b84 <z_set_timeout_expiry+0x90>)
    6b58:	f000 fb3e 	bl	71d8 <printk>
    6b5c:	4906      	ldr	r1, [pc, #24]	; (6b78 <z_set_timeout_expiry+0x84>)
    6b5e:	480c      	ldr	r0, [pc, #48]	; (6b90 <z_set_timeout_expiry+0x9c>)
    6b60:	f000 fb3a 	bl	71d8 <printk>
    6b64:	21ac      	movs	r1, #172	; 0xac
    6b66:	4805      	ldr	r0, [pc, #20]	; (6b7c <z_set_timeout_expiry+0x88>)
    6b68:	f000 fc0f 	bl	738a <assert_post_action>
	__asm__ volatile(
    6b6c:	f386 8811 	msr	BASEPRI, r6
    6b70:	f3bf 8f6f 	isb	sy
		}
	}
}
    6b74:	bd70      	pop	{r4, r5, r6, pc}
    6b76:	bf00      	nop
    6b78:	20000af0 	.word	0x20000af0
    6b7c:	00008556 	.word	0x00008556
    6b80:	000085a8 	.word	0x000085a8
    6b84:	00008496 	.word	0x00008496
    6b88:	000085bd 	.word	0x000085bd
    6b8c:	0000857c 	.word	0x0000857c
    6b90:	00008593 	.word	0x00008593

00006b94 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    6b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b98:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6b9a:	f7ff f88d 	bl	5cb8 <z_time_slice>
	__asm__ volatile(
    6b9e:	f04f 0320 	mov.w	r3, #32
    6ba2:	f3ef 8711 	mrs	r7, BASEPRI
    6ba6:	f383 8811 	msr	BASEPRI, r3
    6baa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bae:	4854      	ldr	r0, [pc, #336]	; (6d00 <sys_clock_announce+0x16c>)
    6bb0:	f7fe f99a 	bl	4ee8 <z_spin_lock_valid>
    6bb4:	b968      	cbnz	r0, 6bd2 <sys_clock_announce+0x3e>
    6bb6:	2381      	movs	r3, #129	; 0x81
    6bb8:	4a52      	ldr	r2, [pc, #328]	; (6d04 <sys_clock_announce+0x170>)
    6bba:	4953      	ldr	r1, [pc, #332]	; (6d08 <sys_clock_announce+0x174>)
    6bbc:	4853      	ldr	r0, [pc, #332]	; (6d0c <sys_clock_announce+0x178>)
    6bbe:	f000 fb0b 	bl	71d8 <printk>
    6bc2:	494f      	ldr	r1, [pc, #316]	; (6d00 <sys_clock_announce+0x16c>)
    6bc4:	4852      	ldr	r0, [pc, #328]	; (6d10 <sys_clock_announce+0x17c>)
    6bc6:	f000 fb07 	bl	71d8 <printk>
    6bca:	2181      	movs	r1, #129	; 0x81
    6bcc:	484d      	ldr	r0, [pc, #308]	; (6d04 <sys_clock_announce+0x170>)
    6bce:	f000 fbdc 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    6bd2:	4e50      	ldr	r6, [pc, #320]	; (6d14 <sys_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6bd4:	4d50      	ldr	r5, [pc, #320]	; (6d18 <sys_clock_announce+0x184>)
    6bd6:	46b3      	mov	fp, r6
    6bd8:	4849      	ldr	r0, [pc, #292]	; (6d00 <sys_clock_announce+0x16c>)
	return list->head == list;
    6bda:	f8df a148 	ldr.w	sl, [pc, #328]	; 6d24 <sys_clock_announce+0x190>
    6bde:	f7fe f99f 	bl	4f20 <z_spin_lock_set_owner>
    6be2:	602c      	str	r4, [r5, #0]
    6be4:	f8d5 c000 	ldr.w	ip, [r5]
    6be8:	e9d6 2300 	ldrd	r2, r3, [r6]
    6bec:	e9cd 2300 	strd	r2, r3, [sp]
    6bf0:	4662      	mov	r2, ip
    6bf2:	f8da 4000 	ldr.w	r4, [sl]
    6bf6:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6bf8:	4554      	cmp	r4, sl
    6bfa:	46e0      	mov	r8, ip
    6bfc:	4699      	mov	r9, r3
    6bfe:	d00c      	beq.n	6c1a <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    6c00:	b15c      	cbz	r4, 6c1a <sys_clock_announce+0x86>
    6c02:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    6c06:	458c      	cmp	ip, r1
    6c08:	eb79 0302 	sbcs.w	r3, r9, r2
    6c0c:	da2e      	bge.n	6c6c <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6c0e:	ebb1 000c 	subs.w	r0, r1, ip
    6c12:	eb62 0109 	sbc.w	r1, r2, r9
    6c16:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    6c1a:	464b      	mov	r3, r9
	announce_remaining = 0;
    6c1c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6c1e:	9a00      	ldr	r2, [sp, #0]
    6c20:	9901      	ldr	r1, [sp, #4]
    6c22:	eb18 0202 	adds.w	r2, r8, r2
    6c26:	eb43 0101 	adc.w	r1, r3, r1
    6c2a:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    6c2e:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6c30:	f7ff fdb0 	bl	6794 <next_timeout>
    6c34:	4621      	mov	r1, r4
    6c36:	f7fb fdb7 	bl	27a8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c3a:	4831      	ldr	r0, [pc, #196]	; (6d00 <sys_clock_announce+0x16c>)
    6c3c:	f7fe f962 	bl	4f04 <z_spin_unlock_valid>
    6c40:	b968      	cbnz	r0, 6c5e <sys_clock_announce+0xca>
    6c42:	23ac      	movs	r3, #172	; 0xac
    6c44:	4a2f      	ldr	r2, [pc, #188]	; (6d04 <sys_clock_announce+0x170>)
    6c46:	4935      	ldr	r1, [pc, #212]	; (6d1c <sys_clock_announce+0x188>)
    6c48:	4830      	ldr	r0, [pc, #192]	; (6d0c <sys_clock_announce+0x178>)
    6c4a:	f000 fac5 	bl	71d8 <printk>
    6c4e:	492c      	ldr	r1, [pc, #176]	; (6d00 <sys_clock_announce+0x16c>)
    6c50:	4833      	ldr	r0, [pc, #204]	; (6d20 <sys_clock_announce+0x18c>)
    6c52:	f000 fac1 	bl	71d8 <printk>
    6c56:	21ac      	movs	r1, #172	; 0xac
    6c58:	482a      	ldr	r0, [pc, #168]	; (6d04 <sys_clock_announce+0x170>)
    6c5a:	f000 fb96 	bl	738a <assert_post_action>
	__asm__ volatile(
    6c5e:	f387 8811 	msr	BASEPRI, r7
    6c62:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6c66:	b003      	add	sp, #12
    6c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    6c6c:	2200      	movs	r2, #0
		curr_tick += dt;
    6c6e:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
    6c72:	2300      	movs	r3, #0
		curr_tick += dt;
    6c74:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
    6c78:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    6c7c:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    6c80:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    6c82:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    6c86:	4620      	mov	r0, r4
		curr_tick += dt;
    6c88:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    6c8c:	f7ff fdae 	bl	67ec <remove_timeout>
    6c90:	481b      	ldr	r0, [pc, #108]	; (6d00 <sys_clock_announce+0x16c>)
    6c92:	f7fe f937 	bl	4f04 <z_spin_unlock_valid>
    6c96:	b968      	cbnz	r0, 6cb4 <sys_clock_announce+0x120>
    6c98:	23ac      	movs	r3, #172	; 0xac
    6c9a:	4a1a      	ldr	r2, [pc, #104]	; (6d04 <sys_clock_announce+0x170>)
    6c9c:	491f      	ldr	r1, [pc, #124]	; (6d1c <sys_clock_announce+0x188>)
    6c9e:	481b      	ldr	r0, [pc, #108]	; (6d0c <sys_clock_announce+0x178>)
    6ca0:	f000 fa9a 	bl	71d8 <printk>
    6ca4:	4916      	ldr	r1, [pc, #88]	; (6d00 <sys_clock_announce+0x16c>)
    6ca6:	481e      	ldr	r0, [pc, #120]	; (6d20 <sys_clock_announce+0x18c>)
    6ca8:	f000 fa96 	bl	71d8 <printk>
    6cac:	21ac      	movs	r1, #172	; 0xac
    6cae:	4815      	ldr	r0, [pc, #84]	; (6d04 <sys_clock_announce+0x170>)
    6cb0:	f000 fb6b 	bl	738a <assert_post_action>
    6cb4:	f387 8811 	msr	BASEPRI, r7
    6cb8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6cbc:	4620      	mov	r0, r4
    6cbe:	68a3      	ldr	r3, [r4, #8]
    6cc0:	4798      	blx	r3
	__asm__ volatile(
    6cc2:	f04f 0320 	mov.w	r3, #32
    6cc6:	f3ef 8711 	mrs	r7, BASEPRI
    6cca:	f383 8811 	msr	BASEPRI, r3
    6cce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cd2:	480b      	ldr	r0, [pc, #44]	; (6d00 <sys_clock_announce+0x16c>)
    6cd4:	f7fe f908 	bl	4ee8 <z_spin_lock_valid>
    6cd8:	b968      	cbnz	r0, 6cf6 <sys_clock_announce+0x162>
    6cda:	2381      	movs	r3, #129	; 0x81
    6cdc:	4a09      	ldr	r2, [pc, #36]	; (6d04 <sys_clock_announce+0x170>)
    6cde:	490a      	ldr	r1, [pc, #40]	; (6d08 <sys_clock_announce+0x174>)
    6ce0:	480a      	ldr	r0, [pc, #40]	; (6d0c <sys_clock_announce+0x178>)
    6ce2:	f000 fa79 	bl	71d8 <printk>
    6ce6:	4906      	ldr	r1, [pc, #24]	; (6d00 <sys_clock_announce+0x16c>)
    6ce8:	4809      	ldr	r0, [pc, #36]	; (6d10 <sys_clock_announce+0x17c>)
    6cea:	f000 fa75 	bl	71d8 <printk>
    6cee:	2181      	movs	r1, #129	; 0x81
    6cf0:	4804      	ldr	r0, [pc, #16]	; (6d04 <sys_clock_announce+0x170>)
    6cf2:	f000 fb4a 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    6cf6:	4802      	ldr	r0, [pc, #8]	; (6d00 <sys_clock_announce+0x16c>)
    6cf8:	f7fe f912 	bl	4f20 <z_spin_lock_set_owner>
	return k;
    6cfc:	e772      	b.n	6be4 <sys_clock_announce+0x50>
    6cfe:	bf00      	nop
    6d00:	20000af0 	.word	0x20000af0
    6d04:	00008556 	.word	0x00008556
    6d08:	000085a8 	.word	0x000085a8
    6d0c:	00008496 	.word	0x00008496
    6d10:	000085bd 	.word	0x000085bd
    6d14:	20000340 	.word	0x20000340
    6d18:	20000aec 	.word	0x20000aec
    6d1c:	0000857c 	.word	0x0000857c
    6d20:	00008593 	.word	0x00008593
    6d24:	20000048 	.word	0x20000048

00006d28 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6d28:	b570      	push	{r4, r5, r6, lr}
    6d2a:	f04f 0320 	mov.w	r3, #32
    6d2e:	f3ef 8611 	mrs	r6, BASEPRI
    6d32:	f383 8811 	msr	BASEPRI, r3
    6d36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d3a:	481b      	ldr	r0, [pc, #108]	; (6da8 <sys_clock_tick_get+0x80>)
    6d3c:	f7fe f8d4 	bl	4ee8 <z_spin_lock_valid>
    6d40:	b968      	cbnz	r0, 6d5e <sys_clock_tick_get+0x36>
    6d42:	2381      	movs	r3, #129	; 0x81
    6d44:	4a19      	ldr	r2, [pc, #100]	; (6dac <sys_clock_tick_get+0x84>)
    6d46:	491a      	ldr	r1, [pc, #104]	; (6db0 <sys_clock_tick_get+0x88>)
    6d48:	481a      	ldr	r0, [pc, #104]	; (6db4 <sys_clock_tick_get+0x8c>)
    6d4a:	f000 fa45 	bl	71d8 <printk>
    6d4e:	4916      	ldr	r1, [pc, #88]	; (6da8 <sys_clock_tick_get+0x80>)
    6d50:	4819      	ldr	r0, [pc, #100]	; (6db8 <sys_clock_tick_get+0x90>)
    6d52:	f000 fa41 	bl	71d8 <printk>
    6d56:	2181      	movs	r1, #129	; 0x81
    6d58:	4814      	ldr	r0, [pc, #80]	; (6dac <sys_clock_tick_get+0x84>)
    6d5a:	f000 fb16 	bl	738a <assert_post_action>
	z_spin_lock_set_owner(l);
    6d5e:	4812      	ldr	r0, [pc, #72]	; (6da8 <sys_clock_tick_get+0x80>)
    6d60:	f7fe f8de 	bl	4f20 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    6d64:	f7fb fd52 	bl	280c <sys_clock_elapsed>
    6d68:	4b14      	ldr	r3, [pc, #80]	; (6dbc <sys_clock_tick_get+0x94>)
    6d6a:	e9d3 4500 	ldrd	r4, r5, [r3]
    6d6e:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d70:	480d      	ldr	r0, [pc, #52]	; (6da8 <sys_clock_tick_get+0x80>)
    6d72:	f145 0500 	adc.w	r5, r5, #0
    6d76:	f7fe f8c5 	bl	4f04 <z_spin_unlock_valid>
    6d7a:	b968      	cbnz	r0, 6d98 <sys_clock_tick_get+0x70>
    6d7c:	23ac      	movs	r3, #172	; 0xac
    6d7e:	4a0b      	ldr	r2, [pc, #44]	; (6dac <sys_clock_tick_get+0x84>)
    6d80:	490f      	ldr	r1, [pc, #60]	; (6dc0 <sys_clock_tick_get+0x98>)
    6d82:	480c      	ldr	r0, [pc, #48]	; (6db4 <sys_clock_tick_get+0x8c>)
    6d84:	f000 fa28 	bl	71d8 <printk>
    6d88:	4907      	ldr	r1, [pc, #28]	; (6da8 <sys_clock_tick_get+0x80>)
    6d8a:	480e      	ldr	r0, [pc, #56]	; (6dc4 <sys_clock_tick_get+0x9c>)
    6d8c:	f000 fa24 	bl	71d8 <printk>
    6d90:	21ac      	movs	r1, #172	; 0xac
    6d92:	4806      	ldr	r0, [pc, #24]	; (6dac <sys_clock_tick_get+0x84>)
    6d94:	f000 faf9 	bl	738a <assert_post_action>
	__asm__ volatile(
    6d98:	f386 8811 	msr	BASEPRI, r6
    6d9c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6da0:	4620      	mov	r0, r4
    6da2:	4629      	mov	r1, r5
    6da4:	bd70      	pop	{r4, r5, r6, pc}
    6da6:	bf00      	nop
    6da8:	20000af0 	.word	0x20000af0
    6dac:	00008556 	.word	0x00008556
    6db0:	000085a8 	.word	0x000085a8
    6db4:	00008496 	.word	0x00008496
    6db8:	000085bd 	.word	0x000085bd
    6dbc:	20000340 	.word	0x20000340
    6dc0:	0000857c 	.word	0x0000857c
    6dc4:	00008593 	.word	0x00008593

00006dc8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6dca:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    6dce:	1c56      	adds	r6, r2, #1
    6dd0:	f143 0700 	adc.w	r7, r3, #0
    6dd4:	2f00      	cmp	r7, #0
    6dd6:	bf08      	it	eq
    6dd8:	2e02      	cmpeq	r6, #2
{
    6dda:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6ddc:	d302      	bcc.n	6de4 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6dde:	490d      	ldr	r1, [pc, #52]	; (6e14 <z_timer_expiration_handler+0x4c>)
    6de0:	f7ff fd1e 	bl	6820 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    6de4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6de6:	3301      	adds	r3, #1
    6de8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    6dea:	6a23      	ldr	r3, [r4, #32]
    6dec:	b10b      	cbz	r3, 6df2 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    6dee:	4620      	mov	r0, r4
    6df0:	4798      	blx	r3
	return list->head == list;
    6df2:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6df6:	42a5      	cmp	r5, r4
    6df8:	d00a      	beq.n	6e10 <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6dfa:	b14d      	cbz	r5, 6e10 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    6dfc:	4628      	mov	r0, r5
    6dfe:	f7fe fbb3 	bl	5568 <z_unpend_thread_no_timeout>
    6e02:	2300      	movs	r3, #0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
    6e04:	4628      	mov	r0, r5
    6e06:	67ab      	str	r3, [r5, #120]	; 0x78
}
    6e08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    6e0c:	f7ff b820 	b.w	5e50 <z_ready_thread>
}
    6e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e12:	bf00      	nop
    6e14:	00006dc9 	.word	0x00006dc9

00006e18 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    6e18:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    6e1c:	4619      	mov	r1, r3
    6e1e:	4606      	mov	r6, r0
    6e20:	4610      	mov	r0, r2
    6e22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6e26:	1c4c      	adds	r4, r1, #1
    6e28:	bf08      	it	eq
    6e2a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    6e2e:	4680      	mov	r8, r0
    6e30:	4689      	mov	r9, r1
    6e32:	d04c      	beq.n	6ece <z_impl_k_timer_start+0xb6>
    6e34:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6e36:	1c6b      	adds	r3, r5, #1
    6e38:	bf08      	it	eq
    6e3a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6e3e:	4614      	mov	r4, r2
    6e40:	d019      	beq.n	6e76 <z_impl_k_timer_start+0x5e>
    6e42:	ea54 0305 	orrs.w	r3, r4, r5
    6e46:	d016      	beq.n	6e76 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    6e48:	f06f 0301 	mvn.w	r3, #1
    6e4c:	ebb3 0a02 	subs.w	sl, r3, r2
    6e50:	f04f 33ff 	mov.w	r3, #4294967295
    6e54:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6e58:	f1ba 0f00 	cmp.w	sl, #0
    6e5c:	f17b 0300 	sbcs.w	r3, fp, #0
    6e60:	da09      	bge.n	6e76 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    6e62:	f112 34ff 	adds.w	r4, r2, #4294967295
    6e66:	f145 35ff 	adc.w	r5, r5, #4294967295
    6e6a:	2c01      	cmp	r4, #1
    6e6c:	f175 0300 	sbcs.w	r3, r5, #0
    6e70:	bfbc      	itt	lt
    6e72:	2401      	movlt	r4, #1
    6e74:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6e76:	f06f 0301 	mvn.w	r3, #1
    6e7a:	1a1b      	subs	r3, r3, r0
    6e7c:	9300      	str	r3, [sp, #0]
    6e7e:	f04f 33ff 	mov.w	r3, #4294967295
    6e82:	eb63 0301 	sbc.w	r3, r3, r1
    6e86:	9301      	str	r3, [sp, #4]
    6e88:	e9dd 2300 	ldrd	r2, r3, [sp]
    6e8c:	2a00      	cmp	r2, #0
    6e8e:	f173 0300 	sbcs.w	r3, r3, #0
    6e92:	da0c      	bge.n	6eae <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6e94:	f110 38ff 	adds.w	r8, r0, #4294967295
    6e98:	f141 39ff 	adc.w	r9, r1, #4294967295
    6e9c:	f1b8 0f00 	cmp.w	r8, #0
    6ea0:	f179 0300 	sbcs.w	r3, r9, #0
    6ea4:	bfbc      	itt	lt
    6ea6:	f04f 0800 	movlt.w	r8, #0
    6eaa:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    6eae:	4630      	mov	r0, r6
    6eb0:	f7ff fd8a 	bl	69c8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    6eb4:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6eb6:	4642      	mov	r2, r8
	timer->status = 0U;
    6eb8:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6eba:	4630      	mov	r0, r6
    6ebc:	464b      	mov	r3, r9
    6ebe:	4905      	ldr	r1, [pc, #20]	; (6ed4 <z_impl_k_timer_start+0xbc>)
	timer->period = period;
    6ec0:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    6ec4:	b002      	add	sp, #8
    6ec6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6eca:	f7ff bca9 	b.w	6820 <z_add_timeout>
}
    6ece:	b002      	add	sp, #8
    6ed0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    6ed4:	00006dc9 	.word	0x00006dc9

00006ed8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6ed8:	4a02      	ldr	r2, [pc, #8]	; (6ee4 <boot_banner+0xc>)
    6eda:	4903      	ldr	r1, [pc, #12]	; (6ee8 <boot_banner+0x10>)
    6edc:	4803      	ldr	r0, [pc, #12]	; (6eec <boot_banner+0x14>)
    6ede:	f000 b97b 	b.w	71d8 <printk>
    6ee2:	bf00      	nop
    6ee4:	0000977f 	.word	0x0000977f
    6ee8:	00009976 	.word	0x00009976
    6eec:	00009986 	.word	0x00009986

00006ef0 <nrf_cc3xx_platform_init_no_rng>:
    6ef0:	b510      	push	{r4, lr}
    6ef2:	4c0a      	ldr	r4, [pc, #40]	; (6f1c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6ef4:	6823      	ldr	r3, [r4, #0]
    6ef6:	b11b      	cbz	r3, 6f00 <nrf_cc3xx_platform_init_no_rng+0x10>
    6ef8:	2301      	movs	r3, #1
    6efa:	2000      	movs	r0, #0
    6efc:	6023      	str	r3, [r4, #0]
    6efe:	bd10      	pop	{r4, pc}
    6f00:	f000 f8b2 	bl	7068 <CC_LibInitNoRng>
    6f04:	2800      	cmp	r0, #0
    6f06:	d0f7      	beq.n	6ef8 <nrf_cc3xx_platform_init_no_rng+0x8>
    6f08:	3801      	subs	r0, #1
    6f0a:	2807      	cmp	r0, #7
    6f0c:	d803      	bhi.n	6f16 <nrf_cc3xx_platform_init_no_rng+0x26>
    6f0e:	4b04      	ldr	r3, [pc, #16]	; (6f20 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6f10:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6f14:	bd10      	pop	{r4, pc}
    6f16:	4803      	ldr	r0, [pc, #12]	; (6f24 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6f18:	bd10      	pop	{r4, pc}
    6f1a:	bf00      	nop
    6f1c:	20000af4 	.word	0x20000af4
    6f20:	00008330 	.word	0x00008330
    6f24:	ffff8ffe 	.word	0xffff8ffe

00006f28 <nrf_cc3xx_platform_abort>:
    6f28:	f3bf 8f4f 	dsb	sy
    6f2c:	4905      	ldr	r1, [pc, #20]	; (6f44 <nrf_cc3xx_platform_abort+0x1c>)
    6f2e:	4b06      	ldr	r3, [pc, #24]	; (6f48 <nrf_cc3xx_platform_abort+0x20>)
    6f30:	68ca      	ldr	r2, [r1, #12]
    6f32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6f36:	4313      	orrs	r3, r2
    6f38:	60cb      	str	r3, [r1, #12]
    6f3a:	f3bf 8f4f 	dsb	sy
    6f3e:	bf00      	nop
    6f40:	e7fd      	b.n	6f3e <nrf_cc3xx_platform_abort+0x16>
    6f42:	bf00      	nop
    6f44:	e000ed00 	.word	0xe000ed00
    6f48:	05fa0004 	.word	0x05fa0004

00006f4c <CC_PalAbort>:
    6f4c:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    6f50:	2100      	movs	r1, #0
    6f52:	b430      	push	{r4, r5}
    6f54:	4a08      	ldr	r2, [pc, #32]	; (6f78 <CC_PalAbort+0x2c>)
    6f56:	4c09      	ldr	r4, [pc, #36]	; (6f7c <CC_PalAbort+0x30>)
    6f58:	4d09      	ldr	r5, [pc, #36]	; (6f80 <CC_PalAbort+0x34>)
    6f5a:	6023      	str	r3, [r4, #0]
    6f5c:	602b      	str	r3, [r5, #0]
    6f5e:	6013      	str	r3, [r2, #0]
    6f60:	60e3      	str	r3, [r4, #12]
    6f62:	60eb      	str	r3, [r5, #12]
    6f64:	60d3      	str	r3, [r2, #12]
    6f66:	61a3      	str	r3, [r4, #24]
    6f68:	4a06      	ldr	r2, [pc, #24]	; (6f84 <CC_PalAbort+0x38>)
    6f6a:	4c07      	ldr	r4, [pc, #28]	; (6f88 <CC_PalAbort+0x3c>)
    6f6c:	61ab      	str	r3, [r5, #24]
    6f6e:	6863      	ldr	r3, [r4, #4]
    6f70:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    6f74:	bc30      	pop	{r4, r5}
    6f76:	4718      	bx	r3
    6f78:	50845408 	.word	0x50845408
    6f7c:	50845400 	.word	0x50845400
    6f80:	50845404 	.word	0x50845404
    6f84:	50844000 	.word	0x50844000
    6f88:	20000050 	.word	0x20000050

00006f8c <nrf_cc3xx_platform_set_abort>:
    6f8c:	4b02      	ldr	r3, [pc, #8]	; (6f98 <nrf_cc3xx_platform_set_abort+0xc>)
    6f8e:	e9d0 1200 	ldrd	r1, r2, [r0]
    6f92:	e9c3 1200 	strd	r1, r2, [r3]
    6f96:	4770      	bx	lr
    6f98:	20000050 	.word	0x20000050

00006f9c <mutex_unlock>:
    6f9c:	b148      	cbz	r0, 6fb2 <mutex_unlock+0x16>
    6f9e:	6843      	ldr	r3, [r0, #4]
    6fa0:	b12b      	cbz	r3, 6fae <mutex_unlock+0x12>
    6fa2:	f3bf 8f5f 	dmb	sy
    6fa6:	2300      	movs	r3, #0
    6fa8:	6003      	str	r3, [r0, #0]
    6faa:	4618      	mov	r0, r3
    6fac:	4770      	bx	lr
    6fae:	4802      	ldr	r0, [pc, #8]	; (6fb8 <mutex_unlock+0x1c>)
    6fb0:	4770      	bx	lr
    6fb2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6fb6:	4770      	bx	lr
    6fb8:	ffff8fea 	.word	0xffff8fea

00006fbc <mutex_free>:
    6fbc:	b510      	push	{r4, lr}
    6fbe:	4604      	mov	r4, r0
    6fc0:	b128      	cbz	r0, 6fce <mutex_free+0x12>
    6fc2:	6863      	ldr	r3, [r4, #4]
    6fc4:	b113      	cbz	r3, 6fcc <mutex_free+0x10>
    6fc6:	2300      	movs	r3, #0
    6fc8:	6023      	str	r3, [r4, #0]
    6fca:	6063      	str	r3, [r4, #4]
    6fcc:	bd10      	pop	{r4, pc}
    6fce:	4b02      	ldr	r3, [pc, #8]	; (6fd8 <mutex_free+0x1c>)
    6fd0:	4802      	ldr	r0, [pc, #8]	; (6fdc <mutex_free+0x20>)
    6fd2:	685b      	ldr	r3, [r3, #4]
    6fd4:	4798      	blx	r3
    6fd6:	e7f4      	b.n	6fc2 <mutex_free+0x6>
    6fd8:	20000050 	.word	0x20000050
    6fdc:	00008350 	.word	0x00008350

00006fe0 <mutex_init>:
    6fe0:	b510      	push	{r4, lr}
    6fe2:	4604      	mov	r4, r0
    6fe4:	b130      	cbz	r0, 6ff4 <mutex_init+0x14>
    6fe6:	2200      	movs	r2, #0
    6fe8:	6863      	ldr	r3, [r4, #4]
    6fea:	6022      	str	r2, [r4, #0]
    6fec:	f043 0301 	orr.w	r3, r3, #1
    6ff0:	6063      	str	r3, [r4, #4]
    6ff2:	bd10      	pop	{r4, pc}
    6ff4:	4801      	ldr	r0, [pc, #4]	; (6ffc <mutex_init+0x1c>)
    6ff6:	f7ff ffa9 	bl	6f4c <CC_PalAbort>
    6ffa:	e7f4      	b.n	6fe6 <mutex_init+0x6>
    6ffc:	00008378 	.word	0x00008378

00007000 <mutex_lock>:
    7000:	b180      	cbz	r0, 7024 <mutex_lock+0x24>
    7002:	6843      	ldr	r3, [r0, #4]
    7004:	b163      	cbz	r3, 7020 <mutex_lock+0x20>
    7006:	2201      	movs	r2, #1
    7008:	e8d0 3fef 	ldaex	r3, [r0]
    700c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    7010:	2900      	cmp	r1, #0
    7012:	d1f9      	bne.n	7008 <mutex_lock+0x8>
    7014:	2b01      	cmp	r3, #1
    7016:	d0f7      	beq.n	7008 <mutex_lock+0x8>
    7018:	f3bf 8f5f 	dmb	sy
    701c:	2000      	movs	r0, #0
    701e:	4770      	bx	lr
    7020:	4802      	ldr	r0, [pc, #8]	; (702c <mutex_lock+0x2c>)
    7022:	4770      	bx	lr
    7024:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7028:	4770      	bx	lr
    702a:	bf00      	nop
    702c:	ffff8fea 	.word	0xffff8fea

00007030 <nrf_cc3xx_platform_set_mutexes>:
    7030:	b470      	push	{r4, r5, r6}
    7032:	4b0b      	ldr	r3, [pc, #44]	; (7060 <nrf_cc3xx_platform_set_mutexes+0x30>)
    7034:	6806      	ldr	r6, [r0, #0]
    7036:	68c2      	ldr	r2, [r0, #12]
    7038:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    703c:	e9c3 4202 	strd	r4, r2, [r3, #8]
    7040:	e9c3 6500 	strd	r6, r5, [r3]
    7044:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    7048:	680e      	ldr	r6, [r1, #0]
    704a:	4b06      	ldr	r3, [pc, #24]	; (7064 <nrf_cc3xx_platform_set_mutexes+0x34>)
    704c:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    7050:	e9c3 6500 	strd	r6, r5, [r3]
    7054:	e9c3 4002 	strd	r4, r0, [r3, #8]
    7058:	611a      	str	r2, [r3, #16]
    705a:	bc70      	pop	{r4, r5, r6}
    705c:	4770      	bx	lr
    705e:	bf00      	nop
    7060:	20000060 	.word	0x20000060
    7064:	20000070 	.word	0x20000070

00007068 <CC_LibInitNoRng>:
    7068:	b508      	push	{r3, lr}
    706a:	f000 f80f 	bl	708c <CC_HalInit>
    706e:	b928      	cbnz	r0, 707c <CC_LibInitNoRng+0x14>
    7070:	f000 f80e 	bl	7090 <CC_PalInit>
    7074:	b930      	cbnz	r0, 7084 <CC_LibInitNoRng+0x1c>
    7076:	4a04      	ldr	r2, [pc, #16]	; (7088 <CC_LibInitNoRng+0x20>)
    7078:	6010      	str	r0, [r2, #0]
    707a:	bd08      	pop	{r3, pc}
    707c:	f000 f836 	bl	70ec <CC_PalTerminate>
    7080:	2003      	movs	r0, #3
    7082:	bd08      	pop	{r3, pc}
    7084:	2004      	movs	r0, #4
    7086:	bd08      	pop	{r3, pc}
    7088:	50845a0c 	.word	0x50845a0c

0000708c <CC_HalInit>:
    708c:	2000      	movs	r0, #0
    708e:	4770      	bx	lr

00007090 <CC_PalInit>:
    7090:	b510      	push	{r4, lr}
    7092:	4811      	ldr	r0, [pc, #68]	; (70d8 <CC_PalInit+0x48>)
    7094:	f000 f848 	bl	7128 <CC_PalMutexCreate>
    7098:	b100      	cbz	r0, 709c <CC_PalInit+0xc>
    709a:	bd10      	pop	{r4, pc}
    709c:	480f      	ldr	r0, [pc, #60]	; (70dc <CC_PalInit+0x4c>)
    709e:	f000 f843 	bl	7128 <CC_PalMutexCreate>
    70a2:	2800      	cmp	r0, #0
    70a4:	d1f9      	bne.n	709a <CC_PalInit+0xa>
    70a6:	4c0e      	ldr	r4, [pc, #56]	; (70e0 <CC_PalInit+0x50>)
    70a8:	4620      	mov	r0, r4
    70aa:	f000 f83d 	bl	7128 <CC_PalMutexCreate>
    70ae:	2800      	cmp	r0, #0
    70b0:	d1f3      	bne.n	709a <CC_PalInit+0xa>
    70b2:	4b0c      	ldr	r3, [pc, #48]	; (70e4 <CC_PalInit+0x54>)
    70b4:	480c      	ldr	r0, [pc, #48]	; (70e8 <CC_PalInit+0x58>)
    70b6:	601c      	str	r4, [r3, #0]
    70b8:	f000 f836 	bl	7128 <CC_PalMutexCreate>
    70bc:	4601      	mov	r1, r0
    70be:	2800      	cmp	r0, #0
    70c0:	d1eb      	bne.n	709a <CC_PalInit+0xa>
    70c2:	f000 f82d 	bl	7120 <CC_PalDmaInit>
    70c6:	4604      	mov	r4, r0
    70c8:	b108      	cbz	r0, 70ce <CC_PalInit+0x3e>
    70ca:	4620      	mov	r0, r4
    70cc:	bd10      	pop	{r4, pc}
    70ce:	f000 f83f 	bl	7150 <CC_PalPowerSaveModeInit>
    70d2:	4620      	mov	r0, r4
    70d4:	e7fa      	b.n	70cc <CC_PalInit+0x3c>
    70d6:	bf00      	nop
    70d8:	200000a8 	.word	0x200000a8
    70dc:	2000009c 	.word	0x2000009c
    70e0:	200000a4 	.word	0x200000a4
    70e4:	200000ac 	.word	0x200000ac
    70e8:	200000a0 	.word	0x200000a0

000070ec <CC_PalTerminate>:
    70ec:	b508      	push	{r3, lr}
    70ee:	4808      	ldr	r0, [pc, #32]	; (7110 <CC_PalTerminate+0x24>)
    70f0:	f000 f824 	bl	713c <CC_PalMutexDestroy>
    70f4:	4807      	ldr	r0, [pc, #28]	; (7114 <CC_PalTerminate+0x28>)
    70f6:	f000 f821 	bl	713c <CC_PalMutexDestroy>
    70fa:	4807      	ldr	r0, [pc, #28]	; (7118 <CC_PalTerminate+0x2c>)
    70fc:	f000 f81e 	bl	713c <CC_PalMutexDestroy>
    7100:	4806      	ldr	r0, [pc, #24]	; (711c <CC_PalTerminate+0x30>)
    7102:	f000 f81b 	bl	713c <CC_PalMutexDestroy>
    7106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    710a:	f000 b80b 	b.w	7124 <CC_PalDmaTerminate>
    710e:	bf00      	nop
    7110:	200000a8 	.word	0x200000a8
    7114:	2000009c 	.word	0x2000009c
    7118:	200000a4 	.word	0x200000a4
    711c:	200000a0 	.word	0x200000a0

00007120 <CC_PalDmaInit>:
    7120:	2000      	movs	r0, #0
    7122:	4770      	bx	lr

00007124 <CC_PalDmaTerminate>:
    7124:	4770      	bx	lr
    7126:	bf00      	nop

00007128 <CC_PalMutexCreate>:
    7128:	b508      	push	{r3, lr}
    712a:	4b03      	ldr	r3, [pc, #12]	; (7138 <CC_PalMutexCreate+0x10>)
    712c:	6802      	ldr	r2, [r0, #0]
    712e:	681b      	ldr	r3, [r3, #0]
    7130:	6810      	ldr	r0, [r2, #0]
    7132:	4798      	blx	r3
    7134:	2000      	movs	r0, #0
    7136:	bd08      	pop	{r3, pc}
    7138:	20000060 	.word	0x20000060

0000713c <CC_PalMutexDestroy>:
    713c:	b508      	push	{r3, lr}
    713e:	4b03      	ldr	r3, [pc, #12]	; (714c <CC_PalMutexDestroy+0x10>)
    7140:	6802      	ldr	r2, [r0, #0]
    7142:	685b      	ldr	r3, [r3, #4]
    7144:	6810      	ldr	r0, [r2, #0]
    7146:	4798      	blx	r3
    7148:	2000      	movs	r0, #0
    714a:	bd08      	pop	{r3, pc}
    714c:	20000060 	.word	0x20000060

00007150 <CC_PalPowerSaveModeInit>:
    7150:	b570      	push	{r4, r5, r6, lr}
    7152:	4c09      	ldr	r4, [pc, #36]	; (7178 <CC_PalPowerSaveModeInit+0x28>)
    7154:	4d09      	ldr	r5, [pc, #36]	; (717c <CC_PalPowerSaveModeInit+0x2c>)
    7156:	6920      	ldr	r0, [r4, #16]
    7158:	68ab      	ldr	r3, [r5, #8]
    715a:	4798      	blx	r3
    715c:	b118      	cbz	r0, 7166 <CC_PalPowerSaveModeInit+0x16>
    715e:	4b08      	ldr	r3, [pc, #32]	; (7180 <CC_PalPowerSaveModeInit+0x30>)
    7160:	4808      	ldr	r0, [pc, #32]	; (7184 <CC_PalPowerSaveModeInit+0x34>)
    7162:	685b      	ldr	r3, [r3, #4]
    7164:	4798      	blx	r3
    7166:	2100      	movs	r1, #0
    7168:	4a07      	ldr	r2, [pc, #28]	; (7188 <CC_PalPowerSaveModeInit+0x38>)
    716a:	68eb      	ldr	r3, [r5, #12]
    716c:	6011      	str	r1, [r2, #0]
    716e:	6920      	ldr	r0, [r4, #16]
    7170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7174:	4718      	bx	r3
    7176:	bf00      	nop
    7178:	20000070 	.word	0x20000070
    717c:	20000060 	.word	0x20000060
    7180:	20000050 	.word	0x20000050
    7184:	0000839c 	.word	0x0000839c
    7188:	20000b08 	.word	0x20000b08

0000718c <sys_notify_validate>:
	if (notify == NULL) {
    718c:	4603      	mov	r3, r0
    718e:	b158      	cbz	r0, 71a8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7190:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7192:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    7196:	2a01      	cmp	r2, #1
    7198:	d003      	beq.n	71a2 <sys_notify_validate+0x16>
    719a:	2a03      	cmp	r2, #3
    719c:	d104      	bne.n	71a8 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    719e:	6802      	ldr	r2, [r0, #0]
    71a0:	b112      	cbz	r2, 71a8 <sys_notify_validate+0x1c>
		notify->result = 0;
    71a2:	2000      	movs	r0, #0
    71a4:	6098      	str	r0, [r3, #8]
    71a6:	4770      	bx	lr
		return -EINVAL;
    71a8:	f06f 0015 	mvn.w	r0, #21
}
    71ac:	4770      	bx	lr

000071ae <arch_printk_char_out>:
}
    71ae:	2000      	movs	r0, #0
    71b0:	4770      	bx	lr

000071b2 <str_out>:
{
    71b2:	b530      	push	{r4, r5, lr}
    71b4:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    71b6:	680c      	ldr	r4, [r1, #0]
    71b8:	1c55      	adds	r5, r2, #1
    71ba:	b114      	cbz	r4, 71c2 <str_out+0x10>
    71bc:	684b      	ldr	r3, [r1, #4]
    71be:	4293      	cmp	r3, r2
    71c0:	dc01      	bgt.n	71c6 <str_out+0x14>
		ctx->count++;
    71c2:	608d      	str	r5, [r1, #8]
}
    71c4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    71c6:	3b01      	subs	r3, #1
    71c8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    71ca:	bf08      	it	eq
    71cc:	2200      	moveq	r2, #0
    71ce:	608d      	str	r5, [r1, #8]
    71d0:	bf0c      	ite	eq
    71d2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    71d4:	54a0      	strbne	r0, [r4, r2]
    71d6:	e7f5      	b.n	71c4 <str_out+0x12>

000071d8 <printk>:
{
    71d8:	b40f      	push	{r0, r1, r2, r3}
    71da:	b507      	push	{r0, r1, r2, lr}
    71dc:	a904      	add	r1, sp, #16
    71de:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    71e2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    71e4:	f7f9 f9b2 	bl	54c <vprintk>
}
    71e8:	b003      	add	sp, #12
    71ea:	f85d eb04 	ldr.w	lr, [sp], #4
    71ee:	b004      	add	sp, #16
    71f0:	4770      	bx	lr

000071f2 <snprintk>:
{
    71f2:	b40c      	push	{r2, r3}
    71f4:	b507      	push	{r0, r1, r2, lr}
    71f6:	ab04      	add	r3, sp, #16
    71f8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    71fc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    71fe:	f7f9 f9b3 	bl	568 <vsnprintk>
}
    7202:	b003      	add	sp, #12
    7204:	f85d eb04 	ldr.w	lr, [sp], #4
    7208:	b002      	add	sp, #8
    720a:	4770      	bx	lr

0000720c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    720c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    720e:	f013 0307 	ands.w	r3, r3, #7
    7212:	d105      	bne.n	7220 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7214:	6803      	ldr	r3, [r0, #0]
    7216:	2b00      	cmp	r3, #0
		evt = EVT_START;
    7218:	bf0c      	ite	eq
    721a:	2000      	moveq	r0, #0
    721c:	2003      	movne	r0, #3
    721e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7220:	2b02      	cmp	r3, #2
    7222:	d105      	bne.n	7230 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7224:	8bc3      	ldrh	r3, [r0, #30]
    7226:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    7228:	bf14      	ite	ne
    722a:	2000      	movne	r0, #0
    722c:	2004      	moveq	r0, #4
    722e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7230:	2b01      	cmp	r3, #1
    7232:	d105      	bne.n	7240 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7234:	6803      	ldr	r3, [r0, #0]
    7236:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    7238:	bf0c      	ite	eq
    723a:	2000      	moveq	r0, #0
    723c:	2005      	movne	r0, #5
    723e:	4770      	bx	lr
	int evt = EVT_NOP;
    7240:	2000      	movs	r0, #0
}
    7242:	4770      	bx	lr

00007244 <notify_one>:
{
    7244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7248:	460d      	mov	r5, r1
    724a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    724c:	4619      	mov	r1, r3
    724e:	1d28      	adds	r0, r5, #4
{
    7250:	4690      	mov	r8, r2
    7252:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7254:	f7f9 f94c 	bl	4f0 <sys_notify_finalize>
	if (cb) {
    7258:	4604      	mov	r4, r0
    725a:	b138      	cbz	r0, 726c <notify_one+0x28>
		cb(mgr, cli, state, res);
    725c:	4633      	mov	r3, r6
    725e:	4642      	mov	r2, r8
    7260:	4629      	mov	r1, r5
    7262:	4638      	mov	r0, r7
    7264:	46a4      	mov	ip, r4
}
    7266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    726a:	4760      	bx	ip
}
    726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007270 <validate_args>:
{
    7270:	b510      	push	{r4, lr}
    7272:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7274:	b140      	cbz	r0, 7288 <validate_args+0x18>
    7276:	b139      	cbz	r1, 7288 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    7278:	1d08      	adds	r0, r1, #4
    727a:	f7ff ff87 	bl	718c <sys_notify_validate>
	if ((rv == 0)
    727e:	b928      	cbnz	r0, 728c <validate_args+0x1c>
	    && ((cli->notify.flags
    7280:	68a3      	ldr	r3, [r4, #8]
    7282:	f033 0303 	bics.w	r3, r3, #3
    7286:	d001      	beq.n	728c <validate_args+0x1c>
		rv = -EINVAL;
    7288:	f06f 0015 	mvn.w	r0, #21
}
    728c:	bd10      	pop	{r4, pc}

0000728e <onoff_manager_init>:
{
    728e:	b538      	push	{r3, r4, r5, lr}
    7290:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7292:	4605      	mov	r5, r0
    7294:	b158      	cbz	r0, 72ae <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7296:	b151      	cbz	r1, 72ae <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7298:	680b      	ldr	r3, [r1, #0]
    729a:	b143      	cbz	r3, 72ae <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    729c:	684b      	ldr	r3, [r1, #4]
    729e:	b133      	cbz	r3, 72ae <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    72a0:	2220      	movs	r2, #32
    72a2:	2100      	movs	r1, #0
    72a4:	f000 fc11 	bl	7aca <memset>
	return 0;
    72a8:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    72aa:	612c      	str	r4, [r5, #16]
}
    72ac:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    72ae:	f06f 0015 	mvn.w	r0, #21
    72b2:	e7fb      	b.n	72ac <onoff_manager_init+0x1e>

000072b4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    72b4:	4604      	mov	r4, r0
    72b6:	b508      	push	{r3, lr}
    72b8:	4608      	mov	r0, r1
    72ba:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    72bc:	461a      	mov	r2, r3
    72be:	47a0      	blx	r4
	return z_impl_k_current_get();
    72c0:	f7ff f98a 	bl	65d8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    72c4:	f7fc f822 	bl	330c <z_impl_k_thread_abort>

000072c8 <encode_uint>:
{
    72c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72cc:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    72ce:	78d3      	ldrb	r3, [r2, #3]
{
    72d0:	4614      	mov	r4, r2
	switch (specifier) {
    72d2:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    72d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    72d8:	4606      	mov	r6, r0
    72da:	460f      	mov	r7, r1
    72dc:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    72de:	d02d      	beq.n	733c <encode_uint+0x74>
    72e0:	d828      	bhi.n	7334 <encode_uint+0x6c>
		return 16;
    72e2:	2b58      	cmp	r3, #88	; 0x58
    72e4:	bf14      	ite	ne
    72e6:	250a      	movne	r5, #10
    72e8:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    72ea:	46aa      	mov	sl, r5
    72ec:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    72f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    72f4:	4652      	mov	r2, sl
    72f6:	465b      	mov	r3, fp
    72f8:	4630      	mov	r0, r6
    72fa:	4639      	mov	r1, r7
    72fc:	f7f8 ff2a 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7300:	2a09      	cmp	r2, #9
    7302:	b2d3      	uxtb	r3, r2
    7304:	d81f      	bhi.n	7346 <encode_uint+0x7e>
    7306:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7308:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    730a:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    730c:	bf08      	it	eq
    730e:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7310:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    7314:	d301      	bcc.n	731a <encode_uint+0x52>
    7316:	45c8      	cmp	r8, r9
    7318:	d812      	bhi.n	7340 <encode_uint+0x78>
	if (conv->flag_hash) {
    731a:	7823      	ldrb	r3, [r4, #0]
    731c:	069b      	lsls	r3, r3, #26
    731e:	d505      	bpl.n	732c <encode_uint+0x64>
		if (radix == 8) {
    7320:	2d08      	cmp	r5, #8
    7322:	d116      	bne.n	7352 <encode_uint+0x8a>
			conv->altform_0 = true;
    7324:	78a3      	ldrb	r3, [r4, #2]
    7326:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    732a:	70a3      	strb	r3, [r4, #2]
}
    732c:	4640      	mov	r0, r8
    732e:	b003      	add	sp, #12
    7330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7334:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    7338:	2b70      	cmp	r3, #112	; 0x70
    733a:	e7d3      	b.n	72e4 <encode_uint+0x1c>
	switch (specifier) {
    733c:	2508      	movs	r5, #8
    733e:	e7d4      	b.n	72ea <encode_uint+0x22>
		value /= radix;
    7340:	4606      	mov	r6, r0
    7342:	460f      	mov	r7, r1
    7344:	e7d6      	b.n	72f4 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7346:	9a01      	ldr	r2, [sp, #4]
    7348:	2a19      	cmp	r2, #25
    734a:	bf94      	ite	ls
    734c:	3337      	addls	r3, #55	; 0x37
    734e:	3357      	addhi	r3, #87	; 0x57
    7350:	e7da      	b.n	7308 <encode_uint+0x40>
		} else if (radix == 16) {
    7352:	2d10      	cmp	r5, #16
    7354:	d1ea      	bne.n	732c <encode_uint+0x64>
			conv->altform_0c = true;
    7356:	78a3      	ldrb	r3, [r4, #2]
    7358:	f043 0310 	orr.w	r3, r3, #16
    735c:	e7e5      	b.n	732a <encode_uint+0x62>

0000735e <outs>:
{
    735e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7362:	4607      	mov	r7, r0
    7364:	4688      	mov	r8, r1
    7366:	4615      	mov	r5, r2
    7368:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    736a:	4614      	mov	r4, r2
    736c:	42b4      	cmp	r4, r6
    736e:	eba4 0005 	sub.w	r0, r4, r5
    7372:	d302      	bcc.n	737a <outs+0x1c>
    7374:	b93e      	cbnz	r6, 7386 <outs+0x28>
    7376:	7823      	ldrb	r3, [r4, #0]
    7378:	b12b      	cbz	r3, 7386 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    737a:	4641      	mov	r1, r8
    737c:	f814 0b01 	ldrb.w	r0, [r4], #1
    7380:	47b8      	blx	r7
		if (rc < 0) {
    7382:	2800      	cmp	r0, #0
    7384:	daf2      	bge.n	736c <outs+0xe>
}
    7386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000738a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    738a:	4040      	eors	r0, r0
    738c:	f380 8811 	msr	BASEPRI, r0
    7390:	f04f 0004 	mov.w	r0, #4
    7394:	df02      	svc	2
}
    7396:	4770      	bx	lr

00007398 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7398:	4770      	bx	lr

0000739a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    739a:	f7fc bed3 	b.w	4144 <SystemInit>

0000739e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    739e:	b084      	sub	sp, #16
    73a0:	ab04      	add	r3, sp, #16
    73a2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    73a6:	2300      	movs	r3, #0
    73a8:	f383 8811 	msr	BASEPRI, r3
    73ac:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    73b0:	b004      	add	sp, #16
    73b2:	4770      	bx	lr

000073b4 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    73b4:	2300      	movs	r3, #0
	list->head = NULL;
    73b6:	e9c0 3300 	strd	r3, r3, [r0]
}
    73ba:	4770      	bx	lr

000073bc <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    73bc:	6803      	ldr	r3, [r0, #0]
    73be:	b923      	cbnz	r3, 73ca <log_list_add_tail+0xe>
		list->head = msg;
    73c0:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    73c2:	2300      	movs	r3, #0
	list->tail = msg;
    73c4:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    73c6:	600b      	str	r3, [r1, #0]
}
    73c8:	4770      	bx	lr
		list->tail->next = msg;
    73ca:	6843      	ldr	r3, [r0, #4]
    73cc:	6019      	str	r1, [r3, #0]
    73ce:	e7f8      	b.n	73c2 <log_list_add_tail+0x6>

000073d0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    73d0:	6800      	ldr	r0, [r0, #0]
    73d2:	4770      	bx	lr

000073d4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    73d4:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    73d6:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    73d8:	b108      	cbz	r0, 73de <log_list_head_get+0xa>
		list->head = list->head->next;
    73da:	6802      	ldr	r2, [r0, #0]
    73dc:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    73de:	4770      	bx	lr

000073e0 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    73e0:	6843      	ldr	r3, [r0, #4]
}
    73e2:	7958      	ldrb	r0, [r3, #5]
    73e4:	4770      	bx	lr

000073e6 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    73e6:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    73e8:	f7fa fb38 	bl	1a5c <log_msg_chunk_alloc>

	if (msg != NULL) {
    73ec:	b118      	cbz	r0, 73f6 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    73ee:	2301      	movs	r3, #1
    73f0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    73f2:	2300      	movs	r3, #0
    73f4:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
    73f6:	bd08      	pop	{r3, pc}

000073f8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    73f8:	f7fb ba16 	b.w	2828 <sys_clock_cycle_get_32>

000073fc <dummy_timestamp>:
    73fc:	2000      	movs	r0, #0
    73fe:	4770      	bx	lr

00007400 <log_0>:
{
    7400:	b538      	push	{r3, r4, r5, lr}
    7402:	4605      	mov	r5, r0
    7404:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    7406:	f7ff ffee 	bl	73e6 <z_log_msg_std_alloc>

	if (msg != NULL) {
    740a:	b128      	cbz	r0, 7418 <log_0+0x18>
		msg_finalize(msg, src_level);
    740c:	4621      	mov	r1, r4
		msg->str = str;
    740e:	6105      	str	r5, [r0, #16]
}
    7410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    7414:	f7fa ba28 	b.w	1868 <msg_finalize>
}
    7418:	bd38      	pop	{r3, r4, r5, pc}

0000741a <log_1>:
{
    741a:	b570      	push	{r4, r5, r6, lr}
    741c:	4606      	mov	r6, r0
    741e:	460d      	mov	r5, r1
    7420:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    7422:	f7ff ffe0 	bl	73e6 <z_log_msg_std_alloc>

	if (msg != NULL) {
    7426:	b158      	cbz	r0, 7440 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    7428:	2101      	movs	r1, #1
    742a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    742c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    742e:	f361 1207 	bfi	r2, r1, #4, #4
    7432:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
    7434:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
    7436:	6145      	str	r5, [r0, #20]
}
    7438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    743c:	f7fa ba14 	b.w	1868 <msg_finalize>
}
    7440:	bd70      	pop	{r4, r5, r6, pc}

00007442 <log_2>:
{
    7442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7446:	4680      	mov	r8, r0
    7448:	460f      	mov	r7, r1
    744a:	4616      	mov	r6, r2
    744c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    744e:	f7ff ffca 	bl	73e6 <z_log_msg_std_alloc>

	if (msg != NULL) {
    7452:	b168      	cbz	r0, 7470 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    7454:	2202      	movs	r2, #2
    7456:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
    7458:	4629      	mov	r1, r5
    745a:	f362 1307 	bfi	r3, r2, #4, #4
    745e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    7460:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
    7464:	f8c0 8010 	str.w	r8, [r0, #16]
}
    7468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    746c:	f7fa b9fc 	b.w	1868 <msg_finalize>
}
    7470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007474 <log_3>:
{
    7474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7478:	4680      	mov	r8, r0
    747a:	460f      	mov	r7, r1
    747c:	4616      	mov	r6, r2
    747e:	461d      	mov	r5, r3
    7480:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    7484:	f7ff ffaf 	bl	73e6 <z_log_msg_std_alloc>

	if (msg != NULL) {
    7488:	b170      	cbz	r0, 74a8 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    748a:	2203      	movs	r2, #3
    748c:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
    748e:	4649      	mov	r1, r9
    7490:	f362 1307 	bfi	r3, r2, #4, #4
    7494:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    7496:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
    749a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
    749e:	61c5      	str	r5, [r0, #28]
}
    74a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    74a4:	f7fa b9e0 	b.w	1868 <msg_finalize>
}
    74a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000074ac <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    74ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    74b0:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
    74b2:	8903      	ldrh	r3, [r0, #8]
{
    74b4:	460e      	mov	r6, r1
    74b6:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
    74b8:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    74bc:	42a2      	cmp	r2, r4
{
    74be:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
    74c2:	d803      	bhi.n	74cc <log_msg_hexdump_data_op+0x20>
		*length = 0;
    74c4:	2300      	movs	r3, #0
    74c6:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    74c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    74cc:	680b      	ldr	r3, [r1, #0]
    74ce:	4423      	add	r3, r4
    74d0:	4293      	cmp	r3, r2
		*length = available_len - offset;
    74d2:	bf84      	itt	hi
    74d4:	1b13      	subhi	r3, r2, r4
    74d6:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    74d8:	2a0c      	cmp	r2, #12
	req_len = *length;
    74da:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    74de:	d92a      	bls.n	7536 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
    74e0:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    74e2:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    74e6:	d82d      	bhi.n	7544 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    74e8:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
    74ea:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    74ec:	454a      	cmp	r2, r9
    74ee:	bf28      	it	cs
    74f0:	464a      	movcs	r2, r9
    74f2:	4420      	add	r0, r4
    74f4:	4615      	mov	r5, r2
		if (put_op) {
    74f6:	b317      	cbz	r7, 753e <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
    74f8:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    74fa:	f000 fabb 	bl	7a74 <memcpy>
		req_len -= cpy_len;
    74fe:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    7502:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
    7504:	f1b9 0f00 	cmp.w	r9, #0
    7508:	d0de      	beq.n	74c8 <log_msg_hexdump_data_op+0x1c>
    750a:	f1b8 0f00 	cmp.w	r8, #0
    750e:	d0db      	beq.n	74c8 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    7510:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    7514:	454d      	cmp	r5, r9
    7516:	bf28      	it	cs
    7518:	464d      	movcs	r5, r9
		if (put_op) {
    751a:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
    751c:	462a      	mov	r2, r5
    751e:	4440      	add	r0, r8
		if (put_op) {
    7520:	b1bf      	cbz	r7, 7552 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
    7522:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    7524:	f000 faa6 	bl	7a74 <memcpy>
		offset = 0;
    7528:	2400      	movs	r4, #0
		cont = cont->next;
    752a:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
    752e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    7532:	442e      	add	r6, r5
    7534:	e7e6      	b.n	7504 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
    7536:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
    753a:	3014      	adds	r0, #20
	if (offset < chunk_len) {
    753c:	e7d6      	b.n	74ec <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    753e:	4601      	mov	r1, r0
    7540:	4630      	mov	r0, r6
    7542:	e7da      	b.n	74fa <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    7544:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    7546:	2c1b      	cmp	r4, #27
    7548:	d9dc      	bls.n	7504 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    754a:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    754e:	3c1c      	subs	r4, #28
    7550:	e7f9      	b.n	7546 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
    7552:	4601      	mov	r1, r0
    7554:	4630      	mov	r0, r6
    7556:	e7e5      	b.n	7524 <log_msg_hexdump_data_op+0x78>

00007558 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7558:	3004      	adds	r0, #4
    755a:	e8d0 3fef 	ldaex	r3, [r0]
    755e:	3301      	adds	r3, #1
    7560:	e8c0 3fe2 	stlex	r2, r3, [r0]
    7564:	2a00      	cmp	r2, #0
    7566:	d1f8      	bne.n	755a <log_msg_get+0x2>
}
    7568:	4770      	bx	lr

0000756a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    756a:	7a40      	ldrb	r0, [r0, #9]
}
    756c:	0900      	lsrs	r0, r0, #4
    756e:	4770      	bx	lr

00007570 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    7570:	7a43      	ldrb	r3, [r0, #9]
    7572:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    7576:	ea4f 1213 	mov.w	r2, r3, lsr #4
    757a:	d216      	bcs.n	75aa <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    757c:	2a03      	cmp	r2, #3
    757e:	d803      	bhi.n	7588 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    7580:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7584:	6948      	ldr	r0, [r1, #20]
    7586:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    7588:	2901      	cmp	r1, #1
    758a:	d803      	bhi.n	7594 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    758c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7590:	6988      	ldr	r0, [r1, #24]
    7592:	4770      	bx	lr
	cont = msg->payload.ext.next;
    7594:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    7596:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    7598:	2906      	cmp	r1, #6
    759a:	d803      	bhi.n	75a4 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    759c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    75a0:	6848      	ldr	r0, [r1, #4]
    75a2:	4770      	bx	lr
		cont = cont->next;
    75a4:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    75a6:	3907      	subs	r1, #7
		cont = cont->next;
    75a8:	e7f6      	b.n	7598 <log_msg_arg_get+0x28>
		return 0;
    75aa:	2000      	movs	r0, #0
}
    75ac:	4770      	bx	lr

000075ae <log_msg_put>:
{
    75ae:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    75b0:	1d02      	adds	r2, r0, #4
    75b2:	e8d2 1fef 	ldaex	r1, [r2]
    75b6:	3901      	subs	r1, #1
    75b8:	e8c2 1fec 	stlex	ip, r1, [r2]
    75bc:	f1bc 0f00 	cmp.w	ip, #0
    75c0:	d1f7      	bne.n	75b2 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
    75c2:	685b      	ldr	r3, [r3, #4]
    75c4:	b90b      	cbnz	r3, 75ca <log_msg_put+0x1c>
		msg_free(msg);
    75c6:	f7fa ba5d 	b.w	1a84 <msg_free>
}
    75ca:	4770      	bx	lr

000075cc <log_msg_str_get>:
}
    75cc:	6900      	ldr	r0, [r0, #16]
    75ce:	4770      	bx	lr

000075d0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    75d0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    75d2:	2400      	movs	r4, #0
    75d4:	9400      	str	r4, [sp, #0]
    75d6:	f7ff ff69 	bl	74ac <log_msg_hexdump_data_op>
}
    75da:	b002      	add	sp, #8
    75dc:	bd10      	pop	{r4, pc}

000075de <buffer_write>:
{
    75de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75e0:	4606      	mov	r6, r0
    75e2:	460d      	mov	r5, r1
    75e4:	4614      	mov	r4, r2
    75e6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    75e8:	4621      	mov	r1, r4
    75ea:	4628      	mov	r0, r5
    75ec:	463a      	mov	r2, r7
    75ee:	47b0      	blx	r6
	} while (len != 0);
    75f0:	1a24      	subs	r4, r4, r0
		buf += processed;
    75f2:	4405      	add	r5, r0
	} while (len != 0);
    75f4:	d1f8      	bne.n	75e8 <buffer_write+0xa>
}
    75f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000075f8 <std_print>:
{
    75f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    75fc:	b08e      	sub	sp, #56	; 0x38
    75fe:	af0e      	add	r7, sp, #56	; 0x38
    7600:	4680      	mov	r8, r0
    7602:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    7604:	f7ff ffe2 	bl	75cc <log_msg_str_get>
    7608:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    760a:	4640      	mov	r0, r8
    760c:	f7ff ffad 	bl	756a <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
    7610:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
    7614:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    7616:	0083      	lsls	r3, r0, #2
    7618:	3307      	adds	r3, #7
    761a:	f023 0307 	bic.w	r3, r3, #7
    761e:	ebad 0d03 	sub.w	sp, sp, r3
    7622:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    7624:	45d1      	cmp	r9, sl
    7626:	d116      	bne.n	7656 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    7628:	4640      	mov	r0, r8
    762a:	f7ff ff9e 	bl	756a <log_msg_nargs_get>
    762e:	280f      	cmp	r0, #15
    7630:	d81e      	bhi.n	7670 <std_print+0x78>
    7632:	e8df f010 	tbh	[pc, r0, lsl #1]
    7636:	0019      	.short	0x0019
    7638:	00260020 	.word	0x00260020
    763c:	0036002d 	.word	0x0036002d
    7640:	004e0041 	.word	0x004e0041
    7644:	006e005d 	.word	0x006e005d
    7648:	00960081 	.word	0x00960081
    764c:	00c600ad 	.word	0x00c600ad
    7650:	00fe00e1 	.word	0x00fe00e1
    7654:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
    7656:	4649      	mov	r1, r9
    7658:	4640      	mov	r0, r8
    765a:	f7ff ff89 	bl	7570 <log_msg_arg_get>
    765e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    7662:	f109 0901 	add.w	r9, r9, #1
    7666:	e7dd      	b.n	7624 <std_print+0x2c>
		print_formatted(output, str);
    7668:	4631      	mov	r1, r6
    766a:	4628      	mov	r0, r5
    766c:	f7fa fa48 	bl	1b00 <print_formatted>
}
    7670:	46bd      	mov	sp, r7
    7672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    7676:	4631      	mov	r1, r6
    7678:	4628      	mov	r0, r5
    767a:	6822      	ldr	r2, [r4, #0]
    767c:	f7fa fa40 	bl	1b00 <print_formatted>
		break;
    7680:	e7f6      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
    7682:	4631      	mov	r1, r6
    7684:	e9d4 2300 	ldrd	r2, r3, [r4]
    7688:	4628      	mov	r0, r5
    768a:	f7fa fa39 	bl	1b00 <print_formatted>
		break;
    768e:	e7ef      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
    7690:	68a3      	ldr	r3, [r4, #8]
    7692:	4631      	mov	r1, r6
    7694:	9300      	str	r3, [sp, #0]
    7696:	4628      	mov	r0, r5
    7698:	e9d4 2300 	ldrd	r2, r3, [r4]
    769c:	f7fa fa30 	bl	1b00 <print_formatted>
		break;
    76a0:	e7e6      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    76a2:	68e3      	ldr	r3, [r4, #12]
    76a4:	4631      	mov	r1, r6
    76a6:	9301      	str	r3, [sp, #4]
    76a8:	68a3      	ldr	r3, [r4, #8]
    76aa:	4628      	mov	r0, r5
    76ac:	9300      	str	r3, [sp, #0]
    76ae:	e9d4 2300 	ldrd	r2, r3, [r4]
    76b2:	f7fa fa25 	bl	1b00 <print_formatted>
		break;
    76b6:	e7db      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    76b8:	6923      	ldr	r3, [r4, #16]
    76ba:	4631      	mov	r1, r6
    76bc:	9302      	str	r3, [sp, #8]
    76be:	68e3      	ldr	r3, [r4, #12]
    76c0:	4628      	mov	r0, r5
    76c2:	9301      	str	r3, [sp, #4]
    76c4:	68a3      	ldr	r3, [r4, #8]
    76c6:	9300      	str	r3, [sp, #0]
    76c8:	e9d4 2300 	ldrd	r2, r3, [r4]
    76cc:	f7fa fa18 	bl	1b00 <print_formatted>
		break;
    76d0:	e7ce      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    76d2:	6963      	ldr	r3, [r4, #20]
    76d4:	4631      	mov	r1, r6
    76d6:	9303      	str	r3, [sp, #12]
    76d8:	6923      	ldr	r3, [r4, #16]
    76da:	4628      	mov	r0, r5
    76dc:	9302      	str	r3, [sp, #8]
    76de:	68e3      	ldr	r3, [r4, #12]
    76e0:	9301      	str	r3, [sp, #4]
    76e2:	68a3      	ldr	r3, [r4, #8]
    76e4:	9300      	str	r3, [sp, #0]
    76e6:	e9d4 2300 	ldrd	r2, r3, [r4]
    76ea:	f7fa fa09 	bl	1b00 <print_formatted>
		break;
    76ee:	e7bf      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    76f0:	69a3      	ldr	r3, [r4, #24]
    76f2:	4631      	mov	r1, r6
    76f4:	9304      	str	r3, [sp, #16]
    76f6:	6963      	ldr	r3, [r4, #20]
    76f8:	4628      	mov	r0, r5
    76fa:	9303      	str	r3, [sp, #12]
    76fc:	6923      	ldr	r3, [r4, #16]
    76fe:	9302      	str	r3, [sp, #8]
    7700:	68e3      	ldr	r3, [r4, #12]
    7702:	9301      	str	r3, [sp, #4]
    7704:	68a3      	ldr	r3, [r4, #8]
    7706:	9300      	str	r3, [sp, #0]
    7708:	e9d4 2300 	ldrd	r2, r3, [r4]
    770c:	f7fa f9f8 	bl	1b00 <print_formatted>
		break;
    7710:	e7ae      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    7712:	69e3      	ldr	r3, [r4, #28]
    7714:	4631      	mov	r1, r6
    7716:	9305      	str	r3, [sp, #20]
    7718:	69a3      	ldr	r3, [r4, #24]
    771a:	4628      	mov	r0, r5
    771c:	9304      	str	r3, [sp, #16]
    771e:	6963      	ldr	r3, [r4, #20]
    7720:	9303      	str	r3, [sp, #12]
    7722:	6923      	ldr	r3, [r4, #16]
    7724:	9302      	str	r3, [sp, #8]
    7726:	68e3      	ldr	r3, [r4, #12]
    7728:	9301      	str	r3, [sp, #4]
    772a:	68a3      	ldr	r3, [r4, #8]
    772c:	9300      	str	r3, [sp, #0]
    772e:	e9d4 2300 	ldrd	r2, r3, [r4]
    7732:	f7fa f9e5 	bl	1b00 <print_formatted>
		break;
    7736:	e79b      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    7738:	6a23      	ldr	r3, [r4, #32]
    773a:	4631      	mov	r1, r6
    773c:	9306      	str	r3, [sp, #24]
    773e:	69e3      	ldr	r3, [r4, #28]
    7740:	4628      	mov	r0, r5
    7742:	9305      	str	r3, [sp, #20]
    7744:	69a3      	ldr	r3, [r4, #24]
    7746:	9304      	str	r3, [sp, #16]
    7748:	6963      	ldr	r3, [r4, #20]
    774a:	9303      	str	r3, [sp, #12]
    774c:	6923      	ldr	r3, [r4, #16]
    774e:	9302      	str	r3, [sp, #8]
    7750:	68e3      	ldr	r3, [r4, #12]
    7752:	9301      	str	r3, [sp, #4]
    7754:	68a3      	ldr	r3, [r4, #8]
    7756:	9300      	str	r3, [sp, #0]
    7758:	e9d4 2300 	ldrd	r2, r3, [r4]
    775c:	f7fa f9d0 	bl	1b00 <print_formatted>
		break;
    7760:	e786      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    7762:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7764:	4631      	mov	r1, r6
    7766:	9307      	str	r3, [sp, #28]
    7768:	6a23      	ldr	r3, [r4, #32]
    776a:	4628      	mov	r0, r5
    776c:	9306      	str	r3, [sp, #24]
    776e:	69e3      	ldr	r3, [r4, #28]
    7770:	9305      	str	r3, [sp, #20]
    7772:	69a3      	ldr	r3, [r4, #24]
    7774:	9304      	str	r3, [sp, #16]
    7776:	6963      	ldr	r3, [r4, #20]
    7778:	9303      	str	r3, [sp, #12]
    777a:	6923      	ldr	r3, [r4, #16]
    777c:	9302      	str	r3, [sp, #8]
    777e:	68e3      	ldr	r3, [r4, #12]
    7780:	9301      	str	r3, [sp, #4]
    7782:	68a3      	ldr	r3, [r4, #8]
    7784:	9300      	str	r3, [sp, #0]
    7786:	e9d4 2300 	ldrd	r2, r3, [r4]
    778a:	f7fa f9b9 	bl	1b00 <print_formatted>
		break;
    778e:	e76f      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    7790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7792:	4631      	mov	r1, r6
    7794:	9308      	str	r3, [sp, #32]
    7796:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7798:	4628      	mov	r0, r5
    779a:	9307      	str	r3, [sp, #28]
    779c:	6a23      	ldr	r3, [r4, #32]
    779e:	9306      	str	r3, [sp, #24]
    77a0:	69e3      	ldr	r3, [r4, #28]
    77a2:	9305      	str	r3, [sp, #20]
    77a4:	69a3      	ldr	r3, [r4, #24]
    77a6:	9304      	str	r3, [sp, #16]
    77a8:	6963      	ldr	r3, [r4, #20]
    77aa:	9303      	str	r3, [sp, #12]
    77ac:	6923      	ldr	r3, [r4, #16]
    77ae:	9302      	str	r3, [sp, #8]
    77b0:	68e3      	ldr	r3, [r4, #12]
    77b2:	9301      	str	r3, [sp, #4]
    77b4:	68a3      	ldr	r3, [r4, #8]
    77b6:	9300      	str	r3, [sp, #0]
    77b8:	e9d4 2300 	ldrd	r2, r3, [r4]
    77bc:	f7fa f9a0 	bl	1b00 <print_formatted>
		break;
    77c0:	e756      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    77c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    77c4:	4631      	mov	r1, r6
    77c6:	9309      	str	r3, [sp, #36]	; 0x24
    77c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    77ca:	4628      	mov	r0, r5
    77cc:	9308      	str	r3, [sp, #32]
    77ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    77d0:	9307      	str	r3, [sp, #28]
    77d2:	6a23      	ldr	r3, [r4, #32]
    77d4:	9306      	str	r3, [sp, #24]
    77d6:	69e3      	ldr	r3, [r4, #28]
    77d8:	9305      	str	r3, [sp, #20]
    77da:	69a3      	ldr	r3, [r4, #24]
    77dc:	9304      	str	r3, [sp, #16]
    77de:	6963      	ldr	r3, [r4, #20]
    77e0:	9303      	str	r3, [sp, #12]
    77e2:	6923      	ldr	r3, [r4, #16]
    77e4:	9302      	str	r3, [sp, #8]
    77e6:	68e3      	ldr	r3, [r4, #12]
    77e8:	9301      	str	r3, [sp, #4]
    77ea:	68a3      	ldr	r3, [r4, #8]
    77ec:	9300      	str	r3, [sp, #0]
    77ee:	e9d4 2300 	ldrd	r2, r3, [r4]
    77f2:	f7fa f985 	bl	1b00 <print_formatted>
		break;
    77f6:	e73b      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    77f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    77fa:	4631      	mov	r1, r6
    77fc:	930a      	str	r3, [sp, #40]	; 0x28
    77fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7800:	4628      	mov	r0, r5
    7802:	9309      	str	r3, [sp, #36]	; 0x24
    7804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7806:	9308      	str	r3, [sp, #32]
    7808:	6a63      	ldr	r3, [r4, #36]	; 0x24
    780a:	9307      	str	r3, [sp, #28]
    780c:	6a23      	ldr	r3, [r4, #32]
    780e:	9306      	str	r3, [sp, #24]
    7810:	69e3      	ldr	r3, [r4, #28]
    7812:	9305      	str	r3, [sp, #20]
    7814:	69a3      	ldr	r3, [r4, #24]
    7816:	9304      	str	r3, [sp, #16]
    7818:	6963      	ldr	r3, [r4, #20]
    781a:	9303      	str	r3, [sp, #12]
    781c:	6923      	ldr	r3, [r4, #16]
    781e:	9302      	str	r3, [sp, #8]
    7820:	68e3      	ldr	r3, [r4, #12]
    7822:	9301      	str	r3, [sp, #4]
    7824:	68a3      	ldr	r3, [r4, #8]
    7826:	9300      	str	r3, [sp, #0]
    7828:	e9d4 2300 	ldrd	r2, r3, [r4]
    782c:	f7fa f968 	bl	1b00 <print_formatted>
		break;
    7830:	e71e      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    7832:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7834:	4631      	mov	r1, r6
    7836:	930b      	str	r3, [sp, #44]	; 0x2c
    7838:	6b23      	ldr	r3, [r4, #48]	; 0x30
    783a:	4628      	mov	r0, r5
    783c:	930a      	str	r3, [sp, #40]	; 0x28
    783e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7840:	9309      	str	r3, [sp, #36]	; 0x24
    7842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7844:	9308      	str	r3, [sp, #32]
    7846:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7848:	9307      	str	r3, [sp, #28]
    784a:	6a23      	ldr	r3, [r4, #32]
    784c:	9306      	str	r3, [sp, #24]
    784e:	69e3      	ldr	r3, [r4, #28]
    7850:	9305      	str	r3, [sp, #20]
    7852:	69a3      	ldr	r3, [r4, #24]
    7854:	9304      	str	r3, [sp, #16]
    7856:	6963      	ldr	r3, [r4, #20]
    7858:	9303      	str	r3, [sp, #12]
    785a:	6923      	ldr	r3, [r4, #16]
    785c:	9302      	str	r3, [sp, #8]
    785e:	68e3      	ldr	r3, [r4, #12]
    7860:	9301      	str	r3, [sp, #4]
    7862:	68a3      	ldr	r3, [r4, #8]
    7864:	9300      	str	r3, [sp, #0]
    7866:	e9d4 2300 	ldrd	r2, r3, [r4]
    786a:	f7fa f949 	bl	1b00 <print_formatted>
		break;
    786e:	e6ff      	b.n	7670 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    7870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7872:	4631      	mov	r1, r6
    7874:	930c      	str	r3, [sp, #48]	; 0x30
    7876:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7878:	4628      	mov	r0, r5
    787a:	930b      	str	r3, [sp, #44]	; 0x2c
    787c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    787e:	930a      	str	r3, [sp, #40]	; 0x28
    7880:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7882:	9309      	str	r3, [sp, #36]	; 0x24
    7884:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7886:	9308      	str	r3, [sp, #32]
    7888:	6a63      	ldr	r3, [r4, #36]	; 0x24
    788a:	9307      	str	r3, [sp, #28]
    788c:	6a23      	ldr	r3, [r4, #32]
    788e:	9306      	str	r3, [sp, #24]
    7890:	69e3      	ldr	r3, [r4, #28]
    7892:	9305      	str	r3, [sp, #20]
    7894:	69a3      	ldr	r3, [r4, #24]
    7896:	9304      	str	r3, [sp, #16]
    7898:	6963      	ldr	r3, [r4, #20]
    789a:	9303      	str	r3, [sp, #12]
    789c:	6923      	ldr	r3, [r4, #16]
    789e:	9302      	str	r3, [sp, #8]
    78a0:	68e3      	ldr	r3, [r4, #12]
    78a2:	9301      	str	r3, [sp, #4]
    78a4:	68a3      	ldr	r3, [r4, #8]
    78a6:	9300      	str	r3, [sp, #0]
    78a8:	e9d4 2300 	ldrd	r2, r3, [r4]
    78ac:	f7fa f928 	bl	1b00 <print_formatted>
}
    78b0:	e6de      	b.n	7670 <std_print+0x78>

000078b2 <log_output_flush>:
		     output->control_block->offset,
    78b2:	6842      	ldr	r2, [r0, #4]
{
    78b4:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
    78b6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
    78ba:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    78bc:	6881      	ldr	r1, [r0, #8]
    78be:	6800      	ldr	r0, [r0, #0]
    78c0:	f7ff fe8d 	bl	75de <buffer_write>
	output->control_block->offset = 0;
    78c4:	2200      	movs	r2, #0
    78c6:	6863      	ldr	r3, [r4, #4]
    78c8:	601a      	str	r2, [r3, #0]
}
    78ca:	bd10      	pop	{r4, pc}

000078cc <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    78cc:	2200      	movs	r2, #0
    78ce:	e9c0 2200 	strd	r2, r2, [r0]
    78d2:	6082      	str	r2, [r0, #8]
}
    78d4:	4770      	bx	lr

000078d6 <set_starting_state>:
{
    78d6:	b510      	push	{r4, lr}
	__asm__ volatile(
    78d8:	f04f 0320 	mov.w	r3, #32
    78dc:	f3ef 8211 	mrs	r2, BASEPRI
    78e0:	f383 8811 	msr	BASEPRI, r3
    78e4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    78e8:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    78ea:	f003 0407 	and.w	r4, r3, #7
    78ee:	2c01      	cmp	r4, #1
    78f0:	d106      	bne.n	7900 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    78f2:	6001      	str	r1, [r0, #0]
	int err = 0;
    78f4:	2000      	movs	r0, #0
	__asm__ volatile(
    78f6:	f382 8811 	msr	BASEPRI, r2
    78fa:	f3bf 8f6f 	isb	sy
}
    78fe:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7900:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7904:	428b      	cmp	r3, r1
		err = -EALREADY;
    7906:	bf14      	ite	ne
    7908:	f04f 30ff 	movne.w	r0, #4294967295
    790c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    7910:	e7f1      	b.n	78f6 <set_starting_state+0x20>

00007912 <set_on_state>:
	__asm__ volatile(
    7912:	f04f 0320 	mov.w	r3, #32
    7916:	f3ef 8211 	mrs	r2, BASEPRI
    791a:	f383 8811 	msr	BASEPRI, r3
    791e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7922:	6803      	ldr	r3, [r0, #0]
    7924:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7928:	f043 0302 	orr.w	r3, r3, #2
    792c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    792e:	f382 8811 	msr	BASEPRI, r2
    7932:	f3bf 8f6f 	isb	sy
}
    7936:	4770      	bx	lr

00007938 <onoff_started_callback>:
	return &data->mgr[type];
    7938:	6900      	ldr	r0, [r0, #16]
    793a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    793c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    7940:	2100      	movs	r1, #0
    7942:	4710      	bx	r2

00007944 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    7944:	2003      	movs	r0, #3
    7946:	f7fc bd1f 	b.w	4388 <nrfx_clock_start>

0000794a <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    794a:	2002      	movs	r0, #2
    794c:	f7fc bd1c 	b.w	4388 <nrfx_clock_start>

00007950 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7950:	2000      	movs	r0, #0
    7952:	f7fc bd19 	b.w	4388 <nrfx_clock_start>

00007956 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    7956:	2003      	movs	r0, #3
    7958:	f7fc bd8e 	b.w	4478 <nrfx_clock_stop>

0000795c <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    795c:	2002      	movs	r0, #2
    795e:	f7fc bd8b 	b.w	4478 <nrfx_clock_stop>

00007962 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7962:	2000      	movs	r0, #0
    7964:	f7fc bd88 	b.w	4478 <nrfx_clock_stop>

00007968 <api_stop>:
	return stop(dev, subsys, CTX_API);
    7968:	2280      	movs	r2, #128	; 0x80
    796a:	f7fa bc77 	b.w	225c <stop>

0000796e <blocking_start_callback>:
{
    796e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7970:	f7fd bcb6 	b.w	52e0 <z_impl_k_sem_give>

00007974 <api_start>:
{
    7974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    7978:	240c      	movs	r4, #12
    797a:	b2c9      	uxtb	r1, r1
    797c:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    797e:	6905      	ldr	r5, [r0, #16]
{
    7980:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    7982:	f104 0088 	add.w	r0, r4, #136	; 0x88
    7986:	2180      	movs	r1, #128	; 0x80
    7988:	4428      	add	r0, r5
{
    798a:	4690      	mov	r8, r2
    798c:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    798e:	f7ff ffa2 	bl	78d6 <set_starting_state>
	if (err < 0) {
    7992:	2800      	cmp	r0, #0
    7994:	db06      	blt.n	79a4 <api_start+0x30>
	subdata->cb = cb;
    7996:	4425      	add	r5, r4
	subdata->user_data = user_data;
    7998:	e9c5 8720 	strd	r8, r7, [r5, #128]	; 0x80
	 get_sub_config(dev, type)->start();
    799c:	6873      	ldr	r3, [r6, #4]
    799e:	591b      	ldr	r3, [r3, r4]
    79a0:	4798      	blx	r3
	return 0;
    79a2:	2000      	movs	r0, #0
}
    79a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000079a8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    79a8:	4770      	bx	lr

000079aa <abort_function>:
	while(1);
    79aa:	e7fe      	b.n	79aa <abort_function>

000079ac <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    79ac:	2100      	movs	r1, #0
    79ae:	2001      	movs	r0, #1
    79b0:	f7fb b95c 	b.w	2c6c <z_arm_fatal_error>

000079b4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    79b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
    79b6:	f383 880b 	msr	PSPLIM, r3
}
    79ba:	4770      	bx	lr

000079bc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    79bc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    79be:	6800      	ldr	r0, [r0, #0]
    79c0:	f7fb b954 	b.w	2c6c <z_arm_fatal_error>

000079c4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    79c4:	b508      	push	{r3, lr}
	handler();
    79c6:	f7fb f989 	bl	2cdc <z_SysNmiOnReset>
	z_arm_int_exit();
}
    79ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    79ce:	f7fb bc4d 	b.w	326c <z_arm_exc_exit>

000079d2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    79d2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    79d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    79da:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    79dc:	bf08      	it	eq
    79de:	f06f 0015 	mvneq.w	r0, #21
    79e2:	4770      	bx	lr

000079e4 <mpu_configure_region>:
{
    79e4:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    79e6:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    79e8:	680c      	ldr	r4, [r1, #0]
{
    79ea:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    79ec:	890a      	ldrh	r2, [r1, #8]
    79ee:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    79f0:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    79f2:	3b01      	subs	r3, #1
    79f4:	f024 041f 	bic.w	r4, r4, #31
    79f8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    79fa:	f002 021f 	and.w	r2, r2, #31
    79fe:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    7a02:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
    7a06:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
    7a08:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    7a0c:	9303      	str	r3, [sp, #12]
    7a0e:	f7fb fcc3 	bl	3398 <region_allocate_and_init>
}
    7a12:	b005      	add	sp, #20
    7a14:	bd30      	pop	{r4, r5, pc}

00007a16 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    7a16:	b570      	push	{r4, r5, r6, lr}
    7a18:	4605      	mov	r5, r0
    7a1a:	3901      	subs	r1, #1
    7a1c:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    7a1e:	b142      	cbz	r2, 7a32 <strncpy+0x1c>
    7a20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    7a24:	1e56      	subs	r6, r2, #1
    7a26:	b92b      	cbnz	r3, 7a34 <strncpy+0x1e>
    7a28:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    7a2a:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    7a2e:	42a2      	cmp	r2, r4
    7a30:	d1fb      	bne.n	7a2a <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    7a32:	bd70      	pop	{r4, r5, r6, pc}
		n--;
    7a34:	4632      	mov	r2, r6
		*d = *s;
    7a36:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    7a3a:	e7ef      	b.n	7a1c <strncpy+0x6>

00007a3c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7a3c:	4603      	mov	r3, r0
	size_t n = 0;
    7a3e:	2000      	movs	r0, #0

	while (*s != '\0') {
    7a40:	5c1a      	ldrb	r2, [r3, r0]
    7a42:	b902      	cbnz	r2, 7a46 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7a44:	4770      	bx	lr
		n++;
    7a46:	3001      	adds	r0, #1
    7a48:	e7fa      	b.n	7a40 <strlen+0x4>

00007a4a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7a4a:	4603      	mov	r3, r0
	size_t n = 0;
    7a4c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7a4e:	5c1a      	ldrb	r2, [r3, r0]
    7a50:	b10a      	cbz	r2, 7a56 <strnlen+0xc>
    7a52:	4288      	cmp	r0, r1
    7a54:	d100      	bne.n	7a58 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    7a56:	4770      	bx	lr
		n++;
    7a58:	3001      	adds	r0, #1
    7a5a:	e7f8      	b.n	7a4e <strnlen+0x4>

00007a5c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    7a5c:	1e43      	subs	r3, r0, #1
    7a5e:	3901      	subs	r1, #1
    7a60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7a64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    7a68:	4282      	cmp	r2, r0
    7a6a:	d101      	bne.n	7a70 <strcmp+0x14>
    7a6c:	2a00      	cmp	r2, #0
    7a6e:	d1f7      	bne.n	7a60 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    7a70:	1a10      	subs	r0, r2, r0
    7a72:	4770      	bx	lr

00007a74 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    7a74:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    7a76:	ea81 0400 	eor.w	r4, r1, r0
    7a7a:	07a5      	lsls	r5, r4, #30
    7a7c:	4603      	mov	r3, r0
    7a7e:	d00b      	beq.n	7a98 <memcpy+0x24>
    7a80:	3b01      	subs	r3, #1
    7a82:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    7a84:	4291      	cmp	r1, r2
    7a86:	d11b      	bne.n	7ac0 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    7a8a:	2a00      	cmp	r2, #0
    7a8c:	d0fc      	beq.n	7a88 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    7a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    7a92:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    7a94:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    7a98:	079c      	lsls	r4, r3, #30
    7a9a:	d1f6      	bne.n	7a8a <memcpy+0x16>
    7a9c:	f022 0403 	bic.w	r4, r2, #3
    7aa0:	1f1d      	subs	r5, r3, #4
    7aa2:	0896      	lsrs	r6, r2, #2
    7aa4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    7aa6:	42b9      	cmp	r1, r7
    7aa8:	d105      	bne.n	7ab6 <memcpy+0x42>
    7aaa:	f06f 0503 	mvn.w	r5, #3
    7aae:	4423      	add	r3, r4
    7ab0:	fb05 2206 	mla	r2, r5, r6, r2
    7ab4:	e7e4      	b.n	7a80 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    7ab6:	f851 cb04 	ldr.w	ip, [r1], #4
    7aba:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    7abe:	e7f2      	b.n	7aa6 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    7ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
    7ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7ac8:	e7dc      	b.n	7a84 <memcpy+0x10>

00007aca <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    7aca:	4603      	mov	r3, r0
{
    7acc:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    7ace:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    7ad0:	079c      	lsls	r4, r3, #30
    7ad2:	d111      	bne.n	7af8 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    7ad4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    7ad8:	f022 0603 	bic.w	r6, r2, #3
    7adc:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    7ae0:	441e      	add	r6, r3
    7ae2:	0894      	lsrs	r4, r2, #2
    7ae4:	42b3      	cmp	r3, r6
    7ae6:	d10d      	bne.n	7b04 <memset+0x3a>
    7ae8:	f06f 0503 	mvn.w	r5, #3
    7aec:	fb05 2204 	mla	r2, r5, r4, r2
    7af0:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    7af2:	4293      	cmp	r3, r2
    7af4:	d109      	bne.n	7b0a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7af6:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    7af8:	2a00      	cmp	r2, #0
    7afa:	d0fc      	beq.n	7af6 <memset+0x2c>
		*(d_byte++) = c_byte;
    7afc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7b00:	3a01      	subs	r2, #1
    7b02:	e7e5      	b.n	7ad0 <memset+0x6>
		*(d_word++) = c_word;
    7b04:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    7b08:	e7ec      	b.n	7ae4 <memset+0x1a>
		*(d_byte++) = c_byte;
    7b0a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7b0e:	e7f0      	b.n	7af2 <memset+0x28>

00007b10 <_stdout_hook_default>:
}
    7b10:	f04f 30ff 	mov.w	r0, #4294967295
    7b14:	4770      	bx	lr

00007b16 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b16:	6843      	ldr	r3, [r0, #4]
}
    7b18:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b1a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7b1c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    7b1e:	600b      	str	r3, [r1, #0]
}
    7b20:	4770      	bx	lr

00007b22 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b22:	6843      	ldr	r3, [r0, #4]
    7b24:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7b26:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7b28:	4042      	eors	r2, r0
    7b2a:	400a      	ands	r2, r1
    7b2c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    7b2e:	605a      	str	r2, [r3, #4]
}
    7b30:	2000      	movs	r0, #0
    7b32:	4770      	bx	lr

00007b34 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b34:	6843      	ldr	r3, [r0, #4]
}
    7b36:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b38:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    7b3a:	6099      	str	r1, [r3, #8]
}
    7b3c:	4770      	bx	lr

00007b3e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b3e:	6843      	ldr	r3, [r0, #4]
}
    7b40:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b42:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7b44:	60d9      	str	r1, [r3, #12]
}
    7b46:	4770      	bx	lr

00007b48 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b48:	6843      	ldr	r3, [r0, #4]
}
    7b4a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7b4c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7b4e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    7b50:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7b52:	6053      	str	r3, [r2, #4]
}
    7b54:	4770      	bx	lr

00007b56 <nrf_gpio_cfg_sense_set>:
{
    7b56:	b513      	push	{r0, r1, r4, lr}
    7b58:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b5a:	a801      	add	r0, sp, #4
{
    7b5c:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b5e:	f7fb fe83 	bl	3868 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    7b62:	9b01      	ldr	r3, [sp, #4]
    7b64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7b68:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    7b6c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    7b70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    7b74:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    7b78:	b002      	add	sp, #8
    7b7a:	bd10      	pop	{r4, pc}

00007b7c <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
    7b7c:	6903      	ldr	r3, [r0, #16]
{
    7b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t out = data->pin_int_en;
    7b82:	68de      	ldr	r6, [r3, #12]
{
    7b84:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    7b86:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    7b8a:	430a      	orrs	r2, r1
    7b8c:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t check_pins = level_pins;
    7b90:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    7b92:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    7b94:	f04f 0a00 	mov.w	sl, #0
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    7b98:	f8d0 b004 	ldr.w	fp, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    7b9c:	691b      	ldr	r3, [r3, #16]
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    7b9e:	f8db 2004 	ldr.w	r2, [fp, #4]
    return p_reg->IN;
    7ba2:	6915      	ldr	r5, [r2, #16]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    7ba4:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    7ba6:	ea26 0505 	bic.w	r5, r6, r5
	while (check_pins) {
    7baa:	b91f      	cbnz	r7, 7bb4 <check_level_trigger_pins+0x38>
}
    7bac:	4628      	mov	r0, r5
    7bae:	b003      	add	sp, #12
    7bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    7bb4:	423c      	tst	r4, r7
    7bb6:	d01f      	beq.n	7bf8 <check_level_trigger_pins+0x7c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7bb8:	f89b 3008 	ldrb.w	r3, [fp, #8]
    7bbc:	f00a 091f 	and.w	r9, sl, #31
			if (!(level_pins & bit)) {
    7bc0:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7bc2:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
			if (!(level_pins & bit)) {
    7bc6:	d111      	bne.n	7bec <check_level_trigger_pins+0x70>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7bc8:	a801      	add	r0, sp, #4
    7bca:	f8cd 9004 	str.w	r9, [sp, #4]
    7bce:	f7fb fe4b 	bl	3868 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7bd2:	9b01      	ldr	r3, [sp, #4]
    7bd4:	3380      	adds	r3, #128	; 0x80
    7bd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    7bda:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    7bde:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    7be0:	bf02      	ittt	eq
    7be2:	f8d8 3000 	ldreq.w	r3, [r8]
    7be6:	4323      	orreq	r3, r4
    7be8:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    7bec:	2100      	movs	r1, #0
    7bee:	4648      	mov	r0, r9
    7bf0:	f7ff ffb1 	bl	7b56 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    7bf4:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    7bf8:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    7bfc:	0064      	lsls	r4, r4, #1
    7bfe:	e7d4      	b.n	7baa <check_level_trigger_pins+0x2e>

00007c00 <cfg_level_pins>:
{
    7c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
    7c04:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    7c06:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    7c08:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    7c0a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    7c0e:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    7c10:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    7c14:	4313      	orrs	r3, r2
    7c16:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    7c1a:	b90c      	cbnz	r4, 7c20 <cfg_level_pins+0x20>
}
    7c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    7c20:	4226      	tst	r6, r4
    7c22:	d010      	beq.n	7c46 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    7c24:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7c26:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    7c2a:	40e9      	lsrs	r1, r5
    7c2c:	f001 0101 	and.w	r1, r1, #1
    7c30:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7c34:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    7c38:	b2c9      	uxtb	r1, r1
    7c3a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    7c3e:	f7ff ff8a 	bl	7b56 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    7c42:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    7c46:	3501      	adds	r5, #1
		bit <<= 1;
    7c48:	0076      	lsls	r6, r6, #1
    7c4a:	e7e6      	b.n	7c1a <cfg_level_pins+0x1a>

00007c4c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    7c4c:	6843      	ldr	r3, [r0, #4]
    7c4e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    7c50:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7c54:	05d1      	lsls	r1, r2, #23
    7c56:	d518      	bpl.n	7c8a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c58:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    7c5c:	b1aa      	cbz	r2, 7c8a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7c5e:	f04f 0120 	mov.w	r1, #32
    7c62:	f3ef 8211 	mrs	r2, BASEPRI
    7c66:	f381 8811 	msr	BASEPRI, r1
    7c6a:	f3bf 8f6f 	isb	sy
    7c6e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7c72:	b131      	cbz	r1, 7c82 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c74:	2100      	movs	r1, #0
    7c76:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    7c7a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7c7e:	2101      	movs	r1, #1
    7c80:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    7c82:	f382 8811 	msr	BASEPRI, r2
    7c86:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7c8a:	6842      	ldr	r2, [r0, #4]
    7c8c:	6852      	ldr	r2, [r2, #4]
    7c8e:	06d2      	lsls	r2, r2, #27
    7c90:	d515      	bpl.n	7cbe <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    7c92:	f04f 0120 	mov.w	r1, #32
    7c96:	f3ef 8211 	mrs	r2, BASEPRI
    7c9a:	f381 8811 	msr	BASEPRI, r1
    7c9e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ca2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7ca6:	b111      	cbz	r1, 7cae <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7ca8:	2100      	movs	r1, #0
    7caa:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    7cae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7cb2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7cb6:	f382 8811 	msr	BASEPRI, r2
    7cba:	f3bf 8f6f 	isb	sy
}
    7cbe:	4770      	bx	lr

00007cc0 <uarte_nrfx_config_get>:
{
    7cc0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    7cc2:	6902      	ldr	r2, [r0, #16]
    7cc4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7cc8:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7ccc:	2000      	movs	r0, #0
    7cce:	4770      	bx	lr

00007cd0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7cd0:	6843      	ldr	r3, [r0, #4]
    7cd2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7cd4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7cd8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7cdc:	4770      	bx	lr

00007cde <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    7cde:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    7ce0:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ce2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7ce6:	b940      	cbnz	r0, 7cfa <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7ce8:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7cea:	0712      	lsls	r2, r2, #28
    7cec:	d406      	bmi.n	7cfc <is_tx_ready+0x1e>
    7cee:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    7cf2:	3800      	subs	r0, #0
    7cf4:	bf18      	it	ne
    7cf6:	2001      	movne	r0, #1
    7cf8:	4770      	bx	lr
    7cfa:	2001      	movs	r0, #1
}
    7cfc:	4770      	bx	lr

00007cfe <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7cfe:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    7d00:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7d02:	681b      	ldr	r3, [r3, #0]
    7d04:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7d08:	b148      	cbz	r0, 7d1e <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7d0a:	2000      	movs	r0, #0
	*c = data->rx_data;
    7d0c:	7c52      	ldrb	r2, [r2, #17]
    7d0e:	700a      	strb	r2, [r1, #0]
    7d10:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7d14:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d18:	2201      	movs	r2, #1
    7d1a:	601a      	str	r2, [r3, #0]
	return 0;
    7d1c:	4770      	bx	lr
		return -1;
    7d1e:	f04f 30ff 	mov.w	r0, #4294967295
}
    7d22:	4770      	bx	lr

00007d24 <nrf_gpio_cfg_output>:
{
    7d24:	b507      	push	{r0, r1, r2, lr}
    7d26:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7d28:	a801      	add	r0, sp, #4
    7d2a:	f7fc f861 	bl	3df0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    7d2e:	9b01      	ldr	r3, [sp, #4]
    7d30:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7d34:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    7d38:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7d3c:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    7d40:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    7d44:	b003      	add	sp, #12
    7d46:	f85d fb04 	ldr.w	pc, [sp], #4

00007d4a <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7d4a:	f7ff b8d1 	b.w	6ef0 <nrf_cc3xx_platform_init_no_rng>

00007d4e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7d4e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7d50:	f7fa fdbc 	bl	28cc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7d54:	f7fa fe80 	bl	2a58 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7d5c:	f7ff b8c8 	b.w	6ef0 <nrf_cc3xx_platform_init_no_rng>

00007d60 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7d60:	4700      	bx	r0

00007d62 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7d62:	f000 b86c 	b.w	7e3e <z_impl_k_busy_wait>

00007d66 <z_device_state_init>:
}
    7d66:	4770      	bx	lr

00007d68 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
    7d68:	68c3      	ldr	r3, [r0, #12]
    7d6a:	8818      	ldrh	r0, [r3, #0]
    7d6c:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    7d70:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7d74:	4258      	negs	r0, r3
    7d76:	4158      	adcs	r0, r3
    7d78:	4770      	bx	lr

00007d7a <arch_system_halt>:
	__asm__ volatile(
    7d7a:	f04f 0220 	mov.w	r2, #32
    7d7e:	f3ef 8311 	mrs	r3, BASEPRI
    7d82:	f382 8811 	msr	BASEPRI, r2
    7d86:	f3bf 8f6f 	isb	sy
	for (;;) {
    7d8a:	e7fe      	b.n	7d8a <arch_system_halt+0x10>

00007d8c <k_mem_slab_init>:
{
    7d8c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7d8e:	2400      	movs	r4, #0
    7d90:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    7d92:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7d94:	ea41 0402 	orr.w	r4, r1, r2
    7d98:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7d9c:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    7da0:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7da2:	d10c      	bne.n	7dbe <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    7da4:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7da6:	42a3      	cmp	r3, r4
    7da8:	d103      	bne.n	7db2 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    7daa:	e9c0 0000 	strd	r0, r0, [r0]
}
    7dae:	2000      	movs	r0, #0
}
    7db0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7db2:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7db4:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    7db6:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    7db8:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    7dba:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7dbc:	e7f3      	b.n	7da6 <k_mem_slab_init+0x1a>
		return -EINVAL;
    7dbe:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7dc2:	e7f5      	b.n	7db0 <k_mem_slab_init+0x24>

00007dc4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7dc4:	f3ef 8005 	mrs	r0, IPSR
}
    7dc8:	3800      	subs	r0, #0
    7dca:	bf18      	it	ne
    7dcc:	2001      	movne	r0, #1
    7dce:	4770      	bx	lr

00007dd0 <z_impl_k_thread_name_set>:
}
    7dd0:	f06f 0057 	mvn.w	r0, #87	; 0x57
    7dd4:	4770      	bx	lr

00007dd6 <k_thread_name_get>:
}
    7dd6:	2000      	movs	r0, #0
    7dd8:	4770      	bx	lr

00007dda <z_pm_save_idle_exit>:
{
    7dda:	b508      	push	{r3, lr}
	pm_system_resume();
    7ddc:	f7fa f968 	bl	20b0 <pm_system_resume>
}
    7de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7de4:	f7ff bde0 	b.w	79a8 <sys_clock_idle_exit>

00007de8 <z_impl_k_mutex_init>:
{
    7de8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7dea:	2000      	movs	r0, #0
    7dec:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    7df0:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    7df4:	4770      	bx	lr

00007df6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7df6:	4603      	mov	r3, r0
    7df8:	b920      	cbnz	r0, 7e04 <z_reschedule_irqlock+0xe>
    7dfa:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7dfe:	b90a      	cbnz	r2, 7e04 <z_reschedule_irqlock+0xe>
    7e00:	f7fa be40 	b.w	2a84 <arch_swap>
	__asm__ volatile(
    7e04:	f383 8811 	msr	BASEPRI, r3
    7e08:	f3bf 8f6f 	isb	sy
}
    7e0c:	4770      	bx	lr

00007e0e <z_reschedule_unlocked>:
	__asm__ volatile(
    7e0e:	f04f 0320 	mov.w	r3, #32
    7e12:	f3ef 8011 	mrs	r0, BASEPRI
    7e16:	f383 8811 	msr	BASEPRI, r3
    7e1a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7e1e:	f7ff bfea 	b.w	7df6 <z_reschedule_irqlock>

00007e22 <z_priq_dumb_best>:
{
    7e22:	4603      	mov	r3, r0
	return list->head == list;
    7e24:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e26:	4283      	cmp	r3, r0
    7e28:	d003      	beq.n	7e32 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    7e2a:	2800      	cmp	r0, #0
    7e2c:	bf38      	it	cc
    7e2e:	2000      	movcc	r0, #0
    7e30:	4770      	bx	lr
	struct k_thread *thread = NULL;
    7e32:	2000      	movs	r0, #0
}
    7e34:	4770      	bx	lr

00007e36 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7e36:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7e38:	f7fe ff76 	bl	6d28 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7e3c:	bd08      	pop	{r3, pc}

00007e3e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7e3e:	b108      	cbz	r0, 7e44 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7e40:	f7f9 baae 	b.w	13a0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7e44:	4770      	bx	lr

00007e46 <k_timer_init>:
	timer->status = 0U;
    7e46:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    7e48:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    7e4c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    7e50:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    7e54:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    7e58:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    7e5a:	6343      	str	r3, [r0, #52]	; 0x34
}
    7e5c:	4770      	bx	lr

00007e5e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    7e5e:	b510      	push	{r4, lr}
    7e60:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    7e62:	f7fe fdb1 	bl	69c8 <z_abort_timeout>

	if (inactive) {
    7e66:	b9b0      	cbnz	r0, 7e96 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    7e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7e6a:	b10b      	cbz	r3, 7e70 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7e6c:	4620      	mov	r0, r4
    7e6e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    7e70:	f104 0018 	add.w	r0, r4, #24
    7e74:	f7fe f980 	bl	6178 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    7e78:	b168      	cbz	r0, 7e96 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7e7a:	f7fd ffe9 	bl	5e50 <z_ready_thread>
    7e7e:	f04f 0320 	mov.w	r3, #32
    7e82:	f3ef 8011 	mrs	r0, BASEPRI
    7e86:	f383 8811 	msr	BASEPRI, r3
    7e8a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    7e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e92:	f7ff bfb0 	b.w	7df6 <z_reschedule_irqlock>
    7e96:	bd10      	pop	{r4, pc}

00007e98 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7e98:	4770      	bx	lr
