
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20023c78 	.word	0x20023c78
    c004:	0000e219 	.word	0x0000e219
    c008:	0001c9d5 	.word	0x0001c9d5
    c00c:	0000e249 	.word	0x0000e249
    c010:	0000e249 	.word	0x0000e249
    c014:	0000e249 	.word	0x0000e249
    c018:	0000e249 	.word	0x0000e249
    c01c:	0000e249 	.word	0x0000e249
	...
    c02c:	0000df59 	.word	0x0000df59
    c030:	0000e249 	.word	0x0000e249
    c034:	00000000 	.word	0x00000000
    c038:	0000deb5 	.word	0x0000deb5
    c03c:	0001c9c1 	.word	0x0001c9c1

0000c040 <_irq_vector_table>:
    c040:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c050:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c060:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c070:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c080:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c090:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c0a0:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c0b0:	00012025 0001fa55 0000e1d9 0000e1d9     % ..U...........
    c0c0:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c0d0:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c0e0:	0000e1d9 0000e1d9 0001fa73 0000e1d9     ........s.......
    c0f0:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c100:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c110:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c120:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c130:	0000e1d9 0000e1d9 0000e1d9 0000e1d9     ................
    c140:	0000e1d9                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00016310 00000001 0000c000 0000c000     .c..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_uldivmod>:
    c5b8:	b953      	cbnz	r3, c5d0 <__aeabi_uldivmod+0x18>
    c5ba:	b94a      	cbnz	r2, c5d0 <__aeabi_uldivmod+0x18>
    c5bc:	2900      	cmp	r1, #0
    c5be:	bf08      	it	eq
    c5c0:	2800      	cmpeq	r0, #0
    c5c2:	bf1c      	itt	ne
    c5c4:	f04f 31ff 	movne.w	r1, #4294967295
    c5c8:	f04f 30ff 	movne.w	r0, #4294967295
    c5cc:	f000 b980 	b.w	c8d0 <__aeabi_idiv0>
    c5d0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5d8:	f000 f806 	bl	c5e8 <__udivmoddi4>
    c5dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5e4:	b004      	add	sp, #16
    c5e6:	4770      	bx	lr

0000c5e8 <__udivmoddi4>:
    c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c5ee:	4604      	mov	r4, r0
    c5f0:	4688      	mov	r8, r1
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	f040 8084 	bne.w	c700 <__udivmoddi4+0x118>
    c5f8:	428a      	cmp	r2, r1
    c5fa:	4617      	mov	r7, r2
    c5fc:	d943      	bls.n	c686 <__udivmoddi4+0x9e>
    c5fe:	fab2 f282 	clz	r2, r2
    c602:	b142      	cbz	r2, c616 <__udivmoddi4+0x2e>
    c604:	f1c2 0020 	rsb	r0, r2, #32
    c608:	4091      	lsls	r1, r2
    c60a:	4097      	lsls	r7, r2
    c60c:	fa24 f000 	lsr.w	r0, r4, r0
    c610:	4094      	lsls	r4, r2
    c612:	ea40 0801 	orr.w	r8, r0, r1
    c616:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c61a:	0c23      	lsrs	r3, r4, #16
    c61c:	fa1f fe87 	uxth.w	lr, r7
    c620:	fbb8 f6fc 	udiv	r6, r8, ip
    c624:	fb0c 8116 	mls	r1, ip, r6, r8
    c628:	fb06 f00e 	mul.w	r0, r6, lr
    c62c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c630:	4298      	cmp	r0, r3
    c632:	d907      	bls.n	c644 <__udivmoddi4+0x5c>
    c634:	18fb      	adds	r3, r7, r3
    c636:	f106 31ff 	add.w	r1, r6, #4294967295
    c63a:	d202      	bcs.n	c642 <__udivmoddi4+0x5a>
    c63c:	4298      	cmp	r0, r3
    c63e:	f200 8131 	bhi.w	c8a4 <__udivmoddi4+0x2bc>
    c642:	460e      	mov	r6, r1
    c644:	1a19      	subs	r1, r3, r0
    c646:	b2a3      	uxth	r3, r4
    c648:	fbb1 f0fc 	udiv	r0, r1, ip
    c64c:	fb0c 1110 	mls	r1, ip, r0, r1
    c650:	fb00 fe0e 	mul.w	lr, r0, lr
    c654:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c658:	45a6      	cmp	lr, r4
    c65a:	d907      	bls.n	c66c <__udivmoddi4+0x84>
    c65c:	193c      	adds	r4, r7, r4
    c65e:	f100 33ff 	add.w	r3, r0, #4294967295
    c662:	d202      	bcs.n	c66a <__udivmoddi4+0x82>
    c664:	45a6      	cmp	lr, r4
    c666:	f200 811a 	bhi.w	c89e <__udivmoddi4+0x2b6>
    c66a:	4618      	mov	r0, r3
    c66c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c670:	eba4 040e 	sub.w	r4, r4, lr
    c674:	2600      	movs	r6, #0
    c676:	b11d      	cbz	r5, c680 <__udivmoddi4+0x98>
    c678:	40d4      	lsrs	r4, r2
    c67a:	2300      	movs	r3, #0
    c67c:	e9c5 4300 	strd	r4, r3, [r5]
    c680:	4631      	mov	r1, r6
    c682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c686:	b902      	cbnz	r2, c68a <__udivmoddi4+0xa2>
    c688:	deff      	udf	#255	; 0xff
    c68a:	fab2 f282 	clz	r2, r2
    c68e:	2a00      	cmp	r2, #0
    c690:	d152      	bne.n	c738 <__udivmoddi4+0x150>
    c692:	1bcb      	subs	r3, r1, r7
    c694:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c698:	fa1f f887 	uxth.w	r8, r7
    c69c:	2601      	movs	r6, #1
    c69e:	0c21      	lsrs	r1, r4, #16
    c6a0:	fbb3 fcfe 	udiv	ip, r3, lr
    c6a4:	fb0e 301c 	mls	r0, lr, ip, r3
    c6a8:	fb08 f90c 	mul.w	r9, r8, ip
    c6ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c6b0:	4589      	cmp	r9, r1
    c6b2:	d90b      	bls.n	c6cc <__udivmoddi4+0xe4>
    c6b4:	1879      	adds	r1, r7, r1
    c6b6:	f10c 33ff 	add.w	r3, ip, #4294967295
    c6ba:	bf2c      	ite	cs
    c6bc:	2001      	movcs	r0, #1
    c6be:	2000      	movcc	r0, #0
    c6c0:	4589      	cmp	r9, r1
    c6c2:	d902      	bls.n	c6ca <__udivmoddi4+0xe2>
    c6c4:	2800      	cmp	r0, #0
    c6c6:	f000 80f0 	beq.w	c8aa <__udivmoddi4+0x2c2>
    c6ca:	469c      	mov	ip, r3
    c6cc:	eba1 0109 	sub.w	r1, r1, r9
    c6d0:	b2a3      	uxth	r3, r4
    c6d2:	fbb1 f0fe 	udiv	r0, r1, lr
    c6d6:	fb0e 1110 	mls	r1, lr, r0, r1
    c6da:	fb08 f800 	mul.w	r8, r8, r0
    c6de:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c6e2:	45a0      	cmp	r8, r4
    c6e4:	d907      	bls.n	c6f6 <__udivmoddi4+0x10e>
    c6e6:	193c      	adds	r4, r7, r4
    c6e8:	f100 33ff 	add.w	r3, r0, #4294967295
    c6ec:	d202      	bcs.n	c6f4 <__udivmoddi4+0x10c>
    c6ee:	45a0      	cmp	r8, r4
    c6f0:	f200 80d2 	bhi.w	c898 <__udivmoddi4+0x2b0>
    c6f4:	4618      	mov	r0, r3
    c6f6:	eba4 0408 	sub.w	r4, r4, r8
    c6fa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6fe:	e7ba      	b.n	c676 <__udivmoddi4+0x8e>
    c700:	428b      	cmp	r3, r1
    c702:	d909      	bls.n	c718 <__udivmoddi4+0x130>
    c704:	2d00      	cmp	r5, #0
    c706:	f000 80be 	beq.w	c886 <__udivmoddi4+0x29e>
    c70a:	2600      	movs	r6, #0
    c70c:	e9c5 0100 	strd	r0, r1, [r5]
    c710:	4630      	mov	r0, r6
    c712:	4631      	mov	r1, r6
    c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c718:	fab3 f683 	clz	r6, r3
    c71c:	2e00      	cmp	r6, #0
    c71e:	d14d      	bne.n	c7bc <__udivmoddi4+0x1d4>
    c720:	428b      	cmp	r3, r1
    c722:	f0c0 80b3 	bcc.w	c88c <__udivmoddi4+0x2a4>
    c726:	4282      	cmp	r2, r0
    c728:	f240 80b0 	bls.w	c88c <__udivmoddi4+0x2a4>
    c72c:	4630      	mov	r0, r6
    c72e:	2d00      	cmp	r5, #0
    c730:	d0a6      	beq.n	c680 <__udivmoddi4+0x98>
    c732:	e9c5 4800 	strd	r4, r8, [r5]
    c736:	e7a3      	b.n	c680 <__udivmoddi4+0x98>
    c738:	4097      	lsls	r7, r2
    c73a:	f1c2 0320 	rsb	r3, r2, #32
    c73e:	fa01 f002 	lsl.w	r0, r1, r2
    c742:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c746:	40d9      	lsrs	r1, r3
    c748:	fa24 f303 	lsr.w	r3, r4, r3
    c74c:	fa1f f887 	uxth.w	r8, r7
    c750:	4094      	lsls	r4, r2
    c752:	4303      	orrs	r3, r0
    c754:	fbb1 f0fe 	udiv	r0, r1, lr
    c758:	0c1e      	lsrs	r6, r3, #16
    c75a:	fb0e 1110 	mls	r1, lr, r0, r1
    c75e:	fb00 fc08 	mul.w	ip, r0, r8
    c762:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    c766:	458c      	cmp	ip, r1
    c768:	d90e      	bls.n	c788 <__udivmoddi4+0x1a0>
    c76a:	1879      	adds	r1, r7, r1
    c76c:	f100 36ff 	add.w	r6, r0, #4294967295
    c770:	bf2c      	ite	cs
    c772:	f04f 0901 	movcs.w	r9, #1
    c776:	f04f 0900 	movcc.w	r9, #0
    c77a:	458c      	cmp	ip, r1
    c77c:	d903      	bls.n	c786 <__udivmoddi4+0x19e>
    c77e:	f1b9 0f00 	cmp.w	r9, #0
    c782:	f000 8096 	beq.w	c8b2 <__udivmoddi4+0x2ca>
    c786:	4630      	mov	r0, r6
    c788:	eba1 010c 	sub.w	r1, r1, ip
    c78c:	b29b      	uxth	r3, r3
    c78e:	fbb1 f6fe 	udiv	r6, r1, lr
    c792:	fb0e 1116 	mls	r1, lr, r6, r1
    c796:	fb06 fc08 	mul.w	ip, r6, r8
    c79a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    c79e:	458c      	cmp	ip, r1
    c7a0:	d907      	bls.n	c7b2 <__udivmoddi4+0x1ca>
    c7a2:	1879      	adds	r1, r7, r1
    c7a4:	f106 33ff 	add.w	r3, r6, #4294967295
    c7a8:	d202      	bcs.n	c7b0 <__udivmoddi4+0x1c8>
    c7aa:	458c      	cmp	ip, r1
    c7ac:	f200 8088 	bhi.w	c8c0 <__udivmoddi4+0x2d8>
    c7b0:	461e      	mov	r6, r3
    c7b2:	eba1 030c 	sub.w	r3, r1, ip
    c7b6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    c7ba:	e770      	b.n	c69e <__udivmoddi4+0xb6>
    c7bc:	f1c6 0720 	rsb	r7, r6, #32
    c7c0:	fa03 f406 	lsl.w	r4, r3, r6
    c7c4:	fa02 fc06 	lsl.w	ip, r2, r6
    c7c8:	fa01 fe06 	lsl.w	lr, r1, r6
    c7cc:	40fa      	lsrs	r2, r7
    c7ce:	fa20 f807 	lsr.w	r8, r0, r7
    c7d2:	40f9      	lsrs	r1, r7
    c7d4:	fa00 f306 	lsl.w	r3, r0, r6
    c7d8:	4322      	orrs	r2, r4
    c7da:	ea48 040e 	orr.w	r4, r8, lr
    c7de:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c7e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    c7e6:	fa1f f982 	uxth.w	r9, r2
    c7ea:	fbb1 faf8 	udiv	sl, r1, r8
    c7ee:	fb08 111a 	mls	r1, r8, sl, r1
    c7f2:	fb0a f009 	mul.w	r0, sl, r9
    c7f6:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    c7fa:	4570      	cmp	r0, lr
    c7fc:	d90e      	bls.n	c81c <__udivmoddi4+0x234>
    c7fe:	eb12 0e0e 	adds.w	lr, r2, lr
    c802:	f10a 31ff 	add.w	r1, sl, #4294967295
    c806:	bf2c      	ite	cs
    c808:	f04f 0b01 	movcs.w	fp, #1
    c80c:	f04f 0b00 	movcc.w	fp, #0
    c810:	4570      	cmp	r0, lr
    c812:	d902      	bls.n	c81a <__udivmoddi4+0x232>
    c814:	f1bb 0f00 	cmp.w	fp, #0
    c818:	d04e      	beq.n	c8b8 <__udivmoddi4+0x2d0>
    c81a:	468a      	mov	sl, r1
    c81c:	ebae 0e00 	sub.w	lr, lr, r0
    c820:	b2a4      	uxth	r4, r4
    c822:	fbbe f0f8 	udiv	r0, lr, r8
    c826:	fb08 ee10 	mls	lr, r8, r0, lr
    c82a:	fb00 f909 	mul.w	r9, r0, r9
    c82e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    c832:	45f1      	cmp	r9, lr
    c834:	d907      	bls.n	c846 <__udivmoddi4+0x25e>
    c836:	eb12 0e0e 	adds.w	lr, r2, lr
    c83a:	f100 31ff 	add.w	r1, r0, #4294967295
    c83e:	d201      	bcs.n	c844 <__udivmoddi4+0x25c>
    c840:	45f1      	cmp	r9, lr
    c842:	d840      	bhi.n	c8c6 <__udivmoddi4+0x2de>
    c844:	4608      	mov	r0, r1
    c846:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c84a:	ebae 0e09 	sub.w	lr, lr, r9
    c84e:	fba0 890c 	umull	r8, r9, r0, ip
    c852:	45ce      	cmp	lr, r9
    c854:	4641      	mov	r1, r8
    c856:	464c      	mov	r4, r9
    c858:	d302      	bcc.n	c860 <__udivmoddi4+0x278>
    c85a:	d106      	bne.n	c86a <__udivmoddi4+0x282>
    c85c:	4543      	cmp	r3, r8
    c85e:	d204      	bcs.n	c86a <__udivmoddi4+0x282>
    c860:	3801      	subs	r0, #1
    c862:	ebb8 010c 	subs.w	r1, r8, ip
    c866:	eb69 0402 	sbc.w	r4, r9, r2
    c86a:	b37d      	cbz	r5, c8cc <__udivmoddi4+0x2e4>
    c86c:	1a5a      	subs	r2, r3, r1
    c86e:	eb6e 0e04 	sbc.w	lr, lr, r4
    c872:	40f2      	lsrs	r2, r6
    c874:	fa0e f707 	lsl.w	r7, lr, r7
    c878:	fa2e f306 	lsr.w	r3, lr, r6
    c87c:	2600      	movs	r6, #0
    c87e:	4317      	orrs	r7, r2
    c880:	e9c5 7300 	strd	r7, r3, [r5]
    c884:	e6fc      	b.n	c680 <__udivmoddi4+0x98>
    c886:	462e      	mov	r6, r5
    c888:	4628      	mov	r0, r5
    c88a:	e6f9      	b.n	c680 <__udivmoddi4+0x98>
    c88c:	1a84      	subs	r4, r0, r2
    c88e:	eb61 0103 	sbc.w	r1, r1, r3
    c892:	2001      	movs	r0, #1
    c894:	4688      	mov	r8, r1
    c896:	e74a      	b.n	c72e <__udivmoddi4+0x146>
    c898:	3802      	subs	r0, #2
    c89a:	443c      	add	r4, r7
    c89c:	e72b      	b.n	c6f6 <__udivmoddi4+0x10e>
    c89e:	3802      	subs	r0, #2
    c8a0:	443c      	add	r4, r7
    c8a2:	e6e3      	b.n	c66c <__udivmoddi4+0x84>
    c8a4:	3e02      	subs	r6, #2
    c8a6:	443b      	add	r3, r7
    c8a8:	e6cc      	b.n	c644 <__udivmoddi4+0x5c>
    c8aa:	f1ac 0c02 	sub.w	ip, ip, #2
    c8ae:	4439      	add	r1, r7
    c8b0:	e70c      	b.n	c6cc <__udivmoddi4+0xe4>
    c8b2:	3802      	subs	r0, #2
    c8b4:	4439      	add	r1, r7
    c8b6:	e767      	b.n	c788 <__udivmoddi4+0x1a0>
    c8b8:	f1aa 0a02 	sub.w	sl, sl, #2
    c8bc:	4496      	add	lr, r2
    c8be:	e7ad      	b.n	c81c <__udivmoddi4+0x234>
    c8c0:	3e02      	subs	r6, #2
    c8c2:	4439      	add	r1, r7
    c8c4:	e775      	b.n	c7b2 <__udivmoddi4+0x1ca>
    c8c6:	3802      	subs	r0, #2
    c8c8:	4496      	add	lr, r2
    c8ca:	e7bc      	b.n	c846 <__udivmoddi4+0x25e>
    c8cc:	462e      	mov	r6, r5
    c8ce:	e6d7      	b.n	c680 <__udivmoddi4+0x98>

0000c8d0 <__aeabi_idiv0>:
    c8d0:	4770      	bx	lr
    c8d2:	bf00      	nop
    c8d4:	0000      	movs	r0, r0
	...

0000c8d8 <net_if_ipv6_addr_update_lifetime>:
{
	NET_DBG("Updating expire time of %s by %u secs",
		log_strdup(net_sprint_ipv6_addr(&ifaddr->address.in6_addr)),
		vlifetime);

	ifaddr->addr_state = NET_ADDR_PREFERRED;
    c8d8:	2301      	movs	r3, #1
{
    c8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ifaddr->addr_state = NET_ADDR_PREFERRED;
    c8de:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)vlifetime;
    c8e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
    c8e6:	4604      	mov	r4, r0
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)vlifetime;
    c8e8:	fba1 6703 	umull	r6, r7, r1, r3
	sys_slist_append(&active_address_lifetime_timers,
    c8ec:	f100 0114 	add.w	r1, r0, #20
    c8f0:	4821      	ldr	r0, [pc, #132]	; (c978 <net_if_ipv6_addr_update_lifetime+0xa0>)
    c8f2:	f010 fb84 	bl	1cffe <sys_slist_append>
	ifaddr->lifetime.timer_start = k_uptime_get_32();
    c8f6:	f010 fbf2 	bl	1d0de <k_uptime_get_32>
	ifaddr->lifetime.wrap_counter = expire_timeout /
    c8fa:	2300      	movs	r3, #0
    c8fc:	4a1f      	ldr	r2, [pc, #124]	; (c97c <net_if_ipv6_addr_update_lifetime+0xa4>)
	ifaddr->lifetime.timer_start = k_uptime_get_32();
    c8fe:	61a0      	str	r0, [r4, #24]
	ifaddr->lifetime.wrap_counter = expire_timeout /
    c900:	4639      	mov	r1, r7
    c902:	4630      	mov	r0, r6
    c904:	f7ff fe58 	bl	c5b8 <__aeabi_uldivmod>
	ifaddr->lifetime.timer_timeout = expire_timeout -
    c908:	491c      	ldr	r1, [pc, #112]	; (c97c <net_if_ipv6_addr_update_lifetime+0xa4>)
	ifaddr->lifetime.wrap_counter = expire_timeout /
    c90a:	6220      	str	r0, [r4, #32]
	ifaddr->lifetime.timer_timeout = expire_timeout -
    c90c:	fb01 6010 	mls	r0, r1, r0, r6
    c910:	61e0      	str	r0, [r4, #28]
	remaining = k_delayed_work_remaining_get(&address_lifetime_timer);
    c912:	481b      	ldr	r0, [pc, #108]	; (c980 <net_if_ipv6_addr_update_lifetime+0xa8>)
    c914:	f010 fbf3 	bl	1d0fe <k_delayed_work_remaining_get>
	if (!remaining || (ifaddr->lifetime.wrap_counter == 0 &&
    c918:	4605      	mov	r5, r0
    c91a:	b120      	cbz	r0, c926 <net_if_ipv6_addr_update_lifetime+0x4e>
    c91c:	6a23      	ldr	r3, [r4, #32]
    c91e:	bb2b      	cbnz	r3, c96c <net_if_ipv6_addr_update_lifetime+0x94>
    c920:	69e3      	ldr	r3, [r4, #28]
    c922:	4298      	cmp	r0, r3
    c924:	dd22      	ble.n	c96c <net_if_ipv6_addr_update_lifetime+0x94>
		k_delayed_work_cancel(&address_lifetime_timer);
    c926:	4816      	ldr	r0, [pc, #88]	; (c980 <net_if_ipv6_addr_update_lifetime+0xa8>)
    c928:	f013 fed0 	bl	206cc <k_delayed_work_cancel>
		if (ifaddr->lifetime.wrap_counter > 0 && remaining == 0) {
    c92c:	6a23      	ldr	r3, [r4, #32]
    c92e:	2b00      	cmp	r3, #0
    c930:	dd08      	ble.n	c944 <net_if_ipv6_addr_update_lifetime+0x6c>
    c932:	b93d      	cbnz	r5, c944 <net_if_ipv6_addr_update_lifetime+0x6c>
			k_delayed_work_submit(&address_lifetime_timer,
    c934:	a30e      	add	r3, pc, #56	; (adr r3, c970 <net_if_ipv6_addr_update_lifetime+0x98>)
    c936:	e9d3 2300 	ldrd	r2, r3, [r3]

	address_start_timer(ifaddr, vlifetime);
}
    c93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_delayed_work_submit(&address_lifetime_timer,
    c93e:	4810      	ldr	r0, [pc, #64]	; (c980 <net_if_ipv6_addr_update_lifetime+0xa8>)
    c940:	f002 beb4 	b.w	f6ac <k_delayed_work_submit>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    c944:	f44f 4000 	mov.w	r0, #32768	; 0x8000
				       K_MSEC(ifaddr->lifetime.timer_timeout));
    c948:	69e1      	ldr	r1, [r4, #28]
    c94a:	2500      	movs	r5, #0
    c94c:	f240 34e7 	movw	r4, #999	; 0x3e7
    c950:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    c954:	fbc0 4501 	smlal	r4, r5, r0, r1
    c958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c95c:	2300      	movs	r3, #0
    c95e:	4620      	mov	r0, r4
    c960:	4629      	mov	r1, r5
    c962:	f7ff fe29 	bl	c5b8 <__aeabi_uldivmod>
			k_delayed_work_submit(&address_lifetime_timer,
    c966:	2300      	movs	r3, #0
    c968:	4602      	mov	r2, r0
    c96a:	e7e6      	b.n	c93a <net_if_ipv6_addr_update_lifetime+0x62>
}
    c96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c970:	624dc605 	.word	0x624dc605
    c974:	00000000 	.word	0x00000000
    c978:	20020918 	.word	0x20020918
    c97c:	7fffff9b 	.word	0x7fffff9b
    c980:	20020940 	.word	0x20020940
    c984:	00000000 	.word	0x00000000

0000c988 <net_if_ipv6_prefix_set_timer>:

void net_if_ipv6_prefix_set_timer(struct net_if_ipv6_prefix *prefix,
				  u32_t lifetime)
{
	/* No need to set a timer for infinite timeout */
	if (lifetime == 0xffffffff) {
    c988:	1c4b      	adds	r3, r1, #1
{
    c98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c98e:	4604      	mov	r4, r0
	if (lifetime == 0xffffffff) {
    c990:	d042      	beq.n	ca18 <net_if_ipv6_prefix_set_timer+0x90>
	u64_t expire_timeout = (u64_t)MSEC_PER_SEC * (u64_t)lifetime;
    c992:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    c996:	fba1 6706 	umull	r6, r7, r1, r6
	sys_slist_append(&active_prefix_lifetime_timers,
    c99a:	4601      	mov	r1, r0
    c99c:	4822      	ldr	r0, [pc, #136]	; (ca28 <net_if_ipv6_prefix_set_timer+0xa0>)
    c99e:	f010 fb2e 	bl	1cffe <sys_slist_append>
	ifprefix->lifetime.timer_start = k_uptime_get_32();
    c9a2:	f010 fb9c 	bl	1d0de <k_uptime_get_32>
	ifprefix->lifetime.wrap_counter = expire_timeout /
    c9a6:	2300      	movs	r3, #0
    c9a8:	4a20      	ldr	r2, [pc, #128]	; (ca2c <net_if_ipv6_prefix_set_timer+0xa4>)
	ifprefix->lifetime.timer_start = k_uptime_get_32();
    c9aa:	6060      	str	r0, [r4, #4]
	ifprefix->lifetime.wrap_counter = expire_timeout /
    c9ac:	4639      	mov	r1, r7
    c9ae:	4630      	mov	r0, r6
    c9b0:	f7ff fe02 	bl	c5b8 <__aeabi_uldivmod>
	ifprefix->lifetime.timer_timeout = expire_timeout -
    c9b4:	491d      	ldr	r1, [pc, #116]	; (ca2c <net_if_ipv6_prefix_set_timer+0xa4>)
	ifprefix->lifetime.wrap_counter = expire_timeout /
    c9b6:	60e0      	str	r0, [r4, #12]
	ifprefix->lifetime.timer_timeout = expire_timeout -
    c9b8:	fb01 6010 	mls	r0, r1, r0, r6
    c9bc:	60a0      	str	r0, [r4, #8]
	remaining = k_delayed_work_remaining_get(&prefix_lifetime_timer);
    c9be:	481c      	ldr	r0, [pc, #112]	; (ca30 <net_if_ipv6_prefix_set_timer+0xa8>)
    c9c0:	f010 fb9d 	bl	1d0fe <k_delayed_work_remaining_get>
	if (!remaining || (ifprefix->lifetime.wrap_counter == 0 &&
    c9c4:	4605      	mov	r5, r0
    c9c6:	b120      	cbz	r0, c9d2 <net_if_ipv6_prefix_set_timer+0x4a>
    c9c8:	68e3      	ldr	r3, [r4, #12]
    c9ca:	bb2b      	cbnz	r3, ca18 <net_if_ipv6_prefix_set_timer+0x90>
    c9cc:	68a3      	ldr	r3, [r4, #8]
    c9ce:	4298      	cmp	r0, r3
    c9d0:	dd22      	ble.n	ca18 <net_if_ipv6_prefix_set_timer+0x90>
		k_delayed_work_cancel(&prefix_lifetime_timer);
    c9d2:	4817      	ldr	r0, [pc, #92]	; (ca30 <net_if_ipv6_prefix_set_timer+0xa8>)
    c9d4:	f013 fe7a 	bl	206cc <k_delayed_work_cancel>
		if (ifprefix->lifetime.wrap_counter > 0 && remaining == 0) {
    c9d8:	68e3      	ldr	r3, [r4, #12]
    c9da:	2b00      	cmp	r3, #0
    c9dc:	dd08      	ble.n	c9f0 <net_if_ipv6_prefix_set_timer+0x68>
    c9de:	b93d      	cbnz	r5, c9f0 <net_if_ipv6_prefix_set_timer+0x68>
			k_delayed_work_submit(&prefix_lifetime_timer,
    c9e0:	a30f      	add	r3, pc, #60	; (adr r3, ca20 <net_if_ipv6_prefix_set_timer+0x98>)
    c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

	NET_DBG("Prefix lifetime %u sec", lifetime);

	prefix_start_timer(prefix, lifetime);
}
    c9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_delayed_work_submit(&prefix_lifetime_timer,
    c9ea:	4811      	ldr	r0, [pc, #68]	; (ca30 <net_if_ipv6_prefix_set_timer+0xa8>)
    c9ec:	f002 be5e 	b.w	f6ac <k_delayed_work_submit>
    c9f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
				     K_MSEC(ifprefix->lifetime.timer_timeout));
    c9f4:	68a1      	ldr	r1, [r4, #8]
    c9f6:	2500      	movs	r5, #0
    c9f8:	f240 34e7 	movw	r4, #999	; 0x3e7
    c9fc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    ca00:	fbc0 4501 	smlal	r4, r5, r0, r1
    ca04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ca08:	2300      	movs	r3, #0
    ca0a:	4620      	mov	r0, r4
    ca0c:	4629      	mov	r1, r5
    ca0e:	f7ff fdd3 	bl	c5b8 <__aeabi_uldivmod>
			k_delayed_work_submit(&prefix_lifetime_timer,
    ca12:	2300      	movs	r3, #0
    ca14:	4602      	mov	r2, r0
    ca16:	e7e6      	b.n	c9e6 <net_if_ipv6_prefix_set_timer+0x5e>
}
    ca18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca1c:	f3af 8000 	nop.w
    ca20:	624dc605 	.word	0x624dc605
    ca24:	00000000 	.word	0x00000000
    ca28:	20020928 	.word	0x20020928
    ca2c:	7fffff9b 	.word	0x7fffff9b
    ca30:	20020aa4 	.word	0x20020aa4

0000ca34 <main>:

	return ret;
}

int main(void)
{
    ca34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;

	printk("nrf91 saadc sampling AIN0 (P0.13)\n");
    ca38:	4834      	ldr	r0, [pc, #208]	; (cb0c <main+0xd8>)
{
    ca3a:	b087      	sub	sp, #28
	printk("nrf91 saadc sampling AIN0 (P0.13)\n");
    ca3c:	f00f f9b1 	bl	1bda2 <printk>
	printk("Example requires secure_boot to have ");
    ca40:	4833      	ldr	r0, [pc, #204]	; (cb10 <main+0xdc>)
    ca42:	f00f f9ae 	bl	1bda2 <printk>
	printk("SAADC set to non-secure!\n");
    ca46:	4833      	ldr	r0, [pc, #204]	; (cb14 <main+0xe0>)
    ca48:	f00f f9ab 	bl	1bda2 <printk>
	printk("If not; BusFault/UsageFault will be triggered\n");
    ca4c:	4832      	ldr	r0, [pc, #200]	; (cb18 <main+0xe4>)
    ca4e:	f00f f9a8 	bl	1bda2 <printk>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    ca52:	4832      	ldr	r0, [pc, #200]	; (cb1c <main+0xe8>)
    ca54:	f00d ffc4 	bl	1a9e0 <z_impl_device_get_binding>

	adc_dev = device_get_binding("ADC_0");
    ca58:	4d31      	ldr	r5, [pc, #196]	; (cb20 <main+0xec>)
    ca5a:	6028      	str	r0, [r5, #0]
	if (!adc_dev) {
    ca5c:	b910      	cbnz	r0, ca64 <main+0x30>
		printk("device_get_binding ADC_0 failed\n");
    ca5e:	4831      	ldr	r0, [pc, #196]	; (cb24 <main+0xf0>)
    ca60:	f00f f99f 	bl	1bda2 <printk>
	}
	err = adc_channel_setup(adc_dev, &m_1st_channel_cfg);
    ca64:	6828      	ldr	r0, [r5, #0]
				const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->driver_api;

	return api->channel_setup(dev, channel_cfg);
    ca66:	6883      	ldr	r3, [r0, #8]
    ca68:	492f      	ldr	r1, [pc, #188]	; (cb28 <main+0xf4>)
    ca6a:	681b      	ldr	r3, [r3, #0]
    ca6c:	4798      	blx	r3
	if (err) {
    ca6e:	4601      	mov	r1, r0
    ca70:	b110      	cbz	r0, ca78 <main+0x44>
		printk("Error in adc setup: %d\n", err);
    ca72:	482e      	ldr	r0, [pc, #184]	; (cb2c <main+0xf8>)
    ca74:	f00f f995 	bl	1bda2 <printk>

	/* Trigger offset calibration
	 * As this generates a _DONE and _RESULT event
	 * the first result will be incorrect.
	 */
	NRF_SAADC_NS->TASKS_CALIBRATEOFFSET = 1;
    ca78:	2201      	movs	r2, #1
    ca7a:	4b2d      	ldr	r3, [pc, #180]	; (cb30 <main+0xfc>)
	const struct adc_sequence sequence = {
    ca7c:	4f2d      	ldr	r7, [pc, #180]	; (cb34 <main+0x100>)
	while (1) {
		err = adc_sample();
		if (err) {
			printk("Error in adc sampling: %d\n", err);
    ca7e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; cb48 <main+0x114>
	printk("ADC read err: %d\n", ret);
    ca82:	f8df 90c8 	ldr.w	r9, [pc, #200]	; cb4c <main+0x118>
	NRF_SAADC_NS->TASKS_CALIBRATEOFFSET = 1;
    ca86:	60da      	str	r2, [r3, #12]
	const struct adc_sequence sequence = {
    ca88:	2214      	movs	r2, #20
    ca8a:	2100      	movs	r1, #0
    ca8c:	a801      	add	r0, sp, #4
    ca8e:	f010 f90d 	bl	1ccac <memset>
    ca92:	2301      	movs	r3, #1
    ca94:	e9cd 3702 	strd	r3, r7, [sp, #8]
    ca98:	2302      	movs	r3, #2
    ca9a:	9304      	str	r3, [sp, #16]
    ca9c:	230a      	movs	r3, #10
	if (!adc_dev) {
    ca9e:	6828      	ldr	r0, [r5, #0]
	const struct adc_sequence sequence = {
    caa0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (!adc_dev) {
    caa4:	b930      	cbnz	r0, cab4 <main+0x80>
		return -1;
    caa6:	f04f 34ff 	mov.w	r4, #4294967295
			printk("Error in adc sampling: %d\n", err);
    caaa:	4621      	mov	r1, r4
    caac:	4640      	mov	r0, r8
    caae:	f00f f978 	bl	1bda2 <printk>
    cab2:	e025      	b.n	cb00 <main+0xcc>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->driver_api;

	return api->read(dev, sequence);
    cab4:	6883      	ldr	r3, [r0, #8]
    cab6:	a901      	add	r1, sp, #4
    cab8:	685b      	ldr	r3, [r3, #4]
    caba:	4798      	blx	r3
	printk("ADC read err: %d\n", ret);
    cabc:	4601      	mov	r1, r0
    cabe:	4604      	mov	r4, r0
    cac0:	4648      	mov	r0, r9
    cac2:	f00f f96e 	bl	1bda2 <printk>
		adc_voltage = (float)(((float)m_sample_buffer[i] / 1023.0f) *
    cac6:	f9b7 6000 	ldrsh.w	r6, [r7]
		printk("ADC raw value: %d\n", m_sample_buffer[i]);
    caca:	481b      	ldr	r0, [pc, #108]	; (cb38 <main+0x104>)
    cacc:	4631      	mov	r1, r6
    cace:	f00f f968 	bl	1bda2 <printk>
		adc_voltage = (float)(((float)m_sample_buffer[i] / 1023.0f) *
    cad2:	ee07 6a90 	vmov	s15, r6
    cad6:	eddf 6a19 	vldr	s13, [pc, #100]	; cb3c <main+0x108>
    cada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    cade:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		printf("Measured voltage: %f mV\n", adc_voltage);
    cae2:	eddf 7a17 	vldr	s15, [pc, #92]	; cb40 <main+0x10c>
    cae6:	ee67 7a27 	vmul.f32	s15, s14, s15
    caea:	ee17 0a90 	vmov	r0, s15
    caee:	f7ff fd0b 	bl	c508 <__aeabi_f2d>
    caf2:	4602      	mov	r2, r0
    caf4:	460b      	mov	r3, r1
    caf6:	4813      	ldr	r0, [pc, #76]	; (cb44 <main+0x110>)
    caf8:	f002 fcde 	bl	f4b8 <printf>
		if (err) {
    cafc:	2c00      	cmp	r4, #0
    cafe:	d1d4      	bne.n	caaa <main+0x76>
		parm0.val = timeout;
		return (s32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    cb00:	2100      	movs	r1, #0
    cb02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    cb06:	f00e fd9b 	bl	1b640 <z_impl_k_sleep>
	while (1) {
    cb0a:	e7bd      	b.n	ca88 <main+0x54>
    cb0c:	00021114 	.word	0x00021114
    cb10:	00021137 	.word	0x00021137
    cb14:	0002115d 	.word	0x0002115d
    cb18:	00021177 	.word	0x00021177
    cb1c:	000211a6 	.word	0x000211a6
    cb20:	20020798 	.word	0x20020798
    cb24:	000211ac 	.word	0x000211ac
    cb28:	0002110c 	.word	0x0002110c
    cb2c:	000211cd 	.word	0x000211cd
    cb30:	4000e000 	.word	0x4000e000
    cb34:	20021c3c 	.word	0x20021c3c
    cb38:	000211f7 	.word	0x000211f7
    cb3c:	447fc000 	.word	0x447fc000
    cb40:	45610000 	.word	0x45610000
    cb44:	0002120a 	.word	0x0002120a
    cb48:	00021223 	.word	0x00021223
    cb4c:	000211e5 	.word	0x000211e5

0000cb50 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    cb50:	2803      	cmp	r0, #3
{
    cb52:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    cb54:	d906      	bls.n	cb64 <_check_fd+0x14>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    cb56:	f00d ff67 	bl	1aa28 <z_impl_z_errno>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
    cb5a:	2309      	movs	r3, #9
    cb5c:	6003      	str	r3, [r0, #0]
    cb5e:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    cb62:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
    cb64:	4b03      	ldr	r3, [pc, #12]	; (cb74 <_check_fd+0x24>)
    cb66:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    cb6a:	2b00      	cmp	r3, #0
    cb6c:	d0f3      	beq.n	cb56 <_check_fd+0x6>
	return 0;
    cb6e:	2000      	movs	r0, #0
    cb70:	e7f7      	b.n	cb62 <_check_fd+0x12>
    cb72:	bf00      	nop
    cb74:	2002079c 	.word	0x2002079c

0000cb78 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
    cb78:	b570      	push	{r4, r5, r6, lr}
    cb7a:	4604      	mov	r4, r0
    cb7c:	460d      	mov	r5, r1
    cb7e:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    cb80:	f7ff ffe6 	bl	cb50 <_check_fd>
    cb84:	2800      	cmp	r0, #0
    cb86:	db09      	blt.n	cb9c <z_get_fd_obj+0x24>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
    cb88:	4b07      	ldr	r3, [pc, #28]	; (cba8 <z_get_fd_obj+0x30>)
    cb8a:	b14d      	cbz	r5, cba0 <z_get_fd_obj+0x28>
    cb8c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    cb90:	6852      	ldr	r2, [r2, #4]
    cb92:	42aa      	cmp	r2, r5
    cb94:	d004      	beq.n	cba0 <z_get_fd_obj+0x28>
    cb96:	f00d ff47 	bl	1aa28 <z_impl_z_errno>
		errno = err;
    cb9a:	6006      	str	r6, [r0, #0]
		return NULL;
    cb9c:	2000      	movs	r0, #0
    cb9e:	e001      	b.n	cba4 <z_get_fd_obj+0x2c>
		return NULL;
	}

	return fd_entry->obj;
    cba0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
    cba4:	bd70      	pop	{r4, r5, r6, pc}
    cba6:	bf00      	nop
    cba8:	2002079c 	.word	0x2002079c

0000cbac <z_reserve_fd>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
    cbac:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    cbae:	2400      	movs	r4, #0
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    cbb0:	f04f 33ff 	mov.w	r3, #4294967295
    cbb4:	f04f 32ff 	mov.w	r2, #4294967295
    cbb8:	480c      	ldr	r0, [pc, #48]	; (cbec <z_reserve_fd+0x40>)
    cbba:	f00e f933 	bl	1ae24 <z_impl_k_mutex_lock>
		if (fdtable[fd].obj == NULL) {
    cbbe:	4b0c      	ldr	r3, [pc, #48]	; (cbf0 <z_reserve_fd+0x44>)
    cbc0:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    cbc4:	b16a      	cbz	r2, cbe2 <z_reserve_fd+0x36>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    cbc6:	3401      	adds	r4, #1
    cbc8:	2c04      	cmp	r4, #4
    cbca:	d1f9      	bne.n	cbc0 <z_reserve_fd+0x14>
    cbcc:	f00d ff2c 	bl	1aa28 <z_impl_z_errno>
	errno = ENFILE;
    cbd0:	2317      	movs	r3, #23
	return -1;
    cbd2:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    cbd6:	6003      	str	r3, [r0, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    cbd8:	4804      	ldr	r0, [pc, #16]	; (cbec <z_reserve_fd+0x40>)
    cbda:	f00e f99b 	bl	1af14 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    cbde:	4620      	mov	r0, r4
    cbe0:	bd10      	pop	{r4, pc}
		fdtable[fd].obj = FD_OBJ_RESERVED;
    cbe2:	2201      	movs	r2, #1
    cbe4:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    cbe8:	e7f6      	b.n	cbd8 <z_reserve_fd+0x2c>
    cbea:	bf00      	nop
    cbec:	20020698 	.word	0x20020698
    cbf0:	2002079c 	.word	0x2002079c

0000cbf4 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
    cbf4:	4b03      	ldr	r3, [pc, #12]	; (cc04 <z_finalize_fd+0x10>)
    cbf6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
    cbfa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    cbfe:	6042      	str	r2, [r0, #4]
}
    cc00:	4770      	bx	lr
    cc02:	bf00      	nop
    cc04:	2002079c 	.word	0x2002079c

0000cc08 <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
    cc08:	2200      	movs	r2, #0
    cc0a:	4b02      	ldr	r3, [pc, #8]	; (cc14 <z_free_fd+0xc>)
    cc0c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
    cc10:	4770      	bx	lr
    cc12:	bf00      	nop
    cc14:	2002079c 	.word	0x2002079c

0000cc18 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    cc18:	680b      	ldr	r3, [r1, #0]
    cc1a:	3301      	adds	r3, #1
    cc1c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    cc1e:	4b01      	ldr	r3, [pc, #4]	; (cc24 <char_out+0xc>)
    cc20:	681b      	ldr	r3, [r3, #0]
    cc22:	4718      	bx	r3
    cc24:	200200a0 	.word	0x200200a0

0000cc28 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc2c:	ed2d 8b02 	vpush	{d8}
    cc30:	b083      	sub	sp, #12
    cc32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    cc34:	469a      	mov	sl, r3
    cc36:	2c01      	cmp	r4, #1
    cc38:	bfb8      	it	lt
    cc3a:	2401      	movlt	r4, #1
    cc3c:	2b01      	cmp	r3, #1
    cc3e:	bf0c      	ite	eq
    cc40:	2330      	moveq	r3, #48	; 0x30
    cc42:	2320      	movne	r3, #32
    cc44:	4615      	mov	r5, r2
    cc46:	4606      	mov	r6, r0
    cc48:	ee08 3a10 	vmov	s16, r3
    cc4c:	2701      	movs	r7, #1
    cc4e:	f04f 080a 	mov.w	r8, #10
    cc52:	2200      	movs	r2, #0
    cc54:	f8df b074 	ldr.w	fp, [pc, #116]	; cccc <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    cc58:	fbb5 f9fb 	udiv	r9, r5, fp
    cc5c:	b90a      	cbnz	r2, cc62 <_printk_dec_ulong+0x3a>
    cc5e:	45ab      	cmp	fp, r5
    cc60:	d820      	bhi.n	cca4 <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    cc62:	f109 0030 	add.w	r0, r9, #48	; 0x30
    cc66:	9100      	str	r1, [sp, #0]
    cc68:	47b0      	blx	r6
			found_largest_digit = 1;
    cc6a:	2201      	movs	r2, #1
			digits++;
    cc6c:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
    cc6e:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
    cc70:	230a      	movs	r3, #10
		remaining--;
    cc72:	f108 38ff 	add.w	r8, r8, #4294967295
	while (pos >= 10) {
    cc76:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    cc7a:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
    cc7e:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
    cc82:	d1e9      	bne.n	cc58 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
    cc84:	f105 0030 	add.w	r0, r5, #48	; 0x30
    cc88:	9100      	str	r1, [sp, #0]
    cc8a:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    cc8c:	f1ba 0f03 	cmp.w	sl, #3
    cc90:	9900      	ldr	r1, [sp, #0]
    cc92:	d102      	bne.n	cc9a <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
    cc94:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    cc96:	2c00      	cmp	r4, #0
    cc98:	dc11      	bgt.n	ccbe <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
    cc9a:	b003      	add	sp, #12
    cc9c:	ecbd 8b02 	vpop	{d8}
    cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    cca4:	4544      	cmp	r4, r8
    cca6:	dbe3      	blt.n	cc70 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
    cca8:	f1ba 0f02 	cmp.w	sl, #2
    ccac:	d8e0      	bhi.n	cc70 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    ccae:	ee18 0a10 	vmov	r0, s16
    ccb2:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
    ccb6:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    ccb8:	47b0      	blx	r6
			digits++;
    ccba:	9a01      	ldr	r2, [sp, #4]
    ccbc:	e7d7      	b.n	cc6e <_printk_dec_ulong+0x46>
			out(' ', ctx);
    ccbe:	2020      	movs	r0, #32
    ccc0:	9100      	str	r1, [sp, #0]
    ccc2:	3c01      	subs	r4, #1
    ccc4:	47b0      	blx	r6
    ccc6:	9900      	ldr	r1, [sp, #0]
    ccc8:	e7e5      	b.n	cc96 <_printk_dec_ulong+0x6e>
    ccca:	bf00      	nop
    cccc:	3b9aca00 	.word	0x3b9aca00

0000ccd0 <__printk_hook_install>:
	_char_out = fn;
    ccd0:	4b01      	ldr	r3, [pc, #4]	; (ccd8 <__printk_hook_install+0x8>)
    ccd2:	6018      	str	r0, [r3, #0]
}
    ccd4:	4770      	bx	lr
    ccd6:	bf00      	nop
    ccd8:	200200a0 	.word	0x200200a0

0000ccdc <z_vprintk>:
{
    ccdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    cce0:	2700      	movs	r7, #0
{
    cce2:	4605      	mov	r5, r0
    cce4:	468b      	mov	fp, r1
	int min_width = -1;
    cce6:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    ccea:	46b8      	mov	r8, r7
{
    ccec:	461c      	mov	r4, r3
    ccee:	b08d      	sub	sp, #52	; 0x34
    ccf0:	1e53      	subs	r3, r2, #1
    ccf2:	9303      	str	r3, [sp, #12]
			might_format = 0;
    ccf4:	2600      	movs	r6, #0
					break;
    ccf6:	e005      	b.n	cd04 <z_vprintk+0x28>
		if (!might_format) {
    ccf8:	b96e      	cbnz	r6, cd16 <z_vprintk+0x3a>
			if (*fmt != '%') {
    ccfa:	2825      	cmp	r0, #37	; 0x25
    ccfc:	f000 8171 	beq.w	cfe2 <z_vprintk+0x306>
				out((int)*fmt, ctx);
    cd00:	4659      	mov	r1, fp
    cd02:	47a8      	blx	r5
	while (*fmt) {
    cd04:	9b03      	ldr	r3, [sp, #12]
    cd06:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    cd0a:	9303      	str	r3, [sp, #12]
    cd0c:	2800      	cmp	r0, #0
    cd0e:	d1f3      	bne.n	ccf8 <z_vprintk+0x1c>
}
    cd10:	b00d      	add	sp, #52	; 0x34
    cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    cd16:	287a      	cmp	r0, #122	; 0x7a
    cd18:	d80a      	bhi.n	cd30 <z_vprintk+0x54>
    cd1a:	2862      	cmp	r0, #98	; 0x62
    cd1c:	d810      	bhi.n	cd40 <z_vprintk+0x64>
    cd1e:	2830      	cmp	r0, #48	; 0x30
    cd20:	d054      	beq.n	cdcc <z_vprintk+0xf0>
    cd22:	d845      	bhi.n	cdb0 <z_vprintk+0xd4>
    cd24:	2825      	cmp	r0, #37	; 0x25
    cd26:	f000 815a 	beq.w	cfde <z_vprintk+0x302>
    cd2a:	282d      	cmp	r0, #45	; 0x2d
    cd2c:	f000 815f 	beq.w	cfee <z_vprintk+0x312>
					out((int)'%', ctx);
    cd30:	4659      	mov	r1, fp
    cd32:	2025      	movs	r0, #37	; 0x25
    cd34:	47a8      	blx	r5
					out((int)*fmt, ctx);
    cd36:	4659      	mov	r1, fp
    cd38:	9b03      	ldr	r3, [sp, #12]
    cd3a:	7818      	ldrb	r0, [r3, #0]
    cd3c:	47a8      	blx	r5
    cd3e:	e7d9      	b.n	ccf4 <z_vprintk+0x18>
    cd40:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    cd44:	2b17      	cmp	r3, #23
    cd46:	d8f3      	bhi.n	cd30 <z_vprintk+0x54>
    cd48:	a201      	add	r2, pc, #4	; (adr r2, cd50 <z_vprintk+0x74>)
    cd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd4e:	bf00      	nop
    cd50:	0000cfd7 	.word	0x0000cfd7
    cd54:	0000ce1b 	.word	0x0000ce1b
    cd58:	0000cd31 	.word	0x0000cd31
    cd5c:	0000cd31 	.word	0x0000cd31
    cd60:	0000cd31 	.word	0x0000cd31
    cd64:	0000cdfd 	.word	0x0000cdfd
    cd68:	0000ce1b 	.word	0x0000ce1b
    cd6c:	0000cd31 	.word	0x0000cd31
    cd70:	0000cd31 	.word	0x0000cd31
    cd74:	0000cdfd 	.word	0x0000cdfd
    cd78:	0000cd31 	.word	0x0000cd31
    cd7c:	0000cd31 	.word	0x0000cd31
    cd80:	0000cd31 	.word	0x0000cd31
    cd84:	0000cebd 	.word	0x0000cebd
    cd88:	0000cd31 	.word	0x0000cd31
    cd8c:	0000cd31 	.word	0x0000cd31
    cd90:	0000cfa7 	.word	0x0000cfa7
    cd94:	0000cd31 	.word	0x0000cd31
    cd98:	0000ce8b 	.word	0x0000ce8b
    cd9c:	0000cd31 	.word	0x0000cd31
    cda0:	0000cd31 	.word	0x0000cd31
    cda4:	0000cdb9 	.word	0x0000cdb9
    cda8:	0000cd31 	.word	0x0000cd31
    cdac:	0000cdfd 	.word	0x0000cdfd
			switch (*fmt) {
    cdb0:	2839      	cmp	r0, #57	; 0x39
    cdb2:	d91a      	bls.n	cdea <z_vprintk+0x10e>
    cdb4:	2858      	cmp	r0, #88	; 0x58
    cdb6:	d1bb      	bne.n	cd30 <z_vprintk+0x54>
				if (*fmt == 'p') {
    cdb8:	9b03      	ldr	r3, [sp, #12]
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	2b70      	cmp	r3, #112	; 0x70
    cdbe:	f040 8088 	bne.w	ced2 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    cdc2:	f854 3b04 	ldr.w	r3, [r4], #4
    cdc6:	2200      	movs	r2, #0
    cdc8:	9306      	str	r3, [sp, #24]
    cdca:	e090      	b.n	ceee <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    cdcc:	f1b9 0f00 	cmp.w	r9, #0
    cdd0:	da0e      	bge.n	cdf0 <z_vprintk+0x114>
    cdd2:	f1b8 0f00 	cmp.w	r8, #0
    cdd6:	f000 810d 	beq.w	cff4 <z_vprintk+0x318>
					min_width = *fmt - '0';
    cdda:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    cdde:	f1b8 0f00 	cmp.w	r8, #0
    cde2:	bf08      	it	eq
    cde4:	f04f 0802 	moveq.w	r8, #2
    cde8:	e78c      	b.n	cd04 <z_vprintk+0x28>
				if (min_width < 0) {
    cdea:	f1b9 0f00 	cmp.w	r9, #0
    cdee:	dbf4      	blt.n	cdda <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    cdf0:	230a      	movs	r3, #10
    cdf2:	fb03 0909 	mla	r9, r3, r9, r0
    cdf6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    cdfa:	e7f0      	b.n	cdde <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    cdfc:	2868      	cmp	r0, #104	; 0x68
    cdfe:	d103      	bne.n	ce08 <z_vprintk+0x12c>
    ce00:	2f68      	cmp	r7, #104	; 0x68
    ce02:	d106      	bne.n	ce12 <z_vprintk+0x136>
					length_mod = 'H';
    ce04:	2748      	movs	r7, #72	; 0x48
    ce06:	e77d      	b.n	cd04 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    ce08:	286c      	cmp	r0, #108	; 0x6c
    ce0a:	d102      	bne.n	ce12 <z_vprintk+0x136>
    ce0c:	2f6c      	cmp	r7, #108	; 0x6c
    ce0e:	f000 80f4 	beq.w	cffa <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    ce12:	2f00      	cmp	r7, #0
    ce14:	d18c      	bne.n	cd30 <z_vprintk+0x54>
    ce16:	4607      	mov	r7, r0
    ce18:	e774      	b.n	cd04 <z_vprintk+0x28>
				if (length_mod == 'z') {
    ce1a:	2f7a      	cmp	r7, #122	; 0x7a
    ce1c:	d102      	bne.n	ce24 <z_vprintk+0x148>
					d = va_arg(ap, int);
    ce1e:	f854 6b04 	ldr.w	r6, [r4], #4
    ce22:	e021      	b.n	ce68 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    ce24:	2f6c      	cmp	r7, #108	; 0x6c
    ce26:	d0fa      	beq.n	ce1e <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    ce28:	2f4c      	cmp	r7, #76	; 0x4c
    ce2a:	d1f8      	bne.n	ce1e <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    ce2c:	3407      	adds	r4, #7
    ce2e:	f024 0407 	bic.w	r4, r4, #7
    ce32:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ce36:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    ce3a:	9b04      	ldr	r3, [sp, #16]
    ce3c:	f04f 30ff 	mov.w	r0, #4294967295
    ce40:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    ce44:	9b05      	ldr	r3, [sp, #20]
    ce46:	9108      	str	r1, [sp, #32]
    ce48:	f143 0100 	adc.w	r1, r3, #0
    ce4c:	9109      	str	r1, [sp, #36]	; 0x24
    ce4e:	2100      	movs	r1, #0
    ce50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ce54:	4299      	cmp	r1, r3
    ce56:	bf08      	it	eq
    ce58:	4290      	cmpeq	r0, r2
    ce5a:	d204      	bcs.n	ce66 <z_vprintk+0x18a>
						print_err(out, ctx);
    ce5c:	4659      	mov	r1, fp
    ce5e:	4628      	mov	r0, r5
    ce60:	f00e ff7e 	bl	1bd60 <print_err>
						break;
    ce64:	e746      	b.n	ccf4 <z_vprintk+0x18>
					d = lld;
    ce66:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    ce68:	2e00      	cmp	r6, #0
    ce6a:	da05      	bge.n	ce78 <z_vprintk+0x19c>
					out((int)'-', ctx);
    ce6c:	4659      	mov	r1, fp
    ce6e:	202d      	movs	r0, #45	; 0x2d
    ce70:	47a8      	blx	r5
					d = -d;
    ce72:	4276      	negs	r6, r6
					min_width--;
    ce74:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    ce78:	4643      	mov	r3, r8
    ce7a:	4632      	mov	r2, r6
    ce7c:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    ce80:	4659      	mov	r1, fp
    ce82:	4628      	mov	r0, r5
    ce84:	f7ff fed0 	bl	cc28 <_printk_dec_ulong>
				break;
    ce88:	e734      	b.n	ccf4 <z_vprintk+0x18>
				if (length_mod == 'z') {
    ce8a:	2f7a      	cmp	r7, #122	; 0x7a
    ce8c:	d102      	bne.n	ce94 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    ce8e:	f854 2b04 	ldr.w	r2, [r4], #4
    ce92:	e00f      	b.n	ceb4 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    ce94:	2f6c      	cmp	r7, #108	; 0x6c
    ce96:	d0fa      	beq.n	ce8e <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    ce98:	2f4c      	cmp	r7, #76	; 0x4c
    ce9a:	d1f8      	bne.n	ce8e <z_vprintk+0x1b2>
					if (llu > ~0UL) {
    ce9c:	2100      	movs	r1, #0
    ce9e:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
    cea2:	3407      	adds	r4, #7
    cea4:	f024 0407 	bic.w	r4, r4, #7
    cea8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    ceac:	4299      	cmp	r1, r3
    ceae:	bf08      	it	eq
    ceb0:	4290      	cmpeq	r0, r2
    ceb2:	d3d3      	bcc.n	ce5c <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    ceb4:	4643      	mov	r3, r8
    ceb6:	f8cd 9000 	str.w	r9, [sp]
    ceba:	e7e1      	b.n	ce80 <z_vprintk+0x1a4>
				out('0', ctx);
    cebc:	4659      	mov	r1, fp
    cebe:	2030      	movs	r0, #48	; 0x30
    cec0:	47a8      	blx	r5
				out('x', ctx);
    cec2:	4659      	mov	r1, fp
    cec4:	2078      	movs	r0, #120	; 0x78
    cec6:	47a8      	blx	r5
					min_width = 8;
    cec8:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    cecc:	f04f 0801 	mov.w	r8, #1
    ced0:	e772      	b.n	cdb8 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    ced2:	2f6c      	cmp	r7, #108	; 0x6c
    ced4:	f43f af75 	beq.w	cdc2 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    ced8:	2f4c      	cmp	r7, #76	; 0x4c
    ceda:	f47f af72 	bne.w	cdc2 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    cede:	1de3      	adds	r3, r4, #7
    cee0:	f023 0307 	bic.w	r3, r3, #7
    cee4:	461c      	mov	r4, r3
    cee6:	f854 2b08 	ldr.w	r2, [r4], #8
    ceea:	9206      	str	r2, [sp, #24]
    ceec:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    ceee:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    cef0:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
    cef2:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
    cef6:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    cef8:	9107      	str	r1, [sp, #28]
		shift -= 4;
    cefa:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    cefe:	9906      	ldr	r1, [sp, #24]
    cf00:	f1ca 0e20 	rsb	lr, sl, #32
    cf04:	f1aa 0c20 	sub.w	ip, sl, #32
    cf08:	fa21 f00a 	lsr.w	r0, r1, sl
    cf0c:	fa02 fe0e 	lsl.w	lr, r2, lr
    cf10:	ea40 000e 	orr.w	r0, r0, lr
    cf14:	fa22 fc0c 	lsr.w	ip, r2, ip
    cf18:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    cf1c:	f010 000f 	ands.w	r0, r0, #15
    cf20:	d107      	bne.n	cf32 <z_vprintk+0x256>
    cf22:	9907      	ldr	r1, [sp, #28]
    cf24:	b911      	cbnz	r1, cf2c <z_vprintk+0x250>
    cf26:	f1ba 0f00 	cmp.w	sl, #0
    cf2a:	d125      	bne.n	cf78 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    cf2c:	f04f 0c30 	mov.w	ip, #48	; 0x30
    cf30:	e005      	b.n	cf3e <z_vprintk+0x262>
    cf32:	2809      	cmp	r0, #9
    cf34:	bf8c      	ite	hi
    cf36:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    cf3a:	f04f 0c30 	movls.w	ip, #48	; 0x30
    cf3e:	4460      	add	r0, ip
			out((int)nibble, ctx);
    cf40:	4659      	mov	r1, fp
    cf42:	b240      	sxtb	r0, r0
    cf44:	920a      	str	r2, [sp, #40]	; 0x28
    cf46:	9307      	str	r3, [sp, #28]
    cf48:	47a8      	blx	r5
			digits++;
    cf4a:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    cf4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    cf4e:	3301      	adds	r3, #1
    cf50:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    cf52:	9b07      	ldr	r3, [sp, #28]
    cf54:	f1ba 0f00 	cmp.w	sl, #0
    cf58:	d123      	bne.n	cfa2 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    cf5a:	f1b8 0f03 	cmp.w	r8, #3
    cf5e:	f47f aec9 	bne.w	ccf4 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    cf62:	9b04      	ldr	r3, [sp, #16]
    cf64:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    cf68:	2e00      	cmp	r6, #0
    cf6a:	f77f aec3 	ble.w	ccf4 <z_vprintk+0x18>
			out(' ', ctx);
    cf6e:	4659      	mov	r1, fp
    cf70:	2020      	movs	r0, #32
    cf72:	47a8      	blx	r5
    cf74:	3e01      	subs	r6, #1
    cf76:	e7f7      	b.n	cf68 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    cf78:	1e59      	subs	r1, r3, #1
    cf7a:	4599      	cmp	r9, r3
    cf7c:	910a      	str	r1, [sp, #40]	; 0x28
    cf7e:	db07      	blt.n	cf90 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    cf80:	f1b8 0f01 	cmp.w	r8, #1
    cf84:	d106      	bne.n	cf94 <z_vprintk+0x2b8>
				out('0', ctx);
    cf86:	4659      	mov	r1, fp
    cf88:	2030      	movs	r0, #48	; 0x30
    cf8a:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    cf8c:	47a8      	blx	r5
    cf8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    cf90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf92:	e7b2      	b.n	cefa <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    cf94:	f1b8 0f02 	cmp.w	r8, #2
    cf98:	d1fa      	bne.n	cf90 <z_vprintk+0x2b4>
				out(' ', ctx);
    cf9a:	4659      	mov	r1, fp
    cf9c:	2020      	movs	r0, #32
    cf9e:	920b      	str	r2, [sp, #44]	; 0x2c
    cfa0:	e7f4      	b.n	cf8c <z_vprintk+0x2b0>
			found_largest_digit = 1;
    cfa2:	9607      	str	r6, [sp, #28]
    cfa4:	e7a9      	b.n	cefa <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    cfa6:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    cfaa:	46b2      	mov	sl, r6
    cfac:	4653      	mov	r3, sl
    cfae:	f81a 0b01 	ldrb.w	r0, [sl], #1
    cfb2:	b968      	cbnz	r0, cfd0 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    cfb4:	f1b8 0f03 	cmp.w	r8, #3
    cfb8:	d121      	bne.n	cffe <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    cfba:	1b9e      	subs	r6, r3, r6
    cfbc:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    cfc0:	2e00      	cmp	r6, #0
    cfc2:	f77f ae97 	ble.w	ccf4 <z_vprintk+0x18>
						out(' ', ctx);
    cfc6:	4659      	mov	r1, fp
    cfc8:	2020      	movs	r0, #32
    cfca:	47a8      	blx	r5
    cfcc:	3e01      	subs	r6, #1
    cfce:	e7f7      	b.n	cfc0 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    cfd0:	4659      	mov	r1, fp
    cfd2:	47a8      	blx	r5
    cfd4:	e7ea      	b.n	cfac <z_vprintk+0x2d0>
				out(c, ctx);
    cfd6:	4659      	mov	r1, fp
    cfd8:	f854 0b04 	ldr.w	r0, [r4], #4
    cfdc:	e6ae      	b.n	cd3c <z_vprintk+0x60>
				out((int)'%', ctx);
    cfde:	4659      	mov	r1, fp
    cfe0:	e6ac      	b.n	cd3c <z_vprintk+0x60>
				length_mod = 0;
    cfe2:	4637      	mov	r7, r6
				padding = PAD_NONE;
    cfe4:	46b0      	mov	r8, r6
				min_width = -1;
    cfe6:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    cfea:	2601      	movs	r6, #1
    cfec:	e68a      	b.n	cd04 <z_vprintk+0x28>
			switch (*fmt) {
    cfee:	f04f 0803 	mov.w	r8, #3
    cff2:	e687      	b.n	cd04 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    cff4:	f04f 0801 	mov.w	r8, #1
    cff8:	e684      	b.n	cd04 <z_vprintk+0x28>
					length_mod = 'L';
    cffa:	274c      	movs	r7, #76	; 0x4c
    cffc:	e682      	b.n	cd04 <z_vprintk+0x28>
			might_format = 0;
    cffe:	4606      	mov	r6, r0
		++fmt;
    d000:	e680      	b.n	cd04 <z_vprintk+0x28>
    d002:	bf00      	nop

0000d004 <vprintk>:
{
    d004:	b507      	push	{r0, r1, r2, lr}
    d006:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    d008:	2100      	movs	r1, #0
{
    d00a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    d00c:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    d00e:	4803      	ldr	r0, [pc, #12]	; (d01c <vprintk+0x18>)
    d010:	a901      	add	r1, sp, #4
    d012:	f7ff fe63 	bl	ccdc <z_vprintk>
}
    d016:	b003      	add	sp, #12
    d018:	f85d fb04 	ldr.w	pc, [sp], #4
    d01c:	0000cc19 	.word	0x0000cc19

0000d020 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    d020:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    d022:	2500      	movs	r5, #0
{
    d024:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    d026:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    d02a:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    d02c:	a901      	add	r1, sp, #4
    d02e:	4805      	ldr	r0, [pc, #20]	; (d044 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    d030:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    d032:	f7ff fe53 	bl	ccdc <z_vprintk>

	if (ctx.count < ctx.max) {
    d036:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    d03a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    d03c:	bfb8      	it	lt
    d03e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    d040:	b005      	add	sp, #20
    d042:	bd30      	pop	{r4, r5, pc}
    d044:	0001bd7d 	.word	0x0001bd7d

0000d048 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    d048:	f04f 0220 	mov.w	r2, #32
    d04c:	f3ef 8311 	mrs	r3, BASEPRI
    d050:	f382 8811 	msr	BASEPRI, r2
    d054:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    d058:	2101      	movs	r1, #1
    d05a:	4a04      	ldr	r2, [pc, #16]	; (d06c <nordicsemi_nrf91_init+0x24>)
    d05c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    d060:	f383 8811 	msr	BASEPRI, r3
    d064:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    d068:	2000      	movs	r0, #0
    d06a:	4770      	bx	lr
    d06c:	40039000 	.word	0x40039000

0000d070 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    d070:	b120      	cbz	r0, d07c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    d072:	4b03      	ldr	r3, [pc, #12]	; (d080 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    d074:	0180      	lsls	r0, r0, #6
    d076:	f043 0301 	orr.w	r3, r3, #1
    d07a:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    d07c:	4770      	bx	lr
    d07e:	bf00      	nop
    d080:	00020c10 	.word	0x00020c10

0000d084 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    d084:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    d086:	2200      	movs	r2, #0
{
    d088:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    d08a:	490f      	ldr	r1, [pc, #60]	; (d0c8 <enable_logger+0x44>)
    d08c:	480f      	ldr	r0, [pc, #60]	; (d0cc <enable_logger+0x48>)
    d08e:	f013 fbb2 	bl	207f6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d092:	2200      	movs	r2, #0
    d094:	2300      	movs	r3, #0
    d096:	2400      	movs	r4, #0
    d098:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d09c:	230e      	movs	r3, #14
    d09e:	4d0c      	ldr	r5, [pc, #48]	; (d0d0 <enable_logger+0x4c>)
    d0a0:	e9cd 3403 	strd	r3, r4, [sp, #12]
    d0a4:	f44f 7240 	mov.w	r2, #768	; 0x300
    d0a8:	4628      	mov	r0, r5
    d0aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d0ae:	4b09      	ldr	r3, [pc, #36]	; (d0d4 <enable_logger+0x50>)
    d0b0:	4909      	ldr	r1, [pc, #36]	; (d0d8 <enable_logger+0x54>)
    d0b2:	9400      	str	r4, [sp, #0]
    d0b4:	f00e fb78 	bl	1b7a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    d0b8:	4908      	ldr	r1, [pc, #32]	; (d0dc <enable_logger+0x58>)
    d0ba:	4628      	mov	r0, r5
    d0bc:	f013 fa9d 	bl	205fa <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    d0c0:	4620      	mov	r0, r4
    d0c2:	b009      	add	sp, #36	; 0x24
    d0c4:	bd30      	pop	{r4, r5, pc}
    d0c6:	bf00      	nop
    d0c8:	0000d0e1 	.word	0x0000d0e1
    d0cc:	20020760 	.word	0x20020760
    d0d0:	200207ec 	.word	0x200207ec
    d0d4:	0000d4c9 	.word	0x0000d4c9
    d0d8:	20021ee8 	.word	0x20021ee8
    d0dc:	00021242 	.word	0x00021242

0000d0e0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d0e0:	4801      	ldr	r0, [pc, #4]	; (d0e8 <log_process_thread_timer_expiry_fn+0x8>)
    d0e2:	f00e bad3 	b.w	1b68c <z_impl_k_sem_give>
    d0e6:	bf00      	nop
    d0e8:	20020680 	.word	0x20020680

0000d0ec <log_core_init>:
{
    d0ec:	b508      	push	{r3, lr}
		log_msg_pool_init();
    d0ee:	f000 fa49 	bl	d584 <log_msg_pool_init>
		log_list_init(&list);
    d0f2:	4809      	ldr	r0, [pc, #36]	; (d118 <log_core_init+0x2c>)
    d0f4:	f00f f8f4 	bl	1c2e0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    d0f8:	2304      	movs	r3, #4
    d0fa:	2234      	movs	r2, #52	; 0x34
    d0fc:	4907      	ldr	r1, [pc, #28]	; (d11c <log_core_init+0x30>)
    d0fe:	4808      	ldr	r0, [pc, #32]	; (d120 <log_core_init+0x34>)
    d100:	f013 f88c 	bl	2021c <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    d104:	4b07      	ldr	r3, [pc, #28]	; (d124 <log_core_init+0x38>)
    d106:	4a08      	ldr	r2, [pc, #32]	; (d128 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    d108:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    d10c:	601a      	str	r2, [r3, #0]
}
    d10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    d112:	f000 bc7d 	b.w	da10 <log_output_timestamp_freq_set>
    d116:	bf00      	nop
    d118:	200207c8 	.word	0x200207c8
    d11c:	200249b8 	.word	0x200249b8
    d120:	200207d0 	.word	0x200207d0
    d124:	200200a4 	.word	0x200200a4
    d128:	0001c31f 	.word	0x0001c31f

0000d12c <dropped_notify>:
{
    d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d12e:	2500      	movs	r5, #0
    d130:	4b0c      	ldr	r3, [pc, #48]	; (d164 <dropped_notify+0x38>)
    d132:	e8d3 7fef 	ldaex	r7, [r3]
    d136:	e8c3 5fe2 	stlex	r2, r5, [r3]
    d13a:	2a00      	cmp	r2, #0
    d13c:	d1f9      	bne.n	d132 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    d13e:	4c0a      	ldr	r4, [pc, #40]	; (d168 <dropped_notify+0x3c>)
    d140:	4e0a      	ldr	r6, [pc, #40]	; (d16c <dropped_notify+0x40>)
    d142:	1b36      	subs	r6, r6, r4
    d144:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    d146:	42b5      	cmp	r5, r6
    d148:	db00      	blt.n	d14c <dropped_notify+0x20>
}
    d14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    d14c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    d14e:	795b      	ldrb	r3, [r3, #5]
    d150:	b12b      	cbz	r3, d15e <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    d152:	6823      	ldr	r3, [r4, #0]
    d154:	68db      	ldr	r3, [r3, #12]
    d156:	b113      	cbz	r3, d15e <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    d158:	4639      	mov	r1, r7
    d15a:	4620      	mov	r0, r4
    d15c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    d15e:	3501      	adds	r5, #1
    d160:	3410      	adds	r4, #16
    d162:	e7f0      	b.n	d146 <dropped_notify+0x1a>
    d164:	200207c0 	.word	0x200207c0
    d168:	00020bac 	.word	0x00020bac
    d16c:	00020bbc 	.word	0x00020bbc

0000d170 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d170:	4b04      	ldr	r3, [pc, #16]	; (d184 <log_dropped+0x14>)
    d172:	e8d3 2fef 	ldaex	r2, [r3]
    d176:	3201      	adds	r2, #1
    d178:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d17c:	2900      	cmp	r1, #0
    d17e:	d1f8      	bne.n	d172 <log_dropped+0x2>
}
    d180:	4770      	bx	lr
    d182:	bf00      	nop
    d184:	200207c0 	.word	0x200207c0

0000d188 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    d188:	4a04      	ldr	r2, [pc, #16]	; (d19c <log_source_name_get+0x14>)
    d18a:	4b05      	ldr	r3, [pc, #20]	; (d1a0 <log_source_name_get+0x18>)
    d18c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    d18e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    d192:	bf34      	ite	cc
    d194:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    d198:	2000      	movcs	r0, #0
}
    d19a:	4770      	bx	lr
    d19c:	00020b54 	.word	0x00020b54
    d1a0:	00020bac 	.word	0x00020bac

0000d1a4 <log_backend_enable>:
	id += backend - log_backend_get(0);
    d1a4:	4b09      	ldr	r3, [pc, #36]	; (d1cc <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    d1a6:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    d1a8:	1ac3      	subs	r3, r0, r3
    d1aa:	111b      	asrs	r3, r3, #4
    d1ac:	3301      	adds	r3, #1
{
    d1ae:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    d1b0:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    d1b2:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    d1b4:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    d1b6:	4c06      	ldr	r4, [pc, #24]	; (d1d0 <log_backend_enable+0x2c>)
    d1b8:	715a      	strb	r2, [r3, #5]
    d1ba:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    d1bc:	6019      	str	r1, [r3, #0]
    d1be:	b912      	cbnz	r2, d1c6 <log_backend_enable+0x22>
    d1c0:	4804      	ldr	r0, [pc, #16]	; (d1d4 <log_backend_enable+0x30>)
    d1c2:	f00e fa63 	bl	1b68c <z_impl_k_sem_give>
	backend_attached = true;
    d1c6:	2301      	movs	r3, #1
    d1c8:	7023      	strb	r3, [r4, #0]
}
    d1ca:	bd10      	pop	{r4, pc}
    d1cc:	00020bac 	.word	0x00020bac
    d1d0:	20021c48 	.word	0x20021c48
    d1d4:	20020680 	.word	0x20020680

0000d1d8 <log_init>:
{
    d1d8:	b570      	push	{r4, r5, r6, lr}
    d1da:	4b0f      	ldr	r3, [pc, #60]	; (d218 <log_init+0x40>)
    d1dc:	e8d3 5fef 	ldaex	r5, [r3]
    d1e0:	1c6a      	adds	r2, r5, #1
    d1e2:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d1e6:	2900      	cmp	r1, #0
    d1e8:	d1f8      	bne.n	d1dc <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    d1ea:	b92d      	cbnz	r5, d1f8 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    d1ec:	4c0b      	ldr	r4, [pc, #44]	; (d21c <log_init+0x44>)
    d1ee:	4e0c      	ldr	r6, [pc, #48]	; (d220 <log_init+0x48>)
    d1f0:	1b36      	subs	r6, r6, r4
    d1f2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    d1f4:	42b5      	cmp	r5, r6
    d1f6:	db00      	blt.n	d1fa <log_init+0x22>
}
    d1f8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    d1fa:	7b23      	ldrb	r3, [r4, #12]
    d1fc:	b143      	cbz	r3, d210 <log_init+0x38>
			if (backend->api->init != NULL) {
    d1fe:	6823      	ldr	r3, [r4, #0]
    d200:	695b      	ldr	r3, [r3, #20]
    d202:	b103      	cbz	r3, d206 <log_init+0x2e>
				backend->api->init();
    d204:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    d206:	2204      	movs	r2, #4
    d208:	2100      	movs	r1, #0
    d20a:	4620      	mov	r0, r4
    d20c:	f7ff ffca 	bl	d1a4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    d210:	3501      	adds	r5, #1
    d212:	3410      	adds	r4, #16
    d214:	e7ee      	b.n	d1f4 <log_init+0x1c>
    d216:	bf00      	nop
    d218:	200207c4 	.word	0x200207c4
    d21c:	00020bac 	.word	0x00020bac
    d220:	00020bbc 	.word	0x00020bbc

0000d224 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    d224:	4b14      	ldr	r3, [pc, #80]	; (d278 <log_strdup+0x54>)
{
    d226:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    d228:	4298      	cmp	r0, r3
{
    d22a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    d22c:	d302      	bcc.n	d234 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    d22e:	4b13      	ldr	r3, [pc, #76]	; (d27c <log_strdup+0x58>)
    d230:	4298      	cmp	r0, r3
    d232:	d31c      	bcc.n	d26e <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    d234:	2200      	movs	r2, #0
    d236:	2300      	movs	r3, #0
    d238:	4811      	ldr	r0, [pc, #68]	; (d280 <log_strdup+0x5c>)
    d23a:	a901      	add	r1, sp, #4
    d23c:	f00d fd76 	bl	1ad2c <k_mem_slab_alloc>
	if (err != 0) {
    d240:	4605      	mov	r5, r0
    d242:	b9b8      	cbnz	r0, d274 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d244:	2201      	movs	r2, #1
    d246:	9b01      	ldr	r3, [sp, #4]
    d248:	e8d3 1fef 	ldaex	r1, [r3]
    d24c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d250:	2800      	cmp	r0, #0
    d252:	d1f9      	bne.n	d248 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    d254:	9801      	ldr	r0, [sp, #4]
    d256:	4621      	mov	r1, r4
    d258:	222d      	movs	r2, #45	; 0x2d
    d25a:	3004      	adds	r0, #4
    d25c:	f00f fca8 	bl	1cbb0 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    d260:	237e      	movs	r3, #126	; 0x7e
    d262:	9c01      	ldr	r4, [sp, #4]
    d264:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    d268:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    d26c:	3404      	adds	r4, #4
}
    d26e:	4620      	mov	r0, r4
    d270:	b003      	add	sp, #12
    d272:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    d274:	4c03      	ldr	r4, [pc, #12]	; (d284 <log_strdup+0x60>)
    d276:	e7fa      	b.n	d26e <log_strdup+0x4a>
    d278:	000208b0 	.word	0x000208b0
    d27c:	00021bb4 	.word	0x00021bb4
    d280:	200207d0 	.word	0x200207d0
    d284:	0002124a 	.word	0x0002124a

0000d288 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    d288:	b148      	cbz	r0, d29e <log_is_strdup+0x16>
    d28a:	4b05      	ldr	r3, [pc, #20]	; (d2a0 <log_is_strdup+0x18>)
    d28c:	4298      	cmp	r0, r3
    d28e:	d305      	bcc.n	d29c <log_is_strdup+0x14>
    d290:	33d0      	adds	r3, #208	; 0xd0
    d292:	4298      	cmp	r0, r3
    d294:	bf2c      	ite	cs
    d296:	2000      	movcs	r0, #0
    d298:	2001      	movcc	r0, #1
    d29a:	4770      	bx	lr
    d29c:	2000      	movs	r0, #0
}
    d29e:	4770      	bx	lr
    d2a0:	200249b8 	.word	0x200249b8

0000d2a4 <z_impl_log_process>:
{
    d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    d2a8:	4b4a      	ldr	r3, [pc, #296]	; (d3d4 <z_impl_log_process+0x130>)
{
    d2aa:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    d2ac:	781b      	ldrb	r3, [r3, #0]
{
    d2ae:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    d2b0:	b903      	cbnz	r3, d2b4 <z_impl_log_process+0x10>
    d2b2:	b340      	cbz	r0, d306 <z_impl_log_process+0x62>
	__asm__ volatile(
    d2b4:	f04f 0320 	mov.w	r3, #32
    d2b8:	f3ef 8611 	mrs	r6, BASEPRI
    d2bc:	f383 8811 	msr	BASEPRI, r3
    d2c0:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    d2c4:	4844      	ldr	r0, [pc, #272]	; (d3d8 <z_impl_log_process+0x134>)
    d2c6:	f00f f81b 	bl	1c300 <log_list_head_get>
    d2ca:	4605      	mov	r5, r0
	__asm__ volatile(
    d2cc:	f386 8811 	msr	BASEPRI, r6
    d2d0:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    d2d4:	b158      	cbz	r0, d2ee <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d2d6:	4b41      	ldr	r3, [pc, #260]	; (d3dc <z_impl_log_process+0x138>)
    d2d8:	e8d3 2fef 	ldaex	r2, [r3]
    d2dc:	3a01      	subs	r2, #1
    d2de:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d2e2:	2900      	cmp	r1, #0
    d2e4:	d1f8      	bne.n	d2d8 <z_impl_log_process+0x34>
	if (!bypass) {
    d2e6:	b194      	cbz	r4, d30e <z_impl_log_process+0x6a>
	log_msg_put(msg);
    d2e8:	4628      	mov	r0, r5
    d2ea:	f00f f923 	bl	1c534 <log_msg_put>
	if (!bypass && dropped_cnt) {
    d2ee:	b924      	cbnz	r4, d2fa <z_impl_log_process+0x56>
    d2f0:	4b3b      	ldr	r3, [pc, #236]	; (d3e0 <z_impl_log_process+0x13c>)
    d2f2:	681b      	ldr	r3, [r3, #0]
    d2f4:	b10b      	cbz	r3, d2fa <z_impl_log_process+0x56>
		dropped_notify();
    d2f6:	f7ff ff19 	bl	d12c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    d2fa:	4837      	ldr	r0, [pc, #220]	; (d3d8 <z_impl_log_process+0x134>)
    d2fc:	f00e fffe 	bl	1c2fc <log_list_head_peek>
    d300:	1e04      	subs	r4, r0, #0
    d302:	bf18      	it	ne
    d304:	2401      	movne	r4, #1
}
    d306:	4620      	mov	r0, r4
    d308:	b005      	add	sp, #20
    d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    d30e:	4b35      	ldr	r3, [pc, #212]	; (d3e4 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    d310:	781b      	ldrb	r3, [r3, #0]
    d312:	b9cb      	cbnz	r3, d348 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d314:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    d316:	07db      	lsls	r3, r3, #31
    d318:	d416      	bmi.n	d348 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    d31a:	f00f f91a 	bl	1c552 <log_msg_str_get>
    d31e:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    d320:	4628      	mov	r0, r5
    d322:	f00f f8e5 	bl	1c4f0 <log_msg_nargs_get>
    d326:	4601      	mov	r1, r0
    d328:	4640      	mov	r0, r8
    d32a:	f00e fffc 	bl	1c326 <z_log_get_s_mask>
    d32e:	4606      	mov	r6, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    d330:	4f2d      	ldr	r7, [pc, #180]	; (d3e8 <z_impl_log_process+0x144>)
    d332:	4b2e      	ldr	r3, [pc, #184]	; (d3ec <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    d334:	f8df b0d0 	ldr.w	fp, [pc, #208]	; d408 <z_impl_log_process+0x164>
    d338:	1bdb      	subs	r3, r3, r7
    d33a:	08db      	lsrs	r3, r3, #3
    d33c:	9303      	str	r3, [sp, #12]
    d33e:	4b2c      	ldr	r3, [pc, #176]	; (d3f0 <z_impl_log_process+0x14c>)
    d340:	1bdb      	subs	r3, r3, r7
    d342:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    d346:	b936      	cbnz	r6, d356 <z_impl_log_process+0xb2>
    d348:	4e2a      	ldr	r6, [pc, #168]	; (d3f4 <z_impl_log_process+0x150>)
    d34a:	4f2b      	ldr	r7, [pc, #172]	; (d3f8 <z_impl_log_process+0x154>)
    d34c:	f04f 0800 	mov.w	r8, #0
    d350:	1bbf      	subs	r7, r7, r6
    d352:	113f      	asrs	r7, r7, #4
    d354:	e03a      	b.n	d3cc <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
    d356:	fab6 f186 	clz	r1, r6
    d35a:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    d35e:	4649      	mov	r1, r9
    d360:	4628      	mov	r0, r5
    d362:	f00f f8c8 	bl	1c4f6 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    d366:	4b25      	ldr	r3, [pc, #148]	; (d3fc <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
    d368:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    d36a:	4298      	cmp	r0, r3
    d36c:	d302      	bcc.n	d374 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    d36e:	4a24      	ldr	r2, [pc, #144]	; (d400 <z_impl_log_process+0x15c>)
    d370:	4290      	cmp	r0, r2
    d372:	d31a      	bcc.n	d3aa <z_impl_log_process+0x106>
    d374:	4608      	mov	r0, r1
    d376:	f7ff ff87 	bl	d288 <log_is_strdup>
    d37a:	4602      	mov	r2, r0
    d37c:	b9a8      	cbnz	r0, d3aa <z_impl_log_process+0x106>
    d37e:	4b21      	ldr	r3, [pc, #132]	; (d404 <z_impl_log_process+0x160>)
    d380:	4299      	cmp	r1, r3
    d382:	d012      	beq.n	d3aa <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
    d384:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    d386:	9903      	ldr	r1, [sp, #12]
    d388:	f3c3 1389 	ubfx	r3, r3, #6, #10
    d38c:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    d38e:	bf38      	it	cc
    d390:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    d394:	ea4f 138a 	mov.w	r3, sl, lsl #6
    d398:	f043 0301 	orr.w	r3, r3, #1
    d39c:	f8ad 3000 	strh.w	r3, [sp]
    d3a0:	4649      	mov	r1, r9
    d3a2:	4643      	mov	r3, r8
    d3a4:	4658      	mov	r0, fp
    d3a6:	f00f f81d 	bl	1c3e4 <log_3>
		mask &= ~BIT(idx);
    d3aa:	2301      	movs	r3, #1
    d3ac:	fa03 f109 	lsl.w	r1, r3, r9
    d3b0:	ea26 0601 	bic.w	r6, r6, r1
    d3b4:	e7c7      	b.n	d346 <z_impl_log_process+0xa2>
	return backend->cb->active;
    d3b6:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    d3b8:	795b      	ldrb	r3, [r3, #5]
    d3ba:	b123      	cbz	r3, d3c6 <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
    d3bc:	6833      	ldr	r3, [r6, #0]
    d3be:	4629      	mov	r1, r5
    d3c0:	4630      	mov	r0, r6
    d3c2:	681b      	ldr	r3, [r3, #0]
    d3c4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    d3c6:	f108 0801 	add.w	r8, r8, #1
    d3ca:	3610      	adds	r6, #16
    d3cc:	45b8      	cmp	r8, r7
    d3ce:	dbf2      	blt.n	d3b6 <z_impl_log_process+0x112>
    d3d0:	e78a      	b.n	d2e8 <z_impl_log_process+0x44>
    d3d2:	bf00      	nop
    d3d4:	20021c48 	.word	0x20021c48
    d3d8:	200207c8 	.word	0x200207c8
    d3dc:	200207bc 	.word	0x200207bc
    d3e0:	200207c0 	.word	0x200207c0
    d3e4:	20021c49 	.word	0x20021c49
    d3e8:	00020b54 	.word	0x00020b54
    d3ec:	00020bac 	.word	0x00020bac
    d3f0:	00020b74 	.word	0x00020b74
    d3f4:	00020bac 	.word	0x00020bac
    d3f8:	00020bbc 	.word	0x00020bbc
    d3fc:	000208b0 	.word	0x000208b0
    d400:	00021bb4 	.word	0x00021bb4
    d404:	0002124a 	.word	0x0002124a
    d408:	00021264 	.word	0x00021264

0000d40c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    d40c:	4b27      	ldr	r3, [pc, #156]	; (d4ac <msg_finalize+0xa0>)
{
    d40e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    d410:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    d412:	8141      	strh	r1, [r0, #10]
{
    d414:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    d416:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d418:	4d25      	ldr	r5, [pc, #148]	; (d4b0 <msg_finalize+0xa4>)
    d41a:	60e0      	str	r0, [r4, #12]
    d41c:	e8d5 3fef 	ldaex	r3, [r5]
    d420:	3301      	adds	r3, #1
    d422:	e8c5 3fe2 	stlex	r2, r3, [r5]
    d426:	2a00      	cmp	r2, #0
    d428:	d1f8      	bne.n	d41c <msg_finalize+0x10>
	__asm__ volatile(
    d42a:	f04f 0320 	mov.w	r3, #32
    d42e:	f3ef 8611 	mrs	r6, BASEPRI
    d432:	f383 8811 	msr	BASEPRI, r3
    d436:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    d43a:	481e      	ldr	r0, [pc, #120]	; (d4b4 <msg_finalize+0xa8>)
    d43c:	4621      	mov	r1, r4
    d43e:	f00e ff53 	bl	1c2e8 <log_list_add_tail>
	__asm__ volatile(
    d442:	f386 8811 	msr	BASEPRI, r6
    d446:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    d44a:	4b1b      	ldr	r3, [pc, #108]	; (d4b8 <msg_finalize+0xac>)
    d44c:	781b      	ldrb	r3, [r3, #0]
    d44e:	b183      	cbz	r3, d472 <msg_finalize+0x66>
	__asm__ volatile(
    d450:	f04f 0320 	mov.w	r3, #32
    d454:	f3ef 8411 	mrs	r4, BASEPRI
    d458:	f383 8811 	msr	BASEPRI, r3
    d45c:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    d460:	2000      	movs	r0, #0
    d462:	f7ff ff1f 	bl	d2a4 <z_impl_log_process>
	__asm__ volatile(
    d466:	f384 8811 	msr	BASEPRI, r4
    d46a:	f3bf 8f6f 	isb	sy
}
    d46e:	b002      	add	sp, #8
    d470:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    d472:	4a12      	ldr	r2, [pc, #72]	; (d4bc <msg_finalize+0xb0>)
    d474:	682b      	ldr	r3, [r5, #0]
    d476:	6812      	ldr	r2, [r2, #0]
    d478:	2a00      	cmp	r2, #0
    d47a:	d0f8      	beq.n	d46e <msg_finalize+0x62>
    d47c:	2b01      	cmp	r3, #1
    d47e:	d10a      	bne.n	d496 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    d480:	2200      	movs	r2, #0
    d482:	2300      	movs	r3, #0
    d484:	480e      	ldr	r0, [pc, #56]	; (d4c0 <msg_finalize+0xb4>)
    d486:	e9cd 2300 	strd	r2, r3, [sp]
    d48a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    d48e:	2300      	movs	r3, #0
    d490:	f00e fbee 	bl	1bc70 <z_impl_k_timer_start>
    d494:	e7eb      	b.n	d46e <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    d496:	2b0a      	cmp	r3, #10
    d498:	d1e9      	bne.n	d46e <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    d49a:	4809      	ldr	r0, [pc, #36]	; (d4c0 <msg_finalize+0xb4>)
    d49c:	f013 f9b7 	bl	2080e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    d4a0:	4808      	ldr	r0, [pc, #32]	; (d4c4 <msg_finalize+0xb8>)
}
    d4a2:	b002      	add	sp, #8
    d4a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d4a8:	f00e b8f0 	b.w	1b68c <z_impl_k_sem_give>
    d4ac:	200200a4 	.word	0x200200a4
    d4b0:	200207bc 	.word	0x200207bc
    d4b4:	200207c8 	.word	0x200207c8
    d4b8:	20021c49 	.word	0x20021c49
    d4bc:	200208a4 	.word	0x200208a4
    d4c0:	20020760 	.word	0x20020760
    d4c4:	20020680 	.word	0x20020680

0000d4c8 <log_process_thread_func>:
{
    d4c8:	b510      	push	{r4, lr}
	log_init();
    d4ca:	f7ff fe85 	bl	d1d8 <log_init>
	return z_impl_k_current_get();
    d4ce:	f00e f8d7 	bl	1b680 <z_impl_k_current_get>
	proc_tid = process_tid;
    d4d2:	4b0c      	ldr	r3, [pc, #48]	; (d504 <log_process_thread_func+0x3c>)
    d4d4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    d4d6:	b130      	cbz	r0, d4e6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    d4d8:	4b0b      	ldr	r3, [pc, #44]	; (d508 <log_process_thread_func+0x40>)
	    process_tid &&
    d4da:	681b      	ldr	r3, [r3, #0]
    d4dc:	2b09      	cmp	r3, #9
    d4de:	dd02      	ble.n	d4e6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    d4e0:	480a      	ldr	r0, [pc, #40]	; (d50c <log_process_thread_func+0x44>)
    d4e2:	f00e f8d3 	bl	1b68c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    d4e6:	4c09      	ldr	r4, [pc, #36]	; (d50c <log_process_thread_func+0x44>)
    d4e8:	2000      	movs	r0, #0
    d4ea:	f7ff fedb 	bl	d2a4 <z_impl_log_process>
		if (log_process(false) == false) {
    d4ee:	2800      	cmp	r0, #0
    d4f0:	d1fa      	bne.n	d4e8 <log_process_thread_func+0x20>
    d4f2:	f04f 32ff 	mov.w	r2, #4294967295
    d4f6:	f04f 33ff 	mov.w	r3, #4294967295
    d4fa:	4620      	mov	r0, r4
    d4fc:	f00e f8ec 	bl	1b6d8 <z_impl_k_sem_take>
    d500:	e7f2      	b.n	d4e8 <log_process_thread_func+0x20>
    d502:	bf00      	nop
    d504:	200208a4 	.word	0x200208a4
    d508:	200207bc 	.word	0x200207bc
    d50c:	20020680 	.word	0x20020680

0000d510 <z_impl_log_panic>:
{
    d510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    d512:	4f0e      	ldr	r7, [pc, #56]	; (d54c <z_impl_log_panic+0x3c>)
    d514:	783d      	ldrb	r5, [r7, #0]
    d516:	b975      	cbnz	r5, d536 <z_impl_log_panic+0x26>
	log_init();
    d518:	f7ff fe5e 	bl	d1d8 <log_init>
	return __log_backends_end - __log_backends_start;
    d51c:	4c0c      	ldr	r4, [pc, #48]	; (d550 <z_impl_log_panic+0x40>)
    d51e:	4e0d      	ldr	r6, [pc, #52]	; (d554 <z_impl_log_panic+0x44>)
    d520:	1b36      	subs	r6, r6, r4
    d522:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    d524:	42b5      	cmp	r5, r6
    d526:	db07      	blt.n	d538 <z_impl_log_panic+0x28>
    d528:	2000      	movs	r0, #0
    d52a:	f7ff febb 	bl	d2a4 <z_impl_log_process>
		while (log_process(false) == true) {
    d52e:	2800      	cmp	r0, #0
    d530:	d1fa      	bne.n	d528 <z_impl_log_panic+0x18>
	panic_mode = true;
    d532:	2301      	movs	r3, #1
    d534:	703b      	strb	r3, [r7, #0]
}
    d536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    d538:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    d53a:	795b      	ldrb	r3, [r3, #5]
    d53c:	b11b      	cbz	r3, d546 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    d53e:	6823      	ldr	r3, [r4, #0]
    d540:	4620      	mov	r0, r4
    d542:	691b      	ldr	r3, [r3, #16]
    d544:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    d546:	3501      	adds	r5, #1
    d548:	3410      	adds	r4, #16
    d54a:	e7eb      	b.n	d524 <z_impl_log_panic+0x14>
    d54c:	20021c49 	.word	0x20021c49
    d550:	00020bac 	.word	0x00020bac
    d554:	00020bbc 	.word	0x00020bbc

0000d558 <log_free>:
{
    d558:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    d55a:	3804      	subs	r0, #4
    d55c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d55e:	e8d0 3fef 	ldaex	r3, [r0]
    d562:	1e5a      	subs	r2, r3, #1
    d564:	e8c0 2fe1 	stlex	r1, r2, [r0]
    d568:	2900      	cmp	r1, #0
    d56a:	d1f8      	bne.n	d55e <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    d56c:	2b01      	cmp	r3, #1
    d56e:	d103      	bne.n	d578 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    d570:	4803      	ldr	r0, [pc, #12]	; (d580 <log_free+0x28>)
    d572:	a901      	add	r1, sp, #4
    d574:	f00d fc0c 	bl	1ad90 <k_mem_slab_free>
}
    d578:	b003      	add	sp, #12
    d57a:	f85d fb04 	ldr.w	pc, [sp], #4
    d57e:	bf00      	nop
    d580:	200207d0 	.word	0x200207d0

0000d584 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    d584:	2320      	movs	r3, #32
    d586:	4902      	ldr	r1, [pc, #8]	; (d590 <log_msg_pool_init+0xc>)
    d588:	461a      	mov	r2, r3
    d58a:	4802      	ldr	r0, [pc, #8]	; (d594 <log_msg_pool_init+0x10>)
    d58c:	f012 be46 	b.w	2021c <k_mem_slab_init>
    d590:	20024a88 	.word	0x20024a88
    d594:	200208a8 	.word	0x200208a8

0000d598 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    d598:	2300      	movs	r3, #0
{
    d59a:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    d59c:	4d09      	ldr	r5, [pc, #36]	; (d5c4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    d59e:	9301      	str	r3, [sp, #4]
    d5a0:	2001      	movs	r0, #1
    d5a2:	f7ff fe7f 	bl	d2a4 <z_impl_log_process>
    d5a6:	4604      	mov	r4, r0
			log_dropped();
    d5a8:	f7ff fde2 	bl	d170 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    d5ac:	2200      	movs	r2, #0
    d5ae:	2300      	movs	r3, #0
    d5b0:	4628      	mov	r0, r5
    d5b2:	a901      	add	r1, sp, #4
    d5b4:	f00d fbba 	bl	1ad2c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    d5b8:	b108      	cbz	r0, d5be <log_msg_no_space_handle+0x26>
    d5ba:	2c00      	cmp	r4, #0
    d5bc:	d1f0      	bne.n	d5a0 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    d5be:	9801      	ldr	r0, [sp, #4]
    d5c0:	b003      	add	sp, #12
    d5c2:	bd30      	pop	{r4, r5, pc}
    d5c4:	200208a8 	.word	0x200208a8

0000d5c8 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    d5c8:	2300      	movs	r3, #0
{
    d5ca:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    d5cc:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    d5ce:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    d5d0:	4806      	ldr	r0, [pc, #24]	; (d5ec <log_msg_chunk_alloc+0x24>)
    d5d2:	2300      	movs	r3, #0
    d5d4:	a901      	add	r1, sp, #4
    d5d6:	f00d fba9 	bl	1ad2c <k_mem_slab_alloc>
	if (err != 0) {
    d5da:	b110      	cbz	r0, d5e2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    d5dc:	f7ff ffdc 	bl	d598 <log_msg_no_space_handle>
    d5e0:	9001      	str	r0, [sp, #4]
}
    d5e2:	9801      	ldr	r0, [sp, #4]
    d5e4:	b003      	add	sp, #12
    d5e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ea:	bf00      	nop
    d5ec:	200208a8 	.word	0x200208a8

0000d5f0 <msg_free>:
{
    d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d5f2:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    d5f4:	7a45      	ldrb	r5, [r0, #9]
{
    d5f6:	b085      	sub	sp, #20
    d5f8:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    d5fa:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    d5fc:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    d600:	d41c      	bmi.n	d63c <msg_free+0x4c>
    d602:	b1dd      	cbz	r5, d63c <msg_free+0x4c>
		u32_t smask = 0;
    d604:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    d606:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    d608:	4631      	mov	r1, r6
    d60a:	9801      	ldr	r0, [sp, #4]
    d60c:	f00e ff73 	bl	1c4f6 <log_msg_arg_get>
    d610:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    d612:	f7ff fe39 	bl	d288 <log_is_strdup>
    d616:	b170      	cbz	r0, d636 <msg_free+0x46>
				if (smask == 0) {
    d618:	b934      	cbnz	r4, d628 <msg_free+0x38>
					smask = z_log_get_s_mask(
    d61a:	9b01      	ldr	r3, [sp, #4]
    d61c:	4629      	mov	r1, r5
    d61e:	6918      	ldr	r0, [r3, #16]
    d620:	f00e fe81 	bl	1c326 <z_log_get_s_mask>
					if (smask == 0) {
    d624:	4604      	mov	r4, r0
    d626:	b148      	cbz	r0, d63c <msg_free+0x4c>
				if (smask & BIT(i)) {
    d628:	fa24 f306 	lsr.w	r3, r4, r6
    d62c:	07d9      	lsls	r1, r3, #31
    d62e:	d502      	bpl.n	d636 <msg_free+0x46>
					log_free(buf);
    d630:	4638      	mov	r0, r7
    d632:	f7ff ff91 	bl	d558 <log_free>
		for (i = 0; i < nargs; i++) {
    d636:	3601      	adds	r6, #1
    d638:	42ae      	cmp	r6, r5
    d63a:	d3e5      	bcc.n	d608 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    d63c:	9b01      	ldr	r3, [sp, #4]
    d63e:	7a1a      	ldrb	r2, [r3, #8]
    d640:	0792      	lsls	r2, r2, #30
    d642:	d504      	bpl.n	d64e <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    d644:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    d646:	4c08      	ldr	r4, [pc, #32]	; (d668 <msg_free+0x78>)
    d648:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    d64a:	9b03      	ldr	r3, [sp, #12]
    d64c:	b92b      	cbnz	r3, d65a <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    d64e:	4806      	ldr	r0, [pc, #24]	; (d668 <msg_free+0x78>)
    d650:	a901      	add	r1, sp, #4
    d652:	f00d fb9d 	bl	1ad90 <k_mem_slab_free>
}
    d656:	b005      	add	sp, #20
    d658:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    d65a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    d65c:	4620      	mov	r0, r4
    d65e:	a903      	add	r1, sp, #12
    d660:	f00d fb96 	bl	1ad90 <k_mem_slab_free>
		cont = next;
    d664:	9503      	str	r5, [sp, #12]
    d666:	e7f0      	b.n	d64a <msg_free+0x5a>
    d668:	200208a8 	.word	0x200208a8

0000d66c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    d66c:	b40e      	push	{r1, r2, r3}
    d66e:	b503      	push	{r0, r1, lr}
    d670:	ab03      	add	r3, sp, #12
    d672:	f853 2b04 	ldr.w	r2, [r3], #4
    d676:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    d678:	4804      	ldr	r0, [pc, #16]	; (d68c <print_formatted+0x20>)
	va_start(args, fmt);
    d67a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    d67c:	f7ff fb2e 	bl	ccdc <z_vprintk>
#endif
	va_end(args);

	return length;
}
    d680:	2000      	movs	r0, #0
    d682:	b002      	add	sp, #8
    d684:	f85d eb04 	ldr.w	lr, [sp], #4
    d688:	b003      	add	sp, #12
    d68a:	4770      	bx	lr
    d68c:	0001c8fb 	.word	0x0001c8fb

0000d690 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    d694:	f011 0402 	ands.w	r4, r1, #2
{
    d698:	b085      	sub	sp, #20
    d69a:	4606      	mov	r6, r0
    d69c:	4690      	mov	r8, r2
    d69e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    d6a2:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    d6a6:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    d6aa:	d007      	beq.n	d6bc <prefix_print+0x2c>
	if (!format) {
    d6ac:	f011 0f44 	tst.w	r1, #68	; 0x44
    d6b0:	d137      	bne.n	d722 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    d6b2:	461a      	mov	r2, r3
    d6b4:	4932      	ldr	r1, [pc, #200]	; (d780 <prefix_print+0xf0>)
    d6b6:	f7ff ffd9 	bl	d66c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    d6ba:	4604      	mov	r4, r0
	if (color) {
    d6bc:	f1b9 0f00 	cmp.w	r9, #0
    d6c0:	d00a      	beq.n	d6d8 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    d6c2:	4b30      	ldr	r3, [pc, #192]	; (d784 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    d6c4:	4630      	mov	r0, r6
		const char *color = start && (colors[level] != NULL) ?
    d6c6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    d6ca:	4b2f      	ldr	r3, [pc, #188]	; (d788 <prefix_print+0xf8>)
    d6cc:	492f      	ldr	r1, [pc, #188]	; (d78c <prefix_print+0xfc>)
    d6ce:	2a00      	cmp	r2, #0
    d6d0:	bf08      	it	eq
    d6d2:	461a      	moveq	r2, r3
    d6d4:	f7ff ffca 	bl	d66c <print_formatted>
	if (level_on) {
    d6d8:	b13d      	cbz	r5, d6ea <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    d6da:	4b2d      	ldr	r3, [pc, #180]	; (d790 <prefix_print+0x100>)
    d6dc:	4630      	mov	r0, r6
    d6de:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    d6e2:	492c      	ldr	r1, [pc, #176]	; (d794 <prefix_print+0x104>)
    d6e4:	f7ff ffc2 	bl	d66c <print_formatted>
    d6e8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    d6ea:	f1b8 0f00 	cmp.w	r8, #0
    d6ee:	d044      	beq.n	d77a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    d6f0:	2301      	movs	r3, #1
    d6f2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    d6f6:	4b28      	ldr	r3, [pc, #160]	; (d798 <prefix_print+0x108>)
    d6f8:	f017 0f10 	tst.w	r7, #16
    d6fc:	4f27      	ldr	r7, [pc, #156]	; (d79c <prefix_print+0x10c>)
    d6fe:	bf18      	it	ne
    d700:	461f      	movne	r7, r3
    d702:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    d706:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    d70a:	f7ff fd3d 	bl	d188 <log_source_name_get>
    d70e:	4639      	mov	r1, r7
    d710:	4602      	mov	r2, r0
    d712:	4630      	mov	r0, r6
    d714:	f7ff ffaa 	bl	d66c <print_formatted>
    d718:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    d71a:	4420      	add	r0, r4
    d71c:	b005      	add	sp, #20
    d71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    d722:	4a1f      	ldr	r2, [pc, #124]	; (d7a0 <prefix_print+0x110>)
    d724:	6811      	ldr	r1, [r2, #0]
    d726:	b331      	cbz	r1, d776 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    d728:	4a1e      	ldr	r2, [pc, #120]	; (d7a4 <prefix_print+0x114>)
    d72a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    d72e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    d730:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    d734:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    d738:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    d73c:	fbb4 f2fe 	udiv	r2, r4, lr
    d740:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    d744:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    d748:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d74c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    d750:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d754:	fb01 441b 	mls	r4, r1, fp, r4
    d758:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    d75c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d760:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    d764:	e9cd b101 	strd	fp, r1, [sp, #4]
    d768:	fb0a e113 	mls	r1, sl, r3, lr
    d76c:	9100      	str	r1, [sp, #0]
    d76e:	490e      	ldr	r1, [pc, #56]	; (d7a8 <prefix_print+0x118>)
    d770:	f7ff ff7c 	bl	d66c <print_formatted>
    d774:	e7a1      	b.n	d6ba <prefix_print+0x2a>
		length = 0;
    d776:	4608      	mov	r0, r1
    d778:	e79f      	b.n	d6ba <prefix_print+0x2a>
	total += print_formatted(log_output,
    d77a:	4f08      	ldr	r7, [pc, #32]	; (d79c <prefix_print+0x10c>)
    d77c:	e7c1      	b.n	d702 <prefix_print+0x72>
    d77e:	bf00      	nop
    d780:	000212b5 	.word	0x000212b5
    d784:	00020c18 	.word	0x00020c18
    d788:	000212a7 	.word	0x000212a7
    d78c:	000212da 	.word	0x000212da
    d790:	00020c2c 	.word	0x00020c2c
    d794:	000212dd 	.word	0x000212dd
    d798:	000212b1 	.word	0x000212b1
    d79c:	000212ac 	.word	0x000212ac
    d7a0:	200208c4 	.word	0x200208c4
    d7a4:	200208c8 	.word	0x200208c8
    d7a8:	000212be 	.word	0x000212be

0000d7ac <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    d7ac:	b538      	push	{r3, r4, r5, lr}
    d7ae:	460c      	mov	r4, r1
	if (color) {
    d7b0:	07e1      	lsls	r1, r4, #31
{
    d7b2:	4605      	mov	r5, r0
	if (color) {
    d7b4:	d503      	bpl.n	d7be <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    d7b6:	4a08      	ldr	r2, [pc, #32]	; (d7d8 <postfix_print+0x2c>)
    d7b8:	4908      	ldr	r1, [pc, #32]	; (d7dc <postfix_print+0x30>)
    d7ba:	f7ff ff57 	bl	d66c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d7be:	06e2      	lsls	r2, r4, #27
    d7c0:	d408      	bmi.n	d7d4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d7c2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    d7c4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    d7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    d7ca:	bf4c      	ite	mi
    d7cc:	4904      	ldrmi	r1, [pc, #16]	; (d7e0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    d7ce:	4905      	ldrpl	r1, [pc, #20]	; (d7e4 <postfix_print+0x38>)
    d7d0:	f7ff bf4c 	b.w	d66c <print_formatted>
}
    d7d4:	bd38      	pop	{r3, r4, r5, pc}
    d7d6:	bf00      	nop
    d7d8:	000212a7 	.word	0x000212a7
    d7dc:	000212da 	.word	0x000212da
    d7e0:	00021a9b 	.word	0x00021a9b
    d7e4:	00021a9a 	.word	0x00021a9a

0000d7e8 <hexdump_line_print>:
{
    d7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7ec:	461d      	mov	r5, r3
    d7ee:	9b08      	ldr	r3, [sp, #32]
    d7f0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d7f2:	06da      	lsls	r2, r3, #27
{
    d7f4:	4604      	mov	r4, r0
    d7f6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d7f8:	d405      	bmi.n	d806 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d7fa:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    d7fc:	bf4c      	ite	mi
    d7fe:	492a      	ldrmi	r1, [pc, #168]	; (d8a8 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    d800:	492a      	ldrpl	r1, [pc, #168]	; (d8ac <hexdump_line_print+0xc4>)
    d802:	f7ff ff33 	bl	d66c <print_formatted>
{
    d806:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    d80a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d8b4 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    d80e:	45a8      	cmp	r8, r5
    d810:	db2a      	blt.n	d868 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d812:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    d814:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d8b8 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    d818:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d8bc <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    d81c:	f8df a094 	ldr.w	sl, [pc, #148]	; d8b4 <hexdump_line_print+0xcc>
		if (i < length) {
    d820:	42bd      	cmp	r5, r7
    d822:	d22f      	bcs.n	d884 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    d824:	4649      	mov	r1, r9
    d826:	4620      	mov	r0, r4
    d828:	5d72      	ldrb	r2, [r6, r5]
    d82a:	f7ff ff1f 	bl	d66c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d82e:	3501      	adds	r5, #1
    d830:	2d10      	cmp	r5, #16
    d832:	d120      	bne.n	d876 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    d834:	4620      	mov	r0, r4
    d836:	491e      	ldr	r1, [pc, #120]	; (d8b0 <hexdump_line_print+0xc8>)
    d838:	f7ff ff18 	bl	d66c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d83c:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    d83e:	f8df 8074 	ldr.w	r8, [pc, #116]	; d8b4 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    d842:	f8df 907c 	ldr.w	r9, [pc, #124]	; d8c0 <hexdump_line_print+0xd8>
		if (i < length) {
    d846:	42af      	cmp	r7, r5
    d848:	d928      	bls.n	d89c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    d84a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    d84c:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    d84e:	f1a2 0320 	sub.w	r3, r2, #32
    d852:	2b5f      	cmp	r3, #95	; 0x5f
    d854:	bf28      	it	cs
    d856:	222e      	movcs	r2, #46	; 0x2e
    d858:	4620      	mov	r0, r4
    d85a:	f7ff ff07 	bl	d66c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d85e:	3501      	adds	r5, #1
    d860:	2d10      	cmp	r5, #16
    d862:	d114      	bne.n	d88e <hexdump_line_print+0xa6>
}
    d864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    d868:	4649      	mov	r1, r9
    d86a:	4620      	mov	r0, r4
    d86c:	f7ff fefe 	bl	d66c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    d870:	f108 0801 	add.w	r8, r8, #1
    d874:	e7cb      	b.n	d80e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    d876:	076a      	lsls	r2, r5, #29
    d878:	d1d2      	bne.n	d820 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    d87a:	4651      	mov	r1, sl
    d87c:	4620      	mov	r0, r4
    d87e:	f7ff fef5 	bl	d66c <print_formatted>
    d882:	e7cd      	b.n	d820 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    d884:	4641      	mov	r1, r8
    d886:	4620      	mov	r0, r4
    d888:	f7ff fef0 	bl	d66c <print_formatted>
    d88c:	e7cf      	b.n	d82e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    d88e:	076b      	lsls	r3, r5, #29
    d890:	d1d9      	bne.n	d846 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    d892:	4641      	mov	r1, r8
    d894:	4620      	mov	r0, r4
    d896:	f7ff fee9 	bl	d66c <print_formatted>
    d89a:	e7d4      	b.n	d846 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    d89c:	4641      	mov	r1, r8
    d89e:	4620      	mov	r0, r4
    d8a0:	f7ff fee4 	bl	d66c <print_formatted>
    d8a4:	e7db      	b.n	d85e <hexdump_line_print+0x76>
    d8a6:	bf00      	nop
    d8a8:	00021a9b 	.word	0x00021a9b
    d8ac:	00021a9a 	.word	0x00021a9a
    d8b0:	000212ed 	.word	0x000212ed
    d8b4:	000212eb 	.word	0x000212eb
    d8b8:	000212e9 	.word	0x000212e9
    d8bc:	000212e3 	.word	0x000212e3
    d8c0:	000212ef 	.word	0x000212ef

0000d8c4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    d8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    d8c8:	7a8b      	ldrb	r3, [r1, #10]
    d8ca:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d8cc:	f013 0807 	ands.w	r8, r3, #7
{
    d8d0:	4605      	mov	r5, r0
    d8d2:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d8d4:	7a0a      	ldrb	r2, [r1, #8]
    d8d6:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d8d8:	d021      	beq.n	d91e <log_output_msg_process+0x5a>
    d8da:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    d8dc:	8949      	ldrh	r1, [r1, #10]
    d8de:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d8e2:	f3c1 1189 	ubfx	r1, r1, #6, #10
    d8e6:	e9cd 8300 	strd	r8, r3, [sp]
    d8ea:	9102      	str	r1, [sp, #8]
    d8ec:	68f3      	ldr	r3, [r6, #12]
    d8ee:	4639      	mov	r1, r7
    d8f0:	f002 0201 	and.w	r2, r2, #1
    d8f4:	f7ff fecc 	bl	d690 <prefix_print>
    d8f8:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d8fa:	7a34      	ldrb	r4, [r6, #8]
    d8fc:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    d8fe:	f014 0401 	ands.w	r4, r4, #1
    d902:	d00e      	beq.n	d922 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    d904:	4629      	mov	r1, r5
    d906:	4630      	mov	r0, r6
    d908:	f00e fe8d 	bl	1c626 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    d90c:	f1b8 0f00 	cmp.w	r8, #0
    d910:	d02b      	beq.n	d96a <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    d912:	4642      	mov	r2, r8
    d914:	4639      	mov	r1, r7
    d916:	4628      	mov	r0, r5
    d918:	f7ff ff48 	bl	d7ac <postfix_print>
    d91c:	e025      	b.n	d96a <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d91e:	46c1      	mov	r9, r8
    d920:	e7eb      	b.n	d8fa <log_output_msg_process+0x36>
	} else if (raw_string) {
    d922:	f1b8 0f00 	cmp.w	r8, #0
    d926:	d126      	bne.n	d976 <log_output_msg_process+0xb2>
	size_t offset = 0;
    d928:	4627      	mov	r7, r4
		length = log_output->size;
    d92a:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d92c:	aa06      	add	r2, sp, #24
		length = log_output->size;
    d92e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d930:	4630      	mov	r0, r6
    d932:	463b      	mov	r3, r7
    d934:	68a9      	ldr	r1, [r5, #8]
    d936:	f00e fe62 	bl	1c5fe <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    d93a:	9a06      	ldr	r2, [sp, #24]
    d93c:	686b      	ldr	r3, [r5, #4]
    d93e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    d940:	b13a      	cbz	r2, d952 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    d942:	68ab      	ldr	r3, [r5, #8]
    d944:	4413      	add	r3, r2
    d946:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    d94a:	f1a4 030a 	sub.w	r3, r4, #10
    d94e:	425c      	negs	r4, r3
    d950:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    d952:	4628      	mov	r0, r5
    d954:	f00e ffc4 	bl	1c8e0 <log_output_flush>
		offset += length;
    d958:	9b06      	ldr	r3, [sp, #24]
    d95a:	441f      	add	r7, r3
	} while (length > 0);
    d95c:	2b00      	cmp	r3, #0
    d95e:	d1e4      	bne.n	d92a <log_output_msg_process+0x66>
	if (eol) {
    d960:	b11c      	cbz	r4, d96a <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    d962:	4628      	mov	r0, r5
    d964:	4913      	ldr	r1, [pc, #76]	; (d9b4 <log_output_msg_process+0xf0>)
    d966:	f7ff fe81 	bl	d66c <print_formatted>
	}

	log_output_flush(log_output);
    d96a:	4628      	mov	r0, r5
    d96c:	f00e ffb8 	bl	1c8e0 <log_output_flush>
}
    d970:	b00a      	add	sp, #40	; 0x28
    d972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    d976:	4630      	mov	r0, r6
    d978:	f00e fdeb 	bl	1c552 <log_msg_str_get>
    d97c:	490e      	ldr	r1, [pc, #56]	; (d9b8 <log_output_msg_process+0xf4>)
    d97e:	4602      	mov	r2, r0
    d980:	4628      	mov	r0, r5
    d982:	f7ff fe73 	bl	d66c <print_formatted>
		length = sizeof(buf);
    d986:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d98a:	aa05      	add	r2, sp, #20
    d98c:	4623      	mov	r3, r4
    d98e:	4630      	mov	r0, r6
    d990:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    d992:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d996:	f00e fe32 	bl	1c5fe <log_msg_hexdump_data_get>
		if (length) {
    d99a:	9a05      	ldr	r2, [sp, #20]
    d99c:	2a00      	cmp	r2, #0
    d99e:	d0b8      	beq.n	d912 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    d9a0:	464b      	mov	r3, r9
    d9a2:	4628      	mov	r0, r5
    d9a4:	9700      	str	r7, [sp, #0]
    d9a6:	a906      	add	r1, sp, #24
    d9a8:	f7ff ff1e 	bl	d7e8 <hexdump_line_print>
			offset += length;
    d9ac:	9b05      	ldr	r3, [sp, #20]
    d9ae:	441c      	add	r4, r3
		length = sizeof(buf);
    d9b0:	e7eb      	b.n	d98a <log_output_msg_process+0xc6>
    d9b2:	bf00      	nop
    d9b4:	000212f2 	.word	0x000212f2
    d9b8:	000212da 	.word	0x000212da

0000d9bc <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    d9bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    d9be:	e9d0 4300 	ldrd	r4, r3, [r0]
    d9c2:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    d9c4:	f242 730f 	movw	r3, #9999	; 0x270f
    d9c8:	428b      	cmp	r3, r1
    d9ca:	bf28      	it	cs
    d9cc:	460b      	movcs	r3, r1
    d9ce:	4668      	mov	r0, sp
    d9d0:	2105      	movs	r1, #5
    d9d2:	4a0c      	ldr	r2, [pc, #48]	; (da04 <log_output_dropped_process+0x48>)
    d9d4:	f00e f9f2 	bl	1bdbc <snprintk>
    d9d8:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    d9da:	462b      	mov	r3, r5
    d9dc:	4620      	mov	r0, r4
    d9de:	220b      	movs	r2, #11
    d9e0:	4909      	ldr	r1, [pc, #36]	; (da08 <log_output_dropped_process+0x4c>)
    d9e2:	f00e fe13 	bl	1c60c <buffer_write>
	buffer_write(outf, buf, len, dev);
    d9e6:	462b      	mov	r3, r5
    d9e8:	4632      	mov	r2, r6
    d9ea:	4669      	mov	r1, sp
    d9ec:	4620      	mov	r0, r4
    d9ee:	f00e fe0d 	bl	1c60c <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    d9f2:	462b      	mov	r3, r5
    d9f4:	221b      	movs	r2, #27
    d9f6:	4620      	mov	r0, r4
    d9f8:	4904      	ldr	r1, [pc, #16]	; (da0c <log_output_dropped_process+0x50>)
    d9fa:	f00e fe07 	bl	1c60c <buffer_write>
}
    d9fe:	b002      	add	sp, #8
    da00:	bd70      	pop	{r4, r5, r6, pc}
    da02:	bf00      	nop
    da04:	00021ad8 	.word	0x00021ad8
    da08:	00021330 	.word	0x00021330
    da0c:	00021314 	.word	0x00021314

0000da10 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    da10:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    da12:	2100      	movs	r1, #0
	timestamp_div = 1U;
    da14:	4a07      	ldr	r2, [pc, #28]	; (da34 <log_output_timestamp_freq_set+0x24>)
{
    da16:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    da18:	4c07      	ldr	r4, [pc, #28]	; (da38 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    da1a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    da1c:	42a0      	cmp	r0, r4
    da1e:	d804      	bhi.n	da2a <log_output_timestamp_freq_set+0x1a>
    da20:	b101      	cbz	r1, da24 <log_output_timestamp_freq_set+0x14>
    da22:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    da24:	4b05      	ldr	r3, [pc, #20]	; (da3c <log_output_timestamp_freq_set+0x2c>)
    da26:	6018      	str	r0, [r3, #0]
}
    da28:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    da2a:	2101      	movs	r1, #1
		frequency /= 2U;
    da2c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    da2e:	005b      	lsls	r3, r3, #1
    da30:	e7f4      	b.n	da1c <log_output_timestamp_freq_set+0xc>
    da32:	bf00      	nop
    da34:	200208c8 	.word	0x200208c8
    da38:	000f4240 	.word	0x000f4240
    da3c:	200208c4 	.word	0x200208c4

0000da40 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    da40:	4801      	ldr	r0, [pc, #4]	; (da48 <panic+0x8>)
    da42:	f00e bf4d 	b.w	1c8e0 <log_output_flush>
    da46:	bf00      	nop
    da48:	00020c58 	.word	0x00020c58

0000da4c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    da4c:	4801      	ldr	r0, [pc, #4]	; (da54 <dropped+0x8>)
    da4e:	f7ff bfb5 	b.w	d9bc <log_output_dropped_process>
    da52:	bf00      	nop
    da54:	00020c58 	.word	0x00020c58

0000da58 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    da58:	b508      	push	{r3, lr}
    da5a:	4803      	ldr	r0, [pc, #12]	; (da68 <log_backend_uart_init+0x10>)
    da5c:	f00c ffc0 	bl	1a9e0 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    da60:	4b02      	ldr	r3, [pc, #8]	; (da6c <log_backend_uart_init+0x14>)
    da62:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    da64:	bd08      	pop	{r3, pc}
    da66:	bf00      	nop
    da68:	0002133c 	.word	0x0002133c
    da6c:	200208d4 	.word	0x200208d4

0000da70 <put>:
{
    da70:	b510      	push	{r4, lr}
    da72:	460c      	mov	r4, r1
	log_msg_get(msg);
    da74:	4608      	mov	r0, r1
    da76:	f00e fd32 	bl	1c4de <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    da7a:	4621      	mov	r1, r4
    da7c:	4804      	ldr	r0, [pc, #16]	; (da90 <put+0x20>)
    da7e:	220f      	movs	r2, #15
    da80:	f7ff ff20 	bl	d8c4 <log_output_msg_process>
	log_msg_put(msg);
    da84:	4620      	mov	r0, r4
}
    da86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da8a:	f00e bd53 	b.w	1c534 <log_msg_put>
    da8e:	bf00      	nop
    da90:	00020c58 	.word	0x00020c58

0000da94 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
    da94:	4b01      	ldr	r3, [pc, #4]	; (da9c <socket_offload_dns_register+0x8>)
    da96:	6018      	str	r0, [r3, #0]
}
    da98:	4770      	bx	lr
    da9a:	bf00      	nop
    da9c:	200208e0 	.word	0x200208e0

0000daa0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    daa0:	b508      	push	{r3, lr}
    daa2:	4806      	ldr	r0, [pc, #24]	; (dabc <uart_console_init+0x1c>)
    daa4:	f00c ff9c 	bl	1a9e0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    daa8:	4b05      	ldr	r3, [pc, #20]	; (dac0 <uart_console_init+0x20>)
    daaa:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    daac:	4805      	ldr	r0, [pc, #20]	; (dac4 <uart_console_init+0x24>)
    daae:	f001 fcdb 	bl	f468 <__stdout_hook_install>
	__printk_hook_install(console_out);
    dab2:	4804      	ldr	r0, [pc, #16]	; (dac4 <uart_console_init+0x24>)
    dab4:	f7ff f90c 	bl	ccd0 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    dab8:	2000      	movs	r0, #0
    daba:	bd08      	pop	{r3, pc}
    dabc:	0002133c 	.word	0x0002133c
    dac0:	200208e4 	.word	0x200208e4
    dac4:	0000dac9 	.word	0x0000dac9

0000dac8 <console_out>:
	if ('\n' == c) {
    dac8:	280a      	cmp	r0, #10
{
    daca:	b538      	push	{r3, r4, r5, lr}
    dacc:	4604      	mov	r4, r0
    dace:	4d07      	ldr	r5, [pc, #28]	; (daec <console_out+0x24>)
	if ('\n' == c) {
    dad0:	d104      	bne.n	dadc <console_out+0x14>
    dad2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    dad4:	6883      	ldr	r3, [r0, #8]
    dad6:	210d      	movs	r1, #13
    dad8:	685b      	ldr	r3, [r3, #4]
    dada:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    dadc:	6828      	ldr	r0, [r5, #0]
    dade:	6883      	ldr	r3, [r0, #8]
    dae0:	b2e1      	uxtb	r1, r4
    dae2:	685b      	ldr	r3, [r3, #4]
    dae4:	4798      	blx	r3
}
    dae6:	4620      	mov	r0, r4
    dae8:	bd38      	pop	{r3, r4, r5, pc}
    daea:	bf00      	nop
    daec:	200208e4 	.word	0x200208e4

0000daf0 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    daf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
    daf4:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    daf6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
    dafa:	b2cf      	uxtb	r7, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
    dafc:	b14a      	cbz	r2, db12 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    dafe:	230c      	movs	r3, #12
    db00:	437b      	muls	r3, r7
    db02:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    db06:	429a      	cmp	r2, r3
    db08:	d053      	beq.n	dbb2 <clock_async_start+0xc2>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    db0a:	b113      	cbz	r3, db12 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    db0c:	681b      	ldr	r3, [r3, #0]
	} while (item);
    db0e:	2b00      	cmp	r3, #0
    db10:	d1f9      	bne.n	db06 <clock_async_start+0x16>
	__asm__ volatile(
    db12:	f04f 0320 	mov.w	r3, #32
    db16:	f3ef 8c11 	mrs	ip, BASEPRI
    db1a:	f383 8811 	msr	BASEPRI, r3
    db1e:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    db22:	250c      	movs	r5, #12
    db24:	437d      	muls	r5, r7
    db26:	eb0e 0305 	add.w	r3, lr, r5
    db2a:	7a1c      	ldrb	r4, [r3, #8]
    db2c:	3401      	adds	r4, #1
    db2e:	b2e4      	uxtb	r4, r4
    db30:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    db32:	f38c 8811 	msr	BASEPRI, ip
    db36:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
    db3a:	b352      	cbz	r2, db92 <clock_async_start+0xa2>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    db3c:	f04f 0803 	mov.w	r8, #3
    db40:	f8df c078 	ldr.w	ip, [pc, #120]	; dbbc <clock_async_start+0xcc>
    db44:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    db48:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    db4c:	f1bc 0f00 	cmp.w	ip, #0
    db50:	d115      	bne.n	db7e <clock_async_start+0x8e>
	__asm__ volatile(
    db52:	f04f 0820 	mov.w	r8, #32
    db56:	f3ef 8911 	mrs	r9, BASEPRI
    db5a:	f388 8811 	msr	BASEPRI, r8
    db5e:	f3bf 8f6f 	isb	sy
	parent->next = child;
    db62:	f8c2 c000 	str.w	ip, [r2]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    db66:	f8d3 8004 	ldr.w	r8, [r3, #4]
    db6a:	f1b8 0f00 	cmp.w	r8, #0
    db6e:	d11c      	bne.n	dbaa <clock_async_start+0xba>
	list->tail = node;
    db70:	605a      	str	r2, [r3, #4]
	list->head = node;
    db72:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    db76:	f389 8811 	msr	BASEPRI, r9
    db7a:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    db7e:	2503      	movs	r5, #3
    db80:	4b0e      	ldr	r3, [pc, #56]	; (dbbc <clock_async_start+0xcc>)
    db82:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    db86:	f1bc 0f00 	cmp.w	ip, #0
    db8a:	d002      	beq.n	db92 <clock_async_start+0xa2>
			data->cb(dev, subsys, data->user_data);
    db8c:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    db90:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    db92:	2c01      	cmp	r4, #1
    db94:	d107      	bne.n	dba6 <clock_async_start+0xb6>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    db96:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db9a:	78b3      	ldrb	r3, [r6, #2]
    db9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    dba0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    dba4:	601c      	str	r4, [r3, #0]
	}

	return 0;
    dba6:	2000      	movs	r0, #0
    dba8:	e005      	b.n	dbb6 <clock_async_start+0xc6>
	parent->next = child;
    dbaa:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    dbae:	605a      	str	r2, [r3, #4]
}
    dbb0:	e7e1      	b.n	db76 <clock_async_start+0x86>
		return -EBUSY;
    dbb2:	f06f 000f 	mvn.w	r0, #15
}
    dbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dbba:	bf00      	nop
    dbbc:	40005000 	.word	0x40005000

0000dbc0 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    dbc0:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    dbc2:	2200      	movs	r2, #0
{
    dbc4:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    dbc6:	2101      	movs	r1, #1
    dbc8:	2005      	movs	r0, #5
    dbca:	f000 f9e5 	bl	df98 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
    dbce:	2005      	movs	r0, #5
    dbd0:	f000 f9d2 	bl	df78 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    dbd4:	2202      	movs	r2, #2
    dbd6:	4b07      	ldr	r3, [pc, #28]	; (dbf4 <clk_init+0x34>)
	list->head = NULL;
    dbd8:	2000      	movs	r0, #0
    dbda:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    dbde:	2203      	movs	r2, #3
    dbe0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    dbe4:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    dbe6:	e9c3 0000 	strd	r0, r0, [r3]
    dbea:	68e3      	ldr	r3, [r4, #12]
    dbec:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    dbf0:	bd10      	pop	{r4, pc}
    dbf2:	bf00      	nop
    dbf4:	40005000 	.word	0x40005000

0000dbf8 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    dbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    dbfa:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    dbfc:	4f11      	ldr	r7, [pc, #68]	; (dc44 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
    dbfe:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    dc00:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
    dc02:	fb04 3400 	mla	r4, r4, r0, r3
    dc06:	2301      	movs	r3, #1
    dc08:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    dc0a:	f04f 0320 	mov.w	r3, #32
    dc0e:	f3ef 8111 	mrs	r1, BASEPRI
    dc12:	f383 8811 	msr	BASEPRI, r3
    dc16:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    dc1a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    dc1c:	b12b      	cbz	r3, dc2a <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    dc1e:	6866      	ldr	r6, [r4, #4]
    dc20:	681a      	ldr	r2, [r3, #0]
    dc22:	42b3      	cmp	r3, r6
	list->head = node;
    dc24:	6022      	str	r2, [r4, #0]
	list->tail = node;
    dc26:	bf08      	it	eq
    dc28:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    dc2a:	f381 8811 	msr	BASEPRI, r1
    dc2e:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    dc32:	b903      	cbnz	r3, dc36 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    dc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    dc36:	4629      	mov	r1, r5
    dc38:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
    dc3c:	4638      	mov	r0, r7
    dc3e:	47b0      	blx	r6
    dc40:	e7e3      	b.n	dc0a <clkstarted_handle.constprop.0+0x12>
    dc42:	bf00      	nop
    dc44:	200205b4 	.word	0x200205b4

0000dc48 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    dc48:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    dc4a:	4b10      	ldr	r3, [pc, #64]	; (dc8c <nrf_power_clock_isr+0x44>)
    dc4c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    dc4e:	b162      	cbz	r2, dc6a <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    dc50:	4a0f      	ldr	r2, [pc, #60]	; (dc90 <nrf_power_clock_isr+0x48>)
    dc52:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    dc56:	07d1      	lsls	r1, r2, #31
    dc58:	d507      	bpl.n	dc6a <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc5a:	2200      	movs	r2, #0
    dc5c:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    dc5e:	4b0d      	ldr	r3, [pc, #52]	; (dc94 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    dc60:	68db      	ldr	r3, [r3, #12]
    dc62:	7a58      	ldrb	r0, [r3, #9]
    dc64:	b908      	cbnz	r0, dc6a <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    dc66:	f7ff ffc7 	bl	dbf8 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    dc6a:	4b0b      	ldr	r3, [pc, #44]	; (dc98 <nrf_power_clock_isr+0x50>)
    dc6c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    dc6e:	b15a      	cbz	r2, dc88 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    dc70:	4a07      	ldr	r2, [pc, #28]	; (dc90 <nrf_power_clock_isr+0x48>)
    dc72:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    dc76:	0792      	lsls	r2, r2, #30
    dc78:	d506      	bpl.n	dc88 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc7a:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    dc7c:	2001      	movs	r0, #1
    dc7e:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    dc80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    dc84:	f7ff bfb8 	b.w	dbf8 <clkstarted_handle.constprop.0>
}
    dc88:	bd08      	pop	{r3, pc}
    dc8a:	bf00      	nop
    dc8c:	40005100 	.word	0x40005100
    dc90:	40005000 	.word	0x40005000
    dc94:	200205b4 	.word	0x200205b4
    dc98:	40005104 	.word	0x40005104

0000dc9c <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    dc9c:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    dc9e:	4b08      	ldr	r3, [pc, #32]	; (dcc0 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    dca0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    dca4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    dca8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    dcac:	4290      	cmp	r0, r2
    dcae:	d100      	bne.n	dcb2 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    dcb0:	4770      	bx	lr
    dcb2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    dcb6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    dcb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    dcbc:	e7f2      	b.n	dca4 <handle_next_tick_case+0x8>
    dcbe:	bf00      	nop
    dcc0:	40015000 	.word	0x40015000

0000dcc4 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dcc4:	2200      	movs	r2, #0
    dcc6:	4b06      	ldr	r3, [pc, #24]	; (dce0 <rtc1_nrf_isr+0x1c>)
    dcc8:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    dcca:	4a06      	ldr	r2, [pc, #24]	; (dce4 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
    dccc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    dcd0:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    dcd2:	1ac0      	subs	r0, r0, r3
    dcd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    dcd8:	4403      	add	r3, r0
    dcda:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    dcdc:	f00d bf34 	b.w	1bb48 <z_clock_announce>
    dce0:	40015140 	.word	0x40015140
    dce4:	20020900 	.word	0x20020900

0000dce8 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    dce8:	b538      	push	{r3, r4, r5, lr}
    dcea:	4814      	ldr	r0, [pc, #80]	; (dd3c <z_clock_driver_init+0x54>)
    dcec:	f00c fe78 	bl	1a9e0 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    dcf0:	b300      	cbz	r0, dd34 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    dcf2:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    dcf4:	2400      	movs	r4, #0
    dcf6:	2101      	movs	r1, #1
    dcf8:	681b      	ldr	r3, [r3, #0]
    dcfa:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dcfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    dd00:	4d0f      	ldr	r5, [pc, #60]	; (dd40 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dd02:	4b10      	ldr	r3, [pc, #64]	; (dd44 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
    dd04:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dd08:	601c      	str	r4, [r3, #0]
    dd0a:	4b0f      	ldr	r3, [pc, #60]	; (dd48 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    dd0c:	2101      	movs	r1, #1
    dd0e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    dd12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    dd16:	4622      	mov	r2, r4
    dd18:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    dd1c:	2015      	movs	r0, #21
    dd1e:	f000 f93b 	bl	df98 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    dd22:	2015      	movs	r0, #21
    dd24:	f000 f928 	bl	df78 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    dd28:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    dd2a:	4620      	mov	r0, r4
    dd2c:	4a07      	ldr	r2, [pc, #28]	; (dd4c <z_clock_driver_init+0x64>)
    dd2e:	6013      	str	r3, [r2, #0]
    dd30:	602b      	str	r3, [r5, #0]
}
    dd32:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    dd34:	f04f 30ff 	mov.w	r0, #4294967295
    dd38:	e7fb      	b.n	dd32 <z_clock_driver_init+0x4a>
    dd3a:	bf00      	nop
    dd3c:	0002135a 	.word	0x0002135a
    dd40:	40015000 	.word	0x40015000
    dd44:	40015140 	.word	0x40015140
    dd48:	e000e100 	.word	0xe000e100
    dd4c:	40015008 	.word	0x40015008

0000dd50 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    dd52:	4b2c      	ldr	r3, [pc, #176]	; (de04 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    dd54:	4c2c      	ldr	r4, [pc, #176]	; (de08 <z_clock_set_timeout+0xb8>)
    dd56:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    dd5a:	4b2c      	ldr	r3, [pc, #176]	; (de0c <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    dd5c:	f1b0 3fff 	cmp.w	r0, #4294967295
    dd60:	bf08      	it	eq
    dd62:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
    dd64:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    dd66:	1a52      	subs	r2, r2, r1
    dd68:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    dd6c:	0212      	lsls	r2, r2, #8
    dd6e:	d436      	bmi.n	ddde <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    dd70:	3801      	subs	r0, #1
    dd72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    dd76:	42a0      	cmp	r0, r4
    dd78:	bfa8      	it	ge
    dd7a:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    dd7c:	3301      	adds	r3, #1
    dd7e:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    dd80:	42a0      	cmp	r0, r4
    dd82:	bf94      	ite	ls
    dd84:	180c      	addls	r4, r1, r0
    dd86:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    dd88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dd8c:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    dd8e:	4b1d      	ldr	r3, [pc, #116]	; (de04 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dd90:	4e1f      	ldr	r6, [pc, #124]	; (de10 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
    dd92:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
    dd96:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
    dd9a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    dd9e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
    dda2:	1a52      	subs	r2, r2, r1
    dda4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    dda8:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ddaa:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
    ddac:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    ddb0:	461d      	mov	r5, r3
    ddb2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    ddb6:	d103      	bne.n	ddc0 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    ddb8:	200f      	movs	r0, #15
    ddba:	f012 fc1c 	bl	205f6 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ddbe:	6037      	str	r7, [r6, #0]
    ddc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    ddc4:	4b13      	ldr	r3, [pc, #76]	; (de14 <z_clock_set_timeout+0xc4>)
    ddc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    ddca:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    ddce:	1a23      	subs	r3, r4, r0
    ddd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    ddd4:	2b01      	cmp	r3, #1
    ddd6:	d104      	bne.n	dde2 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
    ddd8:	f7ff ff60 	bl	dc9c <handle_next_tick_case>
    dddc:	e00b      	b.n	ddf6 <z_clock_set_timeout+0xa6>
		ticks = 0;
    ddde:	2000      	movs	r0, #0
    dde0:	e7cc      	b.n	dd7c <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    dde2:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    dde6:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    ddea:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    ddee:	1a24      	subs	r4, r4, r0
    ddf0:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
    ddf2:	0223      	lsls	r3, r4, #8
    ddf4:	d4f0      	bmi.n	ddd8 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    ddf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ddfa:	4b02      	ldr	r3, [pc, #8]	; (de04 <z_clock_set_timeout+0xb4>)
    ddfc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    de00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de02:	bf00      	nop
    de04:	40015000 	.word	0x40015000
    de08:	007fffff 	.word	0x007fffff
    de0c:	20020900 	.word	0x20020900
    de10:	40015140 	.word	0x40015140
    de14:	e000e100 	.word	0xe000e100

0000de18 <z_clock_elapsed>:
	__asm__ volatile(
    de18:	f04f 0220 	mov.w	r2, #32
    de1c:	f3ef 8311 	mrs	r3, BASEPRI
    de20:	f382 8811 	msr	BASEPRI, r2
    de24:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    de28:	4a06      	ldr	r2, [pc, #24]	; (de44 <z_clock_elapsed+0x2c>)
    de2a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    de2e:	4a06      	ldr	r2, [pc, #24]	; (de48 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    de30:	6812      	ldr	r2, [r2, #0]
    de32:	1a80      	subs	r0, r0, r2
    de34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    de38:	f383 8811 	msr	BASEPRI, r3
    de3c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    de40:	4770      	bx	lr
    de42:	bf00      	nop
    de44:	40015000 	.word	0x40015000
    de48:	20020900 	.word	0x20020900

0000de4c <z_timer_cycle_get_32>:
	__asm__ volatile(
    de4c:	f04f 0320 	mov.w	r3, #32
    de50:	f3ef 8211 	mrs	r2, BASEPRI
    de54:	f383 8811 	msr	BASEPRI, r3
    de58:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    de5c:	4906      	ldr	r1, [pc, #24]	; (de78 <z_timer_cycle_get_32+0x2c>)
    de5e:	4b07      	ldr	r3, [pc, #28]	; (de7c <z_timer_cycle_get_32+0x30>)
    de60:	6808      	ldr	r0, [r1, #0]
    de62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    de66:	f382 8811 	msr	BASEPRI, r2
    de6a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    de6e:	1a1b      	subs	r3, r3, r0
    de70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    de74:	4418      	add	r0, r3
    de76:	4770      	bx	lr
    de78:	20020900 	.word	0x20020900
    de7c:	40015000 	.word	0x40015000

0000de80 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    de80:	4a09      	ldr	r2, [pc, #36]	; (dea8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    de82:	490a      	ldr	r1, [pc, #40]	; (deac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    de84:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    de86:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    de88:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
    de8a:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    de8c:	4908      	ldr	r1, [pc, #32]	; (deb0 <arch_swap+0x30>)
    de8e:	684b      	ldr	r3, [r1, #4]
    de90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    de94:	604b      	str	r3, [r1, #4]
    de96:	2300      	movs	r3, #0
    de98:	f383 8811 	msr	BASEPRI, r3
    de9c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    dea0:	6893      	ldr	r3, [r2, #8]
}
    dea2:	6f18      	ldr	r0, [r3, #112]	; 0x70
    dea4:	4770      	bx	lr
    dea6:	bf00      	nop
    dea8:	20021b28 	.word	0x20021b28
    deac:	000210f4 	.word	0x000210f4
    deb0:	e000ed00 	.word	0xe000ed00

0000deb4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    deb4:	4926      	ldr	r1, [pc, #152]	; (df50 <in_fp_endif+0x20>)
    ldr r2, [r1, #_kernel_offset_to_current]
    deb6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    deb8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    debc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    debe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    dec2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    dec6:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    deca:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    dece:	d004      	beq.n	deda <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    ded0:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    ded4:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    ded8:	e007      	b.n	deea <out_fp_endif>

0000deda <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    deda:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vstmia r0, {s16-s31}
    dede:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    dee2:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    dee6:	f050 0004 	orrs.w	r0, r0, #4

0000deea <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    deea:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    deee:	2020      	movs	r0, #32
    msr BASEPRI, r0
    def0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    def4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    def8:	4f16      	ldr	r7, [pc, #88]	; (df54 <in_fp_endif+0x24>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    defa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    defe:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    df00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    df02:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    df04:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    df06:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    df08:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    df0a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    df0e:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    df12:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    df16:	d105      	bne.n	df24 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    df18:	2300      	movs	r3, #0
    vmsr fpscr, r3
    df1a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    df1e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    df22:	e005      	b.n	df30 <in_fp_endif>

0000df24 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    df24:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    df28:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vldmia r0, {s16-s31}
    df2c:	ec90 8a10 	vldmia	r0, {s16-s31}

0000df30 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    df30:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    df34:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    df38:	f383 8814 	msr	CONTROL, r3
    isb
    df3c:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    df40:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    df44:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    df48:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    df4c:	4770      	bx	lr
    df4e:	0000      	.short	0x0000
    ldr r1, =_kernel
    df50:	20021b28 	.word	0x20021b28
    ldr v4, =_SCS_ICSR
    df54:	e000ed04 	.word	0xe000ed04

0000df58 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    df58:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    df5c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    df5e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    df62:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    df66:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    df68:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    df6c:	2902      	cmp	r1, #2
    beq _oops
    df6e:	d0ff      	beq.n	df70 <_oops>

0000df70 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    df70:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    df72:	f00e fd2b 	bl	1c9cc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    df76:	bd01      	pop	{r0, pc}

0000df78 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    df78:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    df7a:	2b00      	cmp	r3, #0
    df7c:	db08      	blt.n	df90 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    df7e:	2201      	movs	r2, #1
    df80:	f000 001f 	and.w	r0, r0, #31
    df84:	fa02 f000 	lsl.w	r0, r2, r0
    df88:	4a02      	ldr	r2, [pc, #8]	; (df94 <arch_irq_enable+0x1c>)
    df8a:	095b      	lsrs	r3, r3, #5
    df8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    df90:	4770      	bx	lr
    df92:	bf00      	nop
    df94:	e000e100 	.word	0xe000e100

0000df98 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    df98:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    df9a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    df9c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dfa0:	bfac      	ite	ge
    dfa2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dfa6:	4b06      	ldrlt	r3, [pc, #24]	; (dfc0 <z_arm_irq_priority_set+0x28>)
    dfa8:	ea4f 1141 	mov.w	r1, r1, lsl #5
    dfac:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dfae:	bfab      	itete	ge
    dfb0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dfb4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dfb8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dfbc:	5419      	strblt	r1, [r3, r0]
}
    dfbe:	4770      	bx	lr
    dfc0:	e000ed14 	.word	0xe000ed14

0000dfc4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    dfc4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    dfc6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    dfc8:	4b04      	ldr	r3, [pc, #16]	; (dfdc <_arch_isr_direct_pm+0x18>)
    dfca:	6a18      	ldr	r0, [r3, #32]
    dfcc:	b118      	cbz	r0, dfd6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    dfce:	2200      	movs	r2, #0
    dfd0:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    dfd2:	f012 f89c 	bl	2010e <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    dfd6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    dfd8:	bd08      	pop	{r3, pc}
    dfda:	bf00      	nop
    dfdc:	20021b28 	.word	0x20021b28

0000dfe0 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    dfe0:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    dfe4:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    dfe6:	3a20      	subs	r2, #32
    dfe8:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    dfec:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    dfee:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    dff0:	4908      	ldr	r1, [pc, #32]	; (e014 <arch_new_thread+0x34>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    dff2:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    dff4:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    dff6:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    dffa:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    dffc:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    dffe:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    e000:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    e002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    e006:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    e008:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    e00a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    e00c:	66c3      	str	r3, [r0, #108]	; 0x6c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
    e00e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    e012:	4770      	bx	lr
    e014:	0001bdd7 	.word	0x0001bdd7

0000e018 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e01a:	461d      	mov	r5, r3
    e01c:	4606      	mov	r6, r0
    e01e:	460c      	mov	r4, r1
    e020:	4617      	mov	r7, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    e022:	2300      	movs	r3, #0
    e024:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    e028:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    e02c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    e030:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    e034:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    e038:	f000 fb78 	bl	e72c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    e03c:	4b08      	ldr	r3, [pc, #32]	; (e060 <arch_switch_to_main_thread+0x48>)
	start_of_main_stack =
    e03e:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    e040:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
    e044:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    e046:	4628      	mov	r0, r5
    e048:	f384 8809 	msr	PSP, r4
    e04c:	2100      	movs	r1, #0
    e04e:	b663      	cpsie	if
    e050:	f381 8811 	msr	BASEPRI, r1
    e054:	f3bf 8f6f 	isb	sy
    e058:	2200      	movs	r2, #0
    e05a:	2300      	movs	r3, #0
    e05c:	f00d febb 	bl	1bdd6 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    e060:	20021b28 	.word	0x20021b28

0000e064 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    e064:	4901      	ldr	r1, [pc, #4]	; (e06c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    e066:	2210      	movs	r2, #16
	str	r2, [r1]
    e068:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    e06a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    e06c:	e000ed10 	.word	0xe000ed10

0000e070 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    e070:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    e072:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    e074:	f380 8811 	msr	BASEPRI, r0
	isb
    e078:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    e07c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    e080:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    e082:	b662      	cpsie	i
	isb
    e084:	f3bf 8f6f 	isb	sy

	bx	lr
    e088:	4770      	bx	lr
    e08a:	bf00      	nop

0000e08c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    e08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e090:	4606      	mov	r6, r0

	if (esf != NULL) {
    e092:	460d      	mov	r5, r1
{
    e094:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
    e096:	2900      	cmp	r1, #0
    e098:	d054      	beq.n	e144 <z_arm_fatal_error+0xb8>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    e09a:	4b2e      	ldr	r3, [pc, #184]	; (e154 <z_arm_fatal_error+0xc8>)
    e09c:	4c2e      	ldr	r4, [pc, #184]	; (e158 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    e09e:	482f      	ldr	r0, [pc, #188]	; (e15c <z_arm_fatal_error+0xd0>)
    e0a0:	1ae4      	subs	r4, r4, r3
    e0a2:	08e4      	lsrs	r4, r4, #3
    e0a4:	01a4      	lsls	r4, r4, #6
    e0a6:	f044 0401 	orr.w	r4, r4, #1
    e0aa:	f8ad 4000 	strh.w	r4, [sp]
    e0ae:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    e0b2:	6809      	ldr	r1, [r1, #0]
    e0b4:	f00e f996 	bl	1c3e4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    e0b8:	f8ad 4000 	strh.w	r4, [sp]
    e0bc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    e0c0:	68e9      	ldr	r1, [r5, #12]
    e0c2:	4827      	ldr	r0, [pc, #156]	; (e160 <z_arm_fatal_error+0xd4>)
    e0c4:	f00e f98e 	bl	1c3e4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    e0c8:	4622      	mov	r2, r4
    e0ca:	69e9      	ldr	r1, [r5, #28]
    e0cc:	4825      	ldr	r0, [pc, #148]	; (e164 <z_arm_fatal_error+0xd8>)
    e0ce:	f00e f959 	bl	1c384 <log_1>
	for (int i = 0; i < 16; i += 4) {
    e0d2:	46a8      	mov	r8, r5
    e0d4:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    e0d6:	f8df 9098 	ldr.w	r9, [pc, #152]	; e170 <z_arm_fatal_error+0xe4>
    e0da:	edd8 7a08 	vldr	s15, [r8, #32]
    e0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    e0e2:	edcd 7a03 	vstr	s15, [sp, #12]
    e0e6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
    e0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    e0ee:	edcd 7a05 	vstr	s15, [sp, #20]
    e0f2:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
    e0f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    e0fa:	edcd 7a07 	vstr	s15, [sp, #28]
    e0fe:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
    e102:	2208      	movs	r2, #8
    e104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    e108:	1c7b      	adds	r3, r7, #1
    e10a:	9304      	str	r3, [sp, #16]
    e10c:	1cbb      	adds	r3, r7, #2
    e10e:	9306      	str	r3, [sp, #24]
    e110:	1cfb      	adds	r3, r7, #3
    e112:	9702      	str	r7, [sp, #8]
    e114:	9308      	str	r3, [sp, #32]
    e116:	4648      	mov	r0, r9
    e118:	4623      	mov	r3, r4
    e11a:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
    e11e:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    e120:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    e124:	f00e f97d 	bl	1c422 <log_n>
	for (int i = 0; i < 16; i += 4) {
    e128:	2f10      	cmp	r7, #16
    e12a:	f108 0810 	add.w	r8, r8, #16
    e12e:	d1d4      	bne.n	e0da <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    e130:	4622      	mov	r2, r4
    e132:	6e29      	ldr	r1, [r5, #96]	; 0x60
    e134:	480c      	ldr	r0, [pc, #48]	; (e168 <z_arm_fatal_error+0xdc>)
    e136:	f00e f925 	bl	1c384 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    e13a:	4622      	mov	r2, r4
    e13c:	69a9      	ldr	r1, [r5, #24]
    e13e:	480b      	ldr	r0, [pc, #44]	; (e16c <z_arm_fatal_error+0xe0>)
    e140:	f00e f920 	bl	1c384 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    e144:	4629      	mov	r1, r5
    e146:	4630      	mov	r0, r6
    e148:	f00c fc74 	bl	1aa34 <z_fatal_error>
}
    e14c:	b00b      	add	sp, #44	; 0x2c
    e14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e152:	bf00      	nop
    e154:	00020b54 	.word	0x00020b54
    e158:	00020b8c 	.word	0x00020b8c
    e15c:	00021384 	.word	0x00021384
    e160:	000213b3 	.word	0x000213b3
    e164:	000213e2 	.word	0x000213e2
    e168:	00021434 	.word	0x00021434
    e16c:	00021443 	.word	0x00021443
    e170:	000213f1 	.word	0x000213f1

0000e174 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    e174:	bf30      	wfi
    b z_SysNmiOnReset
    e176:	f7ff bffd 	b.w	e174 <z_SysNmiOnReset>
    e17a:	bf00      	nop

0000e17c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    e17c:	4a14      	ldr	r2, [pc, #80]	; (e1d0 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    e17e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    e180:	4b14      	ldr	r3, [pc, #80]	; (e1d4 <z_arm_prep_c+0x58>)
    e182:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    e186:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    e188:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e18c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    e190:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    e194:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    e198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    e19c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    e1a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    e1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    e1a8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    e1ac:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    e1b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e1b4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    e1b8:	2300      	movs	r3, #0
    e1ba:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    e1be:	f00c fcb7 	bl	1ab30 <z_bss_zero>
	z_data_copy();
    e1c2:	f00c fcbf 	bl	1ab44 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    e1c6:	f000 fa7f 	bl	e6c8 <z_arm_interrupt_init>
	z_cstart();
    e1ca:	f00c fcf9 	bl	1abc0 <z_cstart>
    e1ce:	bf00      	nop
    e1d0:	0000c000 	.word	0x0000c000
    e1d4:	e000ed00 	.word	0xe000ed00

0000e1d8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    e1d8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    e1da:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    e1dc:	4a0b      	ldr	r2, [pc, #44]	; (e20c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    e1de:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    e1e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    e1e2:	bf1e      	ittt	ne
	movne	r1, #0
    e1e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    e1e6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    e1e8:	f011 ff91 	blne	2010e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    e1ec:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    e1ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    e1f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    e1f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    e1fa:	4905      	ldr	r1, [pc, #20]	; (e210 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    e1fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    e1fe:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    e200:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    e202:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    e206:	4903      	ldr	r1, [pc, #12]	; (e214 <_isr_wrapper+0x3c>)
	bx r1
    e208:	4708      	bx	r1
    e20a:	0000      	.short	0x0000
	ldr r2, =_kernel
    e20c:	20021b28 	.word	0x20021b28
	ldr r1, =_sw_isr_table
    e210:	00020940 	.word	0x00020940
	ldr r1, =z_arm_int_exit
    e214:	0000e689 	.word	0x0000e689

0000e218 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    e218:	f00e f860 	bl	1c2dc <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e21c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    e21e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    e222:	4808      	ldr	r0, [pc, #32]	; (e244 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    e224:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    e228:	1840      	adds	r0, r0, r1
    msr PSP, r0
    e22a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    e22e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    e232:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    e234:	4308      	orrs	r0, r1
    msr CONTROL, r0
    e236:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    e23a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    e23e:	f7ff ff9d 	bl	e17c <z_arm_prep_c>
    e242:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    e244:	20023db8 	.word	0x20023db8

0000e248 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    e248:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    e24c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    e250:	4672      	mov	r2, lr

	push {r0, lr}
    e252:	b501      	push	{r0, lr}

	bl z_arm_fault
    e254:	f000 f93c 	bl	e4d0 <z_arm_fault>

	pop {r0, pc}
    e258:	bd01      	pop	{r0, pc}
    e25a:	bf00      	nop

0000e25c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    e25c:	b570      	push	{r4, r5, r6, lr}
    e25e:	4b27      	ldr	r3, [pc, #156]	; (e2fc <usage_fault.isra.0+0xa0>)
    e260:	4c27      	ldr	r4, [pc, #156]	; (e300 <usage_fault.isra.0+0xa4>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    e262:	4d28      	ldr	r5, [pc, #160]	; (e304 <usage_fault.isra.0+0xa8>)
    e264:	1ae4      	subs	r4, r4, r3
    e266:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    e268:	01a4      	lsls	r4, r4, #6
    e26a:	f044 0601 	orr.w	r6, r4, #1
    e26e:	4631      	mov	r1, r6
    e270:	4825      	ldr	r0, [pc, #148]	; (e308 <usage_fault.isra.0+0xac>)
    e272:	f00e f878 	bl	1c366 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    e276:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e278:	0192      	lsls	r2, r2, #6
    e27a:	d503      	bpl.n	e284 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    e27c:	4631      	mov	r1, r6
    e27e:	4823      	ldr	r0, [pc, #140]	; (e30c <usage_fault.isra.0+0xb0>)
    e280:	f00e f871 	bl	1c366 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    e284:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e286:	01db      	lsls	r3, r3, #7
    e288:	d504      	bpl.n	e294 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    e28a:	4821      	ldr	r0, [pc, #132]	; (e310 <usage_fault.isra.0+0xb4>)
    e28c:	f044 0101 	orr.w	r1, r4, #1
    e290:	f00e f869 	bl	1c366 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    e294:	4d1b      	ldr	r5, [pc, #108]	; (e304 <usage_fault.isra.0+0xa8>)
    e296:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e298:	02d6      	lsls	r6, r2, #11
    e29a:	d504      	bpl.n	e2a6 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    e29c:	481d      	ldr	r0, [pc, #116]	; (e314 <usage_fault.isra.0+0xb8>)
    e29e:	f044 0101 	orr.w	r1, r4, #1
    e2a2:	f00e f860 	bl	1c366 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    e2a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e2a8:	0318      	lsls	r0, r3, #12
    e2aa:	d504      	bpl.n	e2b6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  No coprocessor instructions");
    e2ac:	481a      	ldr	r0, [pc, #104]	; (e318 <usage_fault.isra.0+0xbc>)
    e2ae:	f044 0101 	orr.w	r1, r4, #1
    e2b2:	f00e f858 	bl	1c366 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    e2b6:	4d13      	ldr	r5, [pc, #76]	; (e304 <usage_fault.isra.0+0xa8>)
    e2b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e2ba:	0351      	lsls	r1, r2, #13
    e2bc:	d504      	bpl.n	e2c8 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    e2be:	4817      	ldr	r0, [pc, #92]	; (e31c <usage_fault.isra.0+0xc0>)
    e2c0:	f044 0101 	orr.w	r1, r4, #1
    e2c4:	f00e f84f 	bl	1c366 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    e2c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e2ca:	039a      	lsls	r2, r3, #14
    e2cc:	d504      	bpl.n	e2d8 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    e2ce:	4814      	ldr	r0, [pc, #80]	; (e320 <usage_fault.isra.0+0xc4>)
    e2d0:	f044 0101 	orr.w	r1, r4, #1
    e2d4:	f00e f847 	bl	1c366 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    e2d8:	4d0a      	ldr	r5, [pc, #40]	; (e304 <usage_fault.isra.0+0xa8>)
    e2da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e2dc:	03db      	lsls	r3, r3, #15
    e2de:	d504      	bpl.n	e2ea <usage_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    e2e0:	4810      	ldr	r0, [pc, #64]	; (e324 <usage_fault.isra.0+0xc8>)
    e2e2:	f044 0101 	orr.w	r1, r4, #1
    e2e6:	f00e f83e 	bl	1c366 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    e2ea:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    e2ec:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    e2ee:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    e2f2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    e2f6:	62ab      	str	r3, [r5, #40]	; 0x28
}
    e2f8:	bd70      	pop	{r4, r5, r6, pc}
    e2fa:	bf00      	nop
    e2fc:	00020b54 	.word	0x00020b54
    e300:	00020b8c 	.word	0x00020b8c
    e304:	e000ed00 	.word	0xe000ed00
    e308:	00021471 	.word	0x00021471
    e30c:	00021489 	.word	0x00021489
    e310:	0002149c 	.word	0x0002149c
    e314:	000214b6 	.word	0x000214b6
    e318:	000214e0 	.word	0x000214e0
    e31c:	000214fe 	.word	0x000214fe
    e320:	00021523 	.word	0x00021523
    e324:	0002153d 	.word	0x0002153d

0000e328 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    e328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e32c:	4b27      	ldr	r3, [pc, #156]	; (e3cc <mem_manage_fault.isra.0+0xa4>)
    e32e:	4c28      	ldr	r4, [pc, #160]	; (e3d0 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    e330:	4d28      	ldr	r5, [pc, #160]	; (e3d4 <mem_manage_fault.isra.0+0xac>)
    e332:	1ae4      	subs	r4, r4, r3
    e334:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    e336:	01a4      	lsls	r4, r4, #6
    e338:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    e33c:	4607      	mov	r7, r0
    e33e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    e340:	4825      	ldr	r0, [pc, #148]	; (e3d8 <mem_manage_fault.isra.0+0xb0>)
    e342:	4641      	mov	r1, r8
    e344:	f00e f80f 	bl	1c366 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    e348:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e34a:	06d1      	lsls	r1, r2, #27
    e34c:	d503      	bpl.n	e356 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    e34e:	4641      	mov	r1, r8
    e350:	4822      	ldr	r0, [pc, #136]	; (e3dc <mem_manage_fault.isra.0+0xb4>)
    e352:	f00e f808 	bl	1c366 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    e356:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e358:	071a      	lsls	r2, r3, #28
    e35a:	d504      	bpl.n	e366 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    e35c:	4820      	ldr	r0, [pc, #128]	; (e3e0 <mem_manage_fault.isra.0+0xb8>)
    e35e:	f044 0101 	orr.w	r1, r4, #1
    e362:	f00e f800 	bl	1c366 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    e366:	4d1b      	ldr	r5, [pc, #108]	; (e3d4 <mem_manage_fault.isra.0+0xac>)
    e368:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e36a:	079b      	lsls	r3, r3, #30
    e36c:	d512      	bpl.n	e394 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    e36e:	f044 0801 	orr.w	r8, r4, #1
    e372:	4641      	mov	r1, r8
    e374:	481b      	ldr	r0, [pc, #108]	; (e3e4 <mem_manage_fault.isra.0+0xbc>)
    e376:	f00d fff6 	bl	1c366 <log_0>
		mmfar = SCB->MMFAR;
    e37a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    e37c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e37e:	0618      	lsls	r0, r3, #24
    e380:	d508      	bpl.n	e394 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    e382:	4642      	mov	r2, r8
    e384:	4818      	ldr	r0, [pc, #96]	; (e3e8 <mem_manage_fault.isra.0+0xc0>)
    e386:	f00d fffd 	bl	1c384 <log_1>
			if (from_hard_fault) {
    e38a:	b11f      	cbz	r7, e394 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    e38c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e38e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e392:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    e394:	4d0f      	ldr	r5, [pc, #60]	; (e3d4 <mem_manage_fault.isra.0+0xac>)
    e396:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e398:	07d2      	lsls	r2, r2, #31
    e39a:	d504      	bpl.n	e3a6 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    e39c:	4813      	ldr	r0, [pc, #76]	; (e3ec <mem_manage_fault.isra.0+0xc4>)
    e39e:	f044 0101 	orr.w	r1, r4, #1
    e3a2:	f00d ffe0 	bl	1c366 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    e3a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e3a8:	069b      	lsls	r3, r3, #26
    e3aa:	d504      	bpl.n	e3b6 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    e3ac:	4810      	ldr	r0, [pc, #64]	; (e3f0 <mem_manage_fault.isra.0+0xc8>)
    e3ae:	f044 0101 	orr.w	r1, r4, #1
    e3b2:	f00d ffd8 	bl	1c366 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    e3b6:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    e3b8:	4b06      	ldr	r3, [pc, #24]	; (e3d4 <mem_manage_fault.isra.0+0xac>)
    e3ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    e3bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e3be:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    e3c2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e3c4:	7030      	strb	r0, [r6, #0]
}
    e3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3ca:	bf00      	nop
    e3cc:	00020b54 	.word	0x00020b54
    e3d0:	00020b8c 	.word	0x00020b8c
    e3d4:	e000ed00 	.word	0xe000ed00
    e3d8:	00021568 	.word	0x00021568
    e3dc:	0002157e 	.word	0x0002157e
    e3e0:	000215b1 	.word	0x000215b1
    e3e4:	000215c4 	.word	0x000215c4
    e3e8:	000215dc 	.word	0x000215dc
    e3ec:	000215f2 	.word	0x000215f2
    e3f0:	00021611 	.word	0x00021611

0000e3f4 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    e3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3f8:	4b2a      	ldr	r3, [pc, #168]	; (e4a4 <bus_fault.isra.0+0xb0>)
    e3fa:	4c2b      	ldr	r4, [pc, #172]	; (e4a8 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    e3fc:	4d2b      	ldr	r5, [pc, #172]	; (e4ac <bus_fault.isra.0+0xb8>)
    e3fe:	1ae4      	subs	r4, r4, r3
    e400:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    e402:	01a4      	lsls	r4, r4, #6
    e404:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    e408:	4607      	mov	r7, r0
    e40a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    e40c:	4828      	ldr	r0, [pc, #160]	; (e4b0 <bus_fault.isra.0+0xbc>)
    e40e:	4641      	mov	r1, r8
    e410:	f00d ffa9 	bl	1c366 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    e414:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e416:	04d1      	lsls	r1, r2, #19
    e418:	d503      	bpl.n	e422 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    e41a:	4641      	mov	r1, r8
    e41c:	4825      	ldr	r0, [pc, #148]	; (e4b4 <bus_fault.isra.0+0xc0>)
    e41e:	f00d ffa2 	bl	1c366 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    e422:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e424:	051a      	lsls	r2, r3, #20
    e426:	d504      	bpl.n	e432 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    e428:	4823      	ldr	r0, [pc, #140]	; (e4b8 <bus_fault.isra.0+0xc4>)
    e42a:	f044 0101 	orr.w	r1, r4, #1
    e42e:	f00d ff9a 	bl	1c366 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    e432:	4d1e      	ldr	r5, [pc, #120]	; (e4ac <bus_fault.isra.0+0xb8>)
    e434:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e436:	059b      	lsls	r3, r3, #22
    e438:	d512      	bpl.n	e460 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    e43a:	f044 0801 	orr.w	r8, r4, #1
    e43e:	4641      	mov	r1, r8
    e440:	481e      	ldr	r0, [pc, #120]	; (e4bc <bus_fault.isra.0+0xc8>)
    e442:	f00d ff90 	bl	1c366 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    e446:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    e448:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e44a:	0418      	lsls	r0, r3, #16
    e44c:	d508      	bpl.n	e460 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    e44e:	4642      	mov	r2, r8
    e450:	481b      	ldr	r0, [pc, #108]	; (e4c0 <bus_fault.isra.0+0xcc>)
    e452:	f00d ff97 	bl	1c384 <log_1>
			if (from_hard_fault) {
    e456:	b11f      	cbz	r7, e460 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    e458:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e45a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    e45e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    e460:	4d12      	ldr	r5, [pc, #72]	; (e4ac <bus_fault.isra.0+0xb8>)
    e462:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e464:	0559      	lsls	r1, r3, #21
    e466:	d504      	bpl.n	e472 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    e468:	4816      	ldr	r0, [pc, #88]	; (e4c4 <bus_fault.isra.0+0xd0>)
    e46a:	f044 0101 	orr.w	r1, r4, #1
    e46e:	f00d ff7a 	bl	1c366 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    e472:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e474:	05da      	lsls	r2, r3, #23
    e476:	d50d      	bpl.n	e494 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    e478:	4813      	ldr	r0, [pc, #76]	; (e4c8 <bus_fault.isra.0+0xd4>)
    e47a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    e47e:	f00d ff72 	bl	1c366 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    e482:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    e484:	4a09      	ldr	r2, [pc, #36]	; (e4ac <bus_fault.isra.0+0xb8>)
    e486:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e488:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    e48c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e48e:	7030      	strb	r0, [r6, #0]
}
    e490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    e494:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e496:	049b      	lsls	r3, r3, #18
    e498:	d5f3      	bpl.n	e482 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    e49a:	480c      	ldr	r0, [pc, #48]	; (e4cc <bus_fault.isra.0+0xd8>)
    e49c:	f044 0101 	orr.w	r1, r4, #1
    e4a0:	e7ed      	b.n	e47e <bus_fault.isra.0+0x8a>
    e4a2:	bf00      	nop
    e4a4:	00020b54 	.word	0x00020b54
    e4a8:	00020b8c 	.word	0x00020b8c
    e4ac:	e000ed00 	.word	0xe000ed00
    e4b0:	00021640 	.word	0x00021640
    e4b4:	00021656 	.word	0x00021656
    e4b8:	000215b1 	.word	0x000215b1
    e4bc:	00021667 	.word	0x00021667
    e4c0:	00021680 	.word	0x00021680
    e4c4:	00021695 	.word	0x00021695
    e4c8:	000216b0 	.word	0x000216b0
    e4cc:	00021611 	.word	0x00021611

0000e4d0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    e4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e4d4:	4b5a      	ldr	r3, [pc, #360]	; (e640 <z_arm_fault+0x170>)
{
    e4d6:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e4d8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    e4dc:	460f      	mov	r7, r1
    e4de:	4614      	mov	r4, r2
    e4e0:	2500      	movs	r5, #0
    e4e2:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e4e4:	f3c8 0608 	ubfx	r6, r8, #0, #9
    e4e8:	f385 8811 	msr	BASEPRI, r5
    e4ec:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e4f0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    e4f4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e4f8:	d123      	bne.n	e542 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e4fa:	07d0      	lsls	r0, r2, #31
    e4fc:	d421      	bmi.n	e542 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e4fe:	0651      	lsls	r1, r2, #25
    e500:	d403      	bmi.n	e50a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e502:	0722      	lsls	r2, r4, #28
    e504:	d40e      	bmi.n	e524 <z_arm_fault+0x54>
			*nested_exc = true;
    e506:	2501      	movs	r5, #1
    e508:	e00e      	b.n	e528 <z_arm_fault+0x58>
    e50a:	494e      	ldr	r1, [pc, #312]	; (e644 <z_arm_fault+0x174>)
    e50c:	4b4e      	ldr	r3, [pc, #312]	; (e648 <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
    e50e:	484f      	ldr	r0, [pc, #316]	; (e64c <z_arm_fault+0x17c>)
    e510:	1a5b      	subs	r3, r3, r1
    e512:	08db      	lsrs	r3, r3, #3
    e514:	019b      	lsls	r3, r3, #6
    e516:	f043 0101 	orr.w	r1, r3, #1
    e51a:	f00d ff24 	bl	1c366 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e51e:	f014 0504 	ands.w	r5, r4, #4
    e522:	d001      	beq.n	e528 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
    e524:	46b9      	mov	r9, r7
	*nested_exc = false;
    e526:	2500      	movs	r5, #0
	*recoverable = false;
    e528:	2300      	movs	r3, #0
    e52a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    e52e:	1ef3      	subs	r3, r6, #3
    e530:	2b09      	cmp	r3, #9
    e532:	d86c      	bhi.n	e60e <z_arm_fault+0x13e>
    e534:	e8df f003 	tbb	[pc, r3]
    e538:	3e5e5a07 	.word	0x3e5e5a07
    e53c:	6b6b6b6b 	.word	0x6b6b6b6b
    e540:	626b      	.short	0x626b
		return NULL;
    e542:	46a9      	mov	r9, r5
    e544:	e7f0      	b.n	e528 <z_arm_fault+0x58>
	*recoverable = false;
    e546:	f04f 0800 	mov.w	r8, #0
    e54a:	4b3e      	ldr	r3, [pc, #248]	; (e644 <z_arm_fault+0x174>)
    e54c:	4e3e      	ldr	r6, [pc, #248]	; (e648 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    e54e:	4840      	ldr	r0, [pc, #256]	; (e650 <z_arm_fault+0x180>)
    e550:	1af6      	subs	r6, r6, r3
    e552:	08f6      	lsrs	r6, r6, #3
    e554:	01b6      	lsls	r6, r6, #6
    e556:	f046 0601 	orr.w	r6, r6, #1
    e55a:	4631      	mov	r1, r6
    e55c:	f00d ff03 	bl	1c366 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e560:	4b37      	ldr	r3, [pc, #220]	; (e640 <z_arm_fault+0x170>)
	*recoverable = false;
    e562:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e566:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    e568:	f014 0402 	ands.w	r4, r4, #2
    e56c:	d005      	beq.n	e57a <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
    e56e:	4631      	mov	r1, r6
    e570:	4838      	ldr	r0, [pc, #224]	; (e654 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
    e572:	f00d fef8 	bl	1c366 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e576:	2400      	movs	r4, #0
}
    e578:	e01f      	b.n	e5ba <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e57c:	005b      	lsls	r3, r3, #1
    e57e:	d51c      	bpl.n	e5ba <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
    e580:	4631      	mov	r1, r6
    e582:	4835      	ldr	r0, [pc, #212]	; (e658 <z_arm_fault+0x188>)
    e584:	f00d feef 	bl	1c366 <log_0>
		if (SCB_MMFSR != 0) {
    e588:	4b34      	ldr	r3, [pc, #208]	; (e65c <z_arm_fault+0x18c>)
    e58a:	781b      	ldrb	r3, [r3, #0]
    e58c:	b12b      	cbz	r3, e59a <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
    e58e:	2001      	movs	r0, #1
    e590:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e594:	f7ff fec8 	bl	e328 <mem_manage_fault.isra.0>
    e598:	e00e      	b.n	e5b8 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
    e59a:	4b31      	ldr	r3, [pc, #196]	; (e660 <z_arm_fault+0x190>)
    e59c:	781b      	ldrb	r3, [r3, #0]
    e59e:	b12b      	cbz	r3, e5ac <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
    e5a0:	2001      	movs	r0, #1
    e5a2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e5a6:	f7ff ff25 	bl	e3f4 <bus_fault.isra.0>
    e5aa:	e005      	b.n	e5b8 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
    e5ac:	4b2d      	ldr	r3, [pc, #180]	; (e664 <z_arm_fault+0x194>)
    e5ae:	881b      	ldrh	r3, [r3, #0]
    e5b0:	b29b      	uxth	r3, r3
    e5b2:	b113      	cbz	r3, e5ba <z_arm_fault+0xea>
			reason = usage_fault(esf);
    e5b4:	f7ff fe52 	bl	e25c <usage_fault.isra.0>
    e5b8:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e5ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e5be:	b993      	cbnz	r3, e5e6 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e5c0:	2268      	movs	r2, #104	; 0x68
    e5c2:	4649      	mov	r1, r9
    e5c4:	a802      	add	r0, sp, #8
    e5c6:	f00e fb46 	bl	1cc56 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e5cc:	b39d      	cbz	r5, e636 <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e5ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e5d2:	b922      	cbnz	r2, e5de <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e5d4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e5d8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e5dc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e5de:	4620      	mov	r0, r4
    e5e0:	a902      	add	r1, sp, #8
    e5e2:	f7ff fd53 	bl	e08c <z_arm_fatal_error>
}
    e5e6:	b01d      	add	sp, #116	; 0x74
    e5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e5ec:	2000      	movs	r0, #0
    e5ee:	f10d 0107 	add.w	r1, sp, #7
    e5f2:	e7cf      	b.n	e594 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
    e5f4:	2000      	movs	r0, #0
    e5f6:	f10d 0107 	add.w	r1, sp, #7
    e5fa:	e7d4      	b.n	e5a6 <z_arm_fault+0xd6>
    e5fc:	4912      	ldr	r1, [pc, #72]	; (e648 <z_arm_fault+0x178>)
    e5fe:	4b11      	ldr	r3, [pc, #68]	; (e644 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
    e600:	4819      	ldr	r0, [pc, #100]	; (e668 <z_arm_fault+0x198>)
    e602:	1ac9      	subs	r1, r1, r3
    e604:	08c9      	lsrs	r1, r1, #3
    e606:	0189      	lsls	r1, r1, #6
    e608:	f041 0101 	orr.w	r1, r1, #1
    e60c:	e7b1      	b.n	e572 <z_arm_fault+0xa2>
    e60e:	4a0d      	ldr	r2, [pc, #52]	; (e644 <z_arm_fault+0x174>)
    e610:	4b0d      	ldr	r3, [pc, #52]	; (e648 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
    e612:	4816      	ldr	r0, [pc, #88]	; (e66c <z_arm_fault+0x19c>)
    e614:	1a9b      	subs	r3, r3, r2
    e616:	08db      	lsrs	r3, r3, #3
    e618:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e61c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    e620:	4913      	ldr	r1, [pc, #76]	; (e670 <z_arm_fault+0x1a0>)
    e622:	f043 0301 	orr.w	r3, r3, #1
    e626:	bf18      	it	ne
    e628:	4601      	movne	r1, r0
    e62a:	f1a6 0210 	sub.w	r2, r6, #16
    e62e:	4811      	ldr	r0, [pc, #68]	; (e674 <z_arm_fault+0x1a4>)
    e630:	f00d febf 	bl	1c3b2 <log_2>
    e634:	e79f      	b.n	e576 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e636:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e63a:	f023 0301 	bic.w	r3, r3, #1
    e63e:	e7cd      	b.n	e5dc <z_arm_fault+0x10c>
    e640:	e000ed00 	.word	0xe000ed00
    e644:	00020b54 	.word	0x00020b54
    e648:	00020b8c 	.word	0x00020b8c
    e64c:	000216c8 	.word	0x000216c8
    e650:	000216eb 	.word	0x000216eb
    e654:	00021702 	.word	0x00021702
    e658:	00021723 	.word	0x00021723
    e65c:	e000ed28 	.word	0xe000ed28
    e660:	e000ed29 	.word	0xe000ed29
    e664:	e000ed2a 	.word	0xe000ed2a
    e668:	00021742 	.word	0x00021742
    e66c:	0002178d 	.word	0x0002178d
    e670:	00021778 	.word	0x00021778
    e674:	000217a6 	.word	0x000217a6

0000e678 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e678:	4a02      	ldr	r2, [pc, #8]	; (e684 <z_arm_fault_init+0xc>)
    e67a:	6953      	ldr	r3, [r2, #20]
    e67c:	f043 0310 	orr.w	r3, r3, #16
    e680:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e682:	4770      	bx	lr
    e684:	e000ed00 	.word	0xe000ed00

0000e688 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    e688:	4b04      	ldr	r3, [pc, #16]	; (e69c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    e68a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    e68c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    e68e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    e690:	d003      	beq.n	e69a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    e692:	4903      	ldr	r1, [pc, #12]	; (e6a0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    e694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    e698:	600a      	str	r2, [r1, #0]

0000e69a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    e69a:	4770      	bx	lr
	ldr r3, =_kernel
    e69c:	20021b28 	.word	0x20021b28
	ldr r1, =_SCS_ICSR
    e6a0:	e000ed04 	.word	0xe000ed04

0000e6a4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e6a4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e6a8:	4905      	ldr	r1, [pc, #20]	; (e6c0 <sys_arch_reboot+0x1c>)
    e6aa:	4b06      	ldr	r3, [pc, #24]	; (e6c4 <sys_arch_reboot+0x20>)
    e6ac:	68ca      	ldr	r2, [r1, #12]
    e6ae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e6b2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e6b4:	60cb      	str	r3, [r1, #12]
    e6b6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e6ba:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e6bc:	e7fd      	b.n	e6ba <sys_arch_reboot+0x16>
    e6be:	bf00      	nop
    e6c0:	e000ed00 	.word	0xe000ed00
    e6c4:	05fa0004 	.word	0x05fa0004

0000e6c8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e6c8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e6ca:	2120      	movs	r1, #32
    e6cc:	4803      	ldr	r0, [pc, #12]	; (e6dc <z_arm_interrupt_init+0x14>)
    e6ce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e6d0:	3301      	adds	r3, #1
    e6d2:	2b41      	cmp	r3, #65	; 0x41
    e6d4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e6d8:	d1f9      	bne.n	e6ce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e6da:	4770      	bx	lr
    e6dc:	e000e100 	.word	0xe000e100

0000e6e0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    e6e0:	b538      	push	{r3, r4, r5, lr}
    e6e2:	4604      	mov	r4, r0
	__asm__ volatile(
    e6e4:	f04f 0320 	mov.w	r3, #32
    e6e8:	f3ef 8511 	mrs	r5, BASEPRI
    e6ec:	f383 8811 	msr	BASEPRI, r3
    e6f0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    e6f4:	f00c fe2e 	bl	1b354 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    e6f8:	4b0a      	ldr	r3, [pc, #40]	; (e724 <z_impl_k_thread_abort+0x44>)
    e6fa:	689b      	ldr	r3, [r3, #8]
    e6fc:	42a3      	cmp	r3, r4
    e6fe:	d10b      	bne.n	e718 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e700:	4b09      	ldr	r3, [pc, #36]	; (e728 <z_impl_k_thread_abort+0x48>)
    e702:	685a      	ldr	r2, [r3, #4]
    e704:	f3c2 0208 	ubfx	r2, r2, #0, #9
    e708:	b912      	cbnz	r2, e710 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    e70a:	4628      	mov	r0, r5
    e70c:	f7ff fbb8 	bl	de80 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e710:	685a      	ldr	r2, [r3, #4]
    e712:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e716:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    e718:	4628      	mov	r0, r5
}
    e71a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    e71e:	f011 be6b 	b.w	203f8 <z_reschedule_irqlock>
    e722:	bf00      	nop
    e724:	20021b28 	.word	0x20021b28
    e728:	e000ed00 	.word	0xe000ed00

0000e72c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e72c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e72e:	4b0e      	ldr	r3, [pc, #56]	; (e768 <z_arm_configure_static_mpu_regions+0x3c>)
{
    e730:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e732:	9302      	str	r3, [sp, #8]
    e734:	4b0d      	ldr	r3, [pc, #52]	; (e76c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e736:	4c0e      	ldr	r4, [pc, #56]	; (e770 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e738:	9303      	str	r3, [sp, #12]
    e73a:	4b0e      	ldr	r3, [pc, #56]	; (e774 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e73c:	4a0e      	ldr	r2, [pc, #56]	; (e778 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e73e:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e740:	ab02      	add	r3, sp, #8
    e742:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e744:	a801      	add	r0, sp, #4
    e746:	4623      	mov	r3, r4
    e748:	2101      	movs	r1, #1
    e74a:	f000 f93d 	bl	e9c8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e74e:	2300      	movs	r3, #0
    e750:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e752:	4b0a      	ldr	r3, [pc, #40]	; (e77c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e754:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e756:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e758:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e75a:	9305      	str	r3, [sp, #20]
    e75c:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e75e:	f000 f93d 	bl	e9dc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e762:	b008      	add	sp, #32
    e764:	bd10      	pop	{r4, pc}
    e766:	bf00      	nop
    e768:	20020000 	.word	0x20020000
    e76c:	00000000 	.word	0x00000000
    e770:	20040000 	.word	0x20040000
    e774:	00010006 	.word	0x00010006
    e778:	20020000 	.word	0x20020000
    e77c:	20020760 	.word	0x20020760

0000e780 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    e780:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e782:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e784:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e786:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e78a:	f004 031f 	and.w	r3, r4, #31
    e78e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e790:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e792:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e794:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e798:	4904      	ldr	r1, [pc, #16]	; (e7ac <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e79a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e79e:	f043 0301 	orr.w	r3, r3, #1
    e7a2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e7a4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e7a6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e7a8:	bd10      	pop	{r4, pc}
    e7aa:	bf00      	nop
    e7ac:	e000ed90 	.word	0xe000ed90

0000e7b0 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    e7b0:	b508      	push	{r3, lr}
    e7b2:	4a07      	ldr	r2, [pc, #28]	; (e7d0 <region_allocate_and_init.part.0+0x20>)
    e7b4:	4b07      	ldr	r3, [pc, #28]	; (e7d4 <region_allocate_and_init.part.0+0x24>)
    e7b6:	4601      	mov	r1, r0
    e7b8:	1ad2      	subs	r2, r2, r3
    e7ba:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e7bc:	0192      	lsls	r2, r2, #6
    e7be:	4806      	ldr	r0, [pc, #24]	; (e7d8 <region_allocate_and_init.part.0+0x28>)
    e7c0:	f042 0201 	orr.w	r2, r2, #1
    e7c4:	f00d fdde 	bl	1c384 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e7c8:	f06f 0015 	mvn.w	r0, #21
    e7cc:	bd08      	pop	{r3, pc}
    e7ce:	bf00      	nop
    e7d0:	00020b7c 	.word	0x00020b7c
    e7d4:	00020b54 	.word	0x00020b54
    e7d8:	000217bd 	.word	0x000217bd

0000e7dc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7e0:	4607      	mov	r7, r0
    e7e2:	4688      	mov	r8, r1
    e7e4:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e7e6:	2600      	movs	r6, #0
	MPU->RNR = index;
    e7e8:	4d56      	ldr	r5, [pc, #344]	; (e944 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e7ea:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e7ec:	4546      	cmp	r6, r8
    e7ee:	da35      	bge.n	e85c <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
    e7f0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    e7f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
    e7f8:	f1b9 0f00 	cmp.w	r9, #0
    e7fc:	d051      	beq.n	e8a2 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
    e7fe:	f1b9 0f1f 	cmp.w	r9, #31
    e802:	d91e      	bls.n	e842 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
    e804:	f019 0f1f 	tst.w	r9, #31
    e808:	d11b      	bne.n	e842 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
    e80a:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e80e:	f01a 0f1f 	tst.w	sl, #31
    e812:	d116      	bne.n	e842 <mpu_configure_regions_and_partition.constprop.0+0x66>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e814:	4650      	mov	r0, sl
    e816:	f00e f905 	bl	1ca24 <arm_cmse_mpu_region_get>
    e81a:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e81c:	eb09 000a 	add.w	r0, r9, sl
    e820:	3801      	subs	r0, #1
    e822:	f00e f8ff 	bl	1ca24 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e826:	4583      	cmp	fp, r0
    e828:	d01c      	beq.n	e864 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
    e82a:	f06f 0b15 	mvn.w	fp, #21
    e82e:	4a46      	ldr	r2, [pc, #280]	; (e948 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    e830:	4b46      	ldr	r3, [pc, #280]	; (e94c <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e832:	4659      	mov	r1, fp
    e834:	1ad2      	subs	r2, r2, r3
    e836:	08d2      	lsrs	r2, r2, #3
    e838:	0192      	lsls	r2, r2, #6
    e83a:	4845      	ldr	r0, [pc, #276]	; (e950 <mpu_configure_regions_and_partition.constprop.0+0x174>)
    e83c:	f042 0201 	orr.w	r2, r2, #1
    e840:	e008      	b.n	e854 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e842:	4631      	mov	r1, r6
    e844:	4a40      	ldr	r2, [pc, #256]	; (e948 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    e846:	4b41      	ldr	r3, [pc, #260]	; (e94c <mpu_configure_regions_and_partition.constprop.0+0x170>)
    e848:	4842      	ldr	r0, [pc, #264]	; (e954 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    e84a:	1ad2      	subs	r2, r2, r3
    e84c:	08d2      	lsrs	r2, r2, #3
    e84e:	0192      	lsls	r2, r2, #6
    e850:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
    e854:	f00d fd96 	bl	1c384 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e858:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e85c:	4620      	mov	r0, r4
    e85e:	b005      	add	sp, #20
    e860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e864:	f11b 0f16 	cmn.w	fp, #22
    e868:	d0e1      	beq.n	e82e <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
    e86a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e86c:	455b      	cmp	r3, fp
    e86e:	dbde      	blt.n	e82e <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
    e870:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e874:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    e876:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e87a:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e87c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e880:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e884:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e888:	e9d1 3200 	ldrd	r3, r2, [r1]
    e88c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e88e:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e890:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    e894:	d118      	bne.n	e8c8 <mpu_configure_regions_and_partition.constprop.0+0xec>
    e896:	45ca      	cmp	sl, r9
    e898:	d105      	bne.n	e8a6 <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
    e89a:	fa5f f08b 	uxtb.w	r0, fp
    e89e:	f00e f8a0 	bl	1c9e2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e8a2:	3601      	adds	r6, #1
    e8a4:	e7a2      	b.n	e7ec <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    e8a6:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e8aa:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e8ac:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e8b0:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e8b4:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e8b6:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e8b8:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e8ba:	f00e f892 	bl	1c9e2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e8be:	f110 0f16 	cmn.w	r0, #22
    e8c2:	d0c9      	beq.n	e858 <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
    e8c4:	1c44      	adds	r4, r0, #1
    e8c6:	e7ec      	b.n	e8a2 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
    e8c8:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e8cc:	692a      	ldr	r2, [r5, #16]
    e8ce:	3b01      	subs	r3, #1
    e8d0:	f023 031f 	bic.w	r3, r3, #31
    e8d4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e8d8:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e8da:	45ca      	cmp	sl, r9
    e8dc:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e8de:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e8e0:	d0eb      	beq.n	e8ba <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
    e8e2:	f00e f87e 	bl	1c9e2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e8e6:	f110 0f16 	cmn.w	r0, #22
    e8ea:	d0b5      	beq.n	e858 <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
    e8ec:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e8f0:	68ea      	ldr	r2, [r5, #12]
    e8f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e8f6:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    e8fa:	f362 0304 	bfi	r3, r2, #0, #5
    e8fe:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e902:	692b      	ldr	r3, [r5, #16]
    e904:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e908:	085b      	lsrs	r3, r3, #1
    e90a:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    e90e:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e912:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e916:	e9d3 1300 	ldrd	r1, r3, [r3]
    e91a:	440b      	add	r3, r1
    e91c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e91e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e922:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    e924:	4453      	add	r3, sl
    e926:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    e92a:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    e92c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    e930:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    e932:	9303      	str	r3, [sp, #12]
    e934:	d902      	bls.n	e93c <mpu_configure_regions_and_partition.constprop.0+0x160>
    e936:	f7ff ff3b 	bl	e7b0 <region_allocate_and_init.part.0>
    e93a:	e7c0      	b.n	e8be <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
    e93c:	4669      	mov	r1, sp
    e93e:	f7ff ff1f 	bl	e780 <region_init>
			if (reg_index == -EINVAL) {
    e942:	e7bf      	b.n	e8c4 <mpu_configure_regions_and_partition.constprop.0+0xe8>
    e944:	e000ed90 	.word	0xe000ed90
    e948:	00020b7c 	.word	0x00020b7c
    e94c:	00020b54 	.word	0x00020b54
    e950:	00021806 	.word	0x00021806
    e954:	000217e3 	.word	0x000217e3

0000e958 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e958:	2205      	movs	r2, #5
    e95a:	4b03      	ldr	r3, [pc, #12]	; (e968 <arm_core_mpu_enable+0x10>)
    e95c:	605a      	str	r2, [r3, #4]
    e95e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e962:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e966:	4770      	bx	lr
    e968:	e000ed90 	.word	0xe000ed90

0000e96c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e96c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e970:	2200      	movs	r2, #0
    e972:	4b01      	ldr	r3, [pc, #4]	; (e978 <arm_core_mpu_disable+0xc>)
    e974:	605a      	str	r2, [r3, #4]
}
    e976:	4770      	bx	lr
    e978:	e000ed90 	.word	0xe000ed90

0000e97c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e97c:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e97e:	4c0e      	ldr	r4, [pc, #56]	; (e9b8 <arm_mpu_init+0x3c>)
    e980:	6825      	ldr	r5, [r4, #0]
    e982:	2d10      	cmp	r5, #16
    e984:	d814      	bhi.n	e9b0 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    e986:	f7ff fff1 	bl	e96c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e98a:	2000      	movs	r0, #0
	MPU->MAIR0 =
    e98c:	4b0b      	ldr	r3, [pc, #44]	; (e9bc <arm_mpu_init+0x40>)
    e98e:	4a0c      	ldr	r2, [pc, #48]	; (e9c0 <arm_mpu_init+0x44>)
    e990:	631a      	str	r2, [r3, #48]	; 0x30
    e992:	4285      	cmp	r5, r0
    e994:	d105      	bne.n	e9a2 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e996:	4b0b      	ldr	r3, [pc, #44]	; (e9c4 <arm_mpu_init+0x48>)
    e998:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    e99a:	f7ff ffdd 	bl	e958 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e99e:	2000      	movs	r0, #0
}
    e9a0:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e9a2:	6861      	ldr	r1, [r4, #4]
    e9a4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e9a8:	f7ff feea 	bl	e780 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e9ac:	3001      	adds	r0, #1
    e9ae:	e7f0      	b.n	e992 <arm_mpu_init+0x16>
		return -1;
    e9b0:	f04f 30ff 	mov.w	r0, #4294967295
    e9b4:	e7f4      	b.n	e9a0 <arm_mpu_init+0x24>
    e9b6:	bf00      	nop
    e9b8:	00020c8c 	.word	0x00020c8c
    e9bc:	e000ed90 	.word	0xe000ed90
    e9c0:	0044ffaa 	.word	0x0044ffaa
    e9c4:	20021c4b 	.word	0x20021c4b

0000e9c8 <arm_core_mpu_configure_static_mpu_regions>:
{
    e9c8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e9ca:	4c03      	ldr	r4, [pc, #12]	; (e9d8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e9cc:	7822      	ldrb	r2, [r4, #0]
    e9ce:	f7ff ff05 	bl	e7dc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e9d2:	7020      	strb	r0, [r4, #0]
}
    e9d4:	bd10      	pop	{r4, pc}
    e9d6:	bf00      	nop
    e9d8:	20021c4b 	.word	0x20021c4b

0000e9dc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e9dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9e0:	4d26      	ldr	r5, [pc, #152]	; (ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>)
    e9e2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e9e4:	4606      	mov	r6, r0
    e9e6:	f04f 0800 	mov.w	r8, #0
    e9ea:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e9ec:	4f24      	ldr	r7, [pc, #144]	; (ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e9ee:	45d0      	cmp	r8, sl
    e9f0:	da1b      	bge.n	ea2a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e9f2:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e9f6:	f1b9 0f00 	cmp.w	r9, #0
    e9fa:	d039      	beq.n	ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e9fc:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e9fe:	4608      	mov	r0, r1
    ea00:	9101      	str	r1, [sp, #4]
    ea02:	f00e f80f 	bl	1ca24 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    ea06:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    ea08:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    ea0a:	eb09 0001 	add.w	r0, r9, r1
    ea0e:	3801      	subs	r0, #1
    ea10:	f00e f808 	bl	1ca24 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    ea14:	4284      	cmp	r4, r0
    ea16:	f04f 0214 	mov.w	r2, #20
    ea1a:	4b1a      	ldr	r3, [pc, #104]	; (ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>)
    ea1c:	d008      	beq.n	ea30 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    ea1e:	f06f 0315 	mvn.w	r3, #21
    ea22:	fb02 f808 	mul.w	r8, r2, r8
    ea26:	f84b 3008 	str.w	r3, [fp, r8]
}
    ea2a:	b003      	add	sp, #12
    ea2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    ea30:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    ea34:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    ea36:	d0f8      	beq.n	ea2a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    ea38:	7819      	ldrb	r1, [r3, #0]
    ea3a:	42a1      	cmp	r1, r4
    ea3c:	ddf5      	ble.n	ea2a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    ea3e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    ea42:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    ea44:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    ea46:	68fc      	ldr	r4, [r7, #12]
    ea48:	f100 0108 	add.w	r1, r0, #8
    ea4c:	7b00      	ldrb	r0, [r0, #12]
    ea4e:	f364 0004 	bfi	r0, r4, #0, #5
    ea52:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    ea54:	6938      	ldr	r0, [r7, #16]
    ea56:	790c      	ldrb	r4, [r1, #4]
    ea58:	0840      	lsrs	r0, r0, #1
    ea5a:	f360 1447 	bfi	r4, r0, #5, #3
    ea5e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    ea60:	68f9      	ldr	r1, [r7, #12]
    ea62:	f021 011f 	bic.w	r1, r1, #31
    ea66:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    ea68:	6939      	ldr	r1, [r7, #16]
    ea6a:	f021 011f 	bic.w	r1, r1, #31
    ea6e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    ea70:	f108 0801 	add.w	r8, r8, #1
    ea74:	3514      	adds	r5, #20
    ea76:	360c      	adds	r6, #12
    ea78:	e7b9      	b.n	e9ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    ea7a:	bf00      	nop
    ea7c:	20020904 	.word	0x20020904
    ea80:	e000ed90 	.word	0xe000ed90
    ea84:	20021c4b 	.word	0x20021c4b

0000ea88 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea8c:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    ea8e:	2300      	movs	r3, #0
{
    ea90:	4689      	mov	r9, r1
    ea92:	b0a1      	sub	sp, #132	; 0x84
    ea94:	9003      	str	r0, [sp, #12]
	count = 0;
    ea96:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    ea98:	4613      	mov	r3, r2
    ea9a:	f813 0b01 	ldrb.w	r0, [r3], #1
    ea9e:	9306      	str	r3, [sp, #24]
    eaa0:	b158      	cbz	r0, eaba <z_prf+0x32>
		if (c != '%') {
    eaa2:	2825      	cmp	r0, #37	; 0x25
    eaa4:	f000 8081 	beq.w	ebaa <z_prf+0x122>
			PUTC(c);
    eaa8:	4649      	mov	r1, r9
    eaaa:	9b03      	ldr	r3, [sp, #12]
    eaac:	4798      	blx	r3
    eaae:	3001      	adds	r0, #1
    eab0:	f040 844b 	bne.w	f34a <z_prf+0x8c2>
    eab4:	f04f 33ff 	mov.w	r3, #4294967295
    eab8:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    eaba:	9802      	ldr	r0, [sp, #8]
    eabc:	b021      	add	sp, #132	; 0x84
    eabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    eac2:	2d2b      	cmp	r5, #43	; 0x2b
    eac4:	d065      	beq.n	eb92 <z_prf+0x10a>
    eac6:	d85c      	bhi.n	eb82 <z_prf+0xfa>
    eac8:	2d20      	cmp	r5, #32
    eaca:	d065      	beq.n	eb98 <z_prf+0x110>
    eacc:	2d23      	cmp	r5, #35	; 0x23
    eace:	d066      	beq.n	eb9e <z_prf+0x116>
    ead0:	2d00      	cmp	r5, #0
    ead2:	d0f2      	beq.n	eaba <z_prf+0x32>
					fzero = true;
    ead4:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    ead8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    eadc:	48a4      	ldr	r0, [pc, #656]	; (ed70 <z_prf+0x2e8>)
    eade:	f818 5b01 	ldrb.w	r5, [r8], #1
    eae2:	4629      	mov	r1, r5
    eae4:	f00e f877 	bl	1cbd6 <strchr>
    eae8:	2800      	cmp	r0, #0
    eaea:	d1ea      	bne.n	eac2 <z_prf+0x3a>
			if (c == '*') {
    eaec:	2d2a      	cmp	r5, #42	; 0x2a
    eaee:	d163      	bne.n	ebb8 <z_prf+0x130>
				width = va_arg(vargs, int);
    eaf0:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    eaf4:	f898 5000 	ldrb.w	r5, [r8]
				if (width < 0) {
    eaf8:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    eafa:	9307      	str	r3, [sp, #28]
					width = -width;
    eafc:	bfbf      	itttt	lt
    eafe:	425b      	neglt	r3, r3
    eb00:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    eb02:	2301      	movlt	r3, #1
    eb04:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    eb06:	9b06      	ldr	r3, [sp, #24]
    eb08:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    eb0c:	2d2e      	cmp	r5, #46	; 0x2e
    eb0e:	d178      	bne.n	ec02 <z_prf+0x17a>
				if (c == '*') {
    eb10:	f898 3000 	ldrb.w	r3, [r8]
    eb14:	2b2a      	cmp	r3, #42	; 0x2a
    eb16:	d171      	bne.n	ebfc <z_prf+0x174>
					precision = va_arg(vargs, int);
    eb18:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    eb1c:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    eb20:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    eb24:	4629      	mov	r1, r5
    eb26:	4893      	ldr	r0, [pc, #588]	; (ed74 <z_prf+0x2ec>)
    eb28:	462f      	mov	r7, r5
    eb2a:	f00e f854 	bl	1cbd6 <strchr>
    eb2e:	2800      	cmp	r0, #0
    eb30:	d06a      	beq.n	ec08 <z_prf+0x180>
				c = *format++;
    eb32:	4643      	mov	r3, r8
    eb34:	f813 5b01 	ldrb.w	r5, [r3], #1
				} else if (i == 'h' && c == 'h') {
    eb38:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    eb3a:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    eb3c:	d107      	bne.n	eb4e <z_prf+0xc6>
    eb3e:	2d68      	cmp	r5, #104	; 0x68
    eb40:	d105      	bne.n	eb4e <z_prf+0xc6>
					i = 'H';
    eb42:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    eb44:	f108 0302 	add.w	r3, r8, #2
    eb48:	f898 5001 	ldrb.w	r5, [r8, #1]
    eb4c:	9306      	str	r3, [sp, #24]
			switch (c) {
    eb4e:	2d78      	cmp	r5, #120	; 0x78
    eb50:	d808      	bhi.n	eb64 <z_prf+0xdc>
    eb52:	2d57      	cmp	r5, #87	; 0x57
    eb54:	d85c      	bhi.n	ec10 <z_prf+0x188>
    eb56:	2d25      	cmp	r5, #37	; 0x25
    eb58:	f000 83f3 	beq.w	f342 <z_prf+0x8ba>
    eb5c:	f200 80a2 	bhi.w	eca4 <z_prf+0x21c>
    eb60:	2d00      	cmp	r5, #0
    eb62:	d0aa      	beq.n	eaba <z_prf+0x32>
				PUTC('%');
    eb64:	4649      	mov	r1, r9
    eb66:	2025      	movs	r0, #37	; 0x25
    eb68:	9b03      	ldr	r3, [sp, #12]
    eb6a:	4798      	blx	r3
    eb6c:	3001      	adds	r0, #1
    eb6e:	d0a1      	beq.n	eab4 <z_prf+0x2c>
				PUTC(c);
    eb70:	4649      	mov	r1, r9
    eb72:	4628      	mov	r0, r5
    eb74:	9b03      	ldr	r3, [sp, #12]
    eb76:	4798      	blx	r3
    eb78:	3001      	adds	r0, #1
    eb7a:	d09b      	beq.n	eab4 <z_prf+0x2c>
				count += 2;
    eb7c:	9b02      	ldr	r3, [sp, #8]
    eb7e:	3302      	adds	r3, #2
    eb80:	e3e5      	b.n	f34e <z_prf+0x8c6>
				switch (c) {
    eb82:	2d2d      	cmp	r5, #45	; 0x2d
    eb84:	d00e      	beq.n	eba4 <z_prf+0x11c>
					fzero = true;
    eb86:	2d30      	cmp	r5, #48	; 0x30
    eb88:	9b08      	ldr	r3, [sp, #32]
    eb8a:	bf08      	it	eq
    eb8c:	2301      	moveq	r3, #1
    eb8e:	9308      	str	r3, [sp, #32]
    eb90:	e7a0      	b.n	ead4 <z_prf+0x4c>
					fplus = true;
    eb92:	2301      	movs	r3, #1
    eb94:	9309      	str	r3, [sp, #36]	; 0x24
    eb96:	e79d      	b.n	ead4 <z_prf+0x4c>
					fspace = true;
    eb98:	2301      	movs	r3, #1
    eb9a:	930c      	str	r3, [sp, #48]	; 0x30
    eb9c:	e79a      	b.n	ead4 <z_prf+0x4c>
					falt = true;
    eb9e:	f04f 0a01 	mov.w	sl, #1
    eba2:	e797      	b.n	ead4 <z_prf+0x4c>
				switch (c) {
    eba4:	2301      	movs	r3, #1
    eba6:	930d      	str	r3, [sp, #52]	; 0x34
    eba8:	e794      	b.n	ead4 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    ebaa:	2300      	movs	r3, #0
    ebac:	469a      	mov	sl, r3
    ebae:	9308      	str	r3, [sp, #32]
    ebb0:	930c      	str	r3, [sp, #48]	; 0x30
    ebb2:	9309      	str	r3, [sp, #36]	; 0x24
    ebb4:	930d      	str	r3, [sp, #52]	; 0x34
    ebb6:	e78f      	b.n	ead8 <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    ebb8:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit(c)) {
    ebbc:	2b09      	cmp	r3, #9
				width = 0;
    ebbe:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    ebc0:	d8a4      	bhi.n	eb0c <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    ebc2:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    ebc4:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ebc8:	f818 5b01 	ldrb.w	r5, [r8], #1
    ebcc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    ebd0:	2b09      	cmp	r3, #9
    ebd2:	d89b      	bhi.n	eb0c <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    ebd4:	9b07      	ldr	r3, [sp, #28]
    ebd6:	fb02 5503 	mla	r5, r2, r3, r5
    ebda:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    ebde:	e9cd 8306 	strd	r8, r3, [sp, #24]
    ebe2:	e7ef      	b.n	ebc4 <z_prf+0x13c>
    ebe4:	4690      	mov	r8, r2
    ebe6:	fb01 3404 	mla	r4, r1, r4, r3
    ebea:	3c30      	subs	r4, #48	; 0x30
	while (isdigit(*p)) {
    ebec:	4642      	mov	r2, r8
    ebee:	f812 3b01 	ldrb.w	r3, [r2], #1
    ebf2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    ebf6:	2809      	cmp	r0, #9
    ebf8:	d9f4      	bls.n	ebe4 <z_prf+0x15c>
    ebfa:	e791      	b.n	eb20 <z_prf+0x98>
	int i = 0;
    ebfc:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    ebfe:	210a      	movs	r1, #10
    ec00:	e7f4      	b.n	ebec <z_prf+0x164>
			precision = -1;
    ec02:	f04f 34ff 	mov.w	r4, #4294967295
    ec06:	e78d      	b.n	eb24 <z_prf+0x9c>
			i = 0;
    ec08:	4607      	mov	r7, r0
    ec0a:	f8cd 8018 	str.w	r8, [sp, #24]
    ec0e:	e79e      	b.n	eb4e <z_prf+0xc6>
    ec10:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    ec14:	2b20      	cmp	r3, #32
    ec16:	d8a5      	bhi.n	eb64 <z_prf+0xdc>
    ec18:	a201      	add	r2, pc, #4	; (adr r2, ec20 <z_prf+0x198>)
    ec1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ec1e:	bf00      	nop
    ec20:	0000f2a7 	.word	0x0000f2a7
    ec24:	0000eb65 	.word	0x0000eb65
    ec28:	0000eb65 	.word	0x0000eb65
    ec2c:	0000eb65 	.word	0x0000eb65
    ec30:	0000eb65 	.word	0x0000eb65
    ec34:	0000eb65 	.word	0x0000eb65
    ec38:	0000eb65 	.word	0x0000eb65
    ec3c:	0000eb65 	.word	0x0000eb65
    ec40:	0000eb65 	.word	0x0000eb65
    ec44:	0000eb65 	.word	0x0000eb65
    ec48:	0000eb65 	.word	0x0000eb65
    ec4c:	0000ed79 	.word	0x0000ed79
    ec50:	0000ee4f 	.word	0x0000ee4f
    ec54:	0000ecb1 	.word	0x0000ecb1
    ec58:	0000ecb1 	.word	0x0000ecb1
    ec5c:	0000ecb1 	.word	0x0000ecb1
    ec60:	0000eb65 	.word	0x0000eb65
    ec64:	0000ee4f 	.word	0x0000ee4f
    ec68:	0000eb65 	.word	0x0000eb65
    ec6c:	0000eb65 	.word	0x0000eb65
    ec70:	0000eb65 	.word	0x0000eb65
    ec74:	0000eb65 	.word	0x0000eb65
    ec78:	0000f233 	.word	0x0000f233
    ec7c:	0000f2a7 	.word	0x0000f2a7
    ec80:	0000f25d 	.word	0x0000f25d
    ec84:	0000eb65 	.word	0x0000eb65
    ec88:	0000eb65 	.word	0x0000eb65
    ec8c:	0000f27f 	.word	0x0000f27f
    ec90:	0000eb65 	.word	0x0000eb65
    ec94:	0000f2a7 	.word	0x0000f2a7
    ec98:	0000eb65 	.word	0x0000eb65
    ec9c:	0000eb65 	.word	0x0000eb65
    eca0:	0000f2a7 	.word	0x0000f2a7
			switch (c) {
    eca4:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    eca8:	b2db      	uxtb	r3, r3
    ecaa:	2b02      	cmp	r3, #2
    ecac:	f63f af5a 	bhi.w	eb64 <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    ecb0:	3607      	adds	r6, #7
    ecb2:	f026 0307 	bic.w	r3, r6, #7
    ecb6:	4619      	mov	r1, r3
    ecb8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    ecbc:	02d8      	lsls	r0, r3, #11
    ecbe:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    ecc2:	02d6      	lsls	r6, r2, #11
    ecc4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    ecc8:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    ecca:	9101      	str	r1, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
    eccc:	9604      	str	r6, [sp, #16]
	exp = double_temp >> 52 & 0x7ff;
    ecce:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    ecd2:	9005      	str	r0, [sp, #20]
	if (sign) {
    ecd4:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    ecd8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    ecdc:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    ece0:	f280 80e5 	bge.w	eeae <z_prf+0x426>
		*buf++ = '-';
    ece4:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    ece6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    ecea:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    ecee:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ecf2:	4299      	cmp	r1, r3
    ecf4:	f040 80f6 	bne.w	eee4 <z_prf+0x45c>
		if (!fract) {
    ecf8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ecfc:	430a      	orrs	r2, r1
    ecfe:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    ed02:	f107 0303 	add.w	r3, r7, #3
    ed06:	f040 80e2 	bne.w	eece <z_prf+0x446>
			if (isupper(c)) {
    ed0a:	2d19      	cmp	r5, #25
    ed0c:	f200 80d9 	bhi.w	eec2 <z_prf+0x43a>
				*buf++ = 'I';
    ed10:	2249      	movs	r2, #73	; 0x49
    ed12:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    ed14:	224e      	movs	r2, #78	; 0x4e
    ed16:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    ed18:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    ed1a:	2400      	movs	r4, #0
			zero.predot = zero.postdot = zero.trail = 0;
    ed1c:	46a2      	mov	sl, r4
    ed1e:	46a3      	mov	fp, r4
		return buf - start;
    ed20:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    ed22:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    ed24:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    ed26:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    ed28:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ed2a:	2a00      	cmp	r2, #0
    ed2c:	f040 827e 	bne.w	f22c <z_prf+0x7a4>
    ed30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ed32:	2a00      	cmp	r2, #0
    ed34:	f040 827a 	bne.w	f22c <z_prf+0x7a4>
    ed38:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    ed3c:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    ed40:	f1d2 0800 	rsbs	r8, r2, #0
    ed44:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    ed48:	eb0b 060a 	add.w	r6, fp, sl
    ed4c:	4433      	add	r3, r6
    ed4e:	191e      	adds	r6, r3, r4
				if (!isdigit(buf[prefix])) {
    ed50:	ab20      	add	r3, sp, #128	; 0x80
    ed52:	4443      	add	r3, r8
    ed54:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    ed58:	3b30      	subs	r3, #48	; 0x30
    ed5a:	2b09      	cmp	r3, #9
    ed5c:	f200 82ff 	bhi.w	f35e <z_prf+0x8d6>
			} else if (fzero) {
    ed60:	9b08      	ldr	r3, [sp, #32]
    ed62:	2b00      	cmp	r3, #0
    ed64:	f000 82fe 	beq.w	f364 <z_prf+0x8dc>
    ed68:	9b07      	ldr	r3, [sp, #28]
    ed6a:	af19      	add	r7, sp, #100	; 0x64
    ed6c:	1b9b      	subs	r3, r3, r6
    ed6e:	e014      	b.n	ed9a <z_prf+0x312>
    ed70:	00021829 	.word	0x00021829
    ed74:	0002182f 	.word	0x0002182f
				break;
    ed78:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    ed7c:	4632      	mov	r2, r6
				break;
    ed7e:	4644      	mov	r4, r8
				clen = 1;
    ed80:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    ed82:	f852 3b04 	ldr.w	r3, [r2], #4
    ed86:	9201      	str	r2, [sp, #4]
    ed88:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				break;
    ed8c:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    ed8e:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    ed92:	2400      	movs	r4, #0
    ed94:	46a2      	mov	sl, r4
    ed96:	46a3      	mov	fp, r4
				zero_head = precision - clen + prefix;
    ed98:	1b9b      	subs	r3, r3, r6
			if (zero_head < 0) {
    ed9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    ed9e:	199a      	adds	r2, r3, r6
    eda0:	9208      	str	r2, [sp, #32]
    eda2:	9a07      	ldr	r2, [sp, #28]
    eda4:	1999      	adds	r1, r3, r6
    eda6:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    eda8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    edaa:	b912      	cbnz	r2, edb2 <z_prf+0x32a>
    edac:	2d00      	cmp	r5, #0
    edae:	f300 82ee 	bgt.w	f38e <z_prf+0x906>
			while (prefix-- > 0) {
    edb2:	eb07 0208 	add.w	r2, r7, r8
    edb6:	42ba      	cmp	r2, r7
    edb8:	f040 82eb 	bne.w	f392 <z_prf+0x90a>
			while (zero_head-- > 0) {
    edbc:	3b01      	subs	r3, #1
    edbe:	f080 82f6 	bcs.w	f3ae <z_prf+0x926>
			clen -= prefix;
    edc2:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    edc6:	f1bb 0f00 	cmp.w	fp, #0
    edca:	d010      	beq.n	edee <z_prf+0x366>
				c = *cptr;
    edcc:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c)) {
    edce:	eb07 0806 	add.w	r8, r7, r6
    edd2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    edd6:	2b09      	cmp	r3, #9
    edd8:	eba8 0607 	sub.w	r6, r8, r7
    eddc:	f240 82f2 	bls.w	f3c4 <z_prf+0x93c>
    ede0:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    ede2:	f1b8 0801 	subs.w	r8, r8, #1
    ede6:	f080 82f6 	bcs.w	f3d6 <z_prf+0x94e>
				clen -= zero.predot;
    edea:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    edee:	f1ba 0f00 	cmp.w	sl, #0
    edf2:	d016      	beq.n	ee22 <z_prf+0x39a>
    edf4:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    edf8:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    edfc:	4649      	mov	r1, r9
    edfe:	4658      	mov	r0, fp
    ee00:	9b03      	ldr	r3, [sp, #12]
    ee02:	4798      	blx	r3
    ee04:	3001      	adds	r0, #1
    ee06:	f43f ae55 	beq.w	eab4 <z_prf+0x2c>
				} while (c != '.');
    ee0a:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    ee0e:	eba8 0607 	sub.w	r6, r8, r7
    ee12:	d1f1      	bne.n	edf8 <z_prf+0x370>
				while (zero.postdot-- > 0) {
    ee14:	46d0      	mov	r8, sl
    ee16:	f1b8 0f00 	cmp.w	r8, #0
    ee1a:	f300 82e5 	bgt.w	f3e8 <z_prf+0x960>
				clen -= zero.postdot;
    ee1e:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    ee22:	b194      	cbz	r4, ee4a <z_prf+0x3c2>
				c = *cptr;
    ee24:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c) || c == '.') {
    ee26:	eb07 0806 	add.w	r8, r7, r6
    ee2a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ee2e:	2b09      	cmp	r3, #9
    ee30:	eba8 0607 	sub.w	r6, r8, r7
    ee34:	f240 82e3 	bls.w	f3fe <z_prf+0x976>
    ee38:	282e      	cmp	r0, #46	; 0x2e
    ee3a:	f000 82e0 	beq.w	f3fe <z_prf+0x976>
				while (zero.trail-- > 0) {
    ee3e:	46a0      	mov	r8, r4
    ee40:	f1b8 0f00 	cmp.w	r8, #0
    ee44:	f300 82e4 	bgt.w	f410 <z_prf+0x988>
				clen -= zero.trail;
    ee48:	1b36      	subs	r6, r6, r4
    ee4a:	443e      	add	r6, r7
    ee4c:	e2f3      	b.n	f436 <z_prf+0x9ae>
				switch (i) {
    ee4e:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    ee50:	1d33      	adds	r3, r6, #4
    ee52:	2d00      	cmp	r5, #0
    ee54:	9301      	str	r3, [sp, #4]
    ee56:	da1c      	bge.n	ee92 <z_prf+0x40a>
		*buf++ = '-';
    ee58:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    ee5a:	4269      	negs	r1, r5
		*buf++ = '-';
    ee5c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		*buf++ = ' ';
    ee60:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    ee64:	220a      	movs	r2, #10
    ee66:	4638      	mov	r0, r7
    ee68:	f00d ff43 	bl	1ccf2 <_to_x>
				if (fplus || fspace || val < 0) {
    ee6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    ee6e:	4438      	add	r0, r7
    ee70:	ae19      	add	r6, sp, #100	; 0x64
    ee72:	1b86      	subs	r6, r0, r6
				if (fplus || fspace || val < 0) {
    ee74:	2b00      	cmp	r3, #0
    ee76:	f040 826d 	bne.w	f354 <z_prf+0x8cc>
    ee7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ee7c:	2b00      	cmp	r3, #0
    ee7e:	f040 8269 	bne.w	f354 <z_prf+0x8cc>
    ee82:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    ee86:	2c00      	cmp	r4, #0
    ee88:	da80      	bge.n	ed8c <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    ee8a:	2400      	movs	r4, #0
    ee8c:	46a2      	mov	sl, r4
    ee8e:	46a3      	mov	fp, r4
    ee90:	e766      	b.n	ed60 <z_prf+0x2d8>
	} else if (fplus) {
    ee92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee94:	b123      	cbz	r3, eea0 <z_prf+0x418>
		*buf++ = '+';
    ee96:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    ee98:	4629      	mov	r1, r5
    ee9a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    ee9e:	e7df      	b.n	ee60 <z_prf+0x3d8>
	} else if (fspace) {
    eea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eea2:	b10b      	cbz	r3, eea8 <z_prf+0x420>
		*buf++ = ' ';
    eea4:	2320      	movs	r3, #32
    eea6:	e7f7      	b.n	ee98 <z_prf+0x410>
    eea8:	4629      	mov	r1, r5
    eeaa:	af19      	add	r7, sp, #100	; 0x64
    eeac:	e7da      	b.n	ee64 <z_prf+0x3dc>
	} else if (fplus) {
    eeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eeb0:	b10b      	cbz	r3, eeb6 <z_prf+0x42e>
		*buf++ = '+';
    eeb2:	232b      	movs	r3, #43	; 0x2b
    eeb4:	e717      	b.n	ece6 <z_prf+0x25e>
	} else if (fspace) {
    eeb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eeb8:	b10b      	cbz	r3, eebe <z_prf+0x436>
		*buf++ = ' ';
    eeba:	2320      	movs	r3, #32
    eebc:	e713      	b.n	ece6 <z_prf+0x25e>
    eebe:	af19      	add	r7, sp, #100	; 0x64
    eec0:	e715      	b.n	ecee <z_prf+0x266>
				*buf++ = 'i';
    eec2:	2269      	movs	r2, #105	; 0x69
    eec4:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    eec6:	226e      	movs	r2, #110	; 0x6e
    eec8:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    eeca:	2266      	movs	r2, #102	; 0x66
    eecc:	e725      	b.n	ed1a <z_prf+0x292>
			if (isupper(c)) {
    eece:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    eed0:	bf99      	ittee	ls
    eed2:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    eed4:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    eed6:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    eed8:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    eeda:	bf94      	ite	ls
    eedc:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    eede:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    eee0:	7079      	strb	r1, [r7, #1]
    eee2:	e71a      	b.n	ed1a <z_prf+0x292>
	if ((exp | fract) != 0) {
    eee4:	9b04      	ldr	r3, [sp, #16]
    eee6:	9805      	ldr	r0, [sp, #20]
    eee8:	430b      	orrs	r3, r1
    eeea:	930e      	str	r3, [sp, #56]	; 0x38
    eeec:	17cb      	asrs	r3, r1, #31
    eeee:	4303      	orrs	r3, r0
		c = 'f';
    eef0:	2d46      	cmp	r5, #70	; 0x46
	if ((exp | fract) != 0) {
    eef2:	930f      	str	r3, [sp, #60]	; 0x3c
		c = 'f';
    eef4:	bf08      	it	eq
    eef6:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    eef8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    eefc:	4313      	orrs	r3, r2
    eefe:	f000 8107 	beq.w	f110 <z_prf+0x688>
		if (exp == 0) {
    ef02:	2900      	cmp	r1, #0
    ef04:	f000 809f 	beq.w	f046 <z_prf+0x5be>
		fract |= HIGHBIT64;
    ef08:	2600      	movs	r6, #0
    ef0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    ef0c:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    ef10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ef14:	9315      	str	r3, [sp, #84]	; 0x54
	while (exp <= -3) {
    ef16:	f118 0f02 	cmn.w	r8, #2
    ef1a:	f2c0 80a8 	blt.w	f06e <z_prf+0x5e6>
	while (exp > 0) {
    ef1e:	f1b8 0f00 	cmp.w	r8, #0
    ef22:	f300 80d4 	bgt.w	f0ce <z_prf+0x646>
		_rlrshift(&fract);
    ef26:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    ef28:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    ef2c:	f00d ff05 	bl	1cd3a <_rlrshift>
	while (exp < (0 + 4)) {
    ef30:	f1b8 0f04 	cmp.w	r8, #4
    ef34:	d1f7      	bne.n	ef26 <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    ef36:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    ef38:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    ef3c:	bfb8      	it	lt
    ef3e:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    ef40:	2b47      	cmp	r3, #71	; 0x47
    ef42:	f040 80ee 	bne.w	f122 <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    ef46:	1cf1      	adds	r1, r6, #3
    ef48:	db02      	blt.n	ef50 <z_prf+0x4c8>
    ef4a:	42b4      	cmp	r4, r6
    ef4c:	f280 80e3 	bge.w	f116 <z_prf+0x68e>
			c += 'e' - 'g';
    ef50:	3d02      	subs	r5, #2
    ef52:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    ef54:	2c00      	cmp	r4, #0
    ef56:	f000 80ea 	beq.w	f12e <z_prf+0x6a6>
				precision--;
    ef5a:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    ef5c:	f1ba 0f00 	cmp.w	sl, #0
    ef60:	f040 80e5 	bne.w	f12e <z_prf+0x6a6>
    ef64:	2c00      	cmp	r4, #0
    ef66:	bfd4      	ite	le
    ef68:	f04f 0800 	movle.w	r8, #0
    ef6c:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    ef70:	2d66      	cmp	r5, #102	; 0x66
    ef72:	f040 80de 	bne.w	f132 <z_prf+0x6aa>
		if (exp < 0) {
    ef76:	eb14 0b06 	adds.w	fp, r4, r6
    ef7a:	f04f 0566 	mov.w	r5, #102	; 0x66
    ef7e:	f100 80db 	bmi.w	f138 <z_prf+0x6b0>
	if (exp > 16) {
    ef82:	f1bb 0f10 	cmp.w	fp, #16
    ef86:	bfa8      	it	ge
    ef88:	f04f 0b10 	movge.w	fp, #16
    ef8c:	2310      	movs	r3, #16
	ltemp = 0x0800000000000000;
    ef8e:	2200      	movs	r2, #0
    ef90:	9313      	str	r3, [sp, #76]	; 0x4c
    ef92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ef96:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    ef9a:	f1bb 0b01 	subs.w	fp, fp, #1
    ef9e:	f080 80ce 	bcs.w	f13e <z_prf+0x6b6>
	fract += ltemp;
    efa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    efa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    efa6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    efa8:	189b      	adds	r3, r3, r2
    efaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
    efac:	eb41 0202 	adc.w	r2, r1, r2
    efb0:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    efb4:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    efb8:	9310      	str	r3, [sp, #64]	; 0x40
    efba:	2300      	movs	r3, #0
    efbc:	9311      	str	r3, [sp, #68]	; 0x44
    efbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    efc2:	4313      	orrs	r3, r2
    efc4:	d006      	beq.n	efd4 <z_prf+0x54c>
		_ldiv5(&fract);
    efc6:	a814      	add	r0, sp, #80	; 0x50
    efc8:	f00d fec8 	bl	1cd5c <_ldiv5>
		_rlrshift(&fract);
    efcc:	a814      	add	r0, sp, #80	; 0x50
    efce:	f00d feb4 	bl	1cd3a <_rlrshift>
		decexp++;
    efd2:	3601      	adds	r6, #1
	if (c == 'f') {
    efd4:	2d66      	cmp	r5, #102	; 0x66
    efd6:	f040 80cf 	bne.w	f178 <z_prf+0x6f0>
		if (decexp > 0) {
    efda:	2e00      	cmp	r6, #0
    efdc:	f340 80b6 	ble.w	f14c <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    efe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    efe2:	2b00      	cmp	r3, #0
    efe4:	dd07      	ble.n	eff6 <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    efe6:	a913      	add	r1, sp, #76	; 0x4c
    efe8:	a814      	add	r0, sp, #80	; 0x50
    efea:	f00d fedf 	bl	1cdac <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    efee:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    eff0:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    eff4:	d1f4      	bne.n	efe0 <z_prf+0x558>
			zp->predot = decexp;
    eff6:	46b3      	mov	fp, r6
    eff8:	463b      	mov	r3, r7
			decexp = 0;
    effa:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    effc:	f1ba 0f00 	cmp.w	sl, #0
    f000:	d101      	bne.n	f006 <z_prf+0x57e>
    f002:	2c00      	cmp	r4, #0
    f004:	dd15      	ble.n	f032 <z_prf+0x5aa>
			*buf++ = '.';
    f006:	222e      	movs	r2, #46	; 0x2e
    f008:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    f00c:	2e00      	cmp	r6, #0
    f00e:	f000 80ae 	beq.w	f16e <z_prf+0x6e6>
    f012:	2c00      	cmp	r4, #0
    f014:	f340 80ad 	ble.w	f172 <z_prf+0x6ea>
			zp->postdot = -decexp;
    f018:	f1c6 0a00 	rsb	sl, r6, #0
    f01c:	45a2      	cmp	sl, r4
    f01e:	bfa8      	it	ge
    f020:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    f022:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    f026:	2c00      	cmp	r4, #0
    f028:	dd03      	ble.n	f032 <z_prf+0x5aa>
    f02a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f02c:	2a00      	cmp	r2, #0
    f02e:	f300 8094 	bgt.w	f15a <z_prf+0x6d2>
	if (prune_zero) {
    f032:	f1b8 0f00 	cmp.w	r8, #0
    f036:	f040 80b4 	bne.w	f1a2 <z_prf+0x71a>
	*buf = 0;
    f03a:	2200      	movs	r2, #0
	return buf - start;
    f03c:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    f03e:	701a      	strb	r2, [r3, #0]
	return buf - start;
    f040:	1b9b      	subs	r3, r3, r6
    f042:	e671      	b.n	ed28 <z_prf+0x2a0>
				exp--;
    f044:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    f046:	9b04      	ldr	r3, [sp, #16]
    f048:	18db      	adds	r3, r3, r3
    f04a:	9304      	str	r3, [sp, #16]
    f04c:	9b05      	ldr	r3, [sp, #20]
    f04e:	415b      	adcs	r3, r3
    f050:	9305      	str	r3, [sp, #20]
    f052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f056:	2a00      	cmp	r2, #0
    f058:	f173 0300 	sbcs.w	r3, r3, #0
    f05c:	daf2      	bge.n	f044 <z_prf+0x5bc>
    f05e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f062:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    f066:	e74f      	b.n	ef08 <z_prf+0x480>
			_rlrshift(&fract);
    f068:	a814      	add	r0, sp, #80	; 0x50
    f06a:	f00d fe66 	bl	1cd3a <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    f06e:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    f072:	2300      	movs	r3, #0
    f074:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    f078:	930b      	str	r3, [sp, #44]	; 0x2c
    f07a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    f07e:	2900      	cmp	r1, #0
    f080:	bf08      	it	eq
    f082:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    f086:	f108 0801 	add.w	r8, r8, #1
    f08a:	d2ed      	bcs.n	f068 <z_prf+0x5e0>
		fract *= 5U;
    f08c:	2005      	movs	r0, #5
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    f08e:	f04f 0e00 	mov.w	lr, #0
		fract *= 5U;
    f092:	fba2 2300 	umull	r2, r3, r2, r0
    f096:	fb00 330c 	mla	r3, r0, ip, r3
    f09a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    f09e:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    f0a0:	2100      	movs	r1, #0
    f0a2:	f04f 0c00 	mov.w	ip, #0
    f0a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    f0aa:	458c      	cmp	ip, r1
    f0ac:	bf08      	it	eq
    f0ae:	459b      	cmpeq	fp, r3
    f0b0:	d206      	bcs.n	f0c0 <z_prf+0x638>
    f0b2:	f1be 0f00 	cmp.w	lr, #0
    f0b6:	f43f af2e 	beq.w	ef16 <z_prf+0x48e>
    f0ba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    f0be:	e72a      	b.n	ef16 <z_prf+0x48e>
			fract <<= 1;
    f0c0:	1892      	adds	r2, r2, r2
			exp--;
    f0c2:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
    f0c6:	415b      	adcs	r3, r3
			exp--;
    f0c8:	f108 38ff 	add.w	r8, r8, #4294967295
    f0cc:	e7e8      	b.n	f0a0 <z_prf+0x618>
		_ldiv5(&fract);
    f0ce:	a814      	add	r0, sp, #80	; 0x50
    f0d0:	f00d fe44 	bl	1cd5c <_ldiv5>
		exp--;
    f0d4:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    f0d8:	f04f 0e00 	mov.w	lr, #0
		exp--;
    f0dc:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    f0e0:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    f0e2:	2300      	movs	r3, #0
    f0e4:	f04f 0c00 	mov.w	ip, #0
    f0e8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    f0ec:	459c      	cmp	ip, r3
    f0ee:	bf08      	it	eq
    f0f0:	4583      	cmpeq	fp, r0
    f0f2:	d206      	bcs.n	f102 <z_prf+0x67a>
    f0f4:	f1be 0f00 	cmp.w	lr, #0
    f0f8:	f43f af11 	beq.w	ef1e <z_prf+0x496>
    f0fc:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    f100:	e70d      	b.n	ef1e <z_prf+0x496>
			fract <<= 1;
    f102:	1849      	adds	r1, r1, r1
			exp--;
    f104:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
    f108:	4140      	adcs	r0, r0
			exp--;
    f10a:	f108 38ff 	add.w	r8, r8, #4294967295
    f10e:	e7e8      	b.n	f0e2 <z_prf+0x65a>
    f110:	2600      	movs	r6, #0
    f112:	46b0      	mov	r8, r6
    f114:	e707      	b.n	ef26 <z_prf+0x49e>
			precision -= decexp;
    f116:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    f118:	f1ba 0f00 	cmp.w	sl, #0
    f11c:	d104      	bne.n	f128 <z_prf+0x6a0>
			c = 'f';
    f11e:	2566      	movs	r5, #102	; 0x66
    f120:	e720      	b.n	ef64 <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    f122:	f04f 0800 	mov.w	r8, #0
    f126:	e723      	b.n	ef70 <z_prf+0x4e8>
    f128:	f04f 0800 	mov.w	r8, #0
    f12c:	e723      	b.n	ef76 <z_prf+0x4ee>
    f12e:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    f132:	f104 0b01 	add.w	fp, r4, #1
    f136:	e724      	b.n	ef82 <z_prf+0x4fa>
			exp = 0;
    f138:	f04f 0b00 	mov.w	fp, #0
    f13c:	e726      	b.n	ef8c <z_prf+0x504>
		_ldiv5(&ltemp);
    f13e:	a816      	add	r0, sp, #88	; 0x58
    f140:	f00d fe0c 	bl	1cd5c <_ldiv5>
		_rlrshift(&ltemp);
    f144:	a816      	add	r0, sp, #88	; 0x58
    f146:	f00d fdf8 	bl	1cd3a <_rlrshift>
    f14a:	e726      	b.n	ef9a <z_prf+0x512>
			*buf++ = '0';
    f14c:	463b      	mov	r3, r7
    f14e:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    f150:	f04f 0b00 	mov.w	fp, #0
			*buf++ = '0';
    f154:	f803 2b01 	strb.w	r2, [r3], #1
    f158:	e750      	b.n	effc <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    f15a:	a913      	add	r1, sp, #76	; 0x4c
    f15c:	a814      	add	r0, sp, #80	; 0x50
    f15e:	930a      	str	r3, [sp, #40]	; 0x28
    f160:	f00d fe24 	bl	1cdac <_get_digit>
    f164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    f166:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    f168:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    f16c:	e75b      	b.n	f026 <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    f16e:	46b2      	mov	sl, r6
    f170:	e759      	b.n	f026 <z_prf+0x59e>
    f172:	f04f 0a00 	mov.w	sl, #0
    f176:	e75c      	b.n	f032 <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    f178:	a913      	add	r1, sp, #76	; 0x4c
    f17a:	a814      	add	r0, sp, #80	; 0x50
    f17c:	f00d fe16 	bl	1cdac <_get_digit>
		if (*buf++ != '0') {
    f180:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    f182:	7038      	strb	r0, [r7, #0]
			decexp--;
    f184:	bf18      	it	ne
    f186:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    f18a:	f1ba 0f00 	cmp.w	sl, #0
    f18e:	d138      	bne.n	f202 <z_prf+0x77a>
    f190:	2c00      	cmp	r4, #0
    f192:	dc36      	bgt.n	f202 <z_prf+0x77a>
		if (*buf++ != '0') {
    f194:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    f196:	f1b8 0f00 	cmp.w	r8, #0
    f19a:	d044      	beq.n	f226 <z_prf+0x79e>
			zero.predot = zero.postdot = zero.trail = 0;
    f19c:	f04f 0b00 	mov.w	fp, #0
    f1a0:	46da      	mov	sl, fp
		while (*--buf == '0')
    f1a2:	4619      	mov	r1, r3
    f1a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    f1a8:	2a30      	cmp	r2, #48	; 0x30
    f1aa:	d0fa      	beq.n	f1a2 <z_prf+0x71a>
		if (*buf != '.') {
    f1ac:	2a2e      	cmp	r2, #46	; 0x2e
    f1ae:	bf18      	it	ne
    f1b0:	460b      	movne	r3, r1
    f1b2:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    f1b4:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    f1b8:	2a45      	cmp	r2, #69	; 0x45
    f1ba:	f47f af3e 	bne.w	f03a <z_prf+0x5b2>
		if (decexp < 0) {
    f1be:	2e00      	cmp	r6, #0
			*buf++ = '-';
    f1c0:	bfb4      	ite	lt
    f1c2:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    f1c4:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    f1c6:	4619      	mov	r1, r3
			decexp = -decexp;
    f1c8:	bfb8      	it	lt
    f1ca:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    f1cc:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    f1ce:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    f1d2:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    f1d4:	dd08      	ble.n	f1e8 <z_prf+0x760>
			*buf++ = (decexp / 100) + '0';
    f1d6:	2064      	movs	r0, #100	; 0x64
    f1d8:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    f1dc:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    f1e0:	f102 0530 	add.w	r5, r2, #48	; 0x30
    f1e4:	1cd9      	adds	r1, r3, #3
    f1e6:	709d      	strb	r5, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    f1e8:	200a      	movs	r0, #10
    f1ea:	fb96 f2f0 	sdiv	r2, r6, r0
    f1ee:	460b      	mov	r3, r1
		decexp %= 10;
    f1f0:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    f1f4:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    f1f8:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    f1fa:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    f1fe:	704e      	strb	r6, [r1, #1]
    f200:	e71b      	b.n	f03a <z_prf+0x5b2>
			*buf++ = '.';
    f202:	222e      	movs	r2, #46	; 0x2e
    f204:	1cbb      	adds	r3, r7, #2
    f206:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    f208:	2c00      	cmp	r4, #0
    f20a:	ddc4      	ble.n	f196 <z_prf+0x70e>
    f20c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f20e:	2a00      	cmp	r2, #0
    f210:	ddc1      	ble.n	f196 <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    f212:	a913      	add	r1, sp, #76	; 0x4c
    f214:	a814      	add	r0, sp, #80	; 0x50
    f216:	930a      	str	r3, [sp, #40]	; 0x28
    f218:	f00d fdc8 	bl	1cdac <_get_digit>
    f21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    f21e:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    f220:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    f224:	e7f0      	b.n	f208 <z_prf+0x780>
			zero.predot = zero.postdot = zero.trail = 0;
    f226:	46c3      	mov	fp, r8
    f228:	46c2      	mov	sl, r8
    f22a:	e7c3      	b.n	f1b4 <z_prf+0x72c>
					prefix = 1;
    f22c:	f04f 0801 	mov.w	r8, #1
    f230:	e58a      	b.n	ed48 <z_prf+0x2c0>
				switch (i) {
    f232:	4632      	mov	r2, r6
    f234:	f852 3b04 	ldr.w	r3, [r2], #4
    f238:	2f68      	cmp	r7, #104	; 0x68
    f23a:	9201      	str	r2, [sp, #4]
    f23c:	d006      	beq.n	f24c <z_prf+0x7c4>
    f23e:	2f6c      	cmp	r7, #108	; 0x6c
    f240:	d009      	beq.n	f256 <z_prf+0x7ce>
    f242:	2f48      	cmp	r7, #72	; 0x48
    f244:	d107      	bne.n	f256 <z_prf+0x7ce>
					*va_arg(vargs, char *) = count;
    f246:	9a02      	ldr	r2, [sp, #8]
    f248:	701a      	strb	r2, [r3, #0]
					break;
    f24a:	e001      	b.n	f250 <z_prf+0x7c8>
					*va_arg(vargs, short *) = count;
    f24c:	9a02      	ldr	r2, [sp, #8]
    f24e:	801a      	strh	r2, [r3, #0]
				continue;
    f250:	9e01      	ldr	r6, [sp, #4]
    f252:	9a06      	ldr	r2, [sp, #24]
    f254:	e420      	b.n	ea98 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    f256:	9a02      	ldr	r2, [sp, #8]
    f258:	601a      	str	r2, [r3, #0]
					break;
    f25a:	e7f9      	b.n	f250 <z_prf+0x7c8>
		*buf++ = '0';
    f25c:	f647 0330 	movw	r3, #30768	; 0x7830
    f260:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    f264:	4633      	mov	r3, r6
    f266:	f853 1b04 	ldr.w	r1, [r3], #4
    f26a:	2210      	movs	r2, #16
    f26c:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    f270:	9301      	str	r3, [sp, #4]
    f272:	f00d fd3e 	bl	1ccf2 <_to_x>
				prefix = 2;
    f276:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    f27a:	1c86      	adds	r6, r0, #2
				break;
    f27c:	e603      	b.n	ee86 <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    f27e:	4633      	mov	r3, r6
					precision = INT_MAX;
    f280:	2c00      	cmp	r4, #0
    f282:	bfb8      	it	lt
    f284:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    f288:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    f28a:	f853 7b04 	ldr.w	r7, [r3], #4
    f28e:	9301      	str	r3, [sp, #4]
				for (clen = 0; clen < precision; clen++) {
    f290:	42b4      	cmp	r4, r6
    f292:	d103      	bne.n	f29c <z_prf+0x814>
    f294:	4626      	mov	r6, r4
    f296:	2400      	movs	r4, #0
    f298:	46a0      	mov	r8, r4
    f29a:	e578      	b.n	ed8e <z_prf+0x306>
					if (cptr[clen] == '\0') {
    f29c:	5dbb      	ldrb	r3, [r7, r6]
    f29e:	2b00      	cmp	r3, #0
    f2a0:	d05b      	beq.n	f35a <z_prf+0x8d2>
				for (clen = 0; clen < precision; clen++) {
    f2a2:	3601      	adds	r6, #1
    f2a4:	e7f4      	b.n	f290 <z_prf+0x808>
				switch (i) {
    f2a6:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    f2a8:	2d6f      	cmp	r5, #111	; 0x6f
    f2aa:	6831      	ldr	r1, [r6, #0]
    f2ac:	9301      	str	r3, [sp, #4]
    f2ae:	d119      	bne.n	f2e4 <z_prf+0x85c>
	if (alt_form) {
    f2b0:	f1ba 0f00 	cmp.w	sl, #0
    f2b4:	d008      	beq.n	f2c8 <z_prf+0x840>
		*buf++ = '0';
    f2b6:	2330      	movs	r3, #48	; 0x30
    f2b8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    f2bc:	b979      	cbnz	r1, f2de <z_prf+0x856>
			prefix = 0;
    f2be:	4688      	mov	r8, r1
			return 1;
    f2c0:	2601      	movs	r6, #1
			*buf++ = 0;
    f2c2:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			return 1;
    f2c6:	e5de      	b.n	ee86 <z_prf+0x3fe>
    f2c8:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    f2ca:	4628      	mov	r0, r5
    f2cc:	2208      	movs	r2, #8
    f2ce:	f00d fd10 	bl	1ccf2 <_to_x>
    f2d2:	ae19      	add	r6, sp, #100	; 0x64
    f2d4:	1bad      	subs	r5, r5, r6
    f2d6:	182e      	adds	r6, r5, r0
			prefix = 0;
    f2d8:	f04f 0800 	mov.w	r8, #0
    f2dc:	e5d3      	b.n	ee86 <z_prf+0x3fe>
		*buf++ = '0';
    f2de:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    f2e2:	e7f2      	b.n	f2ca <z_prf+0x842>
				} else if (c == 'u') {
    f2e4:	2d75      	cmp	r5, #117	; 0x75
    f2e6:	d105      	bne.n	f2f4 <z_prf+0x86c>
	return _to_x(buf, value, 10);
    f2e8:	220a      	movs	r2, #10
    f2ea:	a819      	add	r0, sp, #100	; 0x64
    f2ec:	f00d fd01 	bl	1ccf2 <_to_x>
    f2f0:	4606      	mov	r6, r0
    f2f2:	e7f1      	b.n	f2d8 <z_prf+0x850>
	if (alt_form) {
    f2f4:	f1ba 0f00 	cmp.w	sl, #0
    f2f8:	d011      	beq.n	f31e <z_prf+0x896>
		*buf++ = '0';
    f2fa:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    f2fe:	f10d 0766 	add.w	r7, sp, #102	; 0x66
		*buf++ = '0';
    f302:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    f306:	2210      	movs	r2, #16
    f308:	4638      	mov	r0, r7
    f30a:	f00d fcf2 	bl	1ccf2 <_to_x>
	if (prefix == 'X') {
    f30e:	2d58      	cmp	r5, #88	; 0x58
    f310:	d007      	beq.n	f322 <z_prf+0x89a>
	return len + (buf - buf0);
    f312:	ab19      	add	r3, sp, #100	; 0x64
    f314:	1aff      	subs	r7, r7, r3
    f316:	183e      	adds	r6, r7, r0
						prefix = 2;
    f318:	ea4f 084a 	mov.w	r8, sl, lsl #1
    f31c:	e5b3      	b.n	ee86 <z_prf+0x3fe>
    f31e:	af19      	add	r7, sp, #100	; 0x64
    f320:	e7f1      	b.n	f306 <z_prf+0x87e>
    f322:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    f324:	f812 3b01 	ldrb.w	r3, [r2], #1
    f328:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    f32c:	2919      	cmp	r1, #25
    f32e:	d803      	bhi.n	f338 <z_prf+0x8b0>
			*buf += 'A' - 'a';
    f330:	3b20      	subs	r3, #32
    f332:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    f336:	e7f5      	b.n	f324 <z_prf+0x89c>
    f338:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    f33c:	2b00      	cmp	r3, #0
    f33e:	d1f1      	bne.n	f324 <z_prf+0x89c>
    f340:	e7e7      	b.n	f312 <z_prf+0x88a>
				PUTC('%');
    f342:	4649      	mov	r1, r9
    f344:	4628      	mov	r0, r5
    f346:	f7ff bbb0 	b.w	eaaa <z_prf+0x22>
				count++;
    f34a:	9b02      	ldr	r3, [sp, #8]
    f34c:	3301      	adds	r3, #1
				continue;
    f34e:	e9cd 6301 	strd	r6, r3, [sp, #4]
    f352:	e77d      	b.n	f250 <z_prf+0x7c8>
					prefix = 1;
    f354:	f04f 0801 	mov.w	r8, #1
    f358:	e595      	b.n	ee86 <z_prf+0x3fe>
    f35a:	461c      	mov	r4, r3
    f35c:	e79c      	b.n	f298 <z_prf+0x810>
				zero_head = 0;
    f35e:	2300      	movs	r3, #0
			cptr = buf;
    f360:	af19      	add	r7, sp, #100	; 0x64
    f362:	e51c      	b.n	ed9e <z_prf+0x316>
				zero_head = 0;
    f364:	9b08      	ldr	r3, [sp, #32]
    f366:	af19      	add	r7, sp, #100	; 0x64
    f368:	e519      	b.n	ed9e <z_prf+0x316>
    f36a:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    f36c:	4649      	mov	r1, r9
    f36e:	9b03      	ldr	r3, [sp, #12]
    f370:	2020      	movs	r0, #32
    f372:	9207      	str	r2, [sp, #28]
    f374:	4798      	blx	r3
    f376:	3001      	adds	r0, #1
    f378:	9a07      	ldr	r2, [sp, #28]
    f37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f37c:	f43f ab9a 	beq.w	eab4 <z_prf+0x2c>
				while (width-- > 0) {
    f380:	3a01      	subs	r2, #1
    f382:	d2f2      	bcs.n	f36a <z_prf+0x8e2>
				count += width;
    f384:	9902      	ldr	r1, [sp, #8]
    f386:	4429      	add	r1, r5
    f388:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    f38a:	4615      	mov	r5, r2
    f38c:	e511      	b.n	edb2 <z_prf+0x32a>
    f38e:	462a      	mov	r2, r5
    f390:	e7f6      	b.n	f380 <z_prf+0x8f8>
    f392:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    f394:	4649      	mov	r1, r9
    f396:	9b03      	ldr	r3, [sp, #12]
    f398:	f817 0b01 	ldrb.w	r0, [r7], #1
    f39c:	9207      	str	r2, [sp, #28]
    f39e:	4798      	blx	r3
    f3a0:	3001      	adds	r0, #1
    f3a2:	9a07      	ldr	r2, [sp, #28]
    f3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f3a6:	f47f ad06 	bne.w	edb6 <z_prf+0x32e>
    f3aa:	f7ff bb83 	b.w	eab4 <z_prf+0x2c>
    f3ae:	9307      	str	r3, [sp, #28]
				PUTC('0');
    f3b0:	4649      	mov	r1, r9
    f3b2:	9b03      	ldr	r3, [sp, #12]
    f3b4:	2030      	movs	r0, #48	; 0x30
    f3b6:	4798      	blx	r3
    f3b8:	3001      	adds	r0, #1
    f3ba:	9b07      	ldr	r3, [sp, #28]
    f3bc:	f47f acfe 	bne.w	edbc <z_prf+0x334>
    f3c0:	f7ff bb78 	b.w	eab4 <z_prf+0x2c>
					PUTC(c);
    f3c4:	4649      	mov	r1, r9
    f3c6:	9b03      	ldr	r3, [sp, #12]
    f3c8:	4798      	blx	r3
    f3ca:	3001      	adds	r0, #1
    f3cc:	f43f ab72 	beq.w	eab4 <z_prf+0x2c>
					c = *++cptr;
    f3d0:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    f3d4:	e4fd      	b.n	edd2 <z_prf+0x34a>
					PUTC('0');
    f3d6:	4649      	mov	r1, r9
    f3d8:	2030      	movs	r0, #48	; 0x30
    f3da:	9b03      	ldr	r3, [sp, #12]
    f3dc:	4798      	blx	r3
    f3de:	3001      	adds	r0, #1
    f3e0:	f47f acff 	bne.w	ede2 <z_prf+0x35a>
    f3e4:	f7ff bb66 	b.w	eab4 <z_prf+0x2c>
					PUTC('0');
    f3e8:	4649      	mov	r1, r9
    f3ea:	2030      	movs	r0, #48	; 0x30
    f3ec:	9b03      	ldr	r3, [sp, #12]
    f3ee:	4798      	blx	r3
    f3f0:	3001      	adds	r0, #1
    f3f2:	f108 38ff 	add.w	r8, r8, #4294967295
    f3f6:	f47f ad0e 	bne.w	ee16 <z_prf+0x38e>
    f3fa:	f7ff bb5b 	b.w	eab4 <z_prf+0x2c>
					PUTC(c);
    f3fe:	4649      	mov	r1, r9
    f400:	9b03      	ldr	r3, [sp, #12]
    f402:	4798      	blx	r3
    f404:	3001      	adds	r0, #1
    f406:	f43f ab55 	beq.w	eab4 <z_prf+0x2c>
					c = *++cptr;
    f40a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    f40e:	e50c      	b.n	ee2a <z_prf+0x3a2>
					PUTC('0');
    f410:	4649      	mov	r1, r9
    f412:	2030      	movs	r0, #48	; 0x30
    f414:	9b03      	ldr	r3, [sp, #12]
    f416:	4798      	blx	r3
    f418:	3001      	adds	r0, #1
    f41a:	f108 38ff 	add.w	r8, r8, #4294967295
    f41e:	f47f ad0f 	bne.w	ee40 <z_prf+0x3b8>
    f422:	f7ff bb47 	b.w	eab4 <z_prf+0x2c>
				PUTC(*cptr++);
    f426:	4649      	mov	r1, r9
    f428:	f817 0b01 	ldrb.w	r0, [r7], #1
    f42c:	9b03      	ldr	r3, [sp, #12]
    f42e:	4798      	blx	r3
    f430:	3001      	adds	r0, #1
    f432:	f43f ab3f 	beq.w	eab4 <z_prf+0x2c>
			while (clen-- > 0) {
    f436:	1bf3      	subs	r3, r6, r7
    f438:	2b00      	cmp	r3, #0
    f43a:	dcf4      	bgt.n	f426 <z_prf+0x99e>
			count += clen;
    f43c:	9b02      	ldr	r3, [sp, #8]
    f43e:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    f440:	2d00      	cmp	r5, #0
			count += clen;
    f442:	4413      	add	r3, r2
    f444:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    f446:	f77f af03 	ble.w	f250 <z_prf+0x7c8>
    f44a:	462c      	mov	r4, r5
    f44c:	e006      	b.n	f45c <z_prf+0x9d4>
					PUTC(' ');
    f44e:	4649      	mov	r1, r9
    f450:	2020      	movs	r0, #32
    f452:	9b03      	ldr	r3, [sp, #12]
    f454:	4798      	blx	r3
    f456:	3001      	adds	r0, #1
    f458:	f43f ab2c 	beq.w	eab4 <z_prf+0x2c>
				while (width-- > 0) {
    f45c:	3c01      	subs	r4, #1
    f45e:	d2f6      	bcs.n	f44e <z_prf+0x9c6>
				count += width;
    f460:	9b02      	ldr	r3, [sp, #8]
    f462:	442b      	add	r3, r5
    f464:	9302      	str	r3, [sp, #8]
    f466:	e6f3      	b.n	f250 <z_prf+0x7c8>

0000f468 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    f468:	4b01      	ldr	r3, [pc, #4]	; (f470 <__stdout_hook_install+0x8>)
    f46a:	6018      	str	r0, [r3, #0]
}
    f46c:	4770      	bx	lr
    f46e:	bf00      	nop
    f470:	200200a8 	.word	0x200200a8

0000f474 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    f474:	2902      	cmp	r1, #2
    f476:	d102      	bne.n	f47e <z_impl_zephyr_fputc+0xa>
    f478:	4b02      	ldr	r3, [pc, #8]	; (f484 <z_impl_zephyr_fputc+0x10>)
    f47a:	681b      	ldr	r3, [r3, #0]
    f47c:	4718      	bx	r3
}
    f47e:	f04f 30ff 	mov.w	r0, #4294967295
    f482:	4770      	bx	lr
    f484:	200200a8 	.word	0x200200a8

0000f488 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    f488:	b40c      	push	{r2, r3}
    f48a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    f48c:	b909      	cbnz	r1, f492 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    f48e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    f492:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    f496:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    f498:	9a06      	ldr	r2, [sp, #24]
    f49a:	a902      	add	r1, sp, #8
    f49c:	4805      	ldr	r0, [pc, #20]	; (f4b4 <snprintf+0x2c>)
	va_start(vargs, format);
    f49e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    f4a0:	f7ff faf2 	bl	ea88 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    f4a4:	2200      	movs	r2, #0
    f4a6:	9b02      	ldr	r3, [sp, #8]
    f4a8:	701a      	strb	r2, [r3, #0]
	return r;
}
    f4aa:	b005      	add	sp, #20
    f4ac:	f85d eb04 	ldr.w	lr, [sp], #4
    f4b0:	b002      	add	sp, #8
    f4b2:	4770      	bx	lr
    f4b4:	0001cde5 	.word	0x0001cde5

0000f4b8 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    f4b8:	b40f      	push	{r0, r1, r2, r3}
    f4ba:	b507      	push	{r0, r1, r2, lr}
    f4bc:	ab04      	add	r3, sp, #16
    f4be:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = z_prf(fputc, DESC(stdout), format, vargs);
    f4c2:	2102      	movs	r1, #2
    f4c4:	4804      	ldr	r0, [pc, #16]	; (f4d8 <printf+0x20>)
	va_start(vargs, format);
    f4c6:	9301      	str	r3, [sp, #4]
	r = z_prf(fputc, DESC(stdout), format, vargs);
    f4c8:	f7ff fade 	bl	ea88 <z_prf>
	va_end(vargs);

	return r;
}
    f4cc:	b003      	add	sp, #12
    f4ce:	f85d eb04 	ldr.w	lr, [sp], #4
    f4d2:	b004      	add	sp, #16
    f4d4:	4770      	bx	lr
    f4d6:	bf00      	nop
    f4d8:	0001cde1 	.word	0x0001cde1

0000f4dc <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
    f4dc:	2128      	movs	r1, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    f4de:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
    f4e0:	4a04      	ldr	r2, [pc, #16]	; (f4f4 <net_buf_id+0x18>)
    f4e2:	fb01 2303 	mla	r3, r1, r3, r2
    f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f4e8:	1ac0      	subs	r0, r0, r3
}
    f4ea:	4b03      	ldr	r3, [pc, #12]	; (f4f8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    f4ec:	10c0      	asrs	r0, r0, #3
}
    f4ee:	4358      	muls	r0, r3
    f4f0:	4770      	bx	lr
    f4f2:	bf00      	nop
    f4f4:	200206c0 	.word	0x200206c0
    f4f8:	aaaaaaab 	.word	0xaaaaaaab

0000f4fc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    f4fc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    f4fe:	2428      	movs	r4, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    f500:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    f502:	4a09      	ldr	r2, [pc, #36]	; (f528 <fixed_data_alloc+0x2c>)
    f504:	fb04 2303 	mla	r3, r4, r3, r2
    f508:	6a1b      	ldr	r3, [r3, #32]

	*size = MIN(fixed->data_size, *size);
    f50a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    f50c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    f50e:	6823      	ldr	r3, [r4, #0]
    f510:	429a      	cmp	r2, r3
    f512:	bf94      	ite	ls
    f514:	600a      	strls	r2, [r1, #0]
    f516:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    f518:	f7ff ffe0 	bl	f4dc <net_buf_id>
    f51c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    f520:	fb02 3000 	mla	r0, r2, r0, r3
    f524:	bd10      	pop	{r4, pc}
    f526:	bf00      	nop
    f528:	200206c0 	.word	0x200206c0

0000f52c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    f52c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f530:	4605      	mov	r5, r0
    f532:	9101      	str	r1, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
    f534:	4610      	mov	r0, r2
    f536:	4619      	mov	r1, r3
{
    f538:	4616      	mov	r6, r2
    f53a:	461f      	mov	r7, r3
	u64_t end = z_timeout_end_calc(timeout);
    f53c:	f011 f932 	bl	207a4 <z_timeout_end_calc>
    f540:	4680      	mov	r8, r0
    f542:	4689      	mov	r9, r1
    f544:	f04f 0320 	mov.w	r3, #32
    f548:	f3ef 8a11 	mrs	sl, BASEPRI
    f54c:	f383 8811 	msr	BASEPRI, r3
    f550:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    f554:	8b6b      	ldrh	r3, [r5, #26]
    f556:	2b00      	cmp	r3, #0
    f558:	d054      	beq.n	f604 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    f55a:	8b2a      	ldrh	r2, [r5, #24]
    f55c:	429a      	cmp	r2, r3
    f55e:	d93d      	bls.n	f5dc <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
    f560:	2200      	movs	r2, #0
    f562:	2300      	movs	r3, #0
    f564:	4628      	mov	r0, r5
    f566:	f00b fd1b 	bl	1afa0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    f56a:	4604      	mov	r4, r0
    f56c:	2800      	cmp	r0, #0
    f56e:	d035      	beq.n	f5dc <net_buf_alloc_len+0xb0>
	__asm__ volatile(
    f570:	f38a 8811 	msr	BASEPRI, sl
    f574:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    f578:	9b01      	ldr	r3, [sp, #4]
    f57a:	2b00      	cmp	r3, #0
    f57c:	d052      	beq.n	f624 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    f57e:	ea56 0307 	orrs.w	r3, r6, r7
    f582:	d010      	beq.n	f5a6 <net_buf_alloc_len+0x7a>
    f584:	1c7b      	adds	r3, r7, #1
    f586:	bf08      	it	eq
    f588:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    f58c:	d00b      	beq.n	f5a6 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
    f58e:	f00c fb2f 	bl	1bbf0 <z_tick_get>
    f592:	ebb8 0600 	subs.w	r6, r8, r0
    f596:	eb69 0701 	sbc.w	r7, r9, r1
    f59a:	2e00      	cmp	r6, #0
    f59c:	f177 0300 	sbcs.w	r3, r7, #0
    f5a0:	bfbc      	itt	lt
    f5a2:	2600      	movlt	r6, #0
    f5a4:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
    f5a6:	2228      	movs	r2, #40	; 0x28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    f5a8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    f5aa:	f8df 8090 	ldr.w	r8, [pc, #144]	; f63c <net_buf_alloc_len+0x110>
    f5ae:	4620      	mov	r0, r4
    f5b0:	fb02 8303 	mla	r3, r2, r3, r8
    f5b4:	6a1b      	ldr	r3, [r3, #32]
    f5b6:	4632      	mov	r2, r6
    f5b8:	681b      	ldr	r3, [r3, #0]
    f5ba:	a901      	add	r1, sp, #4
    f5bc:	681d      	ldr	r5, [r3, #0]
    f5be:	463b      	mov	r3, r7
    f5c0:	47a8      	blx	r5
    f5c2:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    f5c4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    f5c6:	bb70      	cbnz	r0, f626 <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    f5c8:	79a0      	ldrb	r0, [r4, #6]
    f5ca:	4621      	mov	r1, r4
    f5cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f5d0:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    f5d4:	f010 fed7 	bl	20386 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    f5d8:	462c      	mov	r4, r5
}
    f5da:	e01f      	b.n	f61c <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
    f5dc:	8b68      	ldrh	r0, [r5, #26]
    f5de:	1e43      	subs	r3, r0, #1
    f5e0:	836b      	strh	r3, [r5, #26]
    f5e2:	f38a 8811 	msr	BASEPRI, sl
    f5e6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    f5ea:	2318      	movs	r3, #24
    f5ec:	8b2c      	ldrh	r4, [r5, #24]
    f5ee:	1a24      	subs	r4, r4, r0
    f5f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f5f2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    f5f6:	4811      	ldr	r0, [pc, #68]	; (f63c <net_buf_alloc_len+0x110>)
    f5f8:	4b11      	ldr	r3, [pc, #68]	; (f640 <net_buf_alloc_len+0x114>)
    f5fa:	1a2d      	subs	r5, r5, r0
    f5fc:	10ed      	asrs	r5, r5, #3
    f5fe:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    f600:	71a5      	strb	r5, [r4, #6]
		goto success;
    f602:	e7b9      	b.n	f578 <net_buf_alloc_len+0x4c>
    f604:	f38a 8811 	msr	BASEPRI, sl
    f608:	f3bf 8f6f 	isb	sy
    f60c:	4632      	mov	r2, r6
    f60e:	463b      	mov	r3, r7
    f610:	4628      	mov	r0, r5
    f612:	f00b fcc5 	bl	1afa0 <z_impl_k_queue_get>
	if (!buf) {
    f616:	4604      	mov	r4, r0
    f618:	2800      	cmp	r0, #0
    f61a:	d1ad      	bne.n	f578 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
    f61c:	4620      	mov	r0, r4
    f61e:	b002      	add	sp, #8
    f620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
    f624:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    f626:	2300      	movs	r3, #0
	buf->ref   = 1U;
    f628:	2201      	movs	r2, #1
	buf->frags = NULL;
    f62a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    f62c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    f62e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    f630:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    f632:	6923      	ldr	r3, [r4, #16]
    f634:	81e2      	strh	r2, [r4, #14]
    f636:	60a3      	str	r3, [r4, #8]
	return buf;
    f638:	e7f0      	b.n	f61c <net_buf_alloc_len+0xf0>
    f63a:	bf00      	nop
    f63c:	200206c0 	.word	0x200206c0
    f640:	cccccccd 	.word	0xcccccccd

0000f644 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    f644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f648:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    f64a:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    f64c:	2728      	movs	r7, #40	; 0x28
    f64e:	4d16      	ldr	r5, [pc, #88]	; (f6a8 <net_buf_unref+0x64>)
	while (buf) {
    f650:	b90c      	cbnz	r4, f656 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    f652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    f656:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    f658:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    f65c:	3b01      	subs	r3, #1
    f65e:	b2db      	uxtb	r3, r3
    f660:	7123      	strb	r3, [r4, #4]
    f662:	2b00      	cmp	r3, #0
    f664:	d1f5      	bne.n	f652 <net_buf_unref+0xe>
		if (buf->__buf) {
    f666:	6921      	ldr	r1, [r4, #16]
    f668:	b159      	cbz	r1, f682 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    f66a:	7963      	ldrb	r3, [r4, #5]
    f66c:	079b      	lsls	r3, r3, #30
    f66e:	d407      	bmi.n	f680 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
    f670:	79a3      	ldrb	r3, [r4, #6]
    f672:	4620      	mov	r0, r4
    f674:	fb07 5303 	mla	r3, r7, r3, r5
    f678:	6a1b      	ldr	r3, [r3, #32]
    f67a:	681b      	ldr	r3, [r3, #0]
    f67c:	689b      	ldr	r3, [r3, #8]
    f67e:	4798      	blx	r3
			buf->__buf = NULL;
    f680:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    f682:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    f684:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    f686:	fb07 5300 	mla	r3, r7, r0, r5
    f68a:	69db      	ldr	r3, [r3, #28]
		buf->frags = NULL;
    f68c:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    f68e:	b11b      	cbz	r3, f698 <net_buf_unref+0x54>
			pool->destroy(buf);
    f690:	4620      	mov	r0, r4
    f692:	4798      	blx	r3
{
    f694:	4644      	mov	r4, r8
    f696:	e7db      	b.n	f650 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    f698:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f69c:	4621      	mov	r1, r4
    f69e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    f6a2:	f010 fe70 	bl	20386 <k_queue_prepend>
}
    f6a6:	e7f5      	b.n	f694 <net_buf_unref+0x50>
    f6a8:	200206c0 	.word	0x200206c0

0000f6ac <k_delayed_work_submit>:
 * @retval -EINVAL Work item is being processed or has completed its work.
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
    f6ac:	4601      	mov	r1, r0
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    f6ae:	4801      	ldr	r0, [pc, #4]	; (f6b4 <k_delayed_work_submit+0x8>)
    f6b0:	f00c b930 	b.w	1b914 <k_delayed_work_submit_to_queue>
    f6b4:	20021b68 	.word	0x20021b68

0000f6b8 <address_lifetime_timeout>:
{
    f6b8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t current_time = k_uptime_get_32();
    f6bc:	f00d fd0f 	bl	1d0de <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    f6c0:	4b3e      	ldr	r3, [pc, #248]	; (f7bc <address_lifetime_timeout+0x104>)
	u32_t current_time = k_uptime_get_32();
    f6c2:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    f6c4:	681c      	ldr	r4, [r3, #0]
    f6c6:	b3b4      	cbz	r4, f736 <address_lifetime_timeout+0x7e>
    f6c8:	f1b4 0514 	subs.w	r5, r4, #20
    f6cc:	d035      	beq.n	f73a <address_lifetime_timeout+0x82>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f6ce:	6824      	ldr	r4, [r4, #0]
    f6d0:	b104      	cbz	r4, f6d4 <address_lifetime_timeout+0x1c>
    f6d2:	3c14      	subs	r4, #20
    f6d4:	f04f 0900 	mov.w	r9, #0
    f6d8:	f04f 36ff 	mov.w	r6, #4294967295
    f6dc:	f04f 37ff 	mov.w	r7, #4294967295
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
    f6e0:	f8df b0dc 	ldr.w	fp, [pc, #220]	; f7c0 <address_lifetime_timeout+0x108>
	sys_slist_find_and_remove(&active_address_lifetime_timers,
    f6e4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; f7bc <address_lifetime_timeout+0x104>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    f6e8:	bb4d      	cbnz	r5, f73e <address_lifetime_timeout+0x86>
	if (found) {
    f6ea:	f1b9 0f00 	cmp.w	r9, #0
    f6ee:	d061      	beq.n	f7b4 <address_lifetime_timeout+0xfc>
    f6f0:	2300      	movs	r3, #0
    f6f2:	4a33      	ldr	r2, [pc, #204]	; (f7c0 <address_lifetime_timeout+0x108>)
    f6f4:	42bb      	cmp	r3, r7
    f6f6:	bf08      	it	eq
    f6f8:	42b2      	cmpeq	r2, r6
    f6fa:	bf38      	it	cc
    f6fc:	4616      	movcc	r6, r2
    f6fe:	f240 34e7 	movw	r4, #999	; 0x3e7
    f702:	bf38      	it	cc
    f704:	461f      	movcc	r7, r3
    f706:	03f0      	lsls	r0, r6, #15
    f708:	1900      	adds	r0, r0, r4
    f70a:	f04f 0400 	mov.w	r4, #0
    f70e:	ea4f 31c7 	mov.w	r1, r7, lsl #15
    f712:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
    f716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f71a:	f04f 0300 	mov.w	r3, #0
    f71e:	eb44 0101 	adc.w	r1, r4, r1
    f722:	f7fc ff49 	bl	c5b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&address_lifetime_timer,
    f726:	4623      	mov	r3, r4
    f728:	4602      	mov	r2, r0
    f72a:	4826      	ldr	r0, [pc, #152]	; (f7c4 <address_lifetime_timeout+0x10c>)
}
    f72c:	b001      	add	sp, #4
    f72e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_submit(&address_lifetime_timer,
    f732:	f7ff bfbb 	b.w	f6ac <k_delayed_work_submit>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    f736:	4625      	mov	r5, r4
    f738:	e7cc      	b.n	f6d4 <address_lifetime_timeout+0x1c>
    f73a:	462c      	mov	r4, r5
    f73c:	e7ca      	b.n	f6d4 <address_lifetime_timeout+0x1c>
	if (counter > 0) {
    f73e:	6a29      	ldr	r1, [r5, #32]
    f740:	b9d9      	cbnz	r1, f77a <address_lifetime_timeout+0xc2>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
    f742:	69ab      	ldr	r3, [r5, #24]
    f744:	69ea      	ldr	r2, [r5, #28]
    f746:	eba3 0308 	sub.w	r3, r3, r8
    f74a:	4413      	add	r3, r2
    f74c:	2b00      	cmp	r3, #0
    f74e:	dc2e      	bgt.n	f7ae <address_lifetime_timeout+0xf6>
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
    f750:	2302      	movs	r3, #2
	ifaddr->lifetime.timer_timeout = 0;
    f752:	61e9      	str	r1, [r5, #28]
	sys_slist_find_and_remove(&active_address_lifetime_timers,
    f754:	4650      	mov	r0, sl
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
    f756:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	sys_slist_find_and_remove(&active_address_lifetime_timers,
    f75a:	f105 0114 	add.w	r1, r5, #20
    f75e:	f00d fc58 	bl	1d012 <sys_slist_find_and_remove>
		if (current == next) {
    f762:	42a5      	cmp	r5, r4
    f764:	d0c1      	beq.n	f6ea <address_lifetime_timeout+0x32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    f766:	b304      	cbz	r4, f7aa <address_lifetime_timeout+0xf2>
Z_GENLIST_PEEK_NEXT(slist, snode)
    f768:	f114 0314 	adds.w	r3, r4, #20
    f76c:	d002      	beq.n	f774 <address_lifetime_timeout+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f76e:	6963      	ldr	r3, [r4, #20]
    f770:	b103      	cbz	r3, f774 <address_lifetime_timeout+0xbc>
    f772:	3b14      	subs	r3, #20
    f774:	4625      	mov	r5, r4
    f776:	461c      	mov	r4, r3
    f778:	e7b6      	b.n	f6e8 <address_lifetime_timeout+0x30>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
    f77a:	45d8      	cmp	r8, fp
    f77c:	d105      	bne.n	f78a <address_lifetime_timeout+0xd2>
		ifaddr->lifetime.timer_start = k_uptime_get_32();
    f77e:	f00d fcae 	bl	1d0de <k_uptime_get_32>
		ifaddr->lifetime.wrap_counter--;
    f782:	6a2b      	ldr	r3, [r5, #32]
		ifaddr->lifetime.timer_start = k_uptime_get_32();
    f784:	61a8      	str	r0, [r5, #24]
		ifaddr->lifetime.wrap_counter--;
    f786:	3b01      	subs	r3, #1
    f788:	622b      	str	r3, [r5, #32]
	if (ifaddr->lifetime.wrap_counter > 0) {
    f78a:	6a2b      	ldr	r3, [r5, #32]
    f78c:	2b00      	cmp	r3, #0
    f78e:	dc0a      	bgt.n	f7a6 <address_lifetime_timeout+0xee>
		*next_wakeup = ifaddr->lifetime.timer_timeout;
    f790:	69ea      	ldr	r2, [r5, #28]
			if (next_timeout < timeout_update) {
    f792:	2300      	movs	r3, #0
    f794:	42bb      	cmp	r3, r7
    f796:	bf08      	it	eq
    f798:	42b2      	cmpeq	r2, r6
    f79a:	bf3e      	ittt	cc
    f79c:	4616      	movcc	r6, r2
    f79e:	461f      	movcc	r7, r3
				found = true;
    f7a0:	f04f 0901 	movcc.w	r9, #1
    f7a4:	e7dd      	b.n	f762 <address_lifetime_timeout+0xaa>
		*next_wakeup = NET_TIMEOUT_MAX_VALUE;
    f7a6:	465a      	mov	r2, fp
    f7a8:	e7f3      	b.n	f792 <address_lifetime_timeout+0xda>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
    f7aa:	4623      	mov	r3, r4
    f7ac:	e7e2      	b.n	f774 <address_lifetime_timeout+0xbc>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
    f7ae:	45d8      	cmp	r8, fp
    f7b0:	d1ee      	bne.n	f790 <address_lifetime_timeout+0xd8>
    f7b2:	e7e4      	b.n	f77e <address_lifetime_timeout+0xc6>
}
    f7b4:	b001      	add	sp, #4
    f7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7ba:	bf00      	nop
    f7bc:	20020918 	.word	0x20020918
    f7c0:	7fffff9b 	.word	0x7fffff9b
    f7c4:	20020940 	.word	0x20020940

0000f7c8 <iface_router_run_timer>:
{
    f7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7cc:	4605      	mov	r5, r0
	if (k_delayed_work_remaining_get(&router_timer)) {
    f7ce:	481c      	ldr	r0, [pc, #112]	; (f840 <iface_router_run_timer+0x78>)
    f7d0:	f00d fc95 	bl	1d0fe <k_delayed_work_remaining_get>
    f7d4:	b110      	cbz	r0, f7dc <iface_router_run_timer+0x14>
		k_delayed_work_cancel(&router_timer);
    f7d6:	481a      	ldr	r0, [pc, #104]	; (f840 <iface_router_run_timer+0x78>)
    f7d8:	f010 ff78 	bl	206cc <k_delayed_work_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    f7dc:	4b19      	ldr	r3, [pc, #100]	; (f844 <iface_router_run_timer+0x7c>)
    f7de:	681c      	ldr	r4, [r3, #0]
    f7e0:	b35c      	cbz	r4, f83a <iface_router_run_timer+0x72>
    f7e2:	f04f 31ff 	mov.w	r1, #4294967295
			(MSEC_PER_SEC * router->lifetime) - current_time;
    f7e6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    f7ea:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    f7ec:	b9b4      	cbnz	r4, f81c <iface_router_run_timer+0x54>
	if (new_timer != UINT_MAX) {
    f7ee:	1c4b      	adds	r3, r1, #1
    f7f0:	d023      	beq.n	f83a <iface_router_run_timer+0x72>
    f7f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f7f6:	f240 36e7 	movw	r6, #999	; 0x3e7
    f7fa:	2700      	movs	r7, #0
    f7fc:	fbe0 6701 	umlal	r6, r7, r0, r1
    f800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f804:	2300      	movs	r3, #0
    f806:	4630      	mov	r0, r6
    f808:	4639      	mov	r1, r7
    f80a:	f7fc fed5 	bl	c5b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
    f80e:	4623      	mov	r3, r4
}
    f810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f814:	4602      	mov	r2, r0
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
    f816:	480a      	ldr	r0, [pc, #40]	; (f840 <iface_router_run_timer+0x78>)
    f818:	f7ff bf48 	b.w	f6ac <k_delayed_work_submit>
		u32_t current_timer = router->life_start +
    f81c:	69e0      	ldr	r0, [r4, #28]
			(MSEC_PER_SEC * router->lifetime) - current_time;
    f81e:	8c22      	ldrh	r2, [r4, #32]
		u32_t current_timer = router->life_start +
    f820:	1b40      	subs	r0, r0, r5
    f822:	fb06 0202 	mla	r2, r6, r2, r0
		new_timer = MIN(current_timer, new_timer);
    f826:	4291      	cmp	r1, r2
    f828:	bf28      	it	cs
    f82a:	4611      	movcs	r1, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    f82c:	b11b      	cbz	r3, f836 <iface_router_run_timer+0x6e>
    f82e:	681a      	ldr	r2, [r3, #0]
    f830:	461c      	mov	r4, r3
    f832:	4613      	mov	r3, r2
    f834:	e7da      	b.n	f7ec <iface_router_run_timer+0x24>
    f836:	461a      	mov	r2, r3
    f838:	e7fa      	b.n	f830 <iface_router_run_timer+0x68>
}
    f83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f83e:	bf00      	nop
    f840:	20020ac4 	.word	0x20020ac4
    f844:	20020930 	.word	0x20020930

0000f848 <net_if_ipv6_get_best_match.isra.0>:
	}

	return false;
}

static struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
    f848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f84c:	4689      	mov	r9, r1
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
	struct in6_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv6) {
    f84e:	2800      	cmp	r0, #0
    f850:	d048      	beq.n	f8e4 <net_if_ipv6_get_best_match.isra.0+0x9c>
	struct in6_addr *src = NULL;
    f852:	2500      	movs	r5, #0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    f854:	f04f 0c30 	mov.w	ip, #48	; 0x30
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    f858:	462e      	mov	r6, r5
	    addr->address.family == AF_INET6 &&
    f85a:	f248 0afe 	movw	sl, #33022	; 0x80fe
    f85e:	1d04      	adds	r4, r0, #4
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
    f860:	fb0c 0106 	mla	r1, ip, r6, r0
    f864:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    f866:	4f20      	ldr	r7, [pc, #128]	; (f8e8 <net_if_ipv6_get_best_match.isra.0+0xa0>)
    f868:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
    f86c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    f870:	42bb      	cmp	r3, r7
    f872:	d123      	bne.n	f8bc <net_if_ipv6_get_best_match.isra.0+0x74>
    f874:	f834 3c04 	ldrh.w	r3, [r4, #-4]
    f878:	2b02      	cmp	r3, #2
    f87a:	d11f      	bne.n	f8bc <net_if_ipv6_get_best_match.isra.0+0x74>
	    addr->address.family == AF_INET6 &&
    f87c:	888b      	ldrh	r3, [r1, #4]
    f87e:	4553      	cmp	r3, sl
    f880:	d01c      	beq.n	f8bc <net_if_ipv6_get_best_match.isra.0+0x74>
	u8_t len = 0U;
    f882:	2300      	movs	r3, #0
    f884:	f109 38ff 	add.w	r8, r9, #4294967295
    f888:	f104 3bff 	add.w	fp, r4, #4294967295
		if (src[j] == dst[j]) {
    f88c:	f818 ef01 	ldrb.w	lr, [r8, #1]!
    f890:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    f894:	f103 0708 	add.w	r7, r3, #8
    f898:	458e      	cmp	lr, r1
    f89a:	d116      	bne.n	f8ca <net_if_ipv6_get_best_match.isra.0+0x82>
			len += 8U;
    f89c:	b2fb      	uxtb	r3, r7
	for (j = 0U; j < addr_len; j++) {
    f89e:	2b80      	cmp	r3, #128	; 0x80
    f8a0:	d1f4      	bne.n	f88c <net_if_ipv6_get_best_match.isra.0+0x44>
		if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
			continue;
		}

		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
    f8a2:	7811      	ldrb	r1, [r2, #0]
    f8a4:	4299      	cmp	r1, r3
    f8a6:	d809      	bhi.n	f8bc <net_if_ipv6_get_best_match.isra.0+0x74>
			/* Mesh local address can only be selected for the same
			 * subnet.
			 */
			if (ipv6->unicast[i].is_mesh_local && len < 64) {
    f8a8:	fb0c 0106 	mla	r1, ip, r6, r0
    f8ac:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    f8b0:	0749      	lsls	r1, r1, #29
    f8b2:	d501      	bpl.n	f8b8 <net_if_ipv6_get_best_match.isra.0+0x70>
    f8b4:	2b3f      	cmp	r3, #63	; 0x3f
    f8b6:	d901      	bls.n	f8bc <net_if_ipv6_get_best_match.isra.0+0x74>
				continue;
			}

			*best_so_far = len;
    f8b8:	4625      	mov	r5, r4
    f8ba:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    f8bc:	3430      	adds	r4, #48	; 0x30
    f8be:	b116      	cbz	r6, f8c6 <net_if_ipv6_get_best_match.isra.0+0x7e>
			src = &ipv6->unicast[i].address.in6_addr;
		}
	}

	return src;
}
    f8c0:	4628      	mov	r0, r5
    f8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8c6:	2601      	movs	r6, #1
    f8c8:	e7ca      	b.n	f860 <net_if_ipv6_get_best_match.isra.0+0x18>
			xor = src[j] ^ dst[j];
    f8ca:	ea8e 0101 	eor.w	r1, lr, r1
			for (k = 0U; k < 8; k++) {
    f8ce:	b2ff      	uxtb	r7, r7
				if (!(xor & 0x80)) {
    f8d0:	f011 0f80 	tst.w	r1, #128	; 0x80
    f8d4:	d1e5      	bne.n	f8a2 <net_if_ipv6_get_best_match.isra.0+0x5a>
					len++;
    f8d6:	3301      	adds	r3, #1
    f8d8:	b2db      	uxtb	r3, r3
					xor <<= 1;
    f8da:	0049      	lsls	r1, r1, #1
			for (k = 0U; k < 8; k++) {
    f8dc:	42bb      	cmp	r3, r7
					xor <<= 1;
    f8de:	b2c9      	uxtb	r1, r1
			for (k = 0U; k < 8; k++) {
    f8e0:	d1f6      	bne.n	f8d0 <net_if_ipv6_get_best_match.isra.0+0x88>
    f8e2:	e7de      	b.n	f8a2 <net_if_ipv6_get_best_match.isra.0+0x5a>
		return NULL;
    f8e4:	4605      	mov	r5, r0
    f8e6:	e7eb      	b.n	f8c0 <net_if_ipv6_get_best_match.isra.0+0x78>
    f8e8:	02000100 	.word	0x02000100

0000f8ec <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
    f8ec:	2300      	movs	r3, #0
{
    f8ee:	b510      	push	{r4, lr}
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
    f8f0:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
{
    f8f4:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f8f6:	6803      	ldr	r3, [r0, #0]
    f8f8:	330c      	adds	r3, #12
    f8fa:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_is_up(iface)) {
    f8fe:	07db      	lsls	r3, r3, #31
    f900:	d519      	bpl.n	f936 <net_if_ipv6_start_dad+0x4a>
		ifaddr->dad_count = 1U;
    f902:	2301      	movs	r3, #1
    f904:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
		if (!net_ipv6_start_dad(iface, ifaddr)) {
    f908:	f00f fb42 	bl	1ef90 <net_ipv6_start_dad>
    f90c:	b998      	cbnz	r0, f936 <net_if_ipv6_start_dad+0x4a>
			ifaddr->dad_start = k_uptime_get_32();
    f90e:	f00d fbe6 	bl	1d0de <k_uptime_get_32>
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
    f912:	f104 0124 	add.w	r1, r4, #36	; 0x24
			ifaddr->dad_start = k_uptime_get_32();
    f916:	62a0      	str	r0, [r4, #40]	; 0x28
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
    f918:	4807      	ldr	r0, [pc, #28]	; (f938 <net_if_ipv6_start_dad+0x4c>)
    f91a:	f00d fb70 	bl	1cffe <sys_slist_append>
			if (!k_delayed_work_remaining_get(&dad_timer)) {
    f91e:	4807      	ldr	r0, [pc, #28]	; (f93c <net_if_ipv6_start_dad+0x50>)
    f920:	f00d fbed 	bl	1d0fe <k_delayed_work_remaining_get>
    f924:	b938      	cbnz	r0, f936 <net_if_ipv6_start_dad+0x4a>
}
    f926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_delayed_work_submit(&dad_timer,
    f92a:	f640 42cd 	movw	r2, #3277	; 0xccd
    f92e:	2300      	movs	r3, #0
    f930:	4802      	ldr	r0, [pc, #8]	; (f93c <net_if_ipv6_start_dad+0x50>)
    f932:	f7ff bebb 	b.w	f6ac <k_delayed_work_submit>
}
    f936:	bd10      	pop	{r4, pc}
    f938:	20020920 	.word	0x20020920
    f93c:	20020960 	.word	0x20020960

0000f940 <iface_router_expired>:
{
    f940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t current_time = k_uptime_get_32();
    f942:	f00d fbcc 	bl	1d0de <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    f946:	4a18      	ldr	r2, [pc, #96]	; (f9a8 <iface_router_expired+0x68>)
    f948:	6813      	ldr	r3, [r2, #0]
    f94a:	b91b      	cbnz	r3, f954 <iface_router_expired+0x14>
}
    f94c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	iface_router_run_timer(current_time);
    f950:	f7ff bf3a 	b.w	f7c8 <iface_router_run_timer>
    f954:	2100      	movs	r1, #0
			    (MSEC_PER_SEC * router->lifetime) -
    f956:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	parent->next = child;
    f95a:	468c      	mov	ip, r1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f95c:	681c      	ldr	r4, [r3, #0]
    f95e:	69de      	ldr	r6, [r3, #28]
    f960:	8c1d      	ldrh	r5, [r3, #32]
    f962:	1a36      	subs	r6, r6, r0
    f964:	fb0e 6505 	mla	r5, lr, r5, r6
		if ((s32_t)(router->life_start +
    f968:	2d00      	cmp	r5, #0
    f96a:	461f      	mov	r7, r3
    f96c:	dc0f      	bgt.n	f98e <iface_router_expired+0x4e>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    f96e:	681d      	ldr	r5, [r3, #0]
    f970:	b999      	cbnz	r1, f99a <iface_router_expired+0x5a>
    f972:	6856      	ldr	r6, [r2, #4]
	list->head = node;
    f974:	6015      	str	r5, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    f976:	429e      	cmp	r6, r3
    f978:	d100      	bne.n	f97c <iface_router_expired+0x3c>
	list->tail = node;
    f97a:	6055      	str	r5, [r2, #4]
		router->is_used = false;
    f97c:	460f      	mov	r7, r1
    f97e:	f893 5022 	ldrb.w	r5, [r3, #34]	; 0x22
	parent->next = child;
    f982:	f8c3 c000 	str.w	ip, [r3]
    f986:	f36c 0500 	bfi	r5, ip, #0, #1
    f98a:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
    f98e:	2c00      	cmp	r4, #0
    f990:	d0dc      	beq.n	f94c <iface_router_expired+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f992:	4623      	mov	r3, r4
    f994:	4639      	mov	r1, r7
    f996:	6824      	ldr	r4, [r4, #0]
    f998:	e7e1      	b.n	f95e <iface_router_expired+0x1e>
	parent->next = child;
    f99a:	600d      	str	r5, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    f99c:	6855      	ldr	r5, [r2, #4]
    f99e:	429d      	cmp	r5, r3
	list->tail = node;
    f9a0:	bf08      	it	eq
    f9a2:	6051      	streq	r1, [r2, #4]
}
    f9a4:	e7ea      	b.n	f97c <iface_router_expired+0x3c>
    f9a6:	bf00      	nop
    f9a8:	20020930 	.word	0x20020930

0000f9ac <net_if_queue_tx>:
{
    f9ac:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
    f9ae:	2000      	movs	r0, #0
{
    f9b0:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
    f9b2:	f000 fd89 	bl	104c8 <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    f9b6:	2300      	movs	r3, #0
    f9b8:	4a04      	ldr	r2, [pc, #16]	; (f9cc <net_if_queue_tx+0x20>)
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
    f9ba:	4621      	mov	r1, r4
    f9bc:	e9c4 2301 	strd	r2, r3, [r4, #4]
    f9c0:	6023      	str	r3, [r4, #0]
    f9c2:	b2c0      	uxtb	r0, r0
}
    f9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
    f9c8:	f000 bd6a 	b.w	104a0 <net_tc_submit_to_tx_queue>
    f9cc:	0001011d 	.word	0x0001011d

0000f9d0 <net_if_config_ipv6_get>:
	if (iface->config.ip.ipv6) {
    f9d0:	6843      	ldr	r3, [r0, #4]
    f9d2:	b15b      	cbz	r3, f9ec <net_if_config_ipv6_get+0x1c>
		if (ipv6) {
    f9d4:	b909      	cbnz	r1, f9da <net_if_config_ipv6_get+0xa>
		return 0;
    f9d6:	2000      	movs	r0, #0
    f9d8:	4770      	bx	lr
			*ipv6 = iface->config.ip.ipv6;
    f9da:	600b      	str	r3, [r1, #0]
    f9dc:	e7fb      	b.n	f9d6 <net_if_config_ipv6_get+0x6>
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
    f9de:	6042      	str	r2, [r0, #4]
		ipv6_addresses[i].iface = iface;
    f9e0:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
		if (ipv6) {
    f9e4:	2900      	cmp	r1, #0
    f9e6:	d0f6      	beq.n	f9d6 <net_if_config_ipv6_get+0x6>
			*ipv6 = &ipv6_addresses[i].ipv6;
    f9e8:	600a      	str	r2, [r1, #0]
    f9ea:	e7f4      	b.n	f9d6 <net_if_config_ipv6_get+0x6>
		if (ipv6_addresses[i].iface) {
    f9ec:	4a03      	ldr	r2, [pc, #12]	; (f9fc <net_if_config_ipv6_get+0x2c>)
    f9ee:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	d0f3      	beq.n	f9de <net_if_config_ipv6_get+0xe>
	return -ESRCH;
    f9f6:	f06f 0002 	mvn.w	r0, #2
}
    f9fa:	4770      	bx	lr
    f9fc:	20020980 	.word	0x20020980

0000fa00 <net_if_start_rs>:
{
    fa00:	b510      	push	{r4, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
    fa02:	6844      	ldr	r4, [r0, #4]
	if (!ipv6) {
    fa04:	b1bc      	cbz	r4, fa36 <net_if_start_rs+0x36>
	if (!net_ipv6_start_rs(iface)) {
    fa06:	f00f fbba 	bl	1f17e <net_ipv6_start_rs>
    fa0a:	b9a0      	cbnz	r0, fa36 <net_if_start_rs+0x36>
		ipv6->rs_start = k_uptime_get_32();
    fa0c:	f00d fb67 	bl	1d0de <k_uptime_get_32>
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
    fa10:	f504 7182 	add.w	r1, r4, #260	; 0x104
		ipv6->rs_start = k_uptime_get_32();
    fa14:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
    fa18:	4807      	ldr	r0, [pc, #28]	; (fa38 <net_if_start_rs+0x38>)
    fa1a:	f00d faf0 	bl	1cffe <sys_slist_append>
		if (!k_delayed_work_remaining_get(&rs_timer)) {
    fa1e:	4807      	ldr	r0, [pc, #28]	; (fa3c <net_if_start_rs+0x3c>)
    fa20:	f00d fb6d 	bl	1d0fe <k_delayed_work_remaining_get>
    fa24:	b938      	cbnz	r0, fa36 <net_if_start_rs+0x36>
}
    fa26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&rs_timer, K_MSEC(RS_TIMEOUT));
    fa2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    fa2e:	2300      	movs	r3, #0
    fa30:	4802      	ldr	r0, [pc, #8]	; (fa3c <net_if_start_rs+0x3c>)
    fa32:	f7ff be3b 	b.w	f6ac <k_delayed_work_submit>
}
    fa36:	bd10      	pop	{r4, pc}
    fa38:	20020938 	.word	0x20020938
    fa3c:	20020b08 	.word	0x20020b08

0000fa40 <rs_timeout>:
{
    fa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t current_time = k_uptime_get_32();
    fa44:	f00d fb4b 	bl	1d0de <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
    fa48:	4d2d      	ldr	r5, [pc, #180]	; (fb00 <rs_timeout+0xc0>)
	u32_t current_time = k_uptime_get_32();
    fa4a:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
    fa4c:	682a      	ldr	r2, [r5, #0]
    fa4e:	2a00      	cmp	r2, #0
    fa50:	d054      	beq.n	fafc <rs_timeout+0xbc>
    fa52:	f5b2 7382 	subs.w	r3, r2, #260	; 0x104
    fa56:	d051      	beq.n	fafc <rs_timeout+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fa58:	6814      	ldr	r4, [r2, #0]
    fa5a:	b10c      	cbz	r4, fa60 <rs_timeout+0x20>
    fa5c:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
	parent->next = child;
    fa60:	2700      	movs	r7, #0
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
    fa62:	f8df 80a8 	ldr.w	r8, [pc, #168]	; fb0c <rs_timeout+0xcc>
		if ((s32_t)(ipv6->rs_start + RS_TIMEOUT - current_time) > 0) {
    fa66:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    fa6a:	1b92      	subs	r2, r2, r6
    fa6c:	f502 717a 	add.w	r1, r2, #1000	; 0x3e8
    fa70:	2900      	cmp	r1, #0
    fa72:	dc25      	bgt.n	fac0 <rs_timeout+0x80>
Z_GENLIST_REMOVE(slist, snode)
    fa74:	6869      	ldr	r1, [r5, #4]
		sys_slist_remove(&active_rs_timers, NULL, &ipv6->rs_node);
    fa76:	f503 7282 	add.w	r2, r3, #260	; 0x104
    fa7a:	4291      	cmp	r1, r2
		ipv6->rs_count++;
    fa7c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    fa80:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    fa84:	f102 0201 	add.w	r2, r2, #1
	list->head = node;
    fa88:	6028      	str	r0, [r5, #0]
	list->tail = node;
    fa8a:	bf08      	it	eq
    fa8c:	6068      	streq	r0, [r5, #4]
    fa8e:	b2d2      	uxtb	r2, r2
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
    fa90:	481c      	ldr	r0, [pc, #112]	; (fb04 <rs_timeout+0xc4>)
	parent->next = child;
    fa92:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
		ipv6->rs_count++;
    fa96:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
    fa9a:	4540      	cmp	r0, r8
    fa9c:	d10b      	bne.n	fab6 <rs_timeout+0x76>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
    fa9e:	b36c      	cbz	r4, fafc <rs_timeout+0xbc>
Z_GENLIST_PEEK_NEXT(slist, snode)
    faa0:	f514 7282 	adds.w	r2, r4, #260	; 0x104
    faa4:	d004      	beq.n	fab0 <rs_timeout+0x70>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    faa6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    faaa:	b10a      	cbz	r2, fab0 <rs_timeout+0x70>
    faac:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
{
    fab0:	4623      	mov	r3, r4
    fab2:	4614      	mov	r4, r2
    fab4:	e7d7      	b.n	fa66 <rs_timeout+0x26>
			if (iface->config.ip.ipv6 == ipv6) {
    fab6:	6841      	ldr	r1, [r0, #4]
    fab8:	4299      	cmp	r1, r3
    faba:	d01a      	beq.n	faf2 <rs_timeout+0xb2>
		for (iface = __net_if_start; iface != __net_if_end; iface++) {
    fabc:	3020      	adds	r0, #32
    fabe:	e7ec      	b.n	fa9a <rs_timeout+0x5a>
				      K_MSEC(ipv6->rs_start +
    fac0:	f512 7f7a 	cmn.w	r2, #1000	; 0x3e8
    fac4:	bf08      	it	eq
    fac6:	2100      	moveq	r1, #0
    fac8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    facc:	f240 34e7 	movw	r4, #999	; 0x3e7
    fad0:	2500      	movs	r5, #0
    fad2:	fbe0 4501 	umlal	r4, r5, r0, r1
    fad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fada:	2300      	movs	r3, #0
    fadc:	4620      	mov	r0, r4
    fade:	4629      	mov	r1, r5
    fae0:	f7fc fd6a 	bl	c5b8 <__aeabi_uldivmod>
}
    fae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fae8:	4602      	mov	r2, r0
		k_delayed_work_submit(&rs_timer,
    faea:	2300      	movs	r3, #0
    faec:	4806      	ldr	r0, [pc, #24]	; (fb08 <rs_timeout+0xc8>)
    faee:	f7ff bddd 	b.w	f6ac <k_delayed_work_submit>
			if (ipv6->rs_count < RS_COUNT) {
    faf2:	2a02      	cmp	r2, #2
    faf4:	d8d3      	bhi.n	fa9e <rs_timeout+0x5e>
				net_if_start_rs(iface);
    faf6:	f7ff ff83 	bl	fa00 <net_if_start_rs>
    fafa:	e7d0      	b.n	fa9e <rs_timeout+0x5e>
}
    fafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb00:	20020938 	.word	0x20020938
    fb04:	20020720 	.word	0x20020720
    fb08:	20020b08 	.word	0x20020b08
    fb0c:	20020740 	.word	0x20020740

0000fb10 <net_if_stop_rs>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
    fb10:	6841      	ldr	r1, [r0, #4]
	if (!ipv6) {
    fb12:	b121      	cbz	r1, fb1e <net_if_stop_rs+0xe>
	sys_slist_find_and_remove(&active_rs_timers, &ipv6->rs_node);
    fb14:	4802      	ldr	r0, [pc, #8]	; (fb20 <net_if_stop_rs+0x10>)
    fb16:	f501 7182 	add.w	r1, r1, #260	; 0x104
    fb1a:	f00d ba7a 	b.w	1d012 <sys_slist_find_and_remove>
}
    fb1e:	4770      	bx	lr
    fb20:	20020938 	.word	0x20020938

0000fb24 <net_if_ipv6_addr_lookup>:
{
    fb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb28:	4606      	mov	r6, r0
    fb2a:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    fb2c:	4d17      	ldr	r5, [pc, #92]	; (fb8c <net_if_ipv6_addr_lookup+0x68>)
    fb2e:	f8df 8060 	ldr.w	r8, [pc, #96]	; fb90 <net_if_ipv6_addr_lookup+0x6c>
    fb32:	4545      	cmp	r5, r8
    fb34:	d101      	bne.n	fb3a <net_if_ipv6_addr_lookup+0x16>
	return NULL;
    fb36:	2000      	movs	r0, #0
    fb38:	e023      	b.n	fb82 <net_if_ipv6_addr_lookup+0x5e>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
    fb3a:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
    fb3c:	b90c      	cbnz	r4, fb42 <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    fb3e:	3520      	adds	r5, #32
    fb40:	e7f7      	b.n	fb32 <net_if_ipv6_addr_lookup+0xe>
			if (!ipv6->unicast[i].is_used ||
    fb42:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    fb46:	079a      	lsls	r2, r3, #30
    fb48:	d508      	bpl.n	fb5c <net_if_ipv6_addr_lookup+0x38>
    fb4a:	8823      	ldrh	r3, [r4, #0]
    fb4c:	2b02      	cmp	r3, #2
    fb4e:	d105      	bne.n	fb5c <net_if_ipv6_addr_lookup+0x38>
			if (net_ipv6_is_prefix(
    fb50:	2280      	movs	r2, #128	; 0x80
    fb52:	4630      	mov	r0, r6
    fb54:	1d21      	adds	r1, r4, #4
    fb56:	f00d fa95 	bl	1d084 <net_ipv6_is_prefix>
    fb5a:	b9a0      	cbnz	r0, fb86 <net_if_ipv6_addr_lookup+0x62>
			if (!ipv6->unicast[i].is_used ||
    fb5c:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    fb60:	079b      	lsls	r3, r3, #30
    fb62:	d5ec      	bpl.n	fb3e <net_if_ipv6_addr_lookup+0x1a>
    fb64:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fb66:	2b02      	cmp	r3, #2
    fb68:	d1e9      	bne.n	fb3e <net_if_ipv6_addr_lookup+0x1a>
			if (net_ipv6_is_prefix(
    fb6a:	2280      	movs	r2, #128	; 0x80
    fb6c:	4630      	mov	r0, r6
    fb6e:	f104 0134 	add.w	r1, r4, #52	; 0x34
    fb72:	f00d fa87 	bl	1d084 <net_ipv6_is_prefix>
    fb76:	2800      	cmp	r0, #0
    fb78:	d0e1      	beq.n	fb3e <net_if_ipv6_addr_lookup+0x1a>
    fb7a:	2030      	movs	r0, #48	; 0x30
				if (ret) {
    fb7c:	b107      	cbz	r7, fb80 <net_if_ipv6_addr_lookup+0x5c>
					*ret = iface;
    fb7e:	603d      	str	r5, [r7, #0]
				return &ipv6->unicast[i];
    fb80:	4420      	add	r0, r4
}
    fb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (net_ipv6_is_prefix(
    fb86:	2000      	movs	r0, #0
    fb88:	e7f8      	b.n	fb7c <net_if_ipv6_addr_lookup+0x58>
    fb8a:	bf00      	nop
    fb8c:	20020720 	.word	0x20020720
    fb90:	20020740 	.word	0x20020740

0000fb94 <dad_timeout>:
{
    fb94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t current_time = k_uptime_get_32();
    fb98:	f00d faa1 	bl	1d0de <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
    fb9c:	4e28      	ldr	r6, [pc, #160]	; (fc40 <dad_timeout+0xac>)
	u32_t current_time = k_uptime_get_32();
    fb9e:	4607      	mov	r7, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
    fba0:	6833      	ldr	r3, [r6, #0]
    fba2:	b353      	cbz	r3, fbfa <dad_timeout+0x66>
    fba4:	f1b3 0524 	subs.w	r5, r3, #36	; 0x24
    fba8:	d027      	beq.n	fbfa <dad_timeout+0x66>
    fbaa:	681c      	ldr	r4, [r3, #0]
    fbac:	b104      	cbz	r4, fbb0 <dad_timeout+0x1c>
    fbae:	3c24      	subs	r4, #36	; 0x24
	parent->next = child;
    fbb0:	f04f 0800 	mov.w	r8, #0
		ifaddr->addr_state = NET_ADDR_PREFERRED;
    fbb4:	f04f 0901 	mov.w	r9, #1
			    DAD_TIMEOUT - current_time) > 0) {
    fbb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fbba:	1bdb      	subs	r3, r3, r7
    fbbc:	f103 0164 	add.w	r1, r3, #100	; 0x64
		if ((s32_t)(ifaddr->dad_start +
    fbc0:	2900      	cmp	r1, #0
    fbc2:	dc1d      	bgt.n	fc00 <dad_timeout+0x6c>
Z_GENLIST_REMOVE(slist, snode)
    fbc4:	462b      	mov	r3, r5
    fbc6:	6872      	ldr	r2, [r6, #4]
    fbc8:	f853 1f24 	ldr.w	r1, [r3, #36]!
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
    fbcc:	f105 0a04 	add.w	sl, r5, #4
    fbd0:	429a      	cmp	r2, r3
	list->tail = node;
    fbd2:	bf08      	it	eq
    fbd4:	6071      	streq	r1, [r6, #4]
	list->head = node;
    fbd6:	6031      	str	r1, [r6, #0]
    fbd8:	4650      	mov	r0, sl
	parent->next = child;
    fbda:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
		ifaddr->addr_state = NET_ADDR_PREFERRED;
    fbde:	f885 902d 	strb.w	r9, [r5, #45]	; 0x2d
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
    fbe2:	a901      	add	r1, sp, #4
		iface = NULL;
    fbe4:	f8cd 8004 	str.w	r8, [sp, #4]
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
    fbe8:	f7ff ff9c 	bl	fb24 <net_if_ipv6_addr_lookup>
		if (tmp == ifaddr) {
    fbec:	4285      	cmp	r5, r0
    fbee:	d103      	bne.n	fbf8 <dad_timeout+0x64>
			net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
    fbf0:	4651      	mov	r1, sl
    fbf2:	9801      	ldr	r0, [sp, #4]
    fbf4:	f00e feab 	bl	1e94e <net_ipv6_nbr_rm>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
    fbf8:	b9cc      	cbnz	r4, fc2e <dad_timeout+0x9a>
}
    fbfa:	b002      	add	sp, #8
    fbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				      K_MSEC(ifaddr->dad_start +
    fc00:	3364      	adds	r3, #100	; 0x64
    fc02:	bf08      	it	eq
    fc04:	2100      	moveq	r1, #0
    fc06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fc0a:	f240 34e7 	movw	r4, #999	; 0x3e7
    fc0e:	2500      	movs	r5, #0
    fc10:	fbe0 4501 	umlal	r4, r5, r0, r1
    fc14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc18:	2300      	movs	r3, #0
    fc1a:	4620      	mov	r0, r4
    fc1c:	4629      	mov	r1, r5
    fc1e:	f7fc fccb 	bl	c5b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&dad_timer,
    fc22:	2300      	movs	r3, #0
    fc24:	4602      	mov	r2, r0
    fc26:	4807      	ldr	r0, [pc, #28]	; (fc44 <dad_timeout+0xb0>)
    fc28:	f7ff fd40 	bl	f6ac <k_delayed_work_submit>
}
    fc2c:	e7e5      	b.n	fbfa <dad_timeout+0x66>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fc2e:	f114 0324 	adds.w	r3, r4, #36	; 0x24
    fc32:	d002      	beq.n	fc3a <dad_timeout+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fc34:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
    fc36:	b103      	cbz	r3, fc3a <dad_timeout+0xa6>
    fc38:	3b24      	subs	r3, #36	; 0x24
{
    fc3a:	4625      	mov	r5, r4
    fc3c:	461c      	mov	r4, r3
    fc3e:	e7bb      	b.n	fbb8 <dad_timeout+0x24>
    fc40:	20020920 	.word	0x20020920
    fc44:	20020960 	.word	0x20020960

0000fc48 <net_if_ipv6_addr_rm>:
{
    fc48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
    fc4c:	6844      	ldr	r4, [r0, #4]
{
    fc4e:	4607      	mov	r7, r0
    fc50:	460d      	mov	r5, r1
	if (!ipv6) {
    fc52:	2c00      	cmp	r4, #0
    fc54:	d057      	beq.n	fd06 <net_if_ipv6_addr_rm+0xbe>
		if (!ipv6->unicast[i].is_used) {
    fc56:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    fc5a:	0798      	lsls	r0, r3, #30
    fc5c:	d407      	bmi.n	fc6e <net_if_ipv6_addr_rm+0x26>
    fc5e:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    fc62:	079a      	lsls	r2, r3, #30
    fc64:	d40a      	bmi.n	fc7c <net_if_ipv6_addr_rm+0x34>
	return false;
    fc66:	2000      	movs	r0, #0
}
    fc68:	b004      	add	sp, #16
    fc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
    fc6e:	1d20      	adds	r0, r4, #4
    fc70:	f00d fa2d 	bl	1d0ce <net_ipv6_addr_cmp>
    fc74:	2800      	cmp	r0, #0
    fc76:	d0f2      	beq.n	fc5e <net_if_ipv6_addr_rm+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    fc78:	2600      	movs	r6, #0
    fc7a:	e007      	b.n	fc8c <net_if_ipv6_addr_rm+0x44>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
    fc7c:	4629      	mov	r1, r5
    fc7e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    fc82:	f00d fa24 	bl	1d0ce <net_ipv6_addr_cmp>
    fc86:	2800      	cmp	r0, #0
    fc88:	d0ed      	beq.n	fc66 <net_if_ipv6_addr_rm+0x1e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
    fc8a:	2601      	movs	r6, #1
		if (!ipv6->unicast[i].is_infinite) {
    fc8c:	2130      	movs	r1, #48	; 0x30
    fc8e:	4371      	muls	r1, r6
    fc90:	1863      	adds	r3, r4, r1
    fc92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    fc96:	07db      	lsls	r3, r3, #31
    fc98:	d40c      	bmi.n	fcb4 <net_if_ipv6_addr_rm+0x6c>
			sys_slist_find_and_remove(
    fc9a:	f8df 8074 	ldr.w	r8, [pc, #116]	; fd10 <net_if_ipv6_addr_rm+0xc8>
    fc9e:	3114      	adds	r1, #20
    fca0:	4640      	mov	r0, r8
    fca2:	4421      	add	r1, r4
    fca4:	f00d f9b5 	bl	1d012 <sys_slist_find_and_remove>
			if (sys_slist_is_empty(
    fca8:	f8d8 3000 	ldr.w	r3, [r8]
    fcac:	b913      	cbnz	r3, fcb4 <net_if_ipv6_addr_rm+0x6c>
				k_delayed_work_cancel(&address_lifetime_timer);
    fcae:	4817      	ldr	r0, [pc, #92]	; (fd0c <net_if_ipv6_addr_rm+0xc4>)
    fcb0:	f010 fd0c 	bl	206cc <k_delayed_work_cancel>
		ipv6->unicast[i].is_used = false;
    fcb4:	2030      	movs	r0, #48	; 0x30
    fcb6:	fb00 4406 	mla	r4, r0, r6, r4
    fcba:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    fcbe:	f36f 0341 	bfc	r3, #1, #1
    fcc2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 */
static inline
void net_ipv6_addr_create_solicited_node(const struct in6_addr *src,
					 struct in6_addr *dst)
{
	dst->s6_addr[0]   = 0xFF;
    fcc6:	f240 23ff 	movw	r3, #767	; 0x2ff
    fcca:	9300      	str	r3, [sp, #0]
	dst->s6_addr[1]   = 0x02;
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
    fccc:	2300      	movs	r3, #0
    fcce:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
    fcd2:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
    fcd6:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0U;
    fcda:	f44f 7380 	mov.w	r3, #256	; 0x100
    fcde:	f8ad 300a 	strh.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
	dst->s6_addr[12]  = 0xFF;
    fce2:	23ff      	movs	r3, #255	; 0xff
    fce4:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
    fce8:	7b6b      	ldrb	r3, [r5, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
    fcea:	7bea      	ldrb	r2, [r5, #15]
	dst->s6_addr[13]  = src->s6_addr[13];
    fcec:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
    fcf0:	7bab      	ldrb	r3, [r5, #14]
    fcf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    fcf6:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
    fcfa:	4669      	mov	r1, sp
    fcfc:	4638      	mov	r0, r7
    fcfe:	f00d fbb4 	bl	1d46a <net_if_ipv6_maddr_rm>
		return true;
    fd02:	2001      	movs	r0, #1
    fd04:	e7b0      	b.n	fc68 <net_if_ipv6_addr_rm+0x20>
		return false;
    fd06:	4620      	mov	r0, r4
    fd08:	e7ae      	b.n	fc68 <net_if_ipv6_addr_rm+0x20>
    fd0a:	bf00      	nop
    fd0c:	20020940 	.word	0x20020940
    fd10:	20020918 	.word	0x20020918

0000fd14 <net_if_ipv6_dad_failed>:
{
    fd14:	b513      	push	{r0, r1, r4, lr}
    fd16:	460c      	mov	r4, r1
    fd18:	9001      	str	r0, [sp, #4]
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
    fd1a:	a901      	add	r1, sp, #4
    fd1c:	4620      	mov	r0, r4
    fd1e:	f7ff ff01 	bl	fb24 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
    fd22:	b140      	cbz	r0, fd36 <net_if_ipv6_dad_failed+0x22>
	sys_slist_find_and_remove(&active_dad_timers, &ifaddr->dad_node);
    fd24:	f100 0124 	add.w	r1, r0, #36	; 0x24
    fd28:	4804      	ldr	r0, [pc, #16]	; (fd3c <net_if_ipv6_dad_failed+0x28>)
    fd2a:	f00d f972 	bl	1d012 <sys_slist_find_and_remove>
	net_if_ipv6_addr_rm(iface, addr);
    fd2e:	4621      	mov	r1, r4
    fd30:	9801      	ldr	r0, [sp, #4]
    fd32:	f7ff ff89 	bl	fc48 <net_if_ipv6_addr_rm>
}
    fd36:	b002      	add	sp, #8
    fd38:	bd10      	pop	{r4, pc}
    fd3a:	bf00      	nop
    fd3c:	20020920 	.word	0x20020920

0000fd40 <prefix_lifetime_timeout>:
{
    fd40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t current_time = k_uptime_get_32();
    fd44:	f00d f9cb 	bl	1d0de <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
    fd48:	4b38      	ldr	r3, [pc, #224]	; (fe2c <prefix_lifetime_timeout+0xec>)
	u32_t current_time = k_uptime_get_32();
    fd4a:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
    fd4c:	681c      	ldr	r4, [r3, #0]
    fd4e:	2c00      	cmp	r4, #0
    fd50:	d050      	beq.n	fdf4 <prefix_lifetime_timeout+0xb4>
    fd52:	f04f 36ff 	mov.w	r6, #4294967295
    fd56:	f04f 37ff 	mov.w	r7, #4294967295
    fd5a:	f04f 0a00 	mov.w	sl, #0
    fd5e:	6825      	ldr	r5, [r4, #0]
    fd60:	f8df 90cc 	ldr.w	r9, [pc, #204]	; fe30 <prefix_lifetime_timeout+0xf0>
			  ifprefix->lifetime.wrap_counter,
    fd64:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
	if (counter > 0) {
    fd68:	2b00      	cmp	r3, #0
    fd6a:	d148      	bne.n	fdfe <prefix_lifetime_timeout+0xbe>
	if ((s32_t)((start + (u32_t)timeout) - current_time) > 0) {
    fd6c:	6861      	ldr	r1, [r4, #4]
    fd6e:	eba1 0108 	sub.w	r1, r1, r8
    fd72:	4411      	add	r1, r2
    fd74:	2900      	cmp	r1, #0
    fd76:	dc56      	bgt.n	fe26 <prefix_lifetime_timeout+0xe6>
	ifprefix->is_used = false;
    fd78:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
    fd7c:	6a20      	ldr	r0, [r4, #32]
	ifprefix->is_used = false;
    fd7e:	f363 0241 	bfi	r2, r3, #1, #1
    fd82:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
    fd86:	a901      	add	r1, sp, #4
    fd88:	f7ff fe22 	bl	f9d0 <net_if_config_ipv6_get>
    fd8c:	2800      	cmp	r0, #0
    fd8e:	db07      	blt.n	fda0 <prefix_lifetime_timeout+0x60>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
    fd90:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    fd94:	9901      	ldr	r1, [sp, #4]
    fd96:	6a20      	ldr	r0, [r4, #32]
    fd98:	f104 0210 	add.w	r2, r4, #16
    fd9c:	f00d fb87 	bl	1d4ae <remove_prefix_addresses>
		if (current == next) {
    fda0:	42a5      	cmp	r5, r4
    fda2:	d004      	beq.n	fdae <prefix_lifetime_timeout+0x6e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
    fda4:	2d00      	cmp	r5, #0
    fda6:	d03c      	beq.n	fe22 <prefix_lifetime_timeout+0xe2>
    fda8:	682b      	ldr	r3, [r5, #0]
    fdaa:	462c      	mov	r4, r5
    fdac:	bb2d      	cbnz	r5, fdfa <prefix_lifetime_timeout+0xba>
	if (found) {
    fdae:	f1ba 0f00 	cmp.w	sl, #0
    fdb2:	d01f      	beq.n	fdf4 <prefix_lifetime_timeout+0xb4>
    fdb4:	2300      	movs	r3, #0
    fdb6:	4a1e      	ldr	r2, [pc, #120]	; (fe30 <prefix_lifetime_timeout+0xf0>)
    fdb8:	42bb      	cmp	r3, r7
    fdba:	bf08      	it	eq
    fdbc:	42b2      	cmpeq	r2, r6
    fdbe:	bf38      	it	cc
    fdc0:	4616      	movcc	r6, r2
    fdc2:	f240 34e7 	movw	r4, #999	; 0x3e7
    fdc6:	bf38      	it	cc
    fdc8:	461f      	movcc	r7, r3
    fdca:	03f0      	lsls	r0, r6, #15
    fdcc:	1900      	adds	r0, r0, r4
    fdce:	f04f 0400 	mov.w	r4, #0
    fdd2:	ea4f 31c7 	mov.w	r1, r7, lsl #15
    fdd6:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
    fdda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fdde:	f04f 0300 	mov.w	r3, #0
    fde2:	eb44 0101 	adc.w	r1, r4, r1
    fde6:	f7fc fbe7 	bl	c5b8 <__aeabi_uldivmod>
		k_delayed_work_submit(&prefix_lifetime_timer,
    fdea:	4623      	mov	r3, r4
    fdec:	4602      	mov	r2, r0
    fdee:	4811      	ldr	r0, [pc, #68]	; (fe34 <prefix_lifetime_timeout+0xf4>)
    fdf0:	f7ff fc5c 	bl	f6ac <k_delayed_work_submit>
}
    fdf4:	b002      	add	sp, #8
    fdf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fdfa:	461d      	mov	r5, r3
    fdfc:	e7b2      	b.n	fd64 <prefix_lifetime_timeout+0x24>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
    fdfe:	45c8      	cmp	r8, r9
    fe00:	d101      	bne.n	fe06 <prefix_lifetime_timeout+0xc6>
		ifprefix->lifetime.wrap_counter--;
    fe02:	3b01      	subs	r3, #1
    fe04:	60e3      	str	r3, [r4, #12]
	if (ifprefix->lifetime.wrap_counter > 0) {
    fe06:	68e3      	ldr	r3, [r4, #12]
    fe08:	2b00      	cmp	r3, #0
    fe0a:	bfc8      	it	gt
    fe0c:	464a      	movgt	r2, r9
			if (next_timeout < timeout_update) {
    fe0e:	2300      	movs	r3, #0
    fe10:	42bb      	cmp	r3, r7
    fe12:	bf08      	it	eq
    fe14:	42b2      	cmpeq	r2, r6
    fe16:	bf3e      	ittt	cc
    fe18:	4616      	movcc	r6, r2
    fe1a:	461f      	movcc	r7, r3
				found = true;
    fe1c:	f04f 0a01 	movcc.w	sl, #1
    fe20:	e7be      	b.n	fda0 <prefix_lifetime_timeout+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
    fe22:	462b      	mov	r3, r5
    fe24:	e7c1      	b.n	fdaa <prefix_lifetime_timeout+0x6a>
	if (current_time == NET_TIMEOUT_MAX_VALUE) {
    fe26:	45c8      	cmp	r8, r9
    fe28:	d1f1      	bne.n	fe0e <prefix_lifetime_timeout+0xce>
    fe2a:	e7ea      	b.n	fe02 <prefix_lifetime_timeout+0xc2>
    fe2c:	20020928 	.word	0x20020928
    fe30:	7fffff9b 	.word	0x7fffff9b
    fe34:	20020aa4 	.word	0x20020aa4

0000fe38 <net_if_ipv6_maddr_lookup>:
{
    fe38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe3c:	4682      	mov	sl, r0
    fe3e:	460e      	mov	r6, r1
			if (!ipv6->mcast[i].is_used ||
    fe40:	f04f 0b18 	mov.w	fp, #24
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    fe44:	4d19      	ldr	r5, [pc, #100]	; (feac <net_if_ipv6_maddr_lookup+0x74>)
    fe46:	4b1a      	ldr	r3, [pc, #104]	; (feb0 <net_if_ipv6_maddr_lookup+0x78>)
    fe48:	429d      	cmp	r5, r3
    fe4a:	d101      	bne.n	fe50 <net_if_ipv6_maddr_lookup+0x18>
	return NULL;
    fe4c:	2000      	movs	r0, #0
    fe4e:	e024      	b.n	fe9a <net_if_ipv6_maddr_lookup+0x62>
		if (ret && *ret && iface != *ret) {
    fe50:	b12e      	cbz	r6, fe5e <net_if_ipv6_maddr_lookup+0x26>
    fe52:	6832      	ldr	r2, [r6, #0]
    fe54:	b11a      	cbz	r2, fe5e <net_if_ipv6_maddr_lookup+0x26>
    fe56:	42aa      	cmp	r2, r5
    fe58:	d001      	beq.n	fe5e <net_if_ipv6_maddr_lookup+0x26>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    fe5a:	3520      	adds	r5, #32
    fe5c:	e7f4      	b.n	fe48 <net_if_ipv6_maddr_lookup+0x10>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
    fe5e:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
    fe60:	2c00      	cmp	r4, #0
    fe62:	d0fa      	beq.n	fe5a <net_if_ipv6_maddr_lookup+0x22>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
    fe64:	2700      	movs	r7, #0
    fe66:	f104 0864 	add.w	r8, r4, #100	; 0x64
			if (!ipv6->mcast[i].is_used ||
    fe6a:	fb0b f907 	mul.w	r9, fp, r7
    fe6e:	eb04 0209 	add.w	r2, r4, r9
    fe72:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
    fe76:	07d2      	lsls	r2, r2, #31
    fe78:	d511      	bpl.n	fe9e <net_if_ipv6_maddr_lookup+0x66>
    fe7a:	f838 2c04 	ldrh.w	r2, [r8, #-4]
    fe7e:	2a02      	cmp	r2, #2
    fe80:	d10d      	bne.n	fe9e <net_if_ipv6_maddr_lookup+0x66>
			if (net_ipv6_is_prefix(
    fe82:	2280      	movs	r2, #128	; 0x80
    fe84:	4641      	mov	r1, r8
    fe86:	4650      	mov	r0, sl
    fe88:	f00d f8fc 	bl	1d084 <net_ipv6_is_prefix>
    fe8c:	4b08      	ldr	r3, [pc, #32]	; (feb0 <net_if_ipv6_maddr_lookup+0x78>)
    fe8e:	b130      	cbz	r0, fe9e <net_if_ipv6_maddr_lookup+0x66>
				if (ret) {
    fe90:	b106      	cbz	r6, fe94 <net_if_ipv6_maddr_lookup+0x5c>
					*ret = iface;
    fe92:	6035      	str	r5, [r6, #0]
				return &ipv6->mcast[i];
    fe94:	f109 0060 	add.w	r0, r9, #96	; 0x60
    fe98:	4420      	add	r0, r4
}
    fe9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
    fe9e:	3701      	adds	r7, #1
    fea0:	2f03      	cmp	r7, #3
    fea2:	f108 0818 	add.w	r8, r8, #24
    fea6:	d1e0      	bne.n	fe6a <net_if_ipv6_maddr_lookup+0x32>
    fea8:	e7d7      	b.n	fe5a <net_if_ipv6_maddr_lookup+0x22>
    feaa:	bf00      	nop
    feac:	20020720 	.word	0x20020720
    feb0:	20020740 	.word	0x20020740

0000feb4 <net_if_mcast_monitor>:
{
    feb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
    feb6:	4b0a      	ldr	r3, [pc, #40]	; (fee0 <net_if_mcast_monitor+0x2c>)
{
    feb8:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
    feba:	681b      	ldr	r3, [r3, #0]
{
    febc:	460e      	mov	r6, r1
    febe:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
    fec0:	b163      	cbz	r3, fedc <net_if_mcast_monitor+0x28>
    fec2:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
    fec4:	6858      	ldr	r0, [r3, #4]
    fec6:	42a8      	cmp	r0, r5
    fec8:	d104      	bne.n	fed4 <net_if_mcast_monitor+0x20>
			mon->cb(iface, addr, is_joined);
    feca:	463a      	mov	r2, r7
    fecc:	4631      	mov	r1, r6
    fece:	4628      	mov	r0, r5
    fed0:	689b      	ldr	r3, [r3, #8]
    fed2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
    fed4:	b114      	cbz	r4, fedc <net_if_mcast_monitor+0x28>
    fed6:	4623      	mov	r3, r4
    fed8:	6824      	ldr	r4, [r4, #0]
    feda:	e7f3      	b.n	fec4 <net_if_mcast_monitor+0x10>
}
    fedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fede:	bf00      	nop
    fee0:	20020a9c 	.word	0x20020a9c

0000fee4 <net_if_ipv6_addr_onlink>:
{
    fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fee8:	4606      	mov	r6, r0
    feea:	460f      	mov	r7, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
    feec:	4d17      	ldr	r5, [pc, #92]	; (ff4c <net_if_ipv6_addr_onlink+0x68>)
    feee:	f8df 8060 	ldr.w	r8, [pc, #96]	; ff50 <net_if_ipv6_addr_onlink+0x6c>
    fef2:	4545      	cmp	r5, r8
    fef4:	d101      	bne.n	fefa <net_if_ipv6_addr_onlink+0x16>
	return false;
    fef6:	2000      	movs	r0, #0
    fef8:	e023      	b.n	ff42 <net_if_ipv6_addr_onlink+0x5e>
		if (iface && *iface && *iface != tmp) {
    fefa:	b11e      	cbz	r6, ff04 <net_if_ipv6_addr_onlink+0x20>
    fefc:	6833      	ldr	r3, [r6, #0]
    fefe:	b10b      	cbz	r3, ff04 <net_if_ipv6_addr_onlink+0x20>
    ff00:	42ab      	cmp	r3, r5
    ff02:	d111      	bne.n	ff28 <net_if_ipv6_addr_onlink+0x44>
		struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
    ff04:	686c      	ldr	r4, [r5, #4]
		if (!ipv6) {
    ff06:	b17c      	cbz	r4, ff28 <net_if_ipv6_addr_onlink+0x44>
			if (ipv6->prefix[i].is_used &&
    ff08:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    ff0c:	079a      	lsls	r2, r3, #30
    ff0e:	d40d      	bmi.n	ff2c <net_if_ipv6_addr_onlink+0x48>
    ff10:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
    ff14:	079b      	lsls	r3, r3, #30
    ff16:	d507      	bpl.n	ff28 <net_if_ipv6_addr_onlink+0x44>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
    ff18:	4639      	mov	r1, r7
    ff1a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    ff1e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
    ff22:	f00d f8af 	bl	1d084 <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
    ff26:	b950      	cbnz	r0, ff3e <net_if_ipv6_addr_onlink+0x5a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
    ff28:	3520      	adds	r5, #32
    ff2a:	e7e2      	b.n	fef2 <net_if_ipv6_addr_onlink+0xe>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
    ff2c:	4639      	mov	r1, r7
    ff2e:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
    ff32:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ff36:	f00d f8a5 	bl	1d084 <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
    ff3a:	2800      	cmp	r0, #0
    ff3c:	d0e8      	beq.n	ff10 <net_if_ipv6_addr_onlink+0x2c>
				if (iface) {
    ff3e:	b916      	cbnz	r6, ff46 <net_if_ipv6_addr_onlink+0x62>
				return true;
    ff40:	2001      	movs	r0, #1
}
    ff42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					*iface = tmp;
    ff46:	6035      	str	r5, [r6, #0]
    ff48:	e7fa      	b.n	ff40 <net_if_ipv6_addr_onlink+0x5c>
    ff4a:	bf00      	nop
    ff4c:	20020720 	.word	0x20020720
    ff50:	20020740 	.word	0x20020740

0000ff54 <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
    ff54:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
{
    ff58:	4601      	mov	r1, r0
	if (!prefix->is_used) {
    ff5a:	079b      	lsls	r3, r3, #30
    ff5c:	d505      	bpl.n	ff6a <net_if_ipv6_prefix_unset_timer+0x16>
	ifprefix->lifetime.timer_timeout = 0;
    ff5e:	2300      	movs	r3, #0
	ifprefix->lifetime.wrap_counter = 0;
    ff60:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
    ff64:	4801      	ldr	r0, [pc, #4]	; (ff6c <net_if_ipv6_prefix_unset_timer+0x18>)
    ff66:	f00d b854 	b.w	1d012 <sys_slist_find_and_remove>
}
    ff6a:	4770      	bx	lr
    ff6c:	20020928 	.word	0x20020928

0000ff70 <net_if_ipv6_router_lookup>:
{
    ff70:	b510      	push	{r4, lr}
		if (!routers[i].is_used ||
    ff72:	4c0a      	ldr	r4, [pc, #40]	; (ff9c <net_if_ipv6_router_lookup+0x2c>)
    ff74:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    ff78:	07db      	lsls	r3, r3, #31
    ff7a:	d50a      	bpl.n	ff92 <net_if_ipv6_router_lookup+0x22>
    ff7c:	88a3      	ldrh	r3, [r4, #4]
    ff7e:	2b02      	cmp	r3, #2
    ff80:	d107      	bne.n	ff92 <net_if_ipv6_router_lookup+0x22>
		    routers[i].address.family != family ||
    ff82:	69a3      	ldr	r3, [r4, #24]
    ff84:	4298      	cmp	r0, r3
    ff86:	d104      	bne.n	ff92 <net_if_ipv6_router_lookup+0x22>
		     net_ipv6_addr_cmp(net_if_router_ipv6(&routers[i]),
    ff88:	f104 0008 	add.w	r0, r4, #8
    ff8c:	f00d f89f 	bl	1d0ce <net_ipv6_addr_cmp>
		if ((IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6 &&
    ff90:	b908      	cbnz	r0, ff96 <net_if_ipv6_router_lookup+0x26>
	return NULL;
    ff92:	2000      	movs	r0, #0
}
    ff94:	bd10      	pop	{r4, pc}
			return &routers[i];
    ff96:	4620      	mov	r0, r4
	return iface_router_lookup(iface, AF_INET6, addr);
    ff98:	e7fc      	b.n	ff94 <net_if_ipv6_router_lookup+0x24>
    ff9a:	bf00      	nop
    ff9c:	20020ae4 	.word	0x20020ae4

0000ffa0 <net_if_ipv6_router_find_default>:
		    !routers[i].is_default ||
    ffa0:	4b0b      	ldr	r3, [pc, #44]	; (ffd0 <net_if_ipv6_router_find_default+0x30>)
{
    ffa2:	b530      	push	{r4, r5, lr}
		    !routers[i].is_default ||
    ffa4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		    routers[i].address.family != family) {
    ffa8:	889d      	ldrh	r5, [r3, #4]
		    !routers[i].is_default ||
    ffaa:	f3c2 0140 	ubfx	r1, r2, #1, #1
		if (!routers[i].is_used ||
    ffae:	f012 0201 	ands.w	r2, r2, #1
		if (iface && iface != routers[i].iface) {
    ffb2:	699c      	ldr	r4, [r3, #24]
		if (!routers[i].is_used ||
    ffb4:	d008      	beq.n	ffc8 <net_if_ipv6_router_find_default+0x28>
    ffb6:	b139      	cbz	r1, ffc8 <net_if_ipv6_router_find_default+0x28>
		    !routers[i].is_default ||
    ffb8:	2d02      	cmp	r5, #2
    ffba:	d105      	bne.n	ffc8 <net_if_ipv6_router_find_default+0x28>
		if (iface && iface != routers[i].iface) {
    ffbc:	b130      	cbz	r0, ffcc <net_if_ipv6_router_find_default+0x2c>
		return &routers[i];
    ffbe:	42a0      	cmp	r0, r4
    ffc0:	bf0c      	ite	eq
    ffc2:	4618      	moveq	r0, r3
    ffc4:	2000      	movne	r0, #0
}
    ffc6:	bd30      	pop	{r4, r5, pc}
	return NULL;
    ffc8:	2000      	movs	r0, #0
    ffca:	e7fc      	b.n	ffc6 <net_if_ipv6_router_find_default+0x26>
		return &routers[i];
    ffcc:	4618      	mov	r0, r3
    ffce:	e7fa      	b.n	ffc6 <net_if_ipv6_router_find_default+0x26>
    ffd0:	20020ae4 	.word	0x20020ae4

0000ffd4 <net_if_ipv6_router_add>:
{
    ffd4:	b538      	push	{r3, r4, r5, lr}
		if (routers[i].is_used) {
    ffd6:	4c16      	ldr	r4, [pc, #88]	; (10030 <net_if_ipv6_router_add+0x5c>)
{
    ffd8:	460d      	mov	r5, r1
		if (routers[i].is_used) {
    ffda:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    ffde:	07d9      	lsls	r1, r3, #31
    ffe0:	d424      	bmi.n	1002c <net_if_ipv6_router_add+0x58>
		routers[i].address.family = family;
    ffe2:	2102      	movs	r1, #2
		routers[i].iface = iface;
    ffe4:	61a0      	str	r0, [r4, #24]
		routers[i].address.family = family;
    ffe6:	80a1      	strh	r1, [r4, #4]
		if (lifetime) {
    ffe8:	f043 0301 	orr.w	r3, r3, #1
    ffec:	b1b2      	cbz	r2, 1001c <net_if_ipv6_router_add+0x48>
			routers[i].is_default = true;
    ffee:	f023 0306 	bic.w	r3, r3, #6
    fff2:	430b      	orrs	r3, r1
    fff4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			routers[i].lifetime = lifetime;
    fff8:	8422      	strh	r2, [r4, #32]
			routers[i].life_start = k_uptime_get_32();
    fffa:	f00d f870 	bl	1d0de <k_uptime_get_32>
			sys_slist_append(&active_router_timers,
    fffe:	4621      	mov	r1, r4
			routers[i].life_start = k_uptime_get_32();
   10000:	61e0      	str	r0, [r4, #28]
			sys_slist_append(&active_router_timers,
   10002:	480c      	ldr	r0, [pc, #48]	; (10034 <net_if_ipv6_router_add+0x60>)
   10004:	f00c fffb 	bl	1cffe <sys_slist_append>
			iface_router_run_timer(routers[i].life_start);
   10008:	69e0      	ldr	r0, [r4, #28]
   1000a:	f7ff fbdd 	bl	f7c8 <iface_router_run_timer>
			memcpy(net_if_router_ipv6(&routers[i]), addr,
   1000e:	2210      	movs	r2, #16
   10010:	4629      	mov	r1, r5
   10012:	4809      	ldr	r0, [pc, #36]	; (10038 <net_if_ipv6_router_add+0x64>)
   10014:	f00c fe1f 	bl	1cc56 <memcpy>
		return &routers[i];
   10018:	4805      	ldr	r0, [pc, #20]	; (10030 <net_if_ipv6_router_add+0x5c>)
}
   1001a:	bd38      	pop	{r3, r4, r5, pc}
			routers[i].is_default = false;
   1001c:	f023 0306 	bic.w	r3, r3, #6
   10020:	f043 0304 	orr.w	r3, r3, #4
			routers[i].lifetime = 0;
   10024:	8422      	strh	r2, [r4, #32]
			routers[i].is_default = false;
   10026:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1002a:	e7f0      	b.n	1000e <net_if_ipv6_router_add+0x3a>
	return NULL;
   1002c:	2000      	movs	r0, #0
	return iface_router_add(iface, AF_INET6, addr, false, lifetime);
   1002e:	e7f4      	b.n	1001a <net_if_ipv6_router_add+0x46>
   10030:	20020ae4 	.word	0x20020ae4
   10034:	20020930 	.word	0x20020930
   10038:	20020aec 	.word	0x20020aec

0001003c <net_if_ipv6_router_rm>:
	if (!router->is_used) {
   1003c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
   10040:	b510      	push	{r4, lr}
	if (!router->is_used) {
   10042:	f013 0301 	ands.w	r3, r3, #1
{
   10046:	4604      	mov	r4, r0
	if (!router->is_used) {
   10048:	d010      	beq.n	1006c <net_if_ipv6_router_rm+0x30>
	if (sys_slist_find_and_remove(&active_router_timers, &router->node)) {
   1004a:	4601      	mov	r1, r0
   1004c:	4808      	ldr	r0, [pc, #32]	; (10070 <net_if_ipv6_router_rm+0x34>)
   1004e:	f00c ffe0 	bl	1d012 <sys_slist_find_and_remove>
   10052:	b118      	cbz	r0, 1005c <net_if_ipv6_router_rm+0x20>
		iface_router_run_timer(k_uptime_get_32());
   10054:	f00d f843 	bl	1d0de <k_uptime_get_32>
   10058:	f7ff fbb6 	bl	f7c8 <iface_router_run_timer>
	return true;
   1005c:	2001      	movs	r0, #1
	router->is_used = false;
   1005e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   10062:	f36f 0300 	bfc	r3, #0, #1
   10066:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
   1006a:	bd10      	pop	{r4, pc}
		return false;
   1006c:	4618      	mov	r0, r3
   1006e:	e7fc      	b.n	1006a <net_if_ipv6_router_rm+0x2e>
   10070:	20020930 	.word	0x20020930

00010074 <net_if_ipv6_select_src_addr>:
{
	struct in6_addr *src = NULL;
	u8_t best_match = 0U;
	struct net_if *iface;

	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   10074:	f248 03fe 	movw	r3, #33022	; 0x80fe
{
   10078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t best_match = 0U;
   1007a:	2400      	movs	r4, #0
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   1007c:	880a      	ldrh	r2, [r1, #0]
{
   1007e:	460d      	mov	r5, r1
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   10080:	429a      	cmp	r2, r3
	u8_t best_match = 0U;
   10082:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast(dst)) {
   10086:	d002      	beq.n	1008e <net_if_ipv6_select_src_addr+0x1a>
   10088:	780b      	ldrb	r3, [r1, #0]
   1008a:	2bff      	cmp	r3, #255	; 0xff
   1008c:	d114      	bne.n	100b8 <net_if_ipv6_select_src_addr+0x44>
   1008e:	4d17      	ldr	r5, [pc, #92]	; (100ec <net_if_ipv6_select_src_addr+0x78>)
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   10090:	4e17      	ldr	r6, [pc, #92]	; (100f0 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   10092:	b318      	cbz	r0, 100dc <net_if_ipv6_select_src_addr+0x68>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   10094:	2101      	movs	r1, #1
   10096:	f00d fb33 	bl	1d700 <net_if_ipv6_get_ll>
   1009a:	e016      	b.n	100ca <net_if_ipv6_select_src_addr+0x56>
			addr = net_if_ipv6_get_best_match(iface, dst,
   1009c:	6870      	ldr	r0, [r6, #4]
   1009e:	4629      	mov	r1, r5
   100a0:	f10d 0207 	add.w	r2, sp, #7
   100a4:	f7ff fbd0 	bl	f848 <net_if_ipv6_get_best_match.isra.0>
			if (addr) {
   100a8:	2800      	cmp	r0, #0
   100aa:	bf18      	it	ne
   100ac:	4604      	movne	r4, r0
		     iface++) {
   100ae:	3620      	adds	r6, #32
		     !dst_iface && iface != __net_if_end;
   100b0:	42be      	cmp	r6, r7
   100b2:	d1f3      	bne.n	1009c <net_if_ipv6_select_src_addr+0x28>
		}
	}

	if (!src) {
   100b4:	b9bc      	cbnz	r4, 100e6 <net_if_ipv6_select_src_addr+0x72>
   100b6:	e013      	b.n	100e0 <net_if_ipv6_select_src_addr+0x6c>
		for (iface = __net_if_start;
   100b8:	4e0c      	ldr	r6, [pc, #48]	; (100ec <net_if_ipv6_select_src_addr+0x78>)
		     !dst_iface && iface != __net_if_end;
   100ba:	4f0d      	ldr	r7, [pc, #52]	; (100f0 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   100bc:	2800      	cmp	r0, #0
   100be:	d0f7      	beq.n	100b0 <net_if_ipv6_select_src_addr+0x3c>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   100c0:	6840      	ldr	r0, [r0, #4]
   100c2:	f10d 0207 	add.w	r2, sp, #7
   100c6:	f7ff fbbf 	bl	f848 <net_if_ipv6_get_best_match.isra.0>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   100ca:	4604      	mov	r4, r0
   100cc:	e7f2      	b.n	100b4 <net_if_ipv6_select_src_addr+0x40>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   100ce:	2101      	movs	r1, #1
   100d0:	4628      	mov	r0, r5
   100d2:	f00d fb15 	bl	1d700 <net_if_ipv6_get_ll>
			if (addr) {
   100d6:	4604      	mov	r4, r0
   100d8:	b928      	cbnz	r0, 100e6 <net_if_ipv6_select_src_addr+0x72>
		     iface++) {
   100da:	3520      	adds	r5, #32
		     !dst_iface && iface != __net_if_end;
   100dc:	42b5      	cmp	r5, r6
   100de:	d1f6      	bne.n	100ce <net_if_ipv6_select_src_addr+0x5a>
		return net_ipv6_unspecified_address();
   100e0:	f000 f902 	bl	102e8 <net_ipv6_unspecified_address>
   100e4:	4604      	mov	r4, r0
	}

	return src;
}
   100e6:	4620      	mov	r0, r4
   100e8:	b003      	add	sp, #12
   100ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ec:	20020720 	.word	0x20020720
   100f0:	20020740 	.word	0x20020740

000100f4 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   100f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   100f6:	4b08      	ldr	r3, [pc, #32]	; (10118 <net_if_call_link_cb+0x24>)
{
   100f8:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   100fa:	681b      	ldr	r3, [r3, #0]
{
   100fc:	460e      	mov	r6, r1
   100fe:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   10100:	b14b      	cbz	r3, 10116 <net_if_call_link_cb+0x22>
   10102:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   10104:	463a      	mov	r2, r7
   10106:	4631      	mov	r1, r6
   10108:	4628      	mov	r0, r5
   1010a:	685b      	ldr	r3, [r3, #4]
   1010c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1010e:	b114      	cbz	r4, 10116 <net_if_call_link_cb+0x22>
   10110:	4623      	mov	r3, r4
   10112:	6824      	ldr	r4, [r4, #0]
   10114:	e7f6      	b.n	10104 <net_if_call_link_cb+0x10>
	}
}
   10116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10118:	20020a94 	.word	0x20020a94

0001011c <process_tx_packet>:
	struct net_linkaddr ll_dst = {
   1011c:	2300      	movs	r3, #0
{
   1011e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10120:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
   10122:	e9cd 3300 	strd	r3, r3, [sp]
Z_GENLIST_IS_EMPTY(slist)
   10126:	4b1f      	ldr	r3, [pc, #124]	; (101a4 <process_tx_packet+0x88>)
{
   10128:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&link_callbacks)) {
   1012a:	681b      	ldr	r3, [r3, #0]
	iface = net_pkt_iface(pkt);
   1012c:	6a06      	ldr	r6, [r0, #32]
	if (!sys_slist_is_empty(&link_callbacks)) {
   1012e:	b1ab      	cbz	r3, 1015c <process_tx_packet+0x40>
		if (net_linkaddr_set(&ll_dst_storage,
   10130:	6b01      	ldr	r1, [r0, #48]	; 0x30
   10132:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   10136:	b189      	cbz	r1, 1015c <process_tx_packet+0x40>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   10138:	2a06      	cmp	r2, #6
   1013a:	d80f      	bhi.n	1015c <process_tx_packet+0x40>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   1013c:	f10d 050a 	add.w	r5, sp, #10
   10140:	4628      	mov	r0, r5
	lladdr_store->len = new_len;
   10142:	f88d 2009 	strb.w	r2, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
   10146:	f00c fd86 	bl	1cc56 <memcpy>
			ll_dst.len = ll_dst_storage.len;
   1014a:	f89d 3009 	ldrb.w	r3, [sp, #9]
			ll_dst.addr = ll_dst_storage.addr;
   1014e:	9500      	str	r5, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
   10150:	f88d 3004 	strb.w	r3, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   10154:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   10158:	f88d 3005 	strb.w	r3, [sp, #5]
	context = net_pkt_context(pkt);
   1015c:	69e7      	ldr	r7, [r4, #28]
   1015e:	6833      	ldr	r3, [r6, #0]
   10160:	330c      	adds	r3, #12
   10162:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   10166:	07db      	lsls	r3, r3, #31
   10168:	d519      	bpl.n	1019e <process_tx_packet+0x82>
		status = net_if_l2(iface)->send(iface, pkt);
   1016a:	4630      	mov	r0, r6
   1016c:	f00c ff6c 	bl	1d048 <net_if_l2>
   10170:	4621      	mov	r1, r4
   10172:	6843      	ldr	r3, [r0, #4]
   10174:	4630      	mov	r0, r6
   10176:	4798      	blx	r3
	if (status < 0) {
   10178:	1e05      	subs	r5, r0, #0
   1017a:	da02      	bge.n	10182 <process_tx_packet+0x66>
		net_pkt_unref(pkt);
   1017c:	4620      	mov	r0, r4
   1017e:	f00d fd14 	bl	1dbaa <net_pkt_unref>
	if (context) {
   10182:	b11f      	cbz	r7, 1018c <process_tx_packet+0x70>
		net_context_send_cb(context, status);
   10184:	4629      	mov	r1, r5
   10186:	4638      	mov	r0, r7
   10188:	f00c ff63 	bl	1d052 <net_context_send_cb>
	if (ll_dst.addr) {
   1018c:	9b00      	ldr	r3, [sp, #0]
   1018e:	b123      	cbz	r3, 1019a <process_tx_packet+0x7e>
		net_if_call_link_cb(iface, &ll_dst, status);
   10190:	462a      	mov	r2, r5
   10192:	4669      	mov	r1, sp
   10194:	4630      	mov	r0, r6
   10196:	f7ff ffad 	bl	100f4 <net_if_call_link_cb>
}
   1019a:	b005      	add	sp, #20
   1019c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
   1019e:	f06f 053d 	mvn.w	r5, #61	; 0x3d
   101a2:	e7eb      	b.n	1017c <process_tx_packet+0x60>
   101a4:	20020a94 	.word	0x20020a94

000101a8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   101a8:	b570      	push	{r4, r5, r6, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   101aa:	4c1f      	ldr	r4, [pc, #124]	; (10228 <net_if_init+0x80>)
	net_tc_tx_init();
   101ac:	f000 f994 	bl	104d8 <net_tc_tx_init>
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   101b0:	4625      	mov	r5, r4
   101b2:	4e1e      	ldr	r6, [pc, #120]	; (1022c <net_if_init+0x84>)
   101b4:	42b4      	cmp	r4, r6
   101b6:	d12d      	bne.n	10214 <net_if_init+0x6c>
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
   101b8:	42ac      	cmp	r4, r5
   101ba:	d02a      	beq.n	10212 <net_if_init+0x6a>
	list->head = NULL;
   101bc:	2400      	movs	r4, #0
	k_delayed_work_init(&dad_timer, dad_timeout);
   101be:	491c      	ldr	r1, [pc, #112]	; (10230 <net_if_init+0x88>)
   101c0:	481c      	ldr	r0, [pc, #112]	; (10234 <net_if_init+0x8c>)
   101c2:	f010 fa7b 	bl	206bc <k_delayed_work_init>
   101c6:	4b1c      	ldr	r3, [pc, #112]	; (10238 <net_if_init+0x90>)
	k_delayed_work_init(&rs_timer, rs_timeout);
   101c8:	491c      	ldr	r1, [pc, #112]	; (1023c <net_if_init+0x94>)
   101ca:	481d      	ldr	r0, [pc, #116]	; (10240 <net_if_init+0x98>)
	list->tail = NULL;
   101cc:	e9c3 4400 	strd	r4, r4, [r3]
   101d0:	f010 fa74 	bl	206bc <k_delayed_work_init>
	list->head = NULL;
   101d4:	4b1b      	ldr	r3, [pc, #108]	; (10244 <net_if_init+0x9c>)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
   101d6:	491c      	ldr	r1, [pc, #112]	; (10248 <net_if_init+0xa0>)
   101d8:	481c      	ldr	r0, [pc, #112]	; (1024c <net_if_init+0xa4>)
	list->tail = NULL;
   101da:	e9c3 4400 	strd	r4, r4, [r3]
   101de:	f010 fa6d 	bl	206bc <k_delayed_work_init>
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
   101e2:	491b      	ldr	r1, [pc, #108]	; (10250 <net_if_init+0xa8>)
   101e4:	481b      	ldr	r0, [pc, #108]	; (10254 <net_if_init+0xac>)
   101e6:	f010 fa69 	bl	206bc <k_delayed_work_init>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   101ea:	2340      	movs	r3, #64	; 0x40
   101ec:	4d1a      	ldr	r5, [pc, #104]	; (10258 <net_if_init+0xb0>)
   101ee:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
   101f2:	f247 5330 	movw	r3, #30000	; 0x7530
 * @param ipv6 IPv6 address configuration
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if_ipv6 *ipv6)
{
#if defined(CONFIG_NET_NATIVE_IPV6)
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   101f6:	4628      	mov	r0, r5
   101f8:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
   101fc:	f00d faae 	bl	1d75c <net_if_ipv6_calc_reachable_time>
	k_delayed_work_init(&router_timer, iface_router_expired);
   10200:	4916      	ldr	r1, [pc, #88]	; (1025c <net_if_init+0xb4>)
   10202:	f8c5 00fc 	str.w	r0, [r5, #252]	; 0xfc
   10206:	4816      	ldr	r0, [pc, #88]	; (10260 <net_if_init+0xb8>)
   10208:	f010 fa58 	bl	206bc <k_delayed_work_init>
	list->head = NULL;
   1020c:	4b15      	ldr	r3, [pc, #84]	; (10264 <net_if_init+0xbc>)
	list->tail = NULL;
   1020e:	e9c3 4400 	strd	r4, r4, [r3]
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10212:	bd70      	pop	{r4, r5, r6, pc}
	return iface->if_dev->dev;
   10214:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   10216:	681b      	ldr	r3, [r3, #0]
   10218:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1021a:	b11b      	cbz	r3, 10224 <net_if_init+0x7c>
   1021c:	681b      	ldr	r3, [r3, #0]
   1021e:	b10b      	cbz	r3, 10224 <net_if_init+0x7c>
	api->init(iface);
   10220:	4620      	mov	r0, r4
   10222:	4798      	blx	r3
	     iface++, if_count++) {
   10224:	3420      	adds	r4, #32
   10226:	e7c5      	b.n	101b4 <net_if_init+0xc>
   10228:	20020720 	.word	0x20020720
   1022c:	20020740 	.word	0x20020740
   10230:	0000fb95 	.word	0x0000fb95
   10234:	20020960 	.word	0x20020960
   10238:	20020920 	.word	0x20020920
   1023c:	0000fa41 	.word	0x0000fa41
   10240:	20020b08 	.word	0x20020b08
   10244:	20020938 	.word	0x20020938
   10248:	0000f6b9 	.word	0x0000f6b9
   1024c:	20020940 	.word	0x20020940
   10250:	0000fd41 	.word	0x0000fd41
   10254:	20020aa4 	.word	0x20020aa4
   10258:	20020980 	.word	0x20020980
   1025c:	0000f941 	.word	0x0000f941
   10260:	20020ac4 	.word	0x20020ac4
   10264:	20020930 	.word	0x20020930

00010268 <net_if_post_init>:

void net_if_post_init(void)
{
   10268:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1026a:	4c08      	ldr	r4, [pc, #32]	; (1028c <net_if_post_init+0x24>)
   1026c:	4d08      	ldr	r5, [pc, #32]	; (10290 <net_if_post_init+0x28>)
   1026e:	42ac      	cmp	r4, r5
   10270:	d100      	bne.n	10274 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10272:	bd38      	pop	{r3, r4, r5, pc}
   10274:	6823      	ldr	r3, [r4, #0]
   10276:	330c      	adds	r3, #12
   10278:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1027c:	071b      	lsls	r3, r3, #28
   1027e:	d402      	bmi.n	10286 <net_if_post_init+0x1e>
			net_if_up(iface);
   10280:	4620      	mov	r0, r4
   10282:	f00d fad1 	bl	1d828 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10286:	3420      	adds	r4, #32
   10288:	e7f1      	b.n	1026e <net_if_post_init+0x6>
   1028a:	bf00      	nop
   1028c:	20020720 	.word	0x20020720
   10290:	20020740 	.word	0x20020740

00010294 <net_sprint_ll_addr_buf>:

char *net_sprint_ll_addr_buf(const u8_t *ll, u8_t ll_len,
			     char *buf, int buflen)
{
	u8_t i, len, blen;
	char *ptr = buf;
   10294:	3902      	subs	r1, #2
   10296:	b2c9      	uxtb	r1, r1
   10298:	2906      	cmp	r1, #6
{
   1029a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1029e:	4616      	mov	r6, r2
   102a0:	bf8c      	ite	hi
   102a2:	2206      	movhi	r2, #6
   102a4:	4a0f      	ldrls	r2, [pc, #60]	; (102e4 <net_sprint_ll_addr_buf+0x50>)
   102a6:	4605      	mov	r5, r0
   102a8:	bf98      	it	ls
   102aa:	5c52      	ldrbls	r2, [r2, r1]
		break;
	}

	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
		*ptr++ = ':';
   102ac:	f04f 083a 	mov.w	r8, #58	; 0x3a
   102b0:	1887      	adds	r7, r0, r2
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   102b2:	4630      	mov	r0, r6
   102b4:	b2dc      	uxtb	r4, r3
   102b6:	b15c      	cbz	r4, 102d0 <net_sprint_ll_addr_buf+0x3c>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   102b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   102bc:	2301      	movs	r3, #1
   102be:	2241      	movs	r2, #65	; 0x41
   102c0:	f00d fb18 	bl	1d8f4 <net_byte_to_hex>
		blen -= 3U;
   102c4:	3c03      	subs	r4, #3
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   102c6:	42bd      	cmp	r5, r7
		*ptr++ = ':';
   102c8:	f800 8b01 	strb.w	r8, [r0], #1
		blen -= 3U;
   102cc:	b2e4      	uxtb	r4, r4
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
   102ce:	d1f2      	bne.n	102b6 <net_sprint_ll_addr_buf+0x22>
	}

	if (!(ptr - buf)) {
   102d0:	2200      	movs	r2, #0
   102d2:	42b0      	cmp	r0, r6
		return NULL;
	}

	*(ptr - 1) = '\0';
   102d4:	bf16      	itet	ne
   102d6:	f800 2c01 	strbne.w	r2, [r0, #-1]
		return NULL;
   102da:	4610      	moveq	r0, r2
	return buf;
   102dc:	4630      	movne	r0, r6
}
   102de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102e2:	bf00      	nop
   102e4:	0002184a 	.word	0x0002184a

000102e8 <net_ipv6_unspecified_address>:
const struct in6_addr in6addr_loopback = IN6ADDR_LOOPBACK_INIT;

const struct in6_addr *net_ipv6_unspecified_address(void)
{
	return &in6addr_any;
}
   102e8:	4800      	ldr	r0, [pc, #0]	; (102ec <net_ipv6_unspecified_address+0x4>)
   102ea:	4770      	bx	lr
   102ec:	00020cc0 	.word	0x00020cc0

000102f0 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   102f0:	f04f 32ff 	mov.w	r2, #4294967295
   102f4:	2101      	movs	r1, #1
   102f6:	4801      	ldr	r0, [pc, #4]	; (102fc <net_context_init+0xc>)
   102f8:	f010 b967 	b.w	205ca <z_impl_k_sem_init>
   102fc:	20020b28 	.word	0x20020b28

00010300 <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 k_timeout_t timeout)
#endif
{
   10300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10304:	4680      	mov	r8, r0
   10306:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   1030a:	468a      	mov	sl, r1
	u64_t end = z_timeout_end_calc(timeout);
   1030c:	4620      	mov	r0, r4
   1030e:	4629      	mov	r1, r5
{
   10310:	4616      	mov	r6, r2
	u64_t end = z_timeout_end_calc(timeout);
   10312:	f010 fa47 	bl	207a4 <z_timeout_end_calc>
   10316:	4681      	mov	r9, r0
   10318:	468b      	mov	fp, r1
	struct net_buf_pool *pool = NULL;
	size_t alloc_len = 0;
	size_t hdr_len = 0;
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
   1031a:	f1ba 0f00 	cmp.w	sl, #0
   1031e:	d107      	bne.n	10330 <net_pkt_alloc_buffer+0x30>
   10320:	b936      	cbnz	r6, 10330 <net_pkt_alloc_buffer+0x30>
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
   10322:	f898 303b 	ldrb.w	r3, [r8, #59]	; 0x3b
   10326:	f013 0f0e 	tst.w	r3, #14
   1032a:	f3c3 0042 	ubfx	r0, r3, #1, #3
   1032e:	d05c      	beq.n	103ea <net_pkt_alloc_buffer+0xea>
		return 0;
	}

	if (k_is_in_isr()) {
   10330:	f010 f95b 	bl	205ea <k_is_in_isr>
   10334:	b108      	cbz	r0, 1033a <net_pkt_alloc_buffer+0x3a>
		timeout = K_NO_WAIT;
   10336:	2400      	movs	r4, #0
   10338:	2500      	movs	r5, #0
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
   1033a:	f8d8 0010 	ldr.w	r0, [r8, #16]
	size_t size = 0;
   1033e:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   10340:	4607      	mov	r7, r0
	while (buf) {
   10342:	2f00      	cmp	r7, #0
   10344:	d154      	bne.n	103f0 <net_pkt_alloc_buffer+0xf0>
}
#endif /* CONFIG_NET_PKT_TXTIME */

static inline size_t net_pkt_get_len(struct net_pkt *pkt)
{
	return net_buf_frags_len(pkt->frags);
   10346:	f00d fb6f 	bl	1da28 <net_buf_frags_len>
	if (!alloc_len) {
   1034a:	f898 c03b 	ldrb.w	ip, [r8, #59]	; 0x3b
   1034e:	4288      	cmp	r0, r1
   10350:	f3cc 0c42 	ubfx	ip, ip, #1, #3
   10354:	d156      	bne.n	10404 <net_pkt_alloc_buffer+0x104>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
   10356:	fa1f f38c 	uxth.w	r3, ip
	if (family == AF_UNSPEC) {
   1035a:	f1bc 0f00 	cmp.w	ip, #0
   1035e:	d051      	beq.n	10404 <net_pkt_alloc_buffer+0x104>
	size_t hdr_len = 0;
   10360:	2b02      	cmp	r3, #2
   10362:	bf0c      	ite	eq
   10364:	2228      	moveq	r2, #40	; 0x28
   10366:	2200      	movne	r2, #0
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   10368:	2e11      	cmp	r6, #17
   1036a:	d145      	bne.n	103f8 <net_pkt_alloc_buffer+0xf8>
		hdr_len += NET_UDPH_LEN;
   1036c:	3208      	adds	r2, #8
	if (net_pkt_iface(pkt)) {
   1036e:	f8d8 3020 	ldr.w	r3, [r8, #32]
						      net_pkt_family(pkt),
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
   10372:	4492      	add	sl, r2
	if (net_pkt_iface(pkt)) {
   10374:	b10b      	cbz	r3, 1037a <net_pkt_alloc_buffer+0x7a>
	return iface->if_dev->mtu;
   10376:	681b      	ldr	r3, [r3, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
   10378:	8b1b      	ldrh	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1037a:	f1bc 0f02 	cmp.w	ip, #2
   1037e:	d143      	bne.n	10408 <net_pkt_alloc_buffer+0x108>
		max_len = MAX(max_len, NET_IPV6_MTU);
   10380:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   10384:	bf38      	it	cc
   10386:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
	max_len -= existing;
   1038a:	1a46      	subs	r6, r0, r1
   1038c:	441e      	add	r6, r3
	if (pkt->context) {
		pool = get_data_pool(pkt->context);
	}

	if (!pool) {
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   1038e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   10392:	4b37      	ldr	r3, [pc, #220]	; (10470 <net_pkt_alloc_buffer+0x170>)
   10394:	4937      	ldr	r1, [pc, #220]	; (10474 <net_pkt_alloc_buffer+0x174>)
   10396:	4a38      	ldr	r2, [pc, #224]	; (10478 <net_pkt_alloc_buffer+0x178>)
	return MIN(size, max_len);
   10398:	4556      	cmp	r6, sl
   1039a:	bf28      	it	cs
   1039c:	4656      	movcs	r6, sl
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   1039e:	4288      	cmp	r0, r1
   103a0:	bf0c      	ite	eq
   103a2:	4692      	moveq	sl, r2
   103a4:	469a      	movne	sl, r3
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   103a6:	ea54 0305 	orrs.w	r3, r4, r5
   103aa:	d010      	beq.n	103ce <net_pkt_alloc_buffer+0xce>
   103ac:	1c69      	adds	r1, r5, #1
   103ae:	bf08      	it	eq
   103b0:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   103b4:	d00b      	beq.n	103ce <net_pkt_alloc_buffer+0xce>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   103b6:	f00b fc1b 	bl	1bbf0 <z_tick_get>
   103ba:	ebb9 0400 	subs.w	r4, r9, r0
   103be:	eb6b 0501 	sbc.w	r5, fp, r1
   103c2:	2c00      	cmp	r4, #0
   103c4:	f175 0300 	sbcs.w	r3, r5, #0
   103c8:	bfbc      	itt	lt
   103ca:	2400      	movlt	r4, #0
   103cc:	2500      	movlt	r5, #0
	u64_t end = z_timeout_end_calc(timeout);
   103ce:	4620      	mov	r0, r4
   103d0:	4629      	mov	r1, r5
   103d2:	f010 f9e7 	bl	207a4 <z_timeout_end_calc>
   103d6:	468b      	mov	fp, r1
   103d8:	4681      	mov	r9, r0
	struct net_buf *current = NULL;
   103da:	2100      	movs	r1, #0
	while (size) {
   103dc:	b9b6      	cbnz	r6, 1040c <net_pkt_alloc_buffer+0x10c>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
#endif

	if (!buf) {
   103de:	b1ff      	cbz	r7, 10420 <net_pkt_alloc_buffer+0x120>
		NET_ERR("Data buffer (%zd) allocation failed.", alloc_len);
#endif
		return -ENOMEM;
	}

	net_pkt_append_buffer(pkt, buf);
   103e0:	4640      	mov	r0, r8
   103e2:	4639      	mov	r1, r7
   103e4:	f00d fc66 	bl	1dcb4 <net_pkt_append_buffer>

	return 0;
   103e8:	2000      	movs	r0, #0
}
   103ea:	b003      	add	sp, #12
   103ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		size += buf->size;
   103f0:	89fb      	ldrh	r3, [r7, #14]
		buf = buf->frags;
   103f2:	683f      	ldr	r7, [r7, #0]
		size += buf->size;
   103f4:	4419      	add	r1, r3
		buf = buf->frags;
   103f6:	e7a4      	b.n	10342 <net_pkt_alloc_buffer+0x42>
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   103f8:	2e01      	cmp	r6, #1
   103fa:	d001      	beq.n	10400 <net_pkt_alloc_buffer+0x100>
   103fc:	2e3a      	cmp	r6, #58	; 0x3a
   103fe:	d1b6      	bne.n	1036e <net_pkt_alloc_buffer+0x6e>
		hdr_len += NET_ICMPH_LEN;
   10400:	3204      	adds	r2, #4
   10402:	e7b4      	b.n	1036e <net_pkt_alloc_buffer+0x6e>
	size_t hdr_len = 0;
   10404:	463a      	mov	r2, r7
   10406:	e7b2      	b.n	1036e <net_pkt_alloc_buffer+0x6e>
			max_len = size;
   10408:	4653      	mov	r3, sl
   1040a:	e7be      	b.n	1038a <net_pkt_alloc_buffer+0x8a>
		new = net_buf_alloc_fixed(pool, timeout);
   1040c:	462b      	mov	r3, r5
   1040e:	4622      	mov	r2, r4
   10410:	4650      	mov	r0, sl
   10412:	9101      	str	r1, [sp, #4]
   10414:	f00c fcf4 	bl	1ce00 <net_buf_alloc_fixed>
		if (!new) {
   10418:	9901      	ldr	r1, [sp, #4]
   1041a:	4603      	mov	r3, r0
   1041c:	b918      	cbnz	r0, 10426 <net_pkt_alloc_buffer+0x126>
	if (first) {
   1041e:	bb1f      	cbnz	r7, 10468 <net_pkt_alloc_buffer+0x168>
		return -ENOMEM;
   10420:	f06f 000b 	mvn.w	r0, #11
   10424:	e7e1      	b.n	103ea <net_pkt_alloc_buffer+0xea>
		if (!first && !current) {
   10426:	b907      	cbnz	r7, 1042a <net_pkt_alloc_buffer+0x12a>
   10428:	b1e1      	cbz	r1, 10464 <net_pkt_alloc_buffer+0x164>
			current->frags = new;
   1042a:	600b      	str	r3, [r1, #0]
		if (current->size > size) {
   1042c:	89da      	ldrh	r2, [r3, #14]
   1042e:	42b2      	cmp	r2, r6
			current->size = size;
   10430:	bf88      	it	hi
   10432:	81de      	strhhi	r6, [r3, #14]
		size -= current->size;
   10434:	89da      	ldrh	r2, [r3, #14]
   10436:	1ab6      	subs	r6, r6, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   10438:	ea54 0205 	orrs.w	r2, r4, r5
   1043c:	d010      	beq.n	10460 <net_pkt_alloc_buffer+0x160>
   1043e:	1c6a      	adds	r2, r5, #1
   10440:	bf08      	it	eq
   10442:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   10446:	d00b      	beq.n	10460 <net_pkt_alloc_buffer+0x160>
   10448:	9301      	str	r3, [sp, #4]
			s64_t remaining = end - z_tick_get();
   1044a:	f00b fbd1 	bl	1bbf0 <z_tick_get>
   1044e:	ebb9 0400 	subs.w	r4, r9, r0
   10452:	eb6b 0501 	sbc.w	r5, fp, r1
			if (remaining <= 0) {
   10456:	2c01      	cmp	r4, #1
   10458:	f175 0300 	sbcs.w	r3, r5, #0
   1045c:	9b01      	ldr	r3, [sp, #4]
   1045e:	dbbe      	blt.n	103de <net_pkt_alloc_buffer+0xde>
   10460:	4619      	mov	r1, r3
   10462:	e7bb      	b.n	103dc <net_pkt_alloc_buffer+0xdc>
   10464:	4607      	mov	r7, r0
   10466:	e7e1      	b.n	1042c <net_pkt_alloc_buffer+0x12c>
		net_buf_unref(first);
   10468:	4638      	mov	r0, r7
   1046a:	f7ff f8eb 	bl	f644 <net_buf_unref>
	if (!buf) {
   1046e:	e7d7      	b.n	10420 <net_pkt_alloc_buffer+0x120>
   10470:	200206c0 	.word	0x200206c0
   10474:	20020650 	.word	0x20020650
   10478:	200206e8 	.word	0x200206e8

0001047c <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
   1047c:	b530      	push	{r4, r5, lr}
   1047e:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
   10480:	9300      	str	r3, [sp, #0]
   10482:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   10486:	4613      	mov	r3, r2
   10488:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1048c:	460a      	mov	r2, r1
   1048e:	4601      	mov	r1, r0
   10490:	4802      	ldr	r0, [pc, #8]	; (1049c <net_pkt_alloc_with_buffer+0x20>)
   10492:	f00d fc20 	bl	1dcd6 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
   10496:	b005      	add	sp, #20
   10498:	bd30      	pop	{r4, r5, pc}
   1049a:	bf00      	nop
   1049c:	20020650 	.word	0x20020650

000104a0 <net_tc_submit_to_tx_queue>:

static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

bool net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
   104a0:	b508      	push	{r3, lr}
   104a2:	460b      	mov	r3, r1
   104a4:	3308      	adds	r3, #8
   104a6:	e8d3 3faf 	lda	r3, [r3]
	if (k_work_pending(net_pkt_work(pkt))) {
   104aa:	07db      	lsls	r3, r3, #31
   104ac:	d407      	bmi.n	104be <net_tc_submit_to_tx_queue+0x1e>
		return false;
	}

	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   104ae:	22d8      	movs	r2, #216	; 0xd8
   104b0:	4b04      	ldr	r3, [pc, #16]	; (104c4 <net_tc_submit_to_tx_queue+0x24>)
   104b2:	fb00 3002 	mla	r0, r0, r2, r3
   104b6:	f00d fdc1 	bl	1e03c <k_work_submit_to_queue>

	return true;
   104ba:	2001      	movs	r0, #1
}
   104bc:	bd08      	pop	{r3, pc}
		return false;
   104be:	2000      	movs	r0, #0
   104c0:	e7fc      	b.n	104bc <net_tc_submit_to_tx_queue+0x1c>
   104c2:	bf00      	nop
   104c4:	20020c18 	.word	0x20020c18

000104c8 <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   104c8:	2807      	cmp	r0, #7
   104ca:	bf88      	it	hi
   104cc:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
   104ce:	4b01      	ldr	r3, [pc, #4]	; (104d4 <net_tx_priority2tc+0xc>)
   104d0:	5c18      	ldrb	r0, [r3, r0]
   104d2:	4770      	bx	lr
   104d4:	00021863 	.word	0x00021863

000104d8 <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
   104d8:	2307      	movs	r3, #7
{
   104da:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
   104dc:	4c08      	ldr	r4, [pc, #32]	; (10500 <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   104de:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
		tx_classes[i].tc = thread_priority;
   104e2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		k_work_q_start(&tx_classes[i].work_q,
   104e6:	4620      	mov	r0, r4
   104e8:	f06f 0308 	mvn.w	r3, #8
   104ec:	4905      	ldr	r1, [pc, #20]	; (10504 <net_tc_tx_init+0x2c>)
   104ee:	f00b f9e9 	bl	1b8c4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   104f2:	4905      	ldr	r1, [pc, #20]	; (10508 <net_tc_tx_init+0x30>)
   104f4:	f104 0018 	add.w	r0, r4, #24
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   104f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104fc:	f010 b87d 	b.w	205fa <z_impl_k_thread_name_set>
   10500:	20020c18 	.word	0x20020c18
   10504:	200221e8 	.word	0x200221e8
   10508:	00021851 	.word	0x00021851

0001050c <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
   1050c:	2307      	movs	r3, #7
{
   1050e:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
   10510:	4c08      	ldr	r4, [pc, #32]	; (10534 <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   10512:	f240 52dc 	movw	r2, #1500	; 0x5dc
		rx_classes[i].tc = thread_priority;
   10516:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		k_work_q_start(&rx_classes[i].work_q,
   1051a:	4620      	mov	r0, r4
   1051c:	f06f 0308 	mvn.w	r3, #8
   10520:	4905      	ldr	r1, [pc, #20]	; (10538 <net_tc_rx_init+0x2c>)
   10522:	f00b f9cf 	bl	1b8c4 <k_work_q_start>
   10526:	4905      	ldr	r1, [pc, #20]	; (1053c <net_tc_rx_init+0x30>)
   10528:	f104 0018 	add.w	r0, r4, #24
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   1052c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10530:	f010 b863 	b.w	205fa <z_impl_k_thread_name_set>
   10534:	20020b40 	.word	0x20020b40
   10538:	20022698 	.word	0x20022698
   1053c:	0002185a 	.word	0x0002185a

00010540 <net_icmpv6_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
   10540:	4b03      	ldr	r3, [pc, #12]	; (10550 <net_icmpv6_register_handler+0x10>)
   10542:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   10544:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   10546:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   10548:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1054a:	b902      	cbnz	r2, 1054e <net_icmpv6_register_handler+0xe>
	list->tail = node;
   1054c:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1054e:	4770      	bx	lr
   10550:	20020cf0 	.word	0x20020cf0

00010554 <net_icmpv6_input>:
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  struct net_ipv6_hdr *ip_hdr)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   10554:	2200      	movs	r2, #0
   10556:	2304      	movs	r3, #4
{
   10558:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1055a:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv6_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1055c:	4669      	mov	r1, sp
{
   1055e:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   10560:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   10564:	f00d fd44 	bl	1dff0 <net_pkt_get_data>
	if (!icmp_hdr) {
   10568:	4604      	mov	r4, r0
   1056a:	b910      	cbnz	r0, 10572 <net_icmpv6_input+0x1e>
		NET_DBG("DROP: NULL ICMPv6 header");
		return NET_DROP;
   1056c:	2002      	movs	r0, #2
	}
drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   1056e:	b002      	add	sp, #8
   10570:	bd70      	pop	{r4, r5, r6, pc}
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   10572:	213a      	movs	r1, #58	; 0x3a
   10574:	4628      	mov	r0, r5
   10576:	f00d f9dc 	bl	1d932 <net_calc_chksum>
	if (net_calc_chksum_icmpv6(pkt) != 0U) {
   1057a:	2800      	cmp	r0, #0
   1057c:	d1f6      	bne.n	1056c <net_icmpv6_input+0x18>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
   1057e:	4628      	mov	r0, r5
   10580:	9901      	ldr	r1, [sp, #4]
   10582:	f00d fbe8 	bl	1dd56 <net_pkt_skip>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   10586:	4b0b      	ldr	r3, [pc, #44]	; (105b4 <net_icmpv6_input+0x60>)
   10588:	681b      	ldr	r3, [r3, #0]
   1058a:	2b00      	cmp	r3, #0
   1058c:	d0ee      	beq.n	1056c <net_icmpv6_input+0x18>
		if (cb->type == icmp_hdr->type &&
   1058e:	7821      	ldrb	r1, [r4, #0]
   10590:	7a1a      	ldrb	r2, [r3, #8]
   10592:	428a      	cmp	r2, r1
   10594:	d10a      	bne.n	105ac <net_icmpv6_input+0x58>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   10596:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
   10598:	7860      	ldrb	r0, [r4, #1]
   1059a:	4290      	cmp	r0, r2
   1059c:	d000      	beq.n	105a0 <net_icmpv6_input+0x4c>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   1059e:	b92a      	cbnz	r2, 105ac <net_icmpv6_input+0x58>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
   105a0:	4622      	mov	r2, r4
   105a2:	4631      	mov	r1, r6
   105a4:	4628      	mov	r0, r5
   105a6:	685b      	ldr	r3, [r3, #4]
   105a8:	4798      	blx	r3
   105aa:	e7e0      	b.n	1056e <net_icmpv6_input+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   105ac:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   105ae:	2b00      	cmp	r3, #0
   105b0:	d1ee      	bne.n	10590 <net_icmpv6_input+0x3c>
   105b2:	e7db      	b.n	1056c <net_icmpv6_input+0x18>
   105b4:	20020cf0 	.word	0x20020cf0

000105b8 <net_icmpv6_init>:
	.handler = icmpv6_handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   105b8:	4801      	ldr	r0, [pc, #4]	; (105c0 <net_icmpv6_init+0x8>)
   105ba:	f7ff bfc1 	b.w	10540 <net_icmpv6_register_handler>
   105be:	bf00      	nop
   105c0:	200200ac 	.word	0x200200ac

000105c4 <net_nbr_link>:
	return NULL;
}

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 const struct net_linkaddr *lladdr)
{
   105c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   105c8:	7843      	ldrb	r3, [r0, #1]
{
   105ca:	4606      	mov	r6, r0
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   105cc:	2bff      	cmp	r3, #255	; 0xff
{
   105ce:	4689      	mov	r9, r1
   105d0:	4614      	mov	r4, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   105d2:	d149      	bne.n	10668 <net_nbr_link+0xa4>
   105d4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 10674 <net_nbr_link+0xb0>
	int i, avail = -1;
   105d8:	f04f 35ff 	mov.w	r5, #4294967295
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   105dc:	2700      	movs	r7, #0
   105de:	46d0      	mov	r8, sl
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   105e0:	1c6a      	adds	r2, r5, #1
   105e2:	f89a 3008 	ldrb.w	r3, [sl, #8]
   105e6:	d115      	bne.n	10614 <net_nbr_link+0x50>
   105e8:	2b00      	cmp	r3, #0
   105ea:	d03b      	beq.n	10664 <net_nbr_link+0xa0>
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
		    !memcmp(lladdr->addr,
   105ec:	7922      	ldrb	r2, [r4, #4]
   105ee:	6820      	ldr	r0, [r4, #0]
   105f0:	f10a 0102 	add.w	r1, sl, #2
   105f4:	f00c fb1f 	bl	1cc36 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   105f8:	b970      	cbnz	r0, 10618 <net_nbr_link+0x54>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   105fa:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
   105fe:	4498      	add	r8, r3
   10600:	f898 3008 	ldrb.w	r3, [r8, #8]
   10604:	3301      	adds	r3, #1
   10606:	f888 3008 	strb.w	r3, [r8, #8]

			nbr->idx = i;
   1060a:	7077      	strb	r7, [r6, #1]
			nbr->iface = iface;
   1060c:	f8c6 9008 	str.w	r9, [r6, #8]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;

	nbr->iface = iface;

	return 0;
}
   10610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (net_neighbor_lladdr[i].ref &&
   10614:	2b00      	cmp	r3, #0
   10616:	d1e9      	bne.n	105ec <net_nbr_link+0x28>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   10618:	3701      	adds	r7, #1
   1061a:	2f08      	cmp	r7, #8
   1061c:	f10a 0a09 	add.w	sl, sl, #9
   10620:	d1de      	bne.n	105e0 <net_nbr_link+0x1c>
	if (avail < 0) {
   10622:	1c6b      	adds	r3, r5, #1
   10624:	d023      	beq.n	1066e <net_nbr_link+0xaa>
	net_neighbor_lladdr[avail].ref++;
   10626:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   1062a:	eb08 0300 	add.w	r3, r8, r0
   1062e:	7a1a      	ldrb	r2, [r3, #8]
   10630:	00ef      	lsls	r7, r5, #3
   10632:	3201      	adds	r2, #1
   10634:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   10636:	7075      	strb	r5, [r6, #1]
	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   10638:	6821      	ldr	r1, [r4, #0]
   1063a:	7922      	ldrb	r2, [r4, #4]
	if (!lladdr_store || !new_addr) {
   1063c:	b131      	cbz	r1, 1064c <net_nbr_link+0x88>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1063e:	2a06      	cmp	r2, #6
   10640:	d804      	bhi.n	1064c <net_nbr_link+0x88>
	memcpy(lladdr_store->addr, new_addr, new_len);
   10642:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   10644:	705a      	strb	r2, [r3, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   10646:	4440      	add	r0, r8
   10648:	f00c fb05 	bl	1cc56 <memcpy>
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1064c:	7922      	ldrb	r2, [r4, #4]
   1064e:	443d      	add	r5, r7
   10650:	eb08 0305 	add.w	r3, r8, r5
   10654:	705a      	strb	r2, [r3, #1]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
   10656:	7963      	ldrb	r3, [r4, #5]
	return 0;
   10658:	2000      	movs	r0, #0
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
   1065a:	f808 3005 	strb.w	r3, [r8, r5]
	nbr->iface = iface;
   1065e:	f8c6 9008 	str.w	r9, [r6, #8]
	return 0;
   10662:	e7d5      	b.n	10610 <net_nbr_link+0x4c>
   10664:	463d      	mov	r5, r7
   10666:	e7d7      	b.n	10618 <net_nbr_link+0x54>
		return -EALREADY;
   10668:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1066c:	e7d0      	b.n	10610 <net_nbr_link+0x4c>
		return -ENOENT;
   1066e:	f06f 0001 	mvn.w	r0, #1
   10672:	e7cd      	b.n	10610 <net_nbr_link+0x4c>
   10674:	20021c4c 	.word	0x20021c4c

00010678 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   10678:	b510      	push	{r4, lr}
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1067a:	7843      	ldrb	r3, [r0, #1]
{
   1067c:	4604      	mov	r4, r0
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1067e:	2bff      	cmp	r3, #255	; 0xff
   10680:	d014      	beq.n	106ac <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
   10682:	480c      	ldr	r0, [pc, #48]	; (106b4 <net_nbr_unlink+0x3c>)
   10684:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   10688:	4402      	add	r2, r0
   1068a:	7a11      	ldrb	r1, [r2, #8]
   1068c:	3901      	subs	r1, #1
   1068e:	b2c9      	uxtb	r1, r1
   10690:	7211      	strb	r1, [r2, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   10692:	b931      	cbnz	r1, 106a2 <net_nbr_unlink+0x2a>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   10694:	2209      	movs	r2, #9
   10696:	fb02 0003 	mla	r0, r2, r3, r0
   1069a:	2206      	movs	r2, #6
   1069c:	3002      	adds	r0, #2
   1069e:	f00c fb05 	bl	1ccac <memset>
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   106a2:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = NULL;
   106a4:	2000      	movs	r0, #0
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   106a6:	7063      	strb	r3, [r4, #1]
	nbr->iface = NULL;
   106a8:	60a0      	str	r0, [r4, #8]

	return 0;
}
   106aa:	bd10      	pop	{r4, pc}
		return -EALREADY;
   106ac:	f06f 0044 	mvn.w	r0, #68	; 0x44
   106b0:	e7fb      	b.n	106aa <net_nbr_unlink+0x32>
   106b2:	bf00      	nop
   106b4:	20021c4c 	.word	0x20021c4c

000106b8 <net_nbr_get_lladdr>:
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
		   "idx %d >= max %d", idx,
		   CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   106b8:	4b02      	ldr	r3, [pc, #8]	; (106c4 <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
   106ba:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   106be:	4418      	add	r0, r3
   106c0:	4770      	bx	lr
   106c2:	bf00      	nop
   106c4:	20021c4c 	.word	0x20021c4c

000106c8 <nbr_lookup.isra.0>:
}
#else
#define nbr_print(...)
#endif

static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   106c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106cc:	4605      	mov	r5, r0
   106ce:	4688      	mov	r8, r1
				  struct net_if *iface,
				  const struct in6_addr *addr)
{
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   106d0:	2600      	movs	r6, #0
   106d2:	4c0d      	ldr	r4, [pc, #52]	; (10708 <nbr_lookup.isra.0+0x40>)
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   106d4:	7823      	ldrb	r3, [r4, #0]
   106d6:	4627      	mov	r7, r4
   106d8:	b943      	cbnz	r3, 106ec <nbr_lookup.isra.0+0x24>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   106da:	3601      	adds	r6, #1
   106dc:	2e08      	cmp	r6, #8
   106de:	f104 0454 	add.w	r4, r4, #84	; 0x54
   106e2:	d1f7      	bne.n	106d4 <nbr_lookup.isra.0+0xc>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
			return nbr;
		}
	}

	return NULL;
   106e4:	2700      	movs	r7, #0
}
   106e6:	4638      	mov	r0, r7
   106e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (iface && nbr->iface != iface) {
   106ec:	b115      	cbz	r5, 106f4 <nbr_lookup.isra.0+0x2c>
   106ee:	68a3      	ldr	r3, [r4, #8]
   106f0:	429d      	cmp	r5, r3
   106f2:	d1f2      	bne.n	106da <nbr_lookup.isra.0+0x12>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   106f4:	68e0      	ldr	r0, [r4, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   106f6:	2210      	movs	r2, #16
   106f8:	4641      	mov	r1, r8
   106fa:	3004      	adds	r0, #4
   106fc:	f00c fa9b 	bl	1cc36 <memcmp>
   10700:	2800      	cmp	r0, #0
   10702:	d1ea      	bne.n	106da <nbr_lookup.isra.0+0x12>
   10704:	e7ef      	b.n	106e6 <nbr_lookup.isra.0+0x1e>
   10706:	bf00      	nop
   10708:	200200d0 	.word	0x200200d0

0001070c <dbg_update_neighbor_lladdr.isra.0>:
		log_strdup(net_sprint_ipv6_addr(addr)));

	return nbr;
}

static void dbg_update_neighbor_lladdr(const struct net_linkaddr *new_lladdr,
   1070c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1070e:	2318      	movs	r3, #24
   10710:	7841      	ldrb	r1, [r0, #1]
   10712:	4a06      	ldr	r2, [pc, #24]	; (1072c <dbg_update_neighbor_lladdr.isra.0+0x20>)
   10714:	3002      	adds	r0, #2
   10716:	f7ff fdbd 	bl	10294 <net_sprint_ll_addr_buf>
				       const struct net_linkaddr_storage *old_lladdr,
				       const struct in6_addr *addr)
{
	char out[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	snprintk(out, sizeof(out), "%s",
   1071a:	2118      	movs	r1, #24
   1071c:	4603      	mov	r3, r0
   1071e:	4a04      	ldr	r2, [pc, #16]	; (10730 <dbg_update_neighbor_lladdr.isra.0+0x24>)
   10720:	4668      	mov	r0, sp
   10722:	f00b fb4b 	bl	1bdbc <snprintk>
	NET_DBG("Updating neighbor %s lladdr %s (was %s)",
		log_strdup(net_sprint_ipv6_addr(addr)),
		log_strdup(net_sprint_ll_addr(new_lladdr->addr,
					      new_lladdr->len)),
		log_strdup(out));
}
   10726:	b007      	add	sp, #28
   10728:	f85d fb04 	ldr.w	pc, [sp], #4
   1072c:	20021c94 	.word	0x20021c94
   10730:	000212da 	.word	0x000212da

00010734 <ipv6_nd_restart_reachable_timer>:
}
#endif /* CONFIG_NET_IPV6_NBR_CACHE */

#if defined(CONFIG_NET_IPV6_ND)
static void ipv6_nd_restart_reachable_timer(struct net_nbr *nbr, s64_t time)
{
   10734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10738:	4614      	mov	r4, r2
   1073a:	461d      	mov	r5, r3
	s64_t remaining;

	if (nbr) {
   1073c:	4606      	mov	r6, r0
   1073e:	b130      	cbz	r0, 1074e <ipv6_nd_restart_reachable_timer+0x1a>
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   10740:	68c7      	ldr	r7, [r0, #12]
   10742:	f00e f85b 	bl	1e7fc <k_uptime_get>
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   10746:	68f3      	ldr	r3, [r6, #12]
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
   10748:	e9c7 0106 	strd	r0, r1, [r7, #24]
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
   1074c:	621c      	str	r4, [r3, #32]
	}

	remaining = k_delayed_work_remaining_get(&ipv6_nd_reachable_timer);
   1074e:	4814      	ldr	r0, [pc, #80]	; (107a0 <ipv6_nd_restart_reachable_timer+0x6c>)
   10750:	f00e f862 	bl	1e818 <k_delayed_work_remaining_get>
   10754:	17c3      	asrs	r3, r0, #31
	if (!remaining || remaining > time) {
   10756:	b118      	cbz	r0, 10760 <ipv6_nd_restart_reachable_timer+0x2c>
   10758:	4284      	cmp	r4, r0
   1075a:	eb75 0303 	sbcs.w	r3, r5, r3
   1075e:	da1c      	bge.n	1079a <ipv6_nd_restart_reachable_timer+0x66>
		k_delayed_work_submit(&ipv6_nd_reachable_timer, K_MSEC(time));
   10760:	2c00      	cmp	r4, #0
   10762:	f175 0300 	sbcs.w	r3, r5, #0
   10766:	4626      	mov	r6, r4
   10768:	bfb8      	it	lt
   1076a:	2600      	movlt	r6, #0
   1076c:	f240 34e7 	movw	r4, #999	; 0x3e7
 * @return The converted time value
 */
static TIME_CONSTEXPR inline u32_t k_ms_to_ticks_ceil32(u32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
   10770:	2500      	movs	r5, #0
			return (u32_t)((t * to_hz + off) / from_hz);
   10772:	03f0      	lsls	r0, r6, #15
   10774:	1900      	adds	r0, r0, r4
   10776:	ea4f 4156 	mov.w	r1, r6, lsr #17
   1077a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1077e:	f04f 0300 	mov.w	r3, #0
   10782:	eb45 0101 	adc.w	r1, r5, r1
   10786:	f7fb ff17 	bl	c5b8 <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1078a:	462b      	mov	r3, r5
	}
}
   1078c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10790:	4602      	mov	r2, r0
   10792:	4903      	ldr	r1, [pc, #12]	; (107a0 <ipv6_nd_restart_reachable_timer+0x6c>)
   10794:	4803      	ldr	r0, [pc, #12]	; (107a4 <ipv6_nd_restart_reachable_timer+0x70>)
   10796:	f00b b8bd 	b.w	1b914 <k_delayed_work_submit_to_queue>
   1079a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1079e:	bf00      	nop
   107a0:	20020cf8 	.word	0x20020cf8
   107a4:	20021b68 	.word	0x20021b68

000107a8 <ipv6_nbr_set_state>:
{
   107a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   107aa:	68c3      	ldr	r3, [r0, #12]
{
   107ac:	4604      	mov	r4, r0
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   107ae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   107b2:	428a      	cmp	r2, r1
   107b4:	d00d      	beq.n	107d2 <ipv6_nbr_set_state+0x2a>
   107b6:	2a05      	cmp	r2, #5
   107b8:	d00b      	beq.n	107d2 <ipv6_nbr_set_state+0x2a>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   107ba:	2902      	cmp	r1, #2
	net_ipv6_nbr_data(nbr)->state = new_state;
   107bc:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   107c0:	d107      	bne.n	107d2 <ipv6_nbr_set_state+0x2a>
		if (stale_counter + 1 != UINT32_MAX) {
   107c2:	4917      	ldr	r1, [pc, #92]	; (10820 <ipv6_nbr_set_state+0x78>)
   107c4:	680a      	ldr	r2, [r1, #0]
   107c6:	460d      	mov	r5, r1
   107c8:	1c90      	adds	r0, r2, #2
   107ca:	d003      	beq.n	107d4 <ipv6_nbr_set_state+0x2c>
			net_ipv6_nbr_data(nbr)->stale_counter = stale_counter++;
   107cc:	1c50      	adds	r0, r2, #1
   107ce:	6008      	str	r0, [r1, #0]
   107d0:	639a      	str	r2, [r3, #56]	; 0x38
}
   107d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   107d4:	f04f 32ff 	mov.w	r2, #4294967295
   107d8:	f04f 33ff 	mov.w	r3, #4294967295
   107dc:	4811      	ldr	r0, [pc, #68]	; (10824 <ipv6_nbr_set_state+0x7c>)
   107de:	f00a ff7b 	bl	1b6d8 <z_impl_k_sem_take>
			stale_counter = 0U;
   107e2:	2300      	movs	r3, #0
				if (!n || !n->ref) {
   107e4:	2754      	movs	r7, #84	; 0x54
			stale_counter = 0U;
   107e6:	461a      	mov	r2, r3
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   107e8:	4619      	mov	r1, r3
				if (!n || !n->ref) {
   107ea:	4e0f      	ldr	r6, [pc, #60]	; (10828 <ipv6_nbr_set_state+0x80>)
			stale_counter = 0U;
   107ec:	602b      	str	r3, [r5, #0]
				if (!n || !n->ref) {
   107ee:	fb07 f001 	mul.w	r0, r7, r1
   107f2:	5d80      	ldrb	r0, [r0, r6]
   107f4:	b148      	cbz	r0, 1080a <ipv6_nbr_set_state+0x62>
				data = net_ipv6_nbr_data(nbr);
   107f6:	68e0      	ldr	r0, [r4, #12]
				if (!data) {
   107f8:	b138      	cbz	r0, 1080a <ipv6_nbr_set_state+0x62>
				if (data->state != NET_IPV6_NBR_STATE_STALE) {
   107fa:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
   107fe:	f1bc 0f02 	cmp.w	ip, #2
				data->stale_counter = stale_counter++;
   10802:	bf02      	ittt	eq
   10804:	2301      	moveq	r3, #1
   10806:	6382      	streq	r2, [r0, #56]	; 0x38
   10808:	3201      	addeq	r2, #1
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1080a:	3101      	adds	r1, #1
   1080c:	2908      	cmp	r1, #8
   1080e:	d1ee      	bne.n	107ee <ipv6_nbr_set_state+0x46>
   10810:	b103      	cbz	r3, 10814 <ipv6_nbr_set_state+0x6c>
   10812:	602a      	str	r2, [r5, #0]
	z_impl_k_sem_give(sem);
   10814:	4803      	ldr	r0, [pc, #12]	; (10824 <ipv6_nbr_set_state+0x7c>)
}
   10816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1081a:	f00a bf37 	b.w	1b68c <z_impl_k_sem_give>
   1081e:	bf00      	nop
   10820:	20020d50 	.word	0x20020d50
   10824:	20020d38 	.word	0x20020d38
   10828:	200200d0 	.word	0x200200d0

0001082c <ipv6_ns_reply_timeout>:
{
   1082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	s64_t current = k_uptime_get();
   10830:	f00d ffe4 	bl	1e7fc <k_uptime_get>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   10834:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   10838:	2700      	movs	r7, #0
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   1083a:	1a24      	subs	r4, r4, r0
   1083c:	4d25      	ldr	r5, [pc, #148]	; (108d4 <ipv6_ns_reply_timeout+0xa8>)
   1083e:	eb67 0a01 	sbc.w	sl, r7, r1
		if (!nbr || !nbr->ref) {
   10842:	782b      	ldrb	r3, [r5, #0]
   10844:	b363      	cbz	r3, 108a0 <ipv6_ns_reply_timeout+0x74>
		data = net_ipv6_nbr_data(nbr);
   10846:	68ee      	ldr	r6, [r5, #12]
		if (!data) {
   10848:	b356      	cbz	r6, 108a0 <ipv6_ns_reply_timeout+0x74>
		if (!data->send_ns) {
   1084a:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
   1084e:	ea52 0103 	orrs.w	r1, r2, r3
   10852:	d025      	beq.n	108a0 <ipv6_ns_reply_timeout+0x74>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
   10854:	eb14 0802 	adds.w	r8, r4, r2
   10858:	eb4a 0903 	adc.w	r9, sl, r3
		if (remaining > 0) {
   1085c:	f1b8 0f01 	cmp.w	r8, #1
   10860:	f179 0300 	sbcs.w	r3, r9, #0
   10864:	db23      	blt.n	108ae <ipv6_ns_reply_timeout+0x82>
			if (!k_delayed_work_remaining_get(
   10866:	481c      	ldr	r0, [pc, #112]	; (108d8 <ipv6_ns_reply_timeout+0xac>)
   10868:	f00d ffd6 	bl	1e818 <k_delayed_work_remaining_get>
   1086c:	4606      	mov	r6, r0
   1086e:	b9b8      	cbnz	r0, 108a0 <ipv6_ns_reply_timeout+0x74>
   10870:	f240 3ce7 	movw	ip, #999	; 0x3e7
   10874:	ea4f 30c8 	mov.w	r0, r8, lsl #15
   10878:	eb10 000c 	adds.w	r0, r0, ip
   1087c:	f04f 0c00 	mov.w	ip, #0
   10880:	ea4f 4158 	mov.w	r1, r8, lsr #17
   10884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10888:	f04f 0300 	mov.w	r3, #0
   1088c:	eb41 010c 	adc.w	r1, r1, ip
   10890:	f7fb fe92 	bl	c5b8 <__aeabi_uldivmod>
   10894:	4633      	mov	r3, r6
   10896:	4602      	mov	r2, r0
   10898:	490f      	ldr	r1, [pc, #60]	; (108d8 <ipv6_ns_reply_timeout+0xac>)
   1089a:	4810      	ldr	r0, [pc, #64]	; (108dc <ipv6_ns_reply_timeout+0xb0>)
   1089c:	f00b f83a 	bl	1b914 <k_delayed_work_submit_to_queue>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   108a0:	3701      	adds	r7, #1
   108a2:	2f08      	cmp	r7, #8
   108a4:	f105 0554 	add.w	r5, r5, #84	; 0x54
   108a8:	d1cb      	bne.n	10842 <ipv6_ns_reply_timeout+0x16>
}
   108aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		data->send_ns = 0;
   108ae:	2200      	movs	r2, #0
   108b0:	2300      	movs	r3, #0
		if (!data->pending) {
   108b2:	6830      	ldr	r0, [r6, #0]
		data->send_ns = 0;
   108b4:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
		if (!data->pending) {
   108b8:	2800      	cmp	r0, #0
   108ba:	d0f1      	beq.n	108a0 <ipv6_ns_reply_timeout+0x74>
		net_pkt_unref(data->pending);
   108bc:	f00d f975 	bl	1dbaa <net_pkt_unref>
		net_pkt_unref(data->pending);
   108c0:	6830      	ldr	r0, [r6, #0]
   108c2:	f00d f972 	bl	1dbaa <net_pkt_unref>
		data->pending = NULL;
   108c6:	2300      	movs	r3, #0
		net_nbr_unref(nbr);
   108c8:	4628      	mov	r0, r5
		data->pending = NULL;
   108ca:	6033      	str	r3, [r6, #0]
		net_nbr_unref(nbr);
   108cc:	f00d fcf7 	bl	1e2be <net_nbr_unref>
   108d0:	e7e6      	b.n	108a0 <ipv6_ns_reply_timeout+0x74>
   108d2:	bf00      	nop
   108d4:	200200d0 	.word	0x200200d0
   108d8:	20020d18 	.word	0x20020d18
   108dc:	20021b68 	.word	0x20021b68

000108e0 <add_nbr>:
{
   108e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   108e4:	4605      	mov	r5, r0
   108e6:	460e      	mov	r6, r1
   108e8:	4617      	mov	r7, r2
   108ea:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   108ec:	f7ff feec 	bl	106c8 <nbr_lookup.isra.0>
	if (nbr) {
   108f0:	4604      	mov	r4, r0
   108f2:	2800      	cmp	r0, #0
   108f4:	d143      	bne.n	1097e <add_nbr+0x9e>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   108f6:	4825      	ldr	r0, [pc, #148]	; (1098c <add_nbr+0xac>)
   108f8:	f00d fcea 	bl	1e2d0 <net_nbr_get>
	if (!nbr) {
   108fc:	4604      	mov	r4, r0
   108fe:	2800      	cmp	r0, #0
   10900:	d136      	bne.n	10970 <add_nbr+0x90>
	return z_impl_k_sem_take(sem, timeout);
   10902:	f04f 32ff 	mov.w	r2, #4294967295
   10906:	f04f 33ff 	mov.w	r3, #4294967295
   1090a:	4821      	ldr	r0, [pc, #132]	; (10990 <add_nbr+0xb0>)
   1090c:	f00a fee4 	bl	1b6d8 <z_impl_k_sem_take>
	u32_t oldest = UINT32_MAX;
   10910:	f04f 31ff 	mov.w	r1, #4294967295
   10914:	4a1f      	ldr	r2, [pc, #124]	; (10994 <add_nbr+0xb4>)
	int nbr_idx = -1;
   10916:	460b      	mov	r3, r1
   10918:	4694      	mov	ip, r2
		if (!nbr || !nbr->ref) {
   1091a:	7810      	ldrb	r0, [r2, #0]
   1091c:	b188      	cbz	r0, 10942 <add_nbr+0x62>
		data = net_ipv6_nbr_data(nbr);
   1091e:	68d0      	ldr	r0, [r2, #12]
		if (!data || data->is_router ||
   10920:	b178      	cbz	r0, 10942 <add_nbr+0x62>
   10922:	f890 e035 	ldrb.w	lr, [r0, #53]	; 0x35
   10926:	f1be 0f00 	cmp.w	lr, #0
   1092a:	d10a      	bne.n	10942 <add_nbr+0x62>
   1092c:	f890 e030 	ldrb.w	lr, [r0, #48]	; 0x30
   10930:	f1be 0f02 	cmp.w	lr, #2
   10934:	d105      	bne.n	10942 <add_nbr+0x62>
		if (nbr_idx == -1) {
   10936:	f1b3 3fff 	cmp.w	r3, #4294967295
   1093a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1093c:	d023      	beq.n	10986 <add_nbr+0xa6>
		if (oldest == MIN(oldest, data->stale_counter)) {
   1093e:	4288      	cmp	r0, r1
   10940:	d321      	bcc.n	10986 <add_nbr+0xa6>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   10942:	3401      	adds	r4, #1
   10944:	2c08      	cmp	r4, #8
   10946:	f102 0254 	add.w	r2, r2, #84	; 0x54
   1094a:	d1e6      	bne.n	1091a <add_nbr+0x3a>
	if (nbr_idx != -1) {
   1094c:	1c5a      	adds	r2, r3, #1
   1094e:	d007      	beq.n	10960 <add_nbr+0x80>
				&net_ipv6_nbr_data(nbr)->addr);
   10950:	2254      	movs	r2, #84	; 0x54
   10952:	fb02 c303 	mla	r3, r2, r3, ip
		net_ipv6_nbr_rm(nbr->iface,
   10956:	68d9      	ldr	r1, [r3, #12]
   10958:	6898      	ldr	r0, [r3, #8]
   1095a:	3104      	adds	r1, #4
   1095c:	f00d fff7 	bl	1e94e <net_ipv6_nbr_rm>
	z_impl_k_sem_give(sem);
   10960:	480b      	ldr	r0, [pc, #44]	; (10990 <add_nbr+0xb0>)
   10962:	f00a fe93 	bl	1b68c <z_impl_k_sem_give>
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   10966:	4809      	ldr	r0, [pc, #36]	; (1098c <add_nbr+0xac>)
   10968:	f00d fcb2 	bl	1e2d0 <net_nbr_get>
	if (!nbr) {
   1096c:	4604      	mov	r4, r0
   1096e:	b130      	cbz	r0, 1097e <add_nbr+0x9e>
	nbr_init(nbr, iface, addr, is_router, state);
   10970:	463b      	mov	r3, r7
   10972:	4632      	mov	r2, r6
   10974:	4629      	mov	r1, r5
   10976:	f8cd 8000 	str.w	r8, [sp]
   1097a:	f00d ffb5 	bl	1e8e8 <nbr_init>
}
   1097e:	4620      	mov	r0, r4
   10980:	b002      	add	sp, #8
   10982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10986:	4601      	mov	r1, r0
   10988:	4623      	mov	r3, r4
   1098a:	e7da      	b.n	10942 <add_nbr+0x62>
   1098c:	200200c4 	.word	0x200200c4
   10990:	20020d38 	.word	0x20020d38
   10994:	200200d0 	.word	0x200200d0

00010998 <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     const struct in6_addr *src,
		     const struct in6_addr *dst,
		     const struct in6_addr *tgt,
		     bool is_my_address)
{
   10998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1099c:	460d      	mov	r5, r1
   1099e:	4692      	mov	sl, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   109a0:	2100      	movs	r1, #0
   109a2:	2214      	movs	r2, #20
{
   109a4:	b08d      	sub	sp, #52	; 0x34
   109a6:	4607      	mov	r7, r0
	struct net_icmpv6_ns_hdr *ns_hdr;
	struct in6_addr node_dst;
	struct net_nbr *nbr;
	u8_t llao_len;

	if (!dst) {
   109a8:	469b      	mov	fp, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   109aa:	e9cd 1202 	strd	r1, r2, [sp, #8]
{
   109ae:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   109b2:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
	if (!dst) {
   109b6:	b9eb      	cbnz	r3, 109f4 <net_ipv6_send_ns+0x5c>
	dst->s6_addr[0]   = 0xFF;
   109b8:	f240 23ff 	movw	r3, #767	; 0x2ff
   109bc:	9304      	str	r3, [sp, #16]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   109be:	f8ad b014 	strh.w	fp, [sp, #20]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   109c2:	f8ad b016 	strh.w	fp, [sp, #22]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   109c6:	f8ad b018 	strh.w	fp, [sp, #24]
	dst->s6_addr[10]  = 0U;
   109ca:	f44f 7380 	mov.w	r3, #256	; 0x100
   109ce:	f8ad 301a 	strh.w	r3, [sp, #26]
	dst->s6_addr[12]  = 0xFF;
   109d2:	23ff      	movs	r3, #255	; 0xff
   109d4:	f88d 301c 	strb.w	r3, [sp, #28]
	dst->s6_addr[13]  = src->s6_addr[13];
   109d8:	f899 300d 	ldrb.w	r3, [r9, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   109dc:	f899 200f 	ldrb.w	r2, [r9, #15]
	dst->s6_addr[13]  = src->s6_addr[13];
   109e0:	f88d 301d 	strb.w	r3, [sp, #29]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   109e4:	f899 300e 	ldrb.w	r3, [r9, #14]
   109e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   109ec:	f8ad 301e 	strh.w	r3, [sp, #30]
		net_ipv6_addr_create_solicited_node(tgt, &node_dst);
		dst = &node_dst;
   109f0:	f10d 0b10 	add.w	fp, sp, #16
	}

	llao_len = get_llao_len(iface);

	if (is_my_address) {
   109f4:	f1b8 0f00 	cmp.w	r8, #0
   109f8:	d075      	beq.n	10ae6 <net_ipv6_send_ns+0x14e>
		src = net_ipv6_unspecified_address();
   109fa:	f7ff fc75 	bl	102e8 <net_ipv6_unspecified_address>
		llao_len = 0U;
   109fe:	2600      	movs	r6, #0
		src = net_ipv6_unspecified_address();
   10a00:	4682      	mov	sl, r0

			goto drop;
		}
	}

	pkt = net_pkt_alloc_with_buffer(iface,
   10a02:	f640 42cd 	movw	r2, #3277	; 0xccd
   10a06:	2300      	movs	r3, #0
   10a08:	4638      	mov	r0, r7
   10a0a:	e9cd 2300 	strd	r2, r3, [sp]
   10a0e:	f106 0114 	add.w	r1, r6, #20
   10a12:	233a      	movs	r3, #58	; 0x3a
   10a14:	2202      	movs	r2, #2
   10a16:	f7ff fd31 	bl	1047c <net_pkt_alloc_with_buffer>
					sizeof(struct net_icmpv6_ns_hdr) +
					llao_len,
					AF_INET6, IPPROTO_ICMPV6,
					ND_NET_BUF_TIMEOUT);
	if (!pkt) {
   10a1a:	4604      	mov	r4, r0
   10a1c:	2800      	cmp	r0, #0
   10a1e:	f000 80a9 	beq.w	10b74 <net_ipv6_send_ns+0x1dc>
	pkt->ipv6_hop_limit = hop_limit;
   10a22:	23ff      	movs	r3, #255	; 0xff
		goto drop;
	}

	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_ND_HOP_LIMIT);

	if (net_ipv6_create(pkt, src, dst) ||
   10a24:	465a      	mov	r2, fp
   10a26:	4651      	mov	r1, sl
   10a28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   10a2c:	f00d fc77 	bl	1e31e <net_ipv6_create>
   10a30:	4602      	mov	r2, r0
   10a32:	2800      	cmp	r0, #0
   10a34:	d148      	bne.n	10ac8 <net_ipv6_send_ns+0x130>
	    net_icmpv6_create(pkt, NET_ICMPV6_NS, 0)) {
   10a36:	2187      	movs	r1, #135	; 0x87
   10a38:	4620      	mov	r0, r4
   10a3a:	f00d fb2c 	bl	1e096 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
   10a3e:	4682      	mov	sl, r0
   10a40:	2800      	cmp	r0, #0
   10a42:	d141      	bne.n	10ac8 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   10a44:	4620      	mov	r0, r4
   10a46:	a902      	add	r1, sp, #8
   10a48:	f00d fad2 	bl	1dff0 <net_pkt_get_data>
	if (!ns_hdr) {
   10a4c:	4603      	mov	r3, r0
   10a4e:	b3d8      	cbz	r0, 10ac8 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	ns_hdr->reserved = 0U;
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   10a50:	f10d 0e20 	add.w	lr, sp, #32
   10a54:	464a      	mov	r2, r9
   10a56:	46f4      	mov	ip, lr
	ns_hdr->reserved = 0U;
   10a58:	f880 a000 	strb.w	sl, [r0]
   10a5c:	f880 a001 	strb.w	sl, [r0, #1]
   10a60:	f880 a002 	strb.w	sl, [r0, #2]
   10a64:	f880 a003 	strb.w	sl, [r0, #3]
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   10a68:	f109 0a10 	add.w	sl, r9, #16
   10a6c:	46f1      	mov	r9, lr
   10a6e:	6810      	ldr	r0, [r2, #0]
   10a70:	6851      	ldr	r1, [r2, #4]
   10a72:	3208      	adds	r2, #8
   10a74:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   10a78:	4552      	cmp	r2, sl
   10a7a:	46ce      	mov	lr, r9
   10a7c:	d1f6      	bne.n	10a6c <net_ipv6_send_ns+0xd4>
   10a7e:	3304      	adds	r3, #4
   10a80:	469a      	mov	sl, r3
   10a82:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   10a86:	4662      	mov	r2, ip
   10a88:	ca03      	ldmia	r2!, {r0, r1}
   10a8a:	4572      	cmp	r2, lr
   10a8c:	6018      	str	r0, [r3, #0]
   10a8e:	6059      	str	r1, [r3, #4]
   10a90:	4694      	mov	ip, r2
   10a92:	f103 0308 	add.w	r3, r3, #8
   10a96:	d1f6      	bne.n	10a86 <net_ipv6_send_ns+0xee>

	if (net_pkt_set_data(pkt, &ns_access)) {
   10a98:	4620      	mov	r0, r4
   10a9a:	a902      	add	r1, sp, #8
   10a9c:	f00d fac9 	bl	1e032 <net_pkt_set_data>
   10aa0:	4681      	mov	r9, r0
   10aa2:	b988      	cbnz	r0, 10ac8 <net_ipv6_send_ns+0x130>
		goto drop;
	}

	if (!is_my_address) {
   10aa4:	f1b8 0f00 	cmp.w	r8, #0
   10aa8:	d02f      	beq.n	10b0a <net_ipv6_send_ns+0x172>
			      llao_len, NET_ICMPV6_ND_OPT_SLLAO)) {
			goto drop;
		}
	}

	net_pkt_cursor_init(pkt);
   10aaa:	4620      	mov	r0, r4
   10aac:	f00d f8c9 	bl	1dc42 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   10ab0:	213a      	movs	r1, #58	; 0x3a
   10ab2:	4620      	mov	r0, r4
   10ab4:	f00d fc96 	bl	1e3e4 <net_ipv6_finalize>

	nbr = add_nbr(iface, &ns_hdr->tgt, false,
   10ab8:	2300      	movs	r3, #0
   10aba:	4651      	mov	r1, sl
   10abc:	461a      	mov	r2, r3
   10abe:	4638      	mov	r0, r7
   10ac0:	f7ff ff0e 	bl	108e0 <add_nbr>
		      NET_IPV6_NBR_STATE_INCOMPLETE);
	if (!nbr) {
   10ac4:	4606      	mov	r6, r0
   10ac6:	bb50      	cbnz	r0, 10b1e <net_ipv6_send_ns+0x186>
	net_stats_update_ipv6_nd_sent(iface);

	return 0;

drop:
	if (pending) {
   10ac8:	2d00      	cmp	r5, #0
   10aca:	d04a      	beq.n	10b62 <net_ipv6_send_ns+0x1ca>
   10acc:	f06f 0936 	mvn.w	r9, #54	; 0x36
		net_pkt_unref(pending);
   10ad0:	4628      	mov	r0, r5
   10ad2:	f00d f86a 	bl	1dbaa <net_pkt_unref>
	}

	if (pkt) {
   10ad6:	b114      	cbz	r4, 10ade <net_ipv6_send_ns+0x146>
		net_pkt_unref(pkt);
   10ad8:	4620      	mov	r0, r4
   10ada:	f00d f866 	bl	1dbaa <net_pkt_unref>
	}

	net_stats_update_ipv6_nd_drop(iface);

	return ret;
}
   10ade:	4648      	mov	r0, r9
   10ae0:	b00d      	add	sp, #52	; 0x34
   10ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t total_len = net_if_get_link_addr(iface)->len +
   10ae6:	683b      	ldr	r3, [r7, #0]
   10ae8:	7d1e      	ldrb	r6, [r3, #20]
		if (!src) {
   10aea:	f1ba 0f00 	cmp.w	sl, #0
   10aee:	d104      	bne.n	10afa <net_ipv6_send_ns+0x162>
			src = net_if_ipv6_select_src_addr(iface, tgt);
   10af0:	4649      	mov	r1, r9
   10af2:	4638      	mov	r0, r7
   10af4:	f7ff fabe 	bl	10074 <net_if_ipv6_select_src_addr>
   10af8:	4682      	mov	sl, r0
		if (net_ipv6_is_addr_unspecified(src)) {
   10afa:	4650      	mov	r0, sl
   10afc:	f00d fe3d 	bl	1e77a <net_ipv6_is_addr_unspecified>
   10b00:	bb90      	cbnz	r0, 10b68 <net_ipv6_send_ns+0x1d0>
	return ROUND_UP(total_len, 8U);
   10b02:	3609      	adds	r6, #9
   10b04:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
   10b08:	e77b      	b.n	10a02 <net_ipv6_send_ns+0x6a>
	return &iface->if_dev->link_addr;
   10b0a:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
   10b0c:	2301      	movs	r3, #1
   10b0e:	4632      	mov	r2, r6
   10b10:	4620      	mov	r0, r4
   10b12:	3110      	adds	r1, #16
   10b14:	f00d fe8c 	bl	1e830 <set_llao>
   10b18:	2800      	cmp	r0, #0
   10b1a:	d1c6      	bne.n	10aaa <net_ipv6_send_ns+0x112>
   10b1c:	e7d4      	b.n	10ac8 <net_ipv6_send_ns+0x130>
	if (pending) {
   10b1e:	b1bd      	cbz	r5, 10b50 <net_ipv6_send_ns+0x1b8>
		if (!net_ipv6_nbr_data(nbr)->pending) {
   10b20:	68c7      	ldr	r7, [r0, #12]
   10b22:	683b      	ldr	r3, [r7, #0]
   10b24:	2b00      	cmp	r3, #0
   10b26:	d1d1      	bne.n	10acc <net_ipv6_send_ns+0x134>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   10b28:	4628      	mov	r0, r5
   10b2a:	f00d f825 	bl	1db78 <net_pkt_ref>
   10b2e:	6038      	str	r0, [r7, #0]
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
   10b30:	68f7      	ldr	r7, [r6, #12]
   10b32:	f00d fe63 	bl	1e7fc <k_uptime_get>
   10b36:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		if (!k_delayed_work_remaining_get(&ipv6_ns_reply_timer)) {
   10b3a:	4810      	ldr	r0, [pc, #64]	; (10b7c <net_ipv6_send_ns+0x1e4>)
   10b3c:	f00d fe6c 	bl	1e818 <k_delayed_work_remaining_get>
   10b40:	b930      	cbnz	r0, 10b50 <net_ipv6_send_ns+0x1b8>
   10b42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10b46:	2300      	movs	r3, #0
   10b48:	490c      	ldr	r1, [pc, #48]	; (10b7c <net_ipv6_send_ns+0x1e4>)
   10b4a:	480d      	ldr	r0, [pc, #52]	; (10b80 <net_ipv6_send_ns+0x1e8>)
   10b4c:	f00a fee2 	bl	1b914 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   10b50:	4620      	mov	r0, r4
   10b52:	f00c f9b7 	bl	1cec4 <net_send_data>
   10b56:	2800      	cmp	r0, #0
   10b58:	dac1      	bge.n	10ade <net_ipv6_send_ns+0x146>
		if (pending) {
   10b5a:	b115      	cbz	r5, 10b62 <net_ipv6_send_ns+0x1ca>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   10b5c:	68f0      	ldr	r0, [r6, #12]
   10b5e:	f00d fe1a 	bl	1e796 <nbr_clear_ns_pending>
	if (pending) {
   10b62:	f06f 0936 	mvn.w	r9, #54	; 0x36
   10b66:	e7b7      	b.n	10ad8 <net_ipv6_send_ns+0x140>
			ret = -EINVAL;
   10b68:	f06f 0915 	mvn.w	r9, #21
	if (pending) {
   10b6c:	2d00      	cmp	r5, #0
   10b6e:	d0b6      	beq.n	10ade <net_ipv6_send_ns+0x146>
   10b70:	2400      	movs	r4, #0
   10b72:	e7ad      	b.n	10ad0 <net_ipv6_send_ns+0x138>
		ret = -ENOMEM;
   10b74:	f06f 090b 	mvn.w	r9, #11
   10b78:	e7f8      	b.n	10b6c <net_ipv6_send_ns+0x1d4>
   10b7a:	bf00      	nop
   10b7c:	20020d18 	.word	0x20020d18
   10b80:	20021b68 	.word	0x20021b68

00010b84 <handle_ra_input>:
#endif

static enum net_verdict handle_ra_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
   10b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   10b88:	2300      	movs	r3, #0
{
   10b8a:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   10b8c:	220c      	movs	r2, #12
{
   10b8e:	b09b      	sub	sp, #108	; 0x6c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
   10b90:	e9cd 3208 	strd	r3, r2, [sp, #32]
					      struct net_icmpv6_ra_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   10b94:	aa06      	add	r2, sp, #24
   10b96:	920a      	str	r2, [sp, #40]	; 0x28
   10b98:	2202      	movs	r2, #2
{
   10b9a:	4604      	mov	r4, r0
   10b9c:	4688      	mov	r8, r1
	u16_t length = net_pkt_get_len(pkt);
   10b9e:	6906      	ldr	r6, [r0, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   10ba0:	920b      	str	r2, [sp, #44]	; 0x2c
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
   10ba2:	b956      	cbnz	r6, 10bba <handle_ra_input+0x36>
	struct net_icmpv6_ra_hdr *ra_hdr;
	struct net_if_router *router;
	u32_t mtu, reachable_time, retrans_timer;
	u16_t router_lifetime;

	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
   10ba4:	4620      	mov	r0, r4
   10ba6:	a908      	add	r1, sp, #32
	u16_t length = net_pkt_get_len(pkt);
   10ba8:	b29f      	uxth	r7, r3
	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
   10baa:	f00d fa21 	bl	1dff0 <net_pkt_get_data>
	if (!ra_hdr) {
   10bae:	4605      	mov	r5, r0
   10bb0:	b938      	cbnz	r0, 10bc2 <handle_ra_input+0x3e>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
   10bb2:	2002      	movs	r0, #2
}
   10bb4:	b01b      	add	sp, #108	; 0x6c
   10bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
   10bba:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   10bbc:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   10bbe:	4413      	add	r3, r2
		buf = buf->frags;
   10bc0:	e7ef      	b.n	10ba2 <handle_ra_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   10bc2:	2f39      	cmp	r7, #57	; 0x39
   10bc4:	d909      	bls.n	10bda <handle_ra_input+0x56>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   10bc6:	f898 3007 	ldrb.w	r3, [r8, #7]
   10bca:	2bff      	cmp	r3, #255	; 0xff
   10bcc:	d105      	bne.n	10bda <handle_ra_input+0x56>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   10bce:	f248 03fe 	movw	r3, #33022	; 0x80fe
   10bd2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   10bd6:	429a      	cmp	r2, r3
   10bd8:	d003      	beq.n	10be2 <handle_ra_input+0x5e>
	     !net_ipv6_is_ll_addr(&ip_hdr->src)) &&
   10bda:	f899 3001 	ldrb.w	r3, [r9, #1]
   10bde:	2b00      	cmp	r3, #0
   10be0:	d1e7      	bne.n	10bb2 <handle_ra_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   10be2:	9909      	ldr	r1, [sp, #36]	; 0x24
   10be4:	4620      	mov	r0, r4
   10be6:	f00d f8b6 	bl	1dd56 <net_pkt_skip>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   10bea:	686b      	ldr	r3, [r5, #4]
   10bec:	f8d5 9008 	ldr.w	r9, [r5, #8]
	if (ra_hdr->cur_hop_limit) {
   10bf0:	7829      	ldrb	r1, [r5, #0]
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   10bf2:	f8b5 a002 	ldrh.w	sl, [r5, #2]
	reachable_time = ntohl(ra_hdr->reachable_time);
   10bf6:	ba1b      	rev	r3, r3
	retrans_timer = ntohl(ra_hdr->retrans_timer);
   10bf8:	fa99 f989 	rev.w	r9, r9
	if (ra_hdr->cur_hop_limit) {
   10bfc:	b121      	cbz	r1, 10c08 <handle_ra_input+0x84>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt),
   10bfe:	6a22      	ldr	r2, [r4, #32]
   10c00:	6852      	ldr	r2, [r2, #4]
	if (!iface->config.ip.ipv6) {
   10c02:	b10a      	cbz	r2, 10c08 <handle_ra_input+0x84>
	iface->config.ip.ipv6->hop_limit = hop_limit;
   10c04:	f882 110d 	strb.w	r1, [r2, #269]	; 0x10d
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   10c08:	4aaf      	ldr	r2, [pc, #700]	; (10ec8 <handle_ra_input+0x344>)
   10c0a:	1e59      	subs	r1, r3, #1
   10c0c:	4291      	cmp	r1, r2
   10c0e:	d20d      	bcs.n	10c2c <handle_ra_input+0xa8>
	    (net_if_ipv6_get_reachable_time(net_pkt_iface(pkt)) !=
   10c10:	6a22      	ldr	r2, [r4, #32]
   10c12:	6857      	ldr	r7, [r2, #4]
	if (!iface->config.ip.ipv6) {
   10c14:	b12f      	cbz	r7, 10c22 <handle_ra_input+0x9e>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   10c16:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
   10c1a:	429a      	cmp	r2, r3
   10c1c:	d006      	beq.n	10c2c <handle_ra_input+0xa8>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
   10c1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
   10c22:	4638      	mov	r0, r7
   10c24:	f00c fd9a 	bl	1d75c <net_if_ipv6_calc_reachable_time>
   10c28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	if (retrans_timer) {
   10c2c:	f1b9 0f00 	cmp.w	r9, #0
   10c30:	d005      	beq.n	10c3e <handle_ra_input+0xba>
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
   10c32:	6a23      	ldr	r3, [r4, #32]
   10c34:	685b      	ldr	r3, [r3, #4]
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
#if defined(CONFIG_NET_NATIVE_IPV6)
	if (!iface->config.ip.ipv6) {
   10c36:	b113      	cbz	r3, 10c3e <handle_ra_input+0xba>
   10c38:	68aa      	ldr	r2, [r5, #8]
		return;
	}

	iface->config.ip.ipv6->retrans_timer = retrans_timer;
   10c3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pkt->ipv6_ext_opt_len = len;
   10c3e:	230c      	movs	r3, #12
				net_pkt_get_data(pkt, &nd_access);
   10c40:	4620      	mov	r0, r4
   10c42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   10c46:	a90a      	add	r1, sp, #40	; 0x28
   10c48:	f00d f9d2 	bl	1dff0 <net_pkt_get_data>
   10c4c:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
   10c4e:	ab12      	add	r3, sp, #72	; 0x48
   10c50:	9303      	str	r3, [sp, #12]
	while (nd_opt_hdr) {
   10c52:	bb6d      	cbnz	r5, 10cb0 <handle_ra_input+0x12c>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   10c54:	ea4f 220a 	mov.w	r2, sl, lsl #8
   10c58:	ea42 221a 	orr.w	r2, r2, sl, lsr #8
   10c5c:	b292      	uxth	r2, r2
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
   10c5e:	f108 0108 	add.w	r1, r8, #8
   10c62:	6a20      	ldr	r0, [r4, #32]
	router_lifetime = ntohs(ra_hdr->router_lifetime);
   10c64:	9204      	str	r2, [sp, #16]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt), &ip_hdr->src);
   10c66:	9103      	str	r1, [sp, #12]
   10c68:	f7ff f982 	bl	ff70 <net_if_ipv6_router_lookup>
	if (router) {
   10c6c:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   10c70:	4603      	mov	r3, r0
   10c72:	2800      	cmp	r0, #0
   10c74:	f000 816c 	beq.w	10f50 <handle_ra_input+0x3cc>
		if (!router_lifetime) {
   10c78:	2a00      	cmp	r2, #0
   10c7a:	f040 815f 	bne.w	10f3c <handle_ra_input+0x3b8>
			net_if_ipv6_router_rm(router);
   10c7e:	f7ff f9dd 	bl	1003c <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   10c82:	b16e      	cbz	r6, 10ca0 <handle_ra_input+0x11c>
   10c84:	68f3      	ldr	r3, [r6, #12]
   10c86:	6818      	ldr	r0, [r3, #0]
   10c88:	b150      	cbz	r0, 10ca0 <handle_ra_input+0x11c>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   10c8a:	f00c f91b 	bl	1cec4 <net_send_data>
   10c8e:	2800      	cmp	r0, #0
   10c90:	da03      	bge.n	10c9a <handle_ra_input+0x116>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   10c92:	68f3      	ldr	r3, [r6, #12]
   10c94:	6818      	ldr	r0, [r3, #0]
   10c96:	f00c ff88 	bl	1dbaa <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   10c9a:	68f0      	ldr	r0, [r6, #12]
   10c9c:	f00d fd7b 	bl	1e796 <nbr_clear_ns_pending>
	net_if_stop_rs(net_pkt_iface(pkt));
   10ca0:	6a20      	ldr	r0, [r4, #32]
   10ca2:	f7fe ff35 	bl	fb10 <net_if_stop_rs>
	net_pkt_unref(pkt);
   10ca6:	4620      	mov	r0, r4
   10ca8:	f00c ff7f 	bl	1dbaa <net_pkt_unref>
	return NET_OK;
   10cac:	2000      	movs	r0, #0
   10cae:	e781      	b.n	10bb4 <handle_ra_input+0x30>
	return net_pkt_skip(pkt, access->size);
   10cb0:	4620      	mov	r0, r4
   10cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10cb4:	f00d f84f 	bl	1dd56 <net_pkt_skip>
		switch (nd_opt_hdr->type) {
   10cb8:	782f      	ldrb	r7, [r5, #0]
   10cba:	2f03      	cmp	r7, #3
   10cbc:	d040      	beq.n	10d40 <handle_ra_input+0x1bc>
   10cbe:	2f05      	cmp	r7, #5
   10cc0:	d025      	beq.n	10d0e <handle_ra_input+0x18a>
   10cc2:	2f01      	cmp	r7, #1
   10cc4:	7869      	ldrb	r1, [r5, #1]
   10cc6:	f040 812e 	bne.w	10f26 <handle_ra_input+0x3a2>
	if (!read_llao(pkt, len, &llstorage)) {
   10cca:	4620      	mov	r0, r4
   10ccc:	9a03      	ldr	r2, [sp, #12]
   10cce:	f00d fdd2 	bl	1e876 <read_llao>
   10cd2:	2800      	cmp	r0, #0
   10cd4:	f43f af6d 	beq.w	10bb2 <handle_ra_input+0x2e>
	lladdr.len = llstorage.len;
   10cd8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   10cdc:	6a20      	ldr	r0, [r4, #32]
	lladdr.len = llstorage.len;
   10cde:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	lladdr.addr = llstorage.addr;
   10ce2:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
   10ce6:	930e      	str	r3, [sp, #56]	; 0x38
	return pkt->frags->data;
   10ce8:	6923      	ldr	r3, [r4, #16]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   10cea:	aa0e      	add	r2, sp, #56	; 0x38
				&NET_IPV6_HDR(pkt)->src,
   10cec:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
   10cee:	2302      	movs	r3, #2
   10cf0:	3108      	adds	r1, #8
   10cf2:	9300      	str	r3, [sp, #0]
   10cf4:	463b      	mov	r3, r7
   10cf6:	f00e f803 	bl	1ed00 <net_ipv6_nbr_add>
			if (!nbr) {
   10cfa:	4606      	mov	r6, r0
   10cfc:	2800      	cmp	r0, #0
   10cfe:	f43f af58 	beq.w	10bb2 <handle_ra_input+0x2e>
					net_pkt_get_data(pkt, &nd_access);
   10d02:	4620      	mov	r0, r4
   10d04:	a90a      	add	r1, sp, #40	; 0x28
   10d06:	f00d f973 	bl	1dff0 <net_pkt_get_data>
   10d0a:	4605      	mov	r5, r0
   10d0c:	e7a1      	b.n	10c52 <handle_ra_input+0xce>
			if (net_pkt_skip(pkt, 2) ||
   10d0e:	2102      	movs	r1, #2
   10d10:	4620      	mov	r0, r4
   10d12:	f00d f820 	bl	1dd56 <net_pkt_skip>
   10d16:	2800      	cmp	r0, #0
   10d18:	f47f af4b 	bne.w	10bb2 <handle_ra_input+0x2e>
			    net_pkt_read_be32(pkt, &mtu)) {
   10d1c:	4620      	mov	r0, r4
   10d1e:	a907      	add	r1, sp, #28
   10d20:	f00d f838 	bl	1dd94 <net_pkt_read_be32>
			if (net_pkt_skip(pkt, 2) ||
   10d24:	2800      	cmp	r0, #0
   10d26:	f47f af44 	bne.w	10bb2 <handle_ra_input+0x2e>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   10d2a:	9b07      	ldr	r3, [sp, #28]
   10d2c:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
   10d30:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
   10d34:	f4bf af3d 	bcs.w	10bb2 <handle_ra_input+0x2e>
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   10d38:	6a22      	ldr	r2, [r4, #32]
	iface->if_dev->mtu = mtu;
   10d3a:	6812      	ldr	r2, [r2, #0]
   10d3c:	8313      	strh	r3, [r2, #24]
}
   10d3e:	e7e0      	b.n	10d02 <handle_ra_input+0x17e>
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
   10d40:	9b03      	ldr	r3, [sp, #12]
				net_pkt_get_data(pkt, &rapfx_access);
   10d42:	4620      	mov	r0, r4
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
   10d44:	930c      	str	r3, [sp, #48]	; 0x30
   10d46:	231e      	movs	r3, #30
				net_pkt_get_data(pkt, &rapfx_access);
   10d48:	a90c      	add	r1, sp, #48	; 0x30
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
   10d4a:	930d      	str	r3, [sp, #52]	; 0x34
				net_pkt_get_data(pkt, &rapfx_access);
   10d4c:	f00d f950 	bl	1dff0 <net_pkt_get_data>
	if (!pfx_info) {
   10d50:	4605      	mov	r5, r0
   10d52:	2800      	cmp	r0, #0
   10d54:	f43f af2d 	beq.w	10bb2 <handle_ra_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   10d58:	4620      	mov	r0, r4
   10d5a:	990d      	ldr	r1, [sp, #52]	; 0x34
   10d5c:	f00c fffb 	bl	1dd56 <net_pkt_skip>
	valid_lifetime = ntohl(pfx_info->valid_lifetime);
   10d60:	f8d5 7002 	ldr.w	r7, [r5, #2]
   10d64:	f8d5 3006 	ldr.w	r3, [r5, #6]
   10d68:	ba3f      	rev	r7, r7
	preferred_lifetime = ntohl(pfx_info->preferred_lifetime);
   10d6a:	ba1b      	rev	r3, r3
	if (valid_lifetime >= preferred_lifetime &&
   10d6c:	429f      	cmp	r7, r3
   10d6e:	d3c8      	bcc.n	10d02 <handle_ra_input+0x17e>
   10d70:	f248 03fe 	movw	r3, #33022	; 0x80fe
   10d74:	89ea      	ldrh	r2, [r5, #14]
   10d76:	429a      	cmp	r2, r3
   10d78:	d0c3      	beq.n	10d02 <handle_ra_input+0x17e>
		if (pfx_info->flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   10d7a:	f995 3001 	ldrsb.w	r3, [r5, #1]
   10d7e:	2b00      	cmp	r3, #0
   10d80:	da25      	bge.n	10dce <handle_ra_input+0x24a>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   10d82:	46a9      	mov	r9, r5
   10d84:	f819 2b0e 	ldrb.w	r2, [r9], #14
   10d88:	6a20      	ldr	r0, [r4, #32]
   10d8a:	4649      	mov	r1, r9
   10d8c:	f00c fc48 	bl	1d620 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   10d90:	b940      	cbnz	r0, 10da4 <handle_ra_input+0x220>
		if (!prefix_info->valid_lifetime) {
   10d92:	f8d5 3002 	ldr.w	r3, [r5, #2]
   10d96:	b1d3      	cbz	r3, 10dce <handle_ra_input+0x24a>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   10d98:	4649      	mov	r1, r9
   10d9a:	782a      	ldrb	r2, [r5, #0]
   10d9c:	6a20      	ldr	r0, [r4, #32]
   10d9e:	f00c fbbf 	bl	1d520 <net_if_ipv6_prefix_add>
		if (prefix) {
   10da2:	b1a0      	cbz	r0, 10dce <handle_ra_input+0x24a>
	switch (prefix_info->valid_lifetime) {
   10da4:	f8d5 1002 	ldr.w	r1, [r5, #2]
   10da8:	b151      	cbz	r1, 10dc0 <handle_ra_input+0x23c>
   10daa:	1c4a      	adds	r2, r1, #1
   10dac:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   10db0:	d057      	beq.n	10e62 <handle_ra_input+0x2de>
	prefix->is_infinite = is_infinite;
   10db2:	f36f 0300 	bfc	r3, #0, #1
   10db6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
   10dba:	f7fb fde5 	bl	c988 <net_if_ipv6_prefix_set_timer>
		break;
   10dbe:	e006      	b.n	10dce <handle_ra_input+0x24a>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   10dc0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   10dc4:	f100 0110 	add.w	r1, r0, #16
   10dc8:	6a20      	ldr	r0, [r4, #32]
   10dca:	f00c fc4e 	bl	1d66a <net_if_ipv6_prefix_rm>
		if ((pfx_info->flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   10dce:	786b      	ldrb	r3, [r5, #1]
   10dd0:	065b      	lsls	r3, r3, #25
   10dd2:	d596      	bpl.n	10d02 <handle_ra_input+0x17e>
   10dd4:	2f00      	cmp	r7, #0
   10dd6:	d094      	beq.n	10d02 <handle_ra_input+0x17e>
		    valid_lifetime &&
   10dd8:	782b      	ldrb	r3, [r5, #0]
   10dda:	2b40      	cmp	r3, #64	; 0x40
   10ddc:	d191      	bne.n	10d02 <handle_ra_input+0x17e>
	net_ipv6_addr_create_iid(&addr,
   10dde:	6a22      	ldr	r2, [r4, #32]
	struct in6_addr addr = { };
   10de0:	2300      	movs	r3, #0
	net_ipv6_addr_create_iid(&addr,
   10de2:	6817      	ldr	r7, [r2, #0]
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   10de4:	f248 02fe 	movw	r2, #33022	; 0x80fe
	struct in6_addr addr = { };
   10de8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   10dec:	9311      	str	r3, [sp, #68]	; 0x44
   10dee:	920e      	str	r2, [sp, #56]	; 0x38
	addr->s6_addr[1] = 0x80;
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   10df0:	930f      	str	r3, [sp, #60]	; 0x3c

	switch (lladdr->len) {
   10df2:	7d3a      	ldrb	r2, [r7, #20]
   10df4:	2a06      	cmp	r2, #6
   10df6:	d039      	beq.n	10e6c <handle_ra_input+0x2e8>
   10df8:	2a08      	cmp	r2, #8
   10dfa:	d053      	beq.n	10ea4 <handle_ra_input+0x320>
   10dfc:	2a02      	cmp	r2, #2
   10dfe:	d113      	bne.n	10e28 <handle_ra_input+0x2a4>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154 ||
   10e00:	7d7b      	ldrb	r3, [r7, #21]
   10e02:	2b01      	cmp	r3, #1
   10e04:	d001      	beq.n	10e0a <handle_ra_input+0x286>
   10e06:	2b06      	cmp	r3, #6
   10e08:	d10e      	bne.n	10e28 <handle_ra_input+0x2a4>
		    lladdr->type == NET_LINK_CANBUS) {
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   10e0a:	2300      	movs	r3, #0
   10e0c:	9310      	str	r3, [sp, #64]	; 0x40
			addr->s6_addr[11] = 0xff;
   10e0e:	23ff      	movs	r3, #255	; 0xff
   10e10:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
			addr->s6_addr[12] = 0xfe;
   10e14:	23fe      	movs	r3, #254	; 0xfe
   10e16:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			addr->s6_addr[13] = 0U;
			addr->s6_addr[14] = lladdr->addr[0];
   10e1a:	693b      	ldr	r3, [r7, #16]
   10e1c:	781a      	ldrb	r2, [r3, #0]
   10e1e:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
			addr->s6_addr[15] = lladdr->addr[1];
   10e22:	785b      	ldrb	r3, [r3, #1]
   10e24:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   10e28:	2208      	movs	r2, #8
   10e2a:	f105 010e 	add.w	r1, r5, #14
   10e2e:	a80e      	add	r0, sp, #56	; 0x38
   10e30:	f00b ff11 	bl	1cc56 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   10e34:	2100      	movs	r1, #0
   10e36:	a80e      	add	r0, sp, #56	; 0x38
   10e38:	f7fe fe74 	bl	fb24 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   10e3c:	f8d5 9002 	ldr.w	r9, [r5, #2]
   10e40:	4607      	mov	r7, r0
   10e42:	2800      	cmp	r0, #0
   10e44:	d064      	beq.n	10f10 <handle_ra_input+0x38c>
   10e46:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   10e4a:	2b01      	cmp	r3, #1
   10e4c:	d160      	bne.n	10f10 <handle_ra_input+0x38c>
		if (prefix_info->valid_lifetime ==
   10e4e:	f1b9 3fff 	cmp.w	r9, #4294967295
   10e52:	d12c      	bne.n	10eae <handle_ra_input+0x32a>
	ifaddr->is_infinite = is_infinite;
   10e54:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   10e58:	f043 0301 	orr.w	r3, r3, #1
   10e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
   10e60:	e74f      	b.n	10d02 <handle_ra_input+0x17e>
	prefix->is_infinite = is_infinite;
   10e62:	f043 0301 	orr.w	r3, r3, #1
   10e66:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
   10e6a:	e7b0      	b.n	10dce <handle_ra_input+0x24a>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   10e6c:	2203      	movs	r2, #3
   10e6e:	6939      	ldr	r1, [r7, #16]
   10e70:	a810      	add	r0, sp, #64	; 0x40
   10e72:	f00b fef0 	bl	1cc56 <memcpy>
		addr->s6_addr[11] = 0xff;
   10e76:	23ff      	movs	r3, #255	; 0xff
		addr->s6_addr[12] = 0xfe;
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   10e78:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   10e7a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		addr->s6_addr[12] = 0xfe;
   10e7e:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   10e80:	6939      	ldr	r1, [r7, #16]
   10e82:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   10e86:	4411      	add	r1, r2
		addr->s6_addr[12] = 0xfe;
   10e88:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   10e8c:	f00b fee3 	bl	1cc56 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   10e90:	7d7b      	ldrb	r3, [r7, #21]
   10e92:	2b03      	cmp	r3, #3
   10e94:	d1c8      	bne.n	10e28 <handle_ra_input+0x2a4>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
   10e96:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   10e9a:	f083 0302 	eor.w	r3, r3, #2
   10e9e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   10ea2:	e7c1      	b.n	10e28 <handle_ra_input+0x2a4>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   10ea4:	6939      	ldr	r1, [r7, #16]
   10ea6:	a810      	add	r0, sp, #64	; 0x40
   10ea8:	f00b fed5 	bl	1cc56 <memcpy>
   10eac:	e7f3      	b.n	10e96 <handle_ra_input+0x312>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   10eae:	f5b9 5fe1 	cmp.w	r9, #7200	; 0x1c20
   10eb2:	d90b      	bls.n	10ecc <handle_ra_input+0x348>
			net_if_ipv6_addr_update_lifetime(
   10eb4:	f8d5 1002 	ldr.w	r1, [r5, #2]
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   10eb8:	4638      	mov	r0, r7
   10eba:	f7fb fd0d 	bl	c8d8 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   10ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   10ec2:	f36f 0300 	bfc	r3, #0, #1
   10ec6:	e7c9      	b.n	10e5c <handle_ra_input+0x2d8>
   10ec8:	0036ee80 	.word	0x0036ee80
	if (ifaddr->lifetime.timer_timeout == 0) {
   10ecc:	69c0      	ldr	r0, [r0, #28]
   10ece:	b1d0      	cbz	r0, 10f06 <handle_ra_input+0x382>
	remaining = (u64_t)ifaddr->lifetime.timer_timeout +
   10ed0:	6a3b      	ldr	r3, [r7, #32]
   10ed2:	4a21      	ldr	r2, [pc, #132]	; (10f58 <handle_ra_input+0x3d4>)
   10ed4:	17c1      	asrs	r1, r0, #31
   10ed6:	fbc2 0103 	smlal	r0, r1, r2, r3
   10eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return (u32_t)k_uptime_get();
   10ede:	f00d fc8d 	bl	1e7fc <k_uptime_get>
	return (u32_t)(remaining / MSEC_PER_SEC);
   10ee2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   10ee6:	69bb      	ldr	r3, [r7, #24]
	return (u32_t)(remaining / MSEC_PER_SEC);
   10ee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	return (u32_t)abs((s32_t)time1 - (s32_t)time2);
   10eec:	1ac0      	subs	r0, r0, r3
   10eee:	2800      	cmp	r0, #0
   10ef0:	bfb8      	it	lt
   10ef2:	4240      	neglt	r0, r0
	return (u32_t)(remaining / MSEC_PER_SEC);
   10ef4:	ebbb 0b00 	subs.w	fp, fp, r0
   10ef8:	f16c 0c00 	sbc.w	ip, ip, #0
   10efc:	2300      	movs	r3, #0
   10efe:	4658      	mov	r0, fp
   10f00:	4661      	mov	r1, ip
   10f02:	f7fb fb59 	bl	c5b8 <__aeabi_uldivmod>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   10f06:	4548      	cmp	r0, r9
   10f08:	d3d4      	bcc.n	10eb4 <handle_ra_input+0x330>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   10f0a:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   10f0e:	e7d3      	b.n	10eb8 <handle_ra_input+0x334>
		if (prefix_info->valid_lifetime ==
   10f10:	f1b9 3fff 	cmp.w	r9, #4294967295
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   10f14:	bf0c      	ite	eq
   10f16:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   10f18:	464b      	movne	r3, r9
   10f1a:	2201      	movs	r2, #1
   10f1c:	6a20      	ldr	r0, [r4, #32]
   10f1e:	a90e      	add	r1, sp, #56	; 0x38
   10f20:	f00c f920 	bl	1d164 <net_if_ipv6_addr_add>
   10f24:	e6ed      	b.n	10d02 <handle_ra_input+0x17e>
			if (net_pkt_skip(pkt, nd_opt_hdr->len * 8U - 2)) {
   10f26:	f06f 0301 	mvn.w	r3, #1
   10f2a:	4620      	mov	r0, r4
   10f2c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   10f30:	f00c ff11 	bl	1dd56 <net_pkt_skip>
   10f34:	2800      	cmp	r0, #0
   10f36:	f43f aee4 	beq.w	10d02 <handle_ra_input+0x17e>
   10f3a:	e63a      	b.n	10bb2 <handle_ra_input+0x2e>
			if (nbr) {
   10f3c:	b11e      	cbz	r6, 10f46 <handle_ra_input+0x3c2>
				net_ipv6_nbr_data(nbr)->is_router = true;
   10f3e:	2001      	movs	r0, #1
   10f40:	68f1      	ldr	r1, [r6, #12]
   10f42:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(
   10f46:	4611      	mov	r1, r2
   10f48:	4618      	mov	r0, r3
   10f4a:	f00c fbce 	bl	1d6ea <net_if_ipv6_router_update_lifetime>
   10f4e:	e698      	b.n	10c82 <handle_ra_input+0xfe>
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   10f50:	6a20      	ldr	r0, [r4, #32]
   10f52:	f7ff f83f 	bl	ffd4 <net_if_ipv6_router_add>
   10f56:	e694      	b.n	10c82 <handle_ra_input+0xfe>
   10f58:	7fffff9b 	.word	0x7fffff9b

00010f5c <ipv6_nd_reachable_timeout>:
{
   10f5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	s64_t current = k_uptime_get();
   10f60:	f00d fc4c 	bl	1e7fc <k_uptime_get>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   10f64:	2500      	movs	r5, #0
	s64_t current = k_uptime_get();
   10f66:	4606      	mov	r6, r0
   10f68:	468a      	mov	sl, r1
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   10f6a:	462f      	mov	r7, r5
   10f6c:	4c35      	ldr	r4, [pc, #212]	; (11044 <ipv6_nd_reachable_timeout+0xe8>)
		if (!nbr || !nbr->ref) {
   10f6e:	7823      	ldrb	r3, [r4, #0]
   10f70:	2b00      	cmp	r3, #0
   10f72:	d03c      	beq.n	10fee <ipv6_nd_reachable_timeout+0x92>
		data = net_ipv6_nbr_data(nbr);
   10f74:	f8d4 c00c 	ldr.w	ip, [r4, #12]
		if (!data) {
   10f78:	f1bc 0f00 	cmp.w	ip, #0
   10f7c:	d037      	beq.n	10fee <ipv6_nd_reachable_timeout+0x92>
		if (!data->reachable) {
   10f7e:	e9dc 2306 	ldrd	r2, r3, [ip, #24]
   10f82:	ea52 0103 	orrs.w	r1, r2, r3
   10f86:	d032      	beq.n	10fee <ipv6_nd_reachable_timeout+0x92>
		remaining = data->reachable + data->reachable_timeout - current;
   10f88:	f8dc 0020 	ldr.w	r0, [ip, #32]
   10f8c:	ebb2 0806 	subs.w	r8, r2, r6
   10f90:	eb63 090a 	sbc.w	r9, r3, sl
   10f94:	eb18 0200 	adds.w	r2, r8, r0
   10f98:	eb49 73e0 	adc.w	r3, r9, r0, asr #31
		if (remaining > 0) {
   10f9c:	2a01      	cmp	r2, #1
   10f9e:	f173 0100 	sbcs.w	r1, r3, #0
   10fa2:	db03      	blt.n	10fac <ipv6_nd_reachable_timeout+0x50>
			ipv6_nd_restart_reachable_timer(NULL, remaining);
   10fa4:	2000      	movs	r0, #0
				ipv6_nd_restart_reachable_timer(nbr,
   10fa6:	f7ff fbc5 	bl	10734 <ipv6_nd_restart_reachable_timer>
   10faa:	e020      	b.n	10fee <ipv6_nd_reachable_timeout+0x92>
		data->reachable = 0;
   10fac:	2300      	movs	r3, #0
   10fae:	2200      	movs	r2, #0
   10fb0:	e9cc 2306 	strd	r2, r3, [ip, #24]
		switch (data->state) {
   10fb4:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
   10fb8:	2b04      	cmp	r3, #4
   10fba:	d818      	bhi.n	10fee <ipv6_nd_reachable_timeout+0x92>
   10fbc:	e8df f003 	tbb	[pc, r3]
   10fc0:	27231f03 	.word	0x27231f03
   10fc4:	2c          	.byte	0x2c
   10fc5:	00          	.byte	0x00
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   10fc6:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
   10fca:	68a0      	ldr	r0, [r4, #8]
   10fcc:	2b02      	cmp	r3, #2
   10fce:	f10c 0104 	add.w	r1, ip, #4
   10fd2:	d902      	bls.n	10fda <ipv6_nd_reachable_timeout+0x7e>
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
   10fd4:	f00d fcbb 	bl	1e94e <net_ipv6_nbr_rm>
   10fd8:	e009      	b.n	10fee <ipv6_nd_reachable_timeout+0x92>
				data->ns_count++;
   10fda:	3301      	adds	r3, #1
   10fdc:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   10fe0:	2300      	movs	r3, #0
   10fe2:	e9cd 1700 	strd	r1, r7, [sp]
   10fe6:	461a      	mov	r2, r3
   10fe8:	4619      	mov	r1, r3
   10fea:	f7ff fcd5 	bl	10998 <net_ipv6_send_ns>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   10fee:	3501      	adds	r5, #1
   10ff0:	2d08      	cmp	r5, #8
   10ff2:	f104 0454 	add.w	r4, r4, #84	; 0x54
   10ff6:	d1ba      	bne.n	10f6e <ipv6_nd_reachable_timeout+0x12>
}
   10ff8:	b002      	add	sp, #8
   10ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			data->state = NET_IPV6_NBR_STATE_STALE;
   10ffe:	2302      	movs	r3, #2
   11000:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
			NET_DBG("nbr %p moving %s state to STALE (%d)",
   11004:	e7f3      	b.n	10fee <ipv6_nd_reachable_timeout+0x92>
			net_ipv6_nbr_rm(nbr->iface, &data->addr);
   11006:	68a0      	ldr	r0, [r4, #8]
   11008:	f10c 0104 	add.w	r1, ip, #4
   1100c:	e7e2      	b.n	10fd4 <ipv6_nd_reachable_timeout+0x78>
			data->state = NET_IPV6_NBR_STATE_PROBE;
   1100e:	2304      	movs	r3, #4
			data->ns_count = 0U;
   11010:	f88c 7034 	strb.w	r7, [ip, #52]	; 0x34
			data->state = NET_IPV6_NBR_STATE_PROBE;
   11014:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   11018:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
   1101c:	68a0      	ldr	r0, [r4, #8]
   1101e:	2b02      	cmp	r3, #2
   11020:	f10c 0104 	add.w	r1, ip, #4
   11024:	d8d6      	bhi.n	10fd4 <ipv6_nd_reachable_timeout+0x78>
				data->ns_count++;
   11026:	3301      	adds	r3, #1
   11028:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
   1102c:	2300      	movs	r3, #0
   1102e:	e9cd 1700 	strd	r1, r7, [sp]
   11032:	461a      	mov	r2, r3
   11034:	4619      	mov	r1, r3
   11036:	f7ff fcaf 	bl	10998 <net_ipv6_send_ns>
				ipv6_nd_restart_reachable_timer(nbr,
   1103a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1103e:	2300      	movs	r3, #0
   11040:	4620      	mov	r0, r4
   11042:	e7b0      	b.n	10fa6 <ipv6_nd_reachable_timeout+0x4a>
   11044:	200200d0 	.word	0x200200d0

00011048 <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
   11048:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   1104a:	480c      	ldr	r0, [pc, #48]	; (1107c <net_ipv6_nbr_init+0x34>)
   1104c:	f7ff fa78 	bl	10540 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   11050:	480b      	ldr	r0, [pc, #44]	; (11080 <net_ipv6_nbr_init+0x38>)
   11052:	f7ff fa75 	bl	10540 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
   11056:	490b      	ldr	r1, [pc, #44]	; (11084 <net_ipv6_nbr_init+0x3c>)
   11058:	480b      	ldr	r0, [pc, #44]	; (11088 <net_ipv6_nbr_init+0x40>)
   1105a:	f00f fb2f 	bl	206bc <k_delayed_work_init>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   1105e:	480b      	ldr	r0, [pc, #44]	; (1108c <net_ipv6_nbr_init+0x44>)
   11060:	f7ff fa6e 	bl	10540 <net_icmpv6_register_handler>
	k_delayed_work_init(&ipv6_nd_reachable_timer,
   11064:	490a      	ldr	r1, [pc, #40]	; (11090 <net_ipv6_nbr_init+0x48>)
   11066:	480b      	ldr	r0, [pc, #44]	; (11094 <net_ipv6_nbr_init+0x4c>)
   11068:	f00f fb28 	bl	206bc <k_delayed_work_init>
			    ipv6_nd_reachable_timeout);
	k_sem_init(&nbr_lock, 1, UINT_MAX);
#endif
}
   1106c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   11070:	f04f 32ff 	mov.w	r2, #4294967295
   11074:	2101      	movs	r1, #1
   11076:	4808      	ldr	r0, [pc, #32]	; (11098 <net_ipv6_nbr_init+0x50>)
   11078:	f00f baa7 	b.w	205ca <z_impl_k_sem_init>
   1107c:	20020370 	.word	0x20020370
   11080:	200200b8 	.word	0x200200b8
   11084:	0001082d 	.word	0x0001082d
   11088:	20020d18 	.word	0x20020d18
   1108c:	2002037c 	.word	0x2002037c
   11090:	00010f5d 	.word	0x00010f5d
   11094:	20020cf8 	.word	0x20020cf8
   11098:	20020d38 	.word	0x20020d38

0001109c <net_ipv6_mld_init>:
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
	net_icmpv6_register_handler(&mld_query_input_handler);
   1109c:	4801      	ldr	r0, [pc, #4]	; (110a4 <net_ipv6_mld_init+0x8>)
   1109e:	f7ff ba4f 	b.w	10540 <net_icmpv6_register_handler>
   110a2:	bf00      	nop
   110a4:	20020388 	.word	0x20020388

000110a8 <sys_slist_find_and_remove.constprop.0>:
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   110a8:	2100      	movs	r1, #0
   110aa:	4a0d      	ldr	r2, [pc, #52]	; (110e0 <sys_slist_find_and_remove.constprop.0+0x38>)
   110ac:	6813      	ldr	r3, [r2, #0]
   110ae:	b90b      	cbnz	r3, 110b4 <sys_slist_find_and_remove.constprop.0+0xc>
   110b0:	4618      	mov	r0, r3
   110b2:	4770      	bx	lr
   110b4:	4283      	cmp	r3, r0
   110b6:	d110      	bne.n	110da <sys_slist_find_and_remove.constprop.0+0x32>
Z_GENLIST_REMOVE(slist, snode)
   110b8:	6803      	ldr	r3, [r0, #0]
   110ba:	b941      	cbnz	r1, 110ce <sys_slist_find_and_remove.constprop.0+0x26>
   110bc:	6851      	ldr	r1, [r2, #4]
	list->head = node;
   110be:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   110c0:	4288      	cmp	r0, r1
   110c2:	d100      	bne.n	110c6 <sys_slist_find_and_remove.constprop.0+0x1e>
	list->tail = node;
   110c4:	6053      	str	r3, [r2, #4]
	parent->next = child;
   110c6:	2300      	movs	r3, #0
   110c8:	6003      	str	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   110ca:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   110cc:	4770      	bx	lr
	parent->next = child;
   110ce:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   110d0:	6853      	ldr	r3, [r2, #4]
   110d2:	4298      	cmp	r0, r3
	list->tail = node;
   110d4:	bf08      	it	eq
   110d6:	6051      	streq	r1, [r2, #4]
}
   110d8:	e7f5      	b.n	110c6 <sys_slist_find_and_remove.constprop.0+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   110da:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   110dc:	681b      	ldr	r3, [r3, #0]
   110de:	e7e6      	b.n	110ae <sys_slist_find_and_remove.constprop.0+0x6>
   110e0:	20020d54 	.word	0x20020d54

000110e4 <net_route_get_nbr>:
{
	int i;

	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   110e4:	4a09      	ldr	r2, [pc, #36]	; (1110c <net_route_get_nbr+0x28>)
   110e6:	2300      	movs	r3, #0
   110e8:	4611      	mov	r1, r2
{
   110ea:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   110ec:	7814      	ldrb	r4, [r2, #0]
   110ee:	b114      	cbz	r4, 110f6 <net_route_get_nbr+0x12>
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   110f0:	68d4      	ldr	r4, [r2, #12]
   110f2:	4284      	cmp	r4, r0
   110f4:	d006      	beq.n	11104 <net_route_get_nbr+0x20>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   110f6:	3301      	adds	r3, #1
   110f8:	2b08      	cmp	r3, #8
   110fa:	f102 0238 	add.w	r2, r2, #56	; 0x38
   110fe:	d1f5      	bne.n	110ec <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
   11100:	2000      	movs	r0, #0
}
   11102:	bd10      	pop	{r4, pc}
	return &net_route_entries_pool[idx].nbr;
   11104:	2038      	movs	r0, #56	; 0x38
   11106:	fb00 1003 	mla	r0, r0, r3, r1
   1110a:	e7fa      	b.n	11102 <net_route_get_nbr+0x1e>
   1110c:	20020394 	.word	0x20020394

00011110 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   11110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0U;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   11114:	2700      	movs	r7, #0
{
   11116:	4680      	mov	r8, r0
   11118:	4689      	mov	r9, r1
	u8_t longest_match = 0U;
   1111a:	46bb      	mov	fp, r7
	struct net_route_entry *route, *found = NULL;
   1111c:	463d      	mov	r5, r7
   1111e:	4e24      	ldr	r6, [pc, #144]	; (111b0 <net_route_lookup+0xa0>)
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   11120:	7832      	ldrb	r2, [r6, #0]
   11122:	b372      	cbz	r2, 11182 <net_route_lookup+0x72>
			continue;
		}

		if (iface && nbr->iface != iface) {
   11124:	f1b8 0f00 	cmp.w	r8, #0
   11128:	d002      	beq.n	11130 <net_route_lookup+0x20>
   1112a:	68b2      	ldr	r2, [r6, #8]
   1112c:	4542      	cmp	r2, r8
   1112e:	d128      	bne.n	11182 <net_route_lookup+0x72>
			continue;
		}

		route = net_route_data(nbr);
   11130:	f8d6 a00c 	ldr.w	sl, [r6, #12]

		if (route->prefix_len >= longest_match &&
   11134:	f89a 4020 	ldrb.w	r4, [sl, #32]
   11138:	455c      	cmp	r4, fp
   1113a:	d322      	bcc.n	11182 <net_route_lookup+0x72>
	if (length > 128) {
   1113c:	2c80      	cmp	r4, #128	; 0x80
   1113e:	d820      	bhi.n	11182 <net_route_lookup+0x72>
		    net_ipv6_is_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   11140:	f10a 0110 	add.w	r1, sl, #16
	if (memcmp(addr1, addr2, bytes)) {
   11144:	08e2      	lsrs	r2, r4, #3
   11146:	4648      	mov	r0, r9
   11148:	e9cd 1200 	strd	r1, r2, [sp]
   1114c:	f00b fd73 	bl	1cc36 <memcmp>
   11150:	23ff      	movs	r3, #255	; 0xff
   11152:	b9b0      	cbnz	r0, 11182 <net_route_lookup+0x72>
	u8_t bits = 128 - length;
   11154:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   11158:	f014 0407 	ands.w	r4, r4, #7
   1115c:	d00e      	beq.n	1117c <net_route_lookup+0x6c>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1115e:	9a01      	ldr	r2, [sp, #4]
   11160:	9900      	ldr	r1, [sp, #0]
   11162:	f819 0002 	ldrb.w	r0, [r9, r2]
   11166:	5c8a      	ldrb	r2, [r1, r2]
   11168:	4050      	eors	r0, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1116a:	f1c4 0208 	rsb	r2, r4, #8
   1116e:	fa03 f202 	lsl.w	r2, r3, r2
   11172:	405a      	eors	r2, r3
   11174:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   11178:	4220      	tst	r0, r4
   1117a:	d102      	bne.n	11182 <net_route_lookup+0x72>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   1117c:	4655      	mov	r5, sl
   1117e:	f89a b020 	ldrb.w	fp, [sl, #32]
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   11182:	3701      	adds	r7, #1
   11184:	2f08      	cmp	r7, #8
   11186:	d004      	beq.n	11192 <net_route_lookup+0x82>
   11188:	f01b 0f80 	tst.w	fp, #128	; 0x80
   1118c:	f106 0638 	add.w	r6, r6, #56	; 0x38
   11190:	d0c6      	beq.n	11120 <net_route_lookup+0x10>
		}
	}

	if (found) {
   11192:	b14d      	cbz	r5, 111a8 <net_route_lookup+0x98>
	sys_slist_find_and_remove(&routes, &route->node);
   11194:	4628      	mov	r0, r5
   11196:	f7ff ff87 	bl	110a8 <sys_slist_find_and_remove.constprop.0>
Z_GENLIST_PREPEND(slist, snode)
   1119a:	4b06      	ldr	r3, [pc, #24]	; (111b4 <net_route_lookup+0xa4>)
   1119c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1119e:	602a      	str	r2, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   111a0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   111a2:	601d      	str	r5, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   111a4:	b902      	cbnz	r2, 111a8 <net_route_lookup+0x98>
	list->tail = node;
   111a6:	605d      	str	r5, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   111a8:	4628      	mov	r0, r5
   111aa:	b003      	add	sp, #12
   111ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111b0:	20020394 	.word	0x20020394
   111b4:	20020d54 	.word	0x20020d54

000111b8 <net_route_del_by_nexthop>:

	return 0;
}

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   111b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   111bc:	f00d fbd7 	bl	1e96e <net_ipv6_nbr_lookup>
	int count = 0, status = 0;
   111c0:	2600      	movs	r6, #0
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   111c2:	4607      	mov	r7, r0
	int count = 0, status = 0;
   111c4:	4634      	mov	r4, r6
   111c6:	4d0d      	ldr	r5, [pc, #52]	; (111fc <net_route_del_by_nexthop+0x44>)
   111c8:	f505 78e0 	add.w	r8, r5, #448	; 0x1c0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);
   111cc:	68e8      	ldr	r0, [r5, #12]

		if (!route) {
   111ce:	b140      	cbz	r0, 111e2 <net_route_del_by_nexthop+0x2a>
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   111d0:	6843      	ldr	r3, [r0, #4]
   111d2:	b133      	cbz	r3, 111e2 <net_route_del_by_nexthop+0x2a>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   111d4:	685a      	ldr	r2, [r3, #4]
   111d6:	42ba      	cmp	r2, r7
   111d8:	d10c      	bne.n	111f4 <net_route_del_by_nexthop+0x3c>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   111da:	f00e f989 	bl	1f4f0 <net_route_del>
				if (!ret) {
   111de:	b958      	cbnz	r0, 111f8 <net_route_del_by_nexthop+0x40>
					count++;
   111e0:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   111e2:	3538      	adds	r5, #56	; 0x38
   111e4:	45a8      	cmp	r8, r5
   111e6:	d1f1      	bne.n	111cc <net_route_del_by_nexthop+0x14>
				break;
			}
		}
	}

	if (count) {
   111e8:	b90c      	cbnz	r4, 111ee <net_route_del_by_nexthop+0x36>
		return count;
	} else if (status < 0) {
   111ea:	ea06 74e6 	and.w	r4, r6, r6, asr #31
		return status;
	}

	return 0;
}
   111ee:	4620      	mov	r0, r4
   111f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   111f4:	681b      	ldr	r3, [r3, #0]
	return node->next;
   111f6:	e7ec      	b.n	111d2 <net_route_del_by_nexthop+0x1a>
   111f8:	4606      	mov	r6, r0
   111fa:	e7f2      	b.n	111e2 <net_route_del_by_nexthop+0x2a>
   111fc:	20020394 	.word	0x20020394

00011200 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
   11200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11204:	ed2d 8b02 	vpush	{d8}
	s16_t best_rank = -1;
	struct net_conn *conn;
	u16_t src_port;
	u16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   11208:	2a11      	cmp	r2, #17
{
   1120a:	4605      	mov	r5, r0
   1120c:	460e      	mov	r6, r1
   1120e:	469a      	mov	sl, r3
   11210:	b087      	sub	sp, #28
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   11212:	f040 80b8 	bne.w	11386 <net_conn_input+0x186>
		src_port = proto_hdr->udp->src_port;
   11216:	681b      	ldr	r3, [r3, #0]
   11218:	881a      	ldrh	r2, [r3, #0]
   1121a:	9204      	str	r2, [sp, #16]
		dst_port = proto_hdr->udp->dst_port;
   1121c:	f8b3 b002 	ldrh.w	fp, [r3, #2]
	return pkt->family;
   11220:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   11224:	f3c3 0342 	ubfx	r3, r3, #1, #3
   11228:	2b02      	cmp	r3, #2
   1122a:	d054      	beq.n	112d6 <net_conn_input+0xd6>
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
   1122c:	f04f 0800 	mov.w	r8, #0
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
			is_mcast_pkt = true;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   11230:	4b70      	ldr	r3, [pc, #448]	; (113f4 <net_conn_input+0x1f4>)
   11232:	681c      	ldr	r4, [r3, #0]
   11234:	2c00      	cmp	r4, #0
   11236:	f000 80cc 	beq.w	113d2 <net_conn_input+0x1d2>
   1123a:	f04f 0900 	mov.w	r9, #0
   1123e:	f04f 33ff 	mov.w	r3, #4294967295
   11242:	464f      	mov	r7, r9
   11244:	9303      	str	r3, [sp, #12]
		if (conn->proto != proto) {
   11246:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   11248:	2b11      	cmp	r3, #17
   1124a:	f040 8081 	bne.w	11350 <net_conn_input+0x150>
			continue;
		}

		if (conn->family != AF_UNSPEC &&
   1124e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   11252:	b12a      	cbz	r2, 11260 <net_conn_input+0x60>
   11254:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   11258:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1125c:	4293      	cmp	r3, r2
   1125e:	d177      	bne.n	11350 <net_conn_input+0x150>
			continue;
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conn->remote_addr)->sin_port) {
   11260:	88e3      	ldrh	r3, [r4, #6]
   11262:	b113      	cbz	r3, 1126a <net_conn_input+0x6a>
				if (net_sin(&conn->remote_addr)->sin_port !=
   11264:	9a04      	ldr	r2, [sp, #16]
   11266:	4293      	cmp	r3, r2
   11268:	d172      	bne.n	11350 <net_conn_input+0x150>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conn->local_addr)->sin_port) {
   1126a:	8be3      	ldrh	r3, [r4, #30]
   1126c:	b10b      	cbz	r3, 11272 <net_conn_input+0x72>
				if (net_sin(&conn->local_addr)->sin_port !=
   1126e:	455b      	cmp	r3, fp
   11270:	d16e      	bne.n	11350 <net_conn_input+0x150>
				    dst_port) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   11272:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   11276:	0799      	lsls	r1, r3, #30
   11278:	d450      	bmi.n	1131c <net_conn_input+0x11c>
						   true)) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   1127a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   1127e:	075a      	lsls	r2, r3, #29
   11280:	d518      	bpl.n	112b4 <net_conn_input+0xb4>
   11282:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
   11286:	8ba1      	ldrh	r1, [r4, #28]
   11288:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1128c:	4291      	cmp	r1, r2
   1128e:	d15f      	bne.n	11350 <net_conn_input+0x150>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   11290:	2a02      	cmp	r2, #2
   11292:	d10f      	bne.n	112b4 <net_conn_input+0xb4>
			    &net_sin6(addr)->sin6_addr)) {
   11294:	f104 0320 	add.w	r3, r4, #32
		if (!net_ipv6_is_addr_unspecified(
   11298:	4618      	mov	r0, r3
   1129a:	9305      	str	r3, [sp, #20]
   1129c:	f00e f9d8 	bl	1f650 <net_ipv6_is_addr_unspecified>
   112a0:	b940      	cbnz	r0, 112b4 <net_conn_input+0xb4>
			addr6 = &ip_hdr->ipv6->dst;
   112a2:	6831      	ldr	r1, [r6, #0]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   112a4:	9b05      	ldr	r3, [sp, #20]
   112a6:	2210      	movs	r2, #16
   112a8:	4618      	mov	r0, r3
   112aa:	3118      	adds	r1, #24
   112ac:	f00b fcc3 	bl	1cc36 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   112b0:	2800      	cmp	r0, #0
   112b2:	d14d      	bne.n	11350 <net_conn_input+0x150>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match != NULL &&
   112b4:	f1b9 0f00 	cmp.w	r9, #0
   112b8:	d157      	bne.n	1136a <net_conn_input+0x16a>
			    best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
				continue;
			}

			if (best_rank < NET_CONN_RANK(conn->flags)) {
   112ba:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   112be:	9a03      	ldr	r2, [sp, #12]
   112c0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   112c4:	429a      	cmp	r2, r3
   112c6:	da43      	bge.n	11350 <net_conn_input+0x150>
				struct net_pkt *mcast_pkt;

				if (!is_mcast_pkt) {
   112c8:	f1b8 0f00 	cmp.w	r8, #0
   112cc:	d152      	bne.n	11374 <net_conn_input+0x174>
					best_rank = NET_CONN_RANK(conn->flags);
   112ce:	b21b      	sxth	r3, r3
					best_match = conn;

					continue;
   112d0:	46a1      	mov	r9, r4
					best_rank = NET_CONN_RANK(conn->flags);
   112d2:	9303      	str	r3, [sp, #12]
					continue;
   112d4:	e03c      	b.n	11350 <net_conn_input+0x150>
		if (net_ipv6_addr_cmp(&ip_hdr->ipv6->src,
   112d6:	6808      	ldr	r0, [r1, #0]
   112d8:	2210      	movs	r2, #16
   112da:	f100 0118 	add.w	r1, r0, #24
   112de:	3008      	adds	r0, #8
   112e0:	f00b fca9 	bl	1cc36 <memcmp>
   112e4:	b990      	cbnz	r0, 1130c <net_conn_input+0x10c>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   112e6:	9b04      	ldr	r3, [sp, #16]
   112e8:	455b      	cmp	r3, fp
   112ea:	d04c      	beq.n	11386 <net_conn_input+0x186>
   112ec:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   112f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
   112f4:	2b02      	cmp	r3, #2
   112f6:	d199      	bne.n	1122c <net_conn_input+0x2c>
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
   112f8:	6833      	ldr	r3, [r6, #0]
   112fa:	f893 8018 	ldrb.w	r8, [r3, #24]
   112fe:	f1a8 00ff 	sub.w	r0, r8, #255	; 0xff
   11302:	f1d0 0800 	rsbs	r8, r0, #0
   11306:	eb48 0800 	adc.w	r8, r8, r0
   1130a:	e791      	b.n	11230 <net_conn_input+0x30>
		    net_ipv6_is_my_addr(&ip_hdr->ipv6->src)) {
   1130c:	6830      	ldr	r0, [r6, #0]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1130e:	2100      	movs	r1, #0
   11310:	3008      	adds	r0, #8
   11312:	f7fe fc07 	bl	fb24 <net_if_ipv6_addr_lookup>
				      &ip_hdr->ipv6->dst) ||
   11316:	2800      	cmp	r0, #0
   11318:	d1e5      	bne.n	112e6 <net_conn_input+0xe6>
   1131a:	e7e7      	b.n	112ec <net_conn_input+0xec>
   1131c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	if (addr->sa_family != net_pkt_family(pkt)) {
   11320:	88a1      	ldrh	r1, [r4, #4]
   11322:	f3c3 0242 	ubfx	r2, r3, #1, #3
   11326:	4291      	cmp	r1, r2
   11328:	d112      	bne.n	11350 <net_conn_input+0x150>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   1132a:	2a02      	cmp	r2, #2
   1132c:	d1a5      	bne.n	1127a <net_conn_input+0x7a>
			    &net_sin6(addr)->sin6_addr)) {
   1132e:	f104 0308 	add.w	r3, r4, #8
		if (!net_ipv6_is_addr_unspecified(
   11332:	4618      	mov	r0, r3
   11334:	9305      	str	r3, [sp, #20]
   11336:	f00e f98b 	bl	1f650 <net_ipv6_is_addr_unspecified>
   1133a:	2800      	cmp	r0, #0
   1133c:	d19d      	bne.n	1127a <net_conn_input+0x7a>
			addr6 = &ip_hdr->ipv6->src;
   1133e:	6831      	ldr	r1, [r6, #0]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   11340:	9b05      	ldr	r3, [sp, #20]
   11342:	2210      	movs	r2, #16
   11344:	4618      	mov	r0, r3
   11346:	3108      	adds	r1, #8
   11348:	f00b fc75 	bl	1cc36 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   1134c:	2800      	cmp	r0, #0
   1134e:	d094      	beq.n	1127a <net_conn_input+0x7a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11350:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   11352:	2c00      	cmp	r4, #0
   11354:	f47f af77 	bne.w	11246 <net_conn_input+0x46>
			best_rank = 0;
			best_match = conn;
		}
	}

	if (is_mcast_pkt && mcast_pkt_delivered) {
   11358:	f1b8 0f00 	cmp.w	r8, #0
   1135c:	d029      	beq.n	113b2 <net_conn_input+0x1b2>
   1135e:	b347      	cbz	r7, 113b2 <net_conn_input+0x1b2>
		/* As one or more multicast packets have already been delivered
		 * in the loop above, we shall not call the callback again here
		 */

		net_pkt_unref(pkt);
   11360:	4628      	mov	r0, r5
   11362:	f00c fc22 	bl	1dbaa <net_pkt_unref>
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);

		return NET_OK;
   11366:	2000      	movs	r0, #0
   11368:	e00e      	b.n	11388 <net_conn_input+0x188>
			if (best_match != NULL &&
   1136a:	f899 303f 	ldrb.w	r3, [r9, #63]	; 0x3f
   1136e:	071b      	lsls	r3, r3, #28
   11370:	d4ee      	bmi.n	11350 <net_conn_input+0x150>
   11372:	e7a2      	b.n	112ba <net_conn_input+0xba>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
   11374:	f640 42cd 	movw	r2, #3277	; 0xccd
   11378:	2300      	movs	r3, #0
   1137a:	4628      	mov	r0, r5
   1137c:	f00c fd89 	bl	1de92 <net_pkt_clone>
				if (!mcast_pkt) {
   11380:	ee08 0a10 	vmov	s16, r0
   11384:	b928      	cbnz	r0, 11392 <net_conn_input+0x192>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
   11386:	2002      	movs	r0, #2
}
   11388:	b007      	add	sp, #28
   1138a:	ecbd 8b02 	vpop	{d8}
   1138e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (conn->cb(conn, mcast_pkt, ip_hdr,
   11392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11394:	4601      	mov	r1, r0
   11396:	9300      	str	r3, [sp, #0]
   11398:	4632      	mov	r2, r6
   1139a:	4653      	mov	r3, sl
   1139c:	4620      	mov	r0, r4
   1139e:	6b67      	ldr	r7, [r4, #52]	; 0x34
   113a0:	47b8      	blx	r7
   113a2:	2802      	cmp	r0, #2
   113a4:	d103      	bne.n	113ae <net_conn_input+0x1ae>
					net_pkt_unref(mcast_pkt);
   113a6:	ee18 0a10 	vmov	r0, s16
   113aa:	f00c fbfe 	bl	1dbaa <net_pkt_unref>
				mcast_pkt_delivered = true;
   113ae:	4647      	mov	r7, r8
   113b0:	e7ce      	b.n	11350 <net_conn_input+0x150>
	if (conn) {
   113b2:	f1b9 0f00 	cmp.w	r9, #0
   113b6:	d00c      	beq.n	113d2 <net_conn_input+0x1d2>
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
   113b8:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   113bc:	4632      	mov	r2, r6
   113be:	9300      	str	r3, [sp, #0]
   113c0:	4629      	mov	r1, r5
   113c2:	4653      	mov	r3, sl
   113c4:	4648      	mov	r0, r9
   113c6:	f8d9 4034 	ldr.w	r4, [r9, #52]	; 0x34
   113ca:	47a0      	blx	r4
   113cc:	2802      	cmp	r0, #2
   113ce:	d1ca      	bne.n	11366 <net_conn_input+0x166>
   113d0:	e7d9      	b.n	11386 <net_conn_input+0x186>
   113d2:	f895 003b 	ldrb.w	r0, [r5, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
   113d6:	f3c0 0442 	ubfx	r4, r0, #1, #3
   113da:	2c02      	cmp	r4, #2
   113dc:	d1d3      	bne.n	11386 <net_conn_input+0x186>
	    net_pkt_family(pkt) == AF_INET6 && is_mcast_pkt) {
   113de:	f1b8 0f00 	cmp.w	r8, #0
   113e2:	d1d0      	bne.n	11386 <net_conn_input+0x186>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   113e4:	4643      	mov	r3, r8
   113e6:	2204      	movs	r2, #4
   113e8:	2101      	movs	r1, #1
   113ea:	4628      	mov	r0, r5
   113ec:	f00c febe 	bl	1e16c <net_icmpv6_send_error>
   113f0:	e7c9      	b.n	11386 <net_conn_input+0x186>
   113f2:	bf00      	nop
   113f4:	20020d64 	.word	0x20020d64

000113f8 <net_conn_init>:
	list->head = NULL;
   113f8:	2200      	movs	r2, #0
   113fa:	4b09      	ldr	r3, [pc, #36]	; (11420 <net_conn_init+0x28>)
	list->tail = NULL;
   113fc:	e9c3 2200 	strd	r2, r2, [r3]
	parent->next = child;
   11400:	4b08      	ldr	r3, [pc, #32]	; (11424 <net_conn_init+0x2c>)
   11402:	4619      	mov	r1, r3
   11404:	601a      	str	r2, [r3, #0]
   11406:	f103 0240 	add.w	r2, r3, #64	; 0x40
   1140a:	f841 2f80 	str.w	r2, [r1, #128]!
   1140e:	461a      	mov	r2, r3
   11410:	f842 1fc0 	str.w	r1, [r2, #192]!
   11414:	4904      	ldr	r1, [pc, #16]	; (11428 <net_conn_init+0x30>)
   11416:	641b      	str	r3, [r3, #64]	; 0x40
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   11418:	e9c1 2300 	strd	r2, r3, [r1]
		sys_slist_prepend(&conn_unused, &conns[i].node);
	}
}
   1141c:	4770      	bx	lr
   1141e:	bf00      	nop
   11420:	20020d64 	.word	0x20020d64
   11424:	20020d6c 	.word	0x20020d6c
   11428:	20020d5c 	.word	0x20020d5c

0001142c <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   1142c:	b513      	push	{r0, r1, r4, lr}
	struct device *dev = entropy_driver;
   1142e:	4c0a      	ldr	r4, [pc, #40]	; (11458 <sys_rand32_get+0x2c>)
   11430:	6820      	ldr	r0, [r4, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   11432:	b918      	cbnz	r0, 1143c <sys_rand32_get+0x10>
   11434:	4809      	ldr	r0, [pc, #36]	; (1145c <sys_rand32_get+0x30>)
   11436:	f009 fad3 	bl	1a9e0 <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   1143a:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1143c:	2204      	movs	r2, #4
   1143e:	6883      	ldr	r3, [r0, #8]
   11440:	eb0d 0102 	add.w	r1, sp, r2
   11444:	681b      	ldr	r3, [r3, #0]
   11446:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   11448:	2800      	cmp	r0, #0
   1144a:	da02      	bge.n	11452 <sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1144c:	f7fc fcfe 	bl	de4c <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   11450:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   11452:	9801      	ldr	r0, [sp, #4]
   11454:	b002      	add	sp, #8
   11456:	bd10      	pop	{r4, pc}
   11458:	20020e6c 	.word	0x20020e6c
   1145c:	0002186b 	.word	0x0002186b

00011460 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   11460:	2301      	movs	r3, #1
   11462:	4a05      	ldr	r2, [pc, #20]	; (11478 <adc_context_start_sampling.isra.0+0x18>)
   11464:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   11468:	b108      	cbz	r0, 1146e <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1146a:	60d3      	str	r3, [r2, #12]
}
   1146c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1146e:	6013      	str	r3, [r2, #0]
   11470:	4a02      	ldr	r2, [pc, #8]	; (1147c <adc_context_start_sampling.isra.0+0x1c>)
   11472:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   11474:	4770      	bx	lr
   11476:	bf00      	nop
   11478:	4000e000 	.word	0x4000e000
   1147c:	4000e004 	.word	0x4000e004

00011480 <adc_nrfx_channel_setup>:
	u8_t channel_id = channel_cfg->channel_id;
   11480:	7908      	ldrb	r0, [r1, #4]
{
   11482:	b570      	push	{r4, r5, r6, lr}
	u8_t channel_id = channel_cfg->channel_id;
   11484:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   11488:	2c07      	cmp	r4, #7
   1148a:	d826      	bhi.n	114da <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->gain) {
   1148c:	780b      	ldrb	r3, [r1, #0]
   1148e:	2b09      	cmp	r3, #9
   11490:	d819      	bhi.n	114c6 <adc_nrfx_channel_setup+0x46>
   11492:	e8df f003 	tbb	[pc, r3]
   11496:	0606      	.short	0x0606
   11498:	18060606 	.word	0x18060606
   1149c:	16181405 	.word	0x16181405
		config.gain = NRF_SAADC_GAIN1;
   114a0:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
   114a2:	784a      	ldrb	r2, [r1, #1]
   114a4:	2a03      	cmp	r2, #3
   114a6:	d01b      	beq.n	114e0 <adc_nrfx_channel_setup+0x60>
   114a8:	2a04      	cmp	r2, #4
   114aa:	d033      	beq.n	11514 <adc_nrfx_channel_setup+0x94>
   114ac:	4936      	ldr	r1, [pc, #216]	; (11588 <adc_nrfx_channel_setup+0x108>)
   114ae:	4b37      	ldr	r3, [pc, #220]	; (1158c <adc_nrfx_channel_setup+0x10c>)
		LOG_ERR("Selected ADC reference is not valid");
   114b0:	4837      	ldr	r0, [pc, #220]	; (11590 <adc_nrfx_channel_setup+0x110>)
   114b2:	1ac9      	subs	r1, r1, r3
   114b4:	08c9      	lsrs	r1, r1, #3
   114b6:	0189      	lsls	r1, r1, #6
   114b8:	f041 0101 	orr.w	r1, r1, #1
   114bc:	e00b      	b.n	114d6 <adc_nrfx_channel_setup+0x56>
		config.gain = NRF_SAADC_GAIN2;
   114be:	2306      	movs	r3, #6
		break;
   114c0:	e7ef      	b.n	114a2 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   114c2:	2307      	movs	r3, #7
		break;
   114c4:	e7ed      	b.n	114a2 <adc_nrfx_channel_setup+0x22>
   114c6:	4930      	ldr	r1, [pc, #192]	; (11588 <adc_nrfx_channel_setup+0x108>)
   114c8:	4b30      	ldr	r3, [pc, #192]	; (1158c <adc_nrfx_channel_setup+0x10c>)
		LOG_ERR("Selected ADC gain is not valid");
   114ca:	4832      	ldr	r0, [pc, #200]	; (11594 <adc_nrfx_channel_setup+0x114>)
   114cc:	1ac9      	subs	r1, r1, r3
   114ce:	08c9      	lsrs	r1, r1, #3
   114d0:	0189      	lsls	r1, r1, #6
   114d2:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Selected ADC acquisition time is not valid");
   114d6:	f00a ff46 	bl	1c366 <log_0>
		return -EINVAL;
   114da:	f06f 0015 	mvn.w	r0, #21
   114de:	e04a      	b.n	11576 <adc_nrfx_channel_setup+0xf6>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   114e0:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   114e2:	f244 060a 	movw	r6, #16394	; 0x400a
   114e6:	884a      	ldrh	r2, [r1, #2]
   114e8:	42b2      	cmp	r2, r6
   114ea:	d047      	beq.n	1157c <adc_nrfx_channel_setup+0xfc>
   114ec:	d814      	bhi.n	11518 <adc_nrfx_channel_setup+0x98>
   114ee:	f244 0603 	movw	r6, #16387	; 0x4003
   114f2:	42b2      	cmp	r2, r6
   114f4:	d01e      	beq.n	11534 <adc_nrfx_channel_setup+0xb4>
   114f6:	f244 0605 	movw	r6, #16389	; 0x4005
   114fa:	42b2      	cmp	r2, r6
   114fc:	d03c      	beq.n	11578 <adc_nrfx_channel_setup+0xf8>
   114fe:	2a00      	cmp	r2, #0
   11500:	d03c      	beq.n	1157c <adc_nrfx_channel_setup+0xfc>
   11502:	4921      	ldr	r1, [pc, #132]	; (11588 <adc_nrfx_channel_setup+0x108>)
   11504:	4b21      	ldr	r3, [pc, #132]	; (1158c <adc_nrfx_channel_setup+0x10c>)
		LOG_ERR("Selected ADC acquisition time is not valid");
   11506:	4824      	ldr	r0, [pc, #144]	; (11598 <adc_nrfx_channel_setup+0x118>)
   11508:	1ac9      	subs	r1, r1, r3
   1150a:	08c9      	lsrs	r1, r1, #3
   1150c:	0189      	lsls	r1, r1, #6
   1150e:	f041 0101 	orr.w	r1, r1, #1
   11512:	e7e0      	b.n	114d6 <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->reference) {
   11514:	2500      	movs	r5, #0
   11516:	e7e4      	b.n	114e2 <adc_nrfx_channel_setup+0x62>
	switch (channel_cfg->acquisition_time) {
   11518:	f244 0614 	movw	r6, #16404	; 0x4014
   1151c:	42b2      	cmp	r2, r6
   1151e:	d02f      	beq.n	11580 <adc_nrfx_channel_setup+0x100>
   11520:	f244 0628 	movw	r6, #16424	; 0x4028
   11524:	42b2      	cmp	r2, r6
   11526:	d02d      	beq.n	11584 <adc_nrfx_channel_setup+0x104>
   11528:	f244 060f 	movw	r6, #16399	; 0x400f
   1152c:	42b2      	cmp	r2, r6
   1152e:	d1e8      	bne.n	11502 <adc_nrfx_channel_setup+0x82>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   11530:	2203      	movs	r2, #3
   11532:	e000      	b.n	11536 <adc_nrfx_channel_setup+0xb6>
		config.acq_time = NRF_SAADC_ACQTIME_3US;
   11534:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   11536:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1153a:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1153c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   11540:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   11542:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   11546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1154a:	0122      	lsls	r2, r4, #4
   1154c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   11550:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   11554:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   11558:	0123      	lsls	r3, r4, #4
   1155a:	798a      	ldrb	r2, [r1, #6]
   1155c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11560:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   11564:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   11568:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1156c:	4b0b      	ldr	r3, [pc, #44]	; (1159c <adc_nrfx_channel_setup+0x11c>)
   1156e:	441c      	add	r4, r3
   11570:	794b      	ldrb	r3, [r1, #5]
   11572:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
}
   11576:	bd70      	pop	{r4, r5, r6, pc}
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   11578:	2201      	movs	r2, #1
   1157a:	e7dc      	b.n	11536 <adc_nrfx_channel_setup+0xb6>
	switch (channel_cfg->acquisition_time) {
   1157c:	2202      	movs	r2, #2
   1157e:	e7da      	b.n	11536 <adc_nrfx_channel_setup+0xb6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   11580:	2204      	movs	r2, #4
   11582:	e7d8      	b.n	11536 <adc_nrfx_channel_setup+0xb6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   11584:	2205      	movs	r2, #5
   11586:	e7d6      	b.n	11536 <adc_nrfx_channel_setup+0xb6>
   11588:	00020b54 	.word	0x00020b54
   1158c:	00020b54 	.word	0x00020b54
   11590:	00021898 	.word	0x00021898
   11594:	00021879 	.word	0x00021879
   11598:	000218bc 	.word	0x000218bc
   1159c:	20020000 	.word	0x20020000

000115a0 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(struct device *dev, const struct adc_sequence *sequence)
   115a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   115a2:	4605      	mov	r5, r0
{
	int error;
	u32_t selected_channels = sequence->channels;
   115a4:	6840      	ldr	r0, [r0, #4]
	u8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   115a6:	b110      	cbz	r0, 115ae <start_read.isra.0+0xe>
   115a8:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
   115ac:	d00a      	beq.n	115c4 <start_read.isra.0+0x24>
   115ae:	4972      	ldr	r1, [pc, #456]	; (11778 <start_read.isra.0+0x1d8>)
   115b0:	4b72      	ldr	r3, [pc, #456]	; (1177c <start_read.isra.0+0x1dc>)
	    (selected_channels & ~BIT_MASK(SAADC_CH_NUM))) {
		LOG_ERR("Invalid selection of channels");
   115b2:	4873      	ldr	r0, [pc, #460]	; (11780 <start_read.isra.0+0x1e0>)
   115b4:	1ac9      	subs	r1, r1, r3
   115b6:	08c9      	lsrs	r1, r1, #3
   115b8:	0189      	lsls	r1, r1, #6
   115ba:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR(
   115be:	f00a fed2 	bl	1c366 <log_0>
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
	if (error) {
   115c2:	e017      	b.n	115f4 <start_read.isra.0+0x54>
	active_channels = 0U;
   115c4:	460b      	mov	r3, r1
    p_reg->CH[channel].PSELP = pselp;
   115c6:	4c6f      	ldr	r4, [pc, #444]	; (11784 <start_read.isra.0+0x1e4>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   115c8:	4f6f      	ldr	r7, [pc, #444]	; (11788 <start_read.isra.0+0x1e8>)
		if (selected_channels & BIT(channel_id)) {
   115ca:	fa20 f201 	lsr.w	r2, r0, r1
   115ce:	f012 0201 	ands.w	r2, r2, #1
   115d2:	d036      	beq.n	11642 <start_read.isra.0+0xa2>
			if (m_data.positive_inputs[channel_id] == 0U) {
   115d4:	187a      	adds	r2, r7, r1
   115d6:	f892 c098 	ldrb.w	ip, [r2, #152]	; 0x98
   115da:	f1bc 0f00 	cmp.w	ip, #0
   115de:	d10d      	bne.n	115fc <start_read.isra.0+0x5c>
   115e0:	4a65      	ldr	r2, [pc, #404]	; (11778 <start_read.isra.0+0x1d8>)
   115e2:	4b66      	ldr	r3, [pc, #408]	; (1177c <start_read.isra.0+0x1dc>)
				LOG_ERR("Channel %u not configured",
   115e4:	4869      	ldr	r0, [pc, #420]	; (1178c <start_read.isra.0+0x1ec>)
   115e6:	1ad2      	subs	r2, r2, r3
   115e8:	08d2      	lsrs	r2, r2, #3
   115ea:	0192      	lsls	r2, r2, #6
   115ec:	f042 0201 	orr.w	r2, r2, #1
   115f0:	f00a fec8 	bl	1c384 <log_1>
				return -EINVAL;
   115f4:	f06f 0015 	mvn.w	r0, #21

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   115f8:	b003      	add	sp, #12
   115fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   115fc:	7c6e      	ldrb	r6, [r5, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   115fe:	eb04 1e01 	add.w	lr, r4, r1, lsl #4
   11602:	3e00      	subs	r6, #0
   11604:	bf18      	it	ne
   11606:	2601      	movne	r6, #1
   11608:	f8de 2518 	ldr.w	r2, [lr, #1304]	; 0x518
			++active_channels;
   1160c:	3301      	adds	r3, #1
   1160e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   11612:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
   11616:	f8ce 2518 	str.w	r2, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1161a:	f101 0251 	add.w	r2, r1, #81	; 0x51
   1161e:	0112      	lsls	r2, r2, #4
   11620:	f844 c002 	str.w	ip, [r4, r2]
   11624:	b2db      	uxtb	r3, r3
	} while (++channel_id < SAADC_CH_NUM);
   11626:	3101      	adds	r1, #1
   11628:	2908      	cmp	r1, #8
   1162a:	d1ce      	bne.n	115ca <start_read.isra.0+0x2a>
	error = set_resolution(sequence);
   1162c:	7c29      	ldrb	r1, [r5, #16]
	switch (sequence->resolution) {
   1162e:	f1a1 0208 	sub.w	r2, r1, #8
   11632:	2a06      	cmp	r2, #6
   11634:	d81d      	bhi.n	11672 <start_read.isra.0+0xd2>
   11636:	e8df f002 	tbb	[pc, r2]
   1163a:	1c25      	.short	0x1c25
   1163c:	1c271c09 	.word	0x1c271c09
   11640:	1a          	.byte	0x1a
   11641:	00          	.byte	0x00
   11642:	f101 0651 	add.w	r6, r1, #81	; 0x51
   11646:	0136      	lsls	r6, r6, #4
   11648:	51a2      	str	r2, [r4, r6]
}
   1164a:	e7ec      	b.n	11626 <start_read.isra.0+0x86>
	error = set_resolution(sequence);
   1164c:	2101      	movs	r1, #1
    p_reg->RESOLUTION = resolution;
   1164e:	4a4d      	ldr	r2, [pc, #308]	; (11784 <start_read.isra.0+0x1e4>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   11650:	2b01      	cmp	r3, #1
   11652:	f8c2 15f0 	str.w	r1, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   11656:	7c69      	ldrb	r1, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   11658:	d918      	bls.n	1168c <start_read.isra.0+0xec>
   1165a:	b1c9      	cbz	r1, 11690 <start_read.isra.0+0xf0>
   1165c:	4946      	ldr	r1, [pc, #280]	; (11778 <start_read.isra.0+0x1d8>)
   1165e:	4b47      	ldr	r3, [pc, #284]	; (1177c <start_read.isra.0+0x1dc>)
		LOG_ERR(
   11660:	484b      	ldr	r0, [pc, #300]	; (11790 <start_read.isra.0+0x1f0>)
   11662:	1ac9      	subs	r1, r1, r3
   11664:	08c9      	lsrs	r1, r1, #3
   11666:	0189      	lsls	r1, r1, #6
   11668:	f041 0101 	orr.w	r1, r1, #1
   1166c:	e7a7      	b.n	115be <start_read.isra.0+0x1e>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1166e:	2103      	movs	r1, #3
		break;
   11670:	e7ed      	b.n	1164e <start_read.isra.0+0xae>
   11672:	4a41      	ldr	r2, [pc, #260]	; (11778 <start_read.isra.0+0x1d8>)
   11674:	4b41      	ldr	r3, [pc, #260]	; (1177c <start_read.isra.0+0x1dc>)
		LOG_ERR("ADC resolution value %d is not valid",
   11676:	4847      	ldr	r0, [pc, #284]	; (11794 <start_read.isra.0+0x1f4>)
   11678:	1ad2      	subs	r2, r2, r3
   1167a:	08d2      	lsrs	r2, r2, #3
   1167c:	0192      	lsls	r2, r2, #6
   1167e:	f042 0201 	orr.w	r2, r2, #1
   11682:	e7b5      	b.n	115f0 <start_read.isra.0+0x50>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   11684:	2100      	movs	r1, #0
   11686:	e7e2      	b.n	1164e <start_read.isra.0+0xae>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   11688:	2102      	movs	r1, #2
   1168a:	e7e0      	b.n	1164e <start_read.isra.0+0xae>
	switch (sequence->oversampling) {
   1168c:	2908      	cmp	r1, #8
   1168e:	d814      	bhi.n	116ba <start_read.isra.0+0x11a>
    p_reg->OVERSAMPLE = oversample;
   11690:	f8c2 15f4 	str.w	r1, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   11694:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   11696:	005a      	lsls	r2, r3, #1
	if (sequence->options) {
   11698:	b9c1      	cbnz	r1, 116cc <start_read.isra.0+0x12c>
	if (sequence->buffer_size < needed_buffer_size) {
   1169a:	68e9      	ldr	r1, [r5, #12]
   1169c:	4291      	cmp	r1, r2
   1169e:	d219      	bcs.n	116d4 <start_read.isra.0+0x134>
   116a0:	4836      	ldr	r0, [pc, #216]	; (1177c <start_read.isra.0+0x1dc>)
   116a2:	4b35      	ldr	r3, [pc, #212]	; (11778 <start_read.isra.0+0x1d8>)
   116a4:	1a1b      	subs	r3, r3, r0
   116a6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Provided buffer is too small (%u/%u)",
   116a8:	019b      	lsls	r3, r3, #6
   116aa:	483b      	ldr	r0, [pc, #236]	; (11798 <start_read.isra.0+0x1f8>)
   116ac:	f043 0301 	orr.w	r3, r3, #1
   116b0:	f00a fe7f 	bl	1c3b2 <log_2>
		return -ENOMEM;
   116b4:	f06f 000b 	mvn.w	r0, #11
   116b8:	e79e      	b.n	115f8 <start_read.isra.0+0x58>
   116ba:	4a2f      	ldr	r2, [pc, #188]	; (11778 <start_read.isra.0+0x1d8>)
   116bc:	4b2f      	ldr	r3, [pc, #188]	; (1177c <start_read.isra.0+0x1dc>)
		LOG_ERR("Oversampling value %d is not valid",
   116be:	4837      	ldr	r0, [pc, #220]	; (1179c <start_read.isra.0+0x1fc>)
   116c0:	1ad2      	subs	r2, r2, r3
   116c2:	08d2      	lsrs	r2, r2, #3
   116c4:	0192      	lsls	r2, r2, #6
   116c6:	f042 0201 	orr.w	r2, r2, #1
   116ca:	e791      	b.n	115f0 <start_read.isra.0+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   116cc:	8909      	ldrh	r1, [r1, #8]
   116ce:	fb01 2202 	mla	r2, r1, r2, r2
   116d2:	e7e2      	b.n	1169a <start_read.isra.0+0xfa>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   116d4:	462f      	mov	r7, r5
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   116d6:	68a9      	ldr	r1, [r5, #8]
   116d8:	4a2a      	ldr	r2, [pc, #168]	; (11784 <start_read.isra.0+0x1e4>)
   116da:	4c2b      	ldr	r4, [pc, #172]	; (11788 <start_read.isra.0+0x1e8>)
   116dc:	f8c2 162c 	str.w	r1, [r2, #1580]	; 0x62c
   116e0:	f104 0674 	add.w	r6, r4, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   116e4:	f8c2 3630 	str.w	r3, [r2, #1584]	; 0x630
   116e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   116ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   116ec:	683b      	ldr	r3, [r7, #0]
   116ee:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   116f0:	2600      	movs	r6, #0

	if (sequence->options) {
   116f2:	682a      	ldr	r2, [r5, #0]
	ctx->status = 0;
   116f4:	66a6      	str	r6, [r4, #104]	; 0x68
	if (sequence->options) {
   116f6:	b3c2      	cbz	r2, 1176a <start_read.isra.0+0x1ca>
		ctx->options = *sequence->options;
   116f8:	ca07      	ldmia	r2, {r0, r1, r2}
   116fa:	f104 0388 	add.w	r3, r4, #136	; 0x88
   116fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ctx->sequence.options = &ctx->options;
   11702:	6763      	str	r3, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   11704:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94

		if (ctx->options.interval_us != 0U) {
   11708:	b378      	cbz	r0, 1176a <start_read.isra.0+0x1ca>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1170a:	e8d4 3fef 	ldaex	r3, [r4]
   1170e:	e8c4 6fe2 	stlex	r2, r6, [r4]
   11712:	2a00      	cmp	r2, #0
   11714:	d1f9      	bne.n	1170a <start_read.isra.0+0x16a>
	u32_t interval_ms = ceiling_fraction(interval_us, 1000UL);
   11716:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1171a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1171e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11722:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
   11726:	fbb3 f1f1 	udiv	r1, r3, r1
   1172a:	f240 36e7 	movw	r6, #999	; 0x3e7
   1172e:	2700      	movs	r7, #0
   11730:	fbe0 6701 	umlal	r6, r7, r0, r1
   11734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11738:	2300      	movs	r3, #0
   1173a:	4630      	mov	r0, r6
   1173c:	4639      	mov	r1, r7
   1173e:	f7fa ff3b 	bl	c5b8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   11742:	2200      	movs	r2, #0
   11744:	e9cd 0100 	strd	r0, r1, [sp]
   11748:	2300      	movs	r3, #0
   1174a:	f104 0008 	add.w	r0, r4, #8
   1174e:	f00a fa8f 	bl	1bc70 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
   11752:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   11756:	b96b      	cbnz	r3, 11774 <start_read.isra.0+0x1d4>
	return z_impl_k_sem_take(sem, timeout);
   11758:	f04f 32ff 	mov.w	r2, #4294967295
   1175c:	f04f 33ff 	mov.w	r3, #4294967295
   11760:	480f      	ldr	r0, [pc, #60]	; (117a0 <start_read.isra.0+0x200>)
   11762:	f009 ffb9 	bl	1b6d8 <z_impl_k_sem_take>
	return ctx->status;
   11766:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   11768:	e746      	b.n	115f8 <start_read.isra.0+0x58>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1176a:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   1176e:	f7ff fe77 	bl	11460 <adc_context_start_sampling.isra.0>
   11772:	e7ee      	b.n	11752 <start_read.isra.0+0x1b2>
		return 0;
   11774:	2000      	movs	r0, #0
	return error;
   11776:	e73f      	b.n	115f8 <start_read.isra.0+0x58>
   11778:	00020b54 	.word	0x00020b54
   1177c:	00020b54 	.word	0x00020b54
   11780:	000218e7 	.word	0x000218e7
   11784:	4000e000 	.word	0x4000e000
   11788:	20020000 	.word	0x20020000
   1178c:	00021905 	.word	0x00021905
   11790:	00021944 	.word	0x00021944
   11794:	0002191f 	.word	0x0002191f
   11798:	00021999 	.word	0x00021999
   1179c:	00021976 	.word	0x00021976
   117a0:	20020050 	.word	0x20020050

000117a4 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   117a4:	b570      	push	{r4, r5, r6, lr}
   117a6:	460c      	mov	r4, r1
   117a8:	4616      	mov	r6, r2
   117aa:	4d0d      	ldr	r5, [pc, #52]	; (117e0 <adc_nrfx_read_async+0x3c>)
   117ac:	f04f 32ff 	mov.w	r2, #4294967295
   117b0:	f04f 33ff 	mov.w	r3, #4294967295
   117b4:	f105 0038 	add.w	r0, r5, #56	; 0x38
   117b8:	f009 ff8e 	bl	1b6d8 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   117bc:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
   117be:	4620      	mov	r0, r4
   117c0:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
	ctx->signal = signal;
   117c4:	66ee      	str	r6, [r5, #108]	; 0x6c
   117c6:	f7ff feeb 	bl	115a0 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
   117ca:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   117ce:	4604      	mov	r4, r0
   117d0:	b103      	cbz	r3, 117d4 <adc_nrfx_read_async+0x30>
   117d2:	b110      	cbz	r0, 117da <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
   117d4:	4803      	ldr	r0, [pc, #12]	; (117e4 <adc_nrfx_read_async+0x40>)
   117d6:	f009 ff59 	bl	1b68c <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
   117da:	4620      	mov	r0, r4
   117dc:	bd70      	pop	{r4, r5, r6, pc}
   117de:	bf00      	nop
   117e0:	20020000 	.word	0x20020000
   117e4:	20020038 	.word	0x20020038

000117e8 <init_saadc>:
}

DEVICE_DECLARE(adc_0);

static int init_saadc(struct device *dev)
{
   117e8:	b510      	push	{r4, lr}
    p_reg->INTENSET = mask;
   117ea:	2212      	movs	r2, #18
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   117ec:	2400      	movs	r4, #0
   117ee:	4b0a      	ldr	r3, [pc, #40]	; (11818 <init_saadc+0x30>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   117f0:	200e      	movs	r0, #14
   117f2:	601c      	str	r4, [r3, #0]
   117f4:	60dc      	str	r4, [r3, #12]
    p_reg->INTENSET = mask;
   117f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   117fa:	f7fc fbbd 	bl	df78 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   117fe:	4622      	mov	r2, r4
   11800:	2101      	movs	r1, #1
   11802:	200e      	movs	r0, #14
   11804:	f7fc fbc8 	bl	df98 <z_arm_irq_priority_set>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   11808:	4804      	ldr	r0, [pc, #16]	; (1181c <init_saadc+0x34>)
	if (!k_sem_count_get(&ctx->lock)) {
   1180a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1180c:	b913      	cbnz	r3, 11814 <init_saadc+0x2c>
	z_impl_k_sem_give(sem);
   1180e:	3038      	adds	r0, #56	; 0x38
   11810:	f009 ff3c 	bl	1b68c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   11814:	2000      	movs	r0, #0
   11816:	bd10      	pop	{r4, pc}
   11818:	4000e104 	.word	0x4000e104
   1181c:	20020000 	.word	0x20020000

00011820 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11820:	4931      	ldr	r1, [pc, #196]	; (118e8 <saadc_irq_handler+0xc8>)
{
   11822:	b510      	push	{r4, lr}
   11824:	680a      	ldr	r2, [r1, #0]
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   11826:	2a00      	cmp	r2, #0
   11828:	d050      	beq.n	118cc <saadc_irq_handler+0xac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1182a:	2300      	movs	r3, #0
   1182c:	600b      	str	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1182e:	2101      	movs	r1, #1
   11830:	4a2e      	ldr	r2, [pc, #184]	; (118ec <saadc_irq_handler+0xcc>)
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						struct device *dev)
{
	if (ctx->sequence.options) {
   11832:	4c2f      	ldr	r4, [pc, #188]	; (118f0 <saadc_irq_handler+0xd0>)
   11834:	6011      	str	r1, [r2, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   11836:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
   1183a:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1183c:	b3bb      	cbz	r3, 118ae <saadc_irq_handler+0x8e>
		adc_sequence_callback callback = ctx->options.callback;
   1183e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   11842:	b143      	cbz	r3, 11856 <saadc_irq_handler+0x36>
			action = callback(dev,
   11844:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   11848:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1184c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1184e:	2801      	cmp	r0, #1
   11850:	d014      	beq.n	1187c <saadc_irq_handler+0x5c>
   11852:	2802      	cmp	r0, #2
   11854:	d025      	beq.n	118a2 <saadc_irq_handler+0x82>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   11856:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
   1185a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
   1185e:	429a      	cmp	r2, r3
   11860:	d91f      	bls.n	118a2 <saadc_irq_handler+0x82>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   11862:	3301      	adds	r3, #1
   11864:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   11868:	4b22      	ldr	r3, [pc, #136]	; (118f4 <saadc_irq_handler+0xd4>)
   1186a:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1186e:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   11872:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   11874:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   11878:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1187c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   11880:	b92b      	cbnz	r3, 1188e <saadc_irq_handler+0x6e>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   11882:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   11886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1188a:	f7ff bde9 	b.w	11460 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1188e:	e8d4 3fef 	ldaex	r3, [r4]
   11892:	1e5a      	subs	r2, r3, #1
   11894:	e8c4 2fe1 	stlex	r1, r2, [r4]
   11898:	2900      	cmp	r1, #0
   1189a:	d1f8      	bne.n	1188e <saadc_irq_handler+0x6e>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1189c:	2b01      	cmp	r3, #1
   1189e:	dcf0      	bgt.n	11882 <saadc_irq_handler+0x62>
   118a0:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   118a2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   118a6:	b113      	cbz	r3, 118ae <saadc_irq_handler+0x8e>
	z_impl_k_timer_stop(timer);
   118a8:	4813      	ldr	r0, [pc, #76]	; (118f8 <saadc_irq_handler+0xd8>)
   118aa:	f00e ffb0 	bl	2080e <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
   118ae:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   118b2:	b14b      	cbz	r3, 118c8 <saadc_irq_handler+0xa8>
		if (ctx->signal) {
   118b4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   118b6:	b110      	cbz	r0, 118be <saadc_irq_handler+0x9e>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   118b8:	2100      	movs	r1, #0
   118ba:	f00a fa27 	bl	1bd0c <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   118be:	480f      	ldr	r0, [pc, #60]	; (118fc <saadc_irq_handler+0xdc>)
   118c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   118c4:	f009 bee2 	b.w	1b68c <z_impl_k_sem_give>
   118c8:	480d      	ldr	r0, [pc, #52]	; (11900 <saadc_irq_handler+0xe0>)
   118ca:	e7f9      	b.n	118c0 <saadc_irq_handler+0xa0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   118cc:	4b0d      	ldr	r3, [pc, #52]	; (11904 <saadc_irq_handler+0xe4>)
   118ce:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
   118d0:	2900      	cmp	r1, #0
   118d2:	d0e5      	beq.n	118a0 <saadc_irq_handler+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   118d4:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   118d6:	2301      	movs	r3, #1
   118d8:	4a04      	ldr	r2, [pc, #16]	; (118ec <saadc_irq_handler+0xcc>)
   118da:	6013      	str	r3, [r2, #0]
   118dc:	f842 3c08 	str.w	r3, [r2, #-8]
   118e0:	f842 3c04 	str.w	r3, [r2, #-4]
}
   118e4:	e7dc      	b.n	118a0 <saadc_irq_handler+0x80>
   118e6:	bf00      	nop
   118e8:	4000e104 	.word	0x4000e104
   118ec:	4000e008 	.word	0x4000e008
   118f0:	20020000 	.word	0x20020000
   118f4:	4000e000 	.word	0x4000e000
   118f8:	20020008 	.word	0x20020008
   118fc:	20020038 	.word	0x20020038
   11900:	20020050 	.word	0x20020050
   11904:	4000e110 	.word	0x4000e110

00011908 <adc_nrfx_read>:
{
   11908:	b538      	push	{r3, r4, r5, lr}
   1190a:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   1190c:	4d0c      	ldr	r5, [pc, #48]	; (11940 <adc_nrfx_read+0x38>)
   1190e:	f04f 32ff 	mov.w	r2, #4294967295
   11912:	f04f 33ff 	mov.w	r3, #4294967295
   11916:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1191a:	f009 fedd 	bl	1b6d8 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   1191e:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
   11920:	4620      	mov	r0, r4
   11922:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
	ctx->signal = signal;
   11926:	66eb      	str	r3, [r5, #108]	; 0x6c
   11928:	f7ff fe3a 	bl	115a0 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
   1192c:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   11930:	4604      	mov	r4, r0
   11932:	b103      	cbz	r3, 11936 <adc_nrfx_read+0x2e>
   11934:	b110      	cbz	r0, 1193c <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
   11936:	4803      	ldr	r0, [pc, #12]	; (11944 <adc_nrfx_read+0x3c>)
   11938:	f009 fea8 	bl	1b68c <z_impl_k_sem_give>
}
   1193c:	4620      	mov	r0, r4
   1193e:	bd38      	pop	{r3, r4, r5, pc}
   11940:	20020000 	.word	0x20020000
   11944:	20020038 	.word	0x20020038

00011948 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   11948:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1194a:	4b09      	ldr	r3, [pc, #36]	; (11970 <gpio_nrfx_init+0x28>)
   1194c:	781a      	ldrb	r2, [r3, #0]
   1194e:	b96a      	cbnz	r2, 1196c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   11950:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   11952:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   11954:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   11956:	2105      	movs	r1, #5
   11958:	f7fc fb1e 	bl	df98 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1195c:	2031      	movs	r0, #49	; 0x31
   1195e:	f7fc fb0b 	bl	df78 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   11962:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   11966:	4b03      	ldr	r3, [pc, #12]	; (11974 <gpio_nrfx_init+0x2c>)
   11968:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1196c:	2000      	movs	r0, #0
   1196e:	bd08      	pop	{r3, pc}
   11970:	20021cac 	.word	0x20021cac
   11974:	40031000 	.word	0x40031000

00011978 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   11978:	4b29      	ldr	r3, [pc, #164]	; (11a20 <gpio_nrfx_config+0xa8>)
{
   1197a:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1197c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1197e:	4829      	ldr	r0, [pc, #164]	; (11a24 <gpio_nrfx_config+0xac>)
   11980:	4013      	ands	r3, r2
   11982:	4283      	cmp	r3, r0
   11984:	d03d      	beq.n	11a02 <gpio_nrfx_config+0x8a>
   11986:	d80d      	bhi.n	119a4 <gpio_nrfx_config+0x2c>
   11988:	2b06      	cmp	r3, #6
   1198a:	d015      	beq.n	119b8 <gpio_nrfx_config+0x40>
   1198c:	d805      	bhi.n	1199a <gpio_nrfx_config+0x22>
   1198e:	b19b      	cbz	r3, 119b8 <gpio_nrfx_config+0x40>
   11990:	2b02      	cmp	r3, #2
   11992:	d038      	beq.n	11a06 <gpio_nrfx_config+0x8e>
   11994:	f06f 0015 	mvn.w	r0, #21
   11998:	e032      	b.n	11a00 <gpio_nrfx_config+0x88>
   1199a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1199e:	d1f9      	bne.n	11994 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   119a0:	2301      	movs	r3, #1
   119a2:	e009      	b.n	119b8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   119a4:	4820      	ldr	r0, [pc, #128]	; (11a28 <gpio_nrfx_config+0xb0>)
   119a6:	4283      	cmp	r3, r0
   119a8:	d02f      	beq.n	11a0a <gpio_nrfx_config+0x92>
   119aa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   119ae:	d02e      	beq.n	11a0e <gpio_nrfx_config+0x96>
   119b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   119b4:	d1ee      	bne.n	11994 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   119b6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   119b8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   119ba:	bf4c      	ite	mi
   119bc:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   119be:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   119c2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   119c6:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   119c8:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   119cc:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   119d0:	d506      	bpl.n	119e0 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   119d2:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   119d6:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   119d8:	d01b      	beq.n	11a12 <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
   119da:	2201      	movs	r2, #1
   119dc:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   119de:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   119e0:	7a32      	ldrb	r2, [r6, #8]
   119e2:	f001 011f 	and.w	r1, r1, #31
   119e6:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   119ea:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   119ee:	2000      	movs	r0, #0
   119f0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   119f4:	4a0d      	ldr	r2, [pc, #52]	; (11a2c <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   119f6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   119fa:	3180      	adds	r1, #128	; 0x80
   119fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   11a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   11a02:	2307      	movs	r3, #7
   11a04:	e7d8      	b.n	119b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   11a06:	2304      	movs	r3, #4
   11a08:	e7d6      	b.n	119b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   11a0a:	2305      	movs	r3, #5
   11a0c:	e7d4      	b.n	119b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   11a0e:	2303      	movs	r3, #3
   11a10:	e7d2      	b.n	119b8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   11a12:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   11a14:	bf42      	ittt	mi
   11a16:	2201      	movmi	r2, #1
   11a18:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   11a1a:	60fa      	strmi	r2, [r7, #12]
}
   11a1c:	e7e0      	b.n	119e0 <gpio_nrfx_config+0x68>
   11a1e:	bf00      	nop
   11a20:	00f00006 	.word	0x00f00006
   11a24:	00100006 	.word	0x00100006
   11a28:	00400002 	.word	0x00400002
   11a2c:	40842500 	.word	0x40842500

00011a30 <gpiote_pin_int_cfg>:
{
   11a30:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11a32:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   11a34:	4c4c      	ldr	r4, [pc, #304]	; (11b68 <gpiote_pin_int_cfg+0x138>)
   11a36:	7a1a      	ldrb	r2, [r3, #8]
   11a38:	f001 031f 	and.w	r3, r1, #31
   11a3c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11a40:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   11a42:	68c6      	ldr	r6, [r0, #12]
   11a44:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   11a48:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11a4a:	f502 75a2 	add.w	r5, r2, #324	; 0x144
   11a4e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   11a52:	f3c5 2504 	ubfx	r5, r5, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   11a56:	42ab      	cmp	r3, r5
   11a58:	d16c      	bne.n	11b34 <gpiote_pin_int_cfg+0x104>
		    && (intenset & BIT(i))) {
   11a5a:	fa20 f502 	lsr.w	r5, r0, r2
   11a5e:	07ed      	lsls	r5, r5, #31
   11a60:	d568      	bpl.n	11b34 <gpiote_pin_int_cfg+0x104>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   11a62:	0090      	lsls	r0, r2, #2
   11a64:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   11a68:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
   11a6c:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
   11a70:	f025 0501 	bic.w	r5, r5, #1
   11a74:	f8c0 5510 	str.w	r5, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   11a78:	2001      	movs	r0, #1
   11a7a:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
   11a7e:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11a82:	4d3a      	ldr	r5, [pc, #232]	; (11b6c <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   11a84:	68f0      	ldr	r0, [r6, #12]
   11a86:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11a8a:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
   11a8e:	40c8      	lsrs	r0, r1
   11a90:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   11a94:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11a98:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
   11a9c:	d049      	beq.n	11b32 <gpiote_pin_int_cfg+0x102>
   11a9e:	6930      	ldr	r0, [r6, #16]
   11aa0:	40c8      	lsrs	r0, r1
   11aa2:	f010 0001 	ands.w	r0, r0, #1
   11aa6:	d044      	beq.n	11b32 <gpiote_pin_int_cfg+0x102>
		if (data->trig_edge & BIT(pin)) {
   11aa8:	69b0      	ldr	r0, [r6, #24]
   11aaa:	40c8      	lsrs	r0, r1
   11aac:	f010 0001 	ands.w	r0, r0, #1
   11ab0:	d04a      	beq.n	11b48 <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   11ab2:	69f2      	ldr	r2, [r6, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   11ab4:	2500      	movs	r5, #0
			if (data->double_edge & BIT(pin)) {
   11ab6:	40ca      	lsrs	r2, r1
   11ab8:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   11aba:	bf4f      	iteee	mi
   11abc:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   11abe:	6972      	ldrpl	r2, [r6, #20]
   11ac0:	40ca      	lsrpl	r2, r1
   11ac2:	f002 0201 	andpl.w	r2, r2, #1
   11ac6:	bf5c      	itt	pl
   11ac8:	f1c2 0202 	rsbpl	r2, r2, #2
   11acc:	b2d2      	uxtbpl	r2, r2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   11ace:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   11ad2:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   11ad6:	f010 0003 	ands.w	r0, r0, #3
   11ada:	d12f      	bne.n	11b3c <gpiote_pin_int_cfg+0x10c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11adc:	00a9      	lsls	r1, r5, #2
   11ade:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   11ae2:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   11ae6:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11aea:	021b      	lsls	r3, r3, #8
   11aec:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11af0:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   11af4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11af8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
   11afc:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11b00:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
   11b04:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11b06:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   11b0a:	b29b      	uxth	r3, r3
   11b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11b10:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11b14:	4332      	orrs	r2, r6
   11b16:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11b1a:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   11b1c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
   11b20:	f043 0301 	orr.w	r3, r3, #1
   11b24:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   11b28:	2301      	movs	r3, #1
   11b2a:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   11b2e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   11b32:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11b34:	3201      	adds	r2, #1
   11b36:	2a08      	cmp	r2, #8
   11b38:	d187      	bne.n	11a4a <gpiote_pin_int_cfg+0x1a>
   11b3a:	e7a2      	b.n	11a82 <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   11b3c:	3501      	adds	r5, #1
   11b3e:	2d08      	cmp	r5, #8
   11b40:	d1c5      	bne.n	11ace <gpiote_pin_int_cfg+0x9e>
	return -ENODEV;
   11b42:	f06f 0012 	mvn.w	r0, #18
   11b46:	e7f4      	b.n	11b32 <gpiote_pin_int_cfg+0x102>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   11b48:	6972      	ldr	r2, [r6, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11b4a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   11b4e:	40ca      	lsrs	r2, r1
   11b50:	f002 0201 	and.w	r2, r2, #1
   11b54:	f1c2 0203 	rsb	r2, r2, #3
   11b58:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11b5c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   11b60:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
}
   11b64:	e7e5      	b.n	11b32 <gpiote_pin_int_cfg+0x102>
   11b66:	bf00      	nop
   11b68:	40031000 	.word	0x40031000
   11b6c:	40842500 	.word	0x40842500

00011b70 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   11b70:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   11b74:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   11b76:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   11b78:	d10f      	bne.n	11b9a <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   11b7a:	6845      	ldr	r5, [r0, #4]
   11b7c:	7a2e      	ldrb	r6, [r5, #8]
   11b7e:	f001 051f 	and.w	r5, r1, #31
   11b82:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   11b86:	4e1d      	ldr	r6, [pc, #116]	; (11bfc <gpio_nrfx_pin_interrupt_configure+0x8c>)
   11b88:	3580      	adds	r5, #128	; 0x80
   11b8a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   11b8e:	07ed      	lsls	r5, r5, #31
   11b90:	d507      	bpl.n	11ba2 <gpio_nrfx_pin_interrupt_configure+0x32>
}
   11b92:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11b96:	bc70      	pop	{r4, r5, r6}
   11b98:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   11b9a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   11b9e:	68e5      	ldr	r5, [r4, #12]
   11ba0:	d026      	beq.n	11bf0 <gpio_nrfx_pin_interrupt_configure+0x80>
   11ba2:	2501      	movs	r5, #1
   11ba4:	68e6      	ldr	r6, [r4, #12]
   11ba6:	408d      	lsls	r5, r1
   11ba8:	4335      	orrs	r5, r6
   11baa:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   11bac:	2501      	movs	r5, #1
   11bae:	6926      	ldr	r6, [r4, #16]
   11bb0:	408d      	lsls	r5, r1
   11bb2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   11bb6:	bf14      	ite	ne
   11bb8:	432e      	orrne	r6, r5
   11bba:	43ae      	biceq	r6, r5
   11bbc:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   11bbe:	69a6      	ldr	r6, [r4, #24]
   11bc0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   11bc4:	69e2      	ldr	r2, [r4, #28]
   11bc6:	bf0c      	ite	eq
   11bc8:	432e      	orreq	r6, r5
   11bca:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   11bcc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   11bd0:	bf0c      	ite	eq
   11bd2:	432a      	orreq	r2, r5
   11bd4:	43aa      	bicne	r2, r5
   11bd6:	61e2      	str	r2, [r4, #28]
   11bd8:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   11bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   11bde:	bf0c      	ite	eq
   11be0:	4315      	orreq	r5, r2
   11be2:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   11be6:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   11be8:	6165      	str	r5, [r4, #20]
}
   11bea:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   11bec:	f7ff bf20 	b.w	11a30 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   11bf0:	2601      	movs	r6, #1
   11bf2:	408e      	lsls	r6, r1
   11bf4:	ea25 0506 	bic.w	r5, r5, r6
   11bf8:	e7d7      	b.n	11baa <gpio_nrfx_pin_interrupt_configure+0x3a>
   11bfa:	bf00      	nop
   11bfc:	40842500 	.word	0x40842500

00011c00 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11c00:	494a      	ldr	r1, [pc, #296]	; (11d2c <gpiote_event_handler+0x12c>)
{
   11c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c06:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   11c08:	2d00      	cmp	r5, #0
   11c0a:	d05d      	beq.n	11cc8 <gpiote_event_handler+0xc8>
	struct gpio_nrfx_data *data = get_port_data(port);
   11c0c:	4b48      	ldr	r3, [pc, #288]	; (11d30 <gpiote_event_handler+0x130>)
	u32_t pin = 0U;
   11c0e:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   11c10:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   11c12:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   11c16:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
   11c1a:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   11c1c:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
   11c20:	4320      	orrs	r0, r4
   11c22:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   11c26:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   11c2a:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
   11c2c:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
   11c2e:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   11c30:	4054      	eors	r4, r2
   11c32:	f8df e108 	ldr.w	lr, [pc, #264]	; 11d3c <gpiote_event_handler+0x13c>
	u32_t out = pin_states & level_pins;
   11c36:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   11c3a:	bb83      	cbnz	r3, 11c9e <gpiote_event_handler+0x9e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11c3c:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11c3e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   11c40:	2001      	movs	r0, #1
   11c42:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   11c44:	493b      	ldr	r1, [pc, #236]	; (11d34 <gpiote_event_handler+0x134>)
   11c46:	4e3c      	ldr	r6, [pc, #240]	; (11d38 <gpiote_event_handler+0x138>)
   11c48:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   11c4c:	fa00 fc03 	lsl.w	ip, r0, r3
   11c50:	ea1c 0f02 	tst.w	ip, r2
   11c54:	d00d      	beq.n	11c72 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11c56:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   11c5a:	b152      	cbz	r2, 11c72 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11c5c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   11c60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11c64:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11c68:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   11c6c:	fa00 f202 	lsl.w	r2, r0, r2
   11c70:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11c72:	3301      	adds	r3, #1
   11c74:	2b08      	cmp	r3, #8
   11c76:	d1e7      	bne.n	11c48 <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   11c78:	bb44      	cbnz	r4, 11ccc <gpiote_event_handler+0xcc>
	if (port_event) {
   11c7a:	b175      	cbz	r5, 11c9a <gpiote_event_handler+0x9a>
	u32_t bit = 1U << pin;
   11c7c:	2401      	movs	r4, #1
	u32_t pin = 0U;
   11c7e:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   11c80:	4b2b      	ldr	r3, [pc, #172]	; (11d30 <gpiote_event_handler+0x130>)
   11c82:	4f2e      	ldr	r7, [pc, #184]	; (11d3c <gpiote_event_handler+0x13c>)
   11c84:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   11c86:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   11c88:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   11c8c:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   11c8e:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
   11c92:	430a      	orrs	r2, r1
   11c94:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
   11c98:	bb63      	cbnz	r3, 11cf4 <gpiote_event_handler+0xf4>
}
   11c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   11c9e:	4203      	tst	r3, r0
   11ca0:	d00f      	beq.n	11cc2 <gpiote_event_handler+0xc2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11ca2:	f89c 7008 	ldrb.w	r7, [ip, #8]
   11ca6:	f006 021f 	and.w	r2, r6, #31
   11caa:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   11cae:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11cb2:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
   11cb6:	ea23 0300 	bic.w	r3, r3, r0
   11cba:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11cbe:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
   11cc2:	3601      	adds	r6, #1
		bit <<= 1;
   11cc4:	0040      	lsls	r0, r0, #1
   11cc6:	e7b8      	b.n	11c3a <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11cc8:	462c      	mov	r4, r5
   11cca:	e7b8      	b.n	11c3e <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   11ccc:	4818      	ldr	r0, [pc, #96]	; (11d30 <gpiote_event_handler+0x130>)
   11cce:	68c7      	ldr	r7, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11cd0:	6879      	ldr	r1, [r7, #4]
   11cd2:	2900      	cmp	r1, #0
   11cd4:	d0d1      	beq.n	11c7a <gpiote_event_handler+0x7a>
			cb->handler(port, cb, cb->pin_mask & pins);
   11cd6:	4680      	mov	r8, r0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11cd8:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   11cda:	688a      	ldr	r2, [r1, #8]
   11cdc:	693b      	ldr	r3, [r7, #16]
   11cde:	4022      	ands	r2, r4
   11ce0:	421a      	tst	r2, r3
   11ce2:	d002      	beq.n	11cea <gpiote_event_handler+0xea>
			cb->handler(port, cb, cb->pin_mask & pins);
   11ce4:	4640      	mov	r0, r8
   11ce6:	684b      	ldr	r3, [r1, #4]
   11ce8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11cea:	2e00      	cmp	r6, #0
   11cec:	d0c5      	beq.n	11c7a <gpiote_event_handler+0x7a>
   11cee:	4631      	mov	r1, r6
   11cf0:	6836      	ldr	r6, [r6, #0]
   11cf2:	e7f2      	b.n	11cda <gpiote_event_handler+0xda>
		if (level_pins & bit) {
   11cf4:	421c      	tst	r4, r3
   11cf6:	d016      	beq.n	11d26 <gpiote_event_handler+0x126>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11cf8:	7a32      	ldrb	r2, [r6, #8]
   11cfa:	f005 011f 	and.w	r1, r5, #31
   11cfe:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   11d02:	6942      	ldr	r2, [r0, #20]
   11d04:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11d08:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
   11d0c:	40ea      	lsrs	r2, r5
   11d0e:	f002 0201 	and.w	r2, r2, #1
   11d12:	f1c2 0203 	rsb	r2, r2, #3
   11d16:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11d1a:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   11d1e:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
   11d22:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   11d26:	3501      	adds	r5, #1
		bit <<= 1;
   11d28:	0064      	lsls	r4, r4, #1
   11d2a:	e7b5      	b.n	11c98 <gpiote_event_handler+0x98>
   11d2c:	4003117c 	.word	0x4003117c
   11d30:	20020604 	.word	0x20020604
   11d34:	40031000 	.word	0x40031000
   11d38:	40031100 	.word	0x40031100
   11d3c:	40842500 	.word	0x40842500

00011d40 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11d40:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11d42:	794b      	ldrb	r3, [r1, #5]
   11d44:	2b01      	cmp	r3, #1
   11d46:	d029      	beq.n	11d9c <uarte_nrfx_configure+0x5c>
   11d48:	2b03      	cmp	r3, #3
   11d4a:	d124      	bne.n	11d96 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11d4c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11d4e:	798b      	ldrb	r3, [r1, #6]
   11d50:	2b03      	cmp	r3, #3
   11d52:	d120      	bne.n	11d96 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11d54:	79cc      	ldrb	r4, [r1, #7]
   11d56:	b124      	cbz	r4, 11d62 <uarte_nrfx_configure+0x22>
   11d58:	2c01      	cmp	r4, #1
   11d5a:	d11c      	bne.n	11d96 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   11d5c:	6843      	ldr	r3, [r0, #4]
   11d5e:	791b      	ldrb	r3, [r3, #4]
   11d60:	b1cb      	cbz	r3, 11d96 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11d62:	790a      	ldrb	r2, [r1, #4]
   11d64:	b112      	cbz	r2, 11d6c <uarte_nrfx_configure+0x2c>
   11d66:	2a02      	cmp	r2, #2
   11d68:	d115      	bne.n	11d96 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11d6a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11d6c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   11d6e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   11d70:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   11d74:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   11d76:	d064      	beq.n	11e42 <uarte_nrfx_configure+0x102>
   11d78:	d82d      	bhi.n	11dd6 <uarte_nrfx_configure+0x96>
   11d7a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11d7e:	d063      	beq.n	11e48 <uarte_nrfx_configure+0x108>
   11d80:	d816      	bhi.n	11db0 <uarte_nrfx_configure+0x70>
   11d82:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11d86:	d061      	beq.n	11e4c <uarte_nrfx_configure+0x10c>
   11d88:	d80a      	bhi.n	11da0 <uarte_nrfx_configure+0x60>
   11d8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11d8e:	d060      	beq.n	11e52 <uarte_nrfx_configure+0x112>
   11d90:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11d94:	d060      	beq.n	11e58 <uarte_nrfx_configure+0x118>
   11d96:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11d9a:	e051      	b.n	11e40 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   11d9c:	2600      	movs	r6, #0
   11d9e:	e7d6      	b.n	11d4e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   11da0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   11da4:	d05b      	beq.n	11e5e <uarte_nrfx_configure+0x11e>
   11da6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11daa:	d1f4      	bne.n	11d96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11dac:	4b36      	ldr	r3, [pc, #216]	; (11e88 <uarte_nrfx_configure+0x148>)
   11dae:	e03c      	b.n	11e2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   11db0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   11db4:	d056      	beq.n	11e64 <uarte_nrfx_configure+0x124>
   11db6:	d807      	bhi.n	11dc8 <uarte_nrfx_configure+0x88>
   11db8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11dbc:	d054      	beq.n	11e68 <uarte_nrfx_configure+0x128>
   11dbe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11dc2:	d1e8      	bne.n	11d96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11dc4:	4b31      	ldr	r3, [pc, #196]	; (11e8c <uarte_nrfx_configure+0x14c>)
   11dc6:	e030      	b.n	11e2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   11dc8:	f647 2712 	movw	r7, #31250	; 0x7a12
   11dcc:	42bb      	cmp	r3, r7
   11dce:	d1e2      	bne.n	11d96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11dd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11dd4:	e029      	b.n	11e2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   11dd6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   11dda:	d047      	beq.n	11e6c <uarte_nrfx_configure+0x12c>
   11ddc:	d813      	bhi.n	11e06 <uarte_nrfx_configure+0xc6>
   11dde:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11de2:	d046      	beq.n	11e72 <uarte_nrfx_configure+0x132>
   11de4:	d809      	bhi.n	11dfa <uarte_nrfx_configure+0xba>
   11de6:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11dea:	42bb      	cmp	r3, r7
   11dec:	d043      	beq.n	11e76 <uarte_nrfx_configure+0x136>
   11dee:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11df2:	d1d0      	bne.n	11d96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11df4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11df8:	e017      	b.n	11e2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   11dfa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11dfe:	d1ca      	bne.n	11d96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11e00:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11e04:	e011      	b.n	11e2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   11e06:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11e0a:	d037      	beq.n	11e7c <uarte_nrfx_configure+0x13c>
   11e0c:	d808      	bhi.n	11e20 <uarte_nrfx_configure+0xe0>
   11e0e:	4f20      	ldr	r7, [pc, #128]	; (11e90 <uarte_nrfx_configure+0x150>)
   11e10:	42bb      	cmp	r3, r7
   11e12:	d036      	beq.n	11e82 <uarte_nrfx_configure+0x142>
   11e14:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11e18:	d1bd      	bne.n	11d96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11e1a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11e1e:	e004      	b.n	11e2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   11e20:	4f1c      	ldr	r7, [pc, #112]	; (11e94 <uarte_nrfx_configure+0x154>)
   11e22:	42bb      	cmp	r3, r7
   11e24:	d1b7      	bne.n	11d96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11e26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11e2a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11e2e:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11e30:	68c3      	ldr	r3, [r0, #12]
   11e32:	4322      	orrs	r2, r4
   11e34:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11e36:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   11e3a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11e3e:	2000      	movs	r0, #0
}
   11e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11e42:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11e46:	e7f0      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11e48:	4b13      	ldr	r3, [pc, #76]	; (11e98 <uarte_nrfx_configure+0x158>)
   11e4a:	e7ee      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11e4c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11e50:	e7eb      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   11e52:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11e56:	e7e8      	b.n	11e2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   11e58:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   11e5c:	e7e5      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11e5e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11e62:	e7e2      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11e64:	4b0d      	ldr	r3, [pc, #52]	; (11e9c <uarte_nrfx_configure+0x15c>)
   11e66:	e7e0      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11e68:	4b0d      	ldr	r3, [pc, #52]	; (11ea0 <uarte_nrfx_configure+0x160>)
   11e6a:	e7de      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11e6c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11e70:	e7db      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11e72:	4b0c      	ldr	r3, [pc, #48]	; (11ea4 <uarte_nrfx_configure+0x164>)
   11e74:	e7d9      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11e76:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11e7a:	e7d6      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11e7c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11e80:	e7d3      	b.n	11e2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11e82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11e86:	e7d0      	b.n	11e2a <uarte_nrfx_configure+0xea>
   11e88:	0013b000 	.word	0x0013b000
   11e8c:	004ea000 	.word	0x004ea000
   11e90:	0003d090 	.word	0x0003d090
   11e94:	000f4240 	.word	0x000f4240
   11e98:	00275000 	.word	0x00275000
   11e9c:	0075c000 	.word	0x0075c000
   11ea0:	003af000 	.word	0x003af000
   11ea4:	013a9000 	.word	0x013a9000

00011ea8 <uarte_instance_init.constprop.0>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11ea8:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   11eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11eac:	2703      	movs	r7, #3
   11eae:	460d      	mov	r5, r1
	return config->uarte_regs;
   11eb0:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   11eb2:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
   11eb4:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   11eb6:	4b26      	ldr	r3, [pc, #152]	; (11f50 <uarte_instance_init.constprop.0+0xa8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11eb8:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11eba:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
   11ebc:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11ebe:	f101 0280 	add.w	r2, r1, #128	; 0x80
   11ec2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   11ec6:	686a      	ldr	r2, [r5, #4]
   11ec8:	1c57      	adds	r7, r2, #1
   11eca:	bf1e      	ittt	ne
   11ecc:	f04f 0c00 	movne.w	ip, #0
   11ed0:	f102 0780 	addne.w	r7, r2, #128	; 0x80
   11ed4:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   11ed8:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11edc:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
   11ede:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   11ee2:	1c4a      	adds	r2, r1, #1
   11ee4:	d015      	beq.n	11f12 <uarte_instance_init.constprop.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   11ee6:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11ee8:	1c57      	adds	r7, r2, #1
   11eea:	d012      	beq.n	11f12 <uarte_instance_init.constprop.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11eec:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11eee:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11ef2:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   11ef4:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11ef6:	f102 0780 	add.w	r7, r2, #128	; 0x80
   11efa:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
   11efe:	f04f 0c00 	mov.w	ip, #0
   11f02:	f101 0780 	add.w	r7, r1, #128	; 0x80
   11f06:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   11f0a:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   11f0e:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   11f12:	4631      	mov	r1, r6
   11f14:	f7ff ff14 	bl	11d40 <uarte_nrfx_configure>
	if (err) {
   11f18:	b9c8      	cbnz	r0, 11f4e <uarte_instance_init.constprop.0+0xa6>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11f1a:	2308      	movs	r3, #8
   11f1c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   11f20:	686b      	ldr	r3, [r5, #4]
   11f22:	3301      	adds	r3, #1
   11f24:	d009      	beq.n	11f3a <uarte_instance_init.constprop.0+0x92>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   11f26:	f106 0310 	add.w	r3, r6, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f2a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11f2e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11f32:	2301      	movs	r3, #1
   11f34:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f38:	6023      	str	r3, [r4, #0]
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   11f3a:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11f3c:	689b      	ldr	r3, [r3, #8]
   11f3e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11f42:	2300      	movs	r3, #0
   11f44:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f48:	2301      	movs	r3, #1
   11f4a:	60a3      	str	r3, [r4, #8]
   11f4c:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f50:	40842500 	.word	0x40842500

00011f54 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   11f54:	b530      	push	{r4, r5, lr}
   11f56:	b085      	sub	sp, #20
   11f58:	466c      	mov	r4, sp
   11f5a:	4605      	mov	r5, r0
   11f5c:	4b08      	ldr	r3, [pc, #32]	; (11f80 <uarte_1_init+0x2c>)
   11f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11f64:	2200      	movs	r2, #0
   11f66:	2101      	movs	r1, #1
   11f68:	2009      	movs	r0, #9
   11f6a:	f7fc f815 	bl	df98 <z_arm_irq_priority_set>
   11f6e:	2009      	movs	r0, #9
   11f70:	f7fc f802 	bl	df78 <arch_irq_enable>
   11f74:	4621      	mov	r1, r4
   11f76:	4628      	mov	r0, r5
   11f78:	f7ff ff96 	bl	11ea8 <uarte_instance_init.constprop.0>
   11f7c:	b005      	add	sp, #20
   11f7e:	bd30      	pop	{r4, r5, pc}
   11f80:	00020bc0 	.word	0x00020bc0

00011f84 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   11f84:	b530      	push	{r4, r5, lr}
   11f86:	b085      	sub	sp, #20
   11f88:	466c      	mov	r4, sp
   11f8a:	4605      	mov	r5, r0
   11f8c:	4b08      	ldr	r3, [pc, #32]	; (11fb0 <uarte_0_init+0x2c>)
   11f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11f94:	2200      	movs	r2, #0
   11f96:	2101      	movs	r1, #1
   11f98:	2008      	movs	r0, #8
   11f9a:	f7fb fffd 	bl	df98 <z_arm_irq_priority_set>
   11f9e:	2008      	movs	r0, #8
   11fa0:	f7fb ffea 	bl	df78 <arch_irq_enable>
   11fa4:	4621      	mov	r1, r4
   11fa6:	4628      	mov	r0, r5
   11fa8:	f7ff ff7e 	bl	11ea8 <uarte_instance_init.constprop.0>
   11fac:	b005      	add	sp, #20
   11fae:	bd30      	pop	{r4, r5, pc}
   11fb0:	00020bd0 	.word	0x00020bd0

00011fb4 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(struct device *unused)
{
   11fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11fb6:	2200      	movs	r2, #0
   11fb8:	202a      	movs	r0, #42	; 0x2a
   11fba:	4611      	mov	r1, r2
   11fbc:	f7fb ffec 	bl	df98 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   11fc0:	4a06      	ldr	r2, [pc, #24]	; (11fdc <_bsdlib_init+0x28>)
   11fc2:	ab01      	add	r3, sp, #4
   11fc4:	ca07      	ldmia	r2, {r0, r1, r2}
   11fc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   11fca:	4618      	mov	r0, r3
   11fcc:	f006 fcee 	bl	189ac <bsd_init>
   11fd0:	4b03      	ldr	r3, [pc, #12]	; (11fe0 <_bsdlib_init+0x2c>)
   11fd2:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   11fd4:	2000      	movs	r0, #0
   11fd6:	b005      	add	sp, #20
   11fd8:	f85d fb04 	ldr.w	pc, [sp], #4
   11fdc:	00020be0 	.word	0x00020be0
   11fe0:	20020e90 	.word	0x20020e90

00011fe4 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   11fe4:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   11fe6:	4c0d      	ldr	r4, [pc, #52]	; (1201c <thread_monitor_entry_get+0x38>)
{
   11fe8:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   11fea:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   11fec:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   11fee:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   11ff0:	4b0b      	ldr	r3, [pc, #44]	; (12020 <thread_monitor_entry_get+0x3c>)
   11ff2:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   11ff4:	6801      	ldr	r1, [r0, #0]
   11ff6:	4291      	cmp	r1, r2
   11ff8:	d00e      	beq.n	12018 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   11ffa:	b151      	cbz	r1, 12012 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   11ffc:	6841      	ldr	r1, [r0, #4]
   11ffe:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   12000:	42b1      	cmp	r1, r6
   12002:	bfc4      	itt	gt
   12004:	4604      	movgt	r4, r0
   12006:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   12008:	3d01      	subs	r5, #1
   1200a:	f100 0008 	add.w	r0, r0, #8
   1200e:	d1f1      	bne.n	11ff4 <thread_monitor_entry_get+0x10>
   12010:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   12012:	3b01      	subs	r3, #1
	new_entry->id = id;
   12014:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   12016:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   12018:	bd70      	pop	{r4, r5, r6, pc}
   1201a:	bf00      	nop
   1201c:	20020ea0 	.word	0x20020ea0
   12020:	20020e94 	.word	0x20020e94

00012024 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   12024:	4668      	mov	r0, sp
   12026:	f020 0107 	bic.w	r1, r0, #7
   1202a:	468d      	mov	sp, r1
   1202c:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1202e:	4b0d      	ldr	r3, [pc, #52]	; (12064 <rpc_proxy_irq_handler+0x40>)
   12030:	e8d3 2fef 	ldaex	r2, [r3]
   12034:	3201      	adds	r2, #1
   12036:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1203a:	2900      	cmp	r1, #0
   1203c:	d1f8      	bne.n	12030 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1203e:	f001 fb6b 	bl	13718 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   12042:	4b09      	ldr	r3, [pc, #36]	; (12068 <rpc_proxy_irq_handler+0x44>)
   12044:	681c      	ldr	r4, [r3, #0]
   12046:	b93c      	cbnz	r4, 12058 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   12048:	f7fb ffbc 	bl	dfc4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1204c:	f7fc fb1c 	bl	e688 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   12050:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   12054:	4685      	mov	sp, r0
   12056:	4770      	bx	lr
   12058:	1d20      	adds	r0, r4, #4
   1205a:	f009 fb17 	bl	1b68c <z_impl_k_sem_give>
   1205e:	6824      	ldr	r4, [r4, #0]
	return node->next;
   12060:	e7f1      	b.n	12046 <rpc_proxy_irq_handler+0x22>
   12062:	bf00      	nop
   12064:	20020e94 	.word	0x20020e94
   12068:	20020e98 	.word	0x20020e98

0001206c <bsd_os_timedwait>:
{
   1206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12070:	460c      	mov	r4, r1
   12072:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   12074:	f00e fb94 	bl	207a0 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   12078:	6823      	ldr	r3, [r4, #0]
   1207a:	4680      	mov	r8, r0
   1207c:	2b00      	cmp	r3, #0
   1207e:	468a      	mov	sl, r1
   12080:	d103      	bne.n	1208a <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   12082:	f009 fa91 	bl	1b5a8 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   12086:	203c      	movs	r0, #60	; 0x3c
   12088:	e091      	b.n	121ae <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   1208a:	bfbc      	itt	lt
   1208c:	f04f 33ff 	movlt.w	r3, #4294967295
   12090:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   12092:	2201      	movs	r2, #1
   12094:	2100      	movs	r1, #0
   12096:	a802      	add	r0, sp, #8
   12098:	f00e fa97 	bl	205ca <z_impl_k_sem_init>
   1209c:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   1209e:	f04f 0320 	mov.w	r3, #32
   120a2:	f3ef 8b11 	mrs	fp, BASEPRI
   120a6:	f383 8811 	msr	BASEPRI, r3
   120aa:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   120ae:	f009 fae7 	bl	1b680 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   120b2:	f7ff ff97 	bl	11fe4 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   120b6:	4946      	ldr	r1, [pc, #280]	; (121d0 <bsd_os_timedwait+0x164>)
   120b8:	6843      	ldr	r3, [r0, #4]
   120ba:	680a      	ldr	r2, [r1, #0]
   120bc:	4689      	mov	r9, r1
   120be:	4293      	cmp	r3, r2
   120c0:	f04f 0300 	mov.w	r3, #0
   120c4:	d108      	bne.n	120d8 <bsd_os_timedwait+0x6c>
	parent->next = child;
   120c6:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   120c8:	4b42      	ldr	r3, [pc, #264]	; (121d4 <bsd_os_timedwait+0x168>)
   120ca:	685a      	ldr	r2, [r3, #4]
   120cc:	2a00      	cmp	r2, #0
   120ce:	d171      	bne.n	121b4 <bsd_os_timedwait+0x148>
	list->head = node;
   120d0:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   120d4:	2301      	movs	r3, #1
}
   120d6:	e000      	b.n	120da <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   120d8:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   120da:	f38b 8811 	msr	BASEPRI, fp
   120de:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   120e2:	2b00      	cmp	r3, #0
   120e4:	d062      	beq.n	121ac <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   120e6:	6820      	ldr	r0, [r4, #0]
   120e8:	1c42      	adds	r2, r0, #1
   120ea:	d066      	beq.n	121ba <bsd_os_timedwait+0x14e>
   120ec:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   120f0:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   120f4:	f240 30e7 	movw	r0, #999	; 0x3e7
   120f8:	2100      	movs	r1, #0
   120fa:	2300      	movs	r3, #0
   120fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12100:	fbce 010c 	smlal	r0, r1, lr, ip
   12104:	f7fa fa58 	bl	c5b8 <__aeabi_uldivmod>
   12108:	2300      	movs	r3, #0
	return z_impl_k_sem_take(sem, timeout);
   1210a:	4602      	mov	r2, r0
   1210c:	a802      	add	r0, sp, #8
   1210e:	f009 fae3 	bl	1b6d8 <z_impl_k_sem_take>
	__asm__ volatile(
   12112:	f04f 0320 	mov.w	r3, #32
   12116:	f3ef 8b11 	mrs	fp, BASEPRI
   1211a:	f383 8811 	msr	BASEPRI, r3
   1211e:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12122:	2000      	movs	r0, #0
   12124:	4b2b      	ldr	r3, [pc, #172]	; (121d4 <bsd_os_timedwait+0x168>)
   12126:	681a      	ldr	r2, [r3, #0]
   12128:	b15a      	cbz	r2, 12142 <bsd_os_timedwait+0xd6>
   1212a:	42aa      	cmp	r2, r5
   1212c:	d14d      	bne.n	121ca <bsd_os_timedwait+0x15e>
Z_GENLIST_REMOVE(slist, snode)
   1212e:	9d01      	ldr	r5, [sp, #4]
   12130:	2800      	cmp	r0, #0
   12132:	d144      	bne.n	121be <bsd_os_timedwait+0x152>
   12134:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   12136:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   12138:	4291      	cmp	r1, r2
   1213a:	d100      	bne.n	1213e <bsd_os_timedwait+0xd2>
	list->tail = node;
   1213c:	605d      	str	r5, [r3, #4]
	parent->next = child;
   1213e:	2300      	movs	r3, #0
   12140:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   12142:	f009 fa9d 	bl	1b680 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   12146:	f7ff ff4d 	bl	11fe4 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1214a:	f8d9 3000 	ldr.w	r3, [r9]
   1214e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   12150:	f38b 8811 	msr	BASEPRI, fp
   12154:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   12158:	6825      	ldr	r5, [r4, #0]
   1215a:	1c6b      	adds	r3, r5, #1
   1215c:	d026      	beq.n	121ac <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   1215e:	f00e fb1f 	bl	207a0 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   12162:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   12166:	468e      	mov	lr, r1
   12168:	fba8 890c 	umull	r8, r9, r8, ip
   1216c:	fba0 010c 	umull	r0, r1, r0, ip
   12170:	fb0c 990a 	mla	r9, ip, sl, r9
   12174:	fb0c 110e 	mla	r1, ip, lr, r1
   12178:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   1217c:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   12180:	1952      	adds	r2, r2, r5
   12182:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   12186:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   1218a:	0bc5      	lsrs	r5, r0, #15
   1218c:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   12190:	1b56      	subs	r6, r2, r5
   12192:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   12196:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   1219a:	2e00      	cmp	r6, #0
   1219c:	f177 0300 	sbcs.w	r3, r7, #0
   121a0:	bfb8      	it	lt
   121a2:	2600      	movlt	r6, #0
   121a4:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   121a6:	2e00      	cmp	r6, #0
   121a8:	f43f af6d 	beq.w	12086 <bsd_os_timedwait+0x1a>
	return 0;
   121ac:	2000      	movs	r0, #0
}
   121ae:	b009      	add	sp, #36	; 0x24
   121b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121b4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   121b6:	605d      	str	r5, [r3, #4]
   121b8:	e78c      	b.n	120d4 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   121ba:	4603      	mov	r3, r0
   121bc:	e7a5      	b.n	1210a <bsd_os_timedwait+0x9e>
	parent->next = child;
   121be:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   121c0:	6859      	ldr	r1, [r3, #4]
   121c2:	4291      	cmp	r1, r2
	list->tail = node;
   121c4:	bf08      	it	eq
   121c6:	6058      	streq	r0, [r3, #4]
}
   121c8:	e7b9      	b.n	1213e <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   121ca:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   121cc:	6812      	ldr	r2, [r2, #0]
   121ce:	e7ab      	b.n	12128 <bsd_os_timedwait+0xbc>
   121d0:	20020e94 	.word	0x20020e94
   121d4:	20020e98 	.word	0x20020e98

000121d8 <bsd_os_errno_set>:
	switch (err_code) {
   121d8:	283c      	cmp	r0, #60	; 0x3c
{
   121da:	4601      	mov	r1, r0
   121dc:	b508      	push	{r3, lr}
	switch (err_code) {
   121de:	f300 808f 	bgt.w	12300 <bsd_os_errno_set+0x128>
   121e2:	2800      	cmp	r0, #0
   121e4:	dc0d      	bgt.n	12202 <bsd_os_errno_set+0x2a>
   121e6:	4bb0      	ldr	r3, [pc, #704]	; (124a8 <bsd_os_errno_set+0x2d0>)
   121e8:	4ab0      	ldr	r2, [pc, #704]	; (124ac <bsd_os_errno_set+0x2d4>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   121ea:	48b1      	ldr	r0, [pc, #708]	; (124b0 <bsd_os_errno_set+0x2d8>)
   121ec:	1ad2      	subs	r2, r2, r3
   121ee:	08d2      	lsrs	r2, r2, #3
   121f0:	0192      	lsls	r2, r2, #6
   121f2:	f042 0201 	orr.w	r2, r2, #1
   121f6:	f00a f8c5 	bl	1c384 <log_1>
		errno = 0xBAADBAAD;
   121fa:	f00d fc29 	bl	1fa50 <z_errno>
   121fe:	4bad      	ldr	r3, [pc, #692]	; (124b4 <bsd_os_errno_set+0x2dc>)
   12200:	e0bf      	b.n	12382 <bsd_os_errno_set+0x1aa>
   12202:	1e43      	subs	r3, r0, #1
   12204:	2b3b      	cmp	r3, #59	; 0x3b
   12206:	d8ee      	bhi.n	121e6 <bsd_os_errno_set+0xe>
   12208:	a201      	add	r2, pc, #4	; (adr r2, 12210 <bsd_os_errno_set+0x38>)
   1220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1220e:	bf00      	nop
   12210:	0001237d 	.word	0x0001237d
   12214:	00012387 	.word	0x00012387
   12218:	000121e7 	.word	0x000121e7
   1221c:	000121e7 	.word	0x000121e7
   12220:	0001238f 	.word	0x0001238f
   12224:	000121e7 	.word	0x000121e7
   12228:	000121e7 	.word	0x000121e7
   1222c:	00012397 	.word	0x00012397
   12230:	0001239f 	.word	0x0001239f
   12234:	000121e7 	.word	0x000121e7
   12238:	000121e7 	.word	0x000121e7
   1223c:	000123a7 	.word	0x000123a7
   12240:	000123af 	.word	0x000123af
   12244:	000123b7 	.word	0x000123b7
   12248:	000121e7 	.word	0x000121e7
   1224c:	000121e7 	.word	0x000121e7
   12250:	000121e7 	.word	0x000121e7
   12254:	000121e7 	.word	0x000121e7
   12258:	000121e7 	.word	0x000121e7
   1225c:	000121e7 	.word	0x000121e7
   12260:	000121e7 	.word	0x000121e7
   12264:	000123bf 	.word	0x000123bf
   12268:	000121e7 	.word	0x000121e7
   1226c:	000123c7 	.word	0x000123c7
   12270:	000121e7 	.word	0x000121e7
   12274:	000121e7 	.word	0x000121e7
   12278:	000121e7 	.word	0x000121e7
   1227c:	000121e7 	.word	0x000121e7
   12280:	000121e7 	.word	0x000121e7
   12284:	000121e7 	.word	0x000121e7
   12288:	000121e7 	.word	0x000121e7
   1228c:	000121e7 	.word	0x000121e7
   12290:	000121e7 	.word	0x000121e7
   12294:	000121e7 	.word	0x000121e7
   12298:	000123cf 	.word	0x000123cf
   1229c:	000121e7 	.word	0x000121e7
   122a0:	000123d7 	.word	0x000123d7
   122a4:	000121e7 	.word	0x000121e7
   122a8:	000121e7 	.word	0x000121e7
   122ac:	0001249f 	.word	0x0001249f
   122b0:	000123df 	.word	0x000123df
   122b4:	000123e7 	.word	0x000123e7
   122b8:	000123ef 	.word	0x000123ef
   122bc:	000123f7 	.word	0x000123f7
   122c0:	000123ff 	.word	0x000123ff
   122c4:	000121e7 	.word	0x000121e7
   122c8:	00012407 	.word	0x00012407
   122cc:	0001240f 	.word	0x0001240f
   122d0:	000121e7 	.word	0x000121e7
   122d4:	00012417 	.word	0x00012417
   122d8:	0001241f 	.word	0x0001241f
   122dc:	00012427 	.word	0x00012427
   122e0:	000121e7 	.word	0x000121e7
   122e4:	0001242f 	.word	0x0001242f
   122e8:	000121e7 	.word	0x000121e7
   122ec:	00012437 	.word	0x00012437
   122f0:	0001243f 	.word	0x0001243f
   122f4:	000121e7 	.word	0x000121e7
   122f8:	000121e7 	.word	0x000121e7
   122fc:	00012447 	.word	0x00012447
	switch (err_code) {
   12300:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   12304:	2b18      	cmp	r3, #24
   12306:	f63f af6e 	bhi.w	121e6 <bsd_os_errno_set+0xe>
   1230a:	2b18      	cmp	r3, #24
   1230c:	f63f af6b 	bhi.w	121e6 <bsd_os_errno_set+0xe>
   12310:	a201      	add	r2, pc, #4	; (adr r2, 12318 <bsd_os_errno_set+0x140>)
   12312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12316:	bf00      	nop
   12318:	0001244f 	.word	0x0001244f
   1231c:	000121e7 	.word	0x000121e7
   12320:	000121e7 	.word	0x000121e7
   12324:	000121e7 	.word	0x000121e7
   12328:	000121e7 	.word	0x000121e7
   1232c:	000121e7 	.word	0x000121e7
   12330:	000121e7 	.word	0x000121e7
   12334:	00012457 	.word	0x00012457
   12338:	000121e7 	.word	0x000121e7
   1233c:	00012467 	.word	0x00012467
   12340:	0001245f 	.word	0x0001245f
   12344:	000121e7 	.word	0x000121e7
   12348:	000121e7 	.word	0x000121e7
   1234c:	000121e7 	.word	0x000121e7
   12350:	000121e7 	.word	0x000121e7
   12354:	000121e7 	.word	0x000121e7
   12358:	000121e7 	.word	0x000121e7
   1235c:	000121e7 	.word	0x000121e7
   12360:	000121e7 	.word	0x000121e7
   12364:	000121e7 	.word	0x000121e7
   12368:	0001246f 	.word	0x0001246f
   1236c:	00012477 	.word	0x00012477
   12370:	00012481 	.word	0x00012481
   12374:	0001248b 	.word	0x0001248b
   12378:	00012495 	.word	0x00012495
		errno = EPERM;
   1237c:	f00d fb68 	bl	1fa50 <z_errno>
   12380:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   12382:	6003      	str	r3, [r0, #0]
}
   12384:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   12386:	f00d fb63 	bl	1fa50 <z_errno>
   1238a:	2302      	movs	r3, #2
   1238c:	e7f9      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EIO;
   1238e:	f00d fb5f 	bl	1fa50 <z_errno>
   12392:	2305      	movs	r3, #5
   12394:	e7f5      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   12396:	f00d fb5b 	bl	1fa50 <z_errno>
   1239a:	2308      	movs	r3, #8
   1239c:	e7f1      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   1239e:	f00d fb57 	bl	1fa50 <z_errno>
   123a2:	2309      	movs	r3, #9
   123a4:	e7ed      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   123a6:	f00d fb53 	bl	1fa50 <z_errno>
   123aa:	230c      	movs	r3, #12
   123ac:	e7e9      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   123ae:	f00d fb4f 	bl	1fa50 <z_errno>
   123b2:	230d      	movs	r3, #13
   123b4:	e7e5      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   123b6:	f00d fb4b 	bl	1fa50 <z_errno>
   123ba:	230e      	movs	r3, #14
   123bc:	e7e1      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   123be:	f00d fb47 	bl	1fa50 <z_errno>
   123c2:	2316      	movs	r3, #22
   123c4:	e7dd      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   123c6:	f00d fb43 	bl	1fa50 <z_errno>
   123ca:	2318      	movs	r3, #24
   123cc:	e7d9      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   123ce:	f00d fb3f 	bl	1fa50 <z_errno>
   123d2:	230b      	movs	r3, #11
   123d4:	e7d5      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   123d6:	f00d fb3b 	bl	1fa50 <z_errno>
   123da:	2325      	movs	r3, #37	; 0x25
   123dc:	e7d1      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   123de:	f00d fb37 	bl	1fa50 <z_errno>
   123e2:	2329      	movs	r3, #41	; 0x29
   123e4:	e7cd      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   123e6:	f00d fb33 	bl	1fa50 <z_errno>
   123ea:	232a      	movs	r3, #42	; 0x2a
   123ec:	e7c9      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   123ee:	f00d fb2f 	bl	1fa50 <z_errno>
   123f2:	232b      	movs	r3, #43	; 0x2b
   123f4:	e7c5      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   123f6:	f00d fb2b 	bl	1fa50 <z_errno>
   123fa:	232c      	movs	r3, #44	; 0x2c
   123fc:	e7c1      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   123fe:	f00d fb27 	bl	1fa50 <z_errno>
   12402:	232d      	movs	r3, #45	; 0x2d
   12404:	e7bd      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   12406:	f00d fb23 	bl	1fa50 <z_errno>
   1240a:	232f      	movs	r3, #47	; 0x2f
   1240c:	e7b9      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   1240e:	f00d fb1f 	bl	1fa50 <z_errno>
   12412:	2330      	movs	r3, #48	; 0x30
   12414:	e7b5      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   12416:	f00d fb1b 	bl	1fa50 <z_errno>
   1241a:	233e      	movs	r3, #62	; 0x3e
   1241c:	e7b1      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   1241e:	f00d fb17 	bl	1fa50 <z_errno>
   12422:	2333      	movs	r3, #51	; 0x33
   12424:	e7ad      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   12426:	f00d fb13 	bl	1fa50 <z_errno>
   1242a:	2334      	movs	r3, #52	; 0x34
   1242c:	e7a9      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   1242e:	f00d fb0f 	bl	1fa50 <z_errno>
   12432:	2336      	movs	r3, #54	; 0x36
   12434:	e7a5      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   12436:	f00d fb0b 	bl	1fa50 <z_errno>
   1243a:	2338      	movs	r3, #56	; 0x38
   1243c:	e7a1      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   1243e:	f00d fb07 	bl	1fa50 <z_errno>
   12442:	2339      	movs	r3, #57	; 0x39
   12444:	e79d      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   12446:	f00d fb03 	bl	1fa50 <z_errno>
   1244a:	233c      	movs	r3, #60	; 0x3c
   1244c:	e799      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   1244e:	f00d faff 	bl	1fa50 <z_errno>
   12452:	2337      	movs	r3, #55	; 0x37
   12454:	e795      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   12456:	f00d fafb 	bl	1fa50 <z_errno>
   1245a:	2343      	movs	r3, #67	; 0x43
   1245c:	e791      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   1245e:	f00d faf7 	bl	1fa50 <z_errno>
   12462:	2344      	movs	r3, #68	; 0x44
   12464:	e78d      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   12466:	f00d faf3 	bl	1fa50 <z_errno>
   1246a:	2345      	movs	r3, #69	; 0x45
   1246c:	e789      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   1246e:	f00d faef 	bl	1fa50 <z_errno>
   12472:	2348      	movs	r3, #72	; 0x48
   12474:	e785      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   12476:	f00d faeb 	bl	1fa50 <z_errno>
   1247a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1247e:	e780      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   12480:	f00d fae6 	bl	1fa50 <z_errno>
   12484:	f240 73d2 	movw	r3, #2002	; 0x7d2
   12488:	e77b      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   1248a:	f00d fae1 	bl	1fa50 <z_errno>
   1248e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   12492:	e776      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   12494:	f00d fadc 	bl	1fa50 <z_errno>
   12498:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1249c:	e771      	b.n	12382 <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   1249e:	f00d fad7 	bl	1fa50 <z_errno>
   124a2:	2324      	movs	r3, #36	; 0x24
   124a4:	e76d      	b.n	12382 <bsd_os_errno_set+0x1aa>
   124a6:	bf00      	nop
   124a8:	00020b54 	.word	0x00020b54
   124ac:	00020b5c 	.word	0x00020b5c
   124b0:	000219eb 	.word	0x000219eb
   124b4:	baadbaad 	.word	0xbaadbaad

000124b8 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   124b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   124bc:	4b01      	ldr	r3, [pc, #4]	; (124c4 <bsd_os_application_irq_set+0xc>)
   124be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   124c2:	4770      	bx	lr
   124c4:	e000e100 	.word	0xe000e100

000124c8 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   124c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   124cc:	4b01      	ldr	r3, [pc, #4]	; (124d4 <bsd_os_application_irq_clear+0xc>)
   124ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   124d2:	4770      	bx	lr
   124d4:	e000e100 	.word	0xe000e100

000124d8 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   124d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   124dc:	4b01      	ldr	r3, [pc, #4]	; (124e4 <bsd_os_trace_irq_set+0xc>)
   124de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   124e2:	4770      	bx	lr
   124e4:	e000e100 	.word	0xe000e100

000124e8 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   124e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   124ec:	4b01      	ldr	r3, [pc, #4]	; (124f4 <bsd_os_trace_irq_clear+0xc>)
   124ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   124f2:	4770      	bx	lr
   124f4:	e000e100 	.word	0xe000e100

000124f8 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   124f8:	b508      	push	{r3, lr}
	list->head = NULL;
   124fa:	2300      	movs	r3, #0
   124fc:	4a07      	ldr	r2, [pc, #28]	; (1251c <bsd_os_init+0x24>)
	list->tail = NULL;
   124fe:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12502:	4a07      	ldr	r2, [pc, #28]	; (12520 <bsd_os_init+0x28>)
   12504:	e8d2 1fef 	ldaex	r1, [r2]
   12508:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1250c:	2800      	cmp	r0, #0
   1250e:	d1f9      	bne.n	12504 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   12510:	f00d fac9 	bl	1faa6 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   12514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   12518:	f00d baba 	b.w	1fa90 <trace_task_create>
   1251c:	20020e98 	.word	0x20020e98
   12520:	20020e94 	.word	0x20020e94

00012524 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   12524:	f240 2302 	movw	r3, #514	; 0x202
   12528:	4298      	cmp	r0, r3
   1252a:	d05c      	beq.n	125e6 <z_to_nrf_optname+0xc2>
   1252c:	dc07      	bgt.n	1253e <z_to_nrf_optname+0x1a>
   1252e:	2801      	cmp	r0, #1
   12530:	d043      	beq.n	125ba <z_to_nrf_optname+0x96>
   12532:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   12536:	d035      	beq.n	125a4 <z_to_nrf_optname+0x80>
   12538:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1253c:	4770      	bx	lr
	switch (z_in_level) {
   1253e:	f240 2303 	movw	r3, #515	; 0x203
   12542:	4298      	cmp	r0, r3
   12544:	d1f8      	bne.n	12538 <z_to_nrf_optname+0x14>
		switch (z_in_optname) {
   12546:	3901      	subs	r1, #1
   12548:	2913      	cmp	r1, #19
   1254a:	d8f5      	bhi.n	12538 <z_to_nrf_optname+0x14>
   1254c:	a301      	add	r3, pc, #4	; (adr r3, 12554 <z_to_nrf_optname+0x30>)
   1254e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   12552:	bf00      	nop
   12554:	000125f3 	.word	0x000125f3
   12558:	000125d7 	.word	0x000125d7
   1255c:	000125b7 	.word	0x000125b7
   12560:	000125c7 	.word	0x000125c7
   12564:	000125db 	.word	0x000125db
   12568:	000125df 	.word	0x000125df
   1256c:	000125e3 	.word	0x000125e3
   12570:	00012539 	.word	0x00012539
   12574:	00012539 	.word	0x00012539
   12578:	00012539 	.word	0x00012539
   1257c:	00012539 	.word	0x00012539
   12580:	00012539 	.word	0x00012539
   12584:	00012539 	.word	0x00012539
   12588:	00012539 	.word	0x00012539
   1258c:	00012539 	.word	0x00012539
   12590:	00012539 	.word	0x00012539
   12594:	00012539 	.word	0x00012539
   12598:	00012539 	.word	0x00012539
   1259c:	00012539 	.word	0x00012539
   125a0:	000125cd 	.word	0x000125cd
		switch (z_in_optname) {
   125a4:	3901      	subs	r1, #1
   125a6:	2906      	cmp	r1, #6
   125a8:	d8c6      	bhi.n	12538 <z_to_nrf_optname+0x14>
   125aa:	e8df f001 	tbb	[pc, r1]
   125ae:	1614      	.short	0x1614
   125b0:	220c1a18 	.word	0x220c1a18
   125b4:	04          	.byte	0x04
   125b5:	00          	.byte	0x00
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   125b6:	2303      	movs	r3, #3
   125b8:	e006      	b.n	125c8 <z_to_nrf_optname+0xa4>
		switch (z_in_optname) {
   125ba:	2914      	cmp	r1, #20
   125bc:	d006      	beq.n	125cc <z_to_nrf_optname+0xa8>
   125be:	2919      	cmp	r1, #25
   125c0:	d006      	beq.n	125d0 <z_to_nrf_optname+0xac>
   125c2:	2904      	cmp	r1, #4
   125c4:	d1b8      	bne.n	12538 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   125c6:	2304      	movs	r3, #4
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   125c8:	6013      	str	r3, [r2, #0]
   125ca:	e002      	b.n	125d2 <z_to_nrf_optname+0xae>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   125cc:	2314      	movs	r3, #20
   125ce:	e7fb      	b.n	125c8 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   125d0:	6011      	str	r1, [r2, #0]
	int retval = 0;
   125d2:	2000      	movs	r0, #0
			break;
   125d4:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   125d6:	2302      	movs	r3, #2
   125d8:	e7f6      	b.n	125c8 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   125da:	2305      	movs	r3, #5
   125dc:	e7f4      	b.n	125c8 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   125de:	2306      	movs	r3, #6
   125e0:	e7f2      	b.n	125c8 <z_to_nrf_optname+0xa4>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   125e2:	2307      	movs	r3, #7
   125e4:	e7f0      	b.n	125c8 <z_to_nrf_optname+0xa4>
		switch (z_in_optname) {
   125e6:	2902      	cmp	r1, #2
   125e8:	d0f5      	beq.n	125d6 <z_to_nrf_optname+0xb2>
   125ea:	2903      	cmp	r1, #3
   125ec:	d0e3      	beq.n	125b6 <z_to_nrf_optname+0x92>
   125ee:	2901      	cmp	r1, #1
   125f0:	d1a2      	bne.n	12538 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   125f2:	2301      	movs	r3, #1
   125f4:	e7e8      	b.n	125c8 <z_to_nrf_optname+0xa4>
   125f6:	bf00      	nop

000125f8 <nrf91_socket_offload_ioctl>:
	return retval;
}

static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
   125f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125fc:	f5a1 7380 	sub.w	r3, r1, #256	; 0x100
   12600:	b091      	sub	sp, #68	; 0x44
	int sd = OBJ_TO_SD(obj);
   12602:	3801      	subs	r0, #1

	switch (request) {
   12604:	2b05      	cmp	r3, #5
   12606:	d879      	bhi.n	126fc <nrf91_socket_offload_ioctl+0x104>
   12608:	e8df f003 	tbb	[pc, r3]
   1260c:	94787809 	.word	0x94787809
   12610:	0d03      	.short	0x0d03
	int sd = OBJ_TO_SD(obj);
   12612:	f06f 042c 	mvn.w	r4, #44	; 0x2c
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   12616:	4620      	mov	r0, r4
   12618:	b011      	add	sp, #68	; 0x44
   1261a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return nrf_close(sd);
   1261e:	f006 fbed 	bl	18dfc <nrf_close>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   12622:	4604      	mov	r4, r0
		break;
   12624:	e7f7      	b.n	12616 <nrf91_socket_offload_ioctl+0x1e>
	for (int i = 0; i < nfds; i++) {
   12626:	f04f 0800 	mov.w	r8, #0
		nfds = va_arg(args, int);
   1262a:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1262e:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   12630:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   12634:	4668      	mov	r0, sp
   12636:	2240      	movs	r2, #64	; 0x40
   12638:	f00a fb38 	bl	1ccac <memset>
	for (int i = 0; i < nfds; i++) {
   1263c:	466e      	mov	r6, sp
   1263e:	4655      	mov	r5, sl
   12640:	4657      	mov	r7, sl
	int retval = 0;
   12642:	4644      	mov	r4, r8
		tmp[i].events = 0;
   12644:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   12646:	493d      	ldr	r1, [pc, #244]	; (1273c <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   12648:	45c1      	cmp	r9, r8
   1264a:	dc32      	bgt.n	126b2 <nrf91_socket_offload_ioctl+0xba>
	if (retval > 0) {
   1264c:	2c00      	cmp	r4, #0
   1264e:	dce2      	bgt.n	12616 <nrf91_socket_offload_ioctl+0x1e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   12650:	465a      	mov	r2, fp
   12652:	4649      	mov	r1, r9
   12654:	4668      	mov	r0, sp
   12656:	f006 fc9d 	bl	18f94 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1265a:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1265c:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1265e:	4599      	cmp	r9, r3
   12660:	ddd9      	ble.n	12616 <nrf91_socket_offload_ioctl+0x1e>
		if (fds[i].fd < 0) {
   12662:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   12666:	2a00      	cmp	r2, #0
   12668:	db20      	blt.n	126ac <nrf91_socket_offload_ioctl+0xb4>
		if (tmp[i].revents & NRF_POLLIN) {
   1266a:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   1266e:	88d2      	ldrh	r2, [r2, #6]
   12670:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   12672:	bf42      	ittt	mi
   12674:	88e9      	ldrhmi	r1, [r5, #6]
   12676:	f041 0101 	orrmi.w	r1, r1, #1
   1267a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1267c:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   1267e:	bf42      	ittt	mi
   12680:	88e9      	ldrhmi	r1, [r5, #6]
   12682:	f041 0104 	orrmi.w	r1, r1, #4
   12686:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   12688:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1268a:	bf42      	ittt	mi
   1268c:	88e9      	ldrhmi	r1, [r5, #6]
   1268e:	f041 0108 	orrmi.w	r1, r1, #8
   12692:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   12694:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   12696:	bf42      	ittt	mi
   12698:	88e9      	ldrhmi	r1, [r5, #6]
   1269a:	f041 0120 	orrmi.w	r1, r1, #32
   1269e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   126a0:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   126a2:	bf42      	ittt	mi
   126a4:	88ea      	ldrhmi	r2, [r5, #6]
   126a6:	f042 0210 	orrmi.w	r2, r2, #16
   126aa:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   126ac:	3301      	adds	r3, #1
   126ae:	3508      	adds	r5, #8
   126b0:	e7d5      	b.n	1265e <nrf91_socket_offload_ioctl+0x66>
		if (fds[i].fd < 0) {
   126b2:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   126b4:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   126b6:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   126b8:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   126ba:	da05      	bge.n	126c8 <nrf91_socket_offload_ioctl+0xd0>
			tmp[i].fd = fds[i].fd;
   126bc:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   126be:	f108 0801 	add.w	r8, r8, #1
   126c2:	3608      	adds	r6, #8
   126c4:	3708      	adds	r7, #8
   126c6:	e7bf      	b.n	12648 <nrf91_socket_offload_ioctl+0x50>
			obj = z_get_fd_obj(fds[i].fd,
   126c8:	2223      	movs	r2, #35	; 0x23
   126ca:	f7fa fa55 	bl	cb78 <z_get_fd_obj>
			if (obj != NULL) {
   126ce:	2300      	movs	r3, #0
   126d0:	491a      	ldr	r1, [pc, #104]	; (1273c <nrf91_socket_offload_ioctl+0x144>)
   126d2:	b178      	cbz	r0, 126f4 <nrf91_socket_offload_ioctl+0xfc>
				tmp[i].fd = OBJ_TO_SD(obj);
   126d4:	3801      	subs	r0, #1
   126d6:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   126d8:	88b8      	ldrh	r0, [r7, #4]
   126da:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   126dc:	bf42      	ittt	mi
   126de:	88b2      	ldrhmi	r2, [r6, #4]
   126e0:	f042 0201 	orrmi.w	r2, r2, #1
   126e4:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   126e6:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   126e8:	bf42      	ittt	mi
   126ea:	88b2      	ldrhmi	r2, [r6, #4]
   126ec:	f042 0202 	orrmi.w	r2, r2, #2
   126f0:	80b2      	strhmi	r2, [r6, #4]
   126f2:	e7e4      	b.n	126be <nrf91_socket_offload_ioctl+0xc6>
				fds[i].revents = POLLNVAL;
   126f4:	2220      	movs	r2, #32
				retval++;
   126f6:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   126f8:	80fa      	strh	r2, [r7, #6]
				retval++;
   126fa:	e7ed      	b.n	126d8 <nrf91_socket_offload_ioctl+0xe0>
	switch (cmd) {
   126fc:	2903      	cmp	r1, #3
   126fe:	d00a      	beq.n	12716 <nrf91_socket_offload_ioctl+0x11e>
   12700:	2904      	cmp	r1, #4
   12702:	d110      	bne.n	12726 <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   12704:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   12706:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1270a:	d10c      	bne.n	12726 <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1270c:	2101      	movs	r1, #1
   1270e:	1392      	asrs	r2, r2, #14
   12710:	f006 fc42 	bl	18f98 <nrf_fcntl>
   12714:	e785      	b.n	12622 <nrf91_socket_offload_ioctl+0x2a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   12716:	2200      	movs	r2, #0
   12718:	2102      	movs	r1, #2
   1271a:	f006 fc3d 	bl	18f98 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1271e:	0380      	lsls	r0, r0, #14
   12720:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   12724:	e777      	b.n	12616 <nrf91_socket_offload_ioctl+0x1e>
	errno = EINVAL;
   12726:	f00d fa22 	bl	1fb6e <z_errno>
   1272a:	2316      	movs	r3, #22
	return retval;
   1272c:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   12730:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   12732:	e770      	b.n	12616 <nrf91_socket_offload_ioctl+0x1e>
		return -EXDEV;
   12734:	f06f 0411 	mvn.w	r4, #17
   12738:	e76d      	b.n	12616 <nrf91_socket_offload_ioctl+0x1e>
   1273a:	bf00      	nop
   1273c:	00020da4 	.word	0x00020da4

00012740 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   12740:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   12742:	4b03      	ldr	r3, [pc, #12]	; (12750 <nrf91_socket_iface_init+0x10>)
   12744:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   12746:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   12748:	4802      	ldr	r0, [pc, #8]	; (12754 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1274a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1274c:	f7fb b9a2 	b.w	da94 <socket_offload_dns_register>
   12750:	20020ef0 	.word	0x20020ef0
   12754:	00020d9c 	.word	0x00020d9c

00012758 <nrf91_socket_create>:
{
   12758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1275a:	4606      	mov	r6, r0
   1275c:	460d      	mov	r5, r1
   1275e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   12760:	f7fa fa24 	bl	cbac <z_reserve_fd>
	if (fd < 0) {
   12764:	1e04      	subs	r4, r0, #0
   12766:	db0d      	blt.n	12784 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   12768:	b2b0      	uxth	r0, r6
   1276a:	f00d f9b3 	bl	1fad4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1276e:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   12772:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   12774:	d109      	bne.n	1278a <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   12776:	f00d f9fa 	bl	1fb6e <z_errno>
   1277a:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1277c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1277e:	4620      	mov	r0, r4
   12780:	f7fa fa42 	bl	cc08 <z_free_fd>
		return -1;
   12784:	f04f 34ff 	mov.w	r4, #4294967295
   12788:	e01b      	b.n	127c2 <nrf91_socket_create+0x6a>
	switch (socktype) {
   1278a:	2d03      	cmp	r5, #3
   1278c:	d003      	beq.n	12796 <nrf91_socket_create+0x3e>
   1278e:	2d04      	cmp	r5, #4
   12790:	bf08      	it	eq
   12792:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   12796:	4638      	mov	r0, r7
   12798:	f00d f9b8 	bl	1fb0c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1279c:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   127a0:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   127a2:	d103      	bne.n	127ac <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   127a4:	f00d f9e3 	bl	1fb6e <z_errno>
   127a8:	232b      	movs	r3, #43	; 0x2b
   127aa:	e7e7      	b.n	1277c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   127ac:	4629      	mov	r1, r5
   127ae:	4630      	mov	r0, r6
   127b0:	f006 fb12 	bl	18dd8 <nrf_socket>
	if (sd < 0) {
   127b4:	1e01      	subs	r1, r0, #0
   127b6:	dbe2      	blt.n	1277e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   127b8:	4620      	mov	r0, r4
   127ba:	4a03      	ldr	r2, [pc, #12]	; (127c8 <nrf91_socket_create+0x70>)
   127bc:	3101      	adds	r1, #1
   127be:	f7fa fa19 	bl	cbf4 <z_finalize_fd>
}
   127c2:	4620      	mov	r0, r4
   127c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   127c6:	bf00      	nop
   127c8:	00020da4 	.word	0x00020da4

000127cc <nrf91_socket_offload_sendmsg>:
{
   127cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   127d0:	4607      	mov	r7, r0
   127d2:	4690      	mov	r8, r2
	if (msg == NULL) {
   127d4:	460c      	mov	r4, r1
   127d6:	b319      	cbz	r1, 12820 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   127d8:	2300      	movs	r3, #0
	ssize_t len = 0;
   127da:	461a      	mov	r2, r3
   127dc:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   127de:	4298      	cmp	r0, r3
   127e0:	d128      	bne.n	12834 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   127e2:	2a80      	cmp	r2, #128	; 0x80
   127e4:	d857      	bhi.n	12896 <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   127e6:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   127e8:	f04f 32ff 	mov.w	r2, #4294967295
   127ec:	f04f 33ff 	mov.w	r3, #4294967295
   127f0:	482a      	ldr	r0, [pc, #168]	; (1289c <nrf91_socket_offload_sendmsg+0xd0>)
   127f2:	f008 fb17 	bl	1ae24 <z_impl_k_mutex_lock>
		len = 0;
   127f6:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   127f8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 128a0 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   127fc:	68e3      	ldr	r3, [r4, #12]
   127fe:	42ab      	cmp	r3, r5
   12800:	d81f      	bhi.n	12842 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   12802:	6863      	ldr	r3, [r4, #4]
   12804:	4632      	mov	r2, r6
   12806:	9301      	str	r3, [sp, #4]
   12808:	6823      	ldr	r3, [r4, #0]
   1280a:	4638      	mov	r0, r7
   1280c:	9300      	str	r3, [sp, #0]
   1280e:	4924      	ldr	r1, [pc, #144]	; (128a0 <nrf91_socket_offload_sendmsg+0xd4>)
   12810:	4643      	mov	r3, r8
   12812:	f00d fbb3 	bl	1ff7c <nrf91_socket_offload_sendto>
   12816:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   12818:	4820      	ldr	r0, [pc, #128]	; (1289c <nrf91_socket_offload_sendmsg+0xd0>)
   1281a:	f008 fb7b 	bl	1af14 <z_impl_k_mutex_unlock>
		return ret;
   1281e:	e005      	b.n	1282c <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   12820:	f00d f9a5 	bl	1fb6e <z_errno>
   12824:	2316      	movs	r3, #22
		return -1;
   12826:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1282a:	6003      	str	r3, [r0, #0]
}
   1282c:	4628      	mov	r0, r5
   1282e:	b002      	add	sp, #8
   12830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   12834:	68a1      	ldr	r1, [r4, #8]
   12836:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1283a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1283c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1283e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   12840:	e7cd      	b.n	127de <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   12842:	68a1      	ldr	r1, [r4, #8]
   12844:	eb09 0006 	add.w	r0, r9, r6
   12848:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   1284c:	685a      	ldr	r2, [r3, #4]
   1284e:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   12852:	f00a fa00 	bl	1cc56 <memcpy>
			len += msg->msg_iov[i].iov_len;
   12856:	68a3      	ldr	r3, [r4, #8]
   12858:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1285c:	4453      	add	r3, sl
   1285e:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   12860:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   12862:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   12864:	e7ca      	b.n	127fc <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   12866:	68a1      	ldr	r1, [r4, #8]
   12868:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   1286c:	685a      	ldr	r2, [r3, #4]
   1286e:	b162      	cbz	r2, 1288a <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   12870:	6863      	ldr	r3, [r4, #4]
   12872:	4638      	mov	r0, r7
   12874:	9301      	str	r3, [sp, #4]
   12876:	6823      	ldr	r3, [r4, #0]
   12878:	9300      	str	r3, [sp, #0]
   1287a:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   1287e:	4643      	mov	r3, r8
   12880:	f00d fb7c 	bl	1ff7c <nrf91_socket_offload_sendto>
		if (ret < 0) {
   12884:	1e05      	subs	r5, r0, #0
   12886:	dbd1      	blt.n	1282c <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   12888:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   1288a:	3601      	adds	r6, #1
   1288c:	68e3      	ldr	r3, [r4, #12]
   1288e:	429e      	cmp	r6, r3
   12890:	d3e9      	bcc.n	12866 <nrf91_socket_offload_sendmsg+0x9a>
   12892:	464d      	mov	r5, r9
   12894:	e7ca      	b.n	1282c <nrf91_socket_offload_sendmsg+0x60>
   12896:	2600      	movs	r6, #0
	len = 0;
   12898:	46b1      	mov	r9, r6
   1289a:	e7f7      	b.n	1288c <nrf91_socket_offload_sendmsg+0xc0>
   1289c:	200206ac 	.word	0x200206ac
   128a0:	20021ced 	.word	0x20021ced

000128a4 <nrf91_socket_offload_accept>:
{
   128a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128a8:	b08a      	sub	sp, #40	; 0x28
   128aa:	4607      	mov	r7, r0
   128ac:	460c      	mov	r4, r1
   128ae:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   128b0:	f7fa f97c 	bl	cbac <z_reserve_fd>
   128b4:	4606      	mov	r6, r0
	if (fd < 0) {
   128b6:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   128b8:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   128bc:	da05      	bge.n	128ca <nrf91_socket_offload_accept+0x26>
	return -1;
   128be:	f04f 36ff 	mov.w	r6, #4294967295
}
   128c2:	4630      	mov	r0, r6
   128c4:	b00a      	add	sp, #40	; 0x28
   128c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   128ca:	b31c      	cbz	r4, 12914 <nrf91_socket_offload_accept+0x70>
   128cc:	b32d      	cbz	r5, 1291a <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   128ce:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   128d0:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   128d2:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   128d4:	bf0c      	ite	eq
   128d6:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   128d8:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   128da:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   128dc:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   128de:	4639      	mov	r1, r7
   128e0:	f006 faf4 	bl	18ecc <nrf_accept>
	if (new_sd < 0) {
   128e4:	f1b0 0800 	subs.w	r8, r0, #0
   128e8:	dbe9      	blt.n	128be <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   128ea:	b164      	cbz	r4, 12906 <nrf91_socket_offload_accept+0x62>
   128ec:	b15d      	cbz	r5, 12906 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   128ee:	687b      	ldr	r3, [r7, #4]
   128f0:	2b02      	cmp	r3, #2
   128f2:	d115      	bne.n	12920 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   128f4:	2308      	movs	r3, #8
   128f6:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   128f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   128fc:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   128fe:	2301      	movs	r3, #1
   12900:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   12902:	9b04      	ldr	r3, [sp, #16]
   12904:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   12906:	4630      	mov	r0, r6
   12908:	4a10      	ldr	r2, [pc, #64]	; (1294c <nrf91_socket_offload_accept+0xa8>)
   1290a:	f108 0101 	add.w	r1, r8, #1
   1290e:	f7fa f971 	bl	cbf4 <z_finalize_fd>
	return fd;
   12912:	e7d6      	b.n	128c2 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   12914:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   12916:	4627      	mov	r7, r4
   12918:	e7e1      	b.n	128de <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1291a:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1291c:	462f      	mov	r7, r5
   1291e:	e7de      	b.n	128de <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   12920:	2b0a      	cmp	r3, #10
   12922:	d10f      	bne.n	12944 <nrf91_socket_offload_accept+0xa0>
			*addrlen = sizeof(struct sockaddr_in6);
   12924:	2318      	movs	r3, #24
   12926:	602b      	str	r3, [r5, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   12928:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	ptr->sin6_family = AF_INET6;
   1292c:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1292e:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   12930:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   12932:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   12934:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   12938:	a905      	add	r1, sp, #20
   1293a:	f00a f98c 	bl	1cc56 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1293e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12940:	7523      	strb	r3, [r4, #20]
}
   12942:	e7e0      	b.n	12906 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   12944:	4630      	mov	r0, r6
   12946:	f7fa f95f 	bl	cc08 <z_free_fd>
   1294a:	e7b8      	b.n	128be <nrf91_socket_offload_accept+0x1a>
   1294c:	00020da4 	.word	0x00020da4

00012950 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   12950:	b508      	push	{r3, lr}
	z_impl_log_panic();
   12952:	f7fa fddd 	bl	d510 <z_impl_log_panic>
   12956:	4b06      	ldr	r3, [pc, #24]	; (12970 <k_sys_fatal_error_handler+0x20>)
   12958:	4906      	ldr	r1, [pc, #24]	; (12974 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1295a:	4807      	ldr	r0, [pc, #28]	; (12978 <k_sys_fatal_error_handler+0x28>)
   1295c:	1ac9      	subs	r1, r1, r3
   1295e:	08c9      	lsrs	r1, r1, #3
   12960:	0189      	lsls	r1, r1, #6
   12962:	f041 0101 	orr.w	r1, r1, #1
   12966:	f009 fcfe 	bl	1c366 <log_0>
	sys_arch_reboot(0);
   1296a:	2000      	movs	r0, #0
   1296c:	f7fb fe9a 	bl	e6a4 <sys_arch_reboot>

	CODE_UNREACHABLE;
   12970:	00020b54 	.word	0x00020b54
   12974:	00020b6c 	.word	0x00020b6c
   12978:	00021a24 	.word	0x00021a24

0001297c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   1297c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12980:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   12982:	4c21      	ldr	r4, [pc, #132]	; (12a08 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   12984:	4e21      	ldr	r6, [pc, #132]	; (12a0c <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12986:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   1298a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 12a14 <check_ext_api_requests+0x98>
{
   1298e:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12990:	45a8      	cmp	r8, r5
   12992:	d803      	bhi.n	1299c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   12994:	2000      	movs	r0, #0
   12996:	b005      	add	sp, #20
   12998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   1299c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1299e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   129a2:	681f      	ldr	r7, [r3, #0]
   129a4:	ab01      	add	r3, sp, #4
   129a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   129aa:	220c      	movs	r2, #12
   129ac:	4619      	mov	r1, r3
   129ae:	4638      	mov	r0, r7
   129b0:	f00a f941 	bl	1cc36 <memcmp>
   129b4:	b990      	cbnz	r0, 129dc <check_ext_api_requests+0x60>
   129b6:	b18f      	cbz	r7, 129dc <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   129b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   129ba:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   129bc:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   129be:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   129c0:	4291      	cmp	r1, r2
   129c2:	d10b      	bne.n	129dc <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   129c4:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   129c6:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   129c8:	4291      	cmp	r1, r2
   129ca:	d807      	bhi.n	129dc <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   129cc:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   129ce:	4291      	cmp	r1, r2
   129d0:	d904      	bls.n	129dc <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   129d2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   129d4:	695b      	ldr	r3, [r3, #20]
   129d6:	ea32 0303 	bics.w	r3, r2, r3
   129da:	d00a      	beq.n	129f2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   129dc:	6a27      	ldr	r7, [r4, #32]
   129de:	b167      	cbz	r7, 129fa <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   129e0:	480b      	ldr	r0, [pc, #44]	; (12a10 <check_ext_api_requests+0x94>)
   129e2:	f009 f9de 	bl	1bda2 <printk>
			k_panic();
   129e6:	4040      	eors	r0, r0
   129e8:	f380 8811 	msr	BASEPRI, r0
   129ec:	f04f 0004 	mov.w	r0, #4
   129f0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   129f2:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   129f4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   129f6:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   129f8:	e7ca      	b.n	12990 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   129fa:	4648      	mov	r0, r9
   129fc:	f009 f9d1 	bl	1bda2 <printk>
			*ext_api_req->ext_api = NULL;
   12a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12a02:	601f      	str	r7, [r3, #0]
   12a04:	e7f5      	b.n	129f2 <check_ext_api_requests+0x76>
   12a06:	bf00      	nop
   12a08:	0000c23c 	.word	0x0000c23c
   12a0c:	00020bec 	.word	0x00020bec
   12a10:	00021a41 	.word	0x00021a41
   12a14:	00021a6a 	.word	0x00021a6a

00012a18 <packet_free_cb>:
   12a18:	b510      	push	{r4, lr}
   12a1a:	4604      	mov	r4, r0
   12a1c:	6800      	ldr	r0, [r0, #0]
   12a1e:	f004 fc9b 	bl	17358 <rpc_logobj_client_data_free>
   12a22:	68a0      	ldr	r0, [r4, #8]
   12a24:	b118      	cbz	r0, 12a2e <packet_free_cb+0x16>
   12a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12a2a:	f007 ba1d 	b.w	19e68 <nrf_free>
   12a2e:	bd10      	pop	{r4, pc}

00012a30 <logobj_event_handler>:
   12a30:	b530      	push	{r4, r5, lr}
   12a32:	4b3b      	ldr	r3, [pc, #236]	; (12b20 <logobj_event_handler+0xf0>)
   12a34:	b085      	sub	sp, #20
   12a36:	681d      	ldr	r5, [r3, #0]
   12a38:	2d00      	cmp	r5, #0
   12a3a:	d04c      	beq.n	12ad6 <logobj_event_handler+0xa6>
   12a3c:	f248 0302 	movw	r3, #32770	; 0x8002
   12a40:	4299      	cmp	r1, r3
   12a42:	d053      	beq.n	12aec <logobj_event_handler+0xbc>
   12a44:	d91c      	bls.n	12a80 <logobj_event_handler+0x50>
   12a46:	f248 0303 	movw	r3, #32771	; 0x8003
   12a4a:	4299      	cmp	r1, r3
   12a4c:	d05a      	beq.n	12b04 <logobj_event_handler+0xd4>
   12a4e:	f249 0301 	movw	r3, #36865	; 0x9001
   12a52:	4299      	cmp	r1, r3
   12a54:	d147      	bne.n	12ae6 <logobj_event_handler+0xb6>
   12a56:	2400      	movs	r4, #0
   12a58:	6843      	ldr	r3, [r0, #4]
   12a5a:	6802      	ldr	r2, [r0, #0]
   12a5c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   12a60:	e9cd 2300 	strd	r2, r3, [sp]
   12a64:	69e8      	ldr	r0, [r5, #28]
   12a66:	4669      	mov	r1, sp
   12a68:	6803      	ldr	r3, [r0, #0]
   12a6a:	685b      	ldr	r3, [r3, #4]
   12a6c:	4798      	blx	r3
   12a6e:	3001      	adds	r0, #1
   12a70:	d04e      	beq.n	12b10 <logobj_event_handler+0xe0>
   12a72:	4620      	mov	r0, r4
   12a74:	682b      	ldr	r3, [r5, #0]
   12a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12a7a:	602b      	str	r3, [r5, #0]
   12a7c:	b005      	add	sp, #20
   12a7e:	bd30      	pop	{r4, r5, pc}
   12a80:	f248 0301 	movw	r3, #32769	; 0x8001
   12a84:	4299      	cmp	r1, r3
   12a86:	d12e      	bne.n	12ae6 <logobj_event_handler+0xb6>
   12a88:	68c3      	ldr	r3, [r0, #12]
   12a8a:	2b00      	cmp	r3, #0
   12a8c:	d135      	bne.n	12afa <logobj_event_handler+0xca>
   12a8e:	6828      	ldr	r0, [r5, #0]
   12a90:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   12a94:	d03e      	beq.n	12b14 <logobj_event_handler+0xe4>
   12a96:	682b      	ldr	r3, [r5, #0]
   12a98:	b29b      	uxth	r3, r3
   12a9a:	2b01      	cmp	r3, #1
   12a9c:	d105      	bne.n	12aaa <logobj_event_handler+0x7a>
   12a9e:	682b      	ldr	r3, [r5, #0]
   12aa0:	0c1b      	lsrs	r3, r3, #16
   12aa2:	041b      	lsls	r3, r3, #16
   12aa4:	f043 0302 	orr.w	r3, r3, #2
   12aa8:	602b      	str	r3, [r5, #0]
   12aaa:	4b1e      	ldr	r3, [pc, #120]	; (12b24 <logobj_event_handler+0xf4>)
   12aac:	781a      	ldrb	r2, [r3, #0]
   12aae:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   12ab2:	2a00      	cmp	r2, #0
   12ab4:	d031      	beq.n	12b1a <logobj_event_handler+0xea>
   12ab6:	4a1c      	ldr	r2, [pc, #112]	; (12b28 <logobj_event_handler+0xf8>)
   12ab8:	7811      	ldrb	r1, [r2, #0]
   12aba:	b909      	cbnz	r1, 12ac0 <logobj_event_handler+0x90>
   12abc:	2101      	movs	r1, #1
   12abe:	7011      	strb	r1, [r2, #0]
   12ac0:	2000      	movs	r0, #0
   12ac2:	7018      	strb	r0, [r3, #0]
   12ac4:	682b      	ldr	r3, [r5, #0]
   12ac6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12aca:	602b      	str	r3, [r5, #0]
   12acc:	682b      	ldr	r3, [r5, #0]
   12ace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   12ad2:	602b      	str	r3, [r5, #0]
   12ad4:	e7d2      	b.n	12a7c <logobj_event_handler+0x4c>
   12ad6:	6800      	ldr	r0, [r0, #0]
   12ad8:	2800      	cmp	r0, #0
   12ada:	d0cf      	beq.n	12a7c <logobj_event_handler+0x4c>
   12adc:	f004 fc3c 	bl	17358 <rpc_logobj_client_data_free>
   12ae0:	4628      	mov	r0, r5
   12ae2:	b005      	add	sp, #20
   12ae4:	bd30      	pop	{r4, r5, pc}
   12ae6:	2000      	movs	r0, #0
   12ae8:	b005      	add	sp, #20
   12aea:	bd30      	pop	{r4, r5, pc}
   12aec:	682b      	ldr	r3, [r5, #0]
   12aee:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   12af2:	d00b      	beq.n	12b0c <logobj_event_handler+0xdc>
   12af4:	68c0      	ldr	r0, [r0, #12]
   12af6:	2800      	cmp	r0, #0
   12af8:	d0e4      	beq.n	12ac4 <logobj_event_handler+0x94>
   12afa:	230e      	movs	r3, #14
   12afc:	2000      	movs	r0, #0
   12afe:	606b      	str	r3, [r5, #4]
   12b00:	b005      	add	sp, #20
   12b02:	bd30      	pop	{r4, r5, pc}
   12b04:	68c3      	ldr	r3, [r0, #12]
   12b06:	2b01      	cmp	r3, #1
   12b08:	d1a5      	bne.n	12a56 <logobj_event_handler+0x26>
   12b0a:	e7f6      	b.n	12afa <logobj_event_handler+0xca>
   12b0c:	4618      	mov	r0, r3
   12b0e:	e7b5      	b.n	12a7c <logobj_event_handler+0x4c>
   12b10:	2002      	movs	r0, #2
   12b12:	e7b3      	b.n	12a7c <logobj_event_handler+0x4c>
   12b14:	230e      	movs	r3, #14
   12b16:	606b      	str	r3, [r5, #4]
   12b18:	e7b0      	b.n	12a7c <logobj_event_handler+0x4c>
   12b1a:	4a03      	ldr	r2, [pc, #12]	; (12b28 <logobj_event_handler+0xf8>)
   12b1c:	7011      	strb	r1, [r2, #0]
   12b1e:	e7cf      	b.n	12ac0 <logobj_event_handler+0x90>
   12b20:	20020ef8 	.word	0x20020ef8
   12b24:	20021d6d 	.word	0x20021d6d
   12b28:	20021d6e 	.word	0x20021d6e

00012b2c <logobj_interface_init>:
   12b2c:	2300      	movs	r3, #0
   12b2e:	b510      	push	{r4, lr}
   12b30:	4808      	ldr	r0, [pc, #32]	; (12b54 <logobj_interface_init+0x28>)
   12b32:	4c09      	ldr	r4, [pc, #36]	; (12b58 <logobj_interface_init+0x2c>)
   12b34:	4909      	ldr	r1, [pc, #36]	; (12b5c <logobj_interface_init+0x30>)
   12b36:	4a0a      	ldr	r2, [pc, #40]	; (12b60 <logobj_interface_init+0x34>)
   12b38:	7023      	strb	r3, [r4, #0]
   12b3a:	6003      	str	r3, [r0, #0]
   12b3c:	700b      	strb	r3, [r1, #0]
   12b3e:	6013      	str	r3, [r2, #0]
   12b40:	f004 fbce 	bl	172e0 <rpc_logobj_client_init>
   12b44:	b918      	cbnz	r0, 12b4e <logobj_interface_init+0x22>
   12b46:	2201      	movs	r2, #1
   12b48:	4b06      	ldr	r3, [pc, #24]	; (12b64 <logobj_interface_init+0x38>)
   12b4a:	701a      	strb	r2, [r3, #0]
   12b4c:	bd10      	pop	{r4, pc}
   12b4e:	f04f 30ff 	mov.w	r0, #4294967295
   12b52:	bd10      	pop	{r4, pc}
   12b54:	20020ef8 	.word	0x20020ef8
   12b58:	20021d6e 	.word	0x20021d6e
   12b5c:	20021d6d 	.word	0x20021d6d
   12b60:	20020ef4 	.word	0x20020ef4
   12b64:	20021d6f 	.word	0x20021d6f

00012b68 <logobj_interface_open>:
   12b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b6c:	2400      	movs	r4, #0
   12b6e:	4b5b      	ldr	r3, [pc, #364]	; (12cdc <logobj_interface_open+0x174>)
   12b70:	b084      	sub	sp, #16
   12b72:	781b      	ldrb	r3, [r3, #0]
   12b74:	9401      	str	r4, [sp, #4]
   12b76:	2b00      	cmp	r3, #0
   12b78:	f000 809f 	beq.w	12cba <logobj_interface_open+0x152>
   12b7c:	2866      	cmp	r0, #102	; 0x66
   12b7e:	4680      	mov	r8, r0
   12b80:	f040 808f 	bne.w	12ca2 <logobj_interface_open+0x13a>
   12b84:	2902      	cmp	r1, #2
   12b86:	4689      	mov	r9, r1
   12b88:	f040 808b 	bne.w	12ca2 <logobj_interface_open+0x13a>
   12b8c:	f240 2305 	movw	r3, #517	; 0x205
   12b90:	429a      	cmp	r2, r3
   12b92:	4692      	mov	sl, r2
   12b94:	f040 8085 	bne.w	12ca2 <logobj_interface_open+0x13a>
   12b98:	4f51      	ldr	r7, [pc, #324]	; (12ce0 <logobj_interface_open+0x178>)
   12b9a:	683d      	ldr	r5, [r7, #0]
   12b9c:	2d00      	cmp	r5, #0
   12b9e:	f040 8086 	bne.w	12cae <logobj_interface_open+0x146>
   12ba2:	4a50      	ldr	r2, [pc, #320]	; (12ce4 <logobj_interface_open+0x17c>)
   12ba4:	a801      	add	r0, sp, #4
   12ba6:	f007 fc87 	bl	1a4b8 <interface_socket_allocate>
   12baa:	9b01      	ldr	r3, [sp, #4]
   12bac:	4606      	mov	r6, r0
   12bae:	2b00      	cmp	r3, #0
   12bb0:	f000 808d 	beq.w	12cce <logobj_interface_open+0x166>
   12bb4:	4629      	mov	r1, r5
   12bb6:	2204      	movs	r2, #4
   12bb8:	484b      	ldr	r0, [pc, #300]	; (12ce8 <logobj_interface_open+0x180>)
   12bba:	603b      	str	r3, [r7, #0]
   12bbc:	f00a f876 	bl	1ccac <memset>
   12bc0:	9c01      	ldr	r4, [sp, #4]
   12bc2:	4629      	mov	r1, r5
   12bc4:	e9c4 8903 	strd	r8, r9, [r4, #12]
   12bc8:	f8c4 a014 	str.w	sl, [r4, #20]
   12bcc:	a802      	add	r0, sp, #8
   12bce:	f004 fb8d 	bl	172ec <rpc_logobj_client_request_alloc>
   12bd2:	2800      	cmp	r0, #0
   12bd4:	d142      	bne.n	12c5c <logobj_interface_open+0xf4>
   12bd6:	2201      	movs	r2, #1
   12bd8:	2104      	movs	r1, #4
   12bda:	9b02      	ldr	r3, [sp, #8]
   12bdc:	4d43      	ldr	r5, [pc, #268]	; (12cec <logobj_interface_open+0x184>)
   12bde:	7358      	strb	r0, [r3, #13]
   12be0:	7398      	strb	r0, [r3, #14]
   12be2:	73d8      	strb	r0, [r3, #15]
   12be4:	7258      	strb	r0, [r3, #9]
   12be6:	7298      	strb	r0, [r3, #10]
   12be8:	72d8      	strb	r0, [r3, #11]
   12bea:	7219      	strb	r1, [r3, #8]
   12bec:	702a      	strb	r2, [r5, #0]
   12bee:	731a      	strb	r2, [r3, #12]
   12bf0:	6822      	ldr	r2, [r4, #0]
   12bf2:	4618      	mov	r0, r3
   12bf4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   12bf8:	6022      	str	r2, [r4, #0]
   12bfa:	f247 0101 	movw	r1, #28673	; 0x7001
   12bfe:	f004 fb8d 	bl	1731c <rpc_logobj_client_request_send>
   12c02:	bb68      	cbnz	r0, 12c60 <logobj_interface_open+0xf8>
   12c04:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12c06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12c0a:	2900      	cmp	r1, #0
   12c0c:	bf08      	it	eq
   12c0e:	f04f 31ff 	moveq.w	r1, #4294967295
   12c12:	ab04      	add	r3, sp, #16
   12c14:	f843 1d04 	str.w	r1, [r3, #-4]!
   12c18:	4630      	mov	r0, r6
   12c1a:	4611      	mov	r1, r2
   12c1c:	f007 fcfe 	bl	1a61c <interface_socket_wait>
   12c20:	4604      	mov	r4, r0
   12c22:	b310      	cbz	r0, 12c6a <logobj_interface_open+0x102>
   12c24:	9a01      	ldr	r2, [sp, #4]
   12c26:	2e00      	cmp	r6, #0
   12c28:	6813      	ldr	r3, [r2, #0]
   12c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12c2e:	6013      	str	r3, [r2, #0]
   12c30:	9a01      	ldr	r2, [sp, #4]
   12c32:	6813      	ldr	r3, [r2, #0]
   12c34:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12c38:	6013      	str	r3, [r2, #0]
   12c3a:	9a01      	ldr	r2, [sp, #4]
   12c3c:	6813      	ldr	r3, [r2, #0]
   12c3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12c42:	6013      	str	r3, [r2, #0]
   12c44:	da3f      	bge.n	12cc6 <logobj_interface_open+0x15e>
   12c46:	2300      	movs	r3, #0
   12c48:	4620      	mov	r0, r4
   12c4a:	603b      	str	r3, [r7, #0]
   12c4c:	f04f 36ff 	mov.w	r6, #4294967295
   12c50:	f7ff fac2 	bl	121d8 <bsd_os_errno_set>
   12c54:	4630      	mov	r0, r6
   12c56:	b004      	add	sp, #16
   12c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c5c:	240c      	movs	r4, #12
   12c5e:	e7e1      	b.n	12c24 <logobj_interface_open+0xbc>
   12c60:	9802      	ldr	r0, [sp, #8]
   12c62:	f004 fb71 	bl	17348 <rpc_logobj_client_message_free>
   12c66:	2405      	movs	r4, #5
   12c68:	e7dc      	b.n	12c24 <logobj_interface_open+0xbc>
   12c6a:	4630      	mov	r0, r6
   12c6c:	f007 fd56 	bl	1a71c <interface_socket_from_handle_get>
   12c70:	b120      	cbz	r0, 12c7c <logobj_interface_open+0x114>
   12c72:	6844      	ldr	r4, [r0, #4]
   12c74:	b114      	cbz	r4, 12c7c <logobj_interface_open+0x114>
   12c76:	2300      	movs	r3, #0
   12c78:	6043      	str	r3, [r0, #4]
   12c7a:	e7d3      	b.n	12c24 <logobj_interface_open+0xbc>
   12c7c:	4630      	mov	r0, r6
   12c7e:	9a01      	ldr	r2, [sp, #4]
   12c80:	6813      	ldr	r3, [r2, #0]
   12c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12c86:	6013      	str	r3, [r2, #0]
   12c88:	9a01      	ldr	r2, [sp, #4]
   12c8a:	6813      	ldr	r3, [r2, #0]
   12c8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12c90:	6013      	str	r3, [r2, #0]
   12c92:	9a01      	ldr	r2, [sp, #4]
   12c94:	6813      	ldr	r3, [r2, #0]
   12c96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12c9a:	6013      	str	r3, [r2, #0]
   12c9c:	b004      	add	sp, #16
   12c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12ca2:	2016      	movs	r0, #22
   12ca4:	f7ff fa98 	bl	121d8 <bsd_os_errno_set>
   12ca8:	f04f 36ff 	mov.w	r6, #4294967295
   12cac:	e7d2      	b.n	12c54 <logobj_interface_open+0xec>
   12cae:	2001      	movs	r0, #1
   12cb0:	f7ff fa92 	bl	121d8 <bsd_os_errno_set>
   12cb4:	f04f 36ff 	mov.w	r6, #4294967295
   12cb8:	e7cc      	b.n	12c54 <logobj_interface_open+0xec>
   12cba:	2005      	movs	r0, #5
   12cbc:	f7ff fa8c 	bl	121d8 <bsd_os_errno_set>
   12cc0:	f04f 36ff 	mov.w	r6, #4294967295
   12cc4:	e7c6      	b.n	12c54 <logobj_interface_open+0xec>
   12cc6:	4630      	mov	r0, r6
   12cc8:	f007 fc5a 	bl	1a580 <interface_socket_free>
   12ccc:	e7bb      	b.n	12c46 <logobj_interface_open+0xde>
   12cce:	2018      	movs	r0, #24
   12cd0:	f7ff fa82 	bl	121d8 <bsd_os_errno_set>
   12cd4:	f04f 36ff 	mov.w	r6, #4294967295
   12cd8:	e7bc      	b.n	12c54 <logobj_interface_open+0xec>
   12cda:	bf00      	nop
   12cdc:	20021d6f 	.word	0x20021d6f
   12ce0:	20020ef8 	.word	0x20020ef8
   12ce4:	00012a19 	.word	0x00012a19
   12ce8:	20020ef4 	.word	0x20020ef4
   12cec:	20021d6d 	.word	0x20021d6d

00012cf0 <logobj_interface_read>:
   12cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12cf4:	b087      	sub	sp, #28
   12cf6:	2900      	cmp	r1, #0
   12cf8:	d06b      	beq.n	12dd2 <logobj_interface_read+0xe2>
   12cfa:	2a00      	cmp	r2, #0
   12cfc:	4617      	mov	r7, r2
   12cfe:	dd68      	ble.n	12dd2 <logobj_interface_read+0xe2>
   12d00:	461d      	mov	r5, r3
   12d02:	4680      	mov	r8, r0
   12d04:	460e      	mov	r6, r1
   12d06:	f007 fd09 	bl	1a71c <interface_socket_from_handle_get>
   12d0a:	4604      	mov	r4, r0
   12d0c:	2800      	cmp	r0, #0
   12d0e:	d066      	beq.n	12dde <logobj_interface_read+0xee>
   12d10:	bb4d      	cbnz	r5, 12d66 <logobj_interface_read+0x76>
   12d12:	69e0      	ldr	r0, [r4, #28]
   12d14:	07aa      	lsls	r2, r5, #30
   12d16:	6803      	ldr	r3, [r0, #0]
   12d18:	68db      	ldr	r3, [r3, #12]
   12d1a:	d52d      	bpl.n	12d78 <logobj_interface_read+0x88>
   12d1c:	4798      	blx	r3
   12d1e:	3001      	adds	r0, #1
   12d20:	d047      	beq.n	12db2 <logobj_interface_read+0xc2>
   12d22:	6823      	ldr	r3, [r4, #0]
   12d24:	69e0      	ldr	r0, [r4, #28]
   12d26:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   12d2a:	d044      	beq.n	12db6 <logobj_interface_read+0xc6>
   12d2c:	2100      	movs	r1, #0
   12d2e:	6823      	ldr	r3, [r4, #0]
   12d30:	462a      	mov	r2, r5
   12d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12d36:	6023      	str	r3, [r4, #0]
   12d38:	e9cd 1104 	strd	r1, r1, [sp, #16]
   12d3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   12d40:	6803      	ldr	r3, [r0, #0]
   12d42:	a902      	add	r1, sp, #8
   12d44:	689b      	ldr	r3, [r3, #8]
   12d46:	4798      	blx	r3
   12d48:	4605      	mov	r5, r0
   12d4a:	69e0      	ldr	r0, [r4, #28]
   12d4c:	6803      	ldr	r3, [r0, #0]
   12d4e:	68db      	ldr	r3, [r3, #12]
   12d50:	4798      	blx	r3
   12d52:	3001      	adds	r0, #1
   12d54:	d003      	beq.n	12d5e <logobj_interface_read+0x6e>
   12d56:	6823      	ldr	r3, [r4, #0]
   12d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12d5c:	6023      	str	r3, [r4, #0]
   12d5e:	4628      	mov	r0, r5
   12d60:	b007      	add	sp, #28
   12d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d66:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   12d6a:	d1d2      	bne.n	12d12 <logobj_interface_read+0x22>
   12d6c:	202d      	movs	r0, #45	; 0x2d
   12d6e:	f7ff fa33 	bl	121d8 <bsd_os_errno_set>
   12d72:	f04f 35ff 	mov.w	r5, #4294967295
   12d76:	e7f2      	b.n	12d5e <logobj_interface_read+0x6e>
   12d78:	6822      	ldr	r2, [r4, #0]
   12d7a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   12d7e:	d1cd      	bne.n	12d1c <logobj_interface_read+0x2c>
   12d80:	4798      	blx	r3
   12d82:	1c43      	adds	r3, r0, #1
   12d84:	d1cd      	bne.n	12d22 <logobj_interface_read+0x32>
   12d86:	6a22      	ldr	r2, [r4, #32]
   12d88:	ab06      	add	r3, sp, #24
   12d8a:	2a00      	cmp	r2, #0
   12d8c:	bf18      	it	ne
   12d8e:	4610      	movne	r0, r2
   12d90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12d94:	f843 0d14 	str.w	r0, [r3, #-20]!
   12d98:	4611      	mov	r1, r2
   12d9a:	4640      	mov	r0, r8
   12d9c:	f007 fc3e 	bl	1a61c <interface_socket_wait>
   12da0:	b158      	cbz	r0, 12dba <logobj_interface_read+0xca>
   12da2:	f04f 35ff 	mov.w	r5, #4294967295
   12da6:	f7ff fa17 	bl	121d8 <bsd_os_errno_set>
   12daa:	4628      	mov	r0, r5
   12dac:	b007      	add	sp, #28
   12dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12db2:	2023      	movs	r0, #35	; 0x23
   12db4:	e7f5      	b.n	12da2 <logobj_interface_read+0xb2>
   12db6:	461d      	mov	r5, r3
   12db8:	e7c8      	b.n	12d4c <logobj_interface_read+0x5c>
   12dba:	4640      	mov	r0, r8
   12dbc:	f007 fcae 	bl	1a71c <interface_socket_from_handle_get>
   12dc0:	4603      	mov	r3, r0
   12dc2:	2800      	cmp	r0, #0
   12dc4:	d0ad      	beq.n	12d22 <logobj_interface_read+0x32>
   12dc6:	6840      	ldr	r0, [r0, #4]
   12dc8:	2800      	cmp	r0, #0
   12dca:	d0aa      	beq.n	12d22 <logobj_interface_read+0x32>
   12dcc:	f8c3 9004 	str.w	r9, [r3, #4]
   12dd0:	e7e7      	b.n	12da2 <logobj_interface_read+0xb2>
   12dd2:	2016      	movs	r0, #22
   12dd4:	f7ff fa00 	bl	121d8 <bsd_os_errno_set>
   12dd8:	f04f 35ff 	mov.w	r5, #4294967295
   12ddc:	e7bf      	b.n	12d5e <logobj_interface_read+0x6e>
   12dde:	2009      	movs	r0, #9
   12de0:	f7ff f9fa 	bl	121d8 <bsd_os_errno_set>
   12de4:	f04f 35ff 	mov.w	r5, #4294967295
   12de8:	e7b9      	b.n	12d5e <logobj_interface_read+0x6e>
   12dea:	bf00      	nop

00012dec <logobj_interface_write>:
   12dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12df0:	b082      	sub	sp, #8
   12df2:	2900      	cmp	r1, #0
   12df4:	d06b      	beq.n	12ece <logobj_interface_write+0xe2>
   12df6:	2a04      	cmp	r2, #4
   12df8:	d169      	bne.n	12ece <logobj_interface_write+0xe2>
   12dfa:	461f      	mov	r7, r3
   12dfc:	4606      	mov	r6, r0
   12dfe:	460d      	mov	r5, r1
   12e00:	f007 fc8c 	bl	1a71c <interface_socket_from_handle_get>
   12e04:	4604      	mov	r4, r0
   12e06:	2800      	cmp	r0, #0
   12e08:	d074      	beq.n	12ef4 <logobj_interface_write+0x108>
   12e0a:	b1e7      	cbz	r7, 12e46 <logobj_interface_write+0x5a>
   12e0c:	07b8      	lsls	r0, r7, #30
   12e0e:	d56b      	bpl.n	12ee8 <logobj_interface_write+0xfc>
   12e10:	6823      	ldr	r3, [r4, #0]
   12e12:	039b      	lsls	r3, r3, #14
   12e14:	d564      	bpl.n	12ee0 <logobj_interface_write+0xf4>
   12e16:	2700      	movs	r7, #0
   12e18:	6823      	ldr	r3, [r4, #0]
   12e1a:	2100      	movs	r1, #0
   12e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12e20:	6023      	str	r3, [r4, #0]
   12e22:	4668      	mov	r0, sp
   12e24:	f8d5 8000 	ldr.w	r8, [r5]
   12e28:	f004 fa60 	bl	172ec <rpc_logobj_client_request_alloc>
   12e2c:	b198      	cbz	r0, 12e56 <logobj_interface_write+0x6a>
   12e2e:	200c      	movs	r0, #12
   12e30:	6823      	ldr	r3, [r4, #0]
   12e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12e36:	6023      	str	r3, [r4, #0]
   12e38:	f7ff f9ce 	bl	121d8 <bsd_os_errno_set>
   12e3c:	f04f 30ff 	mov.w	r0, #4294967295
   12e40:	b002      	add	sp, #8
   12e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e46:	6803      	ldr	r3, [r0, #0]
   12e48:	00d9      	lsls	r1, r3, #3
   12e4a:	d4e1      	bmi.n	12e10 <logobj_interface_write+0x24>
   12e4c:	6803      	ldr	r3, [r0, #0]
   12e4e:	039a      	lsls	r2, r3, #14
   12e50:	d548      	bpl.n	12ee4 <logobj_interface_write+0xf8>
   12e52:	2701      	movs	r7, #1
   12e54:	e7e0      	b.n	12e18 <logobj_interface_write+0x2c>
   12e56:	2504      	movs	r5, #4
   12e58:	9b00      	ldr	r3, [sp, #0]
   12e5a:	f247 0103 	movw	r1, #28675	; 0x7003
   12e5e:	f8c3 800c 	str.w	r8, [r3, #12]
   12e62:	7258      	strb	r0, [r3, #9]
   12e64:	7298      	strb	r0, [r3, #10]
   12e66:	72d8      	strb	r0, [r3, #11]
   12e68:	721d      	strb	r5, [r3, #8]
   12e6a:	4618      	mov	r0, r3
   12e6c:	f004 fa56 	bl	1731c <rpc_logobj_client_request_send>
   12e70:	4680      	mov	r8, r0
   12e72:	bb18      	cbnz	r0, 12ebc <logobj_interface_write+0xd0>
   12e74:	b1d7      	cbz	r7, 12eac <logobj_interface_write+0xc0>
   12e76:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12e78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12e7c:	2900      	cmp	r1, #0
   12e7e:	bf08      	it	eq
   12e80:	f04f 31ff 	moveq.w	r1, #4294967295
   12e84:	ab02      	add	r3, sp, #8
   12e86:	f843 1d04 	str.w	r1, [r3, #-4]!
   12e8a:	4630      	mov	r0, r6
   12e8c:	4611      	mov	r1, r2
   12e8e:	f007 fbc5 	bl	1a61c <interface_socket_wait>
   12e92:	b120      	cbz	r0, 12e9e <logobj_interface_write+0xb2>
   12e94:	6823      	ldr	r3, [r4, #0]
   12e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12e9a:	6023      	str	r3, [r4, #0]
   12e9c:	e7cc      	b.n	12e38 <logobj_interface_write+0x4c>
   12e9e:	4630      	mov	r0, r6
   12ea0:	f007 fc3c 	bl	1a71c <interface_socket_from_handle_get>
   12ea4:	4603      	mov	r3, r0
   12ea6:	b108      	cbz	r0, 12eac <logobj_interface_write+0xc0>
   12ea8:	6840      	ldr	r0, [r0, #4]
   12eaa:	b9b0      	cbnz	r0, 12eda <logobj_interface_write+0xee>
   12eac:	4628      	mov	r0, r5
   12eae:	6823      	ldr	r3, [r4, #0]
   12eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12eb4:	6023      	str	r3, [r4, #0]
   12eb6:	b002      	add	sp, #8
   12eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ebc:	9800      	ldr	r0, [sp, #0]
   12ebe:	f004 fa43 	bl	17348 <rpc_logobj_client_message_free>
   12ec2:	6823      	ldr	r3, [r4, #0]
   12ec4:	2005      	movs	r0, #5
   12ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12eca:	6023      	str	r3, [r4, #0]
   12ecc:	e7b4      	b.n	12e38 <logobj_interface_write+0x4c>
   12ece:	2016      	movs	r0, #22
   12ed0:	f7ff f982 	bl	121d8 <bsd_os_errno_set>
   12ed4:	f04f 30ff 	mov.w	r0, #4294967295
   12ed8:	e7b2      	b.n	12e40 <logobj_interface_write+0x54>
   12eda:	f8c3 8004 	str.w	r8, [r3, #4]
   12ede:	e7d9      	b.n	12e94 <logobj_interface_write+0xa8>
   12ee0:	2073      	movs	r0, #115	; 0x73
   12ee2:	e7a9      	b.n	12e38 <logobj_interface_write+0x4c>
   12ee4:	2009      	movs	r0, #9
   12ee6:	e7a7      	b.n	12e38 <logobj_interface_write+0x4c>
   12ee8:	202d      	movs	r0, #45	; 0x2d
   12eea:	f7ff f975 	bl	121d8 <bsd_os_errno_set>
   12eee:	f04f 30ff 	mov.w	r0, #4294967295
   12ef2:	e7a5      	b.n	12e40 <logobj_interface_write+0x54>
   12ef4:	2009      	movs	r0, #9
   12ef6:	f7ff f96f 	bl	121d8 <bsd_os_errno_set>
   12efa:	f04f 30ff 	mov.w	r0, #4294967295
   12efe:	e79f      	b.n	12e40 <logobj_interface_write+0x54>

00012f00 <logobj_interface_setopt>:
   12f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f02:	2901      	cmp	r1, #1
   12f04:	b085      	sub	sp, #20
   12f06:	d06d      	beq.n	12fe4 <logobj_interface_setopt+0xe4>
   12f08:	461e      	mov	r6, r3
   12f0a:	f240 2305 	movw	r3, #517	; 0x205
   12f0e:	4299      	cmp	r1, r3
   12f10:	f040 80a0 	bne.w	13054 <logobj_interface_setopt+0x154>
   12f14:	4607      	mov	r7, r0
   12f16:	4615      	mov	r5, r2
   12f18:	f007 fc00 	bl	1a71c <interface_socket_from_handle_get>
   12f1c:	4604      	mov	r4, r0
   12f1e:	2800      	cmp	r0, #0
   12f20:	f000 80c3 	beq.w	130aa <logobj_interface_setopt+0x1aa>
   12f24:	2d01      	cmp	r5, #1
   12f26:	d019      	beq.n	12f5c <logobj_interface_setopt+0x5c>
   12f28:	2d02      	cmp	r5, #2
   12f2a:	d010      	beq.n	12f4e <logobj_interface_setopt+0x4e>
   12f2c:	252a      	movs	r5, #42	; 0x2a
   12f2e:	6803      	ldr	r3, [r0, #0]
   12f30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12f34:	6023      	str	r3, [r4, #0]
   12f36:	6823      	ldr	r3, [r4, #0]
   12f38:	4628      	mov	r0, r5
   12f3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12f3e:	6023      	str	r3, [r4, #0]
   12f40:	f7ff f94a 	bl	121d8 <bsd_os_errno_set>
   12f44:	f04f 35ff 	mov.w	r5, #4294967295
   12f48:	4628      	mov	r0, r5
   12f4a:	b005      	add	sp, #20
   12f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f4e:	b116      	cbz	r6, 12f56 <logobj_interface_setopt+0x56>
   12f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12f52:	2b01      	cmp	r3, #1
   12f54:	d04e      	beq.n	12ff4 <logobj_interface_setopt+0xf4>
   12f56:	6823      	ldr	r3, [r4, #0]
   12f58:	2516      	movs	r5, #22
   12f5a:	e7e9      	b.n	12f30 <logobj_interface_setopt+0x30>
   12f5c:	2e00      	cmp	r6, #0
   12f5e:	d0fa      	beq.n	12f56 <logobj_interface_setopt+0x56>
   12f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12f62:	2b04      	cmp	r3, #4
   12f64:	d1f7      	bne.n	12f56 <logobj_interface_setopt+0x56>
   12f66:	2100      	movs	r1, #0
   12f68:	a803      	add	r0, sp, #12
   12f6a:	f004 f9bf 	bl	172ec <rpc_logobj_client_request_alloc>
   12f6e:	4605      	mov	r5, r0
   12f70:	2800      	cmp	r0, #0
   12f72:	d175      	bne.n	13060 <logobj_interface_setopt+0x160>
   12f74:	9803      	ldr	r0, [sp, #12]
   12f76:	2208      	movs	r2, #8
   12f78:	4629      	mov	r1, r5
   12f7a:	300c      	adds	r0, #12
   12f7c:	f009 fe96 	bl	1ccac <memset>
   12f80:	9803      	ldr	r0, [sp, #12]
   12f82:	4631      	mov	r1, r6
   12f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12f86:	300c      	adds	r0, #12
   12f88:	f009 fe65 	bl	1cc56 <memcpy>
   12f8c:	2308      	movs	r3, #8
   12f8e:	9803      	ldr	r0, [sp, #12]
   12f90:	f247 0102 	movw	r1, #28674	; 0x7002
   12f94:	7203      	strb	r3, [r0, #8]
   12f96:	7245      	strb	r5, [r0, #9]
   12f98:	7285      	strb	r5, [r0, #10]
   12f9a:	72c5      	strb	r5, [r0, #11]
   12f9c:	6823      	ldr	r3, [r4, #0]
   12f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12fa2:	6023      	str	r3, [r4, #0]
   12fa4:	f004 f9ba 	bl	1731c <rpc_logobj_client_request_send>
   12fa8:	2800      	cmp	r0, #0
   12faa:	d178      	bne.n	1309e <logobj_interface_setopt+0x19e>
   12fac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12fae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12fb2:	2900      	cmp	r1, #0
   12fb4:	bf08      	it	eq
   12fb6:	f04f 31ff 	moveq.w	r1, #4294967295
   12fba:	ab04      	add	r3, sp, #16
   12fbc:	f843 1d08 	str.w	r1, [r3, #-8]!
   12fc0:	4638      	mov	r0, r7
   12fc2:	4611      	mov	r1, r2
   12fc4:	f007 fb2a 	bl	1a61c <interface_socket_wait>
   12fc8:	4605      	mov	r5, r0
   12fca:	2800      	cmp	r0, #0
   12fcc:	d140      	bne.n	13050 <logobj_interface_setopt+0x150>
   12fce:	4638      	mov	r0, r7
   12fd0:	f007 fba4 	bl	1a71c <interface_socket_from_handle_get>
   12fd4:	2800      	cmp	r0, #0
   12fd6:	d04e      	beq.n	13076 <logobj_interface_setopt+0x176>
   12fd8:	6843      	ldr	r3, [r0, #4]
   12fda:	2b00      	cmp	r3, #0
   12fdc:	d04b      	beq.n	13076 <logobj_interface_setopt+0x176>
   12fde:	6045      	str	r5, [r0, #4]
   12fe0:	461d      	mov	r5, r3
   12fe2:	e035      	b.n	13050 <logobj_interface_setopt+0x150>
   12fe4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12fe6:	9400      	str	r4, [sp, #0]
   12fe8:	f007 fbc0 	bl	1a76c <interface_socket_setopt>
   12fec:	4605      	mov	r5, r0
   12fee:	4628      	mov	r0, r5
   12ff0:	b005      	add	sp, #20
   12ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ff4:	2100      	movs	r1, #0
   12ff6:	a802      	add	r0, sp, #8
   12ff8:	7835      	ldrb	r5, [r6, #0]
   12ffa:	f004 f977 	bl	172ec <rpc_logobj_client_request_alloc>
   12ffe:	bb78      	cbnz	r0, 13060 <logobj_interface_setopt+0x160>
   13000:	2d01      	cmp	r5, #1
   13002:	bf08      	it	eq
   13004:	4b2c      	ldreq	r3, [pc, #176]	; (130b8 <logobj_interface_setopt+0x1b8>)
   13006:	f04f 0204 	mov.w	r2, #4
   1300a:	bf08      	it	eq
   1300c:	701d      	strbeq	r5, [r3, #0]
   1300e:	2300      	movs	r3, #0
   13010:	9802      	ldr	r0, [sp, #8]
   13012:	f247 0101 	movw	r1, #28673	; 0x7001
   13016:	7243      	strb	r3, [r0, #9]
   13018:	60c5      	str	r5, [r0, #12]
   1301a:	7283      	strb	r3, [r0, #10]
   1301c:	72c3      	strb	r3, [r0, #11]
   1301e:	7202      	strb	r2, [r0, #8]
   13020:	6823      	ldr	r3, [r4, #0]
   13022:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   13026:	6023      	str	r3, [r4, #0]
   13028:	f004 f978 	bl	1731c <rpc_logobj_client_request_send>
   1302c:	4606      	mov	r6, r0
   1302e:	bb80      	cbnz	r0, 13092 <logobj_interface_setopt+0x192>
   13030:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13032:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13036:	2900      	cmp	r1, #0
   13038:	bf08      	it	eq
   1303a:	f04f 31ff 	moveq.w	r1, #4294967295
   1303e:	ab04      	add	r3, sp, #16
   13040:	f843 1d04 	str.w	r1, [r3, #-4]!
   13044:	4638      	mov	r0, r7
   13046:	4611      	mov	r1, r2
   13048:	f007 fae8 	bl	1a61c <interface_socket_wait>
   1304c:	4605      	mov	r5, r0
   1304e:	b150      	cbz	r0, 13066 <logobj_interface_setopt+0x166>
   13050:	6823      	ldr	r3, [r4, #0]
   13052:	e76d      	b.n	12f30 <logobj_interface_setopt+0x30>
   13054:	202a      	movs	r0, #42	; 0x2a
   13056:	f7ff f8bf 	bl	121d8 <bsd_os_errno_set>
   1305a:	f04f 35ff 	mov.w	r5, #4294967295
   1305e:	e773      	b.n	12f48 <logobj_interface_setopt+0x48>
   13060:	6823      	ldr	r3, [r4, #0]
   13062:	250c      	movs	r5, #12
   13064:	e764      	b.n	12f30 <logobj_interface_setopt+0x30>
   13066:	4638      	mov	r0, r7
   13068:	f007 fb58 	bl	1a71c <interface_socket_from_handle_get>
   1306c:	b140      	cbz	r0, 13080 <logobj_interface_setopt+0x180>
   1306e:	6845      	ldr	r5, [r0, #4]
   13070:	b135      	cbz	r5, 13080 <logobj_interface_setopt+0x180>
   13072:	6046      	str	r6, [r0, #4]
   13074:	e7ec      	b.n	13050 <logobj_interface_setopt+0x150>
   13076:	4631      	mov	r1, r6
   13078:	2204      	movs	r2, #4
   1307a:	4810      	ldr	r0, [pc, #64]	; (130bc <logobj_interface_setopt+0x1bc>)
   1307c:	f009 fdeb 	bl	1cc56 <memcpy>
   13080:	6823      	ldr	r3, [r4, #0]
   13082:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   13086:	6023      	str	r3, [r4, #0]
   13088:	6823      	ldr	r3, [r4, #0]
   1308a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1308e:	6023      	str	r3, [r4, #0]
   13090:	e75a      	b.n	12f48 <logobj_interface_setopt+0x48>
   13092:	9802      	ldr	r0, [sp, #8]
   13094:	f004 f958 	bl	17348 <rpc_logobj_client_message_free>
   13098:	2505      	movs	r5, #5
   1309a:	6823      	ldr	r3, [r4, #0]
   1309c:	e748      	b.n	12f30 <logobj_interface_setopt+0x30>
   1309e:	9803      	ldr	r0, [sp, #12]
   130a0:	f004 f952 	bl	17348 <rpc_logobj_client_message_free>
   130a4:	2505      	movs	r5, #5
   130a6:	6823      	ldr	r3, [r4, #0]
   130a8:	e742      	b.n	12f30 <logobj_interface_setopt+0x30>
   130aa:	2009      	movs	r0, #9
   130ac:	f7ff f894 	bl	121d8 <bsd_os_errno_set>
   130b0:	f04f 35ff 	mov.w	r5, #4294967295
   130b4:	e748      	b.n	12f48 <logobj_interface_setopt+0x48>
   130b6:	bf00      	nop
   130b8:	20021d6d 	.word	0x20021d6d
   130bc:	20020ef4 	.word	0x20020ef4

000130c0 <logobj_interface_getopt>:
   130c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   130c2:	2901      	cmp	r1, #1
   130c4:	b083      	sub	sp, #12
   130c6:	9e08      	ldr	r6, [sp, #32]
   130c8:	d030      	beq.n	1312c <logobj_interface_getopt+0x6c>
   130ca:	461f      	mov	r7, r3
   130cc:	f240 2305 	movw	r3, #517	; 0x205
   130d0:	4299      	cmp	r1, r3
   130d2:	d134      	bne.n	1313e <logobj_interface_getopt+0x7e>
   130d4:	4615      	mov	r5, r2
   130d6:	f007 fb21 	bl	1a71c <interface_socket_from_handle_get>
   130da:	2800      	cmp	r0, #0
   130dc:	d037      	beq.n	1314e <logobj_interface_getopt+0x8e>
   130de:	2d01      	cmp	r5, #1
   130e0:	d015      	beq.n	1310e <logobj_interface_getopt+0x4e>
   130e2:	2d02      	cmp	r5, #2
   130e4:	d10b      	bne.n	130fe <logobj_interface_getopt+0x3e>
   130e6:	b387      	cbz	r7, 1314a <logobj_interface_getopt+0x8a>
   130e8:	6833      	ldr	r3, [r6, #0]
   130ea:	b373      	cbz	r3, 1314a <logobj_interface_getopt+0x8a>
   130ec:	2300      	movs	r3, #0
   130ee:	2201      	movs	r2, #1
   130f0:	4618      	mov	r0, r3
   130f2:	491a      	ldr	r1, [pc, #104]	; (1315c <logobj_interface_getopt+0x9c>)
   130f4:	7809      	ldrb	r1, [r1, #0]
   130f6:	7039      	strb	r1, [r7, #0]
   130f8:	6032      	str	r2, [r6, #0]
   130fa:	b003      	add	sp, #12
   130fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   130fe:	2009      	movs	r0, #9
   13100:	f7ff f86a 	bl	121d8 <bsd_os_errno_set>
   13104:	f04f 33ff 	mov.w	r3, #4294967295
   13108:	4618      	mov	r0, r3
   1310a:	b003      	add	sp, #12
   1310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1310e:	b1e7      	cbz	r7, 1314a <logobj_interface_getopt+0x8a>
   13110:	6833      	ldr	r3, [r6, #0]
   13112:	2b03      	cmp	r3, #3
   13114:	d919      	bls.n	1314a <logobj_interface_getopt+0x8a>
   13116:	4638      	mov	r0, r7
   13118:	2204      	movs	r2, #4
   1311a:	4911      	ldr	r1, [pc, #68]	; (13160 <logobj_interface_getopt+0xa0>)
   1311c:	f009 fd9b 	bl	1cc56 <memcpy>
   13120:	2300      	movs	r3, #0
   13122:	2204      	movs	r2, #4
   13124:	4618      	mov	r0, r3
   13126:	6032      	str	r2, [r6, #0]
   13128:	b003      	add	sp, #12
   1312a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1312c:	9600      	str	r6, [sp, #0]
   1312e:	f007 fb63 	bl	1a7f8 <interface_socket_getopt>
   13132:	4603      	mov	r3, r0
   13134:	2800      	cmp	r0, #0
   13136:	d1e3      	bne.n	13100 <logobj_interface_getopt+0x40>
   13138:	4618      	mov	r0, r3
   1313a:	b003      	add	sp, #12
   1313c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1313e:	202a      	movs	r0, #42	; 0x2a
   13140:	f7ff f84a 	bl	121d8 <bsd_os_errno_set>
   13144:	f04f 33ff 	mov.w	r3, #4294967295
   13148:	e7de      	b.n	13108 <logobj_interface_getopt+0x48>
   1314a:	2016      	movs	r0, #22
   1314c:	e7d8      	b.n	13100 <logobj_interface_getopt+0x40>
   1314e:	2009      	movs	r0, #9
   13150:	f7ff f842 	bl	121d8 <bsd_os_errno_set>
   13154:	f04f 33ff 	mov.w	r3, #4294967295
   13158:	e7d6      	b.n	13108 <logobj_interface_getopt+0x48>
   1315a:	bf00      	nop
   1315c:	20021d6e 	.word	0x20021d6e
   13160:	20020ef4 	.word	0x20020ef4

00013164 <logobj_interface_close>:
   13164:	b510      	push	{r4, lr}
   13166:	4604      	mov	r4, r0
   13168:	f007 fad8 	bl	1a71c <interface_socket_from_handle_get>
   1316c:	b138      	cbz	r0, 1317e <logobj_interface_close+0x1a>
   1316e:	4620      	mov	r0, r4
   13170:	f007 fa06 	bl	1a580 <interface_socket_free>
   13174:	2300      	movs	r3, #0
   13176:	4a05      	ldr	r2, [pc, #20]	; (1318c <logobj_interface_close+0x28>)
   13178:	4618      	mov	r0, r3
   1317a:	6013      	str	r3, [r2, #0]
   1317c:	bd10      	pop	{r4, pc}
   1317e:	2009      	movs	r0, #9
   13180:	f7ff f82a 	bl	121d8 <bsd_os_errno_set>
   13184:	f04f 30ff 	mov.w	r0, #4294967295
   13188:	bd10      	pop	{r4, pc}
   1318a:	bf00      	nop
   1318c:	20020ef8 	.word	0x20020ef8

00013190 <rpc_transport_send>:
   13190:	f000 bed0 	b.w	13f34 <rpc_transport_ipc_send>

00013194 <rpc_transport_rpc_alloc>:
   13194:	f000 bf50 	b.w	14038 <rpc_transport_ipc_tx_rpc_data_alloc>

00013198 <rpc_transport_data_alloc>:
   13198:	f000 bfb6 	b.w	14108 <rpc_transport_ipc_tx_data_alloc>

0001319c <rpc_transport_rpc_free>:
   1319c:	f000 bdae 	b.w	13cfc <rpc_transport_ipc_msg_free>

000131a0 <rpc_transport_data_free>:
   131a0:	f000 ba64 	b.w	1366c <rpc_transport_ipc_data_free>

000131a4 <ipc_trace_init>:
   131a4:	4b01      	ldr	r3, [pc, #4]	; (131ac <ipc_trace_init+0x8>)
   131a6:	6018      	str	r0, [r3, #0]
   131a8:	4770      	bx	lr
   131aa:	bf00      	nop
   131ac:	20020f08 	.word	0x20020f08

000131b0 <bsd_os_trace_irq_handler>:
   131b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   131b2:	4b6e      	ldr	r3, [pc, #440]	; (1336c <bsd_os_trace_irq_handler+0x1bc>)
   131b4:	b083      	sub	sp, #12
   131b6:	781b      	ldrb	r3, [r3, #0]
   131b8:	2b00      	cmp	r3, #0
   131ba:	f000 80d3 	beq.w	13364 <bsd_os_trace_irq_handler+0x1b4>
   131be:	4b6c      	ldr	r3, [pc, #432]	; (13370 <bsd_os_trace_irq_handler+0x1c0>)
   131c0:	681c      	ldr	r4, [r3, #0]
   131c2:	b124      	cbz	r4, 131ce <bsd_os_trace_irq_handler+0x1e>
   131c4:	68a3      	ldr	r3, [r4, #8]
   131c6:	6862      	ldr	r2, [r4, #4]
   131c8:	4293      	cmp	r3, r2
   131ca:	f040 808c 	bne.w	132e6 <bsd_os_trace_irq_handler+0x136>
   131ce:	4b69      	ldr	r3, [pc, #420]	; (13374 <bsd_os_trace_irq_handler+0x1c4>)
   131d0:	681c      	ldr	r4, [r3, #0]
   131d2:	b11c      	cbz	r4, 131dc <bsd_os_trace_irq_handler+0x2c>
   131d4:	68a3      	ldr	r3, [r4, #8]
   131d6:	6862      	ldr	r2, [r4, #4]
   131d8:	4293      	cmp	r3, r2
   131da:	d146      	bne.n	1326a <bsd_os_trace_irq_handler+0xba>
   131dc:	4b66      	ldr	r3, [pc, #408]	; (13378 <bsd_os_trace_irq_handler+0x1c8>)
   131de:	681c      	ldr	r4, [r3, #0]
   131e0:	b11c      	cbz	r4, 131ea <bsd_os_trace_irq_handler+0x3a>
   131e2:	68a3      	ldr	r3, [r4, #8]
   131e4:	6862      	ldr	r2, [r4, #4]
   131e6:	4293      	cmp	r3, r2
   131e8:	d101      	bne.n	131ee <bsd_os_trace_irq_handler+0x3e>
   131ea:	b003      	add	sp, #12
   131ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   131ee:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   131f2:	f8ad 2000 	strh.w	r2, [sp]
   131f6:	7822      	ldrb	r2, [r4, #0]
   131f8:	466e      	mov	r6, sp
   131fa:	f88d 2004 	strb.w	r2, [sp, #4]
   131fe:	6862      	ldr	r2, [r4, #4]
   13200:	2105      	movs	r1, #5
   13202:	4293      	cmp	r3, r2
   13204:	bf2a      	itet	cs
   13206:	6927      	ldrcs	r7, [r4, #16]
   13208:	1ad7      	subcc	r7, r2, r3
   1320a:	1aff      	subcs	r7, r7, r3
   1320c:	4293      	cmp	r3, r2
   1320e:	bf94      	ite	ls
   13210:	2500      	movls	r5, #0
   13212:	68e5      	ldrhi	r5, [r4, #12]
   13214:	b2bf      	uxth	r7, r7
   13216:	bf88      	it	hi
   13218:	1b52      	subhi	r2, r2, r5
   1321a:	4630      	mov	r0, r6
   1321c:	bf88      	it	hi
   1321e:	b295      	uxthhi	r5, r2
   13220:	f8ad 7002 	strh.w	r7, [sp, #2]
   13224:	f00c fc4a 	bl	1fabc <bsd_os_trace_put>
   13228:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1322c:	68a0      	ldr	r0, [r4, #8]
   1322e:	f00c fc45 	bl	1fabc <bsd_os_trace_put>
   13232:	68a3      	ldr	r3, [r4, #8]
   13234:	6922      	ldr	r2, [r4, #16]
   13236:	441f      	add	r7, r3
   13238:	4297      	cmp	r7, r2
   1323a:	bf08      	it	eq
   1323c:	68e3      	ldreq	r3, [r4, #12]
   1323e:	60a7      	str	r7, [r4, #8]
   13240:	bf08      	it	eq
   13242:	60a3      	streq	r3, [r4, #8]
   13244:	2d00      	cmp	r5, #0
   13246:	d0d0      	beq.n	131ea <bsd_os_trace_irq_handler+0x3a>
   13248:	2105      	movs	r1, #5
   1324a:	4630      	mov	r0, r6
   1324c:	f8ad 5002 	strh.w	r5, [sp, #2]
   13250:	f00c fc34 	bl	1fabc <bsd_os_trace_put>
   13254:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13258:	68e0      	ldr	r0, [r4, #12]
   1325a:	f00c fc2f 	bl	1fabc <bsd_os_trace_put>
   1325e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13262:	68e3      	ldr	r3, [r4, #12]
   13264:	4413      	add	r3, r2
   13266:	60a3      	str	r3, [r4, #8]
   13268:	e7bf      	b.n	131ea <bsd_os_trace_irq_handler+0x3a>
   1326a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1326e:	f8ad 2000 	strh.w	r2, [sp]
   13272:	7822      	ldrb	r2, [r4, #0]
   13274:	466e      	mov	r6, sp
   13276:	f88d 2004 	strb.w	r2, [sp, #4]
   1327a:	6862      	ldr	r2, [r4, #4]
   1327c:	2105      	movs	r1, #5
   1327e:	4293      	cmp	r3, r2
   13280:	bf2a      	itet	cs
   13282:	6927      	ldrcs	r7, [r4, #16]
   13284:	1ad7      	subcc	r7, r2, r3
   13286:	1aff      	subcs	r7, r7, r3
   13288:	4293      	cmp	r3, r2
   1328a:	bf94      	ite	ls
   1328c:	2500      	movls	r5, #0
   1328e:	68e5      	ldrhi	r5, [r4, #12]
   13290:	b2bf      	uxth	r7, r7
   13292:	bf88      	it	hi
   13294:	1b52      	subhi	r2, r2, r5
   13296:	4630      	mov	r0, r6
   13298:	bf88      	it	hi
   1329a:	b295      	uxthhi	r5, r2
   1329c:	f8ad 7002 	strh.w	r7, [sp, #2]
   132a0:	f00c fc0c 	bl	1fabc <bsd_os_trace_put>
   132a4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   132a8:	68a0      	ldr	r0, [r4, #8]
   132aa:	f00c fc07 	bl	1fabc <bsd_os_trace_put>
   132ae:	68a3      	ldr	r3, [r4, #8]
   132b0:	6922      	ldr	r2, [r4, #16]
   132b2:	441f      	add	r7, r3
   132b4:	4297      	cmp	r7, r2
   132b6:	bf08      	it	eq
   132b8:	68e3      	ldreq	r3, [r4, #12]
   132ba:	60a7      	str	r7, [r4, #8]
   132bc:	bf08      	it	eq
   132be:	60a3      	streq	r3, [r4, #8]
   132c0:	2d00      	cmp	r5, #0
   132c2:	d08b      	beq.n	131dc <bsd_os_trace_irq_handler+0x2c>
   132c4:	2105      	movs	r1, #5
   132c6:	4630      	mov	r0, r6
   132c8:	f8ad 5002 	strh.w	r5, [sp, #2]
   132cc:	f00c fbf6 	bl	1fabc <bsd_os_trace_put>
   132d0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   132d4:	68e0      	ldr	r0, [r4, #12]
   132d6:	f00c fbf1 	bl	1fabc <bsd_os_trace_put>
   132da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   132de:	68e3      	ldr	r3, [r4, #12]
   132e0:	4413      	add	r3, r2
   132e2:	60a3      	str	r3, [r4, #8]
   132e4:	e77a      	b.n	131dc <bsd_os_trace_irq_handler+0x2c>
   132e6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   132ea:	f8ad 2000 	strh.w	r2, [sp]
   132ee:	7822      	ldrb	r2, [r4, #0]
   132f0:	466e      	mov	r6, sp
   132f2:	f88d 2004 	strb.w	r2, [sp, #4]
   132f6:	6862      	ldr	r2, [r4, #4]
   132f8:	2105      	movs	r1, #5
   132fa:	4293      	cmp	r3, r2
   132fc:	bf2a      	itet	cs
   132fe:	6927      	ldrcs	r7, [r4, #16]
   13300:	1ad7      	subcc	r7, r2, r3
   13302:	1aff      	subcs	r7, r7, r3
   13304:	4293      	cmp	r3, r2
   13306:	bf94      	ite	ls
   13308:	2500      	movls	r5, #0
   1330a:	68e5      	ldrhi	r5, [r4, #12]
   1330c:	b2bf      	uxth	r7, r7
   1330e:	bf88      	it	hi
   13310:	1b52      	subhi	r2, r2, r5
   13312:	4630      	mov	r0, r6
   13314:	bf88      	it	hi
   13316:	b295      	uxthhi	r5, r2
   13318:	f8ad 7002 	strh.w	r7, [sp, #2]
   1331c:	f00c fbce 	bl	1fabc <bsd_os_trace_put>
   13320:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13324:	68a0      	ldr	r0, [r4, #8]
   13326:	f00c fbc9 	bl	1fabc <bsd_os_trace_put>
   1332a:	68a3      	ldr	r3, [r4, #8]
   1332c:	6922      	ldr	r2, [r4, #16]
   1332e:	441f      	add	r7, r3
   13330:	4297      	cmp	r7, r2
   13332:	bf08      	it	eq
   13334:	68e3      	ldreq	r3, [r4, #12]
   13336:	60a7      	str	r7, [r4, #8]
   13338:	bf08      	it	eq
   1333a:	60a3      	streq	r3, [r4, #8]
   1333c:	2d00      	cmp	r5, #0
   1333e:	f43f af46 	beq.w	131ce <bsd_os_trace_irq_handler+0x1e>
   13342:	2105      	movs	r1, #5
   13344:	4630      	mov	r0, r6
   13346:	f8ad 5002 	strh.w	r5, [sp, #2]
   1334a:	f00c fbb7 	bl	1fabc <bsd_os_trace_put>
   1334e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13352:	68e0      	ldr	r0, [r4, #12]
   13354:	f00c fbb2 	bl	1fabc <bsd_os_trace_put>
   13358:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1335c:	68e3      	ldr	r3, [r4, #12]
   1335e:	4413      	add	r3, r2
   13360:	60a3      	str	r3, [r4, #8]
   13362:	e734      	b.n	131ce <bsd_os_trace_irq_handler+0x1e>
   13364:	f7ff f8c0 	bl	124e8 <bsd_os_trace_irq_clear>
   13368:	e729      	b.n	131be <bsd_os_trace_irq_handler+0xe>
   1336a:	bf00      	nop
   1336c:	20021d70 	.word	0x20021d70
   13370:	20020f04 	.word	0x20020f04
   13374:	20020efc 	.word	0x20020efc
   13378:	20020f00 	.word	0x20020f00

0001337c <ipc_trace_handle>:
   1337c:	2200      	movs	r2, #0
   1337e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13382:	4bb2      	ldr	r3, [pc, #712]	; (1364c <ipc_trace_handle+0x2d0>)
   13384:	b083      	sub	sp, #12
   13386:	681b      	ldr	r3, [r3, #0]
   13388:	6919      	ldr	r1, [r3, #16]
   1338a:	695c      	ldr	r4, [r3, #20]
   1338c:	7c18      	ldrb	r0, [r3, #16]
   1338e:	741a      	strb	r2, [r3, #16]
   13390:	7c58      	ldrb	r0, [r3, #17]
   13392:	745a      	strb	r2, [r3, #17]
   13394:	7c98      	ldrb	r0, [r3, #18]
   13396:	749a      	strb	r2, [r3, #18]
   13398:	7cd8      	ldrb	r0, [r3, #19]
   1339a:	74da      	strb	r2, [r3, #19]
   1339c:	7d18      	ldrb	r0, [r3, #20]
   1339e:	751a      	strb	r2, [r3, #20]
   133a0:	7d58      	ldrb	r0, [r3, #21]
   133a2:	755a      	strb	r2, [r3, #21]
   133a4:	7d98      	ldrb	r0, [r3, #22]
   133a6:	759a      	strb	r2, [r3, #22]
   133a8:	7dd8      	ldrb	r0, [r3, #23]
   133aa:	75da      	strb	r2, [r3, #23]
   133ac:	b1a9      	cbz	r1, 133da <ipc_trace_handle+0x5e>
   133ae:	3901      	subs	r1, #1
   133b0:	2903      	cmp	r1, #3
   133b2:	d812      	bhi.n	133da <ipc_trace_handle+0x5e>
   133b4:	e8df f001 	tbb	[pc, r1]
   133b8:	1402a97c 	.word	0x1402a97c
   133bc:	2501      	movs	r5, #1
   133be:	2003      	movs	r0, #3
   133c0:	2200      	movs	r2, #0
   133c2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   133c6:	4ca2      	ldr	r4, [pc, #648]	; (13650 <ipc_trace_handle+0x2d4>)
   133c8:	7025      	strb	r5, [r4, #0]
   133ca:	7a1c      	ldrb	r4, [r3, #8]
   133cc:	7218      	strb	r0, [r3, #8]
   133ce:	7a58      	ldrb	r0, [r3, #9]
   133d0:	725a      	strb	r2, [r3, #9]
   133d2:	7a98      	ldrb	r0, [r3, #10]
   133d4:	729a      	strb	r2, [r3, #10]
   133d6:	7ada      	ldrb	r2, [r3, #11]
   133d8:	72d9      	strb	r1, [r3, #11]
   133da:	b003      	add	sp, #12
   133dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e0:	2104      	movs	r1, #4
   133e2:	2200      	movs	r2, #0
   133e4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   133e8:	7a1c      	ldrb	r4, [r3, #8]
   133ea:	7219      	strb	r1, [r3, #8]
   133ec:	7a59      	ldrb	r1, [r3, #9]
   133ee:	725a      	strb	r2, [r3, #9]
   133f0:	4997      	ldr	r1, [pc, #604]	; (13650 <ipc_trace_handle+0x2d4>)
   133f2:	7a9c      	ldrb	r4, [r3, #10]
   133f4:	729a      	strb	r2, [r3, #10]
   133f6:	7adc      	ldrb	r4, [r3, #11]
   133f8:	72d8      	strb	r0, [r3, #11]
   133fa:	700a      	strb	r2, [r1, #0]
   133fc:	780b      	ldrb	r3, [r1, #0]
   133fe:	2b00      	cmp	r3, #0
   13400:	f000 809f 	beq.w	13542 <ipc_trace_handle+0x1c6>
   13404:	4b93      	ldr	r3, [pc, #588]	; (13654 <ipc_trace_handle+0x2d8>)
   13406:	681c      	ldr	r4, [r3, #0]
   13408:	b124      	cbz	r4, 13414 <ipc_trace_handle+0x98>
   1340a:	68a3      	ldr	r3, [r4, #8]
   1340c:	6862      	ldr	r2, [r4, #4]
   1340e:	4293      	cmp	r3, r2
   13410:	f040 80d9 	bne.w	135c6 <ipc_trace_handle+0x24a>
   13414:	4b90      	ldr	r3, [pc, #576]	; (13658 <ipc_trace_handle+0x2dc>)
   13416:	681c      	ldr	r4, [r3, #0]
   13418:	b124      	cbz	r4, 13424 <ipc_trace_handle+0xa8>
   1341a:	68a3      	ldr	r3, [r4, #8]
   1341c:	6862      	ldr	r2, [r4, #4]
   1341e:	4293      	cmp	r3, r2
   13420:	f040 8092 	bne.w	13548 <ipc_trace_handle+0x1cc>
   13424:	4b8d      	ldr	r3, [pc, #564]	; (1365c <ipc_trace_handle+0x2e0>)
   13426:	681c      	ldr	r4, [r3, #0]
   13428:	2c00      	cmp	r4, #0
   1342a:	d0d6      	beq.n	133da <ipc_trace_handle+0x5e>
   1342c:	68a3      	ldr	r3, [r4, #8]
   1342e:	6862      	ldr	r2, [r4, #4]
   13430:	4293      	cmp	r3, r2
   13432:	d0d2      	beq.n	133da <ipc_trace_handle+0x5e>
   13434:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   13438:	f8ad 2000 	strh.w	r2, [sp]
   1343c:	7822      	ldrb	r2, [r4, #0]
   1343e:	466e      	mov	r6, sp
   13440:	f88d 2004 	strb.w	r2, [sp, #4]
   13444:	6862      	ldr	r2, [r4, #4]
   13446:	2105      	movs	r1, #5
   13448:	4293      	cmp	r3, r2
   1344a:	bf2a      	itet	cs
   1344c:	6927      	ldrcs	r7, [r4, #16]
   1344e:	1ad7      	subcc	r7, r2, r3
   13450:	1aff      	subcs	r7, r7, r3
   13452:	4293      	cmp	r3, r2
   13454:	bf94      	ite	ls
   13456:	2500      	movls	r5, #0
   13458:	68e5      	ldrhi	r5, [r4, #12]
   1345a:	b2bf      	uxth	r7, r7
   1345c:	bf88      	it	hi
   1345e:	1b52      	subhi	r2, r2, r5
   13460:	4630      	mov	r0, r6
   13462:	bf88      	it	hi
   13464:	b295      	uxthhi	r5, r2
   13466:	f8ad 7002 	strh.w	r7, [sp, #2]
   1346a:	f00c fb27 	bl	1fabc <bsd_os_trace_put>
   1346e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13472:	68a0      	ldr	r0, [r4, #8]
   13474:	f00c fb22 	bl	1fabc <bsd_os_trace_put>
   13478:	68a3      	ldr	r3, [r4, #8]
   1347a:	6922      	ldr	r2, [r4, #16]
   1347c:	441f      	add	r7, r3
   1347e:	4297      	cmp	r7, r2
   13480:	bf08      	it	eq
   13482:	68e3      	ldreq	r3, [r4, #12]
   13484:	60a7      	str	r7, [r4, #8]
   13486:	bf08      	it	eq
   13488:	60a3      	streq	r3, [r4, #8]
   1348a:	2d00      	cmp	r5, #0
   1348c:	d0a5      	beq.n	133da <ipc_trace_handle+0x5e>
   1348e:	2105      	movs	r1, #5
   13490:	4630      	mov	r0, r6
   13492:	f8ad 5002 	strh.w	r5, [sp, #2]
   13496:	f00c fb11 	bl	1fabc <bsd_os_trace_put>
   1349a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1349e:	68e0      	ldr	r0, [r4, #12]
   134a0:	f00c fb0c 	bl	1fabc <bsd_os_trace_put>
   134a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   134a8:	68e3      	ldr	r3, [r4, #12]
   134aa:	4413      	add	r3, r2
   134ac:	60a3      	str	r3, [r4, #8]
   134ae:	e794      	b.n	133da <ipc_trace_handle+0x5e>
   134b0:	4a67      	ldr	r2, [pc, #412]	; (13650 <ipc_trace_handle+0x2d4>)
   134b2:	7811      	ldrb	r1, [r2, #0]
   134b4:	b109      	cbz	r1, 134ba <ipc_trace_handle+0x13e>
   134b6:	2100      	movs	r1, #0
   134b8:	7011      	strb	r1, [r2, #0]
   134ba:	68a5      	ldr	r5, [r4, #8]
   134bc:	2d00      	cmp	r5, #0
   134be:	d03b      	beq.n	13538 <ipc_trace_handle+0x1bc>
   134c0:	f04f 0c00 	mov.w	ip, #0
   134c4:	f8df a190 	ldr.w	sl, [pc, #400]	; 13658 <ipc_trace_handle+0x2dc>
   134c8:	f8df b188 	ldr.w	fp, [pc, #392]	; 13654 <ipc_trace_handle+0x2d8>
   134cc:	4963      	ldr	r1, [pc, #396]	; (1365c <ipc_trace_handle+0x2e0>)
   134ce:	46e1      	mov	r9, ip
   134d0:	4666      	mov	r6, ip
   134d2:	4662      	mov	r2, ip
   134d4:	f8d1 e000 	ldr.w	lr, [r1]
   134d8:	f8da 8000 	ldr.w	r8, [sl]
   134dc:	f8db 7000 	ldr.w	r7, [fp]
   134e0:	e008      	b.n	134f4 <ipc_trace_handle+0x178>
   134e2:	2963      	cmp	r1, #99	; 0x63
   134e4:	d016      	beq.n	13514 <ipc_trace_handle+0x198>
   134e6:	2961      	cmp	r1, #97	; 0x61
   134e8:	bf04      	itt	eq
   134ea:	4607      	moveq	r7, r0
   134ec:	2601      	moveq	r6, #1
   134ee:	3201      	adds	r2, #1
   134f0:	42aa      	cmp	r2, r5
   134f2:	d013      	beq.n	1351c <ipc_trace_handle+0x1a0>
   134f4:	1c91      	adds	r1, r2, #2
   134f6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   134fa:	6848      	ldr	r0, [r1, #4]
   134fc:	7801      	ldrb	r1, [r0, #0]
   134fe:	2962      	cmp	r1, #98	; 0x62
   13500:	d1ef      	bne.n	134e2 <ipc_trace_handle+0x166>
   13502:	4680      	mov	r8, r0
   13504:	f04f 0901 	mov.w	r9, #1
   13508:	e7f1      	b.n	134ee <ipc_trace_handle+0x172>
   1350a:	f7fe ffe5 	bl	124d8 <bsd_os_trace_irq_set>
   1350e:	b003      	add	sp, #12
   13510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13514:	4686      	mov	lr, r0
   13516:	f04f 0c01 	mov.w	ip, #1
   1351a:	e7e8      	b.n	134ee <ipc_trace_handle+0x172>
   1351c:	2e00      	cmp	r6, #0
   1351e:	f040 8091 	bne.w	13644 <ipc_trace_handle+0x2c8>
   13522:	f1b9 0f00 	cmp.w	r9, #0
   13526:	d001      	beq.n	1352c <ipc_trace_handle+0x1b0>
   13528:	f8ca 8000 	str.w	r8, [sl]
   1352c:	f1bc 0f00 	cmp.w	ip, #0
   13530:	d002      	beq.n	13538 <ipc_trace_handle+0x1bc>
   13532:	4a4a      	ldr	r2, [pc, #296]	; (1365c <ipc_trace_handle+0x2e0>)
   13534:	f8c2 e000 	str.w	lr, [r2]
   13538:	2001      	movs	r0, #1
   1353a:	2200      	movs	r2, #0
   1353c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   13540:	e743      	b.n	133ca <ipc_trace_handle+0x4e>
   13542:	f7fe ffd1 	bl	124e8 <bsd_os_trace_irq_clear>
   13546:	e75d      	b.n	13404 <ipc_trace_handle+0x88>
   13548:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1354c:	f8ad 2000 	strh.w	r2, [sp]
   13550:	7822      	ldrb	r2, [r4, #0]
   13552:	466e      	mov	r6, sp
   13554:	f88d 2004 	strb.w	r2, [sp, #4]
   13558:	6862      	ldr	r2, [r4, #4]
   1355a:	2105      	movs	r1, #5
   1355c:	4293      	cmp	r3, r2
   1355e:	bf2a      	itet	cs
   13560:	6927      	ldrcs	r7, [r4, #16]
   13562:	1ad7      	subcc	r7, r2, r3
   13564:	1aff      	subcs	r7, r7, r3
   13566:	4293      	cmp	r3, r2
   13568:	bf94      	ite	ls
   1356a:	2500      	movls	r5, #0
   1356c:	68e5      	ldrhi	r5, [r4, #12]
   1356e:	b2bf      	uxth	r7, r7
   13570:	bf88      	it	hi
   13572:	1b52      	subhi	r2, r2, r5
   13574:	4630      	mov	r0, r6
   13576:	bf88      	it	hi
   13578:	b295      	uxthhi	r5, r2
   1357a:	f8ad 7002 	strh.w	r7, [sp, #2]
   1357e:	f00c fa9d 	bl	1fabc <bsd_os_trace_put>
   13582:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13586:	68a0      	ldr	r0, [r4, #8]
   13588:	f00c fa98 	bl	1fabc <bsd_os_trace_put>
   1358c:	68a3      	ldr	r3, [r4, #8]
   1358e:	6922      	ldr	r2, [r4, #16]
   13590:	441f      	add	r7, r3
   13592:	4297      	cmp	r7, r2
   13594:	bf08      	it	eq
   13596:	68e3      	ldreq	r3, [r4, #12]
   13598:	60a7      	str	r7, [r4, #8]
   1359a:	bf08      	it	eq
   1359c:	60a3      	streq	r3, [r4, #8]
   1359e:	2d00      	cmp	r5, #0
   135a0:	f43f af40 	beq.w	13424 <ipc_trace_handle+0xa8>
   135a4:	2105      	movs	r1, #5
   135a6:	4630      	mov	r0, r6
   135a8:	f8ad 5002 	strh.w	r5, [sp, #2]
   135ac:	f00c fa86 	bl	1fabc <bsd_os_trace_put>
   135b0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   135b4:	68e0      	ldr	r0, [r4, #12]
   135b6:	f00c fa81 	bl	1fabc <bsd_os_trace_put>
   135ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   135be:	68e3      	ldr	r3, [r4, #12]
   135c0:	4413      	add	r3, r2
   135c2:	60a3      	str	r3, [r4, #8]
   135c4:	e72e      	b.n	13424 <ipc_trace_handle+0xa8>
   135c6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   135ca:	f8ad 2000 	strh.w	r2, [sp]
   135ce:	7822      	ldrb	r2, [r4, #0]
   135d0:	466e      	mov	r6, sp
   135d2:	f88d 2004 	strb.w	r2, [sp, #4]
   135d6:	6862      	ldr	r2, [r4, #4]
   135d8:	2105      	movs	r1, #5
   135da:	4293      	cmp	r3, r2
   135dc:	bf2a      	itet	cs
   135de:	6927      	ldrcs	r7, [r4, #16]
   135e0:	1ad7      	subcc	r7, r2, r3
   135e2:	1aff      	subcs	r7, r7, r3
   135e4:	4293      	cmp	r3, r2
   135e6:	bf94      	ite	ls
   135e8:	2500      	movls	r5, #0
   135ea:	68e5      	ldrhi	r5, [r4, #12]
   135ec:	b2bf      	uxth	r7, r7
   135ee:	bf88      	it	hi
   135f0:	1b52      	subhi	r2, r2, r5
   135f2:	4630      	mov	r0, r6
   135f4:	bf88      	it	hi
   135f6:	b295      	uxthhi	r5, r2
   135f8:	f8ad 7002 	strh.w	r7, [sp, #2]
   135fc:	f00c fa5e 	bl	1fabc <bsd_os_trace_put>
   13600:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13604:	68a0      	ldr	r0, [r4, #8]
   13606:	f00c fa59 	bl	1fabc <bsd_os_trace_put>
   1360a:	68a3      	ldr	r3, [r4, #8]
   1360c:	6922      	ldr	r2, [r4, #16]
   1360e:	441f      	add	r7, r3
   13610:	4297      	cmp	r7, r2
   13612:	bf08      	it	eq
   13614:	68e3      	ldreq	r3, [r4, #12]
   13616:	60a7      	str	r7, [r4, #8]
   13618:	bf08      	it	eq
   1361a:	60a3      	streq	r3, [r4, #8]
   1361c:	2d00      	cmp	r5, #0
   1361e:	f43f aef9 	beq.w	13414 <ipc_trace_handle+0x98>
   13622:	2105      	movs	r1, #5
   13624:	4630      	mov	r0, r6
   13626:	f8ad 5002 	strh.w	r5, [sp, #2]
   1362a:	f00c fa47 	bl	1fabc <bsd_os_trace_put>
   1362e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13632:	68e0      	ldr	r0, [r4, #12]
   13634:	f00c fa42 	bl	1fabc <bsd_os_trace_put>
   13638:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1363c:	68e3      	ldr	r3, [r4, #12]
   1363e:	4413      	add	r3, r2
   13640:	60a3      	str	r3, [r4, #8]
   13642:	e6e7      	b.n	13414 <ipc_trace_handle+0x98>
   13644:	f8cb 7000 	str.w	r7, [fp]
   13648:	e76b      	b.n	13522 <ipc_trace_handle+0x1a6>
   1364a:	bf00      	nop
   1364c:	20020f08 	.word	0x20020f08
   13650:	20021d70 	.word	0x20021d70
   13654:	20020f04 	.word	0x20020f04
   13658:	20020efc 	.word	0x20020efc
   1365c:	20020f00 	.word	0x20020f00

00013660 <rpc_trace_coredump_in_progress>:
   13660:	4b01      	ldr	r3, [pc, #4]	; (13668 <rpc_trace_coredump_in_progress+0x8>)
   13662:	7818      	ldrb	r0, [r3, #0]
   13664:	4770      	bx	lr
   13666:	bf00      	nop
   13668:	20021d70 	.word	0x20021d70

0001366c <rpc_transport_ipc_data_free>:
   1366c:	b510      	push	{r4, lr}
   1366e:	4b0e      	ldr	r3, [pc, #56]	; (136a8 <rpc_transport_ipc_data_free+0x3c>)
   13670:	4604      	mov	r4, r0
   13672:	e9d3 2300 	ldrd	r2, r3, [r3]
   13676:	4413      	add	r3, r2
   13678:	4298      	cmp	r0, r3
   1367a:	d20d      	bcs.n	13698 <rpc_transport_ipc_data_free+0x2c>
   1367c:	4282      	cmp	r2, r0
   1367e:	d80b      	bhi.n	13698 <rpc_transport_ipc_data_free+0x2c>
   13680:	f000 fd12 	bl	140a8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   13684:	b158      	cbz	r0, 1369e <rpc_transport_ipc_data_free+0x32>
   13686:	4a09      	ldr	r2, [pc, #36]	; (136ac <rpc_transport_ipc_data_free+0x40>)
   13688:	6084      	str	r4, [r0, #8]
   1368a:	6002      	str	r2, [r0, #0]
   1368c:	f7ff fd80 	bl	13190 <rpc_transport_send>
   13690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13694:	f7fe bf10 	b.w	124b8 <bsd_os_application_irq_set>
   13698:	4620      	mov	r0, r4
   1369a:	f006 fbfb 	bl	19e94 <nrf_shared_free>
   1369e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136a2:	f7fe bf09 	b.w	124b8 <bsd_os_application_irq_set>
   136a6:	bf00      	nop
   136a8:	20020f0c 	.word	0x20020f0c
   136ac:	00020001 	.word	0x00020001

000136b0 <rpc_transport_ipc_init>:
   136b0:	b188      	cbz	r0, 136d6 <rpc_transport_ipc_init+0x26>
   136b2:	b510      	push	{r4, lr}
   136b4:	b082      	sub	sp, #8
   136b6:	aa01      	add	r2, sp, #4
   136b8:	4669      	mov	r1, sp
   136ba:	4604      	mov	r4, r0
   136bc:	f000 fb50 	bl	13d60 <rpc_transport_ipc_tx_init>
   136c0:	4602      	mov	r2, r0
   136c2:	b148      	cbz	r0, 136d8 <rpc_transport_ipc_init+0x28>
   136c4:	4b12      	ldr	r3, [pc, #72]	; (13710 <rpc_transport_ipc_init+0x60>)
   136c6:	3428      	adds	r4, #40	; 0x28
   136c8:	e894 0003 	ldmia.w	r4, {r0, r1}
   136cc:	e883 0003 	stmia.w	r3, {r0, r1}
   136d0:	4610      	mov	r0, r2
   136d2:	b002      	add	sp, #8
   136d4:	bd10      	pop	{r4, pc}
   136d6:	e7fe      	b.n	136d6 <rpc_transport_ipc_init+0x26>
   136d8:	e9dd 1200 	ldrd	r1, r2, [sp]
   136dc:	4620      	mov	r0, r4
   136de:	f000 f9fb 	bl	13ad8 <rpc_transport_ipc_rx_init>
   136e2:	4602      	mov	r2, r0
   136e4:	4b0a      	ldr	r3, [pc, #40]	; (13710 <rpc_transport_ipc_init+0x60>)
   136e6:	f104 0128 	add.w	r1, r4, #40	; 0x28
   136ea:	c903      	ldmia	r1, {r0, r1}
   136ec:	e883 0003 	stmia.w	r3, {r0, r1}
   136f0:	2a00      	cmp	r2, #0
   136f2:	d1ed      	bne.n	136d0 <rpc_transport_ipc_init+0x20>
   136f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   136f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   136fa:	4906      	ldr	r1, [pc, #24]	; (13714 <rpc_transport_ipc_init+0x64>)
   136fc:	015b      	lsls	r3, r3, #5
   136fe:	b2db      	uxtb	r3, r3
   13700:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   13704:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   13708:	6048      	str	r0, [r1, #4]
   1370a:	4610      	mov	r0, r2
   1370c:	b002      	add	sp, #8
   1370e:	bd10      	pop	{r4, pc}
   13710:	20020f0c 	.word	0x20020f0c
   13714:	e000e100 	.word	0xe000e100

00013718 <bsd_os_application_irq_handler>:
   13718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1371c:	f7fe fed4 	bl	124c8 <bsd_os_application_irq_clear>
   13720:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 137f8 <bsd_os_application_irq_handler+0xe0>
   13724:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 137fc <bsd_os_application_irq_handler+0xe4>
   13728:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 13800 <bsd_os_application_irq_handler+0xe8>
   1372c:	f108 0908 	add.w	r9, r8, #8
   13730:	f858 7b04 	ldr.w	r7, [r8], #4
   13734:	6839      	ldr	r1, [r7, #0]
   13736:	b361      	cbz	r1, 13792 <bsd_os_application_irq_handler+0x7a>
   13738:	2400      	movs	r4, #0
   1373a:	e002      	b.n	13742 <bsd_os_application_irq_handler+0x2a>
   1373c:	3401      	adds	r4, #1
   1373e:	428c      	cmp	r4, r1
   13740:	d227      	bcs.n	13792 <bsd_os_application_irq_handler+0x7a>
   13742:	00e6      	lsls	r6, r4, #3
   13744:	19bd      	adds	r5, r7, r6
   13746:	68aa      	ldr	r2, [r5, #8]
   13748:	2a00      	cmp	r2, #0
   1374a:	d0f7      	beq.n	1373c <bsd_os_application_irq_handler+0x24>
   1374c:	686a      	ldr	r2, [r5, #4]
   1374e:	b2d2      	uxtb	r2, r2
   13750:	2a01      	cmp	r2, #1
   13752:	d1f3      	bne.n	1373c <bsd_os_application_irq_handler+0x24>
   13754:	6868      	ldr	r0, [r5, #4]
   13756:	f8bb 2000 	ldrh.w	r2, [fp]
   1375a:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1375e:	d1ed      	bne.n	1373c <bsd_os_application_irq_handler+0x24>
   13760:	68a8      	ldr	r0, [r5, #8]
   13762:	6841      	ldr	r1, [r0, #4]
   13764:	b2c9      	uxtb	r1, r1
   13766:	2902      	cmp	r1, #2
   13768:	d02c      	beq.n	137c4 <bsd_os_application_irq_handler+0xac>
   1376a:	2901      	cmp	r1, #1
   1376c:	d015      	beq.n	1379a <bsd_os_application_irq_handler+0x82>
   1376e:	3604      	adds	r6, #4
   13770:	59b9      	ldr	r1, [r7, r6]
   13772:	3201      	adds	r2, #1
   13774:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   13778:	f041 0103 	orr.w	r1, r1, #3
   1377c:	51b9      	str	r1, [r7, r6]
   1377e:	f8ab 2000 	strh.w	r2, [fp]
   13782:	f7fe fe99 	bl	124b8 <bsd_os_application_irq_set>
   13786:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1378a:	3401      	adds	r4, #1
   1378c:	6839      	ldr	r1, [r7, #0]
   1378e:	428c      	cmp	r4, r1
   13790:	d3d7      	bcc.n	13742 <bsd_os_application_irq_handler+0x2a>
   13792:	45c1      	cmp	r9, r8
   13794:	d1cc      	bne.n	13730 <bsd_os_application_irq_handler+0x18>
   13796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1379a:	6801      	ldr	r1, [r0, #0]
   1379c:	0c09      	lsrs	r1, r1, #16
   1379e:	f002 fd7d 	bl	1629c <rpc_handle_ctrl_message>
   137a2:	2801      	cmp	r0, #1
   137a4:	d014      	beq.n	137d0 <bsd_os_application_irq_handler+0xb8>
   137a6:	d310      	bcc.n	137ca <bsd_os_application_irq_handler+0xb2>
   137a8:	2802      	cmp	r0, #2
   137aa:	d007      	beq.n	137bc <bsd_os_application_irq_handler+0xa4>
   137ac:	2203      	movs	r2, #3
   137ae:	4b11      	ldr	r3, [pc, #68]	; (137f4 <bsd_os_application_irq_handler+0xdc>)
   137b0:	4610      	mov	r0, r2
   137b2:	f8ca 2000 	str.w	r2, [sl]
   137b6:	601a      	str	r2, [r3, #0]
   137b8:	f005 f918 	bl	189ec <rpc_transport_ipc_fault_handler>
   137bc:	f858 7c04 	ldr.w	r7, [r8, #-4]
   137c0:	6839      	ldr	r1, [r7, #0]
   137c2:	e7bb      	b.n	1373c <bsd_os_application_irq_handler+0x24>
   137c4:	f002 fd82 	bl	162cc <rpc_handle_data_message>
   137c8:	e7eb      	b.n	137a2 <bsd_os_application_irq_handler+0x8a>
   137ca:	f8bb 2000 	ldrh.w	r2, [fp]
   137ce:	e7ce      	b.n	1376e <bsd_os_application_irq_handler+0x56>
   137d0:	686a      	ldr	r2, [r5, #4]
   137d2:	f8bb 1000 	ldrh.w	r1, [fp]
   137d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   137da:	f042 0202 	orr.w	r2, r2, #2
   137de:	606a      	str	r2, [r5, #4]
   137e0:	1c4a      	adds	r2, r1, #1
   137e2:	f8ab 2000 	strh.w	r2, [fp]
   137e6:	f7fe fe67 	bl	124b8 <bsd_os_application_irq_set>
   137ea:	f858 7c04 	ldr.w	r7, [r8, #-4]
   137ee:	6839      	ldr	r1, [r7, #0]
   137f0:	e7a4      	b.n	1373c <bsd_os_application_irq_handler+0x24>
   137f2:	bf00      	nop
   137f4:	20020f14 	.word	0x20020f14
   137f8:	20020f1c 	.word	0x20020f1c
   137fc:	20021c3e 	.word	0x20021c3e
   13800:	20020f24 	.word	0x20020f24

00013804 <IPC_IRQHandler>:
   13804:	b5f0      	push	{r4, r5, r6, r7, lr}
   13806:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1380a:	4d9f      	ldr	r5, [pc, #636]	; (13a88 <IPC_IRQHandler+0x284>)
   1380c:	4c9f      	ldr	r4, [pc, #636]	; (13a8c <IPC_IRQHandler+0x288>)
   1380e:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   13812:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   13816:	b095      	sub	sp, #84	; 0x54
   13818:	0618      	lsls	r0, r3, #24
   1381a:	d50b      	bpl.n	13834 <IPC_IRQHandler+0x30>
   1381c:	f7ff fdae 	bl	1337c <ipc_trace_handle>
   13820:	f7ff ff1e 	bl	13660 <rpc_trace_coredump_in_progress>
   13824:	2800      	cmp	r0, #0
   13826:	d158      	bne.n	138da <IPC_IRQHandler+0xd6>
   13828:	4b99      	ldr	r3, [pc, #612]	; (13a90 <IPC_IRQHandler+0x28c>)
   1382a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1382e:	681b      	ldr	r3, [r3, #0]
   13830:	9301      	str	r3, [sp, #4]
   13832:	9b01      	ldr	r3, [sp, #4]
   13834:	4c95      	ldr	r4, [pc, #596]	; (13a8c <IPC_IRQHandler+0x288>)
   13836:	f8d4 530c 	ldr.w	r5, [r4, #780]	; 0x30c
   1383a:	f015 0501 	ands.w	r5, r5, #1
   1383e:	d11e      	bne.n	1387e <IPC_IRQHandler+0x7a>
   13840:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   13844:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   13848:	d14c      	bne.n	138e4 <IPC_IRQHandler+0xe0>
   1384a:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
   1384e:	0751      	lsls	r1, r2, #29
   13850:	d50e      	bpl.n	13870 <IPC_IRQHandler+0x6c>
   13852:	4a90      	ldr	r2, [pc, #576]	; (13a94 <IPC_IRQHandler+0x290>)
   13854:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   13858:	6812      	ldr	r2, [r2, #0]
   1385a:	4b8f      	ldr	r3, [pc, #572]	; (13a98 <IPC_IRQHandler+0x294>)
   1385c:	9206      	str	r2, [sp, #24]
   1385e:	9a06      	ldr	r2, [sp, #24]
   13860:	681a      	ldr	r2, [r3, #0]
   13862:	2a02      	cmp	r2, #2
   13864:	f000 80f2 	beq.w	13a4c <IPC_IRQHandler+0x248>
   13868:	681a      	ldr	r2, [r3, #0]
   1386a:	2a01      	cmp	r2, #1
   1386c:	f000 80d3 	beq.w	13a16 <IPC_IRQHandler+0x212>
   13870:	4b86      	ldr	r3, [pc, #536]	; (13a8c <IPC_IRQHandler+0x288>)
   13872:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   13876:	06d2      	lsls	r2, r2, #27
   13878:	d423      	bmi.n	138c2 <IPC_IRQHandler+0xbe>
   1387a:	b015      	add	sp, #84	; 0x54
   1387c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1387e:	2100      	movs	r1, #0
   13880:	f248 0202 	movw	r2, #32770	; 0x8002
   13884:	4b85      	ldr	r3, [pc, #532]	; (13a9c <IPC_IRQHandler+0x298>)
   13886:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1388a:	681b      	ldr	r3, [r3, #0]
   1388c:	9302      	str	r3, [sp, #8]
   1388e:	9b02      	ldr	r3, [sp, #8]
   13890:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
   13894:	4293      	cmp	r3, r2
   13896:	f000 80e2 	beq.w	13a5e <IPC_IRQHandler+0x25a>
   1389a:	f200 80a0 	bhi.w	139de <IPC_IRQHandler+0x1da>
   1389e:	2b00      	cmp	r3, #0
   138a0:	f000 80d7 	beq.w	13a52 <IPC_IRQHandler+0x24e>
   138a4:	2b02      	cmp	r3, #2
   138a6:	f240 80ab 	bls.w	13a00 <IPC_IRQHandler+0x1fc>
   138aa:	f248 0201 	movw	r2, #32769	; 0x8001
   138ae:	4293      	cmp	r3, r2
   138b0:	f040 80cf 	bne.w	13a52 <IPC_IRQHandler+0x24e>
   138b4:	2003      	movs	r0, #3
   138b6:	2207      	movs	r2, #7
   138b8:	4977      	ldr	r1, [pc, #476]	; (13a98 <IPC_IRQHandler+0x294>)
   138ba:	4b79      	ldr	r3, [pc, #484]	; (13aa0 <IPC_IRQHandler+0x29c>)
   138bc:	6008      	str	r0, [r1, #0]
   138be:	601a      	str	r2, [r3, #0]
   138c0:	e7db      	b.n	1387a <IPC_IRQHandler+0x76>
   138c2:	2100      	movs	r1, #0
   138c4:	4a77      	ldr	r2, [pc, #476]	; (13aa4 <IPC_IRQHandler+0x2a0>)
   138c6:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   138ca:	6813      	ldr	r3, [r2, #0]
   138cc:	9307      	str	r3, [sp, #28]
   138ce:	9b07      	ldr	r3, [sp, #28]
   138d0:	b015      	add	sp, #84	; 0x54
   138d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   138d6:	f7fe bdef 	b.w	124b8 <bsd_os_application_irq_set>
   138da:	23e0      	movs	r3, #224	; 0xe0
   138dc:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   138e0:	606e      	str	r6, [r5, #4]
   138e2:	e7ca      	b.n	1387a <IPC_IRQHandler+0x76>
   138e4:	4b70      	ldr	r3, [pc, #448]	; (13aa8 <IPC_IRQHandler+0x2a4>)
   138e6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   138ea:	681b      	ldr	r3, [r3, #0]
   138ec:	9305      	str	r3, [sp, #20]
   138ee:	9b05      	ldr	r3, [sp, #20]
   138f0:	f000 fc14 	bl	1411c <rpc_transport_ipc_tx_suspend>
   138f4:	2010      	movs	r0, #16
   138f6:	2201      	movs	r2, #1
   138f8:	210a      	movs	r1, #10
   138fa:	4b6c      	ldr	r3, [pc, #432]	; (13aac <IPC_IRQHandler+0x2a8>)
   138fc:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   13900:	681b      	ldr	r3, [r3, #0]
   13902:	9303      	str	r3, [sp, #12]
   13904:	4b6a      	ldr	r3, [pc, #424]	; (13ab0 <IPC_IRQHandler+0x2ac>)
   13906:	9e03      	ldr	r6, [sp, #12]
   13908:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1390c:	6818      	ldr	r0, [r3, #0]
   1390e:	4b69      	ldr	r3, [pc, #420]	; (13ab4 <IPC_IRQHandler+0x2b0>)
   13910:	9004      	str	r0, [sp, #16]
   13912:	9804      	ldr	r0, [sp, #16]
   13914:	9508      	str	r5, [sp, #32]
   13916:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   1391a:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   1391e:	9008      	str	r0, [sp, #32]
   13920:	9808      	ldr	r0, [sp, #32]
   13922:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   13926:	9109      	str	r1, [sp, #36]	; 0x24
   13928:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1392a:	b12b      	cbz	r3, 13938 <IPC_IRQHandler+0x134>
   1392c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1392e:	3b01      	subs	r3, #1
   13930:	9309      	str	r3, [sp, #36]	; 0x24
   13932:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13934:	2b00      	cmp	r3, #0
   13936:	d1f9      	bne.n	1392c <IPC_IRQHandler+0x128>
   13938:	2200      	movs	r2, #0
   1393a:	f04f 0c01 	mov.w	ip, #1
   1393e:	2704      	movs	r7, #4
   13940:	2610      	movs	r6, #16
   13942:	495c      	ldr	r1, [pc, #368]	; (13ab4 <IPC_IRQHandler+0x2b0>)
   13944:	4b51      	ldr	r3, [pc, #324]	; (13a8c <IPC_IRQHandler+0x288>)
   13946:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   1394a:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   1394e:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   13952:	2540      	movs	r5, #64	; 0x40
   13954:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   13958:	6809      	ldr	r1, [r1, #0]
   1395a:	2480      	movs	r4, #128	; 0x80
   1395c:	910a      	str	r1, [sp, #40]	; 0x28
   1395e:	4956      	ldr	r1, [pc, #344]	; (13ab8 <IPC_IRQHandler+0x2b4>)
   13960:	980a      	ldr	r0, [sp, #40]	; 0x28
   13962:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   13966:	6809      	ldr	r1, [r1, #0]
   13968:	910b      	str	r1, [sp, #44]	; 0x2c
   1396a:	4950      	ldr	r1, [pc, #320]	; (13aac <IPC_IRQHandler+0x2a8>)
   1396c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1396e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   13972:	6809      	ldr	r1, [r1, #0]
   13974:	2005      	movs	r0, #5
   13976:	910c      	str	r1, [sp, #48]	; 0x30
   13978:	4950      	ldr	r1, [pc, #320]	; (13abc <IPC_IRQHandler+0x2b8>)
   1397a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   1397e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   13982:	6809      	ldr	r1, [r1, #0]
   13984:	910d      	str	r1, [sp, #52]	; 0x34
   13986:	494e      	ldr	r1, [pc, #312]	; (13ac0 <IPC_IRQHandler+0x2bc>)
   13988:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
   1398c:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   13990:	6809      	ldr	r1, [r1, #0]
   13992:	910e      	str	r1, [sp, #56]	; 0x38
   13994:	4946      	ldr	r1, [pc, #280]	; (13ab0 <IPC_IRQHandler+0x2ac>)
   13996:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   1399a:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   1399e:	f8d1 c000 	ldr.w	ip, [r1]
   139a2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   139a6:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   139aa:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   139ae:	680f      	ldr	r7, [r1, #0]
   139b0:	9710      	str	r7, [sp, #64]	; 0x40
   139b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
   139b4:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   139b8:	680e      	ldr	r6, [r1, #0]
   139ba:	9611      	str	r6, [sp, #68]	; 0x44
   139bc:	9e11      	ldr	r6, [sp, #68]	; 0x44
   139be:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   139c2:	680d      	ldr	r5, [r1, #0]
   139c4:	9512      	str	r5, [sp, #72]	; 0x48
   139c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
   139c8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   139cc:	680c      	ldr	r4, [r1, #0]
   139ce:	4b32      	ldr	r3, [pc, #200]	; (13a98 <IPC_IRQHandler+0x294>)
   139d0:	9413      	str	r4, [sp, #76]	; 0x4c
   139d2:	493c      	ldr	r1, [pc, #240]	; (13ac4 <IPC_IRQHandler+0x2c0>)
   139d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   139d6:	800a      	strh	r2, [r1, #0]
   139d8:	6018      	str	r0, [r3, #0]
   139da:	b015      	add	sp, #84	; 0x54
   139dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139de:	4a3a      	ldr	r2, [pc, #232]	; (13ac8 <IPC_IRQHandler+0x2c4>)
   139e0:	4293      	cmp	r3, r2
   139e2:	d82a      	bhi.n	13a3a <IPC_IRQHandler+0x236>
   139e4:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   139e8:	d82a      	bhi.n	13a40 <IPC_IRQHandler+0x23c>
   139ea:	f248 0203 	movw	r2, #32771	; 0x8003
   139ee:	4293      	cmp	r3, r2
   139f0:	d12f      	bne.n	13a52 <IPC_IRQHandler+0x24e>
   139f2:	2003      	movs	r0, #3
   139f4:	2204      	movs	r2, #4
   139f6:	4928      	ldr	r1, [pc, #160]	; (13a98 <IPC_IRQHandler+0x294>)
   139f8:	4b29      	ldr	r3, [pc, #164]	; (13aa0 <IPC_IRQHandler+0x29c>)
   139fa:	6008      	str	r0, [r1, #0]
   139fc:	601a      	str	r2, [r3, #0]
   139fe:	e73c      	b.n	1387a <IPC_IRQHandler+0x76>
   13a00:	2303      	movs	r3, #3
   13a02:	4618      	mov	r0, r3
   13a04:	4924      	ldr	r1, [pc, #144]	; (13a98 <IPC_IRQHandler+0x294>)
   13a06:	4a26      	ldr	r2, [pc, #152]	; (13aa0 <IPC_IRQHandler+0x29c>)
   13a08:	600b      	str	r3, [r1, #0]
   13a0a:	6013      	str	r3, [r2, #0]
   13a0c:	b015      	add	sp, #84	; 0x54
   13a0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13a12:	f004 bfeb 	b.w	189ec <rpc_transport_ipc_fault_handler>
   13a16:	4a2d      	ldr	r2, [pc, #180]	; (13acc <IPC_IRQHandler+0x2c8>)
   13a18:	482d      	ldr	r0, [pc, #180]	; (13ad0 <IPC_IRQHandler+0x2cc>)
   13a1a:	6811      	ldr	r1, [r2, #0]
   13a1c:	688a      	ldr	r2, [r1, #8]
   13a1e:	6002      	str	r2, [r0, #0]
   13a20:	6849      	ldr	r1, [r1, #4]
   13a22:	6041      	str	r1, [r0, #4]
   13a24:	b312      	cbz	r2, 13a6c <IPC_IRQHandler+0x268>
   13a26:	b309      	cbz	r1, 13a6c <IPC_IRQHandler+0x268>
   13a28:	6812      	ldr	r2, [r2, #0]
   13a2a:	2a10      	cmp	r2, #16
   13a2c:	d824      	bhi.n	13a78 <IPC_IRQHandler+0x274>
   13a2e:	680a      	ldr	r2, [r1, #0]
   13a30:	2a10      	cmp	r2, #16
   13a32:	d821      	bhi.n	13a78 <IPC_IRQHandler+0x274>
   13a34:	2202      	movs	r2, #2
   13a36:	601a      	str	r2, [r3, #0]
   13a38:	e71a      	b.n	13870 <IPC_IRQHandler+0x6c>
   13a3a:	4a26      	ldr	r2, [pc, #152]	; (13ad4 <IPC_IRQHandler+0x2d0>)
   13a3c:	4293      	cmp	r3, r2
   13a3e:	d108      	bne.n	13a52 <IPC_IRQHandler+0x24e>
   13a40:	2003      	movs	r0, #3
   13a42:	4915      	ldr	r1, [pc, #84]	; (13a98 <IPC_IRQHandler+0x294>)
   13a44:	4a16      	ldr	r2, [pc, #88]	; (13aa0 <IPC_IRQHandler+0x29c>)
   13a46:	6008      	str	r0, [r1, #0]
   13a48:	6013      	str	r3, [r2, #0]
   13a4a:	e716      	b.n	1387a <IPC_IRQHandler+0x76>
   13a4c:	f7fe fd34 	bl	124b8 <bsd_os_application_irq_set>
   13a50:	e70e      	b.n	13870 <IPC_IRQHandler+0x6c>
   13a52:	2303      	movs	r3, #3
   13a54:	4910      	ldr	r1, [pc, #64]	; (13a98 <IPC_IRQHandler+0x294>)
   13a56:	4a12      	ldr	r2, [pc, #72]	; (13aa0 <IPC_IRQHandler+0x29c>)
   13a58:	600b      	str	r3, [r1, #0]
   13a5a:	6013      	str	r3, [r2, #0]
   13a5c:	e70d      	b.n	1387a <IPC_IRQHandler+0x76>
   13a5e:	2003      	movs	r0, #3
   13a60:	2206      	movs	r2, #6
   13a62:	490d      	ldr	r1, [pc, #52]	; (13a98 <IPC_IRQHandler+0x294>)
   13a64:	4b0e      	ldr	r3, [pc, #56]	; (13aa0 <IPC_IRQHandler+0x29c>)
   13a66:	6008      	str	r0, [r1, #0]
   13a68:	601a      	str	r2, [r3, #0]
   13a6a:	e706      	b.n	1387a <IPC_IRQHandler+0x76>
   13a6c:	2003      	movs	r0, #3
   13a6e:	2110      	movs	r1, #16
   13a70:	4a0b      	ldr	r2, [pc, #44]	; (13aa0 <IPC_IRQHandler+0x29c>)
   13a72:	6018      	str	r0, [r3, #0]
   13a74:	6011      	str	r1, [r2, #0]
   13a76:	e6fb      	b.n	13870 <IPC_IRQHandler+0x6c>
   13a78:	2003      	movs	r0, #3
   13a7a:	f24c 0106 	movw	r1, #49158	; 0xc006
   13a7e:	4a08      	ldr	r2, [pc, #32]	; (13aa0 <IPC_IRQHandler+0x29c>)
   13a80:	6018      	str	r0, [r3, #0]
   13a82:	6011      	str	r1, [r2, #0]
   13a84:	e6f4      	b.n	13870 <IPC_IRQHandler+0x6c>
   13a86:	bf00      	nop
   13a88:	e000e100 	.word	0xe000e100
   13a8c:	4002a000 	.word	0x4002a000
   13a90:	4002a11c 	.word	0x4002a11c
   13a94:	4002a108 	.word	0x4002a108
   13a98:	20020f24 	.word	0x20020f24
   13a9c:	4002a100 	.word	0x4002a100
   13aa0:	20020f14 	.word	0x20020f14
   13aa4:	4002a110 	.word	0x4002a110
   13aa8:	4002a118 	.word	0x4002a118
   13aac:	4002a5a0 	.word	0x4002a5a0
   13ab0:	4002a308 	.word	0x4002a308
   13ab4:	40005000 	.word	0x40005000
   13ab8:	4002a598 	.word	0x4002a598
   13abc:	4002a5a8 	.word	0x4002a5a8
   13ac0:	4002a5ac 	.word	0x4002a5ac
   13ac4:	20021c3e 	.word	0x20021c3e
   13ac8:	04400004 	.word	0x04400004
   13acc:	20020f28 	.word	0x20020f28
   13ad0:	20020f1c 	.word	0x20020f1c
   13ad4:	05500001 	.word	0x05500001

00013ad8 <rpc_transport_ipc_rx_init>:
   13ad8:	2800      	cmp	r0, #0
   13ada:	f000 80f7 	beq.w	13ccc <rpc_transport_ipc_rx_init+0x1f4>
   13ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ae2:	6805      	ldr	r5, [r0, #0]
   13ae4:	b095      	sub	sp, #84	; 0x54
   13ae6:	2d00      	cmp	r5, #0
   13ae8:	f000 80e6 	beq.w	13cb8 <rpc_transport_ipc_rx_init+0x1e0>
   13aec:	6883      	ldr	r3, [r0, #8]
   13aee:	2b00      	cmp	r3, #0
   13af0:	f000 80e2 	beq.w	13cb8 <rpc_transport_ipc_rx_init+0x1e0>
   13af4:	6906      	ldr	r6, [r0, #16]
   13af6:	2e00      	cmp	r6, #0
   13af8:	f000 80de 	beq.w	13cb8 <rpc_transport_ipc_rx_init+0x1e0>
   13afc:	6a84      	ldr	r4, [r0, #40]	; 0x28
   13afe:	2c00      	cmp	r4, #0
   13b00:	f000 80da 	beq.w	13cb8 <rpc_transport_ipc_rx_init+0x1e0>
   13b04:	6844      	ldr	r4, [r0, #4]
   13b06:	2c1b      	cmp	r4, #27
   13b08:	f240 80db 	bls.w	13cc2 <rpc_transport_ipc_rx_init+0x1ea>
   13b0c:	68c4      	ldr	r4, [r0, #12]
   13b0e:	2c0b      	cmp	r4, #11
   13b10:	f240 80d7 	bls.w	13cc2 <rpc_transport_ipc_rx_init+0x1ea>
   13b14:	f8d0 c014 	ldr.w	ip, [r0, #20]
   13b18:	f1bc 0f17 	cmp.w	ip, #23
   13b1c:	f240 80d1 	bls.w	13cc2 <rpc_transport_ipc_rx_init+0x1ea>
   13b20:	2700      	movs	r7, #0
   13b22:	4604      	mov	r4, r0
   13b24:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 13cec <rpc_transport_ipc_rx_init+0x214>
   13b28:	6b80      	ldr	r0, [r0, #56]	; 0x38
   13b2a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 13cf0 <rpc_transport_ipc_rx_init+0x218>
   13b2e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 13cf4 <rpc_transport_ipc_rx_init+0x21c>
   13b32:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 13cf8 <rpc_transport_ipc_rx_init+0x220>
   13b36:	e9cd 1200 	strd	r1, r2, [sp]
   13b3a:	f8ca 0000 	str.w	r0, [sl]
   13b3e:	4662      	mov	r2, ip
   13b40:	4639      	mov	r1, r7
   13b42:	4630      	mov	r0, r6
   13b44:	f8cb 3000 	str.w	r3, [fp]
   13b48:	f8c8 7000 	str.w	r7, [r8]
   13b4c:	f8c9 7000 	str.w	r7, [r9]
   13b50:	f009 f8ac 	bl	1ccac <memset>
   13b54:	69e3      	ldr	r3, [r4, #28]
   13b56:	4630      	mov	r0, r6
   13b58:	6033      	str	r3, [r6, #0]
   13b5a:	69a3      	ldr	r3, [r4, #24]
   13b5c:	6073      	str	r3, [r6, #4]
   13b5e:	f7ff fb21 	bl	131a4 <ipc_trace_init>
   13b62:	2201      	movs	r2, #1
   13b64:	f04f 0c04 	mov.w	ip, #4
   13b68:	4b5a      	ldr	r3, [pc, #360]	; (13cd4 <rpc_transport_ipc_rx_init+0x1fc>)
   13b6a:	495b      	ldr	r1, [pc, #364]	; (13cd8 <rpc_transport_ipc_rx_init+0x200>)
   13b6c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   13b70:	6809      	ldr	r1, [r1, #0]
   13b72:	2080      	movs	r0, #128	; 0x80
   13b74:	9104      	str	r1, [sp, #16]
   13b76:	4959      	ldr	r1, [pc, #356]	; (13cdc <rpc_transport_ipc_rx_init+0x204>)
   13b78:	f8dd e010 	ldr.w	lr, [sp, #16]
   13b7c:	f8c3 7614 	str.w	r7, [r3, #1556]	; 0x614
   13b80:	6809      	ldr	r1, [r1, #0]
   13b82:	702f      	strb	r7, [r5, #0]
   13b84:	9103      	str	r1, [sp, #12]
   13b86:	706f      	strb	r7, [r5, #1]
   13b88:	70ef      	strb	r7, [r5, #3]
   13b8a:	70aa      	strb	r2, [r5, #2]
   13b8c:	9903      	ldr	r1, [sp, #12]
   13b8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   13b90:	f8db e000 	ldr.w	lr, [fp]
   13b94:	6069      	str	r1, [r5, #4]
   13b96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   13b98:	9c01      	ldr	r4, [sp, #4]
   13b9a:	60a9      	str	r1, [r5, #8]
   13b9c:	60ec      	str	r4, [r5, #12]
   13b9e:	9c00      	ldr	r4, [sp, #0]
   13ba0:	494f      	ldr	r1, [pc, #316]	; (13ce0 <rpc_transport_ipc_rx_init+0x208>)
   13ba2:	61ae      	str	r6, [r5, #24]
   13ba4:	f8c5 e014 	str.w	lr, [r5, #20]
   13ba8:	612c      	str	r4, [r5, #16]
   13baa:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   13bae:	680c      	ldr	r4, [r1, #0]
   13bb0:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   13bb4:	9405      	str	r4, [sp, #20]
   13bb6:	9c05      	ldr	r4, [sp, #20]
   13bb8:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   13bbc:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   13bc0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   13bc4:	9406      	str	r4, [sp, #24]
   13bc6:	9c06      	ldr	r4, [sp, #24]
   13bc8:	2410      	movs	r4, #16
   13bca:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   13bce:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   13bd2:	4d44      	ldr	r5, [pc, #272]	; (13ce4 <rpc_transport_ipc_rx_init+0x20c>)
   13bd4:	9407      	str	r4, [sp, #28]
   13bd6:	9c07      	ldr	r4, [sp, #28]
   13bd8:	2440      	movs	r4, #64	; 0x40
   13bda:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   13bde:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   13be2:	9408      	str	r4, [sp, #32]
   13be4:	9c08      	ldr	r4, [sp, #32]
   13be6:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   13bea:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   13bee:	9009      	str	r0, [sp, #36]	; 0x24
   13bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
   13bf2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
   13bf6:	6808      	ldr	r0, [r1, #0]
   13bf8:	900a      	str	r0, [sp, #40]	; 0x28
   13bfa:	980a      	ldr	r0, [sp, #40]	; 0x28
   13bfc:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
   13c00:	6888      	ldr	r0, [r1, #8]
   13c02:	900b      	str	r0, [sp, #44]	; 0x2c
   13c04:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13c06:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
   13c0a:	6908      	ldr	r0, [r1, #16]
   13c0c:	900c      	str	r0, [sp, #48]	; 0x30
   13c0e:	980c      	ldr	r0, [sp, #48]	; 0x30
   13c10:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
   13c14:	6988      	ldr	r0, [r1, #24]
   13c16:	900d      	str	r0, [sp, #52]	; 0x34
   13c18:	980d      	ldr	r0, [sp, #52]	; 0x34
   13c1a:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
   13c1e:	69c8      	ldr	r0, [r1, #28]
   13c20:	f501 7101 	add.w	r1, r1, #516	; 0x204
   13c24:	900e      	str	r0, [sp, #56]	; 0x38
   13c26:	980e      	ldr	r0, [sp, #56]	; 0x38
   13c28:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   13c2c:	4310      	orrs	r0, r2
   13c2e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   13c32:	680c      	ldr	r4, [r1, #0]
   13c34:	482c      	ldr	r0, [pc, #176]	; (13ce8 <rpc_transport_ipc_rx_init+0x210>)
   13c36:	940f      	str	r4, [sp, #60]	; 0x3c
   13c38:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   13c3a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13c3e:	ea44 040c 	orr.w	r4, r4, ip
   13c42:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13c46:	680c      	ldr	r4, [r1, #0]
   13c48:	9410      	str	r4, [sp, #64]	; 0x40
   13c4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   13c4c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13c50:	f044 0410 	orr.w	r4, r4, #16
   13c54:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13c58:	680c      	ldr	r4, [r1, #0]
   13c5a:	9411      	str	r4, [sp, #68]	; 0x44
   13c5c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   13c5e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13c62:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   13c66:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13c6a:	680c      	ldr	r4, [r1, #0]
   13c6c:	9412      	str	r4, [sp, #72]	; 0x48
   13c6e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   13c70:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   13c74:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   13c78:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   13c7c:	f8da 3000 	ldr.w	r3, [sl]
   13c80:	6809      	ldr	r1, [r1, #0]
   13c82:	015b      	lsls	r3, r3, #5
   13c84:	9113      	str	r1, [sp, #76]	; 0x4c
   13c86:	b2db      	uxtb	r3, r3
   13c88:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13c8a:	f8c8 2000 	str.w	r2, [r8]
   13c8e:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   13c92:	f8c0 6184 	str.w	r6, [r0, #388]	; 0x184
   13c96:	6046      	str	r6, [r0, #4]
   13c98:	9702      	str	r7, [sp, #8]
   13c9a:	f8c5 7610 	str.w	r7, [r5, #1552]	; 0x610
   13c9e:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   13ca2:	9302      	str	r3, [sp, #8]
   13ca4:	9b02      	ldr	r3, [sp, #8]
   13ca6:	f8d8 3000 	ldr.w	r3, [r8]
   13caa:	2b01      	cmp	r3, #1
   13cac:	d0fb      	beq.n	13ca6 <rpc_transport_ipc_rx_init+0x1ce>
   13cae:	f8d9 0000 	ldr.w	r0, [r9]
   13cb2:	b015      	add	sp, #84	; 0x54
   13cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   13cbc:	b015      	add	sp, #84	; 0x54
   13cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cc2:	f24c 0009 	movw	r0, #49161	; 0xc009
   13cc6:	b015      	add	sp, #84	; 0x54
   13cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ccc:	f24c 000e 	movw	r0, #49166	; 0xc00e
   13cd0:	4770      	bx	lr
   13cd2:	bf00      	nop
   13cd4:	4002a000 	.word	0x4002a000
   13cd8:	4002a610 	.word	0x4002a610
   13cdc:	4002a614 	.word	0x4002a614
   13ce0:	4002a590 	.word	0x4002a590
   13ce4:	40005000 	.word	0x40005000
   13ce8:	e000e100 	.word	0xe000e100
   13cec:	20020f18 	.word	0x20020f18
   13cf0:	20020f24 	.word	0x20020f24
   13cf4:	20020f28 	.word	0x20020f28
   13cf8:	20020f14 	.word	0x20020f14

00013cfc <rpc_transport_ipc_msg_free>:
   13cfc:	b470      	push	{r4, r5, r6}
   13cfe:	4e17      	ldr	r6, [pc, #92]	; (13d5c <rpc_transport_ipc_msg_free+0x60>)
   13d00:	6831      	ldr	r1, [r6, #0]
   13d02:	680d      	ldr	r5, [r1, #0]
   13d04:	b1ad      	cbz	r5, 13d32 <rpc_transport_ipc_msg_free+0x36>
   13d06:	688b      	ldr	r3, [r1, #8]
   13d08:	4283      	cmp	r3, r0
   13d0a:	d024      	beq.n	13d56 <rpc_transport_ipc_msg_free+0x5a>
   13d0c:	2300      	movs	r3, #0
   13d0e:	3301      	adds	r3, #1
   13d10:	00da      	lsls	r2, r3, #3
   13d12:	429d      	cmp	r5, r3
   13d14:	eb01 0402 	add.w	r4, r1, r2
   13d18:	d00b      	beq.n	13d32 <rpc_transport_ipc_msg_free+0x36>
   13d1a:	68a4      	ldr	r4, [r4, #8]
   13d1c:	42a0      	cmp	r0, r4
   13d1e:	d1f6      	bne.n	13d0e <rpc_transport_ipc_msg_free+0x12>
   13d20:	3204      	adds	r2, #4
   13d22:	588b      	ldr	r3, [r1, r2]
   13d24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13d28:	f043 0303 	orr.w	r3, r3, #3
   13d2c:	508b      	str	r3, [r1, r2]
   13d2e:	bc70      	pop	{r4, r5, r6}
   13d30:	4770      	bx	lr
   13d32:	6871      	ldr	r1, [r6, #4]
   13d34:	680d      	ldr	r5, [r1, #0]
   13d36:	2d00      	cmp	r5, #0
   13d38:	d0f9      	beq.n	13d2e <rpc_transport_ipc_msg_free+0x32>
   13d3a:	688b      	ldr	r3, [r1, #8]
   13d3c:	4283      	cmp	r3, r0
   13d3e:	d00a      	beq.n	13d56 <rpc_transport_ipc_msg_free+0x5a>
   13d40:	2300      	movs	r3, #0
   13d42:	3301      	adds	r3, #1
   13d44:	00da      	lsls	r2, r3, #3
   13d46:	429d      	cmp	r5, r3
   13d48:	eb01 0402 	add.w	r4, r1, r2
   13d4c:	d0ef      	beq.n	13d2e <rpc_transport_ipc_msg_free+0x32>
   13d4e:	68a4      	ldr	r4, [r4, #8]
   13d50:	42a0      	cmp	r0, r4
   13d52:	d1f6      	bne.n	13d42 <rpc_transport_ipc_msg_free+0x46>
   13d54:	e7e4      	b.n	13d20 <rpc_transport_ipc_msg_free+0x24>
   13d56:	2204      	movs	r2, #4
   13d58:	e7e3      	b.n	13d22 <rpc_transport_ipc_msg_free+0x26>
   13d5a:	bf00      	nop
   13d5c:	20020f1c 	.word	0x20020f1c

00013d60 <rpc_transport_ipc_tx_init>:
   13d60:	2800      	cmp	r0, #0
   13d62:	f000 80b8 	beq.w	13ed6 <rpc_transport_ipc_tx_init+0x176>
   13d66:	2900      	cmp	r1, #0
   13d68:	f000 80b5 	beq.w	13ed6 <rpc_transport_ipc_tx_init+0x176>
   13d6c:	2a00      	cmp	r2, #0
   13d6e:	f000 80b2 	beq.w	13ed6 <rpc_transport_ipc_tx_init+0x176>
   13d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d76:	6a04      	ldr	r4, [r0, #32]
   13d78:	b085      	sub	sp, #20
   13d7a:	2c00      	cmp	r4, #0
   13d7c:	f000 80a6 	beq.w	13ecc <rpc_transport_ipc_tx_init+0x16c>
   13d80:	6a40      	ldr	r0, [r0, #36]	; 0x24
   13d82:	2800      	cmp	r0, #0
   13d84:	f000 80a2 	beq.w	13ecc <rpc_transport_ipc_tx_init+0x16c>
   13d88:	f642 4587 	movw	r5, #11399	; 0x2c87
   13d8c:	f04f 0a00 	mov.w	sl, #0
   13d90:	4e55      	ldr	r6, [pc, #340]	; (13ee8 <rpc_transport_ipc_tx_init+0x188>)
   13d92:	42a8      	cmp	r0, r5
   13d94:	f886 a000 	strb.w	sl, [r6]
   13d98:	f240 80a0 	bls.w	13edc <rpc_transport_ipc_tx_init+0x17c>
   13d9c:	2708      	movs	r7, #8
   13d9e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 13f20 <rpc_transport_ipc_tx_init+0x1c0>
   13da2:	4620      	mov	r0, r4
   13da4:	4616      	mov	r6, r2
   13da6:	460d      	mov	r5, r1
   13da8:	2244      	movs	r2, #68	; 0x44
   13daa:	4651      	mov	r1, sl
   13dac:	f8c9 4000 	str.w	r4, [r9]
   13db0:	f008 ff7c 	bl	1ccac <memset>
   13db4:	f8d9 2000 	ldr.w	r2, [r9]
   13db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13dbc:	f8df 8164 	ldr.w	r8, [pc, #356]	; 13f24 <rpc_transport_ipc_tx_init+0x1c4>
   13dc0:	f882 a001 	strb.w	sl, [r2, #1]
   13dc4:	f882 a002 	strb.w	sl, [r2, #2]
   13dc8:	f882 a003 	strb.w	sl, [r2, #3]
   13dcc:	7017      	strb	r7, [r2, #0]
   13dce:	4618      	mov	r0, r3
   13dd0:	2244      	movs	r2, #68	; 0x44
   13dd2:	4651      	mov	r1, sl
   13dd4:	f8c8 3000 	str.w	r3, [r8]
   13dd8:	f008 ff68 	bl	1ccac <memset>
   13ddc:	f8d8 2000 	ldr.w	r2, [r8]
   13de0:	f104 0388 	add.w	r3, r4, #136	; 0x88
   13de4:	f8df b140 	ldr.w	fp, [pc, #320]	; 13f28 <rpc_transport_ipc_tx_init+0x1c8>
   13de8:	7017      	strb	r7, [r2, #0]
   13dea:	f882 a001 	strb.w	sl, [r2, #1]
   13dee:	f882 a002 	strb.w	sl, [r2, #2]
   13df2:	f882 a003 	strb.w	sl, [r2, #3]
   13df6:	4618      	mov	r0, r3
   13df8:	f44f 7200 	mov.w	r2, #512	; 0x200
   13dfc:	4651      	mov	r1, sl
   13dfe:	f8cb 3000 	str.w	r3, [fp]
   13e02:	f008 ff53 	bl	1ccac <memset>
   13e06:	4b39      	ldr	r3, [pc, #228]	; (13eec <rpc_transport_ipc_tx_init+0x18c>)
   13e08:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   13e0c:	f8c3 c000 	str.w	ip, [r3]
   13e10:	4651      	mov	r1, sl
   13e12:	4660      	mov	r0, ip
   13e14:	f44f 7200 	mov.w	r2, #512	; 0x200
   13e18:	f008 ff48 	bl	1ccac <memset>
   13e1c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   13e20:	2106      	movs	r1, #6
   13e22:	f04f 0e01 	mov.w	lr, #1
   13e26:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   13e2a:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   13e2e:	4b30      	ldr	r3, [pc, #192]	; (13ef0 <rpc_transport_ipc_tx_init+0x190>)
   13e30:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   13e34:	605c      	str	r4, [r3, #4]
   13e36:	4c2f      	ldr	r4, [pc, #188]	; (13ef4 <rpc_transport_ipc_tx_init+0x194>)
   13e38:	f8c3 c008 	str.w	ip, [r3, #8]
   13e3c:	8199      	strh	r1, [r3, #12]
   13e3e:	f8a3 e000 	strh.w	lr, [r3]
   13e42:	4619      	mov	r1, r3
   13e44:	611c      	str	r4, [r3, #16]
   13e46:	4b2c      	ldr	r3, [pc, #176]	; (13ef8 <rpc_transport_ipc_tx_init+0x198>)
   13e48:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 13f2c <rpc_transport_ipc_tx_init+0x1cc>
   13e4c:	6120      	str	r0, [r4, #16]
   13e4e:	482b      	ldr	r0, [pc, #172]	; (13efc <rpc_transport_ipc_tx_init+0x19c>)
   13e50:	6063      	str	r3, [r4, #4]
   13e52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   13e56:	60a0      	str	r0, [r4, #8]
   13e58:	f8c4 c000 	str.w	ip, [r4]
   13e5c:	4828      	ldr	r0, [pc, #160]	; (13f00 <rpc_transport_ipc_tx_init+0x1a0>)
   13e5e:	60e3      	str	r3, [r4, #12]
   13e60:	6162      	str	r2, [r4, #20]
   13e62:	f005 fedd 	bl	19c20 <nrf_mem_register>
   13e66:	2800      	cmp	r0, #0
   13e68:	d132      	bne.n	13ed0 <rpc_transport_ipc_tx_init+0x170>
   13e6a:	f04f 0c02 	mov.w	ip, #2
   13e6e:	2420      	movs	r4, #32
   13e70:	f8d9 1000 	ldr.w	r1, [r9]
   13e74:	f8db 2000 	ldr.w	r2, [fp]
   13e78:	6029      	str	r1, [r5, #0]
   13e7a:	4b1c      	ldr	r3, [pc, #112]	; (13eec <rpc_transport_ipc_tx_init+0x18c>)
   13e7c:	f8d8 1000 	ldr.w	r1, [r8]
   13e80:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 13f30 <rpc_transport_ipc_tx_init+0x1d0>
   13e84:	4d1f      	ldr	r5, [pc, #124]	; (13f04 <rpc_transport_ipc_tx_init+0x1a4>)
   13e86:	6031      	str	r1, [r6, #0]
   13e88:	f8ce 2000 	str.w	r2, [lr]
   13e8c:	681b      	ldr	r3, [r3, #0]
   13e8e:	491e      	ldr	r1, [pc, #120]	; (13f08 <rpc_transport_ipc_tx_init+0x1a8>)
   13e90:	f502 7200 	add.w	r2, r2, #512	; 0x200
   13e94:	602a      	str	r2, [r5, #0]
   13e96:	4e1d      	ldr	r6, [pc, #116]	; (13f0c <rpc_transport_ipc_tx_init+0x1ac>)
   13e98:	4a1d      	ldr	r2, [pc, #116]	; (13f10 <rpc_transport_ipc_tx_init+0x1b0>)
   13e9a:	4d1e      	ldr	r5, [pc, #120]	; (13f14 <rpc_transport_ipc_tx_init+0x1b4>)
   13e9c:	600b      	str	r3, [r1, #0]
   13e9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   13ea2:	491d      	ldr	r1, [pc, #116]	; (13f18 <rpc_transport_ipc_tx_init+0x1b8>)
   13ea4:	6033      	str	r3, [r6, #0]
   13ea6:	8028      	strh	r0, [r5, #0]
   13ea8:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   13eac:	6809      	ldr	r1, [r1, #0]
   13eae:	4b1b      	ldr	r3, [pc, #108]	; (13f1c <rpc_transport_ipc_tx_init+0x1bc>)
   13eb0:	9103      	str	r1, [sp, #12]
   13eb2:	9903      	ldr	r1, [sp, #12]
   13eb4:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   13eb8:	6819      	ldr	r1, [r3, #0]
   13eba:	443b      	add	r3, r7
   13ebc:	9102      	str	r1, [sp, #8]
   13ebe:	9902      	ldr	r1, [sp, #8]
   13ec0:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   13ec4:	681b      	ldr	r3, [r3, #0]
   13ec6:	9301      	str	r3, [sp, #4]
   13ec8:	9b01      	ldr	r3, [sp, #4]
   13eca:	e001      	b.n	13ed0 <rpc_transport_ipc_tx_init+0x170>
   13ecc:	f24c 0007 	movw	r0, #49159	; 0xc007
   13ed0:	b005      	add	sp, #20
   13ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed6:	f24c 000e 	movw	r0, #49166	; 0xc00e
   13eda:	4770      	bx	lr
   13edc:	f24c 0004 	movw	r0, #49156	; 0xc004
   13ee0:	b005      	add	sp, #20
   13ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ee6:	bf00      	nop
   13ee8:	20021d71 	.word	0x20021d71
   13eec:	20020f54 	.word	0x20020f54
   13ef0:	20020f40 	.word	0x20020f40
   13ef4:	20020f64 	.word	0x20020f64
   13ef8:	00040080 	.word	0x00040080
   13efc:	00040100 	.word	0x00040100
   13f00:	20020f2c 	.word	0x20020f2c
   13f04:	20020f38 	.word	0x20020f38
   13f08:	20020f34 	.word	0x20020f34
   13f0c:	20020f30 	.word	0x20020f30
   13f10:	4002a000 	.word	0x4002a000
   13f14:	20021c40 	.word	0x20021c40
   13f18:	4002a514 	.word	0x4002a514
   13f1c:	4002a51c 	.word	0x4002a51c
   13f20:	20020f60 	.word	0x20020f60
   13f24:	20020f58 	.word	0x20020f58
   13f28:	20020f5c 	.word	0x20020f5c
   13f2c:	00080040 	.word	0x00080040
   13f30:	20020f3c 	.word	0x20020f3c

00013f34 <rpc_transport_ipc_send>:
   13f34:	2800      	cmp	r0, #0
   13f36:	d061      	beq.n	13ffc <rpc_transport_ipc_send+0xc8>
   13f38:	b4f0      	push	{r4, r5, r6, r7}
   13f3a:	4b34      	ldr	r3, [pc, #208]	; (1400c <rpc_transport_ipc_send+0xd8>)
   13f3c:	b082      	sub	sp, #8
   13f3e:	681a      	ldr	r2, [r3, #0]
   13f40:	4b33      	ldr	r3, [pc, #204]	; (14010 <rpc_transport_ipc_send+0xdc>)
   13f42:	4282      	cmp	r2, r0
   13f44:	d81e      	bhi.n	13f84 <rpc_transport_ipc_send+0x50>
   13f46:	681b      	ldr	r3, [r3, #0]
   13f48:	4932      	ldr	r1, [pc, #200]	; (14014 <rpc_transport_ipc_send+0xe0>)
   13f4a:	4283      	cmp	r3, r0
   13f4c:	6809      	ldr	r1, [r1, #0]
   13f4e:	d803      	bhi.n	13f58 <rpc_transport_ipc_send+0x24>
   13f50:	4c31      	ldr	r4, [pc, #196]	; (14018 <rpc_transport_ipc_send+0xe4>)
   13f52:	6824      	ldr	r4, [r4, #0]
   13f54:	4284      	cmp	r4, r0
   13f56:	d849      	bhi.n	13fec <rpc_transport_ipc_send+0xb8>
   13f58:	4281      	cmp	r1, r0
   13f5a:	d90e      	bls.n	13f7a <rpc_transport_ipc_send+0x46>
   13f5c:	4b2f      	ldr	r3, [pc, #188]	; (1401c <rpc_transport_ipc_send+0xe8>)
   13f5e:	781b      	ldrb	r3, [r3, #0]
   13f60:	2b00      	cmp	r3, #0
   13f62:	d14e      	bne.n	14002 <rpc_transport_ipc_send+0xce>
   13f64:	1a83      	subs	r3, r0, r2
   13f66:	492e      	ldr	r1, [pc, #184]	; (14020 <rpc_transport_ipc_send+0xec>)
   13f68:	099f      	lsrs	r7, r3, #6
   13f6a:	069b      	lsls	r3, r3, #26
   13f6c:	680a      	ldr	r2, [r1, #0]
   13f6e:	4d2d      	ldr	r5, [pc, #180]	; (14024 <rpc_transport_ipc_send+0xf0>)
   13f70:	f04f 0403 	mov.w	r4, #3
   13f74:	f04f 0602 	mov.w	r6, #2
   13f78:	d014      	beq.n	13fa4 <rpc_transport_ipc_send+0x70>
   13f7a:	f24c 0010 	movw	r0, #49168	; 0xc010
   13f7e:	b002      	add	sp, #8
   13f80:	bcf0      	pop	{r4, r5, r6, r7}
   13f82:	4770      	bx	lr
   13f84:	681b      	ldr	r3, [r3, #0]
   13f86:	4298      	cmp	r0, r3
   13f88:	d3f7      	bcc.n	13f7a <rpc_transport_ipc_send+0x46>
   13f8a:	4a23      	ldr	r2, [pc, #140]	; (14018 <rpc_transport_ipc_send+0xe4>)
   13f8c:	6812      	ldr	r2, [r2, #0]
   13f8e:	4290      	cmp	r0, r2
   13f90:	d2f3      	bcs.n	13f7a <rpc_transport_ipc_send+0x46>
   13f92:	2401      	movs	r4, #1
   13f94:	1ac3      	subs	r3, r0, r3
   13f96:	4a24      	ldr	r2, [pc, #144]	; (14028 <rpc_transport_ipc_send+0xf4>)
   13f98:	099f      	lsrs	r7, r3, #6
   13f9a:	069b      	lsls	r3, r3, #26
   13f9c:	4626      	mov	r6, r4
   13f9e:	6812      	ldr	r2, [r2, #0]
   13fa0:	4d22      	ldr	r5, [pc, #136]	; (1402c <rpc_transport_ipc_send+0xf8>)
   13fa2:	d1ea      	bne.n	13f7a <rpc_transport_ipc_send+0x46>
   13fa4:	6841      	ldr	r1, [r0, #4]
   13fa6:	b2c9      	uxtb	r1, r1
   13fa8:	428e      	cmp	r6, r1
   13faa:	d122      	bne.n	13ff2 <rpc_transport_ipc_send+0xbe>
   13fac:	2020      	movs	r0, #32
   13fae:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   13fb2:	491f      	ldr	r1, [pc, #124]	; (14030 <rpc_transport_ipc_send+0xfc>)
   13fb4:	685a      	ldr	r2, [r3, #4]
   13fb6:	880e      	ldrh	r6, [r1, #0]
   13fb8:	b292      	uxth	r2, r2
   13fba:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   13fbe:	605a      	str	r2, [r3, #4]
   13fc0:	685a      	ldr	r2, [r3, #4]
   13fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13fc6:	f042 0201 	orr.w	r2, r2, #1
   13fca:	605a      	str	r2, [r3, #4]
   13fcc:	bf00      	nop
   13fce:	3801      	subs	r0, #1
   13fd0:	d1fc      	bne.n	13fcc <rpc_transport_ipc_send+0x98>
   13fd2:	2201      	movs	r2, #1
   13fd4:	4b17      	ldr	r3, [pc, #92]	; (14034 <rpc_transport_ipc_send+0x100>)
   13fd6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   13fda:	682a      	ldr	r2, [r5, #0]
   13fdc:	880b      	ldrh	r3, [r1, #0]
   13fde:	9201      	str	r2, [sp, #4]
   13fe0:	9a01      	ldr	r2, [sp, #4]
   13fe2:	3301      	adds	r3, #1
   13fe4:	800b      	strh	r3, [r1, #0]
   13fe6:	b002      	add	sp, #8
   13fe8:	bcf0      	pop	{r4, r5, r6, r7}
   13fea:	4770      	bx	lr
   13fec:	4281      	cmp	r1, r0
   13fee:	d9d0      	bls.n	13f92 <rpc_transport_ipc_send+0x5e>
   13ff0:	e7b4      	b.n	13f5c <rpc_transport_ipc_send+0x28>
   13ff2:	f24c 0007 	movw	r0, #49159	; 0xc007
   13ff6:	b002      	add	sp, #8
   13ff8:	bcf0      	pop	{r4, r5, r6, r7}
   13ffa:	4770      	bx	lr
   13ffc:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14000:	4770      	bx	lr
   14002:	f24c 000f 	movw	r0, #49167	; 0xc00f
   14006:	b002      	add	sp, #8
   14008:	bcf0      	pop	{r4, r5, r6, r7}
   1400a:	4770      	bx	lr
   1400c:	20020f3c 	.word	0x20020f3c
   14010:	20020f34 	.word	0x20020f34
   14014:	20020f38 	.word	0x20020f38
   14018:	20020f30 	.word	0x20020f30
   1401c:	20021d71 	.word	0x20021d71
   14020:	20020f60 	.word	0x20020f60
   14024:	4002a00c 	.word	0x4002a00c
   14028:	20020f58 	.word	0x20020f58
   1402c:	4002a004 	.word	0x4002a004
   14030:	20021c40 	.word	0x20021c40
   14034:	4002a000 	.word	0x4002a000

00014038 <rpc_transport_ipc_tx_rpc_data_alloc>:
   14038:	4b18      	ldr	r3, [pc, #96]	; (1409c <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1403a:	781b      	ldrb	r3, [r3, #0]
   1403c:	bb63      	cbnz	r3, 14098 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1403e:	b4f0      	push	{r4, r5, r6, r7}
   14040:	4a17      	ldr	r2, [pc, #92]	; (140a0 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   14042:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   14046:	6814      	ldr	r4, [r2, #0]
   14048:	4b16      	ldr	r3, [pc, #88]	; (140a4 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1404a:	6825      	ldr	r5, [r4, #0]
   1404c:	681e      	ldr	r6, [r3, #0]
   1404e:	b1a5      	cbz	r5, 1407a <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   14050:	4607      	mov	r7, r0
   14052:	00c1      	lsls	r1, r0, #3
   14054:	1863      	adds	r3, r4, r1
   14056:	685a      	ldr	r2, [r3, #4]
   14058:	b2d2      	uxtb	r2, r2
   1405a:	2a03      	cmp	r2, #3
   1405c:	d104      	bne.n	14068 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1405e:	609f      	str	r7, [r3, #8]
   14060:	685a      	ldr	r2, [r3, #4]
   14062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14066:	605a      	str	r2, [r3, #4]
   14068:	685a      	ldr	r2, [r3, #4]
   1406a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1406e:	d101      	bne.n	14074 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   14070:	689b      	ldr	r3, [r3, #8]
   14072:	b12b      	cbz	r3, 14080 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   14074:	3001      	adds	r0, #1
   14076:	42a8      	cmp	r0, r5
   14078:	d1eb      	bne.n	14052 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1407a:	2000      	movs	r0, #0
   1407c:	bcf0      	pop	{r4, r5, r6, r7}
   1407e:	4770      	bx	lr
   14080:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14084:	4421      	add	r1, r4
   14086:	6088      	str	r0, [r1, #8]
   14088:	6843      	ldr	r3, [r0, #4]
   1408a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1408e:	f043 0302 	orr.w	r3, r3, #2
   14092:	6043      	str	r3, [r0, #4]
   14094:	bcf0      	pop	{r4, r5, r6, r7}
   14096:	4770      	bx	lr
   14098:	2000      	movs	r0, #0
   1409a:	4770      	bx	lr
   1409c:	20021d71 	.word	0x20021d71
   140a0:	20020f60 	.word	0x20020f60
   140a4:	20020f5c 	.word	0x20020f5c

000140a8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   140a8:	b4f0      	push	{r4, r5, r6, r7}
   140aa:	4a15      	ldr	r2, [pc, #84]	; (14100 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   140ac:	4b15      	ldr	r3, [pc, #84]	; (14104 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   140ae:	6814      	ldr	r4, [r2, #0]
   140b0:	681e      	ldr	r6, [r3, #0]
   140b2:	6825      	ldr	r5, [r4, #0]
   140b4:	b1ad      	cbz	r5, 140e2 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   140b6:	2000      	movs	r0, #0
   140b8:	4607      	mov	r7, r0
   140ba:	00c1      	lsls	r1, r0, #3
   140bc:	1863      	adds	r3, r4, r1
   140be:	685a      	ldr	r2, [r3, #4]
   140c0:	b2d2      	uxtb	r2, r2
   140c2:	2a03      	cmp	r2, #3
   140c4:	d104      	bne.n	140d0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   140c6:	609f      	str	r7, [r3, #8]
   140c8:	685a      	ldr	r2, [r3, #4]
   140ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   140ce:	605a      	str	r2, [r3, #4]
   140d0:	685a      	ldr	r2, [r3, #4]
   140d2:	f012 0fff 	tst.w	r2, #255	; 0xff
   140d6:	d101      	bne.n	140dc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   140d8:	689b      	ldr	r3, [r3, #8]
   140da:	b12b      	cbz	r3, 140e8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   140dc:	3001      	adds	r0, #1
   140de:	4285      	cmp	r5, r0
   140e0:	d1eb      	bne.n	140ba <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   140e2:	2000      	movs	r0, #0
   140e4:	bcf0      	pop	{r4, r5, r6, r7}
   140e6:	4770      	bx	lr
   140e8:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   140ec:	4421      	add	r1, r4
   140ee:	6088      	str	r0, [r1, #8]
   140f0:	6843      	ldr	r3, [r0, #4]
   140f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   140f6:	f043 0301 	orr.w	r3, r3, #1
   140fa:	6043      	str	r3, [r0, #4]
   140fc:	bcf0      	pop	{r4, r5, r6, r7}
   140fe:	4770      	bx	lr
   14100:	20020f58 	.word	0x20020f58
   14104:	20020f54 	.word	0x20020f54

00014108 <rpc_transport_ipc_tx_data_alloc>:
   14108:	4b03      	ldr	r3, [pc, #12]	; (14118 <rpc_transport_ipc_tx_data_alloc+0x10>)
   1410a:	781b      	ldrb	r3, [r3, #0]
   1410c:	b90b      	cbnz	r3, 14112 <rpc_transport_ipc_tx_data_alloc+0xa>
   1410e:	f005 beb7 	b.w	19e80 <nrf_shared_malloc>
   14112:	2000      	movs	r0, #0
   14114:	4770      	bx	lr
   14116:	bf00      	nop
   14118:	20021d71 	.word	0x20021d71

0001411c <rpc_transport_ipc_tx_suspend>:
   1411c:	2201      	movs	r2, #1
   1411e:	4b01      	ldr	r3, [pc, #4]	; (14124 <rpc_transport_ipc_tx_suspend+0x8>)
   14120:	701a      	strb	r2, [r3, #0]
   14122:	4770      	bx	lr
   14124:	20021d71 	.word	0x20021d71

00014128 <secure_client_socket>:
   14128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1412c:	f04f 3cff 	mov.w	ip, #4294967295
   14130:	460c      	mov	r4, r1
   14132:	680b      	ldr	r3, [r1, #0]
   14134:	4f46      	ldr	r7, [pc, #280]	; (14250 <secure_client_socket+0x128>)
   14136:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1413a:	600b      	str	r3, [r1, #0]
   1413c:	680b      	ldr	r3, [r1, #0]
   1413e:	00c6      	lsls	r6, r0, #3
   14140:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14144:	600b      	str	r3, [r1, #0]
   14146:	eb07 0a06 	add.w	sl, r7, r6
   1414a:	b084      	sub	sp, #16
   1414c:	f8da 3004 	ldr.w	r3, [sl, #4]
   14150:	6989      	ldr	r1, [r1, #24]
   14152:	f247 0281 	movw	r2, #28801	; 0x7081
   14156:	4605      	mov	r5, r0
   14158:	f8d4 8000 	ldr.w	r8, [r4]
   1415c:	e9cd cc02 	strd	ip, ip, [sp, #8]
   14160:	f000 fcfc 	bl	14b5c <ip_interface_request_create>
   14164:	2800      	cmp	r0, #0
   14166:	d06d      	beq.n	14244 <secure_client_socket+0x11c>
   14168:	f8da 2004 	ldr.w	r2, [sl, #4]
   1416c:	4681      	mov	r9, r0
   1416e:	2a00      	cmp	r2, #0
   14170:	d15d      	bne.n	1422e <secure_client_socket+0x106>
   14172:	4b38      	ldr	r3, [pc, #224]	; (14254 <secure_client_socket+0x12c>)
   14174:	1971      	adds	r1, r6, r5
   14176:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1417a:	2224      	movs	r2, #36	; 0x24
   1417c:	f109 0014 	add.w	r0, r9, #20
   14180:	f008 fd69 	bl	1cc56 <memcpy>
   14184:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14188:	4649      	mov	r1, r9
   1418a:	3324      	adds	r3, #36	; 0x24
   1418c:	f8c9 3008 	str.w	r3, [r9, #8]
   14190:	6822      	ldr	r2, [r4, #0]
   14192:	4643      	mov	r3, r8
   14194:	0c12      	lsrs	r2, r2, #16
   14196:	0412      	lsls	r2, r2, #16
   14198:	f042 020a 	orr.w	r2, r2, #10
   1419c:	6022      	str	r2, [r4, #0]
   1419e:	4620      	mov	r0, r4
   141a0:	f247 0281 	movw	r2, #28801	; 0x7081
   141a4:	f000 fcfa 	bl	14b9c <ip_interface_request_send>
   141a8:	4603      	mov	r3, r0
   141aa:	b968      	cbnz	r0, 141c8 <secure_client_socket+0xa0>
   141ac:	6823      	ldr	r3, [r4, #0]
   141ae:	00db      	lsls	r3, r3, #3
   141b0:	d40e      	bmi.n	141d0 <secure_client_socket+0xa8>
   141b2:	ab03      	add	r3, sp, #12
   141b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   141b8:	210b      	movs	r1, #11
   141ba:	4628      	mov	r0, r5
   141bc:	f000 fd02 	bl	14bc4 <ip_interface_wait>
   141c0:	4603      	mov	r3, r0
   141c2:	b150      	cbz	r0, 141da <secure_client_socket+0xb2>
   141c4:	f8c4 8000 	str.w	r8, [r4]
   141c8:	4618      	mov	r0, r3
   141ca:	b004      	add	sp, #16
   141cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   141d0:	2373      	movs	r3, #115	; 0x73
   141d2:	4618      	mov	r0, r3
   141d4:	b004      	add	sp, #16
   141d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   141da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   141de:	ab02      	add	r3, sp, #8
   141e0:	4611      	mov	r1, r2
   141e2:	4628      	mov	r0, r5
   141e4:	f000 fcee 	bl	14bc4 <ip_interface_wait>
   141e8:	4603      	mov	r3, r0
   141ea:	bb30      	cbnz	r0, 1423a <secure_client_socket+0x112>
   141ec:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   141f0:	b138      	cbz	r0, 14202 <secure_client_socket+0xda>
   141f2:	9301      	str	r3, [sp, #4]
   141f4:	f005 fe38 	bl	19e68 <nrf_free>
   141f8:	9b01      	ldr	r3, [sp, #4]
   141fa:	443e      	add	r6, r7
   141fc:	6073      	str	r3, [r6, #4]
   141fe:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   14202:	4618      	mov	r0, r3
   14204:	6822      	ldr	r2, [r4, #0]
   14206:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   1420a:	6022      	str	r2, [r4, #0]
   1420c:	6822      	ldr	r2, [r4, #0]
   1420e:	0c12      	lsrs	r2, r2, #16
   14210:	0412      	lsls	r2, r2, #16
   14212:	f042 020c 	orr.w	r2, r2, #12
   14216:	6022      	str	r2, [r4, #0]
   14218:	6822      	ldr	r2, [r4, #0]
   1421a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1421e:	6022      	str	r2, [r4, #0]
   14220:	6822      	ldr	r2, [r4, #0]
   14222:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   14226:	6022      	str	r2, [r4, #0]
   14228:	b004      	add	sp, #16
   1422a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1422e:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   14232:	6800      	ldr	r0, [r0, #0]
   14234:	f008 fd0f 	bl	1cc56 <memcpy>
   14238:	e79b      	b.n	14172 <secure_client_socket+0x4a>
   1423a:	2b73      	cmp	r3, #115	; 0x73
   1423c:	d0c4      	beq.n	141c8 <secure_client_socket+0xa0>
   1423e:	f8c4 8000 	str.w	r8, [r4]
   14242:	e7c1      	b.n	141c8 <secure_client_socket+0xa0>
   14244:	230c      	movs	r3, #12
   14246:	4618      	mov	r0, r3
   14248:	b004      	add	sp, #16
   1424a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1424e:	bf00      	nop
   14250:	200210c0 	.word	0x200210c0
   14254:	20020f7c 	.word	0x20020f7c

00014258 <tls_interface_init>:
   14258:	2000      	movs	r0, #0
   1425a:	4770      	bx	lr

0001425c <tls_interface_open>:
   1425c:	b538      	push	{r3, r4, r5, lr}
   1425e:	1e4b      	subs	r3, r1, #1
   14260:	2b01      	cmp	r3, #1
   14262:	d808      	bhi.n	14276 <tls_interface_open+0x1a>
   14264:	4614      	mov	r4, r2
   14266:	b162      	cbz	r2, 14282 <tls_interface_open+0x26>
   14268:	2901      	cmp	r1, #1
   1426a:	d02d      	beq.n	142c8 <tls_interface_open+0x6c>
   1426c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   14270:	bf08      	it	eq
   14272:	2202      	moveq	r2, #2
   14274:	d00d      	beq.n	14292 <tls_interface_open+0x36>
   14276:	2029      	movs	r0, #41	; 0x29
   14278:	f7fd ffae 	bl	121d8 <bsd_os_errno_set>
   1427c:	f04f 35ff 	mov.w	r5, #4294967295
   14280:	e020      	b.n	142c4 <tls_interface_open+0x68>
   14282:	2901      	cmp	r1, #1
   14284:	bf0b      	itete	eq
   14286:	2201      	moveq	r2, #1
   14288:	2202      	movne	r2, #2
   1428a:	f44f 7482 	moveq.w	r4, #260	; 0x104
   1428e:	f44f 7487 	movne.w	r4, #270	; 0x10e
   14292:	f000 fcc9 	bl	14c28 <ip_interface_open>
   14296:	1e05      	subs	r5, r0, #0
   14298:	db1b      	blt.n	142d2 <tls_interface_open+0x76>
   1429a:	4b0f      	ldr	r3, [pc, #60]	; (142d8 <tls_interface_open+0x7c>)
   1429c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   142a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   142a4:	2224      	movs	r2, #36	; 0x24
   142a6:	490d      	ldr	r1, [pc, #52]	; (142dc <tls_interface_open+0x80>)
   142a8:	f008 fcd5 	bl	1cc56 <memcpy>
   142ac:	4628      	mov	r0, r5
   142ae:	f006 fa35 	bl	1a71c <interface_socket_from_handle_get>
   142b2:	6803      	ldr	r3, [r0, #0]
   142b4:	6144      	str	r4, [r0, #20]
   142b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   142ba:	6003      	str	r3, [r0, #0]
   142bc:	6803      	ldr	r3, [r0, #0]
   142be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   142c2:	6003      	str	r3, [r0, #0]
   142c4:	4628      	mov	r0, r5
   142c6:	bd38      	pop	{r3, r4, r5, pc}
   142c8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   142cc:	d1d3      	bne.n	14276 <tls_interface_open+0x1a>
   142ce:	460a      	mov	r2, r1
   142d0:	e7df      	b.n	14292 <tls_interface_open+0x36>
   142d2:	f04f 35ff 	mov.w	r5, #4294967295
   142d6:	e7f5      	b.n	142c4 <tls_interface_open+0x68>
   142d8:	20020f7c 	.word	0x20020f7c
   142dc:	00020dd4 	.word	0x00020dd4

000142e0 <tls_interface_close>:
   142e0:	b538      	push	{r3, r4, r5, lr}
   142e2:	4604      	mov	r4, r0
   142e4:	f006 fa1a 	bl	1a71c <interface_socket_from_handle_get>
   142e8:	b180      	cbz	r0, 1430c <tls_interface_close+0x2c>
   142ea:	4d0b      	ldr	r5, [pc, #44]	; (14318 <tls_interface_close+0x38>)
   142ec:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   142f0:	b138      	cbz	r0, 14302 <tls_interface_close+0x22>
   142f2:	f005 fdb9 	bl	19e68 <nrf_free>
   142f6:	2300      	movs	r3, #0
   142f8:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   142fc:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   14300:	6053      	str	r3, [r2, #4]
   14302:	4620      	mov	r0, r4
   14304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14308:	f000 bd54 	b.w	14db4 <ip_interface_close>
   1430c:	2009      	movs	r0, #9
   1430e:	f7fd ff63 	bl	121d8 <bsd_os_errno_set>
   14312:	f04f 30ff 	mov.w	r0, #4294967295
   14316:	bd38      	pop	{r3, r4, r5, pc}
   14318:	200210c0 	.word	0x200210c0

0001431c <tls_interface_sendto>:
   1431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14320:	460d      	mov	r5, r1
   14322:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   14326:	4616      	mov	r6, r2
   14328:	461f      	mov	r7, r3
   1432a:	4604      	mov	r4, r0
   1432c:	f006 f9f6 	bl	1a71c <interface_socket_from_handle_get>
   14330:	2800      	cmp	r0, #0
   14332:	d03b      	beq.n	143ac <tls_interface_sendto+0x90>
   14334:	6803      	ldr	r3, [r0, #0]
   14336:	b29b      	uxth	r3, r3
   14338:	2b0c      	cmp	r3, #12
   1433a:	d039      	beq.n	143b0 <tls_interface_sendto+0x94>
   1433c:	6803      	ldr	r3, [r0, #0]
   1433e:	b29b      	uxth	r3, r3
   14340:	2b0b      	cmp	r3, #11
   14342:	d111      	bne.n	14368 <tls_interface_sendto+0x4c>
   14344:	4b20      	ldr	r3, [pc, #128]	; (143c8 <tls_interface_sendto+0xac>)
   14346:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1434a:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   1434e:	2b02      	cmp	r3, #2
   14350:	d038      	beq.n	143c4 <tls_interface_sendto+0xa8>
   14352:	6903      	ldr	r3, [r0, #16]
   14354:	2b01      	cmp	r3, #1
   14356:	bf14      	ite	ne
   14358:	2039      	movne	r0, #57	; 0x39
   1435a:	202a      	moveq	r0, #42	; 0x2a
   1435c:	f7fd ff3c 	bl	121d8 <bsd_os_errno_set>
   14360:	f04f 30ff 	mov.w	r0, #4294967295
   14364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14368:	6903      	ldr	r3, [r0, #16]
   1436a:	2b01      	cmp	r3, #1
   1436c:	d00b      	beq.n	14386 <tls_interface_sendto+0x6a>
   1436e:	2b02      	cmp	r3, #2
   14370:	d001      	beq.n	14376 <tls_interface_sendto+0x5a>
   14372:	2039      	movs	r0, #57	; 0x39
   14374:	e7f2      	b.n	1435c <tls_interface_sendto+0x40>
   14376:	6803      	ldr	r3, [r0, #0]
   14378:	b29b      	uxth	r3, r3
   1437a:	2b02      	cmp	r3, #2
   1437c:	d007      	beq.n	1438e <tls_interface_sendto+0x72>
   1437e:	6803      	ldr	r3, [r0, #0]
   14380:	b29b      	uxth	r3, r3
   14382:	2b04      	cmp	r3, #4
   14384:	d003      	beq.n	1438e <tls_interface_sendto+0x72>
   14386:	6803      	ldr	r3, [r0, #0]
   14388:	b29b      	uxth	r3, r3
   1438a:	2b05      	cmp	r3, #5
   1438c:	d1f1      	bne.n	14372 <tls_interface_sendto+0x56>
   1438e:	4b0e      	ldr	r3, [pc, #56]	; (143c8 <tls_interface_sendto+0xac>)
   14390:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   14394:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   14398:	2b02      	cmp	r3, #2
   1439a:	d1ea      	bne.n	14372 <tls_interface_sendto+0x56>
   1439c:	4601      	mov	r1, r0
   1439e:	4620      	mov	r0, r4
   143a0:	f7ff fec2 	bl	14128 <secure_client_socket>
   143a4:	2800      	cmp	r0, #0
   143a6:	d003      	beq.n	143b0 <tls_interface_sendto+0x94>
   143a8:	dcd8      	bgt.n	1435c <tls_interface_sendto+0x40>
   143aa:	e7d9      	b.n	14360 <tls_interface_sendto+0x44>
   143ac:	2009      	movs	r0, #9
   143ae:	e7d5      	b.n	1435c <tls_interface_sendto+0x40>
   143b0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   143b4:	463b      	mov	r3, r7
   143b6:	4632      	mov	r2, r6
   143b8:	4629      	mov	r1, r5
   143ba:	4620      	mov	r0, r4
   143bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   143c0:	f000 bd6a 	b.w	14e98 <ip_interface_sendto>
   143c4:	2023      	movs	r0, #35	; 0x23
   143c6:	e7c9      	b.n	1435c <tls_interface_sendto+0x40>
   143c8:	20020f7c 	.word	0x20020f7c

000143cc <tls_interface_recvfrom>:
   143cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   143d0:	460d      	mov	r5, r1
   143d2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   143d6:	4616      	mov	r6, r2
   143d8:	461f      	mov	r7, r3
   143da:	4604      	mov	r4, r0
   143dc:	f006 f99e 	bl	1a71c <interface_socket_from_handle_get>
   143e0:	2800      	cmp	r0, #0
   143e2:	d038      	beq.n	14456 <tls_interface_recvfrom+0x8a>
   143e4:	6803      	ldr	r3, [r0, #0]
   143e6:	b29b      	uxth	r3, r3
   143e8:	2b0c      	cmp	r3, #12
   143ea:	d00f      	beq.n	1440c <tls_interface_recvfrom+0x40>
   143ec:	6803      	ldr	r3, [r0, #0]
   143ee:	b29b      	uxth	r3, r3
   143f0:	2b0d      	cmp	r3, #13
   143f2:	d00b      	beq.n	1440c <tls_interface_recvfrom+0x40>
   143f4:	6903      	ldr	r3, [r0, #16]
   143f6:	2b01      	cmp	r3, #1
   143f8:	d01a      	beq.n	14430 <tls_interface_recvfrom+0x64>
   143fa:	2b02      	cmp	r3, #2
   143fc:	d010      	beq.n	14420 <tls_interface_recvfrom+0x54>
   143fe:	2023      	movs	r0, #35	; 0x23
   14400:	f7fd feea 	bl	121d8 <bsd_os_errno_set>
   14404:	f04f 30ff 	mov.w	r0, #4294967295
   14408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1440c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   14410:	463b      	mov	r3, r7
   14412:	4632      	mov	r2, r6
   14414:	4629      	mov	r1, r5
   14416:	4620      	mov	r0, r4
   14418:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1441c:	f000 bea2 	b.w	15164 <ip_interface_recvfrom>
   14420:	6803      	ldr	r3, [r0, #0]
   14422:	b29b      	uxth	r3, r3
   14424:	2b02      	cmp	r3, #2
   14426:	d007      	beq.n	14438 <tls_interface_recvfrom+0x6c>
   14428:	6803      	ldr	r3, [r0, #0]
   1442a:	b29b      	uxth	r3, r3
   1442c:	2b04      	cmp	r3, #4
   1442e:	d003      	beq.n	14438 <tls_interface_recvfrom+0x6c>
   14430:	6803      	ldr	r3, [r0, #0]
   14432:	b29b      	uxth	r3, r3
   14434:	2b05      	cmp	r3, #5
   14436:	d1e2      	bne.n	143fe <tls_interface_recvfrom+0x32>
   14438:	4b08      	ldr	r3, [pc, #32]	; (1445c <tls_interface_recvfrom+0x90>)
   1443a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1443e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   14442:	2b02      	cmp	r3, #2
   14444:	d1db      	bne.n	143fe <tls_interface_recvfrom+0x32>
   14446:	4601      	mov	r1, r0
   14448:	4620      	mov	r0, r4
   1444a:	f7ff fe6d 	bl	14128 <secure_client_socket>
   1444e:	2800      	cmp	r0, #0
   14450:	d0dc      	beq.n	1440c <tls_interface_recvfrom+0x40>
   14452:	dcd5      	bgt.n	14400 <tls_interface_recvfrom+0x34>
   14454:	e7d6      	b.n	14404 <tls_interface_recvfrom+0x38>
   14456:	2009      	movs	r0, #9
   14458:	e7d2      	b.n	14400 <tls_interface_recvfrom+0x34>
   1445a:	bf00      	nop
   1445c:	20020f7c 	.word	0x20020f7c

00014460 <tls_interface_bind>:
   14460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14464:	b082      	sub	sp, #8
   14466:	460e      	mov	r6, r1
   14468:	4617      	mov	r7, r2
   1446a:	4605      	mov	r5, r0
   1446c:	f006 f956 	bl	1a71c <interface_socket_from_handle_get>
   14470:	2800      	cmp	r0, #0
   14472:	d069      	beq.n	14548 <tls_interface_bind+0xe8>
   14474:	6803      	ldr	r3, [r0, #0]
   14476:	4604      	mov	r4, r0
   14478:	b29b      	uxth	r3, r3
   1447a:	2b02      	cmp	r3, #2
   1447c:	d158      	bne.n	14530 <tls_interface_bind+0xd0>
   1447e:	463a      	mov	r2, r7
   14480:	4631      	mov	r1, r6
   14482:	4628      	mov	r0, r5
   14484:	f001 f858 	bl	15538 <ip_interface_bind>
   14488:	2800      	cmp	r0, #0
   1448a:	d148      	bne.n	1451e <tls_interface_bind+0xbe>
   1448c:	00ee      	lsls	r6, r5, #3
   1448e:	4f2f      	ldr	r7, [pc, #188]	; (1454c <tls_interface_bind+0xec>)
   14490:	1973      	adds	r3, r6, r5
   14492:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   14496:	2b01      	cmp	r3, #1
   14498:	d002      	beq.n	144a0 <tls_interface_bind+0x40>
   1449a:	b002      	add	sp, #8
   1449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   144a0:	f04f 3cff 	mov.w	ip, #4294967295
   144a4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 14550 <tls_interface_bind+0xf0>
   144a8:	f247 0281 	movw	r2, #28801	; 0x7081
   144ac:	eb0a 0906 	add.w	r9, sl, r6
   144b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   144b4:	69a1      	ldr	r1, [r4, #24]
   144b6:	4628      	mov	r0, r5
   144b8:	f8cd c004 	str.w	ip, [sp, #4]
   144bc:	f000 fb4e 	bl	14b5c <ip_interface_request_create>
   144c0:	4680      	mov	r8, r0
   144c2:	2800      	cmp	r0, #0
   144c4:	d03e      	beq.n	14544 <tls_interface_bind+0xe4>
   144c6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   144ca:	bbaa      	cbnz	r2, 14538 <tls_interface_bind+0xd8>
   144cc:	1971      	adds	r1, r6, r5
   144ce:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   144d2:	2224      	movs	r2, #36	; 0x24
   144d4:	f108 0014 	add.w	r0, r8, #20
   144d8:	f008 fbbd 	bl	1cc56 <memcpy>
   144dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   144e0:	4641      	mov	r1, r8
   144e2:	3324      	adds	r3, #36	; 0x24
   144e4:	f8c8 3008 	str.w	r3, [r8, #8]
   144e8:	6822      	ldr	r2, [r4, #0]
   144ea:	2304      	movs	r3, #4
   144ec:	0c12      	lsrs	r2, r2, #16
   144ee:	0412      	lsls	r2, r2, #16
   144f0:	f042 020a 	orr.w	r2, r2, #10
   144f4:	6022      	str	r2, [r4, #0]
   144f6:	4620      	mov	r0, r4
   144f8:	f247 0281 	movw	r2, #28801	; 0x7081
   144fc:	f000 fb4e 	bl	14b9c <ip_interface_request_send>
   14500:	b968      	cbnz	r0, 1451e <tls_interface_bind+0xbe>
   14502:	6823      	ldr	r3, [r4, #0]
   14504:	00db      	lsls	r3, r3, #3
   14506:	d415      	bmi.n	14534 <tls_interface_bind+0xd4>
   14508:	4628      	mov	r0, r5
   1450a:	ab01      	add	r3, sp, #4
   1450c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14510:	210b      	movs	r1, #11
   14512:	f000 fb57 	bl	14bc4 <ip_interface_wait>
   14516:	2800      	cmp	r0, #0
   14518:	d0bf      	beq.n	1449a <tls_interface_bind+0x3a>
   1451a:	2304      	movs	r3, #4
   1451c:	6023      	str	r3, [r4, #0]
   1451e:	2800      	cmp	r0, #0
   14520:	ddbb      	ble.n	1449a <tls_interface_bind+0x3a>
   14522:	f7fd fe59 	bl	121d8 <bsd_os_errno_set>
   14526:	f04f 30ff 	mov.w	r0, #4294967295
   1452a:	b002      	add	sp, #8
   1452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14530:	202d      	movs	r0, #45	; 0x2d
   14532:	e7f6      	b.n	14522 <tls_interface_bind+0xc2>
   14534:	2073      	movs	r0, #115	; 0x73
   14536:	e7f4      	b.n	14522 <tls_interface_bind+0xc2>
   14538:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1453c:	6800      	ldr	r0, [r0, #0]
   1453e:	f008 fb8a 	bl	1cc56 <memcpy>
   14542:	e7c3      	b.n	144cc <tls_interface_bind+0x6c>
   14544:	200c      	movs	r0, #12
   14546:	e7ec      	b.n	14522 <tls_interface_bind+0xc2>
   14548:	2009      	movs	r0, #9
   1454a:	e7ea      	b.n	14522 <tls_interface_bind+0xc2>
   1454c:	20020f7c 	.word	0x20020f7c
   14550:	200210c0 	.word	0x200210c0

00014554 <tls_interface_connect>:
   14554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14556:	460e      	mov	r6, r1
   14558:	4617      	mov	r7, r2
   1455a:	4604      	mov	r4, r0
   1455c:	f006 f8de 	bl	1a71c <interface_socket_from_handle_get>
   14560:	b1e8      	cbz	r0, 1459e <tls_interface_connect+0x4a>
   14562:	4b13      	ldr	r3, [pc, #76]	; (145b0 <tls_interface_connect+0x5c>)
   14564:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   14568:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1456c:	2b02      	cmp	r3, #2
   1456e:	d11c      	bne.n	145aa <tls_interface_connect+0x56>
   14570:	6803      	ldr	r3, [r0, #0]
   14572:	4605      	mov	r5, r0
   14574:	b29b      	uxth	r3, r3
   14576:	2b02      	cmp	r3, #2
   14578:	d003      	beq.n	14582 <tls_interface_connect+0x2e>
   1457a:	6803      	ldr	r3, [r0, #0]
   1457c:	b29b      	uxth	r3, r3
   1457e:	2b04      	cmp	r3, #4
   14580:	d113      	bne.n	145aa <tls_interface_connect+0x56>
   14582:	463a      	mov	r2, r7
   14584:	4631      	mov	r1, r6
   14586:	4620      	mov	r0, r4
   14588:	f000 ff14 	bl	153b4 <ip_interface_connect>
   1458c:	b110      	cbz	r0, 14594 <tls_interface_connect+0x40>
   1458e:	2800      	cmp	r0, #0
   14590:	dc06      	bgt.n	145a0 <tls_interface_connect+0x4c>
   14592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14594:	4629      	mov	r1, r5
   14596:	4620      	mov	r0, r4
   14598:	f7ff fdc6 	bl	14128 <secure_client_socket>
   1459c:	e7f7      	b.n	1458e <tls_interface_connect+0x3a>
   1459e:	2009      	movs	r0, #9
   145a0:	f7fd fe1a 	bl	121d8 <bsd_os_errno_set>
   145a4:	f04f 30ff 	mov.w	r0, #4294967295
   145a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145aa:	202d      	movs	r0, #45	; 0x2d
   145ac:	e7f8      	b.n	145a0 <tls_interface_connect+0x4c>
   145ae:	bf00      	nop
   145b0:	20020f7c 	.word	0x20020f7c

000145b4 <tls_interface_listen>:
   145b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145b8:	b085      	sub	sp, #20
   145ba:	9101      	str	r1, [sp, #4]
   145bc:	4605      	mov	r5, r0
   145be:	f006 f8ad 	bl	1a71c <interface_socket_from_handle_get>
   145c2:	2800      	cmp	r0, #0
   145c4:	d07c      	beq.n	146c0 <tls_interface_listen+0x10c>
   145c6:	6903      	ldr	r3, [r0, #16]
   145c8:	4604      	mov	r4, r0
   145ca:	2b01      	cmp	r3, #1
   145cc:	d176      	bne.n	146bc <tls_interface_listen+0x108>
   145ce:	6803      	ldr	r3, [r0, #0]
   145d0:	b29b      	uxth	r3, r3
   145d2:	2b04      	cmp	r3, #4
   145d4:	d062      	beq.n	1469c <tls_interface_listen+0xe8>
   145d6:	6823      	ldr	r3, [r4, #0]
   145d8:	b29b      	uxth	r3, r3
   145da:	2b0b      	cmp	r3, #11
   145dc:	d16e      	bne.n	146bc <tls_interface_listen+0x108>
   145de:	00ee      	lsls	r6, r5, #3
   145e0:	4f38      	ldr	r7, [pc, #224]	; (146c4 <tls_interface_listen+0x110>)
   145e2:	1973      	adds	r3, r6, r5
   145e4:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   145e8:	2b01      	cmp	r3, #1
   145ea:	d167      	bne.n	146bc <tls_interface_listen+0x108>
   145ec:	2201      	movs	r2, #1
   145ee:	f04f 3cff 	mov.w	ip, #4294967295
   145f2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 146c8 <tls_interface_listen+0x114>
   145f6:	1973      	adds	r3, r6, r5
   145f8:	00ee      	lsls	r6, r5, #3
   145fa:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   145fe:	eb09 0806 	add.w	r8, r9, r6
   14602:	69a1      	ldr	r1, [r4, #24]
   14604:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14608:	f247 0281 	movw	r2, #28801	; 0x7081
   1460c:	4628      	mov	r0, r5
   1460e:	f8d4 a000 	ldr.w	sl, [r4]
   14612:	f8cd c00c 	str.w	ip, [sp, #12]
   14616:	f000 faa1 	bl	14b5c <ip_interface_request_create>
   1461a:	4683      	mov	fp, r0
   1461c:	2800      	cmp	r0, #0
   1461e:	d04b      	beq.n	146b8 <tls_interface_listen+0x104>
   14620:	f8d8 2004 	ldr.w	r2, [r8, #4]
   14624:	2a00      	cmp	r2, #0
   14626:	d141      	bne.n	146ac <tls_interface_listen+0xf8>
   14628:	1971      	adds	r1, r6, r5
   1462a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1462e:	2224      	movs	r2, #36	; 0x24
   14630:	f10b 0014 	add.w	r0, fp, #20
   14634:	f008 fb0f 	bl	1cc56 <memcpy>
   14638:	f8db 2008 	ldr.w	r2, [fp, #8]
   1463c:	4659      	mov	r1, fp
   1463e:	3224      	adds	r2, #36	; 0x24
   14640:	f8cb 2008 	str.w	r2, [fp, #8]
   14644:	6822      	ldr	r2, [r4, #0]
   14646:	4653      	mov	r3, sl
   14648:	0c12      	lsrs	r2, r2, #16
   1464a:	0412      	lsls	r2, r2, #16
   1464c:	f042 020a 	orr.w	r2, r2, #10
   14650:	6022      	str	r2, [r4, #0]
   14652:	4620      	mov	r0, r4
   14654:	f247 0281 	movw	r2, #28801	; 0x7081
   14658:	f000 faa0 	bl	14b9c <ip_interface_request_send>
   1465c:	b960      	cbnz	r0, 14678 <tls_interface_listen+0xc4>
   1465e:	6823      	ldr	r3, [r4, #0]
   14660:	00db      	lsls	r3, r3, #3
   14662:	d40e      	bmi.n	14682 <tls_interface_listen+0xce>
   14664:	ab03      	add	r3, sp, #12
   14666:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1466a:	210b      	movs	r1, #11
   1466c:	4628      	mov	r0, r5
   1466e:	f000 faa9 	bl	14bc4 <ip_interface_wait>
   14672:	b170      	cbz	r0, 14692 <tls_interface_listen+0xde>
   14674:	f8c4 a000 	str.w	sl, [r4]
   14678:	2800      	cmp	r0, #0
   1467a:	dc03      	bgt.n	14684 <tls_interface_listen+0xd0>
   1467c:	b005      	add	sp, #20
   1467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14682:	2073      	movs	r0, #115	; 0x73
   14684:	f7fd fda8 	bl	121d8 <bsd_os_errno_set>
   14688:	f04f 30ff 	mov.w	r0, #4294967295
   1468c:	b005      	add	sp, #20
   1468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14692:	9901      	ldr	r1, [sp, #4]
   14694:	4628      	mov	r0, r5
   14696:	f000 fff1 	bl	1567c <ip_interface_listen>
   1469a:	e7ed      	b.n	14678 <tls_interface_listen+0xc4>
   1469c:	00ee      	lsls	r6, r5, #3
   1469e:	4f09      	ldr	r7, [pc, #36]	; (146c4 <tls_interface_listen+0x110>)
   146a0:	1973      	adds	r3, r6, r5
   146a2:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   146a6:	2b02      	cmp	r3, #2
   146a8:	d195      	bne.n	145d6 <tls_interface_listen+0x22>
   146aa:	e79f      	b.n	145ec <tls_interface_listen+0x38>
   146ac:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   146b0:	6800      	ldr	r0, [r0, #0]
   146b2:	f008 fad0 	bl	1cc56 <memcpy>
   146b6:	e7b7      	b.n	14628 <tls_interface_listen+0x74>
   146b8:	200c      	movs	r0, #12
   146ba:	e7e3      	b.n	14684 <tls_interface_listen+0xd0>
   146bc:	202d      	movs	r0, #45	; 0x2d
   146be:	e7e1      	b.n	14684 <tls_interface_listen+0xd0>
   146c0:	2009      	movs	r0, #9
   146c2:	e7df      	b.n	14684 <tls_interface_listen+0xd0>
   146c4:	20020f7c 	.word	0x20020f7c
   146c8:	200210c0 	.word	0x200210c0

000146cc <tls_interface_accept>:
   146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146d0:	b082      	sub	sp, #8
   146d2:	460e      	mov	r6, r1
   146d4:	4617      	mov	r7, r2
   146d6:	4698      	mov	r8, r3
   146d8:	4605      	mov	r5, r0
   146da:	f04f 34ff 	mov.w	r4, #4294967295
   146de:	f006 f81d 	bl	1a71c <interface_socket_from_handle_get>
   146e2:	9401      	str	r4, [sp, #4]
   146e4:	2800      	cmp	r0, #0
   146e6:	d03c      	beq.n	14762 <tls_interface_accept+0x96>
   146e8:	6800      	ldr	r0, [r0, #0]
   146ea:	b280      	uxth	r0, r0
   146ec:	2806      	cmp	r0, #6
   146ee:	d138      	bne.n	14762 <tls_interface_accept+0x96>
   146f0:	4643      	mov	r3, r8
   146f2:	463a      	mov	r2, r7
   146f4:	4631      	mov	r1, r6
   146f6:	4628      	mov	r0, r5
   146f8:	f001 f838 	bl	1576c <ip_interface_accept>
   146fc:	4604      	mov	r4, r0
   146fe:	b128      	cbz	r0, 1470c <tls_interface_accept+0x40>
   14700:	2c00      	cmp	r4, #0
   14702:	dc2f      	bgt.n	14764 <tls_interface_accept+0x98>
   14704:	4620      	mov	r0, r4
   14706:	b002      	add	sp, #8
   14708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1470c:	4628      	mov	r0, r5
   1470e:	f006 f805 	bl	1a71c <interface_socket_from_handle_get>
   14712:	6803      	ldr	r3, [r0, #0]
   14714:	4f18      	ldr	r7, [pc, #96]	; (14778 <tls_interface_accept+0xac>)
   14716:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1471a:	6003      	str	r3, [r0, #0]
   1471c:	6803      	ldr	r3, [r0, #0]
   1471e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14726:	4606      	mov	r6, r0
   14728:	6003      	str	r3, [r0, #0]
   1472a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   1472e:	2224      	movs	r2, #36	; 0x24
   14730:	4638      	mov	r0, r7
   14732:	f008 fa90 	bl	1cc56 <memcpy>
   14736:	2302      	movs	r3, #2
   14738:	703b      	strb	r3, [r7, #0]
   1473a:	6833      	ldr	r3, [r6, #0]
   1473c:	4620      	mov	r0, r4
   1473e:	0c1b      	lsrs	r3, r3, #16
   14740:	041b      	lsls	r3, r3, #16
   14742:	f043 030b 	orr.w	r3, r3, #11
   14746:	6033      	str	r3, [r6, #0]
   14748:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1474c:	ab01      	add	r3, sp, #4
   1474e:	210c      	movs	r1, #12
   14750:	f000 fa38 	bl	14bc4 <ip_interface_wait>
   14754:	4604      	mov	r4, r0
   14756:	2800      	cmp	r0, #0
   14758:	d0d4      	beq.n	14704 <tls_interface_accept+0x38>
   1475a:	2000      	movs	r0, #0
   1475c:	f000 fb2a 	bl	14db4 <ip_interface_close>
   14760:	e7ce      	b.n	14700 <tls_interface_accept+0x34>
   14762:	2409      	movs	r4, #9
   14764:	4620      	mov	r0, r4
   14766:	f04f 34ff 	mov.w	r4, #4294967295
   1476a:	f7fd fd35 	bl	121d8 <bsd_os_errno_set>
   1476e:	4620      	mov	r0, r4
   14770:	b002      	add	sp, #8
   14772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14776:	bf00      	nop
   14778:	20020f7c 	.word	0x20020f7c

0001477c <tls_interface_setopt>:
   1477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14780:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   14784:	9e06      	ldr	r6, [sp, #24]
   14786:	d11e      	bne.n	147c6 <tls_interface_setopt+0x4a>
   14788:	461f      	mov	r7, r3
   1478a:	4605      	mov	r5, r0
   1478c:	2b00      	cmp	r3, #0
   1478e:	f000 808c 	beq.w	148aa <tls_interface_setopt+0x12e>
   14792:	4690      	mov	r8, r2
   14794:	f005 ffc2 	bl	1a71c <interface_socket_from_handle_get>
   14798:	2800      	cmp	r0, #0
   1479a:	d07b      	beq.n	14894 <tls_interface_setopt+0x118>
   1479c:	6804      	ldr	r4, [r0, #0]
   1479e:	b2a4      	uxth	r4, r4
   147a0:	2c02      	cmp	r4, #2
   147a2:	d007      	beq.n	147b4 <tls_interface_setopt+0x38>
   147a4:	6803      	ldr	r3, [r0, #0]
   147a6:	b29b      	uxth	r3, r3
   147a8:	2b04      	cmp	r3, #4
   147aa:	d003      	beq.n	147b4 <tls_interface_setopt+0x38>
   147ac:	6803      	ldr	r3, [r0, #0]
   147ae:	b29b      	uxth	r3, r3
   147b0:	2b05      	cmp	r3, #5
   147b2:	d16f      	bne.n	14894 <tls_interface_setopt+0x118>
   147b4:	f108 32ff 	add.w	r2, r8, #4294967295
   147b8:	2a04      	cmp	r2, #4
   147ba:	d87c      	bhi.n	148b6 <tls_interface_setopt+0x13a>
   147bc:	e8df f002 	tbb	[pc, r2]
   147c0:	41324e24 	.word	0x41324e24
   147c4:	07          	.byte	0x07
   147c5:	00          	.byte	0x00
   147c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   147ca:	f001 b911 	b.w	159f0 <ip_interface_setopt>
   147ce:	4c3b      	ldr	r4, [pc, #236]	; (148bc <tls_interface_setopt+0x140>)
   147d0:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   147d4:	b138      	cbz	r0, 147e6 <tls_interface_setopt+0x6a>
   147d6:	f005 fb47 	bl	19e68 <nrf_free>
   147da:	2200      	movs	r2, #0
   147dc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   147e0:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   147e4:	605a      	str	r2, [r3, #4]
   147e6:	4630      	mov	r0, r6
   147e8:	b34e      	cbz	r6, 1483e <tls_interface_setopt+0xc2>
   147ea:	f005 fb33 	bl	19e54 <nrf_malloc>
   147ee:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   147f2:	2800      	cmp	r0, #0
   147f4:	d057      	beq.n	148a6 <tls_interface_setopt+0x12a>
   147f6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   147fa:	4632      	mov	r2, r6
   147fc:	4639      	mov	r1, r7
   147fe:	6066      	str	r6, [r4, #4]
   14800:	f008 fa29 	bl	1cc56 <memcpy>
   14804:	2000      	movs	r0, #0
   14806:	e01a      	b.n	1483e <tls_interface_setopt+0xc2>
   14808:	2e04      	cmp	r6, #4
   1480a:	d14a      	bne.n	148a2 <tls_interface_setopt+0x126>
   1480c:	6838      	ldr	r0, [r7, #0]
   1480e:	2800      	cmp	r0, #0
   14810:	d039      	beq.n	14886 <tls_interface_setopt+0x10a>
   14812:	2801      	cmp	r0, #1
   14814:	d145      	bne.n	148a2 <tls_interface_setopt+0x126>
   14816:	4a2a      	ldr	r2, [pc, #168]	; (148c0 <tls_interface_setopt+0x144>)
   14818:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1481c:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   14820:	2000      	movs	r0, #0
   14822:	e00c      	b.n	1483e <tls_interface_setopt+0xc2>
   14824:	2e01      	cmp	r6, #1
   14826:	d13c      	bne.n	148a2 <tls_interface_setopt+0x126>
   14828:	783a      	ldrb	r2, [r7, #0]
   1482a:	2000      	movs	r0, #0
   1482c:	3200      	adds	r2, #0
   1482e:	bf18      	it	ne
   14830:	2201      	movne	r2, #1
   14832:	4b23      	ldr	r3, [pc, #140]	; (148c0 <tls_interface_setopt+0x144>)
   14834:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   14838:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1483c:	7062      	strb	r2, [r4, #1]
   1483e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14842:	2e04      	cmp	r6, #4
   14844:	d12d      	bne.n	148a2 <tls_interface_setopt+0x126>
   14846:	683a      	ldr	r2, [r7, #0]
   14848:	2a02      	cmp	r2, #2
   1484a:	d82a      	bhi.n	148a2 <tls_interface_setopt+0x126>
   1484c:	4b1c      	ldr	r3, [pc, #112]	; (148c0 <tls_interface_setopt+0x144>)
   1484e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   14852:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   14856:	70a2      	strb	r2, [r4, #2]
   14858:	2000      	movs	r0, #0
   1485a:	e7f0      	b.n	1483e <tls_interface_setopt+0xc2>
   1485c:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   14860:	d01f      	beq.n	148a2 <tls_interface_setopt+0x126>
   14862:	f016 0403 	ands.w	r4, r6, #3
   14866:	d11c      	bne.n	148a2 <tls_interface_setopt+0x126>
   14868:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1486c:	00ad      	lsls	r5, r5, #2
   1486e:	4b14      	ldr	r3, [pc, #80]	; (148c0 <tls_interface_setopt+0x144>)
   14870:	1d28      	adds	r0, r5, #4
   14872:	4418      	add	r0, r3
   14874:	442b      	add	r3, r5
   14876:	4632      	mov	r2, r6
   14878:	4639      	mov	r1, r7
   1487a:	f883 c003 	strb.w	ip, [r3, #3]
   1487e:	f008 f9ea 	bl	1cc56 <memcpy>
   14882:	4620      	mov	r0, r4
   14884:	e7db      	b.n	1483e <tls_interface_setopt+0xc2>
   14886:	2102      	movs	r1, #2
   14888:	4a0d      	ldr	r2, [pc, #52]	; (148c0 <tls_interface_setopt+0x144>)
   1488a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1488e:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   14892:	e7d4      	b.n	1483e <tls_interface_setopt+0xc2>
   14894:	2009      	movs	r0, #9
   14896:	f7fd fc9f 	bl	121d8 <bsd_os_errno_set>
   1489a:	f04f 30ff 	mov.w	r0, #4294967295
   1489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148a2:	2016      	movs	r0, #22
   148a4:	e7f7      	b.n	14896 <tls_interface_setopt+0x11a>
   148a6:	200c      	movs	r0, #12
   148a8:	e7f5      	b.n	14896 <tls_interface_setopt+0x11a>
   148aa:	200e      	movs	r0, #14
   148ac:	f7fd fc94 	bl	121d8 <bsd_os_errno_set>
   148b0:	f04f 30ff 	mov.w	r0, #4294967295
   148b4:	e7c3      	b.n	1483e <tls_interface_setopt+0xc2>
   148b6:	202a      	movs	r0, #42	; 0x2a
   148b8:	e7ed      	b.n	14896 <tls_interface_setopt+0x11a>
   148ba:	bf00      	nop
   148bc:	200210c0 	.word	0x200210c0
   148c0:	20020f7c 	.word	0x20020f7c

000148c4 <tls_interface_getopt>:
   148c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148c8:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   148cc:	9f06      	ldr	r7, [sp, #24]
   148ce:	d112      	bne.n	148f6 <tls_interface_getopt+0x32>
   148d0:	461d      	mov	r5, r3
   148d2:	b16b      	cbz	r3, 148f0 <tls_interface_getopt+0x2c>
   148d4:	b167      	cbz	r7, 148f0 <tls_interface_getopt+0x2c>
   148d6:	4606      	mov	r6, r0
   148d8:	4614      	mov	r4, r2
   148da:	f005 ff1f 	bl	1a71c <interface_socket_from_handle_get>
   148de:	2800      	cmp	r0, #0
   148e0:	d04f      	beq.n	14982 <tls_interface_getopt+0xbe>
   148e2:	3c01      	subs	r4, #1
   148e4:	2c03      	cmp	r4, #3
   148e6:	d852      	bhi.n	1498e <tls_interface_getopt+0xca>
   148e8:	e8df f004 	tbb	[pc, r4]
   148ec:	09152139 	.word	0x09152139
   148f0:	200e      	movs	r0, #14
   148f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   148fa:	f001 b935 	b.w	15b68 <ip_interface_getopt>
   148fe:	683b      	ldr	r3, [r7, #0]
   14900:	2b04      	cmp	r3, #4
   14902:	d13c      	bne.n	1497e <tls_interface_getopt+0xba>
   14904:	4b23      	ldr	r3, [pc, #140]	; (14994 <tls_interface_getopt+0xd0>)
   14906:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1490a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1490e:	78b3      	ldrb	r3, [r6, #2]
   14910:	2000      	movs	r0, #0
   14912:	602b      	str	r3, [r5, #0]
   14914:	e7ed      	b.n	148f2 <tls_interface_getopt+0x2e>
   14916:	683b      	ldr	r3, [r7, #0]
   14918:	2b01      	cmp	r3, #1
   1491a:	d130      	bne.n	1497e <tls_interface_getopt+0xba>
   1491c:	4b1d      	ldr	r3, [pc, #116]	; (14994 <tls_interface_getopt+0xd0>)
   1491e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   14922:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   14926:	7873      	ldrb	r3, [r6, #1]
   14928:	2000      	movs	r0, #0
   1492a:	702b      	strb	r3, [r5, #0]
   1492c:	e7e1      	b.n	148f2 <tls_interface_getopt+0x2e>
   1492e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   14932:	4918      	ldr	r1, [pc, #96]	; (14994 <tls_interface_getopt+0xd0>)
   14934:	683b      	ldr	r3, [r7, #0]
   14936:	00b6      	lsls	r6, r6, #2
   14938:	198a      	adds	r2, r1, r6
   1493a:	f013 0403 	ands.w	r4, r3, #3
   1493e:	78d0      	ldrb	r0, [r2, #3]
   14940:	d121      	bne.n	14986 <tls_interface_getopt+0xc2>
   14942:	089b      	lsrs	r3, r3, #2
   14944:	4283      	cmp	r3, r0
   14946:	bf28      	it	cs
   14948:	4603      	movcs	r3, r0
   1494a:	009a      	lsls	r2, r3, #2
   1494c:	b1db      	cbz	r3, 14986 <tls_interface_getopt+0xc2>
   1494e:	3604      	adds	r6, #4
   14950:	4431      	add	r1, r6
   14952:	603a      	str	r2, [r7, #0]
   14954:	4628      	mov	r0, r5
   14956:	f008 f97e 	bl	1cc56 <memcpy>
   1495a:	4620      	mov	r0, r4
   1495c:	e7c9      	b.n	148f2 <tls_interface_getopt+0x2e>
   1495e:	683b      	ldr	r3, [r7, #0]
   14960:	2b04      	cmp	r3, #4
   14962:	d10c      	bne.n	1497e <tls_interface_getopt+0xba>
   14964:	4b0b      	ldr	r3, [pc, #44]	; (14994 <tls_interface_getopt+0xd0>)
   14966:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1496a:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1496e:	2000      	movs	r0, #0
   14970:	f1a3 0301 	sub.w	r3, r3, #1
   14974:	fab3 f383 	clz	r3, r3
   14978:	095b      	lsrs	r3, r3, #5
   1497a:	602b      	str	r3, [r5, #0]
   1497c:	e7b9      	b.n	148f2 <tls_interface_getopt+0x2e>
   1497e:	2016      	movs	r0, #22
   14980:	e7b7      	b.n	148f2 <tls_interface_getopt+0x2e>
   14982:	2009      	movs	r0, #9
   14984:	e7b5      	b.n	148f2 <tls_interface_getopt+0x2e>
   14986:	2800      	cmp	r0, #0
   14988:	d1f9      	bne.n	1497e <tls_interface_getopt+0xba>
   1498a:	6038      	str	r0, [r7, #0]
   1498c:	e7b1      	b.n	148f2 <tls_interface_getopt+0x2e>
   1498e:	202a      	movs	r0, #42	; 0x2a
   14990:	e7af      	b.n	148f2 <tls_interface_getopt+0x2e>
   14992:	bf00      	nop
   14994:	20020f7c 	.word	0x20020f7c

00014998 <tls_rpc_ip_event_handler>:
   14998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1499a:	f248 0581 	movw	r5, #32897	; 0x8081
   1499e:	42ab      	cmp	r3, r5
   149a0:	460c      	mov	r4, r1
   149a2:	d062      	beq.n	14a6a <tls_rpc_ip_event_handler+0xd2>
   149a4:	f249 0182 	movw	r1, #36994	; 0x9082
   149a8:	428b      	cmp	r3, r1
   149aa:	4606      	mov	r6, r0
   149ac:	d02e      	beq.n	14a0c <tls_rpc_ip_event_handler+0x74>
   149ae:	f248 0102 	movw	r1, #32770	; 0x8002
   149b2:	428b      	cmp	r3, r1
   149b4:	d001      	beq.n	149ba <tls_rpc_ip_event_handler+0x22>
   149b6:	2001      	movs	r0, #1
   149b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   149ba:	2c00      	cmp	r4, #0
   149bc:	d0fb      	beq.n	149b6 <tls_rpc_ip_event_handler+0x1e>
   149be:	6963      	ldr	r3, [r4, #20]
   149c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   149c4:	d002      	beq.n	149cc <tls_rpc_ip_event_handler+0x34>
   149c6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   149ca:	d1f4      	bne.n	149b6 <tls_rpc_ip_event_handler+0x1e>
   149cc:	6823      	ldr	r3, [r4, #0]
   149ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   149d2:	6023      	str	r3, [r4, #0]
   149d4:	6955      	ldr	r5, [r2, #20]
   149d6:	2d00      	cmp	r5, #0
   149d8:	d156      	bne.n	14a88 <tls_rpc_ip_event_handler+0xf0>
   149da:	6823      	ldr	r3, [r4, #0]
   149dc:	0c1b      	lsrs	r3, r3, #16
   149de:	041b      	lsls	r3, r3, #16
   149e0:	f043 0305 	orr.w	r3, r3, #5
   149e4:	6023      	str	r3, [r4, #0]
   149e6:	6823      	ldr	r3, [r4, #0]
   149e8:	00da      	lsls	r2, r3, #3
   149ea:	d50d      	bpl.n	14a08 <tls_rpc_ip_event_handler+0x70>
   149ec:	4b2b      	ldr	r3, [pc, #172]	; (14a9c <tls_rpc_ip_event_handler+0x104>)
   149ee:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   149f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   149f6:	2b02      	cmp	r3, #2
   149f8:	d106      	bne.n	14a08 <tls_rpc_ip_event_handler+0x70>
   149fa:	4630      	mov	r0, r6
   149fc:	4621      	mov	r1, r4
   149fe:	f7ff fb93 	bl	14128 <secure_client_socket>
   14a02:	b108      	cbz	r0, 14a08 <tls_rpc_ip_event_handler+0x70>
   14a04:	2873      	cmp	r0, #115	; 0x73
   14a06:	d142      	bne.n	14a8e <tls_rpc_ip_event_handler+0xf6>
   14a08:	2000      	movs	r0, #0
   14a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a0c:	2c00      	cmp	r4, #0
   14a0e:	d0fb      	beq.n	14a08 <tls_rpc_ip_event_handler+0x70>
   14a10:	6823      	ldr	r3, [r4, #0]
   14a12:	b29b      	uxth	r3, r3
   14a14:	2b0b      	cmp	r3, #11
   14a16:	d1f7      	bne.n	14a08 <tls_rpc_ip_event_handler+0x70>
   14a18:	6915      	ldr	r5, [r2, #16]
   14a1a:	2d00      	cmp	r5, #0
   14a1c:	d134      	bne.n	14a88 <tls_rpc_ip_event_handler+0xf0>
   14a1e:	6823      	ldr	r3, [r4, #0]
   14a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   14a24:	6023      	str	r3, [r4, #0]
   14a26:	6823      	ldr	r3, [r4, #0]
   14a28:	00db      	lsls	r3, r3, #3
   14a2a:	d5ed      	bpl.n	14a08 <tls_rpc_ip_event_handler+0x70>
   14a2c:	4f1c      	ldr	r7, [pc, #112]	; (14aa0 <tls_rpc_ip_event_handler+0x108>)
   14a2e:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   14a32:	b130      	cbz	r0, 14a42 <tls_rpc_ip_event_handler+0xaa>
   14a34:	f005 fa18 	bl	19e68 <nrf_free>
   14a38:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   14a3c:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   14a40:	605d      	str	r5, [r3, #4]
   14a42:	6823      	ldr	r3, [r4, #0]
   14a44:	2000      	movs	r0, #0
   14a46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   14a4a:	6023      	str	r3, [r4, #0]
   14a4c:	6823      	ldr	r3, [r4, #0]
   14a4e:	0c1b      	lsrs	r3, r3, #16
   14a50:	041b      	lsls	r3, r3, #16
   14a52:	f043 030c 	orr.w	r3, r3, #12
   14a56:	6023      	str	r3, [r4, #0]
   14a58:	6823      	ldr	r3, [r4, #0]
   14a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14a5e:	6023      	str	r3, [r4, #0]
   14a60:	6823      	ldr	r3, [r4, #0]
   14a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   14a66:	6023      	str	r3, [r4, #0]
   14a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a6a:	2900      	cmp	r1, #0
   14a6c:	d0cc      	beq.n	14a08 <tls_rpc_ip_event_handler+0x70>
   14a6e:	680b      	ldr	r3, [r1, #0]
   14a70:	b29b      	uxth	r3, r3
   14a72:	2b0a      	cmp	r3, #10
   14a74:	d1c8      	bne.n	14a08 <tls_rpc_ip_event_handler+0x70>
   14a76:	6950      	ldr	r0, [r2, #20]
   14a78:	b938      	cbnz	r0, 14a8a <tls_rpc_ip_event_handler+0xf2>
   14a7a:	680b      	ldr	r3, [r1, #0]
   14a7c:	0c1b      	lsrs	r3, r3, #16
   14a7e:	041b      	lsls	r3, r3, #16
   14a80:	f043 030b 	orr.w	r3, r3, #11
   14a84:	600b      	str	r3, [r1, #0]
   14a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a88:	4628      	mov	r0, r5
   14a8a:	f000 f85d 	bl	14b48 <rpc_error_to_nrf_bsd_error>
   14a8e:	6060      	str	r0, [r4, #4]
   14a90:	6823      	ldr	r3, [r4, #0]
   14a92:	2000      	movs	r0, #0
   14a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   14a98:	6023      	str	r3, [r4, #0]
   14a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a9c:	20020f7c 	.word	0x20020f7c
   14aa0:	200210c0 	.word	0x200210c0

00014aa4 <ip_client_event_handler>:
   14aa4:	f850 1b08 	ldr.w	r1, [r0], #8
   14aa8:	0c09      	lsrs	r1, r1, #16
   14aaa:	f001 b971 	b.w	15d90 <rpc_ip_event_handler>
   14aae:	bf00      	nop

00014ab0 <rpc_ip_client_init>:
   14ab0:	4801      	ldr	r0, [pc, #4]	; (14ab8 <rpc_ip_client_init+0x8>)
   14ab2:	f001 bc5f 	b.w	16374 <rpc_client_register>
   14ab6:	bf00      	nop
   14ab8:	00020df8 	.word	0x00020df8

00014abc <rpc_ip_client_request_alloc>:
   14abc:	2300      	movs	r3, #0
   14abe:	b510      	push	{r4, lr}
   14ac0:	b082      	sub	sp, #8
   14ac2:	9301      	str	r3, [sp, #4]
   14ac4:	b158      	cbz	r0, 14ade <rpc_ip_client_request_alloc+0x22>
   14ac6:	4604      	mov	r4, r0
   14ac8:	aa01      	add	r2, sp, #4
   14aca:	2004      	movs	r0, #4
   14acc:	f001 fccc 	bl	16468 <rpc_message_alloc>
   14ad0:	b918      	cbnz	r0, 14ada <rpc_ip_client_request_alloc+0x1e>
   14ad2:	9b01      	ldr	r3, [sp, #4]
   14ad4:	b10b      	cbz	r3, 14ada <rpc_ip_client_request_alloc+0x1e>
   14ad6:	3308      	adds	r3, #8
   14ad8:	6023      	str	r3, [r4, #0]
   14ada:	b002      	add	sp, #8
   14adc:	bd10      	pop	{r4, pc}
   14ade:	2007      	movs	r0, #7
   14ae0:	b002      	add	sp, #8
   14ae2:	bd10      	pop	{r4, pc}

00014ae4 <rpc_ip_client_request_send>:
   14ae4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   14ae8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   14aec:	d10b      	bne.n	14b06 <rpc_ip_client_request_send+0x22>
   14aee:	b160      	cbz	r0, 14b0a <rpc_ip_client_request_send+0x26>
   14af0:	4603      	mov	r3, r0
   14af2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   14af6:	2004      	movs	r0, #4
   14af8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   14afc:	f843 1d08 	str.w	r1, [r3, #-8]!
   14b00:	4619      	mov	r1, r3
   14b02:	f001 bca1 	b.w	16448 <rpc_message_send>
   14b06:	200f      	movs	r0, #15
   14b08:	4770      	bx	lr
   14b0a:	2007      	movs	r0, #7
   14b0c:	4770      	bx	lr
   14b0e:	bf00      	nop

00014b10 <rpc_ip_client_message_free>:
   14b10:	b120      	cbz	r0, 14b1c <rpc_ip_client_message_free+0xc>
   14b12:	f1a0 0108 	sub.w	r1, r0, #8
   14b16:	2004      	movs	r0, #4
   14b18:	f001 bcd2 	b.w	164c0 <rpc_message_free>
   14b1c:	2007      	movs	r0, #7
   14b1e:	4770      	bx	lr

00014b20 <rpc_ip_client_data_free>:
   14b20:	b118      	cbz	r0, 14b2a <rpc_ip_client_data_free+0xa>
   14b22:	4601      	mov	r1, r0
   14b24:	2004      	movs	r0, #4
   14b26:	f001 bcd7 	b.w	164d8 <rpc_message_data_free>
   14b2a:	2007      	movs	r0, #7
   14b2c:	4770      	bx	lr
   14b2e:	bf00      	nop

00014b30 <ip_recvd_packet_free_cb>:
   14b30:	b510      	push	{r4, lr}
   14b32:	4604      	mov	r4, r0
   14b34:	6800      	ldr	r0, [r0, #0]
   14b36:	f7ff fff3 	bl	14b20 <rpc_ip_client_data_free>
   14b3a:	68a0      	ldr	r0, [r4, #8]
   14b3c:	b118      	cbz	r0, 14b46 <ip_recvd_packet_free_cb+0x16>
   14b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14b42:	f005 b991 	b.w	19e68 <nrf_free>
   14b46:	bd10      	pop	{r4, pc}

00014b48 <rpc_error_to_nrf_bsd_error>:
   14b48:	2810      	cmp	r0, #16
   14b4a:	bf9a      	itte	ls
   14b4c:	4b02      	ldrls	r3, [pc, #8]	; (14b58 <rpc_error_to_nrf_bsd_error+0x10>)
   14b4e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   14b52:	202d      	movhi	r0, #45	; 0x2d
   14b54:	4770      	bx	lr
   14b56:	bf00      	nop
   14b58:	00020e08 	.word	0x00020e08

00014b5c <ip_interface_request_create>:
   14b5c:	b570      	push	{r4, r5, r6, lr}
   14b5e:	2500      	movs	r5, #0
   14b60:	b082      	sub	sp, #8
   14b62:	ac02      	add	r4, sp, #8
   14b64:	f844 5d04 	str.w	r5, [r4, #-4]!
   14b68:	4606      	mov	r6, r0
   14b6a:	460d      	mov	r5, r1
   14b6c:	4620      	mov	r0, r4
   14b6e:	4619      	mov	r1, r3
   14b70:	4614      	mov	r4, r2
   14b72:	f7ff ffa3 	bl	14abc <rpc_ip_client_request_alloc>
   14b76:	b960      	cbnz	r0, 14b92 <ip_interface_request_create+0x36>
   14b78:	9b01      	ldr	r3, [sp, #4]
   14b7a:	2208      	movs	r2, #8
   14b7c:	7258      	strb	r0, [r3, #9]
   14b7e:	7298      	strb	r0, [r3, #10]
   14b80:	72d8      	strb	r0, [r3, #11]
   14b82:	4618      	mov	r0, r3
   14b84:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   14b88:	60dc      	str	r4, [r3, #12]
   14b8a:	611d      	str	r5, [r3, #16]
   14b8c:	721a      	strb	r2, [r3, #8]
   14b8e:	b002      	add	sp, #8
   14b90:	bd70      	pop	{r4, r5, r6, pc}
   14b92:	9b01      	ldr	r3, [sp, #4]
   14b94:	4618      	mov	r0, r3
   14b96:	b002      	add	sp, #8
   14b98:	bd70      	pop	{r4, r5, r6, pc}
   14b9a:	bf00      	nop

00014b9c <ip_interface_request_send>:
   14b9c:	b570      	push	{r4, r5, r6, lr}
   14b9e:	460c      	mov	r4, r1
   14ba0:	4605      	mov	r5, r0
   14ba2:	4611      	mov	r1, r2
   14ba4:	4620      	mov	r0, r4
   14ba6:	461e      	mov	r6, r3
   14ba8:	f7ff ff9c 	bl	14ae4 <rpc_ip_client_request_send>
   14bac:	b900      	cbnz	r0, 14bb0 <ip_interface_request_send+0x14>
   14bae:	bd70      	pop	{r4, r5, r6, pc}
   14bb0:	6820      	ldr	r0, [r4, #0]
   14bb2:	b108      	cbz	r0, 14bb8 <ip_interface_request_send+0x1c>
   14bb4:	f7ff ffb4 	bl	14b20 <rpc_ip_client_data_free>
   14bb8:	4620      	mov	r0, r4
   14bba:	f7ff ffa9 	bl	14b10 <rpc_ip_client_message_free>
   14bbe:	602e      	str	r6, [r5, #0]
   14bc0:	2023      	movs	r0, #35	; 0x23
   14bc2:	bd70      	pop	{r4, r5, r6, pc}

00014bc4 <ip_interface_wait>:
   14bc4:	b538      	push	{r3, r4, r5, lr}
   14bc6:	4605      	mov	r5, r0
   14bc8:	f005 fd28 	bl	1a61c <interface_socket_wait>
   14bcc:	4604      	mov	r4, r0
   14bce:	b108      	cbz	r0, 14bd4 <ip_interface_wait+0x10>
   14bd0:	4620      	mov	r0, r4
   14bd2:	bd38      	pop	{r3, r4, r5, pc}
   14bd4:	4628      	mov	r0, r5
   14bd6:	f005 fda1 	bl	1a71c <interface_socket_from_handle_get>
   14bda:	2800      	cmp	r0, #0
   14bdc:	d0f8      	beq.n	14bd0 <ip_interface_wait+0xc>
   14bde:	6844      	ldr	r4, [r0, #4]
   14be0:	2c00      	cmp	r4, #0
   14be2:	d0f5      	beq.n	14bd0 <ip_interface_wait+0xc>
   14be4:	2300      	movs	r3, #0
   14be6:	6043      	str	r3, [r0, #4]
   14be8:	4620      	mov	r0, r4
   14bea:	bd38      	pop	{r3, r4, r5, pc}

00014bec <ip_interface_init>:
   14bec:	b538      	push	{r3, r4, r5, lr}
   14bee:	2300      	movs	r3, #0
   14bf0:	4d09      	ldr	r5, [pc, #36]	; (14c18 <ip_interface_init+0x2c>)
   14bf2:	4c0a      	ldr	r4, [pc, #40]	; (14c1c <ip_interface_init+0x30>)
   14bf4:	4619      	mov	r1, r3
   14bf6:	2224      	movs	r2, #36	; 0x24
   14bf8:	4809      	ldr	r0, [pc, #36]	; (14c20 <ip_interface_init+0x34>)
   14bfa:	602b      	str	r3, [r5, #0]
   14bfc:	6023      	str	r3, [r4, #0]
   14bfe:	f008 f855 	bl	1ccac <memset>
   14c02:	f7ff ff55 	bl	14ab0 <rpc_ip_client_init>
   14c06:	b918      	cbnz	r0, 14c10 <ip_interface_init+0x24>
   14c08:	2201      	movs	r2, #1
   14c0a:	4b06      	ldr	r3, [pc, #24]	; (14c24 <ip_interface_init+0x38>)
   14c0c:	701a      	strb	r2, [r3, #0]
   14c0e:	bd38      	pop	{r3, r4, r5, pc}
   14c10:	f04f 30ff 	mov.w	r0, #4294967295
   14c14:	bd38      	pop	{r3, r4, r5, pc}
   14c16:	bf00      	nop
   14c18:	20021110 	.word	0x20021110
   14c1c:	2002110c 	.word	0x2002110c
   14c20:	20021114 	.word	0x20021114
   14c24:	20021d72 	.word	0x20021d72

00014c28 <ip_interface_open>:
   14c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c2c:	2500      	movs	r5, #0
   14c2e:	f04f 37ff 	mov.w	r7, #4294967295
   14c32:	4c5e      	ldr	r4, [pc, #376]	; (14dac <ip_interface_open+0x184>)
   14c34:	4606      	mov	r6, r0
   14c36:	7820      	ldrb	r0, [r4, #0]
   14c38:	b084      	sub	sp, #16
   14c3a:	e9cd 5701 	strd	r5, r7, [sp, #4]
   14c3e:	2800      	cmp	r0, #0
   14c40:	f000 80b0 	beq.w	14da4 <ip_interface_open+0x17c>
   14c44:	4690      	mov	r8, r2
   14c46:	f026 0208 	bic.w	r2, r6, #8
   14c4a:	2a02      	cmp	r2, #2
   14c4c:	460c      	mov	r4, r1
   14c4e:	d002      	beq.n	14c56 <ip_interface_open+0x2e>
   14c50:	2e05      	cmp	r6, #5
   14c52:	f040 808d 	bne.w	14d70 <ip_interface_open+0x148>
   14c56:	1e63      	subs	r3, r4, #1
   14c58:	2b02      	cmp	r3, #2
   14c5a:	f200 809d 	bhi.w	14d98 <ip_interface_open+0x170>
   14c5e:	f1b8 0f00 	cmp.w	r8, #0
   14c62:	d159      	bne.n	14d18 <ip_interface_open+0xf0>
   14c64:	2c01      	cmp	r4, #1
   14c66:	d06f      	beq.n	14d48 <ip_interface_open+0x120>
   14c68:	2c03      	cmp	r4, #3
   14c6a:	bf18      	it	ne
   14c6c:	f04f 0802 	movne.w	r8, #2
   14c70:	4a4f      	ldr	r2, [pc, #316]	; (14db0 <ip_interface_open+0x188>)
   14c72:	4621      	mov	r1, r4
   14c74:	a801      	add	r0, sp, #4
   14c76:	f005 fc1f 	bl	1a4b8 <interface_socket_allocate>
   14c7a:	9b01      	ldr	r3, [sp, #4]
   14c7c:	4607      	mov	r7, r0
   14c7e:	2b00      	cmp	r3, #0
   14c80:	d060      	beq.n	14d44 <ip_interface_open+0x11c>
   14c82:	2100      	movs	r1, #0
   14c84:	a804      	add	r0, sp, #16
   14c86:	f840 1d04 	str.w	r1, [r0, #-4]!
   14c8a:	e9c3 6403 	strd	r6, r4, [r3, #12]
   14c8e:	f8c3 8014 	str.w	r8, [r3, #20]
   14c92:	f7ff ff13 	bl	14abc <rpc_ip_client_request_alloc>
   14c96:	2800      	cmp	r0, #0
   14c98:	d151      	bne.n	14d3e <ip_interface_open+0x116>
   14c9a:	f247 0201 	movw	r2, #28673	; 0x7001
   14c9e:	f04f 33ff 	mov.w	r3, #4294967295
   14ca2:	2108      	movs	r1, #8
   14ca4:	9d03      	ldr	r5, [sp, #12]
   14ca6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   14caa:	60ea      	str	r2, [r5, #12]
   14cac:	7268      	strb	r0, [r5, #9]
   14cae:	72a8      	strb	r0, [r5, #10]
   14cb0:	72e8      	strb	r0, [r5, #11]
   14cb2:	7229      	strb	r1, [r5, #8]
   14cb4:	742b      	strb	r3, [r5, #16]
   14cb6:	746b      	strb	r3, [r5, #17]
   14cb8:	74ab      	strb	r3, [r5, #18]
   14cba:	74eb      	strb	r3, [r5, #19]
   14cbc:	68ab      	ldr	r3, [r5, #8]
   14cbe:	2e05      	cmp	r6, #5
   14cc0:	f103 030c 	add.w	r3, r3, #12
   14cc4:	60ab      	str	r3, [r5, #8]
   14cc6:	d003      	beq.n	14cd0 <ip_interface_open+0xa8>
   14cc8:	2e0a      	cmp	r6, #10
   14cca:	bf14      	ite	ne
   14ccc:	2601      	movne	r6, #1
   14cce:	2602      	moveq	r6, #2
   14cd0:	616e      	str	r6, [r5, #20]
   14cd2:	f8c5 801c 	str.w	r8, [r5, #28]
   14cd6:	61ac      	str	r4, [r5, #24]
   14cd8:	f247 0101 	movw	r1, #28673	; 0x7001
   14cdc:	4628      	mov	r0, r5
   14cde:	f8dd 8004 	ldr.w	r8, [sp, #4]
   14ce2:	f7ff feff 	bl	14ae4 <rpc_ip_client_request_send>
   14ce6:	4606      	mov	r6, r0
   14ce8:	b380      	cbz	r0, 14d4c <ip_interface_open+0x124>
   14cea:	6828      	ldr	r0, [r5, #0]
   14cec:	b108      	cbz	r0, 14cf2 <ip_interface_open+0xca>
   14cee:	f7ff ff17 	bl	14b20 <rpc_ip_client_data_free>
   14cf2:	4628      	mov	r0, r5
   14cf4:	f7ff ff0c 	bl	14b10 <rpc_ip_client_message_free>
   14cf8:	2301      	movs	r3, #1
   14cfa:	2523      	movs	r5, #35	; 0x23
   14cfc:	f8c8 3000 	str.w	r3, [r8]
   14d00:	4638      	mov	r0, r7
   14d02:	f005 fc3d 	bl	1a580 <interface_socket_free>
   14d06:	4628      	mov	r0, r5
   14d08:	f7fd fa66 	bl	121d8 <bsd_os_errno_set>
   14d0c:	f04f 37ff 	mov.w	r7, #4294967295
   14d10:	4638      	mov	r0, r7
   14d12:	b004      	add	sp, #16
   14d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d18:	2c01      	cmp	r4, #1
   14d1a:	d00a      	beq.n	14d32 <ip_interface_open+0x10a>
   14d1c:	2c02      	cmp	r4, #2
   14d1e:	d10b      	bne.n	14d38 <ip_interface_open+0x110>
   14d20:	f1b8 0f02 	cmp.w	r8, #2
   14d24:	d0a4      	beq.n	14c70 <ip_interface_open+0x48>
   14d26:	2029      	movs	r0, #41	; 0x29
   14d28:	f7fd fa56 	bl	121d8 <bsd_os_errno_set>
   14d2c:	f04f 37ff 	mov.w	r7, #4294967295
   14d30:	e7ee      	b.n	14d10 <ip_interface_open+0xe8>
   14d32:	f1b8 0f01 	cmp.w	r8, #1
   14d36:	d1f6      	bne.n	14d26 <ip_interface_open+0xfe>
   14d38:	f04f 0802 	mov.w	r8, #2
   14d3c:	e798      	b.n	14c70 <ip_interface_open+0x48>
   14d3e:	9d03      	ldr	r5, [sp, #12]
   14d40:	2d00      	cmp	r5, #0
   14d42:	d1bb      	bne.n	14cbc <ip_interface_open+0x94>
   14d44:	2569      	movs	r5, #105	; 0x69
   14d46:	e7db      	b.n	14d00 <ip_interface_open+0xd8>
   14d48:	46a0      	mov	r8, r4
   14d4a:	e791      	b.n	14c70 <ip_interface_open+0x48>
   14d4c:	ab02      	add	r3, sp, #8
   14d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14d52:	2102      	movs	r1, #2
   14d54:	4638      	mov	r0, r7
   14d56:	f005 fc61 	bl	1a61c <interface_socket_wait>
   14d5a:	4605      	mov	r5, r0
   14d5c:	2800      	cmp	r0, #0
   14d5e:	d1cf      	bne.n	14d00 <ip_interface_open+0xd8>
   14d60:	4638      	mov	r0, r7
   14d62:	f005 fcdb 	bl	1a71c <interface_socket_from_handle_get>
   14d66:	b138      	cbz	r0, 14d78 <ip_interface_open+0x150>
   14d68:	6845      	ldr	r5, [r0, #4]
   14d6a:	b12d      	cbz	r5, 14d78 <ip_interface_open+0x150>
   14d6c:	6046      	str	r6, [r0, #4]
   14d6e:	e7c7      	b.n	14d00 <ip_interface_open+0xd8>
   14d70:	202f      	movs	r0, #47	; 0x2f
   14d72:	f7fd fa31 	bl	121d8 <bsd_os_errno_set>
   14d76:	e7cb      	b.n	14d10 <ip_interface_open+0xe8>
   14d78:	3c02      	subs	r4, #2
   14d7a:	2c01      	cmp	r4, #1
   14d7c:	d8c8      	bhi.n	14d10 <ip_interface_open+0xe8>
   14d7e:	4638      	mov	r0, r7
   14d80:	9b01      	ldr	r3, [sp, #4]
   14d82:	681a      	ldr	r2, [r3, #0]
   14d84:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14d88:	601a      	str	r2, [r3, #0]
   14d8a:	681a      	ldr	r2, [r3, #0]
   14d8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   14d90:	601a      	str	r2, [r3, #0]
   14d92:	b004      	add	sp, #16
   14d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d98:	2016      	movs	r0, #22
   14d9a:	f7fd fa1d 	bl	121d8 <bsd_os_errno_set>
   14d9e:	f04f 37ff 	mov.w	r7, #4294967295
   14da2:	e7b5      	b.n	14d10 <ip_interface_open+0xe8>
   14da4:	2005      	movs	r0, #5
   14da6:	f7fd fa17 	bl	121d8 <bsd_os_errno_set>
   14daa:	e7b1      	b.n	14d10 <ip_interface_open+0xe8>
   14dac:	20021d72 	.word	0x20021d72
   14db0:	00014b31 	.word	0x00014b31

00014db4 <ip_interface_close>:
   14db4:	f04f 33ff 	mov.w	r3, #4294967295
   14db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dbc:	b082      	sub	sp, #8
   14dbe:	4606      	mov	r6, r0
   14dc0:	9300      	str	r3, [sp, #0]
   14dc2:	f005 fcab 	bl	1a71c <interface_socket_from_handle_get>
   14dc6:	2800      	cmp	r0, #0
   14dc8:	d062      	beq.n	14e90 <ip_interface_close+0xdc>
   14dca:	4604      	mov	r4, r0
   14dcc:	2100      	movs	r1, #0
   14dce:	a802      	add	r0, sp, #8
   14dd0:	6827      	ldr	r7, [r4, #0]
   14dd2:	f840 1d04 	str.w	r1, [r0, #-4]!
   14dd6:	f8d4 8018 	ldr.w	r8, [r4, #24]
   14dda:	f7ff fe6f 	bl	14abc <rpc_ip_client_request_alloc>
   14dde:	2800      	cmp	r0, #0
   14de0:	d139      	bne.n	14e56 <ip_interface_close+0xa2>
   14de2:	f247 0309 	movw	r3, #28681	; 0x7009
   14de6:	2208      	movs	r2, #8
   14de8:	9d01      	ldr	r5, [sp, #4]
   14dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   14dee:	60eb      	str	r3, [r5, #12]
   14df0:	f8c5 8010 	str.w	r8, [r5, #16]
   14df4:	7268      	strb	r0, [r5, #9]
   14df6:	72a8      	strb	r0, [r5, #10]
   14df8:	72e8      	strb	r0, [r5, #11]
   14dfa:	722a      	strb	r2, [r5, #8]
   14dfc:	6823      	ldr	r3, [r4, #0]
   14dfe:	f247 0109 	movw	r1, #28681	; 0x7009
   14e02:	0c1b      	lsrs	r3, r3, #16
   14e04:	041b      	lsls	r3, r3, #16
   14e06:	f043 030d 	orr.w	r3, r3, #13
   14e0a:	6023      	str	r3, [r4, #0]
   14e0c:	6823      	ldr	r3, [r4, #0]
   14e0e:	4628      	mov	r0, r5
   14e10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14e14:	6023      	str	r3, [r4, #0]
   14e16:	6823      	ldr	r3, [r4, #0]
   14e18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14e1c:	6023      	str	r3, [r4, #0]
   14e1e:	f7ff fe61 	bl	14ae4 <rpc_ip_client_request_send>
   14e22:	bb38      	cbnz	r0, 14e74 <ip_interface_close+0xc0>
   14e24:	466b      	mov	r3, sp
   14e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14e2a:	210e      	movs	r1, #14
   14e2c:	4630      	mov	r0, r6
   14e2e:	f005 fbf5 	bl	1a61c <interface_socket_wait>
   14e32:	4604      	mov	r4, r0
   14e34:	b1a0      	cbz	r0, 14e60 <ip_interface_close+0xac>
   14e36:	4c17      	ldr	r4, [pc, #92]	; (14e94 <ip_interface_close+0xe0>)
   14e38:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   14e3c:	b120      	cbz	r0, 14e48 <ip_interface_close+0x94>
   14e3e:	f7ff fe67 	bl	14b10 <rpc_ip_client_message_free>
   14e42:	2300      	movs	r3, #0
   14e44:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   14e48:	4630      	mov	r0, r6
   14e4a:	f005 fb99 	bl	1a580 <interface_socket_free>
   14e4e:	2000      	movs	r0, #0
   14e50:	b002      	add	sp, #8
   14e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e56:	9d01      	ldr	r5, [sp, #4]
   14e58:	200c      	movs	r0, #12
   14e5a:	2d00      	cmp	r5, #0
   14e5c:	d1ce      	bne.n	14dfc <ip_interface_close+0x48>
   14e5e:	e012      	b.n	14e86 <ip_interface_close+0xd2>
   14e60:	4630      	mov	r0, r6
   14e62:	f005 fc5b 	bl	1a71c <interface_socket_from_handle_get>
   14e66:	2800      	cmp	r0, #0
   14e68:	d0e5      	beq.n	14e36 <ip_interface_close+0x82>
   14e6a:	6843      	ldr	r3, [r0, #4]
   14e6c:	2b00      	cmp	r3, #0
   14e6e:	d0e2      	beq.n	14e36 <ip_interface_close+0x82>
   14e70:	6044      	str	r4, [r0, #4]
   14e72:	e7e0      	b.n	14e36 <ip_interface_close+0x82>
   14e74:	6828      	ldr	r0, [r5, #0]
   14e76:	b108      	cbz	r0, 14e7c <ip_interface_close+0xc8>
   14e78:	f7ff fe52 	bl	14b20 <rpc_ip_client_data_free>
   14e7c:	4628      	mov	r0, r5
   14e7e:	f7ff fe47 	bl	14b10 <rpc_ip_client_message_free>
   14e82:	2023      	movs	r0, #35	; 0x23
   14e84:	6027      	str	r7, [r4, #0]
   14e86:	f7fd f9a7 	bl	121d8 <bsd_os_errno_set>
   14e8a:	f04f 30ff 	mov.w	r0, #4294967295
   14e8e:	e7df      	b.n	14e50 <ip_interface_close+0x9c>
   14e90:	2009      	movs	r0, #9
   14e92:	e7f8      	b.n	14e86 <ip_interface_close+0xd2>
   14e94:	20021114 	.word	0x20021114

00014e98 <ip_interface_sendto>:
   14e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e9c:	2400      	movs	r4, #0
   14e9e:	b089      	sub	sp, #36	; 0x24
   14ea0:	9102      	str	r1, [sp, #8]
   14ea2:	4615      	mov	r5, r2
   14ea4:	4699      	mov	r9, r3
   14ea6:	9406      	str	r4, [sp, #24]
   14ea8:	4607      	mov	r7, r0
   14eaa:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14eac:	f005 fc36 	bl	1a71c <interface_socket_from_handle_get>
   14eb0:	2800      	cmp	r0, #0
   14eb2:	f000 814c 	beq.w	1514e <ip_interface_sendto+0x2b6>
   14eb6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   14eba:	f300 8139 	bgt.w	15130 <ip_interface_sendto+0x298>
   14ebe:	6903      	ldr	r3, [r0, #16]
   14ec0:	4604      	mov	r4, r0
   14ec2:	2b01      	cmp	r3, #1
   14ec4:	f000 80ea 	beq.w	1509c <ip_interface_sendto+0x204>
   14ec8:	6822      	ldr	r2, [r4, #0]
   14eca:	0391      	lsls	r1, r2, #14
   14ecc:	d56a      	bpl.n	14fa4 <ip_interface_sendto+0x10c>
   14ece:	f1b9 0f00 	cmp.w	r9, #0
   14ed2:	f000 80f3 	beq.w	150bc <ip_interface_sendto+0x224>
   14ed6:	f019 0f02 	tst.w	r9, #2
   14eda:	f000 8133 	beq.w	15144 <ip_interface_sendto+0x2ac>
   14ede:	2300      	movs	r3, #0
   14ee0:	9303      	str	r3, [sp, #12]
   14ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ee4:	f247 0806 	movw	r8, #28678	; 0x7006
   14ee8:	2b00      	cmp	r3, #0
   14eea:	bf08      	it	eq
   14eec:	f04f 33ff 	moveq.w	r3, #4294967295
   14ef0:	f04f 0b0c 	mov.w	fp, #12
   14ef4:	4a9a      	ldr	r2, [pc, #616]	; (15160 <ip_interface_sendto+0x2c8>)
   14ef6:	9307      	str	r3, [sp, #28]
   14ef8:	043b      	lsls	r3, r7, #16
   14efa:	9200      	str	r2, [sp, #0]
   14efc:	9304      	str	r3, [sp, #16]
   14efe:	4629      	mov	r1, r5
   14f00:	a806      	add	r0, sp, #24
   14f02:	f7ff fddb 	bl	14abc <rpc_ip_client_request_alloc>
   14f06:	2804      	cmp	r0, #4
   14f08:	f000 8098 	beq.w	1503c <ip_interface_sendto+0x1a4>
   14f0c:	2800      	cmp	r0, #0
   14f0e:	f040 8123 	bne.w	15158 <ip_interface_sendto+0x2c0>
   14f12:	9b06      	ldr	r3, [sp, #24]
   14f14:	f883 b008 	strb.w	fp, [r3, #8]
   14f18:	7258      	strb	r0, [r3, #9]
   14f1a:	7298      	strb	r0, [r3, #10]
   14f1c:	72d8      	strb	r0, [r3, #11]
   14f1e:	2e00      	cmp	r6, #0
   14f20:	d053      	beq.n	14fca <ip_interface_sendto+0x132>
   14f22:	68e2      	ldr	r2, [r4, #12]
   14f24:	6871      	ldr	r1, [r6, #4]
   14f26:	428a      	cmp	r2, r1
   14f28:	f040 809a 	bne.w	15060 <ip_interface_sendto+0x1c8>
   14f2c:	7831      	ldrb	r1, [r6, #0]
   14f2e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14f30:	4288      	cmp	r0, r1
   14f32:	d10a      	bne.n	14f4a <ip_interface_sendto+0xb2>
   14f34:	2a02      	cmp	r2, #2
   14f36:	f103 001c 	add.w	r0, r3, #28
   14f3a:	f000 80e7 	beq.w	1510c <ip_interface_sendto+0x274>
   14f3e:	2a0a      	cmp	r2, #10
   14f40:	d103      	bne.n	14f4a <ip_interface_sendto+0xb2>
   14f42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14f44:	2a24      	cmp	r2, #36	; 0x24
   14f46:	f000 80ce 	beq.w	150e6 <ip_interface_sendto+0x24e>
   14f4a:	f04f 0a16 	mov.w	sl, #22
   14f4e:	6818      	ldr	r0, [r3, #0]
   14f50:	b110      	cbz	r0, 14f58 <ip_interface_sendto+0xc0>
   14f52:	f7ff fde5 	bl	14b20 <rpc_ip_client_data_free>
   14f56:	9b06      	ldr	r3, [sp, #24]
   14f58:	4618      	mov	r0, r3
   14f5a:	f7ff fdd9 	bl	14b10 <rpc_ip_client_message_free>
   14f5e:	6823      	ldr	r3, [r4, #0]
   14f60:	0318      	lsls	r0, r3, #12
   14f62:	d40b      	bmi.n	14f7c <ip_interface_sendto+0xe4>
   14f64:	6823      	ldr	r3, [r4, #0]
   14f66:	b29b      	uxth	r3, r3
   14f68:	2b0d      	cmp	r3, #13
   14f6a:	d007      	beq.n	14f7c <ip_interface_sendto+0xe4>
   14f6c:	6823      	ldr	r3, [r4, #0]
   14f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   14f72:	6023      	str	r3, [r4, #0]
   14f74:	6823      	ldr	r3, [r4, #0]
   14f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14f7a:	6023      	str	r3, [r4, #0]
   14f7c:	f1ba 0f00 	cmp.w	sl, #0
   14f80:	f040 8093 	bne.w	150aa <ip_interface_sendto+0x212>
   14f84:	6823      	ldr	r3, [r4, #0]
   14f86:	0119      	lsls	r1, r3, #4
   14f88:	d56d      	bpl.n	15066 <ip_interface_sendto+0x1ce>
   14f8a:	6823      	ldr	r3, [r4, #0]
   14f8c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   14f90:	6023      	str	r3, [r4, #0]
   14f92:	9b00      	ldr	r3, [sp, #0]
   14f94:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14f98:	2800      	cmp	r0, #0
   14f9a:	d168      	bne.n	1506e <ip_interface_sendto+0x1d6>
   14f9c:	4628      	mov	r0, r5
   14f9e:	b009      	add	sp, #36	; 0x24
   14fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa4:	6822      	ldr	r2, [r4, #0]
   14fa6:	0092      	lsls	r2, r2, #2
   14fa8:	d406      	bmi.n	14fb8 <ip_interface_sendto+0x120>
   14faa:	2b01      	cmp	r3, #1
   14fac:	f000 8095 	beq.w	150da <ip_interface_sendto+0x242>
   14fb0:	6823      	ldr	r3, [r4, #0]
   14fb2:	031b      	lsls	r3, r3, #12
   14fb4:	f140 80b7 	bpl.w	15126 <ip_interface_sendto+0x28e>
   14fb8:	6823      	ldr	r3, [r4, #0]
   14fba:	031e      	lsls	r6, r3, #12
   14fbc:	f140 80bd 	bpl.w	1513a <ip_interface_sendto+0x2a2>
   14fc0:	4b67      	ldr	r3, [pc, #412]	; (15160 <ip_interface_sendto+0x2c8>)
   14fc2:	f8d4 a008 	ldr.w	sl, [r4, #8]
   14fc6:	9300      	str	r3, [sp, #0]
   14fc8:	e7d8      	b.n	14f7c <ip_interface_sendto+0xe4>
   14fca:	4642      	mov	r2, r8
   14fcc:	f8c3 9014 	str.w	r9, [r3, #20]
   14fd0:	69a1      	ldr	r1, [r4, #24]
   14fd2:	9804      	ldr	r0, [sp, #16]
   14fd4:	6119      	str	r1, [r3, #16]
   14fd6:	9902      	ldr	r1, [sp, #8]
   14fd8:	4302      	orrs	r2, r0
   14fda:	60da      	str	r2, [r3, #12]
   14fdc:	605d      	str	r5, [r3, #4]
   14fde:	b119      	cbz	r1, 14fe8 <ip_interface_sendto+0x150>
   14fe0:	6818      	ldr	r0, [r3, #0]
   14fe2:	462a      	mov	r2, r5
   14fe4:	f007 fe37 	bl	1cc56 <memcpy>
   14fe8:	6823      	ldr	r3, [r4, #0]
   14fea:	4641      	mov	r1, r8
   14fec:	9305      	str	r3, [sp, #20]
   14fee:	6823      	ldr	r3, [r4, #0]
   14ff0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14ff4:	6023      	str	r3, [r4, #0]
   14ff6:	6823      	ldr	r3, [r4, #0]
   14ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   14ffc:	6023      	str	r3, [r4, #0]
   14ffe:	9b06      	ldr	r3, [sp, #24]
   15000:	4618      	mov	r0, r3
   15002:	9301      	str	r3, [sp, #4]
   15004:	f7ff fd6e 	bl	14ae4 <rpc_ip_client_request_send>
   15008:	9b01      	ldr	r3, [sp, #4]
   1500a:	4682      	mov	sl, r0
   1500c:	2800      	cmp	r0, #0
   1500e:	d138      	bne.n	15082 <ip_interface_sendto+0x1ea>
   15010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   15014:	ab07      	add	r3, sp, #28
   15016:	4611      	mov	r1, r2
   15018:	4638      	mov	r0, r7
   1501a:	f005 faff 	bl	1a61c <interface_socket_wait>
   1501e:	4603      	mov	r3, r0
   15020:	b198      	cbz	r0, 1504a <ip_interface_sendto+0x1b2>
   15022:	6822      	ldr	r2, [r4, #0]
   15024:	0312      	lsls	r2, r2, #12
   15026:	d455      	bmi.n	150d4 <ip_interface_sendto+0x23c>
   15028:	2b3c      	cmp	r3, #60	; 0x3c
   1502a:	d017      	beq.n	1505c <ip_interface_sendto+0x1c4>
   1502c:	2b0c      	cmp	r3, #12
   1502e:	d115      	bne.n	1505c <ip_interface_sendto+0x1c4>
   15030:	9b00      	ldr	r3, [sp, #0]
   15032:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15036:	b108      	cbz	r0, 1503c <ip_interface_sendto+0x1a4>
   15038:	f7ff fd6a 	bl	14b10 <rpc_ip_client_message_free>
   1503c:	9b03      	ldr	r3, [sp, #12]
   1503e:	2b00      	cmp	r3, #0
   15040:	f47f af5d 	bne.w	14efe <ip_interface_sendto+0x66>
   15044:	f04f 0a23 	mov.w	sl, #35	; 0x23
   15048:	e789      	b.n	14f5e <ip_interface_sendto+0xc6>
   1504a:	9001      	str	r0, [sp, #4]
   1504c:	4638      	mov	r0, r7
   1504e:	f005 fb65 	bl	1a71c <interface_socket_from_handle_get>
   15052:	9b01      	ldr	r3, [sp, #4]
   15054:	b110      	cbz	r0, 1505c <ip_interface_sendto+0x1c4>
   15056:	6843      	ldr	r3, [r0, #4]
   15058:	2b00      	cmp	r3, #0
   1505a:	d136      	bne.n	150ca <ip_interface_sendto+0x232>
   1505c:	469a      	mov	sl, r3
   1505e:	e77e      	b.n	14f5e <ip_interface_sendto+0xc6>
   15060:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   15064:	e773      	b.n	14f4e <ip_interface_sendto+0xb6>
   15066:	9b00      	ldr	r3, [sp, #0]
   15068:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1506c:	6985      	ldr	r5, [r0, #24]
   1506e:	f7ff fd4f 	bl	14b10 <rpc_ip_client_message_free>
   15072:	2300      	movs	r3, #0
   15074:	4628      	mov	r0, r5
   15076:	9a00      	ldr	r2, [sp, #0]
   15078:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   1507c:	b009      	add	sp, #36	; 0x24
   1507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15082:	6818      	ldr	r0, [r3, #0]
   15084:	469a      	mov	sl, r3
   15086:	b108      	cbz	r0, 1508c <ip_interface_sendto+0x1f4>
   15088:	f7ff fd4a 	bl	14b20 <rpc_ip_client_data_free>
   1508c:	4650      	mov	r0, sl
   1508e:	f7ff fd3f 	bl	14b10 <rpc_ip_client_message_free>
   15092:	9b05      	ldr	r3, [sp, #20]
   15094:	f04f 0a23 	mov.w	sl, #35	; 0x23
   15098:	6023      	str	r3, [r4, #0]
   1509a:	e760      	b.n	14f5e <ip_interface_sendto+0xc6>
   1509c:	2e00      	cmp	r6, #0
   1509e:	f43f af13 	beq.w	14ec8 <ip_interface_sendto+0x30>
   150a2:	f04f 0a38 	mov.w	sl, #56	; 0x38
   150a6:	4b2e      	ldr	r3, [pc, #184]	; (15160 <ip_interface_sendto+0x2c8>)
   150a8:	9300      	str	r3, [sp, #0]
   150aa:	4650      	mov	r0, sl
   150ac:	f7fd f894 	bl	121d8 <bsd_os_errno_set>
   150b0:	9b00      	ldr	r3, [sp, #0]
   150b2:	f04f 35ff 	mov.w	r5, #4294967295
   150b6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   150ba:	e76d      	b.n	14f98 <ip_interface_sendto+0x100>
   150bc:	6823      	ldr	r3, [r4, #0]
   150be:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   150c2:	f3c3 7300 	ubfx	r3, r3, #28, #1
   150c6:	9303      	str	r3, [sp, #12]
   150c8:	e70b      	b.n	14ee2 <ip_interface_sendto+0x4a>
   150ca:	f8c0 a004 	str.w	sl, [r0, #4]
   150ce:	6822      	ldr	r2, [r4, #0]
   150d0:	0312      	lsls	r2, r2, #12
   150d2:	d5a9      	bpl.n	15028 <ip_interface_sendto+0x190>
   150d4:	f8d4 a008 	ldr.w	sl, [r4, #8]
   150d8:	e741      	b.n	14f5e <ip_interface_sendto+0xc6>
   150da:	6823      	ldr	r3, [r4, #0]
   150dc:	b29b      	uxth	r3, r3
   150de:	2b05      	cmp	r3, #5
   150e0:	f47f af6a 	bne.w	14fb8 <ip_interface_sendto+0x120>
   150e4:	e764      	b.n	14fb0 <ip_interface_sendto+0x118>
   150e6:	2210      	movs	r2, #16
   150e8:	8931      	ldrh	r1, [r6, #8]
   150ea:	835a      	strh	r2, [r3, #26]
   150ec:	8319      	strh	r1, [r3, #24]
   150ee:	18b1      	adds	r1, r6, r2
   150f0:	f007 fdb1 	bl	1cc56 <memcpy>
   150f4:	f247 0207 	movw	r2, #28679	; 0x7007
   150f8:	9b06      	ldr	r3, [sp, #24]
   150fa:	4690      	mov	r8, r2
   150fc:	6899      	ldr	r1, [r3, #8]
   150fe:	8b58      	ldrh	r0, [r3, #26]
   15100:	3104      	adds	r1, #4
   15102:	4401      	add	r1, r0
   15104:	f8c3 9014 	str.w	r9, [r3, #20]
   15108:	6099      	str	r1, [r3, #8]
   1510a:	e761      	b.n	14fd0 <ip_interface_sendto+0x138>
   1510c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1510e:	2a10      	cmp	r2, #16
   15110:	f47f af1b 	bne.w	14f4a <ip_interface_sendto+0xb2>
   15114:	2204      	movs	r2, #4
   15116:	8931      	ldrh	r1, [r6, #8]
   15118:	835a      	strh	r2, [r3, #26]
   1511a:	8319      	strh	r1, [r3, #24]
   1511c:	f106 010c 	add.w	r1, r6, #12
   15120:	f007 fd99 	bl	1cc56 <memcpy>
   15124:	e7e6      	b.n	150f4 <ip_interface_sendto+0x25c>
   15126:	4b0e      	ldr	r3, [pc, #56]	; (15160 <ip_interface_sendto+0x2c8>)
   15128:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1512c:	9300      	str	r3, [sp, #0]
   1512e:	e7bc      	b.n	150aa <ip_interface_sendto+0x212>
   15130:	4b0b      	ldr	r3, [pc, #44]	; (15160 <ip_interface_sendto+0x2c8>)
   15132:	f04f 0a28 	mov.w	sl, #40	; 0x28
   15136:	9300      	str	r3, [sp, #0]
   15138:	e7b7      	b.n	150aa <ip_interface_sendto+0x212>
   1513a:	4b09      	ldr	r3, [pc, #36]	; (15160 <ip_interface_sendto+0x2c8>)
   1513c:	f04f 0a39 	mov.w	sl, #57	; 0x39
   15140:	9300      	str	r3, [sp, #0]
   15142:	e7b2      	b.n	150aa <ip_interface_sendto+0x212>
   15144:	4b06      	ldr	r3, [pc, #24]	; (15160 <ip_interface_sendto+0x2c8>)
   15146:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1514a:	9300      	str	r3, [sp, #0]
   1514c:	e7ad      	b.n	150aa <ip_interface_sendto+0x212>
   1514e:	4b04      	ldr	r3, [pc, #16]	; (15160 <ip_interface_sendto+0x2c8>)
   15150:	f04f 0a09 	mov.w	sl, #9
   15154:	9300      	str	r3, [sp, #0]
   15156:	e7a8      	b.n	150aa <ip_interface_sendto+0x212>
   15158:	f04f 0a0c 	mov.w	sl, #12
   1515c:	e6ff      	b.n	14f5e <ip_interface_sendto+0xc6>
   1515e:	bf00      	nop
   15160:	20021114 	.word	0x20021114

00015164 <ip_interface_recvfrom>:
   15164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15168:	b087      	sub	sp, #28
   1516a:	2a00      	cmp	r2, #0
   1516c:	f000 8112 	beq.w	15394 <ip_interface_recvfrom+0x230>
   15170:	4680      	mov	r8, r0
   15172:	468b      	mov	fp, r1
   15174:	469a      	mov	sl, r3
   15176:	4691      	mov	r9, r2
   15178:	b11b      	cbz	r3, 15182 <ip_interface_recvfrom+0x1e>
   1517a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1517e:	f000 8107 	beq.w	15390 <ip_interface_recvfrom+0x22c>
   15182:	4640      	mov	r0, r8
   15184:	f005 faca 	bl	1a71c <interface_socket_from_handle_get>
   15188:	4604      	mov	r4, r0
   1518a:	2800      	cmp	r0, #0
   1518c:	f000 8104 	beq.w	15398 <ip_interface_recvfrom+0x234>
   15190:	6803      	ldr	r3, [r0, #0]
   15192:	02db      	lsls	r3, r3, #11
   15194:	d562      	bpl.n	1525c <ip_interface_recvfrom+0xf8>
   15196:	f01a 0f02 	tst.w	sl, #2
   1519a:	bf18      	it	ne
   1519c:	2600      	movne	r6, #0
   1519e:	f04f 35ff 	mov.w	r5, #4294967295
   151a2:	bf08      	it	eq
   151a4:	6806      	ldreq	r6, [r0, #0]
   151a6:	f00a 0310 	and.w	r3, sl, #16
   151aa:	bf04      	itt	eq
   151ac:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   151b0:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   151b4:	9301      	str	r3, [sp, #4]
   151b6:	6823      	ldr	r3, [r4, #0]
   151b8:	03df      	lsls	r7, r3, #15
   151ba:	d567      	bpl.n	1528c <ip_interface_recvfrom+0x128>
   151bc:	6823      	ldr	r3, [r4, #0]
   151be:	69e0      	ldr	r0, [r4, #28]
   151c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   151c4:	6023      	str	r3, [r4, #0]
   151c6:	6803      	ldr	r3, [r0, #0]
   151c8:	68db      	ldr	r3, [r3, #12]
   151ca:	4798      	blx	r3
   151cc:	4605      	mov	r5, r0
   151ce:	3001      	adds	r0, #1
   151d0:	d07d      	beq.n	152ce <ip_interface_recvfrom+0x16a>
   151d2:	45a9      	cmp	r9, r5
   151d4:	dd03      	ble.n	151de <ip_interface_recvfrom+0x7a>
   151d6:	6923      	ldr	r3, [r4, #16]
   151d8:	2b01      	cmp	r3, #1
   151da:	f000 80a3 	beq.w	15324 <ip_interface_recvfrom+0x1c0>
   151de:	f04f 0800 	mov.w	r8, #0
   151e2:	af02      	add	r7, sp, #8
   151e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   151e6:	b103      	cbz	r3, 151ea <ip_interface_recvfrom+0x86>
   151e8:	681b      	ldr	r3, [r3, #0]
   151ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   151ec:	e9cd b902 	strd	fp, r9, [sp, #8]
   151f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   151f4:	69e0      	ldr	r0, [r4, #28]
   151f6:	4639      	mov	r1, r7
   151f8:	6803      	ldr	r3, [r0, #0]
   151fa:	4652      	mov	r2, sl
   151fc:	689b      	ldr	r3, [r3, #8]
   151fe:	4798      	blx	r3
   15200:	4605      	mov	r5, r0
   15202:	69e0      	ldr	r0, [r4, #28]
   15204:	1c6b      	adds	r3, r5, #1
   15206:	6803      	ldr	r3, [r0, #0]
   15208:	bf18      	it	ne
   1520a:	2701      	movne	r7, #1
   1520c:	68db      	ldr	r3, [r3, #12]
   1520e:	bf0a      	itet	eq
   15210:	2700      	moveq	r7, #0
   15212:	2600      	movne	r6, #0
   15214:	2623      	moveq	r6, #35	; 0x23
   15216:	4798      	blx	r3
   15218:	3001      	adds	r0, #1
   1521a:	d132      	bne.n	15282 <ip_interface_recvfrom+0x11e>
   1521c:	f1b8 0f00 	cmp.w	r8, #0
   15220:	f000 80b0 	beq.w	15384 <ip_interface_recvfrom+0x220>
   15224:	2f00      	cmp	r7, #0
   15226:	f000 80a1 	beq.w	1536c <ip_interface_recvfrom+0x208>
   1522a:	6823      	ldr	r3, [r4, #0]
   1522c:	0318      	lsls	r0, r3, #12
   1522e:	d506      	bpl.n	1523e <ip_interface_recvfrom+0xda>
   15230:	6823      	ldr	r3, [r4, #0]
   15232:	b29b      	uxth	r3, r3
   15234:	2b0d      	cmp	r3, #13
   15236:	d002      	beq.n	1523e <ip_interface_recvfrom+0xda>
   15238:	6923      	ldr	r3, [r4, #16]
   1523a:	2b01      	cmp	r3, #1
   1523c:	d021      	beq.n	15282 <ip_interface_recvfrom+0x11e>
   1523e:	6823      	ldr	r3, [r4, #0]
   15240:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   15244:	6823      	ldr	r3, [r4, #0]
   15246:	f040 80a9 	bne.w	1539c <ip_interface_recvfrom+0x238>
   1524a:	0319      	lsls	r1, r3, #12
   1524c:	d473      	bmi.n	15336 <ip_interface_recvfrom+0x1d2>
   1524e:	2e00      	cmp	r6, #0
   15250:	f040 8086 	bne.w	15360 <ip_interface_recvfrom+0x1fc>
   15254:	4628      	mov	r0, r5
   15256:	b007      	add	sp, #28
   15258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1525c:	6803      	ldr	r3, [r0, #0]
   1525e:	b29b      	uxth	r3, r3
   15260:	2b06      	cmp	r3, #6
   15262:	d071      	beq.n	15348 <ip_interface_recvfrom+0x1e4>
   15264:	6803      	ldr	r3, [r0, #0]
   15266:	b29b      	uxth	r3, r3
   15268:	2b07      	cmp	r3, #7
   1526a:	bf0c      	ite	eq
   1526c:	2609      	moveq	r6, #9
   1526e:	2639      	movne	r6, #57	; 0x39
   15270:	69e0      	ldr	r0, [r4, #28]
   15272:	6803      	ldr	r3, [r0, #0]
   15274:	68db      	ldr	r3, [r3, #12]
   15276:	4798      	blx	r3
   15278:	1c43      	adds	r3, r0, #1
   1527a:	4605      	mov	r5, r0
   1527c:	d0df      	beq.n	1523e <ip_interface_recvfrom+0xda>
   1527e:	f04f 35ff 	mov.w	r5, #4294967295
   15282:	6823      	ldr	r3, [r4, #0]
   15284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15288:	6023      	str	r3, [r4, #0]
   1528a:	e7e0      	b.n	1524e <ip_interface_recvfrom+0xea>
   1528c:	2e00      	cmp	r6, #0
   1528e:	d07d      	beq.n	1538c <ip_interface_recvfrom+0x228>
   15290:	6a26      	ldr	r6, [r4, #32]
   15292:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15296:	2e00      	cmp	r6, #0
   15298:	bf08      	it	eq
   1529a:	f04f 36ff 	moveq.w	r6, #4294967295
   1529e:	af02      	add	r7, sp, #8
   152a0:	463b      	mov	r3, r7
   152a2:	4611      	mov	r1, r2
   152a4:	4640      	mov	r0, r8
   152a6:	9602      	str	r6, [sp, #8]
   152a8:	f005 f9b8 	bl	1a61c <interface_socket_wait>
   152ac:	4606      	mov	r6, r0
   152ae:	b350      	cbz	r0, 15306 <ip_interface_recvfrom+0x1a2>
   152b0:	6823      	ldr	r3, [r4, #0]
   152b2:	031a      	lsls	r2, r3, #12
   152b4:	d532      	bpl.n	1531c <ip_interface_recvfrom+0x1b8>
   152b6:	6823      	ldr	r3, [r4, #0]
   152b8:	b29b      	uxth	r3, r3
   152ba:	2b0d      	cmp	r3, #13
   152bc:	d02e      	beq.n	1531c <ip_interface_recvfrom+0x1b8>
   152be:	6923      	ldr	r3, [r4, #16]
   152c0:	f1a3 0801 	sub.w	r8, r3, #1
   152c4:	fab8 f888 	clz	r8, r8
   152c8:	ea4f 1858 	mov.w	r8, r8, lsr #5
   152cc:	e78a      	b.n	151e4 <ip_interface_recvfrom+0x80>
   152ce:	6823      	ldr	r3, [r4, #0]
   152d0:	031a      	lsls	r2, r3, #12
   152d2:	d5db      	bpl.n	1528c <ip_interface_recvfrom+0x128>
   152d4:	6823      	ldr	r3, [r4, #0]
   152d6:	b29b      	uxth	r3, r3
   152d8:	2b0d      	cmp	r3, #13
   152da:	d0d7      	beq.n	1528c <ip_interface_recvfrom+0x128>
   152dc:	6923      	ldr	r3, [r4, #16]
   152de:	69e0      	ldr	r0, [r4, #28]
   152e0:	2b01      	cmp	r3, #1
   152e2:	d033      	beq.n	1534c <ip_interface_recvfrom+0x1e8>
   152e4:	2639      	movs	r6, #57	; 0x39
   152e6:	6823      	ldr	r3, [r4, #0]
   152e8:	0c1b      	lsrs	r3, r3, #16
   152ea:	041b      	lsls	r3, r3, #16
   152ec:	f043 030d 	orr.w	r3, r3, #13
   152f0:	6023      	str	r3, [r4, #0]
   152f2:	6823      	ldr	r3, [r4, #0]
   152f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   152f8:	6023      	str	r3, [r4, #0]
   152fa:	6803      	ldr	r3, [r0, #0]
   152fc:	68db      	ldr	r3, [r3, #12]
   152fe:	4798      	blx	r3
   15300:	3001      	adds	r0, #1
   15302:	d1be      	bne.n	15282 <ip_interface_recvfrom+0x11e>
   15304:	e79b      	b.n	1523e <ip_interface_recvfrom+0xda>
   15306:	4640      	mov	r0, r8
   15308:	f005 fa08 	bl	1a71c <interface_socket_from_handle_get>
   1530c:	b140      	cbz	r0, 15320 <ip_interface_recvfrom+0x1bc>
   1530e:	6846      	ldr	r6, [r0, #4]
   15310:	b136      	cbz	r6, 15320 <ip_interface_recvfrom+0x1bc>
   15312:	2300      	movs	r3, #0
   15314:	6043      	str	r3, [r0, #4]
   15316:	6823      	ldr	r3, [r4, #0]
   15318:	031a      	lsls	r2, r3, #12
   1531a:	d4cc      	bmi.n	152b6 <ip_interface_recvfrom+0x152>
   1531c:	69e0      	ldr	r0, [r4, #28]
   1531e:	e7ec      	b.n	152fa <ip_interface_recvfrom+0x196>
   15320:	2601      	movs	r6, #1
   15322:	e748      	b.n	151b6 <ip_interface_recvfrom+0x52>
   15324:	9b01      	ldr	r3, [sp, #4]
   15326:	b11b      	cbz	r3, 15330 <ip_interface_recvfrom+0x1cc>
   15328:	6823      	ldr	r3, [r4, #0]
   1532a:	00d9      	lsls	r1, r3, #3
   1532c:	d5b0      	bpl.n	15290 <ip_interface_recvfrom+0x12c>
   1532e:	e756      	b.n	151de <ip_interface_recvfrom+0x7a>
   15330:	4698      	mov	r8, r3
   15332:	af02      	add	r7, sp, #8
   15334:	e756      	b.n	151e4 <ip_interface_recvfrom+0x80>
   15336:	6823      	ldr	r3, [r4, #0]
   15338:	b29b      	uxth	r3, r3
   1533a:	2b0d      	cmp	r3, #13
   1533c:	d187      	bne.n	1524e <ip_interface_recvfrom+0xea>
   1533e:	68a3      	ldr	r3, [r4, #8]
   15340:	2b00      	cmp	r3, #0
   15342:	d084      	beq.n	1524e <ip_interface_recvfrom+0xea>
   15344:	68a6      	ldr	r6, [r4, #8]
   15346:	e782      	b.n	1524e <ip_interface_recvfrom+0xea>
   15348:	2609      	movs	r6, #9
   1534a:	e791      	b.n	15270 <ip_interface_recvfrom+0x10c>
   1534c:	6803      	ldr	r3, [r0, #0]
   1534e:	68db      	ldr	r3, [r3, #12]
   15350:	4798      	blx	r3
   15352:	3001      	adds	r0, #1
   15354:	d00a      	beq.n	1536c <ip_interface_recvfrom+0x208>
   15356:	2623      	movs	r6, #35	; 0x23
   15358:	6823      	ldr	r3, [r4, #0]
   1535a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1535e:	6023      	str	r3, [r4, #0]
   15360:	4630      	mov	r0, r6
   15362:	f7fc ff39 	bl	121d8 <bsd_os_errno_set>
   15366:	f04f 35ff 	mov.w	r5, #4294967295
   1536a:	e773      	b.n	15254 <ip_interface_recvfrom+0xf0>
   1536c:	6823      	ldr	r3, [r4, #0]
   1536e:	2500      	movs	r5, #0
   15370:	0c1b      	lsrs	r3, r3, #16
   15372:	041b      	lsls	r3, r3, #16
   15374:	f043 030d 	orr.w	r3, r3, #13
   15378:	6023      	str	r3, [r4, #0]
   1537a:	6823      	ldr	r3, [r4, #0]
   1537c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15380:	6023      	str	r3, [r4, #0]
   15382:	e767      	b.n	15254 <ip_interface_recvfrom+0xf0>
   15384:	2f00      	cmp	r7, #0
   15386:	f47f af50 	bne.w	1522a <ip_interface_recvfrom+0xc6>
   1538a:	e758      	b.n	1523e <ip_interface_recvfrom+0xda>
   1538c:	2623      	movs	r6, #35	; 0x23
   1538e:	e7c5      	b.n	1531c <ip_interface_recvfrom+0x1b8>
   15390:	262d      	movs	r6, #45	; 0x2d
   15392:	e7e5      	b.n	15360 <ip_interface_recvfrom+0x1fc>
   15394:	2616      	movs	r6, #22
   15396:	e7e3      	b.n	15360 <ip_interface_recvfrom+0x1fc>
   15398:	2609      	movs	r6, #9
   1539a:	e7e1      	b.n	15360 <ip_interface_recvfrom+0x1fc>
   1539c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   153a0:	6023      	str	r3, [r4, #0]
   153a2:	6823      	ldr	r3, [r4, #0]
   153a4:	2669      	movs	r6, #105	; 0x69
   153a6:	0c1b      	lsrs	r3, r3, #16
   153a8:	041b      	lsls	r3, r3, #16
   153aa:	f043 030d 	orr.w	r3, r3, #13
   153ae:	6023      	str	r3, [r4, #0]
   153b0:	e7d6      	b.n	15360 <ip_interface_recvfrom+0x1fc>
   153b2:	bf00      	nop

000153b4 <ip_interface_connect>:
   153b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   153b8:	b082      	sub	sp, #8
   153ba:	2900      	cmp	r1, #0
   153bc:	d04b      	beq.n	15456 <ip_interface_connect+0xa2>
   153be:	4617      	mov	r7, r2
   153c0:	2a00      	cmp	r2, #0
   153c2:	d048      	beq.n	15456 <ip_interface_connect+0xa2>
   153c4:	4680      	mov	r8, r0
   153c6:	4689      	mov	r9, r1
   153c8:	f005 f9a8 	bl	1a71c <interface_socket_from_handle_get>
   153cc:	4605      	mov	r5, r0
   153ce:	2800      	cmp	r0, #0
   153d0:	f000 80af 	beq.w	15532 <ip_interface_connect+0x17e>
   153d4:	6803      	ldr	r3, [r0, #0]
   153d6:	b29b      	uxth	r3, r3
   153d8:	2b02      	cmp	r3, #2
   153da:	d004      	beq.n	153e6 <ip_interface_connect+0x32>
   153dc:	6803      	ldr	r3, [r0, #0]
   153de:	b29b      	uxth	r3, r3
   153e0:	2b04      	cmp	r3, #4
   153e2:	f040 809d 	bne.w	15520 <ip_interface_connect+0x16c>
   153e6:	6829      	ldr	r1, [r5, #0]
   153e8:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   153ec:	f040 8089 	bne.w	15502 <ip_interface_connect+0x14e>
   153f0:	ae02      	add	r6, sp, #8
   153f2:	f8d5 a018 	ldr.w	sl, [r5, #24]
   153f6:	f846 1d04 	str.w	r1, [r6, #-4]!
   153fa:	4630      	mov	r0, r6
   153fc:	f7ff fb5e 	bl	14abc <rpc_ip_client_request_alloc>
   15400:	bb98      	cbnz	r0, 1546a <ip_interface_connect+0xb6>
   15402:	2108      	movs	r1, #8
   15404:	ea4f 4208 	mov.w	r2, r8, lsl #16
   15408:	9c01      	ldr	r4, [sp, #4]
   1540a:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1540e:	f043 0302 	orr.w	r3, r3, #2
   15412:	60e3      	str	r3, [r4, #12]
   15414:	f8c4 a010 	str.w	sl, [r4, #16]
   15418:	7260      	strb	r0, [r4, #9]
   1541a:	72a0      	strb	r0, [r4, #10]
   1541c:	72e0      	strb	r0, [r4, #11]
   1541e:	7221      	strb	r1, [r4, #8]
   15420:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   15424:	f042 0202 	orr.w	r2, r2, #2
   15428:	60e2      	str	r2, [r4, #12]
   1542a:	68a3      	ldr	r3, [r4, #8]
   1542c:	69aa      	ldr	r2, [r5, #24]
   1542e:	3304      	adds	r3, #4
   15430:	6122      	str	r2, [r4, #16]
   15432:	60a3      	str	r3, [r4, #8]
   15434:	68eb      	ldr	r3, [r5, #12]
   15436:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1543a:	4293      	cmp	r3, r2
   1543c:	d11b      	bne.n	15476 <ip_interface_connect+0xc2>
   1543e:	f899 2000 	ldrb.w	r2, [r9]
   15442:	4297      	cmp	r7, r2
   15444:	d107      	bne.n	15456 <ip_interface_connect+0xa2>
   15446:	2b02      	cmp	r3, #2
   15448:	f104 0018 	add.w	r0, r4, #24
   1544c:	d015      	beq.n	1547a <ip_interface_connect+0xc6>
   1544e:	2b0a      	cmp	r3, #10
   15450:	d101      	bne.n	15456 <ip_interface_connect+0xa2>
   15452:	2f24      	cmp	r7, #36	; 0x24
   15454:	d01d      	beq.n	15492 <ip_interface_connect+0xde>
   15456:	2416      	movs	r4, #22
   15458:	4620      	mov	r0, r4
   1545a:	f7fc febd 	bl	121d8 <bsd_os_errno_set>
   1545e:	f04f 34ff 	mov.w	r4, #4294967295
   15462:	4620      	mov	r0, r4
   15464:	b002      	add	sp, #8
   15466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1546a:	9c01      	ldr	r4, [sp, #4]
   1546c:	2c00      	cmp	r4, #0
   1546e:	d05e      	beq.n	1552e <ip_interface_connect+0x17a>
   15470:	ea4f 4208 	mov.w	r2, r8, lsl #16
   15474:	e7d4      	b.n	15420 <ip_interface_connect+0x6c>
   15476:	242f      	movs	r4, #47	; 0x2f
   15478:	e7ee      	b.n	15458 <ip_interface_connect+0xa4>
   1547a:	2f10      	cmp	r7, #16
   1547c:	d1eb      	bne.n	15456 <ip_interface_connect+0xa2>
   1547e:	2204      	movs	r2, #4
   15480:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   15484:	f109 010c 	add.w	r1, r9, #12
   15488:	82e2      	strh	r2, [r4, #22]
   1548a:	82a3      	strh	r3, [r4, #20]
   1548c:	f007 fbe3 	bl	1cc56 <memcpy>
   15490:	e008      	b.n	154a4 <ip_interface_connect+0xf0>
   15492:	2210      	movs	r2, #16
   15494:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   15498:	eb09 0102 	add.w	r1, r9, r2
   1549c:	82e2      	strh	r2, [r4, #22]
   1549e:	82a3      	strh	r3, [r4, #20]
   154a0:	f007 fbd9 	bl	1cc56 <memcpy>
   154a4:	68a3      	ldr	r3, [r4, #8]
   154a6:	8ae2      	ldrh	r2, [r4, #22]
   154a8:	f247 0102 	movw	r1, #28674	; 0x7002
   154ac:	4413      	add	r3, r2
   154ae:	60a3      	str	r3, [r4, #8]
   154b0:	682f      	ldr	r7, [r5, #0]
   154b2:	682b      	ldr	r3, [r5, #0]
   154b4:	4620      	mov	r0, r4
   154b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   154ba:	602b      	str	r3, [r5, #0]
   154bc:	f7ff fb12 	bl	14ae4 <rpc_ip_client_request_send>
   154c0:	b9a8      	cbnz	r0, 154ee <ip_interface_connect+0x13a>
   154c2:	682b      	ldr	r3, [r5, #0]
   154c4:	00db      	lsls	r3, r3, #3
   154c6:	d429      	bmi.n	1551c <ip_interface_connect+0x168>
   154c8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   154ca:	4633      	mov	r3, r6
   154cc:	2c00      	cmp	r4, #0
   154ce:	bf08      	it	eq
   154d0:	f04f 34ff 	moveq.w	r4, #4294967295
   154d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   154d8:	2105      	movs	r1, #5
   154da:	4640      	mov	r0, r8
   154dc:	9401      	str	r4, [sp, #4]
   154de:	f005 f89d 	bl	1a61c <interface_socket_wait>
   154e2:	4604      	mov	r4, r0
   154e4:	b178      	cbz	r0, 15506 <ip_interface_connect+0x152>
   154e6:	2c73      	cmp	r4, #115	; 0x73
   154e8:	d0b6      	beq.n	15458 <ip_interface_connect+0xa4>
   154ea:	602f      	str	r7, [r5, #0]
   154ec:	e7b4      	b.n	15458 <ip_interface_connect+0xa4>
   154ee:	6820      	ldr	r0, [r4, #0]
   154f0:	b108      	cbz	r0, 154f6 <ip_interface_connect+0x142>
   154f2:	f7ff fb15 	bl	14b20 <rpc_ip_client_data_free>
   154f6:	4620      	mov	r0, r4
   154f8:	f7ff fb0a 	bl	14b10 <rpc_ip_client_message_free>
   154fc:	2423      	movs	r4, #35	; 0x23
   154fe:	602f      	str	r7, [r5, #0]
   15500:	e7aa      	b.n	15458 <ip_interface_connect+0xa4>
   15502:	2472      	movs	r4, #114	; 0x72
   15504:	e7a8      	b.n	15458 <ip_interface_connect+0xa4>
   15506:	4640      	mov	r0, r8
   15508:	f005 f908 	bl	1a71c <interface_socket_from_handle_get>
   1550c:	2800      	cmp	r0, #0
   1550e:	d0a8      	beq.n	15462 <ip_interface_connect+0xae>
   15510:	6843      	ldr	r3, [r0, #4]
   15512:	2b00      	cmp	r3, #0
   15514:	d0a5      	beq.n	15462 <ip_interface_connect+0xae>
   15516:	6044      	str	r4, [r0, #4]
   15518:	461c      	mov	r4, r3
   1551a:	e7e4      	b.n	154e6 <ip_interface_connect+0x132>
   1551c:	2473      	movs	r4, #115	; 0x73
   1551e:	e79b      	b.n	15458 <ip_interface_connect+0xa4>
   15520:	6803      	ldr	r3, [r0, #0]
   15522:	b29b      	uxth	r3, r3
   15524:	2b05      	cmp	r3, #5
   15526:	bf14      	ite	ne
   15528:	2409      	movne	r4, #9
   1552a:	2438      	moveq	r4, #56	; 0x38
   1552c:	e794      	b.n	15458 <ip_interface_connect+0xa4>
   1552e:	240c      	movs	r4, #12
   15530:	e792      	b.n	15458 <ip_interface_connect+0xa4>
   15532:	2409      	movs	r4, #9
   15534:	e790      	b.n	15458 <ip_interface_connect+0xa4>
   15536:	bf00      	nop

00015538 <ip_interface_bind>:
   15538:	f04f 33ff 	mov.w	r3, #4294967295
   1553c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15540:	b083      	sub	sp, #12
   15542:	9300      	str	r3, [sp, #0]
   15544:	b3b1      	cbz	r1, 155b4 <ip_interface_bind+0x7c>
   15546:	4616      	mov	r6, r2
   15548:	b3a2      	cbz	r2, 155b4 <ip_interface_bind+0x7c>
   1554a:	4607      	mov	r7, r0
   1554c:	4688      	mov	r8, r1
   1554e:	f005 f8e5 	bl	1a71c <interface_socket_from_handle_get>
   15552:	4605      	mov	r5, r0
   15554:	2800      	cmp	r0, #0
   15556:	d04a      	beq.n	155ee <ip_interface_bind+0xb6>
   15558:	6803      	ldr	r3, [r0, #0]
   1555a:	b29b      	uxth	r3, r3
   1555c:	2b02      	cmp	r3, #2
   1555e:	d146      	bne.n	155ee <ip_interface_bind+0xb6>
   15560:	2100      	movs	r1, #0
   15562:	a802      	add	r0, sp, #8
   15564:	f840 1d04 	str.w	r1, [r0, #-4]!
   15568:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1556c:	f7ff faa6 	bl	14abc <rpc_ip_client_request_alloc>
   15570:	bb50      	cbnz	r0, 155c8 <ip_interface_bind+0x90>
   15572:	f247 0305 	movw	r3, #28677	; 0x7005
   15576:	2208      	movs	r2, #8
   15578:	9c01      	ldr	r4, [sp, #4]
   1557a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1557e:	60e3      	str	r3, [r4, #12]
   15580:	f8c4 9010 	str.w	r9, [r4, #16]
   15584:	7260      	strb	r0, [r4, #9]
   15586:	72a0      	strb	r0, [r4, #10]
   15588:	72e0      	strb	r0, [r4, #11]
   1558a:	7222      	strb	r2, [r4, #8]
   1558c:	68a3      	ldr	r3, [r4, #8]
   1558e:	3304      	adds	r3, #4
   15590:	60a3      	str	r3, [r4, #8]
   15592:	68eb      	ldr	r3, [r5, #12]
   15594:	f8d8 2004 	ldr.w	r2, [r8, #4]
   15598:	4293      	cmp	r3, r2
   1559a:	d11a      	bne.n	155d2 <ip_interface_bind+0x9a>
   1559c:	f898 2000 	ldrb.w	r2, [r8]
   155a0:	4296      	cmp	r6, r2
   155a2:	d107      	bne.n	155b4 <ip_interface_bind+0x7c>
   155a4:	2b02      	cmp	r3, #2
   155a6:	f104 0018 	add.w	r0, r4, #24
   155aa:	d014      	beq.n	155d6 <ip_interface_bind+0x9e>
   155ac:	2b0a      	cmp	r3, #10
   155ae:	d101      	bne.n	155b4 <ip_interface_bind+0x7c>
   155b0:	2e24      	cmp	r6, #36	; 0x24
   155b2:	d01e      	beq.n	155f2 <ip_interface_bind+0xba>
   155b4:	2416      	movs	r4, #22
   155b6:	4620      	mov	r0, r4
   155b8:	f7fc fe0e 	bl	121d8 <bsd_os_errno_set>
   155bc:	f04f 34ff 	mov.w	r4, #4294967295
   155c0:	4620      	mov	r0, r4
   155c2:	b003      	add	sp, #12
   155c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   155c8:	9c01      	ldr	r4, [sp, #4]
   155ca:	2c00      	cmp	r4, #0
   155cc:	d1de      	bne.n	1558c <ip_interface_bind+0x54>
   155ce:	240c      	movs	r4, #12
   155d0:	e7f1      	b.n	155b6 <ip_interface_bind+0x7e>
   155d2:	242f      	movs	r4, #47	; 0x2f
   155d4:	e7ef      	b.n	155b6 <ip_interface_bind+0x7e>
   155d6:	2e10      	cmp	r6, #16
   155d8:	d1ec      	bne.n	155b4 <ip_interface_bind+0x7c>
   155da:	2204      	movs	r2, #4
   155dc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   155e0:	f108 010c 	add.w	r1, r8, #12
   155e4:	82e2      	strh	r2, [r4, #22]
   155e6:	82a3      	strh	r3, [r4, #20]
   155e8:	f007 fb35 	bl	1cc56 <memcpy>
   155ec:	e00a      	b.n	15604 <ip_interface_bind+0xcc>
   155ee:	2409      	movs	r4, #9
   155f0:	e7e1      	b.n	155b6 <ip_interface_bind+0x7e>
   155f2:	2210      	movs	r2, #16
   155f4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   155f8:	eb08 0102 	add.w	r1, r8, r2
   155fc:	82e2      	strh	r2, [r4, #22]
   155fe:	82a3      	strh	r3, [r4, #20]
   15600:	f007 fb29 	bl	1cc56 <memcpy>
   15604:	68a3      	ldr	r3, [r4, #8]
   15606:	8ae2      	ldrh	r2, [r4, #22]
   15608:	f247 0105 	movw	r1, #28677	; 0x7005
   1560c:	4413      	add	r3, r2
   1560e:	60a3      	str	r3, [r4, #8]
   15610:	682b      	ldr	r3, [r5, #0]
   15612:	4620      	mov	r0, r4
   15614:	0c1b      	lsrs	r3, r3, #16
   15616:	041b      	lsls	r3, r3, #16
   15618:	f043 0303 	orr.w	r3, r3, #3
   1561c:	602b      	str	r3, [r5, #0]
   1561e:	682e      	ldr	r6, [r5, #0]
   15620:	f7ff fa60 	bl	14ae4 <rpc_ip_client_request_send>
   15624:	4680      	mov	r8, r0
   15626:	b978      	cbnz	r0, 15648 <ip_interface_bind+0x110>
   15628:	466b      	mov	r3, sp
   1562a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1562e:	2104      	movs	r1, #4
   15630:	4638      	mov	r0, r7
   15632:	f004 fff3 	bl	1a61c <interface_socket_wait>
   15636:	4604      	mov	r4, r0
   15638:	b1a0      	cbz	r0, 15664 <ip_interface_bind+0x12c>
   1563a:	682b      	ldr	r3, [r5, #0]
   1563c:	0c1b      	lsrs	r3, r3, #16
   1563e:	041b      	lsls	r3, r3, #16
   15640:	f043 0302 	orr.w	r3, r3, #2
   15644:	602b      	str	r3, [r5, #0]
   15646:	e7b6      	b.n	155b6 <ip_interface_bind+0x7e>
   15648:	6820      	ldr	r0, [r4, #0]
   1564a:	b108      	cbz	r0, 15650 <ip_interface_bind+0x118>
   1564c:	f7ff fa68 	bl	14b20 <rpc_ip_client_data_free>
   15650:	0c36      	lsrs	r6, r6, #16
   15652:	0436      	lsls	r6, r6, #16
   15654:	4620      	mov	r0, r4
   15656:	f046 0602 	orr.w	r6, r6, #2
   1565a:	f7ff fa59 	bl	14b10 <rpc_ip_client_message_free>
   1565e:	2423      	movs	r4, #35	; 0x23
   15660:	602e      	str	r6, [r5, #0]
   15662:	e7a8      	b.n	155b6 <ip_interface_bind+0x7e>
   15664:	4638      	mov	r0, r7
   15666:	f005 f859 	bl	1a71c <interface_socket_from_handle_get>
   1566a:	2800      	cmp	r0, #0
   1566c:	d0a8      	beq.n	155c0 <ip_interface_bind+0x88>
   1566e:	6844      	ldr	r4, [r0, #4]
   15670:	2c00      	cmp	r4, #0
   15672:	d0a5      	beq.n	155c0 <ip_interface_bind+0x88>
   15674:	f8c0 8004 	str.w	r8, [r0, #4]
   15678:	e7df      	b.n	1563a <ip_interface_bind+0x102>
   1567a:	bf00      	nop

0001567c <ip_interface_listen>:
   1567c:	f04f 33ff 	mov.w	r3, #4294967295
   15680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15684:	b082      	sub	sp, #8
   15686:	4606      	mov	r6, r0
   15688:	9300      	str	r3, [sp, #0]
   1568a:	f005 f847 	bl	1a71c <interface_socket_from_handle_get>
   1568e:	2800      	cmp	r0, #0
   15690:	d066      	beq.n	15760 <ip_interface_listen+0xe4>
   15692:	6803      	ldr	r3, [r0, #0]
   15694:	4605      	mov	r5, r0
   15696:	b29b      	uxth	r3, r3
   15698:	2b04      	cmp	r3, #4
   1569a:	d161      	bne.n	15760 <ip_interface_listen+0xe4>
   1569c:	2100      	movs	r1, #0
   1569e:	4a32      	ldr	r2, [pc, #200]	; (15768 <ip_interface_listen+0xec>)
   156a0:	4630      	mov	r0, r6
   156a2:	f004 ff83 	bl	1a5ac <interface_socket_packet_handler_update>
   156a6:	4601      	mov	r1, r0
   156a8:	2800      	cmp	r0, #0
   156aa:	d15b      	bne.n	15764 <ip_interface_listen+0xe8>
   156ac:	a802      	add	r0, sp, #8
   156ae:	f840 1d04 	str.w	r1, [r0, #-4]!
   156b2:	69af      	ldr	r7, [r5, #24]
   156b4:	f7ff fa02 	bl	14abc <rpc_ip_client_request_alloc>
   156b8:	bba0      	cbnz	r0, 15724 <ip_interface_listen+0xa8>
   156ba:	f247 0308 	movw	r3, #28680	; 0x7008
   156be:	2208      	movs	r2, #8
   156c0:	9c01      	ldr	r4, [sp, #4]
   156c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   156c6:	60e3      	str	r3, [r4, #12]
   156c8:	6127      	str	r7, [r4, #16]
   156ca:	7260      	strb	r0, [r4, #9]
   156cc:	72a0      	strb	r0, [r4, #10]
   156ce:	72e0      	strb	r0, [r4, #11]
   156d0:	7222      	strb	r2, [r4, #8]
   156d2:	68a3      	ldr	r3, [r4, #8]
   156d4:	f247 0108 	movw	r1, #28680	; 0x7008
   156d8:	3304      	adds	r3, #4
   156da:	60a3      	str	r3, [r4, #8]
   156dc:	682b      	ldr	r3, [r5, #0]
   156de:	4620      	mov	r0, r4
   156e0:	0c1b      	lsrs	r3, r3, #16
   156e2:	041b      	lsls	r3, r3, #16
   156e4:	f043 0306 	orr.w	r3, r3, #6
   156e8:	602b      	str	r3, [r5, #0]
   156ea:	682f      	ldr	r7, [r5, #0]
   156ec:	f7ff f9fa 	bl	14ae4 <rpc_ip_client_request_send>
   156f0:	4680      	mov	r8, r0
   156f2:	b9e0      	cbnz	r0, 1572e <ip_interface_listen+0xb2>
   156f4:	466b      	mov	r3, sp
   156f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   156fa:	2107      	movs	r1, #7
   156fc:	4630      	mov	r0, r6
   156fe:	f004 ff8d 	bl	1a61c <interface_socket_wait>
   15702:	4604      	mov	r4, r0
   15704:	b308      	cbz	r0, 1574a <ip_interface_listen+0xce>
   15706:	682b      	ldr	r3, [r5, #0]
   15708:	0c1b      	lsrs	r3, r3, #16
   1570a:	041b      	lsls	r3, r3, #16
   1570c:	f043 0304 	orr.w	r3, r3, #4
   15710:	602b      	str	r3, [r5, #0]
   15712:	4620      	mov	r0, r4
   15714:	f7fc fd60 	bl	121d8 <bsd_os_errno_set>
   15718:	f04f 34ff 	mov.w	r4, #4294967295
   1571c:	4620      	mov	r0, r4
   1571e:	b002      	add	sp, #8
   15720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15724:	9c01      	ldr	r4, [sp, #4]
   15726:	2c00      	cmp	r4, #0
   15728:	d1d3      	bne.n	156d2 <ip_interface_listen+0x56>
   1572a:	240c      	movs	r4, #12
   1572c:	e7f1      	b.n	15712 <ip_interface_listen+0x96>
   1572e:	6820      	ldr	r0, [r4, #0]
   15730:	b108      	cbz	r0, 15736 <ip_interface_listen+0xba>
   15732:	f7ff f9f5 	bl	14b20 <rpc_ip_client_data_free>
   15736:	0c3f      	lsrs	r7, r7, #16
   15738:	043f      	lsls	r7, r7, #16
   1573a:	4620      	mov	r0, r4
   1573c:	f047 0704 	orr.w	r7, r7, #4
   15740:	f7ff f9e6 	bl	14b10 <rpc_ip_client_message_free>
   15744:	2423      	movs	r4, #35	; 0x23
   15746:	602f      	str	r7, [r5, #0]
   15748:	e7e3      	b.n	15712 <ip_interface_listen+0x96>
   1574a:	4630      	mov	r0, r6
   1574c:	f004 ffe6 	bl	1a71c <interface_socket_from_handle_get>
   15750:	2800      	cmp	r0, #0
   15752:	d0e3      	beq.n	1571c <ip_interface_listen+0xa0>
   15754:	6844      	ldr	r4, [r0, #4]
   15756:	2c00      	cmp	r4, #0
   15758:	d0e0      	beq.n	1571c <ip_interface_listen+0xa0>
   1575a:	f8c0 8004 	str.w	r8, [r0, #4]
   1575e:	e7d2      	b.n	15706 <ip_interface_listen+0x8a>
   15760:	2409      	movs	r4, #9
   15762:	e7d6      	b.n	15712 <ip_interface_listen+0x96>
   15764:	2423      	movs	r4, #35	; 0x23
   15766:	e7d4      	b.n	15712 <ip_interface_listen+0x96>
   15768:	00014b31 	.word	0x00014b31

0001576c <ip_interface_accept>:
   1576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15770:	f04f 33ff 	mov.w	r3, #4294967295
   15774:	2500      	movs	r5, #0
   15776:	b087      	sub	sp, #28
   15778:	460f      	mov	r7, r1
   1577a:	4690      	mov	r8, r2
   1577c:	e9cd 5303 	strd	r5, r3, [sp, #12]
   15780:	4606      	mov	r6, r0
   15782:	f004 ffcb 	bl	1a71c <interface_socket_from_handle_get>
   15786:	4604      	mov	r4, r0
   15788:	2800      	cmp	r0, #0
   1578a:	f000 8123 	beq.w	159d4 <ip_interface_accept+0x268>
   1578e:	6803      	ldr	r3, [r0, #0]
   15790:	b29b      	uxth	r3, r3
   15792:	2b07      	cmp	r3, #7
   15794:	d10a      	bne.n	157ac <ip_interface_accept+0x40>
   15796:	6803      	ldr	r3, [r0, #0]
   15798:	6805      	ldr	r5, [r0, #0]
   1579a:	00db      	lsls	r3, r3, #3
   1579c:	d416      	bmi.n	157cc <ip_interface_accept+0x60>
   1579e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   157a2:	d019      	beq.n	157d8 <ip_interface_accept+0x6c>
   157a4:	6805      	ldr	r5, [r0, #0]
   157a6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   157aa:	d124      	bne.n	157f6 <ip_interface_accept+0x8a>
   157ac:	f04f 0909 	mov.w	r9, #9
   157b0:	9b03      	ldr	r3, [sp, #12]
   157b2:	b113      	cbz	r3, 157ba <ip_interface_accept+0x4e>
   157b4:	4628      	mov	r0, r5
   157b6:	f004 fee3 	bl	1a580 <interface_socket_free>
   157ba:	4648      	mov	r0, r9
   157bc:	f04f 39ff 	mov.w	r9, #4294967295
   157c0:	f7fc fd0a 	bl	121d8 <bsd_os_errno_set>
   157c4:	4648      	mov	r0, r9
   157c6:	b007      	add	sp, #28
   157c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157cc:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   157d0:	d170      	bne.n	158b4 <ip_interface_accept+0x148>
   157d2:	f04f 0923 	mov.w	r9, #35	; 0x23
   157d6:	e7eb      	b.n	157b0 <ip_interface_accept+0x44>
   157d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   157dc:	ab04      	add	r3, sp, #16
   157de:	4611      	mov	r1, r2
   157e0:	4630      	mov	r0, r6
   157e2:	f004 ff1b 	bl	1a61c <interface_socket_wait>
   157e6:	4681      	mov	r9, r0
   157e8:	2800      	cmp	r0, #0
   157ea:	f000 8082 	beq.w	158f2 <ip_interface_accept+0x186>
   157ee:	6825      	ldr	r5, [r4, #0]
   157f0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   157f4:	d0dc      	beq.n	157b0 <ip_interface_accept+0x44>
   157f6:	f04f 30ff 	mov.w	r0, #4294967295
   157fa:	2300      	movs	r3, #0
   157fc:	e9cd 0300 	strd	r0, r3, [sp]
   15800:	4a78      	ldr	r2, [pc, #480]	; (159e4 <ip_interface_accept+0x278>)
   15802:	6921      	ldr	r1, [r4, #16]
   15804:	a803      	add	r0, sp, #12
   15806:	f004 fe57 	bl	1a4b8 <interface_socket_allocate>
   1580a:	9b03      	ldr	r3, [sp, #12]
   1580c:	4605      	mov	r5, r0
   1580e:	2b00      	cmp	r3, #0
   15810:	f000 80e4 	beq.w	159dc <ip_interface_accept+0x270>
   15814:	2100      	movs	r1, #0
   15816:	6962      	ldr	r2, [r4, #20]
   15818:	a806      	add	r0, sp, #24
   1581a:	615a      	str	r2, [r3, #20]
   1581c:	68e2      	ldr	r2, [r4, #12]
   1581e:	f840 1d04 	str.w	r1, [r0, #-4]!
   15822:	60da      	str	r2, [r3, #12]
   15824:	6922      	ldr	r2, [r4, #16]
   15826:	611a      	str	r2, [r3, #16]
   15828:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1582c:	f7ff f946 	bl	14abc <rpc_ip_client_request_alloc>
   15830:	2800      	cmp	r0, #0
   15832:	d146      	bne.n	158c2 <ip_interface_accept+0x156>
   15834:	f247 030c 	movw	r3, #28684	; 0x700c
   15838:	2108      	movs	r1, #8
   1583a:	f8dd b014 	ldr.w	fp, [sp, #20]
   1583e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15842:	f8cb 300c 	str.w	r3, [fp, #12]
   15846:	f8cb 9010 	str.w	r9, [fp, #16]
   1584a:	f88b 0009 	strb.w	r0, [fp, #9]
   1584e:	f88b 000a 	strb.w	r0, [fp, #10]
   15852:	f88b 000b 	strb.w	r0, [fp, #11]
   15856:	f88b 1008 	strb.w	r1, [fp, #8]
   1585a:	6823      	ldr	r3, [r4, #0]
   1585c:	f247 010c 	movw	r1, #28684	; 0x700c
   15860:	0c1b      	lsrs	r3, r3, #16
   15862:	041b      	lsls	r3, r3, #16
   15864:	f043 0308 	orr.w	r3, r3, #8
   15868:	6023      	str	r3, [r4, #0]
   1586a:	4658      	mov	r0, fp
   1586c:	f8d4 9000 	ldr.w	r9, [r4]
   15870:	f7ff f938 	bl	14ae4 <rpc_ip_client_request_send>
   15874:	4682      	mov	sl, r0
   15876:	bb60      	cbnz	r0, 158d2 <ip_interface_accept+0x166>
   15878:	6822      	ldr	r2, [r4, #0]
   1587a:	9900      	ldr	r1, [sp, #0]
   1587c:	ab04      	add	r3, sp, #16
   1587e:	400a      	ands	r2, r1
   15880:	6022      	str	r2, [r4, #0]
   15882:	2109      	movs	r1, #9
   15884:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15888:	4630      	mov	r0, r6
   1588a:	f004 fec7 	bl	1a61c <interface_socket_wait>
   1588e:	4681      	mov	r9, r0
   15890:	2800      	cmp	r0, #0
   15892:	f000 808d 	beq.w	159b0 <ip_interface_accept+0x244>
   15896:	6823      	ldr	r3, [r4, #0]
   15898:	9a01      	ldr	r2, [sp, #4]
   1589a:	431a      	orrs	r2, r3
   1589c:	6022      	str	r2, [r4, #0]
   1589e:	6823      	ldr	r3, [r4, #0]
   158a0:	0c1b      	lsrs	r3, r3, #16
   158a2:	041b      	lsls	r3, r3, #16
   158a4:	f043 0307 	orr.w	r3, r3, #7
   158a8:	6023      	str	r3, [r4, #0]
   158aa:	6823      	ldr	r3, [r4, #0]
   158ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   158b0:	6023      	str	r3, [r4, #0]
   158b2:	e77d      	b.n	157b0 <ip_interface_accept+0x44>
   158b4:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   158b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   158bc:	e9cd 2300 	strd	r2, r3, [sp]
   158c0:	e79e      	b.n	15800 <ip_interface_accept+0x94>
   158c2:	f8dd b014 	ldr.w	fp, [sp, #20]
   158c6:	f04f 090c 	mov.w	r9, #12
   158ca:	f1bb 0f00 	cmp.w	fp, #0
   158ce:	d1c4      	bne.n	1585a <ip_interface_accept+0xee>
   158d0:	e76e      	b.n	157b0 <ip_interface_accept+0x44>
   158d2:	f8db 0000 	ldr.w	r0, [fp]
   158d6:	b108      	cbz	r0, 158dc <ip_interface_accept+0x170>
   158d8:	f7ff f922 	bl	14b20 <rpc_ip_client_data_free>
   158dc:	ea4f 4919 	mov.w	r9, r9, lsr #16
   158e0:	4658      	mov	r0, fp
   158e2:	ea4f 4909 	mov.w	r9, r9, lsl #16
   158e6:	f7ff f913 	bl	14b10 <rpc_ip_client_message_free>
   158ea:	f049 0307 	orr.w	r3, r9, #7
   158ee:	6023      	str	r3, [r4, #0]
   158f0:	e76f      	b.n	157d2 <ip_interface_accept+0x66>
   158f2:	4630      	mov	r0, r6
   158f4:	f004 ff12 	bl	1a71c <interface_socket_from_handle_get>
   158f8:	b130      	cbz	r0, 15908 <ip_interface_accept+0x19c>
   158fa:	f8d0 9004 	ldr.w	r9, [r0, #4]
   158fe:	f1b9 0f00 	cmp.w	r9, #0
   15902:	d001      	beq.n	15908 <ip_interface_accept+0x19c>
   15904:	6045      	str	r5, [r0, #4]
   15906:	e772      	b.n	157ee <ip_interface_accept+0x82>
   15908:	6823      	ldr	r3, [r4, #0]
   1590a:	03d9      	lsls	r1, r3, #15
   1590c:	f53f af73 	bmi.w	157f6 <ip_interface_accept+0x8a>
   15910:	4d35      	ldr	r5, [pc, #212]	; (159e8 <ip_interface_accept+0x27c>)
   15912:	9903      	ldr	r1, [sp, #12]
   15914:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   15918:	699b      	ldr	r3, [r3, #24]
   1591a:	618b      	str	r3, [r1, #24]
   1591c:	b147      	cbz	r7, 15930 <ip_interface_accept+0x1c4>
   1591e:	68cb      	ldr	r3, [r1, #12]
   15920:	2b0a      	cmp	r3, #10
   15922:	d028      	beq.n	15976 <ip_interface_accept+0x20a>
   15924:	2b02      	cmp	r3, #2
   15926:	d103      	bne.n	15930 <ip_interface_accept+0x1c4>
   15928:	f8d8 2000 	ldr.w	r2, [r8]
   1592c:	2a10      	cmp	r2, #16
   1592e:	d036      	beq.n	1599e <ip_interface_accept+0x232>
   15930:	680a      	ldr	r2, [r1, #0]
   15932:	482e      	ldr	r0, [pc, #184]	; (159ec <ip_interface_accept+0x280>)
   15934:	4002      	ands	r2, r0
   15936:	f042 0205 	orr.w	r2, r2, #5
   1593a:	600a      	str	r2, [r1, #0]
   1593c:	9a03      	ldr	r2, [sp, #12]
   1593e:	6811      	ldr	r1, [r2, #0]
   15940:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   15944:	6011      	str	r1, [r2, #0]
   15946:	6811      	ldr	r1, [r2, #0]
   15948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1594c:	6011      	str	r1, [r2, #0]
   1594e:	6823      	ldr	r3, [r4, #0]
   15950:	4003      	ands	r3, r0
   15952:	f043 0307 	orr.w	r3, r3, #7
   15956:	6023      	str	r3, [r4, #0]
   15958:	6823      	ldr	r3, [r4, #0]
   1595a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1595e:	6023      	str	r3, [r4, #0]
   15960:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   15964:	f7ff f8d4 	bl	14b10 <rpc_ip_client_message_free>
   15968:	2300      	movs	r3, #0
   1596a:	4648      	mov	r0, r9
   1596c:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   15970:	b007      	add	sp, #28
   15972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15976:	f8d8 2000 	ldr.w	r2, [r8]
   1597a:	2a24      	cmp	r2, #36	; 0x24
   1597c:	d1d8      	bne.n	15930 <ip_interface_accept+0x1c4>
   1597e:	703a      	strb	r2, [r7, #0]
   15980:	2210      	movs	r2, #16
   15982:	607b      	str	r3, [r7, #4]
   15984:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   15988:	f107 0010 	add.w	r0, r7, #16
   1598c:	8b9b      	ldrh	r3, [r3, #28]
   1598e:	813b      	strh	r3, [r7, #8]
   15990:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   15994:	3120      	adds	r1, #32
   15996:	f007 f95e 	bl	1cc56 <memcpy>
   1599a:	9903      	ldr	r1, [sp, #12]
   1599c:	e7c8      	b.n	15930 <ip_interface_accept+0x1c4>
   1599e:	703a      	strb	r2, [r7, #0]
   159a0:	607b      	str	r3, [r7, #4]
   159a2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   159a6:	f107 000c 	add.w	r0, r7, #12
   159aa:	8b9b      	ldrh	r3, [r3, #28]
   159ac:	2204      	movs	r2, #4
   159ae:	e7ee      	b.n	1598e <ip_interface_accept+0x222>
   159b0:	4630      	mov	r0, r6
   159b2:	f004 feb3 	bl	1a71c <interface_socket_from_handle_get>
   159b6:	b138      	cbz	r0, 159c8 <ip_interface_accept+0x25c>
   159b8:	f8d0 9004 	ldr.w	r9, [r0, #4]
   159bc:	f1b9 0f00 	cmp.w	r9, #0
   159c0:	d002      	beq.n	159c8 <ip_interface_accept+0x25c>
   159c2:	f8c0 a004 	str.w	sl, [r0, #4]
   159c6:	e766      	b.n	15896 <ip_interface_accept+0x12a>
   159c8:	6823      	ldr	r3, [r4, #0]
   159ca:	9a01      	ldr	r2, [sp, #4]
   159cc:	46a9      	mov	r9, r5
   159ce:	4313      	orrs	r3, r2
   159d0:	6023      	str	r3, [r4, #0]
   159d2:	e79d      	b.n	15910 <ip_interface_accept+0x1a4>
   159d4:	4605      	mov	r5, r0
   159d6:	f04f 0909 	mov.w	r9, #9
   159da:	e6e9      	b.n	157b0 <ip_interface_accept+0x44>
   159dc:	f04f 090c 	mov.w	r9, #12
   159e0:	e6eb      	b.n	157ba <ip_interface_accept+0x4e>
   159e2:	bf00      	nop
   159e4:	00014b31 	.word	0x00014b31
   159e8:	20021114 	.word	0x20021114
   159ec:	ffff0000 	.word	0xffff0000

000159f0 <ip_interface_setopt>:
   159f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159f4:	2901      	cmp	r1, #1
   159f6:	b086      	sub	sp, #24
   159f8:	f040 809d 	bne.w	15b36 <ip_interface_setopt+0x146>
   159fc:	460e      	mov	r6, r1
   159fe:	4690      	mov	r8, r2
   15a00:	461d      	mov	r5, r3
   15a02:	4607      	mov	r7, r0
   15a04:	f004 fe8a 	bl	1a71c <interface_socket_from_handle_get>
   15a08:	4604      	mov	r4, r0
   15a0a:	2800      	cmp	r0, #0
   15a0c:	f000 80a6 	beq.w	15b5c <ip_interface_setopt+0x16c>
   15a10:	f1b8 0f19 	cmp.w	r8, #25
   15a14:	d16f      	bne.n	15af6 <ip_interface_setopt+0x106>
   15a16:	2d00      	cmp	r5, #0
   15a18:	f000 8093 	beq.w	15b42 <ip_interface_setopt+0x152>
   15a1c:	4628      	mov	r0, r5
   15a1e:	f007 f8e8 	bl	1cbf2 <strlen>
   15a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15a24:	4298      	cmp	r0, r3
   15a26:	f040 808c 	bne.w	15b42 <ip_interface_setopt+0x152>
   15a2a:	6823      	ldr	r3, [r4, #0]
   15a2c:	b29b      	uxth	r3, r3
   15a2e:	2b02      	cmp	r3, #2
   15a30:	d174      	bne.n	15b1c <ip_interface_setopt+0x12c>
   15a32:	4629      	mov	r1, r5
   15a34:	68e0      	ldr	r0, [r4, #12]
   15a36:	f002 fbd9 	bl	181ec <pdn_interface_pdn_id_get>
   15a3a:	9003      	str	r0, [sp, #12]
   15a3c:	3001      	adds	r0, #1
   15a3e:	bf08      	it	eq
   15a40:	2516      	moveq	r5, #22
   15a42:	d04f      	beq.n	15ae4 <ip_interface_setopt+0xf4>
   15a44:	f04f 33ff 	mov.w	r3, #4294967295
   15a48:	9304      	str	r3, [sp, #16]
   15a4a:	6823      	ldr	r3, [r4, #0]
   15a4c:	025b      	lsls	r3, r3, #9
   15a4e:	d448      	bmi.n	15ae2 <ip_interface_setopt+0xf2>
   15a50:	6823      	ldr	r3, [r4, #0]
   15a52:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   15a56:	d144      	bne.n	15ae2 <ip_interface_setopt+0xf2>
   15a58:	6826      	ldr	r6, [r4, #0]
   15a5a:	6822      	ldr	r2, [r4, #0]
   15a5c:	a806      	add	r0, sp, #24
   15a5e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   15a62:	6022      	str	r2, [r4, #0]
   15a64:	2104      	movs	r1, #4
   15a66:	f840 3d04 	str.w	r3, [r0, #-4]!
   15a6a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   15a6e:	f7ff f825 	bl	14abc <rpc_ip_client_request_alloc>
   15a72:	2800      	cmp	r0, #0
   15a74:	d14c      	bne.n	15b10 <ip_interface_setopt+0x120>
   15a76:	f247 0203 	movw	r2, #28675	; 0x7003
   15a7a:	2300      	movs	r3, #0
   15a7c:	2108      	movs	r1, #8
   15a7e:	9d05      	ldr	r5, [sp, #20]
   15a80:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   15a84:	60ea      	str	r2, [r5, #12]
   15a86:	f8c5 8010 	str.w	r8, [r5, #16]
   15a8a:	7229      	strb	r1, [r5, #8]
   15a8c:	726b      	strb	r3, [r5, #9]
   15a8e:	72ab      	strb	r3, [r5, #10]
   15a90:	72eb      	strb	r3, [r5, #11]
   15a92:	f04f 0c08 	mov.w	ip, #8
   15a96:	2300      	movs	r3, #0
   15a98:	2010      	movs	r0, #16
   15a9a:	2130      	movs	r1, #48	; 0x30
   15a9c:	68aa      	ldr	r2, [r5, #8]
   15a9e:	756b      	strb	r3, [r5, #21]
   15aa0:	4462      	add	r2, ip
   15aa2:	60aa      	str	r2, [r5, #8]
   15aa4:	75ab      	strb	r3, [r5, #22]
   15aa6:	75eb      	strb	r3, [r5, #23]
   15aa8:	76ab      	strb	r3, [r5, #26]
   15aaa:	76eb      	strb	r3, [r5, #27]
   15aac:	f885 c014 	strb.w	ip, [r5, #20]
   15ab0:	7628      	strb	r0, [r5, #24]
   15ab2:	7669      	strb	r1, [r5, #25]
   15ab4:	2204      	movs	r2, #4
   15ab6:	a903      	add	r1, sp, #12
   15ab8:	6828      	ldr	r0, [r5, #0]
   15aba:	f007 f8cc 	bl	1cc56 <memcpy>
   15abe:	f247 0103 	movw	r1, #28675	; 0x7003
   15ac2:	4628      	mov	r0, r5
   15ac4:	f7ff f80e 	bl	14ae4 <rpc_ip_client_request_send>
   15ac8:	4680      	mov	r8, r0
   15aca:	bb48      	cbnz	r0, 15b20 <ip_interface_setopt+0x130>
   15acc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   15ad0:	ab04      	add	r3, sp, #16
   15ad2:	4611      	mov	r1, r2
   15ad4:	4638      	mov	r0, r7
   15ad6:	f004 fda1 	bl	1a61c <interface_socket_wait>
   15ada:	4605      	mov	r5, r0
   15adc:	b398      	cbz	r0, 15b46 <ip_interface_setopt+0x156>
   15ade:	6026      	str	r6, [r4, #0]
   15ae0:	e000      	b.n	15ae4 <ip_interface_setopt+0xf4>
   15ae2:	2523      	movs	r5, #35	; 0x23
   15ae4:	4628      	mov	r0, r5
   15ae6:	f7fc fb77 	bl	121d8 <bsd_os_errno_set>
   15aea:	f04f 35ff 	mov.w	r5, #4294967295
   15aee:	4628      	mov	r0, r5
   15af0:	b006      	add	sp, #24
   15af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15af8:	4642      	mov	r2, r8
   15afa:	9300      	str	r3, [sp, #0]
   15afc:	4631      	mov	r1, r6
   15afe:	462b      	mov	r3, r5
   15b00:	4638      	mov	r0, r7
   15b02:	f004 fe33 	bl	1a76c <interface_socket_setopt>
   15b06:	4605      	mov	r5, r0
   15b08:	4628      	mov	r0, r5
   15b0a:	b006      	add	sp, #24
   15b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b10:	9d05      	ldr	r5, [sp, #20]
   15b12:	2d00      	cmp	r5, #0
   15b14:	d1bd      	bne.n	15a92 <ip_interface_setopt+0xa2>
   15b16:	6026      	str	r6, [r4, #0]
   15b18:	250c      	movs	r5, #12
   15b1a:	e7e3      	b.n	15ae4 <ip_interface_setopt+0xf4>
   15b1c:	2509      	movs	r5, #9
   15b1e:	e7e1      	b.n	15ae4 <ip_interface_setopt+0xf4>
   15b20:	6828      	ldr	r0, [r5, #0]
   15b22:	b108      	cbz	r0, 15b28 <ip_interface_setopt+0x138>
   15b24:	f7fe fffc 	bl	14b20 <rpc_ip_client_data_free>
   15b28:	4628      	mov	r0, r5
   15b2a:	f7fe fff1 	bl	14b10 <rpc_ip_client_message_free>
   15b2e:	2523      	movs	r5, #35	; 0x23
   15b30:	6026      	str	r6, [r4, #0]
   15b32:	6026      	str	r6, [r4, #0]
   15b34:	e7d6      	b.n	15ae4 <ip_interface_setopt+0xf4>
   15b36:	202a      	movs	r0, #42	; 0x2a
   15b38:	f7fc fb4e 	bl	121d8 <bsd_os_errno_set>
   15b3c:	f04f 35ff 	mov.w	r5, #4294967295
   15b40:	e7d5      	b.n	15aee <ip_interface_setopt+0xfe>
   15b42:	250e      	movs	r5, #14
   15b44:	e7ce      	b.n	15ae4 <ip_interface_setopt+0xf4>
   15b46:	4638      	mov	r0, r7
   15b48:	f004 fde8 	bl	1a71c <interface_socket_from_handle_get>
   15b4c:	b120      	cbz	r0, 15b58 <ip_interface_setopt+0x168>
   15b4e:	6845      	ldr	r5, [r0, #4]
   15b50:	b115      	cbz	r5, 15b58 <ip_interface_setopt+0x168>
   15b52:	f8c0 8004 	str.w	r8, [r0, #4]
   15b56:	e7c2      	b.n	15ade <ip_interface_setopt+0xee>
   15b58:	6026      	str	r6, [r4, #0]
   15b5a:	e7c8      	b.n	15aee <ip_interface_setopt+0xfe>
   15b5c:	2009      	movs	r0, #9
   15b5e:	f7fc fb3b 	bl	121d8 <bsd_os_errno_set>
   15b62:	f04f 35ff 	mov.w	r5, #4294967295
   15b66:	e7c2      	b.n	15aee <ip_interface_setopt+0xfe>

00015b68 <ip_interface_getopt>:
   15b68:	f004 be46 	b.w	1a7f8 <interface_socket_getopt>

00015b6c <ip_interface_getaddrinfo>:
   15b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b70:	f04f 0c00 	mov.w	ip, #0
   15b74:	2401      	movs	r4, #1
   15b76:	4e72      	ldr	r6, [pc, #456]	; (15d40 <ip_interface_getaddrinfo+0x1d4>)
   15b78:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 15d4c <ip_interface_getaddrinfo+0x1e0>
   15b7c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 15d50 <ip_interface_getaddrinfo+0x1e4>
   15b80:	b085      	sub	sp, #20
   15b82:	4607      	mov	r7, r0
   15b84:	4615      	mov	r5, r2
   15b86:	9301      	str	r3, [sp, #4]
   15b88:	f8a6 c000 	strh.w	ip, [r6]
   15b8c:	f8ca 4000 	str.w	r4, [sl]
   15b90:	f8c9 4000 	str.w	r4, [r9]
   15b94:	b171      	cbz	r1, 15bb4 <ip_interface_getaddrinfo+0x48>
   15b96:	4608      	mov	r0, r1
   15b98:	220a      	movs	r2, #10
   15b9a:	4661      	mov	r1, ip
   15b9c:	f006 ff72 	bl	1ca84 <strtol>
   15ba0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   15ba4:	1e42      	subs	r2, r0, #1
   15ba6:	429a      	cmp	r2, r3
   15ba8:	f200 8083 	bhi.w	15cb2 <ip_interface_getaddrinfo+0x146>
   15bac:	0203      	lsls	r3, r0, #8
   15bae:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   15bb2:	8030      	strh	r0, [r6, #0]
   15bb4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 15d54 <ip_interface_getaddrinfo+0x1e8>
   15bb8:	f8d8 3000 	ldr.w	r3, [r8]
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d174      	bne.n	15caa <ip_interface_getaddrinfo+0x13e>
   15bc0:	4a60      	ldr	r2, [pc, #384]	; (15d44 <ip_interface_getaddrinfo+0x1d8>)
   15bc2:	6013      	str	r3, [r2, #0]
   15bc4:	4a60      	ldr	r2, [pc, #384]	; (15d48 <ip_interface_getaddrinfo+0x1dc>)
   15bc6:	6013      	str	r3, [r2, #0]
   15bc8:	2f00      	cmp	r7, #0
   15bca:	d062      	beq.n	15c92 <ip_interface_getaddrinfo+0x126>
   15bcc:	4638      	mov	r0, r7
   15bce:	f007 f810 	bl	1cbf2 <strlen>
   15bd2:	4683      	mov	fp, r0
   15bd4:	b125      	cbz	r5, 15be0 <ip_interface_getaddrinfo+0x74>
   15bd6:	69ea      	ldr	r2, [r5, #28]
   15bd8:	b112      	cbz	r2, 15be0 <ip_interface_getaddrinfo+0x74>
   15bda:	6851      	ldr	r1, [r2, #4]
   15bdc:	2966      	cmp	r1, #102	; 0x66
   15bde:	d06c      	beq.n	15cba <ip_interface_getaddrinfo+0x14e>
   15be0:	f04f 32ff 	mov.w	r2, #4294967295
   15be4:	2100      	movs	r1, #0
   15be6:	ae04      	add	r6, sp, #16
   15be8:	f846 1d04 	str.w	r1, [r6, #-4]!
   15bec:	4630      	mov	r0, r6
   15bee:	4659      	mov	r1, fp
   15bf0:	9200      	str	r2, [sp, #0]
   15bf2:	f7fe ff63 	bl	14abc <rpc_ip_client_request_alloc>
   15bf6:	9a00      	ldr	r2, [sp, #0]
   15bf8:	2800      	cmp	r0, #0
   15bfa:	d14c      	bne.n	15c96 <ip_interface_getaddrinfo+0x12a>
   15bfc:	f247 010d 	movw	r1, #28685	; 0x700d
   15c00:	f04f 0c08 	mov.w	ip, #8
   15c04:	9c03      	ldr	r4, [sp, #12]
   15c06:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   15c0a:	60e1      	str	r1, [r4, #12]
   15c0c:	6122      	str	r2, [r4, #16]
   15c0e:	7260      	strb	r0, [r4, #9]
   15c10:	72a0      	strb	r0, [r4, #10]
   15c12:	72e0      	strb	r0, [r4, #11]
   15c14:	f884 c008 	strb.w	ip, [r4, #8]
   15c18:	2d00      	cmp	r5, #0
   15c1a:	d076      	beq.n	15d0a <ip_interface_getaddrinfo+0x19e>
   15c1c:	686a      	ldr	r2, [r5, #4]
   15c1e:	f022 0108 	bic.w	r1, r2, #8
   15c22:	2902      	cmp	r1, #2
   15c24:	d05c      	beq.n	15ce0 <ip_interface_getaddrinfo+0x174>
   15c26:	2a05      	cmp	r2, #5
   15c28:	d178      	bne.n	15d1c <ip_interface_getaddrinfo+0x1b0>
   15c2a:	68a9      	ldr	r1, [r5, #8]
   15c2c:	2902      	cmp	r1, #2
   15c2e:	f8c9 1000 	str.w	r1, [r9]
   15c32:	d061      	beq.n	15cf8 <ip_interface_getaddrinfo+0x18c>
   15c34:	61a2      	str	r2, [r4, #24]
   15c36:	68ea      	ldr	r2, [r5, #12]
   15c38:	6222      	str	r2, [r4, #32]
   15c3a:	68aa      	ldr	r2, [r5, #8]
   15c3c:	61e2      	str	r2, [r4, #28]
   15c3e:	682a      	ldr	r2, [r5, #0]
   15c40:	6162      	str	r2, [r4, #20]
   15c42:	68a2      	ldr	r2, [r4, #8]
   15c44:	3210      	adds	r2, #16
   15c46:	60a2      	str	r2, [r4, #8]
   15c48:	b12f      	cbz	r7, 15c56 <ip_interface_getaddrinfo+0xea>
   15c4a:	6820      	ldr	r0, [r4, #0]
   15c4c:	b118      	cbz	r0, 15c56 <ip_interface_getaddrinfo+0xea>
   15c4e:	465a      	mov	r2, fp
   15c50:	4639      	mov	r1, r7
   15c52:	f007 f800 	bl	1cc56 <memcpy>
   15c56:	2301      	movs	r3, #1
   15c58:	f247 010d 	movw	r1, #28685	; 0x700d
   15c5c:	4620      	mov	r0, r4
   15c5e:	f8c8 3000 	str.w	r3, [r8]
   15c62:	f7fe ff3f 	bl	14ae4 <rpc_ip_client_request_send>
   15c66:	2800      	cmp	r0, #0
   15c68:	d156      	bne.n	15d18 <ip_interface_getaddrinfo+0x1ac>
   15c6a:	f04f 33ff 	mov.w	r3, #4294967295
   15c6e:	9303      	str	r3, [sp, #12]
   15c70:	4631      	mov	r1, r6
   15c72:	4620      	mov	r0, r4
   15c74:	f7fc f9fa 	bl	1206c <bsd_os_timedwait>
   15c78:	f8d8 3000 	ldr.w	r3, [r8]
   15c7c:	2b01      	cmp	r3, #1
   15c7e:	d0f7      	beq.n	15c70 <ip_interface_getaddrinfo+0x104>
   15c80:	4b31      	ldr	r3, [pc, #196]	; (15d48 <ip_interface_getaddrinfo+0x1dc>)
   15c82:	6818      	ldr	r0, [r3, #0]
   15c84:	2800      	cmp	r0, #0
   15c86:	d13b      	bne.n	15d00 <ip_interface_getaddrinfo+0x194>
   15c88:	4b2e      	ldr	r3, [pc, #184]	; (15d44 <ip_interface_getaddrinfo+0x1d8>)
   15c8a:	9a01      	ldr	r2, [sp, #4]
   15c8c:	681b      	ldr	r3, [r3, #0]
   15c8e:	6013      	str	r3, [r2, #0]
   15c90:	e00c      	b.n	15cac <ip_interface_getaddrinfo+0x140>
   15c92:	46bb      	mov	fp, r7
   15c94:	e79e      	b.n	15bd4 <ip_interface_getaddrinfo+0x68>
   15c96:	9c03      	ldr	r4, [sp, #12]
   15c98:	2c00      	cmp	r4, #0
   15c9a:	d1bd      	bne.n	15c18 <ip_interface_getaddrinfo+0xac>
   15c9c:	200c      	movs	r0, #12
   15c9e:	2300      	movs	r3, #0
   15ca0:	f8c8 3000 	str.w	r3, [r8]
   15ca4:	b005      	add	sp, #20
   15ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15caa:	2073      	movs	r0, #115	; 0x73
   15cac:	b005      	add	sp, #20
   15cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb2:	2016      	movs	r0, #22
   15cb4:	b005      	add	sp, #20
   15cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cba:	6891      	ldr	r1, [r2, #8]
   15cbc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   15cc0:	d18e      	bne.n	15be0 <ip_interface_getaddrinfo+0x74>
   15cc2:	f240 2102 	movw	r1, #514	; 0x202
   15cc6:	68d0      	ldr	r0, [r2, #12]
   15cc8:	4288      	cmp	r0, r1
   15cca:	d189      	bne.n	15be0 <ip_interface_getaddrinfo+0x74>
   15ccc:	6991      	ldr	r1, [r2, #24]
   15cce:	2900      	cmp	r1, #0
   15cd0:	d086      	beq.n	15be0 <ip_interface_getaddrinfo+0x74>
   15cd2:	6868      	ldr	r0, [r5, #4]
   15cd4:	f002 fa8a 	bl	181ec <pdn_interface_pdn_id_get>
   15cd8:	1c43      	adds	r3, r0, #1
   15cda:	d081      	beq.n	15be0 <ip_interface_getaddrinfo+0x74>
   15cdc:	4602      	mov	r2, r0
   15cde:	e781      	b.n	15be4 <ip_interface_getaddrinfo+0x78>
   15ce0:	68a9      	ldr	r1, [r5, #8]
   15ce2:	2902      	cmp	r1, #2
   15ce4:	f8c9 1000 	str.w	r1, [r9]
   15ce8:	d006      	beq.n	15cf8 <ip_interface_getaddrinfo+0x18c>
   15cea:	2a05      	cmp	r2, #5
   15cec:	d0a2      	beq.n	15c34 <ip_interface_getaddrinfo+0xc8>
   15cee:	2a0a      	cmp	r2, #10
   15cf0:	bf14      	ite	ne
   15cf2:	2201      	movne	r2, #1
   15cf4:	2202      	moveq	r2, #2
   15cf6:	e79d      	b.n	15c34 <ip_interface_getaddrinfo+0xc8>
   15cf8:	2102      	movs	r1, #2
   15cfa:	f8ca 1000 	str.w	r1, [sl]
   15cfe:	e7f4      	b.n	15cea <ip_interface_getaddrinfo+0x17e>
   15d00:	4b11      	ldr	r3, [pc, #68]	; (15d48 <ip_interface_getaddrinfo+0x1dc>)
   15d02:	6818      	ldr	r0, [r3, #0]
   15d04:	2800      	cmp	r0, #0
   15d06:	d0d1      	beq.n	15cac <ip_interface_getaddrinfo+0x140>
   15d08:	e7c9      	b.n	15c9e <ip_interface_getaddrinfo+0x132>
   15d0a:	4629      	mov	r1, r5
   15d0c:	2210      	movs	r2, #16
   15d0e:	f104 0014 	add.w	r0, r4, #20
   15d12:	f006 ffcb 	bl	1ccac <memset>
   15d16:	e794      	b.n	15c42 <ip_interface_getaddrinfo+0xd6>
   15d18:	2023      	movs	r0, #35	; 0x23
   15d1a:	e7c0      	b.n	15c9e <ip_interface_getaddrinfo+0x132>
   15d1c:	202f      	movs	r0, #47	; 0x2f
   15d1e:	f7fc fa5b 	bl	121d8 <bsd_os_errno_set>
   15d22:	68a2      	ldr	r2, [r4, #8]
   15d24:	3210      	adds	r2, #16
   15d26:	60a2      	str	r2, [r4, #8]
   15d28:	b917      	cbnz	r7, 15d30 <ip_interface_getaddrinfo+0x1c4>
   15d2a:	f04f 30ff 	mov.w	r0, #4294967295
   15d2e:	e7b6      	b.n	15c9e <ip_interface_getaddrinfo+0x132>
   15d30:	6820      	ldr	r0, [r4, #0]
   15d32:	2800      	cmp	r0, #0
   15d34:	d0f9      	beq.n	15d2a <ip_interface_getaddrinfo+0x1be>
   15d36:	465a      	mov	r2, fp
   15d38:	4639      	mov	r1, r7
   15d3a:	f006 ff8c 	bl	1cc56 <memcpy>
   15d3e:	e7f4      	b.n	15d2a <ip_interface_getaddrinfo+0x1be>
   15d40:	20021c42 	.word	0x20021c42
   15d44:	20021110 	.word	0x20021110
   15d48:	20021108 	.word	0x20021108
   15d4c:	20021100 	.word	0x20021100
   15d50:	20021104 	.word	0x20021104
   15d54:	2002110c 	.word	0x2002110c

00015d58 <ip_interface_freeaddrinfo>:
   15d58:	b538      	push	{r3, r4, r5, lr}
   15d5a:	4d0b      	ldr	r5, [pc, #44]	; (15d88 <ip_interface_freeaddrinfo+0x30>)
   15d5c:	682b      	ldr	r3, [r5, #0]
   15d5e:	2b02      	cmp	r3, #2
   15d60:	d000      	beq.n	15d64 <ip_interface_freeaddrinfo+0xc>
   15d62:	bd38      	pop	{r3, r4, r5, pc}
   15d64:	b150      	cbz	r0, 15d7c <ip_interface_freeaddrinfo+0x24>
   15d66:	4604      	mov	r4, r0
   15d68:	6940      	ldr	r0, [r0, #20]
   15d6a:	f004 f87d 	bl	19e68 <nrf_free>
   15d6e:	69a0      	ldr	r0, [r4, #24]
   15d70:	b108      	cbz	r0, 15d76 <ip_interface_freeaddrinfo+0x1e>
   15d72:	f004 f879 	bl	19e68 <nrf_free>
   15d76:	4620      	mov	r0, r4
   15d78:	f004 f876 	bl	19e68 <nrf_free>
   15d7c:	2300      	movs	r3, #0
   15d7e:	4a03      	ldr	r2, [pc, #12]	; (15d8c <ip_interface_freeaddrinfo+0x34>)
   15d80:	602b      	str	r3, [r5, #0]
   15d82:	6013      	str	r3, [r2, #0]
   15d84:	bd38      	pop	{r3, r4, r5, pc}
   15d86:	bf00      	nop
   15d88:	2002110c 	.word	0x2002110c
   15d8c:	20021108 	.word	0x20021108

00015d90 <rpc_ip_event_handler>:
   15d90:	f248 030d 	movw	r3, #32781	; 0x800d
   15d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d98:	4299      	cmp	r1, r3
   15d9a:	b089      	sub	sp, #36	; 0x24
   15d9c:	4604      	mov	r4, r0
   15d9e:	d062      	beq.n	15e66 <rpc_ip_event_handler+0xd6>
   15da0:	f248 030f 	movw	r3, #32783	; 0x800f
   15da4:	4299      	cmp	r1, r3
   15da6:	460d      	mov	r5, r1
   15da8:	d04b      	beq.n	15e42 <rpc_ip_event_handler+0xb2>
   15daa:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   15dae:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   15db2:	68c0      	ldr	r0, [r0, #12]
   15db4:	d07b      	beq.n	15eae <rpc_ip_event_handler+0x11e>
   15db6:	0c07      	lsrs	r7, r0, #16
   15db8:	4638      	mov	r0, r7
   15dba:	f004 fcaf 	bl	1a71c <interface_socket_from_handle_get>
   15dbe:	4606      	mov	r6, r0
   15dc0:	2800      	cmp	r0, #0
   15dc2:	d05f      	beq.n	15e84 <rpc_ip_event_handler+0xf4>
   15dc4:	4601      	mov	r1, r0
   15dc6:	462b      	mov	r3, r5
   15dc8:	4622      	mov	r2, r4
   15dca:	4638      	mov	r0, r7
   15dcc:	f7fe fde4 	bl	14998 <tls_rpc_ip_event_handler>
   15dd0:	2800      	cmp	r0, #0
   15dd2:	d053      	beq.n	15e7c <rpc_ip_event_handler+0xec>
   15dd4:	f248 0307 	movw	r3, #32775	; 0x8007
   15dd8:	429d      	cmp	r5, r3
   15dda:	d97d      	bls.n	15ed8 <rpc_ip_event_handler+0x148>
   15ddc:	f248 030c 	movw	r3, #32780	; 0x800c
   15de0:	429d      	cmp	r5, r3
   15de2:	d068      	beq.n	15eb6 <rpc_ip_event_handler+0x126>
   15de4:	f240 8137 	bls.w	16056 <rpc_ip_event_handler+0x2c6>
   15de8:	f249 0302 	movw	r3, #36866	; 0x9002
   15dec:	429d      	cmp	r5, r3
   15dee:	f000 819f 	beq.w	16130 <rpc_ip_event_handler+0x3a0>
   15df2:	f249 0303 	movw	r3, #36867	; 0x9003
   15df6:	429d      	cmp	r5, r3
   15df8:	f000 81b2 	beq.w	16160 <rpc_ip_event_handler+0x3d0>
   15dfc:	f249 0301 	movw	r3, #36865	; 0x9001
   15e00:	429d      	cmp	r5, r3
   15e02:	d13f      	bne.n	15e84 <rpc_ip_event_handler+0xf4>
   15e04:	6835      	ldr	r5, [r6, #0]
   15e06:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   15e0a:	f000 81d3 	beq.w	161b4 <rpc_ip_event_handler+0x424>
   15e0e:	68a3      	ldr	r3, [r4, #8]
   15e10:	2b04      	cmp	r3, #4
   15e12:	f200 8207 	bhi.w	16224 <rpc_ip_event_handler+0x494>
   15e16:	2500      	movs	r5, #0
   15e18:	462f      	mov	r7, r5
   15e1a:	6821      	ldr	r1, [r4, #0]
   15e1c:	6862      	ldr	r2, [r4, #4]
   15e1e:	e9cd 7506 	strd	r7, r5, [sp, #24]
   15e22:	e9cd 1204 	strd	r1, r2, [sp, #16]
   15e26:	69f0      	ldr	r0, [r6, #28]
   15e28:	a904      	add	r1, sp, #16
   15e2a:	6803      	ldr	r3, [r0, #0]
   15e2c:	685b      	ldr	r3, [r3, #4]
   15e2e:	4798      	blx	r3
   15e30:	3001      	adds	r0, #1
   15e32:	f000 81de 	beq.w	161f2 <rpc_ip_event_handler+0x462>
   15e36:	6833      	ldr	r3, [r6, #0]
   15e38:	2000      	movs	r0, #0
   15e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15e3e:	6033      	str	r3, [r6, #0]
   15e40:	e00e      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   15e42:	6943      	ldr	r3, [r0, #20]
   15e44:	2001      	movs	r0, #1
   15e46:	2b10      	cmp	r3, #16
   15e48:	49bc      	ldr	r1, [pc, #752]	; (1613c <rpc_ip_event_handler+0x3ac>)
   15e4a:	bf88      	it	hi
   15e4c:	222d      	movhi	r2, #45	; 0x2d
   15e4e:	7008      	strb	r0, [r1, #0]
   15e50:	f04f 0000 	mov.w	r0, #0
   15e54:	bf9c      	itt	ls
   15e56:	4aba      	ldrls	r2, [pc, #744]	; (16140 <rpc_ip_event_handler+0x3b0>)
   15e58:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   15e5c:	4bb9      	ldr	r3, [pc, #740]	; (16144 <rpc_ip_event_handler+0x3b4>)
   15e5e:	601a      	str	r2, [r3, #0]
   15e60:	b009      	add	sp, #36	; 0x24
   15e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e66:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 16158 <rpc_ip_event_handler+0x3c8>
   15e6a:	6807      	ldr	r7, [r0, #0]
   15e6c:	f8da 2000 	ldr.w	r2, [sl]
   15e70:	2a01      	cmp	r2, #1
   15e72:	d00b      	beq.n	15e8c <rpc_ip_event_handler+0xfc>
   15e74:	b117      	cbz	r7, 15e7c <rpc_ip_event_handler+0xec>
   15e76:	4638      	mov	r0, r7
   15e78:	f7fe fe52 	bl	14b20 <rpc_ip_client_data_free>
   15e7c:	2000      	movs	r0, #0
   15e7e:	b009      	add	sp, #36	; 0x24
   15e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e84:	6820      	ldr	r0, [r4, #0]
   15e86:	2800      	cmp	r0, #0
   15e88:	d1f6      	bne.n	15e78 <rpc_ip_event_handler+0xe8>
   15e8a:	e7f7      	b.n	15e7c <rpc_ip_event_handler+0xec>
   15e8c:	6942      	ldr	r2, [r0, #20]
   15e8e:	2a00      	cmp	r2, #0
   15e90:	d046      	beq.n	15f20 <rpc_ip_event_handler+0x190>
   15e92:	2a10      	cmp	r2, #16
   15e94:	bf8e      	itee	hi
   15e96:	222d      	movhi	r2, #45	; 0x2d
   15e98:	49a9      	ldrls	r1, [pc, #676]	; (16140 <rpc_ip_event_handler+0x3b0>)
   15e9a:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   15e9e:	49aa      	ldr	r1, [pc, #680]	; (16148 <rpc_ip_event_handler+0x3b8>)
   15ea0:	600a      	str	r2, [r1, #0]
   15ea2:	2202      	movs	r2, #2
   15ea4:	f8ca 2000 	str.w	r2, [sl]
   15ea8:	2f00      	cmp	r7, #0
   15eaa:	d1e4      	bne.n	15e76 <rpc_ip_event_handler+0xe6>
   15eac:	e7e6      	b.n	15e7c <rpc_ip_event_handler+0xec>
   15eae:	f004 fbe3 	bl	1a678 <interface_from_internal_id_search>
   15eb2:	4607      	mov	r7, r0
   15eb4:	e780      	b.n	15db8 <rpc_ip_event_handler+0x28>
   15eb6:	6833      	ldr	r3, [r6, #0]
   15eb8:	b29b      	uxth	r3, r3
   15eba:	2b08      	cmp	r3, #8
   15ebc:	d1de      	bne.n	15e7c <rpc_ip_event_handler+0xec>
   15ebe:	6963      	ldr	r3, [r4, #20]
   15ec0:	2b00      	cmp	r3, #0
   15ec2:	f000 8198 	beq.w	161f6 <rpc_ip_event_handler+0x466>
   15ec6:	2b10      	cmp	r3, #16
   15ec8:	f200 8169 	bhi.w	1619e <rpc_ip_event_handler+0x40e>
   15ecc:	4a9c      	ldr	r2, [pc, #624]	; (16140 <rpc_ip_event_handler+0x3b0>)
   15ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ed2:	6073      	str	r3, [r6, #4]
   15ed4:	2000      	movs	r0, #0
   15ed6:	e7c3      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   15ed8:	f248 0306 	movw	r3, #32774	; 0x8006
   15edc:	429d      	cmp	r5, r3
   15ede:	f080 80fc 	bcs.w	160da <rpc_ip_event_handler+0x34a>
   15ee2:	f248 0302 	movw	r3, #32770	; 0x8002
   15ee6:	429d      	cmp	r5, r3
   15ee8:	f000 80df 	beq.w	160aa <rpc_ip_event_handler+0x31a>
   15eec:	f240 80cc 	bls.w	16088 <rpc_ip_event_handler+0x2f8>
   15ef0:	f248 0303 	movw	r3, #32771	; 0x8003
   15ef4:	429d      	cmp	r5, r3
   15ef6:	f000 810f 	beq.w	16118 <rpc_ip_event_handler+0x388>
   15efa:	f248 0305 	movw	r3, #32773	; 0x8005
   15efe:	429d      	cmp	r5, r3
   15f00:	d1c0      	bne.n	15e84 <rpc_ip_event_handler+0xf4>
   15f02:	6833      	ldr	r3, [r6, #0]
   15f04:	b29b      	uxth	r3, r3
   15f06:	2b03      	cmp	r3, #3
   15f08:	d1b8      	bne.n	15e7c <rpc_ip_event_handler+0xec>
   15f0a:	6963      	ldr	r3, [r4, #20]
   15f0c:	2b00      	cmp	r3, #0
   15f0e:	d1da      	bne.n	15ec6 <rpc_ip_event_handler+0x136>
   15f10:	6833      	ldr	r3, [r6, #0]
   15f12:	2000      	movs	r0, #0
   15f14:	0c1b      	lsrs	r3, r3, #16
   15f16:	041b      	lsls	r3, r3, #16
   15f18:	f043 0304 	orr.w	r3, r3, #4
   15f1c:	6033      	str	r3, [r6, #0]
   15f1e:	e79f      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   15f20:	6985      	ldr	r5, [r0, #24]
   15f22:	016b      	lsls	r3, r5, #5
   15f24:	4618      	mov	r0, r3
   15f26:	9303      	str	r3, [sp, #12]
   15f28:	f003 ff94 	bl	19e54 <nrf_malloc>
   15f2c:	9002      	str	r0, [sp, #8]
   15f2e:	2800      	cmp	r0, #0
   15f30:	f000 808a 	beq.w	16048 <rpc_ip_event_handler+0x2b8>
   15f34:	00ee      	lsls	r6, r5, #3
   15f36:	1970      	adds	r0, r6, r5
   15f38:	0080      	lsls	r0, r0, #2
   15f3a:	f003 ff8b 	bl	19e54 <nrf_malloc>
   15f3e:	2800      	cmp	r0, #0
   15f40:	f000 8084 	beq.w	1604c <rpc_ip_event_handler+0x2bc>
   15f44:	2d00      	cmp	r5, #0
   15f46:	f000 8084 	beq.w	16052 <rpc_ip_event_handler+0x2c2>
   15f4a:	2204      	movs	r2, #4
   15f4c:	3610      	adds	r6, #16
   15f4e:	1983      	adds	r3, r0, r6
   15f50:	9301      	str	r3, [sp, #4]
   15f52:	9b02      	ldr	r3, [sp, #8]
   15f54:	f8df b204 	ldr.w	fp, [pc, #516]	; 1615c <rpc_ip_event_handler+0x3cc>
   15f58:	f100 0810 	add.w	r8, r0, #16
   15f5c:	f103 0520 	add.w	r5, r3, #32
   15f60:	58bb      	ldr	r3, [r7, r2]
   15f62:	18b9      	adds	r1, r7, r2
   15f64:	f845 3c20 	str.w	r3, [r5, #-32]
   15f68:	684b      	ldr	r3, [r1, #4]
   15f6a:	f8db 0000 	ldr.w	r0, [fp]
   15f6e:	2b02      	cmp	r3, #2
   15f70:	bf14      	ite	ne
   15f72:	2602      	movne	r6, #2
   15f74:	260a      	moveq	r6, #10
   15f76:	4b75      	ldr	r3, [pc, #468]	; (1614c <rpc_ip_event_handler+0x3bc>)
   15f78:	e945 6007 	strd	r6, r0, [r5, #-28]
   15f7c:	681b      	ldr	r3, [r3, #0]
   15f7e:	f102 0614 	add.w	r6, r2, #20
   15f82:	f845 3c14 	str.w	r3, [r5, #-20]
   15f86:	8a08      	ldrh	r0, [r1, #16]
   15f88:	f1a8 0310 	sub.w	r3, r8, #16
   15f8c:	f845 0c10 	str.w	r0, [r5, #-16]
   15f90:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   15f94:	f845 3c0c 	str.w	r3, [r5, #-12]
   15f98:	4b6d      	ldr	r3, [pc, #436]	; (16150 <rpc_ip_event_handler+0x3c0>)
   15f9a:	2804      	cmp	r0, #4
   15f9c:	eb07 0106 	add.w	r1, r7, r6
   15fa0:	881b      	ldrh	r3, [r3, #0]
   15fa2:	d042      	beq.n	1602a <rpc_ip_event_handler+0x29a>
   15fa4:	220a      	movs	r2, #10
   15fa6:	f848 2c0c 	str.w	r2, [r8, #-12]
   15faa:	f04f 0224 	mov.w	r2, #36	; 0x24
   15fae:	f828 3c08 	strh.w	r3, [r8, #-8]
   15fb2:	f808 2c10 	strb.w	r2, [r8, #-16]
   15fb6:	f855 2c10 	ldr.w	r2, [r5, #-16]
   15fba:	4640      	mov	r0, r8
   15fbc:	f006 fe4b 	bl	1cc56 <memcpy>
   15fc0:	f855 3c10 	ldr.w	r3, [r5, #-16]
   15fc4:	f109 0001 	add.w	r0, r9, #1
   15fc8:	441e      	add	r6, r3
   15fca:	f003 ff43 	bl	19e54 <nrf_malloc>
   15fce:	19b9      	adds	r1, r7, r6
   15fd0:	eb09 0206 	add.w	r2, r9, r6
   15fd4:	f845 0c08 	str.w	r0, [r5, #-8]
   15fd8:	b1e8      	cbz	r0, 16016 <rpc_ip_event_handler+0x286>
   15fda:	464a      	mov	r2, r9
   15fdc:	f006 fe3b 	bl	1cc56 <memcpy>
   15fe0:	2100      	movs	r1, #0
   15fe2:	f855 3c08 	ldr.w	r3, [r5, #-8]
   15fe6:	f108 0808 	add.w	r8, r8, #8
   15fea:	f803 1009 	strb.w	r1, [r3, r9]
   15fee:	9b01      	ldr	r3, [sp, #4]
   15ff0:	f845 5c04 	str.w	r5, [r5, #-4]
   15ff4:	4598      	cmp	r8, r3
   15ff6:	eb09 0206 	add.w	r2, r9, r6
   15ffa:	f105 0520 	add.w	r5, r5, #32
   15ffe:	d1af      	bne.n	15f60 <rpc_ip_event_handler+0x1d0>
   16000:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   16004:	2100      	movs	r1, #0
   16006:	4403      	add	r3, r0
   16008:	f843 1c04 	str.w	r1, [r3, #-4]
   1600c:	4603      	mov	r3, r0
   1600e:	4a51      	ldr	r2, [pc, #324]	; (16154 <rpc_ip_event_handler+0x3c4>)
   16010:	6827      	ldr	r7, [r4, #0]
   16012:	6013      	str	r3, [r2, #0]
   16014:	e745      	b.n	15ea2 <rpc_ip_event_handler+0x112>
   16016:	9b01      	ldr	r3, [sp, #4]
   16018:	f108 0808 	add.w	r8, r8, #8
   1601c:	4543      	cmp	r3, r8
   1601e:	f845 5c04 	str.w	r5, [r5, #-4]
   16022:	f105 0520 	add.w	r5, r5, #32
   16026:	d19b      	bne.n	15f60 <rpc_ip_event_handler+0x1d0>
   16028:	e7ea      	b.n	16000 <rpc_ip_event_handler+0x270>
   1602a:	2210      	movs	r2, #16
   1602c:	2002      	movs	r0, #2
   1602e:	f828 3c08 	strh.w	r3, [r8, #-8]
   16032:	f848 0c0c 	str.w	r0, [r8, #-12]
   16036:	f808 2c10 	strb.w	r2, [r8, #-16]
   1603a:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1603e:	f1a8 0004 	sub.w	r0, r8, #4
   16042:	f006 fe08 	bl	1cc56 <memcpy>
   16046:	e7bb      	b.n	15fc0 <rpc_ip_event_handler+0x230>
   16048:	f003 ff0e 	bl	19e68 <nrf_free>
   1604c:	210c      	movs	r1, #12
   1604e:	4a3e      	ldr	r2, [pc, #248]	; (16148 <rpc_ip_event_handler+0x3b8>)
   16050:	6011      	str	r1, [r2, #0]
   16052:	9b02      	ldr	r3, [sp, #8]
   16054:	e7db      	b.n	1600e <rpc_ip_event_handler+0x27e>
   16056:	f248 0308 	movw	r3, #32776	; 0x8008
   1605a:	429d      	cmp	r5, r3
   1605c:	d04d      	beq.n	160fa <rpc_ip_event_handler+0x36a>
   1605e:	f248 0309 	movw	r3, #32777	; 0x8009
   16062:	429d      	cmp	r5, r3
   16064:	f47f af0e 	bne.w	15e84 <rpc_ip_event_handler+0xf4>
   16068:	6833      	ldr	r3, [r6, #0]
   1606a:	b29b      	uxth	r3, r3
   1606c:	2b0d      	cmp	r3, #13
   1606e:	f47f af05 	bne.w	15e7c <rpc_ip_event_handler+0xec>
   16072:	6960      	ldr	r0, [r4, #20]
   16074:	2800      	cmp	r0, #0
   16076:	f000 80c9 	beq.w	1620c <rpc_ip_event_handler+0x47c>
   1607a:	2810      	cmp	r0, #16
   1607c:	f200 808f 	bhi.w	1619e <rpc_ip_event_handler+0x40e>
   16080:	4b2f      	ldr	r3, [pc, #188]	; (16140 <rpc_ip_event_handler+0x3b0>)
   16082:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   16086:	e724      	b.n	15ed2 <rpc_ip_event_handler+0x142>
   16088:	f248 0301 	movw	r3, #32769	; 0x8001
   1608c:	429d      	cmp	r5, r3
   1608e:	f47f aef9 	bne.w	15e84 <rpc_ip_event_handler+0xf4>
   16092:	6833      	ldr	r3, [r6, #0]
   16094:	2b01      	cmp	r3, #1
   16096:	f47f aef1 	bne.w	15e7c <rpc_ip_event_handler+0xec>
   1609a:	6960      	ldr	r0, [r4, #20]
   1609c:	2800      	cmp	r0, #0
   1609e:	d1ec      	bne.n	1607a <rpc_ip_event_handler+0x2ea>
   160a0:	2302      	movs	r3, #2
   160a2:	6033      	str	r3, [r6, #0]
   160a4:	69a3      	ldr	r3, [r4, #24]
   160a6:	61b3      	str	r3, [r6, #24]
   160a8:	e6da      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   160aa:	6833      	ldr	r3, [r6, #0]
   160ac:	0099      	lsls	r1, r3, #2
   160ae:	f57f aee5 	bpl.w	15e7c <rpc_ip_event_handler+0xec>
   160b2:	6833      	ldr	r3, [r6, #0]
   160b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   160b8:	6033      	str	r3, [r6, #0]
   160ba:	6960      	ldr	r0, [r4, #20]
   160bc:	2800      	cmp	r0, #0
   160be:	d07e      	beq.n	161be <rpc_ip_event_handler+0x42e>
   160c0:	2810      	cmp	r0, #16
   160c2:	f200 8094 	bhi.w	161ee <rpc_ip_event_handler+0x45e>
   160c6:	4b1e      	ldr	r3, [pc, #120]	; (16140 <rpc_ip_event_handler+0x3b0>)
   160c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   160cc:	6073      	str	r3, [r6, #4]
   160ce:	6833      	ldr	r3, [r6, #0]
   160d0:	2000      	movs	r0, #0
   160d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   160d6:	6033      	str	r3, [r6, #0]
   160d8:	e6c2      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   160da:	6833      	ldr	r3, [r6, #0]
   160dc:	029a      	lsls	r2, r3, #10
   160de:	f57f aecd 	bpl.w	15e7c <rpc_ip_event_handler+0xec>
   160e2:	6963      	ldr	r3, [r4, #20]
   160e4:	2b00      	cmp	r3, #0
   160e6:	d079      	beq.n	161dc <rpc_ip_event_handler+0x44c>
   160e8:	2b6b      	cmp	r3, #107	; 0x6b
   160ea:	f000 8096 	beq.w	1621a <rpc_ip_event_handler+0x48a>
   160ee:	2b10      	cmp	r3, #16
   160f0:	d87d      	bhi.n	161ee <rpc_ip_event_handler+0x45e>
   160f2:	4a13      	ldr	r2, [pc, #76]	; (16140 <rpc_ip_event_handler+0x3b0>)
   160f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160f8:	e7e8      	b.n	160cc <rpc_ip_event_handler+0x33c>
   160fa:	6833      	ldr	r3, [r6, #0]
   160fc:	b29b      	uxth	r3, r3
   160fe:	2b06      	cmp	r3, #6
   16100:	f47f aebc 	bne.w	15e7c <rpc_ip_event_handler+0xec>
   16104:	6960      	ldr	r0, [r4, #20]
   16106:	2800      	cmp	r0, #0
   16108:	d1b7      	bne.n	1607a <rpc_ip_event_handler+0x2ea>
   1610a:	6833      	ldr	r3, [r6, #0]
   1610c:	0c1b      	lsrs	r3, r3, #16
   1610e:	041b      	lsls	r3, r3, #16
   16110:	f043 0307 	orr.w	r3, r3, #7
   16114:	6033      	str	r3, [r6, #0]
   16116:	e6a3      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   16118:	6833      	ldr	r3, [r6, #0]
   1611a:	025b      	lsls	r3, r3, #9
   1611c:	f57f aeae 	bpl.w	15e7c <rpc_ip_event_handler+0xec>
   16120:	6960      	ldr	r0, [r4, #20]
   16122:	2800      	cmp	r0, #0
   16124:	d1a9      	bne.n	1607a <rpc_ip_event_handler+0x2ea>
   16126:	6833      	ldr	r3, [r6, #0]
   16128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1612c:	6033      	str	r3, [r6, #0]
   1612e:	e697      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   16130:	6833      	ldr	r3, [r6, #0]
   16132:	b29b      	uxth	r3, r3
   16134:	2b07      	cmp	r3, #7
   16136:	f47f aea1 	bne.w	15e7c <rpc_ip_event_handler+0xec>
   1613a:	e67c      	b.n	15e36 <rpc_ip_event_handler+0xa6>
   1613c:	20021d73 	.word	0x20021d73
   16140:	00020e08 	.word	0x00020e08
   16144:	20021138 	.word	0x20021138
   16148:	20021108 	.word	0x20021108
   1614c:	20021100 	.word	0x20021100
   16150:	20021c42 	.word	0x20021c42
   16154:	20021110 	.word	0x20021110
   16158:	2002110c 	.word	0x2002110c
   1615c:	20021104 	.word	0x20021104
   16160:	6833      	ldr	r3, [r6, #0]
   16162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   16166:	6033      	str	r3, [r6, #0]
   16168:	6833      	ldr	r3, [r6, #0]
   1616a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1616e:	6033      	str	r3, [r6, #0]
   16170:	6833      	ldr	r3, [r6, #0]
   16172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16176:	6033      	str	r3, [r6, #0]
   16178:	6833      	ldr	r3, [r6, #0]
   1617a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1617e:	6033      	str	r3, [r6, #0]
   16180:	6923      	ldr	r3, [r4, #16]
   16182:	2b6c      	cmp	r3, #108	; 0x6c
   16184:	d00d      	beq.n	161a2 <rpc_ip_event_handler+0x412>
   16186:	2b10      	cmp	r3, #16
   16188:	bf8c      	ite	hi
   1618a:	232d      	movhi	r3, #45	; 0x2d
   1618c:	4a41      	ldrls	r2, [pc, #260]	; (16294 <rpc_ip_event_handler+0x504>)
   1618e:	f04f 0000 	mov.w	r0, #0
   16192:	bf98      	it	ls
   16194:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   16198:	6073      	str	r3, [r6, #4]
   1619a:	60b3      	str	r3, [r6, #8]
   1619c:	e660      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   1619e:	232d      	movs	r3, #45	; 0x2d
   161a0:	e697      	b.n	15ed2 <rpc_ip_event_handler+0x142>
   161a2:	2239      	movs	r2, #57	; 0x39
   161a4:	6833      	ldr	r3, [r6, #0]
   161a6:	2000      	movs	r0, #0
   161a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   161ac:	6033      	str	r3, [r6, #0]
   161ae:	6072      	str	r2, [r6, #4]
   161b0:	60b2      	str	r2, [r6, #8]
   161b2:	e655      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   161b4:	6820      	ldr	r0, [r4, #0]
   161b6:	f7fe fcb3 	bl	14b20 <rpc_ip_client_data_free>
   161ba:	4628      	mov	r0, r5
   161bc:	e650      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   161be:	6833      	ldr	r3, [r6, #0]
   161c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   161c4:	6033      	str	r3, [r6, #0]
   161c6:	6833      	ldr	r3, [r6, #0]
   161c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   161cc:	6033      	str	r3, [r6, #0]
   161ce:	6833      	ldr	r3, [r6, #0]
   161d0:	0c1b      	lsrs	r3, r3, #16
   161d2:	041b      	lsls	r3, r3, #16
   161d4:	f043 0305 	orr.w	r3, r3, #5
   161d8:	6033      	str	r3, [r6, #0]
   161da:	e641      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   161dc:	6833      	ldr	r3, [r6, #0]
   161de:	4a2e      	ldr	r2, [pc, #184]	; (16298 <rpc_ip_event_handler+0x508>)
   161e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   161e4:	6033      	str	r3, [r6, #0]
   161e6:	2001      	movs	r0, #1
   161e8:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
   161ec:	e638      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   161ee:	232d      	movs	r3, #45	; 0x2d
   161f0:	e76c      	b.n	160cc <rpc_ip_event_handler+0x33c>
   161f2:	2002      	movs	r0, #2
   161f4:	e634      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   161f6:	4b28      	ldr	r3, [pc, #160]	; (16298 <rpc_ip_event_handler+0x508>)
   161f8:	2001      	movs	r0, #1
   161fa:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   161fe:	6833      	ldr	r3, [r6, #0]
   16200:	0c1b      	lsrs	r3, r3, #16
   16202:	041b      	lsls	r3, r3, #16
   16204:	f043 0309 	orr.w	r3, r3, #9
   16208:	6033      	str	r3, [r6, #0]
   1620a:	e629      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   1620c:	6833      	ldr	r3, [r6, #0]
   1620e:	0c1b      	lsrs	r3, r3, #16
   16210:	041b      	lsls	r3, r3, #16
   16212:	f043 030e 	orr.w	r3, r3, #14
   16216:	6033      	str	r3, [r6, #0]
   16218:	e622      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   1621a:	6933      	ldr	r3, [r6, #16]
   1621c:	2b01      	cmp	r3, #1
   1621e:	d005      	beq.n	1622c <rpc_ip_event_handler+0x49c>
   16220:	230c      	movs	r3, #12
   16222:	e753      	b.n	160cc <rpc_ip_event_handler+0x33c>
   16224:	8a65      	ldrh	r5, [r4, #18]
   16226:	b94d      	cbnz	r5, 1623c <rpc_ip_event_handler+0x4ac>
   16228:	462f      	mov	r7, r5
   1622a:	e5f6      	b.n	15e1a <rpc_ip_event_handler+0x8a>
   1622c:	220c      	movs	r2, #12
   1622e:	6833      	ldr	r3, [r6, #0]
   16230:	2000      	movs	r0, #0
   16232:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   16236:	6033      	str	r3, [r6, #0]
   16238:	6072      	str	r2, [r6, #4]
   1623a:	e611      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   1623c:	2024      	movs	r0, #36	; 0x24
   1623e:	f003 fe09 	bl	19e54 <nrf_malloc>
   16242:	4607      	mov	r7, r0
   16244:	2800      	cmp	r0, #0
   16246:	d0d4      	beq.n	161f2 <rpc_ip_event_handler+0x462>
   16248:	8a62      	ldrh	r2, [r4, #18]
   1624a:	2a10      	cmp	r2, #16
   1624c:	d015      	beq.n	1627a <rpc_ip_event_handler+0x4ea>
   1624e:	2a04      	cmp	r2, #4
   16250:	d007      	beq.n	16262 <rpc_ip_event_handler+0x4d2>
   16252:	6820      	ldr	r0, [r4, #0]
   16254:	f7fe fc64 	bl	14b20 <rpc_ip_client_data_free>
   16258:	4638      	mov	r0, r7
   1625a:	f003 fe05 	bl	19e68 <nrf_free>
   1625e:	2000      	movs	r0, #0
   16260:	e5fe      	b.n	15e60 <rpc_ip_event_handler+0xd0>
   16262:	2302      	movs	r3, #2
   16264:	2510      	movs	r5, #16
   16266:	6043      	str	r3, [r0, #4]
   16268:	7005      	strb	r5, [r0, #0]
   1626a:	8a23      	ldrh	r3, [r4, #16]
   1626c:	f104 0114 	add.w	r1, r4, #20
   16270:	8103      	strh	r3, [r0, #8]
   16272:	300c      	adds	r0, #12
   16274:	f006 fcef 	bl	1cc56 <memcpy>
   16278:	e5cf      	b.n	15e1a <rpc_ip_event_handler+0x8a>
   1627a:	230a      	movs	r3, #10
   1627c:	2524      	movs	r5, #36	; 0x24
   1627e:	6043      	str	r3, [r0, #4]
   16280:	7005      	strb	r5, [r0, #0]
   16282:	8a23      	ldrh	r3, [r4, #16]
   16284:	f104 0114 	add.w	r1, r4, #20
   16288:	8103      	strh	r3, [r0, #8]
   1628a:	3010      	adds	r0, #16
   1628c:	f006 fce3 	bl	1cc56 <memcpy>
   16290:	e5c3      	b.n	15e1a <rpc_ip_event_handler+0x8a>
   16292:	bf00      	nop
   16294:	00020e08 	.word	0x00020e08
   16298:	20021114 	.word	0x20021114

0001629c <rpc_handle_ctrl_message>:
   1629c:	2902      	cmp	r1, #2
   1629e:	b510      	push	{r4, lr}
   162a0:	4604      	mov	r4, r0
   162a2:	d00c      	beq.n	162be <rpc_handle_ctrl_message+0x22>
   162a4:	2904      	cmp	r1, #4
   162a6:	d008      	beq.n	162ba <rpc_handle_ctrl_message+0x1e>
   162a8:	2901      	cmp	r1, #1
   162aa:	d006      	beq.n	162ba <rpc_handle_ctrl_message+0x1e>
   162ac:	6880      	ldr	r0, [r0, #8]
   162ae:	b108      	cbz	r0, 162b4 <rpc_handle_ctrl_message+0x18>
   162b0:	f7fc ff76 	bl	131a0 <rpc_transport_data_free>
   162b4:	4620      	mov	r0, r4
   162b6:	f7fc ff71 	bl	1319c <rpc_transport_rpc_free>
   162ba:	2000      	movs	r0, #0
   162bc:	bd10      	pop	{r4, pc}
   162be:	6880      	ldr	r0, [r0, #8]
   162c0:	2800      	cmp	r0, #0
   162c2:	d0fa      	beq.n	162ba <rpc_handle_ctrl_message+0x1e>
   162c4:	f7fc ff6c 	bl	131a0 <rpc_transport_data_free>
   162c8:	2000      	movs	r0, #0
   162ca:	bd10      	pop	{r4, pc}

000162cc <rpc_handle_data_message>:
   162cc:	4b23      	ldr	r3, [pc, #140]	; (1635c <_flash_used+0x4c>)
   162ce:	6802      	ldr	r2, [r0, #0]
   162d0:	8819      	ldrh	r1, [r3, #0]
   162d2:	b292      	uxth	r2, r2
   162d4:	4291      	cmp	r1, r2
   162d6:	d027      	beq.n	16328 <_flash_used+0x18>
   162d8:	8a19      	ldrh	r1, [r3, #16]
   162da:	4291      	cmp	r1, r2
   162dc:	d02a      	beq.n	16334 <_flash_used+0x24>
   162de:	8c19      	ldrh	r1, [r3, #32]
   162e0:	4291      	cmp	r1, r2
   162e2:	d02b      	beq.n	1633c <_flash_used+0x2c>
   162e4:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   162e6:	4291      	cmp	r1, r2
   162e8:	d02a      	beq.n	16340 <_flash_used+0x30>
   162ea:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   162ee:	4291      	cmp	r1, r2
   162f0:	d028      	beq.n	16344 <_flash_used+0x34>
   162f2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   162f6:	4291      	cmp	r1, r2
   162f8:	d026      	beq.n	16348 <_flash_used+0x38>
   162fa:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   162fe:	4291      	cmp	r1, r2
   16300:	d026      	beq.n	16350 <_flash_used+0x40>
   16302:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   16306:	4291      	cmp	r1, r2
   16308:	d024      	beq.n	16354 <_flash_used+0x44>
   1630a:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1630e:	4291      	cmp	r1, r2
   16310:	d01c      	beq.n	1634c <_flash_used+0x3c>
   16312:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   16316:	4291      	cmp	r1, r2
   16318:	d01e      	beq.n	16358 <_flash_used+0x48>
   1631a:	6880      	ldr	r0, [r0, #8]
   1631c:	b160      	cbz	r0, 16338 <_flash_used+0x28>
   1631e:	b510      	push	{r4, lr}
   16320:	f7fc ff3e 	bl	131a0 <rpc_transport_data_free>
   16324:	2000      	movs	r0, #0
   16326:	bd10      	pop	{r4, pc}
   16328:	2200      	movs	r2, #0
   1632a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1632e:	685a      	ldr	r2, [r3, #4]
   16330:	68d9      	ldr	r1, [r3, #12]
   16332:	4710      	bx	r2
   16334:	2201      	movs	r2, #1
   16336:	e7f8      	b.n	1632a <_flash_used+0x1a>
   16338:	2000      	movs	r0, #0
   1633a:	4770      	bx	lr
   1633c:	2202      	movs	r2, #2
   1633e:	e7f4      	b.n	1632a <_flash_used+0x1a>
   16340:	2203      	movs	r2, #3
   16342:	e7f2      	b.n	1632a <_flash_used+0x1a>
   16344:	2204      	movs	r2, #4
   16346:	e7f0      	b.n	1632a <_flash_used+0x1a>
   16348:	2205      	movs	r2, #5
   1634a:	e7ee      	b.n	1632a <_flash_used+0x1a>
   1634c:	2208      	movs	r2, #8
   1634e:	e7ec      	b.n	1632a <_flash_used+0x1a>
   16350:	2206      	movs	r2, #6
   16352:	e7ea      	b.n	1632a <_flash_used+0x1a>
   16354:	2207      	movs	r2, #7
   16356:	e7e8      	b.n	1632a <_flash_used+0x1a>
   16358:	2209      	movs	r2, #9
   1635a:	e7e6      	b.n	1632a <_flash_used+0x1a>
   1635c:	2002113c 	.word	0x2002113c

00016360 <rpc_framework_init>:
   16360:	b508      	push	{r3, lr}
   16362:	22a0      	movs	r2, #160	; 0xa0
   16364:	2100      	movs	r1, #0
   16366:	4802      	ldr	r0, [pc, #8]	; (16370 <rpc_framework_init+0x10>)
   16368:	f006 fca0 	bl	1ccac <memset>
   1636c:	2000      	movs	r0, #0
   1636e:	bd08      	pop	{r3, pc}
   16370:	2002113c 	.word	0x2002113c

00016374 <rpc_client_register>:
   16374:	8803      	ldrh	r3, [r0, #0]
   16376:	2b00      	cmp	r3, #0
   16378:	d045      	beq.n	16406 <rpc_client_register+0x92>
   1637a:	6842      	ldr	r2, [r0, #4]
   1637c:	4601      	mov	r1, r0
   1637e:	2a00      	cmp	r2, #0
   16380:	d050      	beq.n	16424 <rpc_client_register+0xb0>
   16382:	4a30      	ldr	r2, [pc, #192]	; (16444 <rpc_client_register+0xd0>)
   16384:	8810      	ldrh	r0, [r2, #0]
   16386:	4283      	cmp	r3, r0
   16388:	d03d      	beq.n	16406 <rpc_client_register+0x92>
   1638a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1638e:	8a14      	ldrh	r4, [r2, #16]
   16390:	42a3      	cmp	r3, r4
   16392:	d035      	beq.n	16400 <rpc_client_register+0x8c>
   16394:	8c15      	ldrh	r5, [r2, #32]
   16396:	42ab      	cmp	r3, r5
   16398:	d032      	beq.n	16400 <rpc_client_register+0x8c>
   1639a:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1639c:	42b3      	cmp	r3, r6
   1639e:	d02f      	beq.n	16400 <rpc_client_register+0x8c>
   163a0:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   163a4:	42bb      	cmp	r3, r7
   163a6:	d02b      	beq.n	16400 <rpc_client_register+0x8c>
   163a8:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   163ac:	4563      	cmp	r3, ip
   163ae:	d027      	beq.n	16400 <rpc_client_register+0x8c>
   163b0:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   163b4:	4573      	cmp	r3, lr
   163b6:	d023      	beq.n	16400 <rpc_client_register+0x8c>
   163b8:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   163bc:	4543      	cmp	r3, r8
   163be:	d01f      	beq.n	16400 <rpc_client_register+0x8c>
   163c0:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   163c4:	454b      	cmp	r3, r9
   163c6:	d01b      	beq.n	16400 <rpc_client_register+0x8c>
   163c8:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   163cc:	4553      	cmp	r3, sl
   163ce:	d017      	beq.n	16400 <rpc_client_register+0x8c>
   163d0:	b1e0      	cbz	r0, 1640c <rpc_client_register+0x98>
   163d2:	b35c      	cbz	r4, 1642c <rpc_client_register+0xb8>
   163d4:	b365      	cbz	r5, 16430 <rpc_client_register+0xbc>
   163d6:	b36e      	cbz	r6, 16434 <rpc_client_register+0xc0>
   163d8:	b377      	cbz	r7, 16438 <rpc_client_register+0xc4>
   163da:	f1bc 0f00 	cmp.w	ip, #0
   163de:	d02d      	beq.n	1643c <rpc_client_register+0xc8>
   163e0:	f1be 0f00 	cmp.w	lr, #0
   163e4:	d020      	beq.n	16428 <rpc_client_register+0xb4>
   163e6:	f1b8 0f00 	cmp.w	r8, #0
   163ea:	d029      	beq.n	16440 <rpc_client_register+0xcc>
   163ec:	f1b9 0f00 	cmp.w	r9, #0
   163f0:	d00b      	beq.n	1640a <rpc_client_register+0x96>
   163f2:	2009      	movs	r0, #9
   163f4:	f1ba 0f00 	cmp.w	sl, #0
   163f8:	d008      	beq.n	1640c <rpc_client_register+0x98>
   163fa:	2004      	movs	r0, #4
   163fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16400:	2007      	movs	r0, #7
   16402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16406:	2007      	movs	r0, #7
   16408:	4770      	bx	lr
   1640a:	2008      	movs	r0, #8
   1640c:	0100      	lsls	r0, r0, #4
   1640e:	5213      	strh	r3, [r2, r0]
   16410:	684b      	ldr	r3, [r1, #4]
   16412:	4402      	add	r2, r0
   16414:	6053      	str	r3, [r2, #4]
   16416:	688b      	ldr	r3, [r1, #8]
   16418:	2000      	movs	r0, #0
   1641a:	6093      	str	r3, [r2, #8]
   1641c:	68cb      	ldr	r3, [r1, #12]
   1641e:	60d3      	str	r3, [r2, #12]
   16420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16424:	200e      	movs	r0, #14
   16426:	4770      	bx	lr
   16428:	2006      	movs	r0, #6
   1642a:	e7ef      	b.n	1640c <rpc_client_register+0x98>
   1642c:	2001      	movs	r0, #1
   1642e:	e7ed      	b.n	1640c <rpc_client_register+0x98>
   16430:	2002      	movs	r0, #2
   16432:	e7eb      	b.n	1640c <rpc_client_register+0x98>
   16434:	2003      	movs	r0, #3
   16436:	e7e9      	b.n	1640c <rpc_client_register+0x98>
   16438:	2004      	movs	r0, #4
   1643a:	e7e7      	b.n	1640c <rpc_client_register+0x98>
   1643c:	2005      	movs	r0, #5
   1643e:	e7e5      	b.n	1640c <rpc_client_register+0x98>
   16440:	2007      	movs	r0, #7
   16442:	e7e3      	b.n	1640c <rpc_client_register+0x98>
   16444:	2002113c 	.word	0x2002113c

00016448 <rpc_message_send>:
   16448:	b150      	cbz	r0, 16460 <rpc_message_send+0x18>
   1644a:	b159      	cbz	r1, 16464 <rpc_message_send+0x1c>
   1644c:	684b      	ldr	r3, [r1, #4]
   1644e:	8008      	strh	r0, [r1, #0]
   16450:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16454:	f043 0302 	orr.w	r3, r3, #2
   16458:	604b      	str	r3, [r1, #4]
   1645a:	4608      	mov	r0, r1
   1645c:	f7fc be98 	b.w	13190 <rpc_transport_send>
   16460:	2007      	movs	r0, #7
   16462:	4770      	bx	lr
   16464:	200e      	movs	r0, #14
   16466:	4770      	bx	lr

00016468 <rpc_message_alloc>:
   16468:	b342      	cbz	r2, 164bc <rpc_message_alloc+0x54>
   1646a:	b328      	cbz	r0, 164b8 <rpc_message_alloc+0x50>
   1646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1646e:	2300      	movs	r3, #0
   16470:	4616      	mov	r6, r2
   16472:	460c      	mov	r4, r1
   16474:	4605      	mov	r5, r0
   16476:	6013      	str	r3, [r2, #0]
   16478:	b171      	cbz	r1, 16498 <rpc_message_alloc+0x30>
   1647a:	4608      	mov	r0, r1
   1647c:	f7fc fe8c 	bl	13198 <rpc_transport_data_alloc>
   16480:	4607      	mov	r7, r0
   16482:	b1b8      	cbz	r0, 164b4 <rpc_message_alloc+0x4c>
   16484:	f7fc fe86 	bl	13194 <rpc_transport_rpc_alloc>
   16488:	4603      	mov	r3, r0
   1648a:	b180      	cbz	r0, 164ae <rpc_message_alloc+0x46>
   1648c:	2000      	movs	r0, #0
   1648e:	60dc      	str	r4, [r3, #12]
   16490:	609f      	str	r7, [r3, #8]
   16492:	801d      	strh	r5, [r3, #0]
   16494:	6033      	str	r3, [r6, #0]
   16496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16498:	f7fc fe7c 	bl	13194 <rpc_transport_rpc_alloc>
   1649c:	4603      	mov	r3, r0
   1649e:	b148      	cbz	r0, 164b4 <rpc_message_alloc+0x4c>
   164a0:	4627      	mov	r7, r4
   164a2:	60dc      	str	r4, [r3, #12]
   164a4:	609f      	str	r7, [r3, #8]
   164a6:	801d      	strh	r5, [r3, #0]
   164a8:	2000      	movs	r0, #0
   164aa:	6033      	str	r3, [r6, #0]
   164ac:	e7f3      	b.n	16496 <rpc_message_alloc+0x2e>
   164ae:	4638      	mov	r0, r7
   164b0:	f7fc fe76 	bl	131a0 <rpc_transport_data_free>
   164b4:	2004      	movs	r0, #4
   164b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   164b8:	2007      	movs	r0, #7
   164ba:	4770      	bx	lr
   164bc:	200e      	movs	r0, #14
   164be:	4770      	bx	lr

000164c0 <rpc_message_free>:
   164c0:	b130      	cbz	r0, 164d0 <rpc_message_free+0x10>
   164c2:	b139      	cbz	r1, 164d4 <rpc_message_free+0x14>
   164c4:	b508      	push	{r3, lr}
   164c6:	4608      	mov	r0, r1
   164c8:	f7fc fe68 	bl	1319c <rpc_transport_rpc_free>
   164cc:	2000      	movs	r0, #0
   164ce:	bd08      	pop	{r3, pc}
   164d0:	2007      	movs	r0, #7
   164d2:	4770      	bx	lr
   164d4:	200e      	movs	r0, #14
   164d6:	4770      	bx	lr

000164d8 <rpc_message_data_free>:
   164d8:	b130      	cbz	r0, 164e8 <rpc_message_data_free+0x10>
   164da:	b139      	cbz	r1, 164ec <rpc_message_data_free+0x14>
   164dc:	b508      	push	{r3, lr}
   164de:	4608      	mov	r0, r1
   164e0:	f7fc fe5e 	bl	131a0 <rpc_transport_data_free>
   164e4:	2000      	movs	r0, #0
   164e6:	bd08      	pop	{r3, pc}
   164e8:	2007      	movs	r0, #7
   164ea:	4770      	bx	lr
   164ec:	200e      	movs	r0, #14
   164ee:	4770      	bx	lr

000164f0 <packet_free_cb>:
   164f0:	b510      	push	{r4, lr}
   164f2:	4604      	mov	r4, r0
   164f4:	b118      	cbz	r0, 164fe <packet_free_cb+0xe>
   164f6:	6800      	ldr	r0, [r0, #0]
   164f8:	b108      	cbz	r0, 164fe <packet_free_cb+0xe>
   164fa:	f002 fec7 	bl	1928c <rpc_gnss_client_data_free>
   164fe:	68a0      	ldr	r0, [r4, #8]
   16500:	b118      	cbz	r0, 1650a <packet_free_cb+0x1a>
   16502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16506:	f003 bcaf 	b.w	19e68 <nrf_free>
   1650a:	bd10      	pop	{r4, pc}

0001650c <rpc_gnss_event_handler>:
   1650c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1650e:	4b64      	ldr	r3, [pc, #400]	; (166a0 <rpc_gnss_event_handler+0x194>)
   16510:	4606      	mov	r6, r0
   16512:	6800      	ldr	r0, [r0, #0]
   16514:	881b      	ldrh	r3, [r3, #0]
   16516:	6802      	ldr	r2, [r0, #0]
   16518:	b085      	sub	sp, #20
   1651a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1651e:	460d      	mov	r5, r1
   16520:	d037      	beq.n	16592 <rpc_gnss_event_handler+0x86>
   16522:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   16526:	33ff      	adds	r3, #255	; 0xff
   16528:	b29b      	uxth	r3, r3
   1652a:	2b02      	cmp	r3, #2
   1652c:	d811      	bhi.n	16552 <rpc_gnss_event_handler+0x46>
   1652e:	4c5d      	ldr	r4, [pc, #372]	; (166a4 <rpc_gnss_event_handler+0x198>)
   16530:	6823      	ldr	r3, [r4, #0]
   16532:	075a      	lsls	r2, r3, #29
   16534:	d410      	bmi.n	16558 <rpc_gnss_event_handler+0x4c>
   16536:	6823      	ldr	r3, [r4, #0]
   16538:	079b      	lsls	r3, r3, #30
   1653a:	d503      	bpl.n	16544 <rpc_gnss_event_handler+0x38>
   1653c:	f244 0303 	movw	r3, #16387	; 0x4003
   16540:	429d      	cmp	r5, r3
   16542:	d009      	beq.n	16558 <rpc_gnss_event_handler+0x4c>
   16544:	6830      	ldr	r0, [r6, #0]
   16546:	b120      	cbz	r0, 16552 <rpc_gnss_event_handler+0x46>
   16548:	f002 fea0 	bl	1928c <rpc_gnss_client_data_free>
   1654c:	2200      	movs	r2, #0
   1654e:	4b56      	ldr	r3, [pc, #344]	; (166a8 <rpc_gnss_event_handler+0x19c>)
   16550:	601a      	str	r2, [r3, #0]
   16552:	2000      	movs	r0, #0
   16554:	b005      	add	sp, #20
   16556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16558:	2002      	movs	r0, #2
   1655a:	f003 fc7b 	bl	19e54 <nrf_malloc>
   1655e:	4607      	mov	r7, r0
   16560:	2800      	cmp	r0, #0
   16562:	f000 8094 	beq.w	1668e <rpc_gnss_event_handler+0x182>
   16566:	2302      	movs	r3, #2
   16568:	8005      	strh	r5, [r0, #0]
   1656a:	6831      	ldr	r1, [r6, #0]
   1656c:	6872      	ldr	r2, [r6, #4]
   1656e:	484f      	ldr	r0, [pc, #316]	; (166ac <rpc_gnss_event_handler+0x1a0>)
   16570:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   16574:	6800      	ldr	r0, [r0, #0]
   16576:	9303      	str	r3, [sp, #12]
   16578:	6803      	ldr	r3, [r0, #0]
   1657a:	4669      	mov	r1, sp
   1657c:	685b      	ldr	r3, [r3, #4]
   1657e:	4798      	blx	r3
   16580:	3001      	adds	r0, #1
   16582:	d071      	beq.n	16668 <rpc_gnss_event_handler+0x15c>
   16584:	2000      	movs	r0, #0
   16586:	6823      	ldr	r3, [r4, #0]
   16588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1658c:	6023      	str	r3, [r4, #0]
   1658e:	b005      	add	sp, #20
   16590:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16592:	4c44      	ldr	r4, [pc, #272]	; (166a4 <rpc_gnss_event_handler+0x198>)
   16594:	4f44      	ldr	r7, [pc, #272]	; (166a8 <rpc_gnss_event_handler+0x19c>)
   16596:	6823      	ldr	r3, [r4, #0]
   16598:	6038      	str	r0, [r7, #0]
   1659a:	01d9      	lsls	r1, r3, #7
   1659c:	d523      	bpl.n	165e6 <rpc_gnss_event_handler+0xda>
   1659e:	f242 1302 	movw	r3, #8450	; 0x2102
   165a2:	429d      	cmp	r5, r3
   165a4:	d11f      	bne.n	165e6 <rpc_gnss_event_handler+0xda>
   165a6:	6843      	ldr	r3, [r0, #4]
   165a8:	b91b      	cbnz	r3, 165b2 <rpc_gnss_event_handler+0xa6>
   165aa:	6823      	ldr	r3, [r4, #0]
   165ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   165b0:	6023      	str	r3, [r4, #0]
   165b2:	6823      	ldr	r3, [r4, #0]
   165b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   165b8:	6023      	str	r3, [r4, #0]
   165ba:	6823      	ldr	r3, [r4, #0]
   165bc:	025a      	lsls	r2, r3, #9
   165be:	d430      	bmi.n	16622 <rpc_gnss_event_handler+0x116>
   165c0:	f242 0305 	movw	r3, #8197	; 0x2005
   165c4:	429d      	cmp	r5, r3
   165c6:	d12c      	bne.n	16622 <rpc_gnss_event_handler+0x116>
   165c8:	6823      	ldr	r3, [r4, #0]
   165ca:	0299      	lsls	r1, r3, #10
   165cc:	d529      	bpl.n	16622 <rpc_gnss_event_handler+0x116>
   165ce:	6843      	ldr	r3, [r0, #4]
   165d0:	2b00      	cmp	r3, #0
   165d2:	d157      	bne.n	16684 <rpc_gnss_event_handler+0x178>
   165d4:	6823      	ldr	r3, [r4, #0]
   165d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   165da:	6023      	str	r3, [r4, #0]
   165dc:	6823      	ldr	r3, [r4, #0]
   165de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   165e2:	6023      	str	r3, [r4, #0]
   165e4:	e01d      	b.n	16622 <rpc_gnss_event_handler+0x116>
   165e6:	6823      	ldr	r3, [r4, #0]
   165e8:	025b      	lsls	r3, r3, #9
   165ea:	d50e      	bpl.n	1660a <rpc_gnss_event_handler+0xfe>
   165ec:	f242 1303 	movw	r3, #8451	; 0x2103
   165f0:	429d      	cmp	r5, r3
   165f2:	d10a      	bne.n	1660a <rpc_gnss_event_handler+0xfe>
   165f4:	6843      	ldr	r3, [r0, #4]
   165f6:	b91b      	cbnz	r3, 16600 <rpc_gnss_event_handler+0xf4>
   165f8:	6823      	ldr	r3, [r4, #0]
   165fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   165fe:	6023      	str	r3, [r4, #0]
   16600:	6823      	ldr	r3, [r4, #0]
   16602:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   16606:	6023      	str	r3, [r4, #0]
   16608:	e00b      	b.n	16622 <rpc_gnss_event_handler+0x116>
   1660a:	f242 0301 	movw	r3, #8193	; 0x2001
   1660e:	429d      	cmp	r5, r3
   16610:	d10c      	bne.n	1662c <rpc_gnss_event_handler+0x120>
   16612:	6843      	ldr	r3, [r0, #4]
   16614:	b92b      	cbnz	r3, 16622 <rpc_gnss_event_handler+0x116>
   16616:	6823      	ldr	r3, [r4, #0]
   16618:	0c1b      	lsrs	r3, r3, #16
   1661a:	041b      	lsls	r3, r3, #16
   1661c:	f043 0302 	orr.w	r3, r3, #2
   16620:	6023      	str	r3, [r4, #0]
   16622:	f002 fe33 	bl	1928c <rpc_gnss_client_data_free>
   16626:	2300      	movs	r3, #0
   16628:	603b      	str	r3, [r7, #0]
   1662a:	e77a      	b.n	16522 <rpc_gnss_event_handler+0x16>
   1662c:	f242 0304 	movw	r3, #8196	; 0x2004
   16630:	429d      	cmp	r5, r3
   16632:	d1c5      	bne.n	165c0 <rpc_gnss_event_handler+0xb4>
   16634:	6843      	ldr	r3, [r0, #4]
   16636:	b993      	cbnz	r3, 1665e <rpc_gnss_event_handler+0x152>
   16638:	6823      	ldr	r3, [r4, #0]
   1663a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1663e:	6023      	str	r3, [r4, #0]
   16640:	6823      	ldr	r3, [r4, #0]
   16642:	b29b      	uxth	r3, r3
   16644:	2b03      	cmp	r3, #3
   16646:	6823      	ldr	r3, [r4, #0]
   16648:	d016      	beq.n	16678 <rpc_gnss_event_handler+0x16c>
   1664a:	b29b      	uxth	r3, r3
   1664c:	2b04      	cmp	r3, #4
   1664e:	d1d7      	bne.n	16600 <rpc_gnss_event_handler+0xf4>
   16650:	6823      	ldr	r3, [r4, #0]
   16652:	0c1b      	lsrs	r3, r3, #16
   16654:	041b      	lsls	r3, r3, #16
   16656:	f043 0302 	orr.w	r3, r3, #2
   1665a:	6023      	str	r3, [r4, #0]
   1665c:	e7d0      	b.n	16600 <rpc_gnss_event_handler+0xf4>
   1665e:	6823      	ldr	r3, [r4, #0]
   16660:	b29b      	uxth	r3, r3
   16662:	2b03      	cmp	r3, #3
   16664:	d1cc      	bne.n	16600 <rpc_gnss_event_handler+0xf4>
   16666:	e7f3      	b.n	16650 <rpc_gnss_event_handler+0x144>
   16668:	4638      	mov	r0, r7
   1666a:	f003 fbfd 	bl	19e68 <nrf_free>
   1666e:	6830      	ldr	r0, [r6, #0]
   16670:	2800      	cmp	r0, #0
   16672:	f47f af69 	bne.w	16548 <rpc_gnss_event_handler+0x3c>
   16676:	e76c      	b.n	16552 <rpc_gnss_event_handler+0x46>
   16678:	0c1b      	lsrs	r3, r3, #16
   1667a:	041b      	lsls	r3, r3, #16
   1667c:	f043 0304 	orr.w	r3, r3, #4
   16680:	6023      	str	r3, [r4, #0]
   16682:	e7bd      	b.n	16600 <rpc_gnss_event_handler+0xf4>
   16684:	6823      	ldr	r3, [r4, #0]
   16686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1668a:	6023      	str	r3, [r4, #0]
   1668c:	e7c9      	b.n	16622 <rpc_gnss_event_handler+0x116>
   1668e:	6830      	ldr	r0, [r6, #0]
   16690:	2800      	cmp	r0, #0
   16692:	f43f af5e 	beq.w	16552 <rpc_gnss_event_handler+0x46>
   16696:	f002 fdf9 	bl	1928c <rpc_gnss_client_data_free>
   1669a:	4b03      	ldr	r3, [pc, #12]	; (166a8 <rpc_gnss_event_handler+0x19c>)
   1669c:	601f      	str	r7, [r3, #0]
   1669e:	e758      	b.n	16552 <rpc_gnss_event_handler+0x46>
   166a0:	20021c44 	.word	0x20021c44
   166a4:	200211dc 	.word	0x200211dc
   166a8:	200211e0 	.word	0x200211e0
   166ac:	200211e4 	.word	0x200211e4

000166b0 <gnss_interface_write>:
   166b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   166b4:	4a74      	ldr	r2, [pc, #464]	; (16888 <gnss_interface_write+0x1d8>)
   166b6:	b09f      	sub	sp, #124	; 0x7c
   166b8:	4290      	cmp	r0, r2
   166ba:	9d26      	ldr	r5, [sp, #152]	; 0x98
   166bc:	f040 80d7 	bne.w	1686e <gnss_interface_write+0x1be>
   166c0:	2900      	cmp	r1, #0
   166c2:	f000 80c6 	beq.w	16852 <gnss_interface_write+0x1a2>
   166c6:	2d00      	cmp	r5, #0
   166c8:	f000 80c3 	beq.w	16852 <gnss_interface_write+0x1a2>
   166cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   166ce:	2a02      	cmp	r2, #2
   166d0:	f040 80bf 	bne.w	16852 <gnss_interface_write+0x1a2>
   166d4:	4c6d      	ldr	r4, [pc, #436]	; (1688c <gnss_interface_write+0x1dc>)
   166d6:	6822      	ldr	r2, [r4, #0]
   166d8:	b292      	uxth	r2, r2
   166da:	2a02      	cmp	r2, #2
   166dc:	d004      	beq.n	166e8 <gnss_interface_write+0x38>
   166de:	6822      	ldr	r2, [r4, #0]
   166e0:	b292      	uxth	r2, r2
   166e2:	2a04      	cmp	r2, #4
   166e4:	f040 80bd 	bne.w	16862 <gnss_interface_write+0x1b2>
   166e8:	2b00      	cmp	r3, #0
   166ea:	f040 80c6 	bne.w	1687a <gnss_interface_write+0x1ca>
   166ee:	6822      	ldr	r2, [r4, #0]
   166f0:	0390      	lsls	r0, r2, #14
   166f2:	d512      	bpl.n	1671a <gnss_interface_write+0x6a>
   166f4:	6822      	ldr	r2, [r4, #0]
   166f6:	882b      	ldrh	r3, [r5, #0]
   166f8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   166fc:	6022      	str	r2, [r4, #0]
   166fe:	6822      	ldr	r2, [r4, #0]
   16700:	3b01      	subs	r3, #1
   16702:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   16706:	6022      	str	r2, [r4, #0]
   16708:	2b07      	cmp	r3, #7
   1670a:	f200 80a2 	bhi.w	16852 <gnss_interface_write+0x1a2>
   1670e:	e8df f003 	tbb	[pc, r3]
   16712:	7d82      	.short	0x7d82
   16714:	646e7378 	.word	0x646e7378
   16718:	0869      	.short	0x0869
   1671a:	2000      	movs	r0, #0
   1671c:	b01f      	add	sp, #124	; 0x7c
   1671e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16722:	4608      	mov	r0, r1
   16724:	a902      	add	r1, sp, #8
   16726:	f002 fd65 	bl	191f4 <rpc_gnss_serialize_integrity>
   1672a:	2172      	movs	r1, #114	; 0x72
   1672c:	4668      	mov	r0, sp
   1672e:	f002 fd7b 	bl	19228 <rpc_gnss_client_request_alloc>
   16732:	4605      	mov	r5, r0
   16734:	9800      	ldr	r0, [sp, #0]
   16736:	2d00      	cmp	r5, #0
   16738:	d172      	bne.n	16820 <gnss_interface_write+0x170>
   1673a:	2800      	cmp	r0, #0
   1673c:	d077      	beq.n	1682e <gnss_interface_write+0x17e>
   1673e:	f241 0605 	movw	r6, #4101	; 0x1005
   16742:	f04f 0c49 	mov.w	ip, #73	; 0x49
   16746:	2272      	movs	r2, #114	; 0x72
   16748:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1674c:	f04f 0943 	mov.w	r9, #67	; 0x43
   16750:	f04f 0854 	mov.w	r8, #84	; 0x54
   16754:	4f4e      	ldr	r7, [pc, #312]	; (16890 <gnss_interface_write+0x1e0>)
   16756:	a91e      	add	r1, sp, #120	; 0x78
   16758:	883b      	ldrh	r3, [r7, #0]
   1675a:	f880 c00f 	strb.w	ip, [r0, #15]
   1675e:	3301      	adds	r3, #1
   16760:	b29b      	uxth	r3, r3
   16762:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   16766:	f841 cd74 	str.w	ip, [r1, #-116]!
   1676a:	7145      	strb	r5, [r0, #5]
   1676c:	7185      	strb	r5, [r0, #6]
   1676e:	71c5      	strb	r5, [r0, #7]
   16770:	7205      	strb	r5, [r0, #8]
   16772:	7245      	strb	r5, [r0, #9]
   16774:	7285      	strb	r5, [r0, #10]
   16776:	72c5      	strb	r5, [r0, #11]
   16778:	7102      	strb	r2, [r0, #4]
   1677a:	f880 900c 	strb.w	r9, [r0, #12]
   1677e:	f880 800d 	strb.w	r8, [r0, #13]
   16782:	f880 e00e 	strb.w	lr, [r0, #14]
   16786:	6800      	ldr	r0, [r0, #0]
   16788:	803b      	strh	r3, [r7, #0]
   1678a:	f006 fa64 	bl	1cc56 <memcpy>
   1678e:	4b41      	ldr	r3, [pc, #260]	; (16894 <gnss_interface_write+0x1e4>)
   16790:	4631      	mov	r1, r6
   16792:	9800      	ldr	r0, [sp, #0]
   16794:	601d      	str	r5, [r3, #0]
   16796:	f002 fd5b 	bl	19250 <rpc_gnss_client_request_send>
   1679a:	2800      	cmp	r0, #0
   1679c:	d14e      	bne.n	1683c <gnss_interface_write+0x18c>
   1679e:	6823      	ldr	r3, [r4, #0]
   167a0:	0299      	lsls	r1, r3, #10
   167a2:	d50b      	bpl.n	167bc <gnss_interface_write+0x10c>
   167a4:	4e3c      	ldr	r6, [pc, #240]	; (16898 <gnss_interface_write+0x1e8>)
   167a6:	4d38      	ldr	r5, [pc, #224]	; (16888 <gnss_interface_write+0x1d8>)
   167a8:	e000      	b.n	167ac <gnss_interface_write+0xfc>
   167aa:	b978      	cbnz	r0, 167cc <gnss_interface_write+0x11c>
   167ac:	4631      	mov	r1, r6
   167ae:	4628      	mov	r0, r5
   167b0:	f7fb fc5c 	bl	1206c <bsd_os_timedwait>
   167b4:	6823      	ldr	r3, [r4, #0]
   167b6:	029a      	lsls	r2, r3, #10
   167b8:	d4f7      	bmi.n	167aa <gnss_interface_write+0xfa>
   167ba:	b938      	cbnz	r0, 167cc <gnss_interface_write+0x11c>
   167bc:	6823      	ldr	r3, [r4, #0]
   167be:	039b      	lsls	r3, r3, #14
   167c0:	d4ab      	bmi.n	1671a <gnss_interface_write+0x6a>
   167c2:	2005      	movs	r0, #5
   167c4:	6823      	ldr	r3, [r4, #0]
   167c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   167ca:	6023      	str	r3, [r4, #0]
   167cc:	f7fb fd04 	bl	121d8 <bsd_os_errno_set>
   167d0:	f04f 30ff 	mov.w	r0, #4294967295
   167d4:	b01f      	add	sp, #124	; 0x7c
   167d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   167da:	4608      	mov	r0, r1
   167dc:	a902      	add	r1, sp, #8
   167de:	f002 fcc1 	bl	19164 <rpc_gnss_serialize_time_and_sv_tow>
   167e2:	e7a2      	b.n	1672a <gnss_interface_write+0x7a>
   167e4:	4608      	mov	r0, r1
   167e6:	a902      	add	r1, sp, #8
   167e8:	f002 fce4 	bl	191b4 <rpc_gnss_serialize_location>
   167ec:	e79d      	b.n	1672a <gnss_interface_write+0x7a>
   167ee:	4608      	mov	r0, r1
   167f0:	a902      	add	r1, sp, #8
   167f2:	f002 fc9d 	bl	19130 <rpc_gnss_serialize_nequick>
   167f6:	e798      	b.n	1672a <gnss_interface_write+0x7a>
   167f8:	4608      	mov	r0, r1
   167fa:	a902      	add	r1, sp, #8
   167fc:	f002 fc74 	bl	190e8 <rpc_gnss_serialize_klob>
   16800:	e793      	b.n	1672a <gnss_interface_write+0x7a>
   16802:	4608      	mov	r0, r1
   16804:	a902      	add	r1, sp, #8
   16806:	f002 fc3d 	bl	19084 <rpc_gnss_serialize_alm>
   1680a:	e78e      	b.n	1672a <gnss_interface_write+0x7a>
   1680c:	4608      	mov	r0, r1
   1680e:	a902      	add	r1, sp, #8
   16810:	f002 fbe6 	bl	18fe0 <rpc_gnss_serialize_ephe>
   16814:	e789      	b.n	1672a <gnss_interface_write+0x7a>
   16816:	4608      	mov	r0, r1
   16818:	a902      	add	r1, sp, #8
   1681a:	f002 fbbf 	bl	18f9c <rpc_gnss_serialize_utc>
   1681e:	e784      	b.n	1672a <gnss_interface_write+0x7a>
   16820:	b128      	cbz	r0, 1682e <gnss_interface_write+0x17e>
   16822:	6803      	ldr	r3, [r0, #0]
   16824:	b11b      	cbz	r3, 1682e <gnss_interface_write+0x17e>
   16826:	4618      	mov	r0, r3
   16828:	f002 fd30 	bl	1928c <rpc_gnss_client_data_free>
   1682c:	9800      	ldr	r0, [sp, #0]
   1682e:	f002 fd25 	bl	1927c <rpc_gnss_client_message_free>
   16832:	2023      	movs	r0, #35	; 0x23
   16834:	f7fb fcd0 	bl	121d8 <bsd_os_errno_set>
   16838:	f04f 30ff 	mov.w	r0, #4294967295
   1683c:	6823      	ldr	r3, [r4, #0]
   1683e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16842:	6023      	str	r3, [r4, #0]
   16844:	6823      	ldr	r3, [r4, #0]
   16846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1684a:	6023      	str	r3, [r4, #0]
   1684c:	b01f      	add	sp, #124	; 0x7c
   1684e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16852:	2016      	movs	r0, #22
   16854:	f7fb fcc0 	bl	121d8 <bsd_os_errno_set>
   16858:	f04f 30ff 	mov.w	r0, #4294967295
   1685c:	b01f      	add	sp, #124	; 0x7c
   1685e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16862:	2039      	movs	r0, #57	; 0x39
   16864:	f7fb fcb8 	bl	121d8 <bsd_os_errno_set>
   16868:	f04f 30ff 	mov.w	r0, #4294967295
   1686c:	e756      	b.n	1671c <gnss_interface_write+0x6c>
   1686e:	2009      	movs	r0, #9
   16870:	f7fb fcb2 	bl	121d8 <bsd_os_errno_set>
   16874:	f04f 30ff 	mov.w	r0, #4294967295
   16878:	e750      	b.n	1671c <gnss_interface_write+0x6c>
   1687a:	202d      	movs	r0, #45	; 0x2d
   1687c:	f7fb fcac 	bl	121d8 <bsd_os_errno_set>
   16880:	f04f 30ff 	mov.w	r0, #4294967295
   16884:	e74a      	b.n	1671c <gnss_interface_write+0x6c>
   16886:	bf00      	nop
   16888:	49765443 	.word	0x49765443
   1688c:	200211dc 	.word	0x200211dc
   16890:	20021c44 	.word	0x20021c44
   16894:	200211e0 	.word	0x200211e0
   16898:	200205a0 	.word	0x200205a0

0001689c <gnss_interface_read>:
   1689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168a0:	4c50      	ldr	r4, [pc, #320]	; (169e4 <gnss_interface_read+0x148>)
   168a2:	b0b7      	sub	sp, #220	; 0xdc
   168a4:	42a0      	cmp	r0, r4
   168a6:	f040 81fe 	bne.w	16ca6 <gnss_interface_read+0x40a>
   168aa:	4688      	mov	r8, r1
   168ac:	2900      	cmp	r1, #0
   168ae:	f000 81f4 	beq.w	16c9a <gnss_interface_read+0x3fe>
   168b2:	2ad7      	cmp	r2, #215	; 0xd7
   168b4:	f240 81f1 	bls.w	16c9a <gnss_interface_read+0x3fe>
   168b8:	4d4b      	ldr	r5, [pc, #300]	; (169e8 <gnss_interface_read+0x14c>)
   168ba:	4699      	mov	r9, r3
   168bc:	682b      	ldr	r3, [r5, #0]
   168be:	b29b      	uxth	r3, r3
   168c0:	2b04      	cmp	r3, #4
   168c2:	d004      	beq.n	168ce <gnss_interface_read+0x32>
   168c4:	682b      	ldr	r3, [r5, #0]
   168c6:	b29b      	uxth	r3, r3
   168c8:	2b02      	cmp	r3, #2
   168ca:	f040 81e0 	bne.w	16c8e <gnss_interface_read+0x3f2>
   168ce:	f1b9 0f00 	cmp.w	r9, #0
   168d2:	d158      	bne.n	16986 <gnss_interface_read+0xea>
   168d4:	2102      	movs	r1, #2
   168d6:	20b6      	movs	r0, #182	; 0xb6
   168d8:	2400      	movs	r4, #0
   168da:	682b      	ldr	r3, [r5, #0]
   168dc:	f10d 020e 	add.w	r2, sp, #14
   168e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   168e4:	602b      	str	r3, [r5, #0]
   168e6:	f8df a108 	ldr.w	sl, [pc, #264]	; 169f0 <gnss_interface_read+0x154>
   168ea:	ab08      	add	r3, sp, #32
   168ec:	4f3f      	ldr	r7, [pc, #252]	; (169ec <gnss_interface_read+0x150>)
   168ee:	4e3d      	ldr	r6, [pc, #244]	; (169e4 <gnss_interface_read+0x148>)
   168f0:	9005      	str	r0, [sp, #20]
   168f2:	9107      	str	r1, [sp, #28]
   168f4:	9304      	str	r3, [sp, #16]
   168f6:	9206      	str	r2, [sp, #24]
   168f8:	ea09 0b01 	and.w	fp, r9, r1
   168fc:	f8da 0000 	ldr.w	r0, [sl]
   16900:	464a      	mov	r2, r9
   16902:	6803      	ldr	r3, [r0, #0]
   16904:	a904      	add	r1, sp, #16
   16906:	689b      	ldr	r3, [r3, #8]
   16908:	4798      	blx	r3
   1690a:	2800      	cmp	r0, #0
   1690c:	da11      	bge.n	16932 <gnss_interface_read+0x96>
   1690e:	f1bb 0f00 	cmp.w	fp, #0
   16912:	d141      	bne.n	16998 <gnss_interface_read+0xfc>
   16914:	682b      	ldr	r3, [r5, #0]
   16916:	03d8      	lsls	r0, r3, #15
   16918:	d4f0      	bmi.n	168fc <gnss_interface_read+0x60>
   1691a:	b10c      	cbz	r4, 16920 <gnss_interface_read+0x84>
   1691c:	e7ee      	b.n	168fc <gnss_interface_read+0x60>
   1691e:	b930      	cbnz	r0, 1692e <gnss_interface_read+0x92>
   16920:	4639      	mov	r1, r7
   16922:	4630      	mov	r0, r6
   16924:	f7fb fba2 	bl	1206c <bsd_os_timedwait>
   16928:	682b      	ldr	r3, [r5, #0]
   1692a:	03d9      	lsls	r1, r3, #15
   1692c:	d5f7      	bpl.n	1691e <gnss_interface_read+0x82>
   1692e:	4604      	mov	r4, r0
   16930:	e7e4      	b.n	168fc <gnss_interface_read+0x60>
   16932:	f244 0202 	movw	r2, #16386	; 0x4002
   16936:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1693a:	4293      	cmp	r3, r2
   1693c:	d042      	beq.n	169c4 <gnss_interface_read+0x128>
   1693e:	f244 0201 	movw	r2, #16385	; 0x4001
   16942:	4293      	cmp	r3, r2
   16944:	d056      	beq.n	169f4 <gnss_interface_read+0x158>
   16946:	f244 0203 	movw	r2, #16387	; 0x4003
   1694a:	4293      	cmp	r3, r2
   1694c:	f040 81a5 	bne.w	16c9a <gnss_interface_read+0x3fe>
   16950:	2203      	movs	r2, #3
   16952:	2414      	movs	r4, #20
   16954:	9b08      	ldr	r3, [sp, #32]
   16956:	f888 2000 	strb.w	r2, [r8]
   1695a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1695c:	f8c8 3008 	str.w	r3, [r8, #8]
   16960:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16964:	e9c8 2303 	strd	r2, r3, [r8, #12]
   16968:	f8da 0000 	ldr.w	r0, [sl]
   1696c:	6803      	ldr	r3, [r0, #0]
   1696e:	68db      	ldr	r3, [r3, #12]
   16970:	4798      	blx	r3
   16972:	2800      	cmp	r0, #0
   16974:	dd03      	ble.n	1697e <gnss_interface_read+0xe2>
   16976:	682b      	ldr	r3, [r5, #0]
   16978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1697c:	602b      	str	r3, [r5, #0]
   1697e:	4620      	mov	r0, r4
   16980:	b037      	add	sp, #220	; 0xdc
   16982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16986:	f019 0f2a 	tst.w	r9, #42	; 0x2a
   1698a:	d1a3      	bne.n	168d4 <gnss_interface_read+0x38>
   1698c:	202d      	movs	r0, #45	; 0x2d
   1698e:	f7fb fc23 	bl	121d8 <bsd_os_errno_set>
   16992:	f04f 34ff 	mov.w	r4, #4294967295
   16996:	e7f2      	b.n	1697e <gnss_interface_read+0xe2>
   16998:	1c42      	adds	r2, r0, #1
   1699a:	4603      	mov	r3, r0
   1699c:	d1c9      	bne.n	16932 <gnss_interface_read+0x96>
   1699e:	b93c      	cbnz	r4, 169b0 <gnss_interface_read+0x114>
   169a0:	461c      	mov	r4, r3
   169a2:	2023      	movs	r0, #35	; 0x23
   169a4:	f7fb fc18 	bl	121d8 <bsd_os_errno_set>
   169a8:	4620      	mov	r0, r4
   169aa:	b037      	add	sp, #220	; 0xdc
   169ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b0:	9001      	str	r0, [sp, #4]
   169b2:	4620      	mov	r0, r4
   169b4:	f7fb fc10 	bl	121d8 <bsd_os_errno_set>
   169b8:	9b01      	ldr	r3, [sp, #4]
   169ba:	461c      	mov	r4, r3
   169bc:	4620      	mov	r0, r4
   169be:	b037      	add	sp, #220	; 0xdc
   169c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169c4:	a808      	add	r0, sp, #32
   169c6:	f006 f914 	bl	1cbf2 <strlen>
   169ca:	2302      	movs	r3, #2
   169cc:	1c44      	adds	r4, r0, #1
   169ce:	b2a4      	uxth	r4, r4
   169d0:	f808 3b08 	strb.w	r3, [r8], #8
   169d4:	4622      	mov	r2, r4
   169d6:	a908      	add	r1, sp, #32
   169d8:	4640      	mov	r0, r8
   169da:	f006 f93c 	bl	1cc56 <memcpy>
   169de:	3408      	adds	r4, #8
   169e0:	e7c2      	b.n	16968 <gnss_interface_read+0xcc>
   169e2:	bf00      	nop
   169e4:	49765443 	.word	0x49765443
   169e8:	200211dc 	.word	0x200211dc
   169ec:	200205a0 	.word	0x200205a0
   169f0:	200211e4 	.word	0x200211e4
   169f4:	2401      	movs	r4, #1
   169f6:	a809      	add	r0, sp, #36	; 0x24
   169f8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   169fa:	e9c8 0102 	strd	r0, r1, [r8, #8]
   169fe:	e9c8 2304 	strd	r2, r3, [r8, #16]
   16a02:	990d      	ldr	r1, [sp, #52]	; 0x34
   16a04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16a06:	f888 4000 	strb.w	r4, [r8]
   16a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16a0c:	f8c8 1018 	str.w	r1, [r8, #24]
   16a10:	9910      	ldr	r1, [sp, #64]	; 0x40
   16a12:	f8c8 201c 	str.w	r2, [r8, #28]
   16a16:	f8c8 3020 	str.w	r3, [r8, #32]
   16a1a:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   16a1e:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   16a22:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   16a26:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   16a2a:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   16a2e:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   16a32:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   16a36:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   16a3a:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   16a3e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   16a42:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   16a46:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   16a4a:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   16a4e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   16a52:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   16a56:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   16a5a:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   16a5e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   16a62:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   16a66:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16a68:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   16a6c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   16a70:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   16a74:	f3c3 210f 	ubfx	r1, r3, #8, #16
   16a78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16a7a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   16a7e:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   16a82:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   16a86:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   16a8a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   16a8e:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   16a92:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   16a96:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   16a9a:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   16a9e:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   16aa2:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   16aa6:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   16aaa:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   16aae:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   16ab2:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   16ab6:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   16aba:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   16abe:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   16ac2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   16ac6:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   16aca:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   16ace:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   16ad2:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   16ad6:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   16ada:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   16ade:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   16ae2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   16ae6:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   16aea:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   16aee:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   16af2:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   16af6:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   16afa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   16afc:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   16b00:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   16b04:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   16b08:	f3c2 220f 	ubfx	r2, r2, #8, #16
   16b0c:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   16b10:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   16b14:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   16b18:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   16b1c:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   16b20:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   16b24:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   16b28:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   16b2c:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   16b30:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   16b34:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   16b38:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   16b3c:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   16b40:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   16b44:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   16b48:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   16b4c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   16b50:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   16b54:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   16b58:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   16b5c:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   16b60:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   16b64:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   16b68:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   16b6c:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   16b70:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   16b74:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   16b78:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   16b7c:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   16b80:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   16b82:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   16b86:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   16b8a:	f3c3 210f 	ubfx	r1, r3, #8, #16
   16b8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   16b90:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   16b94:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   16b98:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   16b9c:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   16ba0:	f3c3 230f 	ubfx	r3, r3, #8, #16
   16ba4:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   16ba8:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   16bac:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   16bb0:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   16bb4:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   16bb8:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   16bbc:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   16bc0:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   16bc4:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   16bc8:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   16bcc:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   16bd0:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   16bd4:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   16bd8:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   16bdc:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   16be0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   16be4:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   16be8:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   16bec:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   16bf0:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   16bf4:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   16bf8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   16bfc:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   16c00:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   16c04:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   16c08:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   16c0c:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   16c10:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   16c14:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   16c16:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   16c1a:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   16c1e:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   16c22:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   16c26:	f3c2 220f 	ubfx	r2, r2, #8, #16
   16c2a:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   16c2e:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   16c32:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   16c36:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   16c3a:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   16c3e:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   16c42:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   16c46:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   16c4a:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   16c4e:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   16c52:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   16c56:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   16c5a:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   16c5e:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   16c62:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   16c66:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   16c6a:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   16c6e:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   16c72:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   16c76:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   16c7a:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   16c7e:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   16c82:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   16c86:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   16c8a:	24d8      	movs	r4, #216	; 0xd8
   16c8c:	e66c      	b.n	16968 <gnss_interface_read+0xcc>
   16c8e:	2039      	movs	r0, #57	; 0x39
   16c90:	f7fb faa2 	bl	121d8 <bsd_os_errno_set>
   16c94:	f04f 34ff 	mov.w	r4, #4294967295
   16c98:	e671      	b.n	1697e <gnss_interface_read+0xe2>
   16c9a:	2016      	movs	r0, #22
   16c9c:	f7fb fa9c 	bl	121d8 <bsd_os_errno_set>
   16ca0:	f04f 34ff 	mov.w	r4, #4294967295
   16ca4:	e66b      	b.n	1697e <gnss_interface_read+0xe2>
   16ca6:	2009      	movs	r0, #9
   16ca8:	f7fb fa96 	bl	121d8 <bsd_os_errno_set>
   16cac:	f04f 34ff 	mov.w	r4, #4294967295
   16cb0:	e665      	b.n	1697e <gnss_interface_read+0xe2>
   16cb2:	bf00      	nop

00016cb4 <gnss_interface_setopt>:
   16cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cb8:	4db3      	ldr	r5, [pc, #716]	; (16f88 <gnss_interface_setopt+0x2d4>)
   16cba:	b086      	sub	sp, #24
   16cbc:	682c      	ldr	r4, [r5, #0]
   16cbe:	b2a4      	uxth	r4, r4
   16cc0:	2c02      	cmp	r4, #2
   16cc2:	d00d      	beq.n	16ce0 <gnss_interface_setopt+0x2c>
   16cc4:	2a08      	cmp	r2, #8
   16cc6:	d00b      	beq.n	16ce0 <gnss_interface_setopt+0x2c>
   16cc8:	f1a2 040a 	sub.w	r4, r2, #10
   16ccc:	2c01      	cmp	r4, #1
   16cce:	d907      	bls.n	16ce0 <gnss_interface_setopt+0x2c>
   16cd0:	200e      	movs	r0, #14
   16cd2:	f7fb fa81 	bl	121d8 <bsd_os_errno_set>
   16cd6:	f04f 30ff 	mov.w	r0, #4294967295
   16cda:	b006      	add	sp, #24
   16cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16ce0:	682c      	ldr	r4, [r5, #0]
   16ce2:	0264      	lsls	r4, r4, #9
   16ce4:	f100 8149 	bmi.w	16f7a <gnss_interface_setopt+0x2c6>
   16ce8:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   16cec:	f040 8139 	bne.w	16f62 <gnss_interface_setopt+0x2ae>
   16cf0:	49a6      	ldr	r1, [pc, #664]	; (16f8c <gnss_interface_setopt+0x2d8>)
   16cf2:	4288      	cmp	r0, r1
   16cf4:	f040 813b 	bne.w	16f6e <gnss_interface_setopt+0x2ba>
   16cf8:	f1a2 010a 	sub.w	r1, r2, #10
   16cfc:	2901      	cmp	r1, #1
   16cfe:	d902      	bls.n	16d06 <gnss_interface_setopt+0x52>
   16d00:	2b00      	cmp	r3, #0
   16d02:	f000 8112 	beq.w	16f2a <gnss_interface_setopt+0x276>
   16d06:	3a01      	subs	r2, #1
   16d08:	2a0a      	cmp	r2, #10
   16d0a:	f200 810e 	bhi.w	16f2a <gnss_interface_setopt+0x276>
   16d0e:	e8df f012 	tbh	[pc, r2, lsl #1]
   16d12:	007f      	.short	0x007f
   16d14:	0098008c 	.word	0x0098008c
   16d18:	00ae00a2 	.word	0x00ae00a2
   16d1c:	00c500b9 	.word	0x00c500b9
   16d20:	00f300dd 	.word	0x00f300dd
   16d24:	000b00ff 	.word	0x000b00ff
   16d28:	682b      	ldr	r3, [r5, #0]
   16d2a:	b29b      	uxth	r3, r3
   16d2c:	2b04      	cmp	r3, #4
   16d2e:	d1cf      	bne.n	16cd0 <gnss_interface_setopt+0x1c>
   16d30:	2203      	movs	r2, #3
   16d32:	f241 0604 	movw	r6, #4100	; 0x1004
   16d36:	2300      	movs	r3, #0
   16d38:	4637      	mov	r7, r6
   16d3a:	f88d 2008 	strb.w	r2, [sp, #8]
   16d3e:	f88d 3009 	strb.w	r3, [sp, #9]
   16d42:	f88d 300a 	strb.w	r3, [sp, #10]
   16d46:	f88d 300b 	strb.w	r3, [sp, #11]
   16d4a:	f88d 300c 	strb.w	r3, [sp, #12]
   16d4e:	682b      	ldr	r3, [r5, #0]
   16d50:	2112      	movs	r1, #18
   16d52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   16d56:	4668      	mov	r0, sp
   16d58:	602b      	str	r3, [r5, #0]
   16d5a:	f002 fa65 	bl	19228 <rpc_gnss_client_request_alloc>
   16d5e:	4604      	mov	r4, r0
   16d60:	9800      	ldr	r0, [sp, #0]
   16d62:	2c00      	cmp	r4, #0
   16d64:	f040 80e7 	bne.w	16f36 <gnss_interface_setopt+0x282>
   16d68:	2800      	cmp	r0, #0
   16d6a:	f000 80eb 	beq.w	16f44 <gnss_interface_setopt+0x290>
   16d6e:	2212      	movs	r2, #18
   16d70:	f04f 0876 	mov.w	r8, #118	; 0x76
   16d74:	f04f 0e49 	mov.w	lr, #73	; 0x49
   16d78:	f04f 0a43 	mov.w	sl, #67	; 0x43
   16d7c:	f04f 0954 	mov.w	r9, #84	; 0x54
   16d80:	f8df c210 	ldr.w	ip, [pc, #528]	; 16f94 <gnss_interface_setopt+0x2e0>
   16d84:	a906      	add	r1, sp, #24
   16d86:	f8bc 3000 	ldrh.w	r3, [ip]
   16d8a:	f880 800e 	strb.w	r8, [r0, #14]
   16d8e:	3301      	adds	r3, #1
   16d90:	b29b      	uxth	r3, r3
   16d92:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   16d96:	f841 6d14 	str.w	r6, [r1, #-20]!
   16d9a:	7144      	strb	r4, [r0, #5]
   16d9c:	7184      	strb	r4, [r0, #6]
   16d9e:	71c4      	strb	r4, [r0, #7]
   16da0:	7204      	strb	r4, [r0, #8]
   16da2:	7244      	strb	r4, [r0, #9]
   16da4:	7284      	strb	r4, [r0, #10]
   16da6:	72c4      	strb	r4, [r0, #11]
   16da8:	7102      	strb	r2, [r0, #4]
   16daa:	f880 a00c 	strb.w	sl, [r0, #12]
   16dae:	f880 900d 	strb.w	r9, [r0, #13]
   16db2:	f880 e00f 	strb.w	lr, [r0, #15]
   16db6:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 16f98 <gnss_interface_setopt+0x2e4>
   16dba:	6800      	ldr	r0, [r0, #0]
   16dbc:	f8ac 3000 	strh.w	r3, [ip]
   16dc0:	f005 ff49 	bl	1cc56 <memcpy>
   16dc4:	4639      	mov	r1, r7
   16dc6:	9800      	ldr	r0, [sp, #0]
   16dc8:	f8c8 4000 	str.w	r4, [r8]
   16dcc:	f002 fa40 	bl	19250 <rpc_gnss_client_request_send>
   16dd0:	2800      	cmp	r0, #0
   16dd2:	f040 80bc 	bne.w	16f4e <gnss_interface_setopt+0x29a>
   16dd6:	4f6e      	ldr	r7, [pc, #440]	; (16f90 <gnss_interface_setopt+0x2dc>)
   16dd8:	4e6c      	ldr	r6, [pc, #432]	; (16f8c <gnss_interface_setopt+0x2d8>)
   16dda:	4639      	mov	r1, r7
   16ddc:	4630      	mov	r0, r6
   16dde:	f7fb f945 	bl	1206c <bsd_os_timedwait>
   16de2:	682c      	ldr	r4, [r5, #0]
   16de4:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   16de8:	d1f7      	bne.n	16dda <gnss_interface_setopt+0x126>
   16dea:	f8d8 0000 	ldr.w	r0, [r8]
   16dee:	b118      	cbz	r0, 16df8 <gnss_interface_setopt+0x144>
   16df0:	f002 fa4c 	bl	1928c <rpc_gnss_client_data_free>
   16df4:	f8c8 4000 	str.w	r4, [r8]
   16df8:	682b      	ldr	r3, [r5, #0]
   16dfa:	021b      	lsls	r3, r3, #8
   16dfc:	f140 808f 	bpl.w	16f1e <gnss_interface_setopt+0x26a>
   16e00:	2000      	movs	r0, #0
   16e02:	682b      	ldr	r3, [r5, #0]
   16e04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   16e08:	602b      	str	r3, [r5, #0]
   16e0a:	b006      	add	sp, #24
   16e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e12:	2a02      	cmp	r2, #2
   16e14:	f040 8089 	bne.w	16f2a <gnss_interface_setopt+0x276>
   16e18:	2208      	movs	r2, #8
   16e1a:	f241 1603 	movw	r6, #4355	; 0x1103
   16e1e:	881b      	ldrh	r3, [r3, #0]
   16e20:	9202      	str	r2, [sp, #8]
   16e22:	f8ad 300f 	strh.w	r3, [sp, #15]
   16e26:	4637      	mov	r7, r6
   16e28:	e791      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e2c:	2a02      	cmp	r2, #2
   16e2e:	d17c      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16e30:	2210      	movs	r2, #16
   16e32:	f241 1603 	movw	r6, #4355	; 0x1103
   16e36:	881b      	ldrh	r3, [r3, #0]
   16e38:	9202      	str	r2, [sp, #8]
   16e3a:	f8ad 3011 	strh.w	r3, [sp, #17]
   16e3e:	4637      	mov	r7, r6
   16e40:	e785      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e44:	2a01      	cmp	r2, #1
   16e46:	d170      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16e48:	781b      	ldrb	r3, [r3, #0]
   16e4a:	2b01      	cmp	r3, #1
   16e4c:	d16d      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16e4e:	f241 1603 	movw	r6, #4355	; 0x1103
   16e52:	4637      	mov	r7, r6
   16e54:	e77b      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16e56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e58:	2a02      	cmp	r2, #2
   16e5a:	d166      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16e5c:	2220      	movs	r2, #32
   16e5e:	f241 1603 	movw	r6, #4355	; 0x1103
   16e62:	881b      	ldrh	r3, [r3, #0]
   16e64:	9202      	str	r2, [sp, #8]
   16e66:	f8ad 3013 	strh.w	r3, [sp, #19]
   16e6a:	4637      	mov	r7, r6
   16e6c:	e76f      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e70:	2a01      	cmp	r2, #1
   16e72:	d15a      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16e74:	f241 1603 	movw	r6, #4355	; 0x1103
   16e78:	781b      	ldrb	r3, [r3, #0]
   16e7a:	9202      	str	r2, [sp, #8]
   16e7c:	f88d 300c 	strb.w	r3, [sp, #12]
   16e80:	4637      	mov	r7, r6
   16e82:	e764      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16e84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e86:	2a01      	cmp	r2, #1
   16e88:	d14f      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16e8a:	2202      	movs	r2, #2
   16e8c:	f241 1603 	movw	r6, #4355	; 0x1103
   16e90:	781b      	ldrb	r3, [r3, #0]
   16e92:	9202      	str	r2, [sp, #8]
   16e94:	f88d 300d 	strb.w	r3, [sp, #13]
   16e98:	4637      	mov	r7, r6
   16e9a:	e758      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16e9c:	682a      	ldr	r2, [r5, #0]
   16e9e:	b292      	uxth	r2, r2
   16ea0:	2a02      	cmp	r2, #2
   16ea2:	f47f af15 	bne.w	16cd0 <gnss_interface_setopt+0x1c>
   16ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16ea8:	2a04      	cmp	r2, #4
   16eaa:	d13e      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16eac:	2101      	movs	r1, #1
   16eae:	f241 0604 	movw	r6, #4100	; 0x1004
   16eb2:	682a      	ldr	r2, [r5, #0]
   16eb4:	6818      	ldr	r0, [r3, #0]
   16eb6:	0c13      	lsrs	r3, r2, #16
   16eb8:	041b      	lsls	r3, r3, #16
   16eba:	f043 0303 	orr.w	r3, r3, #3
   16ebe:	f8cd 0009 	str.w	r0, [sp, #9]
   16ec2:	602b      	str	r3, [r5, #0]
   16ec4:	f88d 1008 	strb.w	r1, [sp, #8]
   16ec8:	4637      	mov	r7, r6
   16eca:	e740      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16ecc:	682a      	ldr	r2, [r5, #0]
   16ece:	b292      	uxth	r2, r2
   16ed0:	2a04      	cmp	r2, #4
   16ed2:	d004      	beq.n	16ede <gnss_interface_setopt+0x22a>
   16ed4:	682a      	ldr	r2, [r5, #0]
   16ed6:	b292      	uxth	r2, r2
   16ed8:	2a02      	cmp	r2, #2
   16eda:	f47f aef9 	bne.w	16cd0 <gnss_interface_setopt+0x1c>
   16ede:	2200      	movs	r2, #0
   16ee0:	f88d 2008 	strb.w	r2, [sp, #8]
   16ee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16ee6:	2a04      	cmp	r2, #4
   16ee8:	d11f      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16eea:	f241 0604 	movw	r6, #4100	; 0x1004
   16eee:	681b      	ldr	r3, [r3, #0]
   16ef0:	4637      	mov	r7, r6
   16ef2:	f8cd 3009 	str.w	r3, [sp, #9]
   16ef6:	e72a      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16efa:	2a01      	cmp	r2, #1
   16efc:	d115      	bne.n	16f2a <gnss_interface_setopt+0x276>
   16efe:	2240      	movs	r2, #64	; 0x40
   16f00:	f241 1603 	movw	r6, #4355	; 0x1103
   16f04:	781b      	ldrb	r3, [r3, #0]
   16f06:	9202      	str	r2, [sp, #8]
   16f08:	f88d 3015 	strb.w	r3, [sp, #21]
   16f0c:	4637      	mov	r7, r6
   16f0e:	e71e      	b.n	16d4e <gnss_interface_setopt+0x9a>
   16f10:	682b      	ldr	r3, [r5, #0]
   16f12:	b29b      	uxth	r3, r3
   16f14:	2b04      	cmp	r3, #4
   16f16:	f47f aedb 	bne.w	16cd0 <gnss_interface_setopt+0x1c>
   16f1a:	2202      	movs	r2, #2
   16f1c:	e709      	b.n	16d32 <gnss_interface_setopt+0x7e>
   16f1e:	200e      	movs	r0, #14
   16f20:	f7fb f95a 	bl	121d8 <bsd_os_errno_set>
   16f24:	f04f 30ff 	mov.w	r0, #4294967295
   16f28:	e76b      	b.n	16e02 <gnss_interface_setopt+0x14e>
   16f2a:	2016      	movs	r0, #22
   16f2c:	f7fb f954 	bl	121d8 <bsd_os_errno_set>
   16f30:	f04f 30ff 	mov.w	r0, #4294967295
   16f34:	e6d1      	b.n	16cda <gnss_interface_setopt+0x26>
   16f36:	b128      	cbz	r0, 16f44 <gnss_interface_setopt+0x290>
   16f38:	6803      	ldr	r3, [r0, #0]
   16f3a:	b11b      	cbz	r3, 16f44 <gnss_interface_setopt+0x290>
   16f3c:	4618      	mov	r0, r3
   16f3e:	f002 f9a5 	bl	1928c <rpc_gnss_client_data_free>
   16f42:	9800      	ldr	r0, [sp, #0]
   16f44:	f002 f99a 	bl	1927c <rpc_gnss_client_message_free>
   16f48:	2023      	movs	r0, #35	; 0x23
   16f4a:	f7fb f945 	bl	121d8 <bsd_os_errno_set>
   16f4e:	682b      	ldr	r3, [r5, #0]
   16f50:	200e      	movs	r0, #14
   16f52:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   16f56:	602b      	str	r3, [r5, #0]
   16f58:	f7fb f93e 	bl	121d8 <bsd_os_errno_set>
   16f5c:	f04f 30ff 	mov.w	r0, #4294967295
   16f60:	e6bb      	b.n	16cda <gnss_interface_setopt+0x26>
   16f62:	202a      	movs	r0, #42	; 0x2a
   16f64:	f7fb f938 	bl	121d8 <bsd_os_errno_set>
   16f68:	f04f 30ff 	mov.w	r0, #4294967295
   16f6c:	e6b5      	b.n	16cda <gnss_interface_setopt+0x26>
   16f6e:	2009      	movs	r0, #9
   16f70:	f7fb f932 	bl	121d8 <bsd_os_errno_set>
   16f74:	f04f 30ff 	mov.w	r0, #4294967295
   16f78:	e6af      	b.n	16cda <gnss_interface_setopt+0x26>
   16f7a:	2073      	movs	r0, #115	; 0x73
   16f7c:	f7fb f92c 	bl	121d8 <bsd_os_errno_set>
   16f80:	f04f 30ff 	mov.w	r0, #4294967295
   16f84:	e6a9      	b.n	16cda <gnss_interface_setopt+0x26>
   16f86:	bf00      	nop
   16f88:	200211dc 	.word	0x200211dc
   16f8c:	49765443 	.word	0x49765443
   16f90:	200205a0 	.word	0x200205a0
   16f94:	20021c44 	.word	0x20021c44
   16f98:	200211e0 	.word	0x200211e0

00016f9c <gnss_interface_getopt>:
   16f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fa0:	4c81      	ldr	r4, [pc, #516]	; (171a8 <gnss_interface_getopt+0x20c>)
   16fa2:	b087      	sub	sp, #28
   16fa4:	6825      	ldr	r5, [r4, #0]
   16fa6:	4698      	mov	r8, r3
   16fa8:	b2ad      	uxth	r5, r5
   16faa:	2d02      	cmp	r5, #2
   16fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16fae:	f040 80dd 	bne.w	1716c <gnss_interface_getopt+0x1d0>
   16fb2:	6825      	ldr	r5, [r4, #0]
   16fb4:	03ee      	lsls	r6, r5, #15
   16fb6:	f100 80eb 	bmi.w	17190 <gnss_interface_getopt+0x1f4>
   16fba:	6825      	ldr	r5, [r4, #0]
   16fbc:	01ed      	lsls	r5, r5, #7
   16fbe:	f100 80ed 	bmi.w	1719c <gnss_interface_getopt+0x200>
   16fc2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   16fc6:	f040 80d7 	bne.w	17178 <gnss_interface_getopt+0x1dc>
   16fca:	4978      	ldr	r1, [pc, #480]	; (171ac <gnss_interface_getopt+0x210>)
   16fcc:	4288      	cmp	r0, r1
   16fce:	f040 80d9 	bne.w	17184 <gnss_interface_getopt+0x1e8>
   16fd2:	f1b8 0f00 	cmp.w	r8, #0
   16fd6:	d00b      	beq.n	16ff0 <gnss_interface_getopt+0x54>
   16fd8:	b153      	cbz	r3, 16ff0 <gnss_interface_getopt+0x54>
   16fda:	1e57      	subs	r7, r2, #1
   16fdc:	2f05      	cmp	r7, #5
   16fde:	d807      	bhi.n	16ff0 <gnss_interface_getopt+0x54>
   16fe0:	e8df f007 	tbb	[pc, r7]
   16fe4:	0f030f0f 	.word	0x0f030f0f
   16fe8:	0303      	.short	0x0303
   16fea:	681b      	ldr	r3, [r3, #0]
   16fec:	2b01      	cmp	r3, #1
   16fee:	d00b      	beq.n	17008 <gnss_interface_getopt+0x6c>
   16ff0:	2016      	movs	r0, #22
   16ff2:	f7fb f8f1 	bl	121d8 <bsd_os_errno_set>
   16ff6:	f04f 35ff 	mov.w	r5, #4294967295
   16ffa:	4628      	mov	r0, r5
   16ffc:	b007      	add	sp, #28
   16ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17002:	681b      	ldr	r3, [r3, #0]
   17004:	2b02      	cmp	r3, #2
   17006:	d1f3      	bne.n	16ff0 <gnss_interface_getopt+0x54>
   17008:	6823      	ldr	r3, [r4, #0]
   1700a:	2212      	movs	r2, #18
   1700c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   17010:	2100      	movs	r1, #0
   17012:	a801      	add	r0, sp, #4
   17014:	6023      	str	r3, [r4, #0]
   17016:	f005 fe49 	bl	1ccac <memset>
   1701a:	2112      	movs	r1, #18
   1701c:	4668      	mov	r0, sp
   1701e:	f002 f903 	bl	19228 <rpc_gnss_client_request_alloc>
   17022:	4605      	mov	r5, r0
   17024:	9800      	ldr	r0, [sp, #0]
   17026:	2d00      	cmp	r5, #0
   17028:	f040 808a 	bne.w	17140 <gnss_interface_getopt+0x1a4>
   1702c:	2800      	cmp	r0, #0
   1702e:	f000 808e 	beq.w	1714e <gnss_interface_getopt+0x1b2>
   17032:	f241 1602 	movw	r6, #4354	; 0x1102
   17036:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1703a:	2212      	movs	r2, #18
   1703c:	f04f 0976 	mov.w	r9, #118	; 0x76
   17040:	f04f 0b43 	mov.w	fp, #67	; 0x43
   17044:	f04f 0a54 	mov.w	sl, #84	; 0x54
   17048:	f8df c168 	ldr.w	ip, [pc, #360]	; 171b4 <gnss_interface_getopt+0x218>
   1704c:	f880 e00f 	strb.w	lr, [r0, #15]
   17050:	f8bc 3000 	ldrh.w	r3, [ip]
   17054:	f880 900e 	strb.w	r9, [r0, #14]
   17058:	3301      	adds	r3, #1
   1705a:	b29b      	uxth	r3, r3
   1705c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   17060:	f8cd e004 	str.w	lr, [sp, #4]
   17064:	7145      	strb	r5, [r0, #5]
   17066:	7185      	strb	r5, [r0, #6]
   17068:	71c5      	strb	r5, [r0, #7]
   1706a:	7205      	strb	r5, [r0, #8]
   1706c:	7245      	strb	r5, [r0, #9]
   1706e:	7285      	strb	r5, [r0, #10]
   17070:	72c5      	strb	r5, [r0, #11]
   17072:	a901      	add	r1, sp, #4
   17074:	7102      	strb	r2, [r0, #4]
   17076:	f880 b00c 	strb.w	fp, [r0, #12]
   1707a:	f880 a00d 	strb.w	sl, [r0, #13]
   1707e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 171b8 <gnss_interface_getopt+0x21c>
   17082:	6800      	ldr	r0, [r0, #0]
   17084:	f8ac 3000 	strh.w	r3, [ip]
   17088:	f005 fde5 	bl	1cc56 <memcpy>
   1708c:	4631      	mov	r1, r6
   1708e:	9800      	ldr	r0, [sp, #0]
   17090:	f8c9 5000 	str.w	r5, [r9]
   17094:	f002 f8dc 	bl	19250 <rpc_gnss_client_request_send>
   17098:	2800      	cmp	r0, #0
   1709a:	d15d      	bne.n	17158 <gnss_interface_getopt+0x1bc>
   1709c:	4e44      	ldr	r6, [pc, #272]	; (171b0 <gnss_interface_getopt+0x214>)
   1709e:	4d43      	ldr	r5, [pc, #268]	; (171ac <gnss_interface_getopt+0x210>)
   170a0:	4631      	mov	r1, r6
   170a2:	4628      	mov	r0, r5
   170a4:	f7fa ffe2 	bl	1206c <bsd_os_timedwait>
   170a8:	6823      	ldr	r3, [r4, #0]
   170aa:	01db      	lsls	r3, r3, #7
   170ac:	d4f8      	bmi.n	170a0 <gnss_interface_getopt+0x104>
   170ae:	f8d9 0000 	ldr.w	r0, [r9]
   170b2:	b1d8      	cbz	r0, 170ec <gnss_interface_getopt+0x150>
   170b4:	6825      	ldr	r5, [r4, #0]
   170b6:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   170ba:	d00f      	beq.n	170dc <gnss_interface_getopt+0x140>
   170bc:	2f05      	cmp	r7, #5
   170be:	d837      	bhi.n	17130 <gnss_interface_getopt+0x194>
   170c0:	e8df f007 	tbb	[pc, r7]
   170c4:	2b26201a 	.word	0x2b26201a
   170c8:	0331      	.short	0x0331
   170ca:	2500      	movs	r5, #0
   170cc:	7b43      	ldrb	r3, [r0, #13]
   170ce:	f888 3000 	strb.w	r3, [r8]
   170d2:	f002 f8db 	bl	1928c <rpc_gnss_client_data_free>
   170d6:	2300      	movs	r3, #0
   170d8:	f8c9 3000 	str.w	r3, [r9]
   170dc:	6823      	ldr	r3, [r4, #0]
   170de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   170e2:	6023      	str	r3, [r4, #0]
   170e4:	4628      	mov	r0, r5
   170e6:	b007      	add	sp, #28
   170e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170ec:	6823      	ldr	r3, [r4, #0]
   170ee:	4605      	mov	r5, r0
   170f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   170f4:	6023      	str	r3, [r4, #0]
   170f6:	e7f5      	b.n	170e4 <gnss_interface_getopt+0x148>
   170f8:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   170fc:	2500      	movs	r5, #0
   170fe:	f8a8 3000 	strh.w	r3, [r8]
   17102:	e7e6      	b.n	170d2 <gnss_interface_getopt+0x136>
   17104:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   17108:	2500      	movs	r5, #0
   1710a:	f8a8 3000 	strh.w	r3, [r8]
   1710e:	e7e0      	b.n	170d2 <gnss_interface_getopt+0x136>
   17110:	7b83      	ldrb	r3, [r0, #14]
   17112:	2500      	movs	r5, #0
   17114:	f888 3000 	strb.w	r3, [r8]
   17118:	e7db      	b.n	170d2 <gnss_interface_getopt+0x136>
   1711a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1711e:	2500      	movs	r5, #0
   17120:	f8a8 3000 	strh.w	r3, [r8]
   17124:	e7d5      	b.n	170d2 <gnss_interface_getopt+0x136>
   17126:	7b03      	ldrb	r3, [r0, #12]
   17128:	2500      	movs	r5, #0
   1712a:	f888 3000 	strb.w	r3, [r8]
   1712e:	e7d0      	b.n	170d2 <gnss_interface_getopt+0x136>
   17130:	2016      	movs	r0, #22
   17132:	f7fb f851 	bl	121d8 <bsd_os_errno_set>
   17136:	f04f 35ff 	mov.w	r5, #4294967295
   1713a:	f8d9 0000 	ldr.w	r0, [r9]
   1713e:	e7c8      	b.n	170d2 <gnss_interface_getopt+0x136>
   17140:	b128      	cbz	r0, 1714e <gnss_interface_getopt+0x1b2>
   17142:	6803      	ldr	r3, [r0, #0]
   17144:	b11b      	cbz	r3, 1714e <gnss_interface_getopt+0x1b2>
   17146:	4618      	mov	r0, r3
   17148:	f002 f8a0 	bl	1928c <rpc_gnss_client_data_free>
   1714c:	9800      	ldr	r0, [sp, #0]
   1714e:	f002 f895 	bl	1927c <rpc_gnss_client_message_free>
   17152:	2023      	movs	r0, #35	; 0x23
   17154:	f7fb f840 	bl	121d8 <bsd_os_errno_set>
   17158:	6823      	ldr	r3, [r4, #0]
   1715a:	200e      	movs	r0, #14
   1715c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17160:	6023      	str	r3, [r4, #0]
   17162:	f04f 35ff 	mov.w	r5, #4294967295
   17166:	f7fb f837 	bl	121d8 <bsd_os_errno_set>
   1716a:	e746      	b.n	16ffa <gnss_interface_getopt+0x5e>
   1716c:	200e      	movs	r0, #14
   1716e:	f7fb f833 	bl	121d8 <bsd_os_errno_set>
   17172:	f04f 35ff 	mov.w	r5, #4294967295
   17176:	e740      	b.n	16ffa <gnss_interface_getopt+0x5e>
   17178:	202a      	movs	r0, #42	; 0x2a
   1717a:	f7fb f82d 	bl	121d8 <bsd_os_errno_set>
   1717e:	f04f 35ff 	mov.w	r5, #4294967295
   17182:	e73a      	b.n	16ffa <gnss_interface_getopt+0x5e>
   17184:	2009      	movs	r0, #9
   17186:	f7fb f827 	bl	121d8 <bsd_os_errno_set>
   1718a:	f04f 35ff 	mov.w	r5, #4294967295
   1718e:	e734      	b.n	16ffa <gnss_interface_getopt+0x5e>
   17190:	2005      	movs	r0, #5
   17192:	f7fb f821 	bl	121d8 <bsd_os_errno_set>
   17196:	f04f 35ff 	mov.w	r5, #4294967295
   1719a:	e72e      	b.n	16ffa <gnss_interface_getopt+0x5e>
   1719c:	2073      	movs	r0, #115	; 0x73
   1719e:	f7fb f81b 	bl	121d8 <bsd_os_errno_set>
   171a2:	f04f 35ff 	mov.w	r5, #4294967295
   171a6:	e728      	b.n	16ffa <gnss_interface_getopt+0x5e>
   171a8:	200211dc 	.word	0x200211dc
   171ac:	49765443 	.word	0x49765443
   171b0:	200205a0 	.word	0x200205a0
   171b4:	20021c44 	.word	0x20021c44
   171b8:	200211e0 	.word	0x200211e0

000171bc <gnss_interface_init>:
   171bc:	2100      	movs	r1, #0
   171be:	b538      	push	{r3, r4, r5, lr}
   171c0:	4c09      	ldr	r4, [pc, #36]	; (171e8 <gnss_interface_init+0x2c>)
   171c2:	4d0a      	ldr	r5, [pc, #40]	; (171ec <gnss_interface_init+0x30>)
   171c4:	6822      	ldr	r2, [r4, #0]
   171c6:	480a      	ldr	r0, [pc, #40]	; (171f0 <gnss_interface_init+0x34>)
   171c8:	4b0a      	ldr	r3, [pc, #40]	; (171f4 <gnss_interface_init+0x38>)
   171ca:	402a      	ands	r2, r5
   171cc:	6022      	str	r2, [r4, #0]
   171ce:	8001      	strh	r1, [r0, #0]
   171d0:	6019      	str	r1, [r3, #0]
   171d2:	f002 f823 	bl	1921c <rpc_gnss_client_init>
   171d6:	b928      	cbnz	r0, 171e4 <gnss_interface_init+0x28>
   171d8:	6823      	ldr	r3, [r4, #0]
   171da:	402b      	ands	r3, r5
   171dc:	f043 0301 	orr.w	r3, r3, #1
   171e0:	6023      	str	r3, [r4, #0]
   171e2:	bd38      	pop	{r3, r4, r5, pc}
   171e4:	2003      	movs	r0, #3
   171e6:	bd38      	pop	{r3, r4, r5, pc}
   171e8:	200211dc 	.word	0x200211dc
   171ec:	ffff0000 	.word	0xffff0000
   171f0:	20021c44 	.word	0x20021c44
   171f4:	200211e0 	.word	0x200211e0

000171f8 <gnss_interface_open>:
   171f8:	2902      	cmp	r1, #2
   171fa:	b510      	push	{r4, lr}
   171fc:	d121      	bne.n	17242 <gnss_interface_open+0x4a>
   171fe:	4c17      	ldr	r4, [pc, #92]	; (1725c <gnss_interface_open+0x64>)
   17200:	6823      	ldr	r3, [r4, #0]
   17202:	b29b      	uxth	r3, r3
   17204:	2b01      	cmp	r3, #1
   17206:	d116      	bne.n	17236 <gnss_interface_open+0x3e>
   17208:	6823      	ldr	r3, [r4, #0]
   1720a:	4608      	mov	r0, r1
   1720c:	0c1b      	lsrs	r3, r3, #16
   1720e:	041b      	lsls	r3, r3, #16
   17210:	f043 0302 	orr.w	r3, r3, #2
   17214:	2200      	movs	r2, #0
   17216:	4912      	ldr	r1, [pc, #72]	; (17260 <gnss_interface_open+0x68>)
   17218:	6023      	str	r3, [r4, #0]
   1721a:	f002 f921 	bl	19460 <packet_handler_create>
   1721e:	4a11      	ldr	r2, [pc, #68]	; (17264 <gnss_interface_open+0x6c>)
   17220:	6010      	str	r0, [r2, #0]
   17222:	b1a0      	cbz	r0, 1724e <gnss_interface_open+0x56>
   17224:	6823      	ldr	r3, [r4, #0]
   17226:	6802      	ldr	r2, [r0, #0]
   17228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1722c:	6812      	ldr	r2, [r2, #0]
   1722e:	6023      	str	r3, [r4, #0]
   17230:	4790      	blx	r2
   17232:	480d      	ldr	r0, [pc, #52]	; (17268 <gnss_interface_open+0x70>)
   17234:	bd10      	pop	{r4, pc}
   17236:	2005      	movs	r0, #5
   17238:	f7fa ffce 	bl	121d8 <bsd_os_errno_set>
   1723c:	f04f 30ff 	mov.w	r0, #4294967295
   17240:	bd10      	pop	{r4, pc}
   17242:	2029      	movs	r0, #41	; 0x29
   17244:	f7fa ffc8 	bl	121d8 <bsd_os_errno_set>
   17248:	f04f 30ff 	mov.w	r0, #4294967295
   1724c:	bd10      	pop	{r4, pc}
   1724e:	200e      	movs	r0, #14
   17250:	f7fa ffc2 	bl	121d8 <bsd_os_errno_set>
   17254:	f04f 30ff 	mov.w	r0, #4294967295
   17258:	bd10      	pop	{r4, pc}
   1725a:	bf00      	nop
   1725c:	200211dc 	.word	0x200211dc
   17260:	000164f1 	.word	0x000164f1
   17264:	200211e4 	.word	0x200211e4
   17268:	49765443 	.word	0x49765443

0001726c <gnss_interface_close>:
   1726c:	b530      	push	{r4, r5, lr}
   1726e:	4b15      	ldr	r3, [pc, #84]	; (172c4 <gnss_interface_close+0x58>)
   17270:	b085      	sub	sp, #20
   17272:	4298      	cmp	r0, r3
   17274:	d11f      	bne.n	172b6 <gnss_interface_close+0x4a>
   17276:	4c14      	ldr	r4, [pc, #80]	; (172c8 <gnss_interface_close+0x5c>)
   17278:	6822      	ldr	r2, [r4, #0]
   1727a:	b292      	uxth	r2, r2
   1727c:	2a04      	cmp	r2, #4
   1727e:	d00f      	beq.n	172a0 <gnss_interface_close+0x34>
   17280:	4d12      	ldr	r5, [pc, #72]	; (172cc <gnss_interface_close+0x60>)
   17282:	6828      	ldr	r0, [r5, #0]
   17284:	b118      	cbz	r0, 1728e <gnss_interface_close+0x22>
   17286:	f002 f90b 	bl	194a0 <packet_handler_delete>
   1728a:	2300      	movs	r3, #0
   1728c:	602b      	str	r3, [r5, #0]
   1728e:	2000      	movs	r0, #0
   17290:	6823      	ldr	r3, [r4, #0]
   17292:	0c1b      	lsrs	r3, r3, #16
   17294:	041b      	lsls	r3, r3, #16
   17296:	f043 0301 	orr.w	r3, r3, #1
   1729a:	6023      	str	r3, [r4, #0]
   1729c:	b005      	add	sp, #20
   1729e:	bd30      	pop	{r4, r5, pc}
   172a0:	2100      	movs	r1, #0
   172a2:	ab04      	add	r3, sp, #16
   172a4:	f843 1d04 	str.w	r1, [r3, #-4]!
   172a8:	9200      	str	r2, [sp, #0]
   172aa:	f44f 7101 	mov.w	r1, #516	; 0x204
   172ae:	2208      	movs	r2, #8
   172b0:	f001 fe34 	bl	18f1c <nrf_setsockopt>
   172b4:	e7e4      	b.n	17280 <gnss_interface_close+0x14>
   172b6:	2009      	movs	r0, #9
   172b8:	f7fa ff8e 	bl	121d8 <bsd_os_errno_set>
   172bc:	f04f 30ff 	mov.w	r0, #4294967295
   172c0:	e7ec      	b.n	1729c <gnss_interface_close+0x30>
   172c2:	bf00      	nop
   172c4:	49765443 	.word	0x49765443
   172c8:	200211dc 	.word	0x200211dc
   172cc:	200211e4 	.word	0x200211e4

000172d0 <rpc_logobj_client_evt_handler>:
   172d0:	b120      	cbz	r0, 172dc <rpc_logobj_client_evt_handler+0xc>
   172d2:	f850 1b08 	ldr.w	r1, [r0], #8
   172d6:	0c09      	lsrs	r1, r1, #16
   172d8:	f7fb bbaa 	b.w	12a30 <logobj_event_handler>
   172dc:	4770      	bx	lr
   172de:	bf00      	nop

000172e0 <rpc_logobj_client_init>:
   172e0:	4801      	ldr	r0, [pc, #4]	; (172e8 <rpc_logobj_client_init+0x8>)
   172e2:	f7ff b847 	b.w	16374 <rpc_client_register>
   172e6:	bf00      	nop
   172e8:	00020e4c 	.word	0x00020e4c

000172ec <rpc_logobj_client_request_alloc>:
   172ec:	2300      	movs	r3, #0
   172ee:	b510      	push	{r4, lr}
   172f0:	b082      	sub	sp, #8
   172f2:	9301      	str	r3, [sp, #4]
   172f4:	b961      	cbnz	r1, 17310 <rpc_logobj_client_request_alloc+0x24>
   172f6:	b170      	cbz	r0, 17316 <rpc_logobj_client_request_alloc+0x2a>
   172f8:	4604      	mov	r4, r0
   172fa:	aa01      	add	r2, sp, #4
   172fc:	2009      	movs	r0, #9
   172fe:	f7ff f8b3 	bl	16468 <rpc_message_alloc>
   17302:	b918      	cbnz	r0, 1730c <rpc_logobj_client_request_alloc+0x20>
   17304:	9b01      	ldr	r3, [sp, #4]
   17306:	b10b      	cbz	r3, 1730c <rpc_logobj_client_request_alloc+0x20>
   17308:	3308      	adds	r3, #8
   1730a:	6023      	str	r3, [r4, #0]
   1730c:	b002      	add	sp, #8
   1730e:	bd10      	pop	{r4, pc}
   17310:	200f      	movs	r0, #15
   17312:	b002      	add	sp, #8
   17314:	bd10      	pop	{r4, pc}
   17316:	200e      	movs	r0, #14
   17318:	b002      	add	sp, #8
   1731a:	bd10      	pop	{r4, pc}

0001731c <rpc_logobj_client_request_send>:
   1731c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   17320:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   17324:	d10b      	bne.n	1733e <rpc_logobj_client_request_send+0x22>
   17326:	b160      	cbz	r0, 17342 <rpc_logobj_client_request_send+0x26>
   17328:	4603      	mov	r3, r0
   1732a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1732e:	2009      	movs	r0, #9
   17330:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   17334:	f843 1d08 	str.w	r1, [r3, #-8]!
   17338:	4619      	mov	r1, r3
   1733a:	f7ff b885 	b.w	16448 <rpc_message_send>
   1733e:	200f      	movs	r0, #15
   17340:	4770      	bx	lr
   17342:	200e      	movs	r0, #14
   17344:	4770      	bx	lr
   17346:	bf00      	nop

00017348 <rpc_logobj_client_message_free>:
   17348:	b120      	cbz	r0, 17354 <rpc_logobj_client_message_free+0xc>
   1734a:	f1a0 0108 	sub.w	r1, r0, #8
   1734e:	2009      	movs	r0, #9
   17350:	f7ff b8b6 	b.w	164c0 <rpc_message_free>
   17354:	200e      	movs	r0, #14
   17356:	4770      	bx	lr

00017358 <rpc_logobj_client_data_free>:
   17358:	b118      	cbz	r0, 17362 <rpc_logobj_client_data_free+0xa>
   1735a:	4601      	mov	r1, r0
   1735c:	2009      	movs	r0, #9
   1735e:	f7ff b8bb 	b.w	164d8 <rpc_message_data_free>
   17362:	200e      	movs	r0, #14
   17364:	4770      	bx	lr
   17366:	bf00      	nop

00017368 <dfu_client_event_handler>:
   17368:	f850 1b08 	ldr.w	r1, [r0], #8
   1736c:	0c09      	lsrs	r1, r1, #16
   1736e:	f002 bd9d 	b.w	19eac <rpc_dfu_event_handler>
   17372:	bf00      	nop

00017374 <rpc_dfu_client_init>:
   17374:	4801      	ldr	r0, [pc, #4]	; (1737c <rpc_dfu_client_init+0x8>)
   17376:	f7fe bffd 	b.w	16374 <rpc_client_register>
   1737a:	bf00      	nop
   1737c:	00020e5c 	.word	0x00020e5c

00017380 <rpc_dfu_client_request_alloc>:
   17380:	2300      	movs	r3, #0
   17382:	b510      	push	{r4, lr}
   17384:	b082      	sub	sp, #8
   17386:	9301      	str	r3, [sp, #4]
   17388:	b158      	cbz	r0, 173a2 <rpc_dfu_client_request_alloc+0x22>
   1738a:	4604      	mov	r4, r0
   1738c:	aa01      	add	r2, sp, #4
   1738e:	2006      	movs	r0, #6
   17390:	f7ff f86a 	bl	16468 <rpc_message_alloc>
   17394:	b918      	cbnz	r0, 1739e <rpc_dfu_client_request_alloc+0x1e>
   17396:	9b01      	ldr	r3, [sp, #4]
   17398:	b10b      	cbz	r3, 1739e <rpc_dfu_client_request_alloc+0x1e>
   1739a:	3308      	adds	r3, #8
   1739c:	6023      	str	r3, [r4, #0]
   1739e:	b002      	add	sp, #8
   173a0:	bd10      	pop	{r4, pc}
   173a2:	2007      	movs	r0, #7
   173a4:	b002      	add	sp, #8
   173a6:	bd10      	pop	{r4, pc}

000173a8 <rpc_dfu_client_request_send>:
   173a8:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   173ac:	d10b      	bne.n	173c6 <rpc_dfu_client_request_send+0x1e>
   173ae:	b160      	cbz	r0, 173ca <rpc_dfu_client_request_send+0x22>
   173b0:	4603      	mov	r3, r0
   173b2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   173b6:	2006      	movs	r0, #6
   173b8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   173bc:	f843 1d08 	str.w	r1, [r3, #-8]!
   173c0:	4619      	mov	r1, r3
   173c2:	f7ff b841 	b.w	16448 <rpc_message_send>
   173c6:	200f      	movs	r0, #15
   173c8:	4770      	bx	lr
   173ca:	2007      	movs	r0, #7
   173cc:	4770      	bx	lr
   173ce:	bf00      	nop

000173d0 <rpc_dfu_client_message_free>:
   173d0:	b120      	cbz	r0, 173dc <rpc_dfu_client_message_free+0xc>
   173d2:	f1a0 0108 	sub.w	r1, r0, #8
   173d6:	2006      	movs	r0, #6
   173d8:	f7ff b872 	b.w	164c0 <rpc_message_free>
   173dc:	2007      	movs	r0, #7
   173de:	4770      	bx	lr

000173e0 <rpc_dfu_client_data_free>:
   173e0:	b118      	cbz	r0, 173ea <rpc_dfu_client_data_free+0xa>
   173e2:	4601      	mov	r1, r0
   173e4:	2006      	movs	r0, #6
   173e6:	f7ff b877 	b.w	164d8 <rpc_message_data_free>
   173ea:	2007      	movs	r0, #7
   173ec:	4770      	bx	lr
   173ee:	bf00      	nop

000173f0 <packet_free_cb>:
   173f0:	6800      	ldr	r0, [r0, #0]
   173f2:	f003 bac1 	b.w	1a978 <rpc_at_client_data_free>
   173f6:	bf00      	nop

000173f8 <at_interface_write>:
   173f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   173fc:	b083      	sub	sp, #12
   173fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   17400:	2c00      	cmp	r4, #0
   17402:	d166      	bne.n	174d2 <at_interface_write+0xda>
   17404:	4688      	mov	r8, r1
   17406:	4615      	mov	r5, r2
   17408:	461e      	mov	r6, r3
   1740a:	4607      	mov	r7, r0
   1740c:	f003 f986 	bl	1a71c <interface_socket_from_handle_get>
   17410:	4604      	mov	r4, r0
   17412:	2e00      	cmp	r6, #0
   17414:	d137      	bne.n	17486 <at_interface_write+0x8e>
   17416:	2800      	cmp	r0, #0
   17418:	d061      	beq.n	174de <at_interface_write+0xe6>
   1741a:	6803      	ldr	r3, [r0, #0]
   1741c:	039b      	lsls	r3, r3, #14
   1741e:	d55e      	bpl.n	174de <at_interface_write+0xe6>
   17420:	6803      	ldr	r3, [r0, #0]
   17422:	4629      	mov	r1, r5
   17424:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17428:	6003      	str	r3, [r0, #0]
   1742a:	6803      	ldr	r3, [r0, #0]
   1742c:	4668      	mov	r0, sp
   1742e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   17432:	6023      	str	r3, [r4, #0]
   17434:	f003 fa76 	bl	1a924 <rpc_at_client_request_alloc>
   17438:	4606      	mov	r6, r0
   1743a:	4638      	mov	r0, r7
   1743c:	f003 f96e 	bl	1a71c <interface_socket_from_handle_get>
   17440:	4681      	mov	r9, r0
   17442:	2e00      	cmp	r6, #0
   17444:	d13f      	bne.n	174c6 <at_interface_write+0xce>
   17446:	2304      	movs	r3, #4
   17448:	9800      	ldr	r0, [sp, #0]
   1744a:	7203      	strb	r3, [r0, #8]
   1744c:	7246      	strb	r6, [r0, #9]
   1744e:	7286      	strb	r6, [r0, #10]
   17450:	72c6      	strb	r6, [r0, #11]
   17452:	60c7      	str	r7, [r0, #12]
   17454:	b9fd      	cbnz	r5, 17496 <at_interface_write+0x9e>
   17456:	2101      	movs	r1, #1
   17458:	f003 fa78 	bl	1a94c <rpc_at_client_request_send>
   1745c:	bb50      	cbnz	r0, 174b4 <at_interface_write+0xbc>
   1745e:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   17462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17466:	2900      	cmp	r1, #0
   17468:	bf08      	it	eq
   1746a:	f04f 31ff 	moveq.w	r1, #4294967295
   1746e:	ab02      	add	r3, sp, #8
   17470:	f843 1d04 	str.w	r1, [r3, #-4]!
   17474:	4638      	mov	r0, r7
   17476:	4611      	mov	r1, r2
   17478:	f003 f8d0 	bl	1a61c <interface_socket_wait>
   1747c:	b9f0      	cbnz	r0, 174bc <at_interface_write+0xc4>
   1747e:	4628      	mov	r0, r5
   17480:	b003      	add	sp, #12
   17482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17486:	b360      	cbz	r0, 174e2 <at_interface_write+0xea>
   17488:	6803      	ldr	r3, [r0, #0]
   1748a:	202d      	movs	r0, #45	; 0x2d
   1748c:	f7fa fea4 	bl	121d8 <bsd_os_errno_set>
   17490:	f04f 30ff 	mov.w	r0, #4294967295
   17494:	e7f4      	b.n	17480 <at_interface_write+0x88>
   17496:	4641      	mov	r1, r8
   17498:	6800      	ldr	r0, [r0, #0]
   1749a:	462a      	mov	r2, r5
   1749c:	f005 fbdb 	bl	1cc56 <memcpy>
   174a0:	2101      	movs	r1, #1
   174a2:	9800      	ldr	r0, [sp, #0]
   174a4:	f003 fa52 	bl	1a94c <rpc_at_client_request_send>
   174a8:	2800      	cmp	r0, #0
   174aa:	d0d8      	beq.n	1745e <at_interface_write+0x66>
   174ac:	9b00      	ldr	r3, [sp, #0]
   174ae:	6818      	ldr	r0, [r3, #0]
   174b0:	f003 fa62 	bl	1a978 <rpc_at_client_data_free>
   174b4:	9800      	ldr	r0, [sp, #0]
   174b6:	f003 fa57 	bl	1a968 <rpc_at_client_message_free>
   174ba:	2023      	movs	r0, #35	; 0x23
   174bc:	6823      	ldr	r3, [r4, #0]
   174be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   174c2:	6023      	str	r3, [r4, #0]
   174c4:	e7e2      	b.n	1748c <at_interface_write+0x94>
   174c6:	6823      	ldr	r3, [r4, #0]
   174c8:	200c      	movs	r0, #12
   174ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   174ce:	6023      	str	r3, [r4, #0]
   174d0:	e7dc      	b.n	1748c <at_interface_write+0x94>
   174d2:	2038      	movs	r0, #56	; 0x38
   174d4:	f7fa fe80 	bl	121d8 <bsd_os_errno_set>
   174d8:	f04f 30ff 	mov.w	r0, #4294967295
   174dc:	e7d0      	b.n	17480 <at_interface_write+0x88>
   174de:	2016      	movs	r0, #22
   174e0:	e7d4      	b.n	1748c <at_interface_write+0x94>
   174e2:	202d      	movs	r0, #45	; 0x2d
   174e4:	e7d2      	b.n	1748c <at_interface_write+0x94>
   174e6:	bf00      	nop

000174e8 <at_interface_init>:
   174e8:	b508      	push	{r3, lr}
   174ea:	f003 fa15 	bl	1a918 <rpc_at_client_init>
   174ee:	b910      	cbnz	r0, 174f6 <at_interface_init+0xe>
   174f0:	2201      	movs	r2, #1
   174f2:	4b01      	ldr	r3, [pc, #4]	; (174f8 <at_interface_init+0x10>)
   174f4:	701a      	strb	r2, [r3, #0]
   174f6:	bd08      	pop	{r3, pc}
   174f8:	20021d74 	.word	0x20021d74

000174fc <at_interface_open>:
   174fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17500:	2600      	movs	r6, #0
   17502:	4b2e      	ldr	r3, [pc, #184]	; (175bc <at_interface_open+0xc0>)
   17504:	b084      	sub	sp, #16
   17506:	781b      	ldrb	r3, [r3, #0]
   17508:	9601      	str	r6, [sp, #4]
   1750a:	2b00      	cmp	r3, #0
   1750c:	d050      	beq.n	175b0 <at_interface_open+0xb4>
   1750e:	2902      	cmp	r1, #2
   17510:	460d      	mov	r5, r1
   17512:	d147      	bne.n	175a4 <at_interface_open+0xa8>
   17514:	4680      	mov	r8, r0
   17516:	4617      	mov	r7, r2
   17518:	a801      	add	r0, sp, #4
   1751a:	4a29      	ldr	r2, [pc, #164]	; (175c0 <at_interface_open+0xc4>)
   1751c:	f002 ffcc 	bl	1a4b8 <interface_socket_allocate>
   17520:	9b01      	ldr	r3, [sp, #4]
   17522:	4604      	mov	r4, r0
   17524:	b35b      	cbz	r3, 1757e <at_interface_open+0x82>
   17526:	615f      	str	r7, [r3, #20]
   17528:	4631      	mov	r1, r6
   1752a:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1752e:	a802      	add	r0, sp, #8
   17530:	f003 f9f8 	bl	1a924 <rpc_at_client_request_alloc>
   17534:	4606      	mov	r6, r0
   17536:	4620      	mov	r0, r4
   17538:	f003 f8f0 	bl	1a71c <interface_socket_from_handle_get>
   1753c:	4607      	mov	r7, r0
   1753e:	bb16      	cbnz	r6, 17586 <at_interface_open+0x8a>
   17540:	2304      	movs	r3, #4
   17542:	9802      	ldr	r0, [sp, #8]
   17544:	2105      	movs	r1, #5
   17546:	7203      	strb	r3, [r0, #8]
   17548:	7246      	strb	r6, [r0, #9]
   1754a:	7286      	strb	r6, [r0, #10]
   1754c:	72c6      	strb	r6, [r0, #11]
   1754e:	60c4      	str	r4, [r0, #12]
   17550:	f003 f9fc 	bl	1a94c <rpc_at_client_request_send>
   17554:	bb08      	cbnz	r0, 1759a <at_interface_open+0x9e>
   17556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17558:	ab04      	add	r3, sp, #16
   1755a:	2a00      	cmp	r2, #0
   1755c:	bf08      	it	eq
   1755e:	f04f 32ff 	moveq.w	r2, #4294967295
   17562:	4629      	mov	r1, r5
   17564:	f843 2d04 	str.w	r2, [r3, #-4]!
   17568:	4620      	mov	r0, r4
   1756a:	462a      	mov	r2, r5
   1756c:	f003 f856 	bl	1a61c <interface_socket_wait>
   17570:	4605      	mov	r5, r0
   17572:	b948      	cbnz	r0, 17588 <at_interface_open+0x8c>
   17574:	9a01      	ldr	r2, [sp, #4]
   17576:	6813      	ldr	r3, [r2, #0]
   17578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1757c:	6013      	str	r3, [r2, #0]
   1757e:	4620      	mov	r0, r4
   17580:	b004      	add	sp, #16
   17582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17586:	250c      	movs	r5, #12
   17588:	4620      	mov	r0, r4
   1758a:	f002 fff9 	bl	1a580 <interface_socket_free>
   1758e:	4628      	mov	r0, r5
   17590:	f7fa fe22 	bl	121d8 <bsd_os_errno_set>
   17594:	f04f 34ff 	mov.w	r4, #4294967295
   17598:	e7f1      	b.n	1757e <at_interface_open+0x82>
   1759a:	9802      	ldr	r0, [sp, #8]
   1759c:	f003 f9e4 	bl	1a968 <rpc_at_client_message_free>
   175a0:	2523      	movs	r5, #35	; 0x23
   175a2:	e7f1      	b.n	17588 <at_interface_open+0x8c>
   175a4:	2029      	movs	r0, #41	; 0x29
   175a6:	f7fa fe17 	bl	121d8 <bsd_os_errno_set>
   175aa:	f04f 34ff 	mov.w	r4, #4294967295
   175ae:	e7e6      	b.n	1757e <at_interface_open+0x82>
   175b0:	2005      	movs	r0, #5
   175b2:	f7fa fe11 	bl	121d8 <bsd_os_errno_set>
   175b6:	f04f 34ff 	mov.w	r4, #4294967295
   175ba:	e7e0      	b.n	1757e <at_interface_open+0x82>
   175bc:	20021d74 	.word	0x20021d74
   175c0:	000173f1 	.word	0x000173f1

000175c4 <at_interface_close>:
   175c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175c8:	b082      	sub	sp, #8
   175ca:	4606      	mov	r6, r0
   175cc:	f003 f8a6 	bl	1a71c <interface_socket_from_handle_get>
   175d0:	2800      	cmp	r0, #0
   175d2:	d044      	beq.n	1765e <at_interface_close+0x9a>
   175d4:	230d      	movs	r3, #13
   175d6:	6807      	ldr	r7, [r0, #0]
   175d8:	6003      	str	r3, [r0, #0]
   175da:	6803      	ldr	r3, [r0, #0]
   175dc:	4604      	mov	r4, r0
   175de:	039b      	lsls	r3, r3, #14
   175e0:	d42b      	bmi.n	1763a <at_interface_close+0x76>
   175e2:	2100      	movs	r1, #0
   175e4:	4668      	mov	r0, sp
   175e6:	f003 f99d 	bl	1a924 <rpc_at_client_request_alloc>
   175ea:	4605      	mov	r5, r0
   175ec:	4630      	mov	r0, r6
   175ee:	f003 f895 	bl	1a71c <interface_socket_from_handle_get>
   175f2:	4680      	mov	r8, r0
   175f4:	bb8d      	cbnz	r5, 1765a <at_interface_close+0x96>
   175f6:	2304      	movs	r3, #4
   175f8:	9800      	ldr	r0, [sp, #0]
   175fa:	2106      	movs	r1, #6
   175fc:	7203      	strb	r3, [r0, #8]
   175fe:	7245      	strb	r5, [r0, #9]
   17600:	7285      	strb	r5, [r0, #10]
   17602:	72c5      	strb	r5, [r0, #11]
   17604:	60c6      	str	r6, [r0, #12]
   17606:	f003 f9a1 	bl	1a94c <rpc_at_client_request_send>
   1760a:	b9d8      	cbnz	r0, 17644 <at_interface_close+0x80>
   1760c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   17610:	220e      	movs	r2, #14
   17612:	2900      	cmp	r1, #0
   17614:	bf08      	it	eq
   17616:	f04f 31ff 	moveq.w	r1, #4294967295
   1761a:	ab02      	add	r3, sp, #8
   1761c:	f843 1d04 	str.w	r1, [r3, #-4]!
   17620:	4630      	mov	r0, r6
   17622:	4611      	mov	r1, r2
   17624:	f002 fffa 	bl	1a61c <interface_socket_wait>
   17628:	4605      	mov	r5, r0
   1762a:	b978      	cbnz	r0, 1764c <at_interface_close+0x88>
   1762c:	4630      	mov	r0, r6
   1762e:	f002 ffa7 	bl	1a580 <interface_socket_free>
   17632:	4628      	mov	r0, r5
   17634:	b002      	add	sp, #8
   17636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1763a:	6803      	ldr	r3, [r0, #0]
   1763c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17640:	6003      	str	r3, [r0, #0]
   17642:	e7ce      	b.n	175e2 <at_interface_close+0x1e>
   17644:	9800      	ldr	r0, [sp, #0]
   17646:	f003 f98f 	bl	1a968 <rpc_at_client_message_free>
   1764a:	2523      	movs	r5, #35	; 0x23
   1764c:	6027      	str	r7, [r4, #0]
   1764e:	4628      	mov	r0, r5
   17650:	f7fa fdc2 	bl	121d8 <bsd_os_errno_set>
   17654:	f04f 35ff 	mov.w	r5, #4294967295
   17658:	e7eb      	b.n	17632 <at_interface_close+0x6e>
   1765a:	250c      	movs	r5, #12
   1765c:	e7f6      	b.n	1764c <at_interface_close+0x88>
   1765e:	2516      	movs	r5, #22
   17660:	e7f5      	b.n	1764e <at_interface_close+0x8a>
   17662:	bf00      	nop

00017664 <at_interface_read>:
   17664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17668:	b086      	sub	sp, #24
   1766a:	4688      	mov	r8, r1
   1766c:	4615      	mov	r5, r2
   1766e:	461e      	mov	r6, r3
   17670:	4607      	mov	r7, r0
   17672:	f003 f853 	bl	1a71c <interface_socket_from_handle_get>
   17676:	2800      	cmp	r0, #0
   17678:	d045      	beq.n	17706 <at_interface_read+0xa2>
   1767a:	2300      	movs	r3, #0
   1767c:	4604      	mov	r4, r0
   1767e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   17682:	e9cd 3304 	strd	r3, r3, [sp, #16]
   17686:	bb3e      	cbnz	r6, 176d8 <at_interface_read+0x74>
   17688:	f016 0502 	ands.w	r5, r6, #2
   1768c:	d00f      	beq.n	176ae <at_interface_read+0x4a>
   1768e:	e02a      	b.n	176e6 <at_interface_read+0x82>
   17690:	b9dd      	cbnz	r5, 176ca <at_interface_read+0x66>
   17692:	6a25      	ldr	r5, [r4, #32]
   17694:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17698:	2d00      	cmp	r5, #0
   1769a:	bf08      	it	eq
   1769c:	f04f 35ff 	moveq.w	r5, #4294967295
   176a0:	4611      	mov	r1, r2
   176a2:	ab01      	add	r3, sp, #4
   176a4:	4638      	mov	r0, r7
   176a6:	9501      	str	r5, [sp, #4]
   176a8:	f002 ffb8 	bl	1a61c <interface_socket_wait>
   176ac:	4605      	mov	r5, r0
   176ae:	6823      	ldr	r3, [r4, #0]
   176b0:	69e0      	ldr	r0, [r4, #28]
   176b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   176b6:	6023      	str	r3, [r4, #0]
   176b8:	6803      	ldr	r3, [r0, #0]
   176ba:	4632      	mov	r2, r6
   176bc:	689b      	ldr	r3, [r3, #8]
   176be:	a902      	add	r1, sp, #8
   176c0:	4798      	blx	r3
   176c2:	f1b0 0800 	subs.w	r8, r0, #0
   176c6:	dbe3      	blt.n	17690 <at_interface_read+0x2c>
   176c8:	b115      	cbz	r5, 176d0 <at_interface_read+0x6c>
   176ca:	4628      	mov	r0, r5
   176cc:	f7fa fd84 	bl	121d8 <bsd_os_errno_set>
   176d0:	4640      	mov	r0, r8
   176d2:	b006      	add	sp, #24
   176d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176d8:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   176dc:	d1d4      	bne.n	17688 <at_interface_read+0x24>
   176de:	252d      	movs	r5, #45	; 0x2d
   176e0:	f04f 38ff 	mov.w	r8, #4294967295
   176e4:	e7f1      	b.n	176ca <at_interface_read+0x66>
   176e6:	6823      	ldr	r3, [r4, #0]
   176e8:	69e0      	ldr	r0, [r4, #28]
   176ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   176ee:	6023      	str	r3, [r4, #0]
   176f0:	6803      	ldr	r3, [r0, #0]
   176f2:	4632      	mov	r2, r6
   176f4:	689b      	ldr	r3, [r3, #8]
   176f6:	a902      	add	r1, sp, #8
   176f8:	4798      	blx	r3
   176fa:	f1b0 3fff 	cmp.w	r0, #4294967295
   176fe:	4680      	mov	r8, r0
   17700:	d1e6      	bne.n	176d0 <at_interface_read+0x6c>
   17702:	2523      	movs	r5, #35	; 0x23
   17704:	e7e1      	b.n	176ca <at_interface_read+0x66>
   17706:	2516      	movs	r5, #22
   17708:	f04f 38ff 	mov.w	r8, #4294967295
   1770c:	e7dd      	b.n	176ca <at_interface_read+0x66>
   1770e:	bf00      	nop

00017710 <at_interface_getopt>:
   17710:	f003 b872 	b.w	1a7f8 <interface_socket_getopt>

00017714 <at_interface_setopt>:
   17714:	f003 b82a 	b.w	1a76c <interface_socket_setopt>

00017718 <rpc_at_event_handler>:
   17718:	b570      	push	{r4, r5, r6, lr}
   1771a:	4606      	mov	r6, r0
   1771c:	b084      	sub	sp, #16
   1771e:	68c0      	ldr	r0, [r0, #12]
   17720:	460d      	mov	r5, r1
   17722:	f002 fffb 	bl	1a71c <interface_socket_from_handle_get>
   17726:	4604      	mov	r4, r0
   17728:	b348      	cbz	r0, 1777e <rpc_at_event_handler+0x66>
   1772a:	6803      	ldr	r3, [r0, #0]
   1772c:	b29b      	uxth	r3, r3
   1772e:	2b01      	cmp	r3, #1
   17730:	d01f      	beq.n	17772 <rpc_at_event_handler+0x5a>
   17732:	6803      	ldr	r3, [r0, #0]
   17734:	b29b      	uxth	r3, r3
   17736:	2b0d      	cmp	r3, #13
   17738:	d029      	beq.n	1778e <rpc_at_event_handler+0x76>
   1773a:	6803      	ldr	r3, [r0, #0]
   1773c:	b29b      	uxth	r3, r3
   1773e:	2b02      	cmp	r3, #2
   17740:	d02d      	beq.n	1779e <rpc_at_event_handler+0x86>
   17742:	3d03      	subs	r5, #3
   17744:	2d01      	cmp	r5, #1
   17746:	d817      	bhi.n	17778 <rpc_at_event_handler+0x60>
   17748:	2500      	movs	r5, #0
   1774a:	6873      	ldr	r3, [r6, #4]
   1774c:	6832      	ldr	r2, [r6, #0]
   1774e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   17752:	e9cd 2300 	strd	r2, r3, [sp]
   17756:	69e0      	ldr	r0, [r4, #28]
   17758:	4669      	mov	r1, sp
   1775a:	6803      	ldr	r3, [r0, #0]
   1775c:	685b      	ldr	r3, [r3, #4]
   1775e:	4798      	blx	r3
   17760:	3001      	adds	r0, #1
   17762:	d019      	beq.n	17798 <rpc_at_event_handler+0x80>
   17764:	4628      	mov	r0, r5
   17766:	6823      	ldr	r3, [r4, #0]
   17768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1776c:	6023      	str	r3, [r4, #0]
   1776e:	b004      	add	sp, #16
   17770:	bd70      	pop	{r4, r5, r6, pc}
   17772:	2d02      	cmp	r5, #2
   17774:	d1e5      	bne.n	17742 <rpc_at_event_handler+0x2a>
   17776:	6005      	str	r5, [r0, #0]
   17778:	2000      	movs	r0, #0
   1777a:	b004      	add	sp, #16
   1777c:	bd70      	pop	{r4, r5, r6, pc}
   1777e:	6830      	ldr	r0, [r6, #0]
   17780:	2800      	cmp	r0, #0
   17782:	d0f9      	beq.n	17778 <rpc_at_event_handler+0x60>
   17784:	f003 f8f8 	bl	1a978 <rpc_at_client_data_free>
   17788:	4620      	mov	r0, r4
   1778a:	b004      	add	sp, #16
   1778c:	bd70      	pop	{r4, r5, r6, pc}
   1778e:	2d02      	cmp	r5, #2
   17790:	d1d7      	bne.n	17742 <rpc_at_event_handler+0x2a>
   17792:	230e      	movs	r3, #14
   17794:	6003      	str	r3, [r0, #0]
   17796:	e7ef      	b.n	17778 <rpc_at_event_handler+0x60>
   17798:	2002      	movs	r0, #2
   1779a:	b004      	add	sp, #16
   1779c:	bd70      	pop	{r4, r5, r6, pc}
   1779e:	6803      	ldr	r3, [r0, #0]
   177a0:	029b      	lsls	r3, r3, #10
   177a2:	d5ce      	bpl.n	17742 <rpc_at_event_handler+0x2a>
   177a4:	2d02      	cmp	r5, #2
   177a6:	d1cc      	bne.n	17742 <rpc_at_event_handler+0x2a>
   177a8:	6803      	ldr	r3, [r0, #0]
   177aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   177ae:	6003      	str	r3, [r0, #0]
   177b0:	6803      	ldr	r3, [r0, #0]
   177b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   177b6:	6003      	str	r3, [r0, #0]
   177b8:	e7de      	b.n	17778 <rpc_at_event_handler+0x60>
   177ba:	bf00      	nop

000177bc <ok_rsp_parser>:
   177bc:	2000      	movs	r0, #0
   177be:	4770      	bx	lr

000177c0 <pdn_state_get_parser>:
   177c0:	2200      	movs	r2, #0
   177c2:	b570      	push	{r4, r5, r6, lr}
   177c4:	780b      	ldrb	r3, [r1, #0]
   177c6:	b084      	sub	sp, #16
   177c8:	460e      	mov	r6, r1
   177ca:	e9cd 2200 	strd	r2, r2, [sp]
   177ce:	e9cd 2202 	strd	r2, r2, [sp, #8]
   177d2:	b323      	cbz	r3, 1781e <pdn_state_get_parser+0x5e>
   177d4:	460c      	mov	r4, r1
   177d6:	2b20      	cmp	r3, #32
   177d8:	460d      	mov	r5, r1
   177da:	d01b      	beq.n	17814 <pdn_state_get_parser+0x54>
   177dc:	700b      	strb	r3, [r1, #0]
   177de:	3201      	adds	r2, #1
   177e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   177e4:	18b1      	adds	r1, r6, r2
   177e6:	460d      	mov	r5, r1
   177e8:	2b00      	cmp	r3, #0
   177ea:	d1f4      	bne.n	177d6 <pdn_state_get_parser+0x16>
   177ec:	2200      	movs	r2, #0
   177ee:	4b0d      	ldr	r3, [pc, #52]	; (17824 <pdn_state_get_parser+0x64>)
   177f0:	702a      	strb	r2, [r5, #0]
   177f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   177f6:	4a0c      	ldr	r2, [pc, #48]	; (17828 <pdn_state_get_parser+0x68>)
   177f8:	681b      	ldr	r3, [r3, #0]
   177fa:	2110      	movs	r1, #16
   177fc:	4668      	mov	r0, sp
   177fe:	f7f7 fe43 	bl	f488 <snprintf>
   17802:	4669      	mov	r1, sp
   17804:	4630      	mov	r0, r6
   17806:	f005 f9b3 	bl	1cb70 <strstr>
   1780a:	3000      	adds	r0, #0
   1780c:	bf18      	it	ne
   1780e:	2001      	movne	r0, #1
   17810:	b004      	add	sp, #16
   17812:	bd70      	pop	{r4, r5, r6, pc}
   17814:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   17818:	2b00      	cmp	r3, #0
   1781a:	d1dc      	bne.n	177d6 <pdn_state_get_parser+0x16>
   1781c:	e7e6      	b.n	177ec <pdn_state_get_parser+0x2c>
   1781e:	460d      	mov	r5, r1
   17820:	e7e4      	b.n	177ec <pdn_state_get_parser+0x2c>
   17822:	bf00      	nop
   17824:	200212ec 	.word	0x200212ec
   17828:	00020f14 	.word	0x00020f14

0001782c <pdn_id_get_parser>:
   1782c:	b570      	push	{r4, r5, r6, lr}
   1782e:	780b      	ldrb	r3, [r1, #0]
   17830:	4606      	mov	r6, r0
   17832:	b313      	cbz	r3, 1787a <pdn_id_get_parser+0x4e>
   17834:	4608      	mov	r0, r1
   17836:	2400      	movs	r4, #0
   17838:	460a      	mov	r2, r1
   1783a:	2b20      	cmp	r3, #32
   1783c:	4615      	mov	r5, r2
   1783e:	d017      	beq.n	17870 <pdn_id_get_parser+0x44>
   17840:	7013      	strb	r3, [r2, #0]
   17842:	3401      	adds	r4, #1
   17844:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   17848:	190a      	adds	r2, r1, r4
   1784a:	4615      	mov	r5, r2
   1784c:	2b00      	cmp	r3, #0
   1784e:	d1f4      	bne.n	1783a <pdn_id_get_parser+0xe>
   17850:	2300      	movs	r3, #0
   17852:	4608      	mov	r0, r1
   17854:	702b      	strb	r3, [r5, #0]
   17856:	213a      	movs	r1, #58	; 0x3a
   17858:	f005 f9bd 	bl	1cbd6 <strchr>
   1785c:	b130      	cbz	r0, 1786c <pdn_id_get_parser+0x40>
   1785e:	3001      	adds	r0, #1
   17860:	f005 f8ea 	bl	1ca38 <atoi>
   17864:	4b06      	ldr	r3, [pc, #24]	; (17880 <pdn_id_get_parser+0x54>)
   17866:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1786a:	6058      	str	r0, [r3, #4]
   1786c:	2000      	movs	r0, #0
   1786e:	bd70      	pop	{r4, r5, r6, pc}
   17870:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   17874:	2b00      	cmp	r3, #0
   17876:	d1e0      	bne.n	1783a <pdn_id_get_parser+0xe>
   17878:	e7ea      	b.n	17850 <pdn_id_get_parser+0x24>
   1787a:	460d      	mov	r5, r1
   1787c:	e7e8      	b.n	17850 <pdn_id_get_parser+0x24>
   1787e:	bf00      	nop
   17880:	200212ec 	.word	0x200212ec

00017884 <context_create_parser>:
   17884:	b570      	push	{r4, r5, r6, lr}
   17886:	780b      	ldrb	r3, [r1, #0]
   17888:	4606      	mov	r6, r0
   1788a:	b313      	cbz	r3, 178d2 <context_create_parser+0x4e>
   1788c:	4608      	mov	r0, r1
   1788e:	2400      	movs	r4, #0
   17890:	460a      	mov	r2, r1
   17892:	2b20      	cmp	r3, #32
   17894:	4615      	mov	r5, r2
   17896:	d017      	beq.n	178c8 <context_create_parser+0x44>
   17898:	7013      	strb	r3, [r2, #0]
   1789a:	3401      	adds	r4, #1
   1789c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   178a0:	190a      	adds	r2, r1, r4
   178a2:	4615      	mov	r5, r2
   178a4:	2b00      	cmp	r3, #0
   178a6:	d1f4      	bne.n	17892 <context_create_parser+0xe>
   178a8:	2300      	movs	r3, #0
   178aa:	4608      	mov	r0, r1
   178ac:	702b      	strb	r3, [r5, #0]
   178ae:	213a      	movs	r1, #58	; 0x3a
   178b0:	f005 f991 	bl	1cbd6 <strchr>
   178b4:	b130      	cbz	r0, 178c4 <context_create_parser+0x40>
   178b6:	4b08      	ldr	r3, [pc, #32]	; (178d8 <context_create_parser+0x54>)
   178b8:	3001      	adds	r0, #1
   178ba:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   178be:	f005 f8bb 	bl	1ca38 <atoi>
   178c2:	6020      	str	r0, [r4, #0]
   178c4:	2000      	movs	r0, #0
   178c6:	bd70      	pop	{r4, r5, r6, pc}
   178c8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   178cc:	2b00      	cmp	r3, #0
   178ce:	d1e0      	bne.n	17892 <context_create_parser+0xe>
   178d0:	e7ea      	b.n	178a8 <context_create_parser+0x24>
   178d2:	460d      	mov	r5, r1
   178d4:	e7e8      	b.n	178a8 <context_create_parser+0x24>
   178d6:	bf00      	nop
   178d8:	200212ec 	.word	0x200212ec

000178dc <pdn_interface_init>:
   178dc:	f04f 33ff 	mov.w	r3, #4294967295
   178e0:	b510      	push	{r4, lr}
   178e2:	4c0b      	ldr	r4, [pc, #44]	; (17910 <pdn_interface_init+0x34>)
   178e4:	2228      	movs	r2, #40	; 0x28
   178e6:	2100      	movs	r1, #0
   178e8:	480a      	ldr	r0, [pc, #40]	; (17914 <pdn_interface_init+0x38>)
   178ea:	6023      	str	r3, [r4, #0]
   178ec:	f005 f9de 	bl	1ccac <memset>
   178f0:	f240 2201 	movw	r2, #513	; 0x201
   178f4:	2102      	movs	r1, #2
   178f6:	2066      	movs	r0, #102	; 0x66
   178f8:	f7ff fe00 	bl	174fc <at_interface_open>
   178fc:	2800      	cmp	r0, #0
   178fe:	6020      	str	r0, [r4, #0]
   17900:	db04      	blt.n	1790c <pdn_interface_init+0x30>
   17902:	2201      	movs	r2, #1
   17904:	4b04      	ldr	r3, [pc, #16]	; (17918 <pdn_interface_init+0x3c>)
   17906:	2000      	movs	r0, #0
   17908:	701a      	strb	r2, [r3, #0]
   1790a:	bd10      	pop	{r4, pc}
   1790c:	2003      	movs	r0, #3
   1790e:	bd10      	pop	{r4, pc}
   17910:	200211e8 	.word	0x200211e8
   17914:	200212ec 	.word	0x200212ec
   17918:	20021d75 	.word	0x20021d75

0001791c <pdn_interface_open>:
   1791c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17920:	4b66      	ldr	r3, [pc, #408]	; (17abc <pdn_interface_open+0x1a0>)
   17922:	b083      	sub	sp, #12
   17924:	781b      	ldrb	r3, [r3, #0]
   17926:	2b00      	cmp	r3, #0
   17928:	f000 80c2 	beq.w	17ab0 <pdn_interface_open+0x194>
   1792c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   17930:	f040 80ad 	bne.w	17a8e <pdn_interface_open+0x172>
   17934:	4c62      	ldr	r4, [pc, #392]	; (17ac0 <pdn_interface_open+0x1a4>)
   17936:	6825      	ldr	r5, [r4, #0]
   17938:	b34d      	cbz	r5, 1798e <pdn_interface_open+0x72>
   1793a:	6863      	ldr	r3, [r4, #4]
   1793c:	2b00      	cmp	r3, #0
   1793e:	f000 8098 	beq.w	17a72 <pdn_interface_open+0x156>
   17942:	68a3      	ldr	r3, [r4, #8]
   17944:	2b00      	cmp	r3, #0
   17946:	f000 8096 	beq.w	17a76 <pdn_interface_open+0x15a>
   1794a:	68e3      	ldr	r3, [r4, #12]
   1794c:	2b00      	cmp	r3, #0
   1794e:	f000 8094 	beq.w	17a7a <pdn_interface_open+0x15e>
   17952:	6923      	ldr	r3, [r4, #16]
   17954:	2b00      	cmp	r3, #0
   17956:	f000 8092 	beq.w	17a7e <pdn_interface_open+0x162>
   1795a:	6963      	ldr	r3, [r4, #20]
   1795c:	2b00      	cmp	r3, #0
   1795e:	f000 8090 	beq.w	17a82 <pdn_interface_open+0x166>
   17962:	69a3      	ldr	r3, [r4, #24]
   17964:	2b00      	cmp	r3, #0
   17966:	f000 808e 	beq.w	17a86 <pdn_interface_open+0x16a>
   1796a:	69e3      	ldr	r3, [r4, #28]
   1796c:	2b00      	cmp	r3, #0
   1796e:	f000 808c 	beq.w	17a8a <pdn_interface_open+0x16e>
   17972:	6a23      	ldr	r3, [r4, #32]
   17974:	b153      	cbz	r3, 1798c <pdn_interface_open+0x70>
   17976:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17978:	2509      	movs	r5, #9
   1797a:	b143      	cbz	r3, 1798e <pdn_interface_open+0x72>
   1797c:	200c      	movs	r0, #12
   1797e:	f7fa fc2b 	bl	121d8 <bsd_os_errno_set>
   17982:	f04f 30ff 	mov.w	r0, #4294967295
   17986:	b003      	add	sp, #12
   17988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1798c:	2508      	movs	r5, #8
   1798e:	2074      	movs	r0, #116	; 0x74
   17990:	f002 fa60 	bl	19e54 <nrf_malloc>
   17994:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   17998:	2800      	cmp	r0, #0
   1799a:	d0ef      	beq.n	1797c <pdn_interface_open+0x60>
   1799c:	2274      	movs	r2, #116	; 0x74
   1799e:	2100      	movs	r1, #0
   179a0:	f005 f984 	bl	1ccac <memset>
   179a4:	2101      	movs	r1, #1
   179a6:	2003      	movs	r0, #3
   179a8:	f04f 37ff 	mov.w	r7, #4294967295
   179ac:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   179b0:	4a44      	ldr	r2, [pc, #272]	; (17ac4 <pdn_interface_open+0x1a8>)
   179b2:	6099      	str	r1, [r3, #8]
   179b4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   179b8:	f44f 7180 	mov.w	r1, #256	; 0x100
   179bc:	6718      	str	r0, [r3, #112]	; 0x70
   179be:	605f      	str	r7, [r3, #4]
   179c0:	4841      	ldr	r0, [pc, #260]	; (17ac8 <pdn_interface_open+0x1ac>)
   179c2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 17ad4 <pdn_interface_open+0x1b8>
   179c6:	f7f7 fd5f 	bl	f488 <snprintf>
   179ca:	483f      	ldr	r0, [pc, #252]	; (17ac8 <pdn_interface_open+0x1ac>)
   179cc:	f8d8 9000 	ldr.w	r9, [r8]
   179d0:	2600      	movs	r6, #0
   179d2:	f005 f90e 	bl	1cbf2 <strlen>
   179d6:	4633      	mov	r3, r6
   179d8:	4602      	mov	r2, r0
   179da:	493b      	ldr	r1, [pc, #236]	; (17ac8 <pdn_interface_open+0x1ac>)
   179dc:	4648      	mov	r0, r9
   179de:	9601      	str	r6, [sp, #4]
   179e0:	9600      	str	r6, [sp, #0]
   179e2:	f7ff fd09 	bl	173f8 <at_interface_write>
   179e6:	4681      	mov	r9, r0
   179e8:	4837      	ldr	r0, [pc, #220]	; (17ac8 <pdn_interface_open+0x1ac>)
   179ea:	f005 f902 	bl	1cbf2 <strlen>
   179ee:	4548      	cmp	r0, r9
   179f0:	d153      	bne.n	17a9a <pdn_interface_open+0x17e>
   179f2:	4633      	mov	r3, r6
   179f4:	e9cd 6600 	strd	r6, r6, [sp]
   179f8:	f44f 7280 	mov.w	r2, #256	; 0x100
   179fc:	4932      	ldr	r1, [pc, #200]	; (17ac8 <pdn_interface_open+0x1ac>)
   179fe:	f8d8 0000 	ldr.w	r0, [r8]
   17a02:	f7ff fe2f 	bl	17664 <at_interface_read>
   17a06:	4606      	mov	r6, r0
   17a08:	4830      	ldr	r0, [pc, #192]	; (17acc <pdn_interface_open+0x1b0>)
   17a0a:	f005 f8f2 	bl	1cbf2 <strlen>
   17a0e:	4286      	cmp	r6, r0
   17a10:	db15      	blt.n	17a3e <pdn_interface_open+0x122>
   17a12:	4602      	mov	r2, r0
   17a14:	492c      	ldr	r1, [pc, #176]	; (17ac8 <pdn_interface_open+0x1ac>)
   17a16:	482d      	ldr	r0, [pc, #180]	; (17acc <pdn_interface_open+0x1b0>)
   17a18:	f005 f8fe 	bl	1cc18 <strncmp>
   17a1c:	b978      	cbnz	r0, 17a3e <pdn_interface_open+0x122>
   17a1e:	492a      	ldr	r1, [pc, #168]	; (17ac8 <pdn_interface_open+0x1ac>)
   17a20:	4628      	mov	r0, r5
   17a22:	f7ff ff2f 	bl	17884 <context_create_parser>
   17a26:	b9b0      	cbnz	r0, 17a56 <pdn_interface_open+0x13a>
   17a28:	2202      	movs	r2, #2
   17a2a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   17a2e:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   17a32:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   17a36:	609a      	str	r2, [r3, #8]
   17a38:	b003      	add	sp, #12
   17a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17a3e:	4824      	ldr	r0, [pc, #144]	; (17ad0 <pdn_interface_open+0x1b4>)
   17a40:	f005 f8d7 	bl	1cbf2 <strlen>
   17a44:	4920      	ldr	r1, [pc, #128]	; (17ac8 <pdn_interface_open+0x1ac>)
   17a46:	4602      	mov	r2, r0
   17a48:	4821      	ldr	r0, [pc, #132]	; (17ad0 <pdn_interface_open+0x1b4>)
   17a4a:	f005 f8e5 	bl	1cc18 <strncmp>
   17a4e:	b960      	cbnz	r0, 17a6a <pdn_interface_open+0x14e>
   17a50:	2008      	movs	r0, #8
   17a52:	f7fa fbc1 	bl	121d8 <bsd_os_errno_set>
   17a56:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   17a5a:	f002 fa05 	bl	19e68 <nrf_free>
   17a5e:	2300      	movs	r3, #0
   17a60:	f04f 30ff 	mov.w	r0, #4294967295
   17a64:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   17a68:	e78d      	b.n	17986 <pdn_interface_open+0x6a>
   17a6a:	2005      	movs	r0, #5
   17a6c:	f7fa fbb4 	bl	121d8 <bsd_os_errno_set>
   17a70:	e7f1      	b.n	17a56 <pdn_interface_open+0x13a>
   17a72:	2501      	movs	r5, #1
   17a74:	e78b      	b.n	1798e <pdn_interface_open+0x72>
   17a76:	2502      	movs	r5, #2
   17a78:	e789      	b.n	1798e <pdn_interface_open+0x72>
   17a7a:	2503      	movs	r5, #3
   17a7c:	e787      	b.n	1798e <pdn_interface_open+0x72>
   17a7e:	2504      	movs	r5, #4
   17a80:	e785      	b.n	1798e <pdn_interface_open+0x72>
   17a82:	2505      	movs	r5, #5
   17a84:	e783      	b.n	1798e <pdn_interface_open+0x72>
   17a86:	2506      	movs	r5, #6
   17a88:	e781      	b.n	1798e <pdn_interface_open+0x72>
   17a8a:	2507      	movs	r5, #7
   17a8c:	e77f      	b.n	1798e <pdn_interface_open+0x72>
   17a8e:	2029      	movs	r0, #41	; 0x29
   17a90:	f7fa fba2 	bl	121d8 <bsd_os_errno_set>
   17a94:	f04f 30ff 	mov.w	r0, #4294967295
   17a98:	e775      	b.n	17986 <pdn_interface_open+0x6a>
   17a9a:	2005      	movs	r0, #5
   17a9c:	f7fa fb9c 	bl	121d8 <bsd_os_errno_set>
   17aa0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   17aa4:	f002 f9e0 	bl	19e68 <nrf_free>
   17aa8:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   17aac:	4638      	mov	r0, r7
   17aae:	e76a      	b.n	17986 <pdn_interface_open+0x6a>
   17ab0:	2005      	movs	r0, #5
   17ab2:	f7fa fb91 	bl	121d8 <bsd_os_errno_set>
   17ab6:	f04f 30ff 	mov.w	r0, #4294967295
   17aba:	e764      	b.n	17986 <pdn_interface_open+0x6a>
   17abc:	20021d75 	.word	0x20021d75
   17ac0:	200212ec 	.word	0x200212ec
   17ac4:	00020ef0 	.word	0x00020ef0
   17ac8:	200211ec 	.word	0x200211ec
   17acc:	00020f00 	.word	0x00020f00
   17ad0:	00020f0c 	.word	0x00020f0c
   17ad4:	200211e8 	.word	0x200211e8

00017ad8 <pdn_interface_connect>:
   17ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17adc:	b083      	sub	sp, #12
   17ade:	2900      	cmp	r1, #0
   17ae0:	f000 813d 	beq.w	17d5e <pdn_interface_connect+0x286>
   17ae4:	2a64      	cmp	r2, #100	; 0x64
   17ae6:	4691      	mov	r9, r2
   17ae8:	f200 8139 	bhi.w	17d5e <pdn_interface_connect+0x286>
   17aec:	4605      	mov	r5, r0
   17aee:	4608      	mov	r0, r1
   17af0:	4688      	mov	r8, r1
   17af2:	f005 f87e 	bl	1cbf2 <strlen>
   17af6:	2864      	cmp	r0, #100	; 0x64
   17af8:	f200 8131 	bhi.w	17d5e <pdn_interface_connect+0x286>
   17afc:	0c2b      	lsrs	r3, r5, #16
   17afe:	4aa5      	ldr	r2, [pc, #660]	; (17d94 <pdn_interface_connect+0x2bc>)
   17b00:	041b      	lsls	r3, r3, #16
   17b02:	4293      	cmp	r3, r2
   17b04:	f040 8122 	bne.w	17d4c <pdn_interface_connect+0x274>
   17b08:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   17b0c:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   17b10:	2d09      	cmp	r5, #9
   17b12:	f300 811b 	bgt.w	17d4c <pdn_interface_connect+0x274>
   17b16:	4fa0      	ldr	r7, [pc, #640]	; (17d98 <pdn_interface_connect+0x2c0>)
   17b18:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   17b1c:	2b00      	cmp	r3, #0
   17b1e:	f000 8115 	beq.w	17d4c <pdn_interface_connect+0x274>
   17b22:	689a      	ldr	r2, [r3, #8]
   17b24:	2a00      	cmp	r2, #0
   17b26:	f000 8111 	beq.w	17d4c <pdn_interface_connect+0x274>
   17b2a:	689b      	ldr	r3, [r3, #8]
   17b2c:	2b02      	cmp	r3, #2
   17b2e:	f040 810d 	bne.w	17d4c <pdn_interface_connect+0x274>
   17b32:	4e9a      	ldr	r6, [pc, #616]	; (17d9c <pdn_interface_connect+0x2c4>)
   17b34:	4a9a      	ldr	r2, [pc, #616]	; (17da0 <pdn_interface_connect+0x2c8>)
   17b36:	f44f 7180 	mov.w	r1, #256	; 0x100
   17b3a:	4630      	mov	r0, r6
   17b3c:	f7f7 fca4 	bl	f488 <snprintf>
   17b40:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   17b44:	4604      	mov	r4, r0
   17b46:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   17b4a:	681b      	ldr	r3, [r3, #0]
   17b4c:	4a95      	ldr	r2, [pc, #596]	; (17da4 <pdn_interface_connect+0x2cc>)
   17b4e:	1830      	adds	r0, r6, r0
   17b50:	f7f7 fc9a 	bl	f488 <snprintf>
   17b54:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   17b58:	4404      	add	r4, r0
   17b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   17b5c:	f003 0203 	and.w	r2, r3, #3
   17b60:	2a03      	cmp	r2, #3
   17b62:	f000 80ea 	beq.w	17d3a <pdn_interface_connect+0x262>
   17b66:	079b      	lsls	r3, r3, #30
   17b68:	eb06 0004 	add.w	r0, r6, r4
   17b6c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   17b70:	bf4c      	ite	mi
   17b72:	4b8d      	ldrmi	r3, [pc, #564]	; (17da8 <pdn_interface_connect+0x2d0>)
   17b74:	4b8d      	ldrpl	r3, [pc, #564]	; (17dac <pdn_interface_connect+0x2d4>)
   17b76:	4a8e      	ldr	r2, [pc, #568]	; (17db0 <pdn_interface_connect+0x2d8>)
   17b78:	f7f7 fc86 	bl	f488 <snprintf>
   17b7c:	4404      	add	r4, r0
   17b7e:	4643      	mov	r3, r8
   17b80:	4a8c      	ldr	r2, [pc, #560]	; (17db4 <pdn_interface_connect+0x2dc>)
   17b82:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   17b86:	1930      	adds	r0, r6, r4
   17b88:	f7f7 fc7e 	bl	f488 <snprintf>
   17b8c:	4420      	add	r0, r4
   17b8e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   17b92:	f300 80f7 	bgt.w	17d84 <pdn_interface_connect+0x2ac>
   17b96:	f8df a23c 	ldr.w	sl, [pc, #572]	; 17dd4 <pdn_interface_connect+0x2fc>
   17b9a:	4880      	ldr	r0, [pc, #512]	; (17d9c <pdn_interface_connect+0x2c4>)
   17b9c:	f8da b000 	ldr.w	fp, [sl]
   17ba0:	2400      	movs	r4, #0
   17ba2:	f005 f826 	bl	1cbf2 <strlen>
   17ba6:	4623      	mov	r3, r4
   17ba8:	4602      	mov	r2, r0
   17baa:	497c      	ldr	r1, [pc, #496]	; (17d9c <pdn_interface_connect+0x2c4>)
   17bac:	4658      	mov	r0, fp
   17bae:	9401      	str	r4, [sp, #4]
   17bb0:	9400      	str	r4, [sp, #0]
   17bb2:	f7ff fc21 	bl	173f8 <at_interface_write>
   17bb6:	4683      	mov	fp, r0
   17bb8:	4878      	ldr	r0, [pc, #480]	; (17d9c <pdn_interface_connect+0x2c4>)
   17bba:	f005 f81a 	bl	1cbf2 <strlen>
   17bbe:	4558      	cmp	r0, fp
   17bc0:	d008      	beq.n	17bd4 <pdn_interface_connect+0xfc>
   17bc2:	2005      	movs	r0, #5
   17bc4:	f7fa fb08 	bl	121d8 <bsd_os_errno_set>
   17bc8:	f04f 34ff 	mov.w	r4, #4294967295
   17bcc:	4620      	mov	r0, r4
   17bce:	b003      	add	sp, #12
   17bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bd4:	4623      	mov	r3, r4
   17bd6:	e9cd 4400 	strd	r4, r4, [sp]
   17bda:	f44f 7280 	mov.w	r2, #256	; 0x100
   17bde:	496f      	ldr	r1, [pc, #444]	; (17d9c <pdn_interface_connect+0x2c4>)
   17be0:	f8da 0000 	ldr.w	r0, [sl]
   17be4:	f7ff fd3e 	bl	17664 <at_interface_read>
   17be8:	4604      	mov	r4, r0
   17bea:	4873      	ldr	r0, [pc, #460]	; (17db8 <pdn_interface_connect+0x2e0>)
   17bec:	f005 f801 	bl	1cbf2 <strlen>
   17bf0:	4284      	cmp	r4, r0
   17bf2:	f2c0 8091 	blt.w	17d18 <pdn_interface_connect+0x240>
   17bf6:	4602      	mov	r2, r0
   17bf8:	4968      	ldr	r1, [pc, #416]	; (17d9c <pdn_interface_connect+0x2c4>)
   17bfa:	486f      	ldr	r0, [pc, #444]	; (17db8 <pdn_interface_connect+0x2e0>)
   17bfc:	f005 f80c 	bl	1cc18 <strncmp>
   17c00:	2800      	cmp	r0, #0
   17c02:	f040 8089 	bne.w	17d18 <pdn_interface_connect+0x240>
   17c06:	4965      	ldr	r1, [pc, #404]	; (17d9c <pdn_interface_connect+0x2c4>)
   17c08:	4628      	mov	r0, r5
   17c0a:	f7ff fdd7 	bl	177bc <ok_rsp_parser>
   17c0e:	4604      	mov	r4, r0
   17c10:	2800      	cmp	r0, #0
   17c12:	d1db      	bne.n	17bcc <pdn_interface_connect+0xf4>
   17c14:	4a69      	ldr	r2, [pc, #420]	; (17dbc <pdn_interface_connect+0x2e4>)
   17c16:	f44f 7180 	mov.w	r1, #256	; 0x100
   17c1a:	4860      	ldr	r0, [pc, #384]	; (17d9c <pdn_interface_connect+0x2c4>)
   17c1c:	f7f7 fc34 	bl	f488 <snprintf>
   17c20:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   17c24:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   17c28:	681b      	ldr	r3, [r3, #0]
   17c2a:	4a65      	ldr	r2, [pc, #404]	; (17dc0 <pdn_interface_connect+0x2e8>)
   17c2c:	4430      	add	r0, r6
   17c2e:	f7f7 fc2b 	bl	f488 <snprintf>
   17c32:	485a      	ldr	r0, [pc, #360]	; (17d9c <pdn_interface_connect+0x2c4>)
   17c34:	f8da b000 	ldr.w	fp, [sl]
   17c38:	f004 ffdb 	bl	1cbf2 <strlen>
   17c3c:	4623      	mov	r3, r4
   17c3e:	4602      	mov	r2, r0
   17c40:	4956      	ldr	r1, [pc, #344]	; (17d9c <pdn_interface_connect+0x2c4>)
   17c42:	4658      	mov	r0, fp
   17c44:	9401      	str	r4, [sp, #4]
   17c46:	9400      	str	r4, [sp, #0]
   17c48:	f7ff fbd6 	bl	173f8 <at_interface_write>
   17c4c:	4683      	mov	fp, r0
   17c4e:	4853      	ldr	r0, [pc, #332]	; (17d9c <pdn_interface_connect+0x2c4>)
   17c50:	f004 ffcf 	bl	1cbf2 <strlen>
   17c54:	4558      	cmp	r0, fp
   17c56:	d1b4      	bne.n	17bc2 <pdn_interface_connect+0xea>
   17c58:	4623      	mov	r3, r4
   17c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
   17c5e:	494f      	ldr	r1, [pc, #316]	; (17d9c <pdn_interface_connect+0x2c4>)
   17c60:	f8da 0000 	ldr.w	r0, [sl]
   17c64:	e9cd 4400 	strd	r4, r4, [sp]
   17c68:	f7ff fcfc 	bl	17664 <at_interface_read>
   17c6c:	4683      	mov	fp, r0
   17c6e:	4852      	ldr	r0, [pc, #328]	; (17db8 <pdn_interface_connect+0x2e0>)
   17c70:	f004 ffbf 	bl	1cbf2 <strlen>
   17c74:	4583      	cmp	fp, r0
   17c76:	db4f      	blt.n	17d18 <pdn_interface_connect+0x240>
   17c78:	4602      	mov	r2, r0
   17c7a:	4948      	ldr	r1, [pc, #288]	; (17d9c <pdn_interface_connect+0x2c4>)
   17c7c:	484e      	ldr	r0, [pc, #312]	; (17db8 <pdn_interface_connect+0x2e0>)
   17c7e:	f004 ffcb 	bl	1cc18 <strncmp>
   17c82:	2800      	cmp	r0, #0
   17c84:	d148      	bne.n	17d18 <pdn_interface_connect+0x240>
   17c86:	2103      	movs	r1, #3
   17c88:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   17c8c:	464a      	mov	r2, r9
   17c8e:	6099      	str	r1, [r3, #8]
   17c90:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   17c94:	4641      	mov	r1, r8
   17c96:	300c      	adds	r0, #12
   17c98:	f004 ffdd 	bl	1cc56 <memcpy>
   17c9c:	4a49      	ldr	r2, [pc, #292]	; (17dc4 <pdn_interface_connect+0x2ec>)
   17c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
   17ca2:	483e      	ldr	r0, [pc, #248]	; (17d9c <pdn_interface_connect+0x2c4>)
   17ca4:	f7f7 fbf0 	bl	f488 <snprintf>
   17ca8:	4601      	mov	r1, r0
   17caa:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   17cae:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   17cb2:	681b      	ldr	r3, [r3, #0]
   17cb4:	4a42      	ldr	r2, [pc, #264]	; (17dc0 <pdn_interface_connect+0x2e8>)
   17cb6:	1830      	adds	r0, r6, r0
   17cb8:	f7f7 fbe6 	bl	f488 <snprintf>
   17cbc:	4837      	ldr	r0, [pc, #220]	; (17d9c <pdn_interface_connect+0x2c4>)
   17cbe:	f8da 6000 	ldr.w	r6, [sl]
   17cc2:	f004 ff96 	bl	1cbf2 <strlen>
   17cc6:	4623      	mov	r3, r4
   17cc8:	4602      	mov	r2, r0
   17cca:	4934      	ldr	r1, [pc, #208]	; (17d9c <pdn_interface_connect+0x2c4>)
   17ccc:	4630      	mov	r0, r6
   17cce:	9401      	str	r4, [sp, #4]
   17cd0:	9400      	str	r4, [sp, #0]
   17cd2:	f7ff fb91 	bl	173f8 <at_interface_write>
   17cd6:	4606      	mov	r6, r0
   17cd8:	4830      	ldr	r0, [pc, #192]	; (17d9c <pdn_interface_connect+0x2c4>)
   17cda:	f004 ff8a 	bl	1cbf2 <strlen>
   17cde:	42b0      	cmp	r0, r6
   17ce0:	d153      	bne.n	17d8a <pdn_interface_connect+0x2b2>
   17ce2:	4623      	mov	r3, r4
   17ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
   17ce8:	492c      	ldr	r1, [pc, #176]	; (17d9c <pdn_interface_connect+0x2c4>)
   17cea:	f8da 0000 	ldr.w	r0, [sl]
   17cee:	e9cd 4400 	strd	r4, r4, [sp]
   17cf2:	f7ff fcb7 	bl	17664 <at_interface_read>
   17cf6:	4606      	mov	r6, r0
   17cf8:	4833      	ldr	r0, [pc, #204]	; (17dc8 <pdn_interface_connect+0x2f0>)
   17cfa:	f004 ff7a 	bl	1cbf2 <strlen>
   17cfe:	4286      	cmp	r6, r0
   17d00:	db33      	blt.n	17d6a <pdn_interface_connect+0x292>
   17d02:	4602      	mov	r2, r0
   17d04:	4925      	ldr	r1, [pc, #148]	; (17d9c <pdn_interface_connect+0x2c4>)
   17d06:	4830      	ldr	r0, [pc, #192]	; (17dc8 <pdn_interface_connect+0x2f0>)
   17d08:	f004 ff86 	bl	1cc18 <strncmp>
   17d0c:	bb68      	cbnz	r0, 17d6a <pdn_interface_connect+0x292>
   17d0e:	4628      	mov	r0, r5
   17d10:	4922      	ldr	r1, [pc, #136]	; (17d9c <pdn_interface_connect+0x2c4>)
   17d12:	f7ff fd8b 	bl	1782c <pdn_id_get_parser>
   17d16:	e759      	b.n	17bcc <pdn_interface_connect+0xf4>
   17d18:	482c      	ldr	r0, [pc, #176]	; (17dcc <pdn_interface_connect+0x2f4>)
   17d1a:	f004 ff6a 	bl	1cbf2 <strlen>
   17d1e:	491f      	ldr	r1, [pc, #124]	; (17d9c <pdn_interface_connect+0x2c4>)
   17d20:	4602      	mov	r2, r0
   17d22:	482a      	ldr	r0, [pc, #168]	; (17dcc <pdn_interface_connect+0x2f4>)
   17d24:	f004 ff78 	bl	1cc18 <strncmp>
   17d28:	2800      	cmp	r0, #0
   17d2a:	f47f af4a 	bne.w	17bc2 <pdn_interface_connect+0xea>
   17d2e:	2008      	movs	r0, #8
   17d30:	f7fa fa52 	bl	121d8 <bsd_os_errno_set>
   17d34:	f04f 34ff 	mov.w	r4, #4294967295
   17d38:	e748      	b.n	17bcc <pdn_interface_connect+0xf4>
   17d3a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   17d3e:	1930      	adds	r0, r6, r4
   17d40:	4b23      	ldr	r3, [pc, #140]	; (17dd0 <pdn_interface_connect+0x2f8>)
   17d42:	4a1b      	ldr	r2, [pc, #108]	; (17db0 <pdn_interface_connect+0x2d8>)
   17d44:	f7f7 fba0 	bl	f488 <snprintf>
   17d48:	4404      	add	r4, r0
   17d4a:	e718      	b.n	17b7e <pdn_interface_connect+0xa6>
   17d4c:	f04f 34ff 	mov.w	r4, #4294967295
   17d50:	2009      	movs	r0, #9
   17d52:	f7fa fa41 	bl	121d8 <bsd_os_errno_set>
   17d56:	4620      	mov	r0, r4
   17d58:	b003      	add	sp, #12
   17d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d5e:	2016      	movs	r0, #22
   17d60:	f7fa fa3a 	bl	121d8 <bsd_os_errno_set>
   17d64:	f04f 34ff 	mov.w	r4, #4294967295
   17d68:	e730      	b.n	17bcc <pdn_interface_connect+0xf4>
   17d6a:	4818      	ldr	r0, [pc, #96]	; (17dcc <pdn_interface_connect+0x2f4>)
   17d6c:	f004 ff41 	bl	1cbf2 <strlen>
   17d70:	490a      	ldr	r1, [pc, #40]	; (17d9c <pdn_interface_connect+0x2c4>)
   17d72:	4602      	mov	r2, r0
   17d74:	4815      	ldr	r0, [pc, #84]	; (17dcc <pdn_interface_connect+0x2f4>)
   17d76:	f004 ff4f 	bl	1cc18 <strncmp>
   17d7a:	b930      	cbnz	r0, 17d8a <pdn_interface_connect+0x2b2>
   17d7c:	2008      	movs	r0, #8
   17d7e:	f7fa fa2b 	bl	121d8 <bsd_os_errno_set>
   17d82:	e723      	b.n	17bcc <pdn_interface_connect+0xf4>
   17d84:	f04f 34ff 	mov.w	r4, #4294967295
   17d88:	e720      	b.n	17bcc <pdn_interface_connect+0xf4>
   17d8a:	2005      	movs	r0, #5
   17d8c:	f7fa fa24 	bl	121d8 <bsd_os_errno_set>
   17d90:	e71c      	b.n	17bcc <pdn_interface_connect+0xf4>
   17d92:	bf00      	nop
   17d94:	789a0000 	.word	0x789a0000
   17d98:	200212ec 	.word	0x200212ec
   17d9c:	200211ec 	.word	0x200211ec
   17da0:	00020e78 	.word	0x00020e78
   17da4:	00020e84 	.word	0x00020e84
   17da8:	00020e98 	.word	0x00020e98
   17dac:	00020ea0 	.word	0x00020ea0
   17db0:	00020e90 	.word	0x00020e90
   17db4:	00020ed4 	.word	0x00020ed4
   17db8:	00020ea4 	.word	0x00020ea4
   17dbc:	00020ea8 	.word	0x00020ea8
   17dc0:	00020eb4 	.word	0x00020eb4
   17dc4:	00020eb8 	.word	0x00020eb8
   17dc8:	00020ec8 	.word	0x00020ec8
   17dcc:	00020f0c 	.word	0x00020f0c
   17dd0:	00020e88 	.word	0x00020e88
   17dd4:	200211e8 	.word	0x200211e8

00017dd8 <pdn_interface_close>:
   17dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17ddc:	4a6b      	ldr	r2, [pc, #428]	; (17f8c <pdn_interface_close+0x1b4>)
   17dde:	0c03      	lsrs	r3, r0, #16
   17de0:	041b      	lsls	r3, r3, #16
   17de2:	4293      	cmp	r3, r2
   17de4:	b083      	sub	sp, #12
   17de6:	f040 80ac 	bne.w	17f42 <pdn_interface_close+0x16a>
   17dea:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   17dee:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   17df2:	2c09      	cmp	r4, #9
   17df4:	f300 80a5 	bgt.w	17f42 <pdn_interface_close+0x16a>
   17df8:	4d65      	ldr	r5, [pc, #404]	; (17f90 <pdn_interface_close+0x1b8>)
   17dfa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   17dfe:	2800      	cmp	r0, #0
   17e00:	f000 809f 	beq.w	17f42 <pdn_interface_close+0x16a>
   17e04:	6883      	ldr	r3, [r0, #8]
   17e06:	2b00      	cmp	r3, #0
   17e08:	f000 809b 	beq.w	17f42 <pdn_interface_close+0x16a>
   17e0c:	6883      	ldr	r3, [r0, #8]
   17e0e:	2b03      	cmp	r3, #3
   17e10:	d00b      	beq.n	17e2a <pdn_interface_close+0x52>
   17e12:	6883      	ldr	r3, [r0, #8]
   17e14:	2b02      	cmp	r3, #2
   17e16:	d055      	beq.n	17ec4 <pdn_interface_close+0xec>
   17e18:	f002 f826 	bl	19e68 <nrf_free>
   17e1c:	2300      	movs	r3, #0
   17e1e:	4618      	mov	r0, r3
   17e20:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   17e24:	b003      	add	sp, #12
   17e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17e2a:	4e5a      	ldr	r6, [pc, #360]	; (17f94 <pdn_interface_close+0x1bc>)
   17e2c:	4a5a      	ldr	r2, [pc, #360]	; (17f98 <pdn_interface_close+0x1c0>)
   17e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
   17e32:	4630      	mov	r0, r6
   17e34:	f7f7 fb28 	bl	f488 <snprintf>
   17e38:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   17e3c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   17e40:	681b      	ldr	r3, [r3, #0]
   17e42:	4a56      	ldr	r2, [pc, #344]	; (17f9c <pdn_interface_close+0x1c4>)
   17e44:	4430      	add	r0, r6
   17e46:	f8df 8164 	ldr.w	r8, [pc, #356]	; 17fac <pdn_interface_close+0x1d4>
   17e4a:	f7f7 fb1d 	bl	f488 <snprintf>
   17e4e:	4630      	mov	r0, r6
   17e50:	f8d8 9000 	ldr.w	r9, [r8]
   17e54:	2700      	movs	r7, #0
   17e56:	f004 fecc 	bl	1cbf2 <strlen>
   17e5a:	4631      	mov	r1, r6
   17e5c:	4602      	mov	r2, r0
   17e5e:	463b      	mov	r3, r7
   17e60:	4648      	mov	r0, r9
   17e62:	9701      	str	r7, [sp, #4]
   17e64:	9700      	str	r7, [sp, #0]
   17e66:	f7ff fac7 	bl	173f8 <at_interface_write>
   17e6a:	4681      	mov	r9, r0
   17e6c:	4630      	mov	r0, r6
   17e6e:	f004 fec0 	bl	1cbf2 <strlen>
   17e72:	4548      	cmp	r0, r9
   17e74:	f040 8082 	bne.w	17f7c <pdn_interface_close+0x1a4>
   17e78:	463b      	mov	r3, r7
   17e7a:	e9cd 7700 	strd	r7, r7, [sp]
   17e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
   17e82:	4631      	mov	r1, r6
   17e84:	f8d8 0000 	ldr.w	r0, [r8]
   17e88:	f7ff fbec 	bl	17664 <at_interface_read>
   17e8c:	4607      	mov	r7, r0
   17e8e:	4844      	ldr	r0, [pc, #272]	; (17fa0 <pdn_interface_close+0x1c8>)
   17e90:	f004 feaf 	bl	1cbf2 <strlen>
   17e94:	4287      	cmp	r7, r0
   17e96:	da5a      	bge.n	17f4e <pdn_interface_close+0x176>
   17e98:	4842      	ldr	r0, [pc, #264]	; (17fa4 <pdn_interface_close+0x1cc>)
   17e9a:	f004 feaa 	bl	1cbf2 <strlen>
   17e9e:	493d      	ldr	r1, [pc, #244]	; (17f94 <pdn_interface_close+0x1bc>)
   17ea0:	4602      	mov	r2, r0
   17ea2:	4840      	ldr	r0, [pc, #256]	; (17fa4 <pdn_interface_close+0x1cc>)
   17ea4:	f004 feb8 	bl	1cc18 <strncmp>
   17ea8:	2800      	cmp	r0, #0
   17eaa:	d167      	bne.n	17f7c <pdn_interface_close+0x1a4>
   17eac:	2008      	movs	r0, #8
   17eae:	f7fa f993 	bl	121d8 <bsd_os_errno_set>
   17eb2:	2202      	movs	r2, #2
   17eb4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   17eb8:	609a      	str	r2, [r3, #8]
   17eba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   17ebe:	6883      	ldr	r3, [r0, #8]
   17ec0:	2b02      	cmp	r3, #2
   17ec2:	d1a9      	bne.n	17e18 <pdn_interface_close+0x40>
   17ec4:	4e33      	ldr	r6, [pc, #204]	; (17f94 <pdn_interface_close+0x1bc>)
   17ec6:	4a38      	ldr	r2, [pc, #224]	; (17fa8 <pdn_interface_close+0x1d0>)
   17ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
   17ecc:	4630      	mov	r0, r6
   17ece:	f7f7 fadb 	bl	f488 <snprintf>
   17ed2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   17ed6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   17eda:	681b      	ldr	r3, [r3, #0]
   17edc:	4a2f      	ldr	r2, [pc, #188]	; (17f9c <pdn_interface_close+0x1c4>)
   17ede:	4430      	add	r0, r6
   17ee0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 17fac <pdn_interface_close+0x1d4>
   17ee4:	f7f7 fad0 	bl	f488 <snprintf>
   17ee8:	4630      	mov	r0, r6
   17eea:	f8d8 9000 	ldr.w	r9, [r8]
   17eee:	2700      	movs	r7, #0
   17ef0:	f004 fe7f 	bl	1cbf2 <strlen>
   17ef4:	4631      	mov	r1, r6
   17ef6:	4602      	mov	r2, r0
   17ef8:	463b      	mov	r3, r7
   17efa:	4648      	mov	r0, r9
   17efc:	9701      	str	r7, [sp, #4]
   17efe:	9700      	str	r7, [sp, #0]
   17f00:	f7ff fa7a 	bl	173f8 <at_interface_write>
   17f04:	4681      	mov	r9, r0
   17f06:	4630      	mov	r0, r6
   17f08:	f004 fe73 	bl	1cbf2 <strlen>
   17f0c:	4548      	cmp	r0, r9
   17f0e:	d139      	bne.n	17f84 <pdn_interface_close+0x1ac>
   17f10:	463b      	mov	r3, r7
   17f12:	e9cd 7700 	strd	r7, r7, [sp]
   17f16:	f44f 7280 	mov.w	r2, #256	; 0x100
   17f1a:	4631      	mov	r1, r6
   17f1c:	f8d8 0000 	ldr.w	r0, [r8]
   17f20:	f7ff fba0 	bl	17664 <at_interface_read>
   17f24:	4607      	mov	r7, r0
   17f26:	481e      	ldr	r0, [pc, #120]	; (17fa0 <pdn_interface_close+0x1c8>)
   17f28:	f004 fe63 	bl	1cbf2 <strlen>
   17f2c:	4287      	cmp	r7, r0
   17f2e:	db16      	blt.n	17f5e <pdn_interface_close+0x186>
   17f30:	4602      	mov	r2, r0
   17f32:	4631      	mov	r1, r6
   17f34:	481a      	ldr	r0, [pc, #104]	; (17fa0 <pdn_interface_close+0x1c8>)
   17f36:	f004 fe6f 	bl	1cc18 <strncmp>
   17f3a:	b980      	cbnz	r0, 17f5e <pdn_interface_close+0x186>
   17f3c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   17f40:	e76a      	b.n	17e18 <pdn_interface_close+0x40>
   17f42:	2009      	movs	r0, #9
   17f44:	f7fa f948 	bl	121d8 <bsd_os_errno_set>
   17f48:	f04f 30ff 	mov.w	r0, #4294967295
   17f4c:	e76a      	b.n	17e24 <pdn_interface_close+0x4c>
   17f4e:	4602      	mov	r2, r0
   17f50:	4631      	mov	r1, r6
   17f52:	4813      	ldr	r0, [pc, #76]	; (17fa0 <pdn_interface_close+0x1c8>)
   17f54:	f004 fe60 	bl	1cc18 <strncmp>
   17f58:	2800      	cmp	r0, #0
   17f5a:	d0aa      	beq.n	17eb2 <pdn_interface_close+0xda>
   17f5c:	e79c      	b.n	17e98 <pdn_interface_close+0xc0>
   17f5e:	4811      	ldr	r0, [pc, #68]	; (17fa4 <pdn_interface_close+0x1cc>)
   17f60:	f004 fe47 	bl	1cbf2 <strlen>
   17f64:	490b      	ldr	r1, [pc, #44]	; (17f94 <pdn_interface_close+0x1bc>)
   17f66:	4602      	mov	r2, r0
   17f68:	480e      	ldr	r0, [pc, #56]	; (17fa4 <pdn_interface_close+0x1cc>)
   17f6a:	f004 fe55 	bl	1cc18 <strncmp>
   17f6e:	b948      	cbnz	r0, 17f84 <pdn_interface_close+0x1ac>
   17f70:	2008      	movs	r0, #8
   17f72:	f7fa f931 	bl	121d8 <bsd_os_errno_set>
   17f76:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   17f7a:	e74d      	b.n	17e18 <pdn_interface_close+0x40>
   17f7c:	2005      	movs	r0, #5
   17f7e:	f7fa f92b 	bl	121d8 <bsd_os_errno_set>
   17f82:	e796      	b.n	17eb2 <pdn_interface_close+0xda>
   17f84:	2005      	movs	r0, #5
   17f86:	f7fa f927 	bl	121d8 <bsd_os_errno_set>
   17f8a:	e7d7      	b.n	17f3c <pdn_interface_close+0x164>
   17f8c:	789a0000 	.word	0x789a0000
   17f90:	200212ec 	.word	0x200212ec
   17f94:	200211ec 	.word	0x200211ec
   17f98:	00020e6c 	.word	0x00020e6c
   17f9c:	00020eb4 	.word	0x00020eb4
   17fa0:	00020ea4 	.word	0x00020ea4
   17fa4:	00020f0c 	.word	0x00020f0c
   17fa8:	00020e78 	.word	0x00020e78
   17fac:	200211e8 	.word	0x200211e8

00017fb0 <pdn_interface_setopt>:
   17fb0:	b538      	push	{r3, r4, r5, lr}
   17fb2:	f240 2502 	movw	r5, #514	; 0x202
   17fb6:	42a9      	cmp	r1, r5
   17fb8:	9c04      	ldr	r4, [sp, #16]
   17fba:	d140      	bne.n	1803e <pdn_interface_setopt+0x8e>
   17fbc:	2b00      	cmp	r3, #0
   17fbe:	d03e      	beq.n	1803e <pdn_interface_setopt+0x8e>
   17fc0:	2c00      	cmp	r4, #0
   17fc2:	d03c      	beq.n	1803e <pdn_interface_setopt+0x8e>
   17fc4:	0c01      	lsrs	r1, r0, #16
   17fc6:	4d22      	ldr	r5, [pc, #136]	; (18050 <pdn_interface_setopt+0xa0>)
   17fc8:	0409      	lsls	r1, r1, #16
   17fca:	42a9      	cmp	r1, r5
   17fcc:	d005      	beq.n	17fda <pdn_interface_setopt+0x2a>
   17fce:	2009      	movs	r0, #9
   17fd0:	f7fa f902 	bl	121d8 <bsd_os_errno_set>
   17fd4:	f04f 30ff 	mov.w	r0, #4294967295
   17fd8:	bd38      	pop	{r3, r4, r5, pc}
   17fda:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   17fde:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   17fe2:	2809      	cmp	r0, #9
   17fe4:	dcf3      	bgt.n	17fce <pdn_interface_setopt+0x1e>
   17fe6:	491b      	ldr	r1, [pc, #108]	; (18054 <pdn_interface_setopt+0xa4>)
   17fe8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   17fec:	2900      	cmp	r1, #0
   17fee:	d0ee      	beq.n	17fce <pdn_interface_setopt+0x1e>
   17ff0:	6888      	ldr	r0, [r1, #8]
   17ff2:	2800      	cmp	r0, #0
   17ff4:	d0eb      	beq.n	17fce <pdn_interface_setopt+0x1e>
   17ff6:	2a01      	cmp	r2, #1
   17ff8:	d128      	bne.n	1804c <pdn_interface_setopt+0x9c>
   17ffa:	688a      	ldr	r2, [r1, #8]
   17ffc:	b1ea      	cbz	r2, 1803a <pdn_interface_setopt+0x8a>
   17ffe:	688a      	ldr	r2, [r1, #8]
   18000:	2a03      	cmp	r2, #3
   18002:	d01a      	beq.n	1803a <pdn_interface_setopt+0x8a>
   18004:	688a      	ldr	r2, [r1, #8]
   18006:	2a04      	cmp	r2, #4
   18008:	d017      	beq.n	1803a <pdn_interface_setopt+0x8a>
   1800a:	08a2      	lsrs	r2, r4, #2
   1800c:	1e50      	subs	r0, r2, #1
   1800e:	2801      	cmp	r0, #1
   18010:	d815      	bhi.n	1803e <pdn_interface_setopt+0x8e>
   18012:	07a0      	lsls	r0, r4, #30
   18014:	d113      	bne.n	1803e <pdn_interface_setopt+0x8e>
   18016:	6818      	ldr	r0, [r3, #0]
   18018:	2802      	cmp	r0, #2
   1801a:	d012      	beq.n	18042 <pdn_interface_setopt+0x92>
   1801c:	280a      	cmp	r0, #10
   1801e:	d10e      	bne.n	1803e <pdn_interface_setopt+0x8e>
   18020:	2002      	movs	r0, #2
   18022:	2a02      	cmp	r2, #2
   18024:	d106      	bne.n	18034 <pdn_interface_setopt+0x84>
   18026:	685b      	ldr	r3, [r3, #4]
   18028:	2b02      	cmp	r3, #2
   1802a:	d00c      	beq.n	18046 <pdn_interface_setopt+0x96>
   1802c:	2b0a      	cmp	r3, #10
   1802e:	d106      	bne.n	1803e <pdn_interface_setopt+0x8e>
   18030:	f040 0002 	orr.w	r0, r0, #2
   18034:	6708      	str	r0, [r1, #112]	; 0x70
   18036:	2000      	movs	r0, #0
   18038:	bd38      	pop	{r3, r4, r5, pc}
   1803a:	200e      	movs	r0, #14
   1803c:	e7c8      	b.n	17fd0 <pdn_interface_setopt+0x20>
   1803e:	2016      	movs	r0, #22
   18040:	e7c6      	b.n	17fd0 <pdn_interface_setopt+0x20>
   18042:	2001      	movs	r0, #1
   18044:	e7ed      	b.n	18022 <pdn_interface_setopt+0x72>
   18046:	f040 0001 	orr.w	r0, r0, #1
   1804a:	e7f3      	b.n	18034 <pdn_interface_setopt+0x84>
   1804c:	202d      	movs	r0, #45	; 0x2d
   1804e:	e7bf      	b.n	17fd0 <pdn_interface_setopt+0x20>
   18050:	789a0000 	.word	0x789a0000
   18054:	200212ec 	.word	0x200212ec

00018058 <pdn_interface_getopt>:
   18058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1805c:	f240 2402 	movw	r4, #514	; 0x202
   18060:	b083      	sub	sp, #12
   18062:	42a1      	cmp	r1, r4
   18064:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   18066:	f040 809f 	bne.w	181a8 <pdn_interface_getopt+0x150>
   1806a:	461e      	mov	r6, r3
   1806c:	2b00      	cmp	r3, #0
   1806e:	f000 809b 	beq.w	181a8 <pdn_interface_getopt+0x150>
   18072:	2d00      	cmp	r5, #0
   18074:	f000 8098 	beq.w	181a8 <pdn_interface_getopt+0x150>
   18078:	0c03      	lsrs	r3, r0, #16
   1807a:	4955      	ldr	r1, [pc, #340]	; (181d0 <pdn_interface_getopt+0x178>)
   1807c:	041b      	lsls	r3, r3, #16
   1807e:	428b      	cmp	r3, r1
   18080:	f040 8094 	bne.w	181ac <pdn_interface_getopt+0x154>
   18084:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   18088:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1808c:	2c09      	cmp	r4, #9
   1808e:	f300 808d 	bgt.w	181ac <pdn_interface_getopt+0x154>
   18092:	4b50      	ldr	r3, [pc, #320]	; (181d4 <pdn_interface_getopt+0x17c>)
   18094:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   18098:	2b00      	cmp	r3, #0
   1809a:	f000 8087 	beq.w	181ac <pdn_interface_getopt+0x154>
   1809e:	6899      	ldr	r1, [r3, #8]
   180a0:	2900      	cmp	r1, #0
   180a2:	f000 8083 	beq.w	181ac <pdn_interface_getopt+0x154>
   180a6:	2a02      	cmp	r2, #2
   180a8:	d04c      	beq.n	18144 <pdn_interface_getopt+0xec>
   180aa:	2a03      	cmp	r2, #3
   180ac:	d009      	beq.n	180c2 <pdn_interface_getopt+0x6a>
   180ae:	2a01      	cmp	r2, #1
   180b0:	d052      	beq.n	18158 <pdn_interface_getopt+0x100>
   180b2:	202d      	movs	r0, #45	; 0x2d
   180b4:	f7fa f890 	bl	121d8 <bsd_os_errno_set>
   180b8:	f04f 30ff 	mov.w	r0, #4294967295
   180bc:	b003      	add	sp, #12
   180be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   180c2:	682b      	ldr	r3, [r5, #0]
   180c4:	2b00      	cmp	r3, #0
   180c6:	d06f      	beq.n	181a8 <pdn_interface_getopt+0x150>
   180c8:	4a43      	ldr	r2, [pc, #268]	; (181d8 <pdn_interface_getopt+0x180>)
   180ca:	f44f 7180 	mov.w	r1, #256	; 0x100
   180ce:	4843      	ldr	r0, [pc, #268]	; (181dc <pdn_interface_getopt+0x184>)
   180d0:	f8df 8114 	ldr.w	r8, [pc, #276]	; 181e8 <pdn_interface_getopt+0x190>
   180d4:	f7f7 f9d8 	bl	f488 <snprintf>
   180d8:	4840      	ldr	r0, [pc, #256]	; (181dc <pdn_interface_getopt+0x184>)
   180da:	f8d8 9000 	ldr.w	r9, [r8]
   180de:	2700      	movs	r7, #0
   180e0:	f004 fd87 	bl	1cbf2 <strlen>
   180e4:	463b      	mov	r3, r7
   180e6:	4602      	mov	r2, r0
   180e8:	493c      	ldr	r1, [pc, #240]	; (181dc <pdn_interface_getopt+0x184>)
   180ea:	4648      	mov	r0, r9
   180ec:	9701      	str	r7, [sp, #4]
   180ee:	9700      	str	r7, [sp, #0]
   180f0:	f7ff f982 	bl	173f8 <at_interface_write>
   180f4:	4681      	mov	r9, r0
   180f6:	4839      	ldr	r0, [pc, #228]	; (181dc <pdn_interface_getopt+0x184>)
   180f8:	f004 fd7b 	bl	1cbf2 <strlen>
   180fc:	4548      	cmp	r0, r9
   180fe:	d160      	bne.n	181c2 <pdn_interface_getopt+0x16a>
   18100:	463b      	mov	r3, r7
   18102:	e9cd 7700 	strd	r7, r7, [sp]
   18106:	f44f 7280 	mov.w	r2, #256	; 0x100
   1810a:	4934      	ldr	r1, [pc, #208]	; (181dc <pdn_interface_getopt+0x184>)
   1810c:	f8d8 0000 	ldr.w	r0, [r8]
   18110:	f7ff faa8 	bl	17664 <at_interface_read>
   18114:	4607      	mov	r7, r0
   18116:	4832      	ldr	r0, [pc, #200]	; (181e0 <pdn_interface_getopt+0x188>)
   18118:	f004 fd6b 	bl	1cbf2 <strlen>
   1811c:	4287      	cmp	r7, r0
   1811e:	db32      	blt.n	18186 <pdn_interface_getopt+0x12e>
   18120:	4602      	mov	r2, r0
   18122:	492e      	ldr	r1, [pc, #184]	; (181dc <pdn_interface_getopt+0x184>)
   18124:	482e      	ldr	r0, [pc, #184]	; (181e0 <pdn_interface_getopt+0x188>)
   18126:	f004 fd77 	bl	1cc18 <strncmp>
   1812a:	4607      	mov	r7, r0
   1812c:	bb58      	cbnz	r0, 18186 <pdn_interface_getopt+0x12e>
   1812e:	4620      	mov	r0, r4
   18130:	492a      	ldr	r1, [pc, #168]	; (181dc <pdn_interface_getopt+0x184>)
   18132:	f7ff fb45 	bl	177c0 <pdn_state_get_parser>
   18136:	2800      	cmp	r0, #0
   18138:	dbbc      	blt.n	180b4 <pdn_interface_getopt+0x5c>
   1813a:	2301      	movs	r3, #1
   1813c:	7030      	strb	r0, [r6, #0]
   1813e:	4638      	mov	r0, r7
   18140:	602b      	str	r3, [r5, #0]
   18142:	e7bb      	b.n	180bc <pdn_interface_getopt+0x64>
   18144:	682a      	ldr	r2, [r5, #0]
   18146:	b37a      	cbz	r2, 181a8 <pdn_interface_getopt+0x150>
   18148:	2201      	movs	r2, #1
   1814a:	2000      	movs	r0, #0
   1814c:	681b      	ldr	r3, [r3, #0]
   1814e:	7033      	strb	r3, [r6, #0]
   18150:	602a      	str	r2, [r5, #0]
   18152:	b003      	add	sp, #12
   18154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18158:	689a      	ldr	r2, [r3, #8]
   1815a:	b31a      	cbz	r2, 181a4 <pdn_interface_getopt+0x14c>
   1815c:	689a      	ldr	r2, [r3, #8]
   1815e:	2a04      	cmp	r2, #4
   18160:	d020      	beq.n	181a4 <pdn_interface_getopt+0x14c>
   18162:	682a      	ldr	r2, [r5, #0]
   18164:	2a07      	cmp	r2, #7
   18166:	d91f      	bls.n	181a8 <pdn_interface_getopt+0x150>
   18168:	f012 0203 	ands.w	r2, r2, #3
   1816c:	d11c      	bne.n	181a8 <pdn_interface_getopt+0x150>
   1816e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   18170:	0799      	lsls	r1, r3, #30
   18172:	d421      	bmi.n	181b8 <pdn_interface_getopt+0x160>
   18174:	2104      	movs	r1, #4
   18176:	07db      	lsls	r3, r3, #31
   18178:	d502      	bpl.n	18180 <pdn_interface_getopt+0x128>
   1817a:	2302      	movs	r3, #2
   1817c:	50b3      	str	r3, [r6, r2]
   1817e:	460a      	mov	r2, r1
   18180:	602a      	str	r2, [r5, #0]
   18182:	2000      	movs	r0, #0
   18184:	e79a      	b.n	180bc <pdn_interface_getopt+0x64>
   18186:	4817      	ldr	r0, [pc, #92]	; (181e4 <pdn_interface_getopt+0x18c>)
   18188:	f004 fd33 	bl	1cbf2 <strlen>
   1818c:	4913      	ldr	r1, [pc, #76]	; (181dc <pdn_interface_getopt+0x184>)
   1818e:	4602      	mov	r2, r0
   18190:	4814      	ldr	r0, [pc, #80]	; (181e4 <pdn_interface_getopt+0x18c>)
   18192:	f004 fd41 	bl	1cc18 <strncmp>
   18196:	b9a0      	cbnz	r0, 181c2 <pdn_interface_getopt+0x16a>
   18198:	2008      	movs	r0, #8
   1819a:	f7fa f81d 	bl	121d8 <bsd_os_errno_set>
   1819e:	f04f 30ff 	mov.w	r0, #4294967295
   181a2:	e787      	b.n	180b4 <pdn_interface_getopt+0x5c>
   181a4:	200e      	movs	r0, #14
   181a6:	e785      	b.n	180b4 <pdn_interface_getopt+0x5c>
   181a8:	2016      	movs	r0, #22
   181aa:	e783      	b.n	180b4 <pdn_interface_getopt+0x5c>
   181ac:	2009      	movs	r0, #9
   181ae:	f7fa f813 	bl	121d8 <bsd_os_errno_set>
   181b2:	f04f 30ff 	mov.w	r0, #4294967295
   181b6:	e781      	b.n	180bc <pdn_interface_getopt+0x64>
   181b8:	220a      	movs	r2, #10
   181ba:	2108      	movs	r1, #8
   181bc:	6032      	str	r2, [r6, #0]
   181be:	2204      	movs	r2, #4
   181c0:	e7d9      	b.n	18176 <pdn_interface_getopt+0x11e>
   181c2:	2005      	movs	r0, #5
   181c4:	f7fa f808 	bl	121d8 <bsd_os_errno_set>
   181c8:	f04f 30ff 	mov.w	r0, #4294967295
   181cc:	e772      	b.n	180b4 <pdn_interface_getopt+0x5c>
   181ce:	bf00      	nop
   181d0:	789a0000 	.word	0x789a0000
   181d4:	200212ec 	.word	0x200212ec
   181d8:	00020edc 	.word	0x00020edc
   181dc:	200211ec 	.word	0x200211ec
   181e0:	00020ee8 	.word	0x00020ee8
   181e4:	00020f0c 	.word	0x00020f0c
   181e8:	200211e8 	.word	0x200211e8

000181ec <pdn_interface_pdn_id_get>:
   181ec:	2900      	cmp	r1, #0
   181ee:	f000 83b9 	beq.w	18964 <pdn_interface_pdn_id_get+0x778>
   181f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   181f6:	4ca3      	ldr	r4, [pc, #652]	; (18484 <pdn_interface_pdn_id_get+0x298>)
   181f8:	2802      	cmp	r0, #2
   181fa:	b083      	sub	sp, #12
   181fc:	460d      	mov	r5, r1
   181fe:	6823      	ldr	r3, [r4, #0]
   18200:	f000 8094 	beq.w	1832c <pdn_interface_pdn_id_get+0x140>
   18204:	280a      	cmp	r0, #10
   18206:	d03f      	beq.n	18288 <pdn_interface_pdn_id_get+0x9c>
   18208:	b11b      	cbz	r3, 18212 <pdn_interface_pdn_id_get+0x26>
   1820a:	689b      	ldr	r3, [r3, #8]
   1820c:	2b03      	cmp	r3, #3
   1820e:	f000 8127 	beq.w	18460 <pdn_interface_pdn_id_get+0x274>
   18212:	6863      	ldr	r3, [r4, #4]
   18214:	b11b      	cbz	r3, 1821e <pdn_interface_pdn_id_get+0x32>
   18216:	689b      	ldr	r3, [r3, #8]
   18218:	2b03      	cmp	r3, #3
   1821a:	f000 8110 	beq.w	1843e <pdn_interface_pdn_id_get+0x252>
   1821e:	68a3      	ldr	r3, [r4, #8]
   18220:	b11b      	cbz	r3, 1822a <pdn_interface_pdn_id_get+0x3e>
   18222:	689b      	ldr	r3, [r3, #8]
   18224:	2b03      	cmp	r3, #3
   18226:	f000 80f9 	beq.w	1841c <pdn_interface_pdn_id_get+0x230>
   1822a:	68e3      	ldr	r3, [r4, #12]
   1822c:	b11b      	cbz	r3, 18236 <pdn_interface_pdn_id_get+0x4a>
   1822e:	689b      	ldr	r3, [r3, #8]
   18230:	2b03      	cmp	r3, #3
   18232:	f000 80e2 	beq.w	183fa <pdn_interface_pdn_id_get+0x20e>
   18236:	6923      	ldr	r3, [r4, #16]
   18238:	b11b      	cbz	r3, 18242 <pdn_interface_pdn_id_get+0x56>
   1823a:	689b      	ldr	r3, [r3, #8]
   1823c:	2b03      	cmp	r3, #3
   1823e:	f000 8123 	beq.w	18488 <pdn_interface_pdn_id_get+0x29c>
   18242:	6963      	ldr	r3, [r4, #20]
   18244:	b11b      	cbz	r3, 1824e <pdn_interface_pdn_id_get+0x62>
   18246:	689b      	ldr	r3, [r3, #8]
   18248:	2b03      	cmp	r3, #3
   1824a:	f000 8161 	beq.w	18510 <pdn_interface_pdn_id_get+0x324>
   1824e:	69a3      	ldr	r3, [r4, #24]
   18250:	b11b      	cbz	r3, 1825a <pdn_interface_pdn_id_get+0x6e>
   18252:	689b      	ldr	r3, [r3, #8]
   18254:	2b03      	cmp	r3, #3
   18256:	f000 814a 	beq.w	184ee <pdn_interface_pdn_id_get+0x302>
   1825a:	69e3      	ldr	r3, [r4, #28]
   1825c:	b11b      	cbz	r3, 18266 <pdn_interface_pdn_id_get+0x7a>
   1825e:	689b      	ldr	r3, [r3, #8]
   18260:	2b03      	cmp	r3, #3
   18262:	f000 8133 	beq.w	184cc <pdn_interface_pdn_id_get+0x2e0>
   18266:	6a23      	ldr	r3, [r4, #32]
   18268:	b11b      	cbz	r3, 18272 <pdn_interface_pdn_id_get+0x86>
   1826a:	689b      	ldr	r3, [r3, #8]
   1826c:	2b03      	cmp	r3, #3
   1826e:	f000 811c 	beq.w	184aa <pdn_interface_pdn_id_get+0x2be>
   18272:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18274:	b11b      	cbz	r3, 1827e <pdn_interface_pdn_id_get+0x92>
   18276:	689b      	ldr	r3, [r3, #8]
   18278:	2b03      	cmp	r3, #3
   1827a:	f000 80ad 	beq.w	183d8 <pdn_interface_pdn_id_get+0x1ec>
   1827e:	f04f 30ff 	mov.w	r0, #4294967295
   18282:	b003      	add	sp, #12
   18284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18288:	b11b      	cbz	r3, 18292 <pdn_interface_pdn_id_get+0xa6>
   1828a:	689b      	ldr	r3, [r3, #8]
   1828c:	2b03      	cmp	r3, #3
   1828e:	f000 8335 	beq.w	188fc <pdn_interface_pdn_id_get+0x710>
   18292:	6863      	ldr	r3, [r4, #4]
   18294:	b11b      	cbz	r3, 1829e <pdn_interface_pdn_id_get+0xb2>
   18296:	689b      	ldr	r3, [r3, #8]
   18298:	2b03      	cmp	r3, #3
   1829a:	f000 82fd 	beq.w	18898 <pdn_interface_pdn_id_get+0x6ac>
   1829e:	68a3      	ldr	r3, [r4, #8]
   182a0:	b11b      	cbz	r3, 182aa <pdn_interface_pdn_id_get+0xbe>
   182a2:	689b      	ldr	r3, [r3, #8]
   182a4:	2b03      	cmp	r3, #3
   182a6:	f000 82d5 	beq.w	18854 <pdn_interface_pdn_id_get+0x668>
   182aa:	68e3      	ldr	r3, [r4, #12]
   182ac:	b11b      	cbz	r3, 182b6 <pdn_interface_pdn_id_get+0xca>
   182ae:	689e      	ldr	r6, [r3, #8]
   182b0:	2e03      	cmp	r6, #3
   182b2:	f000 81f0 	beq.w	18696 <pdn_interface_pdn_id_get+0x4aa>
   182b6:	6923      	ldr	r3, [r4, #16]
   182b8:	b11b      	cbz	r3, 182c2 <pdn_interface_pdn_id_get+0xd6>
   182ba:	689b      	ldr	r3, [r3, #8]
   182bc:	2b03      	cmp	r3, #3
   182be:	f000 8203 	beq.w	186c8 <pdn_interface_pdn_id_get+0x4dc>
   182c2:	6963      	ldr	r3, [r4, #20]
   182c4:	b11b      	cbz	r3, 182ce <pdn_interface_pdn_id_get+0xe2>
   182c6:	689b      	ldr	r3, [r3, #8]
   182c8:	2b03      	cmp	r3, #3
   182ca:	f000 8215 	beq.w	186f8 <pdn_interface_pdn_id_get+0x50c>
   182ce:	69a3      	ldr	r3, [r4, #24]
   182d0:	b11b      	cbz	r3, 182da <pdn_interface_pdn_id_get+0xee>
   182d2:	689b      	ldr	r3, [r3, #8]
   182d4:	2b03      	cmp	r3, #3
   182d6:	f000 8227 	beq.w	18728 <pdn_interface_pdn_id_get+0x53c>
   182da:	69e3      	ldr	r3, [r4, #28]
   182dc:	b11b      	cbz	r3, 182e6 <pdn_interface_pdn_id_get+0xfa>
   182de:	689b      	ldr	r3, [r3, #8]
   182e0:	2b03      	cmp	r3, #3
   182e2:	f000 8239 	beq.w	18758 <pdn_interface_pdn_id_get+0x56c>
   182e6:	6a23      	ldr	r3, [r4, #32]
   182e8:	b11b      	cbz	r3, 182f2 <pdn_interface_pdn_id_get+0x106>
   182ea:	689b      	ldr	r3, [r3, #8]
   182ec:	2b03      	cmp	r3, #3
   182ee:	f000 824d 	beq.w	1878c <pdn_interface_pdn_id_get+0x5a0>
   182f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   182f4:	2b00      	cmp	r3, #0
   182f6:	d0c2      	beq.n	1827e <pdn_interface_pdn_id_get+0x92>
   182f8:	689b      	ldr	r3, [r3, #8]
   182fa:	2b03      	cmp	r3, #3
   182fc:	d1bf      	bne.n	1827e <pdn_interface_pdn_id_get+0x92>
   182fe:	4628      	mov	r0, r5
   18300:	f004 fc77 	bl	1cbf2 <strlen>
   18304:	4606      	mov	r6, r0
   18306:	6a60      	ldr	r0, [r4, #36]	; 0x24
   18308:	300c      	adds	r0, #12
   1830a:	f004 fc72 	bl	1cbf2 <strlen>
   1830e:	42b0      	cmp	r0, r6
   18310:	d1b5      	bne.n	1827e <pdn_interface_pdn_id_get+0x92>
   18312:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18314:	4628      	mov	r0, r5
   18316:	310c      	adds	r1, #12
   18318:	f004 fc72 	bl	1cc00 <strcmp>
   1831c:	2800      	cmp	r0, #0
   1831e:	d1ae      	bne.n	1827e <pdn_interface_pdn_id_get+0x92>
   18320:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18324:	0792      	lsls	r2, r2, #30
   18326:	d5aa      	bpl.n	1827e <pdn_interface_pdn_id_get+0x92>
   18328:	2609      	movs	r6, #9
   1832a:	e11a      	b.n	18562 <pdn_interface_pdn_id_get+0x376>
   1832c:	b11b      	cbz	r3, 18336 <pdn_interface_pdn_id_get+0x14a>
   1832e:	689b      	ldr	r3, [r3, #8]
   18330:	2b03      	cmp	r3, #3
   18332:	f000 82fd 	beq.w	18930 <pdn_interface_pdn_id_get+0x744>
   18336:	6863      	ldr	r3, [r4, #4]
   18338:	b11b      	cbz	r3, 18342 <pdn_interface_pdn_id_get+0x156>
   1833a:	689b      	ldr	r3, [r3, #8]
   1833c:	2b03      	cmp	r3, #3
   1833e:	f000 82c5 	beq.w	188cc <pdn_interface_pdn_id_get+0x6e0>
   18342:	68a3      	ldr	r3, [r4, #8]
   18344:	b11b      	cbz	r3, 1834e <pdn_interface_pdn_id_get+0x162>
   18346:	689b      	ldr	r3, [r3, #8]
   18348:	2b03      	cmp	r3, #3
   1834a:	f000 8269 	beq.w	18820 <pdn_interface_pdn_id_get+0x634>
   1834e:	68e3      	ldr	r3, [r4, #12]
   18350:	b11b      	cbz	r3, 1835a <pdn_interface_pdn_id_get+0x16e>
   18352:	689e      	ldr	r6, [r3, #8]
   18354:	2e03      	cmp	r6, #3
   18356:	f000 80ec 	beq.w	18532 <pdn_interface_pdn_id_get+0x346>
   1835a:	6923      	ldr	r3, [r4, #16]
   1835c:	b11b      	cbz	r3, 18366 <pdn_interface_pdn_id_get+0x17a>
   1835e:	689b      	ldr	r3, [r3, #8]
   18360:	2b03      	cmp	r3, #3
   18362:	f000 814a 	beq.w	185fa <pdn_interface_pdn_id_get+0x40e>
   18366:	6963      	ldr	r3, [r4, #20]
   18368:	b11b      	cbz	r3, 18372 <pdn_interface_pdn_id_get+0x186>
   1836a:	689b      	ldr	r3, [r3, #8]
   1836c:	2b03      	cmp	r3, #3
   1836e:	f000 815e 	beq.w	1862e <pdn_interface_pdn_id_get+0x442>
   18372:	69a3      	ldr	r3, [r4, #24]
   18374:	b11b      	cbz	r3, 1837e <pdn_interface_pdn_id_get+0x192>
   18376:	689b      	ldr	r3, [r3, #8]
   18378:	2b03      	cmp	r3, #3
   1837a:	f000 8172 	beq.w	18662 <pdn_interface_pdn_id_get+0x476>
   1837e:	69e3      	ldr	r3, [r4, #28]
   18380:	b11b      	cbz	r3, 1838a <pdn_interface_pdn_id_get+0x19e>
   18382:	689b      	ldr	r3, [r3, #8]
   18384:	2b03      	cmp	r3, #3
   18386:	f000 821b 	beq.w	187c0 <pdn_interface_pdn_id_get+0x5d4>
   1838a:	6a23      	ldr	r3, [r4, #32]
   1838c:	b11b      	cbz	r3, 18396 <pdn_interface_pdn_id_get+0x1aa>
   1838e:	689b      	ldr	r3, [r3, #8]
   18390:	2b03      	cmp	r3, #3
   18392:	f000 822d 	beq.w	187f0 <pdn_interface_pdn_id_get+0x604>
   18396:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18398:	2b00      	cmp	r3, #0
   1839a:	f43f af70 	beq.w	1827e <pdn_interface_pdn_id_get+0x92>
   1839e:	689b      	ldr	r3, [r3, #8]
   183a0:	2b03      	cmp	r3, #3
   183a2:	f47f af6c 	bne.w	1827e <pdn_interface_pdn_id_get+0x92>
   183a6:	4628      	mov	r0, r5
   183a8:	f004 fc23 	bl	1cbf2 <strlen>
   183ac:	4606      	mov	r6, r0
   183ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   183b0:	300c      	adds	r0, #12
   183b2:	f004 fc1e 	bl	1cbf2 <strlen>
   183b6:	4286      	cmp	r6, r0
   183b8:	f47f af61 	bne.w	1827e <pdn_interface_pdn_id_get+0x92>
   183bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   183be:	4628      	mov	r0, r5
   183c0:	310c      	adds	r1, #12
   183c2:	f004 fc1d 	bl	1cc00 <strcmp>
   183c6:	2800      	cmp	r0, #0
   183c8:	f47f af59 	bne.w	1827e <pdn_interface_pdn_id_get+0x92>
   183cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   183ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   183d0:	07d2      	lsls	r2, r2, #31
   183d2:	f57f af54 	bpl.w	1827e <pdn_interface_pdn_id_get+0x92>
   183d6:	e7a7      	b.n	18328 <pdn_interface_pdn_id_get+0x13c>
   183d8:	4628      	mov	r0, r5
   183da:	f004 fc0a 	bl	1cbf2 <strlen>
   183de:	4606      	mov	r6, r0
   183e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   183e2:	300c      	adds	r0, #12
   183e4:	f004 fc05 	bl	1cbf2 <strlen>
   183e8:	42b0      	cmp	r0, r6
   183ea:	f47f af48 	bne.w	1827e <pdn_interface_pdn_id_get+0x92>
   183ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
   183f0:	4628      	mov	r0, r5
   183f2:	310c      	adds	r1, #12
   183f4:	f004 fc04 	bl	1cc00 <strcmp>
   183f8:	e741      	b.n	1827e <pdn_interface_pdn_id_get+0x92>
   183fa:	4628      	mov	r0, r5
   183fc:	f004 fbf9 	bl	1cbf2 <strlen>
   18400:	4606      	mov	r6, r0
   18402:	68e0      	ldr	r0, [r4, #12]
   18404:	300c      	adds	r0, #12
   18406:	f004 fbf4 	bl	1cbf2 <strlen>
   1840a:	4286      	cmp	r6, r0
   1840c:	f47f af13 	bne.w	18236 <pdn_interface_pdn_id_get+0x4a>
   18410:	68e1      	ldr	r1, [r4, #12]
   18412:	4628      	mov	r0, r5
   18414:	310c      	adds	r1, #12
   18416:	f004 fbf3 	bl	1cc00 <strcmp>
   1841a:	e70c      	b.n	18236 <pdn_interface_pdn_id_get+0x4a>
   1841c:	4628      	mov	r0, r5
   1841e:	f004 fbe8 	bl	1cbf2 <strlen>
   18422:	4606      	mov	r6, r0
   18424:	68a0      	ldr	r0, [r4, #8]
   18426:	300c      	adds	r0, #12
   18428:	f004 fbe3 	bl	1cbf2 <strlen>
   1842c:	4286      	cmp	r6, r0
   1842e:	f47f aefc 	bne.w	1822a <pdn_interface_pdn_id_get+0x3e>
   18432:	68a1      	ldr	r1, [r4, #8]
   18434:	4628      	mov	r0, r5
   18436:	310c      	adds	r1, #12
   18438:	f004 fbe2 	bl	1cc00 <strcmp>
   1843c:	e6f5      	b.n	1822a <pdn_interface_pdn_id_get+0x3e>
   1843e:	4628      	mov	r0, r5
   18440:	f004 fbd7 	bl	1cbf2 <strlen>
   18444:	4606      	mov	r6, r0
   18446:	6860      	ldr	r0, [r4, #4]
   18448:	300c      	adds	r0, #12
   1844a:	f004 fbd2 	bl	1cbf2 <strlen>
   1844e:	4286      	cmp	r6, r0
   18450:	f47f aee5 	bne.w	1821e <pdn_interface_pdn_id_get+0x32>
   18454:	6861      	ldr	r1, [r4, #4]
   18456:	4628      	mov	r0, r5
   18458:	310c      	adds	r1, #12
   1845a:	f004 fbd1 	bl	1cc00 <strcmp>
   1845e:	e6de      	b.n	1821e <pdn_interface_pdn_id_get+0x32>
   18460:	4608      	mov	r0, r1
   18462:	f004 fbc6 	bl	1cbf2 <strlen>
   18466:	4606      	mov	r6, r0
   18468:	6820      	ldr	r0, [r4, #0]
   1846a:	300c      	adds	r0, #12
   1846c:	f004 fbc1 	bl	1cbf2 <strlen>
   18470:	4286      	cmp	r6, r0
   18472:	f47f aece 	bne.w	18212 <pdn_interface_pdn_id_get+0x26>
   18476:	6821      	ldr	r1, [r4, #0]
   18478:	4628      	mov	r0, r5
   1847a:	310c      	adds	r1, #12
   1847c:	f004 fbc0 	bl	1cc00 <strcmp>
   18480:	e6c7      	b.n	18212 <pdn_interface_pdn_id_get+0x26>
   18482:	bf00      	nop
   18484:	200212ec 	.word	0x200212ec
   18488:	4628      	mov	r0, r5
   1848a:	f004 fbb2 	bl	1cbf2 <strlen>
   1848e:	4606      	mov	r6, r0
   18490:	6920      	ldr	r0, [r4, #16]
   18492:	300c      	adds	r0, #12
   18494:	f004 fbad 	bl	1cbf2 <strlen>
   18498:	4286      	cmp	r6, r0
   1849a:	f47f aed2 	bne.w	18242 <pdn_interface_pdn_id_get+0x56>
   1849e:	6921      	ldr	r1, [r4, #16]
   184a0:	4628      	mov	r0, r5
   184a2:	310c      	adds	r1, #12
   184a4:	f004 fbac 	bl	1cc00 <strcmp>
   184a8:	e6cb      	b.n	18242 <pdn_interface_pdn_id_get+0x56>
   184aa:	4628      	mov	r0, r5
   184ac:	f004 fba1 	bl	1cbf2 <strlen>
   184b0:	4606      	mov	r6, r0
   184b2:	6a20      	ldr	r0, [r4, #32]
   184b4:	300c      	adds	r0, #12
   184b6:	f004 fb9c 	bl	1cbf2 <strlen>
   184ba:	4286      	cmp	r6, r0
   184bc:	f47f aed9 	bne.w	18272 <pdn_interface_pdn_id_get+0x86>
   184c0:	6a21      	ldr	r1, [r4, #32]
   184c2:	4628      	mov	r0, r5
   184c4:	310c      	adds	r1, #12
   184c6:	f004 fb9b 	bl	1cc00 <strcmp>
   184ca:	e6d2      	b.n	18272 <pdn_interface_pdn_id_get+0x86>
   184cc:	4628      	mov	r0, r5
   184ce:	f004 fb90 	bl	1cbf2 <strlen>
   184d2:	4606      	mov	r6, r0
   184d4:	69e0      	ldr	r0, [r4, #28]
   184d6:	300c      	adds	r0, #12
   184d8:	f004 fb8b 	bl	1cbf2 <strlen>
   184dc:	4286      	cmp	r6, r0
   184de:	f47f aec2 	bne.w	18266 <pdn_interface_pdn_id_get+0x7a>
   184e2:	69e1      	ldr	r1, [r4, #28]
   184e4:	4628      	mov	r0, r5
   184e6:	310c      	adds	r1, #12
   184e8:	f004 fb8a 	bl	1cc00 <strcmp>
   184ec:	e6bb      	b.n	18266 <pdn_interface_pdn_id_get+0x7a>
   184ee:	4628      	mov	r0, r5
   184f0:	f004 fb7f 	bl	1cbf2 <strlen>
   184f4:	4606      	mov	r6, r0
   184f6:	69a0      	ldr	r0, [r4, #24]
   184f8:	300c      	adds	r0, #12
   184fa:	f004 fb7a 	bl	1cbf2 <strlen>
   184fe:	4286      	cmp	r6, r0
   18500:	f47f aeab 	bne.w	1825a <pdn_interface_pdn_id_get+0x6e>
   18504:	69a1      	ldr	r1, [r4, #24]
   18506:	4628      	mov	r0, r5
   18508:	310c      	adds	r1, #12
   1850a:	f004 fb79 	bl	1cc00 <strcmp>
   1850e:	e6a4      	b.n	1825a <pdn_interface_pdn_id_get+0x6e>
   18510:	4628      	mov	r0, r5
   18512:	f004 fb6e 	bl	1cbf2 <strlen>
   18516:	4606      	mov	r6, r0
   18518:	6960      	ldr	r0, [r4, #20]
   1851a:	300c      	adds	r0, #12
   1851c:	f004 fb69 	bl	1cbf2 <strlen>
   18520:	4286      	cmp	r6, r0
   18522:	f47f ae94 	bne.w	1824e <pdn_interface_pdn_id_get+0x62>
   18526:	6961      	ldr	r1, [r4, #20]
   18528:	4628      	mov	r0, r5
   1852a:	310c      	adds	r1, #12
   1852c:	f004 fb68 	bl	1cc00 <strcmp>
   18530:	e68d      	b.n	1824e <pdn_interface_pdn_id_get+0x62>
   18532:	4628      	mov	r0, r5
   18534:	f004 fb5d 	bl	1cbf2 <strlen>
   18538:	4607      	mov	r7, r0
   1853a:	68e0      	ldr	r0, [r4, #12]
   1853c:	300c      	adds	r0, #12
   1853e:	f004 fb58 	bl	1cbf2 <strlen>
   18542:	4287      	cmp	r7, r0
   18544:	f47f af09 	bne.w	1835a <pdn_interface_pdn_id_get+0x16e>
   18548:	68e1      	ldr	r1, [r4, #12]
   1854a:	4628      	mov	r0, r5
   1854c:	310c      	adds	r1, #12
   1854e:	f004 fb57 	bl	1cc00 <strcmp>
   18552:	2800      	cmp	r0, #0
   18554:	f47f af01 	bne.w	1835a <pdn_interface_pdn_id_get+0x16e>
   18558:	68e3      	ldr	r3, [r4, #12]
   1855a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1855c:	07d1      	lsls	r1, r2, #31
   1855e:	f57f aefc 	bpl.w	1835a <pdn_interface_pdn_id_get+0x16e>
   18562:	6858      	ldr	r0, [r3, #4]
   18564:	1c43      	adds	r3, r0, #1
   18566:	f47f ae8c 	bne.w	18282 <pdn_interface_pdn_id_get+0x96>
   1856a:	4dc6      	ldr	r5, [pc, #792]	; (18884 <pdn_interface_pdn_id_get+0x698>)
   1856c:	4ac6      	ldr	r2, [pc, #792]	; (18888 <pdn_interface_pdn_id_get+0x69c>)
   1856e:	f44f 7180 	mov.w	r1, #256	; 0x100
   18572:	4628      	mov	r0, r5
   18574:	f7f6 ff88 	bl	f488 <snprintf>
   18578:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1857c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18580:	681b      	ldr	r3, [r3, #0]
   18582:	4ac2      	ldr	r2, [pc, #776]	; (1888c <pdn_interface_pdn_id_get+0x6a0>)
   18584:	4428      	add	r0, r5
   18586:	f8df 830c 	ldr.w	r8, [pc, #780]	; 18894 <pdn_interface_pdn_id_get+0x6a8>
   1858a:	f7f6 ff7d 	bl	f488 <snprintf>
   1858e:	4628      	mov	r0, r5
   18590:	f8d8 9000 	ldr.w	r9, [r8]
   18594:	2700      	movs	r7, #0
   18596:	f004 fb2c 	bl	1cbf2 <strlen>
   1859a:	4629      	mov	r1, r5
   1859c:	4602      	mov	r2, r0
   1859e:	463b      	mov	r3, r7
   185a0:	4648      	mov	r0, r9
   185a2:	9701      	str	r7, [sp, #4]
   185a4:	9700      	str	r7, [sp, #0]
   185a6:	f7fe ff27 	bl	173f8 <at_interface_write>
   185aa:	4681      	mov	r9, r0
   185ac:	4628      	mov	r0, r5
   185ae:	f004 fb20 	bl	1cbf2 <strlen>
   185b2:	4548      	cmp	r0, r9
   185b4:	f040 81e9 	bne.w	1898a <pdn_interface_pdn_id_get+0x79e>
   185b8:	463b      	mov	r3, r7
   185ba:	f44f 7280 	mov.w	r2, #256	; 0x100
   185be:	e9cd 7700 	strd	r7, r7, [sp]
   185c2:	4629      	mov	r1, r5
   185c4:	f8d8 0000 	ldr.w	r0, [r8]
   185c8:	f7ff f84c 	bl	17664 <at_interface_read>
   185cc:	4607      	mov	r7, r0
   185ce:	48b0      	ldr	r0, [pc, #704]	; (18890 <pdn_interface_pdn_id_get+0x6a4>)
   185d0:	f004 fb0f 	bl	1cbf2 <strlen>
   185d4:	4287      	cmp	r7, r0
   185d6:	4602      	mov	r2, r0
   185d8:	f2c0 81c7 	blt.w	1896a <pdn_interface_pdn_id_get+0x77e>
   185dc:	4629      	mov	r1, r5
   185de:	48ac      	ldr	r0, [pc, #688]	; (18890 <pdn_interface_pdn_id_get+0x6a4>)
   185e0:	f004 fb1a 	bl	1cc18 <strncmp>
   185e4:	2800      	cmp	r0, #0
   185e6:	f040 81c0 	bne.w	1896a <pdn_interface_pdn_id_get+0x77e>
   185ea:	4629      	mov	r1, r5
   185ec:	4630      	mov	r0, r6
   185ee:	f7ff f91d 	bl	1782c <pdn_id_get_parser>
   185f2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   185f6:	6858      	ldr	r0, [r3, #4]
   185f8:	e643      	b.n	18282 <pdn_interface_pdn_id_get+0x96>
   185fa:	4628      	mov	r0, r5
   185fc:	f004 faf9 	bl	1cbf2 <strlen>
   18600:	4606      	mov	r6, r0
   18602:	6920      	ldr	r0, [r4, #16]
   18604:	300c      	adds	r0, #12
   18606:	f004 faf4 	bl	1cbf2 <strlen>
   1860a:	4286      	cmp	r6, r0
   1860c:	f47f aeab 	bne.w	18366 <pdn_interface_pdn_id_get+0x17a>
   18610:	6921      	ldr	r1, [r4, #16]
   18612:	4628      	mov	r0, r5
   18614:	310c      	adds	r1, #12
   18616:	f004 faf3 	bl	1cc00 <strcmp>
   1861a:	2800      	cmp	r0, #0
   1861c:	f47f aea3 	bne.w	18366 <pdn_interface_pdn_id_get+0x17a>
   18620:	6923      	ldr	r3, [r4, #16]
   18622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18624:	07d2      	lsls	r2, r2, #31
   18626:	f57f ae9e 	bpl.w	18366 <pdn_interface_pdn_id_get+0x17a>
   1862a:	2604      	movs	r6, #4
   1862c:	e799      	b.n	18562 <pdn_interface_pdn_id_get+0x376>
   1862e:	4628      	mov	r0, r5
   18630:	f004 fadf 	bl	1cbf2 <strlen>
   18634:	4606      	mov	r6, r0
   18636:	6960      	ldr	r0, [r4, #20]
   18638:	300c      	adds	r0, #12
   1863a:	f004 fada 	bl	1cbf2 <strlen>
   1863e:	4286      	cmp	r6, r0
   18640:	f47f ae97 	bne.w	18372 <pdn_interface_pdn_id_get+0x186>
   18644:	6961      	ldr	r1, [r4, #20]
   18646:	4628      	mov	r0, r5
   18648:	310c      	adds	r1, #12
   1864a:	f004 fad9 	bl	1cc00 <strcmp>
   1864e:	2800      	cmp	r0, #0
   18650:	f47f ae8f 	bne.w	18372 <pdn_interface_pdn_id_get+0x186>
   18654:	6963      	ldr	r3, [r4, #20]
   18656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18658:	07d7      	lsls	r7, r2, #31
   1865a:	f57f ae8a 	bpl.w	18372 <pdn_interface_pdn_id_get+0x186>
   1865e:	2605      	movs	r6, #5
   18660:	e77f      	b.n	18562 <pdn_interface_pdn_id_get+0x376>
   18662:	4628      	mov	r0, r5
   18664:	f004 fac5 	bl	1cbf2 <strlen>
   18668:	4606      	mov	r6, r0
   1866a:	69a0      	ldr	r0, [r4, #24]
   1866c:	300c      	adds	r0, #12
   1866e:	f004 fac0 	bl	1cbf2 <strlen>
   18672:	4286      	cmp	r6, r0
   18674:	f47f ae83 	bne.w	1837e <pdn_interface_pdn_id_get+0x192>
   18678:	69a1      	ldr	r1, [r4, #24]
   1867a:	4628      	mov	r0, r5
   1867c:	310c      	adds	r1, #12
   1867e:	f004 fabf 	bl	1cc00 <strcmp>
   18682:	2800      	cmp	r0, #0
   18684:	f47f ae7b 	bne.w	1837e <pdn_interface_pdn_id_get+0x192>
   18688:	69a3      	ldr	r3, [r4, #24]
   1868a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1868c:	07d6      	lsls	r6, r2, #31
   1868e:	f57f ae76 	bpl.w	1837e <pdn_interface_pdn_id_get+0x192>
   18692:	2606      	movs	r6, #6
   18694:	e765      	b.n	18562 <pdn_interface_pdn_id_get+0x376>
   18696:	4628      	mov	r0, r5
   18698:	f004 faab 	bl	1cbf2 <strlen>
   1869c:	4607      	mov	r7, r0
   1869e:	68e0      	ldr	r0, [r4, #12]
   186a0:	300c      	adds	r0, #12
   186a2:	f004 faa6 	bl	1cbf2 <strlen>
   186a6:	4287      	cmp	r7, r0
   186a8:	f47f ae05 	bne.w	182b6 <pdn_interface_pdn_id_get+0xca>
   186ac:	68e1      	ldr	r1, [r4, #12]
   186ae:	4628      	mov	r0, r5
   186b0:	310c      	adds	r1, #12
   186b2:	f004 faa5 	bl	1cc00 <strcmp>
   186b6:	2800      	cmp	r0, #0
   186b8:	f47f adfd 	bne.w	182b6 <pdn_interface_pdn_id_get+0xca>
   186bc:	68e3      	ldr	r3, [r4, #12]
   186be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   186c0:	0791      	lsls	r1, r2, #30
   186c2:	f53f af4e 	bmi.w	18562 <pdn_interface_pdn_id_get+0x376>
   186c6:	e5f6      	b.n	182b6 <pdn_interface_pdn_id_get+0xca>
   186c8:	4628      	mov	r0, r5
   186ca:	f004 fa92 	bl	1cbf2 <strlen>
   186ce:	4606      	mov	r6, r0
   186d0:	6920      	ldr	r0, [r4, #16]
   186d2:	300c      	adds	r0, #12
   186d4:	f004 fa8d 	bl	1cbf2 <strlen>
   186d8:	4286      	cmp	r6, r0
   186da:	f47f adf2 	bne.w	182c2 <pdn_interface_pdn_id_get+0xd6>
   186de:	6921      	ldr	r1, [r4, #16]
   186e0:	4628      	mov	r0, r5
   186e2:	310c      	adds	r1, #12
   186e4:	f004 fa8c 	bl	1cc00 <strcmp>
   186e8:	2800      	cmp	r0, #0
   186ea:	f47f adea 	bne.w	182c2 <pdn_interface_pdn_id_get+0xd6>
   186ee:	6923      	ldr	r3, [r4, #16]
   186f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   186f2:	0792      	lsls	r2, r2, #30
   186f4:	d499      	bmi.n	1862a <pdn_interface_pdn_id_get+0x43e>
   186f6:	e5e4      	b.n	182c2 <pdn_interface_pdn_id_get+0xd6>
   186f8:	4628      	mov	r0, r5
   186fa:	f004 fa7a 	bl	1cbf2 <strlen>
   186fe:	4606      	mov	r6, r0
   18700:	6960      	ldr	r0, [r4, #20]
   18702:	300c      	adds	r0, #12
   18704:	f004 fa75 	bl	1cbf2 <strlen>
   18708:	4286      	cmp	r6, r0
   1870a:	f47f ade0 	bne.w	182ce <pdn_interface_pdn_id_get+0xe2>
   1870e:	6961      	ldr	r1, [r4, #20]
   18710:	4628      	mov	r0, r5
   18712:	310c      	adds	r1, #12
   18714:	f004 fa74 	bl	1cc00 <strcmp>
   18718:	2800      	cmp	r0, #0
   1871a:	f47f add8 	bne.w	182ce <pdn_interface_pdn_id_get+0xe2>
   1871e:	6963      	ldr	r3, [r4, #20]
   18720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18722:	0797      	lsls	r7, r2, #30
   18724:	d49b      	bmi.n	1865e <pdn_interface_pdn_id_get+0x472>
   18726:	e5d2      	b.n	182ce <pdn_interface_pdn_id_get+0xe2>
   18728:	4628      	mov	r0, r5
   1872a:	f004 fa62 	bl	1cbf2 <strlen>
   1872e:	4606      	mov	r6, r0
   18730:	69a0      	ldr	r0, [r4, #24]
   18732:	300c      	adds	r0, #12
   18734:	f004 fa5d 	bl	1cbf2 <strlen>
   18738:	4286      	cmp	r6, r0
   1873a:	f47f adce 	bne.w	182da <pdn_interface_pdn_id_get+0xee>
   1873e:	69a1      	ldr	r1, [r4, #24]
   18740:	4628      	mov	r0, r5
   18742:	310c      	adds	r1, #12
   18744:	f004 fa5c 	bl	1cc00 <strcmp>
   18748:	2800      	cmp	r0, #0
   1874a:	f47f adc6 	bne.w	182da <pdn_interface_pdn_id_get+0xee>
   1874e:	69a3      	ldr	r3, [r4, #24]
   18750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18752:	0796      	lsls	r6, r2, #30
   18754:	d49d      	bmi.n	18692 <pdn_interface_pdn_id_get+0x4a6>
   18756:	e5c0      	b.n	182da <pdn_interface_pdn_id_get+0xee>
   18758:	4628      	mov	r0, r5
   1875a:	f004 fa4a 	bl	1cbf2 <strlen>
   1875e:	4606      	mov	r6, r0
   18760:	69e0      	ldr	r0, [r4, #28]
   18762:	300c      	adds	r0, #12
   18764:	f004 fa45 	bl	1cbf2 <strlen>
   18768:	4286      	cmp	r6, r0
   1876a:	f47f adbc 	bne.w	182e6 <pdn_interface_pdn_id_get+0xfa>
   1876e:	69e1      	ldr	r1, [r4, #28]
   18770:	4628      	mov	r0, r5
   18772:	310c      	adds	r1, #12
   18774:	f004 fa44 	bl	1cc00 <strcmp>
   18778:	2800      	cmp	r0, #0
   1877a:	f47f adb4 	bne.w	182e6 <pdn_interface_pdn_id_get+0xfa>
   1877e:	69e3      	ldr	r3, [r4, #28]
   18780:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18782:	0790      	lsls	r0, r2, #30
   18784:	f57f adaf 	bpl.w	182e6 <pdn_interface_pdn_id_get+0xfa>
   18788:	2607      	movs	r6, #7
   1878a:	e6ea      	b.n	18562 <pdn_interface_pdn_id_get+0x376>
   1878c:	4628      	mov	r0, r5
   1878e:	f004 fa30 	bl	1cbf2 <strlen>
   18792:	4606      	mov	r6, r0
   18794:	6a20      	ldr	r0, [r4, #32]
   18796:	300c      	adds	r0, #12
   18798:	f004 fa2b 	bl	1cbf2 <strlen>
   1879c:	4286      	cmp	r6, r0
   1879e:	f47f ada8 	bne.w	182f2 <pdn_interface_pdn_id_get+0x106>
   187a2:	6a21      	ldr	r1, [r4, #32]
   187a4:	4628      	mov	r0, r5
   187a6:	310c      	adds	r1, #12
   187a8:	f004 fa2a 	bl	1cc00 <strcmp>
   187ac:	2800      	cmp	r0, #0
   187ae:	f47f ada0 	bne.w	182f2 <pdn_interface_pdn_id_get+0x106>
   187b2:	6a23      	ldr	r3, [r4, #32]
   187b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   187b6:	0791      	lsls	r1, r2, #30
   187b8:	f57f ad9b 	bpl.w	182f2 <pdn_interface_pdn_id_get+0x106>
   187bc:	2608      	movs	r6, #8
   187be:	e6d0      	b.n	18562 <pdn_interface_pdn_id_get+0x376>
   187c0:	4628      	mov	r0, r5
   187c2:	f004 fa16 	bl	1cbf2 <strlen>
   187c6:	4606      	mov	r6, r0
   187c8:	69e0      	ldr	r0, [r4, #28]
   187ca:	300c      	adds	r0, #12
   187cc:	f004 fa11 	bl	1cbf2 <strlen>
   187d0:	4286      	cmp	r6, r0
   187d2:	f47f adda 	bne.w	1838a <pdn_interface_pdn_id_get+0x19e>
   187d6:	69e1      	ldr	r1, [r4, #28]
   187d8:	4628      	mov	r0, r5
   187da:	310c      	adds	r1, #12
   187dc:	f004 fa10 	bl	1cc00 <strcmp>
   187e0:	2800      	cmp	r0, #0
   187e2:	f47f add2 	bne.w	1838a <pdn_interface_pdn_id_get+0x19e>
   187e6:	69e3      	ldr	r3, [r4, #28]
   187e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   187ea:	07d0      	lsls	r0, r2, #31
   187ec:	d4cc      	bmi.n	18788 <pdn_interface_pdn_id_get+0x59c>
   187ee:	e5cc      	b.n	1838a <pdn_interface_pdn_id_get+0x19e>
   187f0:	4628      	mov	r0, r5
   187f2:	f004 f9fe 	bl	1cbf2 <strlen>
   187f6:	4606      	mov	r6, r0
   187f8:	6a20      	ldr	r0, [r4, #32]
   187fa:	300c      	adds	r0, #12
   187fc:	f004 f9f9 	bl	1cbf2 <strlen>
   18800:	4286      	cmp	r6, r0
   18802:	f47f adc8 	bne.w	18396 <pdn_interface_pdn_id_get+0x1aa>
   18806:	6a21      	ldr	r1, [r4, #32]
   18808:	4628      	mov	r0, r5
   1880a:	310c      	adds	r1, #12
   1880c:	f004 f9f8 	bl	1cc00 <strcmp>
   18810:	2800      	cmp	r0, #0
   18812:	f47f adc0 	bne.w	18396 <pdn_interface_pdn_id_get+0x1aa>
   18816:	6a23      	ldr	r3, [r4, #32]
   18818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1881a:	07d1      	lsls	r1, r2, #31
   1881c:	d4ce      	bmi.n	187bc <pdn_interface_pdn_id_get+0x5d0>
   1881e:	e5ba      	b.n	18396 <pdn_interface_pdn_id_get+0x1aa>
   18820:	4628      	mov	r0, r5
   18822:	f004 f9e6 	bl	1cbf2 <strlen>
   18826:	4606      	mov	r6, r0
   18828:	68a0      	ldr	r0, [r4, #8]
   1882a:	300c      	adds	r0, #12
   1882c:	f004 f9e1 	bl	1cbf2 <strlen>
   18830:	4286      	cmp	r6, r0
   18832:	f47f ad8c 	bne.w	1834e <pdn_interface_pdn_id_get+0x162>
   18836:	68a1      	ldr	r1, [r4, #8]
   18838:	4628      	mov	r0, r5
   1883a:	310c      	adds	r1, #12
   1883c:	f004 f9e0 	bl	1cc00 <strcmp>
   18840:	2800      	cmp	r0, #0
   18842:	f47f ad84 	bne.w	1834e <pdn_interface_pdn_id_get+0x162>
   18846:	68a3      	ldr	r3, [r4, #8]
   18848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1884a:	07d0      	lsls	r0, r2, #31
   1884c:	f57f ad7f 	bpl.w	1834e <pdn_interface_pdn_id_get+0x162>
   18850:	2602      	movs	r6, #2
   18852:	e686      	b.n	18562 <pdn_interface_pdn_id_get+0x376>
   18854:	4628      	mov	r0, r5
   18856:	f004 f9cc 	bl	1cbf2 <strlen>
   1885a:	4606      	mov	r6, r0
   1885c:	68a0      	ldr	r0, [r4, #8]
   1885e:	300c      	adds	r0, #12
   18860:	f004 f9c7 	bl	1cbf2 <strlen>
   18864:	4286      	cmp	r6, r0
   18866:	f47f ad20 	bne.w	182aa <pdn_interface_pdn_id_get+0xbe>
   1886a:	68a1      	ldr	r1, [r4, #8]
   1886c:	4628      	mov	r0, r5
   1886e:	310c      	adds	r1, #12
   18870:	f004 f9c6 	bl	1cc00 <strcmp>
   18874:	2800      	cmp	r0, #0
   18876:	f47f ad18 	bne.w	182aa <pdn_interface_pdn_id_get+0xbe>
   1887a:	68a3      	ldr	r3, [r4, #8]
   1887c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1887e:	0790      	lsls	r0, r2, #30
   18880:	d4e6      	bmi.n	18850 <pdn_interface_pdn_id_get+0x664>
   18882:	e512      	b.n	182aa <pdn_interface_pdn_id_get+0xbe>
   18884:	200211ec 	.word	0x200211ec
   18888:	00020eb8 	.word	0x00020eb8
   1888c:	00020eb4 	.word	0x00020eb4
   18890:	00020ec8 	.word	0x00020ec8
   18894:	200211e8 	.word	0x200211e8
   18898:	4628      	mov	r0, r5
   1889a:	f004 f9aa 	bl	1cbf2 <strlen>
   1889e:	4606      	mov	r6, r0
   188a0:	6860      	ldr	r0, [r4, #4]
   188a2:	300c      	adds	r0, #12
   188a4:	f004 f9a5 	bl	1cbf2 <strlen>
   188a8:	4286      	cmp	r6, r0
   188aa:	f47f acf8 	bne.w	1829e <pdn_interface_pdn_id_get+0xb2>
   188ae:	6861      	ldr	r1, [r4, #4]
   188b0:	4628      	mov	r0, r5
   188b2:	310c      	adds	r1, #12
   188b4:	f004 f9a4 	bl	1cc00 <strcmp>
   188b8:	2800      	cmp	r0, #0
   188ba:	f47f acf0 	bne.w	1829e <pdn_interface_pdn_id_get+0xb2>
   188be:	6863      	ldr	r3, [r4, #4]
   188c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   188c2:	0796      	lsls	r6, r2, #30
   188c4:	f57f aceb 	bpl.w	1829e <pdn_interface_pdn_id_get+0xb2>
   188c8:	2601      	movs	r6, #1
   188ca:	e64a      	b.n	18562 <pdn_interface_pdn_id_get+0x376>
   188cc:	4628      	mov	r0, r5
   188ce:	f004 f990 	bl	1cbf2 <strlen>
   188d2:	4606      	mov	r6, r0
   188d4:	6860      	ldr	r0, [r4, #4]
   188d6:	300c      	adds	r0, #12
   188d8:	f004 f98b 	bl	1cbf2 <strlen>
   188dc:	4286      	cmp	r6, r0
   188de:	f47f ad30 	bne.w	18342 <pdn_interface_pdn_id_get+0x156>
   188e2:	6861      	ldr	r1, [r4, #4]
   188e4:	4628      	mov	r0, r5
   188e6:	310c      	adds	r1, #12
   188e8:	f004 f98a 	bl	1cc00 <strcmp>
   188ec:	2800      	cmp	r0, #0
   188ee:	f47f ad28 	bne.w	18342 <pdn_interface_pdn_id_get+0x156>
   188f2:	6863      	ldr	r3, [r4, #4]
   188f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   188f6:	07d6      	lsls	r6, r2, #31
   188f8:	d4e6      	bmi.n	188c8 <pdn_interface_pdn_id_get+0x6dc>
   188fa:	e522      	b.n	18342 <pdn_interface_pdn_id_get+0x156>
   188fc:	4608      	mov	r0, r1
   188fe:	f004 f978 	bl	1cbf2 <strlen>
   18902:	4606      	mov	r6, r0
   18904:	6820      	ldr	r0, [r4, #0]
   18906:	300c      	adds	r0, #12
   18908:	f004 f973 	bl	1cbf2 <strlen>
   1890c:	4286      	cmp	r6, r0
   1890e:	f47f acc0 	bne.w	18292 <pdn_interface_pdn_id_get+0xa6>
   18912:	6821      	ldr	r1, [r4, #0]
   18914:	4628      	mov	r0, r5
   18916:	310c      	adds	r1, #12
   18918:	f004 f972 	bl	1cc00 <strcmp>
   1891c:	4606      	mov	r6, r0
   1891e:	2800      	cmp	r0, #0
   18920:	f47f acb7 	bne.w	18292 <pdn_interface_pdn_id_get+0xa6>
   18924:	6823      	ldr	r3, [r4, #0]
   18926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   18928:	0797      	lsls	r7, r2, #30
   1892a:	f53f ae1a 	bmi.w	18562 <pdn_interface_pdn_id_get+0x376>
   1892e:	e4b0      	b.n	18292 <pdn_interface_pdn_id_get+0xa6>
   18930:	4608      	mov	r0, r1
   18932:	f004 f95e 	bl	1cbf2 <strlen>
   18936:	4606      	mov	r6, r0
   18938:	6820      	ldr	r0, [r4, #0]
   1893a:	300c      	adds	r0, #12
   1893c:	f004 f959 	bl	1cbf2 <strlen>
   18940:	4286      	cmp	r6, r0
   18942:	f47f acf8 	bne.w	18336 <pdn_interface_pdn_id_get+0x14a>
   18946:	6821      	ldr	r1, [r4, #0]
   18948:	4628      	mov	r0, r5
   1894a:	310c      	adds	r1, #12
   1894c:	f004 f958 	bl	1cc00 <strcmp>
   18950:	4606      	mov	r6, r0
   18952:	2800      	cmp	r0, #0
   18954:	f47f acef 	bne.w	18336 <pdn_interface_pdn_id_get+0x14a>
   18958:	6823      	ldr	r3, [r4, #0]
   1895a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1895c:	07d7      	lsls	r7, r2, #31
   1895e:	f53f ae00 	bmi.w	18562 <pdn_interface_pdn_id_get+0x376>
   18962:	e4e8      	b.n	18336 <pdn_interface_pdn_id_get+0x14a>
   18964:	f04f 30ff 	mov.w	r0, #4294967295
   18968:	4770      	bx	lr
   1896a:	480b      	ldr	r0, [pc, #44]	; (18998 <pdn_interface_pdn_id_get+0x7ac>)
   1896c:	f004 f941 	bl	1cbf2 <strlen>
   18970:	490a      	ldr	r1, [pc, #40]	; (1899c <pdn_interface_pdn_id_get+0x7b0>)
   18972:	4602      	mov	r2, r0
   18974:	4808      	ldr	r0, [pc, #32]	; (18998 <pdn_interface_pdn_id_get+0x7ac>)
   18976:	f004 f94f 	bl	1cc18 <strncmp>
   1897a:	b930      	cbnz	r0, 1898a <pdn_interface_pdn_id_get+0x79e>
   1897c:	2008      	movs	r0, #8
   1897e:	f7f9 fc2b 	bl	121d8 <bsd_os_errno_set>
   18982:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   18986:	6858      	ldr	r0, [r3, #4]
   18988:	e47b      	b.n	18282 <pdn_interface_pdn_id_get+0x96>
   1898a:	2005      	movs	r0, #5
   1898c:	f7f9 fc24 	bl	121d8 <bsd_os_errno_set>
   18990:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   18994:	6858      	ldr	r0, [r3, #4]
   18996:	e474      	b.n	18282 <pdn_interface_pdn_id_get+0x96>
   18998:	00020f0c 	.word	0x00020f0c
   1899c:	200211ec 	.word	0x200211ec

000189a0 <bsd_recoverable_error_handler>:
   189a0:	4770      	bx	lr
   189a2:	bf00      	nop

000189a4 <bsd_platform_error_handler>:
   189a4:	b508      	push	{r3, lr}
   189a6:	f7ff fffb 	bl	189a0 <bsd_recoverable_error_handler>
   189aa:	bd08      	pop	{r3, pc}

000189ac <bsd_init>:
   189ac:	b160      	cbz	r0, 189c8 <bsd_init+0x1c>
   189ae:	b510      	push	{r4, lr}
   189b0:	4c07      	ldr	r4, [pc, #28]	; (189d0 <bsd_init+0x24>)
   189b2:	7823      	ldrb	r3, [r4, #0]
   189b4:	b92b      	cbnz	r3, 189c2 <bsd_init+0x16>
   189b6:	f000 f81b 	bl	189f0 <bsd_platform_init>
   189ba:	b908      	cbnz	r0, 189c0 <bsd_init+0x14>
   189bc:	2301      	movs	r3, #1
   189be:	7023      	strb	r3, [r4, #0]
   189c0:	bd10      	pop	{r4, pc}
   189c2:	f04f 30ff 	mov.w	r0, #4294967295
   189c6:	bd10      	pop	{r4, pc}
   189c8:	f04f 30ff 	mov.w	r0, #4294967295
   189cc:	4770      	bx	lr
   189ce:	bf00      	nop
   189d0:	20021d76 	.word	0x20021d76

000189d4 <unimplemented_method>:
   189d4:	b40f      	push	{r0, r1, r2, r3}
   189d6:	b508      	push	{r3, lr}
   189d8:	202d      	movs	r0, #45	; 0x2d
   189da:	f7f9 fbfd 	bl	121d8 <bsd_os_errno_set>
   189de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   189e2:	f04f 30ff 	mov.w	r0, #4294967295
   189e6:	b004      	add	sp, #16
   189e8:	4770      	bx	lr
   189ea:	bf00      	nop

000189ec <rpc_transport_ipc_fault_handler>:
   189ec:	f7ff bfda 	b.w	189a4 <bsd_platform_error_handler>

000189f0 <bsd_platform_init>:
   189f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   189f2:	f04f 0c00 	mov.w	ip, #0
   189f6:	f247 0660 	movw	r6, #28768	; 0x7060
   189fa:	f24b 0260 	movw	r2, #45152	; 0xb060
   189fe:	6843      	ldr	r3, [r0, #4]
   18a00:	4d3a      	ldr	r5, [pc, #232]	; (18aec <bsd_platform_init+0xfc>)
   18a02:	4607      	mov	r7, r0
   18a04:	602b      	str	r3, [r5, #0]
   18a06:	7801      	ldrb	r1, [r0, #0]
   18a08:	2006      	movs	r0, #6
   18a0a:	4561      	cmp	r1, ip
   18a0c:	bf08      	it	eq
   18a0e:	4632      	moveq	r2, r6
   18a10:	4413      	add	r3, r2
   18a12:	4c37      	ldr	r4, [pc, #220]	; (18af0 <bsd_platform_init+0x100>)
   18a14:	60ab      	str	r3, [r5, #8]
   18a16:	68b9      	ldr	r1, [r7, #8]
   18a18:	6063      	str	r3, [r4, #4]
   18a1a:	4b36      	ldr	r3, [pc, #216]	; (18af4 <bsd_platform_init+0x104>)
   18a1c:	b093      	sub	sp, #76	; 0x4c
   18a1e:	606a      	str	r2, [r5, #4]
   18a20:	f8a4 c000 	strh.w	ip, [r4]
   18a24:	1a8a      	subs	r2, r1, r2
   18a26:	60ea      	str	r2, [r5, #12]
   18a28:	60a2      	str	r2, [r4, #8]
   18a2a:	81a0      	strh	r0, [r4, #12]
   18a2c:	6123      	str	r3, [r4, #16]
   18a2e:	f001 f883 	bl	19b38 <nrf_mem_init>
   18a32:	2800      	cmp	r0, #0
   18a34:	d156      	bne.n	18ae4 <bsd_platform_init+0xf4>
   18a36:	4621      	mov	r1, r4
   18a38:	a801      	add	r0, sp, #4
   18a3a:	f001 f8f1 	bl	19c20 <nrf_mem_register>
   18a3e:	2800      	cmp	r0, #0
   18a40:	d150      	bne.n	18ae4 <bsd_platform_init+0xf4>
   18a42:	f7f9 fd59 	bl	124f8 <bsd_os_init>
   18a46:	f7fd fc8b 	bl	16360 <rpc_framework_init>
   18a4a:	2800      	cmp	r0, #0
   18a4c:	d14a      	bne.n	18ae4 <bsd_platform_init+0xf4>
   18a4e:	783a      	ldrb	r2, [r7, #0]
   18a50:	682b      	ldr	r3, [r5, #0]
   18a52:	bb32      	cbnz	r2, 18aa2 <bsd_platform_init+0xb2>
   18a54:	4606      	mov	r6, r0
   18a56:	2220      	movs	r2, #32
   18a58:	2408      	movs	r4, #8
   18a5a:	2500      	movs	r5, #0
   18a5c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   18a60:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   18a64:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   18a68:	4411      	add	r1, r2
   18a6a:	9302      	str	r3, [sp, #8]
   18a6c:	e9cd 6008 	strd	r6, r0, [sp, #32]
   18a70:	910c      	str	r1, [sp, #48]	; 0x30
   18a72:	9203      	str	r2, [sp, #12]
   18a74:	f103 0140 	add.w	r1, r3, #64	; 0x40
   18a78:	9205      	str	r2, [sp, #20]
   18a7a:	9207      	str	r2, [sp, #28]
   18a7c:	eb0d 0004 	add.w	r0, sp, r4
   18a80:	189a      	adds	r2, r3, r2
   18a82:	3360      	adds	r3, #96	; 0x60
   18a84:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   18a88:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   18a8c:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   18a90:	940f      	str	r4, [sp, #60]	; 0x3c
   18a92:	9104      	str	r1, [sp, #16]
   18a94:	9206      	str	r2, [sp, #24]
   18a96:	930a      	str	r3, [sp, #40]	; 0x28
   18a98:	f7fa fe0a 	bl	136b0 <rpc_transport_ipc_init>
   18a9c:	b128      	cbz	r0, 18aaa <bsd_platform_init+0xba>
   18a9e:	b013      	add	sp, #76	; 0x4c
   18aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18aa2:	441e      	add	r6, r3
   18aa4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   18aa8:	e7d5      	b.n	18a56 <bsd_platform_init+0x66>
   18aaa:	f001 fcf9 	bl	1a4a0 <interface_init>
   18aae:	b9c8      	cbnz	r0, 18ae4 <bsd_platform_init+0xf4>
   18ab0:	f7fe fd1a 	bl	174e8 <at_interface_init>
   18ab4:	b9b0      	cbnz	r0, 18ae4 <bsd_platform_init+0xf4>
   18ab6:	f7fc f899 	bl	14bec <ip_interface_init>
   18aba:	b998      	cbnz	r0, 18ae4 <bsd_platform_init+0xf4>
   18abc:	f7fb fbcc 	bl	14258 <tls_interface_init>
   18ac0:	b980      	cbnz	r0, 18ae4 <bsd_platform_init+0xf4>
   18ac2:	f001 fa09 	bl	19ed8 <mfu_interface_init>
   18ac6:	b968      	cbnz	r0, 18ae4 <bsd_platform_init+0xf4>
   18ac8:	f7fe ff08 	bl	178dc <pdn_interface_init>
   18acc:	b950      	cbnz	r0, 18ae4 <bsd_platform_init+0xf4>
   18ace:	f7fe fb75 	bl	171bc <gnss_interface_init>
   18ad2:	b938      	cbnz	r0, 18ae4 <bsd_platform_init+0xf4>
   18ad4:	f7fa f82a 	bl	12b2c <logobj_interface_init>
   18ad8:	1b40      	subs	r0, r0, r5
   18ada:	bf18      	it	ne
   18adc:	2001      	movne	r0, #1
   18ade:	4240      	negs	r0, r0
   18ae0:	b013      	add	sp, #76	; 0x4c
   18ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18ae4:	f04f 30ff 	mov.w	r0, #4294967295
   18ae8:	b013      	add	sp, #76	; 0x4c
   18aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18aec:	20021328 	.word	0x20021328
   18af0:	20021314 	.word	0x20021314
   18af4:	00021060 	.word	0x00021060

00018af8 <bsd_platform_af_method_table_get>:
   18af8:	2805      	cmp	r0, #5
   18afa:	d02a      	beq.n	18b52 <bsd_platform_af_method_table_get+0x5a>
   18afc:	b508      	push	{r3, lr}
   18afe:	d914      	bls.n	18b2a <bsd_platform_af_method_table_get+0x32>
   18b00:	280a      	cmp	r0, #10
   18b02:	d016      	beq.n	18b32 <bsd_platform_af_method_table_get+0x3a>
   18b04:	2866      	cmp	r0, #102	; 0x66
   18b06:	d11f      	bne.n	18b48 <bsd_platform_af_method_table_get+0x50>
   18b08:	f240 2302 	movw	r3, #514	; 0x202
   18b0c:	429a      	cmp	r2, r3
   18b0e:	d035      	beq.n	18b7c <bsd_platform_af_method_table_get+0x84>
   18b10:	f240 2305 	movw	r3, #517	; 0x205
   18b14:	429a      	cmp	r2, r3
   18b16:	d035      	beq.n	18b84 <bsd_platform_af_method_table_get+0x8c>
   18b18:	f240 2301 	movw	r3, #513	; 0x201
   18b1c:	429a      	cmp	r2, r3
   18b1e:	d02f      	beq.n	18b80 <bsd_platform_af_method_table_get+0x88>
   18b20:	202b      	movs	r0, #43	; 0x2b
   18b22:	f7f9 fb59 	bl	121d8 <bsd_os_errno_set>
   18b26:	2000      	movs	r0, #0
   18b28:	bd08      	pop	{r3, pc}
   18b2a:	2801      	cmp	r0, #1
   18b2c:	d016      	beq.n	18b5c <bsd_platform_af_method_table_get+0x64>
   18b2e:	2802      	cmp	r0, #2
   18b30:	d10a      	bne.n	18b48 <bsd_platform_af_method_table_get+0x50>
   18b32:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   18b36:	d21a      	bcs.n	18b6e <bsd_platform_af_method_table_get+0x76>
   18b38:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   18b3c:	d21a      	bcs.n	18b74 <bsd_platform_af_method_table_get+0x7c>
   18b3e:	3a01      	subs	r2, #1
   18b40:	2a01      	cmp	r2, #1
   18b42:	d8ed      	bhi.n	18b20 <bsd_platform_af_method_table_get+0x28>
   18b44:	4810      	ldr	r0, [pc, #64]	; (18b88 <bsd_platform_af_method_table_get+0x90>)
   18b46:	bd08      	pop	{r3, pc}
   18b48:	2016      	movs	r0, #22
   18b4a:	f7f9 fb45 	bl	121d8 <bsd_os_errno_set>
   18b4e:	2000      	movs	r0, #0
   18b50:	bd08      	pop	{r3, pc}
   18b52:	2903      	cmp	r1, #3
   18b54:	480d      	ldr	r0, [pc, #52]	; (18b8c <bsd_platform_af_method_table_get+0x94>)
   18b56:	bf18      	it	ne
   18b58:	2000      	movne	r0, #0
   18b5a:	4770      	bx	lr
   18b5c:	f240 2303 	movw	r3, #515	; 0x203
   18b60:	429a      	cmp	r2, r3
   18b62:	d009      	beq.n	18b78 <bsd_platform_af_method_table_get+0x80>
   18b64:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   18b68:	d1da      	bne.n	18b20 <bsd_platform_af_method_table_get+0x28>
   18b6a:	4809      	ldr	r0, [pc, #36]	; (18b90 <bsd_platform_af_method_table_get+0x98>)
   18b6c:	bd08      	pop	{r3, pc}
   18b6e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   18b72:	d1d5      	bne.n	18b20 <bsd_platform_af_method_table_get+0x28>
   18b74:	4807      	ldr	r0, [pc, #28]	; (18b94 <bsd_platform_af_method_table_get+0x9c>)
   18b76:	bd08      	pop	{r3, pc}
   18b78:	4807      	ldr	r0, [pc, #28]	; (18b98 <bsd_platform_af_method_table_get+0xa0>)
   18b7a:	bd08      	pop	{r3, pc}
   18b7c:	4807      	ldr	r0, [pc, #28]	; (18b9c <bsd_platform_af_method_table_get+0xa4>)
   18b7e:	bd08      	pop	{r3, pc}
   18b80:	4807      	ldr	r0, [pc, #28]	; (18ba0 <bsd_platform_af_method_table_get+0xa8>)
   18b82:	bd08      	pop	{r3, pc}
   18b84:	4807      	ldr	r0, [pc, #28]	; (18ba4 <bsd_platform_af_method_table_get+0xac>)
   18b86:	bd08      	pop	{r3, pc}
   18b88:	00020f48 	.word	0x00020f48
   18b8c:	00021038 	.word	0x00021038
   18b90:	00020fe8 	.word	0x00020fe8
   18b94:	00020f70 	.word	0x00020f70
   18b98:	00020f98 	.word	0x00020f98
   18b9c:	00020fc0 	.word	0x00020fc0
   18ba0:	00020f20 	.word	0x00020f20
   18ba4:	00021010 	.word	0x00021010

00018ba8 <bsd_platform_fd_method_table_get>:
   18ba8:	b538      	push	{r3, r4, r5, lr}
   18baa:	4605      	mov	r5, r0
   18bac:	f001 fdb6 	bl	1a71c <interface_socket_from_handle_get>
   18bb0:	4604      	mov	r4, r0
   18bb2:	b960      	cbnz	r0, 18bce <bsd_platform_fd_method_table_get+0x26>
   18bb4:	4b2c      	ldr	r3, [pc, #176]	; (18c68 <bsd_platform_fd_method_table_get+0xc0>)
   18bb6:	429d      	cmp	r5, r3
   18bb8:	d02f      	beq.n	18c1a <bsd_platform_fd_method_table_get+0x72>
   18bba:	0c2b      	lsrs	r3, r5, #16
   18bbc:	4a2b      	ldr	r2, [pc, #172]	; (18c6c <bsd_platform_fd_method_table_get+0xc4>)
   18bbe:	041b      	lsls	r3, r3, #16
   18bc0:	4293      	cmp	r3, r2
   18bc2:	d03d      	beq.n	18c40 <bsd_platform_fd_method_table_get+0x98>
   18bc4:	4b2a      	ldr	r3, [pc, #168]	; (18c70 <bsd_platform_fd_method_table_get+0xc8>)
   18bc6:	429d      	cmp	r5, r3
   18bc8:	d149      	bne.n	18c5e <bsd_platform_fd_method_table_get+0xb6>
   18bca:	482a      	ldr	r0, [pc, #168]	; (18c74 <bsd_platform_fd_method_table_get+0xcc>)
   18bcc:	bd38      	pop	{r3, r4, r5, pc}
   18bce:	68c3      	ldr	r3, [r0, #12]
   18bd0:	6942      	ldr	r2, [r0, #20]
   18bd2:	2b05      	cmp	r3, #5
   18bd4:	d036      	beq.n	18c44 <bsd_platform_fd_method_table_get+0x9c>
   18bd6:	d911      	bls.n	18bfc <bsd_platform_fd_method_table_get+0x54>
   18bd8:	2b0a      	cmp	r3, #10
   18bda:	d013      	beq.n	18c04 <bsd_platform_fd_method_table_get+0x5c>
   18bdc:	2b66      	cmp	r3, #102	; 0x66
   18bde:	d11e      	bne.n	18c1e <bsd_platform_fd_method_table_get+0x76>
   18be0:	f240 2302 	movw	r3, #514	; 0x202
   18be4:	429a      	cmp	r2, r3
   18be6:	d02b      	beq.n	18c40 <bsd_platform_fd_method_table_get+0x98>
   18be8:	f240 2305 	movw	r3, #517	; 0x205
   18bec:	429a      	cmp	r2, r3
   18bee:	d02f      	beq.n	18c50 <bsd_platform_fd_method_table_get+0xa8>
   18bf0:	f240 2301 	movw	r3, #513	; 0x201
   18bf4:	429a      	cmp	r2, r3
   18bf6:	d11e      	bne.n	18c36 <bsd_platform_fd_method_table_get+0x8e>
   18bf8:	481f      	ldr	r0, [pc, #124]	; (18c78 <bsd_platform_fd_method_table_get+0xd0>)
   18bfa:	bd38      	pop	{r3, r4, r5, pc}
   18bfc:	2b01      	cmp	r3, #1
   18bfe:	d013      	beq.n	18c28 <bsd_platform_fd_method_table_get+0x80>
   18c00:	2b02      	cmp	r3, #2
   18c02:	d10c      	bne.n	18c1e <bsd_platform_fd_method_table_get+0x76>
   18c04:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   18c08:	d224      	bcs.n	18c54 <bsd_platform_fd_method_table_get+0xac>
   18c0a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   18c0e:	d224      	bcs.n	18c5a <bsd_platform_fd_method_table_get+0xb2>
   18c10:	3a01      	subs	r2, #1
   18c12:	2a01      	cmp	r2, #1
   18c14:	d80f      	bhi.n	18c36 <bsd_platform_fd_method_table_get+0x8e>
   18c16:	4819      	ldr	r0, [pc, #100]	; (18c7c <bsd_platform_fd_method_table_get+0xd4>)
   18c18:	bd38      	pop	{r3, r4, r5, pc}
   18c1a:	4819      	ldr	r0, [pc, #100]	; (18c80 <bsd_platform_fd_method_table_get+0xd8>)
   18c1c:	bd38      	pop	{r3, r4, r5, pc}
   18c1e:	2016      	movs	r0, #22
   18c20:	f7f9 fada 	bl	121d8 <bsd_os_errno_set>
   18c24:	2000      	movs	r0, #0
   18c26:	bd38      	pop	{r3, r4, r5, pc}
   18c28:	f240 2303 	movw	r3, #515	; 0x203
   18c2c:	429a      	cmp	r2, r3
   18c2e:	d0f4      	beq.n	18c1a <bsd_platform_fd_method_table_get+0x72>
   18c30:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   18c34:	d0c9      	beq.n	18bca <bsd_platform_fd_method_table_get+0x22>
   18c36:	202b      	movs	r0, #43	; 0x2b
   18c38:	f7f9 face 	bl	121d8 <bsd_os_errno_set>
   18c3c:	2000      	movs	r0, #0
   18c3e:	bd38      	pop	{r3, r4, r5, pc}
   18c40:	4810      	ldr	r0, [pc, #64]	; (18c84 <bsd_platform_fd_method_table_get+0xdc>)
   18c42:	bd38      	pop	{r3, r4, r5, pc}
   18c44:	6903      	ldr	r3, [r0, #16]
   18c46:	4810      	ldr	r0, [pc, #64]	; (18c88 <bsd_platform_fd_method_table_get+0xe0>)
   18c48:	2b03      	cmp	r3, #3
   18c4a:	bf18      	it	ne
   18c4c:	2000      	movne	r0, #0
   18c4e:	bd38      	pop	{r3, r4, r5, pc}
   18c50:	480e      	ldr	r0, [pc, #56]	; (18c8c <bsd_platform_fd_method_table_get+0xe4>)
   18c52:	bd38      	pop	{r3, r4, r5, pc}
   18c54:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   18c58:	d1ed      	bne.n	18c36 <bsd_platform_fd_method_table_get+0x8e>
   18c5a:	480d      	ldr	r0, [pc, #52]	; (18c90 <bsd_platform_fd_method_table_get+0xe8>)
   18c5c:	bd38      	pop	{r3, r4, r5, pc}
   18c5e:	2009      	movs	r0, #9
   18c60:	f7f9 faba 	bl	121d8 <bsd_os_errno_set>
   18c64:	4620      	mov	r0, r4
   18c66:	bd38      	pop	{r3, r4, r5, pc}
   18c68:	49765432 	.word	0x49765432
   18c6c:	789a0000 	.word	0x789a0000
   18c70:	49765443 	.word	0x49765443
   18c74:	00020fe8 	.word	0x00020fe8
   18c78:	00020f20 	.word	0x00020f20
   18c7c:	00020f48 	.word	0x00020f48
   18c80:	00020f98 	.word	0x00020f98
   18c84:	00020fc0 	.word	0x00020fc0
   18c88:	00021038 	.word	0x00021038
   18c8c:	00021010 	.word	0x00021010
   18c90:	00020f70 	.word	0x00020f70

00018c94 <bsd_platform_getaddrinfo>:
   18c94:	f7fc bf6a 	b.w	15b6c <ip_interface_getaddrinfo>

00018c98 <bsd_platform_freeaddrinfo>:
   18c98:	f7fd b85e 	b.w	15d58 <ip_interface_freeaddrinfo>

00018c9c <bsd_platform_poll>:
   18c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18ca0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   18ca4:	b083      	sub	sp, #12
   18ca6:	9200      	str	r2, [sp, #0]
   18ca8:	2800      	cmp	r0, #0
   18caa:	d048      	beq.n	18d3e <bsd_platform_poll+0xa2>
   18cac:	1e4b      	subs	r3, r1, #1
   18cae:	2b08      	cmp	r3, #8
   18cb0:	d845      	bhi.n	18d3e <bsd_platform_poll+0xa2>
   18cb2:	4680      	mov	r8, r0
   18cb4:	4605      	mov	r5, r0
   18cb6:	2400      	movs	r4, #0
   18cb8:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   18cbc:	88ab      	ldrh	r3, [r5, #4]
   18cbe:	6828      	ldr	r0, [r5, #0]
   18cc0:	f003 0303 	and.w	r3, r3, #3
   18cc4:	a901      	add	r1, sp, #4
   18cc6:	f043 061c 	orr.w	r6, r3, #28
   18cca:	f001 fd35 	bl	1a738 <interface_socket_event_get>
   18cce:	9b01      	ldr	r3, [sp, #4]
   18cd0:	3508      	adds	r5, #8
   18cd2:	4033      	ands	r3, r6
   18cd4:	f825 3c02 	strh.w	r3, [r5, #-2]
   18cd8:	b103      	cbz	r3, 18cdc <bsd_platform_poll+0x40>
   18cda:	3401      	adds	r4, #1
   18cdc:	42af      	cmp	r7, r5
   18cde:	d1ed      	bne.n	18cbc <bsd_platform_poll+0x20>
   18ce0:	bb9c      	cbnz	r4, 18d4a <bsd_platform_poll+0xae>
   18ce2:	4669      	mov	r1, sp
   18ce4:	4640      	mov	r0, r8
   18ce6:	f7f9 f9c1 	bl	1206c <bsd_os_timedwait>
   18cea:	4607      	mov	r7, r0
   18cec:	b108      	cbz	r0, 18cf2 <bsd_platform_poll+0x56>
   18cee:	283c      	cmp	r0, #60	; 0x3c
   18cf0:	d11d      	bne.n	18d2e <bsd_platform_poll+0x92>
   18cf2:	46c1      	mov	r9, r8
   18cf4:	2600      	movs	r6, #0
   18cf6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   18cfa:	f8d9 0000 	ldr.w	r0, [r9]
   18cfe:	f003 0303 	and.w	r3, r3, #3
   18d02:	a901      	add	r1, sp, #4
   18d04:	f043 041c 	orr.w	r4, r3, #28
   18d08:	f001 fd16 	bl	1a738 <interface_socket_event_get>
   18d0c:	9b01      	ldr	r3, [sp, #4]
   18d0e:	f109 0908 	add.w	r9, r9, #8
   18d12:	4023      	ands	r3, r4
   18d14:	f829 3c02 	strh.w	r3, [r9, #-2]
   18d18:	b103      	cbz	r3, 18d1c <bsd_platform_poll+0x80>
   18d1a:	3601      	adds	r6, #1
   18d1c:	454d      	cmp	r5, r9
   18d1e:	d1ea      	bne.n	18cf6 <bsd_platform_poll+0x5a>
   18d20:	b90e      	cbnz	r6, 18d26 <bsd_platform_poll+0x8a>
   18d22:	2f00      	cmp	r7, #0
   18d24:	d0dd      	beq.n	18ce2 <bsd_platform_poll+0x46>
   18d26:	4630      	mov	r0, r6
   18d28:	b003      	add	sp, #12
   18d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18d2e:	2023      	movs	r0, #35	; 0x23
   18d30:	f7f9 fa52 	bl	121d8 <bsd_os_errno_set>
   18d34:	f04f 30ff 	mov.w	r0, #4294967295
   18d38:	b003      	add	sp, #12
   18d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18d3e:	2016      	movs	r0, #22
   18d40:	f7f9 fa4a 	bl	121d8 <bsd_os_errno_set>
   18d44:	f04f 30ff 	mov.w	r0, #4294967295
   18d48:	e7ee      	b.n	18d28 <bsd_platform_poll+0x8c>
   18d4a:	4620      	mov	r0, r4
   18d4c:	e7ec      	b.n	18d28 <bsd_platform_poll+0x8c>
   18d4e:	bf00      	nop

00018d50 <bsd_platform_fcntl>:
   18d50:	b508      	push	{r3, lr}
   18d52:	4b06      	ldr	r3, [pc, #24]	; (18d6c <bsd_platform_fcntl+0x1c>)
   18d54:	4298      	cmp	r0, r3
   18d56:	d003      	beq.n	18d60 <bsd_platform_fcntl+0x10>
   18d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18d5c:	f001 bd96 	b.w	1a88c <interface_socket_fcntl>
   18d60:	202d      	movs	r0, #45	; 0x2d
   18d62:	f7f9 fa39 	bl	121d8 <bsd_os_errno_set>
   18d66:	f04f 30ff 	mov.w	r0, #4294967295
   18d6a:	bd08      	pop	{r3, pc}
   18d6c:	49765432 	.word	0x49765432

00018d70 <linked_list_init>:
   18d70:	b128      	cbz	r0, 18d7e <linked_list_init+0xe>
   18d72:	2300      	movs	r3, #0
   18d74:	6003      	str	r3, [r0, #0]
   18d76:	e9c0 3301 	strd	r3, r3, [r0, #4]
   18d7a:	4618      	mov	r0, r3
   18d7c:	4770      	bx	lr
   18d7e:	2007      	movs	r0, #7
   18d80:	4770      	bx	lr
   18d82:	bf00      	nop

00018d84 <linked_list_push>:
   18d84:	6802      	ldr	r2, [r0, #0]
   18d86:	4603      	mov	r3, r0
   18d88:	3201      	adds	r2, #1
   18d8a:	d00e      	beq.n	18daa <linked_list_push+0x26>
   18d8c:	2200      	movs	r2, #0
   18d8e:	600a      	str	r2, [r1, #0]
   18d90:	6802      	ldr	r2, [r0, #0]
   18d92:	b13a      	cbz	r2, 18da4 <linked_list_push+0x20>
   18d94:	6882      	ldr	r2, [r0, #8]
   18d96:	6011      	str	r1, [r2, #0]
   18d98:	6081      	str	r1, [r0, #8]
   18d9a:	681a      	ldr	r2, [r3, #0]
   18d9c:	2000      	movs	r0, #0
   18d9e:	3201      	adds	r2, #1
   18da0:	601a      	str	r2, [r3, #0]
   18da2:	4770      	bx	lr
   18da4:	e9c0 1101 	strd	r1, r1, [r0, #4]
   18da8:	e7f7      	b.n	18d9a <linked_list_push+0x16>
   18daa:	2004      	movs	r0, #4
   18dac:	4770      	bx	lr
   18dae:	bf00      	nop

00018db0 <linked_list_pop>:
   18db0:	4603      	mov	r3, r0
   18db2:	6800      	ldr	r0, [r0, #0]
   18db4:	b128      	cbz	r0, 18dc2 <linked_list_pop+0x12>
   18db6:	6858      	ldr	r0, [r3, #4]
   18db8:	681a      	ldr	r2, [r3, #0]
   18dba:	6801      	ldr	r1, [r0, #0]
   18dbc:	3a01      	subs	r2, #1
   18dbe:	6059      	str	r1, [r3, #4]
   18dc0:	601a      	str	r2, [r3, #0]
   18dc2:	4770      	bx	lr

00018dc4 <linked_list_peek>:
   18dc4:	6803      	ldr	r3, [r0, #0]
   18dc6:	b10b      	cbz	r3, 18dcc <linked_list_peek+0x8>
   18dc8:	6840      	ldr	r0, [r0, #4]
   18dca:	4770      	bx	lr
   18dcc:	4618      	mov	r0, r3
   18dce:	4770      	bx	lr

00018dd0 <linked_list_size_get>:
   18dd0:	6800      	ldr	r0, [r0, #0]
   18dd2:	4770      	bx	lr

00018dd4 <linked_list_get_next>:
   18dd4:	6800      	ldr	r0, [r0, #0]
   18dd6:	4770      	bx	lr

00018dd8 <nrf_socket>:
   18dd8:	b570      	push	{r4, r5, r6, lr}
   18dda:	4604      	mov	r4, r0
   18ddc:	460d      	mov	r5, r1
   18dde:	4616      	mov	r6, r2
   18de0:	f7ff fe8a 	bl	18af8 <bsd_platform_af_method_table_get>
   18de4:	b130      	cbz	r0, 18df4 <nrf_socket+0x1c>
   18de6:	6803      	ldr	r3, [r0, #0]
   18de8:	4632      	mov	r2, r6
   18dea:	4629      	mov	r1, r5
   18dec:	4620      	mov	r0, r4
   18dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18df2:	4718      	bx	r3
   18df4:	f04f 30ff 	mov.w	r0, #4294967295
   18df8:	bd70      	pop	{r4, r5, r6, pc}
   18dfa:	bf00      	nop

00018dfc <nrf_close>:
   18dfc:	b510      	push	{r4, lr}
   18dfe:	4604      	mov	r4, r0
   18e00:	f7ff fed2 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18e04:	b120      	cbz	r0, 18e10 <nrf_close+0x14>
   18e06:	6843      	ldr	r3, [r0, #4]
   18e08:	4620      	mov	r0, r4
   18e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18e0e:	4718      	bx	r3
   18e10:	f04f 30ff 	mov.w	r0, #4294967295
   18e14:	bd10      	pop	{r4, pc}
   18e16:	bf00      	nop

00018e18 <nrf_sendto>:
   18e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e1c:	460d      	mov	r5, r1
   18e1e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   18e22:	4616      	mov	r6, r2
   18e24:	461f      	mov	r7, r3
   18e26:	4604      	mov	r4, r0
   18e28:	f7ff febe 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18e2c:	b158      	cbz	r0, 18e46 <nrf_sendto+0x2e>
   18e2e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   18e32:	f8d0 e008 	ldr.w	lr, [r0, #8]
   18e36:	463b      	mov	r3, r7
   18e38:	4632      	mov	r2, r6
   18e3a:	4629      	mov	r1, r5
   18e3c:	4620      	mov	r0, r4
   18e3e:	46f4      	mov	ip, lr
   18e40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e44:	4760      	bx	ip
   18e46:	f04f 30ff 	mov.w	r0, #4294967295
   18e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e4e:	bf00      	nop

00018e50 <nrf_recvfrom>:
   18e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e54:	460d      	mov	r5, r1
   18e56:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   18e5a:	4616      	mov	r6, r2
   18e5c:	461f      	mov	r7, r3
   18e5e:	4604      	mov	r4, r0
   18e60:	f7ff fea2 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18e64:	b158      	cbz	r0, 18e7e <nrf_recvfrom+0x2e>
   18e66:	e9cd 8908 	strd	r8, r9, [sp, #32]
   18e6a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   18e6e:	463b      	mov	r3, r7
   18e70:	4632      	mov	r2, r6
   18e72:	4629      	mov	r1, r5
   18e74:	4620      	mov	r0, r4
   18e76:	46f4      	mov	ip, lr
   18e78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e7c:	4760      	bx	ip
   18e7e:	f04f 30ff 	mov.w	r0, #4294967295
   18e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e86:	bf00      	nop

00018e88 <nrf_connect>:
   18e88:	b570      	push	{r4, r5, r6, lr}
   18e8a:	460d      	mov	r5, r1
   18e8c:	4616      	mov	r6, r2
   18e8e:	4604      	mov	r4, r0
   18e90:	f7ff fe8a 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18e94:	b130      	cbz	r0, 18ea4 <nrf_connect+0x1c>
   18e96:	6943      	ldr	r3, [r0, #20]
   18e98:	4632      	mov	r2, r6
   18e9a:	4629      	mov	r1, r5
   18e9c:	4620      	mov	r0, r4
   18e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18ea2:	4718      	bx	r3
   18ea4:	f04f 30ff 	mov.w	r0, #4294967295
   18ea8:	bd70      	pop	{r4, r5, r6, pc}
   18eaa:	bf00      	nop

00018eac <nrf_listen>:
   18eac:	b570      	push	{r4, r5, r6, lr}
   18eae:	460d      	mov	r5, r1
   18eb0:	4604      	mov	r4, r0
   18eb2:	f7ff fe79 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18eb6:	b128      	cbz	r0, 18ec4 <nrf_listen+0x18>
   18eb8:	6983      	ldr	r3, [r0, #24]
   18eba:	4629      	mov	r1, r5
   18ebc:	4620      	mov	r0, r4
   18ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18ec2:	4718      	bx	r3
   18ec4:	f04f 30ff 	mov.w	r0, #4294967295
   18ec8:	bd70      	pop	{r4, r5, r6, pc}
   18eca:	bf00      	nop

00018ecc <nrf_accept>:
   18ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ed0:	460d      	mov	r5, r1
   18ed2:	4616      	mov	r6, r2
   18ed4:	4604      	mov	r4, r0
   18ed6:	f7ff fe67 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18eda:	b140      	cbz	r0, 18eee <nrf_accept+0x22>
   18edc:	69c7      	ldr	r7, [r0, #28]
   18ede:	4632      	mov	r2, r6
   18ee0:	4629      	mov	r1, r5
   18ee2:	4620      	mov	r0, r4
   18ee4:	46bc      	mov	ip, r7
   18ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18eea:	2300      	movs	r3, #0
   18eec:	4760      	bx	ip
   18eee:	f04f 30ff 	mov.w	r0, #4294967295
   18ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ef6:	bf00      	nop

00018ef8 <nrf_bind>:
   18ef8:	b570      	push	{r4, r5, r6, lr}
   18efa:	460d      	mov	r5, r1
   18efc:	4616      	mov	r6, r2
   18efe:	4604      	mov	r4, r0
   18f00:	f7ff fe52 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18f04:	b130      	cbz	r0, 18f14 <nrf_bind+0x1c>
   18f06:	6903      	ldr	r3, [r0, #16]
   18f08:	4632      	mov	r2, r6
   18f0a:	4629      	mov	r1, r5
   18f0c:	4620      	mov	r0, r4
   18f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18f12:	4718      	bx	r3
   18f14:	f04f 30ff 	mov.w	r0, #4294967295
   18f18:	bd70      	pop	{r4, r5, r6, pc}
   18f1a:	bf00      	nop

00018f1c <nrf_setsockopt>:
   18f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f20:	f8dd 8018 	ldr.w	r8, [sp, #24]
   18f24:	460d      	mov	r5, r1
   18f26:	4616      	mov	r6, r2
   18f28:	461f      	mov	r7, r3
   18f2a:	4604      	mov	r4, r0
   18f2c:	f7ff fe3c 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18f30:	b158      	cbz	r0, 18f4a <nrf_setsockopt+0x2e>
   18f32:	f8cd 8018 	str.w	r8, [sp, #24]
   18f36:	f8d0 e020 	ldr.w	lr, [r0, #32]
   18f3a:	463b      	mov	r3, r7
   18f3c:	4632      	mov	r2, r6
   18f3e:	4629      	mov	r1, r5
   18f40:	4620      	mov	r0, r4
   18f42:	46f4      	mov	ip, lr
   18f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18f48:	4760      	bx	ip
   18f4a:	f04f 30ff 	mov.w	r0, #4294967295
   18f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f52:	bf00      	nop

00018f54 <nrf_getsockopt>:
   18f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f58:	f8dd 8018 	ldr.w	r8, [sp, #24]
   18f5c:	460d      	mov	r5, r1
   18f5e:	4616      	mov	r6, r2
   18f60:	461f      	mov	r7, r3
   18f62:	4604      	mov	r4, r0
   18f64:	f7ff fe20 	bl	18ba8 <bsd_platform_fd_method_table_get>
   18f68:	b158      	cbz	r0, 18f82 <nrf_getsockopt+0x2e>
   18f6a:	f8cd 8018 	str.w	r8, [sp, #24]
   18f6e:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   18f72:	463b      	mov	r3, r7
   18f74:	4632      	mov	r2, r6
   18f76:	4629      	mov	r1, r5
   18f78:	4620      	mov	r0, r4
   18f7a:	46f4      	mov	ip, lr
   18f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18f80:	4760      	bx	ip
   18f82:	f04f 30ff 	mov.w	r0, #4294967295
   18f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f8a:	bf00      	nop

00018f8c <nrf_getaddrinfo>:
   18f8c:	f7ff be82 	b.w	18c94 <bsd_platform_getaddrinfo>

00018f90 <nrf_freeaddrinfo>:
   18f90:	f7ff be82 	b.w	18c98 <bsd_platform_freeaddrinfo>

00018f94 <nrf_poll>:
   18f94:	f7ff be82 	b.w	18c9c <bsd_platform_poll>

00018f98 <nrf_fcntl>:
   18f98:	f7ff beda 	b.w	18d50 <bsd_platform_fcntl>

00018f9c <rpc_gnss_serialize_utc>:
   18f9c:	4603      	mov	r3, r0
   18f9e:	b1d8      	cbz	r0, 18fd8 <rpc_gnss_serialize_utc+0x3c>
   18fa0:	b1d1      	cbz	r1, 18fd8 <rpc_gnss_serialize_utc+0x3c>
   18fa2:	2000      	movs	r0, #0
   18fa4:	2201      	movs	r2, #1
   18fa6:	7048      	strb	r0, [r1, #1]
   18fa8:	700a      	strb	r2, [r1, #0]
   18faa:	685a      	ldr	r2, [r3, #4]
   18fac:	2010      	movs	r0, #16
   18fae:	f8c1 2006 	str.w	r2, [r1, #6]
   18fb2:	681a      	ldr	r2, [r3, #0]
   18fb4:	f8c1 2002 	str.w	r2, [r1, #2]
   18fb8:	f993 200a 	ldrsb.w	r2, [r3, #10]
   18fbc:	730a      	strb	r2, [r1, #12]
   18fbe:	f993 200d 	ldrsb.w	r2, [r3, #13]
   18fc2:	73ca      	strb	r2, [r1, #15]
   18fc4:	f993 200c 	ldrsb.w	r2, [r3, #12]
   18fc8:	738a      	strb	r2, [r1, #14]
   18fca:	7a1a      	ldrb	r2, [r3, #8]
   18fcc:	728a      	strb	r2, [r1, #10]
   18fce:	7ada      	ldrb	r2, [r3, #11]
   18fd0:	734a      	strb	r2, [r1, #13]
   18fd2:	7a5b      	ldrb	r3, [r3, #9]
   18fd4:	72cb      	strb	r3, [r1, #11]
   18fd6:	4770      	bx	lr
   18fd8:	f04f 30ff 	mov.w	r0, #4294967295
   18fdc:	4770      	bx	lr
   18fde:	bf00      	nop

00018fe0 <rpc_gnss_serialize_ephe>:
   18fe0:	4603      	mov	r3, r0
   18fe2:	2800      	cmp	r0, #0
   18fe4:	d04b      	beq.n	1907e <rpc_gnss_serialize_ephe+0x9e>
   18fe6:	2900      	cmp	r1, #0
   18fe8:	d049      	beq.n	1907e <rpc_gnss_serialize_ephe+0x9e>
   18fea:	2000      	movs	r0, #0
   18fec:	2202      	movs	r2, #2
   18fee:	7048      	strb	r0, [r1, #1]
   18ff0:	700a      	strb	r2, [r1, #0]
   18ff2:	68da      	ldr	r2, [r3, #12]
   18ff4:	2040      	movs	r0, #64	; 0x40
   18ff6:	f8c1 200b 	str.w	r2, [r1, #11]
   18ffa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   18ffe:	f8a1 2009 	strh.w	r2, [r1, #9]
   19002:	f993 2006 	ldrsb.w	r2, [r3, #6]
   19006:	720a      	strb	r2, [r1, #8]
   19008:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1900c:	878a      	strh	r2, [r1, #60]	; 0x3c
   1900e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   19012:	86ca      	strh	r2, [r1, #54]	; 0x36
   19014:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   19018:	874a      	strh	r2, [r1, #58]	; 0x3a
   1901a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1901e:	868a      	strh	r2, [r1, #52]	; 0x34
   19020:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   19024:	87ca      	strh	r2, [r1, #62]	; 0x3e
   19026:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1902a:	870a      	strh	r2, [r1, #56]	; 0x38
   1902c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   19030:	830a      	strh	r2, [r1, #24]
   19032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19034:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   19038:	7c9a      	ldrb	r2, [r3, #18]
   1903a:	744a      	strb	r2, [r1, #17]
   1903c:	785a      	ldrb	r2, [r3, #1]
   1903e:	70ca      	strb	r2, [r1, #3]
   19040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   19042:	62ca      	str	r2, [r1, #44]	; 0x2c
   19044:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   19048:	84ca      	strh	r2, [r1, #38]	; 0x26
   1904a:	885a      	ldrh	r2, [r3, #2]
   1904c:	808a      	strh	r2, [r1, #4]
   1904e:	6a1a      	ldr	r2, [r3, #32]
   19050:	f8c1 201a 	str.w	r2, [r1, #26]
   19054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19056:	630a      	str	r2, [r1, #48]	; 0x30
   19058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1905a:	f8c1 201e 	str.w	r2, [r1, #30]
   1905e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19060:	628a      	str	r2, [r1, #40]	; 0x28
   19062:	781a      	ldrb	r2, [r3, #0]
   19064:	708a      	strb	r2, [r1, #2]
   19066:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1906a:	73ca      	strb	r2, [r1, #15]
   1906c:	889a      	ldrh	r2, [r3, #4]
   1906e:	80ca      	strh	r2, [r1, #6]
   19070:	8a9a      	ldrh	r2, [r3, #20]
   19072:	824a      	strh	r2, [r1, #18]
   19074:	7c5a      	ldrb	r2, [r3, #17]
   19076:	740a      	strb	r2, [r1, #16]
   19078:	699b      	ldr	r3, [r3, #24]
   1907a:	614b      	str	r3, [r1, #20]
   1907c:	4770      	bx	lr
   1907e:	f04f 30ff 	mov.w	r0, #4294967295
   19082:	4770      	bx	lr

00019084 <rpc_gnss_serialize_alm>:
   19084:	4603      	mov	r3, r0
   19086:	b360      	cbz	r0, 190e2 <rpc_gnss_serialize_alm+0x5e>
   19088:	b359      	cbz	r1, 190e2 <rpc_gnss_serialize_alm+0x5e>
   1908a:	2000      	movs	r0, #0
   1908c:	2203      	movs	r2, #3
   1908e:	7048      	strb	r0, [r1, #1]
   19090:	700a      	strb	r2, [r1, #0]
   19092:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   19096:	2021      	movs	r0, #33	; 0x21
   19098:	f8a1 201d 	strh.w	r2, [r1, #29]
   1909c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   190a0:	f8a1 201f 	strh.w	r2, [r1, #31]
   190a4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   190a8:	810a      	strh	r2, [r1, #8]
   190aa:	889a      	ldrh	r2, [r3, #4]
   190ac:	80ca      	strh	r2, [r1, #6]
   190ae:	78da      	ldrb	r2, [r3, #3]
   190b0:	714a      	strb	r2, [r1, #5]
   190b2:	699a      	ldr	r2, [r3, #24]
   190b4:	f8c1 2019 	str.w	r2, [r1, #25]
   190b8:	691a      	ldr	r2, [r3, #16]
   190ba:	f8c1 2011 	str.w	r2, [r1, #17]
   190be:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   190c2:	814a      	strh	r2, [r1, #10]
   190c4:	68da      	ldr	r2, [r3, #12]
   190c6:	f8c1 200d 	str.w	r2, [r1, #13]
   190ca:	7a9a      	ldrb	r2, [r3, #10]
   190cc:	730a      	strb	r2, [r1, #12]
   190ce:	781a      	ldrb	r2, [r3, #0]
   190d0:	708a      	strb	r2, [r1, #2]
   190d2:	789a      	ldrb	r2, [r3, #2]
   190d4:	710a      	strb	r2, [r1, #4]
   190d6:	695a      	ldr	r2, [r3, #20]
   190d8:	f8c1 2015 	str.w	r2, [r1, #21]
   190dc:	785b      	ldrb	r3, [r3, #1]
   190de:	70cb      	strb	r3, [r1, #3]
   190e0:	4770      	bx	lr
   190e2:	f04f 30ff 	mov.w	r0, #4294967295
   190e6:	4770      	bx	lr

000190e8 <rpc_gnss_serialize_klob>:
   190e8:	4603      	mov	r3, r0
   190ea:	b1f0      	cbz	r0, 1912a <rpc_gnss_serialize_klob+0x42>
   190ec:	b1e9      	cbz	r1, 1912a <rpc_gnss_serialize_klob+0x42>
   190ee:	2000      	movs	r0, #0
   190f0:	2204      	movs	r2, #4
   190f2:	7048      	strb	r0, [r1, #1]
   190f4:	700a      	strb	r2, [r1, #0]
   190f6:	f993 2000 	ldrsb.w	r2, [r3]
   190fa:	200a      	movs	r0, #10
   190fc:	708a      	strb	r2, [r1, #2]
   190fe:	f993 2001 	ldrsb.w	r2, [r3, #1]
   19102:	70ca      	strb	r2, [r1, #3]
   19104:	f993 2002 	ldrsb.w	r2, [r3, #2]
   19108:	710a      	strb	r2, [r1, #4]
   1910a:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1910e:	714a      	strb	r2, [r1, #5]
   19110:	f993 2004 	ldrsb.w	r2, [r3, #4]
   19114:	718a      	strb	r2, [r1, #6]
   19116:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1911a:	71ca      	strb	r2, [r1, #7]
   1911c:	f993 2006 	ldrsb.w	r2, [r3, #6]
   19120:	720a      	strb	r2, [r1, #8]
   19122:	f993 3007 	ldrsb.w	r3, [r3, #7]
   19126:	724b      	strb	r3, [r1, #9]
   19128:	4770      	bx	lr
   1912a:	f04f 30ff 	mov.w	r0, #4294967295
   1912e:	4770      	bx	lr

00019130 <rpc_gnss_serialize_nequick>:
   19130:	4603      	mov	r3, r0
   19132:	b198      	cbz	r0, 1915c <rpc_gnss_serialize_nequick+0x2c>
   19134:	b191      	cbz	r1, 1915c <rpc_gnss_serialize_nequick+0x2c>
   19136:	2000      	movs	r0, #0
   19138:	2205      	movs	r2, #5
   1913a:	7048      	strb	r0, [r1, #1]
   1913c:	700a      	strb	r2, [r1, #0]
   1913e:	f9b3 2000 	ldrsh.w	r2, [r3]
   19142:	200a      	movs	r0, #10
   19144:	804a      	strh	r2, [r1, #2]
   19146:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1914a:	808a      	strh	r2, [r1, #4]
   1914c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   19150:	80ca      	strh	r2, [r1, #6]
   19152:	799a      	ldrb	r2, [r3, #6]
   19154:	720a      	strb	r2, [r1, #8]
   19156:	79db      	ldrb	r3, [r3, #7]
   19158:	724b      	strb	r3, [r1, #9]
   1915a:	4770      	bx	lr
   1915c:	f04f 30ff 	mov.w	r0, #4294967295
   19160:	4770      	bx	lr
   19162:	bf00      	nop

00019164 <rpc_gnss_serialize_time_and_sv_tow>:
   19164:	b310      	cbz	r0, 191ac <rpc_gnss_serialize_time_and_sv_tow+0x48>
   19166:	b309      	cbz	r1, 191ac <rpc_gnss_serialize_time_and_sv_tow+0x48>
   19168:	b470      	push	{r4, r5, r6}
   1916a:	2500      	movs	r5, #0
   1916c:	2606      	movs	r6, #6
   1916e:	460c      	mov	r4, r1
   19170:	704d      	strb	r5, [r1, #1]
   19172:	700e      	strb	r6, [r1, #0]
   19174:	462b      	mov	r3, r5
   19176:	8805      	ldrh	r5, [r0, #0]
   19178:	4602      	mov	r2, r0
   1917a:	804d      	strh	r5, [r1, #2]
   1917c:	68c5      	ldr	r5, [r0, #12]
   1917e:	f8c1 500a 	str.w	r5, [r1, #10]
   19182:	8905      	ldrh	r5, [r0, #8]
   19184:	810d      	strh	r5, [r1, #8]
   19186:	6840      	ldr	r0, [r0, #4]
   19188:	6048      	str	r0, [r1, #4]
   1918a:	8a15      	ldrh	r5, [r2, #16]
   1918c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   19190:	4408      	add	r0, r1
   19192:	81c5      	strh	r5, [r0, #14]
   19194:	7c90      	ldrb	r0, [r2, #18]
   19196:	3301      	adds	r3, #1
   19198:	2b20      	cmp	r3, #32
   1919a:	7420      	strb	r0, [r4, #16]
   1919c:	f102 0204 	add.w	r2, r2, #4
   191a0:	f104 0403 	add.w	r4, r4, #3
   191a4:	d1f1      	bne.n	1918a <rpc_gnss_serialize_time_and_sv_tow+0x26>
   191a6:	206e      	movs	r0, #110	; 0x6e
   191a8:	bc70      	pop	{r4, r5, r6}
   191aa:	4770      	bx	lr
   191ac:	f04f 30ff 	mov.w	r0, #4294967295
   191b0:	4770      	bx	lr
   191b2:	bf00      	nop

000191b4 <rpc_gnss_serialize_location>:
   191b4:	4603      	mov	r3, r0
   191b6:	b1c8      	cbz	r0, 191ec <rpc_gnss_serialize_location+0x38>
   191b8:	b1c1      	cbz	r1, 191ec <rpc_gnss_serialize_location+0x38>
   191ba:	2000      	movs	r0, #0
   191bc:	2207      	movs	r2, #7
   191be:	7048      	strb	r0, [r1, #1]
   191c0:	700a      	strb	r2, [r1, #0]
   191c2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   191c6:	2011      	movs	r0, #17
   191c8:	814a      	strh	r2, [r1, #10]
   191ca:	7b9a      	ldrb	r2, [r3, #14]
   191cc:	740a      	strb	r2, [r1, #16]
   191ce:	681a      	ldr	r2, [r3, #0]
   191d0:	f8c1 2002 	str.w	r2, [r1, #2]
   191d4:	685a      	ldr	r2, [r3, #4]
   191d6:	f8c1 2006 	str.w	r2, [r1, #6]
   191da:	7b1a      	ldrb	r2, [r3, #12]
   191dc:	738a      	strb	r2, [r1, #14]
   191de:	7b5a      	ldrb	r2, [r3, #13]
   191e0:	73ca      	strb	r2, [r1, #15]
   191e2:	7a9a      	ldrb	r2, [r3, #10]
   191e4:	730a      	strb	r2, [r1, #12]
   191e6:	7adb      	ldrb	r3, [r3, #11]
   191e8:	734b      	strb	r3, [r1, #13]
   191ea:	4770      	bx	lr
   191ec:	f04f 30ff 	mov.w	r0, #4294967295
   191f0:	4770      	bx	lr
   191f2:	bf00      	nop

000191f4 <rpc_gnss_serialize_integrity>:
   191f4:	b148      	cbz	r0, 1920a <rpc_gnss_serialize_integrity+0x16>
   191f6:	b141      	cbz	r1, 1920a <rpc_gnss_serialize_integrity+0x16>
   191f8:	2200      	movs	r2, #0
   191fa:	2308      	movs	r3, #8
   191fc:	704a      	strb	r2, [r1, #1]
   191fe:	700b      	strb	r3, [r1, #0]
   19200:	6803      	ldr	r3, [r0, #0]
   19202:	2006      	movs	r0, #6
   19204:	f8c1 3002 	str.w	r3, [r1, #2]
   19208:	4770      	bx	lr
   1920a:	f04f 30ff 	mov.w	r0, #4294967295
   1920e:	4770      	bx	lr

00019210 <gnss_client_event_handler>:
   19210:	f850 1b08 	ldr.w	r1, [r0], #8
   19214:	0c09      	lsrs	r1, r1, #16
   19216:	f7fd b979 	b.w	1650c <rpc_gnss_event_handler>
   1921a:	bf00      	nop

0001921c <rpc_gnss_client_init>:
   1921c:	4801      	ldr	r0, [pc, #4]	; (19224 <rpc_gnss_client_init+0x8>)
   1921e:	f7fd b8a9 	b.w	16374 <rpc_client_register>
   19222:	bf00      	nop
   19224:	00021078 	.word	0x00021078

00019228 <rpc_gnss_client_request_alloc>:
   19228:	2300      	movs	r3, #0
   1922a:	b510      	push	{r4, lr}
   1922c:	b082      	sub	sp, #8
   1922e:	9301      	str	r3, [sp, #4]
   19230:	b158      	cbz	r0, 1924a <rpc_gnss_client_request_alloc+0x22>
   19232:	4604      	mov	r4, r0
   19234:	aa01      	add	r2, sp, #4
   19236:	2007      	movs	r0, #7
   19238:	f7fd f916 	bl	16468 <rpc_message_alloc>
   1923c:	b918      	cbnz	r0, 19246 <rpc_gnss_client_request_alloc+0x1e>
   1923e:	9b01      	ldr	r3, [sp, #4]
   19240:	b10b      	cbz	r3, 19246 <rpc_gnss_client_request_alloc+0x1e>
   19242:	3308      	adds	r3, #8
   19244:	6023      	str	r3, [r4, #0]
   19246:	b002      	add	sp, #8
   19248:	bd10      	pop	{r4, pc}
   1924a:	2007      	movs	r0, #7
   1924c:	b002      	add	sp, #8
   1924e:	bd10      	pop	{r4, pc}

00019250 <rpc_gnss_client_request_send>:
   19250:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   19254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   19258:	d10b      	bne.n	19272 <rpc_gnss_client_request_send+0x22>
   1925a:	b160      	cbz	r0, 19276 <rpc_gnss_client_request_send+0x26>
   1925c:	4603      	mov	r3, r0
   1925e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   19262:	2007      	movs	r0, #7
   19264:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   19268:	f843 1d08 	str.w	r1, [r3, #-8]!
   1926c:	4619      	mov	r1, r3
   1926e:	f7fd b8eb 	b.w	16448 <rpc_message_send>
   19272:	200f      	movs	r0, #15
   19274:	4770      	bx	lr
   19276:	2007      	movs	r0, #7
   19278:	4770      	bx	lr
   1927a:	bf00      	nop

0001927c <rpc_gnss_client_message_free>:
   1927c:	b120      	cbz	r0, 19288 <rpc_gnss_client_message_free+0xc>
   1927e:	f1a0 0108 	sub.w	r1, r0, #8
   19282:	2007      	movs	r0, #7
   19284:	f7fd b91c 	b.w	164c0 <rpc_message_free>
   19288:	2007      	movs	r0, #7
   1928a:	4770      	bx	lr

0001928c <rpc_gnss_client_data_free>:
   1928c:	b118      	cbz	r0, 19296 <rpc_gnss_client_data_free+0xa>
   1928e:	4601      	mov	r1, r0
   19290:	2007      	movs	r0, #7
   19292:	f7fd b921 	b.w	164d8 <rpc_message_data_free>
   19296:	2007      	movs	r0, #7
   19298:	4770      	bx	lr
   1929a:	bf00      	nop

0001929c <datagram_handler_init>:
   1929c:	b510      	push	{r4, lr}
   1929e:	4604      	mov	r4, r0
   192a0:	200c      	movs	r0, #12
   192a2:	f000 fdd7 	bl	19e54 <nrf_malloc>
   192a6:	60e0      	str	r0, [r4, #12]
   192a8:	b118      	cbz	r0, 192b2 <datagram_handler_init+0x16>
   192aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   192ae:	f7ff bd5f 	b.w	18d70 <linked_list_init>
   192b2:	2004      	movs	r0, #4
   192b4:	bd10      	pop	{r4, pc}
   192b6:	bf00      	nop

000192b8 <datagram_handler_put>:
   192b8:	b570      	push	{r4, r5, r6, lr}
   192ba:	4606      	mov	r6, r0
   192bc:	2014      	movs	r0, #20
   192be:	460d      	mov	r5, r1
   192c0:	f000 fdc8 	bl	19e54 <nrf_malloc>
   192c4:	b178      	cbz	r0, 192e6 <datagram_handler_put+0x2e>
   192c6:	682b      	ldr	r3, [r5, #0]
   192c8:	4604      	mov	r4, r0
   192ca:	6043      	str	r3, [r0, #4]
   192cc:	686b      	ldr	r3, [r5, #4]
   192ce:	4601      	mov	r1, r0
   192d0:	6083      	str	r3, [r0, #8]
   192d2:	68eb      	ldr	r3, [r5, #12]
   192d4:	60c3      	str	r3, [r0, #12]
   192d6:	68ab      	ldr	r3, [r5, #8]
   192d8:	6103      	str	r3, [r0, #16]
   192da:	68f0      	ldr	r0, [r6, #12]
   192dc:	f7ff fd52 	bl	18d84 <linked_list_push>
   192e0:	b920      	cbnz	r0, 192ec <datagram_handler_put+0x34>
   192e2:	6868      	ldr	r0, [r5, #4]
   192e4:	bd70      	pop	{r4, r5, r6, pc}
   192e6:	f04f 30ff 	mov.w	r0, #4294967295
   192ea:	bd70      	pop	{r4, r5, r6, pc}
   192ec:	4620      	mov	r0, r4
   192ee:	f000 fdbb 	bl	19e68 <nrf_free>
   192f2:	f04f 30ff 	mov.w	r0, #4294967295
   192f6:	bd70      	pop	{r4, r5, r6, pc}

000192f8 <datagram_handler_get>:
   192f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192fc:	4607      	mov	r7, r0
   192fe:	b084      	sub	sp, #16
   19300:	68c0      	ldr	r0, [r0, #12]
   19302:	460c      	mov	r4, r1
   19304:	4616      	mov	r6, r2
   19306:	f7ff fd5d 	bl	18dc4 <linked_list_peek>
   1930a:	2800      	cmp	r0, #0
   1930c:	d03b      	beq.n	19386 <datagram_handler_get+0x8e>
   1930e:	6882      	ldr	r2, [r0, #8]
   19310:	4605      	mov	r5, r0
   19312:	e9d4 0300 	ldrd	r0, r3, [r4]
   19316:	429a      	cmp	r2, r3
   19318:	bf28      	it	cs
   1931a:	461a      	movcs	r2, r3
   1931c:	6062      	str	r2, [r4, #4]
   1931e:	b110      	cbz	r0, 19326 <datagram_handler_get+0x2e>
   19320:	6869      	ldr	r1, [r5, #4]
   19322:	f003 fc98 	bl	1cc56 <memcpy>
   19326:	68a0      	ldr	r0, [r4, #8]
   19328:	b118      	cbz	r0, 19332 <datagram_handler_get+0x3a>
   1932a:	692b      	ldr	r3, [r5, #16]
   1932c:	b10b      	cbz	r3, 19332 <datagram_handler_get+0x3a>
   1932e:	68ea      	ldr	r2, [r5, #12]
   19330:	bb02      	cbnz	r2, 19374 <datagram_handler_get+0x7c>
   19332:	2300      	movs	r3, #0
   19334:	60e3      	str	r3, [r4, #12]
   19336:	0732      	lsls	r2, r6, #28
   19338:	d506      	bpl.n	19348 <datagram_handler_get+0x50>
   1933a:	06b3      	lsls	r3, r6, #26
   1933c:	bf4c      	ite	mi
   1933e:	68a8      	ldrmi	r0, [r5, #8]
   19340:	6860      	ldrpl	r0, [r4, #4]
   19342:	b004      	add	sp, #16
   19344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19348:	68f8      	ldr	r0, [r7, #12]
   1934a:	f7ff fd31 	bl	18db0 <linked_list_pop>
   1934e:	4680      	mov	r8, r0
   19350:	2800      	cmp	r0, #0
   19352:	d0f2      	beq.n	1933a <datagram_handler_get+0x42>
   19354:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   19358:	6902      	ldr	r2, [r0, #16]
   1935a:	9300      	str	r3, [sp, #0]
   1935c:	68c3      	ldr	r3, [r0, #12]
   1935e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   19362:	9303      	str	r3, [sp, #12]
   19364:	4668      	mov	r0, sp
   19366:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   1936a:	4798      	blx	r3
   1936c:	4640      	mov	r0, r8
   1936e:	f000 fd7b 	bl	19e68 <nrf_free>
   19372:	e7e2      	b.n	1933a <datagram_handler_get+0x42>
   19374:	68e3      	ldr	r3, [r4, #12]
   19376:	429a      	cmp	r2, r3
   19378:	bf28      	it	cs
   1937a:	461a      	movcs	r2, r3
   1937c:	60e2      	str	r2, [r4, #12]
   1937e:	6929      	ldr	r1, [r5, #16]
   19380:	f003 fc69 	bl	1cc56 <memcpy>
   19384:	e7d7      	b.n	19336 <datagram_handler_get+0x3e>
   19386:	f04f 30ff 	mov.w	r0, #4294967295
   1938a:	e7da      	b.n	19342 <datagram_handler_get+0x4a>

0001938c <datagram_handler_available>:
   1938c:	b508      	push	{r3, lr}
   1938e:	68c0      	ldr	r0, [r0, #12]
   19390:	f7ff fd18 	bl	18dc4 <linked_list_peek>
   19394:	b108      	cbz	r0, 1939a <datagram_handler_available+0xe>
   19396:	6880      	ldr	r0, [r0, #8]
   19398:	bd08      	pop	{r3, pc}
   1939a:	f04f 30ff 	mov.w	r0, #4294967295
   1939e:	bd08      	pop	{r3, pc}

000193a0 <datagram_handler_flush>:
   193a0:	b530      	push	{r4, r5, lr}
   193a2:	4605      	mov	r5, r0
   193a4:	68c0      	ldr	r0, [r0, #12]
   193a6:	b085      	sub	sp, #20
   193a8:	b9a8      	cbnz	r0, 193d6 <datagram_handler_flush+0x36>
   193aa:	e01a      	b.n	193e2 <datagram_handler_flush+0x42>
   193ac:	68e8      	ldr	r0, [r5, #12]
   193ae:	f7ff fcff 	bl	18db0 <linked_list_pop>
   193b2:	4604      	mov	r4, r0
   193b4:	b170      	cbz	r0, 193d4 <datagram_handler_flush+0x34>
   193b6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   193ba:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   193be:	e9cd 0100 	strd	r0, r1, [sp]
   193c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   193c6:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   193ca:	4668      	mov	r0, sp
   193cc:	4798      	blx	r3
   193ce:	4620      	mov	r0, r4
   193d0:	f000 fd4a 	bl	19e68 <nrf_free>
   193d4:	68e8      	ldr	r0, [r5, #12]
   193d6:	f7ff fcfb 	bl	18dd0 <linked_list_size_get>
   193da:	2800      	cmp	r0, #0
   193dc:	d1e6      	bne.n	193ac <datagram_handler_flush+0xc>
   193de:	b005      	add	sp, #20
   193e0:	bd30      	pop	{r4, r5, pc}
   193e2:	2008      	movs	r0, #8
   193e4:	b005      	add	sp, #20
   193e6:	bd30      	pop	{r4, r5, pc}

000193e8 <datagram_handler_free>:
   193e8:	b530      	push	{r4, r5, lr}
   193ea:	4605      	mov	r5, r0
   193ec:	68c0      	ldr	r0, [r0, #12]
   193ee:	b085      	sub	sp, #20
   193f0:	b9a0      	cbnz	r0, 1941c <datagram_handler_free+0x34>
   193f2:	e01c      	b.n	1942e <datagram_handler_free+0x46>
   193f4:	f7ff fcdc 	bl	18db0 <linked_list_pop>
   193f8:	4604      	mov	r4, r0
   193fa:	b170      	cbz	r0, 1941a <datagram_handler_free+0x32>
   193fc:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   19400:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   19404:	e9cd 0100 	strd	r0, r1, [sp]
   19408:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1940c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   19410:	4668      	mov	r0, sp
   19412:	4798      	blx	r3
   19414:	4620      	mov	r0, r4
   19416:	f000 fd27 	bl	19e68 <nrf_free>
   1941a:	68e8      	ldr	r0, [r5, #12]
   1941c:	f7ff fcd8 	bl	18dd0 <linked_list_size_get>
   19420:	4604      	mov	r4, r0
   19422:	68e8      	ldr	r0, [r5, #12]
   19424:	2c00      	cmp	r4, #0
   19426:	d1e5      	bne.n	193f4 <datagram_handler_free+0xc>
   19428:	f000 fd1e 	bl	19e68 <nrf_free>
   1942c:	60ec      	str	r4, [r5, #12]
   1942e:	b005      	add	sp, #20
   19430:	bd30      	pop	{r4, r5, pc}
   19432:	bf00      	nop

00019434 <null_handler_init>:
   19434:	2000      	movs	r0, #0
   19436:	4770      	bx	lr

00019438 <null_handler_put>:
   19438:	b510      	push	{r4, lr}
   1943a:	460c      	mov	r4, r1
   1943c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   19440:	4620      	mov	r0, r4
   19442:	4798      	blx	r3
   19444:	6860      	ldr	r0, [r4, #4]
   19446:	bd10      	pop	{r4, pc}

00019448 <null_handler_get>:
   19448:	f04f 30ff 	mov.w	r0, #4294967295
   1944c:	4770      	bx	lr
   1944e:	bf00      	nop

00019450 <null_handler_available>:
   19450:	f04f 30ff 	mov.w	r0, #4294967295
   19454:	4770      	bx	lr
   19456:	bf00      	nop

00019458 <null_handler_flush>:
   19458:	2000      	movs	r0, #0
   1945a:	4770      	bx	lr

0001945c <null_handler_free>:
   1945c:	4770      	bx	lr
   1945e:	bf00      	nop

00019460 <packet_handler_create>:
   19460:	2801      	cmp	r0, #1
   19462:	b538      	push	{r3, r4, r5, lr}
   19464:	460d      	mov	r5, r1
   19466:	4614      	mov	r4, r2
   19468:	d00d      	beq.n	19486 <packet_handler_create+0x26>
   1946a:	db11      	blt.n	19490 <packet_handler_create+0x30>
   1946c:	2803      	cmp	r0, #3
   1946e:	dc0f      	bgt.n	19490 <packet_handler_create+0x30>
   19470:	2010      	movs	r0, #16
   19472:	f000 fcef 	bl	19e54 <nrf_malloc>
   19476:	2218      	movs	r2, #24
   19478:	b120      	cbz	r0, 19484 <packet_handler_create+0x24>
   1947a:	4b08      	ldr	r3, [pc, #32]	; (1949c <packet_handler_create+0x3c>)
   1947c:	6045      	str	r5, [r0, #4]
   1947e:	4413      	add	r3, r2
   19480:	6084      	str	r4, [r0, #8]
   19482:	6003      	str	r3, [r0, #0]
   19484:	bd38      	pop	{r3, r4, r5, pc}
   19486:	2014      	movs	r0, #20
   19488:	f000 fce4 	bl	19e54 <nrf_malloc>
   1948c:	2230      	movs	r2, #48	; 0x30
   1948e:	e7f3      	b.n	19478 <packet_handler_create+0x18>
   19490:	200c      	movs	r0, #12
   19492:	f000 fcdf 	bl	19e54 <nrf_malloc>
   19496:	2200      	movs	r2, #0
   19498:	e7ee      	b.n	19478 <packet_handler_create+0x18>
   1949a:	bf00      	nop
   1949c:	00021088 	.word	0x00021088

000194a0 <packet_handler_delete>:
   194a0:	b510      	push	{r4, lr}
   194a2:	4604      	mov	r4, r0
   194a4:	6803      	ldr	r3, [r0, #0]
   194a6:	691b      	ldr	r3, [r3, #16]
   194a8:	4798      	blx	r3
   194aa:	6823      	ldr	r3, [r4, #0]
   194ac:	4620      	mov	r0, r4
   194ae:	695b      	ldr	r3, [r3, #20]
   194b0:	4798      	blx	r3
   194b2:	4620      	mov	r0, r4
   194b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   194b8:	f000 bcd6 	b.w	19e68 <nrf_free>

000194bc <stream_handler_init>:
   194bc:	b510      	push	{r4, lr}
   194be:	4604      	mov	r4, r0
   194c0:	200c      	movs	r0, #12
   194c2:	f000 fcc7 	bl	19e54 <nrf_malloc>
   194c6:	60e0      	str	r0, [r4, #12]
   194c8:	b128      	cbz	r0, 194d6 <stream_handler_init+0x1a>
   194ca:	2300      	movs	r3, #0
   194cc:	6123      	str	r3, [r4, #16]
   194ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   194d2:	f7ff bc4d 	b.w	18d70 <linked_list_init>
   194d6:	2004      	movs	r0, #4
   194d8:	bd10      	pop	{r4, pc}
   194da:	bf00      	nop

000194dc <stream_handler_put>:
   194dc:	b570      	push	{r4, r5, r6, lr}
   194de:	4606      	mov	r6, r0
   194e0:	2014      	movs	r0, #20
   194e2:	460d      	mov	r5, r1
   194e4:	f000 fcb6 	bl	19e54 <nrf_malloc>
   194e8:	b178      	cbz	r0, 1950a <stream_handler_put+0x2e>
   194ea:	682b      	ldr	r3, [r5, #0]
   194ec:	4604      	mov	r4, r0
   194ee:	6043      	str	r3, [r0, #4]
   194f0:	686b      	ldr	r3, [r5, #4]
   194f2:	4601      	mov	r1, r0
   194f4:	6083      	str	r3, [r0, #8]
   194f6:	68eb      	ldr	r3, [r5, #12]
   194f8:	60c3      	str	r3, [r0, #12]
   194fa:	68ab      	ldr	r3, [r5, #8]
   194fc:	6103      	str	r3, [r0, #16]
   194fe:	68f0      	ldr	r0, [r6, #12]
   19500:	f7ff fc40 	bl	18d84 <linked_list_push>
   19504:	b920      	cbnz	r0, 19510 <stream_handler_put+0x34>
   19506:	6868      	ldr	r0, [r5, #4]
   19508:	bd70      	pop	{r4, r5, r6, pc}
   1950a:	f04f 30ff 	mov.w	r0, #4294967295
   1950e:	bd70      	pop	{r4, r5, r6, pc}
   19510:	4620      	mov	r0, r4
   19512:	f000 fca9 	bl	19e68 <nrf_free>
   19516:	f04f 30ff 	mov.w	r0, #4294967295
   1951a:	bd70      	pop	{r4, r5, r6, pc}

0001951c <stream_handler_get>:
   1951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19520:	4682      	mov	sl, r0
   19522:	b089      	sub	sp, #36	; 0x24
   19524:	68c0      	ldr	r0, [r0, #12]
   19526:	4689      	mov	r9, r1
   19528:	4693      	mov	fp, r2
   1952a:	f7ff fc4b 	bl	18dc4 <linked_list_peek>
   1952e:	2800      	cmp	r0, #0
   19530:	d071      	beq.n	19616 <stream_handler_get+0xfa>
   19532:	4605      	mov	r5, r0
   19534:	f8d9 0008 	ldr.w	r0, [r9, #8]
   19538:	b120      	cbz	r0, 19544 <stream_handler_get+0x28>
   1953a:	692b      	ldr	r3, [r5, #16]
   1953c:	b113      	cbz	r3, 19544 <stream_handler_get+0x28>
   1953e:	68ea      	ldr	r2, [r5, #12]
   19540:	2a00      	cmp	r2, #0
   19542:	d15d      	bne.n	19600 <stream_handler_get+0xe4>
   19544:	2300      	movs	r3, #0
   19546:	f8c9 300c 	str.w	r3, [r9, #12]
   1954a:	f8d9 2000 	ldr.w	r2, [r9]
   1954e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   19552:	f8da 1010 	ldr.w	r1, [sl, #16]
   19556:	9203      	str	r2, [sp, #12]
   19558:	f1b8 0f00 	cmp.w	r8, #0
   1955c:	d030      	beq.n	195c0 <stream_handler_get+0xa4>
   1955e:	2400      	movs	r4, #0
   19560:	f00b 0320 	and.w	r3, fp, #32
   19564:	9301      	str	r3, [sp, #4]
   19566:	f00b 0b08 	and.w	fp, fp, #8
   1956a:	68ae      	ldr	r6, [r5, #8]
   1956c:	eba8 0304 	sub.w	r3, r8, r4
   19570:	1a76      	subs	r6, r6, r1
   19572:	429e      	cmp	r6, r3
   19574:	4637      	mov	r7, r6
   19576:	bf28      	it	cs
   19578:	461f      	movcs	r7, r3
   1957a:	b10a      	cbz	r2, 19580 <stream_handler_get+0x64>
   1957c:	9a01      	ldr	r2, [sp, #4]
   1957e:	b1aa      	cbz	r2, 195ac <stream_handler_get+0x90>
   19580:	f1bb 0f00 	cmp.w	fp, #0
   19584:	d106      	bne.n	19594 <stream_handler_get+0x78>
   19586:	429e      	cmp	r6, r3
   19588:	d921      	bls.n	195ce <stream_handler_get+0xb2>
   1958a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1958e:	443b      	add	r3, r7
   19590:	f8ca 3010 	str.w	r3, [sl, #16]
   19594:	4628      	mov	r0, r5
   19596:	f7ff fc1d 	bl	18dd4 <linked_list_get_next>
   1959a:	443c      	add	r4, r7
   1959c:	4605      	mov	r5, r0
   1959e:	b180      	cbz	r0, 195c2 <stream_handler_get+0xa6>
   195a0:	45a0      	cmp	r8, r4
   195a2:	d90e      	bls.n	195c2 <stream_handler_get+0xa6>
   195a4:	f8d9 2000 	ldr.w	r2, [r9]
   195a8:	2100      	movs	r1, #0
   195aa:	e7de      	b.n	1956a <stream_handler_get+0x4e>
   195ac:	6868      	ldr	r0, [r5, #4]
   195ae:	9302      	str	r3, [sp, #8]
   195b0:	9b03      	ldr	r3, [sp, #12]
   195b2:	4401      	add	r1, r0
   195b4:	463a      	mov	r2, r7
   195b6:	1918      	adds	r0, r3, r4
   195b8:	f003 fb4d 	bl	1cc56 <memcpy>
   195bc:	9b02      	ldr	r3, [sp, #8]
   195be:	e7df      	b.n	19580 <stream_handler_get+0x64>
   195c0:	4644      	mov	r4, r8
   195c2:	4620      	mov	r0, r4
   195c4:	f8c9 4004 	str.w	r4, [r9, #4]
   195c8:	b009      	add	sp, #36	; 0x24
   195ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195ce:	f8da 000c 	ldr.w	r0, [sl, #12]
   195d2:	f7ff fbed 	bl	18db0 <linked_list_pop>
   195d6:	4606      	mov	r6, r0
   195d8:	b170      	cbz	r0, 195f8 <stream_handler_get+0xdc>
   195da:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   195de:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   195e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   195e6:	e9cd 1006 	strd	r1, r0, [sp, #24]
   195ea:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   195ee:	a804      	add	r0, sp, #16
   195f0:	4798      	blx	r3
   195f2:	4630      	mov	r0, r6
   195f4:	f000 fc38 	bl	19e68 <nrf_free>
   195f8:	2300      	movs	r3, #0
   195fa:	f8ca 3010 	str.w	r3, [sl, #16]
   195fe:	e7c9      	b.n	19594 <stream_handler_get+0x78>
   19600:	f8d9 300c 	ldr.w	r3, [r9, #12]
   19604:	429a      	cmp	r2, r3
   19606:	bf28      	it	cs
   19608:	461a      	movcs	r2, r3
   1960a:	f8c9 200c 	str.w	r2, [r9, #12]
   1960e:	6929      	ldr	r1, [r5, #16]
   19610:	f003 fb21 	bl	1cc56 <memcpy>
   19614:	e799      	b.n	1954a <stream_handler_get+0x2e>
   19616:	f04f 30ff 	mov.w	r0, #4294967295
   1961a:	e7d5      	b.n	195c8 <stream_handler_get+0xac>

0001961c <stream_handler_available>:
   1961c:	b510      	push	{r4, lr}
   1961e:	4604      	mov	r4, r0
   19620:	68c0      	ldr	r0, [r0, #12]
   19622:	f7ff fbcf 	bl	18dc4 <linked_list_peek>
   19626:	b150      	cbz	r0, 1963e <stream_handler_available+0x22>
   19628:	6924      	ldr	r4, [r4, #16]
   1962a:	4264      	negs	r4, r4
   1962c:	6883      	ldr	r3, [r0, #8]
   1962e:	441c      	add	r4, r3
   19630:	f7ff fbd0 	bl	18dd4 <linked_list_get_next>
   19634:	2800      	cmp	r0, #0
   19636:	d1f9      	bne.n	1962c <stream_handler_available+0x10>
   19638:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1963c:	bd10      	pop	{r4, pc}
   1963e:	f04f 30ff 	mov.w	r0, #4294967295
   19642:	bd10      	pop	{r4, pc}

00019644 <stream_handler_flush>:
   19644:	b530      	push	{r4, r5, lr}
   19646:	4605      	mov	r5, r0
   19648:	68c0      	ldr	r0, [r0, #12]
   1964a:	b085      	sub	sp, #20
   1964c:	b9a8      	cbnz	r0, 1967a <stream_handler_flush+0x36>
   1964e:	e01a      	b.n	19686 <stream_handler_flush+0x42>
   19650:	68e8      	ldr	r0, [r5, #12]
   19652:	f7ff fbad 	bl	18db0 <linked_list_pop>
   19656:	4604      	mov	r4, r0
   19658:	b170      	cbz	r0, 19678 <stream_handler_flush+0x34>
   1965a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1965e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   19662:	e9cd 0100 	strd	r0, r1, [sp]
   19666:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1966a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1966e:	4668      	mov	r0, sp
   19670:	4798      	blx	r3
   19672:	4620      	mov	r0, r4
   19674:	f000 fbf8 	bl	19e68 <nrf_free>
   19678:	68e8      	ldr	r0, [r5, #12]
   1967a:	f7ff fba9 	bl	18dd0 <linked_list_size_get>
   1967e:	2800      	cmp	r0, #0
   19680:	d1e6      	bne.n	19650 <stream_handler_flush+0xc>
   19682:	b005      	add	sp, #20
   19684:	bd30      	pop	{r4, r5, pc}
   19686:	2008      	movs	r0, #8
   19688:	b005      	add	sp, #20
   1968a:	bd30      	pop	{r4, r5, pc}

0001968c <stream_handler_free>:
   1968c:	b530      	push	{r4, r5, lr}
   1968e:	4605      	mov	r5, r0
   19690:	68c0      	ldr	r0, [r0, #12]
   19692:	b085      	sub	sp, #20
   19694:	b9a0      	cbnz	r0, 196c0 <stream_handler_free+0x34>
   19696:	e01c      	b.n	196d2 <stream_handler_free+0x46>
   19698:	f7ff fb8a 	bl	18db0 <linked_list_pop>
   1969c:	4604      	mov	r4, r0
   1969e:	b170      	cbz	r0, 196be <stream_handler_free+0x32>
   196a0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   196a4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   196a8:	e9cd 0100 	strd	r0, r1, [sp]
   196ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
   196b0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   196b4:	4668      	mov	r0, sp
   196b6:	4798      	blx	r3
   196b8:	4620      	mov	r0, r4
   196ba:	f000 fbd5 	bl	19e68 <nrf_free>
   196be:	68e8      	ldr	r0, [r5, #12]
   196c0:	f7ff fb86 	bl	18dd0 <linked_list_size_get>
   196c4:	4604      	mov	r4, r0
   196c6:	68e8      	ldr	r0, [r5, #12]
   196c8:	2c00      	cmp	r4, #0
   196ca:	d1e5      	bne.n	19698 <stream_handler_free+0xc>
   196cc:	f000 fbcc 	bl	19e68 <nrf_free>
   196d0:	60ec      	str	r4, [r5, #12]
   196d2:	b005      	add	sp, #20
   196d4:	bd30      	pop	{r4, r5, pc}
   196d6:	bf00      	nop

000196d8 <mem_free>:
   196d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196dc:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 197ac <mem_free+0xd4>
   196e0:	b083      	sub	sp, #12
   196e2:	9000      	str	r0, [sp, #0]
   196e4:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   196e8:	f8dc 3008 	ldr.w	r3, [ip, #8]
   196ec:	b12b      	cbz	r3, 196fa <mem_free+0x22>
   196ee:	f8dc 2000 	ldr.w	r2, [ip]
   196f2:	9c00      	ldr	r4, [sp, #0]
   196f4:	7810      	ldrb	r0, [r2, #0]
   196f6:	42a0      	cmp	r0, r4
   196f8:	d006      	beq.n	19708 <mem_free+0x30>
   196fa:	f10c 0c0c 	add.w	ip, ip, #12
   196fe:	45e3      	cmp	fp, ip
   19700:	d1f2      	bne.n	196e8 <mem_free+0x10>
   19702:	b003      	add	sp, #12
   19704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19708:	f8dc a004 	ldr.w	sl, [ip, #4]
   1970c:	eb03 080a 	add.w	r8, r3, sl
   19710:	45c2      	cmp	sl, r8
   19712:	d2f2      	bcs.n	196fa <mem_free+0x22>
   19714:	6853      	ldr	r3, [r2, #4]
   19716:	f8cd c004 	str.w	ip, [sp, #4]
   1971a:	46d6      	mov	lr, sl
   1971c:	469c      	mov	ip, r3
   1971e:	f8d2 9010 	ldr.w	r9, [r2, #16]
   19722:	8997      	ldrh	r7, [r2, #12]
   19724:	ebae 000a 	sub.w	r0, lr, sl
   19728:	b3df      	cbz	r7, 197a2 <mem_free+0xca>
   1972a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1972e:	4290      	cmp	r0, r2
   19730:	d31c      	bcc.n	1976c <mem_free+0x94>
   19732:	4665      	mov	r5, ip
   19734:	2400      	movs	r4, #0
   19736:	f109 0304 	add.w	r3, r9, #4
   1973a:	e003      	b.n	19744 <mem_free+0x6c>
   1973c:	885a      	ldrh	r2, [r3, #2]
   1973e:	3304      	adds	r3, #4
   19740:	4282      	cmp	r2, r0
   19742:	d815      	bhi.n	19770 <mem_free+0x98>
   19744:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   19748:	3401      	adds	r4, #1
   1974a:	42a7      	cmp	r7, r4
   1974c:	fb02 5506 	mla	r5, r2, r6, r5
   19750:	eba0 0002 	sub.w	r0, r0, r2
   19754:	461e      	mov	r6, r3
   19756:	d1f1      	bne.n	1973c <mem_free+0x64>
   19758:	2000      	movs	r0, #0
   1975a:	4281      	cmp	r1, r0
   1975c:	d00d      	beq.n	1977a <mem_free+0xa2>
   1975e:	f10e 0e01 	add.w	lr, lr, #1
   19762:	45f0      	cmp	r8, lr
   19764:	d1de      	bne.n	19724 <mem_free+0x4c>
   19766:	f8dd c004 	ldr.w	ip, [sp, #4]
   1976a:	e7c6      	b.n	196fa <mem_free+0x22>
   1976c:	4665      	mov	r5, ip
   1976e:	464e      	mov	r6, r9
   19770:	8833      	ldrh	r3, [r6, #0]
   19772:	fb00 5003 	mla	r0, r0, r3, r5
   19776:	4281      	cmp	r1, r0
   19778:	d1f1      	bne.n	1975e <mem_free+0x86>
   1977a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1977e:	f8dd c004 	ldr.w	ip, [sp, #4]
   19782:	d0ba      	beq.n	196fa <mem_free+0x22>
   19784:	2301      	movs	r3, #1
   19786:	4a08      	ldr	r2, [pc, #32]	; (197a8 <mem_free+0xd0>)
   19788:	ea4f 115e 	mov.w	r1, lr, lsr #5
   1978c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   19790:	f00e 0e1f 	and.w	lr, lr, #31
   19794:	fa03 fe0e 	lsl.w	lr, r3, lr
   19798:	ea4e 0000 	orr.w	r0, lr, r0
   1979c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   197a0:	e7af      	b.n	19702 <mem_free+0x2a>
   197a2:	4638      	mov	r0, r7
   197a4:	e7d9      	b.n	1975a <mem_free+0x82>
   197a6:	bf00      	nop
   197a8:	20021338 	.word	0x20021338
   197ac:	2002137c 	.word	0x2002137c

000197b0 <mem_alloc.constprop.5>:
   197b0:	2800      	cmp	r0, #0
   197b2:	d050      	beq.n	19856 <mem_alloc.constprop.5+0xa6>
   197b4:	4b6d      	ldr	r3, [pc, #436]	; (1996c <mem_alloc.constprop.5+0x1bc>)
   197b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   197ba:	4290      	cmp	r0, r2
   197bc:	d84b      	bhi.n	19856 <mem_alloc.constprop.5+0xa6>
   197be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197c2:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   197c6:	b083      	sub	sp, #12
   197c8:	f1bb 0f00 	cmp.w	fp, #0
   197cc:	d054      	beq.n	19878 <mem_alloc.constprop.5+0xc8>
   197ce:	f10b 32ff 	add.w	r2, fp, #4294967295
   197d2:	4691      	mov	r9, r2
   197d4:	2600      	movs	r6, #0
   197d6:	f04f 0812 	mov.w	r8, #18
   197da:	4f65      	ldr	r7, [pc, #404]	; (19970 <mem_alloc.constprop.5+0x1c0>)
   197dc:	9201      	str	r2, [sp, #4]
   197de:	f10b 0e11 	add.w	lr, fp, #17
   197e2:	eb06 0209 	add.w	r2, r6, r9
   197e6:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   197ea:	3201      	adds	r2, #1
   197ec:	0852      	lsrs	r2, r2, #1
   197ee:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   197f2:	f102 0112 	add.w	r1, r2, #18
   197f6:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   197fa:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   197fe:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   19802:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   19806:	f8dc c004 	ldr.w	ip, [ip, #4]
   1980a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1980e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19812:	f8da a010 	ldr.w	sl, [sl, #16]
   19816:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1981a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1981e:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   19822:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   19826:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1982a:	6849      	ldr	r1, [r1, #4]
   1982c:	692d      	ldr	r5, [r5, #16]
   1982e:	6924      	ldr	r4, [r4, #16]
   19830:	f8dc c004 	ldr.w	ip, [ip, #4]
   19834:	4550      	cmp	r0, sl
   19836:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1983a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1983e:	d915      	bls.n	1986c <mem_alloc.constprop.5+0xbc>
   19840:	4288      	cmp	r0, r1
   19842:	d211      	bcs.n	19868 <mem_alloc.constprop.5+0xb8>
   19844:	42a8      	cmp	r0, r5
   19846:	d908      	bls.n	1985a <mem_alloc.constprop.5+0xaa>
   19848:	1c56      	adds	r6, r2, #1
   1984a:	45b1      	cmp	r9, r6
   1984c:	f0c0 8087 	bcc.w	1995e <mem_alloc.constprop.5+0x1ae>
   19850:	f102 0813 	add.w	r8, r2, #19
   19854:	e7c5      	b.n	197e2 <mem_alloc.constprop.5+0x32>
   19856:	2000      	movs	r0, #0
   19858:	4770      	bx	lr
   1985a:	f102 39ff 	add.w	r9, r2, #4294967295
   1985e:	454e      	cmp	r6, r9
   19860:	d87d      	bhi.n	1995e <mem_alloc.constprop.5+0x1ae>
   19862:	f102 0e11 	add.w	lr, r2, #17
   19866:	e7bc      	b.n	197e2 <mem_alloc.constprop.5+0x32>
   19868:	f109 0601 	add.w	r6, r9, #1
   1986c:	45b3      	cmp	fp, r6
   1986e:	d007      	beq.n	19880 <mem_alloc.constprop.5+0xd0>
   19870:	2e10      	cmp	r6, #16
   19872:	d001      	beq.n	19878 <mem_alloc.constprop.5+0xc8>
   19874:	45b3      	cmp	fp, r6
   19876:	d808      	bhi.n	1988a <mem_alloc.constprop.5+0xda>
   19878:	2000      	movs	r0, #0
   1987a:	b003      	add	sp, #12
   1987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19880:	9a01      	ldr	r2, [sp, #4]
   19882:	2a10      	cmp	r2, #16
   19884:	bf18      	it	ne
   19886:	4616      	movne	r6, r2
   19888:	d0f6      	beq.n	19878 <mem_alloc.constprop.5+0xc8>
   1988a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 19974 <mem_alloc.constprop.5+0x1c4>
   1988e:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   19892:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   19896:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1989a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1989e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   198a2:	f8d2 e004 	ldr.w	lr, [r2, #4]
   198a6:	691d      	ldr	r5, [r3, #16]
   198a8:	2c00      	cmp	r4, #0
   198aa:	d056      	beq.n	1995a <mem_alloc.constprop.5+0x1aa>
   198ac:	462a      	mov	r2, r5
   198ae:	4670      	mov	r0, lr
   198b0:	00a4      	lsls	r4, r4, #2
   198b2:	eb05 0904 	add.w	r9, r5, r4
   198b6:	8851      	ldrh	r1, [r2, #2]
   198b8:	3204      	adds	r2, #4
   198ba:	4591      	cmp	r9, r2
   198bc:	4408      	add	r0, r1
   198be:	d1fa      	bne.n	198b6 <mem_alloc.constprop.5+0x106>
   198c0:	1929      	adds	r1, r5, r4
   198c2:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   198c6:	4482      	add	sl, r0
   198c8:	4582      	cmp	sl, r0
   198ca:	d918      	bls.n	198fe <mem_alloc.constprop.5+0x14e>
   198cc:	0941      	lsrs	r1, r0, #5
   198ce:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   198d2:	f000 041f 	and.w	r4, r0, #31
   198d6:	fa22 f904 	lsr.w	r9, r2, r4
   198da:	f019 0f01 	tst.w	r9, #1
   198de:	d007      	beq.n	198f0 <mem_alloc.constprop.5+0x140>
   198e0:	e013      	b.n	1990a <mem_alloc.constprop.5+0x15a>
   198e2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   198e6:	fa22 f904 	lsr.w	r9, r2, r4
   198ea:	f019 0f01 	tst.w	r9, #1
   198ee:	d10c      	bne.n	1990a <mem_alloc.constprop.5+0x15a>
   198f0:	3001      	adds	r0, #1
   198f2:	4582      	cmp	sl, r0
   198f4:	ea4f 1150 	mov.w	r1, r0, lsr #5
   198f8:	f000 041f 	and.w	r4, r0, #31
   198fc:	d1f1      	bne.n	198e2 <mem_alloc.constprop.5+0x132>
   198fe:	3601      	adds	r6, #1
   19900:	455e      	cmp	r6, fp
   19902:	f108 0808 	add.w	r8, r8, #8
   19906:	d3c4      	bcc.n	19892 <mem_alloc.constprop.5+0xe2>
   19908:	e7b6      	b.n	19878 <mem_alloc.constprop.5+0xc8>
   1990a:	2601      	movs	r6, #1
   1990c:	fa06 f404 	lsl.w	r4, r6, r4
   19910:	899e      	ldrh	r6, [r3, #12]
   19912:	ea22 0204 	bic.w	r2, r2, r4
   19916:	eba0 000e 	sub.w	r0, r0, lr
   1991a:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1991e:	685c      	ldr	r4, [r3, #4]
   19920:	2e00      	cmp	r6, #0
   19922:	d0a9      	beq.n	19878 <mem_alloc.constprop.5+0xc8>
   19924:	886a      	ldrh	r2, [r5, #2]
   19926:	4282      	cmp	r2, r0
   19928:	d811      	bhi.n	1994e <mem_alloc.constprop.5+0x19e>
   1992a:	2100      	movs	r1, #0
   1992c:	1d2b      	adds	r3, r5, #4
   1992e:	e003      	b.n	19938 <mem_alloc.constprop.5+0x188>
   19930:	885a      	ldrh	r2, [r3, #2]
   19932:	3304      	adds	r3, #4
   19934:	4282      	cmp	r2, r0
   19936:	d80a      	bhi.n	1994e <mem_alloc.constprop.5+0x19e>
   19938:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1993c:	3101      	adds	r1, #1
   1993e:	428e      	cmp	r6, r1
   19940:	fb02 4405 	mla	r4, r2, r5, r4
   19944:	eba0 0002 	sub.w	r0, r0, r2
   19948:	461d      	mov	r5, r3
   1994a:	d1f1      	bne.n	19930 <mem_alloc.constprop.5+0x180>
   1994c:	e794      	b.n	19878 <mem_alloc.constprop.5+0xc8>
   1994e:	882b      	ldrh	r3, [r5, #0]
   19950:	fb00 4003 	mla	r0, r0, r3, r4
   19954:	b003      	add	sp, #12
   19956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1995a:	4670      	mov	r0, lr
   1995c:	e7b0      	b.n	198c0 <mem_alloc.constprop.5+0x110>
   1995e:	f1bb 0f10 	cmp.w	fp, #16
   19962:	bf08      	it	eq
   19964:	260f      	moveq	r6, #15
   19966:	d090      	beq.n	1988a <mem_alloc.constprop.5+0xda>
   19968:	e786      	b.n	19878 <mem_alloc.constprop.5+0xc8>
   1996a:	bf00      	nop
   1996c:	200213b8 	.word	0x200213b8
   19970:	2002137c 	.word	0x2002137c
   19974:	20021338 	.word	0x20021338

00019978 <mem_alloc.constprop.4>:
   19978:	2800      	cmp	r0, #0
   1997a:	d04c      	beq.n	19a16 <mem_alloc.constprop.4+0x9e>
   1997c:	4b6b      	ldr	r3, [pc, #428]	; (19b2c <mem_alloc.constprop.4+0x1b4>)
   1997e:	681a      	ldr	r2, [r3, #0]
   19980:	4290      	cmp	r0, r2
   19982:	d848      	bhi.n	19a16 <mem_alloc.constprop.4+0x9e>
   19984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19988:	685f      	ldr	r7, [r3, #4]
   1998a:	b083      	sub	sp, #12
   1998c:	9700      	str	r7, [sp, #0]
   1998e:	2f00      	cmp	r7, #0
   19990:	d051      	beq.n	19a36 <mem_alloc.constprop.4+0xbe>
   19992:	1e7a      	subs	r2, r7, #1
   19994:	4696      	mov	lr, r2
   19996:	2100      	movs	r1, #0
   19998:	f04f 0c01 	mov.w	ip, #1
   1999c:	4c64      	ldr	r4, [pc, #400]	; (19b30 <mem_alloc.constprop.4+0x1b8>)
   1999e:	9201      	str	r2, [sp, #4]
   199a0:	eb01 020e 	add.w	r2, r1, lr
   199a4:	3201      	adds	r2, #1
   199a6:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   199aa:	0852      	lsrs	r2, r2, #1
   199ac:	f102 0801 	add.w	r8, r2, #1
   199b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   199b4:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   199b8:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   199bc:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   199c0:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   199c4:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   199c8:	f8d9 9004 	ldr.w	r9, [r9, #4]
   199cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   199d0:	f8da a010 	ldr.w	sl, [sl, #16]
   199d4:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   199d8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   199dc:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   199e0:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   199e4:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   199e8:	6936      	ldr	r6, [r6, #16]
   199ea:	f8db b004 	ldr.w	fp, [fp, #4]
   199ee:	692d      	ldr	r5, [r5, #16]
   199f0:	f8d9 9004 	ldr.w	r9, [r9, #4]
   199f4:	4550      	cmp	r0, sl
   199f6:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   199fa:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   199fe:	d913      	bls.n	19a28 <mem_alloc.constprop.4+0xb0>
   19a00:	42a8      	cmp	r0, r5
   19a02:	d210      	bcs.n	19a26 <mem_alloc.constprop.4+0xae>
   19a04:	42b0      	cmp	r0, r6
   19a06:	d908      	bls.n	19a1a <mem_alloc.constprop.4+0xa2>
   19a08:	45c6      	cmp	lr, r8
   19a0a:	4641      	mov	r1, r8
   19a0c:	f0c0 8087 	bcc.w	19b1e <mem_alloc.constprop.4+0x1a6>
   19a10:	f108 0c01 	add.w	ip, r8, #1
   19a14:	e7c4      	b.n	199a0 <mem_alloc.constprop.4+0x28>
   19a16:	2000      	movs	r0, #0
   19a18:	4770      	bx	lr
   19a1a:	f102 3eff 	add.w	lr, r2, #4294967295
   19a1e:	4571      	cmp	r1, lr
   19a20:	d87d      	bhi.n	19b1e <mem_alloc.constprop.4+0x1a6>
   19a22:	4617      	mov	r7, r2
   19a24:	e7bc      	b.n	199a0 <mem_alloc.constprop.4+0x28>
   19a26:	4639      	mov	r1, r7
   19a28:	9a00      	ldr	r2, [sp, #0]
   19a2a:	428a      	cmp	r2, r1
   19a2c:	d007      	beq.n	19a3e <mem_alloc.constprop.4+0xc6>
   19a2e:	2910      	cmp	r1, #16
   19a30:	d001      	beq.n	19a36 <mem_alloc.constprop.4+0xbe>
   19a32:	428a      	cmp	r2, r1
   19a34:	d808      	bhi.n	19a48 <mem_alloc.constprop.4+0xd0>
   19a36:	2000      	movs	r0, #0
   19a38:	b003      	add	sp, #12
   19a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a3e:	9a01      	ldr	r2, [sp, #4]
   19a40:	2a10      	cmp	r2, #16
   19a42:	bf18      	it	ne
   19a44:	4611      	movne	r1, r2
   19a46:	d0f6      	beq.n	19a36 <mem_alloc.constprop.4+0xbe>
   19a48:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 19b34 <mem_alloc.constprop.4+0x1bc>
   19a4c:	f8dd 9000 	ldr.w	r9, [sp]
   19a50:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   19a54:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   19a58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   19a5c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   19a60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   19a64:	f8d2 e004 	ldr.w	lr, [r2, #4]
   19a68:	691f      	ldr	r7, [r3, #16]
   19a6a:	2e00      	cmp	r6, #0
   19a6c:	d055      	beq.n	19b1a <mem_alloc.constprop.4+0x1a2>
   19a6e:	463a      	mov	r2, r7
   19a70:	4670      	mov	r0, lr
   19a72:	00b6      	lsls	r6, r6, #2
   19a74:	eb07 0a06 	add.w	sl, r7, r6
   19a78:	8855      	ldrh	r5, [r2, #2]
   19a7a:	3204      	adds	r2, #4
   19a7c:	4592      	cmp	sl, r2
   19a7e:	4428      	add	r0, r5
   19a80:	d1fa      	bne.n	19a78 <mem_alloc.constprop.4+0x100>
   19a82:	19bd      	adds	r5, r7, r6
   19a84:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   19a88:	4483      	add	fp, r0
   19a8a:	4583      	cmp	fp, r0
   19a8c:	d918      	bls.n	19ac0 <mem_alloc.constprop.4+0x148>
   19a8e:	0945      	lsrs	r5, r0, #5
   19a90:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   19a94:	f000 061f 	and.w	r6, r0, #31
   19a98:	fa22 fa06 	lsr.w	sl, r2, r6
   19a9c:	f01a 0f01 	tst.w	sl, #1
   19aa0:	d007      	beq.n	19ab2 <mem_alloc.constprop.4+0x13a>
   19aa2:	e013      	b.n	19acc <mem_alloc.constprop.4+0x154>
   19aa4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   19aa8:	fa22 fa06 	lsr.w	sl, r2, r6
   19aac:	f01a 0f01 	tst.w	sl, #1
   19ab0:	d10c      	bne.n	19acc <mem_alloc.constprop.4+0x154>
   19ab2:	3001      	adds	r0, #1
   19ab4:	4583      	cmp	fp, r0
   19ab6:	ea4f 1550 	mov.w	r5, r0, lsr #5
   19aba:	f000 061f 	and.w	r6, r0, #31
   19abe:	d1f1      	bne.n	19aa4 <mem_alloc.constprop.4+0x12c>
   19ac0:	3101      	adds	r1, #1
   19ac2:	4549      	cmp	r1, r9
   19ac4:	f108 0808 	add.w	r8, r8, #8
   19ac8:	d3c4      	bcc.n	19a54 <mem_alloc.constprop.4+0xdc>
   19aca:	e7b4      	b.n	19a36 <mem_alloc.constprop.4+0xbe>
   19acc:	2101      	movs	r1, #1
   19ace:	40b1      	lsls	r1, r6
   19ad0:	899e      	ldrh	r6, [r3, #12]
   19ad2:	ea22 0201 	bic.w	r2, r2, r1
   19ad6:	eba0 000e 	sub.w	r0, r0, lr
   19ada:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   19ade:	685c      	ldr	r4, [r3, #4]
   19ae0:	2e00      	cmp	r6, #0
   19ae2:	d0a8      	beq.n	19a36 <mem_alloc.constprop.4+0xbe>
   19ae4:	887a      	ldrh	r2, [r7, #2]
   19ae6:	4282      	cmp	r2, r0
   19ae8:	d811      	bhi.n	19b0e <mem_alloc.constprop.4+0x196>
   19aea:	2100      	movs	r1, #0
   19aec:	1d3b      	adds	r3, r7, #4
   19aee:	e003      	b.n	19af8 <mem_alloc.constprop.4+0x180>
   19af0:	885a      	ldrh	r2, [r3, #2]
   19af2:	3304      	adds	r3, #4
   19af4:	4282      	cmp	r2, r0
   19af6:	d80a      	bhi.n	19b0e <mem_alloc.constprop.4+0x196>
   19af8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   19afc:	3101      	adds	r1, #1
   19afe:	428e      	cmp	r6, r1
   19b00:	eba0 0002 	sub.w	r0, r0, r2
   19b04:	fb02 4405 	mla	r4, r2, r5, r4
   19b08:	461f      	mov	r7, r3
   19b0a:	d1f1      	bne.n	19af0 <mem_alloc.constprop.4+0x178>
   19b0c:	e793      	b.n	19a36 <mem_alloc.constprop.4+0xbe>
   19b0e:	883b      	ldrh	r3, [r7, #0]
   19b10:	fb00 4003 	mla	r0, r0, r3, r4
   19b14:	b003      	add	sp, #12
   19b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b1a:	4670      	mov	r0, lr
   19b1c:	e7b1      	b.n	19a82 <mem_alloc.constprop.4+0x10a>
   19b1e:	9a00      	ldr	r2, [sp, #0]
   19b20:	2a10      	cmp	r2, #16
   19b22:	bf08      	it	eq
   19b24:	210f      	moveq	r1, #15
   19b26:	d08f      	beq.n	19a48 <mem_alloc.constprop.4+0xd0>
   19b28:	e785      	b.n	19a36 <mem_alloc.constprop.4+0xbe>
   19b2a:	bf00      	nop
   19b2c:	200213b8 	.word	0x200213b8
   19b30:	2002137c 	.word	0x2002137c
   19b34:	20021338 	.word	0x20021338

00019b38 <nrf_mem_init>:
   19b38:	b570      	push	{r4, r5, r6, lr}
   19b3a:	2200      	movs	r2, #0
   19b3c:	2501      	movs	r5, #1
   19b3e:	4833      	ldr	r0, [pc, #204]	; (19c0c <nrf_mem_init+0xd4>)
   19b40:	0951      	lsrs	r1, r2, #5
   19b42:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   19b46:	f002 031f 	and.w	r3, r2, #31
   19b4a:	fa05 f303 	lsl.w	r3, r5, r3
   19b4e:	3201      	adds	r2, #1
   19b50:	4323      	orrs	r3, r4
   19b52:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   19b56:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   19b5a:	d1f1      	bne.n	19b40 <nrf_mem_init+0x8>
   19b5c:	2400      	movs	r4, #0
   19b5e:	4b2c      	ldr	r3, [pc, #176]	; (19c10 <nrf_mem_init+0xd8>)
   19b60:	4621      	mov	r1, r4
   19b62:	223c      	movs	r2, #60	; 0x3c
   19b64:	482b      	ldr	r0, [pc, #172]	; (19c14 <nrf_mem_init+0xdc>)
   19b66:	601c      	str	r4, [r3, #0]
   19b68:	f003 f8a0 	bl	1ccac <memset>
   19b6c:	2110      	movs	r1, #16
   19b6e:	2205      	movs	r2, #5
   19b70:	4b29      	ldr	r3, [pc, #164]	; (19c18 <nrf_mem_init+0xe0>)
   19b72:	4e2a      	ldr	r6, [pc, #168]	; (19c1c <nrf_mem_init+0xe4>)
   19b74:	e9c3 4400 	strd	r4, r4, [r3]
   19b78:	60d9      	str	r1, [r3, #12]
   19b7a:	6159      	str	r1, [r3, #20]
   19b7c:	61d9      	str	r1, [r3, #28]
   19b7e:	6259      	str	r1, [r3, #36]	; 0x24
   19b80:	62d9      	str	r1, [r3, #44]	; 0x2c
   19b82:	6359      	str	r1, [r3, #52]	; 0x34
   19b84:	63d9      	str	r1, [r3, #60]	; 0x3c
   19b86:	6459      	str	r1, [r3, #68]	; 0x44
   19b88:	64d9      	str	r1, [r3, #76]	; 0x4c
   19b8a:	6559      	str	r1, [r3, #84]	; 0x54
   19b8c:	65d9      	str	r1, [r3, #92]	; 0x5c
   19b8e:	6659      	str	r1, [r3, #100]	; 0x64
   19b90:	66d9      	str	r1, [r3, #108]	; 0x6c
   19b92:	6759      	str	r1, [r3, #116]	; 0x74
   19b94:	67d9      	str	r1, [r3, #124]	; 0x7c
   19b96:	609a      	str	r2, [r3, #8]
   19b98:	611a      	str	r2, [r3, #16]
   19b9a:	619a      	str	r2, [r3, #24]
   19b9c:	621a      	str	r2, [r3, #32]
   19b9e:	629a      	str	r2, [r3, #40]	; 0x28
   19ba0:	631a      	str	r2, [r3, #48]	; 0x30
   19ba2:	639a      	str	r2, [r3, #56]	; 0x38
   19ba4:	641a      	str	r2, [r3, #64]	; 0x40
   19ba6:	649a      	str	r2, [r3, #72]	; 0x48
   19ba8:	651a      	str	r2, [r3, #80]	; 0x50
   19baa:	659a      	str	r2, [r3, #88]	; 0x58
   19bac:	661a      	str	r2, [r3, #96]	; 0x60
   19bae:	669a      	str	r2, [r3, #104]	; 0x68
   19bb0:	671a      	str	r2, [r3, #112]	; 0x70
   19bb2:	679a      	str	r2, [r3, #120]	; 0x78
   19bb4:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   19bb8:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   19bbc:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   19bc0:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   19bc4:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   19bc8:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   19bcc:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   19bd0:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   19bd4:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   19bd8:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   19bdc:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   19be0:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   19be4:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   19be8:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   19bec:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   19bf0:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   19bf4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   19bf8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19bfc:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   19c00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19c04:	4620      	mov	r0, r4
   19c06:	7035      	strb	r5, [r6, #0]
   19c08:	bd70      	pop	{r4, r5, r6, pc}
   19c0a:	bf00      	nop
   19c0c:	20021338 	.word	0x20021338
   19c10:	20021378 	.word	0x20021378
   19c14:	2002137c 	.word	0x2002137c
   19c18:	200213b8 	.word	0x200213b8
   19c1c:	20021d77 	.word	0x20021d77

00019c20 <nrf_mem_register>:
   19c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c24:	4b87      	ldr	r3, [pc, #540]	; (19e44 <nrf_mem_register+0x224>)
   19c26:	b087      	sub	sp, #28
   19c28:	781b      	ldrb	r3, [r3, #0]
   19c2a:	2b00      	cmp	r3, #0
   19c2c:	f000 808c 	beq.w	19d48 <nrf_mem_register+0x128>
   19c30:	b328      	cbz	r0, 19c7e <nrf_mem_register+0x5e>
   19c32:	b321      	cbz	r1, 19c7e <nrf_mem_register+0x5e>
   19c34:	780b      	ldrb	r3, [r1, #0]
   19c36:	f8df 8218 	ldr.w	r8, [pc, #536]	; 19e50 <nrf_mem_register+0x230>
   19c3a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   19c3e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   19c42:	685b      	ldr	r3, [r3, #4]
   19c44:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   19c48:	4463      	add	r3, ip
   19c4a:	2b10      	cmp	r3, #16
   19c4c:	d811      	bhi.n	19c72 <nrf_mem_register+0x52>
   19c4e:	f04f 0a00 	mov.w	sl, #0
   19c52:	4689      	mov	r9, r1
   19c54:	4b7c      	ldr	r3, [pc, #496]	; (19e48 <nrf_mem_register+0x228>)
   19c56:	4f7d      	ldr	r7, [pc, #500]	; (19e4c <nrf_mem_register+0x22c>)
   19c58:	681b      	ldr	r3, [r3, #0]
   19c5a:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   19c5e:	9300      	str	r3, [sp, #0]
   19c60:	68b9      	ldr	r1, [r7, #8]
   19c62:	b191      	cbz	r1, 19c8a <nrf_mem_register+0x6a>
   19c64:	f10a 0a01 	add.w	sl, sl, #1
   19c68:	f1ba 0f05 	cmp.w	sl, #5
   19c6c:	f107 070c 	add.w	r7, r7, #12
   19c70:	d1f6      	bne.n	19c60 <nrf_mem_register+0x40>
   19c72:	f248 1b07 	movw	fp, #33031	; 0x8107
   19c76:	4658      	mov	r0, fp
   19c78:	b007      	add	sp, #28
   19c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c7e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   19c82:	4658      	mov	r0, fp
   19c84:	b007      	add	sp, #28
   19c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c8a:	f1bc 0f00 	cmp.w	ip, #0
   19c8e:	d061      	beq.n	19d54 <nrf_mem_register+0x134>
   19c90:	460d      	mov	r5, r1
   19c92:	460c      	mov	r4, r1
   19c94:	f8d9 3010 	ldr.w	r3, [r9, #16]
   19c98:	eb0e 0b03 	add.w	fp, lr, r3
   19c9c:	885a      	ldrh	r2, [r3, #2]
   19c9e:	f833 6b04 	ldrh.w	r6, [r3], #4
   19ca2:	4415      	add	r5, r2
   19ca4:	459b      	cmp	fp, r3
   19ca6:	fb02 4406 	mla	r4, r2, r6, r4
   19caa:	d1f7      	bne.n	19c9c <nrf_mem_register+0x7c>
   19cac:	f8d9 3008 	ldr.w	r3, [r9, #8]
   19cb0:	42a3      	cmp	r3, r4
   19cb2:	d3d7      	bcc.n	19c64 <nrf_mem_register+0x44>
   19cb4:	9b00      	ldr	r3, [sp, #0]
   19cb6:	442b      	add	r3, r5
   19cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   19cbc:	d2d2      	bcs.n	19c64 <nrf_mem_register+0x44>
   19cbe:	4c63      	ldr	r4, [pc, #396]	; (19e4c <nrf_mem_register+0x22c>)
   19cc0:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   19cc4:	0092      	lsls	r2, r2, #2
   19cc6:	f8c0 a000 	str.w	sl, [r0]
   19cca:	18a0      	adds	r0, r4, r2
   19ccc:	f844 9002 	str.w	r9, [r4, r2]
   19cd0:	9a00      	ldr	r2, [sp, #0]
   19cd2:	468b      	mov	fp, r1
   19cd4:	e9c0 2501 	strd	r2, r5, [r0, #4]
   19cd8:	f899 2001 	ldrb.w	r2, [r9, #1]
   19cdc:	485a      	ldr	r0, [pc, #360]	; (19e48 <nrf_mem_register+0x228>)
   19cde:	2a01      	cmp	r2, #1
   19ce0:	6003      	str	r3, [r0, #0]
   19ce2:	d0c8      	beq.n	19c76 <nrf_mem_register+0x56>
   19ce4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   19ce8:	2b00      	cmp	r3, #0
   19cea:	d0c4      	beq.n	19c76 <nrf_mem_register+0x56>
   19cec:	2500      	movs	r5, #0
   19cee:	f8cd 9004 	str.w	r9, [sp, #4]
   19cf2:	f8cd a00c 	str.w	sl, [sp, #12]
   19cf6:	f8cd b014 	str.w	fp, [sp, #20]
   19cfa:	9b01      	ldr	r3, [sp, #4]
   19cfc:	781f      	ldrb	r7, [r3, #0]
   19cfe:	691a      	ldr	r2, [r3, #16]
   19d00:	013b      	lsls	r3, r7, #4
   19d02:	eb03 0907 	add.w	r9, r3, r7
   19d06:	9300      	str	r3, [sp, #0]
   19d08:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   19d0c:	6859      	ldr	r1, [r3, #4]
   19d0e:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   19d12:	9102      	str	r1, [sp, #8]
   19d14:	bb39      	cbnz	r1, 19d66 <nrf_mem_register+0x146>
   19d16:	9a03      	ldr	r2, [sp, #12]
   19d18:	60dd      	str	r5, [r3, #12]
   19d1a:	609a      	str	r2, [r3, #8]
   19d1c:	9b00      	ldr	r3, [sp, #0]
   19d1e:	443b      	add	r3, r7
   19d20:	461f      	mov	r7, r3
   19d22:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   19d26:	684b      	ldr	r3, [r1, #4]
   19d28:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   19d2c:	3301      	adds	r3, #1
   19d2e:	4294      	cmp	r4, r2
   19d30:	604b      	str	r3, [r1, #4]
   19d32:	d912      	bls.n	19d5a <nrf_mem_register+0x13a>
   19d34:	9b01      	ldr	r3, [sp, #4]
   19d36:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   19d3a:	899b      	ldrh	r3, [r3, #12]
   19d3c:	3501      	adds	r5, #1
   19d3e:	429d      	cmp	r5, r3
   19d40:	d3db      	bcc.n	19cfa <nrf_mem_register+0xda>
   19d42:	f8dd b014 	ldr.w	fp, [sp, #20]
   19d46:	e796      	b.n	19c76 <nrf_mem_register+0x56>
   19d48:	f248 1b08 	movw	fp, #33032	; 0x8108
   19d4c:	4658      	mov	r0, fp
   19d4e:	b007      	add	sp, #28
   19d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d54:	9b00      	ldr	r3, [sp, #0]
   19d56:	4665      	mov	r5, ip
   19d58:	e7ae      	b.n	19cb8 <nrf_mem_register+0x98>
   19d5a:	9b01      	ldr	r3, [sp, #4]
   19d5c:	3501      	adds	r5, #1
   19d5e:	899b      	ldrh	r3, [r3, #12]
   19d60:	42ab      	cmp	r3, r5
   19d62:	d8ca      	bhi.n	19cfa <nrf_mem_register+0xda>
   19d64:	e7ed      	b.n	19d42 <nrf_mem_register+0x122>
   19d66:	2600      	movs	r6, #0
   19d68:	f101 3aff 	add.w	sl, r1, #4294967295
   19d6c:	9504      	str	r5, [sp, #16]
   19d6e:	eb06 000a 	add.w	r0, r6, sl
   19d72:	eb09 0206 	add.w	r2, r9, r6
   19d76:	3201      	adds	r2, #1
   19d78:	3001      	adds	r0, #1
   19d7a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   19d7e:	0840      	lsrs	r0, r0, #1
   19d80:	4d32      	ldr	r5, [pc, #200]	; (19e4c <nrf_mem_register+0x22c>)
   19d82:	eb09 0100 	add.w	r1, r9, r0
   19d86:	eb09 030a 	add.w	r3, r9, sl
   19d8a:	3101      	adds	r1, #1
   19d8c:	3301      	adds	r3, #1
   19d8e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   19d92:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   19d96:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   19d9a:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   19d9e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   19da2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   19da6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   19daa:	f8db b010 	ldr.w	fp, [fp, #16]
   19dae:	6852      	ldr	r2, [r2, #4]
   19db0:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   19db4:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   19db8:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   19dbc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   19dc0:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   19dc4:	f8de e010 	ldr.w	lr, [lr, #16]
   19dc8:	6849      	ldr	r1, [r1, #4]
   19dca:	f8dc c010 	ldr.w	ip, [ip, #16]
   19dce:	685b      	ldr	r3, [r3, #4]
   19dd0:	4294      	cmp	r4, r2
   19dd2:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   19dd6:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   19dda:	d92d      	bls.n	19e38 <nrf_mem_register+0x218>
   19ddc:	429c      	cmp	r4, r3
   19dde:	d22d      	bcs.n	19e3c <nrf_mem_register+0x21c>
   19de0:	428c      	cmp	r4, r1
   19de2:	d924      	bls.n	19e2e <nrf_mem_register+0x20e>
   19de4:	1c46      	adds	r6, r0, #1
   19de6:	45b2      	cmp	sl, r6
   19de8:	d2c1      	bcs.n	19d6e <nrf_mem_register+0x14e>
   19dea:	2610      	movs	r6, #16
   19dec:	9d04      	ldr	r5, [sp, #16]
   19dee:	9a02      	ldr	r2, [sp, #8]
   19df0:	42b2      	cmp	r2, r6
   19df2:	d911      	bls.n	19e18 <nrf_mem_register+0x1f8>
   19df4:	9b00      	ldr	r3, [sp, #0]
   19df6:	443b      	add	r3, r7
   19df8:	441a      	add	r2, r3
   19dfa:	4433      	add	r3, r6
   19dfc:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   19e00:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   19e04:	2208      	movs	r2, #8
   19e06:	4651      	mov	r1, sl
   19e08:	eb0a 0002 	add.w	r0, sl, r2
   19e0c:	f1aa 0a08 	sub.w	sl, sl, #8
   19e10:	f002 ff21 	bl	1cc56 <memcpy>
   19e14:	45d1      	cmp	r9, sl
   19e16:	d1f5      	bne.n	19e04 <nrf_mem_register+0x1e4>
   19e18:	9b00      	ldr	r3, [sp, #0]
   19e1a:	9903      	ldr	r1, [sp, #12]
   19e1c:	443b      	add	r3, r7
   19e1e:	4433      	add	r3, r6
   19e20:	3301      	adds	r3, #1
   19e22:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   19e26:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   19e2a:	6055      	str	r5, [r2, #4]
   19e2c:	e776      	b.n	19d1c <nrf_mem_register+0xfc>
   19e2e:	f100 3aff 	add.w	sl, r0, #4294967295
   19e32:	4556      	cmp	r6, sl
   19e34:	d99b      	bls.n	19d6e <nrf_mem_register+0x14e>
   19e36:	e7d8      	b.n	19dea <nrf_mem_register+0x1ca>
   19e38:	9d04      	ldr	r5, [sp, #16]
   19e3a:	e7d8      	b.n	19dee <nrf_mem_register+0x1ce>
   19e3c:	9d04      	ldr	r5, [sp, #16]
   19e3e:	f10a 0601 	add.w	r6, sl, #1
   19e42:	e7d4      	b.n	19dee <nrf_mem_register+0x1ce>
   19e44:	20021d77 	.word	0x20021d77
   19e48:	20021378 	.word	0x20021378
   19e4c:	2002137c 	.word	0x2002137c
   19e50:	200213b8 	.word	0x200213b8

00019e54 <nrf_malloc>:
   19e54:	4b03      	ldr	r3, [pc, #12]	; (19e64 <nrf_malloc+0x10>)
   19e56:	781b      	ldrb	r3, [r3, #0]
   19e58:	b10b      	cbz	r3, 19e5e <nrf_malloc+0xa>
   19e5a:	f7ff bd8d 	b.w	19978 <mem_alloc.constprop.4>
   19e5e:	4618      	mov	r0, r3
   19e60:	4770      	bx	lr
   19e62:	bf00      	nop
   19e64:	20021d77 	.word	0x20021d77

00019e68 <nrf_free>:
   19e68:	4b04      	ldr	r3, [pc, #16]	; (19e7c <nrf_free+0x14>)
   19e6a:	781b      	ldrb	r3, [r3, #0]
   19e6c:	b123      	cbz	r3, 19e78 <nrf_free+0x10>
   19e6e:	b118      	cbz	r0, 19e78 <nrf_free+0x10>
   19e70:	4601      	mov	r1, r0
   19e72:	2000      	movs	r0, #0
   19e74:	f7ff bc30 	b.w	196d8 <mem_free>
   19e78:	4770      	bx	lr
   19e7a:	bf00      	nop
   19e7c:	20021d77 	.word	0x20021d77

00019e80 <nrf_shared_malloc>:
   19e80:	4b03      	ldr	r3, [pc, #12]	; (19e90 <nrf_shared_malloc+0x10>)
   19e82:	781b      	ldrb	r3, [r3, #0]
   19e84:	b10b      	cbz	r3, 19e8a <nrf_shared_malloc+0xa>
   19e86:	f7ff bc93 	b.w	197b0 <mem_alloc.constprop.5>
   19e8a:	4618      	mov	r0, r3
   19e8c:	4770      	bx	lr
   19e8e:	bf00      	nop
   19e90:	20021d77 	.word	0x20021d77

00019e94 <nrf_shared_free>:
   19e94:	4b04      	ldr	r3, [pc, #16]	; (19ea8 <nrf_shared_free+0x14>)
   19e96:	781b      	ldrb	r3, [r3, #0]
   19e98:	b123      	cbz	r3, 19ea4 <nrf_shared_free+0x10>
   19e9a:	b118      	cbz	r0, 19ea4 <nrf_shared_free+0x10>
   19e9c:	4601      	mov	r1, r0
   19e9e:	2001      	movs	r0, #1
   19ea0:	f7ff bc1a 	b.w	196d8 <mem_free>
   19ea4:	4770      	bx	lr
   19ea6:	bf00      	nop
   19ea8:	20021d77 	.word	0x20021d77

00019eac <rpc_dfu_event_handler>:
   19eac:	b508      	push	{r3, lr}
   19eae:	4a08      	ldr	r2, [pc, #32]	; (19ed0 <rpc_dfu_event_handler+0x24>)
   19eb0:	68c1      	ldr	r1, [r0, #12]
   19eb2:	8812      	ldrh	r2, [r2, #0]
   19eb4:	4603      	mov	r3, r0
   19eb6:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   19eba:	d005      	beq.n	19ec8 <rpc_dfu_event_handler+0x1c>
   19ebc:	6800      	ldr	r0, [r0, #0]
   19ebe:	b110      	cbz	r0, 19ec6 <rpc_dfu_event_handler+0x1a>
   19ec0:	f7fd fa8e 	bl	173e0 <rpc_dfu_client_data_free>
   19ec4:	2000      	movs	r0, #0
   19ec6:	bd08      	pop	{r3, pc}
   19ec8:	4a02      	ldr	r2, [pc, #8]	; (19ed4 <rpc_dfu_event_handler+0x28>)
   19eca:	2001      	movs	r0, #1
   19ecc:	6013      	str	r3, [r2, #0]
   19ece:	bd08      	pop	{r3, pc}
   19ed0:	20021c46 	.word	0x20021c46
   19ed4:	200214d4 	.word	0x200214d4

00019ed8 <mfu_interface_init>:
   19ed8:	2300      	movs	r3, #0
   19eda:	b510      	push	{r4, lr}
   19edc:	4808      	ldr	r0, [pc, #32]	; (19f00 <mfu_interface_init+0x28>)
   19ede:	4909      	ldr	r1, [pc, #36]	; (19f04 <mfu_interface_init+0x2c>)
   19ee0:	4a09      	ldr	r2, [pc, #36]	; (19f08 <mfu_interface_init+0x30>)
   19ee2:	4c0a      	ldr	r4, [pc, #40]	; (19f0c <mfu_interface_init+0x34>)
   19ee4:	8003      	strh	r3, [r0, #0]
   19ee6:	600b      	str	r3, [r1, #0]
   19ee8:	6013      	str	r3, [r2, #0]
   19eea:	6023      	str	r3, [r4, #0]
   19eec:	f7fd fa42 	bl	17374 <rpc_dfu_client_init>
   19ef0:	b910      	cbnz	r0, 19ef8 <mfu_interface_init+0x20>
   19ef2:	2301      	movs	r3, #1
   19ef4:	6023      	str	r3, [r4, #0]
   19ef6:	bd10      	pop	{r4, pc}
   19ef8:	f04f 30ff 	mov.w	r0, #4294967295
   19efc:	bd10      	pop	{r4, pc}
   19efe:	bf00      	nop
   19f00:	20021c46 	.word	0x20021c46
   19f04:	200214d4 	.word	0x200214d4
   19f08:	200214d0 	.word	0x200214d0
   19f0c:	200214c8 	.word	0x200214c8

00019f10 <mfu_interface_open>:
   19f10:	b508      	push	{r3, lr}
   19f12:	4b07      	ldr	r3, [pc, #28]	; (19f30 <mfu_interface_open+0x20>)
   19f14:	681a      	ldr	r2, [r3, #0]
   19f16:	2a01      	cmp	r2, #1
   19f18:	d103      	bne.n	19f22 <mfu_interface_open+0x12>
   19f1a:	2202      	movs	r2, #2
   19f1c:	601a      	str	r2, [r3, #0]
   19f1e:	4805      	ldr	r0, [pc, #20]	; (19f34 <mfu_interface_open+0x24>)
   19f20:	bd08      	pop	{r3, pc}
   19f22:	2001      	movs	r0, #1
   19f24:	f7f8 f958 	bl	121d8 <bsd_os_errno_set>
   19f28:	f04f 30ff 	mov.w	r0, #4294967295
   19f2c:	bd08      	pop	{r3, pc}
   19f2e:	bf00      	nop
   19f30:	200214c8 	.word	0x200214c8
   19f34:	49765432 	.word	0x49765432

00019f38 <mfu_interface_close>:
   19f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f3a:	4c32      	ldr	r4, [pc, #200]	; (1a004 <mfu_interface_close+0xcc>)
   19f3c:	b083      	sub	sp, #12
   19f3e:	6823      	ldr	r3, [r4, #0]
   19f40:	1e9a      	subs	r2, r3, #2
   19f42:	2a01      	cmp	r2, #1
   19f44:	d857      	bhi.n	19ff6 <mfu_interface_close+0xbe>
   19f46:	2b03      	cmp	r3, #3
   19f48:	d004      	beq.n	19f54 <mfu_interface_close+0x1c>
   19f4a:	2301      	movs	r3, #1
   19f4c:	2000      	movs	r0, #0
   19f4e:	6023      	str	r3, [r4, #0]
   19f50:	b003      	add	sp, #12
   19f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f54:	2100      	movs	r1, #0
   19f56:	4668      	mov	r0, sp
   19f58:	f7fd fa12 	bl	17380 <rpc_dfu_client_request_alloc>
   19f5c:	4603      	mov	r3, r0
   19f5e:	2800      	cmp	r0, #0
   19f60:	d13d      	bne.n	19fde <mfu_interface_close+0xa6>
   19f62:	2104      	movs	r1, #4
   19f64:	4e28      	ldr	r6, [pc, #160]	; (1a008 <mfu_interface_close+0xd0>)
   19f66:	9800      	ldr	r0, [sp, #0]
   19f68:	8832      	ldrh	r2, [r6, #0]
   19f6a:	7201      	strb	r1, [r0, #8]
   19f6c:	3201      	adds	r2, #1
   19f6e:	b292      	uxth	r2, r2
   19f70:	0411      	lsls	r1, r2, #16
   19f72:	f041 0106 	orr.w	r1, r1, #6
   19f76:	4d25      	ldr	r5, [pc, #148]	; (1a00c <mfu_interface_close+0xd4>)
   19f78:	60c1      	str	r1, [r0, #12]
   19f7a:	7103      	strb	r3, [r0, #4]
   19f7c:	7143      	strb	r3, [r0, #5]
   19f7e:	7183      	strb	r3, [r0, #6]
   19f80:	71c3      	strb	r3, [r0, #7]
   19f82:	7243      	strb	r3, [r0, #9]
   19f84:	7283      	strb	r3, [r0, #10]
   19f86:	72c3      	strb	r3, [r0, #11]
   19f88:	2106      	movs	r1, #6
   19f8a:	8032      	strh	r2, [r6, #0]
   19f8c:	602b      	str	r3, [r5, #0]
   19f8e:	f7fd fa0b 	bl	173a8 <rpc_dfu_client_request_send>
   19f92:	b9d8      	cbnz	r0, 19fcc <mfu_interface_close+0x94>
   19f94:	f04f 33ff 	mov.w	r3, #4294967295
   19f98:	ae02      	add	r6, sp, #8
   19f9a:	4627      	mov	r7, r4
   19f9c:	f846 3d04 	str.w	r3, [r6, #-4]!
   19fa0:	e004      	b.n	19fac <mfu_interface_close+0x74>
   19fa2:	4631      	mov	r1, r6
   19fa4:	4638      	mov	r0, r7
   19fa6:	f7f8 f861 	bl	1206c <bsd_os_timedwait>
   19faa:	b9f0      	cbnz	r0, 19fea <mfu_interface_close+0xb2>
   19fac:	6828      	ldr	r0, [r5, #0]
   19fae:	2800      	cmp	r0, #0
   19fb0:	d0f7      	beq.n	19fa2 <mfu_interface_close+0x6a>
   19fb2:	6905      	ldr	r5, [r0, #16]
   19fb4:	f7fd fa0c 	bl	173d0 <rpc_dfu_client_message_free>
   19fb8:	2d00      	cmp	r5, #0
   19fba:	d0c6      	beq.n	19f4a <mfu_interface_close+0x12>
   19fbc:	4b14      	ldr	r3, [pc, #80]	; (1a010 <mfu_interface_close+0xd8>)
   19fbe:	2008      	movs	r0, #8
   19fc0:	601d      	str	r5, [r3, #0]
   19fc2:	f7f8 f909 	bl	121d8 <bsd_os_errno_set>
   19fc6:	f04f 30ff 	mov.w	r0, #4294967295
   19fca:	e7c1      	b.n	19f50 <mfu_interface_close+0x18>
   19fcc:	9800      	ldr	r0, [sp, #0]
   19fce:	6803      	ldr	r3, [r0, #0]
   19fd0:	b11b      	cbz	r3, 19fda <mfu_interface_close+0xa2>
   19fd2:	4618      	mov	r0, r3
   19fd4:	f7fd fa04 	bl	173e0 <rpc_dfu_client_data_free>
   19fd8:	9800      	ldr	r0, [sp, #0]
   19fda:	f7fd f9f9 	bl	173d0 <rpc_dfu_client_message_free>
   19fde:	200c      	movs	r0, #12
   19fe0:	f7f8 f8fa 	bl	121d8 <bsd_os_errno_set>
   19fe4:	f04f 30ff 	mov.w	r0, #4294967295
   19fe8:	e7b2      	b.n	19f50 <mfu_interface_close+0x18>
   19fea:	203c      	movs	r0, #60	; 0x3c
   19fec:	f7f8 f8f4 	bl	121d8 <bsd_os_errno_set>
   19ff0:	f04f 30ff 	mov.w	r0, #4294967295
   19ff4:	e7ac      	b.n	19f50 <mfu_interface_close+0x18>
   19ff6:	2001      	movs	r0, #1
   19ff8:	f7f8 f8ee 	bl	121d8 <bsd_os_errno_set>
   19ffc:	f04f 30ff 	mov.w	r0, #4294967295
   1a000:	e7a6      	b.n	19f50 <mfu_interface_close+0x18>
   1a002:	bf00      	nop
   1a004:	200214c8 	.word	0x200214c8
   1a008:	20021c46 	.word	0x20021c46
   1a00c:	200214d4 	.word	0x200214d4
   1a010:	200214cc 	.word	0x200214cc

0001a014 <mfu_interface_sendto>:
   1a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a018:	4e64      	ldr	r6, [pc, #400]	; (1a1ac <mfu_interface_sendto+0x198>)
   1a01a:	460f      	mov	r7, r1
   1a01c:	6831      	ldr	r1, [r6, #0]
   1a01e:	4615      	mov	r5, r2
   1a020:	1e8a      	subs	r2, r1, #2
   1a022:	2a01      	cmp	r2, #1
   1a024:	b082      	sub	sp, #8
   1a026:	f200 80b4 	bhi.w	1a192 <mfu_interface_sendto+0x17e>
   1a02a:	2f00      	cmp	r7, #0
   1a02c:	f000 80a5 	beq.w	1a17a <mfu_interface_sendto+0x166>
   1a030:	2d00      	cmp	r5, #0
   1a032:	f000 80a2 	beq.w	1a17a <mfu_interface_sendto+0x166>
   1a036:	2b00      	cmp	r3, #0
   1a038:	f040 80b1 	bne.w	1a19e <mfu_interface_sendto+0x18a>
   1a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a03e:	2b00      	cmp	r3, #0
   1a040:	f040 80a1 	bne.w	1a186 <mfu_interface_sendto+0x172>
   1a044:	2902      	cmp	r1, #2
   1a046:	d04f      	beq.n	1a0e8 <mfu_interface_sendto+0xd4>
   1a048:	46e8      	mov	r8, sp
   1a04a:	4640      	mov	r0, r8
   1a04c:	4629      	mov	r1, r5
   1a04e:	f7fd f997 	bl	17380 <rpc_dfu_client_request_alloc>
   1a052:	4606      	mov	r6, r0
   1a054:	b140      	cbz	r0, 1a068 <mfu_interface_sendto+0x54>
   1a056:	200c      	movs	r0, #12
   1a058:	f7f8 f8be 	bl	121d8 <bsd_os_errno_set>
   1a05c:	f04f 35ff 	mov.w	r5, #4294967295
   1a060:	4628      	mov	r0, r5
   1a062:	b002      	add	sp, #8
   1a064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a068:	9b00      	ldr	r3, [sp, #0]
   1a06a:	4639      	mov	r1, r7
   1a06c:	6818      	ldr	r0, [r3, #0]
   1a06e:	462a      	mov	r2, r5
   1a070:	f002 fdf1 	bl	1cc56 <memcpy>
   1a074:	2104      	movs	r1, #4
   1a076:	4c4e      	ldr	r4, [pc, #312]	; (1a1b0 <mfu_interface_sendto+0x19c>)
   1a078:	9800      	ldr	r0, [sp, #0]
   1a07a:	8823      	ldrh	r3, [r4, #0]
   1a07c:	6045      	str	r5, [r0, #4]
   1a07e:	3301      	adds	r3, #1
   1a080:	b29b      	uxth	r3, r3
   1a082:	041a      	lsls	r2, r3, #16
   1a084:	8023      	strh	r3, [r4, #0]
   1a086:	430a      	orrs	r2, r1
   1a088:	4c4a      	ldr	r4, [pc, #296]	; (1a1b4 <mfu_interface_sendto+0x1a0>)
   1a08a:	60c2      	str	r2, [r0, #12]
   1a08c:	7246      	strb	r6, [r0, #9]
   1a08e:	7286      	strb	r6, [r0, #10]
   1a090:	72c6      	strb	r6, [r0, #11]
   1a092:	7201      	strb	r1, [r0, #8]
   1a094:	6026      	str	r6, [r4, #0]
   1a096:	f7fd f987 	bl	173a8 <rpc_dfu_client_request_send>
   1a09a:	2800      	cmp	r0, #0
   1a09c:	d163      	bne.n	1a166 <mfu_interface_sendto+0x152>
   1a09e:	f04f 33ff 	mov.w	r3, #4294967295
   1a0a2:	ae02      	add	r6, sp, #8
   1a0a4:	4f41      	ldr	r7, [pc, #260]	; (1a1ac <mfu_interface_sendto+0x198>)
   1a0a6:	f846 3d04 	str.w	r3, [r6, #-4]!
   1a0aa:	e004      	b.n	1a0b6 <mfu_interface_sendto+0xa2>
   1a0ac:	4631      	mov	r1, r6
   1a0ae:	4638      	mov	r0, r7
   1a0b0:	f7f7 ffdc 	bl	1206c <bsd_os_timedwait>
   1a0b4:	b978      	cbnz	r0, 1a0d6 <mfu_interface_sendto+0xc2>
   1a0b6:	6820      	ldr	r0, [r4, #0]
   1a0b8:	2800      	cmp	r0, #0
   1a0ba:	d0f7      	beq.n	1a0ac <mfu_interface_sendto+0x98>
   1a0bc:	6904      	ldr	r4, [r0, #16]
   1a0be:	f7fd f987 	bl	173d0 <rpc_dfu_client_message_free>
   1a0c2:	2c00      	cmp	r4, #0
   1a0c4:	d0cc      	beq.n	1a060 <mfu_interface_sendto+0x4c>
   1a0c6:	4b3c      	ldr	r3, [pc, #240]	; (1a1b8 <mfu_interface_sendto+0x1a4>)
   1a0c8:	2008      	movs	r0, #8
   1a0ca:	601c      	str	r4, [r3, #0]
   1a0cc:	f04f 35ff 	mov.w	r5, #4294967295
   1a0d0:	f7f8 f882 	bl	121d8 <bsd_os_errno_set>
   1a0d4:	e7c4      	b.n	1a060 <mfu_interface_sendto+0x4c>
   1a0d6:	f04f 35ff 	mov.w	r5, #4294967295
   1a0da:	203c      	movs	r0, #60	; 0x3c
   1a0dc:	f7f8 f87c 	bl	121d8 <bsd_os_errno_set>
   1a0e0:	4628      	mov	r0, r5
   1a0e2:	b002      	add	sp, #8
   1a0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a0e8:	46e8      	mov	r8, sp
   1a0ea:	4619      	mov	r1, r3
   1a0ec:	4640      	mov	r0, r8
   1a0ee:	f7fd f947 	bl	17380 <rpc_dfu_client_request_alloc>
   1a0f2:	4602      	mov	r2, r0
   1a0f4:	2800      	cmp	r0, #0
   1a0f6:	d1ae      	bne.n	1a056 <mfu_interface_sendto+0x42>
   1a0f8:	f04f 0c08 	mov.w	ip, #8
   1a0fc:	492c      	ldr	r1, [pc, #176]	; (1a1b0 <mfu_interface_sendto+0x19c>)
   1a0fe:	482f      	ldr	r0, [pc, #188]	; (1a1bc <mfu_interface_sendto+0x1a8>)
   1a100:	880b      	ldrh	r3, [r1, #0]
   1a102:	6804      	ldr	r4, [r0, #0]
   1a104:	3301      	adds	r3, #1
   1a106:	9800      	ldr	r0, [sp, #0]
   1a108:	b29b      	uxth	r3, r3
   1a10a:	800b      	strh	r3, [r1, #0]
   1a10c:	041b      	lsls	r3, r3, #16
   1a10e:	f043 0303 	orr.w	r3, r3, #3
   1a112:	6104      	str	r4, [r0, #16]
   1a114:	4c27      	ldr	r4, [pc, #156]	; (1a1b4 <mfu_interface_sendto+0x1a0>)
   1a116:	60c3      	str	r3, [r0, #12]
   1a118:	7102      	strb	r2, [r0, #4]
   1a11a:	7142      	strb	r2, [r0, #5]
   1a11c:	7182      	strb	r2, [r0, #6]
   1a11e:	71c2      	strb	r2, [r0, #7]
   1a120:	7242      	strb	r2, [r0, #9]
   1a122:	7282      	strb	r2, [r0, #10]
   1a124:	72c2      	strb	r2, [r0, #11]
   1a126:	f880 c008 	strb.w	ip, [r0, #8]
   1a12a:	2103      	movs	r1, #3
   1a12c:	6022      	str	r2, [r4, #0]
   1a12e:	f7fd f93b 	bl	173a8 <rpc_dfu_client_request_send>
   1a132:	b9c0      	cbnz	r0, 1a166 <mfu_interface_sendto+0x152>
   1a134:	f04f 33ff 	mov.w	r3, #4294967295
   1a138:	f10d 0908 	add.w	r9, sp, #8
   1a13c:	f849 3d04 	str.w	r3, [r9, #-4]!
   1a140:	46b2      	mov	sl, r6
   1a142:	e005      	b.n	1a150 <mfu_interface_sendto+0x13c>
   1a144:	4649      	mov	r1, r9
   1a146:	4650      	mov	r0, sl
   1a148:	f7f7 ff90 	bl	1206c <bsd_os_timedwait>
   1a14c:	2800      	cmp	r0, #0
   1a14e:	d1c2      	bne.n	1a0d6 <mfu_interface_sendto+0xc2>
   1a150:	6820      	ldr	r0, [r4, #0]
   1a152:	2800      	cmp	r0, #0
   1a154:	d0f6      	beq.n	1a144 <mfu_interface_sendto+0x130>
   1a156:	6904      	ldr	r4, [r0, #16]
   1a158:	f7fd f93a 	bl	173d0 <rpc_dfu_client_message_free>
   1a15c:	2c00      	cmp	r4, #0
   1a15e:	d1b2      	bne.n	1a0c6 <mfu_interface_sendto+0xb2>
   1a160:	2303      	movs	r3, #3
   1a162:	6033      	str	r3, [r6, #0]
   1a164:	e771      	b.n	1a04a <mfu_interface_sendto+0x36>
   1a166:	9800      	ldr	r0, [sp, #0]
   1a168:	6803      	ldr	r3, [r0, #0]
   1a16a:	b11b      	cbz	r3, 1a174 <mfu_interface_sendto+0x160>
   1a16c:	4618      	mov	r0, r3
   1a16e:	f7fd f937 	bl	173e0 <rpc_dfu_client_data_free>
   1a172:	9800      	ldr	r0, [sp, #0]
   1a174:	f7fd f92c 	bl	173d0 <rpc_dfu_client_message_free>
   1a178:	e76d      	b.n	1a056 <mfu_interface_sendto+0x42>
   1a17a:	2016      	movs	r0, #22
   1a17c:	f7f8 f82c 	bl	121d8 <bsd_os_errno_set>
   1a180:	f04f 35ff 	mov.w	r5, #4294967295
   1a184:	e76c      	b.n	1a060 <mfu_interface_sendto+0x4c>
   1a186:	2038      	movs	r0, #56	; 0x38
   1a188:	f7f8 f826 	bl	121d8 <bsd_os_errno_set>
   1a18c:	f04f 35ff 	mov.w	r5, #4294967295
   1a190:	e766      	b.n	1a060 <mfu_interface_sendto+0x4c>
   1a192:	2001      	movs	r0, #1
   1a194:	f7f8 f820 	bl	121d8 <bsd_os_errno_set>
   1a198:	f04f 35ff 	mov.w	r5, #4294967295
   1a19c:	e760      	b.n	1a060 <mfu_interface_sendto+0x4c>
   1a19e:	202d      	movs	r0, #45	; 0x2d
   1a1a0:	f7f8 f81a 	bl	121d8 <bsd_os_errno_set>
   1a1a4:	f04f 35ff 	mov.w	r5, #4294967295
   1a1a8:	e75a      	b.n	1a060 <mfu_interface_sendto+0x4c>
   1a1aa:	bf00      	nop
   1a1ac:	200214c8 	.word	0x200214c8
   1a1b0:	20021c46 	.word	0x20021c46
   1a1b4:	200214d4 	.word	0x200214d4
   1a1b8:	200214cc 	.word	0x200214cc
   1a1bc:	200214d0 	.word	0x200214d0

0001a1c0 <mfu_interface_setopt>:
   1a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a1c2:	4846      	ldr	r0, [pc, #280]	; (1a2dc <mfu_interface_setopt+0x11c>)
   1a1c4:	b083      	sub	sp, #12
   1a1c6:	6800      	ldr	r0, [r0, #0]
   1a1c8:	3802      	subs	r0, #2
   1a1ca:	2801      	cmp	r0, #1
   1a1cc:	d877      	bhi.n	1a2be <mfu_interface_setopt+0xfe>
   1a1ce:	f240 2003 	movw	r0, #515	; 0x203
   1a1d2:	4281      	cmp	r1, r0
   1a1d4:	d16d      	bne.n	1a2b2 <mfu_interface_setopt+0xf2>
   1a1d6:	3a04      	subs	r2, #4
   1a1d8:	2a03      	cmp	r2, #3
   1a1da:	d85c      	bhi.n	1a296 <mfu_interface_setopt+0xd6>
   1a1dc:	e8df f002 	tbb	[pc, r2]
   1a1e0:	514e024b 	.word	0x514e024b
   1a1e4:	2407      	movs	r4, #7
   1a1e6:	4625      	mov	r5, r4
   1a1e8:	2100      	movs	r1, #0
   1a1ea:	4668      	mov	r0, sp
   1a1ec:	f7fd f8c8 	bl	17380 <rpc_dfu_client_request_alloc>
   1a1f0:	4603      	mov	r3, r0
   1a1f2:	2800      	cmp	r0, #0
   1a1f4:	d138      	bne.n	1a268 <mfu_interface_setopt+0xa8>
   1a1f6:	2704      	movs	r7, #4
   1a1f8:	4e39      	ldr	r6, [pc, #228]	; (1a2e0 <mfu_interface_setopt+0x120>)
   1a1fa:	9800      	ldr	r0, [sp, #0]
   1a1fc:	8832      	ldrh	r2, [r6, #0]
   1a1fe:	4629      	mov	r1, r5
   1a200:	3201      	adds	r2, #1
   1a202:	b292      	uxth	r2, r2
   1a204:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   1a208:	4c36      	ldr	r4, [pc, #216]	; (1a2e4 <mfu_interface_setopt+0x124>)
   1a20a:	60c5      	str	r5, [r0, #12]
   1a20c:	7103      	strb	r3, [r0, #4]
   1a20e:	7143      	strb	r3, [r0, #5]
   1a210:	7183      	strb	r3, [r0, #6]
   1a212:	71c3      	strb	r3, [r0, #7]
   1a214:	7243      	strb	r3, [r0, #9]
   1a216:	7283      	strb	r3, [r0, #10]
   1a218:	72c3      	strb	r3, [r0, #11]
   1a21a:	7207      	strb	r7, [r0, #8]
   1a21c:	8032      	strh	r2, [r6, #0]
   1a21e:	6023      	str	r3, [r4, #0]
   1a220:	f7fd f8c2 	bl	173a8 <rpc_dfu_client_request_send>
   1a224:	b9b8      	cbnz	r0, 1a256 <mfu_interface_setopt+0x96>
   1a226:	f04f 33ff 	mov.w	r3, #4294967295
   1a22a:	ad02      	add	r5, sp, #8
   1a22c:	4e2b      	ldr	r6, [pc, #172]	; (1a2dc <mfu_interface_setopt+0x11c>)
   1a22e:	f845 3d04 	str.w	r3, [r5, #-4]!
   1a232:	e005      	b.n	1a240 <mfu_interface_setopt+0x80>
   1a234:	4629      	mov	r1, r5
   1a236:	4630      	mov	r0, r6
   1a238:	f7f7 ff18 	bl	1206c <bsd_os_timedwait>
   1a23c:	2800      	cmp	r0, #0
   1a23e:	d131      	bne.n	1a2a4 <mfu_interface_setopt+0xe4>
   1a240:	6820      	ldr	r0, [r4, #0]
   1a242:	2800      	cmp	r0, #0
   1a244:	d0f6      	beq.n	1a234 <mfu_interface_setopt+0x74>
   1a246:	6904      	ldr	r4, [r0, #16]
   1a248:	f7fd f8c2 	bl	173d0 <rpc_dfu_client_message_free>
   1a24c:	2c00      	cmp	r4, #0
   1a24e:	d13c      	bne.n	1a2ca <mfu_interface_setopt+0x10a>
   1a250:	4620      	mov	r0, r4
   1a252:	b003      	add	sp, #12
   1a254:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a256:	9800      	ldr	r0, [sp, #0]
   1a258:	6803      	ldr	r3, [r0, #0]
   1a25a:	b11b      	cbz	r3, 1a264 <mfu_interface_setopt+0xa4>
   1a25c:	4618      	mov	r0, r3
   1a25e:	f7fd f8bf 	bl	173e0 <rpc_dfu_client_data_free>
   1a262:	9800      	ldr	r0, [sp, #0]
   1a264:	f7fd f8b4 	bl	173d0 <rpc_dfu_client_message_free>
   1a268:	200c      	movs	r0, #12
   1a26a:	f7f7 ffb5 	bl	121d8 <bsd_os_errno_set>
   1a26e:	f04f 30ff 	mov.w	r0, #4294967295
   1a272:	b003      	add	sp, #12
   1a274:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a276:	2405      	movs	r4, #5
   1a278:	4625      	mov	r5, r4
   1a27a:	e7b5      	b.n	1a1e8 <mfu_interface_setopt+0x28>
   1a27c:	2408      	movs	r4, #8
   1a27e:	4625      	mov	r5, r4
   1a280:	e7b2      	b.n	1a1e8 <mfu_interface_setopt+0x28>
   1a282:	b1b3      	cbz	r3, 1a2b2 <mfu_interface_setopt+0xf2>
   1a284:	9a08      	ldr	r2, [sp, #32]
   1a286:	2a04      	cmp	r2, #4
   1a288:	d113      	bne.n	1a2b2 <mfu_interface_setopt+0xf2>
   1a28a:	2000      	movs	r0, #0
   1a28c:	681a      	ldr	r2, [r3, #0]
   1a28e:	4b16      	ldr	r3, [pc, #88]	; (1a2e8 <mfu_interface_setopt+0x128>)
   1a290:	601a      	str	r2, [r3, #0]
   1a292:	b003      	add	sp, #12
   1a294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a296:	202a      	movs	r0, #42	; 0x2a
   1a298:	f7f7 ff9e 	bl	121d8 <bsd_os_errno_set>
   1a29c:	f04f 30ff 	mov.w	r0, #4294967295
   1a2a0:	b003      	add	sp, #12
   1a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a2a4:	203c      	movs	r0, #60	; 0x3c
   1a2a6:	f7f7 ff97 	bl	121d8 <bsd_os_errno_set>
   1a2aa:	f04f 30ff 	mov.w	r0, #4294967295
   1a2ae:	b003      	add	sp, #12
   1a2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a2b2:	2016      	movs	r0, #22
   1a2b4:	f7f7 ff90 	bl	121d8 <bsd_os_errno_set>
   1a2b8:	f04f 30ff 	mov.w	r0, #4294967295
   1a2bc:	e7c9      	b.n	1a252 <mfu_interface_setopt+0x92>
   1a2be:	2001      	movs	r0, #1
   1a2c0:	f7f7 ff8a 	bl	121d8 <bsd_os_errno_set>
   1a2c4:	f04f 30ff 	mov.w	r0, #4294967295
   1a2c8:	e7c3      	b.n	1a252 <mfu_interface_setopt+0x92>
   1a2ca:	4b08      	ldr	r3, [pc, #32]	; (1a2ec <mfu_interface_setopt+0x12c>)
   1a2cc:	2008      	movs	r0, #8
   1a2ce:	601c      	str	r4, [r3, #0]
   1a2d0:	f7f7 ff82 	bl	121d8 <bsd_os_errno_set>
   1a2d4:	f04f 30ff 	mov.w	r0, #4294967295
   1a2d8:	e7bb      	b.n	1a252 <mfu_interface_setopt+0x92>
   1a2da:	bf00      	nop
   1a2dc:	200214c8 	.word	0x200214c8
   1a2e0:	20021c46 	.word	0x20021c46
   1a2e4:	200214d4 	.word	0x200214d4
   1a2e8:	200214d0 	.word	0x200214d0
   1a2ec:	200214cc 	.word	0x200214cc

0001a2f0 <mfu_interface_getopt>:
   1a2f0:	f240 2003 	movw	r0, #515	; 0x203
   1a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2f8:	4281      	cmp	r1, r0
   1a2fa:	b082      	sub	sp, #8
   1a2fc:	9e08      	ldr	r6, [sp, #32]
   1a2fe:	f040 80ae 	bne.w	1a45e <mfu_interface_getopt+0x16e>
   1a302:	461d      	mov	r5, r3
   1a304:	2b00      	cmp	r3, #0
   1a306:	f000 80aa 	beq.w	1a45e <mfu_interface_getopt+0x16e>
   1a30a:	2e00      	cmp	r6, #0
   1a30c:	f000 80a7 	beq.w	1a45e <mfu_interface_getopt+0x16e>
   1a310:	4b5e      	ldr	r3, [pc, #376]	; (1a48c <mfu_interface_getopt+0x19c>)
   1a312:	681b      	ldr	r3, [r3, #0]
   1a314:	3b02      	subs	r3, #2
   1a316:	2b01      	cmp	r3, #1
   1a318:	f200 80a7 	bhi.w	1a46a <mfu_interface_getopt+0x17a>
   1a31c:	3a01      	subs	r2, #1
   1a31e:	2a13      	cmp	r2, #19
   1a320:	d879      	bhi.n	1a416 <mfu_interface_getopt+0x126>
   1a322:	e8df f002 	tbb	[pc, r2]
   1a326:	5f17      	.short	0x5f17
   1a328:	78787878 	.word	0x78787878
   1a32c:	78787872 	.word	0x78787872
   1a330:	78787878 	.word	0x78787878
   1a334:	78787878 	.word	0x78787878
   1a338:	0a78      	.short	0x0a78
   1a33a:	6833      	ldr	r3, [r6, #0]
   1a33c:	2b04      	cmp	r3, #4
   1a33e:	f040 808e 	bne.w	1a45e <mfu_interface_getopt+0x16e>
   1a342:	2200      	movs	r2, #0
   1a344:	4610      	mov	r0, r2
   1a346:	4b52      	ldr	r3, [pc, #328]	; (1a490 <mfu_interface_getopt+0x1a0>)
   1a348:	6819      	ldr	r1, [r3, #0]
   1a34a:	601a      	str	r2, [r3, #0]
   1a34c:	6029      	str	r1, [r5, #0]
   1a34e:	b002      	add	sp, #8
   1a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a354:	6833      	ldr	r3, [r6, #0]
   1a356:	2b24      	cmp	r3, #36	; 0x24
   1a358:	f040 8081 	bne.w	1a45e <mfu_interface_getopt+0x16e>
   1a35c:	2401      	movs	r4, #1
   1a35e:	46a0      	mov	r8, r4
   1a360:	2100      	movs	r1, #0
   1a362:	4668      	mov	r0, sp
   1a364:	f7fd f80c 	bl	17380 <rpc_dfu_client_request_alloc>
   1a368:	2800      	cmp	r0, #0
   1a36a:	d146      	bne.n	1a3fa <mfu_interface_getopt+0x10a>
   1a36c:	4949      	ldr	r1, [pc, #292]	; (1a494 <mfu_interface_getopt+0x1a4>)
   1a36e:	9b00      	ldr	r3, [sp, #0]
   1a370:	880a      	ldrh	r2, [r1, #0]
   1a372:	f1b8 0f03 	cmp.w	r8, #3
   1a376:	f102 0201 	add.w	r2, r2, #1
   1a37a:	b292      	uxth	r2, r2
   1a37c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1a380:	7118      	strb	r0, [r3, #4]
   1a382:	800a      	strh	r2, [r1, #0]
   1a384:	60dc      	str	r4, [r3, #12]
   1a386:	7158      	strb	r0, [r3, #5]
   1a388:	7198      	strb	r0, [r3, #6]
   1a38a:	71d8      	strb	r0, [r3, #7]
   1a38c:	d04b      	beq.n	1a426 <mfu_interface_getopt+0x136>
   1a38e:	2104      	movs	r1, #4
   1a390:	2200      	movs	r2, #0
   1a392:	4f41      	ldr	r7, [pc, #260]	; (1a498 <mfu_interface_getopt+0x1a8>)
   1a394:	6099      	str	r1, [r3, #8]
   1a396:	4618      	mov	r0, r3
   1a398:	4641      	mov	r1, r8
   1a39a:	603a      	str	r2, [r7, #0]
   1a39c:	f7fd f804 	bl	173a8 <rpc_dfu_client_request_send>
   1a3a0:	2800      	cmp	r0, #0
   1a3a2:	d14d      	bne.n	1a440 <mfu_interface_getopt+0x150>
   1a3a4:	f04f 33ff 	mov.w	r3, #4294967295
   1a3a8:	ac02      	add	r4, sp, #8
   1a3aa:	f844 3d04 	str.w	r3, [r4, #-4]!
   1a3ae:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1a48c <mfu_interface_getopt+0x19c>
   1a3b2:	e005      	b.n	1a3c0 <mfu_interface_getopt+0xd0>
   1a3b4:	4621      	mov	r1, r4
   1a3b6:	4640      	mov	r0, r8
   1a3b8:	f7f7 fe58 	bl	1206c <bsd_os_timedwait>
   1a3bc:	2800      	cmp	r0, #0
   1a3be:	d137      	bne.n	1a430 <mfu_interface_getopt+0x140>
   1a3c0:	6839      	ldr	r1, [r7, #0]
   1a3c2:	2900      	cmp	r1, #0
   1a3c4:	d0f6      	beq.n	1a3b4 <mfu_interface_getopt+0xc4>
   1a3c6:	690c      	ldr	r4, [r1, #16]
   1a3c8:	2c00      	cmp	r4, #0
   1a3ca:	d154      	bne.n	1a476 <mfu_interface_getopt+0x186>
   1a3cc:	6832      	ldr	r2, [r6, #0]
   1a3ce:	3114      	adds	r1, #20
   1a3d0:	4628      	mov	r0, r5
   1a3d2:	f002 fc40 	bl	1cc56 <memcpy>
   1a3d6:	6838      	ldr	r0, [r7, #0]
   1a3d8:	f7fc fffa 	bl	173d0 <rpc_dfu_client_message_free>
   1a3dc:	4620      	mov	r0, r4
   1a3de:	b002      	add	sp, #8
   1a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3e4:	6833      	ldr	r3, [r6, #0]
   1a3e6:	2b04      	cmp	r3, #4
   1a3e8:	d139      	bne.n	1a45e <mfu_interface_getopt+0x16e>
   1a3ea:	2402      	movs	r4, #2
   1a3ec:	2100      	movs	r1, #0
   1a3ee:	4668      	mov	r0, sp
   1a3f0:	46a0      	mov	r8, r4
   1a3f2:	f7fc ffc5 	bl	17380 <rpc_dfu_client_request_alloc>
   1a3f6:	2800      	cmp	r0, #0
   1a3f8:	d0b8      	beq.n	1a36c <mfu_interface_getopt+0x7c>
   1a3fa:	200c      	movs	r0, #12
   1a3fc:	f7f7 feec 	bl	121d8 <bsd_os_errno_set>
   1a400:	f04f 30ff 	mov.w	r0, #4294967295
   1a404:	b002      	add	sp, #8
   1a406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a40a:	6833      	ldr	r3, [r6, #0]
   1a40c:	2b04      	cmp	r3, #4
   1a40e:	d126      	bne.n	1a45e <mfu_interface_getopt+0x16e>
   1a410:	2409      	movs	r4, #9
   1a412:	46a0      	mov	r8, r4
   1a414:	e7a4      	b.n	1a360 <mfu_interface_getopt+0x70>
   1a416:	202a      	movs	r0, #42	; 0x2a
   1a418:	f7f7 fede 	bl	121d8 <bsd_os_errno_set>
   1a41c:	f04f 30ff 	mov.w	r0, #4294967295
   1a420:	b002      	add	sp, #8
   1a422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a426:	4a1d      	ldr	r2, [pc, #116]	; (1a49c <mfu_interface_getopt+0x1ac>)
   1a428:	2108      	movs	r1, #8
   1a42a:	6812      	ldr	r2, [r2, #0]
   1a42c:	611a      	str	r2, [r3, #16]
   1a42e:	e7af      	b.n	1a390 <mfu_interface_getopt+0xa0>
   1a430:	203c      	movs	r0, #60	; 0x3c
   1a432:	f7f7 fed1 	bl	121d8 <bsd_os_errno_set>
   1a436:	f04f 30ff 	mov.w	r0, #4294967295
   1a43a:	b002      	add	sp, #8
   1a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a440:	9800      	ldr	r0, [sp, #0]
   1a442:	6803      	ldr	r3, [r0, #0]
   1a444:	b11b      	cbz	r3, 1a44e <mfu_interface_getopt+0x15e>
   1a446:	4618      	mov	r0, r3
   1a448:	f7fc ffca 	bl	173e0 <rpc_dfu_client_data_free>
   1a44c:	9800      	ldr	r0, [sp, #0]
   1a44e:	f7fc ffbf 	bl	173d0 <rpc_dfu_client_message_free>
   1a452:	200c      	movs	r0, #12
   1a454:	f7f7 fec0 	bl	121d8 <bsd_os_errno_set>
   1a458:	f04f 30ff 	mov.w	r0, #4294967295
   1a45c:	e7d2      	b.n	1a404 <mfu_interface_getopt+0x114>
   1a45e:	2016      	movs	r0, #22
   1a460:	f7f7 feba 	bl	121d8 <bsd_os_errno_set>
   1a464:	f04f 30ff 	mov.w	r0, #4294967295
   1a468:	e771      	b.n	1a34e <mfu_interface_getopt+0x5e>
   1a46a:	2001      	movs	r0, #1
   1a46c:	f7f7 feb4 	bl	121d8 <bsd_os_errno_set>
   1a470:	f04f 30ff 	mov.w	r0, #4294967295
   1a474:	e76b      	b.n	1a34e <mfu_interface_getopt+0x5e>
   1a476:	4b06      	ldr	r3, [pc, #24]	; (1a490 <mfu_interface_getopt+0x1a0>)
   1a478:	2008      	movs	r0, #8
   1a47a:	601c      	str	r4, [r3, #0]
   1a47c:	f7f7 feac 	bl	121d8 <bsd_os_errno_set>
   1a480:	6838      	ldr	r0, [r7, #0]
   1a482:	f7fc ffa5 	bl	173d0 <rpc_dfu_client_message_free>
   1a486:	f04f 30ff 	mov.w	r0, #4294967295
   1a48a:	e760      	b.n	1a34e <mfu_interface_getopt+0x5e>
   1a48c:	200214c8 	.word	0x200214c8
   1a490:	200214cc 	.word	0x200214cc
   1a494:	20021c46 	.word	0x20021c46
   1a498:	200214d4 	.word	0x200214d4
   1a49c:	200214d0 	.word	0x200214d0

0001a4a0 <interface_init>:
   1a4a0:	b508      	push	{r3, lr}
   1a4a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1a4a6:	2100      	movs	r1, #0
   1a4a8:	4802      	ldr	r0, [pc, #8]	; (1a4b4 <interface_init+0x14>)
   1a4aa:	f002 fbff 	bl	1ccac <memset>
   1a4ae:	2000      	movs	r0, #0
   1a4b0:	bd08      	pop	{r3, pc}
   1a4b2:	bf00      	nop
   1a4b4:	20021d7c 	.word	0x20021d7c

0001a4b8 <interface_socket_allocate>:
   1a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4ba:	4b30      	ldr	r3, [pc, #192]	; (1a57c <interface_socket_allocate+0xc4>)
   1a4bc:	4606      	mov	r6, r0
   1a4be:	681d      	ldr	r5, [r3, #0]
   1a4c0:	4608      	mov	r0, r1
   1a4c2:	b31d      	cbz	r5, 1a50c <interface_socket_allocate+0x54>
   1a4c4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1a4c6:	2c00      	cmp	r4, #0
   1a4c8:	d04a      	beq.n	1a560 <interface_socket_allocate+0xa8>
   1a4ca:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1a4cc:	2c00      	cmp	r4, #0
   1a4ce:	d049      	beq.n	1a564 <interface_socket_allocate+0xac>
   1a4d0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   1a4d2:	2c00      	cmp	r4, #0
   1a4d4:	d048      	beq.n	1a568 <interface_socket_allocate+0xb0>
   1a4d6:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   1a4da:	2900      	cmp	r1, #0
   1a4dc:	d046      	beq.n	1a56c <interface_socket_allocate+0xb4>
   1a4de:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   1a4e2:	b191      	cbz	r1, 1a50a <interface_socket_allocate+0x52>
   1a4e4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   1a4e8:	2900      	cmp	r1, #0
   1a4ea:	d043      	beq.n	1a574 <interface_socket_allocate+0xbc>
   1a4ec:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   1a4f0:	2900      	cmp	r1, #0
   1a4f2:	d041      	beq.n	1a578 <interface_socket_allocate+0xc0>
   1a4f4:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1a4f8:	2900      	cmp	r1, #0
   1a4fa:	d039      	beq.n	1a570 <interface_socket_allocate+0xb8>
   1a4fc:	f04f 35ff 	mov.w	r5, #4294967295
   1a500:	2069      	movs	r0, #105	; 0x69
   1a502:	f7f7 fe69 	bl	121d8 <bsd_os_errno_set>
   1a506:	4628      	mov	r0, r5
   1a508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a50a:	2505      	movs	r5, #5
   1a50c:	f04f 0c01 	mov.w	ip, #1
   1a510:	f04f 37ff 	mov.w	r7, #4294967295
   1a514:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1a518:	00e4      	lsls	r4, r4, #3
   1a51a:	f843 c004 	str.w	ip, [r3, r4]
   1a51e:	441c      	add	r4, r3
   1a520:	4611      	mov	r1, r2
   1a522:	61a7      	str	r7, [r4, #24]
   1a524:	4622      	mov	r2, r4
   1a526:	f7fe ff9b 	bl	19460 <packet_handler_create>
   1a52a:	4603      	mov	r3, r0
   1a52c:	61e0      	str	r0, [r4, #28]
   1a52e:	b158      	cbz	r0, 1a548 <interface_socket_allocate+0x90>
   1a530:	681b      	ldr	r3, [r3, #0]
   1a532:	681b      	ldr	r3, [r3, #0]
   1a534:	4798      	blx	r3
   1a536:	b910      	cbnz	r0, 1a53e <interface_socket_allocate+0x86>
   1a538:	6034      	str	r4, [r6, #0]
   1a53a:	4628      	mov	r0, r5
   1a53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a53e:	69e0      	ldr	r0, [r4, #28]
   1a540:	f7fe ffae 	bl	194a0 <packet_handler_delete>
   1a544:	2300      	movs	r3, #0
   1a546:	61e3      	str	r3, [r4, #28]
   1a548:	f04f 35ff 	mov.w	r5, #4294967295
   1a54c:	2228      	movs	r2, #40	; 0x28
   1a54e:	2100      	movs	r1, #0
   1a550:	4620      	mov	r0, r4
   1a552:	f002 fbab 	bl	1ccac <memset>
   1a556:	200c      	movs	r0, #12
   1a558:	f7f7 fe3e 	bl	121d8 <bsd_os_errno_set>
   1a55c:	4628      	mov	r0, r5
   1a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a560:	2501      	movs	r5, #1
   1a562:	e7d3      	b.n	1a50c <interface_socket_allocate+0x54>
   1a564:	2502      	movs	r5, #2
   1a566:	e7d1      	b.n	1a50c <interface_socket_allocate+0x54>
   1a568:	2503      	movs	r5, #3
   1a56a:	e7cf      	b.n	1a50c <interface_socket_allocate+0x54>
   1a56c:	2504      	movs	r5, #4
   1a56e:	e7cd      	b.n	1a50c <interface_socket_allocate+0x54>
   1a570:	2508      	movs	r5, #8
   1a572:	e7cb      	b.n	1a50c <interface_socket_allocate+0x54>
   1a574:	2506      	movs	r5, #6
   1a576:	e7c9      	b.n	1a50c <interface_socket_allocate+0x54>
   1a578:	2507      	movs	r5, #7
   1a57a:	e7c7      	b.n	1a50c <interface_socket_allocate+0x54>
   1a57c:	20021d7c 	.word	0x20021d7c

0001a580 <interface_socket_free>:
   1a580:	2808      	cmp	r0, #8
   1a582:	d900      	bls.n	1a586 <interface_socket_free+0x6>
   1a584:	4770      	bx	lr
   1a586:	b510      	push	{r4, lr}
   1a588:	4c07      	ldr	r4, [pc, #28]	; (1a5a8 <interface_socket_free+0x28>)
   1a58a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a58e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   1a592:	69e0      	ldr	r0, [r4, #28]
   1a594:	b108      	cbz	r0, 1a59a <interface_socket_free+0x1a>
   1a596:	f7fe ff83 	bl	194a0 <packet_handler_delete>
   1a59a:	4620      	mov	r0, r4
   1a59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a5a0:	2228      	movs	r2, #40	; 0x28
   1a5a2:	2100      	movs	r1, #0
   1a5a4:	f002 bb82 	b.w	1ccac <memset>
   1a5a8:	20021d7c 	.word	0x20021d7c

0001a5ac <interface_socket_packet_handler_update>:
   1a5ac:	2808      	cmp	r0, #8
   1a5ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a5b2:	d81e      	bhi.n	1a5f2 <interface_socket_packet_handler_update+0x46>
   1a5b4:	ea4f 0880 	mov.w	r8, r0, lsl #2
   1a5b8:	4e17      	ldr	r6, [pc, #92]	; (1a618 <interface_socket_packet_handler_update+0x6c>)
   1a5ba:	eb08 0300 	add.w	r3, r8, r0
   1a5be:	00db      	lsls	r3, r3, #3
   1a5c0:	58f4      	ldr	r4, [r6, r3]
   1a5c2:	18f5      	adds	r5, r6, r3
   1a5c4:	b1ac      	cbz	r4, 1a5f2 <interface_socket_packet_handler_update+0x46>
   1a5c6:	460b      	mov	r3, r1
   1a5c8:	4604      	mov	r4, r0
   1a5ca:	4611      	mov	r1, r2
   1a5cc:	4618      	mov	r0, r3
   1a5ce:	462a      	mov	r2, r5
   1a5d0:	f8d5 901c 	ldr.w	r9, [r5, #28]
   1a5d4:	f7fe ff44 	bl	19460 <packet_handler_create>
   1a5d8:	61e8      	str	r0, [r5, #28]
   1a5da:	b1d0      	cbz	r0, 1a612 <interface_socket_packet_handler_update+0x66>
   1a5dc:	6803      	ldr	r3, [r0, #0]
   1a5de:	681b      	ldr	r3, [r3, #0]
   1a5e0:	4798      	blx	r3
   1a5e2:	4607      	mov	r7, r0
   1a5e4:	b948      	cbnz	r0, 1a5fa <interface_socket_packet_handler_update+0x4e>
   1a5e6:	4648      	mov	r0, r9
   1a5e8:	f7fe ff5a 	bl	194a0 <packet_handler_delete>
   1a5ec:	4638      	mov	r0, r7
   1a5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a5f2:	2705      	movs	r7, #5
   1a5f4:	4638      	mov	r0, r7
   1a5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a5fa:	69e8      	ldr	r0, [r5, #28]
   1a5fc:	f7fe ff50 	bl	194a0 <packet_handler_delete>
   1a600:	eb08 0004 	add.w	r0, r8, r4
   1a604:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   1a608:	f8c6 901c 	str.w	r9, [r6, #28]
   1a60c:	4638      	mov	r0, r7
   1a60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a612:	2704      	movs	r7, #4
   1a614:	e7f4      	b.n	1a600 <interface_socket_packet_handler_update+0x54>
   1a616:	bf00      	nop
   1a618:	20021d7c 	.word	0x20021d7c

0001a61c <interface_socket_wait>:
   1a61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a620:	4692      	mov	sl, r2
   1a622:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1a626:	4d13      	ldr	r5, [pc, #76]	; (1a674 <interface_socket_wait+0x58>)
   1a628:	eb09 0400 	add.w	r4, r9, r0
   1a62c:	00e4      	lsls	r4, r4, #3
   1a62e:	592a      	ldr	r2, [r5, r4]
   1a630:	4606      	mov	r6, r0
   1a632:	ea02 020a 	and.w	r2, r2, sl
   1a636:	428a      	cmp	r2, r1
   1a638:	442c      	add	r4, r5
   1a63a:	d013      	beq.n	1a664 <interface_socket_wait+0x48>
   1a63c:	4698      	mov	r8, r3
   1a63e:	6863      	ldr	r3, [r4, #4]
   1a640:	b983      	cbnz	r3, 1a664 <interface_socket_wait+0x48>
   1a642:	460f      	mov	r7, r1
   1a644:	46a3      	mov	fp, r4
   1a646:	e007      	b.n	1a658 <interface_socket_wait+0x3c>
   1a648:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a64c:	b953      	cbnz	r3, 1a664 <interface_socket_wait+0x48>
   1a64e:	4641      	mov	r1, r8
   1a650:	4620      	mov	r0, r4
   1a652:	f7f7 fd0b 	bl	1206c <bsd_os_timedwait>
   1a656:	b958      	cbnz	r0, 1a670 <interface_socket_wait+0x54>
   1a658:	f8db 3000 	ldr.w	r3, [fp]
   1a65c:	ea03 030a 	and.w	r3, r3, sl
   1a660:	42bb      	cmp	r3, r7
   1a662:	d1f1      	bne.n	1a648 <interface_socket_wait+0x2c>
   1a664:	444e      	add	r6, r9
   1a666:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   1a66a:	6868      	ldr	r0, [r5, #4]
   1a66c:	b100      	cbz	r0, 1a670 <interface_socket_wait+0x54>
   1a66e:	6868      	ldr	r0, [r5, #4]
   1a670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a674:	20021d7c 	.word	0x20021d7c

0001a678 <interface_from_internal_id_search>:
   1a678:	4b27      	ldr	r3, [pc, #156]	; (1a718 <interface_from_internal_id_search+0xa0>)
   1a67a:	681a      	ldr	r2, [r3, #0]
   1a67c:	b112      	cbz	r2, 1a684 <interface_from_internal_id_search+0xc>
   1a67e:	699a      	ldr	r2, [r3, #24]
   1a680:	4282      	cmp	r2, r0
   1a682:	d039      	beq.n	1a6f8 <interface_from_internal_id_search+0x80>
   1a684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a686:	b112      	cbz	r2, 1a68e <interface_from_internal_id_search+0x16>
   1a688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a68a:	4282      	cmp	r2, r0
   1a68c:	d036      	beq.n	1a6fc <interface_from_internal_id_search+0x84>
   1a68e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1a690:	b112      	cbz	r2, 1a698 <interface_from_internal_id_search+0x20>
   1a692:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1a694:	4282      	cmp	r2, r0
   1a696:	d033      	beq.n	1a700 <interface_from_internal_id_search+0x88>
   1a698:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   1a69a:	b11a      	cbz	r2, 1a6a4 <interface_from_internal_id_search+0x2c>
   1a69c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1a6a0:	4282      	cmp	r2, r0
   1a6a2:	d02f      	beq.n	1a704 <interface_from_internal_id_search+0x8c>
   1a6a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1a6a8:	b11a      	cbz	r2, 1a6b2 <interface_from_internal_id_search+0x3a>
   1a6aa:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1a6ae:	4282      	cmp	r2, r0
   1a6b0:	d02a      	beq.n	1a708 <interface_from_internal_id_search+0x90>
   1a6b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1a6b6:	b11a      	cbz	r2, 1a6c0 <interface_from_internal_id_search+0x48>
   1a6b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   1a6bc:	4282      	cmp	r2, r0
   1a6be:	d025      	beq.n	1a70c <interface_from_internal_id_search+0x94>
   1a6c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1a6c4:	b11a      	cbz	r2, 1a6ce <interface_from_internal_id_search+0x56>
   1a6c6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   1a6ca:	4282      	cmp	r2, r0
   1a6cc:	d020      	beq.n	1a710 <interface_from_internal_id_search+0x98>
   1a6ce:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1a6d2:	b11a      	cbz	r2, 1a6dc <interface_from_internal_id_search+0x64>
   1a6d4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1a6d8:	4282      	cmp	r2, r0
   1a6da:	d01b      	beq.n	1a714 <interface_from_internal_id_search+0x9c>
   1a6dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a6e0:	b13a      	cbz	r2, 1a6f2 <interface_from_internal_id_search+0x7a>
   1a6e2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   1a6e6:	4283      	cmp	r3, r0
   1a6e8:	bf14      	ite	ne
   1a6ea:	f04f 30ff 	movne.w	r0, #4294967295
   1a6ee:	2008      	moveq	r0, #8
   1a6f0:	4770      	bx	lr
   1a6f2:	f04f 30ff 	mov.w	r0, #4294967295
   1a6f6:	4770      	bx	lr
   1a6f8:	2000      	movs	r0, #0
   1a6fa:	4770      	bx	lr
   1a6fc:	2001      	movs	r0, #1
   1a6fe:	4770      	bx	lr
   1a700:	2002      	movs	r0, #2
   1a702:	4770      	bx	lr
   1a704:	2003      	movs	r0, #3
   1a706:	4770      	bx	lr
   1a708:	2004      	movs	r0, #4
   1a70a:	4770      	bx	lr
   1a70c:	2005      	movs	r0, #5
   1a70e:	4770      	bx	lr
   1a710:	2006      	movs	r0, #6
   1a712:	4770      	bx	lr
   1a714:	2007      	movs	r0, #7
   1a716:	4770      	bx	lr
   1a718:	20021d7c 	.word	0x20021d7c

0001a71c <interface_socket_from_handle_get>:
   1a71c:	2808      	cmp	r0, #8
   1a71e:	d807      	bhi.n	1a730 <interface_socket_from_handle_get+0x14>
   1a720:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a724:	4b03      	ldr	r3, [pc, #12]	; (1a734 <interface_socket_from_handle_get+0x18>)
   1a726:	00c0      	lsls	r0, r0, #3
   1a728:	581a      	ldr	r2, [r3, r0]
   1a72a:	b10a      	cbz	r2, 1a730 <interface_socket_from_handle_get+0x14>
   1a72c:	4418      	add	r0, r3
   1a72e:	4770      	bx	lr
   1a730:	2000      	movs	r0, #0
   1a732:	4770      	bx	lr
   1a734:	20021d7c 	.word	0x20021d7c

0001a738 <interface_socket_event_get>:
   1a738:	b119      	cbz	r1, 1a742 <interface_socket_event_get+0xa>
   1a73a:	2808      	cmp	r0, #8
   1a73c:	d902      	bls.n	1a744 <interface_socket_event_get+0xc>
   1a73e:	2310      	movs	r3, #16
   1a740:	600b      	str	r3, [r1, #0]
   1a742:	4770      	bx	lr
   1a744:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a748:	4b07      	ldr	r3, [pc, #28]	; (1a768 <interface_socket_event_get+0x30>)
   1a74a:	00c0      	lsls	r0, r0, #3
   1a74c:	581a      	ldr	r2, [r3, r0]
   1a74e:	2a00      	cmp	r2, #0
   1a750:	d0f5      	beq.n	1a73e <interface_socket_event_get+0x6>
   1a752:	581b      	ldr	r3, [r3, r0]
   1a754:	0c1b      	lsrs	r3, r3, #16
   1a756:	f003 020a 	and.w	r2, r3, #10
   1a75a:	2a0a      	cmp	r2, #10
   1a75c:	bf14      	ite	ne
   1a75e:	f003 030f 	andne.w	r3, r3, #15
   1a762:	f003 030d 	andeq.w	r3, r3, #13
   1a766:	e7eb      	b.n	1a740 <interface_socket_event_get+0x8>
   1a768:	20021d7c 	.word	0x20021d7c

0001a76c <interface_socket_setopt>:
   1a76c:	2808      	cmp	r0, #8
   1a76e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a770:	d82c      	bhi.n	1a7cc <interface_socket_setopt+0x60>
   1a772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a776:	4e1e      	ldr	r6, [pc, #120]	; (1a7f0 <interface_socket_setopt+0x84>)
   1a778:	00c0      	lsls	r0, r0, #3
   1a77a:	5834      	ldr	r4, [r6, r0]
   1a77c:	b334      	cbz	r4, 1a7cc <interface_socket_setopt+0x60>
   1a77e:	2901      	cmp	r1, #1
   1a780:	d11e      	bne.n	1a7c0 <interface_socket_setopt+0x54>
   1a782:	f1a2 0114 	sub.w	r1, r2, #20
   1a786:	2901      	cmp	r1, #1
   1a788:	d81a      	bhi.n	1a7c0 <interface_socket_setopt+0x54>
   1a78a:	9906      	ldr	r1, [sp, #24]
   1a78c:	2908      	cmp	r1, #8
   1a78e:	d123      	bne.n	1a7d8 <interface_socket_setopt+0x6c>
   1a790:	b313      	cbz	r3, 1a7d8 <interface_socket_setopt+0x6c>
   1a792:	6859      	ldr	r1, [r3, #4]
   1a794:	4c17      	ldr	r4, [pc, #92]	; (1a7f4 <interface_socket_setopt+0x88>)
   1a796:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1a79a:	fba4 4101 	umull	r4, r1, r4, r1
   1a79e:	0989      	lsrs	r1, r1, #6
   1a7a0:	460c      	mov	r4, r1
   1a7a2:	2500      	movs	r5, #0
   1a7a4:	681b      	ldr	r3, [r3, #0]
   1a7a6:	fbe7 4503 	umlal	r4, r5, r7, r3
   1a7aa:	2d01      	cmp	r5, #1
   1a7ac:	bf08      	it	eq
   1a7ae:	2c00      	cmpeq	r4, #0
   1a7b0:	d218      	bcs.n	1a7e4 <interface_socket_setopt+0x78>
   1a7b2:	4430      	add	r0, r6
   1a7b4:	2a14      	cmp	r2, #20
   1a7b6:	bf0c      	ite	eq
   1a7b8:	6204      	streq	r4, [r0, #32]
   1a7ba:	6244      	strne	r4, [r0, #36]	; 0x24
   1a7bc:	2000      	movs	r0, #0
   1a7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7c0:	202a      	movs	r0, #42	; 0x2a
   1a7c2:	f7f7 fd09 	bl	121d8 <bsd_os_errno_set>
   1a7c6:	f04f 30ff 	mov.w	r0, #4294967295
   1a7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7cc:	2009      	movs	r0, #9
   1a7ce:	f7f7 fd03 	bl	121d8 <bsd_os_errno_set>
   1a7d2:	f04f 30ff 	mov.w	r0, #4294967295
   1a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7d8:	2016      	movs	r0, #22
   1a7da:	f7f7 fcfd 	bl	121d8 <bsd_os_errno_set>
   1a7de:	f04f 30ff 	mov.w	r0, #4294967295
   1a7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7e4:	2025      	movs	r0, #37	; 0x25
   1a7e6:	f7f7 fcf7 	bl	121d8 <bsd_os_errno_set>
   1a7ea:	f04f 30ff 	mov.w	r0, #4294967295
   1a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7f0:	20021d7c 	.word	0x20021d7c
   1a7f4:	10624dd3 	.word	0x10624dd3

0001a7f8 <interface_socket_getopt>:
   1a7f8:	b570      	push	{r4, r5, r6, lr}
   1a7fa:	2808      	cmp	r0, #8
   1a7fc:	9d04      	ldr	r5, [sp, #16]
   1a7fe:	d835      	bhi.n	1a86c <interface_socket_getopt+0x74>
   1a800:	4c20      	ldr	r4, [pc, #128]	; (1a884 <interface_socket_getopt+0x8c>)
   1a802:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a806:	00c0      	lsls	r0, r0, #3
   1a808:	5826      	ldr	r6, [r4, r0]
   1a80a:	4404      	add	r4, r0
   1a80c:	b376      	cbz	r6, 1a86c <interface_socket_getopt+0x74>
   1a80e:	2901      	cmp	r1, #1
   1a810:	d132      	bne.n	1a878 <interface_socket_getopt+0x80>
   1a812:	b32b      	cbz	r3, 1a860 <interface_socket_getopt+0x68>
   1a814:	b325      	cbz	r5, 1a860 <interface_socket_getopt+0x68>
   1a816:	2a04      	cmp	r2, #4
   1a818:	d019      	beq.n	1a84e <interface_socket_getopt+0x56>
   1a81a:	f1a2 0114 	sub.w	r1, r2, #20
   1a81e:	2901      	cmp	r1, #1
   1a820:	d82a      	bhi.n	1a878 <interface_socket_getopt+0x80>
   1a822:	6829      	ldr	r1, [r5, #0]
   1a824:	2908      	cmp	r1, #8
   1a826:	d11b      	bne.n	1a860 <interface_socket_getopt+0x68>
   1a828:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   1a82c:	2a14      	cmp	r2, #20
   1a82e:	bf18      	it	ne
   1a830:	4601      	movne	r1, r0
   1a832:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1a836:	4a14      	ldr	r2, [pc, #80]	; (1a888 <interface_socket_getopt+0x90>)
   1a838:	2000      	movs	r0, #0
   1a83a:	fba2 5201 	umull	r5, r2, r2, r1
   1a83e:	0992      	lsrs	r2, r2, #6
   1a840:	fb04 1112 	mls	r1, r4, r2, r1
   1a844:	fb04 f101 	mul.w	r1, r4, r1
   1a848:	e9c3 2100 	strd	r2, r1, [r3]
   1a84c:	bd70      	pop	{r4, r5, r6, pc}
   1a84e:	682a      	ldr	r2, [r5, #0]
   1a850:	2a04      	cmp	r2, #4
   1a852:	d105      	bne.n	1a860 <interface_socket_getopt+0x68>
   1a854:	2200      	movs	r2, #0
   1a856:	6861      	ldr	r1, [r4, #4]
   1a858:	4610      	mov	r0, r2
   1a85a:	6019      	str	r1, [r3, #0]
   1a85c:	6062      	str	r2, [r4, #4]
   1a85e:	bd70      	pop	{r4, r5, r6, pc}
   1a860:	2016      	movs	r0, #22
   1a862:	f7f7 fcb9 	bl	121d8 <bsd_os_errno_set>
   1a866:	f04f 30ff 	mov.w	r0, #4294967295
   1a86a:	bd70      	pop	{r4, r5, r6, pc}
   1a86c:	2009      	movs	r0, #9
   1a86e:	f7f7 fcb3 	bl	121d8 <bsd_os_errno_set>
   1a872:	f04f 30ff 	mov.w	r0, #4294967295
   1a876:	bd70      	pop	{r4, r5, r6, pc}
   1a878:	202a      	movs	r0, #42	; 0x2a
   1a87a:	f7f7 fcad 	bl	121d8 <bsd_os_errno_set>
   1a87e:	f04f 30ff 	mov.w	r0, #4294967295
   1a882:	bd70      	pop	{r4, r5, r6, pc}
   1a884:	20021d7c 	.word	0x20021d7c
   1a888:	10624dd3 	.word	0x10624dd3

0001a88c <interface_socket_fcntl>:
   1a88c:	2808      	cmp	r0, #8
   1a88e:	b510      	push	{r4, lr}
   1a890:	d826      	bhi.n	1a8e0 <interface_socket_fcntl+0x54>
   1a892:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a896:	4c1b      	ldr	r4, [pc, #108]	; (1a904 <interface_socket_fcntl+0x78>)
   1a898:	00c3      	lsls	r3, r0, #3
   1a89a:	58e0      	ldr	r0, [r4, r3]
   1a89c:	b300      	cbz	r0, 1a8e0 <interface_socket_fcntl+0x54>
   1a89e:	2901      	cmp	r1, #1
   1a8a0:	d005      	beq.n	1a8ae <interface_socket_fcntl+0x22>
   1a8a2:	2902      	cmp	r1, #2
   1a8a4:	d122      	bne.n	1a8ec <interface_socket_fcntl+0x60>
   1a8a6:	58e0      	ldr	r0, [r4, r3]
   1a8a8:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1a8ac:	bd10      	pop	{r4, pc}
   1a8ae:	07d2      	lsls	r2, r2, #31
   1a8b0:	d410      	bmi.n	1a8d4 <interface_socket_fcntl+0x48>
   1a8b2:	58e0      	ldr	r0, [r4, r3]
   1a8b4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   1a8b8:	d11e      	bne.n	1a8f8 <interface_socket_fcntl+0x6c>
   1a8ba:	58e2      	ldr	r2, [r4, r3]
   1a8bc:	b292      	uxth	r2, r2
   1a8be:	2a0a      	cmp	r2, #10
   1a8c0:	d01a      	beq.n	1a8f8 <interface_socket_fcntl+0x6c>
   1a8c2:	58e2      	ldr	r2, [r4, r3]
   1a8c4:	b292      	uxth	r2, r2
   1a8c6:	2a0b      	cmp	r2, #11
   1a8c8:	d016      	beq.n	1a8f8 <interface_socket_fcntl+0x6c>
   1a8ca:	58e2      	ldr	r2, [r4, r3]
   1a8cc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   1a8d0:	50e2      	str	r2, [r4, r3]
   1a8d2:	bd10      	pop	{r4, pc}
   1a8d4:	58e2      	ldr	r2, [r4, r3]
   1a8d6:	2000      	movs	r0, #0
   1a8d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1a8dc:	50e2      	str	r2, [r4, r3]
   1a8de:	bd10      	pop	{r4, pc}
   1a8e0:	2009      	movs	r0, #9
   1a8e2:	f7f7 fc79 	bl	121d8 <bsd_os_errno_set>
   1a8e6:	f04f 30ff 	mov.w	r0, #4294967295
   1a8ea:	bd10      	pop	{r4, pc}
   1a8ec:	2016      	movs	r0, #22
   1a8ee:	f7f7 fc73 	bl	121d8 <bsd_os_errno_set>
   1a8f2:	f04f 30ff 	mov.w	r0, #4294967295
   1a8f6:	bd10      	pop	{r4, pc}
   1a8f8:	2023      	movs	r0, #35	; 0x23
   1a8fa:	f7f7 fc6d 	bl	121d8 <bsd_os_errno_set>
   1a8fe:	f04f 30ff 	mov.w	r0, #4294967295
   1a902:	bd10      	pop	{r4, pc}
   1a904:	20021d7c 	.word	0x20021d7c

0001a908 <at_client_evt_handler>:
   1a908:	b120      	cbz	r0, 1a914 <at_client_evt_handler+0xc>
   1a90a:	f850 1b08 	ldr.w	r1, [r0], #8
   1a90e:	0c09      	lsrs	r1, r1, #16
   1a910:	f7fc bf02 	b.w	17718 <rpc_at_event_handler>
   1a914:	4770      	bx	lr
   1a916:	bf00      	nop

0001a918 <rpc_at_client_init>:
   1a918:	4801      	ldr	r0, [pc, #4]	; (1a920 <rpc_at_client_init+0x8>)
   1a91a:	f7fb bd2b 	b.w	16374 <rpc_client_register>
   1a91e:	bf00      	nop
   1a920:	000210d0 	.word	0x000210d0

0001a924 <rpc_at_client_request_alloc>:
   1a924:	b180      	cbz	r0, 1a948 <rpc_at_client_request_alloc+0x24>
   1a926:	2300      	movs	r3, #0
   1a928:	b510      	push	{r4, lr}
   1a92a:	b082      	sub	sp, #8
   1a92c:	aa02      	add	r2, sp, #8
   1a92e:	4604      	mov	r4, r0
   1a930:	f842 3d04 	str.w	r3, [r2, #-4]!
   1a934:	2003      	movs	r0, #3
   1a936:	f7fb fd97 	bl	16468 <rpc_message_alloc>
   1a93a:	b918      	cbnz	r0, 1a944 <rpc_at_client_request_alloc+0x20>
   1a93c:	9b01      	ldr	r3, [sp, #4]
   1a93e:	b10b      	cbz	r3, 1a944 <rpc_at_client_request_alloc+0x20>
   1a940:	3308      	adds	r3, #8
   1a942:	6023      	str	r3, [r4, #0]
   1a944:	b002      	add	sp, #8
   1a946:	bd10      	pop	{r4, pc}
   1a948:	200e      	movs	r0, #14
   1a94a:	4770      	bx	lr

0001a94c <rpc_at_client_request_send>:
   1a94c:	b150      	cbz	r0, 1a964 <rpc_at_client_request_send+0x18>
   1a94e:	4603      	mov	r3, r0
   1a950:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a954:	2003      	movs	r0, #3
   1a956:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a95a:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a95e:	4619      	mov	r1, r3
   1a960:	f7fb bd72 	b.w	16448 <rpc_message_send>
   1a964:	200e      	movs	r0, #14
   1a966:	4770      	bx	lr

0001a968 <rpc_at_client_message_free>:
   1a968:	b120      	cbz	r0, 1a974 <rpc_at_client_message_free+0xc>
   1a96a:	f1a0 0108 	sub.w	r1, r0, #8
   1a96e:	2003      	movs	r0, #3
   1a970:	f7fb bda6 	b.w	164c0 <rpc_message_free>
   1a974:	200e      	movs	r0, #14
   1a976:	4770      	bx	lr

0001a978 <rpc_at_client_data_free>:
   1a978:	b118      	cbz	r0, 1a982 <rpc_at_client_data_free+0xa>
   1a97a:	4601      	mov	r1, r0
   1a97c:	2003      	movs	r0, #3
   1a97e:	f7fb bdab 	b.w	164d8 <rpc_message_data_free>
   1a982:	200e      	movs	r0, #14
   1a984:	4770      	bx	lr
   1a986:	bf00      	nop

0001a988 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1a988:	4a07      	ldr	r2, [pc, #28]	; (1a9a8 <SystemInit+0x20>)
   1a98a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1a98e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1a992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1a996:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a99a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1a99e:	4b03      	ldr	r3, [pc, #12]	; (1a9ac <SystemInit+0x24>)
   1a9a0:	4a03      	ldr	r2, [pc, #12]	; (1a9b0 <SystemInit+0x28>)
   1a9a2:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1a9a4:	4770      	bx	lr
   1a9a6:	bf00      	nop
   1a9a8:	e000ed00 	.word	0xe000ed00
   1a9ac:	200205a4 	.word	0x200205a4
   1a9b0:	03d09000 	.word	0x03d09000

0001a9b4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   1a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   1a9b6:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a9b8:	4b08      	ldr	r3, [pc, #32]	; (1a9dc <z_sys_init_run_level+0x28>)
   1a9ba:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a9be:	3001      	adds	r0, #1
   1a9c0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1a9c4:	42a6      	cmp	r6, r4
   1a9c6:	d800      	bhi.n	1a9ca <z_sys_init_run_level+0x16>
			}
		}
	}
}
   1a9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   1a9ca:	e9d4 3500 	ldrd	r3, r5, [r4]
   1a9ce:	4628      	mov	r0, r5
   1a9d0:	4798      	blx	r3
		if (retval != 0) {
   1a9d2:	b108      	cbz	r0, 1a9d8 <z_sys_init_run_level+0x24>
			if (dev) {
   1a9d4:	b105      	cbz	r5, 1a9d8 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   1a9d6:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a9d8:	3408      	adds	r4, #8
   1a9da:	e7f3      	b.n	1a9c4 <z_sys_init_run_level+0x10>
   1a9dc:	000210e0 	.word	0x000210e0

0001a9e0 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1a9e0:	4b0f      	ldr	r3, [pc, #60]	; (1aa20 <z_impl_device_get_binding+0x40>)
{
   1a9e2:	b570      	push	{r4, r5, r6, lr}
   1a9e4:	4605      	mov	r5, r0
   1a9e6:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   1a9e8:	4c0e      	ldr	r4, [pc, #56]	; (1aa24 <z_impl_device_get_binding+0x44>)
   1a9ea:	429c      	cmp	r4, r3
   1a9ec:	d104      	bne.n	1a9f8 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1a9ee:	4c0d      	ldr	r4, [pc, #52]	; (1aa24 <z_impl_device_get_binding+0x44>)
   1a9f0:	42b4      	cmp	r4, r6
   1a9f2:	d108      	bne.n	1aa06 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   1a9f4:	2400      	movs	r4, #0
   1a9f6:	e010      	b.n	1aa1a <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   1a9f8:	68a2      	ldr	r2, [r4, #8]
   1a9fa:	b112      	cbz	r2, 1aa02 <z_impl_device_get_binding+0x22>
   1a9fc:	6822      	ldr	r2, [r4, #0]
   1a9fe:	42aa      	cmp	r2, r5
   1aa00:	d00b      	beq.n	1aa1a <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   1aa02:	3410      	adds	r4, #16
   1aa04:	e7f1      	b.n	1a9ea <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   1aa06:	68a3      	ldr	r3, [r4, #8]
   1aa08:	b90b      	cbnz	r3, 1aa0e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1aa0a:	3410      	adds	r4, #16
   1aa0c:	e7f0      	b.n	1a9f0 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   1aa0e:	4628      	mov	r0, r5
   1aa10:	6821      	ldr	r1, [r4, #0]
   1aa12:	f002 f8f5 	bl	1cc00 <strcmp>
		if ((dev->driver_api != NULL) &&
   1aa16:	2800      	cmp	r0, #0
   1aa18:	d1f7      	bne.n	1aa0a <z_impl_device_get_binding+0x2a>
}
   1aa1a:	4620      	mov	r0, r4
   1aa1c:	bd70      	pop	{r4, r5, r6, pc}
   1aa1e:	bf00      	nop
   1aa20:	20020634 	.word	0x20020634
   1aa24:	200205b4 	.word	0x200205b4

0001aa28 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1aa28:	4b01      	ldr	r3, [pc, #4]	; (1aa30 <z_impl_z_errno+0x8>)
   1aa2a:	6898      	ldr	r0, [r3, #8]
}
   1aa2c:	305c      	adds	r0, #92	; 0x5c
   1aa2e:	4770      	bx	lr
   1aa30:	20021b28 	.word	0x20021b28

0001aa34 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1aa34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aa38:	4605      	mov	r5, r0
   1aa3a:	460f      	mov	r7, r1
	__asm__ volatile(
   1aa3c:	f04f 0320 	mov.w	r3, #32
   1aa40:	f3ef 8811 	mrs	r8, BASEPRI
   1aa44:	f383 8811 	msr	BASEPRI, r3
   1aa48:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1aa4c:	f000 fe18 	bl	1b680 <z_impl_k_current_get>
   1aa50:	4c22      	ldr	r4, [pc, #136]	; (1aadc <z_fatal_error+0xa8>)
   1aa52:	4b23      	ldr	r3, [pc, #140]	; (1aae0 <z_fatal_error+0xac>)
   1aa54:	2d04      	cmp	r5, #4
   1aa56:	eba4 0403 	sub.w	r4, r4, r3
   1aa5a:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1aa5e:	bf98      	it	ls
   1aa60:	4a20      	ldrls	r2, [pc, #128]	; (1aae4 <z_fatal_error+0xb0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1aa62:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1aa66:	f044 0301 	orr.w	r3, r4, #1
   1aa6a:	4606      	mov	r6, r0
	switch (reason) {
   1aa6c:	bf94      	ite	ls
   1aa6e:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1aa72:	4a1d      	ldrhi	r2, [pc, #116]	; (1aae8 <z_fatal_error+0xb4>)
   1aa74:	f8ad 3000 	strh.w	r3, [sp]
   1aa78:	4629      	mov	r1, r5
   1aa7a:	2300      	movs	r3, #0
   1aa7c:	481b      	ldr	r0, [pc, #108]	; (1aaec <z_fatal_error+0xb8>)
   1aa7e:	f001 fcb1 	bl	1c3e4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1aa82:	b147      	cbz	r7, 1aa96 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1aa84:	69fb      	ldr	r3, [r7, #28]
   1aa86:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1aa8a:	b123      	cbz	r3, 1aa96 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   1aa8c:	4818      	ldr	r0, [pc, #96]	; (1aaf0 <z_fatal_error+0xbc>)
   1aa8e:	f044 0101 	orr.w	r1, r4, #1
   1aa92:	f001 fc68 	bl	1c366 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1aa96:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1aa98:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1aa9c:	f005 fdb0 	bl	20600 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1aaa0:	b1d0      	cbz	r0, 1aad8 <z_fatal_error+0xa4>
   1aaa2:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1aaa4:	4b13      	ldr	r3, [pc, #76]	; (1aaf4 <z_fatal_error+0xc0>)
   1aaa6:	2a00      	cmp	r2, #0
   1aaa8:	bf08      	it	eq
   1aaaa:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1aaac:	f7f2 fbba 	bl	d224 <log_strdup>
   1aab0:	4623      	mov	r3, r4
   1aab2:	4602      	mov	r2, r0
   1aab4:	4631      	mov	r1, r6
   1aab6:	4810      	ldr	r0, [pc, #64]	; (1aaf8 <z_fatal_error+0xc4>)
   1aab8:	f001 fc7b 	bl	1c3b2 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1aabc:	4639      	mov	r1, r7
   1aabe:	4628      	mov	r0, r5
   1aac0:	f7f7 ff46 	bl	12950 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1aac4:	f388 8811 	msr	BASEPRI, r8
   1aac8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1aacc:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1aace:	b002      	add	sp, #8
   1aad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1aad4:	f7f3 be04 	b.w	e6e0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1aad8:	4806      	ldr	r0, [pc, #24]	; (1aaf4 <z_fatal_error+0xc0>)
   1aada:	e7e7      	b.n	1aaac <z_fatal_error+0x78>
   1aadc:	00020b8c 	.word	0x00020b8c
   1aae0:	00020b54 	.word	0x00020b54
   1aae4:	000210f8 	.word	0x000210f8
   1aae8:	00021a9d 	.word	0x00021a9d
   1aaec:	00021ab3 	.word	0x00021ab3
   1aaf0:	00021adb 	.word	0x00021adb
   1aaf4:	00021aab 	.word	0x00021aab
   1aaf8:	00021afc 	.word	0x00021afc

0001aafc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1aafc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1aafe:	4d0b      	ldr	r5, [pc, #44]	; (1ab2c <idle+0x30>)
	__asm__ volatile(
   1ab00:	f04f 0220 	mov.w	r2, #32
   1ab04:	f3ef 8311 	mrs	r3, BASEPRI
   1ab08:	f382 8811 	msr	BASEPRI, r2
   1ab0c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1ab10:	f005 fe17 	bl	20742 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ab14:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1ab16:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ab18:	2802      	cmp	r0, #2
   1ab1a:	bfd8      	it	le
   1ab1c:	4608      	movle	r0, r1
   1ab1e:	f005 fe20 	bl	20762 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1ab22:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1ab24:	f7f3 faa4 	bl	e070 <arch_cpu_idle>
}
   1ab28:	e7ea      	b.n	1ab00 <idle+0x4>
   1ab2a:	bf00      	nop
   1ab2c:	20021b28 	.word	0x20021b28

0001ab30 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1ab30:	4802      	ldr	r0, [pc, #8]	; (1ab3c <z_bss_zero+0xc>)
   1ab32:	4a03      	ldr	r2, [pc, #12]	; (1ab40 <z_bss_zero+0x10>)
   1ab34:	2100      	movs	r1, #0
   1ab36:	1a12      	subs	r2, r2, r0
   1ab38:	f002 b8b8 	b.w	1ccac <memset>
   1ab3c:	20020760 	.word	0x20020760
   1ab40:	20021ee4 	.word	0x20021ee4

0001ab44 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ab44:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1ab46:	4806      	ldr	r0, [pc, #24]	; (1ab60 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1ab48:	4a06      	ldr	r2, [pc, #24]	; (1ab64 <z_data_copy+0x20>)
   1ab4a:	4907      	ldr	r1, [pc, #28]	; (1ab68 <z_data_copy+0x24>)
   1ab4c:	1a12      	subs	r2, r2, r0
   1ab4e:	f002 f882 	bl	1cc56 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ab52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1ab56:	4a05      	ldr	r2, [pc, #20]	; (1ab6c <z_data_copy+0x28>)
   1ab58:	4905      	ldr	r1, [pc, #20]	; (1ab70 <z_data_copy+0x2c>)
   1ab5a:	4806      	ldr	r0, [pc, #24]	; (1ab74 <z_data_copy+0x30>)
   1ab5c:	f002 b87b 	b.w	1cc56 <memcpy>
   1ab60:	20020000 	.word	0x20020000
   1ab64:	2002075c 	.word	0x2002075c
   1ab68:	00021bb4 	.word	0x00021bb4
   1ab6c:	00000000 	.word	0x00000000
   1ab70:	00021bb4 	.word	0x00021bb4
   1ab74:	20020000 	.word	0x20020000

0001ab78 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1ab78:	2201      	movs	r2, #1
{
   1ab7a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1ab7c:	4b0b      	ldr	r3, [pc, #44]	; (1abac <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ab7e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1ab80:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ab82:	f7ff ff17 	bl	1a9b4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1ab86:	4a0a      	ldr	r2, [pc, #40]	; (1abb0 <bg_thread_main+0x38>)
   1ab88:	490a      	ldr	r1, [pc, #40]	; (1abb4 <bg_thread_main+0x3c>)
   1ab8a:	480b      	ldr	r0, [pc, #44]	; (1abb8 <bg_thread_main+0x40>)
   1ab8c:	f001 f909 	bl	1bda2 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ab90:	2003      	movs	r0, #3
   1ab92:	f7ff ff0f 	bl	1a9b4 <z_sys_init_run_level>

	z_init_static_threads();
   1ab96:	f000 fe33 	bl	1b800 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1ab9a:	f7f1 ff4b 	bl	ca34 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ab9e:	4a07      	ldr	r2, [pc, #28]	; (1abbc <bg_thread_main+0x44>)
   1aba0:	7b13      	ldrb	r3, [r2, #12]
   1aba2:	f023 0301 	bic.w	r3, r3, #1
   1aba6:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1aba8:	bd08      	pop	{r3, pc}
   1abaa:	bf00      	nop
   1abac:	20021d78 	.word	0x20021d78
   1abb0:	00021a9c 	.word	0x00021a9c
   1abb4:	00021b5e 	.word	0x00021b5e
   1abb8:	00021b6e 	.word	0x00021b6e
   1abbc:	20021590 	.word	0x20021590

0001abc0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1abc0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1abc4:	b0b5      	sub	sp, #212	; 0xd4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1abc6:	f7f2 fa91 	bl	d0ec <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   1abca:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 1acb8 <z_cstart+0xf8>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1abce:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1abd2:	2400      	movs	r4, #0
   1abd4:	23e0      	movs	r3, #224	; 0xe0
   1abd6:	4d31      	ldr	r5, [pc, #196]	; (1ac9c <z_cstart+0xdc>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1abd8:	f04f 0b01 	mov.w	fp, #1
   1abdc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1abe0:	77ec      	strb	r4, [r5, #31]
   1abe2:	762c      	strb	r4, [r5, #24]
   1abe4:	766c      	strb	r4, [r5, #25]
   1abe6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1abe8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   1abea:	4e2d      	ldr	r6, [pc, #180]	; (1aca0 <z_cstart+0xe0>)
   1abec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1abf0:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1abf2:	f7f3 fd41 	bl	e678 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1abf6:	f7f3 fa35 	bl	e064 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1abfa:	f04f 33ff 	mov.w	r3, #4294967295
   1abfe:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ac00:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ac02:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   1ac06:	4d27      	ldr	r5, [pc, #156]	; (1aca4 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ac08:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1ac0c:	ab06      	add	r3, sp, #24
   1ac0e:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ac10:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1ac12:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   1ac16:	f7ff fecd 	bl	1a9b4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ac1a:	2001      	movs	r0, #1
   1ac1c:	f7ff feca 	bl	1a9b4 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac20:	f8df a098 	ldr.w	sl, [pc, #152]	; 1acbc <z_cstart+0xfc>
	z_sched_init();
   1ac24:	f000 fcb4 	bl	1b590 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac28:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1acc0 <z_cstart+0x100>
   1ac2c:	4b1e      	ldr	r3, [pc, #120]	; (1aca8 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   1ac2e:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1ac30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1ac34:	4641      	mov	r1, r8
   1ac36:	4630      	mov	r0, r6
   1ac38:	9305      	str	r3, [sp, #20]
   1ac3a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1ac3e:	4653      	mov	r3, sl
   1ac40:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ac44:	9400      	str	r4, [sp, #0]
   1ac46:	f000 fd89 	bl	1b75c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ac4a:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   1ac4c:	4630      	mov	r0, r6
   1ac4e:	f023 0304 	bic.w	r3, r3, #4
   1ac52:	7373      	strb	r3, [r6, #13]
   1ac54:	f005 fc09 	bl	2046a <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1ac58:	230f      	movs	r3, #15
   1ac5a:	4f14      	ldr	r7, [pc, #80]	; (1acac <z_cstart+0xec>)
   1ac5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ac60:	4638      	mov	r0, r7
   1ac62:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1ac66:	4912      	ldr	r1, [pc, #72]	; (1acb0 <z_cstart+0xf0>)
   1ac68:	4b12      	ldr	r3, [pc, #72]	; (1acb4 <z_cstart+0xf4>)
   1ac6a:	e9cd b404 	strd	fp, r4, [sp, #16]
   1ac6e:	e9cd 4400 	strd	r4, r4, [sp]
   1ac72:	f000 fd73 	bl	1b75c <z_setup_new_thread>
   1ac76:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1ac78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1ac7c:	f023 0304 	bic.w	r3, r3, #4
   1ac80:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1ac82:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1ac86:	e9c5 3306 	strd	r3, r3, [r5, #24]
   1ac8a:	4641      	mov	r1, r8
   1ac8c:	4653      	mov	r3, sl
   1ac8e:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1ac90:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   1ac92:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1ac94:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1ac98:	f7f3 f9be 	bl	e018 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1ac9c:	e000ed00 	.word	0xe000ed00
   1aca0:	20021590 	.word	0x20021590
   1aca4:	20021b28 	.word	0x20021b28
   1aca8:	00021b95 	.word	0x00021b95
   1acac:	200214d8 	.word	0x200214d8
   1acb0:	20023c78 	.word	0x20023c78
   1acb4:	0001aafd 	.word	0x0001aafd
   1acb8:	200245b8 	.word	0x200245b8
   1acbc:	0001ab79 	.word	0x0001ab79
   1acc0:	20022c78 	.word	0x20022c78

0001acc4 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   1acc4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1acc6:	4c06      	ldr	r4, [pc, #24]	; (1ace0 <statics_init+0x1c>)
   1acc8:	4d06      	ldr	r5, [pc, #24]	; (1ace4 <statics_init+0x20>)
   1acca:	42ac      	cmp	r4, r5
   1accc:	d301      	bcc.n	1acd2 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1acce:	2000      	movs	r0, #0
   1acd0:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1acd2:	4620      	mov	r0, r4
   1acd4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1acd8:	f005 fa1b 	bl	20112 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1acdc:	3414      	adds	r4, #20
   1acde:	e7f4      	b.n	1acca <statics_init+0x6>
   1ace0:	2002066c 	.word	0x2002066c
   1ace4:	20020680 	.word	0x20020680

0001ace8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1ace8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1acea:	4b0e      	ldr	r3, [pc, #56]	; (1ad24 <init_mem_slab_module+0x3c>)
   1acec:	4c0e      	ldr	r4, [pc, #56]	; (1ad28 <init_mem_slab_module+0x40>)
   1acee:	42a3      	cmp	r3, r4
   1acf0:	d301      	bcc.n	1acf6 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1acf2:	2000      	movs	r0, #0
	return rc;
}
   1acf4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1acf6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1acfa:	ea41 0200 	orr.w	r2, r1, r0
   1acfe:	f012 0203 	ands.w	r2, r2, #3
   1ad02:	d10b      	bne.n	1ad1c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad04:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1ad06:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad08:	42aa      	cmp	r2, r5
   1ad0a:	d101      	bne.n	1ad10 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ad0c:	331c      	adds	r3, #28
   1ad0e:	e7ee      	b.n	1acee <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1ad10:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad12:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1ad14:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1ad16:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1ad18:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1ad1a:	e7f5      	b.n	1ad08 <init_mem_slab_module+0x20>
		return -EINVAL;
   1ad1c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1ad20:	e7e8      	b.n	1acf4 <init_mem_slab_module+0xc>
   1ad22:	bf00      	nop
   1ad24:	20020634 	.word	0x20020634
   1ad28:	2002066c 	.word	0x2002066c

0001ad2c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ad2c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1ad2e:	460c      	mov	r4, r1
   1ad30:	4616      	mov	r6, r2
   1ad32:	461f      	mov	r7, r3
   1ad34:	f04f 0320 	mov.w	r3, #32
   1ad38:	f3ef 8111 	mrs	r1, BASEPRI
   1ad3c:	f383 8811 	msr	BASEPRI, r3
   1ad40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1ad44:	6943      	ldr	r3, [r0, #20]
   1ad46:	b15b      	cbz	r3, 1ad60 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1ad48:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ad4a:	681b      	ldr	r3, [r3, #0]
   1ad4c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ad4e:	6983      	ldr	r3, [r0, #24]
   1ad50:	3301      	adds	r3, #1
   1ad52:	6183      	str	r3, [r0, #24]
		result = 0;
   1ad54:	2000      	movs	r0, #0
	__asm__ volatile(
   1ad56:	f381 8811 	msr	BASEPRI, r1
   1ad5a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1ad5e:	e011      	b.n	1ad84 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ad60:	ea56 0207 	orrs.w	r2, r6, r7
   1ad64:	d103      	bne.n	1ad6e <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1ad66:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1ad6a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ad6c:	e7f3      	b.n	1ad56 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1ad6e:	4602      	mov	r2, r0
   1ad70:	e9cd 6700 	strd	r6, r7, [sp]
   1ad74:	4804      	ldr	r0, [pc, #16]	; (1ad88 <k_mem_slab_alloc+0x5c>)
   1ad76:	f000 fbb7 	bl	1b4e8 <z_pend_curr>
		if (result == 0) {
   1ad7a:	b918      	cbnz	r0, 1ad84 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1ad7c:	4b03      	ldr	r3, [pc, #12]	; (1ad8c <k_mem_slab_alloc+0x60>)
   1ad7e:	689b      	ldr	r3, [r3, #8]
   1ad80:	695b      	ldr	r3, [r3, #20]
   1ad82:	6023      	str	r3, [r4, #0]
}
   1ad84:	b002      	add	sp, #8
   1ad86:	bdd0      	pop	{r4, r6, r7, pc}
   1ad88:	20021d79 	.word	0x20021d79
   1ad8c:	20021b28 	.word	0x20021b28

0001ad90 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ad90:	b570      	push	{r4, r5, r6, lr}
   1ad92:	4604      	mov	r4, r0
   1ad94:	460d      	mov	r5, r1
	__asm__ volatile(
   1ad96:	f04f 0320 	mov.w	r3, #32
   1ad9a:	f3ef 8611 	mrs	r6, BASEPRI
   1ad9e:	f383 8811 	msr	BASEPRI, r3
   1ada2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ada6:	f005 fbd3 	bl	20550 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1adaa:	b158      	cbz	r0, 1adc4 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1adac:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1adae:	682a      	ldr	r2, [r5, #0]
   1adb0:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1adb2:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   1adb4:	f005 fb59 	bl	2046a <z_ready_thread>
		z_reschedule(&lock, key);
   1adb8:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1adba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1adbe:	4808      	ldr	r0, [pc, #32]	; (1ade0 <k_mem_slab_free+0x50>)
   1adc0:	f005 bb0f 	b.w	203e2 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1adc4:	682b      	ldr	r3, [r5, #0]
   1adc6:	6962      	ldr	r2, [r4, #20]
   1adc8:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1adca:	682b      	ldr	r3, [r5, #0]
   1adcc:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1adce:	69a3      	ldr	r3, [r4, #24]
   1add0:	3b01      	subs	r3, #1
   1add2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1add4:	f386 8811 	msr	BASEPRI, r6
   1add8:	f3bf 8f6f 	isb	sy
}
   1addc:	bd70      	pop	{r4, r5, r6, pc}
   1adde:	bf00      	nop
   1ade0:	20021d79 	.word	0x20021d79

0001ade4 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1ade4:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1ade6:	4801      	ldr	r0, [pc, #4]	; (1adec <k_malloc+0x8>)
   1ade8:	f005 ba33 	b.w	20252 <k_mem_pool_malloc>
   1adec:	200205a8 	.word	0x200205a8

0001adf0 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1adf0:	b507      	push	{r0, r1, r2, lr}
   1adf2:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1adf4:	f005 fbf9 	bl	205ea <k_is_in_isr>
   1adf8:	9901      	ldr	r1, [sp, #4]
   1adfa:	b948      	cbnz	r0, 1ae10 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1adfc:	4b07      	ldr	r3, [pc, #28]	; (1ae1c <z_thread_malloc+0x2c>)
   1adfe:	689b      	ldr	r3, [r3, #8]
   1ae00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
   1ae02:	b13b      	cbz	r3, 1ae14 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   1ae04:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1ae06:	b003      	add	sp, #12
   1ae08:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   1ae0c:	f005 ba21 	b.w	20252 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1ae10:	4b03      	ldr	r3, [pc, #12]	; (1ae20 <z_thread_malloc+0x30>)
   1ae12:	e7f7      	b.n	1ae04 <z_thread_malloc+0x14>
}
   1ae14:	b003      	add	sp, #12
   1ae16:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae1a:	bf00      	nop
   1ae1c:	20021b28 	.word	0x20021b28
   1ae20:	200205a8 	.word	0x200205a8

0001ae24 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ae24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ae28:	4604      	mov	r4, r0
   1ae2a:	4616      	mov	r6, r2
   1ae2c:	461f      	mov	r7, r3
	__asm__ volatile(
   1ae2e:	f04f 0320 	mov.w	r3, #32
   1ae32:	f3ef 8811 	mrs	r8, BASEPRI
   1ae36:	f383 8811 	msr	BASEPRI, r3
   1ae3a:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ae3e:	68c3      	ldr	r3, [r0, #12]
   1ae40:	4a32      	ldr	r2, [pc, #200]	; (1af0c <z_impl_k_mutex_lock+0xe8>)
   1ae42:	b16b      	cbz	r3, 1ae60 <z_impl_k_mutex_lock+0x3c>
   1ae44:	6880      	ldr	r0, [r0, #8]
   1ae46:	6891      	ldr	r1, [r2, #8]
   1ae48:	4288      	cmp	r0, r1
   1ae4a:	d019      	beq.n	1ae80 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1ae4c:	ea56 0307 	orrs.w	r3, r6, r7
   1ae50:	d118      	bne.n	1ae84 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1ae52:	f388 8811 	msr	BASEPRI, r8
   1ae56:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1ae5a:	f06f 000f 	mvn.w	r0, #15
   1ae5e:	e00c      	b.n	1ae7a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1ae60:	6891      	ldr	r1, [r2, #8]
   1ae62:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1ae66:	3301      	adds	r3, #1
   1ae68:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1ae6a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ae6c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1ae6e:	60a3      	str	r3, [r4, #8]
   1ae70:	f388 8811 	msr	BASEPRI, r8
   1ae74:	f3bf 8f6f 	isb	sy
		return 0;
   1ae78:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1ae7a:	b002      	add	sp, #8
   1ae7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1ae80:	6921      	ldr	r1, [r4, #16]
   1ae82:	e7f0      	b.n	1ae66 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ae84:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ae88:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1ae8c:	4299      	cmp	r1, r3
   1ae8e:	bfa8      	it	ge
   1ae90:	4619      	movge	r1, r3
   1ae92:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ae96:	428b      	cmp	r3, r1
   1ae98:	dd2c      	ble.n	1aef4 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1ae9a:	f000 fb39 	bl	1b510 <z_set_prio>
   1ae9e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1aea0:	4622      	mov	r2, r4
   1aea2:	4641      	mov	r1, r8
   1aea4:	e9cd 6700 	strd	r6, r7, [sp]
   1aea8:	4819      	ldr	r0, [pc, #100]	; (1af10 <z_impl_k_mutex_lock+0xec>)
   1aeaa:	f000 fb1d 	bl	1b4e8 <z_pend_curr>
	if (got_mutex == 0) {
   1aeae:	2800      	cmp	r0, #0
   1aeb0:	d0e3      	beq.n	1ae7a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1aeb2:	f04f 0320 	mov.w	r3, #32
   1aeb6:	f3ef 8611 	mrs	r6, BASEPRI
   1aeba:	f383 8811 	msr	BASEPRI, r3
   1aebe:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1aec2:	6823      	ldr	r3, [r4, #0]
   1aec4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aec6:	429c      	cmp	r4, r3
   1aec8:	d007      	beq.n	1aeda <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1aeca:	b133      	cbz	r3, 1aeda <z_impl_k_mutex_lock+0xb6>
   1aecc:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1aed0:	4299      	cmp	r1, r3
   1aed2:	bfa8      	it	ge
   1aed4:	4619      	movge	r1, r3
   1aed6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1aeda:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1aedc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1aee0:	4299      	cmp	r1, r3
   1aee2:	d109      	bne.n	1aef8 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1aee4:	b16d      	cbz	r5, 1af02 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1aee6:	4631      	mov	r1, r6
   1aee8:	4809      	ldr	r0, [pc, #36]	; (1af10 <z_impl_k_mutex_lock+0xec>)
   1aeea:	f005 fa7a 	bl	203e2 <z_reschedule>
	return -EAGAIN;
   1aeee:	f06f 000a 	mvn.w	r0, #10
   1aef2:	e7c2      	b.n	1ae7a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1aef4:	2500      	movs	r5, #0
   1aef6:	e7d3      	b.n	1aea0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1aef8:	f000 fb0a 	bl	1b510 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1aefc:	2800      	cmp	r0, #0
   1aefe:	d1f2      	bne.n	1aee6 <z_impl_k_mutex_lock+0xc2>
   1af00:	e7f0      	b.n	1aee4 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1af02:	f386 8811 	msr	BASEPRI, r6
   1af06:	f3bf 8f6f 	isb	sy
   1af0a:	e7f0      	b.n	1aeee <z_impl_k_mutex_lock+0xca>
   1af0c:	20021b28 	.word	0x20021b28
   1af10:	20021d79 	.word	0x20021d79

0001af14 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1af14:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   1af16:	6883      	ldr	r3, [r0, #8]
{
   1af18:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1af1a:	2b00      	cmp	r3, #0
   1af1c:	d036      	beq.n	1af8c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1af1e:	4a1e      	ldr	r2, [pc, #120]	; (1af98 <z_impl_k_mutex_unlock+0x84>)
   1af20:	6892      	ldr	r2, [r2, #8]
   1af22:	4293      	cmp	r3, r2
   1af24:	d135      	bne.n	1af92 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1af26:	7bda      	ldrb	r2, [r3, #15]
   1af28:	3a01      	subs	r2, #1
   1af2a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1af2c:	68c3      	ldr	r3, [r0, #12]
   1af2e:	2b01      	cmp	r3, #1
   1af30:	d005      	beq.n	1af3e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1af32:	3b01      	subs	r3, #1
   1af34:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1af36:	f000 f8f7 	bl	1b128 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1af3a:	2000      	movs	r0, #0
}
   1af3c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1af3e:	f04f 0320 	mov.w	r3, #32
   1af42:	f3ef 8511 	mrs	r5, BASEPRI
   1af46:	f383 8811 	msr	BASEPRI, r3
   1af4a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1af4e:	6901      	ldr	r1, [r0, #16]
   1af50:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1af52:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1af56:	4299      	cmp	r1, r3
   1af58:	d001      	beq.n	1af5e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1af5a:	f000 fad9 	bl	1b510 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1af5e:	4620      	mov	r0, r4
   1af60:	f005 faf6 	bl	20550 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1af64:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1af66:	b158      	cbz	r0, 1af80 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1af68:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1af6c:	6122      	str	r2, [r4, #16]
   1af6e:	2200      	movs	r2, #0
   1af70:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   1af72:	f005 fa7a 	bl	2046a <z_ready_thread>
		z_reschedule(&lock, key);
   1af76:	4629      	mov	r1, r5
   1af78:	4808      	ldr	r0, [pc, #32]	; (1af9c <z_impl_k_mutex_unlock+0x88>)
   1af7a:	f005 fa32 	bl	203e2 <z_reschedule>
   1af7e:	e7da      	b.n	1af36 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1af80:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1af82:	f385 8811 	msr	BASEPRI, r5
   1af86:	f3bf 8f6f 	isb	sy
   1af8a:	e7d4      	b.n	1af36 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1af8c:	f06f 0015 	mvn.w	r0, #21
   1af90:	e7d4      	b.n	1af3c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1af92:	f04f 30ff 	mov.w	r0, #4294967295
   1af96:	e7d1      	b.n	1af3c <z_impl_k_mutex_unlock+0x28>
   1af98:	20021b28 	.word	0x20021b28
   1af9c:	20021d79 	.word	0x20021d79

0001afa0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1afa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1afa2:	4616      	mov	r6, r2
   1afa4:	461f      	mov	r7, r3
	__asm__ volatile(
   1afa6:	f04f 0320 	mov.w	r3, #32
   1afaa:	f3ef 8511 	mrs	r5, BASEPRI
   1afae:	f383 8811 	msr	BASEPRI, r3
   1afb2:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1afb6:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1afb8:	b19c      	cbz	r4, 1afe2 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1afba:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1afbc:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1afbe:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1afc2:	4294      	cmp	r4, r2
	list->head = node;
   1afc4:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1afc6:	bf08      	it	eq
   1afc8:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1afca:	2101      	movs	r1, #1
   1afcc:	4620      	mov	r0, r4
   1afce:	f005 f9bd 	bl	2034c <z_queue_node_peek>
   1afd2:	4604      	mov	r4, r0
	__asm__ volatile(
   1afd4:	f385 8811 	msr	BASEPRI, r5
   1afd8:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1afdc:	4620      	mov	r0, r4
   1afde:	b003      	add	sp, #12
   1afe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1afe2:	ea56 0307 	orrs.w	r3, r6, r7
   1afe6:	d0f5      	beq.n	1afd4 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1afe8:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1afec:	4629      	mov	r1, r5
   1afee:	4610      	mov	r0, r2
   1aff0:	e9cd 6700 	strd	r6, r7, [sp]
   1aff4:	f000 fa78 	bl	1b4e8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1aff8:	2800      	cmp	r0, #0
   1affa:	d1ef      	bne.n	1afdc <z_impl_k_queue_get+0x3c>
   1affc:	4b01      	ldr	r3, [pc, #4]	; (1b004 <z_impl_k_queue_get+0x64>)
   1affe:	689b      	ldr	r3, [r3, #8]
   1b000:	695c      	ldr	r4, [r3, #20]
   1b002:	e7eb      	b.n	1afdc <z_impl_k_queue_get+0x3c>
   1b004:	20021b28 	.word	0x20021b28

0001b008 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b008:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b00a:	4c08      	ldr	r4, [pc, #32]	; (1b02c <z_reset_time_slice+0x24>)
   1b00c:	6823      	ldr	r3, [r4, #0]
   1b00e:	b15b      	cbz	r3, 1b028 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b010:	f7f2 ff02 	bl	de18 <z_clock_elapsed>
   1b014:	6822      	ldr	r2, [r4, #0]
   1b016:	4906      	ldr	r1, [pc, #24]	; (1b030 <z_reset_time_slice+0x28>)
   1b018:	4410      	add	r0, r2
   1b01a:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   1b01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1b020:	2100      	movs	r1, #0
   1b022:	4610      	mov	r0, r2
   1b024:	f005 bb9d 	b.w	20762 <z_set_timeout_expiry>
}
   1b028:	bd10      	pop	{r4, pc}
   1b02a:	bf00      	nop
   1b02c:	20021b64 	.word	0x20021b64
   1b030:	20021b28 	.word	0x20021b28

0001b034 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b036:	460c      	mov	r4, r1
	__asm__ volatile(
   1b038:	f04f 0320 	mov.w	r3, #32
   1b03c:	f3ef 8511 	mrs	r5, BASEPRI
   1b040:	f383 8811 	msr	BASEPRI, r3
   1b044:	f3bf 8f6f 	isb	sy
			return (u32_t)((t * to_hz + off) / from_hz);
   1b048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b04c:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b050:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b052:	2200      	movs	r2, #0
   1b054:	fbe1 6700 	umlal	r6, r7, r1, r0
   1b058:	4b09      	ldr	r3, [pc, #36]	; (1b080 <k_sched_time_slice_set+0x4c>)
   1b05a:	4630      	mov	r0, r6
   1b05c:	611a      	str	r2, [r3, #16]
   1b05e:	4639      	mov	r1, r7
   1b060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b064:	2300      	movs	r3, #0
   1b066:	f7f1 faa7 	bl	c5b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b06a:	4b06      	ldr	r3, [pc, #24]	; (1b084 <k_sched_time_slice_set+0x50>)
   1b06c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b06e:	4b06      	ldr	r3, [pc, #24]	; (1b088 <k_sched_time_slice_set+0x54>)
   1b070:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1b072:	f7ff ffc9 	bl	1b008 <z_reset_time_slice>
	__asm__ volatile(
   1b076:	f385 8811 	msr	BASEPRI, r5
   1b07a:	f3bf 8f6f 	isb	sy
	}
}
   1b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b080:	20021b28 	.word	0x20021b28
   1b084:	20021b64 	.word	0x20021b64
   1b088:	20021b60 	.word	0x20021b60

0001b08c <k_sched_lock>:
	__asm__ volatile(
   1b08c:	f04f 0320 	mov.w	r3, #32
   1b090:	f3ef 8111 	mrs	r1, BASEPRI
   1b094:	f383 8811 	msr	BASEPRI, r3
   1b098:	f3bf 8f6f 	isb	sy
   1b09c:	4b04      	ldr	r3, [pc, #16]	; (1b0b0 <k_sched_lock+0x24>)
   1b09e:	689a      	ldr	r2, [r3, #8]
   1b0a0:	7bd3      	ldrb	r3, [r2, #15]
   1b0a2:	3b01      	subs	r3, #1
   1b0a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b0a6:	f381 8811 	msr	BASEPRI, r1
   1b0aa:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b0ae:	4770      	bx	lr
   1b0b0:	20021b28 	.word	0x20021b28

0001b0b4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b0b4:	4b09      	ldr	r3, [pc, #36]	; (1b0dc <z_priq_dumb_remove+0x28>)
   1b0b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b0ba:	4282      	cmp	r2, r0
   1b0bc:	d105      	bne.n	1b0ca <z_priq_dumb_remove+0x16>
   1b0be:	689b      	ldr	r3, [r3, #8]
   1b0c0:	428b      	cmp	r3, r1
   1b0c2:	d102      	bne.n	1b0ca <z_priq_dumb_remove+0x16>
   1b0c4:	7b4b      	ldrb	r3, [r1, #13]
   1b0c6:	06db      	lsls	r3, r3, #27
   1b0c8:	d106      	bne.n	1b0d8 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b0ca:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b0ce:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b0d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b0d2:	2300      	movs	r3, #0
	node->prev = NULL;
   1b0d4:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b0d8:	4770      	bx	lr
   1b0da:	bf00      	nop
   1b0dc:	20021b28 	.word	0x20021b28

0001b0e0 <update_cache>:
{
   1b0e0:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1b0e2:	4c10      	ldr	r4, [pc, #64]	; (1b124 <update_cache+0x44>)
{
   1b0e4:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1b0e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b0ea:	f005 f9b8 	bl	2045e <z_priq_dumb_best>
   1b0ee:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1b0f0:	68a3      	ldr	r3, [r4, #8]
   1b0f2:	7b59      	ldrb	r1, [r3, #13]
   1b0f4:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1b0f6:	bf44      	itt	mi
   1b0f8:	f041 0108 	orrmi.w	r1, r1, #8
   1b0fc:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1b0fe:	b905      	cbnz	r5, 1b102 <update_cache+0x22>
   1b100:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b102:	b94e      	cbnz	r6, 1b118 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1b104:	7b5a      	ldrb	r2, [r3, #13]
   1b106:	06d2      	lsls	r2, r2, #27
   1b108:	d106      	bne.n	1b118 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b10a:	69aa      	ldr	r2, [r5, #24]
   1b10c:	b922      	cbnz	r2, 1b118 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b10e:	89da      	ldrh	r2, [r3, #14]
   1b110:	2a7f      	cmp	r2, #127	; 0x7f
   1b112:	d901      	bls.n	1b118 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1b114:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b116:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1b118:	42ab      	cmp	r3, r5
   1b11a:	d001      	beq.n	1b120 <update_cache+0x40>
			z_reset_time_slice();
   1b11c:	f7ff ff74 	bl	1b008 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b120:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b122:	e7f8      	b.n	1b116 <update_cache+0x36>
   1b124:	20021b28 	.word	0x20021b28

0001b128 <k_sched_unlock>:
{
   1b128:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b12a:	f04f 0320 	mov.w	r3, #32
   1b12e:	f3ef 8411 	mrs	r4, BASEPRI
   1b132:	f383 8811 	msr	BASEPRI, r3
   1b136:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b13a:	4b08      	ldr	r3, [pc, #32]	; (1b15c <k_sched_unlock+0x34>)
		update_cache(0);
   1b13c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b13e:	689a      	ldr	r2, [r3, #8]
   1b140:	7bd3      	ldrb	r3, [r2, #15]
   1b142:	3301      	adds	r3, #1
   1b144:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b146:	f7ff ffcb 	bl	1b0e0 <update_cache>
	__asm__ volatile(
   1b14a:	f384 8811 	msr	BASEPRI, r4
   1b14e:	f3bf 8f6f 	isb	sy
}
   1b152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b156:	f005 b95b 	b.w	20410 <z_reschedule_unlocked>
   1b15a:	bf00      	nop
   1b15c:	20021b28 	.word	0x20021b28

0001b160 <ready_thread>:
{
   1b160:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b162:	7b43      	ldrb	r3, [r0, #13]
   1b164:	06db      	lsls	r3, r3, #27
   1b166:	d127      	bne.n	1b1b8 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
   1b168:	6983      	ldr	r3, [r0, #24]
   1b16a:	bb2b      	cbnz	r3, 1b1b8 <ready_thread+0x58>
	return list->head == list;
   1b16c:	4a13      	ldr	r2, [pc, #76]	; (1b1bc <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b16e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1b172:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   1b176:	428b      	cmp	r3, r1
   1b178:	d018      	beq.n	1b1ac <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b17a:	b1bb      	cbz	r3, 1b1ac <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b17c:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b180:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1b184:	42ae      	cmp	r6, r5
   1b186:	dd0c      	ble.n	1b1a2 <ready_thread+0x42>
	node->prev = successor->prev;
   1b188:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b18a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b18e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b190:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b192:	7b43      	ldrb	r3, [r0, #13]
   1b194:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b198:	7343      	strb	r3, [r0, #13]
}
   1b19a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b19c:	2000      	movs	r0, #0
   1b19e:	f7ff bf9f 	b.w	1b0e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b1a2:	429c      	cmp	r4, r3
   1b1a4:	d002      	beq.n	1b1ac <ready_thread+0x4c>
   1b1a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b1a8:	2b00      	cmp	r3, #0
   1b1aa:	d1e9      	bne.n	1b180 <ready_thread+0x20>
	node->prev = list->tail;
   1b1ac:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1b1b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b1b2:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b1b4:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1b1b6:	e7ec      	b.n	1b192 <ready_thread+0x32>
}
   1b1b8:	bc70      	pop	{r4, r5, r6}
   1b1ba:	4770      	bx	lr
   1b1bc:	20021b28 	.word	0x20021b28

0001b1c0 <z_sched_start>:
{
   1b1c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b1c2:	f04f 0220 	mov.w	r2, #32
   1b1c6:	f3ef 8411 	mrs	r4, BASEPRI
   1b1ca:	f382 8811 	msr	BASEPRI, r2
   1b1ce:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1b1d2:	7b42      	ldrb	r2, [r0, #13]
   1b1d4:	0751      	lsls	r1, r2, #29
   1b1d6:	d404      	bmi.n	1b1e2 <z_sched_start+0x22>
	__asm__ volatile(
   1b1d8:	f384 8811 	msr	BASEPRI, r4
   1b1dc:	f3bf 8f6f 	isb	sy
}
   1b1e0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b1e2:	f022 0204 	bic.w	r2, r2, #4
   1b1e6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b1e8:	f7ff ffba 	bl	1b160 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b1ec:	4621      	mov	r1, r4
}
   1b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b1f2:	4801      	ldr	r0, [pc, #4]	; (1b1f8 <z_sched_start+0x38>)
   1b1f4:	f005 b8f5 	b.w	203e2 <z_reschedule>
   1b1f8:	20021d79 	.word	0x20021d79

0001b1fc <z_move_thread_to_end_of_prio_q>:
{
   1b1fc:	4601      	mov	r1, r0
   1b1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b200:	f04f 0320 	mov.w	r3, #32
   1b204:	f3ef 8411 	mrs	r4, BASEPRI
   1b208:	f383 8811 	msr	BASEPRI, r3
   1b20c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b210:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b214:	2b00      	cmp	r3, #0
   1b216:	da02      	bge.n	1b21e <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b218:	4817      	ldr	r0, [pc, #92]	; (1b278 <z_move_thread_to_end_of_prio_q+0x7c>)
   1b21a:	f7ff ff4b 	bl	1b0b4 <z_priq_dumb_remove>
	return list->head == list;
   1b21e:	4a17      	ldr	r2, [pc, #92]	; (1b27c <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b220:	f102 0028 	add.w	r0, r2, #40	; 0x28
   1b224:	e9d2 350a 	ldrd	r3, r5, [r2, #40]	; 0x28
   1b228:	4283      	cmp	r3, r0
   1b22a:	d01f      	beq.n	1b26c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b22c:	b1f3      	cbz	r3, 1b26c <z_move_thread_to_end_of_prio_q+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b22e:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1b232:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b236:	42b7      	cmp	r7, r6
   1b238:	dd13      	ble.n	1b262 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1b23a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1b23c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1b240:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b242:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1b244:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1b246:	6890      	ldr	r0, [r2, #8]
   1b248:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b24c:	734b      	strb	r3, [r1, #13]
   1b24e:	1a43      	subs	r3, r0, r1
   1b250:	4258      	negs	r0, r3
   1b252:	4158      	adcs	r0, r3
   1b254:	f7ff ff44 	bl	1b0e0 <update_cache>
	__asm__ volatile(
   1b258:	f384 8811 	msr	BASEPRI, r4
   1b25c:	f3bf 8f6f 	isb	sy
}
   1b260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b262:	429d      	cmp	r5, r3
   1b264:	d002      	beq.n	1b26c <z_move_thread_to_end_of_prio_q+0x70>
   1b266:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b268:	2b00      	cmp	r3, #0
   1b26a:	d1e2      	bne.n	1b232 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1b26c:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1b270:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b272:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1b274:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1b276:	e7e5      	b.n	1b244 <z_move_thread_to_end_of_prio_q+0x48>
   1b278:	20021b50 	.word	0x20021b50
   1b27c:	20021b28 	.word	0x20021b28

0001b280 <z_time_slice>:
{
   1b280:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b282:	4a15      	ldr	r2, [pc, #84]	; (1b2d8 <z_time_slice+0x58>)
   1b284:	4b15      	ldr	r3, [pc, #84]	; (1b2dc <z_time_slice+0x5c>)
   1b286:	6814      	ldr	r4, [r2, #0]
{
   1b288:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1b28a:	6898      	ldr	r0, [r3, #8]
   1b28c:	42a0      	cmp	r0, r4
   1b28e:	461c      	mov	r4, r3
   1b290:	d103      	bne.n	1b29a <z_time_slice+0x1a>
}
   1b292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b296:	f7ff beb7 	b.w	1b008 <z_reset_time_slice>
	pending_current = NULL;
   1b29a:	2500      	movs	r5, #0
   1b29c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b29e:	4a10      	ldr	r2, [pc, #64]	; (1b2e0 <z_time_slice+0x60>)
   1b2a0:	6812      	ldr	r2, [r2, #0]
   1b2a2:	b1b2      	cbz	r2, 1b2d2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1b2a4:	89c2      	ldrh	r2, [r0, #14]
   1b2a6:	2a7f      	cmp	r2, #127	; 0x7f
   1b2a8:	d813      	bhi.n	1b2d2 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b2aa:	4a0e      	ldr	r2, [pc, #56]	; (1b2e4 <z_time_slice+0x64>)
   1b2ac:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b2b0:	6812      	ldr	r2, [r2, #0]
   1b2b2:	4295      	cmp	r5, r2
   1b2b4:	db0d      	blt.n	1b2d2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1b2b6:	4a0c      	ldr	r2, [pc, #48]	; (1b2e8 <z_time_slice+0x68>)
   1b2b8:	4290      	cmp	r0, r2
   1b2ba:	d00a      	beq.n	1b2d2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1b2bc:	6982      	ldr	r2, [r0, #24]
   1b2be:	b942      	cbnz	r2, 1b2d2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b2c0:	691a      	ldr	r2, [r3, #16]
   1b2c2:	428a      	cmp	r2, r1
   1b2c4:	dc02      	bgt.n	1b2cc <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b2c6:	f7ff ff99 	bl	1b1fc <z_move_thread_to_end_of_prio_q>
   1b2ca:	e7e2      	b.n	1b292 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1b2cc:	1a52      	subs	r2, r2, r1
   1b2ce:	611a      	str	r2, [r3, #16]
}
   1b2d0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b2d2:	2300      	movs	r3, #0
   1b2d4:	6123      	str	r3, [r4, #16]
   1b2d6:	e7fb      	b.n	1b2d0 <z_time_slice+0x50>
   1b2d8:	20021b5c 	.word	0x20021b5c
   1b2dc:	20021b28 	.word	0x20021b28
   1b2e0:	20021b64 	.word	0x20021b64
   1b2e4:	20021b60 	.word	0x20021b60
   1b2e8:	200214d8 	.word	0x200214d8

0001b2ec <z_impl_k_thread_suspend>:
{
   1b2ec:	b570      	push	{r4, r5, r6, lr}
   1b2ee:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b2f0:	3018      	adds	r0, #24
   1b2f2:	f005 fa00 	bl	206f6 <z_abort_timeout>
	__asm__ volatile(
   1b2f6:	f04f 0320 	mov.w	r3, #32
   1b2fa:	f3ef 8611 	mrs	r6, BASEPRI
   1b2fe:	f383 8811 	msr	BASEPRI, r3
   1b302:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b306:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1b30a:	2b00      	cmp	r3, #0
   1b30c:	da07      	bge.n	1b31e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b30e:	4621      	mov	r1, r4
   1b310:	480e      	ldr	r0, [pc, #56]	; (1b34c <z_impl_k_thread_suspend+0x60>)
   1b312:	f7ff fecf 	bl	1b0b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b316:	7b63      	ldrb	r3, [r4, #13]
   1b318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b31c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b31e:	4d0c      	ldr	r5, [pc, #48]	; (1b350 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b320:	7b63      	ldrb	r3, [r4, #13]
   1b322:	68a8      	ldr	r0, [r5, #8]
   1b324:	f043 0310 	orr.w	r3, r3, #16
   1b328:	7363      	strb	r3, [r4, #13]
   1b32a:	1b03      	subs	r3, r0, r4
   1b32c:	4258      	negs	r0, r3
   1b32e:	4158      	adcs	r0, r3
   1b330:	f7ff fed6 	bl	1b0e0 <update_cache>
	__asm__ volatile(
   1b334:	f386 8811 	msr	BASEPRI, r6
   1b338:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b33c:	68ab      	ldr	r3, [r5, #8]
   1b33e:	42a3      	cmp	r3, r4
   1b340:	d103      	bne.n	1b34a <z_impl_k_thread_suspend+0x5e>
}
   1b342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b346:	f005 b863 	b.w	20410 <z_reschedule_unlocked>
}
   1b34a:	bd70      	pop	{r4, r5, r6, pc}
   1b34c:	20021b50 	.word	0x20021b50
   1b350:	20021b28 	.word	0x20021b28

0001b354 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1b354:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   1b356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b35a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1b35c:	b103      	cbz	r3, 1b360 <z_thread_single_abort+0xc>
		thread->fn_abort();
   1b35e:	4798      	blx	r3
   1b360:	f104 0018 	add.w	r0, r4, #24
   1b364:	f005 f9c7 	bl	206f6 <z_abort_timeout>
	__asm__ volatile(
   1b368:	f04f 0320 	mov.w	r3, #32
   1b36c:	f3ef 8611 	mrs	r6, BASEPRI
   1b370:	f383 8811 	msr	BASEPRI, r3
   1b374:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b378:	7b63      	ldrb	r3, [r4, #13]
   1b37a:	06d8      	lsls	r0, r3, #27
   1b37c:	d123      	bne.n	1b3c6 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1b37e:	69a2      	ldr	r2, [r4, #24]
   1b380:	bb0a      	cbnz	r2, 1b3c6 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1b382:	0619      	lsls	r1, r3, #24
   1b384:	d507      	bpl.n	1b396 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1b386:	4621      	mov	r1, r4
   1b388:	481e      	ldr	r0, [pc, #120]	; (1b404 <z_thread_single_abort+0xb0>)
   1b38a:	f7ff fe93 	bl	1b0b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b38e:	7b63      	ldrb	r3, [r4, #13]
   1b390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b394:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1b396:	4b1c      	ldr	r3, [pc, #112]	; (1b408 <z_thread_single_abort+0xb4>)
   1b398:	6898      	ldr	r0, [r3, #8]
   1b39a:	1b02      	subs	r2, r0, r4
   1b39c:	4250      	negs	r0, r2
   1b39e:	4150      	adcs	r0, r2
   1b3a0:	f7ff fe9e 	bl	1b0e0 <update_cache>
			waiter->base.pended_on = NULL;
   1b3a4:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   1b3a6:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b3a8:	f104 0828 	add.w	r8, r4, #40	; 0x28
   1b3ac:	f043 0308 	orr.w	r3, r3, #8
   1b3b0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1b3b2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b3b4:	4545      	cmp	r5, r8
   1b3b6:	d000      	beq.n	1b3ba <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1b3b8:	b995      	cbnz	r5, 1b3e0 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1b3ba:	f386 8811 	msr	BASEPRI, r6
   1b3be:	f3bf 8f6f 	isb	sy
}
   1b3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1b3c6:	079b      	lsls	r3, r3, #30
   1b3c8:	d5ec      	bpl.n	1b3a4 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1b3ca:	4621      	mov	r1, r4
   1b3cc:	68a0      	ldr	r0, [r4, #8]
   1b3ce:	f7ff fe71 	bl	1b0b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b3d2:	7b63      	ldrb	r3, [r4, #13]
   1b3d4:	f023 0302 	bic.w	r3, r3, #2
   1b3d8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1b3da:	2300      	movs	r3, #0
   1b3dc:	60a3      	str	r3, [r4, #8]
   1b3de:	e7e1      	b.n	1b3a4 <z_thread_single_abort+0x50>
   1b3e0:	f105 0018 	add.w	r0, r5, #24
   1b3e4:	f005 f987 	bl	206f6 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1b3e8:	68a8      	ldr	r0, [r5, #8]
   1b3ea:	4629      	mov	r1, r5
   1b3ec:	f7ff fe62 	bl	1b0b4 <z_priq_dumb_remove>
   1b3f0:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1b3f2:	4628      	mov	r0, r5
   1b3f4:	f023 0302 	bic.w	r3, r3, #2
   1b3f8:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1b3fa:	60af      	str	r7, [r5, #8]
   1b3fc:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   1b3fe:	f7ff feaf 	bl	1b160 <ready_thread>
   1b402:	e7d6      	b.n	1b3b2 <z_thread_single_abort+0x5e>
   1b404:	20021b50 	.word	0x20021b50
   1b408:	20021b28 	.word	0x20021b28

0001b40c <unready_thread>:
{
   1b40c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b40e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1b412:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b414:	2b00      	cmp	r3, #0
   1b416:	da06      	bge.n	1b426 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b418:	4807      	ldr	r0, [pc, #28]	; (1b438 <unready_thread+0x2c>)
   1b41a:	f7ff fe4b 	bl	1b0b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b41e:	7b4b      	ldrb	r3, [r1, #13]
   1b420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b424:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1b426:	4b05      	ldr	r3, [pc, #20]	; (1b43c <unready_thread+0x30>)
   1b428:	6898      	ldr	r0, [r3, #8]
   1b42a:	1a43      	subs	r3, r0, r1
   1b42c:	4258      	negs	r0, r3
   1b42e:	4158      	adcs	r0, r3
}
   1b430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b434:	f7ff be54 	b.w	1b0e0 <update_cache>
   1b438:	20021b50 	.word	0x20021b50
   1b43c:	20021b28 	.word	0x20021b28

0001b440 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b442:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1b444:	f005 f9a8 	bl	20798 <z_tick_get_32>
   1b448:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1b44a:	f04f 0320 	mov.w	r3, #32
   1b44e:	f3ef 8711 	mrs	r7, BASEPRI
   1b452:	f383 8811 	msr	BASEPRI, r3
   1b456:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1b45a:	4e0d      	ldr	r6, [pc, #52]	; (1b490 <z_tick_sleep.part.0+0x50>)
   1b45c:	4b0d      	ldr	r3, [pc, #52]	; (1b494 <z_tick_sleep.part.0+0x54>)
   1b45e:	68b0      	ldr	r0, [r6, #8]
   1b460:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1b462:	f005 f83d 	bl	204e0 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1b466:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b468:	490b      	ldr	r1, [pc, #44]	; (1b498 <z_tick_sleep.part.0+0x58>)
   1b46a:	462a      	mov	r2, r5
   1b46c:	17eb      	asrs	r3, r5, #31
   1b46e:	3018      	adds	r0, #24
   1b470:	f000 faf0 	bl	1ba54 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b474:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
   1b476:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b478:	7b53      	ldrb	r3, [r2, #13]
   1b47a:	f043 0310 	orr.w	r3, r3, #16
   1b47e:	7353      	strb	r3, [r2, #13]
   1b480:	f7f2 fcfe 	bl	de80 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1b484:	f005 f988 	bl	20798 <z_tick_get_32>
   1b488:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1b48a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1b48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b490:	20021b28 	.word	0x20021b28
   1b494:	20021b5c 	.word	0x20021b5c
   1b498:	0002048b 	.word	0x0002048b

0001b49c <pend>:
{
   1b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4a0:	4606      	mov	r6, r0
   1b4a2:	4614      	mov	r4, r2
   1b4a4:	461d      	mov	r5, r3
   1b4a6:	f04f 0320 	mov.w	r3, #32
   1b4aa:	f3ef 8711 	mrs	r7, BASEPRI
   1b4ae:	f383 8811 	msr	BASEPRI, r3
   1b4b2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1b4b6:	f005 f823 	bl	20500 <add_to_waitq_locked>
	__asm__ volatile(
   1b4ba:	f387 8811 	msr	BASEPRI, r7
   1b4be:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b4c2:	1c6b      	adds	r3, r5, #1
   1b4c4:	bf08      	it	eq
   1b4c6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1b4ca:	d008      	beq.n	1b4de <pend+0x42>
   1b4cc:	4622      	mov	r2, r4
   1b4ce:	462b      	mov	r3, r5
   1b4d0:	f106 0018 	add.w	r0, r6, #24
   1b4d4:	4903      	ldr	r1, [pc, #12]	; (1b4e4 <pend+0x48>)
}
   1b4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b4da:	f000 babb 	b.w	1ba54 <z_add_timeout>
   1b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4e2:	bf00      	nop
   1b4e4:	0002048b 	.word	0x0002048b

0001b4e8 <z_pend_curr>:
{
   1b4e8:	b510      	push	{r4, lr}
   1b4ea:	460c      	mov	r4, r1
	pending_current = _current;
   1b4ec:	4b06      	ldr	r3, [pc, #24]	; (1b508 <z_pend_curr+0x20>)
{
   1b4ee:	4611      	mov	r1, r2
	pending_current = _current;
   1b4f0:	6898      	ldr	r0, [r3, #8]
   1b4f2:	4b06      	ldr	r3, [pc, #24]	; (1b50c <z_pend_curr+0x24>)
   1b4f4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1b4f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b4fa:	f7ff ffcf 	bl	1b49c <pend>
   1b4fe:	4620      	mov	r0, r4
}
   1b500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b504:	f7f2 bcbc 	b.w	de80 <arch_swap>
   1b508:	20021b28 	.word	0x20021b28
   1b50c:	20021b5c 	.word	0x20021b5c

0001b510 <z_set_prio>:
{
   1b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b512:	4604      	mov	r4, r0
	__asm__ volatile(
   1b514:	f04f 0320 	mov.w	r3, #32
   1b518:	f3ef 8711 	mrs	r7, BASEPRI
   1b51c:	f383 8811 	msr	BASEPRI, r3
   1b520:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b524:	7b43      	ldrb	r3, [r0, #13]
   1b526:	b24e      	sxtb	r6, r1
   1b528:	06db      	lsls	r3, r3, #27
   1b52a:	d12c      	bne.n	1b586 <z_set_prio+0x76>
		if (need_sched) {
   1b52c:	6983      	ldr	r3, [r0, #24]
   1b52e:	bb53      	cbnz	r3, 1b586 <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b530:	4d16      	ldr	r5, [pc, #88]	; (1b58c <z_set_prio+0x7c>)
   1b532:	4621      	mov	r1, r4
   1b534:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1b538:	f7ff fdbc 	bl	1b0b4 <z_priq_dumb_remove>
	return list->head == list;
   1b53c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b53e:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b540:	4283      	cmp	r3, r0
				thread->base.prio = prio;
   1b542:	73a6      	strb	r6, [r4, #14]
   1b544:	d018      	beq.n	1b578 <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b546:	b1bb      	cbz	r3, 1b578 <z_set_prio+0x68>
   1b548:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1b54a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b54e:	42b5      	cmp	r5, r6
   1b550:	dd0d      	ble.n	1b56e <z_set_prio+0x5e>
	node->prev = successor->prev;
   1b552:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b554:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b558:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b55a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b55c:	2001      	movs	r0, #1
   1b55e:	f7ff fdbf 	bl	1b0e0 <update_cache>
   1b562:	2001      	movs	r0, #1
	__asm__ volatile(
   1b564:	f387 8811 	msr	BASEPRI, r7
   1b568:	f3bf 8f6f 	isb	sy
}
   1b56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b56e:	428b      	cmp	r3, r1
   1b570:	d002      	beq.n	1b578 <z_set_prio+0x68>
   1b572:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b574:	2b00      	cmp	r3, #0
   1b576:	d1e8      	bne.n	1b54a <z_set_prio+0x3a>
	node->prev = list->tail;
   1b578:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b57a:	6020      	str	r0, [r4, #0]
	node->prev = list->tail;
   1b57c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b57e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b580:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b582:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   1b584:	e7ea      	b.n	1b55c <z_set_prio+0x4c>
			thread->base.prio = prio;
   1b586:	2000      	movs	r0, #0
   1b588:	73a6      	strb	r6, [r4, #14]
   1b58a:	e7eb      	b.n	1b564 <z_set_prio+0x54>
   1b58c:	20021b28 	.word	0x20021b28

0001b590 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b590:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1b592:	4b04      	ldr	r3, [pc, #16]	; (1b5a4 <z_sched_init+0x14>)
   1b594:	4608      	mov	r0, r1
   1b596:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1b59a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1b59e:	f7ff bd49 	b.w	1b034 <k_sched_time_slice_set>
   1b5a2:	bf00      	nop
   1b5a4:	20021b28 	.word	0x20021b28

0001b5a8 <z_impl_k_yield>:
{
   1b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1b5aa:	4c23      	ldr	r4, [pc, #140]	; (1b638 <z_impl_k_yield+0x90>)
   1b5ac:	4b23      	ldr	r3, [pc, #140]	; (1b63c <z_impl_k_yield+0x94>)
   1b5ae:	68a2      	ldr	r2, [r4, #8]
   1b5b0:	429a      	cmp	r2, r3
   1b5b2:	d028      	beq.n	1b606 <z_impl_k_yield+0x5e>
	__asm__ volatile(
   1b5b4:	f04f 0320 	mov.w	r3, #32
   1b5b8:	f3ef 8511 	mrs	r5, BASEPRI
   1b5bc:	f383 8811 	msr	BASEPRI, r3
   1b5c0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1b5c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b5c8:	68a1      	ldr	r1, [r4, #8]
   1b5ca:	f7ff fd73 	bl	1b0b4 <z_priq_dumb_remove>
	return list->head == list;
   1b5ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b5d0:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b5d2:	4282      	cmp	r2, r0
   1b5d4:	d028      	beq.n	1b628 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b5d6:	b33a      	cbz	r2, 1b628 <z_impl_k_yield+0x80>
   1b5d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1b5da:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b5de:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1b5e2:	428f      	cmp	r7, r1
   1b5e4:	dd1b      	ble.n	1b61e <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   1b5e6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b5e8:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1b5ec:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1b5ee:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1b5f0:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1b5f2:	2001      	movs	r0, #1
   1b5f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b5f8:	735a      	strb	r2, [r3, #13]
   1b5fa:	f7ff fd71 	bl	1b0e0 <update_cache>
	__asm__ volatile(
   1b5fe:	f385 8811 	msr	BASEPRI, r5
   1b602:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b606:	f04f 0320 	mov.w	r3, #32
   1b60a:	f3ef 8011 	mrs	r0, BASEPRI
   1b60e:	f383 8811 	msr	BASEPRI, r3
   1b612:	f3bf 8f6f 	isb	sy
}
   1b616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b61a:	f7f2 bc31 	b.w	de80 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b61e:	4296      	cmp	r6, r2
   1b620:	d002      	beq.n	1b628 <z_impl_k_yield+0x80>
   1b622:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b624:	2a00      	cmp	r2, #0
   1b626:	d1da      	bne.n	1b5de <z_impl_k_yield+0x36>
	node->prev = list->tail;
   1b628:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1b62a:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   1b62c:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1b62e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b630:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b632:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   1b634:	e7dc      	b.n	1b5f0 <z_impl_k_yield+0x48>
   1b636:	bf00      	nop
   1b638:	20021b28 	.word	0x20021b28
   1b63c:	200214d8 	.word	0x200214d8

0001b640 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b640:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b642:	3301      	adds	r3, #1
   1b644:	bf08      	it	eq
   1b646:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1b64a:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b64c:	d106      	bne.n	1b65c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1b64e:	4b0b      	ldr	r3, [pc, #44]	; (1b67c <z_impl_k_sleep+0x3c>)
   1b650:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b652:	f7ff fe4b 	bl	1b2ec <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   1b656:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1b65a:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1b65c:	4604      	mov	r4, r0
	if (ticks == 0) {
   1b65e:	b948      	cbnz	r0, 1b674 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1b660:	f7ff ffa2 	bl	1b5a8 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1b664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b668:	fb84 3400 	smull	r3, r4, r4, r0
   1b66c:	0bd8      	lsrs	r0, r3, #15
   1b66e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1b672:	e7f2      	b.n	1b65a <z_impl_k_sleep+0x1a>
   1b674:	f7ff fee4 	bl	1b440 <z_tick_sleep.part.0>
   1b678:	4604      	mov	r4, r0
   1b67a:	e7f3      	b.n	1b664 <z_impl_k_sleep+0x24>
   1b67c:	20021b28 	.word	0x20021b28

0001b680 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b680:	4b01      	ldr	r3, [pc, #4]	; (1b688 <z_impl_k_current_get+0x8>)
   1b682:	6898      	ldr	r0, [r3, #8]
   1b684:	4770      	bx	lr
   1b686:	bf00      	nop
   1b688:	20021b28 	.word	0x20021b28

0001b68c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b68c:	b538      	push	{r3, r4, r5, lr}
   1b68e:	4604      	mov	r4, r0
   1b690:	f04f 0320 	mov.w	r3, #32
   1b694:	f3ef 8511 	mrs	r5, BASEPRI
   1b698:	f383 8811 	msr	BASEPRI, r3
   1b69c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1b6a0:	f004 ff56 	bl	20550 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1b6a4:	b148      	cbz	r0, 1b6ba <z_impl_k_sem_give+0x2e>
   1b6a6:	2200      	movs	r2, #0
   1b6a8:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b6aa:	f004 fede 	bl	2046a <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1b6ae:	4629      	mov	r1, r5
}
   1b6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b6b4:	4807      	ldr	r0, [pc, #28]	; (1b6d4 <z_impl_k_sem_give+0x48>)
   1b6b6:	f004 be94 	b.w	203e2 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b6ba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b6be:	429a      	cmp	r2, r3
   1b6c0:	bf18      	it	ne
   1b6c2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b6c4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b6c6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b6c8:	f104 0010 	add.w	r0, r4, #16
   1b6cc:	f005 f8dc 	bl	20888 <z_handle_obj_poll_events>
}
   1b6d0:	e7ed      	b.n	1b6ae <z_impl_k_sem_give+0x22>
   1b6d2:	bf00      	nop
   1b6d4:	20021d79 	.word	0x20021d79

0001b6d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b6da:	4614      	mov	r4, r2
   1b6dc:	461d      	mov	r5, r3
   1b6de:	f04f 0320 	mov.w	r3, #32
   1b6e2:	f3ef 8111 	mrs	r1, BASEPRI
   1b6e6:	f383 8811 	msr	BASEPRI, r3
   1b6ea:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1b6ee:	6883      	ldr	r3, [r0, #8]
   1b6f0:	b143      	cbz	r3, 1b704 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1b6f2:	3b01      	subs	r3, #1
   1b6f4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1b6f6:	f381 8811 	msr	BASEPRI, r1
   1b6fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b6fe:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1b700:	b003      	add	sp, #12
   1b702:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b704:	ea54 0305 	orrs.w	r3, r4, r5
   1b708:	d106      	bne.n	1b718 <z_impl_k_sem_take+0x40>
   1b70a:	f381 8811 	msr	BASEPRI, r1
   1b70e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b712:	f06f 000f 	mvn.w	r0, #15
   1b716:	e7f3      	b.n	1b700 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b718:	4602      	mov	r2, r0
   1b71a:	e9cd 4500 	strd	r4, r5, [sp]
   1b71e:	4802      	ldr	r0, [pc, #8]	; (1b728 <z_impl_k_sem_take+0x50>)
   1b720:	f7ff fee2 	bl	1b4e8 <z_pend_curr>
	return ret;
   1b724:	e7ec      	b.n	1b700 <z_impl_k_sem_take+0x28>
   1b726:	bf00      	nop
   1b728:	20021d79 	.word	0x20021d79

0001b72c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1b72c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1b72e:	4c08      	ldr	r4, [pc, #32]	; (1b750 <k_sys_work_q_init+0x24>)
   1b730:	f04f 33ff 	mov.w	r3, #4294967295
   1b734:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b738:	4620      	mov	r0, r4
   1b73a:	4906      	ldr	r1, [pc, #24]	; (1b754 <k_sys_work_q_init+0x28>)
   1b73c:	f000 f8c2 	bl	1b8c4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1b740:	4905      	ldr	r1, [pc, #20]	; (1b758 <k_sys_work_q_init+0x2c>)
   1b742:	f104 0018 	add.w	r0, r4, #24
   1b746:	f004 ff58 	bl	205fa <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1b74a:	2000      	movs	r0, #0
   1b74c:	bd10      	pop	{r4, pc}
   1b74e:	bf00      	nop
   1b750:	20021b68 	.word	0x20021b68
   1b754:	200245b8 	.word	0x200245b8
   1b758:	00021b9d 	.word	0x00021b9d

0001b75c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1b75c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   1b75e:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1b762:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   1b766:	2504      	movs	r5, #4
   1b768:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   1b76a:	2500      	movs	r5, #0
{
   1b76c:	4604      	mov	r4, r0
   1b76e:	b087      	sub	sp, #28
   1b770:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b774:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
   1b778:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b77a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
   1b77c:	e9c0 5506 	strd	r5, r5, [r0, #24]
   1b780:	9602      	str	r6, [sp, #8]
   1b782:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
   1b784:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b786:	9601      	str	r6, [sp, #4]
   1b788:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1b78a:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b78c:	9600      	str	r6, [sp, #0]
   1b78e:	f7f2 fc27 	bl	dfe0 <arch_new_thread>
	if (!_current) {
   1b792:	4b04      	ldr	r3, [pc, #16]	; (1b7a4 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
   1b794:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   1b798:	689b      	ldr	r3, [r3, #8]
   1b79a:	b103      	cbz	r3, 1b79e <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   1b79c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1b79e:	66a3      	str	r3, [r4, #104]	; 0x68
}
   1b7a0:	b007      	add	sp, #28
   1b7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7a4:	20021b28 	.word	0x20021b28

0001b7a8 <z_impl_k_thread_create>:
{
   1b7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b7aa:	2500      	movs	r5, #0
{
   1b7ac:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b7ae:	9505      	str	r5, [sp, #20]
   1b7b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   1b7b2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b7b6:	9504      	str	r5, [sp, #16]
   1b7b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1b7ba:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b7bc:	9503      	str	r5, [sp, #12]
   1b7be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b7c0:	9502      	str	r5, [sp, #8]
   1b7c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b7c4:	9501      	str	r5, [sp, #4]
   1b7c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b7c8:	9500      	str	r5, [sp, #0]
   1b7ca:	f7ff ffc7 	bl	1b75c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1b7ce:	1c7b      	adds	r3, r7, #1
   1b7d0:	bf08      	it	eq
   1b7d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b7d6:	d005      	beq.n	1b7e4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b7d8:	ea56 0307 	orrs.w	r3, r6, r7
   1b7dc:	d105      	bne.n	1b7ea <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1b7de:	4620      	mov	r0, r4
   1b7e0:	f7ff fcee 	bl	1b1c0 <z_sched_start>
}
   1b7e4:	4620      	mov	r0, r4
   1b7e6:	b007      	add	sp, #28
   1b7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b7ea:	4632      	mov	r2, r6
   1b7ec:	463b      	mov	r3, r7
   1b7ee:	4903      	ldr	r1, [pc, #12]	; (1b7fc <z_impl_k_thread_create+0x54>)
   1b7f0:	f104 0018 	add.w	r0, r4, #24
   1b7f4:	f000 f92e 	bl	1ba54 <z_add_timeout>
   1b7f8:	e7f4      	b.n	1b7e4 <z_impl_k_thread_create+0x3c>
   1b7fa:	bf00      	nop
   1b7fc:	0002048b 	.word	0x0002048b

0001b800 <z_init_static_threads>:
{
   1b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1b804:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1b8bc <z_init_static_threads+0xbc>
   1b808:	4d2b      	ldr	r5, [pc, #172]	; (1b8b8 <z_init_static_threads+0xb8>)
   1b80a:	46c8      	mov	r8, r9
{
   1b80c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1b80e:	454d      	cmp	r5, r9
   1b810:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1b814:	d30d      	bcc.n	1b832 <z_init_static_threads+0x32>
	k_sched_lock();
   1b816:	f7ff fc39 	bl	1b08c <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
   1b81a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
   1b81e:	4c26      	ldr	r4, [pc, #152]	; (1b8b8 <z_init_static_threads+0xb8>)
   1b820:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1b8c0 <z_init_static_threads+0xc0>
   1b824:	4544      	cmp	r4, r8
   1b826:	d321      	bcc.n	1b86c <z_init_static_threads+0x6c>
}
   1b828:	b007      	add	sp, #28
   1b82a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1b82e:	f7ff bc7b 	b.w	1b128 <k_sched_unlock>
		z_setup_new_thread(
   1b832:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b836:	9305      	str	r3, [sp, #20]
   1b838:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b83c:	9304      	str	r3, [sp, #16]
   1b83e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b842:	9303      	str	r3, [sp, #12]
   1b844:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b848:	9302      	str	r3, [sp, #8]
   1b84a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b84e:	9301      	str	r3, [sp, #4]
   1b850:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b854:	9300      	str	r3, [sp, #0]
   1b856:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b85a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b85e:	f7ff ff7d 	bl	1b75c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b862:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b866:	655d      	str	r5, [r3, #84]	; 0x54
   1b868:	4625      	mov	r5, r4
   1b86a:	e7d0      	b.n	1b80e <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b86c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1b86e:	1c4b      	adds	r3, r1, #1
   1b870:	d017      	beq.n	1b8a2 <z_init_static_threads+0xa2>
   1b872:	f240 3be7 	movw	fp, #999	; 0x3e7
   1b876:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
   1b87a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1b87e:	fbc9 bc01 	smlal	fp, ip, r9, r1
   1b882:	2300      	movs	r3, #0
   1b884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b888:	4658      	mov	r0, fp
   1b88a:	4661      	mov	r1, ip
   1b88c:	f7f0 fe94 	bl	c5b8 <__aeabi_uldivmod>
   1b890:	2700      	movs	r7, #0
   1b892:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b894:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   1b898:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b89a:	d104      	bne.n	1b8a6 <z_init_static_threads+0xa6>
	z_sched_start(thread);
   1b89c:	4628      	mov	r0, r5
   1b89e:	f7ff fc8f 	bl	1b1c0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b8a2:	3430      	adds	r4, #48	; 0x30
   1b8a4:	e7be      	b.n	1b824 <z_init_static_threads+0x24>
   1b8a6:	4602      	mov	r2, r0
   1b8a8:	463b      	mov	r3, r7
   1b8aa:	4651      	mov	r1, sl
   1b8ac:	f105 0018 	add.w	r0, r5, #24
   1b8b0:	f000 f8d0 	bl	1ba54 <z_add_timeout>
   1b8b4:	e7f5      	b.n	1b8a2 <z_init_static_threads+0xa2>
   1b8b6:	bf00      	nop
   1b8b8:	20020634 	.word	0x20020634
   1b8bc:	20020634 	.word	0x20020634
   1b8c0:	0002048b 	.word	0x0002048b

0001b8c4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1b8c4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1b8c8:	b08a      	sub	sp, #40	; 0x28
   1b8ca:	4604      	mov	r4, r0
   1b8cc:	461d      	mov	r5, r3
   1b8ce:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   1b8d2:	f004 fd47 	bl	20364 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1b8d6:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b8da:	2000      	movs	r0, #0
   1b8dc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   1b8e0:	f04f 0800 	mov.w	r8, #0
   1b8e4:	f04f 0900 	mov.w	r9, #0
   1b8e8:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1b8ec:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b8f0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1b8f4:	4630      	mov	r0, r6
   1b8f6:	4b05      	ldr	r3, [pc, #20]	; (1b90c <k_work_q_start+0x48>)
   1b8f8:	9400      	str	r4, [sp, #0]
   1b8fa:	f7ff ff55 	bl	1b7a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1b8fe:	4630      	mov	r0, r6
   1b900:	4903      	ldr	r1, [pc, #12]	; (1b910 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1b902:	b00a      	add	sp, #40	; 0x28
   1b904:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   1b908:	f004 be77 	b.w	205fa <z_impl_k_thread_name_set>
   1b90c:	0001bdeb 	.word	0x0001bdeb
   1b910:	00021ba6 	.word	0x00021ba6

0001b914 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1b914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b918:	4606      	mov	r6, r0
   1b91a:	460d      	mov	r5, r1
   1b91c:	4690      	mov	r8, r2
   1b91e:	4699      	mov	r9, r3
	__asm__ volatile(
   1b920:	f04f 0320 	mov.w	r3, #32
   1b924:	f3ef 8711 	mrs	r7, BASEPRI
   1b928:	f383 8811 	msr	BASEPRI, r3
   1b92c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1b930:	69cb      	ldr	r3, [r1, #28]
   1b932:	b17b      	cbz	r3, 1b954 <k_delayed_work_submit_to_queue+0x40>
   1b934:	4283      	cmp	r3, r0
   1b936:	d128      	bne.n	1b98a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1b938:	4628      	mov	r0, r5
   1b93a:	f004 fe7c 	bl	20636 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1b93e:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1b942:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1b944:	d008      	beq.n	1b958 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1b946:	2800      	cmp	r0, #0
   1b948:	da07      	bge.n	1b95a <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1b94a:	f387 8811 	msr	BASEPRI, r7
   1b94e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1b952:	e00f      	b.n	1b974 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1b954:	2800      	cmp	r0, #0
   1b956:	d0ef      	beq.n	1b938 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1b958:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b95a:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1b95e:	61ee      	str	r6, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b960:	d10b      	bne.n	1b97a <k_delayed_work_submit_to_queue+0x66>
   1b962:	f387 8811 	msr	BASEPRI, r7
   1b966:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1b96a:	4629      	mov	r1, r5
   1b96c:	4630      	mov	r0, r6
   1b96e:	f004 fe49 	bl	20604 <k_work_submit_to_queue>
		return 0;
   1b972:	2400      	movs	r4, #0
}
   1b974:	4620      	mov	r0, r4
   1b976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1b97a:	4642      	mov	r2, r8
   1b97c:	464b      	mov	r3, r9
   1b97e:	4904      	ldr	r1, [pc, #16]	; (1b990 <k_delayed_work_submit_to_queue+0x7c>)
   1b980:	f105 000c 	add.w	r0, r5, #12
   1b984:	f000 f866 	bl	1ba54 <z_add_timeout>
   1b988:	e7df      	b.n	1b94a <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1b98a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1b98e:	e7dc      	b.n	1b94a <k_delayed_work_submit_to_queue+0x36>
   1b990:	0002062d 	.word	0x0002062d

0001b994 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1b994:	4b03      	ldr	r3, [pc, #12]	; (1b9a4 <elapsed+0x10>)
   1b996:	681b      	ldr	r3, [r3, #0]
   1b998:	b90b      	cbnz	r3, 1b99e <elapsed+0xa>
   1b99a:	f7f2 ba3d 	b.w	de18 <z_clock_elapsed>
}
   1b99e:	2000      	movs	r0, #0
   1b9a0:	4770      	bx	lr
   1b9a2:	bf00      	nop
   1b9a4:	20021c38 	.word	0x20021c38

0001b9a8 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b9a8:	6803      	ldr	r3, [r0, #0]
   1b9aa:	b140      	cbz	r0, 1b9be <remove_timeout+0x16>
   1b9ac:	4a07      	ldr	r2, [pc, #28]	; (1b9cc <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1b9ae:	6852      	ldr	r2, [r2, #4]
   1b9b0:	4290      	cmp	r0, r2
   1b9b2:	d004      	beq.n	1b9be <remove_timeout+0x16>
	if (next(t) != NULL) {
   1b9b4:	b11b      	cbz	r3, 1b9be <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1b9b6:	689a      	ldr	r2, [r3, #8]
   1b9b8:	6881      	ldr	r1, [r0, #8]
   1b9ba:	440a      	add	r2, r1
   1b9bc:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1b9be:	6842      	ldr	r2, [r0, #4]
   1b9c0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b9c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b9c4:	2300      	movs	r3, #0
	node->prev = NULL;
   1b9c6:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b9ca:	4770      	bx	lr
   1b9cc:	200205ac 	.word	0x200205ac

0001b9d0 <next_timeout>:
	return list->head == list;
   1b9d0:	4b0b      	ldr	r3, [pc, #44]	; (1ba00 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1b9d2:	b510      	push	{r4, lr}
   1b9d4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b9d6:	429c      	cmp	r4, r3
   1b9d8:	bf08      	it	eq
   1b9da:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1b9dc:	f7ff ffda 	bl	1b994 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1b9e0:	b154      	cbz	r4, 1b9f8 <next_timeout+0x28>
   1b9e2:	68a3      	ldr	r3, [r4, #8]
   1b9e4:	1a18      	subs	r0, r3, r0
   1b9e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1b9ea:	4b06      	ldr	r3, [pc, #24]	; (1ba04 <next_timeout+0x34>)
   1b9ec:	691b      	ldr	r3, [r3, #16]
   1b9ee:	b113      	cbz	r3, 1b9f6 <next_timeout+0x26>
   1b9f0:	4298      	cmp	r0, r3
   1b9f2:	bfa8      	it	ge
   1b9f4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1b9f6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1b9f8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b9fc:	e7f5      	b.n	1b9ea <next_timeout+0x1a>
   1b9fe:	bf00      	nop
   1ba00:	200205ac 	.word	0x200205ac
   1ba04:	20021b28 	.word	0x20021b28

0001ba08 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
   1ba08:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1ba0a:	6803      	ldr	r3, [r0, #0]
   1ba0c:	b1e3      	cbz	r3, 1ba48 <timeout_rem+0x40>
	return list->head == list;
   1ba0e:	4a10      	ldr	r2, [pc, #64]	; (1ba50 <timeout_rem+0x48>)
   1ba10:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba12:	4293      	cmp	r3, r2
   1ba14:	d015      	beq.n	1ba42 <timeout_rem+0x3a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ba16:	2400      	movs	r4, #0
   1ba18:	2500      	movs	r5, #0
   1ba1a:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1ba1c:	b93b      	cbnz	r3, 1ba2e <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   1ba1e:	f7ff ffb9 	bl	1b994 <elapsed>
   1ba22:	1a24      	subs	r4, r4, r0
   1ba24:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   1ba28:	4620      	mov	r0, r4
   1ba2a:	4629      	mov	r1, r5
   1ba2c:	bd38      	pop	{r3, r4, r5, pc}
		ticks += t->dticks;
   1ba2e:	6899      	ldr	r1, [r3, #8]
   1ba30:	1864      	adds	r4, r4, r1
   1ba32:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		if (timeout == t) {
   1ba36:	4283      	cmp	r3, r0
   1ba38:	d0f1      	beq.n	1ba1e <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   1ba3a:	4293      	cmp	r3, r2
   1ba3c:	d0ef      	beq.n	1ba1e <timeout_rem+0x16>
   1ba3e:	681b      	ldr	r3, [r3, #0]
   1ba40:	e7ec      	b.n	1ba1c <timeout_rem+0x14>
   1ba42:	2400      	movs	r4, #0
   1ba44:	2500      	movs	r5, #0
   1ba46:	e7ea      	b.n	1ba1e <timeout_rem+0x16>
		return 0;
   1ba48:	2400      	movs	r4, #0
   1ba4a:	2500      	movs	r5, #0
   1ba4c:	e7ec      	b.n	1ba28 <timeout_rem+0x20>
   1ba4e:	bf00      	nop
   1ba50:	200205ac 	.word	0x200205ac

0001ba54 <z_add_timeout>:
{
   1ba54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba58:	9101      	str	r1, [sp, #4]
   1ba5a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba5c:	1c4b      	adds	r3, r1, #1
   1ba5e:	bf08      	it	eq
   1ba60:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1ba64:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba66:	d061      	beq.n	1bb2c <z_add_timeout+0xd8>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1ba68:	f06f 0301 	mvn.w	r3, #1
   1ba6c:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1ba70:	1c54      	adds	r4, r2, #1
   1ba72:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1ba76:	ebb3 0804 	subs.w	r8, r3, r4
   1ba7a:	eb6b 0905 	sbc.w	r9, fp, r5
   1ba7e:	f1b8 0f00 	cmp.w	r8, #0
   1ba82:	f179 0300 	sbcs.w	r3, r9, #0
   1ba86:	db0f      	blt.n	1baa8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1ba88:	f7ff ff84 	bl	1b994 <elapsed>
   1ba8c:	f06f 0301 	mvn.w	r3, #1
   1ba90:	4a2b      	ldr	r2, [pc, #172]	; (1bb40 <z_add_timeout+0xec>)
   1ba92:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1ba96:	1a5b      	subs	r3, r3, r1
   1ba98:	eb6b 020c 	sbc.w	r2, fp, ip
   1ba9c:	1b1e      	subs	r6, r3, r4
   1ba9e:	eb62 0705 	sbc.w	r7, r2, r5
   1baa2:	1a34      	subs	r4, r6, r0
   1baa4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	to->fn = fn;
   1baa8:	9b01      	ldr	r3, [sp, #4]
   1baaa:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
   1baae:	f04f 0320 	mov.w	r3, #32
   1bab2:	f3ef 8611 	mrs	r6, BASEPRI
   1bab6:	f383 8811 	msr	BASEPRI, r3
   1baba:	f3bf 8f6f 	isb	sy
		to->dticks = ticks + elapsed();
   1babe:	f7ff ff69 	bl	1b994 <elapsed>
	ticks = MAX(1, ticks);
   1bac2:	2c01      	cmp	r4, #1
   1bac4:	f175 0300 	sbcs.w	r3, r5, #0
   1bac8:	bfb8      	it	lt
   1baca:	2401      	movlt	r4, #1
	return list->head == list;
   1bacc:	4b1d      	ldr	r3, [pc, #116]	; (1bb44 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
   1bace:	4420      	add	r0, r4
   1bad0:	681a      	ldr	r2, [r3, #0]
   1bad2:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bad6:	429a      	cmp	r2, r3
   1bad8:	d001      	beq.n	1bade <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bada:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1badc:	b952      	cbnz	r2, 1baf4 <z_add_timeout+0xa0>
	node->prev = list->tail;
   1bade:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1bae0:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   1bae4:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1bae8:	685a      	ldr	r2, [r3, #4]
   1baea:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1baee:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1baf2:	e00d      	b.n	1bb10 <z_add_timeout+0xbc>
			if (t->dticks > to->dticks) {
   1baf4:	6890      	ldr	r0, [r2, #8]
   1baf6:	f8da 1008 	ldr.w	r1, [sl, #8]
   1bafa:	4288      	cmp	r0, r1
   1bafc:	dd19      	ble.n	1bb32 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
   1bafe:	1a41      	subs	r1, r0, r1
   1bb00:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1bb02:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bb04:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1bb08:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1bb0c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1bb10:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb12:	429a      	cmp	r2, r3
   1bb14:	d006      	beq.n	1bb24 <z_add_timeout+0xd0>
		if (to == first()) {
   1bb16:	4592      	cmp	sl, r2
   1bb18:	d104      	bne.n	1bb24 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
   1bb1a:	f7ff ff59 	bl	1b9d0 <next_timeout>
   1bb1e:	2100      	movs	r1, #0
   1bb20:	f7f2 f916 	bl	dd50 <z_clock_set_timeout>
	__asm__ volatile(
   1bb24:	f386 8811 	msr	BASEPRI, r6
   1bb28:	f3bf 8f6f 	isb	sy
}
   1bb2c:	b003      	add	sp, #12
   1bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1bb32:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1bb34:	4294      	cmp	r4, r2
   1bb36:	f8ca 1008 	str.w	r1, [sl, #8]
   1bb3a:	d0d0      	beq.n	1bade <z_add_timeout+0x8a>
   1bb3c:	6812      	ldr	r2, [r2, #0]
   1bb3e:	e7cd      	b.n	1badc <z_add_timeout+0x88>
   1bb40:	20020790 	.word	0x20020790
   1bb44:	200205ac 	.word	0x200205ac

0001bb48 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bb4c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bb4e:	f7ff fb97 	bl	1b280 <z_time_slice>
	__asm__ volatile(
   1bb52:	f04f 0320 	mov.w	r3, #32
   1bb56:	f3ef 8411 	mrs	r4, BASEPRI
   1bb5a:	f383 8811 	msr	BASEPRI, r3
   1bb5e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bb62:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1bbe8 <z_clock_announce+0xa0>
   1bb66:	4d1f      	ldr	r5, [pc, #124]	; (1bbe4 <z_clock_announce+0x9c>)
   1bb68:	46c1      	mov	r9, r8
	return list->head == list;
   1bb6a:	f8df a080 	ldr.w	sl, [pc, #128]	; 1bbec <z_clock_announce+0xa4>
   1bb6e:	602e      	str	r6, [r5, #0]
   1bb70:	f8da 0000 	ldr.w	r0, [sl]
   1bb74:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb76:	4550      	cmp	r0, sl
   1bb78:	e9d8 6700 	ldrd	r6, r7, [r8]
   1bb7c:	d005      	beq.n	1bb8a <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bb7e:	b120      	cbz	r0, 1bb8a <z_clock_announce+0x42>
   1bb80:	6883      	ldr	r3, [r0, #8]
   1bb82:	4293      	cmp	r3, r2
   1bb84:	dd13      	ble.n	1bbae <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bb86:	1a9b      	subs	r3, r3, r2
   1bb88:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   1bb8a:	18b6      	adds	r6, r6, r2
   1bb8c:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   1bb90:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   1bb94:	2600      	movs	r6, #0
   1bb96:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1bb98:	f7ff ff1a 	bl	1b9d0 <next_timeout>
   1bb9c:	4631      	mov	r1, r6
   1bb9e:	f7f2 f8d7 	bl	dd50 <z_clock_set_timeout>
	__asm__ volatile(
   1bba2:	f384 8811 	msr	BASEPRI, r4
   1bba6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   1bbae:	18f6      	adds	r6, r6, r3
   1bbb0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   1bbb4:	1ad3      	subs	r3, r2, r3
   1bbb6:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   1bbb8:	2300      	movs	r3, #0
   1bbba:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   1bbbc:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   1bbc0:	f7ff fef2 	bl	1b9a8 <remove_timeout>
   1bbc4:	f384 8811 	msr	BASEPRI, r4
   1bbc8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bbcc:	68c3      	ldr	r3, [r0, #12]
   1bbce:	4798      	blx	r3
	__asm__ volatile(
   1bbd0:	f04f 0320 	mov.w	r3, #32
   1bbd4:	f3ef 8411 	mrs	r4, BASEPRI
   1bbd8:	f383 8811 	msr	BASEPRI, r3
   1bbdc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bbe0:	e7c6      	b.n	1bb70 <z_clock_announce+0x28>
   1bbe2:	bf00      	nop
   1bbe4:	20021c38 	.word	0x20021c38
   1bbe8:	20020790 	.word	0x20020790
   1bbec:	200205ac 	.word	0x200205ac

0001bbf0 <z_tick_get>:

s64_t z_tick_get(void)
{
   1bbf0:	b510      	push	{r4, lr}
   1bbf2:	f04f 0320 	mov.w	r3, #32
   1bbf6:	f3ef 8411 	mrs	r4, BASEPRI
   1bbfa:	f383 8811 	msr	BASEPRI, r3
   1bbfe:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1bc02:	f7f2 f909 	bl	de18 <z_clock_elapsed>
   1bc06:	4b06      	ldr	r3, [pc, #24]	; (1bc20 <z_tick_get+0x30>)
   1bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bc0c:	1812      	adds	r2, r2, r0
   1bc0e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1bc12:	f384 8811 	msr	BASEPRI, r4
   1bc16:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bc1a:	4610      	mov	r0, r2
   1bc1c:	4619      	mov	r1, r3
   1bc1e:	bd10      	pop	{r4, pc}
   1bc20:	20020790 	.word	0x20020790

0001bc24 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bc26:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   1bc2a:	1c56      	adds	r6, r2, #1
   1bc2c:	f143 0700 	adc.w	r7, r3, #0
   1bc30:	2f00      	cmp	r7, #0
   1bc32:	bf08      	it	eq
   1bc34:	2e02      	cmpeq	r6, #2
{
   1bc36:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bc38:	d302      	bcc.n	1bc40 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bc3a:	490c      	ldr	r1, [pc, #48]	; (1bc6c <z_timer_expiration_handler+0x48>)
   1bc3c:	f7ff ff0a 	bl	1ba54 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bc40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bc42:	3301      	adds	r3, #1
   1bc44:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bc46:	69a3      	ldr	r3, [r4, #24]
   1bc48:	b10b      	cbz	r3, 1bc4e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1bc4a:	4620      	mov	r0, r4
   1bc4c:	4798      	blx	r3
	return list->head == list;
   1bc4e:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc52:	42a5      	cmp	r5, r4
   1bc54:	d008      	beq.n	1bc68 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1bc56:	b13d      	cbz	r5, 1bc68 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1bc58:	4628      	mov	r0, r5
   1bc5a:	f004 fba9 	bl	203b0 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1bc5e:	4628      	mov	r0, r5
   1bc60:	f004 fc03 	bl	2046a <z_ready_thread>
   1bc64:	2300      	movs	r3, #0
   1bc66:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
   1bc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc6a:	bf00      	nop
   1bc6c:	0001bc25 	.word	0x0001bc25

0001bc70 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1bc70:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
   1bc74:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1bc78:	ea54 0105 	orrs.w	r1, r4, r5
{
   1bc7c:	4680      	mov	r8, r0
   1bc7e:	4616      	mov	r6, r2
   1bc80:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1bc82:	d016      	beq.n	1bcb2 <z_impl_k_timer_start+0x42>
   1bc84:	f06f 0101 	mvn.w	r1, #1
   1bc88:	ebb1 0a04 	subs.w	sl, r1, r4
   1bc8c:	f04f 31ff 	mov.w	r1, #4294967295
   1bc90:	eb61 0b05 	sbc.w	fp, r1, r5
   1bc94:	f1ba 0f00 	cmp.w	sl, #0
   1bc98:	f17b 0100 	sbcs.w	r1, fp, #0
   1bc9c:	da09      	bge.n	1bcb2 <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
   1bc9e:	f114 34ff 	adds.w	r4, r4, #4294967295
   1bca2:	f145 35ff 	adc.w	r5, r5, #4294967295
   1bca6:	2c01      	cmp	r4, #1
   1bca8:	f175 0100 	sbcs.w	r1, r5, #0
   1bcac:	bfbc      	itt	lt
   1bcae:	2401      	movlt	r4, #1
   1bcb0:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1bcb2:	f06f 0101 	mvn.w	r1, #1
   1bcb6:	1a89      	subs	r1, r1, r2
   1bcb8:	9100      	str	r1, [sp, #0]
   1bcba:	f04f 31ff 	mov.w	r1, #4294967295
   1bcbe:	eb61 0103 	sbc.w	r1, r1, r3
   1bcc2:	9101      	str	r1, [sp, #4]
   1bcc4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bcc8:	2800      	cmp	r0, #0
   1bcca:	f171 0100 	sbcs.w	r1, r1, #0
   1bcce:	da09      	bge.n	1bce4 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1bcd0:	f112 36ff 	adds.w	r6, r2, #4294967295
   1bcd4:	f143 37ff 	adc.w	r7, r3, #4294967295
   1bcd8:	2e00      	cmp	r6, #0
   1bcda:	f177 0300 	sbcs.w	r3, r7, #0
   1bcde:	bfbc      	itt	lt
   1bce0:	2600      	movlt	r6, #0
   1bce2:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1bce4:	4640      	mov	r0, r8
   1bce6:	f004 fd06 	bl	206f6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1bcea:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bcec:	4632      	mov	r2, r6
	timer->status = 0U;
   1bcee:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bcf2:	4640      	mov	r0, r8
   1bcf4:	463b      	mov	r3, r7
   1bcf6:	4904      	ldr	r1, [pc, #16]	; (1bd08 <z_impl_k_timer_start+0x98>)
	timer->period = period;
   1bcf8:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
   1bcfc:	b002      	add	sp, #8
   1bcfe:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bd02:	f7ff bea7 	b.w	1ba54 <z_add_timeout>
   1bd06:	bf00      	nop
   1bd08:	0001bc25 	.word	0x0001bc25

0001bd0c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1bd0c:	b538      	push	{r3, r4, r5, lr}
   1bd0e:	4603      	mov	r3, r0
	__asm__ volatile(
   1bd10:	f04f 0220 	mov.w	r2, #32
   1bd14:	f3ef 8511 	mrs	r5, BASEPRI
   1bd18:	f382 8811 	msr	BASEPRI, r2
   1bd1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1bd20:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1bd22:	2101      	movs	r1, #1
   1bd24:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1bd26:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1bd28:	4283      	cmp	r3, r0
   1bd2a:	d106      	bne.n	1bd3a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1bd2c:	f385 8811 	msr	BASEPRI, r5
   1bd30:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1bd34:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1bd36:	4620      	mov	r0, r4
   1bd38:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1bd3a:	e9d0 3200 	ldrd	r3, r2, [r0]
   1bd3e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bd40:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bd42:	2300      	movs	r3, #0
	node->prev = NULL;
   1bd44:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bd48:	f004 fd83 	bl	20852 <signal_poll_event>
	z_reschedule(&lock, key);
   1bd4c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bd4e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1bd50:	4801      	ldr	r0, [pc, #4]	; (1bd58 <z_impl_k_poll_signal_raise+0x4c>)
   1bd52:	f004 fb46 	bl	203e2 <z_reschedule>
	return rc;
   1bd56:	e7ee      	b.n	1bd36 <z_impl_k_poll_signal_raise+0x2a>
   1bd58:	20021d79 	.word	0x20021d79

0001bd5c <arch_printk_char_out>:
}
   1bd5c:	2000      	movs	r0, #0
   1bd5e:	4770      	bx	lr

0001bd60 <print_err>:
{
   1bd60:	b570      	push	{r4, r5, r6, lr}
   1bd62:	460d      	mov	r5, r1
   1bd64:	4604      	mov	r4, r0
	out('E', ctx);
   1bd66:	2045      	movs	r0, #69	; 0x45
   1bd68:	47a0      	blx	r4
	out('R', ctx);
   1bd6a:	4629      	mov	r1, r5
   1bd6c:	2052      	movs	r0, #82	; 0x52
   1bd6e:	47a0      	blx	r4
	out('R', ctx);
   1bd70:	4629      	mov	r1, r5
   1bd72:	4623      	mov	r3, r4
}
   1bd74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1bd78:	2052      	movs	r0, #82	; 0x52
   1bd7a:	4718      	bx	r3

0001bd7c <str_out>:
{
   1bd7c:	b530      	push	{r4, r5, lr}
   1bd7e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1bd80:	680c      	ldr	r4, [r1, #0]
   1bd82:	1c55      	adds	r5, r2, #1
   1bd84:	b114      	cbz	r4, 1bd8c <str_out+0x10>
   1bd86:	684b      	ldr	r3, [r1, #4]
   1bd88:	4293      	cmp	r3, r2
   1bd8a:	dc01      	bgt.n	1bd90 <str_out+0x14>
		ctx->count++;
   1bd8c:	608d      	str	r5, [r1, #8]
}
   1bd8e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1bd90:	3b01      	subs	r3, #1
   1bd92:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1bd94:	bf08      	it	eq
   1bd96:	2200      	moveq	r2, #0
   1bd98:	608d      	str	r5, [r1, #8]
   1bd9a:	bf0c      	ite	eq
   1bd9c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1bd9e:	54a0      	strbne	r0, [r4, r2]
   1bda0:	e7f5      	b.n	1bd8e <str_out+0x12>

0001bda2 <printk>:
{
   1bda2:	b40f      	push	{r0, r1, r2, r3}
   1bda4:	b507      	push	{r0, r1, r2, lr}
   1bda6:	a904      	add	r1, sp, #16
   1bda8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1bdac:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1bdae:	f7f1 f929 	bl	d004 <vprintk>
}
   1bdb2:	b003      	add	sp, #12
   1bdb4:	f85d eb04 	ldr.w	lr, [sp], #4
   1bdb8:	b004      	add	sp, #16
   1bdba:	4770      	bx	lr

0001bdbc <snprintk>:
{
   1bdbc:	b40c      	push	{r2, r3}
   1bdbe:	b507      	push	{r0, r1, r2, lr}
   1bdc0:	ab04      	add	r3, sp, #16
   1bdc2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1bdc6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1bdc8:	f7f1 f92a 	bl	d020 <vsnprintk>
}
   1bdcc:	b003      	add	sp, #12
   1bdce:	f85d eb04 	ldr.w	lr, [sp], #4
   1bdd2:	b002      	add	sp, #8
   1bdd4:	4770      	bx	lr

0001bdd6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1bdd6:	4604      	mov	r4, r0
   1bdd8:	b508      	push	{r3, lr}
   1bdda:	4608      	mov	r0, r1
   1bddc:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1bdde:	461a      	mov	r2, r3
   1bde0:	47a0      	blx	r4
	return z_impl_k_current_get();
   1bde2:	f7ff fc4d 	bl	1b680 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1bde6:	f7f2 fc7b 	bl	e6e0 <z_impl_k_thread_abort>

0001bdea <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1bdea:	b510      	push	{r4, lr}
   1bdec:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1bdee:	f04f 33ff 	mov.w	r3, #4294967295
   1bdf2:	f04f 32ff 	mov.w	r2, #4294967295
   1bdf6:	4620      	mov	r0, r4
   1bdf8:	f7ff f8d2 	bl	1afa0 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1bdfc:	4603      	mov	r3, r0
   1bdfe:	2800      	cmp	r0, #0
   1be00:	d0f5      	beq.n	1bdee <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1be02:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1be04:	3308      	adds	r3, #8
   1be06:	e8d3 1fef 	ldaex	r1, [r3]
   1be0a:	f021 0c01 	bic.w	ip, r1, #1
   1be0e:	e8c3 cfee 	stlex	lr, ip, [r3]
   1be12:	f1be 0f00 	cmp.w	lr, #0
   1be16:	d1f6      	bne.n	1be06 <z_work_q_main+0x1c>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1be18:	07cb      	lsls	r3, r1, #31
   1be1a:	d500      	bpl.n	1be1e <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1be1c:	4790      	blx	r2
	z_impl_k_yield();
   1be1e:	f7ff fbc3 	bl	1b5a8 <z_impl_k_yield>
   1be22:	e7e4      	b.n	1bdee <z_work_q_main+0x4>

0001be24 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   1be24:	6803      	ldr	r3, [r0, #0]
   1be26:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   1be2a:	6883      	ldr	r3, [r0, #8]
   1be2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   1be30:	bf2c      	ite	cs
   1be32:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   1be36:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1be3a:	4770      	bx	lr

0001be3c <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   1be3c:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   1be3e:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   1be40:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   1be42:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   1be46:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   1be4a:	bf2c      	ite	cs
   1be4c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   1be50:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1be54:	bd10      	pop	{r4, pc}

0001be56 <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   1be56:	b538      	push	{r3, r4, r5, lr}
   1be58:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1be5a:	2200      	movs	r2, #0
{
   1be5c:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1be5e:	f7ff ffe1 	bl	1be24 <chunk_field>
   1be62:	68eb      	ldr	r3, [r5, #12]
   1be64:	4018      	ands	r0, r3
	return c + size(h, c);
}
   1be66:	4420      	add	r0, r4
   1be68:	bd38      	pop	{r3, r4, r5, pc}

0001be6a <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   1be6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1be6e:	460d      	mov	r5, r1
	struct z_heap_bucket *b = &h->buckets[bidx];
   1be70:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1be74:	4611      	mov	r1, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   1be76:	eb08 02c5 	add.w	r2, r8, r5, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   1be7a:	6853      	ldr	r3, [r2, #4]
{
   1be7c:	4604      	mov	r4, r0
	b->list_size--;
   1be7e:	3b01      	subs	r3, #1
   1be80:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   1be82:	b95b      	cbnz	r3, 1be9c <free_list_remove+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1be84:	2201      	movs	r2, #1
   1be86:	fa02 f105 	lsl.w	r1, r2, r5
   1be8a:	6942      	ldr	r2, [r0, #20]
   1be8c:	ea22 0201 	bic.w	r2, r2, r1
   1be90:	6142      	str	r2, [r0, #20]
		b->next = 0;
   1be92:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   1be96:	b002      	add	sp, #8
   1be98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1be9c:	2202      	movs	r2, #2
   1be9e:	9101      	str	r1, [sp, #4]
   1bea0:	f7ff ffc0 	bl	1be24 <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   1bea4:	9901      	ldr	r1, [sp, #4]
	return chunk_field(h, c, FREE_PREV);
   1bea6:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
   1bea8:	2203      	movs	r2, #3
   1beaa:	4620      	mov	r0, r4
   1beac:	f7ff ffba 	bl	1be24 <chunk_field>
   1beb0:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
   1beb2:	4603      	mov	r3, r0
   1beb4:	4639      	mov	r1, r7
		b->next = second;
   1beb6:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   1beba:	2203      	movs	r2, #3
   1bebc:	4620      	mov	r0, r4
   1bebe:	f7ff ffbd 	bl	1be3c <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   1bec2:	463b      	mov	r3, r7
   1bec4:	2202      	movs	r2, #2
   1bec6:	4631      	mov	r1, r6
   1bec8:	4620      	mov	r0, r4
}
   1beca:	b002      	add	sp, #8
   1becc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   1bed0:	f7ff bfb4 	b.w	1be3c <chunk_set>

0001bed4 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1bed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bed8:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1beda:	2200      	movs	r2, #0
   1bedc:	460d      	mov	r5, r1
   1bede:	f7ff ffa1 	bl	1be24 <chunk_field>
   1bee2:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1bee4:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1bee6:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1bee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1beec:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1bef0:	bf34      	ite	cc
   1bef2:	2000      	movcc	r0, #0
   1bef4:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   1bef6:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1bef8:	f1c0 001f 	rsb	r0, r0, #31
   1befc:	1a80      	subs	r0, r0, r2
   1befe:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1bf02:	684a      	ldr	r2, [r1, #4]
   1bf04:	1c56      	adds	r6, r2, #1
   1bf06:	604e      	str	r6, [r1, #4]
   1bf08:	b9a2      	cbnz	r2, 1bf34 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   1bf0a:	2201      	movs	r2, #1
   1bf0c:	fa02 f100 	lsl.w	r1, r2, r0
   1bf10:	6962      	ldr	r2, [r4, #20]
   1bf12:	430a      	orrs	r2, r1
   1bf14:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   1bf16:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   1bf18:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   1bf1c:	2202      	movs	r2, #2
   1bf1e:	462b      	mov	r3, r5
   1bf20:	4620      	mov	r0, r4
   1bf22:	f7ff ff8b 	bl	1be3c <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   1bf26:	2203      	movs	r2, #3
   1bf28:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   1bf2a:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   1bf2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   1bf30:	f7ff bf84 	b.w	1be3c <chunk_set>
		chunkid_t second = h->buckets[b].next;
   1bf34:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   1bf38:	2202      	movs	r2, #2
   1bf3a:	4639      	mov	r1, r7
   1bf3c:	4620      	mov	r0, r4
   1bf3e:	f7ff ff71 	bl	1be24 <chunk_field>
   1bf42:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   1bf44:	4603      	mov	r3, r0
   1bf46:	2202      	movs	r2, #2
   1bf48:	4629      	mov	r1, r5
   1bf4a:	4620      	mov	r0, r4
   1bf4c:	f7ff ff76 	bl	1be3c <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   1bf50:	463b      	mov	r3, r7
   1bf52:	2203      	movs	r2, #3
   1bf54:	4629      	mov	r1, r5
   1bf56:	4620      	mov	r0, r4
   1bf58:	f7ff ff70 	bl	1be3c <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   1bf5c:	2203      	movs	r2, #3
   1bf5e:	4631      	mov	r1, r6
   1bf60:	462b      	mov	r3, r5
   1bf62:	4620      	mov	r0, r4
   1bf64:	f7ff ff6a 	bl	1be3c <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   1bf68:	2202      	movs	r2, #2
   1bf6a:	4639      	mov	r1, r7
   1bf6c:	e7dd      	b.n	1bf2a <free_list_add+0x56>

0001bf6e <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   1bf6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bf72:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   1bf74:	6843      	ldr	r3, [r0, #4]
{
   1bf76:	4617      	mov	r7, r2
	chunkid_t c = h->buckets[bidx].next;
   1bf78:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   1bf7c:	462a      	mov	r2, r5
   1bf7e:	f7ff ff74 	bl	1be6a <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1bf82:	2200      	movs	r2, #0
   1bf84:	4629      	mov	r1, r5
   1bf86:	4620      	mov	r0, r4
   1bf88:	f7ff ff4c 	bl	1be24 <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   1bf8c:	68a3      	ldr	r3, [r4, #8]
   1bf8e:	68e6      	ldr	r6, [r4, #12]
   1bf90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bf94:	bf2c      	ite	cs
   1bf96:	2302      	movcs	r3, #2
   1bf98:	2301      	movcc	r3, #1
   1bf9a:	4030      	ands	r0, r6
	size_t rem = size(h, c) - sz;
   1bf9c:	1bc6      	subs	r6, r0, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
   1bf9e:	42b3      	cmp	r3, r6
   1bfa0:	d82d      	bhi.n	1bffe <split_alloc+0x90>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   1bfa2:	4629      	mov	r1, r5
   1bfa4:	4620      	mov	r0, r4
   1bfa6:	f7ff ff56 	bl	1be56 <right_chunk>
		chunkid_t c2 = c + sz;
   1bfaa:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
   1bfae:	463b      	mov	r3, r7
   1bfb0:	2200      	movs	r2, #0
   1bfb2:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   1bfb4:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   1bfb6:	4620      	mov	r0, r4
   1bfb8:	f7ff ff40 	bl	1be3c <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   1bfbc:	4633      	mov	r3, r6
   1bfbe:	2200      	movs	r2, #0
   1bfc0:	4641      	mov	r1, r8
   1bfc2:	4620      	mov	r0, r4
   1bfc4:	f7ff ff3a 	bl	1be3c <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   1bfc8:	463b      	mov	r3, r7
   1bfca:	2201      	movs	r2, #1
   1bfcc:	4641      	mov	r1, r8
   1bfce:	4620      	mov	r0, r4
   1bfd0:	f7ff ff34 	bl	1be3c <chunk_set>
   1bfd4:	2200      	movs	r2, #0
   1bfd6:	4641      	mov	r1, r8
   1bfd8:	4620      	mov	r0, r4
   1bfda:	f7ff ff23 	bl	1be24 <chunk_field>
   1bfde:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
   1bfe0:	68a2      	ldr	r2, [r4, #8]
   1bfe2:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
   1bfe4:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
   1bfe6:	4293      	cmp	r3, r2
   1bfe8:	d005      	beq.n	1bff6 <split_alloc+0x88>
			chunk_set(h, c3, LEFT_SIZE, rem);
   1bfea:	4633      	mov	r3, r6
   1bfec:	2201      	movs	r2, #1
   1bfee:	4649      	mov	r1, r9
   1bff0:	4620      	mov	r0, r4
   1bff2:	f7ff ff23 	bl	1be3c <chunk_set>
		}
		free_list_add(h, c2);
   1bff6:	4641      	mov	r1, r8
   1bff8:	4620      	mov	r0, r4
   1bffa:	f7ff ff6b 	bl	1bed4 <free_list_add>
   1bffe:	4629      	mov	r1, r5
   1c000:	2200      	movs	r2, #0
   1c002:	4620      	mov	r0, r4
   1c004:	f7ff ff0e 	bl	1be24 <chunk_field>
   1c008:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   1c00a:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c00c:	4010      	ands	r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   1c00e:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   1c010:	ea40 0302 	orr.w	r3, r0, r2
   1c014:	4620      	mov	r0, r4
   1c016:	2200      	movs	r2, #0
   1c018:	f7ff ff10 	bl	1be3c <chunk_set>
	return big_heap(h) ? 8 : 4;
   1c01c:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   1c01e:	6820      	ldr	r0, [r4, #0]
   1c020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c024:	bf2c      	ite	cs
   1c026:	2308      	movcs	r3, #8
   1c028:	2304      	movcc	r3, #4
   1c02a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   1c02e:	4428      	add	r0, r5
   1c030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c034 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   1c034:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   1c038:	2900      	cmp	r1, #0
   1c03a:	f000 80ae 	beq.w	1c19a <sys_heap_free+0x166>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   1c03e:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c040:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   1c042:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c044:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   1c046:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1c04a:	bf2c      	ite	cs
   1c04c:	2508      	movcs	r5, #8
   1c04e:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   1c050:	1b49      	subs	r1, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   1c052:	6825      	ldr	r5, [r4, #0]
   1c054:	1b4d      	subs	r5, r1, r5
   1c056:	bf48      	it	mi
   1c058:	3507      	addmi	r5, #7
   1c05a:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c05c:	4629      	mov	r1, r5
   1c05e:	f7ff fee1 	bl	1be24 <chunk_field>
   1c062:	68e6      	ldr	r6, [r4, #12]
   1c064:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   1c068:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   1c06c:	42bb      	cmp	r3, r7
   1c06e:	d036      	beq.n	1c0de <sys_heap_free+0xaa>
   1c070:	4629      	mov	r1, r5
   1c072:	4620      	mov	r0, r4
   1c074:	f7ff feef 	bl	1be56 <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   1c078:	2200      	movs	r2, #0
   1c07a:	4601      	mov	r1, r0
   1c07c:	4682      	mov	sl, r0
   1c07e:	4620      	mov	r0, r4
   1c080:	f7ff fed0 	bl	1be24 <chunk_field>
   1c084:	ea30 0906 	bics.w	r9, r0, r6
   1c088:	d129      	bne.n	1c0de <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1c08a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1c08e:	bf34      	ite	cc
   1c090:	2700      	movcc	r7, #0
   1c092:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c094:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   1c096:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1c098:	fab6 f686 	clz	r6, r6
   1c09c:	f1c7 071f 	rsb	r7, r7, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   1c0a0:	4652      	mov	r2, sl
   1c0a2:	4620      	mov	r0, r4
   1c0a4:	1bb9      	subs	r1, r7, r6
   1c0a6:	f7ff fee0 	bl	1be6a <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   1c0aa:	4643      	mov	r3, r8
   1c0ac:	464a      	mov	r2, r9
   1c0ae:	4629      	mov	r1, r5
   1c0b0:	4620      	mov	r0, r4
   1c0b2:	f7ff fec3 	bl	1be3c <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c0b6:	4629      	mov	r1, r5
   1c0b8:	4620      	mov	r0, r4
   1c0ba:	f7ff feb3 	bl	1be24 <chunk_field>
   1c0be:	68e3      	ldr	r3, [r4, #12]
   1c0c0:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   1c0c2:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   1c0c4:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   1c0c6:	4283      	cmp	r3, r0
   1c0c8:	d009      	beq.n	1c0de <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   1c0ca:	4629      	mov	r1, r5
   1c0cc:	4620      	mov	r0, r4
   1c0ce:	f7ff fec2 	bl	1be56 <right_chunk>
   1c0d2:	4643      	mov	r3, r8
   1c0d4:	4601      	mov	r1, r0
   1c0d6:	2201      	movs	r2, #1
   1c0d8:	4620      	mov	r0, r4
   1c0da:	f7ff feaf 	bl	1be3c <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   1c0de:	6923      	ldr	r3, [r4, #16]
   1c0e0:	42ab      	cmp	r3, r5
   1c0e2:	d047      	beq.n	1c174 <sys_heap_free+0x140>
	return chunk_field(h, c, LEFT_SIZE);
   1c0e4:	2201      	movs	r2, #1
   1c0e6:	4629      	mov	r1, r5
   1c0e8:	4620      	mov	r0, r4
   1c0ea:	f7ff fe9b 	bl	1be24 <chunk_field>
	return c - left_size(h, c);
   1c0ee:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   1c0f0:	2200      	movs	r2, #0
   1c0f2:	4639      	mov	r1, r7
   1c0f4:	4620      	mov	r0, r4
   1c0f6:	f7ff fe95 	bl	1be24 <chunk_field>
   1c0fa:	f8d4 800c 	ldr.w	r8, [r4, #12]
   1c0fe:	4606      	mov	r6, r0
   1c100:	ea30 0908 	bics.w	r9, r0, r8
   1c104:	d136      	bne.n	1c174 <sys_heap_free+0x140>
   1c106:	464a      	mov	r2, r9
   1c108:	4629      	mov	r1, r5
   1c10a:	4620      	mov	r0, r4
   1c10c:	f7ff fe8a 	bl	1be24 <chunk_field>
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   1c110:	4629      	mov	r1, r5
   1c112:	4682      	mov	sl, r0
   1c114:	4620      	mov	r0, r4
   1c116:	f7ff fe9e 	bl	1be56 <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1c11a:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c11c:	ea06 0608 	and.w	r6, r6, r8
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1c120:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1c124:	bf34      	ite	cc
   1c126:	2100      	movcc	r1, #0
   1c128:	2101      	movcs	r1, #1
   1c12a:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c12c:	ea08 000a 	and.w	r0, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   1c130:	1983      	adds	r3, r0, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1c132:	fab6 f686 	clz	r6, r6
   1c136:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   1c13a:	463a      	mov	r2, r7
   1c13c:	4620      	mov	r0, r4
   1c13e:	1b89      	subs	r1, r1, r6
		size_t merged_sz = csz + size(h, lc);
   1c140:	9301      	str	r3, [sp, #4]
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   1c142:	f7ff fe92 	bl	1be6a <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   1c146:	464a      	mov	r2, r9
   1c148:	4639      	mov	r1, r7
   1c14a:	4620      	mov	r0, r4
   1c14c:	9b01      	ldr	r3, [sp, #4]
   1c14e:	f7ff fe75 	bl	1be3c <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c152:	4639      	mov	r1, r7
   1c154:	4620      	mov	r0, r4
   1c156:	f7ff fe65 	bl	1be24 <chunk_field>
   1c15a:	68e2      	ldr	r2, [r4, #12]
   1c15c:	4010      	ands	r0, r2
		if (!last_chunk(h, lc)) {
   1c15e:	68a2      	ldr	r2, [r4, #8]
	return (c + size(h, c)) == h->len;
   1c160:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
   1c162:	4290      	cmp	r0, r2
   1c164:	d005      	beq.n	1c172 <sys_heap_free+0x13e>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   1c166:	2201      	movs	r2, #1
   1c168:	4629      	mov	r1, r5
   1c16a:	4620      	mov	r0, r4
   1c16c:	9b01      	ldr	r3, [sp, #4]
   1c16e:	f7ff fe65 	bl	1be3c <chunk_set>
		}

		c = lc;
   1c172:	463d      	mov	r5, r7
   1c174:	4629      	mov	r1, r5
   1c176:	2200      	movs	r2, #0
   1c178:	4620      	mov	r0, r4
   1c17a:	f7ff fe53 	bl	1be24 <chunk_field>
   1c17e:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   1c180:	4629      	mov	r1, r5
   1c182:	4003      	ands	r3, r0
   1c184:	2200      	movs	r2, #0
   1c186:	4620      	mov	r0, r4
   1c188:	f7ff fe58 	bl	1be3c <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   1c18c:	4629      	mov	r1, r5
   1c18e:	4620      	mov	r0, r4
}
   1c190:	b002      	add	sp, #8
   1c192:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   1c196:	f7ff be9d 	b.w	1bed4 <free_list_add>
}
   1c19a:	b002      	add	sp, #8
   1c19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c1a0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1c1a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   1c1a4:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1c1a6:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   1c1a8:	68a2      	ldr	r2, [r4, #8]
   1c1aa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1c1ae:	bf2c      	ite	cs
   1c1b0:	2308      	movcs	r3, #8
   1c1b2:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1c1b4:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1c1b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1c1ba:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1c1be:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1c1c2:	bf34      	ite	cc
   1c1c4:	2300      	movcc	r3, #0
   1c1c6:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1c1c8:	441e      	add	r6, r3
   1c1ca:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   1c1ce:	2900      	cmp	r1, #0
   1c1d0:	d03b      	beq.n	1c24a <sys_heap_alloc+0xaa>
   1c1d2:	fab2 f282 	clz	r2, r2
   1c1d6:	f1c3 031f 	rsb	r3, r3, #31
   1c1da:	1a9b      	subs	r3, r3, r2
   1c1dc:	4598      	cmp	r8, r3
   1c1de:	dc34      	bgt.n	1c24a <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   1c1e0:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   1c1e2:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   1c1e6:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   1c1ea:	687b      	ldr	r3, [r7, #4]
   1c1ec:	2b03      	cmp	r3, #3
   1c1ee:	bf28      	it	cs
   1c1f0:	2303      	movcs	r3, #3
   1c1f2:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   1c1f4:	45ca      	cmp	sl, r9
   1c1f6:	db0d      	blt.n	1c214 <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1c1f8:	f04f 31ff 	mov.w	r1, #4294967295
   1c1fc:	6963      	ldr	r3, [r4, #20]
   1c1fe:	f1c6 0620 	rsb	r6, r6, #32
   1c202:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   1c204:	4019      	ands	r1, r3
   1c206:	d020      	beq.n	1c24a <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   1c208:	fa91 f1a1 	rbit	r1, r1
   1c20c:	462a      	mov	r2, r5
   1c20e:	fab1 f181 	clz	r1, r1
   1c212:	e00c      	b.n	1c22e <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   1c214:	6839      	ldr	r1, [r7, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   1c216:	2200      	movs	r2, #0
   1c218:	4620      	mov	r0, r4
   1c21a:	9101      	str	r1, [sp, #4]
   1c21c:	f7ff fe02 	bl	1be24 <chunk_field>
   1c220:	68e3      	ldr	r3, [r4, #12]
   1c222:	9901      	ldr	r1, [sp, #4]
   1c224:	4018      	ands	r0, r3
   1c226:	42a8      	cmp	r0, r5
   1c228:	d307      	bcc.n	1c23a <sys_heap_alloc+0x9a>
			return split_alloc(h, bi, sz);
   1c22a:	462a      	mov	r2, r5
   1c22c:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   1c22e:	4620      	mov	r0, r4
	}

	return NULL;
}
   1c230:	b002      	add	sp, #8
   1c232:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return split_alloc(h, minbucket, sz);
   1c236:	f7ff be9a 	b.w	1bf6e <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   1c23a:	2203      	movs	r2, #3
   1c23c:	4620      	mov	r0, r4
   1c23e:	f7ff fdf1 	bl	1be24 <chunk_field>
	for (int i = 0; i < loops; i++) {
   1c242:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   1c246:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
   1c248:	e7d4      	b.n	1c1f4 <sys_heap_alloc+0x54>
}
   1c24a:	2000      	movs	r0, #0
   1c24c:	b002      	add	sp, #8
   1c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c252 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1c252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   1c254:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   1c256:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   1c25a:	1dcc      	adds	r4, r1, #7
   1c25c:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   1c260:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1c264:	1b1b      	subs	r3, r3, r4
   1c266:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   1c268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c26c:	bf2c      	ite	cs
   1c26e:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   1c272:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   1c274:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   1c276:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1c278:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   1c27a:	60e1      	str	r1, [r4, #12]
   1c27c:	bf94      	ite	ls
   1c27e:	2100      	movls	r1, #0
   1c280:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1c282:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1c286:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   1c288:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   1c28a:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   1c28e:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   1c292:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1c294:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   1c298:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   1c29c:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   1c29e:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   1c2a0:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   1c2a2:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1c2a4:	68a2      	ldr	r2, [r4, #8]
   1c2a6:	42ba      	cmp	r2, r7
   1c2a8:	bf94      	ite	ls
   1c2aa:	2200      	movls	r2, #0
   1c2ac:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   1c2ae:	f1c2 021f 	rsb	r2, r2, #31
   1c2b2:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1c2b4:	4290      	cmp	r0, r2
   1c2b6:	dd0a      	ble.n	1c2ce <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   1c2b8:	4620      	mov	r0, r4
   1c2ba:	1a5b      	subs	r3, r3, r1
   1c2bc:	2200      	movs	r2, #0
   1c2be:	f7ff fdbd 	bl	1be3c <chunk_set>
	free_list_add(h, h->chunk0);
   1c2c2:	4620      	mov	r0, r4
   1c2c4:	6921      	ldr	r1, [r4, #16]
}
   1c2c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   1c2ca:	f7ff be03 	b.w	1bed4 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   1c2ce:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1c2d2:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   1c2d4:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1c2d8:	e7e4      	b.n	1c2a4 <sys_heap_init+0x52>

0001c2da <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1c2da:	4770      	bx	lr

0001c2dc <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1c2dc:	f7fe bb54 	b.w	1a988 <SystemInit>

0001c2e0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1c2e0:	2300      	movs	r3, #0
	list->head = NULL;
   1c2e2:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c2e6:	4770      	bx	lr

0001c2e8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1c2e8:	6803      	ldr	r3, [r0, #0]
   1c2ea:	b923      	cbnz	r3, 1c2f6 <log_list_add_tail+0xe>
		list->head = msg;
   1c2ec:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1c2ee:	2300      	movs	r3, #0
	list->tail = msg;
   1c2f0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1c2f2:	600b      	str	r3, [r1, #0]
}
   1c2f4:	4770      	bx	lr
		list->tail->next = msg;
   1c2f6:	6843      	ldr	r3, [r0, #4]
   1c2f8:	6019      	str	r1, [r3, #0]
   1c2fa:	e7f8      	b.n	1c2ee <log_list_add_tail+0x6>

0001c2fc <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1c2fc:	6800      	ldr	r0, [r0, #0]
   1c2fe:	4770      	bx	lr

0001c300 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1c300:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1c302:	b10b      	cbz	r3, 1c308 <log_list_head_get+0x8>
		list->head = list->head->next;
   1c304:	681a      	ldr	r2, [r3, #0]
   1c306:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1c308:	4618      	mov	r0, r3
   1c30a:	4770      	bx	lr

0001c30c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1c30c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c30e:	f7f1 f95b 	bl	d5c8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1c312:	b118      	cbz	r0, 1c31c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1c314:	2301      	movs	r3, #1
   1c316:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c318:	2300      	movs	r3, #0
   1c31a:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1c31c:	bd08      	pop	{r3, pc}

0001c31e <k_cycle_get_32_wrapper>:
   1c31e:	f7f1 bd95 	b.w	de4c <z_timer_cycle_get_32>

0001c322 <dummy_timestamp>:
   1c322:	2000      	movs	r0, #0
   1c324:	4770      	bx	lr

0001c326 <z_log_get_s_mask>:
{
   1c326:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c328:	4605      	mov	r5, r0
	u32_t mask = 0;
   1c32a:	2000      	movs	r0, #0
				mask |= BIT(arg);
   1c32c:	2701      	movs	r7, #1
	u32_t arg = 0;
   1c32e:	4603      	mov	r3, r0
	bool arm = false;
   1c330:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   1c332:	f815 4b01 	ldrb.w	r4, [r5], #1
   1c336:	b10c      	cbz	r4, 1c33c <z_log_get_s_mask+0x16>
   1c338:	428b      	cmp	r3, r1
   1c33a:	d300      	bcc.n	1c33e <z_log_get_s_mask+0x18>
}
   1c33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1c33e:	2c25      	cmp	r4, #37	; 0x25
   1c340:	d102      	bne.n	1c348 <z_log_get_s_mask+0x22>
			arm = !arm;
   1c342:	f082 0201 	eor.w	r2, r2, #1
   1c346:	e7f4      	b.n	1c332 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1c348:	2a00      	cmp	r2, #0
   1c34a:	d0f2      	beq.n	1c332 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1c34c:	f044 0620 	orr.w	r6, r4, #32
   1c350:	3e61      	subs	r6, #97	; 0x61
   1c352:	2e19      	cmp	r6, #25
   1c354:	d8ed      	bhi.n	1c332 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1c356:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1c358:	bf04      	itt	eq
   1c35a:	fa07 f203 	lsleq.w	r2, r7, r3
   1c35e:	4310      	orreq	r0, r2
			arg++;
   1c360:	3301      	adds	r3, #1
			arm = false;
   1c362:	2200      	movs	r2, #0
   1c364:	e7e5      	b.n	1c332 <z_log_get_s_mask+0xc>

0001c366 <log_0>:
{
   1c366:	b513      	push	{r0, r1, r4, lr}
   1c368:	4604      	mov	r4, r0
   1c36a:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1c36c:	f7ff ffce 	bl	1c30c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c370:	b130      	cbz	r0, 1c380 <log_0+0x1a>
		msg_finalize(msg, src_level);
   1c372:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1c374:	6104      	str	r4, [r0, #16]
}
   1c376:	b002      	add	sp, #8
   1c378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c37c:	f7f1 b846 	b.w	d40c <msg_finalize>
}
   1c380:	b002      	add	sp, #8
   1c382:	bd10      	pop	{r4, pc}

0001c384 <log_1>:
{
   1c384:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c386:	460c      	mov	r4, r1
   1c388:	4611      	mov	r1, r2
   1c38a:	4605      	mov	r5, r0
   1c38c:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c38e:	f7ff ffbd 	bl	1c30c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c392:	b160      	cbz	r0, 1c3ae <log_1+0x2a>
		msg->str = str;
   1c394:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1c396:	2501      	movs	r5, #1
   1c398:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1c39a:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1c39c:	f365 1207 	bfi	r2, r5, #4, #4
   1c3a0:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   1c3a2:	9901      	ldr	r1, [sp, #4]
}
   1c3a4:	b003      	add	sp, #12
   1c3a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   1c3aa:	f7f1 b82f 	b.w	d40c <msg_finalize>
}
   1c3ae:	b003      	add	sp, #12
   1c3b0:	bd30      	pop	{r4, r5, pc}

0001c3b2 <log_2>:
{
   1c3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c3b4:	460e      	mov	r6, r1
   1c3b6:	4619      	mov	r1, r3
   1c3b8:	4607      	mov	r7, r0
   1c3ba:	4615      	mov	r5, r2
   1c3bc:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c3be:	f7ff ffa5 	bl	1c30c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c3c2:	b168      	cbz	r0, 1c3e0 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c3c4:	2202      	movs	r2, #2
   1c3c6:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c3c8:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1c3cc:	f362 1307 	bfi	r3, r2, #4, #4
   1c3d0:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1c3d2:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1c3d4:	6107      	str	r7, [r0, #16]
}
   1c3d6:	b003      	add	sp, #12
   1c3d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   1c3dc:	f7f1 b816 	b.w	d40c <msg_finalize>
}
   1c3e0:	b003      	add	sp, #12
   1c3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c3e4 <log_3>:
{
   1c3e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c3e8:	460f      	mov	r7, r1
   1c3ea:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1c3ee:	4680      	mov	r8, r0
   1c3f0:	4616      	mov	r6, r2
   1c3f2:	461d      	mov	r5, r3
   1c3f4:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c3f6:	f7ff ff89 	bl	1c30c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c3fa:	b178      	cbz	r0, 1c41c <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c3fc:	2203      	movs	r2, #3
   1c3fe:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c400:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1c404:	f362 1307 	bfi	r3, r2, #4, #4
   1c408:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1c40a:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1c40c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   1c410:	61c5      	str	r5, [r0, #28]
}
   1c412:	b002      	add	sp, #8
   1c414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c418:	f7f0 bff8 	b.w	d40c <msg_finalize>
}
   1c41c:	b002      	add	sp, #8
   1c41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c422 <log_n>:
{
   1c422:	b510      	push	{r4, lr}
   1c424:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1c426:	f000 f896 	bl	1c556 <log_msg_create_n>
		if (msg == NULL) {
   1c42a:	b120      	cbz	r0, 1c436 <log_n+0x14>
		msg_finalize(msg, src_level);
   1c42c:	4621      	mov	r1, r4
}
   1c42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c432:	f7f0 bfeb 	b.w	d40c <msg_finalize>
}
   1c436:	bd10      	pop	{r4, pc}

0001c438 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c43c:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1c43e:	8903      	ldrh	r3, [r0, #8]
{
   1c440:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   1c442:	f3c3 038d 	ubfx	r3, r3, #2, #14
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1c446:	42a3      	cmp	r3, r4
{
   1c448:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1c44c:	d803      	bhi.n	1c456 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   1c44e:	2300      	movs	r3, #0
   1c450:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1c452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1c456:	6811      	ldr	r1, [r2, #0]
   1c458:	4421      	add	r1, r4
   1c45a:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1c45c:	bf84      	itt	hi
   1c45e:	1b19      	subhi	r1, r3, r4
   1c460:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c462:	2b0c      	cmp	r3, #12
	req_len = *length;
   1c464:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c468:	d928      	bls.n	1c4bc <log_msg_hexdump_data_op+0x84>
	if (offset < chunk_len) {
   1c46a:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1c46c:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1c470:	d82b      	bhi.n	1c4ca <log_msg_hexdump_data_op+0x92>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c472:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1c474:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c476:	454b      	cmp	r3, r9
   1c478:	bf28      	it	cs
   1c47a:	464b      	movcs	r3, r9
   1c47c:	4420      	add	r0, r4
   1c47e:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1c480:	461a      	mov	r2, r3
		if (put_op) {
   1c482:	b1ff      	cbz	r7, 1c4c4 <log_msg_hexdump_data_op+0x8c>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1c484:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1c486:	f000 fbe6 	bl	1cc56 <memcpy>
		req_len -= cpy_len;
   1c48a:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1c48e:	442e      	add	r6, r5
	while (req_len > 0) {
   1c490:	f1b9 0f00 	cmp.w	r9, #0
   1c494:	d0dd      	beq.n	1c452 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1c496:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c49a:	454d      	cmp	r5, r9
   1c49c:	bf28      	it	cs
   1c49e:	464d      	movcs	r5, r9
		if (put_op) {
   1c4a0:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   1c4a2:	462a      	mov	r2, r5
   1c4a4:	4440      	add	r0, r8
		if (put_op) {
   1c4a6:	b1bf      	cbz	r7, 1c4d8 <log_msg_hexdump_data_op+0xa0>
			(void)memcpy(&cont->payload.bytes[offset],
   1c4a8:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1c4aa:	f000 fbd4 	bl	1cc56 <memcpy>
		offset = 0;
   1c4ae:	2400      	movs	r4, #0
		cont = cont->next;
   1c4b0:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   1c4b4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1c4b8:	442e      	add	r6, r5
   1c4ba:	e7e9      	b.n	1c490 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   1c4bc:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   1c4c0:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   1c4c2:	e7d8      	b.n	1c476 <log_msg_hexdump_data_op+0x3e>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1c4c4:	4601      	mov	r1, r0
   1c4c6:	4630      	mov	r0, r6
   1c4c8:	e7dd      	b.n	1c486 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1c4ca:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1c4cc:	2c1b      	cmp	r4, #27
   1c4ce:	d9df      	bls.n	1c490 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1c4d0:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1c4d4:	3c1c      	subs	r4, #28
   1c4d6:	e7f9      	b.n	1c4cc <log_msg_hexdump_data_op+0x94>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1c4d8:	4601      	mov	r1, r0
   1c4da:	4630      	mov	r0, r6
   1c4dc:	e7e5      	b.n	1c4aa <log_msg_hexdump_data_op+0x72>

0001c4de <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c4de:	3004      	adds	r0, #4
   1c4e0:	e8d0 3fef 	ldaex	r3, [r0]
   1c4e4:	3301      	adds	r3, #1
   1c4e6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c4ea:	2a00      	cmp	r2, #0
   1c4ec:	d1f8      	bne.n	1c4e0 <log_msg_get+0x2>
}
   1c4ee:	4770      	bx	lr

0001c4f0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1c4f0:	7a40      	ldrb	r0, [r0, #9]
}
   1c4f2:	0900      	lsrs	r0, r0, #4
   1c4f4:	4770      	bx	lr

0001c4f6 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1c4f6:	7a43      	ldrb	r3, [r0, #9]
   1c4f8:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1c4fc:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1c500:	d216      	bcs.n	1c530 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c502:	2a03      	cmp	r2, #3
   1c504:	d803      	bhi.n	1c50e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1c506:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c50a:	6948      	ldr	r0, [r1, #20]
   1c50c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1c50e:	2901      	cmp	r1, #1
   1c510:	d803      	bhi.n	1c51a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1c512:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c516:	6988      	ldr	r0, [r1, #24]
   1c518:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1c51a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c51c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1c51e:	2906      	cmp	r1, #6
   1c520:	d803      	bhi.n	1c52a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1c522:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c526:	6848      	ldr	r0, [r1, #4]
   1c528:	4770      	bx	lr
		cont = cont->next;
   1c52a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1c52c:	3907      	subs	r1, #7
		cont = cont->next;
   1c52e:	e7f6      	b.n	1c51e <log_msg_arg_get+0x28>
		return 0;
   1c530:	2000      	movs	r0, #0
}
   1c532:	4770      	bx	lr

0001c534 <log_msg_put>:
{
   1c534:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c536:	1d02      	adds	r2, r0, #4
   1c538:	e8d2 1fef 	ldaex	r1, [r2]
   1c53c:	3901      	subs	r1, #1
   1c53e:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c542:	f1bc 0f00 	cmp.w	ip, #0
   1c546:	d1f7      	bne.n	1c538 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1c548:	685b      	ldr	r3, [r3, #4]
   1c54a:	b90b      	cbnz	r3, 1c550 <log_msg_put+0x1c>
		msg_free(msg);
   1c54c:	f7f1 b850 	b.w	d5f0 <msg_free>
}
   1c550:	4770      	bx	lr

0001c552 <log_msg_str_get>:
}
   1c552:	6900      	ldr	r0, [r0, #16]
   1c554:	4770      	bx	lr

0001c556 <log_msg_create_n>:
{
   1c556:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c55a:	4681      	mov	r9, r0
   1c55c:	4688      	mov	r8, r1
   1c55e:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c560:	f7f1 f832 	bl	d5c8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1c564:	4604      	mov	r4, r0
   1c566:	b330      	cbz	r0, 1c5b6 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1c568:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1c56a:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c56c:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1c56e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c570:	8107      	strh	r7, [r0, #8]
   1c572:	d909      	bls.n	1c588 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1c574:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c576:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   1c57a:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1c57c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1c580:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1c582:	f1ba 0f00 	cmp.w	sl, #0
   1c586:	dc0e      	bgt.n	1c5a6 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1c588:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c58a:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1c58c:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1c590:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1c594:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c596:	d818      	bhi.n	1c5ca <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1c598:	4641      	mov	r1, r8
   1c59a:	00aa      	lsls	r2, r5, #2
   1c59c:	f104 0014 	add.w	r0, r4, #20
   1c5a0:	f000 fb59 	bl	1cc56 <memcpy>
	while (nargs != 0U) {
   1c5a4:	e007      	b.n	1c5b6 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1c5a6:	f7f1 f80f 	bl	d5c8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1c5aa:	4606      	mov	r6, r0
   1c5ac:	b930      	cbnz	r0, 1c5bc <log_msg_create_n+0x66>
			msg_free(msg);
   1c5ae:	4620      	mov	r0, r4
   1c5b0:	f7f1 f81e 	bl	d5f0 <msg_free>
			return NULL;
   1c5b4:	4634      	mov	r4, r6
}
   1c5b6:	4620      	mov	r0, r4
   1c5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1c5bc:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1c5c0:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   1c5c4:	4683      	mov	fp, r0
		cont->next = NULL;
   1c5c6:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   1c5c8:	e7db      	b.n	1c582 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1c5ca:	4641      	mov	r1, r8
   1c5cc:	2208      	movs	r2, #8
   1c5ce:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1c5d2:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1c5d4:	f000 fb3f 	bl	1cc56 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c5d8:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1c5da:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1c5de:	2d07      	cmp	r5, #7
   1c5e0:	462e      	mov	r6, r5
   1c5e2:	bf28      	it	cs
   1c5e4:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1c5e6:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1c5ea:	4641      	mov	r1, r8
   1c5ec:	1d38      	adds	r0, r7, #4
   1c5ee:	464a      	mov	r2, r9
   1c5f0:	f000 fb31 	bl	1cc56 <memcpy>
	while (nargs != 0U) {
   1c5f4:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1c5f6:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1c5f8:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1c5fa:	d1f0      	bne.n	1c5de <log_msg_create_n+0x88>
   1c5fc:	e7db      	b.n	1c5b6 <log_msg_create_n+0x60>

0001c5fe <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1c5fe:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1c600:	2400      	movs	r4, #0
   1c602:	9400      	str	r4, [sp, #0]
   1c604:	f7ff ff18 	bl	1c438 <log_msg_hexdump_data_op>
}
   1c608:	b002      	add	sp, #8
   1c60a:	bd10      	pop	{r4, pc}

0001c60c <buffer_write>:
{
   1c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c60e:	4606      	mov	r6, r0
   1c610:	460d      	mov	r5, r1
   1c612:	4614      	mov	r4, r2
   1c614:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1c616:	4621      	mov	r1, r4
   1c618:	4628      	mov	r0, r5
   1c61a:	463a      	mov	r2, r7
   1c61c:	47b0      	blx	r6
	} while (len != 0);
   1c61e:	1a24      	subs	r4, r4, r0
		buf += processed;
   1c620:	4405      	add	r5, r0
	} while (len != 0);
   1c622:	d1f8      	bne.n	1c616 <buffer_write+0xa>
}
   1c624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c626 <std_print>:
{
   1c626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c62a:	b08e      	sub	sp, #56	; 0x38
   1c62c:	af0e      	add	r7, sp, #56	; 0x38
   1c62e:	4680      	mov	r8, r0
   1c630:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1c632:	f7ff ff8e 	bl	1c552 <log_msg_str_get>
   1c636:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1c638:	4640      	mov	r0, r8
   1c63a:	f7ff ff59 	bl	1c4f0 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1c63e:	f04f 0900 	mov.w	r9, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1c642:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1c644:	0083      	lsls	r3, r0, #2
   1c646:	3307      	adds	r3, #7
   1c648:	f023 0307 	bic.w	r3, r3, #7
   1c64c:	ebad 0d03 	sub.w	sp, sp, r3
   1c650:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1c652:	45d1      	cmp	r9, sl
   1c654:	d116      	bne.n	1c684 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1c656:	4640      	mov	r0, r8
   1c658:	f7ff ff4a 	bl	1c4f0 <log_msg_nargs_get>
   1c65c:	280f      	cmp	r0, #15
   1c65e:	d81e      	bhi.n	1c69e <std_print+0x78>
   1c660:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c664:	00200019 	.word	0x00200019
   1c668:	002d0026 	.word	0x002d0026
   1c66c:	00410036 	.word	0x00410036
   1c670:	005d004e 	.word	0x005d004e
   1c674:	0081006e 	.word	0x0081006e
   1c678:	00ad0096 	.word	0x00ad0096
   1c67c:	00e100c6 	.word	0x00e100c6
   1c680:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1c684:	4649      	mov	r1, r9
   1c686:	4640      	mov	r0, r8
   1c688:	f7ff ff35 	bl	1c4f6 <log_msg_arg_get>
   1c68c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1c690:	f109 0901 	add.w	r9, r9, #1
   1c694:	e7dd      	b.n	1c652 <std_print+0x2c>
		print_formatted(log_output, str);
   1c696:	4631      	mov	r1, r6
   1c698:	4628      	mov	r0, r5
   1c69a:	f7f0 ffe7 	bl	d66c <print_formatted>
}
   1c69e:	46bd      	mov	sp, r7
   1c6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1c6a4:	4631      	mov	r1, r6
   1c6a6:	4628      	mov	r0, r5
   1c6a8:	6822      	ldr	r2, [r4, #0]
   1c6aa:	f7f0 ffdf 	bl	d66c <print_formatted>
		break;
   1c6ae:	e7f6      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1c6b0:	4631      	mov	r1, r6
   1c6b2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c6b6:	4628      	mov	r0, r5
   1c6b8:	f7f0 ffd8 	bl	d66c <print_formatted>
		break;
   1c6bc:	e7ef      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1c6be:	68a3      	ldr	r3, [r4, #8]
   1c6c0:	4631      	mov	r1, r6
   1c6c2:	9300      	str	r3, [sp, #0]
   1c6c4:	4628      	mov	r0, r5
   1c6c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c6ca:	f7f0 ffcf 	bl	d66c <print_formatted>
		break;
   1c6ce:	e7e6      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c6d0:	68e3      	ldr	r3, [r4, #12]
   1c6d2:	4631      	mov	r1, r6
   1c6d4:	9301      	str	r3, [sp, #4]
   1c6d6:	68a3      	ldr	r3, [r4, #8]
   1c6d8:	4628      	mov	r0, r5
   1c6da:	9300      	str	r3, [sp, #0]
   1c6dc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c6e0:	f7f0 ffc4 	bl	d66c <print_formatted>
		break;
   1c6e4:	e7db      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c6e6:	6923      	ldr	r3, [r4, #16]
   1c6e8:	4631      	mov	r1, r6
   1c6ea:	9302      	str	r3, [sp, #8]
   1c6ec:	68e3      	ldr	r3, [r4, #12]
   1c6ee:	4628      	mov	r0, r5
   1c6f0:	9301      	str	r3, [sp, #4]
   1c6f2:	68a3      	ldr	r3, [r4, #8]
   1c6f4:	9300      	str	r3, [sp, #0]
   1c6f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c6fa:	f7f0 ffb7 	bl	d66c <print_formatted>
		break;
   1c6fe:	e7ce      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c700:	6963      	ldr	r3, [r4, #20]
   1c702:	4631      	mov	r1, r6
   1c704:	9303      	str	r3, [sp, #12]
   1c706:	6923      	ldr	r3, [r4, #16]
   1c708:	4628      	mov	r0, r5
   1c70a:	9302      	str	r3, [sp, #8]
   1c70c:	68e3      	ldr	r3, [r4, #12]
   1c70e:	9301      	str	r3, [sp, #4]
   1c710:	68a3      	ldr	r3, [r4, #8]
   1c712:	9300      	str	r3, [sp, #0]
   1c714:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c718:	f7f0 ffa8 	bl	d66c <print_formatted>
		break;
   1c71c:	e7bf      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c71e:	69a3      	ldr	r3, [r4, #24]
   1c720:	4631      	mov	r1, r6
   1c722:	9304      	str	r3, [sp, #16]
   1c724:	6963      	ldr	r3, [r4, #20]
   1c726:	4628      	mov	r0, r5
   1c728:	9303      	str	r3, [sp, #12]
   1c72a:	6923      	ldr	r3, [r4, #16]
   1c72c:	9302      	str	r3, [sp, #8]
   1c72e:	68e3      	ldr	r3, [r4, #12]
   1c730:	9301      	str	r3, [sp, #4]
   1c732:	68a3      	ldr	r3, [r4, #8]
   1c734:	9300      	str	r3, [sp, #0]
   1c736:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c73a:	f7f0 ff97 	bl	d66c <print_formatted>
		break;
   1c73e:	e7ae      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c740:	69e3      	ldr	r3, [r4, #28]
   1c742:	4631      	mov	r1, r6
   1c744:	9305      	str	r3, [sp, #20]
   1c746:	69a3      	ldr	r3, [r4, #24]
   1c748:	4628      	mov	r0, r5
   1c74a:	9304      	str	r3, [sp, #16]
   1c74c:	6963      	ldr	r3, [r4, #20]
   1c74e:	9303      	str	r3, [sp, #12]
   1c750:	6923      	ldr	r3, [r4, #16]
   1c752:	9302      	str	r3, [sp, #8]
   1c754:	68e3      	ldr	r3, [r4, #12]
   1c756:	9301      	str	r3, [sp, #4]
   1c758:	68a3      	ldr	r3, [r4, #8]
   1c75a:	9300      	str	r3, [sp, #0]
   1c75c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c760:	f7f0 ff84 	bl	d66c <print_formatted>
		break;
   1c764:	e79b      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c766:	6a23      	ldr	r3, [r4, #32]
   1c768:	4631      	mov	r1, r6
   1c76a:	9306      	str	r3, [sp, #24]
   1c76c:	69e3      	ldr	r3, [r4, #28]
   1c76e:	4628      	mov	r0, r5
   1c770:	9305      	str	r3, [sp, #20]
   1c772:	69a3      	ldr	r3, [r4, #24]
   1c774:	9304      	str	r3, [sp, #16]
   1c776:	6963      	ldr	r3, [r4, #20]
   1c778:	9303      	str	r3, [sp, #12]
   1c77a:	6923      	ldr	r3, [r4, #16]
   1c77c:	9302      	str	r3, [sp, #8]
   1c77e:	68e3      	ldr	r3, [r4, #12]
   1c780:	9301      	str	r3, [sp, #4]
   1c782:	68a3      	ldr	r3, [r4, #8]
   1c784:	9300      	str	r3, [sp, #0]
   1c786:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c78a:	f7f0 ff6f 	bl	d66c <print_formatted>
		break;
   1c78e:	e786      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c790:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c792:	4631      	mov	r1, r6
   1c794:	9307      	str	r3, [sp, #28]
   1c796:	6a23      	ldr	r3, [r4, #32]
   1c798:	4628      	mov	r0, r5
   1c79a:	9306      	str	r3, [sp, #24]
   1c79c:	69e3      	ldr	r3, [r4, #28]
   1c79e:	9305      	str	r3, [sp, #20]
   1c7a0:	69a3      	ldr	r3, [r4, #24]
   1c7a2:	9304      	str	r3, [sp, #16]
   1c7a4:	6963      	ldr	r3, [r4, #20]
   1c7a6:	9303      	str	r3, [sp, #12]
   1c7a8:	6923      	ldr	r3, [r4, #16]
   1c7aa:	9302      	str	r3, [sp, #8]
   1c7ac:	68e3      	ldr	r3, [r4, #12]
   1c7ae:	9301      	str	r3, [sp, #4]
   1c7b0:	68a3      	ldr	r3, [r4, #8]
   1c7b2:	9300      	str	r3, [sp, #0]
   1c7b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c7b8:	f7f0 ff58 	bl	d66c <print_formatted>
		break;
   1c7bc:	e76f      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c7be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c7c0:	4631      	mov	r1, r6
   1c7c2:	9308      	str	r3, [sp, #32]
   1c7c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c7c6:	4628      	mov	r0, r5
   1c7c8:	9307      	str	r3, [sp, #28]
   1c7ca:	6a23      	ldr	r3, [r4, #32]
   1c7cc:	9306      	str	r3, [sp, #24]
   1c7ce:	69e3      	ldr	r3, [r4, #28]
   1c7d0:	9305      	str	r3, [sp, #20]
   1c7d2:	69a3      	ldr	r3, [r4, #24]
   1c7d4:	9304      	str	r3, [sp, #16]
   1c7d6:	6963      	ldr	r3, [r4, #20]
   1c7d8:	9303      	str	r3, [sp, #12]
   1c7da:	6923      	ldr	r3, [r4, #16]
   1c7dc:	9302      	str	r3, [sp, #8]
   1c7de:	68e3      	ldr	r3, [r4, #12]
   1c7e0:	9301      	str	r3, [sp, #4]
   1c7e2:	68a3      	ldr	r3, [r4, #8]
   1c7e4:	9300      	str	r3, [sp, #0]
   1c7e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c7ea:	f7f0 ff3f 	bl	d66c <print_formatted>
		break;
   1c7ee:	e756      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c7f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c7f2:	4631      	mov	r1, r6
   1c7f4:	9309      	str	r3, [sp, #36]	; 0x24
   1c7f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c7f8:	4628      	mov	r0, r5
   1c7fa:	9308      	str	r3, [sp, #32]
   1c7fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c7fe:	9307      	str	r3, [sp, #28]
   1c800:	6a23      	ldr	r3, [r4, #32]
   1c802:	9306      	str	r3, [sp, #24]
   1c804:	69e3      	ldr	r3, [r4, #28]
   1c806:	9305      	str	r3, [sp, #20]
   1c808:	69a3      	ldr	r3, [r4, #24]
   1c80a:	9304      	str	r3, [sp, #16]
   1c80c:	6963      	ldr	r3, [r4, #20]
   1c80e:	9303      	str	r3, [sp, #12]
   1c810:	6923      	ldr	r3, [r4, #16]
   1c812:	9302      	str	r3, [sp, #8]
   1c814:	68e3      	ldr	r3, [r4, #12]
   1c816:	9301      	str	r3, [sp, #4]
   1c818:	68a3      	ldr	r3, [r4, #8]
   1c81a:	9300      	str	r3, [sp, #0]
   1c81c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c820:	f7f0 ff24 	bl	d66c <print_formatted>
		break;
   1c824:	e73b      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c826:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c828:	4631      	mov	r1, r6
   1c82a:	930a      	str	r3, [sp, #40]	; 0x28
   1c82c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c82e:	4628      	mov	r0, r5
   1c830:	9309      	str	r3, [sp, #36]	; 0x24
   1c832:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c834:	9308      	str	r3, [sp, #32]
   1c836:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c838:	9307      	str	r3, [sp, #28]
   1c83a:	6a23      	ldr	r3, [r4, #32]
   1c83c:	9306      	str	r3, [sp, #24]
   1c83e:	69e3      	ldr	r3, [r4, #28]
   1c840:	9305      	str	r3, [sp, #20]
   1c842:	69a3      	ldr	r3, [r4, #24]
   1c844:	9304      	str	r3, [sp, #16]
   1c846:	6963      	ldr	r3, [r4, #20]
   1c848:	9303      	str	r3, [sp, #12]
   1c84a:	6923      	ldr	r3, [r4, #16]
   1c84c:	9302      	str	r3, [sp, #8]
   1c84e:	68e3      	ldr	r3, [r4, #12]
   1c850:	9301      	str	r3, [sp, #4]
   1c852:	68a3      	ldr	r3, [r4, #8]
   1c854:	9300      	str	r3, [sp, #0]
   1c856:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c85a:	f7f0 ff07 	bl	d66c <print_formatted>
		break;
   1c85e:	e71e      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c860:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c862:	4631      	mov	r1, r6
   1c864:	930b      	str	r3, [sp, #44]	; 0x2c
   1c866:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c868:	4628      	mov	r0, r5
   1c86a:	930a      	str	r3, [sp, #40]	; 0x28
   1c86c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c86e:	9309      	str	r3, [sp, #36]	; 0x24
   1c870:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c872:	9308      	str	r3, [sp, #32]
   1c874:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c876:	9307      	str	r3, [sp, #28]
   1c878:	6a23      	ldr	r3, [r4, #32]
   1c87a:	9306      	str	r3, [sp, #24]
   1c87c:	69e3      	ldr	r3, [r4, #28]
   1c87e:	9305      	str	r3, [sp, #20]
   1c880:	69a3      	ldr	r3, [r4, #24]
   1c882:	9304      	str	r3, [sp, #16]
   1c884:	6963      	ldr	r3, [r4, #20]
   1c886:	9303      	str	r3, [sp, #12]
   1c888:	6923      	ldr	r3, [r4, #16]
   1c88a:	9302      	str	r3, [sp, #8]
   1c88c:	68e3      	ldr	r3, [r4, #12]
   1c88e:	9301      	str	r3, [sp, #4]
   1c890:	68a3      	ldr	r3, [r4, #8]
   1c892:	9300      	str	r3, [sp, #0]
   1c894:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c898:	f7f0 fee8 	bl	d66c <print_formatted>
		break;
   1c89c:	e6ff      	b.n	1c69e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1c89e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c8a0:	4631      	mov	r1, r6
   1c8a2:	930c      	str	r3, [sp, #48]	; 0x30
   1c8a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c8a6:	4628      	mov	r0, r5
   1c8a8:	930b      	str	r3, [sp, #44]	; 0x2c
   1c8aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c8ac:	930a      	str	r3, [sp, #40]	; 0x28
   1c8ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c8b0:	9309      	str	r3, [sp, #36]	; 0x24
   1c8b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c8b4:	9308      	str	r3, [sp, #32]
   1c8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c8b8:	9307      	str	r3, [sp, #28]
   1c8ba:	6a23      	ldr	r3, [r4, #32]
   1c8bc:	9306      	str	r3, [sp, #24]
   1c8be:	69e3      	ldr	r3, [r4, #28]
   1c8c0:	9305      	str	r3, [sp, #20]
   1c8c2:	69a3      	ldr	r3, [r4, #24]
   1c8c4:	9304      	str	r3, [sp, #16]
   1c8c6:	6963      	ldr	r3, [r4, #20]
   1c8c8:	9303      	str	r3, [sp, #12]
   1c8ca:	6923      	ldr	r3, [r4, #16]
   1c8cc:	9302      	str	r3, [sp, #8]
   1c8ce:	68e3      	ldr	r3, [r4, #12]
   1c8d0:	9301      	str	r3, [sp, #4]
   1c8d2:	68a3      	ldr	r3, [r4, #8]
   1c8d4:	9300      	str	r3, [sp, #0]
   1c8d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c8da:	f7f0 fec7 	bl	d66c <print_formatted>
}
   1c8de:	e6de      	b.n	1c69e <std_print+0x78>

0001c8e0 <log_output_flush>:
		     log_output->control_block->offset,
   1c8e0:	6842      	ldr	r2, [r0, #4]
{
   1c8e2:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1c8e4:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1c8e8:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1c8ea:	6881      	ldr	r1, [r0, #8]
   1c8ec:	6800      	ldr	r0, [r0, #0]
   1c8ee:	f7ff fe8d 	bl	1c60c <buffer_write>
	log_output->control_block->offset = 0;
   1c8f2:	2200      	movs	r2, #0
   1c8f4:	6863      	ldr	r3, [r4, #4]
   1c8f6:	601a      	str	r2, [r3, #0]
}
   1c8f8:	bd10      	pop	{r4, pc}

0001c8fa <out_func>:
{
   1c8fa:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1c8fc:	684b      	ldr	r3, [r1, #4]
{
   1c8fe:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1c900:	681a      	ldr	r2, [r3, #0]
   1c902:	68cb      	ldr	r3, [r1, #12]
{
   1c904:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1c906:	429a      	cmp	r2, r3
   1c908:	d102      	bne.n	1c910 <out_func+0x16>
		log_output_flush(out_ctx);
   1c90a:	4608      	mov	r0, r1
   1c90c:	f7ff ffe8 	bl	1c8e0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c910:	6863      	ldr	r3, [r4, #4]
   1c912:	e8d3 2fef 	ldaex	r2, [r3]
   1c916:	1c51      	adds	r1, r2, #1
   1c918:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1c91c:	2800      	cmp	r0, #0
   1c91e:	d1f8      	bne.n	1c912 <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
   1c920:	68a3      	ldr	r3, [r4, #8]
}
   1c922:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
   1c924:	549d      	strb	r5, [r3, r2]
}
   1c926:	bd38      	pop	{r3, r4, r5, pc}

0001c928 <char_out>:
{
   1c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c92a:	460d      	mov	r5, r1
   1c92c:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1c92e:	4604      	mov	r4, r0
   1c930:	1847      	adds	r7, r0, r1
   1c932:	42bc      	cmp	r4, r7
   1c934:	d101      	bne.n	1c93a <char_out+0x12>
}
   1c936:	4628      	mov	r0, r5
   1c938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1c93a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1c93e:	68b3      	ldr	r3, [r6, #8]
   1c940:	4630      	mov	r0, r6
   1c942:	685b      	ldr	r3, [r3, #4]
   1c944:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   1c946:	e7f4      	b.n	1c932 <char_out+0xa>

0001c948 <get_status>:
	if (data->started) {
   1c948:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   1c94a:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   1c94c:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1c94e:	fb02 3101 	mla	r1, r2, r1, r3
   1c952:	7a4b      	ldrb	r3, [r1, #9]
   1c954:	b923      	cbnz	r3, 1c960 <get_status+0x18>
	if (data->ref > 0) {
   1c956:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1c958:	fab0 f080 	clz	r0, r0
   1c95c:	0940      	lsrs	r0, r0, #5
   1c95e:	4770      	bx	lr
   1c960:	2002      	movs	r0, #2
}
   1c962:	4770      	bx	lr

0001c964 <clock_stop>:
{
   1c964:	b570      	push	{r4, r5, r6, lr}
   1c966:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   1c968:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   1c96a:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   1c96c:	f04f 0320 	mov.w	r3, #32
   1c970:	f3ef 8611 	mrs	r6, BASEPRI
   1c974:	f383 8811 	msr	BASEPRI, r3
   1c978:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1c97c:	230c      	movs	r3, #12
   1c97e:	434b      	muls	r3, r1
   1c980:	18ea      	adds	r2, r5, r3
   1c982:	7a10      	ldrb	r0, [r2, #8]
   1c984:	b1a0      	cbz	r0, 1c9b0 <clock_stop+0x4c>
	data->ref--;
   1c986:	3801      	subs	r0, #1
   1c988:	b2c0      	uxtb	r0, r0
   1c98a:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   1c98c:	b998      	cbnz	r0, 1c9b6 <clock_stop+0x52>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1c98e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   1c992:	50e8      	str	r0, [r5, r3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c994:	78cb      	ldrb	r3, [r1, #3]
   1c996:	2101      	movs	r1, #1
   1c998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c99c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   1c9a0:	6050      	str	r0, [r2, #4]
   1c9a2:	6019      	str	r1, [r3, #0]
		data->started = false;
   1c9a4:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   1c9a6:	f386 8811 	msr	BASEPRI, r6
   1c9aa:	f3bf 8f6f 	isb	sy
}
   1c9ae:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   1c9b0:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1c9b4:	e7f7      	b.n	1c9a6 <clock_stop+0x42>
	int err = 0;
   1c9b6:	2000      	movs	r0, #0
   1c9b8:	e7f5      	b.n	1c9a6 <clock_stop+0x42>

0001c9ba <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1c9ba:	2200      	movs	r2, #0
   1c9bc:	f7f1 b898 	b.w	daf0 <clock_async_start>

0001c9c0 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1c9c0:	4770      	bx	lr

0001c9c2 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1c9c2:	4770      	bx	lr

0001c9c4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1c9c4:	2100      	movs	r1, #0
   1c9c6:	2001      	movs	r0, #1
   1c9c8:	f7f1 bb60 	b.w	e08c <z_arm_fatal_error>

0001c9cc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1c9cc:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1c9ce:	6800      	ldr	r0, [r0, #0]
   1c9d0:	f7f1 bb5c 	b.w	e08c <z_arm_fatal_error>

0001c9d4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1c9d4:	b508      	push	{r3, lr}
	handler();
   1c9d6:	f7f1 fbcd 	bl	e174 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1c9da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1c9de:	f7f1 be53 	b.w	e688 <z_arm_exc_exit>

0001c9e2 <mpu_configure_region>:
{
   1c9e2:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1c9e4:	890a      	ldrh	r2, [r1, #8]
   1c9e6:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   1c9e8:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1c9ea:	684c      	ldr	r4, [r1, #4]
   1c9ec:	f002 021f 	and.w	r2, r2, #31
{
   1c9f0:	b085      	sub	sp, #20
   1c9f2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1c9f6:	9300      	str	r3, [sp, #0]
   1c9f8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1c9fc:	f023 031f 	bic.w	r3, r3, #31
   1ca00:	1e62      	subs	r2, r4, #1
   1ca02:	4413      	add	r3, r2
   1ca04:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1ca08:	280f      	cmp	r0, #15
   1ca0a:	4604      	mov	r4, r0
   1ca0c:	9303      	str	r3, [sp, #12]
   1ca0e:	d905      	bls.n	1ca1c <mpu_configure_region+0x3a>
   1ca10:	f7f1 fece 	bl	e7b0 <region_allocate_and_init.part.0>
   1ca14:	4604      	mov	r4, r0
}
   1ca16:	4620      	mov	r0, r4
   1ca18:	b005      	add	sp, #20
   1ca1a:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1ca1c:	4669      	mov	r1, sp
   1ca1e:	f7f1 feaf 	bl	e780 <region_init>
	return region_allocate_and_init(index,
   1ca22:	e7f8      	b.n	1ca16 <mpu_configure_region+0x34>

0001ca24 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1ca24:	e840 f000 	tt	r0, r0
   1ca28:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1ca2a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1ca2e:	bf14      	ite	ne
   1ca30:	4618      	movne	r0, r3
   1ca32:	f06f 0015 	mvneq.w	r0, #21
   1ca36:	4770      	bx	lr

0001ca38 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1ca38:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1ca3a:	7802      	ldrb	r2, [r0, #0]
   1ca3c:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1ca3e:	2a20      	cmp	r2, #32
   1ca40:	f100 0001 	add.w	r0, r0, #1
   1ca44:	d0f9      	beq.n	1ca3a <atoi+0x2>
   1ca46:	f1a2 0109 	sub.w	r1, r2, #9
   1ca4a:	2904      	cmp	r1, #4
   1ca4c:	d9f5      	bls.n	1ca3a <atoi+0x2>
		s++;
	}
	switch (*s) {
   1ca4e:	2a2b      	cmp	r2, #43	; 0x2b
   1ca50:	d008      	beq.n	1ca64 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1ca52:	2a2d      	cmp	r2, #45	; 0x2d
   1ca54:	bf0a      	itet	eq
   1ca56:	4603      	moveq	r3, r0
   1ca58:	2100      	movne	r1, #0
   1ca5a:	2101      	moveq	r1, #1
	switch (*s) {
   1ca5c:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1ca5e:	250a      	movs	r5, #10
   1ca60:	3b01      	subs	r3, #1
   1ca62:	e006      	b.n	1ca72 <atoi+0x3a>
		s++;
   1ca64:	4603      	mov	r3, r0
	int neg = 0;
   1ca66:	2100      	movs	r1, #0
   1ca68:	e7f8      	b.n	1ca5c <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1ca6a:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1ca6e:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1ca72:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ca76:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1ca7a:	2c09      	cmp	r4, #9
   1ca7c:	d9f5      	bls.n	1ca6a <atoi+0x32>
	}
	return neg ? n : -n;
   1ca7e:	b901      	cbnz	r1, 1ca82 <atoi+0x4a>
   1ca80:	4240      	negs	r0, r0
}
   1ca82:	bd30      	pop	{r4, r5, pc}

0001ca84 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1ca84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ca88:	4684      	mov	ip, r0
   1ca8a:	4688      	mov	r8, r1
	register const char *s = nptr;
   1ca8c:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1ca8e:	460c      	mov	r4, r1
   1ca90:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1ca94:	2b20      	cmp	r3, #32
   1ca96:	d033      	beq.n	1cb00 <strtol+0x7c>
   1ca98:	f1a3 0009 	sub.w	r0, r3, #9
   1ca9c:	2804      	cmp	r0, #4
   1ca9e:	d92f      	bls.n	1cb00 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   1caa0:	2b2d      	cmp	r3, #45	; 0x2d
   1caa2:	d12f      	bne.n	1cb04 <strtol+0x80>
		neg = 1;
		c = *s++;
   1caa4:	784b      	ldrb	r3, [r1, #1]
   1caa6:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1caa8:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1caaa:	2a00      	cmp	r2, #0
   1caac:	d05c      	beq.n	1cb68 <strtol+0xe4>
   1caae:	2a10      	cmp	r2, #16
   1cab0:	d109      	bne.n	1cac6 <strtol+0x42>
   1cab2:	2b30      	cmp	r3, #48	; 0x30
   1cab4:	d107      	bne.n	1cac6 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1cab6:	7823      	ldrb	r3, [r4, #0]
   1cab8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1cabc:	2b58      	cmp	r3, #88	; 0x58
   1cabe:	d14e      	bne.n	1cb5e <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1cac0:	2210      	movs	r2, #16
		c = s[1];
   1cac2:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1cac4:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1cac6:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1cac8:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1cacc:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1cace:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1cad2:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1cad4:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1cad8:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1cadc:	2d09      	cmp	r5, #9
   1cade:	d817      	bhi.n	1cb10 <strtol+0x8c>
			c -= '0';
   1cae0:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1cae2:	429a      	cmp	r2, r3
   1cae4:	dd24      	ble.n	1cb30 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1cae6:	1c75      	adds	r5, r6, #1
   1cae8:	d007      	beq.n	1cafa <strtol+0x76>
   1caea:	4570      	cmp	r0, lr
   1caec:	d81d      	bhi.n	1cb2a <strtol+0xa6>
   1caee:	d101      	bne.n	1caf4 <strtol+0x70>
   1caf0:	454b      	cmp	r3, r9
   1caf2:	dc1a      	bgt.n	1cb2a <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   1caf4:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1caf6:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1cafa:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1cafe:	e7eb      	b.n	1cad8 <strtol+0x54>
{
   1cb00:	4621      	mov	r1, r4
   1cb02:	e7c4      	b.n	1ca8e <strtol+0xa>
	} else if (c == '+') {
   1cb04:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1cb06:	bf04      	itt	eq
   1cb08:	784b      	ldrbeq	r3, [r1, #1]
   1cb0a:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1cb0c:	2100      	movs	r1, #0
   1cb0e:	e7cc      	b.n	1caaa <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1cb10:	f043 0520 	orr.w	r5, r3, #32
   1cb14:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1cb16:	2d19      	cmp	r5, #25
   1cb18:	d80a      	bhi.n	1cb30 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1cb1a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1cb1e:	2d1a      	cmp	r5, #26
   1cb20:	bf34      	ite	cc
   1cb22:	2537      	movcc	r5, #55	; 0x37
   1cb24:	2557      	movcs	r5, #87	; 0x57
   1cb26:	1b5b      	subs	r3, r3, r5
   1cb28:	e7db      	b.n	1cae2 <strtol+0x5e>
			any = -1;
   1cb2a:	f04f 36ff 	mov.w	r6, #4294967295
   1cb2e:	e7e4      	b.n	1cafa <strtol+0x76>
		}
	}

	if (any < 0) {
   1cb30:	1c73      	adds	r3, r6, #1
   1cb32:	d109      	bne.n	1cb48 <strtol+0xc4>
   1cb34:	f7fd ff78 	bl	1aa28 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1cb38:	2326      	movs	r3, #38	; 0x26
   1cb3a:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1cb3c:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1cb3e:	f1b8 0f00 	cmp.w	r8, #0
   1cb42:	d107      	bne.n	1cb54 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1cb44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1cb48:	b101      	cbz	r1, 1cb4c <strtol+0xc8>
		acc = -acc;
   1cb4a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1cb4c:	f1b8 0f00 	cmp.w	r8, #0
   1cb50:	d0f8      	beq.n	1cb44 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   1cb52:	b10e      	cbz	r6, 1cb58 <strtol+0xd4>
   1cb54:	f104 3cff 	add.w	ip, r4, #4294967295
   1cb58:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1cb5c:	e7f2      	b.n	1cb44 <strtol+0xc0>
	if (base == 0) {
   1cb5e:	2330      	movs	r3, #48	; 0x30
   1cb60:	2a00      	cmp	r2, #0
   1cb62:	d1b0      	bne.n	1cac6 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1cb64:	2208      	movs	r2, #8
   1cb66:	e7ae      	b.n	1cac6 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1cb68:	2b30      	cmp	r3, #48	; 0x30
   1cb6a:	d0a4      	beq.n	1cab6 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1cb6c:	220a      	movs	r2, #10
   1cb6e:	e7aa      	b.n	1cac6 <strtol+0x42>

0001cb70 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1cb74:	f891 8000 	ldrb.w	r8, [r1]
{
   1cb78:	4605      	mov	r5, r0
	if (c != 0) {
   1cb7a:	f1b8 0f00 	cmp.w	r8, #0
   1cb7e:	d010      	beq.n	1cba2 <strstr+0x32>
	c = *find++;
   1cb80:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1cb82:	4620      	mov	r0, r4
   1cb84:	f000 f835 	bl	1cbf2 <strlen>
   1cb88:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   1cb8a:	462e      	mov	r6, r5
   1cb8c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1cb90:	b163      	cbz	r3, 1cbac <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   1cb92:	4598      	cmp	r8, r3
   1cb94:	d108      	bne.n	1cba8 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   1cb96:	463a      	mov	r2, r7
   1cb98:	4621      	mov	r1, r4
   1cb9a:	4630      	mov	r0, r6
   1cb9c:	f000 f83c 	bl	1cc18 <strncmp>
   1cba0:	b910      	cbnz	r0, 1cba8 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   1cba2:	4628      	mov	r0, r5
   1cba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1cba8:	4635      	mov	r5, r6
   1cbaa:	e7ee      	b.n	1cb8a <strstr+0x1a>
					return NULL;
   1cbac:	461d      	mov	r5, r3
   1cbae:	e7f8      	b.n	1cba2 <strstr+0x32>

0001cbb0 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1cbb0:	b570      	push	{r4, r5, r6, lr}
   1cbb2:	4605      	mov	r5, r0
   1cbb4:	3901      	subs	r1, #1
   1cbb6:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1cbb8:	b142      	cbz	r2, 1cbcc <strncpy+0x1c>
   1cbba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1cbbe:	1e56      	subs	r6, r2, #1
   1cbc0:	b92b      	cbnz	r3, 1cbce <strncpy+0x1e>
   1cbc2:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1cbc4:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1cbc8:	42a2      	cmp	r2, r4
   1cbca:	d1fb      	bne.n	1cbc4 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1cbcc:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1cbce:	4632      	mov	r2, r6
		*d = *s;
   1cbd0:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1cbd4:	e7ef      	b.n	1cbb6 <strncpy+0x6>

0001cbd6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1cbd6:	4603      	mov	r3, r0
   1cbd8:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1cbda:	781a      	ldrb	r2, [r3, #0]
   1cbdc:	4618      	mov	r0, r3
   1cbde:	428a      	cmp	r2, r1
   1cbe0:	f103 0301 	add.w	r3, r3, #1
   1cbe4:	d004      	beq.n	1cbf0 <strchr+0x1a>
   1cbe6:	2a00      	cmp	r2, #0
   1cbe8:	d1f7      	bne.n	1cbda <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1cbea:	2900      	cmp	r1, #0
   1cbec:	bf18      	it	ne
   1cbee:	2000      	movne	r0, #0
}
   1cbf0:	4770      	bx	lr

0001cbf2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1cbf2:	4603      	mov	r3, r0
	size_t n = 0;
   1cbf4:	2000      	movs	r0, #0

	while (*s != '\0') {
   1cbf6:	5c1a      	ldrb	r2, [r3, r0]
   1cbf8:	b902      	cbnz	r2, 1cbfc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1cbfa:	4770      	bx	lr
		n++;
   1cbfc:	3001      	adds	r0, #1
   1cbfe:	e7fa      	b.n	1cbf6 <strlen+0x4>

0001cc00 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1cc00:	3801      	subs	r0, #1
   1cc02:	3901      	subs	r1, #1
   1cc04:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1cc08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1cc0c:	4293      	cmp	r3, r2
   1cc0e:	d101      	bne.n	1cc14 <strcmp+0x14>
   1cc10:	2b00      	cmp	r3, #0
   1cc12:	d1f7      	bne.n	1cc04 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1cc14:	1a98      	subs	r0, r3, r2
   1cc16:	4770      	bx	lr

0001cc18 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1cc18:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1cc1a:	2400      	movs	r4, #0
   1cc1c:	42a2      	cmp	r2, r4
   1cc1e:	d008      	beq.n	1cc32 <strncmp+0x1a>
   1cc20:	5d03      	ldrb	r3, [r0, r4]
   1cc22:	5d0d      	ldrb	r5, [r1, r4]
   1cc24:	42ab      	cmp	r3, r5
   1cc26:	d102      	bne.n	1cc2e <strncmp+0x16>
   1cc28:	3401      	adds	r4, #1
   1cc2a:	2b00      	cmp	r3, #0
   1cc2c:	d1f6      	bne.n	1cc1c <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1cc2e:	1b58      	subs	r0, r3, r5
   1cc30:	e000      	b.n	1cc34 <strncmp+0x1c>
   1cc32:	2000      	movs	r0, #0
}
   1cc34:	bd30      	pop	{r4, r5, pc}

0001cc36 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1cc36:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1cc38:	b15a      	cbz	r2, 1cc52 <memcmp+0x1c>
   1cc3a:	3901      	subs	r1, #1
   1cc3c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1cc3e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1cc42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1cc46:	42a0      	cmp	r0, r4
   1cc48:	d001      	beq.n	1cc4e <memcmp+0x18>
   1cc4a:	429a      	cmp	r2, r3
   1cc4c:	d0f7      	beq.n	1cc3e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1cc4e:	1ad0      	subs	r0, r2, r3
}
   1cc50:	bd10      	pop	{r4, pc}
		return 0;
   1cc52:	4610      	mov	r0, r2
   1cc54:	e7fc      	b.n	1cc50 <memcmp+0x1a>

0001cc56 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1cc56:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1cc58:	ea81 0400 	eor.w	r4, r1, r0
   1cc5c:	07a5      	lsls	r5, r4, #30
   1cc5e:	4603      	mov	r3, r0
   1cc60:	d00b      	beq.n	1cc7a <memcpy+0x24>
   1cc62:	3b01      	subs	r3, #1
   1cc64:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1cc66:	4291      	cmp	r1, r2
   1cc68:	d11b      	bne.n	1cca2 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1cc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1cc6c:	2a00      	cmp	r2, #0
   1cc6e:	d0fc      	beq.n	1cc6a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1cc70:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1cc74:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1cc76:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1cc7a:	079c      	lsls	r4, r3, #30
   1cc7c:	d1f6      	bne.n	1cc6c <memcpy+0x16>
   1cc7e:	f022 0403 	bic.w	r4, r2, #3
   1cc82:	1f1d      	subs	r5, r3, #4
   1cc84:	0896      	lsrs	r6, r2, #2
   1cc86:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1cc88:	42b9      	cmp	r1, r7
   1cc8a:	d105      	bne.n	1cc98 <memcpy+0x42>
   1cc8c:	f06f 0503 	mvn.w	r5, #3
   1cc90:	4423      	add	r3, r4
   1cc92:	fb05 2206 	mla	r2, r5, r6, r2
   1cc96:	e7e4      	b.n	1cc62 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1cc98:	f851 cb04 	ldr.w	ip, [r1], #4
   1cc9c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1cca0:	e7f2      	b.n	1cc88 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1cca2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1cca6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1ccaa:	e7dc      	b.n	1cc66 <memcpy+0x10>

0001ccac <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1ccac:	4603      	mov	r3, r0
{
   1ccae:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1ccb0:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1ccb2:	079c      	lsls	r4, r3, #30
   1ccb4:	d111      	bne.n	1ccda <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1ccb6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1ccba:	f022 0603 	bic.w	r6, r2, #3
   1ccbe:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1ccc2:	441e      	add	r6, r3
   1ccc4:	0894      	lsrs	r4, r2, #2
   1ccc6:	42b3      	cmp	r3, r6
   1ccc8:	d10d      	bne.n	1cce6 <memset+0x3a>
   1ccca:	f06f 0503 	mvn.w	r5, #3
   1ccce:	fb05 2204 	mla	r2, r5, r4, r2
   1ccd2:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1ccd4:	4293      	cmp	r3, r2
   1ccd6:	d109      	bne.n	1ccec <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1ccd8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1ccda:	2a00      	cmp	r2, #0
   1ccdc:	d0fc      	beq.n	1ccd8 <memset+0x2c>
		*(d_byte++) = c_byte;
   1ccde:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1cce2:	3a01      	subs	r2, #1
   1cce4:	e7e5      	b.n	1ccb2 <memset+0x6>
		*(d_word++) = c_word;
   1cce6:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1ccea:	e7ec      	b.n	1ccc6 <memset+0x1a>
		*(d_byte++) = c_byte;
   1ccec:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ccf0:	e7f0      	b.n	1ccd4 <memset+0x28>

0001ccf2 <_to_x>:
{
   1ccf2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccf4:	4603      	mov	r3, r0
   1ccf6:	4604      	mov	r4, r0
		unsigned int d = n % base;
   1ccf8:	fbb1 f0f2 	udiv	r0, r1, r2
   1ccfc:	fb02 1510 	mls	r5, r2, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1cd00:	2d09      	cmp	r5, #9
   1cd02:	460f      	mov	r7, r1
   1cd04:	bf8c      	ite	hi
   1cd06:	2627      	movhi	r6, #39	; 0x27
   1cd08:	2600      	movls	r6, #0
		n /= base;
   1cd0a:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1cd0c:	4620      	mov	r0, r4
   1cd0e:	3530      	adds	r5, #48	; 0x30
   1cd10:	4435      	add	r5, r6
	} while (n);
   1cd12:	4297      	cmp	r7, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1cd14:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
   1cd18:	d206      	bcs.n	1cd28 <_to_x+0x36>
	*buf = 0;
   1cd1a:	2200      	movs	r2, #0
   1cd1c:	7002      	strb	r2, [r0, #0]
	len = buf - start;
   1cd1e:	4622      	mov	r2, r4
   1cd20:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
   1cd22:	429a      	cmp	r2, r3
   1cd24:	d802      	bhi.n	1cd2c <_to_x+0x3a>
}
   1cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cd28:	4604      	mov	r4, r0
   1cd2a:	e7e5      	b.n	1ccf8 <_to_x+0x6>
		char tmp = *buf;
   1cd2c:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
   1cd2e:	781c      	ldrb	r4, [r3, #0]
   1cd30:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
   1cd34:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
   1cd38:	e7f3      	b.n	1cd22 <_to_x+0x30>

0001cd3a <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1cd3a:	2100      	movs	r1, #0
{
   1cd3c:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1cd3e:	e9d0 6500 	ldrd	r6, r5, [r0]
   1cd42:	0872      	lsrs	r2, r6, #1
   1cd44:	f006 0301 	and.w	r3, r6, #1
   1cd48:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1cd4c:	189b      	adds	r3, r3, r2
   1cd4e:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1cd52:	eb44 0101 	adc.w	r1, r4, r1
   1cd56:	e9c0 3100 	strd	r3, r1, [r0]
}
   1cd5a:	bd70      	pop	{r4, r5, r6, pc}

0001cd5c <_ldiv5>:
{
   1cd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t rem = *v, quot = 0U, q;
   1cd5e:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1cd62:	2705      	movs	r7, #5
	rem += 2U;
   1cd64:	3302      	adds	r3, #2
   1cd66:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1cd6a:	fbb2 fef7 	udiv	lr, r2, r7
   1cd6e:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1cd72:	fb07 f10e 	mul.w	r1, r7, lr
   1cd76:	ebb3 060c 	subs.w	r6, r3, ip
   1cd7a:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1cd7e:	08f2      	lsrs	r2, r6, #3
   1cd80:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1cd84:	fbb2 f1f7 	udiv	r1, r2, r7
   1cd88:	00ca      	lsls	r2, r1, #3
		quot += q;
   1cd8a:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1cd8e:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1cd92:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
   1cd96:	fba2 2307 	umull	r2, r3, r2, r7
   1cd9a:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1cd9c:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1cda0:	18e4      	adds	r4, r4, r3
   1cda2:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   1cda6:	e9c0 4500 	strd	r4, r5, [r0]
}
   1cdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cdac <_get_digit>:
	if (*digit_count > 0) {
   1cdac:	680b      	ldr	r3, [r1, #0]
{
   1cdae:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1cdb0:	2b00      	cmp	r3, #0
   1cdb2:	dd10      	ble.n	1cdd6 <_get_digit+0x2a>
		*digit_count -= 1;
   1cdb4:	3b01      	subs	r3, #1
   1cdb6:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1cdb8:	210a      	movs	r1, #10
   1cdba:	6802      	ldr	r2, [r0, #0]
   1cdbc:	6844      	ldr	r4, [r0, #4]
   1cdbe:	fba2 5601 	umull	r5, r6, r2, r1
   1cdc2:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1cdc6:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1cdca:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1cdce:	0f31      	lsrs	r1, r6, #28
   1cdd0:	3130      	adds	r1, #48	; 0x30
}
   1cdd2:	4608      	mov	r0, r1
   1cdd4:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1cdd6:	2130      	movs	r1, #48	; 0x30
   1cdd8:	e7fb      	b.n	1cdd2 <_get_digit+0x26>

0001cdda <_stdout_hook_default>:
}
   1cdda:	f04f 30ff 	mov.w	r0, #4294967295
   1cdde:	4770      	bx	lr

0001cde0 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   1cde0:	f7f2 bb48 	b.w	f474 <z_impl_zephyr_fputc>

0001cde4 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1cde4:	684b      	ldr	r3, [r1, #4]
   1cde6:	2b01      	cmp	r3, #1
   1cde8:	dd07      	ble.n	1cdfa <sprintf_out+0x16>
		*(p->ptr) = c;
   1cdea:	680b      	ldr	r3, [r1, #0]
   1cdec:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1cdee:	680b      	ldr	r3, [r1, #0]
   1cdf0:	3301      	adds	r3, #1
   1cdf2:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1cdf4:	684b      	ldr	r3, [r1, #4]
   1cdf6:	3b01      	subs	r3, #1
   1cdf8:	604b      	str	r3, [r1, #4]
}
   1cdfa:	2000      	movs	r0, #0
   1cdfc:	4770      	bx	lr

0001cdfe <fixed_data_unref>:
}
   1cdfe:	4770      	bx	lr

0001ce00 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ce00:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1ce02:	6849      	ldr	r1, [r1, #4]
   1ce04:	6809      	ldr	r1, [r1, #0]
   1ce06:	f7f2 bb91 	b.w	f52c <net_buf_alloc_len>

0001ce0a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1ce0a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1ce0c:	4618      	mov	r0, r3
   1ce0e:	681b      	ldr	r3, [r3, #0]
   1ce10:	2b00      	cmp	r3, #0
   1ce12:	d1fb      	bne.n	1ce0c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1ce14:	4770      	bx	lr

0001ce16 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1ce16:	6802      	ldr	r2, [r0, #0]
{
   1ce18:	b510      	push	{r4, lr}
	if (parent->frags) {
   1ce1a:	b12a      	cbz	r2, 1ce28 <net_buf_frag_insert+0x12>
   1ce1c:	460b      	mov	r3, r1
	while (buf->frags) {
   1ce1e:	461c      	mov	r4, r3
   1ce20:	681b      	ldr	r3, [r3, #0]
   1ce22:	2b00      	cmp	r3, #0
   1ce24:	d1fb      	bne.n	1ce1e <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ce26:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ce28:	6001      	str	r1, [r0, #0]
}
   1ce2a:	bd10      	pop	{r4, pc}

0001ce2c <net_buf_simple_add>:
	return buf->data + buf->len;
   1ce2c:	8883      	ldrh	r3, [r0, #4]
   1ce2e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1ce30:	4419      	add	r1, r3
   1ce32:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1ce34:	18d0      	adds	r0, r2, r3
   1ce36:	4770      	bx	lr

0001ce38 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ce38:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ce3a:	b94a      	cbnz	r2, 1ce50 <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ce3c:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ce3e:	b93b      	cbnz	r3, 1ce50 <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ce40:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ce42:	b92a      	cbnz	r2, 1ce50 <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1ce44:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ce46:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   1ce4a:	4258      	negs	r0, r3
   1ce4c:	4158      	adcs	r0, r3
   1ce4e:	4770      	bx	lr
   1ce50:	2000      	movs	r0, #0
   1ce52:	4770      	bx	lr

0001ce54 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1ce54:	b538      	push	{r3, r4, r5, lr}
	if (!pkt->frags) {
   1ce56:	6903      	ldr	r3, [r0, #16]
{
   1ce58:	4604      	mov	r4, r0
   1ce5a:	460d      	mov	r5, r1
	if (!pkt->frags) {
   1ce5c:	b923      	cbnz	r3, 1ce68 <processing_data+0x14>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1ce5e:	4620      	mov	r0, r4
		break;
	}
}
   1ce60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_pkt_unref(pkt);
   1ce64:	f000 bea1 	b.w	1dbaa <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
   1ce68:	b171      	cbz	r1, 1ce88 <processing_data+0x34>
	net_pkt_cursor_init(pkt);
   1ce6a:	4620      	mov	r0, r4
   1ce6c:	f000 fee9 	bl	1dc42 <net_pkt_cursor_init>
	return pkt->frags->data;
   1ce70:	6923      	ldr	r3, [r4, #16]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1ce72:	689b      	ldr	r3, [r3, #8]
   1ce74:	781b      	ldrb	r3, [r3, #0]
   1ce76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1ce7a:	2b60      	cmp	r3, #96	; 0x60
   1ce7c:	d1ef      	bne.n	1ce5e <processing_data+0xa>
		return net_ipv6_input(pkt, is_loopback);
   1ce7e:	4629      	mov	r1, r5
   1ce80:	4620      	mov	r0, r4
   1ce82:	f001 faf4 	bl	1e46e <net_ipv6_input>
   1ce86:	e005      	b.n	1ce94 <processing_data+0x40>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   1ce88:	4601      	mov	r1, r0
   1ce8a:	6a00      	ldr	r0, [r0, #32]
   1ce8c:	f000 fc76 	bl	1d77c <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   1ce90:	2801      	cmp	r0, #1
   1ce92:	d0ea      	beq.n	1ce6a <processing_data+0x16>
	switch (process_data(pkt, is_loopback)) {
   1ce94:	2800      	cmp	r0, #0
   1ce96:	d1e2      	bne.n	1ce5e <processing_data+0xa>
}
   1ce98:	bd38      	pop	{r3, r4, r5, pc}

0001ce9a <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1ce9a:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1ce9c:	f001 f8cd 	bl	1e03a <net_pkt_init>

	net_context_init();
   1cea0:	f7f3 fa26 	bl	102f0 <net_context_init>
	net_icmpv6_init();
   1cea4:	f7f3 fb88 	bl	105b8 <net_icmpv6_init>
	net_ipv6_init();
   1cea8:	f001 fc60 	bl	1e76c <net_ipv6_init>
		net_conn_init();
   1ceac:	f7f4 faa4 	bl	113f8 <net_conn_init>
	net_route_init();
   1ceb0:	f002 fbcd 	bl	1f64e <net_route_init>
	net_if_init();
   1ceb4:	f7f3 f978 	bl	101a8 <net_if_init>
	net_tc_rx_init();
   1ceb8:	f7f3 fb28 	bl	1050c <net_tc_rx_init>
	net_if_post_init();
   1cebc:	f7f3 f9d4 	bl	10268 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1cec0:	2000      	movs	r0, #0
   1cec2:	bd08      	pop	{r3, pc}

0001cec4 <net_send_data>:
{
   1cec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pkt || !pkt->frags) {
   1cec8:	4604      	mov	r4, r0
{
   1ceca:	b090      	sub	sp, #64	; 0x40
	if (!pkt || !pkt->frags) {
   1cecc:	2800      	cmp	r0, #0
   1cece:	f000 8090 	beq.w	1cff2 <net_send_data+0x12e>
   1ced2:	6903      	ldr	r3, [r0, #16]
   1ced4:	2b00      	cmp	r3, #0
   1ced6:	f000 808c 	beq.w	1cff2 <net_send_data+0x12e>
	if (!net_pkt_iface(pkt)) {
   1ceda:	6a03      	ldr	r3, [r0, #32]
   1cedc:	2b00      	cmp	r3, #0
   1cede:	f000 808b 	beq.w	1cff8 <net_send_data+0x134>
	net_pkt_trim_buffer(pkt);
   1cee2:	f000 fe94 	bl	1dc0e <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   1cee6:	4620      	mov	r0, r4
   1cee8:	f000 feab 	bl	1dc42 <net_pkt_cursor_init>
	return pkt->family;
   1ceec:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (net_pkt_family(pkt) == AF_INET6) {
   1cef0:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1cef4:	2b02      	cmp	r3, #2
   1cef6:	d172      	bne.n	1cfde <net_send_data+0x11a>
	return pkt->frags->data;
   1cef8:	6923      	ldr	r3, [r4, #16]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1cefa:	689d      	ldr	r5, [r3, #8]
   1cefc:	f7f3 f9f4 	bl	102e8 <net_ipv6_unspecified_address>
   1cf00:	3518      	adds	r5, #24
   1cf02:	4601      	mov	r1, r0
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1cf04:	2210      	movs	r2, #16
   1cf06:	4628      	mov	r0, r5
   1cf08:	f7ff fe95 	bl	1cc36 <memcmp>
   1cf0c:	b920      	cbnz	r0, 1cf18 <net_send_data+0x54>
			return -EADDRNOTAVAIL;
   1cf0e:	f06f 0030 	mvn.w	r0, #48	; 0x30
}
   1cf12:	b010      	add	sp, #64	; 0x40
   1cf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cf18:	6923      	ldr	r3, [r4, #16]
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1cf1a:	689d      	ldr	r5, [r3, #8]
   1cf1c:	3518      	adds	r5, #24
   1cf1e:	4628      	mov	r0, r5
   1cf20:	f7ff ff8a 	bl	1ce38 <net_ipv6_is_addr_loopback>
   1cf24:	4601      	mov	r1, r0
   1cf26:	2800      	cmp	r0, #0
   1cf28:	d047      	beq.n	1cfba <net_send_data+0xf6>
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1cf2a:	ae0c      	add	r6, sp, #48	; 0x30
   1cf2c:	4635      	mov	r5, r6
   1cf2e:	6923      	ldr	r3, [r4, #16]
   1cf30:	689a      	ldr	r2, [r3, #8]
   1cf32:	f102 0308 	add.w	r3, r2, #8
   1cf36:	3218      	adds	r2, #24
   1cf38:	4637      	mov	r7, r6
   1cf3a:	6818      	ldr	r0, [r3, #0]
   1cf3c:	6859      	ldr	r1, [r3, #4]
   1cf3e:	3308      	adds	r3, #8
   1cf40:	c703      	stmia	r7!, {r0, r1}
   1cf42:	4293      	cmp	r3, r2
   1cf44:	463e      	mov	r6, r7
   1cf46:	d1f7      	bne.n	1cf38 <net_send_data+0x74>
   1cf48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cf4c:	466e      	mov	r6, sp
   1cf4e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1cf52:	af08      	add	r7, sp, #32
   1cf54:	46bc      	mov	ip, r7
   1cf56:	6923      	ldr	r3, [r4, #16]
   1cf58:	689b      	ldr	r3, [r3, #8]
   1cf5a:	f103 0218 	add.w	r2, r3, #24
   1cf5e:	f103 0828 	add.w	r8, r3, #40	; 0x28
   1cf62:	46be      	mov	lr, r7
   1cf64:	6810      	ldr	r0, [r2, #0]
   1cf66:	6851      	ldr	r1, [r2, #4]
   1cf68:	3208      	adds	r2, #8
   1cf6a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1cf6e:	4542      	cmp	r2, r8
   1cf70:	4677      	mov	r7, lr
   1cf72:	d1f6      	bne.n	1cf62 <net_send_data+0x9e>
   1cf74:	4667      	mov	r7, ip
   1cf76:	3308      	adds	r3, #8
   1cf78:	463a      	mov	r2, r7
   1cf7a:	ca03      	ldmia	r2!, {r0, r1}
   1cf7c:	42aa      	cmp	r2, r5
   1cf7e:	6018      	str	r0, [r3, #0]
   1cf80:	6059      	str	r1, [r3, #4]
   1cf82:	4617      	mov	r7, r2
   1cf84:	f103 0308 	add.w	r3, r3, #8
   1cf88:	d1f6      	bne.n	1cf78 <net_send_data+0xb4>
   1cf8a:	6923      	ldr	r3, [r4, #16]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1cf8c:	ad04      	add	r5, sp, #16
   1cf8e:	689f      	ldr	r7, [r3, #8]
   1cf90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1cf94:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1cf98:	f107 0318 	add.w	r3, r7, #24
   1cf9c:	462a      	mov	r2, r5
   1cf9e:	ca03      	ldmia	r2!, {r0, r1}
   1cfa0:	4562      	cmp	r2, ip
   1cfa2:	6018      	str	r0, [r3, #0]
   1cfa4:	6059      	str	r1, [r3, #4]
   1cfa6:	4615      	mov	r5, r2
   1cfa8:	f103 0308 	add.w	r3, r3, #8
   1cfac:	d1f6      	bne.n	1cf9c <net_send_data+0xd8>
		processing_data(pkt, true);
   1cfae:	4620      	mov	r0, r4
   1cfb0:	2101      	movs	r1, #1
   1cfb2:	f7ff ff4f 	bl	1ce54 <processing_data>
		return 0;
   1cfb6:	2000      	movs	r0, #0
   1cfb8:	e7ab      	b.n	1cf12 <net_send_data+0x4e>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1cfba:	4628      	mov	r0, r5
   1cfbc:	f7f2 fdb2 	bl	fb24 <net_if_ipv6_addr_lookup>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1cfc0:	2800      	cmp	r0, #0
   1cfc2:	d1b2      	bne.n	1cf2a <net_send_data+0x66>
   1cfc4:	6923      	ldr	r3, [r4, #16]
   1cfc6:	6898      	ldr	r0, [r3, #8]
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   1cfc8:	7e03      	ldrb	r3, [r0, #24]
   1cfca:	2bff      	cmp	r3, #255	; 0xff
   1cfcc:	d102      	bne.n	1cfd4 <net_send_data+0x110>
   1cfce:	7e43      	ldrb	r3, [r0, #25]
   1cfd0:	2b01      	cmp	r3, #1
   1cfd2:	d0ec      	beq.n	1cfae <net_send_data+0xea>
		if (net_ipv6_is_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1cfd4:	3008      	adds	r0, #8
   1cfd6:	f7ff ff2f 	bl	1ce38 <net_ipv6_is_addr_loopback>
   1cfda:	2800      	cmp	r0, #0
   1cfdc:	d197      	bne.n	1cf0e <net_send_data+0x4a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1cfde:	4621      	mov	r1, r4
   1cfe0:	6a20      	ldr	r0, [r4, #32]
   1cfe2:	f000 fbd4 	bl	1d78e <net_if_send_data>
		return -EIO;
   1cfe6:	2802      	cmp	r0, #2
   1cfe8:	bf14      	ite	ne
   1cfea:	2000      	movne	r0, #0
   1cfec:	f06f 0004 	mvneq.w	r0, #4
   1cff0:	e78f      	b.n	1cf12 <net_send_data+0x4e>
		return -ENODATA;
   1cff2:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   1cff6:	e78c      	b.n	1cf12 <net_send_data+0x4e>
		return -EINVAL;
   1cff8:	f06f 0015 	mvn.w	r0, #21
   1cffc:	e789      	b.n	1cf12 <net_send_data+0x4e>

0001cffe <sys_slist_append>:
	parent->next = child;
   1cffe:	2300      	movs	r3, #0
   1d000:	600b      	str	r3, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
   1d002:	6843      	ldr	r3, [r0, #4]
   1d004:	b913      	cbnz	r3, 1d00c <sys_slist_append+0xe>
	list->head = node;
   1d006:	e9c0 1100 	strd	r1, r1, [r0]
}
   1d00a:	4770      	bx	lr
	parent->next = child;
   1d00c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1d00e:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   1d010:	4770      	bx	lr

0001d012 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d012:	2200      	movs	r2, #0
   1d014:	6803      	ldr	r3, [r0, #0]
   1d016:	b90b      	cbnz	r3, 1d01c <sys_slist_find_and_remove+0xa>
   1d018:	4618      	mov	r0, r3
   1d01a:	4770      	bx	lr
   1d01c:	428b      	cmp	r3, r1
   1d01e:	d110      	bne.n	1d042 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1d020:	680b      	ldr	r3, [r1, #0]
   1d022:	b942      	cbnz	r2, 1d036 <sys_slist_find_and_remove+0x24>
   1d024:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1d026:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d028:	4291      	cmp	r1, r2
   1d02a:	d100      	bne.n	1d02e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1d02c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1d02e:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d030:	2001      	movs	r0, #1
	parent->next = child;
   1d032:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d034:	4770      	bx	lr
	parent->next = child;
   1d036:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d038:	6843      	ldr	r3, [r0, #4]
   1d03a:	4299      	cmp	r1, r3
	list->tail = node;
   1d03c:	bf08      	it	eq
   1d03e:	6042      	streq	r2, [r0, #4]
}
   1d040:	e7f5      	b.n	1d02e <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d042:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d044:	681b      	ldr	r3, [r3, #0]
   1d046:	e7e6      	b.n	1d016 <sys_slist_find_and_remove+0x4>

0001d048 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1d048:	b110      	cbz	r0, 1d050 <net_if_l2+0x8>
   1d04a:	6800      	ldr	r0, [r0, #0]
   1d04c:	b100      	cbz	r0, 1d050 <net_if_l2+0x8>
	return iface->if_dev->l2;
   1d04e:	6840      	ldr	r0, [r0, #4]
}
   1d050:	4770      	bx	lr

0001d052 <net_context_send_cb>:
{
   1d052:	b410      	push	{r4}
	if (!context) {
   1d054:	b130      	cbz	r0, 1d064 <net_context_send_cb+0x12>
	if (context->send_cb) {
   1d056:	6c84      	ldr	r4, [r0, #72]	; 0x48
   1d058:	b124      	cbz	r4, 1d064 <net_context_send_cb+0x12>
		context->send_cb(context, status, context->user_data);
   1d05a:	4623      	mov	r3, r4
   1d05c:	6802      	ldr	r2, [r0, #0]
}
   1d05e:	f85d 4b04 	ldr.w	r4, [sp], #4
		context->send_cb(context, status, context->user_data);
   1d062:	4718      	bx	r3
}
   1d064:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d068:	4770      	bx	lr

0001d06a <l2_flags_get>:
{
   1d06a:	b510      	push	{r4, lr}
   1d06c:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1d06e:	f7ff ffeb 	bl	1d048 <net_if_l2>
   1d072:	b128      	cbz	r0, 1d080 <l2_flags_get+0x16>
   1d074:	68c2      	ldr	r2, [r0, #12]
   1d076:	b11a      	cbz	r2, 1d080 <l2_flags_get+0x16>
}
   1d078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1d07c:	4618      	mov	r0, r3
   1d07e:	4710      	bx	r2
}
   1d080:	2000      	movs	r0, #0
   1d082:	bd10      	pop	{r4, pc}

0001d084 <net_ipv6_is_prefix>:
	if (length > 128) {
   1d084:	2a80      	cmp	r2, #128	; 0x80
{
   1d086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d088:	4607      	mov	r7, r0
   1d08a:	460e      	mov	r6, r1
   1d08c:	4614      	mov	r4, r2
	if (length > 128) {
   1d08e:	d901      	bls.n	1d094 <net_ipv6_is_prefix+0x10>
		return false;
   1d090:	2000      	movs	r0, #0
}
   1d092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   1d094:	08d5      	lsrs	r5, r2, #3
   1d096:	462a      	mov	r2, r5
   1d098:	f7ff fdcd 	bl	1cc36 <memcmp>
   1d09c:	2800      	cmp	r0, #0
   1d09e:	d1f7      	bne.n	1d090 <net_ipv6_is_prefix+0xc>
	u8_t bits = 128 - length;
   1d0a0:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1d0a4:	f014 0407 	ands.w	r4, r4, #7
   1d0a8:	d00f      	beq.n	1d0ca <net_ipv6_is_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1d0aa:	5d7b      	ldrb	r3, [r7, r5]
   1d0ac:	5d72      	ldrb	r2, [r6, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1d0ae:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1d0b2:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1d0b4:	23ff      	movs	r3, #255	; 0xff
   1d0b6:	408b      	lsls	r3, r1
   1d0b8:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1d0bc:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1d0c0:	4222      	tst	r2, r4
   1d0c2:	bf0c      	ite	eq
   1d0c4:	2001      	moveq	r0, #1
   1d0c6:	2000      	movne	r0, #0
   1d0c8:	e7e3      	b.n	1d092 <net_ipv6_is_prefix+0xe>
		return true;
   1d0ca:	2001      	movs	r0, #1
   1d0cc:	e7e1      	b.n	1d092 <net_ipv6_is_prefix+0xe>

0001d0ce <net_ipv6_addr_cmp>:
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1d0ce:	2210      	movs	r2, #16
{
   1d0d0:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1d0d2:	f7ff fdb0 	bl	1cc36 <memcmp>
}
   1d0d6:	fab0 f080 	clz	r0, r0
   1d0da:	0940      	lsrs	r0, r0, #5
   1d0dc:	bd08      	pop	{r3, pc}

0001d0de <k_uptime_get_32>:
{
   1d0de:	e92d 4800 	stmdb	sp!, {fp, lr}
	return z_impl_k_uptime_ticks();
   1d0e2:	f003 fb5d 	bl	207a0 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   1d0e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d0ea:	fba0 bc03 	umull	fp, ip, r0, r3
   1d0ee:	fb03 cc01 	mla	ip, r3, r1, ip
   1d0f2:	ea4f 30db 	mov.w	r0, fp, lsr #15
}
   1d0f6:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
   1d0fa:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

0001d0fe <k_delayed_work_remaining_get>:
{
   1d0fe:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   1d100:	300c      	adds	r0, #12
   1d102:	f003 fb0e 	bl	20722 <z_timeout_remaining>
			return (u32_t)((t * to_hz + off) / from_hz);
   1d106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d10a:	fba0 2303 	umull	r2, r3, r0, r3
   1d10e:	0bd0      	lsrs	r0, r2, #15
}
   1d110:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1d114:	bd08      	pop	{r3, pc}

0001d116 <net_if_ipv6_addr_lookup_by_iface>:
{
   1d116:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1d118:	6844      	ldr	r4, [r0, #4]
{
   1d11a:	460d      	mov	r5, r1
	if (!ipv6) {
   1d11c:	b90c      	cbnz	r4, 1d122 <net_if_ipv6_addr_lookup_by_iface+0xc>
		return NULL;
   1d11e:	2000      	movs	r0, #0
}
   1d120:	bd38      	pop	{r3, r4, r5, pc}
		if (!ipv6->unicast[i].is_used ||
   1d122:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1d126:	079a      	lsls	r2, r3, #30
   1d128:	d508      	bpl.n	1d13c <net_if_ipv6_addr_lookup_by_iface+0x26>
   1d12a:	8823      	ldrh	r3, [r4, #0]
   1d12c:	2b02      	cmp	r3, #2
   1d12e:	d105      	bne.n	1d13c <net_if_ipv6_addr_lookup_by_iface+0x26>
		if (net_ipv6_is_prefix(
   1d130:	2280      	movs	r2, #128	; 0x80
   1d132:	4628      	mov	r0, r5
   1d134:	1d21      	adds	r1, r4, #4
   1d136:	f7ff ffa5 	bl	1d084 <net_ipv6_is_prefix>
   1d13a:	b988      	cbnz	r0, 1d160 <net_if_ipv6_addr_lookup_by_iface+0x4a>
		if (!ipv6->unicast[i].is_used ||
   1d13c:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   1d140:	079b      	lsls	r3, r3, #30
   1d142:	d5ec      	bpl.n	1d11e <net_if_ipv6_addr_lookup_by_iface+0x8>
   1d144:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1d146:	2b02      	cmp	r3, #2
   1d148:	d1e9      	bne.n	1d11e <net_if_ipv6_addr_lookup_by_iface+0x8>
		if (net_ipv6_is_prefix(
   1d14a:	2280      	movs	r2, #128	; 0x80
   1d14c:	4628      	mov	r0, r5
   1d14e:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1d152:	f7ff ff97 	bl	1d084 <net_ipv6_is_prefix>
   1d156:	2800      	cmp	r0, #0
   1d158:	d0e1      	beq.n	1d11e <net_if_ipv6_addr_lookup_by_iface+0x8>
   1d15a:	2030      	movs	r0, #48	; 0x30
			return &ipv6->unicast[i];
   1d15c:	4420      	add	r0, r4
   1d15e:	e7df      	b.n	1d120 <net_if_ipv6_addr_lookup_by_iface+0xa>
		if (net_ipv6_is_prefix(
   1d160:	2000      	movs	r0, #0
   1d162:	e7fb      	b.n	1d15c <net_if_ipv6_addr_lookup_by_iface+0x46>

0001d164 <net_if_ipv6_addr_add>:
{
   1d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d168:	b08b      	sub	sp, #44	; 0x2c
   1d16a:	460c      	mov	r4, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   1d16c:	a901      	add	r1, sp, #4
{
   1d16e:	4606      	mov	r6, r0
   1d170:	4691      	mov	r9, r2
   1d172:	4698      	mov	r8, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   1d174:	f7f2 fc2c 	bl	f9d0 <net_if_config_ipv6_get>
   1d178:	2800      	cmp	r0, #0
   1d17a:	da03      	bge.n	1d184 <net_if_ipv6_addr_add+0x20>
		return NULL;
   1d17c:	2000      	movs	r0, #0
}
   1d17e:	b00b      	add	sp, #44	; 0x2c
   1d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifaddr = ipv6_addr_find(iface, addr);
   1d184:	6875      	ldr	r5, [r6, #4]
		if (!ipv6->unicast[i].is_used) {
   1d186:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1d18a:	079f      	lsls	r7, r3, #30
   1d18c:	f100 809b 	bmi.w	1d2c6 <net_if_ipv6_addr_add+0x162>
   1d190:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
   1d194:	0798      	lsls	r0, r3, #30
   1d196:	f100 809f 	bmi.w	1d2d8 <net_if_ipv6_addr_add+0x174>
		if (ipv6->unicast[i].is_used) {
   1d19a:	f8dd c004 	ldr.w	ip, [sp, #4]
   1d19e:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   1d1a2:	0799      	lsls	r1, r3, #30
   1d1a4:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1d1a8:	f100 80a6 	bmi.w	1d2f8 <net_if_ipv6_addr_add+0x194>
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
   1d1ac:	2030      	movs	r0, #48	; 0x30
   1d1ae:	fb00 f705 	mul.w	r7, r0, r5
   1d1b2:	eb0c 0e07 	add.w	lr, ip, r7
	ifaddr->is_used = true;
   1d1b6:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1d1ba:	4622      	mov	r2, r4
	ifaddr->is_used = true;
   1d1bc:	f043 0302 	orr.w	r3, r3, #2
   1d1c0:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
	ifaddr->address.family = AF_INET6;
   1d1c4:	2302      	movs	r3, #2
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1d1c6:	ac02      	add	r4, sp, #8
	ifaddr->address.family = AF_INET6;
   1d1c8:	f82c 3007 	strh.w	r3, [ip, r7]
	ifaddr->addr_type = addr_type;
   1d1cc:	4623      	mov	r3, r4
   1d1ce:	f88e 902c 	strb.w	r9, [lr, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1d1d2:	f102 0a10 	add.w	sl, r2, #16
   1d1d6:	46a1      	mov	r9, r4
   1d1d8:	6810      	ldr	r0, [r2, #0]
   1d1da:	6851      	ldr	r1, [r2, #4]
   1d1dc:	3208      	adds	r2, #8
   1d1de:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   1d1e2:	4552      	cmp	r2, sl
   1d1e4:	464c      	mov	r4, r9
   1d1e6:	d1f6      	bne.n	1d1d6 <net_if_ipv6_addr_add+0x72>
   1d1e8:	461a      	mov	r2, r3
   1d1ea:	f10e 0404 	add.w	r4, lr, #4
   1d1ee:	f10d 0918 	add.w	r9, sp, #24
   1d1f2:	4613      	mov	r3, r2
   1d1f4:	cb03      	ldmia	r3!, {r0, r1}
   1d1f6:	454b      	cmp	r3, r9
   1d1f8:	6020      	str	r0, [r4, #0]
   1d1fa:	6061      	str	r1, [r4, #4]
   1d1fc:	461a      	mov	r2, r3
   1d1fe:	f104 0408 	add.w	r4, r4, #8
   1d202:	d1f6      	bne.n	1d1f2 <net_if_ipv6_addr_add+0x8e>
	if (vlifetime) {
   1d204:	2330      	movs	r3, #48	; 0x30
		ifaddr->is_infinite = false;
   1d206:	fb03 c305 	mla	r3, r3, r5, ip
   1d20a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
	if (vlifetime) {
   1d20e:	f1b8 0f00 	cmp.w	r8, #0
   1d212:	d078      	beq.n	1d306 <net_if_ipv6_addr_add+0x1a2>
		ifaddr->is_infinite = false;
   1d214:	f36f 0200 	bfc	r2, #0, #1
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1d218:	4641      	mov	r1, r8
   1d21a:	4670      	mov	r0, lr
		ifaddr->is_infinite = false;
   1d21c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1d220:	f7ef fb5a 	bl	c8d8 <net_if_ipv6_addr_update_lifetime>
		if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d224:	4630      	mov	r0, r6
   1d226:	f7ff ff20 	bl	1d06a <l2_flags_get>
   1d22a:	f010 0a08 	ands.w	sl, r0, #8
   1d22e:	d147      	bne.n	1d2c0 <net_if_ipv6_addr_add+0x15c>
	flags = l2_flags_get(iface);
   1d230:	4630      	mov	r0, r6
					 &ipv6->unicast[i].address.in6_addr);
   1d232:	f8dd 8004 	ldr.w	r8, [sp, #4]
	flags = l2_flags_get(iface);
   1d236:	f7ff ff18 	bl	1d06a <l2_flags_get>
	if (flags & NET_L2_MULTICAST) {
   1d23a:	07c3      	lsls	r3, r0, #31
	flags = l2_flags_get(iface);
   1d23c:	4604      	mov	r4, r0
	if (flags & NET_L2_MULTICAST) {
   1d23e:	d53a      	bpl.n	1d2b6 <net_if_ipv6_addr_add+0x152>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1d240:	f240 2bff 	movw	fp, #767	; 0x2ff
   1d244:	f8ad b018 	strh.w	fp, [sp, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1d248:	f8ad a01a 	strh.w	sl, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1d24c:	f8ad a01c 	strh.w	sl, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1d250:	f8ad a01e 	strh.w	sl, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1d254:	f8ad a020 	strh.w	sl, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1d258:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1d25c:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1d260:	f44f 7a80 	mov.w	sl, #256	; 0x100
   1d264:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
   1d268:	4649      	mov	r1, r9
   1d26a:	4630      	mov	r0, r6
   1d26c:	f002 f914 	bl	1f498 <net_ipv6_mld_join>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
   1d270:	f014 0402 	ands.w	r4, r4, #2
   1d274:	d11f      	bne.n	1d2b6 <net_if_ipv6_addr_add+0x152>
	dst->s6_addr[0]   = 0xFF;
   1d276:	f8cd b018 	str.w	fp, [sp, #24]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1d27a:	f8ad 401c 	strh.w	r4, [sp, #28]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1d27e:	f8ad 401e 	strh.w	r4, [sp, #30]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1d282:	f8ad 4020 	strh.w	r4, [sp, #32]
	dst->s6_addr[12]  = 0xFF;
   1d286:	23ff      	movs	r3, #255	; 0xff
   1d288:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   1d28c:	2330      	movs	r3, #48	; 0x30
   1d28e:	fb03 8505 	mla	r5, r3, r5, r8
	dst->s6_addr[10]  = 0U;
   1d292:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
	dst->s6_addr[13]  = src->s6_addr[13];
   1d296:	7c6b      	ldrb	r3, [r5, #17]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1d298:	44b8      	add	r8, r7
   1d29a:	f898 2013 	ldrb.w	r2, [r8, #19]
	dst->s6_addr[13]  = src->s6_addr[13];
   1d29e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1d2a2:	f898 3012 	ldrb.w	r3, [r8, #18]
   1d2a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d2aa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
   1d2ae:	4649      	mov	r1, r9
   1d2b0:	4630      	mov	r0, r6
   1d2b2:	f002 f8f1 	bl	1f498 <net_ipv6_mld_join>
			net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   1d2b6:	9901      	ldr	r1, [sp, #4]
   1d2b8:	4630      	mov	r0, r6
   1d2ba:	4439      	add	r1, r7
   1d2bc:	f7f2 fb16 	bl	f8ec <net_if_ipv6_start_dad>
		return &ipv6->unicast[i];
   1d2c0:	9801      	ldr	r0, [sp, #4]
   1d2c2:	4438      	add	r0, r7
   1d2c4:	e75b      	b.n	1d17e <net_if_ipv6_addr_add+0x1a>
		if (net_ipv6_addr_cmp(
   1d2c6:	4620      	mov	r0, r4
   1d2c8:	1d29      	adds	r1, r5, #4
   1d2ca:	f7ff ff00 	bl	1d0ce <net_ipv6_addr_cmp>
   1d2ce:	2800      	cmp	r0, #0
   1d2d0:	f43f af5e 	beq.w	1d190 <net_if_ipv6_addr_add+0x2c>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d2d4:	2100      	movs	r1, #0
   1d2d6:	e008      	b.n	1d2ea <net_if_ipv6_addr_add+0x186>
		if (net_ipv6_addr_cmp(
   1d2d8:	4620      	mov	r0, r4
   1d2da:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1d2de:	f7ff fef6 	bl	1d0ce <net_ipv6_addr_cmp>
   1d2e2:	2800      	cmp	r0, #0
   1d2e4:	f43f af59 	beq.w	1d19a <net_if_ipv6_addr_add+0x36>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d2e8:	2101      	movs	r1, #1
			return &ipv6->unicast[i];
   1d2ea:	2030      	movs	r0, #48	; 0x30
   1d2ec:	fb00 5001 	mla	r0, r0, r1, r5
	if (ifaddr) {
   1d2f0:	2800      	cmp	r0, #0
   1d2f2:	f47f af44 	bne.w	1d17e <net_if_ipv6_addr_add+0x1a>
   1d2f6:	e750      	b.n	1d19a <net_if_ipv6_addr_add+0x36>
		if (ipv6->unicast[i].is_used) {
   1d2f8:	f89c 305f 	ldrb.w	r3, [ip, #95]	; 0x5f
   1d2fc:	079a      	lsls	r2, r3, #30
   1d2fe:	f53f af3d 	bmi.w	1d17c <net_if_ipv6_addr_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d302:	2501      	movs	r5, #1
   1d304:	e752      	b.n	1d1ac <net_if_ipv6_addr_add+0x48>
		ifaddr->is_infinite = true;
   1d306:	f042 0201 	orr.w	r2, r2, #1
   1d30a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1d30e:	e789      	b.n	1d224 <net_if_ipv6_addr_add+0xc0>

0001d310 <net_if_start_dad>:
{
   1d310:	b530      	push	{r4, r5, lr}
   1d312:	4604      	mov	r4, r0
   1d314:	b087      	sub	sp, #28
	struct in6_addr addr = { };
   1d316:	2210      	movs	r2, #16
   1d318:	2100      	movs	r1, #0
   1d31a:	a802      	add	r0, sp, #8
   1d31c:	f7ff fcc6 	bl	1ccac <memset>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   1d320:	4620      	mov	r0, r4
   1d322:	a901      	add	r1, sp, #4
   1d324:	f7f2 fb54 	bl	f9d0 <net_if_config_ipv6_get>
   1d328:	2800      	cmp	r0, #0
   1d32a:	db45      	blt.n	1d3b8 <net_if_start_dad+0xa8>
	if (!ipv6) {
   1d32c:	9b01      	ldr	r3, [sp, #4]
   1d32e:	2b00      	cmp	r3, #0
   1d330:	d042      	beq.n	1d3b8 <net_if_start_dad+0xa8>
	addr->s6_addr[0] = 0xfe;
   1d332:	f248 03fe 	movw	r3, #33022	; 0x80fe
	net_ipv6_addr_create_iid(&addr, net_if_get_link_addr(iface));
   1d336:	6825      	ldr	r5, [r4, #0]
   1d338:	9302      	str	r3, [sp, #8]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1d33a:	2300      	movs	r3, #0
   1d33c:	9303      	str	r3, [sp, #12]
	switch (lladdr->len) {
   1d33e:	7d2a      	ldrb	r2, [r5, #20]
   1d340:	2a06      	cmp	r2, #6
   1d342:	d03b      	beq.n	1d3bc <net_if_start_dad+0xac>
   1d344:	2a08      	cmp	r2, #8
   1d346:	d055      	beq.n	1d3f4 <net_if_start_dad+0xe4>
   1d348:	2a02      	cmp	r2, #2
   1d34a:	d113      	bne.n	1d374 <net_if_start_dad+0x64>
		if (lladdr->type == NET_LINK_IEEE802154 ||
   1d34c:	7d6b      	ldrb	r3, [r5, #21]
   1d34e:	2b01      	cmp	r3, #1
   1d350:	d001      	beq.n	1d356 <net_if_start_dad+0x46>
   1d352:	2b06      	cmp	r3, #6
   1d354:	d10e      	bne.n	1d374 <net_if_start_dad+0x64>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1d356:	2300      	movs	r3, #0
   1d358:	9304      	str	r3, [sp, #16]
			addr->s6_addr[11] = 0xff;
   1d35a:	23ff      	movs	r3, #255	; 0xff
   1d35c:	f88d 3013 	strb.w	r3, [sp, #19]
			addr->s6_addr[12] = 0xfe;
   1d360:	23fe      	movs	r3, #254	; 0xfe
   1d362:	f8ad 3014 	strh.w	r3, [sp, #20]
			addr->s6_addr[14] = lladdr->addr[0];
   1d366:	692b      	ldr	r3, [r5, #16]
   1d368:	781a      	ldrb	r2, [r3, #0]
   1d36a:	f88d 2016 	strb.w	r2, [sp, #22]
			addr->s6_addr[15] = lladdr->addr[1];
   1d36e:	785b      	ldrb	r3, [r3, #1]
   1d370:	f88d 3017 	strb.w	r3, [sp, #23]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1d374:	2300      	movs	r3, #0
   1d376:	2201      	movs	r2, #1
   1d378:	a902      	add	r1, sp, #8
   1d37a:	4620      	mov	r0, r4
   1d37c:	f7ff fef2 	bl	1d164 <net_if_ipv6_addr_add>
		if (!ipv6->unicast[i].is_used ||
   1d380:	9901      	ldr	r1, [sp, #4]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1d382:	4605      	mov	r5, r0
		if (!ipv6->unicast[i].is_used ||
   1d384:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   1d388:	079a      	lsls	r2, r3, #30
   1d38a:	d507      	bpl.n	1d39c <net_if_start_dad+0x8c>
   1d38c:	880b      	ldrh	r3, [r1, #0]
   1d38e:	2b02      	cmp	r3, #2
   1d390:	d104      	bne.n	1d39c <net_if_start_dad+0x8c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   1d392:	4288      	cmp	r0, r1
   1d394:	d002      	beq.n	1d39c <net_if_start_dad+0x8c>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   1d396:	4620      	mov	r0, r4
   1d398:	f7f2 faa8 	bl	f8ec <net_if_ipv6_start_dad>
		if (!ipv6->unicast[i].is_used ||
   1d39c:	9901      	ldr	r1, [sp, #4]
   1d39e:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
   1d3a2:	079b      	lsls	r3, r3, #30
   1d3a4:	d508      	bpl.n	1d3b8 <net_if_start_dad+0xa8>
   1d3a6:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
   1d3a8:	2b02      	cmp	r3, #2
   1d3aa:	d105      	bne.n	1d3b8 <net_if_start_dad+0xa8>
		    &ipv6->unicast[i] == ifaddr) {
   1d3ac:	3130      	adds	r1, #48	; 0x30
		    ipv6->unicast[i].address.family != AF_INET6 ||
   1d3ae:	428d      	cmp	r5, r1
   1d3b0:	d002      	beq.n	1d3b8 <net_if_start_dad+0xa8>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
   1d3b2:	4620      	mov	r0, r4
   1d3b4:	f7f2 fa9a 	bl	f8ec <net_if_ipv6_start_dad>
}
   1d3b8:	b007      	add	sp, #28
   1d3ba:	bd30      	pop	{r4, r5, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1d3bc:	2203      	movs	r2, #3
   1d3be:	6929      	ldr	r1, [r5, #16]
   1d3c0:	a804      	add	r0, sp, #16
   1d3c2:	f7ff fc48 	bl	1cc56 <memcpy>
		addr->s6_addr[11] = 0xff;
   1d3c6:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1d3c8:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   1d3ca:	f88d 3013 	strb.w	r3, [sp, #19]
		addr->s6_addr[12] = 0xfe;
   1d3ce:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1d3d0:	6929      	ldr	r1, [r5, #16]
   1d3d2:	f10d 0015 	add.w	r0, sp, #21
   1d3d6:	4411      	add	r1, r2
		addr->s6_addr[12] = 0xfe;
   1d3d8:	f88d 3014 	strb.w	r3, [sp, #20]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1d3dc:	f7ff fc3b 	bl	1cc56 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1d3e0:	7d6b      	ldrb	r3, [r5, #21]
   1d3e2:	2b03      	cmp	r3, #3
   1d3e4:	d1c6      	bne.n	1d374 <net_if_start_dad+0x64>
		addr->s6_addr[8] ^= 0x02;
   1d3e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1d3ea:	f083 0302 	eor.w	r3, r3, #2
   1d3ee:	f88d 3010 	strb.w	r3, [sp, #16]
		break;
   1d3f2:	e7bf      	b.n	1d374 <net_if_start_dad+0x64>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1d3f4:	6929      	ldr	r1, [r5, #16]
   1d3f6:	a804      	add	r0, sp, #16
   1d3f8:	f7ff fc2d 	bl	1cc56 <memcpy>
   1d3fc:	e7f3      	b.n	1d3e6 <net_if_start_dad+0xd6>

0001d3fe <net_if_ipv6_maddr_add>:
{
   1d3fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d400:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   1d402:	a901      	add	r1, sp, #4
   1d404:	f7f2 fae4 	bl	f9d0 <net_if_config_ipv6_get>
   1d408:	2800      	cmp	r0, #0
   1d40a:	db2c      	blt.n	1d466 <net_if_ipv6_maddr_add+0x68>
	if (!net_ipv6_is_addr_mcast(addr)) {
   1d40c:	782b      	ldrb	r3, [r5, #0]
   1d40e:	2bff      	cmp	r3, #255	; 0xff
   1d410:	d129      	bne.n	1d466 <net_if_ipv6_maddr_add+0x68>
		if (ipv6->mcast[i].is_used) {
   1d412:	9801      	ldr	r0, [sp, #4]
   1d414:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1d418:	f013 0301 	ands.w	r3, r3, #1
   1d41c:	d008      	beq.n	1d430 <net_if_ipv6_maddr_add+0x32>
   1d41e:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
   1d422:	07da      	lsls	r2, r3, #31
   1d424:	d51d      	bpl.n	1d462 <net_if_ipv6_maddr_add+0x64>
   1d426:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   1d42a:	07db      	lsls	r3, r3, #31
   1d42c:	d41b      	bmi.n	1d466 <net_if_ipv6_maddr_add+0x68>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1d42e:	2302      	movs	r3, #2
		ipv6->mcast[i].is_used = true;
   1d430:	2418      	movs	r4, #24
   1d432:	435c      	muls	r4, r3
   1d434:	1903      	adds	r3, r0, r4
   1d436:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
   1d43a:	4629      	mov	r1, r5
		ipv6->mcast[i].is_used = true;
   1d43c:	f042 0201 	orr.w	r2, r2, #1
   1d440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		ipv6->mcast[i].address.family = AF_INET6;
   1d444:	2202      	movs	r2, #2
   1d446:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
   1d44a:	f104 0364 	add.w	r3, r4, #100	; 0x64
   1d44e:	4418      	add	r0, r3
   1d450:	2210      	movs	r2, #16
   1d452:	f7ff fc00 	bl	1cc56 <memcpy>
		return &ipv6->mcast[i];
   1d456:	9801      	ldr	r0, [sp, #4]
   1d458:	f104 0360 	add.w	r3, r4, #96	; 0x60
   1d45c:	4418      	add	r0, r3
}
   1d45e:	b003      	add	sp, #12
   1d460:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1d462:	2301      	movs	r3, #1
   1d464:	e7e4      	b.n	1d430 <net_if_ipv6_maddr_add+0x32>
		return NULL;
   1d466:	2000      	movs	r0, #0
   1d468:	e7f9      	b.n	1d45e <net_if_ipv6_maddr_add+0x60>

0001d46a <net_if_ipv6_maddr_rm>:
{
   1d46a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1d46e:	6845      	ldr	r5, [r0, #4]
{
   1d470:	4689      	mov	r9, r1
	if (!ipv6) {
   1d472:	b1d5      	cbz	r5, 1d4aa <net_if_ipv6_maddr_rm+0x40>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1d474:	2400      	movs	r4, #0
		if (!ipv6->mcast[i].is_used) {
   1d476:	2718      	movs	r7, #24
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   1d478:	f105 0864 	add.w	r8, r5, #100	; 0x64
		if (!ipv6->mcast[i].is_used) {
   1d47c:	fb07 f004 	mul.w	r0, r7, r4
   1d480:	182b      	adds	r3, r5, r0
   1d482:	f103 0670 	add.w	r6, r3, #112	; 0x70
   1d486:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1d48a:	07db      	lsls	r3, r3, #31
   1d48c:	d50a      	bpl.n	1d4a4 <net_if_ipv6_maddr_rm+0x3a>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
   1d48e:	4649      	mov	r1, r9
   1d490:	4440      	add	r0, r8
   1d492:	f7ff fe1c 	bl	1d0ce <net_ipv6_addr_cmp>
   1d496:	b128      	cbz	r0, 1d4a4 <net_if_ipv6_maddr_rm+0x3a>
		ipv6->mcast[i].is_used = false;
   1d498:	7933      	ldrb	r3, [r6, #4]
   1d49a:	f36f 0300 	bfc	r3, #0, #1
   1d49e:	7133      	strb	r3, [r6, #4]
}
   1d4a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1d4a4:	3401      	adds	r4, #1
   1d4a6:	2c03      	cmp	r4, #3
   1d4a8:	d1e8      	bne.n	1d47c <net_if_ipv6_maddr_rm+0x12>
		return false;
   1d4aa:	2000      	movs	r0, #0
   1d4ac:	e7f8      	b.n	1d4a0 <net_if_ipv6_maddr_rm+0x36>

0001d4ae <remove_prefix_addresses>:
{
   1d4ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d4b0:	4616      	mov	r6, r2
   1d4b2:	461a      	mov	r2, r3
		if (!ipv6->unicast[i].is_used ||
   1d4b4:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
{
   1d4b8:	460c      	mov	r4, r1
		if (!ipv6->unicast[i].is_used ||
   1d4ba:	0799      	lsls	r1, r3, #30
{
   1d4bc:	4605      	mov	r5, r0
		if (!ipv6->unicast[i].is_used ||
   1d4be:	d514      	bpl.n	1d4ea <remove_prefix_addresses+0x3c>
   1d4c0:	8823      	ldrh	r3, [r4, #0]
   1d4c2:	2b02      	cmp	r3, #2
   1d4c4:	d111      	bne.n	1d4ea <remove_prefix_addresses+0x3c>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   1d4c6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1d4ca:	2b01      	cmp	r3, #1
   1d4cc:	d10d      	bne.n	1d4ea <remove_prefix_addresses+0x3c>
				ipv6->unicast[i].address.in6_addr.s6_addr,
   1d4ce:	1d21      	adds	r1, r4, #4
		if (net_ipv6_is_prefix(
   1d4d0:	4630      	mov	r0, r6
   1d4d2:	e9cd 1200 	strd	r1, r2, [sp]
   1d4d6:	f7ff fdd5 	bl	1d084 <net_ipv6_is_prefix>
   1d4da:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d4de:	b120      	cbz	r0, 1d4ea <remove_prefix_addresses+0x3c>
			net_if_ipv6_addr_rm(iface,
   1d4e0:	4628      	mov	r0, r5
   1d4e2:	9200      	str	r2, [sp, #0]
   1d4e4:	f7f2 fbb0 	bl	fc48 <net_if_ipv6_addr_rm>
   1d4e8:	9a00      	ldr	r2, [sp, #0]
		if (!ipv6->unicast[i].is_used ||
   1d4ea:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   1d4ee:	079b      	lsls	r3, r3, #30
   1d4f0:	d514      	bpl.n	1d51c <remove_prefix_addresses+0x6e>
   1d4f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1d4f4:	2b02      	cmp	r3, #2
   1d4f6:	d111      	bne.n	1d51c <remove_prefix_addresses+0x6e>
		    ipv6->unicast[i].address.family != AF_INET6 ||
   1d4f8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   1d4fc:	2b01      	cmp	r3, #1
   1d4fe:	d10d      	bne.n	1d51c <remove_prefix_addresses+0x6e>
				ipv6->unicast[i].address.in6_addr.s6_addr,
   1d500:	f104 0134 	add.w	r1, r4, #52	; 0x34
		if (net_ipv6_is_prefix(
   1d504:	4630      	mov	r0, r6
   1d506:	9100      	str	r1, [sp, #0]
   1d508:	f7ff fdbc 	bl	1d084 <net_ipv6_is_prefix>
   1d50c:	9900      	ldr	r1, [sp, #0]
   1d50e:	b128      	cbz	r0, 1d51c <remove_prefix_addresses+0x6e>
			net_if_ipv6_addr_rm(iface,
   1d510:	4628      	mov	r0, r5
}
   1d512:	b002      	add	sp, #8
   1d514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_if_ipv6_addr_rm(iface,
   1d518:	f7f2 bb96 	b.w	fc48 <net_if_ipv6_addr_rm>
}
   1d51c:	b002      	add	sp, #8
   1d51e:	bd70      	pop	{r4, r5, r6, pc}

0001d520 <net_if_ipv6_prefix_add>:
{
   1d520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d524:	b086      	sub	sp, #24
   1d526:	460d      	mov	r5, r1
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   1d528:	a901      	add	r1, sp, #4
{
   1d52a:	4680      	mov	r8, r0
   1d52c:	4617      	mov	r7, r2
   1d52e:	461e      	mov	r6, r3
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
   1d530:	f7f2 fa4e 	bl	f9d0 <net_if_config_ipv6_get>
   1d534:	2800      	cmp	r0, #0
   1d536:	da03      	bge.n	1d540 <net_if_ipv6_prefix_add+0x20>
		return NULL;
   1d538:	2000      	movs	r0, #0
}
   1d53a:	b006      	add	sp, #24
   1d53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ifprefix = ipv6_prefix_find(iface, prefix, len);
   1d540:	f8d8 4004 	ldr.w	r4, [r8, #4]
	if (!ipv6) {
   1d544:	2c00      	cmp	r4, #0
   1d546:	d147      	bne.n	1d5d8 <net_if_ipv6_prefix_add+0xb8>
	if (!ipv6) {
   1d548:	9c01      	ldr	r4, [sp, #4]
   1d54a:	2c00      	cmp	r4, #0
   1d54c:	d0f4      	beq.n	1d538 <net_if_ipv6_prefix_add+0x18>
		if (ipv6->prefix[i].is_used) {
   1d54e:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
   1d552:	0791      	lsls	r1, r2, #30
   1d554:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1d558:	d504      	bpl.n	1d564 <net_if_ipv6_prefix_add+0x44>
   1d55a:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1d55e:	079a      	lsls	r2, r3, #30
   1d560:	d4ea      	bmi.n	1d538 <net_if_ipv6_prefix_add+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1d562:	2301      	movs	r3, #1
		net_if_ipv6_prefix_init(iface, &ipv6->prefix[i], prefix,
   1d564:	2128      	movs	r1, #40	; 0x28
   1d566:	4359      	muls	r1, r3
   1d568:	f101 0ca8 	add.w	ip, r1, #168	; 0xa8
	ifprefix->is_used = true;
   1d56c:	4421      	add	r1, r4
   1d56e:	f891 20cd 	ldrb.w	r2, [r1, #205]	; 0xcd
	ifprefix->len = len;
   1d572:	f881 70cc 	strb.w	r7, [r1, #204]	; 0xcc
	ifprefix->is_used = true;
   1d576:	f042 0202 	orr.w	r2, r2, #2
   1d57a:	f881 20cd 	strb.w	r2, [r1, #205]	; 0xcd
	net_ipaddr_copy(&ifprefix->prefix, addr);
   1d57e:	462a      	mov	r2, r5
   1d580:	ad02      	add	r5, sp, #8
   1d582:	462f      	mov	r7, r5
	ifprefix->iface = iface;
   1d584:	f8c1 80c8 	str.w	r8, [r1, #200]	; 0xc8
	net_ipaddr_copy(&ifprefix->prefix, addr);
   1d588:	f102 0810 	add.w	r8, r2, #16
   1d58c:	46ae      	mov	lr, r5
   1d58e:	6810      	ldr	r0, [r2, #0]
   1d590:	6851      	ldr	r1, [r2, #4]
   1d592:	3208      	adds	r2, #8
   1d594:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1d598:	4542      	cmp	r2, r8
   1d59a:	4675      	mov	r5, lr
   1d59c:	d1f6      	bne.n	1d58c <net_if_ipv6_prefix_add+0x6c>
   1d59e:	eb04 020c 	add.w	r2, r4, ip
   1d5a2:	3210      	adds	r2, #16
   1d5a4:	f10d 0e18 	add.w	lr, sp, #24
   1d5a8:	463d      	mov	r5, r7
   1d5aa:	cd03      	ldmia	r5!, {r0, r1}
   1d5ac:	4575      	cmp	r5, lr
   1d5ae:	6010      	str	r0, [r2, #0]
   1d5b0:	6051      	str	r1, [r2, #4]
   1d5b2:	462f      	mov	r7, r5
   1d5b4:	f102 0208 	add.w	r2, r2, #8
   1d5b8:	d1f6      	bne.n	1d5a8 <net_if_ipv6_prefix_add+0x88>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1d5ba:	2228      	movs	r2, #40	; 0x28
   1d5bc:	fb02 4403 	mla	r4, r2, r3, r4
   1d5c0:	1c73      	adds	r3, r6, #1
   1d5c2:	425e      	negs	r6, r3
   1d5c4:	415e      	adcs	r6, r3
   1d5c6:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
		return &ipv6->prefix[i];
   1d5ca:	9801      	ldr	r0, [sp, #4]
   1d5cc:	f366 0300 	bfi	r3, r6, #0, #1
   1d5d0:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
   1d5d4:	4460      	add	r0, ip
   1d5d6:	e7b0      	b.n	1d53a <net_if_ipv6_prefix_add+0x1a>
		if (!ipv6->unicast[i].is_used) {
   1d5d8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1d5dc:	079b      	lsls	r3, r3, #30
   1d5de:	d509      	bpl.n	1d5f4 <net_if_ipv6_prefix_add+0xd4>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   1d5e0:	4628      	mov	r0, r5
   1d5e2:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
   1d5e6:	f7ff fd72 	bl	1d0ce <net_ipv6_addr_cmp>
   1d5ea:	b118      	cbz	r0, 1d5f4 <net_if_ipv6_prefix_add+0xd4>
   1d5ec:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   1d5f0:	42bb      	cmp	r3, r7
   1d5f2:	d013      	beq.n	1d61c <net_if_ipv6_prefix_add+0xfc>
		if (!ipv6->unicast[i].is_used) {
   1d5f4:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
   1d5f8:	0798      	lsls	r0, r3, #30
   1d5fa:	d5a5      	bpl.n	1d548 <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   1d5fc:	4628      	mov	r0, r5
   1d5fe:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
   1d602:	f7ff fd64 	bl	1d0ce <net_ipv6_addr_cmp>
   1d606:	2800      	cmp	r0, #0
   1d608:	d09e      	beq.n	1d548 <net_if_ipv6_prefix_add+0x28>
   1d60a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1d60e:	42bb      	cmp	r3, r7
   1d610:	d19a      	bne.n	1d548 <net_if_ipv6_prefix_add+0x28>
   1d612:	2028      	movs	r0, #40	; 0x28
			return &ipv6->prefix[i];
   1d614:	30a8      	adds	r0, #168	; 0xa8
	if (ifprefix) {
   1d616:	1820      	adds	r0, r4, r0
   1d618:	d18f      	bne.n	1d53a <net_if_ipv6_prefix_add+0x1a>
   1d61a:	e795      	b.n	1d548 <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
   1d61c:	2000      	movs	r0, #0
   1d61e:	e7f9      	b.n	1d614 <net_if_ipv6_prefix_add+0xf4>

0001d620 <net_if_ipv6_prefix_lookup>:
{
   1d620:	b570      	push	{r4, r5, r6, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1d622:	6844      	ldr	r4, [r0, #4]
{
   1d624:	460d      	mov	r5, r1
   1d626:	4616      	mov	r6, r2
	if (!ipv6) {
   1d628:	b90c      	cbnz	r4, 1d62e <net_if_ipv6_prefix_lookup+0xe>
		return NULL;
   1d62a:	2000      	movs	r0, #0
}
   1d62c:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv6->prefix[i].is_used) {
   1d62e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   1d632:	0798      	lsls	r0, r3, #30
   1d634:	d411      	bmi.n	1d65a <net_if_ipv6_prefix_lookup+0x3a>
   1d636:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1d63a:	079b      	lsls	r3, r3, #30
   1d63c:	d5f5      	bpl.n	1d62a <net_if_ipv6_prefix_lookup+0xa>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   1d63e:	4632      	mov	r2, r6
   1d640:	4629      	mov	r1, r5
   1d642:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   1d646:	f7ff fd1d 	bl	1d084 <net_ipv6_is_prefix>
   1d64a:	2800      	cmp	r0, #0
   1d64c:	d0ed      	beq.n	1d62a <net_if_ipv6_prefix_lookup+0xa>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1d64e:	2001      	movs	r0, #1
			return &ipv6->prefix[i];
   1d650:	2328      	movs	r3, #40	; 0x28
   1d652:	fb03 4000 	mla	r0, r3, r0, r4
   1d656:	30a8      	adds	r0, #168	; 0xa8
   1d658:	e7e8      	b.n	1d62c <net_if_ipv6_prefix_lookup+0xc>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
   1d65a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1d65e:	f7ff fd11 	bl	1d084 <net_ipv6_is_prefix>
   1d662:	2800      	cmp	r0, #0
   1d664:	d0e7      	beq.n	1d636 <net_if_ipv6_prefix_lookup+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1d666:	2000      	movs	r0, #0
   1d668:	e7f2      	b.n	1d650 <net_if_ipv6_prefix_lookup+0x30>

0001d66a <net_if_ipv6_prefix_rm>:
{
   1d66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1d66e:	6844      	ldr	r4, [r0, #4]
{
   1d670:	4607      	mov	r7, r0
   1d672:	4688      	mov	r8, r1
   1d674:	4616      	mov	r6, r2
	if (!ipv6) {
   1d676:	b914      	cbnz	r4, 1d67e <net_if_ipv6_prefix_rm+0x14>
		return false;
   1d678:	2000      	movs	r0, #0
}
   1d67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!ipv6->prefix[i].is_used) {
   1d67e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   1d682:	079a      	lsls	r2, r3, #30
   1d684:	d508      	bpl.n	1d698 <net_if_ipv6_prefix_rm+0x2e>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   1d686:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1d68a:	f7ff fd20 	bl	1d0ce <net_ipv6_addr_cmp>
   1d68e:	b118      	cbz	r0, 1d698 <net_if_ipv6_prefix_rm+0x2e>
   1d690:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   1d694:	42b3      	cmp	r3, r6
   1d696:	d025      	beq.n	1d6e4 <net_if_ipv6_prefix_rm+0x7a>
		if (!ipv6->prefix[i].is_used) {
   1d698:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   1d69c:	079b      	lsls	r3, r3, #30
   1d69e:	d5eb      	bpl.n	1d678 <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   1d6a0:	4641      	mov	r1, r8
   1d6a2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   1d6a6:	f7ff fd12 	bl	1d0ce <net_ipv6_addr_cmp>
   1d6aa:	2800      	cmp	r0, #0
   1d6ac:	d0e4      	beq.n	1d678 <net_if_ipv6_prefix_rm+0xe>
   1d6ae:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1d6b2:	42b3      	cmp	r3, r6
   1d6b4:	d1e0      	bne.n	1d678 <net_if_ipv6_prefix_rm+0xe>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1d6b6:	2501      	movs	r5, #1
   1d6b8:	2028      	movs	r0, #40	; 0x28
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
   1d6ba:	30a8      	adds	r0, #168	; 0xa8
   1d6bc:	4420      	add	r0, r4
   1d6be:	f7f2 fc49 	bl	ff54 <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
   1d6c2:	2328      	movs	r3, #40	; 0x28
   1d6c4:	fb03 4505 	mla	r5, r3, r5, r4
   1d6c8:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
		remove_prefix_addresses(iface, ipv6, addr, len);
   1d6cc:	4638      	mov	r0, r7
		ipv6->prefix[i].is_used = false;
   1d6ce:	f36f 0341 	bfc	r3, #1, #1
   1d6d2:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		remove_prefix_addresses(iface, ipv6, addr, len);
   1d6d6:	4642      	mov	r2, r8
   1d6d8:	4633      	mov	r3, r6
   1d6da:	4621      	mov	r1, r4
   1d6dc:	f7ff fee7 	bl	1d4ae <remove_prefix_addresses>
		return true;
   1d6e0:	2001      	movs	r0, #1
   1d6e2:	e7ca      	b.n	1d67a <net_if_ipv6_prefix_rm+0x10>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1d6e4:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
   1d6e6:	4628      	mov	r0, r5
   1d6e8:	e7e7      	b.n	1d6ba <net_if_ipv6_prefix_rm+0x50>

0001d6ea <net_if_ipv6_router_update_lifetime>:
{
   1d6ea:	b538      	push	{r3, r4, r5, lr}
   1d6ec:	4604      	mov	r4, r0
   1d6ee:	460d      	mov	r5, r1
	router->life_start = k_uptime_get_32();
   1d6f0:	f7ff fcf5 	bl	1d0de <k_uptime_get_32>
	router->lifetime = lifetime;
   1d6f4:	8425      	strh	r5, [r4, #32]
	router->life_start = k_uptime_get_32();
   1d6f6:	61e0      	str	r0, [r4, #28]
}
   1d6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	iface_router_run_timer(router->life_start);
   1d6fc:	f7f2 b864 	b.w	f7c8 <iface_router_run_timer>

0001d700 <net_if_ipv6_get_ll>:
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1d700:	6840      	ldr	r0, [r0, #4]
{
   1d702:	b510      	push	{r4, lr}
	if (!ipv6) {
   1d704:	b338      	cbz	r0, 1d756 <net_if_ipv6_get_ll+0x56>
		if (!ipv6->unicast[i].is_used ||
   1d706:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1d70a:	079b      	lsls	r3, r3, #30
   1d70c:	d50e      	bpl.n	1d72c <net_if_ipv6_get_ll+0x2c>
   1d70e:	1c4c      	adds	r4, r1, #1
   1d710:	d003      	beq.n	1d71a <net_if_ipv6_get_ll+0x1a>
		    (addr_state != NET_ADDR_ANY_STATE &&
   1d712:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
   1d716:	428b      	cmp	r3, r1
   1d718:	d108      	bne.n	1d72c <net_if_ipv6_get_ll+0x2c>
		     ipv6->unicast[i].addr_state != addr_state) ||
   1d71a:	8803      	ldrh	r3, [r0, #0]
   1d71c:	2b02      	cmp	r3, #2
   1d71e:	d105      	bne.n	1d72c <net_if_ipv6_get_ll+0x2c>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   1d720:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1d724:	8884      	ldrh	r4, [r0, #4]
   1d726:	1d03      	adds	r3, r0, #4
   1d728:	4294      	cmp	r4, r2
   1d72a:	d013      	beq.n	1d754 <net_if_ipv6_get_ll+0x54>
		if (!ipv6->unicast[i].is_used ||
   1d72c:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
   1d730:	079a      	lsls	r2, r3, #30
   1d732:	d511      	bpl.n	1d758 <net_if_ipv6_get_ll+0x58>
   1d734:	1c4b      	adds	r3, r1, #1
   1d736:	d003      	beq.n	1d740 <net_if_ipv6_get_ll+0x40>
		    (addr_state != NET_ADDR_ANY_STATE &&
   1d738:	f990 305d 	ldrsb.w	r3, [r0, #93]	; 0x5d
   1d73c:	428b      	cmp	r3, r1
   1d73e:	d10b      	bne.n	1d758 <net_if_ipv6_get_ll+0x58>
		     ipv6->unicast[i].addr_state != addr_state) ||
   1d740:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1d742:	2b02      	cmp	r3, #2
   1d744:	d108      	bne.n	1d758 <net_if_ipv6_get_ll+0x58>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   1d746:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1d74a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1d74c:	f100 0334 	add.w	r3, r0, #52	; 0x34
   1d750:	4291      	cmp	r1, r2
   1d752:	d101      	bne.n	1d758 <net_if_ipv6_get_ll+0x58>
   1d754:	4618      	mov	r0, r3
}
   1d756:	bd10      	pop	{r4, pc}
		return NULL;
   1d758:	2000      	movs	r0, #0
   1d75a:	e7fc      	b.n	1d756 <net_if_ipv6_get_ll+0x56>

0001d75c <net_if_ipv6_calc_reachable_time>:
{
   1d75c:	b538      	push	{r3, r4, r5, lr}
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   1d75e:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	       sys_rand32_get() % (max_reachable - min_reachable);
   1d762:	f7f3 fe63 	bl	1142c <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
   1d766:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
   1d768:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   1d76c:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   1d770:	fbb0 f3f4 	udiv	r3, r0, r4
   1d774:	fb03 0014 	mls	r0, r3, r4, r0
}
   1d778:	4428      	add	r0, r5
   1d77a:	bd38      	pop	{r3, r4, r5, pc}

0001d77c <net_if_recv_data>:
{
   1d77c:	b510      	push	{r4, lr}
   1d77e:	4603      	mov	r3, r0
	return net_if_l2(iface)->recv(iface, pkt);
   1d780:	f7ff fc62 	bl	1d048 <net_if_l2>
}
   1d784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
   1d788:	6802      	ldr	r2, [r0, #0]
   1d78a:	4618      	mov	r0, r3
   1d78c:	4710      	bx	r2

0001d78e <net_if_send_data>:
{
   1d78e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d790:	6803      	ldr	r3, [r0, #0]
   1d792:	4605      	mov	r5, r0
   1d794:	460c      	mov	r4, r1
	struct net_context *context = net_pkt_context(pkt);
   1d796:	69ce      	ldr	r6, [r1, #28]
   1d798:	330c      	adds	r3, #12
   1d79a:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   1d79e:	07d9      	lsls	r1, r3, #31
   1d7a0:	d411      	bmi.n	1d7c6 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1d7a2:	f06f 023d 	mvn.w	r2, #61	; 0x3d
		if (context) {
   1d7a6:	b12e      	cbz	r6, 1d7b4 <net_if_send_data+0x26>
			net_context_send_cb(context, status);
   1d7a8:	4611      	mov	r1, r2
   1d7aa:	4630      	mov	r0, r6
   1d7ac:	9201      	str	r2, [sp, #4]
   1d7ae:	f7ff fc50 	bl	1d052 <net_context_send_cb>
   1d7b2:	9a01      	ldr	r2, [sp, #4]
		if (dst->addr) {
   1d7b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d7b6:	b123      	cbz	r3, 1d7c2 <net_if_send_data+0x34>
			net_if_call_link_cb(iface, dst, status);
   1d7b8:	4628      	mov	r0, r5
   1d7ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1d7be:	f7f2 fc99 	bl	100f4 <net_if_call_link_cb>
   1d7c2:	2002      	movs	r0, #2
   1d7c4:	e01f      	b.n	1d806 <net_if_send_data+0x78>
   1d7c6:	6803      	ldr	r3, [r0, #0]
   1d7c8:	330c      	adds	r3, #12
   1d7ca:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   1d7ce:	06da      	lsls	r2, r3, #27
   1d7d0:	d4e7      	bmi.n	1d7a2 <net_if_send_data+0x14>
   1d7d2:	6803      	ldr	r3, [r0, #0]
   1d7d4:	330c      	adds	r3, #12
   1d7d6:	e8d3 3faf 	lda	r3, [r3]
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
   1d7da:	079b      	lsls	r3, r3, #30
   1d7dc:	d408      	bmi.n	1d7f0 <net_if_send_data+0x62>
   1d7de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d7e0:	b933      	cbnz	r3, 1d7f0 <net_if_send_data+0x62>
	return net_if_get_link_addr(pkt->iface);
   1d7e2:	6a23      	ldr	r3, [r4, #32]
   1d7e4:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   1d7e6:	691a      	ldr	r2, [r3, #16]
   1d7e8:	62a2      	str	r2, [r4, #40]	; 0x28
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   1d7ea:	7d1b      	ldrb	r3, [r3, #20]
   1d7ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return pkt->family;
   1d7f0:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
   1d7f4:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1d7f8:	2b02      	cmp	r3, #2
   1d7fa:	d006      	beq.n	1d80a <net_if_send_data+0x7c>
		net_if_queue_tx(iface, pkt);
   1d7fc:	4628      	mov	r0, r5
   1d7fe:	4621      	mov	r1, r4
   1d800:	f7f2 f8d4 	bl	f9ac <net_if_queue_tx>
   1d804:	2000      	movs	r0, #0
}
   1d806:	b002      	add	sp, #8
   1d808:	bd70      	pop	{r4, r5, r6, pc}
		verdict = net_ipv6_prepare_for_send(pkt);
   1d80a:	4620      	mov	r0, r4
   1d80c:	f001 fbcd 	bl	1efaa <net_ipv6_prepare_for_send>
	if (verdict == NET_DROP) {
   1d810:	2802      	cmp	r0, #2
   1d812:	d102      	bne.n	1d81a <net_if_send_data+0x8c>
	int status = -EIO;
   1d814:	f06f 0204 	mvn.w	r2, #4
   1d818:	e7c5      	b.n	1d7a6 <net_if_send_data+0x18>
	} else if (verdict == NET_OK) {
   1d81a:	2800      	cmp	r0, #0
   1d81c:	d1f3      	bne.n	1d806 <net_if_send_data+0x78>
   1d81e:	e7ed      	b.n	1d7fc <net_if_send_data+0x6e>

0001d820 <net_if_need_calc_tx_checksum>:
   1d820:	2001      	movs	r0, #1
   1d822:	4770      	bx	lr

0001d824 <net_if_need_calc_rx_checksum>:
}
   1d824:	2001      	movs	r0, #1
   1d826:	4770      	bx	lr

0001d828 <net_if_up>:
{
   1d828:	b538      	push	{r3, r4, r5, lr}
   1d82a:	4605      	mov	r5, r0
   1d82c:	6803      	ldr	r3, [r0, #0]
   1d82e:	330c      	adds	r3, #12
   1d830:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d834:	f013 0301 	ands.w	r3, r3, #1
   1d838:	d001      	beq.n	1d83e <net_if_up+0x16>
		return 0;
   1d83a:	2000      	movs	r0, #0
}
   1d83c:	bd38      	pop	{r3, r4, r5, pc}
	     net_if_is_socket_offloaded(iface))) {
   1d83e:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d840:	7e91      	ldrb	r1, [r2, #26]
   1d842:	b149      	cbz	r1, 1d858 <net_if_up+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d844:	320c      	adds	r2, #12
   1d846:	e8d2 1fef 	ldaex	r1, [r2]
   1d84a:	f041 0101 	orr.w	r1, r1, #1
   1d84e:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1d852:	2800      	cmp	r0, #0
   1d854:	d0f1      	beq.n	1d83a <net_if_up+0x12>
   1d856:	e7f6      	b.n	1d846 <net_if_up+0x1e>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d858:	f7ff fbf6 	bl	1d048 <net_if_l2>
   1d85c:	b9b8      	cbnz	r0, 1d88e <net_if_up+0x66>
   1d85e:	682b      	ldr	r3, [r5, #0]
   1d860:	330c      	adds	r3, #12
   1d862:	e8d3 2fef 	ldaex	r2, [r3]
   1d866:	f042 0201 	orr.w	r2, r2, #1
   1d86a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d86e:	2900      	cmp	r1, #0
   1d870:	d1f7      	bne.n	1d862 <net_if_up+0x3a>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d872:	4628      	mov	r0, r5
   1d874:	f7ff fbf9 	bl	1d06a <l2_flags_get>
   1d878:	f010 0408 	ands.w	r4, r0, #8
   1d87c:	d1dd      	bne.n	1d83a <net_if_up+0x12>
		net_if_start_dad(iface);
   1d87e:	4628      	mov	r0, r5
   1d880:	f7ff fd46 	bl	1d310 <net_if_start_dad>
	net_if_start_rs(iface);
   1d884:	4628      	mov	r0, r5
   1d886:	f7f2 f8bb 	bl	fa00 <net_if_start_rs>
}
   1d88a:	4620      	mov	r0, r4
   1d88c:	e7d6      	b.n	1d83c <net_if_up+0x14>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d88e:	6883      	ldr	r3, [r0, #8]
   1d890:	2b00      	cmp	r3, #0
   1d892:	d0e4      	beq.n	1d85e <net_if_up+0x36>
	status = net_if_l2(iface)->enable(iface, true);
   1d894:	2101      	movs	r1, #1
   1d896:	4628      	mov	r0, r5
   1d898:	4798      	blx	r3
	if (status < 0) {
   1d89a:	2800      	cmp	r0, #0
   1d89c:	dadf      	bge.n	1d85e <net_if_up+0x36>
   1d89e:	e7cd      	b.n	1d83c <net_if_up+0x14>

0001d8a0 <calc_chksum>:
{
   1d8a0:	b570      	push	{r4, r5, r6, lr}
	while (data < end) {
   1d8a2:	460c      	mov	r4, r1
	end = data + len - 1;
   1d8a4:	3a01      	subs	r2, #1
   1d8a6:	188d      	adds	r5, r1, r2
	while (data < end) {
   1d8a8:	42ac      	cmp	r4, r5
   1d8aa:	d315      	bcc.n	1d8d8 <calc_chksum+0x38>
   1d8ac:	f1c1 0301 	rsb	r3, r1, #1
   1d8b0:	442b      	add	r3, r5
   1d8b2:	f023 0301 	bic.w	r3, r3, #1
   1d8b6:	1e4c      	subs	r4, r1, #1
   1d8b8:	42a5      	cmp	r5, r4
   1d8ba:	bf38      	it	cc
   1d8bc:	2300      	movcc	r3, #0
   1d8be:	440b      	add	r3, r1
	if (data == end) {
   1d8c0:	42ab      	cmp	r3, r5
   1d8c2:	d108      	bne.n	1d8d6 <calc_chksum+0x36>
		tmp = data[0] << 8;
   1d8c4:	5c8b      	ldrb	r3, [r1, r2]
		sum += tmp;
   1d8c6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   1d8ca:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d8cc:	ebb0 2f03 	cmp.w	r0, r3, lsl #8
			sum++;
   1d8d0:	bf3c      	itt	cc
   1d8d2:	3001      	addcc	r0, #1
   1d8d4:	b280      	uxthcc	r0, r0
}
   1d8d6:	bd70      	pop	{r4, r5, r6, pc}
		tmp = (data[0] << 8) + data[1];
   1d8d8:	7826      	ldrb	r6, [r4, #0]
   1d8da:	7863      	ldrb	r3, [r4, #1]
		data += 2;
   1d8dc:	3402      	adds	r4, #2
		tmp = (data[0] << 8) + data[1];
   1d8de:	eb03 2306 	add.w	r3, r3, r6, lsl #8
		sum += tmp;
   1d8e2:	fa10 f083 	uxtah	r0, r0, r3
   1d8e6:	b280      	uxth	r0, r0
		tmp = (data[0] << 8) + data[1];
   1d8e8:	b29e      	uxth	r6, r3
		if (sum < tmp) {
   1d8ea:	4286      	cmp	r6, r0
			sum++;
   1d8ec:	bf84      	itt	hi
   1d8ee:	3001      	addhi	r0, #1
   1d8f0:	b280      	uxthhi	r0, r0
		data += 2;
   1d8f2:	e7d9      	b.n	1d8a8 <calc_chksum+0x8>

0001d8f4 <net_byte_to_hex>:
{
   1d8f4:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d8f6:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   1d8f8:	b1bb      	cbz	r3, 1d92a <net_byte_to_hex+0x36>
		if (val < 10) {
   1d8fa:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   1d8fc:	b26b      	sxtb	r3, r5
   1d8fe:	bf86      	itte	hi
   1d900:	f1a2 050a 	subhi.w	r5, r2, #10
   1d904:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   1d906:	3330      	addls	r3, #48	; 0x30
   1d908:	1c44      	adds	r4, r0, #1
   1d90a:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d90c:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   1d910:	4619      	mov	r1, r3
   1d912:	2b09      	cmp	r3, #9
	*ptr = '\0';
   1d914:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   1d918:	bf83      	ittte	hi
   1d91a:	3a0a      	subhi	r2, #10
   1d91c:	1889      	addhi	r1, r1, r2
   1d91e:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   1d920:	3130      	addls	r1, #48	; 0x30
   1d922:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   1d924:	7063      	strb	r3, [r4, #1]
   1d926:	1c60      	adds	r0, r4, #1
}
   1d928:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   1d92a:	2d00      	cmp	r5, #0
   1d92c:	d1e5      	bne.n	1d8fa <net_byte_to_hex+0x6>
   1d92e:	4604      	mov	r4, r0
   1d930:	e7ec      	b.n	1d90c <net_byte_to_hex+0x18>

0001d932 <net_calc_chksum>:
   1d932:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
{
   1d936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   1d93a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1d93e:	2b02      	cmp	r3, #2
{
   1d940:	4605      	mov	r5, r0
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   1d942:	d16f      	bne.n	1da24 <net_calc_chksum+0xf2>
	size_t bytes = 0;
   1d944:	2200      	movs	r2, #0
		sum =  net_pkt_get_len(pkt) -
   1d946:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   1d948:	2b00      	cmp	r3, #0
   1d94a:	d143      	bne.n	1d9d4 <net_calc_chksum+0xa2>
	backup->pos = pkt->cursor.pos;
   1d94c:	e9d5 8705 	ldrd	r8, r7, [r5, #20]
			net_pkt_ip_hdr_len(pkt) -
   1d950:	f895 4038 	ldrb.w	r4, [r5, #56]	; 0x38
	net_pkt_cursor_init(pkt);
   1d954:	4628      	mov	r0, r5
		sum =  net_pkt_get_len(pkt) -
   1d956:	1b09      	subs	r1, r1, r4
   1d958:	8fec      	ldrh	r4, [r5, #62]	; 0x3e
   1d95a:	1b0c      	subs	r4, r1, r4
   1d95c:	4414      	add	r4, r2
	net_pkt_cursor_init(pkt);
   1d95e:	f000 f970 	bl	1dc42 <net_pkt_cursor_init>
	return pkt->overwrite;
   1d962:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   1d966:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
   1d96a:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
   1d96e:	f043 0301 	orr.w	r3, r3, #1
   1d972:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		sum =  net_pkt_get_len(pkt) -
   1d976:	b2a4      	uxth	r4, r4
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   1d978:	3920      	subs	r1, #32
   1d97a:	4628      	mov	r0, r5
   1d97c:	f000 f9eb 	bl	1dd56 <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   1d980:	69a9      	ldr	r1, [r5, #24]
   1d982:	2220      	movs	r2, #32
   1d984:	4620      	mov	r0, r4
   1d986:	f7ff ff8b 	bl	1d8a0 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   1d98a:	8fe9      	ldrh	r1, [r5, #62]	; 0x3e
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   1d98c:	4604      	mov	r4, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   1d98e:	3120      	adds	r1, #32
   1d990:	4628      	mov	r0, r5
   1d992:	f000 f9e0 	bl	1dd56 <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
   1d996:	6969      	ldr	r1, [r5, #20]
   1d998:	b161      	cbz	r1, 1d9b4 <net_calc_chksum+0x82>
   1d99a:	69ab      	ldr	r3, [r5, #24]
   1d99c:	b153      	cbz	r3, 1d9b4 <net_calc_chksum+0x82>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   1d99e:	688a      	ldr	r2, [r1, #8]
   1d9a0:	f8b1 900c 	ldrh.w	r9, [r1, #12]
   1d9a4:	1a9b      	subs	r3, r3, r2
   1d9a6:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
   1d9aa:	f8d5 a014 	ldr.w	sl, [r5, #20]
   1d9ae:	f1ba 0f00 	cmp.w	sl, #0
   1d9b2:	d113      	bne.n	1d9dc <net_calc_chksum+0xaa>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   1d9b4:	2c00      	cmp	r4, #0
   1d9b6:	d032      	beq.n	1da1e <net_calc_chksum+0xec>
   1d9b8:	ba64      	rev16	r4, r4
   1d9ba:	b2a4      	uxth	r4, r4
	return ~sum;
   1d9bc:	43e0      	mvns	r0, r4
   1d9be:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	pkt->cursor.pos = backup->pos;
   1d9c2:	e9c5 8705 	strd	r8, r7, [r5, #20]
	pkt->overwrite = overwrite;
   1d9c6:	f366 0300 	bfi	r3, r6, #0, #1
   1d9ca:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1d9ce:	b280      	uxth	r0, r0
}
   1d9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   1d9d4:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
   1d9d6:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1d9d8:	4402      	add	r2, r0
		buf = buf->frags;
   1d9da:	e7b5      	b.n	1d948 <net_calc_chksum+0x16>
		sum = calc_chksum(sum, cur->pos, len);
   1d9dc:	4620      	mov	r0, r4
   1d9de:	464a      	mov	r2, r9
   1d9e0:	69a9      	ldr	r1, [r5, #24]
   1d9e2:	f7ff ff5d 	bl	1d8a0 <calc_chksum>
		cur->buf = cur->buf->frags;
   1d9e6:	f8da 3000 	ldr.w	r3, [sl]
		sum = calc_chksum(sum, cur->pos, len);
   1d9ea:	4604      	mov	r4, r0
		cur->buf = cur->buf->frags;
   1d9ec:	616b      	str	r3, [r5, #20]
		if (!cur->buf || !cur->buf->len) {
   1d9ee:	2b00      	cmp	r3, #0
   1d9f0:	d0e0      	beq.n	1d9b4 <net_calc_chksum+0x82>
   1d9f2:	899a      	ldrh	r2, [r3, #12]
   1d9f4:	2a00      	cmp	r2, #0
   1d9f6:	d0dd      	beq.n	1d9b4 <net_calc_chksum+0x82>
		cur->pos = cur->buf->data;
   1d9f8:	689b      	ldr	r3, [r3, #8]
		if (len % 2) {
   1d9fa:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
   1d9fe:	61ab      	str	r3, [r5, #24]
		if (len % 2) {
   1da00:	d00b      	beq.n	1da1a <net_calc_chksum+0xe8>
			sum += *cur->pos;
   1da02:	7819      	ldrb	r1, [r3, #0]
			cur->pos++;
   1da04:	3301      	adds	r3, #1
			sum += *cur->pos;
   1da06:	440c      	add	r4, r1
   1da08:	b2a4      	uxth	r4, r4
			if (sum < *cur->pos) {
   1da0a:	42a1      	cmp	r1, r4
				sum++;
   1da0c:	bf84      	itt	hi
   1da0e:	3401      	addhi	r4, #1
   1da10:	b2a4      	uxthhi	r4, r4
			cur->pos++;
   1da12:	61ab      	str	r3, [r5, #24]
			len = cur->buf->len - 1;
   1da14:	f102 39ff 	add.w	r9, r2, #4294967295
   1da18:	e7c7      	b.n	1d9aa <net_calc_chksum+0x78>
			len = cur->buf->len;
   1da1a:	4691      	mov	r9, r2
   1da1c:	e7c5      	b.n	1d9aa <net_calc_chksum+0x78>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   1da1e:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1da22:	e7cb      	b.n	1d9bc <net_calc_chksum+0x8a>
		return 0;
   1da24:	2000      	movs	r0, #0
   1da26:	e7d3      	b.n	1d9d0 <net_calc_chksum+0x9e>

0001da28 <net_buf_frags_len>:
	size_t bytes = 0;
   1da28:	2300      	movs	r3, #0
	while (buf) {
   1da2a:	b908      	cbnz	r0, 1da30 <net_buf_frags_len+0x8>
	}

	return bytes;
}
   1da2c:	4618      	mov	r0, r3
   1da2e:	4770      	bx	lr
		bytes += buf->len;
   1da30:	8982      	ldrh	r2, [r0, #12]
		buf = buf->frags;
   1da32:	6800      	ldr	r0, [r0, #0]
		bytes += buf->len;
   1da34:	4413      	add	r3, r2
		buf = buf->frags;
   1da36:	e7f8      	b.n	1da2a <net_buf_frags_len+0x2>

0001da38 <pkt_cursor_jump>:

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
   1da38:	6943      	ldr	r3, [r0, #20]
	while (cursor->buf) {
		size_t len = write ? cursor->buf->size : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
   1da3a:	681b      	ldr	r3, [r3, #0]
   1da3c:	6143      	str	r3, [r0, #20]
	while (cursor->buf) {
   1da3e:	6943      	ldr	r3, [r0, #20]
   1da40:	b90b      	cbnz	r3, 1da46 <pkt_cursor_jump+0xe>
	}

	if (cursor->buf) {
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
   1da42:	6183      	str	r3, [r0, #24]
	}
}
   1da44:	4770      	bx	lr
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   1da46:	b121      	cbz	r1, 1da52 <pkt_cursor_jump+0x1a>
   1da48:	89da      	ldrh	r2, [r3, #14]
		if (!len) {
   1da4a:	2a00      	cmp	r2, #0
   1da4c:	d0f5      	beq.n	1da3a <pkt_cursor_jump+0x2>
		cursor->pos = cursor->buf->data;
   1da4e:	689b      	ldr	r3, [r3, #8]
   1da50:	e7f7      	b.n	1da42 <pkt_cursor_jump+0xa>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   1da52:	899a      	ldrh	r2, [r3, #12]
   1da54:	e7f9      	b.n	1da4a <pkt_cursor_jump+0x12>

0001da56 <pkt_cursor_advance>:
static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
   1da56:	6943      	ldr	r3, [r0, #20]
{
   1da58:	b410      	push	{r4}
	if (!cursor->buf) {
   1da5a:	b163      	cbz	r3, 1da76 <pkt_cursor_advance+0x20>
		return;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   1da5c:	b149      	cbz	r1, 1da72 <pkt_cursor_advance+0x1c>
   1da5e:	89dc      	ldrh	r4, [r3, #14]
	if ((cursor->pos - cursor->buf->data) == len) {
   1da60:	6982      	ldr	r2, [r0, #24]
   1da62:	689b      	ldr	r3, [r3, #8]
   1da64:	1ad2      	subs	r2, r2, r3
   1da66:	42a2      	cmp	r2, r4
   1da68:	d105      	bne.n	1da76 <pkt_cursor_advance+0x20>
		pkt_cursor_jump(pkt, write);
	}
}
   1da6a:	f85d 4b04 	ldr.w	r4, [sp], #4
		pkt_cursor_jump(pkt, write);
   1da6e:	f7ff bfe3 	b.w	1da38 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   1da72:	899c      	ldrh	r4, [r3, #12]
   1da74:	e7f4      	b.n	1da60 <pkt_cursor_advance+0xa>
}
   1da76:	f85d 4b04 	ldr.w	r4, [sp], #4
   1da7a:	4770      	bx	lr

0001da7c <pkt_cursor_update>:
	return pkt->overwrite;
   1da7c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
   1da80:	b4f0      	push	{r4, r5, r6, r7}
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
   1da82:	f013 0601 	ands.w	r6, r3, #1
   1da86:	6945      	ldr	r5, [r0, #20]
   1da88:	d10f      	bne.n	1daaa <pkt_cursor_update+0x2e>
		write = false;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   1da8a:	b172      	cbz	r2, 1daaa <pkt_cursor_update+0x2e>
   1da8c:	89ef      	ldrh	r7, [r5, #14]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   1da8e:	6984      	ldr	r4, [r0, #24]
   1da90:	68ab      	ldr	r3, [r5, #8]
   1da92:	1ae3      	subs	r3, r4, r3
   1da94:	440b      	add	r3, r1
   1da96:	42bb      	cmp	r3, r7
   1da98:	d10a      	bne.n	1dab0 <pkt_cursor_update+0x34>
   1da9a:	b116      	cbz	r6, 1daa2 <pkt_cursor_update+0x26>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   1da9c:	89eb      	ldrh	r3, [r5, #14]
   1da9e:	42bb      	cmp	r3, r7
   1daa0:	d806      	bhi.n	1dab0 <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
	} else {
		cursor->pos += length;
	}
}
   1daa2:	bcf0      	pop	{r4, r5, r6, r7}
		pkt_cursor_jump(pkt, write);
   1daa4:	4611      	mov	r1, r2
   1daa6:	f7ff bfc7 	b.w	1da38 <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   1daaa:	2200      	movs	r2, #0
   1daac:	89af      	ldrh	r7, [r5, #12]
   1daae:	e7ee      	b.n	1da8e <pkt_cursor_update+0x12>
		cursor->pos += length;
   1dab0:	4421      	add	r1, r4
   1dab2:	6181      	str	r1, [r0, #24]
}
   1dab4:	bcf0      	pop	{r4, r5, r6, r7}
   1dab6:	4770      	bx	lr

0001dab8 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
   1dab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dabc:	4606      	mov	r6, r0
   1dabe:	460f      	mov	r7, r1
   1dac0:	4615      	mov	r5, r2
   1dac2:	4699      	mov	r9, r3
   1dac4:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
   1dac8:	6973      	ldr	r3, [r6, #20]
   1daca:	2b00      	cmp	r3, #0
   1dacc:	d051      	beq.n	1db72 <net_pkt_cursor_operate+0xba>
   1dace:	b90d      	cbnz	r5, 1dad4 <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   1dad0:	4628      	mov	r0, r5
   1dad2:	e00d      	b.n	1daf0 <net_pkt_cursor_operate+0x38>
   1dad4:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   1dad8:	4630      	mov	r0, r6
   1dada:	f013 0f01 	tst.w	r3, #1
   1dade:	bf0c      	ite	eq
   1dae0:	4641      	moveq	r1, r8
   1dae2:	2100      	movne	r1, #0
   1dae4:	f7ff ffb7 	bl	1da56 <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   1dae8:	6973      	ldr	r3, [r6, #20]
   1daea:	b91b      	cbnz	r3, 1daf4 <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
   1daec:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1daf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   1daf4:	69b0      	ldr	r0, [r6, #24]
   1daf6:	689c      	ldr	r4, [r3, #8]
   1daf8:	1b04      	subs	r4, r0, r4
   1dafa:	f1b8 0f00 	cmp.w	r8, #0
   1dafe:	d02d      	beq.n	1db5c <net_pkt_cursor_operate+0xa4>
   1db00:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   1db04:	07d2      	lsls	r2, r2, #31
   1db06:	d429      	bmi.n	1db5c <net_pkt_cursor_operate+0xa4>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
   1db08:	89db      	ldrh	r3, [r3, #14]
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   1db0a:	1b1c      	subs	r4, r3, r4
		if (!d_len) {
   1db0c:	2c00      	cmp	r4, #0
   1db0e:	d0ed      	beq.n	1daec <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
   1db10:	42ac      	cmp	r4, r5
   1db12:	bf28      	it	cs
   1db14:	462c      	movcs	r4, r5
		if (copy) {
   1db16:	f1b9 0f00 	cmp.w	r9, #0
   1db1a:	d023      	beq.n	1db64 <net_pkt_cursor_operate+0xac>
			memcpy(write ? c_op->pos : data,
   1db1c:	f1b8 0f00 	cmp.w	r8, #0
   1db20:	d11e      	bne.n	1db60 <net_pkt_cursor_operate+0xa8>
   1db22:	4601      	mov	r1, r0
   1db24:	4638      	mov	r0, r7
   1db26:	4622      	mov	r2, r4
   1db28:	f7ff f895 	bl	1cc56 <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   1db2c:	f1b8 0f00 	cmp.w	r8, #0
   1db30:	d008      	beq.n	1db44 <net_pkt_cursor_operate+0x8c>
   1db32:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   1db36:	07db      	lsls	r3, r3, #31
   1db38:	d404      	bmi.n	1db44 <net_pkt_cursor_operate+0x8c>
			net_buf_add(c_op->buf, len);
   1db3a:	6970      	ldr	r0, [r6, #20]
   1db3c:	4621      	mov	r1, r4
   1db3e:	3008      	adds	r0, #8
   1db40:	f7ff f974 	bl	1ce2c <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
   1db44:	4642      	mov	r2, r8
   1db46:	4621      	mov	r1, r4
   1db48:	4630      	mov	r0, r6
   1db4a:	f7ff ff97 	bl	1da7c <pkt_cursor_update>
		if (copy && data) {
   1db4e:	f1b9 0f00 	cmp.w	r9, #0
   1db52:	d001      	beq.n	1db58 <net_pkt_cursor_operate+0xa0>
   1db54:	b107      	cbz	r7, 1db58 <net_pkt_cursor_operate+0xa0>
			data = (u8_t *) data + len;
   1db56:	4427      	add	r7, r4
		length -= len;
   1db58:	1b2d      	subs	r5, r5, r4
   1db5a:	e7b5      	b.n	1dac8 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   1db5c:	899b      	ldrh	r3, [r3, #12]
   1db5e:	e7d4      	b.n	1db0a <net_pkt_cursor_operate+0x52>
   1db60:	4639      	mov	r1, r7
   1db62:	e7e0      	b.n	1db26 <net_pkt_cursor_operate+0x6e>
		} else if (data) {
   1db64:	2f00      	cmp	r7, #0
   1db66:	d0e1      	beq.n	1db2c <net_pkt_cursor_operate+0x74>
			memset(c_op->pos, *(int *)data, len);
   1db68:	4622      	mov	r2, r4
   1db6a:	6839      	ldr	r1, [r7, #0]
   1db6c:	f7ff f89e 	bl	1ccac <memset>
   1db70:	e7dc      	b.n	1db2c <net_pkt_cursor_operate+0x74>
	if (length) {
   1db72:	2d00      	cmp	r5, #0
   1db74:	d0ac      	beq.n	1dad0 <net_pkt_cursor_operate+0x18>
   1db76:	e7b9      	b.n	1daec <net_pkt_cursor_operate+0x34>

0001db78 <net_pkt_ref>:
{
   1db78:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   1db7a:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1db7e:	b170      	cbz	r0, 1db9e <net_pkt_ref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1db80:	e8d3 2faf 	lda	r2, [r3]
		if (!ref) {
   1db84:	b15a      	cbz	r2, 1db9e <net_pkt_ref+0x26>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   1db86:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1db88:	e8d3 4fef 	ldaex	r4, [r3]
   1db8c:	4294      	cmp	r4, r2
   1db8e:	d104      	bne.n	1db9a <net_pkt_ref+0x22>
   1db90:	e8c3 1fec 	stlex	ip, r1, [r3]
   1db94:	f1bc 0f00 	cmp.w	ip, #0
   1db98:	d1f6      	bne.n	1db88 <net_pkt_ref+0x10>
   1db9a:	d1f0      	bne.n	1db7e <net_pkt_ref+0x6>
}
   1db9c:	bd10      	pop	{r4, pc}
			return NULL;
   1db9e:	2000      	movs	r0, #0
   1dba0:	e7fc      	b.n	1db9c <net_pkt_ref+0x24>

0001dba2 <net_pkt_frag_unref>:
	if (!frag) {
   1dba2:	b108      	cbz	r0, 1dba8 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   1dba4:	f7f1 bd4e 	b.w	f644 <net_buf_unref>
}
   1dba8:	4770      	bx	lr

0001dbaa <net_pkt_unref>:
{
   1dbaa:	b507      	push	{r0, r1, r2, lr}
   1dbac:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1dbae:	b1e8      	cbz	r0, 1dbec <net_pkt_unref+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dbb0:	9b01      	ldr	r3, [sp, #4]
   1dbb2:	3324      	adds	r3, #36	; 0x24
   1dbb4:	e8d3 3faf 	lda	r3, [r3]
		if (!ref) {
   1dbb8:	b1c3      	cbz	r3, 1dbec <net_pkt_unref+0x42>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1dbba:	9a01      	ldr	r2, [sp, #4]
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   1dbbc:	1e59      	subs	r1, r3, #1
   1dbbe:	3224      	adds	r2, #36	; 0x24
   1dbc0:	e8d2 0fef 	ldaex	r0, [r2]
   1dbc4:	4298      	cmp	r0, r3
   1dbc6:	d104      	bne.n	1dbd2 <net_pkt_unref+0x28>
   1dbc8:	e8c2 1fec 	stlex	ip, r1, [r2]
   1dbcc:	f1bc 0f00 	cmp.w	ip, #0
   1dbd0:	d1f6      	bne.n	1dbc0 <net_pkt_unref+0x16>
   1dbd2:	d1ed      	bne.n	1dbb0 <net_pkt_unref+0x6>
	if (ref > 1) {
   1dbd4:	2b01      	cmp	r3, #1
   1dbd6:	dc09      	bgt.n	1dbec <net_pkt_unref+0x42>
	if (pkt->frags) {
   1dbd8:	9b01      	ldr	r3, [sp, #4]
   1dbda:	6918      	ldr	r0, [r3, #16]
   1dbdc:	b108      	cbz	r0, 1dbe2 <net_pkt_unref+0x38>
		net_pkt_frag_unref(pkt->frags);
   1dbde:	f7ff ffe0 	bl	1dba2 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1dbe2:	9b01      	ldr	r3, [sp, #4]
   1dbe4:	a901      	add	r1, sp, #4
   1dbe6:	68d8      	ldr	r0, [r3, #12]
   1dbe8:	f7fd f8d2 	bl	1ad90 <k_mem_slab_free>
}
   1dbec:	b003      	add	sp, #12
   1dbee:	f85d fb04 	ldr.w	pc, [sp], #4

0001dbf2 <net_pkt_available_buffer>:
{
   1dbf2:	b508      	push	{r3, lr}
	if (!pkt) {
   1dbf4:	b130      	cbz	r0, 1dc04 <net_pkt_available_buffer+0x12>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   1dbf6:	6900      	ldr	r0, [r0, #16]
	size_t size = 0;
   1dbf8:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   1dbfa:	4603      	mov	r3, r0
	while (buf) {
   1dbfc:	b91b      	cbnz	r3, 1dc06 <net_pkt_available_buffer+0x14>
	return net_buf_frags_len(pkt->frags);
   1dbfe:	f7ff ff13 	bl	1da28 <net_buf_frags_len>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   1dc02:	1a08      	subs	r0, r1, r0
}
   1dc04:	bd08      	pop	{r3, pc}
		size += buf->size;
   1dc06:	89da      	ldrh	r2, [r3, #14]
		buf = buf->frags;
   1dc08:	681b      	ldr	r3, [r3, #0]
		size += buf->size;
   1dc0a:	4411      	add	r1, r2
		buf = buf->frags;
   1dc0c:	e7f6      	b.n	1dbfc <net_pkt_available_buffer+0xa>

0001dc0e <net_pkt_trim_buffer>:
{
   1dc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc10:	4604      	mov	r4, r0
	buf = pkt->buffer;
   1dc12:	6900      	ldr	r0, [r0, #16]
			buf->frags = NULL;
   1dc14:	2700      	movs	r7, #0
	prev = buf;
   1dc16:	4605      	mov	r5, r0
	while (buf) {
   1dc18:	b900      	cbnz	r0, 1dc1c <net_pkt_trim_buffer+0xe>
}
   1dc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
   1dc1c:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
   1dc1e:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
   1dc20:	b93b      	cbnz	r3, 1dc32 <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
   1dc22:	6923      	ldr	r3, [r4, #16]
   1dc24:	4283      	cmp	r3, r0
   1dc26:	d107      	bne.n	1dc38 <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
   1dc28:	6126      	str	r6, [r4, #16]
			buf->frags = NULL;
   1dc2a:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
   1dc2c:	f7f1 fd0a 	bl	f644 <net_buf_unref>
   1dc30:	4628      	mov	r0, r5
   1dc32:	4605      	mov	r5, r0
   1dc34:	4630      	mov	r0, r6
   1dc36:	e7ef      	b.n	1dc18 <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   1dc38:	682b      	ldr	r3, [r5, #0]
   1dc3a:	4283      	cmp	r3, r0
				prev->frags = next;
   1dc3c:	bf08      	it	eq
   1dc3e:	602e      	streq	r6, [r5, #0]
   1dc40:	e7f3      	b.n	1dc2a <net_pkt_trim_buffer+0x1c>

0001dc42 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   1dc42:	6903      	ldr	r3, [r0, #16]
   1dc44:	6143      	str	r3, [r0, #20]
	if (pkt->cursor.buf) {
   1dc46:	b103      	cbz	r3, 1dc4a <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
   1dc48:	689b      	ldr	r3, [r3, #8]
   1dc4a:	6183      	str	r3, [r0, #24]
}
   1dc4c:	4770      	bx	lr

0001dc4e <pkt_alloc>:
{
   1dc4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1dc50:	4604      	mov	r4, r0
   1dc52:	4616      	mov	r6, r2
   1dc54:	461d      	mov	r5, r3
	if (k_is_in_isr()) {
   1dc56:	f002 fcc8 	bl	205ea <k_is_in_isr>
   1dc5a:	b108      	cbz	r0, 1dc60 <pkt_alloc+0x12>
		timeout = K_NO_WAIT;
   1dc5c:	2600      	movs	r6, #0
   1dc5e:	4635      	mov	r5, r6
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1dc60:	a901      	add	r1, sp, #4
   1dc62:	4632      	mov	r2, r6
   1dc64:	462b      	mov	r3, r5
   1dc66:	4620      	mov	r0, r4
   1dc68:	f7fd f860 	bl	1ad2c <k_mem_slab_alloc>
	if (ret) {
   1dc6c:	4601      	mov	r1, r0
   1dc6e:	b978      	cbnz	r0, 1dc90 <pkt_alloc+0x42>
	memset(pkt, 0, sizeof(struct net_pkt));
   1dc70:	2244      	movs	r2, #68	; 0x44
   1dc72:	9801      	ldr	r0, [sp, #4]
   1dc74:	f7ff f81a 	bl	1ccac <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
   1dc78:	2301      	movs	r3, #1
   1dc7a:	9801      	ldr	r0, [sp, #4]
   1dc7c:	6243      	str	r3, [r0, #36]	; 0x24
	pkt->ipv6_next_hdr = next_hdr;
   1dc7e:	23ff      	movs	r3, #255	; 0xff
	pkt->slab = slab;
   1dc80:	60c4      	str	r4, [r0, #12]
   1dc82:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
	net_pkt_cursor_init(pkt);
   1dc86:	f7ff ffdc 	bl	1dc42 <net_pkt_cursor_init>
	return pkt;
   1dc8a:	9801      	ldr	r0, [sp, #4]
}
   1dc8c:	b002      	add	sp, #8
   1dc8e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1dc90:	2000      	movs	r0, #0
   1dc92:	e7fb      	b.n	1dc8c <pkt_alloc+0x3e>

0001dc94 <pkt_alloc_on_iface>:
{
   1dc94:	b510      	push	{r4, lr}
   1dc96:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   1dc98:	f7ff ffd9 	bl	1dc4e <pkt_alloc>
	if (pkt) {
   1dc9c:	b148      	cbz	r0, 1dcb2 <pkt_alloc_on_iface+0x1e>
	pkt->iface = iface;
   1dc9e:	6204      	str	r4, [r0, #32]
	if (iface) {
   1dca0:	b13c      	cbz	r4, 1dcb2 <pkt_alloc_on_iface+0x1e>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1dca2:	6823      	ldr	r3, [r4, #0]
   1dca4:	7d5b      	ldrb	r3, [r3, #21]
   1dca6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1dcaa:	6823      	ldr	r3, [r4, #0]
   1dcac:	7d5b      	ldrb	r3, [r3, #21]
   1dcae:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
   1dcb2:	bd10      	pop	{r4, pc}

0001dcb4 <net_pkt_append_buffer>:
	if (!pkt->buffer) {
   1dcb4:	6902      	ldr	r2, [r0, #16]
{
   1dcb6:	b510      	push	{r4, lr}
   1dcb8:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   1dcba:	b922      	cbnz	r2, 1dcc6 <net_pkt_append_buffer+0x12>
}
   1dcbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pkt->buffer = buffer;
   1dcc0:	6101      	str	r1, [r0, #16]
		net_pkt_cursor_init(pkt);
   1dcc2:	f7ff bfbe 	b.w	1dc42 <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   1dcc6:	4610      	mov	r0, r2
   1dcc8:	f7ff f89f 	bl	1ce0a <net_buf_frag_last>
   1dccc:	4621      	mov	r1, r4
}
   1dcce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   1dcd2:	f7ff b8a0 	b.w	1ce16 <net_buf_frag_insert>

0001dcd6 <pkt_alloc_with_buffer>:
{
   1dcd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcda:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   1dcde:	4604      	mov	r4, r0
   1dce0:	468b      	mov	fp, r1
	u64_t end = z_timeout_end_calc(timeout);
   1dce2:	4630      	mov	r0, r6
   1dce4:	4639      	mov	r1, r7
{
   1dce6:	4690      	mov	r8, r2
   1dce8:	469a      	mov	sl, r3
	u64_t end = z_timeout_end_calc(timeout);
   1dcea:	f002 fd5b 	bl	207a4 <z_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   1dcee:	4632      	mov	r2, r6
	u64_t end = z_timeout_end_calc(timeout);
   1dcf0:	4605      	mov	r5, r0
   1dcf2:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   1dcf4:	4620      	mov	r0, r4
   1dcf6:	463b      	mov	r3, r7
   1dcf8:	4659      	mov	r1, fp
   1dcfa:	f7ff ffcb 	bl	1dc94 <pkt_alloc_on_iface>
	if (!pkt) {
   1dcfe:	4604      	mov	r4, r0
   1dd00:	b328      	cbz	r0, 1dd4e <pkt_alloc_with_buffer+0x78>
	pkt->family = family;
   1dd02:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1dd06:	f36a 0343 	bfi	r3, sl, #1, #3
   1dd0a:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1dd0e:	ea56 0307 	orrs.w	r3, r6, r7
   1dd12:	d00f      	beq.n	1dd34 <pkt_alloc_with_buffer+0x5e>
   1dd14:	1c7b      	adds	r3, r7, #1
   1dd16:	bf08      	it	eq
   1dd18:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1dd1c:	d00a      	beq.n	1dd34 <pkt_alloc_with_buffer+0x5e>
		s64_t remaining = end - z_tick_get();
   1dd1e:	f7fd ff67 	bl	1bbf0 <z_tick_get>
   1dd22:	1a2e      	subs	r6, r5, r0
   1dd24:	eb69 0701 	sbc.w	r7, r9, r1
   1dd28:	2e00      	cmp	r6, #0
   1dd2a:	f177 0300 	sbcs.w	r3, r7, #0
   1dd2e:	bfbc      	itt	lt
   1dd30:	2600      	movlt	r6, #0
   1dd32:	2700      	movlt	r7, #0
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   1dd34:	4641      	mov	r1, r8
   1dd36:	4620      	mov	r0, r4
   1dd38:	e9cd 6700 	strd	r6, r7, [sp]
   1dd3c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1dd40:	f7f2 fade 	bl	10300 <net_pkt_alloc_buffer>
	if (ret) {
   1dd44:	b118      	cbz	r0, 1dd4e <pkt_alloc_with_buffer+0x78>
		net_pkt_unref(pkt);
   1dd46:	4620      	mov	r0, r4
   1dd48:	f7ff ff2f 	bl	1dbaa <net_pkt_unref>
		return NULL;
   1dd4c:	2400      	movs	r4, #0
}
   1dd4e:	4620      	mov	r0, r4
   1dd50:	b003      	add	sp, #12
   1dd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dd56 <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   1dd56:	2301      	movs	r3, #1
{
   1dd58:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   1dd5a:	9300      	str	r3, [sp, #0]
   1dd5c:	2300      	movs	r3, #0
{
   1dd5e:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   1dd60:	4619      	mov	r1, r3
   1dd62:	f7ff fea9 	bl	1dab8 <net_pkt_cursor_operate>
}
   1dd66:	b003      	add	sp, #12
   1dd68:	f85d fb04 	ldr.w	pc, [sp], #4

0001dd6c <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
   1dd6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   1dd6e:	2301      	movs	r3, #1
{
   1dd70:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   1dd72:	9300      	str	r3, [sp, #0]
   1dd74:	a903      	add	r1, sp, #12
   1dd76:	2300      	movs	r3, #0
   1dd78:	f7ff fe9e 	bl	1dab8 <net_pkt_cursor_operate>
}
   1dd7c:	b005      	add	sp, #20
   1dd7e:	f85d fb04 	ldr.w	pc, [sp], #4

0001dd82 <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
   1dd82:	2300      	movs	r3, #0
{
   1dd84:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   1dd86:	9300      	str	r3, [sp, #0]
   1dd88:	2301      	movs	r3, #1
   1dd8a:	f7ff fe95 	bl	1dab8 <net_pkt_cursor_operate>
}
   1dd8e:	b003      	add	sp, #12
   1dd90:	f85d fb04 	ldr.w	pc, [sp], #4

0001dd94 <net_pkt_read_be32>:
int net_pkt_read_be32(struct net_pkt *pkt, u32_t *data)
{
	u8_t d32[4];
	int ret;

	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
   1dd94:	2204      	movs	r2, #4
{
   1dd96:	b513      	push	{r0, r1, r4, lr}
   1dd98:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(u32_t));
   1dd9a:	eb0d 0102 	add.w	r1, sp, r2
   1dd9e:	f7ff fff0 	bl	1dd82 <net_pkt_read>

	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
   1dda2:	9b01      	ldr	r3, [sp, #4]
   1dda4:	ba1b      	rev	r3, r3
   1dda6:	6023      	str	r3, [r4, #0]

	return ret;
}
   1dda8:	b002      	add	sp, #8
   1ddaa:	bd10      	pop	{r4, pc}

0001ddac <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
   1ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ddae:	4606      	mov	r6, r0
   1ddb0:	460f      	mov	r7, r1
   1ddb2:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
   1ddb4:	6973      	ldr	r3, [r6, #20]
   1ddb6:	2b00      	cmp	r3, #0
   1ddb8:	d041      	beq.n	1de3e <net_pkt_copy+0x92>
   1ddba:	697b      	ldr	r3, [r7, #20]
   1ddbc:	2b00      	cmp	r3, #0
   1ddbe:	d03e      	beq.n	1de3e <net_pkt_copy+0x92>
   1ddc0:	b90c      	cbnz	r4, 1ddc6 <net_pkt_copy+0x1a>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   1ddc2:	4620      	mov	r0, r4
   1ddc4:	e021      	b.n	1de0a <net_pkt_copy+0x5e>
		pkt_cursor_advance(pkt_dst, true);
   1ddc6:	2101      	movs	r1, #1
   1ddc8:	4630      	mov	r0, r6
   1ddca:	f7ff fe44 	bl	1da56 <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   1ddce:	2100      	movs	r1, #0
   1ddd0:	4638      	mov	r0, r7
   1ddd2:	f7ff fe40 	bl	1da56 <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   1ddd6:	6972      	ldr	r2, [r6, #20]
   1ddd8:	b1aa      	cbz	r2, 1de06 <net_pkt_copy+0x5a>
   1ddda:	697b      	ldr	r3, [r7, #20]
   1dddc:	b19b      	cbz	r3, 1de06 <net_pkt_copy+0x5a>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   1ddde:	899d      	ldrh	r5, [r3, #12]
   1dde0:	69b9      	ldr	r1, [r7, #24]
   1dde2:	689b      	ldr	r3, [r3, #8]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   1dde4:	69b0      	ldr	r0, [r6, #24]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   1dde6:	1acb      	subs	r3, r1, r3
   1dde8:	1aed      	subs	r5, r5, r3
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   1ddea:	89d3      	ldrh	r3, [r2, #14]
   1ddec:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
   1ddee:	42ac      	cmp	r4, r5
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   1ddf0:	eba0 0202 	sub.w	r2, r0, r2
   1ddf4:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
   1ddf8:	d201      	bcs.n	1ddfe <net_pkt_copy+0x52>
   1ddfa:	429c      	cmp	r4, r3
   1ddfc:	d306      	bcc.n	1de0c <net_pkt_copy+0x60>
			if (d_len < s_len) {
   1ddfe:	429d      	cmp	r5, r3
   1de00:	bf28      	it	cs
   1de02:	461d      	movcs	r5, r3
		if (!len) {
   1de04:	b91d      	cbnz	r5, 1de0e <net_pkt_copy+0x62>
		return -ENOBUFS;
   1de06:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1de0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1de0c:	4625      	mov	r5, r4
		memcpy(c_dst->pos, c_src->pos, len);
   1de0e:	462a      	mov	r2, r5
   1de10:	f7fe ff21 	bl	1cc56 <memcpy>
	return pkt->overwrite;
   1de14:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   1de18:	07db      	lsls	r3, r3, #31
   1de1a:	d404      	bmi.n	1de26 <net_pkt_copy+0x7a>
			net_buf_add(c_dst->buf, len);
   1de1c:	6970      	ldr	r0, [r6, #20]
   1de1e:	4629      	mov	r1, r5
   1de20:	3008      	adds	r0, #8
   1de22:	f7ff f803 	bl	1ce2c <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
   1de26:	2201      	movs	r2, #1
   1de28:	4629      	mov	r1, r5
   1de2a:	4630      	mov	r0, r6
   1de2c:	f7ff fe26 	bl	1da7c <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   1de30:	2200      	movs	r2, #0
   1de32:	4629      	mov	r1, r5
   1de34:	4638      	mov	r0, r7
   1de36:	f7ff fe21 	bl	1da7c <pkt_cursor_update>
		length -= len;
   1de3a:	1b64      	subs	r4, r4, r5
   1de3c:	e7ba      	b.n	1ddb4 <net_pkt_copy+0x8>
	if (length) {
   1de3e:	2c00      	cmp	r4, #0
   1de40:	d0bf      	beq.n	1ddc2 <net_pkt_copy+0x16>
   1de42:	e7e0      	b.n	1de06 <net_pkt_copy+0x5a>

0001de44 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   1de44:	6903      	ldr	r3, [r0, #16]
   1de46:	b92b      	cbnz	r3, 1de54 <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
   1de48:	2900      	cmp	r1, #0
}
   1de4a:	bf14      	ite	ne
   1de4c:	f06f 0015 	mvnne.w	r0, #21
   1de50:	2000      	moveq	r0, #0
   1de52:	4770      	bx	lr
		if (buf->len < length) {
   1de54:	899a      	ldrh	r2, [r3, #12]
   1de56:	428a      	cmp	r2, r1
			buf->len = length;
   1de58:	bf2a      	itet	cs
   1de5a:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
   1de5c:	1a89      	subcc	r1, r1, r2
			length = 0;
   1de5e:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   1de60:	681b      	ldr	r3, [r3, #0]
   1de62:	e7f0      	b.n	1de46 <net_pkt_update_length+0x2>

0001de64 <net_pkt_get_current_offset>:
u16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	u16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   1de64:	6941      	ldr	r1, [r0, #20]
{
   1de66:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   1de68:	b179      	cbz	r1, 1de8a <net_pkt_get_current_offset+0x26>
   1de6a:	6983      	ldr	r3, [r0, #24]
   1de6c:	b17b      	cbz	r3, 1de8e <net_pkt_get_current_offset+0x2a>
		return 0;
	}

	offset = 0U;
   1de6e:	2200      	movs	r2, #0
	struct net_buf *buf = pkt->buffer;
   1de70:	6904      	ldr	r4, [r0, #16]

	while (buf != pkt->cursor.buf) {
   1de72:	42a1      	cmp	r1, r4
   1de74:	d104      	bne.n	1de80 <net_pkt_get_current_offset+0x1c>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
   1de76:	6888      	ldr	r0, [r1, #8]
   1de78:	1a18      	subs	r0, r3, r0
   1de7a:	4410      	add	r0, r2
   1de7c:	b280      	uxth	r0, r0

	return offset;
}
   1de7e:	bd10      	pop	{r4, pc}
		offset += buf->len;
   1de80:	89a0      	ldrh	r0, [r4, #12]
		buf = buf->frags;
   1de82:	6824      	ldr	r4, [r4, #0]
		offset += buf->len;
   1de84:	4402      	add	r2, r0
   1de86:	b292      	uxth	r2, r2
		buf = buf->frags;
   1de88:	e7f3      	b.n	1de72 <net_pkt_get_current_offset+0xe>
		return 0;
   1de8a:	4608      	mov	r0, r1
   1de8c:	e7f7      	b.n	1de7e <net_pkt_get_current_offset+0x1a>
   1de8e:	4618      	mov	r0, r3
   1de90:	e7f5      	b.n	1de7e <net_pkt_get_current_offset+0x1a>

0001de92 <net_pkt_clone>:
{
   1de92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1de96:	461d      	mov	r5, r3
   1de98:	4617      	mov	r7, r2
   1de9a:	4604      	mov	r4, r0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
   1de9c:	f7ff ffe2 	bl	1de64 <net_pkt_get_current_offset>
   1dea0:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   1dea2:	6920      	ldr	r0, [r4, #16]
   1dea4:	f7ff fdc0 	bl	1da28 <net_buf_frags_len>
	clone_pkt = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   1dea8:	2300      	movs	r3, #0
   1deaa:	4601      	mov	r1, r0
   1deac:	e9cd 7500 	strd	r7, r5, [sp]
   1deb0:	461a      	mov	r2, r3
   1deb2:	6a20      	ldr	r0, [r4, #32]
   1deb4:	f7f2 fae2 	bl	1047c <net_pkt_alloc_with_buffer>
	if (!clone_pkt) {
   1deb8:	4605      	mov	r5, r0
   1deba:	b198      	cbz	r0, 1dee4 <net_pkt_clone+0x52>
	backup->pos = pkt->cursor.pos;
   1debc:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
	net_pkt_cursor_init(pkt);
   1dec0:	4620      	mov	r0, r4
   1dec2:	f7ff febe 	bl	1dc42 <net_pkt_cursor_init>
	return net_buf_frags_len(pkt->frags);
   1dec6:	6920      	ldr	r0, [r4, #16]
   1dec8:	f7ff fdae 	bl	1da28 <net_buf_frags_len>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
   1decc:	4621      	mov	r1, r4
   1dece:	4602      	mov	r2, r0
   1ded0:	4628      	mov	r0, r5
   1ded2:	f7ff ff6b 	bl	1ddac <net_pkt_copy>
   1ded6:	b148      	cbz	r0, 1deec <net_pkt_clone+0x5a>
		net_pkt_unref(clone_pkt);
   1ded8:	4628      	mov	r0, r5
		return NULL;
   1deda:	2500      	movs	r5, #0
		net_pkt_unref(clone_pkt);
   1dedc:	f7ff fe65 	bl	1dbaa <net_pkt_unref>
	pkt->cursor.pos = backup->pos;
   1dee0:	e9c4 8705 	strd	r8, r7, [r4, #20]
}
   1dee4:	4628      	mov	r0, r5
   1dee6:	b002      	add	sp, #8
   1dee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clone_pkt->buffer) {
   1deec:	692b      	ldr	r3, [r5, #16]
   1deee:	b16b      	cbz	r3, 1df0c <net_pkt_clone+0x7a>
		memcpy(&clone_pkt->lladdr_src, &pkt->lladdr_src,
   1def0:	2208      	movs	r2, #8
   1def2:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1def6:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1defa:	f7fe feac 	bl	1cc56 <memcpy>
		memcpy(&clone_pkt->lladdr_dst, &pkt->lladdr_dst,
   1defe:	2208      	movs	r2, #8
   1df00:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1df04:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1df08:	f7fe fea5 	bl	1cc56 <memcpy>
	return pkt->family;
   1df0c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	pkt->family = family;
   1df10:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	return pkt->family;
   1df14:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
   1df18:	f363 0243 	bfi	r2, r3, #1, #3
   1df1c:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
	net_pkt_set_context(clone_pkt, net_pkt_context(pkt));
   1df20:	69e3      	ldr	r3, [r4, #28]
	pkt->context = ctx;
   1df22:	61eb      	str	r3, [r5, #28]
	net_pkt_set_ip_hdr_len(clone_pkt, net_pkt_ip_hdr_len(pkt));
   1df24:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1df28:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	return pkt->family;
   1df2c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
   1df30:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1df34:	2b02      	cmp	r3, #2
   1df36:	d111      	bne.n	1df5c <net_pkt_clone+0xca>
		net_pkt_set_ipv6_hop_limit(clone_pkt,
   1df38:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	pkt->ipv6_hop_limit = hop_limit;
   1df3c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
		net_pkt_set_ipv6_ext_len(clone_pkt, net_pkt_ipv6_ext_len(pkt));
   1df40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
	pkt->ipv6_ext_len = len;
   1df42:	87eb      	strh	r3, [r5, #62]	; 0x3e
		net_pkt_set_ipv6_ext_opt_len(clone_pkt,
   1df44:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	pkt->ipv6_ext_opt_len = len;
   1df48:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
		net_pkt_set_ipv6_hdr_prev(clone_pkt,
   1df4c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	pkt->ipv6_prev_hdr_start = offset;
   1df50:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
		net_pkt_set_ipv6_next_hdr(clone_pkt,
   1df54:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	pkt->ipv6_next_hdr = next_hdr;
   1df58:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	net_pkt_cursor_init(clone_pkt);
   1df5c:	4628      	mov	r0, r5
   1df5e:	f7ff fe70 	bl	1dc42 <net_pkt_cursor_init>
	if (cursor_offset) {
   1df62:	b146      	cbz	r6, 1df76 <net_pkt_clone+0xe4>
	pkt->overwrite = overwrite;
   1df64:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
		net_pkt_skip(clone_pkt, cursor_offset);
   1df68:	4631      	mov	r1, r6
   1df6a:	f043 0301 	orr.w	r3, r3, #1
   1df6e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1df72:	f7ff fef0 	bl	1dd56 <net_pkt_skip>
	pkt->cursor.pos = backup->pos;
   1df76:	e9c4 8705 	strd	r8, r7, [r4, #20]
	return clone_pkt;
   1df7a:	e7b3      	b.n	1dee4 <net_pkt_clone+0x52>

0001df7c <net_pkt_is_contiguous>:

bool net_pkt_is_contiguous(struct net_pkt *pkt, size_t size)
{
   1df7c:	b538      	push	{r3, r4, r5, lr}
   1df7e:	460d      	mov	r5, r1
	return pkt->overwrite;
   1df80:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   1df84:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
   1df86:	43c9      	mvns	r1, r1
   1df88:	f001 0101 	and.w	r1, r1, #1
   1df8c:	f7ff fd63 	bl	1da56 <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
   1df90:	6940      	ldr	r0, [r0, #20]
   1df92:	b170      	cbz	r0, 1dfb2 <net_pkt_is_contiguous+0x36>
   1df94:	69a3      	ldr	r3, [r4, #24]
   1df96:	b16b      	cbz	r3, 1dfb4 <net_pkt_is_contiguous+0x38>
   1df98:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   1df9c:	07d2      	lsls	r2, r2, #31
   1df9e:	bf4c      	ite	mi
   1dfa0:	8982      	ldrhmi	r2, [r0, #12]
   1dfa2:	89c2      	ldrhpl	r2, [r0, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   1dfa4:	6880      	ldr	r0, [r0, #8]
   1dfa6:	1a1b      	subs	r3, r3, r0
   1dfa8:	1ad3      	subs	r3, r2, r3
		if (len >= size) {
   1dfaa:	42ab      	cmp	r3, r5
   1dfac:	bf34      	ite	cc
   1dfae:	2000      	movcc	r0, #0
   1dfb0:	2001      	movcs	r0, #1
			return true;
		}
	}

	return false;
}
   1dfb2:	bd38      	pop	{r3, r4, r5, pc}
	return false;
   1dfb4:	4618      	mov	r0, r3
   1dfb6:	e7fc      	b.n	1dfb2 <net_pkt_is_contiguous+0x36>

0001dfb8 <net_pkt_write>:
{
   1dfb8:	b530      	push	{r4, r5, lr}
   1dfba:	460d      	mov	r5, r1
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   1dfbc:	6983      	ldr	r3, [r0, #24]
{
   1dfbe:	4604      	mov	r4, r0
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   1dfc0:	429d      	cmp	r5, r3
{
   1dfc2:	4611      	mov	r1, r2
   1dfc4:	b085      	sub	sp, #20
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   1dfc6:	d10a      	bne.n	1dfde <net_pkt_write+0x26>
   1dfc8:	9203      	str	r2, [sp, #12]
   1dfca:	f7ff ffd7 	bl	1df7c <net_pkt_is_contiguous>
   1dfce:	9903      	ldr	r1, [sp, #12]
   1dfd0:	b128      	cbz	r0, 1dfde <net_pkt_write+0x26>
		return net_pkt_skip(pkt, length);
   1dfd2:	4620      	mov	r0, r4
}
   1dfd4:	b005      	add	sp, #20
   1dfd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return net_pkt_skip(pkt, length);
   1dfda:	f7ff bebc 	b.w	1dd56 <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   1dfde:	2301      	movs	r3, #1
   1dfe0:	460a      	mov	r2, r1
   1dfe2:	4620      	mov	r0, r4
   1dfe4:	4629      	mov	r1, r5
   1dfe6:	9300      	str	r3, [sp, #0]
   1dfe8:	f7ff fd66 	bl	1dab8 <net_pkt_cursor_operate>
}
   1dfec:	b005      	add	sp, #20
   1dfee:	bd30      	pop	{r4, r5, pc}

0001dff0 <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   1dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dff4:	460d      	mov	r5, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   1dff6:	6849      	ldr	r1, [r1, #4]
{
   1dff8:	4604      	mov	r4, r0
		if (net_pkt_is_contiguous(pkt, access->size)) {
   1dffa:	f7ff ffbf 	bl	1df7c <net_pkt_is_contiguous>
   1dffe:	4606      	mov	r6, r0
   1e000:	b118      	cbz	r0, 1e00a <net_pkt_get_data+0x1a>
			access->data = pkt->cursor.pos;
   1e002:	69a3      	ldr	r3, [r4, #24]
   1e004:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
   1e006:	6829      	ldr	r1, [r5, #0]
   1e008:	e010      	b.n	1e02c <net_pkt_get_data+0x3c>
   1e00a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		} else if (net_pkt_is_being_overwritten(pkt)) {
   1e00e:	07db      	lsls	r3, r3, #31
   1e010:	d5f9      	bpl.n	1e006 <net_pkt_get_data+0x16>
   1e012:	6829      	ldr	r1, [r5, #0]
			if (!access->data) {
   1e014:	b151      	cbz	r1, 1e02c <net_pkt_get_data+0x3c>
	backup->pos = pkt->cursor.pos;
   1e016:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
			if (net_pkt_read(pkt, access->data, access->size)) {
   1e01a:	4620      	mov	r0, r4
   1e01c:	686a      	ldr	r2, [r5, #4]
   1e01e:	f7ff feb0 	bl	1dd82 <net_pkt_read>
	pkt->cursor.pos = backup->pos;
   1e022:	e9c4 8705 	strd	r8, r7, [r4, #20]
   1e026:	2800      	cmp	r0, #0
   1e028:	d0ed      	beq.n	1e006 <net_pkt_get_data+0x16>
				return NULL;
   1e02a:	4631      	mov	r1, r6
	}

	return NULL;
}
   1e02c:	4608      	mov	r0, r1
   1e02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e032 <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   1e032:	e9d1 1200 	ldrd	r1, r2, [r1]
   1e036:	f7ff bfbf 	b.w	1dfb8 <net_pkt_write>

0001e03a <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   1e03a:	4770      	bx	lr

0001e03c <k_work_submit_to_queue>:
{
   1e03c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e03e:	f101 0308 	add.w	r3, r1, #8
   1e042:	e8d3 2fef 	ldaex	r2, [r3]
   1e046:	f042 0c01 	orr.w	ip, r2, #1
   1e04a:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e04e:	f1be 0f00 	cmp.w	lr, #0
   1e052:	d1f6      	bne.n	1e042 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e054:	07d3      	lsls	r3, r2, #31
   1e056:	d403      	bmi.n	1e060 <k_work_submit_to_queue+0x24>
}
   1e058:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e05c:	f002 b98e 	b.w	2037c <k_queue_append>
}
   1e060:	f85d fb04 	ldr.w	pc, [sp], #4

0001e064 <net_icmpv6_finalize>:
{
   1e064:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1e066:	2304      	movs	r3, #4
   1e068:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1e06a:	4669      	mov	r1, sp
{
   1e06c:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1e06e:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1e072:	f7ff ffbd 	bl	1dff0 <net_pkt_get_data>
	if (!icmp_hdr) {
   1e076:	4605      	mov	r5, r0
   1e078:	b150      	cbz	r0, 1e090 <net_icmpv6_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e07a:	213a      	movs	r1, #58	; 0x3a
   1e07c:	4620      	mov	r0, r4
   1e07e:	f7ff fc58 	bl	1d932 <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmp_access);
   1e082:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv6(pkt);
   1e084:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmp_access);
   1e086:	4620      	mov	r0, r4
   1e088:	f7ff ffd3 	bl	1e032 <net_pkt_set_data>
}
   1e08c:	b003      	add	sp, #12
   1e08e:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   1e090:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e094:	e7fa      	b.n	1e08c <net_icmpv6_finalize+0x28>

0001e096 <net_icmpv6_create>:
{
   1e096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1e098:	2304      	movs	r3, #4
   1e09a:	2500      	movs	r5, #0
{
   1e09c:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1e09e:	4669      	mov	r1, sp
{
   1e0a0:	4604      	mov	r4, r0
   1e0a2:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1e0a4:	e9cd 5300 	strd	r5, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1e0a8:	f7ff ffa2 	bl	1dff0 <net_pkt_get_data>
	if (!icmp_hdr) {
   1e0ac:	b148      	cbz	r0, 1e0c2 <net_icmpv6_create+0x2c>
	icmp_hdr->type   = icmp_type;
   1e0ae:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
   1e0b0:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
   1e0b2:	7085      	strb	r5, [r0, #2]
   1e0b4:	70c5      	strb	r5, [r0, #3]
	return net_pkt_set_data(pkt, &icmp_access);
   1e0b6:	4669      	mov	r1, sp
   1e0b8:	4620      	mov	r0, r4
   1e0ba:	f7ff ffba 	bl	1e032 <net_pkt_set_data>
}
   1e0be:	b003      	add	sp, #12
   1e0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1e0c2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e0c6:	e7fa      	b.n	1e0be <net_icmpv6_create+0x28>

0001e0c8 <icmpv6_handle_echo_request>:
{
   1e0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	payload_len = ntohs(ip_hdr->len) -
   1e0ca:	888b      	ldrh	r3, [r1, #4]
{
   1e0cc:	4606      	mov	r6, r0
	payload_len = ntohs(ip_hdr->len) -
   1e0ce:	021d      	lsls	r5, r3, #8
   1e0d0:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1e0d4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
{
   1e0d6:	460f      	mov	r7, r1
	payload_len = ntohs(ip_hdr->len) -
   1e0d8:	1aed      	subs	r5, r5, r3
   1e0da:	3d04      	subs	r5, #4
   1e0dc:	b22d      	sxth	r5, r5
	if (payload_len < NET_ICMPV6_UNUSED_LEN) {
   1e0de:	2d03      	cmp	r5, #3
   1e0e0:	dc01      	bgt.n	1e0e6 <icmpv6_handle_echo_request+0x1e>
	return NET_DROP;
   1e0e2:	2002      	movs	r0, #2
   1e0e4:	e03c      	b.n	1e160 <icmpv6_handle_echo_request+0x98>
					  PKT_WAIT_TIME);
   1e0e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1e0ea:	2300      	movs	r3, #0
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
   1e0ec:	e9cd 2300 	strd	r2, r3, [sp]
   1e0f0:	4629      	mov	r1, r5
   1e0f2:	233a      	movs	r3, #58	; 0x3a
   1e0f4:	2202      	movs	r2, #2
   1e0f6:	6a00      	ldr	r0, [r0, #32]
   1e0f8:	f7f2 f9c0 	bl	1047c <net_pkt_alloc_with_buffer>
	if (!reply) {
   1e0fc:	4604      	mov	r4, r0
   1e0fe:	2800      	cmp	r0, #0
   1e100:	d0ef      	beq.n	1e0e2 <icmpv6_handle_echo_request+0x1a>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
   1e102:	7e3b      	ldrb	r3, [r7, #24]
   1e104:	f107 0118 	add.w	r1, r7, #24
   1e108:	2bff      	cmp	r3, #255	; 0xff
   1e10a:	d103      	bne.n	1e114 <icmpv6_handle_echo_request+0x4c>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1e10c:	6a30      	ldr	r0, [r6, #32]
   1e10e:	f7f1 ffb1 	bl	10074 <net_if_ipv6_select_src_addr>
   1e112:	4601      	mov	r1, r0
	net_pkt_lladdr_dst(reply)->addr = NULL;
   1e114:	2300      	movs	r3, #0
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
   1e116:	f107 0208 	add.w	r2, r7, #8
   1e11a:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(reply)->addr = NULL;
   1e11c:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_src(reply)->addr = NULL;
   1e11e:	62a3      	str	r3, [r4, #40]	; 0x28
	if (net_ipv6_create(reply, src, &ip_hdr->src)) {
   1e120:	f000 f8fd 	bl	1e31e <net_ipv6_create>
   1e124:	4602      	mov	r2, r0
   1e126:	b9e8      	cbnz	r0, 1e164 <icmpv6_handle_echo_request+0x9c>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
   1e128:	2181      	movs	r1, #129	; 0x81
   1e12a:	4620      	mov	r0, r4
   1e12c:	f7ff ffb3 	bl	1e096 <net_icmpv6_create>
   1e130:	b9c0      	cbnz	r0, 1e164 <icmpv6_handle_echo_request+0x9c>
	    net_pkt_copy(reply, pkt, payload_len)) {
   1e132:	462a      	mov	r2, r5
   1e134:	4631      	mov	r1, r6
   1e136:	4620      	mov	r0, r4
   1e138:	f7ff fe38 	bl	1ddac <net_pkt_copy>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
   1e13c:	4605      	mov	r5, r0
   1e13e:	b988      	cbnz	r0, 1e164 <icmpv6_handle_echo_request+0x9c>
	net_pkt_cursor_init(reply);
   1e140:	4620      	mov	r0, r4
   1e142:	f7ff fd7e 	bl	1dc42 <net_pkt_cursor_init>
	net_ipv6_finalize(reply, IPPROTO_ICMPV6);
   1e146:	213a      	movs	r1, #58	; 0x3a
   1e148:	4620      	mov	r0, r4
   1e14a:	f000 f94b 	bl	1e3e4 <net_ipv6_finalize>
	if (net_send_data(reply) < 0) {
   1e14e:	4620      	mov	r0, r4
   1e150:	f7fe feb8 	bl	1cec4 <net_send_data>
   1e154:	2800      	cmp	r0, #0
   1e156:	db05      	blt.n	1e164 <icmpv6_handle_echo_request+0x9c>
	net_pkt_unref(pkt);
   1e158:	4630      	mov	r0, r6
   1e15a:	f7ff fd26 	bl	1dbaa <net_pkt_unref>
	return NET_OK;
   1e15e:	4628      	mov	r0, r5
}
   1e160:	b003      	add	sp, #12
   1e162:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_pkt_unref(reply);
   1e164:	4620      	mov	r0, r4
   1e166:	f7ff fd20 	bl	1dbaa <net_pkt_unref>
   1e16a:	e7ba      	b.n	1e0e2 <icmpv6_handle_echo_request+0x1a>

0001e16c <net_icmpv6_send_error>:
{
   1e16c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e170:	4605      	mov	r5, r0
   1e172:	4698      	mov	r8, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1e174:	2400      	movs	r4, #0
   1e176:	2328      	movs	r3, #40	; 0x28
{
   1e178:	b087      	sub	sp, #28
   1e17a:	460f      	mov	r7, r1
   1e17c:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1e17e:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
   1e182:	f7ff fd5e 	bl	1dc42 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(orig, &ipv6_access);
   1e186:	4628      	mov	r0, r5
   1e188:	a902      	add	r1, sp, #8
   1e18a:	f7ff ff31 	bl	1dff0 <net_pkt_get_data>
	if (!ip_hdr) {
   1e18e:	4606      	mov	r6, r0
   1e190:	2800      	cmp	r0, #0
   1e192:	f000 808e 	beq.w	1e2b2 <net_icmpv6_send_error+0x146>
	if (ip_hdr->nexthdr == IPPROTO_ICMPV6) {
   1e196:	7983      	ldrb	r3, [r0, #6]
   1e198:	2b3a      	cmp	r3, #58	; 0x3a
   1e19a:	d118      	bne.n	1e1ce <net_icmpv6_send_error+0x62>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
   1e19c:	2304      	movs	r3, #4
	return net_pkt_skip(pkt, access->size);
   1e19e:	9903      	ldr	r1, [sp, #12]
   1e1a0:	4628      	mov	r0, r5
   1e1a2:	9404      	str	r4, [sp, #16]
   1e1a4:	9305      	str	r3, [sp, #20]
   1e1a6:	f7ff fdd6 	bl	1dd56 <net_pkt_skip>
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   1e1aa:	4628      	mov	r0, r5
   1e1ac:	a904      	add	r1, sp, #16
   1e1ae:	f7ff ff1f 	bl	1dff0 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 128) {
   1e1b2:	b118      	cbz	r0, 1e1bc <net_icmpv6_send_error+0x50>
   1e1b4:	f990 3001 	ldrsb.w	r3, [r0, #1]
   1e1b8:	42a3      	cmp	r3, r4
   1e1ba:	db05      	blt.n	1e1c8 <net_icmpv6_send_error+0x5c>
			err = -EINVAL;
   1e1bc:	f06f 0615 	mvn.w	r6, #21
}
   1e1c0:	4630      	mov	r0, r6
   1e1c2:	b007      	add	sp, #28
   1e1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_pkt_cursor_init(orig);
   1e1c8:	4628      	mov	r0, r5
   1e1ca:	f7ff fd3a 	bl	1dc42 <net_pkt_cursor_init>
	if (ip_hdr->nexthdr == IPPROTO_UDP) {
   1e1ce:	79b3      	ldrb	r3, [r6, #6]
   1e1d0:	2b11      	cmp	r3, #17
   1e1d2:	d02c      	beq.n	1e22e <net_icmpv6_send_error+0xc2>
	} else if (ip_hdr->nexthdr == IPPROTO_TCP) {
   1e1d4:	2b06      	cmp	r3, #6
   1e1d6:	d02c      	beq.n	1e232 <net_icmpv6_send_error+0xc6>
	size_t bytes = 0;
   1e1d8:	2100      	movs	r1, #0
		copy_len = net_pkt_get_len(orig);
   1e1da:	692b      	ldr	r3, [r5, #16]
	while (buf) {
   1e1dc:	bb1b      	cbnz	r3, 1e226 <net_icmpv6_send_error+0xba>
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   1e1de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1e1e2:	2300      	movs	r3, #0
   1e1e4:	6a28      	ldr	r0, [r5, #32]
   1e1e6:	e9cd 2300 	strd	r2, r3, [sp]
   1e1ea:	3104      	adds	r1, #4
   1e1ec:	233a      	movs	r3, #58	; 0x3a
   1e1ee:	2202      	movs	r2, #2
   1e1f0:	f7f2 f944 	bl	1047c <net_pkt_alloc_with_buffer>
	if (!pkt) {
   1e1f4:	4604      	mov	r4, r0
   1e1f6:	2800      	cmp	r0, #0
   1e1f8:	d05e      	beq.n	1e2b8 <net_icmpv6_send_error+0x14c>
	if (net_ipv6_is_addr_mcast(&ip_hdr->dst)) {
   1e1fa:	7e33      	ldrb	r3, [r6, #24]
   1e1fc:	f106 0118 	add.w	r1, r6, #24
   1e200:	2bff      	cmp	r3, #255	; 0xff
   1e202:	d103      	bne.n	1e20c <net_icmpv6_send_error+0xa0>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1e204:	6a00      	ldr	r0, [r0, #32]
   1e206:	f7f1 ff35 	bl	10074 <net_if_ipv6_select_src_addr>
   1e20a:	4601      	mov	r1, r0
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
   1e20c:	4620      	mov	r0, r4
   1e20e:	f106 0208 	add.w	r2, r6, #8
   1e212:	f000 f884 	bl	1e31e <net_ipv6_create>
   1e216:	b170      	cbz	r0, 1e236 <net_icmpv6_send_error+0xca>
	int err = -EIO;
   1e218:	f06f 0704 	mvn.w	r7, #4
	net_pkt_unref(pkt);
   1e21c:	4620      	mov	r0, r4
   1e21e:	f7ff fcc4 	bl	1dbaa <net_pkt_unref>
   1e222:	463e      	mov	r6, r7
   1e224:	e7cc      	b.n	1e1c0 <net_icmpv6_send_error+0x54>
		bytes += buf->len;
   1e226:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e228:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e22a:	4411      	add	r1, r2
		buf = buf->frags;
   1e22c:	e7d6      	b.n	1e1dc <net_icmpv6_send_error+0x70>
		copy_len = sizeof(struct net_ipv6_hdr) +
   1e22e:	2130      	movs	r1, #48	; 0x30
   1e230:	e7d5      	b.n	1e1de <net_icmpv6_send_error+0x72>
		copy_len = sizeof(struct net_ipv6_hdr) +
   1e232:	213c      	movs	r1, #60	; 0x3c
   1e234:	e7d3      	b.n	1e1de <net_icmpv6_send_error+0x72>
	    net_icmpv6_create(pkt, type, code)) {
   1e236:	4639      	mov	r1, r7
   1e238:	464a      	mov	r2, r9
   1e23a:	4620      	mov	r0, r4
   1e23c:	f7ff ff2b 	bl	1e096 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &ip_hdr->src) ||
   1e240:	4601      	mov	r1, r0
   1e242:	2800      	cmp	r0, #0
   1e244:	d1e8      	bne.n	1e218 <net_icmpv6_send_error+0xac>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1e246:	2f04      	cmp	r7, #4
   1e248:	d12e      	bne.n	1e2a8 <net_icmpv6_send_error+0x13c>
	u32_t data_be32 = htonl(data);
   1e24a:	fa98 f388 	rev.w	r3, r8
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
   1e24e:	463a      	mov	r2, r7
   1e250:	4620      	mov	r0, r4
   1e252:	a904      	add	r1, sp, #16
	u32_t data_be32 = htonl(data);
   1e254:	9304      	str	r3, [sp, #16]
	return net_pkt_write(pkt, &data_be32, sizeof(u32_t));
   1e256:	f7ff feaf 	bl	1dfb8 <net_pkt_write>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
   1e25a:	4607      	mov	r7, r0
	copy_len = net_pkt_available_buffer(pkt);
   1e25c:	4620      	mov	r0, r4
   1e25e:	f7ff fcc8 	bl	1dbf2 <net_pkt_available_buffer>
   1e262:	4602      	mov	r2, r0
	if (err || net_pkt_copy(pkt, orig, copy_len)) {
   1e264:	2f00      	cmp	r7, #0
   1e266:	d1d9      	bne.n	1e21c <net_icmpv6_send_error+0xb0>
   1e268:	4629      	mov	r1, r5
   1e26a:	4620      	mov	r0, r4
   1e26c:	f7ff fd9e 	bl	1ddac <net_pkt_copy>
   1e270:	4606      	mov	r6, r0
   1e272:	2800      	cmp	r0, #0
   1e274:	d1d2      	bne.n	1e21c <net_icmpv6_send_error+0xb0>
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   1e276:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	net_pkt_cursor_init(pkt);
   1e278:	4620      	mov	r0, r4
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(orig)->addr;
   1e27a:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
   1e27c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   1e280:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   1e284:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e286:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   1e288:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1e28c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	net_pkt_cursor_init(pkt);
   1e290:	f7ff fcd7 	bl	1dc42 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   1e294:	213a      	movs	r1, #58	; 0x3a
   1e296:	4620      	mov	r0, r4
   1e298:	f000 f8a4 	bl	1e3e4 <net_ipv6_finalize>
	if (net_send_data(pkt) >= 0) {
   1e29c:	4620      	mov	r0, r4
   1e29e:	f7fe fe11 	bl	1cec4 <net_send_data>
   1e2a2:	2800      	cmp	r0, #0
   1e2a4:	dbba      	blt.n	1e21c <net_icmpv6_send_error+0xb0>
   1e2a6:	e78b      	b.n	1e1c0 <net_icmpv6_send_error+0x54>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
   1e2a8:	2204      	movs	r2, #4
   1e2aa:	4620      	mov	r0, r4
   1e2ac:	f7ff fd5e 	bl	1dd6c <net_pkt_memset>
   1e2b0:	e7d3      	b.n	1e25a <net_icmpv6_send_error+0xee>
	int err = -EIO;
   1e2b2:	f06f 0604 	mvn.w	r6, #4
   1e2b6:	e783      	b.n	1e1c0 <net_icmpv6_send_error+0x54>
		err = -ENOMEM;
   1e2b8:	f06f 060b 	mvn.w	r6, #11
   1e2bc:	e780      	b.n	1e1c0 <net_icmpv6_send_error+0x54>

0001e2be <net_nbr_unref>:
	if (--nbr->ref) {
   1e2be:	7803      	ldrb	r3, [r0, #0]
   1e2c0:	3b01      	subs	r3, #1
   1e2c2:	b2db      	uxtb	r3, r3
   1e2c4:	7003      	strb	r3, [r0, #0]
   1e2c6:	b913      	cbnz	r3, 1e2ce <net_nbr_unref+0x10>
	if (nbr->remove) {
   1e2c8:	6903      	ldr	r3, [r0, #16]
   1e2ca:	b103      	cbz	r3, 1e2ce <net_nbr_unref+0x10>
		nbr->remove(nbr);
   1e2cc:	4718      	bx	r3
}
   1e2ce:	4770      	bx	lr

0001e2d0 <net_nbr_get>:
{
   1e2d0:	4601      	mov	r1, r0
	for (i = 0; i < table->nbr_count; i++) {
   1e2d2:	2200      	movs	r2, #0
{
   1e2d4:	b530      	push	{r4, r5, lr}
	for (i = 0; i < table->nbr_count; i++) {
   1e2d6:	8905      	ldrh	r5, [r0, #8]
   1e2d8:	4295      	cmp	r5, r2
   1e2da:	dc01      	bgt.n	1e2e0 <net_nbr_get+0x10>
	return NULL;
   1e2dc:	2000      	movs	r0, #0
   1e2de:	e00d      	b.n	1e2fc <net_nbr_get+0x2c>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1e2e0:	680c      	ldr	r4, [r1, #0]
			  start->size + start->extra_data_size) * idx));
   1e2e2:	88a0      	ldrh	r0, [r4, #4]
   1e2e4:	8863      	ldrh	r3, [r4, #2]
   1e2e6:	4403      	add	r3, r0
   1e2e8:	3314      	adds	r3, #20
   1e2ea:	4353      	muls	r3, r2
	return (struct net_nbr *)((u8_t *)start +
   1e2ec:	18e0      	adds	r0, r4, r3
		if (!nbr->ref) {
   1e2ee:	5ce3      	ldrb	r3, [r4, r3]
   1e2f0:	b92b      	cbnz	r3, 1e2fe <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
   1e2f2:	f100 0314 	add.w	r3, r0, #20
   1e2f6:	60c3      	str	r3, [r0, #12]
	nbr->ref++;
   1e2f8:	2301      	movs	r3, #1
   1e2fa:	7003      	strb	r3, [r0, #0]
}
   1e2fc:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   1e2fe:	3201      	adds	r2, #1
   1e300:	e7ea      	b.n	1e2d8 <net_nbr_get+0x8>

0001e302 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e302:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e304:	b94a      	cbnz	r2, 1e31a <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e306:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e308:	b93b      	cbnz	r3, 1e31a <net_ipv6_is_addr_loopback+0x18>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e30a:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e30c:	b92a      	cbnz	r2, 1e31a <net_ipv6_is_addr_loopback+0x18>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1e30e:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e310:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
   1e314:	4258      	negs	r0, r3
   1e316:	4158      	adcs	r0, r3
   1e318:	4770      	bx	lr
   1e31a:	2000      	movs	r0, #0
   1e31c:	4770      	bx	lr

0001e31e <net_ipv6_create>:
#define MAX_REACHABLE_TIME 3600000

int net_ipv6_create(struct net_pkt *pkt,
		    const struct in6_addr *src,
		    const struct in6_addr *dst)
{
   1e31e:	b5f0      	push	{r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1e320:	2328      	movs	r3, #40	; 0x28
   1e322:	2700      	movs	r7, #0
{
   1e324:	b08b      	sub	sp, #44	; 0x2c
   1e326:	460c      	mov	r4, r1
	struct net_ipv6_hdr *ipv6_hdr;

	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   1e328:	4669      	mov	r1, sp
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1e32a:	e9cd 7300 	strd	r7, r3, [sp]
{
   1e32e:	4606      	mov	r6, r0
   1e330:	4615      	mov	r5, r2
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   1e332:	f7ff fe5d 	bl	1dff0 <net_pkt_get_data>
	if (!ipv6_hdr) {
   1e336:	4603      	mov	r3, r0
   1e338:	2800      	cmp	r0, #0
   1e33a:	d050      	beq.n	1e3de <net_ipv6_create+0xc0>
		return -ENOBUFS;
	}

	ipv6_hdr->vtc     = 0x60;
   1e33c:	2260      	movs	r2, #96	; 0x60
	ipv6_hdr->tcflow  = 0U;
   1e33e:	7047      	strb	r7, [r0, #1]
	ipv6_hdr->vtc     = 0x60;
   1e340:	7002      	strb	r2, [r0, #0]
	ipv6_hdr->flow    = 0U;
	ipv6_hdr->len     = 0U;
	ipv6_hdr->nexthdr = 0U;
   1e342:	7187      	strb	r7, [r0, #6]

	/* User can tweak the default hop limit if needed */
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1e344:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
	ipv6_hdr->flow    = 0U;
   1e348:	7087      	strb	r7, [r0, #2]
   1e34a:	70c7      	strb	r7, [r0, #3]
	ipv6_hdr->len     = 0U;
   1e34c:	7107      	strb	r7, [r0, #4]
   1e34e:	7147      	strb	r7, [r0, #5]
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1e350:	71c2      	strb	r2, [r0, #7]
	if (ipv6_hdr->hop_limit == 0U) {
   1e352:	b92a      	cbnz	r2, 1e360 <net_ipv6_create+0x42>
		ipv6_hdr->hop_limit =
			net_if_ipv6_get_hop_limit(net_pkt_iface(pkt));
   1e354:	6a31      	ldr	r1, [r6, #32]
   1e356:	6849      	ldr	r1, [r1, #4]
	if (!iface->config.ip.ipv6) {
   1e358:	b109      	cbz	r1, 1e35e <net_ipv6_create+0x40>
	return iface->config.ip.ipv6->hop_limit;
   1e35a:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
		ipv6_hdr->hop_limit =
   1e35e:	71da      	strb	r2, [r3, #7]
	}

	net_ipaddr_copy(&ipv6_hdr->dst, dst);
   1e360:	462a      	mov	r2, r5
   1e362:	ad02      	add	r5, sp, #8
   1e364:	462f      	mov	r7, r5
   1e366:	f102 0e10 	add.w	lr, r2, #16
   1e36a:	46ac      	mov	ip, r5
   1e36c:	6810      	ldr	r0, [r2, #0]
   1e36e:	6851      	ldr	r1, [r2, #4]
   1e370:	3208      	adds	r2, #8
   1e372:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1e376:	4572      	cmp	r2, lr
   1e378:	4665      	mov	r5, ip
   1e37a:	d1f6      	bne.n	1e36a <net_ipv6_create+0x4c>
   1e37c:	f103 0c18 	add.w	ip, r3, #24
   1e380:	ad06      	add	r5, sp, #24
   1e382:	463a      	mov	r2, r7
   1e384:	ca03      	ldmia	r2!, {r0, r1}
   1e386:	42aa      	cmp	r2, r5
   1e388:	f8cc 0000 	str.w	r0, [ip]
   1e38c:	f8cc 1004 	str.w	r1, [ip, #4]
   1e390:	4617      	mov	r7, r2
   1e392:	f10c 0c08 	add.w	ip, ip, #8
   1e396:	d1f4      	bne.n	1e382 <net_ipv6_create+0x64>
	net_ipaddr_copy(&ipv6_hdr->src, src);
   1e398:	4622      	mov	r2, r4
   1e39a:	462f      	mov	r7, r5
   1e39c:	f104 0c10 	add.w	ip, r4, #16
   1e3a0:	463c      	mov	r4, r7
   1e3a2:	6810      	ldr	r0, [r2, #0]
   1e3a4:	6851      	ldr	r1, [r2, #4]
   1e3a6:	3208      	adds	r2, #8
   1e3a8:	c403      	stmia	r4!, {r0, r1}
   1e3aa:	4562      	cmp	r2, ip
   1e3ac:	4627      	mov	r7, r4
   1e3ae:	d1f7      	bne.n	1e3a0 <net_ipv6_create+0x82>
   1e3b0:	462a      	mov	r2, r5
   1e3b2:	3308      	adds	r3, #8
   1e3b4:	ad0a      	add	r5, sp, #40	; 0x28
   1e3b6:	4614      	mov	r4, r2
   1e3b8:	cc03      	ldmia	r4!, {r0, r1}
   1e3ba:	42ac      	cmp	r4, r5
   1e3bc:	6018      	str	r0, [r3, #0]
   1e3be:	6059      	str	r1, [r3, #4]
   1e3c0:	4622      	mov	r2, r4
   1e3c2:	f103 0308 	add.w	r3, r3, #8
   1e3c6:	d1f6      	bne.n	1e3b6 <net_ipv6_create+0x98>
	pkt->ip_hdr_len = len;
   1e3c8:	2328      	movs	r3, #40	; 0x28
   1e3ca:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	pkt->ipv6_ext_len = len;
   1e3ce:	2300      	movs	r3, #0

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_ext_len(pkt, 0);

	return net_pkt_set_data(pkt, &ipv6_access);
   1e3d0:	4669      	mov	r1, sp
   1e3d2:	4630      	mov	r0, r6
   1e3d4:	87f3      	strh	r3, [r6, #62]	; 0x3e
   1e3d6:	f7ff fe2c 	bl	1e032 <net_pkt_set_data>
}
   1e3da:	b00b      	add	sp, #44	; 0x2c
   1e3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1e3de:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e3e2:	e7fa      	b.n	1e3da <net_ipv6_create+0xbc>

0001e3e4 <net_ipv6_finalize>:

int net_ipv6_finalize(struct net_pkt *pkt, u8_t next_header_proto)
{
   1e3e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1e3e6:	2328      	movs	r3, #40	; 0x28
   1e3e8:	2500      	movs	r5, #0
   1e3ea:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
   1e3ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
   1e3f2:	460e      	mov	r6, r1
   1e3f4:	f043 0301 	orr.w	r3, r3, #1
	struct net_ipv6_hdr *ipv6_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   1e3f8:	4669      	mov	r1, sp
   1e3fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
{
   1e3fe:	4604      	mov	r4, r0
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   1e400:	f7ff fdf6 	bl	1dff0 <net_pkt_get_data>
	if (!ipv6_hdr) {
   1e404:	b918      	cbnz	r0, 1e40e <net_ipv6_finalize+0x2a>
		return -ENOBUFS;
   1e406:	f06f 0036 	mvn.w	r0, #54	; 0x36
	} else if (next_header_proto == IPPROTO_ICMPV6) {
		return net_icmpv6_finalize(pkt);
	}

	return 0;
}
   1e40a:	b002      	add	sp, #8
   1e40c:	bd70      	pop	{r4, r5, r6, pc}
	size_t bytes = 0;
   1e40e:	462b      	mov	r3, r5
	ipv6_hdr->len = htons(net_pkt_get_len(pkt) -
   1e410:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   1e412:	b9ca      	cbnz	r2, 1e448 <net_ipv6_finalize+0x64>
   1e414:	3b28      	subs	r3, #40	; 0x28
   1e416:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1e41a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1e41e:	8083      	strh	r3, [r0, #4]
	if (net_pkt_ipv6_next_hdr(pkt) != 255U) {
   1e420:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	net_pkt_set_data(pkt, &ipv6_access);
   1e424:	4669      	mov	r1, sp
   1e426:	2bff      	cmp	r3, #255	; 0xff
   1e428:	bf08      	it	eq
   1e42a:	4633      	moveq	r3, r6
   1e42c:	7183      	strb	r3, [r0, #6]
   1e42e:	4620      	mov	r0, r4
   1e430:	f7ff fdff 	bl	1e032 <net_pkt_set_data>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
   1e434:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   1e438:	2bff      	cmp	r3, #255	; 0xff
   1e43a:	d109      	bne.n	1e450 <net_ipv6_finalize+0x6c>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1e43c:	2e11      	cmp	r6, #17
   1e43e:	d10e      	bne.n	1e45e <net_ipv6_finalize+0x7a>
		return net_udp_finalize(pkt);
   1e440:	4620      	mov	r0, r4
   1e442:	f001 f912 	bl	1f66a <net_udp_finalize>
   1e446:	e7e0      	b.n	1e40a <net_ipv6_finalize+0x26>
		bytes += buf->len;
   1e448:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   1e44a:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   1e44c:	440b      	add	r3, r1
		buf = buf->frags;
   1e44e:	e7e0      	b.n	1e412 <net_ipv6_finalize+0x2e>
	    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
   1e450:	4620      	mov	r0, r4
   1e452:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   1e454:	f7ff fc7f 	bl	1dd56 <net_pkt_skip>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
   1e458:	2800      	cmp	r0, #0
   1e45a:	d0ef      	beq.n	1e43c <net_ipv6_finalize+0x58>
   1e45c:	e7d3      	b.n	1e406 <net_ipv6_finalize+0x22>
	} else if (next_header_proto == IPPROTO_ICMPV6) {
   1e45e:	2e3a      	cmp	r6, #58	; 0x3a
   1e460:	d103      	bne.n	1e46a <net_ipv6_finalize+0x86>
		return net_icmpv6_finalize(pkt);
   1e462:	4620      	mov	r0, r4
   1e464:	f7ff fdfe 	bl	1e064 <net_icmpv6_finalize>
   1e468:	e7cf      	b.n	1e40a <net_ipv6_finalize+0x26>
	return 0;
   1e46a:	2000      	movs	r0, #0
   1e46c:	e7cd      	b.n	1e40a <net_ipv6_finalize+0x26>

0001e46e <net_ipv6_input>:
}

#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_input(struct net_pkt *pkt, bool is_loopback)
{
   1e46e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1e472:	2328      	movs	r3, #40	; 0x28
   1e474:	2600      	movs	r6, #0
{
   1e476:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1e478:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1e47c:	ab06      	add	r3, sp, #24
   1e47e:	9308      	str	r3, [sp, #32]
   1e480:	2308      	movs	r3, #8
{
   1e482:	4604      	mov	r4, r0
   1e484:	4688      	mov	r8, r1
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1e486:	9309      	str	r3, [sp, #36]	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
	enum net_verdict verdict = NET_DROP;
	int real_len = net_pkt_get_len(pkt);
   1e488:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   1e48a:	b93b      	cbnz	r3, 1e49c <net_ipv6_input+0x2e>
	union net_ip_header ip;
	int pkt_len;

	net_stats_update_ipv6_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   1e48c:	4620      	mov	r0, r4
   1e48e:	a904      	add	r1, sp, #16
   1e490:	f7ff fdae 	bl	1dff0 <net_pkt_get_data>
	if (!hdr) {
   1e494:	4605      	mov	r5, r0
   1e496:	b928      	cbnz	r0, 1e4a4 <net_ipv6_input+0x36>
			      net_pkt_get_current_offset(pkt) - 1);

	NET_DBG("DROP: Unknown/wrong nexthdr type");
	net_stats_update_ip_errors_protoerr(net_pkt_iface(pkt));

	return NET_DROP;
   1e498:	2002      	movs	r0, #2
   1e49a:	e097      	b.n	1e5cc <net_ipv6_input+0x15e>
		bytes += buf->len;
   1e49c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e49e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e4a0:	4416      	add	r6, r2
		buf = buf->frags;
   1e4a2:	e7f2      	b.n	1e48a <net_ipv6_input+0x1c>
	pkt_len = ntohs(hdr->len) + sizeof(struct net_ipv6_hdr);
   1e4a4:	8883      	ldrh	r3, [r0, #4]
   1e4a6:	021f      	lsls	r7, r3, #8
   1e4a8:	ea47 2713 	orr.w	r7, r7, r3, lsr #8
   1e4ac:	b2bf      	uxth	r7, r7
   1e4ae:	3728      	adds	r7, #40	; 0x28
	if (real_len < pkt_len) {
   1e4b0:	42b7      	cmp	r7, r6
   1e4b2:	dcf1      	bgt.n	1e498 <net_ipv6_input+0x2a>
	} else if (real_len > pkt_len) {
   1e4b4:	da03      	bge.n	1e4be <net_ipv6_input+0x50>
		net_pkt_update_length(pkt, pkt_len);
   1e4b6:	4639      	mov	r1, r7
   1e4b8:	4620      	mov	r0, r4
   1e4ba:	f7ff fcc3 	bl	1de44 <net_pkt_update_length>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e4be:	68ab      	ldr	r3, [r5, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e4c0:	b933      	cbnz	r3, 1e4d0 <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e4c2:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e4c4:	b923      	cbnz	r3, 1e4d0 <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e4c6:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e4c8:	b913      	cbnz	r3, 1e4d0 <net_ipv6_input+0x62>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1e4ca:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e4cc:	2b00      	cmp	r3, #0
   1e4ce:	d0e3      	beq.n	1e498 <net_ipv6_input+0x2a>
	if (net_ipv6_is_addr_mcast(&hdr->src) ||
   1e4d0:	7a2b      	ldrb	r3, [r5, #8]
   1e4d2:	2bff      	cmp	r3, #255	; 0xff
   1e4d4:	d0e0      	beq.n	1e498 <net_ipv6_input+0x2a>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   1e4d6:	7e29      	ldrb	r1, [r5, #24]
	    net_ipv6_is_addr_mcast_scope(&hdr->dst, 0)) {
   1e4d8:	f105 0618 	add.w	r6, r5, #24
   1e4dc:	29ff      	cmp	r1, #255	; 0xff
   1e4de:	d102      	bne.n	1e4e6 <net_ipv6_input+0x78>
   1e4e0:	7e6b      	ldrb	r3, [r5, #25]
   1e4e2:	2b00      	cmp	r3, #0
   1e4e4:	d0d8      	beq.n	1e498 <net_ipv6_input+0x2a>
	if (!is_loopback) {
   1e4e6:	f1b8 0f00 	cmp.w	r8, #0
   1e4ea:	d130      	bne.n	1e54e <net_ipv6_input+0xe0>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
   1e4ec:	4630      	mov	r0, r6
   1e4ee:	f7ff ff08 	bl	1e302 <net_ipv6_is_addr_loopback>
   1e4f2:	2800      	cmp	r0, #0
   1e4f4:	d1d0      	bne.n	1e498 <net_ipv6_input+0x2a>
		    net_ipv6_is_addr_loopback(&hdr->src)) {
   1e4f6:	f105 0008 	add.w	r0, r5, #8
   1e4fa:	f7ff ff02 	bl	1e302 <net_ipv6_is_addr_loopback>
		if (net_ipv6_is_addr_loopback(&hdr->dst) ||
   1e4fe:	2800      	cmp	r0, #0
   1e500:	d1ca      	bne.n	1e498 <net_ipv6_input+0x2a>
   1e502:	29ff      	cmp	r1, #255	; 0xff
   1e504:	d102      	bne.n	1e50c <net_ipv6_input+0x9e>
   1e506:	7e6b      	ldrb	r3, [r5, #25]
   1e508:	2b01      	cmp	r3, #1
   1e50a:	d0c5      	beq.n	1e498 <net_ipv6_input+0x2a>
		    (net_ipv6_is_addr_mcast_group(
   1e50c:	f7f1 feec 	bl	102e8 <net_ipv6_unspecified_address>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   1e510:	8b6a      	ldrh	r2, [r5, #26]
   1e512:	8843      	ldrh	r3, [r0, #2]
   1e514:	429a      	cmp	r2, r3
   1e516:	d11a      	bne.n	1e54e <net_ipv6_input+0xe0>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
   1e518:	8baa      	ldrh	r2, [r5, #28]
   1e51a:	8883      	ldrh	r3, [r0, #4]
   1e51c:	429a      	cmp	r2, r3
   1e51e:	d116      	bne.n	1e54e <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
   1e520:	8bea      	ldrh	r2, [r5, #30]
   1e522:	88c3      	ldrh	r3, [r0, #6]
   1e524:	429a      	cmp	r2, r3
   1e526:	d112      	bne.n	1e54e <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
   1e528:	6842      	ldr	r2, [r0, #4]
   1e52a:	69eb      	ldr	r3, [r5, #28]
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
   1e52c:	4293      	cmp	r3, r2
   1e52e:	d10e      	bne.n	1e54e <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   1e530:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
   1e532:	4293      	cmp	r3, r2
   1e534:	d10b      	bne.n	1e54e <net_ipv6_input+0xe0>
		UNALIGNED_GET(&addr->s6_addr32[3]) == group->s6_addr32[3];
   1e536:	6a6a      	ldr	r2, [r5, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
   1e538:	68c3      	ldr	r3, [r0, #12]
   1e53a:	429a      	cmp	r2, r3
   1e53c:	d107      	bne.n	1e54e <net_ipv6_input+0xe0>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
   1e53e:	7e2b      	ldrb	r3, [r5, #24]
   1e540:	2bff      	cmp	r3, #255	; 0xff
   1e542:	d104      	bne.n	1e54e <net_ipv6_input+0xe0>
   1e544:	7e6b      	ldrb	r3, [r5, #25]
   1e546:	2b05      	cmp	r3, #5
   1e548:	d0a6      	beq.n	1e498 <net_ipv6_input+0x2a>
   1e54a:	2b08      	cmp	r3, #8
   1e54c:	d0a4      	beq.n	1e498 <net_ipv6_input+0x2a>
	net_pkt_set_ipv6_next_hdr(pkt, hdr->nexthdr);
   1e54e:	79ab      	ldrb	r3, [r5, #6]
	pkt->ipv6_ext_len = len;
   1e550:	2100      	movs	r1, #0
	pkt->ipv6_next_hdr = next_hdr;
   1e552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	pkt->ip_hdr_len = len;
   1e556:	2328      	movs	r3, #40	; 0x28
	pkt->family = family;
   1e558:	2202      	movs	r2, #2
	pkt->ip_hdr_len = len;
   1e55a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return pkt->frags->data;
   1e55e:	6923      	ldr	r3, [r4, #16]
	pkt->ipv6_ext_len = len;
   1e560:	87e1      	strh	r1, [r4, #62]	; 0x3e
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
   1e562:	689b      	ldr	r3, [r3, #8]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1e564:	4630      	mov	r0, r6
   1e566:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
   1e568:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pkt->family = family;
   1e56c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   1e570:	f362 0343 	bfi	r3, r2, #1, #3
   1e574:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1e578:	f7f1 fad4 	bl	fb24 <net_if_ipv6_addr_lookup>
	if (!net_ipv6_is_my_addr(&hdr->dst) &&
   1e57c:	4601      	mov	r1, r0
   1e57e:	2800      	cmp	r0, #0
   1e580:	d138      	bne.n	1e5f4 <net_ipv6_input+0x186>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   1e582:	4630      	mov	r0, r6
   1e584:	f7f1 fc58 	bl	fe38 <net_if_ipv6_maddr_lookup>
   1e588:	2800      	cmp	r0, #0
   1e58a:	d133      	bne.n	1e5f4 <net_ipv6_input+0x186>
	    !net_ipv6_is_my_maddr(&hdr->dst) &&
   1e58c:	7e2b      	ldrb	r3, [r5, #24]
   1e58e:	2bff      	cmp	r3, #255	; 0xff
   1e590:	d030      	beq.n	1e5f4 <net_ipv6_input+0x186>
		found = net_route_get_info(net_pkt_iface(pkt),
   1e592:	4631      	mov	r1, r6
   1e594:	6a20      	ldr	r0, [r4, #32]
   1e596:	ab02      	add	r3, sp, #8
   1e598:	aa01      	add	r2, sp, #4
   1e59a:	f000 ffd4 	bl	1f546 <net_route_get_info>
	if (found) {
   1e59e:	4605      	mov	r5, r0
   1e5a0:	b1b8      	cbz	r0, 1e5d2 <net_ipv6_input+0x164>
		if (route) {
   1e5a2:	9b01      	ldr	r3, [sp, #4]
   1e5a4:	b153      	cbz	r3, 1e5bc <net_ipv6_input+0x14e>
			net_pkt_set_iface(pkt, route->iface);
   1e5a6:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   1e5a8:	6223      	str	r3, [r4, #32]
	if (iface) {
   1e5aa:	b13b      	cbz	r3, 1e5bc <net_ipv6_input+0x14e>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1e5ac:	681a      	ldr	r2, [r3, #0]
   1e5ae:	7d52      	ldrb	r2, [r2, #21]
   1e5b0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1e5b4:	681b      	ldr	r3, [r3, #0]
   1e5b6:	7d5b      	ldrb	r3, [r3, #21]
   1e5b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		ret = net_route_packet(pkt, nexthop);
   1e5bc:	4620      	mov	r0, r4
   1e5be:	9902      	ldr	r1, [sp, #8]
   1e5c0:	f000 ffe3 	bl	1f58a <net_route_packet>
	return NET_DROP;
   1e5c4:	2800      	cmp	r0, #0
   1e5c6:	bfac      	ite	ge
   1e5c8:	2000      	movge	r0, #0
   1e5ca:	2002      	movlt	r0, #2
}
   1e5cc:	b00b      	add	sp, #44	; 0x2c
   1e5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		struct net_if *iface = NULL;
   1e5d2:	9003      	str	r0, [sp, #12]
		if (net_if_ipv6_addr_onlink(&iface, &hdr->dst)) {
   1e5d4:	4631      	mov	r1, r6
   1e5d6:	a803      	add	r0, sp, #12
   1e5d8:	f7f1 fc84 	bl	fee4 <net_if_ipv6_addr_onlink>
   1e5dc:	2800      	cmp	r0, #0
   1e5de:	f43f af5b 	beq.w	1e498 <net_ipv6_input+0x2a>
			ret = net_route_packet_if(pkt, iface);
   1e5e2:	4620      	mov	r0, r4
   1e5e4:	9903      	ldr	r1, [sp, #12]
   1e5e6:	f001 f817 	bl	1f618 <net_route_packet_if>
			if (ret < 0) {
   1e5ea:	2800      	cmp	r0, #0
   1e5ec:	f6ff af54 	blt.w	1e498 <net_ipv6_input+0x2a>
			return NET_OK;
   1e5f0:	4628      	mov	r0, r5
   1e5f2:	e7eb      	b.n	1e5cc <net_ipv6_input+0x15e>
	u16_t ext_len = 0U;
   1e5f4:	f04f 0900 	mov.w	r9, #0
	u8_t ext_bitmap = 0U;
   1e5f8:	46c8      	mov	r8, r9
	return net_pkt_skip(pkt, access->size);
   1e5fa:	4620      	mov	r0, r4
   1e5fc:	9905      	ldr	r1, [sp, #20]
   1e5fe:	f7ff fbaa 	bl	1dd56 <net_pkt_skip>
	nexthdr = hdr->nexthdr;
   1e602:	79ae      	ldrb	r6, [r5, #6]
		     u8_t flags);


static inline bool net_ipv6_is_nexthdr_upper_layer(u8_t nexthdr)
{
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
   1e604:	2e3a      	cmp	r6, #58	; 0x3a
   1e606:	d003      	beq.n	1e610 <net_ipv6_input+0x1a2>
   1e608:	2e11      	cmp	r6, #17
   1e60a:	d001      	beq.n	1e610 <net_ipv6_input+0x1a2>
	while (!net_ipv6_is_nexthdr_upper_layer(nexthdr)) {
   1e60c:	2e06      	cmp	r6, #6
   1e60e:	d10c      	bne.n	1e62a <net_ipv6_input+0x1bc>
	switch (nexthdr) {
   1e610:	2e11      	cmp	r6, #17
	pkt->ipv6_ext_len = len;
   1e612:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
   1e616:	f000 8093 	beq.w	1e740 <net_ipv6_input+0x2d2>
   1e61a:	2e3a      	cmp	r6, #58	; 0x3a
   1e61c:	f47f af3c 	bne.w	1e498 <net_ipv6_input+0x2a>
		verdict = net_icmpv6_input(pkt, hdr);
   1e620:	4629      	mov	r1, r5
   1e622:	4620      	mov	r0, r4
   1e624:	f7f1 ff96 	bl	10554 <net_icmpv6_input>
	if (verdict == NET_DROP) {
   1e628:	e7d0      	b.n	1e5cc <net_ipv6_input+0x15e>
	return net_pkt_read(pkt, data, 1);
   1e62a:	2201      	movs	r2, #1
   1e62c:	4620      	mov	r0, r4
   1e62e:	f10d 0103 	add.w	r1, sp, #3
   1e632:	f7ff fba6 	bl	1dd82 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &next_nexthdr)) {
   1e636:	2800      	cmp	r0, #0
   1e638:	f47f af2e 	bne.w	1e498 <net_ipv6_input+0x2a>
		switch (nexthdr) {
   1e63c:	2e3b      	cmp	r6, #59	; 0x3b
   1e63e:	f43f af2b 	beq.w	1e498 <net_ipv6_input+0x2a>
   1e642:	2e3c      	cmp	r6, #60	; 0x3c
   1e644:	d02d      	beq.n	1e6a2 <net_ipv6_input+0x234>
   1e646:	2e00      	cmp	r6, #0
   1e648:	f040 808a 	bne.w	1e760 <net_ipv6_input+0x2f2>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   1e64c:	f018 0f01 	tst.w	r8, #1
   1e650:	f47f af22 	bne.w	1e498 <net_ipv6_input+0x2a>
			if (nexthdr != hdr->nexthdr) {
   1e654:	79ab      	ldrb	r3, [r5, #6]
   1e656:	2b00      	cmp	r3, #0
   1e658:	f040 8082 	bne.w	1e760 <net_ipv6_input+0x2f2>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   1e65c:	f048 0801 	orr.w	r8, r8, #1
	u16_t exthdr_len = 0U;
   1e660:	2300      	movs	r3, #0
   1e662:	2201      	movs	r2, #1
   1e664:	4620      	mov	r0, r4
   1e666:	a903      	add	r1, sp, #12
		exthdr_len = ipv6_handle_ext_hdr_options(pkt, hdr, pkt_len);
   1e668:	b2be      	uxth	r6, r7
	u16_t exthdr_len = 0U;
   1e66a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1e66e:	f7ff fb88 	bl	1dd82 <net_pkt_read>
	if (net_pkt_read_u8(pkt, (u8_t *)&exthdr_len)) {
   1e672:	2800      	cmp	r0, #0
   1e674:	f47f af10 	bne.w	1e498 <net_ipv6_input+0x2a>
	exthdr_len = exthdr_len * 8U + 8;
   1e678:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1e67c:	3301      	adds	r3, #1
   1e67e:	00db      	lsls	r3, r3, #3
   1e680:	b29b      	uxth	r3, r3
	if (exthdr_len > pkt_len) {
   1e682:	429e      	cmp	r6, r3
	exthdr_len = exthdr_len * 8U + 8;
   1e684:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (exthdr_len > pkt_len) {
   1e688:	f4ff af06 	bcc.w	1e498 <net_ipv6_input+0x2a>
	length += 2U;
   1e68c:	2602      	movs	r6, #2
	while (length < exthdr_len) {
   1e68e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1e692:	429e      	cmp	r6, r3
   1e694:	d310      	bcc.n	1e6b8 <net_ipv6_input+0x24a>
		ext_len += exthdr_len;
   1e696:	4499      	add	r9, r3
		nexthdr = next_nexthdr;
   1e698:	f89d 6003 	ldrb.w	r6, [sp, #3]
		ext_len += exthdr_len;
   1e69c:	fa1f f989 	uxth.w	r9, r9
		nexthdr = next_nexthdr;
   1e6a0:	e7b0      	b.n	1e604 <net_ipv6_input+0x196>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO2) {
   1e6a2:	f018 0f40 	tst.w	r8, #64	; 0x40
   1e6a6:	d15b      	bne.n	1e760 <net_ipv6_input+0x2f2>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO1) {
   1e6a8:	f018 0f02 	tst.w	r8, #2
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO2;
   1e6ac:	bf14      	ite	ne
   1e6ae:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
				ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_DESTO1;
   1e6b2:	f048 0802 	orreq.w	r8, r8, #2
   1e6b6:	e7d3      	b.n	1e660 <net_ipv6_input+0x1f2>
   1e6b8:	2201      	movs	r2, #1
   1e6ba:	4620      	mov	r0, r4
   1e6bc:	a901      	add	r1, sp, #4
   1e6be:	f7ff fb60 	bl	1dd82 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt_type)) {
   1e6c2:	2800      	cmp	r0, #0
   1e6c4:	f47f aee8 	bne.w	1e498 <net_ipv6_input+0x2a>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
   1e6c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1e6cc:	b9fb      	cbnz	r3, 1e70e <net_ipv6_input+0x2a0>
		switch (opt_type) {
   1e6ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1e6d2:	b322      	cbz	r2, 1e71e <net_ipv6_input+0x2b0>
   1e6d4:	2a01      	cmp	r2, #1
   1e6d6:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1e6da:	d023      	beq.n	1e724 <net_ipv6_input+0x2b6>
			if (opt_len > (exthdr_len - (1 + 1 + 1 + 1))) {
   1e6dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1e6e0:	3b04      	subs	r3, #4
   1e6e2:	4299      	cmp	r1, r3
   1e6e4:	f73f aed8 	bgt.w	1e498 <net_ipv6_input+0x2a>
	switch (opt_type & 0xc0) {
   1e6e8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1e6ec:	2a80      	cmp	r2, #128	; 0x80
   1e6ee:	d020      	beq.n	1e732 <net_ipv6_input+0x2c4>
   1e6f0:	2ac0      	cmp	r2, #192	; 0xc0
   1e6f2:	d01a      	beq.n	1e72a <net_ipv6_input+0x2bc>
   1e6f4:	2a00      	cmp	r2, #0
   1e6f6:	f47f aecf 	bne.w	1e498 <net_ipv6_input+0x2a>
			if (net_pkt_skip(pkt, opt_len)) {
   1e6fa:	4620      	mov	r0, r4
   1e6fc:	f7ff fb2b 	bl	1dd56 <net_pkt_skip>
   1e700:	2800      	cmp	r0, #0
   1e702:	f47f aec9 	bne.w	1e498 <net_ipv6_input+0x2a>
			length += opt_len + 2;
   1e706:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1e70a:	441e      	add	r6, r3
   1e70c:	e00b      	b.n	1e726 <net_ipv6_input+0x2b8>
   1e70e:	2201      	movs	r2, #1
   1e710:	4620      	mov	r0, r4
   1e712:	a902      	add	r1, sp, #8
   1e714:	f7ff fb35 	bl	1dd82 <net_pkt_read>
			if (net_pkt_read_u8(pkt, &opt_len)) {
   1e718:	2800      	cmp	r0, #0
   1e71a:	d0d8      	beq.n	1e6ce <net_ipv6_input+0x260>
   1e71c:	e6bc      	b.n	1e498 <net_ipv6_input+0x2a>
			length++;
   1e71e:	3601      	adds	r6, #1
			length += opt_len + 2;
   1e720:	b2b6      	uxth	r6, r6
			break;
   1e722:	e7b4      	b.n	1e68e <net_ipv6_input+0x220>
			length += opt_len + 2;
   1e724:	440e      	add	r6, r1
			length += opt_len + 2;
   1e726:	3602      	adds	r6, #2
   1e728:	e7fa      	b.n	1e720 <net_ipv6_input+0x2b2>
		if (net_ipv6_is_addr_mcast(&hdr->dst)) {
   1e72a:	7e2b      	ldrb	r3, [r5, #24]
   1e72c:	2bff      	cmp	r3, #255	; 0xff
   1e72e:	f43f aeb3 	beq.w	1e498 <net_ipv6_input+0x2a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1e732:	4633      	mov	r3, r6
   1e734:	2202      	movs	r2, #2
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1e736:	2104      	movs	r1, #4
   1e738:	4620      	mov	r0, r4
   1e73a:	f7ff fd17 	bl	1e16c <net_icmpv6_send_error>
   1e73e:	e6ab      	b.n	1e498 <net_ipv6_input+0x2a>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   1e740:	4620      	mov	r0, r4
   1e742:	a908      	add	r1, sp, #32
   1e744:	f000 ffc3 	bl	1f6ce <net_udp_input>
   1e748:	9002      	str	r0, [sp, #8]
		if (proto_hdr.udp) {
   1e74a:	2800      	cmp	r0, #0
   1e74c:	f43f aea4 	beq.w	1e498 <net_ipv6_input+0x2a>
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
   1e750:	4632      	mov	r2, r6
   1e752:	4620      	mov	r0, r4
   1e754:	ab02      	add	r3, sp, #8
   1e756:	a903      	add	r1, sp, #12
	ip.ipv6 = hdr;
   1e758:	9503      	str	r5, [sp, #12]
	verdict = net_conn_input(pkt, &ip, nexthdr, &proto_hdr);
   1e75a:	f7f2 fd51 	bl	11200 <net_conn_input>
	if (verdict != NET_DROP) {
   1e75e:	e735      	b.n	1e5cc <net_ipv6_input+0x15e>
			      net_pkt_get_current_offset(pkt) - 1);
   1e760:	4620      	mov	r0, r4
   1e762:	f7ff fb7f 	bl	1de64 <net_pkt_get_current_offset>
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1e766:	2201      	movs	r2, #1
   1e768:	1e43      	subs	r3, r0, #1
   1e76a:	e7e4      	b.n	1e736 <net_ipv6_input+0x2c8>

0001e76c <net_ipv6_init>:

void net_ipv6_init(void)
{
   1e76c:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
   1e76e:	f7f2 fc6b 	bl	11048 <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
#endif
}
   1e772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_ipv6_mld_init();
   1e776:	f7f2 bc91 	b.w	1109c <net_ipv6_mld_init>

0001e77a <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e77a:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e77c:	b942      	cbnz	r2, 1e790 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e77e:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e780:	b933      	cbnz	r3, 1e790 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e782:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e784:	b922      	cbnz	r2, 1e790 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1e786:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e788:	fab0 f080 	clz	r0, r0
   1e78c:	0940      	lsrs	r0, r0, #5
   1e78e:	4770      	bx	lr
   1e790:	2000      	movs	r0, #0
   1e792:	4770      	bx	lr

0001e794 <net_neighbor_data_remove>:
}
   1e794:	4770      	bx	lr

0001e796 <nbr_clear_ns_pending>:
	data->send_ns = 0;
   1e796:	2200      	movs	r2, #0
   1e798:	2300      	movs	r3, #0
{
   1e79a:	b510      	push	{r4, lr}
   1e79c:	4604      	mov	r4, r0
	data->send_ns = 0;
   1e79e:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (data->pending) {
   1e7a2:	6800      	ldr	r0, [r0, #0]
   1e7a4:	b118      	cbz	r0, 1e7ae <nbr_clear_ns_pending+0x18>
		net_pkt_unref(data->pending);
   1e7a6:	f7ff fa00 	bl	1dbaa <net_pkt_unref>
		data->pending = NULL;
   1e7aa:	2300      	movs	r3, #0
   1e7ac:	6023      	str	r3, [r4, #0]
}
   1e7ae:	bd10      	pop	{r4, pc}

0001e7b0 <nbr_free>:
{
   1e7b0:	b538      	push	{r3, r4, r5, lr}
   1e7b2:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1e7b4:	68c0      	ldr	r0, [r0, #12]
   1e7b6:	f7ff ffee 	bl	1e796 <nbr_clear_ns_pending>
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   1e7ba:	2500      	movs	r5, #0
	net_ipv6_nbr_data(nbr)->reachable = 0;
   1e7bc:	2100      	movs	r1, #0
   1e7be:	2000      	movs	r0, #0
   1e7c0:	68e3      	ldr	r3, [r4, #12]
   1e7c2:	e9c3 0106 	strd	r0, r1, [r3, #24]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   1e7c6:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
   1e7c8:	4620      	mov	r0, r4
   1e7ca:	f7ff fd78 	bl	1e2be <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   1e7ce:	4629      	mov	r1, r5
   1e7d0:	4620      	mov	r0, r4
}
   1e7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unlink(nbr, NULL);
   1e7d6:	f7f1 bf4f 	b.w	10678 <net_nbr_unlink>

0001e7da <net_linkaddr_set>:
{
   1e7da:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   1e7dc:	b140      	cbz	r0, 1e7f0 <net_linkaddr_set+0x16>
   1e7de:	b139      	cbz	r1, 1e7f0 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1e7e0:	2a06      	cmp	r2, #6
   1e7e2:	d808      	bhi.n	1e7f6 <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   1e7e4:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1e7e6:	3002      	adds	r0, #2
   1e7e8:	f7fe fa35 	bl	1cc56 <memcpy>

	return 0;
   1e7ec:	2000      	movs	r0, #0
}
   1e7ee:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e7f0:	f06f 0015 	mvn.w	r0, #21
   1e7f4:	e7fb      	b.n	1e7ee <net_linkaddr_set+0x14>
		return -EMSGSIZE;
   1e7f6:	f06f 0023 	mvn.w	r0, #35	; 0x23
   1e7fa:	e7f8      	b.n	1e7ee <net_linkaddr_set+0x14>

0001e7fc <k_uptime_get>:
{
   1e7fc:	b510      	push	{r4, lr}
   1e7fe:	f001 ffcf 	bl	207a0 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   1e802:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e806:	fba0 2304 	umull	r2, r3, r0, r4
   1e80a:	fb04 3301 	mla	r3, r4, r1, r3
   1e80e:	0bd0      	lsrs	r0, r2, #15
}
   1e810:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1e814:	0bd9      	lsrs	r1, r3, #15
   1e816:	bd10      	pop	{r4, pc}

0001e818 <k_delayed_work_remaining_get>:
{
   1e818:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   1e81a:	300c      	adds	r0, #12
   1e81c:	f001 ff81 	bl	20722 <z_timeout_remaining>
			return (u32_t)((t * to_hz + off) / from_hz);
   1e820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e824:	fba0 2303 	umull	r2, r3, r0, r3
   1e828:	0bd0      	lsrs	r0, r2, #15
}
   1e82a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1e82e:	bd08      	pop	{r3, pc}

0001e830 <set_llao>:
{
   1e830:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e832:	460d      	mov	r5, r1
   1e834:	4614      	mov	r4, r2
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   1e836:	f88d 3004 	strb.w	r3, [sp, #4]
	if (net_pkt_write(pkt, &opt_hdr,
   1e83a:	a901      	add	r1, sp, #4
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   1e83c:	08d3      	lsrs	r3, r2, #3
	if (net_pkt_write(pkt, &opt_hdr,
   1e83e:	2202      	movs	r2, #2
{
   1e840:	4606      	mov	r6, r0
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
   1e842:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_pkt_write(pkt, &opt_hdr,
   1e846:	f7ff fbb7 	bl	1dfb8 <net_pkt_write>
   1e84a:	b110      	cbz	r0, 1e852 <set_llao+0x22>
		return false;
   1e84c:	2000      	movs	r0, #0
}
   1e84e:	b002      	add	sp, #8
   1e850:	bd70      	pop	{r4, r5, r6, pc}
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
   1e852:	6829      	ldr	r1, [r5, #0]
   1e854:	4630      	mov	r0, r6
   1e856:	792a      	ldrb	r2, [r5, #4]
   1e858:	f7ff fbae 	bl	1dfb8 <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
   1e85c:	4601      	mov	r1, r0
   1e85e:	2800      	cmp	r0, #0
   1e860:	d1f4      	bne.n	1e84c <set_llao+0x1c>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
   1e862:	792a      	ldrb	r2, [r5, #4]
   1e864:	4630      	mov	r0, r6
   1e866:	1aa2      	subs	r2, r4, r2
   1e868:	3a02      	subs	r2, #2
   1e86a:	f7ff fa7f 	bl	1dd6c <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
   1e86e:	fab0 f080 	clz	r0, r0
   1e872:	0940      	lsrs	r0, r0, #5
   1e874:	e7eb      	b.n	1e84e <set_llao+0x1e>

0001e876 <read_llao>:
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
   1e876:	2306      	movs	r3, #6
{
   1e878:	b570      	push	{r4, r5, r6, lr}
   1e87a:	4615      	mov	r5, r2
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
   1e87c:	7053      	strb	r3, [r2, #1]
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
   1e87e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
   1e882:	460c      	mov	r4, r1
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
   1e884:	2b05      	cmp	r3, #5
		llstorage->len = net_pkt_lladdr_src(pkt)->len;
   1e886:	bf98      	it	ls
   1e888:	7053      	strbls	r3, [r2, #1]
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
   1e88a:	7852      	ldrb	r2, [r2, #1]
   1e88c:	1ca9      	adds	r1, r5, #2
{
   1e88e:	4606      	mov	r6, r0
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
   1e890:	f7ff fa77 	bl	1dd82 <net_pkt_read>
   1e894:	b968      	cbnz	r0, 1e8b2 <read_llao+0x3c>
	padding = len * 8U - 2 - llstorage->len;
   1e896:	786b      	ldrb	r3, [r5, #1]
   1e898:	00e1      	lsls	r1, r4, #3
   1e89a:	3902      	subs	r1, #2
   1e89c:	1ac9      	subs	r1, r1, r3
	if (padding) {
   1e89e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1e8a2:	d008      	beq.n	1e8b6 <read_llao+0x40>
		if (net_pkt_skip(pkt, padding)) {
   1e8a4:	4630      	mov	r0, r6
   1e8a6:	f7ff fa56 	bl	1dd56 <net_pkt_skip>
   1e8aa:	fab0 f080 	clz	r0, r0
   1e8ae:	0940      	lsrs	r0, r0, #5
}
   1e8b0:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1e8b2:	2000      	movs	r0, #0
   1e8b4:	e7fc      	b.n	1e8b0 <read_llao+0x3a>
	return true;
   1e8b6:	2001      	movs	r0, #1
   1e8b8:	e7fa      	b.n	1e8b0 <read_llao+0x3a>

0001e8ba <net_ipv6_addr_create_ll_allnodes_mcast>:
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1e8ba:	f04f 33ff 	mov.w	r3, #4294967295
   1e8be:	2202      	movs	r2, #2
   1e8c0:	7003      	strb	r3, [r0, #0]
   1e8c2:	7042      	strb	r2, [r0, #1]
   1e8c4:	2300      	movs	r3, #0
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1e8c6:	7083      	strb	r3, [r0, #2]
   1e8c8:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1e8ca:	7103      	strb	r3, [r0, #4]
   1e8cc:	7143      	strb	r3, [r0, #5]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1e8ce:	7183      	strb	r3, [r0, #6]
   1e8d0:	71c3      	strb	r3, [r0, #7]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1e8d2:	7203      	strb	r3, [r0, #8]
   1e8d4:	7243      	strb	r3, [r0, #9]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1e8d6:	7283      	strb	r3, [r0, #10]
   1e8d8:	72c3      	strb	r3, [r0, #11]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1e8da:	7303      	strb	r3, [r0, #12]
   1e8dc:	7343      	strb	r3, [r0, #13]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1e8de:	7383      	strb	r3, [r0, #14]
   1e8e0:	2301      	movs	r3, #1
   1e8e2:	73c3      	strb	r3, [r0, #15]
}
   1e8e4:	4770      	bx	lr

0001e8e6 <net_neighbor_table_clear>:
   1e8e6:	4770      	bx	lr

0001e8e8 <nbr_init>:
{
   1e8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8ea:	461f      	mov	r7, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1e8ec:	23ff      	movs	r3, #255	; 0xff
{
   1e8ee:	b085      	sub	sp, #20
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1e8f0:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1e8f2:	466b      	mov	r3, sp
{
   1e8f4:	4604      	mov	r4, r0
   1e8f6:	461e      	mov	r6, r3
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1e8f8:	68c5      	ldr	r5, [r0, #12]
	nbr->iface = iface;
   1e8fa:	6081      	str	r1, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1e8fc:	f102 0e10 	add.w	lr, r2, #16
   1e900:	469c      	mov	ip, r3
   1e902:	6810      	ldr	r0, [r2, #0]
   1e904:	6851      	ldr	r1, [r2, #4]
   1e906:	3208      	adds	r2, #8
   1e908:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1e90c:	4572      	cmp	r2, lr
   1e90e:	4663      	mov	r3, ip
   1e910:	d1f6      	bne.n	1e900 <nbr_init+0x18>
   1e912:	1d2a      	adds	r2, r5, #4
   1e914:	ab04      	add	r3, sp, #16
   1e916:	4635      	mov	r5, r6
   1e918:	cd03      	ldmia	r5!, {r0, r1}
   1e91a:	429d      	cmp	r5, r3
   1e91c:	6010      	str	r0, [r2, #0]
   1e91e:	6051      	str	r1, [r2, #4]
   1e920:	462e      	mov	r6, r5
   1e922:	f102 0208 	add.w	r2, r2, #8
   1e926:	d1f6      	bne.n	1e916 <nbr_init+0x2e>
	ipv6_nbr_set_state(nbr, state);
   1e928:	4620      	mov	r0, r4
   1e92a:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1e92e:	f7f1 ff3b 	bl	107a8 <ipv6_nbr_set_state>
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1e932:	2300      	movs	r3, #0
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   1e934:	2000      	movs	r0, #0
   1e936:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1e938:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
   1e93a:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
	net_ipv6_nbr_data(nbr)->reachable = 0;
   1e93e:	e9c2 0106 	strd	r0, r1, [r2, #24]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1e942:	f882 7035 	strb.w	r7, [r2, #53]	; 0x35
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1e946:	6013      	str	r3, [r2, #0]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   1e948:	6213      	str	r3, [r2, #32]
}
   1e94a:	b005      	add	sp, #20
   1e94c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e94e <net_ipv6_nbr_rm>:
{
   1e94e:	b570      	push	{r4, r5, r6, lr}
   1e950:	4605      	mov	r5, r0
   1e952:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1e954:	f7f1 feb8 	bl	106c8 <nbr_lookup.isra.0>
	if (!nbr) {
   1e958:	4604      	mov	r4, r0
   1e95a:	b138      	cbz	r0, 1e96c <net_ipv6_nbr_rm+0x1e>
	net_route_del_by_nexthop(iface, addr);
   1e95c:	4631      	mov	r1, r6
   1e95e:	4628      	mov	r0, r5
   1e960:	f7f2 fc2a 	bl	111b8 <net_route_del_by_nexthop>
	nbr_free(nbr);
   1e964:	4620      	mov	r0, r4
   1e966:	f7ff ff23 	bl	1e7b0 <nbr_free>
	return true;
   1e96a:	2001      	movs	r0, #1
}
   1e96c:	bd70      	pop	{r4, r5, r6, pc}

0001e96e <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1e96e:	f7f1 beab 	b.w	106c8 <nbr_lookup.isra.0>

0001e972 <net_ipv6_send_na>:
{
   1e972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   1e976:	f04f 0a14 	mov.w	sl, #20
{
   1e97a:	461e      	mov	r6, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   1e97c:	2300      	movs	r3, #0
{
   1e97e:	b088      	sub	sp, #32
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   1e980:	e9cd 3a02 	strd	r3, sl, [sp, #8]
	u8_t total_len = net_if_get_link_addr(iface)->len +
   1e984:	6803      	ldr	r3, [r0, #0]
{
   1e986:	4691      	mov	r9, r2
	return ROUND_UP(total_len, 8U);
   1e988:	7d1f      	ldrb	r7, [r3, #20]
	pkt = net_pkt_alloc_with_buffer(iface,
   1e98a:	f640 42cd 	movw	r2, #3277	; 0xccd
   1e98e:	2300      	movs	r3, #0
	return ROUND_UP(total_len, 8U);
   1e990:	3709      	adds	r7, #9
   1e992:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
   1e996:	e9cd 2300 	strd	r2, r3, [sp]
{
   1e99a:	460d      	mov	r5, r1
	pkt = net_pkt_alloc_with_buffer(iface,
   1e99c:	233a      	movs	r3, #58	; 0x3a
   1e99e:	2202      	movs	r2, #2
   1e9a0:	eb07 010a 	add.w	r1, r7, sl
{
   1e9a4:	4680      	mov	r8, r0
	pkt = net_pkt_alloc_with_buffer(iface,
   1e9a6:	f7f1 fd69 	bl	1047c <net_pkt_alloc_with_buffer>
	if (!pkt) {
   1e9aa:	4604      	mov	r4, r0
   1e9ac:	2800      	cmp	r0, #0
   1e9ae:	d05f      	beq.n	1ea70 <net_ipv6_send_na+0xfe>
	pkt->ipv6_hop_limit = hop_limit;
   1e9b0:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, dst) ||
   1e9b2:	464a      	mov	r2, r9
   1e9b4:	4629      	mov	r1, r5
   1e9b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   1e9ba:	f7ff fcb0 	bl	1e31e <net_ipv6_create>
   1e9be:	4602      	mov	r2, r0
   1e9c0:	b140      	cbz	r0, 1e9d4 <net_ipv6_send_na+0x62>
	int ret = -ENOBUFS;
   1e9c2:	f06f 0536 	mvn.w	r5, #54	; 0x36
	net_pkt_unref(pkt);
   1e9c6:	4620      	mov	r0, r4
   1e9c8:	f7ff f8ef 	bl	1dbaa <net_pkt_unref>
}
   1e9cc:	4628      	mov	r0, r5
   1e9ce:	b008      	add	sp, #32
   1e9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_NA, 0)) {
   1e9d4:	2188      	movs	r1, #136	; 0x88
   1e9d6:	4620      	mov	r0, r4
   1e9d8:	f7ff fb5d 	bl	1e096 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
   1e9dc:	4681      	mov	r9, r0
   1e9de:	2800      	cmp	r0, #0
   1e9e0:	d1ef      	bne.n	1e9c2 <net_ipv6_send_na+0x50>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   1e9e2:	4620      	mov	r0, r4
   1e9e4:	a902      	add	r1, sp, #8
   1e9e6:	f7ff fb03 	bl	1dff0 <net_pkt_get_data>
	if (!na_hdr) {
   1e9ea:	4605      	mov	r5, r0
   1e9ec:	2800      	cmp	r0, #0
   1e9ee:	d0e8      	beq.n	1e9c2 <net_ipv6_send_na+0x50>
	memset(na_hdr, 0, sizeof(struct net_icmpv6_na_hdr));
   1e9f0:	4652      	mov	r2, sl
   1e9f2:	4649      	mov	r1, r9
   1e9f4:	f7fe f95a 	bl	1ccac <memset>
	na_hdr->flags = flags;
   1e9f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1e9fc:	aa04      	add	r2, sp, #16
	na_hdr->flags = flags;
   1e9fe:	702b      	strb	r3, [r5, #0]
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1ea00:	f106 0e10 	add.w	lr, r6, #16
   1ea04:	4633      	mov	r3, r6
   1ea06:	4616      	mov	r6, r2
   1ea08:	4694      	mov	ip, r2
   1ea0a:	6818      	ldr	r0, [r3, #0]
   1ea0c:	6859      	ldr	r1, [r3, #4]
   1ea0e:	3308      	adds	r3, #8
   1ea10:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1ea14:	4573      	cmp	r3, lr
   1ea16:	4662      	mov	r2, ip
   1ea18:	d1f6      	bne.n	1ea08 <net_ipv6_send_na+0x96>
   1ea1a:	1d2b      	adds	r3, r5, #4
   1ea1c:	ad08      	add	r5, sp, #32
   1ea1e:	4632      	mov	r2, r6
   1ea20:	ca03      	ldmia	r2!, {r0, r1}
   1ea22:	42aa      	cmp	r2, r5
   1ea24:	6018      	str	r0, [r3, #0]
   1ea26:	6059      	str	r1, [r3, #4]
   1ea28:	4616      	mov	r6, r2
   1ea2a:	f103 0308 	add.w	r3, r3, #8
   1ea2e:	d1f6      	bne.n	1ea1e <net_ipv6_send_na+0xac>
	if (net_pkt_set_data(pkt, &na_access)) {
   1ea30:	4620      	mov	r0, r4
   1ea32:	a902      	add	r1, sp, #8
   1ea34:	f7ff fafd 	bl	1e032 <net_pkt_set_data>
   1ea38:	4605      	mov	r5, r0
   1ea3a:	2800      	cmp	r0, #0
   1ea3c:	d1c1      	bne.n	1e9c2 <net_ipv6_send_na+0x50>
	return &iface->if_dev->link_addr;
   1ea3e:	f8d8 1000 	ldr.w	r1, [r8]
	if (!set_llao(pkt, net_if_get_link_addr(iface),
   1ea42:	2302      	movs	r3, #2
   1ea44:	463a      	mov	r2, r7
   1ea46:	4620      	mov	r0, r4
   1ea48:	3110      	adds	r1, #16
   1ea4a:	f7ff fef1 	bl	1e830 <set_llao>
   1ea4e:	2800      	cmp	r0, #0
   1ea50:	d0b7      	beq.n	1e9c2 <net_ipv6_send_na+0x50>
	net_pkt_cursor_init(pkt);
   1ea52:	4620      	mov	r0, r4
   1ea54:	f7ff f8f5 	bl	1dc42 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   1ea58:	213a      	movs	r1, #58	; 0x3a
   1ea5a:	4620      	mov	r0, r4
   1ea5c:	f7ff fcc2 	bl	1e3e4 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   1ea60:	4620      	mov	r0, r4
   1ea62:	f7fe fa2f 	bl	1cec4 <net_send_data>
   1ea66:	2800      	cmp	r0, #0
   1ea68:	dab0      	bge.n	1e9cc <net_ipv6_send_na+0x5a>
		ret = -EINVAL;
   1ea6a:	f06f 0515 	mvn.w	r5, #21
   1ea6e:	e7aa      	b.n	1e9c6 <net_ipv6_send_na+0x54>
		return -ENOMEM;
   1ea70:	f06f 050b 	mvn.w	r5, #11
   1ea74:	e7aa      	b.n	1e9cc <net_ipv6_send_na+0x5a>

0001ea76 <net_ipv6_nbr_set_reachable_timer>:
	time = net_if_ipv6_get_reachable_time(iface);
   1ea76:	6842      	ldr	r2, [r0, #4]
	if (!iface->config.ip.ipv6) {
   1ea78:	b10a      	cbz	r2, 1ea7e <net_ipv6_nbr_set_reachable_timer+0x8>
	return iface->config.ip.ipv6->reachable_time;
   1ea7a:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
	ipv6_nd_restart_reachable_timer(nbr, time);
   1ea7e:	2300      	movs	r3, #0
   1ea80:	4608      	mov	r0, r1
   1ea82:	f7f1 be57 	b.w	10734 <ipv6_nd_restart_reachable_timer>

0001ea86 <handle_na_input>:
{
   1ea86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   1ea8a:	2314      	movs	r3, #20
   1ea8c:	2500      	movs	r5, #0
{
   1ea8e:	b08d      	sub	sp, #52	; 0x34
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
   1ea90:	e9cd 5304 	strd	r5, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   1ea94:	ab03      	add	r3, sp, #12
   1ea96:	9306      	str	r3, [sp, #24]
   1ea98:	2302      	movs	r3, #2
{
   1ea9a:	4604      	mov	r4, r0
   1ea9c:	460f      	mov	r7, r1
   1ea9e:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   1eaa0:	9307      	str	r3, [sp, #28]
	u16_t length = net_pkt_get_len(pkt);
   1eaa2:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   1eaa4:	b953      	cbnz	r3, 1eabc <handle_na_input+0x36>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
   1eaa6:	4620      	mov	r0, r4
   1eaa8:	a904      	add	r1, sp, #16
   1eaaa:	f7ff faa1 	bl	1dff0 <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   1eaae:	b2ad      	uxth	r5, r5
	if (!na_hdr) {
   1eab0:	4606      	mov	r6, r0
   1eab2:	b938      	cbnz	r0, 1eac4 <handle_na_input+0x3e>
	return NET_DROP;
   1eab4:	2002      	movs	r0, #2
}
   1eab6:	b00d      	add	sp, #52	; 0x34
   1eab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
   1eabc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1eabe:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1eac0:	4415      	add	r5, r2
		buf = buf->frags;
   1eac2:	e7ef      	b.n	1eaa4 <handle_na_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   1eac4:	2d41      	cmp	r5, #65	; 0x41
   1eac6:	d90b      	bls.n	1eae0 <handle_na_input+0x5a>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1eac8:	79fb      	ldrb	r3, [r7, #7]
   1eaca:	2bff      	cmp	r3, #255	; 0xff
   1eacc:	d108      	bne.n	1eae0 <handle_na_input+0x5a>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1eace:	7903      	ldrb	r3, [r0, #4]
   1ead0:	2bff      	cmp	r3, #255	; 0xff
   1ead2:	d005      	beq.n	1eae0 <handle_na_input+0x5a>
	     net_ipv6_is_addr_mcast(&na_hdr->tgt) ||
   1ead4:	7803      	ldrb	r3, [r0, #0]
   1ead6:	0658      	lsls	r0, r3, #25
   1ead8:	d506      	bpl.n	1eae8 <handle_na_input+0x62>
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
   1eada:	7e3b      	ldrb	r3, [r7, #24]
   1eadc:	2bff      	cmp	r3, #255	; 0xff
   1eade:	d103      	bne.n	1eae8 <handle_na_input+0x62>
	      net_ipv6_is_addr_mcast(&ip_hdr->dst))) &&
   1eae0:	f898 3001 	ldrb.w	r3, [r8, #1]
   1eae4:	2b00      	cmp	r3, #0
   1eae6:	d1e5      	bne.n	1eab4 <handle_na_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   1eae8:	9905      	ldr	r1, [sp, #20]
   1eaea:	4620      	mov	r0, r4
   1eaec:	f7ff f933 	bl	1dd56 <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
   1eaf0:	2314      	movs	r3, #20
				net_pkt_get_data(pkt, &nd_access);
   1eaf2:	4620      	mov	r0, r4
   1eaf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1eaf8:	a906      	add	r1, sp, #24
   1eafa:	f7ff fa79 	bl	1dff0 <net_pkt_get_data>
	u16_t tllao_offset = 0U;
   1eafe:	2700      	movs	r7, #0
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
   1eb00:	3d2c      	subs	r5, #44	; 0x2c
   1eb02:	b2ad      	uxth	r5, r5
	while (nd_opt_hdr && nd_opt_hdr->len &&
   1eb04:	b130      	cbz	r0, 1eb14 <handle_na_input+0x8e>
   1eb06:	7843      	ldrb	r3, [r0, #1]
   1eb08:	b123      	cbz	r3, 1eb14 <handle_na_input+0x8e>
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
   1eb0a:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
	while (nd_opt_hdr && nd_opt_hdr->len &&
   1eb0e:	42a9      	cmp	r1, r5
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
   1eb10:	460a      	mov	r2, r1
	while (nd_opt_hdr && nd_opt_hdr->len &&
   1eb12:	d313      	bcc.n	1eb3c <handle_na_input+0xb6>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1eb14:	1d31      	adds	r1, r6, #4
   1eb16:	6a20      	ldr	r0, [r4, #32]
   1eb18:	9101      	str	r1, [sp, #4]
   1eb1a:	f7fe fafc 	bl	1d116 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1eb1e:	9901      	ldr	r1, [sp, #4]
   1eb20:	b330      	cbz	r0, 1eb70 <handle_na_input+0xea>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1eb22:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
   1eb26:	2b00      	cmp	r3, #0
   1eb28:	d1c4      	bne.n	1eab4 <handle_na_input+0x2e>
	if (net_ipv6_is_ll_addr(addr)) {
   1eb2a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1eb2e:	88b2      	ldrh	r2, [r6, #4]
   1eb30:	429a      	cmp	r2, r3
   1eb32:	d0bf      	beq.n	1eab4 <handle_na_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
   1eb34:	6a20      	ldr	r0, [r4, #32]
   1eb36:	f7f1 f8ed 	bl	fd14 <net_if_ipv6_dad_failed>
	return true;
   1eb3a:	e7bb      	b.n	1eab4 <handle_na_input+0x2e>
		switch (nd_opt_hdr->type) {
   1eb3c:	7800      	ldrb	r0, [r0, #0]
   1eb3e:	2802      	cmp	r0, #2
   1eb40:	d106      	bne.n	1eb50 <handle_na_input+0xca>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1eb42:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
   1eb44:	3706      	adds	r7, #6
   1eb46:	443a      	add	r2, r7
   1eb48:	f894 7038 	ldrb.w	r7, [r4, #56]	; 0x38
   1eb4c:	443a      	add	r2, r7
   1eb4e:	b297      	uxth	r7, r2
					     net_pkt_ipv6_ext_opt_len(pkt) +
   1eb50:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1eb54:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1eb56:	4299      	cmp	r1, r3
   1eb58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1eb5c:	d2aa      	bcs.n	1eab4 <handle_na_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   1eb5e:	9907      	ldr	r1, [sp, #28]
   1eb60:	4620      	mov	r0, r4
   1eb62:	f7ff f8f8 	bl	1dd56 <net_pkt_skip>
					net_pkt_get_data(pkt, &nd_access);
   1eb66:	4620      	mov	r0, r4
   1eb68:	a906      	add	r1, sp, #24
   1eb6a:	f7ff fa41 	bl	1dff0 <net_pkt_get_data>
   1eb6e:	e7c9      	b.n	1eb04 <handle_na_input+0x7e>
	struct net_linkaddr_storage lladdr = { 0 };
   1eb70:	e9cd 0008 	strd	r0, r0, [sp, #32]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &na_hdr->tgt);
   1eb74:	6a20      	ldr	r0, [r4, #32]
   1eb76:	f7f1 fda7 	bl	106c8 <nbr_lookup.isra.0>
	if (!nbr) {
   1eb7a:	4605      	mov	r5, r0
   1eb7c:	2800      	cmp	r0, #0
   1eb7e:	d099      	beq.n	1eab4 <handle_na_input+0x2e>
	if (tllao_offset) {
   1eb80:	2f00      	cmp	r7, #0
   1eb82:	d140      	bne.n	1ec06 <handle_na_input+0x180>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1eb84:	786b      	ldrb	r3, [r5, #1]
   1eb86:	2bff      	cmp	r3, #255	; 0xff
   1eb88:	d055      	beq.n	1ec36 <handle_na_input+0x1b0>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1eb8a:	7868      	ldrb	r0, [r5, #1]
   1eb8c:	f7f1 fd94 	bl	106b8 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1eb90:	4680      	mov	r8, r0
   1eb92:	2800      	cmp	r0, #0
   1eb94:	d08e      	beq.n	1eab4 <handle_na_input+0x2e>
	if (tllao_offset) {
   1eb96:	2f00      	cmp	r7, #0
   1eb98:	d062      	beq.n	1ec60 <handle_na_input+0x1da>
		lladdr_changed = memcmp(lladdr.addr,
   1eb9a:	7842      	ldrb	r2, [r0, #1]
   1eb9c:	1c81      	adds	r1, r0, #2
   1eb9e:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   1eba2:	f7fe f848 	bl	1cc36 <memcmp>
   1eba6:	f1b0 0900 	subs.w	r9, r0, #0
   1ebaa:	bf18      	it	ne
   1ebac:	f04f 0901 	movne.w	r9, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1ebb0:	68eb      	ldr	r3, [r5, #12]
   1ebb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1ebb6:	2b00      	cmp	r3, #0
   1ebb8:	d154      	bne.n	1ec64 <handle_na_input+0x1de>
		if (!tllao_offset) {
   1ebba:	2f00      	cmp	r7, #0
   1ebbc:	f43f af7a 	beq.w	1eab4 <handle_na_input+0x2e>
		if (lladdr_changed) {
   1ebc0:	f1b9 0f00 	cmp.w	r9, #0
   1ebc4:	d009      	beq.n	1ebda <handle_na_input+0x154>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   1ebc6:	4640      	mov	r0, r8
   1ebc8:	f7f1 fda0 	bl	1070c <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1ebcc:	4640      	mov	r0, r8
   1ebce:	f898 2001 	ldrb.w	r2, [r8, #1]
   1ebd2:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   1ebd6:	f7ff fe00 	bl	1e7da <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
   1ebda:	7833      	ldrb	r3, [r6, #0]
   1ebdc:	0659      	lsls	r1, r3, #25
   1ebde:	f140 8086 	bpl.w	1ecee <handle_na_input+0x268>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1ebe2:	2101      	movs	r1, #1
   1ebe4:	4628      	mov	r0, r5
   1ebe6:	f7f1 fddf 	bl	107a8 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   1ebea:	2000      	movs	r0, #0
   1ebec:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
   1ebee:	2200      	movs	r2, #0
   1ebf0:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
   1ebf2:	e9c3 0106 	strd	r0, r1, [r3, #24]
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
   1ebf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1ebfa:	4629      	mov	r1, r5
   1ebfc:	6a20      	ldr	r0, [r4, #32]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   1ebfe:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1ec00:	f7ff ff39 	bl	1ea76 <net_ipv6_nbr_set_reachable_timer>
   1ec04:	e03d      	b.n	1ec82 <handle_na_input+0x1fc>
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
   1ec06:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		net_pkt_cursor_init(pkt);
   1ec0a:	4620      	mov	r0, r4
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
   1ec0c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		net_pkt_cursor_init(pkt);
   1ec10:	f7ff f817 	bl	1dc42 <net_pkt_cursor_init>
		if (net_pkt_skip(pkt, tllao_offset) ||
   1ec14:	4639      	mov	r1, r7
   1ec16:	4620      	mov	r0, r4
   1ec18:	f7ff f89d 	bl	1dd56 <net_pkt_skip>
   1ec1c:	2800      	cmp	r0, #0
   1ec1e:	f47f af49 	bne.w	1eab4 <handle_na_input+0x2e>
		    net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
   1ec22:	4620      	mov	r0, r4
   1ec24:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1ec28:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   1ec2c:	f7ff f8a9 	bl	1dd82 <net_pkt_read>
		if (net_pkt_skip(pkt, tllao_offset) ||
   1ec30:	2800      	cmp	r0, #0
   1ec32:	d0a7      	beq.n	1eb84 <handle_na_input+0xfe>
   1ec34:	e73e      	b.n	1eab4 <handle_na_input+0x2e>
		if (!tllao_offset) {
   1ec36:	2f00      	cmp	r7, #0
   1ec38:	f43f af3c 	beq.w	1eab4 <handle_na_input+0x2e>
		nbr_lladdr.len = lladdr.len;
   1ec3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1ec40:	4628      	mov	r0, r5
		nbr_lladdr.len = lladdr.len;
   1ec42:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1ec46:	6a21      	ldr	r1, [r4, #32]
		nbr_lladdr.addr = lladdr.addr;
   1ec48:	f10d 0322 	add.w	r3, sp, #34	; 0x22
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1ec4c:	aa0a      	add	r2, sp, #40	; 0x28
		nbr_lladdr.addr = lladdr.addr;
   1ec4e:	930a      	str	r3, [sp, #40]	; 0x28
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1ec50:	f7f1 fcb8 	bl	105c4 <net_nbr_link>
   1ec54:	2800      	cmp	r0, #0
   1ec56:	d098      	beq.n	1eb8a <handle_na_input+0x104>
			nbr_free(nbr);
   1ec58:	4628      	mov	r0, r5
   1ec5a:	f7ff fda9 	bl	1e7b0 <nbr_free>
			return false;
   1ec5e:	e729      	b.n	1eab4 <handle_na_input+0x2e>
	bool lladdr_changed = false;
   1ec60:	46b9      	mov	r9, r7
   1ec62:	e7a5      	b.n	1ebb0 <handle_na_input+0x12a>
	if (!(na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE) && lladdr_changed) {
   1ec64:	7832      	ldrb	r2, [r6, #0]
   1ec66:	0692      	lsls	r2, r2, #26
   1ec68:	d423      	bmi.n	1ecb2 <handle_na_input+0x22c>
   1ec6a:	f1b9 0f00 	cmp.w	r9, #0
   1ec6e:	d007      	beq.n	1ec80 <handle_na_input+0x1fa>
		if (net_ipv6_nbr_data(nbr)->state ==
   1ec70:	2b01      	cmp	r3, #1
   1ec72:	f47f af1f 	bne.w	1eab4 <handle_na_input+0x2e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1ec76:	2102      	movs	r1, #2
   1ec78:	4628      	mov	r0, r5
   1ec7a:	f7f1 fd95 	bl	107a8 <ipv6_nbr_set_state>
   1ec7e:	e719      	b.n	1eab4 <handle_na_input+0x2e>
	if (na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE ||
   1ec80:	bb27      	cbnz	r7, 1eccc <handle_na_input+0x246>
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
   1ec82:	7833      	ldrb	r3, [r6, #0]
	net_ipv6_nbr_data(nbr)->is_router =
   1ec84:	68ea      	ldr	r2, [r5, #12]
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
   1ec86:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router =
   1ec88:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	pending = net_ipv6_nbr_data(nbr)->pending;
   1ec8c:	68eb      	ldr	r3, [r5, #12]
   1ec8e:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   1ec90:	b156      	cbz	r6, 1eca8 <handle_na_input+0x222>
		if (net_send_data(pending) < 0) {
   1ec92:	4630      	mov	r0, r6
   1ec94:	f7fe f916 	bl	1cec4 <net_send_data>
   1ec98:	2800      	cmp	r0, #0
   1ec9a:	da2d      	bge.n	1ecf8 <handle_na_input+0x272>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1ec9c:	68e8      	ldr	r0, [r5, #12]
   1ec9e:	f7ff fd7a 	bl	1e796 <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   1eca2:	4630      	mov	r0, r6
   1eca4:	f7fe ff81 	bl	1dbaa <net_pkt_unref>
	net_pkt_unref(pkt);
   1eca8:	4620      	mov	r0, r4
   1ecaa:	f7fe ff7e 	bl	1dbaa <net_pkt_unref>
	return NET_OK;
   1ecae:	2000      	movs	r0, #0
   1ecb0:	e701      	b.n	1eab6 <handle_na_input+0x30>
		if (lladdr_changed) {
   1ecb2:	f1b9 0f00 	cmp.w	r9, #0
   1ecb6:	d009      	beq.n	1eccc <handle_na_input+0x246>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
   1ecb8:	4640      	mov	r0, r8
   1ecba:	f7f1 fd27 	bl	1070c <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1ecbe:	4640      	mov	r0, r8
   1ecc0:	f898 2001 	ldrb.w	r2, [r8, #1]
   1ecc4:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   1ecc8:	f7ff fd87 	bl	1e7da <net_linkaddr_set>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
   1eccc:	7833      	ldrb	r3, [r6, #0]
   1ecce:	065b      	lsls	r3, r3, #25
   1ecd0:	d50a      	bpl.n	1ece8 <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1ecd2:	2101      	movs	r1, #1
   1ecd4:	4628      	mov	r0, r5
   1ecd6:	f7f1 fd67 	bl	107a8 <ipv6_nbr_set_state>
			net_ipv6_nbr_data(nbr)->reachable = 0;
   1ecda:	2000      	movs	r0, #0
   1ecdc:	2100      	movs	r1, #0
   1ecde:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
   1ece0:	2200      	movs	r2, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
   1ece2:	e9c3 0106 	strd	r0, r1, [r3, #24]
	return (struct net_ipv6_nbr_data *)nbr->data;
   1ece6:	e788      	b.n	1ebfa <handle_na_input+0x174>
			if (lladdr_changed) {
   1ece8:	f1b9 0f00 	cmp.w	r9, #0
   1ecec:	d0c9      	beq.n	1ec82 <handle_na_input+0x1fc>
				ipv6_nbr_set_state(nbr,
   1ecee:	2102      	movs	r1, #2
   1ecf0:	4628      	mov	r0, r5
   1ecf2:	f7f1 fd59 	bl	107a8 <ipv6_nbr_set_state>
   1ecf6:	e7c4      	b.n	1ec82 <handle_na_input+0x1fc>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1ecf8:	2200      	movs	r2, #0
   1ecfa:	68eb      	ldr	r3, [r5, #12]
   1ecfc:	601a      	str	r2, [r3, #0]
   1ecfe:	e7d0      	b.n	1eca2 <handle_na_input+0x21c>

0001ed00 <net_ipv6_nbr_add>:
{
   1ed00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ed04:	4615      	mov	r5, r2
   1ed06:	461a      	mov	r2, r3
	nbr = add_nbr(iface, addr, is_router, state);
   1ed08:	f89d 3020 	ldrb.w	r3, [sp, #32]
{
   1ed0c:	4607      	mov	r7, r0
   1ed0e:	4688      	mov	r8, r1
	nbr = add_nbr(iface, addr, is_router, state);
   1ed10:	f7f1 fde6 	bl	108e0 <add_nbr>
	if (!nbr) {
   1ed14:	4604      	mov	r4, r0
   1ed16:	b388      	cbz	r0, 1ed7c <net_ipv6_nbr_add+0x7c>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1ed18:	462a      	mov	r2, r5
   1ed1a:	4639      	mov	r1, r7
   1ed1c:	f7f1 fc52 	bl	105c4 <net_nbr_link>
   1ed20:	3045      	adds	r0, #69	; 0x45
   1ed22:	d11a      	bne.n	1ed5a <net_ipv6_nbr_add+0x5a>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1ed24:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1ed26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1ed2a:	2b05      	cmp	r3, #5
   1ed2c:	d026      	beq.n	1ed7c <net_ipv6_nbr_add+0x7c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1ed2e:	7860      	ldrb	r0, [r4, #1]
   1ed30:	f7f1 fcc2 	bl	106b8 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1ed34:	792a      	ldrb	r2, [r5, #4]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1ed36:	4606      	mov	r6, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1ed38:	6829      	ldr	r1, [r5, #0]
   1ed3a:	3002      	adds	r0, #2
   1ed3c:	f7fd ff7b 	bl	1cc36 <memcmp>
   1ed40:	b1b8      	cbz	r0, 1ed72 <net_ipv6_nbr_add+0x72>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
   1ed42:	4630      	mov	r0, r6
   1ed44:	f7f1 fce2 	bl	1070c <dbg_update_neighbor_lladdr.isra.0>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1ed48:	4630      	mov	r0, r6
   1ed4a:	792a      	ldrb	r2, [r5, #4]
   1ed4c:	6829      	ldr	r1, [r5, #0]
   1ed4e:	f7ff fd44 	bl	1e7da <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1ed52:	2102      	movs	r1, #2
   1ed54:	4620      	mov	r0, r4
   1ed56:	f7f1 fd27 	bl	107a8 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1ed5a:	68e3      	ldr	r3, [r4, #12]
   1ed5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1ed60:	b963      	cbnz	r3, 1ed7c <net_ipv6_nbr_add+0x7c>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1ed62:	461a      	mov	r2, r3
   1ed64:	4619      	mov	r1, r3
   1ed66:	4638      	mov	r0, r7
   1ed68:	e9cd 8300 	strd	r8, r3, [sp]
   1ed6c:	f7f1 fe14 	bl	10998 <net_ipv6_send_ns>
		if (ret < 0) {
   1ed70:	e004      	b.n	1ed7c <net_ipv6_nbr_add+0x7c>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   1ed72:	68e3      	ldr	r3, [r4, #12]
   1ed74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1ed78:	2b00      	cmp	r3, #0
   1ed7a:	d0ea      	beq.n	1ed52 <net_ipv6_nbr_add+0x52>
}
   1ed7c:	4620      	mov	r0, r4
   1ed7e:	b002      	add	sp, #8
   1ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ed84 <handle_ns_input>:
{
   1ed84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   1ed88:	2314      	movs	r3, #20
   1ed8a:	2600      	movs	r6, #0
{
   1ed8c:	b090      	sub	sp, #64	; 0x40
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
   1ed8e:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   1ed92:	ab03      	add	r3, sp, #12
   1ed94:	9306      	str	r3, [sp, #24]
   1ed96:	2302      	movs	r3, #2
{
   1ed98:	4604      	mov	r4, r0
   1ed9a:	460d      	mov	r5, r1
   1ed9c:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
   1ed9e:	9307      	str	r3, [sp, #28]
	u16_t length = net_pkt_get_len(pkt);
   1eda0:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   1eda2:	b963      	cbnz	r3, 1edbe <handle_ns_input+0x3a>
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   1eda4:	4620      	mov	r0, r4
   1eda6:	a904      	add	r1, sp, #16
	src_lladdr.len = 0;
   1eda8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
   1edac:	f7ff f920 	bl	1dff0 <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   1edb0:	b2b6      	uxth	r6, r6
	if (!ns_hdr) {
   1edb2:	4607      	mov	r7, r0
   1edb4:	b938      	cbnz	r0, 1edc6 <handle_ns_input+0x42>
	return NET_DROP;
   1edb6:	2002      	movs	r0, #2
}
   1edb8:	b010      	add	sp, #64	; 0x40
   1edba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   1edbe:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1edc0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1edc2:	4416      	add	r6, r2
		buf = buf->frags;
   1edc4:	e7ed      	b.n	1eda2 <handle_ns_input+0x1e>
	if (((length < (sizeof(struct net_ipv6_hdr) +
   1edc6:	2e3f      	cmp	r6, #63	; 0x3f
   1edc8:	d902      	bls.n	1edd0 <handle_ns_input+0x4c>
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   1edca:	79eb      	ldrb	r3, [r5, #7]
   1edcc:	2bff      	cmp	r3, #255	; 0xff
   1edce:	d006      	beq.n	1edde <handle_ns_input+0x5a>
	    (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT)) &&
   1edd0:	793b      	ldrb	r3, [r7, #4]
   1edd2:	2bff      	cmp	r3, #255	; 0xff
   1edd4:	d103      	bne.n	1edde <handle_ns_input+0x5a>
	    (net_ipv6_is_addr_mcast(&ns_hdr->tgt) && icmp_hdr->code != 0U)) {
   1edd6:	f898 3001 	ldrb.w	r3, [r8, #1]
   1edda:	2b00      	cmp	r3, #0
   1eddc:	d1eb      	bne.n	1edb6 <handle_ns_input+0x32>
   1edde:	9905      	ldr	r1, [sp, #20]
   1ede0:	4620      	mov	r0, r4
   1ede2:	f7fe ffb8 	bl	1dd56 <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
   1ede6:	2314      	movs	r3, #20
				net_pkt_get_data(pkt, &nd_access);
   1ede8:	4620      	mov	r0, r4
   1edea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1edee:	a906      	add	r1, sp, #24
   1edf0:	f7ff f8fe 	bl	1dff0 <net_pkt_get_data>
   1edf4:	4682      	mov	sl, r0
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
   1edf6:	3e2c      	subs	r6, #44	; 0x2c
   1edf8:	b2b6      	uxth	r6, r6
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   1edfa:	f105 0808 	add.w	r8, r5, #8
			src_lladdr.addr = src_lladdr_s.addr;
   1edfe:	f10d 0922 	add.w	r9, sp, #34	; 0x22
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
   1ee02:	f1ba 0f00 	cmp.w	sl, #0
   1ee06:	d006      	beq.n	1ee16 <handle_ns_input+0x92>
   1ee08:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1ee0c:	b11b      	cbz	r3, 1ee16 <handle_ns_input+0x92>
   1ee0e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1ee12:	42b3      	cmp	r3, r6
   1ee14:	d331      	bcc.n	1ee7a <handle_ns_input+0xf6>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1ee16:	3704      	adds	r7, #4
   1ee18:	4639      	mov	r1, r7
   1ee1a:	6a20      	ldr	r0, [r4, #32]
   1ee1c:	f7fe f97b 	bl	1d116 <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   1ee20:	4682      	mov	sl, r0
   1ee22:	2800      	cmp	r0, #0
   1ee24:	d0c7      	beq.n	1edb6 <handle_ns_input+0x32>
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   1ee26:	f105 0808 	add.w	r8, r5, #8
		tgt = &ifaddr->address.in6_addr;
   1ee2a:	1d06      	adds	r6, r0, #4
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   1ee2c:	4640      	mov	r0, r8
   1ee2e:	f7ff fca4 	bl	1e77a <net_ipv6_is_addr_unspecified>
		na_src = &ip_hdr->dst;
   1ee32:	f105 0918 	add.w	r9, r5, #24
	if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   1ee36:	4601      	mov	r1, r0
   1ee38:	2800      	cmp	r0, #0
   1ee3a:	d07f      	beq.n	1ef3c <handle_ns_input+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ee3c:	f240 23ff 	movw	r3, #767	; 0x2ff
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ee40:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ee42:	429a      	cmp	r2, r3
   1ee44:	d1b7      	bne.n	1edb6 <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ee46:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ee48:	2b00      	cmp	r3, #0
   1ee4a:	d1b4      	bne.n	1edb6 <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ee4c:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ee4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ee52:	d1b0      	bne.n	1edb6 <handle_ns_input+0x32>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1ee54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ee56:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ee58:	2bff      	cmp	r3, #255	; 0xff
   1ee5a:	d1ac      	bne.n	1edb6 <handle_ns_input+0x32>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1ee5c:	f99a 302d 	ldrsb.w	r3, [sl, #45]	; 0x2d
   1ee60:	2b00      	cmp	r3, #0
   1ee62:	d137      	bne.n	1eed4 <handle_ns_input+0x150>
	if (net_ipv6_is_ll_addr(addr)) {
   1ee64:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1ee68:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   1ee6c:	429a      	cmp	r2, r3
   1ee6e:	d0a2      	beq.n	1edb6 <handle_ns_input+0x32>
	net_if_ipv6_dad_failed(iface, addr);
   1ee70:	4631      	mov	r1, r6
   1ee72:	6a20      	ldr	r0, [r4, #32]
   1ee74:	f7f0 ff4e 	bl	fd14 <net_if_ipv6_dad_failed>
   1ee78:	e79d      	b.n	1edb6 <handle_ns_input+0x32>
	return net_pkt_skip(pkt, access->size);
   1ee7a:	4620      	mov	r0, r4
   1ee7c:	9907      	ldr	r1, [sp, #28]
   1ee7e:	f7fe ff6a 	bl	1dd56 <net_pkt_skip>
		switch (nd_opt_hdr->type) {
   1ee82:	f89a 3000 	ldrb.w	r3, [sl]
   1ee86:	2b01      	cmp	r3, #1
   1ee88:	d112      	bne.n	1eeb0 <handle_ns_input+0x12c>
			if (net_ipv6_is_addr_unspecified(&ip_hdr->src)) {
   1ee8a:	4640      	mov	r0, r8
   1ee8c:	f7ff fc75 	bl	1e77a <net_ipv6_is_addr_unspecified>
   1ee90:	2800      	cmp	r0, #0
   1ee92:	d190      	bne.n	1edb6 <handle_ns_input+0x32>
			if (!read_llao(pkt, nd_opt_hdr->len, &src_lladdr_s)) {
   1ee94:	4620      	mov	r0, r4
   1ee96:	f89a 1001 	ldrb.w	r1, [sl, #1]
   1ee9a:	aa08      	add	r2, sp, #32
   1ee9c:	f7ff fceb 	bl	1e876 <read_llao>
   1eea0:	2800      	cmp	r0, #0
   1eea2:	d088      	beq.n	1edb6 <handle_ns_input+0x32>
			src_lladdr.len = src_lladdr_s.len;
   1eea4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
			src_lladdr.addr = src_lladdr_s.addr;
   1eea8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
			src_lladdr.len = src_lladdr_s.len;
   1eeac:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);
   1eeb0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
					     (nd_opt_hdr->len << 3));
   1eeb4:	f89a 3001 	ldrb.w	r3, [sl, #1]
					     net_pkt_ipv6_ext_opt_len(pkt) +
   1eeb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1eebc:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1eebe:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1eec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1eec4:	f67f af77 	bls.w	1edb6 <handle_ns_input+0x32>
					net_pkt_get_data(pkt, &nd_access);
   1eec8:	4620      	mov	r0, r4
   1eeca:	a906      	add	r1, sp, #24
   1eecc:	f7ff f890 	bl	1dff0 <net_pkt_get_data>
   1eed0:	4682      	mov	sl, r0
   1eed2:	e796      	b.n	1ee02 <handle_ns_input+0x7e>
		net_ipv6_addr_create_ll_allnodes_mcast(&ip_hdr->dst);
   1eed4:	4648      	mov	r0, r9
   1eed6:	f7ff fcf0 	bl	1e8ba <net_ipv6_addr_create_ll_allnodes_mcast>
		net_ipaddr_copy(&ip_hdr->src,
   1eeda:	4649      	mov	r1, r9
   1eedc:	6a20      	ldr	r0, [r4, #32]
   1eede:	f7f1 f8c9 	bl	10074 <net_if_ipv6_select_src_addr>
   1eee2:	ad0c      	add	r5, sp, #48	; 0x30
   1eee4:	4603      	mov	r3, r0
   1eee6:	462a      	mov	r2, r5
   1eee8:	f100 0c10 	add.w	ip, r0, #16
   1eeec:	462f      	mov	r7, r5
   1eeee:	6818      	ldr	r0, [r3, #0]
   1eef0:	6859      	ldr	r1, [r3, #4]
   1eef2:	3308      	adds	r3, #8
   1eef4:	c703      	stmia	r7!, {r0, r1}
   1eef6:	4563      	cmp	r3, ip
   1eef8:	463d      	mov	r5, r7
   1eefa:	d1f7      	bne.n	1eeec <handle_ns_input+0x168>
   1eefc:	4645      	mov	r5, r8
   1eefe:	af10      	add	r7, sp, #64	; 0x40
   1ef00:	4613      	mov	r3, r2
   1ef02:	cb03      	ldmia	r3!, {r0, r1}
   1ef04:	42bb      	cmp	r3, r7
   1ef06:	6028      	str	r0, [r5, #0]
   1ef08:	6069      	str	r1, [r5, #4]
   1ef0a:	461a      	mov	r2, r3
   1ef0c:	f105 0508 	add.w	r5, r5, #8
   1ef10:	d1f6      	bne.n	1ef00 <handle_ns_input+0x17c>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1ef12:	2520      	movs	r5, #32
		na_src = &ip_hdr->src;
   1ef14:	4647      	mov	r7, r8
	if (src_lladdr.len) {
   1ef16:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1ef1a:	bb7b      	cbnz	r3, 1ef7c <handle_ns_input+0x1f8>
	if (!net_ipv6_send_na(net_pkt_iface(pkt), na_src,
   1ef1c:	9500      	str	r5, [sp, #0]
   1ef1e:	4633      	mov	r3, r6
   1ef20:	464a      	mov	r2, r9
   1ef22:	4639      	mov	r1, r7
   1ef24:	6a20      	ldr	r0, [r4, #32]
   1ef26:	f7ff fd24 	bl	1e972 <net_ipv6_send_na>
   1ef2a:	4605      	mov	r5, r0
   1ef2c:	2800      	cmp	r0, #0
   1ef2e:	f47f af42 	bne.w	1edb6 <handle_ns_input+0x32>
		net_pkt_unref(pkt);
   1ef32:	4620      	mov	r0, r4
   1ef34:	f7fe fe39 	bl	1dbaa <net_pkt_unref>
		return NET_OK;
   1ef38:	4628      	mov	r0, r5
   1ef3a:	e73d      	b.n	1edb8 <handle_ns_input+0x34>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1ef3c:	4640      	mov	r0, r8
   1ef3e:	f7f0 fdf1 	bl	fb24 <net_if_ipv6_addr_lookup>
	if (net_ipv6_is_my_addr(&ip_hdr->src)) {
   1ef42:	2800      	cmp	r0, #0
   1ef44:	f47f af37 	bne.w	1edb6 <handle_ns_input+0x32>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ef48:	f240 23ff 	movw	r3, #767	; 0x2ff
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ef4c:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ef4e:	429a      	cmp	r2, r3
   1ef50:	d109      	bne.n	1ef66 <handle_ns_input+0x1e2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ef52:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ef54:	b93b      	cbnz	r3, 1ef66 <handle_ns_input+0x1e2>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ef56:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ef58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ef5c:	d103      	bne.n	1ef66 <handle_ns_input+0x1e2>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1ef5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ef60:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ef62:	2bff      	cmp	r3, #255	; 0xff
   1ef64:	d007      	beq.n	1ef76 <handle_ns_input+0x1f2>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1ef66:	4649      	mov	r1, r9
   1ef68:	6a20      	ldr	r0, [r4, #32]
   1ef6a:	f7fe f8d4 	bl	1d116 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1ef6e:	2800      	cmp	r0, #0
   1ef70:	f43f af21 	beq.w	1edb6 <handle_ns_input+0x32>
		tgt = &ifaddr->address.in6_addr;
   1ef74:	1d06      	adds	r6, r0, #4
		na_dst = &ip_hdr->src;
   1ef76:	46c1      	mov	r9, r8
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   1ef78:	2560      	movs	r5, #96	; 0x60
   1ef7a:	e7cc      	b.n	1ef16 <handle_ns_input+0x192>
		if (!net_ipv6_nbr_add(net_pkt_iface(pkt),
   1ef7c:	2300      	movs	r3, #0
   1ef7e:	4641      	mov	r1, r8
   1ef80:	6a20      	ldr	r0, [r4, #32]
   1ef82:	9300      	str	r3, [sp, #0]
   1ef84:	aa0a      	add	r2, sp, #40	; 0x28
   1ef86:	f7ff febb 	bl	1ed00 <net_ipv6_nbr_add>
   1ef8a:	2800      	cmp	r0, #0
   1ef8c:	d1c6      	bne.n	1ef1c <handle_ns_input+0x198>
   1ef8e:	e712      	b.n	1edb6 <handle_ns_input+0x32>

0001ef90 <net_ipv6_start_dad>:
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   1ef90:	2301      	movs	r3, #1
{
   1ef92:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   1ef94:	9301      	str	r3, [sp, #4]
   1ef96:	2300      	movs	r3, #0
				&ifaddr->address.in6_addr, true);
   1ef98:	3104      	adds	r1, #4
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   1ef9a:	9100      	str	r1, [sp, #0]
   1ef9c:	461a      	mov	r2, r3
   1ef9e:	4619      	mov	r1, r3
   1efa0:	f7f1 fcfa 	bl	10998 <net_ipv6_send_ns>
}
   1efa4:	b003      	add	sp, #12
   1efa6:	f85d fb04 	ldr.w	pc, [sp], #4

0001efaa <net_ipv6_prepare_for_send>:
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1efaa:	2300      	movs	r3, #0
   1efac:	2228      	movs	r2, #40	; 0x28
{
   1efae:	b5f0      	push	{r4, r5, r6, r7, lr}
   1efb0:	b087      	sub	sp, #28
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   1efb2:	a904      	add	r1, sp, #16
{
   1efb4:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
   1efb6:	e9cd 3204 	strd	r3, r2, [sp, #16]
	struct net_if *iface = NULL;
   1efba:	9303      	str	r3, [sp, #12]
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
   1efbc:	f7ff f818 	bl	1dff0 <net_pkt_get_data>
	if (!ip_hdr) {
   1efc0:	4607      	mov	r7, r0
   1efc2:	b910      	cbnz	r0, 1efca <net_ipv6_prepare_for_send+0x20>
			return NET_DROP;
   1efc4:	2002      	movs	r0, #2
}
   1efc6:	b007      	add	sp, #28
   1efc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((net_pkt_lladdr_dst(pkt)->addr &&
   1efca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1efcc:	b10b      	cbz	r3, 1efd2 <net_ipv6_prepare_for_send+0x28>
		return NET_OK;
   1efce:	2000      	movs	r0, #0
   1efd0:	e7f9      	b.n	1efc6 <net_ipv6_prepare_for_send+0x1c>
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   1efd2:	7e03      	ldrb	r3, [r0, #24]
   1efd4:	2bff      	cmp	r3, #255	; 0xff
   1efd6:	d0fa      	beq.n	1efce <net_ipv6_prepare_for_send+0x24>
	    net_if_flag_is_set(net_pkt_iface(pkt),
   1efd8:	6a23      	ldr	r3, [r4, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1efda:	681b      	ldr	r3, [r3, #0]
   1efdc:	330c      	adds	r3, #12
   1efde:	e8d3 3faf 	lda	r3, [r3]
	    net_ipv6_is_addr_mcast(&ip_hdr->dst) ||
   1efe2:	079b      	lsls	r3, r3, #30
   1efe4:	d4f3      	bmi.n	1efce <net_ipv6_prepare_for_send+0x24>
	if (net_if_ipv6_addr_onlink(&iface, &ip_hdr->dst)) {
   1efe6:	f100 0518 	add.w	r5, r0, #24
   1efea:	4629      	mov	r1, r5
   1efec:	a803      	add	r0, sp, #12
   1efee:	f7f0 ff79 	bl	fee4 <net_if_ipv6_addr_onlink>
   1eff2:	2800      	cmp	r0, #0
   1eff4:	d03d      	beq.n	1f072 <net_ipv6_prepare_for_send+0xc8>
		net_pkt_set_iface(pkt, iface);
   1eff6:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1eff8:	6223      	str	r3, [r4, #32]
	if (iface) {
   1effa:	b13b      	cbz	r3, 1f00c <net_ipv6_prepare_for_send+0x62>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1effc:	681a      	ldr	r2, [r3, #0]
   1effe:	7d52      	ldrb	r2, [r2, #21]
   1f000:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1f004:	681b      	ldr	r3, [r3, #0]
   1f006:	7d5b      	ldrb	r3, [r3, #21]
   1f008:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (!iface) {
   1f00c:	9b03      	ldr	r3, [sp, #12]
   1f00e:	b983      	cbnz	r3, 1f032 <net_ipv6_prepare_for_send+0x88>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   1f010:	4629      	mov	r1, r5
   1f012:	a803      	add	r0, sp, #12
   1f014:	f7f0 ff66 	bl	fee4 <net_if_ipv6_addr_onlink>
   1f018:	2800      	cmp	r0, #0
   1f01a:	d040      	beq.n	1f09e <net_ipv6_prepare_for_send+0xf4>
			net_pkt_set_iface(pkt, iface);
   1f01c:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1f01e:	6223      	str	r3, [r4, #32]
	if (iface) {
   1f020:	b13b      	cbz	r3, 1f032 <net_ipv6_prepare_for_send+0x88>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1f022:	681a      	ldr	r2, [r3, #0]
   1f024:	7d52      	ldrb	r2, [r2, #21]
   1f026:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1f02a:	681b      	ldr	r3, [r3, #0]
   1f02c:	7d5b      	ldrb	r3, [r3, #21]
   1f02e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   1f032:	4629      	mov	r1, r5
   1f034:	9803      	ldr	r0, [sp, #12]
   1f036:	f7f1 fb47 	bl	106c8 <nbr_lookup.isra.0>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1f03a:	4606      	mov	r6, r0
   1f03c:	b390      	cbz	r0, 1f0a4 <net_ipv6_prepare_for_send+0xfa>
   1f03e:	7840      	ldrb	r0, [r0, #1]
   1f040:	28ff      	cmp	r0, #255	; 0xff
   1f042:	d02f      	beq.n	1f0a4 <net_ipv6_prepare_for_send+0xfa>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   1f044:	f7f1 fb38 	bl	106b8 <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   1f048:	1c83      	adds	r3, r0, #2
   1f04a:	6323      	str	r3, [r4, #48]	; 0x30
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   1f04c:	7843      	ldrb	r3, [r0, #1]
   1f04e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   1f052:	68f3      	ldr	r3, [r6, #12]
   1f054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1f058:	2b02      	cmp	r3, #2
   1f05a:	d1b8      	bne.n	1efce <net_ipv6_prepare_for_send+0x24>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   1f05c:	4630      	mov	r0, r6
   1f05e:	2103      	movs	r1, #3
   1f060:	f7f1 fba2 	bl	107a8 <ipv6_nbr_set_state>
			ipv6_nd_restart_reachable_timer(nbr,
   1f064:	f241 3288 	movw	r2, #5000	; 0x1388
   1f068:	2300      	movs	r3, #0
   1f06a:	4630      	mov	r0, r6
   1f06c:	f7f1 fb62 	bl	10734 <ipv6_nd_restart_reachable_timer>
   1f070:	e7ad      	b.n	1efce <net_ipv6_prepare_for_send+0x24>
	route = net_route_lookup(iface, dst);
   1f072:	4629      	mov	r1, r5
   1f074:	f7f2 f84c 	bl	11110 <net_route_lookup>
	if (route) {
   1f078:	4606      	mov	r6, r0
   1f07a:	b140      	cbz	r0, 1f08e <net_ipv6_prepare_for_send+0xe4>
		nexthop = net_route_get_nexthop(route);
   1f07c:	f000 fa55 	bl	1f52a <net_route_get_nexthop>
		if (!nexthop) {
   1f080:	4605      	mov	r5, r0
   1f082:	2800      	cmp	r0, #0
   1f084:	d1c2      	bne.n	1f00c <net_ipv6_prepare_for_send+0x62>
			net_route_del(route);
   1f086:	4630      	mov	r0, r6
   1f088:	f000 fa32 	bl	1f4f0 <net_route_del>
   1f08c:	e79a      	b.n	1efc4 <net_ipv6_prepare_for_send+0x1a>
		router = net_if_ipv6_router_find_default(NULL, dst);
   1f08e:	4629      	mov	r1, r5
   1f090:	f7f0 ff86 	bl	ffa0 <net_if_ipv6_router_find_default>
		if (!router) {
   1f094:	b188      	cbz	r0, 1f0ba <net_ipv6_prepare_for_send+0x110>
		if (!nexthop) {
   1f096:	f110 0508 	adds.w	r5, r0, #8
   1f09a:	d1b7      	bne.n	1f00c <net_ipv6_prepare_for_send+0x62>
   1f09c:	e792      	b.n	1efc4 <net_ipv6_prepare_for_send+0x1a>
			iface = net_pkt_iface(pkt);
   1f09e:	6a23      	ldr	r3, [r4, #32]
   1f0a0:	9303      	str	r3, [sp, #12]
   1f0a2:	e7c6      	b.n	1f032 <net_ipv6_prepare_for_send+0x88>
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   1f0a4:	2300      	movs	r3, #0
   1f0a6:	e9cd 5300 	strd	r5, r3, [sp]
   1f0aa:	4621      	mov	r1, r4
   1f0ac:	6a20      	ldr	r0, [r4, #32]
   1f0ae:	f107 0208 	add.w	r2, r7, #8
   1f0b2:	f7f1 fc71 	bl	10998 <net_ipv6_send_ns>
	return NET_CONTINUE;
   1f0b6:	2001      	movs	r0, #1
   1f0b8:	e785      	b.n	1efc6 <net_ipv6_prepare_for_send+0x1c>
		if (!nexthop) {
   1f0ba:	2d00      	cmp	r5, #0
   1f0bc:	d1b9      	bne.n	1f032 <net_ipv6_prepare_for_send+0x88>
   1f0be:	e781      	b.n	1efc4 <net_ipv6_prepare_for_send+0x1a>

0001f0c0 <net_ipv6_send_rs>:
{
   1f0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f0c2:	4607      	mov	r7, r0
   1f0c4:	b087      	sub	sp, #28
	net_ipv6_addr_create_ll_allnodes_mcast(&dst);
   1f0c6:	a802      	add	r0, sp, #8
   1f0c8:	f7ff fbf7 	bl	1e8ba <net_ipv6_addr_create_ll_allnodes_mcast>
	src = net_if_ipv6_select_src_addr(iface, &dst);
   1f0cc:	4638      	mov	r0, r7
   1f0ce:	a902      	add	r1, sp, #8
   1f0d0:	f7f0 ffd0 	bl	10074 <net_if_ipv6_select_src_addr>
   1f0d4:	4606      	mov	r6, r0
	if (!net_ipv6_is_addr_unspecified(src)) {
   1f0d6:	f7ff fb50 	bl	1e77a <net_ipv6_is_addr_unspecified>
   1f0da:	bb18      	cbnz	r0, 1f124 <net_ipv6_send_rs+0x64>
	u8_t total_len = net_if_get_link_addr(iface)->len +
   1f0dc:	683b      	ldr	r3, [r7, #0]
	return ROUND_UP(total_len, 8U);
   1f0de:	7d1d      	ldrb	r5, [r3, #20]
   1f0e0:	3509      	adds	r5, #9
   1f0e2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
   1f0e6:	f640 42cd 	movw	r2, #3277	; 0xccd
   1f0ea:	2300      	movs	r3, #0
   1f0ec:	4638      	mov	r0, r7
   1f0ee:	e9cd 2300 	strd	r2, r3, [sp]
   1f0f2:	1d29      	adds	r1, r5, #4
   1f0f4:	233a      	movs	r3, #58	; 0x3a
   1f0f6:	2202      	movs	r2, #2
   1f0f8:	f7f1 f9c0 	bl	1047c <net_pkt_alloc_with_buffer>
	if (!pkt) {
   1f0fc:	4604      	mov	r4, r0
   1f0fe:	2800      	cmp	r0, #0
   1f100:	d03a      	beq.n	1f178 <net_ipv6_send_rs+0xb8>
	pkt->ipv6_hop_limit = hop_limit;
   1f102:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, &dst) ||
   1f104:	aa02      	add	r2, sp, #8
   1f106:	4631      	mov	r1, r6
   1f108:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   1f10c:	f7ff f907 	bl	1e31e <net_ipv6_create>
   1f110:	4602      	mov	r2, r0
   1f112:	b148      	cbz	r0, 1f128 <net_ipv6_send_rs+0x68>
	int ret = -ENOBUFS;
   1f114:	f06f 0636 	mvn.w	r6, #54	; 0x36
	net_pkt_unref(pkt);
   1f118:	4620      	mov	r0, r4
   1f11a:	f7fe fd46 	bl	1dbaa <net_pkt_unref>
}
   1f11e:	4630      	mov	r0, r6
   1f120:	b007      	add	sp, #28
   1f122:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8_t llao_len = 0U;
   1f124:	2500      	movs	r5, #0
   1f126:	e7de      	b.n	1f0e6 <net_ipv6_send_rs+0x26>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
   1f128:	2185      	movs	r1, #133	; 0x85
   1f12a:	4620      	mov	r0, r4
   1f12c:	f7fe ffb3 	bl	1e096 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &dst) ||
   1f130:	4601      	mov	r1, r0
   1f132:	2800      	cmp	r0, #0
   1f134:	d1ee      	bne.n	1f114 <net_ipv6_send_rs+0x54>
	    net_pkt_memset(pkt, 0, sizeof(struct net_icmpv6_rs_hdr))) {
   1f136:	2204      	movs	r2, #4
   1f138:	4620      	mov	r0, r4
   1f13a:	f7fe fe17 	bl	1dd6c <net_pkt_memset>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
   1f13e:	4606      	mov	r6, r0
   1f140:	2800      	cmp	r0, #0
   1f142:	d1e7      	bne.n	1f114 <net_ipv6_send_rs+0x54>
	if (llao_len > 0) {
   1f144:	b975      	cbnz	r5, 1f164 <net_ipv6_send_rs+0xa4>
	net_pkt_cursor_init(pkt);
   1f146:	4620      	mov	r0, r4
   1f148:	f7fe fd7b 	bl	1dc42 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   1f14c:	213a      	movs	r1, #58	; 0x3a
   1f14e:	4620      	mov	r0, r4
   1f150:	f7ff f948 	bl	1e3e4 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   1f154:	4620      	mov	r0, r4
   1f156:	f7fd feb5 	bl	1cec4 <net_send_data>
   1f15a:	2800      	cmp	r0, #0
   1f15c:	dadf      	bge.n	1f11e <net_ipv6_send_rs+0x5e>
		ret = -EINVAL;
   1f15e:	f06f 0615 	mvn.w	r6, #21
   1f162:	e7d9      	b.n	1f118 <net_ipv6_send_rs+0x58>
	return &iface->if_dev->link_addr;
   1f164:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
   1f166:	2301      	movs	r3, #1
   1f168:	462a      	mov	r2, r5
   1f16a:	4620      	mov	r0, r4
   1f16c:	3110      	adds	r1, #16
   1f16e:	f7ff fb5f 	bl	1e830 <set_llao>
   1f172:	2800      	cmp	r0, #0
   1f174:	d1e7      	bne.n	1f146 <net_ipv6_send_rs+0x86>
   1f176:	e7cd      	b.n	1f114 <net_ipv6_send_rs+0x54>
		return -ENOMEM;
   1f178:	f06f 060b 	mvn.w	r6, #11
   1f17c:	e7cf      	b.n	1f11e <net_ipv6_send_rs+0x5e>

0001f17e <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   1f17e:	f7ff bf9f 	b.w	1f0c0 <net_ipv6_send_rs>

0001f182 <net_pkt_write_be16>:
{
   1f182:	b507      	push	{r0, r1, r2, lr}
	u16_t data_be16 = htons(data);
   1f184:	ba49      	rev16	r1, r1
   1f186:	f8ad 1006 	strh.w	r1, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(u16_t));
   1f18a:	2202      	movs	r2, #2
   1f18c:	f10d 0106 	add.w	r1, sp, #6
   1f190:	f7fe ff12 	bl	1dfb8 <net_pkt_write>
}
   1f194:	b003      	add	sp, #12
   1f196:	f85d fb04 	ldr.w	pc, [sp], #4

0001f19a <mld_create>:
{
   1f19a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f19e:	461f      	mov	r7, r3
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   1f1a0:	2314      	movs	r3, #20
{
   1f1a2:	b08d      	sub	sp, #52	; 0x34
   1f1a4:	460d      	mov	r5, r1
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   1f1a6:	f10d 081c 	add.w	r8, sp, #28
				net_pkt_get_data(pkt, &mld_access);
   1f1aa:	a901      	add	r1, sp, #4
{
   1f1ac:	4606      	mov	r6, r0
   1f1ae:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
   1f1b0:	f8cd 8004 	str.w	r8, [sp, #4]
   1f1b4:	9302      	str	r3, [sp, #8]
				net_pkt_get_data(pkt, &mld_access);
   1f1b6:	f7fe ff1b 	bl	1dff0 <net_pkt_get_data>
	if (!mld) {
   1f1ba:	4604      	mov	r4, r0
   1f1bc:	b368      	cbz	r0, 1f21a <mld_create+0x80>
	mld->aux_data_len = 0U;
   1f1be:	2300      	movs	r3, #0
	net_ipaddr_copy(&mld->mcast_address, addr);
   1f1c0:	462a      	mov	r2, r5
	mld->aux_data_len = 0U;
   1f1c2:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&mld->mcast_address, addr);
   1f1c4:	ad03      	add	r5, sp, #12
	mld->num_sources = htons(num_sources);
   1f1c6:	023b      	lsls	r3, r7, #8
   1f1c8:	8043      	strh	r3, [r0, #2]
   1f1ca:	462b      	mov	r3, r5
	mld->record_type = record_type;
   1f1cc:	f880 9000 	strb.w	r9, [r0]
	net_ipaddr_copy(&mld->mcast_address, addr);
   1f1d0:	f102 0e10 	add.w	lr, r2, #16
   1f1d4:	46ac      	mov	ip, r5
   1f1d6:	6810      	ldr	r0, [r2, #0]
   1f1d8:	6851      	ldr	r1, [r2, #4]
   1f1da:	3208      	adds	r2, #8
   1f1dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1f1e0:	4572      	cmp	r2, lr
   1f1e2:	4665      	mov	r5, ip
   1f1e4:	d1f6      	bne.n	1f1d4 <mld_create+0x3a>
   1f1e6:	461a      	mov	r2, r3
   1f1e8:	3404      	adds	r4, #4
   1f1ea:	4613      	mov	r3, r2
   1f1ec:	cb03      	ldmia	r3!, {r0, r1}
   1f1ee:	4543      	cmp	r3, r8
   1f1f0:	6020      	str	r0, [r4, #0]
   1f1f2:	6061      	str	r1, [r4, #4]
   1f1f4:	461a      	mov	r2, r3
   1f1f6:	f104 0408 	add.w	r4, r4, #8
   1f1fa:	d1f6      	bne.n	1f1ea <mld_create+0x50>
	if (net_pkt_set_data(pkt, &mld_access)) {
   1f1fc:	4630      	mov	r0, r6
   1f1fe:	a901      	add	r1, sp, #4
   1f200:	f7fe ff17 	bl	1e032 <net_pkt_set_data>
   1f204:	4604      	mov	r4, r0
   1f206:	b940      	cbnz	r0, 1f21a <mld_create+0x80>
	if (num_sources > 0) {
   1f208:	b14f      	cbz	r7, 1f21e <mld_create+0x84>
				  net_ipv6_unspecified_address()->s6_addr,
   1f20a:	f7f1 f86d 	bl	102e8 <net_ipv6_unspecified_address>
		if (net_pkt_write(pkt,
   1f20e:	2210      	movs	r2, #16
				  net_ipv6_unspecified_address()->s6_addr,
   1f210:	4601      	mov	r1, r0
		if (net_pkt_write(pkt,
   1f212:	4630      	mov	r0, r6
   1f214:	f7fe fed0 	bl	1dfb8 <net_pkt_write>
   1f218:	b108      	cbz	r0, 1f21e <mld_create+0x84>
			return -ENOBUFS;
   1f21a:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
   1f21e:	4620      	mov	r0, r4
   1f220:	b00d      	add	sp, #52	; 0x34
   1f222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001f226 <mld_send>:
{
   1f226:	b510      	push	{r4, lr}
   1f228:	4604      	mov	r4, r0
	net_pkt_cursor_init(pkt);
   1f22a:	f7fe fd0a 	bl	1dc42 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
   1f22e:	213a      	movs	r1, #58	; 0x3a
   1f230:	4620      	mov	r0, r4
   1f232:	f7ff f8d7 	bl	1e3e4 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
   1f236:	4620      	mov	r0, r4
   1f238:	f7fd fe44 	bl	1cec4 <net_send_data>
   1f23c:	2800      	cmp	r0, #0
   1f23e:	da05      	bge.n	1f24c <mld_send+0x26>
		net_pkt_unref(pkt);
   1f240:	4620      	mov	r0, r4
   1f242:	f7fe fcb2 	bl	1dbaa <net_pkt_unref>
		return -1;
   1f246:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f24a:	bd10      	pop	{r4, pc}
	return 0;
   1f24c:	2000      	movs	r0, #0
   1f24e:	e7fc      	b.n	1f24a <mld_send+0x24>

0001f250 <mld_create_packet>:
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f250:	f240 23ff 	movw	r3, #767	; 0x2ff
{
   1f254:	b570      	push	{r4, r5, r6, lr}
   1f256:	b086      	sub	sp, #24
   1f258:	4604      	mov	r4, r0
   1f25a:	460d      	mov	r5, r1
   1f25c:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1f260:	2300      	movs	r3, #0
   1f262:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1f266:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1f26a:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1f26e:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1f272:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1f276:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f27a:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1f27e:	f8ad 3016 	strh.w	r3, [sp, #22]
	pkt->ipv6_hop_limit = hop_limit;
   1f282:	2601      	movs	r6, #1
	if (net_ipv6_create(pkt, net_if_ipv6_select_src_addr(
   1f284:	a902      	add	r1, sp, #8
   1f286:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
   1f28a:	6a00      	ldr	r0, [r0, #32]
   1f28c:	f7f0 fef2 	bl	10074 <net_if_ipv6_select_src_addr>
   1f290:	aa02      	add	r2, sp, #8
   1f292:	4601      	mov	r1, r0
   1f294:	4620      	mov	r0, r4
   1f296:	f7ff f842 	bl	1e31e <net_ipv6_create>
   1f29a:	b118      	cbz	r0, 1f2a4 <mld_create_packet+0x54>
		return -ENOBUFS;
   1f29c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1f2a0:	b006      	add	sp, #24
   1f2a2:	bd70      	pop	{r4, r5, r6, pc}
	if (net_pkt_write_u8(pkt, IPPROTO_ICMPV6) ||
   1f2a4:	233a      	movs	r3, #58	; 0x3a
	return net_pkt_write(pkt, &data, sizeof(u8_t));
   1f2a6:	4632      	mov	r2, r6
   1f2a8:	4620      	mov	r0, r4
   1f2aa:	f10d 0107 	add.w	r1, sp, #7
   1f2ae:	f88d 3007 	strb.w	r3, [sp, #7]
   1f2b2:	f7fe fe81 	bl	1dfb8 <net_pkt_write>
   1f2b6:	2800      	cmp	r0, #0
   1f2b8:	d1f0      	bne.n	1f29c <mld_create_packet+0x4c>
   1f2ba:	f88d 0007 	strb.w	r0, [sp, #7]
   1f2be:	4632      	mov	r2, r6
   1f2c0:	4620      	mov	r0, r4
   1f2c2:	f10d 0107 	add.w	r1, sp, #7
   1f2c6:	f7fe fe77 	bl	1dfb8 <net_pkt_write>
   1f2ca:	2800      	cmp	r0, #0
   1f2cc:	d1e6      	bne.n	1f29c <mld_create_packet+0x4c>
	if (net_pkt_write_be16(pkt, 0x0502) ||
   1f2ce:	f240 5102 	movw	r1, #1282	; 0x502
   1f2d2:	4620      	mov	r0, r4
   1f2d4:	f7ff ff55 	bl	1f182 <net_pkt_write_be16>
   1f2d8:	4601      	mov	r1, r0
   1f2da:	2800      	cmp	r0, #0
   1f2dc:	d1de      	bne.n	1f29c <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
   1f2de:	4620      	mov	r0, r4
   1f2e0:	f7ff ff4f 	bl	1f182 <net_pkt_write_be16>
	if (net_pkt_write_be16(pkt, 0x0502) ||
   1f2e4:	4601      	mov	r1, r0
   1f2e6:	2800      	cmp	r0, #0
   1f2e8:	d1d8      	bne.n	1f29c <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0)) {
   1f2ea:	4620      	mov	r0, r4
   1f2ec:	f7ff ff49 	bl	1f182 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
   1f2f0:	4602      	mov	r2, r0
   1f2f2:	2800      	cmp	r0, #0
   1f2f4:	d1d2      	bne.n	1f29c <mld_create_packet+0x4c>
	pkt->ipv6_ext_len = len;
   1f2f6:	2308      	movs	r3, #8
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
   1f2f8:	218f      	movs	r1, #143	; 0x8f
   1f2fa:	4620      	mov	r0, r4
   1f2fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
   1f2fe:	f7fe feca 	bl	1e096 <net_icmpv6_create>
   1f302:	4601      	mov	r1, r0
   1f304:	2800      	cmp	r0, #0
   1f306:	d1c9      	bne.n	1f29c <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
   1f308:	4620      	mov	r0, r4
   1f30a:	f7ff ff3a 	bl	1f182 <net_pkt_write_be16>
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
   1f30e:	2800      	cmp	r0, #0
   1f310:	d1c4      	bne.n	1f29c <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, count)) {
   1f312:	4629      	mov	r1, r5
   1f314:	4620      	mov	r0, r4
   1f316:	f7ff ff34 	bl	1f182 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
   1f31a:	2800      	cmp	r0, #0
   1f31c:	d1be      	bne.n	1f29c <mld_create_packet+0x4c>
	pkt->ipv6_next_hdr = next_hdr;
   1f31e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
	return 0;
   1f322:	e7bd      	b.n	1f2a0 <mld_create_packet+0x50>

0001f324 <mld_send_generic>:
{
   1f324:	b573      	push	{r0, r1, r4, r5, r6, lr}
					PKT_WAIT_TIME);
   1f326:	2300      	movs	r3, #0
{
   1f328:	4616      	mov	r6, r2
					PKT_WAIT_TIME);
   1f32a:	f240 6267 	movw	r2, #1639	; 0x667
{
   1f32e:	460c      	mov	r4, r1
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   1f330:	e9cd 2300 	strd	r2, r3, [sp]
   1f334:	2130      	movs	r1, #48	; 0x30
   1f336:	233a      	movs	r3, #58	; 0x3a
   1f338:	2202      	movs	r2, #2
   1f33a:	f7f1 f89f 	bl	1047c <net_pkt_alloc_with_buffer>
	if (!pkt) {
   1f33e:	4605      	mov	r5, r0
   1f340:	b1d0      	cbz	r0, 1f378 <mld_send_generic+0x54>
	if (mld_create_packet(pkt, 1) ||
   1f342:	2101      	movs	r1, #1
   1f344:	f7ff ff84 	bl	1f250 <mld_create_packet>
   1f348:	b128      	cbz	r0, 1f356 <mld_send_generic+0x32>
		ret = -ENOBUFS;
   1f34a:	f06f 0436 	mvn.w	r4, #54	; 0x36
	net_pkt_unref(pkt);
   1f34e:	4628      	mov	r0, r5
   1f350:	f7fe fc2b 	bl	1dbaa <net_pkt_unref>
	return ret;
   1f354:	e00d      	b.n	1f372 <mld_send_generic+0x4e>
	    mld_create(pkt, addr, mode, 1)) {
   1f356:	2301      	movs	r3, #1
   1f358:	4632      	mov	r2, r6
   1f35a:	4621      	mov	r1, r4
   1f35c:	4628      	mov	r0, r5
   1f35e:	f7ff ff1c 	bl	1f19a <mld_create>
	if (mld_create_packet(pkt, 1) ||
   1f362:	2800      	cmp	r0, #0
   1f364:	d1f1      	bne.n	1f34a <mld_send_generic+0x26>
	ret = mld_send(pkt);
   1f366:	4628      	mov	r0, r5
   1f368:	f7ff ff5d 	bl	1f226 <mld_send>
	if (ret) {
   1f36c:	4604      	mov	r4, r0
   1f36e:	2800      	cmp	r0, #0
   1f370:	d1ed      	bne.n	1f34e <mld_send_generic+0x2a>
}
   1f372:	4620      	mov	r0, r4
   1f374:	b002      	add	sp, #8
   1f376:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1f378:	f06f 040b 	mvn.w	r4, #11
   1f37c:	e7f9      	b.n	1f372 <mld_send_generic+0x4e>

0001f37e <handle_mld_query>:
{
   1f37e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
   1f382:	2600      	movs	r6, #0
   1f384:	2318      	movs	r3, #24
{
   1f386:	4605      	mov	r5, r0
   1f388:	4688      	mov	r8, r1
   1f38a:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
   1f38c:	e9cd 6302 	strd	r6, r3, [sp, #8]
	u16_t length = net_pkt_get_len(pkt);
   1f390:	6904      	ldr	r4, [r0, #16]
	while (buf) {
   1f392:	b964      	cbnz	r4, 1f3ae <handle_mld_query+0x30>
				net_pkt_get_data(pkt, &mld_access);
   1f394:	4628      	mov	r0, r5
   1f396:	a902      	add	r1, sp, #8
   1f398:	f7fe fe2a 	bl	1dff0 <net_pkt_get_data>
	u16_t length = net_pkt_get_len(pkt);
   1f39c:	b2b6      	uxth	r6, r6
	if (!mld_query) {
   1f39e:	4681      	mov	r9, r0
   1f3a0:	b948      	cbnz	r0, 1f3b6 <handle_mld_query+0x38>
	return NET_DROP;
   1f3a2:	f04f 0802 	mov.w	r8, #2
}
   1f3a6:	4640      	mov	r0, r8
   1f3a8:	b004      	add	sp, #16
   1f3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   1f3ae:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
   1f3b0:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   1f3b2:	441e      	add	r6, r3
		buf = buf->frags;
   1f3b4:	e7ed      	b.n	1f392 <handle_mld_query+0x14>
	return net_pkt_skip(pkt, access->size);
   1f3b6:	4628      	mov	r0, r5
   1f3b8:	9903      	ldr	r1, [sp, #12]
   1f3ba:	f7fe fccc 	bl	1dd56 <net_pkt_skip>
	mld_query->num_sources = ntohs(mld_query->num_sources);
   1f3be:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   1f3c2:	0213      	lsls	r3, r2, #8
   1f3c4:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f3c8:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
	mld_query->num_sources = ntohs(mld_query->num_sources);
   1f3ca:	f8a9 2016 	strh.w	r2, [r9, #22]
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f3ce:	3344      	adds	r3, #68	; 0x44
   1f3d0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1f3d4:	b29b      	uxth	r3, r3
	if (length < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f3d6:	42b3      	cmp	r3, r6
   1f3d8:	d8e3      	bhi.n	1f3a2 <handle_mld_query+0x24>
   1f3da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1f3de:	d8e0      	bhi.n	1f3a2 <handle_mld_query+0x24>
   1f3e0:	f898 3007 	ldrb.w	r3, [r8, #7]
   1f3e4:	2b01      	cmp	r3, #1
   1f3e6:	d1dc      	bne.n	1f3a2 <handle_mld_query+0x24>
	    ip_hdr->hop_limit != 1U || icmp_hdr->code != 0U) {
   1f3e8:	f897 8001 	ldrb.w	r8, [r7, #1]
   1f3ec:	f1b8 0f00 	cmp.w	r8, #0
   1f3f0:	d1d7      	bne.n	1f3a2 <handle_mld_query+0x24>
	if (!net_ipv6_addr_cmp(&mld_query->mcast_address,
   1f3f2:	f7f0 ff79 	bl	102e8 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f3f6:	2210      	movs	r2, #16
   1f3f8:	4601      	mov	r1, r0
   1f3fa:	f109 0004 	add.w	r0, r9, #4
   1f3fe:	f7fd fc1a 	bl	1cc36 <memcmp>
   1f402:	4606      	mov	r6, r0
   1f404:	2800      	cmp	r0, #0
   1f406:	d1cc      	bne.n	1f3a2 <handle_mld_query+0x24>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   1f408:	2218      	movs	r2, #24
	send_mld_report(net_pkt_iface(pkt));
   1f40a:	6a28      	ldr	r0, [r5, #32]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
   1f40c:	f8d0 9004 	ldr.w	r9, [r0, #4]
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   1f410:	fb02 9304 	mla	r3, r2, r4, r9
   1f414:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1f418:	07df      	lsls	r7, r3, #31
   1f41a:	d502      	bpl.n	1f422 <handle_mld_query+0xa4>
   1f41c:	0799      	lsls	r1, r3, #30
		count++;
   1f41e:	bf48      	it	mi
   1f420:	3601      	addmi	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f422:	3401      	adds	r4, #1
   1f424:	2c03      	cmp	r4, #3
   1f426:	d1f3      	bne.n	1f410 <handle_mld_query+0x92>
					count * MLDv2_MCAST_RECORD_LEN,
   1f428:	2114      	movs	r1, #20
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   1f42a:	f240 6267 	movw	r2, #1639	; 0x667
   1f42e:	2300      	movs	r3, #0
					count * MLDv2_MCAST_RECORD_LEN,
   1f430:	4371      	muls	r1, r6
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
   1f432:	e9cd 2300 	strd	r2, r3, [sp]
   1f436:	310c      	adds	r1, #12
   1f438:	233a      	movs	r3, #58	; 0x3a
   1f43a:	2202      	movs	r2, #2
   1f43c:	f7f1 f81e 	bl	1047c <net_pkt_alloc_with_buffer>
	if (!pkt) {
   1f440:	4607      	mov	r7, r0
   1f442:	b328      	cbz	r0, 1f490 <handle_mld_query+0x112>
	if (mld_create_packet(pkt, count)) {
   1f444:	b2b1      	uxth	r1, r6
   1f446:	f7ff ff03 	bl	1f250 <mld_create_packet>
   1f44a:	4604      	mov	r4, r0
   1f44c:	b9e8      	cbnz	r0, 1f48a <handle_mld_query+0x10c>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   1f44e:	f04f 0a18 	mov.w	sl, #24
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
   1f452:	f109 0664 	add.w	r6, r9, #100	; 0x64
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   1f456:	fb0a f104 	mul.w	r1, sl, r4
   1f45a:	eb09 0301 	add.w	r3, r9, r1
   1f45e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1f462:	07da      	lsls	r2, r3, #31
   1f464:	d407      	bmi.n	1f476 <handle_mld_query+0xf8>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f466:	3401      	adds	r4, #1
   1f468:	2c03      	cmp	r4, #3
   1f46a:	d1f4      	bne.n	1f456 <handle_mld_query+0xd8>
	if (!mld_send(pkt)) {
   1f46c:	4638      	mov	r0, r7
   1f46e:	f7ff feda 	bl	1f226 <mld_send>
   1f472:	b950      	cbnz	r0, 1f48a <handle_mld_query+0x10c>
   1f474:	e00c      	b.n	1f490 <handle_mld_query+0x112>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
   1f476:	079b      	lsls	r3, r3, #30
   1f478:	d5f5      	bpl.n	1f466 <handle_mld_query+0xe8>
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
   1f47a:	2300      	movs	r3, #0
   1f47c:	2202      	movs	r2, #2
   1f47e:	4638      	mov	r0, r7
   1f480:	4431      	add	r1, r6
   1f482:	f7ff fe8a 	bl	1f19a <mld_create>
   1f486:	2800      	cmp	r0, #0
   1f488:	d1ed      	bne.n	1f466 <handle_mld_query+0xe8>
	net_pkt_unref(pkt);
   1f48a:	4638      	mov	r0, r7
   1f48c:	f7fe fb8d 	bl	1dbaa <net_pkt_unref>
	net_pkt_unref(pkt);
   1f490:	4628      	mov	r0, r5
   1f492:	f7fe fb8a 	bl	1dbaa <net_pkt_unref>
	return NET_OK;
   1f496:	e786      	b.n	1f3a6 <handle_mld_query+0x28>

0001f498 <net_ipv6_mld_join>:
{
   1f498:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f49a:	460e      	mov	r6, r1
   1f49c:	9001      	str	r0, [sp, #4]
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   1f49e:	a901      	add	r1, sp, #4
   1f4a0:	4630      	mov	r0, r6
   1f4a2:	f7f0 fcc9 	bl	fe38 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   1f4a6:	4604      	mov	r4, r0
   1f4a8:	b128      	cbz	r0, 1f4b6 <net_ipv6_mld_join+0x1e>
	return addr->is_joined;
   1f4aa:	7d03      	ldrb	r3, [r0, #20]
   1f4ac:	079b      	lsls	r3, r3, #30
   1f4ae:	d508      	bpl.n	1f4c2 <net_ipv6_mld_join+0x2a>
		return -EALREADY;
   1f4b0:	f06f 0544 	mvn.w	r5, #68	; 0x44
   1f4b4:	e015      	b.n	1f4e2 <net_ipv6_mld_join+0x4a>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   1f4b6:	4631      	mov	r1, r6
   1f4b8:	9801      	ldr	r0, [sp, #4]
   1f4ba:	f7fd ffa0 	bl	1d3fe <net_if_ipv6_maddr_add>
		if (!maddr) {
   1f4be:	4604      	mov	r4, r0
   1f4c0:	b190      	cbz	r0, 1f4e8 <net_ipv6_mld_join+0x50>
	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   1f4c2:	2202      	movs	r2, #2
   1f4c4:	4631      	mov	r1, r6
   1f4c6:	9801      	ldr	r0, [sp, #4]
   1f4c8:	f7ff ff2c 	bl	1f324 <mld_send_generic>
	if (ret < 0) {
   1f4cc:	1e05      	subs	r5, r0, #0
   1f4ce:	db08      	blt.n	1f4e2 <net_ipv6_mld_join+0x4a>
	addr->is_joined = true;
   1f4d0:	7d23      	ldrb	r3, [r4, #20]
	net_if_mcast_monitor(iface, addr, true);
   1f4d2:	2201      	movs	r2, #1
   1f4d4:	f043 0302 	orr.w	r3, r3, #2
   1f4d8:	4631      	mov	r1, r6
   1f4da:	9801      	ldr	r0, [sp, #4]
   1f4dc:	7523      	strb	r3, [r4, #20]
   1f4de:	f7f0 fce9 	bl	feb4 <net_if_mcast_monitor>
}
   1f4e2:	4628      	mov	r0, r5
   1f4e4:	b002      	add	sp, #8
   1f4e6:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1f4e8:	f06f 050b 	mvn.w	r5, #11
   1f4ec:	e7f9      	b.n	1f4e2 <net_ipv6_mld_join+0x4a>

0001f4ee <net_route_entry_remove>:
   1f4ee:	4770      	bx	lr

0001f4f0 <net_route_del>:
{
   1f4f0:	b538      	push	{r3, r4, r5, lr}
	if (!route) {
   1f4f2:	4604      	mov	r4, r0
   1f4f4:	b198      	cbz	r0, 1f51e <net_route_del+0x2e>
	sys_slist_find_and_remove(&routes, &route->node);
   1f4f6:	f7f1 fdd7 	bl	110a8 <sys_slist_find_and_remove.constprop.0>
	nbr = net_route_get_nbr(route);
   1f4fa:	4620      	mov	r0, r4
   1f4fc:	f7f1 fdf2 	bl	110e4 <net_route_get_nbr>
	if (!nbr) {
   1f500:	4605      	mov	r5, r0
   1f502:	b178      	cbz	r0, 1f524 <net_route_del+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1f504:	6864      	ldr	r4, [r4, #4]
   1f506:	b924      	cbnz	r4, 1f512 <net_route_del+0x22>
	net_nbr_unref(nbr);
   1f508:	4628      	mov	r0, r5
   1f50a:	f7fe fed8 	bl	1e2be <net_nbr_unref>
	return 0;
   1f50e:	2000      	movs	r0, #0
}
   1f510:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
   1f512:	6860      	ldr	r0, [r4, #4]
   1f514:	b108      	cbz	r0, 1f51a <net_route_del+0x2a>
	net_nbr_unref(nbr);
   1f516:	f7fe fed2 	bl	1e2be <net_nbr_unref>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f51a:	6824      	ldr	r4, [r4, #0]
	return node->next;
   1f51c:	e7f3      	b.n	1f506 <net_route_del+0x16>
		return -EINVAL;
   1f51e:	f06f 0015 	mvn.w	r0, #21
   1f522:	e7f5      	b.n	1f510 <net_route_del+0x20>
		return -ENOENT;
   1f524:	f06f 0001 	mvn.w	r0, #1
   1f528:	e7f2      	b.n	1f510 <net_route_del+0x20>

0001f52a <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   1f52a:	b158      	cbz	r0, 1f544 <net_route_get_nexthop+0x1a>
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1f52c:	6840      	ldr	r0, [r0, #4]
   1f52e:	b148      	cbz	r0, 1f544 <net_route_get_nexthop+0x1a>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1f530:	6843      	ldr	r3, [r0, #4]
   1f532:	785a      	ldrb	r2, [r3, #1]
   1f534:	2aff      	cmp	r2, #255	; 0xff
   1f536:	d003      	beq.n	1f540 <net_route_get_nexthop+0x16>
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
   1f538:	68db      	ldr	r3, [r3, #12]
		if (ipv6_nbr_data) {
   1f53a:	b10b      	cbz	r3, 1f540 <net_route_get_nexthop+0x16>
			addr = &ipv6_nbr_data->addr;
   1f53c:	1d18      	adds	r0, r3, #4
			NET_ASSERT(addr);

			return addr;
   1f53e:	4770      	bx	lr
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f540:	6800      	ldr	r0, [r0, #0]
	return node->next;
   1f542:	e7f4      	b.n	1f52e <net_route_get_nexthop+0x4>
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   1f544:	4770      	bx	lr

0001f546 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   1f546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f548:	4607      	mov	r7, r0
   1f54a:	460d      	mov	r5, r1
   1f54c:	4616      	mov	r6, r2
   1f54e:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   1f550:	f7ff fa0d 	bl	1e96e <net_ipv6_nbr_lookup>
   1f554:	b120      	cbz	r0, 1f560 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   1f556:	2300      	movs	r3, #0
   1f558:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   1f55a:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   1f55c:	2001      	movs	r0, #1
   1f55e:	e00b      	b.n	1f578 <net_route_get_info+0x32>
	*route = net_route_lookup(iface, dst);
   1f560:	4629      	mov	r1, r5
   1f562:	4638      	mov	r0, r7
   1f564:	f7f1 fdd4 	bl	11110 <net_route_lookup>
   1f568:	6030      	str	r0, [r6, #0]
	if (*route) {
   1f56a:	b130      	cbz	r0, 1f57a <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   1f56c:	f7ff ffdd 	bl	1f52a <net_route_get_nexthop>
   1f570:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   1f572:	3800      	subs	r0, #0
   1f574:	bf18      	it	ne
   1f576:	2001      	movne	r0, #1
	}

	return false;
}
   1f578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1f57a:	4629      	mov	r1, r5
   1f57c:	f7f0 fd10 	bl	ffa0 <net_if_ipv6_router_find_default>
		if (!router) {
   1f580:	2800      	cmp	r0, #0
   1f582:	d0f9      	beq.n	1f578 <net_route_get_info+0x32>
		*nexthop = &router->address.in6_addr;
   1f584:	3008      	adds	r0, #8
   1f586:	6020      	str	r0, [r4, #0]
   1f588:	e7e8      	b.n	1f55c <net_route_get_info+0x16>

0001f58a <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   1f58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f58c:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   1f58e:	2000      	movs	r0, #0
   1f590:	f7ff f9ed 	bl	1e96e <net_ipv6_nbr_lookup>
	if (!nbr) {
   1f594:	4606      	mov	r6, r0
   1f596:	2800      	cmp	r0, #0
   1f598:	d038      	beq.n	1f60c <net_route_packet+0x82>
		NET_DBG("Cannot find %s neighbor",
			log_strdup(net_sprint_ipv6_addr(nexthop)));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   1f59a:	7840      	ldrb	r0, [r0, #1]
   1f59c:	f7f1 f88c 	bl	106b8 <net_nbr_get_lladdr>
	if (!lladdr) {
   1f5a0:	4605      	mov	r5, r0
   1f5a2:	2800      	cmp	r0, #0
   1f5a4:	d035      	beq.n	1f612 <net_route_packet+0x88>
	 * link layer. This is done at runtime because we can have multiple
	 * network technologies enabled.
	 */
	if (net_if_l2(net_pkt_iface(pkt)) != &NET_L2_GET_NAME(DUMMY)) {
#endif
		if (!net_pkt_lladdr_src(pkt)->addr) {
   1f5a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1f5a8:	b910      	cbnz	r0, 1f5b0 <net_route_packet+0x26>
			NET_DBG("Link layer source address not set");
			return -EINVAL;
   1f5aa:	f06f 0015 	mvn.w	r0, #21
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;

	net_pkt_set_iface(pkt, nbr->iface);

	return net_send_data(pkt);
}
   1f5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
   1f5b0:	1caf      	adds	r7, r5, #2
   1f5b2:	4639      	mov	r1, r7
   1f5b4:	786a      	ldrb	r2, [r5, #1]
   1f5b6:	f7fd fb3e 	bl	1cc36 <memcmp>
   1f5ba:	2800      	cmp	r0, #0
   1f5bc:	d0f5      	beq.n	1f5aa <net_route_packet+0x20>
	pkt->forwarding = forward;
   1f5be:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   1f5c2:	f043 0301 	orr.w	r3, r3, #1
   1f5c6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return net_if_get_link_addr(pkt->iface);
   1f5ca:	6a23      	ldr	r3, [r4, #32]
   1f5cc:	681b      	ldr	r3, [r3, #0]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   1f5ce:	691a      	ldr	r2, [r3, #16]
   1f5d0:	62a2      	str	r2, [r4, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   1f5d2:	7d5a      	ldrb	r2, [r3, #21]
   1f5d4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   1f5d8:	7d1b      	ldrb	r3, [r3, #20]
	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
   1f5da:	6327      	str	r7, [r4, #48]	; 0x30
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   1f5dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
   1f5e0:	782b      	ldrb	r3, [r5, #0]
   1f5e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
   1f5e6:	786b      	ldrb	r3, [r5, #1]
   1f5e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	net_pkt_set_iface(pkt, nbr->iface);
   1f5ec:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   1f5ee:	6223      	str	r3, [r4, #32]
	if (iface) {
   1f5f0:	b13b      	cbz	r3, 1f602 <net_route_packet+0x78>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1f5f2:	681a      	ldr	r2, [r3, #0]
   1f5f4:	7d52      	ldrb	r2, [r2, #21]
   1f5f6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1f5fa:	681b      	ldr	r3, [r3, #0]
   1f5fc:	7d5b      	ldrb	r3, [r3, #21]
   1f5fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return net_send_data(pkt);
   1f602:	4620      	mov	r0, r4
}
   1f604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   1f608:	f7fd bc5c 	b.w	1cec4 <net_send_data>
		return -ENOENT;
   1f60c:	f06f 0001 	mvn.w	r0, #1
   1f610:	e7cd      	b.n	1f5ae <net_route_packet+0x24>
		return -ESRCH;
   1f612:	f06f 0002 	mvn.w	r0, #2
   1f616:	e7ca      	b.n	1f5ae <net_route_packet+0x24>

0001f618 <net_route_packet_if>:
	pkt->iface = iface;
   1f618:	6201      	str	r1, [r0, #32]
	if (iface) {
   1f61a:	b139      	cbz	r1, 1f62c <net_route_packet_if+0x14>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   1f61c:	680b      	ldr	r3, [r1, #0]
   1f61e:	7d5b      	ldrb	r3, [r3, #21]
   1f620:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   1f624:	680b      	ldr	r3, [r1, #0]
   1f626:	7d5b      	ldrb	r3, [r3, #21]
   1f628:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
	pkt->forwarding = forward;
   1f62c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1f630:	f043 0301 	orr.w	r3, r3, #1
   1f634:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	return net_if_get_link_addr(pkt->iface);
   1f638:	680b      	ldr	r3, [r1, #0]
	net_pkt_set_orig_iface(pkt, net_pkt_iface(pkt));
	net_pkt_set_iface(pkt, iface);

	net_pkt_set_forwarding(pkt, true);

	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   1f63a:	691a      	ldr	r2, [r3, #16]
   1f63c:	6282      	str	r2, [r0, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
   1f63e:	7d5a      	ldrb	r2, [r3, #21]
   1f640:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   1f644:	7d1b      	ldrb	r3, [r3, #20]
   1f646:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

	return net_send_data(pkt);
   1f64a:	f7fd bc3b 	b.w	1cec4 <net_send_data>

0001f64e <net_route_init>:
	NET_DBG("Allocated %d routing entries (%zu bytes)",
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));
}
   1f64e:	4770      	bx	lr

0001f650 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f650:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f652:	b942      	cbnz	r2, 1f666 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f654:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f656:	b933      	cbnz	r3, 1f666 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f658:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f65a:	b922      	cbnz	r2, 1f666 <net_ipv6_is_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1f65c:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f65e:	fab0 f080 	clz	r0, r0
   1f662:	0940      	lsrs	r0, r0, #5
   1f664:	4770      	bx	lr
   1f666:	2000      	movs	r0, #0
   1f668:	4770      	bx	lr

0001f66a <net_udp_finalize>:
	return net_pkt_set_data(pkt, &udp_access);
}

int net_udp_finalize(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1f66a:	2308      	movs	r3, #8
{
   1f66c:	b530      	push	{r4, r5, lr}
   1f66e:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	u16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   1f670:	eb0d 0103 	add.w	r1, sp, r3
{
   1f674:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   1f676:	f8cd d008 	str.w	sp, [sp, #8]
   1f67a:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   1f67c:	f7fe fcb8 	bl	1dff0 <net_pkt_get_data>
	if (!udp_hdr) {
   1f680:	4605      	mov	r5, r0
   1f682:	b308      	cbz	r0, 1f6c8 <net_udp_finalize+0x5e>
	size_t bytes = 0;
   1f684:	2300      	movs	r3, #0
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   1f686:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   1f688:	b9d2      	cbnz	r2, 1f6c0 <net_udp_finalize+0x56>
   1f68a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1f68e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   1f690:	6a20      	ldr	r0, [r4, #32]
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   1f692:	440a      	add	r2, r1
   1f694:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
   1f696:	ba5b      	rev16	r3, r3
   1f698:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   1f69a:	f7fe f8c1 	bl	1d820 <net_if_need_calc_tx_checksum>
   1f69e:	b148      	cbz	r0, 1f6b4 <net_udp_finalize+0x4a>
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   1f6a0:	2111      	movs	r1, #17
   1f6a2:	4620      	mov	r0, r4
   1f6a4:	f7fe f945 	bl	1d932 <net_calc_chksum>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   1f6a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f6ac:	2800      	cmp	r0, #0
   1f6ae:	bf08      	it	eq
   1f6b0:	4618      	moveq	r0, r3
   1f6b2:	80e8      	strh	r0, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   1f6b4:	4620      	mov	r0, r4
   1f6b6:	a902      	add	r1, sp, #8
   1f6b8:	f7fe fcbb 	bl	1e032 <net_pkt_set_data>
}
   1f6bc:	b005      	add	sp, #20
   1f6be:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
   1f6c0:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   1f6c2:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   1f6c4:	440b      	add	r3, r1
		buf = buf->frags;
   1f6c6:	e7df      	b.n	1f688 <net_udp_finalize+0x1e>
		return -ENOBUFS;
   1f6c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f6cc:	e7f6      	b.n	1f6bc <net_udp_finalize+0x52>

0001f6ce <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   1f6ce:	b570      	push	{r4, r5, r6, lr}
   1f6d0:	4604      	mov	r4, r0
   1f6d2:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   1f6d4:	f7fe fc8c 	bl	1dff0 <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   1f6d8:	4605      	mov	r5, r0
   1f6da:	b1f0      	cbz	r0, 1f71a <net_udp_input+0x4c>
   1f6dc:	4631      	mov	r1, r6
   1f6de:	4620      	mov	r0, r4
   1f6e0:	f7fe fca7 	bl	1e032 <net_pkt_set_data>
   1f6e4:	4603      	mov	r3, r0
   1f6e6:	b9c0      	cbnz	r0, 1f71a <net_udp_input+0x4c>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   1f6e8:	88a9      	ldrh	r1, [r5, #4]
   1f6ea:	020a      	lsls	r2, r1, #8
   1f6ec:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   1f6f0:	6921      	ldr	r1, [r4, #16]
   1f6f2:	b292      	uxth	r2, r2
	while (buf) {
   1f6f4:	b9a1      	cbnz	r1, 1f720 <net_udp_input+0x52>
				    net_pkt_ip_hdr_len(pkt) -
   1f6f6:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
				    net_pkt_ip_opts_len(pkt))) {
   1f6fa:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
				    net_pkt_ip_hdr_len(pkt) -
   1f6fc:	4408      	add	r0, r1
   1f6fe:	1a1b      	subs	r3, r3, r0
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   1f700:	429a      	cmp	r2, r3
   1f702:	d10a      	bne.n	1f71a <net_udp_input+0x4c>
		NET_DBG("DROP: Invalid hdr length");
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   1f704:	6a20      	ldr	r0, [r4, #32]
   1f706:	f7fe f88d 	bl	1d824 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   1f70a:	b138      	cbz	r0, 1f71c <net_udp_input+0x4e>
		if (!udp_hdr->chksum) {
   1f70c:	88eb      	ldrh	r3, [r5, #6]
   1f70e:	b123      	cbz	r3, 1f71a <net_udp_input+0x4c>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   1f710:	2111      	movs	r1, #17
   1f712:	4620      	mov	r0, r4
   1f714:	f7fe f90d 	bl	1d932 <net_calc_chksum>
			}

			goto drop;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   1f718:	b100      	cbz	r0, 1f71c <net_udp_input+0x4e>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   1f71a:	2500      	movs	r5, #0
}
   1f71c:	4628      	mov	r0, r5
   1f71e:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   1f720:	8988      	ldrh	r0, [r1, #12]
		buf = buf->frags;
   1f722:	6809      	ldr	r1, [r1, #0]
		bytes += buf->len;
   1f724:	4403      	add	r3, r0
		buf = buf->frags;
   1f726:	e7e5      	b.n	1f6f4 <net_udp_input+0x26>

0001f728 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f728:	f1a0 0308 	sub.w	r3, r0, #8
   1f72c:	e8d3 2fef 	ldaex	r2, [r3]
   1f730:	1c51      	adds	r1, r2, #1
   1f732:	e8c3 1fec 	stlex	ip, r1, [r3]
   1f736:	f1bc 0f00 	cmp.w	ip, #0
   1f73a:	d1f7      	bne.n	1f72c <adc_context_on_timer_expired+0x4>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   1f73c:	b91a      	cbnz	r2, 1f746 <adc_context_on_timer_expired+0x1e>
		adc_context_start_sampling(ctx);
   1f73e:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   1f742:	f7f1 be8d 	b.w	11460 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   1f746:	f06f 030f 	mvn.w	r3, #15
   1f74a:	6603      	str	r3, [r0, #96]	; 0x60
}
   1f74c:	4770      	bx	lr

0001f74e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f74e:	6843      	ldr	r3, [r0, #4]
}
   1f750:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f752:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1f754:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1f756:	600b      	str	r3, [r1, #0]
}
   1f758:	4770      	bx	lr

0001f75a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f75a:	6843      	ldr	r3, [r0, #4]
   1f75c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1f75e:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1f760:	4042      	eors	r2, r0
   1f762:	400a      	ands	r2, r1
   1f764:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1f766:	605a      	str	r2, [r3, #4]
}
   1f768:	2000      	movs	r0, #0
   1f76a:	4770      	bx	lr

0001f76c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f76c:	6843      	ldr	r3, [r0, #4]
}
   1f76e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f770:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1f772:	6099      	str	r1, [r3, #8]
}
   1f774:	4770      	bx	lr

0001f776 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f776:	6843      	ldr	r3, [r0, #4]
}
   1f778:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f77a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1f77c:	60d9      	str	r1, [r3, #12]
}
   1f77e:	4770      	bx	lr

0001f780 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f780:	6843      	ldr	r3, [r0, #4]
}
   1f782:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f784:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f786:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1f788:	4059      	eors	r1, r3
    p_reg->OUT = value;
   1f78a:	6051      	str	r1, [r2, #4]
}
   1f78c:	4770      	bx	lr

0001f78e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f78e:	68c3      	ldr	r3, [r0, #12]
{
   1f790:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1f792:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1f794:	b158      	cbz	r0, 1f7ae <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f796:	2400      	movs	r4, #0
   1f798:	4281      	cmp	r1, r0
   1f79a:	d113      	bne.n	1f7c4 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1f79c:	6808      	ldr	r0, [r1, #0]
   1f79e:	b95c      	cbnz	r4, 1f7b8 <gpio_nrfx_manage_callback+0x2a>
   1f7a0:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1f7a2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f7a4:	42a1      	cmp	r1, r4
   1f7a6:	d100      	bne.n	1f7aa <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1f7a8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f7aa:	2000      	movs	r0, #0
   1f7ac:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1f7ae:	b972      	cbnz	r2, 1f7ce <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1f7b0:	2000      	movs	r0, #0
}
   1f7b2:	bd30      	pop	{r4, r5, pc}
   1f7b4:	4628      	mov	r0, r5
   1f7b6:	e7ef      	b.n	1f798 <gpio_nrfx_manage_callback+0xa>
   1f7b8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f7ba:	6898      	ldr	r0, [r3, #8]
   1f7bc:	4281      	cmp	r1, r0
	list->tail = node;
   1f7be:	bf08      	it	eq
   1f7c0:	609c      	streq	r4, [r3, #8]
}
   1f7c2:	e7f2      	b.n	1f7aa <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f7c4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f7c6:	4604      	mov	r4, r0
   1f7c8:	2d00      	cmp	r5, #0
   1f7ca:	d1f3      	bne.n	1f7b4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1f7cc:	b13a      	cbz	r2, 1f7de <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1f7ce:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f7d0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f7d2:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1f7d4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f7d6:	2800      	cmp	r0, #0
   1f7d8:	d1ea      	bne.n	1f7b0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1f7da:	6099      	str	r1, [r3, #8]
}
   1f7dc:	e7e9      	b.n	1f7b2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1f7de:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f7e2:	e7e6      	b.n	1f7b2 <gpio_nrfx_manage_callback+0x24>

0001f7e4 <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   1f7e4:	2201      	movs	r2, #1
{
   1f7e6:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   1f7e8:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   1f7ea:	408a      	lsls	r2, r1
   1f7ec:	6923      	ldr	r3, [r4, #16]
   1f7ee:	ea23 0302 	bic.w	r3, r3, r2
   1f7f2:	6123      	str	r3, [r4, #16]
}
   1f7f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   1f7f8:	f7f2 b91a 	b.w	11a30 <gpiote_pin_int_cfg>

0001f7fc <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   1f7fc:	2201      	movs	r2, #1
{
   1f7fe:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   1f800:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   1f802:	408a      	lsls	r2, r1
   1f804:	6923      	ldr	r3, [r4, #16]
   1f806:	4313      	orrs	r3, r2
   1f808:	6123      	str	r3, [r4, #16]
}
   1f80a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   1f80e:	f7f2 b90f 	b.w	11a30 <gpiote_pin_int_cfg>

0001f812 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1f812:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f814:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   1f816:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1f818:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1f81a:	7b91      	ldrb	r1, [r2, #14]
   1f81c:	b159      	cbz	r1, 1f836 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f81e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1f822:	b141      	cbz	r1, 1f836 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   1f824:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f828:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f82c:	2101      	movs	r1, #1
   1f82e:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1f830:	2300      	movs	r3, #0
   1f832:	7393      	strb	r3, [r2, #14]
		return;
   1f834:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f836:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1f83a:	b111      	cbz	r1, 1f842 <uarte_nrfx_isr_int+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f83c:	2100      	movs	r1, #0
   1f83e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1f842:	6813      	ldr	r3, [r2, #0]
   1f844:	b10b      	cbz	r3, 1f84a <uarte_nrfx_isr_int+0x38>
		data->int_driven->cb(data->int_driven->cb_data);
   1f846:	6850      	ldr	r0, [r2, #4]
   1f848:	4718      	bx	r3
}
   1f84a:	4770      	bx	lr

0001f84c <uarte_nrfx_config_get>:
{
   1f84c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f84e:	68c2      	ldr	r2, [r0, #12]
   1f850:	e892 0003 	ldmia.w	r2, {r0, r1}
   1f854:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f858:	2000      	movs	r0, #0
   1f85a:	4770      	bx	lr

0001f85c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f85c:	6843      	ldr	r3, [r0, #4]
   1f85e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f860:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f864:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f868:	4770      	bx	lr

0001f86a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1f86a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f86c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f86e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f870:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f874:	b138      	cbz	r0, 1f886 <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
   1f876:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f878:	2000      	movs	r0, #0
   1f87a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f87c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f87e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f882:	601a      	str	r2, [r3, #0]
	return 0;
   1f884:	4770      	bx	lr
		return -1;
   1f886:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f88a:	4770      	bx	lr

0001f88c <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   1f88c:	6843      	ldr	r3, [r0, #4]
{
   1f88e:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1f890:	681c      	ldr	r4, [r3, #0]
{
   1f892:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f894:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f898:	b190      	cbz	r0, 1f8c0 <__kernel_ram_size+0x20>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f89a:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   1f89c:	68ab      	ldr	r3, [r5, #8]
   1f89e:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f8a0:	2300      	movs	r3, #0
   1f8a2:	4290      	cmp	r0, r2
   1f8a4:	bfa8      	it	ge
   1f8a6:	4610      	movge	r0, r2
   1f8a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1f8ac:	68aa      	ldr	r2, [r5, #8]
   1f8ae:	4283      	cmp	r3, r0
   1f8b0:	6892      	ldr	r2, [r2, #8]
   1f8b2:	db06      	blt.n	1f8c2 <__kernel_ram_size+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f8b4:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f8b6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f8ba:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f8be:	60a3      	str	r3, [r4, #8]
}
   1f8c0:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1f8c2:	5cce      	ldrb	r6, [r1, r3]
   1f8c4:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1f8c6:	3301      	adds	r3, #1
   1f8c8:	e7f0      	b.n	1f8ac <__kernel_ram_size+0xc>

0001f8ca <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1f8ca:	6843      	ldr	r3, [r0, #4]
   1f8cc:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f8ce:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f8d2:	b143      	cbz	r3, 1f8e6 <uarte_nrfx_fifo_read+0x1c>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f8d4:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f8d6:	2000      	movs	r0, #0
   1f8d8:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f8dc:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1f8de:	7c1b      	ldrb	r3, [r3, #16]
   1f8e0:	700b      	strb	r3, [r1, #0]
   1f8e2:	6010      	str	r0, [r2, #0]
}
   1f8e4:	4770      	bx	lr
	int num_rx = 0;
   1f8e6:	4618      	mov	r0, r3
}
   1f8e8:	4770      	bx	lr

0001f8ea <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1f8ea:	2100      	movs	r1, #0
   1f8ec:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f8ee:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   1f8f0:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1f8f2:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1f8f4:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1f8f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f8fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f8fe:	4770      	bx	lr

0001f900 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1f900:	2201      	movs	r2, #1
   1f902:	68c3      	ldr	r3, [r0, #12]
   1f904:	689b      	ldr	r3, [r3, #8]
   1f906:	739a      	strb	r2, [r3, #14]
}
   1f908:	4770      	bx	lr

0001f90a <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   1f90a:	68c3      	ldr	r3, [r0, #12]
   1f90c:	689b      	ldr	r3, [r3, #8]
   1f90e:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1f910:	b94b      	cbnz	r3, 1f926 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   1f912:	6843      	ldr	r3, [r0, #4]
   1f914:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f916:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   1f91a:	b128      	cbz	r0, 1f928 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   1f91c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1f920:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1f924:	4770      	bx	lr
   1f926:	2000      	movs	r0, #0
}
   1f928:	4770      	bx	lr

0001f92a <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1f92a:	6843      	ldr	r3, [r0, #4]
   1f92c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f92e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1f932:	3800      	subs	r0, #0
   1f934:	bf18      	it	ne
   1f936:	2001      	movne	r0, #1
   1f938:	4770      	bx	lr

0001f93a <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1f93a:	2210      	movs	r2, #16
	return config->uarte_regs;
   1f93c:	6843      	ldr	r3, [r0, #4]
   1f93e:	681b      	ldr	r3, [r3, #0]
   1f940:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f944:	4770      	bx	lr

0001f946 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1f946:	2210      	movs	r2, #16
	return config->uarte_regs;
   1f948:	6843      	ldr	r3, [r0, #4]
   1f94a:	681b      	ldr	r3, [r3, #0]
   1f94c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f950:	4770      	bx	lr

0001f952 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1f952:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1f956:	6843      	ldr	r3, [r0, #4]
   1f958:	681b      	ldr	r3, [r3, #0]
   1f95a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f95e:	4770      	bx	lr

0001f960 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1f960:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1f964:	6843      	ldr	r3, [r0, #4]
   1f966:	681b      	ldr	r3, [r3, #0]
   1f968:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f96c:	4770      	bx	lr

0001f96e <uarte_nrfx_irq_update>:
}
   1f96e:	2001      	movs	r0, #1
   1f970:	4770      	bx	lr

0001f972 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1f972:	68c3      	ldr	r3, [r0, #12]
   1f974:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1f976:	e9c3 1200 	strd	r1, r2, [r3]
}
   1f97a:	4770      	bx	lr

0001f97c <uarte_nrfx_irq_is_pending>:
{
   1f97c:	b508      	push	{r3, lr}
	return config->uarte_regs;
   1f97e:	6843      	ldr	r3, [r0, #4]
{
   1f980:	4602      	mov	r2, r0
	return config->uarte_regs;
   1f982:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1f984:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1f988:	05db      	lsls	r3, r3, #23
   1f98a:	d405      	bmi.n	1f998 <uarte_nrfx_irq_is_pending+0x1c>
   1f98c:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1f990:	f010 0010 	ands.w	r0, r0, #16
   1f994:	d106      	bne.n	1f9a4 <uarte_nrfx_irq_is_pending+0x28>
}
   1f996:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1f998:	f7ff ffb7 	bl	1f90a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1f99c:	2800      	cmp	r0, #0
   1f99e:	d0f5      	beq.n	1f98c <uarte_nrfx_irq_is_pending+0x10>
		||
   1f9a0:	2001      	movs	r0, #1
   1f9a2:	e7f8      	b.n	1f996 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1f9a4:	4610      	mov	r0, r2
   1f9a6:	f7ff ffc0 	bl	1f92a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1f9aa:	3800      	subs	r0, #0
   1f9ac:	bf18      	it	ne
   1f9ae:	2001      	movne	r0, #1
   1f9b0:	e7f1      	b.n	1f996 <uarte_nrfx_irq_is_pending+0x1a>

0001f9b2 <uarte_nrfx_poll_out>:
{
   1f9b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1f9b6:	6843      	ldr	r3, [r0, #4]
{
   1f9b8:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1f9bc:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f9be:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   1f9c0:	f000 fe13 	bl	205ea <k_is_in_isr>
   1f9c4:	b9c0      	cbnz	r0, 1f9f8 <uarte_nrfx_poll_out+0x46>
		lock = &data->poll_out_lock;
   1f9c6:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f9c8:	f04f 0801 	mov.w	r8, #1
   1f9cc:	f106 070c 	add.w	r7, r6, #12
   1f9d0:	e8d7 3fef 	ldaex	r3, [r7]
   1f9d4:	2b00      	cmp	r3, #0
   1f9d6:	d103      	bne.n	1f9e0 <uarte_nrfx_poll_out+0x2e>
   1f9d8:	e8c7 8fe2 	stlex	r2, r8, [r7]
   1f9dc:	2a00      	cmp	r2, #0
   1f9de:	d1f7      	bne.n	1f9d0 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   1f9e0:	d00c      	beq.n	1f9fc <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   1f9e2:	2021      	movs	r0, #33	; 0x21
   1f9e4:	2100      	movs	r1, #0
   1f9e6:	3d01      	subs	r5, #1
   1f9e8:	f7fb fe2a 	bl	1b640 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1f9ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1f9f0:	d1ee      	bne.n	1f9d0 <uarte_nrfx_poll_out+0x1e>
}
   1f9f2:	b002      	add	sp, #8
   1f9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   1f9f8:	2301      	movs	r3, #1
   1f9fa:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9fc:	2300      	movs	r3, #0
   1f9fe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fa02:	f10d 0307 	add.w	r3, sp, #7
   1fa06:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fa0a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fa0c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   1fa10:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fa14:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fa16:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   1fa1a:	b923      	cbnz	r3, 1fa26 <uarte_nrfx_poll_out+0x74>
   1fa1c:	2001      	movs	r0, #1
   1fa1e:	f000 fb74 	bl	2010a <nrfx_busy_wait>
   1fa22:	3d01      	subs	r5, #1
   1fa24:	d1f7      	bne.n	1fa16 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fa26:	2301      	movs	r3, #1
   1fa28:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1fa2a:	2300      	movs	r3, #0
   1fa2c:	60f3      	str	r3, [r6, #12]
   1fa2e:	e7e0      	b.n	1f9f2 <uarte_nrfx_poll_out+0x40>

0001fa30 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1fa30:	2000      	movs	r0, #0
   1fa32:	4770      	bx	lr

0001fa34 <entropy_cc310_rng_get_entropy>:
{
   1fa34:	b513      	push	{r0, r1, r4, lr}
   1fa36:	4614      	mov	r4, r2
   1fa38:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1fa3a:	aa01      	add	r2, sp, #4
   1fa3c:	4621      	mov	r1, r4
   1fa3e:	f7e8 fad7 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1fa42:	9b01      	ldr	r3, [sp, #4]
   1fa44:	429c      	cmp	r4, r3
}
   1fa46:	bf18      	it	ne
   1fa48:	f06f 0015 	mvnne.w	r0, #21
   1fa4c:	b002      	add	sp, #8
   1fa4e:	bd10      	pop	{r4, pc}

0001fa50 <z_errno>:
   1fa50:	f7fa bfea 	b.w	1aa28 <z_impl_z_errno>

0001fa54 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1fa54:	4668      	mov	r0, sp
   1fa56:	f020 0107 	bic.w	r1, r0, #7
   1fa5a:	468d      	mov	sp, r1
   1fa5c:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1fa5e:	f7f3 fba7 	bl	131b0 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1fa62:	f7ee faaf 	bl	dfc4 <_arch_isr_direct_pm>
   1fa66:	f7ee fe0f 	bl	e688 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1fa6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fa6e:	4685      	mov	sp, r0
   1fa70:	4770      	bx	lr

0001fa72 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1fa72:	4668      	mov	r0, sp
   1fa74:	f020 0107 	bic.w	r1, r0, #7
   1fa78:	468d      	mov	sp, r1
   1fa7a:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1fa7c:	f7f3 fec2 	bl	13804 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1fa80:	f7ee faa0 	bl	dfc4 <_arch_isr_direct_pm>
   1fa84:	f7ee fe00 	bl	e688 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1fa88:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fa8c:	4685      	mov	sp, r0
   1fa8e:	4770      	bx	lr

0001fa90 <trace_task_create>:
{
   1fa90:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1fa92:	201d      	movs	r0, #29
   1fa94:	2200      	movs	r2, #0
   1fa96:	2106      	movs	r1, #6
   1fa98:	f7ee fa7e 	bl	df98 <z_arm_irq_priority_set>
}
   1fa9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1faa0:	201d      	movs	r0, #29
   1faa2:	f7ee ba69 	b.w	df78 <arch_irq_enable>

0001faa6 <read_task_create>:
{
   1faa6:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1faa8:	201c      	movs	r0, #28
   1faaa:	2200      	movs	r2, #0
   1faac:	2106      	movs	r1, #6
   1faae:	f7ee fa73 	bl	df98 <z_arm_irq_priority_set>
}
   1fab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1fab6:	201c      	movs	r0, #28
   1fab8:	f7ee ba5e 	b.w	df78 <arch_irq_enable>

0001fabc <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1fabc:	2000      	movs	r0, #0
   1fabe:	4770      	bx	lr

0001fac0 <z_to_nrf_flags>:
{
   1fac0:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   1fac2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1fac6:	bf18      	it	ne
   1fac8:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   1faca:	079b      	lsls	r3, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   1facc:	bf48      	it	mi
   1face:	f040 0008 	orrmi.w	r0, r0, #8
}
   1fad2:	4770      	bx	lr

0001fad4 <z_to_nrf_family>:
	switch (z_family) {
   1fad4:	2806      	cmp	r0, #6
   1fad6:	d80a      	bhi.n	1faee <z_to_nrf_family+0x1a>
   1fad8:	b198      	cbz	r0, 1fb02 <z_to_nrf_family+0x2e>
   1fada:	3801      	subs	r0, #1
   1fadc:	2805      	cmp	r0, #5
   1fade:	d810      	bhi.n	1fb02 <z_to_nrf_family+0x2e>
   1fae0:	e8df f000 	tbb	[pc, r0]
   1fae4:	0f0d0312 	.word	0x0f0d0312
   1fae8:	0b0f      	.short	0x0b0f
   1faea:	200a      	movs	r0, #10
   1faec:	4770      	bx	lr
   1faee:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   1faf0:	bf14      	ite	ne
   1faf2:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1faf6:	2066      	moveq	r0, #102	; 0x66
   1faf8:	4770      	bx	lr
		return NRF_AF_LOCAL;
   1fafa:	2001      	movs	r0, #1
   1fafc:	4770      	bx	lr
		return NRF_AF_PACKET;
   1fafe:	2005      	movs	r0, #5
   1fb00:	4770      	bx	lr
		return -EAFNOSUPPORT;
   1fb02:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   1fb06:	4770      	bx	lr
		return NRF_AF_INET;
   1fb08:	2002      	movs	r0, #2
}
   1fb0a:	4770      	bx	lr

0001fb0c <z_to_nrf_protocol>:
	switch (proto) {
   1fb0c:	f240 1311 	movw	r3, #273	; 0x111
   1fb10:	4298      	cmp	r0, r3
   1fb12:	d023      	beq.n	1fb5c <z_to_nrf_protocol+0x50>
   1fb14:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   1fb18:	da11      	bge.n	1fb3e <z_to_nrf_protocol+0x32>
   1fb1a:	2811      	cmp	r0, #17
   1fb1c:	d021      	beq.n	1fb62 <z_to_nrf_protocol+0x56>
   1fb1e:	dc06      	bgt.n	1fb2e <z_to_nrf_protocol+0x22>
   1fb20:	b300      	cbz	r0, 1fb64 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   1fb22:	2806      	cmp	r0, #6
   1fb24:	bf14      	ite	ne
   1fb26:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1fb2a:	2001      	moveq	r0, #1
   1fb2c:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   1fb2e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1fb32:	bf14      	ite	ne
   1fb34:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1fb38:	f44f 7082 	moveq.w	r0, #260	; 0x104
   1fb3c:	4770      	bx	lr
	switch (proto) {
   1fb3e:	f240 2302 	movw	r3, #514	; 0x202
   1fb42:	4298      	cmp	r0, r3
   1fb44:	d00e      	beq.n	1fb64 <z_to_nrf_protocol+0x58>
   1fb46:	f240 2303 	movw	r3, #515	; 0x203
   1fb4a:	4298      	cmp	r0, r3
   1fb4c:	d00a      	beq.n	1fb64 <z_to_nrf_protocol+0x58>
   1fb4e:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   1fb52:	4298      	cmp	r0, r3
   1fb54:	bf18      	it	ne
   1fb56:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1fb5a:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   1fb5c:	f44f 7087 	mov.w	r0, #270	; 0x10e
   1fb60:	4770      	bx	lr
	switch (proto) {
   1fb62:	2002      	movs	r0, #2
}
   1fb64:	4770      	bx	lr

0001fb66 <nrf91_socket_is_supported>:
}
   1fb66:	2001      	movs	r0, #1
   1fb68:	4770      	bx	lr

0001fb6a <nrf91_bsdlib_socket_offload_init>:
}
   1fb6a:	2000      	movs	r0, #0
   1fb6c:	4770      	bx	lr

0001fb6e <z_errno>:
   1fb6e:	f7fa bf5b 	b.w	1aa28 <z_impl_z_errno>

0001fb72 <nrf91_socket_offload_getsockopt>:
{
   1fb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb76:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1fb78:	2300      	movs	r3, #0
{
   1fb7a:	b086      	sub	sp, #24
   1fb7c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1fb80:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1fb84:	f8d8 3000 	ldr.w	r3, [r8]
{
   1fb88:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1fb8a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1fb8c:	f240 2302 	movw	r3, #514	; 0x202
   1fb90:	4299      	cmp	r1, r3
{
   1fb92:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   1fb94:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   1fb98:	d005      	beq.n	1fba6 <nrf91_socket_offload_getsockopt+0x34>
   1fb9a:	dc2e      	bgt.n	1fbfa <nrf91_socket_offload_getsockopt+0x88>
   1fb9c:	2901      	cmp	r1, #1
   1fb9e:	d002      	beq.n	1fba6 <nrf91_socket_offload_getsockopt+0x34>
   1fba0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1fba4:	d139      	bne.n	1fc1a <nrf91_socket_offload_getsockopt+0xa8>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1fba6:	4631      	mov	r1, r6
   1fba8:	4620      	mov	r0, r4
   1fbaa:	aa02      	add	r2, sp, #8
   1fbac:	f7f2 fcba 	bl	12524 <z_to_nrf_optname>
   1fbb0:	2800      	cmp	r0, #0
   1fbb2:	db32      	blt.n	1fc1a <nrf91_socket_offload_getsockopt+0xa8>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1fbb4:	2c01      	cmp	r4, #1
   1fbb6:	d124      	bne.n	1fc02 <nrf91_socket_offload_getsockopt+0x90>
   1fbb8:	2e14      	cmp	r6, #20
   1fbba:	d122      	bne.n	1fc02 <nrf91_socket_offload_getsockopt+0x90>
		nrf_optlen = sizeof(struct nrf_timeval);
   1fbbc:	2308      	movs	r3, #8
   1fbbe:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1fbc0:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1fbc2:	aa03      	add	r2, sp, #12
   1fbc4:	4638      	mov	r0, r7
   1fbc6:	9200      	str	r2, [sp, #0]
   1fbc8:	4621      	mov	r1, r4
   1fbca:	9a02      	ldr	r2, [sp, #8]
   1fbcc:	f7f9 f9c2 	bl	18f54 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1fbd0:	4607      	mov	r7, r0
   1fbd2:	b970      	cbnz	r0, 1fbf2 <nrf91_socket_offload_getsockopt+0x80>
   1fbd4:	b16d      	cbz	r5, 1fbf2 <nrf91_socket_offload_getsockopt+0x80>
		*optlen = nrf_optlen;
   1fbd6:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1fbd8:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1fbda:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1fbde:	d108      	bne.n	1fbf2 <nrf91_socket_offload_getsockopt+0x80>
			if (optname == SO_ERROR) {
   1fbe0:	2e04      	cmp	r6, #4
   1fbe2:	d110      	bne.n	1fc06 <nrf91_socket_offload_getsockopt+0x94>
				bsd_os_errno_set(*(int *)optval);
   1fbe4:	6828      	ldr	r0, [r5, #0]
   1fbe6:	f7f2 faf7 	bl	121d8 <bsd_os_errno_set>
				*(int *)optval = errno;
   1fbea:	f7ff ffc0 	bl	1fb6e <z_errno>
   1fbee:	6803      	ldr	r3, [r0, #0]
   1fbf0:	602b      	str	r3, [r5, #0]
}
   1fbf2:	4638      	mov	r0, r7
   1fbf4:	b006      	add	sp, #24
   1fbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1fbfa:	f240 2303 	movw	r3, #515	; 0x203
   1fbfe:	4299      	cmp	r1, r3
   1fc00:	e7d0      	b.n	1fba4 <nrf91_socket_offload_getsockopt+0x32>
   1fc02:	462b      	mov	r3, r5
   1fc04:	e7dd      	b.n	1fbc2 <nrf91_socket_offload_getsockopt+0x50>
			} else if (optname == SO_RCVTIMEO) {
   1fc06:	2e14      	cmp	r6, #20
   1fc08:	d1f3      	bne.n	1fbf2 <nrf91_socket_offload_getsockopt+0x80>
				((struct timeval *)optval)->tv_sec =
   1fc0a:	9b04      	ldr	r3, [sp, #16]
   1fc0c:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1fc0e:	9b05      	ldr	r3, [sp, #20]
   1fc10:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1fc12:	2308      	movs	r3, #8
   1fc14:	f8c8 3000 	str.w	r3, [r8]
   1fc18:	e7eb      	b.n	1fbf2 <nrf91_socket_offload_getsockopt+0x80>
	errno = ENOPROTOOPT;
   1fc1a:	f7ff ffa8 	bl	1fb6e <z_errno>
   1fc1e:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1fc20:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   1fc24:	6003      	str	r3, [r0, #0]
	return retval;
   1fc26:	e7e4      	b.n	1fbf2 <nrf91_socket_offload_getsockopt+0x80>

0001fc28 <nrf91_socket_offload_recvfrom>:
{
   1fc28:	b570      	push	{r4, r5, r6, lr}
	int sd = OBJ_TO_SD(obj);
   1fc2a:	1e45      	subs	r5, r0, #1
{
   1fc2c:	b08c      	sub	sp, #48	; 0x30
   1fc2e:	4618      	mov	r0, r3
   1fc30:	e9dd 4610 	ldrd	r4, r6, [sp, #64]	; 0x40
   1fc34:	f7ff ff44 	bl	1fac0 <z_to_nrf_flags>
   1fc38:	4603      	mov	r3, r0
	if (from == NULL) {
   1fc3a:	b944      	cbnz	r4, 1fc4e <nrf91_socket_offload_recvfrom+0x26>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1fc3c:	4628      	mov	r0, r5
   1fc3e:	e9cd 4400 	strd	r4, r4, [sp]
   1fc42:	f7f9 f905 	bl	18e50 <nrf_recvfrom>
   1fc46:	4605      	mov	r5, r0
}
   1fc48:	4628      	mov	r0, r5
   1fc4a:	b00c      	add	sp, #48	; 0x30
   1fc4c:	bd70      	pop	{r4, r5, r6, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1fc4e:	2024      	movs	r0, #36	; 0x24
   1fc50:	9002      	str	r0, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1fc52:	a802      	add	r0, sp, #8
   1fc54:	9001      	str	r0, [sp, #4]
   1fc56:	a803      	add	r0, sp, #12
   1fc58:	9000      	str	r0, [sp, #0]
   1fc5a:	4628      	mov	r0, r5
   1fc5c:	f7f9 f8f8 	bl	18e50 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1fc60:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1fc62:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1fc64:	2b02      	cmp	r3, #2
   1fc66:	d109      	bne.n	1fc7c <nrf91_socket_offload_recvfrom+0x54>
	ptr->sin_port = nrf_in->sin_port;
   1fc68:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1fc6c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1fc6e:	2301      	movs	r3, #1
   1fc70:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1fc72:	9b06      	ldr	r3, [sp, #24]
   1fc74:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1fc76:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1fc78:	6033      	str	r3, [r6, #0]
	return retval;
   1fc7a:	e7e5      	b.n	1fc48 <nrf91_socket_offload_recvfrom+0x20>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1fc7c:	2b0a      	cmp	r3, #10
   1fc7e:	d1e3      	bne.n	1fc48 <nrf91_socket_offload_recvfrom+0x20>
	ptr->sin6_port = nrf_in->sin6_port;
   1fc80:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1fc84:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1fc86:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1fc88:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1fc8a:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1fc8c:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1fc90:	a907      	add	r1, sp, #28
   1fc92:	f7fc ffe0 	bl	1cc56 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1fc96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fc98:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1fc9a:	2318      	movs	r3, #24
   1fc9c:	e7ec      	b.n	1fc78 <nrf91_socket_offload_recvfrom+0x50>

0001fc9e <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1fc9e:	2300      	movs	r3, #0
{
   1fca0:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1fca2:	e9cd 3300 	strd	r3, r3, [sp]
   1fca6:	f7ff ffbf 	bl	1fc28 <nrf91_socket_offload_recvfrom>
}
   1fcaa:	b003      	add	sp, #12
   1fcac:	f85d fb04 	ldr.w	pc, [sp], #4

0001fcb0 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1fcb0:	3801      	subs	r0, #1
   1fcb2:	f7f9 b8fb 	b.w	18eac <nrf_listen>

0001fcb6 <nrf91_socket_offload_freeaddrinfo>:
{
   1fcb6:	b538      	push	{r3, r4, r5, lr}
   1fcb8:	4604      	mov	r4, r0
	while (next != NULL) {
   1fcba:	b904      	cbnz	r4, 1fcbe <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1fcbc:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1fcbe:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   1fcc0:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   1fcc2:	f000 fade 	bl	20282 <k_free>
		k_free(this);
   1fcc6:	4620      	mov	r0, r4
   1fcc8:	f000 fadb 	bl	20282 <k_free>
		next = next->ai_next;
   1fccc:	462c      	mov	r4, r5
   1fcce:	e7f4      	b.n	1fcba <nrf91_socket_offload_freeaddrinfo+0x4>

0001fcd0 <z_to_nrf_addrinfo_hints>:
{
   1fcd0:	b538      	push	{r3, r4, r5, lr}
   1fcd2:	460c      	mov	r4, r1
   1fcd4:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1fcd6:	2220      	movs	r2, #32
   1fcd8:	2100      	movs	r1, #0
   1fcda:	4620      	mov	r0, r4
   1fcdc:	f7fc ffe6 	bl	1ccac <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1fce0:	2300      	movs	r3, #0
   1fce2:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1fce4:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   1fce6:	2b03      	cmp	r3, #3
   1fce8:	d003      	beq.n	1fcf2 <z_to_nrf_addrinfo_hints+0x22>
   1fcea:	2b04      	cmp	r3, #4
   1fcec:	bf08      	it	eq
   1fcee:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   1fcf2:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1fcf4:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1fcf6:	f7ff feed 	bl	1fad4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1fcfa:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1fcfe:	d00b      	beq.n	1fd18 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1fd00:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1fd02:	6928      	ldr	r0, [r5, #16]
   1fd04:	f7ff ff02 	bl	1fb0c <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1fd08:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1fd0c:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1fd0e:	d003      	beq.n	1fd18 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1fd10:	69e8      	ldr	r0, [r5, #28]
   1fd12:	b108      	cbz	r0, 1fd18 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1fd14:	61a0      	str	r0, [r4, #24]
	return 0;
   1fd16:	2000      	movs	r0, #0
}
   1fd18:	bd38      	pop	{r3, r4, r5, pc}

0001fd1a <nrf91_socket_offload_connect>:
{
   1fd1a:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1fd1c:	880b      	ldrh	r3, [r1, #0]
{
   1fd1e:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1fd20:	2b01      	cmp	r3, #1
{
   1fd22:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   1fd24:	f100 35ff 	add.w	r5, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   1fd28:	d10f      	bne.n	1fd4a <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   1fd2a:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1fd2c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1fd2e:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1fd32:	2302      	movs	r3, #2
   1fd34:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1fd36:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1fd38:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1fd3c:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1fd3e:	4628      	mov	r0, r5
   1fd40:	a901      	add	r1, sp, #4
   1fd42:	f7f9 f8a1 	bl	18e88 <nrf_connect>
}
   1fd46:	b00a      	add	sp, #40	; 0x28
   1fd48:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1fd4a:	2b02      	cmp	r3, #2
   1fd4c:	d110      	bne.n	1fd70 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1fd4e:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fd50:	2624      	movs	r6, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1fd52:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1fd56:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fd58:	2210      	movs	r2, #16
   1fd5a:	3104      	adds	r1, #4
   1fd5c:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1fd5e:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fd60:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fd64:	f7fc ff77 	bl	1cc56 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1fd68:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1fd6a:	4632      	mov	r2, r6
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1fd6c:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1fd6e:	e7e6      	b.n	1fd3e <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1fd70:	4628      	mov	r0, r5
   1fd72:	f7f9 f889 	bl	18e88 <nrf_connect>
		if (retval < 0) {
   1fd76:	2800      	cmp	r0, #0
   1fd78:	dae5      	bge.n	1fd46 <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   1fd7a:	f7ff fef8 	bl	1fb6e <z_errno>
   1fd7e:	2323      	movs	r3, #35	; 0x23
   1fd80:	6003      	str	r3, [r0, #0]
   1fd82:	f04f 30ff 	mov.w	r0, #4294967295
   1fd86:	e7de      	b.n	1fd46 <nrf91_socket_offload_connect+0x2c>

0001fd88 <nrf91_socket_offload_getaddrinfo>:
{
   1fd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd8c:	4614      	mov	r4, r2
   1fd8e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1fd90:	2100      	movs	r1, #0
{
   1fd92:	b093      	sub	sp, #76	; 0x4c
   1fd94:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1fd96:	2220      	movs	r2, #32
   1fd98:	a802      	add	r0, sp, #8
{
   1fd9a:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1fd9c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1fd9e:	f7fc ff85 	bl	1ccac <memset>
	if (hints != NULL) {
   1fda2:	b194      	cbz	r4, 1fdca <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1fda4:	4620      	mov	r0, r4
   1fda6:	a902      	add	r1, sp, #8
   1fda8:	f7ff ff92 	bl	1fcd0 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1fdac:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1fdb0:	f000 80d8 	beq.w	1ff64 <nrf91_socket_offload_getaddrinfo+0x1dc>
		} else if (error == -EAFNOSUPPORT) {
   1fdb4:	302f      	adds	r0, #47	; 0x2f
   1fdb6:	f000 80d8 	beq.w	1ff6a <nrf91_socket_offload_getaddrinfo+0x1e2>
		if (hints->ai_next != NULL) {
   1fdba:	6820      	ldr	r0, [r4, #0]
   1fdbc:	b120      	cbz	r0, 1fdc8 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1fdbe:	ac0a      	add	r4, sp, #40	; 0x28
   1fdc0:	4621      	mov	r1, r4
   1fdc2:	f7ff ff85 	bl	1fcd0 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1fdc6:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1fdc8:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1fdca:	4628      	mov	r0, r5
   1fdcc:	4622      	mov	r2, r4
   1fdce:	4631      	mov	r1, r6
   1fdd0:	ab01      	add	r3, sp, #4
   1fdd2:	f7f9 f8db 	bl	18f8c <nrf_getaddrinfo>
	if (retval != 0) {
   1fdd6:	4605      	mov	r5, r0
   1fdd8:	b1b8      	cbz	r0, 1fe0a <nrf91_socket_offload_getaddrinfo+0x82>
	switch (nrf_error) {
   1fdda:	282f      	cmp	r0, #47	; 0x2f
   1fddc:	f000 80c8 	beq.w	1ff70 <nrf91_socket_offload_getaddrinfo+0x1e8>
   1fde0:	dc0c      	bgt.n	1fdfc <nrf91_socket_offload_getaddrinfo+0x74>
   1fde2:	280c      	cmp	r0, #12
   1fde4:	f000 80c7 	beq.w	1ff76 <nrf91_socket_offload_getaddrinfo+0x1ee>
   1fde8:	2823      	cmp	r0, #35	; 0x23
   1fdea:	bf14      	ite	ne
   1fdec:	f06f 050a 	mvnne.w	r5, #10
   1fdf0:	f06f 0502 	mvneq.w	r5, #2
}
   1fdf4:	4628      	mov	r0, r5
   1fdf6:	b013      	add	sp, #76	; 0x4c
   1fdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return DNS_EAI_INPROGRESS;
   1fdfc:	2873      	cmp	r0, #115	; 0x73
   1fdfe:	bf14      	ite	ne
   1fe00:	f06f 050a 	mvnne.w	r5, #10
   1fe04:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   1fe08:	e7f4      	b.n	1fdf4 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   1fe0a:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   1fe0c:	4682      	mov	sl, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1fe0e:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1fe10:	f8c8 0000 	str.w	r0, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1fe14:	b91e      	cbnz	r6, 1fe1e <nrf91_socket_offload_getaddrinfo+0x96>
	nrf_freeaddrinfo(nrf_res);
   1fe16:	9801      	ldr	r0, [sp, #4]
   1fe18:	f7f9 f8ba 	bl	18f90 <nrf_freeaddrinfo>
	return retval;
   1fe1c:	e7ea      	b.n	1fdf4 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   1fe1e:	2050      	movs	r0, #80	; 0x50
   1fe20:	f7fa ffe0 	bl	1ade4 <k_malloc>
		if (next_z_res == NULL) {
   1fe24:	4604      	mov	r4, r0
   1fe26:	2800      	cmp	r0, #0
   1fe28:	f000 808f 	beq.w	1ff4a <nrf91_socket_offload_getaddrinfo+0x1c2>
	z_out->ai_socktype = nrf_in->ai_socktype;
   1fe2c:	68b3      	ldr	r3, [r6, #8]
	z_out->ai_next = NULL;
   1fe2e:	f8c0 a000 	str.w	sl, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1fe32:	60c3      	str	r3, [r0, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   1fe34:	6873      	ldr	r3, [r6, #4]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1fe36:	f8c0 a01c 	str.w	sl, [r0, #28]
	switch (nrf_family) {
   1fe3a:	2b0a      	cmp	r3, #10
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1fe3c:	f8c0 a004 	str.w	sl, [r0, #4]
	switch (nrf_family) {
   1fe40:	dc23      	bgt.n	1fe8a <nrf91_socket_offload_getaddrinfo+0x102>
   1fe42:	2b00      	cmp	r3, #0
   1fe44:	dd23      	ble.n	1fe8e <nrf91_socket_offload_getaddrinfo+0x106>
   1fe46:	1e5a      	subs	r2, r3, #1
   1fe48:	2a09      	cmp	r2, #9
   1fe4a:	d820      	bhi.n	1fe8e <nrf91_socket_offload_getaddrinfo+0x106>
   1fe4c:	e8df f002 	tbb	[pc, r2]
   1fe50:	1f1f2905 	.word	0x1f1f2905
   1fe54:	1f1f1f25 	.word	0x1f1f1f25
   1fe58:	271f      	.short	0x271f
		return AF_LOCAL;
   1fe5a:	2206      	movs	r2, #6
	z_out->ai_family = family;
   1fe5c:	60a2      	str	r2, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1fe5e:	68f2      	ldr	r2, [r6, #12]
	switch (proto) {
   1fe60:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1fe64:	d04c      	beq.n	1ff00 <nrf91_socket_offload_getaddrinfo+0x178>
   1fe66:	dc26      	bgt.n	1feb6 <nrf91_socket_offload_getaddrinfo+0x12e>
   1fe68:	2a02      	cmp	r2, #2
   1fe6a:	d04c      	beq.n	1ff06 <nrf91_socket_offload_getaddrinfo+0x17e>
   1fe6c:	dc1d      	bgt.n	1feaa <nrf91_socket_offload_getaddrinfo+0x122>
   1fe6e:	b372      	cbz	r2, 1fece <nrf91_socket_offload_getaddrinfo+0x146>
   1fe70:	2a01      	cmp	r2, #1
   1fe72:	d04a      	beq.n	1ff0a <nrf91_socket_offload_getaddrinfo+0x182>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1fe74:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1fe78:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   1fe7a:	2300      	movs	r3, #0
   1fe7c:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   1fe7e:	4620      	mov	r0, r4
   1fe80:	f000 f9ff 	bl	20282 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1fe84:	f06f 0506 	mvn.w	r5, #6
   1fe88:	e061      	b.n	1ff4e <nrf91_socket_offload_getaddrinfo+0x1c6>
	switch (nrf_family) {
   1fe8a:	2b66      	cmp	r3, #102	; 0x66
   1fe8c:	d00b      	beq.n	1fea6 <nrf91_socket_offload_getaddrinfo+0x11e>
			k_free(next_z_res);
   1fe8e:	4620      	mov	r0, r4
   1fe90:	f000 f9f7 	bl	20282 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1fe94:	f06f 0508 	mvn.w	r5, #8
   1fe98:	e059      	b.n	1ff4e <nrf91_socket_offload_getaddrinfo+0x1c6>
		return AF_PACKET;
   1fe9a:	2203      	movs	r2, #3
   1fe9c:	e7de      	b.n	1fe5c <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_INET6;
   1fe9e:	2202      	movs	r2, #2
   1fea0:	e7dc      	b.n	1fe5c <nrf91_socket_offload_getaddrinfo+0xd4>
	switch (nrf_family) {
   1fea2:	2201      	movs	r2, #1
   1fea4:	e7da      	b.n	1fe5c <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_LTE;
   1fea6:	461a      	mov	r2, r3
   1fea8:	e7d8      	b.n	1fe5c <nrf91_socket_offload_getaddrinfo+0xd4>
	switch (proto) {
   1feaa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1feae:	d1e1      	bne.n	1fe74 <nrf91_socket_offload_getaddrinfo+0xec>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1feb0:	f44f 7281 	mov.w	r2, #258	; 0x102
   1feb4:	e00b      	b.n	1fece <nrf91_socket_offload_getaddrinfo+0x146>
	switch (proto) {
   1feb6:	f240 2102 	movw	r1, #514	; 0x202
   1feba:	428a      	cmp	r2, r1
   1febc:	d007      	beq.n	1fece <nrf91_socket_offload_getaddrinfo+0x146>
   1febe:	f240 2103 	movw	r1, #515	; 0x203
   1fec2:	428a      	cmp	r2, r1
   1fec4:	d003      	beq.n	1fece <nrf91_socket_offload_getaddrinfo+0x146>
   1fec6:	f240 2101 	movw	r1, #513	; 0x201
   1feca:	428a      	cmp	r2, r1
   1fecc:	d1d2      	bne.n	1fe74 <nrf91_socket_offload_getaddrinfo+0xec>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1fece:	2b02      	cmp	r3, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1fed0:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1fed2:	d11c      	bne.n	1ff0e <nrf91_socket_offload_getaddrinfo+0x186>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1fed4:	2008      	movs	r0, #8
   1fed6:	f7fa ff85 	bl	1ade4 <k_malloc>
   1feda:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1fedc:	b390      	cbz	r0, 1ff44 <nrf91_socket_offload_getaddrinfo+0x1bc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1fede:	2308      	movs	r3, #8
   1fee0:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1fee2:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1fee4:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1fee6:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1fee8:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1feea:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1feec:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1feee:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1fef0:	f1b9 0f00 	cmp.w	r9, #0
   1fef4:	d133      	bne.n	1ff5e <nrf91_socket_offload_getaddrinfo+0x1d6>
			*res = next_z_res;
   1fef6:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1fefa:	46a1      	mov	r9, r4
   1fefc:	69f6      	ldr	r6, [r6, #28]
   1fefe:	e789      	b.n	1fe14 <nrf91_socket_offload_getaddrinfo+0x8c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ff00:	f240 1211 	movw	r2, #273	; 0x111
   1ff04:	e7e3      	b.n	1fece <nrf91_socket_offload_getaddrinfo+0x146>
   1ff06:	2211      	movs	r2, #17
   1ff08:	e7e1      	b.n	1fece <nrf91_socket_offload_getaddrinfo+0x146>
   1ff0a:	2206      	movs	r2, #6
   1ff0c:	e7df      	b.n	1fece <nrf91_socket_offload_getaddrinfo+0x146>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1ff0e:	2b0a      	cmp	r3, #10
   1ff10:	d1b5      	bne.n	1fe7e <nrf91_socket_offload_getaddrinfo+0xf6>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1ff12:	2018      	movs	r0, #24
   1ff14:	f7fa ff66 	bl	1ade4 <k_malloc>
   1ff18:	4607      	mov	r7, r0
   1ff1a:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1ff1c:	b190      	cbz	r0, 1ff44 <nrf91_socket_offload_getaddrinfo+0x1bc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ff1e:	2318      	movs	r3, #24
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1ff20:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ff24:	6163      	str	r3, [r4, #20]
	ptr->sin6_port = nrf_in->sin6_port;
   1ff26:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ff2a:	2210      	movs	r2, #16
	ptr->sin6_port = nrf_in->sin6_port;
   1ff2c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1ff2e:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ff30:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_family = AF_INET6;
   1ff34:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ff38:	f7fc fe8d 	bl	1cc56 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1ff3c:	f8db 3020 	ldr.w	r3, [fp, #32]
   1ff40:	753b      	strb	r3, [r7, #20]
		} else if (error == -EAFNOSUPPORT) {
   1ff42:	e7d5      	b.n	1fef0 <nrf91_socket_offload_getaddrinfo+0x168>
			k_free(next_z_res);
   1ff44:	4620      	mov	r0, r4
   1ff46:	f000 f99c 	bl	20282 <k_free>
			retval = DNS_EAI_MEMORY;
   1ff4a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   1ff4e:	f8d8 0000 	ldr.w	r0, [r8]
   1ff52:	f7ff feb0 	bl	1fcb6 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1ff56:	2300      	movs	r3, #0
   1ff58:	f8c8 3000 	str.w	r3, [r8]
   1ff5c:	e75b      	b.n	1fe16 <nrf91_socket_offload_getaddrinfo+0x8e>
			latest_z_res->ai_next = next_z_res;
   1ff5e:	f8c9 4000 	str.w	r4, [r9]
   1ff62:	e7ca      	b.n	1fefa <nrf91_socket_offload_getaddrinfo+0x172>
			return DNS_EAI_SOCKTYPE;
   1ff64:	f06f 0506 	mvn.w	r5, #6
   1ff68:	e744      	b.n	1fdf4 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   1ff6a:	f06f 0508 	mvn.w	r5, #8
   1ff6e:	e741      	b.n	1fdf4 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   1ff70:	f06f 0501 	mvn.w	r5, #1
   1ff74:	e73e      	b.n	1fdf4 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   1ff76:	f06f 0509 	mvn.w	r5, #9
   1ff7a:	e73b      	b.n	1fdf4 <nrf91_socket_offload_getaddrinfo+0x6c>

0001ff7c <nrf91_socket_offload_sendto>:
{
   1ff7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ff80:	b08d      	sub	sp, #52	; 0x34
   1ff82:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1ff84:	460e      	mov	r6, r1
   1ff86:	4617      	mov	r7, r2
   1ff88:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   1ff8a:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   1ff8c:	b96c      	cbnz	r4, 1ffaa <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1ff8e:	4618      	mov	r0, r3
   1ff90:	f7ff fd96 	bl	1fac0 <z_to_nrf_flags>
   1ff94:	4603      	mov	r3, r0
   1ff96:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1ff9a:	463a      	mov	r2, r7
   1ff9c:	4631      	mov	r1, r6
   1ff9e:	4628      	mov	r0, r5
   1ffa0:	f7f8 ff3a 	bl	18e18 <nrf_sendto>
}
   1ffa4:	b00d      	add	sp, #52	; 0x34
   1ffa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1ffaa:	8823      	ldrh	r3, [r4, #0]
   1ffac:	2b01      	cmp	r3, #1
   1ffae:	d111      	bne.n	1ffd4 <nrf91_socket_offload_sendto+0x58>
	nrf_out->sin_port = ptr->sin_port;
   1ffb0:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1ffb2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1ffb4:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1ffb8:	2302      	movs	r3, #2
   1ffba:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1ffbc:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1ffbe:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1ffc0:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1ffc2:	f88d 200c 	strb.w	r2, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1ffc6:	f7ff fd7b 	bl	1fac0 <z_to_nrf_flags>
   1ffca:	4603      	mov	r3, r0
   1ffcc:	9201      	str	r2, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1ffce:	aa03      	add	r2, sp, #12
   1ffd0:	9200      	str	r2, [sp, #0]
   1ffd2:	e7e2      	b.n	1ff9a <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   1ffd4:	2b02      	cmp	r3, #2
   1ffd6:	d116      	bne.n	20006 <nrf91_socket_offload_sendto+0x8a>
	nrf_out->sin6_port = ptr->sin6_port;
   1ffd8:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1ffda:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1ffde:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1ffe2:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1ffe4:	2210      	movs	r2, #16
   1ffe6:	1d21      	adds	r1, r4, #4
   1ffe8:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1ffea:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1ffec:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fff0:	f7fc fe31 	bl	1cc56 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1fff4:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1fff6:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1fff8:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1fffa:	f7ff fd61 	bl	1fac0 <z_to_nrf_flags>
   1fffe:	f8cd 9004 	str.w	r9, [sp, #4]
   20002:	4603      	mov	r3, r0
   20004:	e7e3      	b.n	1ffce <nrf91_socket_offload_sendto+0x52>
	errno = ENOTSUP;
   20006:	f7ff fdb2 	bl	1fb6e <z_errno>
   2000a:	2323      	movs	r3, #35	; 0x23
   2000c:	6003      	str	r3, [r0, #0]
	return retval;
   2000e:	f04f 30ff 	mov.w	r0, #4294967295
   20012:	e7c7      	b.n	1ffa4 <nrf91_socket_offload_sendto+0x28>

00020014 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   20014:	2300      	movs	r3, #0
{
   20016:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   20018:	e9cd 3300 	strd	r3, r3, [sp]
   2001c:	f7ff ffae 	bl	1ff7c <nrf91_socket_offload_sendto>
}
   20020:	b003      	add	sp, #12
   20022:	f85d fb04 	ldr.w	pc, [sp], #4

00020026 <nrf91_socket_offload_setsockopt>:
{
   20026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2002a:	461d      	mov	r5, r3
	switch (z_in_level) {
   2002c:	f240 2302 	movw	r3, #514	; 0x202
{
   20030:	b086      	sub	sp, #24
	switch (z_in_level) {
   20032:	4299      	cmp	r1, r3
{
   20034:	460c      	mov	r4, r1
   20036:	4616      	mov	r6, r2
   20038:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   2003a:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   2003e:	d005      	beq.n	2004c <nrf91_socket_offload_setsockopt+0x26>
   20040:	dc1f      	bgt.n	20082 <nrf91_socket_offload_setsockopt+0x5c>
   20042:	2901      	cmp	r1, #1
   20044:	d002      	beq.n	2004c <nrf91_socket_offload_setsockopt+0x26>
   20046:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2004a:	d125      	bne.n	20098 <nrf91_socket_offload_setsockopt+0x72>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2004c:	4631      	mov	r1, r6
   2004e:	4620      	mov	r0, r4
   20050:	aa03      	add	r2, sp, #12
   20052:	f7f2 fa67 	bl	12524 <z_to_nrf_optname>
   20056:	2800      	cmp	r0, #0
   20058:	db1e      	blt.n	20098 <nrf91_socket_offload_setsockopt+0x72>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   2005a:	2c01      	cmp	r4, #1
   2005c:	d115      	bne.n	2008a <nrf91_socket_offload_setsockopt+0x64>
   2005e:	2e14      	cmp	r6, #20
   20060:	d105      	bne.n	2006e <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(struct nrf_timeval);
   20062:	2708      	movs	r7, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   20064:	682b      	ldr	r3, [r5, #0]
   20066:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   20068:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   2006a:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2006c:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2006e:	462b      	mov	r3, r5
   20070:	4621      	mov	r1, r4
   20072:	4640      	mov	r0, r8
   20074:	9a03      	ldr	r2, [sp, #12]
   20076:	9700      	str	r7, [sp, #0]
   20078:	f7f8 ff50 	bl	18f1c <nrf_setsockopt>
}
   2007c:	b006      	add	sp, #24
   2007e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   20082:	f240 2303 	movw	r3, #515	; 0x203
   20086:	4299      	cmp	r1, r3
   20088:	e7df      	b.n	2004a <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2008a:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   2008e:	d1ee      	bne.n	2006e <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   20090:	2e07      	cmp	r6, #7
   20092:	bf08      	it	eq
   20094:	2701      	moveq	r7, #1
   20096:	e7ea      	b.n	2006e <nrf91_socket_offload_setsockopt+0x48>
	errno = ENOPROTOOPT;
   20098:	f7ff fd69 	bl	1fb6e <z_errno>
   2009c:	232a      	movs	r3, #42	; 0x2a
   2009e:	6003      	str	r3, [r0, #0]
   200a0:	f04f 30ff 	mov.w	r0, #4294967295
   200a4:	e7ea      	b.n	2007c <nrf91_socket_offload_setsockopt+0x56>

000200a6 <nrf91_socket_offload_bind>:
{
   200a6:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   200a8:	880b      	ldrh	r3, [r1, #0]
{
   200aa:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   200ac:	2b01      	cmp	r3, #1
{
   200ae:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   200b0:	f100 35ff 	add.w	r5, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   200b4:	d10f      	bne.n	200d6 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   200b6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   200b8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   200ba:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   200be:	2302      	movs	r3, #2
   200c0:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   200c2:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   200c4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   200c8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   200ca:	4628      	mov	r0, r5
   200cc:	a901      	add	r1, sp, #4
   200ce:	f7f8 ff13 	bl	18ef8 <nrf_bind>
}
   200d2:	b00a      	add	sp, #40	; 0x28
   200d4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   200d6:	2b02      	cmp	r3, #2
   200d8:	d110      	bne.n	200fc <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   200da:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   200dc:	2624      	movs	r6, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   200de:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   200e2:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   200e4:	2210      	movs	r2, #16
   200e6:	3104      	adds	r1, #4
   200e8:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   200ea:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   200ec:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   200f0:	f7fc fdb1 	bl	1cc56 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   200f4:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   200f6:	4632      	mov	r2, r6
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   200f8:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   200fa:	e7e6      	b.n	200ca <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   200fc:	f7ff fd37 	bl	1fb6e <z_errno>
   20100:	2323      	movs	r3, #35	; 0x23
   20102:	6003      	str	r3, [r0, #0]
   20104:	f04f 30ff 	mov.w	r0, #4294967295
   20108:	e7e3      	b.n	200d2 <nrf91_socket_offload_bind+0x2c>

0002010a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2010a:	f000 ba74 	b.w	205f6 <z_impl_k_busy_wait>

0002010e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2010e:	f7fc bc58 	b.w	1c9c2 <z_clock_idle_exit>

00020112 <k_heap_init>:
{
   20112:	b410      	push	{r4}
   20114:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   20118:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2011c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   20120:	f7fc b897 	b.w	1c252 <sys_heap_init>

00020124 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   20124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20128:	4605      	mov	r5, r0
   2012a:	b085      	sub	sp, #20
   2012c:	460f      	mov	r7, r1
	s64_t now, end = z_timeout_end_calc(timeout);
   2012e:	4610      	mov	r0, r2
   20130:	4619      	mov	r1, r3
   20132:	f000 fb37 	bl	207a4 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20136:	f105 0b14 	add.w	fp, r5, #20
	s64_t now, end = z_timeout_end_calc(timeout);
   2013a:	9002      	str	r0, [sp, #8]
   2013c:	468a      	mov	sl, r1
	__asm__ volatile(
   2013e:	f04f 0320 	mov.w	r3, #32
   20142:	f3ef 8411 	mrs	r4, BASEPRI
   20146:	f383 8811 	msr	BASEPRI, r3
   2014a:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2014e:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   20152:	4639      	mov	r1, r7
   20154:	4628      	mov	r0, r5
   20156:	f7fc f823 	bl	1c1a0 <sys_heap_alloc>
   2015a:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   2015c:	f7fb fd48 	bl	1bbf0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   20160:	9b03      	ldr	r3, [sp, #12]
   20162:	b13b      	cbz	r3, 20174 <k_heap_alloc+0x50>
	__asm__ volatile(
   20164:	f384 8811 	msr	BASEPRI, r4
   20168:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2016c:	4618      	mov	r0, r3
   2016e:	b005      	add	sp, #20
   20170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   20174:	9a02      	ldr	r2, [sp, #8]
   20176:	ebb2 0800 	subs.w	r8, r2, r0
   2017a:	eb6a 0901 	sbc.w	r9, sl, r1
   2017e:	f1b8 0f01 	cmp.w	r8, #1
   20182:	f179 0200 	sbcs.w	r2, r9, #0
   20186:	dbed      	blt.n	20164 <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20188:	4632      	mov	r2, r6
   2018a:	4621      	mov	r1, r4
   2018c:	4658      	mov	r0, fp
   2018e:	e9cd 8900 	strd	r8, r9, [sp]
   20192:	f7fb f9a9 	bl	1b4e8 <z_pend_curr>
	__asm__ volatile(
   20196:	f04f 0320 	mov.w	r3, #32
   2019a:	f3ef 8411 	mrs	r4, BASEPRI
   2019e:	f383 8811 	msr	BASEPRI, r3
   201a2:	f3bf 8f6f 	isb	sy
   201a6:	e7d4      	b.n	20152 <k_heap_alloc+0x2e>

000201a8 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   201a8:	b538      	push	{r3, r4, r5, lr}
   201aa:	4604      	mov	r4, r0
   201ac:	f04f 0320 	mov.w	r3, #32
   201b0:	f3ef 8511 	mrs	r5, BASEPRI
   201b4:	f383 8811 	msr	BASEPRI, r3
   201b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   201bc:	f7fb ff3a 	bl	1c034 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   201c0:	f104 000c 	add.w	r0, r4, #12
   201c4:	f000 f9f1 	bl	205aa <z_unpend_all>
   201c8:	b130      	cbz	r0, 201d8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   201ca:	4629      	mov	r1, r5
   201cc:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   201d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   201d4:	f000 b905 	b.w	203e2 <z_reschedule>
	__asm__ volatile(
   201d8:	f385 8811 	msr	BASEPRI, r5
   201dc:	f3bf 8f6f 	isb	sy
}
   201e0:	bd38      	pop	{r3, r4, r5, pc}

000201e2 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   201e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201e4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   201e8:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   201ea:	6800      	ldr	r0, [r0, #0]
{
   201ec:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   201ee:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   201f0:	4632      	mov	r2, r6
   201f2:	463b      	mov	r3, r7
   201f4:	4621      	mov	r1, r4
   201f6:	f7ff ff95 	bl	20124 <k_heap_alloc>
   201fa:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   201fc:	b144      	cbz	r4, 20210 <k_mem_pool_alloc+0x2e>
   201fe:	b938      	cbnz	r0, 20210 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   20200:	ea56 0307 	orrs.w	r3, r6, r7
   20204:	bf0c      	ite	eq
   20206:	f06f 000b 	mvneq.w	r0, #11
   2020a:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   2020e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   20210:	2000      	movs	r0, #0
   20212:	e7fc      	b.n	2020e <k_mem_pool_alloc+0x2c>

00020214 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   20214:	e9d0 1000 	ldrd	r1, r0, [r0]
   20218:	f7ff bfc6 	b.w	201a8 <k_heap_free>

0002021c <k_mem_slab_init>:
{
   2021c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2021e:	2400      	movs	r4, #0
   20220:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20222:	ea41 0402 	orr.w	r4, r1, r2
   20226:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2022a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2022e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20230:	d10c      	bne.n	2024c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   20232:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20234:	42a3      	cmp	r3, r4
   20236:	d103      	bne.n	20240 <k_mem_slab_init+0x24>
   20238:	e9c0 0000 	strd	r0, r0, [r0]
}
   2023c:	2000      	movs	r0, #0
}
   2023e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   20240:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20242:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   20244:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   20246:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   20248:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2024a:	e7f3      	b.n	20234 <k_mem_slab_init+0x18>
		return -EINVAL;
   2024c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20250:	e7f5      	b.n	2023e <k_mem_slab_init+0x22>

00020252 <k_mem_pool_malloc>:
{
   20252:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20254:	2408      	movs	r4, #8
   20256:	190a      	adds	r2, r1, r4
   20258:	d208      	bcs.n	2026c <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2025a:	2600      	movs	r6, #0
   2025c:	2700      	movs	r7, #0
   2025e:	eb0d 0104 	add.w	r1, sp, r4
   20262:	e9cd 6700 	strd	r6, r7, [sp]
   20266:	f7ff ffbc 	bl	201e2 <k_mem_pool_alloc>
   2026a:	b110      	cbz	r0, 20272 <k_mem_pool_malloc+0x20>
		return NULL;
   2026c:	2000      	movs	r0, #0
}
   2026e:	b004      	add	sp, #16
   20270:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   20272:	4622      	mov	r2, r4
   20274:	9802      	ldr	r0, [sp, #8]
   20276:	a902      	add	r1, sp, #8
   20278:	f7fc fced 	bl	1cc56 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2027c:	9802      	ldr	r0, [sp, #8]
   2027e:	3008      	adds	r0, #8
   20280:	e7f5      	b.n	2026e <k_mem_pool_malloc+0x1c>

00020282 <k_free>:
	if (ptr != NULL) {
   20282:	b110      	cbz	r0, 2028a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   20284:	3808      	subs	r0, #8
   20286:	f7ff bfc5 	b.w	20214 <k_mem_pool_free_id>
}
   2028a:	4770      	bx	lr

0002028c <queue_insert>:
{
   2028c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20290:	4604      	mov	r4, r0
   20292:	460d      	mov	r5, r1
   20294:	4690      	mov	r8, r2
   20296:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20298:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2029c:	f04f 0320 	mov.w	r3, #32
   202a0:	f3ef 8711 	mrs	r7, BASEPRI
   202a4:	f383 8811 	msr	BASEPRI, r3
   202a8:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   202ac:	4630      	mov	r0, r6
   202ae:	f000 f94f 	bl	20550 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   202b2:	b158      	cbz	r0, 202cc <queue_insert+0x40>
   202b4:	2400      	movs	r4, #0
   202b6:	f8c0 8014 	str.w	r8, [r0, #20]
   202ba:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
   202bc:	f000 f8d5 	bl	2046a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   202c0:	4630      	mov	r0, r6
   202c2:	4639      	mov	r1, r7
   202c4:	f000 f88d 	bl	203e2 <z_reschedule>
	return 0;
   202c8:	2000      	movs	r0, #0
   202ca:	e00c      	b.n	202e6 <queue_insert+0x5a>
	if (alloc) {
   202cc:	f1b9 0f00 	cmp.w	r9, #0
   202d0:	d01b      	beq.n	2030a <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   202d2:	2008      	movs	r0, #8
   202d4:	f7fa fd8c 	bl	1adf0 <z_thread_malloc>
		if (anode == NULL) {
   202d8:	b938      	cbnz	r0, 202ea <queue_insert+0x5e>
	__asm__ volatile(
   202da:	f387 8811 	msr	BASEPRI, r7
   202de:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   202e2:	f06f 000b 	mvn.w	r0, #11
}
   202e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   202ea:	2301      	movs	r3, #1
		anode->data = data;
   202ec:	f8c0 8004 	str.w	r8, [r0, #4]
   202f0:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   202f2:	6803      	ldr	r3, [r0, #0]
   202f4:	f003 0203 	and.w	r2, r3, #3
   202f8:	b95d      	cbnz	r5, 20312 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   202fa:	6823      	ldr	r3, [r4, #0]
   202fc:	4313      	orrs	r3, r2
   202fe:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20300:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20302:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20304:	b973      	cbnz	r3, 20324 <queue_insert+0x98>
	list->tail = node;
   20306:	6060      	str	r0, [r4, #4]
}
   20308:	e00c      	b.n	20324 <queue_insert+0x98>
}
   2030a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2030c:	f8c8 9000 	str.w	r9, [r8]
}
   20310:	e7ef      	b.n	202f2 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20312:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20314:	f033 0303 	bics.w	r3, r3, #3
   20318:	d110      	bne.n	2033c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2031a:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2031c:	6862      	ldr	r2, [r4, #4]
   2031e:	b93a      	cbnz	r2, 20330 <queue_insert+0xa4>
	list->head = node;
   20320:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20324:	2104      	movs	r1, #4
   20326:	f104 0010 	add.w	r0, r4, #16
   2032a:	f000 faad 	bl	20888 <z_handle_obj_poll_events>
   2032e:	e7c7      	b.n	202c0 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20330:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20332:	f003 0303 	and.w	r3, r3, #3
   20336:	4303      	orrs	r3, r0
   20338:	6013      	str	r3, [r2, #0]
   2033a:	e7e4      	b.n	20306 <queue_insert+0x7a>
   2033c:	4313      	orrs	r3, r2
   2033e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20340:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20342:	f003 0303 	and.w	r3, r3, #3
   20346:	4303      	orrs	r3, r0
   20348:	602b      	str	r3, [r5, #0]
}
   2034a:	e7eb      	b.n	20324 <queue_insert+0x98>

0002034c <z_queue_node_peek>:
{
   2034c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   2034e:	4604      	mov	r4, r0
   20350:	b130      	cbz	r0, 20360 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20352:	6802      	ldr	r2, [r0, #0]
   20354:	0793      	lsls	r3, r2, #30
   20356:	d003      	beq.n	20360 <z_queue_node_peek+0x14>
		ret = anode->data;
   20358:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2035a:	b109      	cbz	r1, 20360 <z_queue_node_peek+0x14>
			k_free(anode);
   2035c:	f7ff ff91 	bl	20282 <k_free>
}
   20360:	4620      	mov	r0, r4
   20362:	bd10      	pop	{r4, pc}

00020364 <z_impl_k_queue_init>:
	list->head = NULL;
   20364:	2300      	movs	r3, #0
	list->tail = NULL;
   20366:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2036a:	f100 0308 	add.w	r3, r0, #8
   2036e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   20372:	f100 0310 	add.w	r3, r0, #16
   20376:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2037a:	4770      	bx	lr

0002037c <k_queue_append>:
{
   2037c:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2037e:	2300      	movs	r3, #0
   20380:	6841      	ldr	r1, [r0, #4]
   20382:	f7ff bf83 	b.w	2028c <queue_insert>

00020386 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   20386:	2300      	movs	r3, #0
{
   20388:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   2038a:	4619      	mov	r1, r3
   2038c:	f7ff bf7e 	b.w	2028c <queue_insert>

00020390 <z_find_first_thread_to_unpend>:
{
   20390:	b510      	push	{r4, lr}
	__asm__ volatile(
   20392:	f04f 0320 	mov.w	r3, #32
   20396:	f3ef 8411 	mrs	r4, BASEPRI
   2039a:	f383 8811 	msr	BASEPRI, r3
   2039e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   203a2:	f000 f85c 	bl	2045e <z_priq_dumb_best>
	__asm__ volatile(
   203a6:	f384 8811 	msr	BASEPRI, r4
   203aa:	f3bf 8f6f 	isb	sy
}
   203ae:	bd10      	pop	{r4, pc}

000203b0 <z_unpend_thread_no_timeout>:
{
   203b0:	b538      	push	{r3, r4, r5, lr}
   203b2:	4604      	mov	r4, r0
	__asm__ volatile(
   203b4:	f04f 0320 	mov.w	r3, #32
   203b8:	f3ef 8511 	mrs	r5, BASEPRI
   203bc:	f383 8811 	msr	BASEPRI, r3
   203c0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   203c4:	4601      	mov	r1, r0
   203c6:	6880      	ldr	r0, [r0, #8]
   203c8:	f7fa fe74 	bl	1b0b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   203cc:	7b63      	ldrb	r3, [r4, #13]
   203ce:	f023 0302 	bic.w	r3, r3, #2
   203d2:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   203d4:	2300      	movs	r3, #0
   203d6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   203d8:	f385 8811 	msr	BASEPRI, r5
   203dc:	f3bf 8f6f 	isb	sy
}
   203e0:	bd38      	pop	{r3, r4, r5, pc}

000203e2 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   203e2:	b921      	cbnz	r1, 203ee <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   203e4:	f3ef 8005 	mrs	r0, IPSR
   203e8:	b908      	cbnz	r0, 203ee <z_reschedule+0xc>
   203ea:	f7ed bd49 	b.w	de80 <arch_swap>
   203ee:	f381 8811 	msr	BASEPRI, r1
   203f2:	f3bf 8f6f 	isb	sy
}
   203f6:	4770      	bx	lr

000203f8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   203f8:	4603      	mov	r3, r0
   203fa:	b920      	cbnz	r0, 20406 <z_reschedule_irqlock+0xe>
   203fc:	f3ef 8205 	mrs	r2, IPSR
   20400:	b90a      	cbnz	r2, 20406 <z_reschedule_irqlock+0xe>
   20402:	f7ed bd3d 	b.w	de80 <arch_swap>
   20406:	f383 8811 	msr	BASEPRI, r3
   2040a:	f3bf 8f6f 	isb	sy
}
   2040e:	4770      	bx	lr

00020410 <z_reschedule_unlocked>:
	__asm__ volatile(
   20410:	f04f 0320 	mov.w	r3, #32
   20414:	f3ef 8011 	mrs	r0, BASEPRI
   20418:	f383 8811 	msr	BASEPRI, r3
   2041c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   20420:	f7ff bfea 	b.w	203f8 <z_reschedule_irqlock>

00020424 <z_unpend_thread>:
{
   20424:	b510      	push	{r4, lr}
   20426:	4601      	mov	r1, r0
   20428:	f04f 0320 	mov.w	r3, #32
   2042c:	f3ef 8411 	mrs	r4, BASEPRI
   20430:	f383 8811 	msr	BASEPRI, r3
   20434:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20438:	6880      	ldr	r0, [r0, #8]
   2043a:	f7fa fe3b 	bl	1b0b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2043e:	7b4b      	ldrb	r3, [r1, #13]
   20440:	f023 0302 	bic.w	r3, r3, #2
   20444:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   20446:	2300      	movs	r3, #0
   20448:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   2044a:	f384 8811 	msr	BASEPRI, r4
   2044e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   20452:	f101 0018 	add.w	r0, r1, #24
}
   20456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2045a:	f000 b94c 	b.w	206f6 <z_abort_timeout>

0002045e <z_priq_dumb_best>:
	return list->head == list;
   2045e:	6803      	ldr	r3, [r0, #0]
}
   20460:	4298      	cmp	r0, r3
   20462:	bf14      	ite	ne
   20464:	4618      	movne	r0, r3
   20466:	2000      	moveq	r0, #0
   20468:	4770      	bx	lr

0002046a <z_ready_thread>:
{
   2046a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2046c:	f04f 0320 	mov.w	r3, #32
   20470:	f3ef 8411 	mrs	r4, BASEPRI
   20474:	f383 8811 	msr	BASEPRI, r3
   20478:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2047c:	f7fa fe70 	bl	1b160 <ready_thread>
	__asm__ volatile(
   20480:	f384 8811 	msr	BASEPRI, r4
   20484:	f3bf 8f6f 	isb	sy
}
   20488:	bd10      	pop	{r4, pc}

0002048a <z_thread_timeout>:
{
   2048a:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   2048c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   20490:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   20492:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   20496:	b1c3      	cbz	r3, 204ca <z_thread_timeout+0x40>
	__asm__ volatile(
   20498:	f04f 0320 	mov.w	r3, #32
   2049c:	f3ef 8511 	mrs	r5, BASEPRI
   204a0:	f383 8811 	msr	BASEPRI, r3
   204a4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   204a8:	f850 0c10 	ldr.w	r0, [r0, #-16]
   204ac:	f7fa fe02 	bl	1b0b4 <z_priq_dumb_remove>
   204b0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   204b4:	f023 0302 	bic.w	r3, r3, #2
   204b8:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   204bc:	2300      	movs	r3, #0
   204be:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   204c2:	f385 8811 	msr	BASEPRI, r5
   204c6:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   204ca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   204ce:	4608      	mov	r0, r1
   204d0:	f023 0314 	bic.w	r3, r3, #20
   204d4:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   204d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   204dc:	f7ff bfc5 	b.w	2046a <z_ready_thread>

000204e0 <z_remove_thread_from_ready_q>:
{
   204e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   204e2:	f04f 0320 	mov.w	r3, #32
   204e6:	f3ef 8411 	mrs	r4, BASEPRI
   204ea:	f383 8811 	msr	BASEPRI, r3
   204ee:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   204f2:	f7fa ff8b 	bl	1b40c <unready_thread>
	__asm__ volatile(
   204f6:	f384 8811 	msr	BASEPRI, r4
   204fa:	f3bf 8f6f 	isb	sy
}
   204fe:	bd10      	pop	{r4, pc}

00020500 <add_to_waitq_locked>:
{
   20500:	b538      	push	{r3, r4, r5, lr}
   20502:	4604      	mov	r4, r0
   20504:	460d      	mov	r5, r1
	unready_thread(thread);
   20506:	f7fa ff81 	bl	1b40c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2050a:	7b63      	ldrb	r3, [r4, #13]
   2050c:	f043 0302 	orr.w	r3, r3, #2
   20510:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   20512:	b17d      	cbz	r5, 20534 <add_to_waitq_locked+0x34>
   20514:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   20516:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20518:	429d      	cmp	r5, r3
   2051a:	d012      	beq.n	20542 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2051c:	b18b      	cbz	r3, 20542 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   2051e:	f994 200e 	ldrsb.w	r2, [r4, #14]
   20522:	f993 100e 	ldrsb.w	r1, [r3, #14]
   20526:	4291      	cmp	r1, r2
   20528:	dd05      	ble.n	20536 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   2052a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2052c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   20530:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20532:	605c      	str	r4, [r3, #4]
}
   20534:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   20536:	6869      	ldr	r1, [r5, #4]
   20538:	428b      	cmp	r3, r1
   2053a:	d002      	beq.n	20542 <add_to_waitq_locked+0x42>
   2053c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2053e:	2b00      	cmp	r3, #0
   20540:	d1ef      	bne.n	20522 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   20542:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   20544:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   20546:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   20548:	686b      	ldr	r3, [r5, #4]
   2054a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2054c:	606c      	str	r4, [r5, #4]
}
   2054e:	e7f1      	b.n	20534 <add_to_waitq_locked+0x34>

00020550 <z_unpend_first_thread>:
{
   20550:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20552:	f04f 0320 	mov.w	r3, #32
   20556:	f3ef 8211 	mrs	r2, BASEPRI
   2055a:	f383 8811 	msr	BASEPRI, r3
   2055e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   20562:	f7ff ff7c 	bl	2045e <z_priq_dumb_best>
   20566:	4604      	mov	r4, r0
	__asm__ volatile(
   20568:	f382 8811 	msr	BASEPRI, r2
   2056c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   20570:	b1c8      	cbz	r0, 205a6 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   20572:	f04f 0320 	mov.w	r3, #32
   20576:	f3ef 8511 	mrs	r5, BASEPRI
   2057a:	f383 8811 	msr	BASEPRI, r3
   2057e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20582:	4601      	mov	r1, r0
   20584:	6880      	ldr	r0, [r0, #8]
   20586:	f7fa fd95 	bl	1b0b4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2058a:	7b63      	ldrb	r3, [r4, #13]
   2058c:	f023 0302 	bic.w	r3, r3, #2
   20590:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   20592:	2300      	movs	r3, #0
   20594:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   20596:	f385 8811 	msr	BASEPRI, r5
   2059a:	f3bf 8f6f 	isb	sy
   2059e:	f104 0018 	add.w	r0, r4, #24
   205a2:	f000 f8a8 	bl	206f6 <z_abort_timeout>
}
   205a6:	4620      	mov	r0, r4
   205a8:	bd38      	pop	{r3, r4, r5, pc}

000205aa <z_unpend_all>:
{
   205aa:	b538      	push	{r3, r4, r5, lr}
   205ac:	4605      	mov	r5, r0
	int need_sched = 0;
   205ae:	2000      	movs	r0, #0
	return list->head == list;
   205b0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205b2:	42a5      	cmp	r5, r4
   205b4:	d000      	beq.n	205b8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   205b6:	b904      	cbnz	r4, 205ba <z_unpend_all+0x10>
}
   205b8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   205ba:	4620      	mov	r0, r4
   205bc:	f7ff ff32 	bl	20424 <z_unpend_thread>
		z_ready_thread(thread);
   205c0:	4620      	mov	r0, r4
   205c2:	f7ff ff52 	bl	2046a <z_ready_thread>
		need_sched = 1;
   205c6:	2001      	movs	r0, #1
   205c8:	e7f2      	b.n	205b0 <z_unpend_all+0x6>

000205ca <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   205ca:	b15a      	cbz	r2, 205e4 <z_impl_k_sem_init+0x1a>
   205cc:	428a      	cmp	r2, r1
   205ce:	d309      	bcc.n	205e4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   205d0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   205d4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   205d8:	e9c0 0000 	strd	r0, r0, [r0]
   205dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   205e0:	2000      	movs	r0, #0
   205e2:	4770      	bx	lr
		return -EINVAL;
   205e4:	f06f 0015 	mvn.w	r0, #21
}
   205e8:	4770      	bx	lr

000205ea <k_is_in_isr>:
   205ea:	f3ef 8005 	mrs	r0, IPSR
}
   205ee:	3800      	subs	r0, #0
   205f0:	bf18      	it	ne
   205f2:	2001      	movne	r0, #1
   205f4:	4770      	bx	lr

000205f6 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   205f6:	f7ec bd3b 	b.w	d070 <arch_busy_wait>

000205fa <z_impl_k_thread_name_set>:
}
   205fa:	f06f 0046 	mvn.w	r0, #70	; 0x46
   205fe:	4770      	bx	lr

00020600 <k_thread_name_get>:
}
   20600:	2000      	movs	r0, #0
   20602:	4770      	bx	lr

00020604 <k_work_submit_to_queue>:
{
   20604:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20606:	f101 0308 	add.w	r3, r1, #8
   2060a:	e8d3 2fef 	ldaex	r2, [r3]
   2060e:	f042 0c01 	orr.w	ip, r2, #1
   20612:	e8c3 cfee 	stlex	lr, ip, [r3]
   20616:	f1be 0f00 	cmp.w	lr, #0
   2061a:	d1f6      	bne.n	2060a <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2061c:	07d3      	lsls	r3, r2, #31
   2061e:	d403      	bmi.n	20628 <k_work_submit_to_queue+0x24>
}
   20620:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   20624:	f7ff beaa 	b.w	2037c <k_queue_append>
}
   20628:	f85d fb04 	ldr.w	pc, [sp], #4

0002062c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2062c:	f1a0 010c 	sub.w	r1, r0, #12
   20630:	6900      	ldr	r0, [r0, #16]
   20632:	f7ff bfe7 	b.w	20604 <k_work_submit_to_queue>

00020636 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   20636:	69c3      	ldr	r3, [r0, #28]
{
   20638:	b570      	push	{r4, r5, r6, lr}
   2063a:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   2063c:	b913      	cbnz	r3, 20644 <work_cancel+0xe>
		return -EALREADY;
   2063e:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   20642:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   20644:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20648:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   2064c:	07db      	lsls	r3, r3, #31
   2064e:	d52f      	bpl.n	206b0 <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20650:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   20652:	69c2      	ldr	r2, [r0, #28]
   20654:	6813      	ldr	r3, [r2, #0]
   20656:	b913      	cbnz	r3, 2065e <work_cancel+0x28>
			return -EINVAL;
   20658:	f06f 0015 	mvn.w	r0, #21
   2065c:	e7f1      	b.n	20642 <work_cancel+0xc>
   2065e:	429c      	cmp	r4, r3
   20660:	d121      	bne.n	206a6 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   20662:	6823      	ldr	r3, [r4, #0]
   20664:	6856      	ldr	r6, [r2, #4]
   20666:	f023 0003 	bic.w	r0, r3, #3
   2066a:	b991      	cbnz	r1, 20692 <work_cancel+0x5c>
   2066c:	42b4      	cmp	r4, r6
	list->head = node;
   2066e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   20670:	d100      	bne.n	20674 <work_cancel+0x3e>
	list->tail = node;
   20672:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20674:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20676:	f003 0303 	and.w	r3, r3, #3
   2067a:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2067c:	2000      	movs	r0, #0
   2067e:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20680:	e8d5 3fef 	ldaex	r3, [r5]
   20684:	f023 0301 	bic.w	r3, r3, #1
   20688:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2068c:	2a00      	cmp	r2, #0
   2068e:	d0d8      	beq.n	20642 <work_cancel+0xc>
   20690:	e7f6      	b.n	20680 <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20692:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   20694:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   20696:	f003 0303 	and.w	r3, r3, #3
   2069a:	ea43 0300 	orr.w	r3, r3, r0
   2069e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   206a0:	bf08      	it	eq
   206a2:	6051      	streq	r1, [r2, #4]
}
   206a4:	e7e6      	b.n	20674 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   206a6:	6818      	ldr	r0, [r3, #0]
   206a8:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   206aa:	f020 0303 	bic.w	r3, r0, #3
   206ae:	e7d2      	b.n	20656 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   206b0:	300c      	adds	r0, #12
   206b2:	f000 f820 	bl	206f6 <z_abort_timeout>
		if (err) {
   206b6:	2800      	cmp	r0, #0
   206b8:	d0e0      	beq.n	2067c <work_cancel+0x46>
   206ba:	e7c0      	b.n	2063e <work_cancel+0x8>

000206bc <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   206bc:	2300      	movs	r3, #0
   206be:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   206c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   206c6:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   206c8:	61c3      	str	r3, [r0, #28]
}
   206ca:	4770      	bx	lr

000206cc <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   206cc:	69c3      	ldr	r3, [r0, #28]
{
   206ce:	b510      	push	{r4, lr}
	if (!work->work_q) {
   206d0:	b173      	cbz	r3, 206f0 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   206d2:	f04f 0320 	mov.w	r3, #32
   206d6:	f3ef 8411 	mrs	r4, BASEPRI
   206da:	f383 8811 	msr	BASEPRI, r3
   206de:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   206e2:	f7ff ffa8 	bl	20636 <work_cancel>
	__asm__ volatile(
   206e6:	f384 8811 	msr	BASEPRI, r4
   206ea:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   206ee:	bd10      	pop	{r4, pc}
		return -EINVAL;
   206f0:	f06f 0015 	mvn.w	r0, #21
   206f4:	e7fb      	b.n	206ee <k_delayed_work_cancel+0x22>

000206f6 <z_abort_timeout>:
{
   206f6:	b510      	push	{r4, lr}
	__asm__ volatile(
   206f8:	f04f 0220 	mov.w	r2, #32
   206fc:	f3ef 8411 	mrs	r4, BASEPRI
   20700:	f382 8811 	msr	BASEPRI, r2
   20704:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20708:	6803      	ldr	r3, [r0, #0]
   2070a:	b13b      	cbz	r3, 2071c <z_abort_timeout+0x26>
			remove_timeout(to);
   2070c:	f7fb f94c 	bl	1b9a8 <remove_timeout>
			ret = 0;
   20710:	2000      	movs	r0, #0
	__asm__ volatile(
   20712:	f384 8811 	msr	BASEPRI, r4
   20716:	f3bf 8f6f 	isb	sy
}
   2071a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2071c:	f06f 0015 	mvn.w	r0, #21
   20720:	e7f7      	b.n	20712 <z_abort_timeout+0x1c>

00020722 <z_timeout_remaining>:
{
   20722:	b510      	push	{r4, lr}
	__asm__ volatile(
   20724:	f04f 0320 	mov.w	r3, #32
   20728:	f3ef 8411 	mrs	r4, BASEPRI
   2072c:	f383 8811 	msr	BASEPRI, r3
   20730:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   20734:	f7fb f968 	bl	1ba08 <timeout_rem>
	__asm__ volatile(
   20738:	f384 8811 	msr	BASEPRI, r4
   2073c:	f3bf 8f6f 	isb	sy
}
   20740:	bd10      	pop	{r4, pc}

00020742 <z_get_next_timeout_expiry>:
{
   20742:	b510      	push	{r4, lr}
	__asm__ volatile(
   20744:	f04f 0320 	mov.w	r3, #32
   20748:	f3ef 8411 	mrs	r4, BASEPRI
   2074c:	f383 8811 	msr	BASEPRI, r3
   20750:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20754:	f7fb f93c 	bl	1b9d0 <next_timeout>
	__asm__ volatile(
   20758:	f384 8811 	msr	BASEPRI, r4
   2075c:	f3bf 8f6f 	isb	sy
}
   20760:	bd10      	pop	{r4, pc}

00020762 <z_set_timeout_expiry>:
{
   20762:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20764:	4604      	mov	r4, r0
   20766:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   20768:	f04f 0320 	mov.w	r3, #32
   2076c:	f3ef 8511 	mrs	r5, BASEPRI
   20770:	f383 8811 	msr	BASEPRI, r3
   20774:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   20778:	f7fb f92a 	bl	1b9d0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2077c:	2801      	cmp	r0, #1
   2077e:	dd05      	ble.n	2078c <z_set_timeout_expiry+0x2a>
   20780:	42a0      	cmp	r0, r4
   20782:	9901      	ldr	r1, [sp, #4]
   20784:	dd02      	ble.n	2078c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   20786:	4620      	mov	r0, r4
   20788:	f7ed fae2 	bl	dd50 <z_clock_set_timeout>
	__asm__ volatile(
   2078c:	f385 8811 	msr	BASEPRI, r5
   20790:	f3bf 8f6f 	isb	sy
}
   20794:	b003      	add	sp, #12
   20796:	bd30      	pop	{r4, r5, pc}

00020798 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   20798:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   2079a:	f7fb fa29 	bl	1bbf0 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2079e:	bd08      	pop	{r3, pc}

000207a0 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   207a0:	f7fb ba26 	b.w	1bbf0 <z_tick_get>

000207a4 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   207a4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   207a6:	1c4b      	adds	r3, r1, #1
   207a8:	bf08      	it	eq
   207aa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   207ae:	4604      	mov	r4, r0
   207b0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   207b2:	d013      	beq.n	207dc <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   207b4:	ea54 0105 	orrs.w	r1, r4, r5
   207b8:	d103      	bne.n	207c2 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   207ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   207be:	f7fb ba17 	b.w	1bbf0 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   207c2:	f06f 0101 	mvn.w	r1, #1
   207c6:	1a0a      	subs	r2, r1, r0
   207c8:	f04f 31ff 	mov.w	r1, #4294967295
   207cc:	eb61 0305 	sbc.w	r3, r1, r5
   207d0:	2a00      	cmp	r2, #0
   207d2:	f173 0100 	sbcs.w	r1, r3, #0
   207d6:	db02      	blt.n	207de <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   207d8:	4610      	mov	r0, r2
   207da:	4619      	mov	r1, r3
}
   207dc:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   207de:	f7fb fa07 	bl	1bbf0 <z_tick_get>
   207e2:	2c01      	cmp	r4, #1
   207e4:	f175 0300 	sbcs.w	r3, r5, #0
   207e8:	bfbc      	itt	lt
   207ea:	2401      	movlt	r4, #1
   207ec:	2500      	movlt	r5, #0
   207ee:	1820      	adds	r0, r4, r0
   207f0:	eb45 0101 	adc.w	r1, r5, r1
   207f4:	e7f2      	b.n	207dc <z_timeout_end_calc+0x38>

000207f6 <k_timer_init>:
	timer->status = 0U;
   207f6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   207f8:	e9c0 1206 	strd	r1, r2, [r0, #24]
   207fc:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   20800:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   20804:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   20808:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
   2080a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   2080c:	4770      	bx	lr

0002080e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2080e:	b510      	push	{r4, lr}
   20810:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   20812:	f7ff ff70 	bl	206f6 <z_abort_timeout>

	if (inactive) {
   20816:	b9d8      	cbnz	r0, 20850 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   20818:	69e3      	ldr	r3, [r4, #28]
   2081a:	b10b      	cbz	r3, 20820 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2081c:	4620      	mov	r0, r4
   2081e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   20820:	f104 0010 	add.w	r0, r4, #16
   20824:	2100      	movs	r1, #0
   20826:	f7ff fdb3 	bl	20390 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2082a:	4604      	mov	r4, r0
   2082c:	b180      	cbz	r0, 20850 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2082e:	f7ff fdbf 	bl	203b0 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   20832:	4620      	mov	r0, r4
   20834:	f7ff fe19 	bl	2046a <z_ready_thread>
	__asm__ volatile(
   20838:	f04f 0320 	mov.w	r3, #32
   2083c:	f3ef 8011 	mrs	r0, BASEPRI
   20840:	f383 8811 	msr	BASEPRI, r3
   20844:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   20848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2084c:	f7ff bdd4 	b.w	203f8 <z_reschedule_irqlock>
   20850:	bd10      	pop	{r4, pc}

00020852 <signal_poll_event>:
{
   20852:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   20854:	6884      	ldr	r4, [r0, #8]
{
   20856:	4605      	mov	r5, r0
   20858:	460e      	mov	r6, r1
	if (poller) {
   2085a:	b19c      	cbz	r4, 20884 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2085c:	68a3      	ldr	r3, [r4, #8]
   2085e:	b95b      	cbnz	r3, 20878 <signal_poll_event+0x26>
	int retcode = 0;
   20860:	4618      	mov	r0, r3
		poller->is_polling = false;
   20862:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   20864:	2300      	movs	r3, #0
   20866:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   20868:	68eb      	ldr	r3, [r5, #12]
   2086a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2086e:	430e      	orrs	r6, r1
   20870:	f366 3310 	bfi	r3, r6, #12, #5
   20874:	60eb      	str	r3, [r5, #12]
	return retcode;
   20876:	e004      	b.n	20882 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   20878:	4798      	blx	r3
		poller->is_polling = false;
   2087a:	2300      	movs	r3, #0
		if (retcode < 0) {
   2087c:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2087e:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   20880:	daf0      	bge.n	20864 <signal_poll_event+0x12>
}
   20882:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   20884:	4620      	mov	r0, r4
   20886:	e7ed      	b.n	20864 <signal_poll_event+0x12>

00020888 <z_handle_obj_poll_events>:
{
   20888:	4603      	mov	r3, r0
	return list->head == list;
   2088a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2088c:	4283      	cmp	r3, r0
   2088e:	d008      	beq.n	208a2 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   20890:	e9d0 3200 	ldrd	r3, r2, [r0]
   20894:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20896:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20898:	2300      	movs	r3, #0
	node->prev = NULL;
   2089a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2089e:	f7ff bfd8 	b.w	20852 <signal_poll_event>
}
   208a2:	4770      	bx	lr

000208a4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   208a4:	4770      	bx	lr
