
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	50 0c 00 20 75 18 00 00 3f 49 00 00 a5 18 00 00     P.. u...?I......
  10:	a5 18 00 00 a5 18 00 00 a5 18 00 00 a5 18 00 00     ................
	...
  2c:	89 16 00 00 a5 18 00 00 00 00 00 00 31 16 00 00     ............1...
  3c:	25 48 00 00                                         %H..

00000040 <_irq_vector_table>:
  40:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  50:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  60:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  70:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  80:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  90:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  a0:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  b0:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  c0:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  d0:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  e0:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
  f0:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
 100:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
 110:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
 120:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
 130:	35 18 00 00 35 18 00 00 35 18 00 00 35 18 00 00     5...5...5...5...
 140:	35 18 00 00                                         5...

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
 210:	00 80 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
 220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b980 	b.w	554 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     270:	9d09      	ldr	r5, [sp, #36]	; 0x24
     272:	4604      	mov	r4, r0
     274:	4688      	mov	r8, r1
     276:	2b00      	cmp	r3, #0
     278:	f040 8084 	bne.w	384 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x104>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d943      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     282:	fab2 f282 	clz	r2, r2
     286:	b142      	cbz	r2, 29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	f1c2 0020 	rsb	r0, r2, #32
     28c:	4091      	lsls	r1, r2
     28e:	4097      	lsls	r7, r2
     290:	fa24 f000 	lsr.w	r0, r4, r0
     294:	4094      	lsls	r4, r2
     296:	ea40 0801 	orr.w	r8, r0, r1
     29a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
     29e:	0c23      	lsrs	r3, r4, #16
     2a0:	fa1f fe87 	uxth.w	lr, r7
     2a4:	fbb8 f6fc 	udiv	r6, r8, ip
     2a8:	fb0c 8116 	mls	r1, ip, r6, r8
     2ac:	fb06 f00e 	mul.w	r0, r6, lr
     2b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2b4:	4298      	cmp	r0, r3
     2b6:	d907      	bls.n	2c8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x48>
     2b8:	18fb      	adds	r3, r7, r3
     2ba:	f106 31ff 	add.w	r1, r6, #4294967295
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4298      	cmp	r0, r3
     2c2:	f200 8131 	bhi.w	528 <CONFIG_FLASH_SIZE+0x128>
     2c6:	460e      	mov	r6, r1
     2c8:	1a19      	subs	r1, r3, r0
     2ca:	b2a3      	uxth	r3, r4
     2cc:	fbb1 f0fc 	udiv	r0, r1, ip
     2d0:	fb0c 1110 	mls	r1, ip, r0, r1
     2d4:	fb00 fe0e 	mul.w	lr, r0, lr
     2d8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2dc:	45a6      	cmp	lr, r4
     2de:	d907      	bls.n	2f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x70>
     2e0:	193c      	adds	r4, r7, r4
     2e2:	f100 33ff 	add.w	r3, r0, #4294967295
     2e6:	d202      	bcs.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e8:	45a6      	cmp	lr, r4
     2ea:	f200 811a 	bhi.w	522 <CONFIG_FLASH_SIZE+0x122>
     2ee:	4618      	mov	r0, r3
     2f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     2f4:	eba4 040e 	sub.w	r4, r4, lr
     2f8:	2600      	movs	r6, #0
     2fa:	b11d      	cbz	r5, 304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     2fc:	40d4      	lsrs	r4, r2
     2fe:	2300      	movs	r3, #0
     300:	e9c5 4300 	strd	r4, r3, [r5]
     304:	4631      	mov	r1, r6
     306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     30a:	b902      	cbnz	r2, 30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     30c:	deff      	udf	#255	; 0xff
     30e:	fab2 f282 	clz	r2, r2
     312:	2a00      	cmp	r2, #0
     314:	d152      	bne.n	3bc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13c>
     316:	1bcb      	subs	r3, r1, r7
     318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     31c:	fa1f f887 	uxth.w	r8, r7
     320:	2601      	movs	r6, #1
     322:	0c21      	lsrs	r1, r4, #16
     324:	fbb3 fcfe 	udiv	ip, r3, lr
     328:	fb0e 301c 	mls	r0, lr, ip, r3
     32c:	fb08 f90c 	mul.w	r9, r8, ip
     330:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     334:	4589      	cmp	r9, r1
     336:	d90b      	bls.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     338:	1879      	adds	r1, r7, r1
     33a:	f10c 33ff 	add.w	r3, ip, #4294967295
     33e:	bf2c      	ite	cs
     340:	2001      	movcs	r0, #1
     342:	2000      	movcc	r0, #0
     344:	4589      	cmp	r9, r1
     346:	d902      	bls.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     348:	2800      	cmp	r0, #0
     34a:	f000 80f0 	beq.w	52e <CONFIG_FLASH_SIZE+0x12e>
     34e:	469c      	mov	ip, r3
     350:	eba1 0109 	sub.w	r1, r1, r9
     354:	b2a3      	uxth	r3, r4
     356:	fbb1 f0fe 	udiv	r0, r1, lr
     35a:	fb0e 1110 	mls	r1, lr, r0, r1
     35e:	fb08 f800 	mul.w	r8, r8, r0
     362:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     366:	45a0      	cmp	r8, r4
     368:	d907      	bls.n	37a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfa>
     36a:	193c      	adds	r4, r7, r4
     36c:	f100 33ff 	add.w	r3, r0, #4294967295
     370:	d202      	bcs.n	378 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf8>
     372:	45a0      	cmp	r8, r4
     374:	f200 80d2 	bhi.w	51c <CONFIG_FLASH_SIZE+0x11c>
     378:	4618      	mov	r0, r3
     37a:	eba4 0408 	sub.w	r4, r4, r8
     37e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     382:	e7ba      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     384:	428b      	cmp	r3, r1
     386:	d909      	bls.n	39c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x11c>
     388:	2d00      	cmp	r5, #0
     38a:	f000 80be 	beq.w	50a <CONFIG_FLASH_SIZE+0x10a>
     38e:	2600      	movs	r6, #0
     390:	e9c5 0100 	strd	r0, r1, [r5]
     394:	4630      	mov	r0, r6
     396:	4631      	mov	r1, r6
     398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     39c:	fab3 f683 	clz	r6, r3
     3a0:	2e00      	cmp	r6, #0
     3a2:	d14d      	bne.n	440 <CONFIG_FLASH_SIZE+0x40>
     3a4:	428b      	cmp	r3, r1
     3a6:	f0c0 80b3 	bcc.w	510 <CONFIG_FLASH_SIZE+0x110>
     3aa:	4282      	cmp	r2, r0
     3ac:	f240 80b0 	bls.w	510 <CONFIG_FLASH_SIZE+0x110>
     3b0:	4630      	mov	r0, r6
     3b2:	2d00      	cmp	r5, #0
     3b4:	d0a6      	beq.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     3b6:	e9c5 4800 	strd	r4, r8, [r5]
     3ba:	e7a3      	b.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     3bc:	4097      	lsls	r7, r2
     3be:	f1c2 0320 	rsb	r3, r2, #32
     3c2:	fa01 f002 	lsl.w	r0, r1, r2
     3c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3ca:	40d9      	lsrs	r1, r3
     3cc:	fa24 f303 	lsr.w	r3, r4, r3
     3d0:	fa1f f887 	uxth.w	r8, r7
     3d4:	4094      	lsls	r4, r2
     3d6:	4303      	orrs	r3, r0
     3d8:	fbb1 f0fe 	udiv	r0, r1, lr
     3dc:	0c1e      	lsrs	r6, r3, #16
     3de:	fb0e 1110 	mls	r1, lr, r0, r1
     3e2:	fb00 fc08 	mul.w	ip, r0, r8
     3e6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
     3ea:	458c      	cmp	ip, r1
     3ec:	d90e      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     3ee:	1879      	adds	r1, r7, r1
     3f0:	f100 36ff 	add.w	r6, r0, #4294967295
     3f4:	bf2c      	ite	cs
     3f6:	f04f 0901 	movcs.w	r9, #1
     3fa:	f04f 0900 	movcc.w	r9, #0
     3fe:	458c      	cmp	ip, r1
     400:	d903      	bls.n	40a <CONFIG_FLASH_SIZE+0xa>
     402:	f1b9 0f00 	cmp.w	r9, #0
     406:	f000 8096 	beq.w	536 <CONFIG_FLASH_SIZE+0x136>
     40a:	4630      	mov	r0, r6
     40c:	eba1 010c 	sub.w	r1, r1, ip
     410:	b29b      	uxth	r3, r3
     412:	fbb1 f6fe 	udiv	r6, r1, lr
     416:	fb0e 1116 	mls	r1, lr, r6, r1
     41a:	fb06 fc08 	mul.w	ip, r6, r8
     41e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     422:	458c      	cmp	ip, r1
     424:	d907      	bls.n	436 <CONFIG_FLASH_SIZE+0x36>
     426:	1879      	adds	r1, r7, r1
     428:	f106 33ff 	add.w	r3, r6, #4294967295
     42c:	d202      	bcs.n	434 <CONFIG_FLASH_SIZE+0x34>
     42e:	458c      	cmp	ip, r1
     430:	f200 8088 	bhi.w	544 <CONFIG_FLASH_SIZE+0x144>
     434:	461e      	mov	r6, r3
     436:	eba1 030c 	sub.w	r3, r1, ip
     43a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     43e:	e770      	b.n	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     440:	f1c6 0720 	rsb	r7, r6, #32
     444:	fa03 f406 	lsl.w	r4, r3, r6
     448:	fa02 fc06 	lsl.w	ip, r2, r6
     44c:	fa01 fe06 	lsl.w	lr, r1, r6
     450:	40fa      	lsrs	r2, r7
     452:	fa20 f807 	lsr.w	r8, r0, r7
     456:	40f9      	lsrs	r1, r7
     458:	fa00 f306 	lsl.w	r3, r0, r6
     45c:	4322      	orrs	r2, r4
     45e:	ea48 040e 	orr.w	r4, r8, lr
     462:	ea4f 4812 	mov.w	r8, r2, lsr #16
     466:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     46a:	fa1f f982 	uxth.w	r9, r2
     46e:	fbb1 faf8 	udiv	sl, r1, r8
     472:	fb08 111a 	mls	r1, r8, sl, r1
     476:	fb0a f009 	mul.w	r0, sl, r9
     47a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
     47e:	4570      	cmp	r0, lr
     480:	d90e      	bls.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
     482:	eb12 0e0e 	adds.w	lr, r2, lr
     486:	f10a 31ff 	add.w	r1, sl, #4294967295
     48a:	bf2c      	ite	cs
     48c:	f04f 0b01 	movcs.w	fp, #1
     490:	f04f 0b00 	movcc.w	fp, #0
     494:	4570      	cmp	r0, lr
     496:	d902      	bls.n	49e <CONFIG_FLASH_SIZE+0x9e>
     498:	f1bb 0f00 	cmp.w	fp, #0
     49c:	d04e      	beq.n	53c <CONFIG_FLASH_SIZE+0x13c>
     49e:	468a      	mov	sl, r1
     4a0:	ebae 0e00 	sub.w	lr, lr, r0
     4a4:	b2a4      	uxth	r4, r4
     4a6:	fbbe f0f8 	udiv	r0, lr, r8
     4aa:	fb08 ee10 	mls	lr, r8, r0, lr
     4ae:	fb00 f909 	mul.w	r9, r0, r9
     4b2:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
     4b6:	45f1      	cmp	r9, lr
     4b8:	d907      	bls.n	4ca <CONFIG_FLASH_SIZE+0xca>
     4ba:	eb12 0e0e 	adds.w	lr, r2, lr
     4be:	f100 31ff 	add.w	r1, r0, #4294967295
     4c2:	d201      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4c4:	45f1      	cmp	r9, lr
     4c6:	d840      	bhi.n	54a <CONFIG_FLASH_SIZE+0x14a>
     4c8:	4608      	mov	r0, r1
     4ca:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4ce:	ebae 0e09 	sub.w	lr, lr, r9
     4d2:	fba0 890c 	umull	r8, r9, r0, ip
     4d6:	45ce      	cmp	lr, r9
     4d8:	4641      	mov	r1, r8
     4da:	464c      	mov	r4, r9
     4dc:	d302      	bcc.n	4e4 <CONFIG_FLASH_SIZE+0xe4>
     4de:	d106      	bne.n	4ee <CONFIG_FLASH_SIZE+0xee>
     4e0:	4543      	cmp	r3, r8
     4e2:	d204      	bcs.n	4ee <CONFIG_FLASH_SIZE+0xee>
     4e4:	3801      	subs	r0, #1
     4e6:	ebb8 010c 	subs.w	r1, r8, ip
     4ea:	eb69 0402 	sbc.w	r4, r9, r2
     4ee:	b37d      	cbz	r5, 550 <CONFIG_FLASH_SIZE+0x150>
     4f0:	1a5a      	subs	r2, r3, r1
     4f2:	eb6e 0e04 	sbc.w	lr, lr, r4
     4f6:	40f2      	lsrs	r2, r6
     4f8:	fa0e f707 	lsl.w	r7, lr, r7
     4fc:	fa2e f306 	lsr.w	r3, lr, r6
     500:	2600      	movs	r6, #0
     502:	4317      	orrs	r7, r2
     504:	e9c5 7300 	strd	r7, r3, [r5]
     508:	e6fc      	b.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     50a:	462e      	mov	r6, r5
     50c:	4628      	mov	r0, r5
     50e:	e6f9      	b.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     510:	1a84      	subs	r4, r0, r2
     512:	eb61 0103 	sbc.w	r1, r1, r3
     516:	2001      	movs	r0, #1
     518:	4688      	mov	r8, r1
     51a:	e74a      	b.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     51c:	3802      	subs	r0, #2
     51e:	443c      	add	r4, r7
     520:	e72b      	b.n	37a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfa>
     522:	3802      	subs	r0, #2
     524:	443c      	add	r4, r7
     526:	e6e3      	b.n	2f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x70>
     528:	3e02      	subs	r6, #2
     52a:	443b      	add	r3, r7
     52c:	e6cc      	b.n	2c8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x48>
     52e:	f1ac 0c02 	sub.w	ip, ip, #2
     532:	4439      	add	r1, r7
     534:	e70c      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     536:	3802      	subs	r0, #2
     538:	4439      	add	r1, r7
     53a:	e767      	b.n	40c <CONFIG_FLASH_SIZE+0xc>
     53c:	f1aa 0a02 	sub.w	sl, sl, #2
     540:	4496      	add	lr, r2
     542:	e7ad      	b.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
     544:	3e02      	subs	r6, #2
     546:	4439      	add	r1, r7
     548:	e775      	b.n	436 <CONFIG_FLASH_SIZE+0x36>
     54a:	3802      	subs	r0, #2
     54c:	4496      	add	lr, r2
     54e:	e7bc      	b.n	4ca <CONFIG_FLASH_SIZE+0xca>
     550:	462e      	mov	r6, r5
     552:	e6d7      	b.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>

00000554 <__aeabi_idiv0>:
     554:	4770      	bx	lr
     556:	bf00      	nop

00000558 <__gnu_cmse_nonsecure_call>:
     558:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     55c:	4627      	mov	r7, r4
     55e:	46a0      	mov	r8, r4
     560:	46a1      	mov	r9, r4
     562:	46a2      	mov	sl, r4
     564:	46a3      	mov	fp, r4
     566:	46a4      	mov	ip, r4
     568:	ed2d 8b10 	vpush	{d8-d15}
     56c:	f04f 0500 	mov.w	r5, #0
     570:	ec45 5b18 	vmov	d8, r5, r5
     574:	ec45 5a19 	vmov	s18, s19, r5, r5
     578:	ec45 5a1a 	vmov	s20, s21, r5, r5
     57c:	ec45 5a1b 	vmov	s22, s23, r5, r5
     580:	ec45 5a1c 	vmov	s24, s25, r5, r5
     584:	ec45 5a1d 	vmov	s26, s27, r5, r5
     588:	ec45 5a1e 	vmov	s28, s29, r5, r5
     58c:	ec45 5a1f 	vmov	s30, s31, r5, r5
     590:	eef1 5a10 	vmrs	r5, fpscr
     594:	f64f 7660 	movw	r6, #65376	; 0xff60
     598:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     59c:	4035      	ands	r5, r6
     59e:	eee1 5a10 	vmsr	fpscr, r5
     5a2:	f384 8800 	msr	CPSR_f, r4
     5a6:	4625      	mov	r5, r4
     5a8:	4626      	mov	r6, r4
     5aa:	47a4      	blxns	r4
     5ac:	ecbd 8b10 	vpop	{d8-d15}
     5b0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

000005b4 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
     5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b8:	b087      	sub	sp, #28
     5ba:	460f      	mov	r7, r1
     5bc:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
     5be:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
     5c0:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     5c2:	2514      	movs	r5, #20
{
     5c4:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
     5c6:	4698      	mov	r8, r3
{
     5c8:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
     5cc:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
     5d0:	4c1e      	ldr	r4, [pc, #120]	; (64c <print_digits+0x98>)
     5d2:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     5d6:	ea50 0301 	orrs.w	r3, r0, r1
     5da:	d11a      	bne.n	612 <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
     5dc:	2d14      	cmp	r5, #20
		buf[i] = '0';
     5de:	bf08      	it	eq
     5e0:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     5e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
     5e4:	bf18      	it	ne
     5e6:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     5e8:	442c      	add	r4, r5
		buf[i] = '0';
     5ea:	bf08      	it	eq
     5ec:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     5f0:	2c15      	cmp	r4, #21
     5f2:	d01b      	beq.n	62c <print_digits+0x78>
     5f4:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
     5f6:	2c00      	cmp	r4, #0
     5f8:	dc1a      	bgt.n	630 <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
     5fa:	f81d 0005 	ldrb.w	r0, [sp, r5]
     5fe:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
     600:	3501      	adds	r5, #1
		out(buf[i], ctx);
     602:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
     604:	2d15      	cmp	r5, #21
     606:	d1f8      	bne.n	5fa <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
     608:	2c00      	cmp	r4, #0
     60a:	dc19      	bgt.n	640 <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
     60c:	b007      	add	sp, #28
     60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
     612:	4642      	mov	r2, r8
     614:	464b      	mov	r3, r9
     616:	f7ff fe11 	bl	23c <__aeabi_uldivmod>
     61a:	4684      	mov	ip, r0
     61c:	460b      	mov	r3, r1
     61e:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
     620:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
     622:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
     626:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
     628:	3d01      	subs	r5, #1
     62a:	e7d4      	b.n	5d6 <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
     62c:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
     62e:	e7e4      	b.n	5fa <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
     630:	f1bb 0f00 	cmp.w	fp, #0
     634:	d0e1      	beq.n	5fa <print_digits+0x46>
		out(pad_char, ctx);
     636:	4639      	mov	r1, r7
     638:	4650      	mov	r0, sl
     63a:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
     63c:	3c01      	subs	r4, #1
     63e:	e7da      	b.n	5f6 <print_digits+0x42>
		out(pad_char, ctx);
     640:	4639      	mov	r1, r7
     642:	4650      	mov	r0, sl
     644:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
     646:	3c01      	subs	r4, #1
     648:	e7de      	b.n	608 <print_digits+0x54>
     64a:	bf00      	nop
     64c:	00005379 	.word	0x00005379

00000650 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     650:	680b      	ldr	r3, [r1, #0]
     652:	3301      	adds	r3, #1
     654:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     656:	4b01      	ldr	r3, [pc, #4]	; (65c <char_out+0xc>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	4718      	bx	r3
     65c:	20000000 	.word	0x20000000

00000660 <__printk_hook_install>:
	_char_out = fn;
     660:	4b01      	ldr	r3, [pc, #4]	; (668 <__printk_hook_install+0x8>)
     662:	6018      	str	r0, [r3, #0]
}
     664:	4770      	bx	lr
     666:	bf00      	nop
     668:	20000000 	.word	0x20000000

0000066c <z_vprintk>:
{
     66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     670:	2600      	movs	r6, #0
{
     672:	4605      	mov	r5, r0
     674:	468b      	mov	fp, r1
     676:	461c      	mov	r4, r3
	int min_width = -1;
     678:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
     67c:	4637      	mov	r7, r6
{
     67e:	b087      	sub	sp, #28
     680:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
     684:	f04f 0900 	mov.w	r9, #0
					break;
     688:	e007      	b.n	69a <z_vprintk+0x2e>
		if (!might_format) {
     68a:	f1b9 0f00 	cmp.w	r9, #0
     68e:	d10b      	bne.n	6a8 <z_vprintk+0x3c>
			if (*fmt != '%') {
     690:	2825      	cmp	r0, #37	; 0x25
     692:	f000 810a 	beq.w	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
				out((int)*fmt, ctx);
     696:	4659      	mov	r1, fp
     698:	47a8      	blx	r5
	while (*fmt) {
     69a:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
     69e:	2800      	cmp	r0, #0
     6a0:	d1f3      	bne.n	68a <z_vprintk+0x1e>
}
     6a2:	b007      	add	sp, #28
     6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     6a8:	287a      	cmp	r0, #122	; 0x7a
     6aa:	d80a      	bhi.n	6c2 <z_vprintk+0x56>
     6ac:	2862      	cmp	r0, #98	; 0x62
     6ae:	d810      	bhi.n	6d2 <z_vprintk+0x66>
     6b0:	2830      	cmp	r0, #48	; 0x30
     6b2:	d051      	beq.n	758 <z_vprintk+0xec>
     6b4:	d844      	bhi.n	740 <z_vprintk+0xd4>
     6b6:	2825      	cmp	r0, #37	; 0x25
     6b8:	f000 80f5 	beq.w	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
     6bc:	282d      	cmp	r0, #45	; 0x2d
     6be:	f000 80fb 	beq.w	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
					out((int)'%', ctx);
     6c2:	4659      	mov	r1, fp
     6c4:	2025      	movs	r0, #37	; 0x25
     6c6:	47a8      	blx	r5
					out((int)*fmt, ctx);
     6c8:	4659      	mov	r1, fp
     6ca:	f89a 0000 	ldrb.w	r0, [sl]
     6ce:	47a8      	blx	r5
     6d0:	e7d8      	b.n	684 <z_vprintk+0x18>
     6d2:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
     6d6:	2b17      	cmp	r3, #23
     6d8:	d8f3      	bhi.n	6c2 <z_vprintk+0x56>
     6da:	a201      	add	r2, pc, #4	; (adr r2, 6e0 <z_vprintk+0x74>)
     6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     6e0:	0000089f 	.word	0x0000089f
     6e4:	000007a1 	.word	0x000007a1
     6e8:	000006c3 	.word	0x000006c3
     6ec:	000006c3 	.word	0x000006c3
     6f0:	000006c3 	.word	0x000006c3
     6f4:	00000783 	.word	0x00000783
     6f8:	000007a1 	.word	0x000007a1
     6fc:	000006c3 	.word	0x000006c3
     700:	000006c3 	.word	0x000006c3
     704:	00000783 	.word	0x00000783
     708:	000006c3 	.word	0x000006c3
     70c:	000006c3 	.word	0x000006c3
     710:	000006c3 	.word	0x000006c3
     714:	0000081b 	.word	0x0000081b
     718:	000006c3 	.word	0x000006c3
     71c:	000006c3 	.word	0x000006c3
     720:	00000867 	.word	0x00000867
     724:	000006c3 	.word	0x000006c3
     728:	000007a1 	.word	0x000007a1
     72c:	000006c3 	.word	0x000006c3
     730:	000006c3 	.word	0x000006c3
     734:	00000749 	.word	0x00000749
     738:	000006c3 	.word	0x000006c3
     73c:	00000783 	.word	0x00000783
			switch (*fmt) {
     740:	2839      	cmp	r0, #57	; 0x39
     742:	d915      	bls.n	770 <z_vprintk+0x104>
     744:	2858      	cmp	r0, #88	; 0x58
     746:	d1bc      	bne.n	6c2 <z_vprintk+0x56>
				if (*fmt == 'p') {
     748:	f89a 3000 	ldrb.w	r3, [sl]
     74c:	2b70      	cmp	r3, #112	; 0x70
     74e:	d16e      	bne.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
					x = va_arg(ap, unsigned int);
     750:	2300      	movs	r3, #0
     752:	f854 2b04 	ldr.w	r2, [r4], #4
     756:	e075      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
				if (min_width < 0 && padding == PAD_NONE) {
     758:	f1b8 0f00 	cmp.w	r8, #0
     75c:	da0b      	bge.n	776 <z_vprintk+0x10a>
     75e:	2f00      	cmp	r7, #0
     760:	f000 80ac 	beq.w	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
					min_width = *fmt - '0';
     764:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     768:	2f00      	cmp	r7, #0
     76a:	bf08      	it	eq
     76c:	2702      	moveq	r7, #2
     76e:	e794      	b.n	69a <z_vprintk+0x2e>
				if (min_width < 0) {
     770:	f1b8 0f00 	cmp.w	r8, #0
     774:	dbf6      	blt.n	764 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
     776:	230a      	movs	r3, #10
     778:	fb03 0808 	mla	r8, r3, r8, r0
     77c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
     780:	e7f2      	b.n	768 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
     782:	2868      	cmp	r0, #104	; 0x68
     784:	d103      	bne.n	78e <z_vprintk+0x122>
     786:	2e68      	cmp	r6, #104	; 0x68
     788:	d106      	bne.n	798 <z_vprintk+0x12c>
					length_mod = 'H';
     78a:	2648      	movs	r6, #72	; 0x48
     78c:	e785      	b.n	69a <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
     78e:	286c      	cmp	r0, #108	; 0x6c
     790:	d102      	bne.n	798 <z_vprintk+0x12c>
     792:	2e6c      	cmp	r6, #108	; 0x6c
     794:	f000 8094 	beq.w	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
				} else if (length_mod == 0) {
     798:	2e00      	cmp	r6, #0
     79a:	d192      	bne.n	6c2 <z_vprintk+0x56>
     79c:	4606      	mov	r6, r0
     79e:	e77c      	b.n	69a <z_vprintk+0x2e>
				if (length_mod == 'z') {
     7a0:	2e7a      	cmp	r6, #122	; 0x7a
     7a2:	d106      	bne.n	7b2 <z_vprintk+0x146>
					d = va_arg(ap, long);
     7a4:	46a1      	mov	r9, r4
     7a6:	f859 2b04 	ldr.w	r2, [r9], #4
     7aa:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
     7ac:	2875      	cmp	r0, #117	; 0x75
     7ae:	d123      	bne.n	7f8 <z_vprintk+0x18c>
     7b0:	e00f      	b.n	7d2 <z_vprintk+0x166>
				} else if (length_mod == 'l') {
     7b2:	2e6c      	cmp	r6, #108	; 0x6c
     7b4:	d0f6      	beq.n	7a4 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
     7b6:	2e4c      	cmp	r6, #76	; 0x4c
     7b8:	d105      	bne.n	7c6 <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
     7ba:	3407      	adds	r4, #7
     7bc:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
     7c0:	e8f9 2302 	ldrd	r2, r3, [r9], #8
     7c4:	e7f2      	b.n	7ac <z_vprintk+0x140>
				} else if (*fmt == 'u') {
     7c6:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
     7c8:	6822      	ldr	r2, [r4, #0]
     7ca:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
     7ce:	d112      	bne.n	7f6 <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
     7d0:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
     7d2:	1ef8      	subs	r0, r7, #3
     7d4:	bf18      	it	ne
     7d6:	2001      	movne	r0, #1
     7d8:	2f01      	cmp	r7, #1
     7da:	bf0c      	ite	eq
     7dc:	2430      	moveq	r4, #48	; 0x30
     7de:	2420      	movne	r4, #32
     7e0:	9001      	str	r0, [sp, #4]
     7e2:	200a      	movs	r0, #10
     7e4:	e9cd 4802 	strd	r4, r8, [sp, #8]
     7e8:	9000      	str	r0, [sp, #0]
     7ea:	4659      	mov	r1, fp
     7ec:	4628      	mov	r0, r5
     7ee:	f7ff fee1 	bl	5b4 <print_digits>
}
     7f2:	464c      	mov	r4, r9
     7f4:	e746      	b.n	684 <z_vprintk+0x18>
					d = va_arg(ap, int);
     7f6:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
     7f8:	2a00      	cmp	r2, #0
     7fa:	f173 0100 	sbcs.w	r1, r3, #0
     7fe:	dae8      	bge.n	7d2 <z_vprintk+0x166>
					out((int)'-', ctx);
     800:	4659      	mov	r1, fp
     802:	202d      	movs	r0, #45	; 0x2d
     804:	e9cd 2304 	strd	r2, r3, [sp, #16]
     808:	47a8      	blx	r5
					d = -d;
     80a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
     80e:	4252      	negs	r2, r2
     810:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
     814:	f108 38ff 	add.w	r8, r8, #4294967295
     818:	e7db      	b.n	7d2 <z_vprintk+0x166>
				out('0', ctx);
     81a:	4659      	mov	r1, fp
     81c:	2030      	movs	r0, #48	; 0x30
     81e:	47a8      	blx	r5
				out('x', ctx);
     820:	4659      	mov	r1, fp
     822:	2078      	movs	r0, #120	; 0x78
     824:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
     826:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
     82a:	2701      	movs	r7, #1
     82c:	e78c      	b.n	748 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     82e:	2e6c      	cmp	r6, #108	; 0x6c
     830:	d08e      	beq.n	750 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
     832:	2e4c      	cmp	r6, #76	; 0x4c
     834:	d18c      	bne.n	750 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
     836:	1de3      	adds	r3, r4, #7
     838:	f023 0307 	bic.w	r3, r3, #7
     83c:	461c      	mov	r4, r3
     83e:	685b      	ldr	r3, [r3, #4]
     840:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
     844:	1ef8      	subs	r0, r7, #3
     846:	bf18      	it	ne
     848:	2001      	movne	r0, #1
     84a:	2f01      	cmp	r7, #1
     84c:	bf0c      	ite	eq
     84e:	2130      	moveq	r1, #48	; 0x30
     850:	2120      	movne	r1, #32
     852:	e9cd 1802 	strd	r1, r8, [sp, #8]
     856:	2110      	movs	r1, #16
     858:	9001      	str	r0, [sp, #4]
     85a:	9100      	str	r1, [sp, #0]
     85c:	4628      	mov	r0, r5
     85e:	4659      	mov	r1, fp
     860:	f7ff fea8 	bl	5b4 <print_digits>
     864:	e70e      	b.n	684 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
     866:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
     86a:	4699      	mov	r9, r3
     86c:	464a      	mov	r2, r9
     86e:	f819 0b01 	ldrb.w	r0, [r9], #1
     872:	b978      	cbnz	r0, 894 <CONFIG_ISR_STACK_SIZE+0x94>
				if (padding == PAD_SPACE_AFTER) {
     874:	2f03      	cmp	r7, #3
     876:	d125      	bne.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
					int remaining = min_width - (s - start);
     878:	eba2 0903 	sub.w	r9, r2, r3
     87c:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
     880:	f1b9 0f00 	cmp.w	r9, #0
     884:	f77f aefe 	ble.w	684 <z_vprintk+0x18>
						out(' ', ctx);
     888:	4659      	mov	r1, fp
     88a:	2020      	movs	r0, #32
     88c:	47a8      	blx	r5
     88e:	f109 39ff 	add.w	r9, r9, #4294967295
     892:	e7f5      	b.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
					out((int)(*s++), ctx);
     894:	4659      	mov	r1, fp
     896:	9304      	str	r3, [sp, #16]
     898:	47a8      	blx	r5
     89a:	9b04      	ldr	r3, [sp, #16]
     89c:	e7e6      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
				out(c, ctx);
     89e:	4659      	mov	r1, fp
     8a0:	f854 0b04 	ldr.w	r0, [r4], #4
     8a4:	e713      	b.n	6ce <z_vprintk+0x62>
				out((int)'%', ctx);
     8a6:	4659      	mov	r1, fp
     8a8:	e711      	b.n	6ce <z_vprintk+0x62>
				length_mod = 0;
     8aa:	464e      	mov	r6, r9
				padding = PAD_NONE;
     8ac:	464f      	mov	r7, r9
				min_width = -1;
     8ae:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
     8b2:	f04f 0901 	mov.w	r9, #1
     8b6:	e6f0      	b.n	69a <z_vprintk+0x2e>
			switch (*fmt) {
     8b8:	2703      	movs	r7, #3
     8ba:	e6ee      	b.n	69a <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
     8bc:	2701      	movs	r7, #1
     8be:	e6ec      	b.n	69a <z_vprintk+0x2e>
					length_mod = 'L';
     8c0:	264c      	movs	r6, #76	; 0x4c
     8c2:	e6ea      	b.n	69a <z_vprintk+0x2e>
			might_format = 0;
     8c4:	4681      	mov	r9, r0
     8c6:	e6e8      	b.n	69a <z_vprintk+0x2e>

000008c8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     8c8:	b507      	push	{r0, r1, r2, lr}
     8ca:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     8cc:	2100      	movs	r1, #0
{
     8ce:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     8d0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
     8d2:	4803      	ldr	r0, [pc, #12]	; (8e0 <vprintk+0x18>)
     8d4:	a901      	add	r1, sp, #4
     8d6:	f7ff fec9 	bl	66c <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     8da:	b003      	add	sp, #12
     8dc:	f85d fb04 	ldr.w	pc, [sp], #4
     8e0:	00000651 	.word	0x00000651

000008e4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     8e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8e8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     8ec:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     8ee:	f019 0808 	ands.w	r8, r9, #8
{
     8f2:	4693      	mov	fp, r2
	if (processing) {
     8f4:	d00e      	beq.n	914 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
     8f6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     8f8:	bf0c      	ite	eq
     8fa:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     8fe:	f049 0920 	orrne.w	r9, r9, #32
     902:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     906:	f38b 8811 	msr	BASEPRI, fp
     90a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     90e:	b003      	add	sp, #12
     910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
     914:	f8df a190 	ldr.w	sl, [pc, #400]	; aa8 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     918:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     91c:	2902      	cmp	r1, #2
     91e:	d107      	bne.n	930 <process_event+0x4c>
			evt = process_recheck(mgr);
     920:	4620      	mov	r0, r4
     922:	f003 fd52 	bl	43ca <process_recheck>
		if (evt == EVT_NOP) {
     926:	2800      	cmp	r0, #0
     928:	d0ed      	beq.n	906 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     92a:	2801      	cmp	r0, #1
     92c:	8b23      	ldrh	r3, [r4, #24]
     92e:	d14b      	bne.n	9c8 <process_event+0xe4>
			res = mgr->last_res;
     930:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     932:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     934:	2f00      	cmp	r7, #0
     936:	da15      	bge.n	964 <process_event+0x80>
		*clients = mgr->clients;
     938:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     93a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     93e:	e9c4 8800 	strd	r8, r8, [r4]
     942:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     946:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     948:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     94a:	8b21      	ldrh	r1, [r4, #24]
     94c:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     950:	454a      	cmp	r2, r9
     952:	d002      	beq.n	95a <process_event+0x76>
		if (do_monitors
     954:	68a3      	ldr	r3, [r4, #8]
     956:	2b00      	cmp	r3, #0
     958:	d157      	bne.n	a0a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     95a:	b90d      	cbnz	r5, 960 <process_event+0x7c>
		    || (transit != NULL)) {
     95c:	2e00      	cmp	r6, #0
     95e:	d06f      	beq.n	a40 <process_event+0x15c>
     960:	2300      	movs	r3, #0
     962:	e053      	b.n	a0c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     964:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     968:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     96a:	2a01      	cmp	r2, #1
     96c:	d81d      	bhi.n	9aa <process_event+0xc6>
		*clients = mgr->clients;
     96e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     972:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     974:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     976:	b289      	uxth	r1, r1
	list->tail = NULL;
     978:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     97c:	d10a      	bne.n	994 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     97e:	b13d      	cbz	r5, 990 <process_event+0xac>
     980:	462a      	mov	r2, r5
     982:	8b63      	ldrh	r3, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     984:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     986:	3301      	adds	r3, #1
     988:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     98a:	2a00      	cmp	r2, #0
     98c:	d1fa      	bne.n	984 <process_event+0xa0>
     98e:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     990:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     994:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     996:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     998:	f003 fd17 	bl	43ca <process_recheck>
     99c:	2800      	cmp	r0, #0
     99e:	d0d3      	beq.n	948 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     9a0:	8b23      	ldrh	r3, [r4, #24]
     9a2:	f043 0320 	orr.w	r3, r3, #32
     9a6:	8323      	strh	r3, [r4, #24]
     9a8:	e7ce      	b.n	948 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
     9aa:	2b04      	cmp	r3, #4
     9ac:	d10a      	bne.n	9c4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9ae:	f021 0107 	bic.w	r1, r1, #7
     9b2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     9b4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     9b6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     9b8:	f003 fd07 	bl	43ca <process_recheck>
     9bc:	b110      	cbz	r0, 9c4 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     9be:	f041 0120 	orr.w	r1, r1, #32
     9c2:	8321      	strh	r1, [r4, #24]
     9c4:	2500      	movs	r5, #0
     9c6:	e7bf      	b.n	948 <process_event+0x64>
		} else if (evt == EVT_START) {
     9c8:	2803      	cmp	r0, #3
     9ca:	d109      	bne.n	9e0 <process_event+0xfc>
			transit = mgr->transitions->start;
     9cc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9ce:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     9d2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9d4:	f043 0306 	orr.w	r3, r3, #6
}
     9d8:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     9da:	8323      	strh	r3, [r4, #24]
		res = 0;
     9dc:	462f      	mov	r7, r5
     9de:	e7b4      	b.n	94a <process_event+0x66>
		} else if (evt == EVT_STOP) {
     9e0:	2804      	cmp	r0, #4
     9e2:	d106      	bne.n	9f2 <process_event+0x10e>
			transit = mgr->transitions->stop;
     9e4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9e6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     9ea:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9ec:	f043 0304 	orr.w	r3, r3, #4
     9f0:	e7f2      	b.n	9d8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     9f2:	2805      	cmp	r0, #5
     9f4:	d106      	bne.n	a04 <process_event+0x120>
			transit = mgr->transitions->reset;
     9f6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9f8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     9fc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9fe:	f043 0305 	orr.w	r3, r3, #5
     a02:	e7e9      	b.n	9d8 <process_event+0xf4>
     a04:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     a06:	462e      	mov	r6, r5
     a08:	e7e8      	b.n	9dc <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     a0a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     a0c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     a10:	8321      	strh	r1, [r4, #24]
     a12:	f38b 8811 	msr	BASEPRI, fp
     a16:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     a1a:	bb03      	cbnz	r3, a5e <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
     a1c:	2d00      	cmp	r5, #0
     a1e:	d131      	bne.n	a84 <process_event+0x1a0>
			if (transit != NULL) {
     a20:	b116      	cbz	r6, a28 <process_event+0x144>
				transit(mgr, transition_complete);
     a22:	4651      	mov	r1, sl
     a24:	4620      	mov	r0, r4
     a26:	47b0      	blx	r6
	__asm__ volatile(
     a28:	f04f 0320 	mov.w	r3, #32
     a2c:	f3ef 8b11 	mrs	fp, BASEPRI
     a30:	f383 8811 	msr	BASEPRI, r3
     a34:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     a38:	8b23      	ldrh	r3, [r4, #24]
     a3a:	f023 0308 	bic.w	r3, r3, #8
     a3e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a40:	8b23      	ldrh	r3, [r4, #24]
     a42:	06da      	lsls	r2, r3, #27
     a44:	d527      	bpl.n	a96 <process_event+0x1b2>
			evt = EVT_COMPLETE;
     a46:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a48:	f023 0310 	bic.w	r3, r3, #16
     a4c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     a4e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     a52:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     a56:	2900      	cmp	r1, #0
     a58:	f47f af60 	bne.w	91c <process_event+0x38>
out:
     a5c:	e753      	b.n	906 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a5e:	68a1      	ldr	r1, [r4, #8]
     a60:	2900      	cmp	r1, #0
     a62:	d0db      	beq.n	a1c <process_event+0x138>
     a64:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     a68:	463b      	mov	r3, r7
     a6a:	4620      	mov	r0, r4
     a6c:	f8d1 b004 	ldr.w	fp, [r1, #4]
     a70:	9201      	str	r2, [sp, #4]
     a72:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a74:	9a01      	ldr	r2, [sp, #4]
     a76:	f1b9 0f00 	cmp.w	r9, #0
     a7a:	d0cf      	beq.n	a1c <process_event+0x138>
     a7c:	4649      	mov	r1, r9
     a7e:	f8d9 9000 	ldr.w	r9, [r9]
     a82:	e7f1      	b.n	a68 <process_event+0x184>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     a84:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     a86:	463b      	mov	r3, r7
     a88:	4620      	mov	r0, r4
     a8a:	9201      	str	r2, [sp, #4]
     a8c:	682d      	ldr	r5, [r5, #0]
     a8e:	f003 fcb8 	bl	4402 <notify_one>
	while (!sys_slist_is_empty(list)) {
     a92:	9a01      	ldr	r2, [sp, #4]
     a94:	e7c2      	b.n	a1c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     a96:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     a9a:	bf1e      	ittt	ne
     a9c:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     aa0:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     aa2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     aa4:	e7d3      	b.n	a4e <process_event+0x16a>
     aa6:	bf00      	nop
     aa8:	0000442f 	.word	0x0000442f

00000aac <nordicsemi_nrf91_init>:
     aac:	f04f 0220 	mov.w	r2, #32
     ab0:	f3ef 8311 	mrs	r3, BASEPRI
     ab4:	f382 8811 	msr	BASEPRI, r2
     ab8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     abc:	2101      	movs	r1, #1
     abe:	4a04      	ldr	r2, [pc, #16]	; (ad0 <nordicsemi_nrf91_init+0x24>)
     ac0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
     ac4:	f383 8811 	msr	BASEPRI, r3
     ac8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     acc:	2000      	movs	r0, #0
     ace:	4770      	bx	lr
     ad0:	50039000 	.word	0x50039000

00000ad4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     ad4:	b120      	cbz	r0, ae0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     ad6:	4b03      	ldr	r3, [pc, #12]	; (ae4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     ad8:	0180      	lsls	r0, r0, #6
     ada:	f043 0301 	orr.w	r3, r3, #1
     ade:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     ae0:	4770      	bx	lr
     ae2:	bf00      	nop
     ae4:	000050e0 	.word	0x000050e0

00000ae8 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
     ae8:	b507      	push	{r0, r1, r2, lr}
     aea:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
     aec:	f04f 0220 	mov.w	r2, #32
     af0:	f3ef 8311 	mrs	r3, BASEPRI
     af4:	f382 8811 	msr	BASEPRI, r2
     af8:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
     afc:	f003 fe94 	bl	4828 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
     b00:	9801      	ldr	r0, [sp, #4]
     b02:	f000 ffed 	bl	1ae0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     b06:	4803      	ldr	r0, [pc, #12]	; (b14 <sys_reboot+0x2c>)
     b08:	f003 fc52 	bl	43b0 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     b0c:	f000 fe40 	bl	1790 <arch_cpu_idle>
     b10:	e7fc      	b.n	b0c <sys_reboot+0x24>
     b12:	bf00      	nop
     b14:	0000538a 	.word	0x0000538a

00000b18 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
     b18:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     b1a:	4806      	ldr	r0, [pc, #24]	; (b34 <uart_console_init+0x1c>)
     b1c:	f001 fd58 	bl	25d0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     b20:	4b05      	ldr	r3, [pc, #20]	; (b38 <uart_console_init+0x20>)
     b22:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     b24:	4805      	ldr	r0, [pc, #20]	; (b3c <uart_console_init+0x24>)
     b26:	f001 fa13 	bl	1f50 <__stdout_hook_install>
	__printk_hook_install(console_out);
     b2a:	4804      	ldr	r0, [pc, #16]	; (b3c <uart_console_init+0x24>)
     b2c:	f7ff fd98 	bl	660 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
     b30:	2000      	movs	r0, #0
     b32:	bd08      	pop	{r3, pc}
     b34:	000053b3 	.word	0x000053b3
     b38:	20000248 	.word	0x20000248
     b3c:	00000b41 	.word	0x00000b41

00000b40 <console_out>:
	if ('\n' == c) {
     b40:	280a      	cmp	r0, #10
{
     b42:	b538      	push	{r3, r4, r5, lr}
     b44:	4604      	mov	r4, r0
     b46:	4d07      	ldr	r5, [pc, #28]	; (b64 <console_out+0x24>)
	if ('\n' == c) {
     b48:	d104      	bne.n	b54 <console_out+0x14>
     b4a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     b4c:	6883      	ldr	r3, [r0, #8]
     b4e:	210d      	movs	r1, #13
     b50:	685b      	ldr	r3, [r3, #4]
     b52:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     b54:	6828      	ldr	r0, [r5, #0]
     b56:	6883      	ldr	r3, [r0, #8]
     b58:	b2e1      	uxtb	r1, r4
     b5a:	685b      	ldr	r3, [r3, #4]
     b5c:	4798      	blx	r3
}
     b5e:	4620      	mov	r0, r4
     b60:	bd38      	pop	{r3, r4, r5, pc}
     b62:	bf00      	nop
     b64:	20000248 	.word	0x20000248

00000b68 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
     b68:	4a0e      	ldr	r2, [pc, #56]	; (ba4 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     b6a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     b6c:	1a84      	subs	r4, r0, r2
{
     b6e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
     b70:	200c      	movs	r0, #12
{
     b72:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
     b74:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
     b76:	10a3      	asrs	r3, r4, #2
     b78:	4c0b      	ldr	r4, [pc, #44]	; (ba8 <onoff_stop+0x40>)
     b7a:	435c      	muls	r4, r3
     b7c:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
     b7e:	fb00 2004 	mla	r0, r0, r4, r2
     b82:	4408      	add	r0, r1
     b84:	f003 fdbf 	bl	4706 <set_off_state>
	if (err < 0) {
     b88:	1e01      	subs	r1, r0, #0
     b8a:	db05      	blt.n	b98 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
     b8c:	4b07      	ldr	r3, [pc, #28]	; (bac <onoff_stop+0x44>)
     b8e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
     b92:	6863      	ldr	r3, [r4, #4]
     b94:	4798      	blx	r3
	return 0;
     b96:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
     b98:	4628      	mov	r0, r5
     b9a:	4633      	mov	r3, r6
}
     b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
     ba0:	4718      	bx	r3
     ba2:	bf00      	nop
     ba4:	2000025c 	.word	0x2000025c
     ba8:	b6db6db7 	.word	0xb6db6db7
     bac:	000050fc 	.word	0x000050fc

00000bb0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
     bb4:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
     bb6:	4e10      	ldr	r6, [pc, #64]	; (bf8 <onoff_start+0x48>)
{
     bb8:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
     bba:	1b84      	subs	r4, r0, r6
     bbc:	10a3      	asrs	r3, r4, #2
     bbe:	4c0f      	ldr	r4, [pc, #60]	; (bfc <onoff_start+0x4c>)
{
     bc0:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
     bc2:	435c      	muls	r4, r3
     bc4:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
     bc6:	4365      	muls	r5, r4
     bc8:	f105 0040 	add.w	r0, r5, #64	; 0x40
     bcc:	2140      	movs	r1, #64	; 0x40
     bce:	4430      	add	r0, r6
     bd0:	f003 fdb2 	bl	4738 <set_starting_state>
	if (err < 0) {
     bd4:	1e01      	subs	r1, r0, #0
     bd6:	db09      	blt.n	bec <onoff_start+0x3c>
	subdata->cb = data->cb;
     bd8:	4a09      	ldr	r2, [pc, #36]	; (c00 <onoff_start+0x50>)
     bda:	1973      	adds	r3, r6, r5
	subdata->user_data = data->user_data;
     bdc:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
     be0:	4b08      	ldr	r3, [pc, #32]	; (c04 <onoff_start+0x54>)
     be2:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
     be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
     bea:	4718      	bx	r3
		notify(mgr, err);
     bec:	4640      	mov	r0, r8
     bee:	463b      	mov	r3, r7
}
     bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
     bf4:	4718      	bx	r3
     bf6:	bf00      	nop
     bf8:	2000025c 	.word	0x2000025c
     bfc:	b6db6db7 	.word	0xb6db6db7
     c00:	0000479b 	.word	0x0000479b
     c04:	000050fc 	.word	0x000050fc

00000c08 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
     c08:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     c0a:	2200      	movs	r2, #0
     c0c:	2101      	movs	r1, #1
{
     c0e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     c10:	2005      	movs	r0, #5
     c12:	f000 fd67 	bl	16e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
     c16:	2005      	movs	r0, #5
     c18:	f000 fd46 	bl	16a8 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
     c1c:	480f      	ldr	r0, [pc, #60]	; (c5c <clk_init+0x54>)
     c1e:	f001 fbe1 	bl	23e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
     c22:	4b0f      	ldr	r3, [pc, #60]	; (c60 <clk_init+0x58>)
     c24:	4298      	cmp	r0, r3
     c26:	d115      	bne.n	c54 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
     c28:	f003 ffb1 	bl	4b8e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
     c2c:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
     c2e:	490d      	ldr	r1, [pc, #52]	; (c64 <clk_init+0x5c>)
     c30:	4630      	mov	r0, r6
     c32:	f003 fc1a 	bl	446a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
     c36:	2800      	cmp	r0, #0
     c38:	db0b      	blt.n	c52 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     c3a:	2501      	movs	r5, #1
     c3c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
     c3e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
     c40:	4908      	ldr	r1, [pc, #32]	; (c64 <clk_init+0x5c>)
     c42:	f104 001c 	add.w	r0, r4, #28
     c46:	f003 fc10 	bl	446a <onoff_manager_init>
		if (err < 0) {
     c4a:	2800      	cmp	r0, #0
     c4c:	db01      	blt.n	c52 <clk_init+0x4a>
	}

	return 0;
     c4e:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     c50:	64e5      	str	r5, [r4, #76]	; 0x4c
}
     c52:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
     c54:	f06f 0004 	mvn.w	r0, #4
     c58:	e7fb      	b.n	c52 <clk_init+0x4a>
     c5a:	bf00      	nop
     c5c:	00000ca5 	.word	0x00000ca5
     c60:	0bad0000 	.word	0x0bad0000
     c64:	0000510c 	.word	0x0000510c

00000c68 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
     c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
     c6a:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
     c6c:	4601      	mov	r1, r0
	sub_data->cb = NULL;
     c6e:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
     c70:	434b      	muls	r3, r1
     c72:	480a      	ldr	r0, [pc, #40]	; (c9c <clkstarted_handle.constprop.0+0x34>)
     c74:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
     c76:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
     c78:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     c7c:	4418      	add	r0, r3
	sub_data->cb = NULL;
     c7e:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
     c80:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
     c82:	f003 fd77 	bl	4774 <set_on_state>
	if (callback) {
     c86:	b135      	cbz	r5, c96 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
     c88:	462b      	mov	r3, r5
     c8a:	9a01      	ldr	r2, [sp, #4]
     c8c:	4804      	ldr	r0, [pc, #16]	; (ca0 <clkstarted_handle.constprop.0+0x38>)
}
     c8e:	b002      	add	sp, #8
     c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
     c94:	4718      	bx	r3
}
     c96:	b002      	add	sp, #8
     c98:	bd70      	pop	{r4, r5, r6, pc}
     c9a:	bf00      	nop
     c9c:	2000025c 	.word	0x2000025c
     ca0:	2000009c 	.word	0x2000009c

00000ca4 <clock_event_handler>:
	switch (event) {
     ca4:	b110      	cbz	r0, cac <clock_event_handler+0x8>
     ca6:	2801      	cmp	r0, #1
     ca8:	d004      	beq.n	cb4 <clock_event_handler+0x10>
     caa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
     cac:	4b03      	ldr	r3, [pc, #12]	; (cbc <clock_event_handler+0x18>)
     cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     cb0:	075b      	lsls	r3, r3, #29
     cb2:	d101      	bne.n	cb8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     cb4:	f7ff bfd8 	b.w	c68 <clkstarted_handle.constprop.0>
}
     cb8:	4770      	bx	lr
     cba:	bf00      	nop
     cbc:	2000025c 	.word	0x2000025c

00000cc0 <generic_hfclk_start>:
{
     cc0:	b508      	push	{r3, lr}
     cc2:	f04f 0320 	mov.w	r3, #32
     cc6:	f3ef 8111 	mrs	r1, BASEPRI
     cca:	f383 8811 	msr	BASEPRI, r3
     cce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
     cd2:	4a12      	ldr	r2, [pc, #72]	; (d1c <generic_hfclk_start+0x5c>)
     cd4:	6813      	ldr	r3, [r2, #0]
     cd6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
     cda:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
     cde:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
     ce0:	d00c      	beq.n	cfc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
     ce2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     ce6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
     cea:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
     cee:	f013 0301 	ands.w	r3, r3, #1
     cf2:	d003      	beq.n	cfc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
     cf4:	480a      	ldr	r0, [pc, #40]	; (d20 <generic_hfclk_start+0x60>)
     cf6:	f003 fd3d 	bl	4774 <set_on_state>
			already_started = true;
     cfa:	2301      	movs	r3, #1
	__asm__ volatile(
     cfc:	f381 8811 	msr	BASEPRI, r1
     d00:	f3bf 8f6f 	isb	sy
	if (already_started) {
     d04:	b123      	cbz	r3, d10 <generic_hfclk_start+0x50>
}
     d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
     d0a:	2000      	movs	r0, #0
     d0c:	f7ff bfac 	b.w	c68 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
     d10:	2001      	movs	r0, #1
}
     d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     d16:	f001 bb75 	b.w	2404 <nrfx_clock_start>
     d1a:	bf00      	nop
     d1c:	200002ac 	.word	0x200002ac
     d20:	2000029c 	.word	0x2000029c

00000d24 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     d24:	4b07      	ldr	r3, [pc, #28]	; (d44 <generic_hfclk_stop+0x20>)
     d26:	e8d3 2fef 	ldaex	r2, [r3]
     d2a:	f022 0102 	bic.w	r1, r2, #2
     d2e:	e8c3 1fe0 	stlex	r0, r1, [r3]
     d32:	2800      	cmp	r0, #0
     d34:	d1f7      	bne.n	d26 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
     d36:	07d3      	lsls	r3, r2, #31
     d38:	d402      	bmi.n	d40 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
     d3a:	2001      	movs	r0, #1
     d3c:	f001 bb94 	b.w	2468 <nrfx_clock_stop>
}
     d40:	4770      	bx	lr
     d42:	bf00      	nop
     d44:	200002ac 	.word	0x200002ac

00000d48 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     d48:	2300      	movs	r3, #0
     d4a:	2201      	movs	r2, #1
{
     d4c:	b510      	push	{r4, lr}
     d4e:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     d50:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
     d54:	9301      	str	r3, [sp, #4]
     d56:	4b09      	ldr	r3, [pc, #36]	; (d7c <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     d58:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
     d5a:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     d5c:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
     d60:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
     d64:	f003 fd40 	bl	47e8 <api_start>
	if (err < 0) {
     d68:	2800      	cmp	r0, #0
     d6a:	db05      	blt.n	d78 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     d6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     d70:	2300      	movs	r3, #0
     d72:	4620      	mov	r0, r4
     d74:	f002 f9ee 	bl	3154 <z_impl_k_sem_take>
}
     d78:	b008      	add	sp, #32
     d7a:	bd10      	pop	{r4, pc}
     d7c:	000047af 	.word	0x000047af

00000d80 <z_nrf_clock_control_lf_on>:
{
     d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     d84:	2201      	movs	r2, #1
     d86:	4606      	mov	r6, r0
     d88:	4939      	ldr	r1, [pc, #228]	; (e70 <z_nrf_clock_control_lf_on+0xf0>)
     d8a:	e8d1 3fef 	ldaex	r3, [r1]
     d8e:	e8c1 2fe0 	stlex	r0, r2, [r1]
     d92:	2800      	cmp	r0, #0
     d94:	d1f9      	bne.n	d8a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
     d96:	b933      	cbnz	r3, da6 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
     d98:	4936      	ldr	r1, [pc, #216]	; (e74 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
     d9a:	4837      	ldr	r0, [pc, #220]	; (e78 <z_nrf_clock_control_lf_on+0xf8>)
     d9c:	604b      	str	r3, [r1, #4]
     d9e:	60cb      	str	r3, [r1, #12]
     da0:	608a      	str	r2, [r1, #8]
     da2:	f003 fb75 	bl	4490 <onoff_request>
	switch (start_mode) {
     da6:	1e73      	subs	r3, r6, #1
     da8:	2b01      	cmp	r3, #1
     daa:	d832      	bhi.n	e12 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
     dac:	2e01      	cmp	r6, #1
     dae:	d107      	bne.n	dc0 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
     db0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     db4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
     db8:	f003 0303 	and.w	r3, r3, #3
     dbc:	2b02      	cmp	r3, #2
     dbe:	d028      	beq.n	e12 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
     dc0:	f003 ffd5 	bl	4d6e <k_is_in_isr>
     dc4:	4604      	mov	r4, r0
     dc6:	b918      	cbnz	r0, dd0 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
     dc8:	4b2c      	ldr	r3, [pc, #176]	; (e7c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	2b00      	cmp	r3, #0
     dce:	d147      	bne.n	e60 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
     dd0:	f04f 0320 	mov.w	r3, #32
     dd4:	f3ef 8511 	mrs	r5, BASEPRI
     dd8:	f383 8811 	msr	BASEPRI, r3
     ddc:	f3bf 8f6f 	isb	sy
     de0:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     de2:	4f27      	ldr	r7, [pc, #156]	; (e80 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     de4:	f8df 809c 	ldr.w	r8, [pc, #156]	; e84 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     de8:	f8df 909c 	ldr.w	r9, [pc, #156]	; e88 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
     dec:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     df0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
     df4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
     df8:	03d2      	lsls	r2, r2, #15
     dfa:	d50c      	bpl.n	e16 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
     dfc:	f003 0303 	and.w	r3, r3, #3
     e00:	2b02      	cmp	r3, #2
     e02:	d001      	beq.n	e08 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
     e04:	2e01      	cmp	r6, #1
     e06:	d106      	bne.n	e16 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
     e08:	b324      	cbz	r4, e54 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
     e0a:	f385 8811 	msr	BASEPRI, r5
     e0e:	f3bf 8f6f 	isb	sy
}
     e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
     e16:	b1c4      	cbz	r4, e4a <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
     e18:	4628      	mov	r0, r5
     e1a:	f000 fcc7 	bl	17ac <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
     e1e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     e22:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
     e26:	b2db      	uxtb	r3, r3
     e28:	2b01      	cmp	r3, #1
     e2a:	d1df      	bne.n	dec <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     e2c:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
     e2e:	2900      	cmp	r1, #0
     e30:	d0dc      	beq.n	dec <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     e32:	2100      	movs	r1, #0
     e34:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
     e36:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
     e38:	2102      	movs	r1, #2
     e3a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
     e3e:	2220      	movs	r2, #32
     e40:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     e44:	f8c9 3000 	str.w	r3, [r9]
}
     e48:	e7d0      	b.n	dec <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
     e4a:	2100      	movs	r1, #0
     e4c:	2021      	movs	r0, #33	; 0x21
     e4e:	f002 f93b 	bl	30c8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
     e52:	e7e4      	b.n	e1e <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
     e54:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     e58:	2202      	movs	r2, #2
     e5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
     e5e:	e7d8      	b.n	e12 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
     e60:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     e64:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
     e66:	4605      	mov	r5, r0
     e68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
     e6c:	e7b9      	b.n	de2 <z_nrf_clock_control_lf_on+0x62>
     e6e:	bf00      	nop
     e70:	200002b0 	.word	0x200002b0
     e74:	2000024c 	.word	0x2000024c
     e78:	20000278 	.word	0x20000278
     e7c:	2000084d 	.word	0x2000084d
     e80:	50005104 	.word	0x50005104
     e84:	e000e100 	.word	0xe000e100
     e88:	50005008 	.word	0x50005008

00000e8c <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
     e8c:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     e8e:	4b08      	ldr	r3, [pc, #32]	; (eb0 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     e90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     e94:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     e98:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     e9c:	4290      	cmp	r0, r2
     e9e:	d100      	bne.n	ea2 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     ea0:	4770      	bx	lr
     ea2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     ea6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     ea8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     eac:	e7f2      	b.n	e94 <handle_next_cycle_case+0x8>
     eae:	bf00      	nop
     eb0:	50015000 	.word	0x50015000

00000eb4 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     eb4:	2200      	movs	r2, #0
     eb6:	4b07      	ldr	r3, [pc, #28]	; (ed4 <rtc_nrf_isr+0x20>)
     eb8:	601a      	str	r2, [r3, #0]
     eba:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     ebc:	4a06      	ldr	r2, [pc, #24]	; (ed8 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <rtc_nrf_isr+0x28>)
     ec0:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
     ec4:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     ec6:	1ac0      	subs	r0, r0, r3
     ec8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     ecc:	4403      	add	r3, r0
     ece:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
     ed0:	f002 bacc 	b.w	346c <z_clock_announce>
     ed4:	50015140 	.word	0x50015140
     ed8:	200002b4 	.word	0x200002b4
     edc:	50015000 	.word	0x50015000

00000ee0 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
     ee0:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     ee2:	2400      	movs	r4, #0
     ee4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     ee8:	4d0e      	ldr	r5, [pc, #56]	; (f24 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     eea:	4b0f      	ldr	r3, [pc, #60]	; (f28 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
     eec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     ef0:	601c      	str	r4, [r3, #0]
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	4b0d      	ldr	r3, [pc, #52]	; (f2c <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
     ef6:	2101      	movs	r1, #1
     ef8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     f00:	4622      	mov	r2, r4
     f02:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
     f06:	2015      	movs	r0, #21
     f08:	f000 fbec 	bl	16e4 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
     f0c:	2015      	movs	r0, #21
     f0e:	f000 fbcb 	bl	16a8 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     f12:	2301      	movs	r3, #1
     f14:	4a06      	ldr	r2, [pc, #24]	; (f30 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
     f16:	2002      	movs	r0, #2
     f18:	6013      	str	r3, [r2, #0]
     f1a:	602b      	str	r3, [r5, #0]
     f1c:	f7ff ff30 	bl	d80 <z_nrf_clock_control_lf_on>

	return 0;
}
     f20:	4620      	mov	r0, r4
     f22:	bd38      	pop	{r3, r4, r5, pc}
     f24:	50015000 	.word	0x50015000
     f28:	50015140 	.word	0x50015140
     f2c:	e000e100 	.word	0xe000e100
     f30:	50015008 	.word	0x50015008

00000f34 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
     f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
     f36:	4b2d      	ldr	r3, [pc, #180]	; (fec <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     f38:	4c2d      	ldr	r4, [pc, #180]	; (ff0 <z_clock_set_timeout+0xbc>)
     f3a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
     f3e:	4b2d      	ldr	r3, [pc, #180]	; (ff4 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     f40:	f1b0 3fff 	cmp.w	r0, #4294967295
     f44:	bf08      	it	eq
     f46:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
     f48:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
     f4a:	1a52      	subs	r2, r2, r1
     f4c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     f50:	0212      	lsls	r2, r2, #8
     f52:	d438      	bmi.n	fc6 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
     f54:	3801      	subs	r0, #1
     f56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     f5a:	42a0      	cmp	r0, r4
     f5c:	bfa8      	it	ge
     f5e:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     f60:	3301      	adds	r3, #1
     f62:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     f64:	42a0      	cmp	r0, r4
     f66:	bf94      	ite	ls
     f68:	180c      	addls	r4, r1, r0
     f6a:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
     f6c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     f70:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
     f72:	4a1e      	ldr	r2, [pc, #120]	; (fec <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     f74:	4d20      	ldr	r5, [pc, #128]	; (ff8 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
     f76:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
     f7a:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
     f7e:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     f82:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
     f84:	1a5b      	subs	r3, r3, r1
     f86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f8a:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
     f8c:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     f8e:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     f92:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     f96:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
     f9a:	d104      	bne.n	fa6 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
     f9c:	200f      	movs	r0, #15
     f9e:	f003 feec 	bl	4d7a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     fa2:	602e      	str	r6, [r5, #0]
     fa4:	682b      	ldr	r3, [r5, #0]
     fa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     faa:	4b14      	ldr	r3, [pc, #80]	; (ffc <z_clock_set_timeout+0xc8>)
     fac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
     fb0:	4b0e      	ldr	r3, [pc, #56]	; (fec <z_clock_set_timeout+0xb8>)
     fb2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     fb6:	1a22      	subs	r2, r4, r0
     fb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
     fbc:	2a01      	cmp	r2, #1
     fbe:	d104      	bne.n	fca <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
     fc0:	f7ff ff64 	bl	e8c <handle_next_cycle_case>
     fc4:	e00b      	b.n	fde <z_clock_set_timeout+0xaa>
		ticks = 0;
     fc6:	2000      	movs	r0, #0
     fc8:	e7ca      	b.n	f60 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     fca:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     fce:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
     fd2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     fd6:	1a24      	subs	r4, r4, r0
     fd8:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
     fda:	0223      	lsls	r3, r4, #8
     fdc:	d4f0      	bmi.n	fc0 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
     fde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     fe2:	4b02      	ldr	r3, [pc, #8]	; (fec <z_clock_set_timeout+0xb8>)
     fe4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
     fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fea:	bf00      	nop
     fec:	50015000 	.word	0x50015000
     ff0:	007fffff 	.word	0x007fffff
     ff4:	200002b4 	.word	0x200002b4
     ff8:	50015140 	.word	0x50015140
     ffc:	e000e100 	.word	0xe000e100

00001000 <z_clock_elapsed>:
	__asm__ volatile(
    1000:	f04f 0220 	mov.w	r2, #32
    1004:	f3ef 8311 	mrs	r3, BASEPRI
    1008:	f382 8811 	msr	BASEPRI, r2
    100c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1010:	4a06      	ldr	r2, [pc, #24]	; (102c <z_clock_elapsed+0x2c>)
    1012:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1016:	4a06      	ldr	r2, [pc, #24]	; (1030 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1018:	6812      	ldr	r2, [r2, #0]
    101a:	1a80      	subs	r0, r0, r2
    101c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1020:	f383 8811 	msr	BASEPRI, r3
    1024:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1028:	4770      	bx	lr
    102a:	bf00      	nop
    102c:	50015000 	.word	0x50015000
    1030:	200002b4 	.word	0x200002b4

00001034 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1036:	2800      	cmp	r0, #0
{
    1038:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
    103a:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    103c:	bf14      	ite	ne
    103e:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    1042:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
    1046:	4e20      	ldr	r6, [pc, #128]	; (10c8 <config_regions+0x94>)
    1048:	4295      	cmp	r5, r2
    104a:	d332      	bcc.n	10b2 <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    104c:	fb02 f003 	mul.w	r0, r2, r3
    1050:	3a01      	subs	r2, #1
    1052:	434b      	muls	r3, r1
    1054:	9000      	str	r0, [sp, #0]
    1056:	481d      	ldr	r0, [pc, #116]	; (10cc <config_regions+0x98>)
    1058:	f003 f9aa 	bl	43b0 <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    105c:	4b1c      	ldr	r3, [pc, #112]	; (10d0 <config_regions+0x9c>)
    105e:	f014 0f10 	tst.w	r4, #16
    1062:	491c      	ldr	r1, [pc, #112]	; (10d4 <config_regions+0xa0>)
    1064:	481c      	ldr	r0, [pc, #112]	; (10d8 <config_regions+0xa4>)
    1066:	bf08      	it	eq
    1068:	4619      	moveq	r1, r3
    106a:	f003 f9a1 	bl	43b0 <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    106e:	f014 0f04 	tst.w	r4, #4
    1072:	bf14      	ite	ne
    1074:	2172      	movne	r1, #114	; 0x72
    1076:	212d      	moveq	r1, #45	; 0x2d
    1078:	4818      	ldr	r0, [pc, #96]	; (10dc <config_regions+0xa8>)
    107a:	f003 f999 	bl	43b0 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    107e:	f014 0f02 	tst.w	r4, #2
    1082:	bf14      	ite	ne
    1084:	2177      	movne	r1, #119	; 0x77
    1086:	212d      	moveq	r1, #45	; 0x2d
    1088:	4814      	ldr	r0, [pc, #80]	; (10dc <config_regions+0xa8>)
    108a:	f003 f991 	bl	43b0 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    108e:	f014 0f01 	tst.w	r4, #1
    1092:	bf0c      	ite	eq
    1094:	212d      	moveq	r1, #45	; 0x2d
    1096:	2178      	movne	r1, #120	; 0x78
    1098:	4810      	ldr	r0, [pc, #64]	; (10dc <config_regions+0xa8>)
    109a:	f003 f989 	bl	43b0 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    109e:	216c      	movs	r1, #108	; 0x6c
    10a0:	480e      	ldr	r0, [pc, #56]	; (10dc <config_regions+0xa8>)
    10a2:	f003 f985 	bl	43b0 <printk>
	PRINT("\n");
    10a6:	480e      	ldr	r0, [pc, #56]	; (10e0 <config_regions+0xac>)
}
    10a8:	b003      	add	sp, #12
    10aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    10ae:	f003 b97f 	b.w	43b0 <printk>
		if (ram) {
    10b2:	b128      	cbz	r0, 10c0 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
    10b4:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
    10b8:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    10bc:	3501      	adds	r5, #1
    10be:	e7c3      	b.n	1048 <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    10c0:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    10c4:	e7f8      	b.n	10b8 <config_regions+0x84>
    10c6:	bf00      	nop
    10c8:	50003000 	.word	0x50003000
    10cc:	000053d9 	.word	0x000053d9
    10d0:	000053cd 	.word	0x000053cd
    10d4:	000053c4 	.word	0x000053c4
    10d8:	00005558 	.word	0x00005558
    10dc:	000053f3 	.word	0x000053f3
    10e0:	0000572e 	.word	0x0000572e

000010e4 <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(uint8_t id, bool dma_present)
    10e4:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
    10e6:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    10e8:	2b00      	cmp	r3, #0
    10ea:	db0c      	blt.n	1106 <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10ec:	2201      	movs	r2, #1
    10ee:	f000 011f 	and.w	r1, r0, #31
    10f2:	408a      	lsls	r2, r1
    10f4:	095b      	lsrs	r3, r3, #5
    10f6:	4910      	ldr	r1, [pc, #64]	; (1138 <spm_config_peripheral.constprop.0+0x54>)
    10f8:	3320      	adds	r3, #32
    10fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    10fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1102:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1106:	0083      	lsls	r3, r0, #2
    1108:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    110c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1110:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1112:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1116:	d006      	beq.n	1126 <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
    1118:	2a00      	cmp	r2, #0
    111a:	da07      	bge.n	112c <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    111c:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    1120:	3a02      	subs	r2, #2
    1122:	2a01      	cmp	r2, #1
    1124:	d802      	bhi.n	112c <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1126:	4a05      	ldr	r2, [pc, #20]	; (113c <spm_config_peripheral.constprop.0+0x58>)
    1128:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    112c:	2101      	movs	r1, #1
    112e:	f003 fbce 	bl	48ce <irq_target_state_set>
	return 0;
}
    1132:	2000      	movs	r0, #0
    1134:	bd08      	pop	{r3, pc}
    1136:	bf00      	nop
    1138:	e000e100 	.word	0xe000e100
    113c:	80000100 	.word	0x80000100

00001140 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    1140:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1142:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1146:	f24c 0504 	movw	r5, #49156	; 0xc004
{
    114a:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    114c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1150:	482c      	ldr	r0, [pc, #176]	; (1204 <spm_jump+0xc4>)
    1152:	f003 f92d 	bl	43b0 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1156:	6821      	ldr	r1, [r4, #0]
    1158:	482b      	ldr	r0, [pc, #172]	; (1208 <spm_jump+0xc8>)
    115a:	f003 f929 	bl	43b0 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    115e:	6829      	ldr	r1, [r5, #0]
    1160:	482a      	ldr	r0, [pc, #168]	; (120c <spm_jump+0xcc>)
    1162:	f003 f925 	bl	43b0 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1166:	2210      	movs	r2, #16
    1168:	2100      	movs	r1, #0
    116a:	4668      	mov	r0, sp
    116c:	f003 fc76 	bl	4a5c <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    1170:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    1172:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1174:	9300      	str	r3, [sp, #0]
    1176:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    1178:	f000 fe74 	bl	1e64 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    117c:	2001      	movs	r0, #1
    117e:	f000 fea1 	bl	1ec4 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    1182:	2000      	movs	r0, #0
    1184:	f000 fe8a 	bl	1e9c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    1188:	2000      	movs	r0, #0
    118a:	f000 feaf 	bl	1eec <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    118e:	2101      	movs	r1, #1
    1190:	2000      	movs	r0, #0
    1192:	f000 fec9 	bl	1f28 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    1196:	f000 febd 	bl	1f14 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    119a:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    119c:	481c      	ldr	r0, [pc, #112]	; (1210 <spm_jump+0xd0>)
    119e:	f003 f907 	bl	43b0 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
    11a2:	2008      	movs	r0, #8
    11a4:	f7ff ff9e 	bl	10e4 <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    11a8:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
    11ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11b0:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    11b4:	0864      	lsrs	r4, r4, #1
    11b6:	0064      	lsls	r4, r4, #1
    11b8:	4620      	mov	r0, r4
    11ba:	4621      	mov	r1, r4
    11bc:	4622      	mov	r2, r4
    11be:	4623      	mov	r3, r4
    11c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    11c4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    11c8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    11cc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    11d0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    11d4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    11d8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    11dc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    11e0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    11e4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    11e8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    11ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    11f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    11f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    11f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    11fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1200:	f7ff f9aa 	bl	558 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    1204:	000053f6 	.word	0x000053f6
    1208:	0000540d 	.word	0x0000540d
    120c:	00005422 	.word	0x00005422
    1210:	00005440 	.word	0x00005440

00001214 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    1214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    1218:	483b      	ldr	r0, [pc, #236]	; (1308 <spm_config+0xf4>)
    121a:	f003 f8c9 	bl	43b0 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    121e:	2100      	movs	r1, #0
    1220:	f240 1317 	movw	r3, #279	; 0x117
    1224:	4608      	mov	r0, r1
    1226:	2201      	movs	r2, #1
    1228:	f7ff ff04 	bl	1034 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    122c:	f240 1307 	movw	r3, #263	; 0x107
    1230:	2220      	movs	r2, #32
    1232:	2101      	movs	r1, #1
    1234:	2000      	movs	r0, #0
    1236:	f7ff fefd 	bl	1034 <config_regions>
	PRINT("\n");
    123a:	4834      	ldr	r0, [pc, #208]	; (130c <spm_config+0xf8>)
    123c:	f003 f8b8 	bl	43b0 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1240:	4b33      	ldr	r3, [pc, #204]	; (1310 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1242:	4a34      	ldr	r2, [pc, #208]	; (1314 <spm_config+0x100>)
    1244:	f3c3 31c4 	ubfx	r1, r3, #15, #5
    1248:	f3c3 030e 	ubfx	r3, r3, #0, #15
    124c:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    1250:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1254:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    1258:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    125c:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
    1260:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    1264:	482c      	ldr	r0, [pc, #176]	; (1318 <spm_config+0x104>)
    1266:	0152      	lsls	r2, r2, #5
    1268:	f003 f8a2 	bl	43b0 <printk>
	PRINT("\n");
    126c:	4827      	ldr	r0, [pc, #156]	; (130c <spm_config+0xf8>)
    126e:	f003 f89f 	bl	43b0 <printk>
	int err = spm_secure_services_init();
    1272:	f003 fada 	bl	482a <spm_secure_services_init>
	if (err != 0) {
    1276:	4601      	mov	r1, r0
    1278:	b110      	cbz	r0, 1280 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
    127a:	4828      	ldr	r0, [pc, #160]	; (131c <spm_config+0x108>)
    127c:	f003 f898 	bl	43b0 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1280:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1282:	4827      	ldr	r0, [pc, #156]	; (1320 <spm_config+0x10c>)
    1284:	f003 f894 	bl	43b0 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1288:	f240 1317 	movw	r3, #279	; 0x117
    128c:	2208      	movs	r2, #8
    128e:	2100      	movs	r1, #0
    1290:	2001      	movs	r0, #1
    1292:	f7ff fecf 	bl	1034 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1296:	4d1f      	ldr	r5, [pc, #124]	; (1314 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1298:	f240 1307 	movw	r3, #263	; 0x107
    129c:	2220      	movs	r2, #32
    129e:	2108      	movs	r1, #8
    12a0:	2001      	movs	r0, #1
    12a2:	f7ff fec7 	bl	1034 <config_regions>
	PRINT("\n");
    12a6:	4819      	ldr	r0, [pc, #100]	; (130c <spm_config+0xf8>)
    12a8:	f003 f882 	bl	43b0 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    12ac:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    12b0:	481c      	ldr	r0, [pc, #112]	; (1324 <spm_config+0x110>)
    12b2:	f003 f87d 	bl	43b0 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    12b6:	4f1c      	ldr	r7, [pc, #112]	; (1328 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    12b8:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    12bc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 133c <spm_config+0x128>
    12c0:	4d1a      	ldr	r5, [pc, #104]	; (132c <spm_config+0x118>)
    12c2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1340 <spm_config+0x12c>
    12c6:	796e      	ldrb	r6, [r5, #5]
    12c8:	4621      	mov	r1, r4
    12ca:	2e00      	cmp	r6, #0
    12cc:	bf14      	ite	ne
    12ce:	463b      	movne	r3, r7
    12d0:	4643      	moveq	r3, r8
    12d2:	4648      	mov	r0, r9
    12d4:	682a      	ldr	r2, [r5, #0]
    12d6:	f003 f86b 	bl	43b0 <printk>
		if (!periph[i].nonsecure) {
    12da:	b966      	cbnz	r6, 12f6 <spm_config+0xe2>
			PRINT("\tSKIP\n");
    12dc:	4814      	ldr	r0, [pc, #80]	; (1330 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12de:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    12e0:	f003 f866 	bl	43b0 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12e4:	2c1a      	cmp	r4, #26
    12e6:	f105 0508 	add.w	r5, r5, #8
    12ea:	d1ec      	bne.n	12c6 <spm_config+0xb2>
	PRINT("\n");
    12ec:	4807      	ldr	r0, [pc, #28]	; (130c <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    12ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    12f2:	f003 b85d 	b.w	43b0 <printk>
		err = spm_config_peripheral(periph[i].id, false);
    12f6:	7928      	ldrb	r0, [r5, #4]
    12f8:	f7ff fef4 	bl	10e4 <spm_config_peripheral.constprop.0>
		if (err) {
    12fc:	b108      	cbz	r0, 1302 <spm_config+0xee>
			PRINT("\tERROR\n");
    12fe:	480d      	ldr	r0, [pc, #52]	; (1334 <spm_config+0x120>)
    1300:	e7ed      	b.n	12de <spm_config+0xca>
			PRINT("\tOK\n");
    1302:	480d      	ldr	r0, [pc, #52]	; (1338 <spm_config+0x124>)
    1304:	e7eb      	b.n	12de <spm_config+0xca>
    1306:	bf00      	nop
    1308:	00005476 	.word	0x00005476
    130c:	0000572e 	.word	0x0000572e
    1310:	00007fe0 	.word	0x00007fe0
    1314:	50003000 	.word	0x50003000
    1318:	0000549a 	.word	0x0000549a
    131c:	000054e0 	.word	0x000054e0
    1320:	00005510 	.word	0x00005510
    1324:	00005532 	.word	0x00005532
    1328:	0000546b 	.word	0x0000546b
    132c:	00005118 	.word	0x00005118
    1330:	0000555b 	.word	0x0000555b
    1334:	00005562 	.word	0x00005562
    1338:	0000556a 	.word	0x0000556a
    133c:	000053d1 	.word	0x000053d1
    1340:	0000554e 	.word	0x0000554e

00001344 <__acle_se_spm_request_read>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, uint32_t addr, size_t len)
{
    1344:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    1346:	2800      	cmp	r0, #0
    1348:	d04b      	beq.n	13e2 <__acle_se_spm_request_read+0x9e>
    134a:	2a00      	cmp	r2, #0
    134c:	d049      	beq.n	13e2 <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		uint32_t start = ranges[i].start;
		uint32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
    134e:	4b26      	ldr	r3, [pc, #152]	; (13e8 <__acle_se_spm_request_read+0xa4>)
    1350:	4299      	cmp	r1, r3
    1352:	d93c      	bls.n	13ce <__acle_se_spm_request_read+0x8a>
    1354:	1854      	adds	r4, r2, r1
    1356:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
    135a:	429c      	cmp	r4, r3
    135c:	d83a      	bhi.n	13d4 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
    135e:	f003 fb52 	bl	4a06 <memcpy>
			return 0;
    1362:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
    1364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1368:	4671      	mov	r1, lr
    136a:	4672      	mov	r2, lr
    136c:	4673      	mov	r3, lr
    136e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    1372:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    1376:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    137a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    137e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    1382:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    1386:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    138a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    138e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    1392:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    1396:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    139a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    139e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    13a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    13a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    13aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    13ae:	f38e 8c00 	msr	CPSR_fs, lr
    13b2:	b410      	push	{r4}
    13b4:	eef1 ca10 	vmrs	ip, fpscr
    13b8:	f64f 7460 	movw	r4, #65376	; 0xff60
    13bc:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    13c0:	ea0c 0c04 	and.w	ip, ip, r4
    13c4:	eee1 ca10 	vmsr	fpscr, ip
    13c8:	bc10      	pop	{r4}
    13ca:	46f4      	mov	ip, lr
    13cc:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
    13ce:	4b07      	ldr	r3, [pc, #28]	; (13ec <__acle_se_spm_request_read+0xa8>)
    13d0:	4299      	cmp	r1, r3
    13d2:	d903      	bls.n	13dc <__acle_se_spm_request_read+0x98>
    13d4:	4b06      	ldr	r3, [pc, #24]	; (13f0 <__acle_se_spm_request_read+0xac>)
    13d6:	1854      	adds	r4, r2, r1
    13d8:	429c      	cmp	r4, r3
    13da:	d9c0      	bls.n	135e <__acle_se_spm_request_read+0x1a>
	return -EPERM;
    13dc:	f04f 30ff 	mov.w	r0, #4294967295
    13e0:	e7c0      	b.n	1364 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
    13e2:	f06f 0015 	mvn.w	r0, #21
    13e6:	e7bd      	b.n	1364 <__acle_se_spm_request_read+0x20>
    13e8:	00ff0203 	.word	0x00ff0203
    13ec:	00ff012f 	.word	0x00ff012f
    13f0:	00ff0138 	.word	0x00ff0138

000013f4 <__acle_se_spm_firmware_info>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(uint32_t fw_address, struct fw_info *info)
{
    13f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13f8:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    13fa:	460e      	mov	r6, r1
{
    13fc:	b085      	sub	sp, #20
	if (info == NULL) {
    13fe:	2900      	cmp	r1, #0
    1400:	d054      	beq.n	14ac <__acle_se_spm_firmware_info+0xb8>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1402:	f04f 0800 	mov.w	r8, #0
    1406:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 14c0 <__acle_se_spm_firmware_info+0xcc>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    140a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 14c4 <__acle_se_spm_firmware_info+0xd0>
    140e:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1410:	f85b 5b04 	ldr.w	r5, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1414:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1418:	444d      	add	r5, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    141a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    141e:	220c      	movs	r2, #12
    1420:	4639      	mov	r1, r7
    1422:	4628      	mov	r0, r5
    1424:	f003 fac8 	bl	49b8 <memcmp>
    1428:	4604      	mov	r4, r0
    142a:	b908      	cbnz	r0, 1430 <__acle_se_spm_firmware_info+0x3c>
		if (finfo) {
    142c:	2d00      	cmp	r5, #0
    142e:	d140      	bne.n	14b2 <__acle_se_spm_firmware_info+0xbe>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1430:	f108 0801 	add.w	r8, r8, #1
    1434:	f1b8 0f05 	cmp.w	r8, #5
    1438:	d1ea      	bne.n	1410 <__acle_se_spm_firmware_info+0x1c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    143a:	f06f 040d 	mvn.w	r4, #13
}
    143e:	4620      	mov	r0, r4
    1440:	b005      	add	sp, #20
    1442:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    1446:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    144a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    144e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    1452:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    1456:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    145a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    145e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    1462:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    1466:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    146a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    146e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1472:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    1476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    147a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    147e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1482:	4671      	mov	r1, lr
    1484:	4672      	mov	r2, lr
    1486:	4673      	mov	r3, lr
    1488:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    148c:	f38e 8c00 	msr	CPSR_fs, lr
    1490:	b410      	push	{r4}
    1492:	eef1 ca10 	vmrs	ip, fpscr
    1496:	f64f 7460 	movw	r4, #65376	; 0xff60
    149a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    149e:	ea0c 0c04 	and.w	ip, ip, r4
    14a2:	eee1 ca10 	vmsr	fpscr, ip
    14a6:	bc10      	pop	{r4}
    14a8:	46f4      	mov	ip, lr
    14aa:	4774      	bxns	lr
		return -EINVAL;
    14ac:	f06f 0415 	mvn.w	r4, #21
    14b0:	e7c5      	b.n	143e <__acle_se_spm_firmware_info+0x4a>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    14b2:	223c      	movs	r2, #60	; 0x3c
    14b4:	4629      	mov	r1, r5
    14b6:	4630      	mov	r0, r6
    14b8:	f003 faa5 	bl	4a06 <memcpy>
		return 0;
    14bc:	e7bf      	b.n	143e <__acle_se_spm_firmware_info+0x4a>
    14be:	bf00      	nop
    14c0:	000051e8 	.word	0x000051e8
    14c4:	00005090 	.word	0x00005090

000014c8 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
    14c8:	4801      	ldr	r0, [pc, #4]	; (14d0 <nrf_cc310_platform_abort_init+0x8>)
    14ca:	f002 ba69 	b.w	39a0 <nrf_cc310_platform_set_abort>
    14ce:	bf00      	nop
    14d0:	000051fc 	.word	0x000051fc

000014d4 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
    14d4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    14d6:	b130      	cbz	r0, 14e6 <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    14d8:	6843      	ldr	r3, [r0, #4]
    14da:	b13b      	cbz	r3, 14ec <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    14dc:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    14de:	f001 fa7d 	bl	29dc <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
    14e2:	2000      	movs	r0, #0
}
    14e4:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    14e6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    14ea:	e7fb      	b.n	14e4 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    14ec:	4800      	ldr	r0, [pc, #0]	; (14f0 <mutex_unlock+0x1c>)
    14ee:	e7f9      	b.n	14e4 <mutex_unlock+0x10>
    14f0:	ffff8fea 	.word	0xffff8fea

000014f4 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
    14f4:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
    14f6:	4604      	mov	r4, r0
    14f8:	b918      	cbnz	r0, 1502 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
    14fa:	4b0b      	ldr	r3, [pc, #44]	; (1528 <mutex_free+0x34>)
    14fc:	480b      	ldr	r0, [pc, #44]	; (152c <mutex_free+0x38>)
    14fe:	685b      	ldr	r3, [r3, #4]
    1500:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    1502:	6865      	ldr	r5, [r4, #4]
    1504:	b155      	cbz	r5, 151c <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
    1506:	f015 0502 	ands.w	r5, r5, #2
    150a:	6820      	ldr	r0, [r4, #0]
    150c:	d107      	bne.n	151e <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    150e:	4601      	mov	r1, r0
    1510:	4807      	ldr	r0, [pc, #28]	; (1530 <mutex_free+0x3c>)
    1512:	f001 f9c1 	bl	2898 <k_mem_slab_free>
        mutex->mutex = NULL;
    1516:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
    1518:	2300      	movs	r3, #0
    151a:	6063      	str	r3, [r4, #4]
}
    151c:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    151e:	2214      	movs	r2, #20
    1520:	2100      	movs	r1, #0
    1522:	f003 fa9b 	bl	4a5c <memset>
    1526:	e7f7      	b.n	1518 <mutex_free+0x24>
    1528:	20000070 	.word	0x20000070
    152c:	0000566b 	.word	0x0000566b
    1530:	200002b8 	.word	0x200002b8

00001534 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
    1534:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1536:	4604      	mov	r4, r0
    1538:	b918      	cbnz	r0, 1542 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
    153a:	4b14      	ldr	r3, [pc, #80]	; (158c <mutex_init+0x58>)
    153c:	4814      	ldr	r0, [pc, #80]	; (1590 <mutex_init+0x5c>)
    153e:	685b      	ldr	r3, [r3, #4]
    1540:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
    1542:	6863      	ldr	r3, [r4, #4]
    1544:	b9cb      	cbnz	r3, 157a <mutex_init+0x46>
    1546:	6823      	ldr	r3, [r4, #0]
    1548:	b9bb      	cbnz	r3, 157a <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    154a:	f04f 32ff 	mov.w	r2, #4294967295
    154e:	f04f 33ff 	mov.w	r3, #4294967295
    1552:	4621      	mov	r1, r4
    1554:	480f      	ldr	r0, [pc, #60]	; (1594 <mutex_init+0x60>)
    1556:	f001 f96d 	bl	2834 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    155a:	b908      	cbnz	r0, 1560 <mutex_init+0x2c>
    155c:	6823      	ldr	r3, [r4, #0]
    155e:	b91b      	cbnz	r3, 1568 <mutex_init+0x34>
            platform_abort_apis.abort_fn(
    1560:	4b0a      	ldr	r3, [pc, #40]	; (158c <mutex_init+0x58>)
    1562:	480d      	ldr	r0, [pc, #52]	; (1598 <mutex_init+0x64>)
    1564:	685b      	ldr	r3, [r3, #4]
    1566:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1568:	2214      	movs	r2, #20
    156a:	2100      	movs	r1, #0
    156c:	6820      	ldr	r0, [r4, #0]
    156e:	f003 fa75 	bl	4a5c <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1572:	6863      	ldr	r3, [r4, #4]
    1574:	f043 0302 	orr.w	r3, r3, #2
    1578:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    157a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    157c:	f003 fb4b 	bl	4c16 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    1580:	6863      	ldr	r3, [r4, #4]
    1582:	f043 0301 	orr.w	r3, r3, #1
    1586:	6063      	str	r3, [r4, #4]
}
    1588:	bd10      	pop	{r4, pc}
    158a:	bf00      	nop
    158c:	20000070 	.word	0x20000070
    1590:	0000566b 	.word	0x0000566b
    1594:	200002b8 	.word	0x200002b8
    1598:	00005691 	.word	0x00005691

0000159c <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
    159c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    159e:	b168      	cbz	r0, 15bc <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    15a0:	6843      	ldr	r3, [r0, #4]
    15a2:	b173      	cbz	r3, 15c2 <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    15a4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    15a6:	f04f 33ff 	mov.w	r3, #4294967295
    15aa:	f04f 32ff 	mov.w	r2, #4294967295
    15ae:	f001 f99d 	bl	28ec <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    15b2:	4b05      	ldr	r3, [pc, #20]	; (15c8 <mutex_lock+0x2c>)
    if (ret == 0) {
    15b4:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    15b6:	bf18      	it	ne
    15b8:	4618      	movne	r0, r3
}
    15ba:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    15bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    15c0:	e7fb      	b.n	15ba <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    15c2:	4802      	ldr	r0, [pc, #8]	; (15cc <mutex_lock+0x30>)
    15c4:	e7f9      	b.n	15ba <mutex_lock+0x1e>
    15c6:	bf00      	nop
    15c8:	ffff8fe9 	.word	0xffff8fe9
    15cc:	ffff8fea 	.word	0xffff8fea

000015d0 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    15d0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    15d2:	4906      	ldr	r1, [pc, #24]	; (15ec <nrf_cc310_platform_mutex_init+0x1c>)
    15d4:	2340      	movs	r3, #64	; 0x40
    15d6:	2214      	movs	r2, #20
    15d8:	4805      	ldr	r0, [pc, #20]	; (15f0 <nrf_cc310_platform_mutex_init+0x20>)
    15da:	f003 fb01 	bl	4be0 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    15de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    15e2:	4904      	ldr	r1, [pc, #16]	; (15f4 <nrf_cc310_platform_mutex_init+0x24>)
    15e4:	4804      	ldr	r0, [pc, #16]	; (15f8 <nrf_cc310_platform_mutex_init+0x28>)
    15e6:	f002 ba13 	b.w	3a10 <nrf_cc310_platform_set_mutexes>
    15ea:	bf00      	nop
    15ec:	200002d4 	.word	0x200002d4
    15f0:	200002b8 	.word	0x200002b8
    15f4:	00005214 	.word	0x00005214
    15f8:	00005204 	.word	0x00005204

000015fc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    15fc:	4a09      	ldr	r2, [pc, #36]	; (1624 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    15fe:	490a      	ldr	r1, [pc, #40]	; (1628 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1600:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1602:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1604:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    1606:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1608:	4908      	ldr	r1, [pc, #32]	; (162c <arch_swap+0x30>)
    160a:	684b      	ldr	r3, [r1, #4]
    160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1610:	604b      	str	r3, [r1, #4]
    1612:	2300      	movs	r3, #0
    1614:	f383 8811 	msr	BASEPRI, r3
    1618:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    161c:	6893      	ldr	r3, [r2, #8]
}
    161e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    1620:	4770      	bx	lr
    1622:	bf00      	nop
    1624:	200007f0 	.word	0x200007f0
    1628:	00005288 	.word	0x00005288
    162c:	e000ed00 	.word	0xe000ed00

00001630 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1630:	4913      	ldr	r1, [pc, #76]	; (1680 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1632:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1634:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    1638:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    163a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    163e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1642:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1644:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1648:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    164c:	4f0d      	ldr	r7, [pc, #52]	; (1684 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    164e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1652:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1654:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1656:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1658:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    165a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    165c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    165e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1662:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    1666:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    166a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    166e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    1672:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1674:	f003 f959 	bl	492a <configure_builtin_stack_guard>
    pop {r2, lr}
    1678:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    167c:	4770      	bx	lr
    167e:	0000      	.short	0x0000
    ldr r1, =_kernel
    1680:	200007f0 	.word	0x200007f0
    ldr v4, =_SCS_ICSR
    1684:	e000ed04 	.word	0xe000ed04

00001688 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1688:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    168c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    168e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1692:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1696:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1698:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    169c:	2902      	cmp	r1, #2
    beq _oops
    169e:	d0ff      	beq.n	16a0 <_oops>

000016a0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    16a0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    16a2:	f003 f948 	bl	4936 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    16a6:	bd01      	pop	{r0, pc}

000016a8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    16a8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    16aa:	2b00      	cmp	r3, #0
    16ac:	db08      	blt.n	16c0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16ae:	2201      	movs	r2, #1
    16b0:	f000 001f 	and.w	r0, r0, #31
    16b4:	fa02 f000 	lsl.w	r0, r2, r0
    16b8:	4a02      	ldr	r2, [pc, #8]	; (16c4 <arch_irq_enable+0x1c>)
    16ba:	095b      	lsrs	r3, r3, #5
    16bc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    16c0:	4770      	bx	lr
    16c2:	bf00      	nop
    16c4:	e000e100 	.word	0xe000e100

000016c8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    16c8:	4b05      	ldr	r3, [pc, #20]	; (16e0 <arch_irq_is_enabled+0x18>)
    16ca:	0942      	lsrs	r2, r0, #5
    16cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    16d0:	2301      	movs	r3, #1
    16d2:	f000 001f 	and.w	r0, r0, #31
    16d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    16da:	4010      	ands	r0, r2
    16dc:	4770      	bx	lr
    16de:	bf00      	nop
    16e0:	e000e100 	.word	0xe000e100

000016e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    16e4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    16e6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    16e8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16ec:	bfac      	ite	ge
    16ee:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16f2:	4b06      	ldrlt	r3, [pc, #24]	; (170c <z_arm_irq_priority_set+0x28>)
    16f4:	ea4f 1141 	mov.w	r1, r1, lsl #5
    16f8:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16fa:	bfab      	itete	ge
    16fc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1700:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1704:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1708:	5419      	strblt	r1, [r3, r0]
}
    170a:	4770      	bx	lr
    170c:	e000ed14 	.word	0xe000ed14

00001710 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1710:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1714:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    1716:	490b      	ldr	r1, [pc, #44]	; (1744 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1718:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    171c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    171e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1722:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1726:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1728:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    172c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1734:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1738:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    173a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    173c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    173e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1740:	4770      	bx	lr
    1742:	bf00      	nop
    1744:	00004523 	.word	0x00004523

00001748 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1748:	b508      	push	{r3, lr}
    174a:	4604      	mov	r4, r0
    174c:	460e      	mov	r6, r1
    174e:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1750:	2300      	movs	r3, #0
    1752:	eee1 3a10 	vmsr	fpscr, r3
	z_arm_configure_static_mpu_regions();
    1756:	f000 fa0d 	bl	1b74 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    175a:	4b09      	ldr	r3, [pc, #36]	; (1780 <arch_switch_to_main_thread+0x38>)
    175c:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    175e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    1760:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1764:	4628      	mov	r0, r5
    1766:	f386 8809 	msr	PSP, r6
    176a:	2100      	movs	r1, #0
    176c:	b663      	cpsie	if
    176e:	f381 8811 	msr	BASEPRI, r1
    1772:	f3bf 8f6f 	isb	sy
    1776:	2200      	movs	r2, #0
    1778:	2300      	movs	r3, #0
    177a:	f002 fed2 	bl	4522 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    177e:	bf00      	nop
    1780:	200007f0 	.word	0x200007f0

00001784 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1784:	4901      	ldr	r1, [pc, #4]	; (178c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1786:	2210      	movs	r2, #16
	str	r2, [r1]
    1788:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    178a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    178c:	e000ed10 	.word	0xe000ed10

00001790 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1790:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1792:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1794:	f380 8811 	msr	BASEPRI, r0
	isb
    1798:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    179c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    17a0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    17a2:	b662      	cpsie	i
	isb
    17a4:	f3bf 8f6f 	isb	sy

	bx	lr
    17a8:	4770      	bx	lr
    17aa:	bf00      	nop

000017ac <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    17ac:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    17ae:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    17b0:	f381 8811 	msr	BASEPRI, r1

	wfe
    17b4:	bf20      	wfe

	msr	BASEPRI, r0
    17b6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    17ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    17bc:	4770      	bx	lr
    17be:	bf00      	nop

000017c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    17c0:	bf30      	wfi
    b z_SysNmiOnReset
    17c2:	f7ff bffd 	b.w	17c0 <z_SysNmiOnReset>
    17c6:	bf00      	nop

000017c8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    17c8:	4a17      	ldr	r2, [pc, #92]	; (1828 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    17ca:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    17cc:	4b17      	ldr	r3, [pc, #92]	; (182c <z_arm_prep_c+0x64>)
    17ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    17d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    17d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    17dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    17e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    17e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    17e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    17ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    17f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    17f4:	4a0e      	ldr	r2, [pc, #56]	; (1830 <z_arm_prep_c+0x68>)
    17f6:	6853      	ldr	r3, [r2, #4]
    17f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    17fc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    17fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1802:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1806:	2300      	movs	r3, #0
    1808:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    180c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1810:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1814:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1818:	f000 ff1c 	bl	2654 <z_bss_zero>
	z_data_copy();
    181c:	f000 ff24 	bl	2668 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1820:	f000 f970 	bl	1b04 <z_arm_interrupt_init>
	z_cstart();
    1824:	f000 ff5e 	bl	26e4 <z_cstart>
    1828:	00000000 	.word	0x00000000
    182c:	e000ed00 	.word	0xe000ed00
    1830:	e000ef30 	.word	0xe000ef30

00001834 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1834:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1836:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1838:	4a0b      	ldr	r2, [pc, #44]	; (1868 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    183a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    183c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    183e:	bf1e      	ittt	ne
	movne	r1, #0
    1840:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1842:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1844:	f003 f9ca 	blne	4bdc <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1848:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    184a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    184e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1852:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1856:	4905      	ldr	r1, [pc, #20]	; (186c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1858:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    185a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    185c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    185e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1862:	4903      	ldr	r1, [pc, #12]	; (1870 <_isr_wrapper+0x3c>)
	bx r1
    1864:	4708      	bx	r1
    1866:	0000      	.short	0x0000
	ldr r2, =_kernel
    1868:	200007f0 	.word	0x200007f0
	ldr r1, =_sw_isr_table
    186c:	00004e7c 	.word	0x00004e7c
	ldr r1, =z_arm_int_exit
    1870:	00001ac5 	.word	0x00001ac5

00001874 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1874:	f002 ff3c 	bl	46f0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1878:	2020      	movs	r0, #32
    msr BASEPRI, r0
    187a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    187e:	4808      	ldr	r0, [pc, #32]	; (18a0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1880:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1884:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1886:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    188a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    188e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1890:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1892:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1896:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    189a:	f7ff ff95 	bl	17c8 <z_arm_prep_c>
    189e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    18a0:	20000d90 	.word	0x20000d90

000018a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    18a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    18a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    18ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    18ae:	4672      	mov	r2, lr
	bl z_arm_fault
    18b0:	f000 f870 	bl	1994 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    18b4:	bd01      	pop	{r0, pc}
    18b6:	bf00      	nop

000018b8 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18b8:	4b0c      	ldr	r3, [pc, #48]	; (18ec <mem_manage_fault.isra.0+0x34>)
    18ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    18bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    18be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18c0:	0792      	lsls	r2, r2, #30
    18c2:	d508      	bpl.n	18d6 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    18c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    18c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18c8:	0612      	lsls	r2, r2, #24
    18ca:	d504      	bpl.n	18d6 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    18cc:	b118      	cbz	r0, 18d6 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    18ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    18d4:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    18d6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    18d8:	4b04      	ldr	r3, [pc, #16]	; (18ec <mem_manage_fault.isra.0+0x34>)
    18da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    18dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    18de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    18e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18e2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    18e6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    18e8:	7008      	strb	r0, [r1, #0]

	return reason;
}
    18ea:	4770      	bx	lr
    18ec:	e000ed00 	.word	0xe000ed00

000018f0 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    18f0:	4b0d      	ldr	r3, [pc, #52]	; (1928 <bus_fault.isra.0+0x38>)
    18f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    18f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    18f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18f8:	0592      	lsls	r2, r2, #22
    18fa:	d508      	bpl.n	190e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    18fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    18fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1900:	0412      	lsls	r2, r2, #16
    1902:	d504      	bpl.n	190e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1904:	b118      	cbz	r0, 190e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    190c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    190e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1910:	4b05      	ldr	r3, [pc, #20]	; (1928 <bus_fault.isra.0+0x38>)
    1912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1916:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1918:	bf58      	it	pl
    191a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    191c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    191e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1922:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1924:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1926:	4770      	bx	lr
    1928:	e000ed00 	.word	0xe000ed00

0000192c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    192c:	4b09      	ldr	r3, [pc, #36]	; (1954 <usage_fault.isra.0+0x28>)
    192e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1932:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    193a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    193c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    193e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1942:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1946:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    194a:	bf18      	it	ne
    194c:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    194e:	629a      	str	r2, [r3, #40]	; 0x28
}
    1950:	4770      	bx	lr
    1952:	bf00      	nop
    1954:	e000ed00 	.word	0xe000ed00

00001958 <secure_fault.isra.0>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    1958:	4b0d      	ldr	r3, [pc, #52]	; (1990 <secure_fault.isra.0+0x38>)
    195a:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    195c:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    195e:	695a      	ldr	r2, [r3, #20]
    1960:	07d0      	lsls	r0, r2, #31
    1962:	d40f      	bmi.n	1984 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1964:	695a      	ldr	r2, [r3, #20]
    1966:	0791      	lsls	r1, r2, #30
    1968:	d40c      	bmi.n	1984 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    196a:	695a      	ldr	r2, [r3, #20]
    196c:	0752      	lsls	r2, r2, #29
    196e:	d409      	bmi.n	1984 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1970:	695a      	ldr	r2, [r3, #20]
    1972:	0710      	lsls	r0, r2, #28
    1974:	d406      	bmi.n	1984 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1976:	695a      	ldr	r2, [r3, #20]
    1978:	06d1      	lsls	r1, r2, #27
    197a:	d403      	bmi.n	1984 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    197c:	695a      	ldr	r2, [r3, #20]
    197e:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1980:	bf58      	it	pl
    1982:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1984:	695a      	ldr	r2, [r3, #20]
    1986:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    198a:	615a      	str	r2, [r3, #20]
}
    198c:	4770      	bx	lr
    198e:	bf00      	nop
    1990:	e000edd0 	.word	0xe000edd0

00001994 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1996:	4b41      	ldr	r3, [pc, #260]	; (1a9c <z_arm_fault+0x108>)
    1998:	2500      	movs	r5, #0
    199a:	685b      	ldr	r3, [r3, #4]
{
    199c:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    199e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    19a2:	f385 8811 	msr	BASEPRI, r5
    19a6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    19aa:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    19ae:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    19b2:	d11e      	bne.n	19f2 <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    19b4:	f012 0401 	ands.w	r4, r2, #1
    19b8:	d01a      	beq.n	19f0 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    19ba:	0656      	lsls	r6, r2, #25
    19bc:	f002 0408 	and.w	r4, r2, #8
    19c0:	d467      	bmi.n	1a92 <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    19c2:	f082 0204 	eor.w	r2, r2, #4
    19c6:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    19ca:	b164      	cbz	r4, 19e6 <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    19cc:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
    19d0:	2200      	movs	r2, #0
    19d2:	3b03      	subs	r3, #3
    19d4:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    19d8:	2b04      	cmp	r3, #4
    19da:	d84b      	bhi.n	1a74 <z_arm_fault+0xe0>
    19dc:	e8df f003 	tbb	[pc, r3]
    19e0:	41504c0b 	.word	0x41504c0b
    19e4:	48          	.byte	0x48
    19e5:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    19e6:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
    19ea:	e7f1      	b.n	19d0 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
    19ec:	460e      	mov	r6, r1
    19ee:	e7ef      	b.n	19d0 <z_arm_fault+0x3c>
	*nested_exc = false;
    19f0:	4625      	mov	r5, r4
		return NULL;
    19f2:	462e      	mov	r6, r5
    19f4:	e7ec      	b.n	19d0 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    19f6:	4b29      	ldr	r3, [pc, #164]	; (1a9c <z_arm_fault+0x108>)
    19f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19fa:	0792      	lsls	r2, r2, #30
    19fc:	d43a      	bmi.n	1a74 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    19fe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1a00:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1a04:	d008      	beq.n	1a18 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
    1a06:	3328      	adds	r3, #40	; 0x28
    1a08:	781b      	ldrb	r3, [r3, #0]
    1a0a:	b1eb      	cbz	r3, 1a48 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1a0c:	2001      	movs	r0, #1
    1a0e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1a12:	f7ff ff51 	bl	18b8 <mem_manage_fault.isra.0>
    1a16:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1a18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1a1c:	b993      	cbnz	r3, 1a44 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1a1e:	2220      	movs	r2, #32
    1a20:	4631      	mov	r1, r6
    1a22:	a802      	add	r0, sp, #8
    1a24:	f002 ffef 	bl	4a06 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a2a:	b36d      	cbz	r5, 1a88 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1a30:	b922      	cbnz	r2, 1a3c <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1a32:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1a36:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a3a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1a3c:	4620      	mov	r0, r4
    1a3e:	a902      	add	r1, sp, #8
    1a40:	f002 ff77 	bl	4932 <z_arm_fatal_error>
}
    1a44:	b00b      	add	sp, #44	; 0x2c
    1a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    1a48:	4b15      	ldr	r3, [pc, #84]	; (1aa0 <z_arm_fault+0x10c>)
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	b12b      	cbz	r3, 1a5a <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    1a4e:	2001      	movs	r0, #1
    1a50:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1a54:	f7ff ff4c 	bl	18f0 <bus_fault.isra.0>
    1a58:	e7dd      	b.n	1a16 <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
    1a5a:	4b12      	ldr	r3, [pc, #72]	; (1aa4 <z_arm_fault+0x110>)
    1a5c:	881f      	ldrh	r7, [r3, #0]
    1a5e:	b2bf      	uxth	r7, r7
    1a60:	b117      	cbz	r7, 1a68 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
    1a62:	f7ff ff63 	bl	192c <usage_fault.isra.0>
    1a66:	e7d6      	b.n	1a16 <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
    1a68:	4b0f      	ldr	r3, [pc, #60]	; (1aa8 <z_arm_fault+0x114>)
    1a6a:	695c      	ldr	r4, [r3, #20]
    1a6c:	2c00      	cmp	r4, #0
    1a6e:	d0d3      	beq.n	1a18 <z_arm_fault+0x84>
		secure_fault(esf);
    1a70:	f7ff ff72 	bl	1958 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1a74:	2400      	movs	r4, #0
    1a76:	e7cf      	b.n	1a18 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    1a78:	2000      	movs	r0, #0
    1a7a:	f10d 0107 	add.w	r1, sp, #7
    1a7e:	e7c8      	b.n	1a12 <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    1a80:	2000      	movs	r0, #0
    1a82:	f10d 0107 	add.w	r1, sp, #7
    1a86:	e7e5      	b.n	1a54 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a88:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1a8c:	f023 0301 	bic.w	r3, r3, #1
    1a90:	e7d3      	b.n	1a3a <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1a92:	2c00      	cmp	r4, #0
    1a94:	d1aa      	bne.n	19ec <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
    1a96:	4606      	mov	r6, r0
			*nested_exc = true;
    1a98:	2501      	movs	r5, #1
    1a9a:	e799      	b.n	19d0 <z_arm_fault+0x3c>
    1a9c:	e000ed00 	.word	0xe000ed00
    1aa0:	e000ed29 	.word	0xe000ed29
    1aa4:	e000ed2a 	.word	0xe000ed2a
    1aa8:	e000edd0 	.word	0xe000edd0

00001aac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1aac:	4b04      	ldr	r3, [pc, #16]	; (1ac0 <z_arm_fault_init+0x14>)
    1aae:	695a      	ldr	r2, [r3, #20]
    1ab0:	f042 0210 	orr.w	r2, r2, #16
    1ab4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1ab6:	695a      	ldr	r2, [r3, #20]
    1ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1abc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1abe:	4770      	bx	lr
    1ac0:	e000ed00 	.word	0xe000ed00

00001ac4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1ac4:	4b04      	ldr	r3, [pc, #16]	; (1ad8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1ac6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1ac8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    1aca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1acc:	d003      	beq.n	1ad6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1ace:	4903      	ldr	r1, [pc, #12]	; (1adc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ad4:	600a      	str	r2, [r1, #0]

00001ad6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1ad6:	4770      	bx	lr
	ldr r3, =_kernel
    1ad8:	200007f0 	.word	0x200007f0
	ldr r1, =_SCS_ICSR
    1adc:	e000ed04 	.word	0xe000ed04

00001ae0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1ae0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1ae4:	4905      	ldr	r1, [pc, #20]	; (1afc <sys_arch_reboot+0x1c>)
    1ae6:	4b06      	ldr	r3, [pc, #24]	; (1b00 <sys_arch_reboot+0x20>)
    1ae8:	68ca      	ldr	r2, [r1, #12]
    1aea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1aee:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1af0:	60cb      	str	r3, [r1, #12]
    1af2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1af6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1af8:	e7fd      	b.n	1af6 <sys_arch_reboot+0x16>
    1afa:	bf00      	nop
    1afc:	e000ed00 	.word	0xe000ed00
    1b00:	05fa0004 	.word	0x05fa0004

00001b04 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1b04:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b06:	2120      	movs	r1, #32
    1b08:	4803      	ldr	r0, [pc, #12]	; (1b18 <z_arm_interrupt_init+0x14>)
    1b0a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1b0c:	3301      	adds	r3, #1
    1b0e:	2b41      	cmp	r3, #65	; 0x41
    1b10:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1b14:	d1f9      	bne.n	1b0a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1b16:	4770      	bx	lr
    1b18:	e000e100 	.word	0xe000e100

00001b1c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1b1c:	b510      	push	{r4, lr}
    1b1e:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    1b20:	f001 f95c 	bl	2ddc <z_thread_single_abort>

	if (_current == thread) {
    1b24:	4b11      	ldr	r3, [pc, #68]	; (1b6c <z_impl_k_thread_abort+0x50>)
    1b26:	689b      	ldr	r3, [r3, #8]
    1b28:	42a3      	cmp	r3, r4
    1b2a:	d107      	bne.n	1b3c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1b2c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1b30:	b183      	cbz	r3, 1b54 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1b32:	4a0f      	ldr	r2, [pc, #60]	; (1b70 <z_impl_k_thread_abort+0x54>)
    1b34:	6853      	ldr	r3, [r2, #4]
    1b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1b3a:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
    1b3c:	f04f 0320 	mov.w	r3, #32
    1b40:	f3ef 8011 	mrs	r0, BASEPRI
    1b44:	f383 8811 	msr	BASEPRI, r3
    1b48:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    1b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    1b50:	f003 b868 	b.w	4c24 <z_reschedule_irqlock>
    1b54:	f04f 0320 	mov.w	r3, #32
    1b58:	f3ef 8011 	mrs	r0, BASEPRI
    1b5c:	f383 8811 	msr	BASEPRI, r3
    1b60:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    1b64:	f7ff fd4a 	bl	15fc <arch_swap>
	return ret;
    1b68:	e7e8      	b.n	1b3c <z_impl_k_thread_abort+0x20>
    1b6a:	bf00      	nop
    1b6c:	200007f0 	.word	0x200007f0
    1b70:	e000ed00 	.word	0xe000ed00

00001b74 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1b74:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1b76:	4b0e      	ldr	r3, [pc, #56]	; (1bb0 <z_arm_configure_static_mpu_regions+0x3c>)
{
    1b78:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    1b7a:	9302      	str	r3, [sp, #8]
    1b7c:	4b0d      	ldr	r3, [pc, #52]	; (1bb4 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1b7e:	4c0e      	ldr	r4, [pc, #56]	; (1bb8 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1b80:	9303      	str	r3, [sp, #12]
    1b82:	4b0e      	ldr	r3, [pc, #56]	; (1bbc <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1b84:	4a0e      	ldr	r2, [pc, #56]	; (1bc0 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    1b86:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    1b88:	ab02      	add	r3, sp, #8
    1b8a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1b8c:	a801      	add	r0, sp, #4
    1b8e:	4623      	mov	r3, r4
    1b90:	2101      	movs	r1, #1
    1b92:	f000 f907 	bl	1da4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    1b96:	2300      	movs	r3, #0
    1b98:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1b9a:	4b0a      	ldr	r3, [pc, #40]	; (1bc4 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1b9c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1b9e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1ba0:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1ba2:	9305      	str	r3, [sp, #20]
    1ba4:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1ba6:	f000 f907 	bl	1db8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1baa:	b008      	add	sp, #32
    1bac:	bd10      	pop	{r4, pc}
    1bae:	bf00      	nop
    1bb0:	20000000 	.word	0x20000000
    1bb4:	00000000 	.word	0x00000000
    1bb8:	20010000 	.word	0x20010000
    1bbc:	00010006 	.word	0x00010006
    1bc0:	20000000 	.word	0x20000000
    1bc4:	20000140 	.word	0x20000140

00001bc8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1bc8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1bca:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1bcc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1bce:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1bd2:	f004 031f 	and.w	r3, r4, #31
    1bd6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1bd8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1bda:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1bdc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1be0:	4904      	ldr	r1, [pc, #16]	; (1bf4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1be2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1be6:	f043 0301 	orr.w	r3, r3, #1
    1bea:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    1bec:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    1bee:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1bf0:	bd10      	pop	{r4, pc}
    1bf2:	bf00      	nop
    1bf4:	e000ed90 	.word	0xe000ed90

00001bf8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bfc:	4607      	mov	r7, r0
    1bfe:	4688      	mov	r8, r1
    1c00:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1c02:	2600      	movs	r6, #0
	MPU->RNR = index;
    1c04:	4d4a      	ldr	r5, [pc, #296]	; (1d30 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1c06:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1c08:	4546      	cmp	r6, r8
    1c0a:	da0b      	bge.n	1c24 <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
    1c0c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    1c10:	f8d3 9004 	ldr.w	r9, [r3, #4]
    1c14:	f1b9 0f00 	cmp.w	r9, #0
    1c18:	d03a      	beq.n	1c90 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
    1c1a:	f1b9 0f1f 	cmp.w	r9, #31
    1c1e:	d805      	bhi.n	1c2c <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    1c20:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1c24:	4620      	mov	r0, r4
    1c26:	b005      	add	sp, #20
    1c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1c2c:	f019 0f1f 	tst.w	r9, #31
    1c30:	d1f6      	bne.n	1c20 <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
    1c32:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    1c36:	f01a 0f1f 	tst.w	sl, #31
    1c3a:	d1f1      	bne.n	1c20 <mpu_configure_regions_and_partition.constprop.0+0x28>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1c3c:	4650      	mov	r0, sl
    1c3e:	f002 fea5 	bl	498c <arm_cmse_mpu_region_get>
    1c42:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1c44:	eb09 000a 	add.w	r0, r9, sl
    1c48:	3801      	subs	r0, #1
    1c4a:	f002 fe9f 	bl	498c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1c4e:	4583      	cmp	fp, r0
    1c50:	d1e6      	bne.n	1c20 <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
    1c52:	f11b 0f16 	cmn.w	fp, #22
    1c56:	d0e3      	beq.n	1c20 <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
    1c58:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    1c5a:	455b      	cmp	r3, fp
    1c5c:	dbe0      	blt.n	1c20 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
    1c5e:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1c62:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    1c64:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1c68:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1c6a:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1c6e:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1c72:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1c76:	e9d1 3200 	ldrd	r3, r2, [r1]
    1c7a:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    1c7c:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1c7e:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    1c82:	d118      	bne.n	1cb6 <mpu_configure_regions_and_partition.constprop.0+0xbe>
    1c84:	45ca      	cmp	sl, r9
    1c86:	d105      	bne.n	1c94 <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
    1c88:	fa5f f08b 	uxtb.w	r0, fp
    1c8c:	f002 fe5e 	bl	494c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1c90:	3601      	adds	r6, #1
    1c92:	e7b9      	b.n	1c08 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    1c94:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1c98:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1c9a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1c9e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    1ca2:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1ca4:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    1ca6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    1ca8:	f002 fe50 	bl	494c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1cac:	f110 0f16 	cmn.w	r0, #22
    1cb0:	d0b6      	beq.n	1c20 <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
    1cb2:	1c44      	adds	r4, r0, #1
    1cb4:	e7ec      	b.n	1c90 <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
    1cb6:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1cba:	692a      	ldr	r2, [r5, #16]
    1cbc:	3b01      	subs	r3, #1
    1cbe:	f023 031f 	bic.w	r3, r3, #31
    1cc2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1cc6:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1cc8:	45ca      	cmp	sl, r9
    1cca:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1ccc:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    1cce:	d0eb      	beq.n	1ca8 <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
    1cd0:	f002 fe3c 	bl	494c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1cd4:	f110 0f16 	cmn.w	r0, #22
    1cd8:	d0a2      	beq.n	1c20 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
    1cda:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    1cde:	68ea      	ldr	r2, [r5, #12]
    1ce0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    1ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    1ce8:	f362 0304 	bfi	r3, r2, #0, #5
    1cec:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1cf0:	692b      	ldr	r3, [r5, #16]
    1cf2:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1cf6:	085b      	lsrs	r3, r3, #1
    1cf8:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    1cfc:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1d00:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    1d04:	e9d3 1300 	ldrd	r1, r3, [r3]
    1d08:	440b      	add	r3, r1
    1d0a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    1d0c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1d10:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    1d12:	4453      	add	r3, sl
    1d14:	eba3 0309 	sub.w	r3, r3, r9
    1d18:	b2c0      	uxtb	r0, r0
    1d1a:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    1d1e:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    1d20:	9303      	str	r3, [sp, #12]
    1d22:	f63f af7d 	bhi.w	1c20 <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1d26:	4669      	mov	r1, sp
    1d28:	f7ff ff4e 	bl	1bc8 <region_init>
    1d2c:	e7c1      	b.n	1cb2 <mpu_configure_regions_and_partition.constprop.0+0xba>
    1d2e:	bf00      	nop
    1d30:	e000ed90 	.word	0xe000ed90

00001d34 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1d34:	2205      	movs	r2, #5
    1d36:	4b03      	ldr	r3, [pc, #12]	; (1d44 <arm_core_mpu_enable+0x10>)
    1d38:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1d3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d3e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1d42:	4770      	bx	lr
    1d44:	e000ed90 	.word	0xe000ed90

00001d48 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1d48:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1d4c:	2200      	movs	r2, #0
    1d4e:	4b01      	ldr	r3, [pc, #4]	; (1d54 <arm_core_mpu_disable+0xc>)
    1d50:	605a      	str	r2, [r3, #4]
}
    1d52:	4770      	bx	lr
    1d54:	e000ed90 	.word	0xe000ed90

00001d58 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    1d58:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1d5a:	4c0e      	ldr	r4, [pc, #56]	; (1d94 <arm_mpu_init+0x3c>)
    1d5c:	6825      	ldr	r5, [r4, #0]
    1d5e:	2d10      	cmp	r5, #16
    1d60:	d814      	bhi.n	1d8c <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1d62:	f7ff fff1 	bl	1d48 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d66:	2000      	movs	r0, #0
	MPU->MAIR0 =
    1d68:	4b0b      	ldr	r3, [pc, #44]	; (1d98 <arm_mpu_init+0x40>)
    1d6a:	4a0c      	ldr	r2, [pc, #48]	; (1d9c <arm_mpu_init+0x44>)
    1d6c:	631a      	str	r2, [r3, #48]	; 0x30
    1d6e:	4285      	cmp	r5, r0
    1d70:	d105      	bne.n	1d7e <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1d72:	4b0b      	ldr	r3, [pc, #44]	; (1da0 <arm_mpu_init+0x48>)
    1d74:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1d76:	f7ff ffdd 	bl	1d34 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1d7a:	2000      	movs	r0, #0
}
    1d7c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1d7e:	6861      	ldr	r1, [r4, #4]
    1d80:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1d84:	f7ff ff20 	bl	1bc8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d88:	3001      	adds	r0, #1
    1d8a:	e7f0      	b.n	1d6e <arm_mpu_init+0x16>
		return -1;
    1d8c:	f04f 30ff 	mov.w	r0, #4294967295
    1d90:	e7f4      	b.n	1d7c <arm_mpu_init+0x24>
    1d92:	bf00      	nop
    1d94:	00005228 	.word	0x00005228
    1d98:	e000ed90 	.word	0xe000ed90
    1d9c:	0044ffaa 	.word	0x0044ffaa
    1da0:	2000084c 	.word	0x2000084c

00001da4 <arm_core_mpu_configure_static_mpu_regions>:
{
    1da4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1da6:	4c03      	ldr	r4, [pc, #12]	; (1db4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1da8:	7822      	ldrb	r2, [r4, #0]
    1daa:	f7ff ff25 	bl	1bf8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1dae:	7020      	strb	r0, [r4, #0]
}
    1db0:	bd10      	pop	{r4, pc}
    1db2:	bf00      	nop
    1db4:	2000084c 	.word	0x2000084c

00001db8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dbc:	4d26      	ldr	r5, [pc, #152]	; (1e58 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    1dbe:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1dc0:	4606      	mov	r6, r0
    1dc2:	f04f 0800 	mov.w	r8, #0
    1dc6:	46ab      	mov	fp, r5
	MPU->RNR = index;
    1dc8:	4f24      	ldr	r7, [pc, #144]	; (1e5c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1dca:	45d0      	cmp	r8, sl
    1dcc:	da1b      	bge.n	1e06 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1dce:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1dd2:	f1b9 0f00 	cmp.w	r9, #0
    1dd6:	d039      	beq.n	1e4c <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1dd8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1dda:	4608      	mov	r0, r1
    1ddc:	9101      	str	r1, [sp, #4]
    1dde:	f002 fdd5 	bl	498c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1de2:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1de4:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1de6:	eb09 0001 	add.w	r0, r9, r1
    1dea:	3801      	subs	r0, #1
    1dec:	f002 fdce 	bl	498c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1df0:	4284      	cmp	r4, r0
    1df2:	f04f 0214 	mov.w	r2, #20
    1df6:	4b1a      	ldr	r3, [pc, #104]	; (1e60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    1df8:	d008      	beq.n	1e0c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1dfa:	f06f 0315 	mvn.w	r3, #21
    1dfe:	fb02 f808 	mul.w	r8, r2, r8
    1e02:	f84b 3008 	str.w	r3, [fp, r8]
}
    1e06:	b003      	add	sp, #12
    1e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1e0c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1e10:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1e12:	d0f8      	beq.n	1e06 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1e14:	7819      	ldrb	r1, [r3, #0]
    1e16:	42a1      	cmp	r1, r4
    1e18:	ddf5      	ble.n	1e06 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    1e1a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    1e1e:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    1e20:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    1e22:	68fc      	ldr	r4, [r7, #12]
    1e24:	f100 0108 	add.w	r1, r0, #8
    1e28:	7b00      	ldrb	r0, [r0, #12]
    1e2a:	f364 0004 	bfi	r0, r4, #0, #5
    1e2e:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1e30:	6938      	ldr	r0, [r7, #16]
    1e32:	790c      	ldrb	r4, [r1, #4]
    1e34:	0840      	lsrs	r0, r0, #1
    1e36:	f360 1447 	bfi	r4, r0, #5, #3
    1e3a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1e3c:	68f9      	ldr	r1, [r7, #12]
    1e3e:	f021 011f 	bic.w	r1, r1, #31
    1e42:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1e44:	6939      	ldr	r1, [r7, #16]
    1e46:	f021 011f 	bic.w	r1, r1, #31
    1e4a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1e4c:	f108 0801 	add.w	r8, r8, #1
    1e50:	3514      	adds	r5, #20
    1e52:	360c      	adds	r6, #12
    1e54:	e7b9      	b.n	1dca <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1e56:	bf00      	nop
    1e58:	200007d4 	.word	0x200007d4
    1e5c:	e000ed90 	.word	0xe000ed90
    1e60:	2000084c 	.word	0x2000084c

00001e64 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1e64:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1e66:	4b0c      	ldr	r3, [pc, #48]	; (1e98 <tz_nonsecure_state_setup+0x34>)
    1e68:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1e6a:	6803      	ldr	r3, [r0, #0]
    1e6c:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1e70:	6843      	ldr	r3, [r0, #4]
    1e72:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1e76:	7b02      	ldrb	r2, [r0, #12]
    1e78:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1e7c:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1e80:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1e84:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1e86:	bf48      	it	mi
    1e88:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1e8c:	b109      	cbz	r1, 1e92 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1e8e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1e92:	f383 8894 	msr	CONTROL_NS, r3
}
    1e96:	4770      	bx	lr
    1e98:	e002ed00 	.word	0xe002ed00

00001e9c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1e9c:	4a08      	ldr	r2, [pc, #32]	; (1ec0 <tz_nbanked_exception_target_state_set+0x24>)
    1e9e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1ea0:	b148      	cbz	r0, 1eb6 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1ea6:	041b      	lsls	r3, r3, #16
    1ea8:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1eaa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1eb2:	60d3      	str	r3, [r2, #12]
}
    1eb4:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1eb6:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1eb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1ebc:	e7f5      	b.n	1eaa <tz_nbanked_exception_target_state_set+0xe>
    1ebe:	bf00      	nop
    1ec0:	e000ed00 	.word	0xe000ed00

00001ec4 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1ec4:	4a08      	ldr	r2, [pc, #32]	; (1ee8 <tz_nonsecure_exception_prio_config+0x24>)
    1ec6:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1ec8:	b140      	cbz	r0, 1edc <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1eca:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    1ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1ed8:	60d3      	str	r3, [r2, #12]
}
    1eda:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    1edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ee0:	041b      	lsls	r3, r3, #16
    1ee2:	0c1b      	lsrs	r3, r3, #16
    1ee4:	e7f4      	b.n	1ed0 <tz_nonsecure_exception_prio_config+0xc>
    1ee6:	bf00      	nop
    1ee8:	e000ed00 	.word	0xe000ed00

00001eec <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1eec:	4a08      	ldr	r2, [pc, #32]	; (1f10 <tz_nonsecure_system_reset_req_block+0x24>)
    1eee:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    1ef0:	b140      	cbz	r0, 1f04 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1ef2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    1ef4:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    1f00:	60d3      	str	r3, [r2, #12]
}
    1f02:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    1f04:	f023 0308 	bic.w	r3, r3, #8
    1f08:	041b      	lsls	r3, r3, #16
    1f0a:	0c1b      	lsrs	r3, r3, #16
    1f0c:	e7f4      	b.n	1ef8 <tz_nonsecure_system_reset_req_block+0xc>
    1f0e:	bf00      	nop
    1f10:	e000ed00 	.word	0xe000ed00

00001f14 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    1f14:	4a03      	ldr	r2, [pc, #12]	; (1f24 <tz_nonsecure_fpu_access_enable+0x10>)
    1f16:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    1f1a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    1f1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    1f22:	4770      	bx	lr
    1f24:	e000ed00 	.word	0xe000ed00

00001f28 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    1f28:	4b08      	ldr	r3, [pc, #32]	; (1f4c <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    1f2a:	681a      	ldr	r2, [r3, #0]
    1f2c:	b118      	cbz	r0, 1f36 <tz_sau_configure+0xe>
    1f2e:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1f32:	601a      	str	r2, [r3, #0]
		}
	}
}
    1f34:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    1f36:	f022 0201 	bic.w	r2, r2, #1
    1f3a:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1f3c:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    1f3e:	b111      	cbz	r1, 1f46 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1f40:	f042 0202 	orr.w	r2, r2, #2
    1f44:	e7f5      	b.n	1f32 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1f46:	f022 0202 	bic.w	r2, r2, #2
    1f4a:	e7f2      	b.n	1f32 <tz_sau_configure+0xa>
    1f4c:	e000edd0 	.word	0xe000edd0

00001f50 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1f50:	4b01      	ldr	r3, [pc, #4]	; (1f58 <__stdout_hook_install+0x8>)
    1f52:	6018      	str	r0, [r3, #0]
}
    1f54:	4770      	bx	lr
    1f56:	bf00      	nop
    1f58:	20000024 	.word	0x20000024

00001f5c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1f5e:	794b      	ldrb	r3, [r1, #5]
    1f60:	2b01      	cmp	r3, #1
    1f62:	d029      	beq.n	1fb8 <uarte_nrfx_configure+0x5c>
    1f64:	2b03      	cmp	r3, #3
    1f66:	d124      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1f68:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1f6a:	798b      	ldrb	r3, [r1, #6]
    1f6c:	2b03      	cmp	r3, #3
    1f6e:	d120      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1f70:	79cc      	ldrb	r4, [r1, #7]
    1f72:	b124      	cbz	r4, 1f7e <uarte_nrfx_configure+0x22>
    1f74:	2c01      	cmp	r4, #1
    1f76:	d11c      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1f78:	6843      	ldr	r3, [r0, #4]
    1f7a:	791b      	ldrb	r3, [r3, #4]
    1f7c:	b1cb      	cbz	r3, 1fb2 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1f7e:	790a      	ldrb	r2, [r1, #4]
    1f80:	b112      	cbz	r2, 1f88 <uarte_nrfx_configure+0x2c>
    1f82:	2a02      	cmp	r2, #2
    1f84:	d115      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1f86:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1f88:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1f8a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1f8c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1f90:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1f92:	d065      	beq.n	2060 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60>
    1f94:	d82d      	bhi.n	1ff2 <uarte_nrfx_configure+0x96>
    1f96:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1f9a:	d064      	beq.n	2066 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x66>
    1f9c:	d816      	bhi.n	1fcc <uarte_nrfx_configure+0x70>
    1f9e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1fa2:	d062      	beq.n	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
    1fa4:	d80a      	bhi.n	1fbc <uarte_nrfx_configure+0x60>
    1fa6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1faa:	d061      	beq.n	2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>
    1fac:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1fb0:	d061      	beq.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>
    1fb2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1fb6:	e052      	b.n	205e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e>
	switch (cfg->stop_bits) {
    1fb8:	2600      	movs	r6, #0
    1fba:	e7d6      	b.n	1f6a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1fbc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1fc0:	d05c      	beq.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1fc2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1fc6:	d1f4      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1fc8:	4b37      	ldr	r3, [pc, #220]	; (20a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa8>)
    1fca:	e03c      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
	switch (baudrate) {
    1fcc:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1fd0:	d057      	beq.n	2082 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x82>
    1fd2:	d807      	bhi.n	1fe4 <uarte_nrfx_configure+0x88>
    1fd4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1fd8:	d055      	beq.n	2086 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x86>
    1fda:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1fde:	d1e8      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1fe0:	4b32      	ldr	r3, [pc, #200]	; (20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>)
    1fe2:	e030      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
	switch (baudrate) {
    1fe4:	f647 2712 	movw	r7, #31250	; 0x7a12
    1fe8:	42bb      	cmp	r3, r7
    1fea:	d1e2      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1fec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1ff0:	e029      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
	switch (baudrate) {
    1ff2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1ff6:	d048      	beq.n	208a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8a>
    1ff8:	d813      	bhi.n	2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
    1ffa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1ffe:	d047      	beq.n	2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>
    2000:	d809      	bhi.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
    2002:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2006:	42bb      	cmp	r3, r7
    2008:	d044      	beq.n	2094 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x94>
    200a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    200e:	d1d0      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2010:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2014:	e017      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
	switch (baudrate) {
    2016:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    201a:	d1ca      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    201c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2020:	e011      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
	switch (baudrate) {
    2022:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2026:	d038      	beq.n	209a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9a>
    2028:	d808      	bhi.n	203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>
    202a:	4f21      	ldr	r7, [pc, #132]	; (20b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb0>)
    202c:	42bb      	cmp	r3, r7
    202e:	d037      	beq.n	20a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa0>
    2030:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2034:	d1bd      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2036:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    203a:	e004      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
	switch (baudrate) {
    203c:	4f1d      	ldr	r7, [pc, #116]	; (20b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb4>)
    203e:	42bb      	cmp	r3, r7
    2040:	d1b7      	bne.n	1fb2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2042:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2046:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    204a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    204c:	4334      	orrs	r4, r6
    204e:	4322      	orrs	r2, r4
    2050:	3304      	adds	r3, #4
    2052:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2054:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2058:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    205c:	2000      	movs	r0, #0
}
    205e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2060:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2064:	e7ef      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2066:	4b14      	ldr	r3, [pc, #80]	; (20b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb8>)
    2068:	e7ed      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    206a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    206e:	e7ea      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = 0x00014000;
    2070:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2074:	e7e7      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
	switch (baudrate) {
    2076:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    207a:	e7e4      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    207c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2080:	e7e1      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2082:	4b0e      	ldr	r3, [pc, #56]	; (20bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbc>)
    2084:	e7df      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2086:	4b0e      	ldr	r3, [pc, #56]	; (20c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc0>)
    2088:	e7dd      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    208a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    208e:	e7da      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2090:	4b0c      	ldr	r3, [pc, #48]	; (20c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc4>)
    2092:	e7d8      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2094:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2098:	e7d5      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    209a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    209e:	e7d2      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    20a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    20a4:	e7cf      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
    20a6:	bf00      	nop
    20a8:	0013b000 	.word	0x0013b000
    20ac:	004ea000 	.word	0x004ea000
    20b0:	0003d090 	.word	0x0003d090
    20b4:	000f4240 	.word	0x000f4240
    20b8:	00275000 	.word	0x00275000
    20bc:	0075c000 	.word	0x0075c000
    20c0:	003af000 	.word	0x003af000
    20c4:	013a9000 	.word	0x013a9000

000020c8 <uarte_instance_init.isra.0>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
    20c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
    20ca:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
    20cc:	460d      	mov	r5, r1

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    20ce:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    20d0:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    20d4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    20d6:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    20d8:	681c      	ldr	r4, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    20da:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
    20de:	4b25      	ldr	r3, [pc, #148]	; (2174 <uarte_instance_init.isra.0+0xac>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    20e0:	4091      	lsls	r1, r2
    20e2:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
    20e6:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
    20e8:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    20ea:	2103      	movs	r1, #3
    20ec:	3280      	adds	r2, #128	; 0x80
    20ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    20f2:	686a      	ldr	r2, [r5, #4]
    20f4:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    20f6:	bf1e      	ittt	ne
    20f8:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    20fc:	3180      	addne	r1, #128	; 0x80
    20fe:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    2102:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
    2104:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    2108:	1c4f      	adds	r7, r1, #1
    210a:	bf18      	it	ne
    210c:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
    210e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    2112:	bf1e      	ittt	ne
    2114:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2118:	3280      	addne	r2, #128	; 0x80
    211a:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    211e:	68ef      	ldr	r7, [r5, #12]
    2120:	1c7a      	adds	r2, r7, #1
    2122:	d00c      	beq.n	213e <uarte_instance_init.isra.0+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2124:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    2128:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    212c:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    2130:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2134:	f04f 0c03 	mov.w	ip, #3
    2138:	3280      	adds	r2, #128	; 0x80
    213a:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    213e:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    2142:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2146:	68c1      	ldr	r1, [r0, #12]
    2148:	3104      	adds	r1, #4
    214a:	f7ff ff07 	bl	1f5c <uarte_nrfx_configure>
	if (err) {
    214e:	b980      	cbnz	r0, 2172 <uarte_instance_init.isra.0+0xaa>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2150:	2308      	movs	r3, #8
    2152:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    2156:	686b      	ldr	r3, [r5, #4]
    2158:	3301      	adds	r3, #1
    215a:	d00a      	beq.n	2172 <uarte_instance_init.isra.0+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    215c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    2160:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    2164:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2166:	3610      	adds	r6, #16
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2168:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    216c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2170:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    2172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2174:	50842500 	.word	0x50842500

00002178 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2178:	b530      	push	{r4, r5, lr}
    217a:	b085      	sub	sp, #20
    217c:	4605      	mov	r5, r0
    217e:	466c      	mov	r4, sp
    2180:	4b04      	ldr	r3, [pc, #16]	; (2194 <uarte_0_init+0x1c>)
    2182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2188:	4621      	mov	r1, r4
    218a:	4628      	mov	r0, r5
    218c:	f7ff ff9c 	bl	20c8 <uarte_instance_init.isra.0>
    2190:	b005      	add	sp, #20
    2192:	bd30      	pop	{r4, r5, pc}
    2194:	0000509c 	.word	0x0000509c

00002198 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    2198:	b530      	push	{r4, r5, lr}
    219a:	b085      	sub	sp, #20
    219c:	4605      	mov	r5, r0
    219e:	466c      	mov	r4, sp
    21a0:	4b04      	ldr	r3, [pc, #16]	; (21b4 <uarte_1_init+0x1c>)
    21a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    21a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    21a8:	4621      	mov	r1, r4
    21aa:	4628      	mov	r0, r5
    21ac:	f7ff ff8c 	bl	20c8 <uarte_instance_init.isra.0>
    21b0:	b005      	add	sp, #20
    21b2:	bd30      	pop	{r4, r5, pc}
    21b4:	000050ac 	.word	0x000050ac

000021b8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    21b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    21bc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    21be:	4c21      	ldr	r4, [pc, #132]	; (2244 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    21c0:	4e21      	ldr	r6, [pc, #132]	; (2248 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    21c2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    21c6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2250 <check_ext_api_requests+0x98>
{
    21ca:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    21cc:	45a8      	cmp	r8, r5
    21ce:	d803      	bhi.n	21d8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    21d0:	2000      	movs	r0, #0
    21d2:	b005      	add	sp, #20
    21d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    21d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    21da:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    21de:	681f      	ldr	r7, [r3, #0]
    21e0:	ab01      	add	r3, sp, #4
    21e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    21e6:	220c      	movs	r2, #12
    21e8:	4619      	mov	r1, r3
    21ea:	4638      	mov	r0, r7
    21ec:	f002 fbe4 	bl	49b8 <memcmp>
    21f0:	b990      	cbnz	r0, 2218 <check_ext_api_requests+0x60>
    21f2:	b18f      	cbz	r7, 2218 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    21f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    21f6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    21f8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    21fa:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    21fc:	4291      	cmp	r1, r2
    21fe:	d10b      	bne.n	2218 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    2200:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    2202:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    2204:	4291      	cmp	r1, r2
    2206:	d807      	bhi.n	2218 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    2208:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    220a:	4291      	cmp	r1, r2
    220c:	d904      	bls.n	2218 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    220e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2210:	695b      	ldr	r3, [r3, #20]
    2212:	ea32 0303 	bics.w	r3, r2, r3
    2216:	d00a      	beq.n	222e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    2218:	6a27      	ldr	r7, [r4, #32]
    221a:	b167      	cbz	r7, 2236 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    221c:	480b      	ldr	r0, [pc, #44]	; (224c <check_ext_api_requests+0x94>)
    221e:	f002 f8c7 	bl	43b0 <printk>
			k_panic();
    2222:	4040      	eors	r0, r0
    2224:	f380 8811 	msr	BASEPRI, r0
    2228:	f04f 0004 	mov.w	r0, #4
    222c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    222e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2230:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    2232:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2234:	e7ca      	b.n	21cc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    2236:	4648      	mov	r0, r9
    2238:	f002 f8ba 	bl	43b0 <printk>
			*ext_api_req->ext_api = NULL;
    223c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    223e:	601f      	str	r7, [r3, #0]
    2240:	e7f5      	b.n	222e <check_ext_api_requests+0x76>
    2242:	bf00      	nop
    2244:	0000023c 	.word	0x0000023c
    2248:	000050bc 	.word	0x000050bc
    224c:	000056d4 	.word	0x000056d4
    2250:	000056fd 	.word	0x000056fd

00002254 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    2254:	4b05      	ldr	r3, [pc, #20]	; (226c <nrf91_errata_14+0x18>)
    2256:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2258:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    225a:	681b      	ldr	r3, [r3, #0]
    225c:	2b09      	cmp	r3, #9
    225e:	d103      	bne.n	2268 <nrf91_errata_14+0x14>
            {
                switch(var2)
    2260:	1e43      	subs	r3, r0, #1
    2262:	4258      	negs	r0, r3
    2264:	4158      	adcs	r0, r3
    2266:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2268:	2000      	movs	r0, #0
    #endif
}
    226a:	4770      	bx	lr
    226c:	00ff0134 	.word	0x00ff0134

00002270 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2270:	4a4f      	ldr	r2, [pc, #316]	; (23b0 <SystemInit+0x140>)
{
    2272:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2274:	6813      	ldr	r3, [r2, #0]
    2276:	f043 0302 	orr.w	r3, r3, #2
    227a:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    227c:	4b4d      	ldr	r3, [pc, #308]	; (23b4 <SystemInit+0x144>)
            if (var1 == 0x09)
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    2282:	bf01      	itttt	eq
    2284:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    2288:	2200      	moveq	r2, #0
    228a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    228e:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    2292:	f7ff ffdf 	bl	2254 <nrf91_errata_14>
    2296:	b130      	cbz	r0, 22a6 <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    2298:	2301      	movs	r3, #1
    229a:	4a47      	ldr	r2, [pc, #284]	; (23b8 <SystemInit+0x148>)
    229c:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    229e:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    22a2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    22a6:	4b43      	ldr	r3, [pc, #268]	; (23b4 <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	2b09      	cmp	r3, #9
    22ac:	d107      	bne.n	22be <SystemInit+0x4e>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    22ae:	4b43      	ldr	r3, [pc, #268]	; (23bc <SystemInit+0x14c>)
            {
                switch(var2)
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    22b4:	bf1e      	ittt	ne
    22b6:	2201      	movne	r2, #1
    22b8:	4b41      	ldrne	r3, [pc, #260]	; (23c0 <SystemInit+0x150>)
    22ba:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    22be:	f7ff ffc9 	bl	2254 <nrf91_errata_14>
    22c2:	b110      	cbz	r0, 22ca <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    22c4:	220e      	movs	r2, #14
    22c6:	4b3f      	ldr	r3, [pc, #252]	; (23c4 <SystemInit+0x154>)
    22c8:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    22ca:	4b3a      	ldr	r3, [pc, #232]	; (23b4 <SystemInit+0x144>)
            if (var1 == 0x09)
    22cc:	681b      	ldr	r3, [r3, #0]
    22ce:	2b09      	cmp	r3, #9
    22d0:	d104      	bne.n	22dc <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    22d2:	2200      	movs	r2, #0
    22d4:	4b3c      	ldr	r3, [pc, #240]	; (23c8 <SystemInit+0x158>)
    22d6:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    22d8:	2201      	movs	r2, #1
    22da:	605a      	str	r2, [r3, #4]
{
    22dc:	2200      	movs	r2, #0
    22de:	00d3      	lsls	r3, r2, #3
    22e0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    22e4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    22e8:	3101      	adds	r1, #1
    22ea:	d008      	beq.n	22fe <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    22ec:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    22f0:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    22f2:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    22f6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    22fa:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    22fc:	d1ef      	bne.n	22de <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    22fe:	4b33      	ldr	r3, [pc, #204]	; (23cc <SystemInit+0x15c>)
    2300:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    2302:	07d1      	lsls	r1, r2, #31
    2304:	d53b      	bpl.n	237e <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2306:	4b32      	ldr	r3, [pc, #200]	; (23d0 <SystemInit+0x160>)
    2308:	4619      	mov	r1, r3
    230a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    230e:	2a01      	cmp	r2, #1
    2310:	d1fb      	bne.n	230a <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    2312:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2316:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    231a:	2b01      	cmp	r3, #1
    231c:	d1fb      	bne.n	2316 <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    231e:	4b2b      	ldr	r3, [pc, #172]	; (23cc <SystemInit+0x15c>)
    2320:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    2322:	07d2      	lsls	r2, r2, #31
    2324:	d508      	bpl.n	2338 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    2326:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2328:	4929      	ldr	r1, [pc, #164]	; (23d0 <SystemInit+0x160>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    232a:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    232e:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2330:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    2334:	2a01      	cmp	r2, #1
    2336:	d1fb      	bne.n	2330 <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    2338:	6a1a      	ldr	r2, [r3, #32]
    233a:	3201      	adds	r2, #1
    233c:	d10a      	bne.n	2354 <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    233e:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    2340:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    2344:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    2348:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    234a:	4a21      	ldr	r2, [pc, #132]	; (23d0 <SystemInit+0x160>)
    234c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2350:	2b01      	cmp	r3, #1
    2352:	d1fb      	bne.n	234c <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    2354:	2200      	movs	r2, #0
    2356:	4b1e      	ldr	r3, [pc, #120]	; (23d0 <SystemInit+0x160>)
    2358:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    235c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2360:	2a01      	cmp	r2, #1
    2362:	d1fb      	bne.n	235c <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
    2364:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2368:	491a      	ldr	r1, [pc, #104]	; (23d4 <SystemInit+0x164>)
    236a:	4b1b      	ldr	r3, [pc, #108]	; (23d8 <SystemInit+0x168>)
    236c:	68ca      	ldr	r2, [r1, #12]
    236e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2372:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2374:	60cb      	str	r3, [r1, #12]
    2376:	f3bf 8f4f 	dsb	sy
    __NOP();
    237a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    237c:	e7fd      	b.n	237a <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    237e:	6a1b      	ldr	r3, [r3, #32]
    2380:	3301      	adds	r3, #1
    2382:	d0c0      	beq.n	2306 <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
    2384:	4b13      	ldr	r3, [pc, #76]	; (23d4 <SystemInit+0x164>)
    2386:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    238a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    238e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    2392:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2396:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    239a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    239e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23a2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    23a6:	4b0d      	ldr	r3, [pc, #52]	; (23dc <SystemInit+0x16c>)
    23a8:	4a0d      	ldr	r2, [pc, #52]	; (23e0 <SystemInit+0x170>)
    23aa:	601a      	str	r2, [r3, #0]
}
    23ac:	bd08      	pop	{r3, pc}
    23ae:	bf00      	nop
    23b0:	e000edd0 	.word	0xe000edd0
    23b4:	00ff0130 	.word	0x00ff0130
    23b8:	50004a38 	.word	0x50004a38
    23bc:	00ff0134 	.word	0x00ff0134
    23c0:	50004000 	.word	0x50004000
    23c4:	5003aee4 	.word	0x5003aee4
    23c8:	5000470c 	.word	0x5000470c
    23cc:	00ff8000 	.word	0x00ff8000
    23d0:	50039000 	.word	0x50039000
    23d4:	e000ed00 	.word	0xe000ed00
    23d8:	05fa0004 	.word	0x05fa0004
    23dc:	20000050 	.word	0x20000050
    23e0:	03d09000 	.word	0x03d09000

000023e4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    23e4:	4b04      	ldr	r3, [pc, #16]	; (23f8 <nrfx_clock_init+0x14>)
    23e6:	791a      	ldrb	r2, [r3, #4]
    23e8:	b922      	cbnz	r2, 23f4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    23ea:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    23ec:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    23ee:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    23f0:	4802      	ldr	r0, [pc, #8]	; (23fc <nrfx_clock_init+0x18>)
    23f2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    23f4:	4802      	ldr	r0, [pc, #8]	; (2400 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    23f6:	4770      	bx	lr
    23f8:	200007e8 	.word	0x200007e8
    23fc:	0bad0000 	.word	0x0bad0000
    2400:	0bad000c 	.word	0x0bad000c

00002404 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2404:	b110      	cbz	r0, 240c <nrfx_clock_start+0x8>
    2406:	2801      	cmp	r0, #1
    2408:	d020      	beq.n	244c <nrfx_clock_start+0x48>
    240a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    240c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2410:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2414:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2418:	03c9      	lsls	r1, r1, #15
    241a:	d511      	bpl.n	2440 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    241c:	f003 0303 	and.w	r3, r3, #3
    2420:	2b02      	cmp	r3, #2
    2422:	d10d      	bne.n	2440 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2424:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2428:	2200      	movs	r2, #0
    242a:	4b0d      	ldr	r3, [pc, #52]	; (2460 <nrfx_clock_start+0x5c>)
    242c:	601a      	str	r2, [r3, #0]
    242e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2430:	2202      	movs	r2, #2
    2432:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2436:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    243a:	2201      	movs	r2, #1
    243c:	609a      	str	r2, [r3, #8]
}
    243e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    2440:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2444:	2201      	movs	r2, #1
    2446:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    244a:	e7ed      	b.n	2428 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    244c:	2200      	movs	r2, #0
    244e:	4b05      	ldr	r3, [pc, #20]	; (2464 <nrfx_clock_start+0x60>)
    2450:	601a      	str	r2, [r3, #0]
    2452:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2454:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2458:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    245c:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    245e:	4770      	bx	lr
    2460:	50005104 	.word	0x50005104
    2464:	50005100 	.word	0x50005100

00002468 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2468:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    246a:	b110      	cbz	r0, 2472 <nrfx_clock_stop+0xa>
    246c:	2801      	cmp	r0, #1
    246e:	d018      	beq.n	24a2 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2470:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    2472:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2476:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2478:	2101      	movs	r1, #1
    247a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    247e:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
    2480:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2484:	4a15      	ldr	r2, [pc, #84]	; (24dc <nrfx_clock_stop+0x74>)
    2486:	6010      	str	r0, [r2, #0]
    2488:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    248a:	4a15      	ldr	r2, [pc, #84]	; (24e0 <nrfx_clock_stop+0x78>)
    248c:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    248e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    2492:	03db      	lsls	r3, r3, #15
    2494:	d5ec      	bpl.n	2470 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2496:	2001      	movs	r0, #1
    2498:	f002 fb77 	bl	4b8a <nrfx_busy_wait>
    249c:	3d01      	subs	r5, #1
    249e:	d1f6      	bne.n	248e <nrfx_clock_stop+0x26>
    24a0:	e7e6      	b.n	2470 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    24a2:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24a6:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    24a8:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24ac:	4b0d      	ldr	r3, [pc, #52]	; (24e4 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
    24ae:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24b2:	601a      	str	r2, [r3, #0]
    24b4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    24b6:	4b0c      	ldr	r3, [pc, #48]	; (24e8 <nrfx_clock_stop+0x80>)
    24b8:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    24ba:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    24be:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    24c2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    24c6:	03d2      	lsls	r2, r2, #15
    24c8:	d5d2      	bpl.n	2470 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    24ca:	2b00      	cmp	r3, #0
    24cc:	d0d0      	beq.n	2470 <nrfx_clock_stop+0x8>
    24ce:	2001      	movs	r0, #1
    24d0:	f002 fb5b 	bl	4b8a <nrfx_busy_wait>
    24d4:	3d01      	subs	r5, #1
    24d6:	d1f0      	bne.n	24ba <nrfx_clock_stop+0x52>
    24d8:	e7ca      	b.n	2470 <nrfx_clock_stop+0x8>
    24da:	bf00      	nop
    24dc:	50005104 	.word	0x50005104
    24e0:	5000500c 	.word	0x5000500c
    24e4:	50005100 	.word	0x50005100
    24e8:	50005004 	.word	0x50005004

000024ec <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    24ec:	4b16      	ldr	r3, [pc, #88]	; (2548 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    24ee:	b510      	push	{r4, lr}
    24f0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    24f2:	b152      	cbz	r2, 250a <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24f4:	2000      	movs	r0, #0
    24f6:	6018      	str	r0, [r3, #0]
    24f8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    24fa:	2201      	movs	r2, #1
    24fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2500:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2504:	4b11      	ldr	r3, [pc, #68]	; (254c <nrfx_power_clock_irq_handler+0x60>)
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    250a:	4b11      	ldr	r3, [pc, #68]	; (2550 <nrfx_power_clock_irq_handler+0x64>)
    250c:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    250e:	b18a      	cbz	r2, 2534 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2510:	2200      	movs	r2, #0
    2512:	601a      	str	r2, [r3, #0]
    2514:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2516:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    251a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    251e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2522:	f002 0203 	and.w	r2, r2, #3
    2526:	2a01      	cmp	r2, #1
    2528:	f04f 0102 	mov.w	r1, #2
    252c:	d103      	bne.n	2536 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    252e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2532:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2534:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2536:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    253a:	4b04      	ldr	r3, [pc, #16]	; (254c <nrfx_power_clock_irq_handler+0x60>)
    253c:	2001      	movs	r0, #1
}
    253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2542:	681b      	ldr	r3, [r3, #0]
    2544:	4718      	bx	r3
    2546:	bf00      	nop
    2548:	50005100 	.word	0x50005100
    254c:	200007e8 	.word	0x200007e8
    2550:	50005104 	.word	0x50005104

00002554 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    2554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2556:	4b10      	ldr	r3, [pc, #64]	; (2598 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    2558:	4f10      	ldr	r7, [pc, #64]	; (259c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    255a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    255e:	3001      	adds	r0, #1
    2560:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2564:	42ae      	cmp	r6, r5
    2566:	d800      	bhi.n	256a <z_sys_init_run_level+0x16>
		}
	}
}
    2568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    256a:	e9d5 3400 	ldrd	r3, r4, [r5]
    256e:	4620      	mov	r0, r4
    2570:	4798      	blx	r3
    2572:	b170      	cbz	r0, 2592 <z_sys_init_run_level+0x3e>
    2574:	b16c      	cbz	r4, 2592 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    2576:	2301      	movs	r3, #1
				(dev - __device_start));
    2578:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    257a:	4a09      	ldr	r2, [pc, #36]	; (25a0 <z_sys_init_run_level+0x4c>)
    257c:	1124      	asrs	r4, r4, #4
    257e:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    2580:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2584:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    2588:	fa03 f404 	lsl.w	r4, r3, r4
    258c:	4304      	orrs	r4, r0
    258e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2592:	3508      	adds	r5, #8
    2594:	e7e6      	b.n	2564 <z_sys_init_run_level+0x10>
    2596:	bf00      	nop
    2598:	00005274 	.word	0x00005274
    259c:	2000009c 	.word	0x2000009c
    25a0:	200000ec 	.word	0x200000ec

000025a4 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    25a4:	4b08      	ldr	r3, [pc, #32]	; (25c8 <z_device_ready+0x24>)
    25a6:	1ac0      	subs	r0, r0, r3
    25a8:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    25aa:	4b08      	ldr	r3, [pc, #32]	; (25cc <z_device_ready+0x28>)
    25ac:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    25ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    25b2:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    25b4:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    25b8:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    25bc:	4210      	tst	r0, r2
}
    25be:	bf0c      	ite	eq
    25c0:	4618      	moveq	r0, r3
    25c2:	2000      	movne	r0, #0
    25c4:	4770      	bx	lr
    25c6:	bf00      	nop
    25c8:	2000009c 	.word	0x2000009c
    25cc:	200000ec 	.word	0x200000ec

000025d0 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    25d0:	4911      	ldr	r1, [pc, #68]	; (2618 <z_impl_device_get_binding+0x48>)
{
    25d2:	b570      	push	{r4, r5, r6, lr}
    25d4:	4605      	mov	r5, r0
    25d6:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    25d8:	4c10      	ldr	r4, [pc, #64]	; (261c <z_impl_device_get_binding+0x4c>)
    25da:	428c      	cmp	r4, r1
    25dc:	d104      	bne.n	25e8 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    25de:	4c0f      	ldr	r4, [pc, #60]	; (261c <z_impl_device_get_binding+0x4c>)
    25e0:	42b4      	cmp	r4, r6
    25e2:	d10a      	bne.n	25fa <z_impl_device_get_binding+0x2a>
	return NULL;
    25e4:	2400      	movs	r4, #0
    25e6:	e014      	b.n	2612 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    25e8:	4620      	mov	r0, r4
    25ea:	f7ff ffdb 	bl	25a4 <z_device_ready>
    25ee:	b110      	cbz	r0, 25f6 <z_impl_device_get_binding+0x26>
    25f0:	6823      	ldr	r3, [r4, #0]
    25f2:	42ab      	cmp	r3, r5
    25f4:	d00d      	beq.n	2612 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    25f6:	3410      	adds	r4, #16
    25f8:	e7ef      	b.n	25da <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    25fa:	4620      	mov	r0, r4
    25fc:	f7ff ffd2 	bl	25a4 <z_device_ready>
    2600:	b908      	cbnz	r0, 2606 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    2602:	3410      	adds	r4, #16
    2604:	e7ec      	b.n	25e0 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2606:	4628      	mov	r0, r5
    2608:	6821      	ldr	r1, [r4, #0]
    260a:	f002 f9c9 	bl	49a0 <strcmp>
    260e:	2800      	cmp	r0, #0
    2610:	d1f7      	bne.n	2602 <z_impl_device_get_binding+0x32>
}
    2612:	4620      	mov	r0, r4
    2614:	bd70      	pop	{r4, r5, r6, pc}
    2616:	bf00      	nop
    2618:	200000ec 	.word	0x200000ec
    261c:	2000009c 	.word	0x2000009c

00002620 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    2620:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    2622:	4d0b      	ldr	r5, [pc, #44]	; (2650 <idle+0x30>)
    2624:	f04f 0220 	mov.w	r2, #32
    2628:	f3ef 8311 	mrs	r3, BASEPRI
    262c:	f382 8811 	msr	BASEPRI, r2
    2630:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    2634:	f002 fbb9 	bl	4daa <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2638:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
    263a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    263c:	2802      	cmp	r0, #2
    263e:	bfd8      	it	le
    2640:	4608      	movle	r0, r1
    2642:	f002 fbc2 	bl	4dca <z_set_timeout_expiry>
	_kernel.idle = ticks;
    2646:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
    2648:	f7ff f8a2 	bl	1790 <arch_cpu_idle>
}
    264c:	e7ea      	b.n	2624 <idle+0x4>
    264e:	bf00      	nop
    2650:	200007f0 	.word	0x200007f0

00002654 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2654:	4802      	ldr	r0, [pc, #8]	; (2660 <z_bss_zero+0xc>)
    2656:	4a03      	ldr	r2, [pc, #12]	; (2664 <z_bss_zero+0x10>)
    2658:	2100      	movs	r1, #0
    265a:	1a12      	subs	r2, r2, r0
    265c:	f002 b9fe 	b.w	4a5c <memset>
    2660:	20000140 	.word	0x20000140
    2664:	20000850 	.word	0x20000850

00002668 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    2668:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    266a:	4806      	ldr	r0, [pc, #24]	; (2684 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    266c:	4a06      	ldr	r2, [pc, #24]	; (2688 <z_data_copy+0x20>)
    266e:	4907      	ldr	r1, [pc, #28]	; (268c <z_data_copy+0x24>)
    2670:	1a12      	subs	r2, r2, r0
    2672:	f002 f9c8 	bl	4a06 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    2676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    267a:	4a05      	ldr	r2, [pc, #20]	; (2690 <z_data_copy+0x28>)
    267c:	4905      	ldr	r1, [pc, #20]	; (2694 <z_data_copy+0x2c>)
    267e:	4806      	ldr	r0, [pc, #24]	; (2698 <z_data_copy+0x30>)
    2680:	f002 b9c1 	b.w	4a06 <memcpy>
    2684:	20000000 	.word	0x20000000
    2688:	20000140 	.word	0x20000140
    268c:	00005790 	.word	0x00005790
    2690:	00000000 	.word	0x00000000
    2694:	00005790 	.word	0x00005790
    2698:	20000000 	.word	0x20000000

0000269c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    269c:	2201      	movs	r2, #1
{
    269e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    26a0:	4b0b      	ldr	r3, [pc, #44]	; (26d0 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    26a2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    26a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    26a6:	f7ff ff55 	bl	2554 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    26aa:	4a0a      	ldr	r2, [pc, #40]	; (26d4 <bg_thread_main+0x38>)
    26ac:	490a      	ldr	r1, [pc, #40]	; (26d8 <bg_thread_main+0x3c>)
    26ae:	480b      	ldr	r0, [pc, #44]	; (26dc <bg_thread_main+0x40>)
    26b0:	f001 fe7e 	bl	43b0 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    26b4:	2003      	movs	r0, #3
    26b6:	f7ff ff4d 	bl	2554 <z_sys_init_run_level>

	z_init_static_threads();
    26ba:	f000 fda5 	bl	3208 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    26be:	f001 fe51 	bl	4364 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    26c2:	4a07      	ldr	r2, [pc, #28]	; (26e0 <bg_thread_main+0x44>)
    26c4:	7b13      	ldrb	r3, [r2, #12]
    26c6:	f023 0301 	bic.w	r3, r3, #1
    26ca:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    26cc:	bd08      	pop	{r3, pc}
    26ce:	bf00      	nop
    26d0:	2000084d 	.word	0x2000084d
    26d4:	000053cc 	.word	0x000053cc
    26d8:	0000573b 	.word	0x0000573b
    26dc:	0000575e 	.word	0x0000575e
    26e0:	200001c0 	.word	0x200001c0

000026e4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    26e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    26e8:	4b37      	ldr	r3, [pc, #220]	; (27c8 <z_cstart+0xe4>)
    26ea:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    26ec:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    26f0:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    26f4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26f8:	2400      	movs	r4, #0
    26fa:	23e0      	movs	r3, #224	; 0xe0
    26fc:	4d33      	ldr	r5, [pc, #204]	; (27cc <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    26fe:	f04f 0b01 	mov.w	fp, #1
    2702:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2706:	77ec      	strb	r4, [r5, #31]
    2708:	762c      	strb	r4, [r5, #24]
    270a:	766c      	strb	r4, [r5, #25]
    270c:	76ac      	strb	r4, [r5, #26]
    270e:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2710:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    2712:	4e2f      	ldr	r6, [pc, #188]	; (27d0 <z_cstart+0xec>)
    2714:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2718:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    271a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    271c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 27ec <z_cstart+0x108>
    2720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    2724:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    2726:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2728:	f7ff f9c0 	bl	1aac <z_arm_fault_init>
	z_arm_cpu_idle_init();
    272c:	f7ff f82a 	bl	1784 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2730:	f04f 33ff 	mov.w	r3, #4294967295
    2734:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2736:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    2738:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    273c:	4d25      	ldr	r5, [pc, #148]	; (27d4 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    273e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2742:	ab06      	add	r3, sp, #24
    2744:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2746:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    2748:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    274c:	f7ff ff02 	bl	2554 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2750:	2001      	movs	r0, #1
    2752:	f7ff feff 	bl	2554 <z_sys_init_run_level>
	z_sched_init();
    2756:	f000 fc5f 	bl	3018 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    275a:	4b1f      	ldr	r3, [pc, #124]	; (27d8 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
    275c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    275e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2762:	491e      	ldr	r1, [pc, #120]	; (27dc <z_cstart+0xf8>)
    2764:	9305      	str	r3, [sp, #20]
    2766:	4630      	mov	r0, r6
    2768:	4653      	mov	r3, sl
    276a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    276e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2772:	9400      	str	r4, [sp, #0]
    2774:	f000 fd18 	bl	31a8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2778:	7b73      	ldrb	r3, [r6, #13]
    277a:	4680      	mov	r8, r0
    277c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    2780:	4630      	mov	r0, r6
    2782:	7373      	strb	r3, [r6, #13]
    2784:	f002 fa76 	bl	4c74 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2788:	230f      	movs	r3, #15
    278a:	4f15      	ldr	r7, [pc, #84]	; (27e0 <z_cstart+0xfc>)
    278c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2790:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2794:	4913      	ldr	r1, [pc, #76]	; (27e4 <z_cstart+0x100>)
    2796:	4b14      	ldr	r3, [pc, #80]	; (27e8 <z_cstart+0x104>)
    2798:	4638      	mov	r0, r7
    279a:	e9cd b404 	strd	fp, r4, [sp, #16]
    279e:	e9cd 4400 	strd	r4, r4, [sp]
    27a2:	f000 fd01 	bl	31a8 <z_setup_new_thread>
    27a6:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    27a8:	4652      	mov	r2, sl
    27aa:	f023 0304 	bic.w	r3, r3, #4
    27ae:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    27b0:	f105 0318 	add.w	r3, r5, #24
    27b4:	4641      	mov	r1, r8
    27b6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    27b8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    27bc:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    27be:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    27c0:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    27c4:	f7fe ffc0 	bl	1748 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    27c8:	20000d90 	.word	0x20000d90
    27cc:	e000ed00 	.word	0xe000ed00
    27d0:	200001c0 	.word	0x200001c0
    27d4:	200007f0 	.word	0x200007f0
    27d8:	00005785 	.word	0x00005785
    27dc:	20000850 	.word	0x20000850
    27e0:	20000140 	.word	0x20000140
    27e4:	20000c50 	.word	0x20000c50
    27e8:	00002621 	.word	0x00002621
    27ec:	0000269d 	.word	0x0000269d

000027f0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    27f0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    27f2:	4b0e      	ldr	r3, [pc, #56]	; (282c <init_mem_slab_module+0x3c>)
    27f4:	4c0e      	ldr	r4, [pc, #56]	; (2830 <init_mem_slab_module+0x40>)
    27f6:	42a3      	cmp	r3, r4
    27f8:	d301      	bcc.n	27fe <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    27fa:	2000      	movs	r0, #0
	return rc;
}
    27fc:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    27fe:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    2802:	ea41 0200 	orr.w	r2, r1, r0
    2806:	f012 0203 	ands.w	r2, r2, #3
    280a:	d10b      	bne.n	2824 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    280c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    280e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2810:	42aa      	cmp	r2, r5
    2812:	d101      	bne.n	2818 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2814:	331c      	adds	r3, #28
    2816:	e7ee      	b.n	27f6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    2818:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    281a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    281c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    281e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    2820:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    2822:	e7f5      	b.n	2810 <init_mem_slab_module+0x20>
		return -EINVAL;
    2824:	f06f 0015 	mvn.w	r0, #21
	return rc;
    2828:	e7e8      	b.n	27fc <init_mem_slab_module+0xc>
    282a:	bf00      	nop
    282c:	200000f0 	.word	0x200000f0
    2830:	200000f0 	.word	0x200000f0

00002834 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    2834:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    2836:	460c      	mov	r4, r1
    2838:	4616      	mov	r6, r2
    283a:	461f      	mov	r7, r3
    283c:	f04f 0320 	mov.w	r3, #32
    2840:	f3ef 8111 	mrs	r1, BASEPRI
    2844:	f383 8811 	msr	BASEPRI, r3
    2848:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    284c:	6943      	ldr	r3, [r0, #20]
    284e:	b15b      	cbz	r3, 2868 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    2850:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    2852:	681b      	ldr	r3, [r3, #0]
    2854:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    2856:	6983      	ldr	r3, [r0, #24]
    2858:	3301      	adds	r3, #1
    285a:	6183      	str	r3, [r0, #24]
		result = 0;
    285c:	2000      	movs	r0, #0
	__asm__ volatile(
    285e:	f381 8811 	msr	BASEPRI, r1
    2862:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    2866:	e011      	b.n	288c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2868:	ea56 0207 	orrs.w	r2, r6, r7
    286c:	d103      	bne.n	2876 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    286e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    2872:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    2874:	e7f3      	b.n	285e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    2876:	4602      	mov	r2, r0
    2878:	e9cd 6700 	strd	r6, r7, [sp]
    287c:	4804      	ldr	r0, [pc, #16]	; (2890 <k_mem_slab_alloc+0x5c>)
    287e:	f000 fb49 	bl	2f14 <z_pend_curr>
		if (result == 0) {
    2882:	b918      	cbnz	r0, 288c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    2884:	4b03      	ldr	r3, [pc, #12]	; (2894 <k_mem_slab_alloc+0x60>)
    2886:	689b      	ldr	r3, [r3, #8]
    2888:	695b      	ldr	r3, [r3, #20]
    288a:	6023      	str	r3, [r4, #0]
}
    288c:	b002      	add	sp, #8
    288e:	bdd0      	pop	{r4, r6, r7, pc}
    2890:	2000084e 	.word	0x2000084e
    2894:	200007f0 	.word	0x200007f0

00002898 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    2898:	b570      	push	{r4, r5, r6, lr}
    289a:	4604      	mov	r4, r0
    289c:	460d      	mov	r5, r1
	__asm__ volatile(
    289e:	f04f 0320 	mov.w	r3, #32
    28a2:	f3ef 8611 	mrs	r6, BASEPRI
    28a6:	f383 8811 	msr	BASEPRI, r3
    28aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    28ae:	f002 fa39 	bl	4d24 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    28b2:	b158      	cbz	r0, 28cc <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    28b4:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    28b6:	682a      	ldr	r2, [r5, #0]
    28b8:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    28ba:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    28bc:	f002 f9da 	bl	4c74 <z_ready_thread>
		z_reschedule(&lock, key);
    28c0:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    28c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    28c6:	4808      	ldr	r0, [pc, #32]	; (28e8 <k_mem_slab_free+0x50>)
    28c8:	f000 b910 	b.w	2aec <z_reschedule>
		**(char ***)mem = slab->free_list;
    28cc:	682b      	ldr	r3, [r5, #0]
    28ce:	6962      	ldr	r2, [r4, #20]
    28d0:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    28d2:	682b      	ldr	r3, [r5, #0]
    28d4:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    28d6:	69a3      	ldr	r3, [r4, #24]
    28d8:	3b01      	subs	r3, #1
    28da:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    28dc:	f386 8811 	msr	BASEPRI, r6
    28e0:	f3bf 8f6f 	isb	sy
}
    28e4:	bd70      	pop	{r4, r5, r6, pc}
    28e6:	bf00      	nop
    28e8:	2000084e 	.word	0x2000084e

000028ec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    28ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    28f0:	4604      	mov	r4, r0
    28f2:	4616      	mov	r6, r2
    28f4:	461f      	mov	r7, r3
	__asm__ volatile(
    28f6:	f04f 0320 	mov.w	r3, #32
    28fa:	f3ef 8811 	mrs	r8, BASEPRI
    28fe:	f383 8811 	msr	BASEPRI, r3
    2902:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2906:	68c3      	ldr	r3, [r0, #12]
    2908:	4a32      	ldr	r2, [pc, #200]	; (29d4 <z_impl_k_mutex_lock+0xe8>)
    290a:	b16b      	cbz	r3, 2928 <z_impl_k_mutex_lock+0x3c>
    290c:	6880      	ldr	r0, [r0, #8]
    290e:	6891      	ldr	r1, [r2, #8]
    2910:	4288      	cmp	r0, r1
    2912:	d019      	beq.n	2948 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2914:	ea56 0307 	orrs.w	r3, r6, r7
    2918:	d118      	bne.n	294c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    291a:	f388 8811 	msr	BASEPRI, r8
    291e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    2922:	f06f 000f 	mvn.w	r0, #15
    2926:	e00c      	b.n	2942 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    2928:	6891      	ldr	r1, [r2, #8]
    292a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    292e:	3301      	adds	r3, #1
    2930:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    2932:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2934:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    2936:	60a3      	str	r3, [r4, #8]
    2938:	f388 8811 	msr	BASEPRI, r8
    293c:	f3bf 8f6f 	isb	sy
		return 0;
    2940:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    2942:	b002      	add	sp, #8
    2944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    2948:	6921      	ldr	r1, [r4, #16]
    294a:	e7f0      	b.n	292e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    294c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2950:	f991 100e 	ldrsb.w	r1, [r1, #14]
    2954:	4299      	cmp	r1, r3
    2956:	bfa8      	it	ge
    2958:	4619      	movge	r1, r3
    295a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    295e:	4299      	cmp	r1, r3
    2960:	da2c      	bge.n	29bc <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    2962:	f000 fb19 	bl	2f98 <z_set_prio>
    2966:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2968:	4622      	mov	r2, r4
    296a:	4641      	mov	r1, r8
    296c:	e9cd 6700 	strd	r6, r7, [sp]
    2970:	4819      	ldr	r0, [pc, #100]	; (29d8 <z_impl_k_mutex_lock+0xec>)
    2972:	f000 facf 	bl	2f14 <z_pend_curr>
	if (got_mutex == 0) {
    2976:	2800      	cmp	r0, #0
    2978:	d0e3      	beq.n	2942 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    297a:	f04f 0320 	mov.w	r3, #32
    297e:	f3ef 8611 	mrs	r6, BASEPRI
    2982:	f383 8811 	msr	BASEPRI, r3
    2986:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    298a:	6823      	ldr	r3, [r4, #0]
    298c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    298e:	42a3      	cmp	r3, r4
    2990:	d007      	beq.n	29a2 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    2992:	b133      	cbz	r3, 29a2 <z_impl_k_mutex_lock+0xb6>
    2994:	f993 300e 	ldrsb.w	r3, [r3, #14]
    2998:	4299      	cmp	r1, r3
    299a:	bfa8      	it	ge
    299c:	4619      	movge	r1, r3
    299e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    29a2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    29a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    29a8:	4299      	cmp	r1, r3
    29aa:	d109      	bne.n	29c0 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    29ac:	b16d      	cbz	r5, 29ca <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    29ae:	4631      	mov	r1, r6
    29b0:	4809      	ldr	r0, [pc, #36]	; (29d8 <z_impl_k_mutex_lock+0xec>)
    29b2:	f000 f89b 	bl	2aec <z_reschedule>
	return -EAGAIN;
    29b6:	f06f 000a 	mvn.w	r0, #10
    29ba:	e7c2      	b.n	2942 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    29bc:	2500      	movs	r5, #0
    29be:	e7d3      	b.n	2968 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    29c0:	f000 faea 	bl	2f98 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    29c4:	2800      	cmp	r0, #0
    29c6:	d1f2      	bne.n	29ae <z_impl_k_mutex_lock+0xc2>
    29c8:	e7f0      	b.n	29ac <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    29ca:	f386 8811 	msr	BASEPRI, r6
    29ce:	f3bf 8f6f 	isb	sy
    29d2:	e7f0      	b.n	29b6 <z_impl_k_mutex_lock+0xca>
    29d4:	200007f0 	.word	0x200007f0
    29d8:	2000084e 	.word	0x2000084e

000029dc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    29dc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    29de:	6883      	ldr	r3, [r0, #8]
{
    29e0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    29e2:	2b00      	cmp	r3, #0
    29e4:	d036      	beq.n	2a54 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    29e6:	4a1e      	ldr	r2, [pc, #120]	; (2a60 <z_impl_k_mutex_unlock+0x84>)
    29e8:	6892      	ldr	r2, [r2, #8]
    29ea:	4293      	cmp	r3, r2
    29ec:	d135      	bne.n	2a5a <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    29ee:	7bda      	ldrb	r2, [r3, #15]
    29f0:	3a01      	subs	r2, #1
    29f2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    29f4:	68c3      	ldr	r3, [r0, #12]
    29f6:	2b01      	cmp	r3, #1
    29f8:	d005      	beq.n	2a06 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    29fa:	3b01      	subs	r3, #1
    29fc:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    29fe:	f000 f8d5 	bl	2bac <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    2a02:	2000      	movs	r0, #0
}
    2a04:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    2a06:	f04f 0320 	mov.w	r3, #32
    2a0a:	f3ef 8511 	mrs	r5, BASEPRI
    2a0e:	f383 8811 	msr	BASEPRI, r3
    2a12:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2a16:	6901      	ldr	r1, [r0, #16]
    2a18:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2a1a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2a1e:	4299      	cmp	r1, r3
    2a20:	d001      	beq.n	2a26 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    2a22:	f000 fab9 	bl	2f98 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2a26:	4620      	mov	r0, r4
    2a28:	f002 f97c 	bl	4d24 <z_unpend_first_thread>
	mutex->owner = new_owner;
    2a2c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2a2e:	b158      	cbz	r0, 2a48 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    2a30:	f990 200e 	ldrsb.w	r2, [r0, #14]
    2a34:	6122      	str	r2, [r4, #16]
    2a36:	2200      	movs	r2, #0
    2a38:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    2a3a:	f002 f91b 	bl	4c74 <z_ready_thread>
		z_reschedule(&lock, key);
    2a3e:	4629      	mov	r1, r5
    2a40:	4808      	ldr	r0, [pc, #32]	; (2a64 <z_impl_k_mutex_unlock+0x88>)
    2a42:	f000 f853 	bl	2aec <z_reschedule>
    2a46:	e7da      	b.n	29fe <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2a48:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2a4a:	f385 8811 	msr	BASEPRI, r5
    2a4e:	f3bf 8f6f 	isb	sy
    2a52:	e7d4      	b.n	29fe <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    2a54:	f06f 0015 	mvn.w	r0, #21
    2a58:	e7d4      	b.n	2a04 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    2a5a:	f04f 30ff 	mov.w	r0, #4294967295
    2a5e:	e7d1      	b.n	2a04 <z_impl_k_mutex_unlock+0x28>
    2a60:	200007f0 	.word	0x200007f0
    2a64:	2000084e 	.word	0x2000084e

00002a68 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2a68:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2a6a:	4c08      	ldr	r4, [pc, #32]	; (2a8c <z_reset_time_slice+0x24>)
    2a6c:	6823      	ldr	r3, [r4, #0]
    2a6e:	b15b      	cbz	r3, 2a88 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2a70:	f7fe fac6 	bl	1000 <z_clock_elapsed>
    2a74:	6822      	ldr	r2, [r4, #0]
    2a76:	4906      	ldr	r1, [pc, #24]	; (2a90 <z_reset_time_slice+0x28>)
    2a78:	4410      	add	r0, r2
    2a7a:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
    2a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    2a80:	2100      	movs	r1, #0
    2a82:	4610      	mov	r0, r2
    2a84:	f002 b9a1 	b.w	4dca <z_set_timeout_expiry>
}
    2a88:	bd10      	pop	{r4, pc}
    2a8a:	bf00      	nop
    2a8c:	20000828 	.word	0x20000828
    2a90:	200007f0 	.word	0x200007f0

00002a94 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    2a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a96:	460c      	mov	r4, r1
	__asm__ volatile(
    2a98:	f04f 0320 	mov.w	r3, #32
    2a9c:	f3ef 8511 	mrs	r5, BASEPRI
    2aa0:	f383 8811 	msr	BASEPRI, r3
    2aa4:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2aac:	f240 36e7 	movw	r6, #999	; 0x3e7
    2ab0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    2ab2:	2200      	movs	r2, #0
    2ab4:	fbe1 6700 	umlal	r6, r7, r1, r0
    2ab8:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <k_sched_time_slice_set+0x4c>)
    2aba:	4630      	mov	r0, r6
    2abc:	611a      	str	r2, [r3, #16]
    2abe:	4639      	mov	r1, r7
    2ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ac4:	2300      	movs	r3, #0
    2ac6:	f7fd fbb9 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    2aca:	4b06      	ldr	r3, [pc, #24]	; (2ae4 <k_sched_time_slice_set+0x50>)
    2acc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2ace:	4b06      	ldr	r3, [pc, #24]	; (2ae8 <k_sched_time_slice_set+0x54>)
    2ad0:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    2ad2:	f7ff ffc9 	bl	2a68 <z_reset_time_slice>
	__asm__ volatile(
    2ad6:	f385 8811 	msr	BASEPRI, r5
    2ada:	f3bf 8f6f 	isb	sy
	}
}
    2ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ae0:	200007f0 	.word	0x200007f0
    2ae4:	20000828 	.word	0x20000828
    2ae8:	20000824 	.word	0x20000824

00002aec <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2aec:	b949      	cbnz	r1, 2b02 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2aee:	f3ef 8005 	mrs	r0, IPSR
    2af2:	b930      	cbnz	r0, 2b02 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    2af4:	4b05      	ldr	r3, [pc, #20]	; (2b0c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    2af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2af8:	689b      	ldr	r3, [r3, #8]
    2afa:	429a      	cmp	r2, r3
    2afc:	d001      	beq.n	2b02 <z_reschedule+0x16>
	ret = arch_swap(key);
    2afe:	f7fe bd7d 	b.w	15fc <arch_swap>
    2b02:	f381 8811 	msr	BASEPRI, r1
    2b06:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    2b0a:	4770      	bx	lr
    2b0c:	200007f0 	.word	0x200007f0

00002b10 <k_sched_lock>:
	__asm__ volatile(
    2b10:	f04f 0320 	mov.w	r3, #32
    2b14:	f3ef 8111 	mrs	r1, BASEPRI
    2b18:	f383 8811 	msr	BASEPRI, r3
    2b1c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    2b20:	4b04      	ldr	r3, [pc, #16]	; (2b34 <k_sched_lock+0x24>)
    2b22:	689a      	ldr	r2, [r3, #8]
    2b24:	7bd3      	ldrb	r3, [r2, #15]
    2b26:	3b01      	subs	r3, #1
    2b28:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2b2a:	f381 8811 	msr	BASEPRI, r1
    2b2e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    2b32:	4770      	bx	lr
    2b34:	200007f0 	.word	0x200007f0

00002b38 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2b38:	4b09      	ldr	r3, [pc, #36]	; (2b60 <z_priq_dumb_remove+0x28>)
    2b3a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2b3e:	4282      	cmp	r2, r0
    2b40:	d105      	bne.n	2b4e <z_priq_dumb_remove+0x16>
    2b42:	689b      	ldr	r3, [r3, #8]
    2b44:	428b      	cmp	r3, r1
    2b46:	d102      	bne.n	2b4e <z_priq_dumb_remove+0x16>
    2b48:	7b4b      	ldrb	r3, [r1, #13]
    2b4a:	06db      	lsls	r3, r3, #27
    2b4c:	d106      	bne.n	2b5c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2b4e:	e9d1 3200 	ldrd	r3, r2, [r1]
    2b52:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2b54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2b56:	2300      	movs	r3, #0
	node->prev = NULL;
    2b58:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2b5c:	4770      	bx	lr
    2b5e:	bf00      	nop
    2b60:	200007f0 	.word	0x200007f0

00002b64 <update_cache>:
{
    2b64:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2b66:	4c10      	ldr	r4, [pc, #64]	; (2ba8 <update_cache+0x44>)
{
    2b68:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2b6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2b6e:	f002 f87b 	bl	4c68 <z_priq_dumb_best>
    2b72:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    2b74:	68a3      	ldr	r3, [r4, #8]
    2b76:	7b59      	ldrb	r1, [r3, #13]
    2b78:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    2b7a:	bf44      	itt	mi
    2b7c:	f041 0108 	orrmi.w	r1, r1, #8
    2b80:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    2b82:	b905      	cbnz	r5, 2b86 <update_cache+0x22>
    2b84:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    2b86:	b94e      	cbnz	r6, 2b9c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    2b88:	7b5a      	ldrb	r2, [r3, #13]
    2b8a:	06d2      	lsls	r2, r2, #27
    2b8c:	d106      	bne.n	2b9c <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2b8e:	69aa      	ldr	r2, [r5, #24]
    2b90:	b922      	cbnz	r2, 2b9c <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    2b92:	89da      	ldrh	r2, [r3, #14]
    2b94:	2a7f      	cmp	r2, #127	; 0x7f
    2b96:	d901      	bls.n	2b9c <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    2b98:	6263      	str	r3, [r4, #36]	; 0x24
}
    2b9a:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    2b9c:	42ab      	cmp	r3, r5
    2b9e:	d001      	beq.n	2ba4 <update_cache+0x40>
			z_reset_time_slice();
    2ba0:	f7ff ff62 	bl	2a68 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    2ba4:	6265      	str	r5, [r4, #36]	; 0x24
}
    2ba6:	e7f8      	b.n	2b9a <update_cache+0x36>
    2ba8:	200007f0 	.word	0x200007f0

00002bac <k_sched_unlock>:
{
    2bac:	b510      	push	{r4, lr}
	__asm__ volatile(
    2bae:	f04f 0320 	mov.w	r3, #32
    2bb2:	f3ef 8411 	mrs	r4, BASEPRI
    2bb6:	f383 8811 	msr	BASEPRI, r3
    2bba:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2bbe:	4b08      	ldr	r3, [pc, #32]	; (2be0 <k_sched_unlock+0x34>)
		update_cache(0);
    2bc0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    2bc2:	689a      	ldr	r2, [r3, #8]
    2bc4:	7bd3      	ldrb	r3, [r2, #15]
    2bc6:	3301      	adds	r3, #1
    2bc8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2bca:	f7ff ffcb 	bl	2b64 <update_cache>
	__asm__ volatile(
    2bce:	f384 8811 	msr	BASEPRI, r4
    2bd2:	f3bf 8f6f 	isb	sy
}
    2bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2bda:	f002 b82f 	b.w	4c3c <z_reschedule_unlocked>
    2bde:	bf00      	nop
    2be0:	200007f0 	.word	0x200007f0

00002be4 <ready_thread>:
{
    2be4:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2be6:	7b43      	ldrb	r3, [r0, #13]
    2be8:	06db      	lsls	r3, r3, #27
    2bea:	d127      	bne.n	2c3c <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
    2bec:	6983      	ldr	r3, [r0, #24]
    2bee:	bb2b      	cbnz	r3, 2c3c <ready_thread+0x58>
	return list->head == list;
    2bf0:	4a13      	ldr	r2, [pc, #76]	; (2c40 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2bf2:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2bf6:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
    2bfa:	428b      	cmp	r3, r1
    2bfc:	d018      	beq.n	2c30 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2bfe:	b1bb      	cbz	r3, 2c30 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
    2c00:	f990 500e 	ldrsb.w	r5, [r0, #14]
    2c04:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2c08:	42ae      	cmp	r6, r5
    2c0a:	dd0c      	ble.n	2c26 <ready_thread+0x42>
	node->prev = successor->prev;
    2c0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2c0e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    2c12:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    2c14:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    2c16:	7b43      	ldrb	r3, [r0, #13]
    2c18:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c1c:	7343      	strb	r3, [r0, #13]
}
    2c1e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2c20:	2000      	movs	r0, #0
    2c22:	f7ff bf9f 	b.w	2b64 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2c26:	429c      	cmp	r4, r3
    2c28:	d002      	beq.n	2c30 <ready_thread+0x4c>
    2c2a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d1e9      	bne.n	2c04 <ready_thread+0x20>
	node->prev = list->tail;
    2c30:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    2c34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2c36:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2c38:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    2c3a:	e7ec      	b.n	2c16 <ready_thread+0x32>
}
    2c3c:	bc70      	pop	{r4, r5, r6}
    2c3e:	4770      	bx	lr
    2c40:	200007f0 	.word	0x200007f0

00002c44 <z_sched_start>:
{
    2c44:	b510      	push	{r4, lr}
	__asm__ volatile(
    2c46:	f04f 0220 	mov.w	r2, #32
    2c4a:	f3ef 8411 	mrs	r4, BASEPRI
    2c4e:	f382 8811 	msr	BASEPRI, r2
    2c52:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2c56:	7b42      	ldrb	r2, [r0, #13]
    2c58:	0751      	lsls	r1, r2, #29
    2c5a:	d404      	bmi.n	2c66 <z_sched_start+0x22>
	__asm__ volatile(
    2c5c:	f384 8811 	msr	BASEPRI, r4
    2c60:	f3bf 8f6f 	isb	sy
}
    2c64:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2c66:	f022 0204 	bic.w	r2, r2, #4
    2c6a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    2c6c:	f7ff ffba 	bl	2be4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2c70:	4621      	mov	r1, r4
}
    2c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2c76:	4801      	ldr	r0, [pc, #4]	; (2c7c <z_sched_start+0x38>)
    2c78:	f7ff bf38 	b.w	2aec <z_reschedule>
    2c7c:	2000084e 	.word	0x2000084e

00002c80 <move_thread_to_end_of_prio_q>:
{
    2c80:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    2c82:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    2c86:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    2c88:	2b00      	cmp	r3, #0
    2c8a:	da02      	bge.n	2c92 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2c8c:	4816      	ldr	r0, [pc, #88]	; (2ce8 <move_thread_to_end_of_prio_q+0x68>)
    2c8e:	f7ff ff53 	bl	2b38 <z_priq_dumb_remove>
	return list->head == list;
    2c92:	4a16      	ldr	r2, [pc, #88]	; (2cec <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c94:	f102 0028 	add.w	r0, r2, #40	; 0x28
    2c98:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
    2c9c:	4283      	cmp	r3, r0
    2c9e:	d01c      	beq.n	2cda <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2ca0:	b1db      	cbz	r3, 2cda <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    2ca2:	f991 500e 	ldrsb.w	r5, [r1, #14]
    2ca6:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2caa:	42ae      	cmp	r6, r5
    2cac:	dd10      	ble.n	2cd0 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
    2cae:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    2cb0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    2cb4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    2cb6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    2cb8:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    2cba:	6890      	ldr	r0, [r2, #8]
    2cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2cc0:	734b      	strb	r3, [r1, #13]
    2cc2:	1a43      	subs	r3, r0, r1
    2cc4:	4258      	negs	r0, r3
    2cc6:	4158      	adcs	r0, r3
}
    2cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    2ccc:	f7ff bf4a 	b.w	2b64 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2cd0:	429c      	cmp	r4, r3
    2cd2:	d002      	beq.n	2cda <move_thread_to_end_of_prio_q+0x5a>
    2cd4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d1e5      	bne.n	2ca6 <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
    2cda:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    2cde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2ce0:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2ce2:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    2ce4:	e7e8      	b.n	2cb8 <move_thread_to_end_of_prio_q+0x38>
    2ce6:	bf00      	nop
    2ce8:	20000818 	.word	0x20000818
    2cec:	200007f0 	.word	0x200007f0

00002cf0 <z_time_slice>:
{
    2cf0:	4601      	mov	r1, r0
    2cf2:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    2cf4:	f04f 0320 	mov.w	r3, #32
    2cf8:	f3ef 8411 	mrs	r4, BASEPRI
    2cfc:	f383 8811 	msr	BASEPRI, r3
    2d00:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    2d04:	4b16      	ldr	r3, [pc, #88]	; (2d60 <z_time_slice+0x70>)
    2d06:	4a17      	ldr	r2, [pc, #92]	; (2d64 <z_time_slice+0x74>)
    2d08:	6898      	ldr	r0, [r3, #8]
    2d0a:	6815      	ldr	r5, [r2, #0]
    2d0c:	42a8      	cmp	r0, r5
    2d0e:	461d      	mov	r5, r3
    2d10:	d106      	bne.n	2d20 <z_time_slice+0x30>
			z_reset_time_slice();
    2d12:	f7ff fea9 	bl	2a68 <z_reset_time_slice>
	__asm__ volatile(
    2d16:	f384 8811 	msr	BASEPRI, r4
    2d1a:	f3bf 8f6f 	isb	sy
}
    2d1e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    2d20:	2600      	movs	r6, #0
    2d22:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    2d24:	4a10      	ldr	r2, [pc, #64]	; (2d68 <z_time_slice+0x78>)
    2d26:	6812      	ldr	r2, [r2, #0]
    2d28:	b1ba      	cbz	r2, 2d5a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2d2a:	89c2      	ldrh	r2, [r0, #14]
    2d2c:	2a7f      	cmp	r2, #127	; 0x7f
    2d2e:	d814      	bhi.n	2d5a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    2d30:	7b42      	ldrb	r2, [r0, #13]
    2d32:	06d2      	lsls	r2, r2, #27
    2d34:	d111      	bne.n	2d5a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2d36:	4a0d      	ldr	r2, [pc, #52]	; (2d6c <z_time_slice+0x7c>)
    2d38:	f990 600e 	ldrsb.w	r6, [r0, #14]
    2d3c:	6812      	ldr	r2, [r2, #0]
    2d3e:	4296      	cmp	r6, r2
    2d40:	db0b      	blt.n	2d5a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2d42:	4a0b      	ldr	r2, [pc, #44]	; (2d70 <z_time_slice+0x80>)
    2d44:	4290      	cmp	r0, r2
    2d46:	d008      	beq.n	2d5a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    2d48:	691a      	ldr	r2, [r3, #16]
    2d4a:	428a      	cmp	r2, r1
    2d4c:	dc02      	bgt.n	2d54 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    2d4e:	f7ff ff97 	bl	2c80 <move_thread_to_end_of_prio_q>
    2d52:	e7de      	b.n	2d12 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    2d54:	1a52      	subs	r2, r2, r1
    2d56:	611a      	str	r2, [r3, #16]
    2d58:	e7dd      	b.n	2d16 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    2d5a:	2300      	movs	r3, #0
    2d5c:	612b      	str	r3, [r5, #16]
    2d5e:	e7da      	b.n	2d16 <z_time_slice+0x26>
    2d60:	200007f0 	.word	0x200007f0
    2d64:	20000820 	.word	0x20000820
    2d68:	20000828 	.word	0x20000828
    2d6c:	20000824 	.word	0x20000824
    2d70:	20000140 	.word	0x20000140

00002d74 <z_impl_k_thread_suspend>:
{
    2d74:	b570      	push	{r4, r5, r6, lr}
    2d76:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2d78:	3018      	adds	r0, #24
    2d7a:	f002 f800 	bl	4d7e <z_abort_timeout>
	__asm__ volatile(
    2d7e:	f04f 0320 	mov.w	r3, #32
    2d82:	f3ef 8611 	mrs	r6, BASEPRI
    2d86:	f383 8811 	msr	BASEPRI, r3
    2d8a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2d8e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    2d92:	2b00      	cmp	r3, #0
    2d94:	da07      	bge.n	2da6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2d96:	4621      	mov	r1, r4
    2d98:	480e      	ldr	r0, [pc, #56]	; (2dd4 <z_impl_k_thread_suspend+0x60>)
    2d9a:	f7ff fecd 	bl	2b38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2d9e:	7b63      	ldrb	r3, [r4, #13]
    2da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2da4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2da6:	4d0c      	ldr	r5, [pc, #48]	; (2dd8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2da8:	7b63      	ldrb	r3, [r4, #13]
    2daa:	68a8      	ldr	r0, [r5, #8]
    2dac:	f043 0310 	orr.w	r3, r3, #16
    2db0:	7363      	strb	r3, [r4, #13]
    2db2:	1b03      	subs	r3, r0, r4
    2db4:	4258      	negs	r0, r3
    2db6:	4158      	adcs	r0, r3
    2db8:	f7ff fed4 	bl	2b64 <update_cache>
	__asm__ volatile(
    2dbc:	f386 8811 	msr	BASEPRI, r6
    2dc0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    2dc4:	68ab      	ldr	r3, [r5, #8]
    2dc6:	42a3      	cmp	r3, r4
    2dc8:	d103      	bne.n	2dd2 <z_impl_k_thread_suspend+0x5e>
}
    2dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    2dce:	f001 bf35 	b.w	4c3c <z_reschedule_unlocked>
}
    2dd2:	bd70      	pop	{r4, r5, r6, pc}
    2dd4:	20000818 	.word	0x20000818
    2dd8:	200007f0 	.word	0x200007f0

00002ddc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2ddc:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
    2dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2de2:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    2de4:	b103      	cbz	r3, 2de8 <z_thread_single_abort+0xc>
		thread->fn_abort();
    2de6:	4798      	blx	r3
    2de8:	f104 0018 	add.w	r0, r4, #24
    2dec:	f001 ffc7 	bl	4d7e <z_abort_timeout>
	__asm__ volatile(
    2df0:	f04f 0320 	mov.w	r3, #32
    2df4:	f3ef 8611 	mrs	r6, BASEPRI
    2df8:	f383 8811 	msr	BASEPRI, r3
    2dfc:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2e00:	7b63      	ldrb	r3, [r4, #13]
    2e02:	06d8      	lsls	r0, r3, #27
    2e04:	d123      	bne.n	2e4e <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    2e06:	69a2      	ldr	r2, [r4, #24]
    2e08:	bb0a      	cbnz	r2, 2e4e <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    2e0a:	0619      	lsls	r1, r3, #24
    2e0c:	d507      	bpl.n	2e1e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2e0e:	4621      	mov	r1, r4
    2e10:	481e      	ldr	r0, [pc, #120]	; (2e8c <z_thread_single_abort+0xb0>)
    2e12:	f7ff fe91 	bl	2b38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2e16:	7b63      	ldrb	r3, [r4, #13]
    2e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2e1c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2e1e:	4b1c      	ldr	r3, [pc, #112]	; (2e90 <z_thread_single_abort+0xb4>)
    2e20:	6898      	ldr	r0, [r3, #8]
    2e22:	1b02      	subs	r2, r0, r4
    2e24:	4250      	negs	r0, r2
    2e26:	4150      	adcs	r0, r2
    2e28:	f7ff fe9c 	bl	2b64 <update_cache>
			waiter->base.pended_on = NULL;
    2e2c:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    2e2e:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2e30:	f104 0830 	add.w	r8, r4, #48	; 0x30
    2e34:	f043 0308 	orr.w	r3, r3, #8
    2e38:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    2e3a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2e3c:	4545      	cmp	r5, r8
    2e3e:	d000      	beq.n	2e42 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2e40:	b995      	cbnz	r5, 2e68 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    2e42:	f386 8811 	msr	BASEPRI, r6
    2e46:	f3bf 8f6f 	isb	sy
}
    2e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    2e4e:	079b      	lsls	r3, r3, #30
    2e50:	d5ec      	bpl.n	2e2c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    2e52:	4621      	mov	r1, r4
    2e54:	68a0      	ldr	r0, [r4, #8]
    2e56:	f7ff fe6f 	bl	2b38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2e5a:	7b63      	ldrb	r3, [r4, #13]
    2e5c:	f023 0302 	bic.w	r3, r3, #2
    2e60:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    2e62:	2300      	movs	r3, #0
    2e64:	60a3      	str	r3, [r4, #8]
    2e66:	e7e1      	b.n	2e2c <z_thread_single_abort+0x50>
    2e68:	f105 0018 	add.w	r0, r5, #24
    2e6c:	f001 ff87 	bl	4d7e <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2e70:	68a8      	ldr	r0, [r5, #8]
    2e72:	4629      	mov	r1, r5
    2e74:	f7ff fe60 	bl	2b38 <z_priq_dumb_remove>
    2e78:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    2e7a:	4628      	mov	r0, r5
    2e7c:	f023 0302 	bic.w	r3, r3, #2
    2e80:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    2e82:	60af      	str	r7, [r5, #8]
    2e84:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    2e86:	f7ff fead 	bl	2be4 <ready_thread>
    2e8a:	e7d6      	b.n	2e3a <z_thread_single_abort+0x5e>
    2e8c:	20000818 	.word	0x20000818
    2e90:	200007f0 	.word	0x200007f0

00002e94 <unready_thread>:
{
    2e94:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    2e96:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    2e9a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	da06      	bge.n	2eae <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2ea0:	4807      	ldr	r0, [pc, #28]	; (2ec0 <unready_thread+0x2c>)
    2ea2:	f7ff fe49 	bl	2b38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2ea6:	7b4b      	ldrb	r3, [r1, #13]
    2ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2eac:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    2eae:	4b05      	ldr	r3, [pc, #20]	; (2ec4 <unready_thread+0x30>)
    2eb0:	6898      	ldr	r0, [r3, #8]
    2eb2:	1a43      	subs	r3, r0, r1
    2eb4:	4258      	negs	r0, r3
    2eb6:	4158      	adcs	r0, r3
}
    2eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    2ebc:	f7ff be52 	b.w	2b64 <update_cache>
    2ec0:	20000818 	.word	0x20000818
    2ec4:	200007f0 	.word	0x200007f0

00002ec8 <pend>:
{
    2ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ecc:	4606      	mov	r6, r0
    2ece:	4614      	mov	r4, r2
    2ed0:	461d      	mov	r5, r3
	__asm__ volatile(
    2ed2:	f04f 0320 	mov.w	r3, #32
    2ed6:	f3ef 8711 	mrs	r7, BASEPRI
    2eda:	f383 8811 	msr	BASEPRI, r3
    2ede:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    2ee2:	f001 fef7 	bl	4cd4 <add_to_waitq_locked>
	__asm__ volatile(
    2ee6:	f387 8811 	msr	BASEPRI, r7
    2eea:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2eee:	1c6b      	adds	r3, r5, #1
    2ef0:	bf08      	it	eq
    2ef2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    2ef6:	d008      	beq.n	2f0a <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2ef8:	4622      	mov	r2, r4
    2efa:	462b      	mov	r3, r5
    2efc:	f106 0018 	add.w	r0, r6, #24
    2f00:	4903      	ldr	r1, [pc, #12]	; (2f10 <pend+0x48>)
}
    2f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2f06:	f000 ba29 	b.w	335c <z_add_timeout>
    2f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f0e:	bf00      	nop
    2f10:	00004c95 	.word	0x00004c95

00002f14 <z_pend_curr>:
{
    2f14:	b510      	push	{r4, lr}
    2f16:	460c      	mov	r4, r1
	pending_current = _current;
    2f18:	4b06      	ldr	r3, [pc, #24]	; (2f34 <z_pend_curr+0x20>)
{
    2f1a:	4611      	mov	r1, r2
	pending_current = _current;
    2f1c:	6898      	ldr	r0, [r3, #8]
    2f1e:	4b06      	ldr	r3, [pc, #24]	; (2f38 <z_pend_curr+0x24>)
    2f20:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    2f22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2f26:	f7ff ffcf 	bl	2ec8 <pend>
    2f2a:	4620      	mov	r0, r4
}
    2f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f30:	f7fe bb64 	b.w	15fc <arch_swap>
    2f34:	200007f0 	.word	0x200007f0
    2f38:	20000820 	.word	0x20000820

00002f3c <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
    2f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f3e:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    2f40:	f001 ff5e 	bl	4e00 <z_tick_get_32>
    2f44:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    2f46:	f04f 0320 	mov.w	r3, #32
    2f4a:	f3ef 8711 	mrs	r7, BASEPRI
    2f4e:	f383 8811 	msr	BASEPRI, r3
    2f52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    2f56:	4e0d      	ldr	r6, [pc, #52]	; (2f8c <z_tick_sleep.part.0+0x50>)
    2f58:	4b0d      	ldr	r3, [pc, #52]	; (2f90 <z_tick_sleep.part.0+0x54>)
    2f5a:	68b0      	ldr	r0, [r6, #8]
    2f5c:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    2f5e:	f7ff ff99 	bl	2e94 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    2f62:	68b0      	ldr	r0, [r6, #8]
    2f64:	490b      	ldr	r1, [pc, #44]	; (2f94 <z_tick_sleep.part.0+0x58>)
    2f66:	462a      	mov	r2, r5
    2f68:	17eb      	asrs	r3, r5, #31
    2f6a:	3018      	adds	r0, #24
    2f6c:	f000 f9f6 	bl	335c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2f70:	68b2      	ldr	r2, [r6, #8]
    2f72:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2f74:	7b53      	ldrb	r3, [r2, #13]
    2f76:	f043 0310 	orr.w	r3, r3, #16
    2f7a:	7353      	strb	r3, [r2, #13]
    2f7c:	f7fe fb3e 	bl	15fc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    2f80:	f001 ff3e 	bl	4e00 <z_tick_get_32>
    2f84:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    2f86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    2f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f8c:	200007f0 	.word	0x200007f0
    2f90:	20000820 	.word	0x20000820
    2f94:	00004c95 	.word	0x00004c95

00002f98 <z_set_prio>:
{
    2f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f9a:	4604      	mov	r4, r0
    2f9c:	f04f 0320 	mov.w	r3, #32
    2fa0:	f3ef 8711 	mrs	r7, BASEPRI
    2fa4:	f383 8811 	msr	BASEPRI, r3
    2fa8:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2fac:	7b43      	ldrb	r3, [r0, #13]
    2fae:	b24e      	sxtb	r6, r1
    2fb0:	06db      	lsls	r3, r3, #27
    2fb2:	d12c      	bne.n	300e <z_set_prio+0x76>
		if (need_sched) {
    2fb4:	6983      	ldr	r3, [r0, #24]
    2fb6:	bb53      	cbnz	r3, 300e <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    2fb8:	4d16      	ldr	r5, [pc, #88]	; (3014 <z_set_prio+0x7c>)
    2fba:	4621      	mov	r1, r4
    2fbc:	f105 0028 	add.w	r0, r5, #40	; 0x28
    2fc0:	f7ff fdba 	bl	2b38 <z_priq_dumb_remove>
	return list->head == list;
    2fc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fc6:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2fc8:	4283      	cmp	r3, r0
				thread->base.prio = prio;
    2fca:	73a6      	strb	r6, [r4, #14]
    2fcc:	d018      	beq.n	3000 <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2fce:	b1bb      	cbz	r3, 3000 <z_set_prio+0x68>
    2fd0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    2fd2:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2fd6:	42b5      	cmp	r5, r6
    2fd8:	dd0d      	ble.n	2ff6 <z_set_prio+0x5e>
	node->prev = successor->prev;
    2fda:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2fdc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2fe0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2fe2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    2fe4:	2001      	movs	r0, #1
    2fe6:	f7ff fdbd 	bl	2b64 <update_cache>
    2fea:	2001      	movs	r0, #1
	__asm__ volatile(
    2fec:	f387 8811 	msr	BASEPRI, r7
    2ff0:	f3bf 8f6f 	isb	sy
}
    2ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    2ff6:	428b      	cmp	r3, r1
    2ff8:	d002      	beq.n	3000 <z_set_prio+0x68>
    2ffa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d1e8      	bne.n	2fd2 <z_set_prio+0x3a>
	node->prev = list->tail;
    3000:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    3002:	6020      	str	r0, [r4, #0]
	node->prev = list->tail;
    3004:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3006:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3008:	601c      	str	r4, [r3, #0]
	list->tail = node;
    300a:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    300c:	e7ea      	b.n	2fe4 <z_set_prio+0x4c>
			thread->base.prio = prio;
    300e:	2000      	movs	r0, #0
    3010:	73a6      	strb	r6, [r4, #14]
    3012:	e7eb      	b.n	2fec <z_set_prio+0x54>
    3014:	200007f0 	.word	0x200007f0

00003018 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3018:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    301a:	4b04      	ldr	r3, [pc, #16]	; (302c <z_sched_init+0x14>)
    301c:	4608      	mov	r0, r1
    301e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    3022:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    3026:	f7ff bd35 	b.w	2a94 <k_sched_time_slice_set>
    302a:	bf00      	nop
    302c:	200007f0 	.word	0x200007f0

00003030 <z_impl_k_yield>:
{
    3030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    3032:	4c23      	ldr	r4, [pc, #140]	; (30c0 <z_impl_k_yield+0x90>)
    3034:	4b23      	ldr	r3, [pc, #140]	; (30c4 <z_impl_k_yield+0x94>)
    3036:	68a2      	ldr	r2, [r4, #8]
    3038:	429a      	cmp	r2, r3
    303a:	d028      	beq.n	308e <z_impl_k_yield+0x5e>
	__asm__ volatile(
    303c:	f04f 0320 	mov.w	r3, #32
    3040:	f3ef 8511 	mrs	r5, BASEPRI
    3044:	f383 8811 	msr	BASEPRI, r3
    3048:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    304c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3050:	68a1      	ldr	r1, [r4, #8]
    3052:	f7ff fd71 	bl	2b38 <z_priq_dumb_remove>
	return list->head == list;
    3056:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    3058:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    305a:	4282      	cmp	r2, r0
    305c:	d028      	beq.n	30b0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    305e:	b33a      	cbz	r2, 30b0 <z_impl_k_yield+0x80>
    3060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    3062:	f993 100e 	ldrsb.w	r1, [r3, #14]
    3066:	f992 700e 	ldrsb.w	r7, [r2, #14]
    306a:	428f      	cmp	r7, r1
    306c:	dd1b      	ble.n	30a6 <z_impl_k_yield+0x76>
	node->prev = successor->prev;
    306e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3070:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    3074:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3076:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    3078:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
    307a:	2001      	movs	r0, #1
    307c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3080:	735a      	strb	r2, [r3, #13]
    3082:	f7ff fd6f 	bl	2b64 <update_cache>
	__asm__ volatile(
    3086:	f385 8811 	msr	BASEPRI, r5
    308a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    308e:	f04f 0320 	mov.w	r3, #32
    3092:	f3ef 8011 	mrs	r0, BASEPRI
    3096:	f383 8811 	msr	BASEPRI, r3
    309a:	f3bf 8f6f 	isb	sy
}
    309e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    30a2:	f7fe baab 	b.w	15fc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    30a6:	4296      	cmp	r6, r2
    30a8:	d002      	beq.n	30b0 <z_impl_k_yield+0x80>
    30aa:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    30ac:	2a00      	cmp	r2, #0
    30ae:	d1da      	bne.n	3066 <z_impl_k_yield+0x36>
	node->prev = list->tail;
    30b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    30b2:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    30b4:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    30b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    30b8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    30ba:	62e3      	str	r3, [r4, #44]	; 0x2c
}
    30bc:	e7dc      	b.n	3078 <z_impl_k_yield+0x48>
    30be:	bf00      	nop
    30c0:	200007f0 	.word	0x200007f0
    30c4:	20000140 	.word	0x20000140

000030c8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    30c8:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    30ca:	3301      	adds	r3, #1
    30cc:	bf08      	it	eq
    30ce:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    30d2:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    30d4:	d106      	bne.n	30e4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    30d6:	4b0b      	ldr	r3, [pc, #44]	; (3104 <z_impl_k_sleep+0x3c>)
    30d8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    30da:	f7ff fe4b 	bl	2d74 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    30de:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    30e2:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    30e4:	4604      	mov	r4, r0
	if (ticks == 0) {
    30e6:	b948      	cbnz	r0, 30fc <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    30e8:	f7ff ffa2 	bl	3030 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    30ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    30f0:	fb84 3400 	smull	r3, r4, r4, r0
    30f4:	0bd8      	lsrs	r0, r3, #15
    30f6:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    30fa:	e7f2      	b.n	30e2 <z_impl_k_sleep+0x1a>
    30fc:	f7ff ff1e 	bl	2f3c <z_tick_sleep.part.0>
    3100:	4604      	mov	r4, r0
    3102:	e7f3      	b.n	30ec <z_impl_k_sleep+0x24>
    3104:	200007f0 	.word	0x200007f0

00003108 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3108:	4b01      	ldr	r3, [pc, #4]	; (3110 <z_impl_k_current_get+0x8>)
    310a:	6898      	ldr	r0, [r3, #8]
    310c:	4770      	bx	lr
    310e:	bf00      	nop
    3110:	200007f0 	.word	0x200007f0

00003114 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3114:	b538      	push	{r3, r4, r5, lr}
    3116:	4604      	mov	r4, r0
    3118:	f04f 0320 	mov.w	r3, #32
    311c:	f3ef 8511 	mrs	r5, BASEPRI
    3120:	f383 8811 	msr	BASEPRI, r3
    3124:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    3128:	f001 fdfc 	bl	4d24 <z_unpend_first_thread>

	if (thread != NULL) {
    312c:	b148      	cbz	r0, 3142 <z_impl_k_sem_give+0x2e>
    312e:	2200      	movs	r2, #0
    3130:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3132:	f001 fd9f 	bl	4c74 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3136:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    3138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    313c:	4804      	ldr	r0, [pc, #16]	; (3150 <z_impl_k_sem_give+0x3c>)
    313e:	f7ff bcd5 	b.w	2aec <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3142:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3146:	429a      	cmp	r2, r3
    3148:	bf18      	it	ne
    314a:	3301      	addne	r3, #1
    314c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    314e:	e7f2      	b.n	3136 <z_impl_k_sem_give+0x22>
    3150:	2000084e 	.word	0x2000084e

00003154 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3154:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3156:	4614      	mov	r4, r2
    3158:	461d      	mov	r5, r3
    315a:	f04f 0320 	mov.w	r3, #32
    315e:	f3ef 8111 	mrs	r1, BASEPRI
    3162:	f383 8811 	msr	BASEPRI, r3
    3166:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    316a:	6883      	ldr	r3, [r0, #8]
    316c:	b143      	cbz	r3, 3180 <z_impl_k_sem_take+0x2c>
		sem->count--;
    316e:	3b01      	subs	r3, #1
    3170:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    3172:	f381 8811 	msr	BASEPRI, r1
    3176:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    317a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    317c:	b003      	add	sp, #12
    317e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3180:	ea54 0305 	orrs.w	r3, r4, r5
    3184:	d106      	bne.n	3194 <z_impl_k_sem_take+0x40>
    3186:	f381 8811 	msr	BASEPRI, r1
    318a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    318e:	f06f 000f 	mvn.w	r0, #15
    3192:	e7f3      	b.n	317c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3194:	4602      	mov	r2, r0
    3196:	e9cd 4500 	strd	r4, r5, [sp]
    319a:	4802      	ldr	r0, [pc, #8]	; (31a4 <z_impl_k_sem_take+0x50>)
    319c:	f7ff feba 	bl	2f14 <z_pend_curr>
	return ret;
    31a0:	e7ec      	b.n	317c <z_impl_k_sem_take+0x28>
    31a2:	bf00      	nop
    31a4:	2000084e 	.word	0x2000084e

000031a8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    31a8:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    31ac:	f100 0530 	add.w	r5, r0, #48	; 0x30
    31b0:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
    31b2:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    31b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    31b8:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    31ba:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    31bc:	2504      	movs	r5, #4
    31be:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    31c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    31c2:	3207      	adds	r2, #7
	thread_base->prio = priority;
    31c4:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    31c6:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    31c8:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
    31cc:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
    31d0:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    31d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
    31d6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
    31da:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    31dc:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    31de:	9202      	str	r2, [sp, #8]
    31e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    31e2:	9201      	str	r2, [sp, #4]
    31e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31e6:	9200      	str	r2, [sp, #0]
    31e8:	4642      	mov	r2, r8
    31ea:	f7fe fa91 	bl	1710 <arch_new_thread>
	if (!_current) {
    31ee:	4b05      	ldr	r3, [pc, #20]	; (3204 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
    31f0:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    31f4:	689b      	ldr	r3, [r3, #8]
    31f6:	b103      	cbz	r3, 31fa <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
    31f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    31fa:	4640      	mov	r0, r8
    31fc:	6763      	str	r3, [r4, #116]	; 0x74
    31fe:	b005      	add	sp, #20
    3200:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
    3204:	200007f0 	.word	0x200007f0

00003208 <z_init_static_threads>:
{
    3208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    320c:	4e2a      	ldr	r6, [pc, #168]	; (32b8 <z_init_static_threads+0xb0>)
    320e:	4d2b      	ldr	r5, [pc, #172]	; (32bc <z_init_static_threads+0xb4>)
    3210:	46b0      	mov	r8, r6
{
    3212:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3214:	42b5      	cmp	r5, r6
    3216:	f105 0430 	add.w	r4, r5, #48	; 0x30
    321a:	d310      	bcc.n	323e <z_init_static_threads+0x36>
	k_sched_lock();
    321c:	f7ff fc78 	bl	2b10 <k_sched_lock>
    3220:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3224:	f240 36e7 	movw	r6, #999	; 0x3e7
    3228:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    322a:	4c24      	ldr	r4, [pc, #144]	; (32bc <z_init_static_threads+0xb4>)
    322c:	f8df a090 	ldr.w	sl, [pc, #144]	; 32c0 <z_init_static_threads+0xb8>
    3230:	4544      	cmp	r4, r8
    3232:	d321      	bcc.n	3278 <z_init_static_threads+0x70>
}
    3234:	b006      	add	sp, #24
    3236:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    323a:	f7ff bcb7 	b.w	2bac <k_sched_unlock>
		z_setup_new_thread(
    323e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3242:	9305      	str	r3, [sp, #20]
    3244:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3248:	9304      	str	r3, [sp, #16]
    324a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    324e:	9303      	str	r3, [sp, #12]
    3250:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3254:	9302      	str	r3, [sp, #8]
    3256:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    325a:	9301      	str	r3, [sp, #4]
    325c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3260:	9300      	str	r3, [sp, #0]
    3262:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3266:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    326a:	f7ff ff9d 	bl	31a8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    326e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3272:	65dd      	str	r5, [r3, #92]	; 0x5c
    3274:	4625      	mov	r5, r4
    3276:	e7cd      	b.n	3214 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3278:	6a63      	ldr	r3, [r4, #36]	; 0x24
    327a:	1c5a      	adds	r2, r3, #1
    327c:	d00d      	beq.n	329a <z_init_static_threads+0x92>
    327e:	4630      	mov	r0, r6
    3280:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    3282:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3286:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    328a:	42b9      	cmp	r1, r7
    328c:	bf08      	it	eq
    328e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    3290:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3292:	d104      	bne.n	329e <z_init_static_threads+0x96>
	z_sched_start(thread);
    3294:	4628      	mov	r0, r5
    3296:	f7ff fcd5 	bl	2c44 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    329a:	3430      	adds	r4, #48	; 0x30
    329c:	e7c8      	b.n	3230 <z_init_static_threads+0x28>
    329e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    32a2:	2300      	movs	r3, #0
    32a4:	f7fc ffca 	bl	23c <__aeabi_uldivmod>
    32a8:	4602      	mov	r2, r0
    32aa:	460b      	mov	r3, r1
    32ac:	f105 0018 	add.w	r0, r5, #24
    32b0:	4651      	mov	r1, sl
    32b2:	f000 f853 	bl	335c <z_add_timeout>
    32b6:	e7f0      	b.n	329a <z_init_static_threads+0x92>
    32b8:	200000f0 	.word	0x200000f0
    32bc:	200000f0 	.word	0x200000f0
    32c0:	00004c95 	.word	0x00004c95

000032c4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    32c4:	4b03      	ldr	r3, [pc, #12]	; (32d4 <elapsed+0x10>)
    32c6:	681b      	ldr	r3, [r3, #0]
    32c8:	b90b      	cbnz	r3, 32ce <elapsed+0xa>
    32ca:	f7fd be99 	b.w	1000 <z_clock_elapsed>
}
    32ce:	2000      	movs	r0, #0
    32d0:	4770      	bx	lr
    32d2:	bf00      	nop
    32d4:	2000082c 	.word	0x2000082c

000032d8 <remove_timeout>:
{
    32d8:	b530      	push	{r4, r5, lr}
    32da:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    32dc:	b168      	cbz	r0, 32fa <remove_timeout+0x22>
    32de:	4a0a      	ldr	r2, [pc, #40]	; (3308 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    32e0:	6852      	ldr	r2, [r2, #4]
    32e2:	4290      	cmp	r0, r2
    32e4:	d009      	beq.n	32fa <remove_timeout+0x22>
	if (next(t) != NULL) {
    32e6:	b143      	cbz	r3, 32fa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    32e8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    32ec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    32f0:	1912      	adds	r2, r2, r4
    32f2:	eb45 0101 	adc.w	r1, r5, r1
    32f6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    32fa:	6842      	ldr	r2, [r0, #4]
    32fc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    32fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3300:	2300      	movs	r3, #0
	node->prev = NULL;
    3302:	e9c0 3300 	strd	r3, r3, [r0]
}
    3306:	bd30      	pop	{r4, r5, pc}
    3308:	20000054 	.word	0x20000054

0000330c <next_timeout>:
	return list->head == list;
    330c:	4b11      	ldr	r3, [pc, #68]	; (3354 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    330e:	b510      	push	{r4, lr}
    3310:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3312:	429c      	cmp	r4, r3
    3314:	bf08      	it	eq
    3316:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3318:	f7ff ffd4 	bl	32c4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    331c:	b1bc      	cbz	r4, 334e <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    331e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    3322:	1a12      	subs	r2, r2, r0
    3324:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3328:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    332c:	f173 0100 	sbcs.w	r1, r3, #0
    3330:	da0d      	bge.n	334e <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    3332:	4619      	mov	r1, r3
    3334:	2a00      	cmp	r2, #0
    3336:	f171 0300 	sbcs.w	r3, r1, #0
    333a:	4610      	mov	r0, r2
    333c:	da00      	bge.n	3340 <next_timeout+0x34>
    333e:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3340:	4b05      	ldr	r3, [pc, #20]	; (3358 <next_timeout+0x4c>)
    3342:	691b      	ldr	r3, [r3, #16]
    3344:	b113      	cbz	r3, 334c <next_timeout+0x40>
    3346:	4298      	cmp	r0, r3
    3348:	bfa8      	it	ge
    334a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    334c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    334e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3352:	e7f5      	b.n	3340 <next_timeout+0x34>
    3354:	20000054 	.word	0x20000054
    3358:	200007f0 	.word	0x200007f0

0000335c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    335c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3360:	9101      	str	r1, [sp, #4]
    3362:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3364:	1c4b      	adds	r3, r1, #1
    3366:	bf08      	it	eq
    3368:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    336c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    336e:	d06b      	beq.n	3448 <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    3370:	f06f 0301 	mvn.w	r3, #1
    3374:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    3378:	1c54      	adds	r4, r2, #1
    337a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    337e:	ebb3 0804 	subs.w	r8, r3, r4
    3382:	eb6b 0905 	sbc.w	r9, fp, r5
    3386:	f1b8 0f00 	cmp.w	r8, #0
    338a:	f179 0300 	sbcs.w	r3, r9, #0
    338e:	db0f      	blt.n	33b0 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    3390:	f7ff ff98 	bl	32c4 <elapsed>
    3394:	f06f 0301 	mvn.w	r3, #1
    3398:	4a32      	ldr	r2, [pc, #200]	; (3464 <z_add_timeout+0x108>)
    339a:	e9d2 1c00 	ldrd	r1, ip, [r2]
    339e:	1a5b      	subs	r3, r3, r1
    33a0:	eb6b 020c 	sbc.w	r2, fp, ip
    33a4:	1b1e      	subs	r6, r3, r4
    33a6:	eb62 0705 	sbc.w	r7, r2, r5
    33aa:	1a34      	subs	r4, r6, r0
    33ac:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    33b0:	9b01      	ldr	r3, [sp, #4]
    33b2:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
    33b6:	f04f 0320 	mov.w	r3, #32
    33ba:	f3ef 8611 	mrs	r6, BASEPRI
    33be:	f383 8811 	msr	BASEPRI, r3
    33c2:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    33c6:	f7ff ff7d 	bl	32c4 <elapsed>
	ticks = MAX(1, ticks);
    33ca:	2c01      	cmp	r4, #1
    33cc:	f175 0300 	sbcs.w	r3, r5, #0
    33d0:	bfbc      	itt	lt
    33d2:	2401      	movlt	r4, #1
    33d4:	2500      	movlt	r5, #0
	return list->head == list;
    33d6:	4b24      	ldr	r3, [pc, #144]	; (3468 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
    33d8:	1824      	adds	r4, r4, r0
    33da:	681a      	ldr	r2, [r3, #0]
    33dc:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    33e0:	429a      	cmp	r2, r3
    33e2:	e9ca 4504 	strd	r4, r5, [sl, #16]
    33e6:	d001      	beq.n	33ec <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    33e8:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    33ea:	b952      	cbnz	r2, 3402 <z_add_timeout+0xa6>
	node->prev = list->tail;
    33ec:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    33ee:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    33f2:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    33f6:	685a      	ldr	r2, [r3, #4]
    33f8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    33fc:	f8c3 a004 	str.w	sl, [r3, #4]
}
    3400:	e014      	b.n	342c <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
    3402:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    3406:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    340a:	4544      	cmp	r4, r8
    340c:	eb75 0109 	sbcs.w	r1, r5, r9
    3410:	da1d      	bge.n	344e <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
    3412:	ebb8 0004 	subs.w	r0, r8, r4
    3416:	eb69 0105 	sbc.w	r1, r9, r5
    341a:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    341e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3420:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    3424:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    3428:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    342c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    342e:	429a      	cmp	r2, r3
    3430:	d006      	beq.n	3440 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3432:	4592      	cmp	sl, r2
    3434:	d104      	bne.n	3440 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
    3436:	f7ff ff69 	bl	330c <next_timeout>
    343a:	2100      	movs	r1, #0
    343c:	f7fd fd7a 	bl	f34 <z_clock_set_timeout>
	__asm__ volatile(
    3440:	f386 8811 	msr	BASEPRI, r6
    3444:	f3bf 8f6f 	isb	sy
		}
	}
}
    3448:	b003      	add	sp, #12
    344a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    344e:	ebb4 0008 	subs.w	r0, r4, r8
    3452:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    3456:	42ba      	cmp	r2, r7
    3458:	e9ca 0104 	strd	r0, r1, [sl, #16]
    345c:	d0c6      	beq.n	33ec <z_add_timeout+0x90>
    345e:	6812      	ldr	r2, [r2, #0]
    3460:	e7c3      	b.n	33ea <z_add_timeout+0x8e>
    3462:	bf00      	nop
    3464:	20000240 	.word	0x20000240
    3468:	20000054 	.word	0x20000054

0000346c <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    346c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3470:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3472:	f7ff fc3d 	bl	2cf0 <z_time_slice>
	__asm__ volatile(
    3476:	f04f 0320 	mov.w	r3, #32
    347a:	f3ef 8411 	mrs	r4, BASEPRI
    347e:	f383 8811 	msr	BASEPRI, r3
    3482:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3486:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3538 <z_clock_announce+0xcc>
    348a:	4d2a      	ldr	r5, [pc, #168]	; (3534 <z_clock_announce+0xc8>)
    348c:	4651      	mov	r1, sl
	return list->head == list;
    348e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 353c <z_clock_announce+0xd0>
    3492:	602e      	str	r6, [r5, #0]
    3494:	f8d5 c000 	ldr.w	ip, [r5]
    3498:	f8db 0000 	ldr.w	r0, [fp]
    349c:	4662      	mov	r2, ip
    349e:	e9da 8900 	ldrd	r8, r9, [sl]
    34a2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34a4:	4558      	cmp	r0, fp
    34a6:	e9cd 2300 	strd	r2, r3, [sp]
    34aa:	d00d      	beq.n	34c8 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    34ac:	b160      	cbz	r0, 34c8 <z_clock_announce+0x5c>
    34ae:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    34b2:	45b4      	cmp	ip, r6
    34b4:	41bb      	sbcs	r3, r7
    34b6:	da1d      	bge.n	34f4 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    34b8:	9b00      	ldr	r3, [sp, #0]
    34ba:	ebb6 0c03 	subs.w	ip, r6, r3
    34be:	9b01      	ldr	r3, [sp, #4]
    34c0:	eb67 0603 	sbc.w	r6, r7, r3
    34c4:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    34c8:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    34ca:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    34cc:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    34ce:	eb13 0208 	adds.w	r2, r3, r8
    34d2:	9b01      	ldr	r3, [sp, #4]
    34d4:	eb43 0309 	adc.w	r3, r3, r9
    34d8:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
    34dc:	f7ff ff16 	bl	330c <next_timeout>
    34e0:	4631      	mov	r1, r6
    34e2:	f7fd fd27 	bl	f34 <z_clock_set_timeout>
	__asm__ volatile(
    34e6:	f384 8811 	msr	BASEPRI, r4
    34ea:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    34ee:	b003      	add	sp, #12
    34f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    34f4:	2200      	movs	r2, #0
    34f6:	2300      	movs	r3, #0
		curr_tick += dt;
    34f8:	eb18 0806 	adds.w	r8, r8, r6
    34fc:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    3500:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    3504:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    3508:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    350c:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    350e:	f7ff fee3 	bl	32d8 <remove_timeout>
    3512:	f384 8811 	msr	BASEPRI, r4
    3516:	f3bf 8f6f 	isb	sy
		t->fn(t);
    351a:	6883      	ldr	r3, [r0, #8]
    351c:	4798      	blx	r3
	__asm__ volatile(
    351e:	f04f 0320 	mov.w	r3, #32
    3522:	f3ef 8411 	mrs	r4, BASEPRI
    3526:	f383 8811 	msr	BASEPRI, r3
    352a:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    352e:	4902      	ldr	r1, [pc, #8]	; (3538 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3530:	e7b0      	b.n	3494 <z_clock_announce+0x28>
    3532:	bf00      	nop
    3534:	2000082c 	.word	0x2000082c
    3538:	20000240 	.word	0x20000240
    353c:	20000054 	.word	0x20000054

00003540 <z_tick_get>:

int64_t z_tick_get(void)
{
    3540:	b510      	push	{r4, lr}
    3542:	f04f 0320 	mov.w	r3, #32
    3546:	f3ef 8411 	mrs	r4, BASEPRI
    354a:	f383 8811 	msr	BASEPRI, r3
    354e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    3552:	f7fd fd55 	bl	1000 <z_clock_elapsed>
    3556:	4b06      	ldr	r3, [pc, #24]	; (3570 <z_tick_get+0x30>)
    3558:	e9d3 2300 	ldrd	r2, r3, [r3]
    355c:	1812      	adds	r2, r2, r0
    355e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    3562:	f384 8811 	msr	BASEPRI, r4
    3566:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    356a:	4610      	mov	r0, r2
    356c:	4619      	mov	r1, r3
    356e:	bd10      	pop	{r4, pc}
    3570:	20000240 	.word	0x20000240

00003574 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    3574:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3576:	4c06      	ldr	r4, [pc, #24]	; (3590 <statics_init+0x1c>)
    3578:	4d06      	ldr	r5, [pc, #24]	; (3594 <statics_init+0x20>)
    357a:	42ac      	cmp	r4, r5
    357c:	d301      	bcc.n	3582 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    357e:	2000      	movs	r0, #0
    3580:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    3582:	4620      	mov	r0, r4
    3584:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    3588:	f001 fc3e 	bl	4e08 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    358c:	3414      	adds	r4, #20
    358e:	e7f4      	b.n	357a <statics_init+0x6>
    3590:	200000f0 	.word	0x200000f0
    3594:	200000f0 	.word	0x200000f0

00003598 <CC_PalMemCopyPlat>:
    3598:	f001 ba1e 	b.w	49d8 <memmove>

0000359c <CC_PalMemSetZeroPlat>:
    359c:	460a      	mov	r2, r1
    359e:	2100      	movs	r1, #0
    35a0:	f001 ba5c 	b.w	4a5c <memset>

000035a4 <CC_PalInit>:
    35a4:	b510      	push	{r4, lr}
    35a6:	4811      	ldr	r0, [pc, #68]	; (35ec <CC_PalInit+0x48>)
    35a8:	f000 f848 	bl	363c <CC_PalMutexCreate>
    35ac:	b100      	cbz	r0, 35b0 <CC_PalInit+0xc>
    35ae:	bd10      	pop	{r4, pc}
    35b0:	480f      	ldr	r0, [pc, #60]	; (35f0 <CC_PalInit+0x4c>)
    35b2:	f000 f843 	bl	363c <CC_PalMutexCreate>
    35b6:	2800      	cmp	r0, #0
    35b8:	d1f9      	bne.n	35ae <CC_PalInit+0xa>
    35ba:	4c0e      	ldr	r4, [pc, #56]	; (35f4 <CC_PalInit+0x50>)
    35bc:	4620      	mov	r0, r4
    35be:	f000 f83d 	bl	363c <CC_PalMutexCreate>
    35c2:	2800      	cmp	r0, #0
    35c4:	d1f3      	bne.n	35ae <CC_PalInit+0xa>
    35c6:	4b0c      	ldr	r3, [pc, #48]	; (35f8 <CC_PalInit+0x54>)
    35c8:	480c      	ldr	r0, [pc, #48]	; (35fc <CC_PalInit+0x58>)
    35ca:	601c      	str	r4, [r3, #0]
    35cc:	f000 f836 	bl	363c <CC_PalMutexCreate>
    35d0:	4601      	mov	r1, r0
    35d2:	2800      	cmp	r0, #0
    35d4:	d1eb      	bne.n	35ae <CC_PalInit+0xa>
    35d6:	f000 f82d 	bl	3634 <CC_PalDmaInit>
    35da:	4604      	mov	r4, r0
    35dc:	b108      	cbz	r0, 35e2 <CC_PalInit+0x3e>
    35de:	4620      	mov	r0, r4
    35e0:	bd10      	pop	{r4, pc}
    35e2:	f000 f851 	bl	3688 <CC_PalPowerSaveModeInit>
    35e6:	4620      	mov	r0, r4
    35e8:	e7fa      	b.n	35e0 <CC_PalInit+0x3c>
    35ea:	bf00      	nop
    35ec:	20000068 	.word	0x20000068
    35f0:	2000005c 	.word	0x2000005c
    35f4:	20000064 	.word	0x20000064
    35f8:	2000006c 	.word	0x2000006c
    35fc:	20000060 	.word	0x20000060

00003600 <CC_PalTerminate>:
    3600:	b508      	push	{r3, lr}
    3602:	4808      	ldr	r0, [pc, #32]	; (3624 <CC_PalTerminate+0x24>)
    3604:	f000 f824 	bl	3650 <CC_PalMutexDestroy>
    3608:	4807      	ldr	r0, [pc, #28]	; (3628 <CC_PalTerminate+0x28>)
    360a:	f000 f821 	bl	3650 <CC_PalMutexDestroy>
    360e:	4807      	ldr	r0, [pc, #28]	; (362c <CC_PalTerminate+0x2c>)
    3610:	f000 f81e 	bl	3650 <CC_PalMutexDestroy>
    3614:	4806      	ldr	r0, [pc, #24]	; (3630 <CC_PalTerminate+0x30>)
    3616:	f000 f81b 	bl	3650 <CC_PalMutexDestroy>
    361a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    361e:	f000 b80b 	b.w	3638 <CC_PalDmaTerminate>
    3622:	bf00      	nop
    3624:	20000068 	.word	0x20000068
    3628:	2000005c 	.word	0x2000005c
    362c:	20000064 	.word	0x20000064
    3630:	20000060 	.word	0x20000060

00003634 <CC_PalDmaInit>:
    3634:	2000      	movs	r0, #0
    3636:	4770      	bx	lr

00003638 <CC_PalDmaTerminate>:
    3638:	4770      	bx	lr
    363a:	bf00      	nop

0000363c <CC_PalMutexCreate>:
    363c:	b508      	push	{r3, lr}
    363e:	4b03      	ldr	r3, [pc, #12]	; (364c <CC_PalMutexCreate+0x10>)
    3640:	6802      	ldr	r2, [r0, #0]
    3642:	681b      	ldr	r3, [r3, #0]
    3644:	6810      	ldr	r0, [r2, #0]
    3646:	4798      	blx	r3
    3648:	2000      	movs	r0, #0
    364a:	bd08      	pop	{r3, pc}
    364c:	20000078 	.word	0x20000078

00003650 <CC_PalMutexDestroy>:
    3650:	b508      	push	{r3, lr}
    3652:	4b03      	ldr	r3, [pc, #12]	; (3660 <CC_PalMutexDestroy+0x10>)
    3654:	6802      	ldr	r2, [r0, #0]
    3656:	685b      	ldr	r3, [r3, #4]
    3658:	6810      	ldr	r0, [r2, #0]
    365a:	4798      	blx	r3
    365c:	2000      	movs	r0, #0
    365e:	bd08      	pop	{r3, pc}
    3660:	20000078 	.word	0x20000078

00003664 <CC_PalMutexLock>:
    3664:	6802      	ldr	r2, [r0, #0]
    3666:	4b02      	ldr	r3, [pc, #8]	; (3670 <CC_PalMutexLock+0xc>)
    3668:	6810      	ldr	r0, [r2, #0]
    366a:	689b      	ldr	r3, [r3, #8]
    366c:	4718      	bx	r3
    366e:	bf00      	nop
    3670:	20000078 	.word	0x20000078

00003674 <CC_PalMutexUnlock>:
    3674:	b508      	push	{r3, lr}
    3676:	4b03      	ldr	r3, [pc, #12]	; (3684 <CC_PalMutexUnlock+0x10>)
    3678:	6802      	ldr	r2, [r0, #0]
    367a:	68db      	ldr	r3, [r3, #12]
    367c:	6810      	ldr	r0, [r2, #0]
    367e:	4798      	blx	r3
    3680:	2000      	movs	r0, #0
    3682:	bd08      	pop	{r3, pc}
    3684:	20000078 	.word	0x20000078

00003688 <CC_PalPowerSaveModeInit>:
    3688:	b570      	push	{r4, r5, r6, lr}
    368a:	4c09      	ldr	r4, [pc, #36]	; (36b0 <CC_PalPowerSaveModeInit+0x28>)
    368c:	4d09      	ldr	r5, [pc, #36]	; (36b4 <CC_PalPowerSaveModeInit+0x2c>)
    368e:	6920      	ldr	r0, [r4, #16]
    3690:	68ab      	ldr	r3, [r5, #8]
    3692:	4798      	blx	r3
    3694:	b118      	cbz	r0, 369e <CC_PalPowerSaveModeInit+0x16>
    3696:	4b08      	ldr	r3, [pc, #32]	; (36b8 <CC_PalPowerSaveModeInit+0x30>)
    3698:	4808      	ldr	r0, [pc, #32]	; (36bc <CC_PalPowerSaveModeInit+0x34>)
    369a:	685b      	ldr	r3, [r3, #4]
    369c:	4798      	blx	r3
    369e:	2100      	movs	r1, #0
    36a0:	4a07      	ldr	r2, [pc, #28]	; (36c0 <CC_PalPowerSaveModeInit+0x38>)
    36a2:	68eb      	ldr	r3, [r5, #12]
    36a4:	6011      	str	r1, [r2, #0]
    36a6:	6920      	ldr	r0, [r4, #16]
    36a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    36ac:	4718      	bx	r3
    36ae:	bf00      	nop
    36b0:	20000088 	.word	0x20000088
    36b4:	20000078 	.word	0x20000078
    36b8:	20000070 	.word	0x20000070
    36bc:	0000528c 	.word	0x0000528c
    36c0:	20000830 	.word	0x20000830

000036c4 <CC_PalPowerSaveModeSelect>:
    36c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36c6:	4c1a      	ldr	r4, [pc, #104]	; (3730 <CC_PalPowerSaveModeSelect+0x6c>)
    36c8:	4d1a      	ldr	r5, [pc, #104]	; (3734 <CC_PalPowerSaveModeSelect+0x70>)
    36ca:	4607      	mov	r7, r0
    36cc:	68ab      	ldr	r3, [r5, #8]
    36ce:	6920      	ldr	r0, [r4, #16]
    36d0:	4798      	blx	r3
    36d2:	b9e8      	cbnz	r0, 3710 <CC_PalPowerSaveModeSelect+0x4c>
    36d4:	4e18      	ldr	r6, [pc, #96]	; (3738 <CC_PalPowerSaveModeSelect+0x74>)
    36d6:	6833      	ldr	r3, [r6, #0]
    36d8:	b97f      	cbnz	r7, 36fa <CC_PalPowerSaveModeSelect+0x36>
    36da:	b93b      	cbnz	r3, 36ec <CC_PalPowerSaveModeSelect+0x28>
    36dc:	2001      	movs	r0, #1
    36de:	4a17      	ldr	r2, [pc, #92]	; (373c <CC_PalPowerSaveModeSelect+0x78>)
    36e0:	4917      	ldr	r1, [pc, #92]	; (3740 <CC_PalPowerSaveModeSelect+0x7c>)
    36e2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    36e6:	680a      	ldr	r2, [r1, #0]
    36e8:	2a00      	cmp	r2, #0
    36ea:	d1fc      	bne.n	36e6 <CC_PalPowerSaveModeSelect+0x22>
    36ec:	3301      	adds	r3, #1
    36ee:	6033      	str	r3, [r6, #0]
    36f0:	68eb      	ldr	r3, [r5, #12]
    36f2:	6920      	ldr	r0, [r4, #16]
    36f4:	4798      	blx	r3
    36f6:	2000      	movs	r0, #0
    36f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36fa:	2b00      	cmp	r3, #0
    36fc:	d0f8      	beq.n	36f0 <CC_PalPowerSaveModeSelect+0x2c>
    36fe:	2b01      	cmp	r3, #1
    3700:	d008      	beq.n	3714 <CC_PalPowerSaveModeSelect+0x50>
    3702:	3b01      	subs	r3, #1
    3704:	6033      	str	r3, [r6, #0]
    3706:	6920      	ldr	r0, [r4, #16]
    3708:	68eb      	ldr	r3, [r5, #12]
    370a:	4798      	blx	r3
    370c:	2000      	movs	r0, #0
    370e:	e7f3      	b.n	36f8 <CC_PalPowerSaveModeSelect+0x34>
    3710:	480c      	ldr	r0, [pc, #48]	; (3744 <CC_PalPowerSaveModeSelect+0x80>)
    3712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3714:	4a0a      	ldr	r2, [pc, #40]	; (3740 <CC_PalPowerSaveModeSelect+0x7c>)
    3716:	6813      	ldr	r3, [r2, #0]
    3718:	2b00      	cmp	r3, #0
    371a:	d1fc      	bne.n	3716 <CC_PalPowerSaveModeSelect+0x52>
    371c:	4a07      	ldr	r2, [pc, #28]	; (373c <CC_PalPowerSaveModeSelect+0x78>)
    371e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    3722:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    3726:	f000 f821 	bl	376c <CC_HalMaskInterrupt>
    372a:	6833      	ldr	r3, [r6, #0]
    372c:	e7e9      	b.n	3702 <CC_PalPowerSaveModeSelect+0x3e>
    372e:	bf00      	nop
    3730:	20000088 	.word	0x20000088
    3734:	20000078 	.word	0x20000078
    3738:	20000830 	.word	0x20000830
    373c:	50840000 	.word	0x50840000
    3740:	50841910 	.word	0x50841910
    3744:	ffff8fe9 	.word	0xffff8fe9

00003748 <CC_HalInit>:
    3748:	2000      	movs	r0, #0
    374a:	4770      	bx	lr

0000374c <CC_HalTerminate>:
    374c:	2000      	movs	r0, #0
    374e:	4770      	bx	lr

00003750 <CC_HalClearInterruptBit>:
    3750:	0543      	lsls	r3, r0, #21
    3752:	d503      	bpl.n	375c <CC_HalClearInterruptBit+0xc>
    3754:	f04f 32ff 	mov.w	r2, #4294967295
    3758:	4b02      	ldr	r3, [pc, #8]	; (3764 <CC_HalClearInterruptBit+0x14>)
    375a:	601a      	str	r2, [r3, #0]
    375c:	4b02      	ldr	r3, [pc, #8]	; (3768 <CC_HalClearInterruptBit+0x18>)
    375e:	6018      	str	r0, [r3, #0]
    3760:	4770      	bx	lr
    3762:	bf00      	nop
    3764:	50841108 	.word	0x50841108
    3768:	50841a08 	.word	0x50841a08

0000376c <CC_HalMaskInterrupt>:
    376c:	4b01      	ldr	r3, [pc, #4]	; (3774 <CC_HalMaskInterrupt+0x8>)
    376e:	6018      	str	r0, [r3, #0]
    3770:	4770      	bx	lr
    3772:	bf00      	nop
    3774:	50841a04 	.word	0x50841a04

00003778 <CC_HalWaitInterruptRND>:
    3778:	b108      	cbz	r0, 377e <CC_HalWaitInterruptRND+0x6>
    377a:	f000 b803 	b.w	3784 <CC_PalWaitInterruptRND>
    377e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    3782:	4770      	bx	lr

00003784 <CC_PalWaitInterruptRND>:
    3784:	4602      	mov	r2, r0
    3786:	4807      	ldr	r0, [pc, #28]	; (37a4 <CC_PalWaitInterruptRND+0x20>)
    3788:	6803      	ldr	r3, [r0, #0]
    378a:	4213      	tst	r3, r2
    378c:	d0fc      	beq.n	3788 <CC_PalWaitInterruptRND+0x4>
    378e:	b121      	cbz	r1, 379a <CC_PalWaitInterruptRND+0x16>
    3790:	4b05      	ldr	r3, [pc, #20]	; (37a8 <CC_PalWaitInterruptRND+0x24>)
    3792:	4806      	ldr	r0, [pc, #24]	; (37ac <CC_PalWaitInterruptRND+0x28>)
    3794:	681b      	ldr	r3, [r3, #0]
    3796:	600b      	str	r3, [r1, #0]
    3798:	6003      	str	r3, [r0, #0]
    379a:	4b05      	ldr	r3, [pc, #20]	; (37b0 <CC_PalWaitInterruptRND+0x2c>)
    379c:	2000      	movs	r0, #0
    379e:	601a      	str	r2, [r3, #0]
    37a0:	4770      	bx	lr
    37a2:	bf00      	nop
    37a4:	50841a00 	.word	0x50841a00
    37a8:	50841104 	.word	0x50841104
    37ac:	50841108 	.word	0x50841108
    37b0:	50841a08 	.word	0x50841a08

000037b4 <mbedtls_platform_setup>:
    37b4:	f000 b8a0 	b.w	38f8 <nrf_cc310_platform_init>

000037b8 <mbedtls_platform_zeroize>:
    37b8:	b130      	cbz	r0, 37c8 <mbedtls_platform_zeroize+0x10>
    37ba:	b129      	cbz	r1, 37c8 <mbedtls_platform_zeroize+0x10>
    37bc:	2300      	movs	r3, #0
    37be:	4401      	add	r1, r0
    37c0:	7003      	strb	r3, [r0, #0]
    37c2:	3001      	adds	r0, #1
    37c4:	4281      	cmp	r1, r0
    37c6:	d1fb      	bne.n	37c0 <mbedtls_platform_zeroize+0x8>
    37c8:	4770      	bx	lr
    37ca:	bf00      	nop

000037cc <mbedtls_hardware_poll>:
    37cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37d0:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    37d4:	460f      	mov	r7, r1
    37d6:	9205      	str	r2, [sp, #20]
    37d8:	2100      	movs	r1, #0
    37da:	4614      	mov	r4, r2
    37dc:	a812      	add	r0, sp, #72	; 0x48
    37de:	f44f 7208 	mov.w	r2, #544	; 0x220
    37e2:	461e      	mov	r6, r3
    37e4:	f001 f93a 	bl	4a5c <memset>
    37e8:	2300      	movs	r3, #0
    37ea:	a808      	add	r0, sp, #32
    37ec:	4619      	mov	r1, r3
    37ee:	2228      	movs	r2, #40	; 0x28
    37f0:	9306      	str	r3, [sp, #24]
    37f2:	f001 f933 	bl	4a5c <memset>
    37f6:	2f00      	cmp	r7, #0
    37f8:	d03c      	beq.n	3874 <mbedtls_hardware_poll+0xa8>
    37fa:	2e00      	cmp	r6, #0
    37fc:	d03a      	beq.n	3874 <mbedtls_hardware_poll+0xa8>
    37fe:	2c00      	cmp	r4, #0
    3800:	d038      	beq.n	3874 <mbedtls_hardware_poll+0xa8>
    3802:	2104      	movs	r1, #4
    3804:	a806      	add	r0, sp, #24
    3806:	f7ff fec9 	bl	359c <CC_PalMemSetZeroPlat>
    380a:	a808      	add	r0, sp, #32
    380c:	2128      	movs	r1, #40	; 0x28
    380e:	f7ff fec5 	bl	359c <CC_PalMemSetZeroPlat>
    3812:	a808      	add	r0, sp, #32
    3814:	f000 f832 	bl	387c <RNG_PLAT_SetUserRngParameters>
    3818:	b178      	cbz	r0, 383a <mbedtls_hardware_poll+0x6e>
    381a:	f04f 35ff 	mov.w	r5, #4294967295
    381e:	a812      	add	r0, sp, #72	; 0x48
    3820:	f44f 7108 	mov.w	r1, #544	; 0x220
    3824:	f7ff ffc8 	bl	37b8 <mbedtls_platform_zeroize>
    3828:	a806      	add	r0, sp, #24
    382a:	2104      	movs	r1, #4
    382c:	f7ff ffc4 	bl	37b8 <mbedtls_platform_zeroize>
    3830:	4628      	mov	r0, r5
    3832:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    3836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    383a:	ab12      	add	r3, sp, #72	; 0x48
    383c:	f10d 081c 	add.w	r8, sp, #28
    3840:	9003      	str	r0, [sp, #12]
    3842:	e9cd 6301 	strd	r6, r3, [sp, #4]
    3846:	4602      	mov	r2, r0
    3848:	ab05      	add	r3, sp, #20
    384a:	a908      	add	r1, sp, #32
    384c:	f8cd 8000 	str.w	r8, [sp]
    3850:	a806      	add	r0, sp, #24
    3852:	f000 fce9 	bl	4228 <LLF_RND_GetTrngSource>
    3856:	2800      	cmp	r0, #0
    3858:	d1df      	bne.n	381a <mbedtls_hardware_poll+0x4e>
    385a:	6833      	ldr	r3, [r6, #0]
    385c:	42a3      	cmp	r3, r4
    385e:	d3dc      	bcc.n	381a <mbedtls_hardware_poll+0x4e>
    3860:	f8d8 1000 	ldr.w	r1, [r8]
    3864:	4605      	mov	r5, r0
    3866:	3108      	adds	r1, #8
    3868:	4638      	mov	r0, r7
    386a:	4622      	mov	r2, r4
    386c:	f7ff fe94 	bl	3598 <CC_PalMemCopyPlat>
    3870:	6034      	str	r4, [r6, #0]
    3872:	e7d4      	b.n	381e <mbedtls_hardware_poll+0x52>
    3874:	f04f 35ff 	mov.w	r5, #4294967295
    3878:	e7da      	b.n	3830 <mbedtls_hardware_poll+0x64>
    387a:	bf00      	nop

0000387c <RNG_PLAT_SetUserRngParameters>:
    387c:	231c      	movs	r3, #28
    387e:	b530      	push	{r4, r5, lr}
    3880:	b083      	sub	sp, #12
    3882:	a902      	add	r1, sp, #8
    3884:	f841 3d04 	str.w	r3, [r1, #-4]!
    3888:	4604      	mov	r4, r0
    388a:	f000 f9b1 	bl	3bf0 <CC_PalTrngParamGet>
    388e:	4605      	mov	r5, r0
    3890:	b9d8      	cbnz	r0, 38ca <RNG_PLAT_SetUserRngParameters+0x4e>
    3892:	9b01      	ldr	r3, [sp, #4]
    3894:	2b1c      	cmp	r3, #28
    3896:	d11b      	bne.n	38d0 <RNG_PLAT_SetUserRngParameters+0x54>
    3898:	e9d4 3200 	ldrd	r3, r2, [r4]
    389c:	2101      	movs	r1, #1
    389e:	3300      	adds	r3, #0
    38a0:	61e1      	str	r1, [r4, #28]
    38a2:	bf18      	it	ne
    38a4:	2301      	movne	r3, #1
    38a6:	b10a      	cbz	r2, 38ac <RNG_PLAT_SetUserRngParameters+0x30>
    38a8:	f043 0302 	orr.w	r3, r3, #2
    38ac:	68a2      	ldr	r2, [r4, #8]
    38ae:	b932      	cbnz	r2, 38be <RNG_PLAT_SetUserRngParameters+0x42>
    38b0:	68e2      	ldr	r2, [r4, #12]
    38b2:	b9aa      	cbnz	r2, 38e0 <RNG_PLAT_SetUserRngParameters+0x64>
    38b4:	e9c4 3208 	strd	r3, r2, [r4, #32]
    38b8:	b93b      	cbnz	r3, 38ca <RNG_PLAT_SetUserRngParameters+0x4e>
    38ba:	4d0d      	ldr	r5, [pc, #52]	; (38f0 <RNG_PLAT_SetUserRngParameters+0x74>)
    38bc:	e009      	b.n	38d2 <RNG_PLAT_SetUserRngParameters+0x56>
    38be:	68e2      	ldr	r2, [r4, #12]
    38c0:	f043 0304 	orr.w	r3, r3, #4
    38c4:	b962      	cbnz	r2, 38e0 <RNG_PLAT_SetUserRngParameters+0x64>
    38c6:	e9c4 3208 	strd	r3, r2, [r4, #32]
    38ca:	4628      	mov	r0, r5
    38cc:	b003      	add	sp, #12
    38ce:	bd30      	pop	{r4, r5, pc}
    38d0:	4d08      	ldr	r5, [pc, #32]	; (38f4 <RNG_PLAT_SetUserRngParameters+0x78>)
    38d2:	4620      	mov	r0, r4
    38d4:	211c      	movs	r1, #28
    38d6:	f7ff fe61 	bl	359c <CC_PalMemSetZeroPlat>
    38da:	4628      	mov	r0, r5
    38dc:	b003      	add	sp, #12
    38de:	bd30      	pop	{r4, r5, pc}
    38e0:	2200      	movs	r2, #0
    38e2:	4628      	mov	r0, r5
    38e4:	f043 0308 	orr.w	r3, r3, #8
    38e8:	e9c4 3208 	strd	r3, r2, [r4, #32]
    38ec:	b003      	add	sp, #12
    38ee:	bd30      	pop	{r4, r5, pc}
    38f0:	00f00c0e 	.word	0x00f00c0e
    38f4:	00f00c37 	.word	0x00f00c37

000038f8 <nrf_cc310_platform_init>:
    38f8:	b510      	push	{r4, lr}
    38fa:	4c0c      	ldr	r4, [pc, #48]	; (392c <nrf_cc310_platform_init+0x34>)
    38fc:	6823      	ldr	r3, [r4, #0]
    38fe:	b113      	cbz	r3, 3906 <nrf_cc310_platform_init+0xe>
    3900:	4b0b      	ldr	r3, [pc, #44]	; (3930 <nrf_cc310_platform_init+0x38>)
    3902:	681b      	ldr	r3, [r3, #0]
    3904:	b96b      	cbnz	r3, 3922 <nrf_cc310_platform_init+0x2a>
    3906:	f000 f931 	bl	3b6c <CC_LibInit>
    390a:	b138      	cbz	r0, 391c <nrf_cc310_platform_init+0x24>
    390c:	3801      	subs	r0, #1
    390e:	2806      	cmp	r0, #6
    3910:	bf96      	itet	ls
    3912:	4b08      	ldrls	r3, [pc, #32]	; (3934 <nrf_cc310_platform_init+0x3c>)
    3914:	4808      	ldrhi	r0, [pc, #32]	; (3938 <nrf_cc310_platform_init+0x40>)
    3916:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    391a:	bd10      	pop	{r4, pc}
    391c:	2201      	movs	r2, #1
    391e:	4b04      	ldr	r3, [pc, #16]	; (3930 <nrf_cc310_platform_init+0x38>)
    3920:	601a      	str	r2, [r3, #0]
    3922:	2301      	movs	r3, #1
    3924:	2000      	movs	r0, #0
    3926:	6023      	str	r3, [r4, #0]
    3928:	bd10      	pop	{r4, pc}
    392a:	bf00      	nop
    392c:	20000834 	.word	0x20000834
    3930:	20000838 	.word	0x20000838
    3934:	000052ac 	.word	0x000052ac
    3938:	ffff8ffe 	.word	0xffff8ffe

0000393c <nrf_cc310_platform_init_no_rng>:
    393c:	b510      	push	{r4, lr}
    393e:	4c09      	ldr	r4, [pc, #36]	; (3964 <nrf_cc310_platform_init_no_rng+0x28>)
    3940:	6823      	ldr	r3, [r4, #0]
    3942:	b11b      	cbz	r3, 394c <nrf_cc310_platform_init_no_rng+0x10>
    3944:	2301      	movs	r3, #1
    3946:	2000      	movs	r0, #0
    3948:	6023      	str	r3, [r4, #0]
    394a:	bd10      	pop	{r4, pc}
    394c:	f000 f87c 	bl	3a48 <CC_LibInitNoRng>
    3950:	2800      	cmp	r0, #0
    3952:	d0f7      	beq.n	3944 <nrf_cc310_platform_init_no_rng+0x8>
    3954:	3801      	subs	r0, #1
    3956:	2806      	cmp	r0, #6
    3958:	bf96      	itet	ls
    395a:	4b03      	ldrls	r3, [pc, #12]	; (3968 <nrf_cc310_platform_init_no_rng+0x2c>)
    395c:	4803      	ldrhi	r0, [pc, #12]	; (396c <nrf_cc310_platform_init_no_rng+0x30>)
    395e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    3962:	bd10      	pop	{r4, pc}
    3964:	20000834 	.word	0x20000834
    3968:	000052ac 	.word	0x000052ac
    396c:	ffff8ffe 	.word	0xffff8ffe

00003970 <nrf_cc310_platform_abort>:
    3970:	f3bf 8f4f 	dsb	sy
    3974:	4905      	ldr	r1, [pc, #20]	; (398c <nrf_cc310_platform_abort+0x1c>)
    3976:	4b06      	ldr	r3, [pc, #24]	; (3990 <nrf_cc310_platform_abort+0x20>)
    3978:	68ca      	ldr	r2, [r1, #12]
    397a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    397e:	4313      	orrs	r3, r2
    3980:	60cb      	str	r3, [r1, #12]
    3982:	f3bf 8f4f 	dsb	sy
    3986:	bf00      	nop
    3988:	e7fd      	b.n	3986 <nrf_cc310_platform_abort+0x16>
    398a:	bf00      	nop
    398c:	e000ed00 	.word	0xe000ed00
    3990:	05fa0004 	.word	0x05fa0004

00003994 <CC_PalAbort>:
    3994:	4b01      	ldr	r3, [pc, #4]	; (399c <CC_PalAbort+0x8>)
    3996:	685b      	ldr	r3, [r3, #4]
    3998:	4718      	bx	r3
    399a:	bf00      	nop
    399c:	20000070 	.word	0x20000070

000039a0 <nrf_cc310_platform_set_abort>:
    39a0:	4b02      	ldr	r3, [pc, #8]	; (39ac <nrf_cc310_platform_set_abort+0xc>)
    39a2:	e9d0 1200 	ldrd	r1, r2, [r0]
    39a6:	e9c3 1200 	strd	r1, r2, [r3]
    39aa:	4770      	bx	lr
    39ac:	20000070 	.word	0x20000070

000039b0 <mutex_free>:
    39b0:	4770      	bx	lr
    39b2:	bf00      	nop

000039b4 <mutex_unlock>:
    39b4:	b510      	push	{r4, lr}
    39b6:	4604      	mov	r4, r0
    39b8:	b120      	cbz	r0, 39c4 <mutex_unlock+0x10>
    39ba:	f3bf 8f5f 	dmb	sy
    39be:	2000      	movs	r0, #0
    39c0:	6020      	str	r0, [r4, #0]
    39c2:	bd10      	pop	{r4, pc}
    39c4:	4803      	ldr	r0, [pc, #12]	; (39d4 <mutex_unlock+0x20>)
    39c6:	f7ff ffe5 	bl	3994 <CC_PalAbort>
    39ca:	f3bf 8f5f 	dmb	sy
    39ce:	2000      	movs	r0, #0
    39d0:	6020      	str	r0, [r4, #0]
    39d2:	bd10      	pop	{r4, pc}
    39d4:	000052ec 	.word	0x000052ec

000039d8 <mutex_init>:
    39d8:	b510      	push	{r4, lr}
    39da:	4604      	mov	r4, r0
    39dc:	b110      	cbz	r0, 39e4 <mutex_init+0xc>
    39de:	2300      	movs	r3, #0
    39e0:	6023      	str	r3, [r4, #0]
    39e2:	bd10      	pop	{r4, pc}
    39e4:	4802      	ldr	r0, [pc, #8]	; (39f0 <mutex_init+0x18>)
    39e6:	f7ff ffd5 	bl	3994 <CC_PalAbort>
    39ea:	2300      	movs	r3, #0
    39ec:	6023      	str	r3, [r4, #0]
    39ee:	bd10      	pop	{r4, pc}
    39f0:	000052c8 	.word	0x000052c8

000039f4 <mutex_lock>:
    39f4:	b150      	cbz	r0, 3a0c <mutex_lock+0x18>
    39f6:	2201      	movs	r2, #1
    39f8:	e8d0 3fef 	ldaex	r3, [r0]
    39fc:	e8c0 2fe1 	stlex	r1, r2, [r0]
    3a00:	2900      	cmp	r1, #0
    3a02:	d1f9      	bne.n	39f8 <mutex_lock+0x4>
    3a04:	2b01      	cmp	r3, #1
    3a06:	d0f7      	beq.n	39f8 <mutex_lock+0x4>
    3a08:	f3bf 8f5f 	dmb	sy
    3a0c:	2000      	movs	r0, #0
    3a0e:	4770      	bx	lr

00003a10 <nrf_cc310_platform_set_mutexes>:
    3a10:	b470      	push	{r4, r5, r6}
    3a12:	4b0b      	ldr	r3, [pc, #44]	; (3a40 <nrf_cc310_platform_set_mutexes+0x30>)
    3a14:	6806      	ldr	r6, [r0, #0]
    3a16:	68c2      	ldr	r2, [r0, #12]
    3a18:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    3a1c:	e9c3 4202 	strd	r4, r2, [r3, #8]
    3a20:	e9c3 6500 	strd	r6, r5, [r3]
    3a24:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    3a28:	680e      	ldr	r6, [r1, #0]
    3a2a:	4b06      	ldr	r3, [pc, #24]	; (3a44 <nrf_cc310_platform_set_mutexes+0x34>)
    3a2c:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    3a30:	e9c3 6500 	strd	r6, r5, [r3]
    3a34:	e9c3 4002 	strd	r4, r0, [r3, #8]
    3a38:	611a      	str	r2, [r3, #16]
    3a3a:	bc70      	pop	{r4, r5, r6}
    3a3c:	4770      	bx	lr
    3a3e:	bf00      	nop
    3a40:	20000078 	.word	0x20000078
    3a44:	20000088 	.word	0x20000088

00003a48 <CC_LibInitNoRng>:
    3a48:	b510      	push	{r4, lr}
    3a4a:	f7ff fe7d 	bl	3748 <CC_HalInit>
    3a4e:	b970      	cbnz	r0, 3a6e <CC_LibInitNoRng+0x26>
    3a50:	f7ff fda8 	bl	35a4 <CC_PalInit>
    3a54:	b980      	cbnz	r0, 3a78 <CC_LibInitNoRng+0x30>
    3a56:	f7ff fe35 	bl	36c4 <CC_PalPowerSaveModeSelect>
    3a5a:	b980      	cbnz	r0, 3a7e <CC_LibInitNoRng+0x36>
    3a5c:	4b11      	ldr	r3, [pc, #68]	; (3aa4 <CC_LibInitNoRng+0x5c>)
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	0e1b      	lsrs	r3, r3, #24
    3a62:	2bf0      	cmp	r3, #240	; 0xf0
    3a64:	d00d      	beq.n	3a82 <CC_LibInitNoRng+0x3a>
    3a66:	2406      	movs	r4, #6
    3a68:	f7ff fe70 	bl	374c <CC_HalTerminate>
    3a6c:	e000      	b.n	3a70 <CC_LibInitNoRng+0x28>
    3a6e:	2403      	movs	r4, #3
    3a70:	f7ff fdc6 	bl	3600 <CC_PalTerminate>
    3a74:	4620      	mov	r0, r4
    3a76:	bd10      	pop	{r4, pc}
    3a78:	2404      	movs	r4, #4
    3a7a:	4620      	mov	r0, r4
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	2400      	movs	r4, #0
    3a80:	e7f2      	b.n	3a68 <CC_LibInitNoRng+0x20>
    3a82:	4a09      	ldr	r2, [pc, #36]	; (3aa8 <CC_LibInitNoRng+0x60>)
    3a84:	4b09      	ldr	r3, [pc, #36]	; (3aac <CC_LibInitNoRng+0x64>)
    3a86:	6812      	ldr	r2, [r2, #0]
    3a88:	429a      	cmp	r2, r3
    3a8a:	d001      	beq.n	3a90 <CC_LibInitNoRng+0x48>
    3a8c:	2407      	movs	r4, #7
    3a8e:	e7eb      	b.n	3a68 <CC_LibInitNoRng+0x20>
    3a90:	2001      	movs	r0, #1
    3a92:	f7ff fe17 	bl	36c4 <CC_PalPowerSaveModeSelect>
    3a96:	2800      	cmp	r0, #0
    3a98:	d1f1      	bne.n	3a7e <CC_LibInitNoRng+0x36>
    3a9a:	4b05      	ldr	r3, [pc, #20]	; (3ab0 <CC_LibInitNoRng+0x68>)
    3a9c:	4604      	mov	r4, r0
    3a9e:	6018      	str	r0, [r3, #0]
    3aa0:	e7e8      	b.n	3a74 <CC_LibInitNoRng+0x2c>
    3aa2:	bf00      	nop
    3aa4:	50841928 	.word	0x50841928
    3aa8:	50841a24 	.word	0x50841a24
    3aac:	20e00000 	.word	0x20e00000
    3ab0:	50841a0c 	.word	0x50841a0c

00003ab4 <CC_LibInitRngModule>:
    3ab4:	b530      	push	{r4, r5, lr}
    3ab6:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    3aba:	f44f 7208 	mov.w	r2, #544	; 0x220
    3abe:	2100      	movs	r1, #0
    3ac0:	a80c      	add	r0, sp, #48	; 0x30
    3ac2:	f000 ffcb 	bl	4a5c <memset>
    3ac6:	2300      	movs	r3, #0
    3ac8:	a802      	add	r0, sp, #8
    3aca:	4619      	mov	r1, r3
    3acc:	2228      	movs	r2, #40	; 0x28
    3ace:	9301      	str	r3, [sp, #4]
    3ad0:	f000 ffc4 	bl	4a5c <memset>
    3ad4:	a802      	add	r0, sp, #8
    3ad6:	f7ff fed1 	bl	387c <RNG_PLAT_SetUserRngParameters>
    3ada:	b118      	cbz	r0, 3ae4 <CC_LibInitRngModule+0x30>
    3adc:	2005      	movs	r0, #5
    3ade:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    3ae2:	bd30      	pop	{r4, r5, pc}
    3ae4:	4d1c      	ldr	r5, [pc, #112]	; (3b58 <CC_LibInitRngModule+0xa4>)
    3ae6:	f04f 31ff 	mov.w	r1, #4294967295
    3aea:	6828      	ldr	r0, [r5, #0]
    3aec:	f7ff fdba 	bl	3664 <CC_PalMutexLock>
    3af0:	4604      	mov	r4, r0
    3af2:	b9f0      	cbnz	r0, 3b32 <CC_LibInitRngModule+0x7e>
    3af4:	2000      	movs	r0, #0
    3af6:	f7ff fde5 	bl	36c4 <CC_PalPowerSaveModeSelect>
    3afa:	b9b0      	cbnz	r0, 3b2a <CC_LibInitRngModule+0x76>
    3afc:	aa0c      	add	r2, sp, #48	; 0x30
    3afe:	a902      	add	r1, sp, #8
    3b00:	a801      	add	r0, sp, #4
    3b02:	f000 fbd5 	bl	42b0 <LLF_RND_RunTrngStartupTest>
    3b06:	4604      	mov	r4, r0
    3b08:	2001      	movs	r0, #1
    3b0a:	f7ff fddb 	bl	36c4 <CC_PalPowerSaveModeSelect>
    3b0e:	b9f0      	cbnz	r0, 3b4e <CC_LibInitRngModule+0x9a>
    3b10:	6828      	ldr	r0, [r5, #0]
    3b12:	f7ff fdaf 	bl	3674 <CC_PalMutexUnlock>
    3b16:	b110      	cbz	r0, 3b1e <CC_LibInitRngModule+0x6a>
    3b18:	4810      	ldr	r0, [pc, #64]	; (3b5c <CC_LibInitRngModule+0xa8>)
    3b1a:	f7ff ff3b 	bl	3994 <CC_PalAbort>
    3b1e:	4620      	mov	r0, r4
    3b20:	2c00      	cmp	r4, #0
    3b22:	d1db      	bne.n	3adc <CC_LibInitRngModule+0x28>
    3b24:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    3b28:	bd30      	pop	{r4, r5, pc}
    3b2a:	480d      	ldr	r0, [pc, #52]	; (3b60 <CC_LibInitRngModule+0xac>)
    3b2c:	f7ff ff32 	bl	3994 <CC_PalAbort>
    3b30:	e7e4      	b.n	3afc <CC_LibInitRngModule+0x48>
    3b32:	480c      	ldr	r0, [pc, #48]	; (3b64 <CC_LibInitRngModule+0xb0>)
    3b34:	f7ff ff2e 	bl	3994 <CC_PalAbort>
    3b38:	2c01      	cmp	r4, #1
    3b3a:	d1db      	bne.n	3af4 <CC_LibInitRngModule+0x40>
    3b3c:	6828      	ldr	r0, [r5, #0]
    3b3e:	f7ff fd99 	bl	3674 <CC_PalMutexUnlock>
    3b42:	2800      	cmp	r0, #0
    3b44:	d0ca      	beq.n	3adc <CC_LibInitRngModule+0x28>
    3b46:	4805      	ldr	r0, [pc, #20]	; (3b5c <CC_LibInitRngModule+0xa8>)
    3b48:	f7ff ff24 	bl	3994 <CC_PalAbort>
    3b4c:	e7c6      	b.n	3adc <CC_LibInitRngModule+0x28>
    3b4e:	4806      	ldr	r0, [pc, #24]	; (3b68 <CC_LibInitRngModule+0xb4>)
    3b50:	f7ff ff20 	bl	3994 <CC_PalAbort>
    3b54:	e7dc      	b.n	3b10 <CC_LibInitRngModule+0x5c>
    3b56:	bf00      	nop
    3b58:	2000006c 	.word	0x2000006c
    3b5c:	00005324 	.word	0x00005324
    3b60:	0000533c 	.word	0x0000533c
    3b64:	0000530c 	.word	0x0000530c
    3b68:	0000535c 	.word	0x0000535c

00003b6c <CC_LibInit>:
    3b6c:	b508      	push	{r3, lr}
    3b6e:	f7ff fdeb 	bl	3748 <CC_HalInit>
    3b72:	b118      	cbz	r0, 3b7c <CC_LibInit+0x10>
    3b74:	f7ff fd44 	bl	3600 <CC_PalTerminate>
    3b78:	2003      	movs	r0, #3
    3b7a:	bd08      	pop	{r3, pc}
    3b7c:	f7ff fd12 	bl	35a4 <CC_PalInit>
    3b80:	b968      	cbnz	r0, 3b9e <CC_LibInit+0x32>
    3b82:	f7ff fd9f 	bl	36c4 <CC_PalPowerSaveModeSelect>
    3b86:	b960      	cbnz	r0, 3ba2 <CC_LibInit+0x36>
    3b88:	4b15      	ldr	r3, [pc, #84]	; (3be0 <CC_LibInit+0x74>)
    3b8a:	681b      	ldr	r3, [r3, #0]
    3b8c:	0e1b      	lsrs	r3, r3, #24
    3b8e:	2bf0      	cmp	r3, #240	; 0xf0
    3b90:	d012      	beq.n	3bb8 <CC_LibInit+0x4c>
    3b92:	f7ff fddb 	bl	374c <CC_HalTerminate>
    3b96:	f7ff fd33 	bl	3600 <CC_PalTerminate>
    3b9a:	2006      	movs	r0, #6
    3b9c:	bd08      	pop	{r3, pc}
    3b9e:	2004      	movs	r0, #4
    3ba0:	bd08      	pop	{r3, pc}
    3ba2:	f7ff fdd3 	bl	374c <CC_HalTerminate>
    3ba6:	f7ff fd2b 	bl	3600 <CC_PalTerminate>
    3baa:	f7ff ff83 	bl	3ab4 <CC_LibInitRngModule>
    3bae:	2800      	cmp	r0, #0
    3bb0:	bf0c      	ite	eq
    3bb2:	2000      	moveq	r0, #0
    3bb4:	2005      	movne	r0, #5
    3bb6:	bd08      	pop	{r3, pc}
    3bb8:	4a0a      	ldr	r2, [pc, #40]	; (3be4 <CC_LibInit+0x78>)
    3bba:	4b0b      	ldr	r3, [pc, #44]	; (3be8 <CC_LibInit+0x7c>)
    3bbc:	6812      	ldr	r2, [r2, #0]
    3bbe:	429a      	cmp	r2, r3
    3bc0:	d005      	beq.n	3bce <CC_LibInit+0x62>
    3bc2:	f7ff fdc3 	bl	374c <CC_HalTerminate>
    3bc6:	f7ff fd1b 	bl	3600 <CC_PalTerminate>
    3bca:	2007      	movs	r0, #7
    3bcc:	bd08      	pop	{r3, pc}
    3bce:	2001      	movs	r0, #1
    3bd0:	f7ff fd78 	bl	36c4 <CC_PalPowerSaveModeSelect>
    3bd4:	2800      	cmp	r0, #0
    3bd6:	d1e4      	bne.n	3ba2 <CC_LibInit+0x36>
    3bd8:	4b04      	ldr	r3, [pc, #16]	; (3bec <CC_LibInit+0x80>)
    3bda:	6018      	str	r0, [r3, #0]
    3bdc:	e7e5      	b.n	3baa <CC_LibInit+0x3e>
    3bde:	bf00      	nop
    3be0:	50841928 	.word	0x50841928
    3be4:	50841a24 	.word	0x50841a24
    3be8:	20e00000 	.word	0x20e00000
    3bec:	50841a0c 	.word	0x50841a0c

00003bf0 <CC_PalTrngParamGet>:
    3bf0:	b118      	cbz	r0, 3bfa <CC_PalTrngParamGet+0xa>
    3bf2:	b111      	cbz	r1, 3bfa <CC_PalTrngParamGet+0xa>
    3bf4:	680b      	ldr	r3, [r1, #0]
    3bf6:	2b1c      	cmp	r3, #28
    3bf8:	d001      	beq.n	3bfe <CC_PalTrngParamGet+0xe>
    3bfa:	2001      	movs	r0, #1
    3bfc:	4770      	bx	lr
    3bfe:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3c02:	4a3a      	ldr	r2, [pc, #232]	; (3cec <CC_PalTrngParamGet+0xfc>)
    3c04:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    3c08:	4291      	cmp	r1, r2
    3c0a:	d05a      	beq.n	3cc2 <CC_PalTrngParamGet+0xd2>
    3c0c:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    3c10:	3201      	adds	r2, #1
    3c12:	d056      	beq.n	3cc2 <CC_PalTrngParamGet+0xd2>
    3c14:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    3c18:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3c1c:	6002      	str	r2, [r0, #0]
    3c1e:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    3c22:	4a33      	ldr	r2, [pc, #204]	; (3cf0 <CC_PalTrngParamGet+0x100>)
    3c24:	4291      	cmp	r1, r2
    3c26:	d05e      	beq.n	3ce6 <CC_PalTrngParamGet+0xf6>
    3c28:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    3c2c:	3201      	adds	r2, #1
    3c2e:	d05a      	beq.n	3ce6 <CC_PalTrngParamGet+0xf6>
    3c30:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    3c34:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3c38:	6042      	str	r2, [r0, #4]
    3c3a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3c3e:	f512 7f94 	cmn.w	r2, #296	; 0x128
    3c42:	d04d      	beq.n	3ce0 <CC_PalTrngParamGet+0xf0>
    3c44:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3c48:	3201      	adds	r2, #1
    3c4a:	d049      	beq.n	3ce0 <CC_PalTrngParamGet+0xf0>
    3c4c:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3c50:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3c54:	6082      	str	r2, [r0, #8]
    3c56:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    3c5a:	4a26      	ldr	r2, [pc, #152]	; (3cf4 <CC_PalTrngParamGet+0x104>)
    3c5c:	4291      	cmp	r1, r2
    3c5e:	d03c      	beq.n	3cda <CC_PalTrngParamGet+0xea>
    3c60:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3c64:	3201      	adds	r2, #1
    3c66:	d038      	beq.n	3cda <CC_PalTrngParamGet+0xea>
    3c68:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3c6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3c70:	60c2      	str	r2, [r0, #12]
    3c72:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3c76:	3270      	adds	r2, #112	; 0x70
    3c78:	d02d      	beq.n	3cd6 <CC_PalTrngParamGet+0xe6>
    3c7a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3c7e:	3201      	adds	r2, #1
    3c80:	d029      	beq.n	3cd6 <CC_PalTrngParamGet+0xe6>
    3c82:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3c86:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3c8a:	6102      	str	r2, [r0, #16]
    3c8c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3c90:	32af      	adds	r2, #175	; 0xaf
    3c92:	d01e      	beq.n	3cd2 <CC_PalTrngParamGet+0xe2>
    3c94:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3c98:	3201      	adds	r2, #1
    3c9a:	d01a      	beq.n	3cd2 <CC_PalTrngParamGet+0xe2>
    3c9c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3ca0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3ca4:	6142      	str	r2, [r0, #20]
    3ca6:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    3caa:	4a13      	ldr	r2, [pc, #76]	; (3cf8 <CC_PalTrngParamGet+0x108>)
    3cac:	4291      	cmp	r1, r2
    3cae:	d00b      	beq.n	3cc8 <CC_PalTrngParamGet+0xd8>
    3cb0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    3cb4:	3201      	adds	r2, #1
    3cb6:	d007      	beq.n	3cc8 <CC_PalTrngParamGet+0xd8>
    3cb8:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    3cbc:	6183      	str	r3, [r0, #24]
    3cbe:	2000      	movs	r0, #0
    3cc0:	4770      	bx	lr
    3cc2:	f640 02fc 	movw	r2, #2300	; 0x8fc
    3cc6:	e7a7      	b.n	3c18 <CC_PalTrngParamGet+0x28>
    3cc8:	f240 3337 	movw	r3, #823	; 0x337
    3ccc:	6183      	str	r3, [r0, #24]
    3cce:	2000      	movs	r0, #0
    3cd0:	4770      	bx	lr
    3cd2:	2251      	movs	r2, #81	; 0x51
    3cd4:	e7e4      	b.n	3ca0 <CC_PalTrngParamGet+0xb0>
    3cd6:	2290      	movs	r2, #144	; 0x90
    3cd8:	e7d5      	b.n	3c86 <CC_PalTrngParamGet+0x96>
    3cda:	f642 1204 	movw	r2, #10500	; 0x2904
    3cde:	e7c5      	b.n	3c6c <CC_PalTrngParamGet+0x7c>
    3ce0:	f640 62d8 	movw	r2, #3800	; 0xed8
    3ce4:	e7b4      	b.n	3c50 <CC_PalTrngParamGet+0x60>
    3ce6:	f242 02d0 	movw	r2, #8400	; 0x20d0
    3cea:	e7a3      	b.n	3c34 <CC_PalTrngParamGet+0x44>
    3cec:	fffff8fc 	.word	0xfffff8fc
    3cf0:	ffff20d0 	.word	0xffff20d0
    3cf4:	ffff2904 	.word	0xffff2904
    3cf8:	fffff337 	.word	0xfffff337

00003cfc <LLF_RND_AdaptiveProportionTest>:
    3cfc:	b3a8      	cbz	r0, 3d6a <LLF_RND_AdaptiveProportionTest+0x6e>
    3cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d02:	1e4c      	subs	r4, r1, #1
    3d04:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    3d08:	d22c      	bcs.n	3d64 <LLF_RND_AdaptiveProportionTest+0x68>
    3d0a:	b35b      	cbz	r3, 3d64 <LLF_RND_AdaptiveProportionTest+0x68>
    3d0c:	b352      	cbz	r2, 3d64 <LLF_RND_AdaptiveProportionTest+0x68>
    3d0e:	f04f 0c00 	mov.w	ip, #0
    3d12:	00c9      	lsls	r1, r1, #3
    3d14:	46e6      	mov	lr, ip
    3d16:	4665      	mov	r5, ip
    3d18:	4664      	mov	r4, ip
    3d1a:	1e4f      	subs	r7, r1, #1
    3d1c:	f103 38ff 	add.w	r8, r3, #4294967295
    3d20:	e00c      	b.n	3d3c <LLF_RND_AdaptiveProportionTest+0x40>
    3d22:	42ab      	cmp	r3, r5
    3d24:	d016      	beq.n	3d54 <LLF_RND_AdaptiveProportionTest+0x58>
    3d26:	458e      	cmp	lr, r1
    3d28:	d101      	bne.n	3d2e <LLF_RND_AdaptiveProportionTest+0x32>
    3d2a:	f10c 0c01 	add.w	ip, ip, #1
    3d2e:	45a8      	cmp	r8, r5
    3d30:	d016      	beq.n	3d60 <LLF_RND_AdaptiveProportionTest+0x64>
    3d32:	3401      	adds	r4, #1
    3d34:	42bc      	cmp	r4, r7
    3d36:	f105 0501 	add.w	r5, r5, #1
    3d3a:	d818      	bhi.n	3d6e <LLF_RND_AdaptiveProportionTest+0x72>
    3d3c:	0961      	lsrs	r1, r4, #5
    3d3e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    3d42:	f004 061f 	and.w	r6, r4, #31
    3d46:	40f1      	lsrs	r1, r6
    3d48:	2e1f      	cmp	r6, #31
    3d4a:	bf18      	it	ne
    3d4c:	f001 0101 	andne.w	r1, r1, #1
    3d50:	2c00      	cmp	r4, #0
    3d52:	d1e6      	bne.n	3d22 <LLF_RND_AdaptiveProportionTest+0x26>
    3d54:	2500      	movs	r5, #0
    3d56:	45a8      	cmp	r8, r5
    3d58:	468e      	mov	lr, r1
    3d5a:	f04f 0c01 	mov.w	ip, #1
    3d5e:	d1e8      	bne.n	3d32 <LLF_RND_AdaptiveProportionTest+0x36>
    3d60:	4562      	cmp	r2, ip
    3d62:	d2e6      	bcs.n	3d32 <LLF_RND_AdaptiveProportionTest+0x36>
    3d64:	4803      	ldr	r0, [pc, #12]	; (3d74 <LLF_RND_AdaptiveProportionTest+0x78>)
    3d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d6a:	4802      	ldr	r0, [pc, #8]	; (3d74 <LLF_RND_AdaptiveProportionTest+0x78>)
    3d6c:	4770      	bx	lr
    3d6e:	2000      	movs	r0, #0
    3d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d74:	00f10c37 	.word	0x00f10c37

00003d78 <getTrngSource>:
    3d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d7c:	b08f      	sub	sp, #60	; 0x3c
    3d7e:	460d      	mov	r5, r1
    3d80:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    3d84:	4683      	mov	fp, r0
    3d86:	2900      	cmp	r1, #0
    3d88:	d157      	bne.n	3e3a <getTrngSource+0xc2>
    3d8a:	6929      	ldr	r1, [r5, #16]
    3d8c:	9103      	str	r1, [sp, #12]
    3d8e:	2100      	movs	r1, #0
    3d90:	601c      	str	r4, [r3, #0]
    3d92:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3d94:	6019      	str	r1, [r3, #0]
    3d96:	2a00      	cmp	r2, #0
    3d98:	f000 8122 	beq.w	3fe0 <getTrngSource+0x268>
    3d9c:	4a81      	ldr	r2, [pc, #516]	; (3fa4 <getTrngSource+0x22c>)
    3d9e:	4b82      	ldr	r3, [pc, #520]	; (3fa8 <getTrngSource+0x230>)
    3da0:	6811      	ldr	r1, [r2, #0]
    3da2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3da4:	681b      	ldr	r3, [r3, #0]
    3da6:	429a      	cmp	r2, r3
    3da8:	d157      	bne.n	3e5a <getTrngSource+0xe2>
    3daa:	290a      	cmp	r1, #10
    3dac:	d155      	bne.n	3e5a <getTrngSource+0xe2>
    3dae:	f89b 3003 	ldrb.w	r3, [fp, #3]
    3db2:	9306      	str	r3, [sp, #24]
    3db4:	9903      	ldr	r1, [sp, #12]
    3db6:	2304      	movs	r3, #4
    3db8:	4608      	mov	r0, r1
    3dba:	4a7c      	ldr	r2, [pc, #496]	; (3fac <getTrngSource+0x234>)
    3dbc:	9302      	str	r3, [sp, #8]
    3dbe:	fba2 0200 	umull	r0, r2, r2, r0
    3dc2:	0892      	lsrs	r2, r2, #2
    3dc4:	00cb      	lsls	r3, r1, #3
    3dc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3dca:	f104 0008 	add.w	r0, r4, #8
    3dce:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    3dd2:	3b01      	subs	r3, #1
    3dd4:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 3fa8 <getTrngSource+0x230>
    3dd8:	f8df a200 	ldr.w	sl, [pc, #512]	; 3fdc <getTrngSource+0x264>
    3ddc:	9004      	str	r0, [sp, #16]
    3dde:	9200      	str	r2, [sp, #0]
    3de0:	9305      	str	r3, [sp, #20]
    3de2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3de4:	9c03      	ldr	r4, [sp, #12]
    3de6:	601c      	str	r4, [r3, #0]
    3de8:	2c00      	cmp	r4, #0
    3dea:	f000 80cc 	beq.w	3f86 <getTrngSource+0x20e>
    3dee:	2600      	movs	r6, #0
    3df0:	9f04      	ldr	r7, [sp, #16]
    3df2:	f000 faa9 	bl	4348 <LLF_RND_TurnOffTrng>
    3df6:	2300      	movs	r3, #0
    3df8:	9307      	str	r3, [sp, #28]
    3dfa:	9b06      	ldr	r3, [sp, #24]
    3dfc:	f1bb 0f00 	cmp.w	fp, #0
    3e00:	d03a      	beq.n	3e78 <getTrngSource+0x100>
    3e02:	2d00      	cmp	r5, #0
    3e04:	d034      	beq.n	3e70 <getTrngSource+0xf8>
    3e06:	bb53      	cbnz	r3, 3e5e <getTrngSource+0xe6>
    3e08:	005b      	lsls	r3, r3, #1
    3e0a:	9306      	str	r3, [sp, #24]
    3e0c:	f1bb 0f00 	cmp.w	fp, #0
    3e10:	d036      	beq.n	3e80 <getTrngSource+0x108>
    3e12:	2d00      	cmp	r5, #0
    3e14:	d034      	beq.n	3e80 <getTrngSource+0x108>
    3e16:	b1e3      	cbz	r3, 3e52 <getTrngSource+0xda>
    3e18:	a906      	add	r1, sp, #24
    3e1a:	4628      	mov	r0, r5
    3e1c:	f000 fa84 	bl	4328 <LLF_RND_GetFastestRosc>
    3e20:	2800      	cmp	r0, #0
    3e22:	f000 817d 	beq.w	4120 <getTrngSource+0x3a8>
    3e26:	4b62      	ldr	r3, [pc, #392]	; (3fb0 <getTrngSource+0x238>)
    3e28:	4298      	cmp	r0, r3
    3e2a:	d012      	beq.n	3e52 <getTrngSource+0xda>
    3e2c:	9000      	str	r0, [sp, #0]
    3e2e:	f000 fa8b 	bl	4348 <LLF_RND_TurnOffTrng>
    3e32:	9800      	ldr	r0, [sp, #0]
    3e34:	b00f      	add	sp, #60	; 0x3c
    3e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e3a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3e3e:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    3e42:	3001      	adds	r0, #1
    3e44:	bf0c      	ite	eq
    3e46:	f44f 7104 	moveq.w	r1, #528	; 0x210
    3e4a:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    3e4e:	9103      	str	r1, [sp, #12]
    3e50:	e79d      	b.n	3d8e <getTrngSource+0x16>
    3e52:	6a2b      	ldr	r3, [r5, #32]
    3e54:	b973      	cbnz	r3, 3e74 <getTrngSource+0xfc>
    3e56:	4856      	ldr	r0, [pc, #344]	; (3fb0 <getTrngSource+0x238>)
    3e58:	e7e8      	b.n	3e2c <getTrngSource+0xb4>
    3e5a:	4856      	ldr	r0, [pc, #344]	; (3fb4 <getTrngSource+0x23c>)
    3e5c:	e7e6      	b.n	3e2c <getTrngSource+0xb4>
    3e5e:	a906      	add	r1, sp, #24
    3e60:	4628      	mov	r0, r5
    3e62:	f000 fa61 	bl	4328 <LLF_RND_GetFastestRosc>
    3e66:	b168      	cbz	r0, 3e84 <getTrngSource+0x10c>
    3e68:	4b53      	ldr	r3, [pc, #332]	; (3fb8 <getTrngSource+0x240>)
    3e6a:	4298      	cmp	r0, r3
    3e6c:	d0de      	beq.n	3e2c <getTrngSource+0xb4>
    3e6e:	9b06      	ldr	r3, [sp, #24]
    3e70:	2b08      	cmp	r3, #8
    3e72:	d1c9      	bne.n	3e08 <getTrngSource+0x90>
    3e74:	4851      	ldr	r0, [pc, #324]	; (3fbc <getTrngSource+0x244>)
    3e76:	e7d9      	b.n	3e2c <getTrngSource+0xb4>
    3e78:	2b08      	cmp	r3, #8
    3e7a:	d0fb      	beq.n	3e74 <getTrngSource+0xfc>
    3e7c:	005b      	lsls	r3, r3, #1
    3e7e:	9306      	str	r3, [sp, #24]
    3e80:	484f      	ldr	r0, [pc, #316]	; (3fc0 <getTrngSource+0x248>)
    3e82:	e7d3      	b.n	3e2c <getTrngSource+0xb4>
    3e84:	4629      	mov	r1, r5
    3e86:	9806      	ldr	r0, [sp, #24]
    3e88:	f000 fa30 	bl	42ec <LLF_RND_GetRoscSampleCnt>
    3e8c:	2800      	cmp	r0, #0
    3e8e:	d1eb      	bne.n	3e68 <getTrngSource+0xf0>
    3e90:	9b06      	ldr	r3, [sp, #24]
    3e92:	2b08      	cmp	r3, #8
    3e94:	f000 810e 	beq.w	40b4 <getTrngSource+0x33c>
    3e98:	2b04      	cmp	r3, #4
    3e9a:	f000 8131 	beq.w	4100 <getTrngSource+0x388>
    3e9e:	f1a3 0302 	sub.w	r3, r3, #2
    3ea2:	fab3 f383 	clz	r3, r3
    3ea6:	095b      	lsrs	r3, r3, #5
    3ea8:	9301      	str	r3, [sp, #4]
    3eaa:	2301      	movs	r3, #1
    3eac:	4619      	mov	r1, r3
    3eae:	4a45      	ldr	r2, [pc, #276]	; (3fc4 <getTrngSource+0x24c>)
    3eb0:	6013      	str	r3, [r2, #0]
    3eb2:	f842 3c84 	str.w	r3, [r2, #-132]
    3eb6:	4b43      	ldr	r3, [pc, #268]	; (3fc4 <getTrngSource+0x24c>)
    3eb8:	6019      	str	r1, [r3, #0]
    3eba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3ebc:	f8c9 3000 	str.w	r3, [r9]
    3ec0:	f8d9 2000 	ldr.w	r2, [r9]
    3ec4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3ec6:	429a      	cmp	r2, r3
    3ec8:	d1f5      	bne.n	3eb6 <getTrngSource+0x13e>
    3eca:	f04f 0800 	mov.w	r8, #0
    3ece:	f04f 30ff 	mov.w	r0, #4294967295
    3ed2:	f8ca 8000 	str.w	r8, [sl]
    3ed6:	f7ff fc3b 	bl	3750 <CC_HalClearInterruptBit>
    3eda:	4a3b      	ldr	r2, [pc, #236]	; (3fc8 <getTrngSource+0x250>)
    3edc:	4b3b      	ldr	r3, [pc, #236]	; (3fcc <getTrngSource+0x254>)
    3ede:	4640      	mov	r0, r8
    3ee0:	601a      	str	r2, [r3, #0]
    3ee2:	f7ff fc43 	bl	376c <CC_HalMaskInterrupt>
    3ee6:	220a      	movs	r2, #10
    3ee8:	9801      	ldr	r0, [sp, #4]
    3eea:	4939      	ldr	r1, [pc, #228]	; (3fd0 <getTrngSource+0x258>)
    3eec:	4b2d      	ldr	r3, [pc, #180]	; (3fa4 <getTrngSource+0x22c>)
    3eee:	6008      	str	r0, [r1, #0]
    3ef0:	601a      	str	r2, [r3, #0]
    3ef2:	692a      	ldr	r2, [r5, #16]
    3ef4:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    3ef8:	fba8 1202 	umull	r1, r2, r8, r2
    3efc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3efe:	0912      	lsrs	r2, r2, #4
    3f00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f04:	03db      	lsls	r3, r3, #15
    3f06:	fb03 f302 	mul.w	r3, r3, r2
    3f0a:	4a32      	ldr	r2, [pc, #200]	; (3fd4 <getTrngSource+0x25c>)
    3f0c:	099b      	lsrs	r3, r3, #6
    3f0e:	6013      	str	r3, [r2, #0]
    3f10:	2301      	movs	r3, #1
    3f12:	f8ca 3000 	str.w	r3, [sl]
    3f16:	9906      	ldr	r1, [sp, #24]
    3f18:	f8db 2000 	ldr.w	r2, [fp]
    3f1c:	020b      	lsls	r3, r1, #8
    3f1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    3f22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3f26:	4313      	orrs	r3, r2
    3f28:	f8cb 3000 	str.w	r3, [fp]
    3f2c:	a807      	add	r0, sp, #28
    3f2e:	f000 f9cd 	bl	42cc <LLF_RND_WaitRngInterrupt>
    3f32:	2800      	cmp	r0, #0
    3f34:	d198      	bne.n	3e68 <getTrngSource+0xf0>
    3f36:	4b28      	ldr	r3, [pc, #160]	; (3fd8 <getTrngSource+0x260>)
    3f38:	fba8 2804 	umull	r2, r8, r8, r4
    3f3c:	681a      	ldr	r2, [r3, #0]
    3f3e:	3314      	adds	r3, #20
    3f40:	9208      	str	r2, [sp, #32]
    3f42:	f853 2c10 	ldr.w	r2, [r3, #-16]
    3f46:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    3f4a:	9209      	str	r2, [sp, #36]	; 0x24
    3f4c:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    3f50:	920a      	str	r2, [sp, #40]	; 0x28
    3f52:	f853 2c08 	ldr.w	r2, [r3, #-8]
    3f56:	920b      	str	r2, [sp, #44]	; 0x2c
    3f58:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3f5c:	920c      	str	r2, [sp, #48]	; 0x30
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	930d      	str	r3, [sp, #52]	; 0x34
    3f62:	d101      	bne.n	3f68 <getTrngSource+0x1f0>
    3f64:	9b00      	ldr	r3, [sp, #0]
    3f66:	b99b      	cbnz	r3, 3f90 <getTrngSource+0x218>
    3f68:	4638      	mov	r0, r7
    3f6a:	2218      	movs	r2, #24
    3f6c:	a908      	add	r1, sp, #32
    3f6e:	f7ff fb13 	bl	3598 <CC_PalMemCopyPlat>
    3f72:	3c18      	subs	r4, #24
    3f74:	3718      	adds	r7, #24
    3f76:	3601      	adds	r6, #1
    3f78:	2c00      	cmp	r4, #0
    3f7a:	f47f af3a 	bne.w	3df2 <getTrngSource+0x7a>
    3f7e:	9b04      	ldr	r3, [sp, #16]
    3f80:	2b00      	cmp	r3, #0
    3f82:	f040 809a 	bne.w	40ba <getTrngSource+0x342>
    3f86:	2300      	movs	r3, #0
    3f88:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3f8a:	6013      	str	r3, [r2, #0]
    3f8c:	9b06      	ldr	r3, [sp, #24]
    3f8e:	e76f      	b.n	3e70 <getTrngSource+0xf8>
    3f90:	461a      	mov	r2, r3
    3f92:	4638      	mov	r0, r7
    3f94:	a908      	add	r1, sp, #32
    3f96:	1ae4      	subs	r4, r4, r3
    3f98:	f7ff fafe 	bl	3598 <CC_PalMemCopyPlat>
    3f9c:	9b00      	ldr	r3, [sp, #0]
    3f9e:	441f      	add	r7, r3
    3fa0:	e7e9      	b.n	3f76 <getTrngSource+0x1fe>
    3fa2:	bf00      	nop
    3fa4:	50841138 	.word	0x50841138
    3fa8:	50841130 	.word	0x50841130
    3fac:	aaaaaaab 	.word	0xaaaaaaab
    3fb0:	00f10c31 	.word	0x00f10c31
    3fb4:	00f10c30 	.word	0x00f10c30
    3fb8:	00f10c02 	.word	0x00f10c02
    3fbc:	00f10c32 	.word	0x00f10c32
    3fc0:	00f10c35 	.word	0x00f10c35
    3fc4:	508411c4 	.word	0x508411c4
    3fc8:	0ffffffe 	.word	0x0ffffffe
    3fcc:	50841100 	.word	0x50841100
    3fd0:	5084110c 	.word	0x5084110c
    3fd4:	508411d8 	.word	0x508411d8
    3fd8:	50841114 	.word	0x50841114
    3fdc:	5084112c 	.word	0x5084112c
    3fe0:	f1bb 0f00 	cmp.w	fp, #0
    3fe4:	f43f af4c 	beq.w	3e80 <getTrngSource+0x108>
    3fe8:	2d00      	cmp	r5, #0
    3fea:	f43f af49 	beq.w	3e80 <getTrngSource+0x108>
    3fee:	2301      	movs	r3, #1
    3ff0:	a90e      	add	r1, sp, #56	; 0x38
    3ff2:	f841 3d20 	str.w	r3, [r1, #-32]!
    3ff6:	f8cb 2000 	str.w	r2, [fp]
    3ffa:	4628      	mov	r0, r5
    3ffc:	f000 f994 	bl	4328 <LLF_RND_GetFastestRosc>
    4000:	2800      	cmp	r0, #0
    4002:	f47f af13 	bne.w	3e2c <getTrngSource+0xb4>
    4006:	4629      	mov	r1, r5
    4008:	9806      	ldr	r0, [sp, #24]
    400a:	f000 f96f 	bl	42ec <LLF_RND_GetRoscSampleCnt>
    400e:	2800      	cmp	r0, #0
    4010:	f47f af0c 	bne.w	3e2c <getTrngSource+0xb4>
    4014:	9f06      	ldr	r7, [sp, #24]
    4016:	2f08      	cmp	r7, #8
    4018:	f000 80eb 	beq.w	41f2 <getTrngSource+0x47a>
    401c:	2f04      	cmp	r7, #4
    401e:	f000 80ea 	beq.w	41f6 <getTrngSource+0x47e>
    4022:	f1a7 0702 	sub.w	r7, r7, #2
    4026:	fab7 f787 	clz	r7, r7
    402a:	097f      	lsrs	r7, r7, #5
    402c:	2201      	movs	r2, #1
    402e:	4616      	mov	r6, r2
    4030:	4b73      	ldr	r3, [pc, #460]	; (4200 <getTrngSource+0x488>)
    4032:	4974      	ldr	r1, [pc, #464]	; (4204 <getTrngSource+0x48c>)
    4034:	601a      	str	r2, [r3, #0]
    4036:	4618      	mov	r0, r3
    4038:	600a      	str	r2, [r1, #0]
    403a:	3b94      	subs	r3, #148	; 0x94
    403c:	6006      	str	r6, [r0, #0]
    403e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4040:	601a      	str	r2, [r3, #0]
    4042:	6819      	ldr	r1, [r3, #0]
    4044:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4046:	4291      	cmp	r1, r2
    4048:	d1f8      	bne.n	403c <getTrngSource+0x2c4>
    404a:	f04f 0800 	mov.w	r8, #0
    404e:	4b6e      	ldr	r3, [pc, #440]	; (4208 <getTrngSource+0x490>)
    4050:	f04f 30ff 	mov.w	r0, #4294967295
    4054:	f8c3 8000 	str.w	r8, [r3]
    4058:	f7ff fb7a 	bl	3750 <CC_HalClearInterruptBit>
    405c:	4b6b      	ldr	r3, [pc, #428]	; (420c <getTrngSource+0x494>)
    405e:	4a6c      	ldr	r2, [pc, #432]	; (4210 <getTrngSource+0x498>)
    4060:	4640      	mov	r0, r8
    4062:	601a      	str	r2, [r3, #0]
    4064:	f7ff fb82 	bl	376c <CC_HalMaskInterrupt>
    4068:	220a      	movs	r2, #10
    406a:	496a      	ldr	r1, [pc, #424]	; (4214 <getTrngSource+0x49c>)
    406c:	4b6a      	ldr	r3, [pc, #424]	; (4218 <getTrngSource+0x4a0>)
    406e:	600f      	str	r7, [r1, #0]
    4070:	601a      	str	r2, [r3, #0]
    4072:	991a      	ldr	r1, [sp, #104]	; 0x68
    4074:	692b      	ldr	r3, [r5, #16]
    4076:	2901      	cmp	r1, #1
    4078:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    407a:	f000 80b1 	beq.w	41e0 <getTrngSource+0x468>
    407e:	4967      	ldr	r1, [pc, #412]	; (421c <getTrngSource+0x4a4>)
    4080:	fba1 1303 	umull	r1, r3, r1, r3
    4084:	091b      	lsrs	r3, r3, #4
    4086:	2101      	movs	r1, #1
    4088:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    408c:	03d2      	lsls	r2, r2, #15
    408e:	fb03 f302 	mul.w	r3, r3, r2
    4092:	4a63      	ldr	r2, [pc, #396]	; (4220 <getTrngSource+0x4a8>)
    4094:	099b      	lsrs	r3, r3, #6
    4096:	6013      	str	r3, [r2, #0]
    4098:	4b5b      	ldr	r3, [pc, #364]	; (4208 <getTrngSource+0x490>)
    409a:	6019      	str	r1, [r3, #0]
    409c:	9906      	ldr	r1, [sp, #24]
    409e:	f8db 2000 	ldr.w	r2, [fp]
    40a2:	020b      	lsls	r3, r1, #8
    40a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    40a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    40ac:	4313      	orrs	r3, r2
    40ae:	f8cb 3000 	str.w	r3, [fp]
    40b2:	e67f      	b.n	3db4 <getTrngSource+0x3c>
    40b4:	2303      	movs	r3, #3
    40b6:	9301      	str	r3, [sp, #4]
    40b8:	e6f7      	b.n	3eaa <getTrngSource+0x132>
    40ba:	9b03      	ldr	r3, [sp, #12]
    40bc:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    40c0:	f63f af61 	bhi.w	3f86 <getTrngSource+0x20e>
    40c4:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    40c8:	4620      	mov	r0, r4
    40ca:	4623      	mov	r3, r4
    40cc:	696e      	ldr	r6, [r5, #20]
    40ce:	e004      	b.n	40da <getTrngSource+0x362>
    40d0:	2001      	movs	r0, #1
    40d2:	3301      	adds	r3, #1
    40d4:	4563      	cmp	r3, ip
    40d6:	4614      	mov	r4, r2
    40d8:	d815      	bhi.n	4106 <getTrngSource+0x38e>
    40da:	095a      	lsrs	r2, r3, #5
    40dc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    40e0:	f003 011f 	and.w	r1, r3, #31
    40e4:	40ca      	lsrs	r2, r1
    40e6:	291f      	cmp	r1, #31
    40e8:	bf18      	it	ne
    40ea:	f002 0201 	andne.w	r2, r2, #1
    40ee:	2b00      	cmp	r3, #0
    40f0:	d0ee      	beq.n	40d0 <getTrngSource+0x358>
    40f2:	42a2      	cmp	r2, r4
    40f4:	d1ec      	bne.n	40d0 <getTrngSource+0x358>
    40f6:	3001      	adds	r0, #1
    40f8:	4286      	cmp	r6, r0
    40fa:	d1ea      	bne.n	40d2 <getTrngSource+0x35a>
    40fc:	4849      	ldr	r0, [pc, #292]	; (4224 <getTrngSource+0x4ac>)
    40fe:	e00b      	b.n	4118 <getTrngSource+0x3a0>
    4100:	2302      	movs	r3, #2
    4102:	9301      	str	r3, [sp, #4]
    4104:	e6d1      	b.n	3eaa <getTrngSource+0x132>
    4106:	f44f 6380 	mov.w	r3, #1024	; 0x400
    410a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    410e:	69aa      	ldr	r2, [r5, #24]
    4110:	f7ff fdf4 	bl	3cfc <LLF_RND_AdaptiveProportionTest>
    4114:	2800      	cmp	r0, #0
    4116:	d05d      	beq.n	41d4 <getTrngSource+0x45c>
    4118:	2300      	movs	r3, #0
    411a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    411c:	6013      	str	r3, [r2, #0]
    411e:	e6a3      	b.n	3e68 <getTrngSource+0xf0>
    4120:	4629      	mov	r1, r5
    4122:	9806      	ldr	r0, [sp, #24]
    4124:	f000 f8e2 	bl	42ec <LLF_RND_GetRoscSampleCnt>
    4128:	2800      	cmp	r0, #0
    412a:	f47f ae7c 	bne.w	3e26 <getTrngSource+0xae>
    412e:	9c06      	ldr	r4, [sp, #24]
    4130:	2c08      	cmp	r4, #8
    4132:	d051      	beq.n	41d8 <getTrngSource+0x460>
    4134:	2c04      	cmp	r4, #4
    4136:	d051      	beq.n	41dc <getTrngSource+0x464>
    4138:	f1a4 0402 	sub.w	r4, r4, #2
    413c:	fab4 f484 	clz	r4, r4
    4140:	0964      	lsrs	r4, r4, #5
    4142:	2301      	movs	r3, #1
    4144:	461e      	mov	r6, r3
    4146:	4619      	mov	r1, r3
    4148:	4a2d      	ldr	r2, [pc, #180]	; (4200 <getTrngSource+0x488>)
    414a:	6013      	str	r3, [r2, #0]
    414c:	f842 3c84 	str.w	r3, [r2, #-132]
    4150:	4b2b      	ldr	r3, [pc, #172]	; (4200 <getTrngSource+0x488>)
    4152:	6019      	str	r1, [r3, #0]
    4154:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4156:	f8c9 3000 	str.w	r3, [r9]
    415a:	f8d9 2000 	ldr.w	r2, [r9]
    415e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4160:	429a      	cmp	r2, r3
    4162:	d1f5      	bne.n	4150 <getTrngSource+0x3d8>
    4164:	2700      	movs	r7, #0
    4166:	f04f 30ff 	mov.w	r0, #4294967295
    416a:	f8ca 7000 	str.w	r7, [sl]
    416e:	f7ff faef 	bl	3750 <CC_HalClearInterruptBit>
    4172:	4b26      	ldr	r3, [pc, #152]	; (420c <getTrngSource+0x494>)
    4174:	4a26      	ldr	r2, [pc, #152]	; (4210 <getTrngSource+0x498>)
    4176:	4638      	mov	r0, r7
    4178:	601a      	str	r2, [r3, #0]
    417a:	f7ff faf7 	bl	376c <CC_HalMaskInterrupt>
    417e:	220a      	movs	r2, #10
    4180:	4924      	ldr	r1, [pc, #144]	; (4214 <getTrngSource+0x49c>)
    4182:	4b25      	ldr	r3, [pc, #148]	; (4218 <getTrngSource+0x4a0>)
    4184:	600c      	str	r4, [r1, #0]
    4186:	601a      	str	r2, [r3, #0]
    4188:	692a      	ldr	r2, [r5, #16]
    418a:	4924      	ldr	r1, [pc, #144]	; (421c <getTrngSource+0x4a4>)
    418c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    418e:	fba1 1202 	umull	r1, r2, r1, r2
    4192:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4196:	0912      	lsrs	r2, r2, #4
    4198:	03db      	lsls	r3, r3, #15
    419a:	fb03 f302 	mul.w	r3, r3, r2
    419e:	4a20      	ldr	r2, [pc, #128]	; (4220 <getTrngSource+0x4a8>)
    41a0:	099b      	lsrs	r3, r3, #6
    41a2:	6013      	str	r3, [r2, #0]
    41a4:	f8ca 6000 	str.w	r6, [sl]
    41a8:	9b06      	ldr	r3, [sp, #24]
    41aa:	f8db 1000 	ldr.w	r1, [fp]
    41ae:	021a      	lsls	r2, r3, #8
    41b0:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    41b4:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    41b8:	431a      	orrs	r2, r3
    41ba:	0a13      	lsrs	r3, r2, #8
    41bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    41c0:	4313      	orrs	r3, r2
    41c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    41c6:	f8cb 3000 	str.w	r3, [fp]
    41ca:	9b02      	ldr	r3, [sp, #8]
    41cc:	3b01      	subs	r3, #1
    41ce:	9302      	str	r3, [sp, #8]
    41d0:	f47f ae07 	bne.w	3de2 <getTrngSource+0x6a>
    41d4:	2000      	movs	r0, #0
    41d6:	e629      	b.n	3e2c <getTrngSource+0xb4>
    41d8:	2403      	movs	r4, #3
    41da:	e7b2      	b.n	4142 <getTrngSource+0x3ca>
    41dc:	2402      	movs	r4, #2
    41de:	e7b0      	b.n	4142 <getTrngSource+0x3ca>
    41e0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    41e4:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    41e8:	3101      	adds	r1, #1
    41ea:	d006      	beq.n	41fa <getTrngSource+0x482>
    41ec:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    41f0:	e745      	b.n	407e <getTrngSource+0x306>
    41f2:	2703      	movs	r7, #3
    41f4:	e71a      	b.n	402c <getTrngSource+0x2b4>
    41f6:	2702      	movs	r7, #2
    41f8:	e718      	b.n	402c <getTrngSource+0x2b4>
    41fa:	2316      	movs	r3, #22
    41fc:	e743      	b.n	4086 <getTrngSource+0x30e>
    41fe:	bf00      	nop
    4200:	508411c4 	.word	0x508411c4
    4204:	50841140 	.word	0x50841140
    4208:	5084112c 	.word	0x5084112c
    420c:	50841100 	.word	0x50841100
    4210:	0ffffffe 	.word	0x0ffffffe
    4214:	5084110c 	.word	0x5084110c
    4218:	50841138 	.word	0x50841138
    421c:	aaaaaaab 	.word	0xaaaaaaab
    4220:	508411d8 	.word	0x508411d8
    4224:	00f10c36 	.word	0x00f10c36

00004228 <LLF_RND_GetTrngSource>:
    4228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    422c:	4c1b      	ldr	r4, [pc, #108]	; (429c <LLF_RND_GetTrngSource+0x74>)
    422e:	b085      	sub	sp, #20
    4230:	4607      	mov	r7, r0
    4232:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    4236:	4688      	mov	r8, r1
    4238:	6820      	ldr	r0, [r4, #0]
    423a:	f04f 31ff 	mov.w	r1, #4294967295
    423e:	4691      	mov	r9, r2
    4240:	f7ff fa10 	bl	3664 <CC_PalMutexLock>
    4244:	bb28      	cbnz	r0, 4292 <LLF_RND_GetTrngSource+0x6a>
    4246:	2000      	movs	r0, #0
    4248:	f7ff fa3c 	bl	36c4 <CC_PalPowerSaveModeSelect>
    424c:	b9e8      	cbnz	r0, 428a <LLF_RND_GetTrngSource+0x62>
    424e:	2300      	movs	r3, #0
    4250:	e9cd 5600 	strd	r5, r6, [sp]
    4254:	9302      	str	r3, [sp, #8]
    4256:	464a      	mov	r2, r9
    4258:	4641      	mov	r1, r8
    425a:	4638      	mov	r0, r7
    425c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    425e:	f7ff fd8b 	bl	3d78 <getTrngSource>
    4262:	4605      	mov	r5, r0
    4264:	2001      	movs	r0, #1
    4266:	f7ff fa2d 	bl	36c4 <CC_PalPowerSaveModeSelect>
    426a:	b950      	cbnz	r0, 4282 <LLF_RND_GetTrngSource+0x5a>
    426c:	6820      	ldr	r0, [r4, #0]
    426e:	f7ff fa01 	bl	3674 <CC_PalMutexUnlock>
    4272:	b110      	cbz	r0, 427a <LLF_RND_GetTrngSource+0x52>
    4274:	480a      	ldr	r0, [pc, #40]	; (42a0 <LLF_RND_GetTrngSource+0x78>)
    4276:	f7ff fb8d 	bl	3994 <CC_PalAbort>
    427a:	4628      	mov	r0, r5
    427c:	b005      	add	sp, #20
    427e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4282:	4808      	ldr	r0, [pc, #32]	; (42a4 <LLF_RND_GetTrngSource+0x7c>)
    4284:	f7ff fb86 	bl	3994 <CC_PalAbort>
    4288:	e7f0      	b.n	426c <LLF_RND_GetTrngSource+0x44>
    428a:	4807      	ldr	r0, [pc, #28]	; (42a8 <LLF_RND_GetTrngSource+0x80>)
    428c:	f7ff fb82 	bl	3994 <CC_PalAbort>
    4290:	e7dd      	b.n	424e <LLF_RND_GetTrngSource+0x26>
    4292:	4806      	ldr	r0, [pc, #24]	; (42ac <LLF_RND_GetTrngSource+0x84>)
    4294:	f7ff fb7e 	bl	3994 <CC_PalAbort>
    4298:	e7d5      	b.n	4246 <LLF_RND_GetTrngSource+0x1e>
    429a:	bf00      	nop
    429c:	2000006c 	.word	0x2000006c
    42a0:	00005324 	.word	0x00005324
    42a4:	0000535c 	.word	0x0000535c
    42a8:	0000533c 	.word	0x0000533c
    42ac:	0000530c 	.word	0x0000530c

000042b0 <LLF_RND_RunTrngStartupTest>:
    42b0:	b510      	push	{r4, lr}
    42b2:	2401      	movs	r4, #1
    42b4:	b086      	sub	sp, #24
    42b6:	ab05      	add	r3, sp, #20
    42b8:	e9cd 2401 	strd	r2, r4, [sp, #4]
    42bc:	9300      	str	r3, [sp, #0]
    42be:	2200      	movs	r2, #0
    42c0:	ab04      	add	r3, sp, #16
    42c2:	f7ff fd59 	bl	3d78 <getTrngSource>
    42c6:	b006      	add	sp, #24
    42c8:	bd10      	pop	{r4, pc}
    42ca:	bf00      	nop

000042cc <LLF_RND_WaitRngInterrupt>:
    42cc:	b508      	push	{r3, lr}
    42ce:	4601      	mov	r1, r0
    42d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    42d4:	f7ff fa50 	bl	3778 <CC_HalWaitInterruptRND>
    42d8:	2300      	movs	r3, #0
    42da:	4902      	ldr	r1, [pc, #8]	; (42e4 <LLF_RND_WaitRngInterrupt+0x18>)
    42dc:	4a02      	ldr	r2, [pc, #8]	; (42e8 <LLF_RND_WaitRngInterrupt+0x1c>)
    42de:	600b      	str	r3, [r1, #0]
    42e0:	6013      	str	r3, [r2, #0]
    42e2:	bd08      	pop	{r3, pc}
    42e4:	508411c8 	.word	0x508411c8
    42e8:	5084112c 	.word	0x5084112c

000042ec <LLF_RND_GetRoscSampleCnt>:
    42ec:	3801      	subs	r0, #1
    42ee:	2807      	cmp	r0, #7
    42f0:	d815      	bhi.n	431e <LLF_RND_GetRoscSampleCnt+0x32>
    42f2:	e8df f000 	tbb	[pc, r0]
    42f6:	0c10      	.short	0x0c10
    42f8:	14140814 	.word	0x14140814
    42fc:	0414      	.short	0x0414
    42fe:	68cb      	ldr	r3, [r1, #12]
    4300:	2000      	movs	r0, #0
    4302:	624b      	str	r3, [r1, #36]	; 0x24
    4304:	4770      	bx	lr
    4306:	688b      	ldr	r3, [r1, #8]
    4308:	2000      	movs	r0, #0
    430a:	624b      	str	r3, [r1, #36]	; 0x24
    430c:	4770      	bx	lr
    430e:	684b      	ldr	r3, [r1, #4]
    4310:	2000      	movs	r0, #0
    4312:	624b      	str	r3, [r1, #36]	; 0x24
    4314:	4770      	bx	lr
    4316:	680b      	ldr	r3, [r1, #0]
    4318:	2000      	movs	r0, #0
    431a:	624b      	str	r3, [r1, #36]	; 0x24
    431c:	4770      	bx	lr
    431e:	4801      	ldr	r0, [pc, #4]	; (4324 <LLF_RND_GetRoscSampleCnt+0x38>)
    4320:	4770      	bx	lr
    4322:	bf00      	nop
    4324:	00f10c31 	.word	0x00f10c31

00004328 <LLF_RND_GetFastestRosc>:
    4328:	680b      	ldr	r3, [r1, #0]
    432a:	e002      	b.n	4332 <LLF_RND_GetFastestRosc+0xa>
    432c:	2b08      	cmp	r3, #8
    432e:	600b      	str	r3, [r1, #0]
    4330:	d806      	bhi.n	4340 <LLF_RND_GetFastestRosc+0x18>
    4332:	6a02      	ldr	r2, [r0, #32]
    4334:	4213      	tst	r3, r2
    4336:	ea4f 0343 	mov.w	r3, r3, lsl #1
    433a:	d0f7      	beq.n	432c <LLF_RND_GetFastestRosc+0x4>
    433c:	2000      	movs	r0, #0
    433e:	4770      	bx	lr
    4340:	4800      	ldr	r0, [pc, #0]	; (4344 <LLF_RND_GetFastestRosc+0x1c>)
    4342:	4770      	bx	lr
    4344:	00f10c31 	.word	0x00f10c31

00004348 <LLF_RND_TurnOffTrng>:
    4348:	2300      	movs	r3, #0
    434a:	4904      	ldr	r1, [pc, #16]	; (435c <LLF_RND_TurnOffTrng+0x14>)
    434c:	4a04      	ldr	r2, [pc, #16]	; (4360 <LLF_RND_TurnOffTrng+0x18>)
    434e:	600b      	str	r3, [r1, #0]
    4350:	f44f 6080 	mov.w	r0, #1024	; 0x400
    4354:	6013      	str	r3, [r2, #0]
    4356:	f7ff b9fb 	b.w	3750 <CC_HalClearInterruptBit>
    435a:	bf00      	nop
    435c:	5084112c 	.word	0x5084112c
    4360:	508411c4 	.word	0x508411c4

00004364 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    4364:	b508      	push	{r3, lr}
	spm_config();
    4366:	f7fc ff55 	bl	1214 <spm_config>
	spm_jump();
}
    436a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    436e:	f7fc bee7 	b.w	1140 <spm_jump>

00004372 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4372:	b160      	cbz	r0, 438e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4374:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4376:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    437a:	2b01      	cmp	r3, #1
    437c:	d003      	beq.n	4386 <sys_notify_validate+0x14>
    437e:	2b03      	cmp	r3, #3
    4380:	d105      	bne.n	438e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4382:	6803      	ldr	r3, [r0, #0]
    4384:	b11b      	cbz	r3, 438e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4386:	2300      	movs	r3, #0
    4388:	6083      	str	r3, [r0, #8]
    438a:	4618      	mov	r0, r3
    438c:	4770      	bx	lr
		return -EINVAL;
    438e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4392:	4770      	bx	lr

00004394 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4394:	2200      	movs	r2, #0
    4396:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4398:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    439a:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    439e:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = 0;
    43a0:	bf14      	ite	ne
    43a2:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    43a4:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    43a6:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    43a8:	4618      	mov	r0, r3
    43aa:	4770      	bx	lr

000043ac <arch_printk_char_out>:
}
    43ac:	2000      	movs	r0, #0
    43ae:	4770      	bx	lr

000043b0 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    43b0:	b40f      	push	{r0, r1, r2, r3}
    43b2:	b507      	push	{r0, r1, r2, lr}
    43b4:	a904      	add	r1, sp, #16
    43b6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    43ba:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    43bc:	f7fc fa84 	bl	8c8 <vprintk>
	}
	va_end(ap);
}
    43c0:	b003      	add	sp, #12
    43c2:	f85d eb04 	ldr.w	lr, [sp], #4
    43c6:	b004      	add	sp, #16
    43c8:	4770      	bx	lr

000043ca <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    43ca:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    43cc:	f013 0307 	ands.w	r3, r3, #7
    43d0:	d105      	bne.n	43de <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    43d2:	6803      	ldr	r3, [r0, #0]
    43d4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    43d6:	bf0c      	ite	eq
    43d8:	2000      	moveq	r0, #0
    43da:	2003      	movne	r0, #3
    43dc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    43de:	2b02      	cmp	r3, #2
    43e0:	d105      	bne.n	43ee <process_recheck+0x24>
		   && (mgr->refs == 0)) {
    43e2:	8b43      	ldrh	r3, [r0, #26]
    43e4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    43e6:	bf14      	ite	ne
    43e8:	2000      	movne	r0, #0
    43ea:	2004      	moveq	r0, #4
    43ec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    43ee:	2b01      	cmp	r3, #1
    43f0:	d105      	bne.n	43fe <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    43f2:	6803      	ldr	r3, [r0, #0]
    43f4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    43f6:	bf0c      	ite	eq
    43f8:	2000      	moveq	r0, #0
    43fa:	2005      	movne	r0, #5
    43fc:	4770      	bx	lr
	int evt = EVT_NOP;
    43fe:	2000      	movs	r0, #0
}
    4400:	4770      	bx	lr

00004402 <notify_one>:
{
    4402:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4404:	460d      	mov	r5, r1
    4406:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4408:	4619      	mov	r1, r3
    440a:	1d28      	adds	r0, r5, #4
{
    440c:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    440e:	9300      	str	r3, [sp, #0]
    4410:	f7ff ffc0 	bl	4394 <sys_notify_finalize>
	if (cb) {
    4414:	4604      	mov	r4, r0
    4416:	b140      	cbz	r0, 442a <notify_one+0x28>
		cb(mgr, cli, state, res);
    4418:	e9dd 3200 	ldrd	r3, r2, [sp]
    441c:	4629      	mov	r1, r5
    441e:	4630      	mov	r0, r6
    4420:	46a4      	mov	ip, r4
}
    4422:	b002      	add	sp, #8
    4424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    4428:	4760      	bx	ip
}
    442a:	b002      	add	sp, #8
    442c:	bd70      	pop	{r4, r5, r6, pc}

0000442e <transition_complete>:
{
    442e:	b410      	push	{r4}
	__asm__ volatile(
    4430:	f04f 0420 	mov.w	r4, #32
    4434:	f3ef 8211 	mrs	r2, BASEPRI
    4438:	f384 8811 	msr	BASEPRI, r4
    443c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4440:	6141      	str	r1, [r0, #20]
}
    4442:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    4446:	2101      	movs	r1, #1
    4448:	f7fc ba4c 	b.w	8e4 <process_event>

0000444c <validate_args>:
{
    444c:	b510      	push	{r4, lr}
    444e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4450:	b140      	cbz	r0, 4464 <validate_args+0x18>
    4452:	b139      	cbz	r1, 4464 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4454:	1d08      	adds	r0, r1, #4
    4456:	f7ff ff8c 	bl	4372 <sys_notify_validate>
	if ((rv == 0)
    445a:	b928      	cbnz	r0, 4468 <validate_args+0x1c>
	    && ((cli->notify.flags
    445c:	68a3      	ldr	r3, [r4, #8]
    445e:	f033 0303 	bics.w	r3, r3, #3
    4462:	d001      	beq.n	4468 <validate_args+0x1c>
		rv = -EINVAL;
    4464:	f06f 0015 	mvn.w	r0, #21
}
    4468:	bd10      	pop	{r4, pc}

0000446a <onoff_manager_init>:
{
    446a:	b538      	push	{r3, r4, r5, lr}
    446c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    446e:	4605      	mov	r5, r0
    4470:	b158      	cbz	r0, 448a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4472:	b151      	cbz	r1, 448a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4474:	680b      	ldr	r3, [r1, #0]
    4476:	b143      	cbz	r3, 448a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4478:	684b      	ldr	r3, [r1, #4]
    447a:	b133      	cbz	r3, 448a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    447c:	221c      	movs	r2, #28
    447e:	2100      	movs	r1, #0
    4480:	f000 faec 	bl	4a5c <memset>
	return 0;
    4484:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4486:	612c      	str	r4, [r5, #16]
}
    4488:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    448a:	f06f 0015 	mvn.w	r0, #21
    448e:	e7fb      	b.n	4488 <onoff_manager_init+0x1e>

00004490 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4490:	b570      	push	{r4, r5, r6, lr}
    4492:	4604      	mov	r4, r0
    4494:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4496:	f7ff ffd9 	bl	444c <validate_args>

	if (rv < 0) {
    449a:	1e05      	subs	r5, r0, #0
    449c:	db31      	blt.n	4502 <onoff_request+0x72>
    449e:	f04f 0320 	mov.w	r3, #32
    44a2:	f3ef 8111 	mrs	r1, BASEPRI
    44a6:	f383 8811 	msr	BASEPRI, r3
    44aa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    44ae:	f64f 75ff 	movw	r5, #65535	; 0xffff
    44b2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    44b4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    44b6:	42ab      	cmp	r3, r5
    44b8:	f000 0207 	and.w	r2, r0, #7
    44bc:	d02e      	beq.n	451c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    44be:	2a02      	cmp	r2, #2
    44c0:	d10e      	bne.n	44e0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    44c2:	3301      	adds	r3, #1
    44c4:	8363      	strh	r3, [r4, #26]
	rv = state;
    44c6:	4615      	mov	r5, r2
		notify = true;
    44c8:	2301      	movs	r3, #1
	__asm__ volatile(
    44ca:	f381 8811 	msr	BASEPRI, r1
    44ce:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    44d2:	b1b3      	cbz	r3, 4502 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    44d4:	2300      	movs	r3, #0
    44d6:	4631      	mov	r1, r6
    44d8:	4620      	mov	r0, r4
    44da:	f7ff ff92 	bl	4402 <notify_one>
    44de:	e010      	b.n	4502 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    44e0:	0783      	lsls	r3, r0, #30
    44e2:	d001      	beq.n	44e8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    44e4:	2a06      	cmp	r2, #6
    44e6:	d10e      	bne.n	4506 <onoff_request+0x76>
	parent->next = child;
    44e8:	2300      	movs	r3, #0
    44ea:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    44ec:	6863      	ldr	r3, [r4, #4]
    44ee:	b993      	cbnz	r3, 4516 <onoff_request+0x86>
	list->head = node;
    44f0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    44f4:	4615      	mov	r5, r2
    44f6:	b962      	cbnz	r2, 4512 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    44f8:	460a      	mov	r2, r1
    44fa:	4620      	mov	r0, r4
    44fc:	2102      	movs	r1, #2
    44fe:	f7fc f9f1 	bl	8e4 <process_event>
		}
	}

	return rv;
}
    4502:	4628      	mov	r0, r5
    4504:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    4506:	2a05      	cmp	r2, #5
    4508:	bf0c      	ite	eq
    450a:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    450e:	f06f 0504 	mvnne.w	r5, #4
    4512:	2300      	movs	r3, #0
    4514:	e7d9      	b.n	44ca <onoff_request+0x3a>
	parent->next = child;
    4516:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4518:	6066      	str	r6, [r4, #4]
}
    451a:	e7eb      	b.n	44f4 <onoff_request+0x64>
		rv = -EAGAIN;
    451c:	f06f 050a 	mvn.w	r5, #10
    4520:	e7f7      	b.n	4512 <onoff_request+0x82>

00004522 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4522:	4604      	mov	r4, r0
    4524:	b508      	push	{r3, lr}
    4526:	4608      	mov	r0, r1
    4528:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    452a:	461a      	mov	r2, r3
    452c:	47a0      	blx	r4
	return z_impl_k_current_get();
    452e:	f7fe fdeb 	bl	3108 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    4532:	f7fd faf3 	bl	1b1c <z_impl_k_thread_abort>

00004536 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4536:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    4538:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    453c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    4540:	bf2c      	ite	cs
    4542:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    4546:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    454a:	4770      	bx	lr

0000454c <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    454c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    4550:	6880      	ldr	r0, [r0, #8]
    4552:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    4556:	bf2c      	ite	cs
    4558:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    455c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    4560:	4770      	bx	lr

00004562 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4562:	2201      	movs	r2, #1
{
    4564:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4566:	f7ff ffe6 	bl	4536 <chunk_field>
}
    456a:	0840      	lsrs	r0, r0, #1
    456c:	bd08      	pop	{r3, pc}

0000456e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    456e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    4570:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    4574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4578:	d308      	bcc.n	458c <set_chunk_used+0x1e>
		if (used) {
    457a:	684b      	ldr	r3, [r1, #4]
    457c:	b11a      	cbz	r2, 4586 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    457e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
    4582:	604b      	str	r3, [r1, #4]
    4584:	4770      	bx	lr
    4586:	f023 0301 	bic.w	r3, r3, #1
    458a:	e7fa      	b.n	4582 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    458c:	884b      	ldrh	r3, [r1, #2]
    458e:	b11a      	cbz	r2, 4598 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    4590:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    4594:	804b      	strh	r3, [r1, #2]
		}
	}
}
    4596:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    4598:	f023 0301 	bic.w	r3, r3, #1
    459c:	e7fa      	b.n	4594 <set_chunk_used+0x26>

0000459e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    459e:	0053      	lsls	r3, r2, #1
    45a0:	2201      	movs	r2, #1
    45a2:	f7ff bfd3 	b.w	454c <chunk_set>

000045a6 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    45a6:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    45a8:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    45aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    45ae:	bf2c      	ite	cs
    45b0:	2002      	movcs	r0, #2
    45b2:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    45b4:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    45b6:	fab0 f080 	clz	r0, r0
}
    45ba:	f1c0 001f 	rsb	r0, r0, #31
    45be:	4770      	bx	lr

000045c0 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    45c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45c4:	4604      	mov	r4, r0
    45c6:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
    45c8:	f7ff ffcb 	bl	4562 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
    45cc:	68a3      	ldr	r3, [r4, #8]
    45ce:	4601      	mov	r1, r0
    45d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    45d4:	d301      	bcc.n	45da <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    45d6:	2801      	cmp	r0, #1
    45d8:	d035      	beq.n	4646 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    45da:	4620      	mov	r0, r4
    45dc:	f7ff ffe3 	bl	45a6 <bucket_idx>
	if (b->next == 0) {
    45e0:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    45e4:	6916      	ldr	r6, [r2, #16]
    45e6:	b99e      	cbnz	r6, 4610 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    45e8:	2301      	movs	r3, #1
    45ea:	fa03 f000 	lsl.w	r0, r3, r0
    45ee:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    45f0:	4629      	mov	r1, r5
    45f2:	4303      	orrs	r3, r0
    45f4:	60e3      	str	r3, [r4, #12]
    45f6:	4620      	mov	r0, r4
		b->next = c;
    45f8:	6115      	str	r5, [r2, #16]
    45fa:	462b      	mov	r3, r5
    45fc:	2202      	movs	r2, #2
    45fe:	f7ff ffa5 	bl	454c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4602:	2203      	movs	r2, #3
    4604:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    4606:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    4608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    460c:	f7ff bf9e 	b.w	454c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    4610:	2202      	movs	r2, #2
    4612:	4631      	mov	r1, r6
    4614:	4620      	mov	r0, r4
    4616:	f7ff ff8e 	bl	4536 <chunk_field>
    461a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    461c:	4603      	mov	r3, r0
    461e:	2202      	movs	r2, #2
    4620:	4629      	mov	r1, r5
    4622:	4620      	mov	r0, r4
    4624:	f7ff ff92 	bl	454c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4628:	4633      	mov	r3, r6
    462a:	2203      	movs	r2, #3
    462c:	4629      	mov	r1, r5
    462e:	4620      	mov	r0, r4
    4630:	f7ff ff8c 	bl	454c <chunk_set>
    4634:	2203      	movs	r2, #3
    4636:	4639      	mov	r1, r7
    4638:	462b      	mov	r3, r5
    463a:	4620      	mov	r0, r4
    463c:	f7ff ff86 	bl	454c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    4640:	2202      	movs	r2, #2
    4642:	4631      	mov	r1, r6
    4644:	e7df      	b.n	4606 <free_list_add+0x46>
    4646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000464a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    464a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    464e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4650:	bf2c      	ite	cs
    4652:	2508      	movcs	r5, #8
    4654:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    4656:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    4658:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    465a:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    465c:	1dcc      	adds	r4, r1, #7
    465e:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
    4662:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
    4664:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    4668:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    466a:	440d      	add	r5, r1
    466c:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4670:	1b2d      	subs	r5, r5, r4
    4672:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4674:	4629      	mov	r1, r5
    4676:	4620      	mov	r0, r4
	h->len = buf_sz;
    4678:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    467a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    467c:	f7ff ff93 	bl	45a6 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    4680:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4682:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    4684:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    4686:	361b      	adds	r6, #27
    4688:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    468a:	f104 0210 	add.w	r2, r4, #16
    468e:	428b      	cmp	r3, r1
    4690:	db29      	blt.n	46e6 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    4692:	4632      	mov	r2, r6
    4694:	4620      	mov	r0, r4
    4696:	2100      	movs	r1, #0
    4698:	f7ff ff81 	bl	459e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    469c:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    469e:	4620      	mov	r0, r4
    46a0:	2201      	movs	r2, #1
    46a2:	2100      	movs	r1, #0
    46a4:	f7ff ff63 	bl	456e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    46a8:	463a      	mov	r2, r7
    46aa:	4631      	mov	r1, r6
    46ac:	f7ff ff77 	bl	459e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    46b0:	4633      	mov	r3, r6
    46b2:	4631      	mov	r1, r6
    46b4:	4620      	mov	r0, r4
    46b6:	2200      	movs	r2, #0
    46b8:	f7ff ff48 	bl	454c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    46bc:	4629      	mov	r1, r5
    46be:	4620      	mov	r0, r4
    46c0:	2200      	movs	r2, #0
    46c2:	f7ff ff6c 	bl	459e <set_chunk_size>
    46c6:	463b      	mov	r3, r7
    46c8:	4629      	mov	r1, r5
    46ca:	4620      	mov	r0, r4
    46cc:	2200      	movs	r2, #0
    46ce:	f7ff ff3d 	bl	454c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    46d2:	4629      	mov	r1, r5
    46d4:	4620      	mov	r0, r4
    46d6:	2201      	movs	r2, #1
    46d8:	f7ff ff49 	bl	456e <set_chunk_used>

	free_list_add(h, chunk0_size);
    46dc:	4631      	mov	r1, r6
}
    46de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    46e2:	f7ff bf6d 	b.w	45c0 <free_list_add>
		h->buckets[i].next = 0;
    46e6:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    46ea:	3301      	adds	r3, #1
    46ec:	e7cf      	b.n	468e <sys_heap_init+0x44>

000046ee <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    46ee:	4770      	bx	lr

000046f0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    46f0:	f7fd bdbe 	b.w	2270 <SystemInit>

000046f4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    46f4:	b2cb      	uxtb	r3, r1
    46f6:	210c      	movs	r1, #12
    46f8:	68c2      	ldr	r2, [r0, #12]
    46fa:	fb03 2101 	mla	r1, r3, r1, r2
    46fe:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    4700:	f000 0007 	and.w	r0, r0, #7
    4704:	4770      	bx	lr

00004706 <set_off_state>:
	__asm__ volatile(
    4706:	f04f 0320 	mov.w	r3, #32
    470a:	f3ef 8211 	mrs	r2, BASEPRI
    470e:	f383 8811 	msr	BASEPRI, r3
    4712:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4716:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4718:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    471c:	d001      	beq.n	4722 <set_off_state+0x1c>
    471e:	428b      	cmp	r3, r1
    4720:	d107      	bne.n	4732 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4722:	2301      	movs	r3, #1
    4724:	6003      	str	r3, [r0, #0]
	int err = 0;
    4726:	2000      	movs	r0, #0
	__asm__ volatile(
    4728:	f382 8811 	msr	BASEPRI, r2
    472c:	f3bf 8f6f 	isb	sy
}
    4730:	4770      	bx	lr
		err = -EPERM;
    4732:	f04f 30ff 	mov.w	r0, #4294967295
    4736:	e7f7      	b.n	4728 <set_off_state+0x22>

00004738 <set_starting_state>:
{
    4738:	b510      	push	{r4, lr}
	__asm__ volatile(
    473a:	f04f 0320 	mov.w	r3, #32
    473e:	f3ef 8211 	mrs	r2, BASEPRI
    4742:	f383 8811 	msr	BASEPRI, r3
    4746:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    474a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    474c:	f003 0407 	and.w	r4, r3, #7
    4750:	2c01      	cmp	r4, #1
    4752:	d106      	bne.n	4762 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4754:	6001      	str	r1, [r0, #0]
	int err = 0;
    4756:	2000      	movs	r0, #0
	__asm__ volatile(
    4758:	f382 8811 	msr	BASEPRI, r2
    475c:	f3bf 8f6f 	isb	sy
}
    4760:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4762:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4766:	428b      	cmp	r3, r1
		err = -EBUSY;
    4768:	bf14      	ite	ne
    476a:	f04f 30ff 	movne.w	r0, #4294967295
    476e:	f06f 000f 	mvneq.w	r0, #15
    4772:	e7f1      	b.n	4758 <set_starting_state+0x20>

00004774 <set_on_state>:
	__asm__ volatile(
    4774:	f04f 0320 	mov.w	r3, #32
    4778:	f3ef 8211 	mrs	r2, BASEPRI
    477c:	f383 8811 	msr	BASEPRI, r3
    4780:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4784:	6803      	ldr	r3, [r0, #0]
    4786:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    478a:	f043 0302 	orr.w	r3, r3, #2
    478e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4790:	f382 8811 	msr	BASEPRI, r2
    4794:	f3bf 8f6f 	isb	sy
}
    4798:	4770      	bx	lr

0000479a <onoff_started_callback>:
{
    479a:	b410      	push	{r4}
	notify(mgr, 0);
    479c:	241c      	movs	r4, #28
	return &data->mgr[type];
    479e:	68c0      	ldr	r0, [r0, #12]
    47a0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    47a2:	fb03 0004 	mla	r0, r3, r4, r0
    47a6:	2100      	movs	r1, #0
}
    47a8:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    47ac:	4710      	bx	r2

000047ae <blocking_start_callback>:
{
    47ae:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    47b0:	f7fe bcb0 	b.w	3114 <z_impl_k_sem_give>

000047b4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    47b4:	2000      	movs	r0, #0
    47b6:	f7fd be57 	b.w	2468 <nrfx_clock_stop>

000047ba <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    47ba:	2000      	movs	r0, #0
    47bc:	f7fd be22 	b.w	2404 <nrfx_clock_start>

000047c0 <api_stop>:
{
    47c0:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    47c2:	230c      	movs	r3, #12
    47c4:	b2cc      	uxtb	r4, r1
    47c6:	4363      	muls	r3, r4
{
    47c8:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    47ca:	68c0      	ldr	r0, [r0, #12]
    47cc:	3340      	adds	r3, #64	; 0x40
    47ce:	2180      	movs	r1, #128	; 0x80
    47d0:	4418      	add	r0, r3
    47d2:	f7ff ff98 	bl	4706 <set_off_state>
	if (err < 0) {
    47d6:	2800      	cmp	r0, #0
    47d8:	db05      	blt.n	47e6 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    47da:	6869      	ldr	r1, [r5, #4]
    47dc:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    47e0:	6863      	ldr	r3, [r4, #4]
    47e2:	4798      	blx	r3
	return 0;
    47e4:	2000      	movs	r0, #0
}
    47e6:	bd38      	pop	{r3, r4, r5, pc}

000047e8 <api_start>:
{
    47e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    47ec:	f04f 080c 	mov.w	r8, #12
    47f0:	b2cd      	uxtb	r5, r1
    47f2:	fb08 f805 	mul.w	r8, r8, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    47f6:	68c4      	ldr	r4, [r0, #12]
{
    47f8:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    47fa:	f108 0040 	add.w	r0, r8, #64	; 0x40
    47fe:	2180      	movs	r1, #128	; 0x80
    4800:	4420      	add	r0, r4
{
    4802:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
    4804:	f7ff ff98 	bl	4738 <set_starting_state>
	if (err < 0) {
    4808:	2800      	cmp	r0, #0
    480a:	db09      	blt.n	4820 <api_start+0x38>
	subdata->cb = data->cb;
    480c:	687b      	ldr	r3, [r7, #4]
    480e:	4444      	add	r4, r8
    4810:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
    4812:	68bb      	ldr	r3, [r7, #8]
    4814:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
    4816:	6873      	ldr	r3, [r6, #4]
    4818:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    481c:	4798      	blx	r3
	return 0;
    481e:	2000      	movs	r0, #0
}
    4820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004824 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4824:	4770      	bx	lr

00004826 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4826:	4770      	bx	lr

00004828 <sys_clock_disable>:
    4828:	4770      	bx	lr

0000482a <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    482a:	2300      	movs	r3, #0
{
    482c:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    482e:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    4830:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    4834:	f7fe ffbe 	bl	37b4 <mbedtls_platform_setup>
}
    4838:	b003      	add	sp, #12
    483a:	f85d fb04 	ldr.w	pc, [sp], #4

0000483e <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    483e:	2990      	cmp	r1, #144	; 0x90
{
    4840:	b508      	push	{r3, lr}
    4842:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    4844:	d139      	bne.n	48ba <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    4846:	460a      	mov	r2, r1
    4848:	4601      	mov	r1, r0
    484a:	2000      	movs	r0, #0
    484c:	f7fe ffbe 	bl	37cc <mbedtls_hardware_poll>
}
    4850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4854:	4671      	mov	r1, lr
    4856:	4672      	mov	r2, lr
    4858:	4673      	mov	r3, lr
    485a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    485e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    4862:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4866:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    486a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    486e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    4872:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    4876:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    487a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    487e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    4882:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    4886:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    488a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    488e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    4892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    4896:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    489a:	f38e 8c00 	msr	CPSR_fs, lr
    489e:	b410      	push	{r4}
    48a0:	eef1 ca10 	vmrs	ip, fpscr
    48a4:	f64f 7460 	movw	r4, #65376	; 0xff60
    48a8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    48ac:	ea0c 0c04 	and.w	ip, ip, r4
    48b0:	eee1 ca10 	vmsr	fpscr, ip
    48b4:	bc10      	pop	{r4}
    48b6:	46f4      	mov	ip, lr
    48b8:	4774      	bxns	lr
		return -EINVAL;
    48ba:	f06f 0015 	mvn.w	r0, #21
    48be:	e7c7      	b.n	4850 <__acle_se_spm_request_random_number+0x12>

000048c0 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    48c0:	2000      	movs	r0, #0
    48c2:	f7fc b911 	b.w	ae8 <sys_reboot>

000048c6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    48c6:	2100      	movs	r1, #0
    48c8:	2001      	movs	r0, #1
    48ca:	f000 b832 	b.w	4932 <z_arm_fatal_error>

000048ce <irq_target_state_set>:
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    48ce:	b243      	sxtb	r3, r0
    48d0:	b9c9      	cbnz	r1, 4906 <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
    48d2:	2b00      	cmp	r3, #0
    48d4:	db15      	blt.n	4902 <irq_target_state_set+0x34>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    48d6:	2101      	movs	r1, #1
    48d8:	095b      	lsrs	r3, r3, #5
    48da:	009b      	lsls	r3, r3, #2
    48dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    48e0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    48e4:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    48e8:	f000 001f 	and.w	r0, r0, #31
    48ec:	4081      	lsls	r1, r0
    48ee:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    48f2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    48f6:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    48fa:	40c1      	lsrs	r1, r0
    48fc:	f001 0101 	and.w	r1, r1, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    4900:	b2c9      	uxtb	r1, r1
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
	}
}
    4902:	4608      	mov	r0, r1
    4904:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    4906:	2b00      	cmp	r3, #0
    4908:	db0d      	blt.n	4926 <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    490a:	2201      	movs	r2, #1
    490c:	095b      	lsrs	r3, r3, #5
    490e:	009b      	lsls	r3, r3, #2
    4910:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4914:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4918:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    491c:	f000 001f 	and.w	r0, r0, #31
    4920:	4082      	lsls	r2, r0
    4922:	430a      	orrs	r2, r1
    4924:	e7e5      	b.n	48f2 <irq_target_state_set+0x24>
		return IRQ_TARGET_STATE_SECURE;
    4926:	2100      	movs	r1, #0
    4928:	e7eb      	b.n	4902 <irq_target_state_set+0x34>

0000492a <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    492a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    492c:	f383 880b 	msr	PSPLIM, r3
}
    4930:	4770      	bx	lr

00004932 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4932:	f000 b937 	b.w	4ba4 <z_fatal_error>

00004936 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4936:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4938:	6800      	ldr	r0, [r0, #0]
    493a:	f000 b933 	b.w	4ba4 <z_fatal_error>

0000493e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    493e:	b508      	push	{r3, lr}
	handler();
    4940:	f7fc ff3e 	bl	17c0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4948:	f7fd b8bc 	b.w	1ac4 <z_arm_exc_exit>

0000494c <mpu_configure_region>:
{
    494c:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    494e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    4950:	680c      	ldr	r4, [r1, #0]
{
    4952:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    4954:	890a      	ldrh	r2, [r1, #8]
    4956:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    4958:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    495a:	3b01      	subs	r3, #1
    495c:	f024 041f 	bic.w	r4, r4, #31
    4960:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    4962:	f002 021f 	and.w	r2, r2, #31
    4966:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    496a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    496e:	280f      	cmp	r0, #15
    4970:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    4972:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4976:	9303      	str	r3, [sp, #12]
    4978:	d805      	bhi.n	4986 <mpu_configure_region+0x3a>
	region_init(index, region_conf);
    497a:	4669      	mov	r1, sp
    497c:	f7fd f924 	bl	1bc8 <region_init>
}
    4980:	4620      	mov	r0, r4
    4982:	b005      	add	sp, #20
    4984:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    4986:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    498a:	e7f9      	b.n	4980 <mpu_configure_region+0x34>

0000498c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    498c:	e840 f000 	tt	r0, r0
    4990:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    4992:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    4996:	bf14      	ite	ne
    4998:	4618      	movne	r0, r3
    499a:	f06f 0015 	mvneq.w	r0, #21
    499e:	4770      	bx	lr

000049a0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    49a0:	3801      	subs	r0, #1
    49a2:	3901      	subs	r1, #1
    49a4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    49a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    49ac:	4293      	cmp	r3, r2
    49ae:	d101      	bne.n	49b4 <strcmp+0x14>
    49b0:	2b00      	cmp	r3, #0
    49b2:	d1f7      	bne.n	49a4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    49b4:	1a98      	subs	r0, r3, r2
    49b6:	4770      	bx	lr

000049b8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    49b8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    49ba:	b15a      	cbz	r2, 49d4 <memcmp+0x1c>
    49bc:	3901      	subs	r1, #1
    49be:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    49c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    49c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    49c8:	42a0      	cmp	r0, r4
    49ca:	d001      	beq.n	49d0 <memcmp+0x18>
    49cc:	429a      	cmp	r2, r3
    49ce:	d0f7      	beq.n	49c0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    49d0:	1ad0      	subs	r0, r2, r3
}
    49d2:	bd10      	pop	{r4, pc}
		return 0;
    49d4:	4610      	mov	r0, r2
    49d6:	e7fc      	b.n	49d2 <memcmp+0x1a>

000049d8 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    49d8:	1a43      	subs	r3, r0, r1
    49da:	4293      	cmp	r3, r2
{
    49dc:	b510      	push	{r4, lr}
    49de:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    49e2:	d308      	bcc.n	49f6 <memmove+0x1e>
	char *dest = d;
    49e4:	4602      	mov	r2, r0
    49e6:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    49e8:	429a      	cmp	r2, r3
    49ea:	d00b      	beq.n	4a04 <memmove+0x2c>
			*dest = *src;
    49ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    49f0:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    49f4:	e7f8      	b.n	49e8 <memmove+0x10>
    49f6:	440a      	add	r2, r1
			dest[n] = src[n];
    49f8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    49fc:	428a      	cmp	r2, r1
			dest[n] = src[n];
    49fe:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    4a02:	d1f9      	bne.n	49f8 <memmove+0x20>
		}
	}

	return d;
}
    4a04:	bd10      	pop	{r4, pc}

00004a06 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4a06:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4a08:	ea81 0400 	eor.w	r4, r1, r0
    4a0c:	07a5      	lsls	r5, r4, #30
    4a0e:	4603      	mov	r3, r0
    4a10:	d00b      	beq.n	4a2a <memcpy+0x24>
    4a12:	3b01      	subs	r3, #1
    4a14:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4a16:	4291      	cmp	r1, r2
    4a18:	d11b      	bne.n	4a52 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4a1c:	2a00      	cmp	r2, #0
    4a1e:	d0fc      	beq.n	4a1a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4a20:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    4a24:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    4a26:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    4a2a:	079c      	lsls	r4, r3, #30
    4a2c:	d1f6      	bne.n	4a1c <memcpy+0x16>
    4a2e:	f022 0403 	bic.w	r4, r2, #3
    4a32:	1f1d      	subs	r5, r3, #4
    4a34:	0896      	lsrs	r6, r2, #2
    4a36:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4a38:	42b9      	cmp	r1, r7
    4a3a:	d105      	bne.n	4a48 <memcpy+0x42>
    4a3c:	f06f 0503 	mvn.w	r5, #3
    4a40:	4423      	add	r3, r4
    4a42:	fb05 2206 	mla	r2, r5, r6, r2
    4a46:	e7e4      	b.n	4a12 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4a48:	f851 cb04 	ldr.w	ip, [r1], #4
    4a4c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    4a50:	e7f2      	b.n	4a38 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    4a52:	f811 4b01 	ldrb.w	r4, [r1], #1
    4a56:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4a5a:	e7dc      	b.n	4a16 <memcpy+0x10>

00004a5c <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    4a5c:	4603      	mov	r3, r0
{
    4a5e:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    4a60:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4a62:	079c      	lsls	r4, r3, #30
    4a64:	d111      	bne.n	4a8a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4a66:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4a6a:	f022 0603 	bic.w	r6, r2, #3
    4a6e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    4a72:	441e      	add	r6, r3
    4a74:	0894      	lsrs	r4, r2, #2
    4a76:	42b3      	cmp	r3, r6
    4a78:	d10d      	bne.n	4a96 <memset+0x3a>
    4a7a:	f06f 0503 	mvn.w	r5, #3
    4a7e:	fb05 2204 	mla	r2, r5, r4, r2
    4a82:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    4a84:	4293      	cmp	r3, r2
    4a86:	d109      	bne.n	4a9c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4a88:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    4a8a:	2a00      	cmp	r2, #0
    4a8c:	d0fc      	beq.n	4a88 <memset+0x2c>
		*(d_byte++) = c_byte;
    4a8e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4a92:	3a01      	subs	r2, #1
    4a94:	e7e5      	b.n	4a62 <memset+0x6>
		*(d_word++) = c_word;
    4a96:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    4a9a:	e7ec      	b.n	4a76 <memset+0x1a>
		*(d_byte++) = c_byte;
    4a9c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4aa0:	e7f0      	b.n	4a84 <memset+0x28>

00004aa2 <_stdout_hook_default>:
}
    4aa2:	f04f 30ff 	mov.w	r0, #4294967295
    4aa6:	4770      	bx	lr

00004aa8 <uarte_nrfx_config_get>:
{
    4aa8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4aaa:	68c2      	ldr	r2, [r0, #12]
    4aac:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4ab0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4ab4:	2000      	movs	r0, #0
    4ab6:	4770      	bx	lr

00004ab8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4ab8:	6843      	ldr	r3, [r0, #4]
    4aba:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4abc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4ac0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4ac4:	4770      	bx	lr

00004ac6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4ac6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    4ac8:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    4aca:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4acc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4ad0:	b148      	cbz	r0, 4ae6 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ad2:	2000      	movs	r0, #0
	*c = data->rx_data;
    4ad4:	7c12      	ldrb	r2, [r2, #16]
    4ad6:	700a      	strb	r2, [r1, #0]
    4ad8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4adc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ae0:	2201      	movs	r2, #1
    4ae2:	601a      	str	r2, [r3, #0]
	return 0;
    4ae4:	4770      	bx	lr
		return -1;
    4ae6:	f04f 30ff 	mov.w	r0, #4294967295
}
    4aea:	4770      	bx	lr

00004aec <uarte_nrfx_poll_out>:
{
    4aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    4af0:	6843      	ldr	r3, [r0, #4]
{
    4af2:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    4af6:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4af8:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    4afa:	f000 f938 	bl	4d6e <k_is_in_isr>
    4afe:	bb98      	cbnz	r0, 4b68 <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
    4b00:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4b02:	f04f 0801 	mov.w	r8, #1
    4b06:	f106 070c 	add.w	r7, r6, #12
    4b0a:	e8d7 3fef 	ldaex	r3, [r7]
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d103      	bne.n	4b1a <uarte_nrfx_poll_out+0x2e>
    4b12:	e8c7 8fe2 	stlex	r2, r8, [r7]
    4b16:	2a00      	cmp	r2, #0
    4b18:	d1f7      	bne.n	4b0a <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
    4b1a:	d007      	beq.n	4b2c <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
    4b1c:	2021      	movs	r0, #33	; 0x21
    4b1e:	2100      	movs	r1, #0
    4b20:	3d01      	subs	r5, #1
    4b22:	f7fe fad1 	bl	30c8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    4b26:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4b2a:	d1ee      	bne.n	4b0a <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b2c:	2300      	movs	r3, #0
    4b2e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    4b32:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4b36:	f10d 0307 	add.w	r3, sp, #7
    4b3a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4b3e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b40:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    4b44:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b48:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4b4a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    4b4e:	b923      	cbnz	r3, 4b5a <uarte_nrfx_poll_out+0x6e>
    4b50:	2001      	movs	r0, #1
    4b52:	f000 f81a 	bl	4b8a <nrfx_busy_wait>
    4b56:	3d01      	subs	r5, #1
    4b58:	d1f7      	bne.n	4b4a <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b5a:	2301      	movs	r3, #1
    4b5c:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    4b5e:	2300      	movs	r3, #0
    4b60:	60f3      	str	r3, [r6, #12]
}
    4b62:	b002      	add	sp, #8
    4b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    4b68:	2301      	movs	r3, #1
    4b6a:	60f3      	str	r3, [r6, #12]
    4b6c:	e7de      	b.n	4b2c <uarte_nrfx_poll_out+0x40>

00004b6e <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    4b6e:	2000      	movs	r0, #0
{
    4b70:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
    4b72:	f7fc ffb5 	bl	1ae0 <sys_arch_reboot>

00004b76 <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(const struct device *dev)
{
    4b76:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    4b78:	f7fc fca6 	bl	14c8 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    4b7c:	f7fc fd28 	bl	15d0 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    4b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    4b84:	f7fe beda 	b.w	393c <nrf_cc310_platform_init_no_rng>

00004b88 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4b88:	4700      	bx	r0

00004b8a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4b8a:	f000 b8f6 	b.w	4d7a <z_impl_k_busy_wait>

00004b8e <nrfx_clock_enable>:
{
    4b8e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4b90:	2005      	movs	r0, #5
    4b92:	f7fc fd99 	bl	16c8 <arch_irq_is_enabled>
    4b96:	b920      	cbnz	r0, 4ba2 <nrfx_clock_enable+0x14>
}
    4b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4b9c:	2005      	movs	r0, #5
    4b9e:	f7fc bd83 	b.w	16a8 <arch_irq_enable>
    4ba2:	bd08      	pop	{r3, pc}

00004ba4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4ba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4ba6:	4605      	mov	r5, r0
    4ba8:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    4baa:	f04f 0320 	mov.w	r3, #32
    4bae:	f3ef 8611 	mrs	r6, BASEPRI
    4bb2:	f383 8811 	msr	BASEPRI, r3
    4bb6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4bba:	f7fe faa5 	bl	3108 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4bbe:	9901      	ldr	r1, [sp, #4]
    4bc0:	4604      	mov	r4, r0
    4bc2:	4628      	mov	r0, r5
    4bc4:	f7ff ffd3 	bl	4b6e <k_sys_fatal_error_handler>
	__asm__ volatile(
    4bc8:	f386 8811 	msr	BASEPRI, r6
    4bcc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4bd0:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4bd2:	b002      	add	sp, #8
    4bd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4bd8:	f7fc bfa0 	b.w	1b1c <z_impl_k_thread_abort>

00004bdc <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    4bdc:	f7ff be23 	b.w	4826 <z_clock_idle_exit>

00004be0 <k_mem_slab_init>:
{
    4be0:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    4be2:	2400      	movs	r4, #0
    4be4:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4be6:	ea41 0402 	orr.w	r4, r1, r2
    4bea:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    4bee:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    4bf2:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4bf4:	d10c      	bne.n	4c10 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4bf6:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4bf8:	42a3      	cmp	r3, r4
    4bfa:	d103      	bne.n	4c04 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    4bfc:	e9c0 0000 	strd	r0, r0, [r0]
}
    4c00:	2000      	movs	r0, #0
}
    4c02:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    4c04:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4c06:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    4c08:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    4c0a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    4c0c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4c0e:	e7f3      	b.n	4bf8 <k_mem_slab_init+0x18>
		return -EINVAL;
    4c10:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4c14:	e7f5      	b.n	4c02 <k_mem_slab_init+0x22>

00004c16 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    4c16:	2300      	movs	r3, #0
    4c18:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    4c1c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    4c20:	4618      	mov	r0, r3
    4c22:	4770      	bx	lr

00004c24 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4c24:	4603      	mov	r3, r0
    4c26:	b920      	cbnz	r0, 4c32 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4c28:	f3ef 8205 	mrs	r2, IPSR
    4c2c:	b90a      	cbnz	r2, 4c32 <z_reschedule_irqlock+0xe>
    4c2e:	f7fc bce5 	b.w	15fc <arch_swap>
    4c32:	f383 8811 	msr	BASEPRI, r3
    4c36:	f3bf 8f6f 	isb	sy
}
    4c3a:	4770      	bx	lr

00004c3c <z_reschedule_unlocked>:
	__asm__ volatile(
    4c3c:	f04f 0320 	mov.w	r3, #32
    4c40:	f3ef 8011 	mrs	r0, BASEPRI
    4c44:	f383 8811 	msr	BASEPRI, r3
    4c48:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4c4c:	f7ff bfea 	b.w	4c24 <z_reschedule_irqlock>

00004c50 <unpend_thread_no_timeout>:
{
    4c50:	4601      	mov	r1, r0
    4c52:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4c54:	6880      	ldr	r0, [r0, #8]
    4c56:	f7fd ff6f 	bl	2b38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4c5a:	7b4b      	ldrb	r3, [r1, #13]
    4c5c:	f023 0302 	bic.w	r3, r3, #2
    4c60:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    4c62:	2300      	movs	r3, #0
    4c64:	608b      	str	r3, [r1, #8]
}
    4c66:	bd08      	pop	{r3, pc}

00004c68 <z_priq_dumb_best>:
	return list->head == list;
    4c68:	6803      	ldr	r3, [r0, #0]
}
    4c6a:	4298      	cmp	r0, r3
    4c6c:	bf14      	ite	ne
    4c6e:	4618      	movne	r0, r3
    4c70:	2000      	moveq	r0, #0
    4c72:	4770      	bx	lr

00004c74 <z_ready_thread>:
{
    4c74:	b510      	push	{r4, lr}
    4c76:	f04f 0320 	mov.w	r3, #32
    4c7a:	f3ef 8411 	mrs	r4, BASEPRI
    4c7e:	f383 8811 	msr	BASEPRI, r3
    4c82:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    4c86:	f7fd ffad 	bl	2be4 <ready_thread>
	__asm__ volatile(
    4c8a:	f384 8811 	msr	BASEPRI, r4
    4c8e:	f3bf 8f6f 	isb	sy
}
    4c92:	bd10      	pop	{r4, pc}

00004c94 <z_thread_timeout>:
{
    4c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4c96:	4604      	mov	r4, r0
	__asm__ volatile(
    4c98:	f04f 0320 	mov.w	r3, #32
    4c9c:	f3ef 8511 	mrs	r5, BASEPRI
    4ca0:	f383 8811 	msr	BASEPRI, r3
    4ca4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    4ca8:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    4cac:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
    4cae:	b11b      	cbz	r3, 4cb8 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    4cb0:	9001      	str	r0, [sp, #4]
    4cb2:	f7ff ffcd 	bl	4c50 <unpend_thread_no_timeout>
    4cb6:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4cb8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4cbc:	f023 0314 	bic.w	r3, r3, #20
    4cc0:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
    4cc4:	f7fd ff8e 	bl	2be4 <ready_thread>
	__asm__ volatile(
    4cc8:	f385 8811 	msr	BASEPRI, r5
    4ccc:	f3bf 8f6f 	isb	sy
}
    4cd0:	b003      	add	sp, #12
    4cd2:	bd30      	pop	{r4, r5, pc}

00004cd4 <add_to_waitq_locked>:
{
    4cd4:	b538      	push	{r3, r4, r5, lr}
    4cd6:	4604      	mov	r4, r0
    4cd8:	460d      	mov	r5, r1
	unready_thread(thread);
    4cda:	f7fe f8db 	bl	2e94 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4cde:	7b63      	ldrb	r3, [r4, #13]
    4ce0:	f043 0302 	orr.w	r3, r3, #2
    4ce4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4ce6:	b17d      	cbz	r5, 4d08 <add_to_waitq_locked+0x34>
    4ce8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4cea:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4cec:	429d      	cmp	r5, r3
    4cee:	d012      	beq.n	4d16 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4cf0:	b18b      	cbz	r3, 4d16 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
    4cf2:	f994 200e 	ldrsb.w	r2, [r4, #14]
    4cf6:	f993 100e 	ldrsb.w	r1, [r3, #14]
    4cfa:	4291      	cmp	r1, r2
    4cfc:	dd05      	ble.n	4d0a <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
    4cfe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4d00:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4d04:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d06:	605c      	str	r4, [r3, #4]
}
    4d08:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4d0a:	6869      	ldr	r1, [r5, #4]
    4d0c:	428b      	cmp	r3, r1
    4d0e:	d002      	beq.n	4d16 <add_to_waitq_locked+0x42>
    4d10:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d12:	2b00      	cmp	r3, #0
    4d14:	d1ef      	bne.n	4cf6 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
    4d16:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    4d18:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    4d1a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4d1c:	686b      	ldr	r3, [r5, #4]
    4d1e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4d20:	606c      	str	r4, [r5, #4]
}
    4d22:	e7f1      	b.n	4d08 <add_to_waitq_locked+0x34>

00004d24 <z_unpend_first_thread>:
{
    4d24:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4d26:	f04f 0320 	mov.w	r3, #32
    4d2a:	f3ef 8211 	mrs	r2, BASEPRI
    4d2e:	f383 8811 	msr	BASEPRI, r3
    4d32:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    4d36:	f7ff ff97 	bl	4c68 <z_priq_dumb_best>
    4d3a:	4604      	mov	r4, r0
	__asm__ volatile(
    4d3c:	f382 8811 	msr	BASEPRI, r2
    4d40:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4d44:	b188      	cbz	r0, 4d6a <z_unpend_first_thread+0x46>
	__asm__ volatile(
    4d46:	f04f 0320 	mov.w	r3, #32
    4d4a:	f3ef 8511 	mrs	r5, BASEPRI
    4d4e:	f383 8811 	msr	BASEPRI, r3
    4d52:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    4d56:	f7ff ff7b 	bl	4c50 <unpend_thread_no_timeout>
	__asm__ volatile(
    4d5a:	f385 8811 	msr	BASEPRI, r5
    4d5e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    4d62:	f104 0018 	add.w	r0, r4, #24
    4d66:	f000 f80a 	bl	4d7e <z_abort_timeout>
}
    4d6a:	4620      	mov	r0, r4
    4d6c:	bd38      	pop	{r3, r4, r5, pc}

00004d6e <k_is_in_isr>:
    4d6e:	f3ef 8005 	mrs	r0, IPSR
}
    4d72:	3800      	subs	r0, #0
    4d74:	bf18      	it	ne
    4d76:	2001      	movne	r0, #1
    4d78:	4770      	bx	lr

00004d7a <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    4d7a:	f7fb beab 	b.w	ad4 <arch_busy_wait>

00004d7e <z_abort_timeout>:
{
    4d7e:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d80:	f04f 0220 	mov.w	r2, #32
    4d84:	f3ef 8411 	mrs	r4, BASEPRI
    4d88:	f382 8811 	msr	BASEPRI, r2
    4d8c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4d90:	6803      	ldr	r3, [r0, #0]
    4d92:	b13b      	cbz	r3, 4da4 <z_abort_timeout+0x26>
			remove_timeout(to);
    4d94:	f7fe faa0 	bl	32d8 <remove_timeout>
			ret = 0;
    4d98:	2000      	movs	r0, #0
	__asm__ volatile(
    4d9a:	f384 8811 	msr	BASEPRI, r4
    4d9e:	f3bf 8f6f 	isb	sy
}
    4da2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4da4:	f06f 0015 	mvn.w	r0, #21
    4da8:	e7f7      	b.n	4d9a <z_abort_timeout+0x1c>

00004daa <z_get_next_timeout_expiry>:
{
    4daa:	b510      	push	{r4, lr}
	__asm__ volatile(
    4dac:	f04f 0320 	mov.w	r3, #32
    4db0:	f3ef 8411 	mrs	r4, BASEPRI
    4db4:	f383 8811 	msr	BASEPRI, r3
    4db8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4dbc:	f7fe faa6 	bl	330c <next_timeout>
	__asm__ volatile(
    4dc0:	f384 8811 	msr	BASEPRI, r4
    4dc4:	f3bf 8f6f 	isb	sy
}
    4dc8:	bd10      	pop	{r4, pc}

00004dca <z_set_timeout_expiry>:
{
    4dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4dcc:	4604      	mov	r4, r0
    4dce:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    4dd0:	f04f 0320 	mov.w	r3, #32
    4dd4:	f3ef 8511 	mrs	r5, BASEPRI
    4dd8:	f383 8811 	msr	BASEPRI, r3
    4ddc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    4de0:	f7fe fa94 	bl	330c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4de4:	2801      	cmp	r0, #1
    4de6:	dd05      	ble.n	4df4 <z_set_timeout_expiry+0x2a>
    4de8:	42a0      	cmp	r0, r4
    4dea:	9901      	ldr	r1, [sp, #4]
    4dec:	dd02      	ble.n	4df4 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    4dee:	4620      	mov	r0, r4
    4df0:	f7fc f8a0 	bl	f34 <z_clock_set_timeout>
	__asm__ volatile(
    4df4:	f385 8811 	msr	BASEPRI, r5
    4df8:	f3bf 8f6f 	isb	sy
}
    4dfc:	b003      	add	sp, #12
    4dfe:	bd30      	pop	{r4, r5, pc}

00004e00 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    4e00:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    4e02:	f7fe fb9d 	bl	3540 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4e06:	bd08      	pop	{r3, pc}

00004e08 <k_heap_init>:
{
    4e08:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    4e0a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    4e0e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    4e12:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    4e16:	f7ff bc18 	b.w	464a <sys_heap_init>

00004e1a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    4e1a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

000058e0 <spm_request_read-0x2700>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f9 b9ae 	b.w	1344 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f9 ba02 	b.w	13f4 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fc bc23 	b.w	483e <__acle_se_spm_request_random_number>
	...
